{"cell_type":{"1f2759b2":"code","131cb275":"code","5838f4e4":"code","df58abe1":"code","e86aa14c":"code","142a7bad":"code","92fe0808":"code","aa767774":"code","0d540076":"code","e2db805d":"code","88c06205":"code","c00b2a25":"code","008b4e49":"code","ade3f3e9":"code","0611a9fd":"code","62b06069":"code","fb4191ce":"code","ae555d6c":"code","d128826e":"code","9584b166":"code","e8269894":"code","6755e98d":"code","88051c98":"code","ec440b3b":"code","fc1ca359":"code","3eab82b3":"code","274fa392":"code","6681c184":"code","8dccdf99":"code","5786c5b7":"code","21375acf":"code","3e3738e7":"code","c25f4a20":"code","0ab9805a":"code","a6e05c0e":"code","def02bcf":"code","789a9794":"code","f63b4078":"code","21e88ab1":"code","bf1018fe":"code","66827a3d":"code","05f01c3e":"code","31b95062":"code","c52122f0":"code","0cbef295":"code","0c51027f":"code","3ad78946":"code","351549c2":"markdown","9bd63ee4":"markdown","38c7cca9":"markdown","3e8556b5":"markdown","a1e4066b":"markdown","c6ca058e":"markdown","db44182f":"markdown","5237df14":"markdown","962fc165":"markdown","6d05f1bd":"markdown","a0a3eaee":"markdown"},"source":{"1f2759b2":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nnp.set_printoptions(suppress=True)\nimport warnings\nwarnings.filterwarnings('ignore')","131cb275":"# Importing datasets\ntrain = pd.read_csv('..\/input\/healthcare-analytic\/train.csv')\ntest = pd.read_csv('..\/input\/healthcare-analytic\/test.csv')","5838f4e4":"train.head()","df58abe1":"train.info()\ntrain.Stay.unique()","e86aa14c":"# NA values in train dataset\ntrain.isnull().sum().sort_values(ascending = False)","142a7bad":"# NA values in test dataset\ntest.isnull().sum().sort_values(ascending = False)","92fe0808":"# Dimension of train dataset\ntrain.shape","aa767774":"# Dimension of test dataset\ntest.shape","0d540076":"# Number of distinct observations in train dataset \nfor i in train.columns:\n    print(i, ':', train[i].nunique())","e2db805d":"# Number of distinct observations in test dataset\nfor i in test.columns:\n    print(i, ':', test[i].nunique())","88c06205":"#Replacing NA values in Bed Grade Column for both Train and Test datssets\ntrain['Bed Grade'].fillna(train['Bed Grade'].mode()[0], inplace = True)\ntest['Bed Grade'].fillna(test['Bed Grade'].mode()[0], inplace = True)","c00b2a25":"#Replacing NA values in  Column for both Train and Test datssets\ntrain['City_Code_Patient'].fillna(train['City_Code_Patient'].mode()[0], inplace = True)\ntest['City_Code_Patient'].fillna(test['City_Code_Patient'].mode()[0], inplace = True)","008b4e49":"# Label Encoding Stay column in train dataset\nfrom sklearn.preprocessing import LabelEncoder\nle = LabelEncoder()\ntrain['Stay'] = le.fit_transform(train['Stay'].astype('str'))","ade3f3e9":"train.head()","0611a9fd":"#Imputing dummy Stay column in test datset to concatenate with train dataset\ntest['Stay'] = -1\ndf = pd.concat([train, test])\ndf.shape","62b06069":"#Label Encoding all the columns in Train and test datasets\nfor i in ['Hospital_type_code', 'Hospital_region_code', 'Department',\n          'Ward_Type', 'Ward_Facility_Code', 'Type of Admission', 'Severity of Illness', 'Age']:\n    le = LabelEncoder()\n    df[i] = le.fit_transform(df[i].astype(str))","fb4191ce":"#Spearating Train and Test Datasets\ntrain = df[df['Stay']!=-1]\ntest = df[df['Stay']==-1]","ae555d6c":"def get_countid_enocde(train, test, cols, name):\n  temp = train.groupby(cols)['case_id'].count().reset_index().rename(columns = {'case_id': name})\n  temp2 = test.groupby(cols)['case_id'].count().reset_index().rename(columns = {'case_id': name})\n  train = pd.merge(train, temp, how='left', on= cols)\n  test = pd.merge(test,temp2, how='left', on= cols)\n  train[name] = train[name].astype('float')\n  test[name] = test[name].astype('float')\n  train[name].fillna(np.median(temp[name]), inplace = True)\n  test[name].fillna(np.median(temp2[name]), inplace = True)\n  return train, test","d128826e":"train, test = get_countid_enocde(train, test, ['patientid'], name = 'count_id_patient')\ntrain, test = get_countid_enocde(train, test, \n                                 ['patientid', 'Hospital_region_code'], name = 'count_id_patient_hospitalCode')\ntrain, test = get_countid_enocde(train, test, \n                                 ['patientid', 'Ward_Facility_Code'], name = 'count_id_patient_wardfacilityCode')","9584b166":"# Droping duplicate columns\ntest1 = test.drop(['Stay', 'patientid', 'Hospital_region_code', 'Ward_Facility_Code'], axis =1)\ntrain1 = train.drop(['case_id', 'patientid', 'Hospital_region_code', 'Ward_Facility_Code'], axis =1)","e8269894":"# Splitting train data for Naive Bayes and XGBoost\nX1 = train1.drop('Stay', axis =1)\ny1 = train1['Stay']\nfrom sklearn.model_selection import train_test_split\nX_train, X_test, y_train, y_test = train_test_split(X1, y1, test_size =0.20, random_state =100)","6755e98d":"from sklearn.naive_bayes import GaussianNB\ntarget = y_train.values\nfeatures = X_train.values\nclassifier_nb = GaussianNB()\nmodel_nb = classifier_nb.fit(features, target)","88051c98":"prediction_nb = model_nb.predict(X_test)\nfrom sklearn.metrics import accuracy_score\nacc_score_nb = accuracy_score(prediction_nb,y_test)\nprint(\"Acurracy:\", acc_score_nb*100)","ec440b3b":"import xgboost\nclassifier_xgb = xgboost.XGBClassifier(max_depth=4, learning_rate=0.1, n_estimators=800,\n                                  objective='multi:softmax', reg_alpha=0.5, reg_lambda=1.5,\n                                  booster='gbtree', n_jobs=4, min_child_weight=2, base_score= 0.75)","fc1ca359":"model_xgb = classifier_xgb.fit(X_train, y_train)","3eab82b3":"prediction_xgb = model_xgb.predict(X_test)\nacc_score_xgb = accuracy_score(prediction_xgb,y_test)\nprint(\"Accuracy:\", acc_score_xgb*100)","274fa392":"# Segregation of features and target variable\nX = train.drop('Stay', axis =1)\ny = train['Stay']\nprint(X.columns)\nz = test.drop('Stay', axis = 1)\nprint(z.columns)\n\n# Data Scaling\nfrom sklearn import preprocessing\nX_scale = preprocessing.scale(X)\nX_scale.shape","6681c184":"X_train, X_test, y_train, y_test = train_test_split(X_scale, y, test_size =0.20, random_state =100)","8dccdf99":"import keras\nfrom keras.models import Sequential\nfrom keras.layers import Dense\nimport tensorflow as tf","5786c5b7":"from keras.utils import to_categorical\n#Sparse Matrix\na = to_categorical(y_train)\nb = to_categorical(y_test)","21375acf":"model = Sequential()\nmodel.add(Dense(64, activation='relu', input_shape = (254750, 20))) \nmodel.add(Dense(128, activation='relu'))\nmodel.add(Dense(256, activation='relu'))\nmodel.add(Dense(512, activation='relu'))\nmodel.add(Dense(512, activation='relu'))\nmodel.add(Dense(11, activation='softmax'))","3e3738e7":"model.summary()","c25f4a20":"model.compile(optimizer= 'SGD', \n              loss='categorical_crossentropy', \n              metrics=['accuracy'])","0ab9805a":"callbacks = [tf.keras.callbacks.TensorBoard(\"logs_keras\")]\nmodel.fit(X_train, a, epochs=20, callbacks=callbacks, validation_split = 0.2)","a6e05c0e":"# Genrating tensorboard\n!tensorboard --logdir logs_keras","def02bcf":"# Retraining the model with 4 epochs\nmodel.fit(X_train, a, epochs=4, validation_split = 0.2)\nprint(\"\\n Model Evaluation\")\nmodel.evaluate(X_test,b)","789a9794":"# Naive Bayes\npred_nb = classifier_nb.predict(test1.iloc[:,1:])\nresult_nb = pd.DataFrame(pred_nb, columns=['Stay'])\nresult_nb['case_id'] = test1['case_id']\nresult_nb = result_nb[['case_id', 'Stay']]","f63b4078":"result_nb['Stay'] = result_nb['Stay'].replace({0:'0-10', 1: '11-20', 2: '21-30', 3:'31-40', 4: '41-50', 5: '51-60', 6: '61-70', 7: '71-80', 8: '81-90', 9: '91-100', 10: 'More than 100 Days'})\nresult_nb.head()","21e88ab1":"# XGBoost\npred_xgb = classifier_xgb.predict(test1.iloc[:,1:])\nresult_xgb = pd.DataFrame(pred_xgb, columns=['Stay'])\nresult_xgb['case_id'] = test1['case_id']\nresult_xgb = result_xgb[['case_id', 'Stay']]","bf1018fe":"result_xgb['Stay'] = result_xgb['Stay'].replace({0:'0-10', 1: '11-20', 2: '21-30', 3:'31-40', 4: '41-50', 5: '51-60', 6: '61-70', 7: '71-80', 8: '81-90', 9: '91-100', 10: 'More than 100 Days'})\nresult_xgb.head()","66827a3d":"# Neural Network\ntest_scale = preprocessing.scale(z)\ntest_scale.shape","05f01c3e":"pred = model.predict_classes(test_scale)\npred","31b95062":"result_nn = pd.DataFrame(pred, columns=['Stay'])\nresult_nn['case_id'] = test['case_id']\nresult_nn = result_nn[['case_id', 'Stay']]","c52122f0":"result_nn['Stay'] = result_nn['Stay'].replace({0:'0-10', 1: '11-20', 2: '21-30', 3:'31-40', 4: '41-50', 5: '51-60', 6: '61-70', 7: '71-80', 8: '81-90', 9: '91-100', 10: 'More than 100 Days'})\nresult_nn.head()","0cbef295":"# Naive Bayes\nprint(result_nb.groupby('Stay')['case_id'].nunique())","0c51027f":"# XGBoost\nprint(result_xgb.groupby('Stay')['case_id'].nunique())","3ad78946":"# Neural Networks\nprint(result_nn.groupby('Stay')['case_id'].nunique())","351549c2":"## Data Exploration","9bd63ee4":"### XGBoost Model","38c7cca9":"## Models","3e8556b5":"### Data Preparation","a1e4066b":"# Predictions","c6ca058e":"### Feature Engineering","db44182f":"### Neural Network","5237df14":"### Naive Bayes Model","962fc165":"## Results","6d05f1bd":"# Healthcare Analytics\n### The goal of this project is to accurately predict the Length of Stay for each patient so that the hospitals can optimize resources and function better.","a0a3eaee":"### Overview of Data"}}