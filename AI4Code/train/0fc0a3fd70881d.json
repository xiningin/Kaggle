{"cell_type":{"3d707154":"code","71ad448b":"code","258bd3d1":"code","4b49b2d9":"code","38580a08":"code","37a4efa1":"code","69ec74b6":"code","81cbee2c":"code","edba1b43":"code","2281baa8":"code","11a98856":"code","7ed89215":"code","d06940d2":"code","aaa3e4b5":"markdown","5240861e":"markdown","dcbf3e5f":"markdown","cbac0da6":"markdown","0f9b9c9a":"markdown","f5382d1d":"markdown","2728e487":"markdown"},"source":{"3d707154":"!pip uninstall fsspec -qq -y\n!pip install --no-index --find-links ..\/input\/hf-datasets\/wheels datasets -qq","71ad448b":"import pandas as pd\nimport numpy as np\nfrom datasets import Dataset\nfrom sklearn.metrics import mean_squared_error\nfrom transformers import AutoTokenizer, AutoModelForSequenceClassification, TrainingArguments, Trainer\n\n# disable W&B logging as we don't have access to the internet\n%env WANDB_DISABLED=True","258bd3d1":"model_checkpoint = '..\/input\/distilbertbaseuncased'\nbatch_size = 16\nmax_length = 256","4b49b2d9":"df = pd.read_csv('..\/input\/step-1-create-folds\/train_folds.csv') # https:\/\/www.kaggle.com\/abhishek\/step-1-create-folds\ndf = df.rename(columns={'target':'label'}) # HF expects this column name to pick up the target column in trainer\n\ntokenizer = AutoTokenizer.from_pretrained(model_checkpoint, use_fast=True)\n\ndef tokenize(batch): return tokenizer(batch['excerpt'], padding='max_length', truncation=True, max_length=max_length)\n\ntest_df = pd.read_csv('..\/input\/commonlitreadabilityprize\/test.csv')\ntest_df = test_df.rename(columns={'target':'label'})\n\ntest_dataset = Dataset.from_pandas(test_df)\ntest_dataset = test_dataset.map(tokenize, batched=True, batch_size=len(test_dataset))","38580a08":"def model_init():\n    return AutoModelForSequenceClassification.from_pretrained(model_checkpoint, num_labels=1) # note this is actually a regression model\n\ndef compute_metrics(pred):\n    return {\n        'rmse': mean_squared_error(pred.label_ids, pred.predictions, squared=False),\n    }\n\ndef init_trainer(fold, seed):\n    train_dataset = Dataset.from_pandas(df[df.kfold != fold].reset_index(drop=True))\n    valid_dataset = Dataset.from_pandas(df[df.kfold == fold].reset_index(drop=True))\n    train_dataset = train_dataset.map(tokenize, batched=True, batch_size=len(train_dataset))\n    valid_dataset = valid_dataset.map(tokenize, batched=True, batch_size=len(valid_dataset))\n    args = TrainingArguments(\n        \".\/tmp\",\n        evaluation_strategy = \"epoch\",\n        learning_rate=3e-5,\n        fp16=True,\n        per_device_train_batch_size=batch_size,\n        per_device_eval_batch_size=batch_size,\n        num_train_epochs=3,\n        seed=seed,\n        weight_decay=0.001,\n        load_best_model_at_end=True,\n    )\n    trainer = Trainer(\n        model_init=model_init,\n        args=args,\n        train_dataset=train_dataset,\n        eval_dataset=valid_dataset,\n        tokenizer=tokenizer,\n        compute_metrics=compute_metrics,\n    )    \n    return trainer","37a4efa1":"preds = []\nresults = []","69ec74b6":"for fold in range(5):\n    for seed in range(5):\n        trainer = init_trainer(fold, seed)\n        trainer.train()\n        metrics = trainer.evaluate()\n        results.append({\n            'fold': fold,\n            'seed': seed,\n            'rmse': metrics['eval_rmse']\n        })\n        test_preds = trainer.predict(test_dataset)\n        preds.append(test_preds[0])","81cbee2c":"res = pd.DataFrame(results)\nres","edba1b43":"res.rmse.mean(), res.rmse.std()","2281baa8":"folds = pd.concat([res.groupby('fold')['rmse'].agg('mean').to_frame(), res.groupby('fold')['rmse'].agg('std').to_frame()], axis=1)\nfolds.columns = ['mean', 'std']\nfolds","11a98856":"seeds = pd.concat([res.groupby('seed')['rmse'].agg('mean').to_frame(), res.groupby('seed')['rmse'].agg('std').to_frame()], axis=1)\nseeds.columns = ['mean', 'std']\nseeds","7ed89215":"res.rmse.hist(bins=5);","d06940d2":"preds = np.stack(preds)\nmean_preds = preds.mean(axis=0)\nsub = pd.read_csv('..\/input\/commonlitreadabilityprize\/sample_submission.csv')\nsub.target = mean_preds\nsub.to_csv('submission.csv', index=False)\nsub.head()","aaa3e4b5":"## Config","5240861e":"## Loading and preprocessing training data with HF datasets","dcbf3e5f":"## Model and Training with HF transformers","cbac0da6":"## Analysis","0f9b9c9a":"### Please upvote if you find this helpful :) ","f5382d1d":"## 25 DistilBERT models\n\nI'd like to see the CV score distribution after training the same model on 5 folds * 5 seeds. Let's see :) \n\n### Please upvote if you find this helpful :) ","2728e487":"## Submission"}}