{"cell_type":{"ffd339b7":"code","a7045ff0":"code","7dcdc516":"code","310393ff":"code","1892762d":"code","7db17639":"code","cd4882ec":"code","62c312bd":"code","6d240855":"code","afca7110":"code","7ff20d0a":"code","4ff433cb":"code","39ae07fb":"code","0c71e034":"code","3a04bfcb":"code","1c472b8d":"code","84e3c72c":"code","0e40ea3e":"code","c6b09166":"code","07de3cf9":"code","283c0eaa":"code","edd12767":"code","05251e92":"code","a73d195b":"code","f06f8482":"code","503cf54f":"code","265b0f55":"code","2a002560":"code","ba72cabc":"code","3e9066d9":"code","db6a41d3":"code","bc58df09":"code","6de19b74":"code","41eeb5d8":"code","54688c5c":"code","23fb3de8":"code","78a25201":"code","fdab1700":"code","0b960448":"code","0437f069":"code","ec0d0d50":"code","e5e501cc":"code","f265b44b":"code","3ced5bcc":"code","cdccc6f6":"code","0e902a2d":"code","17eaee21":"code","24387a02":"code","c770f40a":"code","61731fa4":"code","82f05187":"code","e006f286":"code","ab19513b":"code","208f49d4":"code","7f4e9e8c":"code","39cebfc5":"code","74afb91b":"code","6c86659f":"code","eff911e4":"code","7f249bcc":"code","3ba6955c":"code","218117ea":"code","6028bd55":"code","50fcd57b":"code","e42473d3":"code","75158b0c":"code","62f46808":"code","b58cdea2":"code","0229402c":"code","68229f36":"code","c9de34db":"code","de5eaea7":"code","dc689ce5":"code","e482d356":"code","0882976c":"code","5f0e4dbe":"code","8e889bab":"code","a2e2a28e":"code","405fdee4":"code","b70c90eb":"code","20acc3b6":"code","468c809b":"code","8ec18597":"code","4cc14059":"code","71b8ce37":"code","4a492972":"code","3836de4d":"code","7dd4c623":"code","bfe42694":"code","feaad5ea":"code","7d7f9f9a":"code","2538f012":"code","d5abe08d":"code","8127dfd8":"code","f17d0ca5":"code","c17ebcec":"code","dcdd2570":"code","066d07d4":"code","a325404f":"code","6ff7d658":"code","21ab203a":"markdown","63449127":"markdown","17902a90":"markdown","63f6a58a":"markdown"},"source":{"ffd339b7":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nfrom datetime import datetime","a7045ff0":"import xgboost as xgb\nfrom xgboost import plot_importance, plot_tree\nfrom xgboost import XGBClassifier\n","7dcdc516":"df = pd.read_csv(\"..\/input\/demand-forecasting-kernels-only\/train.csv\")\ndf.head()","310393ff":"split = \"2017-01-01\"","1892762d":"df['date'] =  pd.to_datetime(df['date'])","7db17639":"df = df.set_index('date')","cd4882ec":"df.head()","62c312bd":"df_XG = df.groupby('store').resample('M')['sales'].sum()","6d240855":"df_XG_store_item = df.groupby(['store','item'])['sales'].resample('M').sum()","afca7110":"df_XG.head()","7ff20d0a":"df_XG_store_item.tail()","4ff433cb":"df_XG.head()","39ae07fb":"df_XG_store_item.head()","0c71e034":"df_XG_store_item.tail()","3a04bfcb":"df_XG = df_XG.reset_index()","1c472b8d":"df_XG.head()","84e3c72c":"df_XG_store_item= df_XG_store_item.reset_index() ","0e40ea3e":"df_XG_store_item.head()","c6b09166":"df_XG = df_XG.set_index('date')","07de3cf9":"df_XG_store_item = df_XG_store_item.set_index('date')","283c0eaa":"df_XG_store_item.tail()","edd12767":"df_XG.info()","05251e92":"df_XG['month'] =df_XG.index.month\ndf_XG['year'] = df_XG.index.year","a73d195b":"df_XG_store_item['month'] =df_XG_store_item.index.month\ndf_XG_store_item['year'] = df_XG_store_item.index.year","f06f8482":"df_XG.head()","503cf54f":"df_train = df_XG[ :split ] \ndf_test = df_XG[split : ] ","265b0f55":"df_train_SI = df_XG_store_item[ :split ] \ndf_test_SI = df_XG_store_item[split : ] ","2a002560":"y_train = df_train.loc[:,'sales']\ny_test= df_test.loc[:,'sales']\nX_train = df_train.drop (['sales'],axis=1)\nX_test = df_test.drop (['sales'],axis=1)","ba72cabc":"y_train_SI = df_train_SI.loc[:,'sales']\ny_test_SI= df_test_SI.loc[:,'sales']\nX_train_SI = df_train_SI.drop (['sales'],axis=1) \nX_test_SI = df_test_SI.drop (['sales'],axis=1)","3e9066d9":"y_train_SI.tail()","db6a41d3":"X_test_SI.tail()","bc58df09":"df_XG_month= df.resample('M')['sales'].sum()","6de19b74":"df_XG_month = df_XG_month.reset_index()","41eeb5d8":"df_XG_month['year'] = df_XG_month['date'].dt.year","54688c5c":"df_XG_month = df_XG_month.set_index('date')","23fb3de8":"df_train_month = df_XG_month[ :split ] \ndf_test_month = df_XG_month[split : ] ","78a25201":"df_train_month.head()","fdab1700":"y_train_month = df_train_month.loc[:,'sales']\ny_test_month= df_test_month.loc[:,'sales']\nX_train_month = df_train_month.drop (['sales'],axis=1) \nX_test_month = df_test_month.drop (['sales'],axis=1)","0b960448":"XG_model_month = xgb.XGBRegressor(n_estimators=1000)","0437f069":"XG_model_month.fit(X_train_month, y_train_month,eval_set=[(X_test_month, y_test_month)], early_stopping_rounds=50,verbose=False) # Change verbose to True to see it train","ec0d0d50":"_ = plot_importance(XG_model_month, height=0.9)","e5e501cc":"XG_test_prediction = XG_model_month.predict(X_test_month)","f265b44b":"print(XG_test_prediction)","3ced5bcc":"# You can see by looking at the results that this is a terrible forecast as there are not enough features","cdccc6f6":"XG_model = xgb.XGBRegressor(n_estimators=1000)","0e902a2d":"X_test.head()","17eaee21":"y_test.head()","24387a02":"%%time\nXG_model.fit(X_train, y_train,eval_set=[(X_test, y_test)], early_stopping_rounds=50,verbose=False) # Change verbose to True to see it train","c770f40a":"_ = plot_importance(XG_model, height=0.9)","61731fa4":"XG_test_prediction = XG_model.predict(X_test)","82f05187":"XG_test_all =X_test.copy()\nXG_train_all =X_train.copy()\nXG_test_all['XG prediction'] = XG_model.predict(X_test)\nXG_train_all['XG prediction'] =XG_model.predict(X_train)\nXG_test_all['sales'] = y_test\nXG_train_all['sales'] = y_train\ndf_xg_all = pd.concat([XG_test_all, XG_train_all], sort=False)","e006f286":"XG_test_all.sum()","ab19513b":"X_train.head()","208f49d4":"df_xg_all.head()","7f4e9e8c":"y_train.head()","39cebfc5":"df_xg_all.sample(10)","74afb91b":"XG_test_all.describe()","6c86659f":"XG_train_all.describe()","eff911e4":"XG_test_all['sales'].sum()","7f249bcc":"XG_test_all['XG prediction'].sum()","3ba6955c":"XG_RMSE  = np.mean(np.sqrt((XG_test_all['XG prediction'] - XG_test_all['sales']) ** 2))  ","218117ea":"print(XG_RMSE)","6028bd55":"XG_test_all.shape","50fcd57b":"XG_test_all.head()","e42473d3":"df_xg_all.describe()","75158b0c":"_ = df_xg_all[['sales','XG prediction']].plot(figsize=(15, 5))\n# as too many options the plot is not very useful","62f46808":"df_xg_all_1 = df_xg_all[(df_xg_all.store==1)]","b58cdea2":"df_xg_all_3 = df_xg_all[(df_xg_all.store==3)]","0229402c":"XG_train_all_1 = XG_train_all[(XG_train_all.store==1)]","68229f36":"_ = df_xg_all_1[['sales','XG prediction']].plot(figsize=(15, 5))","c9de34db":"_ = df_xg_all_3[['sales','XG prediction']].plot(figsize=(15, 5))","de5eaea7":"df_xg_all.sample(10)","dc689ce5":"df_xg_all.head()","e482d356":"X_test_SI.head()","0882976c":"XG_model_SI = xgb.XGBRegressor(n_estimators=1000)","5f0e4dbe":"%%time\nXG_model_SI.fit(X_train_SI, y_train_SI,eval_set=[(X_test_SI, y_test_SI)], early_stopping_rounds=50,verbose=False) # Change verbose to True to see it train\n#XG_model.fit(X_train, y_train,eval_set=[(X_test, y_test)]","8e889bab":"_ = plot_importance(XG_model_SI, height=0.9)","a2e2a28e":"XG_test_prediction_SI = XG_model_SI.predict(X_test_SI)","405fdee4":"XG_test_prediction_SI.sum()","b70c90eb":"XG_SI_test_all =X_test_SI.copy()","20acc3b6":"XG_SI_train_all =X_train_SI.copy()","468c809b":"XG_SI_test_all['XG prediction'] = XG_model_SI.predict(X_test_SI)","8ec18597":"XG_SI_test_all['sales'] = y_test_SI","4cc14059":"XG_SI_train_all['sales'] = y_train_SI","71b8ce37":"XG_SI__RMSE  = np.mean(np.sqrt((XG_SI_test_all['XG prediction'] - XG_SI_test_all['sales']) ** 2)) ","4a492972":"print(XG_SI__RMSE) # This result is very good","3836de4d":"XG_SI_test_all.shape","7dd4c623":"df_xg_SI_all = pd.concat([XG_SI_test_all, XG_SI_train_all], sort=False)","bfe42694":"XG_SI_test_all.sample(10)","feaad5ea":"XG_SI_train_all.sample(3)","7d7f9f9a":"df_xg_SI_all.sample(5)","2538f012":"_ = df_xg_SI_all[['sales','XG prediction']].plot(figsize=(15, 5))","d5abe08d":"df_xg_SI_all_1_1 = df_xg_SI_all[(df_xg_SI_all.store==1)&(df_xg_SI_all.item==1)]","8127dfd8":"_ = df_xg_SI_all_1_1[['sales','XG prediction']].plot(figsize=(15, 5))","f17d0ca5":"df_xg_SI_all_1_2 = df_xg_SI_all[(df_xg_SI_all.store==1)&(df_xg_SI_all.item==2)]","c17ebcec":"_ = df_xg_SI_all_1_2[['sales','XG prediction']].plot(figsize=(15, 5))","dcdd2570":"df_xg_SI_all_2_2 = df_xg_SI_all[(df_xg_SI_all.store==2)&(df_xg_SI_all.item==2)]","066d07d4":"_ = df_xg_SI_all_2_2[['sales','XG prediction']].plot(figsize=(15, 5))","a325404f":"df_xg_SI_all.nunique()","6ff7d658":"df_xg_SI_all.store.value_counts()","21ab203a":"# XG Boost on Store by Month","63449127":"# XG boost modelling by month for Time Series Store forecast \n* By Alex Dance https:\/\/www.linkedin.com\/in\/alex-dance\/\n* This notebook is one of several notebooks for a project to improve store and product forecasts\n1.\tEDA \u2013 Exploratory Data Analysis \u2013 includes working with annual forecasts\n2.\tMain Modelling\n3.\tXG Boost modelling by Month\n4.\tWeighted average\n5.\tARIMA \u2013 Month and Other Modelling\n6.\tDeep Learning\n\n* This workbook is XG Boost for further forecasts ","17902a90":"# XG by Store and ITEM By Month","63f6a58a":"# XG Boost by Month"}}