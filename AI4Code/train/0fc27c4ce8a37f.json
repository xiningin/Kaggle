{"cell_type":{"a570946b":"code","31fd76b4":"code","7130b0ea":"code","4aed15fd":"code","181740f2":"code","654e3531":"code","c78ab61c":"code","f12b6008":"code","a5312711":"code","7eb049be":"code","95419909":"code","05d4dc78":"code","5f8c7e0b":"code","d0c4a161":"code","62f795fd":"code","031b15e2":"code","c1c22ea9":"code","0623de51":"code","09f53c2c":"code","d5a5652d":"code","d38a500b":"code","2ca8af2f":"code","c4e11a9f":"code","1ecaf2c5":"code","226ac3a3":"code","59d2ad67":"code","dbedd5c2":"code","8bd09d44":"code","d7684e61":"code","f56057ac":"code","34fbb41b":"code","55363554":"code","8a311809":"code","93aa4b8b":"code","f1bba150":"code","4aed2864":"code","59210aa8":"code","003a1b88":"code","559a252a":"code","760fb8d7":"code","10cfa71c":"code","2314a698":"code","d35e252e":"code","8e179cb5":"code","997417f2":"code","d4dec6bb":"code","8b4bc4cd":"code","336e9aee":"code","c52143e7":"code","b6c255a2":"code","e8506e5c":"code","5e09662b":"code","effd7177":"code","771dad1b":"code","95db6374":"code","a7bf7c1d":"code","b494f6e6":"code","e88b48ad":"code","534bb973":"code","cefd89b0":"code","d3066445":"code","11abfbe6":"code","451490e8":"code","46206686":"code","0461b116":"code","12211a44":"markdown","d9c93d52":"markdown","5aa67347":"markdown","63ee4018":"markdown","59911639":"markdown","7b6f4645":"markdown","5d07837b":"markdown","7564af48":"markdown","9478d3b8":"markdown","4c0677e6":"markdown","c63b35cd":"markdown","93b293d5":"markdown","e6eff54e":"markdown","336e5e09":"markdown","ad83a45c":"markdown","80330a2a":"markdown","4f955c77":"markdown","e8aaf85b":"markdown","ae4e5022":"markdown","c3ece03e":"markdown","9e95eaef":"markdown","778e0be5":"markdown","d799c1ff":"markdown","7c961019":"markdown","fafbd045":"markdown","77e13a56":"markdown","638f0785":"markdown","5b72bbdb":"markdown","d7c037ec":"markdown","0da1df73":"markdown","053ba7a7":"markdown","3e818cd1":"markdown","dcbc2b54":"markdown","e63f53a5":"markdown","fa154f28":"markdown","ad525868":"markdown","e1b01324":"markdown","1785396d":"markdown","2f683a54":"markdown","0ce95ea3":"markdown"},"source":{"a570946b":"from sklearn import preprocessing\nfrom sklearn.model_selection import GridSearchCV\nfrom sklearn.linear_model import Lasso\nfrom sklearn.tree import DecisionTreeRegressor\nfrom sklearn.ensemble import RandomForestRegressor\nfrom sklearn.linear_model import LinearRegression \nfrom sklearn.model_selection import cross_val_score\nfrom sklearn.model_selection import ShuffleSplit\nfrom sklearn.metrics import r2_score\nimport pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport matplotlib\nmatplotlib.rcParams[\"figure.figsize\"] = (20,10)\nimport warnings\nwarnings.filterwarnings('ignore')","31fd76b4":"df1 = pd.read_csv('..\/input\/used-cars-price-prediction\/train-data.csv')\ndf1.head()","7130b0ea":"df1.shape","4aed15fd":"df1.columns","181740f2":"df1.isnull().sum()","654e3531":"# In our dataset we had only New_Price which contain above 70% data\ndf2 = df1.dropna(thresh=df1.shape[0]*0.7, how='all',axis=1)","c78ab61c":"df2.head(2)","f12b6008":"df2.isnull().sum()","a5312711":"df2.shape","7eb049be":"df3 = df2.dropna()\ndf3.isnull().sum()","95419909":"df3.shape","05d4dc78":"company = [i.split()[0] for i in df3['Name']]\ndf3.insert(0, \"Company\", company)","5f8c7e0b":"df3['Mileage'] = pd.to_numeric(df3['Mileage'].str.lower().str.split().str.get(0), errors='coerce')\ndf3['Engine'] = pd.to_numeric(df3['Engine'].str.lower().str.split().str.get(0), errors='coerce')\ndf3['Power'] = pd.to_numeric(df3['Power'].str.lower().str.split().str.get(0), errors='coerce')","d0c4a161":"df3['Company'].value_counts()","62f795fd":"company_count=df3['Name'].str.lower().str.split().str.get(0).to_frame()[\"Name\"].value_counts()\nplt.figure(figsize=(12,12))\nplt.xlabel('Company Name')\nplt.ylabel('No. of cars sold')\nplt.title('Cars sold per company')\ncompany_count.plot(kind='bar')\nplt.show()","031b15e2":"mileage = df3.groupby('Fuel_Type').Mileage.mean()\nplt.xlabel(\"Fuel Type\")\nplt.xlabel(\"Mileage\")\nplt.title(\"Fuel Type vs Mileage\")\nmileage.plot(kind='bar')\nplt.show()","c1c22ea9":"purchased_car_per_year = df3['Year'].value_counts()\npurchased_car_per_year.plot(kind='bar')\nplt.xlabel(\"Year\")\nplt.ylabel(\"Paurchased Cars\")\nplt.title(\"Year vs Purchased cars\")\nplt.show()","0623de51":"average_price = df3.groupby('Company').Price.mean()\naverage_price.plot(kind='bar')\nplt.show()","09f53c2c":"Company_Kilometers_Driven = df3.groupby('Company').Kilometers_Driven.mean()\nCompany_Kilometers_Driven.plot(kind='bar')\nplt.xlabel(\"s\")\nplt.ylabel(\"s\")\nplt.title(\"Average Kilometeres vs Company\")\nplt.show()","d5a5652d":"df3.head(2)","d38a500b":"df3.Name = df3.Name.apply(lambda x: x.strip())\nname_stats = df3['Name'].value_counts(ascending=False)\nname_stats","2ca8af2f":"name_stats.values.sum()","c4e11a9f":"len(name_stats[name_stats>10])","1ecaf2c5":"len(name_stats)","226ac3a3":"len(name_stats[name_stats<=10])","59d2ad67":"name_stats_less_than_10 = name_stats[name_stats<=10]\nname_stats_less_than_10","dbedd5c2":"len(df3.Name.unique())","8bd09d44":"df3.Name = df3.Name.apply(lambda x: 'other' if x in name_stats_less_than_10 else x)\nlen(df3.Name.unique())","d7684e61":"df3.head(10)","f56057ac":"df3[df3.Mileage<5].head()","34fbb41b":"mileage_mean = df3.Mileage.mean()","55363554":"df3['Mileage'] = [i  if i > 5 else float(int(mileage_mean)) for i in df3.Mileage]","8a311809":"# Again check minimum mileage","93aa4b8b":"df3.describe()","f1bba150":"# Check Outliers in Kilometers_Driven\ndf3['Kilometers_Driven'].min()\ndf3['Kilometers_Driven'].max()","4aed2864":"df3.sort_values(by='Kilometers_Driven', ascending=False)","59210aa8":"df3[df3['Kilometers_Driven'] > 1000000]","003a1b88":"kilometers_driven_mean = df3['Kilometers_Driven'].mean()\ndf3['Kilometers_Driven'] = [i  if i < 1000000 else float(int(kilometers_driven_mean)) for i in df3.Kilometers_Driven]","559a252a":"# Maximum Driven\ndf3['Kilometers_Driven'].max()","760fb8d7":"df3.isnull().sum()","10cfa71c":"df3['Power'] = df3['Power'].fillna(df3['Power'].mean())","2314a698":"print(df3['Company'].value_counts())\nprint(df3['Location'].value_counts())\nprint(df3['Fuel_Type'].value_counts())\nprint(df3['Transmission'].value_counts())\nprint(df3['Owner_Type'].value_counts())","d35e252e":"# Convert year variable in age\ndf3['Year'] = 2021-df3['Year']","8e179cb5":"df3.head()","997417f2":"df3.head(2)","d4dec6bb":"company_dummies = pd.get_dummies(df3['Company'])\nname_dummies = pd.get_dummies(df3['Name'])\nlocation_dummies = pd.get_dummies(df3['Location'])\nfuel_type_dummies = pd.get_dummies(df3['Fuel_Type'])\ntransmission_dummies = pd.get_dummies(df3['Transmission'])\nowner_type_dummies = pd.get_dummies(df3['Owner_Type'])","8b4bc4cd":"# Create new dataframe with numeric variables\nfeatures = df3[['Year', 'Kilometers_Driven', 'Mileage', 'Engine', 'Power', 'Seats', 'Price']]","336e9aee":"df4 = pd.concat([features, company_dummies, name_dummies, location_dummies, fuel_type_dummies, transmission_dummies, owner_type_dummies], axis=1)","c52143e7":"df4.shape","b6c255a2":"x = df4.drop(['Price'], axis=1)\ny = df4['Price']","e8506e5c":"x.shape","5e09662b":"from sklearn.preprocessing import MinMaxScaler\nx[['Kilometers_Driven', 'Mileage']] = MinMaxScaler().fit_transform(x[['Kilometers_Driven', 'Mileage']])        ","effd7177":"from sklearn.model_selection import train_test_split\nx_train, x_test, y_train, y_test = train_test_split(x, y, test_size=0.3, random_state=42)","771dad1b":"from sklearn.neighbors import KNeighborsRegressor\nknn = KNeighborsRegressor(n_neighbors=2)\nknn.fit(x_train, y_train)\nknn.score(x_test, y_test)","95db6374":"df4.head()","a7bf7c1d":"cv = ShuffleSplit(n_splits=5, test_size=0.2, random_state=0)\ncross_val_score(KNeighborsRegressor(), x, y, cv=cv)","b494f6e6":"def find_best_model_using_gridsearchcv(X,y):\n    algos = {\n        'KNeighborsRegressor' : {\n            'model': KNeighborsRegressor(),\n            'params': {\n                'n_neighbors': [2,3,5,10]\n            }\n        },\n        'lasso': {\n            'model': Lasso(),\n            'params': {\n                'alpha': [1,2],\n                'selection': ['random', 'cyclic']\n            }\n        },\n        'decision_tree': {\n            'model': DecisionTreeRegressor(),\n            'params': {\n                'criterion' : ['mse','friedman_mse'],\n                'splitter': ['best','random']\n            }\n        }\n    }\n    scores = []\n    cv = ShuffleSplit(n_splits=5, test_size=0.2, random_state=0)\n    for algo_name, config in algos.items():\n        gs =  GridSearchCV(config['model'], config['params'], cv=cv, return_train_score=False)\n        gs.fit(X,y)\n        scores.append({\n            'model': algo_name,\n            'best_score': gs.best_score_,\n            'best_params': gs.best_params_\n        })\n\n    return pd.DataFrame(scores,columns=['model','best_score','best_params'])\n\nfind_best_model_using_gridsearchcv(x, y)","e88b48ad":"# Fit regression model\nregr = DecisionTreeRegressor(max_depth=2)\n# regr_2 = DecisionTreeRegressor(max_depth=5)\nregr.fit(x_train, y_train)","534bb973":"def predict_price(year, kilometers_driven, mileage, engine, power, seats, company, name, location, fuel_type, transmission, owner_type):\n    company_index = np.where(x.columns==company)[0][0]\n    name_index = np.where(x.columns==name)[0][0]\n    location_index = np.where(x.columns==location)[0][0]\n    fuel_type_index = np.where(x.columns==fuel_type)[0][0]\n    transmission_index = np.where(x.columns==transmission)[0][0]\n    owner_type_index = np.where(x.columns==owner_type)[0][0]\n    x2 = np.zeros(len(x.columns))\n    x2[0] = year\n    x2[1] = kilometers_driven\n    x2[2] = mileage\n    x2[3] = engine\n    x2[4] = power\n    x2[5] = seats\n    if company_index >= 0:\n        x2[company_index] = 1\n    if name_index >= 0:\n        x2[name_index] = 1\n    if location_index >= 0:\n        x2[location_index] = 1\n    if fuel_type_index >= 0:\n        x2[fuel_type_index] = 1\n    if transmission_index >= 0:\n        x2[transmission_index] = 1\n    if owner_type_index >= 0:\n        x2[owner_type_index] = 1\n\n    result = knn.predict([x2])\n    return result[0]","cefd89b0":"# For Audi\npredict_price(6, 0.052268, 0.324245, 1968, 140.80, 5.0, 'Audi', 'other', 'Coimbatore', 'Diesel', 'Automatic', 'Second')","d3066445":"# For Hundai\npredict_price(6, 0.052268, 0.424245, 1582, 126.20, 5.0, 'Hyundai', 'Hyundai Creta 1.6 CRDi SX Option', 'Pune', 'Petrol', 'Manual', 'First')","11abfbe6":"# For Maruti Wagon R\npredict_price(11, 0.092703, 0.744289, 998, 58.16, 5.0, 'Maruti', 'Maruti Wagon R LXI CNG', 'Mumbai', 'Petrol', 'Manual', 'First')","451490e8":"# We can see below parameters\nx.head()","46206686":"import pickle\nwith open('used_car_prices_model.pkl', 'wb') as f:\n    pickle.dump(knn, f)","0461b116":"import json\ncolumns = {\n    'data_columns' : [col.lower() for col in x.columns]\n}\nwith open(\"columns.json\",\"w\") as f:\n    f.write(json.dumps(columns))","12211a44":"# Dimensionality Reduction","d9c93d52":"#### We can see above Mileage is 0.0 so we can remove those data or replace with mean, We will use mean with list comprehension.","5aa67347":"# Identifying Categorical Data: Nominal, Ordinal and Continuous","63ee4018":"## Export the tested model to a pickle file","59911639":"## Build Model Now...","7b6f4645":"#### Converting string data to numeric form, i.e removing units etc.","5d07837b":"# Test the model for few cars","7564af48":"# Data Analysis with Visualisation","9478d3b8":"# Collecting dataframe in a Dataframe","4c0677e6":"# Live Demo\nhttps:\/\/used-car-valuation-app.herokuapp.com\/","c63b35cd":"# Use On Hot Encoding for Categorical Variables","93b293d5":"##### Drop features that are containing 70% data null","e6eff54e":"# Thank You","336e5e09":"#### Examine Name which is a categorical variable. We need to apply dimensionality reduction technique here to reduce number of name","ad83a45c":"#### Q.) What is the number of cars originally purchased per year?","80330a2a":"# Outlier Removal Using Business Logic","4f955c77":"#### We can see above some empty values are there in power variable so we will replace with mean.","e8aaf85b":"#### We can see that in 5 iterations we get a score approximately 80% all the time. This is pretty good but we want to test few other algorithms for regression to see if we can get even better score. We will use GridSearchCV for this purpose","ae4e5022":"## Export Categprical columns to a file that will be useful later on in our prediction application","c3ece03e":"# Find best model using GridSearchCV","9e95eaef":"# Again Feature Engineering","778e0be5":"# Table of contents\n<ul>\n<li>Data Cleaning: Handle NA values<\/li>\n<li>Feature Engineering: Handle Categorical Variable<\/li>\n<li>Data Analysis with Visualisation<\/li>\n<li>Again Feature Engineering<\/li>\n<li>Dimensionality Reduction<\/li>\n<li>Outlier Removal Using Business Logic<\/li>\n<li>Identifying Categorical Data: Nominal, Ordinal and Continuous<\/li>\n<li>Use On Hot Encoding for Categorical Variables<\/li>\n<li>Collecting dataframe in a Dataframe<\/li>\n<li>Model Building<\/li>\n<li>Model Evaluation<\/li>\n<li>Hyper Parameter Tunning with GridSearchCV<\/li>\n<li>Test Model for few cars<\/li>\n<\/ul>","d799c1ff":"# Data Cleaning: Handle NA values","7c961019":"#### As a data scientist when you have a conversation with your business manager (who has expertise in automobile industry), he will tell you that normally mileage is 1 Million KM (i.e. If you have for example above 1 Million KM than that seems suspicious and can be removed as an outlier. We will remove such outliers by keeping our maximum thresold Kilometers_Driven","fafbd045":"# Feature Engineering: Handle Categorical Variable","77e13a56":"#### Check above results here we can split Nominal and Ordinal","638f0785":"#### Q.) What is the average price per company?","5b72bbdb":"### Use Label Encoding for Ordinal Variables","d7c037ec":"# Data Science Regression Project: Predicting Used Car Prices\n#### Please comment me what i can do more in this notebook.","0da1df73":"##### Create a company using Name column","053ba7a7":"#### Q.) Which company sells most Number of cars?","3e818cd1":"# Use K Fold cross validation to measure accuracy of our KNN model","dcbc2b54":"#### Q.) Which fuel Type has lesser mileage?","e63f53a5":"#### Based on above results we can say that KNN gives the best score. Hence we will use that.","fa154f28":"### Data Load: Load used car prices into a dataframe","ad525868":"#### Check above data points. We have 65Million Kilometers_Driven and It is not possible. So we will handle this outlier using mean of Kilometer_Driven","e1b01324":"# Live Demo\nhttps:\/\/used-car-valuation-app.herokuapp.com\/","1785396d":"#### Any Name having less than 10 data points should be tagged as \"other\" name. This way number of categories can be reduced by huge amount. Later on when we do one hot encoding, it will help us with having fewer dummy columns","2f683a54":"#### As a data scientist when you have a conversation with your business manager (who has expertise in automobile industry), he will tell you that normally mileage is 5KM\/L (i.e. If you have for example below 5 KM\/L than that seems suspicious and can be removed as an outlier. We will remove such outliers by keeping our maximum thresold mileage\/liter","0ce95ea3":"#### Q.) After driving for how much KMs people like to sell their cars?"}}