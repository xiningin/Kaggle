{"cell_type":{"e095b36b":"code","41fe7a11":"code","ca7c2153":"code","395e4f5d":"code","1d5a7ce6":"code","f48b3567":"code","348ffac4":"code","99b3f987":"code","6713e020":"code","20569f37":"code","e250d822":"code","180d70d4":"code","9226b8bf":"code","5087dacc":"code","7db55d85":"code","7e5174c4":"code","6f3b18f9":"code","532c5772":"code","6358cdd7":"code","f1c8653b":"code","3a871018":"code","e1054337":"code","51089ca9":"code","69ba081d":"code","d4ad13ae":"code","8973d531":"code","b7e5a54e":"code","f9f5e8e9":"code","243616ac":"code","7d1e7aa3":"code","f5964193":"code","59363d23":"code","6dec6435":"code","aa1626a6":"code","3a567c08":"code","8b266c25":"code","91b39838":"code","9795d169":"code","1ac6fae1":"code","ae17cedc":"code","abf12314":"code","3910e120":"code","105434e4":"code","19915087":"code","e396622a":"code","bcbed2d1":"code","1622ea46":"code","48ddddac":"code","0f067851":"code","1793a322":"code","dafc1dd5":"code","a6ffa421":"code","929b015b":"code","019813fe":"code","4689740b":"code","a473b70b":"code","9eb61a3c":"code","df598e1e":"code","f46982a1":"code","e8ca0123":"code","03a2d28f":"code","81e52532":"code","2808fad8":"code","8efebb91":"code","dc0f2f04":"code","ec9666af":"code","7b09b603":"code","d31c3606":"code","b4dd6412":"markdown","f088d073":"markdown","d90b4442":"markdown","1def947f":"markdown","9cf5596c":"markdown","79c8a700":"markdown","033594a4":"markdown","37a8696c":"markdown","ee99cdc7":"markdown","c8e73923":"markdown","33ffbd05":"markdown","a3f48f70":"markdown","810b21b2":"markdown","313e9d21":"markdown","6af15d41":"markdown","ebaaf26e":"markdown","486cb30f":"markdown","b182ef7a":"markdown","c73a9b6c":"markdown","8bc88b57":"markdown","5df26cf1":"markdown"},"source":{"e095b36b":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","41fe7a11":"import matplotlib.pyplot as plt\nimport seaborn as sns\nimport statistics\nimport sklearn\nimport sklearn.metrics as sm\n\n\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import mean_squared_error\nfrom pandas.plotting import scatter_matrix\nfrom sklearn.model_selection import cross_val_score\nfrom sklearn.model_selection import ShuffleSplit\nfrom sklearn.model_selection import GridSearchCV\n\nfrom sklearn import svm\nfrom sklearn.naive_bayes import MultinomialNB\nfrom sklearn.naive_bayes import GaussianNB\nfrom sklearn.metrics import roc_auc_score\nfrom sklearn.pipeline import Pipeline\nfrom sklearn.metrics import classification_report\nfrom sklearn.metrics import accuracy_score\nfrom sklearn.linear_model import SGDClassifier\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.svm import SVC\n","ca7c2153":"#read data\ntrain_set = pd.read_csv('..\/input\/titanic\/train.csv')\ntest_set = pd.read_csv('..\/input\/titanic\/test.csv')\n","395e4f5d":"train_set.head()","1d5a7ce6":"train_set.info()","f48b3567":"train_set.describe()","348ffac4":"train_set.shape","99b3f987":"print(train_set.dtypes)","6713e020":"target_category = train_set[\"Survived\"].unique()\ntarget_category=list(map(str,target_category))\nprint(target_category)","20569f37":"train_set.isnull().sum().sort_values(ascending = False)","e250d822":"train_set = train_set.drop(columns=['Cabin'])","180d70d4":"mode_category = ['Age','Embarked']\ntrain_set[mode_category] = train_set[mode_category].fillna(train_set[mode_category].mode().iloc[0])\n","9226b8bf":"train_set.isnull().sum().sort_values(ascending = False)","5087dacc":"train_set.head()","7db55d85":"train_set[\"Sex\"] = train_set[\"Sex\"].astype('category').cat.codes\ntrain_set[\"Embarked\"] = train_set[\"Embarked\"].astype('category').cat.codes","7e5174c4":"train_set['Age'].nunique()","6f3b18f9":"train_set['Age'].describe()","532c5772":"bins= [0,20,40,81]\nlabels = ['0','1','2']\ntrain_set['AgeGroup'] = pd.cut(train_set['Age'], bins=bins, labels=labels, right=False)\n","6358cdd7":"train_set.head()","f1c8653b":"train_set['NameGroup'] = train_set['Name'].str.extract(' ([A-Za-z]+)\\.', expand = False)\ntrain_set.head()","3a871018":"train_set['NameGroup'].unique()","e1054337":"def titles(train_set):\n    title = train_set['NameGroup']\n    if title in ['Don', 'Major', 'Capt', 'Jonkheer', 'Rev', 'Col','Sir']:\n        return 'Mr'\n    elif title in ['Countess', 'Mme']:\n        return 'Mrs'\n    elif title in ['Mlle', 'Ms','Lady']:\n        return 'Miss'\n    elif title == 'Dr':\n        if train_set['Sex'] == 'Male':\n            return 'Mr'\n        else:\n            return 'Mrs'\n    else:\n            return title \ntrain_set['NameGroup'] = train_set.apply(titles,axis=1)    ","51089ca9":"train_set.head()\n","69ba081d":"train_set['NameGroup'].unique()","d4ad13ae":"train_set[\"NameGroup\"] = train_set[\"NameGroup\"].astype('category').cat.codes","8973d531":"train_set.head()","b7e5a54e":"train_set['Fare'].describe()","f9f5e8e9":"bins= [0,8,14,31,513]\nlabels = ['0','1','2','3']\ntrain_set['FareGroup'] = pd.cut(train_set['Fare'], bins=bins, labels=labels, right=False)\n","243616ac":"train_set.head()","7d1e7aa3":"train_set = train_set.drop(columns=['Name','Age','Ticket','Fare'])","f5964193":"train_set.head()","59363d23":"train_set.AgeGroup.isnull().sum()","6dec6435":"train_set.dtypes","aa1626a6":"train_set.AgeGroup = train_set.AgeGroup.astype('int64')\ntrain_set.FareGroup = train_set.FareGroup.astype('int64')\ntrain_set = train_set.astype('int64')","3a567c08":"train_set.dtypes","8b266c25":"train_set.hist(figsize=(15,10))\nplt.show()","91b39838":"train_set['Survived'].value_counts().plot(kind = 'bar', figsize = (5, 5))\nplt.xlabel('Survived')\nplt.ylabel('Count')\nplt.show()","9795d169":"train_set['Sex'].value_counts().plot(kind = 'bar', figsize = (5, 5))\nplt.xlabel('Sex')\nplt.ylabel('Count')\nplt.show()\n","1ac6fae1":"sns.catplot(x='Pclass',data=train_set,kind='count',hue='Survived',col='Sex')","ae17cedc":"correlation_matrix = train_set.corr()\ncorrelation_matrix['Survived'].sort_values(ascending = False)","abf12314":"correlation_num = 8\ncorrelation_cols = correlation_matrix.nlargest(correlation_num,'Survived')['Survived'].index\ncorrelation_mat_sales = np.corrcoef(train_set[correlation_cols].values.T)\nsns.set(font_scale=1.25)\nf, ax = plt.subplots(figsize=(12, 9))\nhm = sns.heatmap(correlation_mat_sales, cbar=True, annot=True, square=True, fmt='.2f', annot_kws={'size': 7}, yticklabels=correlation_cols.values, xticklabels=correlation_cols.values)\nplt.show()","3910e120":"train_set.shape","105434e4":"y= train_set['Survived']\nx= train_set.drop(columns=['Survived','PassengerId'])\nprint(len(x.columns))\n","19915087":"x.head()","e396622a":"X_train, X_test, Y_train, Y_test = train_test_split(x,y, test_size = 0.3, random_state = 60,shuffle=True)\nprint(len(X_train))\nprint(len(X_test))\n ","bcbed2d1":"nb =  MultinomialNB()\nnb.fit(X_train,Y_train)\n\ntest_predict = nb.predict(X_test)\n\ntrain_accuracy = round(nb.score(X_train,Y_train)*100)\ntest_accuracy =round(accuracy_score(test_predict, Y_test)*100)\n\n\nprint(\"Naive Bayes Train Accuracy Score : {}% \".format(train_accuracy ))\nprint(\"Naive Bayes Test Accuracy Score  : {}% \".format(test_accuracy ))\nprint()\nprint(classification_report(test_predict, Y_test, target_names=target_category))\n","1622ea46":"sgd = SGDClassifier()\n\nsgd.fit(X_train, Y_train)\n\ntest_predict = sgd.predict(X_test)\n\ntrain_accuracy = round(sgd.score(X_train,Y_train)*100)\ntest_accuracy =round(accuracy_score(test_predict, Y_test)*100)\n\nprint(\"SVM Train Accuracy Score : {}% \".format(train_accuracy ))\nprint(\"SVM Test Accuracy Score  : {}% \".format(test_accuracy ))\nprint()\nprint(classification_report(test_predict, Y_test, target_names=target_category))","48ddddac":"dt = DecisionTreeClassifier()\n\ndt.fit(X_train, Y_train)\n\ntest_predict = dt.predict(X_test)\n\ntrain_accuracy = round(dt.score(X_train,Y_train)*100)\ntest_accuracy =round(accuracy_score(test_predict, Y_test)*100)\n\nprint(\"Decision Tree Train Accuracy Score : {}% \".format(train_accuracy ))\nprint(\"Decision Tree Test Accuracy Score  : {}% \".format(test_accuracy ))\nprint()\nprint(classification_report(test_predict, Y_test, target_names=target_category))","0f067851":"knn = KNeighborsClassifier(n_neighbors=5, metric='euclidean')\n\nknn.fit(X_train, Y_train)\n\ntest_predict = knn.predict(X_test)\n\ntrain_accuracy = round(knn.score(X_train,Y_train)*100)\ntest_accuracy =round(accuracy_score(test_predict, Y_test)*100)\n\nprint(\"K-Nearest Neighbour Train Accuracy Score : {}% \".format(train_accuracy ))\nprint(\"K-Nearest Neighbour Test Accuracy Score  : {}% \".format(test_accuracy ))\nprint()\nprint(classification_report(test_predict, Y_test, target_names=target_category))\n","1793a322":"rfc = RandomForestClassifier(n_estimators=100)\n\nrfc.fit(X_train, Y_train)\n\ntest_predict = rfc.predict(X_test)\n\ntrain_accuracy = round(rfc.score(X_train,Y_train)*100)\ntest_accuracy =round(accuracy_score(test_predict, Y_test)*100)\n\nprint(\"Random Forest Train Accuracy Score : {}% \".format(train_accuracy ))\nprint(\"Random Forest Test Accuracy Score  : {}% \".format(test_accuracy ))\nprint()\nprint(classification_report(test_predict, Y_test, target_names=target_category))","dafc1dd5":"lr =  LogisticRegression()\n\nlr.fit(X_train, Y_train)\n\ntest_predict = lr.predict(X_test)\n\ntrain_accuracy = round(lr.score(X_train,Y_train)*100)\ntest_accuracy =round(accuracy_score(test_predict, Y_test)*100)\n\nprint(\"Logistic Regression Train Accuracy Score : {}% \".format(train_accuracy ))\nprint(\"Logistic Regression Test Accuracy Score  : {}% \".format(test_accuracy ))\nprint()\nprint(classification_report(test_predict, Y_test, target_names=target_category))\n","a6ffa421":"svc = SVC(probability = True)\nsvc.fit(X_train, Y_train)\n\ntest_predict = svc.predict(X_test)\n\ntrain_accuracy = round(svc.score(X_train,Y_train)*100)\ntest_accuracy =round(accuracy_score(test_predict, Y_test)*100)\n\nprint(\"SVC Train Accuracy Score : {}% \".format(train_accuracy ))\nprint(\"SVC Test Accuracy Score  : {}% \".format(test_accuracy ))\nprint()\nprint(classification_report(test_predict, Y_test, target_names=target_category))\n","929b015b":"test_set.head()","019813fe":"test_set.isnull().sum().sort_values(ascending = False)","4689740b":"mode_category = ['Age','Embarked','Fare']\ntest_set[mode_category] = test_set[mode_category].fillna(test_set[mode_category].mode().iloc[0])\ntest_set.isnull().sum().sort_values(ascending = False)","a473b70b":"test_set = test_set.drop(columns=['Cabin'])","9eb61a3c":"test_set[\"Sex\"] = test_set[\"Sex\"].astype('category').cat.codes\ntest_set[\"Embarked\"] = test_set[\"Embarked\"].astype('category').cat.codes","df598e1e":"bins= [0,20,40,81]\nlabels = ['0','1','2']\ntest_set['AgeGroup'] = pd.cut(test_set['Age'], bins=bins, labels=labels, right=False)\n","f46982a1":"test_set['NameGroup'] = test_set['Name'].str.extract(' ([A-Za-z]+)\\.', expand = False)\ntest_set['NameGroup'] = test_set.apply(titles,axis=1) \ntest_set[\"NameGroup\"] = test_set[\"NameGroup\"].astype('category').cat.codes","e8ca0123":"bins= [0,8,14,31,513]\nlabels = ['0','1','2','3']\ntest_set['FareGroup'] = pd.cut(test_set['Fare'], bins=bins, labels=labels, right=False)\n","03a2d28f":"test_set = test_set.drop(columns=['Name','Age','Ticket','Fare'])","81e52532":"test_set.head()","2808fad8":" test_set = test_set.astype('int64')\n     ","8efebb91":"test_set.dtypes","dc0f2f04":"test_id = test_set['PassengerId']\ntest_x= test_set.drop(columns=['PassengerId'])\nprint(len(test_x.columns))","ec9666af":"y_prdict =svc.predict(test_x)","7b09b603":"submission = pd.DataFrame(list(zip(test_id, y_prdict)),\n               columns =['PassengerId', 'Survived'])\nsubmission.head(20)\n","d31c3606":"submission.to_csv('submission.csv', index=False)","b4dd6412":"# Check null values","f088d073":"**Fill Null Values with most frequent value**","d90b4442":"# Test data","1def947f":"# Group the name based on the title of the Name","9cf5596c":"# 6. Logistic Regression","79c8a700":"# Read Datasets","033594a4":"# Rearrange Fair","37a8696c":"# 1. Multinomial Naive Bayes","ee99cdc7":"Cabin has 687 null values out of 891. So I will remove Cabin feature from the dataset.","c8e73923":"# Correlation with Survived feature","33ffbd05":"# Rearrange Name into groups","a3f48f70":"# 2. SGD Classifier","810b21b2":"# Rearrange Age into groups","313e9d21":"# 5. Random Forest Classifier","6af15d41":"# Rearrange Fare into Groups","ebaaf26e":"# Data Visualization","486cb30f":"Male passengers from all the classes has a higher chance of getting survived rather than the female passengers","b182ef7a":"# 7. Linear SVC","c73a9b6c":"# Group the age ","8bc88b57":"# 3. Decision Tree Classifier","5df26cf1":"# 4. KNN Classifier"}}