{"cell_type":{"13a8bef5":"code","716f9849":"code","ff50c16b":"code","1eba688a":"code","d11f6d74":"code","abaef7d6":"code","29a20c4f":"code","aabd7b4b":"code","2cf97d69":"code","51f656cd":"code","13ca4e07":"code","70d6caf2":"code","02294b1b":"code","0c5d96dd":"markdown","ca499475":"markdown","48187f2e":"markdown","3bb872e6":"markdown","d1e89563":"markdown","3ac8a732":"markdown"},"source":{"13a8bef5":"import pandas as pd\nimport numpy as np\nimport plotly.express as px\nfrom sklearn.metrics import r2_score\nimport os\nimport glob\nfrom tqdm import tqdm\nimport lightgbm as lgbm\nfrom sklearn.model_selection import KFold\nfrom sklearn.linear_model import Ridge\n\nfrom joblib import Parallel, delayed","716f9849":"class CFG:\n    data_dir = '..\/input\/optiver-realized-volatility-prediction\/'\n    nfolds = 5","ff50c16b":"def log_return(list_stock_prices):\n    return np.log(list_stock_prices).diff() \n\ndef rv(series_log_return):\n    return np.sqrt(np.sum(series_log_return**2))","1eba688a":"def get_stock_stat(stock_id : int, dataType = 'train'):\n    \n    df_book = pd.read_parquet(f'..\/input\/optiver-realized-volatility-prediction\/book_{dataType}.parquet\/stock_id={stock_id}\/')\n    df_book.sort_values(by=['time_id', 'seconds_in_bucket'])\n\n    # compute different vwap\n    df_book['wap1'] = (df_book['bid_price1'] * df_book['ask_size1'] + df_book['ask_price1'] * df_book['bid_size1']) \/ (\n                            df_book['bid_size1']+ df_book['ask_size1'])\n\n    # wap2\n    a = df_book['bid_price2'] * df_book['ask_size2'] + df_book['ask_price2'] * df_book['bid_size2']\n    b = df_book['bid_size2']+ df_book['ask_size2']\n    df_book['wap2'] = a\/b\n    \n    # wap3\n    a1 = df_book['bid_price1'] * df_book['ask_size1'] + df_book['ask_price1'] * df_book['bid_size1']\n    a2 = df_book['bid_price2'] * df_book['ask_size2'] + df_book['ask_price2'] * df_book['bid_size2']\n    b = df_book['bid_size1'] + df_book['ask_size1'] + df_book['bid_size2']+ df_book['ask_size2']    \n    df_book['wap3'] = (a1 + a2)\/ b\n    \n    # wap4 \n    a = (df_book['bid_price1'] * df_book['ask_size1'] + df_book['ask_price1'] * df_book['bid_size1']) \/ (\n                                       df_book['bid_size1']+ df_book['ask_size1'])\n    b = (df_book['bid_price2'] * df_book['ask_size2'] + df_book['ask_price2'] * df_book['bid_size2']) \/ (\n                                       df_book['bid_size2']+ df_book['ask_size2'])\n    df_book['wap4'] = (a + b) \/ 2\n    \n    # Wap5,6,7, & 8 assumes the volatility to be \u03a3 (price*size) \/ \u03a3 volume where size belong to same book entry as price\n    # wap5 \n    df_book['wap5'] = (df_book['bid_price1'] * df_book['bid_size1'] + df_book['ask_price1'] * df_book['ask_size1']) \/ (\n                            df_book['bid_size1']+ df_book['ask_size1'])\n    \n    # wap6 \n    df_book['wap6'] = (df_book['bid_price2'] * df_book['bid_size2'] + df_book['ask_price2'] * df_book['ask_size2']) \/ (\n                            df_book['bid_size2']+ df_book['ask_size2'])\n    \n    # wap7 \n    a1 = df_book['bid_price1'] * df_book['bid_size1'] + df_book['ask_price1'] * df_book['ask_size1']\n    a2 = df_book['bid_price2'] * df_book['bid_size2'] + df_book['ask_price2'] * df_book['ask_size2']\n    b = df_book['bid_size1'] + df_book['ask_size1'] + df_book['bid_size2']+ df_book['ask_size2']    \n    df_book['wap7'] = (a1 + a2)\/ b\n    \n    # wap8\n    a = (df_book['bid_price1'] * df_book['bid_size1'] + df_book['ask_price1'] * df_book['ask_size1']) \/ (\n                                       df_book['bid_size1']+ df_book['ask_size1'])\n    b = (df_book['bid_price2'] * df_book['bid_size2'] + df_book['ask_price2'] * df_book['ask_size2']) \/ (\n                                       df_book['bid_size2']+ df_book['ask_size2'])\n    df_book['wap8'] = (a + b) \/ 2\n                    \n    df_book['vol_wap1'] = (df_book.groupby(by = ['time_id'])['wap1'].apply(log_return).reset_index(drop = True).fillna(0))\n    df_book['vol_wap2'] = (df_book.groupby(by = ['time_id'])['wap2'].apply(log_return).reset_index(drop = True).fillna(0))\n    df_book['vol_wap3'] = (df_book.groupby(by = ['time_id'])['wap3'].apply(log_return).reset_index(drop = True).fillna(0))\n    df_book['vol_wap4'] = (df_book.groupby(by = ['time_id'])['wap4'].apply(log_return).reset_index(drop = True).fillna(0))\n    df_book['vol_wap5'] = (df_book.groupby(by = ['time_id'])['wap5'].apply(log_return).reset_index(drop = True).fillna(0))\n    df_book['vol_wap6'] = (df_book.groupby(by = ['time_id'])['wap6'].apply(log_return).reset_index(drop = True).fillna(0))\n    df_book['vol_wap7'] = (df_book.groupby(by = ['time_id'])['wap7'].apply(log_return).reset_index(drop = True).fillna(0))\n    df_book['vol_wap8'] = (df_book.groupby(by = ['time_id'])['wap8'].apply(log_return).reset_index(drop = True).fillna(0))\n                \n        \n    df_book['bas'] = (df_book[['ask_price1', 'ask_price2']].min(axis = 1)\n                                \/ df_book[['bid_price1', 'bid_price2']].max(axis = 1) - 1)                               \n\n    # different spreads\n    df_book['h_spread_l1'] = df_book['ask_price1'] - df_book['bid_price1']\n    df_book['h_spread_l2'] = df_book['ask_price2'] - df_book['bid_price2']\n    df_book['v_spread_b'] = df_book['bid_price1'] - df_book['bid_price2']\n    df_book['v_spread_a'] = df_book['ask_price1'] - df_book['bid_price2']\n    \n    # Calculating new wap values using spread parameters\n    df_book['spread_wap1'] = df_book['h_spread_l1'] \/ (df_book['v_spread_b'] + df_book['v_spread_a'])\n    df_book['spread_wap2'] = df_book['h_spread_l2'] \/ (df_book['v_spread_b'] + df_book['v_spread_a'])\n    \n    # attach volatitilies based on different VWAPs\n    stock_stat = pd.merge(\n        df_book.groupby(by = ['time_id'])['vol_wap1'].agg(rv).reset_index(),\n        df_book.groupby(by = ['time_id'], as_index = False)['bas'].mean(),\n        on = ['time_id'], \n        how = 'left'\n    )\n    \n    stock_stat = pd.merge( \n        df_book.groupby(by = ['time_id'])['vol_wap2'].agg(rv).reset_index(),\n        stock_stat, \n        on = ['time_id'], \n        how = 'left'\n    )\n    \n    stock_stat = pd.merge( \n        df_book.groupby(by = ['time_id'])['vol_wap3'].agg(rv).reset_index(),\n        stock_stat, \n        on = ['time_id'], \n        how = 'left'\n    )\n        \n    stock_stat = pd.merge( \n        df_book.groupby(by = ['time_id'])['vol_wap4'].agg(rv).reset_index(),\n        stock_stat, \n        on = ['time_id'], \n        how = 'left'\n    )\n    \n    stock_stat = pd.merge( \n        df_book.groupby(by = ['time_id'])['vol_wap5'].agg(rv).reset_index(),\n        stock_stat, \n        on = ['time_id'], \n        how = 'left'\n    )\n    \n    stock_stat = pd.merge( \n        df_book.groupby(by = ['time_id'])['vol_wap6'].agg(rv).reset_index(),\n        stock_stat, \n        on = ['time_id'], \n        how = 'left'\n    )\n    \n    stock_stat = pd.merge( \n        df_book.groupby(by = ['time_id'])['vol_wap7'].agg(rv).reset_index(),\n        stock_stat, \n        on = ['time_id'], \n        how = 'left'\n    )\n    \n    stock_stat = pd.merge( \n        df_book.groupby(by = ['time_id'])['vol_wap8'].agg(rv).reset_index(),\n        stock_stat, \n        on = ['time_id'], \n        how = 'left'\n    )\n    \n    # spread summaries\n    stock_stat = pd.merge( \n        df_book.groupby(by = ['time_id'])['h_spread_l1'].agg(max).reset_index(),\n        stock_stat, \n        on = ['time_id'], \n        how = 'left'\n    )     \n    stock_stat = pd.merge( \n        df_book.groupby(by = ['time_id'])['h_spread_l2'].agg(max).reset_index(),\n        stock_stat, \n        on = ['time_id'], \n        how = 'left'\n    )     \n    stock_stat = pd.merge( \n        df_book.groupby(by = ['time_id'])['v_spread_b'].agg(max).reset_index(),\n        stock_stat, \n        on = ['time_id'], \n        how = 'left'\n    )   \n    stock_stat = pd.merge( \n        df_book.groupby(by = ['time_id'])['v_spread_a'].agg(max).reset_index(),\n        stock_stat, \n        on = ['time_id'], \n        how = 'left'\n    )\n    \n    # spread waps\n    stock_stat = pd.merge( \n        df_book.groupby(by = ['time_id'])['spread_wap1'].agg(rv).reset_index(),\n        stock_stat, \n        on = ['time_id'], \n        how = 'left'\n    )\n    \n    stock_stat = pd.merge( \n        df_book.groupby(by = ['time_id'])['spread_wap2'].agg(rv).reset_index(),\n        stock_stat, \n        on = ['time_id'], \n        how = 'left'\n    )\n    \n    stock_stat['stock_id'] = stock_id\n    return stock_stat\n\n\ndef get_dataSet(stock_ids : list, dataType = 'train'):\n\n    stock_stat = Parallel(n_jobs=-1)(\n        delayed(get_stock_stat)(stock_id, dataType) \n        for stock_id in stock_ids\n    )    \n    stock_stat_df = pd.concat(stock_stat, ignore_index = True)\n    return stock_stat_df","d11f6d74":"train = pd.read_csv(CFG.data_dir + 'train.csv')\ntrain.loc[train.stock_id == 0].head(3)","abaef7d6":"%%time\ntrain_stock_stat_df = get_dataSet(stock_ids = train['stock_id'].unique(), dataType = 'train')\ntrain_dataSet = pd.merge(train, train_stock_stat_df, on = ['stock_id', 'time_id'], how = 'left')","29a20c4f":"%%time\n\ntest = pd.read_csv('..\/input\/optiver-realized-volatility-prediction\/test.csv')\n\ntest_stock_stat_df = get_dataSet(stock_ids = test['stock_id'].unique(), dataType = 'test')\ntest_dataSet = pd.merge(test, test_stock_stat_df, on = ['stock_id', 'time_id'], how = 'left')\n","aabd7b4b":"covariates = [f for f in train_dataSet.columns if f not in ['time_id', 'target']]","2cf97d69":"# taken from https:\/\/www.kaggle.com\/yus002\/realized-volatility-prediction-lgbm-train\ndef my_metrics(y_true, y_pred):\n    return np.sqrt(np.mean(np.square((y_true - y_pred) \/ y_true)))\ndef rmspe(y_true, y_pred):  \n    output = my_metrics(y_true, y_pred)\n    return 'rmspe', output, False","51f656cd":"prval = np.zeros((train_dataSet.shape[0],1))\nprfull = np.zeros((test_dataSet.shape[0],1))\n\nxdat = train_dataSet[covariates].copy()\nydat = train_dataSet['target'].copy()\nxtest = test_dataSet[covariates].copy()\n\nparams = {'metric': 'rmse',\n          'reg_alpha': 0.9,  \n          'reg_lambda': 5.61, \n          'num_leaves': 56, \n          'learning_rate': 0.08, \n          'max_depth': 5, \n          'n_estimators': 1000, \n          'min_child_weight': 0.11, \n          'subsample': 0.7, \n          'colsample_bytree': 0.8,  \n          'min_child_samples': 28}\n\nkf = KFold(n_splits= CFG.nfolds, shuffle = True, random_state = 42)\nfor (ii, (id0, id1)) in enumerate(kf.split(train_dataSet)):\n    x0, x1 = xdat.loc[id0], xdat.loc[id1]\n    y0, y1 = ydat.loc[id0], ydat.loc[id1]\n    \n    model = lgbm.LGBMRegressor(**params)\n    \n    model.fit(x0, y0, eval_set=[(x0, y0), (x1, y1)], \n              eval_metric = rmspe,\n              early_stopping_rounds= 50,  \n              verbose= 250)\n    \n    prval[id1,0] = model.predict(x1)\n    prfull[:,0] += model.predict(xtest)\/CFG.nfolds\n    \ndel x0,x1,y0,y1,id0,id1","13ca4e07":"lgbm.plot_importance(model, max_num_features= 25)","70d6caf2":"# feeding prval and ydat directly into the metric crashes the script due to memory consumption,\n# and I don't have the energy to fix it atm. \n\n# del train_dataSet\nxref = pd.DataFrame()\nxref['ydat'] = ydat\nxref['prval'] = prval\ndel xdat, ydat\n\nR2 = round(r2_score(y_true = xref['ydat'], y_pred = xref['prval']),3)\na = (xref['ydat'] - xref['prval'])\/xref['ydat']\nRMSPE =  np.round((np.sqrt(np.mean(np.square(a )))) ,4)\nprint(f'Performance of the naive prediction: R2 score: {R2}, RMSPE: {RMSPE}')","02294b1b":"test_dataSet['target'] = prfull\ntest_dataSet[['row_id', 'target']].to_csv('submission.csv', index = False)","0c5d96dd":"# Submission","ca499475":"# Functions","48187f2e":"# Data","3bb872e6":"### New spread_wap parameters are playing prominent role in our model. Wap5 & 6 are also right there along with wap1 & 2 so other volatility formula also seems to have some merits","d1e89563":"# Model\n","3ac8a732":"**References:**\n\nhttps:\/\/www.kaggle.com\/konradb\/we-need-to-go-deeper-and-validate"}}