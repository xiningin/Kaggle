{"cell_type":{"3025263f":"code","fb627884":"code","3d4e2086":"code","1a00698e":"code","fd340d42":"code","a89e657f":"code","fc14a8fe":"code","66167f9a":"code","1c00ad0a":"code","5f8f6351":"code","4e570226":"code","2e11a250":"code","a212db7a":"code","36a480ca":"code","570e1fde":"code","22ff8275":"code","80cac4a3":"code","7f172aa5":"code","b9cd376c":"code","a301ab0a":"code","09fd461a":"code","56de0c48":"code","5ad0aeee":"code","ffbec87f":"code","c8716dd5":"code","16c807b7":"code","2d6e0b67":"code","a0014464":"code","4583009f":"code","e96073e3":"code","4f02b0d5":"code","39c61968":"code","7f618370":"code","1b6a859d":"code","336cd352":"code","1ca51537":"code","847a01e7":"code","ac6ab8ee":"code","97fc418e":"code","46a4151c":"code","1b839e7f":"code","a81ef18a":"code","de29e0c1":"code","99ec4fca":"code","9096ada0":"code","f4286fc4":"code","121fd84c":"code","1a1a819b":"code","e8cf8890":"code","52445159":"code","c6b71ed2":"code","e3ca2452":"code","4206f9eb":"code","4d614626":"code","24b083e6":"code","0474e935":"code","03ddc096":"code","209de0be":"code","1a1d68ee":"code","aacbc3d8":"code","b8a08cb5":"code","cbd1954b":"code","02991074":"code","ba5c187a":"code","9ae5d1db":"code","ccb23430":"code","420b7da0":"code","e8e89491":"code","b8a79079":"code","591a80ca":"code","bac441a3":"markdown","6e7b7296":"markdown","b39e0edd":"markdown","cb0681c2":"markdown","0a7a45e5":"markdown","466e25f1":"markdown","e5e0f4ef":"markdown","158593a9":"markdown","31bc99e0":"markdown","9db2d09d":"markdown","9d9ae115":"markdown","44cfca57":"markdown","d929c846":"markdown","660e3b2d":"markdown","480c1214":"markdown","a48c4981":"markdown","5e13455b":"markdown","b4d8456d":"markdown","3c7066c8":"markdown","fa204357":"markdown","91d163fb":"markdown","fb293140":"markdown","7565efc5":"markdown","4c1ed3d2":"markdown","288acbd8":"markdown","043fab92":"markdown","665ea224":"markdown","889a745c":"markdown","b6a88680":"markdown","ed17f2c7":"markdown","beb98994":"markdown","2a62ceff":"markdown","2f49a485":"markdown","5b022b1a":"markdown","97ed4579":"markdown","801af662":"markdown","fbae9b74":"markdown","1015f907":"markdown","a42348cd":"markdown","a82bfba5":"markdown","17b1921c":"markdown","76fe14c8":"markdown","693e8a4c":"markdown","3b2fa645":"markdown","e5c84752":"markdown","0ff4f1a2":"markdown","a8ae557c":"markdown","866280a4":"markdown","2c5bde49":"markdown","2b619c08":"markdown","b1c79679":"markdown","5134812f":"markdown","8906a11d":"markdown","fe4188a1":"markdown"},"source":{"3025263f":"import seaborn as sns","fb627884":"import pandas as pd","3d4e2086":"from pandas.plotting import scatter_matrix","1a00698e":"from pandas.plotting import andrews_curves","fd340d42":"from pandas.plotting import autocorrelation_plot","a89e657f":"from matplotlib import pyplot as plt","fc14a8fe":"from matplotlib import font_manager as fm","66167f9a":"from plotnine import ggplot, aes, geom_line","1c00ad0a":"import plotnine","5f8f6351":"import plotly.express as px","4e570226":"import plotly.figure_factory as ff","2e11a250":"import plotly.graph_objects as go","a212db7a":"import numpy as np","36a480ca":"from datetime import datetime, timedelta #It's for time series","570e1fde":"ts = pd.Series(np.random.randn(200), index=pd.date_range(\"1\/1\/2021\", periods=200))","22ff8275":"ts= ts.cumsum()","80cac4a3":"ts.plot(c=\"r\")\n\nplt.title(\"Basic Plot\")\n\nplt.show()","7f172aa5":"df = pd.DataFrame(np.random.randn(200, 5), \n                  index=ts.index, columns=[\"Column_1\",\"Column_2\",\"Column_3\",\"Column_4\",\"Column_5\"])","b9cd376c":"df = df.cumsum()","a301ab0a":"plt.figure()\n\ndf.plot()\n\nplt.show()","09fd461a":"notes = [11, 13, 23, 34, 38, 54, 55, 64, 76, 79, 82, 95, 97, 98, 100]\n\nstudy_hours = [1, 2, 2, 3, 4, 4, 4, 6, 6, 7, 7, 9, 9, 11, 13]\n\nexam_notes = pd.DataFrame(notes,columns=[\"Notes\"])\nexam_notes[\"study_hours\"] = pd.Series(study_hours)","56de0c48":"exam_notes.plot(x=\"study_hours\",y=\"Notes\",color=\"red\")\n\nplt.title(\"Notes by Study Hours\")\n\nplt.xlabel(\"Study Hours\")\nplt.ylabel(\"Notes\")\n\nplt.show()","5ad0aeee":"x = pd.Series([\"A\", \"B\", \"C\", \"D\"])\ny = pd.Series([3, 8, 1, 10])\ndf= pd.DataFrame({\"Letters\":x,\"Numbers\":y})\n\ndf.index = x","ffbec87f":"df","c8716dd5":"df.plot(kind=\"bar\",color=\"green\")\n\nplt.title(\"Bar Plot Example\")\n\nplt.xlabel(\"Letters\")\nplt.ylabel(\"Numbers\")\nplt.show()","16c807b7":"df = pd.DataFrame(np.random.rand(7, 5), columns=[\"Michael\",\"Richel\",\"Mike\",\"Kate\",\"Wattson\"])","2d6e0b67":"df.plot.bar(figsize=(13,5))\n\nplt.title(\"Multiple Bar Plot\")\n\nplt.show()","a0014464":"df.plot.bar(figsize=(13,5),stacked=True)\n\nplt.title(\"Multiple Bar Plot\")\n\nplt.show()","4583009f":"df.plot.barh(figsize=(13,5),stacked=True)\n\nplt.title(\"Horizontal Multiple Bar Plot\")\n\nplt.show()","e96073e3":"first_notes = [11, 13, 23, 34, 38, 54, 55, 64, 76, 79, 82, 95, 97, 98, 100]\n\nsecond_notes = [74,13,23,53,64,32,64,86,65,33,13,64,99,32,63]\n\nfinal_notes = [53,43,65,12,76,34,12,43,65,32,54,76,98,12,32]\n\nnotes = pd.DataFrame({\"First Notes\":first_notes,\"Second Notes\":second_notes,\"Final Notes\":final_notes},\n                    columns=[\"First Notes\",\"Second Notes\",\"Final Notes\"])","4f02b0d5":"notes.head()","39c61968":"notes.plot.hist(figsize=(10,5),alpha=0.5)\n\nplt.title(\"Notes Histogram\")\n\nplt.show()","7f618370":"notes.plot.hist(figsize=(10,5),stacked=True,bins=14)\n\nplt.title(\"Notes Histogram\")\n\nplt.show()","1b6a859d":"notes.plot.hist(figsize=(10,5),orientation=\"horizontal\")\n\nplt.title(\"Notes Histogram\")\n\nplt.show()","336cd352":"notes.plot.hist(figsize=(10,5),orientation=\"horizontal\",cumulative=True)\n\nplt.title(\"Notes Histogram\")\n\nplt.show()","1ca51537":"first_notes = [11, 13, 23, 34, 38, 54, 55, 64, 76, 79, 82, 95, 97, 98, 100]\n\nsecond_notes = [74,13,23,53,64,32,64,86,65,33,13,64,99,32,63]\n\nfinal_notes = [53,43,65,12,76,34,12,43,65,32,54,76,98,12,32]\n\nnotes = pd.DataFrame({\"First Notes\":first_notes,\"Second Notes\":second_notes,\"Final Notes\":final_notes},\n                    columns=[\"First Notes\",\"Second Notes\",\"Final Notes\"])","847a01e7":"notes.head()","ac6ab8ee":"notes.plot.box()\n\nplt.title(\"Box Plot of Notes\")\nplt.xlabel(\"Exams\")\nplt.ylabel(\"Points\")\nplt.show()","97fc418e":"notes.plot.box(color = {\"whiskers\": \"DarkOrange\",\"medians\": \"DarkBlue\"}, sym= \"o\")\n\nplt.title(\"Box Plot of Notes\")\nplt.xlabel(\"Exams\")\nplt.ylabel(\"Points\")\nplt.show()","46a4151c":"notes.plot.box(color = {\"whiskers\": \"DarkOrange\",\"medians\": \"DarkBlue\"}, vert = False)\n\nplt.title(\"Box Plot of Notes\")\nplt.xlabel(\"Exams\")\nplt.ylabel(\"Points\")\nplt.show()","1b839e7f":"first_notes = [11, 13, 23, 34, 38, 54, 55, 64, 76, 79, 82, 95, 97, 98, 100]\n\nsecond_notes = [74,13,23,53,64,32,64,86,65,33,13,64,99,32,63]\n\nfinal_notes = [53,43,65,12,76,34,12,43,65,32,54,76,98,12,32]\n\nnotes = pd.DataFrame({\"First Notes\":first_notes,\"Second Notes\":second_notes,\"Final Notes\":final_notes},\n                    columns=[\"First Notes\",\"Second Notes\",\"Final Notes\"])","a81ef18a":"notes.head()","de29e0c1":"notes.plot.area()\n\nplt.title(\"Area Plot Example\")\n\nplt.show()","99ec4fca":"notes.plot.area(stacked=False)\n\nplt.title(\"Area Plot Example\")\n\nplt.show()","9096ada0":"first_notes = [11, 13, 23, 34, 38, 54, 55, 64, 76, 79, 82, 95, 97, 98, 100]\n\nsecond_notes = [74,13,23,53,64,32,64,86,65,33,13,64,99,32,63]\n\nfinal_notes = [53,43,65,12,76,34,12,43,65,32,54,76,98,12,32]\n\nnotes = pd.DataFrame({\"First Notes\":first_notes,\"Second Notes\":second_notes,\"Final Notes\":final_notes},\n                    columns=[\"First Notes\",\"Second Notes\",\"Final Notes\"])","f4286fc4":"notes.head()","121fd84c":"notes.plot.scatter(x=\"First Notes\",y=\"Final Notes\",color=\"r\")\n\nplt.title(\"Scatter Plot of Notes\")\nplt.grid(True)\nplt.show()","1a1a819b":"ax= notes.plot.scatter(x=\"First Notes\",y=\"Final Notes\",color=\"DarkBlue\",label=\"First Notes\")\nnotes.plot.scatter(x=\"Second Notes\",y=\"Final Notes\",color=\"DarkGreen\",label=\"Second Notes\",ax=ax)\n\nplt.title(\"Scatter Plot of Notes\")\nplt.grid(True)\nplt.show()","e8cf8890":"notes.plot.scatter(x=\"First Notes\",y=\"Second Notes\",s=notes[\"Final Notes\"]*10,c=\"r\")\n\nplt.title(\"Scatter Plot of Notes\")\nplt.grid(True)\nplt.show()","52445159":"first_notes = [11, 13, 23, 34, 38, 54, 55, 64, 76, 79, 82, 95, 97, 98, 100]\n\nsecond_notes = [74,13,23,53,64,32,64,86,65,33,13,64,99,32,63]\n\nfinal_notes = [53,43,65,12,76,34,12,43,65,32,54,76,98,12,32]\n\nnotes = pd.DataFrame({\"First Notes\":first_notes,\"Second Notes\":second_notes,\"Final Notes\":final_notes},\n                    columns=[\"First Notes\",\"Second Notes\",\"Final Notes\"])","c6b71ed2":"notes.head()","e3ca2452":"notes.plot.hexbin(x=\"First Notes\",y=\"Final Notes\",gridsize=10)\n\nplt.title(\"Hexagonal Plot of Notes\")\n\nplt.show()","4206f9eb":"df = pd.DataFrame(np.random.randn(2000, 2), columns=[\"Column A\", \"Column B\"])\n\ndf[\"Column B\"] = df[\"Column B\"] + np.arange(2000)","4d614626":"df.plot.hexbin(x=\"Column A\", y=\"Column B\", gridsize=25)\n\nplt.show()","24b083e6":"letters = pd.Series([3, 8, 1, 10],index = [\"A\", \"B\", \"C\", \"D\"],name=\"Letters\")","0474e935":"letters.plot.pie(figsize=(6,6))\n\nplt.title(\"Pie Chart of Letters\");","03ddc096":"letters.plot.pie(figsize=(6,6),colors=[\"r\", \"g\", \"b\", \"c\"],autopct=\"%.2f\",fontsize=20)\n\nplt.title(\"Pie Chart of Letters\");","209de0be":"series = pd.Series([0.2] * 4, index=[\"C1\", \"C2\", \"C3\", \"C4\"], name=\"Semicircle Example\")","1a1d68ee":"series.plot.pie(figsize=(6, 6));","aacbc3d8":"first_notes = [11, 13, 23, 34, 38, 54, 55, 64, 76, 79, 82, 95, 97, 98, 100]\n\nsecond_notes = [74,13,23,53,64,32,64,86,65,33,13,64,99,32,63]\n\nfinal_notes = [53,43,65,12,76,34,12,43,65,32,54,76,98,12,32]\n\nnotes = pd.DataFrame({\"First Notes\":first_notes,\"Second Notes\":second_notes,\"Final Notes\":final_notes},\n                    columns=[\"First Notes\",\"Second Notes\",\"Final Notes\"])","b8a08cb5":"notes.head()","cbd1954b":"scatter_matrix(notes, alpha=0.2, figsize=(6, 6), diagonal=\"kde\");","02991074":"den = pd.Series(np.random.randn(3000))","ba5c187a":"den.plot.kde()\n\nplt.title(\"Density Plot Example\")\n\nplt.show()","9ae5d1db":"iris = sns.load_dataset(\"iris\")","ccb23430":"iris.head()","420b7da0":"andrews_curves(iris,\"species\")\n\nplt.title(\"Andrews curves Example\")\n\nplt.show()","e8e89491":"spacing = np.linspace(-9 * np.pi, 9 * np.pi, num=2000)","b8a79079":"data = pd.Series(0.7 * np.random.rand(2000) + 0.5 * np.sin(spacing))","591a80ca":"autocorrelation_plot(data)\n\nplt.title(\"Autocorrelation Plot Example\")\n\nplt.show()","bac441a3":"## Basic Plots","6e7b7296":"## Resources","b39e0edd":"We can use **plt.pie()** function to create pie plots.","cb0681c2":"The plot method on Series and DataFrame is just a simple wrapper around **plt.plot()**.","0a7a45e5":"## Histograms","466e25f1":"Pandas is a fast, powerful, flexible and easy to use open source data analysis and manipulation tool, built on top of the Python programming language. It also gives visualizing opportunities.","e5e0f4ef":"We can plot one column versus another using the *x* and *y* keywords.","158593a9":"## Bar Plots","31bc99e0":"If we pass values that sum total is less than 1.0, it draws a semicircle.","9db2d09d":"Autocorrelation plots are often used for checking randomness in time series. This is done by computing autocorrelations for data values at varying time lags. If time series is random, such autocorrelations should be near zero for any and all time-lag separations. If time series is non-random then one or more of the autocorrelations will be significantly non-zero.\n\nWe will use **autocorrelation_plot()** function for that.","9d9ae115":"We can use **plt.hist()** function for plotting histogram.","44cfca57":"We can create scatter plots by using **plt.scatter()** function.","d929c846":"We can use the *labels* and *colors* arguments to specify the labels and colors of each wedge.","660e3b2d":"## Scatter Matrix Plots","480c1214":"## Scatter Plots","a48c4981":"## Hexagonal Bin Plots","5e13455b":"## Autocorrelation plot","b4d8456d":"We can give third parameter as point size.","3c7066c8":"## Density Plots","fa204357":"## Pandas","91d163fb":"In order to get horizontal bar plots, we can use the **plt.barh()** method.","fb293140":"## Box Plots","7565efc5":"We can create a scatter plot matrix using the **scatter_matrix()** method","4c1ed3d2":"*Gridsize* argument controls the number of hexagons in the x-direction, and defaults to 100. A larger gridsize means more, smaller bins.","288acbd8":"## Area Plots","043fab92":"In descriptive statistics, a box plot or boxplot is a method for graphically depicting groups of numerical data through their quartiles. Box plots may also have lines extending from the boxes (whiskers) indicating variability outside the upper and lower quartiles. We will use **plt.boxplot()** function for that.","665ea224":"In order to produce a stacked bar plot, pass *stacked* argument True.","889a745c":" A **pie chart (or a circle chart)** is a circular statistical graphic, which is divided into slices to illustrate numerical proportion. In a pie chart, the arc length of each slice (and consequently its central angle and area), is proportional to the quantity it represents.","b6a88680":"We can also make plots that has many columns.","ed17f2c7":"## Andrews Curves","beb98994":"For a real world example, we will use **iris** dataset of Seaborn.","2a62ceff":"We can create barplots by specifying kind of plot as *bar*.","2f49a485":"## Plotting Tools","5b022b1a":"- https:\/\/realpython.com\/tutorials\/data-viz\/\n- https:\/\/www.kaggle.com\/learn\/data-visualization\n- https:\/\/github.com\/EnginAlpman\n- https:\/\/www.data-to-viz.com\/\n- https:\/\/www.python-graph-gallery.com\/","97ed4579":"We can make multiple bar plots at the same time. **plt.bar()** function will help us for that.","801af662":"**Pandas**\n\n - Basic Plots\n \n - Bar Plots\n \n - Histograms\n \n - Box Plots\n \n - Area Plots\n \n - Scatter Plots\n \n - Hexagonal Bin Plots\n \n - Pie Plots\n \n - Plotting Tools\n","fbae9b74":"We can create a density plot matrix using the **plt.kde()** function.","1015f907":"**plot.area()** function can be used to make area plots.","a42348cd":"Scatter plots are used to plot data points on horizontal and vertical axis in the attempt to show how much one variable is affected by another.","a82bfba5":"We can draw horizontal box plot by making *vert* argument False.","17b1921c":"A histogram is a graph showing frequency distributions.\n\nIt is a graph showing the number of observations within each given interval.","76fe14c8":"## Importing Libraries","693e8a4c":"In order to plot multiple column groups in a single axes, we should repeat **plot()** method specifying target *ax*. It is recommended to specify color and label keywords to distinguish each groups.","3b2fa645":"## Pie Plots","e5c84752":"In order to draw box plots, we can use **plot.box()** function.","0ff4f1a2":"We can colorize Boxplot by passing *color* keyword. ","a8ae557c":"We can stack a histogram by making *stacked* argument True. Bin size can be changed using the *bins* keyword.","866280a4":"Andrews curves allow one to plot multivariate data as a large number of curves that are created using the attributes of samples as coefficients for Fourier series. **andrews_curves()** function will help us to create plots.","2c5bde49":"Hexagonal Binning is another way to manage the problem of having to many points that start to overlap. Hexagonal binning plots density, rather than points. Points are binned into gridded hexagons and distribution (the number of points per hexagon) is displayed using either the color or the area of the hexagons.\n\nWe can use **plt.hexbin()** function for that.","2b619c08":"We can draw horizontal and cumulative histograms by making *orientation* argument *'horizontal'* and *cumulative* argument True.","b1c79679":"In order to produce an unstacked plot, we need to pass *stacked* argument False.","5134812f":"**Created by Berkay Alan**\n\n**Pandas for Data Visualization**\n\n**25 of March, 2021**\n\n**For more Tutorial: https:\/\/github.com\/berkayalan**","8906a11d":"A barplot (or barchart) is one of the most common types of graphic. It shows the relationship between a numeric and a categoric variable. Each entity of the categoric variable is represented as a bar. The size of the bar represents its numeric value.","fe4188a1":"We can import these functions from **pandas.plotting** and give a *Series* or *DataFrame* as an argument."}}