{"cell_type":{"8016d10a":"code","6856ca4f":"code","60455646":"code","9ee1fef8":"code","0863f8f0":"code","04be3f26":"code","1ac2bba2":"code","24353772":"code","fe94ed8c":"code","5357cf12":"markdown","aca1bc49":"markdown","628e16d2":"markdown","bd03325c":"markdown","df995060":"markdown","54367988":"markdown","a5fc9d44":"markdown","2834a163":"markdown"},"source":{"8016d10a":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory\n\nimport os\nprint(os.listdir(\"..\/input\"))\n\n# Any results you write to the current directory are saved as output.\nimport pandas as pd\nimport numpy as np\nimport tensorflow as tf\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n# importing data\ndata = pd.read_csv('..\/input\/Admission_Predict_Ver1.1.csv')\n","6856ca4f":"data.columns = [c.replace(' ', '_') for c in data.columns]\ndata.columns = [c.replace('LOR_', 'LOR') for c in data.columns]\ndata.columns = [c.replace('Chance_of_Admit_', 'Chance_of_Admit') for c in data.columns]\ndata.columns = [c.replace('Chance_of_Admit', 'Admit') for c in data.columns]\ndata.head()","60455646":"data.loc[data['Admit']>=0.5,['Admit']]=1\ndata.loc[data['Admit']<0.5,['Admit']]=0","9ee1fef8":"data[\"GRE_Score\"] = data[\"GRE_Score\"]\/data[\"GRE_Score\"].max()\ndata[\"TOEFL_Score\"] = data[\"TOEFL_Score\"]\/data[\"TOEFL_Score\"].max()\ndata[\"University_Rating\"] = data[\"University_Rating\"]\/data[\"University_Rating\"].max()\ndata[\"SOP\"] = data[\"SOP\"]\/data[\"SOP\"].max()\ndata[\"LOR\"] = data[\"LOR\"]\/data[\"LOR\"].max()\ndata[\"CGPA\"] = data[\"CGPA\"]\/data[\"CGPA\"].max()","0863f8f0":"import keras\n\nX=data[['GRE_Score','TOEFL_Score','University_Rating','SOP','LOR','CGPA','Research']]\n# labels y are one-hot encoded, so it appears as two classes \ny = keras.utils.to_categorical(np.array(data[\"Admit\"]))","04be3f26":"from sklearn.model_selection import train_test_split\nX_train,X_test,y_train,y_test=train_test_split(X,y,train_size=0.7,random_state=100)","1ac2bba2":"from keras.models import Sequential\nfrom keras.layers.core import Dense, Activation\n\n\nmodel = Sequential()\nmodel.add(Dense(128, input_dim=7))\nmodel.add(Activation('sigmoid'))\nmodel.add(Dense(32))\nmodel.add(Activation('sigmoid'))\nmodel.add(Dense(2))\nmodel.add(Activation('sigmoid'))\nmodel.compile(loss = 'categorical_crossentropy', optimizer='adam', metrics=['accuracy'])\nmodel.summary()","24353772":"model.fit(X_train, y_train, epochs=1000, batch_size=100, verbose=0)","fe94ed8c":"score = model.evaluate(X_test, y_test)\nprint(score)","5357cf12":"Defining a model","aca1bc49":"Evaluating the model","628e16d2":"**Artificial Neural Network using Keras Demostrations**\n                                                       \n This Kernal demostrate how we can use Keras to implement ANN.\n **Problem Statement:** Predicting admission from important parameters. The end result is a model using with a student can predict the changes of his admission in the university","bd03325c":"Here 'Chance of Admit' tells us what are the changes of a student getting admitted  to university, so lets convert this column to 1 and 0","df995060":"Feature scaling","54367988":"We now split our data in X training features and y labels","a5fc9d44":"Training the model","2834a163":"Lets check the data by viewing a few records"}}