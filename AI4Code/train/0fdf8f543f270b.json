{"cell_type":{"d73b6780":"code","1e56b146":"code","9115dc73":"code","fae3a493":"code","42ca9c07":"code","8a7a009a":"code","acb08728":"code","50e61e1b":"code","9594bb0c":"code","96ba4ac2":"code","a2953f85":"code","1b302ab2":"code","95a01819":"code","fba91500":"code","cc3a04d8":"code","679d63c0":"code","a43fe4cf":"code","fcbdbdd5":"code","c0eedeb6":"code","e0b8a5c2":"code","876a5290":"code","8afe0329":"code","f3abf3e6":"code","6a627f25":"code","433c57f9":"code","7615bc80":"code","d148b96f":"code","60efe877":"code","ffe19d9d":"code","bb629a3a":"code","ccb9dfc4":"code","7a1378ce":"code","881dc148":"code","5e9ddfc1":"code","9d738807":"code","7374b2aa":"code","8d9aecce":"code","aea83152":"code","20d8ef64":"code","55646733":"code","21b8eb4d":"code","81f55436":"markdown","35ddff8b":"markdown","3ceb0899":"markdown","d1e3d1a5":"markdown","c9977ac4":"markdown","7160ec2b":"markdown","36c88354":"markdown","de3313cb":"markdown","71d47774":"markdown","679dd2fc":"markdown","5227fe76":"markdown","287cf2ba":"markdown","68c615d0":"markdown","5be5b419":"markdown","78b04aaa":"markdown","bf561fe8":"markdown","6bed4a34":"markdown"},"source":{"d73b6780":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nfrom matplotlib import cm\nimport seaborn as sns\nimport os\n\n%matplotlib inline\n\nimport warnings\nwarnings.filterwarnings('ignore')\n\n# for preprocessing\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.model_selection import KFold, cross_validate\n\n# classifiers\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.svm import SVC\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.ensemble import GradientBoostingClassifier\nfrom sklearn.ensemble import AdaBoostClassifier\nimport xgboost as xgb \n\n# Evaluation\nfrom sklearn.metrics import accuracy_score, confusion_matrix, plot_confusion_matrix, classification_report","1e56b146":"df = pd.read_csv('..\/input\/heart-disease-uci\/heart.csv')","9115dc73":"df.head()","fae3a493":"df.columns","42ca9c07":"# rename columns for easy understanding\ndf.columns = ['age', 'sex', 'chest_pain_type', 'resting_blood_pressure', 'cholesterol', 'fasting_blood_sugar', 'rest_ecg', 'max_heart_rate_achieved',\n        'exr_induced_angina', 'st_depression', 'st_slope', 'num_major_vessels', 'thalassemia', 'target']","8a7a009a":"cat_cols = ['sex', 'chest_pain_type', 'fasting_blood_sugar', 'rest_ecg','exr_induced_angina', 'st_slope', 'num_major_vessels', 'thalassemia']\nnum_cols = ['age', 'resting_blood_pressure', 'cholesterol', 'max_heart_rate_achieved','st_depression']","acb08728":"df.shape","50e61e1b":"df.info()","9594bb0c":"df.isnull().any().sum()","96ba4ac2":"df.describe().T","a2953f85":"df['target'].value_counts()","1b302ab2":"df.duplicated().sum()","95a01819":"print(f\"shape before removing duplicates: {df.shape}\")\ndf.drop_duplicates(inplace = True)\nprint(f\"shape after removing duplicates: {df.shape}\")","fba91500":"df['target'].value_counts().plot(kind = 'bar', color=['red', 'blue'])","cc3a04d8":"plt.figure(figsize=(20,10))\nfor i, col in enumerate(num_cols):\n    plt.subplot(2,3, i+1)\n    sns.kdeplot(data = df, x= col,hue = 'target', palette = 'Set1', fill = True)\n    plt.xticks(rotation = 90)","679d63c0":"sns.set_palette(\"pastel\")\nplt.figure(figsize=(20,10))\nfor i, col in enumerate(num_cols):\n    plt.subplot(2,3, i+1)\n    sns.histplot(data = df, x = col, hue = 'target', palette = 'Set1')\n    plt.xticks(rotation = 90)\n    plt.title(f\"{col}\", fontsize = 14)","a43fe4cf":"# sns.set_palette(\"pastel\")\nplt.figure(figsize=(20,10))\nfor i, col in enumerate(num_cols):\n    plt.subplot(2,3, i+1)\n    sns.boxplot(data = df, x = 'target', y = col, palette = 'Pastel1' )\n    sns.swarmplot(data = df, x = 'target', y = col, palette = 'Set1')\n    plt.xticks(rotation = 90)\n    plt.title(f\"{col}\", fontsize = 14)","fcbdbdd5":"plt.figure(figsize=(20,10))\nfor i, col in enumerate(cat_cols):\n    plt.subplot(2,4, i+1)\n    sns.countplot(data = df, x = col, palette = 'Set1')\n    plt.xticks(rotation = 90)\n    plt.title(f\"{col}\", fontsize = 14)","c0eedeb6":"plt.figure(figsize=(20,10))\nfor i, col in enumerate(cat_cols):\n    plt.subplot(2,4, i+1)\n    sns.countplot(data = df, x = col, hue = 'target', palette = 'Set1')\n    plt.xticks(rotation = 90)\n    plt.title(f\"{col}\", fontsize = 14)","e0b8a5c2":"# df['age'].value_counts().plot(kind = 'hist')\nsns.histplot(data = df, x = 'age', hue = 'target')","876a5290":"plt.figure(figsize=(10,20))\nfor i, col in enumerate(cat_cols):\n    plt.subplot(4,2, i+1)\n    sns.swarmplot(data = df, x = col, y = 'age', hue = 'target', palette = 'Set1')\n    plt.xticks(rotation = 90)\n    plt.title(f\"{col}\", fontsize = 14)","8afe0329":"sns.pairplot(df[['age','resting_blood_pressure','cholesterol','max_heart_rate_achieved','st_depression','target']],hue = 'target',palette = 'Set1', diag_kind='kde')","f3abf3e6":"plt.figure(figsize = (15,12))\nsns.heatmap(df.corr(), annot = True, fmt = '.2f', cmap = 'viridis', cbar = True)","6a627f25":"df.corr()['target'].sort_values(ascending = False)[1:].plot(kind = 'bar', lw = .4, color = 'blue')","433c57f9":"df[num_cols].head()","7615bc80":"X = df.drop('target', axis = 1)\ny = df['target']","d148b96f":"X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=21)\nX_train.shape, X_test.shape","60efe877":"# standardize only numerical columns\nscaler = StandardScaler()\nX_train[num_cols] = scaler.fit_transform(X_train[num_cols])\nX_test[num_cols] = scaler.transform(X_test[num_cols])","ffe19d9d":"key = ['LogisticRegression','KNeighborsClassifier','SVC','DecisionTreeClassifier','RandomForestClassifier','GradientBoostingClassifier','AdaBoostClassifier','XGBClassifier']\nvalue = [LogisticRegression(random_state=9), KNeighborsClassifier(), SVC(), DecisionTreeClassifier(), RandomForestClassifier(), GradientBoostingClassifier(), AdaBoostClassifier(), xgb.XGBClassifier()]\nmodels = dict(zip(key,value))","bb629a3a":"cv=KFold(5, shuffle=True, random_state=21)","ccb9dfc4":"def model_check(X, y, classifiers, cv):\n    \n    ''' A function for testing multiple classifiers and return several metrics. '''\n    \n    model_table = pd.DataFrame()\n\n    row_index = 0\n    for cls in classifiers:\n\n        MLA_name = cls.__class__.__name__\n        model_table.loc[row_index, 'Model Name'] = MLA_name\n        \n        cv_results = cross_validate(\n            cls,\n            X,\n            y,\n            cv=cv,\n            scoring=('accuracy','f1','roc_auc'),\n            return_train_score=True,\n            n_jobs=-1\n        )\n        model_table.loc[row_index, 'Train Roc\/AUC Mean'] = cv_results['train_roc_auc'].mean()\n        model_table.loc[row_index, 'Test Roc\/AUC Mean'] = cv_results['test_roc_auc'].mean()\n        model_table.loc[row_index, 'Test Roc\/AUC Std'] = cv_results['test_roc_auc'].std()\n        model_table.loc[row_index, 'Train Accuracy Mean'] = cv_results['train_accuracy'].mean()\n        model_table.loc[row_index, 'Test Accuracy Mean'] = cv_results['test_accuracy'].mean()\n        model_table.loc[row_index, 'Test Acc Std'] = cv_results['test_accuracy'].std()\n        model_table.loc[row_index, 'Train F1 Mean'] = cv_results['train_f1'].mean()\n        model_table.loc[row_index, 'Test F1 Mean'] = cv_results['test_f1'].mean()\n        model_table.loc[row_index, 'Test F1 Std'] = cv_results['test_f1'].std()\n        model_table.loc[row_index, 'Time'] = cv_results['fit_time'].mean()\n\n        row_index += 1        \n\n    model_table.sort_values(by=['Test F1 Mean'],\n                            ascending=False,\n                            inplace=True)\n\n    return model_table","7a1378ce":"raw_models = model_check(X_train, y_train, models.values(), cv)","881dc148":"raw_models","5e9ddfc1":"def f_imp(classifiers, X, y, bins):\n    \n    ''' A function for displaying feature importances'''\n    \n    fig, axes = plt.subplots(1, 2, figsize=(20, 8))\n    axes = axes.flatten()\n\n    for ax, classifier in zip(axes, classifiers):\n\n        try:\n            classifier.fit(X, y)\n            feature_imp = pd.DataFrame(sorted(\n                zip(classifier.feature_importances_, X.columns)),\n                                       columns=['Value', 'Feature'])\n\n            sns.barplot(x=\"Value\",\n                        y=\"Feature\",\n                        data=feature_imp.sort_values(by=\"Value\",\n                                                     ascending=False),\n                        ax=ax,\n                        palette='plasma')\n            plt.title('Features')\n            plt.tight_layout()\n            ax.set(title=f'{classifier.__class__.__name__} Feature Impotances')\n            ax.xaxis.set_major_locator(MaxNLocator(nbins=bins))\n        except:\n            continue\n    plt.show()","9d738807":"f_imp([RandomForestClassifier(), DecisionTreeClassifier()], X_train, y_train, 6)","7374b2aa":"raw_models.columns","8d9aecce":"plt.figure(figsize = (8,5))\nsns.barplot(data=raw_models, x = 'Train Accuracy Mean', y = 'Model Name', palette = 'Set1')","aea83152":"plt.figure(figsize = (8,5))\nsns.barplot(data=raw_models, x = 'Test Accuracy Mean', y = 'Model Name', palette = 'Set1')","20d8ef64":"raw_models.set_index('Model Name', inplace = True)","55646733":"plt.figure(figsize = (18,8))\nraw_models[['Train Accuracy Mean','Test Accuracy Mean' ]].plot(kind = 'barh', colormap = cm.get_cmap('Spectral'), legend = False)","21b8eb4d":"lr = LogisticRegression()\nlr.fit(X_train, y_train)\npred = lr.predict(X_test)\n\nprint(f'Accuracy score: {round(accuracy_score(y_test, pred) * 100, 2)} %')\nplot_confusion_matrix(lr, X_test, y_test, cmap=plt.cm.Blues)","81f55436":"## 2. Questions to be answered:\n1. Does the age of a person contribute towards heart attack?\n2. Are different types of chest pain related to each other or the possibility of getting a heart attack?\n3. Does high blood pressure increase the risk of heart attack?\n4. Does the choestrol level eventually contribute as a risk factor towards heart attack?","35ddff8b":"### Multivariate analysis","3ceb0899":"## Q1. Does the age of a person contribute towards heart attack?","d1e3d1a5":"# About this dataset [Heart Disease UCI](https:\/\/www.kaggle.com\/ronitf\/heart-disease-uci)\n* Age: Age of the patient\n* Sex:\n    * 0: Female\n    * 1: Male\n* Chest Pain Type:\n    * 0: Typical Angina\n    * 1: Atypical Angina\n    * 2: Non-Anginal Pain\n    * 3: Asymptomatic\n* Resting Blood Pressure: Person's resting blood pressure.\n* Cholesterol: Serum Cholesterol in mg\/dl\n* Fasting Blood Sugar:\n    * 0:Less Than 120mg\/ml\n    * 1: Greater Than 120mg\/ml\n* Resting Electrocardiographic Measurement:\n    * 0: Normal\n    * 1: ST-T Wave Abnormality\n    * 2: Left Ventricular Hypertrophy\n* Max Heart Rate Achieved: Maximum Heart Rate Achieved\n* Exercise Induced Angina:\n    * 1: Yes\n    * 0: No\n* ST Depression: ST depression induced by exercise relative to rest.\n* Slope: Slope of the peak exercise ST segment:\n    * 0: Upsloping\n    * 1: Flat\n    * 2: Downsloping\n* Thalassemia: A blood disorder called 'Thalassemia':\n    * 0: Normal\n    * 1: Fixed Defect\n    * 2: Reversable Defect\n* Number of Major Vessels: Number of major vessels colored by fluoroscopy.\n* target :\n    * 0 = less chance of heart attack\n    * 1 = more chance of heart attack","c9977ac4":"### Q4. Does the cholestrol level eventually contribute as a risk factor towards heart attack?\nAns: cholestrol level in range of 200-300 are maximum prone to heart attack. ","7160ec2b":"## Model Training","36c88354":"## EDA","de3313cb":"### Univariate analysis","71d47774":"## 1. Objective:\n* Based on some independent features, to predict whether an individual is prone to heart attack or not.\n* To study which feature impact more on the prediction\n* Selection of best model to predict the heart attack. ","679dd2fc":"### Q2: Are different types of chest pain related to each other or the possibility of getting a heart attack?\nAns: chest pain type 0 is less likely to have heart attack while chest pain type 2 is most related to heart attack. ","5227fe76":"**Observations** \n* Logistic Regression, SVC and KNN has low variance while others has high variance with low bias.\n* So I am considering Logistic Regression as best model for this problem.","287cf2ba":"### Numerical Feature Analysis","68c615d0":"### Ans1\nYouger are more prone toward heart attack rather than above 55","5be5b419":"## Data spliting and scaling","78b04aaa":"### Correlation","bf561fe8":"## Categorical Feature Analysis","6bed4a34":"### Q3 Does high blood pressure increase the risk of heart attack?\nAns: blood pressure does not impact the heart attack, even high blood pressure are less prone to heart attack, it seems weird, but this is what we can observe from the data. "}}