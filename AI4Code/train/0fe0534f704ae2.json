{"cell_type":{"34c733dc":"code","179e65f4":"code","5d9606ed":"code","70b93137":"code","7a431a89":"code","79f22ccd":"code","193dba4e":"code","791fb6e7":"code","3336318c":"code","ee4afdd4":"code","3ad98ed1":"code","276b00eb":"code","e08ed7fb":"code","7c6f549f":"code","0cf6f257":"code","9357da99":"markdown","d69de018":"markdown","ca9961bd":"markdown","384e00a1":"markdown","c386dc05":"markdown"},"source":{"34c733dc":"import pandas as pd\nimport numpy as np\nfrom datetime import datetime\nfrom collections import Counter","179e65f4":"# load new data and convert dates\ndf_new = pd.read_csv(\"..\/input\/lending-club-20072020q1\/Loan_status_2007-2020Q3.gzip\")\ndf_new[\"issue_d\"] = pd.to_datetime(df_new[\"issue_d\"], format=\"%b-%Y\")\ndf_new[\"last_pymnt_d\"] = pd.to_datetime(df_new[\"last_pymnt_d\"], format=\"%b-%Y\")\ndf_new.shape # one of the 142 columns is \"Unnamed 0\" -- the result of using pd.to_csv without specifying index=False","5d9606ed":"# 2017-04-01 is the last payment day in the old data\n# any loans that completed before 2017-04-01 were up to date as of the old data\n# thus we will remove these loans\ndf_new = df_new.loc[df_new[\"last_pymnt_d\"] > datetime(2017,4,1)] \ndf_new.shape","70b93137":"# load old data and convert dates\ndf_old = pd.read_csv(\"..\/input\/lending-club\/accepted_2007_to_2018Q4.csv.gz\")\ndf_old[\"issue_d\"] = pd.to_datetime(df_old[\"issue_d\"], format=\"%b-%Y\")\ndf_old[\"last_pymnt_d\"] = pd.to_datetime(df_old[\"last_pymnt_d\"], format=\"%b-%Y\")\ndf_old.shape","7a431a89":"ids = df_new[\"id\"].sample(n=10000, random_state=123).values\ndf_new = df_new.loc[df_new[\"id\"].isin(ids)]\ndf_old = df_old.loc[df_old[\"id\"].isin(ids)]\ndf_new = df_new.loc[df_new[\"id\"].isin(df_old[\"id\"].values)] # df_new may have too many rows now, so we filter again\ndf_new.shape, df_old.shape","79f22ccd":"df_new = df_new.sort_values(\"id\")\ndf_old = df_old.sort_values(\"id\")","193dba4e":"# confirming alignment\nnp.mean(df_new[\"id\"].values == df_old[\"id\"].values) # should be 100%","791fb6e7":"# aligning columns\ncommon_cols = [x for x in df_new.columns if x in df_old.columns]\n\n# which columns aren't in common?\nprint(\"Columns in new data not in old:\", set(df_new.columns).difference(set(df_old.columns)))\nprint(\"Columns in old data not in old:\", set(df_old.columns).difference(set(df_new.columns)))","3336318c":"df_new = df_new[common_cols]\ndf_old = df_old[common_cols]\ndf_new.shape, df_old.shape","ee4afdd4":"# confirming alignment\nnp.mean(df_new.columns == df_old.columns) # should be 100%","3ad98ed1":"# reformatting new data to match old data\ndf_new[\"revol_util\"] = df_new[\"revol_util\"].apply(lambda x: x.strip().replace(\"%\",\"\") if type(x) == str else np.nan).astype('float64')\ndf_new[\"int_rate\"] = df_new[\"int_rate\"].apply(lambda x: x.strip().replace(\"%\",\"\") if type(x) == str else np.nan).astype('float64')","276b00eb":"# identifying non-matching (I refer to these as 'uncommon') instances\nuncommon = []\nfor i in range(len(df_new)):\n    x = df_new.iloc[i,:].fillna(\"NULL\")\n    y = df_old.iloc[i,:].fillna(\"NULL\")\n    uncommon_xy = df_new.columns[x.values != y.values].values\n    uncommon.extend(uncommon_xy)\n#     print(uncommon_xy)\n#     display(df_new[uncommon_xy].values[i])\n#     display(df_old[uncommon_xy].values[i])","e08ed7fb":"Counter(uncommon)","7c6f549f":"diff = np.where(df_new[\"int_rate\"].values != df_old[\"int_rate\"])[0][0]\ndf_new[[\"int_rate\", \"installment\"]].values[diff], df_old[[\"int_rate\",\"installment\"]].values[diff]","0cf6f257":"# one of the types of features I was initially interested in was \"mths_since_*\"; let's check these out\nmo_sin = [x for x in df_new.columns if \"mo_sin\" in x or \"mths_since\" in x]\ndf_new.loc[~df_new[mo_sin].isna().all(axis=1), mo_sin] # rows where one of the \"mths_since_*\" features is non-null","9357da99":"Note there are a couple strange cases of interest rate and installment changing. It's also strange that `orig_projected_additional_accrued_interest` changed -- but I checked it and it looks like it's just old 'NA' values being filled in.","d69de018":"Now let's align columns.","ca9961bd":"Our experiment a few lines above suggests the `mths_since_*` features are not temporal (they do not appear in the `Counter`). However, it could also be that LendingClub stopped update these after 2017-04-01, at which point the business was struggling.","384e00a1":"# Columns available at origination? Answer!\nI recently [asked a question](https:\/\/www.kaggle.com\/wordsforthewise\/lending-club\/discussion\/220358) about identifying columns which are available at loan origination (i.e. are temporal) because I want to build a model which only uses features available at origination. \n\nI think I came up with a decent answer. I found a newer version of the LendingClub dataset ([Lending Club 2007-2020Q3](https:\/\/www.kaggle.com\/ethon0426\/lending-club-20072020q1), also from Kaggle). The newer version has roughly the same columns<sup>**1**<\/sup>. My idea was to find loans which were updated between the two datasets and compare matching column names to see if their values changed. If a column is temporal, then we should see some instances of it changing between the two datasets. If we do not see any changes, then it is probably available at origination. \n\n**Note:** this provides evidence the column is not temporal, but it may just be due to LendingClub no longer updating it or that the Kaggler who curated this dataset did nto update it. Anyone who has worked with this dataset knows that LC changed their data reporting drastically (for loans issued prior to 2012 their data contained < 30 columns; afterwords their data contained 150). A better solution would've been to find a slightly older dataset rather than a newer one -- however I could not find any older datasets which contained more than 30 columns.\n\n&#8291;**1.** The new dataset has 141 of the 151 columns from the more popular version. The columns missing columns in the new dataset are: `['desc','member_id','sec_app_mths_since_last_major_derog','disbursement_method','debt_settlement_flag_date',\n'settlement_status','settlement_date','settlement_amount','settlement_percentage','settlement_term']`","c386dc05":"Now let's align rows (we take just a sample)."}}