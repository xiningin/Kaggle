{"cell_type":{"1e9ddcd0":"code","16dd533e":"code","ea39173c":"code","37956dd2":"code","d25fe5e8":"code","5e18d427":"code","d2bb3a88":"code","5644d060":"code","69c9865c":"code","6375d04b":"code","cdcbd14d":"code","8ad7989e":"code","bf0cce2b":"code","e1396e4a":"code","35ec7d03":"code","ca157c97":"code","2ca4a09f":"markdown","8fe4fc1a":"markdown","7405a246":"markdown","0603a47f":"markdown","c4f3b7f9":"markdown","b9ead023":"markdown","9085444e":"markdown","62d1749b":"markdown","25ff941f":"markdown","700c2b66":"markdown","b1b5e45e":"markdown","9db721cb":"markdown","6ad2dfb2":"markdown","d0c34565":"markdown","1a6b3812":"markdown","6ab6ac8b":"markdown","daa3c65d":"markdown","d5901e2f":"markdown"},"source":{"1e9ddcd0":"import numpy as np \nimport pandas as pd\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n        \nfrom sklearn.model_selection import train_test_split\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.metrics import confusion_matrix\nfrom sklearn.metrics import classification_report","16dd533e":"import os\nimport glob\nimport pandas as pd\nextension = 'csv'\nall_filenames = [\"\/kaggle\/input\/understat-data-for-teams-players-2014-present\/Data\/Player_Data\/season_data\/2014_whole_season_data.csv\", \n                 \"\/kaggle\/input\/understat-data-for-teams-players-2014-present\/Data\/Player_Data\/season_data\/2015_whole_season_data.csv\",\n                 \"\/kaggle\/input\/understat-data-for-teams-players-2014-present\/Data\/Player_Data\/season_data\/2016_whole_season_data.csv\",\n                 \"\/kaggle\/input\/understat-data-for-teams-players-2014-present\/Data\/Player_Data\/season_data\/2017_whole_season_data.csv\", \n                 \"\/kaggle\/input\/understat-data-for-teams-players-2014-present\/Data\/Player_Data\/season_data\/2018_whole_season_data.csv\",\n                 \"\/kaggle\/input\/understat-data-for-teams-players-2014-present\/Data\/Player_Data\/season_data\/2019_whole_season_data.csv\"]\ncombined_csv = pd.concat([pd.read_csv(f) for f in all_filenames ])\ncombined_csv.to_csv(\"combined_csv.csv\", index=False, encoding='utf-8-sig')","ea39173c":"data = pd.read_csv(\"combined_csv.csv\", header = 1)\ndata.columns = ['id','player_name','games','time','goals_total','xG_total','assists_total','xA_total','shots_total','key_passes_total','yellow_cards','red_cards','position_last','team_title_last','npg_total','npxG_total','xGChain','xGBuildup']\ndata = data.groupby(['id']).agg({'player_name':'first',\n                                 'games':'sum',\n                                 'time':'sum',\n                                 'goals_total':'sum',\n                                 'xG_total':'sum',\n                                 'assists_total':'sum',\n                                 'xA_total':'sum',\n                                 'shots_total':'sum',\n                                 'key_passes_total':'sum',\n                                 'yellow_cards':'sum',\n                                 'red_cards':'sum',\n                                 'position_last':'last',\n                                 'team_title_last':'last',\n                                 'npg_total':'sum',\n                                 'npxG_total':'sum',\n                                 'xGChain':'sum',\n                                 'xGBuildup':'sum'}).reset_index()","37956dd2":"data","d25fe5e8":"copydata = data.copy()\nfactor = pd.factorize(copydata['position_last'])\ncopydata.position_last = factor[0]\ndefinitions = factor[1]","5e18d427":"X = copydata.iloc[:,[6, 7, 8, 9, 10, 11, 14, 15, 17]].values\ny = copydata.iloc[:,12].values","d2bb3a88":"X_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.2, shuffle=False)","5644d060":"scaler = StandardScaler()\nX_trains = scaler.fit_transform(X_train)\nX_tests = scaler.transform(X_test)\n\nclassifier = RandomForestClassifier(n_estimators = 1000, criterion = 'entropy')\nclassifier.fit(X_trains, y_train)\ny_pred = classifier.predict(X_tests)","69c9865c":"reversefactor = dict(zip(range(14),definitions))\ny_test = np.vectorize(reversefactor.get)(y_test)\ny_pred = np.vectorize(reversefactor.get)(y_pred)\nlabels = np.unique(y_test)","6375d04b":"a = confusion_matrix(y_test, y_pred, labels = labels)\npd.DataFrame(a, index=labels, columns=labels)","cdcbd14d":"report = classification_report(y_test, y_pred, target_names=labels, output_dict = True)\npd.DataFrame(report).transpose()","8ad7989e":"zeros = np.zeros((len(data)-len(y_pred)))\ny_predz = np.concatenate((zeros, y_pred),axis=None)\ny_predz = pd.DataFrame(y_predz, columns=['predicted_position'])","bf0cce2b":"b = np.arange(0,len(data))\nindex = pd.DataFrame(b, columns=['index'])","e1396e4a":"completedata = pd.concat([index, data, y_predz], axis=1)\ncompletedata.columns = ['index','id','player_name','games','time','goals_total','xG_total','assists_total','xA_total','shots_total','key_passes_total','yellow_cards','red_cards','position_last','team_title_last','npg_total','npxG_total','xGChain','xGBuildup', 'predicted_position']","35ec7d03":"c = np.arange(len(data)-len(y_pred),len(data))\nresults = pd.DataFrame(completedata[completedata['index'].isin(c)])\nresults.to_csv('results.csv', index=False)","ca157c97":"results","2ca4a09f":"We can put the data into X and y by setting independent and dependent variables. The independent variables that I chose are:\n* assists\n* expected assists\n* shots\n* key passes\n* yellow cards\n* red cards\n* non-penalty goals\n* non-penalty expected goals\n* expected goal buildup\n\nIn my opinion, these were the statistics in the data set that best defined a player's position, though this is definitely subject to argument. ","8fe4fc1a":"# Aggregrating the Data\n\nThe data that we will be using is player statistics from Premier League Seasons 2014\/15-2019\/20. Our first step will be to combine this data into one array.","7405a246":"# Final Consideration\n\nWhile determining the position of players is a good start, this model - or any improvements on its current format - only determine the position that a players' statistics indicate that they play most like, which does not necessarily equate to their best position. So while its definitely interesting to see that Will Hughes' statistics predict him as an attacking winger, Patrick Vieira would likely do best to keep him anchoring Crystal Palace's midfield. ","0603a47f":"# Fitting the Data\n\nAnd finally, we are able to scale the data, fit it, and create predictions based on the testing data.","c4f3b7f9":"Then, we can concatenate the three arrays together and set the columns.","b9ead023":"The goal at large of this project is to classify a soccer player's position based on their statistics, perhaps in the future, to recommend the position best suited to them. While the model is not the most applicable at the moment, I believe that the results are fairly promising, and that the idea has potential.","9085444e":"# Splitting the Data\n\nNow, we are ready for our train-test-split.","62d1749b":"# Defining the Data\n\nWe will start breaking the data by changing each individual position to a number","25ff941f":"# Import Library","700c2b66":"# Results of Model\n\nNow, we can work to display the results of our model. Essentially, this would mean adding a column for predicted position to the testing data.\n\nFirst, we can create an array of zeros with the testing data to make it easier to join. ","b1b5e45e":"And a classification report to get a clearer picture of accuracy.","9db721cb":"At first glance, the results do not appear too promising (~40%-50% overall accuracy). However, there are a few things that we have to consider:\n1. There are multiple classes. The fact that around half of the data is properly classified is not too bad considering that there were 14 possible classes to be sorted into. \n2. The statistics were purely based on a player's contribution to the attack. The model is by no means perfect, and this is one of the main reasons. It has zero consideration for a player's defensive contribution and classifies solely based on their attacking statistics. This means that we can likely ignore classifications involving 'GK' or 'D', which would appear to improve accuracy.\n\nAll in all, while not a very useful model at the moment, I see potential for future applications. Given some more data (specifically geared towards defensive statistics), this model could be particularly useful to clubs and their player academies, where determining the natural position of players is often a topic of discussion. ","6ad2dfb2":"Next, we will need to create an index column to later sort out the testing data.","d0c34565":"Finally, we can manually sort out the testing data to display, and create a csv output. ","1a6b3812":"Notice that a player's position is shown in a fairly unique way. If you are interested, basically, a player is able to have some combination of:\n* GK: Goalkeeper\n* D: Defense\n* M: Midfield\n* F: Attack\n* S: Side (Wing)","6ab6ac8b":"# Accuracy of Model\n\nNow that we are fitted, we can work towards displaying the accuracy of the results. \n\nFirst, however, we will need to reverse factor the column names, which we previously set to numbers.","daa3c65d":"Now, we can combine individual player data on each column in a logical manner. ","d5901e2f":"We can now print a confusion matrix with the x-axis representing the predictions, and the y-axis representing the actual values. The sum of the values on the top-left to bottom-right diagonal are the number of players whose postion was accurately predicted. "}}