{"cell_type":{"a824c235":"code","bfb54ac1":"code","79a91c6c":"code","53e3b747":"code","a3ea51b3":"code","55f97e9e":"code","0fcc3f73":"code","9ca3c2fa":"code","b205d604":"code","a851d46e":"code","8b3097d3":"code","a040aa9b":"code","98c51ad9":"code","3c79fbd9":"code","bc84cc29":"code","e58faf7b":"code","6d7d65d3":"code","ad6dc65a":"code","d1b4815d":"code","fd09b10c":"code","c1e285ab":"code","1f0d67e6":"code","b44b0d32":"code","24f95b54":"code","0909ae01":"code","d153064c":"markdown","96945f1e":"markdown","2478e652":"markdown","7640a5b5":"markdown","531e7bcb":"markdown","5707a23c":"markdown","57a56a73":"markdown","da162cc2":"markdown","dedd59b4":"markdown","d66c2ed2":"markdown","5933698f":"markdown","90f39116":"markdown"},"source":{"a824c235":"import collections\nfrom collections import Counter\n\nimport helper\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\n%matplotlib inline\n\nfrom keras.preprocessing.text import Tokenizer\nfrom keras.preprocessing.sequence import pad_sequences\nfrom keras.models import Model, Sequential\nfrom keras.layers import GRU, Input, Dense, TimeDistributed, Activation, RepeatVector, Bidirectional,LSTM\nfrom keras.layers.embeddings import Embedding\nfrom keras.optimizers import Adam\nfrom keras.losses import sparse_categorical_crossentropy\nfrom keras.callbacks import ModelCheckpoint\n\nimport plotly.express as px\nfrom plotly.subplots import make_subplots\nimport plotly.graph_objects as go\n\nfrom sklearn.model_selection import train_test_split\n\nfrom tabulate import tabulate\n\nimport gc","bfb54ac1":"url = '..\/input\/language-translation-englishfrench\/eng_-french.csv'\n\ndata = pd.read_csv(url, header='infer')","79a91c6c":"#Total Records\nprint(\"Total Records: \", data.shape[0])","53e3b747":"#Checking for Null\/Missing Values\ndata.isna().sum()","a3ea51b3":"#Renaming Columns\ndata = data.rename(columns={\"English words\/sentences\":\"Eng\", \"French words\/sentences\":\"Frn\" })","55f97e9e":"#Randomly Show a English > French sentence\nx = np.random.randint(1, data.shape[0])\nprint(\"--- Random English - French Sentence --- \\n\"\n      \"English Sentence\/Word: \", data.Eng[x], \"\\n\"\n      \"French Sentence\/Word: \", data.Frn[x]\n     )","0fcc3f73":"# Function for word count\ndef word_count (txt):\n    return len(txt.split())","9ca3c2fa":"#Applying the Word Count Function to Eng & French Columns\ndata['Eng_Count'] = data['Eng'].apply(lambda x: word_count(x))\ndata['Frn_Count'] = data['Frn'].apply(lambda x: word_count(x))","b205d604":"print( '{} English Words'.format(data['Eng_Count'].sum()) ) \nprint('{} French Words'.format(data['Frn_Count'].sum()) )\n      ","a851d46e":"fig = make_subplots(rows=1, cols=2, subplot_titles=(\"English\",\"French\"))\n\nfig.add_trace(\n    go.Histogram(x=data['Eng_Count'],histfunc='sum',opacity =0.8,showlegend=False,text='Eng'), row=1,col=1)\n\nfig.add_trace(\n    go.Histogram(x=data['Frn_Count'],histfunc='sum', opacity =0.8,showlegend=False,text='Frn'), row=1,col=2)\n\nfig.update_layout(height=600, width=800, title_text=\"Words Distribution\")\nfig.show()\n\n","8b3097d3":"#Tokenize Function\ndef tokenize(x):\n    x_tk = Tokenizer(char_level = False)\n    x_tk.fit_on_texts(x)\n    return x_tk.texts_to_sequences(x), x_tk\n    #return x_tk\n","a040aa9b":"#Padding Function\ndef pad(x, length=None):\n    if length is None:\n        length = max([len(sentence) for sentence in x])\n    return pad_sequences(x, maxlen = length, padding = 'post')\n    ","98c51ad9":"#Tokenize English text & determine English Vocab Size \neng_seq, eng_tok = tokenize(data['Eng'])\neng_vocab_size = len(eng_tok.word_index) + 1\nprint(\"Complete English Vocab Size: \",eng_vocab_size)\n\n#Tokenize French text & determine French Vocab Size \nfrn_seq, frn_tok = tokenize(data['Frn'])\nfrn_vocab_size = len(frn_tok.word_index) + 1\nprint(\"Complete French Vocab Size: \",frn_vocab_size)\n","3c79fbd9":"#Sequence Length (Complete Dataset) \neng_len = max([len(sentence) for sentence in eng_seq])\nfrn_len = max([len(sentence) for sentence in frn_seq])\n\nprint(\"English Sequence Length: \",eng_len,\"\\n\",\n      \"French Sequence Length: \",frn_len)","bc84cc29":"# split data into train (90%) and test set (10%)\ntrain_data, test_data = train_test_split(data, test_size=0.1, random_state = 0)","e58faf7b":"#Drop Columns\ntrain_data = train_data.drop(columns=['Eng_Count', 'Frn_Count'],axis=1)\ntest_data = test_data.drop(columns=['Eng_Count', 'Frn_Count'],axis=1)\n\n#Re-Index\ntrain_data = train_data.reset_index(drop=True)\ntest_data = test_data.reset_index(drop=True)\n","6d7d65d3":"# -- Tokenization --\n\n# Training Data\ntrain_X_seq, train_X_tok = tokenize(train_data['Eng'])\ntrain_Y_seq, train_Y_tok = tokenize(train_data['Frn'])\n\ntrain_eng_vocab = len(train_X_tok.word_index) + 1\ntrain_frn_vocab = len(train_Y_tok.word_index) + 1\n\n# Testing Data\ntest_X_seq, test_X_tok = tokenize(test_data['Eng'])\ntest_Y_seq, test_Y_tok = tokenize(test_data['Frn'])\n\ntest_eng_vocab = len(test_X_tok.word_index) + 1\ntest_frn_vocab = len(test_Y_tok.word_index) + 1\n\n\n# -- Padding --\n\n#Training Data\ntrain_X_seq = pad(train_X_seq)\ntrain_Y_seq = pad(train_Y_seq)\n\n#Testing Data\ntest_X_seq = pad(test_X_seq)\ntest_Y_seq = pad(test_Y_seq)\n\n","ad6dc65a":"#Tabulate the Vocab Size\ntab_data = [[\"Train\", train_eng_vocab, train_frn_vocab],[\"Test\",test_eng_vocab,test_frn_vocab]]\nprint(tabulate(tab_data, headers=['Dataset','Eng Vocab Size','Frn Vocab Size'], tablefmt=\"pretty\"))\n","d1b4815d":"# Define Model\n\ndef define_model(in_vocab,out_vocab, in_timesteps,out_timesteps, btch_size):\n    \n    model = Sequential()\n    model.add(Embedding(in_vocab, btch_size, input_length=in_timesteps, mask_zero=True))\n    \n    model.add(LSTM(btch_size))\n    model.add(RepeatVector(out_timesteps))\n    model.add(LSTM(btch_size, return_sequences=True))\n    model.add(Dense(out_vocab, activation='softmax'))\n    \n    return model","fd09b10c":"# Compile Parameters\nbatch_size = 64   #batch size\nlr = 1e-3          #learning rate\n\n#Model\nmodel = define_model(eng_vocab_size, frn_vocab_size, eng_len, frn_len, batch_size)\n\n#Compile Model\nmodel.compile(loss='sparse_categorical_crossentropy', optimizer = Adam(lr))\n","c1e285ab":"fn = 'model.h1.MT'\nepoch = 2\nval_split = 0.1\n\n#Checkpoint\ncheckpoint = ModelCheckpoint(fn, monitor='val_loss', verbose=1, save_best_only=True, mode='min')\n\n#Train\nhistory = model.fit(train_X_seq, train_Y_seq,\n                    epochs=epoch, batch_size=batch_size, validation_split = val_split, callbacks=[checkpoint], \n                    verbose=1)\n\n","1f0d67e6":"plt.rcParams[\"figure.figsize\"] = (10,8)\nplt.plot(history.history['loss'])\nplt.plot(history.history['val_loss'])\nplt.legend(['train','validation'])\nplt.title(\"Train vs Validation - Loss\", fontsize=15)\nplt.show()","b44b0d32":"#Making Prediction\npredictions = model.predict(test_X_seq[1:6])[0]","24f95b54":"def to_text(logits, tokenizer):\n\n    index_to_words = {id: word for word, id in tokenizer.word_index.items()}\n    index_to_words[0] = ''\n    return ' '.join([index_to_words[prediction] for prediction in np.argmax(logits, 1)])","0909ae01":"print(to_text(predictions, frn_tok))","d153064c":"# EDA","96945f1e":"# Pre-Process\n\n**Tokenization** - For a neural network to predict on text data, it first has to be turned into data it can understand. Since a neural network is a series of multiplication and addition operations, the input data needs to be number(s). Here we're going to use Kera's **Tokenizer** function to turn each sentence into sequence of words\n\n**Padding** - When batching the sequence of token'd words together, each sequence needs to be the same length. Since sentences are dynamic in length, we can add padding to the end of the sequences to make them the same length. Here we're going to use Kera's **Pad_Sequences** function\n\n","2478e652":"# Build Model\n\n### Model - RNN with Word Embedding\n### Architecture - LSTM\n","7640a5b5":"# Train Model\n\nWe'll train our model for 10 epochs and with a batch size of 64 with a validation split of 10%. 90% of the data will be used for training the model and the rest for evaluating it.\n\nWe will also use the ModelCheckpoint() function to save the model with the lowest validation loss.","531e7bcb":"# Preparing Train & Test Data\n\nThe Training & Test Data contains some unwanted columns & also needed a reset of index","5707a23c":"# Data","57a56a73":"# Prediction","da162cc2":"# Data Split\n","dedd59b4":"# Libraries","d66c2ed2":"# Processing the Training & Test Data\n\n**Note: For the purposes of this notebook\/tutorial we're going to consider *English Sentences as Feature\/Input* & *French Sentences as Target*.**","5933698f":"# Neural Machine Translation\n\nIn this notebook, we're going to perform a Machine Translation (MT) using RNN Model. As part of this MT, we'll train the model to learn ENGLISH-FRENCH sentence pairs from the [dataset](https:\/\/www.kaggle.com\/devicharith\/language-translation-englishfrench) and once trained & ready, our model will accept ENGLISH & translate it to FRENCH.\n\nAs always, I will try to keep the notebook clean, well commented & organized. Please do consider it to **UPVOTE** if you find it helpful :-)","90f39116":"# Vocabulary Size & Sequence Length (Complete Dataset)"}}