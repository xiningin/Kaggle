{"cell_type":{"d656985b":"code","68c5a628":"code","cacf29ee":"code","5299fe59":"code","edac1a58":"code","7561a843":"code","d3acfddd":"code","00ab5d69":"code","b1a7668d":"code","0a7ce219":"markdown","b3c19632":"markdown","7967b9b7":"markdown","14ed6076":"markdown","cc18fec1":"markdown","db4af1e2":"markdown","454ac39a":"markdown"},"source":{"d656985b":"import pandas as pd\nimport numpy as np\n\nfrom keras.preprocessing.image import ImageDataGenerator\nfrom keras.callbacks import EarlyStopping\nimport matplotlib.pyplot as plt","68c5a628":"train_data = ImageDataGenerator(\n    rescale=1.\/255,\n    zoom_range=0.15,\n    fill_mode='nearest',\n    width_shift_range=0.15,\n    height_shift_range=0.15\n)\ntest_data = ImageDataGenerator(\n    rescale=1.\/255,\n    fill_mode='nearest'\n)\n\ntrain_generator = train_data.flow_from_directory('..\/input\/cat-and-dog\/training_set\/training_set', target_size=(230, 230), batch_size=32, class_mode='binary')\ntest_generator = test_data.flow_from_directory('..\/input\/cat-and-dog\/test_set\/test_set', target_size=(230, 230), batch_size=32, class_mode='binary')","cacf29ee":"from keras.models import Sequential\nfrom keras.layers import Conv2D, MaxPooling2D, BatchNormalization, Dropout, Dense, Flatten","5299fe59":"model = Sequential()\nmodel.add(Conv2D(128, (3,3), input_shape=(230,230, 3)))\nmodel.add(MaxPooling2D((2, 2)))\nmodel.add(Conv2D(64, (3,3)))\nmodel.add(MaxPooling2D((2, 2)))\nmodel.add(Conv2D(64, (3,3)))\nmodel.add(MaxPooling2D((2, 2)))\nmodel.add(BatchNormalization())\nmodel.add(Conv2D(32, (3,3)))\nmodel.add(MaxPooling2D((2, 2)))\nmodel.add(Flatten())\nmodel.add(Dense(512, activation='relu'))\nmodel.add(Dropout(0.2))\nmodel.add(Dense(128, activation='relu'))\nmodel.add(Dense(1, activation='sigmoid'))","edac1a58":"model.summary()","7561a843":"model.compile(optimizer='adam', metrics=['accuracy'],loss='binary_crossentropy')","d3acfddd":"callback = EarlyStopping(monitor='loss', patience=6, restore_best_weights=True)","00ab5d69":"history = model.fit_generator(train_generator, 150, callbacks=[callback], validation_data=test_generator)","b1a7668d":"acc = history.history['accuracy']\nloss = history.history['loss']\nval_acc = history.history['val_accuracy']\nval_loss = history.history['val_loss']\nepochs = range(len(acc))\nplt.plot(epochs, acc, 'r', label='training accuracy')\nplt.plot(epochs, val_acc, 'b', label='test accuracy')\nplt.legend()\nplt.figure()\nplt.plot(epochs, loss, 'r', label='Training Loss')\nplt.plot(epochs, val_loss, 'b', label='Validation Loss')\nplt.legend()\nplt.show()","0a7ce219":"# Get the data with augmentation","b3c19632":"Sorry not able to run. Please download and run","7967b9b7":"# Cats vs Dogs - Achieving more with less","14ed6076":"# Import the packages","cc18fec1":"# Build the model","db4af1e2":"This notebook is to distinguish between cats and dogs with close to 90% accuracy. The goal here is to create my own neural network and no overdo it with Inception V2 or somthing like that.","454ac39a":"# Plot the results"}}