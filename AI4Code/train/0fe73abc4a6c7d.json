{"cell_type":{"818d426c":"code","b11804a7":"code","a8820554":"code","7ead42a6":"code","9d65a51f":"code","d3d0494d":"code","55ebf4ec":"code","dd250ad9":"code","3cab33a9":"code","f2371a3d":"code","bce636dc":"code","1c0bd85e":"code","1fa471c2":"code","d59c0be9":"code","fed90d0b":"code","a146f6a7":"code","8aace079":"code","150c55e5":"code","8f7e6fb7":"code","2ec42b7d":"code","8bd12859":"code","6ca38cd4":"code","b9ebd373":"code","bd445233":"code","bec95a30":"code","a7ee7de6":"code","10dc92f9":"code","56553b04":"code","f2beb363":"code","d0205405":"code","9935cf2c":"markdown","77e417eb":"markdown","53b561f4":"markdown","8d029d8f":"markdown","5923c876":"markdown","187afbe7":"markdown","9e24fe33":"markdown","bbaba592":"markdown","65b36486":"markdown","516255ce":"markdown","39b355cd":"markdown","f242ea07":"markdown"},"source":{"818d426c":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","b11804a7":"df = pd.read_csv('..\/input\/bank-marketing-dataset\/bank.csv')","a8820554":"df.head()","7ead42a6":"df.info()","9d65a51f":"import matplotlib.pyplot as plt\nimport seaborn as sns\nfrom matplotlib.gridspec import GridSpec\ncols= ['#00876c','#85b96f','#f7e382','#f19452','#d43d51']","d3d0494d":"sns.palplot(cols)","55ebf4ec":"fig=plt.figure(figsize=(15,8), facecolor=(0.2,0.0,0.0,0.0), edgecolor='black')\nplt.suptitle(\"Compare the deposit by Age\", family='Serif', size=15,weight='bold')\n\nplt.figtext(0.5,0.93,\"Histogram and boxplot to identify the mid value of Age by deposits\", family='Serif', size=12, ha='center')\ngs = GridSpec(nrows=2, ncols=4, figure=fig)\nax1=plt.subplot(gs[0,:3])\n\n\nsns.histplot(data=df, x='age', bins=10, ax=ax1, kde=True, hue='deposit', multiple='layer', element='bars', palette=['#00876c','#d43d51']);\nax2=plt.subplot(gs[0,3:4], sharey=ax1)\nsns.histplot(data=df[df['deposit']=='yes'], x='age', bins=10, ax=ax2, kde=True, color=['#00876c']);\nax2.yaxis.set_visible(False)\n\n\n\nax4=plt.subplot(gs[1,:4])\nsns.boxplot(data=df[df['deposit']=='yes'], x='age', ax=ax4, palette=['#00876c']);\nax4.yaxis.set_visible(False)\nax4.text(60,0.15,\"Mean value: {:.2f}\".format(df[df['deposit']=='yes']['age'].mean()))\nax4.text(60,0.20,\"Median value: {:.2f}\".format(df[df['deposit']=='yes']['age'].median()))\nax4.text(60,0.25,\"Frequent age : {:.2f}\".format(df[df['deposit']=='yes']['age'].mode().max()))\nfor i in ['left','right','bottom','top']:\n    ax1.spines[i].set_visible(False)\n    ax2.spines[i].set_visible(False)\n    ax4.spines[i].set_visible(False)","dd250ad9":"fig = plt.figure(figsize=(12,8))\ngs = GridSpec(ncols=3, nrows=2, figure=fig)\nplt.suptitle(\"Box plot to compare the age by marital status and deposits\", family='Serif', weight='bold', size=15)\nfor i,c in enumerate(df['marital'].unique()):\n    ax=plt.subplot(gs[0,i])\n    ax=sns.boxplot(y=df[df['marital']==c]['age'], x=df['deposit'],palette=['#00876c','#d43d51']);\n    ax.spines['left'].set_visible(False)\n    ax.spines['right'].set_visible(False)\n    ax.spines['top'].set_visible(False)\n    ax.spines['bottom'].set_visible(False)\n\nax=plt.subplot(gs[1,:])\nax=sns.boxplot(data=df[df['deposit']=='yes'],y='marital',x='age', palette=['#00876c','#d43d51','#f7e382'])\nax.spines['left'].set_visible(False)\nax.spines['right'].set_visible(False)\nax.spines['top'].set_visible(False)\nax.spines['bottom'].set_visible(False)\n\nplt.figtext(0.05,-0.05,\"Observation:\\n Obivous that the single's deposit is less compared to married & divorced.\\n Married average age starts from 35+ to 60.\\n divorced ages is between 40 to 60 & singel ages is between 28 to 35.\\n Reason could be that the single might get married after 35 years approximately\",\n           family='San', size=12, ha='left')\n","3cab33a9":"fig = plt.figure(figsize=(12,8))\nax=sns.countplot(data=df, x='loan', hue='deposit', palette=['#00876c','#d43d51'])\nax.set_title('Comparison of Loan and deposit', font='Serif', weight='bold', size=15)\nax.spines['left'].set_visible(False)\nax.spines['right'].set_visible(False)\nax.spines['top'].set_visible(False)\nax.spines['bottom'].set_visible(False)\nplt.figtext(0.05,-0.05,\"Observation: People who has loan, have not deposited\",\n           family='San', size=12, ha='left')","f2371a3d":"fig = plt.figure(figsize=(12,8))\ngs = GridSpec(ncols=3, nrows=2, figure=fig)\nplt.suptitle(\"Box plot to compare the age by marital status and deposits\", family='Serif', weight='bold', size=15)\nfor i,c in enumerate(df['loan'].unique()):\n    ax=plt.subplot(gs[0,i])\n    ax=sns.boxplot(y=df[df['loan']==c]['age'], x=df['deposit'],palette=['#00876c','#d43d51']);\n    ax.spines['left'].set_visible(False)\n    ax.spines['right'].set_visible(False)\n    ax.spines['top'].set_visible(False)\n    ax.spines['bottom'].set_visible(False)\n    ax.set_title(\"Loan : {}\".format(c))\n\nax=plt.subplot(gs[1,:])\nax=sns.boxplot(data=df[df['deposit']=='yes'],y='loan',x='age', palette=['#00876c','#d43d51','#f7e382'])\nax.spines['left'].set_visible(False)\nax.spines['right'].set_visible(False)\nax.spines['top'].set_visible(False)\nax.spines['bottom'].set_visible(False)\n\nplt.figtext(0.05,-0.05,\"Observation:\\n Loan has bigger impact on the deposits, people who has loans has less deposits.\\n people deposited with loan is between the age of 30 to 50. people deposited without loan is from 30 to 60 year. so people getting olde preferes deposits than the loan\",\n           family='San', size=12, ha='left')","bce636dc":"df.groupby(['loan']).describe()['age']","1c0bd85e":"fig = plt.figure(figsize=(12,8))\nax=sns.scatterplot(data=df, x='age',y='balance', hue='deposit',palette=['#00876c','#d43d51'])\nax.set_ylim(0,4000)\nplt.figtext(0.05,-0.05,\"Observation: There is no significant relationship in age and balance. \",\n           family='San', size=12, ha='left')\n","1fa471c2":"fig=plt.figure(figsize=(15,8))\n\nplt.suptitle(\"Comparision of Age & Balance by Deposit\", family='Serif', size=15, ha='center', weight='bold')\nplt.figtext(0.5,0.93,\"Line plot shows that the increase in balance after 80 year\", family='Serif', size=12, ha='center')\ngs = GridSpec(nrows=3, ncols=1, height_ratios=[5,2,2])\nax1=plt.subplot(gs[0,0])\nax1=sns.lineplot(data=df,y='balance',x='age', hue='deposit',palette=['#00876c','#d43d51'])\nax2=plt.subplot(gs[1,0])\nax2=sns.barplot(data=df[df['deposit']=='yes'],y='balance',x='age', hue='deposit', palette=['#00876c'], ci=False)\nax3=plt.subplot(gs[2,0])\nax3=sns.barplot(data=df[df['deposit']=='no'],y='balance',x='age', hue='deposit', palette=['#d43d51'], ci=False)\nfor i in ['left','right','bottom','top']:\n    ax1.spines[i].set_visible(False)\n    ax2.spines[i].set_visible(False)\n    ax3.spines[i].set_visible(False)\nplt.figtext(0.05,-0.05,\"Observation: Balance in deposit increases by Age\",\n           family='San', size=12, ha='left')","d59c0be9":"df.groupby(['age'])['balance'].mean().nlargest(5).to_frame().T","fed90d0b":"fig=plt.figure(figsize=(12,8))\nax=sns.kdeplot(df['balance'], fill=True,palette=['#00876c','#d43d51'])\nax.axvline(df['balance'].mean(),c='r',ls='--')\nax.text(x=df['balance'].mean(),y=0.0002,s=\"mean value\", rotation=90)\nfig=plt.figure(figsize=(12,8))\nax.axvline(df['balance'].median(),c='blue',ls='--')\nax.text(x=df['balance'].median(),y=0.0002,s=\"mean value\", rotation=90)\nax.set_xlim(-5000,20000)","a146f6a7":"# lets check if campaign has significant change in deposit\nfig=plt.figure(figsize=(12,8))\nsns.countplot(data=df,x='campaign',hue='deposit', palette=['#00876c','#d43d51'])\n","8aace079":"fig = plt.figure(figsize=(12,8))\nplt.suptitle(\"Comparision of Education with deposit\", family='Serif', size=15, ha='center', weight='bold')\nplt.figtext(0.5,0.93,\"comparing the ecucation impact on deposit\", family='Serif', size=12, ha='center')\ngs = GridSpec(nrows=1, ncols=2, width_ratios=[5,2])\nax1=plt.subplot(gs[0,0])\nax1=plt.pie(df[df['deposit']=='yes']['education'].value_counts(), labels=df[df['deposit']=='yes']['education'].unique(), autopct='%2d', colors=cols)\nax2=plt.subplot(gs[0,1])\nax2=plt.pie(df[df['deposit']=='no']['education'].value_counts(), labels=df[df['deposit']=='no']['education'].unique(), autopct='%2d', colors=cols)","150c55e5":"fig = plt.figure(figsize=(12,8))\ndf1=df.groupby('education')['balance'].sum().reset_index()\nplt.suptitle(\"Comparison of balance with education\", family='Serif', size=15, ha='center', weight='bold')\nplt.figtext(0.5,0.93,\"compare and see if the eduction increases the balance\", family='Serif', size=12, ha='center')\nax=sns.barplot(data=df1, y='education',x='balance', palette=cols, ci=False)\n#ax.set_xlim(0,20000)\nfor i in ['left','right','bottom','top']:\n    ax.spines[i].set_visible(False)\n\nfor y,x in enumerate(df1['balance']):\n    ax.text(x=x\/2,y=y, s=x)\n\nplt.figtext(0.05,-0.05,\"Observation: Education level Secondary & Tertiary has higher balance\",\n           family='San', size=12, ha='left')","8f7e6fb7":"sns.pairplot(df, hue='deposit')","2ec42b7d":"fig = plt.figure(figsize=(12,8))\nsns.heatmap(df.corr(), cmap=cols, annot=True, linewidths=0.5)","8bd12859":"df.isna().sum()","6ca38cd4":"df.head()","b9ebd373":"df['deposit']=df['deposit'].map({'yes':1,'no':0})","bd445233":"df2=pd.get_dummies(df,drop_first=True)","bec95a30":"X=df2.drop(['deposit'], axis=1)\ny=df2['deposit']","a7ee7de6":"from sklearn.model_selection import train_test_split\nX_train, X_test, y_train, y_test = train_test_split(X,y, test_size=0.3, random_state=42)","10dc92f9":"from sklearn.preprocessing import StandardScaler\nscaler = StandardScaler()\n\nX_train=scaler.fit_transform(X_train)\nX_test = scaler.transform(X_test)","56553b04":"from sklearn.linear_model import LogisticRegression\nfrom yellowbrick.classifier import ROCAUC, ClassificationReport, ClassificationScoreVisualizer\nmodel = LogisticRegression()\nmodel.fit(X_train, y_train)\nmodel.score(X_test ,y_test)\npred=model.predict(X_test)\nfrom sklearn.metrics import accuracy_score, confusion_matrix, classification_report\nprint(accuracy_score(y_test,pred))\nprint(classification_report(y_test,pred))\n\n## Yellow brick reports\nfig = plt.figure(figsize=(20,8))\ngs=GridSpec(nrows=1, ncols=2)\nplt.suptitle(\"Classification Reports\", family='Serif', size=15, ha='center', weight='bold')\nplt.figtext(0.5,0.93,\"Classification report based on the Logisitic regression model\", family='Serif', size=12, ha='center')\nax1=plt.subplot(gs[0,0])\nax1.set(title='ROC Curve')\nvisual = ROCAUC(model, classes=[0,1])\nvisual.fit(X_train,y_train)\nax1=visual.score(X_test,y_test)\n\nax2=plt.subplot(gs[0,1])\nax2.set(title='Classification report')\nax2=ClassificationReport(model,classes=[0,1], support=True).fit(X_train,y_train).score(X_test,y_test)\n\nplt.figtext(0.05,-0.05,\"Observation: Logistic Regression performed well with Accuracy score of 83%\",\n           family='Serif', size=14, ha='left', weight='bold')","f2beb363":"from sklearn.neighbors import KNeighborsClassifier\nfrom yellowbrick.classifier import ROCAUC, ClassificationReport, ClassificationScoreVisualizer\nmodel = KNeighborsClassifier()\nmodel.fit(X_train, y_train)\nmodel.score(X_test ,y_test)\npred=model.predict(X_test)\nfrom sklearn.metrics import accuracy_score, confusion_matrix, classification_report\nprint(accuracy_score(y_test,pred))\nprint(classification_report(y_test,pred))\n\n## Yellow brick reports\nfig = plt.figure(figsize=(20,8))\ngs=GridSpec(nrows=1, ncols=2)\nplt.suptitle(\"Classification Reports\", family='Serif', size=15, ha='center', weight='bold')\nplt.figtext(0.5,0.93,\"Classification report based on the KNeighborsClassifier model\", family='Serif', size=12, ha='center')\nax1=plt.subplot(gs[0,0])\nax1.set(title='ROC Curve')\nvisual = ROCAUC(model, classes=[0,1])\nvisual.fit(X_train,y_train)\nax1=visual.score(X_test,y_test)\n\nax2=plt.subplot(gs[0,1])\nax2.set(title='Classification report')\nax2=ClassificationReport(model,classes=[0,1], support=True).fit(X_train,y_train).score(X_test,y_test)\n\nplt.figtext(0.05,-0.05,\"Observation: KNeighborsClassifier performed well with Accuracy score of 77%\",\n           family='Serif', size=14, ha='left', weight='bold')","d0205405":"from sklearn.tree import DecisionTreeClassifier\nfrom yellowbrick.classifier import ROCAUC, ClassificationReport, ClassificationScoreVisualizer\nmodel = DecisionTreeClassifier()\nmodel.fit(X_train, y_train)\nmodel.score(X_test ,y_test)\npred=model.predict(X_test)\nfrom sklearn.metrics import accuracy_score, confusion_matrix, classification_report\nprint(accuracy_score(y_test,pred))\nprint(classification_report(y_test,pred))\n\n## Yellow brick reports\nfig = plt.figure(figsize=(20,8))\ngs=GridSpec(nrows=1, ncols=2)\nplt.suptitle(\"Classification Reports\", family='Serif', size=15, ha='center', weight='bold')\nplt.figtext(0.5,0.93,\"Classification report based on the DecisionTreeClassifier\", family='Serif', size=12, ha='center')\nax1=plt.subplot(gs[0,0])\nax1.set(title='ROC Curve')\nvisual = ROCAUC(model, classes=[0,1])\nvisual.fit(X_train,y_train)\nax1=visual.score(X_test,y_test)\n\nax2=plt.subplot(gs[0,1])\nax2.set(title='Classification report')\nax2=ClassificationReport(model,classes=[0,1], support=True).fit(X_train,y_train).score(X_test,y_test)\n\nplt.figtext(0.05,-0.05,\"Observation: DecisionTreeClassifier performed well with Accuracy score of 79%\",\n           family='Serif', size=14, ha='left', weight='bold')","9935cf2c":"**Observation:** Interesting outcome from the above graph. deposit starts at the age of 20+ and peack is between 30, 50. frequntly deposit age is 32. in addtion Non deposite age is between 30-50 years with mean is around 35-40 years","77e417eb":"# Data preparation","53b561f4":"# Exploratory Data Analysis","8d029d8f":"# Standardise the Variables","5923c876":"# Feature\/column description\n1. Age - Age of the customer - Integer value\n2. job - Job of the customer - Categorical feature\n3. marital - Marital status of the customer- Categorical feature\n4. education - eduction status - categorical feature\n5. default - whether the custome is defaulter or not - categorical feature\n6. balance - yearly account balance of the customer - continueous feature\n7. housing - housing status of the customer - categorical feature\n8. loan - whether the customer availed any loans - categorical feature\n9. contact - how many times the customer has been contacted - categorical feature\n10. day - day from last contact - discrete feature\n11. month - month from last contacted date - categorical feature. \n12. duration - duration of last contact in hours - contineous feature\n13. campaign - contact with how many campaign - categorical feature\n","187afbe7":"# Support Vector Machine","9e24fe33":"# Problem Statement\n\nFind the best strategies to improve for the next marketing campaign. How can the financial institution have a greater effectiveness for future marketing campaigns? In order to answer this, we have to analyze the last marketing campaign the bank performed and identify the patterns that will help us find conclusions in order to develop future strategies","bbaba592":"# Read Dataset","65b36486":"# Please note the analysis is in progress.","516255ce":"# One hot encoding","39b355cd":"# Train Test Split","f242ea07":"# Model Creation"}}