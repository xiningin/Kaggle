{"cell_type":{"252f5b11":"code","78c1ebbd":"code","7de1b37a":"code","8da5fe41":"code","33a3ee5e":"code","59491419":"code","90a2a8fc":"code","daa4a96d":"code","b3e5d3f0":"code","a0d63fb8":"code","652a781f":"code","ed64261b":"code","6363d688":"code","2890a46d":"code","4705feb4":"code","3866da6d":"code","d3d7d176":"code","3752d726":"code","ac603fc0":"code","538946e0":"code","5a7b93b5":"code","6ff4c916":"markdown","3790bf08":"markdown","bbce3cdc":"markdown","49d30948":"markdown","352e1eb7":"markdown","f982fec2":"markdown","2368eeec":"markdown"},"source":{"252f5b11":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nfrom tensorflow.keras.utils import to_categorical\nfrom tensorflow.keras.models import Sequential\nfrom tensorflow.keras.layers import Dense, Conv2D, MaxPool2D, Flatten, Dropout\nfrom tensorflow.keras.callbacks import EarlyStopping\nfrom sklearn.metrics import classification_report, confusion_matrix","78c1ebbd":"from tensorflow.keras.datasets import cifar10\n\n(x_train, y_train), (x_test, y_test) = cifar10.load_data()","7de1b37a":"print(x_train.shape)\nprint(y_train.shape)\nprint(x_test.shape)\nprint(y_test.shape)","8da5fe41":"\nfig = plt.figure(figsize=(8, 8))\ncolumns = 6\nrows = 4\nfor i in range(1, columns*rows +1):\n    img = x_train[i]\n    fig.add_subplot(rows, columns, i)\n    plt.axis('off')\n    plt.imshow(img)\nplt.show()","33a3ee5e":"print(x_train.max())\nprint(x_test.max())","59491419":"x_train = x_train\/225\nx_test = x_test\/255","90a2a8fc":"y_cat_train = to_categorical(y_train, 10)\ny_cat_test = to_categorical(y_test,10)","daa4a96d":"model = Sequential()\n\nmodel.add(Conv2D(filters=32, kernel_size=(4,4),input_shape=(32, 32, 3), activation='relu',))\nmodel.add(MaxPool2D(pool_size=(2, 2)))\n\nmodel.add(Conv2D(filters=32, kernel_size=(4,4), activation='relu',))\nmodel.add(MaxPool2D(pool_size=(2, 2)))\n\nmodel.add(Flatten())\nmodel.add(Dense(128, activation='relu'))\nmodel.add(Dropout(0.2))\nmodel.add(Dense(64, activation='relu'))\nmodel.add(Dropout(0.2))\nmodel.add(Dense(32, activation='relu'))\nmodel.add(Dropout(0.2))\nmodel.add(Dense(10, activation='softmax'))\n\n\nmodel.compile(loss='categorical_crossentropy',\n              optimizer='adam',\n              metrics=['accuracy'])","b3e5d3f0":"model.summary()","a0d63fb8":"early_stop = EarlyStopping(monitor='val_loss',patience=3)","652a781f":"model.fit(x_train,\n          y_cat_train,\n          batch_size=128,\n          epochs=20,\n          validation_data=(x_test,y_cat_test),\n          callbacks=[early_stop])","ed64261b":"losses = pd.DataFrame(model.history.history)","6363d688":"losses[['loss','val_loss']].plot()","2890a46d":"losses[['accuracy','val_accuracy']].plot()","4705feb4":"print(model.metrics_names)\nprint(model.evaluate(x_test,y_cat_test,verbose=0))","3866da6d":"predictions = np.argmax(model.predict(x_test), axis=-1)","d3d7d176":"print(classification_report(y_test,predictions))","3752d726":"confusion_matrix(y_test,predictions)","ac603fc0":"classes = [0,1,2,3,4,5,6,7,8,9]\nclass_names = ['airplane', 'automobile', 'bird', 'cat', 'deer', 'dog', 'frog', 'horse', 'ship', 'truck']\n# https:\/\/www.cs.toronto.edu\/~kriz\/cifar.html\n\nd = dict(zip(classes, class_names))","538946e0":"my_image = x_test[20]\n\nplt.imshow(my_image)","5a7b93b5":"input_img = my_image.reshape(1,32,32,3)\n\npredictions = np.argmax(model.predict(input_img), axis=-1)[0]\n\nprint(f\"True class: {d[y_test[20][0]]} \\n\\nPredicted class: {d[predictions]}\")","6ff4c916":"CIFAR-10 is a dataset of 50,000 32x32 color training images, labeled over 10 classes","3790bf08":"# <a id=\"prep\"> Pre-processing <\/a>","bbce3cdc":"# <a id=\"eval\"> Evaluate Model <\/a>","49d30948":"# <a id=\"bmod\"> Build Model <\/a>","352e1eb7":"# <a id=\"load\">Loading Data<\/a>","f982fec2":"# <a id=\"pred\"> Predict <\/a>","2368eeec":"1. <a href=\"#load\"> Loading Data <\/a>\n2. <a href=\"#prep\"> Pre-processing <\/a>\n3. <a href=\"#bmod\"> Build Model <\/a>\n4. <a href=\"#eval\"> Evaluate Model <\/a>\n5. <a href=\"#pred\"> Predict <\/a>"}}