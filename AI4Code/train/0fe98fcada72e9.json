{"cell_type":{"4c7324b3":"code","0d789250":"code","56ba694b":"code","949c0b32":"code","729744b5":"code","04758610":"code","cebefe74":"code","b08cdfcf":"code","480c0b06":"code","9fbc18d4":"code","f7312f0c":"code","c2a17384":"code","82d26a87":"code","531ca7a6":"code","c91c5eb0":"code","4af7a980":"code","b2e9eba5":"code","6af63785":"code","c1bae5ae":"code","2adfb5b9":"code","3f846115":"code","94287b41":"code","dc046cd0":"code","a1f81b9c":"code","d28dea58":"code","5dcd0993":"code","40ec8a1d":"code","65fefa14":"code","7c8cd3e8":"code","2af971a0":"code","361b8478":"code","a91f6299":"code","d2e37b1b":"code","2f06388b":"code","fbd6f3df":"code","ae9285f7":"code","37e8cf30":"code","e3989d07":"code","2ffc6949":"code","e416517b":"code","a29b1499":"code","937bf0d0":"code","308ea7d7":"code","b7256161":"code","2b41168d":"code","a334cd8b":"code","0f159fb1":"code","82081665":"code","320f6c5e":"code","5749ce90":"code","f73b4e42":"code","1d3d37fc":"code","7d86be45":"code","95daae66":"code","ddcda53d":"code","5d3e7393":"code","40b08ce7":"code","69ded164":"code","3814fba7":"code","9f104249":"code","d2ad5fbe":"code","3645cb87":"markdown","07a34397":"markdown","e39b445c":"markdown","ad263e8c":"markdown","7461d0bf":"markdown","1245f459":"markdown","d9e9c5e9":"markdown","259f3b06":"markdown","5f2a2ad7":"markdown","241e7818":"markdown","7c1a6572":"markdown","02f2d7b7":"markdown","5bbcb93b":"markdown","ebdeb18f":"markdown","b807f549":"markdown","b5c7e97b":"markdown","8ffcd5b7":"markdown","539ab60b":"markdown","e524d910":"markdown","93203f4d":"markdown","d321190d":"markdown","78b0e80d":"markdown","d32418db":"markdown","30f21431":"markdown","cff36d12":"markdown","0a1c22ac":"markdown","d09e4731":"markdown","6c434d35":"markdown","f5cad635":"markdown"},"source":{"4c7324b3":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nsns.set()\nplt.style.use('ggplot')\nimport warnings\nwarnings.filterwarnings('ignore')\nfrom plotly.offline import init_notebook_mode, iplot\nimport plotly.graph_objs as go\nimport plotly.offline as py\nimport textwrap\nimport folium","0d789250":"train_data = pd.read_excel(\"..\/input\/flight-fare-prediction-mh\/Data_Train.xlsx\")","56ba694b":"train_data.head()","949c0b32":"train_data.nunique()","729744b5":"#dropping the nan values \ntrain_data.dropna(inplace=True)","04758610":"#converting day and month from given date \ntrain_data['journey_day'] = pd.to_datetime(train_data.Date_of_Journey,format ='%d\/%m\/%Y').dt.day","cebefe74":"train_data['journey_month'] = pd.to_datetime(train_data.Date_of_Journey,format ='%d\/%m\/%Y').dt.month","b08cdfcf":"train_data.drop(['Date_of_Journey'],axis=1,inplace=True)","480c0b06":"train_data.head()","9fbc18d4":"#converting departure time into hours and seconds\ntrain_data['dep_hour'] = pd.to_datetime(train_data.Dep_Time).dt.hour\ntrain_data['dep_minute'] = pd.to_datetime(train_data.Dep_Time).dt.minute\n","f7312f0c":"train_data.drop(['Dep_Time'],axis=1,inplace=True)","c2a17384":"train_data.head()","82d26a87":"train_data['arrival_hour'] = pd.to_datetime(train_data.Arrival_Time).dt.hour\ntrain_data['arrival_minute'] = pd.to_datetime(train_data.Arrival_Time).dt.minute","531ca7a6":"train_data.drop(['Arrival_Time'],axis =1,inplace=True)","c91c5eb0":"train_data.head()","4af7a980":"duration = list(train_data[\"Duration\"])\n\nfor i in range(len(duration)):\n    if len(duration[i].split()) != 2:    # Check if duration contains only hour or mins\n        if \"h\" in duration[i]:\n            duration[i] = duration[i].strip() + \" 0m\"   # Adds 0 minute\n        else:\n            duration[i] = \"0h \" + duration[i]           # Adds 0 hour\n\nduration_hours = []\nduration_mins = []\nfor i in range(len(duration)):\n    duration_hours.append(int(duration[i].split(sep = \"h\")[0]))    # Extract hours from duration\n    duration_mins.append(int(duration[i].split(sep = \"m\")[0].split()[-1]))   # Extracts only minutes from duration","b2e9eba5":"train_data['duration_hours'] = duration_hours\ntrain_data['duration_minutes'] = duration_mins","6af63785":"train_data.drop([\"Duration\"],axis=1,inplace=True)","c1bae5ae":"train_data.head()","2adfb5b9":"\n\ncolors = ['firebrick', 'dodgerblue', 'black', 'yellow', 'olive'] \ncounts = train_data['Airline'].value_counts(sort=True)\nlabels = counts.index\nvalues = counts.values\npie = go.Pie(labels=labels, values=values, marker=dict(colors=colors, line=dict(color='#000000', width=1)))\nfig = go.Figure(data=[pie])\npy.iplot(fig)","3f846115":"sns.catplot(x='Airline',y='Price',data=train_data.sort_values(\"Price\",ascending=True),kind='boxen',height=6,aspect=4)\nplt.show()","94287b41":"airline = train_data['Airline']\nairline = pd.get_dummies(airline,drop_first=True)\nairline","dc046cd0":"colors = ['firebrick', 'dodgerblue', 'black', 'yellow', 'olive'] \ncounts = train_data['Source'].value_counts(sort=True)\nlabels = counts.index\nvalues = counts.values\npie = go.Pie(labels=labels, values=values, marker=dict(colors=colors, line=dict(color='#000000', width=1)))\nfig = go.Figure(data=[pie])\npy.iplot(fig)","a1f81b9c":"sns.catplot(x='Source',y='Price',data= train_data.sort_values(\"Price\",ascending=True),kind='boxen',height=6,aspect=4)\nplt.show()","d28dea58":"source = train_data['Source']\nsource = pd.get_dummies(source,drop_first=True)\nsource","5dcd0993":"colors = ['firebrick', 'dodgerblue', 'black', 'yellow', 'olive'] \ncounts = train_data['Destination'].value_counts(sort=True)\nlabels = counts.index\nvalues = counts.values\npie = go.Pie(labels=labels, values=values, marker=dict(colors=colors, line=dict(color='#000000', width=1)))\nfig = go.Figure(data=[pie])\npy.iplot(fig)","40ec8a1d":"sns.catplot(x=\"Destination\",y=\"Price\",data=train_data.sort_values(\"Price\",ascending=True),kind='boxen',height=6,aspect=4)\nplt.show()","65fefa14":"destination = train_data['Destination']\ndestination = pd.get_dummies(destination,drop_first=True)\ndestination","7c8cd3e8":"# route and total stops are related to each other \n# route doesnt give us more additional values \ntrain_data.drop(['Route','Additional_Info'],axis=1,inplace=True)\ntrain_data","2af971a0":"train_data['Total_Stops'].unique()","361b8478":"train_data.replace({\"non-stop\": 0, \"1 stop\": 1, \"2 stops\": 2, \"3 stops\": 3, \"4 stops\": 4}, inplace = True)","a91f6299":"train_data","d2e37b1b":"data_train = pd.concat([train_data,airline,source,destination],axis=1)\ndata_train.head()","2f06388b":"data_train.drop([\"Airline\",\"Source\",\"Destination\"],axis=1,inplace=True)\ndata_train.head()","fbd6f3df":"data_train.shape","ae9285f7":"test_data=pd.read_excel(\"..\/input\/flight-fare-prediction-mh\/Test_set.xlsx\")\ntest_data.head()","37e8cf30":"test_data.head()","e3989d07":"print(\"Test data Info\")\nprint(\"-\"*75)\nprint(test_data.info())\n\nprint()\nprint()\n\nprint(\"Null values :\")\nprint(\"-\"*75)\ntest_data.dropna(inplace = True)\nprint(test_data.isnull().sum())\n\n# EDA\n\n# Date_of_Journey\ntest_data[\"Journey_day\"] = pd.to_datetime(test_data.Date_of_Journey, format=\"%d\/%m\/%Y\").dt.day\ntest_data[\"Journey_month\"] = pd.to_datetime(test_data[\"Date_of_Journey\"], format = \"%d\/%m\/%Y\").dt.month\ntest_data.drop([\"Date_of_Journey\"], axis = 1, inplace = True)\n\n# Dep_Time\ntest_data[\"Dep_hour\"] = pd.to_datetime(test_data[\"Dep_Time\"]).dt.hour\ntest_data[\"Dep_min\"] = pd.to_datetime(test_data[\"Dep_Time\"]).dt.minute\ntest_data.drop([\"Dep_Time\"], axis = 1, inplace = True)\n\n# Arrival_Time\ntest_data[\"Arrival_hour\"] = pd.to_datetime(test_data.Arrival_Time).dt.hour\ntest_data[\"Arrival_min\"] = pd.to_datetime(test_data.Arrival_Time).dt.minute\ntest_data.drop([\"Arrival_Time\"], axis = 1, inplace = True)\n\n# Duration\nduration = list(test_data[\"Duration\"])\n\nfor i in range(len(duration)):\n    if len(duration[i].split()) != 2:    # Check if duration contains only hour or mins\n        if \"h\" in duration[i]:\n            duration[i] = duration[i].strip() + \" 0m\"   # Adds 0 minute\n        else:\n            duration[i] = \"0h \" + duration[i]           # Adds 0 hour\n\nduration_hours = []\nduration_mins = []\nfor i in range(len(duration)):\n    duration_hours.append(int(duration[i].split(sep = \"h\")[0]))    # Extract hours from duration\n    duration_mins.append(int(duration[i].split(sep = \"m\")[0].split()[-1]))   # Extracts only minutes from duration\n\n# Adding Duration column to test set\ntest_data[\"Duration_hours\"] = duration_hours\ntest_data[\"Duration_mins\"] = duration_mins\ntest_data.drop([\"Duration\"], axis = 1, inplace = True)\n\n\n# Categorical data\n\nprint(\"Airline\")\nprint(\"-\"*75)\nprint(test_data[\"Airline\"].value_counts())\nAirline = pd.get_dummies(test_data[\"Airline\"], drop_first= True)\n\nprint()\n\nprint(\"Source\")\nprint(\"-\"*75)\nprint(test_data[\"Source\"].value_counts())\nSource = pd.get_dummies(test_data[\"Source\"], drop_first= True)\n\nprint()\n\nprint(\"Destination\")\nprint(\"-\"*75)\nprint(test_data[\"Destination\"].value_counts())\nDestination = pd.get_dummies(test_data[\"Destination\"], drop_first = True)\n\n# Additional_Info contains almost 80% no_info\n# Route and Total_Stops are related to each other\ntest_data.drop([\"Route\", \"Additional_Info\"], axis = 1, inplace = True)\n\n# Replacing Total_Stops\ntest_data.replace({\"non-stop\": 0, \"1 stop\": 1, \"2 stops\": 2, \"3 stops\": 3, \"4 stops\": 4}, inplace = True)\n\n# Concatenate dataframe --> test_data + Airline + Source + Destination\ndata_test = pd.concat([test_data, Airline, Source, Destination], axis = 1)\n\ndata_test.drop([\"Airline\", \"Source\", \"Destination\"], axis = 1, inplace = True)\n\nprint()\nprint()\n\nprint(\"Shape of test data : \", data_test.shape)\n\n","2ffc6949":" data_train.shape","e416517b":"data_train.columns","a29b1499":"X = data_train.loc[:,['Total_Stops', 'journey_day', 'journey_month', 'dep_hour',\n       'dep_minute', 'arrival_hour', 'arrival_minute', 'duration_hours',\n       'duration_minutes', 'Air India', 'GoAir', 'IndiGo', 'Jet Airways',\n       'Jet Airways Business', 'Multiple carriers',\n       'Multiple carriers Premium economy', 'SpiceJet', 'Trujet', 'Vistara',\n       'Vistara Premium economy', 'Chennai', 'Delhi', 'Kolkata', 'Mumbai',\n       'Cochin', 'Delhi', 'Hyderabad', 'Kolkata', 'New Delhi']]\nX.head()","937bf0d0":"y = data_train.iloc[:,1]\ny.head()","308ea7d7":"plt.figure(figsize = (18,18))\nsns.heatmap(train_data.corr(), annot = True, cmap = \"RdYlGn\")\n\nplt.show()","b7256161":"from sklearn.ensemble import ExtraTreesRegressor\nselection = ExtraTreesRegressor()\nselection.fit(X, y)","2b41168d":"print(selection.feature_importances_)","a334cd8b":"plt.figure(figsize = (12,8))\nfeat_importances = pd.Series(selection.feature_importances_, index=X.columns)\nfeat_importances.nlargest(20).plot(kind='barh')\nplt.show()\n","0f159fb1":"from sklearn.model_selection import train_test_split\nX_train,X_test,y_train,y_test = train_test_split(X,y,test_size=0.2,random_state=32)","82081665":"from sklearn.ensemble import RandomForestRegressor\nRfr = RandomForestRegressor()\nRfr.fit(X_train,y_train)","320f6c5e":"y_pred = Rfr.predict(X_test)","5749ce90":"Rfr.score(X_train,y_train)","f73b4e42":"Rfr.score(X_test,y_test)","1d3d37fc":"sns.distplot(y_test-y_pred)\nplt.show()\n","7d86be45":"from sklearn.model_selection import RandomizedSearchCV","95daae66":"#Randomized Search CV\n\n# Number of trees in random forest\nn_estimators = [int(x) for x in np.linspace(start = 100, stop = 1200, num = 12)]\n# Number of features to consider at every split\nmax_features = ['auto', 'sqrt']\n# Maximum number of levels in tree\nmax_depth = [int(x) for x in np.linspace(5, 30, num = 6)]\n# Minimum number of samples required to split a node\nmin_samples_split = [2, 5, 10, 15, 100]\n# Minimum number of samples required at each leaf node\nmin_samples_leaf = [1, 2, 5, 10]","ddcda53d":"random_grid = {'n_estimators': n_estimators,\n               'max_features': max_features,\n               'max_depth': max_depth,\n               'min_samples_split': min_samples_split,\n               'min_samples_leaf': min_samples_leaf}","5d3e7393":"rf_random = RandomizedSearchCV(estimator = Rfr, param_distributions = random_grid,scoring='neg_mean_squared_error', n_iter = 10, cv = 5, verbose=2, random_state=42, n_jobs = 1)","40b08ce7":"rf_random.fit(X_train,y_train)","69ded164":"prediction = rf_random.predict(X_test)","3814fba7":"plt.figure(figsize = (8,8))\nsns.distplot(y_test-prediction)\nplt.show()","9f104249":"plt.figure(figsize = (8,8))\nplt.scatter(y_test, prediction, alpha = 0.5)\nplt.xlabel(\"y_test\")\nplt.ylabel(\"y_pred\")\nplt.show()","d2ad5fbe":"import pickle\n# open a file, where you ant to store the data\nfile = open('flight_rf.pkl', 'wb')\n\n# dump information to that file\npickle.dump(Rfr, file)","3645cb87":"# Cleaning","07a34397":"# Handling categorical data","e39b445c":"# Fitting model using randomforest","ad263e8c":"#  Departure time ","7461d0bf":"**In machine learning, hyperparameter optimization or tuning is the problem of choosing a set of optimal hyperparameters for a learning algorithm. A hyperparameter is a parameter whose value is used to control the learning process. By contrast, the values of other parameters (typically node weights) are learned**","1245f459":"# save the model","d9e9c5e9":"**same preprocessing as in train data**","259f3b06":"**Heatmap**","5f2a2ad7":"# Importing relavant libraries","241e7818":"# Duration of flight","7c1a6572":"# EDA","02f2d7b7":"# Arrival time","5bbcb93b":"![](http:\/\/www.hdwallpaperspulse.com\/wp-content\/uploads\/2012\/10\/smiley-flower-happy-wallpaper.jpg)","ebdeb18f":"# Destination","b807f549":"# Route,Additional info and Total stops","b5c7e97b":"# Source","8ffcd5b7":"# Airline","539ab60b":"# Test data","e524d910":"# Feature engineering","93203f4d":"# **If you like the notebook please give me an upvote\ud83d\ude0a**","d321190d":"**Predicting the results**","78b0e80d":"**Total stops**","d32418db":"**Attach all variables that has been cleaned**","30f21431":"# Hyperparameter tunning","cff36d12":"# Date of journey","0a1c22ac":"**Basic look through the data**","d09e4731":"**Here we are going to predict flight fare by using given variables in the dataset**","6c434d35":"# Flight fare prediction","f5cad635":"![](https:\/\/www.flyopedia.com\/blog\/wp-content\/uploads\/2016\/02\/cheap-flights.jpg)"}}