{"cell_type":{"91d0e9d0":"code","36797de6":"code","8aa197ae":"code","568dd542":"code","c55b536c":"code","1a0be17b":"code","3b58fb4a":"code","8c0fd3e7":"code","dfb35312":"code","31decb9f":"code","11f67482":"code","fb220214":"code","5ec626e4":"code","c9c18cda":"code","b84cc28b":"code","91f7793a":"code","05a639b8":"code","f006ec71":"code","939ab630":"code","aa9cdfff":"code","b0f0dbc3":"code","0f59ae9c":"code","7c59e8a6":"code","d547eb24":"code","00890f0b":"code","b8ffde31":"code","0e1dc36b":"code","95160941":"code","4e93db81":"code","85db1586":"code","23644920":"code","9600ee35":"code","50bede7f":"code","0d8bc806":"code","f6adc729":"code","bcd5be75":"code","f760a446":"code","2b7303d3":"code","99807f33":"code","7fea7cb0":"code","7e01ec1f":"code","1c2feb96":"code","86c90a26":"code","c32ca337":"code","72be9e47":"code","2147d9cf":"code","60abeab7":"code","6d615291":"code","40f470bc":"code","676f7846":"code","2eee59a1":"code","241262ae":"code","5ff8d394":"code","f76760b4":"code","4cbc73cd":"code","86f21864":"code","2bc8f800":"markdown","93289d48":"markdown","71f63517":"markdown","06cb6ddb":"markdown","4fd416a0":"markdown","5c37e66e":"markdown","1b6eb80d":"markdown","459a51b7":"markdown","1d103156":"markdown","bf544355":"markdown","36396a56":"markdown"},"source":{"91d0e9d0":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\nimport seaborn as sns\npd.pandas.set_option('display.max_columns',None)\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))","36797de6":"train = pd.read_csv('\/kaggle\/input\/house-prices-advanced-regression-techniques\/train.csv')\ntrain.head()","8aa197ae":"train.shape","568dd542":"missing = train.isnull().sum()\nmissing = missing[missing > 0]\nmissing.sort_values(inplace= True)\nplt.figure(figsize=(9,8))\nmissing.plot.bar()\nplt.show()","c55b536c":"train.info()","1a0be17b":"num_feature = [feature for feature in train.columns if train[feature].dtype != 'O']\nprint('Total nunmber of numerical feature in the dataset:', len(num_feature))\ntrain[num_feature].head()","3b58fb4a":"year_feature = [feature for feature in num_feature if 'Yr' in feature or 'Year' in feature]\nyear_feature","8c0fd3e7":"plt.figure(figsize=(9,8))\ntrain.groupby('YrSold')['SalePrice'].median().plot()\nplt.show()","dfb35312":"for feature in year_feature:\n    if feature!='YrSold':\n        dat=train.copy()\n        dat[feature]=dat['YrSold']-dat[feature]\n        plt.figure(figsize=(9,8))\n        plt.scatter(dat[feature],dat['SalePrice'])\n        plt.xlabel('SalesPrice')\n        plt.ylabel(feature)\n        plt.show()","31decb9f":"discrete_num = [feature for feature in num_feature if len(train[feature].unique())<25 and feature not in year_feature +['Id']]\nprint('Total  number of discrete_num:', len(discrete_num))","11f67482":"for feature in discrete_num:\n    data=train.copy()\n    plt.figure(figsize=(9,8))\n    data.groupby(feature)['SalePrice'].median().plot.bar(color='turquoise')\n    plt.xlabel(feature)\n    plt.ylabel('Salesprice')\n    plt.title(feature)\n    plt.show()","fb220214":"conti_num=[feature for feature in num_feature if feature not in discrete_num+year_feature +['Id']]\nconti_num","5ec626e4":"for feature in conti_num:\n    data=train.copy()\n    plt.figure(figsize=(9,8))\n    data[feature].hist(bins=30)\n    plt.xlabel(feature)\n    plt.ylabel('Count')\n    plt.title(feature)\n    plt.show()","c9c18cda":"for feature in conti_num:\n    data=train.copy()\n    if 0 in data[feature].unique():\n        pass\n    else:\n        data[feature] = np.log(data[feature])\n        data['SalePrice']= np.log(data['SalePrice'])\n        plt.figure(figsize=(9,8))\n        plt.scatter(data[feature],data['SalePrice'],color='greenyellow')\n        plt.xlabel(feature)\n        plt.ylabel('SalePrice')\n        plt.title(feature)\n        plt.show()","b84cc28b":"for feature in conti_num:\n    data=train.copy()\n    if 0 in data[feature].unique():\n        pass\n    else:\n        data[feature] = np.log(data[feature])\n        plt.figure(figsize=(9,8))\n        data.boxplot(column=feature)\n        plt.title(feature)\n        plt.show()","91f7793a":"cat_feature = [feature for feature in train.columns if train[feature].dtype=='O']\ncat_feature","05a639b8":"for feature in cat_feature:\n    data=train.copy()\n    plt.figure(figsize=(9,8))\n    data.groupby(feature)['SalePrice'].median().plot.bar(color='thistle')\n    plt.xlabel(feature)\n    plt.ylabel('SalePrice')\n    plt.title(feature)\n    plt.show()","f006ec71":"print(missing)","939ab630":"cat_missing= [feature for feature in train.columns if train[feature].isnull().sum() >1 and train[feature].dtype=='O']\ntrain[cat_missing].isnull().sum()","aa9cdfff":"def miss_cat_feature(dataset,features_nan):\n    data=dataset.copy()\n    data[features_nan]=data[features_nan].fillna('Missing')\n    return data\n\ntrain=miss_cat_feature(train,cat_missing)\n\ntrain[cat_missing].isnull().sum()","b0f0dbc3":"num_missing= [feature for feature in train.columns if train[feature].isnull().sum() >1 and train[feature].dtype!='O']\ntrain[num_missing].isnull().sum()","0f59ae9c":"for feature in num_missing:\n    train[feature]= train[feature].fillna(train[feature].median())\ntrain[num_missing].isnull().sum()","7c59e8a6":"for feature in['YearBuilt','YearRemodAdd','GarageYrBlt']:\n    train[feature]=train['YrSold']-train[feature]\n    \ntrain[['YearBuilt','YearRemodAdd','GarageYrBlt']].head()","d547eb24":"for feature in conti_num:\n    if 0 in train[feature].unique():\n        pass\n    else:\n        train[feature] = np.log(train[feature])\n\n        \ntrain.head()","00890f0b":"cat_feature=[feature for feature in train.columns if train[feature].dtype=='O']\ncat_feature","b8ffde31":"for feature in cat_feature:\n    labels_ordered=train.groupby([feature])['SalePrice'].mean().sort_values().index\n    labels_ordered={k:i for i,k in enumerate(labels_ordered,0)}\n    train[feature]=train[feature].map(labels_ordered)","0e1dc36b":"train.info()","95160941":"train = train.fillna(0)","4e93db81":"feature_scale=[feature for feature in train.columns if feature not in ['Id','SalePrice']]\n\nfrom sklearn.preprocessing import MinMaxScaler\nscaler=MinMaxScaler()\nscaler.fit(train[feature_scale])","85db1586":"scaler.transform(train[feature_scale])","23644920":"data = pd.concat([train[['Id', 'SalePrice']].reset_index(drop=True),\n                    pd.DataFrame(scaler.transform(train[feature_scale]), columns=feature_scale)],\n                    axis=1)","9600ee35":"from sklearn.metrics import mean_squared_error\nfrom sklearn.model_selection import train_test_split\nX_train,X_test,y_train,y_test=train_test_split(train.iloc[:,:-1],train['SalePrice'],test_size=0.3,random_state=0)","50bede7f":"from sklearn.linear_model import LinearRegression\nlr=LinearRegression()\nlr.fit(X_train,y_train)\ny_pred=lr.predict(X_test)\nmse=mean_squared_error(y_test,y_pred)\nmse","0d8bc806":"from sklearn.ensemble import RandomForestRegressor\nrfr = RandomForestRegressor(n_estimators=200, random_state=1)\nrfr.fit(X_train,y_train)\ny_pred=rfr.predict(X_test)\nmse=mean_squared_error(y_test,y_pred)\nmse","f6adc729":"from sklearn.tree import DecisionTreeRegressor\ndtr=  DecisionTreeRegressor(random_state=1)\ndtr.fit(X_train,y_train)\ny_pred=dtr.predict(X_test)\nmse=mean_squared_error(y_test,y_pred)\nmse","bcd5be75":"test=pd.read_csv('\/kaggle\/input\/house-prices-advanced-regression-techniques\/test.csv')\ntest.head()","f760a446":"cat_missing= [feature for feature in test.columns if test[feature].isnull().sum() >1 and test[feature].dtype=='O']\ntest[cat_missing].isnull().sum()","2b7303d3":"def miss_cat_feature(dataset,features_nan):\n    data=dataset.copy()\n    data[features_nan]=data[features_nan].fillna('Missing')\n    return data\n\ntest=miss_cat_feature(test,cat_missing)\n\ntest[cat_missing].isnull().sum()","99807f33":"num_missing= [feature for feature in test.columns if test[feature].isnull().sum() >1 and test[feature].dtype!='O']\ntest[num_missing].isnull().sum()","7fea7cb0":"for feature in num_missing:\n    test[feature]= test[feature].fillna(test[feature].median())\ntest[num_missing].isnull().sum()","7e01ec1f":"for feature in['YearBuilt','YearRemodAdd','GarageYrBlt']:\n    test[feature]=test['YrSold']-test[feature]\n    \ntest[['YearBuilt','YearRemodAdd','GarageYrBlt']].head()","1c2feb96":"num_feature = [feature for feature in test.columns if test[feature].dtype != 'O']\nprint('Total nunmber of numerical feature in the dataset:', len(num_feature))\ntest[num_feature].head()","86c90a26":"year_feature = [feature for feature in num_feature if 'Yr' in feature or 'Year' in feature]\nyear_feature","c32ca337":"discrete_num = [feature for feature in num_feature if len(test[feature].unique())<25 and feature not in year_feature +['Id']]\nprint('Total  number of discrete_num:', len(discrete_num))","72be9e47":"conti_num=[feature for feature in num_feature if feature not in discrete_num+year_feature +['Id']]\nconti_num","2147d9cf":"for feature in conti_num:\n    if 0 in test[feature].unique():\n        pass\n    else:\n        test[feature] = np.log(train[feature])\n\n        \ntest.head()","60abeab7":"cat_feature=[feature for feature in test.columns if test[feature].dtype=='O']\ncat_feature","6d615291":"for feature in cat_feature:\n    labels_ordered=train.groupby([feature])['SalePrice'].mean().sort_values().index\n    labels_ordered={k:i for i,k in enumerate(labels_ordered,0)}\n    test[feature]=test[feature].map(labels_ordered)","40f470bc":"test = test.fillna(0)","676f7846":"feature_scale=[feature for feature in test.columns if feature not in ['Id']]\n\nfrom sklearn.preprocessing import MinMaxScaler\nscaler=MinMaxScaler()\nscaler.fit(test[feature_scale])","2eee59a1":"scaler.transform(test[feature_scale])","241262ae":"data = pd.concat([test[['Id']].reset_index(drop=True),\n                    pd.DataFrame(scaler.transform(test[feature_scale]), columns=feature_scale)],\n                    axis=1)","5ff8d394":"test.head()","f76760b4":"X_pred=test\nID=test['Id']","4cbc73cd":"final_pred=rfr.predict(X_pred)","86f21864":"submit=pd.DataFrame()\nsubmit['Id']=ID\nsubmit['SalePrice']=final_pred\nsubmit.to_csv('houseprice_projection.csv',index=False)","2bc8f800":"## **Finding missing values**","93289d48":"## **Test Data Feature Engineering**","71f63517":"## **RandomForestRegressor**","06cb6ddb":"## **LinearRegression**","4fd416a0":"## **Visualization of the Data**","5c37e66e":"## **Loading Dataset**","1b6eb80d":"# **House Prices - Advanced Regression Techniques**","459a51b7":"## **Feature Engineering**","1d103156":"## **DecisionTreeRegressor**","bf544355":"## **Splitting Data**","36396a56":"## **Predicting & Submiting**"}}