{"cell_type":{"ba943055":"code","bf55c841":"code","3d8ce4ee":"code","082e405a":"code","b7141b02":"code","5348353b":"code","7a3ba7e0":"code","58b179cb":"code","94933c6f":"markdown","1655b050":"markdown","0b8f55cd":"markdown","dcc34310":"markdown","c42b303a":"markdown","9d7a3e80":"markdown","90e67d1c":"markdown","c82c50fd":"markdown","b86fa505":"markdown","3c7453b1":"markdown","860fab94":"markdown","00e725f1":"markdown"},"source":{"ba943055":"from plotnine import * #ggplot like library for python!!!!\nimport numpy as np\nimport pandas as pd\nfrom sklearn.model_selection import TimeSeriesSplit #Splitting for time series CV!\nfrom fbprophet import Prophet ","bf55c841":"#Read in Data, Create New Frame With Relevant Columns\ndf=pd.read_csv(\"..\/input\/avocado.csv\")\n#Filter To TotalUS and Conventional Avocados for simplicity\ndf=df.loc[np.logical_and(df.region==\"TotalUS\",df.type==\"conventional\"),:]\n#Clean up data for analysis\ndf.Date=pd.to_datetime(df.Date)\ndate_price_df=df.loc[:,[\"Date\",\"AveragePrice\"]]\ndate_price_df.columns=[\"ds\",\"y\"]\ndate_price_df=date_price_df.sort_values(\"ds\").reset_index(drop=True)\n","3d8ce4ee":"#Initialize Split Class, we'll split our data 5 times for cv\ntscv = TimeSeriesSplit(n_splits=5)","082e405a":"def pro_ds_data_gen(df,tscv,yearly_seasonality=True,weekly_seasonality=True,daily_seasonality=False):\n    out_df=pd.DataFrame()\n    for i,(train_i,test_i) in enumerate(tscv.split(df)): #For Time Series Split\n        #Use indexes to grab the correct data for this split\n        train_df=df.copy().iloc[train_i,:]\n        test_df=df.copy().iloc[test_i,:]\n        #Build our model using prophet and make predictions on the test set\n        model=Prophet(\n            yearly_seasonality=yearly_seasonality,\n            weekly_seasonality=weekly_seasonality,\n            daily_seasonality=daily_seasonality\n        )\n        model.fit(train_df)\n        predictions=model.predict(test_df)\n\n        #Combine predictions and training into one df for plotting\n        pred_df=predictions.loc[:,[\"ds\",\"yhat\"]]\n        pred_df[\"y\"]=test_df.y.tolist()\n        train_df[\"train\"]=\"Train\"\n        pred_df[\"train\"]=\"Test\"\n        sub_df=train_df.append(pred_df).reset_index(drop=True)\n        sub_df[\"split\"]=\"Split \"+str(i+1)\n        sub_df[\"rmse\"]=(np.mean((sub_df.yhat-sub_df.y)**2))**.5 #calculating rmse for the split\n        out_df=out_df.append(sub_df).reset_index(drop=True)\n    return out_df","b7141b02":"year_weak_seas_df=pro_ds_data_gen(\n    date_price_df,tscv,yearly_seasonality=True,weekly_seasonality=True\n)\n\n(ggplot(year_weak_seas_df,aes(\"ds\",\"y\",color=\"factor(train)\"))+\\\n geom_point()+facet_grid('split~.'))+\\\nlabs(title=\"Train\/Test Splits\",x=\"Date\",y=\"Price\")+\\\nscale_x_date(date_breaks=\"6 months\",date_labels =  \"%b %Y\")\n","5348353b":"no_seas_df=pro_ds_data_gen(date_price_df,tscv,yearly_seasonality=False,weekly_seasonality=False)\nyear_seas_df=pro_ds_data_gen(date_price_df,tscv,weekly_seasonality=False)\nweek_seas_df=pro_ds_data_gen(date_price_df,tscv,yearly_seasonality=False)\ndf_dict={\"year_weak\":year_weak_seas_df,\"none\":no_seas_df,\"year\":year_seas_df,\"week\":week_seas_df}\n\n","7a3ba7e0":"cv_frame=pd.DataFrame()\nfor name,frame in df_dict.items():\n    #grab the one unique rmse for each split\n    values_lol=frame.groupby(\"split\").agg({\"rmse\":\"mean\"}).values\n    values=[item for sublist in values_lol for item in sublist] #returns 2D array with sub-length 1, so we cpllapse\n    sub_df=pd.DataFrame({\"rmse\":values})\n    sub_df[\"model\"]=name\n    cv_frame=cv_frame.append(sub_df)","58b179cb":"(ggplot(cv_frame,aes(x=\"model\",y=\"rmse\",fill=\"model\"))+geom_boxplot())","94933c6f":"## Loading Libraries","1655b050":"## Visualizing Model Performance","0b8f55cd":"#### Finally, we can create a box plot to see what model performed the best!","dcc34310":"## Use TimeSeriesSplit and Prophet To Cross Validate\n\n","c42b303a":"## Visualizing TS Splits Easily With Plotnine","9d7a3e80":"## Loading and Tidying Data","90e67d1c":"#### It looks like only taking into account yearly seasonality yields us the most accurate model!","c82c50fd":"#### Now we can combine the relevent columns of each dataframe into one final frame for plotting!","b86fa505":"### Lets Create A Function That Will Return A Tidy DataFrame With Predictions","3c7453b1":"#### Lets walk through this code step by step...\n\nFor those of you Python users unfamiliar with ggplot, I highly suggest you check it out. [This cheatsheet](https:\/\/www.rstudio.com\/wp-content\/uploads\/2015\/03\/ggplot2-cheatsheet.pdf) is an awesome place to start learning the syntax. One of the major bennefits of ggplot is the ability to chain together commands seemlessly. Lets breakdown the previous line step by step.\n\n+ ggplot(total_plot_df,aes(\"ds\",\"y\",color=\"factor(train)\"))\n  + We are using the total_plot_df as our data, the ds column as our x variable, the y column as our y variable, and coloring based on the train column\n  + factor(train) is converting the train column to a factor (R's version of a categorical variable)\n+ geom_point()\n  + Signals we want a scatterplot\n+ facet_grid('split~.'))\n  + This splits our data based on the split column and stacks the plots on top of each other\n+ labs(title=\"Train\/Test Splits\",x=\"Date\",y=\"Price\")\n  + Updates Lables\n+ scale_x_date(date_breaks=\"6 months\",date_labels =  \"%b %Y\")\n  + Cleans up the x-axis so its readable!\n\n","860fab94":"# Avocado Price Prediction With Some Cool Packages\n\nI figured this would be a good dataset to show off the functionality of a few functions\/packages that I have been playing around with recently. A little background on each before we continue...\n\n+ Prophet\n  + Allows for some pretty easy time series prediction right out of the box!\n+ sklearn TimeSeriesSplit\n   + Quickly split your data into chunks suitable for time series cross validation\n+ Plotnine\n  + Plotting using syntax identical to R's ggplot\n  \nLet me know what you found helpful or confusing! I appreciate any feedback!!\n\n***\n\n\n","00e725f1":"#### Lets create multiple models by adjusting which seasonality corrections we make. We can use the function we created above to get a dataframe including predictions for each model."}}