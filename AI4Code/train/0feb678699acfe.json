{"cell_type":{"be238811":"code","1352085f":"code","7b2d9dd6":"code","605d389a":"code","338611a7":"code","fcdc15a8":"code","9b269780":"code","ed4229e5":"code","1a351fd7":"code","90d1b3c1":"code","c1dae40f":"code","ee108e28":"code","d45af5de":"code","6af384f8":"code","fe18d6cd":"code","bd997b08":"code","1adf6a29":"code","459aeadb":"code","22a4723e":"markdown","0cf9c939":"markdown","51557d46":"markdown","580a4546":"markdown","34c785ed":"markdown","c6d2f950":"markdown","b12161b7":"markdown","9464d746":"markdown","379db58c":"markdown","dde773a8":"markdown","aaa43ff3":"markdown"},"source":{"be238811":"import os\n\nimport pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport plotly.express as px\n\nfrom sklearn.preprocessing import LabelEncoder, MinMaxScaler\n","1352085f":"df = pd.read_csv('\/kaggle\/input\/pokedex\/pokemon.csv', encoding='utf-16-le')\ndf.head()","7b2d9dd6":"df.info()","605d389a":"df['secondary_type'].fillna('None', inplace=True)\ndf['percent_male'].replace(to_replace='50*',value='50.00',inplace=True)\ndf['percent_female'].replace(to_replace='50*',value='50.00',inplace=True)\ndf['percent_male'].fillna('50.00', inplace=True)\ndf['percent_female'].fillna('50.00', inplace=True)\ndf['capture_rate'].replace(to_replace='30 (Meteorite)255 (Core)',value='30',inplace=True)\n\n\nS_type_list = df['secondary_type'].unique().tolist()\nP_type_list = df['primary_type'].unique().tolist()\nClass_list = df['classification'].unique().tolist()\nGen_list = df['gen'].unique().tolist()\n\ndf['gen'] = LabelEncoder().fit_transform(df['gen'])\ndf['Primary_type'] = LabelEncoder().fit_transform(df['primary_type'])\ndf['Secondary_type'] = LabelEncoder().fit_transform(df['secondary_type'])\ndf['classification'] = LabelEncoder().fit_transform(df['classification'])\ndf['percent_male'] = df['percent_male'].astype(float)\ndf['percent_female'] = df['percent_female'].astype(float)\ndf['capture_rate'] = df['capture_rate'].astype(int)\n\ndf['percent_male'].fillna(50.00, inplace=True)\ndf['percent_female'].fillna(50.00, inplace=True)\n\nS_type_list = pd.DataFrame(sorted(list(zip(S_type_list,df['secondary_type'].unique())),key=lambda x: x[1]))\nP_type_list = pd.DataFrame(sorted(list(zip(P_type_list,df['primary_type'].unique())),key=lambda x: x[1]))\nClass_list = pd.DataFrame(sorted(list(zip(Class_list,df['classification'].unique())),key=lambda x: x[1]))\nGen_list = pd.DataFrame(sorted(list(zip(Gen_list,df['gen'].unique())),key=lambda x: x[1]))","338611a7":"Base_stats = ['Primary_type','primary_type','Secondary_type','secondary_type','classification','percent_male','percent_female',\n              'height_m','weight_kg','capture_rate','base_egg_steps','hp','attack','defense',\n              'sp_attack','sp_defense','speed','is_sublegendary','is_legendary','is_mythical']\n\ndf_BS = df[Base_stats]\ndf_BS.head()","fcdc15a8":"plt.figure(figsize=(14,12))\n\nheatmap = sns.heatmap(df_BS.corr(), vmin=-1,vmax=1, annot=True, cmap='viridis')\n\nheatmap.set_title('Correlation Base Stats Heatmap', fontdict={'fontsize':12}, pad=12)\nplt.show()","9b269780":"fig = px.histogram(df, x='primary_type', color = 'primary_type',                   \n                   title = 'Primary Type distribution')\n\nfig.update_layout(xaxis=dict(tickmode ='array',\n                             tickvals = np.arange(0,len(df.primary_type.unique())),\n                            ticktext = P_type_list[0].values,\n                            title = 'Primary Type'),\n                 showlegend=False)\nfig.update_xaxes(categoryorder='total descending')\nfig.show()","ed4229e5":"fig = px.histogram(df, x='secondary_type', color = 'secondary_type',                   \n                   title = 'Secondary Type distribution')\n\nfig.update_layout(xaxis=dict(tickmode ='array',\n                            title = 'Secondary Type'),\n                 showlegend=False)\nfig.update_xaxes(categoryorder='total descending')\nfig.show()","1a351fd7":"fig = px.histogram(df, x='gen', color = 'gen',                   \n                   title = 'Generation distribution')\n\nfig.update_layout(xaxis=dict(tickmode ='array',\n                             tickvals = np.arange(0,len(df.gen.unique())),\n                            ticktext = Gen_list[0].values,\n                            title = 'Generation'),\n                 showlegend=False)\nfig.show()","90d1b3c1":"fig = px.histogram(df, x='height_m',                   \n                   title = 'Height distribution')\n\nfig.update_layout(xaxis=dict(tickmode ='array',\n                             tickvals = np.arange(0,len(df.height_m.unique())),\n                            title = 'm'),\n                 showlegend=False)\nfig2 = px.histogram(df, x='weight_kg',                   \n                   title = 'Weight distribution')\n\nfig2.update_layout(xaxis=dict(title = 'Kg'),\n                 showlegend=False)\nfig3 = px.histogram(df, x='capture_rate',                   \n                   title = 'Capture Rate distribution')\n\nfig3.update_layout(xaxis=dict(title = 'Capture Rate'),\n                 showlegend=False)\nfig4 = px.histogram(df, x='base_egg_steps',                 \n                   title = 'Base Egg Step distribution')\n\nfig4.update_layout(xaxis=dict(title = 'Steps'),\n                 showlegend=False)\nfig5 = px.histogram(df, x='attack',                   \n                   title = 'Attack distribution')\n\nfig5.update_layout(xaxis=dict(title = 'Damage'),\n                 showlegend=False)\nfig6 = px.histogram(df, x='sp_attack',                   \n                   title = 'Special Attack distribution')\n\nfig6.update_layout(xaxis=dict(title = 'Damage'),\n                 showlegend=False)\nfig7 = px.histogram(df, x='defense',                   \n                   title = 'Defense distribution')\n\nfig7.update_layout(xaxis=dict(title = 'Damage Block'),\n                 showlegend=False)\nfig8 = px.histogram(df, x='sp_defense',                   \n                   title = 'Special Defense distribution')\n\nfig8.update_layout(xaxis=dict(title = 'Damge Block'),\n                 showlegend=False)\nfig9 = px.histogram(df, x='speed',                   \n                   title = 'Speed distribution')\n\nfig9.update_layout(xaxis=dict(title = 'Speed'),\n                 showlegend=False)\nfig10 = px.histogram(df, x='is_sublegendary', color = 'gen',                  \n                   title = 'Sublegendary distribution by generation')\n\nfig10.update_layout(xaxis=dict(title = 'Sub Legendary'),\n                 showlegend=False)\nfig11 = px.histogram(df, x='is_legendary', color = 'gen',                  \n                   title = 'Legendary distribution by generation')\n\nfig11.update_layout(xaxis=dict(title = 'Legendary'),\n                 showlegend=False)\nfig12 = px.histogram(df, x='is_mythical', color = 'gen',                  \n                   title = 'Mythical distribution by generation')\n\nfig12.update_layout(xaxis=dict(title = 'Mythical'),\n                 showlegend=False)\n\nfig.show()\nfig2.show()\nfig3.show()\nfig4.show()\nfig5.show()\nfig6.show()\nfig7.show()\nfig8.show()\nfig9.show()\nfig10.show()\nfig11.show()\nfig12.show()","c1dae40f":"against_mean = df[[x for x in df.columns.values.tolist() if x not in Base_stats]]\nagainst_mean = against_mean.drop(columns=['national_number','english_name','japanese_name','gen','abilities'])\n\ndf['damage_taken_perc']=np.mean(against_mean,axis=1)\ndf.head()","ee108e28":"fig = px.histogram(df, x='damage_taken_perc', color = 'primary_type',                   \n                   title = 'Damage Taken Precentaje Mean')\n\nfig.update_layout(xaxis=dict(tickmode ='array',        \n                            title = 'Damage taken %'))\n                \nfig.show()","d45af5de":"attack_tot = df.attack+df.sp_attack\ndefense_tot = df.defense+df.sp_defense\n\ndf_CS = pd.DataFrame(columns=['English_name','P_type','S_type','Attack','Effective_Defense','Speed','Hp','Combat_Stats','Leg\/Myth'])\ndf_CS['English_name']=df.english_name\ndf_CS['P_type']=df.primary_type\ndf_CS['S_type']=df.secondary_type\ndf_CS['Attack']=MinMaxScaler().fit_transform(np.array(attack_tot).reshape(-1,1))\ndf_CS['Effective_Defense']=(MinMaxScaler().fit_transform(np.array(defense_tot).reshape(-1,1)))*df.damage_taken_perc.values\ndf_CS['Speed']=MinMaxScaler().fit_transform(np.array(df.speed).reshape(-1,1))\ndf_CS['Hp']=MinMaxScaler().fit_transform(np.array(df.hp).reshape(-1,1))\ndf_CS['Combat_Stats']=df_CS[df_CS.columns.values.tolist()[2:6]].sum(axis=1)\n\nfor i in range(0,df.shape[0]):\n    if df.is_sublegendary.iloc[i]==1:\n        df_CS['Leg\/Myth'].iloc[i]='Sub_Legendary'\n    elif df.is_legendary.iloc[i]==1:\n        df_CS['Leg\/Myth'].iloc[i]='Legendary'\n    elif df.is_mythical.iloc[i]==1:\n        df_CS['Leg\/Myth'].iloc[i]='Mythical'\n    else:\n        df_CS['Leg\/Myth'].iloc[i]='Normal'\n","6af384f8":"df_CS = df_CS.sort_values('Combat_Stats',ascending=False, ignore_index=True)","fe18d6cd":"print('Top ten pokemons overall')\ndf_CS.head(10)","bd997b08":"print('Top ten worst pokemons overall')\ndf_CS.tail(10)","1adf6a29":"fig = px.scatter(df_CS, x='Combat_Stats', y='Leg\/Myth', color = 'P_type',\n                 hover_name='English_name', hover_data=['S_type'],\n                title='Combat stats by type and lLegendary\/Mythic')\n\n\nfig.show()","459aeadb":"Combat_mean=[]\nfor i in P_type_list[0]:\n    Combat_mean.append(np.mean(df_CS.Combat_Stats[df_CS.P_type.isin([i])]))\n    \nCombat_type=pd.DataFrame(list(zip(P_type_list[0],Combat_mean)))\n\nfig = px.bar(x=Combat_type[1], y=Combat_type[0],color=Combat_type[0],orientation='h')\n\nfig.update_layout(xaxis=dict(tickmode ='array',\n                             title = 'Combat Stats'),\n                  yaxis=dict(tickmode ='array',\n                             title = 'Primary Type'),\n                  title='Ranking of types',\n                 showlegend=True)\nfig.update_yaxes(categoryorder='total ascending')\n\nfig.show()","22a4723e":"The best type by precentage of damage taken by other types is 'steel' followed by 'water' and 'dark'.","0cf9c939":"# Pok\u00e9dex Dataset\n\nGoals of the study:\n\n* How does height and weight of a Pok\u00e9mon correlate with its various base stats?\n* What are the general distributions for the various Pok\u00e9mon segments?\n* What factors influence the Experience Growth and Egg Steps? Are these quantities correlated?\n* Which type is the strongest overall? Which is the weakest","51557d46":"## Visualization","580a4546":"## Search the best\n\nBased in the combat stats will take a mean value combat for each pok\u00e9mon to see the ranking. Grouping the Pok\u00e9mon list by its Primary Type will see the best type overall.\n\nThis way the last question purposed: *Which type is the strongest overall? Which is the weakest* will be answered.","34c785ed":"In order to answer the first question: *How does height and weight of a Pok\u00e9mon correlate with its various base stats?*.\n\n*Height* is correlated to:\n* Weight, strongly.\n* Base Egg Steps, moderately.\n* hp, strongly.\n* attack, moderately.\n* defense, moderately.\n* sp_attack, moderately.\n* sp_defense, moderately.\n* speed, moderately.\n* sublegendary, weakly.\n* legendary, moderately.\n\n*Weight* is correlated to:\n* Height, strongly.\n* Base Egg Steps, strongly.\n* hp, strongly.\n* attack, moderately.\n* defense, strongly.\n* sp_attack, moderately.\n* sp_defense, moderately.\n* speed, moderately.\n* sublegendary, moderately.\n* legendary, moderately.\n\nExperience Growth is not in the data set so the question: *What factors influence the Experience Growth and Egg Steps? Are these quantities correlated?* is impossible to answer. But *Base Egg Steps* is correlated to:\n* Height, moderately.\n* Weight, strongly\n* hp, moderately.\n* attack, moderately.\n* defense, moderately.\n* sp_attack, strongly.\n* sp_defense, moderately.\n* speed, moderately.\n* sublegendary, strongly.\n* legendary, strongly.\n* mythical, strongly.","c6d2f950":"There are Pok\u00e9mons with no secondary type and there is some others that don't have percent_male\/female. For the second we will asume that there are 50% each.","b12161b7":"### Distributions\n\nIn order to answer the question: *What are the general distributions for the various Pok\u00e9mon segments?*","9464d746":"Let's do an overall combat_stats by:\n\ndamage done + damage blocked + speed + hp.\n\nnorm(sp_attack+attack) + (1+(1-damage_taken_perc))\u00b7norm(sp_defense+defense) +norm(speed) + norm(hp)","379db58c":"#### Best types overall are:\n* Dragon\n* Electric\n* Fire\n* Steel\n* Psychic\n\n#### Worst types overall are:\n* Bug\n* Normal\n* Grass\n* Fairy\n* Poison","dde773a8":"### Correlations","aaa43ff3":"We are searching for the type which has the less Damage Taken Percentaje."}}