{"cell_type":{"7d64a91b":"code","0c9505f7":"code","a69337b6":"code","747270a1":"code","67a82368":"code","d752373e":"code","4be2e2d9":"code","c5403052":"code","9b185e71":"code","ff93a082":"code","1dbdc9e0":"code","2c28f170":"code","48e35518":"code","3584dfd9":"code","e1035b2d":"code","4283062d":"code","84f0dd29":"code","16fd9fdc":"code","a8de58ed":"code","c6d3ccbf":"code","56926e87":"code","01af80d7":"code","9b5bddc8":"code","96f8751a":"code","1aff597d":"markdown","73db450a":"markdown"},"source":{"7d64a91b":"from kaggle_secrets import UserSecretsClient\nuser_secrets = UserSecretsClient()\napi = user_secrets.get_secret(\"tingo_api\")","0c9505f7":"import pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np","a69337b6":"import pandas_datareader as pdr\ndf = pdr.get_data_tiingo('AAPL', api_key=api)\ndf.to_csv('AAPL.csv')","747270a1":"df.head()","67a82368":"#get closing data\ndf=df.reset_index()['close']","d752373e":"#plot the data\nplt.plot(df)\nplt.xlabel('days')\nplt.ylabel('close value')","4be2e2d9":"#scale the data\nfrom sklearn.preprocessing import MinMaxScaler\nscaler=MinMaxScaler(feature_range=(0,1))\ndf=scaler.fit_transform(np.array(df).reshape(-1,1))","c5403052":"#split to training and test\ntraining_size=int(len(df)*0.75)\ntest_size=len(df)-training_size\ntrain_data,test_data=df[0:training_size,:].ravel(),df[training_size:len(df),:1].ravel()\ntrain_data.shape,test_data.shape","9b185e71":"#shift data by a window for prediction\nnum=7 #week\ndef shift2(arr,num):\n    arr=np.roll(arr,num)\n    if num<0:\n         np.put(arr,range(len(arr)+num,len(arr)),np.nan)\n    elif num > 0:\n         np.put(arr,range(num),np.nan)\n    return arr","ff93a082":"X_train=train_data[0:-num]\ny_train=shift2(train_data,num)[num::]\nprint(X_train.shape,y_train.shape)\n\nX_test=test_data[0:-num]\ny_test=shift2(test_data,num)[num::]\nprint(X_test.shape,y_test.shape)","1dbdc9e0":"from sklearn.linear_model import Ridge\n# Note that Ridge regression performs linear least squares with L2 regularization.\n# Create and train the Ridge Linear Regression  Model\nregression_model = Ridge()\nregression_model.fit(X_train.reshape(-1,1), y_train)","2c28f170":"y_pred = regression_model.predict(X_test.reshape(-1,1))","48e35518":"plt.plot(y_test,label='ground data')\nplt.plot(y_pred,label='pred data')\nplt.legend()","3584dfd9":"from sklearn.metrics import mean_squared_error\nmean_squared_error( y_pred, y_test)**0.5","e1035b2d":"def create_dataset(dataset,n):\n    time_step=n*n\n    dataX, dataY = [], []\n    for i in range(len(dataset)-time_step-n):\n        a = dataset[i:(i+time_step)]   ###i=0, 0,1,2,3-----99   100 \n        dataX.append(a)\n        dataY.append(dataset[i + time_step:i + time_step+n])\n    return np.array(dataX), np.array(dataY)","4283062d":"#testing code\nx=np.arange(0,20)\ncreate_dataset(x,3)","84f0dd29":"X_train,y_train=create_dataset(train_data,7)\nX_test,y_test=create_dataset(test_data,7)\nX_train.shape,y_train.shape","16fd9fdc":"# reshape input to be [samples, time steps, features] which is required for LSTM\nX_train =X_train.reshape(X_train.shape[0],X_train.shape[1] , 1)\nX_test = X_test.reshape(X_test.shape[0],X_test.shape[1] , 1)    \nX_train.shape,y_train.shape","a8de58ed":"### Create the Stacked LSTM model\nfrom tensorflow.keras.models import Sequential\nfrom tensorflow.keras.layers import Dense,Dropout,Flatten\nfrom tensorflow.keras.layers import LSTM    \n    \nmodel=Sequential()\nmodel.add(LSTM(10,return_sequences=True,input_shape=X_train.shape[1::]))\n# model.add(Dropout(0.3))\n# model.add(LSTM(150,return_sequences=True))\n# model.add(Dropout(0.3))\n# model.add(LSTM(150,return_sequences=True))\nmodel.add(Dropout(0.3))\nmodel.add(Flatten())\n\nmodel.add(Dense(7))\nmodel.compile(loss='mean_squared_error',optimizer='adam')    ","c6d3ccbf":"model.fit(X_train,y_train,validation_data=(X_test,y_test),epochs=200,batch_size=64,verbose=0)","56926e87":"y_pred=model.predict(X_test)","01af80d7":"y_predx=[i[0] for i in y_pred]\ny_testx=[i[0] for i in y_test]","9b5bddc8":"plt.plot(y_testx,label='ground data')\nplt.plot(y_predx,label='pred data')\nplt.legend()","96f8751a":"mean_squared_error( y_predx, y_testx)**0.5","1aff597d":"# first get an api from https:\/\/api.tiingo.com\/","73db450a":"# lstm"}}