{"cell_type":{"71b044c4":"code","b4001a7d":"code","361693ff":"code","ddd94596":"code","001fd2ae":"code","52de00a5":"code","5aab0071":"code","8d161f5a":"code","9ad40fb0":"code","adbcd9ee":"code","e7c52d88":"code","9c8b2361":"code","fdbdc29d":"code","d32aef5c":"code","346a92e2":"code","8cf8fc6f":"code","7669ced4":"code","46b5ed7b":"code","aee41435":"code","bd1d0692":"code","13bbec2b":"code","3c83e48f":"code","70adcd5b":"code","ff7e3c4d":"code","74573b4a":"code","891858db":"code","4b12814b":"code","1798f7fb":"code","5d56e5ed":"code","0ebc8495":"code","bb546a9c":"code","dbc6124b":"code","229572f7":"code","4003c638":"code","2551e954":"code","7634cb2e":"code","8d4790dd":"code","d286b6c2":"code","69a86702":"code","8acef266":"code","4ae74b32":"code","66ca7e0a":"code","86283b4a":"code","e279804f":"code","fab846a6":"code","5fefe922":"code","60ed3927":"code","c59df5ec":"code","4c0f55b7":"markdown","23a1bb03":"markdown","52077acc":"markdown","4199d2c2":"markdown","e91162c6":"markdown","ab4d4156":"markdown"},"source":{"71b044c4":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","b4001a7d":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom math import cos, sin","361693ff":"train_df = pd.read_csv('..\/input\/covid19-global-forecasting-week-1\/train.csv')\ntest_df = pd.read_csv('..\/input\/covid19-global-forecasting-week-1\/test.csv')\n\ndf = [train_df, test_df]","ddd94596":"train_df.shape","001fd2ae":"train_df.head()","52de00a5":"train_df.isnull().sum()","5aab0071":"arr1 = train_df['Country\/Region'].unique()","8d161f5a":"arr2 = [i for i in range(163)]","9ad40fb0":"country_dict = dict(zip(arr1, arr2))","adbcd9ee":"country_dict","e7c52d88":"for dataset in df:\n    dataset['Country_int'] = dataset['Country\/Region'].map(country_dict).astype(int)","9c8b2361":"train_df.head()","fdbdc29d":"type(train_df.Date)","d32aef5c":"for dataset in df:\n    dataset['Date'] = pd.to_datetime(dataset['Date'])","346a92e2":"for dataset in df:\n    dataset['Day'] = dataset.Date.apply(lambda x: x.day)\n    dataset['Month'] = dataset.Date.apply(lambda x: x.month)","8cf8fc6f":"train_df.head()","7669ced4":"for j in train_df['Country\/Region'].unique():\n    l = train_df[(train_df['Country\/Region'] == j)]\n    len_state = len(l['Province\/State'].unique())\n    \n    if len_state != 1:\n        arr_state1 = l['Province\/State'].unique()\n        arr_state2 = [i for i in range(1,len_state+1)]\n        state_dict = dict(zip(arr_state1, arr_state2))\n\n        for dataset in df:\n            dataset['Province\/State'] = dataset['Province\/State'].map(state_dict)","46b5ed7b":"train_df[train_df['Country\/Region'] == 'Australia'].head()","aee41435":"for dataset in df:\n    dataset['Province\/State'].fillna(0, inplace=True)","bd1d0692":"train_df.head()","13bbec2b":"for dataset in df:\n    dataset['X_Cord'] = (dataset['Lat'].apply(cos)) * (dataset['Long'].apply(cos))\n    dataset['Y_Cord'] = (dataset['Lat'].apply(cos)) * (dataset['Long'].apply(sin))    ","3c83e48f":"train_df[train_df['Country\/Region'] == 'Afghanistan'].head()","70adcd5b":"test_df.head()","ff7e3c4d":"train_df.info()","74573b4a":"for dataset in df:\n    dataset['Province\/State'] = dataset['Province\/State'].astype(int)","891858db":"train_df['ConfirmedCases'] = train_df['ConfirmedCases'].astype(int)\ntrain_df['Fatalities'] = train_df['Fatalities'].astype(int)","4b12814b":"train_df.info()","1798f7fb":"import seaborn as sns","5d56e5ed":"corr = train_df.corr()\nplt.figure(figsize=(11,7))\nsns.heatmap(corr, annot=True)","0ebc8495":"X = train_df.drop(['Id', 'Country\/Region', 'Lat', 'Long', 'Date', 'ConfirmedCases', 'Fatalities', 'Province\/State'], axis=1)\ny1 = train_df['ConfirmedCases']\ny2 = train_df['Fatalities']\nX_test = test_df.drop(['ForecastId', 'Country\/Region', 'Lat', 'Long', 'Date', 'Province\/State'], axis=1)","bb546a9c":"from sklearn.linear_model import LinearRegression\nfrom sklearn.neighbors import KNeighborsRegressor\nfrom sklearn.tree import DecisionTreeRegressor\nfrom sklearn.ensemble import RandomForestRegressor\nfrom xgboost import XGBRegressor\nfrom sklearn.model_selection import GridSearchCV","dbc6124b":"lin_reg_regressor = LinearRegression()\nlin_reg_regressor.fit(X, y1)\nlin_reg_regressor.score(X, y1)","229572f7":"KNN_regressor = KNeighborsRegressor()\nKNN_regressor.fit(X, y1)\nKNN_regressor.score(X, y1)","4003c638":"tree_regressor = DecisionTreeRegressor()\ntree_regressor.fit(X, y1)\ntree_regressor.score(X, y1)","2551e954":"Random_Forest_regressor = RandomForestRegressor()\nRandom_Forest_regressor.fit(X, y1)\nRandom_Forest_regressor.score(X, y1)","7634cb2e":"XGB_regressor = XGBRegressor()\nXGB_regressor.fit(X, y1)\nXGB_regressor.score(X, y1)","8d4790dd":"param_test = {\n    'max_depth': range(3, 12, 2),\n    'min_child_weight': range(1, 6, 2),\n    'gamma': [i\/10.0 for i in range(0,5)],\n#     'subsample': [i\/10.0 for i in range(6,10)],\n#     'colsample_bytree': [i\/10.0 for i in range(6,10)],\n#     'reg_alpha': [0, 0.001, 0.005, 0.01, 1, 100],\n    'learning_rate': [0.1, 0.2, 0.3],\n    'n_estimators': [100, 400, 600, 900, 1100]\n}","d286b6c2":"gsearch = GridSearchCV(estimator = XGBRegressor(), \n                       param_grid = param_test,\n                       scoring='neg_root_mean_squared_error',\n                       n_jobs=-1,\n                       cv=5)","69a86702":"# gsearch.fit(X, y1)","8acef266":"gsearch.best_estimator_","4ae74b32":"XGB_regressor=XGBRegressor(base_score=0.5, colsample_bylevel=1,\n             colsample_bynode=1, colsample_bytree=1, gamma=0.0, gpu_id=-1,\n             importance_type='gain', learning_rate=0.1, max_delta_step=0, max_depth=3,\n             min_child_weight=1, n_estimators=100, n_jobs=0, num_parallel_tree=1,\n             objective='reg:squarederror', random_state=0, reg_alpha=0,\n             reg_lambda=1, scale_pos_weight=1, subsample=1)\n\n\nXGB_regressor.fit(X, y1)\nXGB_regressor.score(X, y1)","66ca7e0a":"ConfirmedCasesPred = XGB_regressor.predict(X_test)\nConfirmedCasesPred = pd.DataFrame(ConfirmedCasesPred, columns=['ConfirmedCases'])","86283b4a":"XGB_regressor.fit(X, y2)\nXGB_regressor.score(X, y2)","e279804f":"FatalitiesPred = XGB_regressor.predict(X_test)\nFatalitiesPred = pd.DataFrame(FatalitiesPred, columns=['Fatalities'])","fab846a6":"ForecastId = test_df.ForecastId\nForecastId = pd.DataFrame(ForecastId)","5fefe922":"pred_file = pd.concat([ForecastId, ConfirmedCasesPred, FatalitiesPred], axis=1)","60ed3927":"pred_file.head()","c59df5ec":"pred_file.to_csv('submission.csv', index=False)","4c0f55b7":"### Confusion Matrix\nchecking correlations of different features","23a1bb03":"### Importing Libraries","52077acc":"### Model Training","4199d2c2":"### File Submission","e91162c6":"### Data Exploration","ab4d4156":"### Importing Data"}}