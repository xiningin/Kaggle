{"cell_type":{"36355cc7":"code","c9500f91":"code","a94d68cf":"code","6815152a":"code","a54db85c":"code","b3cc9cd6":"code","e3778b88":"code","76c1f394":"code","f0fccaad":"code","26cffbba":"code","fabc6c1e":"code","3cd48b34":"code","75470dbf":"code","9dbcd4d6":"code","d51cd2e1":"code","e2ee7137":"code","dc45edf2":"code","8bb96418":"code","1d93214b":"code","bc2fe5f5":"code","d87f3956":"code","5047bc4e":"code","2eb5e7af":"code","1aa55434":"code","781bfcc6":"code","d885e0fd":"code","9886e868":"code","6ffed9f7":"code","fbe7de5f":"code","e630b6e6":"code","b0e1081d":"code","58d5baa8":"code","76dee020":"code","c2d5f991":"code","3e777c5c":"code","9de9c74e":"code","1d80e04f":"code","12673a82":"code","cea6e6ba":"code","50986912":"code","d675ad16":"code","79d6083e":"code","4de1302b":"code","0ea1b3df":"code","6805598c":"code","e61b8144":"code","e0370c04":"code","a24748ec":"code","ab9f3fba":"code","f193fb95":"code","17c19927":"code","ed5fcf2d":"code","05d80a87":"code","edf9cb2f":"code","f7afc84b":"code","01056ac8":"code","5e3dc658":"code","b515aa58":"code","a970bab7":"code","91270f8f":"code","a9e1eaee":"code","5881922b":"code","9c72d2eb":"markdown","7a5d5f50":"markdown","4fef4be1":"markdown","da1d1f99":"markdown","8b49b24b":"markdown","f49f72e5":"markdown","d43a6d5c":"markdown","7a4fc0df":"markdown","ac005dde":"markdown","4ef5250a":"markdown"},"source":{"36355cc7":"import os\nimport torch\nimport pandas as pd\nimport numpy as np\nfrom torch.utils.data import Dataset, random_split, DataLoader\nfrom PIL import Image\nimport torchvision.models as models\nimport matplotlib.pyplot as plt\nfrom tqdm.notebook import tqdm\nimport torchvision.transforms as T\nfrom sklearn.metrics import f1_score\nimport torch.nn.functional as F\nimport torch.nn as nn\nfrom torchvision.utils import make_grid\n%matplotlib inline","c9500f91":"DATA_DIR = '..\/input\/jovian-pytorch-z2g\/Human protein atlas'\n\nTRAIN_DIR = DATA_DIR + '\/train'                           # Contains training images\nTEST_DIR = DATA_DIR + '\/test'                             # Contains test images\n\nTRAIN_CSV = DATA_DIR + '\/train.csv'                       # Contains real labels for training images\nTEST_CSV = '\/content\/submission.csv'   # Contains dummy labels for test image","a94d68cf":"data_df = pd.read_csv(TRAIN_CSV)\ndata_df.head()","6815152a":"labels = {\n    0: 'Mitochondria',\n    1: 'Nuclear bodies',\n    2: 'Nucleoli',\n    3: 'Golgi apparatus',\n    4: 'Nucleoplasm',\n    5: 'Nucleoli fibrillar center',\n    6: 'Cytosol',\n    7: 'Plasma membrane',\n    8: 'Centrosome',\n    9: 'Nuclear speckles'\n}","a54db85c":"def encode_label(label):\n    target = torch.zeros(10)\n    for l in str(label).split(' '):\n        target[int(l)] = 1.\n    return target\n\ndef decode_target(target, text_labels=False, threshold=0.35):\n    result = []\n    for i, x in enumerate(target):\n        if (x >= threshold):\n            if text_labels:\n                result.append(labels[i] + \"(\" + str(i) + \")\")\n            else:\n                result.append(str(i))\n    return ' '.join(result)","b3cc9cd6":"class HumanProteinDataset(Dataset):\n    def __init__(self, df, root_dir, transform=None):\n        self.df = df\n        self.transform = transform\n        self.root_dir = root_dir\n        \n    def __len__(self):\n        return len(self.df)    \n    \n    def __getitem__(self, idx):\n        row = self.df.loc[idx]\n        img_id, img_label = row['Image'], row['Label']\n        img_fname = self.root_dir + \"\/\" + str(img_id) + \".png\"\n        img = Image.open(img_fname)\n        if self.transform:\n            img = self.transform(img)\n        return img, encode_label(img_label)","e3778b88":"imagenet_stats = ([0.485, 0.456, 0.406], [0.229, 0.224, 0.225])\n\ntrain_tfms = T.Compose([\n    T.RandomCrop(512, padding=4, padding_mode='reflect'),\n    T.RandomHorizontalFlip(), \n    T.RandomRotation(90),\n    T.ToTensor(), \n    T.Normalize(*imagenet_stats,inplace=True), \n    T.RandomErasing(inplace=True)\n])\n\nvalid_tfms = T.Compose([\n    T.ToTensor(), \n    T.Normalize(*imagenet_stats)\n])","76c1f394":"np.random.seed(16)\nmsk = np.random.rand(len(data_df)) < 0.9\n\ntrain_df = data_df[msk].reset_index()\nval_df = data_df[~msk].reset_index()","f0fccaad":"train_ds = HumanProteinDataset(train_df, TRAIN_DIR, transform=train_tfms)\nval_ds = HumanProteinDataset(val_df, TRAIN_DIR, transform=valid_tfms)\nlen(train_ds), len(val_ds)","26cffbba":"def show_sample(img, target, invert=True):\n    if invert:\n        plt.imshow(1 - img.permute((1, 2, 0)))\n    else:\n        plt.imshow(img.permute(1, 2, 0))\n    print('Labels:', decode_target(target, text_labels=True))","fabc6c1e":"show_sample(*train_ds[1541])","3cd48b34":"batch_size = 64","75470dbf":"train_dl = DataLoader(train_ds, batch_size, shuffle=True, \n                      num_workers=3, pin_memory=True)\nval_dl = DataLoader(val_ds, batch_size*2, \n                    num_workers=2, pin_memory=True)","9dbcd4d6":"def show_batch(dl, invert=True):\n    for images, labels in dl:\n        fig, ax = plt.subplots(figsize=(16, 4))\n        ax.set_xticks([]); ax.set_yticks([])\n        data = 1-images if invert else images\n        ax.imshow(make_grid(data, nrow=16).permute(1, 2, 0)) #total images dispalyed depends on the batch as we use generator here.\n        break","d51cd2e1":"show_batch(train_dl, invert=True)","e2ee7137":"def F_score(output, label, threshold=0.35, beta=1):\n    prob = output > threshold\n    label = label > threshold\n\n    TP = (prob & label).sum(1).float()\n    TN = ((~prob) & (~label)).sum(1).float()\n    FP = (prob & (~label)).sum(1).float()\n    FN = ((~prob) & label).sum(1).float()\n\n    precision = torch.mean(TP \/ (TP + FP + 1e-12))\n    recall = torch.mean(TP \/ (TP + FN + 1e-12))\n    F2 = (1 + beta**2) * precision * recall \/ (beta**2 * precision + recall + 1e-12)\n    return F2.mean(0)","dc45edf2":"class MultilabelImageClassificationBase(nn.Module):\n    def training_step(self, batch):\n        images, targets = batch \n        out = self(images)                      \n        loss = F.binary_cross_entropy(out, targets)      \n        return loss\n    \n    def validation_step(self, batch):\n        images, targets = batch \n        out = self(images)                           # Generate predictions\n        loss = F.binary_cross_entropy(out, targets)  # Calculate loss\n        score = F_score(out, targets)\n        return {'val_loss': loss.detach(), 'val_score': score.detach() }\n        \n    def validation_epoch_end(self, outputs):\n        batch_losses = [x['val_loss'] for x in outputs]\n        epoch_loss = torch.stack(batch_losses).mean()   # Combine losses\n        batch_scores = [x['val_score'] for x in outputs]\n        epoch_score = torch.stack(batch_scores).mean()      # Combine accuracies\n        return {'val_loss': epoch_loss.item(), 'val_score': epoch_score.item()}\n    \n    def epoch_end(self, epoch, result):\n        print(\"Epoch [{}], last_lr: {:.10f}, train_loss: {:.4f}, val_loss: {:.4f}, val_score: {:.4f}\".format(\n            epoch, result['lrs'][-1], result['train_loss'], result['val_loss'], result['val_score']))","8bb96418":"resnet34 = models.resnet34(pretrained=True)\nresnet34","1d93214b":"class ProteinResnet(MultilabelImageClassificationBase):\n    def __init__(self):\n        super().__init__()\n        # Use a pretrained model\n        self.network = models.resnet34(pretrained=True)\n        # Replace last layer\n        num_ftrs = self.network.fc.in_features\n        self.network.fc = nn.Linear(num_ftrs, 256)\n        self.network0=nn.Linear(256,128)\n        self.network1=nn.Linear(128,64)\n        self.networkact1=nn.ReLU()\n        self.network2=nn.Linear(64,10)\n    \n    def forward(self, xb):\n      out=self.network(xb)\n      out=self.networkact1(out)\n      out=self.network0(out)\n      out=self.networkact1(out)\n      out=self.network1(out)\n      out=self.networkact1(out)\n      out=self.network2(out)\n      return torch.sigmoid(out)\n    \n    def freeze(self):\n        # To freeze the residual layers\n        for param in self.network.parameters():\n            param.require_grad = False\n        for param in self.network.fc.parameters():\n            param.require_grad = True\n    \n    def unfreeze(self):\n        # Unfreeze all layers\n        for param in self.network.parameters():\n            param.require_grad = True","bc2fe5f5":"def get_default_device():\n    \"\"\"Pick GPU if available, else CPU\"\"\"\n    if torch.cuda.is_available():\n        return torch.device('cuda')\n    else:\n        return torch.device('cpu')\n    \ndef to_device(data, device):\n    \"\"\"Move tensor(s) to chosen device\"\"\"\n    if isinstance(data, (list,tuple)):\n        return [to_device(x, device) for x in data]\n    return data.to(device, non_blocking=True)\n\nclass DeviceDataLoader():\n    \"\"\"Wrap a dataloader to move data to a device\"\"\"\n    def __init__(self, dl, device):\n        self.dl = dl\n        self.device = device\n        \n    def __iter__(self):\n        \"\"\"Yield a batch of data after moving it to device\"\"\"\n        for b in self.dl: \n            yield to_device(b, self.device)\n\n    def __len__(self):\n        \"\"\"Number of batches\"\"\"\n        return len(self.dl)","d87f3956":"device = get_default_device()\ndevice","5047bc4e":"train_dl = DeviceDataLoader(train_dl, device)\nval_dl = DeviceDataLoader(val_dl, device)","2eb5e7af":"@torch.no_grad()\ndef evaluate(model, val_loader):\n    model.eval()\n    outputs = [model.validation_step(batch) for batch in val_loader]\n    return model.validation_epoch_end(outputs)\n\ndef get_lr(optimizer):\n    for param_group in optimizer.param_groups:\n        return param_group['lr']\n\ndef fit_one_cycle(epochs, max_lr, model, train_loader, val_loader, \n                  weight_decay=0.1, grad_clip=True, opt_func=torch.optim.SGD):\n    torch.cuda.empty_cache()\n    history = []\n    \n    # Set up cutom optimizer with weight decay\n    optimizer = opt_func(model.parameters(), max_lr, weight_decay=weight_decay)\n    # Set up one-cycle learning rate scheduler\n    sched = torch.optim.lr_scheduler.OneCycleLR(optimizer, max_lr, epochs=epochs, \n                                                steps_per_epoch=len(train_loader))\n    \n    for epoch in range(epochs):\n        # Training Phase \n        model.train()\n        train_losses = []\n        lrs = []\n        for batch in tqdm(train_loader):\n            loss = model.training_step(batch)\n            train_losses.append(loss)\n            loss.backward()\n            \n            # Gradient clipping\n            if grad_clip: \n                nn.utils.clip_grad_value_(model.parameters(), grad_clip)\n            \n            optimizer.step()\n            optimizer.zero_grad()\n            \n            # Record & update learning rate\n            lrs.append(get_lr(optimizer))\n            sched.step()\n        \n        # Validation phase\n        result = evaluate(model, val_loader)\n        result['train_loss'] = torch.stack(train_losses).mean().item()\n        result['lrs'] = lrs\n        model.epoch_end(epoch, result)\n        history.append(result)\n    return history","1aa55434":"import math\n#Learning_rate_finder\ndef fit(epochs, start_lr,end_lr, model, train_loader, val_loader, opt_func=torch.optim.SGD):\n    history = []\n    lrs=[]\n\n    \n    # LR function lambda\n\n    lr_lambda = lambda x: math.exp(x * math.log(end_lr \/ start_lr) \/ (epochs * len( train_dl)))\n    \n    # Make lists to capture the logs\n    lr_find_loss = []\n    lr_find_lr = []\n\n    iter = 0\n\n    smoothing = 0.05\n    optimizer = opt_func(model.parameters(), start_lr )\n    scheduler = torch.optim.lr_scheduler.LambdaLR(optimizer, lr_lambda)\n    for epoch in range(epochs):\n        # Training Phase \n        model.train()\n        train_losses = []\n        for batch in tqdm(train_loader):\n            loss = model.training_step(batch)\n            train_losses.append(loss)\n            loss.backward()\n            \n            \n            optimizer.step()\n            optimizer.zero_grad()\n            scheduler.step()\n            \n        \n        lr_step = optimizer.state_dict()[\"param_groups\"][0][\"lr\"]\n        lr_find_lr.append(lr_step)\n\n        # smooth the loss\n        if iter==0:\n          lr_find_loss.append(loss)\n        else:\n          loss = smoothing  * loss + (1 - smoothing) * lr_find_loss[-1]\n          lr_find_loss.append(loss)\n\n        iter+=1\n        # Validation phase\n        result = evaluate(model, val_loader)\n        result['train_loss'] = torch.stack(train_losses).mean().item()\n        result['lrs'] = lr_find_lr\n        model.epoch_end(epoch, result)\n        history.append(result)\n    return history","781bfcc6":"model = to_device(ProteinResnet(), device)\n#model.load_state_dict(torch.load(\".\/savedmodelprotein1.pth\"))\n#model.eval()","d885e0fd":"print( [evaluate(model, val_dl)])","9886e868":"model.unfreeze()","6ffed9f7":"epochs = 10\nstart_lr = 1e-7\nend_lr = 0.1\nopt_func = torch.optim.Adam","fbe7de5f":"%%time\nhistory = fit(epochs, start_lr,end_lr, model, train_dl, val_dl, \n                         opt_func=opt_func)","e630b6e6":"import matplotlib.pyplot as plt\nplt.semilogx([x.get('lrs') for x in history][-1],[x.get('train_loss') for x in history])","b0e1081d":"model = to_device(ProteinResnet(), device)","58d5baa8":"model.freeze()","76dee020":"epochs = 10\nmax_lr = 7e-4\ngrad_clip = 0.1\nweight_decay = 4e-4\nopt_func = torch.optim.Adam","c2d5f991":"%%time\nhistory = fit_one_cycle(epochs, max_lr, model, train_dl, val_dl, \n                         grad_clip=grad_clip, \n                         weight_decay=weight_decay, \n                         opt_func=opt_func)","3e777c5c":"model.unfreeze()","9de9c74e":"%%time\nhistory += fit_one_cycle(20, 8e-4, model, train_dl, val_dl, \n                         grad_clip=grad_clip, \n                         weight_decay=weight_decay, \n                         opt_func=opt_func )","1d80e04f":"train_time='5'","12673a82":"torch.save(model.state_dict(), \"savedmodelprotein1.pth\")","cea6e6ba":"def plot_scores(history):\n    scores = [x['val_score'] for x in history]\n    plt.plot(scores, '-x')\n    plt.xlabel('epoch')\n    plt.ylabel('score')\n    plt.title('F1 score vs. No. of epochs');","50986912":"plot_scores(history)","d675ad16":"def plot_losses(history):\n    train_losses = [x.get('train_loss') for x in history]\n    val_losses = [x['val_loss'] for x in history]\n    plt.plot(train_losses, '-bx')\n    plt.plot(val_losses, '-rx')\n    plt.xlabel('epoch')\n    plt.ylabel('loss')\n    plt.legend(['Training', 'Validation'])\n    plt.title('Loss vs. No. of epochs');","79d6083e":"plot_losses(history)","4de1302b":"def plot_lrs(history):\n    lrs = np.concatenate([x.get('lrs', []) for x in history])\n    plt.plot(lrs[4000:])\n    plt.xlabel('Batch no.')\n    plt.ylabel('Learning rate')\n    plt.title('Learning Rate vs. Batch no.');","0ea1b3df":"plot_lrs(history)","6805598c":"def predict_single(image):\n    xb = image.unsqueeze(0)\n    xb = to_device(xb, device)\n    preds = model(xb)\n    prediction = preds[0]\n    print(\"Prediction: \", prediction)\n    show_sample(image, prediction)","e61b8144":"test_df = pd.read_csv(TEST_CSV)\nprint(test_df.head())\ntest_dataset = HumanProteinDataset(test_df, TEST_DIR, transform=valid_tfms)","e0370c04":"img, target = test_dataset[0]\nimg.shape","a24748ec":"predict_single(test_dataset[100][0])","ab9f3fba":"predict_single(test_dataset[74][0])","f193fb95":"test_dl = DeviceDataLoader(DataLoader(test_dataset, batch_size, num_workers=3, pin_memory=True), device)","17c19927":"@torch.no_grad()\ndef predict_dl(dl, model):\n    torch.cuda.empty_cache()\n    batch_probs = []\n    for xb, _ in tqdm(dl):\n        probs = model(xb)\n        batch_probs.append(probs.cpu().detach())\n    print(batch_probs[0])\n    batch_probs = torch.cat(batch_probs) #to add all the batch wise results\n    return [decode_target(x) for x in batch_probs]","ed5fcf2d":"test_preds = predict_dl(test_dl, model)","05d80a87":"submission_df = pd.read_csv(TEST_CSV)\nsubmission_df.Label = test_preds\nsubmission_df.sample(20)","edf9cb2f":"sub_fname = 'submission.csv'","f7afc84b":"submission_df.to_csv(sub_fname, index=False)","01056ac8":"weights_fname = 'protein-resnet.pth'\ntorch.save(model.state_dict(), weights_fname)","5e3dc658":"!pip install jovian --upgrade --quiet","b515aa58":"import jovian","a970bab7":"jovian.reset()\njovian.log_hyperparams(arch='resnet34', \n                       epochs=2*epochs, \n                       lr=max_lr, \n                       scheduler='one-cycle', \n                       weight_decay=weight_decay, \n                       grad_clip=grad_clip,\n                       opt=opt_func.__name__)","91270f8f":"jovian.log_metrics(val_loss=history[-1]['val_loss'], \n                   val_score=history[-1]['val_score'],\n                   train_loss=history[-1]['train_loss'],\n                   time=train_time)","a9e1eaee":"project_name='protein-advanced'","5881922b":"jovian.commit(project=project_name, environment=None, outputs=[weights_fname])","9c72d2eb":"## Making predictions and submission","7a5d5f50":"## Preparing the Data","4fef4be1":"Now, unfreeze and train some more.","da1d1f99":"## Model - Transfer Learning","8b49b24b":"First, freeze the ResNet layers and train some epochs. This only trains the final layer to start classifying the images.","f49f72e5":"### Data augmentations","d43a6d5c":"[Learn about ResNets.](https:\/\/towardsdatascience.com\/an-overview-of-resnet-and-its-variants-5281e2f56035)\n\nCheck out torchvision models: https:\/\/pytorch.org\/docs\/stable\/torchvision\/models.html","7a4fc0df":"### DataLoaders","ac005dde":"## Save and Commit","4ef5250a":"## Training"}}