{"cell_type":{"9d1ca9aa":"code","be48948d":"code","5bf06847":"code","41942912":"code","b9383185":"code","ffa9d0b2":"code","9ea466bb":"code","f3a78eb7":"code","c1160377":"code","cda82efe":"code","985d590a":"code","909abe75":"markdown"},"source":{"9d1ca9aa":"import csv\nimport numpy as np\nimport tensorflow as tf\nimport matplotlib.pyplot as plt\nimport pandas as pd\nfrom tensorflow.keras.preprocessing.image import ImageDataGenerator\nfrom tensorflow.keras.utils import to_categorical\nfrom keras.callbacks import ReduceLROnPlateau\n\nprint(\"Setup Complete!\")","be48948d":"def get_data(filename):\n    with open(filename) as training_file:\n        file = csv.reader(training_file, delimiter = \",\")\n        images = []\n        labels = []\n        ignore = 1\n        for row in file:\n            if ignore == 1:\n                ignore = 0\n                continue\n            labels.append(row[0])\n            images.append(np.array_split(row[1:],28))\n    return np.array(images).astype(\"int32\"), np.array(labels).astype(\"int32\")\n","5bf06847":"train_path = '\/kaggle\/input\/sign-language-mnist\/sign_mnist_train\/sign_mnist_train.csv'\ntest_path = '\/kaggle\/input\/sign-language-mnist\/sign_mnist_test\/sign_mnist_test.csv'\n\nx_train, y_train = get_data(train_path)\nx_test, y_test = get_data(test_path)\n\nprint(x_train.shape)\nprint(x_test.shape)\nprint(y_train.shape)\nprint(y_test.shape)","41942912":"x_train = np.expand_dims(x_train, axis=3)\nx_test = np.expand_dims(x_test, axis=3)","b9383185":"train_data_gen = ImageDataGenerator(rescale = 1.\/255,\n      rotation_range=30,\n      width_shift_range=0.1,\n      height_shift_range=0.1,\n      shear_range=0.2,\n      zoom_range=0.2,\n      horizontal_flip=True,\n      fill_mode='nearest'\n    )\n\nvalidation_data_gen = ImageDataGenerator(rescale = 1.\/255)\n\nprint(x_train.shape)\nprint(x_test.shape)","ffa9d0b2":"model = tf.keras.models.Sequential([\n    tf.keras.layers.Conv2D(64, (3,3), activation=tf.nn.relu,input_shape=(28, 28, 1)),\n    tf.keras.layers.BatchNormalization(),\n    \n    tf.keras.layers.Conv2D(64, (3,3), activation=tf.nn.relu,padding = 'Same'),\n    tf.keras.layers.MaxPooling2D(2,2),\n\n    tf.keras.layers.Conv2D(128, (3,3), activation=tf.nn.relu,padding = 'Same'),\n    tf.keras.layers.MaxPooling2D(2,2),\n\n    tf.keras.layers.Flatten(),\n\n    tf.keras.layers.Dense(256,activation=tf.nn.relu),\n    tf.keras.layers.Dense(25, activation = tf.nn.softmax)\n])\n\nmodel.summary()","9ea466bb":"y_train_cat = to_categorical(y_train)\ny_test_cat = to_categorical(y_test)\n\ntraining_generator = train_data_gen.flow(x_train, y_train_cat, batch_size=64)\nvalidation_generator = validation_data_gen.flow(x_test, y_test_cat, batch_size=64)\n\nmodel.compile(loss = 'categorical_crossentropy', optimizer= tf.keras.optimizers.Adam(), metrics=['acc'])\n\nlearning_rate_reduction = ReduceLROnPlateau(monitor='val_acc',\n                                            patience=2,\n                                            verbose=1,\n                                            factor=0.5,\n                                            min_lr=0.000003)","f3a78eb7":"history = model.fit(training_generator,\n                    epochs = 40,\n                    verbose = 1,\n                   validation_data = validation_generator,\n                   callbacks=[learning_rate_reduction])","c1160377":"%matplotlib inline\nacc = history.history['acc']\nval_acc = history.history['val_acc']\nloss = history.history['loss']\nval_loss = history.history['val_loss']\n\nepochs = range(len(acc))\n\nplt.plot(epochs, acc, 'r', label='Training accuracy')\nplt.plot(epochs, val_acc, 'b', label='Validation accuracy')\nplt.title('Training and validation accuracy')\nplt.legend()\nplt.figure()\n\nplt.plot(epochs, loss, 'r', label='Training Loss')\nplt.plot(epochs, val_loss, 'b', label='Validation Loss')\nplt.title('Training and validation loss')\nplt.legend()\n\nplt.show()","cda82efe":"%matplotlib inline\nacc = history.history['acc'][13:]\nval_acc = history.history['val_acc'][13:]\nloss = history.history['loss'][13:]\nval_loss = history.history['val_loss'][13:]\n\nepochs = range(13,13+len(acc))\n\nplt.plot(epochs, acc, 'r', label='Training accuracy')\nplt.plot(epochs, val_acc, 'b', label='Validation accuracy')\nplt.title('Training and validation accuracy')\nplt.legend()\nplt.figure()\n\nplt.plot(epochs, loss, 'r', label='Training Loss')\nplt.plot(epochs, val_loss, 'b', label='Validation Loss')\nplt.title('Training and validation loss')\nplt.legend()\n\nplt.show()","985d590a":"get_ipython().run_cell_magic('javascript', '', '<!-- Save the notebook -->\\nIPython.notebook.save_checkpoint();')","909abe75":"# Model Accuracy - 99.9%\n\n- ### CNN Model using Keras tensorflow Backend."}}