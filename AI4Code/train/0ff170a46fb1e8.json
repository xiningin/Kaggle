{"cell_type":{"aba4ca03":"code","55bcb4a3":"code","085b89e9":"code","7af38ae9":"code","206d74ea":"code","26127819":"code","1c8ff639":"code","950aa9db":"code","97cff668":"code","60b2475f":"code","501db85f":"code","e4a7f077":"code","74845400":"code","92aad574":"code","bb44851e":"code","f72ece0f":"code","6831289a":"code","741a195a":"code","569dc280":"code","11c5984b":"code","214c776e":"code","f92ff721":"code","c5b790d6":"code","45f22ba8":"code","f264d373":"code","7572df4e":"code","07853e82":"code","ea52f26e":"code","a9f5e9a0":"code","a73de11f":"code","0a50f987":"code","d997fd72":"code","91d5097a":"markdown","b1c4d014":"markdown","fca664fe":"markdown","5729df9e":"markdown","ece4341b":"markdown","649dc8e8":"markdown","15077b2f":"markdown","5c724846":"markdown","4987119d":"markdown","2e22db66":"markdown","6f1fe57f":"markdown","5b01d21a":"markdown","b2a3bfef":"markdown"},"source":{"aba4ca03":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","55bcb4a3":"import pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\nimport seaborn as sns\nfrom mpl_toolkits.mplot3d import Axes3D","085b89e9":"import plotly.graph_objs as go","7af38ae9":"import seaborn as seabornInstance \nfrom sklearn.model_selection import train_test_split \nfrom sklearn.linear_model import LinearRegression\nfrom sklearn.linear_model import Ridge\nfrom sklearn.linear_model import Lasso\nfrom sklearn.linear_model import ElasticNet\nfrom sklearn.neighbors import KNeighborsRegressor\nfrom sklearn.tree import DecisionTreeRegressor\nfrom sklearn.svm import SVR\nfrom sklearn.ensemble import RandomForestRegressor \nfrom sklearn import metrics\n%matplotlib inline","206d74ea":"df1 = pd.read_csv('\/kaggle\/input\/graduate-admissions\/Admission_Predict.csv')\ndf2 = pd.read_csv('\/kaggle\/input\/graduate-admissions\/Admission_Predict_Ver1.1.csv')","26127819":"frames = [df1, df2]\n\ndf = pd.concat(frames)","1c8ff639":"df=df.drop(['Serial No.'], axis = 1)\ndf","950aa9db":"df.describe()","97cff668":"corrmat = df.corr()\nfig = plt.figure(figsize = (12, 9))\n\nsns.heatmap(corrmat, vmax = .8, square = True, annot = True)\nplt.show()","60b2475f":"query1 = df[df['Chance of Admit ']>0.75]\nquery1","501db85f":"color=['Orange', 'Yellow', 'Green', 'Blue', 'Purple', 'Violet', 'Pink']\ncols = ['GRE Score', 'TOEFL Score', 'University Rating', 'SOP', 'LOR ', 'CGPA', 'Research']\ncols1 = ['GRE Score', 'TOEFL Score', 'University Rating', 'SOP', 'LOR ', 'CGPA', 'Research', 'Chance of Admit ']","e4a7f077":"#univariate analysis\nimport plotly.express as px\nimport plotly.offline as pyoff\nx=0\nfor i in cols1:\n    #df = px.data.tips()\n    fig = px.histogram(df, x=i, nbins=100, opacity=0.8,\n                   color_discrete_sequence=[color[x%7]])\n    fig.show()\n    data = [go.Box(\n        x=df[i],\n        name = i,\n        marker = dict(\n            color = color[x%7],\n        )\n    )]\n    pyoff.iplot(data)\n    x+=1","74845400":"for i in cols:\n    group1=df.groupby([i])['Chance of Admit '].count()\n    lis=list(group1.index)\n    data=[]\n    x=0\n    for j in lis:\n        trace = go.Box(\n            y=df[df[i]==j]['Chance of Admit '],\n            name = j,\n            marker = dict(\n            color = color[x%7],\n            )\n        )\n        x+=1\n        data.append(trace)\n        layout = dict(title = 'Chance of Admit vs '+i,\n              yaxis= dict(title= 'Chance of Admit ',ticklen= 5,zeroline= False),\n              xaxis= dict(title= i, ticklen= 5,zeroline= False)\n             )\n    fig = dict(data = data, layout = layout)\n    pyoff.iplot(fig)","92aad574":"# import graph objects as \"go\"\nimport plotly.graph_objs as go\nimport plotly.offline as pyoff\n# creating trace1\ndata =go.Scatter(\n                    x = df['CGPA'],\n                    y = df['Chance of Admit '],\n                    mode = \"markers\",\n                    name = \"2014\",\n                    marker = dict(color = df['GRE Score'], showscale = True),\n                    text = df['GRE Score']\n                    )\n\n\n\nlayout = dict(title = 'GRE is Highlighted',\n              yaxis= dict(title= 'Chance of Admit ',ticklen= 5,zeroline= False),\n              xaxis= dict(title= 'CGPA',ticklen= 5,zeroline= False)\n             )\nfig = dict(data = data, layout = layout)\npyoff.iplot(fig)","bb44851e":"# import graph objects as \"go\"\nimport plotly.graph_objs as go\nimport plotly.offline as pyoff\n# creating trace1\ndata =go.Scatter(\n                    x = df['CGPA'],\n                    y = df['Chance of Admit '],\n                    mode = \"markers\",\n                    name = \"2014\",\n                    marker = dict(color = df['SOP'], showscale = True),\n                    text = df['SOP']\n                    )\n\n\n\nlayout = dict(title = 'With SOP',\n              yaxis= dict(title= 'Chance of Admit ',ticklen= 5,zeroline= False),\n              xaxis= dict(title= 'CGPA',ticklen= 5,zeroline= False)\n             )\nfig = dict(data = data, layout = layout)\npyoff.iplot(fig)","f72ece0f":"# import graph objects as \"go\"\nimport plotly.graph_objs as go\nimport plotly.offline as pyoff\n# creating trace1\ndata =go.Scatter(\n                    x = df['CGPA'],\n                    y = df['Chance of Admit '],\n                    mode = \"markers\",\n                    name = \"2014\",\n                    marker = dict(color = df['University Rating'], showscale = True),\n                    text = df['University Rating']\n                    )\n\n\n\nlayout = dict(title = 'With University Rating',\n              yaxis= dict(title= 'Chance of Admit ',ticklen= 5,zeroline= False),\n              xaxis= dict(title= 'CGPA',ticklen= 5,zeroline= False)\n             )\nfig = dict(data = data, layout = layout)\npyoff.iplot(fig)","6831289a":"# import graph objects as \"go\"\nimport plotly.graph_objs as go\nimport plotly.offline as pyoff\n# creating trace1\ndata =go.Scatter(\n                    x = df['CGPA'],\n                    y = df['Chance of Admit '],\n                    mode = \"markers\",\n                    name = \"2014\",\n                    marker = dict(color = df['Research'], showscale = True),\n                    text = df['Research']\n                    )\n\n\n\nlayout = dict(title = 'With Research',\n              yaxis= dict(title= 'Chance of Admit ',ticklen= 5,zeroline= False),\n              xaxis= dict(title= 'CGPA',ticklen= 5,zeroline= False)\n             )\nfig = dict(data = data, layout = layout)\npyoff.iplot(fig)","741a195a":"x=0\nfor i in cols:\n    plot_data = [\n        go.Scatter(\n            x=df[i],\n            y=df['Chance of Admit '],\n            mode = \"markers\",\n            name=i,\n            marker = dict(color = color[x])\n\n            ),\n        go.Scatter(\n            x=query1[i],\n            y=query1['Chance of Admit '],\n            mode = \"markers\",\n            name='> 75% Chance',\n            marker = dict(color = 'Red')\n\n            ),\n\n    ]\n    plot_layout = go.Layout(\n            #title=i,\n            yaxis_title='Chance of Admit ',\n            xaxis_title=i\n        )\n    fig = go.Figure(data=plot_data, layout=plot_layout)\n    pyoff.iplot(fig)\n    x+=1","569dc280":"X = df.drop(['Chance of Admit '], axis=1).values\ny = df['Chance of Admit '].values","11c5984b":"X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=0)","214c776e":"model_ = []","f92ff721":"lr = LinearRegression()  \nlr.fit(X_train, y_train)\ny_pred = lr.predict(X_test)\nprint('Root Mean Squared Error for LinearRegression:', np.sqrt(metrics.mean_squared_error(y_test, y_pred)))\nmodel_.append(['LinearRegression', np.sqrt(metrics.mean_squared_error(y_test, y_pred))])\nlasso = Lasso()  \nlasso.fit(X_train, y_train)\ny_pred = lasso.predict(X_test)\nprint('Root Mean Squared Error for lasso:', np.sqrt(metrics.mean_squared_error(y_test, y_pred)))\nmodel_.append(['Lasso', np.sqrt(metrics.mean_squared_error(y_test, y_pred))])\nridge = Ridge()  \nridge.fit(X_train, y_train)\ny_pred = ridge.predict(X_test)\nprint('Root Mean Squared Error for ridge:', np.sqrt(metrics.mean_squared_error(y_test, y_pred)))\nmodel_.append(['Ridge', np.sqrt(metrics.mean_squared_error(y_test, y_pred))])\nen = ElasticNet()  \nen.fit(X_train, y_train)\ny_pred = en.predict(X_test)\nprint('Root Mean Squared Error for ElasticNet:', np.sqrt(metrics.mean_squared_error(y_test, y_pred)))\nmodel_.append(['ElasticNet', np.sqrt(metrics.mean_squared_error(y_test, y_pred))])\nknn = KNeighborsRegressor()  \nknn.fit(X_train, y_train)\ny_pred = knn.predict(X_test)\nprint('Root Mean Squared Error for knn:', np.sqrt(metrics.mean_squared_error(y_test, y_pred)))\nmodel_.append(['knn', np.sqrt(metrics.mean_squared_error(y_test, y_pred))])\ndt = DecisionTreeRegressor()  \ndt.fit(X_train, y_train)\ny_pred = dt.predict(X_test)\nprint('Root Mean Squared Error for DecisionTree:', np.sqrt(metrics.mean_squared_error(y_test, y_pred)))\nmodel_.append(['DecisionTree', np.sqrt(metrics.mean_squared_error(y_test, y_pred))])\nsvm = SVR()  \nsvm.fit(X_train, y_train)\ny_pred = svm.predict(X_test)\nprint('Root Mean Squared Error for svm:', np.sqrt(metrics.mean_squared_error(y_test, y_pred)))\nmodel_.append(['svm', np.sqrt(metrics.mean_squared_error(y_test, y_pred))])\nrf = RandomForestRegressor(n_estimators = 100, random_state = 0)   \nrf.fit(X_train, y_train)\ny_pred = rf.predict(X_test)\nprint('Root Mean Squared Error for RandomForest:', np.sqrt(metrics.mean_squared_error(y_test, y_pred)))\nmodel_.append(['RandomForest', np.sqrt(metrics.mean_squared_error(y_test, y_pred))])","c5b790d6":"models = pd.DataFrame(model_,columns=['Model', 'RMSE'])","45f22ba8":"models=models.sort_values(by=['RMSE'])","f264d373":"models=models.reset_index()","7572df4e":"models","07853e82":"import plotly.express as px\nfig = px.bar(models, x=\"Model\", y=\"RMSE\", color='Model')\nfig.show()","ea52f26e":"my_chance1=[315, 105, 4, 4, 4, 9.5, 1]","a9f5e9a0":"creds=np.array(my_chance1)","a73de11f":"my_chance=creds.reshape(-1, 7)","0a50f987":"My_prediced_chance = rf.predict(my_chance)","d997fd72":"My_prediced_chance","91d5097a":"Since CGPA has the highest corretation with 'Chance of Admit'\nBivariate Scatter Plots are done along with highlighting other Parameters that could possibly impact 'Chance of Admit'","b1c4d014":"Univariate Analysis on all the Parameters","fca664fe":"Heat Map","5729df9e":"Predicting My chance accoring to my Credentials.","ece4341b":"Predictive Modeling","649dc8e8":"With a Gre score of 315, TOEFL score of 105, University Rating of 4, SOP of score 4, 4 LORs, CGPA of 9.5 and having research papers, What are the chances of me getting into my dream University?  ","15077b2f":"Bivariate Scatter Plots against 'Chances of Admit'","5c724846":"Using Regression Algorithms","4987119d":"To Compare all the rmse values for each model.","2e22db66":"Perhaps, My chance could be 89.3% to get into my dream University. ","6f1fe57f":"BoxPlot of all the Params against 'Chance of Admit'","5b01d21a":"RandomForest showed the least RMSE value (0.0397)","b2a3bfef":"To find all the chances that are above 75%"}}