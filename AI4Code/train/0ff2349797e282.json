{"cell_type":{"c00b8069":"code","0a21d9c0":"code","68e275ed":"code","ce0e2205":"code","699490ee":"code","a71dd85e":"code","c3731a10":"code","767cec52":"code","0f399661":"code","b7371186":"code","80b1e7d5":"code","a708f9f6":"code","d9acc9c3":"code","7c0fffc6":"code","826b84d0":"code","73ece6a9":"code","a00bf6e0":"code","3666d124":"code","1fbe49d7":"code","6c66ea2a":"code","edc94731":"markdown","54a01337":"markdown","c20b6cb5":"markdown","3c546090":"markdown","1224dc2f":"markdown","3f217ac1":"markdown","2d7d603e":"markdown","af2e866a":"markdown","603755d1":"markdown"},"source":{"c00b8069":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","0a21d9c0":"# Read Training dataset as well as drop the index column\ntraining_data = pd.read_csv('\/kaggle\/input\/give-me-some-credit-dataset\/cs-training.csv').drop('Unnamed: 0', axis=1)\nprint(f'training_data.shape : {training_data.shape}')","68e275ed":"training_data.head()","ce0e2205":"# For each column heading we replace \"-\" and convert the heading in lowercase \ncleancolumn = []\nfor i in range(len(training_data.columns)):\n    cleancolumn.append(training_data.columns[i].replace('-', '').lower())\ntraining_data.columns = cleancolumn","699490ee":"training_data.head()","a71dd85e":"print(cleancolumn)","c3731a10":"training_data.info()","767cec52":"training_data.describe()","0f399661":"training_data.median()","b7371186":"sns.countplot(training_data['seriousdlqin2yrs'])\nplt.show()\nprint(training_data['seriousdlqin2yrs'].value_counts() \/ len(training_data['seriousdlqin2yrs']) * 100)","80b1e7d5":"plt.title('missing values')\nsns.barplot(y=training_data.columns, x=training_data.isnull().sum().values)\nplt.show()\nprint(training_data.isnull().sum())","a708f9f6":"# imputing missing values - with mean\ntraining_data_mean_replace = training_data.fillna(training_data.mean())\ntraining_data_mean_replace.isnull().sum()","d9acc9c3":"# imputing missing values - with median\ntraining_data_median_replace = training_data.fillna(training_data.median())\ntraining_data_median_replace.isnull().sum()","7c0fffc6":"plt.figure(figsize=(11,8))\nsns.heatmap(training_data_median_replace.corr(), annot=True)\nplt.show()","826b84d0":"def percentile_based_outlier(data, threshold=95):\n    diff = (100 - threshold) \/ 2.0\n    (minval, maxval) = np.percentile(data, [diff, 100 - diff])\n    return ((data < minval) | (data > maxval))","73ece6a9":"def mad_based_outlier(points, threshold=3.5):\n    if len(points.shape) == 1:\n        points = points[:, None]\n    median_y = np.median(points)\n    mad = np.median([np.abs(y - meidan_y) for y in points])\n    modified_z_scores = np.abs([0.6745 * (y - median_y) \/ mad for y in points])        \n    return modified_z_scores > threshold","a00bf6e0":"def std_div(data, threshold=3):\n    std = data.std()\n    mean = data.mean()\n    isOutlier = []\n    for val in data:\n        if val\/std > threshold:\n            isOutlier.append(True)\n        else:\n            isOutlier.append(False)\n    return isOutlier    ","3666d124":"def outlierVote(data):\n    x = percentile_based_outlier(data)\n    y = mad_based_outlier(data)\n    z = std_div(data)\n    temp = zip(data.index, x, y, z)\n    final = []\n    for i in range(len(temp)):\n        if temp[i].count(False) >= 2:\n            final.append(False)\n        else:\n            final.append(True)\n    return final","1fbe49d7":"def plotOutlier(x):\n    fig, axes = plt.subplots(nrows=4)\n    \n    for ax, func in zip(axes, [percentile_based_outlier, mad_based_outlier, std_div, outlierVote]):\n        sns.distplot(x, ax=ax, rug=True, hist=False)\n        outliers = x[func(x)]\n        ","6c66ea2a":"np.zeros_like()","edc94731":"### Statistical Properties","54a01337":"### Missing values","c20b6cb5":"# ML Solution - Credit Risk Modeling\n\n- reference notebook : https:\/\/github.com\/jalajthanaki\/credit-risk-modelling\n- dataset : https:\/\/www.kaggle.com\/brycecf\/give-me-some-credit-dataset\n","3c546090":"### Outlier","1224dc2f":"### target label","3f217ac1":"## 2. EDA (Exploratory Data Analysis)","2d7d603e":"## 1. Preprocessing","af2e866a":"### Correlation","603755d1":"- target label's class imbalance"}}