{"cell_type":{"9f65e57b":"code","1f0fe442":"code","e5b72a6a":"code","92d2d3ce":"code","5539073b":"code","658c664c":"code","e2115efa":"code","1a59d45a":"code","d78c39b7":"code","2efb2bf8":"code","d69e3b9b":"code","c18acc83":"code","94120b33":"code","90984649":"code","bb879e74":"code","265f6922":"code","f4b61790":"code","23aaa7a3":"code","62caf458":"code","54e88cb7":"code","0d0ffdfd":"code","29b5aaec":"code","508410ad":"code","89b3164d":"code","57f59cea":"code","612da718":"code","33e216e5":"code","b0600e9a":"code","de156c9d":"code","446cc91b":"code","575d86e6":"code","0324dec5":"code","2d894ce0":"code","34c6fe8f":"code","afa2484c":"code","41fef7ca":"code","09b5b721":"code","3ec1ac7a":"code","1dd8a316":"code","502ece42":"code","56cd454b":"code","48519bf0":"code","105bd188":"code","c4c41329":"code","16d79dd5":"code","bd9869cd":"code","4355042e":"code","b86a6bc9":"code","764ba6ef":"code","8d967d6f":"code","0f7e46e0":"code","2f9ea408":"code","d3404db3":"code","2e0421d6":"code","c7108757":"code","9e333344":"code","4d7b5f0d":"code","8a8c71ae":"code","a2763d3f":"code","135f3b89":"code","911c5c53":"code","68ad8c1e":"code","467ad199":"code","1b01806d":"code","4eb6c476":"code","5bc6bd10":"code","1a152162":"code","a58f7b27":"code","97d75c55":"code","117b38d5":"code","8120eb7f":"code","50476161":"code","d1aa3a7b":"code","bae416eb":"code","df467fc1":"code","29475fb7":"code","e297f7e5":"code","97f3591b":"code","5e91b7e8":"code","abd0686a":"code","c51058e0":"code","1abcf740":"code","ca1d0c08":"code","7d320424":"code","ee288570":"code","dac6e447":"code","6030dc76":"code","dd1cd8a0":"code","bd8c18ba":"code","2770b446":"code","71add754":"code","47613e9a":"code","4fbfbd90":"code","49627c22":"code","22fd4435":"code","e409e171":"code","d05d42c3":"code","53087012":"code","1871141d":"code","2990a2d5":"code","73b7ec7c":"code","e2021dab":"code","b711dad1":"code","dd05cb7a":"code","6fe0c34d":"code","98ffb0cf":"code","ef8ab4ed":"code","81dc9f12":"code","5a1d417a":"markdown","b351bb87":"markdown","537e61e7":"markdown","ab8e7c59":"markdown","d428c9cf":"markdown","ef9387ba":"markdown","5d2e694b":"markdown","0d5e97bb":"markdown","6a2b3724":"markdown","d9bb8df1":"markdown","db652f78":"markdown","3b71f31f":"markdown","7af2a882":"markdown","6e245203":"markdown","da441ece":"markdown","0bef646c":"markdown","6bc1523e":"markdown","349b1eb3":"markdown","4391b3f5":"markdown","f73ad45e":"markdown","91a177d6":"markdown","3366a540":"markdown","d099cd95":"markdown","2abca827":"markdown","38038193":"markdown","1f872fa7":"markdown","1e83933a":"markdown","4954f23e":"markdown","8ea72741":"markdown","f83e157e":"markdown","4d6ec5b2":"markdown","8e70993e":"markdown","477416b9":"markdown","e0f44fdd":"markdown","cc4f89f8":"markdown","50a5f593":"markdown","d18c7526":"markdown","bcf19ff6":"markdown","8b478fd5":"markdown","4d07bca5":"markdown","b0bf96e4":"markdown","8e119ac8":"markdown","ad7da719":"markdown","df9b7bc2":"markdown","4e7ef7eb":"markdown","adde4caa":"markdown","860fc943":"markdown","f2208297":"markdown","3ae4f9d0":"markdown","ec763d99":"markdown","7ebd0375":"markdown","df981d2d":"markdown","63281be8":"markdown","1b6e14cc":"markdown","c4a609ae":"markdown","af42bd98":"markdown","b407bab7":"markdown","38fda88b":"markdown","a54bfd1b":"markdown"},"source":{"9f65e57b":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n# plotly\nfrom plotly.offline import init_notebook_mode, iplot, plot\ninit_notebook_mode(connected=True)\nimport plotly.graph_objects as go # visualization\nimport plotly.express as pe       # visualization\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session\n","1f0fe442":"df = pd.read_csv('\/kaggle\/input\/t20-cricket-world-cup-2007-to-2016-dataset\/t20wc.csv')","e5b72a6a":"df.head()","92d2d3ce":"df.tail()","5539073b":"df.shape","658c664c":"df.size","e2115efa":"df.info()","1a59d45a":"df.isnull()","d78c39b7":"df.isnull().sum()","2efb2bf8":"df.describe()","d69e3b9b":"# Convert B,4s,6s,SR columns to numerical columns\ndf.info()","c18acc83":"# function to convert str to int \ndef num(x):\n    if x != '-':\n        return int(x)\n    else:\n        return 0\n    \n# function to convert str to float   \ndef numfloat(x):\n    if x != '-':\n        return float(x)\n    else:\n        return 0","94120b33":"# coverting to numerical columns\ndf['6s']= df['6s'].apply(num)\ndf['4s']= df['4s'].apply(num)\ndf['SR']= df['SR'].apply(numfloat)","90984649":"df['B']= df['B'].apply(num)","bb879e74":"# COnversion completed\ndf.info()","265f6922":"# function for finding name of wicket taken by bowler from wicket column\nimport re\ndef bowler(t):\n    if 'b' in t:\n        i = re.search('b ',t)\n        try:\n            ind = i.end()\n            return (t[ind::])\n        except:\n            pass\n    \n    else:\n        return t","f4b61790":"# function for finding name of catch taken by fielder from wicket column\n\ndef catch(t):\n    if 'c & b' in t:\n        i = re.search('c & b',t)\n        return t[i.end()+1::]\n        \n    \n    elif 'c' in t:\n        try:\n            c = re.search('c ',t)\n            b = re.search('b ',t)\n            return t[c.end():b.start()-1]\n        except:\n            pass\n    else:\n        return '-'\n","23aaa7a3":"# function for finding batsman runout or not from wicket column\n\ndef runout(t):\n    if 'run out' in t:\n        return 'Run Out'\n    else:\n        return '-'\n    ","62caf458":"# function for finding team won from Winner column\ndef won(t):\n    if 'won' in t:\n        i = re.search('won',t)\n        return t[:i.start()-1]\n    else:\n        return t\n","54e88cb7":"# apply function to winner column and create new won column\ndf['Won'] = df['Winner'].apply(won)","0d0ffdfd":"# apply function to Wicket column and create new runout column\ndf['Run Out'] = df['Wicket'].apply(runout)","29b5aaec":"# apply function to Wicket column and create new catched taken by column\ndf['Catched By'] = df['Wicket'].apply(catch)","508410ad":"# apply function to Wicket column and create new bowler column\ndf['Bowler'] = df['Wicket'].apply(bowler)","89b3164d":"# won column has match tied and won by that team records find won team from it\ndef winner(t):\n    if 'Match tied' in t:\n        i = re.search('\\(',t)\n        return t[i.end()::]\n    else:\n        return t","57f59cea":"df['Won'] = df['Won'].apply(winner)","612da718":"df.info()","33e216e5":"df.head()","b0600e9a":"df.describe()","de156c9d":"runs=df.groupby('Batsman')['R'].sum()\nmost_runsalltime = runs.sort_values(ascending=False).reset_index()\nmost_runsalltime[1:11]","446cc91b":"df['Season'].unique()","575d86e6":"dfrecent = df[df['Season']>2010]","0324dec5":"runs=dfrecent.groupby('Batsman')['R'].sum()\nmost_runsr = runs.sort_values(ascending=False).reset_index()\nmost_runsr[1:11]","2d894ce0":"dffirst = df[df['Season']<2011]","34c6fe8f":"runs=dffirst.groupby('Batsman')['R'].sum()\nmost_runsf = runs.sort_values(ascending=False).reset_index()\nmost_runsf[1:11]","afa2484c":"# mosts run in respective seasons\n\na16 = df[df['Season']==2016].groupby(['Season','Batsman'])['R'].sum()\nr16 = a16.sort_values(ascending=False).reset_index()\n\na14 = df[df['Season']==2014].groupby(['Season','Batsman'])['R'].sum()\nr14 = a14.sort_values(ascending=False).reset_index()\n\na12 = df[df['Season']==2012].groupby(['Season','Batsman'])['R'].sum()\nr12 = a12.sort_values(ascending=False).reset_index()\n\na10 = df[df['Season']==2010].groupby(['Season','Batsman'])['R'].sum()\nr10 = a10.sort_values(ascending=False).reset_index()\n\na9 = df[df['Season']==2009].groupby(['Season','Batsman'])['R'].sum()\nr9 = a9.sort_values(ascending=False).reset_index()\n\na7 = df[df['Season']==2007].groupby(['Season','Batsman'])['R'].sum()\nr7 = a7.sort_values(ascending=False).reset_index()","41fef7ca":"xdata1 = most_runsalltime[1:11]['Batsman']\nydata1 = most_runsalltime[1:11]['R']\n\nxdata2 = most_runsf[1:11]['Batsman']\nydata2 = most_runsf[1:11]['R']\n\nxdata3 = most_runsr[1:11]['Batsman']\nydata3 = most_runsr[1:11]['R']\n\nxdata4 = [r16[1:2].values[0][1]+' '+str(r16[1:2].values[0][0]),\n         r14[1:2].values[0][1]+' '+str(r14[1:2].values[0][0]),\n         r12[1:2].values[0][1]+' '+str(r12[1:2].values[0][0]),\n         r10[1:2].values[0][1]+' '+str(r10[1:2].values[0][0]),\n         r9[1:2].values[0][1]+' '+str(r9[1:2].values[0][0]),\n         r7[1:2].values[0][1]+' '+str(r7[1:2].values[0][0])]\n\n\nydata4 = [r16[1:2].values[0][2],\n         r14[1:2].values[0][2],\n         r12[1:2].values[0][2],\n         r10[1:2].values[0][2],\n         r9[1:2].values[0][2],\n         r7[1:2].values[0][2]]\n","09b5b721":"# most balls faced in 2016\nb16 = df[df['Season']==2016].groupby(['Season','Batsman'])['B'].sum()\nb16 = b16.sort_values(ascending=False).reset_index()\nb16.head(10)","3ec1ac7a":"# Most Balls faced (Each Season)","1dd8a316":"# most balls faced in 2016\nb16 = df[df['Season']==2016].groupby(['Season','Batsman'])['B'].sum()\nb16 = b16.sort_values(ascending=False).reset_index()\n\nb14 = df[df['Season']==2014].groupby(['Season','Batsman'])['B'].sum()\nb14 = b14.sort_values(ascending=False).reset_index()\n\nb12 = df[df['Season']==2012].groupby(['Season','Batsman'])['B'].sum()\nb12 = b12.sort_values(ascending=False).reset_index()\n\nb10 = df[df['Season']==2010].groupby(['Season','Batsman'])['B'].sum()\nb10 = b10.sort_values(ascending=False).reset_index()\n\nb9 = df[df['Season']==2009].groupby(['Season','Batsman'])['B'].sum()\nb9 = b9.sort_values(ascending=False).reset_index()\n\nb7 = df[df['Season']==2007].groupby(['Season','Batsman'])['B'].sum()\nb7 = b7.sort_values(ascending=False).reset_index()\n","502ece42":"# most balls faced all time\nballtime=df.groupby('Batsman')['B'].sum()\nballtimedf=balltime.sort_values(ascending=False).reset_index()","56cd454b":"# most sixes all time\ns6 = df.groupby('Batsman')['6s'].sum()\nsix = s6.sort_values(ascending=False).reset_index()\nsix.head(10)","48519bf0":"# most 6s in first 3 season\ndffirst['Season'].unique()","105bd188":"s6f = dffirst.groupby('Batsman')['6s'].sum()\nsixf = s6f.sort_values(ascending=False).reset_index()\nsixf.head(10)","c4c41329":"dfrecent['Season'].unique()","16d79dd5":"s6last = dfrecent.groupby('Batsman')['6s'].sum()\nsixl = s6last.sort_values(ascending=False).reset_index()\nsixl.head(10)","bd9869cd":"s16 = df[df['Season']==2016].groupby(['Season','Batsman'])['6s'].sum()\nsix16 = s16.sort_values(ascending=False).reset_index()\n\ns14 = df[df['Season']==2014].groupby(['Season','Batsman'])['6s'].sum()\nsix14 = s14.sort_values(ascending=False).reset_index()\n\ns12 = df[df['Season']==2012].groupby(['Season','Batsman'])['6s'].sum()\nsix12 = s12.sort_values(ascending=False).reset_index()\n\ns10 = df[df['Season']==2010].groupby(['Season','Batsman'])['6s'].sum()\nsix10 = s10.sort_values(ascending=False).reset_index()\n\ns9 = df[df['Season']==2009].groupby(['Season','Batsman'])['6s'].sum()\nsix9 = s9.sort_values(ascending=False).reset_index()\n\ns7 = df[df['Season']==2007].groupby(['Season','Batsman'])['6s'].sum()\nsix7 = s7.sort_values(ascending=False).reset_index()","4355042e":"# most sixes all time\nf = df.groupby('Batsman')['4s'].sum()\nf4 = f.sort_values(ascending=False).reset_index()\nf4.head(10)","b86a6bc9":"ff = dffirst.groupby('Batsman')['4s'].sum()\nf4f = ff.sort_values(ascending=False).reset_index()\nf4f.head(10)","764ba6ef":"fl = dfrecent.groupby('Batsman')['4s'].sum()\nf4l = fl.sort_values(ascending=False).reset_index()\nf4l.head(10)\n","8d967d6f":"f16 = df[df['Season']==2016].groupby(['Season','Batsman'])['4s'].sum()\nf416 = f16.sort_values(ascending=False).reset_index()\n\nf14 = df[df['Season']==2014].groupby(['Season','Batsman'])['4s'].sum()\nf414 = f14.sort_values(ascending=False).reset_index()\n\nf12 = df[df['Season']==2012].groupby(['Season','Batsman'])['4s'].sum()\nf412 = f12.sort_values(ascending=False).reset_index()\n\nf10 = df[df['Season']==2010].groupby(['Season','Batsman'])['4s'].sum()\nf410 = f10.sort_values(ascending=False).reset_index()\n\ns9 = df[df['Season']==2009].groupby(['Season','Batsman'])['4s'].sum()\nf49 = s9.sort_values(ascending=False).reset_index()\n\ns7 = df[df['Season']==2007].groupby(['Season','Batsman'])['4s'].sum()\nf47 = s7.sort_values(ascending=False).reset_index()\n\nf416\nf416[0:1].values[0][1]\nstr(six16[0:1].values[0][0])","0f7e46e0":"xdata4 = [f416[0:1].values[0][1]+' '+str(f416[0:1].values[0][0]),\n         f414[0:1].values[0][1]+' '+str(f414[0:1].values[0][0]),\n         f412[0:1].values[0][1]+' '+str(f412[0:1].values[0][0]),\n         f410[0:1].values[0][1]+' '+str(f410[0:1].values[0][0]),\n         f49[0:1].values[0][1]+' '+str(f49[0:1].values[0][0]),\n         f47[0:1].values[0][1]+' '+str(f47[0:1].values[0][0])]","2f9ea408":"xdata6 = [six16[0:1].values[0][1]+' '+str(six16[0:1].values[0][0]),\n         six14[0:1].values[0][1]+' '+str(six14[0:1].values[0][0]),\n         six12[0:1].values[0][1]+' '+str(six12[0:1].values[0][0]),\n         six10[0:1].values[0][1]+' '+str(six10[0:1].values[0][0]),\n         six9[0:1].values[0][1]+' '+str(six9[0:1].values[0][0]),\n         six7[0:1].values[0][1]+' '+str(six7[0:1].values[0][0])]\n","d3404db3":"df['Match'].unique()","2e0421d6":"dfknockout=df[df['Match'].isin([' 1st Semi-Final - Live Cricket Score',' 1st Semi-final - Live Cricket Score',\n                    ' 2nd Semi-Final - Live Cricket Score',' 1st Semi Final - Live Cricket Score',\n                    ' 2nd Semi-final - Live Cricket Score',' 2nd Semi Final - Live Cricket Score',\n                    ' Final - Live Cricket Score'])]","c7108757":"# most runs in knockouts\nknockoutruns = dfknockout.groupby('Batsman')['R'].sum()\nknockoutrunsdf=knockoutruns.sort_values(ascending=False).reset_index()\nknockoutrunsdf[1:11]\n","9e333344":"ko6 = dfknockout.groupby('Batsman')['6s'].sum()\nkosix = ko6.sort_values(ascending=False).reset_index()\nkosix.head(10)\n","4d7b5f0d":"ko4 = dfknockout.groupby('Batsman')['4s'].sum()\nkof4 = ko4.sort_values(ascending=False).reset_index()\nkof4.head(10)","8a8c71ae":"dffinal=df[df['Match'].isin([' Final - Live Cricket Score'])]","a2763d3f":"# most runs in finals\nfinalruns = dffinal.groupby('Batsman')['R'].sum()\nfinalrunsdf=finalruns.sort_values(ascending=False).reset_index()\nfinalrunsdf=finalrunsdf[finalrunsdf['R']!=79]\nfinalrunsdf.head(10)","135f3b89":"final4 = dffinal.groupby('Batsman')['4s'].sum()\nfinal4s = final4.sort_values(ascending=False).reset_index()\nfinal4s.head(10)\nfinalrunsdf.head(10)","911c5c53":"final6 = dffinal.groupby('Batsman')['6s'].sum()\nfinal6s = final6.sort_values(ascending=False).reset_index()\nfinal6s.head(10)\nfinal4s.head(10)\nfinalrunsdf.head(10)","68ad8c1e":"sr16 = df[df['Season']==2016].groupby('Batsman')[['R','B']].sum().reset_index()\nsr16['SR'] = sr16['R']\/sr16['B']*100\nsr16=sr16.sort_values(ascending=False,by='SR')\nsr16[sr16['R']>50][1:11]","467ad199":"sr14 = df[df['Season']==2014].groupby('Batsman')[['R','B']].sum().reset_index()\nsr14['SR'] = sr14['R']\/sr14['B']*100\nsr14=sr14.sort_values(ascending=False,by='SR')\nsr14[sr14['R']>50][1:11]","1b01806d":"sr12 = df[df['Season']==2012].groupby('Batsman')[['R','B']].sum().reset_index()\nsr12['SR'] = sr12['R']\/sr12['B']*100\nsr12=sr12.sort_values(ascending=False,by='SR')\nsr12[sr12['R']>50][1:11]","4eb6c476":"sr10 = df[df['Season']==2010].groupby('Batsman')[['R','B']].sum().reset_index()\nsr10['SR'] = sr10['R']\/sr10['B']*100\nsr10=sr10.sort_values(ascending=False,by='SR')\nsr10[sr10['R']>50][1:11]","5bc6bd10":"sr9 = df[df['Season']==2009].groupby('Batsman')[['R','B']].sum().reset_index()\nsr9['SR'] = sr9['R']\/sr9['B']*100\nsr9=sr9.sort_values(ascending=False,by='SR')\nsr9[sr9['R']>50][1:11]","1a152162":"sr7 = df[df['Season']==2007].groupby('Batsman')[['R','B']].sum().reset_index()\nsr7['SR'] = sr7['R']\/sr7['B']*100\nsr7=sr7.sort_values(ascending=False,by='SR')\nsr7[sr7['R']>50][1:11]","a58f7b27":"srall = df.groupby('Batsman')[['R','B']].sum().reset_index()\nsrall['SR'] = srall['R']\/srall['B']*100\nsrall=srall.sort_values(ascending=False,by='SR')\nsrall[srall['R']>=100][1:11]","97d75c55":"srfinal = dffinal.groupby('Batsman')[['R','B']].sum().reset_index()\nsrfinal['SR'] = srfinal['R']\/srfinal['B']*100\nsrfinal=srfinal.sort_values(ascending=False,by='SR')\nsrfinal[srfinal['R']>=50][1:11]\nfinal6s.head(10)\nfinal4s.head(10)\nfinalrunsdf.head(10)","117b38d5":"srknockout = dfknockout.groupby('Batsman')[['R','B']].sum().reset_index()\nsrknockout['SR'] = srknockout['R']\/srknockout['B']*100\nsrknockout=srknockout.sort_values(ascending=False,by='SR')\nsrknockout[srknockout['R']>=50][1:11]\n","8120eb7f":"wic16 = df[df['Season']==2016]['Bowler'].value_counts().reset_index()\n\nwic14 = df[df['Season']==2014]['Bowler'].value_counts().reset_index()\n\nwic12 = df[df['Season']==2012]['Bowler'].value_counts().reset_index()\n\nwic10 = df[df['Season']==2010]['Bowler'].value_counts().reset_index()\n\nwic9 = df[df['Season']==2009]['Bowler'].value_counts().reset_index()\n\nwic7 = df[df['Season']==2007]['Bowler'].value_counts().reset_index()","50476161":"wicall=df['Bowler'].value_counts().reset_index()\nwicall[2:7]","d1aa3a7b":"wicf=dffirst['Bowler'].value_counts().reset_index().head(10)","bae416eb":"wicr=dfrecent['Bowler'].value_counts().reset_index().head(10)\nwicr[2:7]","df467fc1":"m100s= df.groupby(['Season','Matchid','Batsman'])[\"R\"].sum().reset_index()\nm100s[m100s['R']>99]['Batsman'].value_counts()\n","29475fb7":"m50sknockout= dfknockout.groupby(['Season','Matchid','Batsman'])[\"R\"].sum().reset_index()\nm50sknockout[m50sknockout['R']>49]['Batsman'].value_counts()","e297f7e5":"m50s= df.groupby(['Season','Matchid','Batsman'])[\"R\"].sum().reset_index()\nm50s[m50s['R']>49]['Batsman'].value_counts().head(10)\n","97f3591b":"m0s= df.groupby(['Season','Matchid','Batsman'])[\"R\"].sum().reset_index()\nm0s[m0s['R']==0]['Batsman'].value_counts().head(10)","5e91b7e8":"m0sknockout= dfknockout.groupby(['Season','Matchid','Batsman'])[\"R\"].sum().reset_index()\nm0sknockout[m0sknockout['R']==0]['Batsman'].value_counts().head(10)","abd0686a":"ro = df[df['Run Out']=='Run Out']['Batsman'].value_counts().head(10)\n","c51058e0":"# most wins\nwins = df.groupby(['Season','Matchid'])['Won'].unique().value_counts().reset_index()\n","1abcf740":"hs = df.groupby(['Matchid','Batsman'])['R'].max()\nhighscore=hs.sort_values(ascending=False).head(5)\nhighscore","ca1d0c08":"cat = df['Catched By'].value_counts().reset_index()","7d320424":"mostno =df[df['Bowler']=='not out'].groupby('Batsman')['Bowler'].value_counts()\nmostno=mostno.sort_values(ascending=False).head(10)\nmostno.index\nmostno.values\n","ee288570":"ts = df.groupby(['Season','Matchid','Innings','Team'])['R'].sum()\nts = ts.sort_values(ascending=False).reset_index()\nts.head(10)","dac6e447":"ts200=ts[ts['R']>199]['Team'].value_counts().reset_index()\nts200","6030dc76":"a = df[df['Team']=='India Innings'].groupby('Batsman')['R'].sum()\nind = a.sort_values(ascending=False).reset_index()\nind = ind[(ind['R']!=262)&ind['R']>0]\n#ind","dd1cd8a0":"# Total runs by indian team\nplot6 = pe.pie(ind, values='R', names='Batsman', title='Indian Team Total Runs')\nplot6","bd8c18ba":"s = df[df['Team']=='India Innings'].groupby('Batsman')['6s'].sum()\ninds = s.sort_values(ascending=False).reset_index()\ninds=inds[inds['6s']>0]","2770b446":"# Total 6s by indian team\nplot7 = pe.pie(inds, values='6s', names='Batsman', title='Indian Team Total 6s')","71add754":"f = df[df['Team']=='India Innings'].groupby('Batsman')['4s'].sum()\nindf = f.sort_values(ascending=False).reset_index()\nindf=indf[indf['4s']>0]\n# Total 4s by indian team\nplot8 = pe.pie(indf, values='4s', names='Batsman', title='Indian Team Total 4s')","47613e9a":"# calculating 50s by indian players\nr50=df[df['Team']=='India Innings'].groupby(['Matchid','Innings','Batsman'])['R'].sum()","4fbfbd90":"runs50up=r50.sort_values(ascending=False).reset_index()\ntotal50=runs50up[runs50up['R']>49]['Batsman'].value_counts().reset_index()","49627c22":"# Total 50s by indian team\n\nplot9 = pe.pie(total50, values='Batsman', names='index', title='Indian Team Most 50s')","22fd4435":"import plotly.graph_objects as px\nplot = go.Figure(data=[go.Bar(\n    name='Most Runs in Finals',\n    x=finalrunsdf[0:10]['Batsman'],\n    y=finalrunsdf[0:10]['R']\n),\n    go.Bar(\n    name='Most 6s in Finals',\n    x=final6s[0:10]['Batsman'],\n    y=final6s[0:10]['6s']\n),\n    go.Bar(\n    name='Most 4s in Finals',\n    x=final4s[0:10]['Batsman'],\n    y=final4s[0:10]['4s']\n\n),\n    go.Bar(\n    name='Best SR in Finals (Min 50 Runs)',\n    x=srfinal[srfinal['R']>=50][1:11]['Batsman'],\n    y=srfinal[srfinal['R']>=50][1:11]['SR']\n)                       \n                       \n])\n\n\n# Add dropdown\nplot.update_layout(\n    updatemenus=[\n        dict(\n            active=0,\n            buttons=list([\n                dict(label=\"T20 WC Records in Finals\",\n                    method=\"update\",\n                    args=[{\"visible\": [True]},\n                        {\"title\": \"T20 WC Records in Finals\"}]),\n                \n                dict(label=\"Most Runs in Finals\",\n                    method=\"update\",\n                    args=[{\"visible\": [True, False,False,False]},\n                        {\"title\": \"Most Runs (All time)\",\n                            }]),\n                \n                dict(label=\"Most 6s in Finals\",\n                    method=\"update\",\n                    args=[{\"visible\": [False, True,False,False]},\n                        {\"title\": \"Most Runs (First 3 Season 07,09,10)\",\n                            }]),\n                \n                dict(label=\"Most 4s in Finals\",\n                    method=\"update\",\n                    args=[{\"visible\": [False,False, True,False]},\n                        {\"title\": \"Most Runs (Last 3 Season 12,14,16)\",\n                            }]),\n                \n                dict(label=\"Best SR in Finals (Min 50 Runs)\",\n                    method=\"update\",\n                    args=[{\"visible\": [False,False,False, True]},\n                        {\"title\": \"Most Runs (Each Season)\",\n                            }]),                \n            ]),\n        ),\n                    \n    ])\n\nplot.show()\n","e409e171":"plot1 = go.Figure(data=[go.Bar(\n    name='Most Runs in Knockout',\n    x=knockoutrunsdf[1:11]['Batsman'],\n    y=knockoutrunsdf[1:11]['R']\n),\n    go.Bar(\n    name='Most 6s in Knockout',\n    x=kosix[0:10]['Batsman'],\n    y=kosix[0:10][0:10]['6s']\n),\n    go.Bar(\n    name='Most 4s in Knockout',\n    x=kof4[0:10]['Batsman'],\n    y=kof4[0:10]['4s']\n\n),\n    go.Bar(\n    name='Best SR in Knockout (Min 50 Runs)',\n    x=srknockout[srknockout['R']>=50][1:11]['Batsman'],\n    y=srknockout[srknockout['R']>=50][1:11]['SR']\n), \n    go.Bar(\n    name='Most Ducks Knockout',\n    x=m0sknockout[m0sknockout['R']==0]['Batsman'].value_counts().head(10).index,\n    y=m0sknockout[m0sknockout['R']==0]['Batsman'].value_counts().head(10).values\n),\n    go.Bar(\n    name='Most 50s in Knockout',\n    x=m50sknockout[m50sknockout['R']>49]['Batsman'].value_counts().head(10).index,\n    y=m50sknockout[m50sknockout['R']>49]['Batsman'].value_counts().head(10).values\n\n)                        \n                        \n])\n\n\n# Add dropdown\nplot1.update_layout(\n    updatemenus=[\n        dict(\n            active=0,\n            buttons=list([\n                dict(label=\"T20 WC Records in Knockouts\",\n                    method=\"update\",\n                    args=[{\"visible\": [True]},\n                        {\"title\": \"T20 WC Records in Knockouts\"}]),\n                \n                dict(label=\"Most Runs in Knockout\",\n                    method=\"update\",\n                    args=[{\"visible\": [True, False,False,False,False,False]},\n                        {\"title\": \"Most Runs (Knockout)\",\n                            }]),\n                \n                dict(label=\"Most 6s in Knockout\",\n                    method=\"update\",\n                    args=[{\"visible\": [False, True,False,False,False,False]},\n                        {\"title\": \"Most 6s in Knockout\",\n                            }]),\n                \n                dict(label=\"Most 4s in Knockout\",\n                    method=\"update\",\n                    args=[{\"visible\": [False,False, True,False,False,False]},\n                        {\"title\": \"Most 4s in Knockout\",\n                            }]),\n                \n                dict(label=\"Best SR in Knockout (Min 50 Runs)\",\n                    method=\"update\",\n                    args=[{\"visible\": [False,False,False, True,False,False]},\n                        {\"title\": \"Best SR in Knockout (Min 50 Runs)\",\n                            }]), \n                dict(label=\"Most Ducks in Knockout\",\n                    method=\"update\",\n                    args=[{\"visible\": [False,False,False,False, True,False]},\n                        {\"title\": \"Most Ducks in Knockout\",\n                            }]),\n                dict(label=\"Most 50s in Knockout\",\n                    method=\"update\",\n                    args=[{\"visible\": [False,False,False,False,False, True]},\n                        {\"title\": \"Most 50s in Knockout\",\n                            }]),                \n            ]),\n        ),\n        \n    ])\nplot1.show()\n","d05d42c3":"runs=dffirst.groupby('Batsman')['R'].sum()\nmost_runsf = runs.sort_values(ascending=False).reset_index()\n\ns6f = dffirst.groupby('Batsman')['6s'].sum()\nsixf = s6f.sort_values(ascending=False).reset_index()\n\nff = dffirst.groupby('Batsman')['4s'].sum()\nf4f = ff.sort_values(ascending=False).reset_index()\n\nwicf=dffirst['Bowler'].value_counts().reset_index()","53087012":"plot2 = go.Figure(data=[go.Bar(\n    name='Most Runs (07,09,10)',\n    x=most_runsf[1:11]['Batsman'],\n    y=most_runsf[1:11]['R']\n),\n    go.Bar(\n    name='Most 6s (07,09,10)',\n    x=sixf.head(10)['Batsman'],\n    y=sixf.head(10)['6s']\n),\n    go.Bar(\n    name='Most 4s (07,09,10)',\n    x=f4f.head(10)['Batsman'],\n    y=f4f.head(10)['4s']\n\n), \n    go.Bar(\n    name='Most Wickets (07,09,10)',\n    x=wicf[2:12]['index'],\n    y=wicf[2:12]['Bowler']\n\n),                          \n])\n\n\n# Add dropdown\nplot2.update_layout(\n    updatemenus=[\n        dict(\n            active=0,\n            buttons=list([\n                dict(label=\"T20 WC Records in First 3 Seasons(07,09,10)\",\n                    method=\"update\",\n                    args=[{\"visible\": [True]},\n                        {\"title\": \"T20 WC Records in First 3 Seasons(07,09,10)\"}]),\n                \n                dict(label=\"Most Runs (07,09,10)\",\n                    method=\"update\",\n                    args=[{\"visible\": [True, False,False,False]},\n                        {\"title\": \"Most Runs (07,09,10)\",\n                            }]),\n                \n                dict(label=\"Most 6s (07,09,10)\",\n                    method=\"update\",\n                    args=[{\"visible\": [False, True,False,False]},\n                        {\"title\": \"Most 6s (07,09,10)\",\n                            }]),\n                \n                dict(label=\"Most 4s (07,09,10)\",\n                    method=\"update\",\n                    args=[{\"visible\": [False,False, True,False]},\n                        {\"title\": \"Most 6s (07,09,10)\",\n                            }]),\n                dict(label=\"Most Wickets (07,09,10)\",\n                    method=\"update\",\n                    args=[{\"visible\": [False,False, False,True]},\n                        {\"title\": \"Most Wickets (07,09,10)\",\n                            }]),              \n            ]),\n        ),\n                    \n    ])\n\nplot2.show()\n","1871141d":"runs=dfrecent.groupby('Batsman')['R'].sum()\nmost_runsr = runs.sort_values(ascending=False).reset_index()\nmost_runsr[1:11]\n\ns6last = dfrecent.groupby('Batsman')['6s'].sum()\nsixl = s6last.sort_values(ascending=False).reset_index()\nsixl.head(10)\n\nfl = dfrecent.groupby('Batsman')['4s'].sum()\nf4l = fl.sort_values(ascending=False).reset_index()\nf4l.head(10)\n\nwicr=dfrecent['Bowler'].value_counts().reset_index()","2990a2d5":"plot3 = go.Figure(data=[go.Bar(\n    name='Most Runs (12,14,16)',\n    x=most_runsr[1:11]['Batsman'],\n    y=most_runsr[1:11]['R']\n),\n    go.Bar(\n    name='Most 6s (12,14,16)',\n    x=sixl.head(10)['Batsman'],\n    y=sixl.head(10)['6s']\n),\n    go.Bar(\n    name='Most 4s (12,14,16)',\n    x=f4l.head(10)['Batsman'],\n    y=f4l.head(10)['4s']\n\n), \n    go.Bar(\n    name='Most Wickets (12,14,16)',\n    x=wicr[2:12]['index'],\n    y=wicr[2:12]['Bowler']\n\n),                          \n])\n\n\n# Add dropdown\nplot3.update_layout(\n    updatemenus=[\n        dict(\n            active=0,\n            buttons=list([\n                dict(label=\"T20 WC Records in Recent 3 Seasons(12,14,16)\",\n                    method=\"update\",\n                    args=[{\"visible\": [True]},\n                        {\"title\": \"T20 WC Records in Recent 3 Seasons(12,14,16)\"}]),\n                \n                dict(label=\"Most Runs (12,14,16)\",\n                    method=\"update\",\n                    args=[{\"visible\": [True, False,False,False]},\n                        {\"title\": \"Most Runs (12,14,16)\",\n                            }]),\n                \n                dict(label=\"Most 6s (12,14,16)\",\n                    method=\"update\",\n                    args=[{\"visible\": [False, True,False,False]},\n                        {\"title\": \"Most 6s (12,14,16)\",\n                            }]),\n                \n                dict(label=\"Most 4s (12,14,16)\",\n                    method=\"update\",\n                    args=[{\"visible\": [False,False, True,False]},\n                        {\"title\": \"Most 6s (12,14,16)\",\n                            }]),\n                dict(label=\"Most Wickets (12,14,16)\",\n                    method=\"update\",\n                    args=[{\"visible\": [False,False, False,True]},\n                        {\"title\": \"Most Wickets (12,14,16)\",\n                            }]),              \n            ]),\n        ),\n                    \n    ])\n\nplot3.show()\n","73b7ec7c":"# most wins\nwins = df.groupby(['Season','Matchid'])['Won'].unique().value_counts().reset_index()","e2021dab":"highscore=highscore.reset_index()","b711dad1":"plot4 = go.Figure(data=[go.Bar(\n    name='Most Runs',\n    x=most_runsalltime[1:11]['Batsman'],\n    y=most_runsalltime[1:11]['R']\n),\n    go.Bar(\n    name='Most 6s',\n    x=six.head(10)['Batsman'],\n    y=six.head(10)['6s']\n),\n    go.Bar(\n    name='Most 4s',\n    x=f4.head(10)['Batsman'],\n    y=f4.head(10)['4s']\n\n),\n    go.Bar(\n    name='Best Strike Rate',\n    x=srall[srall['R']>=100][1:11]['Batsman'],\n    y=srall[srall['R']>=100][1:11]['SR']\n\n),                        \n       \n    go.Bar(\n    name='Most Balls Faced',\n    x=balltimedf[0:10]['Batsman'],\n    y=balltimedf[0:10]['B']\n\n),   \n                        \n    go.Bar(\n    name='Most 50s',\n    x=m50s[m50s['R']>49]['Batsman'].value_counts().head(10).reset_index()['index'],\n    y=m50s[m50s['R']>49]['Batsman'].value_counts().head(10).reset_index()['Batsman']\n\n),                        \n    \n    go.Bar(\n    name='Most 100s',\n    x=m100s[m100s['R']>99]['Batsman'].value_counts().reset_index()['index'],\n    y=m100s[m100s['R']>99]['Batsman'].value_counts().reset_index()['Batsman']\n\n), \n    go.Bar(\n    name='Most Ducks',\n    x=m0s[m0s['R']==0]['Batsman'].value_counts().head(10).reset_index()['index'],\n    y=m0s[m0s['R']==0]['Batsman'].value_counts().head(10).reset_index()['Batsman']\n\n),                         \n          \n                        \n    go.Bar(\n    name='Most Not outs',\n    x=mostno.head().index,\n    y=mostno.head().values\n\n),   \n                        \n    go.Bar(\n    name='Most Run outs',\n    x=ro.index,\n    y=ro.values\n\n),  \n                        \n    go.Bar(\n    name='Highest Individual Score',\n    x=highscore['Batsman'],\n    y=highscore['R']\n\n),     \n                        \n    go.Bar(\n    name='Most Catches',\n    x=cat[1:11]['index'],\n    y=cat[1:11]['Catched By']\n\n),                          \n    go.Bar(\n    name='Most Wickets',\n    x=wicall[2:12]['index'],\n    y=wicall[2:12]['Bowler']\n\n), \n                        \n    go.Bar(\n    name='Highest Team Score',\n    x=ts.head(4)['Team'],\n    y=ts.head(4)['R']\n\n),                             \n    \n    go.Bar(\n    name='Most 200+ totals by Team',\n    x=ts200['index'],\n    y=ts200['Team']\n\n), \n                        \n    go.Bar(\n    name='Most Wins by Team',\n    x=wins.head(10)['index'],\n    y=wins.head(10)['Won']\n\n),                         \n                        \n                        \n])\n\n\n# Add dropdown\nplot4.update_layout(\n    updatemenus=[\n        dict(\n            active=0,\n            buttons=list([\n                dict(label=\"T20 WC Records (All Time)\",\n                    method=\"update\",\n                    args=[{\"visible\": [True]},\n                        {\"title\": \"T20 WC Records (All Time)\"}]),\n                \n                dict(label=\"Most Runs\",\n                    method=\"update\",\n                    args=[{\"visible\": [True, False,False,False,False,False,False,False,False,False,False,False,False,False,False,False]},\n                        {\"title\": \"Most Runs\",\n                            }]),\n                \n                dict(label=\"Most 6s\",\n                    method=\"update\",\n                    args=[{\"visible\": [False, True,False,False,False,False,False,False,False,False,False,False,False,False,False,False]},\n                        {\"title\": \"Most 6s\",\n                            }]),\n                \n                dict(label=\"Most 4s\",\n                    method=\"update\",\n                    args=[{\"visible\": [False,False, True,False,False,False,False,False,False,False,False,False,False,False,False,False]},\n                        {\"title\": \"Most 4s\",\n                            }]),\n                \n                dict(label=\"Best Strike Rate\",\n                    method=\"update\",\n                    args=[{\"visible\": [False,False,False, True,False,False,False,False,False,False,False,False,False,False,False,False]},\n                        {\"title\": \"Best Strike Rate\",\n                            }]),\n                \n                dict(label=\"Most Balls Faced\",\n                    method=\"update\",\n                    args=[{\"visible\": [False,False,False,False, True,False,False,False,False,False,False,False,False,False,False,False]},\n                        {\"title\": \"Most Balls Faced\",\n                            }]),\n                \n                dict(label=\"Most 50s\",\n                    method=\"update\",\n                    args=[{\"visible\": [False,False, False,False,False,True,False,False,False,False,False,False,False,False,False,False]},\n                        {\"title\": \"Most 50s\",\n                            }]),\n                \n                dict(label=\"Most 100s\",\n                    method=\"update\",\n                    args=[{\"visible\": [False,False,False, False,False,False,True,False,False,False,False,False,False,False,False,False]},\n                        {\"title\": \"Most 100s\",\n                            }]),\n                \n                dict(label=\"Most Ducks\",\n                    method=\"update\",\n                    args=[{\"visible\": [False,False,False,False, False,False,False,True,False,False,False,False,False,False,False,False]},\n                        {\"title\": \"Most Ducks\",\n                            }]),                \n                \n                dict(label=\"Most Not Outs\",\n                    method=\"update\",\n                    args=[{\"visible\": [False,False,False,False, False,False,False,False,True,False,False,False,False,False,False,False]},\n                        {\"title\": \"Most Not Outs\",\n                            }]),  \n                \n                dict(label=\"Most Run Outs\",\n                    method=\"update\",\n                    args=[{\"visible\": [False,False,False,False, False,False,False,False,False,True,False,False,False,False,False,False]},\n                        {\"title\": \"Most Run Outs\",\n                            }]),\n                \n                dict(label=\"Highest Individual Score\",\n                    method=\"update\",\n                    args=[{\"visible\": [False,False,False,False, False,False,False,False,False,False,True,False,False,False,False,False]},\n                        {\"title\": \"Highest Individual Score\",\n                            }]),     \n                \n                dict(label=\"Most Catches\",\n                    method=\"update\",\n                    args=[{\"visible\": [False,False,False,False, False,False,False,False,False,False,False,True,False,False,False,False]},\n                        {\"title\": \"Most Catches\",\n                            }]),                \n                \n                dict(label=\"Most Wickets\",\n                    method=\"update\",\n                    args=[{\"visible\": [False,False, False,False,False,False,False,False,False,False,False,False,True,False,False,False]},\n                        {\"title\": \"Most Wickets\",\n                            }]),  \n                \n                dict(label=\"Highest Team Score\",\n                    method=\"update\",\n                    args=[{\"visible\": [False,False,False,False, False,False,False,False,False,False,False,False,False,True,False,False]},\n                        {\"title\": \"Highest Team Score\",\n                            }]), \n                \n                dict(label=\"Most 200+ totals by Team\",\n                    method=\"update\",\n                    args=[{\"visible\": [False,False, False,False,False,False,False,False,False,False,False,False,False,False,True,False]},\n                        {\"title\": \"Most 200+ totals by Team\",\n                            }]),  \n                \n                dict(label=\"Most Wins by Team\",\n                    method=\"update\",\n                    args=[{\"visible\": [False,False,False,False, False,False,False,False,False,False,False,False,False,False,False,True]},\n                        {\"title\": \"Most Wins by Team\",\n                            }]),                 \n                \n            ]),\n        ),\n                    \n    ])\n\nplot4.show()\n","dd05cb7a":"# most wickets taken by bowler in each season\nwic16 = df[df['Season']==2016]['Bowler'].value_counts().reset_index()[2:3]\n\nwic14 = df[df['Season']==2014]['Bowler'].value_counts().reset_index()[2:3]\n\nwic12 = df[df['Season']==2012]['Bowler'].value_counts().reset_index()[2:3]\n\nwic10 = df[df['Season']==2010]['Bowler'].value_counts().reset_index()[2:3]\n\nwic9 = df[df['Season']==2009]['Bowler'].value_counts().reset_index()[2:3]\n\nwic7 = df[df['Season']==2007]['Bowler'].value_counts().reset_index()[2:3]","6fe0c34d":"# wickets each season\nxdatawic=[wic16.values[0][0]+' 2016',\n         wic14.values[0][0]+' 2014',\n         wic12.values[0][0]+' 2012',\n         wic10.values[0][0]+' 2010',\n         wic9.values[0][0]+' 2009',\n         wic7.values[0][0]+' 2007']\nydatawic=[wic16.values[0][1],\n         wic14.values[0][1],\n         wic12.values[0][1],\n         wic10.values[0][1],\n         wic9.values[0][1],\n         wic7.values[0][1]]","98ffb0cf":"# runs in each season\nxdataruns = [r16[1:2].values[0][1]+' '+str(r16[1:2].values[0][0]),\n         r14[1:2].values[0][1]+' '+str(r14[1:2].values[0][0]),\n         r12[1:2].values[0][1]+' '+str(r12[1:2].values[0][0]),\n         r10[1:2].values[0][1]+' '+str(r10[1:2].values[0][0]),\n         r9[1:2].values[0][1]+' '+str(r9[1:2].values[0][0]),\n         r7[1:2].values[0][1]+' '+str(r7[1:2].values[0][0])]\n\n\nydataruns = [r16[1:2].values[0][2],\n         r14[1:2].values[0][2],\n         r12[1:2].values[0][2],\n         r10[1:2].values[0][2],\n         r9[1:2].values[0][2],\n         r7[1:2].values[0][2]]\n\n# 6s in each season\nxdata6 = [six16[0:1].values[0][1]+' '+str(six16[0:1].values[0][0]),\n         six14[0:1].values[0][1]+' '+str(six14[0:1].values[0][0]),\n         six12[0:1].values[0][1]+' '+str(six12[0:1].values[0][0]),\n         six10[0:1].values[0][1]+' '+str(six10[0:1].values[0][0]),\n         six9[0:1].values[0][1]+' '+str(six9[0:1].values[0][0]),\n         six7[0:1].values[0][1]+' '+str(six7[0:1].values[0][0])]\n\nydata6 = [six16[0:1].values[0][2],\n         six14[0:1].values[0][2],\n         six12[0:1].values[0][2],\n         six10[0:1].values[0][2],\n         six9[0:1].values[0][2],\n         six7[0:1].values[0][2]]  \n\n# balls faced in each season\nxdataball = [b16[0:1].values[0][1]+' '+str(b16[0:1].values[0][0]),\n         b14[0:1].values[0][1]+' '+str(b14[0:1].values[0][0]),\n         b12[0:1].values[0][1]+' '+str(b12[0:1].values[0][0]),\n         b10[0:1].values[0][1]+' '+str(b10[0:1].values[0][0]),\n         b9[0:1].values[0][1]+' '+str(b9[0:1].values[0][0]),\n         b7[0:1].values[0][1]+' '+str(b7[0:1].values[0][0])]\n\nydataball = [b16[0:1].values[0][2],\n         b14[0:1].values[0][2],\n         b12[0:1].values[0][2],\n         b10[0:1].values[0][2],\n         b9[0:1].values[0][2],\n         b7[0:1].values[0][2]]  \n\n# 4s in each season\nxdata4 = [f416[0:1].values[0][1]+' '+str(f416[0:1].values[0][0]),\n         f414[0:1].values[0][1]+' '+str(f414[0:1].values[0][0]),\n         f412[0:1].values[0][1]+' '+str(f412[0:1].values[0][0]),\n         f410[0:1].values[0][1]+' '+str(f410[0:1].values[0][0]),\n         f49[0:1].values[0][1]+' '+str(f49[0:1].values[0][0]),\n         f47[0:1].values[0][1]+' '+str(f47[0:1].values[0][0])]\n\nydata4 = [f416[0:1].values[0][2],\n         f414[0:1].values[0][2],\n         f412[0:1].values[0][2],\n         f410[0:1].values[0][2],\n         f49[0:1].values[0][2],\n         f47[0:1].values[0][2]]  ","ef8ab4ed":"plot5 = go.Figure(data=[go.Bar(\n    name='Most Runs',\n    x=xdataruns,\n    y=ydataruns\n),\n                        \n    go.Bar(\n    name='Most 6s',\n    x=xdata6,\n    y=ydata6\n\n), \n    go.Bar(\n    name='Most 4s',\n    x=xdata4,\n    y=ydata4\n\n), \n    go.Bar(\n    name='Most Balls Faced',\n    x=xdataball,\n    y=ydataball\n\n), \n                        \n    go.Bar(\n    name='Most Wickets',\n    x=xdatawic,\n    y=ydatawic\n\n),                         \n                        \n])\n\n\n# Add dropdown\nplot5.update_layout(\n    updatemenus=[\n        dict(\n            active=0,\n            buttons=list([\n                dict(label=\"T20 WC Records in Each Season\",\n                    method=\"update\",\n                    args=[{\"visible\": [True]},\n                        {\"title\": \"T20 WC Records in Each Season\"}]),\n                \n                dict(label=\"Most Runs\",\n                    method=\"update\",\n                    args=[{\"visible\": [True, False,False,False,False]},\n                        {\"title\": \"Most Runs\",\n                            }]),\n                \n                dict(label=\"Most 6s\",\n                    method=\"update\",\n                    args=[{\"visible\": [False, True,False,False,False]},\n                        {\"title\": \"Most 6s\",\n                            }]),\n                \n                dict(label=\"Most 4s\",\n                    method=\"update\",\n                    args=[{\"visible\": [False, False,True,False,False]},\n                        {\"title\": \"Most 4s\",\n                            }]),  \n                \n                dict(label=\"Most Balls Faced\",\n                    method=\"update\",\n                    args=[{\"visible\": [False, False,False,True,False]},\n                        {\"title\": \"Most Balls Faced\",\n                            }]),                 \n                dict(label=\"Most Wickets\",\n                    method=\"update\",\n                    args=[{\"visible\": [False, False,False,False,True]},\n                        {\"title\": \"Most Wickets\",\n                            }]),                 \n            ]),\n        ),\n                    \n    ])","81dc9f12":"plot4.show() # all time\nplot1.show() # knockout records\nplot.show()  # final records\nplot2.show() # first 3 seasons\nplot3.show() # last 3 seasons\nplot5.show() # each season\n\n# Indian cricket team records\nplot6.show() # Most runs\nplot7.show() # Most 6s\nplot8.show() # Most 4s\nplot9.show() # Most 50s","5a1d417a":"# most 6s (Each Season)","b351bb87":"# Most Runs (Each Season)","537e61e7":"# most runs in knockouts","ab8e7c59":"# Most Runs (First 3 Season)","d428c9cf":"# Visualization first 3 season","ef9387ba":"# Most Balls faced (2016)","5d2e694b":"# Most Runs (Recent 3 Season)","0d5e97bb":"# Visualization Last 3 season","6a2b3724":"# Most Runs All Time","d9bb8df1":"# Most Wickets (Each season)","db652f78":"# Best SR (2016) (Min-50 runs)","3b71f31f":"# Most 6s in knockouts","7af2a882":"# Each Season Records","6e245203":"# Most catches (All time)","da441ece":"# most 50s (knockouts)","0bef646c":"# Converting into Numerical columns","6bc1523e":"# Statical summary of the data","349b1eb3":"# Indian Team Runs Division","4391b3f5":"# T20 WC Data Analysis","f73ad45e":"# high  team score (All time)","91a177d6":"# most wicket (last 3 season)","3366a540":"# Check missing values","d099cd95":"# Most Run Outs (All time)","2abca827":"# Rows and Columns","38038193":"# Most wins (all time)","1f872fa7":"# Most 50s (All time)","1e83933a":"# most 4s all time","4954f23e":"# Information of all variables","8ea72741":"# Total number of elements","f83e157e":"# Most Wickets (all time)","4d6ec5b2":"# Most Ducks (All time)","8e70993e":"# most 4s last 3 season","477416b9":"# most ducks in knockouts","e0f44fdd":"# most 4s in finals","cc4f89f8":"# best sr all time (Min 100 runs)","50a5f593":"# Visualization on Knockouts","d18c7526":"# Most 4s in knockout","bcf19ff6":"# Statistical Summary","8b478fd5":"# most 4s first 3 season","4d07bca5":"# best sr in final (min 50 runs)","b0bf96e4":"# most 6s in final","8e119ac8":"# Most 6s first 3 season","ad7da719":"# Most time 200 up","df9b7bc2":"# best sr in knockouts","4e7ef7eb":"# Analysis","adde4caa":"# First 5 records","860fc943":"# Last 5 records","f2208297":"# most 4s each season","3ae4f9d0":"# Thank You ","ec763d99":"# most notouts (All time)","7ebd0375":"# most wickets (First 3 season)","df981d2d":"# T20WC All Time Records","63281be8":"# most runs in Final","1b6e14cc":"# most 6s last 3 season","c4a609ae":"# Read csv","af42bd98":"# Visualization on Finals","b407bab7":"# Most 6s (All time)","38fda88b":"# most 100s (All time)","a54bfd1b":"# Highest score (All time)"}}