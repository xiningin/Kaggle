{"cell_type":{"97528c67":"code","6f190dcd":"code","84e67019":"code","7148aca5":"code","2ecb0f20":"code","04137a0b":"code","42b90d3f":"code","2341577f":"code","0cbddcd0":"code","553cf230":"code","b6f8bf20":"code","74741439":"code","1cf3c66f":"code","053f1961":"code","f8bbc345":"code","19d1afe2":"code","ce44025d":"code","4e724689":"code","468fba26":"code","d7343085":"code","e5abf93d":"code","f58359d1":"code","2ee0f553":"code","c3f3b653":"code","0f63264d":"code","3d58cb99":"code","61c0af40":"code","bc3bd69f":"code","1100c41a":"code","5d3749e7":"code","68c8d653":"code","6ce84f98":"code","95297171":"code","ea5c529d":"code","0ac3bf8f":"code","a8bf2e7f":"code","7cc96b91":"code","1f20b37f":"code","8f85fffd":"code","e36cdd94":"code","9da99af9":"code","74d04dbc":"code","7fdbf2e7":"code","d6efd2ee":"code","f2c1b352":"code","aa71b74e":"code","f585c14e":"code","8c0de272":"code","8456de61":"code","fa12ae4f":"code","e4b0be9d":"code","c3ac97df":"code","e0f19dd8":"code","79571c2b":"code","5d916822":"code","3b074d25":"code","188cdbef":"code","a02adc68":"code","f240e089":"code","d2e18f7e":"markdown","201f0552":"markdown","1cada1d3":"markdown","0219a5b7":"markdown","15744f55":"markdown","bd665809":"markdown","2d25ae99":"markdown","bc7b25f9":"markdown"},"source":{"97528c67":"import pandas as pd\nimport numpy as np\n\nimport matplotlib.pyplot as plt\nimport seaborn as sns \n%matplotlib inline\n\n# \u0417\u0430\u0433\u0440\u0443\u0436\u0430\u0435\u043c \u0441\u043f\u0435\u0446\u0438\u0430\u043b\u044c\u043d\u044b\u0439 \u0443\u0434\u043e\u0431\u043d\u044b\u0439 \u0438\u043d\u0441\u0442\u0440\u0443\u043c\u0435\u043d\u0442 \u0434\u043b\u044f \u0440\u0430\u0437\u0434\u0435\u043b\u0435\u043d\u0438\u044f \u0434\u0430\u0442\u0430\u0441\u0435\u0442\u0430:\nfrom sklearn.model_selection import train_test_split\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))","6f190dcd":"RANDOM_SEED = 42","84e67019":"!pip freeze > requirements.txt","7148aca5":"# \u043f\u0440\u0438 \u0437\u0430\u0433\u0440\u0443\u0437\u043a\u0435 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u044e \u0440\u0430\u0441\u0448\u0438\u0440\u0435\u043d\u0438\u0435 .xls, \u0442\u0430\u043a \u043a\u0430\u043a \u043f\u0440\u0438 \u0441\u043e\u0445\u0440\u0430\u043d\u0435\u043d\u0438\u0438 \u0444\u0430\u0439\u043b\u043e\u0432 \u043d\u0430 \u043a\u043e\u043c\u043f\u044c\u044e\u0442\u0435\u0440, \u043e\u043d\u0438 \u0430\u0432\u0442\u043e\u043c\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u0438 \u0441\u043e\u0445\u0440\u0430\u043d\u044f\u044e\u0442\u0441\u044f\n# \u0432 \u0442\u043e\u043c \u0444\u043e\u0440\u043c\u0430\u0442\u0435.\nDATA_DIR = '\/kaggle\/input\/sf-dst-restaurant-rating\/'\ndf_train = pd.read_csv(DATA_DIR+'\/main_task.csv')\ndf_test = pd.read_csv(DATA_DIR+'kaggle_task.csv')\nsample_submission = pd.read_csv(DATA_DIR+'\/sample_submission.csv')","2ecb0f20":"# \u0410 \u0442\u0435\u043f\u0435\u0440\u044c \u043d\u0435\u043e\u0436\u0438\u0434\u0430\u043d\u043d\u043e!!! - \u043f\u043e\u043c\u0435\u0447\u0430\u0435\u043c \u0434\u0430\u0442\u0430\u0444\u0440\u0435\u0439\u043c\u044b \u0438 \u043e\u0431\u044a\u0435\u0434\u0438\u043d\u044f\u0435\u043c \u0432 \u043e\u0434\u0438\u043d (\u043f\u0440\u0435\u0434\u0432\u0430\u0440\u0438\u0442\u0435\u043b\u044c\u043d\u043e \u0441\u043e\u0437\u0434\u0430\u0432 \u043a\u043e\u043b\u043e\u043d\u043a\u0443 Rating \u0432 df_test)\ndf_train['sample'] = 1 \ndf_test['sample'] = 0 \ndf_test['Rating'] = 0 \n\ndf = df_test.append(df_train, sort=False).reset_index(drop=True)\n\ndffin = pd.DataFrame()\ndffin['Restaurant_id'] = df['Restaurant_id']\n\n#df = df.drop(['Name'], axis=1)","04137a0b":"# \u041f\u043e\u0441\u043c\u043e\u0442\u0440\u0438\u043c, \u0447\u0442\u043e \u043f\u043e\u043b\u0443\u0447\u0438\u043b\u043e\u0441\u044c\ndf.head(3)","42b90d3f":"# \u041f\u0415\u0420\u0412\u042b\u041c \u0414\u0415\u041b\u041e\u041c \u0420\u0410\u0417\u0411\u0415\u0420\u0415\u041c\u0421\u042f \u0421 \u041f\u0420\u041e\u041f\u0423\u0421\u041a\u0410\u041c\u0418 \u0412 \u0414\u0410\u041d\u041d\u042b\u0425","2341577f":"# \u0427\u0442\u043e\u0431\u044b \u0437\u0430\u043f\u043e\u043b\u043d\u0438\u0442\u044c \u043d\u0435\u0434\u043e\u0441\u0442\u0430\u044e\u0449\u0438\u0435 \u0434\u0430\u043d\u043d\u044b\u0435 \u0432 \u0441\u0442\u043e\u043b\u0431\u0446\u0435 Cuisine Stile, \u0441\u0430\u043c\u044b\u0435 \u043f\u043e\u043f\u0443\u043b\u044f\u0440\u043d\u044b\u0435 \u0432\u0438\u0434\u044b \u043a\u0443\u0445\u043e\u043d\u044c \u0432 \u043a\u0430\u0436\u0434\u043e\u043c \u0433\u043e\u0440\u043e\u0434\u0435\n# \u0441\u0434\u0435\u043b\u0430\u0435\u043c \u0434\u0430\u0442\u0430\u0444\u0440\u0435\u0439\u043c \u0441 \u0433\u043e\u0440\u043e\u0434\u0430\u043c\u0438 \u0438 \u0441\u0430\u043c\u044b\u043c\u0438 \u043f\u043e\u043f\u0443\u043b\u044f\u0440\u043d\u044b\u043c\u0438 \u0442\u0430\u043c \u043a\u0443\u0445\u043d\u044f\u043c\u0438\ndf2 = df.dropna(subset=['Cuisine Style'], inplace=False)\ndf2 = df2.groupby('City')['Cuisine Style'].sum().apply(lambda x:x.replace('[','').replace(']','').replace('\\'','').split(', '))\n\n# \u0422\u0430\u043a \u043a\u0430\u043a \u0441\u0440\u0435\u0434\u043d\u0435\u0435 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043a\u0443\u0445\u043e\u043d\u044c \u043d\u0430 1 \u0440\u0435\u0441\u0442\u043e\u0440\u0430\u043d = 2.6, \u0442\u043e \u043d\u0430\u0439\u0434\u0435\u043c \u0442\u0440\u0438 \u0441\u0430\u043c\u044b\u0435 \u043f\u043e\u043f\u0443\u043b\u044f\u0440\u043d\u044b\u0435 \u043a\u0443\u0445\u043d\u0438 \u0434\u043b\u044f \u043a\u0430\u0436\u0434\u043e\u0433\u043e \u0433\u043e\u0440\u043e\u0434\u0430\nmostpop=[]\nfor i in range(len(df2)):\n    pop = []\n    trt = pd.Series(df2[i]).value_counts() # \u043d\u0430\u0448\u043b\u0438 \u0441\u0430\u043c\u044b\u0435 \u043f\u043e\u043f\u0443\u043b\u044f\u0440\u043d\u044b\u0435 \u043a\u0443\u0445\u043d\u0438\n    pop.append(pd.DataFrame(trt).index[0])\n    pop.append(pd.DataFrame(trt).index[1])\n    pop.append(pd.DataFrame(trt).index[2])\n    mostpop.append(pop) # \u0441\u0443\u043d\u0443\u043b\u0438 \u0438\u0445 \u0432 \u0441\u043f\u0438\u0441\u043e\u043a\n\nmostpop = pd.Series(mostpop)\n\ncit = pd.DataFrame(df2.index)\n\ncit_cus = pd.concat([cit,mostpop], axis=1)\ncit_cus.columns = ['City', 'Most pop cuisine']\ncit_cus['Capital'] = 0","0cbddcd0":"# \u0427\u0435 \u043f\u043e\u043b\u0443\u0447\u0438\u043b\u043e\u0441\u044c:\ncit_cus.head()","553cf230":"# \u041e\u0447\u0438\u0441\u0442\u0438\u043c \u0441\u0442\u043e\u043b\u0431\u0435\u0446 Cuisine Stile \u0438 \u043f\u0435\u0440\u0435\u0432\u0435\u0434\u0435\u043c \u0438\u0445 \u0432 \u0441\u043f\u0438\u0441\u043e\u043a\ndf['Cuisine Style'] = df['Cuisine Style'].loc[df['Cuisine Style'].isna() == False].apply(lambda x:x.replace('[','').replace(']','').replace('\\'','').split(', '))\n\n# \u0421\u043e\u0435\u0434\u0438\u043d\u0438\u043c \u0434\u0432\u0435 \u0442\u0430\u0431\u043b\u0438\u0446\u044b\ndf = df.merge(cit_cus, on='City', how = 'left')\n\n# \u0417\u0430\u043f\u043e\u043b\u043d\u0438\u043c nan-\u044b \u0438\u0437 Cuisine Style \u0434\u0430\u043d\u043d\u044b\u043c\u0438 \u0438\u0437 Most pop cuisine\ndf['Cuisine Style'] = df['Cuisine Style'].fillna(df['Most pop cuisine'])\n\n# \u041d\u0443 \u0438 \u0443\u0434\u0430\u043b\u0438\u043c 'Most pop cuisine'\ndf = df.drop(['Most pop cuisine'], axis=1)","b6f8bf20":"df.info()","74741439":"# \u0437\u0430\u043f\u0438\u043b\u0438\u043c \u0441\u043f\u0438\u0441\u043e\u043a \u0441\u043e \u0441\u0442\u043e\u043b\u0438\u0446\u0430\u043c\u0438 \u0433\u043e\u0441\u0443\u0434\u0430\u0440\u0441\u0442\u0432\ncapitals = ['London', 'Paris', 'Madrid', 'Berlin', 'Rome', 'Prague', 'Lisbon', 'Vienna', 'Amsterdam', 'Brussels', \n            'Stockholm', 'Budapest', 'Warsaw', 'Dublin', 'Copenhagen', 'Athens', 'Edinburgh', 'Oslo', 'Helsinki', \n            'Bratislava', 'Luxembourg', 'Ljubljana']","1cf3c66f":"# \u043e\u0442\u043c\u0435\u0442\u0438\u043c \u0432 \u0434\u0430\u0442\u0430\u0444\u0440\u0435\u0439\u043c\u0435 \u0441\u0442\u043e\u043b\u0438\u0446\u044b - 1, \u043e\u0441\u0442\u0430\u043b\u044c\u043d\u044b\u0435 \u0433\u043e\u0440\u043e\u0434\u0430 - 0\ndf['Capital'].loc[df['City'].isin(capitals)] = 1","053f1961":"df.head(3)","f8bbc345":"df['Price Range'].unique()","19d1afe2":"# \u041f\u0435\u0440\u0432\u044b\u043c \u0434\u0435\u043b\u043e\u043c \u043f\u0435\u0440\u0435\u0432\u0435\u0434\u0435\u043c \u0441\u0443\u0449\u0435\u0441\u0442\u0432\u0443\u044e\u0449\u0438\u0435 \u0437\u0430\u043d\u0447\u0435\u043d\u0438\u044f \u0432 \u0447\u0438\u0441\u043b\u043e\u0432\u044b\u0435 \u0430\u043d\u0430\u043b\u043e\u0433\u0438\n# \u0414\u043b\u044f \u0442\u043e\u0433\u043e \u0437\u0430\u043f\u0438\u043b\u0438\u043c \u0434\u0430\u0442\u0430\u0444\u0440\u0435\u0439\u043c\ndfprice = pd.DataFrame({'Price Range': ['$', '$$ - $$$', \n                                        '$$$$'], 'Price New': [1,2, 3]})\ndf = df.merge(dfprice, on='Price Range', how = 'left')\n\n# \u0418 \u0443\u0434\u0430\u043b\u0438\u043c \u0441\u0442\u043e\u043b\u0431\u0435\u0446 'Price Range', \u0447\u0442\u043e\u0431 \u043e\u043d \u043d\u0430\u0441 \u0431\u043e\u043b\u0435\u0435 \u043d\u0435 \u0441\u043c\u0443\u0449\u0430\u043b\ndf = df.drop(['Price Range'], axis=1)","ce44025d":"df['Price New'].value_counts()","4e724689":"dict_city_price={}\n\nfor city in df['City'].unique():\n    price = df[df['City']==city]['Price New'].value_counts().index[0]\n    dict_city_price[city]=price","468fba26":"dict_city_price","d7343085":"df['Price New'] = df['Price New'].fillna(2)","e5abf93d":"df.info()","f58359d1":"# \u041d\u0430\u0439\u0434\u0435\u043c, \u043a\u043e\u043b\u044c\u043a\u043e \u0434\u043d\u0435\u0439 \u043f\u0440\u043e\u0448\u043b\u043e \u0441 \u043c\u043e\u043c\u0435\u043d\u0442\u0430 \u043f\u043e\u0441\u043b\u0435\u0434\u043d\u0435\u0433\u043e \u043e\u0442\u0437\u044b\u0432\u0430\n\nimport re\n\ndf['Reviews'] = df['Reviews'].apply(lambda x: str([[], []]) if type(x) == float else x) \ndf['Reviews'] = df['Reviews'].apply(lambda x: str(x) if type(x) == list else x)\n\n# \u0412\u044b\u0442\u0430\u0449\u0438\u043c \u0434\u0430\u0442\u044b \u043e\u0442\u0437\u044b\u0432\u043e\u0432 \u0438\u0437 \u0441\u0442\u043e\u043b\u0431\u0446\u0430\nres = []\nfor i in df['Reviews']:\n    res.append(re.findall(r'(\\d\\d\/\\d\\d\/\\d\\d\\d\\d)', i))\nreviews = pd.DataFrame(res)\nreviews[0] = pd.to_datetime(reviews[0])\nreviews[1] = pd.to_datetime(reviews[1])","2ee0f553":"\nimport datetime as dt\nfrom datetime import date, timedelta\n\ntoday = pd.to_datetime(date.today().strftime('%Y-%m-%d'))\n\nfromtoday = []\n\n# \u041a\u0430\u043a \u0432\u0438\u0434\u0438\u043c, \u0432 \u0441\u0442\u043e\u043b\u0431\u0446\u0435 0 \u0434\u0430\u0442\u044b \u0431\u043e\u043b\u0435\u0435 \u043f\u043e\u0437\u0434\u043d\u0438\u0435, \u043f\u043e\u044d\u0442\u043e\u043c\u0443 \u0431\u0443\u0434\u0435\u043c \u0438\u0441\u043a\u0430\u0442\u044c \u0440\u0430\u0437\u043d\u0438\u0446\u0443 \u0438\u043c\u0435\u043d\u043d\u043e \u0441 \u043d\u0438\u043c\u0438\nfor i in range(len(reviews)):\n    fromtoday.append(today - reviews.loc[i, 0])\n\n# \u0421\u043e\u0437\u0434\u0430\u0434\u0438\u043c \u0441\u0442\u043e\u043b\u0431\u0435\u0446 \u043f\u043e\u0434 \u044d\u0442\u0438 \u0431\u0435\u0441\u0446\u0435\u043d\u043d\u044b\u0435 \u0434\u0430\u043d\u043d\u044b\u0435    \ndf['fromtoday'] = pd.Series(fromtoday)\ndf['fromtoday'] = df['fromtoday'].apply(lambda x: x.days if (type(x) != int) else 0)\ndf['fromtoday'] = df['fromtoday'].fillna(0)\n\n# \u0418, \u0440\u0430\u0437 \u043f\u043e\u0448\u043b\u0430 \u0442\u0430\u043a\u0430\u044f \u043f\u044c\u044f\u043d\u043a\u0430, \u043d\u0430\u0439\u0434\u0435\u043c \u0440\u0430\u0437\u043d\u0438\u0446\u0443 \u043c\u0435\u0436\u0434\u0443 \u0434\u0432\u0443\u043c\u044f \u043e\u0442\u0437\u044b\u0432\u0430\u043c\u0438\n\ndf['delta_days'] = reviews[0] - reviews[1]\ndf['delta_days'] = df['delta_days'].apply(lambda x: x.days if type(x) != float else 0)\ndf['delta_days'] = df['delta_days'].fillna(0)","c3f3b653":"# \u0421\u0434\u0435\u043b\u0430\u0435\u043c \u0441\u0442\u043e\u043b\u0431\u0435\u0446 \u043f\u043e\u0434 id \u0440\u0435\u0441\u0442\u043e\u0440\u0430\u043d\u0430\n\ndf['id'] = df['Restaurant_id'].apply(lambda x: int(x[3:]))","0f63264d":"# \u0414\u043e\u0431\u0430\u0432\u0438\u043c \u043d\u0435\u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u044d\u043a\u043e\u043d\u043e\u043c\u0438\u0447\u0435\u0441\u043a\u0438\u0435 \u043f\u043e\u043a\u0430\u0437\u0430\u0442\u0435\u043b\u0438 \u0434\u043b\u044f \u043a\u0430\u0436\u0434\u043e\u0433\u043e \u0433\u043e\u0440\u043e\u0434\u0430\n\nGDP = {'London': 41030, 'Paris': 41760, 'Madrid': 29961, 'Barcelona': 29961, 'Berlin': 46563, 'Milan': 32946,\n       'Rome': 32946, 'Prague': 23213, 'Lisbon': 23030, 'Vienna': 50022, 'Amsterdam': 52367, 'Brussels': 45175, \n       'Hamburg': 46563, 'Munich': 46563, 'Lyon': 41760, 'Stockholm': 51241, 'Budapest': 17463, 'Warsaw': 14901,\n       'Dublin': 77771, 'Copenhagen': 59795, 'Athens': 19974, 'Edinburgh': 42500, 'Zurich': 83716, 'Oporto': 23030,\n       'Geneva': 83716, 'Krakow': 14901, 'Oslo': 77957, 'Helsinki': 48868, 'Bratislava': 19547, 'Luxembourg': 113196,\n       'Ljubljana': 26170}\n\n\nCityPop = {'Paris':2140526, 'Stockholm': 1632798, 'London': 9126366, 'Berlin':3748148, 'Munich':1456039, 'Oporto': 2400000,\n       'Milan':1405879, 'Bratislava':434926, 'Vienna':1899055, 'Rome':2857321, 'Barcelona':1620343, 'Madrid':3223334,\n       'Dublin':1361000, 'Brussels':1211035, 'Zurich':1383000, 'Warsaw':1802237, 'Budapest':1749734, 'Copenhagen':1334000,\n       'Amsterdam':1140000, 'Lyon':513275, 'Hamburg':1930996, 'Lisbon':2927000, 'Prague':1308632, 'Oslo':1041377,\n       'Helsinki':1304851, 'Edinburgh':531000, 'Geneva':201741, 'Ljubljana':292988, 'Athens':3154000,\n       'Luxembourg':613894, 'Krakow':762508}","3d58cb99":"# \u0414\u0435\u043b\u0430\u0435\u043c \u043a\u043e\u043b\u043e\u043d\u043a\u0443 GDP\ndfGDP = pd.Series(GDP).reset_index()\ndfGDP.columns = ['City', 'GDP']\ndf = df.merge(dfGDP, on='City', how='left')\n\n# \u0414\u0435\u043b\u0430\u0435\u043c \u043a\u043e\u043b\u043e\u043d\u043a\u0443 \u043d\u0430\u0441\u0435\u043b\u0435\u043d\u0438\u044f\ndfPop = pd.Series(CityPop).reset_index()\ndfPop.columns = ['City', 'Population']\ndf = df.merge(dfPop, on='City', how='left')\n\n# \u041f\u043e\u0434\u0441\u0447\u0438\u0442\u044b\u0432\u0430\u0435\u043c \u043e\u0431\u0449\u0435\u0435 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0440\u0435\u0441\u0442\u043e\u0440\u0430\u043d\u043e\u0432 \u0432 \u043a\u0430\u0436\u0434\u043e\u043c \u0433\u043e\u0440\u043e\u0434\u0435\ndfUnRe = df.groupby('City')['Restaurant_id'].nunique().reset_index()\ndfUnRe.columns = ['City', 'Rest Count']\ndf = df.merge(dfUnRe, on='City', how='left')\n\n# \u041d\u0430\u0439\u0434\u0435\u043c \u043e\u0442\u043d\u043e\u0441\u0438\u0442\u0435\u043b\u044c\u043d\u044b\u0435 \u043f\u043e\u043a\u0430\u0437\u0430\u0442\u0435\u043b\u0438 GDP\ndf['GDR relativ'] = df['GDP'].apply(lambda x: x\/(df['GDP'].max()))\n\n# \u041d\u0430\u0439\u0434\u0435\u043c \u043e\u0442\u043d\u043e\u0441\u0438\u0442\u0435\u043b\u044c\u043d\u044b\u0435 \u043f\u043e\u043a\u0430\u0437\u0430\u0442\u0435\u043b\u0438 \u043d\u0430\u0441\u0435\u043b\u0435\u043d\u043d\u043e\u0441\u0442\u0438\ndf['Population relativ'] = df['Population'].apply(lambda x: x\/(df['Population'].max()))","61c0af40":"df.head(3)","bc3bd69f":"# \u041d\u0430\u0439\u0434\u0435\u043c \u0441\u0440\u0435\u0434\u043d\u0438\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u0430 \u043e\u0442\u0437\u044b\u0432\u043e\u0432 \u043f\u043e \u0433\u043e\u0440\u043e\u0434\u0430\u043c\ndfNoR = df.groupby('City')['Number of Reviews'].mean().reset_index()\ndfNoR.columns = ['City', 'Review mean']\ndf = df.merge(dfNoR, on='City', how='left')\n\n# \u0422\u0435\u043f\u0435\u0440\u044c \u0437\u0430\u043f\u043e\u043b\u043d\u0438\u043c \u043d\u0435\u0434\u043e\u0441\u0442\u0430\u044e\u0449\u0438\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f \u0432 Number of Reviews\n#df['Number of Reviews'] = df['Number of Reviews'].fillna(df['Review mean']) - \u0441\u043f\u0435\u0440\u0432\u0430 \u0437\u0430\u043f\u043e\u043b\u043d\u044f\u043b \u0441\u0440\u0435\u0434\u043d\u0438\u043c \u043f\u043e \u0433\u043e\u0440\u043e\u0434\u0430\u043c,\n# \u043d\u043e, \u043a\u0430\u043a \u043e\u043a\u0430\u0437\u0430\u043b\u043e\u0441\u044c, \u043f\u0440\u0438 \u0437\u0430\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u0438 \u043d\u0435\u0434\u043e\u0441\u0442\u0430\u044e\u0449\u0438\u0445 \u0437\u0430\u043d\u0447\u0435\u043d\u0438\u0439 \u0435\u0434\u0438\u043d\u0438\u0446\u0435\u0439, \u041c\u0410\u0415 \u0441\u043d\u0438\u0436\u0430\u0435\u0442\u0441\u044f\ndf['Number of Reviews'] = df['Number of Reviews'].fillna(1)","1100c41a":"\n# \u0427\u0438\u0441\u0442\u043e \u0434\u043b\u044f \u043f\u0440\u0438\u043a\u043e\u043b\u0430 \u043d\u0430\u0448\u0435\u043b \u0432 \u043a\u0430\u043a\u0438\u0445 \u0433\u043e\u0440\u043e\u0434\u0430\u0445 \u0441\u043a\u043e\u043b\u044c\u043a\u043e \u0435\u0441\u0442\u044c \u043c\u0438\u0448\u043b\u0435\u043d\u043e\u0432\u0441\u043a\u0438\u0445 \u0437\u0432\u0435\u0437\u0434 \u0443 \u0440\u0435\u0441\u0442\u043e\u0440\u0430\u043d\u043e\u0432. \u0412\u0434\u0440\u0443\u0433, \u044d\u0442\u043e \u043c\u043e\u0436\u0435\u0442 \u043e\u0442\u0440\u0430\u0436\u0430\u0442\u044c\n# \u0438 \u043e\u0431\u0449\u0435\u0435 \u043a\u0430\u0447\u0435\u0441\u0442\u0432\u043e \u0440\u0435\u0441\u0442\u043e\u0440\u0430\u043d\u043e\u0432 \u0432 \u0433\u043e\u0440\u043e\u0434\u0435?\nMichStars = {'Paris':118, 'Stockholm':0, 'London': 66, 'Berlin':16, 'Munich':13, 'Oporto': 0,\n       'Milan':15, 'Bratislava':0, 'Vienna':0, 'Rome':15, 'Barcelona':20, 'Madrid':15,\n       'Dublin':0, 'Brussels':21, 'Zurich':11, 'Warsaw':0, 'Budapest':0, 'Copenhagen':11,\n       'Amsterdam':11, 'Lyon':15, 'Hamburg':11, 'Lisbon':0, 'Prague':0, 'Oslo':0,\n       'Helsinki':0, 'Edinburgh':0, 'Geneva':0, 'Ljubljana':0, 'Athens':0,\n       'Luxembourg':16, 'Krakow':0}\n\ndfMS = pd.Series(MichStars).reset_index()\ndfMS.columns = ['City', 'Mich Stars']\ndf = df.merge(dfMS, on='City', how='left')","5d3749e7":"# \u0420\u044d\u043d\u043a\u0438\u043d\u0433 \u0440\u0435\u0441\u0442\u043e\u0440\u0430\u043d\u0430, \u043e\u0442\u043d\u043e\u0441\u0438\u0442\u0435\u043b\u044c\u043d\u043e \u0433\u043e\u0440\u043e\u0434\u0430, \u0432 \u043a\u043e\u0442\u043e\u0440\u043e\u043c \u044d\u0442\u043e\u0442 \u0440\u0435\u0441\u0442\u043e\u0440\u0430\u043d \u0440\u0430\u0441\u043f\u043e\u043b\u043e\u0436\u0435\u043d\ndf['Ranking mean'] = df['Ranking']\/ df['Rest Count']\n\n# \u0421\u043a\u043e\u043b\u044c\u043a\u043e \u0447\u0435\u043b\u043e\u0432\u0435\u043a \u043d\u0430 1 \u0440\u0435\u0441\u0442\u043e\u0440\u0430\u043d \u0432 \u0433\u043e\u0440\u043e\u0434\u0435\ndf['Men per Rest'] = df['Population'] \/ df['Rest Count']\n\n# \u0420\u044d\u043d\u043a\u0438\u043d\u0433 \u0440\u0435\u0441\u0442\u043e\u0440\u0430\u043d\u0430, \u043e\u0442\u043d\u043e\u0441\u0438\u0442\u0435\u043b\u044c\u043d\u043e \u0433\u043e\u0440\u043e\u0434\u0430 \u0438 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u0430 \u0447\u0435\u043b\u043e\u0432\u0435\u043a \u043d\u0430 \u0440\u0435\u0441\u0442\u043e\u0440\u0430\u043d\ndf['Ranking mean2'] = df['Ranking']\/ (df['Rest Count']*df['Men per Rest'])\n\n# \u041f\u043e\u0441\u043c\u043e\u0442\u0440\u0438\u043c, \u0441\u043a\u043e\u043b\u044c\u043a\u043e \u043e\u0442\u0437\u044b\u0432\u043e\u0432 \u0440\u0435\u0441\u0442\u043e\u0440\u0430\u043d\u0430 \u043f\u0440\u0438\u0445\u043e\u0434\u0438\u0442\u0441\u044f \u043d\u0430 \u043e\u0434\u043d\u043e\u0433\u043e \u0447\u0435\u043b\u043e\u0432\u0435\u043a\u0430\ndf['Review relative'] = df['Number of Reviews'] \/ df['Men per Rest']\n\n# \u041d\u0430\u0439\u0434\u0435\u043c Ranking \u043e\u0442\u043d\u043e\u0441\u0438\u0442\u0435\u043b\u044c\u043d\u043e\u0441 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u0430 \u0447\u0435\u043b\u043e\u0432\u0435\u043a \u043d\u0430 \u0440\u0435\u0441\u0442\u043e\u0440\u0430\u043d\ndf['Ranking relative'] = df['Ranking']\/df['Men per Rest']\n\n# \u041d\u0430\u0439\u0434\u0435\u043c \u0446\u0435\u043d\u044b, \u043e\u0442\u043d\u043e\u0441\u0438\u0442\u0435\u043b\u044c\u043d\u043e GDP\ndf['Price relative'] = df['GDR relativ']*df['Price New']","68c8d653":"\n# \u041f\u043e\u0441\u043c\u043e\u0442\u0440\u0438\u043c, \u0435\u0441\u0442\u044c \u043b\u0438 \u043a\u0430\u043a\u0438\u0435 \u043a\u043e\u0440\u0440\u0435\u043b\u044f\u0446\u0438\u0438 \u0441\u0440\u0435\u0434\u0438 \u043d\u0430\u0448\u0438\u0445 \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u044b\u0445. \u0410 \u0442\u043e \u043c\u043e\u0436\u0435\u0442 \u0437\u0440\u044f \u044f \u0432\u0441\u0435 \u0432\u044b\u0448\u0435 \u043d\u0430\u043b\u0435\u043f\u0438\u043b!)\n\nsns.set(font_scale=1)\nplt.subplots(figsize=(12, 12))\nsns.heatmap(df.corr(), square=True,\n              annot=True, fmt=\".1f\", linewidths=0.1, cmap=\"RdBu\")","6ce84f98":"# \u0418\u0442\u0430\u043a \u043d\u0430\u043c \u043e\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u043d\u043e \u043d\u0435 \u043d\u0443\u0436\u043d\u044b \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0438\u0435 \u043a\u043e\u043b\u043e\u043d\u043a\u0438: Ranking relative, Review relative, Rest Count, Population relativ,\n# GDR relativ, Price mean_x\n\ndf = df.drop(['Ranking relative','Review relative','Rest Count','Population relativ',\n         'GDR relativ', 'Price relative', 'Ranking mean2'],axis=1)","95297171":"sns.set(font_scale=1)\nplt.subplots(figsize=(12, 12))\nsns.heatmap(df.corr(), square=True,\n              annot=True, fmt=\".1f\", linewidths=0.1, cmap=\"RdBu\")","ea5c529d":"df.info()","0ac3bf8f":"# \u0421\u043e\u0437\u0434\u0430\u0434\u0438\u043c \u0434\u0443\u043c\u0438\u0441\u044b \u0434\u043b\u044f City\ndf = pd.get_dummies(df, columns=[ 'City',], dummy_na=True)\n\n# \u0421\u043e\u0437\u0434\u0430\u0434\u0438\u043c \u0434\u0443\u043c\u0438\u0441\u044b \u0434\u043b\u044f Price New\ndf = pd.get_dummies(df, columns=['Price New'], dummy_na=True)","a8bf2e7f":"# \u0410 \u0432\u043e\u0442 \u0441 \u0434\u0443\u043c\u043c\u0438\u0441\u0430\u043c\u0438 \u0434\u043b\u044f Cuisine Style \u043f\u0440\u0438\u0434\u0435\u0442\u0441\u044f \u043d\u0435\u043c\u043d\u043e\u0436\u043d\u043e \u043f\u043e\u0441\u043b\u043e\u0436\u043d\u0435\u0435\nfrom sklearn.preprocessing import MultiLabelBinarizer\n\nmlb = MultiLabelBinarizer()\nDummCuisin = pd.DataFrame(mlb.fit_transform(df['Cuisine Style']))","7cc96b91":"df = pd.concat([df,DummCuisin],axis=1)","1f20b37f":"# \u0423\u0434\u0430\u043b\u044f\u0435\u043c \u043a\u043e\u043b\u043e\u043d\u043a\u0438 \u0441 \u0434\u0430\u043d\u043d\u044b\u043c\u0438 \u0442\u0438\u043f\u0430 object\nobject_columns = [s for s in df.columns if df[s].dtypes == 'object']\n\ndf.drop(object_columns, axis = 1, inplace=True)","8f85fffd":"df.head(3)","e36cdd94":"df.info()","9da99af9":"train_data = df.query('sample == 1').drop(['sample'], axis=1)\ntest_data = df.query('sample == 0').drop(['sample'], axis=1)\n\ny = train_data.Rating.values            # \u043d\u0430\u0448 \u0442\u0430\u0440\u0433\u0435\u0442\nX = train_data.drop(['Rating'], axis=1)","74d04dbc":"# \u0412\u043e\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u043c\u0441\u044f \u0441\u043f\u0435\u0446\u0438\u0430\u043b\u044c\u043d\u043e\u0439 \u0444\u0443\u043d\u043a\u0446\u0438\u0435 train_test_split \u0434\u043b\u044f \u0440\u0430\u0437\u0431\u0438\u0432\u043a\u0438 \u0442\u0435\u0441\u0442\u043e\u0432\u044b\u0445 \u0434\u0430\u043d\u043d\u044b\u0445\n# \u0432\u044b\u0434\u0435\u043b\u0438\u043c 20% \u0434\u0430\u043d\u043d\u044b\u0445 \u043d\u0430 \u0432\u0430\u043b\u0438\u0434\u0430\u0446\u0438\u044e (\u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440 test_size)\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=RANDOM_SEED)","7fdbf2e7":"# \u043f\u0440\u043e\u0432\u0435\u0440\u044f\u0435\u043c\ntest_data.shape, train_data.shape, X.shape, X_train.shape, X_test.shape","d6efd2ee":"# \u0418\u043c\u043f\u043e\u0440\u0442\u0438\u0440\u0443\u0435\u043c \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u044b\u0435 \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0438:\nfrom sklearn.ensemble import RandomForestRegressor # \u0438\u043d\u0441\u0442\u0440\u0443\u043c\u0435\u043d\u0442 \u0434\u043b\u044f \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u044f \u0438 \u043e\u0431\u0443\u0447\u0435\u043d\u0438\u044f \u043c\u043e\u0434\u0435\u043b\u0438\nfrom sklearn import metrics # \u0438\u043d\u0441\u0442\u0440\u0443\u043c\u0435\u043d\u0442\u044b \u0434\u043b\u044f \u043e\u0446\u0435\u043d\u043a\u0438 \u0442\u043e\u0447\u043d\u043e\u0441\u0442\u0438 \u043c\u043e\u0434\u0435\u043b\u0438","f2c1b352":"# \u0421\u043e\u0437\u0434\u0430\u0451\u043c \u043c\u043e\u0434\u0435\u043b\u044c (\u041d\u0410\u0421\u0422\u0420\u041e\u0419\u041a\u0418 \u041d\u0415 \u0422\u0420\u041e\u0413\u0410\u0415\u041c)\nmodel = RandomForestRegressor(n_estimators=100, verbose=1, n_jobs=-1, random_state=RANDOM_SEED)","aa71b74e":"model.fit(X_train, y_train)","f585c14e":"# \u0418\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u043c \u043e\u0431\u0443\u0447\u0435\u043d\u043d\u0443\u044e \u043c\u043e\u0434\u0435\u043b\u044c \u0434\u043b\u044f \u043f\u0440\u0435\u0434\u0441\u043a\u0430\u0437\u0430\u043d\u0438\u044f \u0440\u0435\u0439\u0442\u0438\u043d\u0433\u0430 \u0440\u0435\u0441\u0442\u043e\u0440\u0430\u043d\u043e\u0432 \u0432 \u0442\u0435\u0441\u0442\u043e\u0432\u043e\u0439 \u0432\u044b\u0431\u043e\u0440\u043a\u0435.\n# \u041f\u0440\u0435\u0434\u0441\u043a\u0430\u0437\u0430\u043d\u043d\u044b\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f \u0437\u0430\u043f\u0438\u0441\u044b\u0432\u0430\u0435\u043c \u0432 \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u0443\u044e y_pred\ny_pred = model.predict(X_test)","8c0de272":"y_pred","8456de61":"# \u0421\u0440\u0430\u0432\u043d\u0438\u0432\u0430\u0435\u043c \u043f\u0440\u0435\u0434\u0441\u043a\u0430\u0437\u0430\u043d\u043d\u044b\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f (y_pred) \u0441 \u0440\u0435\u0430\u043b\u044c\u043d\u044b\u043c\u0438 (y_test), \u0438 \u0441\u043c\u043e\u0442\u0440\u0438\u043c \u043d\u0430\u0441\u043a\u043e\u043b\u044c\u043a\u043e \u043e\u043d\u0438 \u0432 \u0441\u0440\u0435\u0434\u043d\u0435\u043c \u043e\u0442\u043b\u0438\u0447\u0430\u044e\u0442\u0441\u044f\n# \u041c\u0435\u0442\u0440\u0438\u043a\u0430 \u043d\u0430\u0437\u044b\u0432\u0430\u0435\u0442\u0441\u044f Mean Absolute Error (MAE) \u0438 \u043f\u043e\u043a\u0430\u0437\u044b\u0432\u0430\u0435\u0442 \u0441\u0440\u0435\u0434\u043d\u0435\u0435 \u043e\u0442\u043a\u043b\u043e\u043d\u0435\u043d\u0438\u0435 \u043f\u0440\u0435\u0434\u0441\u043a\u0430\u0437\u0430\u043d\u043d\u044b\u0445 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0439 \u043e\u0442 \u0444\u0430\u043a\u0442\u0438\u0447\u0435\u0441\u043a\u0438\u0445.\nprint('MAE:', metrics.mean_absolute_error(y_test, y_pred))","fa12ae4f":"# \u0432 RandomForestRegressor \u0435\u0441\u0442\u044c \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e\u0441\u0442\u044c \u0432\u044b\u0432\u0435\u0441\u0442\u0438 \u0441\u0430\u043c\u044b\u0435 \u0432\u0430\u0436\u043d\u044b\u0435 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0438 \u0434\u043b\u044f \u043c\u043e\u0434\u0435\u043b\u0438\nplt.rcParams['figure.figsize'] = (10,10)\nfeat_importances = pd.Series(model.feature_importances_, index=X.columns)\nfeat_importances.nlargest(15).plot(kind='barh')","e4b0be9d":"test_data.sample(10)","c3ac97df":"test_data = test_data.drop(['Rating'], axis=1)","e0f19dd8":"sample_submission","79571c2b":"predict_submission = model.predict(test_data)","5d916822":"predict_submission","3b074d25":"def round_custom(num):\n    return round(num \/ 0.5) * 0.5","188cdbef":"predict_submission_round=[]\nfor i in predict_submission:\n    predict_submission_round.append(round_custom(i))","a02adc68":"predict_submission_round","f240e089":"sample_submission['Rating'] = predict_submission_round\nsample_submission.to_csv('submission_new.csv', index=False)\nsample_submission.head(10)","d2e18f7e":"\u0422\u0435\u043f\u0435\u0440\u044c \u043a\u043e\u043b\u043e\u043d\u043a\u0430 Cuisine Style \u0437\u0430\u043f\u043e\u043b\u043d\u0435\u043d\u0430","201f0552":"\u0417\u0430\u043c\u0435\u0442\u0438\u043c, \u0447\u0442\u043e \u0438\u0441\u0445\u043e\u0434\u043d\u044b\u0435 \u0440\u0435\u0439\u0442\u0438\u043d\u0433\u0438 \u0440\u0435\u0441\u0442\u043e\u0440\u0430\u043d\u043e\u0432 \u043e\u043a\u0440\u0443\u0433\u043b\u044f\u044e\u0442\u0441\u044f \u0441 \u0448\u0430\u0433\u043e\u043c 0.5. \u041f\u043e\u044d\u0442\u043e\u043c\u0443 \u0438 \u043f\u0440\u0435\u0434\u0441\u043a\u0430\u0437\u0430\u043d\u043d\u044b\u0435 \u0442\u043e\u0436\u0435 \u043e\u043a\u0440\u0443\u0433\u043b\u0438\u043c \u0441 \u0448\u0430\u0433\u043e\u043c 0.5","1cada1d3":"# \u0420\u0430\u0437\u0431\u0438\u0432\u0430\u0435\u043c \u0434\u0430\u0442\u0430\u0444\u0440\u0435\u0439\u043c \u043d\u0430 \u0447\u0430\u0441\u0442\u0438, \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u044b\u0435 \u0434\u043b\u044f \u043e\u0431\u0443\u0447\u0435\u043d\u0438\u044f \u0438 \u0442\u0435\u0441\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f \u043c\u043e\u0434\u0435\u043b\u0438","0219a5b7":"\u041a\u0430\u043a \u0432\u0438\u0434\u0438\u043c, \u0434\u043b\u044f \u0432\u0441\u0435\u0445 \u0433\u043e\u0440\u043e\u0434\u043e\u0432 \u043d\u0430\u0438\u0431\u043e\u043b\u0435\u0435 \u0447\u0430\u0441\u0442\u0430\u044f \u0446\u0435\u043d\u043e\u0432\u0430\u044f \u043a\u0430\u0442\u0435\u0433\u043e\u0440\u0438\u044f - 2. \u041f\u043e\u044d\u0442\u043e\u043c\u0443 \u043f\u0440\u043e\u0441\u0442\u043e \u0437\u0430\u043f\u043e\u043b\u043d\u0438\u043c \u043f\u0440\u043e\u043f\u0443\u0441\u043a\u0438 \u0432 \u0434\u0430\u043d\u043d\u044b\u0445 \u0434\u0432\u043e\u0439\u043a\u043e\u0439","15744f55":"\u0434\u043e\u0431\u0430\u0432\u0438\u043c \u0435\u0449\u0435 \u043d\u0435\u0441\u043a\u043e\u043b\u044c\u043a\u043e \u0444\u0438\u0442\u0447:","bd665809":"\u0422\u0435\u043f\u0435\u0440\u044c \u0440\u0430\u0437\u0431\u0435\u0440\u0435\u043c\u0441\u044f \u0441 \u043a\u043e\u043b\u043e\u043d\u043a\u043e\u0439 Price","2d25ae99":"#\u041f\u0440\u0435\u0434\u0441\u043a\u0430\u0437\u0430\u043d\u0438\u0435 \u0440\u0435\u0439\u0442\u0438\u043d\u0433\u0430 \u0440\u0435\u0441\u0442\u043e\u0440\u0430\u043d\u0430 \u043f\u043e \u0432\u0435\u0440\u0441\u0438\u0438 TripAdvisor\n\u0421\u043e\u0431\u0441\u0442\u0432\u0435\u043d\u043d\u043e \u044d\u0442\u043e \u043a\u0430\u0433\u0433\u043b\u043e\u0432\u0441\u043a\u043e\u0435 \u0441\u043e\u0440\u0435\u0432\u043d\u043e\u0432\u0430\u043d\u0438\u0435 \u0441\u043e \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0438\u043c\u0438 \u0432\u0432\u043e\u0434\u043d\u044b\u043c\u0438:\n\n\u0412 \u044d\u0442\u043e\u043c \u0441\u043e\u0440\u0435\u0432\u043d\u043e\u0432\u0430\u043d\u0438\u0438 \u0432\u0430\u043c \u0431\u0443\u0434\u0435\u0442 \u043f\u0440\u0435\u0434\u043b\u043e\u0436\u0435\u043d \u0434\u0430\u0442\u0430\u0441\u0435\u0442, \u0441\u043e\u0434\u0435\u0440\u0436\u0430\u0449\u0438\u0439 \u0441\u0432\u0435\u0434\u0435\u043d\u0438\u044f \u043e \u0440\u0435\u0441\u0442\u043e\u0440\u0430\u043d\u0430\u0445. \u0421 \u043f\u043e\u043c\u043e\u0449\u044c\u044e \u0438\u043c\u0435\u044e\u0449\u0435\u0433\u043e \u0432 \u0432\u0430\u0448\u0435\u043c \u0440\u0430\u0441\u043f\u043e\u0440\u044f\u0436\u0435\u043d\u0438\u0438 \u043a\u043e\u0434\u0430, \u0432\u0430\u043c \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e \u0441\u043e\u0437\u0434\u0430\u0442\u044c \u043c\u043e\u0434\u0435\u043b\u044c, \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u044e\u0449\u0443\u044e \u0430\u043b\u0433\u043e\u0440\u0438\u0442\u043c RandomForestRegression, \u043a\u043e\u0442\u043e\u0440\u0430\u044f \u0431\u0443\u0434\u0435\u0442 \u043f\u0440\u043e\u0433\u043d\u043e\u0437\u0438\u0440\u043e\u0432\u0430\u0442\u044c \u0440\u0435\u0439\u0442\u0438\u043d\u0433 \u0440\u0435\u0441\u0442\u043e\u0440\u0430\u043d\u0430 \u043f\u043e \u0432\u0435\u0440\u0441\u0438\u0438 TripAdvidor.\n\n\u041e\u0441\u043d\u043e\u0432\u043d\u0430\u044f \u0446\u0435\u043b\u044c: \u043a\u0430\u0447\u0435\u0441\u0442\u0432\u0435\u043d\u043d\u043e \u043e\u0447\u0438\u0441\u0442\u0438\u0442\u044c \u0434\u0430\u0442\u0430\u0441\u0435\u0442, \u043f\u043e\u0434\u043e\u0431\u0440\u0430\u0442\u044c \u043f\u043e\u0434\u0445\u043e\u0434\u044f\u0449\u0438\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f \u0434\u043b\u044f \u0437\u0430\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f \u043f\u0440\u043e\u043f\u0443\u0441\u043a\u043e\u0432 \u0438 \u0441\u043e\u0437\u0434\u0430\u0442\u044c \u043d\u043e\u0432\u044b\u0435 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0438 \u043d\u0430 \u043e\u0441\u043d\u043e\u0432\u0435 \u0442\u043e\u0439 \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u0438, \u043a\u043e\u0442\u043e\u0440\u0443\u044e \u0432\u044b \u0441\u043c\u043e\u0436\u0435\u0442\u0435 \u0438\u0437\u0432\u043b\u0435\u0447\u044c \u0438\u0437 \u0438\u043c\u0435\u044e\u0449\u0438\u0445\u0441\u044f \u0432 \u0432\u0430\u0448\u0435\u043c \u0440\u0430\u0441\u043f\u043e\u0440\u044f\u0436\u0435\u043d\u0438\u0438 \u0434\u0430\u043d\u043d\u044b\u0445.\n\n\u0423\u0441\u043b\u043e\u0432\u0438\u044f \u0441\u043e\u0440\u0435\u0432\u043d\u043e\u0432\u0430\u043d\u0438\u044f: \u0412\u0441\u0435 \u0443\u0447\u0430\u0441\u0442\u043d\u0438\u043a\u0438 \u0434\u043e\u043b\u0436\u043d\u044b \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c \u043e\u0434\u0438\u043d \u0438 \u0442\u043e\u0442 \u0436\u0435 \u0430\u043b\u0433\u043e\u0440\u0438\u0442\u043c \u0441 \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u0430\u043c\u0438, \u0437\u0430\u0434\u0430\u043d\u043d\u044b\u043c\u0438 \u043f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e. \u0420\u0430\u0437\u0440\u0435\u0448\u0435\u043d\u043e \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c \u0432\u043d\u0435\u0448\u043d\u0438\u0435 \u0434\u0430\u043d\u043d\u044b\u0435.","bc7b25f9":"\u041d\u0430\u0439\u0434\u0435\u043c \u0434\u043b\u044f \u043a\u0430\u0436\u0434\u043e\u0433\u043e \u0433\u043e\u0440\u043e\u0434\u0430 \u043d\u0430\u0438\u0431\u043e\u043b\u0435\u0435 \u0432\u0435\u0440\u043e\u044f\u043d\u0443\u044e \u0446\u0435\u043d\u043e\u0432\u0443\u044e \u043f\u043e\u043b\u0438\u0442\u0438\u043a\u0443 \u0440\u0435\u0441\u0442\u043e\u0440\u0430\u043d\u043e\u0432"}}