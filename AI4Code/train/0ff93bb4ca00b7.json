{"cell_type":{"18e0b3ee":"code","881462ed":"code","cfaa924a":"code","3f5288b5":"code","06965427":"code","1925aa87":"code","1e14f625":"code","8557ba48":"code","ce403777":"code","c6e601ba":"code","bea3cb46":"code","66186f15":"code","38e5b7bb":"code","82f893a6":"code","648c7c53":"code","fcfb9835":"code","4114c1a8":"code","96b015db":"code","8ce017b5":"code","3505a8d6":"markdown","55abb366":"markdown"},"source":{"18e0b3ee":"\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n","881462ed":"# reading the data into a dataframe\ndf=pd.read_csv('..\/input\/insurance\/insurance.csv')\ndf.head()","cfaa924a":"# looking into the dataframe for any missing values , getting an idea about the different data types\ndf.info()\n\n# As can be seen there are no missing columns , also sex, smoker and region are categorical varibales\n","3f5288b5":"df.describe()","06965427":"# lets take a look at our dataset\ndf.shape\n# our dataset has 1338 rows and 7 cols ","1925aa87":"# lets look at some random rows in our dataset\ndf.sample(6)","1e14f625":"# our target feature\/columns is charges ( the columns we want our model to predict)\ny=df.charges.to_frame()\ny","8557ba48":"# let's separate our remaining data and get in our x variable ( kind of convention for better readability)\nx=df.iloc[:,:-1]\nx","ce403777":"from xgboost import XGBRegressor\n\n# we will use xgbregressor which a boosting approach ( which will disucss later )","c6e601ba":"# let's split our data into train and test sets \nfrom sklearn.model_selection import train_test_split\nx_train,x_test,y_train,y_test=train_test_split(x,y,test_size=.2,random_state=2)\n\n","bea3cb46":"# let's create our model now which is fairly simple one line code\nmodel=XGBRegressor(reg_aplha=.5)\n# our model is created ( with default parameters , you can check my other \n#notebooks if you want to learn more about these parameters)","66186f15":"# now remember our data has categorical variables so let's convert them to numeric \nfrom sklearn.preprocessing import LabelEncoder\n\n#let's look at categorical varibales one by one\n\ndf.sex.value_counts()\n\n# there are only different values for sex so label Encoder can be used ( if there are more than 15 different values\n# for the categorical column then we should not use label Encoder)\n","38e5b7bb":"# let's create an instance of our labelEncoder \nencoder=LabelEncoder()\n# fit the encoder to the train and test data for feature sex\nx_train.sex=encoder.fit_transform(x_train.sex)\nx_test.sex=encoder.transform(x_test.sex)","82f893a6":"# As you can see the sex column now has numberic value 0\/1\nx_train","648c7c53":"# lets apply the same procedure to smoker and region features \n# lets use get_dummies this time\n\nx_train.smoker=pd.get_dummies(x_train.smoker,drop_first=True)\nx_test.smoker=pd.get_dummies(x_test.smoker,drop_first=True)\nx_train\n\n# we get similar result from get_dummies function (be careful of the dummy trap but let's leave that for another day  )","fcfb9835":"# let's encode region using LabelEncoder again , we can use get dummies as well \nencoder1=LabelEncoder()\nx_train.region=encoder1.fit_transform(x_train.region)\nx_test.region=encoder1.transform(x_test.region)\nx_test","4114c1a8":"# now that all are columns \/ features are in numeric let's try and fit our model \nmodel.fit(x_train,y_train)\n# the model has default paramters for now","96b015db":"# let's check our training accuracy \nmodel.score(x_train,y_train)\n","8ce017b5":"# model has training accuracy of 99% \n# let's see how our model does on test data \n\nmodel.score(x_test,y_test)\n","3505a8d6":"We have two choices we can spend some time cleaning our data ie. converting the categorical variables into\nnumeric values using Label Encoder , get_dummies , to_categorical or other methods but\ninstead we will take a new approach and try to build a working model ASAP and then spend some time fine tuning the model and we will see if Data preprocessing gives us any better results","55abb366":"# That a simple machine learning model for a simple dataset with not many feature and a small number of records.\n\n# If you are intrested in optimizing this model to increase it's test accuracy plz check my other notebook,"}}