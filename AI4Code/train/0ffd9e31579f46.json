{"cell_type":{"af16b10a":"code","2ebe4dc1":"code","2a5240f2":"code","798ffb50":"code","fbba91e2":"code","a9f0a29d":"code","a0ebf9c6":"code","1c2b5d33":"code","30d7f2cf":"code","6e55b5d6":"code","b9a33963":"code","41cfb72b":"code","b4156f37":"code","26faa8c9":"code","f8bd5537":"code","1943a3c8":"code","0a7a3748":"code","64371648":"code","aff0e869":"code","6326ede5":"code","1cbe6bb4":"code","ed50fe24":"code","859e6b8c":"code","0b75ee0d":"code","0402d89c":"code","7f619348":"code","9809a4da":"code","e601fca2":"code","763895b8":"code","68493816":"code","d7b8cca0":"code","9fc5e66e":"code","15936f81":"code","153bc559":"code","d9c24c6d":"code","d3b14fad":"code","83dc243a":"code","7f8ecf76":"code","f6d85650":"code","701afdd9":"code","a25beca4":"code","de94fdcf":"code","4876e61b":"code","d261108f":"code","0d56285a":"code","63bb3b83":"code","7ad4988e":"code","e1f835bf":"code","ff9af34e":"code","3201321f":"code","0764193f":"code","af293213":"code","58d643db":"code","961e03ab":"code","39c951a9":"code","1f25e311":"code","257efa82":"code","04974243":"code","52663c34":"code","0344b7d3":"code","d6df4eab":"code","34d3c192":"code","8d49f202":"code","b6581b54":"code","2d8641df":"code","254985a6":"markdown","f9f7fbb5":"markdown","bf810a8b":"markdown","8b5e3971":"markdown","ff1c325c":"markdown","c07e4ae5":"markdown","6605864f":"markdown","2c7a023e":"markdown","1bbb4a47":"markdown","503bf40f":"markdown","78788718":"markdown","4d511375":"markdown","bb5e2031":"markdown","9940ed2f":"markdown","61839b05":"markdown","8b1f2f21":"markdown","e2935cd1":"markdown"},"source":{"af16b10a":"import os\n\nimport pandas as pd\nimport numpy as np\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n\nplt.style.use('dark_background')","2ebe4dc1":"train = pd.read_csv('\/kaggle\/input\/liverpool-ion-switching\/train.csv', dtype={'time': np.float32, 'signal': np.float32, 'open_channels':np.int32})\ntest  = pd.read_csv('\/kaggle\/input\/liverpool-ion-switching\/test.csv', dtype={'time': np.float32, 'signal': np.float32})\n\ntrain_clean_kalman = pd.read_csv('\/kaggle\/input\/clean-kalman\/train_clean_kalman.csv', dtype={'time': np.float32, 'signal': np.float32, 'open_channels':np.int32})\ntest_clean_kalman  = pd.read_csv('\/kaggle\/input\/clean-kalman\/test_clean_kalman.csv', dtype={'time': np.float32, 'signal': np.float32})\n\ntrain_clean = pd.read_csv('\/kaggle\/input\/data-without-drift\/train_clean.csv', dtype={'time': np.float32, 'signal': np.float32, 'open_channels':np.int32})\ntest_clean  = pd.read_csv('\/kaggle\/input\/data-without-drift\/test_clean.csv', dtype={'time': np.float32, 'signal': np.float32})\n\ntrain_sin = pd.read_csv('\/kaggle\/input\/remove-drift-using-a-sine-function\/train_wo_drift.csv', dtype={'time': np.float32, 'signal': np.float32, 'open_channels':np.int32})\ntest_sin  = pd.read_csv('\/kaggle\/input\/remove-drift-using-a-sine-function\/test_wo_drift.csv', dtype={'time': np.float32, 'signal': np.float32})","2a5240f2":"def plot_open_channels_signal(df: pd.DataFrame, vline=[]):\n    fig, ax = plt.subplots(1, 1, figsize=(10, 10))\n    \n    ax.plot(df.signal, df.open_channels, '.', color='fuchsia', alpha=0.25)\n    for x in vline:\n        ax.axvline(x, alpha=0.75, color='tomato')\n    ax.set_xlabel('Signal')\n    ax.set_ylabel('Open Channels')\n    plt.show()\n    \n    \ndef plot_data(df: pd.DataFrame):\n    if 'open_channels' in df.columns:\n        fig, (ax1, ax2) = plt.subplots(2, 1, figsize=(24, 16))\n    \n        ax2.plot(df.time, df.open_channels, color='royalblue', alpha=0.75)\n        ax2.set_xlabel('time')\n        ax2.set_ylabel('Open Channels')\n    else:\n        fig, ax1 = plt.subplots(1, 1, figsize=(24, 8))\n    \n    ax1.plot(df.time, df.signal, color='royalblue', alpha=0.75)\n    ax1.set_xlabel('time')\n    ax1.set_ylabel('Signal')\n    plt.show()\n    \n    \ndef plot_data_emission(df: pd.DataFrame, timestamps: list = [], roi=None):\n    fig, ax = plt.subplots(1, 1, figsize=(24, 8))\n    \n    ax.plot(df.time, df.signal, color='royalblue', alpha=0.75)\n    for start, end in timestamps:\n        ax.axvspan(start, end, color='lime', alpha=0.5)\n    ax.set_xlabel('time')\n    ax.set_ylabel('Signal')\n    if roi is not None:\n        plt.xlim(roi)\n    plt.show()\n    \n    \ndef distplot(series: pd.Series, bound: float = None):\n    fig, ax = plt.subplots(1, 1, figsize=(10, 10))\n    \n    sns.distplot(series, ax=ax, color='darkorange')\n    if bound is not None:\n        ax.axvline(bound)\n    plt.show()\n    \n    \ndef shiftplot(df:pd.DataFrame, open_channel:int, level:float):\n    fig, ax = plt.subplots(1, 1, figsize=(24, 7))\n\n    ax.plot(df.signal, color='royalblue')\n\n    ax.plot(df.signal[(df.open_channels==open_channel) & (df.signal < level)], '.', color='cyan', alpha=0.75, label = 'left part')\n    ax.plot(df.signal[(df.open_channels==open_channel) & (df.signal >= level)], '.', color='deeppink', alpha=0.25, label = 'right part');\n    ax.set_xlabel('Time')\n    ax.set_ylabel('Signal')\n    plt.legend()\n    plt.show();","798ffb50":"plot_open_channels_signal(train)","fbba91e2":"plot_data(train)","a9f0a29d":"plot_data(test)","a0ebf9c6":"plot_open_channels_signal(train_clean)","1c2b5d33":"plot_data(train_clean)","30d7f2cf":"plot_data(test_clean)","6e55b5d6":"plot_open_channels_signal(train_sin)","b9a33963":"plot_data(train_sin)","41cfb72b":"plot_data(test_sin)","b4156f37":"plot_open_channels_signal(train_clean_kalman)","26faa8c9":"plot_data(train_clean_kalman)","f8bd5537":"plot_data(test_clean_kalman)","1943a3c8":"plot_data_emission(train_clean_kalman, roi=[47.5, 48])","0a7a3748":"FIRST_EMISSION = (47.857, 47.863)\nplot_data_emission(train_clean_kalman, [FIRST_EMISSION,], roi=[47.5, 48])","64371648":"plot_data_emission(train_clean_kalman, roi=[360, 390])","aff0e869":"SECOND_EMISSION = (364.229, 382.343)\nplot_data_emission(train_clean_kalman, [SECOND_EMISSION,], roi=[360, 390])","6326ede5":"plot_data_emission(train_clean_kalman, [FIRST_EMISSION, SECOND_EMISSION])","1cbe6bb4":"train_ckwe = train_clean_kalman_without_emission = train_clean_kalman.loc[(train_clean_kalman.time < FIRST_EMISSION[0]) | (train_clean_kalman.time > FIRST_EMISSION[1]), :]\ntrain_ckwe = train_clean_kalman_without_emission = train_ckwe.loc[(train_ckwe.time < SECOND_EMISSION[0]) | (train_ckwe.time > SECOND_EMISSION[1]), :]\n\ntrain_cwe = train_clean_without_emission = train_clean.loc[(train_clean.time < FIRST_EMISSION[0]) | (train_clean.time > FIRST_EMISSION[1]), :]\ntrain_cwe = train_clean_without_emission = train_cwe.loc[(train_cwe.time < SECOND_EMISSION[0]) | (train_cwe.time > SECOND_EMISSION[1]), :]\n\ntrain_swe = train_sin_without_emission = train_sin.loc[(train_sin.time < FIRST_EMISSION[0]) | (train_sin.time > FIRST_EMISSION[1]), :]\ntrain_swe = train_sin_without_emission = train_swe.loc[(train_swe.time < SECOND_EMISSION[0]) | (train_swe.time > SECOND_EMISSION[1]), :]","ed50fe24":"plot_data_emission(train_ckwe, [FIRST_EMISSION, SECOND_EMISSION])","859e6b8c":"plot_open_channels_signal(train_swe)","0b75ee0d":"levels = [-4., -2.95, -1.7, -0.45, 0.98, 2.25]\n\nplot_open_channels_signal(train_swe, levels)","0402d89c":"distplot(train_ckwe.signal[train_swe.open_channels==0], -4.)","7f619348":"distplot(train_ckwe.signal[train_swe.open_channels==1], -2.95)","9809a4da":"distplot(train_ckwe.signal[train_swe.open_channels==2], -1.7)","e601fca2":"distplot(train_ckwe.signal[train_swe.open_channels==3], -0.45)","763895b8":"distplot(train_ckwe.signal[train_swe.open_channels==4], 0.98)","68493816":"distplot(train_ckwe.signal[train_swe.open_channels==5], 2.25)","d7b8cca0":"shiftplot(train_ckwe, 0, -4.)","9fc5e66e":"shiftplot(train_ckwe, 1, -2.95)","15936f81":"shiftplot(train_ckwe, 2, -1.7)","153bc559":"shiftplot(train_ckwe, 3, -.45)","d9c24c6d":"shiftplot(train_ckwe, 4, .98)","d3b14fad":"shiftplot(train_ckwe, 5, 2.25)","83dc243a":"rights_mean = []\nrights_signal = []\nfor i, l in enumerate(levels):\n    rights_mask = (train_ckwe.open_channels==i) & (train_ckwe.signal >= l)\n    rights_mean.append(train_ckwe.signal[rights_mask].mean())\n    rights_signal.append(train_ckwe.signal[rights_mask])","7f8ecf76":"left_mean = []\nleft_signal = []\nfor i, l in enumerate(levels):\n    left_mask = (train_ckwe.open_channels==i) & (train_ckwe.signal < l)\n    left_mean.append(train_ckwe.signal[left_mask].mean())\n    left_signal.append(train_ckwe.signal[left_mask])","f6d85650":"fig, ax = plt.subplots(1, 1, figsize=(10,10))\n\nax.plot(levels, np.arange(0, 6), color='darkorange', label='bound');\nax.plot(levels, np.arange(0, 6), '*', color='darkorange');\n\nax.plot(left_mean, np.arange(0, 6), color='crimson', label='left signal part');\nax.plot(left_mean, np.arange(0, 6), '*', color='crimson');\nfor i, s in enumerate(left_signal):\n    ax.plot(s, np.ones_like(s)*i, '.', color='crimson', alpha=0.01)\n\nax.plot(rights_mean, np.arange(0, 6), color='indigo', label='right signal part');\nax.plot(rights_mean, np.arange(0, 6), '*', color='indigo');\nfor i, s in enumerate(rights_signal):\n    ax.plot(s, np.ones_like(s)*i, '.', color='indigo', alpha=0.01)\n\nax.set_xlabel('Signal')\nax.set_ylabel('Open Channels')\nplt.legend();","701afdd9":"dist = [(l - r)**2 for l, r in zip(left_mean, rights_mean)]","a25beca4":"fig, ax = plt.subplots(1, 1, figsize=(10,10))\n\nax.plot(dist, np.arange(0, 6), color='darkgreen');\nax.plot(dist, np.arange(0, 6), '*', color='darkgreen');\nax.axvline(np.mean(dist[:]), color='lime', label=f'{np.mean(dist[:])}')\nax.axvline(np.mean(dist[1:]), color='tomato', label=f'{np.mean(dist[1:])}')\nax.axvline(np.exp(2), color='yellow', label='e**2')\nax.set_xlabel('(LeftSignalMean - RightSignalMean)**2')\nax.set_ylabel('Open Channels')\nplt.legend();","de94fdcf":"SGNAL_SHIFT_CONSTANT = np.exp(1)\nSGNAL_SHIFT_CONSTANT","4876e61b":"train_ckwe.loc[2000000:2500000, 'signal'] += SGNAL_SHIFT_CONSTANT\ntrain_ckwe.loc[4500000:, 'signal'] += SGNAL_SHIFT_CONSTANT\n\ntrain_cwe.loc[2000000:2500000, 'signal'] += SGNAL_SHIFT_CONSTANT\ntrain_cwe.loc[4500000:, 'signal'] += SGNAL_SHIFT_CONSTANT\n\ntrain_swe.loc[2000000:2500000, 'signal'] += SGNAL_SHIFT_CONSTANT\ntrain_swe.loc[4500000:, 'signal'] += SGNAL_SHIFT_CONSTANT","d261108f":"plot_data(train_cwe)","0d56285a":"plot_open_channels_signal(train_ckwe)","63bb3b83":"distplot(train_ckwe.signal[train_ckwe.open_channels==0])","7ad4988e":"distplot(train_ckwe.signal[train_ckwe.open_channels==1],)","e1f835bf":"distplot(train_ckwe.signal[train_ckwe.open_channels==2])","ff9af34e":"distplot(train_ckwe.signal[train_ckwe.open_channels==3])","3201321f":"distplot(train_ckwe.signal[train_ckwe.open_channels==4])","0764193f":"distplot(train_ckwe.signal[train_ckwe.open_channels==5])","af293213":"shiftplot(train_ckwe, 0, -4.)","58d643db":"shiftplot(train_ckwe, 1, -2.95)","961e03ab":"shiftplot(train_ckwe, 2, -1.7)","39c951a9":"shiftplot(train_ckwe, 3, -.45)","1f25e311":"shiftplot(train_ckwe, 4, .98)","257efa82":"shiftplot(train_ckwe, 5, 2.25)","04974243":"test_clean_kalman.loc[500000:600000, 'signal'] += SGNAL_SHIFT_CONSTANT\ntest_clean_kalman.loc[700000:800000, 'signal'] += SGNAL_SHIFT_CONSTANT\n\ntest_clean.loc[500000:600000, 'signal'] += SGNAL_SHIFT_CONSTANT\ntest_clean.loc[700000:800000, 'signal'] += SGNAL_SHIFT_CONSTANT\n\ntest_sin.loc[500000:600000, 'signal'] += SGNAL_SHIFT_CONSTANT\ntest_sin.loc[700000:800000, 'signal'] += SGNAL_SHIFT_CONSTANT","52663c34":"plot_data(test_clean_kalman)","0344b7d3":"train_ckwe.to_csv('train_clean_kalman.csv')\ntest_clean_kalman.to_csv('test_clean_kalman.csv')\n\ntrain_cwe.to_csv('train_clean.csv')\ntest_clean.to_csv('test_clean.csv')\n\ntrain_swe.to_csv('train_sin.csv')\ntest_sin.to_csv('test_sin.csv')","d6df4eab":"BOUNDS = [-2.1, -0.9, 0.3, 1.5, 2.78, 3.99, 5.25, 6.5, 7.7, 8.95, 8.95]\n\nfig, ax = plt.subplots(1, 1, figsize=(10, 10))\n\nfor i, bound in enumerate(BOUNDS):\n    sns.distplot(train_ckwe.signal[train_ckwe.open_channels == i], ax=ax, color='darkorange')\n    if bound is not None:\n        ax.axvline(bound)\nplt.show()","34d3c192":"def boundery_classifier(x):\n    for i in range(10):\n        if x < BOUNDS[i]:\n            return i\n    return 10","8d49f202":"train_ckwe['pred'] = train_ckwe.signal.apply(boundery_classifier)","b6581b54":"from sklearn.metrics import f1_score, accuracy_score\n\nprint(\"Accuracy =\", accuracy_score(y_pred=train_ckwe['pred'].values, y_true=train_ckwe['open_channels'].values,))\nprint(\"F1 macro =\", f1_score(y_pred=train_ckwe['pred'].values, y_true=train_ckwe['open_channels'].values, average='macro'))","2d8641df":"df_subm = pd.read_csv(\"..\/input\/liverpool-ion-switching\/sample_submission.csv\")\ndf_subm['open_channels'] = test_clean_kalman.signal.apply(boundery_classifier)\ndf_subm.to_csv(\"boundary.csv\", float_format='%.4f', index=False)","254985a6":"#### Data without drift by [Chris Deotte](https:\/\/www.kaggle.com\/cdeotte)","f9f7fbb5":"## Outliers ","bf810a8b":"## \"Ghost\" drift\nThe chart above has a very interesting relationship: a mirror image of the signal values \u200b\u200brelative to the point for open channels from 0 to 5, which can indicate a shift in values \u200b\u200bin some pieces of the signal.","8b5e3971":"#### Second Outliers","ff1c325c":"## Initial Data","c07e4ae5":"## Save results","6605864f":"## Boundary Classifier","2c7a023e":"#### First Outliers","1bbb4a47":"## Let's remove \"Ghost\" drift","503bf40f":"## Reference\n* [Clean Removal of Data Drift](https:\/\/www.kaggle.com\/eunholee\/remove-drift-using-a-sine-function)\n* [remove drift using a sine function](https:\/\/www.kaggle.com\/eunholee\/remove-drift-using-a-sine-function)\n* [A signal processing approach - Kalman Filtering](https:\/\/www.kaggle.com\/teejmahal20\/a-signal-processing-approach-kalman-filtering?scriptVersionId=30696729)\n* [Data Without Drift](https:\/\/www.kaggle.com\/cdeotte\/data-without-drift)\n* [clean_kalman](https:\/\/www.kaggle.com\/ragnar123\/clean-kalman)","78788718":"## Conclusion\nIn this research I detect and remove outliers and \"Ghost\" drift. I hope that current research help construct more accurate model.","4d511375":"## Data without drift with Kalman Filter postprocessing by [ragnar](https:\/\/www.kaggle.com\/ragnar123)","bb5e2031":"Training data has two obvious outliers that are easiest to remove from the training set.","9940ed2f":"## Load Data","61839b05":"## Help Functions","8b1f2f21":"## Data without drift","e2935cd1":"#### Data without drift by [Eunho Lee](https:\/\/www.kaggle.com\/eunholee)"}}