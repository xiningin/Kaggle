{"cell_type":{"4f90f5c9":"code","06c77476":"code","9b4db2ef":"code","98c3bcce":"code","bdb21875":"code","2d69d2ba":"code","d5aaeb3e":"code","ad3e2bb3":"code","e9c0593f":"code","3091e7b3":"code","716f4812":"code","d059ef4a":"code","4089e70f":"code","95fac3f9":"code","6fea1bb3":"code","dbca830f":"code","53c9ba98":"code","fdbbe481":"code","a90d74c4":"code","3077c778":"code","9de2c5a2":"code","3a2d8cb0":"code","a27e0f28":"code","61f5e19d":"code","035c8b91":"code","de16354d":"code","977efe95":"code","5608fc32":"code","3d4efb8e":"code","854a6c9f":"code","48edfdab":"code","e3a3bce7":"code","158bca45":"code","3b5142ce":"code","f33edfd9":"code","0bc7d2e6":"code","e5980847":"code","c9eac47b":"code","e31036bc":"code","8589e95d":"code","062c9915":"code","7e0dacbe":"code","9fe623fb":"code","e941de45":"code","43a963ed":"code","951a7150":"code","9aeea964":"code","0a76051b":"code","6800cf38":"code","ce5930d5":"code","74d62f07":"code","3465018c":"code","95828537":"code","7adddeed":"code","0505e361":"code","4ab50b76":"code","c1e47802":"code","388be96a":"code","215f53e1":"code","b10b268f":"code","4c61653c":"code","f72c665d":"code","739fe694":"code","9bf632de":"code","cabee073":"code","3d5d75b5":"code","d3ed80c3":"code","13a43594":"code","1e398014":"code","1514b054":"code","dc431fbb":"code","7f903d07":"code","698a2e47":"code","739a11c9":"code","cca4f466":"code","1c9ecc88":"code","955b71af":"code","56a706f0":"code","8161258c":"code","d40172d7":"code","721b73e9":"code","b40d5097":"code","08a81d9a":"code","cd4901e5":"code","dc54017a":"code","97b23c22":"code","a8305c80":"code","0b51f5da":"code","207da82c":"code","09d31331":"code","329efb18":"code","338eabfb":"code","59919ad0":"code","4c314bf0":"code","b884ec32":"code","ebe305d0":"code","67dd0dd5":"code","d8d16eef":"code","604369a2":"code","be383e66":"code","9bf7228a":"code","fb0beb6f":"code","1dbf3798":"code","70f9db44":"code","085d795d":"markdown","4430e034":"markdown","483bf635":"markdown","4bf1f159":"markdown","b1cdc1aa":"markdown","7a46d070":"markdown","e9adff5e":"markdown","44b2beb8":"markdown","8a23d258":"markdown","9ffe73dc":"markdown","a723eed7":"markdown","373a4e71":"markdown","06cfa110":"markdown","e06d8fd0":"markdown","6a9fdfba":"markdown","88390c27":"markdown","a2740348":"markdown","c841a964":"markdown","6e3029cf":"markdown","07f3c07a":"markdown","f14b2fc1":"markdown","05b63ba7":"markdown","c54fb5d7":"markdown","446c5d5e":"markdown","484018f2":"markdown","1f6bb7f8":"markdown","3641f365":"markdown","91e5a828":"markdown","aa64f564":"markdown","7e99b621":"markdown","40ce005d":"markdown","0c33b8cf":"markdown","0cee1e83":"markdown","6680e19e":"markdown","2896dfd9":"markdown","92a3ecae":"markdown","80f800fb":"markdown","15f19dac":"markdown","41d7e479":"markdown"},"source":{"4f90f5c9":"# Essential packages for analysis\n\nimport numpy as np\nimport pandas as pd\nimport seaborn as sb\nimport matplotlib.pyplot as plt\nfrom matplotlib import gridspec\nfrom IPython.display import display, HTML\nfrom math import pi\nplt.style.use('fivethirtyeight')\n\n%matplotlib inline\n\n# ML packages\nfrom sklearn.preprocessing import StandardScaler, PolynomialFeatures\nfrom sklearn.model_selection import train_test_split, cross_val_score, GridSearchCV\nfrom sklearn import linear_model, tree, svm\nfrom sklearn.tree import DecisionTreeClassifier, plot_tree\nfrom sklearn.metrics import mean_squared_error, r2_score, accuracy_score, confusion_matrix, plot_confusion_matrix, classification_report\nfrom sklearn.neighbors import KNeighborsClassifier\n\n# Input files path\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\nimport math","06c77476":"# Reading the .csv files from the input path\n\ndf15 = pd.read_csv('..\/input\/fifa-20-complete-player-dataset\/players_15.csv')\ndf16 = pd.read_csv('..\/input\/fifa-20-complete-player-dataset\/players_16.csv')\ndf17 = pd.read_csv('..\/input\/fifa-20-complete-player-dataset\/players_17.csv')\ndf18 = pd.read_csv('..\/input\/fifa-20-complete-player-dataset\/players_18.csv')\ndf19 = pd.read_csv('..\/input\/fifa-20-complete-player-dataset\/players_19.csv')\ndf20 = pd.read_csv('..\/input\/fifa-20-complete-player-dataset\/players_20.csv')\ndisplay(df15.head(3))\ndisplay(df16.head(3))\ndisplay(df17.head(3))\ndisplay(df18.head(3))\ndisplay(df19.head(3))\ndisplay(df20.head(3))","9b4db2ef":"# Checking the shape of each dataframe\n\nl = df15.shape,df16.shape,df17.shape,df18.shape,df19.shape,df20.shape\nshape = pd.DataFrame(l)\nshape.index = [2015,2016,2017,2018,2019,2020]\nshape.columns = ['rows','columns']\nshape","98c3bcce":"# Column names list\n\nprint(list(df15.columns))","bdb21875":"# Checking the NULL values in FIFA 20 dataframe\n\ntemp = df15.isna().sum().reset_index()\ntemp.columns = ['columns','na_nbr']\ntemp.query('na_nbr!=0')","2d69d2ba":"# Checking head values of each column\n\ndisplay(df17.head())\ndisplay(df17[['attacking_crossing', 'attacking_finishing', 'attacking_heading_accuracy', 'attacking_short_passing', 'attacking_volleys']].head())\ndf17[['potential','value_eur','wage_eur','player_positions','preferred_foot','international_reputation','weak_foot',\n      'skill_moves','work_rate','body_type','release_clause_eur','team_position','team_jersey_number','pace','shooting','passing','dribbling']].head()","d5aaeb3e":"display(df16['body_type'].value_counts())","ad3e2bb3":"df20.team_position.value_counts()","e9c0593f":"df15.player_traits.value_counts().index","3091e7b3":"l_df = [df15,df16,df17,df18,df19,df20];","716f4812":"# Filling missing players attributes with '0', and then evaluating these attributes to convert them from string format to float\n\n# Creating lists for columns names:\n# Columns to drop:\nc_drop = ['player_url', 'real_face', 'player_tags', 'loaned_from', 'joined', 'release_clause_eur', 'contract_valid_until', 'nation_position', 'nation_jersey_number', 'gk_diving', 'gk_handling', \n          'gk_kicking', 'gk_reflexes', 'gk_speed', 'gk_positioning', 'ls', 'st', 'rs', 'lw', 'lf', 'cf', 'rf', 'rw', 'lam', 'cam', 'ram', 'lm', 'lcm', 'cm', 'rcm', 'rm',\n          'lwb', 'ldm', 'cdm', 'rdm', 'rwb', 'lb', 'lcb', 'cb', 'rcb', 'rb']\n# Different Attribute columns grouped in lists:\natt_cols = ['attacking_crossing', 'attacking_finishing', 'attacking_heading_accuracy', 'attacking_short_passing', 'attacking_volleys']\nskill_cols = ['skill_dribbling', 'skill_curve', 'skill_fk_accuracy', 'skill_long_passing', 'skill_ball_control']\nmovements_cols = ['movement_acceleration', 'movement_sprint_speed', 'movement_agility', 'movement_reactions', 'movement_balance']\npower_cols = ['power_shot_power', 'power_jumping', 'power_stamina', 'power_strength', 'power_long_shots']\nmentality_cols = ['mentality_aggression', 'mentality_interceptions', 'mentality_positioning', 'mentality_vision', 'mentality_penalties', 'mentality_composure']\ndefending_cols = ['defending_marking', 'defending_standing_tackle', 'defending_sliding_tackle']\ngk_cols = ['goalkeeping_diving', 'goalkeeping_handling', 'goalkeeping_kicking', 'goalkeeping_positioning', 'goalkeeping_reflexes']\n\nattributes_cols = att_cols+skill_cols+movements_cols+power_cols+mentality_cols+defending_cols+gk_cols\nl_attributes = [att_cols, skill_cols, movements_cols, power_cols, mentality_cols, defending_cols, gk_cols]\n\nfor k in l_df:\n    for i in l_attributes:\n        for j in i:\n            k[j].fillna('0',inplace = True)\n\n\nfor k in l_df:\n    for i in l_attributes:\n        for j in i:\n            temp = list(k[j])\n            tempp=[]\n            for item in temp:\n                try:\n                    item = eval(item)\n                    tempp.append(item)\n                except:\n                    tempp.append(item)\n            k[j] = tempp","d059ef4a":"# Checking that the values of form 'XX+X' are converted to int correctly:\n\ndf17[attributes_cols].head()","4089e70f":"# Reduction of the number of features by averaging the features that belong to the same group in one representative feature.\n# Creating new attributes columns\n\nfor item in l_df:\n    item['attack_oa'] = round(item[att_cols].mean(axis=1, skipna = True))\n    item['skill_oa'] = round(item[skill_cols].mean(axis=1, skipna = True))\n    item['movements_oa'] = round(item[movements_cols].mean(axis=1, skipna = True))\n    item['power_oa'] = round(item[power_cols].mean(axis=1, skipna = True))\n    item['mentality_oa'] = round(item[mentality_cols].mean(axis=1, skipna = True))\n    item['defending_oa'] = round(item[defending_cols].mean(axis=1, skipna = True))\n    item['gk_oa'] = round(item[gk_cols].mean(axis=1, skipna = True))\n\n# Dropping old attributes columns\nfor item in l_df:\n    item.drop(c_drop, axis=1, inplace=True)\n    item.drop(att_cols, axis = 1, inplace = True)\n    item.drop(skill_cols, axis = 1, inplace = True)\n    item.drop(movements_cols, axis = 1, inplace = True)\n    item.drop(power_cols, axis = 1, inplace = True)\n    item.drop(mentality_cols, axis = 1, inplace = True)\n    item.drop(defending_cols, axis = 1, inplace = True)\n    item.drop(gk_cols, axis = 1, inplace = True)","95fac3f9":"# Converting the player traits column to a numerical variable so that we can use it for later analysis and estimations.\n# Assigning a value to each player trait based on its significance and importance.\n\n\nl15 = ','.join(list(df15.player_traits.value_counts().index))+','\nl16 = ','.join(list(df16.player_traits.value_counts().index))+','\nl17 = ','.join(list(df17.player_traits.value_counts().index))+','\nl18 = ','.join(list(df18.player_traits.value_counts().index))+','\nl19 = ','.join(list(df19.player_traits.value_counts().index))+','\nl20 = ','.join(list(df20.player_traits.value_counts().index))\nl = l15+l16+l17+l18+l19+l20\nul = l.split(',')\nul = [item.replace(\"(CPU AI Only)\",\"\").strip() for item in ul]\ntraits_set = sorted(list(set(ul)), key=str.lower)\ntraits_value = [3,1,2,3,2,2,2,3,2,4,3,2,1,3,5,5,4,3,2,1,4,1,3,2,4,1,5,3,4,4,3,2,3,5,5,1,3,4,5,3,2,3,3,4,2]\ntraits_dic = {}\nfor i,j in zip(traits_set,traits_value):\n    traits_dic[i] = j\ntraits_dic","6fea1bb3":"# Creating a new column for the trait coefficient\n\ndef calcul_trait_coef(s):\n    coef=0\n    try:\n        s.strip()\n        l = s.split(',')\n        for i in l:\n            coef = coef + traits_dic[i.replace(\"(CPU AI Only)\",\"\").strip()]\n    except:\n        return 0\n    return coef\n\ndef create_traits_colum(df):\n    col = []\n    l = list(df.player_traits)\n    for i in l:\n        coef = calcul_trait_coef(i)\n        col.append(coef)\n    return col\n\n# Creating new trait coefficient columns\n\ndf15['trait_coef'] = create_traits_colum(df15)\ndf16['trait_coef'] = create_traits_colum(df16)\ndf17['trait_coef'] = create_traits_colum(df17)\ndf18['trait_coef'] = create_traits_colum(df18)\ndf19['trait_coef'] = create_traits_colum(df19)\ndf20['trait_coef'] = create_traits_colum(df20)\n\n# Dropping player traits column\n\nfor item in l_df:\n    item.drop(['player_traits'], axis=1, inplace=True)","dbca830f":"# Changing the NULL, RES, and SUB team positions values to the actual player position\n\nfor item in l_df:\n    l_res = []\n    l_sub = []\n    l_null = []\n    res_idx = list(item.query('team_position == \"RES\"').index)\n    sub_idx = list(item.query('team_position == \"SUB\"').index)\n    null_idx = list(item.team_position.isnull().index)\n    for i in res_idx:\n        temp = item.loc[i,'player_positions'].split(',')\n        l_res.append(temp[0])\n    for j in sub_idx:\n        temp = item.loc[j,'player_positions'].split(',')\n        l_sub.append(temp[0])\n    for k in null_idx:\n        temp = item.loc[k,'player_positions'].split(',')\n        l_null.append(temp[0])\n    item.loc[res_idx,'team_position'] = l_res\n    item.loc[sub_idx,'team_position'] = l_sub\n    item.loc[null_idx,'team_position'] = l_null","53c9ba98":"# Dropping the player positions column\n\nfor item in l_df:\n    item.drop('player_positions', axis=1, inplace=True)","fdbbe481":"# Checking that each player has a team position\n\ndf20.team_position.value_counts()","a90d74c4":"# Checking for remaining NULL values\n\ntemp = df17.isna().sum().reset_index()\ntemp.columns = ['columns','na_nbr']\ntemp.query('na_nbr!=0')","3077c778":"# Setting every non-uniform player body type to Normal\n\nfor item in l_df[1:]:\n    temp = item.body_type.value_counts()\n    l = list(temp[3:].index)\n    for i in l:\n        idx = list(item[item['body_type']==i].index)\n        item.loc[idx,'body_type']='Normal'\ndf20.body_type.value_counts()","9de2c5a2":"# Changing GK NULL attributes to 0, and changing players NULL team jersey number to 0\n\nfor item in l_df:\n    gk_idx = list(item.pace.isnull())\n    item.loc[gk_idx,['pace','shooting','passing','dribbling','defending','physic']] = 0\n    no_team_idx = list(item.team_jersey_number.isnull())\n    item.loc[no_team_idx,'team_jersey_number'] = 0","3a2d8cb0":"# Checking for NULL variable after cleaning\n\ntemp = df17.isna().sum().reset_index()\ntemp.columns = ['columns','na_nbr']\ntemp.query('na_nbr!=0')","a27e0f28":"# Checking the final form of a dataframe\n\ndisplay(df17.head())\ndf17[['potential','value_eur','wage_eur','preferred_foot','international_reputation','weak_foot',\n      'skill_moves','work_rate','body_type','team_position','team_jersey_number','pace','shooting','passing','dribbling']].head()","61f5e19d":"# Building and saving the master dataframe\n\nyears=['2015','2016','2017','2018','2019','2020']\nk=0\nfor item in l_df:\n    item['year'] = years[k]\n    k=k+1\n\ndf = pd.concat(l_df)\ndf.to_csv('fifa_data_2015_to_2020.csv', index=False)","035c8b91":"df = pd.read_csv('.\/fifa_data_2015_to_2020.csv')\ndf.head(7)","de16354d":"df.columns","977efe95":"def get_year(df,year):\n    temp = df.query('year==@year').reset_index()\n    return temp","5608fc32":"df15 = get_year(df,2015)\ndf16 = get_year(df,2016)\ndf17 = get_year(df,2017)\ndf18 = get_year(df,2018)\ndf19 = get_year(df,2019)\ndf20 = get_year(df,2020)\nl_df=[df15,df16,df17,df18,df19,df20]","3d4efb8e":"plt.figure(figsize = (20,7))\nsb.countplot(data = df, x = 'age', hue='year', palette = sb.cubehelix_palette(6, start=1, rot=0, dark=0.2, light=.8, reverse=False))\nplt.title('Age distribution by year')\nplt.legend(loc=1);","854a6c9f":"plt.figure(figsize = (20,7))\nsb.countplot(data = df, x = 'height_cm', hue='year', palette = sb.cubehelix_palette(6, start=2, rot=0, dark=0.2, light=.8, reverse=False))\nplt.title('Height distribution by year')\nplt.legend(loc=1);","48edfdab":"plt.figure(figsize = (20,7))\nsb.countplot(data = df, x = 'weight_kg', hue='year', palette = sb.cubehelix_palette(6, start=3, rot=0, dark=0.2, light=.8, reverse=False))\nplt.title('Weight distribution by year')\nplt.legend(loc=1);","e3a3bce7":"plt.figure(figsize = (20,7))\ntemp_df = df.groupby(['year','nationality']).count()['sofifa_id'].sort_values(ascending=False).iloc[:50].reset_index()\nnl = ['England', 'Germany', 'Argentina', 'Spain', 'France']\ntop5 = temp_df.query('nationality in @nl')\nsb.barplot(data = top5, x = 'nationality', y='sofifa_id' , hue='year', palette = sb.cubehelix_palette(6, start=4, rot=0, dark=0.2, light=.8, reverse=False))\nplt.title('Top 5 countries by player numbers from 2015 to 2020')\nplt.legend(loc=1)\nplt.ylabel('count');","158bca45":"plt.figure(figsize = (20,7))\nsb.countplot(data = df, x = 'overall', hue='year', palette = sb.cubehelix_palette(6, start=5, rot=0, dark=0.2, light=.8, reverse=False))\nplt.title('Overall rating distribution by year')\nplt.legend(loc=1);","3b5142ce":"l=[]\nfor i in l_df:\n    temp = i.head(5)[['short_name','overall','year']]\n    l.append(temp)\nfig = plt.figure(figsize=(22,12))\nplt.suptitle('Comparaison of the top 5 players from 2015 to 2020',fontsize=22)\nplt.tight_layout(pad=0.5, w_pad=0.5, h_pad=0.5)\nplt.subplot(231)\nsb.barplot(data=l[0], x='short_name', y='overall', palette='Reds_r')\nplt.ylim(85, 100)\nplt.xlabel('Player Name')\nplt.title('Top 5 most rated players in FIFA 2015')\nplt.subplot(232)\nsb.barplot(data=l[1], x='short_name', y='overall', palette='Reds_r')\nplt.ylim(85, 100)\nplt.xlabel('Player Name')\nplt.title('Top 5 most rated players in FIFA 2016')\nplt.subplot(233)\nsb.barplot(data=l[2], x='short_name', y='overall', palette='Reds_r')\nplt.ylim(85, 100)\nplt.xlabel('Player Name')\nplt.title('Top 5 most rated players in FIFA 2017')\nplt.subplot(234)\nsb.barplot(data=l[3], x='short_name', y='overall', palette='Reds_r')\nplt.ylim(85, 100)\nplt.xlabel('Player Name')\nplt.title('Top 5 most rated players in FIFA 2018')\nplt.subplot(235)\nsb.barplot(data=l[4], x='short_name', y='overall', palette='Reds_r')\nplt.ylim(85, 100)\nplt.xlabel('Player Name')\nplt.title('Top 5 most rated players in FIFA 2019')\nplt.subplot(236)\nsb.barplot(data=l[5], x='short_name', y='overall', palette='Reds_r')\nplt.ylim(85, 100)\nplt.xlabel('Player Name')\nplt.title('Top 5 most rated players in FIFA 2020');","f33edfd9":"avg_ovr = df.groupby('year')['overall'].mean().reset_index()\navg_value = df.groupby('year')['value_eur'].mean().reset_index().drop(0,axis=0)\n\nplt.figure(figsize=(20,6))\nplt.subplot(121)\nsb.barplot(data=avg_ovr, x='year', y='overall', palette= sb.cubehelix_palette(6, start=3, rot=0, dark=0.2, light=.8, reverse=False))\nplt.ylim(0, 100)\nplt.xlabel('Year')\nplt.title('Average rating by year')\nplt.yticks(np.arange(0, 100+1, 10))\nplt.subplot(122)\nsb.barplot(data=avg_value, x='year', y='value_eur', palette= sb.cubehelix_palette(6, start=3.5, rot=0, dark=0.2, light=.8, reverse=False))\nplt.xlabel('Year')\nplt.ylabel('Value (\u20ac)')\nplt.title('Average player value by year');","0bc7d2e6":"# Calculating the proportion of right foot players and left foot players in our dataset.\n\npref_foot = df.groupby(['year','preferred_foot'])['preferred_foot'].count().rename('count', inplace=True).reset_index()\npref_foot = pref_foot.pivot(index='year', columns='preferred_foot', values='count')\ns = pref_foot['Left']+pref_foot['Right']\npref_foot['Left'] = pref_foot['Left']\/s\npref_foot['Right'] = pref_foot['Right']\/s","e5980847":"pref_foot.plot(kind='bar', stacked=True, figsize=(10,8), rot=0)\nplt.title('Proportions of Left\/Right foot for each FIFA')\nplt.xlabel('Year')\nplt.ylabel('Proportion')\nplt.ylim(0,1.2);","c9eac47b":"plt.figure(figsize=(20,6))\nplt.tight_layout()\nplt.subplot(121)\nsb.countplot(data=df, x='year', hue='international_reputation', palette= sb.cubehelix_palette(5, start=3.5, rot=0, dark=0.2, light=.8, reverse=False))\nplt.legend(loc='upper right', bbox_to_anchor=(1.11, 1))\nplt.title('Distribution of international reputation levels by year')\nplt.subplot(122)\nsb.countplot(data=df, x='year', hue='skill_moves', palette= sb.cubehelix_palette(5, start=1.5, rot=0, dark=0.2, light=.8, reverse=False))\nplt.legend(loc='upper right', bbox_to_anchor=(1.11, 1))\nplt.title('Distribution of skill move levels by year');","e31036bc":"plt.figure(figsize=(20,20))\nplt.suptitle('Ditribution of players values by year on a logarithmic scale', y=0.92, fontsize=20)\nplt.subplot(321)\nsb.distplot(df16.value_eur, kde=False, bins=100)\nplt.title('Ditribution of players values in FIFA 16')\nplt.xscale('log')\nplt.xlabel('Value (\u20ac)')\nplt.ylabel('Count')\nplt.subplot(322)\nsb.distplot(df17.value_eur, kde=False, bins=100)\nplt.title('Ditribution of players values in FIFA 17')\nplt.xscale('log')\nplt.xlabel('Value (\u20ac)')\nplt.ylabel('Count')\nplt.subplot(323)\nsb.distplot(df18.value_eur, kde=False, bins=100)\nplt.title('Ditribution of players values in FIFA 18')\nplt.xscale('log')\nplt.xlabel('Value (\u20ac)')\nplt.ylabel('Count')\nplt.subplot(324)\nsb.distplot(df19.value_eur, kde=False, bins=100)\nplt.title('Ditribution of players values in FIFA 19')\nplt.xscale('log')\nplt.xlabel('Value (\u20ac)')\nplt.ylabel('Count')\nplt.subplot(313)\nsb.distplot(df20.value_eur, kde=False, bins=100)\nplt.title('Ditribution of players values in FIFA 20')\nplt.xscale('log')\nplt.xlabel('Value (\u20ac)')\nplt.ylabel('Count');","8589e95d":"def get_players_noGK(df):\n    idx_df_gk = list(df.query('pace==0').index)\n    df_noGK = df.drop(idx_df_gk)\n    return df_noGK","062c9915":"temp=get_players_noGK(df)\nplt.figure(figsize=(15,20))\nplt.suptitle('Box plots of the main non-GK players attributes by year', y=0.92, fontsize=20)\nplt.subplot(321)\nsb.boxplot(data=temp, x='year', y='pace',  linewidth=1.5)\nplt.subplot(322)\nsb.boxplot(data=temp, x='year', y='shooting',  linewidth=1.5)\nplt.subplot(323)\nsb.boxplot(data=temp, x='year', y='passing',  linewidth=1.5)\nplt.subplot(324)\nsb.boxplot(data=temp, x='year', y='dribbling',  linewidth=1.5)\nplt.subplot(325)\nsb.boxplot(data=temp, x='year', y='defending',  linewidth=1.5)\nplt.subplot(326)\nsb.boxplot(data=temp, x='year', y='physic',  linewidth=1.5);","7e0dacbe":"temp=get_players_noGK(df)\nplt.figure(figsize=(15,20))\nplt.suptitle('Violin plots of main attributes overall rating  of non-GK players attributes by year', y=0.92, fontsize=20)\nplt.subplot(321)\nsb.violinplot(data=temp, x='year', y='attack_oa',  linewidth=1.5)\nplt.ylabel('Attack Overall')\nplt.subplot(322)\nsb.violinplot(data=temp, x='year', y='skill_oa',  linewidth=1.5)\nplt.ylabel('Skill Overall')\nplt.subplot(323)\nsb.violinplot(data=temp, x='year', y='movements_oa',  linewidth=1.5)\nplt.ylabel('Movements Overall')\nplt.subplot(324)\nsb.violinplot(data=temp, x='year', y='mentality_oa',  linewidth=1.5)\nplt.ylabel('Mentality Overall')\nplt.subplot(313)\nsb.violinplot(data=temp, x='year', y='defending_oa',  linewidth=1.5)\nplt.ylabel('Defending Overall');","9fe623fb":"def get_best_by_pos(df):\n    l=[]\n    temp = df.groupby(['team_position'])[['overall']].max()\n    for i in list(temp.index):\n        ovr = temp.loc[i][0]\n        best_i = df.query('team_position==@i & overall==@ovr').iloc[0]\n        l.append(best_i)\n    best_pos = pd.DataFrame(l)\n    return best_pos","e941de45":"l=[]\nl.append(get_best_by_pos(df15))\nl.append(get_best_by_pos(df16))\nl.append(get_best_by_pos(df17))\nl.append(get_best_by_pos(df18))\nl.append(get_best_by_pos(df19))\nl.append(get_best_by_pos(df20))\nbest_pos = pd.concat(l, ignore_index=True)","43a963ed":"plt.figure(figsize=(15,6))\nplt.title('Best overall rating for each position by year')\nsb.barplot(data=best_pos, x='team_position', y='overall', hue='year')\nplt.legend(loc='upper right', bbox_to_anchor=(1.1, 1))\nplt.xlabel('Team position')\nplt.ylabel('Overall')\nplt.ylim(60,100);","951a7150":"gb = best_pos.groupby('team_position')    \nl = [gb.get_group(x) for x in gb.groups]\n\ndisplay(l[0].loc[:,['short_name','team_position','overall','club','nationality','year']])\ndisplay(l[1].loc[:,['short_name','team_position','overall','club','nationality','year']])\nCSS = \"\"\"\ndiv.cell:nth-child(60) .output {\n    flex-direction: row;\n}\n\"\"\"\n\nHTML('<style>{}<\/style>'.format(CSS))","9aeea964":"display(l[2].loc[:,['short_name','team_position','overall','club','nationality','year']])\ndisplay(l[3].loc[:,['short_name','team_position','overall','club','nationality','year']])\nCSS = \"\"\"\ndiv.cell:nth-child(61) .output {\n    flex-direction: row;\n}\n\"\"\"\n\nHTML('<style>{}<\/style>'.format(CSS))","0a76051b":"display(l[4].loc[:,['short_name','team_position','overall','club','nationality','year']])\ndisplay(l[5].loc[:,['short_name','team_position','overall','club','nationality','year']])\nCSS = \"\"\"\ndiv.cell:nth-child(62) .output {\n    flex-direction: row;\n}\n\"\"\"\n\nHTML('<style>{}<\/style>'.format(CSS))","6800cf38":"display(l[6].loc[:,['short_name','team_position','overall','club','nationality','year']])\ndisplay(l[7].loc[:,['short_name','team_position','overall','club','nationality','year']])\nCSS = \"\"\"\ndiv.cell:nth-child(63) .output {\n    flex-direction: row;\n}\n\"\"\"\n\nHTML('<style>{}<\/style>'.format(CSS))","ce5930d5":"display(l[8].loc[:,['short_name','team_position','overall','club','nationality','year']])\ndisplay(l[9].loc[:,['short_name','team_position','overall','club','nationality','year']])\nCSS = \"\"\"\ndiv.cell:nth-child(64) .output {\n    flex-direction: row;\n}\n\"\"\"\n\nHTML('<style>{}<\/style>'.format(CSS))","74d62f07":"display(l[10].loc[:,['short_name','team_position','overall','club','nationality','year']])\ndisplay(l[11].loc[:,['short_name','team_position','overall','club','nationality','year']])\nCSS = \"\"\"\ndiv.cell:nth-child(65) .output {\n    flex-direction: row;\n}\n\"\"\"\n\nHTML('<style>{}<\/style>'.format(CSS))","3465018c":"display(l[12].loc[:,['short_name','team_position','overall','club','nationality','year']])\ndisplay(l[13].loc[:,['short_name','team_position','overall','club','nationality','year']])\nCSS = \"\"\"\ndiv.cell:nth-child(66) .output {\n    flex-direction: row;\n}\n\"\"\"\n\nHTML('<style>{}<\/style>'.format(CSS))","95828537":"display(l[14].loc[:,['short_name','team_position','overall','club','nationality','year']])","7adddeed":"interesting_cols = ['height_cm','weight_kg', 'nationality', 'club', 'overall', 'potential', 'value_eur',\n       'wage_eur', 'preferred_foot','skill_moves', 'work_rate', 'body_type','pace', 'shooting', 'passing', 'dribbling',\n       'defending', 'physic', 'attack_oa', 'skill_oa', 'movements_oa',\n       'power_oa', 'mentality_oa', 'defending_oa', 'gk_oa', 'trait_coef']\nselect_df = df[interesting_cols]","0505e361":"plt.figure(figsize=(15,15))\nsb.heatmap(select_df.drop(list(df.query('pace==0').index)).corr(), annot=True)\nplt.title('Heatmap of correlation between some interesting variables for Non-GKs');","4ab50b76":"plt.figure(figsize=(10,10))\nselect_df_gk = select_df.drop(['skill_moves', 'work_rate', 'body_type','pace', 'shooting', 'passing', 'dribbling','defending', 'physic'], axis=1)\nsb.heatmap(select_df_gk.drop(list(df.query('pace!=0').index)).corr(), annot=True)\nplt.title('Heatmap of correlation between some interesting variables for GKs');","c1e47802":"grid = sb.PairGrid(df[['overall', 'potential', 'value_eur','age']])\ngrid.map_diag(plt.hist)\ngrid.map_offdiag(plt.scatter);","388be96a":"df_temp = df.drop(list(df.query('pace==0').index))\ngrid = sb.PairGrid(df_temp[['pace', 'shooting', 'passing', 'dribbling','defending', 'physic']])\ngrid.map_diag(plt.hist)\ngrid.map_offdiag(plt.scatter);","215f53e1":"grid = sb.PairGrid(df[['attack_oa', 'skill_oa', 'movements_oa','power_oa', 'mentality_oa', 'defending_oa', 'gk_oa']])\ngrid.map_diag(plt.hist)\ngrid.map_offdiag(plt.scatter);","b10b268f":"# Some countries are passed as clubs so we need to clean that up to get the top clubs by ratings.\n\ncountry_list = ['Argentina','Australia','Austria','Belgium','Bolivia','Brazil','Bulgaria','Cameroon','Canada','Chile','China','Colombia','C\u00f4te d\u2019Ivoire'\n,'Czech Republic','Denmark','Ecuador','Egypt','England','Finland','France','Germany','Greece','Hungary','Iceland','India'\n,'Ireland','Italy','Mexico','Netherlands','New Zealand','Northern Ireland','Norway','Paraguay','Peru','Poland'\n,'Portugal','Romania','Russia','Scotland','Slovenia','South Africa','Spain','Sweden','Switzerland','Turkey','United States','Uruguay','Venezuela','Wales']\n\ndef top_club_avg_ovr(df):\n    temp = df.groupby(['club']).mean()[['overall','year']].sort_values(by='overall',ascending=False).reset_index()\n    temp.drop(list(temp.query('club in @country_list').index),inplace=True)\n    res = temp.head(3)\n    return res","4c61653c":"l=[]\nfor i in l_df:\n    l.append(top_club_avg_ovr(i))\ntop_club = pd.concat(l)","f72c665d":"years = [2015,2016,2017,2018,2019,2020]\nbarca = '#A50044'\nbayern = '#DC052D'\nparis = '#004170'\njuve = '#000000'\nreal = \"#FEBE10\"\nnapoli = '#12A0D7'\nchelsea = '#034694'\ncity = '#6CABDD'\nliver = '#00B2A9'\nunited = '#DA291C'\nroma = '#8E1F2F'\ndortmund = '#FDE100'\nleipzig= '#0C2043'\n\n\nl=[]\nfor i in years:\n    temp = top_club.query('year==@i')\n    l.append(temp)\nfig = plt.figure(figsize=(22,12))\nplt.suptitle('Comparaison of the top 3 clubs by overall average from 2015 to 2020',fontsize=22)\nplt.tight_layout(pad=0.5, w_pad=0.5, h_pad=0.5)\nplt.subplot(231)\nsb.barplot(data=l[0], x='club', y='overall', palette=[barca,bayern,paris])\nplt.ylim(60, 100)\nplt.xlabel('Player Name')\nplt.title('Top 3 clubs by overall average in FIFA 2015')\nplt.subplot(232)\nsb.barplot(data=l[1], x='club', y='overall', palette=[juve, bayern, barca])\nplt.ylim(60, 100)\nplt.xlabel('Player Name')\nplt.title('Top 3 clubs by overall average in FIFA 2016')\nplt.subplot(233)\nsb.barplot(data=l[2], x='club', y='overall', palette=[juve,bayern,real])\nplt.ylim(60, 100)\nplt.xlabel('Player Name')\nplt.title('Top 3 clubs by overall average in FIFA 2017')\nplt.subplot(234)\nsb.barplot(data=l[3], x='club', y='overall', palette=[barca,juve,real])\nplt.ylim(60, 100)\nplt.xlabel('Player Name')\nplt.title('Top 3 clubs by overall average in FIFA 2018')\nplt.subplot(235)\nsb.barplot(data=l[4], x='club', y='overall', palette=[juve,barca,napoli])\nplt.ylim(60, 100)\nplt.xlabel('Player Name')\nplt.title('Top 3 clubs by overall average in FIFA 2019')\nplt.subplot(236)\nsb.barplot(data=l[5], x='club', y='overall', palette=[bayern,real,juve])\nplt.ylim(60, 100)\nplt.xlabel('Player Name')\nplt.title('Top 3 clubs by overall average in FIFA 2020');","739fe694":"LL=[\"FC Barcelona\",\"Real Madrid\"]\nPL=[\"Chelsea\",\"Manchester United\", \"Liverpool\", \"Manchester City\"]\nSA=[\"Juventus\",\"Napoli\",\"Roma\"]\nBL=[\"FC Bayern M\u00fcnchen\",\"Borussia Dortmund\",\"RB Leipzig\"]\n\nLLdf = df.query('club in @LL').groupby(['year','club']).mean()['overall'].reset_index()\nPLdf = df.query('club in @PL').groupby(['year','club']).mean()['overall'].reset_index()\nSAdf = df.query('club in @SA').groupby(['year','club']).mean()['overall'].reset_index()\nBLdf = df.query('club in @BL').groupby(['year','club']).mean()['overall'].reset_index()\n\nplt.figure(figsize=(20,12))\nplt.suptitle('Evolution of some of the best clubs in different leagues in terms of average overall rating', y=0.95,fontsize='20')\nplt.subplot(221)\nsb.lineplot(data=LLdf, x='year', y='overall', hue='club', palette=[barca,real], marker='o', markersize=10 , legend=False)\nplt.legend(LL, title='Clubs')\nplt.title('La Liga')\nplt.subplot(222)\nsb.lineplot(data=PLdf, x='year', y='overall', hue='club', palette=[chelsea, liver, city, united], marker='o', markersize=10, legend=False)\nplt.legend(PL, title='Clubs')\nplt.title('Premier League')\nplt.subplot(223)\nsb.lineplot(data=SAdf, x='year', y='overall', hue='club', palette=[juve, napoli, roma], marker='o', markersize=10, legend=False)\nplt.legend(SA, title='Clubs')\nplt.title('Serie A')\nplt.subplot(224)\nsb.lineplot(data=BLdf, x='year', y='overall', hue='club', palette=[dortmund, bayern, leipzig], marker='o', markersize=10, legend=False)\nplt.title('Bundesliga')\nplt.legend(BL, title='Clubs');","9bf632de":"crm_df = df.query('short_name == \"L. Messi\" | short_name == \"Cristiano Ronaldo\"')\nplt.figure(figsize=(8,5))\nax = sb.barplot(data=crm_df[['short_name','overall', 'year']], x='year', y='overall', hue='short_name')\nax.set_yticks(np.arange(82,100+1,2))\nplt.ylim(80,100)\nax.legend(title='Players');","cabee073":"attrib_categ=['attack_oa', 'skill_oa', 'movements_oa', 'power_oa', 'mentality_oa', 'defending_oa']\ncateg=['ATT', 'SKI', 'MVT', 'PWR', 'MEN', 'DEF']\n\ndef plot_radar(df, p1, p2, att_cat, cat, ax):\n    N = len(att_cat)\n    range_list = list(np.arange(0,100,20))\n    \n    angles = [n \/ float(N) * 2 * pi for n in range(N)]\n    angles += angles[:1]\n\n    ax.set_theta_offset(7* pi \/ 6)\n    ax.set_theta_direction(-1)\n    plt.xticks(angles[:-1],cat)\n\n    ax.set_rlabel_position(0)\n    plt.yticks(range_list , map(str, range_list), color=\"grey\", size=10)\n    plt.ylim(0,100)\n\n    values_p1 = df.query('short_name == @p1')[attrib_categ].values.flatten().tolist()\n    values_p1 += values_p1[:1]\n    values_p2 = df.query('short_name == @p2')[attrib_categ].values.flatten().tolist()\n    values_p2 += values_p2[:1]\n\n    ax.plot(angles, values_p1, linewidth=1, linestyle='solid', label=\"group A\")\n    ax.fill(angles, values_p1, 'b', alpha=0.1)\n\n    ax.plot(angles, values_p2, linewidth=1, linestyle='solid', label=\"group A\")\n    ax.fill(angles, values_p2, 'b', alpha=0.1)\n","3d5d75b5":"plt.figure(figsize=(18,12))\nplt.suptitle('C. Ronaldo VS Messi: Attributes Comparaison by year', fontsize='20')\nsubplot_l = [231,232,233,234,235,236]\nfor i,j,k in zip(l_df,subplot_l,years):\n    ax = plt.subplot(j, polar=True)\n    plot_radar(i,'L. Messi', 'Cristiano Ronaldo', attrib_categ, categ, ax)\n    plt.title(k)\nplt.legend(['L. Messi', 'Cristiano Ronaldo'], title='Players' , bbox_to_anchor=(1.5, 1.2));","d3ed80c3":"df.columns","13a43594":"# Construction of the features dataframe for the regression model\n\nl=[2015,2016,2017,2018,2019]\nfeatures = ['age', 'value_eur','wage_eur','international_reputation','skill_moves', 'pace', 'shooting', 'passing', 'dribbling',\n            'defending', 'physic', 'attack_oa', 'skill_oa', 'movements_oa', 'power_oa', 'mentality_oa', \n            'defending_oa', 'gk_oa', 'trait_coef','year']\n\nols_data = df.query('year in @l')[features].copy()\ny = df.query('year in @l')['overall'].copy()\n\nols_data.loc[ols_data.value_eur==0,'value_eur'] = ols_data['value_eur'].mean()\nols_data.loc[ols_data.wage_eur==0,'wage_eur'] = ols_data['wage_eur'].mean()\nols_data['isGK'] = (ols_data['pace']==0).astype(int)\ncols = list(ols_data.columns)\nols_data","1e398014":"# Adding 2nd degree polynomial features to make the regression model more accurate\n\npoly = PolynomialFeatures(2, include_bias=False)\nols_data = poly.fit_transform(ols_data)","1514b054":"# Train\/Test data split\n\nx_train, x_test, y_train, y_test = train_test_split( ols_data, y, test_size=0.2, shuffle=True, random_state=42)\ndisplay((x_train.shape, y_train.shape))\nx_test.shape, y_test.shape","dc431fbb":"# Training the regression model.\n\nregr = linear_model.LinearRegression()\nregr.fit(x_train, y_train)\ny_pred = regr.predict(x_test)\n\nprint('Mean squared error: %.2f' % mean_squared_error(y_test,y_pred))\nprint('Coefficient of determination: %.2f'% r2_score(y_test, y_pred))","7f903d07":"# Getting a random player\n\ndef get_example(df,features):\n    temp = df.sample(1)\n    x = temp[features].copy()\n    x['isGK'] = (x['pace']==0).astype(int)\n    x= poly.fit_transform(x)\n    y = np.array(temp['overall'].copy())\n    return x,y","698a2e47":"# Predicting a random player overall rating\n\nx,y = get_example(df, features)\nest_y = regr.predict(x)\nprint('y=',int(y), 'pred=', int(np.round(est_y)))","739a11c9":"x = df20.loc[:,features].copy()\nx['isGK'] = (x['pace']==0).astype(int)\nx = poly.fit_transform(x)\ntrue_20 = np.array(df20.loc[:,['overall']].copy()).flatten()\npred_20 = np.round(regr.predict(x)).astype(int)","cca4f466":"print('Mean squared error: %.2f' % mean_squared_error(true_20, pred_20))\nprint('Coefficient of determination: %.2f'% r2_score(true_20, pred_20))","1c9ecc88":"plt.figure(figsize=(10,10))\nsb.scatterplot(pred_20, true_20, alpha=0.15)\nplt.plot(true_20, true_20, color='r', alpha=0.5)\nplt.legend(['Correct pred','True-Vs-Pred scatter'])\nplt.title('Prediction of overall ratings of FIFA 2020 using OLS model')\nplt.xlabel(' Overall Prediction')\nplt.ylabel('True Overall');","955b71af":"# Creating categories based on players positions.\n\nreduce_pos = {}\npos = list(df.team_position.unique())\nnew_pos = ['Goalkeeper', 'Defender', 'Midfielder', 'Forward']\nmap_l = []\nfor i in pos:\n    if i in ['CF','ST','LW','RW']:\n        map_l.append((i,'Forward'))\n    elif i in ['CM','RM','LM','CDM','CAM']:\n        map_l.append((i,'Midfielder'))\n    elif i in ['CB','RB','LB','LWB','RWB']:\n        map_l.append((i,'Defender'))\n    else:\n        map_l.append((i,'Goalkeeper'))\nfor j in map_l:\n    reduce_pos[j[0]]=j[1]\nreduce_pos","56a706f0":"# Selecting features for the classification task.\n\nl=[2015,2016,2017,2018,2019]\nfeatures_classification = ['skill_moves', 'pace', 'shooting', 'passing', 'dribbling','defending', 'physic', \n                           'attack_oa', 'skill_oa','movements_oa', 'power_oa', 'mentality_oa', 'defending_oa', 'gk_oa']\nclassification_data = df.query('year in @l')[features_classification].copy()\ny_class_label = df.query('year in @l')['team_position'].copy().map(reduce_pos)\ny_class = y_class_label\ndisplay(classification_data)\ny_class","8161258c":"# Train\/Test splitting of the selected data.\n\nX_train, X_test, y_train, y_test = train_test_split(classification_data, y_class, test_size=0.2, random_state=1)\nX_train.shape, X_test.shape","d40172d7":"# Using cross-validation to tune the max leaf parameter of the decision tree.\n\nparam_grid = {'max_leaf_nodes': np.arange(5, 30)}\ntree_classifier = DecisionTreeClassifier()\ntree_CV = GridSearchCV(tree_classifier, param_grid, cv=5)\ntree_CV.fit(X_train, y_train);","721b73e9":"#View the accuracy score & the best parameters for the model found using grid search\n\nprint('Best score for training data:', tree_CV.best_score_,\"\\n\")\nprint('Best nbr of neighbors:',tree_CV.best_params_,\"\\n\")","b40d5097":"# Select the optimal model and testing it.\n\ntree_classifier = tree_CV.best_estimator_\ntree_y_pred = tree_classifier.predict(X_test)","08a81d9a":"# Check the results of the test.\n\nprint(\"Training set score for decison tree: %f\" % tree_classifier.score(X_train , y_train))\nprint(\"Testing set score for decision tree: %f\" % tree_classifier.score(X_test , y_test))\nplot_confusion_matrix(tree_classifier, X_test, y_test, cmap='Blues');","cd4901e5":"# Plot the decision tree.\n\nplt.figure(figsize=(15,15))\nplot_tree(tree_classifier, feature_names=list(classification_data.columns) ,class_names=new_pos, filled=True);","dc54017a":"# Check random predictions made on the test set.\n\nl_true=list(y_test)\nl_pred=list(tree_y_pred)\ntemp={\n    'true_position': l_true,\n    'predicted_position': l_pred\n}\nresult = pd.DataFrame(temp)\nresult.sample(10)","97b23c22":"# Test the decision trained tree model on the FIFA 20 data.\n\nX_20 = df20[features_classification].copy()\ny_20 = df20['team_position'].copy().map(reduce_pos)\ntree_y20_pred = tree_classifier.predict(X_20)","a8305c80":"# Check results\n\nprint('Accuracy:', accuracy_score(y_20, tree_y20_pred))\nplot_confusion_matrix(tree_classifier, X_20, y_20, labels=['Goalkeeper','Defender','Midfielder','Forward'], cmap='Blues');","0b51f5da":"# Map positions to integers.\n\npos_dic={'Goalkeeper': 0, 'Defender': 1, 'Midfielder':2, 'Forward':3}\ny_train = y_train.map(pos_dic)\ny_test = y_test.map(pos_dic)\ny_test","207da82c":"# Use cross-validation to tune the neighbors number parameter of the KNN model. \n\nparam_grid = {'n_neighbors': np.arange(1, 25)}\nKNN_classifier = KNeighborsClassifier()\nKNN_CV = GridSearchCV(KNN_classifier, param_grid, cv=5)\nKNN_CV.fit(X_train, y_train);","09d31331":"#View the accuracy score & best parameters for the model found using grid search.\n\nprint('Best score for training data:', KNN_CV.best_score_,\"\\n\")\nprint('Best nbr of neighbors:',KNN_CV.best_params_,\"\\n\")","329efb18":"# Select the optimal KNN model.\n\nKNN_classifier = KNN_CV.best_estimator_\ny_pred = KNN_classifier.predict(X_test)","338eabfb":"# View the score on the test set.\n\nprint(\"Training set score for KNN: %f\" % KNN_classifier.score(X_train , y_train))\nprint(\"Testing set score for KNN: %f\" % KNN_classifier.score(X_test , y_test))\nplot_confusion_matrix(KNN_classifier, X_test, y_test, display_labels=['Goalkeeper','Defender','Midfielder','Forward'], cmap='Blues');","59919ad0":"# Testing the trained KNN model on the FIFA 20 data.\n\nKNN_y20_pred = KNN_classifier.predict(X_20)\ny_20_int_label = y_20.map(pos_dic)\nprint('Accuracy:', accuracy_score(y_20_int_label, KNN_y20_pred))\nplot_confusion_matrix(KNN_classifier, X_20, y_20_int_label, display_labels=['Goalkeeper','Defender','Midfielder','Forward'], cmap='Blues');","4c314bf0":"# Scaling data.\n\nscaler = StandardScaler()\nX_train_scaled = scaler.fit_transform(X_train)\nX_test_scaled = scaler.transform(X_test)","b884ec32":"# Optimal parameters.\n\nparams_grid = [{'kernel': ['rbf'], 'gamma': [1e-1],'C': [100]}]","ebe305d0":"# Train and SVM model using the optimal parameters.\n\noptimal_SVM_model = svm.SVC(C=100, kernel='rbf', gamma=1e-1,)\noptimal_SVM_model.fit(X_train_scaled, y_train);","67dd0dd5":"# View results.\n\nprint(\"Training set score for SVM: %f\" % optimal_SVM_model.score(X_train_scaled , y_train))\nprint(\"Testing set score for SVM: %f\" % optimal_SVM_model.score(X_test_scaled  , y_test))","d8d16eef":"# Test the trained model, and view results.\n\nSVM_y_pred = optimal_SVM_model.predict(X_test_scaled)\nprint('Accuracy:',accuracy_score(y_test, SVM_y_pred))\nplot_confusion_matrix(optimal_SVM_model, X_test_scaled, y_test, display_labels=['Goalkeeper','Defender','Midfielder','Forward'], cmap='Blues');","604369a2":"# Generate the classification report.\n\ninv_pos_dic={ 0:'Goalkeeper',  1:'Defender', 2:'Midfielder', 3:'Forward'}\ny_test_label = pd.Series(y_test).map(inv_pos_dic)\ny_pred_label = pd.Series(SVM_y_pred).map(inv_pos_dic)\n\nprint(classification_report(y_test_label,y_pred_label))","be383e66":"# Test the final model on the FIFA 20 data.\n\nX_20_scaled = scaler.fit_transform(X_20)\nSVM_y20_pred = optimal_SVM_model.predict(X_20_scaled)\nprint('Accuracy:', accuracy_score(y_20_int_label, SVM_y20_pred))\nplot_confusion_matrix(optimal_SVM_model, X_20_scaled, y_20_int_label, display_labels=['Goalkeeper','Defender','Midfielder','Forward'], cmap='Blues');","9bf7228a":"acc_tree = accuracy_score(y_20, tree_y20_pred)\nacc_KNN = accuracy_score(y_20_int_label, KNN_y20_pred)\nacc_SVM = accuracy_score(y_20_int_label, SVM_y20_pred)\n\nr2_tree = r2_score(pd.Series(y_20).map(pos_dic), pd.Series(tree_y20_pred).map(pos_dic))\nr2_KNN = r2_score(y_20_int_label, KNN_y20_pred)\nr2_SVM = r2_score(y_20_int_label, SVM_y20_pred)\n\nacc_l=[acc_tree, acc_KNN, acc_SVM]\nr2_l=[r2_tree, r2_KNN, r2_SVM]\nindex_l=['Decision_Tree', 'KNN', 'SVM']\ndf_acc = pd.DataFrame(list(zip(acc_l, r2_l)), index =index_l, columns =['Accuracy', 'R2_score']) \ndf_acc","fb0beb6f":"tree_cm = confusion_matrix(y_20, tree_y20_pred, normalize='true')\nKNN_cm = confusion_matrix(y_20_int_label, KNN_y20_pred, normalize='true')\nSVM_cm = confusion_matrix(y_20_int_label, SVM_y20_pred, normalize='true')\n\ndef plot_cm(mat,y_ture,ax,case):\n    if case == 0:\n        df_cm = pd.DataFrame(mat, columns=np.unique(y_ture), index = np.unique(y_ture))\n        df_cm.index.name = 'True Label'\n        df_cm.columns.name = 'Predicted Label'\n        sb.heatmap(df_cm, cmap=\"Blues\", cbar=False, annot=True,annot_kws={\"size\": 10}, ax=ax)\n        plt.yticks(fontsize=10)\n        plt.xticks(fontsize=10)\n    else:\n        l_lab=['Goalkeeper','Defender','Midfielder','Forward']\n        df_cm = pd.DataFrame(mat, columns=np.array(l_lab), index = np.unique(l_lab))\n        df_cm.index.name = 'True Label'\n        df_cm.columns.name = 'Predicted Label'\n        sb.heatmap(df_cm, cmap=\"Blues\", cbar=False, annot=True,annot_kws={\"size\": 10}, ax=ax)\n        plt.yticks(fontsize=10)\n        plt.xticks(fontsize=10)","1dbf3798":"plt.figure(figsize=(20,5))\nplt.tight_layout()\nax1 = plt.subplot(131)\nplt.title('CM of the Decision Tree Model for FIFA 20 data')\nplot_cm(tree_cm, y_20, ax1,0)\nax2 = plt.subplot(132)\nplt.title('CM of the KNN Model for FIFA 20 data')\nplot_cm(KNN_cm, y_20, ax2,1)\nax3 = plt.subplot(133)\nplt.title('CM of the SVM Model for FIFA 20 data')\nplot_cm(SVM_cm, y_20, ax3,1)","70f9db44":"cols = {'0':'Goalkeeper', '1':'Defender', '2': 'Midfielder', '3':'Forward'}\nprint('Classification report of the decision tree model for the FIFA 2020 data:')\ndisplay(pd.DataFrame(classification_report(y_20, tree_y20_pred, output_dict=True)))\nprint('Classification report of the KNN model for the FIFA 2020 data:')\ndisplay(pd.DataFrame(classification_report(y_20_int_label, KNN_y20_pred, output_dict=True)).rename(columns=cols))\nprint('Classification report of the SVM model for the FIFA 2020 data:')\ndisplay(pd.DataFrame(classification_report(y_20_int_label, SVM_y20_pred, output_dict=True)).rename(columns=cols))","085d795d":"**Checking for value types issues**","4430e034":"**Breaking news:** After a very hard fixture, the SVM team emerged victorious and won the 2020 league title with 88% accuracy, KNN team came second place with 86% accuracy and DT team in third place with 84% accuracy. ","483bf635":"## Data Wrangling\nThe first step in this project is to wrangle the [fifa-20-complete-player-dataset](http:\/\/https:\/\/www.kaggle.com\/stefanoleone992\/fifa-20-complete-player-dataset) data. This procedure will be executed folowing the famous 3 steps of data wrangling:\n1. Gathering\n2. Assessing\n3. Cleaning\n\nIn the first step we're going to import and read the data we're going to work with. Then, we're going to assess our data and note down any quality or tidiness issues. As a final step, we will define cleaning tasks and execute them to build our master dataset.","4bf1f159":"Although, the number of players aged 16 to 20 and 33 and over are similar in each year. We can see clearly that the number of players aged 21 to 23 has increased in the last 6 years with a bigger difference in number for players aged 25.","b1cdc1aa":"## Prediction models\n\nIn this section of the notebook we're going to create basic models using scikit-learn library to predict:\n - The overall rating of a players using Ordinary Least Square regression model.\n - The position of a player using Decision Tree, K-Nearest-Neighbors, and Support Vector Machine models.\n \nIn the training phase of each model we're going to use only the data from 2015 to 2019. Once the model is trained we're going to test it using he 2020 data and compare its results with those of the other models.\n\n### Overall rating prediction","7a46d070":"The figure below presents the scatter plot of the predictions vs true values of the overall ratings for the FIFA 2020 data.\nThe points that are on the red line are the ones predicted correctly.","e9adff5e":"### Cleaning\n\nDuring this step, we're going to clean every issue mentionned in the assessing step. Then we're going to join the dataframes to create our master data set.","44b2beb8":"To better understand the signification of the column names, we refer to the [sofifa](http:\/\/https:\/\/sofifa.com\/) website where each player has a page containing all the informations that are present in the datasets we have. An example is shown below of the page of Lionel Messi:\n![Messi page](https:\/\/snipboard.io\/ulp0VP.jpg)","8a23d258":"Column names:","9ffe73dc":"Checking for remaining NULL values in the dataframe.","a723eed7":"Changing the NULL, RES, and SUB team positions values to the actual player position.\n\nChecking that each player has a valid position.","373a4e71":"### SVM classification","06cfa110":"**Confusion Matrices:**","e06d8fd0":"# Data Analysis of FIFA 15-20\n\n\nIn this project we're going to analyse [the data of 6 FIFA Games](https:\/\/www.kaggle.com\/stefanoleone992\/fifa-20-complete-player-dataset) collected and presented by [Stefano Leone](https:\/\/www.kaggle.com\/stefanoleone992).\n\nFIFA is a game released annually by Electronic Arts under the EA Sports label. As of 2011, the FIFA franchise has been localised into 18 languages and available in 51 countries. Listed in Guinness World Records as the best-selling sports video game franchise in the world, by 2019, the FIFA series had sold over 282.4 million copies. It is also one of the best-selling video game franchises...[Read More](https:\/\/en.wikipedia.org\/wiki\/FIFA_(video_game_series))\n\n### **Brief description of the dataset:**\n- Every player available in FIFA 15, 16, 17, 18, 19, and also FIFA 20\n- 100+ attributes\n- URL of the scraped player\n- Player positions, with the role in the club and in the national team\n- Player attributes with statistics as Attacking, Skills, Defense, Mentality, GK Skills, etc.\n- Player personal data like Nationality, Club, DateOfBirth, Wage, Salary, etc.\n\n![FIFA](https:\/\/cdn.vox-cdn.com\/thumbor\/lTP0_tHaDU3IC0YXPdqzFTzZ97s=\/0x150:7680x4171\/fit-in\/1200x630\/cdn.vox-cdn.com\/uploads\/chorus_asset\/file\/12785703\/FIFA19_ActiveTouch_Gen4.jpg)\n\n\n### **Notebook Structure**\n1. [Data Wrangling](#Data-Wrangling)\n    1. [Gathering](#Gathering)\n    2. [Assessing](#Assessing)\n    3. [Cleaning](#Cleaning)\n2. [Exploratory data analysis](#Exploratory-data-analysis)\n3. [Prediction Models](#Prediction-Models)\n    1. [OLS regression Model](#Overall-rating-prediction)\n    2. [Classification Models](#Player-position-classification)\n    3. [Summary](#Summary-of-Decision-Tree-vs-KNN-vs-SVM-for-player-postion-prediction)\n","6a9fdfba":"Coefficient of determination:\n\nBest possible score is 1.0 and it can be negative (because the model can be arbitrarily worse). A constant model that always predicts the expected value of y, disregarding the input features, would get a R2 score of 0.0.","88390c27":"Converting the player traits column to a numerical variable so that we can use it for later analysis and estimations.","a2740348":"The modal age of players throughout the last  6 years is 180 cm.","c841a964":"View dataframe after cleaning, and saving it to a .csv file.","6e3029cf":"### Quality:\n\n* Many columns have NULL values.\n* Some player have non uniform body type.\n* Some players have SUB or RES as team_position value.\n\n### Tidiness:\n\n* The column named player_traits is actually representing many variables in one column.\n\n**Columns to drop:** \n* player_url, real_face, player_tags, release_clause_eur, player_positions, loaned_from, joined, contract_valid_until, nation_position, nation_jersey_number, gk_diving, gk_handling, gk_kicking, gk_reflexes, gk_speed,  gk_positioning, ls, st, rs, lw, lf, cf, rf, rw, lam, cam, ram, lm, lcm, cm, rcm, rm, lwb, ldm, cdm, rdm, rwb, lb, lcb, cb, rcb, rb.\n\n**Columns to be merged into a single column:**\n* **attack_overall**: attacking_crossing, attacking_finishing, attacking_heading_accuracy, attacking_short_passing, attacking_volleys.\n* **skill_overall**: skill_dribbling, skill_curve, skill_fk_accuracy, skill_long_passing, skill_ball_control.\n* **movement_overall**: movement_acceleration, movement_sprint_speed, movement_agility, movement_reactions, movement_balance.\n* **power_overall**: power_shot_power, power_jumping, power_stamina, power_strength, power_long_shots.\n* **mentality_overall**: mentality_aggression, mentality_interceptions, mentality_positioning, mentality_vision, mentality_penalties, mentality_composure.\n* **defending_overall**: defending_marking, defending_standing_tackle, defending_sliding_tackle.\n* **gk_overall**: goalkeeping_diving, goalkeeping_handling, goalkeeping_kicking, goalkeeping_positioning, goalkeeping_reflexes.\n","07f3c07a":"Some variable distributions by year:","f14b2fc1":"Checking for remaining NULL variable after cleaning.","05b63ba7":"**Our Aim:**\n* Present a brief data analysis for each year from 2015 to 2020.\n* Present a comparative analysis depicting the evolution of certain players from 2015 to 2020.\n* Building models that predict players overall ratings and positions based on their attributes.","c54fb5d7":"**Best Players in every position in each year:**","446c5d5e":"### KNN classification","484018f2":"#### Checking the column names","1f6bb7f8":"Setting every non-uniform player body type to Normal.","3641f365":"Clean dataframe:","91e5a828":"## Exploratory data analysis\n\nIn this part of the notebook, we're going to explore the data we have  and try to look for valuable insights. The analysis will focus mainly on comparing the data of the different years we have (2015 to 2020).","aa64f564":"Checking that the attribute values of the form 'XX+X' are converted successfully to integers:","7e99b621":"**Accuracy and R2 score:**","40ce005d":"### Assessing\n\nIn this step, we're going to assess the data we have and note every quality or tidiness issue, so that we would have a data set that is ready for cleaning and then exploring. The issues regarding the quality and tidiness of the data set we have are denoted at the end of the assessment section.\n","0c33b8cf":"The number of player with ratings bigger than 60 has increased through the years, with the biggest increase of players rated 70 overall.","0cee1e83":"The selection of the parameters Gamma and C for the SVM model with an RBF kernel has been done using GridSearchCV with 5 folds. To maintain a lower execution time for this notebook we're going to use the optimal parameters directly, however one can reproduce them using the following lines of code:\n> params_grid = [{'kernel': ['rbf'], 'gamma': [1e-1, 1e-2, 1e-3],'C': [1, 10, 100, 1000]}]<br>\n svm_model = GridSearchCV(svm.SVC(), params_grid, cv=5)<br>\n svm_model.fit(X_train_scaled, y_train)<br> #View the accuracy score<br>\n print('Best score for training data:', svm_model.best_score_,\"\\n\")<br> #View the best parameters for the model found using grid search<br>\n print('Best C:',svm_model.best_estimator_.C,\"\\n\") <br>\n print('Best Kernel:',svm_model.best_estimator_.kernel,\"\\n\")<br>\n print('Best Gamma:',svm_model.best_estimator_.gamma,\"\\n\")<br>\n final_SVM_model = svm_model.best_estimator_\n ","6680e19e":"## Summary of Decision Tree vs KNN vs SVM for player postion prediction\n\nAfter training each of the three models on 80% of the data of FIFA 15, 16 ,17, 18 and 19. The 3 models are used to predict the players positions of FIFA 20. Below are the results of each model:","2896dfd9":"### Gathering\n\nSince we're using data available on Kaggle, this step is reduced to simply importing and reading the data.","92a3ecae":"If you like this notebook, please feel free to **UPVOTE**! Leave Comment below for your suggestions on how to improve.","80f800fb":"### Decision Tree","15f19dac":"## Player position classification:\n\nIn this section, we're going to train three models to classify players positions given their attributes. \n\nThere 15 player positions in the dataset, we're going to group them in 4 categories: Goalkeeper, Defender, Midfielder, and Forward. This would facilitate the task without losing significant information about the player position.\n\nWe're going to proceed by tuning the hyper-parameters of these models in order to determine the optimal set of parameters for the task in hands.","41d7e479":"Changing GK NULL attributes to 0, and changing players NULL team jersey number to 0"}}