{"cell_type":{"fe2a48a1":"code","b03e9637":"code","4f1815e6":"code","663d89cb":"code","c02b1fdb":"code","c8b4e481":"code","24f3161a":"code","3bc94ef6":"code","a194e8da":"code","1d5288a1":"code","4b742c34":"code","239e4ce0":"code","09ae7d9b":"code","123f7973":"code","ad79f7af":"code","dcbd2bfa":"code","aaed3435":"code","1b02c06d":"code","a8e144c5":"code","b05d58a8":"code","d234c06b":"code","1af39fa8":"code","2ba5ec1e":"code","3af6d8bc":"code","80e327b1":"code","668d55f4":"code","ca846797":"code","bec63a58":"code","747d8e79":"code","fdcbd00d":"code","79de0d4f":"code","58e4296e":"code","3e29c792":"code","ec2dd457":"code","3660bfc8":"code","a73bae29":"code","c4736651":"code","5c77b37d":"code","4fe20d6e":"code","71c6f452":"code","5b4ffa88":"code","0c92f6a2":"code","83f1d0f1":"code","f99b2406":"code","56e371b5":"code","71202c55":"code","692b5f89":"code","181f8765":"markdown"},"source":{"fe2a48a1":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","b03e9637":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport warnings\nwarnings.filterwarnings('ignore')","4f1815e6":"df_training = pd.read_csv(\"..\/input\/ipl-2020-player-performance\/Training.csv\")\ndf_training.head()","663d89cb":"ipl_2020 = pd.read_csv(\"..\/input\/ipl-2020-player-performance\/Matches IPL 2020.csv\")\nipl_2020.head()","c02b1fdb":"ipl_previous = pd.read_csv(\"..\/input\/ipl-2020-player-performance\/Matches IPL 2008-2019.csv\")\nipl_previous.head()","c8b4e481":"ipl_previous.shape","24f3161a":"ipl_previous.isna().sum()","3bc94ef6":"ipl_previous.season.unique()","a194e8da":"fig_dims=(20,5)\nplt.subplots(figsize=fig_dims)\nsns.countplot(x= ipl_previous['season'],data= ipl_previous)\nplt.show()","1d5288a1":"fig_dims=(20,5)\nsns.set(font_scale=1.5)\nsns.set_style(\"white\")\nplt.subplots(figsize=fig_dims)\nsns.countplot(x=ipl_previous[\"winner\"],palette=\"rocket\", data= ipl_previous, order=ipl_previous.winner.value_counts().iloc[:5].index)\nplt.show()","4b742c34":"player_highestpoints = df_training.nlargest(5, ['Total Points'])\nfig_dims=(20,5)\nplt.subplots(figsize=fig_dims)\nplt.bar(player_highestpoints['Id'], player_highestpoints['Total Points'])\nplt.show()","239e4ce0":"sns.countplot(x=\"player_of_match\", data= ipl_previous, palette=\"rocket\",order= ipl_previous.player_of_match.value_counts().iloc[:3].index)\nplt.show()","09ae7d9b":"player_highestpoints = df_training.nlargest(5, ['Batting_Points'])\nfig_dims=(20,5)\nplt.subplots(figsize=fig_dims)\nplt.bar(player_highestpoints['Id'], player_highestpoints['Batting_Points'])\nplt.show()","123f7973":"df_training","ad79f7af":"players = pd.read_csv(\"..\/input\/ipl-2020-player-performance\/IPL 2020 Squads.csv\",encoding =\"unicode_escape\")\nplayers","dcbd2bfa":"df_training.head()","aaed3435":"df_training['players'] = df_training['Id']\ndf_training['number'] =  df_training['Id']\nfor i in range(0, len( df_training)):\n    df_training['players'][i] =  df_training['Id'][i].split(\"_\")[-1]\n    df_training['number'][i] = int( df_training['Id'][i].split('_')[:1][0])","1b02c06d":"df_training.head()","a8e144c5":"df_training['players'].value_counts()","b05d58a8":"df_training.number = df_training.number.astype(int)\ndf_training.head()","d234c06b":"plt.figure(figsize=(25,10),dpi=300)\nsns.heatmap(df_training.corr(),annot =True)\nplt.show()","1af39fa8":"df = pd.DataFrame()\ndf['match_number'] = df_training['number']\ndf['players'] = df_training['players']\ndf['total_score'] = df_training['Total Points']\ndf['Id']    = df_training['Id']\ndf.head()","2ba5ec1e":"df.groupby(['players','match_number']).sum()","3af6d8bc":"df['players'].value_counts()","80e327b1":"df = df.drop(['players'],axis = 1)","668d55f4":"df = df.iloc[:1283]\ndf.shape","ca846797":"df.match_number=  df.match_number.astype(int)\nd =df.select_dtypes(include='object')\nn = df.select_dtypes(exclude='object')\nd.columns","bec63a58":"d = pd.get_dummies(d,drop_first=True)","747d8e79":"df = pd.concat([d,n],axis = 1)","fdcbd00d":"df.head()","79de0d4f":"from sklearn.model_selection import train_test_split\nfrom sklearn.linear_model import LinearRegression\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.metrics import mean_squared_error","58e4296e":"X= df.drop(['total_score'],axis=1)\ny= df.total_score","3e29c792":"X_train,X_test,y_train,y_test = train_test_split(X,y,test_size=0.3,random_state=42)","ec2dd457":"scaler = StandardScaler()\nscaler.fit(X_train)\nX_train = scaler.transform(X_train)\nX_test = scaler.transform(X_test)","3660bfc8":"model = LinearRegression()\nmodel.fit(X_train,y_train)\ny_pred = model.predict(X_test)","a73bae29":"y_pred = np.round(y_pred)","c4736651":"rmse = np.sqrt(mean_squared_error(y_test,y_pred))\nrmse","5c77b37d":"df_sample = pd.read_csv('..\/input\/ipl-2020-player-performance\/sample_submission.csv')","4fe20d6e":"df_sample","71c6f452":"df_sample['players'] = df_sample['Id']\ndf_sample['number'] =  df_sample['Id']\nfor i in range(0, len(df_sample)):\n    df_sample['players'][i] =  df_sample['Id'][i].split(\"_\")[-1]\n    df_sample['number'][i] = int( df_sample['Id'][i].split('_')[:1][0])\ndf_sample","5b4ffa88":"total_points = df_sample.drop(['Total Points','players'],axis=1)\ntotal_points.number = total_points.number.astype(int)\ntotal_points.number.dtypes\nt = total_points.select_dtypes(include='object') \np = total_points.select_dtypes(exclude='object')\n\nt.columns\nt= pd.get_dummies(t,drop_first=True)\nt.columns","0c92f6a2":"total_points = pd.concat([t,p],axis=1)\n\ntotal_points.head()","83f1d0f1":"scaler.fit(total_points)\ntotal_points = scaler.transform(total_points)\nyp_pred = model.predict(total_points)\nyp_pred = np.round(yp_pred)","f99b2406":"yp_pred  = [0 if i<0 else i for i in yp_pred]","56e371b5":"df_sample['Total Points'] = yp_pred\ndf_sample = df_sample.drop(['players','number'],axis = 1)\ndf_sample.head()","71202c55":"df_sample.to_csv('IPL_Players_Performance',index = False)","692b5f89":"Forecast = pd.read_csv(\".\/IPL_Players_Performance\")\nForecast.tail(20)","181f8765":"Clean Id column to extract player's name and create a seprate column for the number of match of that player."}}