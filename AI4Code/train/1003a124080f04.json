{"cell_type":{"9ca2b5ef":"code","3c50370b":"code","936cf1a9":"code","b6cf463f":"code","d2d0aa8d":"code","86e0b97b":"code","967e6d57":"code","3f247df2":"code","7693db52":"code","29f64946":"code","dfc022e7":"markdown","918f4938":"markdown"},"source":{"9ca2b5ef":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","3c50370b":"df_train = pd.read_csv('\/kaggle\/input\/covid19-global-forecasting-week-3\/train.csv')\ndf_submission = pd.read_csv('\/kaggle\/input\/covid19-global-forecasting-week-3\/submission.csv')\ndf_test = pd.read_csv('\/kaggle\/input\/covid19-global-forecasting-week-3\/test.csv')","936cf1a9":"df_train","b6cf463f":"df_submission","d2d0aa8d":"df_test","86e0b97b":"# date_list(from 2020-1-22 untill2020-3-25)\nwork_list = []\nfirst_date = df_train['Date'][0]\nlast_date = '2020-03-25'\ninner_list = []\ndata_in_status = 0\nfor i in range(len(df_train)):\n    date = df_train['Date'][i]\n    if date == first_date:\n        date_list = []\n        data_in_status = 1\n    if data_in_status == 1:\n        province_state = df_train['Province_State'][i]\n        country_region = df_train['Country_Region'][i]\n        confirmed_cases = df_train['ConfirmedCases'][i]\n        fatalities = df_train['Fatalities'][i]\n        inner_dic = {'Province_State':province_state,\n                     'Country_Region':country_region,\n                     'Date':date,\n                     'ConfirmedCases':confirmed_cases,\n                     'Fatalities':fatalities\n                    }\n        inner_list.append(inner_dic)\n        date_list.append(date)\n        if date == last_date:\n            work_list.append(inner_list)\n            data_in_status = 0\n            inner_list = []\nnp_date_list = np.array(date_list)\nnp_date_list","967e6d57":"df_work_list = pd.DataFrame(work_list)\ndf_work_list","3f247df2":"# Make add_date_list(from 2020-03-26 untill 2020-04-30)\nadd_date_list = []\nfor i in range(len(df_test['Date'])):\n    date = df_test['Date'][i]\n    add_date_list.append(date)\n    if date == '2020-05-07':\n        break\nnp_add_date_list = np.array(add_date_list)\nnp_add_date_list","7693db52":"# Analysys, Visualization, output CSV\nimport matplotlib.pyplot as plt\nfrom sklearn.metrics import r2_score\nforecast_id = 0\nsubmission_list = []\ntest_list = []\nfor i in range(len(work_list)):\n    country_list = work_list[i]\n    if pd.isnull(country_list[0]['Province_State']):\n        province_state = ''\n    else:\n        province_state = '(' + country_list[0]['Province_State'] + ')'\n    country_region = country_list[0]['Country_Region']\n    confirmed_list = []\n    fatalities_list = []\n    for j in range(len(country_list)):\n        confirmed = country_list[j]['ConfirmedCases']\n        confirmed_list.append(confirmed)\n        fatalities = country_list[j]['Fatalities']\n        fatalities_list.append(fatalities)\n        \n    fig = plt.figure()\n    ax = fig.add_subplot(1,1,1)\n\n    x = date_list\n    y_c = np.array(confirmed_list)\n    y_f = np.array(fatalities_list)\n    x1 = np.arange(len(x))\n    #**********************************************************\n    # Determine dimensions\n    score_list_c = []\n    score_list_f = []\n    for dimension in range(1, 7):\n        fit_c = np.polyfit(x1, y_c, dimension)\n        fit_f = np.polyfit(x1, y_f, dimension)\n        y_c2 = np.poly1d(fit_c)(x1)\n        y_f2 = np.poly1d(fit_f)(x1)\n\n         # r2_score\n        score_c = r2_score(y_c, y_c2)\n        score_f = r2_score(y_f, y_f2)\n        score_list_c.append(score_c)\n        score_list_f.append(score_f)\n    max_c = max(score_list_c)\n    max_dimension_c = 1\n    for k in range(len(score_list_c)):\n        if score_list_c[k] == max_c:\n            max_dimension_c = k\n            break\n    max_f = max(score_list_f)\n    max_dimension_f = 1\n    for k in range(len(score_list_f)):\n        if score_list_f[k] == max_f:\n            max_dimension_f = k\n            break\n    fit_c = np.polyfit(x1, y_c, max_dimension_c)\n    fit_f = np.polyfit(x1, y_f, max_dimension_f)\n    y_c2 = np.poly1d(fit_c)(x1)\n    y_f2 = np.poly1d(fit_f)(x1)\n    #**********************************************************\n\n    # predict\n    temp_date = np.append(x, add_date_list)\n    x2 = x\n    predict_list_c = []\n    predict_list_f = []\n    saved_predict_c = 0\n    saved_predict_f = 0\n    inner_count = 0\n    for j in range(len(x), len(temp_date)):\n        predict_c = np.poly1d(fit_c)(j)\n        predict_f = np.poly1d(fit_f)(j)\n        if predict_c < predict_f:\n            predict_f = predict_c\n        x2 = np.append(x2, temp_date[j])\n        if predict_c > saved_predict_c:\n            predict_list_c.append(predict_c)\n            saved_predict_c = predict_c\n        else:\n            predict_list_c.append(saved_predict_c)\n            \n        if predict_f > saved_predict_f:\n            predict_list_f.append(predict_f)\n            saved_predict_f = predict_f\n        else:\n            predict_list_f.append(saved_predict_f)\n            \n        # for submission & display test data\n        forecast_id += 1\n        submission_dic = {'ForecastId':forecast_id,\n                          'ConfirmedCases':saved_predict_c,\n                          'Fatalities':saved_predict_f\n                         }\n        test_dic = {'ForecastId':forecast_id,\n                    'ConfirmedCases':saved_predict_c,\n                    'Fatalities':saved_predict_f,\n                    'Date':np_add_date_list[inner_count],\n                    'Province_State':province_state,\n                    'Country_Region':country_region\n                   }\n        \n        inner_count += 1\n        submission_list.append(submission_dic)\n        test_list.append(test_dic)\n        \n    predict_list_c = np.array(predict_list_c)\n    predict_list_f = np.array(predict_list_f)\n    y_c3 = np.append(y_c2, predict_list_c)\n    y_f3 = np.append(y_f2, predict_list_f)\n\n    ax.plot(x,y_c,'bo', color='y', label='Confirmed')\n    ax.plot(x2,y_c3,'--k', color='g', label='Confirmed')\n    ax.plot(x,y_f,'bo', color='pink', label='Fatalities')\n    ax.plot(x2,y_f3,'--k', color='r', label='Fatalities')\n\n    plt.title(country_region + province_state)\n    plt.xlabel(\"Date\")\n    plt.ylabel(\"Number of people\")\n    plt.xticks(np.arange(0, len(x2), 10), rotation=-45)\n    plt.grid(True)\n    plt.tight_layout()\n    plt.legend()\n    plt.show()\n\n   \n    print('Score(Confirmed):{:.4f}'.format(score_c))\n    print('Score(Fatalities):{:.4f}'.format(score_f))\n    print('Dimension(Confirmed):{}'.format(max_dimension_c))\n    print('Dimension(Fatalities):{}'.format(max_dimension_f))","29f64946":"my_submission_list = pd.DataFrame(submission_list)\nmy_submission_list.to_csv(path_or_buf='submission.csv', index=False)\ndf_test_list = pd.DataFrame(test_list)\ndf_test_list.to_csv(path_or_buf='test.csv', index=False)\ndf_test_list","dfc022e7":"**Make work_list and date_list**","918f4938":"**Nonlinear regression analysis**"}}