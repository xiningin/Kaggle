{"cell_type":{"0047234d":"code","f4e8f2cf":"code","21d0f39e":"code","301fc23f":"code","2b26943b":"code","1a61664c":"code","2a163c5b":"code","d119a034":"code","15f2ea94":"code","d5be7dbd":"code","4a5fd61b":"code","476dd94d":"code","6a5516b9":"code","0665f5da":"code","99f0caba":"code","529607f4":"code","ba417212":"code","cbae42c0":"code","d11e2ae2":"code","93e020f0":"code","ed3adde6":"code","a9514eba":"code","3989a543":"code","df679e69":"code","34149545":"code","c00ff148":"code","d4076981":"code","8e97df91":"markdown","f26e67ad":"markdown","39bb2789":"markdown","8249dcc0":"markdown","8c22525a":"markdown","78151402":"markdown","4e1b1193":"markdown","a4380653":"markdown","f9415a2c":"markdown","42e37160":"markdown"},"source":{"0047234d":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import classification_report, confusion_matrix\nfrom sklearn.metrics import accuracy_score\nfrom sklearn.preprocessing import OneHotEncoder\nfrom sklearn.compose import ColumnTransformer\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.preprocessing import MinMaxScaler\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.naive_bayes import GaussianNB\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn import metrics\nimport pickle","f4e8f2cf":"games = pd.read_csv(\"..\/input\/euroleague-basketball-advanced-stats\/games_advanced_stats.csv\")","21d0f39e":"games.head()","301fc23f":"# if it is a win = 1, lose = 0\ngames[\"wins\"] = 0\nfor k in range(len(games)):\n    if games[\"win\"][k] == True:\n        games[\"wins\"][k] = 1\n    else:\n        games[\"wins\"][k] = 0","2b26943b":"games.info()","1a61664c":"games.team.unique()","2a163c5b":"games.describe()","d119a034":"# no data snooping!\ntrain, test = train_test_split(games, test_size = 0.2)\n\n# use a copy to not lose \ntrain_copy = train","15f2ea94":"# the distribution of the scores for the Home and Away teams for each season\n\nsns.boxplot(hue=\"location\", x=\"season\", y=\"PTS\", data=train_copy, palette=\"Set3\")\nplt.xlabel(\"Scores\")\nplt.ylabel(\"Season\")\nplt.title(\"The distribution of the scores for the Home and Away teams for each season\")\nplt.legend(loc='upper left');","d5be7dbd":"# calculate the total wins of each team\nunique_teams = train_copy.team.unique()\n\ntotal_wins = dict((el,0) for el in unique_teams)\n\nwins = []\n\nfor i in range(len(unique_teams)):\n    wins.append(train_copy.loc[games[\"team\"] == unique_teams[i], 'win'].sum())\n    \nkeys = list(total_wins.keys())\ntotal_wins[keys[1]]\n\nfor i in range(len(total_wins)):\n    total_wins[keys[i]] = wins[i]\n    \ntotal_wins","4a5fd61b":"keys = total_wins. keys()\nvalues = total_wins. values()\nplt.bar(keys, values)\nplt.xticks(rotation=90);","476dd94d":"train_copy.team.value_counts()","6a5516b9":"train_copy.isna().sum()","0665f5da":"train_copy[\"FT%\"]","99f0caba":"train_copy[\"FT%\"].fillna(train_copy[\"FT%\"].mean(), inplace=True)","529607f4":"train_copy.isna().sum().sum()","ba417212":"games_copy = train_copy","cbae42c0":"games_copy.isna().sum().sum()","d11e2ae2":"plt.figure(figsize=(12,10))\ncor = games_copy.corr()\nsns.heatmap(cor, annot=True, cmap=plt.cm.Reds, linewidths=0.5, fmt=\".2f\")\nplt.show()","93e020f0":"# see which variables have the most correlation\ncor = games_copy.corr()\ncor_target = abs(cor[\"wins\"])\nrelevant_features = cor_target[(cor_target>0.5)]\nrelevant_features","ed3adde6":"# see if these variables are uncorrelated with each other\nprint(games_copy[[\"NETRtg\",\"win\"]].corr())","a9514eba":"games = pd.read_csv(\"..\/input\/euroleague-basketball-advanced-stats\/games_advanced_stats.csv\")","3989a543":"# no data snooping, split the test and train data\n\ntest_season = 2019\n\ngames_train = games[games['season'] != test_season]\ngames_test = games[games['season'] == test_season]\n\n# make a copy of train data\ngames_train_copy = games_train\n\n# make a copy of test data\ngames_test_copy = games_test","df679e69":"# fill missing values\ndef missing_values(games):\n    \"\"\"\n    Takes the games dataframe and fills out the missing values.\n    \"\"\"\n    \n    games[\"FT%\"].fillna(games[\"FT%\"].mean(), inplace=True)\n    games = games.reset_index()\n    return games\n    \n# feature selection\ndef feature_selection(games):\n    \"\"\"\n    Takes the games dataframe and applies feature selection to the dataframe after.\n    \"\"\"\n    \n    # if it is a win = 1, lose = 0\n    games[\"wins\"] = 0\n    for k in range(len(games)):\n        if games[\"win\"][k] == True:\n            games[\"wins\"][k] = 1\n        else:\n            games[\"wins\"][k] = 0\n        \n    # drop unnecessary columns\n    games.drop(\"game_id\", axis = 1, inplace=True)\n    games.drop(\"win\", axis = 1, inplace=True)\n    games = games.reset_index()\n    return games\n    \ndef cat_to_num_games(games):\n    \"\"\"\n    Takes the games dataframe and returns the dataframe with transformed categorical to numerical values.\n    \"\"\"\n    cat_col = [\"team\", \"location\", \"OP_team\"]\n    dummies = pd.get_dummies(games[cat_col])\n    games = games.drop(cat_col, axis = 1)\n    games = pd.concat([games, dummies], axis = 1)\n    return games\n\n# for games and teams\n\n# scaling\ndef scaling(df):\n    \"\"\"\n    Takes the games and teams dataframes separately and returns the dataframe after min-max scaling.\n    \"\"\"\n    scaler = MinMaxScaler()\n    transformed = scaler.fit_transform(df)\n    # keep the column names\n    cat_df = pd.DataFrame(transformed, columns = df.columns)\n    df = cat_df\n    return df\n    \n\ndef together(games):\n    \"\"\"\n    Returns the games and teams dataframes after all applications.\n    \"\"\"\n    #games\n    games = missing_values(games)\n    games = feature_selection(games)\n    games = cat_to_num_games(games)\n    #games = scaling(games)\n    return games","34149545":"games_train_final = together(games_train_copy)","c00ff148":"games_train_final.head()","d4076981":"# apply transformations to test data separately\ngames_test_final = together(games_test_copy)","8e97df91":"# Data Visualization","f26e67ad":"## Missing Values","39bb2789":"The prediction is a binary classification problem, predicting whether a match is win (1) or not (0).","8249dcc0":"Home teams tend to score more as of each season.","8c22525a":"# Import Libraries","78151402":"# Prepare Data","4e1b1193":"## Pearson Correlation","a4380653":"According to Pearson Correlation, we can only use NETRtg to predict ```wins```.","f9415a2c":"# Understanding Data","42e37160":"### Write Functions"}}