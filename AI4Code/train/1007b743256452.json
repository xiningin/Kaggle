{"cell_type":{"38d3efd3":"code","bb7270e0":"code","ed71347f":"code","b6834858":"code","060d1aa6":"code","3b76a2f8":"code","a59379c1":"code","9643addd":"code","8b046967":"markdown"},"source":{"38d3efd3":"import numpy as np \nimport pandas as pd \nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport scipy.stats\nfrom scipy.stats import chi2_contingency\nfrom scipy.stats import chi2\nimport re\nfrom sklearn import feature_selection\nfrom collections import Counter\npd.set_option(\"display.max_rows\", 50, \"display.max_columns\", 50)","bb7270e0":"df_train = pd.read_csv('..\/input\/titanic\/train.csv')\ndf_test = pd.read_csv('..\/input\/titanic\/test.csv')\nPassengerId = df_test['PassengerId']\nsample_subm = pd.read_csv('..\/input\/titanic\/gender_submission.csv')","ed71347f":"# Outlier detection \n\ndef detect_outliers(df,n,features):\n    \"\"\"\n    Takes a dataframe df of features and returns a list of the indices\n    corresponding to the observations containing more than n outliers according\n    to the Tukey method.\n    \"\"\"\n    outlier_indices = []\n    \n    # iterate over features(columns)\n    for col in features:\n        # 1st quartile (25%)\n        Q1 = np.percentile(df[col], 25)\n        # 3rd quartile (75%)\n        Q3 = np.percentile(df[col],75)\n        # Interquartile range (IQR)\n        IQR = Q3 - Q1\n        \n        # outlier step\n        outlier_step = 1.5 * IQR\n        \n        # Determine a list of indices of outliers for feature col\n        outlier_list_col = df[(df[col] < Q1 - outlier_step) | (df[col] > Q3 + outlier_step )].index\n        \n        # append the found outlier indices for col to the list of outlier indices \n        outlier_indices.extend(outlier_list_col)\n        \n    # select observations containing more than 2 outliers\n    outlier_indices = Counter(outlier_indices)        \n    multiple_outliers = list( k for k, v in outlier_indices.items() if v > n )\n    \n    return multiple_outliers   \n\n# detect outliers from Age, SibSp , Parch and Fare\nOutliers_to_drop = detect_outliers(df_train,2,[\"Age\",\"SibSp\",\"Parch\",\"Fare\"])\n# Drop outliers\ndf_train = df_train.drop(Outliers_to_drop, axis = 0).reset_index(drop=True)","b6834858":"full_data = [df_train, df_test]\n\n# Feature that tells whether a passenger had a cabin on the Titanic\ndf_train['Has_Cabin'] = df_train[\"Cabin\"].apply(lambda x: 0 if type(x) == float else 1)\ndf_test['Has_Cabin'] = df_test[\"Cabin\"].apply(lambda x: 0 if type(x) == float else 1)\n\n# Feature engineering steps taken from Sina\n# Create new feature FamilySize as a combination of SibSp and Parch\nfor dataset in full_data:\n    dataset['FamilySize'] = dataset['SibSp'] + dataset['Parch'] + 1\n# Create new feature IsAlone from FamilySize\nfor dataset in full_data:\n    dataset['IsAlone'] = 0\n    dataset.loc[dataset['FamilySize'] == 1, 'IsAlone'] = 1\n# Remove all NULLS in the Embarked column\nfor dataset in full_data:\n    dataset['Embarked'] = dataset['Embarked'].fillna('S')\n    \n    \n# Remove all NULLS in the Fare column and create a new feature CategoricalFare\nfor dataset in full_data:\n    dataset['Fare'] = dataset['Fare'].fillna(df_train['Fare'].median())\ndf_train['CategoricalFare'] = pd.qcut(df_train['Fare'], 4)\n# Create a New feature CategoricalAge\nfor dataset in full_data:\n    age_avg = dataset['Age'].mean()\n    age_std = dataset['Age'].std()\n    age_null_count = dataset['Age'].isnull().sum()\n    age_null_random_list = np.random.randint(age_avg - age_std, age_avg + age_std, size=age_null_count)\n    dataset['Age'][np.isnan(dataset['Age'])] = age_null_random_list\n    dataset['Age'] = dataset['Age'].astype(int)\ndf_train['CategoricalAge'] = pd.cut(df_train['Age'], 5)\n# Define function to extract titles from passenger names\ndef get_title(name):\n    title_search = re.search(' ([A-Za-z]+)\\.', name)\n    # If the title exists, extract and return it.\n    if title_search:\n        return title_search.group(1)\n    return \"\"\n# Create a new feature Title, containing the titles of passenger names\nfor dataset in full_data:\n    dataset['Title'] = dataset['Name'].apply(get_title)\n# Group all non-common titles into one single grouping \"Rare\"\nfor dataset in full_data:\n    dataset['Title'] = dataset['Title'].replace(['Lady', 'Countess','Capt', 'Col','Don', 'Dr', 'Major', 'Rev', 'Sir', 'Jonkheer', 'Dona'], 'Rare')\n\n    dataset['Title'] = dataset['Title'].replace('Mlle', 'Miss')\n    dataset['Title'] = dataset['Title'].replace('Ms', 'Miss')\n    dataset['Title'] = dataset['Title'].replace('Mme', 'Mrs')\n\nfor dataset in full_data:\n    # Mapping Sex\n    dataset['Sex'] = dataset['Sex'].map( {'female': 0, 'male': 1} ).astype(int)\n    \n    # Mapping titles\n    title_mapping = {\"Mr\": 1, \"Miss\": 2, \"Mrs\": 3, \"Master\": 4, \"Rare\": 5}\n    dataset['Title'] = dataset['Title'].map(title_mapping)\n    dataset['Title'] = dataset['Title'].fillna(0)\n    \n    # Mapping Embarked\n    dataset['Embarked'] = dataset['Embarked'].map( {'S': 0, 'C': 1, 'Q': 2} ).astype(int)\n    \n    # Mapping Fare\n    dataset.loc[ dataset['Fare'] <= 7.91, 'Fare'] \t\t\t\t\t\t        = 0\n    dataset.loc[(dataset['Fare'] > 7.91) & (dataset['Fare'] <= 14.454), 'Fare'] = 1\n    dataset.loc[(dataset['Fare'] > 14.454) & (dataset['Fare'] <= 31), 'Fare']   = 2\n    dataset.loc[ dataset['Fare'] > 31, 'Fare'] \t\t\t\t\t\t\t        = 3\n    dataset['Fare'] = dataset['Fare'].astype(int)\n    \n    # Mapping Age\n    dataset.loc[ dataset['Age'] <= 16, 'Age'] \t\t\t\t\t       = 0\n    dataset.loc[(dataset['Age'] > 16) & (dataset['Age'] <= 32), 'Age'] = 1\n    dataset.loc[(dataset['Age'] > 32) & (dataset['Age'] <= 48), 'Age'] = 2\n    dataset.loc[(dataset['Age'] > 48) & (dataset['Age'] <= 64), 'Age'] = 3\n    dataset.loc[ dataset['Age'] > 64, 'Age'] = 4 ;","060d1aa6":"# Feature selection\ndrop_elements = ['PassengerId', 'Name', 'Ticket', 'Cabin', 'SibSp']\ndf_train = df_train.drop(drop_elements, axis = 1)\ndf_train = df_train.drop(['CategoricalAge', 'CategoricalFare'], axis = 1)\ndf_test  = df_test.drop(drop_elements, axis = 1)","3b76a2f8":"#features = ['Pclass', 'Sex', 'Embarked']\nfeatures = df_train.columns[1:]\nfig = plt.figure(figsize=(15, 13))\nfor i in range(len(features)):\n    cont_table = np.array(pd.crosstab(df_train.Survived, df_train[features[i]], rownames=None, colnames=None))\n    stat, p, dof, expected = chi2_contingency(cont_table)\n    obs = np.sum(cont_table)\n    mini = min(cont_table.shape)-1 \n    cramers_v_stat = (stat\/(obs*mini))\n    fig.add_subplot(4, 3, i+1)\n    fig.subplots_adjust(left=None, bottom=None, right=None, top=None, wspace=None, hspace=0.5)\n    ax = sns.countplot(x=features[i], hue=\"Survived\", data=df_train)\n    ax.set_xlabel(features[i] + ', ' + 'cramers V: ' + str(round(cramers_v_stat, 4)) + '\\n' + 'p-value: ' + str(round(p,5)), fontsize=16)\nplt.show()","a59379c1":"cont_table = np.array(pd.crosstab(df_train.Title, df_train.Sex, rownames=None, colnames=None))\npd.crosstab(df_train.Title, df_train.Sex, rownames=None, colnames=None) # \"Mr\": 1, \"Miss\": 2, \"Mrs\": 3, \"Master\": 4, \"Rare\": 5 ","9643addd":"stat, p, dof, expected = chi2_contingency(cont_table)\nobs = np.sum(cont_table)\nmini = min(cont_table.shape)-1 \ncramers_v_stat = (stat\/(obs*mini))\nax = sns.countplot(x='Title', hue=\"Sex\", data=df_train)\nax.set_xlabel('Title' + ', ' + 'cramers V: ' + str(round(cramers_v_stat, 4)) + '\\n' + 'p-value: ' + str(round(p,5)), fontsize=16)\nplt.show()","8b046967":"# Feature engineering\n\n[Titanic Best Working Classfier](https:\/\/www.kaggle.com\/sinakhorami\/titanic-best-working-classifier) : by Sina"}}