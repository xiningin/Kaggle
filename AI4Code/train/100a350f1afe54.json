{"cell_type":{"77a0fd7c":"code","179af1e0":"code","6805f9ec":"code","36bcda7a":"code","b4ee11cf":"code","9444b830":"code","0f09b3d0":"code","16006d35":"code","938ef5c7":"code","ce7a8c33":"code","cc19f77f":"code","72dfeeaa":"code","e6f91b6f":"code","9688b36b":"code","609d2808":"code","1d2333ed":"code","f36da1d1":"code","593b27e5":"code","af8a3dca":"code","b4177d57":"code","beb4c587":"code","c0eeca5d":"code","bc0f27f3":"code","56327452":"code","fba4537c":"code","e5115ac1":"code","879a7252":"code","fcd0cf49":"code","e91eee14":"code","69866af6":"code","216b2938":"code","e3fa9dc8":"code","3bc0892c":"code","362a212c":"code","94d42f70":"code","259ae488":"code","29916a1b":"code","6ebea763":"code","18425fe2":"code","f5619c5b":"code","923dabd3":"code","27d1b4c3":"code","5500b98d":"code","e2d96f13":"code","330bf9be":"code","8998ef51":"code","0d8473be":"code","65cdda6a":"code","cd59e1ac":"code","7a1428dd":"code","a1ff616f":"code","ed4c9905":"code","97f0b72e":"code","3e2b5b77":"code","2d51edbb":"code","dfa770c0":"code","b15aaed8":"code","8d3a60d3":"code","370f8861":"code","990e9613":"code","b3f3bb38":"code","dd0cd7b5":"markdown","cda5c095":"markdown","b6f291f9":"markdown","281a9dad":"markdown","d8256f5e":"markdown","0f0cf02a":"markdown","f1b94a01":"markdown","cb4a049d":"markdown","2f370b0d":"markdown","a24ee7aa":"markdown","bcff2bb8":"markdown","4394829f":"markdown","3e8629f4":"markdown","fba7de41":"markdown","e6f0642c":"markdown"},"source":{"77a0fd7c":"import os\nimport numpy as np\nimport pandas as pd\nimport random\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\nfrom contextlib import contextmanager\nfrom time import time\nfrom tqdm import tqdm\nimport lightgbm as lgbm\nimport category_encoders as ce\n\nfrom tensorflow.keras.utils import to_categorical\nfrom sklearn.metrics import classification_report, log_loss, accuracy_score\nfrom sklearn.metrics import mean_squared_error\nfrom sklearn.model_selection import KFold\n\n# Pandas Profiling to get the overview of the data\nimport pandas_profiling as pp\n# Seaborn for plot graphically depicting groups of numerical data through their quartiles\nimport seaborn as sns","179af1e0":"# Load data file - diabetes _ 012 _ health _ indicators _ BRFSS2015.csv\n# is a clean dataset of 253,680 survey responses to the CDC's BRFSS2015. \n# The target variable Diabetes_012 has 3 classes.\n#    0 is for no diabetes or only during pregnancy\n#    1 is for prediabetes\n#    2 is for diabetes\n# There is class imbalance in this dataset. This dataset has 21 feature variables\n# Info about original data collected by BRFSS - https:\/\/www.kaggle.com\/cdc\/behavioral-risk-factor-surveillance-system\n\ndata0 = pd.read_csv(\"..\/input\/diabetes-health-indicators-dataset\/diabetes_012_health_indicators_BRFSS2015.csv\")\ndata0","6805f9ec":"# Check the missing values in the dataset\ndata0.isnull().values.any()","36bcda7a":"data0['Diabetes_012_str'] = data0['Diabetes_012'].replace({0.0:'Healthy', 1.0:'Pre-diabetic', 2.0:'Diabetic'})\n\naxes = data0[\"Diabetes_012_str\"].value_counts().plot.pie(autopct='%1.1f%%', fontsize=20, figsize=(5, 5))\naxes.set_ylabel('')\n\n\naxes.set_title(\"Diabetes statuses of {} Observations\".format(data0.shape[0]), fontsize=25)\n","b4ee11cf":"# The following is a QA check, showing that approximatly 2000 people hadn't had a cholesterol check in the past 5 years, \n# yet they indicats for a high cholesterol.\n# It shows they number of people who replied no for not being checked for cholesterol, still replied yes for \n# having high colesterol, which implies that the data is not completely reliable. \n\ndata0[(data0['CholCheck'] == 0.0) & (data0['HighChol'] != 0.0)]","9444b830":"# Comparing non-smokers to smokers in each diabetic status, normalized\n# group diabetes status & Smokers\n\ndiabetes_Smokers = data0.groupby(['Diabetes_012', 'Smoker']).size().reset_index(name = 'Count')\nprint(diabetes_Smokers)","0f09b3d0":"Total_Stat = diabetes_Smokers.groupby(['Diabetes_012']).sum().Count\nTotal_Stat","16006d35":"Temp = diabetes_Smokers.set_index('Diabetes_012').join(Total_Stat,rsuffix='_')\nTemp['Percentage'] = Temp['Count']\/Temp['Count_']\nTemp = Temp.reset_index()\nTemp","938ef5c7":"Temp['Diabetes_012'] = Temp['Diabetes_012'].replace({0.0:'Healthy', 1.0:'Pre-diabetic', 2.0:'Diabetic'})\nTemp['Smoker'] = Temp['Smoker'].replace({0.0:'Non-Smoker', 1.0:'Smoker'})","ce7a8c33":"#visualize diabetes status ~ Smokers\nplt.figure(figsize = (8,6))\nsns.barplot(x = 'Diabetes_012', y = 'Percentage', hue = 'Smoker', data = Temp, palette = 'Set2')\nplt.title(\"Diabetes Status ~ Smokers\")\nplt.show()","cc19f77f":"# Comparing non-smokers to smokers in each diabetic status, normalized shows for no significant difference in-between\n# the different diabetic groups, thus the Smoking indicator doesn't provide business insight to this questionnaire","72dfeeaa":"# Comparing normalized data divided by the 3 diabetes statuses: health, pre diabetes and diabetes, \n# where mental health indicator is regrouped according to the number of days the person felt any mental health disorder\n# between 0-5 days: Not so sad, 6-24: sad, 25-30: very sad\n\ndiabetes_Mental_temp = data0['MentHlth']\ndata0.loc[diabetes_Mental_temp < 6,'MentHlth_group'] = '0-5'\ndata0.loc[((diabetes_Mental_temp >= 6) & (diabetes_Mental_temp <= 24)),'MentHlth_group'] = '6-24'\ndata0.loc[((diabetes_Mental_temp > 24) & (diabetes_Mental_temp <= 30)),'MentHlth_group'] = '25-30'\ndata0","e6f91b6f":"#group diabetes status & Mental Health\ndiabetes_Mental = data0.groupby(['Diabetes_012', 'MentHlth_group']).size().reset_index(name = 'Count')\nprint(diabetes_Mental)\n\n# Check the missing values in the dataset\ndata0.isnull().values.any()","9688b36b":"#calculating percentage\nTotal_Stat_Mnth = diabetes_Mental.groupby(['Diabetes_012']).sum()\nTotal_Stat_Mnth\n# Total_Stat_Mnth.set_index('Diabetes_012')\n# diabetes_Mental.append(Count)","609d2808":"Temp1 = diabetes_Mental.set_index('Diabetes_012').join(Total_Stat_Mnth,rsuffix='_')\nTemp1['Percentage'] = Temp1['Count']\/Temp1['Count_']\nTemp1\nTemp1 = Temp1.reset_index()","1d2333ed":"Temp1['Diabetes_012'] = Temp1['Diabetes_012'].replace({0.0:'Healthy', 1.0:'Pre-diabetic', 2.0:'Diabetic'})\nTemp1['MentHlth_group'] = Temp1['MentHlth_group'].replace({'0-5':'Not so sad','6-24':'Sad','25-30':'Very sad'})","f36da1d1":"#visualize diabetes status ~ Smokers\nplt.figure(figsize = (8,6))\nsns.barplot(x = 'Diabetes_012', y = 'Percentage', hue = 'MentHlth_group', data = Temp1, palette = 'Set3')\nplt.title(\"Diabetes Status ~ Mental Health\")\nplt.show()","593b27e5":"# The graph shows that there is a similar distribution of mental health severity across diabetes specctrum, thus\n# mental health does not provide an added value in terms of clinical situation","af8a3dca":"#group diabetes status & BP\ndiabetes_bp = data0.groupby(['Diabetes_012', 'HighBP']).size().reset_index(name = 'Count')\n# diabetes_bp\nDiabetes_bp_Total_Stat = diabetes_bp.groupby(['Diabetes_012']).sum().Count\n# Diabetes_bp_Total_Stat\nDiabetes_bp_Total_Stat_Temp = diabetes_bp.set_index('Diabetes_012').join(Diabetes_bp_Total_Stat,rsuffix='_')\nDiabetes_bp_Total_Stat_Temp['Percentage'] = Diabetes_bp_Total_Stat_Temp['Count']\/Diabetes_bp_Total_Stat_Temp['Count_']\nDiabetes_bp_Total_Stat_Temp = Diabetes_bp_Total_Stat_Temp.reset_index()\n# Diabetes_bp_Total_Stat_Temp\nDiabetes_bp_Total_Stat_Temp['Diabetes_012'] = Diabetes_bp_Total_Stat_Temp['Diabetes_012'].replace({0.0:'Healthy', 1.0:'Pre-diabetic', 2.0:'Diabetic'})\nDiabetes_bp_Total_Stat_Temp['HighBP'] = Diabetes_bp_Total_Stat_Temp['HighBP'].replace({0.0:'No', 1.0:'Yes'})\n# Diabetes_bp_Total_Stat_Temp\n\n#visualize diabetes status ~ BP\nplt.figure(figsize = (8,6))\naxes = sns.barplot(x = 'Diabetes_012', y = 'Percentage', hue = 'HighBP', data = Diabetes_bp_Total_Stat_Temp, palette = 'bright')\nplt.title(\"Diabetes Status VS High Blood Pressure\", fontsize=25)","b4177d57":"#group diabetes status & BP\ndiabetes_chol = data0.groupby(['Diabetes_012', 'HighChol']).size().reset_index(name = 'Count')\n# diabetes_chol\n\ndiabetes_chol_Total_Stat = diabetes_chol.groupby(['Diabetes_012']).sum().Count\n# diabetes_chol_Total_Stat\n\ndiabetes_chol_Total_Stat_Temp = diabetes_chol.set_index('Diabetes_012').join(diabetes_chol_Total_Stat,rsuffix='_')\ndiabetes_chol_Total_Stat_Temp['Percentage_chol'] = diabetes_chol_Total_Stat_Temp['Count']\/diabetes_chol_Total_Stat_Temp['Count_']\ndiabetes_chol_Total_Stat_Temp = diabetes_chol_Total_Stat_Temp.reset_index()\n# diabetes_chol_Total_Stat_Temp\n\ndiabetes_chol_Total_Stat_Temp['Diabetes_012'] = diabetes_chol_Total_Stat_Temp['Diabetes_012'].replace({0.0:'Healthy', 1.0:'Pre-diabetic', 2.0:'Diabetic'})\ndiabetes_chol_Total_Stat_Temp['HighChol'] = diabetes_chol_Total_Stat_Temp['HighChol'].replace({0.0:'No', 1.0:'Yes'})\n\n#visualize diabetes status ~ BP\nplt.figure(figsize = (8,6))\naxes = sns.barplot(x = 'Diabetes_012', y = 'Percentage_chol', hue = 'HighChol', data = diabetes_chol_Total_Stat_Temp, palette = 'PuBu')\nplt.title(\"Diabetes Status VS High Cholestirol\", fontsize=25)","beb4c587":"#group diabetes status & BP\ndiabetes_Stroke = data0.groupby(['Diabetes_012', 'Stroke']).size().reset_index(name = 'Count')\n# print(diabetes_Stroke)\n\ndiabetes_Stroke_Total_Stat = diabetes_Stroke.groupby(['Diabetes_012']).sum().Count\n# diabetes_Stroke_Total_Stat\n\ndiabetes_Stroke_Total_Stat_Temp = diabetes_Stroke.set_index('Diabetes_012').join(diabetes_Stroke_Total_Stat,rsuffix='_')\ndiabetes_Stroke_Total_Stat_Temp['Percentage'] = diabetes_Stroke_Total_Stat_Temp['Count']\/diabetes_Stroke_Total_Stat_Temp['Count_']\ndiabetes_Stroke_Total_Stat_Temp = diabetes_Stroke_Total_Stat_Temp.reset_index()\n# diabetes_Stroke_Total_Stat_Temp\n\ndiabetes_Stroke_Total_Stat_Temp['Diabetes_012'] = diabetes_Stroke_Total_Stat_Temp['Diabetes_012'].replace({0.0:'Healthy', 1.0:'Pre-diabetic', 2.0:'Diabetic'})\ndiabetes_Stroke_Total_Stat_Temp['Stroke'] = diabetes_Stroke_Total_Stat_Temp['Stroke'].replace({0.0:'No', 1.0:'Yes'})\n\n#visualize diabetes status ~ BP\nplt.figure(figsize = (8,6))\naxes = sns.barplot(x = 'Diabetes_012', y = 'Percentage', hue = 'Stroke', data = diabetes_Stroke_Total_Stat_Temp, palette = 'Set2')\nplt.title(\"Diabetes Status VS Stroke\", fontsize=25)","c0eeca5d":"# data0[\"BMI\"].value_counts()\n# data0.groupby(['BMI']).size()\n# data0[\"BMI\"].value_counts().hist()","bc0f27f3":"# Add new column BMI_grouper :\n#\n#          UnderWeight:1  < 18.5\n# 18.5 =<  NormalWeight:2 < 25\n#   25 =<  OverWeight:3   < 30\n#   30 =<  Obese:4\n\ndef BMI_grouper(row):\n    if (row['BMI'] < 18.5):\n        return 1\n    elif ((18.5 <= row['BMI']) and (row['BMI'] < 25)):\n        return 2\n    elif ((25 <= row['BMI']) and (row['BMI'] < 30)) :\n        return 3\n    else:\n        return 4\n    \ndata0['BMI_group'] = data0.apply (lambda row: BMI_grouper(row), axis=1)","56327452":"# Visualize diabetes status ~ Age_group\ndef visualizeBoxplot(tx, ty, dta, ttitle):\n    \n    ax = sns.boxplot(x=tx, y=ty, data=dta)\n\n    # Calculate number of obs per group & median to position labels\n    medians = dta.groupby([tx])[ty].median().values\n    nobs = dta[tx].value_counts().values\n    nobs = [str(x) for x in nobs.tolist()]\n    nobs = [\"n: \" + i for i in nobs]\n    # print(nobs)\n    # Add it to the plot\n    pos = range(len(nobs))\n#     plt.title(tx + \" ~ \" + ty + \"\\n(\"+ttitle+\")\", fontsize=25)\n    plt.title(tx + \" ~ \" + ty + \"\\n\", fontsize=25)\n\n    for tick,label in zip(pos,ax.get_xticklabels()):\n        ax.text(pos[tick],\n                medians[tick] + 0.03,\n                nobs[tick],\n    #             horizontalalignment='center',\n    #             size='x-small',\n                color='b',\n                weight='semibold'\n                , fontsize=15\n               )\n","fba4537c":"# Diabetes_012_BMI_group = data0\n# Diabetes_012_BMI_group['Diabetes_012'] = diabetes_Stroke_Total_Stat_Temp['Diabetes_012'].replace({0.0:'Healthy', 1.0:'Pre-diabetic', 2.0:'Diabetic'})\n\nvisualizeBoxplot('Diabetes_012', \"BMI_group\", data0, \"original data\")","e5115ac1":"# OLD \n# data0[\"BMI_group\"].value_counts()\n\n#visualize diabetes status ~ BMI\n# plt.figure(figsize = (8,6))\n# sns.boxplot(data = data0, x = 'Diabetes_012', y = 'BMI_group', palette = 'Set1')\n# plt.title(\"BMI VS Diabetes Status\", fontsize=25)\n# plt.show()","879a7252":"# data0.groupby(['Age']).size()\n\n# # define new column Age_group\n# #          1  =< 3\n# #   3   <  2  =< 7\n# #   7   <  3  =< 10\n# #   10  <  4 \n\n# def Age_grouper(row):\n#     if (row['Age'] <= 3):\n#         return 1\n#     elif ((3 < row['Age']) and (row['Age'] <= 7)):\n#         return 2\n#     elif ((7 < row['Age']) and (row['Age'] <= 10)) :\n#         return 3\n#     else:\n#         return 4\n    \n# data0['Age_group'] = data0.apply (lambda row: Age_grouper(row), axis=1)","fcd0cf49":"# data0.groupby(['Age_group']).size()","e91eee14":"# visualizeBoxplot('Diabetes_012', \"Age_group\", data0, \"original data\")","69866af6":"# OLD Visualize diabetes status ~ Age_group\n# plt.figure(figsize = (8,6))\n# sns.boxplot(data = data0, x = 'Diabetes_012', y = 'Age_group', palette = 'Set2')\n# plt.title(\"Diabetes Status ~ Age\")\n# plt.show()","216b2938":"# print(data0.columns.to_list())","e3fa9dc8":"# #Info of the data\n# # data0.shape\n# # data0.info()\n# data0.describe().T","3bc0892c":"# data_specific_select_all_columns.groupby('HeartDiseaseorAttack').size()","362a212c":"# # Select specific rows with \"NOT healthy habits\" observers\n# data_specific_select_all_columns = data0[#(data0.Age_group <= 2)&\n#                                          #(data0.Diabetes_012 >= 1)&\n#                                          (data0.Fruits == 0)&(data0.Veggies == 0)&\n#                                          (data0.Smoker == 1)&(data0.HvyAlcoholConsump == 1)&\n#                                          (data0.PhysActivity == 0)]\n# data_specific_select_NOT_healthy_habits = data_specific_select_all_columns.drop(columns=['BMI', 'Age', 'Fruits','Smoker','Veggies','HvyAlcoholConsump','PhysActivity'])\n# # data_specific_select_NOT_healthy_habits.describe().T\n# data_specific_select_NOT_healthy_habits.shape[0]","94d42f70":"# # Select specific rows with \"healthy habits\" observers\n# data_specific_select_all_columns = data0[#(data0.Age_group <= 2)&\n#                                          #(data0.Diabetes_012 >= 1)&\n#                                          (data0.DiffWalk == 0)&\n#                                          (data0.Fruits == 1)&\n#                                          (data0.Veggies == 1)&\n#                                          (data0.Smoker == 0)&\n#                                          (data0.HvyAlcoholConsump == 0)&\n#                                          (data0.PhysActivity == 1)&\n#                                          (data0.HeartDiseaseorAttack == 0)]\n# data_specific_select_healthy_habits = data_specific_select_all_columns.drop(columns=['BMI', 'Age', 'DiffWalk', 'Fruits','Smoker','Veggies',\n#                                                                                      'HvyAlcoholConsump','PhysActivity','HeartDiseaseorAttack'])\n# # data_specific_select_healthy_habits.describe().T\n# data_specific_select_healthy_habits.shape[0]","259ae488":"# visualizeBoxplot('Diabetes_012', \"Age_group\", data_specific_select_healthy_habits, \"data_specific_select_healthy_habits\")","29916a1b":"# visualizeBoxplot('Diabetes_012', \"Age_group\", data_specific_select_NOT_healthy_habits, \"data_specific_select_NOT_healthy_habits\")","6ebea763":"# visualizeBoxplot('Diabetes_012', \"BMI_group\", data_specific_select_NOT_healthy_habits, \"data_specific_select_NOT_healthy_habits\")","18425fe2":"# visualizeBoxplot('Diabetes_012', \"BMI_group\", data_specific_select_healthy_habits, \"data_specific_select_healthy_habits\")","f5619c5b":"# # Show all correlation above 30%\n# corr = data_specific_select_NOT_healthy_habits.corr()\n# # fig, ax = plt.subplots(figsize=(25,15)) \n# # sns.heatmap(corr,annot=True, cmap = \"Blues\", linewidth = 0.30)\n# plt.figure(figsize = (10,10))\n# sns.heatmap(data = corr[(corr >= 0.5) & (corr < 1)])\n# plt.title(\"Correlation matrix of features\")\n# plt.show()","923dabd3":"# # Automatic ProfileReport\n# data_specific_select_healthy_habits.reset_index(drop=True, inplace=True)\n# pp.ProfileReport(data_specific_select_healthy_habits)","27d1b4c3":"# def fn_dist_box(dataset,column):\n#     plt.subplots(1,2 ,figsize = (20,8))\n\n#     plt.subplot(121)\n#     sns.distplot(dataset[column], color = 'purple')\n#     pltname = 'Distplot of ' + column\n#     plt.ticklabel_format(style='plain', axis='x')\n#     plt.title(pltname)\n\n#     plt.subplot(122)\n# #     sns.boxplot(y = column, data = dataset, fliersize = 10)\n#     red_diamond = dict(markerfacecolor='r', marker='D')\n#     sns.boxplot(y = column, data = dataset, flierprops = red_diamond)\n# #     plt.boxplot(dataset[column], flierprops = red_diamond)\n#     pltname = 'Boxplot of ' + column\n#     plt.title(pltname)\n\n#     plt.tight_layout(pad = 4)\n#     plt.show()","5500b98d":"# # data of Diabetes_012 = 2 \n# df_Diabetes_012_val_0 = data0[data0.Diabetes_012 == 0].drop('Diabetes_012', axis=1)\n# df_Diabetes_012_val_1 = data0[data0.Diabetes_012 == 1].drop('Diabetes_012', axis=1)\n# df_Diabetes_012_val_2 = data0[data0.Diabetes_012 == 2].drop('Diabetes_012', axis=1)\n\n# df_Diabetes_012_val_0m = data0[(data0.Diabetes_012 == 0) & (data0.Sex == 1)].drop('Diabetes_012', axis=1).drop('Sex', axis=1)\n# df_Diabetes_012_val_1m = data0[(data0.Diabetes_012 == 1) & (data0.Sex == 1)].drop('Diabetes_012', axis=1).drop('Sex', axis=1)\n# df_Diabetes_012_val_2m = data0[(data0.Diabetes_012 == 2) & (data0.Sex == 1)].drop('Diabetes_012', axis=1).drop('Sex', axis=1)\n\n# # df_Diabetes_012_val_0w = data0[(data0.Diabetes_012 == 0) and (data0.Sex == 0)].drop('Diabetes_012', axis=1).drop('Sex', axis=1)\n# # df_Diabetes_012_val_1w = data0[(data0.Diabetes_012 == 1) and (data0.Sex == 0)].drop('Diabetes_012', axis=1).drop('Sex', axis=1)\n# # df_Diabetes_012_val_2w = data0[(data0.Diabetes_012 == 2) and (data0.Sex == 0)].drop('Diabetes_012', axis=1).drop('Sex', axis=1)\n\n# fn_dist_box(data0,'Stroke')\n# # fn_dist_box(df_Diabetes_012_val_2m,'BMI')","e2d96f13":"# # obtain the correlation of each feature in dataset\n# # ['Diabetes_012', 'HighBP', 'HighChol', 'CholCheck', 'BMI', 'Smoker', 'Stroke', 'HeartDiseaseorAttack', 'PhysActivity', 'Fruits', 'Veggies', \n# # 'HvyAlcoholConsump', 'AnyHealthcare', 'NoDocbcCost', 'GenHlth', 'MentHlth', 'PhysHlth', 'DiffWalk', 'Sex', 'Age', 'Education', 'Income']\n\n# data0_target_vs_columns = data0[['Diabetes_012', 'HighBP', 'HighChol', 'CholCheck', 'BMI', 'Smoker', 'Stroke', 'HeartDiseaseorAttack']]\n# corrmat = data0_target_vs_columns.corr()\n\n# top_corr_features = corrmat.index\n# # plt.figure(figsize=(10,10))\n# #plot heat map\n# sns.heatmap(data0_target_vs_columns[top_corr_features].corr(),annot=True,cmap=\"Spectral\")\n# plt.show()","330bf9be":"# color=[\"teal\",\"orange\",\"palevioletred\"]\n# plt.style.use('seaborn-darkgrid')\n\n# x = diabetes_012_v_count.index\n# y = diabetes_012_v_count.values\n\n# sns.set(font_scale=1)\n# plt.figure(figsize=(12,6))\n# plt.bar(x=x, height=y, color=color)\n# plt.title(\"Number of Observers per category\", fontsize=20)\n# plt.ylabel(\"Number of Observers\", fontsize=15)\n   \n# labels = ['No Diabetes', 'Diabetes', 'Prediabetes']\n# plt.xticks(x, labels, fontsize=15)\n\n# for i in range(len(y)):\n#     plt.annotate(str(y[i]), xy=(x[i],y[i]), ha='center', va='bottom')\n\n# plt.show()","8998ef51":"# print(f\"The minimum value of BMI in this dataset : {data0.BMI.min()} BMI\")\n# print(f\"The maximum value of BMI in this dataset : {data0.BMI.max()} BMI\")\n# print(f\"The mean value of BMI in this dataset : {data0.BMI.mean()} BMI\")\n# # data0.BMI.describe()\n\n# data0.groupby('BMI').agg('mean')","0d8473be":"# Plot fetal health with box plots, and present actual counts on each box. \n# labels_health = ['no diabetes', 'prediabetes', 'diabetes']\n\n# plt.figure(figsize=(20,20))\n# corr = data0.corr()\n# cmap = sns.color_palette(\"light:b\", as_cmap=True)\n# sns.heatmap(corr, annot=True, cmap=cmap)","65cdda6a":"# pp.ProfileReport(data0)","cd59e1ac":"# data0.BMI.value_counts().head()","7a1428dd":"# # BMI different values\n# data0.BMI.value_counts().hist()","a1ff616f":"# df_Diabetes_012_val_2.info()","ed4c9905":"# sns.boxplot(x=df_Diabetes_012_val_0['BMI'])","97f0b72e":"# sns.boxplot(x=df_Diabetes_012_val_1['BMI'])","3e2b5b77":"# sns.boxplot(x=df_Diabetes_012_val_2['BMI'])","2d51edbb":"# df_Diabetes_012_val_2['BMI'].describe()","dfa770c0":"# df_Diabetes_012_val_2['BMI'].hist()","b15aaed8":"# df_DiabetesVal2_BMI_gr_60 = df_Diabetes_012_val_2[df_Diabetes_012_val_2.BMI > 60]","8d3a60d3":"# df_DiabetesVal2_BMI_gr_60.info()","370f8861":"# df_DiabetesVal2_BMI_gr_60.describe()","990e9613":"# x = df_DiabetesVal2_BMI_gr_60.reset_index(drop=True)\n# pp.ProfileReport(x)","b3f3bb38":"# # Pandas Profiling to get the overview of the data\n# # do not profile it with index\n# df_Diabetes_012_val_0.reset_index(drop=True, inplace=True)\n# pp.ProfileReport(df_Diabetes_012_val_0)","dd0cd7b5":"# Diabetes statuses","cda5c095":"# Check how BMI influencing on Diabetes","b6f291f9":"# Diabetes Status & Mental Health","281a9dad":"# Check: Diabetes Status VS High Cholestirol","d8256f5e":"\n**Conclusions:**\n1. If cholesterol is high there is a chance that a person has diabetes\n2. There is a correlation of Diabetes Status with a columns - cholesterol and blood pressure ...\n","0f0cf02a":"# Check Diabetes Status VS High Blood Pressure","f1b94a01":"# RDA - Data preparation ","cb4a049d":"***Conclusion: If blood pressure is high there is a chance that a person is diabetic***","2f370b0d":"**Outlier Analysis (Distplot + BoxPlot) - numerical columns**","a24ee7aa":"# Smokers vs. Diabetes","bcff2bb8":"# Diabetes Status VS Stroke","4394829f":"# *=== Till here for progect presentation* 03\/02\/2022 ===","3e8629f4":"***??? Conclusion: There is a link between a high BMI value for developing diabetes ... ???***","fba7de41":"***Conclusion : A healthy person is less likely to have a heart attack than a person with diabetes***","e6f0642c":"# Data QA: Cholesterol check:"}}