{"cell_type":{"bcb57e05":"code","5d7e9123":"code","79da2fda":"code","4320a9b3":"code","1a3538ce":"code","8dd94ff0":"code","821241de":"code","7a8846ac":"code","052a4633":"markdown","1d402dc4":"markdown","b726c6c6":"markdown","5ae6736b":"markdown","bfa191c4":"markdown"},"source":{"bcb57e05":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","5d7e9123":"df=pd.read_csv('..\/input\/sms-spam-collection-dataset\/spam.csv')\ndf.head()","79da2fda":"df['v1']=df['v1'].map({'ham':0 , 'spam':1})\ndf.head()","4320a9b3":"x=df['v2']\ny=df['v1']\n\nprint(x.shape,y.shape)","1a3538ce":"from sklearn.model_selection import train_test_split\nX_train, X_test, y_train, y_test = train_test_split(x, y,test_size=0.2, random_state=5)","8dd94ff0":"from sklearn.feature_extraction.text import TfidfVectorizer\nvectorizer = TfidfVectorizer()\ntrain_vectors = vectorizer.fit_transform(X_train)\ntest_vectors = vectorizer.transform(X_test)\nprint(train_vectors.shape, test_vectors.shape)","821241de":"from sklearn.naive_bayes import MultinomialNB\nfrom  sklearn.metrics  import accuracy_score\nclf=MultinomialNB().fit(train_vectors,y_train)\n\n\npredicted = clf.predict(test_vectors)\npredicted\nprint(accuracy_score(y_test,predicted))\n","7a8846ac":"def classify_message(text):\n    text = vectorizer.transform(text)\n    predicted = clf.predict(text)\n    if predicted==0:\n        print(\"Not Spam\")\n    else:\n        print(\"This is Spam\")\n        \n\nmessage1=[\"Even my brother is not like to speak with me. They treat me like aids patent.\"]\nprint(classify_message(message1))\nmessage2=[\"Free entry in part, you have won 400$\"]\nprint(classify_message(message2))\n","052a4633":"**Test Model**","1d402dc4":"**Preprocessing**","b726c6c6":"**Understand the data**","5ae6736b":"**Create Train and test data for our model**","bfa191c4":"***Test Accuracy***"}}