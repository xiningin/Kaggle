{"cell_type":{"1b05ad73":"code","1aaaa272":"code","ed407cdf":"code","302852bc":"code","7dc90d1a":"code","9d415239":"code","1f922f7e":"code","ba987e46":"code","e6ff2c45":"code","11969b77":"code","861b8b3d":"code","1c8a724e":"code","3ae358fe":"code","d20c6934":"code","c12170b7":"code","e696ff8f":"code","0ed020f3":"code","39fce049":"code","0f7db70f":"code","078b81bf":"code","b5307251":"code","c2a9d595":"code","9d9287aa":"code","cd51a974":"code","ea578029":"markdown","a4bc20b5":"markdown","7b08a399":"markdown","77f60c24":"markdown","f64c68bd":"markdown","41f5694e":"markdown","c6e57521":"markdown","c7fb3906":"markdown","1728f76a":"markdown"},"source":{"1b05ad73":"import numpy as np\nimport pandas as pd\n\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.model_selection import train_test_split\n\nimport tensorflow as tf\n\nfrom sklearn.metrics import classification_report, confusion_matrix","1aaaa272":"tf.random.set_seed(100)","ed407cdf":"data = pd.read_csv('..\/input\/noshowappointments\/KaggleV2-May-2016.csv')","302852bc":"data","7dc90d1a":"data.info()","9d415239":"data.describe()","1f922f7e":"print(\"Total missing values:\", data.isna().sum().sum())","ba987e46":"data = data.drop(['PatientId', 'AppointmentID'], axis=1)","e6ff2c45":"data","11969b77":"data = data.rename(columns={'ScheduledDay': \"ScheduledDate\", 'AppointmentDay': \"AppointmentDate\"})\n\ndata['ScheduledYear'] = data['ScheduledDate'].apply(lambda x: np.int(x[0:4]))\ndata['ScheduledMonth'] = data['ScheduledDate'].apply(lambda x: np.int(x[5:7]))\ndata['ScheduledDay'] = data['ScheduledDate'].apply(lambda x: np.int(x[8:10]))\ndata['ScheduledHour'] = data['ScheduledDate'].apply(lambda x: np.int(x[11:13]))\ndata['ScheduledMinute'] = data['ScheduledDate'].apply(lambda x: np.int(x[14:16]))\ndata['ScheduledSecond'] = data['ScheduledDate'].apply(lambda x: np.int(x[17:19]))\n\ndata['AppointmentYear'] = data['AppointmentDate'].apply(lambda x: np.int(x[0:4]))\ndata['AppointmentMonth'] = data['AppointmentDate'].apply(lambda x: np.int(x[5:7]))\ndata['AppointmentDay'] = data['AppointmentDate'].apply(lambda x: np.int(x[8:10]))\n\ndata = data.drop(['ScheduledDate', 'AppointmentDate'], axis=1)","861b8b3d":"data","1c8a724e":"{column: data[column].unique() for column in data.select_dtypes('object').columns}","3ae358fe":"def binary_encode(df, column, positive_value):\n    df = df.copy()\n    df[column] = df[column].apply(lambda x: 1 if x == positive_value else 0)\n    return df\n\ndef onehot_encode(df, column, prefix):\n    df = df.copy()\n    dummies = pd.get_dummies(df[column], prefix=prefix)\n    df = pd.concat([df, dummies], axis=1)\n    df = df.drop(column, axis=1)\n    return df","d20c6934":"data = binary_encode(data, 'Gender', positive_value='M')\ndata = binary_encode(data, 'No-show', positive_value='Yes')\n\ndata = onehot_encode(data, 'Neighbourhood', prefix='N')","c12170b7":"data","e696ff8f":"y = data['No-show'].copy()\nX = data.drop('No-show', axis=1).copy()","0ed020f3":"scaler = StandardScaler()\n\nX = scaler.fit_transform(X)","39fce049":"X_train, X_test, y_train, y_test = train_test_split(X, y, train_size=0.7, random_state=100)","0f7db70f":"print(\"Class Distribution (Positive to Negative): {:.1f}% \/ {:.1f}%\".format(y_train.mean() * 100, (1 - y_train.mean()) * 100))","078b81bf":"inputs = tf.keras.Input(shape=(X.shape[1]))\nx = tf.keras.layers.Dense(64, activation='relu')(inputs)\nx = tf.keras.layers.Dense(64, activation='relu')(x)\noutputs = tf.keras.layers.Dense(1, activation='sigmoid')(x)\n\nmodel = tf.keras.Model(inputs, outputs)\n\n\nmodel.compile(\n    optimizer='adam',\n    loss='binary_crossentropy',\n    metrics=[\n        'accuracy',\n        tf.keras.metrics.AUC(name='auc')\n    ]\n)\n\nhistory = model.fit(\n    X_train,\n    y_train,\n    validation_split=0.2,\n    batch_size=32,\n    epochs=100,\n    callbacks=[\n        tf.keras.callbacks.EarlyStopping(\n            monitor='val_loss',\n            patience=3,\n            restore_best_weights=True\n        )\n    ]\n)","b5307251":"model.evaluate(X_test, y_test)","c2a9d595":"y_true = np.array(y_test)\ny_pred = np.squeeze(np.array(model.predict(X_test) >= 0.5, dtype=np.int))","9d9287aa":"print(\"Classification Report:\\n\\n\", classification_report(y_true, y_pred))","cd51a974":"print(\"Confusion Matrix:\\n\", confusion_matrix(y_true, y_pred))","ea578029":"# Training","a4bc20b5":"# Feature Engineering","7b08a399":"# Results","77f60c24":"# Encoding","f64c68bd":"# Getting Started","41f5694e":"# Cleaning","c6e57521":"# Splitting\/Scaling","c7fb3906":"# Data Every Day  \n\nThis notebook is featured on Data Every Day, a YouTube series where I train models on a new dataset each day.  \n\n***\n\nCheck it out!  \nhttps:\/\/youtu.be\/BFgbfk3LYtw","1728f76a":"# Task for Today  \n\n***\n\n## No Show Prediction  \n\nGiven *data about medical appointments*, let's try to predict whether a given subject will be a **no-show** or not.\n\nWe will use a TensorFlow ANN to make our predictions."}}