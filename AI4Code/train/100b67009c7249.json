{"cell_type":{"d2e049aa":"code","de1f7af9":"code","772ba175":"code","e69c38a3":"code","da218e82":"code","ea4c8528":"code","c036e193":"code","68a2b642":"code","24e5f495":"code","4cc526d5":"code","a60607ab":"code","4619cde3":"markdown","18094ac7":"markdown","13675d43":"markdown","c766d497":"markdown","eee35bb3":"markdown","230153c6":"markdown","e5b59817":"markdown","8ab5b76b":"markdown","8757fb48":"markdown"},"source":{"d2e049aa":"import pandas as pd\nimport numpy as np\nimport datetime\nimport random\nimport glob\nimport cv2\nimport os\nfrom sklearn.model_selection import train_test_split\nimport tensorflow as tf\nfrom tensorflow.keras.models import Sequential\nfrom tensorflow.keras.layers import BatchNormalization,Activation,Dropout,Dense\nfrom tensorflow.keras.optimizers import Adam\nfrom tensorflow.keras.utils import plot_model\nfrom tensorflow.keras.layers import Flatten, Conv2D, MaxPooling2D\nfrom tensorflow.keras.callbacks import EarlyStopping, ModelCheckpoint, Callback, ReduceLROnPlateau\nimport matplotlib.pyplot as plt\n%matplotlib inline\n\ndef seed_everything(seed):\n    random.seed(seed)\n    os.environ['PYTHONHASHSEED'] = str(seed)\n    np.random.seed(seed)\n    tf.random.set_seed(seed)\n\n# \u4e71\u6570\u30b7\u30fc\u30c9\u56fa\u5b9a\nseed_everything(2020)","de1f7af9":"inputPath = '\/kaggle\/input\/aiacademydeeplearning\/'\n# \u753b\u50cf\u8aad\u307f\u8fbc\u307f\nimage = cv2.imread(inputPath+'train_images\/1_bathroom.jpg')\nimage = cv2.cvtColor(image, cv2.COLOR_BGR2RGB)\ndisplay(image.shape)\ndisplay(image[0][0])\n# \u753b\u50cf\u3092\u8868\u793a\nplt.figure(figsize=(8,4))\nplt.imshow(image)","772ba175":"# \u753b\u50cf\u306e\u30b5\u30a4\u30ba\u5909\u66f4\nimage = cv2.resize(image,(256,256))\ndisplay(image.shape)\ndisplay(image[0][0])\n# \u753b\u50cf\u3092\u8868\u793a\nplt.figure(figsize=(8,4))\nplt.imshow(image)","e69c38a3":"train = pd.read_csv(inputPath+'train.csv')\ndisplay(train.shape)\ndisplay(train.head())","da218e82":"def load_images(df,inputPath,size,roomType):\n    images = []\n    for i in df['id']:\n        basePath = os.path.sep.join([inputPath, \"{}_{}*\".format(i,roomType)])\n        housePaths = sorted(list(glob.glob(basePath)))\n        for housePath in housePaths:\n            image = cv2.imread(housePath)\n            image = cv2.cvtColor(image, cv2.COLOR_BGR2RGB)\n            image = cv2.resize(image, (size, size))\n        images.append(image)\n    return np.array(images) \/ 255.0\n\n# load train images\ninputPath = '\/kaggle\/input\/aiacademydeeplearning\/train_images\/'\nsize = 28\nroomType = 'kitchen'\ntrain_images = load_images(train,inputPath,size,roomType)\ndisplay(train_images.shape)\ndisplay(train_images[0][0][0])","ea4c8528":"train_x, valid_x, train_images_x, valid_images_x = train_test_split(train, train_images, test_size=0.2)\ntrain_y = train_x['price'].values\nvalid_y = valid_x['price'].values\ndisplay(train_images_x.shape)\ndisplay(valid_images_x.shape)\ndisplay(train_y.shape)\ndisplay(valid_y.shape)","c036e193":"def create_cnn(inputShape):\n    model = Sequential()\n    \"\"\"\n    \u6f14\u7fd2:kernel_size\u3092\u5909\u66f4\u3057\u3066\u307f\u3066\u304f\u3060\u3055\u3044\n    \"\"\"    \n    model.add(Conv2D(filters=32, kernel_size=(5, 5), strides=(1, 1), padding='valid',\n                     activation='relu', kernel_initializer='he_normal', input_shape=inputShape))\n    model.add(MaxPooling2D(pool_size=(2, 2)))\n    model.add(BatchNormalization())\n    model.add(Dropout(0.1))\n\n    model.add(Conv2D(filters=64, kernel_size=(5, 5), strides=(1, 1), padding='valid', \n                     activation='relu', kernel_initializer='he_normal'))\n    model.add(MaxPooling2D(pool_size=(2, 2)))\n    model.add(BatchNormalization())\n    model.add(Dropout(0.1))\n    \"\"\"\n    \u6f14\u7fd2:\u3082\u3046\u4e00\u5c64Conv2D->MaxPooling2D->BatchNormalization->Dropout\u3092\u8ffd\u52a0\u3057\u3066\u304f\u3060\u3055\u3044\n    \"\"\"    \n    model.add(Flatten())\n    \n    model.add(Dense(units=256, activation='relu',kernel_initializer='he_normal'))  \n    model.add(Dense(units=32, activation='relu',kernel_initializer='he_normal'))    \n    model.add(Dense(units=1, activation='linear'))\n    \n    model.compile(loss='mape', optimizer='adam', metrics=['mape']) \n    return model","68a2b642":"# callback parameter\nfilepath = \"cnn_best_model.hdf5\" \nes = EarlyStopping(patience=5, mode='min', verbose=1) \ncheckpoint = ModelCheckpoint(monitor='val_loss', filepath=filepath, save_best_only=True, mode='auto') \nreduce_lr_loss = ReduceLROnPlateau(monitor='val_loss',  patience=2, verbose=1,  mode='min')\n\n# \u8a13\u7df4\u5b9f\u884c\ninputShape = (size, size, 3)\nmodel = create_cnn(inputShape)\nmodel.fit(train_images_x, train_y, validation_data=(valid_images_x, valid_y),epochs=50, batch_size=16,\n    callbacks=[es, checkpoint, reduce_lr_loss])","24e5f495":"def mean_absolute_percentage_error(y_true, y_pred): \n    y_true, y_pred = np.array(y_true), np.array(y_pred)\n    return np.mean(np.abs((y_true - y_pred) \/ y_true)) * 100\n\n# load best model weights\nmodel.load_weights(filepath)\n\n# \u8a55\u4fa1\nvalid_pred = model.predict(valid_images_x, batch_size=32).reshape((-1,1))\nmape_score = mean_absolute_percentage_error(valid_y, valid_pred)\nprint (mape_score)","4cc526d5":"model.summary()","a60607ab":"plot_model(model, to_file='cnn.png')","4619cde3":"# \u30e2\u30c7\u30eb\u8a13\u7df4","18094ac7":"# \u8a13\u7df4\u3001\u30c6\u30b9\u30c8\u30c7\u30fc\u30bf\u3092\u4f5c\u6210","13675d43":"# \u30e9\u30a4\u30d6\u30e9\u30ea\u306e\u30a4\u30f3\u30dd\u30fc\u30c8","c766d497":"# \u6570\u5024\u30c7\u30fc\u30bf\u3092\u8aad\u307f\u8fbc\u307f","eee35bb3":"# \u30e2\u30c7\u30eb\u8a55\u4fa1","230153c6":"# \u30e2\u30c7\u30eb\u53ef\u8996\u5316","e5b59817":"# \u753b\u50cf\u3092\u8aad\u307f\u8fbc\u307f","8ab5b76b":"# CNN\u30e2\u30c7\u30eb\u3092\u5b9a\u7fa9\u3059\u308b","8757fb48":"# \u753b\u50cf\u51e6\u7406"}}