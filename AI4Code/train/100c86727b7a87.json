{"cell_type":{"39f980e3":"code","d5b3e242":"code","87eace7f":"code","cb697fe9":"code","2225a629":"code","18bb461c":"code","ef1fa368":"code","ff7878da":"code","ef1f9faa":"code","7f811f99":"code","6713cdfb":"code","df81fccc":"markdown","ee96b736":"markdown","d78475b7":"markdown","84ea643c":"markdown","026c987f":"markdown","5840c78a":"markdown","06285696":"markdown","4c879bdd":"markdown"},"source":{"39f980e3":"import numpy as np\nimport pandas as pd\n\nfrom sklearn.compose import ColumnTransformer\nfrom sklearn.pipeline import Pipeline\nfrom sklearn.impute import SimpleImputer\nfrom sklearn.preprocessing import StandardScaler, OneHotEncoder,MinMaxScaler\n\nfrom sklearn.model_selection import train_test_split,StratifiedKFold\nfrom sklearn.ensemble import RandomForestRegressor\n\nimport gc ","d5b3e242":"train = pd.read_csv(\"..\/input\/tabular-playground-series-oct-2021\/train.csv\")\ntest = pd.read_csv(\"..\/input\/tabular-playground-series-oct-2021\/test.csv\")","87eace7f":"def reduce_memory_usage(df, verbose=True):\n    numerics = [\"int8\", \"int16\", \"int32\", \"int64\", \"float16\", \"float32\", \"float64\"]\n    start_mem = df.memory_usage().sum() \/ 1024 ** 2\n    for col in df.columns:\n        col_type = df[col].dtypes\n        if col_type in numerics:\n            c_min = df[col].min()\n            c_max = df[col].max()\n            if str(col_type)[:3] == \"int\":\n                if c_min > np.iinfo(np.int8).min and c_max < np.iinfo(np.int8).max:\n                    df[col] = df[col].astype(np.int8)\n                elif c_min > np.iinfo(np.int16).min and c_max < np.iinfo(np.int16).max:\n                    df[col] = df[col].astype(np.int16)\n                elif c_min > np.iinfo(np.int32).min and c_max < np.iinfo(np.int32).max:\n                    df[col] = df[col].astype(np.int32)\n                elif c_min > np.iinfo(np.int64).min and c_max < np.iinfo(np.int64).max:\n                    df[col] = df[col].astype(np.int64)\n            else:\n                if (\n                    c_min > np.finfo(np.float16).min\n                    and c_max < np.finfo(np.float16).max\n                ):\n                    df[col] = df[col].astype(np.float16)\n                elif (\n                    c_min > np.finfo(np.float32).min\n                    and c_max < np.finfo(np.float32).max\n                ):\n                    df[col] = df[col].astype(np.float32)\n                else:\n                    df[col] = df[col].astype(np.float64)\n    end_mem = df.memory_usage().sum() \/ 1024 ** 2\n    if verbose:\n        print(\n            \"Mem. usage decreased to {:.2f} Mb ({:.1f}% reduction)\".format(\n                end_mem, 100 * (start_mem - end_mem) \/ start_mem\n            )\n        )\n    return df\n\ntrain = reduce_memory_usage(train)\ntest = reduce_memory_usage(test)\ngc.collect()","cb697fe9":"train.drop('id',axis=1,inplace=True)\ntest.drop('id',axis=1,inplace=True)","2225a629":"from IPython.display import clear_output\n!pip install pycaret --user\nclear_output()","18bb461c":"import numpy as np\nimport pandas as pd\nimport pycaret\nfrom pycaret.regression import *\nfrom sklearn.model_selection import train_test_split","ef1fa368":"TARGET = \"target\"\nSESSION_ID = 2021\nSEED = 42\nFEATURE = \"feature\"\nEXPERIMENT_NAME = 'tabular_prediction'","ff7878da":"setup(data = train, \n      target = TARGET, \n      session_id=SESSION_ID, \n      experiment_name=EXPERIMENT_NAME,\n      silent=True,\n      normalize=True,\n      transformation=True,\n      use_gpu = True\n     )","ef1f9faa":"lightgbm = create_model('lightgbm')","7f811f99":"print(lightgbm)","6713cdfb":"test_pred = predict_model(lightgbm, data=test)\ntest_pred.head()\n\nsubmission = pd.read_csv(\"..\/input\/tabular-playground-series-oct-2021\/sample_submission.csv\")\nsubmission.target = test_pred[\"Label\"]\nsubmission.to_csv(\"submission.csv\",index=False)\nsubmission.head(10)","df81fccc":"# predict test data and submit","ee96b736":"# import libraries","d78475b7":"# install pycaret ","84ea643c":"# global variables","026c987f":"# reduce memory ","5840c78a":"# load Data","06285696":"# create lightgbm model","4c879bdd":"# setup pycaret "}}