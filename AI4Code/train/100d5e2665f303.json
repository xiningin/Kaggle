{"cell_type":{"001108a9":"code","7f324632":"code","4a4de37d":"code","03b6bbf8":"code","0227fd9f":"code","dd0cc297":"code","b7dcad1d":"code","436df5a6":"code","9b073767":"code","6f5d4a3e":"code","b188ee17":"code","e8e3a6e2":"code","4b91fa6c":"code","5ef61723":"code","e96575eb":"code","92c522e5":"code","00c7441a":"code","a024d805":"code","edfff004":"code","fa54d39d":"code","a7141c8e":"code","8d1f665e":"code","f23f8f9c":"markdown","6b8e5e29":"markdown","afc7a95d":"markdown","c44f577a":"markdown","d55b2217":"markdown","0e1afabf":"markdown","0007e544":"markdown","4d0cbeb0":"markdown","ece92d39":"markdown","6f5c1282":"markdown","66793c84":"markdown","75c9177d":"markdown","c7b763f9":"markdown"},"source":{"001108a9":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.preprocessing import LabelEncoder\nfrom keras.models import Model\nfrom keras.layers import SimpleRNN, Activation, Dense, Dropout, Input, Embedding, LSTM\nfrom keras.optimizers import RMSprop\nfrom keras.preprocessing.text import Tokenizer\nfrom keras.preprocessing import sequence\nfrom keras.utils import to_categorical\nfrom keras.callbacks import EarlyStopping\n%matplotlib inline","7f324632":"df = pd.read_csv('..\/input\/spam.csv',delimiter=',',encoding='latin-1')\ndf.head()","4a4de37d":"df.drop(['Unnamed: 2', 'Unnamed: 3', 'Unnamed: 4'],axis=1,inplace=True)\ndf.info()","03b6bbf8":"sns.countplot(df.v1)\nplt.xlabel('Label')\nplt.title('Number of ham and spam messages')","0227fd9f":"X = df.v2\nY = df.v1\nle = LabelEncoder()\nY = le.fit_transform(Y)\nY = Y.reshape(-1,1)","dd0cc297":"Y","b7dcad1d":"X_train,X_test,Y_train,Y_test = train_test_split(X,Y,test_size=0.2)","436df5a6":"max_words = 1000\nmax_len = 150\ntok = Tokenizer(num_words=max_words)\ntok.fit_on_texts(X_train)\nsequences = tok.texts_to_sequences(X_train)\nsequences_matrix = sequence.pad_sequences(sequences,maxlen=max_len)","9b073767":"sequences[0]","6f5d4a3e":"for i in range(10):\n    print(len(sequences[i]))","b188ee17":"for i in range(10):\n    print(len(sequences_matrix[i]))","e8e3a6e2":"sequences_matrix[0]","4b91fa6c":"len(sequences_matrix[0])","5ef61723":"X_train[0]","e96575eb":"def RNNmodel():\n    inputs = Input(name='inputs',shape=[max_len])\n    layer = Embedding(max_words,50,input_length=max_len)(inputs)\n    layer = LSTM(32)(layer)\n    layer = Dense(256,name='FC1',activation='relu')(layer)\n    layer = Activation('relu')(layer)\n    layer = Dropout(0.5)(layer)\n    layer = Dense(1,name='out_layer')(layer)\n    layer = Activation('sigmoid')(layer)\n    model = Model(inputs=inputs,outputs=layer)\n    return model","92c522e5":"import tensorflow as tf","00c7441a":"model = RNNmodel()\nmodel.summary()\nmodel.compile(loss='binary_crossentropy',optimizer='rmsprop',metrics=['accuracy',tf.keras.metrics.Precision()])","a024d805":"model.fit(sequences_matrix,Y_train,batch_size=128,epochs=10, validation_split=0.2)","edfff004":"test_sequences = tok.texts_to_sequences(X_test)\ntest_sequences_matrix = sequence.pad_sequences(test_sequences,maxlen=max_len)","fa54d39d":"accr = model.evaluate(test_sequences_matrix,Y_test)","a7141c8e":"print('Test set\\n  Loss: {:0.3f}\\n  Accuracy: {:0.3f}'.format(accr[0],accr[1]))","8d1f665e":"print(' LSTM Test set\\n  Loss: {:0.3f}\\n  Accuracy: {:0.3f}'.format(accr[0],accr[1]))","f23f8f9c":"### Load the data into Pandas dataframe","6b8e5e29":"Evaluate the model on the test set.","afc7a95d":"Drop the columns that are not required for the neural network.","c44f577a":"* Create input and output vectors.\n* Process the labels.","d55b2217":"Process the test set data.","0e1afabf":"Split into training and test data.","0007e544":"Fit on the training data.","4d0cbeb0":"# Import the necessary libraries","ece92d39":"### Process the data\n* Tokenize the data and convert the text to sequences.\n* Add padding to ensure that all the sequences have the same shape.\n* There are many ways of taking the *max_len* and here an arbitrary length of 150 is chosen.","6f5c1282":"Call the function and compile the model.","66793c84":"Understand the distribution better.","75c9177d":"### RNN\nDefine the RNN structure.","c7b763f9":"The model performs well on the validation set and this configuration is chosen as the final model."}}