{"cell_type":{"cee4f49f":"code","987191b0":"code","3e0e38e1":"code","cf7aa771":"code","d48cec80":"code","ec669968":"code","38bfbd17":"code","50b3fbe8":"code","2f39d8d8":"code","a349777f":"code","4b6d11ec":"code","08a27324":"code","2c58757f":"code","608fd636":"code","c2429408":"code","425b645b":"code","766ea659":"code","31091ccd":"code","9511490f":"code","85dbb14e":"code","1ae3d9cd":"code","55291f31":"code","00992c7b":"code","8f5bd84a":"code","70cd8ec2":"code","1fbf15fa":"markdown","fa52d483":"markdown","ec823663":"markdown","1fd7ff49":"markdown","16ad959a":"markdown","c2cfc093":"markdown","bd326c2f":"markdown","0fb53217":"markdown","3a332d57":"markdown","f5bcb1a6":"markdown","05e95b9f":"markdown","23835a3b":"markdown","f6da4f0b":"markdown","8f2bef59":"markdown","7a63125b":"markdown","535b275b":"markdown","6b6f0e9b":"markdown"},"source":{"cee4f49f":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","987191b0":"import matplotlib.pyplot as plt\nimport seaborn as sns\n\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.ensemble import RandomForestClassifier\n#\n#()\n#e\nfrom sklearn.linear_model import LogisticRegression\n#\n#()\nfrom sklearn.neighbors import KNeighborsClassifier\n#\n#e()\nfrom sklearn import tree,svm\nfrom sklearn.metrics import accuracy_score\n#()","3e0e38e1":"train_data=pd.read_csv('\/kaggle\/input\/titanic\/train.csv')\ntrain_data.head(10)","cf7aa771":"train_data.info()","d48cec80":"train_data.isnull().sum()","ec669968":"mean = train_data[\"Age\"].mean()\nstd = train_data[\"Age\"].std()\nprint(mean)\nprint(std)\n","38bfbd17":"rand_age =np.random.randint(mean-std,mean+std,size= 177)\nage_slice = train_data[\"Age\"].copy()\nage_slice[np.isnan(age_slice)] = rand_age\ntrain_data[\"Age\"] = age_slice\ntrain_data.isnull().sum()","50b3fbe8":"c_drop = [\"PassengerId\", \"Ticket\", \"Cabin\", \"Name\"]\ntrain_data.drop(c_drop, axis=1, inplace=True)\ntrain_data.head()","2f39d8d8":"drop = [\"SibSp\", \"Parch\", \"Fare\",\"Embarked\"]\ntrain_data.drop(drop, axis=1, inplace=True)\ntrain_data.head(10)","a349777f":"sns.barplot(x='Sex',y='Survived',data=train_data)","4b6d11ec":"sns.barplot(x='Age',y='Survived',data=train_data)","08a27324":"sns.barplot(x='Pclass',y='Survived',data=train_data)","2c58757f":"genders = {\"male\":0,\"female\":1}\ntrain_data[\"Sex\"] = train_data[\"Sex\"].map(genders)\n#.(genders)\n\ntrain_data.head(10)","608fd636":"df_train_x = train_data[[\"Pclass\",\"Sex\",\"Age\"]]\ndf_train_y = train_data[\"Survived\"]\n#[[\"Survived\"]]\n\n\nx_train, x_test, y_train, y_test = train_test_split(df_train_x, df_train_y, test_size=0.20)\n#, random_state=42)","c2429408":"clf1 = RandomForestClassifier()\nclf1.fit(x_train, y_train)\nrfc_y_pred = clf1.predict(x_test)\n#rain)\nrfc_accuracy = accuracy_score(y_test, rfc_y_pred)*100\n#rain, rfc_y_pred)*100\nprint(\"accuracy= \",rfc_accuracy)\n","425b645b":"clf2 = LogisticRegression()\n#()\nclf2.fit(x_train, y_train)\nIr_y_pred = clf2.predict(x_test)\nIr_accuracy = accuracy_score(y_test, Ir_y_pred)*100\nprint(\"accuracy=\",Ir_accuracy)","766ea659":"clf3 = KNeighborsClassifier()\n#neighborsClassifier\n#()\nclf3.fit(x_train,y_train)\nknc_y_pred = clf3.predict(x_test)\nknc_accuracy = accuracy_score(y_test, knc_y_pred)*100\nprint(\"accuracy=\",knc_accuracy)\n","31091ccd":"test_data = pd.read_csv('\/kaggle\/input\/titanic\/test.csv')\ntest_data.head(10)","9511490f":"test_data.info()","85dbb14e":"test_data.isnull().sum()","1ae3d9cd":"#replacing missing value for age column\nmean = test_data[\"Age\"].mean()\n#,\nstd = test_data[\"Age\"].std()\nrand_age = np.random.randint(mean-std,mean+std,size =86)\nage_slice = test_data[\"Age\"].copy()\nage_slice[np.isnan(age_slice)] = rand_age\ntest_data[\"Age\"] = age_slice\n#missing vale in fare xolumn\ntest_data[\"Fare\"].fillna(test_data[\"Fare\"].mean(), inplace=True)\n#r\ntest_data.isnull().sum()","55291f31":"#\nc_drop = [\"PassengerId\", \"Name\", \"Ticket\", \"Cabin\"]\n#ca\ntest_data.drop(c_drop, axis=1, inplace=True)\ntest_data.head(10)\n\n          ","00992c7b":"c_drop = [\"SibSp\",\"Parch\",\"Fare\",\"Embarked\"]\ntest_data.drop(c_drop, axis=1, inplace=True)\ntest_data.head(10)","8f5bd84a":"genders ={\"male\":0,\"female\":1}\ntest_data[\"Sex\"]= test_data[\"Sex\"].map(genders)\n\n#ports ={\"S\":0,\"C\":1,\"Q\":2}\n#test_data[\"Embarked\"]=test_data[\"Embarked\"].map(ports)\n#x\"] = test_data[\"Embaeked\"].map(poets)\n\ntest_data.head()","70cd8ec2":"x_test = test_data\n#rfc_\ny_pred = clf1.predict(x_test)\noriginaltest_data = pd.read_csv('\/kaggle\/input\/titanic\/test.csv')\n#s.data\nsubmission = pd.DataFrame({\n           \"PassengerId\": originaltest_data[\"PassengerId\"],\n    #.\n    #,\n           \"Survived\": y_pred\n     })\nsubmission.to_csv('submission.csv', index=False)\n       #           false)\nsubmission.head(20)\n#head(20)","1fbf15fa":"#*converting catagorical value in numerical value","fa52d483":"#**1.Import necessary libraries.**","ec823663":"#**Dropping coloumn","1fd7ff49":"since we're getting maximum accuracy with Ransom Forest classifire so we use for making prediction on test.csv. s","16ad959a":"#**Final Submission.**","c2cfc093":"#**2.Loading Dataset.**","bd326c2f":"#**Handling missing values.**","0fb53217":"#**Handelling the missing value of age column.**","3a332d57":"#**Converting categorical value into numeric value.**","f5bcb1a6":"**C)K-Neighbour Classifier","05e95b9f":"**B)Logistics regression.**\n","23835a3b":"#**Checking null value**","f6da4f0b":"#**Making prediction for test.csv.**","8f2bef59":"#***Data Preprocessing.***","7a63125b":"**A)RandomForestClassifire.**","535b275b":"#**Visualization.**","6b6f0e9b":"#**Building machine learning model.**"}}