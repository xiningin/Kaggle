{"cell_type":{"ba452e7f":"code","46bffd13":"code","d057f5ee":"code","0e52df67":"code","2fa7a155":"code","b1594823":"code","54901c70":"code","04e2966d":"code","63dd34ed":"code","5571fbd8":"code","b65e91ac":"code","1028b72a":"code","7e200c75":"code","7088d443":"code","b481ddd0":"code","32bc6d34":"code","018d5cec":"code","d81069e9":"code","4d6d45dc":"code","d3d3c05c":"code","dbe503d4":"code","b34bfa34":"code","5c364d82":"markdown","32e92f5d":"markdown","e784a8dc":"markdown","ac40ae4c":"markdown","07e36164":"markdown","f174fb92":"markdown","55e716fd":"markdown","97828089":"markdown","584867c2":"markdown","a197135b":"markdown"},"source":{"ba452e7f":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","46bffd13":"class Mobile:\n    def __init__(self, price, brand):\n        self.price = price\n        self.brand = brand\n        self.discount = 50\n\n    def purchase(self):\n        total = self.price - self.price * self.discount \/ 100\n        print (self.brand, \"mobile with price\", self.price, \"is available after discount at\", total)\n\nmob1=Mobile(20000, \"Apple\")\nmob2=Mobile(30000, \"Apple\")\nmob3=Mobile(5000, \"Samsung\")\n\nmob1.purchase()\nmob2.purchase()","d057f5ee":"class Mobile:\n    def __init__(self, price, brand):\n        self.price = price\n        self.brand = brand\n        self.discount = 0\n\n    def purchase(self):\n        total = self.price - self.price * self.discount \/ 100\n        print (self.brand, \"mobile with price\", self.price, \"is available after discount at\", total)\n\ndef enable_discount(list_of_mobiles):\n    for mobile in list_of_mobiles:\n        mobile.discount=50\n\ndef disable_discount(list_of_mobiles):\n    for mobile in list_of_mobiles:\n        mobile.discount=0\n\nmob1=Mobile(20000, \"Apple\")\nmob2=Mobile(30000, \"Apple\")\nmob3=Mobile(5000, \"Samsung\")\nmob4=Mobile(6000, \"Samsung\")\n\nlist_of_mobiles=[mob1,mob2,mob3,mob4]\n\nmob1.purchase()\n\nenable_discount(list_of_mobiles)\n\nmob2.purchase()\nmob3.purchase()\n\ndisable_discount(list_of_mobiles)\n\nmob4.purchase()","0e52df67":"from IPython.display import Image\nImage(\"..\/input\/day-2-ss\/shared attribute .png\")","2fa7a155":"class Mobile:\n    discount = 50\n    def __init__(self, price, brand):\n        self.price = price\n        self.brand = brand","b1594823":"class Mobile:\n    discount = 50\n    def __init__(self, price, brand):\n        self.price = price\n        self.brand = brand\n\n    def purchase(self):\n        total = self.price - self.price * Mobile.discount \/ 100\n        print (self.brand, \"mobile with price\", self.price, \"is available after discount at\", total)\n\nmob1=Mobile(20000, \"Apple\")\nmob2=Mobile(30000, \"Apple\")\nmob3=Mobile(5000, \"Samsung\")\n\nmob1.purchase()\nmob2.purchase()\nmob3.purchase()","54901c70":"class Mobile:\n    discount = 50\n    def __init__(self, price, brand):\n        self.price = price\n        self.brand = brand\n\n    def purchase(self):\n        total = self.price - self.price * Mobile.discount \/ 100\n        print (self.brand, \"mobile with price\", self.price, \"is available after discount at\", total)\n\ndef enable_discount():\n    Mobile.discount = 50\n\ndef disable_discount():\n    Mobile.discount = 0\n\nmob1=Mobile(20000, \"Apple\")\nmob2=Mobile(30000, \"Apple\")\nmob3=Mobile(5000, \"Samsung\")\n\nenable_discount()\nmob1.purchase()\nmob2.purchase()\n\ndisable_discount()\nmob3.purchase()","04e2966d":"class Mobile:\n    __discount = 50\n\n    def get_discount(self):\n        return Mobile.__discount\n\n    def set_discount(self,discount):\n        Mobile.__discount = discount\n\nm1=Mobile()\nprint(m1.get_discount())","63dd34ed":"class Mobile:\n    __discount = 50\n    def __init__(self, price, brand):\n        self.price = price\n        self.brand = brand\n\n    def purchase(self):\n        total = self.price - self.price * Mobile.__discount \/ 100\n        print (\"Total is \",total)\n\n    def get_discount(self):\n        return Mobile.__discount\n\n    def set_discount(self,discount):\n        Mobile.__discount = discount\n\nmob1=Mobile(20000, \"Apple\")\nmob2=Mobile(30000, \"Apple\")\nmob3=Mobile(5000, \"Samsung\")\n\nprint (mob1.get_discount())","5571fbd8":"@staticmethod\ndef get_discount():\n    return Mobile.__discount\n@staticmethod\ndef set_discount(discount):\n    Mobile.__discount=discount","b65e91ac":"class Mobile:\n    __discount = 50\n    def __init__(self, price, brand):\n        self.price = price\n        self.brand = brand\n\n    def purchase(self):\n        total = self.price - self.price * Mobile.__discount \/ 100\n        print (\"Total is \",total)\n\n    @staticmethod\n    def get_discount():\n        return Mobile.__discount\n\n    @staticmethod\n    def set_discount(discount):\n        Mobile.__discount = discount\n\nprint (Mobile.get_discount())","1028b72a":"class Mobile:\n    __discount = 50\n    def __init__(self, price, brand):\n        self.price = price\n        self.brand = brand\n\n    def purchase(self):\n        total = self.price - self.price * Mobile.__discount \/ 100\n        print (self.brand, \"mobile with price\", self.price, \"is available after discount at\", total)\n\n    @staticmethod\n    def enable_discount():\n        Mobile.set_discount(50)\n\n    @staticmethod\n    def disable_discount():\n        Mobile.set_discount(0)\n\n    @staticmethod\n    def get_discount():\n        return Mobile.__discount\n\n    @staticmethod\n    def set_discount(discount):\n        Mobile.__discount = discount\n\nmob1=Mobile(20000, \"Apple\")\nmob2=Mobile(30000, \"Apple\")\nmob3=Mobile(5000, \"Samsung\")\n\nMobile.disable_discount()\n\nmob1.purchase()\n\nMobile.enable_discount()\n\nmob2.purchase()\n\nMobile.disable_discount()\n\nmob3.purchase()","7e200c75":"class Lion:\n    __water_source=\"well in the circus\"\n\n    def __init__(self,name, gender):\n        self.__name=name\n        self.__gender=gender\n\n    def drink_water(self):\n        print(self.__name,\"drinks water from the\",Lion.__water_source)\n\nsimba=Lion(\"Simba\",\"Male\")\nnala=Lion(\"Nala\",\"Female\")\nsimba.drink_water()\nnala.drink_water()","7088d443":"from IPython.display import Image\nImage(\"..\/input\/day-2-screenshot\/static variable and reference .png\")","b481ddd0":"from IPython.display import Image\nImage(\"..\/input\/day-2-screenshot\/quiz 23.png\")","32bc6d34":"from IPython.display import Image\nImage(\"..\/input\/day-2-screenshot\/quiz 24.png\")","018d5cec":"from IPython.display import Image\nImage(\"..\/input\/day-2-screenshot\/quiz25.png\")","d81069e9":"from IPython.display import Image\nImage(\"..\/input\/day-2-screenshot\/quiz26.png\")","4d6d45dc":"from IPython.display import Image\nImage(\"..\/input\/day-2-screenshot\/quiz27.png\")","d3d3c05c":"from IPython.display import Image\nImage(\"..\/input\/day-2-screenshot\/quiz28.png\")","dbe503d4":"from IPython.display import Image\nImage(\"..\/input\/day-2-screenshot\/quiz29.png\")","b34bfa34":"from IPython.display import Image\nImage(\"..\/input\/day-2-screenshot\/quiz30.png\")","5c364d82":"**We can create shared attributes by placing them directly inside the class and not inside the constructor. And since this attribute is not owned by any one object, we don\u2019t need the self to create this attribute. Such variables which are created at a class level are called static variables. Here discount is a static value.**","32e92f5d":"**We can update the static value using the class name.**","e784a8dc":"**Static variables belong to the class and hence it is incorrect to access them or update them using the reference variable or self. Doing so may cause unexpected consequences in the code and should be refrained from. If you are interested to understand what happens when static variables are accessed through reference variables, read the appendix as additional learning.\n**","ac40ae4c":"**In the below code we are invoking the getter method using a reference variable. But the self is not used inside the method at all.**","07e36164":"**Now that we have created static variables, we can access them using the Class name itself. Static variable belong to the class and not an object. Hence we don\u2019t need self to access static variables.\n**","f174fb92":"**Since static variable is object independent, we need a way to access the getter setter methods without an object. This is possible by creating static methods. Static methods are those methods which can be accessed without an object. They are accessed using the class name.\n\nThere are two rules in creating such static methods:\n\nThe methods should not have self\n@staticmethod must be written on top of it**","55e716fd":"**We can make our static variable as a private variable by adding a double underscore in front of it. We can also create getter and setter methods to access or modify it.\n**","97828089":"**How can we write our code so that all mobile objects get a 50% off? One solution is to create a discount attribute and hard code the value as 50% as shown below:**","584867c2":"**However, the solution of hardcoding the value in the attribute is not a good one. For example, since this is a limited time discount we should be able to programmatically enable and disable the discount using functions like this:\n**","a197135b":"**We can access static methods directly using the class name, even without creating objects.**"}}