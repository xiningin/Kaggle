{"cell_type":{"c9effe29":"code","037cce38":"code","f91b8224":"code","523a147c":"code","02a467c7":"code","226726aa":"code","cb5072bb":"code","00637e6c":"code","29f502c3":"code","5c69713d":"code","e466f225":"code","20c17eb6":"code","09c19967":"code","28c91abd":"code","5eeb8143":"code","ca5deb2d":"code","40d79593":"markdown","89a43760":"markdown"},"source":{"c9effe29":"import pandas as pd# data processing, CSV file I\/O (e.g. pd.read_csv)\nimport os\nimport string\nimport numpy as np\nimport matplotlib.pyplot as plt\nfrom sklearn import model_selection\nfrom sklearn.naive_bayes import MultinomialNB\nfrom sklearn.metrics import classification_report\nimport seaborn as sns\n","037cce38":"from os import listdir\nX = [] # an element of X is represented as (filename,text)\nY = [] # an element of Y represents the newsgroup category of the corresponding X element\nls=listdir('..\/input\/20-newsgroups\/20_newsgroups\/20_newsgroups')","f91b8224":"ls","523a147c":"for category in ls:\n    folder=listdir('..\/input\/20-newsgroups\/20_newsgroups\/20_newsgroups\/'+category)\n    for document in folder:\n        with open('..\/input\/20-newsgroups\/20_newsgroups\/20_newsgroups\/'+category+'\/'+document, \"r\",encoding=\"ISO-8859-1\") as f:\n            X.append((document,f.read()))\n            Y.append(category)","02a467c7":"#splitting data\nX_train, X_test, Y_train, Y_test = model_selection.train_test_split(X, Y, test_size=0.25, random_state=0)","226726aa":"#a list of common words to be removed next \n#without effecting the prediction result\nstopwords = ['a', 'about', 'above', 'across', 'after', 'afterwards', 'again', 'against', 'all', 'almost', 'alone',\n             'along', 'already', 'also', 'although', 'always', 'am', 'among', 'amongst', 'amoungst', 'amount',\n             'an', 'and', 'another', 'any', 'anyhow', 'anyone', 'anything', 'anyway', 'anywhere', 'are', 'around',\n             'as', 'at', 'back', 'be', 'became', 'because', 'become', 'becomes', 'becoming', 'been', 'before',\n             'beforehand', 'behind', 'being', 'below', 'beside', 'besides', 'between', 'beyond', 'bill', 'both',\n             'bottom', 'but', 'by', 'call', 'can', 'cannot', 'cant', 'co', 'con', 'could', 'couldnt', 'cry', 'de',\n             'describe', 'detail', 'did', 'do', 'does', 'doing', 'don', 'done', 'down', 'due', 'during', 'each', 'eg',\n             'eight', 'either', 'eleven', 'else', 'elsewhere', 'empty', 'enough', 'etc', 'even', 'ever', 'every', 'everyone',\n             'everything', 'everywhere', 'except', 'few', 'fifteen', 'fify', 'fill', 'find', 'fire', 'first', 'five', 'for',\n             'former', 'formerly', 'forty', 'found', 'four', 'from', 'front', 'full', 'further', 'get', 'give', 'go', 'had',\n             'has', 'hasnt', 'have', 'having', 'he', 'hence', 'her', 'here', 'hereafter', 'hereby', 'herein', 'hereupon',\n             'hers', 'herself', 'him', 'himself', 'his', 'how', 'however', 'hundred', 'i', 'ie', 'if', 'in', 'inc', 'indeed',\n             'interest', 'into', 'is', 'it', 'its', 'itself', 'just', 'keep', 'last', 'latter', 'latterly', 'least', 'less',\n             'ltd', 'made', 'many', 'may', 'me', 'meanwhile', 'might', 'mill', 'mine', 'more', 'moreover', 'most', 'mostly',\n             'move', 'much', 'must', 'my', 'myself', 'name', 'namely', 'neither', 'never', 'nevertheless', 'next', 'nine',\n             'no', 'nobody', 'none', 'noone', 'nor', 'not', 'nothing', 'now', 'nowhere', 'of', 'off', 'often', 'on', 'once',\n             'one', 'only', 'onto', 'or', 'other', 'others', 'otherwise', 'our', 'ours', 'ourselves', 'out', 'over', 'own',\n             'part', 'per', 'perhaps', 'please', 'put', 'rather', 're', 's', 'same', 'see', 'seem', 'seemed', 'seeming',\n             'seems', 'serious', 'several', 'she', 'should', 'show', 'side', 'since', 'sincere', 'six', 'sixty', 'so', \n             'some', 'somehow', 'someone', 'something', 'sometime', 'sometimes', 'somewhere', 'still', 'such', 'system',\n             't', 'take', 'ten', 'than', 'that', 'the', 'their', 'theirs', 'them', 'themselves', 'then', 'thence', 'there',\n             'thereafter', 'thereby', 'therefore', 'therein', 'thereupon', 'these', 'they', 'thickv', 'thin', 'third', 'this',\n             'those', 'though', 'three', 'through', 'throughout', 'thru', 'thus', 'to', 'together', 'too', 'top', 'toward',\n             'towards', 'twelve', 'twenty', 'two', 'un', 'under', 'until', 'up', 'upon', 'us', 'very', 'via', 'was', 'we',\n             'well', 'were', 'what', 'whatever', 'when', 'whence', 'whenever', 'where', 'whereafter', 'whereas', 'whereby',\n             'wherein', 'whereupon', 'wherever', 'whether', 'which', 'while', 'whither', 'who', 'whoever', 'whole', 'whom',\n             'whose', 'why', 'will', 'with', 'within', 'without', 'would', 'yet', 'you', 'your', 'yours', 'yourself',\n             'yourselves']","cb5072bb":"vocab = {}\nfor i in range(len(X_train)):\n    word_list = []\n    for word in X_train[i][1].split():\n        word_new  = word.strip(string.punctuation).lower()\n        if (len(word_new)>2)  and (word_new not in stopwords):  \n            if word_new in vocab:\n                vocab[word_new]+=1\n            else:\n                vocab[word_new]=1","00637e6c":"num_words = [0 for i in range(max(vocab.values())+1)] \nfreq = [i for i in range(max(vocab.values())+1)] \nfor key in vocab:\n    num_words[vocab[key]]+=1\n    \nplt.axis([0, 10, 0, 20000])\nplt.bar(freq,num_words,color='maroon',width = 0.4)\nplt.xlabel(\"Frequency\",fontsize=12)\nplt.ylabel(\"No of words\",fontsize=12)\nplt.title(\"No of words Vs Frequency\",fontsize=12)\nplt.show()","29f502c3":"# deciding cutoff frequency\ncutoff_freq= 50\nnum_words_above_cutoff = len(vocab)-sum(num_words[0:cutoff_freq]) \nprint(\"Number of words with higher frequency than cutoff frequency({}) :\".format(cutoff_freq),num_words_above_cutoff)","5c69713d":"#creating a list named \"feature\" with these above words and removing words with less frequency than cut off  \nfeatures = []\nfor key in vocab:\n    if vocab[key] >=cutoff_freq:\n        features.append(key)","e466f225":"# representing training data as word vector counts\nX_train_dataset = np.zeros((len(X_train),len(features)))\n# It'll actually take some time to complete\nfor i in range(len(X_train)):\n    #print(i)\n    word_list = [ word.strip(string.punctuation).lower() for word in X_train[i][1].split()]\n    for word in word_list:\n        if word in features:\n            X_train_dataset[i][features.index(word)] += 1","20c17eb6":"# Let's do the same w\/ testing data and it's again going to take lots of time\nX_test_dataset = np.zeros((len(X_test),len(features)))\nfor i in range(len(X_test)):\n    word_list = [ word.strip(string.punctuation).lower() for word in X_test[i][1].split()]\n    for word in word_list:\n        if word in features:\n            X_test_dataset[i][features.index(word)] += 1","09c19967":"class MultinomialNaiveBayes:\n    \n    def __init__(self):\n        # count is a dictionary which stores several dictionaries corresponding to each news category\n        # each value in the subdictionary represents the freq of the key corresponding to that news category \n        self.count = {}\n        # classes represents the different news categories\n        self.classes = None\n    \n    def fit(self,X_train,Y_train):\n        # This can take some time to complete       \n        self.classes = set(Y_train)\n        for class_ in self.classes:\n            self.count[class_] = {}\n            for i in range(len(X_train[0])):\n                self.count[class_][i] = 0\n            self.count[class_]['total'] = 0\n            self.count[class_]['total_points'] = 0\n        self.count['total_points'] = len(X_train)\n        \n        for i in range(len(X_train)):\n            for j in range(len(X_train[0])):\n                self.count[Y_train[i]][j]+=X_train[i][j]\n                self.count[Y_train[i]]['total']+=X_train[i][j]\n            self.count[Y_train[i]]['total_points']+=1\n    \n    def __probability(self,test_point,class_):\n        \n        log_prob = np.log(self.count[class_]['total_points']) - np.log(self.count['total_points'])\n        total_words = len(test_point)\n        for i in range(len(test_point)):\n            current_word_prob = test_point[i]*(np.log(self.count[class_][i]+1)-np.log(self.count[class_]['total']+total_words))\n            log_prob += current_word_prob\n        \n        return log_prob\n    def __predictSinglePoint(self,test_point):\n        \n        best_class = None\n        best_prob = None\n        first_run = True\n        \n        for class_ in self.classes:\n            log_probability_current_class = self.__probability(test_point,class_)\n            if (first_run) or (log_probability_current_class > best_prob) :\n                best_class = class_\n                best_prob = log_probability_current_class\n                first_run = False\n                \n        return best_class\n        \n  \n    def predict(self,X_test):\n        # This can take some time to complete\n        Y_pred = [] \n        for i in range(len(X_test)):\n        # print(i) # Uncomment to see progress\n            Y_pred.append( self.__predictSinglePoint(X_test[i]) )\n        \n        return Y_pred\n    \n    def score(self,Y_pred,Y_true):\n        # returns the mean accuracy\n        count = 0\n        for i in range(len(Y_pred)):\n            if Y_pred[i] == Y_true[i]:\n                count+=1\n        return count\/len(Y_pred)","28c91abd":"clf = MultinomialNB()\nclf.fit(X_train_dataset,Y_train)\nY_test_pred = clf.predict(X_test_dataset)\nsklearn_score_train = clf.score(X_train_dataset,Y_train)\nprint(\"Sklearn's score on training data :\",sklearn_score_train)\nsklearn_score_test = clf.score(X_test_dataset,Y_test)\nprint(\"Sklearn's score on testing data :\",sklearn_score_test)\nprint(\"Classification report for testing data :-\")\nprint(classification_report(Y_test, Y_test_pred))","5eeb8143":"clf2 = MultinomialNaiveBayes()\nclf2.fit(X_train_dataset,Y_train)\nY_test_pred = clf2.predict(X_test_dataset)\nour_score_test = clf2.score(Y_test_pred,Y_test)  \nprint(\"Our score on testing data :\",our_score_test)\nprint(\"Classification report for testing data :-\")\nprint(classification_report(Y_test, Y_test_pred))","ca5deb2d":"print(\"Score of our model on test data:\",our_score_test)\nprint(\"Score of inbuilt sklearn's MultinomialNB on the same data :\",sklearn_score_test)","40d79593":"# Building Vocabulary:","89a43760":"# Implenting naive bayes classifier one from scratch and one from sklearn"}}