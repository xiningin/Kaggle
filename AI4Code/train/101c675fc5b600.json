{"cell_type":{"d3f6f405":"code","80ff368d":"code","ea92fc5f":"code","cf75c213":"code","2bb4da81":"code","510ba662":"code","6c546c31":"markdown","e8a76816":"markdown","cb6fdeef":"markdown"},"source":{"d3f6f405":"from __future__ import absolute_import\nfrom __future__ import division\nfrom __future__ import print_function\n\nimport collections\nimport re\nimport gc\nimport unicodedata\nimport six\nimport tensorflow as tf\nimport numpy as np\nimport pandas as pd\nimport os\nimport sys\nimport random\nimport keras\nimport tensorflow as tf\nimport json\nfrom keras.optimizers import Adam\nfrom keras.layers import Dense,Input,Flatten,concatenate,Dropout,Lambda\nfrom keras.models import Model\nimport keras.backend as K\nK.set_epsilon(1e-7)\nimport re\nimport codecs\nimport sys\nimport string\nimport codecs\nimport numpy as np\nimport re\nimport pandas as pd\nfrom tqdm import *\nsys.path.insert(0, '..\/input\/pretrained-bert-including-scripts\/master\/bert-master')\n!cp -r '..\/input\/kerasbert\/keras_bert' '\/kaggle\/working'\nfrom keras_bert.keras_bert.bert import get_model\nimport tokenization \nfrom keras_bert.keras_bert import get_custom_objects\n#from keras_bert.keras_bert.optimizers import AdamWarmup\n\n\ndef bert_get_result():\n    maxlen = 220\n    bsz=512\n    print('begin_build')\n    def checkpoint_loader(checkpoint_file):\n        def _loader(name):\n            return tf.train.load_variable(checkpoint_file, name)\n        return _loader\n\n\n    def load_trained_model_from_checkpoint(config_file,\n                                      #checkpoint_file,\n                                           training=False,\n                                           seq_len=None):\n        \"\"\"Load trained official model from checkpoint.\n        :param config_file: The path to the JSON configuration file.\n        :param checkpoint_file: The path to the checkpoint files, should end with '.ckpt'.\n        :param training: If training, the whole model will be returned.\n                         Otherwise, the MLM and NSP parts will be ignored.\n        :param seq_len: If it is not None and it is shorter than the value in the config file, the weights in\n                        position embeddings will be sliced to fit the new length.\n        :return:\n        \"\"\"\n        with open(config_file, 'r') as reader:\n            config = json.loads(reader.read())\n        if seq_len is None:\n            seq_len = config['max_position_embeddings']\n        else:\n            seq_len = min(seq_len, config['max_position_embeddings'])\n        #loader = checkpoint_loader(checkpoint_file)\n        model = get_model(\n            token_num=config['vocab_size'],\n            pos_num=seq_len,\n            seq_len=seq_len,\n            embed_dim=config['hidden_size'],\n            transformer_num=config['num_hidden_layers'],\n            head_num=config['num_attention_heads'],\n            feed_forward_dim=config['intermediate_size'],\n            training=training,\n        )\n        if not training:\n            inputs, outputs = model\n            model = keras.models.Model(inputs=inputs, outputs=outputs)\n\n        return model\n\n    def convert_lines(example, max_seq_length,tokenizer):\n        max_seq_length -=2\n        all_tokens = []\n        longer = 0\n        for i in tqdm(range(len(example))):\n          tokens_aa = tokenizer.tokenize(example[i])\n          if len(tokens_aa)>max_seq_length:\n            tokens_a = tokens_aa[:int(max_seq_length\/2)]+tokens_aa[-int(max_seq_length\/2):]\n            longer += 1\n            one_token = tokenizer.convert_tokens_to_ids([\"[CLS]\"]+tokens_a+[\"[SEP]\"])+[0] * (max_seq_length - len(tokens_a))\n            all_tokens.append(one_token)\n          else:\n            one_token = tokenizer.convert_tokens_to_ids([\"[CLS]\"]+tokens_aa+[\"[SEP]\"])+[0] * (max_seq_length - len(tokens_aa))\n            all_tokens.append(one_token)\n        print(longer)\n        return np.array(all_tokens)\n\n    test_df = pd.read_csv('..\/input\/jigsaw-unintended-bias-in-toxicity-classification\/test.csv')#[:1024]#.sample(512*2)\n    #test = pd.read_csv('..\/input\/jigsaw-unintended-bias-in-toxicity-classification\/test.csv')\n    \n      \n    ###\n    ###\n    ## new models\n    print('new models')\n    symbols_to_delete = '\u2192\u2605\u00a9\u00ae\u25cf\u02d0\u2606\u00b6\uff09\u0438\u02bf\u3002\ufb02\ufb01\u2081\u266d\u5e74\u25aa\u2190\u0292\u3001\uff08\u6708\u25a0\u21cc\u0279\u02e4\u00b3\u306e\u00a4\u203f\u0639\u062f\u0648\u064a\u0647\u0635\u0642\u0646\u0627\u062e\u0644\u0649\u0628\u0645\u063a\u0631\u0280\u0274\u05e9\u05dc\u05d5\u05dd\u05d1\u05d9\u30a8\u30f3\u1d35\u05d0\u05e2\u05db\u05d7\u2010\u03b9\u03ba\u03be\u062a\u062d\u0643\u0633\u0629\u0641\u0632\u0637\u2011\u5730\u8c37\u0443\u043b\u043a\u043d\u043e\u05d4\u6b4c\u043c\u03c5\u0442\u044d\u043f\u0440\u0434\u02e2\u1d52\u02b3\u02b8\u1d3a\u02b7\u1d57\u02b0\u1d49\u1d58\u03bf\u03c2\u05ea\u05de\u05d3\u05e3\u05e0\u05e8\u05da\u05e6\u05d8\u6210\u90fd\u0435\u0445\u5c0f\u571f\u300b\u0915\u0930\u092e\u093e\u82f1\u6587\u30ec\u30af\u30b5\u30b9\u5916\u56fd\u4eba\u0431\u044c\u044b\u0433\u044f\u4e0d\u3064\u0437\u0446\u4f1a\u4e0b\u6709\u7684\u52a0\u5927\u5b50\u30c4\u0634\u0621\u02b2\u0448\u0447\u044e\u0436\u6226\u0449\u660e\u05e7\u0459\u045b\u6211\u51fa\u751f\u5929\u4e00\u5bb6\u65b0\u0281\u057d\u0570\u05df\u062c\u0456\u2012\u516c\u7f8e\u963f\u05e1\u05e4\u767d\u30de\u30eb\u30cf\u30cb\u30c1\u30ed\u793e\u03b6\u548c\u4e2d\u6cd5\u672c\u58eb\u76f8\u4fe1\u653f\u6cbb\u5802\u7248\u3063\u0444\u0686\u06cc\u30ea\u4e8b\u300c\u300d\u30b7\u03c7\u03c8\u0574\u0565\u0561\u0575\u056b\u0576\u0580\u0582\u0564\u06a9\u300a\u10da\u3055\u3088\u3046\u306a\u3089\u0639\u062f\u0648\u064a\u0647\u0635\u0642\u0646\u0627\u062e\u0644\u0649\u0628\u0645\u063a\u0631\u0280\u0274\u05e9\u05dc\u05d5\u05dd\u05d1\u05d9\u30a8\u30f3\u1d35\u05d0\u05e2\u05db\u05d7\u2010\u03b9\u03ba\u03be\u062a\u062d\u0643\u0633\u0629\u0641\u0632\u0637\u2011\u5730\u8c37\u0443\u043b\u043a\u043d\u043e\u05d4\u6b4c\u043c\u03c5\u0442\u044d\u043f\u0440\u0434\u02e2\u1d52\u02b3\u02b8\u1d3a\u02b7\u1d57\u02b0\u1d49\u1d58\u03bf\u03c2\u05ea\u05de\u05d3\u05e3\u05e0\u05e8\u05da\u05e6\u05d8\u6210\u90fd\u0435\u0445\u5c0f\u571f\u300b\u0915\u0930\u092e\u093e\u82f1\u6587\u30ec\u30af\u30b5\u30b9\u5916\u56fd\u4eba\u0431\u044c\u044b\u0433\u044f\u4e0d\u3064\u0437\u0446\u4f1a\u4e0b\u6709\u7684\u52a0\u5927\u5b50\u30c4\u0634\u0621\u02b2\u0448\u0447\u044e\u0436\u6226\u0449\u660e\u05e7\u0459\u045b\u6211\u51fa\u751f\u5929\u4e00\u5bb6\u65b0\u0281\u057d\u0570\u05df\u062c\u0456\u2012\u516c\u7f8e\u963f\u05e1\u05e4\u767d\u30de\u30eb\u30cf\u30cb\u30c1\u30ed\u793e\u03b6\u548c\u4e2d\u6cd5\u672c\u58eb\u76f8\u4fe1\u653f\u6cbb\u5802\u7248\u3063\u0444\u0686\u06cc\u30ea\u4e8b\u300c\u300d\u30b7\u03c7\u03c8\u0574\u0565\u0561\u0575\u056b\u0576\u0580\u0582\u0564\u06a9\u300a\u10da\u3055\u3088\u3046\u306a\u3089\\n\uff3c\ud83c\udf55\\r\ud83d\udc35\ud83d\ude11\\xa0\\ue014\u2260\\t\\uf818\\uf04a\\xad\ud83d\ude22\ud83d\udc36\u2764\ufe0f\u263a\\uf0e0\ud83d\ude1c\ud83d\ude0e\ud83d\udc4a\\u200b\\u200e\ud83d\ude01\u0623\ud83d\ude0d\ud83d\udc96\u0336\ud83d\udcb5\u2765\u2501\u2523\u252b\u0415\u2517\uff2f\u25ba\ud83d\udc4e\ud83d\ude00\ud83d\ude02\\u202a\\u202c\ud83d\udd25\ud83d\ude04\ud83c\udffb\ud83d\udca5\u1d0d\u028f\u1d07\u1d05\u1d0f\u1d00\u1d0b\u029c\u1d1c\u029f\u1d1b\u1d04\u1d18\u0299\u0493\u1d0a\u1d21\u0262\u2714\\x96\\x92\ud83d\ude0b\ud83d\udc4f\ud83d\ude31\u203c\\x81\u30b8\u6545\u969c\u27a4\\u2009\ud83d\ude8c\u035e\ud83c\udf1f\ud83d\ude0a\ud83d\ude33\ud83d\ude27\ud83d\ude40\ud83d\ude10\ud83d\ude15\\u200f\ud83d\udc4d\ud83d\ude2e\ud83d\ude03\ud83d\ude18\u2615\u2661\u25d0\u2551\u25ac\ud83d\udca9\ud83d\udcaf\u26fd\ud83d\ude84\ud83c\udffc\u0b9c\u06e9\u06de\ud83d\ude16\u1d20\ud83d\udeb2\u2712\u27a5\ud83d\ude1f\ud83d\ude08\u2550\u02cc\ud83d\udcaa\ud83d\ude4f\ud83c\udfaf\u25c4\ud83c\udf39\ud83d\ude07\ud83d\udc94\ud83d\ude21\\x7f\ud83d\udc4c\u1f10\u1f76\u03ae\u1f72\u1f00\u03af\u1fc3\u1f34\ud83d\ude44\u272c\uff33\uff35\uff30\uff25\uff32\uff28\uff29\uff34\ud83d\ude20\\ufeff\u263b\\u2028\ud83d\ude09\ud83d\ude24\u26fa\u264d\ud83d\ude42\\u3000\ud83d\udc6e\ud83d\udc99\ud83d\ude0f\ud83c\udf7e\ud83c\udf89\ud83d\ude1e\\u2008\ud83c\udffe\ud83d\ude05\ud83d\ude2d\ud83d\udc7b\ud83d\ude25\ud83d\ude14\ud83d\ude13\ud83c\udffd\ud83c\udf86\u2713\u25fe\ud83c\udf7b\ud83c\udf7d\ud83c\udfb6\ud83c\udf3a\ud83e\udd14\ud83d\ude2a\\x08\u061f\ud83d\udc30\ud83d\udc07\ud83d\udc31\ud83d\ude46\ud83d\ude28\u2b05\ud83d\ude43\ud83d\udc95\ud835\ude0a\ud835\ude26\ud835\ude33\ud835\ude22\ud835\ude35\ud835\ude30\ud835\ude24\ud835\ude3a\ud835\ude34\ud835\ude2a\ud835\ude27\ud835\ude2e\ud835\ude23\ud83d\udc97\ud83d\udc9a\u7344\u2105\u0412\u041f\u0410\u041d\ud83d\udc3e\ud83d\udc15\u2763\ud83d\ude06\ud83d\udd17\ud83d\udebd\u821e\u4f0e\ud83d\ude48\ud83d\ude34\ud83c\udfff\ud83e\udd17\ud83c\uddfa\ud83c\uddf8\u266b\u0455\uff23\uff2d\u2935\ud83c\udfc6\ud83c\udf83\ud83d\ude29\u2588\u2593\u2592\u2591\\u200a\ud83c\udf20\ud83d\udc1f\ud83d\udcab\ud83d\udcb0\ud83d\udc8e\\x95\ud83d\udd90\ud83d\ude45\u26f2\ud83c\udf70\u2b50\ud83e\udd10\ud83d\udc46\ud83d\ude4c\\u2002\ud83d\udc9b\ud83d\ude41\ud83d\udc40\ud83d\ude4a\ud83d\ude49\\u2004\u2767\u25b0\u2594\u1d3c\u1d37\u25de\u2580\\x13\ud83d\udeac\u2582\u2583\u2584\u2585\u2586\u2587\u2199\ud83e\udd13\\ue602\ud83d\ude35\u03ac\u03cc\u03ad\u1f78\u0304\ud83d\ude12\u035d\u2639\u27a1\ud83c\udd95\ud83d\udc45\ud83d\udc65\ud83d\udc44\ud83d\udd04\ud83d\udd24\ud83d\udc49\ud83d\udc64\ud83d\udc76\ud83d\udc72\ud83d\udd1b\ud83c\udf93\\uf0b7\u270b\\uf04c\\x9f\\x10\ud83d\ude23\u23fa\u0332\u0305\ud83d\ude0c\ud83e\udd11\u0301\ud83c\udf0f\ud83d\ude2f\ud83d\ude32\u2219\u201b\u1f38\u1fb6\u1f41\ud83d\udc9e\ud83d\ude93\u25c7\ud83d\udd14\ud83d\udcda\u270f\ud83c\udfc0\ud83d\udc50\\u202d\ud83d\udca4\ud83c\udf47\\ue613\u8c46\ud83c\udfe1\u25b7\u2754\u2753\u2049\u2757\\u202f\ud83d\udc60\u094d\ud83c\uddf9\ud83c\uddfc\ud83c\udf38\u8521\ud83c\udf1e\u02da\ud83c\udfb2\ud83d\ude1b\u02d9\u5173\u7cfb\u0421\ud83d\udc8b\ud83d\udc80\ud83c\udf84\ud83d\udc9c\ud83e\udd22\u0650\u064e\u2728\u662f\\x80\\x9c\\x9d\ud83d\uddd1\\u2005\ud83d\udc83\ud83d\udce3\ud83d\udc7f\u0f3c\u25d5\u0f3d\ud83d\ude30\u1e37\u0417\u25b1\ufffc\ud83e\udd23\u5356\u6e29\u54e5\u534e\u8bae\u964d\uff05\u4f60\u5931\u53bb\u6240\u94b1\u62ff\u574f\u7a0e\u9a97\ud83d\udc1d\u00af\ud83c\udf85\\x85\ud83c\udf7a\u0622\u0625\ud83c\udfb5\ud83c\udf0e\u035f\u1f14\u6cb9\u522b\u514b\ud83e\udd21\ud83e\udd25\ud83d\ude2c\ud83e\udd27\u0439\\u2003\ud83d\ude80\ud83e\udd34\u2320\u0418\u041e\u0420\u0424\u0414\u042f\u041c\u2718\ud83d\ude1d\ud83d\udd91\u1f50\u1f7b\u03cd\u7279\u6b8a\u4f5c\u7fa4\u256a\ud83d\udca8\u5706\u56ed\u25b6\u2110\u262d\u272d\ud83c\udfc8\ud83d\ude3a\u266a\ud83c\udf0d\u23cf\u1ec7\ud83c\udf54\ud83d\udc2e\ud83c\udf41\u2614\ud83c\udf46\ud83c\udf51\ud83c\udf2e\ud83c\udf2f\u2620\ud83e\udd26\\u200d\u2642\ud835\udcd2\ud835\udcf2\ud835\udcff\ud835\udcf5\uc548\uc601\ud558\uc138\uc694\u0416\u041a\ud83c\udf40\ud83d\ude2b\ud83e\udd24\u1fe6\u5728\u4e86\u53ef\u4ee5\u8bf4\u666e\u901a\u8bdd\u6c49\u8bed\u597d\u6781\ud83c\udfbc\ud83d\udd7a\u2603\ud83c\udf78\ud83e\udd42\ud83d\uddfd\ud83c\udf87\ud83c\udf8a\ud83c\udd98\u260e\ud83e\udd20\ud83d\udc69\u2708\ud83d\udd92\u270c\u2730\u2746\u2619\ud83d\udeaa\u26b2\\u2006\u26ad\u2686\u2b2d\u2b2f\u23d6\u25cb\u2023\u2693\u220e\u2112\u2599\u260f\u215b\u2700\u254c\ud83c\uddeb\ud83c\uddf7\ud83c\udde9\ud83c\uddea\ud83c\uddee\ud83c\uddec\ud83c\udde7\ud83d\ude37\ud83c\udde8\ud83c\udde6\u0425\u0428\ud83c\udf10\\x1f\u6740\u9e21\u7ed9\u7334\u770b\ud835\uddea\ud835\uddf5\ud835\uddf2\ud835\uddfb\ud835\ude06\ud835\uddfc\ud835\ude02\ud835\uddff\ud835\uddee\ud835\uddf9\ud835\uddf6\ud835\ude07\ud835\uddef\ud835\ude01\ud835\uddf0\ud835\ude00\ud835\ude05\ud835\uddfd\ud835\ude04\ud835\uddf1\ud83d\udcfa\uff43\u03d6\\u2000\u04af\uff41\u1d26\u13a5\u04bb\u037a\\u2007\uff53\u01c0\\u2001\u0269\u212e\uff59\uff45\u0d66\uff4c\u01bd\u00b8\uff57\uff48\ud835\udc13\ud835\udc21\ud835\udc1e\ud835\udc2b\ud835\udc2e\ud835\udc1d\ud835\udc1a\ud835\udc03\ud835\udc1c\ud835\udc29\ud835\udc2d\ud835\udc22\ud835\udc28\ud835\udc27\u0184\u1d28\u146f\u0ed0\u03a4\u13e7\u0be6\u0406\u1d11\u0701\ud835\udc2c\ud835\udc30\ud835\udc32\ud835\udc1b\ud835\udc26\ud835\udc2f\ud835\udc11\ud835\udc19\ud835\udc23\ud835\udc07\ud835\udc02\ud835\udc18\ud835\udfce\u051c\u0422\u15de\u0c66\u3014\u13ab\ud835\udc33\ud835\udc14\ud835\udc31\ud835\udfd4\ud835\udfd3\ud835\udc05\ud83d\udc0b\u223c\ufb03\ud83d\udc98\ud83d\udc93\u0451\ud835\ude25\ud835\ude2f\ud835\ude36\ud83d\udc90\ud83c\udf0b\ud83c\udf04\ud83c\udf05\ud835\ude6c\ud835\ude56\ud835\ude68\ud835\ude64\ud835\ude63\ud835\ude61\ud835\ude6e\ud835\ude58\ud835\ude60\ud835\ude5a\ud835\ude59\ud835\ude5c\ud835\ude67\ud835\ude65\ud835\ude69\ud835\ude6a\ud835\ude57\ud835\ude5e\ud835\ude5d\ud835\ude5b\ud83d\udc7a\ud83d\udc37\u210b\u2133\ud835\udc00\ud835\udc25\ud835\udc2a\u2744\ud83d\udeb6\ud835\ude62\u1f39\ud83e\udd18\u0366\ud83d\udcb8\u263c\ud328\ud2f0\uff37\u22c6\ud835\ude47\u1d7b\ud83d\udc42\ud83d\udc43\u025c\ud83c\udfab\\uf0a7\u0411\u0423\ud83d\udea2\ud83d\ude82\u0a97\u0ac1\u0a9c\u0ab0\u0abe\u0aa4\u0ac0\u1fc6\ud83c\udfc3\ud835\udcec\ud835\udcfb\ud835\udcf4\ud835\udcee\ud835\udcfd\ud835\udcfc\u2618\ufd3e\u0361\u0e4f\u032f\ufd3f\u26be\u26bd\u03a6\u20bd\\ue807\ud835\udc7b\ud835\udc86\ud835\udc8d\ud835\udc95\ud835\udc89\ud835\udc93\ud835\udc96\ud835\udc82\ud835\udc8f\ud835\udc85\ud835\udc94\ud835\udc8e\ud835\udc97\ud835\udc8a\ud83d\udc7d\ud83d\ude19\\u200c\u041b\ud83c\udfbe\ud83d\udc79\uffe6\u238c\ud83c\udfd2\u26f8\u5bd3\u517b\u5ba0\u7269\u5417\ud83c\udfc4\ud83d\udc00\ud83d\ude91\ud83e\udd37\u64cd\ud835\udc91\ud835\udc9a\ud835\udc90\ud835\udc74\ud83e\udd19\ud83d\udc12\u2103\u6b22\u8fce\u6765\u5230\u62c9\u65af\ud835\ude6b\u23e9\u262e\ud83d\udc08\ud835\udc8c\ud835\ude4a\ud835\ude6d\ud835\ude46\ud835\ude4b\ud835\ude4d\ud835\ude3c\ud835\ude45\ufdfb\u26a0\ud83e\udd84\u5de8\u6536\u8d62\u5f97\u9b3c\u6124\u6012\u8981\u4e70\u989d\u1ebd\ud83d\ude97\u270a\ud83d\udc33\ud835\udfcf\ud835\udc1f\ud835\udfd6\ud835\udfd1\ud835\udfd5\ud835\udc84\ud835\udfd7\ud835\udc20\ud835\ude44\ud835\ude43\ud83d\udc47\u951f\u65a4\u62f7\u274c\u2b55\u25b8\ud835\udde2\ud835\udff3\ud835\udff1\ud835\udfec\u2981\u682a\u5f0f\u26f7\ud55c\uad6d\uc5b4\u3138\u3153\ub2c8\u035c\u0296\ud835\ude3f\ud835\ude54\u20b5\ud835\udca9\u212f\ud835\udcbe\ud835\udcc1\ud835\udcb6\ud835\udcc9\ud835\udcc7\ud835\udcca\ud835\udcc3\ud835\udcc8\ud835\udcc5\u2134\ud835\udcbb\ud835\udcbd\ud835\udcc0\ud835\udccc\ud835\udcb8\ud835\udcce\ud835\ude4f\ud835\ude5f\ud835\ude03\ud835\uddfa\ud835\udfee\ud835\udfed\ud835\udfef\ud835\udff2\ud83d\udc4b\ud83e\udd8a\u2610\u2611\u591a\u4f26\u26a1\u2604\u01eb\ud83d\udc3d\ud83c\udfbb\ud83c\udfb9\u26d3\ud83c\udff9\u256d\u256e\ud83c\udf77\ud83e\udd86\u4e3a\u53cb\u8c0a\u795d\u8d3a\u4e0e\u5176\u60f3\u8c61\u5bf9\u5982\u76f4\u63a5\u95ee\u7528\u81ea\u5df1\u731c\u4f20\u6559\u6ca1\u79ef\u552f\u8ba4\u8bc6\u57fa\u7763\u5f92\u66fe\u7ecf\u8ba9\u8036\u7a23\u590d\u6d3b\u6b7b\u602a\u4ed6\u4f46\u5f53\u4eec\u804a\u4e9b\u9898\u65f6\u5019\u4f8b\u6218\u80dc\u56e0\u5723\u628a\u5168\u7ed3\u5a5a\u5b69\u6050\u60e7\u4e14\u6817\u8c13\u8fd9\u6837\u8fd8\u267e\ud83c\udfb8\ud83e\udd15\ud83e\udd12\u26d1\ud83c\udf81\u6279\u5224\u68c0\u8ba8\ud83c\udfdd\ud83e\udd81\uff1e\u0295\u0323\u0394\ud83d\ude4b\ud83d\ude36\uc950\uc2a4\ud0f1\ud2b8\ub93c\ub3c4\uc11d\uc720\uac00\uaca9\uc778\uc0c1\uc774\uacbd\uc81c\ud669\uc744\ub835\uac8c\ub9cc\ub4e4\uc9c0\uc54a\ub85d\uc798\uad00\ub9ac\ud574\uc57c\ud569\ub2e4\uce90\ub098\uc5d0\uc11c\ub300\ub9c8\ucd08\uc640\ud654\uc57d\uae08\uc758\ud488\ub7f0\uc131\ubd84\uac08\ub54c\ub294\ubc18\ub4dc\uc2dc\ud5c8\ub41c\uc0ac\uc6a9\u271e\ud83d\udd2b\ud83d\udc41\u2508\u2571\u2572\u258f\u2595\u2503\u2570\u258a\u258b\u256f\u2533\u250a\u2612\u51f8\u1f70\ud83d\udcb2\ud83d\uddef\ud835\ude48\u1f0c\ud835\udc87\ud835\udc88\ud835\udc98\ud835\udc83\ud835\udc6c\ud835\udc76\ud835\udd7e\ud835\udd99\ud835\udd97\ud835\udd86\ud835\udd8e\ud835\udd8c\ud835\udd8d\ud835\udd95\ud835\udd8a\ud835\udd94\ud835\udd91\ud835\udd89\ud835\udd93\ud835\udd90\ud835\udd9c\ud835\udd9e\ud835\udd9a\ud835\udd87\ud835\udd7f\ud835\udd98\ud835\udd84\ud835\udd9b\ud835\udd92\ud835\udd8b\ud835\udd82\ud835\udd74\ud835\udd9f\ud835\udd88\ud835\udd78\ud83d\udc51\ud83d\udebf\u261d\ud83d\udca1\u77e5\u5f7c\u767e\\uf005\ud835\ude40\ud835\udc9b\ud835\udc72\ud835\udc73\ud835\udc7e\ud835\udc8b\ud835\udfd2\ud83d\ude26\ud835\ude52\ud835\ude3e\ud835\ude3d\ud83c\udfd0\ud835\ude29\ud835\ude28\u1f7c\u1e51\u2705\u261b\ud835\udc71\ud835\udc79\ud835\udc6b\ud835\udc75\ud835\udc6a\ud83c\uddf0\ud83c\uddf5\ud83d\udc7e\u14c7\u14a7\u152d\u1403\u1427\u1426\u1473\u1428\u14c3\u14c2\u1472\u1438\u146d\u144e\u14c0\u1423\ud83d\udc04\ud83c\udf88\ud83d\udd28\u2669\ud83d\udc0e\ud83e\udd1e\u261e\ud83d\udc38\ud83d\udc9f\ud83c\udfb0\ud83c\udf1d\ud83d\udef3\u70b9\u51fb\u67e5\ud83c\udf6d\ud835\udc65\ud835\udc66\ud835\udc67\uff21\uff2e\uff27\uff2a\uff22\ud83d\udc63\\uf020\u25d4\u25e1\ud83c\udfc9\ud83d\udcad\ud83c\udfa5\u2640\u039e\ud83d\udc34\ud83d\udc68\ud83e\udd33\u2b06\ud83e\udd8d\\x0b\ud83c\udf69\ud835\udc6f\ud835\udc92\ud83d\ude17\ud835\udfd0\ud83c\udfc2\ud83d\udc73\ud83c\udf57\ud83d\udd49\ud83d\udc32\u0331\u210f\ud835\udc6e\ud835\uddd5\ud835\uddf4\\x91\ud83c\udf52\u2800\ua725\u2ca3\u2c8f\u255a\ud83d\udc11\u23f0\u21ba\u21e4\u220f\u9244\u4ef6\u273e\u25e6\u266c\u0457\ud83d\udc8a\\uf203\\uf09a\\uf222\\ue608\\uf202\\uf099\\uf469\\ue607\\uf410\\ue600\u71fb\u88fd\u865a\u507d\u5c41\u7406\u5c48\uff5c\u0413\ud835\udc69\ud835\udc70\ud835\udc80\ud835\udc7a\ud83c\udf24\u2235\u2234\ud835\uddf3\ud835\udddc\ud835\uddd9\ud835\udde6\ud835\udde7\ud83c\udf4a\u1f7a\u1f08\u1f21\u1fd6\u039b\u03a9\u290f\ud83c\uddf3\ud835\udc99\u0541\u057c\u0571\u51ac\u81f3\u1f40\ud835\udc81\ud83d\udd39\ud83e\udd1a\ud83c\udf4e\ud835\udc77\ud83d\udc02\ud83d\udc85\ud835\ude2c\ud835\ude31\ud835\ude38\ud835\ude37\ud835\ude10\ud835\ude2d\ud835\ude13\ud835\ude16\ud835\ude39\ud835\ude32\ud835\ude2b\u261c\u0392\u03ce\ud83d\udca2\u25b2\u039c\u039f\u039d\u0391\u0395\ud83c\uddf1\u2672\ud835\udf48\u21b4\u21b3\ud83d\udc92\u2298\u25ab\u023b\u2b07\ud83d\udeb4\ud83d\udd95\ud83d\udda4\ud83e\udd58\ud83d\udccd\ud83d\udc48\u2795\ud83d\udeab\ud83c\udfa8\ud83c\udf11\ud83d\udc3b\ud835\udc0e\ud835\udc0d\ud835\udc0a\ud835\udc6d\ud83e\udd16\ud83c\udf8e\u2727\ud83d\ude3c\ud83d\udd77\uff47\uff4f\uff56\uff52\uff4e\uff4d\uff54\uff49\uff44\uff55\uff12\uff10\uff18\uff46\uff42\uff07\uff4b\ud835\udff0\ud83c\uddf4\ud83c\udded\ud83c\uddfb\ud83c\uddf2\ud835\uddde\ud835\udded\ud835\uddd8\ud835\udde4\ud83d\udc7c\ud83d\udcc9\ud83c\udf5f\ud83c\udf66\u2215\ud83c\udf08\ud83d\udd2d\ud83d\udc0a\ud83d\udc0d\\uf10a\u02c6\u269c\u2601\u06a1\ud83d\udc26\\U0001f92f\\U0001f92a\ud83d\udc21\ud83d\udcb3\u1f31\ud83d\ude47\ud835\uddf8\ud835\udddf\ud835\udde0\ud835\uddf7\ud83e\udd5c\ud83d\udd3c'\n    symbols_to_isolate = '.,?!-;*\"\u2026:\u2014()%#$&_\/@\u30fb\u03c9+=\u201d\u201c[]^\u2013>\\\\\u00b0<~\u2022\u2122\u02c8\u028a\u0252\u221e\u00a7{}\u00b7\u03c4\u03b1\u0261|\u00a2`\u2015\u026a\u00a3\u2665\u00b4\u00b9\u2248\u00f7\u2032\u0254\u20ac\u2020\u03bc\u00bd\u02bb\u03c0\u03b4\u03b7\u03bb\u03c3\u03b5\u03c1\u03bd\u0283\u00b1\u00b5\u00ba\u00be\uff0e\u00bb\u0430\u0432\u22c5\u00bf\u00ac\u03b2\u21d2\u203a\u00a1\u2082\u2083\u03b3\u2033\u00ab\u03c6\u2153\u201e\uff1a\u00a5\u0441\u0251\uff01\u2212\u00b2\u028c\u00bc\u2074\u2044\u2084\u201a\u2016\u2282\u2154\u00a8\u00d7\u03b8\uff1f\u2229\uff0c\u0250\u2080\u2265\u2191\u2193\uff0f\u221a\uff0d\u2030\u2264'\n\n    isolate_dict = {ord(c):f' {c} ' for c in symbols_to_isolate}\n    remove_dict = {ord(c):f'' for c in symbols_to_delete}\n    \n    abbr_mapping = {'\u1d00':'a','\u0299':'b','\u1d04':'c','\u1d05':'d','\u1d07':'e','\ua730':'f','\u0262':'g','\u029c':'h',\n                      '\u026a':'i','\u1d0a':'j','\u1d0b':'k','\u029f':'l','\u1d0d':'m','\u0274':'n','\u1d0f':'o','\u1d18':'p',\n                      '\u01eb':'q','\u0280':'r','\ua731':'s','\u1d1b':'t','\u1d1c':'u','\u1d20':'v','\u1d21':'w','\u028f':'y','\u1d22':'z', '\\n':' ',\n                      'u.s.a.': 'usa', 'u.s.a': 'usa', 'u.s.': 'usa',  ' u.s ': ' usa ','u s of a': 'usa',\n                      ' u.k. ': 'uk', ' u.k ': ' uk ', ' yr old ': ' years old ',\n                      ' yrs old ': ' years old ',' ph.d ': ' phd ','kim jong-un': 'the president of north korea',\n                      '#metoo': 'metoo', 'trumpster': 'trump supporter','trumper': 'trump supporter',\n                      'trumpian':'trump supporter','trumpism':'trump supporter',\"trump's\" : 'trump',\n                      ' u r ': ' you are ',  'e.g.': 'for example','i.e.': 'in other words',\n                      'et.al': 'elsewhere', 'antisemitic': 'anti-semitic','sb91':'senate bill',                                   \n                      }\n\n\n    contraction_mapping = {\n        \"'cause\": 'because',',cause': 'because',';cause': 'because',\"ain't\": 'am not','ain,t': 'am not',\n        'ain;t': 'am not','ain\u00b4t': 'am not','ain\u2019t': 'am not',\"aren't\": 'are not',\n        'aren,t': 'are not','aren;t': 'are not','aren\u00b4t': 'are not','aren\u2019t': 'are not',\"can't\": 'cannot',\n        \"can't've\": 'cannot have','can,t': 'cannot','can,t,ve': 'cannot have', 'can;t': 'cannot','can;t;ve': 'cannot have',\n        'can\u00b4t': 'cannot','can\u00b4t\u00b4ve': 'cannot have','can\u2019t': 'cannot','can\u2019t\u2019ve': 'cannot have',\n        \"could've\": 'could have','could,ve': 'could have','could;ve': 'could have',\"couldn't\": 'could not',\n        \"couldn't've\": 'could not have','couldn,t': 'could not','couldn,t,ve': 'could not have','couldn;t': 'could not',\n        'couldn;t;ve': 'could not have','couldn\u00b4t': 'could not', 'couldn\u00b4t\u00b4ve': 'could not have','couldn\u2019t': 'could not',\n        'couldn\u2019t\u2019ve': 'could not have', 'could\u00b4ve': 'could have',\n        'could\u2019ve': 'could have',\"didn't\": 'did not','didn,t': 'did not','didn;t': 'did not','didn\u00b4t': 'did not',\n        'didn\u2019t': 'did not',\"doesn't\": 'does not','doesn,t': 'does not','doesn;t': 'does not','doesn\u00b4t': 'does not',\n        'doesn\u2019t': 'does not',\"don't\": 'do not','don,t': 'do not','don;t': 'do not','don\u00b4t': 'do not','don\u2019t': 'do not',\n        \"hadn't\": 'had not',\"hadn't've\": 'had not have','hadn,t': 'had not','hadn,t,ve': 'had not have','hadn;t': 'had not',\n        'hadn;t;ve': 'had not have','hadn\u00b4t': 'had not','hadn\u00b4t\u00b4ve': 'had not have','hadn\u2019t': 'had not',\n        'hadn\u2019t\u2019ve': 'had not have',\"hasn't\": 'has not','hasn,t': 'has not','hasn;t': 'has not','hasn\u00b4t': 'has not',\n        'hasn\u2019t': 'has not', \"haven't\": 'have not','haven,t': 'have not','haven;t': 'have not','haven\u00b4t': 'have not',\n        'haven\u2019t': 'have not',\"he'd\": 'he would', \"he'd've\": 'he would have',\"he'll\": 'he will','he\u00b4ll': 'he will',\n        \"he's\": 'he is','he,d': 'he would','he,d,ve': 'he would have','he,ll': 'he will','he,s': 'he is','he;d': 'he would',   \n        'he;d;ve': 'he would have','he;ll': 'he will','he;s': 'he is','he\u00b4d': 'he would','he\u00b4d\u00b4ve': 'he would have',    \n        'he\u00b4s': 'he is','he\u2019d': 'he would','he\u2019d\u2019ve': 'he would have','he\u2019ll': 'he will','he\u2019s': 'he is',\n        \"how'd\": 'how did',\"how'll\": 'how will',\"how's\": 'how is','how,d': 'how did','how,ll': 'how will',\n        'how,s': 'how is','how;d': 'how did','how;ll': 'how will','how;s': 'how is','how\u00b4d': 'how did','how\u00b4ll': 'how will',\n        'how\u00b4s': 'how is','how\u2019d': 'how did','how\u2019ll': 'how will','how\u2019s': 'how is',\"i'd\": 'i would',\"i'll\": 'i will',\n        \"i'm\": 'i am',\"i've\": 'i have','i,d': 'i would','i,ll': 'i will','i,m': 'i am','i,ve': 'i have','i;d': 'i would',\n        'i;ll': 'i will','i;m': 'i am','i;ve': 'i have',\"isn't\": 'is not','isn,t': 'is not','isn;t': 'is not',\n        'isn\u00b4t': 'is not','isn\u2019t': 'is not',\"it'd\": 'it would',\"it'll\": 'it will',\"It's\":'it is', \"it's\": 'it is',\n        'it,d': 'it would','it,ll': 'it will','it,s': 'it is','it;d': 'it would','it;ll': 'it will', 'it;s': 'it is',\n        'it\u00b4d': 'it would','it\u00b4ll': 'it will','it\u00b4s': 'it is','it\u2019d': 'it would','it\u2019ll': 'it will','it\u2019s': 'it is',\n        'i\u00b4d': 'i would','i\u00b4ll': 'i will','i\u00b4m': 'i am','i\u00b4ve': 'i have','i\u2019d': 'i would','i\u2019ll': 'i will','i\u2019m': 'i am',\n        'i\u2019ve': 'i have',\"let's\": 'let us','let,s': 'let us','let;s': 'let us','let\u00b4s': 'let us', 'let\u2019s': 'let us',\n        \"ma'am\": 'madam','ma,am': 'madam','ma;am': 'madam',\"mayn't\": 'may not','mayn,t': 'may not', 'mayn;t': 'may not',\n        'mayn\u00b4t': 'may not','mayn\u2019t': 'may not','ma\u00b4am': 'madam','ma\u2019am': 'madam',\"might've\": 'might have',\n        'might,ve': 'might have','might;ve': 'might have',\"mightn't\": 'might not','mightn,t': 'might not',\n        'mightn;t': 'might not','mightn\u00b4t': 'might not', 'mightn\u2019t': 'might not','might\u00b4ve': 'might have',\n        'might\u2019ve': 'might have',\"must've\": 'must have','must,ve': 'must have','must;ve': 'must have',\n        \"mustn't\": 'must not','mustn,t': 'must not','mustn;t': 'must not','mustn\u00b4t': 'must not','mustn\u2019t': 'must not',\n        'must\u00b4ve': 'must have','must\u2019ve': 'must have',\"needn't\": 'need not','needn,t': 'need not','needn;t': 'need not',\n        'needn\u00b4t': 'need not','needn\u2019t': 'need not',\"oughtn't\": 'ought not','oughtn,t': 'ought not','oughtn;t': 'ought not',\n        'oughtn\u00b4t': 'ought not','oughtn\u2019t': 'ought not',\"sha'n't\": 'shall not','sha,n,t': 'shall not','sha;n;t': 'shall not',\n        \"shan't\": 'shall not', 'shan,t': 'shall not','shan;t': 'shall not','shan\u00b4t': 'shall not','shan\u2019t': 'shall not',\n        'sha\u00b4n\u00b4t': 'shall not','sha\u2019n\u2019t': 'shall not',\"she'd\": 'she would',\"she'll\": 'she will',\"she's\": 'she is',\n        'she,d': 'she would','she,ll': 'she will', 'she,s': 'she is','she;d': 'she would','she;ll': 'she will',\n        'she;s': 'she is','she\u00b4d': 'she would','she\u00b4ll': 'she will', 'she\u00b4s': 'she is','she\u2019d': 'she would',\n        'she\u2019ll': 'she will','she\u2019s': 'she is',\"should've\": 'should have','should,ve': 'should have',\n        'should;ve': 'should have', \"shouldn't\": 'should not','shouldn,t': 'should not','shouldn;t': 'should not',\n        'shouldn\u00b4t': 'should not','shouldn\u2019t': 'should not','should\u00b4ve': 'should have', 'should\u2019ve': 'should have',\n        \"that'd\": 'that would',\"that's\": 'that is','that,d': 'that would','that,s': 'that is','that;d': 'that would',\n        'that;s': 'that is','that\u00b4d': 'that would','that\u00b4s': 'that is','that\u2019d': 'that would','that\u2019s': 'that is',\n        \"there'd\": 'there had', \"there's\": 'there is','there,d': 'there had','there,s': 'there is','there;d': 'there had',\n        'there;s': 'there is', 'there\u00b4d': 'there had','there\u00b4s': 'there is','there\u2019d': 'there had','there\u2019s': 'there is',\n        \"they'd\": 'they would',\"they'll\": 'they will',\"they're\": 'they are',\"they've\": 'they have','they,d': 'they would',\n        'they,ll': 'they will','they,re': 'they are','they,ve': 'they have','they;d': 'they would','they;ll': 'they will',\n        'they;re': 'they are', 'they;ve': 'they have','they\u00b4d': 'they would','they\u00b4ll': 'they will','they\u00b4re': 'they are',\n        'they\u00b4ve': 'they have','they\u2019d': 'they would','they\u2019ll': 'they will','they\u2019re': 'they are','they\u2019ve': 'they have',\n        \"wasn't\": 'was not','wasn,t': 'was not','wasn;t': 'was not','wasn\u00b4t': 'was not','wasn\u2019t': 'was not',\n        \"we'd\": 'we would',\"we'll\": 'we will',\"we're\": 'we are',\"we've\": 'we have','we,d': 'we would','we,ll': 'we will',\n        'we,re': 'we are','we,ve': 'we have','we;d': 'we would','we;ll': 'we will','we;re': 'we are','we;ve': 'we have',\n        \"weren't\": 'were not','weren,t': 'were not','weren;t': 'were not','weren\u00b4t': 'were not','weren\u2019t': 'were not',\n        'we\u00b4d': 'we would','we\u00b4ll': 'we will',    'we\u00b4re': 'we are','we\u00b4ve': 'we have','we\u2019d': 'we would',\n        'we\u2019ll': 'we will','we\u2019re': 'we are','we\u2019ve': 'we have',\"what'll\": 'what will',\"what're\": 'what are',\n        \"what's\": 'what is',    \"what've\": 'what have','what,ll': 'what will','what,re': 'what are','what,s': 'what is',\n        'what,ve': 'what have','what;ll': 'what will','what;re': 'what are','what;s': 'what is','what;ve': 'what have',\n        'what\u00b4ll': 'what will', 'what\u00b4re': 'what are','what\u00b4s': 'what is','what\u00b4ve': 'what have','what\u2019ll': 'what will',\n        'what\u2019re': 'what are','what\u2019s': 'what is', 'what\u2019ve': 'what have',\"where'd\": 'where did',\"where's\": 'where is',\n        'where,d': 'where did','where,s': 'where is','where;d': 'where did','where;s': 'where is','where\u00b4d': 'where did',\n        'where\u00b4s': 'where is','where\u2019d': 'where did','where\u2019s': 'where is', \"who'll\": 'who will',\"who's\": 'who is',\n        'who,ll': 'who will','who,s': 'who is','who;ll': 'who will','who;s': 'who is','who\u00b4ll': 'who will','who\u00b4s': 'who is',\n        'who\u2019ll': 'who will','who\u2019s': 'who is',\"won't\": 'will not','won,t': 'will not','won;t': 'will not',\n        'won\u00b4t': 'will not','won\u2019t': 'will not',\"wouldn't\": 'would not','wouldn,t': 'would not','wouldn;t': 'would not',\n        'wouldn\u00b4t': 'would not','wouldn\u2019t': 'would not',\"you'd\": 'you would',\"you'll\": 'you will',\"you're\": 'you are',\n        'you,d': 'you would','you,ll': 'you will', 'you,re': 'you are','you;d': 'you would','you;ll': 'you will',\n        'you;re': 'you are','you\u00b4d': 'you would','you\u00b4ll': 'you will','you\u00b4re': 'you are','you\u2019d': 'you would',\n        'you\u2019ll': 'you will','you\u2019re': 'you are','\u00b4cause': 'because','\u2019cause': 'because',\"you've\": \"you have\",\n        \"could'nt\": 'could not',\"havn't\": 'have not',\"here\u2019s\": \"here is\",'i\"\"m': 'i am',\"i'am\": 'i am',\"i'l\": \"i will\",\n        \"i'v\": 'i have',\"wan't\": 'want',\"was'nt\": \"was not\",\"who'd\": \"who would\",\"who're\": \"who are\",\"who've\": \"who have\",\n        \"why'd\": \"why would\",\"would've\": \"would have\",\"y'all\": \"you all\",\"y'know\": \"you know\",\"you.i\": \"you i\",\n        \"your'e\": \"you are\",\"arn't\": \"are not\",\"agains't\": \"against\",\"c'mon\": \"common\",\"doens't\": \"does not\",\n        'don\"\"t': \"do not\",\"dosen't\": \"does not\", \"dosn't\": \"does not\",\"shoudn't\": \"should not\",\"that'll\": \"that will\",\n        \"there'll\": \"there will\",\"there're\": \"there are\", \"this'll\": \"this all\",\" u're\": \" you are\", \"ya'll\": \"you all\",\n        \"you'r \": \"you are \",\"you\u2019ve\": \"you have\",\"d'int\": \"did not\",\"did'nt\": \"did not\",\"din't\": \"did not\",\n        \"dont't\": \"do not\",\"gov't\": \"government\",\"i'ma\": \"i am\",\"is'nt\": \"is not\",\"\u2018i\":'i',  \":)\": ' smile ',\n        \":-)\": ' smile ','\u2026':'...', '\ud83d\ude09': ' wink ', '\ud83d\ude02': ' joy ', '\ud83d\ude00': ' stuck out tongue ',  \n         }\n\n    dirty_dict = {      \n                        re.compile( '[^a-zA-Z][uU] of [oO][^a-zA-Z]'): ' you of all ',\n                        re.compile('[wW][hH][^a-zA-Z ][^a-zA-Z ][eE]'):'whore' ,                  #  wh**e\n                        re.compile('[wW][hH][^a-zA-Z ][rR][eE]'):'whore',                         #  wh*re   \n                        re.compile('[wW][^a-zA-Z ][oO][rR][eE]'):'whore',                         #  w*ore  \n                        '[wW] h o r e':'whore',\n                      #  re.compile('[sS][hH][^a-zA-Z ][tT] '):'shit ',                         #   sh*t_\n                        re.compile(' [sS][hH][^a-zA-Z ][tT]'):' shit',                         #   _sh*t\n                        re.compile('[sS][hH][*_x][tT] '):'shit ',                            #   sh*t\n                        re.compile(' [sS][^a-zA-Z ][^a-zA-Z ][tT]'):' shit',                   #   _s**t\n                      #  re.compile('[sS][^a-zA-Z ][^a-zA-Z ][tT] '):'shit ',                   #   s**t_\n                        re.compile('[sS][-*_x][-*_x][tT] '):'shit ',                      #   s**t\n                      #  re.compile('[sS][hH][^a-zA-Z ][^a-zA-Z ] '):'shit ',                    #   sh**_ \n                        re.compile(' [sS][hH][^a-zA-Z ][^a-zA-Z ]'):' shit',                     #   _sh** \n                      #  re.compile('[sS][^a-zA-Z ][iI][tT] '):'shit ',                         #   s*it_   \n                        re.compile(' [sS][^a-zA-Z ][iI][tT]'):' shit',                         #   _s*it \n                        re.compile('[sS][-*_x][iI][tT] '):'shit ',                            #   shit\n                        '[sS] h i t':'shit','5h1t': 'shit',\n                        re.compile(' [fF][^a-zA-Z ][^a-zA-Z ][kK]'):' fuck',                   #   _f**k\n                        re.compile('[fF][^a-zA-Z ][^a-zA-Z ][kK] '):'fuck ',                   #   f**k_\n                        re.compile('[fF][-*_x][-*_x][kK]'):'fuck',                       #   f**k\n                        re.compile(' [fF][^a-zA-Z ][cC][kK]'):' fuck',                         #   _f*ck\n                        re.compile('[fF][^a-zA-Z ][cC][kK] '):'fuck ',                         #   f*ck_\n                        re.compile('[fF][-*_x][cC][kK]'):'fuck',                            #   f*ck\n                        re.compile(' [fF][uU][^a-zA-Z ][kK]'):' fuck',                         #   _fu*k\n                        re.compile('[fF][uU][^a-zA-Z ][kK] '):'fuck ',                         #   fu*k_\n                        re.compile('[fF][uU][-*_x][kK]'):'fuck',                            #   fu*k\n                        '[pP]huk': 'fuck','[pP]huck': 'fuck','[fF]ukk':'fuck','[fF] u c k':'fuck',\n                        '[fF]cuk': 'fuck',' [fF]uks': ' fucks',              \n                        re.compile(' [dD][^a-zA-Z ][^a-zA-Z ][kK]'):' dick',                   #   _d**k\n                        re.compile('[dD][^a-zA-Z ][^a-zA-Z ][kK] '):'dick ',                   #   d**k_\n                        re.compile('[dD][-*_x][-*_x][kK]'):'dick',                       #   d**k\n                        re.compile(' [dD][^a-zA-Z ][cC][kK]'):' dick',                         #   _d*ck\n                        re.compile('[dD][^a-zA-Z ][cC][kK] '):'dick ',                         #   d*ck_\n                        re.compile('[dD][-*_x][cC][kK]'):'dick',                            #   d*ck\n                        re.compile(' [dD][iI][^a-zA-Z ][kK]'):' dick',                         #   _di*k\n                        re.compile('[dD][iI][^a-zA-Z ][kK] '):'dick ',                         #   di*k_\n                        re.compile('[dD][iI][-*_x][kK]'):'dick',                            #   di*k\n\n                        re.compile(' [sS][^a-zA-Z ][cC][kK]'):' suck',                         #   _s*ck\n                        re.compile('[sS][^a-zA-Z ][cC][kK] '):'suck ',                         #   s*ck_\n                        re.compile('[sS][-*_x][cC][kK]'):'suck',                            #   s*ck\n                        re.compile(' [sS][uU][^a-zA-Z ][kK]'):' suck',                         #   _su*k\n                        re.compile('[sS][uU][^a-zA-Z ][kK] '):'suck ',                         #   su*k_\n                        re.compile('[sS][uU][-*_x][kK]'):'suck',                            #   su*k\n\n                        re.compile(' [cC][^a-zA-Z ][nN][tT]'):' cunt',                         #   _c*nt\n                        re.compile('[cC][^a-zA-Z ][nN][tT] '):'cunt ',                         #   c*nt_\n                        re.compile('[cC][-*_x][nN][tT]'):'cunt',                            #   c*nt\n                        re.compile(' [cC][uU][^a-zA-Z ][tT]'):' cunt',                         #   _cu*t\n                        re.compile('[cC][uU][^a-zA-Z ][tT] '):'cunt ',                         #   cu*t_\n                        re.compile('[cC][uU][-*_x][tT]'):'cunt',                            #   cu*t\n\n                        re.compile(' [bB][^a-zA-Z ][tT][cC][hH]'):' bitch',                       #   _b*tch\n                        re.compile('[bB][^a-zA-Z ][tT][cC][hH] '):'bitch ',                       #   b*tch_\n                        re.compile('[bB][-*_x][tT][cC][hH]'):'bitch',                          #   b*tch\n                        re.compile(' [bB][iI][^a-zA-Z ][cC][hH]'):' bitch',                       #   _bi*ch\n                        re.compile('[bB][iI][^a-zA-Z ][cC][hH] '):'bitch ',                       #   bi*ch_\n                        re.compile('[bB][iI][-*_x][cC][hH]'):'bitch',                          #   bi*ch\n                        re.compile(' [bB][iI][tT][^a-zA-Z ][hH]'):' bitch',                       #   _bit*h\n                        re.compile('[bB][iI][tT][^a-zA-Z ][hH]'):'bitch ',                       #   bit*h_\n                        re.compile('[bB][iI][tT][-*_x][hH]'):'bitch',                          #   bit*h\n                        re.compile('[bB][^a-zA-Z ][tT][^a-zA-Z ][hH]'):'bitch',                   #   b*t*h\n                        'b[-*_x][-*_x][-*_x]h':'bitch',                                          #   b***h\n                        '[bB] i t c h':'bitch',\n                        re.compile('[aA][*_]s'):'ass',                                #   a*s\n                        re.compile('[aA][^a-zA-Z ][^a-zA-Z ][hH][oO][lL][eE]'):'asshole',               #   a**hole\n                        re.compile(' [aA][^a-zA-Z ][^a-zA-Z ][hH]'):' assh',                   #   a**h\n                        re.compile('[aA][^a-zA-Z ][sS][hH][oO][lL][eE]'):'asshole',                     #   a*shole\n                        re.compile('[aA][sS][^a-zA-Z ][hH][oO][lL][eE]'):'asshole',                     #   as*hole\n                        ' [aA]s[*]':' ass','[aA] s s': 'ass ','[aA]sswhole': 'ass hole',\n                        re.compile('[aA]ssh[^a-zA-Z ]le'):'asshole',                     #   assh*le\n                        '[hH] o l e':'hole',\n                        '[bB][*]ll': 'bull', \n                        re.compile('[pP][^a-zA-Z ][sS][sS][yY]'):' pussy',                         #   p*ssy\n                        re.compile('[pP][uU][^a-zA-Z ][sS][yY]'):' pussy',                         #   pu*sy\n                        re.compile('[pP][uU][sS][^a-zA-Z ][yY]'):' pussy',                         #   pus*y\n                        re.compile('[pP][uU][^a-zA-Z ][^a-zA-Z ][yY]'):' pussy',                   #   pu**y\n                        re.compile('[pP][^a-zA-Z ][^a-zA-Z ][sS][yY]'):' pussy',                   #   p**sy\n                        re.compile(' [pP][^a-zA-Z ][^a-zA-Z ][^a-zA-Z ][yY]'):' pussy',            #   _pussy\n                        '[pP]ussi': 'pussy', '[pP]ussies': 'pussy','[pP]ussys': 'pussy', \n                        '[jJ]ack[-]off': 'jerk off','[mM]asterbat[*]': 'masterbate','[gG]od[-]dam': 'god damm',\n\n              }\n\n\n    new_final_mapping = { 'jackoff': 'jerk off','jerkoff':'jerk off','bestial': 'beastial',\n                         'bestiality': 'beastiality', 'd1ck': 'dick', 'lmfao': 'laughing my fucking ass off',\n                          'masturbate': 'masterbate', 'cashap24':'cash app','nurnie':'pussy',\n                         'n1gger': 'nigger', 'nigga': 'nigger', 'niggas': 'niggers',\n                         'clickbait':'click with bait','yuge':'huge','outsider77':'outsider',\n                         'numbnuts': 'noob nuts', 'orgasms': 'orgasm', 'trudope':'the prime minister of canada',\n                          'daesh':'isis', \"qur'an\":'the central religious text of islam','gofundme':'go fund me',\n                         'finicum':'an american spokesman','trumpkins':'trump with pumpkin',\n                           'trumpcare':'trump health care','obamacare':'obama health care','trumpy':'trump',\n                          'trumpster': 'trump supporter','trumper': 'trump supporter','trumpettes':'trump',\n                         'realdonaldtrump':'real donald trump','trumpeteer[s]?':'trump supporter',\n                          'trumpian':'trump supporter','trumpism':'trump supporter',\"trump[']s\" : 'trump',\n                         'trumplethinskin':'trump','trumpo':'trump','trumpies':'trump',\n                          'kim jong([- ]?un)?': 'the president of north korea','cheetolini':'trump',\n                          'trumpland':'trump land','trumpty':'trump','trumpist[s]?':'trump supporter',\n                          ' brotherin ':' brother ', 'beyak':'canadian politician',\n                          'trudeaus':'prime minister of canada ','shibai':'failure',\n                          'tridentinus':'tridentinum','zupta[s]?':'the south african president',\n                           'putrumpski':'putin and trump supporter','twitler':'twitter user',\n                           'antisemitic': 'anti semitic', 'sb91':'senate bill', \n                            'utmterm':' utm term','fakenews':'fake news',  'thedonald':'the donald',               \n                            'washingtontimes':'washington times','garycrum':'gary crum',\n                            'rangermc':'car','tfws':'tuition fee waiver','sjw?':'social justice warrior',\n                            'koncerned':'concerned','vinis':'vinys','Y\u1d0f\u1d1c':'you', 'auwe': 'oh no',\n                            'bigly':'big league','drump[f]?':'trump','brexit':'british exit',\n                            'utilitas':'utilities','justiciaries': 'justiciary','doctrne':'doctrine',\n                           'deplorables': 'deplorable','conartist' : 'con-artist','pizzagate':'pizza gate',\n                           'theglobeandmail': 'the globe and mail', 'howhat': 'how that', ' coz ':' because ',\n                           'civilbeat':'civil beat','gubmit':'submit','financialpost':'financial post',               \n                           'theguardian': 'the guardian','shopo':'shop','fentayal': 'fentanyl',\n                         'designation-': 'designation ','mutilitated' : 'mutilated','dood-': 'dood ',\n                         'irakis' : 'iraki', 'supporter[a-z]?':'supporter',' u ':' you ', \n                        }\n\n\n    def pre_clean_abbr_words(x, dic = abbr_mapping):\n        for word in dic.keys():\n            if word in x:\n                x = x.replace(word, dic[word])\n        return x\n\n    def correct_contraction(x, dic = contraction_mapping):\n        for word in dic.keys():\n            if word in x:\n                x = x.replace(word, dic[word])\n        return x\n\n\n    def clean_dirty_dict(x, dic = dirty_dict):\n        for word in dic.keys():\n            x = re.sub(word, dic[word],x)\n        return x  \n\n\n\n\n    def handle_punctuation(x):\n        x = x.translate(remove_dict)\n        x = x.translate(isolate_dict)\n        return x\n\n\n    def spacing_punctuation(text): ##clear puncts\n        for punc in new_puncts:\n            if punc in text:\n                text = text.replace(punc, ' ')\n        return text\n\n    '''  \n    def final_contraction(x, dic = final_mapping):\n        for word in dic.keys():\n            if word in x:\n                x = x.replace(word, dic[word])\n        return x\n    '''\n\n    def new_final_contraction(x, dic = new_final_mapping):\n        for word in dic.keys():\n            x = re.sub(word, dic[word],x)\n        return x  \n    def preprocess(df_comment):\n\n        # lower\n        # clean misspellings\n        df_comment = df_comment.str.lower()\n        df_comment = df_comment.str.replace('[\\'\\\"\\(\\[\\:]?https?:?\/\/[!-z]+',' ')\n        df_comment = df_comment.str.replace('[\\'\\\"\\(\\[\\:]?www[.][!-z]+',' ')\n        df_comment = df_comment.apply(pre_clean_abbr_words)\n        df_comment = df_comment.apply(correct_contraction) \n        df_comment = df_comment.apply(clean_dirty_dict)\n\n        # clean the text\n    #    df_comment = df_comment.apply(spacing_punctuation)\n        df_comment = df_comment.apply(lambda x:handle_punctuation(x))\n        df_comment = df_comment.apply(new_final_contraction)\n\n        return df_comment\n    \n    \n    \n    ## firstlarge models\n    \n    print('bert_large_uncased_wwm')\n    BERT_PRETRAINED_DIR = '..\/input\/bertprototype\/wwm_uncased_l-24_h-1024_a-16\/wwm_uncased_L-24_H-1024_A-16' \n    print('***** BERT pretrained directory: {} *****'.format(BERT_PRETRAINED_DIR))\n    config_file = os.path.join(BERT_PRETRAINED_DIR, 'bert_config.json')\n    checkpoint_file = os.path.join(BERT_PRETRAINED_DIR, 'bert_model.ckpt')\n    dict_path = os.path.join(BERT_PRETRAINED_DIR, 'vocab.txt')  \n    tokenizer = tokenization.FullTokenizer(vocab_file=dict_path, do_lower_case=True)\n    print('build tokenizer uncased done')\n    modelb = load_trained_model_from_checkpoint(config_file,training=True,seq_len=maxlen)\n    \n    sequence_outputb  = modelb.layers[-6].output\n    pool_outputb = Dense(1, activation='sigmoid',kernel_initializer=keras.initializers.TruncatedNormal(stddev=0.02),name = 'real_output')(sequence_outputb)\n    aux_outputb = Dense(6,activation='sigmoid',name = 'aux_output')(sequence_outputb)\n    model2  = Model(inputs=modelb.input, outputs=[pool_outputb,aux_outputb])\n    #model2.compile(optimizer=adamwarm,loss='mse')\n    \n    model2.load_weights('..\/input\/jul2995365ep2bertlarge\/95365ep2bertlarge.h5')\n    print('load ba models new')\n    eval_lines = (preprocess(test_df['comment_text'])).values\n    token_input2 = convert_lines(eval_lines,maxlen,tokenizer)\n    seg_input2 = np.zeros((token_input2.shape[0],maxlen))\n    mask_input2 = np.ones((token_input2.shape[0],maxlen))\n    hehe_model4 = (model2.predict([token_input2, seg_input2,mask_input2],verbose=1,batch_size=256))[0]#\n    print('bertlarge_wwm_uncased',hehe_model4[:5])\n    submission = pd.DataFrame.from_dict({\n    'id': test_df['id'],\n    'prediction': hehe_model4.flatten()\n    })\n    submission.to_csv('submission_bertlarge.csv', index=False)\n    \n    \n    ##then base uncased models\n    \n    print('bert_based_uncased')\n    BERT_PRETRAINED_DIR = '..\/input\/bertprototype\/uncased_l-12_h-768_a-12\/uncased_L-12_H-768_A-12\/' \n    print('***** BERT pretrained directory: {} *****'.format(BERT_PRETRAINED_DIR))\n    config_file = os.path.join(BERT_PRETRAINED_DIR, 'bert_config.json')\n    #checkpoint_file = os.path.join(BERT_PRETRAINED_DIR, 'bert_model.ckpt')\n    #dict_path = os.path.join(BERT_PRETRAINED_DIR, 'vocab.txt')  \n    #tokenizer = tokenization.FullTokenizer(vocab_file=dict_path, do_lower_case=True)\n    print('build tokenizer uncased done')\n    modelb = load_trained_model_from_checkpoint(config_file,training=True,seq_len=maxlen)\n    \n    sequence_outputb  = modelb.layers[-6].output\n    pool_outputb = Dense(1, activation='sigmoid',kernel_initializer=keras.initializers.TruncatedNormal(stddev=0.02),name = 'real_output')(sequence_outputb)\n    aux_outputb = Dense(6,activation='sigmoid',name = 'aux_output')(sequence_outputb)\n    model2  = Model(inputs=modelb.input, outputs=[pool_outputb,aux_outputb])\n    #model2.compile(optimizer=adamwarm,loss='mse')\n    ##low\n    model2.load_weights('..\/input\/final-model-group2\/bertuncasedbase_pre_220_95175_ep2.h5')\n    print('load bert base uncased models low')\n    hehe_model4 = (model2.predict([token_input2, seg_input2,mask_input2],verbose=1,batch_size=256))[0]#\n    print('bertbase_uncased_low',hehe_model4[:5])\n    submission = pd.DataFrame.from_dict({\n    'id': test_df['id'],\n    'prediction': hehe_model4.flatten()\n    })\n    submission.to_csv('submission_bertbase_low.csv', index=False)\n    \n    ##high\n    model2.load_weights('..\/input\/95282bertbaseuncased\/95282bertbaseuncased.h5')\n    print('load bert base uncased models high')\n    hehe_model4 = (model2.predict([token_input2, seg_input2,mask_input2],verbose=1,batch_size=256))[0]#\n    print('bertbase_uncased_high',hehe_model4[:5])\n    submission = pd.DataFrame.from_dict({\n    'id': test_df['id'],\n    'prediction': hehe_model4.flatten()\n    })\n    submission.to_csv('submission_bertbase_high.csv', index=False)\n    \n    \n    ##last base cased models\n    ##first def preprocessing\n    symbols_to_delete = '\u2192\u2605\u00a9\u00ae\u25cf\u02d0\u2606\u00b6\uff09\u0438\u02bf\u3002\ufb02\ufb01\u2081\u266d\u5e74\u25aa\u2190\u0292\u3001\uff08\u6708\u25a0\u21cc\u0279\u02e4\u00b3\u306e\u00a4\u203f\u0639\u062f\u0648\u064a\u0647\u0635\u0642\u0646\u0627\u062e\u0644\u0649\u0628\u0645\u063a\u0631\u0280\u0274\u05e9\u05dc\u05d5\u05dd\u05d1\u05d9\u30a8\u30f3\u1d35\u05d0\u05e2\u05db\u05d7\u2010\u03b9\u03ba\u03be\u062a\u062d\u0643\u0633\u0629\u0641\u0632\u0637\u2011\u5730\u8c37\u0443\u043b\u043a\u043d\u043e\u05d4\u6b4c\u043c\u03c5\u0442\u044d\u043f\u0440\u0434\u02e2\u1d52\u02b3\u02b8\u1d3a\u02b7\u1d57\u02b0\u1d49\u1d58\u03bf\u03c2\u05ea\u05de\u05d3\u05e3\u05e0\u05e8\u05da\u05e6\u05d8\u6210\u90fd\u0435\u0445\u5c0f\u571f\u300b\u0915\u0930\u092e\u093e\u82f1\u6587\u30ec\u30af\u30b5\u30b9\u5916\u56fd\u4eba\u0431\u044c\u044b\u0433\u044f\u4e0d\u3064\u0437\u0446\u4f1a\u4e0b\u6709\u7684\u52a0\u5927\u5b50\u30c4\u0634\u0621\u02b2\u0448\u0447\u044e\u0436\u6226\u0449\u660e\u05e7\u0459\u045b\u6211\u51fa\u751f\u5929\u4e00\u5bb6\u65b0\u0281\u057d\u0570\u05df\u062c\u0456\u2012\u516c\u7f8e\u963f\u05e1\u05e4\u767d\u30de\u30eb\u30cf\u30cb\u30c1\u30ed\u793e\u03b6\u548c\u4e2d\u6cd5\u672c\u58eb\u76f8\u4fe1\u653f\u6cbb\u5802\u7248\u3063\u0444\u0686\u06cc\u30ea\u4e8b\u300c\u300d\u30b7\u03c7\u03c8\u0574\u0565\u0561\u0575\u056b\u0576\u0580\u0582\u0564\u06a9\u300a\u10da\u3055\u3088\u3046\u306a\u3089\u0639\u062f\u0648\u064a\u0647\u0635\u0642\u0646\u0627\u062e\u0644\u0649\u0628\u0645\u063a\u0631\u0280\u0274\u05e9\u05dc\u05d5\u05dd\u05d1\u05d9\u30a8\u30f3\u1d35\u05d0\u05e2\u05db\u05d7\u2010\u03b9\u03ba\u03be\u062a\u062d\u0643\u0633\u0629\u0641\u0632\u0637\u2011\u5730\u8c37\u0443\u043b\u043a\u043d\u043e\u05d4\u6b4c\u043c\u03c5\u0442\u044d\u043f\u0440\u0434\u02e2\u1d52\u02b3\u02b8\u1d3a\u02b7\u1d57\u02b0\u1d49\u1d58\u03bf\u03c2\u05ea\u05de\u05d3\u05e3\u05e0\u05e8\u05da\u05e6\u05d8\u6210\u90fd\u0435\u0445\u5c0f\u571f\u300b\u0915\u0930\u092e\u093e\u82f1\u6587\u30ec\u30af\u30b5\u30b9\u5916\u56fd\u4eba\u0431\u044c\u044b\u0433\u044f\u4e0d\u3064\u0437\u0446\u4f1a\u4e0b\u6709\u7684\u52a0\u5927\u5b50\u30c4\u0634\u0621\u02b2\u0448\u0447\u044e\u0436\u6226\u0449\u660e\u05e7\u0459\u045b\u6211\u51fa\u751f\u5929\u4e00\u5bb6\u65b0\u0281\u057d\u0570\u05df\u062c\u0456\u2012\u516c\u7f8e\u963f\u05e1\u05e4\u767d\u30de\u30eb\u30cf\u30cb\u30c1\u30ed\u793e\u03b6\u548c\u4e2d\u6cd5\u672c\u58eb\u76f8\u4fe1\u653f\u6cbb\u5802\u7248\u3063\u0444\u0686\u06cc\u30ea\u4e8b\u300c\u300d\u30b7\u03c7\u03c8\u0574\u0565\u0561\u0575\u056b\u0576\u0580\u0582\u0564\u06a9\u300a\u10da\u3055\u3088\u3046\u306a\u3089\\n\uff3c\ud83c\udf55\\r\ud83d\udc35\ud83d\ude11\\xa0\\ue014\u2260\\t\\uf818\\uf04a\\xad\ud83d\ude22\ud83d\udc36\u2764\ufe0f\u263a\\uf0e0\ud83d\ude1c\ud83d\ude0e\ud83d\udc4a\\u200b\\u200e\ud83d\ude01\u0623\ud83d\ude0d\ud83d\udc96\u0336\ud83d\udcb5\u2765\u2501\u2523\u252b\u0415\u2517\uff2f\u25ba\ud83d\udc4e\ud83d\ude00\ud83d\ude02\\u202a\\u202c\ud83d\udd25\ud83d\ude04\ud83c\udffb\ud83d\udca5\u1d0d\u028f\u1d07\u1d05\u1d0f\u1d00\u1d0b\u029c\u1d1c\u029f\u1d1b\u1d04\u1d18\u0299\u0493\u1d0a\u1d21\u0262\u2714\\x96\\x92\ud83d\ude0b\ud83d\udc4f\ud83d\ude31\u203c\\x81\u30b8\u6545\u969c\u27a4\\u2009\ud83d\ude8c\u035e\ud83c\udf1f\ud83d\ude0a\ud83d\ude33\ud83d\ude27\ud83d\ude40\ud83d\ude10\ud83d\ude15\\u200f\ud83d\udc4d\ud83d\ude2e\ud83d\ude03\ud83d\ude18\u2615\u2661\u25d0\u2551\u25ac\ud83d\udca9\ud83d\udcaf\u26fd\ud83d\ude84\ud83c\udffc\u0b9c\u06e9\u06de\ud83d\ude16\u1d20\ud83d\udeb2\u2712\u27a5\ud83d\ude1f\ud83d\ude08\u2550\u02cc\ud83d\udcaa\ud83d\ude4f\ud83c\udfaf\u25c4\ud83c\udf39\ud83d\ude07\ud83d\udc94\ud83d\ude21\\x7f\ud83d\udc4c\u1f10\u1f76\u03ae\u1f72\u1f00\u03af\u1fc3\u1f34\ud83d\ude44\u272c\uff33\uff35\uff30\uff25\uff32\uff28\uff29\uff34\ud83d\ude20\\ufeff\u263b\\u2028\ud83d\ude09\ud83d\ude24\u26fa\u264d\ud83d\ude42\\u3000\ud83d\udc6e\ud83d\udc99\ud83d\ude0f\ud83c\udf7e\ud83c\udf89\ud83d\ude1e\\u2008\ud83c\udffe\ud83d\ude05\ud83d\ude2d\ud83d\udc7b\ud83d\ude25\ud83d\ude14\ud83d\ude13\ud83c\udffd\ud83c\udf86\u2713\u25fe\ud83c\udf7b\ud83c\udf7d\ud83c\udfb6\ud83c\udf3a\ud83e\udd14\ud83d\ude2a\\x08\u061f\ud83d\udc30\ud83d\udc07\ud83d\udc31\ud83d\ude46\ud83d\ude28\u2b05\ud83d\ude43\ud83d\udc95\ud835\ude0a\ud835\ude26\ud835\ude33\ud835\ude22\ud835\ude35\ud835\ude30\ud835\ude24\ud835\ude3a\ud835\ude34\ud835\ude2a\ud835\ude27\ud835\ude2e\ud835\ude23\ud83d\udc97\ud83d\udc9a\u7344\u2105\u0412\u041f\u0410\u041d\ud83d\udc3e\ud83d\udc15\u2763\ud83d\ude06\ud83d\udd17\ud83d\udebd\u821e\u4f0e\ud83d\ude48\ud83d\ude34\ud83c\udfff\ud83e\udd17\ud83c\uddfa\ud83c\uddf8\u266b\u0455\uff23\uff2d\u2935\ud83c\udfc6\ud83c\udf83\ud83d\ude29\u2588\u2593\u2592\u2591\\u200a\ud83c\udf20\ud83d\udc1f\ud83d\udcab\ud83d\udcb0\ud83d\udc8e\\x95\ud83d\udd90\ud83d\ude45\u26f2\ud83c\udf70\u2b50\ud83e\udd10\ud83d\udc46\ud83d\ude4c\\u2002\ud83d\udc9b\ud83d\ude41\ud83d\udc40\ud83d\ude4a\ud83d\ude49\\u2004\u2767\u25b0\u2594\u1d3c\u1d37\u25de\u2580\\x13\ud83d\udeac\u2582\u2583\u2584\u2585\u2586\u2587\u2199\ud83e\udd13\\ue602\ud83d\ude35\u03ac\u03cc\u03ad\u1f78\u0304\ud83d\ude12\u035d\u2639\u27a1\ud83c\udd95\ud83d\udc45\ud83d\udc65\ud83d\udc44\ud83d\udd04\ud83d\udd24\ud83d\udc49\ud83d\udc64\ud83d\udc76\ud83d\udc72\ud83d\udd1b\ud83c\udf93\\uf0b7\u270b\\uf04c\\x9f\\x10\ud83d\ude23\u23fa\u0332\u0305\ud83d\ude0c\ud83e\udd11\u0301\ud83c\udf0f\ud83d\ude2f\ud83d\ude32\u2219\u201b\u1f38\u1fb6\u1f41\ud83d\udc9e\ud83d\ude93\u25c7\ud83d\udd14\ud83d\udcda\u270f\ud83c\udfc0\ud83d\udc50\\u202d\ud83d\udca4\ud83c\udf47\\ue613\u8c46\ud83c\udfe1\u25b7\u2754\u2753\u2049\u2757\\u202f\ud83d\udc60\u094d\ud83c\uddf9\ud83c\uddfc\ud83c\udf38\u8521\ud83c\udf1e\u02da\ud83c\udfb2\ud83d\ude1b\u02d9\u5173\u7cfb\u0421\ud83d\udc8b\ud83d\udc80\ud83c\udf84\ud83d\udc9c\ud83e\udd22\u0650\u064e\u2728\u662f\\x80\\x9c\\x9d\ud83d\uddd1\\u2005\ud83d\udc83\ud83d\udce3\ud83d\udc7f\u0f3c\u25d5\u0f3d\ud83d\ude30\u1e37\u0417\u25b1\ufffc\ud83e\udd23\u5356\u6e29\u54e5\u534e\u8bae\u964d\uff05\u4f60\u5931\u53bb\u6240\u94b1\u62ff\u574f\u7a0e\u9a97\ud83d\udc1d\u00af\ud83c\udf85\\x85\ud83c\udf7a\u0622\u0625\ud83c\udfb5\ud83c\udf0e\u035f\u1f14\u6cb9\u522b\u514b\ud83e\udd21\ud83e\udd25\ud83d\ude2c\ud83e\udd27\u0439\\u2003\ud83d\ude80\ud83e\udd34\u2320\u0418\u041e\u0420\u0424\u0414\u042f\u041c\u2718\ud83d\ude1d\ud83d\udd91\u1f50\u1f7b\u03cd\u7279\u6b8a\u4f5c\u7fa4\u256a\ud83d\udca8\u5706\u56ed\u25b6\u2110\u262d\u272d\ud83c\udfc8\ud83d\ude3a\u266a\ud83c\udf0d\u23cf\u1ec7\ud83c\udf54\ud83d\udc2e\ud83c\udf41\u2614\ud83c\udf46\ud83c\udf51\ud83c\udf2e\ud83c\udf2f\u2620\ud83e\udd26\\u200d\u2642\ud835\udcd2\ud835\udcf2\ud835\udcff\ud835\udcf5\uc548\uc601\ud558\uc138\uc694\u0416\u041a\ud83c\udf40\ud83d\ude2b\ud83e\udd24\u1fe6\u5728\u4e86\u53ef\u4ee5\u8bf4\u666e\u901a\u8bdd\u6c49\u8bed\u597d\u6781\ud83c\udfbc\ud83d\udd7a\u2603\ud83c\udf78\ud83e\udd42\ud83d\uddfd\ud83c\udf87\ud83c\udf8a\ud83c\udd98\u260e\ud83e\udd20\ud83d\udc69\u2708\ud83d\udd92\u270c\u2730\u2746\u2619\ud83d\udeaa\u26b2\\u2006\u26ad\u2686\u2b2d\u2b2f\u23d6\u25cb\u2023\u2693\u220e\u2112\u2599\u260f\u215b\u2700\u254c\ud83c\uddeb\ud83c\uddf7\ud83c\udde9\ud83c\uddea\ud83c\uddee\ud83c\uddec\ud83c\udde7\ud83d\ude37\ud83c\udde8\ud83c\udde6\u0425\u0428\ud83c\udf10\\x1f\u6740\u9e21\u7ed9\u7334\u770b\ud835\uddea\ud835\uddf5\ud835\uddf2\ud835\uddfb\ud835\ude06\ud835\uddfc\ud835\ude02\ud835\uddff\ud835\uddee\ud835\uddf9\ud835\uddf6\ud835\ude07\ud835\uddef\ud835\ude01\ud835\uddf0\ud835\ude00\ud835\ude05\ud835\uddfd\ud835\ude04\ud835\uddf1\ud83d\udcfa\uff43\u03d6\\u2000\u04af\uff41\u1d26\u13a5\u04bb\u037a\\u2007\uff53\u01c0\\u2001\u0269\u212e\uff59\uff45\u0d66\uff4c\u01bd\u00b8\uff57\uff48\ud835\udc13\ud835\udc21\ud835\udc1e\ud835\udc2b\ud835\udc2e\ud835\udc1d\ud835\udc1a\ud835\udc03\ud835\udc1c\ud835\udc29\ud835\udc2d\ud835\udc22\ud835\udc28\ud835\udc27\u0184\u1d28\u146f\u0ed0\u03a4\u13e7\u0be6\u0406\u1d11\u0701\ud835\udc2c\ud835\udc30\ud835\udc32\ud835\udc1b\ud835\udc26\ud835\udc2f\ud835\udc11\ud835\udc19\ud835\udc23\ud835\udc07\ud835\udc02\ud835\udc18\ud835\udfce\u051c\u0422\u15de\u0c66\u3014\u13ab\ud835\udc33\ud835\udc14\ud835\udc31\ud835\udfd4\ud835\udfd3\ud835\udc05\ud83d\udc0b\u223c\ufb03\ud83d\udc98\ud83d\udc93\u0451\ud835\ude25\ud835\ude2f\ud835\ude36\ud83d\udc90\ud83c\udf0b\ud83c\udf04\ud83c\udf05\ud835\ude6c\ud835\ude56\ud835\ude68\ud835\ude64\ud835\ude63\ud835\ude61\ud835\ude6e\ud835\ude58\ud835\ude60\ud835\ude5a\ud835\ude59\ud835\ude5c\ud835\ude67\ud835\ude65\ud835\ude69\ud835\ude6a\ud835\ude57\ud835\ude5e\ud835\ude5d\ud835\ude5b\ud83d\udc7a\ud83d\udc37\u210b\u2133\ud835\udc00\ud835\udc25\ud835\udc2a\u2744\ud83d\udeb6\ud835\ude62\u1f39\ud83e\udd18\u0366\ud83d\udcb8\u263c\ud328\ud2f0\uff37\u22c6\ud835\ude47\u1d7b\ud83d\udc42\ud83d\udc43\u025c\ud83c\udfab\\uf0a7\u0411\u0423\ud83d\udea2\ud83d\ude82\u0a97\u0ac1\u0a9c\u0ab0\u0abe\u0aa4\u0ac0\u1fc6\ud83c\udfc3\ud835\udcec\ud835\udcfb\ud835\udcf4\ud835\udcee\ud835\udcfd\ud835\udcfc\u2618\ufd3e\u0361\u0e4f\u032f\ufd3f\u26be\u26bd\u03a6\u20bd\\ue807\ud835\udc7b\ud835\udc86\ud835\udc8d\ud835\udc95\ud835\udc89\ud835\udc93\ud835\udc96\ud835\udc82\ud835\udc8f\ud835\udc85\ud835\udc94\ud835\udc8e\ud835\udc97\ud835\udc8a\ud83d\udc7d\ud83d\ude19\\u200c\u041b\ud83c\udfbe\ud83d\udc79\uffe6\u238c\ud83c\udfd2\u26f8\u5bd3\u517b\u5ba0\u7269\u5417\ud83c\udfc4\ud83d\udc00\ud83d\ude91\ud83e\udd37\u64cd\ud835\udc91\ud835\udc9a\ud835\udc90\ud835\udc74\ud83e\udd19\ud83d\udc12\u2103\u6b22\u8fce\u6765\u5230\u62c9\u65af\ud835\ude6b\u23e9\u262e\ud83d\udc08\ud835\udc8c\ud835\ude4a\ud835\ude6d\ud835\ude46\ud835\ude4b\ud835\ude4d\ud835\ude3c\ud835\ude45\ufdfb\u26a0\ud83e\udd84\u5de8\u6536\u8d62\u5f97\u9b3c\u6124\u6012\u8981\u4e70\u989d\u1ebd\ud83d\ude97\u270a\ud83d\udc33\ud835\udfcf\ud835\udc1f\ud835\udfd6\ud835\udfd1\ud835\udfd5\ud835\udc84\ud835\udfd7\ud835\udc20\ud835\ude44\ud835\ude43\ud83d\udc47\u951f\u65a4\u62f7\u274c\u2b55\u25b8\ud835\udde2\ud835\udff3\ud835\udff1\ud835\udfec\u2981\u682a\u5f0f\u26f7\ud55c\uad6d\uc5b4\u3138\u3153\ub2c8\u035c\u0296\ud835\ude3f\ud835\ude54\u20b5\ud835\udca9\u212f\ud835\udcbe\ud835\udcc1\ud835\udcb6\ud835\udcc9\ud835\udcc7\ud835\udcca\ud835\udcc3\ud835\udcc8\ud835\udcc5\u2134\ud835\udcbb\ud835\udcbd\ud835\udcc0\ud835\udccc\ud835\udcb8\ud835\udcce\ud835\ude4f\ud835\ude5f\ud835\ude03\ud835\uddfa\ud835\udfee\ud835\udfed\ud835\udfef\ud835\udff2\ud83d\udc4b\ud83e\udd8a\u2610\u2611\u591a\u4f26\u26a1\u2604\u01eb\ud83d\udc3d\ud83c\udfbb\ud83c\udfb9\u26d3\ud83c\udff9\u256d\u256e\ud83c\udf77\ud83e\udd86\u4e3a\u53cb\u8c0a\u795d\u8d3a\u4e0e\u5176\u60f3\u8c61\u5bf9\u5982\u76f4\u63a5\u95ee\u7528\u81ea\u5df1\u731c\u4f20\u6559\u6ca1\u79ef\u552f\u8ba4\u8bc6\u57fa\u7763\u5f92\u66fe\u7ecf\u8ba9\u8036\u7a23\u590d\u6d3b\u6b7b\u602a\u4ed6\u4f46\u5f53\u4eec\u804a\u4e9b\u9898\u65f6\u5019\u4f8b\u6218\u80dc\u56e0\u5723\u628a\u5168\u7ed3\u5a5a\u5b69\u6050\u60e7\u4e14\u6817\u8c13\u8fd9\u6837\u8fd8\u267e\ud83c\udfb8\ud83e\udd15\ud83e\udd12\u26d1\ud83c\udf81\u6279\u5224\u68c0\u8ba8\ud83c\udfdd\ud83e\udd81\uff1e\u0295\u0323\u0394\ud83d\ude4b\ud83d\ude36\uc950\uc2a4\ud0f1\ud2b8\ub93c\ub3c4\uc11d\uc720\uac00\uaca9\uc778\uc0c1\uc774\uacbd\uc81c\ud669\uc744\ub835\uac8c\ub9cc\ub4e4\uc9c0\uc54a\ub85d\uc798\uad00\ub9ac\ud574\uc57c\ud569\ub2e4\uce90\ub098\uc5d0\uc11c\ub300\ub9c8\ucd08\uc640\ud654\uc57d\uae08\uc758\ud488\ub7f0\uc131\ubd84\uac08\ub54c\ub294\ubc18\ub4dc\uc2dc\ud5c8\ub41c\uc0ac\uc6a9\u271e\ud83d\udd2b\ud83d\udc41\u2508\u2571\u2572\u258f\u2595\u2503\u2570\u258a\u258b\u256f\u2533\u250a\u2612\u51f8\u1f70\ud83d\udcb2\ud83d\uddef\ud835\ude48\u1f0c\ud835\udc87\ud835\udc88\ud835\udc98\ud835\udc83\ud835\udc6c\ud835\udc76\ud835\udd7e\ud835\udd99\ud835\udd97\ud835\udd86\ud835\udd8e\ud835\udd8c\ud835\udd8d\ud835\udd95\ud835\udd8a\ud835\udd94\ud835\udd91\ud835\udd89\ud835\udd93\ud835\udd90\ud835\udd9c\ud835\udd9e\ud835\udd9a\ud835\udd87\ud835\udd7f\ud835\udd98\ud835\udd84\ud835\udd9b\ud835\udd92\ud835\udd8b\ud835\udd82\ud835\udd74\ud835\udd9f\ud835\udd88\ud835\udd78\ud83d\udc51\ud83d\udebf\u261d\ud83d\udca1\u77e5\u5f7c\u767e\\uf005\ud835\ude40\ud835\udc9b\ud835\udc72\ud835\udc73\ud835\udc7e\ud835\udc8b\ud835\udfd2\ud83d\ude26\ud835\ude52\ud835\ude3e\ud835\ude3d\ud83c\udfd0\ud835\ude29\ud835\ude28\u1f7c\u1e51\u2705\u261b\ud835\udc71\ud835\udc79\ud835\udc6b\ud835\udc75\ud835\udc6a\ud83c\uddf0\ud83c\uddf5\ud83d\udc7e\u14c7\u14a7\u152d\u1403\u1427\u1426\u1473\u1428\u14c3\u14c2\u1472\u1438\u146d\u144e\u14c0\u1423\ud83d\udc04\ud83c\udf88\ud83d\udd28\u2669\ud83d\udc0e\ud83e\udd1e\u261e\ud83d\udc38\ud83d\udc9f\ud83c\udfb0\ud83c\udf1d\ud83d\udef3\u70b9\u51fb\u67e5\ud83c\udf6d\ud835\udc65\ud835\udc66\ud835\udc67\uff21\uff2e\uff27\uff2a\uff22\ud83d\udc63\\uf020\u25d4\u25e1\ud83c\udfc9\ud83d\udcad\ud83c\udfa5\u2640\u039e\ud83d\udc34\ud83d\udc68\ud83e\udd33\u2b06\ud83e\udd8d\\x0b\ud83c\udf69\ud835\udc6f\ud835\udc92\ud83d\ude17\ud835\udfd0\ud83c\udfc2\ud83d\udc73\ud83c\udf57\ud83d\udd49\ud83d\udc32\u0331\u210f\ud835\udc6e\ud835\uddd5\ud835\uddf4\\x91\ud83c\udf52\u2800\ua725\u2ca3\u2c8f\u255a\ud83d\udc11\u23f0\u21ba\u21e4\u220f\u9244\u4ef6\u273e\u25e6\u266c\u0457\ud83d\udc8a\\uf203\\uf09a\\uf222\\ue608\\uf202\\uf099\\uf469\\ue607\\uf410\\ue600\u71fb\u88fd\u865a\u507d\u5c41\u7406\u5c48\uff5c\u0413\ud835\udc69\ud835\udc70\ud835\udc80\ud835\udc7a\ud83c\udf24\u2235\u2234\ud835\uddf3\ud835\udddc\ud835\uddd9\ud835\udde6\ud835\udde7\ud83c\udf4a\u1f7a\u1f08\u1f21\u1fd6\u039b\u03a9\u290f\ud83c\uddf3\ud835\udc99\u0541\u057c\u0571\u51ac\u81f3\u1f40\ud835\udc81\ud83d\udd39\ud83e\udd1a\ud83c\udf4e\ud835\udc77\ud83d\udc02\ud83d\udc85\ud835\ude2c\ud835\ude31\ud835\ude38\ud835\ude37\ud835\ude10\ud835\ude2d\ud835\ude13\ud835\ude16\ud835\ude39\ud835\ude32\ud835\ude2b\u261c\u0392\u03ce\ud83d\udca2\u25b2\u039c\u039f\u039d\u0391\u0395\ud83c\uddf1\u2672\ud835\udf48\u21b4\u21b3\ud83d\udc92\u2298\u25ab\u023b\u2b07\ud83d\udeb4\ud83d\udd95\ud83d\udda4\ud83e\udd58\ud83d\udccd\ud83d\udc48\u2795\ud83d\udeab\ud83c\udfa8\ud83c\udf11\ud83d\udc3b\ud835\udc0e\ud835\udc0d\ud835\udc0a\ud835\udc6d\ud83e\udd16\ud83c\udf8e\u2727\ud83d\ude3c\ud83d\udd77\uff47\uff4f\uff56\uff52\uff4e\uff4d\uff54\uff49\uff44\uff55\uff12\uff10\uff18\uff46\uff42\uff07\uff4b\ud835\udff0\ud83c\uddf4\ud83c\udded\ud83c\uddfb\ud83c\uddf2\ud835\uddde\ud835\udded\ud835\uddd8\ud835\udde4\ud83d\udc7c\ud83d\udcc9\ud83c\udf5f\ud83c\udf66\u2215\ud83c\udf08\ud83d\udd2d\ud83d\udc0a\ud83d\udc0d\\uf10a\u02c6\u269c\u2601\u06a1\ud83d\udc26\\U0001f92f\\U0001f92a\ud83d\udc21\ud83d\udcb3\u1f31\ud83d\ude47\ud835\uddf8\ud835\udddf\ud835\udde0\ud835\uddf7\ud83e\udd5c\ud83d\udd3c'\n    symbols_to_isolate = '.,?!-;*\"\u2026:\u2014()%#$&_\/@\u30fb\u03c9+=\u201d\u201c[]^\u2013>\\\\\u00b0<~\u2022\u2122\u02c8\u028a\u0252\u221e\u00a7{}\u00b7\u03c4\u03b1\u0261|\u00a2`\u2015\u026a\u00a3\u2665\u00b4\u00b9\u2248\u00f7\u2032\u0254\u20ac\u2020\u03bc\u00bd\u02bb\u03c0\u03b4\u03b7\u03bb\u03c3\u03b5\u03c1\u03bd\u0283\u00b1\u00b5\u00ba\u00be\uff0e\u00bb\u0430\u0432\u22c5\u00bf\u00ac\u03b2\u21d2\u203a\u00a1\u2082\u2083\u03b3\u2033\u00ab\u03c6\u2153\u201e\uff1a\u00a5\u0441\u0251\uff01\u2212\u00b2\u028c\u00bc\u2074\u2044\u2084\u201a\u2016\u2282\u2154\u00a8\u00d7\u03b8\uff1f\u2229\uff0c\u0250\u2080\u2265\u2191\u2193\uff0f\u221a\uff0d\u2030\u2264'\n    \n    abbr_mapping = {      '\u1d00':'a','\u0299':'b','\u1d04':'c','\u1d05':'d','\u1d07':'e','\ua730':'f','\u0262':'g','\u029c':'h',\n                      '\u026a':'i','\u1d0a':'j','\u1d0b':'k','\u029f':'l','\u1d0d':'m','\u0274':'n','\u1d0f':'o','\u1d18':'p',\n                      '\u01eb':'q','\u0280':'r','\ua731':'s','\u1d1b':'t','\u1d1c':'u','\u1d20':'v','\u1d21':'w','\u028f':'y','\u1d22':'z', '\\n':' ',\n                       ' yr old ': ' years old ',' yrs old ': ' years old ','co\u2082':'carbon dioxide',\n               }     \n\n    regex_mapping = {\n                         '[Uu][.][Ss][.][Aa][.]': 'USA', '[Uu][.][Ss][.][Aa]': 'USA',\n                          '[Uu][.][Ss][.]': 'USA',  ' [Uu][.][Ss] ': ' USA ','[Uu] [Ss] of [Aa]': 'USA',\n                          ' [Uu][.][Kk][.]? ': ' UK ',' [Pp][Hh][.][Dd] ': ' phd ',' [Uu] [Rr] ': ' you are ',\n                         '[Ee][.][Gg][.]': 'for example','[Ii][.][Ee][.]': 'in other words',\n                          '[Ee][Tt][.][Aa][Ll]': 'elsewhere',\"[Gg]ov[']t\": \"government\",\n                         '[Tt][Rr][Uu][Mm][Pp]':'trump','[Oo][Bb][Aa][Mm][Aa]':'obama',\n                    }\n\n\n    new_final_mapping = {  \n                            'jackoff': 'jerk off','jerkoff':'jerk off','bestial': 'beastial',\n                         'bestiality': 'beastiality', 'd1ck': 'dick', 'lmfao': 'laughing my fucking ass off',\n                          'masturbate': 'masterbate', 'cashap24':'cash app','nurnie':'pussy',\n                         'n1gger': 'nigger', 'nigga': 'nigger', 'niggas': 'niggers',\n                         'clickbait':'click with bait','YUGE':'huge','Outsider77':'outsider',\n                         'numbnuts': 'noob nuts', 'orgasms': 'orgasm', 'Trudope':'The prime minister of Canada',\n                          '[Dd]aesh':'ISIS', \"Qur'an\":'the central religious text of Islam','gofundme':'go fund me',\n                         'Finicum':'an American spokesman','trumpkins':'trump with pumpkin','trumpettes':'trump',\n                           'trump[Cc]are':'trump health care','obama[Cc]are':'obama health care','trumpies':'trump',\n                          'trumpster': 'trump supporter','trumper': 'trump supporter', 'trumpy':'trump',\n                          'trumpian':'trump supporter','trumpism':'trump supporter',\"trump[']s\" : 'trump',\n                          '[Kk]im [Jj]ong([- ][Uu]n)?': 'the president of north korea','Cheetolini':'trump',\n                          'trumpland':'trump land','trumpty':'trump','trumpist[s]?':'trump supporter',\n                          'trumpeteer[s]?':'trump supporter','trumplethinskin':'trump','trumpo':'trump',\n                          'realDonaldtrump':'real Donald trump','[Tt]heDonald':'the Donald',\n                          ' brother[Ii]n ':' brother ', 'Beyak':'Canadian politician',\n                          'Trudeaus':'Prime Minister of Canada ','shibai':'failure',\n                          'Tridentinus':'Tridentinum','[Zz]upta[s]?':'the South African President',\n                           '[Pp]utrumpski':'Putin and trump supporter','Twitler':'twitter user',\n                           'antisemitic': 'anti semitic', '[Ss][Bb]91':'senate bill', \n                            'utmterm':' utm term','[Ff]ake[Nn]ews':'fake news', 'Pizzagate':'Pizza gate',                 \n                            '[Ww]ashingtontimes':'washington times','[Gg]arycrum':'gary crum',\n                            'RangerMC':'car','[Tt][Ff][Ww]s':'tuition fee waiver','[Ss][Jj][Ww][Ss]?':'social justice warrior',\n                            'Koncerned':'concerned','Vinis':'vinys','Y\u1d0f\u1d1c':'you', '[Aa]uwe': 'oh no',\n                            '[Bb]igly':'big league','Drump[f]?':'Trump','[Bb]rexit':'british exit',\n                            'utilitas':'utilities','justiciaries': 'justiciary','doctrne':'doctrine',\n                           '[Dd]eplorables': 'deplorable','[Cc][Oo][Nn]artist' : 'con-artist',\n                           'theglobeandmail': 'the globe and mail', 'howhat': 'how that', ' coz ':' because ',\n                           'civilbeat':'civil beat','gubmit':'submit','financialpost':'financial post',               \n                           'theguardian': 'the guardian','shopo':'shop','SHOPO':'shop','fentayal': 'fentanyl',\n                         'designation-': 'designation ','[Mm]utilitated' : 'Mutilated','dood-': 'dood ',\n                         '[Ii]rakis' : 'iraki', 'supporter[a-z]+':'supporter',' u ':' you ', \n                        }\n\n\n    contraction_mapping = {\n        \"'cause\": 'because',',cause': 'because',';cause': 'because',\"ain't\": 'am not','ain,t': 'am not',\n        'ain;t': 'am not','ain\u00b4t': 'am not','ain\u2019t': 'am not',\"aren't\": 'are not',\n        'aren,t': 'are not','aren;t': 'are not','aren\u00b4t': 'are not','aren\u2019t': 'are not',\"can't\": 'cannot',\n        \"can't've\": 'cannot have','can,t': 'cannot','can,t,ve': 'cannot have', 'can;t': 'cannot','can;t;ve': 'cannot have',\n        'can\u00b4t': 'cannot','can\u00b4t\u00b4ve': 'cannot have','can\u2019t': 'cannot','can\u2019t\u2019ve': 'cannot have',\n        \"could've\": 'could have','could,ve': 'could have','could;ve': 'could have',\"couldn't\": 'could not',\n        \"couldn't've\": 'could not have','couldn,t': 'could not','couldn,t,ve': 'could not have','couldn;t': 'could not',\n        'couldn;t;ve': 'could not have','couldn\u00b4t': 'could not', 'couldn\u00b4t\u00b4ve': 'could not have','couldn\u2019t': 'could not',\n        'couldn\u2019t\u2019ve': 'could not have', 'could\u00b4ve': 'could have',\n        'could\u2019ve': 'could have',\"didn't\": 'did not','didn,t': 'did not','didn;t': 'did not','didn\u00b4t': 'did not',\n        'didn\u2019t': 'did not',\"doesn't\": 'does not','doesn,t': 'does not','doesn;t': 'does not','doesn\u00b4t': 'does not',\n        'doesn\u2019t': 'does not',\"don't\": 'do not','don,t': 'do not','don;t': 'do not','don\u00b4t': 'do not','don\u2019t': 'do not',\n        \"hadn't\": 'had not',\"hadn't've\": 'had not have','hadn,t': 'had not','hadn,t,ve': 'had not have','hadn;t': 'had not',\n        'hadn;t;ve': 'had not have','hadn\u00b4t': 'had not','hadn\u00b4t\u00b4ve': 'had not have','hadn\u2019t': 'had not',\n        'hadn\u2019t\u2019ve': 'had not have',\"hasn't\": 'has not','hasn,t': 'has not','hasn;t': 'has not','hasn\u00b4t': 'has not',\n        'hasn\u2019t': 'has not', \"haven't\": 'have not','haven,t': 'have not','haven;t': 'have not','haven\u00b4t': 'have not',\n        'haven\u2019t': 'have not',\"he'd\": 'he would', \"he'd've\": 'he would have',\"he'll\": 'he will','he\u00b4ll': 'he will',\n        \"he's\": 'he is','he,d': 'he would','he,d,ve': 'he would have','he,ll': 'he will','he,s': 'he is','he;d': 'he would',   \n        'he;d;ve': 'he would have','he;ll': 'he will','he;s': 'he is','he\u00b4d': 'he would','he\u00b4d\u00b4ve': 'he would have',    \n        'he\u00b4s': 'he is','he\u2019d': 'he would','he\u2019d\u2019ve': 'he would have','he\u2019ll': 'he will','he\u2019s': 'he is',\n        \"how'd\": 'how did',\"how'll\": 'how will',\"how's\": 'how is','how,d': 'how did','how,ll': 'how will',\n        'how,s': 'how is','how;d': 'how did','how;ll': 'how will','how;s': 'how is','how\u00b4d': 'how did','how\u00b4ll': 'how will',\n        'how\u00b4s': 'how is','how\u2019d': 'how did','how\u2019ll': 'how will','how\u2019s': 'how is',\"i'd\": 'i would',\"i'll\": 'i will',\n        \"i'm\": 'i am',\"i've\": 'i have','i,d': 'i would','i,ll': 'i will','i,m': 'i am','i,ve': 'i have','i;d': 'i would',\n        'i;ll': 'i will','i;m': 'i am','i;ve': 'i have',\"isn't\": 'is not','isn,t': 'is not','isn;t': 'is not',\n        'isn\u00b4t': 'is not','isn\u2019t': 'is not',\"it'd\": 'it would',\"it'll\": 'it will',\"It's\":'it is', \"it's\": 'it is',\n        'it,d': 'it would','it,ll': 'it will','it,s': 'it is','it;d': 'it would','it;ll': 'it will', 'it;s': 'it is',\n        'it\u00b4d': 'it would','it\u00b4ll': 'it will','it\u00b4s': 'it is','it\u2019d': 'it would','it\u2019ll': 'it will','it\u2019s': 'it is',\n        'i\u00b4d': 'i would','i\u00b4ll': 'i will','i\u00b4m': 'i am','i\u00b4ve': 'i have','i\u2019d': 'i would','i\u2019ll': 'i will','i\u2019m': 'i am',\n        'i\u2019ve': 'i have',\"let's\": 'let us','let,s': 'let us','let;s': 'let us','let\u00b4s': 'let us', 'let\u2019s': 'let us',\n        \"ma'am\": 'madam','ma,am': 'madam','ma;am': 'madam',\"mayn't\": 'may not','mayn,t': 'may not', 'mayn;t': 'may not',\n        'mayn\u00b4t': 'may not','mayn\u2019t': 'may not','ma\u00b4am': 'madam','ma\u2019am': 'madam',\"might've\": 'might have',\n        'might,ve': 'might have','might;ve': 'might have',\"mightn't\": 'might not','mightn,t': 'might not',\n        'mightn;t': 'might not','mightn\u00b4t': 'might not', 'mightn\u2019t': 'might not','might\u00b4ve': 'might have',\n        'might\u2019ve': 'might have',\"must've\": 'must have','must,ve': 'must have','must;ve': 'must have',\n        \"mustn't\": 'must not','mustn,t': 'must not','mustn;t': 'must not','mustn\u00b4t': 'must not','mustn\u2019t': 'must not',\n        'must\u00b4ve': 'must have','must\u2019ve': 'must have',\"needn't\": 'need not','needn,t': 'need not','needn;t': 'need not',\n        'needn\u00b4t': 'need not','needn\u2019t': 'need not',\"oughtn't\": 'ought not','oughtn,t': 'ought not','oughtn;t': 'ought not',\n        'oughtn\u00b4t': 'ought not','oughtn\u2019t': 'ought not',\"sha'n't\": 'shall not','sha,n,t': 'shall not','sha;n;t': 'shall not',\n        \"shan't\": 'shall not', 'shan,t': 'shall not','shan;t': 'shall not','shan\u00b4t': 'shall not','shan\u2019t': 'shall not',\n        'sha\u00b4n\u00b4t': 'shall not','sha\u2019n\u2019t': 'shall not',\"she'd\": 'she would',\"she'll\": 'she will',\"she's\": 'she is',\n        'she,d': 'she would','she,ll': 'she will', 'she,s': 'she is','she;d': 'she would','she;ll': 'she will',\n        'she;s': 'she is','she\u00b4d': 'she would','she\u00b4ll': 'she will', 'she\u00b4s': 'she is','she\u2019d': 'she would',\n        'she\u2019ll': 'she will','she\u2019s': 'she is',\"should've\": 'should have','should,ve': 'should have',\n        'should;ve': 'should have', \"shouldn't\": 'should not','shouldn,t': 'should not','shouldn;t': 'should not',\n        'shouldn\u00b4t': 'should not','shouldn\u2019t': 'should not','should\u00b4ve': 'should have', 'should\u2019ve': 'should have',\n        \"that'd\": 'that would',\"that's\": 'that is','that,d': 'that would','that,s': 'that is','that;d': 'that would',\n        'that;s': 'that is','that\u00b4d': 'that would','that\u00b4s': 'that is','that\u2019d': 'that would','that\u2019s': 'that is',\n        \"there'd\": 'there had', \"there's\": 'there is','there,d': 'there had','there,s': 'there is','there;d': 'there had',\n        'there;s': 'there is', 'there\u00b4d': 'there had','there\u00b4s': 'there is','there\u2019d': 'there had','there\u2019s': 'there is',\n        \"they'd\": 'they would',\"they'll\": 'they will',\"they're\": 'they are',\"they've\": 'they have','they,d': 'they would',\n        'they,ll': 'they will','they,re': 'they are','they,ve': 'they have','they;d': 'they would','they;ll': 'they will',\n        'they;re': 'they are', 'they;ve': 'they have','they\u00b4d': 'they would','they\u00b4ll': 'they will','they\u00b4re': 'they are',\n        'they\u00b4ve': 'they have','they\u2019d': 'they would','they\u2019ll': 'they will','they\u2019re': 'they are','they\u2019ve': 'they have',\n        \"wasn't\": 'was not','wasn,t': 'was not','wasn;t': 'was not','wasn\u00b4t': 'was not','wasn\u2019t': 'was not',\n        \"we'd\": 'we would',\"we'll\": 'we will',\"we're\": 'we are',\"we've\": 'we have','we,d': 'we would','we,ll': 'we will',\n        'we,re': 'we are','we,ve': 'we have','we;d': 'we would','we;ll': 'we will','we;re': 'we are','we;ve': 'we have',\n        \"weren't\": 'were not','weren,t': 'were not','weren;t': 'were not','weren\u00b4t': 'were not','weren\u2019t': 'were not',\n        'we\u00b4d': 'we would','we\u00b4ll': 'we will',    'we\u00b4re': 'we are','we\u00b4ve': 'we have','we\u2019d': 'we would',\n        'we\u2019ll': 'we will','we\u2019re': 'we are','we\u2019ve': 'we have',\"what'll\": 'what will',\"what're\": 'what are',\n        \"what's\": 'what is',    \"what've\": 'what have','what,ll': 'what will','what,re': 'what are','what,s': 'what is',\n        'what,ve': 'what have','what;ll': 'what will','what;re': 'what are','what;s': 'what is','what;ve': 'what have',\n        'what\u00b4ll': 'what will', 'what\u00b4re': 'what are','what\u00b4s': 'what is','what\u00b4ve': 'what have','what\u2019ll': 'what will',\n        'what\u2019re': 'what are','what\u2019s': 'what is', 'what\u2019ve': 'what have',\"where'd\": 'where did',\"where's\": 'where is',\n        'where,d': 'where did','where,s': 'where is','where;d': 'where did','where;s': 'where is','where\u00b4d': 'where did',\n        'where\u00b4s': 'where is','where\u2019d': 'where did','where\u2019s': 'where is', \"who'll\": 'who will',\"who's\": 'who is',\n        'who,ll': 'who will','who,s': 'who is','who;ll': 'who will','who;s': 'who is','who\u00b4ll': 'who will','who\u00b4s': 'who is',\n        'who\u2019ll': 'who will','who\u2019s': 'who is',\"won't\": 'will not','won,t': 'will not','won;t': 'will not',\n        'won\u00b4t': 'will not','won\u2019t': 'will not',\"wouldn't\": 'would not','wouldn,t': 'would not','wouldn;t': 'would not',\n        'wouldn\u00b4t': 'would not','wouldn\u2019t': 'would not',\"you'd\": 'you would',\"you'll\": 'you will',\"you're\": 'you are',\n        'you,d': 'you would','you,ll': 'you will', 'you,re': 'you are','you;d': 'you would','you;ll': 'you will',\n        'you;re': 'you are','you\u00b4d': 'you would','you\u00b4ll': 'you will','you\u00b4re': 'you are','you\u2019d': 'you would',\n        'you\u2019ll': 'you will','you\u2019re': 'you are','\u00b4cause': 'because','\u2019cause': 'because',\"you've\": \"you have\",\n        \"could'nt\": 'could not',\"havn't\": 'have not',\"here\u2019s\": \"here is\",'i\"\"m': 'i am',\"i'am\": 'i am',\"i'l\": \"i will\",\n        \"i'v\": 'i have',\"wan't\": 'want',\"was'nt\": \"was not\",\"who'd\": \"who would\",\"who're\": \"who are\",\"who've\": \"who have\",\n        \"why'd\": \"why would\",\"would've\": \"would have\",\"y'all\": \"you all\",\n        \"y'know\": \"you know\",\"you.i\": \"you i\",\n        \"your'e\": \"you are\",\"arn't\": \"are not\",\"agains't\": \"against\",\"c'mon\": \"common\",\"doens't\": \"does not\",\n        'don\"\"t': \"do not\",\"dosen't\": \"does not\", \"dosn't\": \"does not\",\"shoudn't\": \"should not\",\"that'll\": \"that will\",\n        \"there'll\": \"there will\",\"there're\": \"there are\", \"this'll\": \"this all\", \"ya'll\": \"you all\",\n        \"you\u2019ve\": \"you have\",\"d'int\": \"did not\",\"did'nt\": \"did not\",\"din't\": \"did not\",\n        \"dont't\": \"do not\",\"i'ma\": \"i am\",\"is'nt\": \"is not\",\"\u2018i\":'i',  \":)\": ' smile ',\";)\": ' smile ',\n        \":-)\": ' smile ',\":(\": ' sad ','\u2026':'...', '\ud83d\ude09': ' wink ', '\ud83d\ude02': ' joy ', '\ud83d\ude00': ' stuck out tongue ',  \n         }\n\n    contraction_mapping1 ={\n        \"Agains't\": 'against', \"Ain't\": 'am not', 'Ain,t': 'am not', 'Ain;t': 'am not', 'Ain\u00b4t': 'am not',\n     'Ain\u2019t': 'am not', \"Aren't\": 'are not', 'Aren,t': 'are not', 'Aren;t': 'are not', 'Aren\u00b4t': 'are not',\n     'Aren\u2019t': 'are not', \"Arn't\": 'are not', \"C'mon\": 'common', \"Can't\": 'cannot', \"Can't've\": 'cannot have',\n     'Can,t': 'cannot', 'Can,t,ve': 'cannot have', 'Can;t': 'cannot', 'Can;t;ve': 'cannot have',\n     'Can\u00b4t': 'cannot', 'Can\u00b4t\u00b4ve': 'cannot have', 'Can\u2019t': 'cannot', 'Can\u2019t\u2019ve': 'cannot have',\n     \"Could'nt\": 'could not', \"Could've\": 'could have', 'Could,ve': 'could have', 'Could;ve': 'could have',\n     \"Couldn't\": 'could not', \"Couldn't've\": 'could not have', 'Couldn,t': 'could not',\n     'Couldn,t,ve': 'could not have', 'Couldn;t': 'could not', 'Couldn;t;ve': 'could not have',\n     'Couldn\u00b4t': 'could not', 'Couldn\u00b4t\u00b4ve': 'could not have', 'Couldn\u2019t': 'could not',\n     'Couldn\u2019t\u2019ve': 'could not have', 'Could\u00b4ve': 'could have', 'Could\u2019ve': 'could have',\n     \"D'int\": 'did not', \"Did'nt\": 'did not', \"Didn't\": 'did not', 'Didn,t': 'did not',\n     'Didn;t': 'did not', 'Didn\u00b4t': 'did not', 'Didn\u2019t': 'did not', \"Din't\": 'did not',\n     \"Doens't\": 'does not', \"Doesn't\": 'does not', 'Doesn,t': 'does not', 'Doesn;t': 'does not',\n     'Doesn\u00b4t': 'does not', 'Doesn\u2019t': 'does not', 'Don\"\"t': 'do not', \"Don't\": 'do not',\n     'Don,t': 'do not', 'Don;t': 'do not', \"Dont't\": 'do not', 'Don\u00b4t': 'do not',\n     'Don\u2019t': 'do not', \"Dosen't\": 'does not', \"Dosn't\": 'does not', \"Hadn't\": 'had not',\n     \"Hadn't've\": 'had not have', 'Hadn,t': 'had not', 'Hadn,t,ve': 'had not have', 'Hadn;t': 'had not',\n     'Hadn;t;ve': 'had not have', 'Hadn\u00b4t': 'had not', 'Hadn\u00b4t\u00b4ve': 'had not have', 'Hadn\u2019t': 'had not',\n     'Hadn\u2019t\u2019ve': 'had not have', \"Hasn't\": 'has not', 'Hasn,t': 'has not', 'Hasn;t': 'has not',\n     'Hasn\u00b4t': 'has not', 'Hasn\u2019t': 'has not', \"Haven't\": 'have not', 'Haven,t': 'have not',\n     'Haven;t': 'have not', 'Haven\u00b4t': 'have not', 'Haven\u2019t': 'have not', \"Havn't\": 'have not',\n     \"He'd\": 'he would', \"He'd've\": 'he would have', \"He'll\": 'he will', \"He's\": 'he is',\n     'He,d': 'he would', 'He,d,ve': 'he would have', 'He,ll': 'he will', 'He,s': 'he is',\n     'He;d': 'he would', 'He;d;ve': 'he would have', 'He;ll': 'he will', 'He;s': 'he is',\n     'Here\u2019s': 'here is', 'He\u00b4d': 'he would', 'He\u00b4d\u00b4ve': 'he would have', 'He\u00b4ll': 'he will',\n     'He\u00b4s': 'he is', 'He\u2019d': 'he would', 'He\u2019d\u2019ve': 'he would have', 'He\u2019ll': 'he will',\n     'He\u2019s': 'he is', \"How'd\": 'how did', \"How'll\": 'how will', \"How's\": 'how is', 'How,d': 'how did',\n     'How,ll': 'how will', 'How,s': 'how is', 'How;d': 'how did', 'How;ll': 'how will', 'How;s': 'how is',\n     'How\u00b4d': 'how did', 'How\u00b4ll': 'how will', 'How\u00b4s': 'how is', 'How\u2019d': 'how did', 'How\u2019ll': 'how will',\n     'How\u2019s': 'how is', 'I\"\"m': 'i am', \"I'am\": 'i am', \"I'd\": 'i would', \"I'l\": 'i will',\n     \"I'll\": 'i will', \"I'm\": 'i am', \"I'ma\": 'i am', \"I'v\": 'i have', \"I've\": 'i have',\n     'I,d': 'i would', 'I,ll': 'i will', 'I,m': 'i am', 'I,ve': 'i have', 'I;d': 'i would',\n     'I;ll': 'i will', 'I;m': 'i am', 'I;ve': 'i have', \"Is'nt\": 'is not', \"Isn't\": 'is not',\n     'Isn,t': 'is not', 'Isn;t': 'is not', 'Isn\u00b4t': 'is not', 'Isn\u2019t': 'is not', \"It'd\": 'it would',\n     \"It'll\": 'it will', \"It's\": 'it is', 'It,d': 'it would', 'It,ll': 'it will', 'It,s': 'it is',\n     'It;d': 'it would', 'It;ll': 'it will', 'It;s': 'it is', 'It\u00b4d': 'it would', 'It\u00b4ll': 'it will',\n     'It\u00b4s': 'it is', 'It\u2019d': 'it would', 'It\u2019ll': 'it will', 'It\u2019s': 'it is', 'I\u00b4d': 'i would',\n     'I\u00b4ll': 'i will', 'I\u00b4m': 'i am', 'I\u00b4ve': 'i have', 'I\u2019d': 'i would', 'I\u2019ll': 'i will', 'I\u2019m': 'i am',\n     'I\u2019ve': 'i have', \"Let's\": 'let us', 'Let,s': 'let us', 'Let;s': 'let us', 'Let\u00b4s': 'let us',\n     'Let\u2019s': 'let us', \"Ma'am\": 'madam', 'Ma,am': 'madam', 'Ma;am': 'madam', \"Mayn't\": 'may not',\n     'Mayn,t': 'may not', 'Mayn;t': 'may not', 'Mayn\u00b4t': 'may not', 'Mayn\u2019t': 'may not',\n     'Ma\u00b4am': 'madam', 'Ma\u2019am': 'madam', \"Might've\": 'might have', 'Might,ve': 'might have',\n     'Might;ve': 'might have', \"Mightn't\": 'might not', 'Mightn,t': 'might not', 'Mightn;t': 'might not',\n     'Mightn\u00b4t': 'might not', 'Mightn\u2019t': 'might not', 'Might\u00b4ve': 'might have', 'Might\u2019ve': 'might have',\n     \"Must've\": 'must have', 'Must,ve': 'must have', 'Must;ve': 'must have', \"Mustn't\": 'must not',\n     'Mustn,t': 'must not', 'Mustn;t': 'must not', 'Mustn\u00b4t': 'must not', 'Mustn\u2019t': 'must not',\n     'Must\u00b4ve': 'must have', 'Must\u2019ve': 'must have', \"Needn't\": 'need not', 'Needn,t': 'need not',\n     'Needn;t': 'need not', 'Needn\u00b4t': 'need not', 'Needn\u2019t': 'need not', \"Oughtn't\": 'ought not',\n     'Oughtn,t': 'ought not', 'Oughtn;t': 'ought not', 'Oughtn\u00b4t': 'ought not', 'Oughtn\u2019t': 'ought not',\n     \"Sha'n't\": 'shall not', 'Sha,n,t': 'shall not', 'Sha;n;t': 'shall not', \"Shan't\": 'shall not',\n     'Shan,t': 'shall not', 'Shan;t': 'shall not', 'Shan\u00b4t': 'shall not', 'Shan\u2019t': 'shall not',\n     'Sha\u00b4n\u00b4t': 'shall not', 'Sha\u2019n\u2019t': 'shall not', \"She'd\": 'she would', \"She'll\": 'she will',\n     \"She's\": 'she is', 'She,d': 'she would', 'She,ll': 'she will', 'She,s': 'she is', 'She;d': 'she would',\n     'She;ll': 'she will', 'She;s': 'she is', 'She\u00b4d': 'she would', 'She\u00b4ll': 'she will', 'She\u00b4s': 'she is',\n     'She\u2019d': 'she would', 'She\u2019ll': 'she will', 'She\u2019s': 'she is', \"Shoudn't\": 'should not',\n     \"Should've\": 'should have', 'Should,ve': 'should have', 'Should;ve': 'should have',\n     \"Shouldn't\": 'should not', 'Shouldn,t': 'should not', 'Shouldn;t': 'should not',\n     'Shouldn\u00b4t': 'should not', 'Shouldn\u2019t': 'should not', 'Should\u00b4ve': 'should have',\n     'Should\u2019ve': 'should have', \"That'd\": 'that would', \"That'll\": 'that will',\n     \"That's\": 'that is', 'That,d': 'that would', 'That,s': 'that is', 'That;d': 'that would',\n     'That;s': 'that is', 'That\u00b4d': 'that would', 'That\u00b4s': 'that is', 'That\u2019d': 'that would',\n     'That\u2019s': 'that is', \"There'd\": 'there had', \"There'll\": 'there will', \"There're\": 'there are',\n     \"There's\": 'there is', 'There,d': 'there had', 'There,s': 'there is', 'There;d': 'there had',\n     'There;s': 'there is', 'There\u00b4d': 'there had', 'There\u00b4s': 'there is', 'There\u2019d': 'there had',\n     'There\u2019s': 'there is', \"They'd\": 'they would', \"They'll\": 'they will', \"They're\": 'they are',\n     \"They've\": 'they have', 'They,d': 'they would', 'They,ll': 'they will', 'They,re': 'they are',\n     'They,ve': 'they have', 'They;d': 'they would', 'They;ll': 'they will', 'They;re': 'they are',\n     'They;ve': 'they have', 'They\u00b4d': 'they would', 'They\u00b4ll': 'they will', 'They\u00b4re': 'they are',\n     'They\u00b4ve': 'they have', 'They\u2019d': 'they would', 'They\u2019ll': 'they will', 'They\u2019re': 'they are',\n     'They\u2019ve': 'they have', \"This'll\": 'this all', \"Wan't\": 'want', \"Was'nt\": 'was not', \"Wasn't\": 'was not',\n     'Wasn,t': 'was not', 'Wasn;t': 'was not', 'Wasn\u00b4t': 'was not', 'Wasn\u2019t': 'was not', \"We'd\": 'we would',\n     \"We'll\": 'we will', \"We're\": 'we are', \"We've\": 'we have', 'We,d': 'we would', 'We,ll': 'we will',\n     'We,re': 'we are', 'We,ve': 'we have', 'We;d': 'we would', 'We;ll': 'we will', 'We;re': 'we are',\n     'We;ve': 'we have', \"Weren't\": 'were not', 'Weren,t': 'were not', 'Weren;t': 'were not',\n     'Weren\u00b4t': 'were not', 'Weren\u2019t': 'were not', 'We\u00b4d': 'we would', 'We\u00b4ll': 'we will',\n     'We\u00b4re': 'we are', 'We\u00b4ve': 'we have', 'We\u2019d': 'we would', 'We\u2019ll': 'we will', 'We\u2019re': 'we are',\n     'We\u2019ve': 'we have', \"What'll\": 'what will', \"What're\": 'what are', \"What's\": 'what is',\n     \"What've\": 'what have', 'What,ll': 'what will', 'What,re': 'what are', 'What,s': 'what is',\n     'What,ve': 'what have', 'What;ll': 'what will', 'What;re': 'what are', 'What;s': 'what is',\n     'What;ve': 'what have', 'What\u00b4ll': 'what will', 'What\u00b4re': 'what are', 'What\u00b4s': 'what is',\n     'What\u00b4ve': 'what have', 'What\u2019ll': 'what will', 'What\u2019re': 'what are', 'What\u2019s': 'what is',\n     'What\u2019ve': 'what have', \"Where'd\": 'where did', \"Where's\": 'where is', 'Where,d': 'where did',\n     'Where,s': 'where is', 'Where;d': 'where did', 'Where;s': 'where is', 'Where\u00b4d': 'where did',\n     'Where\u00b4s': 'where is', 'Where\u2019d': 'where did', 'Where\u2019s': 'where is', \"Who'd\": 'who would',\n     \"Who'll\": 'who will', \"Who're\": 'who are', \"Who's\": 'who is', \"Who've\": 'who have',\n     'Who,ll': 'who will', 'Who,s': 'who is', 'Who;ll': 'who will', 'Who;s': 'who is',\n     'Who\u00b4ll': 'who will', 'Who\u00b4s': 'who is', 'Who\u2019ll': 'who will', 'Who\u2019s': 'who is',\n     \"Why'd\": 'why would', \"Won't\": 'will not', 'Won,t': 'will not', 'Won;t': 'will not',\n     'Won\u00b4t': 'will not', 'Won\u2019t': 'will not', \"Would've\": 'would have', \"Wouldn't\": 'would not',\n     'Wouldn,t': 'would not', 'Wouldn;t': 'would not', 'Wouldn\u00b4t': 'would not', 'Wouldn\u2019t': 'would not',\n     \"Y'all\": 'you all', \"Y'know\": 'you know', \"Ya'll\": 'you all', \"You'd\": 'you would', \"You'll\": 'you will',\n     \"You're\": 'you are', \"You've\": 'you have', 'You,d': 'you would', 'You,ll': 'you will', 'You,re': 'you are',\n     'You.i': 'you i', 'You;d': 'you would', 'You;ll': 'you will', 'You;re': 'you are',\n     \"Your'e\": 'you are', 'You\u00b4d': 'you would', 'You\u00b4ll': 'you will', 'You\u00b4re': 'you are',\n     'You\u2019d': 'you would', 'You\u2019ll': 'you will', 'You\u2019re': 'you are', 'You\u2019ve': 'you have'\n    }\n\n    dirty_dict = {      re.compile( '[^a-zA-Z][uU] of [oO][^a-zA-Z]'): ' you of all ',\n                        re.compile('[wW][hH][^a-zA-Z ][^a-zA-Z ][eE]'):'whore' ,                  #  wh**e\n                        re.compile('[wW][hH][^a-zA-Z ][rR][eE]'):'whore',                         #  wh*re   \n                        re.compile('[wW][^a-zA-Z ][oO][rR][eE]'):'whore',                         #  w*ore  \n                        '[wW] h o r e':'whore',\n                      #  re.compile('[sS][hH][^a-zA-Z ][tT] '):'shit ',                         #   sh*t_\n                        re.compile(' [sS][hH][^a-zA-Z ][tT]'):' shit',                         #   _sh*t\n                        re.compile('[sS][hH][*_x][tT] '):'shit ',                            #   sh*t\n                        re.compile(' [sS][^a-zA-Z ][^a-zA-Z ][tT]'):' shit',                   #   _s**t\n                      #  re.compile('[sS][^a-zA-Z ][^a-zA-Z ][tT] '):'shit ',                   #   s**t_\n                        re.compile('[sS][-*_x][-*_x][tT] '):'shit ',                      #   s**t\n                      #  re.compile('[sS][hH][^a-zA-Z ][^a-zA-Z ] '):'shit ',                    #   sh**_ \n                        re.compile(' [sS][hH][^a-zA-Z ][^a-zA-Z ]'):' shit',                     #   _sh** \n                      #  re.compile('[sS][^a-zA-Z ][iI][tT] '):'shit ',                         #   s*it_   \n                        re.compile(' [sS][^a-zA-Z ][iI][tT]'):' shit',                         #   _s*it \n                        re.compile('[sS][-*_x][iI][tT] '):'shit ',                            #   shit\n                        '[sS] h i t':'shit','5h1t': 'shit',\n                        re.compile(' [fF][^a-zA-Z ][^a-zA-Z ][kK]'):' fuck',                   #   _f**k\n                        re.compile('[fF][^a-zA-Z ][^a-zA-Z ][kK] '):'fuck ',                   #   f**k_\n                        re.compile('[fF][-*_x][-*_x][kK]'):'fuck',                       #   f**k\n                        re.compile(' [fF][^a-zA-Z ][cC][kK]'):' fuck',                         #   _f*ck\n                        re.compile('[fF][^a-zA-Z ][cC][kK] '):'fuck ',                         #   f*ck_\n                        re.compile('[fF][-*_x][cC][kK]'):'fuck',                            #   f*ck\n                        re.compile(' [fF][uU][^a-zA-Z ][kK]'):' fuck',                         #   _fu*k\n                        re.compile('[fF][uU][^a-zA-Z ][kK] '):'fuck ',                         #   fu*k_\n                        re.compile('[fF][uU][-*_x][kK]'):'fuck',                            #   fu*k\n                        '[pP]huk': 'fuck','[pP]huck': 'fuck','[fF]ukk':'fuck','[fF] u c k':'fuck',\n                        '[fF]cuk': 'fuck',' [fF]uks': ' fucks',              \n                        re.compile(' [dD][^a-zA-Z ][^a-zA-Z ][kK]'):' dick',                   #   _d**k\n                        re.compile('[dD][^a-zA-Z ][^a-zA-Z ][kK] '):'dick ',                   #   d**k_\n                        re.compile('[dD][-*_x][-*_x][kK]'):'dick',                       #   d**k\n                        re.compile(' [dD][^a-zA-Z ][cC][kK]'):' dick',                         #   _d*ck\n                        re.compile('[dD][^a-zA-Z ][cC][kK] '):'dick ',                         #   d*ck_\n                        re.compile('[dD][-*_x][cC][kK]'):'dick',                            #   d*ck\n                        re.compile(' [dD][iI][^a-zA-Z ][kK]'):' dick',                         #   _di*k\n                        re.compile('[dD][iI][^a-zA-Z ][kK] '):'dick ',                         #   di*k_\n                        re.compile('[dD][iI][-*_x][kK]'):'dick',                            #   di*k\n\n                        re.compile(' [sS][^a-zA-Z ][cC][kK]'):' suck',                         #   _s*ck\n                        re.compile('[sS][^a-zA-Z ][cC][kK] '):'suck ',                         #   s*ck_\n                        re.compile('[sS][-*_x][cC][kK]'):'suck',                            #   s*ck\n                        re.compile(' [sS][uU][^a-zA-Z ][kK]'):' suck',                         #   _su*k\n                        re.compile('[sS][uU][^a-zA-Z ][kK] '):'suck ',                         #   su*k_\n                        re.compile('[sS][uU][-*_x][kK]'):'suck',                            #   su*k\n\n                        re.compile(' [cC][^a-zA-Z ][nN][tT]'):' cunt',                         #   _c*nt\n                        re.compile('[cC][^a-zA-Z ][nN][tT] '):'cunt ',                         #   c*nt_\n                        re.compile('[cC][-*_x][nN][tT]'):'cunt',                            #   c*nt\n                        re.compile(' [cC][uU][^a-zA-Z ][tT]'):' cunt',                         #   _cu*t\n                        re.compile('[cC][uU][^a-zA-Z ][tT] '):'cunt ',                         #   cu*t_\n                        re.compile('[cC][uU][-*_x][tT]'):'cunt',                            #   cu*t\n\n                        re.compile(' [bB][^a-zA-Z ][tT][cC][hH]'):' bitch',                       #   _b*tch\n                        re.compile('[bB][^a-zA-Z ][tT][cC][hH] '):'bitch ',                       #   b*tch_\n                        re.compile('[bB][-*_x][tT][cC][hH]'):'bitch',                          #   b*tch\n                        re.compile(' [bB][iI][^a-zA-Z ][cC][hH]'):' bitch',                       #   _bi*ch\n                        re.compile('[bB][iI][^a-zA-Z ][cC][hH] '):'bitch ',                       #   bi*ch_\n                        re.compile('[bB][iI][-*_x][cC][hH]'):'bitch',                          #   bi*ch\n                        re.compile(' [bB][iI][tT][^a-zA-Z ][hH]'):' bitch',                       #   _bit*h\n                        re.compile('[bB][iI][tT][^a-zA-Z ][hH]'):'bitch ',                       #   bit*h_\n                        re.compile('[bB][iI][tT][-*_x][hH]'):'bitch',                          #   bit*h\n                        re.compile('[bB][^a-zA-Z ][tT][^a-zA-Z ][hH]'):'bitch',                   #   b*t*h\n                        '[bB] i t c h':'bitch',\n                        re.compile('[aA][*_]s'):'ass',                                #   a*s\n                        re.compile('[aA][^a-zA-Z ][^a-zA-Z ][hH][oO][lL][eE]'):'asshole',               #   a**hole\n                        re.compile(' [aA][^a-zA-Z ][^a-zA-Z ][hH]'):' assh',                   #   a**h\n                        re.compile('[aA][^a-zA-Z ][sS][hH][oO][lL][eE]'):'asshole',                     #   a*shole\n                        re.compile('[aA][sS][^a-zA-Z ][hH][oO][lL][eE]'):'asshole',                     #   as*hole\n                        ' [aA]s[*]':' ass','[aA] s s': 'ass ','[aA]sswhole': 'ass hole',\n                        re.compile('[aA]ssh[^a-zA-Z ]le'):'asshole',                     #   assh*le\n                        '[hH] o l e':'hole',\n                        '[bB][*]ll': 'bull', \n                        re.compile('[pP][^a-zA-Z ][sS][sS][yY]'):' pussy',                         #   p*ssy\n                        re.compile('[pP][uU][^a-zA-Z ][sS][yY]'):' pussy',                         #   pu*sy\n                        re.compile('[pP][uU][sS][^a-zA-Z ][yY]'):' pussy',                         #   pus*y\n                        re.compile('[pP][uU][^a-zA-Z ][^a-zA-Z ][yY]'):' pussy',                   #   pu**y\n                        re.compile('[pP][^a-zA-Z ][^a-zA-Z ][sS][yY]'):' pussy',                   #   p**sy\n                        re.compile(' [pP][^a-zA-Z ][^a-zA-Z ][^a-zA-Z ][yY]'):' pussy',            #   _pussy\n                        '[pP]ussi': 'pussy', '[pP]ussies': 'pussy','[pP]ussys': 'pussy', \n                        '[jJ]ack[-]off': 'jerk off','[mM]asterbat[*]': 'masterbate','[gG]od[-]dam': 'god damm',\n                }\n    from nltk.tokenize.treebank import TreebankWordTokenizer\n    tokenizer2 = TreebankWordTokenizer()\n\n    isolate_dict = {ord(c):f' {c} ' for c in symbols_to_isolate}\n    remove_dict = {ord(c):f'' for c in symbols_to_delete}\n\n    def pre_clean_abbr_words(x):\n        dic = abbr_mapping\n        for word in dic.keys():\n            #if word in x:\n            x = x.replace(word, dic[word])\n        return x\n\n    def clean_regex_words(x):\n        dic = regex_mapping\n        for word in dic.keys():\n            x = re.sub(word, dic[word],x)\n        return x  \n\n    def correct_contraction(x):\n        dic = contraction_mapping\n        for word in dic.keys():\n            if word in x:\n                x = x.replace(word, dic[word])\n        return x\n\n    def correct_contraction1(x):\n        dic = contraction_mapping1\n        for word in dic.keys():\n            if word in x:\n                x = x.replace(word, dic[word])\n        return x\n\n    def clean_dirty_dict(x):\n        dic = dirty_dict\n        for word in dic.keys():\n            x = re.sub(word, dic[word],x)\n        return x  \n\n\n    def handle_punctuation(x):\n        x = x.translate(remove_dict)\n        x = x.translate(isolate_dict)\n        return x\n\n    def new_final_contraction(x):\n        dic = new_final_mapping\n        for word in dic.keys():\n            x = re.sub(word, dic[word],x)\n        return x \n\n    def handle_contractions(x):\n        x = tokenizer2.tokenize(x)\n        return x\n\n    def fix_quote(x):\n        x = [x_[1:] if x_.startswith(\"'\") else x_ for x_ in x]\n        x = ' '.join(x)\n        return x\n\n    def preprocess(df_comment):\n\n        # lower\n        # clean misspellings\n        #df_comment = df_comment.str.lower()\n        df_comment = df_comment.apply(pre_clean_abbr_words)\n        df_comment = df_comment.apply(clean_regex_words)\n\n        df_comment = df_comment.apply(correct_contraction) \n        df_comment = df_comment.apply(correct_contraction1) \n        df_comment = df_comment.apply(clean_dirty_dict)\n\n        # clean the text\n        df_comment = df_comment.apply(lambda x:handle_punctuation(x))\n        df_comment = df_comment.apply(new_final_contraction)\n\n        df_comment = df_comment.apply(handle_contractions)\n        df_comment = df_comment.apply(fix_quote)\n\n        return df_comment\n    \n    print('bert_based_cased')\n    BERT_PRETRAINED_DIR = '..\/input\/bertprototype\/cased_l-12_h-768_a-12\/cased_L-12_H-768_A-12\/' \n    print('***** BERT pretrained directory: {} *****'.format(BERT_PRETRAINED_DIR))\n    config_file = os.path.join(BERT_PRETRAINED_DIR, 'bert_config.json')\n    checkpoint_file = os.path.join(BERT_PRETRAINED_DIR, 'bert_model.ckpt')\n    dict_path = os.path.join(BERT_PRETRAINED_DIR, 'vocab.txt')  \n    tokenizer = tokenization.FullTokenizer(vocab_file=dict_path, do_lower_case=False)\n    print('build tokenizer done')\n    modelb = load_trained_model_from_checkpoint(config_file,training=True,seq_len=maxlen)\n    \n    sequence_outputb  = modelb.layers[-6].output\n    pool_outputb = Dense(1, activation='sigmoid',kernel_initializer=keras.initializers.TruncatedNormal(stddev=0.02),name = 'real_output')(sequence_outputb)\n    aux_outputb = Dense(6,activation='sigmoid',name = 'aux_output')(sequence_outputb)\n    model2  = Model(inputs=modelb.input, outputs=[pool_outputb,aux_outputb])\n    #model2.compile(optimizer=adamwarm,loss='mse')\n    #low\n    model2.load_weights('..\/input\/final-models-group1\/bertcased_pre_220_95089.h5')\n    print('load ba models cased')\n    eval_lines = (preprocess(test_df['comment_text'])).values\n    token_input2 = convert_lines(eval_lines,maxlen,tokenizer)\n    print(token_input2[:3])\n    hehe_model4 = (model2.predict([token_input2, seg_input2,mask_input2],verbose=1,batch_size=256))[0]#\n    print('bertbase_cased_low',hehe_model4[:5])\n    submission = pd.DataFrame.from_dict({\n    'id': test_df['id'],\n    'prediction': hehe_model4.flatten()\n    })\n    submission.to_csv('submission_bertbase_cased_low.csv', index=False)\n    \n    #high\n    model2.load_weights('..\/input\/final-model-group2\/bertcased_pre_220_95108_ep2.h5')\n    print('load ba models cased')\n    hehe_model4 = (model2.predict([token_input2, seg_input2,mask_input2],verbose=1,batch_size=256))[0]#\n    print('bertbase_cased_low',hehe_model4[:5])\n    submission = pd.DataFrame.from_dict({\n    'id': test_df['id'],\n    'prediction': hehe_model4.flatten()\n    })\n    submission.to_csv('submission_bertbase_cased_high.csv', index=False)\n    \n    \n    K.clear_session()\nbert_get_result()\nK.clear_session()","80ff368d":"!cp -r '..\/input\/keras-gpt-2-latest\/keras_gpt_2_latest\/' '\/kaggle\/working'\nprint('gpt2')\nfrom keras_gpt_2_latest.keras_gpt_2.loader import load_trained_model_from_checkpoint","ea92fc5f":"bsz = 128\nmaxlen=300\n#model_folder = '..\/input\/gpt2-models\/'\nconfig_path = '..\/input\/gpt2hparamsjson\/hparams.json'#os.path.join(model_folder, 'hparams.json')\ncheckpoint_path = 'anything you like, can be a meme.' #os.path.join(model_folder, 'model.ckpt')#can be anything\nmodel = load_trained_model_from_checkpoint(config_path,\n                                           checkpoint_path,\n                                           seq_len=maxlen,\n                                           fixed_input_shape=True)\nsequence_output  = model.get_layer(index=-2).output\nmaxpool_output = keras.layers.GlobalMaxPooling1D()(sequence_output)\navgpool_output = keras.layers.GlobalAveragePooling1D()(sequence_output)\nconc_output = keras.layers.concatenate([maxpool_output,avgpool_output])\ndropout_output = keras.layers.Dropout(0.4)(conc_output)\nreal_output = keras.layers.Dense(1,activation='sigmoid',name='real_output')(dropout_output)\naux_output = keras.layers.Dense(6,activation='sigmoid',name='aux_output')(dropout_output)\nmodel2  = keras.models.Model(inputs=model.input, outputs=[real_output,aux_output])\n\n##tokenizing\nfrom pytorch_pretrained_bert import BertTokenizer, GPT2Tokenizer\nimport sys\nimport regex as re\ncsv_file = '..\/input\/jigsaw-unintended-bias-in-toxicity-classification\/test.csv' # train or test\ndf = pd.read_csv(csv_file)#[:1024]#.sample(512*2,random_state=112)\ndf['comment_text'] = df['comment_text'].astype(str)\ndf[\"comment_text\"] = df[\"comment_text\"].fillna(\"DUMMY_VALUE\")\n\ndef tokenize(self, text):\n    \"\"\" Tokenize a string. \"\"\"\n    bpe_tokens = []\n    for token in re.findall(self.pat, text):\n        # token = ''.join(self.byte_encoder[ord(b)] for b in token.encode('utf-8'))\n        if sys.version_info[0] == 2:\n            token = ''.join(self.byte_encoder[ord(b)] for b in token)\n        else:\n            token = ''.join(self.byte_encoder[b] for b in token.encode('utf-8'))\n        bpe_tokens.extend(bpe_token for bpe_token in self.bpe(token).split(' '))\n    return bpe_tokens\n\ndef convert_lines_gpt2(example, max_seq_length, tokenizer):\n    all_tokens = []\n    longer = 0\n    for text in tqdm(example):\n        text = re.sub('[ ]+',' ',text)\n        tokens_a = tokenizer.tokenize(tokenizer, text)\n        if len(tokens_a)>max_seq_length:\n            tokens_a = tokens_a[:int(max_seq_length\/2)] + tokens_a[-int(max_seq_length\/2):]\n            longer += 1\n        one_token = tokenizer.convert_tokens_to_ids(tokens_a) + [0]*(max_seq_length - len(tokens_a))\n        all_tokens.append(one_token)\n    return np.array(all_tokens)\n\ndef extract_data_gpt2(\n    model_path,\n    csv_file,\n    dataset,\n    max_sequence_length,\n    output_path,\n):\n    os.makedirs(output_path, exist_ok=True)\n    tokenizer = GPT2Tokenizer.from_pretrained(model_path, cache_dir=None)\n    tokenizer.tokenize = tokenize\n    sequences = convert_lines_gpt2(df[\"comment_text\"].values, max_sequence_length, tokenizer)\n    return sequences\n\nmodel_path = '..\/input\/gpt2-models'\ntoken_input2 = extract_data_gpt2(model_path,csv_file,dataset='gpt2',max_sequence_length=maxlen,output_path=' ')","cf75c213":"model2.load_weights('..\/input\/gpt2-raw-300-tk0-95217-ep2\/gpt2_raw_300_tk0_95217_ep2.h5')\nhehe_model4 = (model2.predict(token_input2,verbose=1,batch_size=bsz))[0]\nprint('gpt2',hehe_model4[:5])\nsubmission = pd.DataFrame.from_dict({\n'id': df['id'],\n'prediction': hehe_model4.flatten()\n})\nsubmission.to_csv('submission_gpt2.csv', index=False)","2bb4da81":"import gc\nK.clear_session()\ngc.collect()\n%reset -sf","510ba662":"import pandas as pd\nimport numpy as np\ntest = pd.read_csv('..\/input\/jigsaw-unintended-bias-in-toxicity-classification\/test.csv')\nresult_bert_df_9 = pd.read_csv('submission_bertlarge.csv')\nresult_bert_9 = result_bert_df_9['prediction'].values.flatten()\nresult_bert_df_6 = pd.read_csv('submission_bertbase_low.csv')\nresult_bert_6 = result_bert_df_6['prediction'].values.flatten()\nresult_bert_df_7 = pd.read_csv('submission_bertbase_high.csv')\nresult_bert_7 = result_bert_df_7['prediction'].values.flatten()\nresult_bert_df_8 = pd.read_csv('submission_bertbase_cased_low.csv')\nresult_bert_8 = result_bert_df_8['prediction'].values.flatten()\nresult_bert_df_5 = pd.read_csv('submission_bertbase_cased_high.csv')\nresult_bert_5 = result_bert_df_5['prediction'].values.flatten()\nresult_gpt2_df = pd.read_csv('submission_gpt2.csv')\nresult_gpt2 = result_gpt2_df['prediction'].values.flatten()\n\nresult_ensemble = (result_bert_9+result_bert_6+result_bert_7+result_bert_8+result_bert_5+result_gpt2)\/6.\n\nsubmission = pd.DataFrame.from_dict({\n    'id': test['id'],\n    'prediction': result_ensemble\n})\n\nsubmission.to_csv('submission.csv', index=False)","6c546c31":"# all","e8a76816":"# gpt2","cb6fdeef":"# BERT"}}