{"cell_type":{"820e8078":"code","b5e324e5":"code","7464d440":"code","4bc2b58d":"code","36c45dce":"code","311ce924":"code","69da1703":"code","5761752b":"code","51241d21":"code","7e639a60":"code","f48acf4d":"code","299045ca":"code","36a6c9db":"code","ca9639d7":"code","953921fc":"code","6f64e075":"code","b813e0d4":"code","347893c4":"code","45a81957":"code","5a809df6":"code","876714f5":"code","13ab8400":"code","de05435a":"code","91d5d013":"code","b0072529":"code","2050e7cd":"code","53a5c130":"code","6ac08169":"code","dfb8c01f":"code","f7656ab7":"code","60777271":"code","2a3f497d":"code","10088050":"code","f6fbed9b":"code","75b9a149":"code","f93e48f4":"code","aa39bd64":"code","8e52862f":"code","64a7b32b":"code","14cc303c":"code","6f06e94c":"code","ebf67958":"code","b9f875f2":"code","2efa9e5d":"code","103ad103":"code","b9205698":"code","8bbfb180":"code","0c32f794":"code","bf4ab8b9":"code","d908c625":"code","ce11d0ce":"code","dc7ba13e":"code","a525c1b9":"code","182e13f4":"code","4ae05305":"code","a68d92a9":"code","c0520e4c":"code","50235582":"code","cc6368e5":"code","d0b383c4":"code","12e92853":"code","531bd6cb":"code","e00bc5d7":"code","4d98872f":"code","f2a55b81":"code","f9ebd4e5":"code","5ea97127":"code","4b62a88e":"markdown","85192f28":"markdown","bb4db6b8":"markdown","612ceb3e":"markdown","b7e5cb70":"markdown","17e41968":"markdown","cbc100ed":"markdown","1a929c24":"markdown","293c0c71":"markdown","f0a58315":"markdown","1b3f2850":"markdown","e4b0a521":"markdown","8af2b746":"markdown","a631d620":"markdown","6e6490ee":"markdown","e0c7d416":"markdown","b3cef048":"markdown","3cec1cb9":"markdown","59fe110b":"markdown","676d9c02":"markdown","3b140cea":"markdown","a9339530":"markdown","78c1ef5b":"markdown","95900824":"markdown","1c46a339":"markdown","86497fbc":"markdown","43565a48":"markdown","c56daa65":"markdown","3148f158":"markdown","7cb45149":"markdown","1c708968":"markdown","7ae13964":"markdown","5313fe34":"markdown","50092a1a":"markdown","d29d7c8c":"markdown","6045e350":"markdown","9645013b":"markdown","2ad0e189":"markdown","a84add8c":"markdown","1232bf4d":"markdown","f603f767":"markdown"},"source":{"820e8078":"import os\nimport textwrap\n\nimport numpy as np\nimport pandas as pd\npd.set_option('display.max_columns', None)\n\nimport seaborn as sns\nimport missingno as msno\nimport plotly.express as px\nimport matplotlib.pyplot as plt\nfrom matplotlib.ticker import MaxNLocator\nplt.style.use('ggplot')\n\nfrom statsmodels.stats.outliers_influence import variance_inflation_factor\n\n# Imputer\nfrom sklearn.impute import KNNImputer","b5e324e5":"def read_data():\n    all_data = {}\n    for dirname, _, filenames in os.walk('\/kaggle\/input'):\n        for filename in filenames:\n            path = os.path.join(dirname, filename)\n            all_data[f'data_{path[-8:-4]}'] = pd.read_csv(path)\n    \n    all_data = {key: all_data[key] for key in sorted(all_data)}\n    \n    return all_data\n\nall_data = read_data()\nfor name, df in all_data.items():\n    print(f'{name} has {df.shape[0]} rows and {df.shape[1]} columns')","7464d440":"data2015 = all_data['data_2015']\ndata2016 = all_data['data_2016']\ndata2017 = all_data['data_2017']\ndata2018 = all_data['data_2018']\ndata2019 = all_data['data_2019']","4bc2b58d":"# Let's investigate the data and see if they have any similar or different columns\nprint('Displaying 2015 data')\ndisplay(data2015.head())\nprint('\\nDisplaying 2016 data', '-'*100)\ndisplay(data2016.head())","36c45dce":"print('Displaying 2017 data')\ndisplay(data2017.head())\nprint('\\nDisplaying 2018 data', '-'*100)\ndisplay(data2018.head())","311ce924":"print('Displaying 2019 data')\ndisplay(data2019.head())","69da1703":"data2015.columns","5761752b":"# Renaming columns of data 2015 \ndata2015 = data2015.rename(columns={'Happiness Rank': 'Rank',\n                        'Happiness Score' : 'Score',\n                        'Economy (GDP per Capita)' : 'GDP',\n                        'Health (Life Expectancy)' : 'Life Expectancy',\n                        'Trust (Government Corruption)': 'Trust'})\n\n# Create a year column\ndata2015['Year'] = pd.to_datetime(2015, format='%Y').year\n\n# Dropping std \ndata2015 = data2015.drop(['Standard Error', 'Dystopia Residual'], axis=1)","51241d21":"data2016.columns","7e639a60":"# Renaming columns of data 2016\ndata2016 = data2016.rename(columns={'Happiness Rank': 'Rank',\n                                    'Happiness Score' : 'Score',\n                                    'Economy (GDP per Capita)' : 'GDP',\n                                    'Health (Life Expectancy)' : 'Life Expectancy',\n                                    'Trust (Government Corruption)': 'Trust'})\n\n# Create a year column\ndata2016['Year'] = pd.to_datetime(2016, format='%Y').year\n\n# Dropping CI\ndata2016 = data2016.drop(['Lower Confidence Interval','Upper Confidence Interval', 'Dystopia Residual', 'Region'], axis=1)","f48acf4d":"data2017.columns","299045ca":"# Renaming columns of data 2017\ndata2017 = data2017.rename(columns={'Happiness.Rank': 'Rank',\n                                    'Happiness.Score' : 'Score',\n                                    'Economy..GDP.per.Capita.' : 'GDP',\n                                    'Health..Life.Expectancy.' : 'Life Expectancy',\n                                    'Trust..Government.Corruption.': 'Trust'})\n\n#C reate a year column\ndata2017['Year'] = pd.to_datetime(2017, format='%Y').year\n\n# Dropping CI\ndata2017 = data2017.drop(['Whisker.high','Whisker.low', 'Dystopia.Residual'], axis=1)","36a6c9db":"data2018.columns","ca9639d7":"# Renaming columns of data 2018\ndata2018 = data2018.rename(columns = {'Overall rank' : 'Rank',\n                                     'Country or region' : 'Country',\n                                     'GDP per capita' : 'GDP',\n                                     'Social support' : 'Family',\n                                     'Healthy life expectancy' : 'Life Expectancy',\n                                     'Freedom to make life choices' : 'Freedom',\n                                     'Perceptions of corruption': 'Trust'})\n\n# Create a year column\ndata2018['Year'] = pd.to_datetime(2018, format='%Y').year","953921fc":"data2019.columns","6f64e075":"# Renaming columns of data 2019\ndata2019 = data2019.rename(columns = {'Overall rank' : 'Rank',\n                                     'Country or region' : 'Country',\n                                     'GDP per capita' : 'GDP',\n                                     'Social support' : 'Family',\n                                     'Healthy life expectancy' : 'Life Expectancy',\n                                     'Freedom to make life choices' : 'Freedom',\n                                     'Perceptions of corruption': 'Trust'})\n\n# Create a year column\ndata2019['Year'] = pd.to_datetime(2019, format='%Y').year","b813e0d4":"print('Displaying 2015 data')\ndisplay(data2015.head())\n\nprint('\\nDisplaying 2016 data', '-'*100)\ndisplay(data2016.head())\n\nprint('\\nDisplaying 2017 data', '-'*100)\ndisplay(data2017.head())\n\nprint('\\nDisplaying 2018 data', '-'*100)\ndisplay(data2018.head())\n\nprint('\\nDisplaying 2019 data', '-'*100)\ndisplay(data2019.head())","347893c4":"# Merging all the dataset into one dataset\nhappiness= pd.concat([data2015, data2016, data2017, data2018, data2019], \n                     ignore_index=True)","45a81957":"happiness","5a809df6":"msno.matrix(happiness)\nplt.show()","876714f5":"happiness.isna().sum()","13ab8400":"#\u00a0Forward fill missings in Region by grouping them by country\nhappiness['Region'] = happiness.groupby('Country')['Region'].fillna(method='ffill')\n\n# KNNimputer for Trust missing\nimputer = KNNImputer()\nhappiness.iloc[:,2:11] = imputer.fit_transform(happiness.iloc[:,2:11])","de05435a":"happiness.isna().sum()","91d5d013":"map = {'Belize': 'Latin America and Caribbean', 'Gambia': 'Sub-Saharan Africa', \n       'Hong Kong S.A.R., China': 'Eastern Asia', 'Namibia': 'Sub-Saharan Africa', \n       'North Macedonia': 'Central and Eastern Europe', 'Northern Cyprus': 'Middle East and Northern Africa', \n       'Puerto Rico': 'Latin America and Caribbean', 'Somalia': 'Sub-Saharan Africa', \n       'Somaliland Region': 'Sub-Saharan Africa', 'South Sudan': 'Sub-Saharan Africa', \n       'Taiwan Province of China': 'Southeastern Asia', 'Trinidad & Tobago': 'Latin America and Caribbean'}\n\nfor index, row in happiness.iterrows():\n    if happiness.loc[index, 'Country'] in map:\n        new_value = map[happiness.loc[index, 'Country']]\n        happiness.loc[index, 'Region'] = new_value","b0072529":"happiness.isna().sum()","2050e7cd":"happiness[happiness['GDP']==0]","53a5c130":"happiness[happiness['Trust']==0]","6ac08169":"happiness[happiness['Family']==0]","dfb8c01f":"happiness[happiness['Freedom']==0]","f7656ab7":"happiness[happiness['Generosity']==0]","60777271":"# Replacing 0's with nans\nhappiness = happiness.replace(0, np.nan)\nhappiness.isna().sum()","2a3f497d":"# Impute missings groupedby Year,\nhappiness.iloc[:,2:10] = imputer.fit_transform(happiness.iloc[:,2:10])\nhappiness.describe().T","10088050":"def get_heatmap(data: pd.DataFrame, year: str):  \n    fig, ax = plt.subplots(figsize=(11, 8)) \n    sns.heatmap(data.corr(), annot=True, fmt='.2f', linewidths=3, cmap='coolwarm',\n              ax=ax, annot_kws={'size': 12, 'color':'black'})\n    ax.set_title('Data - ' + year, fontsize=15, fontweight='bold', pad=5)\n    plt.xticks(rotation=45, weight='bold')\n    plt.yticks(weight='bold')\n    plt.show()\n    \n    \ndef get_vif(dataframe: pd.DataFrame) -> pd.DataFrame:\n    \"\"\"\n    This function calculated VIF of the given dataframe, \n    returns Variance Inflation Factor as a dataframe.\n    \"\"\"\n    dataframe = dataframe._get_numeric_data()\n    vif_df = pd.DataFrame()\n    vif_df['columns'] = dataframe.columns\n    vif_df['VIF Value'] = [variance_inflation_factor(dataframe.values, i) for i in range(dataframe.shape[1])]\n    return(vif_df)\n\n\ndef subplot_score(data: pd.DataFrame, year: str):\n    fig, ax = plt.subplots(2, 3, figsize=(18, 8))\n\n    plot_columns = ['GDP', 'Family', 'Life Expectancy', 'Freedom', 'Trust', 'Generosity']\n    plot_color = ['red', 'green', 'blue', 'purple', 'yellow', 'orange']\n\n    for i in range(6):\n        m = i \/\/ 3\n        n = i % 3\n\n        ax[m, n].scatter('Score', plot_columns[i], data=data, color=plot_color[i],\n                    marker='o')\n        ax[m, n].set_xlabel('Score', fontweight='bold') \n        ax[m, n].set_ylabel(plot_columns[i], fontweight='bold')\n\n    fig.suptitle('Score variable in data ' + year, fontsize=16)\n    plt.show()\n    \n    \ndef get_seaborn_bar(data: pd.DataFrame, y: str, plot_title: str, \n                    plot_color:str = 'Paired', title_color: str = 'black'):\n    fig, ax = plt.subplots(1, 1, figsize=(15, 7))\n\n    plot = sns.barplot(ax=ax, x=data['Country'], y=data[y],\n                     palette=sns.color_palette(plot_color, data.shape[0]))\n\n    for index, row in data.iterrows():\n        plot.text(x=index, y=row[y]*1.01, s=round(row['Score'], 2), \n                  ha='center', color='black')\n\n    ax.set_title(plot_title, fontdict={'fontweight':'bold', 'color':title_color})\n    ax.set_xticklabels(textwrap.fill(x.get_text(), 7, subsequent_indent='-') for x in ax.get_xticklabels())\n    ax.set_xlabel('Country', fontweight='bold')\n    ax.set_ylabel(y, fontweight='bold')\n    return ax","f6fbed9b":"# We imputed 0's, so time to edit the data: 2015\ndata2015 = happiness[happiness['Year']==2015]","75b9a149":"# Checking data types of all the columns\ndata2015.dtypes","f93e48f4":"data2015.describe().T","aa39bd64":"get_heatmap(data=data2015.drop('Year', axis=1), year='2015')","8e52862f":"get_vif(data2015.drop(['Rank','Score', 'Year'], axis=1))","64a7b32b":"subplot_score(data=data2015, year='2015')","14cc303c":"# Dividing dataset 2015 on the basis on score\nunhappy_2015 = data2015[data2015['Score'] < 5]\nhappy_2015 = data2015[data2015['Score'] >= 5]","6f06e94c":"fig, ax = plt.subplots(1, 2, figsize=(17, 8))\n\nplot_1 = sns.regplot(x='Score', y='Trust', data=unhappy_2015, \n                     ax=ax[0], line_kws={\"color\": \"red\"}, \n                     scatter_kws={\"color\": \"blue\"})\nax[0].set_title('Unhappy Dataset (Score < 5)', fontweight='bold')\nax[0].set_xlabel('Happiness Score') \nax[0].set_ylabel('Government Trust Score')\n\nplot_2 = sns.regplot(x='Score', y= 'Trust', data= happy_2015, \n                     ax=ax[1], line_kws={\"color\": \"red\"},\n                     scatter_kws={\"color\": \"blue\"})\nax[1].set_title('Happy Dataset (Score >= 5)', fontweight='bold')\nax[1].set_xlabel('Happiness Score') \nax[1].set_ylabel('Government Trust Score')\n\nfig.suptitle('Investigation of the Relationship Between Government Trust and Happiness', fontweight='bold')\nplt.show()","ebf67958":"fig, ax = plt.subplots(1, 2, figsize=(17, 8))\n\nplot_1 = sns.regplot(x='Score', y='Generosity', data=unhappy_2015, \n                     ax=ax[0], line_kws={\"color\": \"red\"}, \n                     scatter_kws={\"color\": \"blue\"})\nax[0].set_title('Unhappy Dataset (Score < 5)', fontweight='bold')\nax[0].set_xlabel('Happiness Score') \nax[0].set_ylabel('Generosity')\n\nplot_2 = sns.regplot(x='Score', y= 'Generosity', data= happy_2015, \n                     ax=ax[1], line_kws={\"color\": \"red\"},\n                     scatter_kws={\"color\": \"blue\"})\nax[1].set_title('Happy Dataset (Score >= 5)', fontweight='bold')\nax[1].set_xlabel('Happiness Score') \nax[1].set_ylabel('Generosity')\n\nfig.suptitle('Investigation of the Relationship Between Generosity and Happiness', fontweight='bold')\nplt.show()","b9f875f2":"region_mean = data2015.groupby('Region')['Score'].mean().sort_values(ascending=False)\nfig, ax = plt.subplots(1, 1, figsize=(15, 7))\nplot = sns.barplot(x=region_mean.index, y=region_mean, ax=ax, palette=sns.color_palette(\"RdYlGn_r\", len(region_mean)))\ni = 0\nfor index, row in region_mean.iteritems():\n    plot.text(x=i, y=row*1.01, s=round(row, 2), \n            ha='center', color='black')\n    i += 1\n\nax.set_title('Region Wise Mean Happiness Score', fontdict={'fontweight':'bold'})\nax.set_xlabel('Region', fontweight='bold')\nax.set_ylabel('Score', fontweight='bold')\nax.set_xticklabels(textwrap.fill(x.get_text(), 10, subsequent_indent='-') for x in ax.get_xticklabels())\nplt.show()","2efa9e5d":"#\u00a0Visualization of the top 15 happy countries in 2015\ntop_happy_countries = data2015.sort_values('Score', ascending= False).head(n=15)\nax = get_seaborn_bar(data=top_happy_countries, y='Score', \n                     plot_title='Top 15 Happy Countries in the World', \n                     plot_color='hls', title_color='green')\nplt.show()","103ad103":"# Visualiation of the top 15 sad countries in 2015\ntop_sad_countries = data2015.sort_values('Score', \n                                         ascending= False).tail(n=15)[::-1].reset_index(drop=True)\nax = get_seaborn_bar(data=top_sad_countries, \n                     y='Score', \n                     plot_title='Top 15 Sad Countries in the World', \n                     plot_color='husl', title_color='red')\nplt.show()","b9205698":"#\u00a0Visualization of the top 15 rich countries in 2015\nrichests = data2015.sort_values('GDP',ascending=False).head(n=15).reset_index(drop=True)\nax = get_seaborn_bar(data=richests, y='GDP', plot_title='Happiness Scores of the Top 15 Richest Countries in the World', \n                     plot_color='hls', title_color='green')\nax.annotate('Happiness Score of Country', xy=(14, 1.4), xytext=(10, 1.6),\n            arrowprops=dict(arrowstyle='simple',\n                            facecolor='black', \n                            connectionstyle='angle3,angleA=0,angleB=90'), \n                            bbox=dict(boxstyle='round, pad=0.7', \n                                      facecolor='w', edgecolor='black'))\nplt.show()","8bbfb180":"#\u00a0Visualization of the top 15 poor countries in 2015\npoorests = data2015.sort_values('GDP',ascending=True).head(n=15).reset_index(drop=True).reset_index(drop=True)\nax = get_seaborn_bar(data=poorests, y='GDP', plot_title='Happiness Scores of the Top 15 Poorest Countries in the World', \n                     plot_color='husl', title_color='red')\nax.annotate('Happiness Score of Country', xy=(7, 0.2), xytext=(2.5, 0.23),\n            arrowprops=dict(arrowstyle='simple',\n                            facecolor='black', \n                            connectionstyle='angle3,angleA=0,angleB=90'), \n                            bbox=dict(boxstyle='round, pad=0.7', \n                                      facecolor=\"w\", edgecolor='black'))\nplt.show()","0c32f794":"# Assign new data\ndata2016 = happiness[happiness['Year'] == 2016]\ndata2017 = happiness[happiness['Year'] == 2017]\ndata2018 = happiness[happiness['Year'] == 2018]\ndata2019 = happiness[happiness['Year'] == 2019]","bf4ab8b9":"get_heatmap(data2016.drop('Year', axis=1), '2016')","d908c625":"get_heatmap(data2017.drop('Year', axis=1), '2017')","ce11d0ce":"get_heatmap(data2018.drop('Year',axis=1), '2018')","dc7ba13e":"get_heatmap(data2019.drop('Year', axis=1), '2019')","a525c1b9":"px.scatter(data_frame = happiness,\n           x = 'GDP', \n           y = 'Score', \n           animation_frame = 'Year',\n           animation_group = 'Country',\n           size = 'Score', \n           color = 'Country', \n           hover_name = 'Rank', \n           title = 'Happiness Scores vs GDP')","182e13f4":"# Creating data frames to plot top happy countries over the years\ntop_happy_countries_2015 = data2015.sort_values('Score', \n                                                ascending=False).head(n=15)\n\ntop_happy_countries_2016 = data2016.sort_values('Score', \n                                                ascending=False).head(n=15)\n\ntop_happy_countries_2017 = data2017.sort_values('Score', \n                                                ascending=False).head(n=15)\n\ntop_happy_countries_2018 = data2018.sort_values('Score', \n                                                ascending=False).head(n=15)\n\ntop_happy_countries_2019 = data2019.sort_values('Score', \n                                                ascending=False).head(n=15)\n\nall_happy_countries = pd.concat([top_happy_countries_2015, \n                                 top_happy_countries_2016,\n                                 top_happy_countries_2017, \n                                 top_happy_countries_2018,\n                                 top_happy_countries_2019], ignore_index=True)\n\n# Visualization of the top happy countries\npx.bar(data_frame = all_happy_countries,\n       x = 'Country', \n       y = 'Score', \n       animation_frame = 'Year', \n       color = 'GDP',\n       title = 'Top 15 Happy Countries and Their GDP per year')","4ae05305":"# Creating data frames to plot top sad countries over the years\ntop_sad_countries_2015 = data2015.sort_values('Score', \n                                         ascending=False).tail(n=15)[::-1].reset_index(drop=True)\n\ntop_sad_countries_2016 = data2016.sort_values('Score', \n                                         ascending=False).tail(n=15)[::-1].reset_index(drop=True)\n\ntop_sad_countries_2017 = data2017.sort_values('Score', \n                                         ascending=False).tail(n=15)[::-1].reset_index(drop=True)\n\ntop_sad_countries_2018 = data2018.sort_values('Score', \n                                         ascending=False).tail(n=15)[::-1].reset_index(drop=True)\n\ntop_sad_countries_2019 = data2019.sort_values('Score', \n                                         ascending=False).tail(n=15)[::-1].reset_index(drop=True)\n\nall_sad_countries = pd.concat([top_sad_countries_2015,top_sad_countries_2016,\n                      top_sad_countries_2017, top_sad_countries_2018,\n                      top_sad_countries_2019], ignore_index=True)\n\n# Visualization of the top sad countries\npx.bar(data_frame = all_sad_countries, \n       x = 'Country', \n       y = 'Score', \n       animation_frame = 'Year', \n       color = 'GDP', \n       title = 'Top 15 Sad Countries and Their GDP per year')","a68d92a9":"# Creating data frames to plot top rich countries over the years\nrichests_2015 = data2015.sort_values('GDP',\n                                     ascending=False).head(n=15).reset_index(drop=True)\n\nrichests_2016 = data2016.sort_values('GDP',\n                                     ascending=False).head(n=15).reset_index(drop=True)\n\nrichests_2017 = data2017.sort_values('GDP',\n                                     ascending=False).head(n=15).reset_index(drop=True)\n\nrichests_2018 = data2018.sort_values('GDP',\n                                     ascending=False).head(n=15).reset_index(drop=True)\n\nrichests_2019 = data2019.sort_values('GDP',\n                                     ascending=False).head(n=15).reset_index(drop=True)\n\nall_rich_countries = pd.concat([richests_2015, richests_2016, richests_2017,\n                      richests_2018, richests_2019], ignore_index=True)\n\n# Visualization of the top rich countries\npx.bar(data_frame = all_rich_countries, \n       x = 'Country', \n       y = 'Score', \n       animation_frame = 'Year',\n       color = 'Score', \n       title = 'Happiness Scores of the Richest Countries')","c0520e4c":"# Creating data frames to plot top poor countries over the years\npoorests_2016 = data2016.sort_values('GDP',\n                                      ascending=True).head(n=15).reset_index(drop=True)\n\npoorests_2015 = data2015.sort_values('GDP',\n                                      ascending=True).head(n=15).reset_index(drop=True)\n\npoorests_2017 = data2017.sort_values('GDP',\n                                      ascending=True).head(n=15).reset_index(drop=True)\n\npoorests_2018 = data2018.sort_values('GDP',\n                                      ascending=True).head(n=15).reset_index(drop=True)\n\npoorests_2019 = data2019.sort_values('GDP',\n                                      ascending=True).head(n=15).reset_index(drop=True)\n\nall_poor_countries = pd.concat([poorests_2015,poorests_2016, poorests_2017,\n                       poorests_2018, poorests_2019], ignore_index=True)\n\n# Visualization of the top rich countries\npx.bar(data_frame = all_poor_countries, \n       x = 'Country', \n       y = 'Score', \n       animation_frame = 'Year',\n       color = 'Score', \n       title = 'Happiness Scores of Poorest Countries')","50235582":"fig, ax = plt.subplots(1, 1, figsize=(15, 7))\nsns.boxplot(data = happiness.drop(['Rank', 'Year', 'Score'], axis=1), ax=ax)\nplt.show()","cc6368e5":"from scipy.stats import zscore\nz = np.abs(zscore(happiness._get_numeric_data(), axis=0, ddof=0, nan_policy='omit'))\nhappiness._get_numeric_data()[(z<3).all(axis=1)]","d0b383c4":"no_outliers = happiness._get_numeric_data()[(z<3).all(axis=1)]\nno_outliers['Year'].value_counts()","12e92853":"# World map for happiness score over the years\nfig = px.choropleth(data_frame = happiness, \n                    locations = 'Country',\n                    locationmode = 'country names',\n                    animation_frame ='Year',\n                    color = 'Score',\n                    hover_name = 'Country',\n                    color_continuous_scale = px.colors.sequential.Plasma)\nfig.show()","531bd6cb":"# World map for GDP in over the years\nfig = px.choropleth(happiness, \n                    locations = 'Country',\n                    locationmode = 'country names',\n                    animation_frame = 'Year',\n                    color = 'GDP',\n                    hover_name = 'Country',\n                    color_continuous_scale = px.colors.sequential.Plasma)\nfig.show()","e00bc5d7":"columns = ['Country', 'Score', 'Year']\nhappiness_scores = happiness.loc[:, columns]\nscore_diiference = happiness_scores.groupby('Country')['Score'].agg(['first','last'])\nscore_diiference['difference'] = score_diiference['first'] - score_diiference['last']\nscore_diiference.sort_values('difference', inplace=True)","4d98872f":"# Top five and last five differences\nscore_diiference.iloc[np.r_[0:5, -5:0]]","f2a55b81":"pos_dif_coun = score_diiference.head(n=4).index\nneg_dif_coun = score_diiference.tail(n=4).index\n\nfig, ax = plt.subplots(1, 2, figsize=(15, 8))\nfor pos_con, neg_con in zip(pos_dif_coun, neg_dif_coun):\n    sns.lineplot(x=happiness_scores[happiness_scores['Country']==pos_con]['Year'],\n               y=happiness_scores[happiness_scores['Country']==pos_con]['Score'], \n               label=pos_con, ax=ax[0], marker='o')\n\n    sns.lineplot(x=happiness_scores[happiness_scores['Country']==neg_con]['Year'],\n               y=happiness_scores[happiness_scores['Country']==neg_con]['Score'], \n               label=neg_con, ax=ax[1], marker='o')\n\nax[0].set_title('Postive Happiness Score Changes', fontdict={'fontweight':'bold', 'color':'green'})\nax[1].set_title('Negative Happiness Score Changes', fontdict={'fontweight':'bold', 'color':'red'})\n\nfor i in range(2):\n    ax[i].xaxis.set_major_locator(MaxNLocator(integer=True))\n    ax[i].set_xlabel('Year', fontweight='bold')\n    ax[i].set_ylabel('Score', fontweight='bold')\n    ax[i].legend(fancybox=True, framealpha=1, shadow=True, borderpad=1)\n    ax[i].grid(False)\n\nplt.show()","f9ebd4e5":"columns = ['GDP','Family', 'Life Expectancy', 'Freedom', 'Trust', 'Generosity']\nyearwise_mean = happiness.groupby(by=['Year'])[columns].mean()\nyearwise_mean","5ea97127":"fig, ax = plt.subplots(1, 1, figsize=(13, 9))\nfor column in columns:\n    plot = sns.lineplot(x=yearwise_mean.index, y=yearwise_mean[column], ax=ax, \n               label=column, marker='o')\n\n    for index, value in yearwise_mean[column].iteritems():\n        plot.text(x=index, y=round(value, 2)*1.02, s=round(value, 2), \n                  ha='center', color='black')\n\nax.set_title('Changes of Features Over The Years', fontweight='bold')\nax.xaxis.set_major_locator(MaxNLocator(integer=True))\nax.set_xlabel('Year', fontweight='bold')\nax.set_ylabel('Mean Value', fontweight='bold')\nax.legend(fancybox=True, framealpha=1, shadow=True, borderpad=1, \n          loc='center left', bbox_to_anchor=(1, 0.5))\nax.grid(False)\nplt.show()","4b62a88e":"## Concatenating Dataset","85192f28":"As we thought, We found a good relationship between Happiness and Government Trust in happy countries. As you can see from the regplot, if we narrow the happiness score from 6.0 maybe we can find a better regression line.\n\nLet's do the same for generosity","bb4db6b8":"# Analysis of Data - 2015\n","612ceb3e":"## World Maps for Happiness Scores","b7e5cb70":"## Filtering - Data 2018","17e41968":"# Data Wrangling","cbc100ed":"Now see zeros in the data.","1a929c24":"## In the Search of Missings\n\nLet's see if the data has any missings.\n\nAlso see the scatters, descriptive table; all features has minimum scores == 0\nWe will replace 0's with np.NaN, and impute them with KNN. ","293c0c71":"As per the above barplot, Australia, New Zealand and North America have the highest happiness score while Sub Saharan Africa has lowest happiness score in 2015. ","f0a58315":"# Reading Dataset","1b3f2850":"# Analysis of Data - Remaining Years (2016 - 2019)\n\nWe have analysed data 2015 and found some interesting patterns and relation between features. Now, we will analyse the data of 2016-2019 years with plotly library.\n\nFirst we will see heatmaps and then top happy, sad, rich and poor countries in each year.","e4b0a521":"## Filtering - Data 2015 ","8af2b746":"The scatterplots show us GDP, Family Support, Life Expectancy, and Freedom are highly correlated with Happiness scores of the countries. \n\nFurther more, We see that Trust follows a trend in happy countries. We would like to analyze that.","a631d620":"It is nearly the same with Trust. People living in happy countries trusting their governments more than un_happy countries. However, this may be vise versa;\nIf you trust your governemnt, and with GDP you have, you are generous you are happier.","6e6490ee":"# World Happiness Report 2015 - 2019 Analysis\n\n![image](https:\/\/ichef.bbci.co.uk\/news\/976\/cpsprodpb\/A204\/production\/_106067414_2.jpg)\n\nThe  **World Happiness Report**, published by the Earth Institute and co-edited by the institute\u2019s director, Jeffrey Sachs, reflects a new worldwide demand for more attention to happiness and absence of misery as criteria for government policy. It reviews the state of happiness in the world today and shows how the new science of happiness explains personal and national variations in happiness.  It contains articles and rankings of national happiness, based on respondent ratings of their own lives, which the report also correlates with various (quality of) life factors.\n\nThe report being published since 2012 to our day, giving insights about the happiness ranks of different countries around the world. The data has five csv's which includes different years' happiness rankings. \n\nData is collected from people in over 150 countries. Each variable measured reveals a populated-weighted average score on a scale running from 0 to 10 that is tracked over time and compared against other countries. These variables currently include:\n\n- real GDP per capita\n- social support\n- healthy life expectancy\n- freedom to make life choices\n- generosity\n- perceptions of corruption\n\nIn this notebook, we tried to answer;\n\n- What makes people in a county happy?\n\n- In which countries the happiness scores changed remarkably? \n\n- In total, from 2015 to 2019, how did the variables change?\n\nWe hope you have a good time reading this notebook. \n","e0c7d416":"Over the time all the above features have changed. 'GDP' increased for the first few years which shows economic growth but in 2018 there is a recession from which the world made recovery in the next year. 'Family' feature didn't have a nice start and showed a decline by 0.197 in the very first year. But it made a huge recovery in 2017 by 0.395 and showed positive movement till the end. Feature 'Life Expectancy' declined in the first few years but made immense recovery in two years only. That may be possible because of improvement in medical care, education, lifestyle and many more. 'Freedom' feature had many ups and downs. It first shows decline and then incline and then again decline. Change in feature 'Trust' tells us that it needs priority because it is continuously declining. Feature 'Generosity' shows a very similar pattern to GDP as it increased for the first few years, then declined for a year and then showed a small rise.","b3cef048":"Over the years, Denmark always occupied one of the top 3 positions for happiest countries. Switzerland came down one position every year. Finland occupied 5th position in 2016 and 2017 year but jumped to 1st position for both 2018 and 2019 year which is a significant improvement. Also, Luxembourg was not in the top 15 for 2016-2018 year but in 2019 it came in the top 15 happiest countries. \n","3cec1cb9":"There are still 25 Regions which have NA value. We will use the following dictionary to fill remaining NA values.","59fe110b":"Money buys happiness, globally :)\n\nLet's investigate both bar charts. We know this is an extra job, because Scatter plots gave us the relations between Score and GPD.\n\nFor the richest, we see they have a happiness score of minimum 5.47 but as you can see this is an outlier.  The next country has a score of 6.29. While the happiest country has a score of 7.49 we can say money can bring you a good amount of happiness. But it is obvious that you can't rely your happiness on money only.\n\nFor the unwealthy countries, some interesting outcomes we have here: \n\nCongo - Kinshasa, has a happiness score of 4.52 and Malawi, the 3rd, has 4.29. The happiest among the unwealthy countries is Somali with a score of 5.06. This bar chart supports our discussion that money effects happiness but you cannot rely everything on money. But keep it in mind that money has a good effect on happiness.\n","676d9c02":"Now I want to investigate the changes to happiness scores by years. I will only extract 2015 happiness score from 2019 happiness, and investigate countries which are drastically decreased, if there are any.\n","3b140cea":"# Conclusion\n\nThere are many factor that affects happiness of citizens of a country. In the data we had, with the given features we could assume that mainly GDP, Family support and Life expectancy affects happiness of a country. In addition to that Trust scores of the happy countries is correlated with the happiness scores. These findings made us think of one simple explaination. \n\nOur explanation for that is simple : **Maslow's Hierarchy of Needs**\n\n![image](https:\/\/www.simplypsychology.org\/maslow-needs2.webp)\n\n[Image Credit](https:\/\/www.simplypsychology.org\/maslow.html)\n\nAccording to Maslow's hierarchy, If you can find yourself food, water, safe place to sleep , protect yourself from any kind of harms , you can start to think about others. These 'others' are firstly your loved ones - family, significant other, children etc. If you think you provided safety, love and other things for your primary chain you can think about Self-fulfillment needs.  \nAt this point, an individual now thinks about self-actualiziation. We, humans, do this by many different ways, and generosity is one of the ways of people's self-actualiziation. \n\nFor unhappy countries, these counties are from Africa, Middle East. They are dealing with poverty, hunger, safety issues if not dealing with civil wars. So, it is thought that people in these countries have no opportunity to think about other but themselves and family. ","a9339530":"Among the rich countries, only Honk Kong seems to be slighlt unhappy. This finding may require extra investigation.  Apart from Hong Kong, Northern America, Arabic Oil Rich countries, and Northern European countries are in the top 15 for all years. Bahrain showed itself on the list in 2017 and then dissepeared after.\n\nAlso we observe, rich countries have a happiness score at least 6.00.","78c1ef5b":"## Filtering - Data 2017","95900824":"## Region Wise Happiness Score in 2015","1c46a339":"As you can see we have zeros; lets change them to NaN's.","86497fbc":"## Can Money Buy Happiness?","43565a48":"# Importing Libraries","c56daa65":"# Analysing Dataset Functions","3148f158":"As in the rich countries, we have countries that can be accepted as semi-happy which are poor (Somaliland Region for instance). And again, as in the rich countries, these values seem to be outliers. Generally speaking, the countries with a low GPD have a happiness score in range 2.8 to 4.5.","7cb45149":"As expected. For all years happiness relies on GDP , family and life expectancy. However, as you can see GDP and Life expectancy has a high correlation and high variance inflation factor score. We might not be sure about which one effects happiness the most. \n\nNow let's plot happiest and unhappiest countries:","1c708968":"Burundi for the time period 2016-2018 was either last or second last in least happiest countries but in 2019 it jumped to 12th position from last which is noteworthy advancement. \n\nSyria, made it to a slightly higher place. But as you can see, its GPD decreased over time.\n\nAfghanistan had many ups and downs. In 2016, it was at 4th last position and then jumped to 15th last position in the next year only. Since then, Afghanistan is coming down and further down which is very dreadful. \n\nUganda, Burkina Faso and Chad did appear in 2016 barplot but then vanished from 2017-2019 barplot which is a remarkable boost. Berlin, Togo and Guinea did pop up in bar plots of 2016 and 2017 but they faded away in bar plots of 2018 and 2019 which is again incredible.","7ae13964":"## Score change over the years","5313fe34":"## Filtering - Data 2019","50092a1a":"## Filtering - Data 2016","d29d7c8c":"## Who is the Happiest and least Happy in the World in 2015","6045e350":"We believe, it is better now. ","9645013b":"So,\n\nThe 2015 and 2016 data columns are similar. (except standard deviation and CI. We have a formula for to find CI (for 2015 data) and STD from CI for (2016 data).\nThe formula : \nSD = sqrt(N) * (upper limit - lower limit) \/ 3.92 \n\n    note = 3.92 is for data bigger than 100 samples\n\n2018 and 2019 data columns are similar also. But they don't have STD and CI's. hmm let's think about that.  Maybe we can remove CI and STD\n\nThe first thing I would like to do is rename columns with easier names :) \n\nCountry names can stay as they are. Region also can stay- I will concatenate df's on 2015 on Country column, we don't need to do sth.\nHappiness Rank = Rank, Happiness Score = Score, Std error = remove, Economy (GDP per capita) = GDP, Health (Life expectancy) = Life expectancy and on. You'll see them in the following section. No need to comment them all. Let's start to rename.\n","2ad0e189":"## Transformation of Features","a84add8c":"Venezuela and Lesotho got sad by time by a good amount. \n\nI would like to investigate happiness scores of each country in each year.","1232bf4d":"# Time Series Analysis","f603f767":"Nordic countries, Canada, New Zeland and Australia are the happiest countries in the world. On the other hand, African and Easian countries which suffer a lot from poverty or wars (Syria) are the unhappiest countries of all."}}