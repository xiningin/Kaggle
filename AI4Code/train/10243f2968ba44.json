{"cell_type":{"fea97a40":"code","0c5da943":"code","f7383667":"code","b3f5579f":"code","a942bc66":"code","3d72b002":"code","69033550":"code","a66efccd":"code","76807210":"code","450f8e24":"code","e85fecd1":"code","87b49a4d":"code","37a29a9c":"code","092bdc86":"code","35e032f2":"code","aee2597a":"code","ede0bff1":"code","bf6e7593":"code","db87932a":"code","969b71d1":"code","b5cdf867":"code","b9a1b7b5":"code","58a045dc":"code","3954be71":"code","22f68cd0":"markdown","6a9248d5":"markdown","411eac3a":"markdown","a30e5f58":"markdown","5ac51cec":"markdown","48ceccde":"markdown","dbb7f9f9":"markdown","a10a5912":"markdown","1678feb5":"markdown","35683acb":"markdown","75cb2dc7":"markdown","13b33e39":"markdown","52762e95":"markdown","462ce61e":"markdown","5141dc40":"markdown"},"source":{"fea97a40":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport seaborn as sns\nimport matplotlib as plt\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","0c5da943":"train_df = pd.read_csv('\/kaggle\/input\/titanic\/train.csv')\ntest_df = pd.read_csv('\/kaggle\/input\/titanic\/test.csv')","f7383667":"print(\"*\"*10, \" Dataset Information \", \"*\"*10 )\nprint(train_df.info())\ntrain_df.head()","b3f5579f":"print(\"*\"*10, \" Dataset Information \", \"*\"*10 )\nprint(test_df.info())\ntest_df.head()","a942bc66":"train_df.drop(['Name','Ticket','Cabin'],inplace=True,axis=1,)\ntest_df.drop(['Name','Ticket','Cabin'],inplace=True,axis=1)","3d72b002":"train_df.head()","69033550":"data = [train_df,test_df]\nfor dataset in data:\n    dataset['Age'] = dataset['Age'].fillna(dataset['Age'].mean())\n    dataset['Fare'] = dataset['Fare'].fillna(dataset['Fare'].mean())","a66efccd":"data = [train_df,test_df]\nfor dataset in data:\n    dataset['Embarked'] = dataset['Embarked'].fillna('S')","76807210":"genderMap = {\"male\": 0, \"female\": 1}\ndata = [train_df,test_df]\nfor dataset in data:\n    dataset['Sex'] = dataset['Sex'].map(genderMap)","450f8e24":"embarkedMap = {\"S\": 0, \"C\": 1, \"Q\": 2}\ndata = [train_df,test_df]\nfor dataset in data:\n    dataset['Embarked'] = dataset['Embarked'].map(embarkedMap)","e85fecd1":"tempFare = train_df['Fare']\ntempFare = pd.qcut(tempFare, 5)\ntempFare.value_counts()","87b49a4d":"data = [train_df, test_df]\n\nfor dataset in data:\n    dataset.loc[(dataset['Fare'] <= 7.854), 'Fare'] = 0\n    dataset.loc[(dataset['Fare'] >= 7.854) & (dataset['Fare'] <= 10.5), 'Fare'] = 1\n    dataset.loc[(dataset['Fare'] >= 10.5) & (dataset['Fare'] <= 21.679), 'Fare'] = 2\n    dataset.loc[(dataset['Fare'] >= 21.679) & (dataset['Fare'] <= 39.688), 'Fare'] = 3\n    dataset.loc[(dataset['Fare'] >= 39.688), 'Fare'] = 4\n    \n    dataset.Fare = dataset['Fare'].astype(int)\ntrain_df.Fare.value_counts()","37a29a9c":"tempAge = train_df['Age']\ntempAge = pd.qcut(tempAge, 5)\ntempAge.value_counts()","092bdc86":"data = [train_df, test_df]\n\nfor dataset in data:\n    dataset.loc[(dataset['Age'] <= 20), 'Age'] = 0\n    dataset.loc[(dataset['Age'] >= 20) & (dataset['Age'] <= 28), 'Age'] = 1\n    dataset.loc[(dataset['Age'] >= 28) & (dataset['Age'] <= 29.699), 'Age'] = 2\n    dataset.loc[(dataset['Age'] >= 29.699) & (dataset['Age'] <= 38), 'Age'] = 3\n    dataset.loc[(dataset['Age'] >= 38), 'Age'] = 4\n    \n    dataset.Age = dataset['Age'].astype(int)\ntrain_df.Age.value_counts()","35e032f2":"X_train = train_df.drop(['PassengerId','Survived'], axis=1)\nY_train = train_df['Survived']","aee2597a":"X_test = test_df.drop('PassengerId', axis= 1)\n","ede0bff1":"X_test.info()","bf6e7593":"from sklearn.linear_model import LogisticRegression\nclf_lr = LogisticRegression(random_state=0)\nclf_lr.fit(X_train,Y_train)\n\nacc_lr = round(clf_lr.score(X_train, Y_train)*100, 2)\nprint (acc_lr)","db87932a":"from sklearn.svm import SVC\nclf_svc = SVC()\nclf_svc.fit(X_train,Y_train)\n\nacc_svc = round(clf_svc.score(X_train, Y_train)*100, 2)\nprint (acc_svc)","969b71d1":"from sklearn.naive_bayes import GaussianNB\nclf_gnb = GaussianNB()\nclf_gnb.fit(X_train,Y_train)\n\nacc_gnb = round(clf_gnb.score(X_train, Y_train)*100, 2)\nprint (acc_gnb)","b5cdf867":"from sklearn.linear_model import RidgeClassifier\nclf_rc = RidgeClassifier()\nclf_rc.fit(X_train,Y_train)\n\nacc_rc = round(clf_rc.score(X_train, Y_train)*100, 2)\nprint (acc_rc)","b9a1b7b5":"from sklearn.neighbors import KNeighborsClassifier\nclf_knn = KNeighborsClassifier(n_neighbors=1)\nclf_knn.fit(X_train,Y_train)\n\nacc_knn = round(clf_knn.score(X_train, Y_train)*100, 3)\nprint (acc_knn)","58a045dc":"Y_pred = clf_svc.predict(X_test)","3954be71":"output = pd.DataFrame({'PassengerId':test_df['PassengerId'],'Survived':Y_pred})\noutput.to_csv('my_submission.csv',index=False)\nprint(\"Done\")","22f68cd0":"## **Asigning X_train,X_test,Y_train,Y_test**","6a9248d5":"# **Spliting Fare into Range**","411eac3a":"### RidgeClassifier (Accuracy 76.88%)","a30e5f58":"# **Importing and reading csv files**","5ac51cec":"# **Test_df Dataset Information**","48ceccde":"# **Train_df Dataset Information**","dbb7f9f9":"### KNeighboursClassifier (Accuracy 76.88%)","a10a5912":"# **Droping Columns (Not required) BASELINE**","1678feb5":"## **Mapping Embarked (S = 0, C = 1, Q = 2)**","35683acb":"# **Spliting Age into Range**","75cb2dc7":"### LogisticRegession (Accuracy 80.81%) {Ideal}","13b33e39":"## **Mapping Gender (Male = 0 ,Female = 1)**","52762e95":"### SVC (Accuracy 81.93)","462ce61e":"### GaussianNB (Accuracy 76.88%)","5141dc40":"# **Replacing Null Values**"}}