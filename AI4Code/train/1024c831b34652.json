{"cell_type":{"7dde867f":"code","8ab42ac5":"code","4848ac9d":"code","ee49269e":"code","2800a7d4":"code","1ec710f1":"code","9717b779":"code","1e99913c":"code","326d5e80":"code","5d440bd1":"code","be5fd2ce":"code","4a0e66f5":"code","cd0b7c75":"code","dfdac386":"code","649ea688":"code","396df71e":"code","e285bb9b":"code","5cdb229f":"code","8d3e3518":"code","fab37fbf":"code","36f6d80a":"code","c4931ba8":"code","e14c74f9":"code","38292c7b":"markdown","78d774ef":"markdown","38786611":"markdown","067ff935":"markdown","8a5dd35b":"markdown","6967e88c":"markdown","80b2e574":"markdown","4b9f1eef":"markdown","15ad8169":"markdown","32f35fc7":"markdown","33774198":"markdown","644c3f33":"markdown","cff90806":"markdown","6124f8b2":"markdown","db872a06":"markdown"},"source":{"7dde867f":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport seaborn as sns\nfrom datetime import datetime as dt\nfrom sklearn import metrics\nfrom sklearn.model_selection import train_test_split\nfrom catboost import CatBoostRegressor, Pool\n\nimport matplotlib.pyplot as plt\nimport plotly.express as px\nimport plotly.graph_objects as go\n\nimport re, string, sys, pprint\nfrom datetime import datetime\n\nsns.set()\n%matplotlib inline\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session\n\n#========================================================\n#submission line with output table in submission format, this file will show up in output folder on right\n# output.to_csv('submission.csv,index=False')","8ab42ac5":"trainset = pd.read_csv('\/kaggle\/input\/bike-sharing-demand\/train.csv', index_col=False)\ntestset = pd.read_csv('\/kaggle\/input\/bike-sharing-demand\/test.csv', index_col=False)\n\ntrain=trainset.copy()\ntest=testset.copy()\n\ndisplay(train.head(3))\ndisplay(test.head(3))","4848ac9d":"def exploreset(mydataset):\n    print(\"\\n=============\\n\")\n    print(\"COLUMNS IN DATASET: \",\"\\n\", mydataset.columns,\"\\n\")\n    print(\"ROWS\/INDEX IN DATASET: \",\"\\n\", mydataset.index,\"\\n\")\n    print('SHAPE OF DATASET: ',\"\\n\",mydataset.shape,\"\\n\")\n    print('SIZE OF DATASET: ',\"\\n\",mydataset.size)\n    print(\"\\n=============\\n\")\n    print('COUNT of ISNA in each COLUMN',\"\\n-----------\")\n    print(mydataset.isna().sum(axis=0))\n    print(\"\\n=============\\n\")\n    print('DATASET INFO',\"\\n-----------\")\n    print(mydataset.info(),\"\\n\")\n    print(\"\\n=============\\n\")\n    print('DATASET DESCRIPTION',\"\\n-----------\")\n    print(mydataset.describe(),\"\\n\")\n    print(\"\\n=============\\n\")\n    print('DATASET CORRELATIONS',\"\\n-----------\")\n    print(mydataset.corr(),\"\\n\")\n\n        \ndef ISNAValues(mydataset):\n    print('COLUMNS with ISNA VALUES',\"\\n===\")\n    for column_name, isna in mydataset.isna().items():\n        try:\n            if isna.sum() > 0:\n\n                    print(\"\/\/\", column_name, ' type     : ', type(mydataset[column_name][1]))\n                    print(\"\/\/\", column_name, ' na count : ', isna.sum(),\"\\n\")\n\n        except:\n            print(\"Error\",\"\\n\")\n\n\ndef uniquevalues(mydataset):\n    print(\"\\n=============\\n\")\n   \n    print('COUNT of UNIQUE VALUES in each COLUMN',\"\\n-----------\")\n    print(mydataset.nunique(),\"\\n\")\n \n    print('DETAILS OF COLUMNS WITH UNIQUE VALUES >0',\"\\n===\")\n    for column_name, nunique in mydataset.nunique().items():\n        if nunique >0:\n            print(column_name, ':', mydataset[column_name].unique(),'\/\/ uniq : ', round(mydataset[column_name].nunique(),1))\n            print(mydataset[column_name].value_counts(),\"\\n====\\n\")\n            \n ","ee49269e":"def run_analysis_imports(mydataset):\n    exploreset(mydataset)\n    ISNAValues(mydataset)\n    uniquevalues(mydataset)   ","2800a7d4":"print('TRAIN DATA')\nrun_analysis_imports(train)","1ec710f1":"print('TEST DATA')\nrun_analysis_imports(test)\n\n\n# columns in train but not in test data >>  \n# casual - number of non-registered user rentals initiated\n# registered - number of registered user rentals initiated\n# count - number of total rentals\n\n#count of each date in test data need to be predicted","9717b779":"\ndata=train.copy()\n\nfig,ax=plt.subplots(1,1, figsize=(6,5))\n\n\nsns.histplot(data['count'], ax=ax, stat='count')\nax.set(xlabel = 'Total Rentals', ylabel=\"Frequency\", title = \"Density plot of Response Variable\")","1e99913c":"#Boxplot of response variable\n\ndata=train.copy()\n\nfig,ax=plt.subplots(1,1, figsize=(6,5))\n  \nsns.boxplot(data=data, y='count')\nax.set(ylabel = 'Total Rentals', title = \"Boxplot of Response Variable\")\n\n","326d5e80":"print(f\"Mean: {np.mean(data['count'])}\")\nprint(f\"Median: {np.median(data['count'])}\")\n","5d440bd1":"#Visualise distribution of outcome against predictors\n\ndata=train.copy()\n# total_rentals=np.log(data['count'])\n\nx=['season','weather','holiday','workingday']\n \n\nfor i in range(len(x)):\n    \n    fig,ax=plt.subplots(1,1, figsize=(6,5)) \n    sns.boxplot(data=data, y='count', x=x[i])\n    ax.set(ylabel = 'Total Rentals', title = \"Boxplot of Total Rentals against Predictor\")","be5fd2ce":" \ndata=train.copy()\n# total_rentals=np.log(data['count'])\n\n# x=['season','weather','holiday','workingday']\ny = ['casual','registered','count']\nfig,ax=plt.subplots(1,3, figsize=(24,6))\n\n\n\nfor i in range(len(y)):\n#     for j in range(len(x)):\n\n        \n#         ax.set_title(\"Boxplot of response variable against predictor :\"+str(x[j]))\n        sns.boxplot(data=data, y=y[i], x='weather',ax=ax[i],palette='Blues')\n    \n","4a0e66f5":"#Enhance datetime in the data sets \n\n# convert ['datetime'] to datetime obj\ntrain['datetime'] = train.apply(lambda eachrow: dt.strptime(eachrow['datetime'], \"%Y-%m-%d %H:%M:%S\"), axis=1)\n\nprint(type(train['datetime'][1]))\n\n\n# add 'year', 'month', 'day', 'hour' columns\ntrain['year'] = train['datetime'].dt.year\ntrain['month'] = train['datetime'].dt.month\ntrain['day'] = train['datetime'].dt.day\ntrain['hour'] = train['datetime'].dt.hour\n# train['time'] = train['datetime'].dt.time #delete this? exactly same as hour\n\n\n# add 'day of week' column\ntrain['day of week'] = train['datetime'].dt.dayofweek\n","cd0b7c75":"#Visualise distribution of outcome against Month\ndata=train.copy()\n \nmypalette=['dodgerblue','dodgerblue','dodgerblue','gray','gray','gray','gray','gray','gray','gray','gray','gray']\n\n    \ny = ['casual','registered','count']\nfig,ax=plt.subplots(1,3, figsize=(24,6))\nfor i in range(len(y)):\n\n        sns.boxplot(data=data, y=y[i], x='month',ax=ax[i],palette=mypalette)","dfdac386":"# Categorical 'am' column \n\ndef ampm(row):\n    am_list = list(range(12))\n    if row['hour'] in am_list:\n        return 1\n    else:\n        return 0  \n    \ntrain['am_morning'] = train.apply(lambda row: ampm(row), axis=1)\n","649ea688":"# Categorical 'peak hour' column \n\ndef peak_hour(row):\n    ph_list = [7, 8, 9, 16, 17, 18, 19]\n    if row['hour'] in ph_list:\n        return 1\n    else:\n        return 0  \n    \ntrain['peak hour'] = train.apply(lambda row: peak_hour(row), axis=1)\n","396df71e":"# Categorical 'atemp' \n\n# group temps in 5deg intervals (e.g. 1: 0=<atemp<4.99, 2: 5=<atemp<10.99, ... 9: atemp=>40)\n\ndef cat_atemp(atemp):\n    \n    if 0<= atemp <4.99:\n        return 1\n    elif 5<= atemp <9.99:\n        return 2\n    elif 10<= atemp <14.99:\n        return 3\n    elif 15<= atemp <19.99:\n        return 4\n    elif 20<= atemp <24.99:\n        return 5\n    elif 25<= atemp <29.99:\n        return 6\n    elif 30<= atemp <34.99:\n        return 7\n    elif 35<= atemp <39.99:\n        return 8\n    else:\n        return 9\n    \nprint(train['atemp'].min(), train['atemp'].max())\ntrain['cat atemp'] = train.apply(lambda eachrow: cat_atemp(eachrow['atemp']), axis=1)\ntrain.sample(5)","e285bb9b":"print(\"COLUMNS IN DATASET: \",\"\\n\", train.columns,\"\\n\")","5cdb229f":"#Visualise with boxplots on new categorical predictors\n\ndata=train.copy()\ntotal_rentals=np.log(data['count'])\n\nx=['cat atemp','day of week', 'am_morning','peak hour']\n \n\nfor i in range(len(x)):\n    \n    fig,ax=plt.subplots(1,1, figsize=(6,5)) \n    sns.boxplot(data=data, y='count', x=x[i])\n    ax.set( ylabel = 'Total Rentals', title = \"Boxplot of Total Rentals against predictor\")","8d3e3518":" \ndata=train.copy()\n\ny = ['casual','registered','count']\nfig,ax=plt.subplots(1,3, figsize=(24,6))\nfor i in range(len(y)):\n\n        sns.boxplot(data=data, y=y[i], x='day of week',ax=ax[i],palette='Blues',hue='peak hour')\n    \n","fab37fbf":"#Sat_EM\n\n\ndata=train.copy()\ndata=data.loc[:,[\"count\",'registered','casual','weather','peak hour']]\ngrouped4 = data.groupby(['weather','peak hour']).sum()\n\ndata=train.copy()\ndata=data.loc[:,[\"count\",'registered','casual','weather','am_morning']]\ngrouped5 = data.groupby(['weather','am_morning']).sum()\n\n\ndisplay(grouped4)\ndisplay(grouped5)\n\n\n# # print(grouped.index, '\\n')\n# grouped5.loc[(1,4)]\n\n","36f6d80a":"# Correlation Heatmap without categorical columns except for binary types\ndata=train.copy()\ndata_corr = data.drop(columns=['datetime','weather','year','day','hour','day of week'])\ncorrmat = data_corr.corr()\nfig, ax = plt.subplots(figsize=(10,10))\n\nsns.heatmap(corrmat, annot=True,fmt='.2f', annot_kws={'size':10},square=True)\n","c4931ba8":"# # We  explore the correlation matrix for various aspects of weather, atemp, humidity, windspeed against rentals\n\ndata=train.copy()\ndata_corr =data.loc[:,['registered','windspeed','humidity','atemp']]\ncorrmat = data_corr.corr()\nfig, ax = plt.subplots(figsize=(3,3))\n\nk = 4\ncols = corrmat.nlargest(k, 'registered').loc[:,'registered'].index\ncm = data_corr.loc[:,cols].corr()\nsns.set(font_scale=1.25)\nsns.heatmap(cm, cbar=True, annot=True,square=True, fmt='.1f', annot_kws={'size':10}, yticklabels=cols.values, xticklabels=cols.values)\n\n\ndata=train.copy()\ndata_corr =data.loc[:,['casual','windspeed','humidity','atemp']]\ncorrmat = data_corr.corr()\nfig, ax = plt.subplots(figsize=(3,3))\n\nk = 4\ncols = corrmat.nlargest(k, 'casual').loc[:,'casual'].index\ncm = data_corr.loc[:,cols].corr()\nsns.set(font_scale=1.25)\nsns.heatmap(cm, cbar=True, annot=True,square=True, fmt='.1f', annot_kws={'size':10}, yticklabels=cols.values, xticklabels=cols.values)\n\n","e14c74f9":"# Test data setup (should we be doing the pipeline?)\n\ntest['datetime'] = test.apply(lambda eachrow: dt.strptime(eachrow['datetime'], \"%Y-%m-%d %H:%M:%S\"), axis=1)\n\ntest['year'] = test['datetime'].dt.year\ntest['month'] = test['datetime'].dt.month\ntest['day'] = test['datetime'].dt.day\ntest['hour'] = test['datetime'].dt.hour\n# test['time'] = test['datetime'].dt.time #delete this? exactly same as hour\n\ntest['day of week'] = test['datetime'].dt.dayofweek\n\ntest['peak hour'] = test.apply(lambda row: peak_hour(row), axis=1)\ntest['cat atemp'] = test.apply(lambda eachrow: cat_atemp(eachrow['atemp']), axis=1)\n\ntest.sample(5)","38292c7b":"* Total rentals remain fairly consistent across seasons except when it is spring (season 1) which span across January - March for this area.\n* It appears that bike rentals are more affected by weather than by season, we hypothesise that rentals are mainly by residents using it for day to day activities (e.g. work, errands) and therefore decides based on weather rather than vacationers who rent more during a vacation season\/period for sight-seeing purposes.\n ","78d774ef":"* The response variable, count, does not follow a normal distribution, it is very skewed to the right\n* Total rentals per hour tend to be below 50 with some outlier observations in the tail \n* Due to the skewness, we use boxplots to visualise the response","38786611":"### <ins>To Do List<\/ins>\n\n1. columns to add: Peak hour(bool), day of week(1-7), 5deg weather grouping(atemp), temp rounding   ---- ***Done except temp rounding (need to do?)***\n2. further groupings which could show hypotheses\n3. one-hot encoding categorical for complete heat map\n3. catboost !!! \n4. split predictions for 'casual' and 'registered' users, then sum() predictions","067ff935":"## Test Set Data\n\n* no na values\n* Matching columns and data types to train set data except for casual, registered, count are not available\n","8a5dd35b":"# Exploratory Data Analysis","6967e88c":"### <ins>Changes\/Edits<\/ins>\n\n1. Change ['datetime'] to datetime obj\n2. Added the columns 'year', 'month', 'day', 'hour', 'time', 'day of week', 'peak hour', 'cat atemp' to copied **data**\n3. Added heatmap without the categorical columns except for binary (1,0) types\n4. Adding CatBoostRegressor --- ***In Progress***","80b2e574":"* casual rentals significantly drop in the months Jan - Mar\n* registered rentals also drop slightly in the same months \n* \/\/could it be due to poor weather in those months","4b9f1eef":"* There appears to be no distinct relation between day of week and the count of rentals\n","15ad8169":"# Visualising the response","32f35fc7":"* Humidity is negatively correlated to rentals, as humidity increases, rentals decrease whereas,\n* Temperature is positively correlated to rentals, and there is a stronger correlation for casual renters than registered renters\n* Windspeed appears to have low correlation for both registered and casual rentals","33774198":"## Train set data\n\n* no na values \n\n**Count of unique values show**\n\n    * datetime      10886 unique datetime values, (hourly date + timestamp) is an object and needs processing\n    * season            4 unique categorical values where season - 1 = spring, 2 = summer, 3 = fall, 4 = winter holiday\n    * holiday           2 unique categorical values where 1 = yes\/0 = no\n    * workingday        2 unique categorical values where 1 = yes\/0 = no (whether the day is neither a weekend nor holiday ie. may overlap)\n    \n    * weather           4  unique categorical values where (1, 2, 3, 4)\n            *                         1: Clear, Few clouds, Partly cloudy, Partly cloudy \n            *                         2: Mist + Cloudy, Mist + Broken clouds, Mist + Few clouds, Mist \n            *                         3: Light Snow, Light Rain + Thunderstorm + Scattered clouds, Light Rain + Scattered clouds \n            *                         4: Heavy Rain + Ice Pallets + Thunderstorm + Mist, Snow + Fog \n        \n    * temp             49 continuous values for temperature in Celsius\n    * atemp            60 continuous values \"feels like\" temperature in Celsius \n    * humidity         89 discrete, relative humidity\n    * windspeed        28 continuous values for wind speed \n    \n    * casual          309 discrete, number of non-registered user rentals initiated\n    * registered      731 discrete, number of registered user rentals initiated\n    * count           822 discrete, number of total rentals (ie casual + registered) (RESPONSE)\n\n\n**DATASET DESCRIPTION (2 yrs of hourly data for 20 days\/mth)**\n* Weather hourly mean is 1.4 indicating that the rental coverage area is one that tends to have clear or misty weather more often than snow, or thunderstorms\n\n* Hourly Temp ranges from approx. 0 to 45 degree celcius with the mean temperature around 20 deg celcius\n\n* Temp and atemp is highly correlated (as expected) and one can be dropped. \n\n* Registered and count are highly correlated too but we keep it to analyse registered and casual users separately\n\n* Mean hourly rental by registered users is 155 much higher than mean hourly rental by casual users 36\n\n\n","644c3f33":"* Upon analysing casual and registered users separately, we see that casual renters mainly rent on weekends, Saturday & Sunday whereas registered users rent consistently throughout the week\n* There tends to be more registered renters during peak hours than non-peak hours\n* We hypothesise that registered renters tend to use bikeshare for work trips whereas casual renters mainly use for personal trips during their free time (errands and social trips)\n\n\n\nBased on surveys from Capital Bike share, indeed, most renters use bikeshare to go to\/from work and use it often for this purpose\n> Bikeshare serves both work-related and personal travel needs \u2013 Seven in ten respondents reported that they at least occasionally use bikeshare for social\/entertainment and errands\/personal ap-pointments trips, 66% use bikeshare to go out for a meal, and 55% use bikeshare for shopping trips, all non-work purposes. But 58% of respondents use bikeshare to go to\/from work and 40% use bikeshare \u201coften\u201d for this purpose. Since commuting is a frequent and required trip, bikeshare is serving a valuable basic travel function for many members. \n\n>The top bikeshare trip purposes overall are for personal \/ non-work trips but a large share of members use bikeshare for their trip to work \u2013 Seven in ten respondents reported that they at least occasionally use bikeshare for social \/ enter-tainment and errands \/ personal appointments trips and about four in ten use bikeshare \u201coften\u201d for these trips. Two-thirds said they use bikeshare for a trip to a restaurant or other location where they have a meal, 55% use bikeshare for shopping trips and 50%, use bikeshare for an exercise or recreation trip. Nearly six in ten respondents use bikeshare to go to or from work and 40% often make a commute trip by bikeshare.\n\n<source: https:\/\/www.capitalbikeshare.com\/system-data>","cff90806":"* As expected, there is presence of multicollinearity between the variables temp and atemp ('feels like temp') and we will drop the predictor temp \n* there is high correlation between registered and count because registered users comprise a significant percentage of total rentals. However, we do not drop the predictor at this stage as we would like to understand what drives casual vs registered usage","6124f8b2":"\n* Casual users drop significantly in poor weather (4)\n* We will explore the correlation matrix for various aspects of weather, atemp, humidity, windspeed against rentals","db872a06":"* The mean rental is much higher than the median due to outliers\n* To deal with the outliers, we need a statistical model such as a decision tree model otherwise to log transform the response\n"}}