{"cell_type":{"43accd94":"code","54a47159":"code","00144539":"code","ca8fcfd3":"code","15cbf41d":"code","0297dcc2":"code","3889b523":"code","bcccd441":"markdown","73f44fc4":"markdown","c11b091d":"markdown","fe76c161":"markdown","4fcf8847":"markdown","c07a3b30":"markdown"},"source":{"43accd94":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","54a47159":"#Load the matches that have already occurred \ndf = pd.read_csv(\"\/kaggle\/input\/ultimate-ufc-dataset\/ufc-master.csv\")\n\n#Load the upcoming matches\ndf_upcoming = pd.read_csv(\"\/kaggle\/input\/ultimate-ufc-dataset\/upcoming-event.csv\")\n\n#Get the number of upcoming fights\nnum_upcoming_fights = len(df_upcoming)\nprint(f\"We are going to predict the winner of {num_upcoming_fights} fights.\")\n\n#Combine the upcoming fights to the previous fights so we can clean it all at the same time.\ndf_combined = df_upcoming.append(df)\n\n#Let's put all the labels into a dataframe\ndf_combined['label'] = ''\n\n#We need to convert 'Red' and 'Blue' to 0 and 1\nmask = df_combined['Winner'] == 'Red'\ndf_combined['label'][mask] = 0\nmask = df_combined['Winner'] == 'Blue'\ndf_combined['label'][mask] = 1\n\n#Make sure label is numeric\ndf_combined['label'] = pd.to_numeric(df_combined['label'], errors='coerce')\n\n#Make sure the date column is datetime\ndf_combined['date'] = pd.to_datetime(df['date'])\n\n#Copy the labels to their own dataframe\nlabel_df = df_combined['label']\n\n#Split the train set from the test set\n\ndf_train = df_combined[num_upcoming_fights:]\nlabel_train = label_df[num_upcoming_fights:]\n\ndf_test = df_combined[:num_upcoming_fights]\nlabel_test = label_df[:num_upcoming_fights]\n\n\n#Make sure the sizes are the same\nprint(len(df_test))\nprint(len(label_test))\n\nprint(len(df_train))\nprint(len(label_train))\n\nfrom sklearn.tree import DecisionTreeClassifier\n#Pick a model\nmy_model = DecisionTreeClassifier(max_depth=5)\n\n#Pick some features\n#I would not recommend placing bets based off of these features...\nmy_features = ['R_odds', 'B_Stance']\n\n#Let's grab the names of the fighters for the upcoming event\n#This will be useful to print predictions at the end.\nfighters_test = df_test[['R_fighter', 'B_fighter']]\nodds_test = df_test[['R_odds', 'B_odds']]\n\n\n#Make dataframes that only contain the relevant features\ndf_train_prepped = df_train[my_features].copy()\ndf_test_prepped = df_test[my_features].copy()\n\n#If we need to dummify the datasets do it now.  We need to be careful that the test set has all of the features\n#that the training set does\n\ndf_train_prepped = pd.get_dummies(df_train_prepped)\ndf_test_prepped = pd.get_dummies(df_test_prepped)\n\n#Ensure both sets are dummified the same\ndf_train_prepped, df_test_prepped = df_train_prepped.align(df_test_prepped, join='left', axis=1)    \n\n#The new test set may have new new features after the above join.  Fill them with zeroes\ndf_test_prepped = df_test_prepped.fillna(0)\n\n#Since we may have dropped some rows we need to drop the matching rows in the labels\nlabel_train_prepped = label_train[label_train.index.isin(df_train_prepped.index)]\nlabel_test_prepped = label_test[label_test.index.isin(df_test_prepped.index)]\nfighters_test_prepped = fighters_test[fighters_test.index.isin(df_test_prepped.index)]\nodds_test_prepped = odds_test[odds_test.index.isin(df_test_prepped.index)]\n\n\n#Quick test that lengths match.\nprint(len(label_train_prepped))\nprint(len(df_train_prepped))\nprint(len(label_test_prepped))\nprint(len(df_test_prepped))\nprint(len(fighters_test_prepped))\nprint(len(odds_test_prepped))\n\nmy_model.fit(df_train_prepped, label_train_prepped)\n\nprobs = my_model.predict_proba(df_test_prepped)","00144539":"probs","ca8fcfd3":"#Merge fighter names and probabilities\n\nfighters_array = fighters_test_prepped.to_numpy()\n\ncombined_array = []\n\nfor n in range(len(fighters_array)):\n    combined_array.append([fighters_array[n][0], fighters_array[n][1], probs[n][0], probs[n][1]])\n\ndisplay(combined_array)","15cbf41d":"column_names = ['R_fighter', 'B_fighter', 'R_prob', 'B_prob']\n\ntemp_df = pd.DataFrame(combined_array, columns = column_names)","0297dcc2":"display(temp_df)","3889b523":"temp_df.to_csv('matts_sample_submission.csv', index=False)","bcccd441":"# Purpose\n\nI plan on adding a task for each upcoming UFC event where users can upload their fight predictions and these will be judged after the event to see what submission was most profitable.  You can see the task for UFC 251 here: https:\/\/www.kaggle.com\/mdabbert\/ultimate-ufc-dataset\/tasks?taskId=1285\n\nThe format of the submission will be a csv file with 4 columns:\n* `R_fighter`: Red fighter name\n* `B_fighter`: Blue fighter name\n* `R_prob`: Red fighter probability of winning (between 0 and 1)\n* `B_prob`: Blue fighter probability of winning (between 0 and 1)\n\nI will show how to create this file for a valid submission from a trained model.  \n","73f44fc4":"We have the appropriate data for a submission.  We just need to save it and upload it to the task.  You can save it like this, and then submit the saved file to the appropriate task.  The output should be saved to the kaggle\/working folder you can access to the right.","c11b091d":"# Train model and get predictions\n\nThis is based off of my notebook found here: https:\/\/www.kaggle.com\/mdabbert\/tutorial-train-a-model-to-make-bet-predictions\n\nDiscussion on what is going on in this code can be found there","fe76c161":"That's all there is to it!  I'm new to Kaggle and data science in general.  Any questions, comments, or suggestions are welcome!  ","4fcf8847":"We have the probabilities and the fighter names.  We merge these lists and use that to create a dataframe.\n\n","c07a3b30":"Make a dataframe with the fighter names and odds.  Include proper column names"}}