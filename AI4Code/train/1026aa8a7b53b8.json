{"cell_type":{"4cfaae7c":"code","4d8e89a8":"code","1d9c00e4":"code","c7d92458":"code","ed50df9c":"code","bd0136bd":"code","a3142e53":"code","55b87973":"code","fdef0d08":"code","428ede0a":"code","4ef9b3f8":"code","eea9f287":"code","264c3d6a":"code","051c0286":"code","ccc3d095":"code","b0ae523b":"code","452eedc4":"code","622ecc4b":"code","0b1181db":"code","eefb5ca8":"code","0e99dacc":"code","04004c1a":"code","c73a57bc":"code","ee86a67f":"code","16344ed9":"code","8c1eee5d":"code","56a20b9a":"code","0c49c257":"code","bd6340e0":"code","23a65a6d":"code","f62a9098":"code","966dcd79":"code","6f82bc8f":"code","7bae1cfb":"code","16cf9d06":"code","1a32724e":"code","8c7cf0cf":"code","c233cbd7":"code","95da9f87":"code","cc927446":"code","e6365a71":"code","7ba57500":"code","d387847f":"code","df57ab46":"code","295080d8":"code","4f1ea60c":"code","bb78453a":"code","675440d3":"code","1cc748da":"code","aae25202":"code","fb94603e":"code","4456c31c":"code","772380b2":"code","750f2b1f":"code","0fbcd6a6":"code","d4dc6a3f":"code","10e806d1":"code","1bb928b9":"code","b7fdc64a":"code","e142aed0":"code","4fb1e1ce":"code","26ee3127":"code","f3584781":"code","c2fdf5b1":"code","06d67650":"code","58230020":"code","2c039fea":"code","d071c373":"code","3da92b89":"code","1343767a":"code","52ff8a18":"code","96fa8120":"code","7803b1ac":"markdown","4a86f611":"markdown","bc878b61":"markdown","ecaeb84c":"markdown","64ce5b67":"markdown","e26dc04b":"markdown","255a81c7":"markdown","d818f6ba":"markdown","421a7451":"markdown","d78b135d":"markdown","9353fa54":"markdown","3a685f13":"markdown","a8ca3c75":"markdown","32a05822":"markdown","4837466e":"markdown","91088091":"markdown","78f37684":"markdown","9e55bde0":"markdown","761a0881":"markdown","06eb8dd7":"markdown","5e055e76":"markdown","4331ce1c":"markdown","6d8d664c":"markdown","bdb0aec3":"markdown","c76e207f":"markdown","c6ae1665":"markdown","70e1173c":"markdown","55514c98":"markdown","8944f4b5":"markdown","27cce8e4":"markdown","74905642":"markdown","7d2edb14":"markdown"},"source":{"4cfaae7c":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","4d8e89a8":"import matplotlib.pyplot as plt\nimport seaborn as sns\n%matplotlib inline","1d9c00e4":"train = pd.read_csv('\/kaggle\/input\/tabular-playground-series-apr-2021\/train.csv', index_col=['PassengerId'])\ntest = pd.read_csv('\/kaggle\/input\/tabular-playground-series-apr-2021\/test.csv', index_col=['PassengerId'])","c7d92458":"train.head()","ed50df9c":"test.head()","bd0136bd":"train.info()","a3142e53":"test.info()","55b87973":"# Check missing % of values in columns\nprint('Missing percentage in Training data')\n100 * train.isna().sum() \/ train.shape[0]","fdef0d08":"# Check missing % of values in columns\nprint('Missing percentage in Testing data')\n100 * test.isna().sum() \/ test.shape[0]","428ede0a":"train.nunique()","4ef9b3f8":"train.drop(['Name', 'Ticket', 'Cabin'], axis=1, inplace=True)\ntest.drop(['Name', 'Ticket', 'Cabin'], axis=1, inplace=True)","eea9f287":"train.Survived.value_counts()","264c3d6a":"plt.figure(figsize=(10,6))\nsns.countplot(x='Survived', data=train)\nplt.title('Survived count')\nplt.show()","051c0286":"all_cols = train.columns\nall_cols","ccc3d095":"feature_cols = train.drop('Survived', axis=1).columns\nfeature_cols","b0ae523b":"train.head()","452eedc4":"# Continuous columns\ncont_cols = ['Age','Fare']\ntrain[cont_cols].describe()","622ecc4b":"plt.figure(figsize=(16,6))\nsns.histplot(x='Age', data=train, kde=True)\nplt.title('Age distribution')\nplt.show()","0b1181db":"# See age distribution for Survived vs non-survived\nplt.figure(figsize=(16,6))\nsns.histplot(x='Age', hue='Survived', data=train, kde=True)\nplt.title('Age distribution with Survived information')\nplt.show()","eefb5ca8":"plt.figure(figsize=(16,6))\nsns.histplot(x='Fare', hue='Survived', data=train, kde=True)\nplt.title('Fare distribution')\nplt.show()","0e99dacc":"# Categorical columns\ncat_cols = [col for col in feature_cols if col not in cont_cols]\ncat_cols","04004c1a":"plt.figure(figsize=(14, 6))\nsns.countplot(x='Pclass', hue='Survived', data=train)\nplt.show()","c73a57bc":"plt.figure(figsize=(14, 6))\nsns.countplot(x='Sex', hue='Survived', data=train)\nplt.title('Gender counts with Survived information')\nplt.show()","ee86a67f":"plt.figure(figsize=(16, 6))\nsns.countplot(x='SibSp', hue='Survived', data=train)\nplt.title('SibSp counts with Survived information')\nplt.show()","16344ed9":"plt.figure(figsize=(16,6))\nsns.countplot(x='Parch', hue='Survived', data=train)\nplt.title('Parch counts with Survived information')\nplt.show()","8c1eee5d":"plt.figure(figsize=(16,6))\nsns.countplot(x='Embarked', hue='Survived', data=train)\nplt.title('Embarked counts with Survived information')\nplt.show()","56a20b9a":"train.info()","0c49c257":"missing_cols = ['Age', 'Fare', 'Embarked']","bd6340e0":"train['Embarked'] = train['Embarked'].fillna('N')\ntest['Embarked'] = test['Embarked'].fillna('N')","23a65a6d":"train.info()","f62a9098":"train['Embarked'].value_counts()","966dcd79":"train[['Age','Fare']].describe()","6f82bc8f":"from sklearn.impute import SimpleImputer","7bae1cfb":"imputer = SimpleImputer(strategy='constant', fill_value=-1)\ntrain[['Age', 'Fare']] = imputer.fit_transform(train[['Age', 'Fare']])\ntest[['Age', 'Fare']] = imputer.transform(test[['Age', 'Fare']])","16cf9d06":"train.info()","1a32724e":"test.info()","8c7cf0cf":"plt.figure(figsize=(16,6))\nsns.histplot(x='Age', data=train, kde=True)\nplt.show()","c233cbd7":"# (-2, 0]    => Missing\n# (0, 15]    => Child\n# (15, 30]   => Person (Couldn't think of a good name :)  )\n# (30, 45]   => Adult\n# (45, 60]   => Senior Adult\n# (60, 100]  => Senior citizen\nage_bins = [-2, 0, 15, 30, 45, 60, 100]\nage_labels = ['Missing','Child','Person','Adult','Senior Adult', 'Senior citizen']\ntrain['Age_binned'] = pd.cut(train['Age'], bins=age_bins, labels=age_labels)\ntest['Age_binned'] = pd.cut(test['Age'], bins=age_bins, labels=age_labels)","95da9f87":"train['Age_binned'].value_counts()","cc927446":"plt.figure(figsize=(16,6))\nsns.countplot(x='Age_binned', hue='Survived', data=train)\nplt.title('Train data: Age bins vs survived')\nplt.show()","e6365a71":"plt.figure(figsize=(16,6))\nsns.countplot(x='Age_binned', data=test)\nplt.title('Test data: Age bins')\nplt.show()","7ba57500":"plt.figure(figsize=(16,6))\nsns.histplot(x='Fare', data=train, kde=True)\nplt.title('Fare distribution')\nplt.show()","d387847f":"train['Fare'].describe()","df57ab46":"# Bins for Fare\n# (-2, 0]   => Missing\n# (0, 10]   => Lt25 (Less than 25 %ile)\n# (10, 24]  => Lt50 (Less than 50 %ile)\n# (24, 33]  => Lt75 (Less than 75 %ile)\n# (33, 800] => Ab75 (Above 75 %ile)\nfare_bins = [-2, 0, 10, 24, 33, 800]\nfare_labels = ['Missing', 'Lt25', 'Lt50', 'Lt75', 'Ab75']\ntrain['Fare_binned'] = pd.cut(train['Fare'], bins=fare_bins, labels=fare_labels)\ntest['Fare_binned'] = pd.cut(test['Fare'], bins=fare_bins, labels = fare_labels)","295080d8":"train['Fare_binned'].value_counts()","4f1ea60c":"plt.figure(figsize=(16,6))\nsns.countplot(x='Fare_binned', hue='Survived', data=train)\nplt.title('Train data: Fare bins vs Survived')\nplt.show()","bb78453a":"plt.figure(figsize=(16,6))\nsns.countplot(x='Fare_binned', data=test)\nplt.title('Test data: Fare bins')\nplt.show()","675440d3":"train.head(10)","1cc748da":"train['Family'] = train['SibSp'] + train['Parch'] + 1\ntest['Family'] = test['SibSp'] + test['Parch'] + 1","aae25202":"train.head(10)","fb94603e":"feature_final_cols = ['Pclass', 'Sex', 'Embarked', 'Age_binned', 'Fare_binned', 'Family']\ntarget_col = ['Survived']","4456c31c":"from sklearn.preprocessing import OneHotEncoder, OrdinalEncoder\nfrom sklearn.pipeline import Pipeline\nfrom sklearn.compose import ColumnTransformer\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import accuracy_score","772380b2":"cat_cols = ['Sex', 'Embarked']","750f2b1f":"label_cols = ['Pclass', 'Age_binned', 'Fare_binned', 'Family']","0fbcd6a6":"cat_transformer = OneHotEncoder(handle_unknown='ignore', sparse=False)\nlabel_transformer = OrdinalEncoder(handle_unknown='use_encoded_value', unknown_value=-1)\n\npreprocessor = ColumnTransformer(transformers=[\n    ('label', label_transformer, label_cols),\n    ('cat', cat_transformer, cat_cols)\n])","d4dc6a3f":"X = train[feature_final_cols]\ny = train.Survived","10e806d1":"X_train, X_val, y_train, y_val = train_test_split(X, y, test_size=0.3, random_state=41)","1bb928b9":"print(X_train.shape, y_train.shape)\nprint(X_val.shape, y_val.shape)","b7fdc64a":"X_train.head()","e142aed0":"from sklearn.linear_model import LogisticRegression","4fb1e1ce":"model_lr = LogisticRegression(random_state=41)\nmodel_lr_pipeline = Pipeline(steps=[\n    ('preprocessor', preprocessor),\n    ('model', model_lr)\n])","26ee3127":"model_lr_pipeline.fit(X_train, y_train)","f3584781":"y_valid_preds = model_lr_pipeline.predict(X_val)","c2fdf5b1":"model_lr_acc = accuracy_score(y_val, y_valid_preds)","06d67650":"print(f'LogisticRegression: Acc={model_lr_acc}')","58230020":"def prepare_submission(pipeline):\n    y_test_preds = pipeline.predict(test[feature_final_cols])\n    output = pd.DataFrame({'PassengerId':test.index, 'Survived':y_test_preds})\n    output.to_csv('submission.csv', index=False)","2c039fea":"prepare_submission(model_lr_pipeline)","d071c373":"from sklearn.ensemble import RandomForestClassifier","3da92b89":"model_rf = RandomForestClassifier(random_state=41)\nmodel_rf_pipeline = Pipeline(steps=[\n    ('preprocessor', preprocessor),\n    ('model', model_rf)\n])","1343767a":"model_rf_pipeline.fit(X_train, y_train)","52ff8a18":"y_val_preds = model_rf_pipeline.predict(X_val)","96fa8120":"model_rf_acc = accuracy_score(y_val, y_val_preds)\n\nprint(f'RandomForest: Acc={model_rf_acc}')","7803b1ac":"In the plot above, we can see that passengers are across all age groups.","4a86f611":"Females were given preference than Males","bc878b61":"# Data loading","ecaeb84c":"Libraries import","64ce5b67":"### Handle Age and Fare missing values","e26dc04b":"### Model: RandomForest classifier","255a81c7":"## Target distribution","d818f6ba":"## Check other columns effect on Survived","421a7451":"### Age vs Survived","d78b135d":"# Create bins for `Age`, `Fare`","9353fa54":"## Check info on train and test datasets","3a685f13":"## Feature engineering","a8ca3c75":"We have exact similar columns in test set which have missing values.","32a05822":"## Handle missing values","4837466e":"We have similar pattern of missing values in training and testing datasets","91088091":"### Parch vs Survived","78f37684":"### Embarked vs Survived","9e55bde0":"## Categorical columns","761a0881":"Let's add a new computed column called 'Family', where Family = SibSp + Parch + 1","06eb8dd7":"From above unique value counts, we can surely get rid of 'Name', 'Ticket' columns","5e055e76":"Let's check our top rows for train data.","4331ce1c":"From above information, we can see that there are missing values in following columns:\n+ Age\n+ Ticket\n+ Fare\n+ Cabin\n+ Embarked","6d8d664c":"## Model: LogisticRegression","bdb0aec3":"Embarked = S was given less preference than C or Q","c76e207f":"### SibSp vs Survived","c6ae1665":"### Sex vs Survived","70e1173c":"### Pclass vs Survived","55514c98":"### Fare vs Survived","8944f4b5":"Pclass=1(or 2) has more survivors than in Pclass=3","27cce8e4":"### Handle 'Embarked' column missing values","74905642":"## Model pipeline","7d2edb14":"## Continuous columns"}}