{"cell_type":{"b932fb3c":"code","2dadafa1":"code","e4b26276":"code","3075e5cc":"code","bb45508d":"code","9325acfc":"code","16b994c0":"code","c5557e31":"code","12389453":"code","edd2eef7":"markdown","8349ad9f":"markdown","58e0cc18":"markdown","66f80b2d":"markdown","73b92fe4":"markdown","90391cc0":"markdown","c7931928":"markdown","aba796bb":"markdown","ca893da0":"markdown","ad90902f":"markdown","a002ae44":"markdown","80f05ecb":"markdown","6361e6be":"markdown"},"source":{"b932fb3c":"# import the necessary libraries\nimport numpy as np \nimport pandas as pd \nimport os\nfrom datetime import datetime, timedelta\n\n# Visualisation libraries\nimport matplotlib.pyplot as plt\n%matplotlib inline\nimport seaborn as sns\nsns.set()\nimport pycountry\nimport plotly.express as px\nfrom plotly.offline import init_notebook_mode, iplot \nimport plotly.graph_objs as go\nimport plotly.offline as py\nfrom plotly.offline import download_plotlyjs,init_notebook_mode,plot,iplot\n\n#!pip install pywaffle\n#from pywaffle import Waffle\n\nfrom ipywidgets import widgets\nfrom IPython.display import display\n!jupyter nbextension enable --py --sys-prefix widgetsnbextension\n\npy.init_notebook_mode(connected=True)\nimport folium \nfrom folium import plugins\nplt.style.use(\"fivethirtyeight\")# for pretty graphs\n\n# Increase the default plot size and set the color scheme\nplt.rcParams['figure.figsize'] = 8, 5\n#plt.rcParams['image.cmap'] = 'viridis'\n\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Disable warnings \nimport warnings\nwarnings.filterwarnings('ignore')\n\n\ndf_master = pd.read_csv('..\/input\/covid19-in-india\/covid_19_india.csv')\ndf_master.drop(['Sno'],axis=1,inplace=True)\ndf_master.index = range(1,df_master.shape[0]+1)\ndf = df_master.copy()\n\ndf['Total Confirmed cases'] = df['ConfirmedIndianNational'] + df['ConfirmedForeignNational']\ndf['Total Active cases'] = df['ConfirmedIndianNational'] + df['ConfirmedForeignNational'] - df['Cured'] - df['Deaths']\ndf.rename(columns={\"State\/UnionTerritory\": \"States\", \"ConfirmedIndianNational\": \"Confirmed cases (Indian Nationals)\"},inplace=True)\ndf.rename(columns={\"ConfirmedForeignNational\": \"Confirmed cases (Foreign Nationals)\", \"Cured\": \"Cured\/Discharged\/Migrated\"},inplace=True)\ndf = df[df.States != 'Chattisgarh']\ndf = df[df.States != 'Pondicherry']\ndf = df[df.States != 'Union Territory of Jammu and Kashmir']\ndf = df[df.States != 'Union Territory of Chandigarh']\ndf = df[df.States != 'Union Territory of Ladakh']\n\ndf.index = range(1,df.shape[0]+1)\ndf_states = df.copy()\ndf['Date'] = pd.to_datetime(df['Date'], dayfirst=True)\ndf.sort_values(by='Date', inplace=True)\n\n#doubling_rate = 6.2\n#Mortality_rate = 0.01\n#days_to_death = 17.3\n\nDR_slider = widgets.FloatSlider(\n    value=6.2,\n    min=2.0,\n    max=8.0,\n    step=0.1,\n    description='Doubling Rate:',\n    readout=True,\n    readout_format='.1f',\n    continuous_update=True\n)\ndoubling_rate = DR_slider.value\n\n\nM_slider = widgets.FloatSlider(\n    value=1.0,\n    min=0.5,\n    max=10.0,\n    step=0.1,\n    description='Mortality Rate %:',\n    readout=True,\n    readout_format='.1f',\n    continuous_update=True\n)\nMortality_rate = M_slider.value\/100\n\n\nDeath_slider = widgets.FloatSlider(\n    value=17.3,\n    min=10.0,\n    max=60.0,\n    step=0.5,\n    description='Days to Death:',\n    readout=True,\n    readout_format='.1f',\n    continuous_update=True\n)\ndays_to_death = Death_slider.value","2dadafa1":"death_df = df.copy()\ndeath_df_filtered = death_df[death_df.Deaths != 0]\n\n### Finding states with deaths\nstates = death_df_filtered.States.unique().tolist()\n#print(\"{}\\n\".format(states))\n\n####Number of days since Jan 30 2020\ni = df.iloc[[0]].Date.tolist()[0]\nj = death_df.iloc[-1].Date\nsize = int((j-i).days)+1\n#print(size)\n\n\nactual_total = np.zeros(size, dtype = int) ## Stores total realistic deaths\nactual_total_temp = np.zeros(size, dtype = int) ## Stores deaths of individual states and dates\n\n\n### Loop over each state (The onces with deaths)\ncount=0\nfor state in states:\n    temp = death_df_filtered[death_df_filtered.States == state]\n    #for death in temp\n    #deathi = temp.iloc[[0]].Deaths.tolist()[0]\n    a = temp.drop_duplicates(subset='Deaths', keep=\"first\").Deaths.tolist()\n    b = np.diff(a)\n    deaths = np.concatenate(([a[0]], b), axis=0)\n    #print(deaths)\n    \n    \n    ### Loop over each day for each state\n    for i in range(0, len(deaths)):\n        ### Go back 17.3 days\n        start = temp.iloc[[i]].Date - timedelta(days=int(days_to_death))\n        start = int((death_df.iloc[-1].Date - start.tolist()[0]).days)\n        #print(start)\n        \n        ### Calculating the realistic cases for each day and stored in array for each state for each date\n        actual_total_temp[size - start-2] = deaths[i]\/Mortality_rate\n        for i in range(size - start + int(doubling_rate) - 2, size, int(doubling_rate)):\n            actual_total_temp[i] = actual_total_temp[i-int(doubling_rate)]*2\n        #print(\"{}\\n\".format(actual_total_temp))\n        \n        ### Smoothening the curve for each array formed above\n        for i in range(size - start - 2, size-1, int(doubling_rate)):\n            smoother = int(actual_total_temp[i]\/doubling_rate)\n            for j in range(i+1, i+int(doubling_rate)):\n                actual_total_temp[j] = actual_total_temp[j-1] + smoother\n                if j == size-1:\n                    i = size-1\n                    break\n                    \n        \n        #print(\"{}\\n\".format(actual_total_temp))\n        ### Adding each state for each day to actual_total (Array)\n        actual_total = np.add(actual_total,actual_total_temp)\n        actual_total_temp = actual_total_temp*0\n\n#### Finally, actual_total is plotted next\n\n#display(DR_slider, M_slider, Death_slider)","e4b26276":"df.sort_values(by=['States', 'Total Confirmed cases'], ascending = [True, False],inplace=True)\ndf.drop_duplicates(subset='States', keep=\"first\",inplace=True)\ndf.sort_values(by='Total Confirmed cases', ascending = False,inplace=True)\ndf.index = range(1,df.shape[0]+1)\n\nprint(f'Total number of Confirmed COVID 2019 cases across India:', df['Total Confirmed cases'].sum())\nprint('Estimation of realistic number of cases across India: {} - {} (Around {}-{}x Confirmed cases)'.format(int(actual_total[-1]\/2), actual_total[-1], \n                                                                                                       int(actual_total[-1]\/2\/df['Total Confirmed cases'].sum()), \n                                                                                                       int(actual_total[-1]\/df['Total Confirmed cases'].sum())))\nprint('\\n')\nprint(f'Total number of Active COVID 2019 cases across India:', df['Total Active cases'].sum())\nprint(f'Total number of Cured\/Discharged\/Migrated COVID 2019 cases across India:', df['Cured\/Discharged\/Migrated'].sum())\nprint(f'Total number of Deaths due to COVID 2019  across India:', df['Deaths'].sum())\nprint(f'Total number of States\/UTs affected:', df['States'].count())\n\n\ndbd_India = pd.read_excel('..\/input\/coronavirus-cases-in-india\/per_day_cases.xlsx',sheet_name='India')\nfig = go.Figure()\nfig.add_trace(go.Scatter(x=dbd_India['Date'], y=dbd_India['Total Cases'],\n                    mode='lines+markers',name='Total Cases'))\n\nfig.add_trace(go.Scatter(x=dbd_India['Date'], y=dbd_India['Recovered'], \n                mode='lines',name='Recovered'))\nfig.add_trace(go.Scatter(x=dbd_India['Date'], y=dbd_India['Active'], \n                mode='lines',name='Active'))\nfig.add_trace(go.Scatter(x=dbd_India['Date'], y=dbd_India['Deaths'], \n                mode='lines',name='Deaths'))\nfig.add_trace(go.Scatter(x=dbd_India['Date'], y=actual_total, \n                mode='lines+markers',name='Estimate of real Total cases'))\n    \nfig.update_layout(title_text='Trend of Coronavirus Cases in India(Confirmed vs Realistic cases)',plot_bgcolor='rgb(250, 242, 242)')\n\nfig.show()\n\nfig = go.Figure()\nfig.add_trace(go.Scatter(x=dbd_India['Date'], y=dbd_India['Deaths'], \n                mode='lines',name='Deaths'))\nfig.update_layout(title_text='Deaths',plot_bgcolor='rgb(250, 242, 242)')\n\nfig.show()\n\nimport plotly.express as px\nfig = go.Figure(data=[\n    go.Bar(name = \"Confirmed cases\", x=dbd_India.Date.tolist(), y=dbd_India['New Cases'].tolist()),\n    go.Bar(name = \"Realistic\", x=dbd_India.Date.tolist(), y=np.diff(actual_total))\n])\nfig.update_layout(barmode='group')\nfig.update_layout(title_text='New Coronavirus Cases in India per day',plot_bgcolor='rgb(250, 242, 242)')\n\nfig.show()","3075e5cc":"#\nfig = go.Figure()\nfig.add_trace(go.Scatter(x=dbd_India['Date'], y=dbd_India['Total Cases'],\n                    mode='lines+markers',name='Total Cases'))\n\nfig.add_trace(go.Scatter(x=dbd_India['Date'], y=dbd_India['Recovered'], \n                mode='lines',name='Recovered'))\nfig.add_trace(go.Scatter(x=dbd_India['Date'], y=dbd_India['Active'], \n                mode='lines',name='Active'))\nfig.add_trace(go.Scatter(x=dbd_India['Date'], y=dbd_India['Deaths'], \n                mode='lines',name='Deaths'))\n\n    \nfig.update_layout(plot_bgcolor='rgb(250, 242, 242)')\n\nfig.show()","bb45508d":"# create map and display it\nIndia_coord = pd.read_csv('..\/input\/coronavirus-cases-in-india\/Indian Coordinates.csv')\nIndia_coord.rename(columns={\"Name of State \/ UT\": \"States\"},inplace=True)\ndf_full = pd.merge(India_coord,df,on='States')\nmap = folium.Map(location=[20, 80], zoom_start=4.5,tiles='cartodbdark_matter')\n\nfor lat, lon, value, name in zip(df_full['Latitude'], df_full['Longitude'], df_full['Total Active cases'], df_full['States']):\n    folium.CircleMarker([lat, lon],\n                        radius=value*0.7,\n                        popup = ('<strong>State<\/strong>: ' + str(name).capitalize() + '<br>'\n                                '<strong>Active Cases<\/strong>: ' + str(value) + '<br>'),\n                        color='red',\n                        \n                        fill_color='red',\n                        fill_opacity=0.3 ).add_to(map)\nmap","9325acfc":"df_states.rename(columns={\"Date\": \"Last updated\"},inplace=True)\ndf_states.sort_values(by=['States', 'Total Confirmed cases'], ascending = [True, False],inplace=True)\ndf_states.drop_duplicates(subset='States', keep=\"first\",inplace=True)\ndf_states.sort_values(by='Total Confirmed cases', ascending = False,inplace=True)\ndf_states.index = range(1,df_states.shape[0]+1)\n#https:\/\/www.kaggle.com\/nxrprime\/styling-data-frames-covid-19-vs-conferences\ndef highlight_max(s):\n    is_max = s == s.max()\n    return ['background-color: pink' if v else '' for v in is_max]\n\n\n\n#df.style.apply(highlight_max,subset=['Total Confirmed cases (Indian National)', 'Total Confirmed cases ( Foreign National )'])\ndf_states.style.apply(highlight_max,subset=['Deaths','Total Confirmed cases','Total Active cases'])","16b994c0":"f, ax = plt.subplots(figsize=(12, 8))\nIndia_coord = pd.read_csv('..\/input\/coronavirus-cases-in-india\/Indian Coordinates.csv')\nIndia_coord.rename(columns={\"Name of State \/ UT\": \"States\"},inplace=True)\ndf_full = pd.merge(India_coord,df,on='States')\ndata = df_full[['States','Total Confirmed cases','Cured\/Discharged\/Migrated','Deaths']]\ndata.sort_values('Total Confirmed cases',ascending=False,inplace=True)\nsns.set_color_codes(\"pastel\")\nsns.barplot(x=\"Total Confirmed cases\", y=\"States\", data=data,\n            label=\"Total\", color=\"r\")\n\nsns.set_color_codes(\"muted\")\nsns.barplot(x=\"Cured\/Discharged\/Migrated\", y=\"States\", data=data,\n            label=\"Recovered\", color=\"g\")\n\n\n# Add a legend and informative axis label\nax.legend(ncol=2, loc=\"lower right\", frameon=True)\nax.set(xlim=(0, df_states['Total Confirmed cases'].tolist()[0]), ylabel=\"States\",\n       xlabel=\"Cases\")\nsns.despine(left=True, bottom=True)","c5557e31":"import plotly.graph_objects as go\nfrom plotly.subplots import make_subplots\n\ncolors = ['#1f77b4', '#17becf']\n\nindian = df['Confirmed cases (Indian Nationals)'].sum()\nforeign = df['Confirmed cases (Foreign Nationals)'].sum()\nfig = go.Figure(data=[go.Pie(labels=['Indian Nationals','Foreign Nationals'],\n                             values= [indian,foreign],hole =.35)])\n                          \n\nfig.update_traces(hoverinfo='label+percent', textinfo='value', textfont_size=20,\n                  marker=dict(colors=colors, line=dict(color='#FFFFF2', width=2)))\nfig.show()\n\nfig = make_subplots(\n    rows=1, cols=2,\n    subplot_titles=(\"National Cases\",\"Foreign Cases\"))\n\ntemp = df.sort_values('Confirmed cases (Indian Nationals)', ascending=False).sort_values('Confirmed cases (Indian Nationals)', ascending=False)\n\nfig.add_trace(go.Bar( y=temp['Confirmed cases (Indian Nationals)'], x=temp[\"States\"],  \n                     marker=dict(color=temp['Confirmed cases (Indian Nationals)'], coloraxis=\"coloraxis\")),\n              1, 1)\n                     \ntemp1 = df.sort_values('Confirmed cases (Foreign Nationals)', ascending=False).sort_values('Confirmed cases (Foreign Nationals)', ascending=False)\n\nfig.add_trace(go.Bar( y=temp1['Confirmed cases (Foreign Nationals)'], x=temp1[\"States\"],  \n                     marker=dict(color=temp1['Confirmed cases (Foreign Nationals)'], coloraxis=\"coloraxis\")),\n              1, 2)                     \n                     \n\nfig.update_layout(coloraxis=dict(colorscale='rdbu'), showlegend=False,title_text=\"National vs Foreign Cases\",plot_bgcolor='rgb(250, 242, 242)')\n\nfig.show()\n\n","12389453":"%%HTML\n<center><iframe width=\"560\" height=\"315\" src=\"https:\/\/www.youtube.com\/embed\/mCa0JXEwDEk\" frameborder=\"0\" allow=\"accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen><\/iframe><\/center>","edd2eef7":"## 3.1 Confirmed total cases, deaths, active cases, recovered across India","8349ad9f":"### 3.1.1 Plot","58e0cc18":"## 3.3 National vs Foreign cases","66f80b2d":"## 3.2 State\/Union Territories wise numbers","73b92fe4":"# Section 3: Distribution of Cases in India","90391cc0":"## Section 2.1: Realistic cases vs Confirmed cases","c7931928":"# Section 1: Estimation Algorithm\n\n\n## Section 1.1: Variables\n\nThree statistically determined variables were used to obtain the estimation curve:\n\ndoubling_rate = 6.2 days    \nMortality_rate = 0.01 or 1 %    \ndays_to_death = 17.3 days    \n\n* **Doubling rate** is the time it takes for the number of cases to double. For Coronavirus, it is found to be around 6.2 days on average. For now, the same rate is assumed for the sake of analysis.\n\n* **Mortality rate** is assumed to be around 1%. \n    REASON:\n        Countries that are well prepared see a fatality rate of ~0.5% (South Korea) to ~0.9% (rest of China). Countries that are overwhelmed by the number of cases will have a fatality rate between ~3%-5%\n\n     In other words: Countries that act fast can reduce the number of deaths by a **factor of ten**. And that\u2019s just counting the fatality rate.\n \n        Acting fast includes - massive testing, measures taken to enforce Lockdown\/Social Distancing\/Quarantine to reduce the rate of spread (Flatten the curve)\n\n* **Days to death** is again statistically determined to be around 17.3 days. For now, the same rate is assumed for the sake of analysis.\n\n\n## Section 1.2: Understand the Model with example\n \nThe number of deaths in a region can be used to guess the number of realistic current cases. As already mentioned above, the number of days from infection to death is found to be around 17.3. That means the person who died on 13th March 2020 in Karnataka probably got infected around 25th February 2020.\n\nThen, we know the mortality rate = 1%. That means that, around 25th February 2020, there were already around ~100 cases in Karnataka (of which only one ended up in death 17.3 days later).\n\nNow, use the average doubling time of 6.2 days. This means that, in the 17 days it took this person to die, the cases had to multiply by ~8 (=2^(17\/6)). This means that, if you are not diagnosing all cases, **1 death today means 800 realistic cases today**.\n\nThis model has various assumptions\/limitations, which will be discussed later. \n\n## Section 1.3: Estimation of True cases over time\n\nExpand to check out the code below to understand how the curve was plotted.","aba796bb":"### 3.1.2 Graphical visualization of confirmed Active cases in India","ca893da0":"# Furthur read\/watch","ad90902f":"# Section 2: Visual analysis","a002ae44":"## Section 2.2: What to takeaway from this analysis\n\n### Indeterminable variables of the model \n\n* The model used isnt perfect, it just gives an idea of how many cases are truly present. There are a lot of variables to consider. For instance, age distribution in each country will also have an impact: Since mortality is much higher for older people, regions with aging population like in Europe will be harder hit on average than younger countries like India. There are more factors viz. weather - especially humidity and temperature, environmental, food and lifestyle habits. But it\u2019s still unclear how this will impact transmission and fatality rates.\n\n* One more thing to consider is the number of tests per million people and number of hospital beds per 1000 people. India ranks among the lowest in both. Many cases and deaths may go unreported especially in rural areas due to lack of testing and self treatment phenomenon that exists in India\n\n**With the help of the model and the above considerations we can guess the number of true cases to be anywhere between 3000 - 6000+ as of March 21st.** \n\n### Best solution: Social distancing, Flattening the curve\n\nAround **20%** of cases require hospitalization, **5%** of cases require the Intensive Care Unit (ICU), and around **2.5%** require very intensive help, with items such as ventilators or ECMO (extra-corporeal oxygenation).\n\nThe model predicts the number of cases only when Lockdown\/Social Distancing\/Quarantine is not enforced. Luckily our government has taken steps to implement various Lockdown measures viz. banning international flights and social distancing. If these measures are enforced and followed strictly, the number of cases may plateau at around 8000-10000+ and doesnt overburden our healthcare system. \n\nChina took some drastic steps. They locked down 15 cities apart from Wuhan and the result can be seen in the image below\n\n![](https:\/\/miro.medium.com\/max\/7790\/1*z0g3NaygxsgD50x_DJUIBA.png)\n\n\n\n\n\n","80f05ecb":"# India may have well over 10000 cases and the government knows it\n\nWith the very successful \"Janata Curfew\"(\"People's Curfew\"), different parts of India officially\/unofficially continue to remain under semi lockdown. Strict measures are being taken by the Indian government to slow down the spread of the virus. This hints that the government knows that the situation is worse than depicted and they are trying everything to keep it under control.\n\nThis article tries to explain why there might be well over 8000 cases (10-20x the reported cases as of 22nd March 2020) using tried and tested models and graphs.\n\nThe models used in this article is borrowed from Tomas Pueyo's [medium blog](https:\/\/medium.com\/@tomaspueyo\/coronavirus-act-today-or-people-will-die-f4d3d9cd99ca). I wrote a python code to incorporate this model for Indian scenario analysis.\n\n\n![](https:\/\/www.cdc.gov\/coronavirus\/2019-ncov\/images\/2019-coronavirus.png)\n\n\n","6361e6be":"# Abstract\n\nThe first COVID-19 case in India was reported on on 30th January 2020, a student who arrived in Kerala state from Wuhan, China followed by 2 more cases in Kerala. For almost a month, no new cases was reported in India, however, on 8th March 2020, five new cases of COVID-19 in Kerala were again reported and since then the cases have been rising affecting 22 states and resulting in 4 deaths across the country as of 21st March 2020.\n\nOn 13th March 2020, India reported its first coronavirus fatality in the state of Karnataka, followed by 3 more deaths in other states. On 21st March 2020, confirmed COVID-19 cases has risen to **300s** with the state of Maharashtra bagging the maximum number of cases. As the number of confirmed cases rise in India, the question is do these numbers represent the **true** number of cases in India. \n\n### **Section 1**: Estimation of **realistic** number of cases in India\n\n### **Section 2**: Visual analysis True vs Confirmed cases & Takeaway\n\n### **Section 3**: Visual analysis of the spread in India (Detailed)\n\n\n**Credits**:\n*This article is inspired by the wonderful analysis done by Tomas Pueyo in his [medium blog](https:\/\/medium.com\/@tomaspueyo\/coronavirus-act-today-or-people-will-die-f4d3d9cd99ca).\nData is obtained from reputable sources. Refer to the data section for more information.\nData visualization was inspired by Parul Pandey's [Kaggle page](https:\/\/www.kaggle.com\/parulpandey\/tracking-india-s-coronavirus-spread-wip)*"}}