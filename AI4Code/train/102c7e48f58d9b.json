{"cell_type":{"c6e07d22":"code","eabcece9":"code","af806b44":"code","8f909780":"code","5369c22a":"code","0bae9f6b":"code","35b8c4fb":"code","7b785248":"code","66187c00":"code","3bb76789":"code","a1e6e150":"code","acb4e3e4":"code","835cccad":"code","3edfec93":"code","36c61de0":"code","2485597d":"code","4c805f97":"code","0fb69545":"code","9b0098c6":"code","5de94df1":"code","b2c3928c":"markdown","cf0a79c2":"markdown","31ce9a77":"markdown","47ced2e0":"markdown","7eb64821":"markdown","959f2017":"markdown"},"source":{"c6e07d22":"TASK = 'INFER'\n\nif TASK in [ 'TRAIN', 'RETRAIN' ]:\n    print('\\n\\n\\t\\tMAKE SURE INTERNET IS ON FOR TRAINING!\\n\\n')\n    \nif TASK=='INFER':\n    print('\\n\\n\\t\\tMAKE SURE INTERNET IS OFF!\\n\\n')","eabcece9":"if TASK=='INFER':\n    import sys\n    path_to_flair = '..\/input\/flair\/offline_files\/'\n    sys.path.append(path_to_flair)\n    \nif TASK in [ 'TRAIN', 'RETRAIN' ]:\n    !pip install flair\n    \nimport flair\nfrom flair.data import Sentence\nfrom flair.data import Corpus\nfrom flair.embeddings import DocumentRNNEmbeddings\nfrom flair.embeddings import TransformerWordEmbeddings, FlairEmbeddings, WordEmbeddings\nfrom flair.models.text_regression_model import TextRegressor\nfrom flair.trainers import ModelTrainer\n    \nimport gc\nimport time\nimport numpy as np\nimport pandas as pd\nimport seaborn as sns\nsns.set(font_scale=1.4)\nsns.set_style('darkgrid')\nimport matplotlib\nimport matplotlib.pyplot as plt\n%matplotlib inline\nplt.style.use('seaborn-dark-palette')\n\nfrom tqdm import tqdm\nfrom joblib import parallel_backend, Parallel, delayed\n\nimport torch\n\nfrom sklearn import metrics\n\n# Saving\nimport pickle\nimport joblib\n\nimport warnings\nwarnings.filterwarnings(\"ignore\")\npd.set_option('display.max_columns', 200)\npd.set_option('display.max_colwidth', 200)","af806b44":"df = pd.read_csv(\"..\/input\/jigsaw-toxic-comment-classification-challenge\/train.csv\")\nfor col in ['toxic', 'severe_toxic', 'obscene', 'threat', 'insult', 'identity_hate']: \n    display(df.loc[df[col] == 1, ['comment_text', col]].sample(3))\n\ndf['severe_toxic'] = df.severe_toxic * 2\ndf['y'] = (df[['toxic', 'severe_toxic', 'obscene', 'threat', 'insult', 'identity_hate']].sum(axis = 1)).astype(int)\ndf['y'] = df['y'] \/ df['y'].max()\ndf = df[['comment_text', 'y']].rename(columns = {'comment_text': 'text'})\ndisplay(df.sample(7, random_state=1), df.shape)","8f909780":"val_data = pd.read_csv('..\/input\/jigsaw-toxic-severity-rating\/validation_data.csv')\nss = pd.read_csv('..\/input\/jigsaw-toxic-severity-rating\/sample_submission.csv')\ntestset = pd.read_csv('..\/input\/jigsaw-toxic-severity-rating\/comments_to_score.csv')\nfor i in [val_data, testset, ss]:\n    display(i.sample(5), i.shape)","5369c22a":"sns.distplot(df[['y']])","0bae9f6b":"if TASK in [ 'TRAIN', 'RETRAIN' ]:\n    \n    # Prepping the Dataset \n    df_fst = df.copy()\n    df_fst['labels'] = '__label__' + df_fst['y'].astype(str)\n    df_fst = df_fst[['labels','text']]\n    display(df_fst.head(3))","35b8c4fb":"if TASK in [ 'TRAIN', 'RETRAIN' ]:\n    \n    # Spltting the Dataset\n    train_fst, test_fst, dev_fst = np.split(df_fst, [int(.9*len(df_fst)), int(.95*len(df_fst))])\n\n    print('Original: ', df_fst.shape)\n    print('Train: ', train_fst.shape)\n    print('Test: ', test_fst.shape)\n    print('Dev: ', dev_fst.shape)","7b785248":"if TASK in [ 'TRAIN', 'RETRAIN' ]:\n    \n    # Create a folder\n    !mkdir -p data_faster\n    \n    # Save to the folder\n    train_fst.to_csv(\"data_faster\/train.csv\",sep='\\t',index=False,header=False)  \n    test_fst.to_csv(\"data_faster\/test.csv\",sep='\\t',index=False,header=False)\n    dev_fst.to_csv(\"data_faster\/dev.csv\",sep='\\t',index=False,header=False)","66187c00":"if TASK in [ 'TRAIN', 'RETRAIN' ]:\n    \n    # Create Corpus from Folder\n    data_folder_fast = \"data_faster\"\n    corpus_fst: Corpus = flair.datasets.ClassificationCorpus(data_folder_fast)","3bb76789":"if TASK=='TRAIN':\n    \n    # Instantiate  Embeddings\n\n    word_embeddings = [ \n                        WordEmbeddings('glove'),\n                      ]\n\n    document_embeddings = DocumentRNNEmbeddings(word_embeddings, 128, 1, False, 64, False, False)","a1e6e150":"gc.collect()","acb4e3e4":"%%time\nif TASK in [ 'TRAIN', 'RETRAIN' ]:\n    if TASK=='TRAIN':\n        # Create the Model\n        model = TextRegressor(document_embeddings)\n        \n    if TASK=='RETRAIN':\n        # Load the Model\n        model = TextRegressor.load('..\/input\/jigsaw-flair-notebook\/data_faster\/final-model.pt')\n\n    trainer = ModelTrainer(model, corpus_fst)\n\n    # Train the Model\n    trainer.train('data_faster',      # The path the model and training log will be saved in\n                  learning_rate=0.1,   \n                  mini_batch_size=32,\n                  anneal_factor=0.5,\n                  patience=4,          \n                  train_with_dev=True, \n                  max_epochs=120,\n                  embeddings_storage_mode='gpu')","835cccad":"gc.collect()","3edfec93":"if TASK in [ 'TRAIN', 'RETRAIN' ]:\n    \n    # Load the Model\n    flair_regressor = TextRegressor.load('.\/data_faster\/final-model.pt')\n    \nif TASK == 'INFER':\n    \n    # Load the Model\n    flair_regressor = TextRegressor.load('..\/input\/jigsaw-flair-notebook\/data_faster\/final-model.pt')","36c61de0":"def flair_prediction(texts, regressor):\n    sentences = [Sentence(text) for text in texts]   # Create Sentence Object\n    regressor.predict(sentences, mini_batch_size=32)  # Predictions are tagged to the sentence object\n    return [float(str(sent.labels[0]).split(' ')[0])   # Extract prediction from the sentence\n            for sent in tqdm(sentences)]","2485597d":"%%time\nval_less_toxic = flair_prediction(val_data['less_toxic'].tolist(), flair_regressor)\nval_more_toxic = flair_prediction(val_data['more_toxic'].tolist(), flair_regressor)\n\nval_less_toxic = np.array(val_less_toxic)\nval_more_toxic = np.array(val_more_toxic)\n\n# Validation Accuracy\n(val_less_toxic < val_more_toxic).mean()","4c805f97":"preds = flair_prediction(testset['text'].tolist(), flair_regressor)","0fb69545":"testset['score'] = preds\ntestset = testset.sort_values(['score'])\ntestset['score'] = testset['score'].rank(method='first')\nsub = testset[['comment_id', 'score']]\ndisplay(sub)","9b0098c6":"testset","5de94df1":"sub.to_csv('submission.csv', index=False)","b2c3928c":"---\n# Jigsaw Competition\n\n---\n---","cf0a79c2":"## Start Training","31ce9a77":"# MODELLING","47ced2e0":"# Predict on Testset","7eb64821":"## Validate","959f2017":"# THE DATA"}}