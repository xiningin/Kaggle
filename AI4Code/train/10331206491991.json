{"cell_type":{"76d895da":"code","031fa854":"code","f57d3dd4":"code","9f9dde74":"code","ebaa718b":"code","9abf3576":"code","4427a76a":"code","983f5137":"code","ca466d17":"code","f81d22e3":"code","abce0371":"code","92770fc6":"code","c53ed89f":"code","d82358bd":"code","5187b5cb":"code","961bb328":"code","cd5397cc":"code","5401fd08":"code","d5b5c9e9":"code","7eaecb79":"code","8dd681d6":"code","ac051caa":"code","3600fc41":"code","59d3bf13":"code","275e3bc8":"code","39742310":"code","3e81e763":"code","06574e5e":"code","4b84a184":"code","c471e4ea":"markdown","4f39eab0":"markdown","7a2c79fa":"markdown","c42abff7":"markdown","e03ec947":"markdown","ee1a307a":"markdown"},"source":{"76d895da":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","031fa854":"# Load BigQuery packages\nfrom google.cloud import bigquery","f57d3dd4":"# 1. Load the dataset \nclient = bigquery.Client()\ndataset_ref = client.dataset('hacker_news', project='bigquery-public-data')\ndataset = client.get_dataset(dataset_ref)","9f9dde74":"# 2. List the table_id in loaded datast\nclient.list_tables(dataset)\n# for x in client.list_tables(dataset):\n#     print (x.table_id)\n[x.table_id for x in client.list_tables(dataset)]","ebaa718b":"# 3. View the table 'full'\ntable_ref = dataset.table('full')\nfull = client.get_table(table_ref)\n# 4. Explore available commands(attributes) to the table\nprint([command for command in dir(full) if not command.startswith('_')])","9abf3576":"# 5. Select the schema\nfields = [col for col in full.schema if col.name in ['by','title','time']]\nprint(fields)\nfull.schema","4427a76a":"# 6. Show a slice by the selected schema\nclient.list_rows(full,max_results=5, start_index=1,selected_fields= fields).to_dataframe()\n# 7. Another way to show a slice by the selected schema\nresult=[x for x in (client.list_rows(full,max_results=5, start_index=500,selected_fields= fields))]\n# print([x for x in result])\nfor i in result:\n    print(dict(i))","983f5137":"#8 Incestigate the resaurces would have consumed for a full scan\nbytes_per_GB = 2**30 # (Gigibyte) for binary system\/note that 10**9 is giga bytes\nfull.num_bytes\/bytes_per_GB","ca466d17":"# 9. A helper func to calculate the scanned bytes\ndef estimate_scanned(query,bq_client):\n    dry_run = bigquery.job.QueryJobConfig(dry_run = True)\n    job = bq_client.query(query,job_config = dry_run)\n    return job.total_bytes_processed\/2**30\n# 10. The query\nmy_query = \"\"\"\n           SELECT id FROM `bigquery-public-data.hacker_news.full`\n           \"\"\"\n# 11 run the func\nestimate_scanned(my_query,client)","f81d22e3":"# 12 Also the orient way to estimate\ndry_run = bigquery.job.QueryJobConfig(dry_run = True) #or use the attribute form-> dry_run = bigquery.job.QueryJob_Config() ->dry_run.dry_run = True\nsafe_run = bigquery.job.QueryJobConfig(maximum_bytes_billed=2**30)\nprint(safe_run._properties) # ->1GB\nscanned = client.query(my_query,job_config = dry_run)\nscanned.total_bytes_processed\/2**30\n# estimate_scanned (my_query,client)","abce0371":"# dir(dry_run)\ntest = bigquery.job.QueryJobConfig()\ntest.dry_run = True\ndir(test)\ntest._properties","92770fc6":"import pandas as pd\nfrom bq_helper import BigQueryHelper","c53ed89f":"# 1. Load the project\/dataset\nbq_assistant = BigQueryHelper(\"bigquery-public-data\",'openaq') # original coeds: set ref->get_dataset\/table\n# 2. List all table\n# dir(ba_assistant)\nbq_assistant.list_tables() # client.list_tables(dataset)-> [x for x in y]","d82358bd":"# 3. A quick way as list_rows\nbq_assistant.head('global_air_quality',num_rows=5) # client.list_rows(dataset, max_results= 5)","5187b5cb":"# 4. Table Schema\nbq_assistant.table_schema('global_air_quality')","961bb328":"# 5. Write query\nQUERY = \"SELECT location, timestamp, pollutant FROM `bigquery-public-data.openaq.global_air_quality`\"\n# df = bq_assistant.query_to_pandas(QUERY)\n# df = bq_assistant.query_to_pandas_safe(QUERY)\ndf = bq_assistant.query_to_pandas_safe(QUERY, max_gb_scanned=.5*10**6)\ndf.head()","cd5397cc":"# SOme testing\n# dir(bq_assistant)\n# bq_assistant._BigQueryHelper__dataset_ref","5401fd08":"# 1. Load the Project and dataset\n# 1.a Old way:\nclient = bigquery.Client()\ndataset_ref = client.dataset('google_analytics_sample',project='bigquery-public-data' )\ndataset = client.get_dataset(dataset_ref)\ntable_ref = dataset.table('ga_sessions_20170701')\ntable = client.get_table(table_ref)\n# table.schema\nprint([x for x in table.schema if x.name == 'visitorId'])\n# print([x for x in table.schema])\n\n# 1.b New way:from bq_helper import BigQueryHelper\nbq_assistant = BigQueryHelper(\"bigquery-public-data\", \"google_analytics_sample\")\n# bq_assistant.list_tables()","d5b5c9e9":"# 2. bq_assistant.list_tables()\nbq_assistant.head('ga_sessions_20160801',num_rows=5)","7eaecb79":"# 3. Try query\nquery = \"\"\"\n        SELECT visitId,totals\n        FROM `bigquery-public-data.google_analytics_sample.ga_sessions_20160801`\n        \"\"\"\nprint('resource consumped in this query is {} Gb'.format(bq_assistant.estimate_query_size(query)))\ndf = bq_assistant.query_to_pandas_safe(query)\ndf.head()","8dd681d6":"#3. See the table schema\n# bq_assistant.table_schema('ga_sessions_20160801')\nbq_assistant.head('ga_sessions_20160801',num_rows=5)","ac051caa":"# Q1: What is the total number of transactions generated per device browser in July 2017?\n# bq_assistant.head('ga_sessions_20160801',num_rows=5)\nquery = \"\"\"\n        SELECT device.browser, sum(totals.transactions) AS num_transactions\n        FROM `bigquery-public-data.google_analytics_sample.ga_sessions_*`\n        WHERE _TABLE_SUFFIX BETWEEN '20170701' AND '20170731'\n        GROUP BY device.browser\n        ORDER BY num_transactions DESC\n        \"\"\"\n# bq_assistant.estimate_query_size(query)\nresponse1 = bq_assistant.query_to_pandas_safe(query)\nresponse1.head(10)","3600fc41":"# Q2: The real bounce rate is defined as the percentage of visits with a single pageview. What was the real bounce rate per traffic source?\nquery = \"\"\"\n        WITH s AS(\n        SELECT trafficSource.source AS source, sum(totals.bounces) AS num_bounces, COUNT(*) AS total_visit\n        FROM `bigquery-public-data.google_analytics_sample.ga_sessions_*`\n        WHERE _TABLE_SUFFIX BETWEEN '20170701' AND '20170731'\n        GROUP BY source)\n        SELECT source, num_bounces, total_visit, num_bounces\/total_visit*100 AS bounce_rate \n        FROM s\n        ORDER BY total_visit DESC\n        \"\"\"\nresponse2=bq_assistant.query_to_pandas_safe(query)\nresponse2.head(10)","59d3bf13":"# Q3:What was the average number of product pageviews for users who made a purchase in July 2017?\nquery = \"\"\"\n        WITH s AS (\n        SELECT totals.pageviews AS pageviews,totals.transactions AS num_transactions\n        FROM `bigquery-public-data.google_analytics_sample.ga_sessions_*`\n        WHERE _TABLE_SUFFIX BETWEEN '20170701' AND '20170731'\n        AND totals.transactions > 0\n        AND totals.transactions IS NOT null\n        )\n        SELECT SUM(pageviews)\/SUM(num_transactions) AS viewPpurchase\n        FROM s\n        \"\"\"\nbq_assistant.query_to_pandas_safe(query)","275e3bc8":"# Q4:What was the average number of product pageviews for users who did not make a purchase in July 2017?\nquery = \"\"\"\n        WITH s AS (\n        SELECT totals.pageviews AS pageviews,totals.transactions AS num_transactions\n        FROM `bigquery-public-data.google_analytics_sample.ga_sessions_*`\n        WHERE _TABLE_SUFFIX BETWEEN '20170701' AND '20170731'\n        AND totals.transactions IS null\n        )\n        SELECT Avg(pageviews) AS AVG_Pageviews\n        FROM s\n        \"\"\"\ndf=bq_assistant.query_to_pandas_safe(query)\ndf.head(5)","39742310":"#Q5: What was the average total transactions per user that made a purchase in July 2017?\n\nquery = \"\"\"\n        WITH s AS (SELECT fullVisitorId,SUM(totals.transactions) AS num_transactions\n        FROM `bigquery-public-data.google_analytics_sample.ga_sessions_*`\n        WHERE _TABLE_SUFFIX BETWEEN '20170701' AND '20170731'\n        AND totals.transactions IS not null\n        GROUP BY fullVisitorId)\n        SELECT SUM(num_transactions)\/COUNT(*) AS avg_transactions_per_user\n        FROM s\n        \"\"\"\ndf=bq_assistant.query_to_pandas_safe(query) \ndf","3e81e763":"# Q6. What is the average amount of money spent per session in July 2017?\n# Session: The period of time a user is active on your site or app. \n# By default, if a user is inactive for 30 minutes or more, any future activity is attributed to a new session. \n# Users that leave your site and return within 30 minutes are counted as part of the original session.\n\nquery = \"\"\"\n        WITH s AS (SELECT totals.transactionRevenue AS total_spent\n        FROM `bigquery-public-data.google_analytics_sample.ga_sessions_*`\n        WHERE _TABLE_SUFFIX BETWEEN '20170701' AND '20170731'\n        AND totals.transactionRevenue IS NOT NULL\n        AND totals.transactionRevenue > 1)\n        SELECT COUNT(*) AS Num_Session,SUM(total_spent)\/COUNT(*) AS average_per_session\n        FROM s\n        \"\"\"\nbq_assistant.query_to_pandas_safe(query)","06574e5e":"# Q7: What is the sequence of pages viewed?\nquery = \"\"\"\n        SELECT date, SUM(totals.pageviews) AS pageviews_per_day\n        FROM `bigquery-public-data.google_analytics_sample.ga_sessions_*`\n        WHERE _TABLE_SUFFIX BETWEEN '20170701' AND '20170731'\n        GROUP BY date\n        ORDER BY date\n        \"\"\"\ndf = bq_assistant.query_to_pandas_safe(query)","4b84a184":"# Show the time sequence of pages viewed in 2017~2018 (simple pandas plot)\ndf.plot()","c471e4ea":"## Part 3: Dive into a google analytics Sample using helper\nhttps:\/\/www.kaggle.com\/bigquery\/google-analytics-sample","4f39eab0":"## Part 1: BigQuey Intro","7a2c79fa":"# MY logbook to learn BigQuery\n\nInspirations:\n\n1. https:\/\/www.kaggle.com\/sohier\/beyond-queries-exploring-the-bigquery-api  Beyond Queries: Exploring the BigQuery API (BQ Inro)\n2. https:\/\/www.kaggle.com\/sohier\/introduction-to-the-bq-helper-package  Introduction to the bq_helper package (bq_helper Intro)\n3. https:\/\/www.kaggle.com\/paultimothymooney\/how-to-query-the-google-analytics-sample-dataset How to Query the Google Analytics Sample Dataset ","c42abff7":"Take away:\n\n1. run_prop = bigquery.job.QueryJobConfig() has atrribute from (check dir(run_prop))\n2. 2**30 is approx 10 * 9 (1GB) (binary system vs. decimal\uff09\n3. Use list to show the itterative bigquery class eg: print([x for x in dir(dry_run) if x.startswith('_')])","e03ec947":"## Part 2: BQ_helper package (for read-only task in BQ)\nhttps:\/\/github.com\/SohierDane\/BigQuery_Helper\/blob\/master\/bq_helper.py","ee1a307a":"Take away:\n1. Use BigQueryHelper ->bq_helper as handler boost the process and turn query into pandas table\n2. bq_assistant=bq_helper(project,dataset)\n3. bq_assistant has atrributes: list_tables, head(), query_to_pandas_safe\n4. query_to_pandas_safe->analogy in SQL:determine the database->query within the database"}}