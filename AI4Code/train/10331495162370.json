{"cell_type":{"c3527426":"code","0b475cc6":"code","2fc40d8c":"code","f848dc83":"code","d3306308":"code","c7f673ce":"code","b7602465":"code","4c063844":"code","28fe8416":"code","7ed38933":"code","4cead51e":"code","1e5483bf":"code","d8bd3288":"code","478206b3":"code","4a2be5ce":"code","5994b76a":"code","be93d4e5":"code","afcb0c40":"code","a7390fff":"code","162900c6":"code","f3392d36":"code","14a0a208":"code","683ec005":"code","92449ba2":"code","5c1f22d3":"code","f2b11a6a":"code","0a683b5f":"code","fec599a1":"code","647c0d30":"code","20fb87f6":"code","ebafe29a":"code","2e46796c":"markdown","60539470":"markdown","059f6049":"markdown","44d276b1":"markdown","2d2c6580":"markdown","3ee92306":"markdown","ec7b5ba7":"markdown","ce2428ac":"markdown","e7c3454a":"markdown","7ddcb0c6":"markdown","1d7a69f5":"markdown","673c5863":"markdown","57d2850a":"markdown"},"source":{"c3527426":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","0b475cc6":"df = pd.read_csv('\/kaggle\/input\/calcofi\/bottle.csv')","2fc40d8c":"df.head()","f848dc83":"data = df[['Salnty','T_degC']]\ndata = data[:][:1000]\ndata.head()","d3306308":"data.drop_duplicates(subset = [\"Salnty\", \"T_degC\"])","c7f673ce":"data.isnull().sum()","b7602465":"from sklearn.impute import SimpleImputer\nimputer = SimpleImputer(missing_values=np.nan, strategy=\"most_frequent\")\nimputer.fit(data)\ndata = imputer.transform(data)","4c063844":"from sklearn.preprocessing import StandardScaler\nmin_max_scaler = StandardScaler()\ndata= min_max_scaler.fit_transform(data)\ndata[:5]","28fe8416":"x=data[:,0:1].reshape(-1, 1)\ny=data[:,1]","7ed38933":"import matplotlib.pyplot as mtp \nmtp.scatter(x,y)\nmtp.title(\"Temp vs Salinity\")  \nmtp.xlabel(\"Salinity\")  \nmtp.ylabel(\"Temp\")  \nmtp.show()  ","4cead51e":"from sklearn.model_selection import train_test_split\nx_train, x_test, y_train, y_test = train_test_split(x,y,test_size = 0.2, random_state = 42)","1e5483bf":"from sklearn import linear_model\nreg = linear_model.LinearRegression()\nreg.fit(x_train,y_train)","d8bd3288":"pred = reg.predict(x_test)","478206b3":"import matplotlib.pyplot as mtp \nmtp.scatter(x_test,y_test,color=\"blue\")  \nmtp.scatter(x_test,pred, color=\"red\")  \nmtp.title(\"TEMPERATURE VS SALINITY(Linear Regression)\")  \nmtp.xlabel(\"Salinity\")  \nmtp.ylabel(\"Temperature\")  \nmtp.show()  ","4a2be5ce":"accuracy = reg.score(x_test, y_test)\nprint(accuracy)","5994b76a":"from sklearn.metrics import mean_squared_error,r2_score, mean_absolute_error\nrmse = mean_squared_error(y_test, reg.predict(x_test), squared=False)\nprint(\"RMSE: %.2f\"% rmse)\nmae = mean_absolute_error(y_test, pred)\nprint('Mean absolute error: %.2f'%mae)\nprint(\"R2-score: %.2f\" % r2_score(np.asanyarray(y_test), pred))","be93d4e5":"from sklearn.preprocessing import PolynomialFeatures  \npoly_regs= PolynomialFeatures(degree= 2)  \nx_poly= poly_regs.fit_transform(x_train)  \nlin_reg_2 =linear_model.LinearRegression()  \nlin_reg_2.fit(x_poly, y_train)  ","afcb0c40":"mtp.scatter(x_test,y_test,color=\"blue\")  \nmtp.scatter(x_test, lin_reg_2.predict(poly_regs.fit_transform(x_test)), color=\"red\")  \nmtp.title(\"TEMPERATURE VS SALINITY(Polynomial Regression)\")  \nmtp.xlabel(\"Salinity\")  \nmtp.ylabel(\"Temperature\")  \nmtp.show()  ","a7390fff":"accuracy = lin_reg_2.score(poly_regs.fit_transform(x_test), y_test)\nprint(accuracy)","162900c6":"pred1 = lin_reg_2.predict(poly_regs.fit_transform(x_test))","f3392d36":"from sklearn.metrics import mean_squared_error,r2_score, mean_absolute_error\nrmse = mean_squared_error(y_test, pred1, squared=False)\nprint(\"RMSE: %.2f\"%rmse)\nmae = mean_absolute_error(y_test, pred1)\nprint('Mean absolute error: %.2f'%mae)\nprint(\"R2-score: %.2f\" % r2_score(np.asanyarray(y_test), pred1))","14a0a208":"from sklearn import tree\nclf = tree.DecisionTreeRegressor()\nclf = clf.fit(x_train, y_train)","683ec005":"pred2 = clf.predict(x_test)","92449ba2":"mtp.scatter(x_test,y_test,color=\"blue\")  \nmtp.plot(x_test, pred2, color=\"red\")  \nmtp.title(\"TEMPERATURE VS SALINITY(Decissiontree Regression)\")  \nmtp.xlabel(\"Salinity\")  \nmtp.ylabel(\"Temperature\")  \nmtp.show()  ","5c1f22d3":"from sklearn.metrics import mean_squared_error,r2_score, mean_absolute_error\nrmse = mean_squared_error(y_test, pred2, squared=False)\nprint(\"RMSE: %.2f\"%rmse)\nmae = mean_absolute_error(y_test, pred2)\nprint('Mean absolute error: %.2f'%mae)\nprint(\"R2-score: %.2f\" % r2_score(np.asanyarray(y_test), pred2))","f2b11a6a":"from sklearn.ensemble import RandomForestRegressor\nrclf = RandomForestRegressor(max_depth=2, random_state=0)\nrclf.fit(x_train, y_train)\npred3 = rclf.predict(x_test)","0a683b5f":"mtp.scatter(x_test,y_test,color=\"blue\")  \nmtp.plot(x_test, pred3, color=\"red\")  \nmtp.title(\"TEMPERATURE VS SALINITY(Randomforest Regression)\")  \nmtp.xlabel(\"Salinity\")  \nmtp.ylabel(\"Temperature\")  \nmtp.show()  ","fec599a1":"from sklearn.metrics import mean_squared_error,r2_score, mean_absolute_error\nrmse = mean_squared_error(y_test, pred3, squared=False)\nprint(\"RMSE: %.2f\"%rmse)\nmae = mean_absolute_error(y_test, pred3)\nprint('Mean absolute error: %.2f'%mae)\nprint(\"R2-score: %.2f\" % r2_score(np.asanyarray(y_test), pred3))","647c0d30":"from sklearn.linear_model import BayesianRidge\nmodel = BayesianRidge()\nmodel.fit(x_train, y_train)\npred4 = model.predict(x_test)","20fb87f6":"mtp.scatter(x_test,y_test,color=\"blue\")  \nmtp.plot(x_test, pred4, color=\"red\")  \nmtp.title(\"TEMPERATURE VS SALINITY(Bayesian Regression)\")  \nmtp.xlabel(\"Salinity\")  \nmtp.ylabel(\"Temperature\")  \nmtp.show()  ","ebafe29a":"from sklearn.metrics import mean_squared_error,r2_score, mean_absolute_error\nrmse = mean_squared_error(y_test, pred4, squared=False)\nprint(\"RMSE: %.2f\"%rmse)\nmae = mean_absolute_error(y_test, pred4)\nprint('Mean absolute error: %.2f'%mae)\nprint(\"R2-score: %.2f\" % r2_score(np.asanyarray(y_test), pred4))","2e46796c":"PLOTTING THE DATA","60539470":"DATA PREPROCESSING","059f6049":"1. LINEAR REGRESSION","44d276b1":"3. DECISSION TREE REGRESSOR","2d2c6580":"SELECTING DEPENDENT AND INDEPENDENT VARIABLES","3ee92306":"3. SCALING THE DATA","ec7b5ba7":"1. REMOVING DUPLICATE VALUES","ce2428ac":"2. POLYNOMIAL REGRESSION","e7c3454a":"5. BAYESIAN REGRESSOR","7ddcb0c6":"RANDOM FOREST REGRESSOR","1d7a69f5":"APPLYING MACHINE LEARNING MODELS","673c5863":"MAKING TRAIN AND TEST SETS","57d2850a":"2. REMOVING NYLL VALUES"}}