{"cell_type":{"cfd70c5d":"code","6952228e":"code","0ab2d583":"code","1fd0851a":"code","68b69ce8":"code","089ed104":"code","044c4ed1":"code","f18fa4ec":"code","9f18726a":"code","90f44486":"code","a278f339":"code","c120c8dc":"code","a51ac693":"markdown","db7bc330":"markdown","82e72198":"markdown"},"source":{"cfd70c5d":"#Import scikit-learn dataset library\nfrom sklearn import datasets\n\n#Load dataset\niris = datasets.load_iris()","6952228e":"# print the label species(setosa, versicolor,virginica)\nprint(iris.target_names)\n\n# print the names of the four features\nprint(iris.feature_names)","0ab2d583":"# print the iris data (top 5 records)\nprint(iris.data[0:5])\n\n# print the iris labels (0:setosa, 1:versicolor, 2:virginica)\nprint(iris.target)","1fd0851a":"# Creating a DataFrame of given iris dataset.\nimport pandas as pd\ndata=pd.DataFrame({\n    'sepal length':iris.data[:,0],\n    'sepal width':iris.data[:,1],\n    'petal length':iris.data[:,2],\n    'petal width':iris.data[:,3],\n    'species':iris.target\n})\ndata.head()","68b69ce8":"# Import train_test_split function\nfrom sklearn.model_selection import train_test_split\n\nX=data[['sepal length', 'sepal width', 'petal length', 'petal width']]  # Features\ny=data['species']  # Labels\n\n# Split dataset into training set and test set\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3) # 70% training and 30% test","089ed104":"#Import Random Forest Model\nfrom sklearn.ensemble import RandomForestClassifier\n\n#Create a Gaussian Classifier\nclf=RandomForestClassifier(n_estimators=100)\n\n#Train the model using the training sets y_pred=clf.predict(X_test)\nclf.fit(X_train,y_train)\n\ny_pred=clf.predict(X_test)","044c4ed1":"#Import scikit-learn metrics module for accuracy calculation\nfrom sklearn import metrics\n# Model Accuracy, how often is the classifier correct?\nprint(\"Accuracy:\",metrics.accuracy_score(y_test, y_pred))","f18fa4ec":"species_idx = clf.predict([[3, 5, 4, 2]])[0]\niris.target_names[species_idx]","9f18726a":"import pandas as pd\nfeature_imp = pd.Series(clf.feature_importances_,index=iris.feature_names).sort_values(ascending=False)\nfeature_imp","90f44486":"import matplotlib.pyplot as plt\nimport seaborn as sns\n%matplotlib inline\n\n# Creating a bar plot\nsns.barplot(x=feature_imp, y=feature_imp.index)\n\n# Add labels to your graph\nplt.xlabel('Feature Importance Score')\nplt.ylabel('Features')\nplt.title(\"Visualizing Important Features\")\nplt.legend()\nplt.show()","a278f339":"# Import train_test_split function\nfrom sklearn.cross_validation import train_test_split\n\n# Split dataset into features and labels\nX=data[['petal length', 'petal width','sepal length']]  # Removed feature \"sepal length\"\ny=data['species']                                       \n# Split dataset into training set and test set\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3) # 70% training and 30% test","c120c8dc":"from sklearn.ensemble import RandomForestClassifier\n\n#Create a Gaussian Classifier\nclf=RandomForestClassifier(n_estimators=100)\n\n#Train the model using the training sets y_pred=clf.predict(X_test)\nclf.fit(X_train,y_train)\n\n# prediction on test set\ny_pred=clf.predict(X_test)\n\n#Import scikit-learn metrics module for accuracy calculation\nfrom sklearn import metrics\n# Model Accuracy, how often is the classifier correct?\nprint(\"Accuracy:\",metrics.accuracy_score(y_test, y_pred))","a51ac693":"## Generating the Model on Selected Features\n\nWe can remove the \"sepal width\" feature because it has very low importance, and select the 3 remaining features.","db7bc330":"## Building a Classifier","82e72198":"## Finding Important Features"}}