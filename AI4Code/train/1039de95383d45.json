{"cell_type":{"f0e1ac5a":"code","27711e0c":"code","ad795c37":"code","a9afcb86":"code","8ffc53b5":"code","b761414a":"code","63f6866b":"code","d41f3f60":"code","93895f5e":"code","f5ce2fb3":"markdown"},"source":{"f0e1ac5a":"import os, gc, time, datetime, random\nimport pandas as pd\nimport numpy as np\nfrom tqdm import tqdm_notebook as tqdm\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\nfrom sklearn.model_selection import StratifiedKFold, train_test_split\nfrom sklearn.preprocessing import StandardScaler, PolynomialFeatures\nfrom sklearn.metrics import roc_auc_score\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.svm import SVC, NuSVC\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.decomposition import PCA\nfrom sklearn.neural_network import MLPClassifier\nfrom sklearn.ensemble import VotingClassifier\nfrom sklearn.discriminant_analysis import QuadraticDiscriminantAnalysis\nfrom sklearn.feature_selection import VarianceThreshold\n\nimport warnings\nwarnings.filterwarnings(\"ignore\")\n%matplotlib inline\npd.set_option('max_columns', 9999)\npd.set_option('max_rows', 9999)\n\nstart = time.time()\n\nos.listdir('..\/input')","27711e0c":"def load_data(nrows=None):\n    train = pd.read_csv('..\/input\/train.csv', nrows=nrows)\n    test = pd.read_csv('..\/input\/test.csv')\n\n    print('Train Shape: {}'.format(train.shape))\n    print('Test Shape: {}'.format(test.shape))\n    \n    return train, test","ad795c37":"def trainer(train, test, cv, _scaler=True, pca=False, variance=False, model=None, plot=True):\n    _train, _test = train.copy(), test.copy()\n    _test['target'] = -1\n    cols = [col for col in _train.columns if not col in ['id', 'target', 'wheezy-copper-turtle-magic']]\n    \n    # Setting\n    preds = np.zeros(len(_test))\n    oof = np.zeros(len(_train))\n    \n    for i in tqdm(range(512)):\n        train_2 = _train[_train['wheezy-copper-turtle-magic'] == i]\n        test_2 = _test[_test['wheezy-copper-turtle-magic'] == i]\n        len_train = len(train_2)\n        Y = train_2['target'].reset_index(drop=True).values\n        train_index = train_2.index\n        test_index = test_2.index      \n        \n        # Merge Train and Test Data\n        merged_data = pd.concat([train_2, test_2], axis=0).reset_index(drop=True)[cols].values\n        \n        # Dimensionality Reduction\n        if pca:\n            clf = PCA(svd_solver='full',n_components='mle')\n            _X = clf.fit_transform(merged_data)\n        elif variance:\n            clf = VarianceThreshold(threshold=1.5)\n            _X = clf.fit_transform(merged_data)\n        else:\n            _X = merged_data\n            \n        # Scaler - Standardization\n        if _scaler:\n            _scaler = StandardScaler()\n            _X = _scaler.fit_transform(_X)\n        \n        # Divide Train, Test data\n        X = _X[:len_train]\n        test_2 = _X[len_train:]\n        del merged_data, _X\n        gc.collect()\n        \n        # Model\n        for i, (trn_index, val_index) in enumerate(cv.split(X, Y)):\n            X_trn, X_val = X[trn_index], X[val_index]\n            Y_trn, Y_val = Y[trn_index], Y[val_index]\n                \n            model.fit(X_trn, Y_trn)\n            oof[train_index[val_index]] += model.predict_proba(X_val)[:,1]\n            preds[test_index] += model.predict_proba(test_2)[:,1] \/ cv.n_splits\n    \n    oof_df = pd.DataFrame({\n        'target': _train['target'],\n        'oof': oof\n    })\n    \n    oof_df_0 = oof_df[oof_df['target'] == 0]\n    oof_df_1 = oof_df[oof_df['target'] == 1]\n    \n    # Plotting Histogram\n    if plot:\n        fig, axes = plt.subplots(nrows=1, ncols=2, figsize=(12, 4))\n        sns.distplot(np.array(preds), kde=False, bins=25, ax=axes[0])\n        axes[0].set_title('Prediction Histogram')\n\n        sns.kdeplot(oof_df_0['oof'].values, shade=True, color=\"b\", label='0', ax=axes[1])\n        sns.kdeplot(oof_df_1['oof'].values, shade=True, color=\"r\", label='1', ax=axes[1])\n        axes[1].set_title('OOF KdePlots')\n        plt.show()\n    \n        # Scoring\n        auc = roc_auc_score(_train['target'], oof)\n        print('AUC: {:.3f}'.format(auc))\n    \n    return np.array(preds), oof","a9afcb86":"def PsuedoLabeling(train, test, _min=0.01, _max=0.99):\n    _train = train.copy()\n    _test = test.copy()\n    # First Model\n#     print('Before Psuedo Labeling Train Data Shape: {}'.format(train.shape))\n    qda_params = {\n        'reg_param': random.uniform(0.01, 0.60)\n    }\n    cv = StratifiedKFold(n_splits=15)\n    model = QuadraticDiscriminantAnalysis(**qda_params)\n    preds, oof = trainer(_train, _test, cv, _scaler=False, variance=True, model=model, plot=False)\n    \n    _test['target'] = preds\n    test_0 = _test[_test['target'] < _min]\n    test_0['target'] = 0\n    test_1 = _test[_test['target'] > _max]\n    test_1['target'] = 1\n    \n    train = pd.concat([train, test_0], axis=0).reset_index(drop=True)\n    train = pd.concat([train, test_1], axis=0).reset_index(drop=True)\n    \n    print('After Psuedo Labeling Train Data Shape: {}'.format(train.shape))\n    \n    return train","8ffc53b5":"# Loading Train\/Test Data\ntrain, test = load_data()\ntrain = PsuedoLabeling(train, test, _min=0.01, _max=0.99)","b761414a":"# Setting Parameter\nlr_params = {\n    'solver': 'lbfgs',\n    'penalty': 'l2',\n    'C': 0.1\n}\n\nsvc_params = {\n    'probability': True,\n    'kernel': 'poly',\n    'degree': 4,\n    'gamma': 'auto',\n}\n\nnusvc_params = {\n    'probability': True,\n    'kernel': 'poly',\n    'degree': 4,\n    'gamma': 'auto',\n    'coef0': 0.053,\n    'nu': 0.59\n}\n\nknn_params = {\n    'n_neighbors': 17,\n    'p': 2.9\n}\n\nmlp_params = {\n    'activation': 'relu',\n    'solver': 'lbfgs',\n    'tol': 1e-6,\n    'hidden_layer_sizes': (250, )\n}\n\nqda_params = {\n    'reg_param': 0.111\n}","63f6866b":"estimators = [\n    ('lr', LogisticRegression(**lr_params)),\n    ('svc', SVC(**svc_params)),\n    ('nusvc', NuSVC(**nusvc_params)),\n    ('knn', KNeighborsClassifier(**knn_params)),\n    ('mlp', MLPClassifier(**mlp_params)),\n    ('qda', QuadraticDiscriminantAnalysis(**qda_params))\n]\n\nweights = [1, 2, 3, 1, 2, 4]\nmodel = VotingClassifier(estimators, voting='soft', weights=weights)\n\ncv = StratifiedKFold(n_splits=10, random_state=46)\n\npreds, oof = trainer(train, test, cv, model=model, pca=True)","d41f3f60":"# submit\nsubmit = pd.read_csv('..\/input\/sample_submission.csv')\nsubmit['target'] = preds\nsubmit.to_csv('submission.csv', index=False)","93895f5e":"end = time.time()\nt = datetime.timedelta(seconds=end - start)\n\nprint('This Kernel Runnnig Time: {}'.format(str(t)))","f5ce2fb3":"2019.06.07 \n\nI Added 'Psuedo Labeling' Function"}}