{"cell_type":{"9e6d2b14":"code","12214792":"code","99ccabf9":"code","170626bc":"code","c61d52bf":"code","1f78e58a":"code","c11e2f94":"code","cac17940":"code","1c53a045":"code","39a8dbb0":"code","e0a517c1":"code","f4328906":"code","f898470e":"code","00481077":"code","7eae2884":"code","1a84472d":"code","f4a250a4":"code","9cbc7750":"code","744e2401":"code","e0323fe7":"code","88701006":"code","8bdcab3b":"markdown","d6731ed3":"markdown","eb671f8e":"markdown","d65e7a9c":"markdown"},"source":{"9e6d2b14":"from zipfile import ZipFile\ndataset_path = '\/content\/drive\/MyDrive\/ML\/fake-image-classification-challenge.zip'\nwith ZipFile(dataset_path, 'r') as zip_ref:\n    zip_ref.extractall()","12214792":"from google.colab import drive\ndrive.mount('\/content\/drive')","99ccabf9":"path = '\/content\/data'","170626bc":"import os\nimport cv2\nimport matplotlib.pyplot as plt\n\nDIRECTORY = '\/content\/data\/train'\nCATEGORIES = ['real','fake']\n\ndir_data = []\nnew_size = 128\nfor category in CATEGORIES:\n    path = os.path.join(DIRECTORY,category)\n    label = CATEGORIES.index(category)\n    for img in os.listdir(path):\n        img_path = os.path.join(path, img)\n        img_arr = cv2.imread(img_path,cv2.IMREAD_GRAYSCALE)\n        dir_data.append(img_arr)\nlen(dir_data)","c61d52bf":"from keras.models import Sequential\nfrom keras.layers import Conv2D, Flatten, Dense,MaxPool2D\nimport numpy as np\nfrom keras.preprocessing import image\nfrom keras.callbacks import EarlyStopping, ModelCheckpoint\nimport tensorflow as tf\nfrom keras.preprocessing.image import ImageDataGenerator\nimport matplotlib.pyplot as plt\n%matplotlib inline\nimport pandas as pd\nimport numpy as np","1f78e58a":"try:\n    from tensorflow.python.util import module_wrapper as deprecation\nexcept ImportError:\n    from tensorflow.python.util import deprecation_wrapper as deprecation\ndeprecation._PER_MODULE_WARNING_LIMIT = 0","c11e2f94":"nbatch = 128\ntrain_datagen = ImageDataGenerator(\n    rescale=1.\/255,\n    rotation_range=10.,\n    width_shift_range=0.1,\n    height_shift_range=0.1,\n    zoom_range=0.2,\n    horizontal_flip=True)\n\ntest_datagen = ImageDataGenerator(rescale = 1.\/255)\n\ntraining_set = train_datagen.flow_from_directory('\/content\/data\/train',\n                                                 target_size=(256,256),\n                                                 batch_size =nbatch,\n                                                 class_mode = 'binary')\n\ntest_set = test_datagen.flow_from_directory('\/content\/data\/test',\n                                            target_size=(256,256),\n                                            batch_size =nbatch,\n                                            class_mode = 'binary')","cac17940":"h1 = plt.hist(training_set.classes, bins=range(0,3), alpha=0.8, color='blue', edgecolor='black')\nh2 = plt.hist(test_set.classes,  bins=range(0,3), alpha=0.8, color='red', edgecolor='black')\nplt.ylabel('# of instances')\nplt.xlabel('Class')","1c53a045":"for X, y in training_set:\n    print(X.shape, y.shape)\n    plt.figure(figsize=(16,16))\n    for i in range(16):\n        plt.subplot(4,4,i+1)\n        plt.axis('off')\n        plt.title('Label: ')\n        img = np.uint8(255*X[i,:,:,0])\n        plt.imshow(img, cmap='gray')\n    break","39a8dbb0":"from tensorflow.keras.layers import Input, Dense, Flatten, Conv2D, MaxPooling2D, BatchNormalization, Dropout, Reshape, Concatenate, LeakyReLU\nfrom tensorflow.keras.preprocessing.image import ImageDataGenerator\nfrom tensorflow.keras.optimizers import Adam\nfrom tensorflow.keras.models import Model","e0a517c1":"# from tensorflow.keras.layers import (\n#     BatchNormalization, SeparableConv2D, MaxPooling2D, Activation, Flatten, Dropout, Dense\n# )\nmodel = Sequential()\n\nmodel.add(Conv2D(32, kernel_size=(3, 3),\n                 activation='relu',\n                 input_shape=(256,256,3)))\nBatchNormalization()\n\nmodel.add(MaxPool2D(pool_size=(2,2)))\n\nmodel.add(Conv2D(64, kernel_size=(3, 3),\n                 activation='relu'))\nBatchNormalization()\n\nmodel.add(MaxPool2D(pool_size=(2,2)))\n\nmodel.add(Conv2D(128, kernel_size=(3, 3),\n                 activation='relu'))\nBatchNormalization()\n\nmodel.add(MaxPool2D(pool_size=(2,2)))\n\nmodel.add(Conv2D(256, kernel_size=(3, 3),\n                 activation='relu'))\nBatchNormalization()\n\nmodel.add(MaxPool2D(pool_size=(2,2)))\n\nmodel.add(Flatten())\n\nmodel.add(Dense(activation=\"relu\",\n                units=512))\n\nmodel.add(Dense(activation=\"sigmoid\",\n                units=1))\n\nmodel.summary()","f4328906":"model.compile(optimizer = 'adam',\n              loss = 'binary_crossentropy',\n              metrics = ['accuracy'])","f898470e":"callbacks_list = [\n    EarlyStopping(monitor='accuracy', patience=10),\n    ModelCheckpoint(filepath='model_checkpoint.hdf5', monitor='accuracy', save_best_only=True, mode ='max'),\n]","00481077":"history = model.fit_generator(\n        training_set,\n        steps_per_epoch=140,\n        epochs=20,\n        validation_data=test_set,\n        validation_steps=28,\n        callbacks = callbacks_list\n    )","7eae2884":"training_set.class_indices","1a84472d":"plt.figure(figsize=(16,6))\nplt.subplot(1,2,1)\nnepochs=len(history.history['loss'])\nplt.plot(range(nepochs), history.history['loss'],     'r-', label='train')\nplt.legend(prop={'size': 20})\nplt.ylabel('loss')\nplt.xlabel('# of epochs')\nplt.subplot(1,2,2)\nplt.plot(range(nepochs), history.history['acc'],     'r-', label='train')\nplt.legend(prop={'size': 20})\nplt.ylabel('accuracy')\nplt.xlabel('# of epochs')","f4a250a4":"def ImagePrediction(loc):\n    test_image = image.load_img(loc, target_size = (256,256))\n    # plt.axis('off')\n    # plt.imshow(test_image)\n    test_image = image.img_to_array(test_image)\n    test_image = np.expand_dims(test_image, axis =0)\n    result = model.predict(test_image)\n    if result[0][0] == 1:\n        predictions = 'Real'\n    else:\n        predictions = 'Fake'\n    return predictions","9cbc7750":"img = '\/content\/data\/test\/00061.jpg'\ntest_image_1 = ImagePrediction(img)\ntest_image_1","744e2401":"df1 = pd.read_csv('\/content\/data\/test.csv')\npath = df1['path']\npredictions = []\nfor paths in path:\n  test_image = ImagePrediction(paths)\n  predictions.append(test_image)","e0323fe7":"print(predictions)","88701006":"path = df1['path']\ndff = pd.DataFrame(path)\ndff['label'] = predictions\ndff.to_csv('\/content\/submit2.csv', index = False)","8bdcab3b":"**Prediction**","d6731ed3":"Training","eb671f8e":"**START**","d65e7a9c":"**Convolutional Neural Net**"}}