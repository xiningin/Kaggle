{"cell_type":{"8e09aaff":"code","6c588934":"code","20b5f08e":"code","52c57448":"code","71eb10ab":"code","ab8b83e4":"code","b1dcfa51":"code","ea7bc46e":"code","74213a80":"code","8ceb208e":"code","1f612ce6":"code","b1924d50":"code","0e8c83c3":"code","96d790b9":"code","bb698e2b":"markdown","94e2bcc3":"markdown","c12893c3":"markdown","9e3f1f7e":"markdown","16cbe30c":"markdown","cd203d5a":"markdown","5e3d38e6":"markdown","e4646a93":"markdown","cc6ee4b6":"markdown","eed615be":"markdown","e11b6007":"markdown"},"source":{"8e09aaff":"import numpy as np\nimport pandas as pd\n\nfrom sklearn.model_selection import train_test_split\n\nimport optuna\n\nimport lightgbm as lgbm\n\nimport sklearn.datasets\nimport sklearn.metrics\n\nDEFAULT_RANDOM_SEED = 2021\ndef seedBasic(seed=DEFAULT_RANDOM_SEED):\n    random.seed(seed)\n    os.environ['PYTHONHASHSEED'] = str(seed)\n    np.random.seed(seed)","6c588934":"TRAIN_PATH = \"..\/input\/titanic\/train.csv\"\nTEST_PATH = \"..\/input\/titanic\/test.csv\"\nSAMPLE_SUBMISSION_PATH = \"..\/input\/titanic\/gender_submission.csv\"\nSUBMISSION_PATH = \"submission.csv\"\n\nID = \"PassengerId\"\nTARGET = \"Survived\"\n\nN_TRIALS = 100\nDIRECTIONS = \"maximize\"\nTEST_SIZE = 0.25","20b5f08e":"train = pd.read_csv(TRAIN_PATH)\ntest = pd.read_csv(TEST_PATH)","52c57448":" #1. delete unnecessary columns\ndrop_elements = ['PassengerId', 'Name', 'Ticket', 'Cabin', 'SibSp','Parch']\ntrain = train.drop(drop_elements, axis = 1)\ntest = test.drop(drop_elements, axis = 1)\n\n#2.find null data and fill new data \ndef checkNull_fillData(df):\n    for col in df.columns:\n        if len(df.loc[df[col].isnull() == True]) != 0:\n            if df[col].dtype == \"float64\" or df[col].dtype == \"int64\":\n                df.loc[df[col].isnull() == True,col] = df[col].mean()\n            else:\n                df.loc[df[col].isnull() == True,col] = df[col].mode()[0]\n\ncheckNull_fillData(train)\ncheckNull_fillData(test)\n\n#3.one hot encoding \nstr_list = [] \nnum_list = []\nfor colname, colvalue in train.iteritems():\n    if type(colvalue[1]) == str:\n        str_list.append(colname)\n    else:\n        num_list.append(colname)\n\ntrain = pd.get_dummies(train, columns=str_list)\ntest = pd.get_dummies(test, columns=str_list)","71eb10ab":"y = train[TARGET]\nX = train.drop([TARGET],axis=1)\nX_test = test","ab8b83e4":"X_train, X_val, y_train, y_val = train_test_split(X, y, test_size=TEST_SIZE)","b1dcfa51":"def objective(trial):\n   \n    # 1.make train data for optuna \n    train_dataset = lgbm.Dataset(X_train, label=y_train)\n    \n    # 2.train\n    param = {\n        \"objective\": \"binary\",\n        \"metric\": \"binary_logloss\",\n        \"verbosity\": -1,\n        \"boosting_type\": \"gbdt\",\n        \"lambda_l1\": trial.suggest_float(\"lambda_l1\", 1e-8, 10.0, log=True),\n        \"lambda_l2\": trial.suggest_float(\"lambda_l2\", 1e-8, 10.0, log=True),\n        \"num_leaves\": trial.suggest_int(\"num_leaves\", 2, 256),\n        \"feature_fraction\": trial.suggest_float(\"feature_fraction\", 0.4, 1.0),\n        \"bagging_fraction\": trial.suggest_float(\"bagging_fraction\", 0.4, 1.0),\n        \"bagging_freq\": trial.suggest_int(\"bagging_freq\", 1, 7),\n        \"min_child_samples\": trial.suggest_int(\"min_child_samples\", 5, 100),\n    }\n    optunaModel = lgbm.train(param, train_dataset)\n    \n    # 3.predict\n    preds = optunaModel.predict(X_val)\n    \n    # 4.evaluate\n    pred_labels = np.rint(preds)\n    accuracy = sklearn.metrics.accuracy_score(y_val, pred_labels)\n    \n    return accuracy\n\nstudy = optuna.create_study(direction=DIRECTIONS)\nstudy.optimize(objective, n_trials=N_TRIALS)","ea7bc46e":"study.best_trial","74213a80":"study.best_trial.value","8ceb208e":"study.best_trial.params","1f612ce6":"model = lgbm.LGBMClassifier(**study.best_trial.params)","b1924d50":"model.fit(X_train,y_train)","0e8c83c3":"pred_test = model.predict(X_test)","96d790b9":"sub = pd.read_csv(SAMPLE_SUBMISSION_PATH)\nsub[TARGET] = pred_test\nsub.to_csv(SUBMISSION_PATH,index=False)\nsub.head()","bb698e2b":"# make study and search best parameters","94e2bcc3":"# predict test data target ","c12893c3":"# build model using optuna best model","9e3f1f7e":"# load data ","16cbe30c":"# study result ","cd203d5a":"# split data (train data and validataion data)","5e3d38e6":"# best params","e4646a93":"# quick preprocess","cc6ee4b6":"# split data (input data and target data)","eed615be":"# submission ","e11b6007":"# global variabels"}}