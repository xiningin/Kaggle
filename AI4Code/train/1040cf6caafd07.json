{"cell_type":{"2ab68549":"code","c6cd384c":"code","5d051cc2":"code","3013d571":"code","51b8c604":"code","3aa5b202":"code","ae414626":"code","99c4a7fd":"code","6a05db52":"code","b170832a":"code","7e07d364":"code","3cf8c466":"code","186f8363":"code","5da4c983":"code","8d91b3cc":"code","e3961ae9":"code","4598b9e3":"code","12e64aec":"code","f0def707":"code","c1b27f1e":"code","c3291e0a":"code","c63150a5":"code","5480b878":"code","931ab5ae":"code","423583cc":"code","a0a09f20":"code","582ce6d1":"code","f0898026":"code","d54f9257":"code","116db512":"code","c6977083":"code","82344af8":"code","d15ed122":"code","248e300d":"code","593d9400":"code","7d14f9f0":"code","62e58099":"code","aa7ccc08":"code","3199e776":"code","7f6b9e44":"code","c70587db":"code","ad88825a":"code","63efa263":"code","22e43c6c":"code","098e3cd8":"code","c8cbb0d5":"code","3ff41d6a":"code","2b8af830":"code","080bf938":"code","77ec873e":"code","7164e145":"code","1124d50d":"code","a12c68d0":"markdown","9eb30fd2":"markdown","296b86f9":"markdown","36465bcb":"markdown","4a057644":"markdown","9b784091":"markdown","ada6d5a6":"markdown","c8384b60":"markdown","451c8700":"markdown","1bec69d6":"markdown","391e78c5":"markdown","2ebfb522":"markdown","88024134":"markdown","b3f3ccde":"markdown","fe1cfb48":"markdown","c5ec1bf0":"markdown","847d04c5":"markdown","c1eaaab0":"markdown","19c51329":"markdown","dbbc2f13":"markdown","7ff7b947":"markdown","516adccc":"markdown","54f546e5":"markdown","16926c63":"markdown","99d4a98a":"markdown","3adbce14":"markdown","76a203e3":"markdown","def75ea8":"markdown","1ff8d470":"markdown","019e9d77":"markdown","7699af5e":"markdown","0c1f8401":"markdown","d5ae54aa":"markdown","2c7cff08":"markdown","719a103a":"markdown","db88f647":"markdown","8398046f":"markdown"},"source":{"2ab68549":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)","c6cd384c":"train = pd.read_csv(\"..\/input\/titanic\/train.csv\")\ntest = pd.read_csv(\"..\/input\/titanic\/test.csv\")\ngender_submission = pd.read_csv(\"..\/input\/titanic\/gender_submission.csv\")","5d051cc2":"train.head()","3013d571":"print(f'[train data shape]: {train.shape}')\nprint(f'[test data shape]: {test.shape}')\nprint('[train info]')\nprint(train.info())  # Pandas","51b8c604":"# [\uacb0\uce21\uce58 \ucc3e\uae30](https:\/\/wikidocs.net\/75068)\n# \ub370\uc774\ud130 \ud504\ub808\uc784\uc758 null \uac12\uc758 \uac1c\uc218\ub97c \uc138\uc5b4 \uc90c \ntrain.isnull().sum()","3aa5b202":"import matplotlib.pyplot as plt\n%matplotlib inline\nimport seaborn as sns\nsns.set() # setting seaborn default for plots","ae414626":"def pie_chart(feature):\n    feature_ratio = train[feature].value_counts(sort=False)\n    feature_size = feature_ratio.size\n    feature_index = feature_ratio.index\n    survived = train[train['Survived'] == 1][feature].value_counts()\n    # survived \ubcc0\uc218: train dataset\uc5d0\uc11c train\ub370\uc774\ud130\uc14b\uc758 survived \uac12\uc774 1\uc778 \uacbd\uc6b0\ub97c \uace8\ub77c\uc11c \uac1c\uc218 \ud655\uc778\n    dead = train[train['Survived'] == 0][feature].value_counts()\n    # dead \ubcc0\uc218: train dataset\uc5d0\uc11c train\ub370\uc774\ud130\uc14b\uc758 survived \uac12\uc774 0\uc778 \uacbd\uc6b0\ub97c \uace8\ub77c\uc11c \uac1c\uc218 \ud655\uc778\n    \n    plt.plot(aspect='auto')\n    plt.pie(feature_ratio, labels=feature_index, autopct=\"%1.1f%%\")\n    # feature_ratio: pie chart\ub85c \uadf8\ub9b4 \ub370\uc774\ud130, labels: feature_index, autopct: (\ud30c\uc774 \uc870\uac01\uc758 \uc804\uccb4 \ub300\ube44 \ubc31\ubd84\uc728) \uc18c\uc218\uc810 \ud55c\uc790\ub9ac\uae4c\uc9c0 %\ub85c \ud45c\ud604\n    plt.title(feature + '\\'s ratio in total')\n    plt.show()\n    \n    for i, index in enumerate(feature_index):\n        plt.subplot(1, feature_size + 1, i +1, aspect = 'equal')\n        plt.pie([survived[index], dead[index]], labels=['Survived', 'Dead'], autopct=\"%1.1f%%\")\n        plt.title(str(index) + '\\'s ratio')\n\nplt.show()","99c4a7fd":"pie_chart('Sex')","6a05db52":"pie_chart('Pclass')","b170832a":"pie_chart('Embarked')","7e07d364":"def bar_chart(feature):\n    survived = train[train['Survived']==1][feature].value_counts()\n    dead = train[train['Survived']==0][feature].value_counts()\n    df = pd.DataFrame([survived, dead])\n    df.index = ['Survived', 'Dead']\n    df.plot(kind='bar', stacked=True, figsize=(10,5))","3cf8c466":"bar_chart(\"SibSp\")","186f8363":"bar_chart(\"Parch\")","5da4c983":"train_and_test = [train, test]","8d91b3cc":"for dataset in train_and_test:\n    dataset['Title'] = dataset.Name.str.extract('([A-Za-z]+)\\.')\n    # \uacf5\ubc31\uc73c\ub85c \uc2dc\uc791\ud558\uace0 .\uc73c\ub85c \ub05d\ub098\ub294 \ubb38\uc790\uc5f4\uc744 \ucd94\ucd9c\ud558\uaca0\ub2e4.\n\ntrain.head()","e3961ae9":"# \ucd94\ucd9c\ud55c Title\uc744 \uac00\uc9c4 \uc0ac\ub78c\uc758 \uc218\ub97c \ud655\uc778: pd.crosstab\n    \npd.crosstab(train['Title'], train['Sex'])","4598b9e3":"Capt = train[train['Title'] == 'Major']\nCapt","12e64aec":"# Ms\ub97c \uc5b4\ub514\uc5d0 \ud3ec\ud568\uc2dc\ucf1c\uc57c \ud560\uc9c0 \ubaa8\ub974\uaca0\uc5b4\uc11c \ub098\uc774\ub97c \ud655\uc778\ud574\ubcf4\ub2c8 28\uc138. Miss\ub85c \uc62e\uae40\nMs = train[train['Title'] == 'Ms']\nMs","f0def707":"# Lady\uac00 \uadc0\uc871 \uc5ec\uc131\uc774\uae30\ub3c4 \ud558\uace0 \ub098\uc774 \ub9ce\uc740 \uc5ec\uc131\uc5d0 \ub300\ud55c \uc874\uce6d\uc774\uae30\ub3c4 \ud574\uc11c \ub098\uc774 \ud655\uc778\ud588\ub354\ub2c8 48\uc138, Mrs\ub85c \uc62e\uae40\nLady = train[train['Title'] == 'Lady']\nLady","c1b27f1e":"# \uc131\ubcc4 \ucd94\uc815\uc774 \uc5b4\ub824\uc6cc\uc11c \ud655\uc778\ud588\ub354\ub2c8 \uc5ec\uc131 1\uba85 \uc81c\uc678 \ub098\uba38\uc9c0 \ub0a8\uc131\uc774\ub77c Mr\ub85c \uc62e\uae40\nDr = train[train['Title'] == 'Dr']\nDr","c3291e0a":"# \uce58\ud658\ud55c\ub2e4.\nfor dataset in train_and_test:\n    dataset['Title'] = dataset['Title'].replace(['Rev', 'Dr'], 'Mr')\n    dataset['Title'] = dataset['Title'].replace(['Mme'],'Mrs')\n    dataset['Title'] = dataset['Title'].replace(['Mlle','Ms'],'Miss')\n    dataset['Title'] = dataset['Title'].replace(['Countess', 'Dona', 'Lady', ], 'High_f')\n    dataset['Title'] = dataset['Title'].replace(['Don', 'Jonkheer', 'Capt', 'Col', 'Major', 'Sir'], 'Mr')\ntrain[['Title', 'Survived']].groupby(['Title'], as_index=False).mean()","c63150a5":"# # \ud559\uc2b5\uc744 \uc704\ud574 String Data\ub85c \ubcc0\ud615\n\n# for dataset in train_and_test:\n#     dataset['Title'] = dataset['Title'].astype(str)","5480b878":"for dataset in train_and_test:\n    dataset['Title'] = dataset['Title'].replace('High_f', 0)  # 1.000\n#     dataset['Title'] = dataset['Title'].replace('High_m', 1)  # 0.375\n    dataset['Title'] = dataset['Title'].replace('Master', 1)  # 0.575\n    dataset['Title'] = dataset['Title'].replace('Miss', 2) # 0.702\n    dataset['Title'] = dataset['Title'].replace('Mr', 3)  # 0.161\n    dataset['Title'] = dataset['Title'].replace('Mrs', 4)  # 0.793","931ab5ae":"train.head()","423583cc":"for dataset in train_and_test:\n    dataset['Sex'] = dataset['Sex'].astype(str)","a0a09f20":"# NaN \ud655\uc778\n# `.value_counts()` : \uc5b4\ub5a4 \uceec\ub7fc\/Series\uc758 unique value\ub4e4\uc744 count\ud574\uc8fc\ub294 \ud568\uc218\n# [https:\/\/www.codeit.kr\/community\/threads\/5941]\n\ntrain.Embarked.value_counts(dropna=False)","582ce6d1":"for dataset in train_and_test:\n    dataset['Embarked'] = dataset['Embarked'].fillna(value='S')\n    dataset['Embarked'] = dataset['Embarked'].astype(str)","f0898026":"# NaN \uac12\uc774 \uc0ac\ub77c\uc84c\ub2e4.\ntrain.Embarked.value_counts(dropna=False)","d54f9257":"# title\ubcc4 \ud3c9\uade0 \ub098\uc774\ub97c \uad6c\ud55c\ub2e4.\n# train\ub9cc \uc368\ub3c4 \ub418\ub098? test\ub294? => (2\ucc28\uc2dc\ub3c4) train_mean\uacfc test_mean\uc758 \ud3c9\uade0 \uc0ac\uc6a9\n\ntrain_mean = train.groupby('Title')['Age'].mean()\ntest_mean =test.groupby('Title')['Age'].mean()\n\nprint((train_mean[0] + test_mean[0])\/2)\nprint((train_mean[1] + test_mean[1])\/2)\nprint((train_mean[2] + test_mean[2])\/2)\nprint((train_mean[3] + test_mean[3])\/2)\nprint((train_mean[4] + test_mean[4])\/2)\n# print((train_mean[5] + test_mean[4])\/2)","116db512":"# \uc5ec\uae30\uc11c train\uc744 \uc4f0\ub294\uc9c0 train_and_test\ub97c \uc4f0\ub294\uc9c0 \ubaa8\ub974\uaca0\ub2e4\n# Age\uc758 \uacb0\uce21\uce58\uc5d0 \ud3c9\uade0\uac12\uc744 \uc785\ub825\n\nfor dataset in train_and_test:\n    dataset.loc[(dataset.Age.isnull()) & (dataset.Title == 0), 'Age'] = 39.75\n#     dataset.loc[(dataset.Age.isnull()) & (dataset.Title == 1), 'Age'] = 50.625\n    dataset.loc[(dataset.Age.isnull()) & (dataset.Title == 1), 'Age'] = 5.99\n    dataset.loc[(dataset.Age.isnull()) & (dataset.Title == 2), 'Age'] = 21.81\n    dataset.loc[(dataset.Age.isnull()) & (dataset.Title == 3), 'Age'] = 32.40\n    dataset.loc[(dataset.Age.isnull()) & (dataset.Title == 4), 'Age'] = 37.34","c6977083":"# \ub2e4\uc2dc Age \ub370\uc774\ud130\uc5d0 Null\uc774 \uc788\ub294\uc9c0 \ud655\uc778\n\nprint(train.Age.isnull().sum())\nprint(test.Age.isnull().sum())","82344af8":"# \uc774\uc81c \ub098\uc787\ub300\ub97c \uc77c\uc815\ud55c \uad6c\uac04\uc73c\ub85c \ubc14\uafbc\ub2e4. `pd.cut()`\n\nfor dataset in train_and_test:\n    dataset['Age'] = dataset['Age'].astype(int)\n    train['AgeBand'] = pd.cut(train['Age'],7)\n    \nprint(train[['AgeBand', 'Survived']].groupby(['AgeBand'], as_index=False).mean())","d15ed122":"# Age \uac12\uc744 \uc704\uc5d0\uc11c \ub098\ub208 \uad6c\uac04\uc5d0 \uc18d\ud558\ub3c4\ub85d \ubc14\uafbc\ub2e4.\n\nfor dataset in train_and_test:\n    dataset.loc[ dataset['Age'] <= 11, 'Age'] = 1\n    dataset.loc[(dataset['Age'] > 22) & (dataset['Age'] <= 34), 'Age'] = 2\n    dataset.loc[(dataset['Age'] > 34) & (dataset['Age'] <= 45), 'Age'] = 3\n    dataset.loc[(dataset['Age'] > 45) & (dataset['Age'] <= 57), 'Age'] = 4\n    dataset.loc[(dataset['Age'] > 57) & (dataset['Age'] <= 68), 'Age'] = 5\n    dataset.loc[(dataset['Age'] > 68) & (dataset['Age'] <= 80), 'Age'] = 6","248e300d":"# for dataset in train_and_test:\n#   dataset.loc[ dataset['Age'] <= 16, 'Age'] = 0\n#   dataset.loc[(dataset['Age'] > 16) & (dataset['Age'] <= 32), 'Age'] = 1\n#   dataset.loc[(dataset['Age'] > 32) & (dataset['Age'] <= 48), 'Age'] = 2\n#   dataset.loc[(dataset['Age'] > 48) & (dataset['Age'] <= 64), 'Age'] = 3\n#   dataset.loc[ dataset['Age'] > 64, 'Age'] = 4\n#   dataset['Age'] = dataset['Age'].map( { 0: 'Child',  1: 'Young', 2: 'Middle', 3: 'Prime', 4: 'Old'} ).astype(str)","593d9400":"for dataset in train_and_test:\n    dataset[\"Family\"] = dataset[\"Parch\"] + dataset[\"SibSp\"]\n    dataset['Family'] = dataset['Family'].astype(int)","7d14f9f0":"# \uc804\ucc98\ub9ac: \uc54c\ud30c\ubcb3\ub9cc \ucd94\ucd9c\nfor dataset in train_and_test:\n    dataset['Cabin'] = dataset.Cabin.str.extract(r'([A-Za-z]+)\\d')\n    # \uacf5\ubc31\uc73c\ub85c \uc2dc\uc791\ud558\uace0 decimal \ub85c \ub05d\ub098\ub294 \ubb38\uc790\uc5f4\uc744 \ucd94\ucd9c\ud558\uaca0\ub2e4.\n\ntrain.tail()","62e58099":"# \ucd94\ucd9c\ud55c Cabin\uc758 \uac1c\uc218 \ud655\uc778: pd.crosstab\n\npd.crosstab(train['Cabin'], train['Pclass'])\n# train.Cabin.isnull().sum()","aa7ccc08":"# Pclass\ub97c \ucc38\uace0\ud558\uc5ec Cabin\uc758 \uacb0\uce21\uce58\ub97c \ucc44\uc6b4\ub2e4.\n\nfor dataset in train_and_test:\n    dataset['Cabin'] = dataset['Cabin'].replace('A', 0)\n    dataset['Cabin'] = dataset['Cabin'].replace('B', 1)\n    dataset['Cabin'] = dataset['Cabin'].replace('C', 2)\n    dataset['Cabin'] = dataset['Cabin'].replace('D', 3)\n    dataset['Cabin'] = dataset['Cabin'].replace('E', 4)\n    dataset['Cabin'] = dataset['Cabin'].replace('F', 5)\n    dataset['Cabin'] = dataset['Cabin'].replace('G', 6)","3199e776":"# Pclass\ubcc4 Cabin \ud3c9\uade0\uc744 \uad6c\ud55c\ub2e4. => \ud3c9\uade0\uc73c\ub85c \ub418\ub294\uc9c0 \ubaa8\ub974\uaca0\ub294\ub370... \uc77c\ub2e8 \uc0ac\uc6a9 \ud560 \uc218\ub294 \uc788\uc744 \uac70 \uac19\ub2e4.\npd.crosstab(train['Pclass'], train['Cabin'])\n\n# Pandas Series \uc0ac\uc6a9\ud558\ub294 \ubc29\ubc95 \uc544\uc9c1 \ubaa8\ub974\uaca0\uc5b4\uc11c \ub9ac\uc2a4\ud2b8\ub85c \uce58\ud658 => \uc778\ub371\uc2a4\ub85c \uc811\uadfc\ntrain_mean = train.groupby('Pclass')['Cabin'].mean()\ntrain_mean = list(train_mean)\ntest_mean =test.groupby('Pclass')['Cabin'].mean()\ntest_mean = list(test_mean)\n\nprint((train_mean[0] + test_mean[0])\/2)\nprint((train_mean[1] + test_mean[1])\/2)\nprint((train_mean[2] + test_mean[2])\/2)","7f6b9e44":"# Cabin \uacb0\uce21\uce58\uc5d0 Pclass -> Cabin\uc758 \ud3c9\uade0\uce58 \uc785\ub825\n# Cabin == \uc704\uce58, \uc120\uccb4 \ud6c4\ubbf8\ubd80\ud130 \uce68\ubab0\ud588\uc73c\ubbc0\ub85c \uac1d\uc2e4\uc758 \uc704\uce58\uac00 \uc0dd\uc874\uc5d0 \uc601\ud5a5\uc744 \ubbf8\ucce4\uc744 \uac83\uc774\ub2e4.\n\nfor dataset in train_and_test:\n    dataset.loc[(dataset.Cabin.isnull()) & (dataset.Pclass == 1), 'Cabin'] = 1.98\n    dataset.loc[(dataset.Cabin.isnull()) & (dataset.Pclass == 2), 'Cabin'] = 4.56\n    dataset.loc[(dataset.Cabin.isnull()) & (dataset.Pclass == 3), 'Cabin'] = 5.12","c70587db":"print(train.Cabin.isnull().sum())\nprint(test.Cabin.isnull().sum())","ad88825a":"# \uc88c\uc11d \ub4f1\uae09 \ubcc4 \ud3c9\uade0 Fare\ntrain_mean = train.groupby('Pclass')['Fare'].mean()\ntrain_mean = list(train_mean)\n\ntest_mean = test.groupby('Pclass')['Fare'].mean()\ntest_mean = list(test_mean)\n\nprint((train_mean[0] + test_mean[0])\/2)\nprint((train_mean[1] + test_mean[1])\/2)\nprint((train_mean[2] + test_mean[2])\/2)","63efa263":"# \uacb0\uce21\uce58 \ucc44\uc6b0\uae30\nfor dataset in train_and_test:\n    dataset.loc[(dataset.Fare.isnull()) & (dataset.Pclass == 1), 'Fare'] = 89.21\n    dataset.loc[(dataset.Fare.isnull()) & (dataset.Pclass == 2), 'Fare'] = 21.43\n    dataset.loc[(dataset.Fare.isnull()) & (dataset.Pclass == 3), 'Fare'] = 13.06","22e43c6c":"print(train.Fare.isnull().sum())\nprint(test.Fare.isnull().sum())","098e3cd8":"print(\"------ train info ------\")\ntrain.info()\n# Cabin: 891-204 null\n\nprint(\"------ test info ------\")\ntest.info()\n# Fare: 417-1 null \n# Cabin: 417-91 null","c8cbb0d5":"# `axis = 0` \uac01 \uc5f4\uc758 \ubaa8\ub4e0 \ud589\uc5d0 \ub300\ud558\uc5ec \ub3d9\uc791\n# `axis = 1` \uac01 \ud589\uc758 \ubaa8\ub4e0 \uc5f4\uc5d0 \ub300\ud558\uc5ec \ub3d9\uc791\n\nfeatures_drop = ['Name', 'Ticket', 'SibSp', 'Parch']\ntrain = train.drop(features_drop, axis=1) \ntest = test.drop(features_drop, axis=1)\ntrain = train.drop(['PassengerId', 'AgeBand'], axis=1)\n\nprint(train.head())\nprint(test.head())","3ff41d6a":"# One-hot-encoding for categorical variables\ntrain = pd.get_dummies(train)\ntest = pd.get_dummies(test)\n\ntrain_label = train['Survived']\ntrain_data = train.drop('Survived', axis=1)\ntest_data = test.drop(\"PassengerId\", axis=1).copy()","2b8af830":"# \uc704 \ubaa8\ub378\ub4e4\uc744 \uc0ac\uc6a9\ud558\uae30 \uc704\ud574 \ud544\uc694\ud55c `scikit-learn` \ub77c\uc774\ube0c\ub7ec\ub9ac\ub97c \ud638\ucd9c\n# `Tensorflow`\uc640 \uc720\uc0ac\ud558\ub098 \uc880 \ub354 \uac04\ub2e8\ud55c \ub77c\uc774\ube0c\ub7ec\ub9ac\ub2e4.\n\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.svm import SVC\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.naive_bayes import GaussianNB\n\n\n# \uc815\ub82c\ub41c \ub370\uc774\ud130\uac00 \ud559\uc2b5\uc5d0 \ubc29\ud574\uac00 \ub420 \uc218 \uc788\ub2e4. \ub370\uc774\ud130\ub97c \uc11e\uae30 \uc704\ud574 \ud544\uc694\ud55c shuffle\uc744 \ud638\ucd9c\ud55c\ub2e4.\nfrom sklearn.utils import shuffle","080bf938":"train_data, train_label = shuffle(train_data, train_label, random_state = 5)","77ec873e":"def train_and_test(model):\n    model.fit(train_data, train_label)\n    prediction = model.predict(test_data)\n    accuracy = round(model.score(train_data, train_label) * 100, 2)\n    print(\"Accuracy : \", accuracy, \"%\")\n    return prediction","7164e145":"# Logistic Regression\nlog_pred = train_and_test(LogisticRegression())\n\n# SVM\nsvm_pred = train_and_test(SVC())\n\n#kNN\nknn_pred_4 = train_and_test(KNeighborsClassifier(n_neighbors = 4))\n\n# Random Forest\nrf_pred = train_and_test(RandomForestClassifier(n_estimators=100))\n\n# Navie Bayes\nnb_pred = train_and_test(GaussianNB())","1124d50d":"submission = pd.DataFrame({\n    \"PassengerId\": test[\"PassengerId\"],\n    \"Survived\": rf_pred\n})\n\nsubmission.to_csv('submission_rf_2-2.csv', index=False)\n\n# (try 2) AttributeError: module 'aiohttp' has no attribute 'http_exceptions'??","a12c68d0":"`scikit-learn`\uc5d0\uc11c `fit()` \uacfc `predict()` \ub97c \uc81c\uacf5\ud55c\ub2e4. \uc774\ub97c \uc774\uc6a9\ud558\uba74 \uac04\ub2e8\ud558\uac8c \ud559\uc2b5\ud558\uace0 \uc608\uce21 \ud560 \uc218 \uc788\ub2e4.\n\n\uc704 \ud568\uc218\uc5d0 \uac01\uac01\uc758 \ubaa8\ub378\uc744 \ub123\uc5b4\uc8fc\uba74 \ud559\uc2b5\uacfc \ud3c9\uac00\uac00 \uc644\ub8cc\ub41c\ub2e4.","9eb30fd2":"\uc815\uaddc\ud45c\ud604\uc2dd `str.extract()` [\ucc38\uace0](https:\/\/bio-info.tistory.com\/21)\n\n* \uc815\uaddc\ud45c\ud604\uc2dd: **\ud2b9\uc815 \uc870\uac74\uc758 \ubb38\uc790\ub97c _\uac80\uc0c9_ \ud558\uac70\ub098 _\uce58\ud658_ \ud558\ub294 \uacfc\uc815\uc744 \uac04\ud3b8\ud558\uac8c \ucc98\ub9ac\ud558\uae30 \uc704\ud55c \uc218\ub2e8\uc774\ub2e4.**\n* \ud30c\uc774\uc36c\uc5d0 \uc815\uaddc\ud654\ub97c \ud560 \ub54c\ub294 \ubcf4\ud1b5 `re` \ub77c\uc774\ube0c\ub7ec\ub9ac\ub97c \uc0ac\uc6a9\ud558\uc9c0\ub9cc, `pandas`\ub97c \uc0ac\uc6a9\ud560 \uc218\ub3c4 \uc788\ub2e4.\n\n* `str.extract()`\n    * `\ub370\uc774\ud130\ud504\ub808\uc784.\uceec\ub7fc\uc774\ub984.unique()` : \ud574\ub2f9 \uc5f4\uc774 \uc5b4\ub5a4 unique\ud55c \uac12\uc73c\ub85c \uc774\ub8e8\uc5b4\uc84c\ub294\uc9c0 \ud655\uc778\n    * \uc704 \uac12\uc5d0\uc11c \ud2b9\uc815 \ubb38\uc790\/\uc22b\uc790\ub9cc \ucd94\ucd9c\ud558\uace0 \uc2f6\uc744 \ub54c \uc0ac\uc6a9\ud558\ub294 \ud568\uc218\uac00 `str.extract()`\ub2e4.\n    * \ubb38\ubc95: `\ub370\uc774\ud130\ud504\ub808\uc784.\uceec\ub7fc\uc774\ub984.str.extract(r'(\ucd94\ucd9c\ud558\uace0\uc790 \ud558\ub294 \ubb38\uc790)')\n* `str.contains()`\n    * \ud55c \uc5f4\uc5d0 \ud3ec\ud568\ub41c \ubb38\uc790\ub97c \ud655\uc778\ud560 \ub54c \uc0ac\uc6a9\ud55c\ub2e4.\n    * \ubb38\ubc95: `\ub370\uc774\ud130\ud504\ub808\uc784.\uceec\ub7fc\uc774\ub984.str.contains(r'(\ud655\uc778\ud558\uace0\uc790 \ud558\ub294 \ubb38\uc790\uc5f4)')\n    * \uac1c\uc218\ub97c \ud655\uc778\ud558\ub824\uba74 `len()`\uc744 \ucd94\uac00\ud558\uba74 \ub41c\ub2e4.","296b86f9":"### Fare\n\n* test data\uc5d0 \ud558\ub098 \uc874\uc7ac\n* \ud2f0\ucf13 \uac00\uaca9\uc740 \uc88c\uc11d \ub4f1\uae09\uacfc \uad00\uacc4\uc788\uc73c\ubbc0\ub85c \ud3c9\uade0 \ub0b4\uc11c \ucc44\uc6b8 \uac83","36465bcb":"\uc704 \uadf8\ub798\ud504\uc5d0\uc11c \uc54c \uc218 \uc788\ub294 \uac83\uc740 \ub2e4\uc74c\uacfc \uac19\ub2e4. (Embarked)\n\n1. \uac00\uc7a5 \ub9ce\uc740 \uc2b9\uac1d\uc774 \ud0d1\uc2b9\ud55c \ud56d\uad6c\ub294 S\ud56d\uad6c\n    * S > C > Q \uc21c\uc11c\ub85c \ud0d1\uc2b9\uac1d\uc758 \uc218\uac00 \ub9ce\uc558\ub2e4.\n2. \uc0ac\ub9dd\uc790 \ube44\uc728\uc774 \uac00\uc7a5 \ub192\uc740 \ud56d\uad6c\ub294 S\ud56d\uad6c \ud0d1\uc2b9\uac1d\n    * S (66.3%) > Q (61.0%) > C (44.6%) \uc21c\uc11c\ub2e4.\n    * \ud0d1\uc2b9\uac1d\uc774 \ub9ce\uc558\uc73c\ub2c8 \uc0ac\ub9dd\uac1d \uc218\ub3c4 \ub9ce\uc744\ud150\ub370 \uadf8 \ub2e4\uc74c\uc73c\ub85c \ud0d1\uc2b9\uac1d\uc774 \ub9ce\uc558\ub358 C \ud56d\uad6c\ub294 \uc65c \uc0dd\uc874\uc790 \ube44\uc728\uc774 \ub192\uc740\uc9c0 \ubaa8\ub974\uac9f\ub2e4.\n3. \uc0ac\ub9dd\uc790 \uc218\uac00 \uac00\uc7a5 \ub9ce\uc558\ub358 `\ud0d1\uc2b9\ud56d\uad6c`\ub294 S \ud56d\uad6c\ub2e4.\n    * \uc0dd\uc874\/\uc0ac\ub9dd\uacfc \uc5f0\uad00\uc774 \uc5c6\uc744 \ud655\ub960\uc774 \ud06c\ub2e4.\n    * \uc5f0\uad00\uc131\uc744 \ucc3e\uc73c\ub824\uba74: `Embarked`\uc640 `Pclass`\uc758 \uc0c1\uad00\uad00\uacc4\ub97c \ucc3e\uc544\ubcf4\ub294\ud3b8\uc774 \uc88b\uc9c0 \uc54a\uc744\uae4c?","4a057644":"\uc704 \uadf8\ub798\ud504\uc5d0\uc11c \uc54c \uc218 \uc788\ub294\uac83\uc740 \ub2e4\uc74c\uacfc \uac19\ub2e4. (Sex)\n1. \ud0d1\uc2b9\uac1d\uc740 \ub0a8\uc131\uc774 \uc5ec\uc131\ubcf4\ub2e4 2\ubc30 \uac00\uae4c\uc774 \ub9ce\ub2e4.\n    * \ub0a8\uc131 64.8%, \uc5ec\uc131 35.2%\n2. \ud0d1\uc2b9\uc790\uc758 \uc218\uc5d0 \ube44\ud574 \uc5ec\uc131\uc774 \uc0b4\uc544\ub0a8\uc740 \ud655\ub960\uc774 \ub354 \ud06c\ub2e4.\n    * \uc5ec\uc131 \uc0dd\uc874\uc790 74.2%\n    * \ub0a8\uc131 \uc0dd\uc874\uc790 81.1%\n3. `\uc5ec\uc131` \uc0dd\uc874\uc790\uac00 \uc0dd\uc874\ud560 \ud655\ub960\uc774 \ub354 \ud06c\ub2e4.\n    * \uc704 \ub0b4\uc6a9\ub9cc\uc73c\ub85c \ud559\uc2b5\uc744 \ud574\ub3c4 0.7 \uc815\ub3c4\uc758 \uc815\ud655\ub3c4\ub294 \ub098\uc624\uaca0\ub2e4","9b784091":">  Title\tSurvived\n\n* 0\tHigh_f\t1.000000\n* 1\tMaster\t0.575000\n* 2\tMiss\t0.702703\n* 3\tMr\t0.161710\n* 4\tMrs\t0.793651\n\n>\tTitle\tSurvived\n\n* 0\tHigh_f\t1.000000\n* 1\tHigh_m\t0.375000\n* 2\tMaster\t0.575000\n* 3\tMiss\t0.702703\n* 4\tMr\t0.158491\n* 5\tMrs\t0.793651","ada6d5a6":"\uc704 \ud45c\uc5d0\uc11c \uc54c \uc218 \uc788\ub294 \uac83 (Title)\n\n* Capt \ub0a8\uc131\uba85\uc0ac => Mr\n* Col : \ub0a8\uc131\uba85\uc0ac => Mr\n* Countess : \uc5ec\uc790 \ubc31\uc791 => Mrs\n* Don \uc0c1\ub958\uce35, sir, \ub0a8\uc131\uba85\uc0ac => Mr\n* Dr : \ubc15\uc0ac (\uc131\ubcc4 \ucd94\uc815 \uc5b4\ub824\uc6c0)\n    * \uc5ec\uc131\ub3c4 \uc788\ub294\ub370 \uc5b4\ub5bb\uac8c \ud558\uc9c0?\n    * \uc77c\ub2e8 \uc5ec\uc131 \ud55c\uba85\uc774\uace0 \ub098\uba38\uc9c0 \ub0a8\uc131\uc774\ubbc0\ub85c Mr\ub85c \ubd84\ub958\n* Jonkheer : \ub0ae\uc740 \uc9c1\uae09\uc758 \uadc0\uc871, \ub0a8\uc131\uba85\uc0ac => Mr\n* Lady : \ub098\uc774 \uc788\ub294 \uc5ec\uc131 \ub610\ub294 \uadc0\uc871\ubd80\uc778 => Mrs ?\n* Major : \uc18c\ub839\n* Master : \uacb0\ud63c\uc744 \ud558\uc9c0 \uc54a\uc740 \ub0a8\uc131. \uc8fc\ub85c \uccad\uc18c\ub144 \uc774\ud558.\n* Miss : \uacb0\ud63c\uc744 \ud558\uc9c0 \uc54a\uc740 \uc5ec\uc131\n* Mlle : \uc601\uc560, \uc544\uac00\uc528 => Miss\n* Mme : \ubd80\uc778 => Mrs\n* Mr \uc131\uc778 \ub0a8\uc131\n* Mrs \uacb0\ud63c\uc744 \ud55c \uc5ec\uc131\n* Ms \uacb0\ud63c\uc5ec\ubd80\ub97c \ubc1d\ud788\uace0 \uc2f6\uc9c0 \uc54a\uc744\ub54c \uc0ac\uc6a9\ud558\ub294 \uc5ec\uc131 \ud638\uce6d => Miss\n* Rev : \ubaa9\uc0ac\/\uc2e0\ubd80\n* Sir : \uc774\ub984 \ubaa8\ub974\ub294 \ub0a8\uc131? => Mr","c8384b60":"* 2\ucc28 \uc2dc\ub3c4\n    * \uc5ed\uc2dc \uacb0\uce21\uce58\ub97c \ucc44\uc6b8 \ub54c title\ub97c \ucc38\uace0\ud558\uae30 \ub54c\ubb38\uc5d0 title\uc744 \uc880 \ub354 \uc138\ubd84\ud654 \ud574\uc57c \ud55c\ub2e4.\n    * Pclass \uac12\uc774 \uc791\uc744 \uc218\ub85d \uc0dd\uc874\ud655\ub960\uc774 \uc62c\ub77c\uac00\ubbc0\ub85c title\ub97c \uc0ac\ud68c\uc801 \uc9c0\uc704\uc5d0 \ub530\ub77c \ub098\ub204\ub294 \uc791\uc5c5\uc774 \ud544\uc694 \ud560 \uac83\uc73c\ub85c \ubcf4\uc778\ub2e4.\n        * high \uadc0\uc871\uacc4\uce35 = Countess, Don, Jonkheer, Lady\n        * sol \uad70\uc778 = Capt, Col, Major\n        * \uad50\uc721 \uc218\uc900\uc774 \ub192\uc740 Dr\ub3c4 \ub192\uc740 \ub4f1\uae09\uc758 \ud2f0\ucf13\uc744 \ubcf4\uc720\ud560 \ud655\ub960\uc774 \ud06c\ub2e4.\n    * \ub2e4\uc74c\uc758 title\uc740 ['Countess', 'Don', 'Jonkheer', 'Lady', 'Capt', 'Col', 'Major', 'Dr'] highclass\ub85c \ub530\ub85c \ub77c\ubca8\ub9c1\ud55c\ub2e4.\n    * \uadfc\ub370 \uc774\ub807\uac8c\ud558\uba74 \ub098\uc774 \uacb0\uce21\uce58\ub294 \uc5b4\ub5bb\uac8c...?","451c8700":"# Import libraries","1bec69d6":"* 2\ucc28 \uc2dc\ub3c4\n    * \ub098\uc774 binnig\uc758 \uadf8\ub8f9 \ubc94\uc704\uac00 \ub108\ubb34 \ub113\uc73c\ub2c8 10\uc0b4 \ub2e8\uc704\ub85c \ub2e4\uc2dc \ucabc\uac20\ub2e4.\n    * \uc774\uc804\n        ``` py\n        for dataset in train_and_test:\n        dataset.loc[ dataset['Age'] <= 16, 'Age'] = 0\n        dataset.loc[(dataset['Age'] > 16) & (dataset['Age'] <= 32), 'Age'] = 1\n        dataset.loc[(dataset['Age'] > 32) & (dataset['Age'] <= 48), 'Age'] = 2\n        dataset.loc[(dataset['Age'] > 48) & (dataset['Age'] <= 64), 'Age'] = 3\n        dataset.loc[ dataset['Age'] > 64, 'Age'] = 4\n        dataset['Age'] = dataset['Age'].map( { 0: 'Child',  1: 'Young', 2: 'Middle', 3: 'Prime', 4: 'Old'} ).astype(str)\n        ```","391e78c5":"### Categorical feature \ubd84\ud3ec\ub97c \ud655\uc778\ud558\uae30 \uc704\ud574 Bar chart\ub97c \uc0dd\uc131\ud55c\ub2e4.\n\nBar chart\ub85c\ub294 \ub2e4\uc74c \ud2b9\uc131\uc744 \ud655\uc778\ud55c\ub2e4.\n\n* `SibSp` : \ub3d9\uc2b9\ud55c \ubc30\uc6b0\uc790\uc640 \ud615\uc81c\uc790\ub9e4\uc758 \uc218\n* `Parch` : \ub3d9\uc2b9\ud55c \ubd80\ubaa8\uc640 \uc544\uc774\ub4e4\uc758 \uc218 (\uac00\uc871)\n\n=> \uc65c \uc774\ub807\uac8c \ub098\ub208\uac78\uae4c...?","2ebfb522":"### SibSp & Parch Feature\n\n* \uc704\uc5d0\uc11c \uc0b4\ud3c8\uc744 \ub54c SibSp\uac00 4 \uc774\uc0c1\uc774\uac70\ub098 Parch\uac00 3 \uc774\uc0c1\uc774\uba74 \uc0ac\ub9dd\ud588\uc744 \ud655\ub960\uc774 \ud06c\ub2e4.\n* Family\ub85c \ubcd1\ud569\ud560\uc9c0 \uadf8\ub300\ub85c \ub46c\uc57c \ud560 \uc9c0 \ubaa8\ub974\uaca0\ub2e4.","88024134":"### Age Feature [\ucc38\uace0](https:\/\/www.kangtaeho.com\/91)\n\n* `title`\uc744 \ucc38\uace0\ud558\uc5ec \ube60\uc9c4 \ub098\uc787\ub300\uc5d0 \uc801\ud569\ud55c \ub098\uc774\ub97c \ucd94\uac00\ud55c\ub2e4.\n* Binning: \uc5ec\ub7ec \uc885\ub958\uc758 \ub370\uc774\ud130\uc5d0 \ub300\ud574 \ubc94\uc704\ub97c \uc9c0\uc815\ud558\uac70\ub098 \uce74\ud14c\uace0\ub9ac\ub97c \ud1b5\ud574 \uc774\uc804\ubcf4\ub2e4 \uc791\uc740 \uc218\uc758 \uadf8\ub8f9\uc73c\ub85c \ub9cc\ub4dc\ub294 \uae30\ubc95","b3f3ccde":"### Submission\n\nPassengerID\uc640 Survived \uacb0\uacfc\ub97c \ubaa8\uc544 `.csv`\ud30c\uc77c\ub85c \ub9cc\ub4e4\uace0 \uc774\ub97c Kaggle\uc5d0 \uc5c5\ub85c\ub4dc\ud55c\ub2e4.","fe1cfb48":"\ub300\ubd80\ubd84 S \ud56d\uad6c\uc5d0\uc11c \ud0d1\uc2b9\ud588\uc73c\ubbc0\ub85c \uacb0\uce21\uac12\ub3c4 S\uc77c \ud655\ub960\uc774 \ud06c\ub2e4. \uacb0\uce21\uce58\ub97c S\ub85c \ucc44\uc6b0\uace0 String Data\ub85c \ubcc0\ud615\ud55c\ub2e4.\n* `.fillna(value=\"S\")`","c5ec1bf0":"\ubaa8\ub378 \ud559\uc2b5\uacfc \ud3c9\uac00\ub97c \uc704\ud55c pipeline\uc744 \ub9cc\ub4e0\ub2e4.\n\n### `sklearn.pipeline` [\ucc38\uace0](https:\/\/rk1993.tistory.com\/entry\/Python-sklearnpipeline-\ud30c\uc774\ud504\ub77c\uc778Pipeline\uc774\ub780)\n* > \ub300\ubd80\ubd84\uc758 \uae30\uacc4\ud559\uc2b5 \ub370\uc774\ud130\ub294 \ucd5c\uc885 \ubaa8\ub378\uc744 \ub9cc\ub4dc\ub294\ub370 \uc788\uc5b4\uc11c \uc774\uc0c1\uc801\uc778 \ud615\uc2dd\uc774 \uc544\ub2c8\ub2e4.\n* > \ud30c\uc774\ud504\ub77c\uc778\uc744 \uc0ac\uc6a9\ud558\uba74 \ub370\uc774\ud130 \uc0ac\uc804 \ucc98\ub9ac \ubc0f \ubd84\ub958\uc758 \ubaa8\ub4e0 \ub2e8\uacc4\ub97c \ud3ec\ud568\ud558\ub294 \ub2e8\uc77c \uac1c\uccb4\ub97c \ub9cc\ub4e4 \uc218 \uc788\ub2e4.\n* > * train\uacfc test \ub370\uc774\ud130 \uc190\uc2e4\uc744 \ud53c\ud560 \uc218 \uc788\ub2e4.\n  > * \uad50\ucc28 \uac80\uc99d \ubc0f \uae30\ud0c0 \ubaa8\ub378 \uc120\ud0dd \uc720\ud615\uc744 \uc27d\uac8c \ub9cc\ub4e0\ub2e4.\n  > * \uc7ac\ud604\uc131 \uc99d\uac00\n  \n  \n\uc640! \ubaa8\ub974\uaca0\ub2e4!","847d04c5":"\uc704 \uadf8\ub798\ud504\uc5d0\uc11c \uc54c \uc218 \uc788\ub294\uac83\uc740 \ub2e4\uc74c\uacfc \uac19\ub2e4 (Pclass)\n\n1. 3\ub4f1\uc11d \ud0d1\uc2b9\uac1d\uc774 \uc808\ubc18 \uc774\uc0c1\uc774\uba70 1\ub4f1\uc11d\uacfc 2\ub4f1\uc11d \ud0d1\uc2b9\uac1d\uc758 \uc218\ub294 \ube44\ub4f1\ube44\ub4f1\ud558\ub2e4.\n    * 3: 55.1%\n    * 2: 20.7%\n    * 1: 24.2%\n2. \uc0dd\uc874 \ube44\uc728\uc740 1\ub4f1\uae09 > 2\ub4f1\uae09 > 3\ub4f1\uae09 \uc21c\uc11c\ub2e4.\n    * 1: 63.0%\n    * 2: 47.3%\n    * 3: 24.2%\n3. `Pclass` \uc218\uac00 \uc791\uc744 \uc218\ub85d \uc0dd\uc874\ud560 \ud655\ub960\uc774 \ud06c\ub2e4.","c1eaaab0":"### Sex Feature\n\n* \uc774\ubbf8 `male`\uacfc `female`\ub85c \ub098\ub258\uc5b4 \uc788\uc73c\ubbc0\ub85c **String Data** \ub85c \ubcc0\ud615\n* `dataset['column name'] = dataset['column name'].astype(str)`","19c51329":"# Model, Predict, Learn\n\n\uc0ac\uc6a9\ud560 \ubaa8\ub378\uc740 \ub2e4\uc74c\uc758 \ub2e4\uc12f\uac00\uc9c0\ub2e4.\n1. Logistic Regression \ub85c\uc9c0\uc2a4\ud2f1 \ud68c\uadc0\n2. SVM (Support Vector Machine)\n3. kNN (k-Nearest Neighbor)\n4. Random Forest\n5. Naive Bayes","dbbc2f13":"one-hot encoding\uacfc train data\uc640 label\uc744 \ubd84\ub9ac\ud558\uae30\ub9cc \ud558\uba74 \ud559\uc2b5\uc2dc\ud0ac \uc900\ube44\uac00 \ub05d\ub09c\ub2e4\uace0 \ud558\ub294\ub370 \ubb34\uc2a8 \ub9d0\uc778\uc9c0 \ubaa8\ub974\uaca0\ub2e4. \uc77c\ub2e8 \ub118\uc5b4\uac00\uace0 \ub3cc\uc544\uc624\uaca0\ub2e4.","7ff7b947":"\uc704 \ucc28\ud2b8\uc5d0\uc11c \uc54c \uc218 \uc788\ub294 \uac83\uc740 \ub2e4\uc74c\uacfc \uac19\ub2e4. (Parch)\n\n1. 3\uba85 \uc774\uc0c1\uc758 \uac00\uc871\uacfc \ud568\uaed8 \ud0d1\uc2b9\ud55c \uacbd\uc6b0\ub294 \uc801\ub2e4.\n2. 3\uba85 \uc774\uc0c1\uc758 \uac00\uc871\uacfc \ud0d1\uc2b9\ud55c \uc0ac\ub78c\uc740 \uc0dd\uc874\ud558\uc9c0 \ubabb\ud587\ub2e4.\n3. \uc815\ub9ac\n    1. 3\uba85 \uc774\uc0c1\uc758 \uac00\uc871\uacfc \ud0d1\uc2b9\ud55c \uc2b9\uac1d\uc740 \uc0ac\ub9dd\ud588\ub2e4.","516adccc":"# Data preprocessing\n\n* \ubaa8\ub378\uc5d0 \ud559\uc2b5\uc2dc\ud0ac \ud2b9\uc131\uc744 \uace0\ub974\uae30 \uc704\ud55c \uacfc\uc815\n* \ud559\uc2b5\uc2dc\ud0a4\uae30 \uc6a9\uc774\ud558\uac8c \ub370\uc774\ud130\ub97c \ubcc0\ud615\ud558\ub294 \uacfc\uc815\n* **train\uacfc test\ub97c \ud569\uce5c \ud6c4 \uc804\ucc98\ub9ac\ud574\uc57c\ud55c\ub2e4.**","54f546e5":"1. `Age`\ub294 \uacb0\uce21\uce58\uac00 \uc57d $19\\%$ \uc874\uc7ac\ud55c\ub2e4.\n2. `Cabin` \uacb0\uce21\uce58\ub294 \uc57d $77\\%$ \uc874\uc7ac\ud55c\ub2e4.\n3. \uc815\ub9ac\n    - `Age` \uacb0\uce21\uce58\ub294 \ucc44\uc6b8 \uc218 \uc788\uc73c\uba74 \uc784\uc758\ub85c \ucc44\uc6b8 \uac83\n    - `Cabin` \uac12\uc740 \uacb0\uce21\uce58\uac00 \uc808\ubc18 \uc774\uc0c1\uc774\ubbc0\ub85c \ud655\uc2e4\ud55c \uacbd\ud5a5\uc774 \uc5c6\ub294 \ud55c \uc0ad\uc81c\ud560 \uac83","16926c63":"### Categorical feature \ubd84\ud3ec\ub97c \ud655\uc778\ud558\uae30 \uc704\ud574 Pie chart\ub97c \uc0dd\uc131\ud55c\ub2e4.","99d4a98a":"### Drop\n\n* \uc804\ucc98\ub9ac\ub97c \uc5b4\ub290\uc815\ub3c4 \ub05d\ub0c8\uc73c\ub2c8 \uc81c\uc678\ud560 Feature\ub97c Drop\ud55c\ub2e4.","3adbce14":"1. `train.info()` \uba85\ub839\uc5b4\ub85c `Non-Null Count`\uc640 `Data type`\uc744 \ud655\uc778 \ud560 \uc218 \uc788\ub2e4.\n2. `data.shape()` \uba85\ub839\uc5b4\ub85c \ub370\uc774\ud130\uc14b\uc758 \ud589\uacfc \uc5f4\uc758 \uac1c\uc218\ub97c \ud30c\uc545\ud588\uc73c\ub2c8 `\uc5f4\uc758 \uac1c\uc218 - Non-Null Count`\ub85c **Null** \ub370\uc774\ud130\uc758 \uac1c\uc218\ub97c \uc54c \uc218 \uc788\ub2e4.","76a203e3":"\uc704 \uacb0\uacfc\ub85c \uc54c \uc218 \uc788\ub294 \uac83\uc740 \ub2e4\uc74c\uacfc \uac19\ub2e4. (Cabin - Pclass) (3\ucc28)\n\n1. A, B, C Cabin\uc740 1\ub4f1\uc11d\uc774 \uac00\uc7a5 \ub9ce\ub2e4.\n2. F Cabin\uc740 2\ub4f1\uc11d\uc774 \uac00\uc7a5 \ub9ce\ub2e4.\n3. G Cabin\uc740 3\ub4f1\uc11d\uc774 \uac00\uc7a5 \ub9ce\ub2e4.\n4. \ubb38\uc81c\n    * E Cabin\uc740 1\ub4f1\uc11d 25\uba85, 2\ub4f1\uc11d 4\uba85, 3\ub4f1\uc11d 4\uba85\uc73c\ub85c \ube44 1\ub4f1\uc11d \ud0d1\uc2b9\uac1d\uc758 \uc218\ub97c \ubb34\uc2dc \ud560 \uc218 \uc5c6\ub294\ub370 \uc5b4\ub5bb\uac8c \ud558\ub098?\n    * (3\ucc28) \uc77c\ub2e8 1\ub4f1\uc11d\uc73c\ub85c \uce58\ud658","def75ea8":"# Data visualization\n* \ub370\uc774\ud130 \uc2dc\uac01\ud654\ub97c \uc704\ud574 \ub2e4\uc74c \ub77c\uc774\ube0c\ub7ec\ub9ac\ub97c \ud638\ucd9c\ud55c\ub2e4.\n    1. matplotlib.pyplot\n    2. seaborn","1ff8d470":"## Data Dictionary, Variables Notes\n\n**Data Dictionary**\n* 1) Variable\t2) Definition\t3) Key\n* 1) survival\t2) Survival\t3) 0 = No, 1 = Yes\n* 1) pclass\t2) Ticket class\t3) 1 = 1st, 2 = 2nd, 3 = 3rd\n* 1) sex\t2) Sex\n* 1) Age\t2) Age in years\t\n* 1) sibsp\t2) # of siblings \/ spouses aboard the Titanic\t\n* 1) parch\t2) # of parents \/ children aboard the Titanic\t\n* 1) ticket\t2) Ticket number\t\n* 1) fare\t2) Passenger fare\t\n* 1) cabin\t2) Cabin number\t\n* 1) embarked\t2) Port of Embarkation\t3) C = Cherbourg, Q = Queenstown, S = Southampton\n\n**Variable Notes**\n* **pclass**: A proxy for socio-economic status (SES)\n    * 1st = Upper\n    * 2nd = Middle\n    * 3rd = Lower\n\n* **age**: Age is fractional if less than 1. If the age is estimated, is it in the form of xx.5\n\n* **sibsp**: The dataset defines family relations in this way...\n    * **si**bling and **sp**ouse\n    * Sibling = brother, sister, stepbrother, stepsister\n    * Spouse = husband, wife (mistresses and fianc\u00e9s were ignored)\n\n* **parch**: The dataset defines family relations in this way...\n    * **par**ent and **ch**ildren\n    * Parent = mother, father\n    * Child = daughter, son, stepdaughter, stepson\n    * Some children travelled only with a nanny, therefore parch=0 for them.","019e9d77":"\uac00\uc7a5 \uc815\ud655\ub3c4\uac00 \ub192\uc740 \ubaa8\ub378\uc740 Random Forest\ub2e4. Random Forest\ub97c \ucc44\ud0dd\ud574\uc11c Submission\ud558\uaca0\ub2e4.\n* 1\ucc28 \uc2dc\ub3c4\n    1. Accuracy :  79.46 %\n    2. Accuracy :  83.5 %\n    3. Accuracy :  83.84 %\n    4. Accuracy :  85.63 %\n    5. Accuracy :  79.57 %\n* 2\ucc28 \uc2dc\ub3c4: Title, Age\n    4. Accuracy :  87.43 %\n* 2-1\ucc28 \uc2dc\ub3c4\n    4. Accuracy :  87.88 %\n* 2-2\ucc28 \uc2dc\ub3c4: \uc804\ubc18\uc801\uc73c\ub85c \uc815\ud655\ub3c4 \uc0c1\uc2b9\n    1. Accuracy :  82.94 %\n    2. Accuracy :  83.5 %\n    3. Accuracy :  84.06 %\n    4. Accuracy :  86.08 %\n    5. Accuracy :  82.49 %\n* 2-3\ucc28 \uc2dc\ub3c4:\n    1. Accuracy :  79.57 %\n    2. Accuracy :  79.91 %\n    3. Accuracy :  83.61 %\n    4. Accuracy :  87.43 %\n    5. Accuracy :  80.92 %\n* 3\ucc28 \uc2dc\ub3c4: Cabin, Fare \uc624\ubc84\ud53c\ud305\ub41c\uac70\uac19\uc740\ub370...\n    1. Accuracy :  80.36 %\n    2. Accuracy :  68.57 %\n    3. Accuracy :  80.7 %\n    4. Accuracy :  95.85 %\n    5. Accuracy :  79.57 %","7699af5e":"> [\ucc38\uace0](https:\/\/cyc1am3n.github.io\/2018\/10\/09\/my-first-kaggle-competition_titanic.html)","0c1f8401":"# Import data","d5ae54aa":"1. \ub370\uc774\ud130\uc5d0 \uc774\ub984\uc774 `Title` \uc778 \uc5f4\uc744 \ucd94\uac00\ud55c\ub2e4.","2c7cff08":"\uc704 \ucc28\ud2b8\uc5d0\uc11c \uc54c \uc218 \uc788\ub294 \uac83\uc740 \ub2e4\uc74c\uacfc \uac19\ub2e4. (SibSp)\n\n1. \uc0dd\uc874\uc790\ub098 \uc0ac\ub9dd\uc790 \ubaa8\ub450 \ud615\uc81c\/\ubc30\uc6b0\uc790\uc640 \ud0d1\uc2b9\ud558\uc9c0 \uc54a\uc740 \uc0ac\ub78c\uc774 \ub9ce\ub2e4. (0~1)\n2. \ud615\uc81c\/\ubc30\uc6b0\uc790 \ub3d9\uc2b9\uac1d\uc774 \ub9ce\uc744\uc218\ub85d \uc0ac\ub9dd\ud560 \ud655\ub960\uc774 \ub192\ub2e4. (4~8)\n3. \uc815\ub9ac\n    1. `SibSp` \uac12\uc774 \ud074\uc218\ub85d \uc0ac\ub9dd\ud560 \ud655\ub960\uc774 \ud06c\ub2e4? (\uc774 \uacb0\ub860\ubcf4\ub2e4\ub294 \uacb0\ub860 2\uac00 \ub098\uc744\ub4ef)\n    2. **`SibSp` \uac12\uc774 4 \uc774\uc0c1\uc774\uba74 \uc0ac\ub9dd\ud588\ub2e4?**\n        * \uadf8\ub798\ud504\uc5d0\uc11c\ub294 \uc798 \uc548\ubcf4\uc774\ub294\ub370 \uc0dd\uc874\uc790\uc911\uc5d0 `SibSp`\uac12\uc774 4 \uc774\uc0c1\uc778 \uc0ac\ub78c\uc740 \uc5c6\ub294\ub4ef?","719a103a":"### Embarked Feature","db88f647":"### Cabin Feature (3\ucc28)\n\n* Pclass\uc640 \uc5f0\uad00\uc9c0\uc5b4 Cabin\uc744 \ucd94\uce21\ud574\ubcf8\ub2e4.\n* \uc54c\ud30c\ubcb3\ub9cc \ucd94\ucd9c\n","8398046f":"### Name Feature\n\n* \uc2b9\uac1d\uc758 title\uc744 \ucd94\ucd9c\ud558\uace0 \uc870\uc791\ud558\uae30 \uc27d\uac8c \uc218\ub85c \ubcc0\ud658\ud55c\ub2e4\n* title\uc740 \uc788\ub294\ub370 age\ub294 \uacb0\uce21\uc77c \uacbd\uc6b0 title\uc744 \ucc38\uace0\ud574 \uacb0\uce21\uce58\ub97c \ucc44\uc6cc\ub123\uc744 \uac83"}}