{"cell_type":{"1f17d889":"code","bde2362b":"code","e6c8dbc8":"code","d14a1e8c":"code","ac7a4fc7":"code","d972fb7b":"code","0e07d0bf":"code","e80429a0":"code","285644d5":"code","bd045529":"code","8a88570f":"code","6a6b44aa":"code","32d9337c":"code","2869e569":"code","90e6d7b3":"code","5c9a37ad":"markdown","1065c113":"markdown","e682eda6":"markdown","5cdef80b":"markdown","803e8aa0":"markdown","d3288061":"markdown","3b98b985":"markdown","814a1f3c":"markdown","9007d556":"markdown","be0269fd":"markdown"},"source":{"1f17d889":"import numpy as np\nimport pandas as pd\n\nfrom sklearn.preprocessing import LabelEncoder\nfrom sklearn.pipeline import FeatureUnion\nfrom sklearn.feature_extraction.text import CountVectorizer, TfidfVectorizer\nfrom keras.callbacks import Callback\nimport tensorflow_hub as hub\nimport tensorflow as tf\nimport re\n\nfrom keras import backend as K\nimport keras.layers as layers\nfrom keras.preprocessing.text import Tokenizer\nfrom keras.preprocessing.sequence import pad_sequences\nfrom keras.layers import Input, Dropout, Dense, concatenate, Embedding, Flatten, Activation, SpatialDropout1D\nfrom keras.layers import Bidirectional, GRU, GlobalAveragePooling1D, GlobalMaxPooling1D\nfrom keras.optimizers import Adam\nfrom keras.models import Model\nfrom keras.utils import np_utils\nfrom keras.engine import Layer\n\nfrom keras.preprocessing import sequence\nfrom keras.models import Sequential\nfrom keras.models import load_model\nfrom keras.layers import LSTM, CuDNNGRU, CuDNNLSTM, Add, Reshape\nfrom keras.layers import MaxPooling1D, Conv1D, MaxPooling1D, Conv2D, MaxPooling2D\nfrom keras.callbacks import EarlyStopping, ModelCheckpoint, ReduceLROnPlateau\nfrom nltk.tokenize import sent_tokenize, word_tokenize\n\nimport warnings\nwarnings.filterwarnings('ignore')\nimport os\nos.environ['OMP_NUM_THREADS'] = '4'\n\nimport re\nimport math\n# set seed\nnp.random.seed(123)","bde2362b":"train = pd.read_csv('..\/input\/stanford-natural-language-inference-corpus\/snli_1.0_train.csv')\ntest = pd.read_csv('..\/input\/stanford-natural-language-inference-corpus\/snli_1.0_test.csv')\nvalid = pd.read_csv('..\/input\/stanford-natural-language-inference-corpus\/snli_1.0_dev.csv')","e6c8dbc8":"print(\"Training on\", train.shape[0], \"examples\")\nprint(\"Validating on\", test.shape[0], \"examples\")\nprint(\"Testing on\", valid.shape[0], \"examples\")\ntrain[:10]","d14a1e8c":"train.isnull().sum()","ac7a4fc7":"train.nunique()","d972fb7b":"train = train.dropna(subset = ['sentence2'])\ntrain = train[train[\"gold_label\"] != \"-\"]\ntest = test[test[\"gold_label\"] != \"-\"]\nvalid = valid[valid[\"gold_label\"] != \"-\"]","0e07d0bf":"%%time\n\ndef get_rnn_data(df):\n    x = {\n        'sentence1': df[\"sentence1\"],\n        #\n        'sentence2': df[\"sentence2\"],\n        }\n    return x\n\nle = LabelEncoder()\n\nX_train = get_rnn_data(train)\nY_train = np_utils.to_categorical(le.fit_transform(train[\"gold_label\"].values)).astype(\"int64\")\n\nX_valid = get_rnn_data(valid)\nY_valid = np_utils.to_categorical(le.fit_transform(valid[\"gold_label\"].values)).astype(\"int64\")\n\nX_test = get_rnn_data(test)\nY_test = np_utils.to_categorical(le.fit_transform(test[\"gold_label\"].values)).astype(\"int64\")","e80429a0":"class ElmoEmbeddingLayer(Layer):\n    def __init__(self, **kwargs):\n        self.dimensions = 1024\n        self.trainable=True\n        super(ElmoEmbeddingLayer, self).__init__(**kwargs)\n\n    def build(self, input_shape):\n        self.elmo = hub.Module('https:\/\/tfhub.dev\/google\/elmo\/2', trainable=self.trainable,\n                               name=\"{}_module\".format(self.name))\n\n        self.trainable_weights += K.tf.trainable_variables(scope=\"^{}_module\/.*\".format(self.name))\n        super(ElmoEmbeddingLayer, self).build(input_shape)\n\n    def call(self, x, mask=None):\n        result = self.elmo(K.squeeze(K.cast(x, tf.string), axis=1),\n                      as_dict=True,\n                      signature='default',\n                      )['default']\n        return result\n\n    def compute_mask(self, inputs, mask=None):\n        return K.not_equal(inputs, '--PAD--')\n\n    def compute_output_shape(self, input_shape):\n        return (input_shape[0], self.dimensions)\n    \n#     def get_config(self):\n#         config = {'output_dim': self.output_dim}\n    \nclass NonMasking(Layer):   \n    def __init__(self, **kwargs):   \n        self.supports_masking = True  \n        super(NonMasking, self).__init__(**kwargs)   \n  \n    def build(self, input_shape):   \n        input_shape = input_shape   \n  \n    def compute_mask(self, input, input_mask=None):   \n        # do not pass the mask to the next layers   \n        return None   \n  \n    def call(self, x, mask=None):   \n        return x   \n  \n    def get_output_shape_for(self, input_shape):   \n        return input_shape\n    \n#     def get_config(self):\n#         config = {'output_dim': self.output_dim}\n        \ncustom_ob={'ElmoEmbeddingLayer': ElmoEmbeddingLayer, 'NonMasking': NonMasking}","285644d5":"def get_model():\n    inp1 = Input(shape=(1,), dtype=\"string\", name=\"sentence1\")\n    inp2 = Input(shape=(1,), dtype=\"string\", name=\"sentence2\")\n    \n    def rnn_layer(inp, col):\n        x = ElmoEmbeddingLayer()(inp)\n        x = NonMasking()(x)\n        x = Reshape((1, 1024), input_shape=(1024,))(x)\n        x = Conv1D(128, kernel_size = 2, padding = \"same\", kernel_initializer = \"glorot_uniform\", name=col+\"_1\")(x)\n        x = MaxPooling1D(pool_size=2, padding='same')(x)\n        x = Conv1D(64, kernel_size = 2, padding = \"same\", kernel_initializer = \"glorot_uniform\", name=col+\"_2\")(x)\n        x = MaxPooling1D(pool_size=2, padding='same')(x)\n        x = Conv1D(64, kernel_size = 2, padding = \"same\", kernel_initializer = \"glorot_uniform\", name=col+\"_3\")(x)\n        x = MaxPooling1D(pool_size=2, padding='same')(x)\n        x = Conv1D(32, kernel_size = 2, padding = \"same\", kernel_initializer = \"glorot_uniform\", name=col+\"_4\")(x)\n        x = MaxPooling1D(pool_size=2, padding='same')(x)\n        x = Conv1D(32, kernel_size = 2, padding = \"same\", kernel_initializer = \"glorot_uniform\", name=col+\"_5\")(x)\n        x = MaxPooling1D(pool_size=2, padding='same')(x)\n        x = Conv1D(16, kernel_size = 2, padding = \"same\", kernel_initializer = \"glorot_uniform\", name=col+\"_6\")(x)\n        x = MaxPooling1D(pool_size=2, padding='same')(x)\n        x = Conv1D(16, kernel_size = 2, padding = \"same\", kernel_initializer = \"glorot_uniform\", name=col+\"_7\")(x)\n        x = MaxPooling1D(pool_size=2, padding='same')(x)\n        x = Conv1D(8, kernel_size = 2, padding = \"same\", kernel_initializer = \"glorot_uniform\", name=col+\"_8\")(x)\n        x = MaxPooling1D(pool_size=2, padding='same')(x)\n        return x\n\n    x = concatenate([\n                    rnn_layer(inp1,\"sen_1\"),\n                    rnn_layer(inp2,\"sen_2\"),\n                     ])\n    x = Flatten()(x)\n    x = Dense(8, kernel_initializer='normal', activation='relu', name=\"final_den_1\") (x)\n    outp = Dense(3, activation=\"sigmoid\", name=\"final_output\")(x)\n    \n    model = Model(inputs=[inp1,inp2], outputs=outp)\n    model.compile(loss='categorical_crossentropy',\n                  optimizer=Adam(lr=0.001),\n                  metrics=['accuracy'],\n                 )\n\n    return model\n\nmodel = get_model()\n\nmodel.summary()","bd045529":"learning_rate_reduction = ReduceLROnPlateau(monitor='val_acc', \n                                            patience=1, \n                                            verbose=1, \n                                            factor=0.5,\n                                            min_lr=0.00001)\nfile_path=\"checkpoint_SNLI_weights.hdf5\"\ncheckpoint = ModelCheckpoint(file_path, monitor='val_acc', verbose=1, save_best_only=True, mode='max', save_weights_only=True)\n\nearly = EarlyStopping(monitor=\"val_acc\", mode=\"max\", patience=1)\n\nmodel_callbacks = [checkpoint, early, learning_rate_reduction]","8a88570f":"# model = load_model(\"..\/input\/snli-model-and-weights\/SNLI_model.h5\", custom_objects=custom_ob)\n# model.load_weights('..\/input\/snli-model-and-weights\/SNLI_weights.hdf5')","6a6b44aa":"%%time\n\nmodel.fit(X_train, Y_train,\n          batch_size=128,\n          epochs=4,\n          verbose=2,\n          validation_data=(X_valid, Y_valid),\n          callbacks = model_callbacks)","32d9337c":"model.save_weights(\"SNLI_weights.hdf5\")\nmodel.save(\"SNLI_model.h5\")","2869e569":"%%time\ntest_pred = model.predict(X_test, batch_size=128)","90e6d7b3":"test_acc = (np.argmax(test_pred, axis=1) == np.argmax(Y_test, axis=1)).sum()\/Y_test.shape[0] * 100\n\nprint(\"Accuracy on test set is: %\"+str(test_acc))","5c9a37ad":"# Read in data","1065c113":"# Preprocessing the data\n\nThere are a few NA values to drop in sentence2 and the gold_label has a few \"-\". The \"-\" values are when the 5 votes from the turk participants came out tied, usually caused by very confusingly worded rows, so it is best to remove these as well.","e682eda6":"# Prediction","5cdef80b":"# Train the Model","803e8aa0":"# Stanford Natural Language Inference\n\nThis is a straight forward attempt at the SNLI dataset. NLI is particularly and even Kaggle's free GPU with it's recently expanded 9 hour time limit is insufficient to optimize a model for it. This model uses Elmo embeddings followed by a series of 1D convolutions and pooling to achieve ~67% test accuracy. Using more complicated model structures and expanded time limits, the results can be much better than this but this serves as a good baseline and easier to follow model. Many papers have been written on the SNLI dataset and I find to be a very fulfilling to study after becoming acquainted with this dataset. Enjoy.\n\n# The Corpus\n\n*The SNLI corpus (version 1.0) is a collection of 570k human-written English sentence pairs manually labeled for balanced classification with the labels entailment, contradiction, and neutral, supporting the task of natural language inference (NLI), also known as recognizing textual entailment (RTE). We aim for it to serve both as a benchmark for evaluating representational systems for text, especially including those induced by representation learning methods, as well as a resource for developing NLP models of any kind.\n\nRead the rest here: https:\/\/nlp.stanford.edu\/projects\/snli\/ \n\nIn short, the dataset provides one line of text and one hypothesis for the text. The goal of the model is to decide if the hypothesis contradicts, entails or is neutral to the text. So the example text \"*A man inspects the uniform of a figure in some East Asian country.*\" with a hypothesis of \"*The man is sleeping*\" is a contradiction because the man cannot inspect if he is asleep.\n","d3288061":"# Imports","3b98b985":"# Callbacks ","814a1f3c":"# Make the NLI model\n\n## Custom Layers","9007d556":"If you enjoyed this notebook, please like, comment, and check out some of my other notebooks on Kaggle: \n\nMaking AI Dance Videos: https:\/\/www.kaggle.com\/valkling\/how-to-teach-an-ai-to-dance\n\nImage Colorization: https:\/\/www.kaggle.com\/valkling\/image-colorization-using-autoencoders-and-resnet\/notebook\n\nStar Wars Steganography: https:\/\/www.kaggle.com\/valkling\/steganography-hiding-star-wars-scripts-in-images","be0269fd":"# Build the Model\n\nThis model first processes each sentence separately using Elmo embeddings and sending it through a series of 1D convolutions and Maxpooling layers before concatenating the results together."}}