{"cell_type":{"45ab7973":"code","5eb4ea28":"code","903c270a":"code","2d9d6806":"code","ace303dd":"code","2e193c0c":"code","a88a9b4e":"code","79ce2e22":"code","f7ba0b99":"code","297cba96":"code","891231c1":"code","dc00e4a3":"code","389885e8":"code","1a8ef827":"code","6489d234":"code","79393604":"code","0161a4d0":"code","99342583":"code","e22fa240":"code","f0fe62f7":"code","23b4040a":"code","d481b875":"code","2e05daad":"code","d5d48afc":"code","8cd90ae9":"code","fe0655a6":"code","2c634afc":"code","d3bb2cb0":"code","9c6bcef6":"code","d5d35671":"code","6412902c":"markdown","8f5243e0":"markdown","b8944b32":"markdown","265087ee":"markdown","1931b8a1":"markdown","74904546":"markdown","cdf8391c":"markdown","c0691e14":"markdown","b9d9f759":"markdown","6850c743":"markdown","212d09d9":"markdown"},"source":{"45ab7973":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport seaborn as sns\n\nfrom sklearn.ensemble import RandomForestRegressor # RandomForest\nfrom sklearn.tree import DecisionTreeClassifier\n\nfrom sklearn.metrics import mean_absolute_error\nfrom sklearn.metrics import mean_absolute_error\nfrom sklearn.metrics import mean_squared_error\nfrom sklearn.model_selection import train_test_split\n\nfrom sklearn.metrics import accuracy_score\n\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory\n\nimport os\nprint(os.listdir(\"..\/input\"))\n\n# Any results you write to the current directory are saved as output.7","5eb4ea28":"# Path of the file to read. We changed the directory structure to simplify submitting to a competition\niowa_train_file_path = '..\/input\/train.csv'\niowa_test_file_path = '..\/input\/test.csv'\n\ntest_dt = pd.read_csv(iowa_test_file_path)\ntrain_dt = pd.read_csv(iowa_train_file_path)\n","903c270a":"train_dt.head()","2d9d6806":"print('Number of train data is: {}' .format(train_dt.shape[0]))","ace303dd":"test_dt.head()","2e193c0c":"print('Number of test data: {}' .format(test_dt.shape[0]))","a88a9b4e":"sns.countplot(x='Survived', data=train_dt);","79ce2e22":"sns.countplot(x='Sex', data=train_dt)","f7ba0b99":"sns.catplot(x='Survived', col='Sex', kind='count', data=train_dt)","297cba96":"sns.catplot(x='Survived',col='Pclass', kind='count', data=train_dt)","891231c1":"sns.catplot(x='Survived',col='Embarked', kind='count', data=train_dt)","dc00e4a3":"# Scaling Feature Sex.\n\nm = {'male':1, 'female':0}\ntrain_dt['Sex'] = train_dt['Sex'].map(m)\n#train_dt['Sex'] = train_dt['Sex'].str[0].str.lower().map(m)\ntest_dt['Sex'] = test_dt['Sex'].map(m);","389885e8":"#Scaling Feature Embarked \n\ne = {'C': 1, 'Q': 2, 'S': 3}\ntrain_dt['Embarked'] = train_dt['Embarked'].map(e)\ntest_dt['Embarked'] = test_dt['Embarked'].map(e)","1a8ef827":"#Removing Unnecessery Columns from training data\ntrain_dt = train_dt.drop(['Cabin','Name', 'Ticket', 'Fare', 'Parch' ], axis=1)\n#train_dt = train_dt.drop('Name', axis=1)\n#train_dt = train_dt.drop('Ticket', axis=1)","6489d234":"#Check training columns\ntrain_dt.head(4)","79393604":"#Removing Unnecessery Columns from test data\ntest_dt = test_dt.drop(['Cabin','Name', 'Ticket', 'Fare', 'Parch' ], axis=1)","0161a4d0":"# Check test Columns\ntest_dt.head(4)","99342583":"# Calculate number of Null Values\ntrain_dt.isnull().sum()","e22fa240":"#Remove Age and Embarked null values\nage_missing = train_dt[train_dt.Age.isnull()].index\ntrain_dt.drop(age_missing, inplace=True)\n\nembarkedMissing = train_dt[train_dt.Embarked.isnull()].index\ntrain_dt.drop(embarkedMissing,inplace=True)\n","f0fe62f7":"# Recalculate null values\ntrain_dt.isnull().sum()","23b4040a":"def binarise(preds):\n    bin_preds = []\n    for p in preds:\n        bin_preds.append(step(p))\n    return bin_preds \n\ndef step(x, threshold=0.6):\n    if x >= threshold:\n        return 1\n    else: \n        return 0 ","d481b875":"#Split Train and test data\ny = train_dt.Survived\n#'PassengerId',\nfeatures = [ 'Pclass', 'Sex', 'Embarked'] # Sex and Embarked are omited for now\nprint('data Heads: ', train_dt.columns)\n\n\nx = train_dt[features] \n\nprint(features)\n# Split into validation and training data\ntrain_X, test_X, train_Y, test_Y = train_test_split(x, y, random_state=1)\n","2e05daad":"train_X.sample(5)","d5d48afc":"# Create Model and Predict\ndt_model = DecisionTreeClassifier(random_state=1)\ndt_model.fit(train_X, train_Y)\npred_dt = dt_model.predict(test_X)","8cd90ae9":"test_Y.sample(5)","fe0655a6":"print('Checking accuracy for Decision tree classifier')\nprint('Mean Absolute error: ' ,mean_absolute_error(test_Y, pred_dt))\nprint('Mean Squared error: ' ,mean_squared_error(test_Y, pred_dt))\nprint('Root Mean Squared error: ' ,np.sqrt(mean_squared_error(test_Y,pred_dt)))\nprint('')\nprint('Decision Tree Accuracy: {} ' .format(accuracy_score(test_Y,pred_dt)) )","2c634afc":"# Create model and predict\nrf_model = RandomForestRegressor(n_estimators=20, random_state=0)\n\nrf_model.fit(train_X, train_Y)\npred_rf = rf_model.predict(test_X)","d3bb2cb0":"# Check Accuracy for Random Forest\n\nprint('Checking accuracy for Random Forest classifier')\nprint('Mean Absolute error: ' ,mean_absolute_error(test_Y, pred_rf))\nprint('Mean Squared error: ' ,mean_squared_error(test_Y, pred_rf))\nprint('Root Mean Squared error: ' ,np.sqrt(mean_squared_error(test_Y,pred_rf)))\nprint('')\nprint('Random Forest Accuracy: {} ' .format(accuracy_score(test_Y , binarise(pred_rf)) ))","9c6bcef6":"#Create test data \nids = test_dt.PassengerId\ntest = test_dt[features]\n\n#Predict with test data\npreds = rf_model.predict(test.values)\npreds = binarise(preds)","d5d35671":"# Write to output file\nd = {\"PassengerId\" : ids.values, \"Survived\" : preds}\nsurvivors = pd.DataFrame(data=d) \nsurvivors.to_csv(\"predictions.csv\", index=False)","6412902c":"**Check Accuracy**","8f5243e0":"**Lets Check Accuracy with Random Forest**","b8944b32":"**Feature Scaling**","265087ee":"**Import Data**","1931b8a1":"> **File Output**","74904546":"**Remove Null Values**","cdf8391c":"**Model Creation**","c0691e14":"**Creating Extra functions**","b9d9f759":"**Imports**","6850c743":"**\nwe will put random forest's result in output file.**","212d09d9":"**Data Visualization**"}}