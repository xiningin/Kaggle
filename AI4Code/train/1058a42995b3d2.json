{"cell_type":{"2672a116":"code","ac31b1f1":"code","e6683c09":"code","4d8f38c3":"code","6f05bf6c":"code","d63f33ec":"code","77ca5f03":"code","d865eb07":"code","c33d936f":"code","80cc9c4c":"code","0898eb6d":"code","4dbfce94":"code","8f8ca291":"code","03d739e4":"code","e507dea6":"code","ef4f93df":"code","ca40a18e":"code","a19c74f9":"code","a7f17795":"code","5b7618d2":"code","37928f6b":"code","64b59ac6":"code","d78ef5fc":"code","37232145":"code","b16272e9":"code","8cd232d6":"code","19b3011f":"code","cc9b126a":"code","f84eae87":"markdown","b20b6e3b":"markdown","20d1c3ee":"markdown","37175469":"markdown","0dbebd02":"markdown","1c737dab":"markdown","01efcd62":"markdown","7c2b8ebe":"markdown","ec680a6e":"markdown","1c61828b":"markdown","7f312dc0":"markdown","f197b7bb":"markdown","8aa1c4d5":"markdown","39a7982e":"markdown","b63d46d0":"markdown","b3feffb5":"markdown","7ea562fe":"markdown","49f224e0":"markdown","a4089a61":"markdown","5128af29":"markdown","b01e5d0f":"markdown","e082a19f":"markdown","0b817e56":"markdown","9bd71ea9":"markdown","21e4a891":"markdown","97acc616":"markdown","d0f1e2ed":"markdown","c711ac46":"markdown","d2b0830d":"markdown","dd0c7a10":"markdown","0bc56755":"markdown","bfa9565f":"markdown","432c8073":"markdown","c3520632":"markdown","6c2b0ccf":"markdown","98f10c64":"markdown","47b637e1":"markdown"},"source":{"2672a116":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input\/nifty50-stock-market-data'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n","ac31b1f1":"# Importing required modules\nimport pandas as pd          \nimport numpy as np               # For mathematical calculations \nimport matplotlib.pyplot as plt  # For plotting graphs \nimport datetime as dt\nfrom datetime import datetime    # To access datetime \nfrom pandas import Series        # To work on series \n%matplotlib inline \n\nimport warnings                   # To ignore the warnings \nwarnings.filterwarnings(\"ignore\")\n\n\n# Settings for pretty nice plots\nplt.style.use('fivethirtyeight')\nplt.show()\n\n","e6683c09":"df = pd.read_csv(\"\/kaggle\/input\/nifty50-stock-market-data\/MARUTI.csv\")\ndf.head()","4d8f38c3":"# For the sake of this notebook, I shall limit the number of columns to keep things simple. \n\ndata = df[['Date','Open','High','Low','Close','Volume','VWAP']]\n","6f05bf6c":"data.info()","d63f33ec":"# Convert string to datetime64\ndata['Date'] = data['Date'].apply(pd.to_datetime)\ndata.head()","77ca5f03":"from datetime import datetime\nmy_year = 2019\nmy_month = 4\nmy_day = 21\nmy_hour = 10\nmy_minute = 5\nmy_second = 30","d865eb07":"test_date = datetime(my_year, my_month, my_day)\ntest_date\n","c33d936f":"test_date = datetime(my_year, my_month, my_day, my_hour, my_minute, my_second)\nprint('The day is : ', test_date.day)\nprint('The hour is : ', test_date.hour)\nprint('The month is : ', test_date.month)","80cc9c4c":"print(data.index.max())\nprint(data.index.min())","0898eb6d":"# Earliest date index location\nprint('Earliest date index location is: ',data.index.argmin())\n\n# Latest date location\nprint('Latest date location: ',data.index.argmax())\n","4dbfce94":"df_vwap = df[['Date','VWAP']]\ndf_vwap['Date'] = df_vwap['Date'].apply(pd.to_datetime)\ndf_vwap.head()","8f8ca291":"df_vwap['year'] = df_vwap.Date.dt.year\ndf_vwap['month'] = df_vwap.Date.dt.month\ndf_vwap['day'] = df_vwap.Date.dt.day\ndf_vwap['day of week'] = df_vwap.Date.dt.dayofweek\n\n#Set Date column as the index column.\ndf_vwap.set_index('Date', inplace=True)\ndf_vwap.head()","03d739e4":"# Visualising the VWAP \n\nplt.figure(figsize=(16,8)) \nplt.plot(df_vwap['VWAP'], label='VWAP') \nplt.title('Time Series') \nplt.xlabel(\"Time(year)\") \nplt.ylabel(\"Volume Weighted Average Price\") \nplt.legend(loc='best')","e507dea6":"# Yearly VWAP of Maruti Stocks\n\ndf_vwap.groupby('year')['VWAP'].mean().plot.bar()","ef4f93df":"# Monthly VWAP of Maruti Stocks\n\ndf_vwap.groupby('month')['VWAP'].mean().plot.bar()","ca40a18e":"# Daily VWAP of Maruti Stocks\n\ndf_vwap.groupby('day')['VWAP'].mean().plot.bar()","a19c74f9":"# Analysing w.r.t day of the week\n\ndf_vwap.groupby('day of week')['VWAP'].mean().plot.bar()","a7f17795":"df_vwap.resample(rule = 'A').mean()[:5]","5b7618d2":"df_vwap['VWAP'].resample('A').mean().plot(kind='bar',figsize = (10,4))\nplt.title('Yearly Mean VWAP for Maruti')\n","37928f6b":"df_vwap['VWAP'].resample('AS').mean().plot(kind='bar',figsize = (10,4))\nplt.title('Yearly start Mean VWAP for Maruti')\n","64b59ac6":"df_vwap.head()","d78ef5fc":"df_vwap.shift(1).head()","37232145":"df_vwap.shift(-1).head()","b16272e9":"df_vwap.tshift(periods=3, freq = 'M').head()","8cd232d6":"df_vwap['VWAP'].plot(figsize = (10,6))","19b3011f":"df_vwap.rolling(7).mean().head(10)","cc9b126a":"df_vwap['VWAP'].plot()\ndf_vwap.rolling(window=30).mean()['VWAP'].plot(figsize=(16, 6))","f84eae87":"no major difference in between different months","b20b6e3b":"# Pandas for time series analysis\nAs pandas was developed in the context of financial modeling, it contains a comprehensive set of tools for working with dates, times, and time-indexed data. Let\u2019s look at the main pandas data structures for working with time series data.\n\n## Manipulating datetime\nPython's basic objects for working with dates and times reside in the built-in `datetime` module. In pandas, a single point in time is represented as a `Timestamp` and we can use `datetime()` function to create Timestamps from strings in a wide variety of date\/time formats.","20d1c3ee":"# A first look at Maruti\u2019s stock Prices\nLet\u2019s look at the first few columns of the dataset:","37175469":"## Rolling windows\n\nTime series data can be noisy due to high fluctuations in the market. As a result, it becomes difficult to gauge a trend or pattern in the data. Here is a visualization of the Amazon\u2019s adjusted close price over the years where we can see such noise:  ","0dbebd02":"For our stock price dataset, the type of the index column is DatetimeIndex. We can use pandas to obtain the minimum and maximum dates in the data.","1c737dab":"## Feature Extraction\n\nLet's extract time and date features from the Date column. Since the **volume weighted average price** (VWAP) is a trading benchmark, we shall limit our analysis to only that column.","01efcd62":"## Shifting based off time string code\nWe can also use the offset from the offset table for time shifting. For that, we will use the pandas `shift()` function. We only need to pass in the `periods` and `freq` parameters. The `period` attribute defines the number of steps to be shifted, while the `freq` parameters denote the size of those steps.\n\nLet\u2019s say we want to shift the data three months forward:","7c2b8ebe":"# Importing necessary libraries\n\nPython\u2019s Pandas' library is frequently used to import, manage, and analyze datasets in a variety of formats. In this article, we\u2019ll use it to analyze stock prices of [Maruti](https:\/\/en.wikipedia.org\/wiki\/Maruti_Suzuki) and perform some basic time series operations.\n\nMaruti Suzuki India Limited, formerly known as **Maruti Udyog Limited**, is an automobile manufacturer in India. It is a 56.21% owned subsidiary of the Japanese car and motorcycle manufacturer [Suzuki Motor Corporation](https:\/\/en.wikipedia.org\/wiki\/Suzuki).[6]As of July 2018, it had a market share of 53% of the Indian passenger car market.[*Wikipedia*]","ec680a6e":"Let us now look at the datatypes of the various components.","1c61828b":"# Table of Contents:\n* A first look at Maruti\u2019s stock Prices\n* Pandas for time series analysis\n - Manipulating datetime\n* Feature Extraction\n* Exploratory data Analysis\n* Time Resampling\n* Time Shifting\n - Forward Shifting\n - Bckward Shifting\n - Shifting based of time string code\n* Rolling Window \n \n","7f312dc0":"## Exploratory Data Analysis\n\nLet's explore the data and look at details at year, month and day level","f197b7bb":"# Time series data\n\nTime series data is a sequence of data points in chronological order that is used by businesses to analyze past data and make future predictions. These data points are a set of observations at specified times and equal intervals, typically with a datetime index and corresponding value. Common examples of time series data in our day-to-day lives include:      \n\n* Measuring weather temperatures \n* Measuring the number of taxi rides per month\n* Predicting a company\u2019s stock prices for the next day\n\n## Components of Time\u00a0Series\n\nTime series data consist of four components:\n\n* Trend Component: This is a variation that moves up or down in a reasonably predictable pattern over a long period.\n\n* Seasonality Component: is the variation that is regular and periodic and repeats itself over a specific period such as a day, week, month, season, etc.,\n\n* Cyclical Component: is the variation that corresponds with business or economic 'boom-bust' cycles or follows their own peculiar cycles, and\n\n* Random Component: is the variation that is erratic or residual and does not fall under any of the above three classifications.\n\nTo make this concept more clear here is a visual interpretation of the various components of the Time Series. You can view the original diagram with its context, [here](https:\/\/www.atap.gov.au\/tools-techniques\/travel-demand-modelling\/6-forecasting-evaluation).\n\n![](https:\/\/kite.com\/wp-content\/uploads\/2019\/08\/variations-of-time-series.jpg)","8aa1c4d5":"## Backwards shifting\nTo shift our data backwards, the number of periods (or increments) must be negative.","39a7982e":"Again, all days of the month have somewhat similar outcomes","b63d46d0":"We can also calculate the latest date location and the earliest date index location as follows:","b3feffb5":"The opening amount corresponding to **2003-07-09** is now **167**, whereas originally it was **164.90**.","7ea562fe":"Sometimes, we may need to shift or move the data forward or backwards in time. This shifting is done along a time index by the desired number of time-frequency increments.Here is the original dataset before any time shifts.","49f224e0":"It appears that the Date column is being treated as a string rather than as dates. To fix this, we\u2019ll use the pandas `to_datetime()` feature which converts the arguments to dates.","a4089a61":"> **To summarize what happened above:**\n>\n>  * `data.resample()` is used to resample the stock data.\n>  * The \u2018**A**\u2019 stands for year-end frequency, and denotes the offset values by which we want to resample the data.\n>  * `mean()` indicates that we want the average stock price during this period.","5128af29":"Now that our data has been converted into the desired format, let\u2019s take a look at its various columns for further analysis.      \n\n* **The Open and Close columns** indicate the opening and closing price of the stocks on a particular day.\n* **The High and Low columns** provide the highest and the lowest price for the stock on a particular day, respectively.\n* **The Volume column** tells us the total volume of stocks traded on a particular day.\n\nThe **volume weighted average price (VWAP)** is a trading benchmark used by traders that gives the average price a security has traded at throughout the day, based on both volume and price. It is important because it provides traders with insight into both the trend and value of a security.[source](https:\/\/www.investopedia.com\/terms\/v\/vwap.asp).","b01e5d0f":"The above bar plot corresponds to Maruti\u2019s VWAP at year-end for each year in our data set. \n\nSimilarly, year start mean VWAP can be found below. ","e082a19f":"# Conclusion\nPython\u2019s pandas library is a powerful, comprehensive library with a wide variety of inbuilt functions for analyzing time series data. In this article, we saw how pandas can be used for wrangling and visualizing time series data. \n\nWe also performed tasks like time sampling, time shifting and rolling with stock data. These are usually the first steps in analyzing any time series data. Going forward, we could use this data to perform a basic financial analysis by calculating the daily percentage change in stocks to get an idea about the volatility of stock prices. Another way we could use this data would be to predict Maruti\u2019s stock prices for the next few days by employing machine learning techniques. This would be especially helpful from the shareholder\u2019s point of view. ","0b817e56":"Let's extract the year, month, day, day of the week from the Date column.\n\n**Note - 0 is the starting of the week, i.e., 0 is Monday and 6 is Sunday.**\n","9bd71ea9":"Below is a complete list of the offset values. The list can also be found in the [pandas documentation](http:\/\/pandas.pydata.org\/pandas-docs\/stable\/user_guide\/timeseries.html#offset-aliases).\n\n![](https:\/\/cdn-images-1.medium.com\/max\/800\/1*piQRFEDprVNqznejGotpcw.png)","21e4a891":"![](https:\/\/images.unsplash.com\/photo-1535320903710-d993d3d77d29?ixlib=rb-1.2.1&ixid=eyJhcHBfaWQiOjEyMDd9&auto=format&fit=crop&w=1350&q=80)\n\n*Photo by M. B. M. on Unsplash*","97acc616":"We can now create a datetime object, and use it freely with pandas given the above attributes.","d0f1e2ed":"## Time Shifting","c711ac46":"It appears that Maruti had a more or less steady increase in its stock price over the from 2004 to the mid of 2018 window.There appears to be some drop in 2019 though.  We\u2019ll now use pandas to analyze and manipulate this data to gain insights.","d2b0830d":"## Forward Shifting\nTo shift our data forward, we will pass the desired number of periods (or increments) through the shift() function, which needs to be positive value in this case. Let's move our data forward by one period or index, which means that all values which earlier corresponded to row N will now belong to row N+1. Here is the output: \n","dd0c7a10":"There is a continuos increase in the VWAP price till 2018 and a certain dip in 2019. Now, let's analyse the data month wise","0bc56755":"We can also use time sampling to plot charts for specific columns.","bfa9565f":"The first six values have all become blank as there wasn\u2019t enough data to actually fill them when using a window of seven days.      \n\nSo, what are the key benefits of calculating a moving average or using this rolling mean method? Our data becomes a lot less noisy and more reflective of the trend than the data itself. Let\u2019s actually plot this out. First, we\u2019ll plot the original data followed by the rolling data for 30 days.     ","432c8073":"The **blue line** is the original open price data. The **red line represents the 30-day rolling window**, and has less noise than the orange line. Something to keep in mind is that once we run this code, the first 29 days aren\u2019t going to have the blue line because there wasn\u2019t enough data to actually calculate that rolling mean.","c3520632":"This is somewhat strange. While the activity is almost similar from Monday to Friday, Sunday shows a sudden spike in the VWAP price. This means although stockmarkets are closed on weekends, but when they were open, there were huge transactions on those days.","6c2b0ccf":"## Time resampling\nExamining stock price data for every single day isn\u2019t of much use to financial institutions, who are more interested in spotting market trends. To make it easier, we use a process called time resampling to aggregate data into a defined time period, such as by month or by quarter. Institutions can then see an overview of stock prices and make decisions according to these trends.           \n\nThe pandas library has a `resample()` function which resamples such time series data. The resample method in pandas is similar to its `groupby` method as it is essentially grouping according to a certain time span. The `resample()` function looks like this:","98f10c64":"As we\u2019re looking at daily data, there\u2019s quite a bit of noise present. It would be nice if we could average this out by a week, which is where a rolling mean comes in. A rolling mean, or moving average, is a transformation method which helps average out noise from data. It works by simply splitting and aggregating the data into windows according to function, such as `mean()`, `median()`, `count()`, etc. For this example, we\u2019ll use a rolling mean for 7 days.","47b637e1":"For the purposes of analyzing our particular data, we have selected only the day, month and year, but we could also include more details like hour, minute and second if necessary. "}}