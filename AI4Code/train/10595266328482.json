{"cell_type":{"dab38dce":"code","4811737a":"code","cffa810a":"code","b0168c08":"code","af964021":"code","5302a265":"code","22be862f":"code","6a1f1df5":"code","f1b07d01":"code","faac5b28":"code","2f352fe8":"code","fdfc6538":"code","aa5223ad":"code","713c82e2":"code","163af238":"code","68e8f9ca":"code","4e60e344":"code","ee2ebced":"code","33544c4d":"code","804c1cc4":"code","dc421069":"code","3643ba13":"code","c9f05123":"code","6f3ee532":"code","9276083f":"code","0271ca54":"code","8ea00407":"code","f95173b8":"code","d831c036":"code","b141efc0":"code","b84bfa07":"code","19797570":"code","d639204c":"code","78964f02":"code","395b72ef":"code","bd22be0d":"code","0977e0cc":"code","c916a6ea":"code","be7cbd4a":"code","04210142":"code","c65bdb27":"code","359e82bf":"code","fe3f4038":"code","8cba995c":"code","a9442fa3":"code","15482c94":"code","425224d2":"code","9661f224":"code","1576ee9f":"code","130bbf1c":"code","7123803f":"markdown","0f9b98db":"markdown","ff4da7a5":"markdown","1c2bf358":"markdown","f1696fb7":"markdown","eed266f9":"markdown","e1c11071":"markdown","c43e84f3":"markdown","fd3fac79":"markdown","ca55c745":"markdown","740f3f79":"markdown","747362b9":"markdown","85abd498":"markdown","135777e0":"markdown","49fa4eee":"markdown","ee839059":"markdown","294e9c27":"markdown"},"source":{"dab38dce":"# %pip install shap","4811737a":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport math\n\nfrom tqdm import tqdm\n\nfrom sklearn.metrics import accuracy_score\nfrom sklearn.metrics import confusion_matrix\nfrom sklearn.metrics import precision_score\nfrom sklearn.metrics import recall_score\nfrom sklearn.metrics import roc_auc_score\nfrom sklearn.metrics import f1_score\nfrom sklearn.metrics import mean_absolute_error\nfrom sklearn.metrics import mean_squared_error\nfrom sklearn.metrics import roc_curve\nfrom sklearn.metrics import classification_report\nfrom sklearn.metrics import precision_recall_curve\nfrom sklearn.metrics import log_loss\n\nfrom sklearn.model_selection import GridSearchCV\nimport xgboost as xgb\nfrom scipy.stats import ttest_rel\n\nfrom sklearn.model_selection import KFold, StratifiedKFold, train_test_split, cross_val_score, cross_validate\n\nfrom typing import List, Optional, Dict, Tuple\n\nimport shap\nshap.initjs()","cffa810a":"import lightgbm as lgbm","b0168c08":"import os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\ndata_dir = dirname + \"\/\"\nworking_dir = \"\/kaggle\/working\/\"","af964021":"src_list = [\"train\", \"client_profile\"]","5302a265":"source = {}\nfor name in src_list:\n    source[name] = pd.read_csv(dirname + \"\/\" + name + \".csv\")","22be862f":"for name in src_list:\n    print(f\"{name} \\n {source[name].shape} \\n\")","6a1f1df5":"source['train'].head(3)","f1b07d01":"source['client_profile'].head(3)","faac5b28":"for name in src_list:\n    print(f\"{name} \\n\")\n    source[name].info()\n    print(\"\\n\")","2f352fe8":"data = source['train']\ndata.tail()","fdfc6538":"def create_client_profile_features(X: pd.DataFrame, copy: bool = True) -> pd.DataFrame:\n    \"\"\"\n    \u0421\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u043e\u0432 \u043d\u0430 \u043e\u0441\u043d\u043e\u0432\u0435 \u043f\u0440\u043e\u0444\u0438\u043b\u044f \u043a\u043b\u0438\u0435\u043d\u0442\u043e\u0432.\n\n    Parameters\n    ----------\n    X: pandas.core.frame.DataFrame\n        \u041c\u0430\u0442\u0440\u0438\u0446\u0430 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u043e\u0432 \u0441 \u0438\u0441\u0445\u043e\u0434\u043d\u044b\u043c \u043f\u0440\u043e\u0444\u0438\u043b\u0435\u043c \u043a\u043b\u0438\u0435\u043d\u0442\u0430.\n\n    copy: bool, optional, default = True\n        \u0424\u043b\u0430\u0433 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u044f \u043a\u043e\u043f\u0438\u0438 \u0434\u0430\u0442\u0430\u0444\u0440\u0435\u0439\u043c\u0430 X.\n        \u041e\u043f\u0446\u0438\u043e\u043d\u0430\u043b\u044c\u043d\u044b\u0439 \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440, \u043f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e, \u0440\u0430\u0432\u0435\u043d True.\n\n    Returns\n    -------\n    X_transformed: pandas.core.frame.DataFrame\n        \u0420\u0430\u0441\u0448\u0438\u0440\u0435\u043d\u043d\u0430\u044f \u043c\u0430\u0442\u0440\u0438\u0446\u0430 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u043e\u0432 \u0441 \u043f\u0440\u043e\u0444\u0438\u043b\u0435\u043c \u043a\u043b\u0438\u0435\u043d\u0442\u043e\u0432.\n\n    \"\"\"\n    if copy:\n        X = X.copy()\n\n    X[\"DAYS_ON_LAST_JOB\"] = X[\"DAYS_ON_LAST_JOB\"].replace(365243, np.nan)\n    bki_flags = [flag for flag in X.columns if \"AMT_REQ_CREDIT_BUREAU\" in flag]\n    X[\"BKI_REQUESTS_COUNT\"] = X[bki_flags].sum(axis=1)\n    X[\"BKI_KURTOSIS\"] = X[bki_flags].kurtosis(axis=1)\n\n    X[\"EXTERNAL_SCORING_PROD\"] = X[\"EXTERNAL_SCORING_RATING_1\"] * X[\"EXTERNAL_SCORING_RATING_2\"] * X[\"EXTERNAL_SCORING_RATING_3\"]\n    X[\"EXTERNAL_SCORING_WEIGHTED\"] = X.EXTERNAL_SCORING_RATING_1 * 2 + X.EXTERNAL_SCORING_RATING_2 * 1 + X.EXTERNAL_SCORING_RATING_3 * 3\n\n    for function_name in [\"min\", \"max\", \"mean\", \"nanmedian\", \"var\"]:\n        feature_name = \"EXTERNAL_SCORING_RATING_{}\".format(function_name)\n        X[feature_name] = eval(\"np.{}\".format(function_name))(\n            X[[\"EXTERNAL_SCORING_RATING_1\", \"EXTERNAL_SCORING_RATING_2\", \"EXTERNAL_SCORING_RATING_3\"]], axis=1\n        )\n\n    # \u041e\u0442\u043d\u043e\u0448\u0435\u043d\u0438\u0435 \u043c\u0435\u0436\u0434\u0443 \u043e\u0441\u043d\u043e\u0432\u043d\u044b\u043c\u0438 \u0444\u0438\u043d. \u043f\u043e\u043a\u0430\u0437\u0430\u0442\u0435\u043b\u044f\u043c\u0438\n    X['RATIO_CREDIT_TO_ANNUITY'] = X['AMOUNT_CREDIT'] \/ X['AMOUNT_ANNUITY']\n    X[\"RATIO_ANNUITY_TO_SALARY\"] = X['AMOUNT_ANNUITY'] \/ X['TOTAL_SALARY']\n    X['RATIO_CREDIT_TO_SALARY'] = X['AMOUNT_CREDIT'] \/ X['TOTAL_SALARY']\n    #X[\"TOTAL_SALARY_NET\"] = X[\"TOTAL_SALARY\"] - X[\"AMOUNT_ANNUITY\"]\n\n    # \u041e\u0442\u043d\u043e\u0448\u0435\u043d\u0438\u0435 \u0444\u0438\u043d. \u043f\u043e\u043a\u0430\u0437\u0430\u0442\u0435\u043b\u0435\u0439 \u043a \u0432\u043e\u0437\u0440\u0430\u0441\u0442\u0443 \u0438 \u0432\u0440\u0435\u043c\u0435\u043d\u043d\u044b\u043c \u0444\u0438\u0447\u0430\u043c\n    X[\"RATIO_ANNUITY_TO_AGE\"] = X[\"AMOUNT_ANNUITY\"] \/ X[\"AGE\"]\n    X[\"RATIO_CREDIT_TO_AGE\"] = X[\"AMOUNT_CREDIT\"] \/ X[\"AGE\"]\n    X[\"RATIO_SALARY_TO_AGE\"] = X[\"TOTAL_SALARY\"] \/ X[\"AGE\"]\n    X[\"RATIO_SALARY_TO_EXPERIENCE\"] = X[\"TOTAL_SALARY\"] \/ X[\"DAYS_ON_LAST_JOB\"]\n    X[\"RATIO_CREDIT_TO_EXPERIENCE\"] = X[\"AMOUNT_CREDIT\"] \/ X[\"DAYS_ON_LAST_JOB\"]\n    X[\"RATIO_ANNUITY_TO_EXPERIENCE\"] = X[\"AMOUNT_ANNUITY\"] \/ X[\"DAYS_ON_LAST_JOB\"]\n\n    # \u041e\u0442\u043d\u043e\u0448\u0435\u043d\u0438\u0435 \u0432\u0440\u043c\u0435\u043d\u043d\u044b\u0445 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u043e\u0432\n    X[\"RATIO_AGE_TO_EXPERIENCE\"] = X[\"AGE\"] \/ X[\"DAYS_ON_LAST_JOB\"]\n    X[\"RATIO_SALARY_TO_REGION_POPULATION\"] = X[\"TOTAL_SALARY\"] * X[\"REGION_POPULATION\"]\n    X[\"RATIO_CAR_TO_EXPERIENCE\"] = X[\"OWN_CAR_AGE\"] \/ X[\"DAYS_ON_LAST_JOB\"]\n    X[\"RATIO_CAR_TO_AGE\"] = X[\"OWN_CAR_AGE\"] \/ X[\"AGE\"]\n\n    # \u041f\u0440\u043e\u0438\u0437\u0432\u0435\u0434\u0435\u043d\u0438\u0435 \u0444\u0438\u043d. \u043f\u043e\u043a\u0430\u0437\u0430\u0442\u0435\u043b\u0435\u0439 \u043a\u0440\u0435\u0434\u0438\u0442\u0430 \u043d\u0430 \u0432\u0435\u0440\u043e\u044f\u0442\u043d\u043e\u0441\u0442\u044c \u0434\u0435\u0444\u043e\u043b\u0442\u0430\n    # \u0422\u0430\u043a\u0430\u044f \u0448\u0442\u0443\u043a\u0430 \u043d\u0430\u0437\u044b\u0432\u0430\u0435\u0442\u0441\u044f \u043c\u0430\u0442\u0435\u043c\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u0438\u043c \u043e\u0436\u0438\u0434\u0430\u043d\u0438\u0435\u043c \u0434\u0435\u0444\u043e\u043b\u0442\u0430 \u0438\u043b\u0438 \u043e\u0436\u0438\u0434\u0430\u0435\u043c\u044b\u043c\u0438 \u043f\u043e\u0442\u0435\u0440\u044f\u043c\u0438\n    X[\"EXPECTED_TOTAL_LOSS_1\"] = X[\"EXTERNAL_SCORING_RATING_1\"] * X[\"AMOUNT_CREDIT\"]\n    X[\"EXPECTED_TOTAL_LOSS_2\"] = X[\"EXTERNAL_SCORING_RATING_2\"] * X[\"AMOUNT_CREDIT\"]\n    X[\"EXPECTED_TOTAL_LOSS_3\"] = X[\"EXTERNAL_SCORING_RATING_3\"] * X[\"AMOUNT_CREDIT\"]\n    X[\"EXPECTED_MONTHLY_LOSS_1\"] = X[\"EXTERNAL_SCORING_RATING_1\"] * X[\"AMOUNT_ANNUITY\"]\n    X[\"EXPECTED_MONTHLY_LOSS_2\"] = X[\"EXTERNAL_SCORING_RATING_2\"] * X[\"AMOUNT_ANNUITY\"]\n    X[\"EXPECTED_MONTHLY_LOSS_3\"] = X[\"EXTERNAL_SCORING_RATING_3\"] * X[\"AMOUNT_ANNUITY\"]\n\n    return X","aa5223ad":"client_profile = create_client_profile_features(source[\"client_profile\"])\nclient_profile.head(n=2)","713c82e2":"data = pd.merge(data, client_profile, on='APPLICATION_NUMBER', how='left')\ndata.head()","163af238":"data.tail()","68e8f9ca":"data.shape","4e60e344":"obj_col_names = data.select_dtypes(include=['object']).columns\nobj_col_names","ee2ebced":"data.loc[data[obj_col_names[1]].isnull(), obj_col_names[1]]","33544c4d":"for col in obj_col_names:\n    data.loc[data[col].isnull(), col] = 'No'","804c1cc4":"num_col_names = data.select_dtypes(exclude=['object']).columns\nnum_col_names","dc421069":"data.replace([np.inf, -np.inf], np.nan, inplace=True)","3643ba13":"for col in num_col_names:\n    data.loc[data[col].isnull(), col] = -1","c9f05123":"data.head()","6f3ee532":"data_cat = data.copy()","9276083f":"obj_col = data.select_dtypes(exclude=[np.number])","0271ca54":"def data_obj_discribe(data: pd.DataFrame):\n# \u0435\u0441\u043b\u0438 \u0441\u0442\u043e\u043b\u0431\u0435\u0446 \u0438\u043c\u0435\u0435\u0442 \u0442\u0438\u043f 'object' \u0438 \u0441\u043e\u0434\u0435\u0440\u0436\u0438\u0442 \u043c\u0435\u043d\u0435\u0435 30 \u0443\u043d\u0438\u043a\u0430\u043b\u044c\u043d\u044b\u0445 \n# \u0440\u0430\u0441\u043f\u0435\u0447\u0430\u0442\u044b\u0432\u0430\u0435\u0442 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f \u0441\u0442\u043e\u043b\u0431\u0446\u043e\u0432 \u0438 \u043f\u043e\u0434\u0441\u0447\u0438\u0442\u044b\u0432\u0430\u0435\u0442 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0439\n\n    # data: pd.DataFrame \u0438\u0441\u0445\u043e\u0434\u043d\u044b\u0439 \u0434\u0430\u0442\u0430\u0444\u0440\u0435\u0439\u043c\n    \n    obj_fit = data.select_dtypes(include='object')\n    print('*' * 100)\n    for cat_colname in obj_fit.columns:\n        if len(obj_fit[cat_colname].unique()) < 30:\n            print(str(cat_colname) + '\\n\\n' + str(obj_fit[cat_colname].unique()) + '\\n\\n')\n            print(obj_fit.groupby(cat_colname)[cat_colname].count())\n            print('*' * 100 + '\\n')","8ea00407":"if not obj_col.empty:\n    data_obj_discribe(data)","f95173b8":"def data_obj_map(data: pd.DataFrame):\n# \u0435\u0441\u043b\u0438 \u0441\u0442\u043e\u043b\u0431\u0435\u0446 \u0438\u043c\u0435\u0435\u0442 \u0442\u0438\u043f 'object' \u0438 \u0441\u043e\u0434\u0435\u0440\u0436\u0438\u0442 \u043c\u0435\u043d\u0435\u0435 30 \u0443\u043d\u0438\u043a\u0430\u043b\u044c\u043d\u044b\u0445 \n# \u043f\u0440\u0435\u043e\u0431\u0440\u0430\u0437\u0443\u0435\u0442 \u043a\u0430\u0442\u0435\u0433\u043e\u0440\u0438\u0430\u043b\u044c\u043d\u044b\u0435 \u043f\u0440\u0438\u0437\u043d\u0430\u043a \u0432 \u0447\u0438\u0441\u043b\u043e\u0432\u044b\u0435\n\n    # data: pd.DataFrame \u0438\u0441\u0445\u043e\u0434\u043d\u044b\u0439 \u0434\u0430\u0442\u0430\u0444\u0440\u0435\u0439\u043c\n    \n    # \u0438\u0437\u043c\u0435\u043d\u044f\u0435\u0442 \u0434\u0430\u0442\u0430\u0444\u0440\u0435\u0439\u043c \u0438\u0441\u0442\u043e\u0447\u043d\u0438\u043a\n    \n    obj_fit = data.select_dtypes(include='object')\n    for cat_colname in obj_fit.columns:\n        map_tr = {}\n        un_val = obj_fit[cat_colname].unique()\n        if len(un_val) < 30:\n            print(str(cat_colname) + '\\n')\n            for i in range(len(un_val)):\n                map_tr[un_val[i]] = i\n            print(map_tr)\n            data[cat_colname] = data[cat_colname].map(map_tr)\n            print('*' * 100 + '\\n')","d831c036":"if not obj_col.empty:\n    data_obj_map(data)","b141efc0":"data.head()","b84bfa07":"for col in data.columns:\n    data.loc[data[col].isnull(), col] = -1","19797570":"X_train, X_valid, y_train, y_valid = train_test_split(data.drop(\"TARGET\", axis=1), \n                                                      data[\"TARGET\"], \n                                                      test_size=0.2, random_state=42)","d639204c":"model_xgb = xgb.XGBClassifier(objective=\"binary:logistic\",\n                              nthread=2, \n                              max_depth=5, \n                              n_estimators=1000, \n                              subsample=0.5, \n                              learning_rate=0.3, \n                              seed=1400, \n                              random_state=42,\n                              eval_metric='auc')\n\nmodel_xgb.fit(X_train, y_train)\n\npreds = model_xgb.predict(X_valid)\n\naccuracy_score(y_valid, preds)","78964f02":"rw_clissifiers = ['XGBoost']\n\ncl_met = ['Best Threshold', 'F-Score', 'Precision', \n          'Recall', 'roc_auc_s', 'log_loss_s', 'TPR', 'FPR', 'TNR', \"TN\", \"FN\", \"TP\", \"FP\"]\n\nres_tab = pd.DataFrame(columns=cl_met)","395b72ef":"precision, recall, thresholds = precision_recall_curve(y_valid, preds)\n\nfscore = (2 * precision * recall) \/ (precision + recall)\n# locate the index of the largest f score\nix = np.argmax(fscore)\nprint('Best Threshold=%f, F-Score=%.3f, Precision=%.3f, Recall=%.3f' % (thresholds[ix], \n                                                                        fscore[ix],\n                                                                        precision[ix],\n                                                                        recall[ix]))","bd22be0d":"r_auc = roc_auc_score(y_true=y_valid, y_score=preds)\nl_los = log_loss(y_true=y_valid, y_pred=preds)\n\nprint(\"roc auc score: {}\".format(r_auc))\nprint(\"log loss score: {}\".format(l_los))","0977e0cc":"cnf_matrix = confusion_matrix(y_valid, preds>thresholds[ix])\n\nTN = cnf_matrix[0][0]\nFN = cnf_matrix[1][0]\nTP = cnf_matrix[1][1]\nFP = cnf_matrix[0][1]\n\nTPR = TP\/(TP+FN)\nFPR = FP\/(FP+TN)\nTNR = TN\/(FP+TN)\nTPR, FPR, TNR","c916a6ea":"res_tab.loc['XGBoost', :] = [thresholds[ix], fscore[ix], precision[ix], recall[ix], \n                             r_auc, l_los, TPR, FPR, TNR, TN, FN, TP, FP]\nres_tab","be7cbd4a":"lgbm_params =  {\n    'boosting_type': 'gbdt',\n    'objective': 'binary',\n    'metric': 'auc',\n    \"learning_rate\": 0.1,\n    \"num_leaves\": 31,\n    \"random_state\": 42 \n    }","04210142":"train_data = lgbm.Dataset(X_train, label=y_train)\ntest_data = lgbm.Dataset(X_valid, label=y_valid)\n\nmodel = lgbm.train(lgbm_params,\n                   train_data,\n                   valid_sets=test_data,\n                   num_boost_round=1000,\n                   early_stopping_rounds=50,\n                   verbose_eval=False)","c65bdb27":"ax = lgbm.plot_importance(model, max_num_features=355, figsize=(5,45))   #, figsize=(45,5)\nplt.show()","359e82bf":"def calculate_permutation_importance(estimator, \n                                     metric: callable,\n                                     x_valid: pd.DataFrame,\n                                     y_valid: pd.Series) -> pd.Series:\n    \"\"\"\n    \u0420\u0430\u0441\u0447\u0435\u0442 \u043f\u0435\u0440\u043c\u0443\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u043d\u043e\u0439 \u0432\u0430\u0436\u043d\u043e\u0441\u0442\u0438 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u043e\u0432.\n    \"\"\"\n    scores = {}\n    y_pred = estimator.predict(x_valid)\n    base_score = metric(y_valid, y_pred)\n\n    for feature in tqdm(x_valid.columns):\n        x_valid_copy = x_valid.copy()\n        x_valid_copy[feature] = np.random.permutation(x_valid_copy[feature])\n\n        y_pred = estimator.predict(x_valid_copy)\n        score = metric(y_valid, y_pred)\n        scores[feature] = base_score - score\n\n    scores = pd.Series(scores)\n    scores = scores.sort_values(ascending=False)\n\n    return scores","fe3f4038":"train_data = lgbm.Dataset(X_train, label=y_train)\ntest_data = lgbm.Dataset(X_valid, label=y_valid)\n\nmodel = lgbm.train(lgbm_params,\n                   train_data,\n                   valid_sets=test_data,\n                   num_boost_round=1000,\n                   early_stopping_rounds=50,\n                   verbose_eval=False)","8cba995c":"perm_importance = calculate_permutation_importance(\n    estimator=model, metric=roc_auc_score, x_valid=X_valid, y_valid=y_valid\n)\nperm_importance","a9442fa3":"# explain the model's predictions using SHAP\n# (same syntax works for LightGBM, CatBoost, scikit-learn and spark models)\nexplainer = shap.TreeExplainer(model_xgb)\nshap_values = explainer.shap_values(X_train)\n\n# visualize the first prediction's explanation (use matplotlib=True to avoid Javascript)\nshap.force_plot(explainer.expected_value, shap_values[0,:], X_train.iloc[0,:])","15482c94":"client = 2048\nshap.force_plot(explainer.expected_value, shap_values[client,:], X_train.iloc[client,:])","425224d2":"# summarize the effects of all the features\nshap.summary_plot(shap_values, X_train)","9661f224":"shap.summary_plot(shap_values, X_train, plot_type=\"bar\")","1576ee9f":"shap.dependence_plot('EXTERNAL_SCORING_RATING_mean', shap_values, X_train)","130bbf1c":"shap.dependence_plot('AGE', shap_values, X_train)","7123803f":"## \u041a\u043b\u044e\u0447\u0435\u0432\u044b\u0435 \u0445\u0430\u0440\u0430\u043a\u0442\u0435\u0440\u0438\u0441\u0442\u0438\u043a\u0438","0f9b98db":"### XGBoost prediction","ff4da7a5":"## \u0417\u0430\u0433\u0440\u0443\u0437\u043a\u0430 \u0434\u0430\u043d\u043d\u044b\u0445","1c2bf358":"\u041f\u0440\u0438 \u043f\u043e\u0432\u044b\u0448\u0435\u043d\u0438\u0438 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f EXTERNAL_SCORING_RATING_mean (\u0441\u0430\u043c\u043e\u0433\u043e \u0432\u0430\u0436\u043d\u043e\u0433\u043e \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0430) \u0441\u043d\u0438\u0436\u0430\u0435\u0442\u0441\u044f \u0432\u0435\u0440\u043e\u044f\u0442\u043d\u043e\u0441\u0442\u044c fraud (\u0437\u0430\u0432\u0438\u0441\u0438\u043c\u043e\u0441\u0442\u044c \u043d\u0435 \u043b\u0438\u043d\u0435\u0439\u043d\u0430\u044f (\u0441\u043c. \u043d\u0438\u0436\u0435), \u043d\u043e \u0441\u0432\u044f\u0437\u044c \u0435\u0441\u0442\u044c), \u0430\u043d\u0430\u043b\u043e\u0433\u0438\u0447\u043d\u043e \u0432\u0435\u0434\u0443\u0442 \u0441\u0435\u0431\u044f \u043f\u043e\u0434\u043e\u0431\u043d\u044b\u0435 \u0434\u0435\u0440\u0438\u0432\u0430\u0442\u0438\u0432\u044b \u043e\u0442 EXTERNAL_SCORING_RATING - max, min, nanmedian\n\nAPPLICATION_NUMBER \u0433\u0440\u044f\u0437\u043d\u044b\u0439, \u0442.\u0435. \u043d\u0435\u043e\u0434\u043d\u043e\u0437\u043d\u0430\u0447\u043d\u044b\u0439 \u043f\u0440\u0438\u0437\u043d\u0430\u043a . \u0434\u0430 \u0435\u0449\u0451 \u043e\u0441\u043d\u043e\u0432\u043d\u0430\u044f \u043c\u0430\u0441\u0441\u0430 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0439 \u043e\u043a\u043e\u043b\u043e 0 \u043d\u0430\u0434\u043e \u0434\u043e\u043f\u043e\u043b\u043d\u0438\u0442\u0435\u043b\u044c\u043d\u043e \u0438\u0441\u0441\u043b\u0435\u0434\u043e\u0432\u0430\u0442\u044c. \u0417\u0430\u0432\u0438\u0441\u0438\u043c\u043e\u0441\u0442\u044c \u043d\u0435 \u043e\u0447\u0435\u0432\u0438\u0434\u043d\u0430. \u041a\u0441\u0442\u0430\u0442\u0438, RATIO_CRDIT_TO_ANNUITY \u0432\u0435\u0434\u0451\u0442 \u0441\u0435\u0431\u044f \u0430\u043d\u0430\u043b\u043e\u0433\u0438\u0447\u043d\u043e.\n\nAGE \u043a\u043b\u0438\u0435\u043d\u0442\u044b \u0431\u043e\u043b\u0435\u0435 \u0441\u0442\u0430\u0448\u0435\u0433\u043e \u0432\u043e\u0437\u0440\u0430\u0441\u0442\u0430 \u043c\u0435\u043d\u0435\u0435 \u0441\u043a\u043b\u043e\u043d\u044b\u044b \u043a fraud (\u043d\u0435 \u0431\u0435\u0437 \u0438\u0441\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u0439 \u043a\u043e\u043d\u0435\u0447\u043d\u043e)","f1696fb7":"\u0421\u043f\u0438\u0441\u043e\u043a \u0441\u0430\u043c\u044b\u0445 \u0432\u0430\u0436\u043d\u044b\u0445 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u043e\u0432 (\u0432 \u043f\u043e\u0440\u044f\u0434\u043a\u0435 \u043f\u043e \u0443\u0431\u044b\u0432\u0430\u043d\u0438\u044e)","eed266f9":"## XGBoost","e1c11071":"### Permutation importance","c43e84f3":"\u0418\u0437 53 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u043e\u0432 \u043d\u0430\u0438\u0431\u043e\u043b\u044c\u0448\u0438\u0439 \u0432\u043a\u043b\u0430\u0434: \n   - \u0432 \u043f\u043e\u043b\u044c\u0437\u0443 fraud=1 \u0432\u043d\u0435\u0441\u043b\u0438 DAYS_ON_LAST_JOB \u0438 RATIO_CAR_TO_AGE \u0438 \u0442.\u0434.\n   - \u0432 \u043f\u043e\u043b\u044c\u0437\u0443 fraud=0 \u0432\u043d\u0435\u0441\u043b\u0438 (\u043f\u043e \u0443\u0431\u044b\u0432\u0430\u043d\u0438\u044e): APPLICATION_NUMBER, AGE, EXTERNAL_SCORING_RATING_min \u0438 \u0442.\u0434.\n<br>\u0420\u0435\u0437\u0443\u043b\u044c\u0442\u0438\u0440\u0443\u044e\u0449\u0435\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435 -7 (\u043d\u0435 fraud)","fd3fac79":"### Feature importance","ca55c745":"\u0418\u0437 53 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u043e\u0432 \u043d\u0430\u0438\u0431\u043e\u043b\u044c\u0448\u0438\u0439 \u0432\u043a\u043b\u0430\u0434: \n   - \u0432 \u043f\u043e\u043b\u044c\u0437\u0443 fraud=1 \u0432\u043d\u0435\u0441\u043b\u0438 (\u043f\u043e \u0443\u0431\u044b\u0432\u0430\u043d\u0438\u044e): AGE, APPLICATION_NUMBER \u0438 \u0442.\u0434.\n   - \u0432 \u043f\u043e\u043b\u044c\u0437\u0443 fraud=0 \u0432\u043d\u0435\u0441\u043b\u0438 (\u043f\u043e \u0443\u0431\u044b\u0432\u0430\u043d\u0438\u044e): EXPECTED_TOTAL_LOSS, EDUCATION_LEVEL, EXPECTED_MONTHLY_LOSS_3 \u0438 \u0442.\u0434.\n<br>\u0420\u0435\u0437\u0443\u043b\u044c\u0442\u0438\u0440\u0443\u044e\u0449\u0435\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435 -3.25 (\u043d\u0435 fraud, \u043d\u043e \u043d\u0435 \u0442\u0430\u043a \u043a\u0430\u043a -7 \u043f\u0440\u0435\u0434 \u043a\u043b\u0438\u0435\u043d\u0442\u0430)","740f3f79":"\u041e\u0447\u0435\u043d\u044c \u043b\u043e\u0445\u043c\u0430\u0442\u044b\u0439 \u043f\u0440\u0438\u0437\u043d\u0430\u043a. \u0417\u0430\u043c\u0435\u0442\u043d\u043e, \u0447\u0442\u043e fraud \u0447\u0430\u0449\u0435 \u0441\u043b\u0443\u0447\u0430\u0435\u0442\u0441\u044f \u0441\u0440\u0435\u0434\u0438 \u0441\u0430\u043c\u044b\u0445 \u043c\u043e\u043b\u043e\u0434\u044b\u0445 \u043a\u043b\u0438\u0435\u043d\u0442\u043e\u0432, \u0430 \u0441 \u0432\u043e\u0437\u0440\u0430\u0441\u0442\u043e\u043c \u0432\u0435\u0440\u043e\u044f\u0442\u043d\u043e\u0441\u0442\u044c \u043d\u0435\u0441\u043a\u043e\u043b\u043a\u043e \u0441\u043d\u0438\u0436\u0430\u0435\u0442\u0441\u044f. \u0422\u0430\u043a\u0436\u0435 \u0437\u0430\u043c\u0435\u0442\u043d\u043e, \u0447\u0442\u043e \u0447\u0435\u043c \u0432\u044b\u0448\u0435 \u0441\u0442\u0430\u0436, \u0442\u0435\u043c \u043d\u0438\u0436\u0435 \u0432\u0435\u0440\u043e\u0442\u043d\u043e\u0441\u0442\u044c fraud.","747362b9":"### SHAP","85abd498":"### \u0414\u043e\u0431\u0430\u0432\u043b\u044f\u0435\u043c client_profile","135777e0":"\u041d\u0430\u0433\u043b\u044f\u0434\u043d\u0430\u044f \u0434\u0435\u043c\u043e\u0441\u0442\u0440\u0430\u0446\u0438\u044f \u0432\u043b\u0438\u044f\u043d\u0438\u044f EXTERNAL_SCORING_RATING_mean \u043d\u0430 \u0446\u0435\u043b\u0435\u0432\u0443\u044e \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u0443\u044e (\u0432\u0435\u0440\u043e\u044f\u0442\u043d\u043e\u0441\u0442\u044c fraud). \u0417\u0430\u0432\u0438\u0441\u0438\u043c\u043e\u0441\u0442\u044c \u043e\u0431\u0440\u0430\u0442\u043d\u0430\u044f, \u0447\u0438\u043c \u0431\u043e\u043b\u044c\u0448\u0435 EXTERNAL_SCORING_RATING_mean, \u0442\u0435\u043c \u0440\u0435\u0436\u0435 fraud. \u0426\u0432\u0435\u0442\u043e\u043c \u043e\u0431\u043e\u0437\u043d\u0430\u0447\u0435\u043d\u043e \u0432\u043b\u0438\u044f\u043d\u0438\u0435 EXTERNAL_SCORING_WEIGHTED \u043d\u0430 EXTERNAL_SCORING_RATING_mean - \u0447\u0435\u043c \u0431\u043e\u043b\u044c\u0448\u0435 \u043e\u0431\u0430 \u044d\u0442\u0438 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0430 \u0442\u0435\u043c \u0440\u0435\u0436\u0435 fraud","49fa4eee":"# \u0414\u0417 7 \u0413\u043b\u0430\u0434\u044b\u0448\u0435\u0432 \u0412.\u0412.\n\n\u0418\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u044e \u0434\u0430\u0442\u0430\u0441\u0435\u0442 Kaggle \u0441\u043e\u0440\u0435\u0432\u043d\u043e\u0432\u0430\u043d\u0438\u044f: https:\/\/www.kaggle.com\/c\/geekbrains-competitive-data-analysis\/overview\n<br>\u0412 \u0434\u0430\u043d\u043d\u043e\u0439 \u0440\u0430\u0431\u043e\u0442\u0435 \u043d\u0443\u0436\u043d\u043e \u0431\u044b\u043b\u043e \u043f\u043e\u0441\u0442\u0440\u043e\u0438\u0442\u044c \u043c\u043e\u0434\u0435\u043b\u044c \u0434\u043b\u044f \u0432\u044b\u044f\u0432\u043b\u0435\u043d\u0438\u044f \u0441\u043b\u0443\u0447\u0430\u0435\u0432 \u043c\u043e\u0448\u0435\u043d\u043d\u0438\u0447\u0435\u0441\u0442\u0432\u0430 (fraud detection)\n- 0 no fraud\n- 1 fraud","ee839059":"### \u0417\u0430\u043f\u043e\u043b\u043d\u044f\u0435\u043c \u043f\u0440\u043e\u043f\u0443\u0441\u043a\u0438","294e9c27":"### \u041f\u0440\u0435\u043e\u0431\u0440\u0430\u0437\u0443\u0435\u043c \u043a\u0430\u0442\u0435\u0433\u043e\u0440\u0438\u0430\u043b\u044c\u043d\u044b\u0435 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0438 \u0432 \u0447\u0438\u0441\u043b\u043e\u0432\u044b\u0435"}}