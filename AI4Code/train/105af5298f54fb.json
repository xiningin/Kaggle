{"cell_type":{"c41c483c":"code","6d3be844":"code","6d09dc52":"code","767290b2":"code","39daec7c":"code","cc266cbc":"code","eb4fa7f2":"code","50c9f1a1":"code","b76a8319":"code","8067f50a":"code","125d43f0":"code","cef2901c":"markdown","448133bd":"markdown","29bb60e2":"markdown","36cf39e9":"markdown","8bcd2658":"markdown","3a82129c":"markdown","5b5e2941":"markdown"},"source":{"c41c483c":"import pandas as pd\nimport numpy as np\n\nimport torch\nimport torchvision.datasets as data\nimport torchvision.transforms as transforms\nimport random","6d3be844":"# GPU\ub97c \uc0ac\uc6a9\ud558\uace0, Python, Torch, GPU\uc758 \ub79c\ub364 \uc2dc\ub4dc\ub97c \uc0ac\uc6a9\ud568\n\ndevice = 'cuda' if torch.cuda.is_available() else 'cpu'\n\nrandom.seed(777)\ntorch.manual_seed(777)\nif device == 'cuda':\n  torch.cuda.manual_seed_all(777)","6d09dc52":"learning_rate = 0.01\ntraining_epochs = 300\nbatch_size = 50","767290b2":"# \ud55c\uae00\uc774 \ub4e4\uc5b4\uc788\uc5b4 encoding\uc744 \ud574\uc8fc\uc5b4\uc57c \ud568!\n\ntrain_data=pd.read_csv('train.CSV',encoding='euc-kr',header=None, skiprows=1, usecols=range(0,8))\ntest_data=pd.read_csv('test.CSV',encoding='euc-kr',header=None, skiprows=1, usecols=range(0,7))","39daec7c":"# train_data \uc804\ucc98\ub9ac\n\ntrain_data[2] = train_data[2]\/100\ntrain_data[4] = train_data[4]\/10\ntrain_data[6] = train_data[6]\/10\ntrain_data[7] = train_data[7]\/100 * 10\n\n# test_data \uc804\ucc98\ub9ac\n\ntest_data[2] = test_data[2]\/100\ntest_data[4] = test_data[4]\/10\ntest_data[6] = test_data[6]\/10","cc266cbc":"# Tensor\ud615 \ub370\uc774\ud130\ub85c \ubcc0\ud615\n\nx_train_data=train_data.loc[:,2:6]\ny_train_data=train_data[7]\n\nx_train_data=np.array(x_train_data)\ny_train_data=np.array(y_train_data)\n\nx_train_data=torch.FloatTensor(x_train_data)\ny_train_data=torch.FloatTensor(y_train_data)\n\n# TensorDataset\uc744 \uc774\uc6a9\ud574 Data_loader\ub97c \uc0ac\uc6a9\ud560 \uc218 \uc788\uac8c \ub9cc\ub4e4\uc5b4 \uc90c\n\ntrain_dataset = torch.utils.data.TensorDataset(x_train_data, y_train_data)\n\n# \ub370\uc774\ud130 \ub85c\ub354\n\ndata_loader = torch.utils.data.DataLoader(dataset=train_dataset, batch_size=batch_size, shuffle=True, drop_last=True)","eb4fa7f2":"# \ub2e8\uc77c \ub808\uc774\uc5b4\ub97c \uc0ac\uc6a9\n\nlinear1 = torch.nn.Linear(5,1,bias=True)\n\n# Random Init => Xavier Init\ntorch.nn.init.xavier_uniform_(linear1.weight)\n\n# relu\ub294 \ub9c8\uc9c0\ub9c9 \ub808\uc774\uc5b4\uc5d0\uc11c \ube84 \uac83\n\nmodel = torch.nn.Sequential(linear1).to(device)","50c9f1a1":"\n\nloss = torch.nn.MSELoss().to(device) # MSELoss\ub97c \uc0ac\uc6a9 (Mean Square)\noptimizer = torch.optim.Adam(model.parameters(), lr=learning_rate) ","b76a8319":"total_batch = len(data_loader)\nfor epoch in range(training_epochs):\n    avg_cost = 0\n\n    for X, Y in data_loader:\n\n        X = X.to(device)\n        Y = Y.to(device)\n\n        # \uadf8\ub798\ub514\uc5b8\ud2b8 \ucd08\uae30\ud654\n        optimizer.zero_grad()\n\n        hypothesis = model(X)\n        cost = loss(hypothesis, Y)\n        cost.backward()\n        optimizer.step()\n\n        # \ud3c9\uade0 Error \uacc4\uc0b0\n        avg_cost += cost \/ total_batch\n\n    print('Epoch:', '%04d' % (epoch + 1), 'cost =', '{:.9f}'.format(avg_cost))\n\nprint('Learning finished')","8067f50a":"\nwith torch.no_grad():\n\n  x_test_data=test_data.loc[:,2:6]\n  x_test_data=np.array(x_test_data)\n  x_test_data=torch.from_numpy(x_test_data).float().to(device)\n\n  prediction = model(x_test_data)\n    \ncorrect_prediction = prediction.cpu().numpy().reshape(-1,1)","125d43f0":"submit=pd.read_csv('\/content\/submit_sample.CSV')\n\n# \ub2e4\uc2dc \uc804\ucc98\ub9ac\ud558\uae30\nfor i in range(len(correct_prediction)):\n  submit['total'][i]=(correct_prediction[i].item())*100 % 10\n\n\nsubmit.to_csv('baseline.csv',index=False,header=True)\n\n!kaggle competitions submit -c 2020-ai-term-project-18011759 -f baseline.csv -m \"submit\"","cef2901c":"# \uc190\uc2e4\ud568\uc218\uc640 \ucd5c\uc801\ud654 \ud568\uc218","448133bd":"# Library Import","29bb60e2":"# Training Model","36cf39e9":"# Data Load","8bcd2658":"# test_data\ub97c \ubaa8\ub378\uc5d0 \ub123\uae30","3a82129c":"# Set Learning Parameter","5b5e2941":"# Save to CSV and Send to Kaggle"}}