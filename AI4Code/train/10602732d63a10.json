{"cell_type":{"219203bd":"code","dacb8df8":"code","f8e88b23":"code","6d25f807":"code","f785d6c0":"code","a642a9d8":"code","989cdf5e":"code","51680763":"code","cf61d38c":"code","b50078c3":"code","7f45d3d2":"code","1c742b63":"code","52c66a55":"code","b11b25b6":"code","7d819542":"code","700ff37b":"code","c3b1e6c0":"code","805967f5":"code","a0fc2a5b":"code","f9d6c662":"code","3bd6f146":"code","9b7bb1c8":"code","accb30c2":"code","9c04b117":"code","6299d259":"code","01e0a3e3":"code","4e45b60a":"code","994df43f":"code","e9409c0e":"code","b023cc39":"code","7f556505":"code","f3eb5d1a":"code","3df772ad":"code","a390f56a":"code","c743b221":"code","2cbf13d5":"code","71eebcec":"code","afeb2cd3":"code","5ed4ab7e":"code","1d935314":"code","d9cfb7d3":"code","5363b665":"code","bb66b6b9":"code","f5cb3ab0":"code","bedefa63":"code","4fb30a73":"code","21e7957f":"code","526e28b9":"code","ff24a353":"code","2dd48b6b":"code","11b82e8a":"code","b8a7ee0e":"code","2c3a7c80":"code","d251981a":"code","6e37422c":"code","c014a63f":"code","a6d7dd9b":"code","dce86674":"code","74cb72ac":"code","ea06463f":"code","0dfe11bf":"code","3d9d8abc":"code","57f249d7":"code","29fdca0b":"code","67cc1283":"code","0ee58c9b":"code","b1061205":"code","d3914dda":"code","60bf5d16":"code","e829ff09":"code","3052cc43":"code","02c977d8":"code","209ed4d8":"code","54bc2960":"code","5ae224d7":"code","c5b98a5d":"markdown","2fc22de6":"markdown","301a6606":"markdown","ea505a96":"markdown","792d6530":"markdown","692d9e00":"markdown","d8c29ba6":"markdown","f4753c26":"markdown","2c366776":"markdown","af0c5201":"markdown","84b72a2c":"markdown","00dc2564":"markdown","90a4201b":"markdown","f9bab33c":"markdown","8f2b5e42":"markdown","8e97111c":"markdown","3dba2a1c":"markdown","658c6002":"markdown","c1e717c0":"markdown","6cd3fd84":"markdown","d806876d":"markdown","df070f9f":"markdown","2dc21b79":"markdown","344dd719":"markdown","eb481fc3":"markdown","4a5a3483":"markdown","c575dab2":"markdown","2e0a9239":"markdown","e21a39b6":"markdown","e876a01f":"markdown","fb99e944":"markdown","42fc3d6a":"markdown","192f05ed":"markdown","58c4005b":"markdown"},"source":{"219203bd":"import numpy as np\nimport pandas as pd \nimport matplotlib.pyplot as plt\nimport seaborn as sns\nsns.set()\nnp.random.seed(0)","dacb8df8":"# Load our data from the csv file\ndf = pd.read_csv('..\/input\/housedata\/data.csv') \ndf.head()","f8e88b23":"df.info()","6d25f807":"df.describe().T","f785d6c0":"df.isnull().sum()","a642a9d8":"sns.boxplot(x='price', data= df);","989cdf5e":"sns.displot(df.price);","51680763":"df.price.plot();","cf61d38c":"def remove_outliers(df, x):\n    # Set Limits\n    q25, q75 = np.percentile(df[x], 25), np.percentile(df[x], 75)\n    iqr = q75 - q25\n    cut_off = iqr * 1.5\n    lower, upper = 1 ,  (q75 + cut_off)\n    df = df[(df[x] < upper) & (df[x] > lower)]\n    print('Outliers of \"{}\" are removed\\n'.format(x))\n    return df","b50078c3":"df= remove_outliers(df, 'price')","7f45d3d2":"df.shape","1c742b63":"df.describe().T","52c66a55":"df.price.plot();","b11b25b6":"sns.boxplot(x='price', data= df);","7d819542":"sns.displot(df.price);","700ff37b":"# Change to datetime type\ndf['date'] = pd.to_datetime(df['date'])\ndf['date'].dtype","c3b1e6c0":"# Extract year\ndf['year']= df.date.dt.year\ndf.year.value_counts()","805967f5":"df['month']= df.date.dt.month\ndf.month.value_counts()","a0fc2a5b":"df.drop(['date', 'year'], axis= 1, inplace= True)\ndf.head()","f9d6c662":"df.bedrooms.value_counts()","3bd6f146":"df = df[(df['bedrooms'] > 0) & (df['bedrooms'] < 8)]\ndf.bedrooms= df.bedrooms.astype(int)\ndf.bedrooms.value_counts()","9b7bb1c8":"df.shape","accb30c2":"df.bathrooms.value_counts()","9c04b117":"df.bathrooms = df.bathrooms.astype(int)\ndf.head()","6299d259":"fig, axes = plt.subplots(2, 2, figsize=(18, 10))\nsns.histplot(ax=axes[0, 0], x= 'sqft_living', data= df);\nsns.histplot(ax=axes[0, 1], x= 'sqft_lot', data= df);\nsns.histplot(ax=axes[1, 0], x= 'sqft_above', data= df);\nsns.histplot(ax=axes[1, 1], x= 'sqft_basement', data= df);","01e0a3e3":"sns.heatmap(df[[\"price\", \"sqft_living\", \"sqft_lot\", \"sqft_above\", \"sqft_basement\"]].corr(), annot=True);","4e45b60a":"# df.drop([\"sqft_lot\", \"sqft_above\", \"sqft_basement\"], axis=1, inplace=True)\n# df.head()","994df43f":"df.floors.value_counts()","e9409c0e":"df.floors = df.floors.astype(int)","b023cc39":"df.waterfront.value_counts()","7f556505":"df.view.value_counts()","f3eb5d1a":"df.condition.value_counts()","3df772ad":"sns.heatmap(df[[\"price\", \"floors\", \"waterfront\", \"view\", \"condition\"]].corr(), annot=True);","a390f56a":"sns.histplot(x= 'yr_built', data=df);","c743b221":"plt.scatter(df.yr_built, df.price);\nplt.xlabel(\"Year Built\")\nplt.ylabel(\"Price\")","2cbf13d5":"sns.histplot(x= 'yr_renovated', data=df);","71eebcec":"df.yr_renovated.value_counts()","afeb2cd3":"# df.yr_renovated = df.yr_renovated.apply(lambda x: x if x == 0 else 1)\n# df.yr_renovated.value_counts()","5ed4ab7e":"# for i in range (len (df)):\n#     if df.yr_renovated.iloc[i] == 0:\n#         df.yr_renovated.iloc[i] = df.yr_built.iloc[i]","1d935314":"# (df.yr_renovated == df.yr_built).sum()","d9cfb7d3":"df.head()","5363b665":"# drop street\ndf.drop('street', axis=1, inplace=True)","bb66b6b9":"df.city.nunique()","f5cb3ab0":"df.city.value_counts()","bedefa63":"df.statezip.value_counts()","4fb30a73":"df.country.value_counts()","21e7957f":"# drop \"country\" and \"statezip\"\ndf.drop([\"country\" , \"statezip\"], axis=1, inplace=True)\ndf.head()","526e28b9":"df.info()","ff24a353":"plt.figure(figsize=(15,10))\nsns.heatmap(df.corr(), annot=True)\nplt.show()","2dd48b6b":"df= pd.get_dummies(df, drop_first=True)\ndf.head().T","11b82e8a":"# Features\nX = df.drop('price', axis =1).values\n# Target\ny= df.price.values\n","b8a7ee0e":"from sklearn.model_selection import train_test_split\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.25, random_state=42)","2c3a7c80":"from sklearn.preprocessing import StandardScaler\nscaler = StandardScaler()\nX_train = scaler.fit_transform(X_train)\nX_test = scaler.transform(X_test)","d251981a":"X_train.mean(), X_train.std()","6e37422c":"from sklearn.linear_model import LinearRegression\nlin_reg = LinearRegression()\nlin_reg.fit(X_train, y_train)\ny_pred = lin_reg.predict(X_test)\nprint(\"Training accuracy: \", lin_reg.score(X_train, y_train))\nprint(\"Testing accuracy: \", lin_reg.score(X_test, y_test))","c014a63f":"plt.plot(range(X_test.shape[0]),(y_test- y_pred)**2, color='red')\nplt.show()","a6d7dd9b":"# Index of high errors\nsq_err=(y_test- y_pred)**2\nnp.where(sq_err > 0.3e12)","dce86674":"from sklearn.model_selection import cross_val_score\n\nlin_reg = LinearRegression()\n\n# Perform 10-fold CV\ncvscores_10 = cross_val_score(lin_reg, X, y, cv= 10)\nprint(np.mean(cvscores_10))\n","74cb72ac":"from sklearn.linear_model import Lasso\nlasso_reg= Lasso(max_iter=10000)\nlasso_reg.fit(X_train, y_train)\nprint(\"Training accuracy: \", lasso_reg.score(X_train, y_train))\nprint(\"Testing accuracy: \", lasso_reg.score(X_test, y_test))","ea06463f":"from sklearn.ensemble import RandomForestRegressor\n\nrf_reg = RandomForestRegressor(random_state=0)\nrf_reg.fit(X_train, y_train)\nprint(\"Training accuracy: \", rf_reg.score(X_train, y_train))\nprint(\"Testing accuracy: \", rf_reg.score(X_test, y_test))","0dfe11bf":"from sklearn.ensemble import RandomForestRegressor\nfrom sklearn.model_selection import GridSearchCV\n\n# Setup the hyperparameter grid\nparam_grid = { \n    'n_estimators': [100, 500, 700],\n   #'max_features': ['auto', 'sqrt', 'log2'],\n    'max_depth' : [4,6,8,10],\n   #'criterion' :['mse', 'mae']\n}\n\n\nrf_reg = RandomForestRegressor(random_state=0)\n\nrf_reg_cv = GridSearchCV(rf_reg, param_grid, cv= 5)\n\n# Fit it to the data\nrf_reg_cv.fit(X,y)\n\n# Print the tuned parameters and score\nprint(\"Tuned Random Forest Regression Parameters: {}\".format(rf_reg_cv.best_params_)) \nprint(\"Best score is {}\".format(rf_reg_cv.best_score_))","3d9d8abc":"from sklearn.ensemble import RandomForestRegressor\n\nrf_reg = RandomForestRegressor(max_depth=10, n_estimators=500, max_features='sqrt', random_state=0)\nrf_reg.fit(X_train, y_train)\nprint(\"Training accuracy: \", rf_reg.score(X_train, y_train))\nprint(\"Testing accuracy: \", rf_reg.score(X_test, y_test))","57f249d7":"# check xgboost version\nimport xgboost\nprint(xgboost.__version__)","29fdca0b":"from xgboost import XGBRegressor\nxgb_reg = XGBRegressor()\nxgb_reg.fit(X_train, y_train)\nprint(\"Training accuracy: \", xgb_reg.score(X_train, y_train))\nprint(\"Testing accuracy: \", xgb_reg.score(X_test, y_test))","67cc1283":"from sklearn.model_selection import GridSearchCV\n\n# Setup the hyperparameter grid\nspace={'max_depth': range(3,8),\n        'reg_lambda' : range(0,200,50),\n        'n_estimators': [ 300, 500],\n    }\n\nxgb_reg = XGBRegressor()\n\nxgb_reg_cv = GridSearchCV(xgb_reg, param_grid= space, cv= 5)\n\n# Fit it to the data\nxgb_reg_cv.fit(X,y)\n\n# Print the tuned parameters and score\nprint(\"Tuned xgboost Regression Parameters: {}\".format(xgb_reg_cv.best_params_)) \nprint(\"Best score is {}\".format(xgb_reg_cv.best_score_))\n","0ee58c9b":"xgb_reg = XGBRegressor(max_depth= 3, n_estimators= 300, reg_lambda= 100)\ncvscores_10 = cross_val_score(xgb_reg, X, y, cv= 10)\nprint(cvscores_10)","b1061205":"output = pd.read_csv('..\/input\/housedata\/output.csv')\noutput.head()","d3914dda":"# output['date'] = pd.to_datetime(output['date'])\n# output['month']= output.date.dt.month\n# output.drop([\"date\", \"sqft_lot\", \"sqft_above\", \"sqft_basement\", \"country\" , \"statezip\", \"street\"], axis=1, inplace=True)\n# output.yr_renovated = output.yr_renovated.apply(lambda x: x if x == 0 else 1)\n# output.head()","60bf5d16":"output['date'] = pd.to_datetime(output['date'])\noutput['month']= output.date.dt.month\noutput.drop([\"date\", \"country\" , \"statezip\", \"street\"], axis=1, inplace=True)\noutput.head()","e829ff09":"output.floors = output.floors.astype(int)\noutput.bedrooms = output.bedrooms.astype(int)\noutput.bathrooms = output.bathrooms.astype(int)\n\noutput = pd.get_dummies(output, drop_first= True)\noutput.shape","3052cc43":"df.shape","02c977d8":"xgb_reg = XGBRegressor(max_depth= 3, n_estimators= 300, reg_lambda=140)\nxgb_reg.fit(X_train, y_train)\n\nprint(\"Training accuracy: \", xgb_reg.score(X_train, y_train))\nprint(\"Testing accuracy: \", xgb_reg.score(X_test, y_test))","209ed4d8":"X_output=output.drop('price', axis=1).values\nX_output = scaler.transform(X_output)\ny_output= output.price.values\ny_pred = xgb_reg.predict(X_output)\nfrom sklearn.metrics import r2_score\nr2_score(y_output, y_pred)","54bc2960":"y_output","5ae224d7":"y_actual","c5b98a5d":"## Exploring \"yr_renovated\"","2fc22de6":"## Exploring \"condition\"","301a6606":"Obvious Outliers!","ea505a96":"# Random Forest","792d6530":"## Let's start with \"price\"","692d9e00":"## Exploring \"view\"","d8c29ba6":"Ok, All data in the same year >> Not informative","f4753c26":"# Output data","2c366776":"## Exploring \"yr_built\"","af0c5201":"# Splitting Data into Training (X_train, y_train) and Testing (X_test, y_test)\n","84b72a2c":"# Splitting Data into Features \"X\" and Target \"y\"","00dc2564":"We can depend only on \"sqft_living\" as the most effective feature with \"price\" and high correlated with \"sqft_above\"","90a4201b":"## Exploring \"waterfront\"","f9bab33c":"I will drop \"country\" as all houses in USA, and drop \"statezip\" as \"city\" is representable","8f2b5e42":"# Xgboost","8e97111c":"# Lasso Regression","3dba2a1c":"# Exploratory Data Analysis","658c6002":"Make it two classe: 0>> Not renovated, 1>> renovated","c1e717c0":"## Exploring Address (\"street\", \"city\", \"statezip\", \"country)","6cd3fd84":"No added value","d806876d":"> Overfitting","df070f9f":"## Let's explore Area (\"sqft_living\", \"sqft_lot\", \"sqft_above\", \"sqft_basement\")","2dc21b79":"From description: Minimum price = 0 >>>  Not logic","344dd719":"## Handling Categorical Feature \"city\"","eb481fc3":"Ok, Let's use \"month\" and drop \"date\" and \"year\" columns","4a5a3483":"## Ok, Let's go with \"date\"","c575dab2":"Float No. of Bathrooms !! >> let's fix it","2e0a9239":"## Go now for \"bedrooms\"","e21a39b6":"# Linear Regression (Our Base Model)","e876a01f":"Ok, 0 bedrooms is not normal, also we may neglect 8-9 bedrooms as outliers","fb99e944":"Let's remove outliers","42fc3d6a":"## Exploring \"floor\"","192f05ed":"Not bad as a base model","58c4005b":"Ok, Scaling Data before modelling"}}