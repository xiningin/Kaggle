{"cell_type":{"926db335":"code","247e9953":"code","f301b103":"code","749983e7":"code","1b0a0233":"code","316a6015":"code","97e89c98":"code","c8e84fba":"code","daceb329":"code","af63a42f":"code","0ef74853":"code","1eaa7394":"code","4fd04cba":"code","7d2df410":"code","1ca9bb29":"code","154de682":"code","017501b0":"code","2b68b90e":"code","5515d2e2":"code","bad74b16":"code","2a88db3a":"code","1c38bf37":"code","fce045eb":"code","efbbb2e7":"code","6578ed8c":"code","f1bf81ad":"code","e6d49960":"code","48e0d4c6":"code","7ac8afe1":"code","6fcafdbd":"code","6eb3e6eb":"code","8edaabb6":"code","96dedc69":"code","a4bfa63e":"code","6a8cde66":"code","90c2f497":"code","f8a09c3c":"code","b6f12874":"code","3d2845f3":"code","511bb384":"code","e5a2212a":"code","69239985":"code","e7e2eac9":"code","a3022c94":"code","e58aa760":"markdown","8299ad26":"markdown","88b7e952":"markdown","09d18ed9":"markdown","daeec211":"markdown","725d9f99":"markdown","06b13e4b":"markdown","519a91d2":"markdown","f31f013d":"markdown","ba666feb":"markdown","fd2d8050":"markdown"},"source":{"926db335":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","247e9953":"import matplotlib.pyplot as plt\nimport seaborn as sns\nimport plotly.express as px\n%matplotlib inline","f301b103":"#covid_19_df = pd.read_excel(\"\/kaggle\/input\/covid19geographicdistributionworldwide\/COVID-19-geographic-disbtribution-worldwide.xls\")\ncovid_19_df = pd.read_csv(\"\/kaggle\/input\/covid19geographicdistributionworldwide\/COVID-19-geographic-disbtribution-worldwide.csv\",encoding = \"ISO-8859-1\")\n#covid_19_df = covid_19_df.drop('Unnamed: 0',axis=1)\n\n#Auto update\ndirect_covid_19_df = pd.read_csv(\"https:\/\/opendata.ecdc.europa.eu\/covid19\/casedistribution\/csv\",encoding = \"ISO-8859-1\")\ncovid_19_df = direct_covid_19_df\n\n\ncovid_19_df.columns = ['DateRep','Day','Month','Year','Cases','Deaths','Countries and territories','GeoId','Alpha-3 code','Population','ContinentExp','C']\n#covid_19_df['DateRep'] = pd.to_datetime(covid_19_df['DateRep'],format='%Y-%m-%d')\ncovid_19_df['DateRep'] = pd.to_datetime(covid_19_df['DateRep'],format='%d\/%m\/%Y')\n#covid_19_df['DateRep'] = pd.to_datetime(covid_19_df['DateRep'],format='%m\/%d\/%Y')\n\ncountries_iso = pd.read_csv(\"\/kaggle\/input\/covid19geographicdistributionworldwide\/Countries_ISO.csv\",index_col=False)\ncountries_iso = countries_iso.drop('Unnamed: 0',axis=1)\n\ncountries_population = pd.read_csv(\"\/kaggle\/input\/covid19geographicdistributionworldwide\/Total_population_by_Country_ISO3_Year_2018.csv\",index_col=False)\ncountries_population = countries_population.drop('Unnamed: 0',axis=1)\n\ncountries_temperature = pd.read_csv('\/kaggle\/input\/covid19geographicdistributionworldwide\/Countries_ISO3_monthly_AVG_temperature.csv')\ncountries_temperature.columns = ['Alpha-3 code', 'Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug','Sep', 'Oct', 'Nov', 'Dec']\ncountries_temperature = countries_temperature.set_index('Alpha-3 code')\n\ncountries_bed = pd.read_csv('\/kaggle\/input\/covid19geographicdistributionworldwide\/Hospital_beds_by_country.csv')","749983e7":"#Capitalize first char from CountryExp\ncovid_19_df['Countries and territories'] = covid_19_df['Countries and territories'].apply(lambda country: str.capitalize(country))\n\ncovid_19_df['DateRep'] = pd.to_datetime(covid_19_df['DateRep'])\ncovid_19_df.head()","1b0a0233":"def highlight_max_yellow(s):\n    is_max = s == s.max()\n    return ['background-color: yellow' if v else '' for v in is_max]\n\ndef highlight_max(data, color='yellow'):\n    attr = 'background-color: {}'.format(color)\n    if data.ndim == 1:  # Series from .apply(axis=0) or axis=1\n        is_max = data == data.max()\n        return [attr if v else '' for v in is_max]\n    else:  # from .apply(axis=None)\n        is_max = data == data.max().max()\n        return pd.DataFrame(np.where(is_max, attr, ''),\n                            index=data.index, columns=data.columns)\n    \ndef highlight_max_all(s):\n    is_max = s == s.max()\n    return ['background-color: #f59d71' if v else '' for v in is_max]\n\n\ndef highlight_min(data):\n    color_min= '#b5f5d4' #green   \n    attr = 'background-color: {}'.format(color_min)\n\n    if data.ndim == 1:  # Series from .apply(axis=0) or axis=1\n        is_min = data == data.min()\n        return [attr if v else '' for v in is_min]\n    else: \n        is_min = data.groupby(level=0).transform('min') == data\n        return pd.DataFrame(np.where(is_min, attr, ''),\n                            index=data.index, columns=data.columns)\n    ","316a6015":"covid_19_df.set_index('DateRep',inplace=True)","97e89c98":"cv19_countries_day = covid_19_df.groupby(by=['DateRep','Countries and territories']).sum()[['Cases','Deaths']]\n\nTotal_confirmed = cv19_countries_day.groupby('DateRep').sum()[['Cases','Deaths']].sum()['Cases']\nTotal_deaths = cv19_countries_day.groupby('DateRep').sum()[['Cases','Deaths']].sum()['Deaths']\n\ndicc = {'Total Confirmed' : Total_confirmed, 'Total Deaths' : Total_deaths, 'Death Rate %' : round((Total_deaths\/Total_confirmed)*100,2)}\ntotal = pd.DataFrame(dicc,index=['Counter'])[['Total Confirmed','Total Deaths','Death Rate %']]\n\n\ntotal.style.set_properties(**{\n    'background-color': 'white',\n    'font-size': '20pt',\n    'color' : 'red'\n})\n\n","c8e84fba":"covid19_total = covid_19_df[['Countries and territories','Cases']].groupby(by='Countries and territories').sum().sort_values(by='Cases',ascending=False)\ncovid19_total.columns=['Cases']\ncovid19_total_d = covid_19_df[['Countries and territories','Deaths']].groupby(by='Countries and territories').sum().sort_values(by='Deaths',ascending=False)\ncovid19_total_d.columns=['Deaths']","daceb329":"cv19_countries_day = covid_19_df.groupby(by=['DateRep']).sum()[['Cases','Deaths']]\ncv19_countries_day['Cases'].cumsum().plot(figsize=(15,6),label='Confirmed cases',marker='o')\ncv19_countries_day['Deaths'].cumsum().plot(label=\"Deaths\",marker='+')\nplt.legend()\nplt.xlabel('Date')\nplt.show()\n\n#cv19_countries_day.sort_values(by='DateRep',ascending = False)\n","af63a42f":"cv19_countries_day['Deaths'].cumsum().plot(figsize=(15,6),color='red',label=\"Deaths\",marker='+')\nplt.legend()\nplt.xlabel('Date')\nplt.show()","0ef74853":"#Top 10 cases\nt10 = pd.concat([covid19_total.head(10),covid19_total_d.head(10)],axis=1,sort=False).head(10)","1eaa7394":"covi19_total = covid19_total.reset_index()\n\npx.bar(data_frame=covid19_total.head(20),x=covid19_total.head(20).index,y=covid19_total.head(20))\n\nfig = px.bar(covid19_total, \n             y=covid19_total.head(20), x=covid19_total.head(20).index, #color='NewConfCases', \n             labels={'x':'Country','y':'N\u00ba Confirmed'},\n             log_y=True, template='plotly_white', title='Confirmed Cases')\nfig.show()\n\nfig = px.bar(covid19_total_d, \n             y=covid19_total_d.head(20), x=covid19_total_d.head(20).index, #color='Cases', \n             labels={'x':'Country','y':'N\u00ba Deaths'},\n             log_y=True, template='plotly_white', title='Deaths')\nfig.show()","4fd04cba":"#Cases\n\nd_map = covid_19_df.groupby(by=['Countries and territories','GeoId']).sum().sort_values(by='Deaths',ascending=False) \\\n.reset_index()[['Countries and territories','GeoId','Cases','Deaths']]\nd_map.columns = ['Country','Alpha-2 code','Cases','Deaths']\n\nd_map = pd.merge(d_map,countries_iso,on='Alpha-2 code',how='right')[['Country_x','Alpha-2 code','Cases','Deaths','Alpha-3 code']]\n\nfig = px.scatter_geo(d_map.head(20), locations=\"Alpha-3 code\", color=\"Cases\",\n                     hover_name=\"Country_x\", size=\"Cases\",\n                     projection=\"equirectangular\", title=\"Worldwide Main Cases\")\nfig.show()\n","7d2df410":"#Deaths\n\nfig = px.scatter_geo(d_map.head(20), locations=\"Alpha-3 code\", color=\"Deaths\",\n                     hover_name=\"Country_x\", size=\"Deaths\",\n                     projection=\"equirectangular\", title=\"Worldwide Main Death Cases\")\nfig.show()\n\n","1ca9bb29":"t10['Death ratio'] = round((t10['Deaths'] \/ t10['Cases']) *100,2)\nt10.sort_values(by='Death ratio',ascending = False)\nt10f = t10[['Death ratio']].sort_values(by='Death ratio',ascending=False).dropna()\nt10f.style.apply(highlight_max, color='red', axis=None)","154de682":"fig = px.bar(t10f,x=t10f.index, y=t10f['Death ratio'] , labels={'x':'Countries'}, title=\"Top 8 rate Deaths\/Cases\" , width=800, template='ggplot2')\nfig.show()","017501b0":"covid19_change_global = cv19_countries_day.cumsum()\ncovid19_change_global[['Cases Day','Deaths Day']] = cv19_countries_day[['Cases','Deaths']]\ncovid19_change_global = covid19_change_global.pct_change(1)\ncovid19_change_global = covid19_change_global.sort_values(by='DateRep',ascending=False)\ncovid19_change_global = covid19_change_global.replace([np.inf, -np.inf], np.nan)\ncovid19_change_global = covid19_change_global.fillna(0)\ncovid19_change_global = round(covid19_change_global*100,2)\ncovid19_change_global = covid19_change_global.reset_index()\n\ncovid19_change_global_d = cv19_countries_day.cumsum()\ncovid19_change_global_d[['Cases Day','Deaths Day']] = cv19_countries_day[['Cases','Deaths']]\ncovid19_change_global_d = covid19_change_global_d.pct_change(1)\ncovid19_change_global_d = covid19_change_global_d.sort_values(by='DateRep',ascending=False)\ncovid19_change_global_d = covid19_change_global_d.replace([np.inf, -np.inf], np.nan)\ncovid19_change_global_d = covid19_change_global_d.fillna(0)\ncovid19_change_global_d = round(covid19_change_global_d*100,2)\ncovid19_change_global_d = covid19_change_global_d.reset_index()\n","2b68b90e":"px.bar(data_frame=covid19_change_global,x=covid19_change_global['DateRep'],y=covid19_change_global['Cases'], \\\n       color='Cases',\n       labels={'Cases':'Date','Deaths':'% change'},\n       title='Cases: Global change percentage per day')\n","5515d2e2":"px.bar(data_frame=covid19_change_global_d,x=covid19_change_global_d['DateRep'],y=covid19_change_global_d['Deaths'], \\\n       color='Deaths',\n       labels={'DateRep':'Date','Deaths':'% change'},\n       title='Deaths: Global change percentage per day')\n\n","bad74b16":"\"\"\"\nCalculate change by country for the 15 first\n\"\"\"\n\nImpacted_countries = covid_19_df[['Countries and territories','Cases']].sort_values(by=['DateRep','Cases'],ascending=False).head(15)['Countries and territories']\nImpacted_countries\n\ntop_impact = pd.DataFrame()\n\nfor country in Impacted_countries:\n    top_impact[country] = covid_19_df[covid_19_df['Countries and territories']==country]['Cases']\n\n\ntop_impact = top_impact.reset_index().sort_values(by='DateRep',ascending=True) \n    \n    \n#Normalize\n\n#top_impact_norm = top_impact\/top_impact.iloc[0] * 100","2a88db3a":"\n#Australia 0 cases correction (mean between days 25.03 and 27.03)\n#top_impact['Australia'][1] = 671.5\n\ngrowth_impact_day = top_impact.set_index('DateRep').pct_change(1).reset_index().sort_values(by='DateRep',ascending=False)\ngrowth_impact_day = round(growth_impact_day.set_index('DateRep')*100,2).head(10)\ngrowth_impact_day.style.apply(highlight_max_all).apply(highlight_min)\n","1c38bf37":"last_gi = growth_impact_day.iloc[0].sort_values(ascending = False)\n\nlast_gi = pd.DataFrame(data=[last_gi],index=[0],columns=last_gi.index)\nplt.figure(figsize=(18,5))\nsplot = sns.barplot(x='index',y=0,data=last_gi.T.reset_index())\nplt.title('Growth rate last day')\nplt.ylabel('Pct. change')\nplt.xlabel('Country')\nplt.xticks(rotation=45)\nfor p in splot.patches:\n    splot.annotate(format(p.get_height(), '.2f'), (p.get_x() + p.get_width() \/ 2., p.get_height()), ha = 'center', va = 'center', xytext = (0, 10), textcoords = 'offset points')\nplt.show()\n","fce045eb":"sns.set_style('whitegrid')\ntop_impact.set_index('DateRep').tail(30).plot(figsize=(18,8))\nplt.ylabel('N\u00ba cases')\nplt.xlabel('Date')\nplt.show()","efbbb2e7":"\"\"\"\nCalculate change by country for the 15 first\n\"\"\"\n\nImpacted_countries_d = covid_19_df[['Countries and territories','Deaths']].sort_values(by=['DateRep','Deaths'],ascending=False).head(15)['Countries and territories']\n\ntop_impact_d = pd.DataFrame()\n\nfor country in Impacted_countries_d:\n    top_impact_d[country] = covid_19_df[covid_19_df['Countries and territories']==country]['Deaths']\n\n\ntop_impact_d = top_impact_d.reset_index().sort_values(by='DateRep',ascending=True) \n    \n#Normalize\n\n\n#top_impact_norm = top_impact\/top_impact.iloc[0] * 100","6578ed8c":"#Growth impact (Change: 1 day , Scope: 10 days)\n\n#growth_impact_d_day = top_impact_d.pct_change(1).iloc[1:]\n#growth_impact_d_day = round(growth_impact_d_day*100,2).head(10)\n#growth_impact_d_day = growth_impact_d_day.replace([np.inf, -np.inf], np.nan)\n#growth_impact_d_day = growth_impact_d_day.fillna(0)\n#growth_impact_d_day.style.apply(highlight_max_all).apply(highlight_min)\n\n\ngrowth_impact_d_day = top_impact_d.set_index('DateRep').pct_change(1).reset_index().sort_values(by='DateRep',ascending=False)\ngrowth_impact_d_day = growth_impact_d_day.replace([np.inf, -np.inf], np.nan)\ngrowth_impact_d_day = round(growth_impact_d_day.set_index('DateRep')*100,2).head(10)\ngrowth_impact_d_day.style.apply(highlight_max_all).apply(highlight_min)\n","f1bf81ad":"last_gi = growth_impact_d_day.iloc[0].sort_values(ascending = False)\n\nlast_gi = pd.DataFrame(data=[last_gi],index=[0],columns=last_gi.index)\nplt.figure(figsize=(18,5))\nsplot = sns.barplot(x='index',y=0,data=last_gi.T.reset_index())\nplt.title('Deaths: Growth rate last day')\nplt.ylabel('Pct. change')\nplt.xlabel('Country')\nplt.xticks(rotation=45)\nfor p in splot.patches:\n    splot.annotate(format(p.get_height(), '.2f'), (p.get_x() + p.get_width() \/ 2., p.get_height()), ha = 'center', va = 'center', xytext = (0, 10), textcoords = 'offset points')\nplt.show()\n","e6d49960":"sns.set_style('whitegrid')\ntop_impact_d.set_index('DateRep').tail(30).plot(figsize=(18,8))\nplt.ylabel('N\u00ba deaths')\nplt.xlabel('Date')\nplt.show()\n","48e0d4c6":"mask = np.zeros_like(growth_impact_day.corr())\nmask[np.triu_indices_from(mask)] = True\nplt.figure(figsize=(9,7))\nsns.heatmap(growth_impact_day.corr(),mask=mask,cmap='YlGnBu', annot = True, fmt='.1g')\nplt.show()","7ac8afe1":"countries_population = countries_population[['Country Name','Country Code','2018']]\ncountries_population.columns = ['Country Name','Alpha-3 code','Population 2018']","6fcafdbd":"data_w_population = pd.merge(d_map,countries_population,on='Alpha-3 code',how='inner')[['Country_x','Alpha-2 code','Cases','Deaths','Alpha-3 code','Population 2018']]","6eb3e6eb":"data_w_population['Cases by Population x100000'] = round((data_w_population['Cases'] \/ data_w_population['Population 2018'])*100000,2)\ndata_w_population['Deaths by Population x100000'] = round((data_w_population['Deaths'] \/ data_w_population['Population 2018'])*100000,2)\n\ndata_w_population_c = data_w_population[['Country_x','Alpha-3 code','Cases by Population x100000']].sort_values(by='Cases by Population x100000',ascending = False).head(30)\ndata_w_population_d = data_w_population[['Country_x','Alpha-3 code','Deaths by Population x100000']].sort_values(by='Deaths by Population x100000',ascending = False).head(30)\n\n#Remove San Marino \ndata_w_population_c = data_w_population_c[2:]\ndata_w_population_d = data_w_population_d[1:]","8edaabb6":"px.bar(data_frame=data_w_population_c,x=data_w_population_c['Country_x'],y=data_w_population_c['Cases by Population x100000'], \\\n       color='Cases by Population x100000',\n       labels={'Country_x':'Country','Cases by Population x100000':'Cases (for each 100000 people)'},\n       title='Cases per country population (1 case for each 100000 people)')","96dedc69":"px.bar(data_frame=data_w_population_d,x=data_w_population_d['Country_x'],y=data_w_population_d['Deaths by Population x100000'], \\\n       color='Deaths by Population x100000',\n       labels={'Country_x':'Country','Deaths by Population x100000':'Deaths (for each 100000 people)'},\n       title='Deaths per country population (1 death for each 100000 people)')\n","a4bfa63e":"Italy_df = covid_19_df[covid_19_df['Alpha-3 code']=='ITA']\nSpain_df = covid_19_df[covid_19_df['Alpha-3 code']=='ESP']\nUSA_df = covid_19_df[covid_19_df['Alpha-3 code']=='USA']\n\nItaly_df = Italy_df.sort_values(by='DateRep',ascending=True)\nItaly_df['Cases-5-days-SMA']=Italy_df['Cases'].rolling(window=5).mean()\nItaly_df['Deaths-5-days_SMA']=Italy_df['Deaths'].rolling(window=5).mean()\nItaly_df = Italy_df.sort_values(by='DateRep',ascending=False)\n\nSpain_df = Spain_df.sort_values(by='DateRep',ascending=True)\nSpain_df['Cases-5-days-SMA']=Spain_df['Cases'].rolling(window=5).mean()\nSpain_df['Deaths-5-days_SMA']=Spain_df['Deaths'].rolling(window=5).mean()\nSpain_df = Spain_df.sort_values(by='DateRep',ascending=False)\n\nUSA_df = USA_df.sort_values(by='DateRep',ascending=True)\nUSA_df['Cases-5-days-SMA']=USA_df['Cases'].rolling(window=5).mean()\nUSA_df['Deaths-5-days_SMA']=USA_df['Deaths'].rolling(window=5).mean()\nUSA_df = USA_df.sort_values(by='DateRep',ascending=False)\n","6a8cde66":"\n\n#Create combo chart\nfig, ax1 = plt.subplots(figsize=(14,8))\ncolor = 'tab:green'\n#bar plot creation\nax1.set_title('Italy: Cases 5 Days SMA', fontsize=16)\nax1.set_xlabel('Date', fontsize=16)\nax1.set_ylabel('Cases', fontsize=16)\nax1 = sns.barplot(x='DateRep', y='Cases', data = Italy_df.reset_index()[:50], palette='winter')\n\nax1.set_xticklabels(\n    ax1.get_xticklabels(minor=True), \n    rotation=45, \n    horizontalalignment='right',\n    fontweight='light',\n    fontsize='x-large'\n)\nax1.tick_params(axis='y')\n\n#specify we want to share the same x-axis\nax2 = ax1.twiny()\ncolor = 'tab:red'\n#line plot creation\n#ax2.set_ylabel('5 days SMA', fontsize=16)\nax2 = sns.lineplot(x='DateRep', y='Cases-5-days-SMA', data=Italy_df.reset_index()[:50], color=color)\nax2.tick_params(axis='y', color=color)\nplt.show()\n\n","90c2f497":"\n\n#Create combo chart\nfig, ax1 = plt.subplots(figsize=(14,8))\ncolor = 'tab:green'\n#bar plot creation\nax1.set_title('Italy: Deaths 5 Days SMA', fontsize=16)\nax1.set_xlabel('Date', fontsize=16)\nax1.set_ylabel('Deaths', fontsize=16)\nax1 = sns.barplot(x='DateRep', y='Deaths', data = Italy_df.reset_index()[:50], palette='winter')\n\nax1.set_xticklabels(\n    ax1.get_xticklabels(minor=True), \n    rotation=45, \n    horizontalalignment='right',\n    fontweight='light',\n    fontsize='x-large'\n)\nax1.tick_params(axis='y')\n#specify we want to share the same x-axis\nax2 = ax1.twiny()\ncolor = 'tab:red'\n#line plot creation\nax2.set_ylabel('5 days SMA', fontsize=16)\nax2 = sns.lineplot(x='DateRep', y='Deaths-5-days_SMA', data = Italy_df.reset_index()[:50], color=color)\nax2.tick_params(axis='y', color=color)\n#show plot\nplt.show()\n","f8a09c3c":"\n\n#Create combo chart\nfig, ax1 = plt.subplots(figsize=(14,8))\ncolor = 'tab:green'\n#bar plot creation\nax1.set_title('Spain: Cases 5 Days SMA', fontsize=16)\nax1.set_xlabel('Date', fontsize=16)\nax1.set_ylabel('Cases', fontsize=16)\nax1 = sns.barplot(x='DateRep', y='Cases', data = Spain_df.reset_index()[:40], palette='spring')\n\nax1.set_xticklabels(\n    ax1.get_xticklabels(minor=True), \n    rotation=45, \n    horizontalalignment='right',\n    fontweight='light',\n    fontsize='x-large'\n)\nax1.tick_params(axis='y')\n#specify we want to share the same x-axis\nax2 = ax1.twiny()\ncolor = 'tab:red'\n#line plot creation\nax2.set_ylabel('5 days SMA', fontsize=16)\nax2 = sns.lineplot(x='DateRep', y='Cases-5-days-SMA', data = Spain_df.reset_index()[:40], color=color)\nax2.tick_params(axis='y', color=color)\n#show plot\nplt.show()\n","b6f12874":"\n\n#Create combo chart\nfig, ax1 = plt.subplots(figsize=(14,8))\ncolor = 'tab:green'\n#bar plot creation\nax1.set_title('Spain: Deaths 5 Days SMA', fontsize=16)\nax1.set_xlabel('Date', fontsize=16)\nax1.set_ylabel('Deaths', fontsize=16)\nax1 = sns.barplot(x='DateRep', y='Deaths', data = Spain_df.reset_index()[:40], palette='spring')\n\nax1.set_xticklabels(\n    ax1.get_xticklabels(minor=True), \n    rotation=45, \n    horizontalalignment='right',\n    fontweight='light',\n    fontsize='x-large'\n)\nax1.tick_params(axis='y')\n#specify we want to share the same x-axis\nax2 = ax1.twiny()\ncolor = 'tab:red'\n#line plot creation\nax2.set_ylabel('5 days SMA', fontsize=16)\nax2 = sns.lineplot(x='DateRep', y='Deaths-5-days_SMA', data = Spain_df.reset_index()[:40], color=color)\nax2.tick_params(axis='y', color=color)\n#show plot\nplt.show()\n","3d2845f3":"\n\n#Create combo chart\nfig, ax1 = plt.subplots(figsize=(14,8))\ncolor = 'tab:green'\n#bar plot creation\nax1.set_title('USA: Cases 5 Days SMA', fontsize=16)\nax1.set_xlabel('Date', fontsize=16)\nax1.set_ylabel('Cases', fontsize=16)\nax1 = sns.barplot(x='DateRep', y='Cases', data = USA_df.reset_index()[:40], palette='Blues')\n\nax1.set_xticklabels(\n    ax1.get_xticklabels(minor=True), \n    rotation=45, \n    horizontalalignment='right',\n    fontweight='light',\n    fontsize='x-large'\n)\nax1.tick_params(axis='y')\n#specify we want to share the same x-axis\nax2 = ax1.twiny()\ncolor = 'tab:red'\n#line plot creation\nax2.set_ylabel('5 days SMA', fontsize=16)\nax2 = sns.lineplot(x='DateRep', y='Cases-5-days-SMA', data = USA_df.reset_index()[:40], color=color)\nax2.tick_params(axis='y', color=color)\n#show plot\nplt.show()\n","511bb384":"\n\n#Create combo chart\nfig, ax1 = plt.subplots(figsize=(14,8))\ncolor = 'tab:green'\n#bar plot creation\nax1.set_title('USA: Deaths 5 Days SMA', fontsize=16)\nax1.set_xlabel('Date', fontsize=16)\nax1.set_ylabel('Deaths', fontsize=16)\nax1 = sns.barplot(x='DateRep', y='Deaths', data = USA_df.reset_index()[:40], palette='Blues')\n\nax1.set_xticklabels(\n    ax1.get_xticklabels(minor=True), \n    rotation=45, \n    horizontalalignment='right',\n    fontweight='light',\n    fontsize='x-large'\n)\nax1.tick_params(axis='y')\n#specify we want to share the same x-axis\nax2 = ax1.twiny()\ncolor = 'tab:red'\n#line plot creation\nax2.set_ylabel('5 days SMA', fontsize=16)\nax2 = sns.lineplot(x='DateRep', y='Deaths-5-days_SMA', data = USA_df.reset_index()[:40], color=color)\nax2.tick_params(axis='y', color=color)\n#show plot\nplt.show()\n","e5a2212a":"\nPeaks = covid_19_df.groupby(by='Countries and territories').max().sort_values(by='Cases',ascending=False)['Cases']\nPeaks = Peaks.reset_index()\n\n\n","69239985":"countries_temperature.columns = [1.0,2.0,3.0,4.0,5.0,6.0,7.0,8.0,9.0,10.0,11.0,12.0]\n\ndef Get_Country_Temperature(ISO3,Month):\n    return countries_temperature.loc[ISO3][Month]\n\n    ","e7e2eac9":"#covid_19_df\n#countries_iso\n#countries_population\n#countries_temperature\n#countries_bed\n\n#ML_data PREDICTION (GLOBAL)\n\ncovid_19_df_ml = covid_19_df.reset_index()[['DateRep','Cases','Deaths','Alpha-3 code','Population']]\n#covid_19_df_ml\n\ncountries_bed.columns = ['Alpha-3 code', 'INDICATOR', 'SUBJECT', 'MEASURE', 'FREQUENCY', 'TIME','Value']\ncovid_19_df_ml = pd.merge(covid_19_df_ml,countries_bed,on='Alpha-3 code',how='right')[['DateRep', 'Cases', 'Deaths', 'Alpha-3 code','Population', 'Value']]\ncovid_19_df_ml = covid_19_df_ml.dropna()\n\ncovid_19_df_ml['Temperature mavg'] = covid_19_df_ml.apply(lambda x: Get_Country_Temperature(x['Alpha-3 code'],x['DateRep'].month),axis=1)\ncovid_19_df_ml['DateRep'] = covid_19_df_ml['DateRep'].apply(lambda x: x.toordinal())\n\ncovid_19_df_ml = pd.get_dummies(covid_19_df_ml,columns=['Alpha-3 code'],drop_first=True)\ncovid_19_df_ml.columns\n\n#Global grupping\n#covid_19_df_ml_global = covid_19_df_ml.groupby(by='DateRep').agg({'Cases':'sum','Deaths':'sum','Population':'sum','Temperature mavg':'mean'})\n#covid_19_df_ml_global = covid_19_df_ml_global.reset_index()\n\nX=covid_19_df_ml[['DateRep', 'Population', 'Value', 'Temperature mavg',\n        'Alpha-3 code_AUT', 'Alpha-3 code_BEL', 'Alpha-3 code_BRA',\n       'Alpha-3 code_CAN', 'Alpha-3 code_CHE', 'Alpha-3 code_CHL',\n       'Alpha-3 code_CHN', 'Alpha-3 code_COL', 'Alpha-3 code_CRI',\n       'Alpha-3 code_DEU', 'Alpha-3 code_DNK', 'Alpha-3 code_ESP',\n       'Alpha-3 code_EST', 'Alpha-3 code_FIN', 'Alpha-3 code_FRA',\n       'Alpha-3 code_GBR', 'Alpha-3 code_GRC', 'Alpha-3 code_HUN',\n       'Alpha-3 code_IDN', 'Alpha-3 code_IND', 'Alpha-3 code_IRL',\n       'Alpha-3 code_ISL', 'Alpha-3 code_ISR', 'Alpha-3 code_ITA',\n       'Alpha-3 code_JPN', 'Alpha-3 code_KOR', 'Alpha-3 code_LTU',\n       'Alpha-3 code_LUX', 'Alpha-3 code_LVA', 'Alpha-3 code_MEX',\n       'Alpha-3 code_NLD', 'Alpha-3 code_NOR', 'Alpha-3 code_NZL',\n       'Alpha-3 code_POL', 'Alpha-3 code_PRT', 'Alpha-3 code_RUS',\n       'Alpha-3 code_SVK', 'Alpha-3 code_SVN', 'Alpha-3 code_SWE',\n       'Alpha-3 code_TUR', 'Alpha-3 code_USA', 'Alpha-3 code_ZAF']]\ny=covid_19_df_ml[['Cases','Deaths']]\n\n","a3022c94":"#from sklearn.model_selection import train_test_split\n#X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.25, random_state=42)","e58aa760":"<font size=\"5\">(Deaths) Growth per day time period (%)  \n<font size=\"3\">$$D(t) = D(t-1)*\\Delta$$<\/font>","8299ad26":"<font size=5>Virus Fatality Rate<\/font>","88b7e952":"<font size=\"5\">(Cases) Growth by time period (%)<\/font>\n<font size=\"3\">$$C(t) = C(t-1)*\\Delta$$<\/font>\n\n","09d18ed9":"<font size=\"5\">Growth per day (%)<\/font>","daeec211":"<font size=4>5 days simple moving average for Italy, Spain and USA<\/font>","725d9f99":"**Coronavirus disease 2019 (COVID-19)** is an infectious disease caused by severe acute respiratory syndrome coronavirus 2 (SARS-CoV-2).The disease was first identified in 2019 in Wuhan, China, and has since spread globally, resulting in the 2019\u201320 coronavirus pandemic.Common symptoms include fever, cough and shortness of breath. Muscle pain, sputum production and sore throat are less common. While the majority of cases result in mild symptoms, some progress to severe pneumonia and multi-organ failure. The rate of deaths per number of diagnosed cases is on average 3.4%, ranging from 0.2% in those less than 20 to approximately 15% in those over 80 years old.\n\nThe infection is typically spread from one person to another via respiratory droplets produced during coughing and sneezing.Time from exposure to onset of symptoms is generally between two and 14 days, with an average of five days. The standard method of diagnosis is by reverse transcription polymerase chain reaction (rRT-PCR) from a nasopharyngeal swab or throat swab. The infection can also be diagnosed from a combination of symptoms, risk factors and a chest CT scan showing features of pneumonia\n\nWithin the Notebook you will find various data analytics and some rates with periodical update for this infectious disease.","06b13e4b":"Next:\n<font size=4>Analyzing countries average temperature as additional feature information<\/font><br><br>\n<font size=3>**Predictions**: Linear regression and SVM models<\/font>","519a91d2":"<font size=\"5\">Countries % change (Correlation)<\/font>","f31f013d":"<font size=4>Impact per country population (1x100000)<\/font>\n- Affected cases for each 100000 inhabitants\n- Death cases for each 100000 inhabitants\n\n*Exculded: Countries with population smaller than 50000*","ba666feb":"<font size=4>Days since peak<\/font>","fd2d8050":"<font size=\"5\">Localized % change (impact)<\/font>"}}