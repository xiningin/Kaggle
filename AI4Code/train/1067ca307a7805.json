{"cell_type":{"422cd936":"code","9c5f01b8":"code","0959c98c":"code","ecdf061a":"code","176b5433":"code","f29f4cc4":"code","2cf31700":"code","aa2a08cd":"code","a3937525":"code","3cd1e15c":"code","795a2d7a":"code","da6e784f":"code","0ad2e08c":"code","8b69c6a1":"code","4cbe2695":"code","f6fc1795":"code","667801ba":"code","148eb2b3":"code","3070e46b":"code","78219a9d":"code","f5bf5ccb":"code","0a1f52a7":"code","b407ee20":"code","d665d7e7":"code","aec6c8f6":"code","cb3eff4a":"code","63e06187":"code","9e5fbee1":"code","6b995ac7":"code","b29ba1a6":"code","a88b8356":"code","8c606422":"code","83798fd2":"code","f946c773":"code","a74dcd9e":"markdown","7f4365c5":"markdown","e048d14d":"markdown","f1e54f03":"markdown","c29f32a1":"markdown","6f27294a":"markdown","6a00801d":"markdown","d478421d":"markdown","2266ba2d":"markdown","8c648c79":"markdown","0f11a059":"markdown","6c73ccb5":"markdown","59d2f2c0":"markdown","a2a8f96b":"markdown","5f0d067a":"markdown","25588d3c":"markdown","15905efa":"markdown","1e76ce5c":"markdown","58a081f9":"markdown","ad2308ea":"markdown","f0d593fd":"markdown","1fa30363":"markdown","b8d109ee":"markdown","e463ba4e":"markdown","d3932fc6":"markdown"},"source":{"422cd936":"#analysis of data\nimport pandas as pd\nimport numpy as py\n\n#visualization of data\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n%matplotlib inline","9c5f01b8":"#import train and test CSV files\ntrain = pd.read_csv(\"..\/input\/titanic\/train.csv\")\ntest = pd.read_csv(\"..\/input\/titanic\/test.csv\")\n\n#take a look at the training data\ntrain.describe(include=\"all\")","0959c98c":"#let us get list of all the variables in dataset\nprint(train.columns)","ecdf061a":"#see a sample of data\ntrain.sample(5)\n#sample shows randomly any 5 rows","176b5433":"train.head()\n#head shows first 5 rows","f29f4cc4":"#list of values not available\nprint(pd.isnull(train).sum())","2cf31700":"#bar plot of survival by sex\nsns.barplot(x = \"Sex\",y = \"Survived\",data = train)\n\n#survival rate of female\nprint(\"Percentage of females who survived:\", train[\"Survived\"][train[\"Sex\"] == 'female'].value_counts(normalize = True)[1]*100)\n\n#survival rate of male\nprint(\"Percentage of males who survived:\", train[\"Survived\"][train[\"Sex\"] == 'male'].value_counts(normalize = True)[1]*100)\n\n#value_counts(normalize = True)[1] - The Value_Counts function in pandas package counts the number of Survivors ( or where the column values are \"1\" (which is what [1] indicates)) who are female as well. By Default the normalize id false, if Normalize is true it means 'object returned will contain the relative frequencies of the unique values.' *100 - Since the factor is normalize, the above value will return a ratio value and then it is multiplied by 100 to double normalize into percentage factors.","aa2a08cd":"#bar plot of survival by Pclass\nsns.barplot(x=\"Pclass\", y=\"Survived\", data=train)\n\n#survival rate by Pclass\nprint(\"Percentage of Pclass = 1 who survived:\", train[\"Survived\"][train[\"Pclass\"] == 1].value_counts(normalize = True)[1]*100)\n\nprint(\"Percentage of Pclass = 2 who survived:\", train[\"Survived\"][train[\"Pclass\"] == 2].value_counts(normalize = True)[1]*100)\n\nprint(\"Percentage of Pclass = 3 who survived:\", train[\"Survived\"][train[\"Pclass\"] == 3].value_counts(normalize = True)[1]*100)\n","a3937525":"#bar plot for SibSp vs. survival\nsns.barplot(x=\"SibSp\", y=\"Survived\", data=train)\nplt.show()","3cd1e15c":"#draw a bar plot for Parch vs. survival\nsns.barplot(x=\"Parch\", y=\"Survived\", data=train)\nplt.show()","795a2d7a":"#sort the ages into logical categories\ntrain[\"Age\"] = train[\"Age\"].fillna(-0.5)\ntest[\"Age\"] = test[\"Age\"].fillna(-0.5)\nbins = [-1, 0, 5, 12, 18, 24, 35, 60, py.inf]\nlabels = ['Unknown', 'Baby', 'Child', 'Teenager', 'Student', 'Young Adult', 'Adult', 'Senior']\ntrain['AgeGroup'] = pd.cut(train[\"Age\"], bins, labels = labels)\ntest['AgeGroup'] = pd.cut(test[\"Age\"], bins, labels = labels)\n\n#draw a bar plot of Age vs. survival\nsns.barplot(x=\"AgeGroup\", y=\"Survived\", data=train)\nplt.show()","da6e784f":"train[\"CabinBool\"] = (train[\"Cabin\"].notnull().astype('int'))\ntest[\"CabinBool\"] = (test[\"Cabin\"].notnull().astype('int'))\n\n#calculate percentages of CabinBool vs. survived\nprint(\"Percentage of CabinBool = 1 who survived:\", train[\"Survived\"][train[\"CabinBool\"] == 1].value_counts(normalize = True)[1]*100)\nprint(\"Percentage of CabinBool = 0 who survived:\", train[\"Survived\"][train[\"CabinBool\"] == 0].value_counts(normalize = True)[1]*100)\n\n#draw a bar plot of CabinBool vs. survival\nsns.barplot(x=\"CabinBool\", y=\"Survived\", data=train)\nplt.show()\n","0ad2e08c":"test.describe(include=\"all\")","8b69c6a1":"#we'll start off by dropping the Cabin and ticket feature since not a lot more useful information can be extracted from it.\ntrain = train.drop(['Cabin'], axis = 1)\ntest = test.drop(['Cabin'], axis = 1)\n\ntrain = train.drop(['Ticket'], axis = 1)\ntest = test.drop(['Ticket'], axis = 1)","4cbe2695":"#now we need to fill in the missing values in the Embarked feature\nprint(\"Number of people embarking in Southampton (S):\")\nsouthampton = train[train[\"Embarked\"] == \"S\"].shape[0]\nprint(southampton)\n\nprint(\"Number of people embarking in Cherbourg (C):\")\ncherbourg = train[train[\"Embarked\"] == \"C\"].shape[0]\nprint(cherbourg)\n\nprint(\"Number of people embarking in Queenstown (Q):\")\nqueenstown = train[train[\"Embarked\"] == \"Q\"].shape[0]\nprint(queenstown)","f6fc1795":"#replacing the missing values in the Embarked feature with S\ntrain = train.fillna({\"Embarked\": \"S\"})","667801ba":"#create a combined group of both datasets\ncombine = [train, test]\n\n#extract a title for each Name in the train and test datasets\nfor dataset in combine:\n    dataset['Title'] = dataset.Name.str.extract(' ([A-Za-z]+)\\.', expand=False)\n\npd.crosstab(train['Title'], train['Sex'])","148eb2b3":"#replace various titles with more common names\nfor dataset in combine:\n    dataset['Title'] = dataset['Title'].replace([ 'Capt', 'Col',\n    'Don', 'Dr', 'Major', 'Rev', 'Jonkheer', 'Dona'], 'Rare')\n    \n    dataset['Title'] = dataset['Title'].replace(['Countess', 'Lady', 'Sir'], 'Royal')\n    dataset['Title'] = dataset['Title'].replace('Mlle', 'Miss')\n    dataset['Title'] = dataset['Title'].replace('Ms', 'Miss')\n    dataset['Title'] = dataset['Title'].replace('Mme', 'Mrs')\n\ntrain[['Title', 'Survived']].groupby(['Title'], as_index=False).mean()\n","3070e46b":"title_mapping = {\"Mr\": 1, \"Miss\": 2, \"Mrs\": 3, \"Master\": 4, \"Royal\": 5, \"Rare\": 6}\nfor dataset in combine:\n    dataset['Title'] = dataset['Title'].map(title_mapping)\n    dataset['Title'] = dataset['Title'].fillna(0)\n\ntrain.head()","78219a9d":"mr_age = train[train[\"Title\"] == 1][\"AgeGroup\"].mode() #Young Adult\nmiss_age = train[train[\"Title\"] == 2][\"AgeGroup\"].mode() #Student\nmrs_age = train[train[\"Title\"] == 3][\"AgeGroup\"].mode() #Adult\nmaster_age = train[train[\"Title\"] == 4][\"AgeGroup\"].mode() #Baby\nroyal_age = train[train[\"Title\"] == 5][\"AgeGroup\"].mode() #Adult\nrare_age = train[train[\"Title\"] == 6][\"AgeGroup\"].mode() #Adult\n\nage_title_mapping = {1: \"Young Adult\", 2: \"Student\", 3: \"Adult\", 4: \"Baby\", 5: \"Adult\", 6: \"Adult\"}\n\n\nfor x in range(len(train[\"AgeGroup\"])):\n    if train[\"AgeGroup\"][x] == \"Unknown\":\n        train[\"AgeGroup\"][x] = age_title_mapping[train[\"Title\"][x]]\n        \n\nfor x in range(len(test[\"AgeGroup\"])):\n    if test[\"AgeGroup\"][x] == \"Unknown\":\n        test[\"AgeGroup\"][x] = age_title_mapping[test[\"Title\"][x]]","f5bf5ccb":"age_mapping = {'Baby': 1, 'Child': 2, 'Teenager': 3, 'Student': 4, 'Young Adult': 5, 'Adult': 6, 'Senior': 7}\ntrain['AgeGroup'] = train['AgeGroup'].map(age_mapping)\ntest['AgeGroup'] = test['AgeGroup'].map(age_mapping)\n\ntrain.head()\n","0a1f52a7":"train.head()","b407ee20":"sex_mapping = {\"male\": 0, \"female\": 1}\ntrain['Sex'] = train['Sex'].map(sex_mapping)\ntest['Sex'] = test['Sex'].map(sex_mapping)\n\ntrain.head()","d665d7e7":"embarked_mapping = {\"S\": 1, \"C\": 2, \"Q\": 3}\ntrain['Embarked'] = train['Embarked'].map(embarked_mapping)\ntest['Embarked'] = test['Embarked'].map(embarked_mapping)\n\ntrain.head()","aec6c8f6":"#fill in missing Fare value in test set based on mean fare for that Pclass \nfor x in range(len(test[\"Fare\"])):\n    if pd.isnull(test[\"Fare\"][x]):\n        pclass = test[\"Pclass\"][x] #Pclass = 3\n        test[\"Fare\"][x] = round(train[train[\"Pclass\"] == pclass][\"Fare\"].mean(), 4)\n        \n#map Fare values into groups of numerical values\ntrain['FareBand'] = pd.qcut(train['Fare'], 4, labels = [1, 2, 3, 4])\ntest['FareBand'] = pd.qcut(test['Fare'], 4, labels = [1, 2, 3, 4])\n\n#drop Fare values\ntrain.drop(['Fare'], axis = 1 , inplace = True)\ntest.drop(['Fare'], axis=1, inplace=True)\n","cb3eff4a":"train.drop(['Name'],axis = 1, inplace = True)\ntest.drop(['Name'],axis = 1, inplace = True)\n\ntrain.drop(['Age'],axis = 1, inplace = True)\ntest.drop(['Age'],axis = 1, inplace = True)","63e06187":"train.head()","9e5fbee1":"test.head()","6b995ac7":"from sklearn.model_selection import train_test_split\n\npredictors = train.drop(['Survived', 'PassengerId'], axis=1)\ntarget = train[\"Survived\"]\nx_train, x_val, y_train, y_val = train_test_split(predictors, target, test_size = 0.22, random_state = 0)","b29ba1a6":"from sklearn.metrics import accuracy_score","a88b8356":"#Decision Tree\nfrom sklearn.tree import DecisionTreeClassifier\n\ndecisiontree = DecisionTreeClassifier()\ndecisiontree.fit(x_train, y_train)\ny_pred = decisiontree.predict(x_val)\nacc_decisiontree = round(accuracy_score(y_pred, y_val) * 100, 2)\nprint(acc_decisiontree)","8c606422":"# Random Forest\nfrom sklearn.ensemble import RandomForestClassifier\n\nrandomforest = RandomForestClassifier()\nrandomforest.fit(x_train, y_train)\ny_pred = randomforest.predict(x_val)\nacc_randomforest = round(accuracy_score(y_pred, y_val) * 100, 2)\nprint(acc_randomforest)","83798fd2":"# Gradient Boosting Classifier\nfrom sklearn.ensemble import GradientBoostingClassifier\n\ngbk = GradientBoostingClassifier()\ngbk.fit(x_train, y_train)\ny_pred = gbk.predict(x_val)\nacc_gbk = round(accuracy_score(y_pred, y_val) * 100, 2)\nprint(acc_gbk)\n","f946c773":"#set ids as PassengerId and predict survival \nids = test['PassengerId']\npredictions = gbk.predict(test.drop('PassengerId', axis=1))\n\n#set the output as a dataframe and convert to csv file named submission.csv\noutput = pd.DataFrame({ 'PassengerId' : ids, 'Survived': predictions })\noutput.to_csv('submission.csv', index=False)","a74dcd9e":"Barplot of Pclass suggests that survival rate is high for higher socioeconomic class.","7f4365c5":"Let us visualize sex feature here.","e048d14d":"We will convert fare values into logical fare bands by dividing fares into group of four ranges.","f1e54f03":"It is clear that most of people are embarkes to Southampton so let us impute non available values with S.","c29f32a1":"# Data Visualization","6f27294a":"**SibSp feature**","6a00801d":"In general, it's clear that people with more siblings or spouses aboard were less likely to survive. However, contrary to expectations, people with no siblings or spouses were less to likely to survive than those with one or two.","d478421d":"People with less than four parents or children aboard are more likely to survive than those with four or more. Again, people traveling alone are less likely to survive than those with 1-3 parents or children.","2266ba2d":"Firstly we will load several libraries for analysis of data and visualization. ","8c648c79":"Read in and take a look at statistics of training and testing dataset.","0f11a059":"We will convert age into logical category to visualize better.","6c73ccb5":"# Cleaning Data","59d2f2c0":"Take a look at values that are not available (NA) in dataset. Either we will drop that column if it is not significant or else we will impute data.","a2a8f96b":"Age feature is important so we will have to find a way to impute. we cannot just impute most freqaunt value or mean of all values.","5f0d067a":"Let us look at the dataset in two different ways.","25588d3c":"**Age feature**","15905efa":"# Modelling","1e76ce5c":"**Parch feature**","58a081f9":"Let us have a look at all the variables we will be using for predictions.","ad2308ea":"**Sex Feature**","f0d593fd":"**Cabin feature**\nIt is obsereved that people having designated cabins are more likely to survive than those who doesn't have cabin designated.","1fa30363":"Here we will extract titles first and imppute age accordingly.","b8d109ee":"Here, Age feature is missing quite a lot values and I assume that Age feature is pretty important in predicting survival.\n\nEmbarked feature is only missing 2 values out of 891 observations which is harmless.\n\nCabin feature is missing too many values. Imputing so many values can be risky for the model. We will probably drop this column.","e463ba4e":"This barplot clearly suggests that female have higher chances of surviving.","d3932fc6":"**Pclass feature**"}}