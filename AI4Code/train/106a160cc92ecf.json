{"cell_type":{"e02f3d16":"code","4a32cab9":"code","dbe09e7f":"code","483c5cb5":"code","b155d405":"code","0d150adb":"code","623286b7":"code","6e897465":"code","7325117b":"code","99947793":"code","50d36442":"code","bc402d46":"code","3b53280e":"code","e60d27ae":"code","9b1251d1":"code","8b463f73":"code","29b6ff1c":"code","c9a8d560":"code","49461e4c":"code","7f249f48":"code","e6d79778":"code","63865b74":"code","dcb3cca9":"code","efc56731":"code","f18e8a92":"code","100bb065":"code","8e63c31c":"code","3c9e8fdd":"code","a827ba1b":"code","de9345de":"code","86a04b46":"code","5085407b":"code","aaed602c":"code","e16d7893":"code","ddf40cf6":"code","8f90da13":"code","3f194012":"code","26251be8":"code","5064029a":"code","6ba8011b":"code","59080239":"code","776954fb":"code","26125fc2":"code","0a966acf":"code","93541ca4":"code","5f2a1951":"code","3abd5ad6":"code","84146d9e":"code","a7cbef2a":"code","880b0957":"code","8a8ef976":"code","b703cc23":"code","3363c613":"code","9845dc8f":"code","dbe74d6d":"code","b2ded17e":"code","e6fa11c0":"code","62889c90":"code","7dda4054":"code","f1e05b61":"code","2ebe99b8":"code","2d0231c6":"markdown","cf35ca78":"markdown","1ca70185":"markdown","c685b36c":"markdown","91e91699":"markdown","f87c834c":"markdown","f2860bfc":"markdown","e453d6f0":"markdown","10c15beb":"markdown","6c56958b":"markdown","c8b7b0f7":"markdown","eb5192eb":"markdown","8ede322a":"markdown","74d1c344":"markdown","57217b3e":"markdown","a1e7ce72":"markdown","ad97fd3b":"markdown","6c3d1dca":"markdown","849d71b0":"markdown","97532131":"markdown","9d5d2b0e":"markdown","2f3186ba":"markdown","3d8abab7":"markdown","7b09bfe7":"markdown","7797070b":"markdown","1d426a8d":"markdown","69fb1222":"markdown","ed8cea25":"markdown","56c367f8":"markdown","febbd457":"markdown","9c732322":"markdown","c08de708":"markdown","01bc199b":"markdown","eeb854aa":"markdown","c6675a10":"markdown","54df0aeb":"markdown","b988dea0":"markdown","b2fd94e2":"markdown","54ba732f":"markdown","e6be707b":"markdown","ee4fb294":"markdown","f76a0961":"markdown","5ab75e59":"markdown","72e6dac1":"markdown","65a0d1e0":"markdown","98a02e16":"markdown","8299f965":"markdown","806995a6":"markdown","f3b85934":"markdown","6bd1c1ee":"markdown","604d5bb9":"markdown"},"source":{"e02f3d16":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory\n\nimport os\nprint(os.listdir(\"..\/input\"))\n\n# Any results you write to the current directory are saved as output.","4a32cab9":"import bq_helper\nimport matplotlib\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom IPython.display import set_matplotlib_formats\nfrom plotly.offline import init_notebook_mode, iplot\ninit_notebook_mode(connected=True)\nimport plotly.graph_objs as go\n\nset_matplotlib_formats('retina')\n%matplotlib inline","dbe09e7f":"# Create a helper object for a bigquery dataset\ngoogle_analytics = bq_helper.BigQueryHelper(active_project = \"bigquery-public-data\",\n                                            dataset_name = \"google_analytics_sample\")","483c5cb5":"# Look over tables in the 'google_analytics_sample' dataset\ngoogle_analytics.list_tables()[:3]","b155d405":"# Preview the first couple lines of 'ga_sessions_20160801' table\ngoogle_analytics.head('ga_sessions_20160801', num_rows=3)","0d150adb":"# Check structure of fields in 'ga_sessions_20160801' table\nschema = google_analytics.table_schema('ga_sessions_20160801')\nprint(schema.shape)\nschema.head()","623286b7":"# Query each country's revenue from August 2016 to July 2017\nquery = \"\"\"\n  SELECT\n      geoNetwork.country AS country,\n      SUM(totals.totalTransactionRevenue)\/1e6 AS revenue\n  FROM\n      `bigquery-public-data.google_analytics_sample.ga_sessions_*`\n  WHERE\n      _TABLE_SUFFIX BETWEEN '20160801' AND '20170731'\n      AND totals.totalTransactionRevenue IS NOT NULL\n  GROUP BY\n      1\n  ORDER BY\n      2 DESC\n\"\"\"\n\nglobal_revenue = google_analytics.query_to_pandas_safe(query)\nprint(global_revenue.shape)\nglobal_revenue.head(3)","6e897465":"# Plot the revenues\niplot([go.Choropleth(\n    locationmode='country names',\n    locations=global_revenue['country'],\n    text=global_revenue['country'],\n    z=global_revenue['revenue'])])","7325117b":"# Add proportion of the revenues to a total\nglobal_revenue['ratio(%)'] = (global_revenue.revenue\n                              \/ global_revenue.revenue.sum())\nglobal_revenue['ratio(%)'] = (global_revenue['ratio(%)']\n                              * 100).round(2)\nglobal_revenue.head(10).T","99947793":"# Query US monthly revenues from August 2016 to July 2017\nquery = \"\"\"\n  SELECT\n      DATE_TRUNC(PARSE_DATE('%Y%m%d', date), MONTH) AS year_month,\n      SUM(totals.totalTransactionRevenue)\/1e6 AS revenue\n  FROM\n      `bigquery-public-data.google_analytics_sample.ga_sessions_*`\n  WHERE\n      _TABLE_SUFFIX BETWEEN '20160801' AND '20170731'\n      AND totals.totalTransactionRevenue IS NOT NULL\n      AND geoNetwork.country = 'United States'\n  GROUP BY\n      1\n  ORDER BY\n      1\n\"\"\"\n\nus_revenue = google_analytics.query_to_pandas_safe(query)\nprint(us_revenue.shape)\nus_revenue.head(3)","50d36442":"# Plot the monthly revenues\nus_revenue.plot.line(x='year_month',\n                     y='revenue',\n                     c='firebrick',\n                     figsize=(12,6))\n\nplt.title('U.S. Monthly Revenues (Aug 2016 - Jul 2017)',\n          fontsize=14)\nplt.xlim('2016-08-01', '2017-07-01')\nplt.ylim(0, 225000);","bc402d46":"# Query purchases of April 2017 in the US\nquery = \"\"\"\n  SELECT\n      CONCAT(fullVisitorId, CAST(visitId AS STRING)) AS unique_session_id,\n      totals.totalTransactionRevenue\/1e6 AS total_revenue\n  FROM\n      `bigquery-public-data.google_analytics_sample.ga_sessions_*`\n  WHERE\n      _TABLE_SUFFIX BETWEEN '20170401' AND '20170430'\n      AND geoNetwork.country = 'United States'\n      AND totals.totalTransactionRevenue IS NOT NULL\n\"\"\"\n\npurchases = google_analytics.query_to_pandas_safe(query)\nprint(purchases.shape)\npurchases.head(3)","3b53280e":"# Check the quartile of revenues\npurchases.describe().T","e60d27ae":"# Plot the quartile\nfig, (ax1, ax2) = plt.subplots(1, 2, figsize=(24,6))\npurchases_below_1500 = purchases[purchases.total_revenue < 1500]\n\nsns.boxplot(x='total_revenue',\n            data=purchases,\n            ax=ax1)\nsns.boxplot(x='total_revenue',\n            data=purchases_below_1500,\n            ax=ax2)\n\nax1.set_title('Purchase Revenues by Quartile',\n              fontsize=14)\nax2.set_title('Purchase Revenues by Quartile (Below 1,500)',\n              fontsize=14);","9b1251d1":"purchases[purchases.total_revenue > 10000]","8b463f73":"# Query purchase information of the two outliers\nquery = \"\"\"\n  SELECT\n      fullVisitorId AS visitor_id,\n      visitId AS visit_id,\n      CONCAT(fullVisitorId, CAST(visitId AS STRING)) AS unique_session_id,\n      date,\n      trafficSource.medium,\n      product.v2ProductCategory AS product_category,\n      product.v2ProductName AS product_name,\n      product.productSKU AS product_sku,\n      product.productPrice\/1e6 AS product_price,\n      product.productQuantity AS product_quantity,\n      product.productRevenue\/1e6 AS product_revenue,\n      totals.totalTransactionRevenue\/1e6 AS total_revenue\n  FROM\n      `bigquery-public-data.google_analytics_sample.ga_sessions_*`\n      , UNNEST(hits) AS hits\n      , UNNEST(hits.product) AS product\n  WHERE\n      _TABLE_SUFFIX BETWEEN '20170401' AND '20170430'\n      AND geoNetwork.country = 'United States'\n      AND productRevenue IS NOT NULL\n      AND CONCAT(fullVisitorId, CAST(visitId AS STRING)) IN ('19574589762938781001491423580', '19574589762938781001492527922')\n  ORDER BY\n      4 ASC, 10 DESC\n\"\"\"\n\npurchases_above_10000 = google_analytics.query_to_pandas_safe(query)\nprint(purchases_above_10000.shape)\npurchases_above_10000.head(3)","29b6ff1c":"purchases_above_10000[purchases_above_10000['unique_session_id'] == '19574589762938781001492527922'].head(3)","c9a8d560":"# Query summary of each transaction with 'quartile' segment label\nquery = \"\"\"\n  WITH purchaseDetail AS (\n      SELECT\n          CONCAT(fullVisitorId, CAST(visitId AS STRING)) AS unique_session_id,\n          CASE\n            WHEN totals.totalTransactionRevenue\/1e6 < 30.83 THEN 'Q1'\n            WHEN totals.totalTransactionRevenue\/1e6 BETWEEN 30.83 AND 56.975 THEN 'Q2'\n            WHEN totals.totalTransactionRevenue\/1e6 BETWEEN 56.975 AND 116.96 THEN 'Q3'\n            WHEN totals.totalTransactionRevenue\/1e6 BETWEEN 116.96 AND 246.155 THEN 'Q4'\n            ELSE 'outlier'\n          END AS segment,\n          product.v2ProductCategory AS product_category,\n          product.v2ProductName AS product_name,\n          product.productSKU AS product_sku,\n          (product.productRevenue\/1e6)\/product.productQuantity AS product_price_valid,\n          product.productQuantity AS product_quantity,\n          product.productRevenue\/1e6 AS product_revenue\n      FROM\n          `bigquery-public-data.google_analytics_sample.ga_sessions_*`\n          , UNNEST(hits) AS hits\n          , UNNEST(hits.product) AS product\n      WHERE\n          _TABLE_SUFFIX BETWEEN '20170401' AND '20170430'\n          AND geoNetwork.country = 'United States'\n          AND totals.totalTransactionRevenue IS NOT NULL\n          AND productRevenue IS NOT NULL\n          AND CONCAT(fullVisitorId, CAST(visitId AS STRING)) NOT IN ('19574589762938781001491423580', '19574589762938781001492527922'))\n    \n  SELECT\n      unique_session_id,\n      MAX(segment) AS segment,\n      COUNT(*) AS number_of_products,\n      SUM(product_quantity) AS total_quantity,\n      ROUND(SUM(product_revenue), 2) AS total_revenue\n  FROM\n      purchaseDetail\n  GROUP BY\n      1\n\"\"\"\n\nsegment = google_analytics.query_to_pandas_safe(query)\nprint(segment.shape)\nsegment.head(3)","49461e4c":"seg_overview = segment.groupby('segment') \\\n                      .agg({'unique_session_id': 'count',\n                            'number_of_products': sum,\n                            'total_quantity': sum,\n                            'total_revenue': sum})\n\nseg_overview['avg_purchase_revenue'] = (seg_overview['total_revenue']\n                                        \/ seg_overview['unique_session_id']) \\\n                                        .round(3)\nseg_overview['avg_product_price(weighted)'] = (seg_overview['total_revenue']\n                                               \/ seg_overview['total_quantity']) \\\n                                               .round(3)\nseg_overview['avg_number_of_products'] = (seg_overview['number_of_products']\n                                          \/ seg_overview['unique_session_id']) \\\n                                          .round(3)\nseg_overview['avg_purchase_quantity'] = (seg_overview['total_quantity']\n                                         \/ seg_overview['unique_session_id']) \\\n                                         .round(3)\nseg_overview['avg_quantity_per_product'] = (seg_overview['avg_purchase_quantity']\n                                            \/ seg_overview['avg_number_of_products']) \\\n                                            .round(3)\n\ncol_order = ['unique_session_id', 'total_revenue', 'total_quantity', 'number_of_products',\n             'avg_purchase_revenue', 'avg_product_price(weighted)', 'avg_number_of_products',\n             'avg_quantity_per_product', 'avg_purchase_quantity']\n\nseg_overview = seg_overview.reindex(columns=col_order)\nseg_overview","7f249f48":"fig, ((ax1, ax2), (ax3, ax4)) = plt.subplots(2, 2, figsize=(24,12))\nfig.subplots_adjust(hspace=0.3)\n\nax1.set_title('Average Purchase Value',\n              fontsize=14)\nax2.set_title('Quantity per Product',\n              fontsize=14)\nax3.set_title('Average Product Price',\n              fontsize=14)\nax4.set_title('Number of Products per Purchase',\n              fontsize=14)\n\nsns.barplot(x=seg_overview.index,\n            y='avg_purchase_revenue',\n            data=seg_overview,\n            palette=\"RdYlBu\", ax=ax1)\nsns.barplot(x=seg_overview.index,\n            y='avg_quantity_per_product',\n            data=seg_overview,\n            palette=\"RdYlBu\", ax=ax2)\nsns.barplot(x=seg_overview.index,\n            y='avg_product_price(weighted)',\n            data=seg_overview,\n            palette=\"RdYlBu\", ax=ax3)\nsns.barplot(x=seg_overview.index,\n            y='avg_number_of_products',\n            data=seg_overview,\n            palette=\"RdYlBu\", ax=ax4);","e6d79778":"# Query purchased product information\nquery = \"\"\"\n  SELECT\n      CONCAT(fullVisitorId, CAST(visitId AS STRING)) AS unique_session_id,\n      CASE\n        WHEN totals.totalTransactionRevenue\/1e6 < 30.83 THEN 'Q1'\n        WHEN totals.totalTransactionRevenue\/1e6 BETWEEN 30.83 AND 56.975 THEN 'Q2'\n        WHEN totals.totalTransactionRevenue\/1e6 BETWEEN 56.975 AND 116.96 THEN 'Q3'\n        WHEN totals.totalTransactionRevenue\/1e6 BETWEEN 116.96 AND 246.155 THEN 'Q4'\n        ELSE 'outlier'\n      END AS segment,\n      product.v2ProductCategory AS product_category,\n      product.v2ProductName AS product_name,\n      product.productSKU AS product_sku,\n      (product.productRevenue\/1e6)\/product.productQuantity AS product_price_valid,\n      product.productQuantity AS product_quantity,\n      product.productRevenue\/1e6 AS product_revenue\n  FROM\n      `bigquery-public-data.google_analytics_sample.ga_sessions_*`\n      , UNNEST(hits) AS hits\n      , UNNEST(hits.product) AS product\n  WHERE\n      _TABLE_SUFFIX BETWEEN '20170401' AND '20170430'\n      AND geoNetwork.country = 'United States'\n      AND totals.totalTransactionRevenue IS NOT NULL\n      AND productRevenue IS NOT NULL\n      AND CONCAT(fullVisitorId, CAST(visitId AS STRING)) NOT IN ('19574589762938781001491423580', '19574589762938781001492527922')\n\"\"\"\n\nproduct_purchased = google_analytics.query_to_pandas_safe(query)\nprint(product_purchased.shape)\nproduct_purchased.head(3)","63865b74":"product_purchased.product_category.unique()","dcb3cca9":"uncategorized_products = product_purchased[product_purchased['product_category']\n                                           == '${productitem.product.origCatName}'] \\\n                                           .product_name \\\n                                           .unique()\ncategorized_products = product_purchased[product_purchased['product_category']\n                                         != '${productitem.product.origCatName}'] \\\n                                         .product_name \\\n                                         .unique()\n\nfor product in uncategorized_products:\n    if product not in categorized_products:\n        print(product)","efc56731":"product_purchased_categorized = product_purchased[product_purchased['product_category']\n                                                  != '${productitem.product.origCatName}']\n\nproduct_category_pairs = dict(zip(product_purchased_categorized['product_name'],\n                                  product_purchased_categorized['product_category']))\n\ndef category_modification(row):\n    if row.product_category != '${productitem.product.origCatName}':\n        return row.product_category\n    else:\n        if row.product_name == \"Google Women's V-Neck Tee Charcoal\":\n            return 'Apparel'\n        else:\n            return product_category_pairs[row.product_name]\n    \nproduct_purchased['product_category(clean)'] = product_purchased.apply(category_modification,\n                                                                       axis=1)\nproduct_purchased.loc[product_purchased['product_category']\n                      == '${productitem.product.origCatName}',\n                      ['product_category', 'product_category(clean)']] \\\n                 .head(3)","f18e8a92":"# Calculate revenue proportion of categories for each segment\ncategory_performance = product_purchased.groupby(['product_category(clean)', 'segment']) \\\n                                        .product_revenue \\\n                                        .sum() \\\n                                        .unstack(1, fill_value=0)\n\nfor segment in list(category_performance.columns):\n    category_performance[segment] = ((category_performance[segment]\n                                      \/ category_performance[segment].sum())\n                                      * 100).round(1)\n\ncategory_performance = category_performance.sort_values(['Q1', 'Q2', 'Q3'],\n                                                        ascending=[False, False, False])\ncategory_performance.head()","100bb065":"# Plot the proportion by segment\nax = category_performance.plot.bar(figsize=(24,6),\n                                   edgecolor='Black',\n                                   cmap='RdYlBu',\n                                   rot=45)\n\nax.set_title(\"Category Revenue Proportion by Segment\",\n             fontsize=14);","8e63c31c":"# Compute the first three metrics\nmain_category = ['Apparel', 'Office', 'Drinkware',\n                 'Bags', 'Notebooks & Journals', 'Electronics']\n\nperformance_detail = product_purchased.groupby(['segment', 'product_category(clean)'],\n                                                as_index=False) \\\n                                             .agg({'product_revenue': sum,\n                                                   'product_quantity': sum,\n                                                   'product_name': 'count',\n                                                   'unique_session_id': 'nunique'})\n\nperformance_detail['avg_price(weighted)'] = (performance_detail['product_revenue']\n                                             \/ performance_detail['product_quantity'])\n\nperformance_detail['number_of_products_per_purchase'] = (performance_detail['product_name']\n                                                         \/ performance_detail['unique_session_id'])\n\nperformance_detail['quantity_per_product'] = (performance_detail['product_quantity']\n                                              \/ performance_detail['product_name'])\n\nmain_category_detail = performance_detail[performance_detail['product_category(clean)']\n                                          .isin(main_category)]\nmain_category_detail.head()","3c9e8fdd":"# Calculate the last metric, 'Category purchase ratio'\ncategory_frequency = product_purchased.groupby(['segment', 'unique_session_id'],\n                                               as_index=False) \\\n                                       [['product_category(clean)', 'product_quantity']] \\\n                                      .agg(lambda x : x.sum()\n                                           if x.dtype=='int64'\n                                           else ','.join(x))\ncategory_frequency.head()","a827ba1b":"segment_list = category_frequency.segment.unique()\nsegment_ratio = []\ndf_category = pd.DataFrame({'category': main_category})\n\nfor segment in segment_list:\n    frequency = category_frequency[category_frequency['segment'] == segment]\n    for category in main_category:\n        category_ratio = ((frequency['product_category(clean)'].str.contains(category).sum()\n                           \/ len(frequency))\n                          * 100).round(1)\n        segment_ratio.append(category_ratio)\n    df_segment_ratio = pd.DataFrame({'{0}'.format(segment): segment_ratio})\n    df_category = pd.concat([df_category, df_segment_ratio], axis=1)\n    segment_ratio = []\n    \ndf_category_melt = pd.melt(df_category,\n                           id_vars=['category'],\n                           value_vars=['Q1', 'Q2', 'Q3', 'Q4', 'outlier'],\n                           var_name='segment',\n                           value_name='purchase_ratio(%)')\ndf_category_melt.head()","de9345de":"fig, ((ax1, ax2), (ax3, ax4)) = plt.subplots(2, 2, figsize=(24,12))\nfig.subplots_adjust(hspace=0.3)\n\nsns.lineplot(x='segment',\n             y='avg_price(weighted)',\n             hue='product_category(clean)',\n             hue_order=main_category,\n             data=main_category_detail,\n             ax=ax1)\n\nsns.lineplot(x='segment',\n             y='purchase_ratio(%)',\n             hue='category',\n             hue_order=main_category,\n             data=df_category_melt,\n             ax=ax2)\n\nsns.lineplot(x='segment',\n             y='number_of_products_per_purchase',\n             hue='product_category(clean)',\n             hue_order=main_category,\n             data=main_category_detail,\n             ax=ax3)\n\nsns.lineplot(x='segment',\n             y='quantity_per_product',\n             hue='product_category(clean)',\n             hue_order=main_category,\n             data=main_category_detail,\n             ax=ax4)\n\nax1.set_title('Average Category Price by Segment',\n              fontsize=14)\nax2.set_title('Category Purchase Ratio by Segment',\n              fontsize=14)\nax3.set_title('Number of Products per Purchase',\n              fontsize=14)\nax4.set_title('Quantity per Product',\n              fontsize=14);","86a04b46":"# Query number of visits and period based on visitor id and purchase record\nquery = \"\"\"\n  WITH us_april AS (\n      SELECT\n          fullVisitorId AS user_id,\n          visitId AS visit_id,\n          TIMESTAMP_SECONDS(visitStartTime) AS visit_time,\n          CASE\n            WHEN totals.transactions >= 1 THEN 1\n            ELSE 0\n          END AS transaction,\n          totals.visits AS visit,\n          trafficSource.medium AS medium,\n          trafficSource.source AS source,\n          IFNULL(totals.totalTransactionRevenue, 0)\/1e6 AS session_revenue\n      FROM\n          `bigquery-public-data.google_analytics_sample.ga_sessions_*`\n      WHERE\n          _TABLE_SUFFIX BETWEEN '20170401' AND '20170430'\n          AND geoNetwork.country = 'United States')\n\n  SELECT\n      user_id,\n      prev_purchase_record,\n      ARRAY_AGG(visit_id) AS visit_id,\n      ARRAY_AGG(visit_time) AS visit_time,\n      STRING_AGG(medium, \" > \") AS medium_path,\n      SUM(visit) AS total_visits,\n      TIMESTAMP_DIFF(MAX(visit_time), MIN(visit_time), DAY) AS period_day,\n      SUM(transaction) AS conversion,\n      MAX(session_revenue) AS total_revenue\n  FROM\n      (SELECT\n         *,\n         IFNULL(\n           SUM(transaction) OVER (\n             PARTITION BY user_id\n             ORDER BY visit_time\n             ROWS BETWEEN UNBOUNDED PRECEDING AND 1 PRECEDING)\n         , 0) AS prev_purchase_record\n       FROM\n          us_april)\n  GROUP BY\n      1, 2\n\"\"\"\n\nvisit_behavior = google_analytics.query_to_pandas_safe(query)\nprint(visit_behavior.shape)\nvisit_behavior.head(3)","5085407b":"whole_traffic = visit_behavior.groupby(['total_visits', 'period_day']) \\\n                              .user_id \\\n                              .count() \\\n                              .unstack(1, fill_value=0)\n\n# Extract conversion\nconversion = visit_behavior[visit_behavior['conversion'] == 1]\nconversion_purchase = conversion.groupby(['total_visits', 'period_day']) \\\n                                .user_id \\\n                                .count() \\\n                                .unstack(1, fill_value=0)\n\nconversion_revenue = conversion.groupby(['total_visits', 'period_day']) \\\n                               .total_revenue \\\n                               .sum() \\\n                               .unstack(1, fill_value=0)\n\nwhole_traffic.head()","aaed602c":"# Plot behavior of the whole traffic\nfigure, ax = plt.subplots(figsize=(20,6))\nax.set_title('Visit Behavior - Whole Traffic',\n              fontsize=14)\n\nsns.heatmap(whole_traffic,\n            cmap=\"Blues\",\n            ax=ax)\n\n# Plot behavior of conversion \nfigure, (ax1, ax2) = plt.subplots(1, 2, figsize=(20,6))\nax1.set_title('Visit Behavior - Conversion (Purchase)',\n              fontsize=14)\nax2.set_title('Visit Behavior - Conversion (Revenue)',\n              fontsize=14)\n\nsns.heatmap(conversion_purchase,\n            cmap=\"Blues\",\n            ax=ax1)\nsns.heatmap(conversion_revenue,\n            cmap=\"Blues\",\n            ax=ax2);","e16d7893":"# Unnest visit_id\nvisitId_unnest = pd.DataFrame({'visit_id': np.concatenate(visit_behavior.visit_id.values)},\n                               visit_behavior.index.repeat(visit_behavior.visit_id.str.len()))\n# Unnest visit_time\nvisitTime_unnest = pd.DataFrame({'visit_time': np.concatenate(visit_behavior.visit_time.values)}, visit_behavior.index.repeat(visit_behavior.visit_time.str.len()))\n\nbehavior_unnest = pd.concat([visitId_unnest, visitTime_unnest], axis=1, join='inner') \\\n                    .join(visit_behavior.drop(['visit_id','visit_time'], axis=1), how='left') \\\n                    .reindex(columns=visit_behavior.columns)\n\nprint(behavior_unnest.shape)\nbehavior_unnest.head()","ddf40cf6":"# Extract data of 'type A'\nvisit = (behavior_unnest.total_visits == 1)\nperiod = (behavior_unnest.period_day == 0)\n\ntypeA = behavior_unnest[visit & period].copy()\nprint(typeA.shape)\ntypeA.head(3)","8f90da13":"fig, ((ax1, ax2), (ax3, ax4)) = plt.subplots(2, 2, figsize=(24,12))\nfig.subplots_adjust(hspace=0.3)\n\ntypeA_conversion = typeA[typeA.conversion == 1]\n\nsns.countplot(x='medium_path',\n              data=typeA,\n              order=typeA.medium_path.value_counts().index,\n              palette=\"Set2\",\n              ax=ax1)\nsns.countplot(x='medium_path',\n              data=typeA_conversion,\n              order=typeA.medium_path.value_counts().index,\n              palette=\"Set2\",\n              ax=ax2)\nsns.barplot(x='medium_path',\n            y='total_revenue',\n            data=typeA_conversion,\n            order=typeA.medium_path.value_counts().index,\n            palette=\"Set2\",\n            estimator=sum,\n            ci=None,\n            ax=ax3)\nsns.barplot(x='medium_path',\n            y='total_revenue',\n            data=typeA_conversion,\n            order=typeA.medium_path.value_counts().index,\n            palette=\"Set2\",\n            ax=ax4)\n\nax1.set_title('Visits by Medium',\n              fontsize=14)\nax2.set_title('Total Purchases by Medium',\n              fontsize=14)\nax3.set_title('Total Revenue by Medium',\n              fontsize=14)\nax4.set_title('Average Revenue by Medium',\n              fontsize=14);","3f194012":"# Query key actions of the entire sessions of April 2017 in the US\nquery = \"\"\"\n  SELECT\n    CONCAT(fullVisitorId, CAST(visitId AS STRING)) AS unique_session_id,\n    device.deviceCategory AS device_category,\n    trafficSource.medium,\n    IFNULL(totals.bounces, 0) AS bounce,\n    CAST(hits.eCommerceAction.action_type AS INT64) AS action,\n    CASE hits.eCommerceAction.action_type\n      WHEN '0' THEN 'visit'\n      WHEN '1' THEN 'product_list'\n      WHEN '2' THEN 'product_detail'\n      WHEN '3' THEN 'add_to_cart'\n      WHEN '4' THEN 'remove_from_cart'\n      WHEN '5' THEN 'checkout'\n      WHEN '6' THEN 'order_complete'\n      WHEN '7' THEN 'refund'\n      WHEN '8' THEN 'checkout_options'\n    END AS action_desc\n  FROM\n    `bigquery-public-data.google_analytics_sample.ga_sessions_*`\n    , UNNEST(hits) AS hits\n  WHERE\n    _TABLE_SUFFIX BETWEEN '20170401' AND '20170430'\n    AND geoNetwork.country = 'United States'\n\"\"\"\n\nsite_action = google_analytics.query_to_pandas_safe(query)\nprint(site_action.shape)\nsite_action.head(3)","26251be8":"# Remove rows with duplicate 'user id' and 'action'\nsite_action = site_action.drop_duplicates(subset=['unique_session_id', 'action'])\nsite_action.shape","5064029a":"# Create a key column in 'typeA'\ntypeA.visit_id = typeA.visit_id.astype(str)\n \ntypeA['unique_session_id'] = typeA['user_id'] + typeA['visit_id']\nprint(typeA.shape)\ntypeA.head(3)","6ba8011b":"typeA_action = pd.merge(typeA,\n                        site_action,\n                        how='inner',\n                        on='unique_session_id')\nprint(typeA_action.shape)\ntypeA_action.head(3)","59080239":"typeA_action_none = typeA_action[typeA_action['medium'] == '(none)']\n\nfunnel = pd.pivot_table(typeA_action_none,\n                        index='action_desc',\n                        values='unique_session_id',\n                        aggfunc='count')\n\n# A few sessions do not start their actions from zero ('visit')\n# Thus we need to adjust total number of visits\nfunnel.loc['visit'] = len(typeA_action_none.groupby('unique_session_id'))\nfunnel.loc['non_bounce'] = (len(typeA_action_none.groupby('unique_session_id'))\n                            - len(typeA_action_none[typeA_action_none['bounce'] == 1]))\n    \nfunnel_index = ['visit', 'non_bounce', 'product_list',\n                'product_detail', 'add_to_cart',\n                'checkout', 'order_complete']\n\nfunnel = funnel.reindex(funnel_index)\nfunnel","776954fb":"# Plot the funnel\nfig, ax = plt.subplots(figsize=(14,6))\n\nsns.barplot(x=funnel.index,\n            y='unique_session_id',\n            data=funnel,\n            palette=\"Blues\",\n            ax=ax)\n\nax.set_title('Funnel: TypeA - (none)',\n             fontsize=14);","26125fc2":"funnel['conversion_rate(%)'] = ((funnel\n                                 \/ funnel.shift(1))\n                                 * 100).round(1)\nfunnel['ratio(%)'] = ((funnel.unique_session_id\n                       \/ funnel.unique_session_id.max())\n                       * 100).round(1)\nfunnel.T","0a966acf":"funnel_device = pd.pivot_table(typeA_action_none,\n                               index=['action_desc', 'device_category'],\n                               values='unique_session_id',\n                               aggfunc='count')\nfunnel_device.loc['visit']","93541ca4":" # Adjust number of visits\nvisit = typeA_action_none.groupby(['unique_session_id', 'device_category']) \\\n                         .visit_id \\\n                         .count() \\\n                         .unstack(1, fill_value=0)\n\nvisit = visit.applymap(lambda x: 1 if x >=1 else 0) \\\n             .sum() \\\n             .values\n\ntuples= [('visit', 'desktop'), ('visit', 'mobile'), ('visit', 'tablet')]\nindex = pd.MultiIndex.from_tuples(tuples, names=['action_desc', 'device_category'])\n\nvisit = pd.Series(visit, index=index) \\\n          .to_frame() \\\n          .rename(columns={0: 'unique_session_id'})\n\nfunnel_device.loc['visit'] = visit\nfunnel_device.loc['visit']","5f2a1951":"# Add 'non_bounce' stage\nbounce = typeA_action_none[typeA_action_none['bounce'] == 1] \\\n                          .groupby(['unique_session_id', 'device_category']) \\\n                          .visit_id \\\n                          .count() \\\n                          .unstack(1, fill_value=0)\n\nbounce = bounce.sum().values\ntuples = [('non_bounce', 'desktop'), ('non_bounce', 'mobile'), ('non_bounce', 'tablet')]\nindex = pd.MultiIndex.from_tuples(tuples, names=['action_desc', 'device_category'])\n\nbounce = pd.Series(bounce, index=index) \\\n           .to_frame() \\\n           .rename(columns={0: 'unique_session_id'})\n\nnon_bounce = funnel_device.loc['visit'] - bounce\nfunnel_device = pd.concat([funnel_device, non_bounce])\nfunnel_device.head(6)","3abd5ad6":"# Plot the funnel by device category\nfunnel_device_index = ['visit', 'non_bounce', 'product_list',\n                       'product_detail', 'add_to_cart',\n                       'checkout', 'order_complete']\n\nfunnel_device_plot = funnel_device.unstack() \\\n                                  .reindex(funnel_device_index) \\\n                                  .stack() \\\n                                  .reset_index()\n\nfig, ax = plt.subplots(figsize=(14,6))\n\nsns.barplot(x='action_desc',\n            y='unique_session_id',\n            hue='device_category',\n            data=funnel_device_plot,\n            palette='Set2',\n            ax=ax)\n\nax.set_title('Funnel: TypeA - (none)',\n             fontsize=14);","84146d9e":"funnel_index = ['visit', 'non_bounce', 'product_list',\n                'product_detail', 'add_to_cart',\n                'checkout', 'order_complete']\n\nfunnel_device_table = funnel_device.unstack() \\\n                                   .reindex(funnel_index)\n\nfor device in ['desktop', 'mobile', 'tablet']:\n    funnel_device_table[('unique_session_id', '{0}_ratio(%)'.format(device))] = ((funnel_device_table[('unique_session_id', device)] \/ funnel_device_table[('unique_session_id', device)].max()) * 100).round(1)\n    funnel_device_table[('unique_session_id', '{0}_cvr(%)'.format(device))] = ((funnel_device_table[('unique_session_id', device)] \/ funnel_device_table[('unique_session_id', device)].shift(1)) * 100).round(1)\n\ncols_order = funnel_device_table.columns \\\n                                .levels[1] \\\n                                .sort_values()\n\nfunnel_device_table = funnel_device_table.reindex(columns=cols_order, level=1)\nfunnel_device_table.T","a7cbef2a":"# Query time spent on site\/page and page info by session\nquery = \"\"\"\n  SELECT\n      CONCAT(fullVisitorId, CAST(visitId AS STRING)) AS unique_session_id,\n      totals.timeOnSite,\n      hits.time\/1000 AS hitTime_sec,\n      LAST_VALUE(hits.time\/1000) OVER (\n        PARTITION BY CONCAT(fullVisitorId, CAST(visitId AS STRING))\n        ORDER BY hits.time\/1000 \n        ROWS BETWEEN CURRENT ROW AND 1 FOLLOWING\n        ) - (hits.time\/1000) AS stayingTime_sec,\n      hits.page.pageTitle AS page_title,\n      hits.page.pagePath AS page_path\n  FROM\n      `bigquery-public-data.google_analytics_sample.ga_sessions_*`\n      , UNNEST(hits) AS hits\n  WHERE\n      _TABLE_SUFFIX BETWEEN '20170401' AND '20170430'\n      AND geoNetwork.country = 'United States'\n      AND hits.type = 'PAGE'\n\"\"\"\n\nengagement = google_analytics.query_to_pandas_safe(query)\nprint(engagement.shape)\nengagement.head(3)","880b0957":"# Bring the dataframe containing key actions of typeA from (none)\ntypeA_action_none = typeA_action_none.sort_values(['unique_session_id', 'action'],\n                                                  ascending=[True, False])\n\n# Leave only one row of a session with the last action\n# for computation of site engagement at each funnel stage\ntypeA_action_none_unique = typeA_action_none.drop_duplicates(subset='unique_session_id')\nprint(typeA_action_none_unique.shape)\ntypeA_action_none_unique.head(3)","8a8ef976":"# Join the above typeA dataframe to engagement\ntypeA_none_engagement = pd.merge(typeA_action_none_unique,\n                                 engagement,\n                                 how='inner',\n                                 on='unique_session_id')\nprint(typeA_none_engagement.shape)\ntypeA_none_engagement.head(3)","b703cc23":"# To clearly compare engagement of product discovery between funnel stages\n# leave out checkout pages.\ncheckout_page = ['\/yourinfo.html', '\/payment.html',\n                 '\/revieworder.html', '\/ordercompleted.html']\n\n# To make variable name simple, I will use the abbreviations below\n# A: typeA\n# N: (none)\n# E: engagement\nANE_discovery = typeA_none_engagement[~typeA_none_engagement['page_path'] \\\n                                      .isin(checkout_page)]\nANE_discovery.shape","3363c613":"# Summarize engagement of every session\nANE_discovery_summary = ANE_discovery.groupby('unique_session_id') \\\n                                     .agg({'device_category': 'first',\n                                           'prev_purchase_record': 'first',\n                                           'action_desc': 'first',\n                                           'bounce': 'first',\n                                           'conversion': 'first',\n                                           'page_path': 'count',\n                                           'stayingTime_sec': sum})\nANE_discovery_summary.head(3)","9845dc8f":"# Add a column to classify visit into bounce and non-bounced visit\nvisit = (ANE_discovery_summary['action_desc'] == 'visit')\nbounce = (ANE_discovery_summary['bounce'] == 1)\nnon_bounce = (ANE_discovery_summary['bounce'] == 0)\n\nANE_discovery_summary['action_desc(upd)'] = ANE_discovery_summary['action_desc']\nANE_discovery_summary.loc[visit & bounce, 'action_desc(upd)'] = 'bounce'\nANE_discovery_summary.loc[visit & non_bounce, 'action_desc(upd)'] = 'non_bounce'\n\nANE_discovery_summary.head(3)","dbe74d6d":"# Plot site engagement according to funnel stage\nfig, (ax1, ax2) = plt.subplots(1, 2, figsize=(24,6))\nfig.subplots_adjust(wspace=0.2)\n\nfunnel_stage = ['bounce', 'non_bounce', 'product_detail',\n                'add_to_cart', 'remove_from_cart',\n                'checkout', 'order_complete']\n\ntime_below_3500 = ANE_discovery_summary[ANE_discovery_summary['stayingTime_sec'] < 3500]\n\nsns.boxplot(x='action_desc(upd)',\n            y='stayingTime_sec',\n            data=time_below_3500,\n            order=funnel_stage,\n            ax=ax1)\n\nsns.boxplot(x='action_desc(upd)',\n            y='page_path',\n            data=time_below_3500,\n            order=funnel_stage,\n            ax=ax2)\n\nax1.set_title('Time Spent in Product Discovery by Funnel Stage',\n              fontsize=14)\nax2.set_title('Pageviews in Product Discovery by Funnel Stage',\n              fontsize=14);","b2ded17e":"# Plot the engagement by device category\nfig, (ax1, ax2) = plt.subplots(1, 2, figsize=(24,6))\nfig.subplots_adjust(wspace=0.2)\n\nfunnel_stage = ['bounce', 'non_bounce', 'product_detail',\n                'add_to_cart', 'remove_from_cart',\n                'checkout', 'order_complete']\n\nsns.boxplot(x='action_desc(upd)',\n            y='stayingTime_sec',\n            hue='device_category',\n            data=time_below_3500,\n            order=funnel_stage,\n            ax=ax1)\n\nsns.boxplot(x='action_desc(upd)',\n            y='page_path',\n            hue='device_category',\n            data=time_below_3500,\n            order=funnel_stage,\n            ax=ax2)\n\nax1.set_title('Time Spent in Product Discovery by Funnel Stage',\n              fontsize=14)\nax2.set_title('Pageviews in Product Discovery by Funnel Stage',\n              fontsize=14);","e6fa11c0":"# Extract non-bounced visits\nvisit = (ANE_discovery['action_desc'] == 'visit')\nnon_bounce = (ANE_discovery['bounce'] == 0)\n\nANE_discovery_nonbounce = ANE_discovery[visit & non_bounce]\nANE_discovery_nonbounce.head(3)","62889c90":"# Add a column indicating page sequence\nANE_discovery_nonbounce = ANE_discovery_nonbounce \\\n                           .sort_values(['user_id', 'prev_purchase_record',\n                                         'visit_time', 'hitTime_sec'],\n                                        ascending=[True, True, True, True])\n\nANE_discovery_nonbounce['page_sequence'] = ANE_discovery_nonbounce \\\n                                            .groupby(['user_id', 'prev_purchase_record',\n                                                      'visit_time']) \\\n                                            .cumcount() + 1\n\nANE_discovery_nonbounce[['unique_session_id', 'page_path', 'page_sequence']].head(10)","7dda4054":"# Check out median and upper quartile of pageviews\ndef Q3(x):\n    return x.quantile(0.75)\n\nANE_discovery_summary.groupby(['action_desc(upd)', 'device_category']) \\\n                     .page_path \\\n                     .agg([np.median, Q3]) \\\n                     .unstack() \\\n                     .reindex(funnel_stage)","f1e05b61":"# Create a list of the upper quartile\nnonbounce_pageviews = ANE_discovery_nonbounce.groupby(['unique_session_id']) \\\n                                             .page_sequence \\\n                                             .max().to_frame()\n\npageviews_75p = list(nonbounce_pageviews[nonbounce_pageviews['page_sequence'] <= 5].index)\n\n# Extract non-bounced visits of the upper quartile\nANE_nonbounce_pageviews_75p = ANE_discovery_nonbounce[ANE_discovery_nonbounce['unique_session_id'].isin(pageviews_75p)]\n\n# List the top 10 frequent page sequences\nnonbounce_75p_pageSequence = ANE_nonbounce_pageviews_75p.groupby(['unique_session_id']) \\\n                                                        .page_path \\\n                                                        .agg(' > '.join) \\\n                                                        .value_counts() \\\n                                                        .to_frame()\n\nnonbounce_75p_pageSequence['ratio(%)'] = ((nonbounce_75p_pageSequence\n                                          \/ nonbounce_75p_pageSequence.sum())\n                                          * 100).round(1)\nnonbounce_75p_pageSequence.head(10)","2ebe99b8":"nonbounce_75p_page = ANE_nonbounce_pageviews_75p['page_path'].value_counts() \\\n                                                             .to_frame()\n\nnonbounce_75p_page['ratio(%)'] = ((nonbounce_75p_page\n                                  \/ nonbounce_75p_page.sum())\n                                  * 100).round(1)\nnonbounce_75p_page.head(10)","2d0231c6":"_\\* The original product price is replaced by value of 'product revenue' divided by 'product quantity' due to a bit of difference between product of price(hits.product.productPrice) and quantity(hits.product.productQuantity) and revenue(hits.product.productRevenue)._","cf35ca78":"#### Preprocessing","1ca70185":"In consideration of acquisition channel '(none)', there might be three types of behavior.\n+ In regard to \u2018view order\u2019 pages on both lists, it seems visitors may come to the site for checking their order status.\n+ Staying on \u2018home\u2019 pages consecutively might be visits to see if a new product or promotion launches. Similarly visiting category pages through \u2018home\u2019 might be sessions to check new products. It is worth noting that a single product page is not in the top 10 page list and upper quartile of pageviews is five. Considering two points, the store needs to attract customer\u2019s attention at a category level.\n+ On-site search page is included in both lists. The sequence of \u2018\/home > \/asearch.html\u2019 tells us visitors may not enjoy shopping or repeat customers may directly go to product pages. In the former case, search terms can give us hints on how to improve site experience. The latter implies the site needs additional measures to attract customer's attention for upselling or cross-selling. Further, the fact that on-site search page is one of the most viewed pages means there could be visitors who fail to find what they want at once. In this case, search terms can also indicate where to improve for better user experience.","c685b36c":"Let's check the details of two outliers with over 10,000 revenues.","91e91699":"_\\* Result of_ *'TIMESTAMP_DIFF(MAX(visit_time), MIN(visit_time), DAY)'* _is rounded down. Therefore 0 means total visits happened within 24 hours and 1 means all of visits occurred within 24 to 48 hours._","f87c834c":"#### Preprocessing","f2860bfc":"While a table has 336 fields, 'description' column is empty. So instead of this schema I will employ [BigQuery documentation](https:\/\/support.google.com\/analytics\/answer\/3437719?hl=en).","e453d6f0":"#### Engagement Analysis","10c15beb":"Let's segment purchases according to the quartile of revenues.","6c56958b":"Three categories have product list view as a common weak point where visitors exited funnels most often. That means improvement of the stage can lead to the greatest impact on purchase rate.  \n\nTo find a clue about how to plug the leak, let's take a look at site engagement.","c8b7b0f7":"1. Quantity per product verifies that the store has two types of customer, individual and business (or group buying). It appears that the first three quartiles are individuals and Outlier is business customers. Q4 seems a mixture of individual and business.\n  + Through quantity per product of Apparel, we can see Q4 has individuals. On the other hand quantity of Office implies Q4 has business customers, but it\u2019s not certain due to relatively high quantity of Q3. However, taking into account the purchase ratio of Office of individuals (Q1, Q2 and Q3), quantity of Q4 can be seen as the result of mean of two types of customers.\n  + For Outlier, quantities of Apparel and Electronics are less than the rest of categories. But considering increases in number of products, these categories can be collective purchases as well.\n2. Purchase ratio indicates popularity among segments.\n  + Apparel is the most popular category with individuals. The purchase ratios of four quartiles except outlier range between 60 to 80 percent. In addition, the upper quartile buys more number of products.\n  + Office and Drinkware are popular with both types of customers.\n  + Bag and Electronics are favored categories of group buying. Also it seems that more paying individuals buy these categories.\n  + Notebooks & Journals is in demand for collective purchases.","eb5192eb":"### Acquisition Channel Performance","8ede322a":"Two purchases were made by the same buyer. Although the outliers may be an untapped market, they can distort central tendency of customer spending and product performance. So I will exclude these purchases from the following analysis.  \nAlso revenue growth in April 2017 might come from the outliers rather than seasonality.","74d1c344":"## Objectives\n---\nIn this kernel I am exploring two aspects of ecommerce, what customers buy and how they behave on the site. To answer these questions I will cover three subjects as follows.  \n1. Global Revenue Overview\n2. Purchase Analysis\n3. Customer Journey","57217b3e":"To get a better grasp of customers, I will analyze four components of revenue with six categories mentioned above.\n+ Average category product price\n+ Number of products per purchase\n+ Quantity per product\n+ Category purchase ratio","a1e7ce72":"## 3. Customer Journey\n---\nLet's switch our focus to customer behavior on the website. Onsite behavior is complex. Not only visitors buy items at the first visit, but also they can look around the site multiple times through different channels until purchase. So I start off analysis from number of visits and period from visit to purchase instead of acquisition channel. After understanding visit behavior, I will delve into the most common and revenue-generating behavior type.","ad97fd3b":"In the following part, I will focus on one time visitors and call this group 'type A'.","6c3d1dca":"#### Channel Performance Analysis","849d71b0":"### Category Performance by Segment","97532131":"The United States generated most of revenue. Let's explore the U.S. market more specifically.  \n\n_\\* Three items below are not mapped. However it does not affect to understand the overview since their proportions are small._\n + _(not set) (0.05%)_\n + _Cura\u00e7ao (0.01%)_\n + _St. Lucia (0.01%)_","9d5d2b0e":"+ (none) is the largest contributor of both purchase and revenue.\n+ Though organic generated the most traffic, its revenue is about one-third of revenue of (none).\n+ Cpc and cpm produced purchases with greater revenue than organic or (none). By reviewing top-performing ads, we can check whether there is an unrecognized opportunity.","2f3186ba":"+ For Q1, Q2 and Q3, though quantity per product slightly increases, the range is between 1.2 and 2.3. It implies these segments may buy products for personal use.\n+ From Q1 to Q3, while average product price stays almost the same, number of products per purchase rises. The upper quartile can be individual customers with higher willingness to pay.\n+ Q4 and Outlier buy various kinds of products with relatively high volume. They might be small group buying or business purchase.","3d8abab7":"Only 'Google Women's V-Neck Tee Charcoal' does not have its category. As we can see the item is a t-shirt, I will categorize it as 'Apparel'.","7b09bfe7":"I will narrow down the scope of following analysis to April 2017 when monthly revenue reached its peak.","7797070b":"### Site Engagement by Funnel Stage","1d426a8d":"Next let's find out what categories each segment mainly buys.","69fb1222":"__'${productitem.product.origCatName}'__ needs to be processed to evaluate category performance.","ed8cea25":"In order to understand site behavior more deeply, next part addresses funnel analysis of traffic from (none) channel.","56c367f8":"## 1. Global Revenue by Country (Aug 2016 - Jul 2017)\n---\nFirst let's take an overview of geographical revenue distribution and choose a target market for an in-depth analysis.","febbd457":"### Funnel Analysis of Traffic from (none)","9c732322":"+ Apparel, Office and Drinkware are the top three most revenue-generating across all segments. It seems that customers buy sort of necessities on the store.\n+ Revenues of Q1, Q2 and Q3 are concentrated on Apparel while Q4 and Outlier relatively spread out to Office and Drinkware.\n+ Apart from the above three categories, Bags stands out as a contributor to Q3, Q4 and Outlier.\n+ Notebooks & Journals and Electronics account for eight percent of revenue Outlier respectively.","c08de708":"+ The most common behavior is one time visit in all aspects of traffic, purchase and revenue.\n+ Most of purchases were occurred from traffic with less than four visits within 24 hours.\n+ A few behavior types are small in purchase, but large in revenue. Again these outliers might be an untapped opportunity.","01bc199b":"#### Funnel Analysis","eeb854aa":"Compute three factors affecting purchase revenue.\n+ Average product price\n+ Number of products per purchase\n+ Quantity per product","c6675a10":"#### Preprocessing","54df0aeb":"## 2. Purchase Analysis\n---\nThis section covers what customers buy. To figure it out, I will segment purchases by revenue size and look into characteristics. Then I will focus on what categories are the most popular for each segment.","b988dea0":"#### Preprocessing\nFirst let's deal with uncategorized products.","b2fd94e2":"#### Preprocessing\nDataframe 'visit_behavior' contains data based on user and previous purchase record; visit data of users with multiple visits is stored in nested form. To utilize visit data, we need to unnest the data.  \n\n_\\* Although unnesting is unnecessary for Type A (just one visit), I will do the processing in consideration of dealing with multiple visits._","54ba732f":"## Settings\n---","e6be707b":"### Page Sequence\nThe last part covers page path of non-bounced visits. The store lost its visitors most often at non_bounce stage. By looking over the most frequent page sequence and most visited page, I will try to get a sense of on-site behavior.","ee4fb294":"Conversion rate from non-bounced visit to product list view is the lowest. Let's check out if a difference exists among device category.  \n\n_\\* Product detail of Google Merchandise store has only \u2018add to cart\u2019 button; it does not have \u2018buy now\u2019 at the moment. That means each stage in funnel from product detail to checkout is necessary to move forward to the next. Therefore the conversion rate of \u2018add to cart\u2019 is not overestimated._","f76a0961":"### Purchase Segmentation","5ab75e59":"### Visit Behavior","72e6dac1":"#### Category Performance by Segment","65a0d1e0":"## Loading Datasets\n---","98a02e16":"Engagement of three device categories is quite similar on 'non_bounce' stage. So I will address page path of non-bounced visits as a whole.","8299f965":"#### Top 10 Most Frequent Page Sequences of Non-bounced Visits (75th percentile of pageviews)","806995a6":"Now let's look into category performance by segment.","f3b85934":"Join 'typeA' to 'site_action'","6bd1c1ee":"Visitors on a deeper stage spent more time and viewed more pages. Especially the difference is clear between stages from non-bounced visit to add to cart. Let's find out whether device category affects engagement again.","604d5bb9":"#### Top 10 Most Viewed Pages of Non-bounced Visits (75th percentile of pageviews)"}}