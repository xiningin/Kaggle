{"cell_type":{"0bbc6a4a":"code","d7938ff3":"code","63db49af":"code","cd20a5e1":"code","1c5d8454":"code","08b356b3":"code","bf4a1a98":"code","da82d4d2":"code","02f5dfe7":"code","074d8d30":"code","e5d579b2":"code","501d601b":"code","bccc29fb":"code","69344ae0":"code","05f6d1a7":"code","ba79bae5":"code","e238c383":"code","75091593":"code","0ac381a9":"code","64a5ea97":"code","ef40fed7":"code","87221237":"code","38b5b358":"code","2a9117da":"code","9bb18049":"code","75c70c0a":"code","39216ab0":"code","9158dde2":"code","5fa7c1aa":"code","4222e2a0":"code","9f794ca5":"code","ed45f240":"code","ec2cc903":"code","9aa82873":"code","c05736fd":"code","84631575":"code","411ffcfd":"code","72bc503e":"code","5dc120de":"code","b3512726":"code","16e1dea9":"markdown","1c911e48":"markdown","80acb1d9":"markdown","eda5f614":"markdown","cfcdf3e9":"markdown","9e6db8a4":"markdown","cfb73c0a":"markdown","36bb3dff":"markdown","7afdc8c9":"markdown"},"source":{"0bbc6a4a":"import pandas as pd\nimport numpy as np","d7938ff3":"from sklearn.ensemble import RandomForestClassifier\nfrom sklearn.metrics import accuracy_score\nfrom sklearn.model_selection import train_test_split","63db49af":"df= pd.read_csv('..\/input\/crvtest\/crv.csv')\ndf.head()","cd20a5e1":"df['CARAVAN'].value_counts()","1c5d8454":"#Module for resamplingPython\nfrom sklearn.utils import resample","08b356b3":"# Separate majority and minority classes\ndf_majority = df[df.CARAVAN==0]\ndf_minority = df[df.CARAVAN==1]\n \n","bf4a1a98":"# Upsample minority class\ndf_minority_upsampled = resample(df_minority, \n                                 replace=True,     # sample with replacement\n                                 n_samples=9236,    # to match majority class\n                                 random_state=2) # reproducible results\n \n","da82d4d2":"# Combine majority class with upsampled minority class\ndf_upsampled = pd.concat([df_majority, df_minority_upsampled])\n ","02f5dfe7":"# Display new class counts\ndf_upsampled.CARAVAN.value_counts()\n","074d8d30":"X_train, X_test, y_train, y_test = train_test_split(df_upsampled.drop(['ORIGIN','CARAVAN'],axis='columns'),df_upsampled.CARAVAN, test_size=0.2)","e5d579b2":"X_train.nunique() ","501d601b":"coltypes = (X_train.nunique() < 5)  \ncoltypes   ","bccc29fb":"cat_cols = coltypes[coltypes==True].index.tolist()\nnum_cols = coltypes[coltypes==False].index.tolist()","69344ae0":"from sklearn.preprocessing import OneHotEncoder\nfrom sklearn.preprocessing import StandardScaler","05f6d1a7":"from sklearn.pipeline import Pipeline\nfrom sklearn.compose import ColumnTransformer","ba79bae5":"ct= ColumnTransformer([('abc', StandardScaler(),num_cols),('cde', OneHotEncoder(handle_unknown='ignore'),cat_cols) ], remainder = 'passthrough')","e238c383":"ct.fit(X_train,y_train)","75091593":"from sklearn.ensemble import RandomForestClassifier as rf\npipe = Pipeline([ ('ct',ct), ('rf', rf() )])","0ac381a9":"# Train model\npipe.fit(X_train,y_train)","64a5ea97":"# Predict on training set\npred_y1 = pipe.predict(X_test)","ef40fed7":"# Is our model still predicting just one class?\nprint( np.unique( pred_y1 ) )\n# [0 1]","87221237":"# How's our accuracy?\nprint( accuracy_score(y_test, pred_y1) )","38b5b358":"prob_y1 = pipe.predict_proba(X)","2a9117da":"prob_y1 = [p[1] for p in prob_y1]","9bb18049":"print( roc_auc_score(y, prob_y1) )","75c70c0a":"np.sum(pred_y1 == y_test)\/len(y_test)","39216ab0":"from sklearn.metrics import confusion_matrix\ncm=confusion_matrix(y_test,pred_y1)\ncm","9158dde2":"import matplotlib.pyplot as plt\nimport seaborn as sn\nplt.figure(figsize=(10,7))\nsn.heatmap(cm,annot=True)\nplt.xlabel('Predicted')\nplt.ylabel('Actual')","5fa7c1aa":"# Separate majority and minority classes\ndf_majority = df[df.CARAVAN==0]\ndf_minority = df[df.CARAVAN==1]\n \n# Downsample majority class\ndf_majority_downsampled = resample(df_majority, \n                                 replace=False,    # sample without replacement\n                                 n_samples=586,     # to match minority class\n                                 random_state=400) # reproducible results","4222e2a0":"# Combine minority class with downsampled majority class\ndf_downsampled = pd.concat([df_majority_downsampled, df_minority])","9f794ca5":"# Display new class counts\ndf_downsampled.CARAVAN.value_counts()","ed45f240":"X_train, X_test, y_train, y_test = train_test_split(df_downsampled.drop(['ORIGIN','CARAVAN'],axis='columns'),df_downsampled.CARAVAN, test_size=0.2)","ec2cc903":"ct= ColumnTransformer([('abc', StandardScaler(),num_cols),('cde', OneHotEncoder(handle_unknown='ignore'),cat_cols) ], remainder = 'passthrough')","9aa82873":"# Train model\nct.fit(X_train,y_train)","c05736fd":"pipe = Pipeline([ ('ct',ct), ('rf', rf() )])","84631575":"# Train model\npipe.fit(X_train,y_train)","411ffcfd":"# Predict on training set\npred_y2 = pipe.predict(X_test)","72bc503e":"# How's our accuracy?\nprint( accuracy_score(y_test, pred_y2) )","5dc120de":"cm=confusion_matrix(y_test,pred_y2)\ncm","b3512726":"plt.figure(figsize=(10,7))\nsn.heatmap(cm,annot=True)\nplt.xlabel('Predicted')\nplt.ylabel('Actual')","16e1dea9":"**Out of 9800 records, persons opted for CARAVAN, that is NO. 1 is only 586\nSo it is imbalanced target.**","1c911e48":"**We'll resample the minority class with replacement, setting the number of samples to match that of the majority class**","80acb1d9":"**The new DataFrame has fewer observations than the original, and the ratio of the two classes is now 1:1.**","eda5f614":"# Conclusion","cfcdf3e9":"**We applied two methods viz., **\n* 1.Up-Sample Minority and\n* 2.Down-Sample Majority \n* We got better result in Up-sample Minority method","9e6db8a4":"**Up-sampling is the process of randomly duplicating observations from the minority class in order to reinforce its signal.**","cfb73c0a":"**The new DataFrame has more observations than the original, and the ratio of the two classes is now 1:1**","36bb3dff":"# Down-sample Majority Class","7afdc8c9":"# Up-sample Minority Class"}}