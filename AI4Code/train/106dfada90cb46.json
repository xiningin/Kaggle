{"cell_type":{"d8a0bc13":"code","9aaec50c":"code","d3a25767":"code","b0726248":"code","d5228c0f":"markdown","6cca6b8d":"markdown","d1ada0d8":"markdown","41906b97":"markdown"},"source":{"d8a0bc13":"from pandas import read_csv\nfrom sklearn.model_selection import KFold\nfrom sklearn.metrics import mean_absolute_error\nfrom sklearn.preprocessing import MinMaxScaler\nfrom tensorflow.keras import Sequential\nfrom tensorflow.keras.layers import Dense","9aaec50c":"# load the dataset\npath = '..\/input\/auto-insurance\/auto-insurance.csv'\ndf = read_csv(path, header=None)\n# split into input and output columns\nX, y = df.values[:, :-1], df.values[:, -1]\n# ensure target is a 2d array\ny = y.reshape((len(y),1))\n# prepare input data\npt1 = MinMaxScaler()\npt1.fit(X)\nX = pt1.transform(X)\n# prepare target\npt2 = MinMaxScaler()\npt2.fit(y)\ny = pt2.transform(y)\n# determine the number of input features\nn_features = X.shape[1]","d3a25767":"# define model\nmodel = Sequential()\nmodel.add(Dense(10, activation='relu', kernel_initializer='he_normal', input_shape=(n_features,)))\nmodel.add(Dense(8, activation='relu', kernel_initializer='he_normal'))\nmodel.add(Dense(1))\n# compile the model\nmodel.compile(optimizer='adam', loss='mse')\n# fit the model\nmodel.fit(X, y, epochs=200, batch_size=8, verbose=0)","b0726248":"# define a row of new data\nrow = [13]\n# transform the input data\nX_new = pt1.transform([row])\n# make prediction\nyhat = model.predict(X_new)\n# invert transform on prediction\nyhat = pt2.inverse_transform(yhat)\n# report prediction\nprint('f(%s) = %.3f' % (row, yhat[0]))","d5228c0f":"### Model","6cca6b8d":"### Auto Insurance Prediction","d1ada0d8":"### Prepare Dataset","41906b97":"### Results"}}