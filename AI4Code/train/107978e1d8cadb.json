{"cell_type":{"042f2d59":"code","ae6eb4b8":"code","6f42a1a5":"code","b103c822":"code","55e1d44c":"code","b87f42f9":"code","eef0ecbd":"code","5f3c8a37":"code","45ceca2b":"code","f3267930":"code","4d444be2":"code","54b24b5d":"code","369e4cbc":"code","7905c253":"code","10f9abb8":"code","815424c1":"code","6fb5d9a1":"code","307ceb6f":"code","d302b4be":"code","1e1581b5":"code","d4946f4c":"code","66a8140f":"code","b8d3b6d2":"code","65e0baea":"code","6b2d01e6":"code","b97cfcbb":"code","a2bc7621":"code","172c27c1":"code","17a30c79":"code","3afa1194":"code","d14b4e88":"code","17dcaa41":"code","1ef5f405":"code","28d43df4":"code","5ce3d760":"code","3c7cc48c":"code","60da589d":"markdown"},"source":{"042f2d59":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport seaborn as sns\nimport matplotlib as plt\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","ae6eb4b8":"train= pd.read_csv('\/kaggle\/input\/titanic\/train.csv')\ntrain.head()\n","6f42a1a5":"train.shape","b103c822":"test=pd.read_csv('\/kaggle\/input\/titanic\/test.csv')\ntest1=pd.read_csv('\/kaggle\/input\/titanic\/test.csv')\n\ntest.head()","55e1d44c":"test.shape","b87f42f9":"train.head()\n#setting 'PassengerId' as Index\ntrain.set_index(['PassengerId'],inplace=True)\ntest.set_index(['PassengerId'],inplace=True)\ntest.head()","eef0ecbd":"train.isnull().sum()\n","5f3c8a37":"test.isnull().sum()\n","45ceca2b":"train.dtypes","f3267930":"#missing value treatment\n\n#first lets get a visual on these\nimport missingno as mn\nmn.matrix(train)","4d444be2":"mn.matrix(test)","54b24b5d":"#lets start imputing 'Age'\ntrain['Age2']=train['Age'].fillna(train.Age.median())\ntrain.head()","369e4cbc":"test['Age_test']=test['Age'].fillna(test.Age.median())\ntrain.head()\ntest.head()","7905c253":"train.isnull().sum()","10f9abb8":"test.isnull().sum()","815424c1":"#using fillna to fill 'Embarked' section values\ntrain.Embarked.value_counts()","6fb5d9a1":"#S is the dominant column\ntrain.Embarked.fillna('S',inplace=True)\ntrain.isnull().sum()","307ceb6f":"#filling 'Fare' with mean\ntest.Fare.fillna(test.Fare.mean(),inplace=True)\ntrain.isnull().sum()","d302b4be":"#'cabin' contains more than 80% missing values, so dropping that as well as 'age' from before.\ntrain.drop(['Age','Cabin'],axis=1,inplace=True)\ntest.drop(['Age','Cabin'],axis=1,inplace=True)\ntrain.isnull().sum()","1e1581b5":"test.isnull().sum()","d4946f4c":"#no more missing values, now lets handle categorical data.\n#transforming 'Sex' from object to int\ntrain['Sex']=train.Sex.apply(lambda x:0 if x=='female' else 1)\ntest['Sex']=test.Sex.apply(lambda x:0 if x=='female' else 1)\ntest.Sex.head()","66a8140f":"#removing outliers from 'Fare'\nsns.boxplot('Survived','Fare',data=train)","b8d3b6d2":"train['Fare']=train[train['Fare']<=400]\ntest['Fare']=test[test['Fare']<=400]","65e0baea":"#feature_engineering\ntrain['family_size']=train['SibSp']+train['Parch']+1 #+1 if alone\ntest['family_size']=test['SibSp']+test['Parch']+1 #+1 if alone\n\ntrain.head()","6b2d01e6":"test.head()","b97cfcbb":"#creating categories acc. to family_size\ndef family_group(size):\n    a=''\n    if(size<=1):\n        a='alone'\n    elif(size<=4):\n        a='small'\n    else:\n        a='large'\n    return a\ntrain['family_group']=train.family_size.map(family_group)\ntest['family_group']=test.family_size.map(family_group)\n\ntrain.head()","a2bc7621":"#creating categories acc. to age\ndef age_group(age):\n    a=''\n    if(age<=1):\n        a='infant'\n    elif(age<=4):\n        a='small'\n    elif(age<=14):\n        a='child'\n    elif(age<=25):\n        a='young'\n    elif(age<=40):\n        a='adult'\n    elif(age<=55):\n        a='mid-age'\n    else:\n        a='old'\n    return a\ntrain['age_group']=train.Age2.map(age_group)\ntest['age_group']=test.Age_test.map(age_group)\ntrain.age_group.value_counts()\n","172c27c1":"#creating categories acc. to fare: fare per person\ntrain['fare_per_person']=train['Fare']\/train['family_size']\ntest['fare_per_person']=test['Fare']\/test['family_size']\n\ndef fare_group(fare):\n    a=''\n    if(fare<=4):\n        a='very-low'\n    elif(fare<=10):\n        a='low'\n    elif(fare<=20):\n        a='mid'\n    elif(fare<=45):\n        a='high'\n    else:\n        a='very-high'\n    return a\ntrain['fare_group']=train.fare_per_person.map(fare_group)\ntest['fare_group']=test.fare_per_person.map(fare_group)\n\ntest.fare_group.value_counts()","17a30c79":"#creating dummy variables\ntrain=pd.get_dummies(train,columns=['Embarked','family_group','age_group','fare_group'],drop_first=True)\ntest=pd.get_dummies(test,columns=['Embarked','family_group','age_group','fare_group'],drop_first=True)\n\n#will do onehotencoding","3afa1194":"train.shape\ntest.shape","d14b4e88":"#dropping unnecessary columns\ntrain.drop(['Name','Ticket','Fare','Age2','fare_per_person','family_size'],axis=1,inplace=True)# Fare and fare-per_person are replaced by fare_group, age by age_group, family by family_group\ntest.drop(['Name','Ticket','Fare','Age_test','fare_per_person','family_size'],axis=1,inplace=True)\ntest.head()","17dcaa41":"X=train.drop('Survived',1)\ny=train['Survived']\n\n\nfrom xgboost import XGBClassifier\nxgb=XGBClassifier()\n\nfrom sklearn.model_selection import cross_val_score\nscore = cross_val_score(xgb, X, y, n_jobs=1, scoring= 'accuracy')\nprint(score)\nround(np.mean(score)*100, 2)","1ef5f405":"test.head()","28d43df4":"xgb=XGBClassifier()\nxgb.fit(X, y)","5ce3d760":"#test_data = test.drop(['PassengerId'], axis=1).copy()\nprediction = xgb.predict(test)\nprint(prediction)\nprint(len(prediction))","3c7cc48c":"submission = pd.DataFrame({\n        \"PassengerId\": test1['PassengerId'],\n        \"Survived\": prediction\n    })\n\nsubmission.to_csv('submission.csv', index=False)\n\nsubmission = pd.read_csv('submission.csv')","60da589d":"> > <a href=\".\/submission.csv\"> Download File <\/a>"}}