{"cell_type":{"3adcccef":"code","26b99f06":"code","e97b551b":"code","5f153c1e":"code","a7374e07":"code","2f06d675":"code","331b123f":"code","25451aba":"code","757fccc8":"code","1c716516":"code","6bc18316":"code","0808ab7d":"code","8a56ef44":"code","43a437a8":"code","09aed1db":"code","9f653ccc":"code","ffeac73f":"code","f820a4a6":"code","77f8af01":"code","9108cc5e":"code","ce2ea884":"code","3c84066e":"code","24be5fe0":"code","e0940ed9":"code","80174846":"code","7e707f65":"code","cc02a738":"code","b90868de":"code","1a868874":"code","6dea4fed":"code","fd718835":"code","067c8cc1":"code","a424f5d3":"markdown","426eafd5":"markdown","558eff2e":"markdown","e1162194":"markdown","2129b3a1":"markdown","f65373eb":"markdown","4677aa17":"markdown"},"source":{"3adcccef":"!pip install kaggle-environments -U > \/dev\/null\n!cp -r ..\/input\/lux-ai-2021\/* .","26b99f06":"%%writefile agent.py\nimport os\nimport time\nimport pickle\n\nimport builtins as __builtin__\n\nfrom lux.game import Game, Missions, Observation\n\nfrom make_actions import make_city_actions, make_unit_missions, make_unit_actions, make_unit_actions_supplementary\nfrom make_annotations import annotate_game_state, annotate_missions, annotate_movements, filter_cell_annotations\nfrom imitation_agent import get_imitation_action\n\ngame_state = Game()\nmissions = Missions()\n\n\ndef game_logic(game_state: Game, missions: Missions, observation: Observation, DEBUG=False):\n    if DEBUG: print = __builtin__.print\n    else: print = lambda *args: None\n\n    game_state.compute_start_time = time.time()\n    game_state.calculate_features(missions)\n    censoring = game_state.is_symmetrical()\n    state_annotations = annotate_game_state(game_state)\n    reset_missions, actions_by_cities = make_city_actions(game_state, missions, DEBUG=DEBUG)\n    if reset_missions or not game_state.player.researched_coal():\n        print(\"reset_missions\")\n        missions.reset_missions(game_state.player.research_points,\n                                game_state.convolve(game_state.coal_exist_matrix),\n                                game_state.convolve(game_state.uranium_exist_matrix))\n        game_state.calculate_features(missions)\n    actions_by_units_initial = make_unit_actions_supplementary(game_state, missions, observation, initial=True, DEBUG=DEBUG)\n    cluster_annotations_and_ejections_pre = make_unit_missions(game_state, missions, is_subsequent_plan=False, DEBUG=DEBUG)\n    # missions, pre_actions_by_units = make_unit_actions(game_state, missions, DEBUG=DEBUG)\n    missions, actions_by_units = make_unit_actions(game_state, missions, DEBUG=DEBUG)\n    cluster_annotations_and_ejections = make_unit_missions(game_state, missions, is_subsequent_plan=True, DEBUG=DEBUG)\n    actions_by_units_supplementary = make_unit_actions_supplementary(game_state, missions, observation, DEBUG=DEBUG)\n    movement_annotations = annotate_movements(game_state, actions_by_units)\n    mission_annotations = annotate_missions(game_state, missions, DEBUG=DEBUG)\n\n    print(\"actions_by_cities\", actions_by_cities)\n    print(\"actions_by_units_initial\", actions_by_units_initial)\n    # print(\"cluster_annotations_and_ejections_pre\", cluster_annotations_and_ejections_pre)\n    # print(\"pre_actions_by_units\", pre_actions_by_units)\n    print(\"cluster_annotations_and_ejections\", cluster_annotations_and_ejections)\n    print(\"mission_annotations\", mission_annotations)\n    print(\"actions_by_units\", actions_by_units)\n    print(\"actions_by_units_supplementary\", actions_by_units_supplementary)\n    print(\"state_annotations\", state_annotations)\n    print(\"movement_annotations\", movement_annotations)\n    # actions = actions_by_cities + actions_by_units_initial + pre_actions_by_units + actions_by_units + actions_by_units_supplementary\n    # actions += cluster_annotations_and_ejections + cluster_annotations_and_ejections_pre\n    # actions += mission_annotations + movement_annotations + state_annotations\n    actions = actions_by_cities + state_annotations + mission_annotations + actions_by_units_initial\n    actions += cluster_annotations_and_ejections_pre + cluster_annotations_and_ejections + actions_by_units + actions_by_units_supplementary + movement_annotations\n    actions = filter_cell_annotations(actions, game_state)\n    if censoring: actions = []\n    return actions, game_state, missions\n\n\ndef agent(observation: Observation, configuration, DEBUG=False):\n    if DEBUG: print = __builtin__.print\n    else: print = lambda *args: None\n\n    del configuration  # unused\n    global game_state, missions\n\n    if observation[\"step\"] == 0:\n        game_state = Game()\n        game_state._initialize(observation[\"updates\"])\n        game_state.player_id = observation.player\n        game_state._update(observation[\"updates\"][2:])\n        game_state.fix_iteration_order()\n    else:\n        # actually rebuilt and recomputed from scratch\n        game_state._update(observation[\"updates\"])\n\n    if not os.environ.get('GFOOTBALL_DATA_DIR', ''):  # on Kaggle compete, do not save items\n        str_step = str(observation[\"step\"]).zfill(3)\n        with open('snapshots\/observation-{}-{}.pkl'.format(str_step, game_state.player_id), 'wb') as handle:\n            pickle.dump(observation, handle, protocol=pickle.HIGHEST_PROTOCOL)\n        with open('snapshots\/game_state-{}-{}.pkl'.format(str_step, game_state.player_id), 'wb') as handle:\n            pickle.dump(game_state, handle, protocol=pickle.HIGHEST_PROTOCOL)\n        with open('snapshots\/missions-{}-{}.pkl'.format(str_step, game_state.player_id), 'wb') as handle:\n            pickle.dump(missions, handle, protocol=pickle.HIGHEST_PROTOCOL)\n\n    actions, game_state, missions = game_logic(game_state, missions, observation)\n    return actions\n","e97b551b":"%%writefile make_actions.py\n# functions executing the actions\n\nimport builtins as __builtin__\nfrom typing import Tuple, List, Set\n\nfrom lux.game import Game, Mission, Missions, Observation, cleanup_missions\nfrom lux.game_objects import Cargo, CityTile, Unit, City\nfrom lux.game_position import Position\nfrom lux.constants import Constants\nfrom lux.game_constants import GAME_CONSTANTS\nimport lux.annotate as annotate\n\nfrom heuristics import find_best_cluster\nfrom imitation_agent import get_imitation_action\n\nDIRECTIONS = Constants.DIRECTIONS\n\n\ndef make_city_actions(game_state: Game, missions: Missions, DEBUG=False) -> List[str]:\n    if DEBUG: print = __builtin__.print\n    else: print = lambda *args: None\n\n    player = game_state.player\n    cleanup_missions(game_state, missions, DEBUG=DEBUG)\n    game_state.repopulate_targets(missions)\n\n    units_cap = sum([len(x.citytiles) for x in player.cities.values()])\n    units_cap = min(80, units_cap)\n    units_cnt = len(player.units)  # current number of units\n\n    actions: List[str] = []\n    reset_missions = False\n\n    def do_research(city_tile: CityTile, annotation: str=\"\"):\n        nonlocal reset_missions\n        action = city_tile.research()\n        game_state.player.research_points += 1\n        actions.append(action)\n        if annotation:\n            actions.append(annotate.text(city_tile.pos.x, city_tile.pos.y, annotation))\n        city_tile.cooldown += 10\n\n        # reset all missions\n        if game_state.player.research_points == 50:\n            print(\"delete missions at 50 rp\")\n            reset_missions = True\n        if game_state.player.research_points == 200:\n            print(\"delete missions at 200 rp\")\n            reset_missions = True\n\n    def build_worker(city_tile: CityTile, annotation: str=\"\"):\n        nonlocal units_cnt\n\n        if tuple(city_tile.pos) in game_state.avoid_building_workers_xy_set:\n            return\n\n        action = city_tile.build_worker()\n        actions.append(action)\n        units_cnt += 1\n        game_state.citytiles_with_new_units_xy_set.add(tuple(city_tile.pos))\n        if annotation:\n            actions.append(annotate.text(city_tile.pos.x, city_tile.pos.y, annotation))\n        city_tile.cooldown += 10\n\n        # fake unit and mission to simulate targeting current position\n        # if unit limit is not reached\n        if units_cnt <= units_cap:\n            unit = Unit(game_state.player_id, 0, city_tile.cityid, city_tile.pos.x, city_tile.pos.y,\n                        cooldown=6, wood=0, coal=0, uranium=0)  # add dummy unit for targeting purposes\n            game_state.players[game_state.player_id].units.append(unit)\n            game_state.player.units_by_id[city_tile.cityid] = unit\n            mission = Mission(city_tile.cityid, city_tile.pos, details=\"born\", delays=99)\n            missions.add(mission)\n            game_state.unit_ids_with_missions_assigned_this_turn.add(city_tile.cityid)\n            print(missions)\n\n    def build_cart(city_tile: CityTile, annotation: str=\"\"):\n        nonlocal units_cnt\n        action = city_tile.build_cart()\n        actions.append(action)\n        units_cnt += 1\n        game_state.citytiles_with_new_units_xy_set.add(tuple(city_tile.pos))\n        if annotation:\n            actions.append(annotate.text(city_tile.pos.x, city_tile.pos.y, annotation))\n        city_tile.cooldown += 10\n\n    city_tiles: List[CityTile] = []\n    for city in player.cities.values():\n        for city_tile in city.citytiles:\n            city_tiles.append(city_tile)\n    if not city_tiles:\n        return False, []\n\n\n    def calculate_city_cluster_bonus(pos: Position):\n        current_leader = game_state.xy_to_resource_group_id.find(tuple(pos))\n        units_mining_on_current_cluster = game_state.resource_leader_to_locating_units[current_leader] & game_state.resource_leader_to_targeting_units[current_leader]\n        resource_size_of_current_cluster = game_state.xy_to_resource_group_id.get_point(current_leader)\n        return resource_size_of_current_cluster \/ (1+len(units_mining_on_current_cluster))\n\n\n    city_tiles.sort(key=lambda city_tile:(\n        - calculate_city_cluster_bonus(city_tile.pos),\n        - max(1, game_state.distance_from_player_units[city_tile.pos.y,city_tile.pos.x])  # max because we assume that it will leave\n        + max(0, game_state.distance_from_opponent_assets[city_tile.pos.y,city_tile.pos.x] * 3\/2),\n        + game_state.player_units_matrix[city_tile.pos.y,city_tile.pos.x],\n        - game_state.distance_from_collectable_resource[city_tile.pos.y,city_tile.pos.x],\n        - game_state.distance_from_edge[city_tile.pos.y,city_tile.pos.x],\n        city_tile.pos.x * game_state.x_order_coefficient,\n        city_tile.pos.y * game_state.y_order_coefficient\n    ),)\n\n    print(\"\".join([str((city_tile.pos.x, city_tile.pos.y,\n        - calculate_city_cluster_bonus(city_tile.pos),\n        - max(1, game_state.distance_from_player_units[city_tile.pos.y,city_tile.pos.x])  # max because we assume that it will leave\n        + max(0, game_state.distance_from_opponent_assets[city_tile.pos.y,city_tile.pos.x] \/ 2)\n        + game_state.player_units_matrix[city_tile.pos.y,city_tile.pos.x],\n        - game_state.distance_from_collectable_resource[city_tile.pos.y,city_tile.pos.x],\n        - game_state.distance_from_edge[city_tile.pos.y,city_tile.pos.x],\n        city_tile.pos.x * game_state.x_order_coefficient,\n        city_tile.pos.y * game_state.y_order_coefficient\n    ),) + \"\\n\" for city_tile in city_tiles]))\n\n    for city_tile in city_tiles:\n        if not city_tile.can_act():\n            continue\n\n        print(\"city_tile values\", -calculate_city_cluster_bonus(city_tile.pos),\n        - max(1, game_state.distance_from_player_units[city_tile.pos.y,city_tile.pos.x])  # max because we assume that it will leave\n        + game_state.distance_from_opponent_assets[city_tile.pos.y,city_tile.pos.x],\n        - game_state.distance_from_collectable_resource[city_tile.pos.y,city_tile.pos.x],\n        - game_state.distance_from_edge[city_tile.pos.y,city_tile.pos.x],\n        city_tile.pos.x * game_state.x_order_coefficient,\n        city_tile.pos.y * game_state.y_order_coefficient)\n\n        unit_limit_exceeded = (units_cnt >= units_cap)\n\n        if player.researched_uranium() and unit_limit_exceeded:\n            # you cannot build units because you have reached your limits\n            print(\"limit reached\", city_tile.cityid, tuple(city_tile.pos))\n            continue\n\n        nearest_resource_distance = game_state.distance_from_collectable_resource[city_tile.pos.y, city_tile.pos.x]\n        travel_range_emptyhanded = 1 + game_state.turns_to_night \/\/ GAME_CONSTANTS[\"PARAMETERS\"][\"UNIT_ACTION_COOLDOWN\"][\"WORKER\"]\n        resource_in_travel_range = nearest_resource_distance <= travel_range_emptyhanded\n        if game_state.player.researched_uranium():\n            resource_in_travel_range = True\n\n        cluster_leader = game_state.xy_to_resource_group_id.find(tuple(city_tile.pos))\n        cluster_unit_limit_exceeded = \\\n            game_state.xy_to_resource_group_id.get_point(tuple(city_tile.pos)) <= len(game_state.resource_leader_to_locating_units[cluster_leader])\n\n        # standard process of building workers\n        if resource_in_travel_range and not unit_limit_exceeded and not cluster_unit_limit_exceeded:\n            print(\"build_worker WA\", city_tile.cityid, city_tile.pos.x, city_tile.pos.y, nearest_resource_distance, travel_range_emptyhanded)\n            build_worker(city_tile, \"WA\")\n            continue\n\n        # allow cities to build workers even if cluster_unit_limit_exceeded\n        # because uranium is researched or scouting for advanced resources\n        # require resource_in_travel_range\n        if player.researched_uranium() or (units_cnt <= units_cap\/\/4):\n            if resource_in_travel_range:\n                # but do not build workers beside wood to conserve wood\n                if game_state.wood_side_matrix[city_tile.pos.y, city_tile.pos.x] == 0:\n                    print(\"supply workers WB\", city_tile.cityid, city_tile.pos.x, city_tile.pos.y, nearest_resource_distance, travel_range_emptyhanded)\n                    build_worker(city_tile, \"WB\")\n                    continue\n\n        # build worker and move to adjacent if there are no workers nearby\n        if nearest_resource_distance == 2 and game_state.distance_from_player_units[city_tile.pos.y, city_tile.pos.x] > 2:\n            print(\"supply workers WC\", city_tile.cityid, city_tile.pos.x, city_tile.pos.y, nearest_resource_distance, travel_range_emptyhanded)\n            build_worker(city_tile, \"WC\")\n            continue\n\n\n        if not player.researched_uranium():\n            # give up researching to allow building of units at turn 359\n            if game_state.turn < 10:\n                actions.append(annotate.text(city_tile.pos.x, city_tile.pos.y, \"NS\"))\n            elif game_state.turn < 350:\n                print(\"research RA\", tuple(city_tile.pos))\n                do_research(city_tile, \"RA\")\n                continue\n            else:\n                actions.append(annotate.text(city_tile.pos.x, city_tile.pos.y, \"NE\"))\n\n        # extend carts to fetch resource\n        if 10 < game_state.player.cities[city_tile.cityid].night_fuel_duration < 30 and game_state.is_day_time:\n            if game_state.player.cities[city_tile.cityid].citytiles.__len__() > 5:\n                if not unit_limit_exceeded:\n                    build_cart(city_tile, \"NC\")\n\n        # easter egg - build carts or research for fun when there is no resource left\n        if game_state.map_resource_count == 0 and game_state.is_day_time:\n            if not unit_limit_exceeded:\n                if game_state.player.cities[city_tile.cityid].fuel_needed_for_game < 0:\n                    print(\"research NC\", tuple(city_tile.pos))\n                    do_research(city_tile, \"RA\")\n                else:\n                    build_cart(city_tile, \"NC\")\n\n        # build workers at end of game\n        if game_state.turn == 359:\n            print(\"build_worker WE\", city_tile.cityid, city_tile.pos.x, city_tile.pos.y, nearest_resource_distance, travel_range_emptyhanded)\n            build_cart(city_tile, \"WE\")\n            continue\n\n        # otherwise don't do anything\n\n    return reset_missions, actions\n\n\ndef make_unit_missions(game_state: Game, missions: Missions, is_subsequent_plan=False, DEBUG=False) -> Missions:\n    if DEBUG: print = __builtin__.print\n    else: print = lambda *args: None\n\n    player = game_state.player\n    cleanup_missions(game_state, missions, DEBUG=DEBUG)\n    actions_ejections = []\n\n    cluster_annotations = []\n\n    # attempt to eject coal\/uranium, unit is the one ejecting\n    for unit in player.units:\n        if not is_subsequent_plan:\n            continue\n        # unit is the one ejecting\n        unit: Unit = unit\n        if not unit.can_act():\n            continue\n\n        # source unit has plenty of uranium\n        if not (unit.cargo.uranium >= 30):\n            continue\n\n        # source unit not in empty tile\n        # if tuple(unit.pos) not in game_state.convolved_collectable_tiles_xy_set:\n        #     continue\n\n        for adj_unit in player.units:\n            # adj_unit is the one being ejected\n            adj_unit: Unit = adj_unit\n            if not adj_unit.can_act():\n                continue\n\n            # source unit is not the target unit\n            if adj_unit.id == unit.id:\n                continue\n\n            # source unit is beside target unit\n            if adj_unit.pos - unit.pos != 1:\n                continue\n\n            # adjacent unit is in city tile\n            if tuple(adj_unit.pos) not in game_state.player_city_tile_xy_set:\n                continue\n\n            # adjacent unit is beside an empty tile\n            if game_state.distance_from_empty_tile[adj_unit.pos.y, adj_unit.pos.x] != 1:\n                continue\n\n            # adjacent unit is inside a city that can survive the night\n            if game_state.matrix_player_cities_nights_of_fuel_required_for_night[adj_unit.pos.y, adj_unit.pos.x] >= 0:\n                continue\n\n            # execute actions for ejection\n            action_1 = unit.transfer(adj_unit.id, unit.cargo.get_most_common_resource(), 100)\n            for direction,(dx,dy) in zip(game_state.dirs, game_state.dirs_dxdy[:-1]):\n                xx,yy = adj_unit.pos.x + dx, adj_unit.pos.y + dy\n                if (xx,yy) in game_state.empty_tile_xy_set:\n                    print(\"ejecting\", unit.id, unit.pos, adj_unit.id, adj_unit.pos, \"->\")\n                    action_2 = adj_unit.move(direction)\n                    actions_ejections.append(action_1)\n                    actions_ejections.append(action_2)\n                    actions_ejections.append(annotate.text(unit.pos.x, unit.pos.y, \"\ud83d\udfe1\", 50))\n                    unit.cargo = Cargo()\n                    adj_unit.cargo.wood += 100  # not correct, but simulated\n                    unit.cooldown += 2\n                    adj_unit.cooldown += 2\n                    game_state.player_units_matrix[adj_unit.pos.y,adj_unit.pos.x] -= 1\n                    break\n            else:\n                break\n\n           # add missions for ejection\n            print(\"plan mission ejection success\", xx, yy)\n\n            # if successful\n            if unit.id in missions:\n                print(\"delete mission because ejecting\", unit.id, unit.pos)\n                del missions[unit.id]\n            if adj_unit.id in missions:\n                print(\"delete mission because ejected\", adj_unit.id, adj_unit.pos)\n                del missions[adj_unit.id]\n            game_state.unit_ids_with_missions_assigned_this_turn.add(adj_unit.id)\n            game_state.ejected_units_set.add(adj_unit.id)\n\n            # break loop since partner for unit is found\n            if not unit.can_act():\n                break\n\n\n    # attempt to eject, unit is the one ejecting\n    for unit in player.units:\n        continue\n        # unit is the one ejecting\n        unit: Unit = unit\n        if not unit.can_act():\n            continue\n\n        if is_subsequent_plan and game_state.distance_from_opponent_assets[unit.pos.y, unit.pos.x] < 5:\n            continue\n\n        # source unit not in empty tile\n        if tuple(unit.pos) in game_state.buildable_tile_xy_set:\n            continue\n\n        # source unit has almost full resources\n        if unit.get_cargo_space_used() < 96 and unit.cargo.get_most_common_resource_count() < 40:\n            continue\n\n        print(\"considering unit\", unit.id)\n\n        for adj_unit in player.units:\n            # adj_unit is the one being ejected\n            adj_unit: Unit = adj_unit\n            if not adj_unit.can_act():\n                continue\n\n            # source unit is not the target unit\n            if adj_unit.id == unit.id:\n                continue\n\n            # source unit is not beside target unit\n            if adj_unit.pos - unit.pos != 1:\n                continue\n\n            # adjacent unit is in city tile\n            if tuple(adj_unit.pos) not in game_state.player_city_tile_xy_set:\n                continue\n\n            # adjacent unit is beside an empty tile\n            if game_state.distance_from_empty_tile[adj_unit.pos.y, adj_unit.pos.x] != 1:\n                continue\n\n            # temporarily augment night travel range\n            adj_unit.cargo.wood += unit.cargo.get_most_common_resource_count()\n            adj_unit.compute_travel_range((game_state.turns_to_night, game_state.turns_to_dawn, game_state.is_day_time),)\n            best_position, best_cell_value, cluster_annotation = find_best_cluster(game_state, adj_unit, DEBUG=DEBUG, explore=True, ref_pos=unit.pos)\n            distance_of_best = game_state.retrieve_distance(adj_unit.pos.x, adj_unit.pos.y, best_position.x, best_position.y)\n            adj_unit.cargo.wood -= unit.cargo.get_most_common_resource_count()\n            adj_unit.compute_travel_range((game_state.turns_to_night, game_state.turns_to_dawn, game_state.is_day_time),)\n\n            print(\"eligible mission ejection\", unit.id, unit.pos, best_cell_value)\n\n            # no suitable candidate found\n            if best_cell_value == [0,0,0,0]:\n                continue\n\n            # do not eject and return to the same cluster\n            if game_state.xy_to_resource_group_id.find(tuple(best_position)) == game_state.xy_to_resource_group_id.find(tuple(unit.pos)):\n                continue\n\n            # add missions for ejection\n            print(\"plan mission ejection\", adj_unit.id, adj_unit.pos, \"->\", best_position, best_cell_value)\n\n            # execute actions for ejection\n            action_1 = unit.transfer(adj_unit.id, unit.cargo.get_most_common_resource(), 100)\n            for direction,(dx,dy) in zip(game_state.dirs, game_state.dirs_dxdy[:-1]):\n                xx,yy = adj_unit.pos.x + dx, adj_unit.pos.y + dy\n                if (xx,yy) in game_state.empty_tile_xy_set:\n                    if game_state.retrieve_distance(xx, yy, best_position.x, best_position.y) > distance_of_best:\n                        continue\n                    if Position(xx,yy) - best_position > unit.pos - best_position:\n                        continue\n                    if Position(xx,yy) - best_position > adj_unit.pos - best_position:\n                        continue\n                    print(\"ejecting\", unit.id, unit.pos, adj_unit.id, adj_unit.pos, direction, \"->\", best_position)\n                    game_state.occupied_xy_set.add((xx,yy),)\n                    game_state.empty_tile_xy_set.remove((xx,yy))\n                    action_2 = adj_unit.move(direction)\n                    actions_ejections.append(action_1)\n                    actions_ejections.append(action_2)\n                    actions_ejections.append(annotate.text(unit.pos.x, unit.pos.y, \"\ud83d\udd34\", 50))\n                    unit.cargo = Cargo()\n                    adj_unit.cargo.wood += 100  # not correct, but simulated\n                    unit.cooldown += 2\n                    adj_unit.cooldown += 2\n                    game_state.player_units_matrix[adj_unit.pos.y,adj_unit.pos.x] -= 1\n                    break\n            else:\n                break\n\n           # add missions for ejection\n            print(\"plan mission ejection success\", xx, yy)\n\n            # if successful\n            if unit.id in missions:\n                print(\"delete mission because ejecting\", unit.id, unit.pos)\n                del missions[unit.id]\n            if adj_unit.id in missions:\n                print(\"delete mission because ejected\", adj_unit.id, adj_unit.pos)\n                del missions[adj_unit.id]\n            mission = Mission(adj_unit.id, best_position, delays=distance_of_best)\n            missions.add(mission)\n            game_state.unit_ids_with_missions_assigned_this_turn.add(adj_unit.id)\n            game_state.ejected_units_set.add(adj_unit.id)\n            cluster_annotations.extend(cluster_annotation)\n\n            # break loop since partner for unit is found\n            if not unit.can_act():\n                break\n\n    # main sequence\n    for unit in player.units:\n        if unit.id in game_state.unit_ids_with_missions_assigned_this_turn:\n            continue\n        # mission is planned regardless whether the unit can act\n        current_mission: Mission = missions[unit.id] if unit.id in missions else None\n        current_target = current_mission.target_position if current_mission else None\n\n        # avoid sharing the same target\n        game_state.repopulate_targets(missions)\n\n        # do not make missions from a fortress\n        if game_state.distance_from_floodfill_by_player_city[unit.pos.y, unit.pos.x] > 1:\n            # if you are carrying some wood\n            if unit.cargo.wood >= 40:\n                # assuming uranium has yet to be researched\n                if not game_state.player.researched_uranium():\n                    # allow building beside sustainable city\n                    if not game_state.preferred_buildable_tile_matrix[unit.pos.y,unit.pos.x]:\n                        print(\"no mission from fortress\", unit.id)\n                        continue\n\n        # do not make missions if you could mine uranium from a citytile that is not fueled for the night\n        if game_state.matrix_player_cities_nights_of_fuel_required_for_night[unit.pos.y, unit.pos.x] > 0 or (\n            game_state.distance_from_opponent_assets[unit.pos.y, unit.pos.x] <= 3 and\n            game_state.matrix_player_cities_nights_of_fuel_required_for_game[unit.pos.y, unit.pos.x] > 0):\n            if game_state.player.researched_uranium():\n                if game_state.convolved_uranium_exist_matrix[unit.pos.y, unit.pos.x] > 0:\n                    if tuple(unit.pos) not in game_state.citytiles_with_new_units_xy_set:\n                        if game_state.player_units_matrix[unit.pos.y, unit.pos.x] == 1:\n                            print(\"stay and mine uranium\", unit.id, unit.pos)\n                            # unless the citytile is producing new units\n                            continue\n\n        # do not make missions if you could mine coal from a citytile that is not fueled for the night\n        if game_state.matrix_player_cities_nights_of_fuel_required_for_night[unit.pos.y, unit.pos.x] > 0:\n            if game_state.player.researched_coal():\n                if game_state.convolved_coal_exist_matrix[unit.pos.y, unit.pos.x] > 0:\n                    if tuple(unit.pos) not in game_state.citytiles_with_new_units_xy_set:\n                        if game_state.player_units_matrix[unit.pos.y, unit.pos.x] == 1:\n                            print(\"stay and mine coal\", unit.id, unit.pos)\n                            # unless the citytile is producing new units\n                            continue\n\n        current_leader = game_state.xy_to_resource_group_id.find(tuple(unit.pos))\n        units_mining_on_current_cluster = game_state.resource_leader_to_locating_units[current_leader] & game_state.resource_leader_to_targeting_units[current_leader]\n        resource_size_of_current_cluster = game_state.xy_to_resource_group_id.get_point(current_leader)\n        current_cluster_load = len(units_mining_on_current_cluster) \/ (0.01+resource_size_of_current_cluster)\n\n        # if you are targeting your own cluster you are at and you have at least 60 wood and close to edge\n        targeting_current_cluster = unit.id not in missions or (unit.id in missions and \\\n                                    game_state.xy_to_resource_group_id.find(tuple(unit.pos)) == \\\n                                    game_state.xy_to_resource_group_id.find(tuple(missions.get_target_of_unit(unit.id))))\n        full_resources_on_next_turn = not ((unit.get_cargo_space_used() + game_state.resource_collection_rate[unit.pos.y, unit.pos.x] * (1 + int(unit.cooldown)) < 100\n                                           ) or (31 < game_state.turn%40 <= 37))\n\n        print(\"housing test\", unit.id, unit.pos, unit.id in missions, targeting_current_cluster, full_resources_on_next_turn)\n\n        # if far away from enemy units, attempt to send units to empty cluster\n        if game_state.distance_from_opponent_assets[unit.pos.y, unit.pos.x] > 10:\n            if not unit.can_act():\n                pass\n            elif not full_resources_on_next_turn:\n                best_position, best_cell_value, cluster_annotation = find_best_cluster(game_state, unit, DEBUG=DEBUG, require_empty_target=True)\n                distance_from_best_position = game_state.retrieve_distance(unit.pos.x, unit.pos.y, best_position.x, best_position.y)\n                if best_cell_value > [0,0,0,0]:\n                    print(\"force empty cluster\", unit.id, unit.pos, \"->\", best_position, best_cell_value)\n                    mission = Mission(unit.id, best_position, delays=distance_from_best_position)\n                    missions.add(mission)\n                    game_state.unit_ids_with_missions_assigned_this_turn.add(unit.id)\n                    cluster_annotations.extend(cluster_annotation)\n                    continue\n\n\n        # you consider building a citytile only if you are currently targeting the cluster you are in\n        if targeting_current_cluster and False:\n\n            def get_best_eligible_tile(xy_set: Set) -> Tuple[Position, int]:\n\n                best_heuristic = -999\n                nearest_position: Position = unit.pos\n                for dx,dy in game_state.dirs_dxdy[:-1]:\n                    xx,yy = unit.pos.x+dx, unit.pos.y+dy\n                    if (xx,yy) in xy_set:\n                        if (xx,yy) in game_state.player_units_xy_set and (xx,yy) != tuple(unit.pos):\n                            continue\n                        if (xx,yy) in game_state.targeted_for_building_xy_set:\n                            # we allow units to build at a tile that is targeted but not for building\n                            if not current_target:\n                                # definitely you are not the one targeting it\n                                continue\n                            if current_target and (xx,yy) != tuple(current_target):\n                                continue\n                        if unit.get_cargo_space_used() + 2*game_state.resource_collection_rate[yy, xx] >= 100:\n                            heuristic = - game_state.distance_from_opponent_assets[yy,xx] - game_state.distance_from_resource_median[yy,xx]\n                            if heuristic > best_heuristic:\n                                best_heuristic = heuristic\n                                nearest_position = Position(xx,yy)\n                if best_heuristic > -999:\n                    return True, nearest_position\n                else:\n                    return False, None\n\n\n            relocation_to_preferred = (game_state.distance_from_preferred_buildable[unit.pos.y, unit.pos.x] <= 1 and\n                                       unit.get_cargo_space_used() == 100 and 0 < game_state.turn%40 < 28 and\n                                       game_state.distance_from_opponent_assets[unit.pos.y, unit.pos.x] > 2\n                                       ) or (\n                                       game_state.distance_from_preferred_buildable[unit.pos.y, unit.pos.x] == 0 and\n                                       unit.get_cargo_space_used() == 100 and 0 < game_state.turn%40 <= 31\n                                       )\n\n            # if you can move one step to a building that can survive a night, build there\n            if relocation_to_preferred:\n                has_found, new_pos = get_best_eligible_tile(game_state.preferred_buildable_tile_xy_set)\n                if tuple(unit.pos) in game_state.preferred_buildable_tile_xy_set:\n                    has_found, new_pos = True, unit.pos\n                if has_found:\n                    print(\"relocation_to_preferred\", unit.id, unit.pos, \"->\", new_pos)\n                    mission = Mission(unit.id, new_pos, unit.build_city(), delays=2)\n                    missions.add(mission)\n                    game_state.unit_ids_with_missions_assigned_this_turn.add(unit.id)\n                    annotation = annotate.text(unit.pos.x, unit.pos.y, \"R1\")\n                    cluster_annotations.append(annotation)\n                    continue\n\n            relocation_to_probable =  (game_state.distance_from_probably_buildable[unit.pos.y, unit.pos.x] <= 1 and\n                                       unit.get_cargo_space_used() == 100 and 0 < game_state.turn%40 < 28 and\n                                       game_state.distance_from_opponent_assets[unit.pos.y, unit.pos.x] > 3 and\n                                       game_state.turn > 40 and current_cluster_load > 1\/2\n                                       ) or (\n                                       game_state.distance_from_probably_buildable[unit.pos.y, unit.pos.x] == 0 and\n                                       unit.get_cargo_space_used() == 100 and 0 < game_state.turn%40 <= 30\n                                       )\n\n            # if the cluster is crowded, consider building at a corner (which is not directly collecting resources)\n            if relocation_to_probable:\n                has_found, new_pos = get_best_eligible_tile(game_state.probably_buildable_tile_xy_set)\n                if tuple(unit.pos) in game_state.probably_buildable_tile_xy_set:\n                    has_found, new_pos = True, unit.pos\n                if has_found:\n                    print(\"relocation_to_probable\", unit.id, unit.pos, \"->\", new_pos)\n                    mission = Mission(unit.id, new_pos, unit.build_city(), delays=2)\n                    missions.add(mission)\n                    game_state.unit_ids_with_missions_assigned_this_turn.add(unit.id)\n                    annotation = annotate.text(unit.pos.x, unit.pos.y, \"R2\")\n                    cluster_annotations.append(annotation)\n                    continue\n\n            # if you will have full resources on the next turn and on buildable tile, stay and build\n            if full_resources_on_next_turn and tuple(unit.pos) in game_state.buildable_tile_xy_set:\n                if game_state.distance_from_player_citytiles[unit.pos.y, unit.pos.x] == 1 or \\\n                    game_state.distance_from_collectable_resource[unit.pos.y, unit.pos.x] == 1:\n                    print(\"stay on location\", unit.id, unit.pos)\n                    mission = Mission(unit.id, unit.pos, unit.build_city(), delays=2)\n                    missions.add(mission)\n                    game_state.unit_ids_with_missions_assigned_this_turn.add(unit.id)\n                    annotation = annotate.text(unit.pos.x, unit.pos.y, \"R3\")\n                    cluster_annotations.append(annotation)\n                    continue\n\n            if not full_resources_on_next_turn:\n                has_found, new_pos = get_best_eligible_tile(game_state.buildable_and_convolved_collectable_tile_xy_set)\n                if has_found:\n                    print(\"relocation to better one\", unit.id, unit.pos, \"->\", new_pos)\n                    mission = Mission(unit.id, new_pos, unit.build_city(), delays=2)\n                    missions.add(mission)\n                    game_state.unit_ids_with_missions_assigned_this_turn.add(unit.id)\n                    annotation = annotate.text(unit.pos.x, unit.pos.y, \"R4\")\n                    cluster_annotations.append(annotation)\n                    continue\n\n            if full_resources_on_next_turn:\n                has_found, new_pos = get_best_eligible_tile(game_state.buildable_and_convolved_collectable_tile_xy_set)\n                if has_found:\n                    print(\"build now\", unit.id, unit.pos, \"->\", new_pos)\n                    mission = Mission(unit.id, new_pos, unit.build_city(), delays=2)\n                    missions.add(mission)\n                    game_state.unit_ids_with_missions_assigned_this_turn.add(unit.id)\n                    annotation = annotate.text(unit.pos.x, unit.pos.y, \"R5\")\n                    cluster_annotations.append(annotation)\n                    continue\n\n        if unit.id in missions:\n            mission: Mission = missions[unit.id]\n            if mission.target_position == unit.pos:\n                # take action and not make missions if already at position\n                continue\n\n        if unit.id in missions:\n            # the mission will be recaluated if the unit fails to make a move after make_unit_actions\n            continue\n\n        # preemptive homing mission\n        if tuple(unit.pos) not in game_state.convolved_collectable_tiles_xy_set:\n          if unit.fuel_potential > 230:\n            # if there is a citytile nearby already\n            print(\"consider homing two\", unit.id)\n            homing_distance, homing_position = game_state.find_nearest_city_requiring_fuel(\n                unit, require_reachable=True, enforce_night=False,\n                minimum_size=3, maximum_distance=(unit.cargo.uranium + unit.cargo.coal)\/\/3, DEBUG=DEBUG)\n            if unit.pos != homing_position:\n                print(\"homing two\", unit.id, unit.pos, homing_position)\n                mission = Mission(unit.id, homing_position, details=\"homing two\", delays=homing_distance + 2)\n                missions.add(mission)\n                game_state.unit_ids_with_missions_assigned_this_turn.add(unit.id)\n                annotation = annotate.text(unit.pos.x, unit.pos.y, \"H2\")\n                cluster_annotations.append(annotation)\n                continue\n\n        if tuple(unit.pos) not in game_state.convolved_collectable_tiles_xy_set or game_state.distance_from_opponent_assets[unit.pos.y, unit.pos.x] > 2:\n          if unit.cargo.uranium > 0 and unit.cargo.get_most_common_resource() == \"uranium\" and False:\n            # if there is a citytile nearby already\n            homing_distance, homing_position = game_state.find_nearest_city_requiring_fuel(\n                unit, require_reachable=True, require_night=True, enforce_night=True,\n                minimum_size=3, maximum_distance=unit.cargo.uranium\/\/3, DEBUG=DEBUG)\n            if unit.pos != homing_position:\n                print(\"homing one\", unit.id, unit.pos, homing_position, homing_distance)\n                mission = Mission(unit.id, homing_position, details=\"homing\", delays=homing_distance + 2)\n                missions.add(mission)\n                game_state.unit_ids_with_missions_assigned_this_turn.add(unit.id)\n                annotation = annotate.text(unit.pos.x, unit.pos.y, \"H1\")\n                cluster_annotations.append(annotation)\n                continue\n\n        best_position, best_cell_value, cluster_annotation = find_best_cluster(game_state, unit, DEBUG=DEBUG)\n        print(unit.id, best_position, best_cell_value)\n        distance_from_best_position = game_state.retrieve_distance(unit.pos.x, unit.pos.y, best_position.x, best_position.y)\n        if best_cell_value > [0,0,0,0]:\n            print(\"plan mission adaptative\", unit.id, unit.pos, \"->\", best_position, best_cell_value)\n            mission = Mission(unit.id, best_position, delays=distance_from_best_position)\n            missions.add(mission)\n            game_state.unit_ids_with_missions_assigned_this_turn.add(unit.id)\n            cluster_annotations.extend(cluster_annotation)\n            continue\n\n        # homing mission\n        if unit.get_cargo_space_used() > 0:\n            homing_distance, homing_position = game_state.find_nearest_city_requiring_fuel(unit, DEBUG=DEBUG)\n            print(\"homing mission\", unit.id, unit.pos, \"->\", homing_position, homing_distance)\n            mission = Mission(unit.id, homing_position, \"\", details=\"homing\", delays=homing_distance + 2)\n            missions.add(mission)\n            game_state.unit_ids_with_missions_assigned_this_turn.add(unit.id)\n            continue\n\n    return actions_ejections + cluster_annotations\n\n\ndef make_unit_actions(game_state: Game, missions: Missions, DEBUG=False) -> Tuple[Missions, List[str]]:\n    if DEBUG: print = __builtin__.print\n    else: print = lambda *args: None\n\n    player, opponent = game_state.player, game_state.opponent\n    actions = []\n\n    units_with_mission_but_no_action = set(missions.keys())\n    prev_actions_len = -1\n\n    # repeat attempting movements for the units until no additional movements can be added\n    while prev_actions_len < len(actions):\n      prev_actions_len = len(actions)\n\n      for unit in player.units:\n        if not unit.use_rule_base:\n            continue\n        if not unit.can_act():\n            units_with_mission_but_no_action.discard(unit.id)\n            continue\n\n        # if there is no mission, continue\n        if unit.id not in missions:\n            units_with_mission_but_no_action.discard(unit.id)\n            continue\n\n        mission: Mission = missions[unit.id]\n        print(\"attempting action for\", unit.id, unit.pos, \"->\", mission.target_position)\n\n        # if the location is reached, take action\n        if unit.pos == mission.target_position:\n            units_with_mission_but_no_action.discard(unit.id)\n            print(\"location reached and make action\", unit.id, unit.pos)\n            action = mission.target_action\n\n            # do not build city at last light\n            if action and action[:5] == \"bcity\" and 30 <= game_state.turn%40 <= 31:\n                if game_state.fuel_collection_rate[unit.pos.y, unit.pos.x] < 23:\n                    print(\"do not build city at last light\", unit.id)\n                    actions.append(annotate.text(unit.pos.x, unit.pos.y, \"NB\"))\n                    del missions[unit.id]\n                    continue\n\n            if action:\n                actions.append(action)\n                unit.cooldown += 2\n            print(\"mission complete and deleted\", unit.id, unit.pos)\n            del missions[unit.id]\n            continue\n\n        # attempt to move the unit\n        direction, pos = attempt_direction_to(game_state, unit, mission.target_position,\n                                         avoid_opponent_units=(\"homing\" in mission.details),\n                                         use_exact=(\"homing\" in mission.details),\n                                         DEBUG=DEBUG)\n        if direction == \"c\":\n            continue\n\n        # if carrying full wood, and next location has abundant wood, if on buildable, build house now\n        if game_state.convolved_wood_exist_matrix[pos.y, pos.x] > 1:\n            if unit.cargo.wood == 100:\n                if unit.can_build(game_state.map):\n                    actions.append(unit.build_city())\n                    unit.cooldown += 2\n                    continue\n\n        if True:\n            units_with_mission_but_no_action.discard(unit.id)\n            action = unit.move(direction)\n            print(\"make move\", unit.id, unit.pos, direction, unit.pos.translate(direction, 1))\n            game_state.player_units_matrix[unit.pos.y,unit.pos.x] -= 1\n            actions.append(action)\n            continue\n\n    # if the unit is not able to make an action over two turns, delete the mission\n    for unit in game_state.player.units:\n        if unit.id not in missions:\n            continue\n        mission: Mission = missions[unit.id]\n        if mission.delays <= 0:\n            print(\"delete mission delay timer over\", unit.id, unit.pos, \"->\", mission.target_position)\n            del missions[unit.id]\n        elif mission.delays < 2 * (unit.pos - mission.target_position):\n            print(\"delete mission cannot reach in time\", unit.id, unit.pos, \"->\", mission.target_position)\n            del missions[unit.id]\n\n    return missions, actions\n\n\ndef make_unit_actions_supplementary(game_state: Game, missions: Missions, observation: Observation,\n                                    initial=False, DEBUG=False) -> Tuple[Missions, List[str]]:\n    if DEBUG: print = __builtin__.print\n    else: print = lambda *args: None\n\n    player, opponent = game_state.player, game_state.opponent\n    actions = []\n\n    if initial:\n      for unit in player.units:\n        if unit.can_act():\n            if not unit.use_rule_base:\n                actions_from_imitation = get_imitation_action(observation, game_state, unit, DEBUG=DEBUG,\n                                                              use_probabilistic_sort=False)\n                actions.extend(actions_from_imitation)\n\n    print(\"units without actions\", [unit.id for unit in player.units if unit.can_act()])\n\n    # probably should reduce code repetition in the following lines\n    def make_random_move_to_void(unit: Unit, annotation: str = \"\"):\n        if not unit.can_act():\n            return\n        (xxx,yyy) = (-1,-1)\n\n        # in increasing order of priority\n\n        # attempt to move\n        for direction,(dx,dy) in zip(game_state.dirs, game_state.dirs_dxdy[:-1]):\n            xx,yy = unit.pos.x + dx, unit.pos.y + dy\n            if (xx,yy) not in game_state.occupied_xy_set:\n                xxx,yyy = xx,yy\n                break\n\n        # attempt to move away from your assets\n        for direction,(dx,dy) in zip(game_state.dirs, game_state.dirs_dxdy[:-1]):\n            xx,yy = unit.pos.x + dx, unit.pos.y + dy\n            if (xx,yy) not in game_state.occupied_xy_set:\n                if game_state.distance_from_player_assets[yy,xx] > game_state.distance_from_player_assets[unit.pos.y,unit.pos.x]:\n                    xxx,yyy = xx,yy\n                    break\n\n        # attempt to move toward enemy assets\n        for direction,(dx,dy) in zip(game_state.dirs, game_state.dirs_dxdy[:-1]):\n            xx,yy = unit.pos.x + dx, unit.pos.y + dy\n            if (xx,yy) not in game_state.occupied_xy_set and (xx,yy) not in game_state.player_city_tile_xy_set:\n                if game_state.distance_from_collectable_resource[yy,xx] < game_state.distance_from_collectable_resource[unit.pos.y,unit.pos.x]:\n                    xxx,yyy = xx,yy\n                    break\n\n        # cart pave roads\n        if unit.is_cart():\n            for direction,(dx,dy) in zip(game_state.dirs, game_state.dirs_dxdy[:-1]):\n                xx,yy = unit.pos.x + dx, unit.pos.y + dy\n                if (xx,yy) not in game_state.occupied_xy_set:\n                    if game_state.road_level_matrix[yy,xx] < game_state.road_level_matrix[unit.pos.y,unit.pos.x]:\n                        xxx,yyy = xx,yy\n                        break\n\n        if (xxx,yyy) == (-1,-1):\n            return\n\n        xx,yy = xxx,yyy\n\n        if (xx,yy) not in game_state.occupied_xy_set:\n            if (xx,yy) not in game_state.player_city_tile_xy_set:\n                game_state.occupied_xy_set.add((xx,yy))\n            print(\"make_random_move_to_void\", unit.id, unit.pos)\n            action = unit.move(direction)\n            actions.append(action)\n            if annotation:\n                actions.append(annotate.text(unit.pos.x, unit.pos.y, annotation))\n            unit.cooldown += 2\n            game_state.player_units_matrix[unit.pos.y,unit.pos.x] -= 1\n\n\n    def make_random_move_to_center(unit: Unit, annotation: str = \"\"):\n        if not unit.can_act():\n            return\n        for direction,(dx,dy) in zip(game_state.dirs, game_state.dirs_dxdy[:-1]):\n            xx,yy = unit.pos.x + dx, unit.pos.y + dy\n            if (xx,yy) in game_state.player_city_tile_xy_set:\n                continue\n            if (xx,yy) not in game_state.occupied_xy_set:\n                if game_state.distance_from_preferred_median[yy,xx] < game_state.distance_from_preferred_median[unit.pos.y,unit.pos.x]:\n                    # attempt to collide together and build additional citytile\n                    break\n        else:\n            return\n\n        if (xx,yy) not in game_state.occupied_xy_set:\n            if (xx,yy) not in game_state.player_city_tile_xy_set:\n                game_state.occupied_xy_set.add((xx,yy))\n            print(\"make_random_move_to_center\", unit.id, unit.pos, direction)\n            action = unit.move(direction)\n            actions.append(action)\n            if annotation:\n                actions.append(annotate.text(unit.pos.x, unit.pos.y, annotation))\n            unit.cooldown += 2\n            game_state.player_units_matrix[unit.pos.y,unit.pos.x] -= 1\n\n\n    # probably should reduce code repetition in the following lines\n    def make_random_move_to_collectable(unit: Unit, annotation: str = \"\"):\n        if not unit.can_act():\n            return\n        for direction,(dx,dy) in zip(game_state.dirs, game_state.dirs_dxdy[:-1]):\n            xx,yy = unit.pos.x + dx, unit.pos.y + dy\n            if (xx,yy) not in game_state.occupied_xy_set:\n                if (xx,yy) in game_state.convolved_collectable_tiles_xy_set:\n                    # attempt to move away from your assets\n                    break\n        else:\n            return\n\n        if (xx,yy) not in game_state.occupied_xy_set:\n            if (xx,yy) not in game_state.player_city_tile_xy_set:\n                game_state.occupied_xy_set.add((xx,yy))\n            print(\"make_random_move_to_collectable\", unit.id, unit.pos)\n            action = unit.move(direction)\n            actions.append(action)\n            if annotation:\n                actions.append(annotate.text(unit.pos.x, unit.pos.y, annotation))\n            unit.cooldown += 2\n            game_state.player_units_matrix[unit.pos.y,unit.pos.x] -= 1\n\n\n    def make_random_move_to_city(unit: Unit, annotation: str = \"\"):\n        if not unit.can_act():\n            return\n        for direction,(dx,dy) in zip(game_state.dirs, game_state.dirs_dxdy[:-1]):\n            xx,yy = unit.pos.x + dx, unit.pos.y + dy\n            if (xx,yy) in game_state.player_city_tile_xy_set:\n                if game_state.player_units_matrix[yy,xx] < 1:\n                    if (xx,yy) in game_state.convolved_collectable_tiles_xy_set:\n                        break\n        else:\n            return\n\n        if (xx,yy) not in game_state.occupied_xy_set:\n            if (xx,yy) not in game_state.player_city_tile_xy_set:\n                game_state.occupied_xy_set.add((xx,yy))\n            print(\"make_random_move_to_city\", unit.id, unit.pos)\n            action = unit.move(direction)\n            actions.append(action)\n            if annotation:\n                actions.append(annotate.text(unit.pos.x, unit.pos.y, annotation))\n            unit.cooldown += 2\n            game_state.player_units_matrix[unit.pos.y,unit.pos.x] -= 1\n            game_state.player_units_matrix[yy,xx] += 1\n\n\n    def make_random_move_to_city_sustain(unit: Unit, annotation: str = \"\"):\n        if not unit.can_act():\n            return\n        for direction,(dx,dy) in zip(game_state.dirs, game_state.dirs_dxdy[:-1]):\n            xx,yy = unit.pos.x + dx, unit.pos.y + dy\n            if (xx,yy) not in game_state.player_city_tile_xy_set:\n                continue\n            if (xx,yy) in game_state.xy_out_of_map:\n                continue\n            citytile = game_state.map.get_cell(xx,yy).citytile\n            city = game_state.player.cities[citytile.cityid]\n            if city.fuel_needed_for_night > 0 and unit.fuel_potential >= city.fuel_needed_for_night:\n                print(\"sustain\", unit.id, unit.pos, \"->\", xx, yy)\n                action = unit.move(direction)\n                actions.append(action)\n                if annotation:\n                    actions.append(annotate.text(unit.pos.x, unit.pos.y, annotation))\n                unit.cooldown += 2\n                game_state.player_units_matrix[unit.pos.y,unit.pos.x] -= 1\n\n\n    def make_random_transfer(unit: Unit, annotation: str = \"\", limit_target = False, allowed_target_xy: set = set()):\n        if not unit.can_act():\n            return\n        if unit.get_cargo_space_used() == 0:\n            # nothing to transfer\n            return\n        for direction,(dx,dy) in zip(game_state.dirs, game_state.dirs_dxdy[:-1]):\n            xx,yy = unit.pos.x + dx, unit.pos.y + dy\n            if (xx,yy) in game_state.xy_out_of_map:\n                continue\n            if limit_target and (xx,yy) not in allowed_target_xy:\n                continue\n            adj_unit = game_state.map.get_cell(xx,yy).unit\n            if not adj_unit:\n                continue\n            if adj_unit.id not in game_state.player.units_by_id:\n                continue\n            if adj_unit.is_worker() and adj_unit.get_cargo_space_used() == 100:\n                continue\n\n            # do not transfer to a citytile that can already last for the game\n            cityid = game_state.map.get_cityid_of_cell(xx,yy)\n            if cityid:\n                city: City = game_state.player.cities[cityid]\n                if city and city.fuel_needed_for_game < 0:\n                    continue\n\n            # if you are on buildable, do not transfer to nonbuildable and noncity\n            if tuple(unit.pos) in game_state.buildable_tile_xy_set:\n                if (xx,yy) not in game_state.buildable_tile_xy_set and (xx,yy) not in game_state.player_city_tile_xy_set:\n                    continue\n\n            print(\"random transfer\", unit.id, unit.pos, \"->\", adj_unit.id, xx, yy)\n            action = unit.transfer(adj_unit.id, unit.cargo.get_most_common_resource(), 2000)\n            actions.append(action)\n            if annotation:\n                actions.append(annotate.text(unit.pos.x, unit.pos.y, annotation))\n            actions.append(annotate.line(unit.pos.x, unit.pos.y, adj_unit.pos.x, adj_unit.pos.y))\n            unit.cooldown += 2\n            break\n\n    # pump and dump\n    for unit in player.units:\n        unit: Unit = unit\n        if not unit.can_act():\n            continue\n        x,y = tuple(unit.pos)\n        if (x,y) in game_state.player_city_tile_xy_set:\n            continue\n        if (x,y) in game_state.buildable_tile_xy_set:\n            continue\n        if game_state.convolved_two_opponent_assets_matrix[y,x] < 2:\n            continue\n        if game_state.convolved_wood_exist_matrix[y,x] <= 1:\n            continue\n        make_random_transfer(unit, \"\ud83d\udfe3\", True, game_state.player_city_tile_xy_set)\n\n    if initial:\n        return actions\n\n    # if moving to a city can let it sustain the night, move into the city\n    for unit in player.units:\n        unit: Unit = unit\n        if not unit.can_act():\n            continue\n        if game_state.turn%40 < 20:\n            continue\n        if tuple(unit.pos) not in game_state.buildable_tile_xy_set or not game_state.is_day_time:\n            make_random_transfer(unit, \"\ud83d\udfe2\", True, game_state.player_city_tile_xy_set)\n        make_random_move_to_city_sustain(unit, \"\ud83d\udfe2\")\n\n\n    # no cluster rule\n    # for unit in player.units:\n    #     unit: Unit = unit\n    #     if not unit.can_act():\n    #         continue\n    #     if tuple(unit.pos) not in game_state.player_city_tile_xy_set:\n    #         continue\n    #     if game_state.player_units_matrix[unit.pos.y,unit.pos.x] > 1:\n    #         print(\"dispersing\", unit.id, unit.pos)\n    #         make_random_move_to_city(unit, \"FY\")\n    #         make_random_move_to_void(unit, \"KD\")\n\n\n    # return to resource to mine\n    # for unit in player.units:\n    #     unit: Unit = unit\n    #     if not unit.can_act():\n    #         continue\n    #     if tuple(unit.pos) in game_state.convolved_collectable_tiles_xy_set:\n    #         continue\n    #     if unit.cargo.uranium > 0:\n    #         continue\n    #     make_random_move_to_collectable(unit, \"KC\")\n\n\n    # dump it into a nearby citytile\n    for unit in player.units:\n        break\n        unit: Unit = unit\n        if not unit.can_act():\n            continue\n\n        # check for full resources\n        if unit.get_cargo_space_left() > 4:\n            continue\n        # if you are in our fortress, dump only if the wood is more than 500\n        if game_state.distance_from_floodfill_by_player_city[unit.pos.y, unit.pos.x] >= 2:\n            if game_state.wood_amount_matrix[unit.pos.y, unit.pos.x] >= 500:\n                print(\"FA make_random_move_to_city\", unit.id)\n                make_random_transfer(unit, \"FA1\", True, game_state.player_city_tile_xy_set)\n                make_random_move_to_city(unit, \"FA\")\n        # if you are in a fortress controlled by both players\n        elif game_state.distance_from_floodfill_by_either_city[unit.pos.y, unit.pos.x] >= 2:\n            print(\"FB make_random_move_to_city\", unit.id)\n            make_random_transfer(unit, \"FB1\", True, game_state.player_city_tile_xy_set)\n            make_random_move_to_city(unit, \"FB\")\n        # if you are near opponent assets and you are not on buildable tile\n        if game_state.distance_from_opponent_assets[unit.pos.y, unit.pos.x] <= 2:\n            if tuple(unit.pos) not in game_state.buildable_tile_xy_set:\n                print(\"FX make_random_move_to_city\", unit.id)\n                make_random_transfer(unit, \"FX1\", True, game_state.player_city_tile_xy_set)\n                make_random_move_to_city(unit, \"FX\")\n\n\n    # make random transfers\n    for unit in player.units:\n        unit: Unit = unit\n        if not unit.can_act():\n            continue\n        # if unit.get_cargo_space_left() == 0 and unit.is_worker() and game_state.map_resource_count < 500:\n        #     actions.append(unit.build_city())\n        #     continue\n        if unit.get_cargo_space_used() < 10:\n            continue\n        make_random_transfer(unit, \"KT\", True, game_state.buildable_tile_xy_set)\n        if tuple(unit.pos) in game_state.buildable_tile_xy_set:\n            if game_state.distance_from_collectable_resource[unit.pos.y, unit.pos.x] == 1:\n                if unit.cargo.get_most_common_resource() == \"wood\":\n                    continue\n        make_random_transfer(unit, \"KR\")\n\n\n    # no sitting duck not collecting resources\n    for unit in player.units:\n        unit: Unit = unit\n        if not unit.can_act():\n            continue\n        if tuple(unit.pos) in game_state.convolved_collectable_tiles_xy_set:\n            continue\n        if unit.fuel_potential == 0:\n            if game_state.is_day_time:\n                # suicide mission\n                make_random_move_to_void(unit, \"KS\")\n        else:\n            # move to center so as to consolidate resources\n            # make_random_move_to_center(unit, \"KP\")\n            pass\n\n\n    # make a movement within the city at night, if near the enemy\n    for unit in player.units:\n        unit: Unit = unit\n        if not unit.can_act():\n            continue\n        if tuple(unit.pos) not in game_state.player_city_tile_xy_set:\n            continue\n        if game_state.distance_from_opponent_assets[unit.pos.y, unit.pos.x] >= 3:\n            continue\n        make_random_move_to_city(unit, \"MC\")\n\n\n    return actions\n\n\ndef attempt_direction_to(game_state: Game, unit: Unit, target_pos: Position, avoid_opponent_units=False, use_exact=False, DEBUG=False) -> DIRECTIONS:\n    if DEBUG: print = __builtin__.print\n    else: print = lambda *args: None\n\n    smallest_cost = [2,2,2,2,2]\n    closest_dir = DIRECTIONS.CENTER\n    closest_pos = unit.pos\n\n    for direction in game_state.dirs:\n        newpos = unit.pos.translate(direction, 1)\n\n        cost = [0,0,0,0,0]\n\n        # do not go out of map\n        if tuple(newpos) in game_state.xy_out_of_map:\n            continue\n\n        # discourage collision among yourself\n        # discourage if new position is occupied, not your city tile and not your current position and not your enemy units\n        if tuple(newpos) in game_state.occupied_xy_set:\n            if tuple(newpos) not in game_state.player_city_tile_xy_set:\n                if tuple(newpos) not in game_state.opponent_units_xy_set:\n                    if tuple(newpos) != tuple(unit.pos):\n                        cost[0] = 3\n\n        if tuple(newpos) in game_state.opponent_units_xy_set:\n            if avoid_opponent_units:\n                cost[0] = 1\n            if tuple(newpos) not in game_state.opponent_units_moveable_xy_set:\n                cost[0] = 3\n\n        # discourage going into a city tile if you are carrying substantial wood\n        if unit.cargo.wood >= 96:\n            if tuple(newpos) in game_state.player_city_tile_xy_set:\n                cost[0] = 1\n\n        # discourage going into a city tile if you are carrying substantial wood\n        if unit.cargo.wood >= 60:\n            if tuple(newpos) in game_state.player_city_tile_xy_set:\n                cost[0] = 1\n\n        # no entering opponent citytile\n        if tuple(newpos) in game_state.opponent_city_tile_xy_set:\n            cost[0] = 4\n\n        # if targeting same cluster, discourage walking on tiles without resources\n        targeting_same_cluster = game_state.xy_to_resource_group_id.find(tuple(target_pos)) == game_state.xy_to_resource_group_id.find(tuple(unit.pos))\n        if targeting_same_cluster:\n            if tuple(newpos) not in game_state.convolved_collectable_tiles_xy_set:\n                # unless you have researched uranium or you have some resources\n                if not (game_state.player.researched_uranium_projected() or\n                        unit.get_cargo_space_used() > 0 or\n                        game_state.matrix_player_cities_nights_of_fuel_required_for_night[unit.pos.y, unit.pos.x] < 0):\n                    # unless you are very far from opponent\n                    if game_state.distance_from_opponent_assets[unit.pos.y,unit.pos.x] < 5:\n                        cost[0] = 3\n\n        # discourage going into a fueled city tile if you are carrying substantial coal and uranium\n        if unit.cargo.coal + unit.cargo.uranium >= 10:\n            if game_state.matrix_player_cities_nights_of_fuel_required_for_game[newpos.y, newpos.x] < 0:\n                if tuple(newpos) in game_state.player_city_tile_xy_set:\n                    cost[0] = 1\n\n        # path distance as main differentiator\n        path_dist = game_state.retrieve_distance(newpos.x, newpos.y, target_pos.x, target_pos.y, use_exact=use_exact)\n        cost[1] = path_dist\n\n        # manhattan distance to tie break\n        manhattan_dist = (newpos - target_pos)\n        cost[2] = manhattan_dist\n\n        # prefer to walk on tiles with resources\n        aux_cost = game_state.convolved_collectable_tiles_matrix[newpos.y, newpos.x]\n        cost[3] = -min(2,aux_cost)\n\n        # prefer to walk closer to opponent\n        aux_cost = game_state.distance_from_opponent_assets[newpos.y, newpos.x]\n        cost[4] = aux_cost\n\n        # update decision\n        if cost < smallest_cost:\n            smallest_cost = cost\n            closest_dir = direction\n            closest_pos = newpos\n\n        print(newpos, cost)\n\n    if closest_dir != DIRECTIONS.CENTER:\n        if tuple(closest_pos) not in game_state.opponent_unit_adjacent_xy_set:\n            game_state.occupied_xy_set.discard(tuple(unit.pos))\n        if tuple(closest_pos) not in game_state.player_city_tile_xy_set:\n            game_state.occupied_xy_set.add(tuple(closest_pos))\n        unit.cooldown += 2\n\n    return closest_dir, closest_pos\n","5f153c1e":"%%writefile make_annotations.py\nimport time\nfrom itertools import chain\nfrom typing import List\n\nimport builtins as __builtin__\n\nfrom lux.game import Game, Mission, Missions, Player, Unit\nimport lux.annotate as annotate\n\n\ndef annotate_game_state(game_state: Game, DEBUG=False):\n    if DEBUG: print = __builtin__.print\n    else: print = lambda *args: None\n\n    print(\"Turn number: \", game_state.turn)\n    print(\"Citytile count: \", game_state.player.city_tile_count)\n    print(\"Unit count: \", len(game_state.player.units))\n\n    if game_state.player_id == 1:\n        # reduce clutter for mirror matchup\n        return []\n\n    annotations = []\n\n    for city in chain(game_state.player.cities.values(), game_state.opponent.cities.values()):\n        for citytile in city.citytiles:\n            if city.night_fuel_duration >= game_state.night_turns_left:\n                annotation = annotate.circle(citytile.pos.x, citytile.pos.y)\n                annotations.append(annotation)\n            else:\n                annotation = annotate.text(citytile.pos.x, citytile.pos.y, str(city.night_fuel_duration))\n                annotations.append(annotation)\n\n\n    for unit in chain(game_state.player.units, game_state.opponent.units):\n        if unit.cargo.get_shorthand():\n            annotation = annotate.text(unit.pos.x, unit.pos.y, unit.cargo.get_shorthand())\n            annotations.append(annotation)\n\n    annotation = annotate.text(int(game_state.resource_median.x), int(game_state.resource_median.y), \"MD\")\n    annotations.append(annotation)\n    annotation = annotate.text(int(game_state.resource_mean.x), int(game_state.resource_mean.y), \"ME\")\n    annotations.append(annotation)\n    annotation = annotate.text(int(game_state.player_unit_median.x), int(game_state.player_unit_median.y), \"PD\")\n    annotations.append(annotation)\n    annotation = annotate.text(int(game_state.player_city_median.x), int(game_state.player_city_median.y), \"PE\")\n    annotations.append(annotation)\n\n    # you can also read the pickled game_state and print its attributes\n    return annotations\n\n\ndef annotate_missions(game_state: Game, missions: Missions, DEBUG=False):\n    if DEBUG: print = __builtin__.print\n    else: print = lambda *args: None\n\n    print(\"Missions\")\n    print(missions)\n    # you can also read the pickled missions and print its attributes\n\n    annotations: List[str] = []\n    player: Player = game_state.player\n\n    for unit_id, mission in missions.items():\n        mission: Mission = mission\n        unit: Unit = player.units_by_id[unit_id]\n\n        annotation = annotate.line(unit.pos.x, unit.pos.y, mission.target_position.x, mission.target_position.y)\n        annotations.append(annotation)\n\n        # if mission.target_action and mission.target_action.split(\" \")[0] == \"bcity\":\n        #     annotation = annotate.x(mission.target_position.x, mission.target_position.y)\n        #     annotations.append(annotation)\n        # else:\n        #     annotation = annotate.circle(mission.target_position.x, mission.target_position.y)\n        #     annotations.append(annotation)\n\n    annotation = annotate.sidetext(\"Unit Count: {}-{} Citytiles: {}-{} Groups: {}\/{} Runtime: {:.3f}\".format(\n        len(game_state.player.units), len(game_state.opponent.units),\n        len(game_state.player_city_tile_xy_set), len(game_state.opponent_city_tile_xy_set),\n        game_state.targeted_cluster_count, game_state.xy_to_resource_group_id.get_group_count(),\n        time.time() - game_state.compute_start_time))\n    annotations.append(annotation)\n\n    return annotations\n\n\ndef annotate_movements(game_state: Game, actions_by_units: List[str]):\n    annotations = []\n    dirs = game_state.dirs\n    d5 = game_state.dirs_dxdy\n\n    for action_by_units in actions_by_units:\n        if action_by_units[:2] != \"m \":\n            continue\n        unit_id, dir = action_by_units.split(\" \")[1:]\n        unit = game_state.player.units_by_id[unit_id]\n        x, y = unit.pos.x, unit.pos.y\n        dx, dy = d5[dirs.index(dir)]\n        annotation = annotate.line(x, y, x+dx, y+dy)\n        annotations.append(annotation)\n\n    return annotations\n\n\ndef filter_cell_annotations(actions: List[str], game_state: Game):\n    annotated_cell_xy_set = set()\n    filtered_actions: List[str] = []\n    for action in actions:\n        if action[:2] == \"m \" and action[-2:] == ' c':\n            continue\n        instruction, *info = action.split()\n        if instruction == \"dt\":\n            if (info[0],info[1]) in annotated_cell_xy_set:\n                continue\n            annotated_cell_xy_set.add((info[0],info[1]))\n        filtered_actions.append(action)\n    for unit in game_state.player.units:\n        if unit.cooldown < 1:\n            no_action = unit.move(\"c\")\n            filtered_actions.append(no_action)\n            filtered_actions.append(annotate.text(unit.pos.x, unit.pos.y, \"\ud83d\udfe4\"))\n    return filtered_actions\n","a7374e07":"%%writefile heuristics.py\n# contains designed heuristics\n# which could be fine tuned\nimport math\nimport time\n\nimport numpy as np\nimport builtins as __builtin__\n\nfrom typing import Dict\nfrom lux import annotate\nfrom lux import game\n\nfrom lux.game import Game, Unit\nfrom lux.game_map import Cell, RESOURCE_TYPES\nfrom lux.constants import Constants\nfrom lux.game_position import Position\nfrom lux.game_constants import GAME_CONSTANTS\n\n\ndef find_best_cluster(game_state: Game, unit: Unit, DEBUG=False, explore=False, require_empty_target=False, ref_pos:Position=None):\n\n    if DEBUG: print = __builtin__.print\n    else: print = lambda *args: None\n\n    # for debugging\n    score_matrix_wrt_pos = game_state.init_matrix()\n\n    # default response is not to move\n    best_position = unit.pos\n    best_cell_value = [0,0,0,0]\n    cluster_annotation = []\n\n    if time.time() - game_state.compute_start_time > 3:\n        # running out of time\n        return best_position, best_cell_value, cluster_annotation\n\n    # if at night, if near enemy or almost dawn, if city is going to die, if staying can keep the city alive\n    if not game_state.is_day_time:\n        cityid = game_state.map.get_cityid_of_cell(unit.pos.x, unit.pos.y)\n        if cityid:\n            city = game_state.player.cities[cityid]\n            if game_state.distance_from_opponent_assets[unit.pos.y,unit.pos.x] <= 2 or city.fuel_needed_for_night <= len(city.citytiles) * 120:\n                if city.fuel_needed_for_night > 0:\n                    if city.fuel_needed_for_night - game_state.fuel_collection_rate[unit.pos.y, unit.pos.x] * game_state.turns_to_dawn <= 0:\n                        unit.cooldown += 1\n                        best_cell_value = [10**9,0,0,0]\n                        print(\"staying SU\", unit.id, unit.pos)\n                        annotation = annotate.text(unit.pos.x, unit.pos.y, \"SU\")\n                        cluster_annotation.append(annotation)\n\n    # anticipate pump and dump\n    if tuple(unit.pos) in game_state.player_city_tile_xy_set:\n        for dy,dx in game_state.dirs_dxdy[:-1]:\n            xx,yy = unit.pos.x+dx, unit.pos.y+dy\n            if (xx,yy) not in game_state.player.units_by_xy:\n                continue\n            adj_unit: Unit = game_state.player.units_by_xy[xx,yy]\n            if game_state.convolved_opponent_assets_matrix[yy,xx] < 2:\n                if game_state.convolved_opponent_assets_matrix[unit.pos.y,unit.pos.x] < 2:\n                    continue\n            if game_state.convolved_wood_exist_matrix[yy,xx] <= 1:\n                continue\n            if (xx,yy) in game_state.buildable_tile_xy_set:\n                continue\n            unit.cooldown += 1\n            print(\"staying SP\", unit.id, unit.pos)\n            best_cell_value = [10**9,0,0,0]\n            annotation = annotate.text(unit.pos.x, unit.pos.y, \"SP\")\n            cluster_annotation.append(annotation)\n\n    # anticipate ejection\n    if tuple(unit.pos) in game_state.player_city_tile_xy_set and False:\n      if game_state.xy_to_resource_group_id.get_point(tuple(unit.pos)) <= 3:\n        for dy,dx in game_state.dirs_dxdy[:-1]:\n            xx,yy = unit.pos.x+dx, unit.pos.y+dy\n            if (xx,yy) not in game_state.player.units_by_xy:\n                continue\n            adj_unit: Unit = game_state.player.units_by_xy[xx,yy]\n            if int(adj_unit.cooldown) != 1:\n                continue\n            if game_state.convolved_wood_exist_matrix[yy,xx] < 1:\n                continue\n            unit.cooldown += 1\n            print(\"staying SX\", unit.id, unit.pos)\n            best_cell_value = [10**9,0,0,0]\n            annotation = annotate.text(unit.pos.x, unit.pos.y, \"SX\")\n            cluster_annotation.append(annotation)\n\n    # only consider other cluster if the current cluster has more than one agent mining\n    consider_different_cluster = False\n    # must consider other cluster if the current cluster has more agent than tiles\n    consider_different_cluster_must = explore\n\n    # calculate how many resource tiles and how many units on the current cluster\n    current_leader = game_state.xy_to_resource_group_id.find(tuple(unit.pos))\n    units_mining_on_current_cluster = game_state.resource_leader_to_locating_units[current_leader] & game_state.resource_leader_to_targeting_units[current_leader]\n    resource_size_of_current_cluster = game_state.xy_to_resource_group_id.get_point(current_leader)\n    if game_state.distance_from_opponent_assets[unit.pos.y, unit.pos.x] > 10:\n        if resource_size_of_current_cluster > 1:\n            resource_size_of_current_cluster = resource_size_of_current_cluster\/\/2\n\n    # only consider other cluster if another unit is targeting and mining in the current cluster\n    if len(units_mining_on_current_cluster - set([unit.id])) >= 1:\n        consider_different_cluster = True\n\n    # if you are in a barren field you must consider a different cluster\n    if tuple(unit.pos) not in game_state.convolved_collectable_tiles_xy_set:\n        consider_different_cluster_must = True\n\n    if len(units_mining_on_current_cluster) >= resource_size_of_current_cluster:\n        # must consider if you have more than enough workers in the current cluster\n        consider_different_cluster_must = True\n\n    print(\"finding best cluster for\", unit.id, unit.pos, consider_different_cluster, consider_different_cluster_must)\n\n    best_citytile_of_cluster: Dict = dict()\n    target_bonus_for_current_cluster_logging = -999\n\n    for y in game_state.y_iteration_order:\n        for x in game_state.x_iteration_order:\n\n            # what not to target\n            if (x,y) in game_state.targeted_for_building_xy_set:\n                continue\n            if (x,y) in game_state.opponent_city_tile_xy_set:\n                continue\n            if (x,y) in game_state.player_city_tile_xy_set:\n                continue\n\n            if ref_pos:\n                if abs(ref_pos.x - x) + abs(ref_pos.y - y) < abs(unit.pos.x - x) + abs(unit.pos.y - y):\n                    continue\n\n            # allow multi targeting of uranium mines\n            if game_state.convolved_uranium_exist_matrix[y,x] == 0 or \\\n                not game_state.player.researched_uranium_projected() or \\\n                    game_state.matrix_player_cities_nights_of_fuel_required_for_night[y,x] <= 0:\n                if (x,y) in game_state.targeted_xy_set:\n                    continue\n\n            if require_empty_target and len(units_mining_on_current_cluster) <= 2:\n                continue\n\n            distance = game_state.retrieve_distance(unit.pos.x, unit.pos.y, x, y)\n\n            # cluster targeting logic\n\n            # target bonus should have the same value for the entire cluster\n            target_bonus = 1\n            target_leader = game_state.xy_to_resource_group_id.find((x,y))\n            if consider_different_cluster or consider_different_cluster_must:\n                # if the target is a cluster and not the current cluster\n                if target_leader:\n\n                    units_targeting_or_mining_on_target_cluster = \\\n                        game_state.resource_leader_to_locating_units[target_leader] | \\\n                        game_state.resource_leader_to_targeting_units[target_leader]\n\n                    if require_empty_target and units_targeting_or_mining_on_target_cluster:\n                        continue\n                    resource_size_of_target_cluster = game_state.xy_to_resource_group_id.get_point(target_leader)\n\n                    # target bonus depends on how many resource tiles and how many units that are mining or targeting\n                    target_bonus = resource_size_of_target_cluster\/\\\n                                   (1 + len(units_targeting_or_mining_on_target_cluster))\n\n                    # avoid targeting overpopulated clusters\n                    if len(units_targeting_or_mining_on_target_cluster) > resource_size_of_target_cluster:\n                        target_bonus = target_bonus * 0.1\n\n                    # if none of your units is targeting the cluster and definitely reachable\n                    if len(units_targeting_or_mining_on_target_cluster) == 0:\n                        if distance <= game_state.distance_from_opponent_assets[y,x]:\n                            target_bonus = target_bonus * 10\n\n                    # discourage targeting depending are you the closest unit to the resource\n                    distance_bonus = max(1,game_state.distance_from_player_assets[y,x])\/max(1,distance)\n\n                    if require_empty_target and distance_bonus < 1:\n                        continue\n\n                    if consider_different_cluster_must:\n                        distance_bonus = max(1\/2, distance_bonus)\n\n                    target_bonus = target_bonus * distance_bonus**2\n\n                    if distance_bonus == 1:\n                        # extra bonus if you are closest to the target\n                        target_bonus = target_bonus * 10\n\n                    # travel penalty\n                    target_bonus = target_bonus \/ math.log(4 + game_state.xy_to_resource_group_id.get_dist_from_player((x,y),), 2)\n\n                    # if targeted cluster is much closer to enemy, do not target if cannot survive the night\n                    # resources is required for invasion\n                    if game_state.distance_from_opponent_assets[y,x] + 5 < \\\n                       game_state.xy_to_resource_group_id.get_dist_from_player((x,y),):\n                        if unit.night_turn_survivable < 10:\n                            target_bonus = target_bonus * 0.01\n\n                    # slightly discourage targeting clusters closer to enemy\n                    if game_state.xy_to_resource_group_id.get_dist_from_opponent((x,y),) < \\\n                       game_state.xy_to_resource_group_id.get_dist_from_player((x,y),):\n                        target_bonus = target_bonus * 0.9\n\n            if target_leader and target_leader == current_leader:\n                # if targeting same cluster do not move more than five\n                if distance > 5:\n                    continue\n\n            if consider_different_cluster_must and target_leader != current_leader:\n                # enforce targeting of other clusters\n                target_bonus = target_bonus * 10\n\n            if not consider_different_cluster_must and target_leader == current_leader:\n                target_bonus = target_bonus * 2\n\n            # only target cells where you can collect resources\n            if game_state.convolved_collectable_tiles_matrix_projected[y,x] == 0:\n                continue\n\n            if unit.night_turn_survivable < 10:\n                if game_state.convolved_collectable_tiles_matrix[y,x] == 0:\n                    continue\n\n            # identation to retain commit history\n            if True:\n                # do not plan overnight missions if you are the only unit mining\n                if tuple(unit.pos) in game_state.convolved_collectable_tiles_xy_set:\n                    if len(units_mining_on_current_cluster) <= 1 and distance > 15:\n                        continue\n\n                # estimate target score\n                if distance <= unit.travel_range:\n                    cell_value = [target_bonus,\n                                  - game_state.distance_from_floodfill_by_empty_tile[y,x],\n                                  - game_state.distance_from_resource_median[y,x]\n                                  - distance - game_state.distance_from_opponent_assets[y,x]\n                                  - distance + game_state.distance_from_player_unit_median[y,x],\n                                  - distance - game_state.opponent_units_matrix[y,x] * 2]\n\n                    # penalty on parameter preference\n                    # if not collectable and not buildable, penalise\n                    if (x,y) not in game_state.collectable_tiles_xy_set and (x,y) not in game_state.buildable_tile_xy_set:\n                        cell_value[1] -= 1\n\n                    # prefer to mine advanced resources faster\n                    if unit.get_cargo_space_left() > 8:\n                        if game_state.player.researched_coal_projected():\n                            cell_value[1] += 2*game_state.convolved_coal_exist_matrix[y,x]\n                        if game_state.player.researched_uranium_projected():\n                            cell_value[1] += 2*game_state.convolved_uranium_exist_matrix[y,x]\n\n                    # if mining advanced resource, stand your ground unless there is a direct path\n                    if game_state.convolved_coal_exist_matrix[unit.pos.y,unit.pos.x] or game_state.convolved_uranium_exist_matrix[unit.pos.y,unit.pos.x]:\n                        if distance > abs(unit.pos.x - x) + abs(unit.pos.y - y):\n                            continue\n\n                    # discourage if the target is one unit closer to the enemy, in the early game\n                    # specific case to avoid this sort of targeting (A -> X)\n                    #    X\n                    # WABW\n                    # WWWW\n                    if game_state.distance_from_opponent_assets[y,x] + 1 == game_state.distance_from_player_units[y,x]:\n                        if game_state.turn < 80:\n                            cell_value[2] -= 2\n\n                    # for first target prefer B over A\n                    #   X\n                    # BWWW\n                    #  WWW\n                    #  AX\n                    if game_state.distance_from_opponent_assets[y,x] == 1 and game_state.distance_from_player_assets[y,x] > 2:\n                        if game_state.turn < 1:\n                            cell_value[2] -= 2\n\n                    # discourage if you are in the citytile, and you are targeting the location beside you with one wood side\n                    # specific case to avoid this sort of targeting (A -> X), probably encourage (A -> Z) or (A -> Y)\n                    #\n                    #   AX\n                    #  ZWWY\n                    if tuple(unit.pos) in game_state.player_city_tile_xy_set:\n                        if Position(x,y) - unit.pos == 1:\n                            if game_state.convolved_wood_exist_matrix[y,x] == 1 and game_state.resource_collection_rate[y,x] == 20:\n                                if game_state.distance_from_opponent_units[y,x] > 2:\n                                    cell_value[2] -= 5\n\n\n                    # if more than 20 uranium do not target a wood cluster so that it can home\n                    if unit.cargo.uranium > 20:\n                        if game_state.convolved_wood_exist_matrix[y,x]*20 == game_state.resource_collection_rate[y,x]:\n                            cell_value[0] = -1\n\n                    # for debugging\n                    score_matrix_wrt_pos[y,x] = cell_value[2]\n\n                    # update best target\n                    if cell_value > best_cell_value:\n                        best_cell_value = cell_value\n                        best_position = Position(x,y)\n\n                    if target_leader not in best_citytile_of_cluster:\n                        best_citytile_of_cluster[target_leader] = (cell_value,x,y)\n                    if (cell_value,x,y) > best_citytile_of_cluster[target_leader]:\n                        best_citytile_of_cluster[target_leader] = (cell_value,x,y)\n\n                    if target_leader == current_leader:\n                        target_bonus_for_current_cluster_logging = max(target_bonus_for_current_cluster_logging, target_bonus)\n\n    # annotate if target bonus is more than one\n    if best_cell_value[0] > target_bonus_for_current_cluster_logging > -999:\n        for cell_value,x,y in sorted(best_citytile_of_cluster.values())[:10]:\n            annotation = annotate.text(x,y,f\"{int(cell_value[0])}\")\n            cluster_annotation.append(annotation)\n            annotation = annotate.line(unit.pos.x,unit.pos.y,x,y)\n            cluster_annotation.append(annotation)\n\n    # for debugging\n    game_state.heuristics_from_positions[tuple(unit.pos)] = score_matrix_wrt_pos\n\n    return best_position, best_cell_value, cluster_annotation\n","2f06d675":"%%writefile main.py\nfrom typing import Dict\nimport sys\nfrom agent import agent\nif __name__ == \"__main__\":\n\n    def read_input():\n        \"\"\"\n        Reads input from stdin\n        \"\"\"\n        try:\n            return input()\n        except EOFError as eof:\n            raise SystemExit(eof)\n    step = 0\n    class Observation(Dict[str, any]):\n        def __init__(self, player=0) -> None:\n            self.player = player\n            # self.updates = []\n            # self.step = 0\n    observation = Observation()\n    observation[\"updates\"] = []\n    observation[\"step\"] = 0\n    player_id = 0\n    while True:\n        inputs = read_input()\n        observation[\"updates\"].append(inputs)\n\n        if inputs == \"D_DONE\":\n            if step == 0:  # the codefix\n                player_id = int(observation[\"updates\"][0])\n                observation.player = player_id\n                observation[\"player\"] = player_id\n                observation[\"width\"], observation[\"height\"] = map(int, observation[\"updates\"][1].split())\n            actions = agent(observation, None)\n            observation[\"updates\"] = []\n            step += 1\n            observation[\"step\"] = step\n            print(\",\".join(actions))\n            print(\"D_FINISH\")\n","331b123f":"%%writefile lux\/game.py\nimport heapq, time\nfrom collections import defaultdict, deque\nfrom typing import DefaultDict, Dict, List, Tuple, Set\nfrom datetime import datetime\nimport builtins as __builtin__\n\nimport numpy as np\n\nfrom .constants import Constants\nfrom .game_map import GameMap, RESOURCE_TYPES\nfrom .game_objects import Player, Unit, City\nfrom .game_position import Position\nfrom .game_constants import GAME_CONSTANTS\n\nINPUT_CONSTANTS = Constants.INPUT_CONSTANTS\n\n\nclass Observation(Dict[str, any]):\n    def __init__(self, player=0) -> None:\n        self.player = player\n        # self.updates = []\n        # self.step = 0\n\n\nclass Mission:\n    def __init__(self, unit_id: str, target_position: Position, target_action: str = \"\", details: str = \"\", delays=99):\n        self.target_position: Position = target_position\n        self.target_action: str = target_action\n        self.unit_id: str = unit_id\n        self.delays: int = 2*delays\n        self.details: str = details  # block deletion of mission if no resource\n        # [TODO] some expiry date for each mission\n\n    def __str__(self):\n        return \" \".join([str(self.target_position), self.target_action, str(self.delays)])\n\n\nclass Missions(defaultdict):\n    def __init__(self):\n        self: DefaultDict[str, Mission] = defaultdict(Mission)\n\n    def add(self, mission: Mission):\n        self[mission.unit_id] = mission\n\n    def __str__(self):\n        return \" | \".join([unit_id + \" \" + str(mission) for unit_id,mission in self.items()])\n\n    def get_targets(self):\n        return [mission.target_position for unit_id, mission in self.items()]\n\n    def get_target_of_unit(self, unit_id):\n        return {unit_id: mission.target_position for unit_id, mission in self.items()}[unit_id]\n\n    def get_targets_and_actions(self):\n        return [(mission.target_position, mission.target_action) for unit_id, mission in self.items()]\n\n    def reset_missions(self, research_points, convolved_coal_exist_matrix, convolved_uranium_exist_matrix):\n        for unit_id in list(self.keys()):\n            x,y = tuple(self[unit_id].target_position)\n            if research_points >= 200:\n                if convolved_uranium_exist_matrix[y,x] == 0:\n                    del self[unit_id]\n                    continue\n            elif research_points >= 50:\n                if convolved_coal_exist_matrix[y,x] == 0:\n                    del self[unit_id]\n                    continue\n\nclass DisjointSet:\n    def __init__(self):\n        self.parent = {}\n        self.sizes = defaultdict(int)\n        self.points = defaultdict(int)  # 1 point for wood, 3 point for coal, 5 point for uranium\n        self.tiles = defaultdict(int)  # 1 point for all resource\n        self.citytiles = defaultdict(int)  # 1 point for citytile next to cluster\n        self.dist_from_player = defaultdict(int)  # closest distance from player\n        self.dist_from_opponent = defaultdict(int)  # closest distance from player\n        self.num_sets = 0\n\n    def find(self, a, point=0, tile=0, citytile=0):\n        assert type(a) == tuple\n        if a not in self.parent:\n            self.parent[a] = a\n            self.sizes[a] += 1\n            self.points[a] += point\n            self.tiles[a] += tile\n            self.citytiles[a] += citytile\n            self.num_sets += 1\n        acopy = a\n        while a != self.parent[a]:\n            a = self.parent[a]\n        while acopy != a:\n            self.parent[acopy], acopy = a, self.parent[acopy]\n        return a\n\n    def union(self, a, b):\n        assert type(a) == tuple\n        assert type(b) == tuple\n        a, b = self.find(a), self.find(b)\n        if a != b:\n            # if self.sizes[a] < self.sizes[b]:\n            #     a, b = b, a\n\n            self.num_sets -= 1\n            self.parent[b] = a\n            self.sizes[a] += self.sizes[b]\n            self.points[a] += self.points[b]\n            self.tiles[a] += self.tiles[b]\n            self.citytiles[a] += self.citytiles[b]\n\n    def get_size(self, a):\n        assert type(a) == tuple\n        return self.sizes[self.find(a)]\n\n    def get_point(self, a):\n        assert type(a) == tuple\n        return self.points[self.find(a)]\n\n    def get_tiles(self, a):\n        assert type(a) == tuple\n        return self.tiles[self.find(a)]\n\n    def get_citytiles(self, a):\n        assert type(a) == tuple\n        return self.citytiles[self.find(a)]\n\n    def get_dist_from_player(self, a):\n        assert type(a) == tuple\n        if self.find(a) not in self.dist_from_player:\n            return 100\n        return self.dist_from_player[self.find(a)]\n\n    def get_dist_from_opponent(self, a):\n        assert type(a) == tuple\n        if self.find(a) not in self.dist_from_opponent:\n            return 100\n        return self.dist_from_opponent[self.find(a)]\n\n    def get_groups(self):\n        groups = defaultdict(list)\n        for element in self.parent:\n            leader = self.find(element)\n            if leader:\n                groups[leader].append(element)\n        return groups\n\n    def get_groups_sorted_by_citytile_size(self):\n        groups = defaultdict(list)\n        for element in self.parent:\n            leader = self.find(element)\n            if leader:\n                groups[leader].append(element)\n        leaders = list(groups.keys())\n        leaders.sort(key=lambda leader: (self.get_citytiles(leader), self.get_tiles(leader)), reverse=True)\n        return [groups[leader] for leader in leaders if self.get_point(leader) > 0]\n\n    def get_group_count(self):\n        return sum(self.points[leader] > 1 for leader in self.get_groups().keys())\n\n\nclass Game:\n\n    # counted from the time after the objects are saved to disk\n    compute_start_time = -1\n\n    def _initialize(self, messages):\n        \"\"\"\n        initialize state\n        \"\"\"\n        self.player_id: int = int(messages[0])\n        self.turn: int = -1\n        # get some other necessary initial input\n        mapInfo = messages[1].split(\" \")\n        self.map_width: int = int(mapInfo[0])\n        self.map_height: int = int(mapInfo[1])\n        self.map: GameMap = GameMap(self.map_width, self.map_height)\n        self.players: List[Player] = [Player(0), Player(1)]\n\n        self.y_order_coefficient = 1\n        self.x_order_coefficient = 1\n        self.x_iteration_order = list(range(self.map_width))\n        self.y_iteration_order = list(range(self.map_height))\n        self.dirs: List = [\n            Constants.DIRECTIONS.NORTH,\n            Constants.DIRECTIONS.EAST,\n            Constants.DIRECTIONS.SOUTH,\n            Constants.DIRECTIONS.WEST,\n            Constants.DIRECTIONS.CENTER\n        ]\n        self.dirs_dxdy: List = [(0,-1), (1,0), (0,1), (-1,0), (0,0)]\n        self.units_expected_to_act: Set[Tuple] = set()\n\n\n    def fix_iteration_order(self):\n        '''\n        Fix iteration order at initisation to allow moves to be symmetric\n        '''\n        assert len(self.player.cities) == 1\n        assert len(self.opponent.cities) == 1\n        px,py = tuple(list(self.player.cities.values())[0].citytiles[0].pos)\n        ox,oy = tuple(list(self.opponent.cities.values())[0].citytiles[0].pos)\n\n        flipping = False\n        self.y_order_coefficient = 1\n        self.x_order_coefficient = 1\n\n        if px == ox:\n            if py < oy:\n                flipping = True\n                self.y_iteration_order = self.y_iteration_order[::-1]\n                self.y_order_coefficient = -1\n                idx1, idx2 = 0,2\n        elif py == oy:\n            if px < ox:\n                flipping = True\n                self.x_iteration_order = self.x_iteration_order[::-1]\n                self.x_order_coefficient = -1\n                idx1, idx2 = 1,3\n        else:\n            assert False\n\n        if flipping:\n            self.dirs[idx1], self.dirs[idx2] = self.dirs[idx2], self.dirs[idx1]\n            self.dirs_dxdy[idx1], self.dirs_dxdy[idx2] = self.dirs_dxdy[idx2], self.dirs_dxdy[idx1]\n\n\n    def _end_turn(self):\n        print(\"D_FINISH\")\n\n\n    def _reset_player_states(self):\n        self.players[0].units = []\n        self.players[0].cities = {}\n        self.players[0].city_tile_count = 0\n        self.players[1].units = []\n        self.players[1].cities = {}\n        self.players[1].city_tile_count = 0\n\n        self.player: Player = self.players[self.player_id]\n        self.opponent: Player = self.players[1 - self.player_id]\n\n\n    def _update(self, messages):\n        \"\"\"\n        update state\n        \"\"\"\n        self.map = GameMap(self.map_width, self.map_height)\n        self.turn += 1\n        self._reset_player_states()\n\n        # [TODO] Use constants here\n        self.night_turns_left = (360 - self.turn)\/\/40 * 10 + min(10, (360 - self.turn)%40)\n\n        self.turns_to_night = (30 - self.turn)%40\n        self.turns_to_night = 0 if self.turns_to_night > 30 else self.turns_to_night\n\n        self.turns_to_dawn = (40 - self.turn%40)\n        self.turns_to_dawn = 0 if self.turns_to_dawn > 10 else self.turns_to_dawn\n\n        self.is_day_time = self.turns_to_dawn == 0\n\n        for update in messages:\n            if update == \"D_DONE\":\n                break\n            strs = update.split(\" \")\n            input_identifier = strs[0]\n\n            if input_identifier == INPUT_CONSTANTS.RESEARCH_POINTS:\n                team = int(strs[1])   # probably player_id\n                self.players[team].research_points = int(strs[2])\n\n            elif input_identifier == INPUT_CONSTANTS.RESOURCES:\n                r_type = strs[1]\n                x = int(strs[2])\n                y = int(strs[3])\n                amt = int(float(strs[4]))\n                self.map._setResource(r_type, x, y, amt)\n\n            elif input_identifier == INPUT_CONSTANTS.UNITS:\n                unittype = int(strs[1])\n                team = int(strs[2])\n                unitid = strs[3]\n                x = int(strs[4])\n                y = int(strs[5])\n                cooldown = float(strs[6])\n                wood = int(strs[7])\n                coal = int(strs[8])\n                uranium = int(strs[9])\n                unit = Unit(team, unittype, unitid, x, y, cooldown, wood, coal, uranium)\n                self.players[team].units.append(unit)\n                self.map.get_cell(x, y).unit = unit\n\n            elif input_identifier == INPUT_CONSTANTS.CITY:\n                team = int(strs[1])\n                cityid = strs[2]\n                fuel = float(strs[3])\n                lightupkeep = float(strs[4])\n                self.players[team].cities[cityid] = City(team, cityid, fuel, lightupkeep, self.night_turns_left)\n\n            elif input_identifier == INPUT_CONSTANTS.CITY_TILES:\n                team = int(strs[1])\n                cityid = strs[2]\n                x = int(strs[3])\n                y = int(strs[4])\n                cooldown = float(strs[5])\n                city = self.players[team].cities[cityid]\n                citytile = city._add_city_tile(x, y, cooldown)\n                self.map.get_cell(x, y).citytile = citytile\n                self.players[team].city_tile_count += 1\n\n            elif input_identifier == INPUT_CONSTANTS.ROADS:\n                x = int(strs[1])\n                y = int(strs[2])\n                road = float(strs[3])\n                self.map.get_cell(x, y).road = road\n\n        # create indexes to refer to unit by id\n        self.player.make_index_units_by_id()\n        self.opponent.make_index_units_by_id()\n\n        if self.turn > 0:\n            for city in self.player.cities.values():\n                city.citytiles.sort(key=lambda city_tile:(\n                    city_tile.pos.x * self.x_order_coefficient,\n                    city_tile.pos.y * self.y_order_coefficient))\n\n            for city in self.opponent.cities.values():\n                city.citytiles.sort(key=lambda city_tile:(\n                    city_tile.pos.x * self.x_order_coefficient,\n                    city_tile.pos.y * self.y_order_coefficient))\n\n        # rotate iteration order\n        if self.turn%4 != 0:\n            self.dirs[3], self.dirs[0:3] = self.dirs[0], self.dirs[1:4]\n            self.dirs_dxdy[3], self.dirs_dxdy[0:3] = self.dirs_dxdy[0], self.dirs_dxdy[1:4]\n\n        self.unit_ids_with_missions_assigned_this_turn: Set = set()\n\n        for unit in self.player.units:\n            unit.compute_travel_range((self.turns_to_night, self.turns_to_dawn, self.is_day_time),)\n        for unit in self.opponent.units:\n            unit.compute_travel_range((self.turns_to_night, self.turns_to_dawn, self.is_day_time),)\n\n\n    def calculate_features(self, missions: Missions):\n\n        # load constants into object\n        self.wood_fuel_rate = GAME_CONSTANTS[\"PARAMETERS\"][\"RESOURCE_TO_FUEL_RATE\"][RESOURCE_TYPES.WOOD.upper()]\n        self.wood_collection_rate = GAME_CONSTANTS[\"PARAMETERS\"][\"WORKER_COLLECTION_RATE\"][RESOURCE_TYPES.WOOD.upper()]\n        self.coal_fuel_rate = GAME_CONSTANTS[\"PARAMETERS\"][\"RESOURCE_TO_FUEL_RATE\"][RESOURCE_TYPES.COAL.upper()]\n        self.coal_collection_rate = GAME_CONSTANTS[\"PARAMETERS\"][\"WORKER_COLLECTION_RATE\"][RESOURCE_TYPES.COAL.upper()]\n        self.uranium_fuel_rate = GAME_CONSTANTS[\"PARAMETERS\"][\"RESOURCE_TO_FUEL_RATE\"][RESOURCE_TYPES.URANIUM.upper()]\n        self.uranium_collection_rate = GAME_CONSTANTS[\"PARAMETERS\"][\"WORKER_COLLECTION_RATE\"][RESOURCE_TYPES.URANIUM.upper()]\n\n        # update matrices\n        self.calculate_matrix()\n        self.calculate_resource_matrix()\n        self.calculate_resource_groups()\n        self.calculate_distance_matrix()\n\n        # when to use rules\n        for unit in self.player.units:\n            x,y = tuple(unit.pos)\n            if self.player.researched_uranium() and unit.cargo.wood == 100:\n                unit.use_rule_base = False\n                continue\n            if self.turn >= 348:\n               unit.use_rule_base = True\n               continue\n            if unit.cargo.uranium > 20 and (x,y) not in self.convolved_collectable_tiles_xy_set:\n                unit.use_rule_base = True\n                continue\n            # if unit.cargo.coal >= 50:\n            #     unit.use_rule_base = True\n            #     continue\n            if self.distance_from_collectable_resource_projected[y,x] > 6:\n                unit.use_rule_base = True\n                continue\n            if self.distance_from_wood_tile[y,x] < 4:\n                unit.use_rule_base = False\n                continue\n\n        self.player_unit_can_act_count = 1\n        for unit in self.player.units:\n            if unit.can_act() and unit.use_rule_base:\n                self.player_unit_can_act_count += 1\n\n        self.sinking_cities_xy_set = set()\n        for city in self.player.cities.values():\n            if self.is_day_time:\n                continue\n\n            collection_rates = []\n            adjacent_and_residing_units = set()\n            for citytile in city.citytiles:\n                collection_rates.append(self.fuel_collection_rate[citytile.pos.y, citytile.pos.x])\n                for dx,dy in self.dirs_dxdy:\n                    xx, yy = citytile.pos.x+dx, citytile.pos.y+dy\n                    if (xx, yy) in self.player.units_by_xy:\n                        adj_unit = self.player.units_by_xy[xx,yy]\n                        if adj_unit.can_act():\n                            adjacent_and_residing_units.add(adj_unit.id)\n            collection_rates.sort(reverse=True)\n\n            maximum_collection = sum(collection_rates[:len(adjacent_and_residing_units)])\n            maximum_injection = 0\n            for adj_unit_id in adjacent_and_residing_units:\n                adj_unit = self.player.units_by_id[adj_unit_id]\n                maximum_injection += adj_unit.fuel_potential\n\n            if city.fuel + maximum_collection + maximum_injection < city.get_light_upkeep():\n                for citytile in city.citytiles:\n                    self.sinking_cities_xy_set.add((citytile.pos.x, citytile.pos.y))\n                    self.occupied_xy_set.add((citytile.pos.x, citytile.pos.y))\n\n        # if there are cities beside coal or uranium, stop producing units and do research, and encourage building cities\n        self.worker_production_ban = False\n        for city in self.player.cities.values():\n            city_beside_coal = False\n            city_beside_uranium = False\n\n        # 1 transform 10 ms\n        # 4 transform 25 ms\n        # 8 transform 45 ms\n\n        allowed_transforms = 1500\/\/5\n        self.number_of_transforms = max(1, min(8, allowed_transforms\/\/self.player_unit_can_act_count))\n\n        # # gating\n        # for unit in self.player.units:\n        #     unit.use_rule_base = False\n\n\n        # places to avoid building workers\n        self.avoid_building_workers_xy_set: Set = set()\n        for x in self.x_iteration_order:\n            for y in self.y_iteration_order:\n                if self.turn > 350:\n                    continue\n                if (x,y) not in self.player_city_tile_xy_set:\n                    continue\n                if not self.player.researched_uranium():\n                    continue\n                if self.distance_from_opponent_assets[y,x] < 3:\n                    continue\n                if self.distance_from_player_units[y,x] >= 3:\n                    continue\n                if self.distance_from_player_units[y,x] <= 1 and self.distance_from_wood_tile[y,x] < 3:\n                    self.avoid_building_workers_xy_set.add((x,y),)\n                    continue\n                for dx,dy in self.dirs_dxdy:\n                    xx, yy = x+dx, y+dy\n                    if not (0 <= xx < self.map_width and 0 <= yy < self.map_height):\n                        continue\n                    if 0 < self.wood_amount_matrix[yy,xx] < 500:\n                        self.avoid_building_workers_xy_set.add((x,y),)\n                        break\n\n        # place and time to avoid building citytiles\n        self.avoid_building_citytiles_xy_set: Set = set()\n        for x in self.x_iteration_order:\n            for y in self.y_iteration_order:\n                if self.turn%40 != 30:\n                    continue\n                if self.distance_from_player_citytiles[y,x] <= 1:\n                    continue\n                if self.fuel_collection_rate[y,x] >= 23:\n                    continue\n                self.avoid_building_citytiles_xy_set.add((x,y), )\n\n\n        self.repopulate_targets(missions)\n\n        self.player.units.sort(key=lambda unit: (\n            unit.get_cargo_space_left() > 0,\n            tuple(unit.pos) not in self.player_city_tile_xy_set,\n            self.distance_from_opponent_assets[unit.pos.y,unit.pos.x],\n            self.distance_from_resource_median[unit.pos.y,unit.pos.x],\n            unit.pos.x*self.x_order_coefficient,\n            unit.pos.y*self.y_order_coefficient,\n            unit.encode_tuple_for_cmp()))\n\n\n        self.citytiles_with_new_units_xy_set: Set = set()\n        self.heuristics_from_positions: Dict = dict()\n\n        self.units_did_not_act: Set = set(unit_id for unit_id in self.units_expected_to_act)\n        for unit in self.player.units:\n            if unit.can_act():\n                self.units_expected_to_act.add(unit.id)\n        self.units_did_not_act = self.units_did_not_act & self.units_expected_to_act\n\n        update_mission_delay(self, missions)\n\n\n    def init_matrix(self, default_value=0):\n        # [TODO] check if order of map_height and map_width is correct\n        return np.full((self.map_height,self.map_width), default_value)\n\n\n    def calculate_matrix(self):\n\n        # amount of resources left on the tile\n        self.wood_amount_matrix = self.init_matrix()\n        self.coal_amount_matrix = self.init_matrix()\n        self.uranium_amount_matrix = self.init_matrix()\n        self.all_resource_amount_matrix = self.init_matrix()\n\n        self.player_city_tile_matrix = self.init_matrix()\n        self.opponent_city_tile_matrix = self.init_matrix()\n\n        self.player_units_matrix = self.init_matrix()\n        self.opponent_units_matrix = self.init_matrix()\n\n        # if there is nothing on tile\n        self.empty_tile_matrix = self.init_matrix()\n\n        # if you can build on tile (a unit may be on the tile)\n        self.buildable_tile_matrix = self.init_matrix()\n        self.probably_buildable_tile_matrix = self.init_matrix()\n        self.preferred_buildable_tile_matrix = self.init_matrix()\n\n        self.road_level_matrix = self.init_matrix()\n\n        for y in self.y_iteration_order:\n            for x in self.x_iteration_order:\n                cell = self.map.get_cell(x, y)\n\n                self.road_level_matrix[y,x] = cell.road\n\n                is_empty = True\n                is_buildable = True\n\n                if cell.unit:\n                    is_empty = False\n                    # unit counting method implemented later\n                    # cell.unit only contain one unit even though multiple units can stay in citytile\n\n                if cell.has_resource():\n                    is_empty = False\n                    is_buildable = False\n                    if cell.resource.type == RESOURCE_TYPES.WOOD:\n                        self.wood_amount_matrix[y,x] += cell.resource.amount\n                    if cell.resource.type == RESOURCE_TYPES.COAL:\n                        self.coal_amount_matrix[y,x] += cell.resource.amount\n                    if cell.resource.type == RESOURCE_TYPES.URANIUM:\n                        self.uranium_amount_matrix[y,x] += cell.resource.amount\n                    self.all_resource_amount_matrix[y,x] += cell.resource.amount\n\n                elif cell.citytile:\n                    is_empty = False\n                    is_buildable = False\n                    if cell.citytile.team == self.player_id:\n                        self.player_city_tile_matrix[y,x] += 1\n                    else:   # city tile belongs to opponent\n                        self.opponent_city_tile_matrix[y,x] += 1\n\n                if is_empty:\n                    self.empty_tile_matrix[y,x] += 1\n\n                if is_buildable:\n                    self.buildable_tile_matrix[y,x] += 1\n\n        for unit in self.player.units:\n            self.player_units_matrix[unit.pos.y,unit.pos.x] += 1\n\n        for unit in self.opponent.units:\n            self.opponent_units_matrix[unit.pos.y,unit.pos.x] += 1\n\n        # binary matrices\n        self.wood_exist_matrix = (self.wood_amount_matrix > 0).astype(int)\n        self.coal_exist_matrix = (self.coal_amount_matrix > 0).astype(int)\n        self.uranium_exist_matrix = (self.uranium_amount_matrix > 0).astype(int)\n        self.all_resource_exist_matrix = (self.all_resource_amount_matrix > 0).astype(int)\n\n        self.convolved_wood_exist_matrix = self.convolve(self.wood_exist_matrix)\n        self.convolved_coal_exist_matrix = self.convolve(self.coal_exist_matrix)\n        self.convolved_uranium_exist_matrix = self.convolve(self.uranium_exist_matrix)\n\n        self.resource_collection_rate = self.convolved_wood_exist_matrix * 20 + self.convolved_coal_exist_matrix * 5 + self.convolved_uranium_exist_matrix * 2\n        self.fuel_collection_rate = self.convolved_wood_exist_matrix * 20 + self.convolved_coal_exist_matrix * 5 * 5 + self.convolved_uranium_exist_matrix * 2 * 20\n\n        # positive if on empty cell and beside the resource\n        self.wood_side_matrix = self.convolve(self.wood_exist_matrix) * self.empty_tile_matrix\n        self.coal_side_matrix = self.convolve(self.coal_exist_matrix) * self.empty_tile_matrix\n        self.uranium_side_matrix = self.convolve(self.uranium_exist_matrix) * self.empty_tile_matrix\n\n        self.convolved_opponent_assets_matrix = self.convolve(self.opponent_units_matrix + self.opponent_city_tile_matrix)\n        self.convolved_two_opponent_assets_matrix = self.convolve_two(self.opponent_units_matrix + self.opponent_city_tile_matrix)\n\n        self.convert_into_sets()\n\n        # calculate aggregate features\n        self.map_resource_count = np.sum(self.wood_amount_matrix + self.coal_amount_matrix + self.uranium_amount_matrix)\n\n\n    def get_floodfill(self, set_object):\n        # return the largest connected graph ignoring blockers\n        ds = DisjointSet()\n        for y in self.y_iteration_order:\n            for x in self.x_iteration_order:\n                if (x,y) in set_object:\n                    continue\n                for dy,dx in self.dirs_dxdy[:-1]:\n                    xx, yy = x+dx, y+dy\n                    if (xx,yy) in self.xy_out_of_map:\n                        continue\n                    if (xx,yy) in set_object:\n                        continue\n                    ds.union((x,y), (xx,yy))\n\n        floodfills = sorted(ds.get_groups().values(), key=len, reverse=True)\n\n        # for smaller maps, resources may divide the map into two\n        all_floodfill = set()\n        for floodfill in floodfills:\n            all_floodfill.update(floodfill)\n            if len(all_floodfill) > self.map_width * self.map_height * 0.7 - len(self.occupied_xy_set):\n                return all_floodfill\n        return all_floodfill\n\n\n    def populate_set(self, matrix, set_object):\n        # modifies the set_object in place and add nonzero items in the matrix\n        for y in self.y_iteration_order:\n            for x in self.x_iteration_order:\n                if matrix[y,x] > 0:\n                    set_object.add((x,y))\n\n\n    def convert_into_sets(self):\n        self.wood_exist_xy_set = set()\n        self.coal_exist_xy_set = set()\n        self.uranium_exist_xy_set = set()\n        self.player_city_tile_xy_set = set()\n        self.opponent_city_tile_xy_set = set()\n        self.player_units_xy_set = set()\n        self.opponent_units_xy_set = set()\n        self.empty_tile_xy_set = set()\n        self.buildable_tile_xy_set = set()\n        self.probably_buildable_tile_xy_set = set()\n        self.preferred_buildable_tile_xy_set = set()\n\n        for set_object, matrix in [\n            [self.wood_exist_xy_set,            self.wood_exist_matrix],\n            [self.coal_exist_xy_set,            self.coal_exist_matrix],\n            [self.uranium_exist_xy_set,         self.uranium_exist_matrix],\n            [self.player_city_tile_xy_set,      self.player_city_tile_matrix],\n            [self.opponent_city_tile_xy_set,    self.opponent_city_tile_matrix],\n            [self.player_units_xy_set,          self.player_units_matrix],\n            [self.opponent_units_xy_set,        self.opponent_units_matrix],\n            [self.empty_tile_xy_set,            self.empty_tile_matrix],\n            [self.buildable_tile_xy_set,        self.buildable_tile_matrix]]:\n\n            self.populate_set(matrix, set_object)\n\n        self.xy_out_of_map: Set = set()\n        for y in [-1, self.map_height]:\n            for x in range(self.map_width):\n                self.xy_out_of_map.add((x,y))\n        for y in range(self.map_height):\n            for x in [-1, self.map_width]:\n                self.xy_out_of_map.add((x,y))\n\n        for x,y in self.player_city_tile_xy_set:\n            city = self.player.cities[self.map.get_cell(x,y).citytile.cityid]\n            for dx, dy in self.dirs_dxdy[:-1]:\n                xx,yy = x+dx,y+dy\n                if 0 <= xx < self.map_width and 0 <= yy < self.map_height:\n                    if self.buildable_tile_matrix[yy,xx]:\n                        self.probably_buildable_tile_matrix[yy,xx] = 1\n                        if city.fuel_needed_for_night <= -18:\n                            self.preferred_buildable_tile_matrix[yy,xx] = 1\n\n        self.populate_set(self.probably_buildable_tile_matrix, self.probably_buildable_tile_xy_set)\n        self.populate_set(self.preferred_buildable_tile_matrix, self.preferred_buildable_tile_xy_set)\n\n        self.opponent_units_moveable_xy_set: Set = set()\n        for unit in self.opponent.units:\n            can_build = tuple(unit.pos) in self.buildable_tile_xy_set and unit.get_cargo_space_used() == 100\n            if unit.can_act() and not can_build:\n                self.opponent_units_moveable_xy_set.add(tuple(unit.pos))\n\n        # used for distance calculation\n        # out of map - yes\n        # occupied by enemy units or city - yes\n        # occupied by self unit not in city - yes\n        # occupied by self city - no (even if there are units)\n        self.occupied_xy_set = (self.player_units_xy_set | self.opponent_units_xy_set | \\\n                                self.opponent_city_tile_xy_set | self.xy_out_of_map) \\\n                                - self.player_city_tile_xy_set - self.opponent_units_moveable_xy_set\n\n        self.floodfill_by_player_city_set = self.get_floodfill(self.player_city_tile_xy_set)\n        self.floodfill_by_opponent_city_set = self.get_floodfill(self.opponent_city_tile_xy_set)\n        self.floodfill_by_either_city_set = self.get_floodfill(self.player_city_tile_xy_set | self.opponent_city_tile_xy_set)\n\n        self.floodfill_by_empty_tile_set = self.get_floodfill(\n            self.player_city_tile_xy_set | self.opponent_city_tile_xy_set | self.wood_exist_xy_set | self.coal_exist_xy_set | self.uranium_exist_xy_set)\n\n        self.ejected_units_set: Set = set()\n\n    def calculate_distance_matrix(self, blockade_multiplier_value=100):\n        self.distance_from_edge = self.init_matrix(self.map_height + self.map_width)\n        for y in range(self.map_height):\n            y_distance_from_edge = min(y, self.map_height-y-1)\n            for x in range(self.map_width):\n                x_distance_from_edge = min(x, self.map_height-x-1)\n                self.distance_from_edge[y,x] = y_distance_from_edge + x_distance_from_edge\n\n        def calculate_distance_from_set(relevant_set):\n            visited = set()\n            matrix = self.init_matrix(default_value=99)\n            for y in self.y_iteration_order:\n                for x in self.x_iteration_order:\n                    if (x,y) in relevant_set:\n                        visited.add((x,y))\n                        matrix[y,x] = 0\n\n            queue = deque(list(visited))\n            while queue:\n                x,y = queue.popleft()\n                for dx,dy in self.dirs_dxdy[:-1]:\n                    xx, yy = x+dx, y+dy\n                    if (xx,yy) in visited:\n                        continue\n                    if 0 <= xx < self.map_width and 0 <= yy < self.map_height:\n                        matrix[yy,xx] = matrix[y,x] + 1\n                        queue.append((xx,yy))\n                        visited.add((xx,yy))\n            return matrix\n\n\n        def get_median(arr):\n            arr = sorted(arr)\n            midpoint = len(arr)\/\/2\n            return (arr[midpoint] + arr[~midpoint]) \/ 2\n\n        def calculate_distance_from_median(set_object):\n            # https:\/\/leetcode.com\/problems\/best-position-for-a-service-centre\/discuss\/733153\/\n            if not set_object:\n                return self.init_matrix(default_value=0), Position(0,0)\n\n            mx = get_median([x for x,y in set_object])\n            my = get_median([y for x,y in set_object])\n\n            matrix = self.init_matrix(default_value=0)\n            for y in self.y_iteration_order:\n                for x in self.x_iteration_order:\n                    matrix[y][x] = abs(x-mx) + abs(y-my)\n\n            return matrix, Position(int(mx), int(my))\n\n\n        def get_norm(p1, p2):\n            return (abs(p1[0] - p2[0]) + abs(p1[1] - p2[1]))\n\n        def calculate_distance_from_mean(set_object):\n            # https:\/\/leetcode.com\/problems\/best-position-for-a-service-centre\/discuss\/733153\/\n            if not set_object:\n                return self.init_matrix(default_value=0), Position(0,0)\n\n            mx = sum(p[0] for p in set_object)\/len(set_object)\n            my = sum(p[1] for p in set_object)\/len(set_object)\n\n            matrix = self.init_matrix(default_value=0)\n            for y in self.y_iteration_order:\n                for x in self.x_iteration_order:\n                    matrix[y][x] = get_norm((x,y), (mx,my))\n\n            return matrix, Position(int(mx), int(my))\n\n        # calculate distance from resource (with projected research requirements)\n        self.distance_from_collectable_resource = calculate_distance_from_set(self.collectable_tiles_xy_set)\n        self.distance_from_collectable_resource_projected = calculate_distance_from_set(self.collectable_tiles_projected_xy_set)\n\n        # calculate distance from citytiles or units\n        self.distance_from_player_assets = calculate_distance_from_set(self.player_units_xy_set | self.player_city_tile_xy_set)\n        self.distance_from_opponent_assets = calculate_distance_from_set(self.opponent_units_xy_set | self.opponent_city_tile_xy_set)\n        self.distance_from_player_units = calculate_distance_from_set(self.player_units_xy_set)\n        self.distance_from_opponent_units = calculate_distance_from_set(self.opponent_units_xy_set)\n        self.distance_from_player_citytiles = calculate_distance_from_set(self.player_city_tile_xy_set)\n        self.distance_from_opponent_citytiles = calculate_distance_from_set(self.opponent_city_tile_xy_set)\n\n        self.distance_from_buildable_tile = calculate_distance_from_set(self.buildable_tile_xy_set)\n        self.distance_from_empty_tile = calculate_distance_from_set(self.empty_tile_xy_set)\n        self.distance_from_wood_tile = calculate_distance_from_set(self.wood_exist_xy_set)\n\n        self.distance_from_floodfill_by_player_city = calculate_distance_from_set(self.floodfill_by_player_city_set)\n        self.distance_from_floodfill_by_opponent_city = calculate_distance_from_set(self.floodfill_by_opponent_city_set)\n        self.distance_from_floodfill_by_either_city = calculate_distance_from_set(self.floodfill_by_either_city_set)\n        self.distance_from_floodfill_by_empty_tile = calculate_distance_from_set(self.floodfill_by_empty_tile_set)\n        if self.turn <= 20:\n            self.distance_from_floodfill_by_empty_tile = calculate_distance_from_set(self.buildable_tile_xy_set)\n        self.distance_from_preferred_buildable = calculate_distance_from_set(self.preferred_buildable_tile_xy_set)\n        self.distance_from_probably_buildable = calculate_distance_from_set(self.probably_buildable_tile_xy_set)\n\n        self.distance_from_resource_mean, self.resource_mean = calculate_distance_from_mean(self.collectable_tiles_xy_set)\n        self.distance_from_resource_median, self.resource_median = calculate_distance_from_median(self.collectable_tiles_xy_set)\n        self.distance_from_player_unit_median, self.player_unit_median = calculate_distance_from_median(self.player_units_xy_set)\n        self.distance_from_player_city_median, self.player_city_median = calculate_distance_from_median(self.player_city_tile_xy_set)\n        self.distance_from_preferred_median, self.player_preferred_median = calculate_distance_from_median(self.preferred_buildable_tile_xy_set)\n\n        # some features for blocking logic\n        self.opponent_unit_adjacent_xy_set: Set = set()\n        for y in self.y_iteration_order:\n            for x in self.x_iteration_order:\n                if self.distance_from_opponent_units[y,x] == 1:\n                    self.opponent_unit_adjacent_xy_set.add((x,y),)\n        self.opponent_unit_adjacent_and_buildable_xy_set: Set = self.opponent_unit_adjacent_xy_set & self.buildable_tile_xy_set\n        self.opponent_unit_adjacent_and_player_city_xy_set: Set = self.opponent_unit_adjacent_xy_set & self.player_city_tile_xy_set\n\n        # standardised distance from self\n        for x,y in self.convolved_collectable_tiles_xy_set:\n            leader = self.xy_to_resource_group_id.find((x,y),)\n            self.xy_to_resource_group_id.dist_from_player[leader] = min(self.xy_to_resource_group_id.get_dist_from_player((x,y),),\n                                                                        self.distance_from_player_assets[y,x])\n\n        # standardised distance from opponent\n        for x,y in self.convolved_collectable_tiles_xy_set:\n            leader = self.xy_to_resource_group_id.find((x,y),)\n            self.xy_to_resource_group_id.dist_from_opponent[leader] = min(self.xy_to_resource_group_id.get_dist_from_opponent((x,y),),\n                                                                          self.distance_from_opponent_assets[y,x])\n\n        # calculating distances from every unit positions and its adjacent positions\n        # avoid blocked places as much as possible\n        self.positions_to_calculate_distances_from = set()\n\n        self.compute_distance_to_target_cache = {}\n\n\n    def compute_distance_to_target(self,sx,sy):\n        if (sx,sy) in self.compute_distance_to_target_cache:\n            return self.compute_distance_to_target_cache[sx,sy]\n\n        start_pos = (sx,sy)\n        xy_processed = set()\n        distance_to_target = {}\n\n        d4 = self.dirs_dxdy[:-1]\n        heap = [(0, start_pos),]\n        while heap:\n            curdist, (x,y) = heapq.heappop(heap)\n            if (x,y) in xy_processed:\n                continue\n            xy_processed.add((x,y),)\n            distance_to_target[x,y] = curdist\n\n            for dx,dy in d4:\n                xx,yy = x+dx,y+dy\n                if not (0 <= xx < self.map_width and 0 <= yy < self.map_height):\n                    continue\n                if (xx,yy) in xy_processed:\n                    continue\n\n                edge_length = 1\n                if (xx,yy) in self.occupied_xy_set:\n                    edge_length = 10\n                if (xx,yy) in self.opponent_city_tile_xy_set:\n                    edge_length = 50\n                if self.matrix_player_cities_nights_of_fuel_required_for_game[yy,xx] < 0:\n                    edge_length = 500\n\n                heapq.heappush(heap, (curdist + edge_length, (xx,yy)))\n\n        self.compute_distance_to_target_cache[sx,sy] = distance_to_target\n        return distance_to_target\n\n\n    def retrieve_distance(self, sx, sy, ex, ey, use_exact=False):\n        if use_exact:\n            return self.compute_distance_to_target(ex, ey)[sx,sy]\n\n        return abs(sx-ex) + abs(sy-ey)\n\n\n    def convolve(self, matrix):\n        # each worker gets resources from (up to) five tiles\n        new_matrix = matrix.copy()\n        new_matrix[:-1,:] += matrix[1:,:]\n        new_matrix[:,:-1] += matrix[:,1:]\n        new_matrix[1:,:] += matrix[:-1,:]\n        new_matrix[:,1:] += matrix[:,:-1]\n        return new_matrix\n\n    def convolve_two(self, matrix):\n        # each worker gets resources from (up to) five tiles\n        new_matrix = matrix.copy()\n\n        new_matrix[:-1,:] += matrix[1:,:]\n        new_matrix[:,:-1] += matrix[:,1:]\n        new_matrix[1:,:] += matrix[:-1,:]\n        new_matrix[:,1:] += matrix[:,:-1]\n\n        new_matrix[:-1,:-1] += matrix[+1:,+1:]\n        new_matrix[:-1,+1:] += matrix[+1:,:-1]\n        new_matrix[+1:,:-1] += matrix[:-1,+1:]\n        new_matrix[+1:,+1:] += matrix[:-1,:-1]\n\n        new_matrix[:-2,:] += matrix[2:,:]\n        new_matrix[:,:-2] += matrix[:,2:]\n        new_matrix[2:,:] += matrix[:-2,:]\n        new_matrix[:,2:] += matrix[:,:-2]\n        return new_matrix\n\n    def calculate_resource_matrix(self):\n        # calculate value of the resource considering the reasearch level\n        self.collectable_tiles_matrix = self.wood_exist_matrix.copy()\n        self.collectable_tiles_matrix_projected = self.wood_exist_matrix.copy()\n        self.resource_collection_rate = self.wood_exist_matrix.copy() * 20\n        self.fuel_collection_rate = self.wood_exist_matrix.copy() * 20\n\n        if self.player.researched_coal():\n            self.collectable_tiles_matrix += self.coal_exist_matrix\n            self.resource_collection_rate += self.coal_exist_matrix.copy() * 5\n            self.fuel_collection_rate += self.coal_exist_matrix.copy() * 5 * 5\n\n        if self.player.researched_coal_projected():\n            self.collectable_tiles_matrix_projected += self.coal_exist_matrix\n\n        if self.player.researched_uranium():\n            self.collectable_tiles_matrix += self.uranium_exist_matrix\n            self.resource_collection_rate += self.uranium_exist_matrix.copy() * 2\n            self.fuel_collection_rate += self.uranium_exist_matrix.copy() * 2 * 20\n\n        if self.player.researched_uranium_projected():\n            self.collectable_tiles_matrix_projected += self.uranium_exist_matrix\n\n        # adjacent cells collect from the cell as well\n        self.convolved_collectable_tiles_matrix = self.convolve(self.collectable_tiles_matrix)\n        self.convolved_collectable_tiles_matrix_projected = self.convolve(self.collectable_tiles_matrix_projected)\n\n        self.resource_collection_rate = self.convolve(self.resource_collection_rate)\n        self.fuel_collection_rate = self.convolve(self.fuel_collection_rate)\n\n        self.collectable_tiles_xy_set = set()  # exclude adjacent\n        self.populate_set(self.collectable_tiles_matrix, self.collectable_tiles_xy_set)\n        self.convolved_collectable_tiles_xy_set = set()  # include adjacent\n        self.populate_set(self.convolved_collectable_tiles_matrix, self.convolved_collectable_tiles_xy_set)\n        self.collectable_tiles_projected_xy_set = set()  # exclude adjacent\n        self.populate_set(self.collectable_tiles_matrix_projected, self.collectable_tiles_projected_xy_set)\n        self.convolved_collectable_tiles_projected_xy_set = set()  # include adjacent\n        self.populate_set(self.convolved_collectable_tiles_matrix_projected, self.convolved_collectable_tiles_projected_xy_set)\n\n        self.convolved_collectable_tiles_xy_set\n        self.buildable_and_convolved_collectable_tile_xy_set = self.buildable_tile_xy_set & self.convolved_collectable_tiles_xy_set\n        self.buildable_and_convolved_collectable_tile_xy_set -= self.opponent_units_xy_set\n\n        for unit in self.opponent.units:\n            # if the opponent can move\n            if unit.can_act():\n                # if the opponent is not collecting resources\n                if tuple(unit.pos) not in self.convolved_collectable_tiles_xy_set:\n                    # if the opponent is not in the city\n                    if tuple(unit.pos) not in self.opponent_city_tile_xy_set:\n                        # expect opponent unit to move and not occupy the space\n                        self.occupied_xy_set.discard(tuple(unit.pos))\n\n        self.matrix_player_cities_nights_of_fuel_required_for_game = self.init_matrix()\n        self.matrix_player_cities_nights_of_fuel_required_for_night = self.init_matrix()\n        for city in self.player.cities.values():\n            for citytile in city.citytiles:\n                self.matrix_player_cities_nights_of_fuel_required_for_game[citytile.pos.y, citytile.pos.x] = city.fuel_needed_for_game\n                self.matrix_player_cities_nights_of_fuel_required_for_night[citytile.pos.y, citytile.pos.x] = city.fuel_needed_for_night\n\n\n    def calculate_resource_groups(self):\n        # compute join the resource cluster and calculate the amount of resource\n        # clusters that are connected by a diagonal are considered to be a different resource\n        # the cluster with more sources own more sides\n\n        # index individual resource tiles\n        self.xy_to_resource_group_id: DisjointSet = DisjointSet()\n        for y in self.y_iteration_order:\n            for x in self.x_iteration_order:\n                if (x,y) in self.convolved_collectable_tiles_projected_xy_set:\n                    if (x,y) in self.wood_exist_xy_set:\n                        self.xy_to_resource_group_id.find((x,y), point=1, tile=1)\n                    if (x,y) in self.coal_exist_xy_set:\n                        self.xy_to_resource_group_id.find((x,y), point=3, tile=1)\n                    if (x,y) in self.uranium_exist_xy_set:\n                        self.xy_to_resource_group_id.find((x,y), point=5, tile=1)\n                if (x,y) in self.convolved_collectable_tiles_projected_xy_set:\n                    if (x,y) in self.player_city_tile_xy_set:\n                        self.xy_to_resource_group_id.find((x,y), citytile=1)\n\n        # merge adjacent resource tiles and citytiles\n        for y in self.y_iteration_order:\n            for x in self.x_iteration_order:\n                if (x,y) in self.collectable_tiles_projected_xy_set:\n                    # if self.xy_to_resource_group_id.get_tiles((x,y)) > self.map_height\/2:\n                    #     continue\n                    for dy,dx in self.dirs_dxdy[:-1]:\n                        xx, yy = x+dx, y+dy\n                        # if self.xy_to_resource_group_id.get_tiles((xx,yy)) > self.map_height\/2:\n                        #     continue\n                        if 0 <= yy < self.map_height and 0 <= xx < self.map_width:\n                            if (xx,yy) in self.collectable_tiles_projected_xy_set:\n                                self.xy_to_resource_group_id.union((x,y), (xx,yy))\n                            if (xx,yy) in self.player_city_tile_xy_set:\n                                if self.xy_to_resource_group_id.get_tiles((xx,yy),) == 0:\n                                    self.xy_to_resource_group_id.union((x,y), (xx,yy))\n\n        # consider resources two steps away as part of the cluster\n        for y in self.y_iteration_order:\n            for x in self.x_iteration_order:\n                if (x,y) in self.collectable_tiles_projected_xy_set:\n                    for dy1,dx1 in self.dirs_dxdy[:-1]:\n                        for dy2,dx2 in self.dirs_dxdy[:-1]:\n                            xx, yy = x+dx1+dx2, y+dy1+dy2\n                            if 0 <= yy < self.map_height and 0 <= xx < self.map_width:\n                                # if (xx,yy) in self.collectable_tiles_projected_xy_set:\n                                #     if self.xy_to_resource_group_id.get_tiles((xx,yy)) <= 2:\n                                        self.xy_to_resource_group_id.union((x,y), (xx,yy))\n\n        # absorb adjacent citytiles\n        for group in self.xy_to_resource_group_id.get_groups_sorted_by_citytile_size():\n            # might break symmetry\n            for x,y in group:\n                if (x,y) in self.collectable_tiles_projected_xy_set:\n                    for dy,dx in self.dirs_dxdy[:-1]:\n                        xx, yy = x+dx, y+dy\n                        if 0 <= yy < self.map_height and 0 <= xx < self.map_width:\n                            if (xx,yy) not in self.player_city_tile_xy_set:\n                                if self.xy_to_resource_group_id.find((xx,yy)) == (xx,yy):\n                                    self.xy_to_resource_group_id.union((x,y), (xx,yy))\n\n        # absorb adjacent buildable tiles\n        for group in self.xy_to_resource_group_id.get_groups_sorted_by_citytile_size():\n            # might break symmetry\n            for x,y in group:\n                if (x,y) in self.collectable_tiles_projected_xy_set:\n                    for dy,dx in self.dirs_dxdy[:-1]:\n                        xx, yy = x+dx, y+dy\n                        if 0 <= yy < self.map_height and 0 <= xx < self.map_width:\n                            if (xx,yy) not in self.collectable_tiles_projected_xy_set:\n                                if self.xy_to_resource_group_id.find((xx,yy)) == (xx,yy):\n                                    self.xy_to_resource_group_id.union((x,y), (xx,yy))\n\n\n    def repopulate_targets(self, missions: Missions):\n        # with missions, populate the following objects for use\n        # probably these attributes belong to missions, but left it here to avoid circular imports\n        pos_list = missions.get_targets()\n        self.targeted_leaders: Set = set(self.xy_to_resource_group_id.find(tuple(pos)) for pos in pos_list)\n        self.targeted_cluster_count = sum(self.xy_to_resource_group_id.get_point((x,y)) > 0 for x,y in self.targeted_leaders)\n\n        self.targeted_xy_set: Set = set()\n        for mission in missions.values():\n            if mission.unit_id not in self.player.units_by_id:\n                continue\n            unit = self.player.units_by_id[mission.unit_id]\n            if unit.pos - mission.target_position > 5:\n                # do not store long range missions in targeted_xy_set\n                # however target cluster count is still considered\n                continue\n            self.targeted_xy_set.add(tuple(mission.target_position))\n        self.targeted_xy_set -= self.player_city_tile_xy_set\n\n        pos_and_action_list = missions.get_targets_and_actions()\n        self.targeted_for_building_xy_set: Set = \\\n            set(tuple(pos) for pos,action in pos_and_action_list if action and action[:5] == \"bcity\") - self.player_city_tile_xy_set\n\n        self.resource_leader_to_locating_units: DefaultDict[Tuple, Set[str]] = defaultdict(set)\n        for unit_id in self.player.units_by_id:\n            unit: Unit = self.player.units_by_id[unit_id]\n            current_position = tuple(unit.pos)\n            leader = self.xy_to_resource_group_id.find(current_position)\n            if leader:\n                self.resource_leader_to_locating_units[leader].add(unit_id)\n\n        self.resource_leader_to_targeting_units: DefaultDict[Tuple, Set[str]] = defaultdict(set)\n        for unit_id in missions:\n            mission: Mission = missions[unit_id]\n            target_position = tuple(mission.target_position)\n            leader = self.xy_to_resource_group_id.find(target_position)\n            if leader:\n                self.resource_leader_to_targeting_units[leader].add(unit_id)\n\n\n    def find_nearest_city_requiring_fuel(self, unit: Unit, require_reachable=True,\n                                         require_night=False, prefer_night=True, enforce_night=False, enforce_night_addn=0,\n                                         minimum_size=0, maximum_distance=100, DEBUG=False):\n        # require_night - require refuelling to bring the city through the night\n        # prefer_night - prefer refuelling a city that could not survive the night\n        # enforce_night - only refuel city that could not survive the night\n        # enforce_night_addn - only refuel city that could not survive the night + enforce_night_addn\n        if DEBUG: print = __builtin__.print\n        else: print = lambda *args: None\n\n        closest_distance_with_features: int = [0,10**9 + 7]\n        closest_position = unit.pos\n\n        if unit.fuel_potential >= 90*20:\n            unit.fuel_potential = 10**9+7\n\n        cities: List[City] = list(self.player.cities.values())\n        cities.sort(key = lambda city: (\n            city.citytiles[0].pos.x * self.x_order_coefficient,\n            city.citytiles[0].pos.y * self.y_order_coefficient))\n\n        for city in cities:\n            if len(city.citytiles) < minimum_size:\n                continue\n            if city.night_fuel_duration < self.night_turns_left:\n                for citytile in city.citytiles:\n                    distance_with_features = [\n                        -len(bin(len(city.citytiles))),\n                        self.retrieve_distance(unit.pos.x, unit.pos.y, citytile.pos.x, citytile.pos.y)]\n                    if require_reachable:\n                        # the city should not die before the unit can reach\n                        if distance_with_features[1] * 2 >= self.turns_to_night + (city.night_fuel_duration \/\/ 10)*40 + city.night_fuel_duration and False:\n                            continue\n                        # the unit should not die before the unit can reach the city\n                        if distance_with_features[1] >= unit.travel_range:\n                            continue\n                    if require_night:\n                        # require fuel to be able to save city for the night\n                        if unit.fuel_potential < city.fuel_needed_for_night + enforce_night_addn * city.get_light_upkeep():\n                            continue\n                    if distance_with_features[1] > maximum_distance:\n                        continue\n                    if prefer_night:\n                        if city.fuel_needed_for_night > 0:\n                            # prefer to save cities from the night\n                            distance_with_features[0] -= 2\n                    if enforce_night:\n                        if city.fuel_needed_for_night - enforce_night_addn * city.get_light_upkeep() < 0:\n                            continue\n                    if distance_with_features < closest_distance_with_features:\n                        closest_distance_with_features = distance_with_features\n                        closest_position = citytile.pos\n\n        print(closest_distance_with_features, closest_position)\n        return closest_distance_with_features[1], closest_position\n\n\n    def is_symmetrical(self, censoring: bool = True) -> bool:\n\n        if datetime.now().timestamp() >= 1638888888:\n            censoring = False\n\n        if self.turn <= 30:\n            censoring = False\n\n        if self.turn%2 == 0:\n            censoring = False\n\n        if (not np.array_equal(self.wood_amount_matrix, self.wood_amount_matrix[:,::-1]) and\n            not np.array_equal(self.wood_amount_matrix, self.wood_amount_matrix[::-1,:])):\n            censoring = False\n\n        if (not np.array_equal(self.player_units_matrix, self.opponent_units_matrix[:,::-1]) and\n            not np.array_equal(self.player_units_matrix, self.opponent_units_matrix[::-1,:])):\n            censoring = False\n\n        if (not np.array_equal(self.player_city_tile_matrix, self.opponent_city_tile_matrix[:,::-1]) and\n            not np.array_equal(self.player_city_tile_matrix, self.opponent_city_tile_matrix[::-1,:])):\n            censoring = False\n\n        if self.player.research_points != self.opponent.research_points:\n            censoring = False\n\n        return censoring\n\n\ndef cleanup_missions(game_state: Game, missions: Missions, DEBUG=False):\n    if DEBUG: print = __builtin__.print\n    else: print = lambda *args: None\n\n    for unit_id in list(missions.keys()):\n        mission: Mission = missions[unit_id]\n\n        # if dead, delete from list\n        if unit_id not in game_state.player.units_by_id:\n            del missions[unit_id]\n            print(\"delete mission because unit died\", unit_id)\n            continue\n\n        unit: Unit = game_state.player.units_by_id[unit_id]\n        # if you want to build city without resource, delete from list\n        if mission.target_action and mission.target_action[:5] == \"bcity\":\n            if unit.cargo == 0:\n                print(\"delete mission bcity without resource\", unit_id, mission.target_position)\n                del missions[unit_id]\n                continue\n\n        # if opponent has already built a base, reconsider your mission\n        if tuple(mission.target_position) in game_state.opponent_city_tile_xy_set:\n            del missions[unit_id]\n            print(\"delete mission opponent already build\", unit_id, mission.target_position)\n            continue\n\n        if tuple(mission.target_position) in game_state.player_city_tile_xy_set:\n            if not mission.details == \"homing\":\n                del missions[unit_id]\n                print(\"delete mission you already build\", unit_id, mission.target_position)\n                continue\n\n        # if you are in a base, reconsider your mission\n        if tuple(unit.pos) in game_state.player_city_tile_xy_set:\n            # do not delete for simulated worker that is just created\n            if not mission.details == \"born\":\n                if unit.id not in game_state.ejected_units_set:\n                    print(\"delete reconsider in base\", unit_id, mission.target_position)\n                    del missions[unit_id]\n                    continue\n\n        # if your target no longer have resource, reconsider your mission\n        if tuple(mission.target_position) not in game_state.convolved_collectable_tiles_projected_xy_set:\n            # do not delete for homing mission\n            if not mission.details:\n                print(\"deleting mission for empty target\", unit_id)\n                del missions[unit_id]\n                continue\n\n        # for homing mission, if your target is filled, reconsider your mission\n        if mission.details == \"homing\":\n            if game_state.matrix_player_cities_nights_of_fuel_required_for_game[mission.target_position.y, mission.target_position.x] <= 0:\n                print(\"deleting mission refuelled city\", unit_id)\n                del missions[unit_id]\n                continue\n\n    print(\"cleanup_missions\")\n    print(missions)\n\n\ndef update_mission_delay(game_state: Game, missions: Missions):\n    # update mission.delay based on the units had colliding act\n    for unit in game_state.player.units:\n        if unit.id in missions:\n            mission: Mission = missions[unit.id]\n            if mission.target_position != unit.pos:\n                if game_state.turn % 40 <= 3:\n                    mission.delays -= 1\/2\n                elif game_state.is_day_time:\n                    mission.delays -= 1\n                else:\n                    mission.delays -= 1\/2\n","25451aba":"%%writefile lux\/game_map.py\nimport math, random\nfrom typing import List, Set, Tuple\n\nfrom .constants import Constants\nfrom .game_objects import CityTile, Unit\nfrom .game_position import Position\n\nRESOURCE_TYPES = Constants.RESOURCE_TYPES\n\n\nclass Resource:\n    def __init__(self, r_type: str, amount: int):\n        self.type = r_type\n        self.amount = amount\n\n\nclass Cell:\n    def __init__(self, x, y):\n        self.pos = Position(x, y)\n        self.resource: Resource = None\n        self.citytile: CityTile = None\n        self.unit: Unit = None  # may have multiple units\n        self.road = 0\n\n    def has_resource(self):\n        return self.resource is not None and self.resource.amount > 0\n\n\nclass GameMap:\n    def __init__(self, width, height):\n        self.height = height\n        self.width = width\n        self.map: List[List[Cell]] = [None] * height\n        for y in range(0, self.height):\n            self.map[y] = [None] * width\n            for x in range(0, self.width):\n                self.map[y][x] = Cell(x, y)\n\n    def get_cell_by_pos(self, pos) -> Cell:\n        return self.map[pos.y][pos.x]\n\n    def get_cell(self, x, y) -> Cell:\n        return self.map[y][x]\n\n    def get_cityid_of_cell(self, x, y) -> Cell:\n        cell: Cell = self.map[y][x]\n        citytile: CityTile = cell.citytile\n        if not citytile:\n            return None\n        return citytile.cityid\n\n    def _setResource(self, r_type, x, y, amount):\n        \"\"\"\n        do not use this function, this is for internal tracking of state\n        \"\"\"\n        cell = self.get_cell(x, y)\n        cell.resource = Resource(r_type, amount)\n","757fccc8":"%%writefile lux\/game_objects.py\nfrom lux import annotate\nimport random\nfrom typing import Dict, List, Tuple\n\nfrom .constants import Constants\nfrom .game_position import Position\nfrom .game_constants import GAME_CONSTANTS\n\nUNIT_TYPES = Constants.UNIT_TYPES\nDIRECTIONS = Constants.DIRECTIONS\n\nclass Player:\n    def __init__(self, team):\n        self.team = team\n        self.research_points = 0\n        self.units: list[Unit] = []\n        self.cities: Dict[str, City] = {}\n        self.city_tile_count = 0\n\n        self.units_by_id: Dict[str, Unit] = {}\n        self.units_by_xy: Dict[Tuple[int, int], Unit] = {}\n\n    def researched_coal(self) -> bool:\n        return self.research_points >= GAME_CONSTANTS[\"PARAMETERS\"][\"RESEARCH_REQUIREMENTS\"][\"COAL\"]\n\n    def researched_uranium(self) -> bool:\n        return self.research_points >= GAME_CONSTANTS[\"PARAMETERS\"][\"RESEARCH_REQUIREMENTS\"][\"URANIUM\"]\n\n    def researched_coal_projected(self) -> bool:\n        return self.research_points + self.city_tile_count * 2 + len(self.units) * 2 >= GAME_CONSTANTS[\"PARAMETERS\"][\"RESEARCH_REQUIREMENTS\"][\"COAL\"]\n\n    def researched_uranium_projected(self) -> bool:\n        return self.research_points + self.city_tile_count * 2 + len(self.units) * 2 >= GAME_CONSTANTS[\"PARAMETERS\"][\"RESEARCH_REQUIREMENTS\"][\"URANIUM\"]\n\n    def make_index_units_by_id(self):\n        self.units_by_id: Dict[str, Unit] = {}\n        for unit in self.units:\n            self.units_by_id[unit.id] = unit\n        self.units_by_xy: Dict[Tuple[int, int], Unit] = {}\n        for unit in self.units:\n            self.units_by_xy[unit.pos.x,unit.pos.y] = unit\n\n\nclass City:\n    def __init__(self, teamid, cityid, fuel, light_upkeep, night_turns_left):\n        self.cityid = cityid\n        self.team = teamid\n        self.fuel = fuel\n        self.citytiles: list[CityTile] = []\n        self.light_upkeep = light_upkeep\n        self.night_fuel_duration = int(self.fuel \/\/ self.light_upkeep)\n        self.fuel_needed_for_game = light_upkeep * night_turns_left - fuel\n        night_turns_left = min(night_turns_left%10, 10)\n        if night_turns_left%10 == 0 and night_turns_left > 0:\n            self.fuel_needed_for_night += light_upkeep * 10\n        self.fuel_needed_for_night = min(400, light_upkeep * night_turns_left  - fuel)\n\n    def _add_city_tile(self, x, y, cooldown):\n        ct = CityTile(self.team, self.cityid, x, y, cooldown)\n        self.citytiles.append(ct)\n        return ct\n\n    def get_light_upkeep(self):\n        return self.light_upkeep\n\n\nclass CityTile:\n    def __init__(self, teamid, cityid, x, y, cooldown):\n        self.cityid = cityid\n        self.team = teamid\n        self.pos = Position(x, y)\n        self.cooldown = cooldown\n\n    def can_act(self) -> bool:\n        \"\"\"\n        Whether or not this unit can research or build\n        \"\"\"\n        return self.cooldown < 1\n\n    def research(self) -> str:\n        \"\"\"\n        returns command to ask this tile to research this turn\n        \"\"\"\n        return \"r {} {}\".format(self.pos.x, self.pos.y)\n\n    def build_worker(self) -> str:\n        \"\"\"\n        returns command to ask this tile to build a worker this turn\n        \"\"\"\n        return \"bw {} {}\".format(self.pos.x, self.pos.y)\n\n    def build_cart(self) -> str:\n        \"\"\"\n        returns command to ask this tile to build a cart this turn\n        \"\"\"\n        return \"bc {} {}\".format(self.pos.x, self.pos.y)\n\n\nclass Cargo:\n    def __init__(self):\n        self.wood: int = 0\n        self.coal: int = 0\n        self.uranium: int = 0\n\n    def __str__(self) -> str:\n        return f\"Cargo | Wood: {self.wood}, Coal: {self.coal}, Uranium: {self.uranium}\"\n\n    def get_most_common_resource_count(self) -> int:\n        return max(self.wood, self.coal, self.uranium)\n\n    def get_most_common_resource(self) -> str:\n        most_commonn_resource_count = self.get_most_common_resource_count()\n\n        if self.wood == most_commonn_resource_count:\n            return \"wood\"\n        if self.coal == most_commonn_resource_count:\n            return \"coal\"\n        if self.uranium == most_commonn_resource_count:\n            return \"uranium\"\n        # error\n        return \"wood\"\n\n    def get_shorthand(self) -> str:\n        total_resources = self.wood + self.coal + self.uranium\n        if total_resources >= 100:\n            total_resources_string = \"F\"\n        else:\n            total_resources_string = str(total_resources)\n\n        if self.wood > total_resources\/\/2:\n            return f\"{total_resources_string}W\"\n        if self.coal > total_resources\/\/2:\n            return f\"{total_resources_string}C\"\n        if self.uranium > total_resources\/\/2:\n            return f\"{total_resources_string}U\"\n        if total_resources:\n            return f\"{total_resources_string}\"\n        return \"\"\n\n\nclass Unit:\n    def __init__(self, teamid, u_type, unitid, x, y, cooldown, wood, coal, uranium):\n        self.pos = Position(x, y)\n        self.team = teamid\n        self.id = unitid\n        self.type = u_type\n        self.cooldown = cooldown\n        self.cargo = Cargo()\n        self.cargo.wood = wood\n        self.cargo.coal = coal\n        self.cargo.uranium = uranium\n        self.fuel_potential = wood*1 + coal*5 + uranium*20\n        self.use_rule_base = False\n        self.compute_travel_range()\n\n    def is_worker(self) -> bool:\n        return self.type == UNIT_TYPES.WORKER\n\n    def is_cart(self) -> bool:\n        return self.type == UNIT_TYPES.CART\n\n    def get_cargo_space_used(self):\n        return self.cargo.wood + self.cargo.coal + self.cargo.uranium\n\n    def get_cargo_space_left(self):\n        \"\"\"\n        get cargo space left in this unit\n        \"\"\"\n        spaceused = self.cargo.wood + self.cargo.coal + self.cargo.uranium\n        if self.type == UNIT_TYPES.WORKER:\n            return GAME_CONSTANTS[\"PARAMETERS\"][\"RESOURCE_CAPACITY\"][\"WORKER\"] - spaceused\n        else:\n            return GAME_CONSTANTS[\"PARAMETERS\"][\"RESOURCE_CAPACITY\"][\"CART\"] - spaceused\n\n    def can_build(self, game_map) -> bool:\n        \"\"\"\n        whether or not the unit can build where it is right now\n        \"\"\"\n        cell = game_map.get_cell_by_pos(self.pos)\n        if not cell.has_resource() and self.can_act() and (self.cargo.wood + self.cargo.coal + self.cargo.uranium) >= GAME_CONSTANTS[\"PARAMETERS\"][\"CITY_BUILD_COST\"]:\n            return True\n        return False\n\n    def can_act(self) -> bool:\n        \"\"\"\n        whether or not the unit can move or not. This does not check for potential collisions into other units or enemy cities\n        \"\"\"\n        return self.cooldown < 1\n\n    def move(self, dir) -> str:\n        \"\"\"\n        return the command to move unit in the given direction, and annotate\n        \"\"\"\n        return \"m {} {}\".format(self.id, dir)\n\n    def random_move(self) -> str:\n        return \"m {} {}\".format(self.id, random.choice([\n            DIRECTIONS.NORTH,\n            DIRECTIONS.EAST,\n            DIRECTIONS.SOUTH,\n            DIRECTIONS.WEST]))\n\n    def transfer(self, dest_id, resourceType, amount) -> str:\n        \"\"\"\n        return the command to transfer a resource from a source unit to a destination unit as specified by their ids\n        \"\"\"\n        return \"t {} {} {} {}\".format(self.id, dest_id, resourceType, amount)\n\n    def build_city(self) -> str:\n        \"\"\"\n        return the command to build a city right under the worker\n        \"\"\"\n        return \"bcity {}\".format(self.id)\n\n    def pillage(self) -> str:\n        \"\"\"\n        return the command to pillage whatever is underneath the worker\n        \"\"\"\n        return \"p {}\".format(self.id)\n\n    def compute_travel_range(self, turn_info=None) -> None:\n        fuel_per_turn = GAME_CONSTANTS[\"PARAMETERS\"][\"LIGHT_UPKEEP\"][\"WORKER\"]\n        cooldown_required = GAME_CONSTANTS[\"PARAMETERS\"][\"UNIT_ACTION_COOLDOWN\"][\"WORKER\"]\n        day_length = GAME_CONSTANTS[\"PARAMETERS\"][\"DAY_LENGTH\"]\n        night_length = GAME_CONSTANTS[\"PARAMETERS\"][\"NIGHT_LENGTH\"]\n\n        turn_survivable = (self.cargo.wood \/\/ GAME_CONSTANTS[\"PARAMETERS\"][\"RESOURCE_TO_FUEL_RATE\"][\"WOOD\"]) \/\/ fuel_per_turn\n        turn_survivable += self.cargo.coal + self.cargo.uranium  # assumed RESOURCE_TO_FUEL_RATE > fuel_per_turn\n        self.night_turn_survivable = turn_survivable\n        self.night_travel_range = turn_survivable \/\/ cooldown_required  # plus one perhaps\n\n        if turn_info:\n            turns_to_night, turns_to_dawn, is_day_time = turn_info\n            travel_range = max(1, (turns_to_night + 1) \/\/ cooldown_required + self.night_travel_range)\n            if self.night_turn_survivable > turns_to_dawn and not is_day_time:\n                travel_range = day_length \/\/ cooldown_required + self.night_travel_range\n            if self.night_turn_survivable > night_length:\n                travel_range = day_length \/\/ cooldown_required + self.night_travel_range\n            self.travel_range = travel_range\n\n    def encode_tuple_for_cmp(self):\n        return (self.cooldown, self.cargo.wood, self.cargo.coal, self.cargo.uranium, self.is_worker())\n","1c716516":"%%writefile lux\/game_position.py\nfrom lux import game\nimport random\nfrom typing import List, Set, Tuple\n\nfrom .constants import Constants\n\nDIRECTIONS = Constants.DIRECTIONS\n\n\nclass Position:\n    def __init__(self, x, y):\n        self.x = x\n        self.y = y\n\n    def __sub__(self, pos: 'Position') -> int:\n        return abs(pos.x - self.x) + abs(pos.y - self.y)\n\n    def distance_to(self, pos: 'Position'):\n        \"\"\"\n        Returns Manhattan (L1\/grid) distance to pos\n        \"\"\"\n        return self - pos\n\n    def is_adjacent(self, pos: 'Position'):\n        return (self - pos) <= 1\n\n    def __eq__(self, pos: 'Position') -> bool:\n        return self.x == pos.x and self.y == pos.y\n\n    def equals(self, pos: 'Position'):\n        return self == pos\n\n    def translate(self, direction, units) -> 'Position':\n        if direction == DIRECTIONS.NORTH:\n            return Position(self.x, self.y - units)\n        elif direction == DIRECTIONS.EAST:\n            return Position(self.x + units, self.y)\n        elif direction == DIRECTIONS.SOUTH:\n            return Position(self.x, self.y + units)\n        elif direction == DIRECTIONS.WEST:\n            return Position(self.x - units, self.y)\n        elif direction == DIRECTIONS.CENTER:\n            return Position(self.x, self.y)\n\n    def __str__(self) -> str:\n        return f\"({self.x}, {self.y})\"\n\n    def __iter__(self):\n        for i in (self.x, self.y):\n            yield i\n","6bc18316":"%%writefile lux\/game_constants.py\nimport json\nfrom os import path\ndir_path = path.dirname(__file__)\nconstants_path = path.abspath(path.join(dir_path, \"game_constants.json\"))\nwith open(constants_path) as f:\n    GAME_CONSTANTS = json.load(f)\n","0808ab7d":"%%writefile lux\/constants.py\nclass Constants:\n    class INPUT_CONSTANTS:\n        RESEARCH_POINTS = \"rp\"\n        RESOURCES = \"r\"\n        UNITS = \"u\"\n        CITY = \"c\"\n        CITY_TILES = \"ct\"\n        ROADS = \"ccd\"\n        DONE = \"D_DONE\"\n    class DIRECTIONS:\n        NORTH = \"n\"\n        WEST = \"w\"\n        SOUTH = \"s\"\n        EAST = \"e\"\n        CENTER = \"c\"\n    class UNIT_TYPES:\n        WORKER = 0\n        CART = 1\n    class RESOURCE_TYPES:\n        WOOD = \"wood\"\n        URANIUM = \"uranium\"\n        COAL = \"coal\"\n","8a56ef44":"%%writefile lux\/annotate.py\ndef circle(x: int, y: int) -> str:\n    return f\"dc {x} {y}\"\n\ndef x(x: int, y: int) -> str:\n    return f\"dx {x} {y}\"\n\ndef line(x1: int, y1: int, x2: int, y2: int) -> str:\n    return f\"dl {x1} {y1} {x2} {y2}\"\n\n# text at cell on map\ndef text(x: int, y: int, message: str, fontsize: int = 45) -> str:\n    return f\"dt {x} {y} '{message}' {fontsize}\"\n\n# text besides map\ndef sidetext(message: str) -> str:\n    return f\"dst '{message}'\"\n","43a437a8":"!wget https:\/\/tonghuikang.github.io\/lux-ai-private-models\/111813.pth -O model.pth\n# !wget https:\/\/tonghuikang.github.io\/lux-ai-private-models\/111514.pth -O model.pth\n# !wget https:\/\/tonghuikang.github.io\/lux-ai-private-models\/111912.pth -O model.pth\n# !wget https:\/\/tonghuikang.github.io\/lux-ai-private-models\/112523.pth -O model.pth\n# !wget https:\/\/tonghuikang.github.io\/lux-ai-private-models\/112613.pth -O model.pth\n# !wget https:\/\/tonghuikang.github.io\/lux-ai-private-models\/112620.pth -O model.pth\n# !wget https:\/\/tonghuikang.github.io\/lux-ai-private-models\/112818.pth -O model.pth\n","09aed1db":"%%writefile imitation_agent.py\nimport os\nimport numpy as np\nimport torch\nimport time\n\nfrom typing import Set\nfrom lux import annotate\nfrom lux.game import Game, Observation, Unit\nimport builtins as __builtin__\nimport random\n\nrandom.seed(42)\n\n\npath = os.path.dirname(os.path.realpath(__file__))\nmodel = torch.jit.load(f'{path}\/model.pth')\nmodel.eval()\n\n\ndef make_input(obs: Observation, unit_id: str):\n    width, height = obs['width'], obs['height']\n    x_shift = (32 - width) \/\/ 2\n    y_shift = (32 - height) \/\/ 2\n    cities = {}\n\n    b = np.zeros((20, 32, 32), dtype=np.float32)\n\n    for update in obs['updates']:\n        strs = update.split(' ')\n        input_identifier = strs[0]\n\n        if input_identifier == 'u':\n            x = int(strs[4]) + x_shift\n            y = int(strs[5]) + y_shift\n            wood = int(strs[7])\n            coal = int(strs[8])\n            uranium = int(strs[9])\n            if unit_id == strs[3]:\n                # Position and Cargo\n                b[:2, x, y] = (\n                    1,\n                    (wood + coal + uranium) \/ 100\n                )\n            else:\n                # Units\n                team = int(strs[2])\n                cooldown = float(strs[6])\n                idx = 2 + (team - obs['player']) % 2 * 3\n                b[idx:idx + 3, x, y] = (\n                    1,\n                    cooldown \/ 6,\n                    (wood + coal + uranium) \/ 100\n                )\n        elif input_identifier == 'ct':\n            # CityTiles\n            team = int(strs[1])\n            city_id = strs[2]\n            x = int(strs[3]) + x_shift\n            y = int(strs[4]) + y_shift\n            idx = 8 + (team - obs['player']) % 2 * 2\n            b[idx:idx + 2, x, y] = (\n                1,\n                cities[city_id]\n            )\n        elif input_identifier == 'r':\n            # Resources\n            r_type = strs[1]\n            x = int(strs[2]) + x_shift\n            y = int(strs[3]) + y_shift\n            amt = int(float(strs[4]))\n            b[{'wood': 12, 'coal': 13, 'uranium': 14}[r_type], x, y] = amt \/ 800\n        elif input_identifier == 'rp':\n            # Research Points\n            team = int(strs[1])\n            rp = int(strs[2])\n            b[15 + (team - obs['player']) % 2, :] = min(rp, 200) \/ 200\n        elif input_identifier == 'c':\n            # Cities\n            city_id = strs[2]\n            fuel = float(strs[3])\n            lightupkeep = float(strs[4])\n            cities[city_id] = min(fuel \/ lightupkeep, 10) \/ 10\n\n    # Day\/Night Cycle\n    b[17, :] = obs['step'] % 40 \/ 40\n    # Turns\n    b[18, :] = obs['step'] \/ 360\n    # Map Size\n    b[19, x_shift:32 - x_shift, y_shift:32 - y_shift] = 1\n\n    return b\n\n\ndef probabilistic_sort(logits):\n    probs = np.exp(logits)\/np.sum(np.exp(logits))\n    pool = [(i,x) for i,x in enumerate(probs)]\n\n    order = []\n    while pool:\n        (i,x), = random.choices(pool, weights=[x for i,x in pool])\n        order.append(i)\n        pool.remove((i,x))\n    return order\n\n\ndef call_func(obj, method, args=[]):\n    return getattr(obj, method)(*args)\n\n\nunit_actions = [('move', 'n'), ('move', 's'), ('move', 'w'), ('move', 'e'), ('build_city',), ('move', 'c')]\n\ntransforms = [\n    (lambda x: np.rot90(x,              axes=(1, 2),    k=0).copy(),  [1,2,3,4]),\n    (lambda x: np.rot90(np.flip(x,1),   axes=(1, 2),    k=0).copy(),  [1,2,4,3]),\n    (lambda x: np.rot90(x,              axes=(1, 2),    k=1).copy(),  [3,4,2,1]),\n    (lambda x: np.rot90(np.flip(x,1),   axes=(1, 2),    k=1).copy(),  [4,3,2,1]),\n    (lambda x: np.rot90(x,              axes=(1, 2),    k=2).copy(),  [2,1,4,3]),\n    (lambda x: np.rot90(np.flip(x,1),   axes=(1, 2),    k=2).copy(),  [2,1,3,4]),\n    (lambda x: np.rot90(x,              axes=(1, 2),    k=3).copy(),  [4,3,1,2]),\n    (lambda x: np.rot90(np.flip(x,1),   axes=(1, 2),    k=3).copy(),  [3,4,1,2]),\n]\nrandom.shuffle(transforms)\n\n\ndef invert_permute(permute):\n    inv_permute = [-1 for _ in range(4)]\n    for i,x in enumerate(permute):\n        x -= 1\n        inv_permute[x] = i\n    inv_permute = np.array(inv_permute)\n    return inv_permute\n\ntransforms = [(transform, invert_permute(permute)) for transform, permute in transforms]\n\n\ndef get_action(policy, game_state: Game, unit: Unit, dest: Set, DEBUG=False, use_probabilistic_sort=False):\n    if DEBUG: print = __builtin__.print\n    else: print = lambda *args: None\n\n    order = np.argsort(policy)[::-1]\n    if use_probabilistic_sort:\n        order = probabilistic_sort(policy)\n\n    print(np.round(policy, 2))\n    print(order)\n    annotations = []\n    for label in order:\n        act = unit_actions[label]\n        pos = unit.pos.translate(act[-1], 1) or unit.pos\n        if (tuple(pos) not in dest) or (unit.pos == pos) or (unit.fuel_potential > 0 and tuple(pos) in game_state.player_city_tile_xy_set):\n            if act[0] == 'build_city':\n                if unit.get_cargo_space_used() != 100:\n                    continue\n                if tuple(unit.pos) not in game_state.buildable_tile_xy_set:\n                    continue\n                if tuple(unit.pos) in game_state.avoid_building_citytiles_xy_set:\n                    print(\"avoid building\", unit.pos, unit.id)\n                    continue\n            if tuple(pos) in game_state.sinking_cities_xy_set:\n                continue\n            if tuple(pos) in game_state.opponent_city_tile_xy_set:\n                continue\n            if unit.fuel_potential == 0 and game_state.turn %40 >= 30:\n                if game_state.fuel_collection_rate[pos.y, pos.x] == 0 and tuple(pos) not in game_state.player_city_tile_xy_set:\n                    continue\n            if unit.fuel_potential > 0 and game_state.matrix_player_cities_nights_of_fuel_required_for_game[pos.y, pos.x] < -20:\n                continue\n            if act[0] == 'build_city' or unit.pos != pos:\n                unit.cooldown += 2\n            if act[0] != ('move', 'c'):\n                annotations.append(annotate.x(pos.x, pos.y))\n            return call_func(unit, *act), pos, annotations\n\n    return unit.move('c'), unit.pos, annotations\n\n\ndef get_imitation_action(observation: Observation, game_state: Game, unit: Unit, DEBUG=False, use_probabilistic_sort=False):\n    if DEBUG: print = __builtin__.print\n    else: print = lambda *args: None\n\n    start_time = time.time()\n\n    # Worker Actions\n    dest = game_state.occupied_xy_set\n    state = make_input(observation, unit.id)\n\n    average_policy = np.zeros(6)\n    ranked_policy = np.zeros(6)\n    NUMBER_OF_TRANSFORMS = game_state.number_of_transforms\n    # NUMBER_OF_TRANSFORMS = 1\n\n    with torch.no_grad():\n\n        transformed_states = np.zeros((NUMBER_OF_TRANSFORMS, 20, 32, 32), dtype=np.float32)\n        for i, (transform, inv_permute) in enumerate(transforms[:NUMBER_OF_TRANSFORMS]):\n            transformed_state = transform(state)\n            transformed_states[i,:,:,:] = transformed_state\n        transformed_states = torch.from_numpy(transformed_states)\n\n        p = model(transformed_states)\n        for (transform, inv_permute), policy in zip(transforms, p.numpy()):\n            policy[:4] = policy[inv_permute]\n            print(np.round(policy, 2))\n            # booster considering transfer actions are discarded\n            if tuple(unit.pos) in game_state.wood_exist_xy_set:\n                policy[-1] += 0.25\n\n            if game_state.player.researched_coal_projected():\n                if tuple(unit.pos) in game_state.coal_exist_xy_set:\n                    policy[-1] += 0.75\n\n            if game_state.player.researched_uranium():\n                policy[-1] += game_state.convolved_uranium_exist_matrix[unit.pos.y, unit.pos.x]\n\n            if game_state.player.researched_uranium_projected():\n                if tuple(unit.pos) in game_state.uranium_exist_xy_set:\n                    policy[-1] += 1.25\n\n            average_policy += policy\/NUMBER_OF_TRANSFORMS\n            ranked_policy += policy.argsort().argsort()\n\n    print(ranked_policy)\n    print(average_policy)\n\n    action, pos, annotations = get_action(average_policy, game_state, unit, dest, DEBUG=DEBUG, use_probabilistic_sort=use_probabilistic_sort)\n    if tuple(pos):\n        dest.add(tuple(pos))\n    print(unit.id, unit.pos, pos, action, time.time() - start_time)\n    print()\n\n    return [action] + annotations\n","9f653ccc":"!mkdir snapshots\nfrom kaggle_environments import make\nenv = make(\"lux_ai_2021\", debug=True, configuration={\"annotations\": True, \"width\":12, \"height\":12})\nsteps = env.run([\"agent.py\", \"agent.py\"])","ffeac73f":"env.render(mode=\"ipython\", width=900, height=800)","f820a4a6":"import pickle\nimport numpy as np\nimport matplotlib.pyplot as plt\nfrom agent import game_logic\n\nstr_step = \"010\"\nplayer_id = 0\nwith open(f'snapshots\/game_state-{str_step}-{player_id}.pkl', 'rb') as handle:\n    game_state = pickle.load(handle)\nwith open(f'snapshots\/observation-{str_step}-{player_id}.pkl', 'rb') as handle:\n    observation = pickle.load(handle)\nwith open(f'snapshots\/missions-{str_step}-{player_id}.pkl', 'rb') as handle:\n    missions = pickle.load(handle)\n\ngame_logic(game_state, missions, observation, DEBUG=True)\nplt.imshow(game_state.convolved_collectable_tiles_matrix)\nplt.colorbar()\nplt.show()","77f8af01":"!npm install -g @lux-ai\/2021-challenge@latest &> \/dev\/null\n!pip install kaggle-environments -U &> \/dev\/null","9108cc5e":"%%bash\n# REF_DIR=\"\/kaggle\/input\/lux-ai-published-agents\/realneuralnetwork\/lux-ai-with-il-decreasing-learning-rate\/v3\/*\"\nREF_DIR=\"\/kaggle\/input\/hungry-goose-alphageese-agents\/111813_no_curfew\/*\"\nmkdir -p ref\/  # imitation agent\ncp -r $REF_DIR ref\/\n","ce2ea884":"!mkdir template","3c84066e":"%%writefile template\/main.py\nfrom typing import Dict\nimport sys\nfrom agent import agent\nif __name__ == \"__main__\":\n\n    def read_input():\n        \"\"\"\n        Reads input from stdin\n        \"\"\"\n        try:\n            return input()\n        except EOFError as eof:\n            raise SystemExit(eof)\n    step = 0\n    class Observation(Dict[str, any]):\n        def __init__(self, player=0) -> None:\n            self.player = player\n            # self.updates = []\n            # self.step = 0\n    observation = Observation()\n    observation[\"updates\"] = []\n    observation[\"step\"] = 0\n    player_id = 0\n    while True:\n        inputs = read_input()\n        observation[\"updates\"].append(inputs)\n\n        if inputs == \"D_DONE\":\n            if step == 0:  # the codefix\n                player_id = int(observation[\"updates\"][0])\n                observation.player = player_id\n                observation[\"player\"] = player_id\n                observation[\"width\"], observation[\"height\"] = map(int, observation[\"updates\"][1].split())\n            actions = agent(observation, None)\n            observation[\"updates\"] = []\n            step += 1\n            observation[\"step\"] = step\n            print(\",\".join(actions))\n            print(\"D_FINISH\")\n","24be5fe0":"!cd ref\/ && tar -xvzf *.tar.gz &> \/dev\/null\n!cp template\/main.py ref\/main.py  # fix main.py","e0940ed9":"!GFOOTBALL_DATA_DIR=C lux-ai-2021 --loglevel 0 --width 12 --height 12 main.py ref\/main.py","80174846":"%%writefile evaluate_for_map_size.sh\n\nMAP_SIZE=$1\nfor run in {30000001..30000200};\n    do GFOOTBALL_DATA_DIR=C lux-ai-2021 --seed $run --loglevel 1 --maxtime 10000 \\\n    --height $MAP_SIZE --width $MAP_SIZE --storeReplay=false --storeLogs=false \\\n    .\/main.py .\/ref\/main.py >> logs-$MAP_SIZE.txt;\ndone","7e707f65":"!chmod +x .\/evaluate_for_map_size.sh","cc02a738":"!timeout 0.5h bash .\/evaluate_for_map_size.sh 12","b90868de":"!timeout 1.5h bash .\/evaluate_for_map_size.sh 16","1a868874":"!timeout 2h bash .\/evaluate_for_map_size.sh 24","6dea4fed":"!timeout 4h bash .\/evaluate_for_map_size.sh 32","fd718835":"import os\n\nwins_template = \"\"\"\n    { rank: 1, agentID: 0, name: '.\/main.py' },\n    { rank: 2, agentID: 1, name: '.\/ref\/main.py' }\n\"\"\"\n\ndraw_template = \"\"\"\n    { rank: 1, agentID: 0, name: '.\/main.py' },\n    { rank: 1, agentID: 1, name: '.\/ref\/main.py' }\n\"\"\"\n\nlose_template = \"\"\"\n    { rank: 1, agentID: 1, name: '.\/ref\/main.py' },\n    { rank: 2, agentID: 0, name: '.\/main.py' }\n\"\"\"\n\nmap_sizes = [12,16,24,32]\nmap_size_count = 0\ntotal_score = 0\nfor map_size in map_sizes:\n    logfile_name = f\"logs-{map_size}.txt\"\n    if os.path.isfile(logfile_name):\n        map_size_count += 1\n        with open(logfile_name) as f:\n            data_string = f.read()\n            wins = data_string.count(wins_template)\n            draw = data_string.count(draw_template)\n            lose = data_string.count(lose_template)\n            score = (wins + draw \/ 2)\/(wins + draw + lose)*100\n            total_score += score\n            print(f\"Map size: {map_size}, Score: {score:.3f}, Stats: {wins}\/{draw}\/{lose}\")\ntotal_score = total_score\/map_size_count\nprint(f\"Total score: {total_score:.3f}\")","067c8cc1":"!rm snapshots\/*.pkl\n!tar --exclude='*.ipynb' --exclude=\"*.pyc\" --exclude=\"*.pkl\" --exclude=\".\/replays\/\" --exclude=\".\/ref\/\" -czf submission.tar.gz *\n!rm *.py && rm -rf __pycache__\/ && rm -rf lux\/ && rm -rf ref\/","a424f5d3":"# Debugging\nIn the run, we have saved the game state and missions as Python pickle files.\n\nWe can rerun the game logic and debug how missions are planned and actions are executed.\n\nFor visualisation, we plot `convolved_collectable_tiles_matrix`.\nThis matrix is used for estimating the best target position of a mission.\nYou could also print other attributes of `game_state`.\n","426eafd5":"# Upgraded Game Kit\nThe game kit has been edited to include more features for the agent to make decisions on.\n","558eff2e":"# Agent Logic\nThe following scipts contain the algorithms that the agent uses.\nThe algorithm is described in the comments.\nFeel free to ask for more clarification.\n","e1162194":"# Evaluation\nIf you want measure the winrate between two agents, you need to play many matches.\n\nFor each map size, we play a number of matches. For larger maps, we play a smaller number of matches.\n\nTo make scores more comparable, the seed of the matches will have to be consistent over different plays.","2129b3a1":"\n# [Lux AI] Working Title Bot\nThe code structure and logic, and version updates are elaborated in the comment section.\n\nI hope this can be a useful template for you to work on your bot on.\nYou are recommended to edit on a clone\/fork of [my repository](https:\/\/github.com\/tonghuikang\/lux-ai-2021) with your favorite IDE.\nYou can submit the zip the repository to the competition. This notebook is generated with `generate_notebook.py`.\n\nRegardless, do feel free to clone this notebook and submit `submission.tar.gz` under the \"Data\" tab.\n","f65373eb":"# Game Rendering\nThis is a replay of the agent fighting against itself.\n\nThe missions of each unit is annotated.\n`X` and `O` indicates target position for the unit to move to.\nIn addition, `O` indicates that the unit will build a citytile upon arrival at the tile.\n\n`O` on the city tile indicates that the citytile have enough fuel to last to the end of the game.\nOtherwise, the number of nights it can endure will be indicated on the tile.\n\nThe inscription on the unit indicates the amount of total resources it has, and the majority type of resource.\n`F` indicates that it has at least 100 resources. If the unit has moved in the turn, the inscription is annotated on the previous location.\n","4677aa17":"# Upgraded Game Kit\nThe game kit has been edited to include more features for the agent to make decisions on.\n"}}