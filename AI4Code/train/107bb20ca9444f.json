{"cell_type":{"10b03892":"code","3f790470":"code","dba91d86":"code","70e0a156":"code","423003ec":"code","50ad3ca5":"code","40ec57bb":"code","8861b1fb":"code","a57899f7":"code","f2d04786":"code","72751984":"markdown","645b5c2e":"markdown","e31b4128":"markdown","35f83848":"markdown","e3fed316":"markdown"},"source":{"10b03892":"import pandas as pd\nimport numpy as np\nimport time\nimport nltk","3f790470":"word_a = '\u0443\u0432\u043b\u0435\u0447\u0435\u043d\u0438\u0435'\nword_b = '\u0440\u0430\u0437\u0432\u043b\u0435\u0447\u0435\u043d\u0438\u0435'\nexp_num = 100  # \u043a\u043e\u043b-\u0432\u043e \u044d\u043a\u0441\u043f\u0435\u0440\u0438\u043c\u0435\u043d\u0442\u043e\u0432","dba91d86":"def levenshtein(a,b):\n    '''\n    \u0421\u0440\u0430\u0432\u043d\u0435\u043d\u0438\u0435 \u0434\u0432\u0443\u0445 \u0441\u0442\u0440\u043e\u043a, \u0432\u044b\u0432\u043e\u0434 \u043c\u0430\u0442\u0440\u0438\u0446\u044b \u0438 \u0440\u0430\u0441\u0441\u0442\u043e\u044f\u043d\u0438\u044f\n    '''\n    size_x=len(a)+1\n    size_y=len(b)+1\n    matrix=np.zeros((size_x,size_y))\n    for x in np.arange(size_x):\n        matrix[x,0]=x\n    for y in np.arange(size_y):\n        matrix[0,y]=y\n    for x in np.arange(1,size_x):\n        for y in np.arange(1,size_y):\n            if a[x-1]==b[y-1]:\n                matrix[x,y]=min(\n                    matrix[x-1,y]+1,\n                    matrix[x-1,y-1],\n                    matrix[x,y-1]+1\n                )\n            else:\n                matrix[x,y]=min(\n                    matrix[x-1,y]+1,\n                    matrix[x-1,y-1]+1,\n                    matrix[x,y-1]+1\n                )\n                \n#     df=pd.DataFrame(matrix.astype(int))\n#     coln=[x for x in range(1,len(b)+1)]\n#     cola=[x.upper() for x in list(b)]\n#     rown=[x for x in range(1,len(a)+1)]\n#     rowa=[x.upper() for x in list(a)]\n#     df=df.rename(columns=dict(zip(coln,cola)), index=dict(zip(rown,rowa)))\n#     print(df)\n\n    return int(matrix[size_x-1,size_y-1])","70e0a156":"start = time.process_time()\nfor i in range(exp_num - 1):\n    levenshtein(word_a, word_b)\nelapsed = (time.process_time() - start)\nprint(f'\u0412\u0440\u0435\u043c\u044f \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f {exp_num} \u044d\u043a\u0441\u043f\u0435\u0440\u0438\u043c\u0435\u043d\u0442\u043e\u0432: {elapsed} \u0441\u0435\u043a')\nprint(f'\u0421\u0440\u0435\u0434\u043d\u0435\u0435 \u0432\u0440\u0435\u043c\u044f \u043e\u0434\u043d\u043e\u0433\u043e \u044d\u043a\u0441\u043f\u0435\u0440\u0438\u043c\u0435\u043d\u0442\u0430: {elapsed\/exp_num} \u0441\u0435\u043a')\nprint(f\"\u0420\u0435\u0434\u0430\u043a\u0446\u0438\u043e\u043d\u043d\u043e\u0435 \u0440\u0430\u0441\u0441\u0442\u043e\u044f\u043d\u0438\u0435: {levenshtein(word_a, word_b)}\")","423003ec":"levenshtein(word_a, word_b)","50ad3ca5":"def levenshtein_rec(a, b):\n    if not a: \n        return len(b)\n    if not b: \n        return len(a)\n    \n    return min(levenshtein_rec(a[1:], b[1:]) + (a[0] != b[0]),\n               levenshtein_rec(a[1:], b) + 1,\n               levenshtein_rec (a, b[1:]) + 1\n              )","40ec57bb":"start = time.process_time()\nfor i in range(exp_num - 1):\n    levenshtein_rec(word_a, word_b)\nelapsed = (time.process_time() - start)\nprint(f'\u0412\u0440\u0435\u043c\u044f \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f {exp_num} \u044d\u043a\u0441\u043f\u0435\u0440\u0438\u043c\u0435\u043d\u0442\u043e\u0432: {elapsed} \u0441\u0435\u043a')\nprint(f'\u0421\u0440\u0435\u0434\u043d\u0435\u0435 \u0432\u0440\u0435\u043c\u044f \u043e\u0434\u043d\u043e\u0433\u043e \u044d\u043a\u0441\u043f\u0435\u0440\u0438\u043c\u0435\u043d\u0442\u0430: {elapsed\/exp_num} \u0441\u0435\u043a')\nprint(f\"\u0420\u0435\u0434\u0430\u043a\u0446\u0438\u043e\u043d\u043d\u043e\u0435 \u0440\u0430\u0441\u0441\u0442\u043e\u044f\u043d\u0438\u0435: {levenshtein_rec(word_a, word_b)}\")","8861b1fb":"def damerau_levenshtein_distance(s1, s2):\n    d = {}\n    lenstr1 = len(s1)\n    lenstr2 = len(s2)\n    for i in range(-1,lenstr1+1):\n        d[(i,-1)] = i+1\n    for j in range(-1,lenstr2+1):\n        d[(-1,j)] = j+1\n \n    for i in range(lenstr1):\n        for j in range(lenstr2):\n            if s1[i] == s2[j]:\n                cost = 0\n            else:\n                cost = 1\n            d[(i,j)] = min(\n                           d[(i-1,j)] + 1, # deletion \/ \u0443\u0434\u0430\u043b\u0435\u043d\u0438\u0435\n                           d[(i,j-1)] + 1, # insertion \/ \u0432\u0441\u0442\u0430\u0432\u043a\u0430\n                           d[(i-1,j-1)] + cost, # substitution \/ \u0437\u0430\u043c\u0435\u043d\u0430\n                          )\n            if i and j and s1[i]==s2[j-1] and s1[i-1] == s2[j]:\n                d[(i,j)] = min (d[(i,j)], d[i-2,j-2] + cost) # transposition \n \n    return d[lenstr1-1,lenstr2-1]","a57899f7":"start = time.process_time()\nfor i in range(exp_num - 1):\n    damerau_levenshtein_distance(word_a, word_b)\nelapsed = (time.process_time() - start)\nprint(f'\u0412\u0440\u0435\u043c\u044f \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f {exp_num} \u044d\u043a\u0441\u043f\u0435\u0440\u0438\u043c\u0435\u043d\u0442\u043e\u0432: {elapsed} \u0441\u0435\u043a')\nprint(f'\u0421\u0440\u0435\u0434\u043d\u0435\u0435 \u0432\u0440\u0435\u043c\u044f \u043e\u0434\u043d\u043e\u0433\u043e \u044d\u043a\u0441\u043f\u0435\u0440\u0438\u043c\u0435\u043d\u0442\u0430: {elapsed\/exp_num} \u0441\u0435\u043a')\nprint(f\"\u0420\u0435\u0434\u0430\u043a\u0446\u0438\u043e\u043d\u043d\u043e\u0435 \u0440\u0430\u0441\u0441\u0442\u043e\u044f\u043d\u0438\u0435: {damerau_levenshtein_distance(word_a, word_b)}\")","f2d04786":"# Levenshtein distance of two strings (CHEAT)\n\nstart = time.process_time()\nfor i in range(exp_num - 1):\n    nltk.edit_distance(word_a, word_b)\nelapsed = (time.process_time() - start)\nprint(f'\u0412\u0440\u0435\u043c\u044f \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f {exp_num} \u044d\u043a\u0441\u043f\u0435\u0440\u0438\u043c\u0435\u043d\u0442\u043e\u0432: {elapsed} \u0441\u0435\u043a')\nprint(f'\u0421\u0440\u0435\u0434\u043d\u0435\u0435 \u0432\u0440\u0435\u043c\u044f \u043e\u0434\u043d\u043e\u0433\u043e \u044d\u043a\u0441\u043f\u0435\u0440\u0438\u043c\u0435\u043d\u0442\u0430: {elapsed\/exp_num} \u0441\u0435\u043a')\nprint(f\"\u0420\u0435\u0434\u0430\u043a\u0446\u0438\u043e\u043d\u043d\u043e\u0435 \u0440\u0430\u0441\u0441\u0442\u043e\u044f\u043d\u0438\u0435: {nltk.edit_distance(word_a, word_b)}\")","72751984":"## \u041f\u043e\u0438\u0441\u043a \u0440\u0430\u0441\u0441\u0442\u043e\u044f\u043d\u0438\u044f \u041b\u0435\u0432\u0435\u043d\u0448\u0442\u0435\u0439\u043d\u0430 \u0440\u0435\u043a\u0443\u0440\u0441\u0438\u0432\u043d\u043e","645b5c2e":"## \u041f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u0435 \u0440\u0435\u0434\u0430\u043a\u0446\u0438\u043e\u043d\u043d\u043e\u0433\u043e \u0440\u0430\u0441\u0441\u0442\u043e\u044f\u043d\u0438\u044f \u0441 \u043f\u043e\u043c\u043e\u0449\u044c\u044e \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0438 [nltk](https:\/\/www.nltk.org\/)","e31b4128":"# \u0422\u0438\u043f\u044b \u0438 \u0441\u0442\u0440\u0443\u043a\u0442\u0443\u0440\u044b \u0434\u0430\u043d\u043d\u044b\u0445. \u041b\u04201","35f83848":"## \u041f\u043e\u0438\u0441\u043a \u0440\u0430\u0441\u0441\u0442\u043e\u044f\u043d\u0438\u044f \u0414\u0430\u043c\u0435\u0440\u0430\u0443-\u041b\u0435\u0432\u0435\u043d\u0448\u0442\u0435\u0439\u043d\u0430 \u043c\u0430\u0442\u0440\u0438\u0447\u043d\u043e","e3fed316":"## \u041f\u043e\u0438\u0441\u043a \u0440\u0430\u0441\u0441\u0442\u043e\u044f\u043d\u0438\u044f \u041b\u0435\u0432\u0435\u043d\u0448\u0442\u0435\u0439\u043d\u0430 \u043c\u0430\u0442\u0440\u0438\u0447\u043d\u043e"}}