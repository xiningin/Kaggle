{"cell_type":{"7e4da391":"code","2b7f5c42":"code","815c0ecd":"code","b3746564":"code","c33f58fc":"code","e103fc58":"code","36ef5d40":"code","0ff032a8":"code","6ed1b4d0":"code","aa6b68ab":"code","3e6a2656":"code","9a515c61":"code","d5de8c0e":"code","0ecd8845":"code","fac650c8":"code","4b543508":"code","1a18d7c6":"code","c9c9993f":"code","0042a58a":"code","e8972f40":"code","38e0a481":"code","dbdb7341":"code","cf5ce845":"code","863612a6":"code","b496b31e":"code","8efe4001":"markdown","384ddbdf":"markdown","e1dcf9b8":"markdown","f20cfecc":"markdown","9d71fa1c":"markdown","deda4292":"markdown","39eb41c4":"markdown","00947b7d":"markdown","9402cfd5":"markdown","6ebcc0b6":"markdown","734e016d":"markdown","1b8e25d2":"markdown","3bc72a4b":"markdown","b0d6527b":"markdown"},"source":{"7e4da391":"import numpy as np\nimport pandas as pd\nimport math\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom sklearn.preprocessing import LabelEncoder","2b7f5c42":"df = pd.read_csv(\"..\/input\/telco-customer-churn\/WA_Fn-UseC_-Telco-Customer-Churn.csv\")","815c0ecd":"df.shape","b3746564":"df.size","c33f58fc":"df.columns","e103fc58":"df.head(3)","36ef5d40":"df.sample(5)","0ff032a8":"df.info()","6ed1b4d0":"df.describe(include='all') # Description of all fields without differentiating their dtypes.","aa6b68ab":"df.describe() #Without the 'include' condition, this function will return only the numeric fields.","3e6a2656":"SeniorCitizens = df.SeniorCitizen[df.SeniorCitizen == 1].count()\nprint(f'The amount of Senior Citizens customers is {SeniorCitizens}')\nSeniorCitizens_Ratio = round(SeniorCitizens \/ df.SeniorCitizen.count(),2)\nprint(f'The ratio of Senior Citizens is {SeniorCitizens_Ratio}' )","9a515c61":"SeniorCitizens = df.SeniorCitizen[df.SeniorCitizen == 1].count()\nNoSeniorCitizens = df.SeniorCitizen[df.SeniorCitizen == 0].count()\n\nx_variables = ['Senior Citiziens', 'No Senior Citizens']\ny_variables = [SeniorCitizens, NoSeniorCitizens]\nbarChar = plt.bar(x_variables,y_variables, color=['Lightblue', 'Lightyellow'])\n\n#Set descriptions:\nplt.ylabel('Amount of Customers')\nplt.title('Senior Citizens Customers')\n#Display values:\nplt.text(-0.06, 200, SeniorCitizens, fontsize=10, color= 'White')\nplt.text(0.93, 200, NoSeniorCitizens, fontsize=10, color= 'Black')","d5de8c0e":"df_gender = df[['customerID','gender']]\ndf_gender = df_gender.rename(columns={'customerID':'Amount of Customers'})\ngender_count = df_gender.groupby('gender').count()\ngender_count['Percentage']=round((gender_count['Amount of Customers']\/ df_gender['gender'].count()*100),2)\ngender_count","0ecd8845":"sns.set_palette(['pink', 'lightblue'])\nsns.set_context(\"talk\", font_scale=0.8)\nplt.figure(figsize=(7,7))\ngender_chart = sns.catplot(x=\"gender\",\n              hue =\"gender\",\n                 data = df,\n             kind=\"count\",\n           height=4,\n           aspect=1.5).set(title = \"Customer Gender\")\n","fac650c8":"GenderPartner = df[['customerID','gender','Partner']]\nGenderPartner = GenderPartner.rename(columns={'customerID':'Amount of Customers'})\nGenderPartner_count = GenderPartner.groupby([GenderPartner.gender, GenderPartner.Partner])[['Amount of Customers']].count()\nGenderPartner_count['Percentage']=round((GenderPartner_count['Amount of Customers']\/ GenderPartner['gender'].count()*100),2)\nGenderPartner_count","4b543508":"ChurnCustomers = df.Churn[df.Churn == \"Yes\"].count()\nprint(f'The amount of customers that left the company is {ChurnCustomers}')\nChurnCustomers_Ratio = round(ChurnCustomers \/ df.Churn.count(),2)\nprint(f'The churn ratio is {ChurnCustomers_Ratio}' )","1a18d7c6":"x_variables = ['Churn', 'No Churn']\ny_variables = [df.Churn[df.Churn == \"Yes\"].count(), df.Churn[df.Churn == \"No\"].count()]\nbarChar = plt.bar(x_variables,y_variables, color=['violet','orange'])\n\n#Set descriptions:\nplt.ylabel('Amount of Customers')\nplt.title('Churn Customers')\n#Display values:\nplt.text(-0.06, 200,df.Churn[df.Churn == \"Yes\"].count(), fontsize=10, color= 'White')\nplt.text(0.93, 200, df.Churn[df.Churn == \"No\"].count(), fontsize=10, color= 'White')","c9c9993f":"TotalMonthlyCharges = df[['Churn','MonthlyCharges']]\nTotal = TotalMonthlyCharges.groupby('Churn').sum()\nTotal['Percentage']=round((Total['MonthlyCharges']\/ TotalMonthlyCharges['MonthlyCharges'].sum()*100),2)\nTotal","0042a58a":"x_variables2 = ['Churn', 'No Churn']\ny_variables2 = [TotalMonthlyCharges[TotalMonthlyCharges.Churn== 'Yes']['MonthlyCharges'].sum(), TotalMonthlyCharges[TotalMonthlyCharges.Churn== 'No']['MonthlyCharges'].sum()]\nbarChar2 = plt.bar(x_variables2,y_variables2, color=['lightgreen','lightblue'])\n\n#Set descriptions:\nplt.ylabel('Monthly Charges')\nplt.title('Monthly Charges Churn')\n#Display values:\nplt.text(-0.15, 10000,TotalMonthlyCharges[TotalMonthlyCharges.Churn== 'Yes']['MonthlyCharges'].sum(), fontsize=10, color= 'Grey')\nplt.text(0.85, 10000, TotalMonthlyCharges[TotalMonthlyCharges.Churn== 'No']['MonthlyCharges'].sum(), fontsize=10, color= 'Grey')","e8972f40":"GenderPartner_Churn = df[['customerID','gender','Partner', 'Churn']]\nGenderPartner_Churn = GenderPartner_Churn.rename(columns={'customerID':'Amount of Customers'})\nGenderPartner_Churn_count = GenderPartner_Churn.groupby([GenderPartner_Churn.gender, GenderPartner_Churn.Partner, GenderPartner_Churn.Churn])[['Amount of Customers']].count()\nGenderPartner_Churn_count['Percentage']=round((GenderPartner_Churn_count['Amount of Customers']\/ GenderPartner['Amount of Customers'].count()*100),2)\nGenderPartner_Churn_count","38e0a481":"Partner_Churn1 = df[df.Partner == 'Yes'][['customerID','Partner', 'Churn']]\nPartner_Churn1 = Partner_Churn1.rename(columns={'customerID':'Amount of Customers'})\nPartner_Churn_count1 = Partner_Churn1.groupby([Partner_Churn1.Partner, Partner_Churn1.Churn])[['Amount of Customers']].count()\nPartner_Churn_count1['Percentage']=round((Partner_Churn_count1['Amount of Customers']\/ Partner_Churn1['Amount of Customers'].count()*100),2)\nPartner_Churn_count1","dbdb7341":"Partner_Churn2 = df[df.Partner == 'No'][['customerID','Partner', 'Churn']]\nPartner_Churn2 = Partner_Churn2.rename(columns={'customerID':'Amount of Customers'})\nPartner_Churn_count2 = Partner_Churn2.groupby([Partner_Churn2.Partner, Partner_Churn2.Churn])[['Amount of Customers']].count()\nPartner_Churn_count2['Percentage']=round((Partner_Churn_count2['Amount of Customers']\/ Partner_Churn2['Amount of Customers'].count()*100),2)\nPartner_Churn_count2","cf5ce845":"no_numerical = (df.dtypes == 'object')\nno_numerical_list = list(no_numerical[no_numerical].index)\n\nencdata = df.copy()\nenc = LabelEncoder()\ncolumns = df.columns\n\nfor col in no_numerical_list:\n    encdata[col] = enc.fit_transform(encdata[col])\n\nencdata = pd.DataFrame(encdata, columns=columns)","863612a6":"plt.figure(figsize=(9,9))\nsns.heatmap(encdata.corr(), vmin=-1, vmax=1,cmap=sns.diverging_palette(20, 220, n=200))","b496b31e":"encadata2 = encdata.corr()\nencadata2 = encadata2[['Churn']]\nplt.figure(figsize=(3,9))\nsns.heatmap(encadata2, annot = True, vmin=-1, vmax=1,cmap=sns.diverging_palette(20, 220, n=200))","8efe4001":"Based on the information above, we can confirm that there are no *NULL* values, each of the 21 columns have 7043 rows. Also, we can see that the data type of the differens fields are 18 *object* and 3 *numerics* (2 integer and 1 float).\n\nIf we focus only on the numeric fields, from the descriptive statics we can conlude that at least 75% of Telco's customer are not considered as Senior Citizens. *Let's check this and visualize it on a chart using pyplot!*","384ddbdf":"As we can see from the data above, the Churn customers represented the 27% of the whole data set. Number that it seems to be pretty significant.\nLet's find out the total monthly charge that represents that 27%, I guess the CEO will like to know how much money did the lose on this month after the churn of this 1.869 customers.","e1dcf9b8":"### Step 5 - Churn\n\nConsidering that this variable is the most important, we should explore it and have some insights:","f20cfecc":"### Conclusions\n\nAfter exploring and analyzing the data set, we can finally conclude that there are no significant attributes that are strongly correlated to the \"Churn\". Despite that, there some attributes that can influence in a \"small\" way customers to leave the company. One of them is the \"tenure\" that has a negative correlation with the \"churn\" (-0.35), in other words we can say that the customers that decided to leave are more likley to don't spend long time as a customer. Also, as we have verified before, there is a negative correlation between with the people that have Partner (-0.15), those that have a partner are more likley to stay on the company. Taking account that the numerical values for \"Contract\" are 0 = Month-to-Month, 1 = One Year and 2 = Two Year, we can say that the negative correlation of -0.4 means that the customers with a two-year-contract are less likley to churn.","9d71fa1c":"From the data above, we can only say that the customers that have a partner are less likley to leave the company. We can confirm this calculating the ratios of churned costumers by the variable \"Partner\":","deda4292":"### Step 2 - Read document\n\nOnce we have imported the libraries, we are going to use the *read_csv* function of pandas to read the [Telco's Customer Churn data](https:\/\/www.kaggle.com\/blastchar\/telco-customer-churn) and create our Panda's DataFrame.\n\n```python\ndf = pd.read_csv(\"..\/input\/telco-customer-churn\/WA_Fn-UseC_-Telco-Customer-Churn.csv\")\n```\n\nThis will help us to transform the csv data to a 2-D labeled data structure with columns of potentially different type. In other words, *Pandas Dataframe is an in-memory representation of an excel sheet via Python programming language*.","39eb41c4":"# Exploratory Analysis of Telco's Customer Churn (Step-by-Step)\n\n### Introduction\n\nThis is my first *Python* practice with Jupyter Notebook and for this reason I wanted to explain step by step the exploratory analysis that I made so those that are beginners like me can have a complete and easy example of how apply python to a real data set. Also, I would really appreciate recommendations or feedback of Kaggle's users that would help improve my python skills.\n\n#### Context\n\nExploratory analysis of Telco's customer database, with information about the attributes of its customers, services hired, monthly and total charges among others.\n\n#### Aim of the Analysis\n\nThe aim of this analysis is to explore the data set and try to find out if there is a strong relation (correlation) between the different customer attributes and the target variable, \"Churn\".\n\n#### Customer Churn\n\nOK, we are going to analyze Telco's Customer Churn, but *What is Customer Churn???* *Customer Churn* is the percentage of customers that stopped using a company's product or service during a certain time frame. It is possible to calculate churn rate by dividing the number of lost customers during that time period by the total number of customers at the beginning of that time period. Obviously, companies should aim for a churn rate that is as close to 0% as possible.\n\nFor example, if you start your quarter with 400 customers and end with 380, your churn rate is 5% because you lost 5% of your customers.\n\n### Step 1 - Import libraries\n\nFirst of all, we have to import the different libraries (with all their functions) that we are going to use in this analysis:\n\n```python\nimport pandas as pd\nimport numpy as np\nimport math\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom sklearn.preprocessing import LabelEncoder\n```\n\n- **pandas:** help us to organize data and manipulate the data by putting it in a tabular form.\n- **numpy:** is mainly used for working with arrays.\n- **math:** give us the possibility of calculate advanced mathematical operations.\n- **matplotlib.pyplot:** is a plotting library used for 2D graphics in python programming language.\n- **seaborn:** is a data visualization library based on matplotlib. It provides a high-level interface for drawing attractive and informative statistical graphics. \n- **LabelEncoder:** help us to encode target labels with value between 0 and n_classes-1, in others words will convert categorical fields into numerical.","00947b7d":"In case we want to analyze a categorical variable like \"Gender\" we can make the same example to discover the amount of male and female customers and visualize them on a bar chart, now using *seaborn*.","9402cfd5":"Once we have made this conversion, we will use Seaborn to display a Heatmap with the correlations between each of the variables. This gives us more information that we need, so we limit this map to the correlations that more matters to us (the ones realted to \"Churn\").","6ebcc0b6":"### Step 4 - Data exploration\n\nOnce we have verified the data was uploaded OK to the Dataframe, **it's time to explore this data set!** But wait ... *How do I start? What should I keep in mind?*\n\nSometimes it's hard to know how to start or take the first step on the right direction in order to avoid wasting time on useless tasks. Actually, this is happening to me right know! \n\nExpert's recommendation is to always keep in mind the aim of the analysis as a whole. Every step should be oriented to answer or explain the problem raised.\n\nOK! I get it ... So we can start by understanding the data presented on the data set, what customer attributes we have available and their relationship with the variable \"churn\".\n\n```python\ndf.info()\ndf.describe()\n```\n\n- **df.info():** give us a concise summary of a DataFrame with the columns count, non-null values and it's dtypes.\n- **df.describe():** generates descriptive statistics that include those that summarize the central tendency, dispersion and shape of a dataset\u2019s distribution. Is worth to mention that this function analyzes numeric and object series, but some metrics make sense only for numeric fields.","734e016d":"As we can see, the percentage of the churned monthly charges is 30.5%, ratio that is above the one of churned customers (27%). So we can say that the customers that left the company have a monthly charge above the mean.\n\nAs we have already calculated the relation between gender and partner, we can add to it the variable \"Churn\" to visualize if those variables have influence on the decision of leave the company.","1b8e25d2":"### Step 3 - Data Validation\n\nJust to check if the data on the dataframe was uploaded correctly and if it is consistent with the data source (csv), we can use some simple Pandas commands to get an overview of the total amount of rows, columns and values of it, the differents fields (columns) and also visualize some random rows for an overview.\n\n```python\ndf.shape \ndf.size\ndf.head(5)\ndf.sample(5)\n```\n- **df.shape:** returns the number of rows and columns of the Dataframe.\n- **df.size:** returns the total number of elements of the Dataframe (row_count * column_count).\n- **df.columns:** returns the column labels of the Dataframe.\n- **df.head(x):** allows to visualize the first 'x' rows of the Dataframe.\n- **df.sample(x):** returns a random x-sample of the Dataframe.","3bc72a4b":"Since the aim of the analysis is to find out the correlation between the differents attributes in this dataset and the target variable *Churn*, first it will be necessary to convert all the non-numerical fields into numerical. So then, we can calculate their correlations.\n\nAs we explain at the beginning of this notebook, we wiil use the sklearn.preprocessing.LabelEncoder library that give us the functionality of transform the data type into what we need to calculate the correlations.","b0d6527b":"Also is posible to combine variables to have more details about the customers. For example, below there is a clasification of customer by Gender and Partner."}}