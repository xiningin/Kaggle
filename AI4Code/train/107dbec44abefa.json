{"cell_type":{"07b210ef":"code","231e5320":"code","9a762b54":"code","6afda9a6":"code","b2d5e9dd":"code","41998d1c":"code","ba7c4e93":"markdown","80089504":"markdown","1e2c2dba":"markdown"},"source":{"07b210ef":"import os\nimport numpy as np\n\nfrom tensorflow.keras.utils import to_categorical\nfrom tensorflow.keras.models import Sequential\nfrom tensorflow.keras.layers import Conv2D, MaxPooling2D, UpSampling2D, Dense, Flatten, Dropout\nfrom keras.regularizers import l2\nfrom keras.regularizers import l1\n\nfrom sklearn.utils import shuffle\nfrom PIL import Image\nfrom tensorflow.keras import regularizers","231e5320":"labels = ['call_me','fingers_crossed','up','okay','paper','rock','rock_on','scissor','peace','thumbs']\ny_train = []\nx_train = []\npath = \"..\/input\/hand-gesture-recognition\/HandGesture\/images\"\nfor i in os.listdir(path):\n    for j in os.listdir(path + \"\/\" + i):\n        im =  Image.open(path + \"\/\" + i + '\/' + j)\n        im = im.resize((240,200),Image.ANTIALIAS)\n        im = np.array(im)\n        im = np.expand_dims(im,axis = 2)\n        x_train.append(im)\n        y_train.append(labels.index(i))","9a762b54":"x = np.array(x_train)\ny = to_categorical(y_train)\n\nfrom sklearn.model_selection import train_test_split\nx_train, x_val, y_train, y_val = train_test_split(x, y, train_size=0.80, random_state = 42)","6afda9a6":"print(x.shape)\nprint(y.shape)","b2d5e9dd":"model = Sequential()\nmodel.add(Conv2D(16, kernel_size = 5, activation = 'relu', input_shape = (200,240,1)))\nmodel.add(MaxPooling2D(pool_size = 2))\nmodel.add(Conv2D(32, kernel_size = 5, activation = 'relu'))\nmodel.add(MaxPooling2D(pool_size = 2))\nmodel.add(Conv2D(64, kernel_size = 5, activation = 'relu'))\nmodel.add(MaxPooling2D(pool_size = 2))\nmodel.add(Conv2D(128, kernel_size = 5, activation = 'relu'))\nmodel.add(MaxPooling2D(pool_size = 2))\n\nmodel.add(Flatten())\nmodel.add(Dense(32,activation = 'relu',kernel_regularizer = regularizers.l1_l2(l1 = 0.05,l2 = 0.5), bias_regularizer=l2(0.1)))\nmodel.add(Dense(10, activation = 'softmax',kernel_regularizer = regularizers.l1_l2(l1 = 0.05, l2 = 0.5), bias_regularizer=l2(0.1)))\nmodel.compile(optimizer = 'adam', loss = 'categorical_crossentropy', metrics = ['accuracy'])\nmodel.fit(x_train, y_train, validation_data=(x_val, y_val), epochs = 50,batch_size = 64)","41998d1c":"model.save('emojirecog.hdf5')","ba7c4e93":"## Neceassy Imports","80089504":"## Model construction and training","1e2c2dba":"## Loading the data"}}