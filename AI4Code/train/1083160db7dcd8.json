{"cell_type":{"85f562a3":"code","31dd66ad":"code","067863ee":"code","4de3f752":"code","975afd91":"code","3cf2b7b0":"code","7642f400":"code","e096286a":"code","021cfe49":"code","757fc173":"code","f613eb46":"code","d84e78c2":"code","ec69d174":"code","0361966e":"code","0009513c":"code","1412cb43":"code","dd8577b1":"code","08c0d5a7":"code","56f50040":"code","f0b33d39":"code","77fb8a4a":"code","9bbdb95d":"code","056fe0d9":"code","915159f3":"code","29dc94ec":"code","04135714":"code","1cd6b116":"code","ab8d9cbb":"code","c863c68a":"code","a66f48ae":"code","9eb231e7":"code","517d1cf3":"code","3baa1a40":"code","4dd455b4":"code","b4471457":"code","3b798fec":"code","5cde18af":"code","27f0477b":"code","7db7abd9":"code","44744354":"code","ff7da82a":"code","45e2fd45":"code","48f7c50d":"code","a5c54c93":"code","8881b366":"code","77cf12cf":"code","79ecbe34":"code","89abbb56":"code","dc7c227d":"code","38156e77":"code","4790bc41":"code","b1b0f4c4":"code","964ecad7":"code","ba6d928c":"code","e443d422":"code","8ee0ff0b":"code","9a53457f":"code","ff1dd6ea":"code","7f451e1a":"code","b01aa1a0":"code","89b3e4d5":"code","bcfde0d9":"code","3a28029e":"code","22319246":"code","b551f60f":"code","6d489682":"code","37249df5":"code","bdde3fff":"code","ed052108":"code","ae61ef0e":"markdown","4f216c3d":"markdown","64c8a084":"markdown","974f1060":"markdown","8b7cf6e6":"markdown","47521e1d":"markdown","d8d1bb80":"markdown","b77824ae":"markdown"},"source":{"85f562a3":"import pandas as pd \nimport numpy as np\nimport missingno as msno\nimport plotly.express as px ","31dd66ad":"def filter_retired(df):\n    '''\n    Filter out match that is not completed or retired match \n    '''\n    \n    df = df.copy()\n    \n    #filter out retired games\n    df = df[df['retired']==False]\n    df.reset_index(inplace=True)\n    df.drop(columns='index',inplace=True)\n    \n    return df","067863ee":"def extract_team_nationality(df):\n    '''\n    Extract nationality from the team with same nationality\n    '''\n    \n    #check if there player pair with different nationality\n    if (df[((df['team_one_player_one_nationality'])!=(df['team_one_player_two_nationality']))|\n           ((df['team_two_player_one_nationality'])!=(df['team_two_player_two_nationality']))].shape[0]) != 0:\n        \n        print('There player pair with different nationality !')\n        \n    \n    else:\n        #create only one variable of team nationality\n        df.loc[:,'team_one_nationalities'] = df['team_one_player_one_nationality']\n        df.loc[:,'team_two_nationalities'] = df['team_two_player_one_nationality']\n\n        df.drop(columns=['team_one_player_one_nationality','team_one_player_two_nationality',\n                         'team_two_player_one_nationality','team_two_player_two_nationality'],inplace=True)\n        \n    return df","4de3f752":"def player_pair_summary(df):\n    '''\n    Make a column for player pair summary\n    '''\n    \n    #create only one variable for player pair\n    df.loc[:,'team_one_players'] = df['team_one_player_one'] + '\/' + df['team_one_player_two']\n    df.loc[:,'team_two_players'] = df['team_two_player_one'] + '\/' + df['team_two_player_two']\n    \n    #drop columns that won't be used on analysis for simplicity\n    df.drop(columns=['team_one_player_one','team_one_player_two',\n                     'team_two_player_one', 'team_two_player_two'],inplace=True)\n    \n    return df","975afd91":"def game_score_summary_21pts(df):\n    '''\n    create game score summary on 3 x 21 points based system\n    '''\n    \n    #create one column for game score summary\n    df.loc[df['nb_sets']==2,'21pts_game_score'] = df['game_1_score'] + ',' + df['game_2_score']\n    df.loc[df['nb_sets']==3,'21pts_game_score'] = df['game_1_score'] + ',' + df['game_2_score'] + ',' + \\\n                                                  df['game_3_score']\n    \n    #create column of lists consists of 21 points game score\n    df['21pts_game_score'] = df['21pts_game_score'].str.split(',')\n    \n    #rename some columns\n    df.rename(columns={'winner':'21pts_winner',\n                       'game_1_score':'21pts_game_1_score',\n                       'game_2_score':'21pts_game_2_score',\n                       'game_3_score':'21pts_game_3_score'}, inplace=True)\n    \n    return df","3cf2b7b0":"def simplify_columns(df):\n    '''\n    drop the unused columns in the dataset\n    '''\n    \n    #drop columns that won't be used on analysis for simplicity\n    df.drop(columns=['team_one_total_points', 'team_two_total_points',\n                     'team_one_most_consecutive_points', 'team_two_most_consecutive_points',\n                     'team_one_game_points', 'team_two_game_points',\n                     'team_one_most_consecutive_points_game_1','team_two_most_consecutive_points_game_1',\n                     'team_one_game_points_game_1', 'team_two_game_points_game_1',\n                     'team_one_most_consecutive_points_game_2','team_two_most_consecutive_points_game_2',\n                     'team_one_game_points_game_2', 'team_two_game_points_game_2',\n                     'team_one_most_consecutive_points_game_3','team_two_most_consecutive_points_game_3',\n                     'team_one_game_points_game_3', 'team_two_game_points_game_3'],inplace=True)\n    \n    return df","7642f400":"def visualize_missing_value(df):\n    '''\n    visualize the missing value by using missingno library\n    '''\n    msno.bar(df);\n    \n    msno.matrix(df);","e096286a":"def interval_score(score_column):\n    '''\n    extract score on interval (11 points) on a single game\n    '''\n    for score in score_column:\n        if '11' in score:\n            score_11 = score.strip(\"'] [ \")\n            return score_11\n            break","021cfe49":"def get_winner(game_score):\n    '''\n    to get the winner of the match\n    '''\n    team_1 = 0\n    team_2 = 0\n    \n    for score in game_score:\n        team_1_score = int(score.split('-')[0])\n        team_2_score = int(score.split('-')[1])\n        if team_1_score > team_2_score:\n            team_1 += 1\n        else:\n            team_2 += 1\n    \n    #if team 1 win\n    if team_1 > team_2:\n        return 1\n    #if team 2 win\n    elif team_2 > team_1:\n        return 2\n    #for inconclusive result\n    else:\n        return 0","757fc173":"def game_score_summary_11pts(df):\n    '''\n    create game score summary on 3 x 11 points based system\n    '''\n    \n    #extract game 1 score\n    elv_score_series_1 = pd.Series(dtype='string')\n\n    for i in range(0,len(df['game_1_scores'])):\n        score_list = interval_score(df['game_1_scores'].str.split(',')[i])\n        elv_pts_score = pd.Series(score_list)\n        elv_score_series_1 = elv_score_series_1.append(elv_pts_score,ignore_index=True)\n\n    df['11pts_game_1_score'] = elv_score_series_1\n    \n    #extract game 2 score\n    elv_score_series_2 = pd.Series(dtype='string')\n\n    for i in range(0,len(df['game_2_scores'])):\n        score_list = interval_score(df['game_2_scores'].str.split(',')[i])\n        elv_pts_score = pd.Series(score_list)\n        elv_score_series_2 = elv_score_series_2.append(elv_pts_score,ignore_index=True)\n\n    df['11pts_game_2_score'] = elv_score_series_2\n    \n    #extract game 3 score\n    elv_score_series_3 = pd.Series(dtype='string')\n\n    for i in range(0,len(df['game_3_scores'])):\n        if df['nb_sets'][i] == 3:\n            score_list = interval_score(df['game_3_scores'].str.split(',')[i])\n            elv_pts_score = pd.Series(score_list)\n            elv_score_series_3 = elv_score_series_3.append(elv_pts_score,ignore_index=True)\n        else:\n            elv_pts_score = pd.Series(str('NaN'))\n            elv_score_series_3 = elv_score_series_3.append(elv_pts_score,ignore_index=True)\n\n    df['11pts_game_3_score'] = elv_score_series_3\n    df['11pts_game_3_score'].replace('NaN',np.NaN, inplace=True)\n    \n    #create one column for game score summary\n    df.loc[df['nb_sets']==2,'11pts_game_score'] = df['11pts_game_1_score'] + ',' + df['11pts_game_2_score']\n    df.loc[df['nb_sets']==3,'11pts_game_score'] = df['11pts_game_1_score'] + ',' + df['11pts_game_2_score'] + ',' \\\n                                                  + df['11pts_game_3_score']\n    df['11pts_game_score'] = df['11pts_game_score'].str.split(',')\n    \n    #extract the winner of 11 points system\n    df['11pts_winner'] = df['11pts_game_score'].apply(get_winner)\n    \n    return df","f613eb46":"def get_winner_nationality(df,pts_system='21'):\n    '''\n    to get the nationality of winning team\/individuals\n    '''\n    if pts_system == '21':\n        df.loc[df['21pts_winner']==1, '21pts_winner_nationalities'] = df['team_one_nationalities']\n        df.loc[df['21pts_winner']==2, '21pts_winner_nationalities'] = df['team_two_nationalities']\n        \n    elif pts_system == '11':\n        df.loc[df['11pts_winner']==1, '11pts_winner_nationalities'] = df['team_one_nationalities']\n        df.loc[df['11pts_winner']==2, '11pts_winner_nationalities'] = df['team_two_nationalities']\n        #for inconclusive result\n        df.loc[df['11pts_winner']==0, '11pts_winner_nationalities'] = np.nan\n        \n    return df","d84e78c2":"def evaluate_scoring_change(df):\n    '''\n    Evaluate the result of scoring system change\n    '''\n    \n    #for unchanged result\n    df.loc[(df['21pts_winner'])==(df['11pts_winner']),'point_change_eval'] = 'Unchanged'\n\n    #for changed result\n    df.loc[(df['21pts_winner']!=df['11pts_winner'])&(df['11pts_winner']!=0),'point_change_eval'] = 'Changed'\n\n    #for inconclusive result \n    df.loc[(df['11pts_winner']==0),'point_change_eval'] = 'Inconclusive'\n    \n    return df","ec69d174":"def plot_pie(df,chart_title):\n    '''\n    to plot pie chart about proportion of match result evaluation\n    '''\n    fig = px.pie(df, \n             values=df['point_change_eval'].value_counts(), \n             names=df['point_change_eval'].value_counts().index, \n             title=chart_title)\n    return fig.show()","0361966e":"def plot_stacked_bar(df,by,chart_title,pct=True):\n    '''\n    plot stacked bar chart by customable group category\n    '''\n    evaluation = df.groupby(by)['point_change_eval'].value_counts()\n    evaluation = evaluation.unstack('point_change_eval')\n\n    #reorder the columns \n    col_name = ['Unchanged','Inconclusive','Changed']\n    evaluation = evaluation[col_name]\n\n    #order of display\n    custom_dict = {'HSBC BWF World Tour Finals': 0, \n                   'HSBC BWF World Tour Super 1000': 1, \n                   'HSBC BWF World Tour Super 750': 2,\n                   'HSBC BWF World Tour Super 500': 3,\n                   'HSBC BWF World Tour Super 300': 4,\n                   'HSBC BWF World Tour Super 100': 5} \n\n    evaluation = pd.DataFrame(evaluation.sort_index(key=lambda x:x.map(custom_dict)))\n\n    #evaluation_percentage\n    evaluation_pct = evaluation.copy()\n    evaluation_pct['Unchanged'] = round(100*(evaluation['Unchanged']\/(evaluation['Unchanged']+\n                                    evaluation['Inconclusive']+evaluation['Changed'])),2)\n    evaluation_pct['Inconclusive'] = round(100*(evaluation['Inconclusive']\/(evaluation['Unchanged']+\n                                         evaluation['Inconclusive']+evaluation['Changed'])),2)\n    evaluation_pct['Changed'] = round(100*(evaluation['Changed']\/(evaluation['Unchanged']+\n                                        evaluation['Inconclusive']+evaluation['Changed'])),2)\n    \n    if pct==True:\n        fig = px.bar(evaluation_pct,\n                     title = chart_title,\n                     labels={\n                     \"tournament_type\": \"Tournament Type\",\n                     \"value\": \"Percentage of Games\"\n                     })\n        return fig.show()\n    \n    else:\n        fig = px.bar(evaluation,\n                     title = chart_title,\n                     labels={\n                     \"tournament_type\": \"Tournament Type\",\n                     \"value\": \"Number of Games\"\n                     })\n        return fig.show()","0009513c":"def extract_net_win(df):\n    '''\n    calculate the difference of numbers of win for each match between different nationality\n    with changed result and grouped by each nationality\n    '''\n    \n    #subset the match with changed result between different nationality \n    changed_diffnat = df[(df['point_change_eval']=='Changed')&\n                            (df['21pts_winner_nationalities']!=df['11pts_winner_nationalities'])]\n    \n    #create dataframe to count winner nationality from 21 points winner \n    twenty_one_pts = pd.DataFrame(changed_diffnat['21pts_winner_nationalities'].value_counts())\n    twenty_one_pts.reset_index(inplace=True)\n    \n    #create dataframe to count winner nationality from 11 points winner \n    eleven_pts = pd.DataFrame(changed_diffnat['11pts_winner_nationalities'].value_counts())\n    eleven_pts.reset_index(inplace=True)\n    \n    #merge the two dataset\n    net_win = pd.merge(twenty_one_pts, eleven_pts, how='inner', on='index')\n    \n    #calculate the net_win_changed parameter\n    net_win['net_win_changed'] = net_win['11pts_winner_nationalities'] - net_win['21pts_winner_nationalities']\n    \n    #calculate total match involved\n    net_win['total_changed_match'] = net_win['11pts_winner_nationalities'] + net_win['21pts_winner_nationalities']\n    \n    #calculate the percentage of net_win_changed from total match involved\n    net_win['net_win_changed_%'] = round(net_win['net_win_changed']*100\/net_win['total_changed_match'],2)\n    \n    \n    net_win.set_index('index',inplace=True)\n    net_win.sort_values(by='net_win_changed',inplace=True)\n    \n    return net_win","1412cb43":"#Men's Singles\nms = pd.read_csv('..\/input\/badminton-bwf-world-tour\/ms.csv')","dd8577b1":"#filter retired match \nms = filter_retired(ms)\n\n#there are incomplete games I discovered in the earlier EDA\nms.drop(index=2739,inplace=True)\nms.reset_index(drop=False, inplace=True)\nms.drop(columns='index',inplace=True)\n\n#create game score\nms = game_score_summary_21pts(ms)\n\n#simplify columns \nms = simplify_columns(ms)\n\nms","08c0d5a7":"visualize_missing_value(ms)","56f50040":"#extract score for 11 points based system\nms = game_score_summary_11pts(ms)","f0b33d39":"#get winning team nationality for 21 points \nms = get_winner_nationality(ms,pts_system='21')\n\n#get winning team nationality for 11 points \nms = get_winner_nationality(ms,pts_system='11')","77fb8a4a":"#evaluate the result of scoring system change \nms = evaluate_scoring_change(ms)","9bbdb95d":"plot_pie(ms,chart_title=\"Proportion of Men's Singles Match Affected by Change in Scoring System\")","056fe0d9":"plot_stacked_bar(df=ms,by='tournament_type',pct=True,\n                 chart_title=\"Men's Single Match Evaluation for Scoring System Change in each Tournament Type\")","915159f3":"#calculate net_win for Men's Singles\nnet_win_ms = extract_net_win(ms)\nnet_win_ms","29dc94ec":"#Women's Singles\nws = pd.read_csv('..\/input\/badminton-bwf-world-tour\/ws.csv')","04135714":"#filter retired match \nws = filter_retired(ws)\n\n#create game score\nws = game_score_summary_21pts(ws)\n\n#simplify columns \nws = simplify_columns(ws)\n\nws","1cd6b116":"visualize_missing_value(ws)","ab8d9cbb":"#extract score for 11 points based system\nws = game_score_summary_11pts(ws)","c863c68a":"#get winning team nationality for 21 points \nws = get_winner_nationality(ws,pts_system='21')\n\n#get winning team nationality for 11 points \nws = get_winner_nationality(ws,pts_system='11')","a66f48ae":"#evaluate the result of scoring system change \nws = evaluate_scoring_change(ws)","9eb231e7":"plot_pie(ws,chart_title=\"Proportion of Women's Singles Match Affected by Change in Scoring System\")","517d1cf3":"plot_stacked_bar(df=ws,by='tournament_type',pct=True,\n                 chart_title=\"Women's Single Match Evaluation for Scoring System Change in each Tournament Type\")","3baa1a40":"#calculate net_win for Men's Singles\nnet_win_ws = extract_net_win(ws)\nnet_win_ws","4dd455b4":"#Men's Doubles\nmd = pd.read_csv('..\/input\/badminton-bwf-world-tour\/md.csv')","b4471457":"#filter retired match \nmd = filter_retired(md)\n\n#extract team nationality\nmd = extract_team_nationality(md)\n\n#create player pair summary \nmd = player_pair_summary(md)\n\n#create game score\nmd = game_score_summary_21pts(md)\n\n#simplify columns \nmd = simplify_columns(md)\n\nmd","3b798fec":"visualize_missing_value(md)","5cde18af":"#extract score for 11 points based system\nmd = game_score_summary_11pts(md)","27f0477b":"#get winning team nationality for 21 points \nmd = get_winner_nationality(md,pts_system='21')\n\n#get winning team nationality for 11 points \nmd = get_winner_nationality(md,pts_system='11')","7db7abd9":"#evaluate the result of scoring system change \nmd = evaluate_scoring_change(md)","44744354":"plot_pie(md,chart_title=\"Proportion of Men's Doubles Match Affected by Change in Scoring System\")","ff7da82a":"plot_stacked_bar(df=md,by='tournament_type',pct=True,\n                 chart_title=\"Men's Double Match Evaluation for Scoring System Change in each Tournament Type\")","45e2fd45":"#calculate net_win for Men's Doubles\nnet_win_md = extract_net_win(md)\nnet_win_md","48f7c50d":"#Women's Singles\nwd = pd.read_csv('..\/input\/badminton-bwf-world-tour\/wd.csv')","a5c54c93":"#filter retired match \nwd = filter_retired(wd)\n\n#extract team nationality\nwd = extract_team_nationality(wd)\n\n#create player pair summary \nwd = player_pair_summary(wd)\n\n#create game score\nwd = game_score_summary_21pts(wd)\n\n#simplify columns \nwd = simplify_columns(wd)\n\nwd","8881b366":"visualize_missing_value(wd)","77cf12cf":"#extract score for 11 points based system\nwd = game_score_summary_11pts(wd)","79ecbe34":"#get winning team nationality for 21 points \nwd = get_winner_nationality(wd,pts_system='21')\n\n#get winning team nationality for 11 points \nwd = get_winner_nationality(wd,pts_system='11')","89abbb56":"#evaluate the result of scoring system change \nwd = evaluate_scoring_change(wd)","dc7c227d":"plot_pie(wd,chart_title=\"Proportion of Women's Doubles Match Affected by Change in Scoring System\")","38156e77":"plot_stacked_bar(df=wd,by='tournament_type',pct=True,\n                 chart_title=\"Women's Double Match Evaluation for Scoring System Change in each Tournament Type\")","4790bc41":"#calculate net_win for Women's Doubles\nnet_win_wd = extract_net_win(wd)\nnet_win_wd","b1b0f4c4":"#Mixed Doubles\nxd = pd.read_csv('..\/input\/badminton-bwf-world-tour\/xd.csv')","964ecad7":"#filter retired match \nxd = filter_retired(xd)\n\n#there are incomplete games I discovered in the earlier EDA\nxd.drop(index=2100,inplace=True)\nxd.reset_index(drop=False, inplace=True)\nxd.drop(columns='index',inplace=True)\n\n#extract team nationality\nxd = extract_team_nationality(xd)\n\n#create player pair summary \nxd = player_pair_summary(xd)\n\n#create game score\nxd = game_score_summary_21pts(xd)\n\n#simplify columns \nxd = simplify_columns(xd)\n\nxd","ba6d928c":"visualize_missing_value(xd)","e443d422":"#extract score for 11 points based system\nxd = game_score_summary_11pts(xd)","8ee0ff0b":"#get winning team nationality for 21 points \nxd = get_winner_nationality(xd,pts_system='21')\n\n#get winning team nationality for 11 points \nxd = get_winner_nationality(xd,pts_system='11')","9a53457f":"#evaluate the result of scoring system change \nxd = evaluate_scoring_change(xd)","ff1dd6ea":"plot_pie(xd,chart_title=\"Proportion of Mixed Doubles Match Affected by Change in Scoring System\")","7f451e1a":"plot_stacked_bar(df=xd,by='tournament_type',pct=True,\n                 chart_title=\"Mixed Double Match Evaluation for Scoring System Change in each Tournament Type\")","b01aa1a0":"#calculate net_win for Mixed Doubles\nnet_win_xd = extract_net_win(xd)\nnet_win_xd","89b3e4d5":"#set the order of columns\ncols_order = ['tournament', 'city', 'country', 'date', 'tournament_type',\n       'discipline', 'round', '21pts_winner', 'nb_sets', 'retired',\n       '21pts_game_1_score', '21pts_game_2_score', '21pts_game_3_score',\n       'team_one_players', 'team_two_players', 'team_one_nationalities',\n       'team_two_nationalities', 'game_1_scores', 'game_2_scores',\n       'game_3_scores', '21pts_game_score', '11pts_game_1_score',\n       '11pts_game_2_score', '11pts_game_3_score', '11pts_game_score',\n       '11pts_winner', '21pts_winner_nationalities',\n       '11pts_winner_nationalities', 'point_change_eval']","bcfde0d9":"#Men's Singles\nms = ms[cols_order]\n\n#Women's Singles\nws = ws[cols_order]\n\n#Men's Doubles\nmd = md[cols_order]\n\n#Women's Doubles\nwd = wd[cols_order]\n\n#Mixed Doubles\nxd = xd[cols_order]","3a28029e":"badminton_data = pd.concat([ms,ws,md,wd,xd])\nbadminton_data.reset_index(inplace = True, drop='index')","22319246":"badminton_data","b551f60f":"plot_pie(badminton_data,chart_title=\"Proportion of All Match Affected by Change in Scoring System\")","6d489682":"plot_stacked_bar(df=badminton_data,by='tournament_type',pct=True,\n                 chart_title=\"All Match Evaluation for Scoring System Change in each Tournament Type\")","37249df5":"#calculate net_win for all matches\nnet_win_all = extract_net_win(badminton_data)\n\n#subset data for total match involved more than 100\nnet_win_all = net_win_all[net_win_all['total_changed_match'] > 100]\nnet_win_all","bdde3fff":"fig = px.bar(net_win_all, y='net_win_changed',\n             title = 'Nationalities net win',\n             labels={\"net_win_changed\": \"Net Win Changed\",\n                     \"index\": \"Nationalities\"})\nfig.show()","ed052108":"badminton_data.to_csv('badminton_data.csv')","ae61ef0e":"## Women's Singles","4f216c3d":"## Men's Singles","64c8a084":"## Mixed Double","974f1060":"# Badminton Data Analysis\n\nDue to recently proposed scoring system change from 3x21 to 5x11 rally point system, I like to investigate on how the result will change if the system is implemented earlier. In this notebook, I will use dataset of badminton matches across 88 different BWF World Tour competition from 2018 to 2021 that I got from kaggle dataset down below.\n\nData Source : https:\/\/www.kaggle.com\/sanderp\/badminton-bwf-world-tour","8b7cf6e6":"## Men's Doubles","47521e1d":"## Save to csv","d8d1bb80":"## Combine All Data","b77824ae":"## Women's Doubles"}}