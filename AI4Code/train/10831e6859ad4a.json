{"cell_type":{"3164c04e":"code","61eb3a96":"code","782f3451":"code","dc0d7fbe":"code","2482aa14":"code","ecca861f":"code","21727091":"code","e6b9f90c":"code","795c0537":"code","ffdb1aed":"code","cc41eaaf":"code","2267172c":"code","976b14c2":"code","1003e54b":"code","f8459197":"code","9ce17ed5":"code","ca259ad2":"code","760b43c4":"code","450ceb2e":"code","c15c5b49":"code","48a17d98":"code","7cabe5a0":"code","9e6c1b0d":"code","618e163f":"code","394df414":"code","9562bc86":"code","f9c17f80":"code","93b5f8c0":"code","0a01c66a":"code","35e494d2":"code","7fd214f4":"code","be7762c6":"code","b9bd4b4a":"code","74f04bb1":"code","e91d1c92":"code","ba987aab":"code","64d0d78f":"code","d0b61ee2":"code","25718972":"code","11c8e3ba":"code","818f3b12":"code","1c5d3b80":"code","ca1d4c7e":"code","0ec17252":"code","1e3f7ef2":"code","c56ea81b":"code","658dcc7a":"code","a70e7641":"code","fe493b22":"code","96034ea9":"code","031c3c4b":"code","0c0f4880":"code","d7033f5b":"code","a2120252":"code","8bda2dbb":"code","9602b8ae":"code","3ffce116":"code","21bb80ec":"code","450d831b":"code","4dfa5b65":"code","c1233e94":"code","007727ad":"code","31c9a1d6":"code","0a8a045e":"code","8aeb12c5":"code","bb9b112b":"code","2f421c43":"markdown","3ed91810":"markdown","7ea46829":"markdown","b96fcc66":"markdown","bec07f66":"markdown","a4368610":"markdown","e8fcdece":"markdown","09dc2d2e":"markdown","72da2ea6":"markdown","02a6a3c9":"markdown","36efed1f":"markdown","4e826c5c":"markdown","945c50f3":"markdown","fbb09440":"markdown","f2d07154":"markdown","74630954":"markdown","0aaa7c4d":"markdown","b59a1f88":"markdown","ad477c79":"markdown","dc8be518":"markdown","2753817d":"markdown","dea2969a":"markdown","a068b5a2":"markdown","dd4620bc":"markdown","3c9018d2":"markdown","4e6a2d6a":"markdown","72559a27":"markdown","5ce07b02":"markdown","ba3d3be0":"markdown","1fa8120e":"markdown","1d642c31":"markdown","4629b749":"markdown","970e6dd3":"markdown","72a0c46b":"markdown","cd4c2109":"markdown","cdff7b16":"markdown","be2c7fab":"markdown","32277e88":"markdown","47036ffc":"markdown","1ecf480d":"markdown","6d3af9e1":"markdown","f52bc3bd":"markdown","062ed01d":"markdown","58cbecf9":"markdown","7ea94ebb":"markdown"},"source":{"3164c04e":"import warnings\nwarnings.filterwarnings('ignore')","61eb3a96":"import numpy as np\nimport seaborn as sns\nimport pandas as pd\nimport matplotlib.pyplot as plt\nfrom scipy import stats\n\n%matplotlib inline","782f3451":"train = pd.read_csv('..\/input\/train.csv')\ntest = pd.read_csv('..\/input\/test.csv')","dc0d7fbe":"train.head(3)","2482aa14":"print('Number of rows in training set: ',train.shape[0])\nprint('Number of columns in training set: ', train.shape[1])","ecca861f":"test.head(3)","21727091":"print('Number of rows in test dataset: ', test.shape[0])\nprint('Number of columns in test dataset: ', test.shape[1])","e6b9f90c":"df = pd.concat([train.drop('SalePrice', axis = 1),test], axis = 0)","795c0537":"df.head(3)","ffdb1aed":"print('Number of rows in dataset: ', df.shape[0])\nprint('Number of columns in dataset: ', df.shape[1])","cc41eaaf":"df.drop('Id', axis = 1).describe().T                   #T = transpose of the dataset","2267172c":"print('No. of categorical attributes: ', df.select_dtypes(exclude = ['int64','float64']).columns.size)","976b14c2":"print('No. of numerical attributes: ', df.select_dtypes(exclude = ['object']).columns.size)","1003e54b":"plt.figure(figsize=(20,6))\nsns.heatmap(df.select_dtypes(exclude=['object']).isnull(), yticklabels=False, cbar = False, cmap = 'viridis')\nplt.title('Null Values present in Numerical Attributes',fontsize=18)\nplt.show()\n\nplt.figure(figsize=(20,6))\nsns.heatmap(df.select_dtypes(exclude=['int64','float64']).isnull(), yticklabels=False, cbar = False, cmap = 'viridis')\nplt.title('Null Values present in Categorical Attributes',fontsize=18)\nplt.show()","f8459197":"null_val = df.isnull().sum()\/len(df)*100\nnull_val.sort_values(ascending = False, inplace = True)\nnull_val = pd.DataFrame(null_val, columns = ['missing %'])\nnull_val = null_val[null_val['missing %'] > 0]\n\nsns.set_style('whitegrid')\nplt.figure(figsize=(10,6))\nsns.barplot(x = null_val.index, y = null_val['missing %'], palette='Set1')\nplt.xticks(rotation = 90)\nplt.show()","9ce17ed5":"sns.set_style('whitegrid')\ndf.hist(bins = 30, figsize = (20,15), color = 'darkgreen')\nplt.show()\nplt.tight_layout()","ca259ad2":"plt.figure(figsize=(30,20))\nsns.heatmap(df.corr(), annot = True,cmap='GnBu')\nplt.title('Heatmap of all Features',fontsize=18)\nplt.show()","760b43c4":"sns.set_style('whitegrid')\ncols = ['SalePrice', 'OverallQual', 'GrLivArea', 'GarageCars', 'TotalBsmtSF', 'FullBath', 'YearBuilt']\nsns.pairplot(train[cols])\nplt.show()","450ceb2e":"plt.figure(figsize=(10,6))\nsns.scatterplot(x='1stFlrSF',y='SalePrice', data = train,color = 'orange')\nplt.title('SalePrice vs. 1stFlrSF')\nplt.show()","c15c5b49":"plt.figure(figsize=(10,6))\nsns.scatterplot(x='GrLivArea',y='SalePrice', data = train,color = 'limegreen')\nplt.title('SalePrice vs. OverallQual')\nplt.show()","48a17d98":"plt.figure(figsize=(10,6))\nsns.scatterplot(x='TotalBsmtSF',y='SalePrice', data = train,color = 'royalblue')\nplt.title('SalePrice vs. TotalBsmtSF')\nplt.show()","7cabe5a0":"plt.figure(figsize=(10,6))\nsns.scatterplot(x='GarageArea',y='SalePrice', data = train,color = 'royalblue')\nplt.title('SalePrice vs. GarageArea')\nplt.show()","9e6c1b0d":"sns.set_style('whitegrid')\nplt.figure(figsize=(10,6))\nsns.boxplot(x='OverallQual', y='SalePrice', data = train,palette='magma')\nplt.show()","618e163f":"plt.figure(figsize=(5,6))\nsns.boxplot(x='Street', y='SalePrice', data = train,palette='magma')\nplt.title('SalePrice vs. Street')\nplt.show()","394df414":"plt.figure(figsize=(20,12))\nsns.boxplot(x='YearBuilt', y='SalePrice', data = train)\nplt.xticks(rotation = 90)\nplt.title('SalePrice vs. YearBuilt', fontsize=15)\nplt.show()","9562bc86":"#Group by neighborhood and fill in missing value by the median LotFrontage of all the neighborhood\ndf['LotFrontage'] = df.groupby(\"Neighborhood\")[\"LotFrontage\"].transform(lambda x: x.fillna(x.median()))","f9c17f80":"#GarageType, GarageFinish, GarageQual and GarageCond these are replacing with None\nfor col in ['GarageType', 'GarageFinish', 'GarageQual', 'GarageCond']:\n    df[col] = df[col].fillna('None')","93b5f8c0":"#GarageYrBlt, GarageArea and GarageCars these are replacing with zero\nfor col in ['GarageYrBlt', 'GarageArea', 'GarageCars']:\n    df[col] = df[col].fillna(int(0))","0a01c66a":"#BsmtFinType2, BsmtExposure, BsmtFinType1, BsmtCond, BsmtQual these are replacing with None\nfor col in ('BsmtFinType2', 'BsmtExposure', 'BsmtFinType1', 'BsmtCond', 'BsmtQual'):\n    df[col] = df[col].fillna('None')","35e494d2":"#MasVnrArea : replace with zero\ndf['MasVnrArea'] = df['MasVnrArea'].fillna(int(0))","7fd214f4":"#MasVnrType : replace with None\ndf['MasVnrType'] = df['MasVnrType'].fillna('None')","be7762c6":"#There is put mode value \ndf['Electrical'] = df['Electrical'].fillna(df['Electrical']).mode()[0]","b9bd4b4a":"#There is no need of Utilities\ndf = df.drop(['Utilities'], axis=1)","74f04bb1":"df['PoolQC'] = df['PoolQC'].fillna('None')","e91d1c92":"df['MiscFeature'].fillna('None', inplace = True)","ba987aab":"df['Alley'].fillna('None', inplace = True)","64d0d78f":"df['Fence'].fillna('None', inplace = True)","d0b61ee2":"df['FireplaceQu'] = df['FireplaceQu'].fillna('None')","25718972":"df['KitchenQual'].fillna(df['KitchenQual'].mode()[0], inplace = True)\n","11c8e3ba":"df['BsmtFullBath'].fillna(0, inplace = True)","818f3b12":"df['FullBath'].fillna(df['FullBath'].mode()[0],inplace = True)","1c5d3b80":"for col in ['SaleType','KitchenQual','Exterior2nd','Exterior1st','Electrical']:\n    df[col].fillna(df[col].mode()[0],inplace=True)","ca1d4c7e":"df['MSZoning'].fillna(df['MSZoning'].mode()[0],inplace=True)","0ec17252":"df['Functional'].fillna(df['Functional'].mode()[0],inplace=True)","1e3f7ef2":"for col in ('BsmtFinSF1', 'BsmtFinSF2', 'BsmtUnfSF','TotalBsmtSF', 'BsmtFullBath', 'BsmtHalfBath'):\n    df[col].fillna(0,inplace=True)","c56ea81b":"#Checking there is any null value or not\nplt.figure(figsize=(15, 4))\nsns.heatmap(df.isnull(),yticklabels=False)\nplt.show()","658dcc7a":"cols = ('FireplaceQu', 'BsmtQual', 'BsmtCond', 'GarageQual', 'GarageCond', \n        'ExterQual', 'ExterCond','HeatingQC', 'PoolQC', 'KitchenQual', 'BsmtFinType1', \n        'BsmtFinType2', 'Functional', 'Fence', 'BsmtExposure', 'GarageFinish', 'LandSlope',\n        'LotShape', 'PavedDrive', 'Street', 'Alley', 'CentralAir', 'MSSubClass', 'OverallCond', \n        'YrSold', 'MoSold', 'MSZoning', 'LandContour', 'LotConfig', 'Neighborhood',\n        'Condition1', 'Condition2', 'BldgType', 'HouseStyle', 'RoofStyle', 'RoofMatl', 'Exterior1st',\n        'Exterior2nd', 'MasVnrType', 'MasVnrArea', 'Foundation', 'GarageType', 'MiscFeature', \n        'SaleType', 'SaleCondition', 'Electrical', 'Heating')","a70e7641":"from sklearn.preprocessing import LabelEncoder\nfor c in cols:\n    lbl = LabelEncoder()\n    lbl.fit(list(df[c].values))\n    df[c] = lbl.transform(list(df[c].values))","fe493b22":"train_data = df.iloc[:1460,:]\ntest_data = df.iloc[1460:,:]","96034ea9":"train_data.shape","031c3c4b":"test_data.shape","0c0f4880":"X = train_data\ny = train['SalePrice']","d7033f5b":"from sklearn.model_selection import train_test_split\nX_train,X_test,y_train,y_test = train_test_split(X,y, test_size=0.21, random_state = 7)","a2120252":"from sklearn.linear_model import LinearRegression\nlin_reg = LinearRegression()\nlin_reg.fit(X_train.drop('Id',axis = 1), y_train)","8bda2dbb":"lin_reg.score(X_test.drop('Id',axis = 1),y_test)","9602b8ae":"prediction = lin_reg.predict(test_data.drop('Id',axis = 1))","3ffce116":"#Train the model\nfrom sklearn.ensemble import RandomForestRegressor\nmodel = RandomForestRegressor(n_estimators=1000)","21bb80ec":"model.fit(X_train.drop('Id',axis = 1), y_train)","450d831b":"model.score(X_test.drop('Id',axis = 1),y_test)","4dfa5b65":"from sklearn.ensemble import GradientBoostingRegressor\nGBR = GradientBoostingRegressor(n_estimators=100, max_depth=4)","c1233e94":"GBR.fit(X_train.drop('Id',axis = 1), y_train)","007727ad":"GBR.score(X_test.drop('Id',axis = 1),y_test)","31c9a1d6":"GBR.fit(X.drop('Id',axis = 1),y)","0a8a045e":"predictions = GBR.predict(test_data.drop('Id',axis = 1))","8aeb12c5":"submission = pd.DataFrame({'Id':test_data['Id'],'SalePrice':predictions})","bb9b112b":"submission.to_csv('housepricesub.csv',index=False)","2f421c43":"### **Describing the test dataset**","3ed91810":"I hope you find this kernel helpful and some **<font color='red'>UPVOTES<\/font>** would be very much appreciated\n\n","7ea46829":"### **Splitting the datasets into training and testing sets**","b96fcc66":"#### **Dimensions of training dataset**","bec07f66":"#### **1. SalePrice vs. OverallQual**","a4368610":"#### **Describing the dataset**","e8fcdece":"**Since Gradient Boosting Regressor has the highest score using it to make final generation**","09dc2d2e":"### **1. Plotting the distribution of all Numerical Attributes**","72da2ea6":"#### **Dimensions of test dataset**","02a6a3c9":"### **Preparing the Data**","36efed1f":"**Filling in the missing values**","4e826c5c":"Since the **'Id'** column is of no use in describing the dataset, I will remove it during describing","945c50f3":"**Total Number of Categorical Attributes**","fbb09440":"#### **Concatinated dataset**","f2d07154":"### **1. Linear Regression**","74630954":"### **2. Heatmap of all the features**","0aaa7c4d":"Only those Null Values are included whose percentage(%) is greater than 0","b59a1f88":"#### **SalePrice vs. Street**","ad477c79":"## **Importing Required Libraries**","dc8be518":"## **Regression Models**","2753817d":"### **2. Random Forest Regressor**","dea2969a":"### **Describing the Training Dataset**","a068b5a2":"Since the training set contains one extra column **'SalePrice'**, I will remove it during concatination","dd4620bc":"In this notebook I have performed Exploratory Data Analysis on the housing dataset and tried to identify relationship between a house's Sales Price and various other features. After EDA data pre-processing is done to handle different missing values after which I have applied different regression models to make the predictions. ","3c9018d2":"### **Plotting SalePrice relationships with categorical features**","4e6a2d6a":"### **Plotting the relationships between 'SalePrice' with numerical features**","72559a27":"#### **Plotting the percentage(%) of null values **","5ce07b02":"## **Exploratory Data Analysis and Visualization**","ba3d3be0":"#### **1. SalePrice SalePrice vs 1stFlrSF**","1fa8120e":"### **3. Pairplot between various features**","1d642c31":"#### **2. SalePrice vs. GrLivArea**","4629b749":"#### **2. SalePrice vs. YearBuilt**","970e6dd3":"### **3. Gradient Boosting Regressor**","72a0c46b":"**Suggestions are welcome**","cd4c2109":"## **Loading the Training and Testing Dataset**","cdff7b16":"### **Label Encoding the categorical features**","be2c7fab":"#### **Dimensions of combined dataset**","32277e88":"**Total Number of Numerical Attributes**","47036ffc":"**Concatinating both the training and testing set for exploratory data analysis**","1ecf480d":"#### **3. SalePrice vs. TotalBsmtSF**","6d3af9e1":"#### **4. SalePrice vs. GarageArea**","f52bc3bd":"There are no remaining Null Values in the dataset","062ed01d":"The features described in the above data set are:<br>\n\n**1. count** tells us the number of NoN-empty rows in a feature.<br>\n\n**2. mean** tells us the mean value of that feature.<br>\n\n**3. std** tells us the Standard Deviation Value of that feature.<br>\n\n**4. min** tells us the minimum value of that feature.<br>\n\n**5. 25%**, **50%**, and **75%** are the percentile\/quartile of each features.<br>\n\n**6. max** tells us the maximum value of that feature.<br>","58cbecf9":"**Checking for Null Values in the dataset**","7ea94ebb":"### Splitting the data into Training and Test sets"}}