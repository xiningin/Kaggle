{"cell_type":{"a3aa6533":"code","975cfcad":"code","37c50132":"code","fd024fc8":"code","9171ddf2":"code","410d5e6f":"code","00c3fe92":"code","e82d02a5":"code","8000950b":"code","99831680":"code","e7a9881f":"code","c58c3f53":"code","0e74baa7":"code","b05b5b05":"code","2d209723":"code","feea4b67":"code","bdaae0dc":"code","83a6deed":"code","31945faf":"code","9c25f456":"code","f6d525b5":"code","54dd29fa":"code","ec6aa06a":"code","c888bcf0":"code","11144790":"code","d7935868":"code","17eb1749":"code","cff7b1c3":"code","fc1b51f4":"code","7e9d0778":"code","99194720":"code","6a44fd8d":"code","e8417e30":"code","c5a74a07":"code","9eb02c06":"code","f6152361":"code","a3e6a541":"code","484923b4":"code","fd8da042":"code","0948eb4b":"code","c12e4228":"code","49cd6d7f":"code","7be98b5c":"code","a0dee76d":"code","32ba184a":"code","af7262d0":"code","fa78adca":"code","d4a42c55":"code","ad2b8bfd":"code","18b7104c":"markdown","b823663a":"markdown","1c330976":"markdown","eb4ec2a9":"markdown","5d2497a6":"markdown","bcf9c04e":"markdown","2a1f0bb8":"markdown","3b728f9e":"markdown","8484cbcb":"markdown","0e7209e7":"markdown","4e7388d9":"markdown","a550b9aa":"markdown","c9d1a3ed":"markdown","82fb85a3":"markdown","ca8028ad":"markdown","58e1136e":"markdown","bb7b8a6d":"markdown","6f89c492":"markdown","052327a6":"markdown","8557e098":"markdown","09ded251":"markdown","cab8cb64":"markdown","f3206225":"markdown","9b80834e":"markdown","0fad3cda":"markdown","f6e01b75":"markdown","cfcb4040":"markdown","5614e7ac":"markdown","f2045499":"markdown","0d97bfbd":"markdown","7475efc5":"markdown"},"source":{"a3aa6533":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport warnings\nwarnings.filterwarnings('ignore')\nimport missingno as msno\nfrom sklearn.model_selection import train_test_split\nimport torch\nimport torch.nn as nn\nimport torch.nn.functional as F\nimport matplotlib.pyplot as plt\n%matplotlib inline","975cfcad":"df = pd.read_csv(\"..\/input\/pima-indians-diabetes-database\/diabetes.csv\")\ndf.head()","37c50132":"# see the column names and its datatypes\ndf.info()","fd024fc8":"#shape:\ndf.shape","9171ddf2":"df.describe()","410d5e6f":"features = df.columns\ncols = (df[features] == 0).sum()\nprint(cols)","00c3fe92":"df[['Glucose','BloodPressure','SkinThickness','Insulin','BMI']] = df[['Glucose','BloodPressure','SkinThickness','Insulin','BMI']].replace(0,np.NaN)","e82d02a5":"df.isnull().sum()","8000950b":"msno.matrix(df[['Glucose','BloodPressure','SkinThickness','Insulin','BMI']])","99831680":"#Replace the null values with the median of that column:\n\ndf['Glucose'].fillna(df['Glucose'].median(), inplace =True)\n\ndf['BloodPressure'].fillna(df['BloodPressure'].median(), inplace =True)\n\ndf['BMI'].fillna(df['BMI'].median(), inplace =True)","e7a9881f":"by_Glucose_Age_Insulin_Grp = df.groupby(['Glucose'])\n\ndef fill_Insulin(series):\n    return series.fillna(series.median())\ndf['Insulin'] = by_Glucose_Age_Insulin_Grp['Insulin'].transform(fill_Insulin)","c58c3f53":"df['Insulin'] = df['Insulin'].fillna(df['Insulin'].mean())","0e74baa7":"by_BMI_Insulin = df.groupby(['BMI'])\n\ndef fill_Skinthickness(series):\n    return series.fillna(series.mean())\ndf['SkinThickness'] = by_BMI_Insulin['SkinThickness'].transform(fill_Skinthickness)","b05b5b05":"df['SkinThickness'].fillna(df['SkinThickness'].mean(),inplace= True)","2d209723":"df.isnull().sum()","feea4b67":"import matplotlib.style as style\nstyle.available\n\nstyle.use('seaborn-pastel')\nlabels = [\"Healthy\", \"Diabetic\"]\ndf['Outcome'].value_counts().plot(kind='pie',labels=labels, subplots=True,autopct='%1.0f%%', labeldistance=1.2, figsize=(9,9))","bdaae0dc":"from matplotlib.pyplot import figure, show\n\nfigure(figsize=(8,6))\nax = sns.countplot(x=df['Outcome'], data=df,palette=\"husl\")\nax.set_xticklabels([\"Healthy\",\"Diabetic\"])\nhealthy, diabetics = df['Outcome'].value_counts().values\nprint(\"Samples of diabetic people: \", diabetics)\nprint(\"Samples of healthy people: \", healthy)","83a6deed":"plt.figure()\nax = sns.distplot(df['Pregnancies'][df.Outcome == 1], color =\"darkturquoise\", rug = True)\nsns.distplot(df['Pregnancies'][df.Outcome == 0], color =\"lightcoral\",rug = True)\nplt.legend(['Diabetes', 'No Diabetes'])","31945faf":"plt.figure()\nax = sns.distplot(df['Glucose'][df.Outcome == 1], color =\"darkturquoise\", rug = True)\nsns.distplot(df['Glucose'][df.Outcome == 0], color =\"lightcoral\", rug = True)\nplt.legend(['Diabetes', 'No Diabetes'])","9c25f456":"plt.figure()\nax = sns.distplot(df['BloodPressure'][df.Outcome == 1], color =\"darkturquoise\", rug=True)\nsns.distplot(df['BloodPressure'][df.Outcome == 0], color =\"lightcoral\", rug=True)\nplt.legend(['Diabetes', 'No Diabetes'])","f6d525b5":"plt.figure()\nax = sns.distplot(df['SkinThickness'][df.Outcome == 1], color =\"darkturquoise\", rug=True)\nsns.distplot(df['SkinThickness'][df.Outcome == 0], color =\"lightcoral\", rug=True)\nplt.legend(['Diabetes', 'No Diabetes'])","54dd29fa":"plt.figure()\nax = sns.distplot(df['Insulin'][df.Outcome == 1], color =\"darkturquoise\", rug=True)\nsns.distplot(df['Insulin'][df.Outcome == 0], color =\"lightcoral\", rug=True)\nplt.legend(['Diabetes', 'No Diabetes'])","ec6aa06a":"plt.figure()\nax = sns.distplot(df['BMI'][df.Outcome == 1], color =\"darkturquoise\", rug=True)\nsns.distplot(df['BMI'][df.Outcome == 0], color =\"lightcoral\", rug=True)\nplt.legend(['Diabetes', 'No Diabetes'])","c888bcf0":"plt.figure()\nax = sns.distplot(df['DiabetesPedigreeFunction'][df.Outcome == 1], color =\"darkturquoise\", rug=True)\nsns.distplot(df['DiabetesPedigreeFunction'][df.Outcome == 0], color =\"lightcoral\", rug=True)\nplt.legend(['Diabetes', 'No Diabetes'])","11144790":"plt.figure()\nax = sns.distplot(df['Age'][df.Outcome == 1], color =\"darkturquoise\", rug=True)\nsns.distplot(df['Age'][df.Outcome == 0], color =\"lightcoral\", rug=True)\nsns.distplot(df['Age'], color =\"green\", rug=True)\nplt.legend(['Diabetes', 'No Diabetes', 'all'])","d7935868":"fig = plt.figure(figsize=(18,15))\ngs = fig.add_gridspec(3,3)\ngs.update(wspace=0.5, hspace=0.25)\nax0 = fig.add_subplot(gs[0,0])\nax1 = fig.add_subplot(gs[0,1])\nax2 = fig.add_subplot(gs[0,2])\nax3 = fig.add_subplot(gs[1,0])\nax4 = fig.add_subplot(gs[1,1])\nax5 = fig.add_subplot(gs[1,2])\nax6 = fig.add_subplot(gs[2,0])\nax7 = fig.add_subplot(gs[2,1])\nax8 = fig.add_subplot(gs[2,2])\n\nbackground_color = \"#c9c9ee\"\n# c9c9ee\ncolor_palette = [\"#f56476\",\"#ff8811\",\"#ff0040\",\"#ff7f6c\",\"#f0f66e\",\"#990000\"]\nfig.patch.set_facecolor(background_color) \nax0.set_facecolor(background_color) \nax1.set_facecolor(background_color)\nax2.set_facecolor(background_color)\nax3.set_facecolor(background_color)\nax4.set_facecolor(background_color)\nax5.set_facecolor(background_color)\nax6.set_facecolor(background_color)\nax7.set_facecolor(background_color)\nax8.set_facecolor(background_color)\n\n# Title of the plot\nax0.spines[\"bottom\"].set_visible(False)\nax0.spines[\"left\"].set_visible(False)\nax0.spines[\"top\"].set_visible(False)\nax0.spines[\"right\"].set_visible(False)\nax0.tick_params(left=False, bottom=False)\nax0.set_xticklabels([])\nax0.set_yticklabels([])\nax0.text(0.5,0.5,\n         'Boxenplot plot for various\\n features\\n_________________\\n\\n CREDIT: Naman Manchanda',\n         horizontalalignment='center',\n         verticalalignment='center',\n         fontsize=18, fontweight='bold',\n         fontfamily='serif',\n         color=\"#000000\")\n\n# Pregnancies \nax1.text(-0.18, 19, 'Pregnancies', fontsize=14, fontweight='bold', fontfamily='serif', color=\"#000000\")\nax1.grid(color='#000000', linestyle=':', axis='y', zorder=0,  dashes=(1,5))\nsns.boxenplot(ax=ax1,y=df['Pregnancies'],palette=[\"#f56476\"],width=0.6)\nax1.set_xlabel(\"\")\nax1.set_ylabel(\"\")\n\n# Glucose \nax2.text(-0.1, 217, 'Glucose', fontsize=14, fontweight='bold', fontfamily='serif', color=\"#000000\")\nax2.grid(color='#000000', linestyle=':', axis='y', zorder=0,  dashes=(1,5))\nsns.boxenplot(ax=ax2,y=df['Glucose'],palette=[\"#ff8811\"],width=0.6)\nax2.set_xlabel(\"\")\nax2.set_ylabel(\"\")\n\n# BloodPressure \nax3.text(-0.20, 132, 'BloodPressure', fontsize=14, fontweight='bold', fontfamily='serif', color=\"#000000\")\nax3.grid(color='#000000', linestyle=':', axis='y', zorder=0,  dashes=(1,5))\nsns.boxenplot(ax=ax3,y=df['BloodPressure'],palette=[\"#ff0040\"],width=0.6)\nax3.set_xlabel(\"\")\nax3.set_ylabel(\"\")\n\n# SkinThickness \nax4.text(-.2, 110, 'SkinThickness', fontsize=14, fontweight='bold', fontfamily='serif', color=\"#000000\")\nax4.grid(color='#000000', linestyle=':', axis='y', zorder=0,  dashes=(1,5))\nsns.boxenplot(ax=ax4,y=df['SkinThickness'],palette=[\"#ff7f6c\"],width=0.6)\nax4.set_xlabel(\"\")\nax4.set_ylabel(\"\")\n\n# Insulin \nax5.text(-0.10, 900, 'Insulin', fontsize=14, fontweight='bold', fontfamily='serif', color=\"#000000\")\nax5.grid(color='#000000', linestyle=':', axis='y', zorder=0,  dashes=(1,5))\nsns.boxenplot(ax=ax5,y=df['Insulin'],palette=[\"#f0f66e\"],width=0.6)\nax5.set_xlabel(\"\")\nax5.set_ylabel(\"\")\n\n# BMI \nax6.text(-0.08, 77, 'BMI', fontsize=14, fontweight='bold', fontfamily='serif', color=\"#000000\")\nax6.grid(color='#000000', linestyle=':', axis='y', zorder=0,  dashes=(1,5))\nsns.boxenplot(ax=ax6,y=df['BMI'],palette=[\"#990000\"],width=0.6)\nax6.set_xlabel(\"\")\nax6.set_ylabel(\"\")\n\n# DPF \nax7.text(-0.065, 2.8, 'DPF', fontsize=14, fontweight='bold', fontfamily='serif', color=\"#000000\")\nax7.grid(color='#000000', linestyle=':', axis='y', zorder=0,  dashes=(1,5))\nsns.boxenplot(ax=ax7,y=df['DiabetesPedigreeFunction'],palette=[\"#3339FF\"],width=0.6)\nax7.set_xlabel(\"\")\nax7.set_ylabel(\"\")\n\n# Age \nax8.text(-0.08, 86, 'Age', fontsize=14, fontweight='bold', fontfamily='serif', color=\"#000000\")\nax8.grid(color='#000000', linestyle=':', axis='y', zorder=0,  dashes=(1,5))\nsns.boxenplot(ax=ax8,y=df['Age'],palette=[\"#34495E\"],width=0.6)\nax8.set_xlabel(\"\")\nax8.set_ylabel(\"\")\n\n\n\nfor s in [\"top\",\"right\",\"left\"]:\n    ax1.spines[s].set_visible(False)\n    ax2.spines[s].set_visible(False)\n    ax3.spines[s].set_visible(False)\n    ax4.spines[s].set_visible(False)\n    ax5.spines[s].set_visible(False)\n    ax6.spines[s].set_visible(False)\n    ax7.spines[s].set_visible(False)\n    ax8.spines[s].set_visible(False)","17eb1749":"plt.figure(dpi = 120,figsize= (5,4))\nmask = np.triu(np.ones_like(df.corr(),dtype = bool))\nsns.heatmap(df.corr(),mask = mask, fmt = \".2f\",annot=True,lw=1,cmap = 'plasma')\nplt.yticks(rotation = 0)\nplt.xticks(rotation = 90)\nplt.title('Correlation Heatmap')\nplt.show()","cff7b1c3":"sns.pairplot(df, hue=\"Outcome\",palette=\"husl\")","fc1b51f4":"x = df.iloc[:, :-1].values\ny = df.iloc[:, -1].values","7e9d0778":"from sklearn.model_selection import train_test_split\nx_train, x_test, y_train, y_test = train_test_split(x, y, test_size= 0.2, random_state= 0)","99194720":"print(\"Number transactions x_train dataset: \", x_train.shape)\nprint(\"Number transactions y_train dataset: \", y_train.shape)\nprint(\"Number transactions x_test dataset: \", x_test.shape)\nprint(\"Number transactions y_test dataset: \", y_test.shape)","6a44fd8d":"from sklearn.preprocessing import StandardScaler \nsc = StandardScaler()\nx_train = sc.fit_transform(x_train)\nx_test = sc.transform(x_test)","e8417e30":"from sklearn.metrics import confusion_matrix,classification_report,roc_curve,accuracy_score,auc","c5a74a07":"fpr,tpr,_=roc_curve(y_test,y_pred)\n#calculate AUC\nroc_auc=auc(fpr,tpr)\n#plot of ROC curve for a specified class\nplt.figure()\nplt.plot(fpr,tpr,label='ROC curve(area= %2.f)' %roc_auc)\nplt.plot([0,1],[0,1],'k--')\nplt.xlim([0.0,1.0])\nplt.ylim([0.0,1.05])\nplt.xlabel('False positive rate')\nplt.ylabel('True positive rate')\nplt.title('ROC curve')\nplt.legend(loc='lower right')\nplt.grid()\nplt.show()","9eb02c06":"# Creating some Tensors\nX_train=torch.FloatTensor(x_train)\nX_test=torch.FloatTensor(x_test)\ny_train=torch.LongTensor(y_train)\ny_test=torch.LongTensor(y_test)","f6152361":"# Creatng the model in pytorch\nclass ANN_Model(nn.Module):\n    def __init__(self,input_features=8,hidden1=20,hidden2=20,output_features=2):\n        super().__init__()\n        self.fc1=nn.Linear(input_features,hidden1)\n        self.fc2=nn.Linear(hidden1,hidden2)\n        self.out=nn.Linear(hidden2,output_features)\n        \n    \n    def forward(self,x):\n        x=F.relu(self.fc1(x))\n        x=F.relu(self.fc2(x))\n        x=self.out(x)\n        return x\n    \n        ","a3e6a541":"#Instantiate my ANN\ntorch.manual_seed(21)\nmodel=ANN_Model()","484923b4":"model.parameters","fd8da042":"model.parameters# Backward Propogation -- define the loss func and the optimizer \nloss_function=nn.CrossEntropyLoss() #for multi class \noptimizer=torch.optim.Adam(model.parameters(),lr=0.01)","0948eb4b":"# trigger the forward propogation\nepochs=4000\nfinal_losses=[]\nfor i in range(epochs):\n    i+i+1\n    y_pred=model.forward(X_train)\n    loss=loss_function(y_pred,y_train)\n    final_losses.append(loss)\n    if(i%500==1):\n        print('Epochs number :{} and the loss is {}'.format(i,loss.item()))\n    optimizer.zero_grad()\n    loss.backward()\n    optimizer.step()","c12e4228":"#plotting the loss funtion\nplt.plot(range(epochs),final_losses)\nplt.ylabel('loss')\nplt.xlabel('Epochs')\n","49cd6d7f":"#predictions\npredictions=[]\nwith torch.no_grad():\n    for i,data in enumerate(X_test):\n        y_pred=model(data)\n        predictions.append(y_pred.argmax().item())\n        ","7be98b5c":"from sklearn.metrics import confusion_matrix\ncm=confusion_matrix(y_test,predictions)","a0dee76d":"plt.figure(figsize=(10,6))\nsns.heatmap(cm,annot=True)\nplt.xlabel('Actual')\nplt.ylabel('Predicted')","32ba184a":"from sklearn.metrics import accuracy_score\nscore=accuracy_score(y_test,predictions)","af7262d0":"print(score)","fa78adca":"# save the model\ntorch.save(model,'diabetes.pt')","d4a42c55":"model=torch.load('.\/diabetes.pt')","ad2b8bfd":"model.eval()","18b7104c":"<ul>\n    <li style=\"font-size:180%; font-family:Geneva;\">There are some values in Insulin, that cannot be zero. So, need to handle them by imputing.<\/li>\n<\/ul>","b823663a":"<h2 style=\"font-size:250%; font-family:cursive; color:#ff6666;\"><b>Problem Statement:<\/b><h2>\n    \n<p style=\"font-size:100%; font-family:Geneva\">Diabetes is one of the deadliest diseases in the world. It is not only a disease but also creator of different kinds of diseases like heart attack, blindness etc. The normal identifying process is that patients need to visit a diagnostic center, consult their doctor, and sit tight for a day or more to get their reports.<\/p>\n<p style=\"font-size:100%; font-family:Geneva\">So, the objective of this project is to identify whether the patient has diabetes or not based on diagnostic measurements.<\/p>\n    \n<h2 style=\"font-size:250%; font-family:cursive; color:#ff6666;\"><b>What is Diabetes ?<\/b><h2>\n<ul>\n    <li style=\"font-size:100%; font-family:Geneva\">Diabetes is a group of diseases in which the body doesn\u2019t produce enough or any insulin, doesn\u2019t properly use the insulin that is produced, or exhibits a combination of both. When any of these things happens, the body is unable to get sugar from the blood into the cells. That leads to high blood sugar levels.<\/li>\n    <br>\n    <li style=\"font-size:100%; font-family:Geneva\">Glucose, the form of sugar found in your blood, is one of your main energy sources. A lack of insulin or resistance to insulin causes sugar to build up in your blood. This can lead to many health problems.<\/li>\n    <br>\n    <li style=\"font-size:100%; font-family:Geneva\">The three main types of diabetes are: <b>type 1 diabetes, type 2 diabetes, gestational diabetes<\/b>.<\/li>\n<\/ul>\n    \n<h2 style=\"font-size:250%; font-family:cursive; color:#ff6666;\"><b>About Dataset:<\/b><h2>    \n<ul>\n    <li style=\"font-size:100%; font-family:Geneva\"><b>Pregnancies:<\/b> No. of times pregnant<\/li>\n    <li style=\"font-size:100%; font-family:Geneva\"><b>Glucose:<\/b> Plasma Glucose Concentration (mg\/dl)<\/li>\n    <li style=\"font-size:100%; font-family:Geneva\"><b>Blood Pressure:<\/b> Diastolic Blood Pressure(mmHg)<\/li>\n    <li style=\"font-size:100%; font-family:Geneva\"><b>Skin Thickness:<\/b>A value used to estimate body fat. Normal Triceps SkinFold Thickness in women is 23mm. Higher thickness leads to obesity and chances of diabetes increases.<\/li>\n    <li style=\"font-size:100%; font-family:Geneva\"><b>Insulin:<\/b> 2-Hour Serum Insulin (mu U\/ml)<\/li>\n    <li style=\"font-size:100%; font-family:Geneva\"><b>BMI:<\/b> Body Mass Index (weight in kg\/ height in m2)<\/li>\n    <li style=\"font-size:100%; font-family:Geneva\"><b>Diabetes Pedigree Function:<\/b>  It provides information about diabetes history in relatives and genetic relationship of those relatives with patients. Higher Pedigree Function means patient is more likely to have diabetes.<\/li>\n    <li style=\"font-size:100%; font-family:Geneva\"><b>Age:<\/b>Age (years)<\/li>\n    <li style=\"font-size:100%; font-family:Geneva\"><b>Outcome:<\/b> Class Variable (0 or 1) where \u20180\u2019 denotes patient is not having diabetes and \u20181\u2019 denotes patient having diabetes.<\/li>\n<\/ul>\n","1c330976":"<h4 style=\"font-size:150%; font-family:cursive; color:#ff6666;\"><b>5.6 Distribution of BMI<\/b><h4>","eb4ec2a9":"<ul>\n    <li style=\"font-size:180%; font-family:Geneva;\">There is a huge variation in mean, and we can see there's no missing values, but for some of the columns like Glucose , BP, Skin Thickness,BMI has 0 as min value, which is not possible, hence we can treat this as missingvalues and impute accordingly.<\/li>\n<\/ul>","5d2497a6":"<center><h3 style=\"font-size:200%; font-family:cursive; color:#ff6666;\"><b>3. Handle the Columns with value '0'<\/b><\/h3><\/center>","bcf9c04e":"<h4 style=\"font-size:150%; font-family:cursive; color:#ff6666;\"><b>5.5 Distribution of Insulin<\/b><h4>","2a1f0bb8":"<h4 style=\"font-size:150%; font-family:cursive; color:#ff6666;\"><b>3.3 Skinthickness with respect to BMI<\/b><h4>","3b728f9e":"<center><h3 style=\"font-size:200%; font-family:cursive; color:#ff6666;\"><b>9. MODEL BUILDING<\/b><\/h3><\/center>","8484cbcb":"<h1 style=\"font-size:300%; font-family:cursive; background:#ff6666; color:white; text-align:center; border:10px solid ; padding:25px;\">PIMA DIABETES - EDA | MODEL BUILDING <\/h1>","0e7209e7":"<h4 style=\"font-size:150%; font-family:cursive; color:#ff6666;\"><b>5.3 Distribution of BloodPressure<\/b><h4>","4e7388d9":"<h4 style=\"font-size:150%; font-family:cursive; color:#ff6666;\"><b>5.2 Distribution of Glucose<\/b><h4>","a550b9aa":"<ul>\n    <li style=\"font-size:180%; font-family:Geneva;\">We cannot drop these values, as our data is very small. So let's handle them.<\/li>\n<\/ul>","c9d1a3ed":"<h4 style=\"font-size:150%; font-family:cursive; color:#ff6666;\"><b>9.2 Feature Scaling<\/b><\/h4>\n<ul>\n    <li style=\"font-size:150%; font-family:Geneva;\">Feature Scaling is a technique to standardize the independent features present in the data in a fixed range. It is performed during the data pre-processing to handle highly varying magnitudes or values or units. If feature scaling is not done, then a machine learning algorithm tends to weigh greater values, higher and consider smaller values as the lower values, regardless of the unit of the values.<\/li>\n    <li style=\"font-size:150%; font-family:Geneva;\"><b>Standard Scaler<\/b>: It is a very effective technique which re-scales a feature value so that it has distribution with 0 mean value and variance equals to 1.<\/li>\n<\/ul>\n","82fb85a3":"<h4 style=\"font-size:150%; font-family:cursive; color:#ff6666;\"><b>5.1 Distribution of Pregnancies<\/b><h4>","ca8028ad":"<center><h3 style=\"font-size:200%; font-family:cursive; color:#ff6666;\"><b>2. Descriptive Statistics of Data<\/b><\/h3><\/center>","58e1136e":"<h4 style=\"font-size:150%; font-family:cursive; color:#ff6666;\"><b>5.7 Distribution of DiabetesPedigreeFunction<\/b><h4>","bb7b8a6d":"<h1 style=\"font-size:200%; font-family:cursive; color:green; text-align:center;\">Please give an upvote, if you like & find this kernel helpful. Thank You!!!!!<\/h1> ","6f89c492":"<center><img src=\"https:\/\/www.purdue.edu\/hr\/CHL\/no-cost_Wellness\/images\/diabetes-banner.jpg\"><\/center>","052327a6":"<p style=\"font-size:180%; font-family:Geneva; text-align:center;\"><b>\"MISSING VALUES ARE HANDLED\"<\/b><\/p>","8557e098":"<center><h3 style=\"font-size:200%; font-family:cursive; color:#ff6666;\"><b>7. Correlation Matrix <\/b><\/h3><\/center>","09ded251":"<h4 style=\"font-size:150%; font-family:cursive; color:#ff6666;\"><b>5.4 Distribution of SkinThickness<\/b><h4>","cab8cb64":"<center><h3 style=\"font-size:200%; font-family:cursive; color:#ff6666;\"><b>5. Distribution of other features w.r.t Outcome<\/b><\/h3><\/center>","f3206225":"<center><h3 style=\"font-size:200%; font-family:cursive; color:#ff6666;\"><b>4. Visualization of Target Variable<\/b><\/h3><\/center>","9b80834e":"<h1 style=\"font-size:300%; font-family:cursive; background:#ff6666; color:white; text-align:center; border:10px solid; padding:25px;\">IMPLEMENTATION USING PYTHON<\/h1>","0fad3cda":"<center><h3 style=\"font-size:200%; font-family:cursive; color:#ff6666;\"><b>1. Import Libraries & Load Dataset<\/b><\/h3><\/center>","f6e01b75":"<h4 style=\"font-size:150%; font-family:cursive; color:#ff6666;\"><b>3.1 Handle: Glucose, BloodPressure, BMI<\/b><h4>","cfcb4040":"<h4 style=\"font-size:150%; font-family:cursive; color:#ff6666;\"><b>3.2 Handle: Insulin based on Glucose<\/b><h4>","5614e7ac":"<h4 style=\"font-size:150%; font-family:cursive; color:#ff6666;\"><b>5.8 Distribution of Age<\/b><h4>","f2045499":"<h4 style=\"font-size:150%; font-family:cursive; color:#ff6666;\"><b>9.1 Split the data into test & train<\/b><\/h4>\n<ul>\n    <li style=\"font-size:150%; font-family:Geneva;\">The train-test split procedure is used to estimate the performance of machine learning algorithms when they are used to make predictions on data not used to train the model.<\/li>\n<\/ul>\n","0d97bfbd":"<center><h3 style=\"font-size:200%; font-family:cursive; color:#ff6666;\"><b>6. BoxPlot to check for Outliers<\/b><\/h3><\/center>","7475efc5":"<center><h3 style=\"font-size:200%; font-family:cursive; color:#ff6666;\"><b>8. Pair Plot<\/b><\/h3><\/center>"}}