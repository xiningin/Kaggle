{"cell_type":{"503b65dc":"code","33990e98":"code","6cc4df39":"code","e06bdb5d":"code","03629325":"code","85445151":"code","e2dc2eac":"code","ed82002a":"code","de4e2835":"code","d8119521":"code","b7f7e022":"code","8a77d0b6":"code","8954089b":"code","0aeb7513":"code","113b7bef":"code","52e374bd":"code","afe79918":"code","0b6f529a":"code","e33878b9":"code","672b3557":"code","5f8f02df":"code","878a2b7f":"code","08bb124b":"code","716614a0":"code","85d8d5b0":"code","ad50382a":"code","117d8d3c":"code","aa3fcd64":"code","45a30b6c":"code","81e83aad":"code","fea7276f":"code","0d89e7a9":"code","471d0166":"code","a7dc2a49":"code","c07fcc9e":"code","2973741e":"code","5a30f9e4":"code","26a15778":"code","73c15f73":"code","7fef7cae":"code","6fd173ea":"code","081ed14e":"code","432f17b1":"code","d7b9057a":"code","b6c70c99":"code","e96981f9":"code","4fb86401":"code","6e76da91":"code","2a9d2cc3":"code","3d09879a":"code","a596b75b":"code","2085dc3d":"code","abc1e591":"code","1a35bf7b":"code","7c1481f4":"code","8875f7ef":"code","36ff2bb9":"code","ac6a4354":"code","693ed802":"code","2fc6508b":"code","929e1c92":"code","ae2dce1f":"code","189d3baf":"code","79553a58":"code","f2bcd55e":"code","1bc25da0":"code","245f6f1b":"code","81341aa6":"code","da9237cc":"code","6b94dddc":"code","9ba67c5b":"code","bb58db68":"code","c0187a1f":"code","eec51406":"code","a6431d12":"code","a1bd537a":"code","3c8d35ae":"code","5c72150c":"markdown","44ab35f5":"markdown","3aba7d66":"markdown","a5a446d0":"markdown","d4815fa7":"markdown","428e43b0":"markdown","1725bdcb":"markdown","f6e30361":"markdown","0cf58f15":"markdown","282c38a4":"markdown","50a8df07":"markdown","4fe85248":"markdown","7e180bb8":"markdown","4a0e5715":"markdown","b6db5d47":"markdown","7a03c6a1":"markdown","207e770e":"markdown","c2beeb2f":"markdown","c3f0f2e1":"markdown","0d675f86":"markdown","081426a0":"markdown","7936262a":"markdown","08947abf":"markdown","1ab82a1d":"markdown","cadabba3":"markdown","f127bb7c":"markdown","72b0318c":"markdown","671b3648":"markdown","b341c978":"markdown","e14a5fc6":"markdown","fba16c9c":"markdown","cb311bc9":"markdown","9dc72047":"markdown","5cc611b2":"markdown","c6d5083d":"markdown","fc557fdb":"markdown","07bdda2f":"markdown","8e832dfa":"markdown","0260ad23":"markdown","56c3250e":"markdown","5c74f237":"markdown","bc6c545c":"markdown","24fac0f8":"markdown","72da82de":"markdown","d934037c":"markdown","975d6543":"markdown","36fe8624":"markdown","339bbeb1":"markdown","50158bd3":"markdown","2600bca8":"markdown","b38a4740":"markdown","ab9b0e95":"markdown","ed136ca5":"markdown","d44aeccd":"markdown","5ae05436":"markdown","05560923":"markdown","fad3f04a":"markdown","45796650":"markdown","6c3c3c57":"markdown","82eb7fc6":"markdown","a48435fc":"markdown","c433d31f":"markdown","d272a462":"markdown","0cb9ce5a":"markdown","b27b947e":"markdown"},"source":{"503b65dc":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\nfrom scipy.stats import kurtosis\nfrom scipy.stats import skew","33990e98":"plt.rcParams['figure.figsize'] = (8,5) # set the default size of the plots\nplt.style.use(\"ggplot\")","6cc4df39":"train=pd.read_csv(\"..\/input\/titanic\/train.csv\")\ntest=pd.read_csv(\"..\/input\/titanic\/test.csv\")","e06bdb5d":"print(train.shape)   # TRAIN DataFrame has 891 rows & 12 columns\nprint(train.columns) \ntrain.sample(10)     # print 10 random observations => we can already see that there are missing values","03629325":"print(test.shape)   # TEST DataFrame has 418 rows & 11 columns\nprint(test.columns) \ntest.sample(10)     ","85445151":"train.info() ","e2dc2eac":"test.info()","ed82002a":"train.drop(\"PassengerId\",axis=1).describe()","de4e2835":"test.drop(\"PassengerId\",axis=1).describe()","d8119521":"train.isna().sum()","b7f7e022":"test.isna().sum()","8a77d0b6":"# Deleting the Cabin column from both datasets:\n\ntrain.drop(\"Cabin\",axis=1,inplace=True)\ntest.drop(\"Cabin\",axis=1,inplace=True)","8954089b":"corrmatrix=train.drop(\"PassengerId\",axis=1).corr()\nsns.heatmap(corrmatrix,annot=True)","0aeb7513":"survived=(train.Survived.sum()\/891)*100\nnot_survived=100-survived\nprint(\"{:.2f} % of people survived\".format(survived))\nprint(\"{:.2f} % of people died\".format(not_survived))","113b7bef":"df=pd.DataFrame(train.groupby([\"Pclass\",\"Sex\"]).sum().Survived)\ndf.reset_index(inplace=True)\ndf","52e374bd":"sns.pointplot(x=\"Pclass\",y=\"Survived\",data=df,hue=\"Sex\",palette={\"female\":\"green\",\"male\":\"purple\"},\n              markers=[\"*\",\"^\"],linestyles=[\"-\",\"--\"])\nplt.title(\"Number of survivings grouped by sex & Pclass\")","afe79918":"train[\"age_category\"]=\"\"\n\nfor i in range(891):\n    if train.loc[i,\"Age\"]<1:\n        train.loc[i,\"age_category\"]=\"Infants\"\n    elif 1<=train.loc[i,\"Age\"]<18:\n        train.loc[i,\"age_category\"]=\"Children\"\n    elif 18<=train.loc[i,\"Age\"]<65:\n        train.loc[i,\"age_category\"]=\"Adults\"\n    elif train.loc[i,\"Age\"]>=65:\n        train.loc[i,\"age_category\"]=\"Elders\"\n    else:\n        train.loc[i,\"age_category\"]=\"Unknown\"\ntrain.head()","0b6f529a":"df_2=pd.DataFrame(train.groupby([\"age_category\",]).sum().Survived)\ndf_2[\"Total\"]=train[\"age_category\"].value_counts()\ndf_2.reset_index(inplace=True)\ndf_2","e33878b9":"for i in range(5):\n    print(\"{:.2f} % of {} survived \".format((df_2.loc[i,\"Survived\"]\/df_2.loc[i,\"Total\"])*100,df_2.loc[i,\"age_category\"]))","672b3557":"sns.barplot(x=\"age_category\",y=\"Survived\",data=df_2)\nplt.title(\"Number of survivors grouped by  Age\")","5f8f02df":"df_3=train.groupby(\"SibSp\").sum().Survived\ndf_3","878a2b7f":"sns.barplot(y=df_3,x=df_3.index)\nplt.title(\"Number of survivors grouped by number of Siblings\/ Spouse\")","08bb124b":"df_4=train.groupby(\"Parch\").sum().Survived\ndf_4","716614a0":"sns.barplot(y=df_4,x=df_4.index)\nplt.title(\"Number of survivings grouped by number of Parents\/ Children\")","85d8d5b0":"data={\"Class\":[\"Class1\",\"Class2\",\"Class3\"],\n      \"Passengers\":[train[train.Pclass==1].shape[0],train[train.Pclass==2].shape[0],train[train.Pclass==3].shape[0]]}","ad50382a":"data={\"Class\":[\"Class1\",\"Class2\",\"Class3\"],\n      \"Passengers\":[train[train.Pclass==1].shape[0],train[train.Pclass==2].shape[0],train[train.Pclass==3].shape[0]]}\nClass=pd.DataFrame(data,columns=[\"Class\",\"Passengers\"])\nClass","117d8d3c":"sns.barplot(x=Class.Class,y=Class.Passengers)\nplt.title(\"Number of passengers grouped by class\")","aa3fcd64":"status=[]\nfor i in range(891):\n    status.append(train.Name[i].split()[1])\nstatus[1:10]","45a30b6c":"train[\"status\"]=\"\"\nfor i in range(891):\n    if \"Mr.\" in (train.Name[i].split()):\n        train.loc[i,\"status\"]=\"Mister\"\n    elif \"Miss.\" in (train.Name[i].split()):\n        train.loc[i,\"status\"]=\"Miss\"\n    elif \"Mrs.\" in (train.Name[i].split()):\n        train.loc[i,\"status\"]=\"Mistress\"\n    elif \"Rev.\" in (train.Name[i].split()):\n        train.loc[i,\"status\"]=\"Reverend\"\n    elif \"Master.\" in (train.Name[i].split()):\n        train.loc[i,\"status\"]=\"Master\"\n    elif \"Mlle.\" in (train.Name[i].split()):\n        train.loc[i,\"status\"]=\"Mademoiselle\"\n    elif \"Dr.\" in (train.Name[i].split()):\n        train.loc[i,\"status\"]=\"Doctor\"\n    else:\n        train.loc[i,\"status\"]=\"Other\" ","81e83aad":"train.status.value_counts()","fea7276f":"train[train.status=='Other']","0d89e7a9":"print(train.Sex.value_counts())\nprint(\"{:.2f} % of people were males\".format((train.Sex.value_counts()[0]\/891)*100))\nprint(\"{:.2f} % of people were females\".format((train.Sex.value_counts()[1]\/891)*100))","471d0166":"print(train.groupby(\"Sex\").sum().Survived)\nprint(\"{:.2f} % of females survived\".format((train.groupby(\"Sex\").sum().Survived[0]\/314)*100))\nprint(\"{:.2f} % of males survived\".format((train.groupby(\"Sex\").sum().Survived[1]\/577)*100))\n","a7dc2a49":"sns.boxplot(y=\"Age\",x=\"Sex\",data=train,palette=\"gist_stern\")\nplt.title(\"Distribution of age grouped by sex\")","c07fcc9e":"sns.swarmplot(y=\"Age\",x=\"Sex\",hue=\"age_category\",data=train,palette=\"Set1\")\nplt.title(\"Distribution of age grouped by sex\")","2973741e":"plt.figure(figsize=(10,6))\nsns.distplot(train.Age,kde=False)\nplt.title(\"Distribution of age\")","5a30f9e4":"print(\"Skewness of Age distribution is {:.2f}\".format(skew(train.dropna().Age)))\nprint(\"Kurtosis of Age distribution is {:.2f}\".format(kurtosis(train.dropna().Age)))","26a15778":"train.SibSp.value_counts()","73c15f73":"train.Parch.value_counts()","7fef7cae":"train.drop(\"Ticket\",axis=1,inplace=True)\ntrain.head()","6fd173ea":"train.groupby(\"Pclass\").mean().Fare","081ed14e":"min_3=train[train.Pclass==3].Fare.min()\nmax_3=train[train.Pclass==3].Fare.max()\nmin_2=train[train.Pclass==2].Fare.min()\nmax_2=train[train.Pclass==2].Fare.max()\nmin_1=train[train.Pclass==1].Fare.min()\nmax_1=train[train.Pclass==1].Fare.max()\nprint(\"Minimum price for class 3 is {}\".format(min_3))\nprint(\"Maximum price for class 3 is {}\".format(max_3))\nprint(\"Minimum price for class 2 is {}\".format(min_2))\nprint(\"Maximum price for class 2 is {}\".format(max_2))\nprint(\"Minimum price for class 1 is {}\".format(min_1))\nprint(\"Maximum price for class 1 is {}\".format(max_1))","432f17b1":"sns.boxplot(train.Fare)","d7b9057a":"sns.swarmplot(y=\"Fare\",data=train,color=\"purple\")","b6c70c99":"sns.distplot(train.Fare,kde=False)\nplt.xlim(0,300)\nprint(skew(train.Fare))\nprint(kurtosis(train.Fare))","e96981f9":"train.Embarked.value_counts()","4fb86401":"embarked=pd.DataFrame(train[[\"Pclass\",\"Embarked\"]].value_counts(sort=False))\nembarked.reset_index(inplace=True)\nembarked.columns=[\"Class\",\"Embarked\",\"No. of passengers\"]\nembarked","6e76da91":"sns.pointplot(x=\"Embarked\",y=\"No. of passengers\",hue=\"Class\",data=embarked,\n               markers=[\"^\",\"o\",\"*\"],linestyles=[\"-\",\"--\",\":\"])\nposition=(0,1,2)\nlabels=(\"Cherbourg\",\"Queenstown\",\"Southampton\")\nplt.xticks(position,labels)\nplt.title(\"Number of passengers grouped by class and embarked place\")\nplt.show()","2a9d2cc3":"train[(train.status==\"Master\") & (train.Age.isna())]","3d09879a":"mean_age_children=round(train[(train[\"age_category\"]==\"Children\") | (train[\"age_category\"]==\"Infants\")].Age.mean())\nmean_age_children\n","a596b75b":"train[(train.status==\"Master\") & (train.Age.isna())]=train[(train.status==\"Master\") & (train.Age.isna())].fillna(mean_age_children)\ntrain[train.status==\"Master\"].Age.isna().sum() # Succesfully replaced the NaN values","2085dc3d":"train[(train.status==\"Mistress\") & (train.Age.isna())]","abc1e591":"mean_age_mistress=round(train[train.status==\"Mistress\"].Age.mean())\nmean_age_mistress","1a35bf7b":"train[(train.status==\"Mistress\") & (train.Age.isna())]=train[(train.status==\"Mistress\") &(train.Age.isna())].fillna(mean_age_mistress)\ntrain[train.status==\"Mistress\"].Age.isna().sum() ","7c1481f4":"train[(train.status==\"Mister\")].shape","8875f7ef":"train[(train.status==\"Mister\") & (train.Age.isna())]","36ff2bb9":"mean_age_mister=round(train[train.status==\"Mister\"].Age.mean())\nmean_age_mister","ac6a4354":"train[(train.status==\"Mister\") & (train.Age.isna())]=train[(train.status==\"Mister\") & (train.Age.isna())].fillna(mean_age_mister)\ntrain[train.status==\"Mister\"].Age.isna().sum() ","693ed802":"for i in range(888):\n    if train.loc[i,\"Age\"]<1:\n        train.loc[i,\"age_category\"]=\"Infants\"\n    elif 1<=train.loc[i,\"Age\"]<18:\n        train.loc[i,\"age_category\"]=\"Children\"\n    elif 18<=train.loc[i,\"Age\"]<65:\n        train.loc[i,\"age_category\"]=\"Adults\"\n    elif train.loc[i,\"Age\"]>=65:\n        train.loc[i,\"age_category\"]=\"Elders\"\n    else:\n        train.loc[i,\"age_category\"]=\"Unknown\"","2fc6508b":"print(train.Age.isna().sum())\ntrain[train.Age.isna()]","929e1c92":"mean_age_maleAdult=round(train[(train[\"age_category\"]==\"Adults\") &(train.Sex==\"male\")].Age.mean())\nmean_age_maleAdult","ae2dce1f":"mean_age_femaleAdult=round(train[(train[\"age_category\"]==\"Adults\") &(train.Sex==\"female\")].Age.mean())\nprint(mean_age_femaleAdult)\nmean_age_femaleChildren=round(train[(train[\"age_category\"]==\"Children\") &(train.Sex==\"female\")].Age.mean())\nprint(mean_age_femaleChildren)","189d3baf":"train[(train.Age.isna()) & (train.Parch==0)]=train[(train.Age.isna()) & (train.Parch==0)].fillna(mean_age_femaleAdult)\ntrain[train.Age.isna()] # these are the remaining records with NaN values","79553a58":"train[train.Age.isna()]=train[train.Age.isna()].fillna(mean_age_femaleChildren)","f2bcd55e":"for i in range(891):\n    if train.loc[i,\"Age\"]<1:\n        train.loc[i,\"age_category\"]=\"Infants\"\n    elif 1<=train.loc[i,\"Age\"]<18:\n        train.loc[i,\"age_category\"]=\"Children\"\n    elif 18<=train.loc[i,\"Age\"]<65:\n        train.loc[i,\"age_category\"]=\"Adults\"\n    elif train.loc[i,\"Age\"]>=65:\n        train.loc[i,\"age_category\"]=\"Elders\"\n    else:\n        train.loc[i,\"age_category\"]=\"Unknown\"","1bc25da0":"train.isna().sum()","245f6f1b":"train[train.Embarked.isna()]","81341aa6":"train.fillna(\"S\",inplace=True)\ntrain.isna().sum()","da9237cc":"test.drop(\"Ticket\",axis=1,inplace=True)\n\ntest[\"age_category\"]=\"\"\n\nfor i in range(418):\n    if test.loc[i,\"Age\"]<1:\n        test.loc[i,\"age_category\"]=\"Infants\"\n    elif 1<=test.loc[i,\"Age\"]<18:\n        test.loc[i,\"age_category\"]=\"Children\"\n    elif 18<=train.loc[i,\"Age\"]<65:\n        test.loc[i,\"age_category\"]=\"Adults\"\n    elif test.loc[i,\"Age\"]>=65:\n        test.loc[i,\"age_category\"]=\"Elders\"\n    else:\n        test.loc[i,\"age_category\"]=\"Unknown\"\n\ntest[\"status\"]=\"\"\nfor i in range(418):\n    if \"Mr.\" in (test.Name[i].split()):\n        test.loc[i,\"status\"]=\"Mister\"\n    elif \"Miss.\" in (test.Name[i].split()):\n        test.loc[i,\"status\"]=\"Miss\"\n    elif \"Mrs.\" in (test.Name[i].split()):\n        test.loc[i,\"status\"]=\"Mistress\"\n    elif \"Rev.\" in (test.Name[i].split()):\n        test.loc[i,\"status\"]=\"Reverend\"\n    elif \"Master.\" in (test.Name[i].split()):\n        test.loc[i,\"status\"]=\"Master\"\n    elif \"Dr.\" in (test.Name[i].split()):\n        test.loc[i,\"status\"]=\"Doctor\"\n    else:\n        test.loc[i,\"status\"]=\"Other\" \n        \nmean_age_children=round(test[(test[\"age_category\"]==\"Children\") | (test[\"age_category\"]==\"Infants\")].Age.mean())\ntest[(test.status==\"Master\") & (test.Age.isna())]=test[(test.status==\"Master\") & (test.Age.isna())].fillna(mean_age_children)\n\nmean_age_mistress=round(test[test.status==\"Mistress\"].Age.mean())\ntest[(test.status==\"Mistress\") & (test.Age.isna())]=test[(test.status==\"Mistress\") &(test.Age.isna())].fillna(mean_age_mistress)\n\nmean_age_mister=round(test[test.status==\"Mister\"].Age.mean())\ntest[(test.status==\"Mister\") & (test.Age.isna())]=test[(test.status==\"Mister\") & (test.Age.isna())].fillna(mean_age_mister)\n\nfor i in range(418):\n    if test.loc[i,\"Age\"]<1:\n        test.loc[i,\"age_category\"]=\"Infants\"\n    elif 1<=test.loc[i,\"Age\"]<18:\n        test.loc[i,\"age_category\"]=\"Children\"\n    elif 18<=train.loc[i,\"Age\"]<65:\n        test.loc[i,\"age_category\"]=\"Adults\"\n    elif test.loc[i,\"Age\"]>=65:\n        test.loc[i,\"age_category\"]=\"Elders\"\n    else:\n        test.loc[i,\"age_category\"]=\"Unknown\"\n        \nmean_age_femaleAdult=round(test[(test[\"age_category\"]==\"Adults\") &(test.Sex==\"female\")].Age.mean())\nmean_age_femaleChildren=round(test[(test[\"age_category\"]==\"Children\") &(test.Sex==\"female\")].Age.mean())\n\ntest[(test.Age.isna()) & (test.Parch==0)]=test[(test.Age.isna()) & (test.Parch==0)].fillna(mean_age_femaleAdult)\ntest[test.Age.isna()]=test[test.Age.isna()].fillna(mean_age_femaleChildren)\n\nfor i in range(418):\n    if test.loc[i,\"Age\"]<1:\n        test.loc[i,\"age_category\"]=\"Infants\"\n    elif 1<=test.loc[i,\"Age\"]<18:\n        test.loc[i,\"age_category\"]=\"Children\"\n    elif 18<=test.loc[i,\"Age\"]<65:\n        test.loc[i,\"age_category\"]=\"Adults\"\n    elif test.loc[i,\"Age\"]>=65:\n        test.loc[i,\"age_category\"]=\"Elders\"\n    else:\n        test.loc[i,\"age_category\"]=\"Unknown\"\n        \nfare_mean=test[test.Pclass==3].Fare.mean()\ntest.fillna(fare_mean,inplace=True)\n\nprint(test.isna().sum())\n\n","6b94dddc":"from sklearn.preprocessing import LabelEncoder\n\n\nlabel_encoder = LabelEncoder()\n\ncol=[\"Sex\",\"Embarked\",\"age_category\"]\nfor i in col:\n    train[i]=label_encoder.fit_transform(train[i])\n    test[i]=label_encoder.fit_transform(test[i])\n","9ba67c5b":"corrmatrix=train.drop(\"PassengerId\",axis=1).corr()\nsns.heatmap(corrmatrix,annot=True)","bb58db68":"from sklearn.model_selection import train_test_split\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.metrics import accuracy_score\n","c0187a1f":"features1=[\"Pclass\",\"Sex\",\"Fare\",\"age_category\"]\nX1=train[features1]\ny1=train.Survived\n\nX_train1, X_test1, y_train1,y_test1=train_test_split(X1,y1,test_size=0.22,random_state=0)\n\n\nDT1=DecisionTreeClassifier(random_state=1)\nDT1.fit(X_train1,y_train1)\ny_pred1=DT1.predict(X_test1)\nscore=(round(accuracy_score(y_pred1,y_test1)*100,2))\nscore\n","eec51406":"features2=[\"Pclass\",\"Sex\",\"Fare\"]\nX2=train[features2]\ny2=train.Survived\n\nX_train2, X_test2, y_train2,y_test2=train_test_split(X2,y2,test_size=0.21,random_state=0)\n\n\nDT2=DecisionTreeClassifier(random_state=1)\nDT2.fit(X_train2,y_train2)\ny_pred2=DT2.predict(X_test2)\nscore=round(accuracy_score(y_pred2,y_test2)*100,2)\nscore","a6431d12":"from sklearn.ensemble import GradientBoostingClassifier\n\nxgb = GradientBoostingClassifier(random_state=1)\nxgb.fit(X_train1, y_train1)\ny_pred = xgb.predict(X_test1)\nscore_xgb = round(accuracy_score(y_pred, y_test1) * 100, 2)\nscore_xgb","a1bd537a":"Jack=[3,1,7.89,0] # class=3, male=1, the median of price for class 3= 7.89, adult=0\nRose=[1,0,60,0]   \n\npredictions=xgb.predict([Jack,Rose])\nprint(\"Did Jack survived?  {}\".format(predictions[0]))\nprint(\"Did Rose survived?  {}\".format(predictions[1]))","3c8d35ae":"ids = test['PassengerId']\nX_test=test[features1]\npredictions = xgb.predict(X_test)\n\ndf = pd.DataFrame({ 'PassengerId' : ids, 'Survived': predictions })\ndf.to_csv('submission.csv', index=False)","5c72150c":"They are all (except one) from Class 1 (quite fancy names and titles). \n\nSo these honorifics mean:\n* Mister: for men, regardless of marital status, who do not have another professional or academic title\n* Miss\/ Mademoiselle: for girls, unmarried women\n* Mistress: for married women who do not have another professional or academic title\n* Master: for male children \n\nThese titles can help us estimate age where is missing.","44ab35f5":"We filled all of the missing values from Age column. Now remains the 2 records with missing Embarked values:","3aba7d66":"# 3. Name","a5a446d0":"There are 12 people with an unidentified status. Let's see them.","d4815fa7":"Most of the people did't have siblings\/ a spouse on the board. We saw above that those who had a few siblings\/ children, no spouse or no parents had a higher rate of survival. ","428e43b0":"In general, I observed that the second word from the name shows the status of each person. Let's see the honorifics. Of course, this is not a rule.","1725bdcb":"We are left with 37 missing values of Age. They are all women and named \"Miss\" (except one Doctor). ","f6e30361":"# 2. PCLASS","0cf58f15":"# <h1><center> Machine Learning with Titanic<\/center><\/h1>\n<center><img src=\"https:\/\/radioeasy.ro\/wp-content\/uploads\/2019\/04\/desc%C4%83rcare.jpg\"><\/center>\n <center>\"The sounds of people drowning are something that I can not describe to you, and neither can anyone else. Its the most dreadful sound and there is a terrible silence that follows it.\"  -Eva Hart, Titanic Survivor<\/center>","282c38a4":"Even though my model is not very good and probably is overfitting, at least it makes justice to the classical love story. \n\nOver time I will try to improve this notebook and score a better result :). Thank you for your patience, any advice is welcomed. ","50a8df07":"I will consider only the correlations above\/below \u00b1 0.2:\n\n* Survived rate is a lot influenced by Pclass and Fare (both these independent variables are negative correlated: higher price paid, higher class: they seem negative correlated because of the labels of Pclass )\n* Age and Pclass are negative correlated: this means that older people tend to have a higher class (and be richer)\n* Parch and SibSp are positive correlated \n* Age and SibSp are negative correlated","4fe85248":"Conclusions: \n* Females had a higher survival rate, especially those from Pclass 1\n* Surprisingly, both females and males from Pclass 3 had a higher rate of survival than those from Pclass 2\n* It's a big difference between the males from the Pclass 2 and the rest . Why are there so few survivors from this class?\n","7e180bb8":"1. Model with age_cateogry feature:","4a0e5715":"We have a lot of outliers, but I will remove only the 3 values above 500 to not confuse to much the future models.","b6db5d47":"<a id=\"1\"><\/a>\n<h2 style='background:darkred; border:0; color:white'><center>Datasets Quick Overview<\/center><h2>","7a03c6a1":"From now on I will analyze each variable individually to gain any useful possible information . The variables will be only from the TRAIN set since I will create the model based on these data. Also, considering the above describe method, the data are pretty similar.  \n\nBut before all, let's see the relationship between variables through correlation matrix.","207e770e":"Hello Kaggle! This is my first Submission Competition and my firt ML project. Any corrections, ideas or suggestions are higly apreciated and I hope that other beginners will find this notebook useful. \n\nLet's begin :)","c2beeb2f":"More than half of the people died. \n\nLet's see the survival rate from the point of view of the other variables.","c3f0f2e1":"We can apply the same concept for men with \"Mister\" in their names. We have 119 missing values and 515-119=396 known values which we will use to calculate the average.","0d675f86":"The average price of a ticket for each class is:","081426a0":"People with no Siblings\/Spouse had a very high rate of survival. There are no survivors with 5 or 8 siblings\/spouse. ","7936262a":" <a id=\"4\"><\/a>\n<h2 style='background:darkred; border:0; color:white'><center>Data Modeling<\/center><h2>","08947abf":"Let's see the surviving rate from the point of view of Age. I will group people in Infants, Children, Adults and Elderly to be easier to visualize the results.","1ab82a1d":"All the infants survived. On the other hand, only one elder survived. As women, children were a prority in rescuing.","cadabba3":"# 8. Ticket","f127bb7c":"Our distribution have a strong positive skewness. This is because a lot of people are from class 3, so a lot of tickets are cheap => small values are predominant. Also, the form of the distribution is too peak.","72b0318c":"The same thing is applied to the number of parents\/ children\n\nThose who had no relatives or a small number of them on board had a high chance of survival.","671b3648":"Now let's transform the categorical data into numerical data through encoding. ","b341c978":" <a id=\"5\"><\/a>\n<h2 style='background:darkred; border:0; color:white'><center>Jack and Rose<\/center><h2>","e14a5fc6":"Again, let's update the age_category column for the last time.","fba16c9c":"0 is not a realistic price, so I've done some research and these people were probably part from the crew and didn't have to pay a price for the ticket. ","cb311bc9":"I will keep age_category.","9dc72047":"But before predicting the survivals, let's answer the REAL question: Based on this model, would Rose and Jack have survived? :)","5cc611b2":"# 10. Embarked","c6d5083d":"Also, women who have the status \"Mistress\" are married, so they are adults. \n\nWe have 17 women with Mistress status and missing Age. I will calculate the average age of married women and fill the  missing values.","fc557fdb":"This column doesn't say too much, so I will drop it. ","07bdda2f":"We have some outliers represented by old men. We can see that the Unknown label has no sense here (there is no age recorded for Unknown).","8e832dfa":"2. Model without age_cateogry feature:","0260ad23":"# 1. SURVIVED","56c3250e":"# 1. Missing Data\n\nFirst, we must handle the missing data. We got:\n* 177 missing values in column Age\n* 2 missing values in column Embarked\n\nWe observed that those who have the word \"Master\" in their name are children. I will calculate the average age of children and then fill the NaN values for those who have the \"Master\" status.\n","5c74f237":"How many missing values are in the datasets? \n","bc6c545c":" <a id=\"3\"><\/a>\n<h2 style='background:darkred; border:0; color:white'><center>Data Preprocessing<\/center><h2>","24fac0f8":" <a id=\"6\"><\/a>\n<h2 style='background:darkred; border:0; color:white'><center>Submission file<\/center><h2>","72da82de":"So we know that a female called Miss is either a young girl or an unmarried woman => the SibSp field means in this case only Sib\n* If the female is an unmarried woman is very likey that she don't have Parents or Children on board => the field Parch should be 0. Also, at the same time the SibSp can be >= 1, meaning that they have a sibling or more on board.\n* Otherwise, the females are probably young girls and I will include them in Children category\n\nLet's take care of the Doctor first.\n\nWe can see that the average age for male and female adults is the same so we will treat the Doctor the same we will treat Misses.","d934037c":"# 9. Fare","975d6543":"So what are the conclusions after all of these things? \n\nWe want to include in our models the variables which have an impact upon Survived column. So the variables which are negatively\/positevely correlated with Survived are: \n* Pclass\n* Sex\n* Fare\n* Embarked\n\nBut what about age?? I studied some other Notebooks and I observed that many people included Age in their models. So I wanted to try with age_feature and then include only the ones above. ","36fe8624":"<a id=\"top\"><\/a>\n\n<div class=\"list-group\" id=\"list-tab\" role=\"tablist\">\n<h3 class=\"list-group-item list-group-item-action active\" data-toggle=\"list\" style='background:darkred; border:0' role=\"tab\" aria-controls=\"home\"><center>Quick navigation<\/center><\/h3>\n\n* [1. Datasets Quick Overview](#1)\n* [2. Data Visualization](#2)\n* [3. Data Preprocessing](#3)\n* [4. Data Modeling](#4)\n* [5. Jack and Rose](#5)\n* [6. Submission file](#6)","339bbeb1":"We have:\n* TRAIN set: 177 missing values for Age, 687 missing values for Cabin and 2 missing values for Embarked\n* TEST set: 86 missing values for Age, 327 missing values for Cabin and 1 missing value for Fare\n\nThe Cabin doesn't seem to influence too much the survival rate and there are way too many missing values, so I will delete this column for both datasets. However, I will keep the other columns and handle later the missing values in different ways. ","50158bd3":"More than half of the people were males.","2600bca8":"# Gradient Boosting Classifier","b38a4740":"A normal distribution has skewness and kurtosis 0. Our distribution is almost normal, with a slightly positive skewness.  ","ab9b0e95":"# 4. Sex","ed136ca5":"# 5. Age","d44aeccd":"# Decision Tree Classifier","5ae05436":"Most of the people embarked in Southampton.","05560923":"More than half of the people were Class 3. ","fad3f04a":"I know that the accuracy for Decision Tree model is bigger, but i will choose the XGB model because the risk of overfitting is smaller. ","45796650":"# 6. SibSp","6c3c3c57":"As we saw in the second part of this project, the majority of people from Class 1 embarked in Southampton, so I will suppose that this is the case here. ","82eb7fc6":" <a id=\"2\"><\/a>\n<h2 style='background:darkred; border:0; color:white'><center>Data Visualization<\/center><h2>","a48435fc":"After this transformation let's see again the correlations between variables.","c433d31f":"# 7. Parch","d272a462":"A lot of people from class 3 embarked in Southhampton and very few from class 2 embarked in Cherbourg. ","0cb9ce5a":"Let's update the age_category column","b27b947e":"We no longer have NaN values. Next, I will deal with the NaN values from TEST dataset in the same way as I did above. "}}