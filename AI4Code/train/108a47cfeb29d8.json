{"cell_type":{"c02de805":"code","9a7a846e":"code","215df039":"code","97f3ef13":"code","5780ea92":"code","d60ecbff":"code","722381fb":"code","dee0e25f":"code","441ee843":"code","0c62d134":"code","d329f8ec":"code","cbf8f49f":"code","0b6815a1":"code","debcb4f7":"code","4f0d9eb7":"code","046bde90":"code","0d0c0266":"code","47983899":"code","4c57c50f":"code","a70489f6":"code","8bfe30a9":"code","4670fb1e":"code","76be085f":"code","312ad26b":"code","d6dc3d73":"code","f5066d52":"code","769f6789":"code","f15964dd":"code","84b521a2":"code","6ac17f6b":"code","b1cd0f7f":"code","f9569c48":"code","7effc8c2":"code","ab1b1f39":"code","cc43db8f":"code","e57a0d87":"code","d1f17ad3":"code","88eb41e7":"code","292212be":"code","6a22a4c4":"code","63c1966f":"code","2c3ff837":"code","be4ffb34":"code","1453e6d7":"code","7498b969":"code","d219f81e":"code","da9fd8ec":"code","35950cd1":"code","55c505c2":"code","701197b2":"code","ce9e4de6":"code","b2a8a17b":"code","15d57280":"code","1d2b01a0":"code","5ffd04d9":"code","c8b1c38d":"code","23522a3c":"code","b061f865":"code","1d224b8a":"code","d7cfed63":"code","206abb5c":"code","1f401f06":"code","2d870154":"code","8949479e":"code","d6a6ea6e":"code","7c693c2f":"code","f89101ec":"code","1d532efa":"code","423ce2d4":"code","259f97c1":"code","12e011f8":"code","1374524d":"code","5b6d951c":"code","74d15556":"code","8045f0ec":"code","d45c0ae9":"markdown","6f5432a5":"markdown","78f5c3f0":"markdown","e0fd9767":"markdown","9d6832de":"markdown","066e87cf":"markdown","5d5c1ec2":"markdown","46abf37b":"markdown","dc1958e1":"markdown","c4347213":"markdown","fd7c0a22":"markdown","ac468fed":"markdown","b75834b9":"markdown","34b1d16b":"markdown"},"source":{"c02de805":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport seaborn as sns\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n","9a7a846e":"data=pd.read_csv('..\/input\/paris-housing-classification\/ParisHousingClass.csv')\ndata.head()","215df039":"#checking for null and non null values\ndata.info()","97f3ef13":"#rows and column\ndata.shape","5780ea92":"#for checking the quality of data\ndata.describe()","d60ecbff":"#to convert categorical to numerical\nfrom sklearn.preprocessing import LabelEncoder\nle=LabelEncoder()\ndata['n_category']=le.fit_transform(data['category'])","722381fb":"data.head()","dee0e25f":"#dropping catergory column\ndata.drop('category',axis=1,inplace=True)","441ee843":"data.head()","0c62d134":" \ndata.n_category.value_counts()","d329f8ec":"mino_class=len(data[data['n_category']==1])\nprint(mino_class)","cbf8f49f":"majo_class_index=data[data['n_category']==0].index\nprint(majo_class_index)","0b6815a1":"mino_class_index=data[data['n_category']==1].index","debcb4f7":"data[data['n_category']==0]","4f0d9eb7":"random_majority_indices=np.random.choice(majo_class_index,mino_class,replace=False)\nlen(random_majority_indices)","046bde90":"under_sample_indices=np.concatenate([mino_class_index,random_majority_indices])\nlen(under_sample_indices)","0d0c0266":"df=data.loc[under_sample_indices]","47983899":"df.n_category.value_counts()","4c57c50f":"sns.distplot(df.squareMeters)\n#checking distribution - multimodal distribution","a70489f6":"sns.distplot(df.numberOfRooms)","8bfe30a9":"sns.distplot(df.floors)","4670fb1e":"sns.distplot(df.numPrevOwners)","76be085f":"sns.distplot(df.basement)","312ad26b":"sns.distplot(df.garage)","d6dc3d73":"sns.distplot(df.hasGuestRoom)","f5066d52":"sns.distplot(df.price)","769f6789":"sns.pairplot(data)","f15964dd":"sns.boxplot(df['n_category'],df['squareMeters'])","84b521a2":"sns.boxplot(df['n_category'],df['numberOfRooms'])","6ac17f6b":"sns.boxplot(df['n_category'],df['floors'])","b1cd0f7f":"sns.boxplot(df['n_category'],df['numPrevOwners'])","f9569c48":"sns.boxplot(df['n_category'],df['basement'])","7effc8c2":"sns.boxplot(df['n_category'],df['garage'])","ab1b1f39":"sns.boxplot(df['n_category'],df['hasGuestRoom'])","cc43db8f":"sns.boxplot(df['n_category'],df['price'])","e57a0d87":"import matplotlib.pyplot as plt","d1f17ad3":"plt.figure(figsize=(15,15))\nsns.heatmap(df.corr(),annot=True)","88eb41e7":"x=df[['hasYard','hasPool','isNewBuilt']]\nx","292212be":"y=df['n_category']\ny","6a22a4c4":"from sklearn.model_selection import train_test_split\nx_train, x_test, y_train, y_test = train_test_split(x,y,test_size = 0.2,random_state=123,stratify=y)","63c1966f":"from sklearn.preprocessing import StandardScaler\nscaler = StandardScaler()\nx_train = scaler.fit_transform(x_train)\nx_test = scaler.fit_transform(x_test)","2c3ff837":"from sklearn.ensemble import RandomForestClassifier\nrf = RandomForestClassifier()\nrf.fit(x,y)","be4ffb34":"print(rf.feature_importances_)","1453e6d7":"from sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.svm import SVC\nfrom sklearn.ensemble import GradientBoostingClassifier\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.ensemble import RandomForestClassifier, AdaBoostClassifier\nfrom sklearn.naive_bayes import GaussianNB\nfrom sklearn.linear_model import LogisticRegression","7498b969":"names = [\n    \"Nearest Neighbors\",\n    \"Linear SVM\",\n    \"Gradient_Boosting\",\n    \"Decision Tree\",\n    \"Random Forest\",\n    \"AdaBoost\",\n    \"Naive Bayes\",\n    \"Logistic_Regression\",\n]\n\nclassifiers = [\n    KNeighborsClassifier(3),\n    SVC(kernel=\"linear\", C=0.025),\n    GradientBoostingClassifier(n_estimators=100,learning_rate=1.0),\n    DecisionTreeClassifier(max_depth=5),\n    RandomForestClassifier(max_depth=5, n_estimators=10, max_features=1),\n    AdaBoostClassifier(n_estimators=100),\n    GaussianNB(),\n    LogisticRegression()\n]","d219f81e":"scores = []\nfor name, clf in zip(names,classifiers):\n  clf.fit(x_train,y_train)\n  score = clf.score(x_test,y_test)\n  scores.append(score)","da9fd8ec":"scores","35950cd1":"df1 = pd.DataFrame()\ndf1['Names'] = names\ndf1['Score'] = scores\ndf1","55c505c2":"cm = sns.light_palette('green',as_cmap=True)\ns = df1.style.background_gradient(cmap=cm)\ns","701197b2":"sns.set(style=\"whitegrid\")\nax = sns.barplot(y ='Names',x = 'Score',data = df1)","ce9e4de6":"classifier = AdaBoostClassifier(base_estimator=None, n_estimators=100, learning_rate=1.0, random_state=1)","b2a8a17b":"classifier.fit(x_train,y_train)","15d57280":"y_pred = classifier.predict(x_test)","1d2b01a0":"from sklearn.metrics import classification_report,roc_auc_score,roc_curve,auc\nreport = classification_report(y_test,y_pred)\nprint(report)","5ffd04d9":"roc_auc_score(y_test,y_pred)","c8b1c38d":"fpr,tpr,threshold =roc_curve(y_test,y_pred)\nauc = auc(fpr,tpr)","23522a3c":"plt.figure(figsize=(5,5),dpi=100)\nplt.plot(fpr,tpr,linestyle='-',label = \"(auc = %0.3f)\" % auc)\nplt.xlabel('False Positive Rate')\nplt.ylabel('True Positive Rate')\nplt.legend()\nplt.show()","b061f865":"x1=data[['hasYard','hasPool','isNewBuilt']]\nx1","1d224b8a":"y1=data['n_category']\ny1","d7cfed63":" from imblearn.over_sampling import RandomOverSampler\nros = RandomOverSampler(random_state=0)\nx1_resampled, y1_resampled = ros.fit_resample(x1, y1)\nfrom collections import Counter\nprint(sorted(Counter(y1_resampled).items()))\n[(0, 4674), (1, 4674), (2, 4674)]","206abb5c":"x1_resampled","1f401f06":"y1_resampled","2d870154":"y1_resampled.value_counts()","8949479e":"x1_train, x1_test, y1_train, y1_test = train_test_split(x1_resampled,y1_resampled,test_size = 0.2,random_state=123,stratify=y1_resampled)\n","d6a6ea6e":"names = [\n    \"Nearest Neighbors\",\n    \"Linear SVM\",\n    \"Gradient_Boosting\",\n    \"Decision Tree\",\n    \"Random Forest\",\n    \"AdaBoost\",\n    \"Naive Bayes\",\n    \"Logistic_Regression\",\n]\n\nclassifiers = [\n    KNeighborsClassifier(3),\n    SVC(kernel=\"linear\", C=0.025),\n    GradientBoostingClassifier(n_estimators=100,learning_rate=1.0),\n    DecisionTreeClassifier(max_depth=5),\n    RandomForestClassifier(max_depth=5, n_estimators=10, max_features=1),\n    AdaBoostClassifier(n_estimators=100),\n    GaussianNB(),\n    LogisticRegression()\n]","7c693c2f":"scores = []\nfor name, clf in zip(names,classifiers):\n  clf.fit(x1_train,y1_train)\n  score = clf.score(x1_test,y1_test)\n  scores.append(score)","f89101ec":"scores","1d532efa":"df1 = pd.DataFrame()\ndf1['Names'] = names\ndf1['Score'] = scores\ndf1","423ce2d4":"cm = sns.light_palette('green',as_cmap=True)\ns = df1.style.background_gradient(cmap=cm)\ns","259f97c1":"sns.set(style=\"whitegrid\")\nax = sns.barplot(y ='Names',x = 'Score',data = df1)","12e011f8":"classifier = AdaBoostClassifier(base_estimator=None, n_estimators=100, learning_rate=1.0, random_state=1)","1374524d":"classifier.fit(x1_train,y1_train)","5b6d951c":"y_pred = classifier.predict(x1_test)","74d15556":"report = classification_report(y1_test,y_pred)\nprint(report)","8045f0ec":"roc_auc_score(y1_test,y_pred)","d45c0ae9":"**DATA IS BALANCED**","6f5432a5":"# model building\n**KNeighborsClassifier**\n\n**SVC**\n\n**GradientBoostingClassifier**\n\n**DecisionTreeClassifier**\n \n **RandomForestClassifier**\n \n **AdaBoostClassifier**\n \n **GaussianNB**\n \n**LogisticRegression**\n","78f5c3f0":"# loading data","e0fd9767":"**important features are (HAS YARD , HAS POOL , IS NEW BUILT )**","9d6832de":"# OVERSAMPLING","066e87cf":"# datapreprocessing : label encoder","5d5c1ec2":"# CONCLUSION:\n* AFTER PERFORMING EDA WE GET TO KNOW THE BEST IMPORTANT FEATURE FOR THIS DATASET.\n* AFTER PERFORMING OVERSAMPLING WE ATTAINED 100% ACCURACY FOR ALL THE MODELS USED.","46abf37b":"# checking for outliers","dc1958e1":"# corelation matrix","c4347213":"# checking the DS Is balanced or not","fd7c0a22":"# datavisualization","ac468fed":"# undersampling ","b75834b9":"# FINAL REPORT ","34b1d16b":"# AUC CURVE"}}