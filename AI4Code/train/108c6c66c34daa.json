{"cell_type":{"5aa746d6":"code","e4cdcd81":"code","656fc78a":"code","92026a5f":"code","c5414d1c":"code","4f936a04":"code","f79620b1":"code","9c18ed44":"code","be2ed0d9":"code","2341ed0e":"code","73dfdd5d":"code","bfa4e473":"code","615b01b5":"code","9b32cfc1":"code","8c0fb03d":"code","dae192f6":"code","9cc1cc83":"code","da00e17d":"code","e3d45d40":"code","4e05c942":"code","15f25c0e":"code","bd551709":"code","54c5f43e":"code","2dc5003f":"code","1801cf63":"code","8bc03619":"code","7006f65f":"code","6bcbbea9":"code","ba27a1a2":"code","cc5c3036":"code","5a25b14c":"code","60a3181a":"code","6727ec4f":"code","8cd51e1b":"code","7e1234f9":"code","fad4163a":"code","2b8d0218":"code","10d63878":"code","452dde9f":"code","f1cd866b":"code","d3c19323":"code","bcf832d0":"code","17f4c1b7":"code","6cbd4740":"code","aed398ad":"code","9e64c4aa":"code","e0d392b6":"code","c49ff72d":"code","25fe2bf1":"code","079ef448":"code","bd950f9d":"code","247e1c66":"code","f59d2169":"code","a1af7f6c":"code","7ac1d7a3":"code","75510ee1":"code","21e6b90c":"code","7cf7b24a":"code","0b79bafc":"code","c83a5102":"code","3de65993":"code","22d5a9df":"code","78ae6dfd":"code","86ff9570":"code","449311a4":"code","c9bf2671":"code","38919d77":"code","ddd9a88c":"markdown","07bd1433":"markdown","99b1393d":"markdown","1f4ebf1e":"markdown","d6afee3d":"markdown","b612cac6":"markdown","fff27c4c":"markdown","4628d84f":"markdown","4150b49e":"markdown","d0174ee9":"markdown","e2c5d04a":"markdown","4ff997b0":"markdown","ac922e7a":"markdown"},"source":{"5aa746d6":"import numpy as np \nimport matplotlib.pyplot as plt \nimport matplotlib.colors as mcolors\nimport pandas as pd \nimport random\nimport math\nimport time\nfrom sklearn.linear_model import LinearRegression, BayesianRidge\nfrom sklearn.model_selection import RandomizedSearchCV, train_test_split\nfrom sklearn.preprocessing import PolynomialFeatures\nfrom sklearn.tree import DecisionTreeRegressor\nfrom sklearn.svm import SVR\nfrom sklearn.metrics import mean_squared_error, mean_absolute_error\nimport datetime\nimport operator \nplt.style.use('fivethirtyeight')\n%matplotlib inline ","e4cdcd81":"confirmed_df = pd.read_csv('https:\/\/raw.githubusercontent.com\/CSSEGISandData\/COVID-19\/master\/csse_covid_19_data\/csse_covid_19_time_series\/time_series_covid19_confirmed_global.csv')\ndeaths_df = pd.read_csv('https:\/\/raw.githubusercontent.com\/CSSEGISandData\/COVID-19\/master\/csse_covid_19_data\/csse_covid_19_time_series\/time_series_covid19_deaths_global.csv')\nrecoveries_df = pd.read_csv('https:\/\/raw.githubusercontent.com\/CSSEGISandData\/COVID-19\/master\/csse_covid_19_data\/csse_covid_19_time_series\/time_series_covid19_recovered_global.csv')\nlatest_data = pd.read_csv('https:\/\/raw.githubusercontent.com\/CSSEGISandData\/COVID-19\/master\/csse_covid_19_data\/csse_covid_19_daily_reports\/04-02-2020.csv')","656fc78a":"latest_data.head()","92026a5f":"confirmed_df.head()","c5414d1c":"cols = confirmed_df.keys()","4f936a04":"confirmed = confirmed_df.loc[:, cols[4]:cols[-1]]\ndeaths = deaths_df.loc[:, cols[4]:cols[-1]]\nrecoveries = recoveries_df.loc[:, cols[4]:cols[-1]]","f79620b1":"dates = confirmed.keys()\nworld_cases = []\ntotal_deaths = [] \nmortality_rate = []\nrecovery_rate = [] \ntotal_recovered = [] \ntotal_active = [] \nchina_cases = [] \nitaly_cases = []\nus_cases = [] \nspain_cases = [] \nfrance_cases = [] \n\nfor i in dates:\n    confirmed_sum = confirmed[i].sum()\n    death_sum = deaths[i].sum()\n    recovered_sum = recoveries[i].sum()\n    \n    # confirmed, deaths, recovered, and active\n    world_cases.append(confirmed_sum)\n    total_deaths.append(death_sum)\n    total_recovered.append(recovered_sum)\n    total_active.append(confirmed_sum-death_sum-recovered_sum)\n    \n    # calculate rates\n    mortality_rate.append(death_sum\/confirmed_sum)\n    recovery_rate.append(recovered_sum\/confirmed_sum)\n\n    # case studies \n    china_cases.append(confirmed_df[confirmed_df['Country\/Region']=='China'][i].sum())\n    italy_cases.append(confirmed_df[confirmed_df['Country\/Region']=='Italy'][i].sum())\n    us_cases.append(confirmed_df[confirmed_df['Country\/Region']=='US'][i].sum())\n    spain_cases.append(confirmed_df[confirmed_df['Country\/Region']=='Spain'][i].sum())\n    france_cases.append(confirmed_df[confirmed_df['Country\/Region']=='France'][i].sum())","9c18ed44":"def daily_increase(data):\n    d = [] \n    for i in range(len(data)):\n        if i == 0:\n            d.append(data[0])\n        else:\n            d.append(data[i]-data[i-1])\n    return d \n\nworld_daily_increase = daily_increase(world_cases)\nchina_daily_increase = daily_increase(china_cases)\nitaly_daily_increase = daily_increase(italy_cases)\nus_daily_increase = daily_increase(us_cases)\nspain_daily_increase = daily_increase(spain_cases)\nfrance_daily_increase = daily_increase(france_cases)","be2ed0d9":"days_since_1_22 = np.array([i for i in range(len(dates))]).reshape(-1, 1)\nworld_cases = np.array(world_cases).reshape(-1, 1)\ntotal_deaths = np.array(total_deaths).reshape(-1, 1)\ntotal_recovered = np.array(total_recovered).reshape(-1, 1)","2341ed0e":"days_in_future = 10\nfuture_forcast = np.array([i for i in range(len(dates)+days_in_future)]).reshape(-1, 1)\nadjusted_dates = future_forcast[:-10]","73dfdd5d":"start = '1\/22\/2020'\nstart_date = datetime.datetime.strptime(start, '%m\/%d\/%Y')\nfuture_forcast_dates = []\nfor i in range(len(future_forcast)):\n    future_forcast_dates.append((start_date + datetime.timedelta(days=i)).strftime('%m\/%d\/%Y'))","bfa4e473":"X_train_confirmed, X_test_confirmed, y_train_confirmed, y_test_confirmed = train_test_split(days_since_1_22, world_cases, test_size=0.05, shuffle=False) ","615b01b5":"# use this to find the optimal parameters for SVR\n# c = [0.01, 0.1, 1]\n# gamma = [0.01, 0.1, 1]\n# epsilon = [0.01, 0.1, 1]\n# shrinking = [True, False]\n# degree = [3, 4, 5, 6, 7]\n\n# svm_grid = {'C': c, 'gamma' : gamma, 'epsilon': epsilon, 'shrinking' : shrinking, 'degree': degree}\n\n# svm = SVR(kernel='poly')\n# svm_search = RandomizedSearchCV(svm, svm_grid, scoring='neg_mean_squared_error', cv=3, return_train_score=True, n_jobs=-1, n_iter=30, verbose=1)\n# svm_search.fit(X_train_confirmed, y_train_confirmed)","9b32cfc1":"# svm_search.best_params_","8c0fb03d":"# svm_confirmed = svm_search.best_estimator_\nsvm_confirmed = SVR(shrinking=True, kernel='poly',gamma=0.01, epsilon=1,degree=8, C=0.1)\nsvm_confirmed.fit(X_train_confirmed, y_train_confirmed)\nsvm_pred = svm_confirmed.predict(future_forcast)","dae192f6":"# check against testing data\nsvm_test_pred = svm_confirmed.predict(X_test_confirmed)\nplt.plot(y_test_confirmed)\nplt.plot(svm_test_pred)\nplt.legend(['Test Data', 'SVM Predictions'])\nprint('MAE:', mean_absolute_error(svm_test_pred, y_test_confirmed))\nprint('MSE:',mean_squared_error(svm_test_pred, y_test_confirmed))","9cc1cc83":"# transform our data for polynomial regression\npoly = PolynomialFeatures(degree=6)\npoly_X_train_confirmed = poly.fit_transform(X_train_confirmed)\npoly_X_test_confirmed = poly.fit_transform(X_test_confirmed)\npoly_future_forcast = poly.fit_transform(future_forcast)","da00e17d":"# polynomial regression\nlinear_model = LinearRegression(normalize=True, fit_intercept=False)\nlinear_model.fit(poly_X_train_confirmed, y_train_confirmed)\ntest_linear_pred = linear_model.predict(poly_X_test_confirmed)\nlinear_pred = linear_model.predict(poly_future_forcast)\nprint('MAE:', mean_absolute_error(test_linear_pred, y_test_confirmed))\nprint('MSE:',mean_squared_error(test_linear_pred, y_test_confirmed))","e3d45d40":"print(linear_model.coef_)","4e05c942":"plt.plot(y_test_confirmed)\nplt.plot(test_linear_pred)\nplt.legend(['Test Data', 'Polynomial Regression Predictions'])","15f25c0e":"# bayesian ridge polynomial regression\ntol = [1e-4, 1e-3, 1e-2]\nalpha_1 = [1e-7, 1e-6, 1e-5, 1e-4]\nalpha_2 = [1e-7, 1e-6, 1e-5, 1e-4]\nlambda_1 = [1e-7, 1e-6, 1e-5, 1e-4]\nlambda_2 = [1e-7, 1e-6, 1e-5, 1e-4]\n\nbayesian_grid = {'tol': tol, 'alpha_1': alpha_1, 'alpha_2' : alpha_2, 'lambda_1': lambda_1, 'lambda_2' : lambda_2}\n\nbayesian = BayesianRidge(fit_intercept=False, normalize=True)\nbayesian_search = RandomizedSearchCV(bayesian, bayesian_grid, scoring='neg_mean_squared_error', cv=3, return_train_score=True, n_jobs=-1, n_iter=40, verbose=1)\nbayesian_search.fit(poly_X_train_confirmed, y_train_confirmed)","bd551709":"bayesian_search.best_params_","54c5f43e":"bayesian_confirmed = bayesian_search.best_estimator_\ntest_bayesian_pred = bayesian_confirmed.predict(poly_X_test_confirmed)\nbayesian_pred = bayesian_confirmed.predict(poly_future_forcast)\nprint('MAE:', mean_absolute_error(test_bayesian_pred, y_test_confirmed))\nprint('MSE:',mean_squared_error(test_bayesian_pred, y_test_confirmed))","2dc5003f":"plt.plot(y_test_confirmed)\nplt.plot(test_bayesian_pred)\nplt.legend(['Test Data', 'Bayesian Ridge Polynomial Predictions'])","1801cf63":"adjusted_dates = adjusted_dates.reshape(1, -1)[0]\nplt.figure(figsize=(16, 9))\nplt.plot(adjusted_dates, world_cases)\nplt.title('# of Coronavirus Cases Over Time', size=30)\nplt.xlabel('Days Since 1\/22\/2020', size=30)\nplt.ylabel('# of Cases', size=30)\nplt.xticks(size=20)\nplt.yticks(size=20)\nplt.show()","8bc03619":"plt.figure(figsize=(16, 9))\nplt.plot(adjusted_dates, np.log10(world_cases))\nplt.title('Log of # of Coronavirus Cases Over Time', size=30)\nplt.xlabel('Days Since 1\/22\/2020', size=30)\nplt.ylabel('# of Cases', size=30)\nplt.xticks(size=20)\nplt.yticks(size=20)\nplt.show()","7006f65f":"plt.figure(figsize=(16, 9))\nplt.bar(adjusted_dates, world_daily_increase)\nplt.title('World Daily Increases in Confirmed Cases', size=30)\nplt.xlabel('Days Since 1\/22\/2020', size=30)\nplt.ylabel('# of Cases', size=30)\nplt.xticks(size=20)\nplt.yticks(size=20)\nplt.show()","6bcbbea9":"plt.figure(figsize=(16, 9))\nplt.bar(adjusted_dates, china_daily_increase)\nplt.title('China Daily Increases in Confirmed Cases', size=30)\nplt.xlabel('Days Since 1\/22\/2020', size=30)\nplt.ylabel('# of Cases', size=30)\nplt.xticks(size=20)\nplt.yticks(size=20)\nplt.show()","ba27a1a2":"plt.figure(figsize=(16, 9))\nplt.bar(adjusted_dates, italy_daily_increase)\nplt.title('Italy Daily Increases in Confirmed Cases', size=30)\nplt.xlabel('Days Since 1\/22\/2020', size=30)\nplt.ylabel('# of Cases', size=30)\nplt.xticks(size=20)\nplt.yticks(size=20)\nplt.show()","cc5c3036":"plt.figure(figsize=(16, 9))\nplt.bar(adjusted_dates, us_daily_increase)\nplt.title('US Daily Increases in Confirmed Cases', size=30)\nplt.xlabel('Days Since 1\/22\/2020', size=30)\nplt.ylabel('# of Cases', size=30)\nplt.xticks(size=20)\nplt.yticks(size=20)\nplt.show()","5a25b14c":"plt.figure(figsize=(16, 9))\nplt.bar(adjusted_dates, spain_daily_increase)\nplt.title('Spain Daily Increases in Confirmed Cases', size=30)\nplt.xlabel('Days Since 1\/22\/2020', size=30)\nplt.ylabel('# of Cases', size=30)\nplt.xticks(size=20)\nplt.yticks(size=20)\nplt.show()","60a3181a":"plt.figure(figsize=(16, 9))\nplt.bar(adjusted_dates, france_daily_increase)\nplt.title('France Daily Increases in Confirmed Cases', size=30)\nplt.xlabel('Days Since 1\/22\/2020', size=30)\nplt.ylabel('# of Cases', size=30)\nplt.xticks(size=20)\nplt.yticks(size=20)\nplt.show()","6727ec4f":"plt.figure(figsize=(16, 9))\nplt.plot(adjusted_dates, china_cases)\nplt.plot(adjusted_dates, italy_cases)\nplt.plot(adjusted_dates, us_cases)\nplt.plot(adjusted_dates, spain_cases)\nplt.plot(adjusted_dates, france_cases)\nplt.title('# of Coronavirus Cases', size=30)\nplt.xlabel('Days Since 1\/22\/2020', size=30)\nplt.ylabel('# of Cases', size=30)\nplt.legend(['China', 'Italy', 'US', 'Spain', 'France'], prop={'size': 20})\nplt.xticks(size=20)\nplt.yticks(size=20)\nplt.show()","8cd51e1b":"plt.figure(figsize=(16, 9))\nplt.plot(adjusted_dates, world_cases)\nplt.plot(future_forcast, svm_pred, linestyle='dashed', color='purple')\nplt.title('# of Coronavirus Cases Over Time', size=30)\nplt.xlabel('Days Since 1\/22\/2020', size=30)\nplt.ylabel('# of Cases', size=30)\nplt.legend(['Confirmed Cases', 'SVM predictions'], prop={'size': 20})\nplt.xticks(size=20)\nplt.yticks(size=20)\nplt.show()","7e1234f9":"plt.figure(figsize=(16, 9))\nplt.plot(adjusted_dates, world_cases)\nplt.plot(future_forcast, linear_pred, linestyle='dashed', color='orange')\nplt.title('# of Coronavirus Cases Over Time', size=30)\nplt.xlabel('Days Since 1\/22\/2020', size=30)\nplt.ylabel('# of Cases', size=30)\nplt.legend(['Confirmed Cases', 'Polynomial Regression Predictions'], prop={'size': 20})\nplt.xticks(size=20)\nplt.yticks(size=20)\nplt.show()","fad4163a":"plt.figure(figsize=(16, 9))\nplt.plot(adjusted_dates, world_cases)\nplt.plot(future_forcast, bayesian_pred, linestyle='dashed', color='green')\nplt.title('# of Coronavirus Cases Over Time', size=30)\nplt.xlabel('Time', size=30)\nplt.ylabel('# of Cases', size=30)\nplt.legend(['Confirmed Cases', 'Polynomial Bayesian Ridge Regression Predictions'], prop={'size': 20})\nplt.xticks(size=20)\nplt.yticks(size=20)\nplt.show()","2b8d0218":"# Future predictions using SVM \nprint('SVM future predictions:')\nset(zip(future_forcast_dates[-10:], np.round(svm_pred[-10:])))","10d63878":"# Future predictions using Polynomial Regression \nlinear_pred = linear_pred.reshape(1,-1)[0]\nprint('Polynomial regression future predictions:')\nset(zip(future_forcast_dates[-10:], np.round(linear_pred[-10:])))","452dde9f":"# Future predictions using Linear Regression \nprint('Ridge regression future predictions:')\nset(zip(future_forcast_dates[-10:], np.round(bayesian_pred[-10:])))","f1cd866b":"plt.figure(figsize=(16, 9))\nplt.plot(adjusted_dates, total_active, color='purple')\nplt.title('# of Coronavirus Active Cases Over Time', size=30)\nplt.xlabel('Days Since 1\/22\/2020', size=30)\nplt.ylabel('# of Active Cases', size=30)\nplt.xticks(size=20)\nplt.yticks(size=20)\nplt.show()","d3c19323":"plt.figure(figsize=(16, 9))\nplt.plot(adjusted_dates, total_deaths, color='red')\nplt.title('# of Coronavirus Deaths Over Time', size=30)\nplt.xlabel('Days Since 1\/22\/2020', size=30)\nplt.ylabel('# of Deaths', size=30)\nplt.xticks(size=20)\nplt.yticks(size=20)\nplt.show()","bcf832d0":"mean_mortality_rate = np.mean(mortality_rate)\nplt.figure(figsize=(16, 9))\nplt.plot(adjusted_dates, mortality_rate, color='orange')\nplt.axhline(y = mean_mortality_rate,linestyle='--', color='black')\nplt.title('Mortality Rate of Coronavirus Over Time', size=30)\nplt.legend(['mortality rate', 'y='+str(mean_mortality_rate)], prop={'size': 20})\nplt.xlabel('Days Since 1\/22\/2020', size=30)\nplt.ylabel('Mortality Rate', size=30)\nplt.xticks(size=20)\nplt.yticks(size=20)\nplt.show()","17f4c1b7":"plt.figure(figsize=(16, 9))\nplt.plot(adjusted_dates, total_recovered, color='green')\nplt.title('# of Coronavirus Cases Recovered Over Time', size=30)\nplt.xlabel('Days Since 1\/22\/2020', size=30)\nplt.ylabel('# of Cases', size=30)\nplt.xticks(size=20)\nplt.yticks(size=20)\nplt.show()","6cbd4740":"mean_recovery_rate = np.mean(recovery_rate)\nplt.figure(figsize=(16, 9))\nplt.plot(adjusted_dates, recovery_rate, color='blue')\nplt.axhline(y = mean_recovery_rate,linestyle='--', color='black')\nplt.title('Recovery Rate of Coronavirus Over Time', size=30)\nplt.legend(['recovery rate', 'y='+str(mean_recovery_rate)], prop={'size': 20})\nplt.xlabel('Days Since 1\/22\/2020', size=30)\nplt.ylabel('Recovery Rate', size=30)\nplt.xticks(size=20)\nplt.yticks(size=20)\nplt.show()","aed398ad":"plt.figure(figsize=(16, 9))\nplt.plot(adjusted_dates, total_deaths, color='r')\nplt.plot(adjusted_dates, total_recovered, color='green')\nplt.legend(['death', 'recoveries'], loc='best', fontsize=20)\nplt.title('# of Coronavirus Cases', size=30)\nplt.xlabel('Days Since 1\/22\/2020', size=30)\nplt.ylabel('# of Cases', size=30)\nplt.xticks(size=20)\nplt.yticks(size=20)\nplt.show()","9e64c4aa":"plt.figure(figsize=(16, 9))\nplt.plot(total_recovered, total_deaths)\nplt.title('# of Coronavirus Deaths vs. # of Coronavirus Recoveries', size=30)\nplt.xlabel('# of Coronavirus Recoveries', size=30)\nplt.ylabel('# of Coronavirus Deaths', size=30)\nplt.xticks(size=20)\nplt.yticks(size=20)\nplt.show()","e0d392b6":"unique_countries =  list(latest_data['Country_Region'].unique())","c49ff72d":"country_confirmed_cases = []\ncountry_death_cases = [] \ncountry_recovery_cases = []\ncountry_mortality_rate = [] \n\nno_cases = []\nfor i in unique_countries:\n    cases = latest_data[latest_data['Country_Region']==i]['Confirmed'].sum()\n    if cases > 0:\n        country_confirmed_cases.append(cases)\n    else:\n        no_cases.append(i)\n        \nfor i in no_cases:\n    unique_countries.remove(i)\n    \n# sort countries by the number of confirmed cases\nunique_countries = [k for k, v in sorted(zip(unique_countries, country_confirmed_cases), key=operator.itemgetter(1), reverse=True)]\nfor i in range(len(unique_countries)):\n    country_confirmed_cases[i] = latest_data[latest_data['Country_Region']==unique_countries[i]]['Confirmed'].sum()\n    country_death_cases.append(latest_data[latest_data['Country_Region']==unique_countries[i]]['Deaths'].sum())\n    country_recovery_cases.append(latest_data[latest_data['Country_Region']==unique_countries[i]]['Recovered'].sum())\n    country_mortality_rate.append(country_death_cases[i]\/country_confirmed_cases[i])","25fe2bf1":"country_df = pd.DataFrame({'Country Name': unique_countries, 'Number of Confirmed Cases': country_confirmed_cases,\n                          'Number of Deaths': country_death_cases, 'Number of Recoveries' : country_recovery_cases,\n                          'Mortality Rate': country_mortality_rate})\n# number of cases per country\/region\n\ncountry_df.style.background_gradient(cmap='Greens')","079ef448":"unique_provinces =  list(latest_data['Province_State'].unique())","bd950f9d":"province_confirmed_cases = []\nprovince_country = [] \nprovince_death_cases = [] \nprovince_recovery_cases = []\nprovince_mortality_rate = [] \n\nno_cases = [] \nfor i in unique_provinces:\n    cases = latest_data[latest_data['Province_State']==i]['Confirmed'].sum()\n    if cases > 0:\n        province_confirmed_cases.append(cases)\n    else:\n        no_cases.append(i)\n \n# remove areas with no confirmed cases\nfor i in no_cases:\n    unique_provinces.remove(i)\n    \nunique_provinces = [k for k, v in sorted(zip(unique_provinces, province_confirmed_cases), key=operator.itemgetter(1), reverse=True)]\nfor i in range(len(unique_provinces)):\n    province_confirmed_cases[i] = latest_data[latest_data['Province_State']==unique_provinces[i]]['Confirmed'].sum()\n    province_country.append(latest_data[latest_data['Province_State']==unique_provinces[i]]['Country_Region'].unique()[0])\n    province_death_cases.append(latest_data[latest_data['Province_State']==unique_provinces[i]]['Deaths'].sum())\n    province_recovery_cases.append(latest_data[latest_data['Province_State']==unique_provinces[i]]['Recovered'].sum())\n    province_mortality_rate.append(province_death_cases[i]\/province_confirmed_cases[i])","247e1c66":"# number of cases per province\/state\/city\nprovince_df = pd.DataFrame({'Province\/State Name': unique_provinces, 'Country': province_country, 'Number of Confirmed Cases': province_confirmed_cases,\n                          'Number of Deaths': province_death_cases, 'Number of Recoveries' : province_recovery_cases,\n                          'Mortality Rate': province_mortality_rate})\n# number of cases per country\/region\n\nprovince_df.style.background_gradient(cmap='Greens')","f59d2169":"nan_indices = [] \n\n# handle nan if there is any, it is usually a float: float('nan')\n\nfor i in range(len(unique_provinces)):\n    if type(unique_provinces[i]) == float:\n        nan_indices.append(i)\n\nunique_provinces = list(unique_provinces)\nprovince_confirmed_cases = list(province_confirmed_cases)\n\nfor i in nan_indices:\n    unique_provinces.pop(i)\n    province_confirmed_cases.pop(i)","a1af7f6c":"china_confirmed = latest_data[latest_data['Country_Region']=='China']['Confirmed'].sum()\noutside_mainland_china_confirmed = np.sum(country_confirmed_cases) - china_confirmed\nplt.figure(figsize=(16, 9))\nplt.barh('Mainland China', china_confirmed)\nplt.barh('Outside Mainland China', outside_mainland_china_confirmed)\nplt.title('# of Coronavirus Confirmed Cases', size=20)\nplt.xticks(size=20)\nplt.yticks(size=20)\nplt.show()","7ac1d7a3":"print('Outside Mainland China {} cases:'.format(outside_mainland_china_confirmed))\nprint('Mainland China: {} cases'.format(china_confirmed))\nprint('Total: {} cases'.format(china_confirmed+outside_mainland_china_confirmed))","75510ee1":"# Only show 10 countries with the most confirmed cases, the rest are grouped into the other category\nvisual_unique_countries = [] \nvisual_confirmed_cases = []\nothers = np.sum(country_confirmed_cases[10:])\n\nfor i in range(len(country_confirmed_cases[:10])):\n    visual_unique_countries.append(unique_countries[i])\n    visual_confirmed_cases.append(country_confirmed_cases[i])\n    \nvisual_unique_countries.append('Others')\nvisual_confirmed_cases.append(others)","21e6b90c":"plt.figure(figsize=(16, 9))\nplt.barh(visual_unique_countries, visual_confirmed_cases)\nplt.title('# of Covid-19 Confirmed Cases in Countries\/Regions', size=20)\nplt.xticks(size=20)\nplt.yticks(size=20)\nplt.show()","7cf7b24a":"# lets look at it in a logarithmic scale \nlog_country_confirmed_cases = [math.log10(i) for i in visual_confirmed_cases]\nplt.figure(figsize=(16, 9))\nplt.barh(visual_unique_countries, log_country_confirmed_cases)\nplt.title('Log of Common Log # of Coronavirus Confirmed Cases in Countries\/Regions', size=20)\nplt.xticks(size=20)\nplt.yticks(size=20)\nplt.show()","0b79bafc":"# Only show 10 provinces with the most confirmed cases, the rest are grouped into the other category\nvisual_unique_provinces = [] \nvisual_confirmed_cases2 = []\nothers = np.sum(province_confirmed_cases[10:])\nfor i in range(len(province_confirmed_cases[:10])):\n    visual_unique_provinces.append(unique_provinces[i])\n    visual_confirmed_cases2.append(province_confirmed_cases[i])\n\nvisual_unique_provinces.append('Others')\nvisual_confirmed_cases2.append(others)","c83a5102":"plt.figure(figsize=(16, 9))\nplt.barh(visual_unique_provinces, visual_confirmed_cases2)\nplt.title('# of Coronavirus Confirmed Cases in Provinces\/States', size=20)\nplt.xticks(size=20)\nplt.yticks(size=20)\nplt.show()","3de65993":"log_province_confirmed_cases = [math.log10(i) for i in visual_confirmed_cases2]\nplt.figure(figsize=(16, 9))\nplt.barh(visual_unique_provinces, log_province_confirmed_cases)\nplt.title('Log of # of Coronavirus Confirmed Cases in Provinces\/States', size=20)\nplt.xticks(size=20)\nplt.yticks(size=20)\nplt.show()","22d5a9df":"c = random.choices(list(mcolors.CSS4_COLORS.values()),k = len(unique_countries))\nplt.figure(figsize=(20,15))\nplt.title('Covid-19 Confirmed Cases per Country', size=20)\nplt.pie(visual_confirmed_cases, colors=c)\nplt.legend(visual_unique_countries, loc='best', fontsize=15)\nplt.show()","78ae6dfd":"c = random.sample(list(mcolors.CSS4_COLORS.values()),k = len(visual_confirmed_cases2))\nplt.figure(figsize=(20,15))\nplt.title('Covid-19 Confirmed Cases per State\/Province\/Region', size=20)\nplt.pie(visual_confirmed_cases2, colors=c)\nplt.legend(visual_unique_provinces, loc='best', fontsize=15)\nplt.show()","86ff9570":"# looking at US States\nus_regions = list(latest_data[latest_data['Country_Region']=='US']['Province_State'].unique())\nus_confirmed_cases = []\nno_cases = [] \nfor i in us_regions:\n    cases = latest_data[latest_data['Province_State']==i]['Confirmed'].sum()\n    if cases > 0:\n        us_confirmed_cases.append(cases)\n    else:\n        no_cases.append(i)\n \n# remove areas with no confirmed cases\nfor i in no_cases:\n    us_regions.remove(i)\n    \n# only show the top 10 states\nus_regions = [k for k, v in sorted(zip(us_regions, us_confirmed_cases), key=operator.itemgetter(1), reverse=True)]\n\nfor i in range(len(us_regions)):\n    us_confirmed_cases[i] = latest_data[latest_data['Province_State']==us_regions[i]]['Confirmed'].sum()  \n\nus_regions_10 = us_regions[:10]\nus_regions_10.append('Others')\nus_confirmed_cases_10 = us_confirmed_cases[:10]\nus_confirmed_cases_10.append(np.sum(us_confirmed_cases[10:]))","449311a4":"c = random.sample(list(mcolors.CSS4_COLORS.values()),k = len(us_confirmed_cases))\nplt.figure(figsize=(20,15))\nplt.title('Covid-19 Confirmed Cases in the United States',  size=20)\nplt.pie(us_confirmed_cases_10, colors=c)\nplt.legend(us_regions_10, loc='best', fontsize=15)\nplt.show()","c9bf2671":"# looking at Chinese provinces\nchina_regions = list(latest_data[latest_data['Country_Region']=='China']['Province_State'].unique())\nchina_confirmed_cases = []\nno_cases = [] \nfor i in china_regions:\n    cases = latest_data[latest_data['Province_State']==i]['Confirmed'].sum()\n    if cases > 0:\n        china_confirmed_cases.append(cases)\n    else:\n        no_cases.append(i)\n \n# remove areas with no confirmed cases\nfor i in no_cases:\n    china_confirmed_cases.remove(i)\n    \nchina_regions = [k for k, v in sorted(zip(china_regions, china_confirmed_cases), key=operator.itemgetter(1), reverse=True)]\n\nfor i in range(len(china_regions)):\n    china_confirmed_cases[i] = latest_data[latest_data['Province_State']==china_regions[i]]['Confirmed'].sum()  \n\nchina_regions_10 = china_regions[:10]\nchina_regions_10.append('Others')\nchina_confirmed_cases_10 = china_confirmed_cases[:10]\nchina_confirmed_cases_10.append(np.sum(china_confirmed_cases[10:]))","38919d77":"c = random.sample(list(mcolors.CSS4_COLORS.values()),k = len(china_confirmed_cases))\nplt.figure(figsize=(20,15))\nplt.title('Covid-19 Confirmed Cases in the Mainland China', size=20)\nplt.pie(china_confirmed_cases_10, colors=c)\nplt.legend(china_regions_10, loc='best', fontsize=15)\nplt.show()","ddd9a88c":"Getting daily increases","07bd1433":"Convert integer into datetime for better visualization","99b1393d":"<font face = \"Verdana\" size =\"5\">This notebook tracks the spread of the novel coronavirus, also known as SARS-CoV-2. It is a contagious respiratory virus that first started in Wuhan in December 2019. On 2\/11\/2020, the disease is officially named COVID-19 by the World Health Organization. \n    <br><br>Data: <a href='https:\/\/github.com\/CSSEGISandData\/COVID-19'>https:\/\/github.com\/CSSEGISandData\/COVID-19<\/a>\n    <br>Learn more from the <a href='https:\/\/www.who.int\/emergencies\/diseases\/novel-coronavirus-2019'>WHO<\/a>\n    <br>Learn more from the <a href='https:\/\/www.cdc.gov\/coronavirus\/2019-ncov'>CDC<\/a>\n    <br>Map Visualizations from  <a href='https:\/\/gisanddata.maps.arcgis.com\/apps\/opsdashboard\/index.html#\/bda7594740fd40299423467b48e9ecf6'>Johns Hopkins<\/a>\n    <br>Source code is on <a href='https:\/\/github.com\/therealcyberlord'> Github<\/a>\n   <\/font>\n   <br>\n   <font face = \"Verdana\" size =\"4\">\n   <br>Feel free to provide me with feedbacks. \n    <br> Last update: 4\/2\/2020 8:35 PM\n    <br> Make sure you run the notebook to see the graphs better. Some diagrams are hard to see in the default view. \n <\/font>\n <font face = \"Verdana\" size =\"1\">\n<center><img src='https:\/\/newsfortomorrow.com\/wp-content\/uploads\/2020\/01\/1578562454_Wuhan-pneumonia-New-coronavirus-related-to-SARS-idenitified.jpg'>\n Source: https:\/\/newsfortomorrow.com\/wp-content\/uploads\/2020\/01\/1578562454_Wuhan-pneumonia-New-coronavirus-related-to-SARS-idenitified.jpg <\/center> \n    \n <font face = \"Verdana\" size =\"4\"> Keep strong, world! Stay safe. <\/font>\n\n\n\n\n\n","1f4ebf1e":"***Visual Representations*** (bar charts and pie charts)","d6afee3d":"Getting the latest information about provinces\/states that have confirmed coronavirus cases","b612cac6":"Future forcasting","fff27c4c":"Graphing deaths against recoveries","4628d84f":"Plotting the number of deaths against the number of recoveries","4150b49e":"Model for predicting # of confirmed cases. I am using support vector machine, bayesian ridge , and linear regression in this example. ","d0174ee9":"Getting information about countries\/regions that have confirmed coronavirus cases","e2c5d04a":"Import the data (make sure you update this on a daily basis)","4ff997b0":" Graphing the number of confirmed cases, active cases, deaths, recoveries, mortality rate, and recovery rate","ac922e7a":"Get all the dates for the outbreak"}}