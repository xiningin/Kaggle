{"cell_type":{"7d005b50":"code","811fc5f0":"code","6ee2b033":"code","f7241f09":"code","05d4b94a":"code","057227a6":"code","deb779d7":"code","b88ad632":"code","fbbe8a54":"code","01fed155":"code","4b0c98bc":"code","bf777341":"code","4eafc56c":"markdown","f2342e16":"markdown","98fa6e7f":"markdown"},"source":{"7d005b50":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport cv2\nimport os\nimport matplotlib.pyplot as plt\nimport matplotlib.patches as patches\nimport seaborn as sns\nimport scipy.spatial.distance\nfrom sklearn.svm import SVC\nfrom sklearn.model_selection import GridSearchCV","811fc5f0":"def get_hog(image):\n    image = cv2.bilateralFilter(np.float32(image),5,75,75)\/ 255.0\n    gx = cv2.Sobel(image, cv2.CV_32F, 1, 0, ksize=1)\n    gy = cv2.Sobel(image, cv2.CV_32F, 0, 1, ksize=1)\n    mag, angle = cv2.cartToPolar(gx, gy, angleInDegrees=True)\n    histo, edges = np.histogram(angle, 36, weights=mag, range=(0,359))\n    return histo, edges","6ee2b033":"hog_metric = scipy.spatial.distance.euclidean\ndef circular_hog_compair(hog1, hog2, ref_build=False):\n    hog1, hog2 = list(hog1), list(hog2)\n    distances = [hog_metric(hog1, hog2)]\n    for i in range(1,len(hog1)):\n        distances.append(hog_metric(hog1, hog2[-i:]+hog2[i:]))\n    d = min(distances)\n    \n    if ref_build:\n        k = distances.index(d)\n        if k != 0:\n            best_oriented = hog2[-k:]+hog2[k:]\n        else:\n            best_oriented = hog2\n        return d, best_oriented \n    else:\n        return d","f7241f09":"hogs = []\ndistances = []\nfirst = True\nfor dirname, _, filenames in os.walk('\/kaggle\/input\/'):\n    for filename in filenames:\n        if filename[0] == '1' and first:\n            path = os.path.join(dirname, filename)\n            img = cv2.imread(path,0)\n            h, ref_bins = get_hog(img)\n            hogs = [h]\n            first = False\n        elif filename[0] == '1':\n            path = os.path.join(dirname, filename)\n            img = cv2.imread(path,0)\n            h, _ = get_hog(img)\n            d, h = circular_hog_compair(hogs[0], h, ref_build=True) \n            hogs.append(h)\n            distances.append(d)\nref = np.mean(np.array(hogs), axis = 0)","05d4b94a":"X, y = [], []\nfor dirname, _, filenames in os.walk('\/kaggle\/input\/ships-in-satellite-imagery\/shipsnet\/'):\n    for filename in filenames:\n        path = os.path.join(dirname, filename)\n        img = cv2.imread(path,0)\n        h, ref_bins = get_hog(img)\n        X.append(h)\n        y.append(int(filename[0]))\nX = np.array(X)\ny = np.array(y)\nprint(X.shape)","057227a6":"grid = {'kernel':['poly'], 'degree':[3],'C':[100]}\nsvc = SVC()\nmodel = GridSearchCV(svc, grid)\nmodel.fit(X, y)\nprint(model.best_params_,model.best_score_)","deb779d7":"def image_scanner_simple(image, ref_hog, treshold, stride=1):\n    possible_pos = []\n    h,w = image.shape\n    for i in range(0,h-80-stride,stride):\n        for j in range(0,w-80-stride, stride):\n            h, _ = get_hog(image[i:i+80,j:j+80])\n            d = circular_hog_compair(ref_hog, h)\n            if d < treshold:\n                possible_pos.append((i,j))\n    return possible_pos\n\ndef image_scanner_SVM(image, model, stride=1):\n    possible_pos = []\n    h,w = image.shape\n    for i in range(0,h-80-stride,stride):\n        for j in range(0,w-80-stride, stride):\n            h, _ = get_hog(image[i:i+80,j:j+80])\n            d = model.predict(np.array(h).reshape((1,-1)))\n            if d[0] == 1:\n                possible_pos.append((i,j))\n    return possible_pos","b88ad632":"print(np.mean(distances), np.std(distances))","fbbe8a54":"first_test = cv2.imread('..\/input\/ships-in-satellite-imagery\/scenes\/scenes\/lb_1.png',0)\nxy = image_scanner_SVM(first_test, model.best_estimator_, stride=20)\nlen(xy)","01fed155":"h, _ = get_hog(first_test[120:200,180:260])\nmodel.best_estimator_.predict(np.array(h).reshape((1,-1)))[0]","4b0c98bc":"fig, ax = plt.subplots(figsize=(15,15))\nax.imshow(first_test, cmap='gray')\nH, W = first_test.shape\nfor pos in xy:\n    rect = patches.Rectangle((pos[1], pos[0]), 80, 80, linewidth=1, edgecolor='r', facecolor='none')\n    ax.add_patch(rect)\nplt.show()","bf777341":"print(xy)","4eafc56c":"# Test results","f2342e16":"# For HoG detection alone","98fa6e7f":"# For HoG + SVM"}}