{"cell_type":{"da239c4c":"code","1a13b463":"code","2e6119de":"code","dfec8770":"code","3f6362b2":"code","8a8b5f79":"code","3d9dd44f":"code","ed5db06d":"code","4fcbfa83":"code","a39f9a04":"code","75f499e0":"code","5d14c0df":"code","e1529ee1":"code","03b6595e":"code","1de70dd2":"code","2fdc4840":"code","0080b5ad":"code","55c6eb93":"code","d819215b":"code","2ea29cb9":"code","45c308ff":"code","f066d955":"code","8a0ac199":"code","4c648aae":"code","7f476553":"code","bc0b8100":"code","8ef3e284":"code","505b4593":"code","77a46b2f":"markdown","678edced":"markdown","cb3c0d29":"markdown","29aafe7c":"markdown","41b4776a":"markdown","3bf978b8":"markdown","9395c3e8":"markdown","9a0886da":"markdown","c2f4efae":"markdown","1699bc4f":"markdown","52eb3825":"markdown","19cab56b":"markdown","4096a766":"markdown","1f062714":"markdown","11b613e3":"markdown","7444ee02":"markdown","ceedddb2":"markdown","ab13dd18":"markdown","9f028c92":"markdown","59917c6f":"markdown","1a5608e4":"markdown","48cf0f18":"markdown","2d7d5d36":"markdown","e8e3dfd7":"markdown","d3522849":"markdown"},"source":{"da239c4c":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt #simple visualizations\n%matplotlib inline\nimport plotly.offline as py #interactive visualizations\nfrom plotly.offline import init_notebook_mode, iplot #plotting plotly graphs in notebook\nimport plotly.graph_objs as go #advanced graph objects\n\nimport warnings\nwarnings.filterwarnings('ignore') #ignore warnings\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))","1a13b463":"#Reading train and test datasets\n\ntrain = pd.read_csv('..\/input\/titanic\/train.csv')\ntest = pd.read_csv('..\/input\/titanic\/test.csv')\n\n#Storing the original copies for future use\ntrain_orig = train.copy()\ntest_orig = test.copy()","2e6119de":"#Checking the shape of training and testing datasets\n\nprint('Training Data :', train.shape)\nprint('Testing Data :', test.shape)","dfec8770":"#Checking the info of the datasets\n\nprint(train.info())\nprint('-' * 30)\nprint(test.info())","3f6362b2":"#Importing missingno library to plot a bar graph of #missing values in each feature\n\nimport missingno as msno\nmsno.bar(train)\nplt.show()","8a8b5f79":"msno.bar(test)\nplt.show()","3d9dd44f":"#Descriptive statistics of the training dataset\n\ntrain.describe()","ed5db06d":"train.head()","4fcbfa83":"init_notebook_mode(connected = True)","a39f9a04":"#Check the number of passengers survived and not survived\n\nsurvived = train['Survived'].value_counts()\n\nlabels = survived.index\nvalues = survived.values","75f499e0":"#Plotting a Pie Graph with the number of passengers survived and not survived\n\ndata = go.Pie(labels = labels,\n      values = values,\n      hole = 0.4,\n      name = 'Survival Status',\n      marker = dict(colors = ['seagreen', 'blue'],line = dict(width = 1.5, color = 'black')))\n\nlayout = go.Layout(title = 'Survival Status', legend = dict(orientation = 'h'))\n\nfig = go.Figure(data = [data], layout = layout)\niplot(fig)","5d14c0df":"#Splitting the train dataset based on the survival status of the passengers\n\nsurv = train.loc[train['Survived'] == 1, :]\nn_surv = train.loc[train['Survived'] == 0, :]","e1529ee1":"#Creating two traces with each one for survival status (0 and 1) and plotting boxplots together\n\ntrace1 = go.Box(y = surv['Age'],\n             name = 'Survived',\n             marker = dict(color = '#63ace0'))\n\ntrace2 = go.Box(y = n_surv['Age'],\n             name = 'Not Survived',\n             marker = dict(color = '#169c4e'))\n\nlayout = go.Layout(title = 'Survival by Age Group',\n                  xaxis = dict(title = 'Survival Status'),\n                  yaxis = dict(title = 'Age'))\n\nfig = go.Figure(data = [trace1, trace2], layout = layout)\niplot(fig)","03b6595e":"# Creating two traces of survival status and plotting boxplots with fare as a feature of interest\n\ntrace1 = go.Box(y = surv['Fare'],\n             name = 'Survived',\n             marker = dict(color = '#63ace0'))\n\ntrace2 = go.Box(y = n_surv['Fare'],\n             name = 'Not Survived',\n             marker = dict(color = '#169c4e'))\n\nlayout = go.Layout(title = 'Survival by Fare Group',\n                  xaxis = dict(title = 'Survival Status'),\n                  yaxis = dict(title = 'Fare'))\n\nfig = go.Figure(data = [trace1, trace2], layout = layout)\niplot(fig)","1de70dd2":"#Importing make_subplots to create graphs as sub plots\n\nfrom plotly.subplots import make_subplots","2fdc4840":"# Checking the number of passengers survived based on the gender\n\nsurv_gender = surv['Sex'].value_counts()\nn_surv_gender = n_surv['Sex'].value_counts()","0080b5ad":"# Create two Pie graphs for each of the survival status and plotting as sub plots\n\nfig = make_subplots(rows = 1, cols = 2, specs = [[{'type' : 'domain'}, {'type' : 'domain'}]])\n\nfig.add_trace(go.Pie(labels = surv_gender.index,\n       values = surv_gender.values,\n       name = 'Survived',\n       marker = dict(colors = ['seagreen', 'blue'])), 1, 1)\n\nfig.add_trace(go.Pie(labels = n_surv_gender.index,\n       values = n_surv_gender.values,\n       name = 'Not Survived',\n       marker = dict(colors = ['seagreen', 'blue'])), 1, 2)\n\nfig.update_traces(hole = 0.3)\n\nfig.update_layout(title_text = 'Survival by Gender', legend = dict(orientation = 'h'),\n                 annotations = [dict(text = 'Survived', showarrow = False, x = 0.19),\n                            dict(text = 'Not Survived', showarrow = False, x = 0.82)])\n\nfig.data[0].marker.line.width = 1.5\nfig.data[1].marker.line.width = 1.5\n\nfig.data[0].marker.line.color = 'black'\nfig.data[1].marker.line.color = 'black'\n\nfig.show()","55c6eb93":"# Splitting the dataset based on the passenger class\n\npclass1 = train.loc[train['Pclass'] == 1, :]\npclass2 = train.loc[train['Pclass'] == 2, :]\npclass3 = train.loc[train['Pclass'] == 3, :]","d819215b":"# Replacing the survival status with more meaningful values\n\npclass1['Survived'].replace({0 : 'Not Survived', 1 : 'Survived'}, inplace = True)\npclass2['Survived'].replace({0 : 'Not Survived', 1 : 'Survived'}, inplace = True)\npclass3['Survived'].replace({0 : 'Not Survived', 1 : 'Survived'}, inplace = True)","2ea29cb9":"#Checking the #passengers in each of the passenger class\n\nsur_pclass1 = pclass1['Survived'].value_counts(normalize = True)\nsur_pclass2 = pclass2['Survived'].value_counts(normalize = True)\nsur_pclass3 = pclass3['Survived'].value_counts(normalize = True)","45c308ff":"# Create subplots and plot pie graphs for each of the passenger classes\n\nfig = make_subplots(rows = 1, cols = 3, specs = [[{'type' : 'domain'}, {'type' : 'domain'}, {'type' : 'domain'}]])\n\nfig.add_trace(go.Pie(labels = sur_pclass1.index,\n       values = sur_pclass1.values,\n       name = 'Class 1',\n       marker = dict(colors = ['seagreen', 'blue'])), 1, 1)\n\nfig.add_trace(go.Pie(labels = sur_pclass2.index,\n       values = sur_pclass2.values,\n       name = 'Class 2',\n       marker = dict(colors = ['seagreen', 'blue'])), 1, 2)\n\nfig.add_trace(go.Pie(labels = sur_pclass3.index,\n       values = sur_pclass3.values,\n       name = 'Class 3',\n       marker = dict(colors = ['seagreen', 'blue'])), 1, 3)\n\nfig.update_traces(hole = 0.3)\n\nfig.update_layout(title_text = 'Survival by Passenger Class', legend = dict(orientation = 'h'),\n                 annotations = [dict(text = 'Class 1', showarrow = False, x = 0.12),\n                            dict(text = 'Class 2', showarrow = False, x = 0.50),\n                               dict(text = 'Class 3', showarrow = False, x = 0.87)])\n\nfig.data[0].marker.line.width = 1.5\nfig.data[1].marker.line.width = 1.5\nfig.data[2].marker.line.width = 1.5\n\nfig.data[0].marker.line.color = 'black'\nfig.data[1].marker.line.color = 'black'\nfig.data[2].marker.line.color = 'black'\n\nfig.show()","f066d955":"southampton = train.loc[train['Embarked'] == 'S', :]\nqueens = train.loc[train['Embarked'] == 'Q', :]\ncherbourg = train.loc[train['Embarked'] == 'C', :]","8a0ac199":"southampton['Survived'].replace({0 : 'Not Survived', 1 : 'Survived'}, inplace = True)\nqueens['Survived'].replace({0 : 'Not Survived', 1 : 'Survived'}, inplace = True)\ncherbourg['Survived'].replace({0 : 'Not Survived', 1 : 'Survived'}, inplace = True)","4c648aae":"sur_southampton = southampton['Survived'].value_counts(normalize = True)\nsur_queens = queens['Survived'].value_counts(normalize = True)\nsur_cherbourg = cherbourg['Survived'].value_counts(normalize = True)","7f476553":"fig = make_subplots(rows = 1, cols = 3, specs = [[{'type' : 'domain'}, {'type' : 'domain'}, {'type' : 'domain'}]])\n\nfig.add_trace(go.Pie(labels = sur_southampton.index,\n       values = sur_southampton.values,\n       name = 'Southampton',\n       marker = dict(colors = ['seagreen', 'blue'])), 1, 1)\n\nfig.add_trace(go.Pie(labels = sur_queens.index,\n       values = sur_queens.values,\n       name = 'Queenstown',\n       marker = dict(colors = ['seagreen', 'blue'])), 1, 2)\n\nfig.add_trace(go.Pie(labels = sur_cherbourg.index,\n       values = sur_cherbourg.values,\n       name = 'Cherbourg',\n       marker = dict(colors = ['seagreen', 'blue'])), 1, 3)\n\nfig.update_traces(hole = 0.3)\n\nfig.update_layout(title_text = 'Survival by Port of Embarkation', legend = dict(orientation = 'h'),\n                 annotations = [dict(text = 'Southampton', showarrow = False, x = 0.11),\n                            dict(text = 'QueensTown', showarrow = False, x = 0.50),\n                               dict(text = 'Cherbourg', showarrow = False, x = 0.88)])\n\nfig.data[0].marker.line.width = 1.5\nfig.data[1].marker.line.width = 1.5\nfig.data[2].marker.line.width = 1.5\n\nfig.data[0].marker.line.color = 'black'\nfig.data[1].marker.line.color = 'black'\nfig.data[2].marker.line.color = 'black'\n\nfig.show()","bc0b8100":"surv_sib = train.loc[train['Survived'] == 1, :]\nn_surv_sib = train.loc[train['Survived'] == 0, :]","8ef3e284":"fig = make_subplots(rows = 1, cols = 2)\n\nfig.add_trace(go.Histogram(x = surv_sib['SibSp'],\n            name = 'Survived',\n            opacity = 0.8,\n            marker = dict(color = 'seagreen')), 1, 1)\n\nfig.add_trace(go.Histogram(x = n_surv_sib['SibSp'],\n            name = 'Not Survived',\n            opacity = 0.8,\n            marker = dict(color = 'blue')), 1, 2)\n\nfig.update_layout(title_text = 'Survival by #Siblings Aboard',\n                 legend = dict(orientation = 'h'))\n\nfig.show()","505b4593":"fig = make_subplots(rows = 1, cols = 2)\n\nfig.add_trace(go.Histogram(x = surv_sib['Parch'],\n            name = 'Survived',\n            opacity = 0.8,\n            marker = dict(color = 'seagreen')), 1, 1)\n\nfig.add_trace(go.Histogram(x = n_surv_sib['Parch'],\n            name = 'Not Survived',\n            opacity = 0.8,\n            marker = dict(color = 'blue')), 1, 2)\n\nfig.update_layout(title_text = 'Survival by #Parents\/Children Aboard',\n                 legend = dict(orientation = 'h'))\n\nfig.show()","77a46b2f":"## **Conclusion**","678edced":"# **Introduction**","cb3c0d29":"We'll use the following libraries for this analysis.\n- Numpy\n- Pandas\n- Matplotlib\n- Plotly","29aafe7c":"## **Survival by Age Group**","41b4776a":"The passengers who have travelled in 1st and 3rd Class survived in more numbers than the others.","3bf978b8":"The objective of this notebook is to unravel the trends in the titanic dataset using Plotly. Plotly is widely used among the data scientists to produce high quality, interactive graphs. If you are looking to learn Plotly, this notebook would be of great help.\n\nThis notebook has only the exploratory data analysis part and predictive modelling is not covered.","9395c3e8":"## **Survival by #Parents\/Children Aboard**","9a0886da":"# **Objective**","c2f4efae":"As expected, the survival is more among the less aged people than the elder ones. ","1699bc4f":"The female passengers survived in more numbers than the male passengers.","52eb3825":"As seen from the bar graph, there are missing values in the 'Age' and 'Cabin' feature in the train dataset.","19cab56b":"## **Survival of Passengers**","4096a766":"The survival rate is more among the passengers who have paid more fare. This makes sense because the passengers who travelled in higher classes might have survived in more numbers than others.","1f062714":"The sinking of the Titanic is one of the most infamous shipwrecks in history and everyone would have heard about it.\n\nOn April 15, 1912, during her maiden voyage, the widely considered \u201cunsinkable\u201d RMS Titanic sank after colliding with an iceberg.  Unfortunately, there weren\u2019t enough lifeboats for everyone onboard, resulting in the death of 1502 out of 2224 passengers and crew.\n\nWhile there was some element of luck involved in surviving, it seems some groups of people were more likely to survive than others. This notebook is intended to do an analysis of the survival status of the passengers.\n\nThis would help you gain knowledge in Plotly, which is widely used for creating interactive visualizations.","11b613e3":"As seen in the above graphs, the survival rate is skewed towards few categories. Using this trends, we can build our predictive model accordingly. As this notebook is intended to develop interactive charts using Plotly, modelling is not covered here.\n\nHope you would have enjoyed this notebook!\n\nKindly upvote and leave your comments below. Thanks!","7444ee02":"It is obvious from the above graph that only 38.4% of the passengers survived in this shipwreck. We'll deep dive into other features in the upcoming steps.","ceedddb2":"## **Survival by Passenger Class**","ab13dd18":"Passengers who embarked at Southampton survived in more numbers than others.","9f028c92":"## **Survival by Fare Group**","59917c6f":"## **Survival by #Siblings Aboard**","1a5608e4":"## **Quick Inspection of Datasets**","48cf0f18":"## **Survival by Port of Embarkation**","2d7d5d36":"## **Survival by Gender**","e8e3dfd7":"# **Importing Libraries and Dataset**","d3522849":"# **Exploratory Data Analysis**"}}