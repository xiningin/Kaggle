{"cell_type":{"9dbc11b0":"code","97e1313d":"code","ec21edd1":"code","544e70a3":"code","c1c0748b":"code","c0268f05":"code","607a22d7":"code","3ea29f93":"code","b9ee78c3":"code","f15ec6d1":"code","dff63f65":"code","d9afbfa0":"code","18d912d8":"code","bdb939c4":"code","b4358af5":"markdown","c61f2498":"markdown","aea59bb6":"markdown","2d4c34c6":"markdown","edeeb3c5":"markdown","6297a0ce":"markdown","0dacdf4c":"markdown","2609d14a":"markdown","c5549f2e":"markdown","48c5e1cc":"markdown","e94bb390":"markdown"},"source":{"9dbc11b0":"!pip install captcha","97e1313d":"import matplotlib.pyplot as plt # plotting\nimport numpy as np\nimport cv2\nimport os\nimport string\nimport random\nimport math\n\nfrom keras.models import Sequential\nfrom keras import layers\nfrom captcha.image import ImageCaptcha\nfrom keras.layers.wrappers import TimeDistributed\nfrom keras.layers.core import Dense, Activation, Dropout","ec21edd1":"dir_name = \"..\/captchas\/\"\nif not os.path.exists(dir_name):\n    os.makedirs(dir_name)","544e70a3":"NUM_CAPTCHAS_PER_LEN = 1000\nNUM_CAPTCHAS = 4*NUM_CAPTCHAS_PER_LEN\nCAPTCHA_WIDTH = 200\nCAPTCHA_HEIGHT = 50\nFONT_SIZES = 40\nsymbols = string.ascii_lowercase + '0123456789'","c1c0748b":"image = ImageCaptcha(width = CAPTCHA_WIDTH, height = CAPTCHA_HEIGHT, font_sizes=[FONT_SIZES])\nlabel = []\n\ndef generate_data(len_captcha, fo, num):\n    if not os.path.exists(fo):\n        os.makedirs(fo)\n    for _ in range(num):\n        tmp = random.sample(symbols, len_captcha)\n        tmp = ''.join(tmp)\n        image.generate(tmp)\n        image.write(tmp,fo + tmp + '.png')\n        label.append(tmp)\n\ngenerate_data(4, dir_name, NUM_CAPTCHAS_PER_LEN)\ngenerate_data(5, dir_name, NUM_CAPTCHAS_PER_LEN)\ngenerate_data(6, dir_name, NUM_CAPTCHAS_PER_LEN)\ngenerate_data(7, dir_name, NUM_CAPTCHAS_PER_LEN)\nrandom.shuffle(label)\nprint(NUM_CAPTCHAS, \" captchas created!\")","c0268f05":"#!ls \"..\/captchas\/\"","607a22d7":"rd = random.randint(0, NUM_CAPTCHAS-1)\n\nprint(label[rd])\nimg = cv2.imread(os.path.join('..\/captchas\/', label[rd]+'.png'),cv2.IMREAD_GRAYSCALE)\nplt.imshow(img, cmap=plt.get_cmap('gray'))","3ea29f93":"NUM_SYMBOLS = len(symbols)\nimg_shape = (CAPTCHA_HEIGHT, CAPTCHA_WIDTH, 1)\n\nBATCH_SIZE = 32\nEPOCHS = 100","b9ee78c3":"X = np.zeros((NUM_CAPTCHAS, CAPTCHA_HEIGHT, CAPTCHA_WIDTH, 1)) #1000*50*200*1\nY = np.zeros((NUM_CAPTCHAS, 8, NUM_SYMBOLS+1)) #1000*8*63\n\nfor i in range(NUM_CAPTCHAS):\n    img = cv2.imread(os.path.join(dir_name,label[i]+'.png'),cv2.IMREAD_GRAYSCALE)\n    #plt.imshow(img, cmap=plt.get_cmap('gray'))\n    img = img \/ 255\n    img = np.reshape(img, img_shape)\n    tmp = np.zeros((8, NUM_SYMBOLS+1))\n    for j in range(8):\n        if j<len(label[i]):\n            tmp[j,symbols.find(label[i][j])] = 1\n        else: tmp[j,NUM_SYMBOLS] = 1\n    X[i] = img\n    Y[i] = tmp","f15ec6d1":"num_train = math.ceil(0.8*NUM_CAPTCHAS)\nnum_test = NUM_CAPTCHAS - num_train\n\nX_train = X[:num_train]\nY_train = Y[:num_train]\n\nX_test = X[num_train:]\nY_test = Y[num_train:]\n\nprint(\"Total training captcha: \",num_train)\nprint(\"Total test captcha: \",num_test)","dff63f65":"    model = Sequential()\n\n    model.add(layers.Conv2D(16, (3, 3), input_shape=img_shape))\n    model.add(layers.BatchNormalization())\n    model.add(Activation('relu'))\n    model.add(layers.MaxPooling2D(2, 2))\n    model.add(layers.Conv2D(32, (3, 3)))\n    model.add(layers.MaxPooling2D(2, 2))\n    model.add(layers.Conv2D(64, (3, 3)))\n    model.add(layers.BatchNormalization())\n    model.add(Activation('relu'))\n    model.add(layers.MaxPooling2D(2, 2))\n    model.add(layers.Conv2D(64, (3, 3)))\n    model.add(layers.MaxPooling2D(2, 2))\n    model.add(layers.Dropout(0.5))\n    model.add(layers.Flatten())\n    model.add(layers.Dense(128))\n    model.add(layers.RepeatVector(8))\n    model.add(layers.Bidirectional(layers.GRU(100, return_sequences=True)))\n    model.add(TimeDistributed(Dense(NUM_SYMBOLS+1)))\n    model.add(Activation('softmax'))\n          \n    model.compile(loss='categorical_crossentropy', optimizer='adam', metrics=[\"accuracy\"])","d9afbfa0":"model.summary()","18d912d8":"history = model.fit(X_train, Y_train,\n                    batch_size=BATCH_SIZE,\n                    epochs=EPOCHS,\n                    validation_split=0.2\n                   )","bdb939c4":"score = model.evaluate(X_test, Y_test)\nprint(score)","b4358af5":"chia l\u00e0m 2 t\u1eadp train v\u00e0 test","c61f2498":"Install Captcha","aea59bb6":"H\u00e0m t\u1ea1o captcha","2d4c34c6":"t\u1ea1o c\u00e1c t\u1eadp X, Y \u0111\u1ec3 train","edeeb3c5":"T\u1ea1o th\u01b0 m\u1ee5c captchas\/ ch\u1ee9a c\u00e1c captcha \u0111\u01b0\u1ee3c t\u1ea1o ra","6297a0ce":"Khai b\u00e1o c\u00e1c th\u01b0 vi\u1ec7n c\u1ea7n thi\u1ebft","0dacdf4c":"t\u1ea1o v\u00e0 compile model","2609d14a":"Test model","c5549f2e":"hi\u1ec3n th\u1ecb 1 captcha ng\u1eabu nhi\u00ean","48c5e1cc":"Train model","e94bb390":"Khai b\u00e1o c\u00e1c h\u1eb1ng s\u1ed1"}}