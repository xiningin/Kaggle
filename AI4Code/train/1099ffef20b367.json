{"cell_type":{"06a6e6df":"code","2c39c736":"code","d5acafaf":"code","0844d552":"code","dc9dc147":"code","714c216d":"code","8b96f23d":"code","a91ed942":"code","f3c70972":"code","33610aa3":"code","1c73a362":"code","dea50009":"code","e3ed9132":"code","b7cb3c72":"code","a9f31c28":"code","0f3f0f58":"code","fd204eec":"code","d0d1ceac":"code","e95c1a20":"code","ef640a6f":"code","c83c97a2":"code","15167d2b":"code","274c28a4":"code","1bcff27e":"code","309d6026":"code","45589e62":"code","eb3d114d":"code","12d60ee4":"code","2951b4c9":"code","beb55dea":"code","cbd809f2":"markdown","4d7cb195":"markdown","51dea30d":"markdown","03a67fa0":"markdown","ad27ae29":"markdown","f3e99ff8":"markdown","de2c16f8":"markdown"},"source":{"06a6e6df":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","2c39c736":"import warnings\nwarnings.filterwarnings('ignore')\n%config Completer.use_jedi = False # if autocompletion doesnot work in kaggle notebook | hit tab\n","d5acafaf":"# loading the  library\nfrom gensim.models import KeyedVectors\nimport gensim","0844d552":"model = gensim.models.KeyedVectors.load_word2vec_format('..\/input\/word2vec-google\/GoogleNews-vectors-negative300.bin',binary  = True)","dc9dc147":"model.most_similar('king')","714c216d":"vector = model['dog']","8b96f23d":"print(len(vector)) # this is 300 dimension","a91ed942":"import gensim\nimport gensim.downloader as api","f3c70972":"model_glove = api.load(\"glove-wiki-gigaword-300\") # here 100 dimension\n","33610aa3":"model_glove['cricket'].shape","1c73a362":"Doc1 = [\"\"\"With the Union cabinet approving the amendments to the \nMotor Vehicles Act, 2016, those caught for drunken driving will \nhave to have really deep pockets, as the fine payable in court \nhas been enhanced to Rs 10,000 for first-time offenders.\"\"\" ]\nDoc2 = [\"\"\"Natural language processing (NLP) is an area of \ncomputer science and artificial intelligence concerned with the \ninteractions between computers and human (natural) languages, \nin particular how to program computers to process and analyze \nlarge amounts of natural language data.\"\"\"]\nDoc3 = [\"\"\"He points out that public transport is very good in \nMumbai and New Delhi, where there is a good network of suburban \nand metro rail systems.\"\"\"]\nDoc4 = [\"\"\"But the man behind the wickets at the other end was \nwatching just as keenly. With an affirmative nod from Dhoni, \nIndia captain Rohit Sharma promptly asked for a review. Sure \nenough, the ball would have clipped the top of middle and leg.\"\"\"]\n\ndoc = Doc1 + Doc2 + Doc3 + Doc4\ndoc","dea50009":"!pip install git+https:\/\/github.com\/laxmimerit\/preprocess_kgptalkie.git --upgrade --force-reinstall\n","e3ed9132":"!pip install BeautifulSoup4\n","b7cb3c72":"import preprocess_kgptalkie as ps\n","a9f31c28":"\nfrom tqdm._tqdm_notebook import tqdm_notebook\ntqdm_notebook.pandas()\n\ndef text_preprocessing(df):\n    df = pd.Series(df)\n    df = df.progress_apply(lambda x:str(x).lower())\n    df = df.progress_apply(lambda x: ps.cont_exp(x)) #you're -> you are; i'm -> i am\n    df = df.progress_apply(lambda x: ps.remove_emails(x))\n    df = df.progress_apply(lambda x: ps.remove_html_tags(x))\n    df = df.progress_apply(lambda x: ps.remove_urls(x))\n\n    df = df.progress_apply(lambda x: ps.remove_special_chars(x))\n    df = df.progress_apply(lambda x: ps.remove_accented_chars(x))\n    df = df.progress_apply(lambda x: ps.make_base(x)) #ran -> run,\n    return(df)\n","0f3f0f58":"cleaned_doc = text_preprocessing(doc)","fd204eec":"len(cleaned_doc)","d0d1ceac":"from tensorflow.keras.preprocessing.text import Tokenizer\n","e95c1a20":"# tokenisation\ntokens = Tokenizer(split=' ')\ntokens.fit_on_texts(cleaned_doc) ","ef640a6f":"len(tokens.word_index) # this is number of unique words in the text body","c83c97a2":"# creating a fucntion to get word2vec from gensim","15167d2b":"len(model.wv.vocab)# 3 million words here ","274c28a4":"model['bunty'] # gensim model throws keyerror when word not found \n# glove vector throws none when keyword not found ","1bcff27e":"len(model_glove.wv.vocab)","309d6026":"\n# function to get all the vectors from gensim model\ndef get_embedding(word):\n    if word in model_glove.wv.vocab:\n        return(model_glove[word])\n    else:\n        return(np.zeros(300))\n    \n        ","45589e62":"\nout_dict = {}\nfor doc in cleaned_doc:\n    average_vector = np.mean(np.array([get_embedding(word) for word in doc.split()]), axis = 0)\n    dict_ = {doc:average_vector}\n    out_dict.update(dict_)","eb3d114d":"print(len(out_dict[cleaned_doc[0]])) # taking average row wise ","12d60ee4":"# here query_embedding and average_vector_doc both must be averages wordvector or doc vector \nimport scipy\ndef get_sim(query_embedding, average_vector_doc):\n    sim = [(1 - scipy.spatial.distance.cosine(query_embedding, \n    average_vector_doc))]\n    return sim","2951b4c9":"\ndef Ranked_documents(query):\n    query_words = (np.mean(np.array([get_embedding(x) for x in \n    nltk.word_tokenize(query.lower())],dtype=float), axis=0))\n    rank = []\n    for k,v in out_dict.items():\n        rank.append((k, get_sim(query_words, v)))\n    rank = sorted(rank,key=lambda t: t[1], reverse=True)\n    print('Ranked Documents :')\n    return rank","beb55dea":"\nRanked_documents('raina')","cbd809f2":"#### Now we need to compare the similarity between documents ","4d7cb195":"### Now lets do some text cleaning","51dea30d":"gensim pretrained model","03a67fa0":"### Calculating the document vector ","ad27ae29":"### our document","f3e99ff8":"#### Loading word2vec by using gensim downlaoder api","de2c16f8":"### Calculating the rank of documents "}}