{"cell_type":{"d2fbcbd3":"code","e3289c78":"code","91a3acfb":"code","03bfade5":"code","5c196750":"code","a675d699":"code","a0b372a4":"code","3691a4d3":"code","fa700175":"code","f922c81c":"code","38e442d3":"code","4c30e344":"code","c061893d":"code","279b18e0":"code","8dfb8d7d":"code","9b75bd28":"markdown","aa83baf6":"markdown","ae37277b":"markdown","d9a862f6":"markdown","ae711b29":"markdown","937f1ce2":"markdown","4161e17f":"markdown"},"source":{"d2fbcbd3":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nfrom sklearn import preprocessing\nimport matplotlib.pyplot as plt \n\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.model_selection import train_test_split\nimport seaborn as sns\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","e3289c78":"# read in the data from the train.csv\n\ndataf = pd.read_csv('\/kaggle\/input\/tabular-playground-series-jun-2021\/train.csv')","91a3acfb":"# check the first 5 rows\n\ndataf.head()","03bfade5":"dataf.info()","5c196750":"dataf.groupby('target').count()['id']","a675d699":"viz_a = dataf.groupby('target').count()['id']\nviz_a.plot(kind='bar', title='Count of Tartgets', ylabel='Count',\n         xlabel='Targets', figsize=(15, 12))","a0b372a4":"from sklearn.preprocessing import StandardScaler\nfrom sklearn.decomposition import PCA\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import f1_score, classification_report, plot_confusion_matrix\nfrom sklearn.neighbors import KNeighborsClassifier\nimport random","3691a4d3":"dataf.isna().sum()","fa700175":"#Let us split the data between Target\/Dependent and parameters\n\n\ny=dataf.target\nX=dataf.drop('target', axis='columns')","f922c81c":"pca = PCA(n_components=74)\npca.fit(X)\nX_pca = pca.transform(X)","38e442d3":"# Calculate cumulative explained variance across all PCs\ncum_exp_var = []\nvar_exp = 0\nfor i in pca.explained_variance_ratio_:\n    var_exp += i\n    cum_exp_var.append(var_exp)\n\n# Plot cumulative explained variance for all PCs\n\nfig, ax = plt.subplots(figsize=(8,6))\nax.bar(range(1,75), cum_exp_var)\nax.set_xlabel('# Principal Components')\nax.set_ylabel('% Cumulative Variance Explained');","4c30e344":"#scaler = StandardScaler().fit(X_train)\n#train_sc = scaler.transform(X_train)\n#\n#test_sc = scaler.transform(X_test)\n#\nX_train, X_test, y_train, y_test = train_test_split(X, y,  test_size=0.25,random_state=42)\nsc = StandardScaler()\nX_train = sc.fit_transform(X_train)\nX_test = sc.transform(X_test)\n\nknn = KNeighborsClassifier(n_neighbors = 17)\nknn.fit(X_train, y_train)\ny_pred_train = knn.predict(X_train)\ny_pred_test = knn.predict(X_test)\n    \nprint(\"Train f1 Score: \",f1_score(y_train, y_pred_train,average='micro'))\nprint(\"Test f1 Score: \",f1_score(y_test, y_pred_test,average='micro'))\nprint(classification_report(y_test, y_pred_test))\n\n","c061893d":"acc = []\n# Will take some time\nfrom sklearn import metrics\nfor i in range(1,40):\n    neigh = KNeighborsClassifier(n_neighbors = i).fit(X_train,y_train)\n    yhat = neigh.predict(X_test)\n    acc.append(metrics.accuracy_score(y_test, yhat))\n    \nplt.figure(figsize=(10,6))\nplt.plot(range(1,40),acc,color = 'blue',linestyle='dashed', \n         marker='o',markerfacecolor='red', markersize=10)\nplt.title('accuracy vs. K Value')\nplt.xlabel('K')\nplt.ylabel('Accuracy')\nprint(\"Maximum accuracy:-\",max(acc),\"at K =\",acc.index(max(acc)))","279b18e0":"acc = []\n# Will take some time\nfrom sklearn import metrics\nfor i in range(41,70):\n    neigh = KNeighborsClassifier(n_neighbors = i).fit(X_train,y_train)\n    yhat = neigh.predict(X_test)\n    acc.append(metrics.accuracy_score(y_test, yhat))\n    \nplt.figure(figsize=(10,6))\nplt.plot(range(41,70),acc,color = 'blue',linestyle='dashed', \n         marker='o',markerfacecolor='red', markersize=10)\nplt.title('accuracy vs. K Value')\nplt.xlabel('K')\nplt.ylabel('Accuracy')\nprint(\"Maximum accuracy:-\",max(acc),\"at K =\",acc.index(max(acc)))","8dfb8d7d":"from sklearn.linear_model import LogisticRegression\n#X_train, X_test, y_train, y_test\nX_train, X_test, y_train, y_test = train_test_split(X, y,  test_size=0.25,random_state=42)\nlogreg = LogisticRegression()\nlogreg.fit(X_train, y_train)\ny_pred = logreg.predict(X_test)\nprint('Accuracy of logistic regression classifier on test set: {:.2f}'.format(logreg.score(X_test, y_test)))\nprint(\"Train f1 Score: \",f1_score(y_train, y_pred_train,average='micro'))\nprint(\"Test f1 Score: \",f1_score(y_test, y_pred_test,average='micro'))\nprint(classification_report(y_test, y_pred_test))","9b75bd28":"None of the records contain null values. ","aa83baf6":"We can now introduce the scaler before bringing in the PCA methods.","ae37277b":"As can been seen from `Viz_a` above over 50% of the records fall into two categories, 'Class_6' or 'Class_8'","d9a862f6":"The scalar method does exactly what you would imagine - it scales the values across the range, reducing the impact of outliers on the dataset\/column.","ae711b29":"## 2.0 Understanding the Data\nAs you can see from the most recent commands `.head()` and `.info()` we can see the following\n-) There are 77 columns including the index and target\n-) there are 200,000 records all of which are\n    -) Integers (target is an object)\n    -) there are no null values in the data set.","937f1ce2":"PCA - Principal Component Analysis\nThe idea behind this is to select a subset of features that have an implact on the target variable. \nHere we are using the SKlearn PCA method, which some of you may be aware of. \n\nWe are setting the component value to 74 as this is the maximum value it could be, there are 74 columns.","4161e17f":"As can be seen from the above `groupby()` function call there are 9 different targets we need to identify.\nFrom the 200,000 records we can see how many are classified in each of the targets. It might give a better perspective to visualize this data. "}}