{"cell_type":{"7375fe55":"code","987e60b8":"code","d711a41c":"code","7ac78baf":"code","665d4951":"code","465e3870":"code","86181deb":"code","7cb61337":"code","c13d368e":"code","a80e1804":"code","a1b14e3b":"code","2db97a69":"code","2fa0298d":"code","dff61a7e":"code","75e439c6":"code","0883f07c":"code","5927c1eb":"code","9d280cb5":"code","4b67c509":"markdown","b2da2e8a":"markdown","37ec4344":"markdown","a43fb282":"markdown","e2124b9a":"markdown","4255e702":"markdown","a44c7d14":"markdown","222be665":"markdown","0bcba077":"markdown"},"source":{"7375fe55":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport tensorflow as tf\n\nseed = 42\nnp.random.seed(seed)\ntf.random.set_seed(seed)","987e60b8":"from tensorflow import keras\nfrom tensorflow.keras import  optimizers, initializers, regularizers, activations, layers, losses","d711a41c":"path = '..\/input\/digit-recognizer\/'\ntrain_data = pd.read_csv(path + 'train.csv').values\ntest_data = pd.read_csv(path + 'test.csv').values\nsubmit = pd.read_csv(path + 'sample_submission.csv')","7ac78baf":"# split target from train and test data\ny_train = train_data[:, 0]\ntrain_data = train_data[:, 1:]","665d4951":"train_data.shape, test_data.shape, submit.shape","465e3870":"def show_images(x, y):\n    plt.figure(figsize=(15, 15))\n    for i in range(10):\n        plt.subplot(5, 5, i + 1)\n        img = np.array(x[i]).reshape(28, 28)\n        plt.imshow(img, cmap='gray')\n        plt.title(f'label = {y[i]}')\n        plt.axis('off')\n\nshow_images(train_data, y_train)","86181deb":"valid_data = train_data[:5000]\ny_valid = y_train[:5000]\ntrain_data = train_data[5000:]\ny_train = y_train[5000:]\n\nvalid_data.shape, y_valid.shape, train_data.shape, y_train.shape","7cb61337":"# train_data = train_data\/255.0\n# test_data = test_data\/255.0\n\nx_means = train_data.mean(axis=0)\nx_std = train_data.std(axis = 0)\n\ntrain_data_scaled = (train_data - x_means) \/ x_std\ntest_data_scaled = (test_data - x_means) \/ x_std\nvalid_data_scaled = (valid_data - x_means) \/ x_std","c13d368e":"class MCAlphaDropout(layers.AlphaDropout):\n    def call(self, inputs):\n        return super().call(inputs, training = True)","a80e1804":"keras.backend.clear_session()","a1b14e3b":"model = keras.Sequential()\n\nfor units in [200, 200, 100]:\n    model.add(layers.Dense(units, activation=activations.elu, kernel_initializer=initializers.he_normal))\n    model.add(MCAlphaDropout(.2))\n\nmodel.add(layers.Dense(10, activation=activations.softmax))\n\nmodel.compile(optimizer=optimizers.Adam(learning_rate=.003), loss = losses.sparse_categorical_crossentropy, metrics=['accuracy'])","2db97a69":"from tensorflow.keras import callbacks\nmodel_checkpoint_cb = callbacks.ModelCheckpoint('best_model_regularizer.h5', monitor='val_accuracy', save_best_only= True)\nearlyStop_cb = callbacks.EarlyStopping(patience=300, monitor='val_accuracy')\ncb = [model_checkpoint_cb, earlyStop_cb]\n\nmodel.fit(train_data, y_train, validation_data=(valid_data, y_valid), epochs=500, batch_size=30, callbacks=cb)","2fa0298d":"best_weights = model.get_weights()","dff61a7e":"history = pd.DataFrame(model.history.history)\nhistory.plot()","75e439c6":"model.evaluate(valid_data, y_valid)","0883f07c":"y_pred = model.predict(test_data)\ny_pred = np.argmax(y_pred, axis = 1)\ny_pred","5927c1eb":"submit['Label'] = y_pred\nsubmit.to_csv('submission.csv', index=False)","9d280cb5":"submit","4b67c509":"#### Evaluate the Model","b2da2e8a":"#### Split Train data to validation and training","37ec4344":"### Digit Recognizer using ANN\n#### 98% Val Accuracy","a43fb282":"#### Scale the images","e2124b9a":"#### Load Dataset","4255e702":"#### Save the solution in submission.csv file","a44c7d14":"#### Build the Model","222be665":"#### Explore the data","0bcba077":"#### Import Libraries"}}