{"cell_type":{"3b99a693":"code","3f8a2eaf":"code","a11faf3f":"code","50420779":"code","32cff927":"code","157b2884":"code","a609fdb2":"code","0455334a":"code","4e52b08b":"code","d4b34b9e":"code","13eecfd0":"code","c0cc255a":"code","115a581a":"code","6056eab2":"code","bc369f21":"code","1b252dcd":"code","e5d719a4":"code","f3bf7205":"code","57b79c39":"code","9023e3bc":"code","58cdb4d9":"code","d7904d2b":"code","48eec08b":"code","aae7e499":"code","cc189e87":"code","98f8b194":"code","77edaae8":"code","b1c1596a":"code","62641df0":"code","90d17d4a":"code","ca75f0ac":"code","90b15bcd":"code","f319e9f5":"code","b6737658":"code","8111c4e0":"code","c6b89fbb":"code","30535a20":"code","937276b5":"code","9b5e8b49":"code","85372a40":"code","302604c2":"code","91bbacf7":"code","0fc3334a":"code","d58b989c":"code","7b0296ee":"code","b511e39d":"code","8d791adc":"code","b33e84ff":"code","f470bea3":"code","ad3d81b0":"code","3d11705c":"code","3d149704":"code","217a7c27":"code","a75fcbbb":"code","518823d5":"code","ea05f0d2":"code","b3700dd4":"code","af063ecd":"code","dceca4ad":"code","c861a73d":"markdown"},"source":{"3b99a693":"import warnings\nimport numpy as np\nimport pandas as pd\nimport seaborn as sns\nfrom matplotlib import pyplot as plt\nfrom sklearn.ensemble import RandomForestClassifier, GradientBoostingClassifier, VotingClassifier\nfrom sklearn.model_selection import GridSearchCV, cross_validate, RandomizedSearchCV, validation_curve\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.neighbors import LocalOutlierFactor\nfrom sklearn.preprocessing import MinMaxScaler, LabelEncoder, StandardScaler, RobustScaler\nfrom sklearn.ensemble import RandomForestClassifier, GradientBoostingClassifier, VotingClassifier, AdaBoostClassifier\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.model_selection import cross_validate, GridSearchCV\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.svm import SVC\nfrom sklearn.tree import DecisionTreeClassifier\n\nfrom xgboost import XGBClassifier\nfrom lightgbm import LGBMClassifier\nfrom catboost import CatBoostClassifier","3f8a2eaf":"train = pd.read_csv(\"..\/input\/hr-analytics-job-change-of-data-scientists\/aug_train.csv\")\ntest = pd.read_csv(\"..\/input\/hr-analytics-job-change-of-data-scientists\/aug_test.csv\")\ndf = train.append(test).reset_index(drop = True)","a11faf3f":"df.head()","50420779":"df.shape","32cff927":"def check_df(dataframe, head=5):\n    print(\"##################### Shape #####################\")\n    print(dataframe.shape)\n    print(\"##################### Types #####################\")\n    print(dataframe.dtypes)\n    print(\"##################### Head #####################\")\n    print(dataframe.head(head))\n    print(\"##################### Tail #####################\")\n    print(dataframe.tail(head))\n    print(\"##################### NA #####################\")\n    print(dataframe.isnull().sum())\n    print(\"##################### Quantiles #####################\")\n    print(dataframe.quantile([0, 0.05, 0.50, 0.95, 0.99, 1]).T)","157b2884":"check_df(df)","a609fdb2":"def grab_col_names(dataframe, cat_th=10, car_th=20):\n    # cat_cols, cat_but_car\n    cat_cols = [col for col in dataframe.columns if dataframe[col].dtypes == \"O\"]\n    num_but_cat = [col for col in dataframe.columns if dataframe[col].nunique() < cat_th and\n                   dataframe[col].dtypes != \"O\"]\n    cat_but_car = [col for col in dataframe.columns if dataframe[col].nunique() > car_th and\n                   dataframe[col].dtypes == \"O\"]\n    cat_cols = cat_cols + num_but_cat\n    cat_cols = [col for col in cat_cols if col not in cat_but_car]\n\n    # num_cols\n    num_cols = [col for col in dataframe.columns if dataframe[col].dtypes != \"O\"]\n    num_cols = [col for col in num_cols if col not in num_but_cat]\n\n    print(f\"Observations: {dataframe.shape[0]}\")\n    print(f\"Variables: {dataframe.shape[1]}\")\n    print(f'cat_cols: {len(cat_cols)}')\n    print(f'num_cols: {len(num_cols)}')\n    print(f'cat_but_car: {len(cat_but_car)}')\n    print(f'num_but_cat: {len(num_but_cat)}')\n    return cat_cols, num_cols, cat_but_car, num_but_cat","0455334a":"cat_cols, num_cols, cat_but_car, num_but_cat = grab_col_names(df)","4e52b08b":"df.groupby(\"relevent_experience\")[\"target\"].mean()","d4b34b9e":"df.groupby(\"education_level\")[\"target\"].mean()","13eecfd0":"df.groupby(\"major_discipline\")[\"target\"].mean()","c0cc255a":"def target_summary_with_cat(dataframe, target, categorical_col):\n    print(pd.DataFrame({\"TARGET_MEAN\": dataframe.groupby(categorical_col)[target].mean()}), end=\"\\n\\n\\n\")","115a581a":"def target_summary_with_num(dataframe, target, numerical_col):\n    print(dataframe.groupby(target).agg({numerical_col: \"mean\"}), end=\"\\n\\n\\n\")\n\ncat_cols, num_cols, cat_but_car, num_but_cat = grab_col_names(df)\n\nfor col in num_cols:\n    target_summary_with_num(df, \"target\", col)\n    \nfor col in cat_cols:\n    target_summary_with_cat(df, \"target\", col)\n","6056eab2":"num_cols = [col for col in df.columns if df[col].dtype in [int, float]]\n\ncorr = df[num_cols].corr()\n\nsns.set(rc={'figure.figsize': (12, 12)})\nsns.heatmap(corr, cmap=\"RdBu\")\nplt.show()","bc369f21":"def num_summary(dataframe, numerical_col, plot=False, plot_type=\"hist\"):\n    quantiles = [0.05, 0.10, 0.25, 0.50, 0.75, 0.80, 0.90, 0.95, 0.99]\n    print(dataframe[numerical_col].describe(quantiles).T)\n    if plot:\n        if plot_type == \"hist\":\n            dataframe[numerical_col].hist(bins=30)\n            plt.xlabel(numerical_col)\n            plt.title(numerical_col)\n            plt.show()\n\n        elif plot_type == \"box_plot\":\n            sns.boxplot(x=dataframe[numerical_col])\n            plt.xlabel(numerical_col)\n            plt.title(numerical_col)\n            plt.show()\n        else:\n            print(\"do\u011fru grafik t\u00fcr\u00fc de\u011fil\")\nnum_summary(df, \"training_hours\", plot = True, plot_type = \"box_plot\")","1b252dcd":"for col in num_cols:\n    num_summary(df,col)","e5d719a4":"def cat_summary(dataframe, col_name, plot=False):\n    print(pd.DataFrame({col_name: dataframe[col_name].value_counts(),\n                        \"Ratio\": 100 * dataframe[col_name].value_counts() \/ len(dataframe)}))\n    print(\"##########################################\")\n    if plot:\n        sns.countplot(x=dataframe[col_name], data=dataframe)\n        plt.show()\n        \ncat_summary(df, \"city\", plot = True)","f3bf7205":"for col in cat_cols:\n    cat_summary(df, col)","57b79c39":"def target_correlation_matrix(dataframe, corr_th=0.1, target=\"target\"):\n    corr = dataframe.corr()\n    corr_th = corr_th\n\n    try:\n        filter = np.abs(corr[target]) > corr_th\n        corr_features = corr.columns[filter].tolist()\n        sns.clustermap(dataframe[corr_features].corr(), annot=True, fmt=\".2f\")\n        plt.show()\n        return corr_features\n    except:\n        print(\"Y\u00fcksek threshold de\u011feri, corr_th de\u011ferinizi d\u00fc\u015f\u00fcr\u00fcn!\")\n\ntarget_correlation_matrix(df, corr_th=0.1, target=\"target\")\n","9023e3bc":"def outlier_thresholds(dataframe, col_name, q1=0.25, q3=0.75):\n    quartile1 = dataframe[col_name].quantile(q1)\n    quartile3 = dataframe[col_name].quantile(q3)\n    interquantile_range = quartile3 - quartile1\n    up_limit = quartile3 + 1.5 * interquantile_range\n    low_limit = quartile1 - 1.5 * interquantile_range\n    return low_limit, up_limit","58cdb4d9":"def check_outlier(dataframe, col_name, q1=0.25, q3=0.75):\n    low_limit, up_limit = outlier_thresholds(dataframe, col_name, q1, q3)\n    if dataframe[(dataframe[col_name] > up_limit) | (dataframe[col_name] < low_limit)].any(axis=None):\n        return True\n    else:\n        return False","d7904d2b":"cat_cols, num_cols, cat_but_car, num_but_cat = grab_col_names(df)\n\nfor col in num_cols:\n    print(col, check_outlier(df, col))","48eec08b":"def replace_with_thresholds(dataframe, variable):\n    low_limit, up_limit = outlier_thresholds(dataframe, variable)\n    dataframe.loc[(dataframe[variable] < low_limit), variable] = low_limit\n    dataframe.loc[(dataframe[variable] > up_limit), variable] = up_limit","aae7e499":"for col in num_cols:\n    replace_with_thresholds(df, col)","cc189e87":"for col in num_cols:\n    print(col, check_outlier(df, col))","98f8b194":"df.isnull().values.any()","77edaae8":"na_cols = [col for col in df.columns if df[col].isnull().sum() > 0]","b1c1596a":"import numpy as np","62641df0":"df[\"gender\"].fillna(df[\"gender\"].mode()[0], inplace = True )","90d17d4a":"df[\"enrolled_university\"].fillna(df[\"enrolled_university\"].mode()[0], inplace = True)","ca75f0ac":"df[\"education_level\"].fillna(df[\"education_level\"].mode()[0], inplace = True)\n","90b15bcd":"df[\"major_discipline\"].fillna(df[\"major_discipline\"].mode()[0], inplace = True)","f319e9f5":"df[\"experience\"].fillna(df[\"experience\"].mode()[0], inplace = True)","b6737658":"df[\"company_size\"].fillna(df[\"company_size\"].mode()[0], inplace = True)","8111c4e0":"df[\"company_type\"].fillna(df[\"company_type\"].mode()[0], inplace = True)","c6b89fbb":"df[\"last_new_job\"].fillna(df[\"last_new_job\"].mode()[0], inplace = True)\n","30535a20":"df.isnull().values.any()","937276b5":"df.shape","9b5e8b49":"df.dropna(inplace = True)","85372a40":"df.shape","302604c2":"check_df(df)","91bbacf7":"df[\"education_level\"]","0fc3334a":"def label_encoder(dataframe, binary_col):\n    labelencoder = LabelEncoder()\n    dataframe[binary_col] = labelencoder.fit_transform(dataframe[binary_col].astype(str))\n    return dataframe\n\nbinary_cols = [col for col in df.columns if df[col].dtypes == \"O\"\n               and len(df[col].unique()) == 2]\n\nfor col in df.columns:\n    label_encoder(df, col)","d58b989c":"df.head()","7b0296ee":"df[\"NEW\"] = df[\"experience\"] * df[\"education_level\"]","b511e39d":"df[\"NEW2\"] = df[\"relevent_experience\"] * df[\"company_type\"]","8d791adc":"df[\"NEW3\"] = df[\"major_discipline\"] * df[\"education_level\"]","b33e84ff":"df[\"NEW4\"] = df[\"experience\"] \/ df[\"last_new_job\"]","f470bea3":"def label_encoder(dataframe, binary_col):\n    labelencoder = LabelEncoder()\n    dataframe[binary_col] = labelencoder.fit_transform(dataframe[binary_col].astype(str))\n    return dataframe\n\nbinary_cols = [col for col in df.columns if df[col].dtypes == \"O\"\n               and len(df[col].unique()) == 2]\n\nfor col in df.columns:\n    label_encoder(df, col)","ad3d81b0":"def one_hot_encoder(dataframe, categorical_cols, drop_first=False):\n    dataframe = pd.get_dummies(dataframe, columns=categorical_cols, drop_first=drop_first)\n    return dataframe\n\nohe_cols = [col for col in df.columns if 10 >= len(df[col].unique()) > 2]\n\none_hot_encoder(df, ohe_cols, drop_first=True).head()","3d11705c":"df.shape","3d149704":"rs = RobustScaler()\ndf[num_cols] = rs.fit_transform(df[num_cols])","217a7c27":"def clean_dataset(df):\n    assert isinstance(df, pd.DataFrame), \"df needs to be a pd.DataFrame\"\n    df.dropna(inplace=True)\n    indices_to_keep = ~df.isin([np.nan, np.inf, -np.inf]).any(1)\n    return df[indices_to_keep].astype(np.float64)","a75fcbbb":"y = df[\"target\"]\nX = df.drop([\"enrollee_id\", \"target\"], axis=1)","518823d5":"classifiers = [('LR', LogisticRegression()),\n               ('KNN', KNeighborsClassifier()),\n               (\"SVC\", SVC()),\n               (\"CART\", DecisionTreeClassifier()),\n               (\"RF\", RandomForestClassifier()),\n               ('Adaboost', AdaBoostClassifier()),\n               ('GBM', GradientBoostingClassifier()),\n               ('XGBoost', XGBClassifier()),\n               ('LightGBM', LGBMClassifier()),\n               ]\n","ea05f0d2":"for name, classifier in classifiers:\n    cv_results = cross_validate(classifier, X, y, cv=3, scoring=[\"roc_auc\"])\n    print(f\"AUC: {round(cv_results['test_roc_auc'].mean(),4)} ({name}) \")\n","b3700dd4":"lightgbm_params = {\"num_leaves\": [20, 50],\n               \"max_depth\": [5, 8],\n               \"learning_rate\": [0.005, 0.01, 0.02, 0.1, 0.2],\n               \"n_estimators\": [100,250, 500, 1000]}\n\n\nclassifiers = [('LightGBM', LGBMClassifier(), lightgbm_params)]\n","af063ecd":"best_models = {}\n\n\nfor name, classifier, params in classifiers:\n    print(f\"########## {name} ##########\")\n    cv_results = cross_validate(classifier, X, y, cv=5, scoring=[\"roc_auc\"])\n    print(f\"AUC (Before): {round(cv_results['test_roc_auc'].mean(),4)}\")\n\n\n    gs_best = GridSearchCV(classifier, params, cv=5, n_jobs=-1, verbose=False).fit(X, y)\n    final_model = classifier.set_params(**gs_best.best_params_)\n\n    cv_results = cross_validate(final_model, X, y, cv=5, scoring=[\"roc_auc\"])\n    print(f\"AUC (After): {round(cv_results['test_roc_auc'].mean(), 4)}\")\n    print(f\"{name} best params: {gs_best.best_params_}\", end=\"\\n\\n\")\n\n    best_models[name] = final_model\n","dceca4ad":"def plot_importance(model, features, num=len(X), save=False):\n    feature_imp = pd.DataFrame({'Value': model.feature_importances_, 'Feature': features.columns})\n    plt.figure(figsize=(10, 10))\n    sns.set(font_scale=1)\n    sns.barplot(x=\"Value\", y=\"Feature\", data=feature_imp.sort_values(by=\"Value\",\n                                                                     ascending=False)[0:num])\n    plt.title('Features')\n    plt.tight_layout()\n    plt.show()\n    if save:\n        plt.savefig('importances.png')\n\nmodel = LGBMClassifier()\nmodel.fit(X,y)\nplot_importance(model, X)","c861a73d":"**Feature Engineering**"}}