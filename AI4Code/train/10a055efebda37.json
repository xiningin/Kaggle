{"cell_type":{"81d6d253":"code","7d641a37":"code","9767fb72":"code","7423bff3":"code","6814bd02":"code","2b4a91f4":"code","6dc67aad":"code","d612cafc":"code","fae50a80":"code","328bf184":"code","c3dd9fe7":"code","23f653bf":"code","80513079":"code","fd0e5d62":"code","5f052de8":"code","78b1e012":"code","29d7a2c7":"code","75c47d0b":"code","c2305070":"code","da7e8fe3":"code","9d856d59":"code","2a9275af":"code","72429a40":"code","46816e0c":"code","551863f2":"code","a1441ad6":"code","b59a983f":"code","a7b3c390":"code","8c374f18":"code","6f4aff4e":"code","e64ddaf0":"code","165d79d4":"code","4998299d":"code","84463630":"code","54f975e3":"code","c05417fd":"code","574585df":"code","6fd165b3":"code","0c2fae70":"code","312cc86c":"code","8baacf63":"code","3764cc4c":"code","56b53d4c":"code","3902efee":"code","4e4e14bd":"code","488534f8":"code","6ae85905":"code","32607af4":"code","a27da448":"code","09779282":"code","c44b8fd5":"code","cbcf8a96":"code","0d03bb8a":"markdown","0b942bd0":"markdown","4786c3f6":"markdown","0ed107f4":"markdown","f211b652":"markdown","c4d1f259":"markdown","894a9c5d":"markdown","3024c540":"markdown","efeddcc7":"markdown","8683c1ac":"markdown","266f5184":"markdown"},"source":{"81d6d253":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","7d641a37":"#!pip install ycimpute\n#from ycimpute.imputer import iterforest,EM\n\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.decomposition import PCA\nfrom sklearn.preprocessing import LabelEncoder\nfrom sklearn import datasets, metrics, model_selection, svm\nimport missingno as msno\n\nfrom fancyimpute import KNN\nfrom sklearn.preprocessing import OrdinalEncoder\n\nimport numpy as np\nimport pandas as pd \nimport statsmodels.api as sm\nimport statsmodels.formula.api as smf\nimport seaborn as sns\nfrom sklearn.preprocessing import scale \nfrom sklearn.model_selection import train_test_split, GridSearchCV, cross_val_score\nfrom sklearn.metrics import confusion_matrix, accuracy_score, classification_report\nfrom sklearn.metrics import roc_auc_score,roc_curve\nimport statsmodels.formula.api as smf\nimport matplotlib.pyplot as plt\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.discriminant_analysis import LinearDiscriminantAnalysis\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.svm import SVC\nfrom sklearn.naive_bayes import GaussianNB\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.ensemble import GradientBoostingClassifier\nfrom xgboost import XGBClassifier\nfrom lightgbm import LGBMClassifier\nfrom catboost import CatBoostClassifier\n\nfrom warnings import filterwarnings\nfilterwarnings('ignore')\n\npd.set_option('display.max_columns', None)\nimport gc","9767fb72":"encoder=OrdinalEncoder()\nimputer=KNN()\n\ndef encode(data):\n    '''function to encode non-null data and replace it in the original data'''\n    #retains only non-null values\n    nonulls = np.array(data.dropna())\n    #reshapes the data for encoding\n    impute_reshape = nonulls.reshape(-1,1)\n    #encode date\n    impute_ordinal = encoder.fit_transform(impute_reshape)\n    #Assign back encoded values to non-null values\n    data.loc[data.notnull()] = np.squeeze(impute_ordinal)\n    return data","7423bff3":"df=pd.read_csv(\"\/kaggle\/input\/churn-modelling\/Churn_Modelling.csv\")\ndf.head()","6814bd02":"df.info()","2b4a91f4":"df.nunique()","6dc67aad":"df.select_dtypes(include=\"object\").nunique()","d612cafc":"for i in df.select_dtypes(include=\"object\"):\n    print(df.select_dtypes(include=\"object\")[i].value_counts())","fae50a80":"data=df\ndata.head()","328bf184":"df['Gender']=LabelEncoder().fit_transform(df['Gender'])\ndf['Surname']=LabelEncoder().fit_transform(df['Surname'])\ndms= pd.get_dummies(df[['Geography']])\ndf=df.drop('Geography', axis=1)\ndf=pd.concat([df, dms], axis=1)\ndf.head()","c3dd9fe7":"df.isnull().sum().any()","23f653bf":"df.corrwith(df[\"Exited\"], method=\"spearman\")","80513079":"plt.subplots(figsize=(20,15))\nsns.heatmap(df.corr(), annot=True);","fd0e5d62":"df[[\"CreditScore\",\"Age\",\"Tenure\",\"Balance\",\"NumOfProducts\",\"EstimatedSalary\"]].describe().T","5f052de8":"sns.scatterplot(y= df.Age, x=df.EstimatedSalary, hue=df.Exited);","78b1e012":"sns.scatterplot(y= df.Age, x=df.Balance, hue=df.Exited);","29d7a2c7":"sns.scatterplot(x=df.Tenure,y=df.NumOfProducts, hue=df.Exited);","75c47d0b":"sns.boxplot(df.CreditScore)\nplt.show()\nsns.distplot(df[\"CreditScore\"]);","c2305070":"df[\"CreditScore\"].describe()","da7e8fe3":"'''\n# how to eliminate outliers\n\nQ1=df[\"CreditScore\"].quantile(.25)\nQ3=df[\"CreditScore\"].quantile(.75)\nIQR=Q3-Q1\nprint(Q1)\nprint(Q3)\nprint(IQR)\n\nlower_threshold=Q1-1.5*IQR\nlower_threshold\n\nzz=pd.DataFrame(df[\"CreditScore\"]<lower_threshold)\nzz.loc[zz[\"CreditScore\"]==True].index\n\nfor i in zz.loc[zz[\"CreditScore\"]==True].index:\n    df[\"CreditScore\"][i]= 383\n    print(df[\"CreditScore\"][i])\n    \n'''","9d856d59":"sns.boxplot(df.Age)\nplt.show()\nsns.distplot(df[\"Age\"]);","2a9275af":"df.Age.describe()","72429a40":"sns.boxplot(df.Tenure)\nplt.show()\nsns.distplot(df[\"Tenure\"]);","46816e0c":"sns.boxplot(df.Balance)\nplt.show()\nsns.distplot(df[\"Balance\"]);","551863f2":"sns.distplot(df[\"EstimatedSalary\"]);","a1441ad6":"sns.boxplot(df.NumOfProducts)\nplt.show()\nsns.distplot(df[\"NumOfProducts\"]);","b59a983f":"df[\"NumOfProducts\"].describe()","a7b3c390":"sns.boxplot(df.EstimatedSalary)\nplt.show()\nsns.distplot(df.EstimatedSalary);","8c374f18":"# Age Segmentation\n\ndf.Age","6f4aff4e":"x=df[[\"Age\"]]\nbins=[0,20,30,40,50,60,70,120]\nlabels=[\"below 20\",\"20-29\",\"30-39\",\"40-49\",\"50-59\",\"60-69\",\"70+\"]\nx[\"age_segment\"]=pd.cut(x[\"Age\"], bins, labels=labels, include_lowest=True)\ndf[\"age_segment\"]=x[\"age_segment\"]","e64ddaf0":"df[\"age_segment\"]=LabelEncoder().fit_transform(df[\"age_segment\"])\ndf","165d79d4":"df.Age.std()\/df.Age.mean()","4998299d":"# Coef.of variance\n\ncolumns=[\"CreditScore\",\n        \"Age\",\n        \"Tenure\",\n        \"Balance\",\n        \"EstimatedSalary\"]\n\nfor i in columns:\n    df[\"VC_\"+i]=df[i].std()\/df[i].mean()\n\ndf","84463630":"Ktrain, Ktest = train_test_split(df, test_size=0.30, random_state=4)\ny_Ktest=Ktest[\"Exited\"]\nX_Ktest=Ktest.drop([\"Exited\"], axis=1)","54f975e3":"y=Ktrain['Exited']\nX=Ktrain.drop(['Exited',\"RowNumber\",\"CustomerId\",\"Surname\"], axis=1).astype('float64')\nX_train, X_test,y_train,y_test = train_test_split(X,y, test_size=0.30, random_state=4)","c05417fd":"def compML (df, y, algorithm):\n    \n    y=df[y]\n    X=df.drop(['Exited',\"RowNumber\",\"CustomerId\",\"Surname\"], axis=1).astype('float64')\n    X_train, X_test,y_train,y_test=train_test_split(X,y, test_size=0.25, random_state=4)\n    \n    model=algorithm().fit(X_train, y_train)\n    y_pred=model.predict(X_test)\n    accuracy= accuracy_score(y_test, y_pred)\n    #return accuracy\n    model_name= algorithm.__name__\n    print(model_name,\": \",accuracy)","574585df":"models = [LogisticRegression,\n          KNeighborsClassifier,\n          GaussianNB,\n          SVC,\n          DecisionTreeClassifier,\n          RandomForestClassifier,\n          GradientBoostingClassifier,\n          LGBMClassifier,\n          XGBClassifier,\n          #CatBoostClassifier\n         ]","6fd165b3":"df","0c2fae70":"for x in models:\n    compML(df,\"Exited\",x)","312cc86c":"clf=GradientBoostingClassifier().fit(X_train, y_train)\ny_pred=clf.predict(X_test)\naccuracy_score(y_test, y_pred)","8baacf63":"clf","3764cc4c":"GBM_params = {\"loss\":[ 'deviance', 'exponential'],\n             \"min_samples_split\":[2,3],\n             \"n_estimators\":[100,200,500],\n             \"min_samples_leaf\":[1,2],\n             }","56b53d4c":"GBM_cv_model = GridSearchCV(clf, \n                            GBM_params, \n                            cv=10, n_jobs=-1, \n                            verbose=2).fit(X_train, y_train)","3902efee":"GBM_cv_model.best_params_","4e4e14bd":"clf_tuned = GradientBoostingClassifier(learning_rate= 0.1,\n                                       max_depth= 3,\n                                       n_estimators= 100,\n                                       subsample= 1).fit(X_train, y_train)\ny_pred=clf.predict(X_test)\naccuracy_score(y_test, y_pred)","488534f8":"Importance = pd.DataFrame({'Importance':clf_tuned.feature_importances_*100},\n                         index = X_train.columns)\n\nImportance.sort_values(by = 'Importance',\n                      axis = 0,\n                      ascending = True).plot(kind = 'barh',\n                                            color = '#d62728',\n                                            figsize=(10,6), \n                                            edgecolor='white')\nplt.xlabel('Variable Importance')\nplt.gca().legend_ = None","6ae85905":"print(X.shape)\nprint(X_Ktest.shape)\nprint(y_train.shape)\nprint(y_Ktest.shape)\ny_Ktest.head()","32607af4":"#Ktest_Exited=Ktest[\"Exited\"]\n#Ktest=Ktest.drop([\"Exited\"], axis=1)\nX_Ktest= X_Ktest.drop([\"RowNumber\",\"CustomerId\",\"Surname\"], axis=1).astype('float64')","a27da448":"# X_Ktest.drop(['predictions'], axis=1, inplace=True)","09779282":"predictions= clf.predict(X_Ktest)","c44b8fd5":"real_test_y=pd.DataFrame(y_Ktest)\nreal_test_y[\"predictions\"]=predictions\n\nreal_test_y.loc[:,\"predictions\"]=round(real_test_y.loc[:,\"predictions\"] ).astype(int)\n\nreal_test_y.head()","cbcf8a96":"accuracy_score(real_test_y.loc[:,\"Exited\"],real_test_y.loc[:,\"predictions\"] )","0d03bb8a":"### Model tuning","0b942bd0":"### Missing Data","4786c3f6":"* Additional Features","0ed107f4":"### Train Test Split","f211b652":"* CreditScore","c4d1f259":"### Correlation Analysis","894a9c5d":"* Best Model ","3024c540":"### Feature Importance","efeddcc7":"* Tenure","8683c1ac":"### Automation of ML Algorithms","266f5184":"* Age"}}