{"cell_type":{"ea6621f9":"code","63a95fc0":"code","41fd6dd6":"code","57fb88e7":"code","95ae2f70":"code","3bb30579":"code","a7ba21e3":"code","22801593":"code","4be38607":"code","4e8e623a":"code","b603697e":"code","1607db7e":"code","922b89f2":"code","4dfac7b7":"code","6c71ba3e":"code","a5dd3457":"code","5a4df01d":"code","33090e47":"code","575add7a":"code","2a982244":"code","c782ce4c":"code","c3198893":"markdown","640101de":"markdown","bf29245d":"markdown","7b5dfcd8":"markdown","4efaa3ee":"markdown","17e3462b":"markdown","01367689":"markdown"},"source":{"ea6621f9":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt #Data Visualization \nimport seaborn as sns\nimport warnings\nwarnings.simplefilter(\"ignore\")\n%matplotlib inline\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory\n\nimport os\nprint(os.listdir(\"..\/input\"))\n\n# Any results you write to the current directory are saved as output.","63a95fc0":"#Now import and sore the train and test datasets in  pandas dataframe\n\ntrain = pd.read_csv('..\/input\/train.csv')\ntest = pd.read_csv('..\/input\/test.csv')","41fd6dd6":"#print the Sze of data set\nprint(\"train dataset size is : {}\".format(train.shape))\nprint(\"test dataset size is : {}\".format(test.shape))","57fb88e7":"train.head()","95ae2f70":"# Getting rid of the IDs but keeping the test IDs in a variable\n#Save the 'Id' column\ntrain_ID = train['Id']\ntest_ID = test['Id']\n\n#Now drop the  'Id' \ntrain.drop(\"Id\", axis = 1, inplace = True)\ntest.drop(\"Id\", axis = 1, inplace = True)","3bb30579":"#statistics summary\ntrain.SalePrice.describe()","a7ba21e3":"#Distribution \nplt.subplots(figsize=(10,7))\nsns.distplot(train['SalePrice'],)","22801593":"corrmat = train.corr()","4be38607":"plt.subplots(figsize=(18,12))\nsns.heatmap(train.corr())","4e8e623a":"k = 5 #number of variables for heatmap\ncols = corrmat.nlargest(k, 'SalePrice')['SalePrice'].index\ncols","b603697e":"cm = np.corrcoef(train[cols].values.T)\nplt.subplots(figsize=(10,7))\nsns.set(font_scale=1.25)\nhm = sns.heatmap(cm, cbar=True, annot=True, square=True, fmt='.2f', annot_kws={'size': 10}, yticklabels=cols.values, xticklabels=cols.values)\nplt.show()","1607db7e":"train[['SalePrice', 'OverallQual', 'GrLivArea', 'GarageCars', 'GarageArea']].corr()\n","922b89f2":"sns.pairplot(data=train[['SalePrice', 'OverallQual', 'GrLivArea', 'GarageCars', 'GarageArea']])","4dfac7b7":"train[['SalePrice', 'OverallQual', 'GrLivArea', 'GarageCars', 'GarageArea']].describe()","6c71ba3e":"train.select_dtypes(include='object').describe()","a5dd3457":"#box plot overallqual\/saleprice\nf, ax = plt.subplots(figsize=(8, 6))\nfig = sns.boxplot(x=train['OverallQual'], y=train[\"SalePrice\"],)","5a4df01d":"f, ax = plt.subplots(figsize=(16, 8))\nfig = sns.boxplot(x=train['YearBuilt'], y=train[\"SalePrice\"],)\nplt.xticks(rotation=90)","33090e47":"from scipy import stats\nfrom scipy.stats import norm\n#Plot the Normal Distribution of sales price\nplt.figure(figsize=(10,6))\nsns.distplot(train['SalePrice'] , fit=norm);\n\n# Get the fitted parameters used by the function\n(mu, sigma) = norm.fit(train['SalePrice'])\nprint( '\\n mu = {:.2f} and sigma = {:.2f}\\n'.format(mu, sigma))\n\n#Now plot the distribution\nplt.legend(['Normal dist. ($\\mu=$ {:.2f} and $\\sigma=$ {:.2f} )'.format(mu, sigma)],\n            loc='best')\nplt.ylabel('Frequency')\nplt.title('SalePrice distribution')\n\n#Get also the QQ-plot to see common distribution\nfig = plt.figure(figsize=(10,6))\nres = stats.probplot(train['SalePrice'], plot=plt)\nplt.show()","575add7a":"#We use the numpy fuction log1p which  applies log(1+x) to all elements of the column\ntrain[\"SalePrice\"] = np.log1p(train[\"SalePrice\"])\n\n#Check the new distribution \nplt.figure(figsize=(10,6))\nsns.distplot(train['SalePrice'] , fit=norm);\n\n# Get the fitted parameters used by the function\n(mu, sigma) = norm.fit(train['SalePrice'])\nprint( '\\n mu = {:.2f} and sigma = {:.2f}\\n'.format(mu, sigma))\n\n#Now plot the distribution\nplt.legend(['Normal dist. ($\\mu=$ {:.2f} and $\\sigma=$ {:.2f} )'.format(mu, sigma)],\n            loc='best')\nplt.ylabel('Frequency')\nplt.title('SalePrice distribution')\n\n#Get also the QQ-plot\nfig = plt.figure(figsize=(10,6))\nres = stats.probplot(train['SalePrice'], plot=plt)\nplt.show()","2a982244":"#data transformation\ntrain['GrLivArea'] = np.log(train['GrLivArea'])\n#transformed histogram and normal probability plot\nsns.distplot(train['GrLivArea'], fit=norm);\nfig = plt.figure()\nres = stats.probplot(train['GrLivArea'], plot=plt)","c782ce4c":"#histogram and normal probability plot\nsns.distplot(train['TotalBsmtSF'], fit=norm);\nfig = plt.figure()\nres = stats.probplot(train['TotalBsmtSF'], plot=plt)","c3198893":"Observe strong co related features and taking them to explore relation with SalePrice\n","640101de":"The target variable is right skewed. As (linear) models love normally distributed data , we need to transform this variable and make it more normally distributed.","bf29245d":"## Relationship with categorical features","7b5dfcd8":" ### Similarly for GrLivArea & TotalBsmtSF","4efaa3ee":"Before analyzing relation with other features lets explore the other features and corelation wth target varable","17e3462b":"## Analyzing the Target Variable i.e SalePrice","01367689":"visualize corelation with one another"}}