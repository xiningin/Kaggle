{"cell_type":{"4e7c0383":"code","0ff2e1ea":"code","ed93d297":"code","fc602290":"code","62e20df1":"code","a146590e":"code","58cacb14":"code","157f3d30":"code","6f815c44":"code","fd0db39f":"code","38d2365a":"code","b8a001e0":"code","a6e636b1":"code","1886e957":"code","a96e0eab":"code","42990fbd":"code","b4fc8948":"code","9c38e785":"code","49745f7a":"code","bfea649f":"code","4d6a0e9d":"code","151eb599":"code","37768a3f":"code","809f9e12":"code","3350e9a2":"code","2d7cf23a":"code","b9b5a2fd":"code","d5b02ded":"code","d9eb5da0":"code","f923a323":"code","c4f4c79a":"code","25e6fb27":"code","7008f55c":"code","c7707ec3":"code","a96f2377":"code","b0e93956":"code","421a4ac5":"code","3433fdf4":"code","cd905447":"code","98fbae62":"code","7f34cd91":"code","4774aa33":"code","0531b23e":"code","e5a09b98":"code","97430f21":"code","98c495d6":"code","11947e88":"code","b4459b14":"code","f6529682":"markdown","6cacf77f":"markdown","77c44e8f":"markdown","7dd21f4e":"markdown"},"source":{"4e7c0383":"\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n","0ff2e1ea":"#importing the libraries needed for visualization\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n%matplotlib inline\nimport matplotlib.patches as mpatches\nfrom matplotlib import animation, rc","ed93d297":"plt.style.use('fivethirtyeight')","fc602290":"import plotly.offline as py\npy.init_notebook_mode(connected=True)\nimport plotly.graph_objs as go\nimport plotly.tools as tls\nimport folium\nimport folium.plugins\nfrom mpl_toolkits.basemap import Basemap\nimport geopandas as gpd","62e20df1":"!pip install -q scipy","a146590e":"import io\nimport base64\nimport codecs\nimport warnings\nwarnings.filterwarnings('ignore')\nfrom IPython.display import HTML, display\n","58cacb14":"df = pd.read_csv('\/kaggle\/input\/gtd\/globalterrorismdb_0718dist.csv',encoding='ISO-8859-1')","157f3d30":"df.head(10)","6f815c44":"df.shape","fd0db39f":"df.describe()","38d2365a":"df.columns","b8a001e0":"df['casualties']=df['nkill']+df['nwound']","a6e636b1":"df['country_txt'].value_counts()","1886e957":"df['region_txt'].value_counts()","a96e0eab":"df['gname'].value_counts()","42990fbd":"df['city'].value_counts()","b4fc8948":"df['attacktype1_txt'].value_counts()","9c38e785":"df['targtype1_txt'].value_counts()","49745f7a":"df['targsubtype1_txt'].value_counts()","bfea649f":"print('Country with Highest Terrorist Attacks:',df['country_txt'].value_counts().index[0])\nprint('Regions with Highest Terrorist Attacks:',df['region_txt'].value_counts().index[0])\nprint('Maximum people killed in an attack are:',df['nkill'].max(),'that took place in',df.loc[df['nkill'].idxmax()].country_txt)","4d6a0e9d":"df['iyear'].value_counts()","151eb599":"df['natlty1_txt'].value_counts()","37768a3f":"print(\"Nationality of the maximally targetted group is:\", df['natlty1_txt'].value_counts().index[0])","809f9e12":"plt.subplots(figsize=(15,8))\nsns.countplot('iyear',data=df,palette='RdYlGn_r',edgecolor=sns.color_palette('dark',7))\nplt.xticks(rotation=90)\nplt.xlabel('Year of attack')\nplt.title('Number Of Terrorist Activities Each Year')\nplt.show()","3350e9a2":"plt.subplots(figsize=(15,4))\nsns.countplot('attacktype1_txt',data=df,palette='inferno',order=df['attacktype1_txt'].value_counts().index)\nplt.xticks(rotation=90)\nplt.xlabel('Attack Type')\nplt.title('Attacking Methods by Terrorists')\nplt.show()","2d7cf23a":"plt.subplots(figsize=(15,5))\nsns.countplot('targtype1_txt',data=df,palette='inferno',order=df['targtype1_txt'].value_counts().index)\nplt.xticks(rotation=90)\nplt.xlabel('Target Type')\nplt.title('Target by Terrorists')\nplt.show()","b9b5a2fd":"plt.subplots(figsize=(20,5))\nsns.countplot('targsubtype1_txt',data=df,palette='inferno',order=df['targsubtype1_txt'].value_counts().index)\nplt.xticks(rotation=90)\nplt.xlabel('Sub Target Type')\nplt.title('Sub Targets by Terrorists')\nplt.show()","d5b02ded":"print(\"The top sub targets of terrorists are:\", df['targsubtype1_txt'].value_counts().index[:5])","d9eb5da0":"plt.subplots(figsize=(15,5))\nsns.countplot('region_txt',data=df,palette='inferno',order=df['region_txt'].value_counts().index)\nplt.xticks(rotation=90)\nplt.xlabel('Regions')\nplt.title('Number Of Terrorist Activities By Region')\nplt.show()","f923a323":"plt.subplots(figsize=(15,5))\nsns.countplot('country_txt',data=df,palette='inferno',order=df['country_txt'].value_counts()[:15].index)\nplt.xticks(rotation=90)\nplt.xlabel('Countries')\nplt.title('Number Of Terrorist Activities By Countries')\nplt.show()","c4f4c79a":"df_region=pd.crosstab(df.iyear,df.region_txt)\ndf_region.plot(color=sns.color_palette('Set2',12))\nfig=plt.gcf()\nfig.set_size_inches(13,6)\nplt.show()","25e6fb27":"df_region=pd.crosstab(df.iyear,df.targtype1_txt)\ndf_region.plot(color=sns.color_palette('Set2',12))\nfig=plt.gcf()\nfig.set_size_inches(13,6)\nplt.show()","7008f55c":"df['casualties'].sum()","c7707ec3":"df['nkill'].sum()","a96f2377":"df['nwound'].sum()","b0e93956":"df1=df.groupby('region_txt')['casualties'].sum()\ndf2=df1.to_frame()\ndf2.rename(columns = {\"\" : \"Casualties\"}, inplace = True)\ndf2.insert(1,'Year',df.iyear,True)\ndf2.reset_index()\n","421a4ac5":"df.groupby(['region_txt', 'iyear'])['casualties'].count()","3433fdf4":"plt.subplots(figsize=(18,8))\ndf.groupby(['region_txt', 'iyear']).count()['casualties'].plot()\n#sns.countplot('country_txt',data=df,palette='inferno',order=df['country_txt'].value_counts()[:15].index)\nplt.xticks(rotation=90)\n#plt.xlabel('Countries')\nplt.ylabel(\"Casualties\")\n#plt.title('Number Of Terrorist Activities By Countries')\n#plt.show()","cd905447":"\ndf.groupby(['region_txt', 'iyear']).count()['casualties'].unstack('region_txt').plot(figsize=(18,8))\nplt.xticks(rotation=90)\n\nplt.ylabel(\"Casualties\")","98fbae62":"d=df.groupby(['region_txt', 'iyear'])['casualties'].sum()\nd","7f34cd91":"d=df.groupby(['iyear','region_txt'])['nkill'].sum()\nplot_df = d.unstack('region_txt').loc[:]\nplot_df.index = pd.PeriodIndex(plot_df.index.tolist(),freq='A')\nplot_df.plot(figsize=(15,8),color=sns.color_palette('Set2',12))\nplt.xlabel(\"Year\")\nplt.ylabel(\"Killed\")\n#ax.show()","4774aa33":"d=df.groupby(['iyear','region_txt'])['nwound'].sum()\nplot_df = d.unstack('region_txt').loc[:]\nplot_df.index = pd.PeriodIndex(plot_df.index.tolist(),freq='A')\nplot_df.plot(figsize=(15,8),color=sns.color_palette('Set2',12))\nplt.xlabel(\"Year\")\nplt.ylabel(\"Wounded\")","0531b23e":"d=df.groupby(['iyear','region_txt'])['casualties'].sum()\nplot_df = d.unstack('region_txt').loc[:]\nplot_df.index = pd.PeriodIndex(plot_df.index.tolist(),freq='A')\nplot_df.plot(figsize=(15,8),color=sns.color_palette('Set2',12))\nplt.xlabel(\"Year\")\nplt.ylabel(\"Casualties\")","e5a09b98":"count=df['country_txt'].value_counts()[:15].to_frame()\ncount.columns=['Attacks']\ndata=df.groupby('country_txt')['nkill'].sum().to_frame()\ncount.merge(data,left_index=True,right_index=True,how='left').plot.bar(width=0.9)\nfig=plt.gcf()\nfig.set_size_inches(18,6)\nplt.show()","97430f21":"groups=df[df['gname'].isin(df['gname'].value_counts()[:14].index)]\nm = Basemap(projection='mill',llcrnrlat=-80,urcrnrlat=80, llcrnrlon=-180,urcrnrlon=180,lat_ts=20,resolution='c',lat_0=True,lat_1=True)\nm.drawcoastlines()\nm.drawcountries()\nm.fillcontinents(lake_color='aqua')\nm.drawmapboundary(fill_color='aqua')\nfig=plt.gcf()\nfig.set_size_inches(22,10)\ncolors=['r','g','b','y','#800000','#ff1100','#8202fa','#20fad9','#ff5733','#fa02c6',\"#f99504\",'#b3b6b7','#8e44ad','#1a2b3c']\ngroup=list(groups['gname'].unique())\ndef group_point(group,color,label):\n    lat_group=list(groups[groups['gname']==group].latitude)\n    long_group=list(groups[groups['gname']==group].longitude)\n    x_group,y_group=m(long_group,lat_group)\n    m.plot(x_group,y_group,'go',markersize=3,color=j,label=i)\nfor i,j in zip(group,colors):\n    group_point(i,j,i)\nlegend=plt.legend(loc='lower left',frameon=True,prop={'size':10})\nframe=legend.get_frame()\nframe.set_facecolor('white')\nplt.title('Terrorist Groups')\nplt.show()","98c495d6":"groups=df[df['region_txt'].isin(df['region_txt'].value_counts()[:14].index)]\nm = Basemap(projection='mill',llcrnrlat=-80,urcrnrlat=80, llcrnrlon=-180,urcrnrlon=180,lat_ts=20,resolution='c',lat_0=True,lat_1=True)\nm.drawcoastlines()\nm.drawcountries()\nm.fillcontinents(lake_color='black')\nm.drawmapboundary(fill_color='white')\nfig=plt.gcf()\nfig.set_size_inches(22,10)\ncolors=['r','g','b','y','#800000','#ff1100','#8202fa','#20fad9','#ff5733','#fa02c6',\"#f99504\",'#b3b6b7','#8e44ad','#1a2b3c']\ngroup=list(groups['region_txt'].unique())\ndef group_point(group,color,label):\n    lat_group=list(groups[groups['region_txt']==group].latitude)\n    long_group=list(groups[groups['region_txt']==group].longitude)\n    x_group,y_group=m(long_group,lat_group)\n    m.plot(x_group,y_group,'go',markersize=3,color=j,label=i)\nfor i,j in zip(group,colors):\n    group_point(i,j,i)\nlegend=plt.legend(loc='lower left',frameon=True,prop={'size':14})\nframe=legend.get_frame()\nframe.set_facecolor('white')\nplt.title('Target areas of terrorist attacks')\nplt.show()","11947e88":"groups=df[df['country_txt'].isin(df['country_txt'].value_counts()[:14].index)]\nm = Basemap(projection='mill',llcrnrlat=-80,urcrnrlat=80, llcrnrlon=-180,urcrnrlon=180,lat_ts=20,resolution='c',lat_0=True,lat_1=True)\nm.drawcoastlines()\nm.drawcountries()\nm.fillcontinents(lake_color='black')\nm.drawmapboundary(fill_color='white')\nfig=plt.gcf()\nfig.set_size_inches(22,10)\ncolors=['r','g','b','y','#800000','#ff1100','#8202fa','#20fad9','#ff5733','#fa02c6',\"#f99504\",'#b3b6b7','#8e44ad','#1a2b3c']\ngroup=list(groups['country_txt'].unique())\ndef group_point(group,color,label):\n    lat_group=list(groups[groups['country_txt']==group].latitude)\n    long_group=list(groups[groups['country_txt']==group].longitude)\n    x_group,y_group=m(long_group,lat_group)\n    m.plot(x_group,y_group,'go',markersize=3,color=j,label=i)\nfor i,j in zip(group,colors):\n    group_point(i,j,i)\nlegend=plt.legend(loc='lower left',frameon=True,prop={'size':16})\nframe=legend.get_frame()\nframe.set_facecolor('white')\nplt.title('Target countries of terrorist attacks')\nplt.show()","b4459b14":"fig = plt.figure(figsize = (10,6))\ndef animate(Year):\n    ax = plt.axes()\n    ax.clear()\n    ax.set_title('Animation Of Terrorist Activities'+'\\n'+'Year:' +str(Year))\n    m6 = Basemap(projection='mill',llcrnrlat=-80,urcrnrlat=80, llcrnrlon=-180,urcrnrlon=180,lat_ts=20,resolution='c')\n    lat6=list(df[df['iyear']==Year].latitude)\n    long6=list(df[df['iyear']==Year].longitude)\n    x6,y6=m6(long6,lat6)\n    m6.scatter(x6, y6,s=[(kill+wound)*0.1 for kill,wound in zip(df[df['iyear']==Year].nkill,df[df['iyear']==Year].nwound)],color = 'r')\n    m6.drawcoastlines()\n    m6.drawcountries()\n    m6.fillcontinents(zorder = 1,alpha=0.4)\n    m6.drawmapboundary()\nani = animation.FuncAnimation(fig,animate,list(df.iyear.unique()), interval = 1500)    \nani.save('animation.gif', writer='imagemagick', fps=1)\nplt.close(1)\nfilename = 'animation.gif'\nvideo = io.open(filename, 'r+b').read()\nencoded = base64.b64encode(video)\nHTML(data='''<img src=\"data:image\/gif;base64,{0}\" type=\"gif\" \/>'''.format(encoded.decode('ascii')))","f6529682":"**Statistics about the data**","6cacf77f":"Reading the data. ","77c44e8f":"**Plotting graphs, barcharts to understand it better**","7dd21f4e":"Please upvote if you find this helpful. Thank you. "}}