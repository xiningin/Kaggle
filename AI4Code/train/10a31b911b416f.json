{"cell_type":{"521e5dd5":"code","3925b586":"code","0a60f269":"code","c07edb3d":"code","11450b25":"code","228f71fa":"code","a8e1ec33":"code","3232556f":"code","edc850f7":"code","cfe26a20":"code","00a4be00":"code","6ab1adb6":"code","d7d93bf4":"code","d830cd5a":"code","f0df5a43":"code","43199ebc":"code","bd13aee5":"code","af4ed121":"code","7bcd5b7e":"code","96bf8f7f":"code","c1106e4a":"code","f47b3801":"code","e6d5eb7b":"code","f5770046":"code","653e8164":"code","bde67d1d":"code","d9fd30e8":"code","466ef972":"code","0658d92c":"code","346011ef":"code","a0c0b947":"code","2a087ca8":"code","98c79bc1":"code","7f913d5b":"code","263d7906":"code","c6c934b7":"markdown","c9f38a9a":"markdown","f4c48499":"markdown","a38fbd46":"markdown","f57264e4":"markdown","76ba7618":"markdown","7cbe2035":"markdown","ad2b60ef":"markdown","99efaed1":"markdown","61ddc324":"markdown","6450b9f5":"markdown","c67dc245":"markdown","4d209087":"markdown","63823e69":"markdown","401b50f7":"markdown","90dd679a":"markdown"},"source":{"521e5dd5":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","3925b586":"df = pd.read_csv('\/kaggle\/input\/genes-information\/genes_human_58347_used_in_sciPlex2_brief_info_by_mygene_package.csv')","0a60f269":"df_sort = df.sort_values(by=['count pubmed'], ascending=False)","c07edb3d":"words = list(df_sort['name'].str.lower().unique())","11450b25":"words = words[:1000]","228f71fa":"!pip install sentence_transformers","a8e1ec33":"from sentence_transformers import SentenceTransformer, util\nmodel = SentenceTransformer('dmis-lab\/biobert-base-cased-v1.2')","3232556f":"embeddings = model.encode(words, convert_to_tensor=True)","edc850f7":"#embeddings = model.encode(words, batch_size=1, convert_to_tensor=True)","cfe26a20":"X = embeddings.cpu()","00a4be00":"from sklearn.decomposition import PCA\nreducer = PCA(n_components=2)\nr = reducer.fit_transform(embeddings.cpu())","6ab1adb6":"import time\nt0 = time.time()\n\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\nfig = plt.figure(figsize = (25,10));  c = 0\nn_x_subplots = 2\n#plt.suptitle(str_data_inf, fontsize = 20)       \n\nc+=1; fig.add_subplot(1,n_x_subplots,c);\n\nfrom sklearn.decomposition import PCA\nreducer = PCA(n_components=2)\nr = reducer.fit_transform(X)\n\nsns.scatterplot(x=r[:,0],y=r[:,1])\nplt.title(str(reducer))\n\nmask = r[:,1] > 2\nprint( np.array(words)[mask] )\n\nmask = r[:,1] > 2\nprint( np.array(words)[mask] )\n\nc+=1; fig.add_subplot(1,n_x_subplots,c);\n\nimport umap\nreducer = umap.UMAP()# PCA(n_components=2)\nr = reducer.fit_transform(X )\n\nsns.scatterplot(x=r[:,0],y=r[:,1])\nplt.title(str(reducer))\n\n\nplt.show()\n\nprint('%.1f seconds passed'%(-t0 + time.time() ) )\n","d7d93bf4":"!pip install hdbscan --no-build-isolation --no-binary :all:","d830cd5a":"import hdbscan\n\nlabels_hdbscan = hdbscan.HDBSCAN(\nmin_samples=1,\nmin_cluster_size=2,\n).fit_predict(r)","f0df5a43":"clustered = (labels_hdbscan >= 0)\nfrom matplotlib.pyplot import figure\nfigure(figsize=(10, 10), dpi=80)\nplt.scatter(r[~clustered, 0],\n            r[~clustered, 1],\n            c=(0.5, 0.5, 0.5),\n            s=10,\n            alpha=0.5)\nplt.scatter(r[clustered, 0],\n            r[clustered, 1],\n            c=(labels_hdbscan[clustered]),\n            s=20,\n            cmap='Spectral')","43199ebc":"clustered_list = pd.DataFrame(np.column_stack([words, labels_hdbscan]), \n                               columns=['node', 'cluster'])","bd13aee5":"clustered_list['cluster'].value_counts()","af4ed121":"cosine_scores = util.pytorch_cos_sim(embeddings, embeddings)","7bcd5b7e":"pairs = []\nfor i in range(len(cosine_scores)-1):\n    for j in range(i+1, len(cosine_scores)):\n        pairs.append({'index': [i, j], 'score': cosine_scores[i][j]})","96bf8f7f":"comb = []\nfor pair in pairs:\n    i, j = pair['index']\n    if i != j:\n        comb.extend((words[i], words[j], float(cosine_scores[i][j])))","c1106e4a":"comb_3 = [tuple(comb[i:i+3]) for i in range(0, len(comb), 3)]","f47b3801":"len(comb_3)","e6d5eb7b":"comb_3_filtered = [t for t in comb_3 if 1 > t[2] > 0.9]","f5770046":"len(comb_3_filtered)","653e8164":"import igraph as ig","bde67d1d":"g = ig.Graph.TupleList(comb_3_filtered, directed = False, weights=True)","d9fd30e8":"g.vcount() , g.ecount()","466ef972":"nbrs = g.neighbors(\"tumor protein p53\", mode=\"out\")\ng.vs[nbrs][\"name\"]","0658d92c":"clusters = g.community_multilevel()","346011ef":"community_list = pd.DataFrame(np.column_stack([list({v['name']: v.index for v in list(g.vs)}), \n                                               clusters.membership]), \n                               columns=['node', 'community'])\n\ncommunity_list.community = community_list.community.astype(int)","a0c0b947":"def betweenness(g):\n    betweenness = g.betweenness() \n    df = pd.DataFrame.from_dict({\n        'node': list({v['name']: v.index for v in list(g.vs)}),\n        'betweenness': list(g.betweenness())\n    })\n    return df.sort_values('betweenness', ascending=False)","2a087ca8":"def eigenvector(g):\n    eigevector = g.evcent() \n    df = pd.DataFrame.from_dict({\n        'node': list({v['name']: v.index for v in list(g.vs)}),\n        'eigenvector': list(g.evcent())\n    })\n    return df.sort_values('eigenvector', ascending=False)","98c79bc1":"%%time\n\nfrom functools import reduce\n\ndfs = [community_list, betweenness(g), eigenvector(g)]  \ndf_sum = reduce(lambda left,right: pd.merge(left,right,on='node'), dfs)","7f913d5b":"df_sum = df_sum.sort_values(by=['eigenvector'], ascending=False)","263d7906":"df_sum.head(10)","c6c934b7":"\u0422\u0435\u043f\u0435\u0440\u044c \u0441\u043e\u0437\u0434\u0430\u0434\u0438\u043c \u043a\u043e\u0440\u0442\u0435\u0436\u0438 \u0432 \u0432\u0438\u0434\u0435 \u043f\u0435\u0440\u0435\u0447\u043d\u044f \u0438\u0437 \u043f\u043e\u043f\u0430\u0440\u043d\u043e\u0439 \u043a\u043e\u043c\u0431\u0438\u043d\u0430\u0446\u0438\u0438 \u0441\u043b\u043e\u0432 \u0438 \u043a\u043e\u044d\u0444\u0444\u0438\u0446\u0438\u0435\u043d\u0442\u0430 \u0441\u0445\u043e\u0434\u0441\u0442\u0432\u0430. \u0423\u0431\u0435\u0440\u0451\u043c \u043f\u0435\u0442\u043b\u0438, \u0442\u043e \u0435\u0441\u0442\u044c \u0441\u0432\u044f\u0437\u0438 \u043c\u0435\u0436\u0434\u0443 \u043e\u0434\u043d\u0438\u043c \u0438 \u0442\u0435\u043c \u0436\u0435 \u0441\u043b\u043e\u0432\u043e\u043c.","c9f38a9a":"\u0414\u043b\u044f \u0441\u043f\u0438\u0441\u043a\u0430 \u0432\u0435\u0440\u0448\u0438\u043d \u0431\u0435\u0440\u0451\u043c \u0442\u043e\u043f\u043e\u0432\u044b\u0435 5000 \u0433\u0435\u043d\u043e\u0432:","f4c48499":"\u0411\u0435\u0440\u0451\u043c \u0432 \u043a\u0430\u0447\u0435\u0441\u0442\u0432\u0435 \u043a\u0440\u0438\u0442\u0435\u0440\u0438\u044f \u043e\u0442\u0431\u043e\u0440\u0430 \u0433\u0435\u043d\u0430 \u0447\u0438\u0441\u043b\u043e \u0443\u043f\u043e\u043c\u0438\u043d\u0430\u043d\u0438\u0439 \u0432 PubMed \u0438 \u0443\u043f\u043e\u0440\u044f\u0434\u043e\u0447\u0438\u0432\u0430\u0435\u043c \u0441\u043f\u0438\u0441\u043e\u043a \u043f\u043e \u0443\u0431\u044b\u0432\u0430\u043d\u0438\u044e:","a38fbd46":"\u0413\u043e\u0442\u043e\u0432\u043e. \u041f\u0440\u0438\u044f\u0442\u043d\u043e\u0439 \u0440\u0430\u0431\u043e\u0442\u044b \u0441 \u0434\u0430\u043d\u043d\u044b\u043c\u0438!","f57264e4":"\u041f\u043e\u043b\u0443\u0447\u0438\u043c \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044e \u043e \u0441\u043e\u043e\u0431\u0449\u0435\u0441\u0442\u0432\u0430\u0445 \u0441 \u043f\u043e\u043c\u043e\u0449\u044c\u044e \u0430\u043b\u0433\u043e\u0440\u0438\u0442\u043c\u0430 \u043c\u043e\u0434\u0443\u043b\u044c\u043d\u043e\u0441\u0442\u0438 (Louvain).","76ba7618":"\u041c\u044b \u043c\u043e\u0436\u0435\u043c \u043f\u043e\u043b\u0443\u0447\u0438\u0442\u044c \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044e \u043e \u0441\u043e\u0441\u0435\u0434\u044f\u0445 \u0438\u043d\u0442\u0435\u0440\u0435\u0441\u0443\u044e\u0449\u0435\u0439 \u043d\u0430\u0441 \u0432\u0435\u0440\u0448\u0438\u043d\u044b.","7cbe2035":"\u0421\u043e\u0445\u0440\u0430\u043d\u044f\u0435\u043c \u0432\u0441\u044e \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044e \u0432 \u0434\u0430\u0442\u0430\u0444\u0440\u0435\u0439\u043c \u0438 \u0441\u043e\u0440\u0442\u0438\u0440\u0443\u0435\u043c \u043f\u043e \u043d\u0443\u0436\u043d\u043e\u043c\u0443 \u043d\u0430\u043c \u043f\u043e\u043a\u0430\u0437\u0430\u0442\u0435\u043b\u044e.","ad2b60ef":"\u0418 \u043f\u043e\u043b\u0443\u0447\u0438\u043c \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044e \u043e \u0441\u0442\u0435\u043f\u0435\u043d\u044f\u0445 \u0446\u0435\u043d\u0442\u0440\u0430\u043b\u044c\u043d\u043e\u0441\u0442\u0438 \u0432\u0435\u0440\u0448\u0438\u043d \u0432 \u0433\u0440\u0430\u0444\u0435. \u041d\u0430\u0441 \u0438\u043d\u0442\u0435\u0440\u0435\u0441\u0443\u044e\u0442 \u043f\u043e\u0441\u0440\u0435\u0434\u043d\u0438\u043a\u0438 (betweenness) \u0438 \u0438\u043d\u0444\u043b\u044e\u0435\u043d\u0441\u0435\u0440\u044b (eigenvector).","99efaed1":"EDA \u043f\u043e\u0437\u0432\u043e\u043b\u044f\u0435\u0442 \u0443\u0432\u0438\u0434\u0435\u0442\u044c \u043a\u043b\u0430\u0441\u0442\u0435\u0440\u044b \u0438 \u0443\u0432\u0438\u0434\u0435\u0442\u044c \u0441\u043f\u0435\u0446\u0438\u0444\u0438\u043a\u0443 \u0434\u0430\u043d\u043d\u044b\u0445 \u0435\u0449\u0451 \u0434\u043e \u043f\u043e\u0441\u0442\u0440\u043e\u0435\u043d\u0438\u044f \u0433\u0440\u0430\u0444\u0430.","61ddc324":"## \u041e \u0431\u043b\u043e\u043a\u043d\u043e\u0442\u0435\n\n\u0411\u043b\u043e\u043a\u043d\u043e\u0442 \u044f\u0432\u043b\u044f\u0435\u0442\u0441\u044f \u0442\u0435\u0445\u043d\u0438\u0447\u0435\u0441\u043a\u0438 \u0443\u0441\u043e\u0432\u0435\u0440\u0448\u0435\u043d\u0441\u0442\u0432\u043e\u0432\u0430\u043d\u043d\u043e\u0439 \u0432\u0435\u0440\u0441\u0438\u0435\u0439 [\u043f\u0440\u0435\u0434\u044b\u0434\u0443\u0449\u0435\u0433\u043e](https:\/\/www.kaggle.com\/visualcomments\/biology-on-graphs) \u0431\u043b\u043e\u043a\u043d\u043e\u0442\u0430. \u0422\u0430\u043a \u0436\u0435, \u043a\u0430\u043a \u0438 \u0440\u0430\u043d\u044c\u0448\u0435, \u043d\u0430\u0448\u0435\u0439 \u0446\u0435\u043b\u044c\u044e \u044f\u0432\u043b\u044f\u0435\u0442\u0441\u044f \u0441\u0435\u043c\u0430\u043d\u0442\u0438\u0447\u0435\u0441\u043a\u0438\u0439 \u043f\u043e\u0438\u0441\u043a \u043f\u043e \u043d\u0443\u0436\u043d\u043e\u043c\u0443 \u043d\u0430\u043c \u0441\u043f\u0438\u0441\u043a\u0443 \u0441\u043b\u043e\u0432 \u0441 \u043f\u043e\u043c\u043e\u0449\u044c\u044e \u043f\u043e\u0441\u0442\u0440\u043e\u0435\u043d\u043d\u043e\u0433\u043e \u043f\u043e\u0432\u0435\u0440\u0445 \u044d\u043c\u0431\u0435\u0434\u0434\u0438\u043d\u0433\u043e\u0432 \u0433\u0440\u0430\u0444\u0430. \u0421 \u043f\u043e\u043c\u043e\u0449\u044c\u044e \u0433\u0440\u0430\u0444\u043e\u0432\u044b\u0445 \u0430\u043b\u0433\u043e\u0440\u0438\u0442\u043c\u043e\u0432 \u043c\u044b \u043c\u043e\u0436\u0435\u043c \u043e\u043f\u0440\u0435\u0434\u0435\u043b\u044f\u0442\u044c \u0441\u043e\u043e\u0431\u0449\u0435\u0441\u0442\u0432\u0430, \u0441\u0442\u0435\u043f\u0435\u043d\u0438 \u0446\u0435\u043d\u0442\u0440\u0430\u043b\u044c\u043d\u043e\u0441\u0442\u0438 \u0432\u0435\u0440\u0448\u0438\u043d \u0438 \u0442\u0430\u043a \u0434\u0430\u043b\u0435\u0435.\n\n### \u0427\u0442\u043e \u043d\u043e\u0432\u043e\u0433\u043e:\n\n\u041f\u043e\u0441\u043b\u0435 \u0442\u043e\u0433\u043e, \u043a\u0430\u043a \u043d\u0430\u0448 \u043f\u0440\u0435\u0434\u044b\u0434\u0443\u0449\u0438\u0439 [\u0434\u0430\u0442\u0430\u0441\u0435\u0442](https:\/\/www.kaggle.com\/visualcomments\/biology-on-graphs-w2v) \u043f\u043e\u0442\u0435\u0440\u043f\u0435\u043b [\u043a\u0440\u0443\u0448\u0435\u043d\u0438\u0435](https:\/\/www.kaggle.com\/general\/278769), \u043c\u044b \u0437\u0430\u0434\u0443\u043c\u0430\u043b\u0438\u0441\u044c \u043d\u0430\u0434 \u0442\u0435\u043c, \u0447\u0442\u043e\u0431\u044b \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c \u043f\u0443\u0431\u043b\u0438\u0447\u043d\u043e \u0434\u043e\u0441\u0442\u0443\u043f\u043d\u044b\u0435 \u043f\u0440\u0435\u0434\u043e\u0431\u0443\u0447\u0435\u043d\u043d\u044b\u0435 \u0442\u0435\u043c\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u0438\u0435 \u043c\u043e\u0434\u0435\u043b\u0438. \u0422\u0430\u043a \u043e\u0442 word2vec-\u043c\u043e\u0434\u0435\u043b\u0435\u0439 \u043c\u044b \u043f\u0435\u0440\u0435\u0448\u043b\u0438 \u043d\u0430 \u0442\u0440\u0430\u043d\u0441\u0444\u043e\u0440\u043c\u0435\u0440\u044b, \u0442\u043e \u0432\u044b\u0431\u0440\u0430\u043b\u0438 [BioBERT](https:\/\/github.com\/dmis-lab\/biobert) \u0434\u043b\u044f \u043f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u044f \u044d\u043c\u0431\u0435\u0434\u0434\u0438\u043d\u0433\u043e\u0432 \u0438\u043d\u0442\u0435\u0440\u0435\u0441\u0443\u044e\u0449\u0438\u0445 \u043d\u0430\u0441 \u0441\u043b\u043e\u0432 (\u043d\u0430\u0437\u0432\u0430\u043d\u0438\u0439 \u0433\u0435\u043d\u043e\u0432).\n\n\u0418\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0435 [sentence-transformers](https:\/\/www.sbert.net\/) \u043e\u0431\u043b\u0430\u0434\u0430\u0435\u0442 \u043f\u0440\u0435\u0438\u043c\u0443\u0449\u0435\u0441\u0442\u0432\u043e\u043c \u043f\u0435\u0440\u0435\u0434 word2vec, \u0442\u0430\u043a \u043a\u0430\u043a \u0441\u0435\u043c\u0430\u043d\u0442\u0438\u0447\u0435\u0441\u043a\u0438\u0439 \u043f\u043e\u0438\u0441\u043a \u043c\u043e\u0436\u0435\u0442 \u043f\u0440\u043e\u0432\u043e\u0434\u0438\u0442\u044c\u0441\u044f \u043f\u043e \u043f\u0440\u0435\u0434\u043b\u043e\u0436\u0435\u043d\u0438\u044f\u043c \u0438 \u0441\u043b\u043e\u0432\u043e\u0441\u043e\u0447\u0435\u0442\u0430\u043d\u0438\u044f\u043c, \u0447\u0442\u043e \u0437\u043d\u0430\u0447\u0438\u0442\u0435\u043b\u044c\u043d\u043e \u0443\u043b\u0443\u0447\u0448\u0430\u0435\u0442 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u044b \u043f\u043e\u0438\u0441\u043a\u0430.\n\n\u0412\u043c\u0435\u0441\u0442\u043e NetworkX \u0432 \u0431\u043b\u043e\u043a\u043d\u043e\u0442\u0435 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u0442\u0441\u044f python-igraph, \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u043d\u0430\u043f\u0438\u0441\u0430\u043d \u043d\u0430 C++ \u0432 Python-\u043e\u0431\u0451\u0440\u0442\u043a\u0435 \u0438 \u0433\u043e\u0440\u0430\u0437\u0434\u043e \u0431\u044b\u0441\u0442\u0440\u0435\u0435 \u0432\u044b\u0447\u0438\u0441\u043b\u044f\u0435\u0442 \u043d\u0443\u0436\u043d\u044b\u0435 \u043d\u0430\u043c \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u044b \u0433\u0440\u0430\u0444\u0430.\n\n### \u041d\u0430\u0434 \u0431\u043b\u043e\u043a\u043d\u043e\u0442\u043e\u043c \u0440\u0430\u0431\u043e\u0442\u0430\u043b\u0438: \n\n[\u0410\u043b\u0435\u043a\u0441\u0430\u043d\u0434\u0440](https:\/\/www.kaggle.com\/alexandervc)\n\n[\u0410\u043d\u0442\u043e\u043d](https:\/\/www.kaggle.com\/visualcomments)\n\n","6450b9f5":"\u041f\u043e\u043b\u0443\u0447\u0438\u043c \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044e \u043e \u043a\u043e\u0441\u0438\u043d\u0443\u0441\u043d\u043e\u043c \u0441\u0445\u043e\u0434\u0441\u0442\u0432\u0435 \u0441\u043b\u043e\u0432.","c67dc245":"\u041c\u044b \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u043c [\u0434\u0430\u0442\u0430\u0441\u0435\u0442](https:\/\/www.kaggle.com\/alexandervc\/genes-information) \u0441 \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u0435\u0439 \u043e \u0433\u0435\u043d\u0430\u0445, \u0438\u043c\u0435\u043d\u0430 \u043a\u043e\u0442\u043e\u0440\u044b\u0445 \u0432 \u043d\u0430\u0448\u0435\u043c \u0441\u043b\u0443\u0447\u0430\u0435 \u0431\u0443\u0434\u0443\u0442 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c\u0441\u044f \u0432 \u043a\u0430\u0447\u0435\u0441\u0442\u0432\u0435 \u0432\u0435\u0440\u0448\u0438\u043d \u0433\u0440\u0430\u0444\u0430.","4d209087":"\u041f\u043e\u043b\u0443\u0447\u0430\u0435\u043c \u044d\u043c\u0431\u0435\u0434\u0434\u0438\u043d\u0433\u0438 \u0441\u043b\u043e\u0432 \u0438\u0437 BioBERT c \u043f\u043e\u043c\u043e\u0449\u044c\u044e sentence_transformers:","63823e69":"\u0418\u043d\u043e\u0433\u0434\u0430 \u043d\u0430 \u0431\u043e\u043b\u044c\u0448\u0438\u0445 \u0441\u043f\u0438\u0441\u043a\u0430\u0445 \u043f\u0440\u043e\u0438\u0441\u0445\u043e\u0434\u0438\u0442 \u043f\u0435\u0440\u0435\u0440\u0430\u0441\u0445\u043e\u0434 GPU. \u0412 \u0442\u0430\u043a\u043e\u043c \u0441\u043b\u0443\u0447\u0430\u0435 \u043c\u043e\u0436\u043d\u043e \u043c\u0438\u043d\u0438\u043c\u0438\u0437\u0438\u0440\u043e\u0432\u0430\u0442\u044c \u0431\u0430\u0442\u0447\u0438.","401b50f7":"\u0422\u0435\u043f\u0435\u0440\u044c \u043f\u043e\u0441\u0442\u0440\u043e\u0438\u043c \u0433\u0440\u0430\u0444.","90dd679a":"\u043c\u044b \u043c\u043e\u0436\u0435\u043c \u0437\u0430\u0434\u0430\u0442\u044c \u043d\u0443\u0436\u043d\u043e\u0435 \u043d\u0430\u043c \u043f\u043e\u0440\u043e\u0433\u043e\u0432\u043e\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435 \u0441\u0445\u043e\u0434\u0441\u0442\u0432\u0430 \u043c\u0435\u0436\u0434\u0443 \u0441\u043b\u043e\u0432\u0430\u043c\u0438 \u0434\u043b\u044f \u0442\u043e\u0433\u043e, \u0447\u0442\u043e\u0431\u044b \u043d\u0430 \u0435\u0433\u043e \u043e\u0441\u043d\u043e\u0432\u0435 \u0433\u0435\u043d\u0435\u0440\u0438\u0440\u043e\u0432\u0430\u0442\u044c \u0432\u0435\u0440\u0448\u0438\u043d\u044b \u043c\u0435\u0436\u0434\u0443 \u0440\u0451\u0431\u0440\u0430\u043c\u0438 \u0432 \u0433\u0440\u0430\u0444\u0435."}}