{"cell_type":{"1a336d1b":"code","6b858e08":"code","ca1bd6e5":"code","060f91c2":"code","a2530716":"code","b3079bf2":"code","9d2c591d":"markdown","cb26ea5f":"markdown","5b19c6f4":"markdown","08d82d5d":"markdown"},"source":{"1a336d1b":"%pylab inline\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport os\nprint(os.listdir(\"..\/input\"))","6b858e08":"import h5py \nfrom functools import reduce\ndef hdf5(path, data_key = \"data\", target_key = \"target\", flatten = True):\n    \"\"\"\n        loads data from hdf5: \n        - hdf5 should have 'train' and 'test' groups \n        - each group should have 'data' and 'target' dataset or spcify the key\n        - flatten means to flatten images N * (C * H * W) as N * D array\n    \"\"\"\n    with h5py.File(path, 'r') as hf:\n        train = hf.get('train')\n        X_tr = train.get(data_key)[:]\n        y_tr = train.get(target_key)[:]\n        test = hf.get('test')\n        X_te = test.get(data_key)[:]\n        y_te = test.get(target_key)[:]\n        if flatten:\n            X_tr = X_tr.reshape(X_tr.shape[0], reduce(lambda a, b: a * b, X_tr.shape[1:]))\n            X_te = X_te.reshape(X_te.shape[0], reduce(lambda a, b: a * b, X_te.shape[1:]))\n    return X_tr, y_tr, X_te, y_te","ca1bd6e5":"X_tr, y_tr, X_te, y_te = hdf5(\"..\/input\/usps.h5\")\nX_tr.shape, X_te.shape","060f91c2":"num_samples = 10\nnum_classes = len(set(y_tr))\n\nclasses = set(y_tr)\nnum_classes = len(classes)\nfig, ax = plt.subplots(num_samples, num_classes, sharex = True, sharey = True, figsize=(num_classes, num_samples))\n\nfor label in range(num_classes):\n    class_idxs = np.where(y_tr == label)\n    for i, idx in enumerate(np.random.randint(0, class_idxs[0].shape[0], num_samples)):\n        ax[i, label].imshow(X_tr[class_idxs[0][idx]].reshape([16, 16]), 'gray')\n        ax[i, label].set_axis_off()","a2530716":"# from sklearn.svm import LinearSVC\n# lsvm = LinearSVC(C = 0.1)\n# lsvm.fit(X_tr, y_tr)\nfrom sklearn.neighbors import KNeighborsClassifier\nknn_clf = KNeighborsClassifier(n_jobs=-1)\nknn_clf.fit(X=X_tr, y=y_tr)","b3079bf2":"preds = knn_clf.predict(X_te)\naccuracy = sum((preds == y_te))\/len(y_te)\nprint(\"Accuracy of KNN, \", accuracy)\n","9d2c591d":"## Function to read USPS dataset","cb26ea5f":"## Building a classifier\nThe following example code demonstrate the training of Support Vector Machine Classifer and computing the accuracy of trained model.","5b19c6f4":"## Data visualization","08d82d5d":"# Getting started with USPS dataset\nThis tutorial demonstrates how to load USPS dataset, visualize and build a linear SVM classifier on it."}}