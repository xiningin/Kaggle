{"cell_type":{"14003b45":"code","23346227":"code","c5b15f37":"code","4ac4e625":"code","faabc881":"code","58dd5f29":"code","dc503aa6":"code","8aa0d158":"code","c75b2234":"code","fcf8210e":"code","1340ad4c":"code","94a1d031":"code","0a292b0a":"code","77cefaf2":"code","bf186411":"code","1840b552":"code","bf102bc7":"code","460f31de":"code","c8eb1df8":"code","4f3832b7":"code","045577c2":"code","3deb5b28":"code","b5898fff":"code","8cb9341d":"code","21cdc735":"code","643c0e09":"code","43cc1326":"code","9d936d9a":"code","fadb81fc":"code","83e1ffa2":"code","550bd608":"code","9339a6ba":"code","56eca071":"code","7c97a681":"code","0eb33f3e":"code","256a1c71":"code","a5b3b258":"code","61a1b523":"code","c3d23231":"code","4e885685":"code","2afcb9c5":"code","5db6e45e":"code","e18865f3":"code","6aceb14b":"code","90ff9f0e":"code","4243eab0":"code","44151891":"code","f6e887b4":"code","4653ffe0":"code","7a5bb83f":"code","b12b7884":"code","854af3fe":"code","d9dc10bf":"code","5c962840":"code","0973ed67":"code","c204f1f2":"code","9836cf8e":"code","fafd42fe":"code","57f112cb":"code","ed81afa3":"code","4873f9e1":"code","dfceb0f9":"code","05780f0f":"code","0f899371":"code","62e23edc":"code","94331f8a":"code","b50f297f":"code","7811a592":"code","2e0079df":"code","0a87baba":"code","a1d5c812":"code","3222124d":"code","d6abcc53":"code","d7b4c257":"code","02bcb301":"code","05887329":"code","7c0b060c":"code","43fe9e96":"code","294a2c26":"code","ff554c1c":"markdown","1d79bda7":"markdown","73708885":"markdown","5af369a3":"markdown","34b9a50b":"markdown","32be7195":"markdown","d971c1bb":"markdown","d25cd11c":"markdown","e7a60902":"markdown","a68d3ce6":"markdown","b8824b49":"markdown","03cf72f5":"markdown","0f811c6f":"markdown","43cbbf79":"markdown","6386433d":"markdown","ede9f67b":"markdown","b96bf5e9":"markdown","f250410b":"markdown","20e5c840":"markdown","765c23c7":"markdown","c29d04a4":"markdown","6fd35a1d":"markdown","5834f7ee":"markdown","cec57c16":"markdown","8c99462f":"markdown","70f0f393":"markdown","204bf089":"markdown","1e0c511e":"markdown","19e3480e":"markdown","3e7eb065":"markdown","3339fb4e":"markdown"},"source":{"14003b45":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","23346227":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\n%matplotlib inline\nimport seaborn as sns \nfrom plotly import express as px\nimport cufflinks as cf\nimport plotly.graph_objects as go\n\nfrom plotly.offline import download_plotlyjs,init_notebook_mode,plot,iplot\ninit_notebook_mode(connected=True)\ncf.go_offline()","c5b15f37":"url = '..\/input\/bikedata\/bike data.csv'\ndf = pd.read_csv(url)","4ac4e625":"df.head()","faabc881":"df.describe()","58dd5f29":"df.info()","dc503aa6":"df.columns","8aa0d158":"corr=df.corr()\nplt.figure(figsize=(15,10))\nsns.heatmap(corr,annot=True)","c75b2234":"sns.jointplot('Profit','Revenue',data=df)","fcf8210e":"df_year = df.groupby('year',as_index=False).sum()","1340ad4c":"px.line(df_year,x='year',y='Profit',labels={'x':'Years','y':'Gross'},title='Gross By Years')","94a1d031":"year_cat = df[['year','Product Category']]\nyear_cat  = pd.get_dummies(year_cat).groupby('year',as_index=False).sum()\nyear_cat","0a292b0a":"year_cat.columns","77cefaf2":"fig = go.Figure()\nfig.add_trace(go.Scatter(x=year_cat.year,y=year_cat['Product Category_Accessories'],mode='lines',name='Accessories'))\nfig.add_trace(go.Scatter(x=year_cat.year,y=year_cat['Product Category_Bikes'],mode='lines',name='Bikes'))\nfig.add_trace(go.Scatter(x=year_cat.year,y=year_cat['Product Category_Clothing'],mode='lines',name='Clothing'))\n\n","bf186411":"df2 = df.loc[df['Product Category']=='Bikes']","1840b552":"tabl = pd.pivot_table(df2, values='Profit', index=['year'],\n                    columns=['Sub Category'], aggfunc=np.sum)\ntabl","bf102bc7":"fig = go.Figure()\nfig.add_trace(go.Scatter(y=tabl['Mountain Bikes'],mode='lines',name='Mountain Bikes',line=dict(color='royalblue')))\nfig.add_trace(go.Scatter(y=tabl['Road Bikes'],mode='lines',name='Road Bikes'))\nfig.add_trace(go.Scatter(y=tabl['Touring Bikes'],mode='lines',name='Touring Bikes'))","460f31de":"tab5 = pd.pivot_table(df2, values='Order Quantity', index=['year'],\n                    columns=['Sub Category'], aggfunc=np.sum)\ntab5","c8eb1df8":"fig = go.Figure()\nfig.add_trace(go.Scatter(y=tab5['Mountain Bikes'],mode='lines',name='Mountain Bikes',line=dict(color='royalblue')))\nfig.add_trace(go.Scatter(y=tab5['Road Bikes'],mode='lines',name='Road Bikes'))","4f3832b7":"table = pd.pivot_table(df, values='Profit', index=['year'],\n                    columns=['Product Category'], aggfunc=np.sum)\ntable","045577c2":"table.columns","3deb5b28":"fig = go.Figure()\nfig.add_trace(go.Scatter(y=table.Accessories,mode='lines',name='Accessories'))\nfig.add_trace(go.Scatter(y=table.Bikes,mode='lines',name='Bikes'))\nfig.add_trace(go.Scatter(y=table.Clothing,mode='lines',name='Clothing'))","b5898fff":"plt.figure(figsize=(10,5))\nsns.countplot(y=df['Customer Gender'],data=df)","8cb9341d":"plt.figure(figsize=(10,5))\nsns.countplot(y=df['Product Category'],data=df,hue=df['Customer Gender'],linewidth=5, palette=\"Set3\",edgecolor=sns.color_palette(\"dark\", 3))","21cdc735":"table2 = pd.pivot_table(df, values='Profit', index=['year'],\n                    columns=['Customer Gender'], aggfunc=np.sum)","643c0e09":"table2","43cc1326":"fig = go.Figure()\nfig.add_trace(go.Scatter(y=table2.F,mode='lines',name='Female'))\nfig.add_trace(go.Scatter(y=table2.M,mode='lines',name='Male',line=dict(color=\"#ffe476\")))","9d936d9a":"df2","fadb81fc":"#tab6 = pd.pivot_table(df2, values='Profit', index=['year',\"Customer Gender\"],\n                    #columns=['Sub Category'], aggfunc=np.sum)\ntab6=df2.groupby(['year',\"Customer Gender\"]).agg({'Order Quantity':'sum'})\ntab6.unstack(1)","83e1ffa2":"cont = pd.pivot_table(df, values='Profit', index=['year'],\n                    columns=['Country'], aggfunc=np.sum).reset_index()\ncont","550bd608":"fig = go.Figure()\nfig.add_trace(go.Scatter(y=cont.Australia,mode='lines',name='Australia',line=dict(color=\"#FFBF00\")))\nfig.add_trace(go.Scatter(y=cont.Canada,mode='lines',name='Canada',line=dict(color=\"#E32636\")))\nfig.add_trace(go.Scatter(y=cont.France,mode='lines',name='France',line=dict(color=\"#0048BA\")))\nfig.add_trace(go.Scatter(y=cont.Germany,mode='lines',name='Germany',line=dict(color=\"#7CB9E8\")))\nfig.add_trace(go.Scatter(y=cont['United Kingdom'],mode='lines',name='United Kingdom',line=dict(color=\"#F19CBB\")))\nfig.add_trace(go.Scatter(y=cont['United States'],mode='lines',name='USA',line=dict(color=\"#2200CC\")))\n","9339a6ba":"cont2 = pd.pivot_table(df, values='Revenue', index=['year','Country'],\n                    columns=[], aggfunc=np.sum).reset_index()\ncont2.info()","56eca071":"fig = px.choropleth(cont2, locations = cont2['Country'],\n                    color = cont2['Revenue'],locationmode='country names',hover_name = cont2['Revenue'], \n                    color_continuous_scale = px.colors.sequential.Inferno,\n                    animation_frame='year')\nfig.update_layout(title='Sales tracking',template='plotly_dark')\nfig.show()","7c97a681":"df['Date']=pd.to_datetime(df.Date)","0eb33f3e":"df_florish = pd.pivot_table(df, values='Profit', \n                     index=['Country'], \n                     columns='Date')\ndf_florish = df_florish.fillna(0)\ndf_florish.to_csv('florish.csv')","256a1c71":"from IPython.core.display import HTML\nHTML('''<div class=\"flourish-embed flourish-bar-chart-race\" data-src=\"visualisation\/4798895\" data-url=\"https:\/\/flo.uri.sh\/visualisation\/4798895\/embed\"><script src=\"https:\/\/public.flourish.studio\/resources\/embed.js\"><\/script><\/div>''')","a5b3b258":"aust_df = df.loc[df['Country']=='Australia']\naust_bike= df.loc[df['Product Category']=='Bikes']\naust_subbike = pd.pivot_table(aust_bike, values='Order Quantity', index=['year'],\n                    columns=['Sub Category'], aggfunc=np.sum)\naust_subbike","61a1b523":"aust_bike_gender = pd.pivot_table(aust_bike, values='Order Quantity', index=['year'],\n                    columns=['Customer Gender'], aggfunc=np.sum)\naust_bike_gender","c3d23231":"aust_bike_states = pd.pivot_table(aust_bike, values='Order Quantity', index=['year','State'],\n                    columns=[], aggfunc=np.sum).reset_index()\naust_bike_states","4e885685":"px.line(aust_bike_states, x=\"year\", y=\"Order Quantity\", color='State')\n","2afcb9c5":"usa = df.loc[df['Country']=='United States']\nusa_bike= df.loc[df['Product Category']=='Bikes']\nusa_bike_15_16=usa_bike.loc[df['year']>2014]\nusa_bike_state = pd.pivot_table(usa_bike_15_16, values='Order Quantity', index=['year','State'],\n                    columns=[], aggfunc=np.sum).reset_index()\nusa_bike_state['year'].unique()","5db6e45e":"usa_bike_gender = pd.pivot_table(usa_bike_15_16, values='Order Quantity', index=['year'],\n                    columns=['Customer Gender'], aggfunc=np.sum)\nusa_bike_gender","e18865f3":"px.line(usa_bike_state, x=\"year\", y=\"Order Quantity\", color='State')\n","6aceb14b":"female=df.loc[df['Customer Gender']==\"F\"]\nfemale_bikes =female.loc[df['Product Category']==\"Bikes\"]\nfemale_bikes['Product Category'].unique()","90ff9f0e":"female_country = pd.pivot_table(female_bikes, values='Order Quantity', index=['year','Country'],\n                    columns=[], aggfunc=np.sum).reset_index()\n","4243eab0":"px.line(female_country , x=\"year\", y=\"Order Quantity\", color='Country')","44151891":"male=df.loc[df['Customer Gender']==\"M\"]\nmale_bikes =male.loc[df['Product Category']==\"Bikes\"]\n#==\nmale_country = pd.pivot_table(male_bikes, values='Order Quantity', index=['year','Country'],\n                    columns=[], aggfunc=np.sum).reset_index()\n#== \npx.line(male_country , x=\"year\", y=\"Order Quantity\", color='Country')\n","f6e887b4":"bikes =df.loc[df['Product Category']==\"Bikes\"]\nbikf_15_16=usa_bike.loc[df['year']>2014]\ncust_age = pd.pivot_table(bikf_15_16, values='Order Quantity', index=['year','Age Group'],\n                    columns=[], aggfunc=np.sum).reset_index()\n#==\npx.line(cust_age , x=\"year\", y=\"Order Quantity\", color='Age Group')\n\n\n","4653ffe0":"! pip install --index-url https:\/\/test.pypi.org\/simple\/ PyARMViz","7a5bb83f":"from mlxtend.frequent_patterns import apriori\nfrom mlxtend.frequent_patterns import association_rules\nfrom mlxtend.preprocessing import TransactionEncoder\nimport squarify\nimport matplotlib\nfrom matplotlib import style\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom PyARMViz import PyARMViz\nfrom PyARMViz.Rule import generate_rule_from_dict\n\nsns.set()\nmatplotlib.rcParams['figure.figsize'] = (36, 36)\nstyle.use('ggplot')","b12b7884":"transactions = [a[1]['Sub Category'].tolist() for a in list(df.groupby(['Customer ID','Date']))]\nprint(len(transactions))","854af3fe":"te = TransactionEncoder()\nte_ary = te.fit(transactions).transform(transactions)\n","d9dc10bf":"transactions = pd.DataFrame(te_ary, columns=te.columns_)\n","5c962840":"pf = transactions.describe()\n","0973ed67":"f = pf.iloc[0]\n","c204f1f2":"f2 = pf.iloc[3]\nf = f-f2","9836cf8e":"a = f.tolist()\nb = list(f.index)\nitem = pd.DataFrame([[a[r],b[r]]for r in range(len(a))], columns=['Count','Item'])\nitem = item.sort_values(['Count'], ascending=False).head(50)\nitem","fafd42fe":"fig, ax = plt.subplots()\n\n# set color scheme\ncmap = matplotlib.cm.coolwarm\n\n# Get upper and lower boudns for the color mapping\nmini = min(item[\"Count\"])\nmaxi = max(item[\"Count\"])\n\n# Set out color mapping limits \nnorm = matplotlib.colors.Normalize(vmin=mini, vmax=maxi)\n\n# Obtain our raw colors \ncolors = [cmap(norm(value)) for value in item[\"Count\"]]\n\n# Create the TreeMap plot with Squarify\nsquarify.plot(sizes=item[\"Count\"], label=item[\"Item\"], alpha=0.8, color=colors)\nplt.axis('off')\nplt.title(\"Top 50 Frequent Basket Items\", fontsize=32)\nttl = ax.title\nttl.set_position([.5, 1.05])","57f112cb":"frequent_itemsets = apriori(transactions, min_support=0.001, use_colnames=True, max_len=5)\nfrequent_itemsets['length'] = frequent_itemsets['itemsets'].apply(lambda x: len(x))\nfrequent_itemsets.size","ed81afa3":"b = association_rules(frequent_itemsets, metric=\"lift\", min_threshold=0.001)\nb['uni'] = np.nan\nb['ant'] = np.nan\nb['con'] = np.nan\nb['tot'] = 75774","4873f9e1":"transactions = [a[1]['Sub Category'].tolist() for a in list(df.groupby(['Customer ID','Date']))]\n\ndef trans():\n    for t in transactions:\n        yield t\n    \ndef ant(x):\n    cnt = 0\n    for t in trans():\n        t = set(t)\n        if x.intersection(t) == x:\n            cnt = cnt + 1 \n    return cnt\n\nbb = b.values.tolist()  ","dfceb0f9":"rules_dict = []\nfor bbb in bb:\n    bbb[10] = ant(bbb[0])\n    bbb[11] = ant(bbb[1])\n    bbb[9] = ant(bbb[0].union(bbb[1]))\n    diction = {\n        'lhs': tuple(bbb[0]), \n        'rhs': tuple(bbb[1]),\n        'count_full': bbb[9],\n        'count_lhs': bbb[10],\n        'count_rhs': bbb[11],\n        'num_transactions': bbb[12]\n    }\n    rules_dict.append(diction)","05780f0f":"rules = []\nfor rd in rules_dict: \n    rules.append(generate_rule_from_dict(rd))","0f899371":"PyARMViz.generate_parallel_category_plot(rules)","62e23edc":"L = ['dayofweek', 'dayofyear', 'weekofyear', 'quarter']\ndf2 = df2.join(pd.concat((getattr(df['Date'].dt, i).rename(i) for i in L), axis=1))\ndf2.head()","94331f8a":"df2['dayofweek'] = df2['dayofweek'] + 1\ndf2['dayofweek'].value_counts()","b50f297f":"\n#=== \nax = df2.groupby('Date')['dayofweek'].unique().value_counts().sort_index().plot(kind='bar',figsize=(15,6))\nax.set_xlabel('Day',fontsize=15)\nax.set_ylabel('Number of Orders',fontsize=15)\nax.set_title('Number of orders for different Days',fontsize=15)\nax.set_xticklabels(('Mon','Tue','Wed','Thur','Fri','Sun'), rotation='horizontal', fontsize=15)\nplt.show()","7811a592":"ax = df2.groupby('Date')['quarter'].unique().value_counts().sort_index().plot(kind='bar',figsize=(15,6),color='lightblue')\nax.set_xlabel('Day',fontsize=15)\nax.set_ylabel('Number of Orders',fontsize=15)\nax.set_title('Number of orders for quarters',fontsize=15)\nplt.show()","2e0079df":"df = df.loc[df['Order Quantity'] > 0]\ndf = df[pd.notnull(df['Customer ID'])]","0a87baba":"orders_df = df.groupby(['Customer ID', 'Date']).agg({'Revenue': sum,'Date': max})\n#=== \norders_df.info()","a1d5c812":"def groupby_mean(x):\n    return x.mean()\n\ndef groupby_count(x):\n    return x.count()\n\ndef purchase_duration(x):\n    return (x.max() - x.min()).days\n\ndef avg_frequency(x):\n    '''returns the average days between sales'''\n    return (x.max() - x.min()).days\/x.count()\n\ngroupby_mean.__name__ = 'avg'\ngroupby_count.__name__ = 'count'\npurchase_duration.__name__ = 'purchase_duration'\navg_frequency.__name__ = 'purchase_frequency'\n\nsummary_df = orders_df.groupby('Customer ID').agg({'Revenue': [min, max, sum, groupby_mean, groupby_count]\n      ,'Date': [min, max, purchase_duration, avg_frequency]})\nsummary_df","3222124d":"summary_df.columns = ['_'.join(col).lower() for col in summary_df.columns]\n","d6abcc53":"summary_df.head()","d7b4c257":"# Now we create a distribution for the average times between sales\nax = summary_df['date_purchase_frequency'].hist(bins=20, color='skyblue', rwidth=0.7, figsize=(12,7))\n\nax.set_xlabel('avg. number of days between purchases')\nax.set_ylabel('count')\n\nplt.show()","02bcb301":"# Use 3M for 3 month\nclv_freq = '3M'\n\n# Groupby customer ID now, and group all invoices for 3 month cycles.\n# Aggregate on sum, mean and counts\ndata_df = orders_df.groupby(['Customer ID', pd.Grouper(key='Date', freq=clv_freq)]).agg({\n    'Revenue': [sum, groupby_mean, groupby_count],})\n\ndata_df.columns = ['_'.join(col).lower() for col in data_df.columns]\ndata_df = data_df.reset_index()\ndata_df.head()","05887329":"# Adding Recency 'M'\n\n# Get the M\ndate_month_map = {str(x)[:10]: 'M_%s' % (i+1) for i, x in enumerate(sorted(data_df.reset_index()['Date'].unique(), reverse=True))}\n\n# Create our M Column\ndata_df['M'] = data_df['Date'].apply(lambda x: date_month_map[str(x)[:10]])\ndata_df.head()","7c0b060c":"data_df['M'].unique()","43fe9e96":"best_customer = df.groupby('Customer ID',as_index=False).agg({'Order Quantity':'count'}).sort_values('Order Quantity',ascending=False)","294a2c26":"best_customer.head()","ff554c1c":"# Bikes sub category","1d79bda7":"# Category Orders by Year","73708885":"## Australia","5af369a3":"## Female","34b9a50b":"## USA","32be7195":"### Bikes is the most profitable category ","d971c1bb":"## female & Road,Mountain Bikes","d25cd11c":"### Most demanding category is Accessories , Bikes orders dicrease from 2015","e7a60902":"# Category Profits By years ","a68d3ce6":"### Mountain Bikes & Road Bikes Cause of Dicrease","b8824b49":"### low insights from 2015 to 2016 in profit ","03cf72f5":"### Australia & USA maybe the reason ","0f811c6f":"males bike orders line chart is good in united kingdom unlike females, and less dicrease in USA than females","43cbbf79":"# Profit \/ Sales","6386433d":"# Sales track","ede9f67b":"# Best Customer","b96bf5e9":"# Customer Analysis","f250410b":"## profit track for country ","20e5c840":"# Gender","765c23c7":"# MARKET BASKET ANALYSIS\n\n#### Market basket analysis is a process that looks for relationships among entities and objects that frequently appear together, such as the collection of items in a shopper\u2019s cart,This is helps alot Creating offers & Sort your sub categories in your stores  ","c29d04a4":"![](https:\/\/www.blogto.com\/upload\/2015\/04\/201144-petes-bikes-acc.jpg)","6fd35a1d":"## Transaction periods by mounth ","5834f7ee":"## Male ","cec57c16":"#### we can see here that's most customer order was \"14291\"","8c99462f":"# Best time to sell","70f0f393":"# Gross \/ Year","204bf089":"### Notice: Female starts to lose passion from 2015","1e0c511e":"# Correlations","19e3480e":"# Customer Age","3e7eb065":"# Conclusion\n\n#### Sales decline from 2015 to 2016\n#### Note that since the rise of accessories in 2013 there is an inverse relationship with bikes\n#### The decline in Sales in 2016 was due to lower demand for bikes\n#### especially mountain bikes and road bikes,There's a big drop in the U.S. and Australia \n#### Most of them are female, specifically in the 25-to 34-year-old age group","3339fb4e":"# Countries "}}