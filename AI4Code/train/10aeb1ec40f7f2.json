{"cell_type":{"67deeeec":"code","d7b88fb2":"code","66c13d5e":"code","be74cca4":"code","3dacf518":"code","b060ae72":"code","b1831d44":"code","89164cd6":"code","36838678":"code","6734e107":"code","6f51f19d":"code","7c9c4df8":"code","7919c7a0":"code","bbcd4872":"code","51a01f2b":"code","63ef2faf":"code","9759eefb":"code","ef34aa70":"code","40d6b8ec":"markdown","d6e839d2":"markdown","9ac83e13":"markdown","54c4c998":"markdown","35f87dd3":"markdown","784e9f39":"markdown","9fd09471":"markdown","6691ecd3":"markdown","005a08d8":"markdown","682f5804":"markdown","b74c6025":"markdown","e881f94b":"markdown","333b43ba":"markdown","ec04a1cf":"markdown","5559313b":"markdown","a2ab40fa":"markdown","038e3568":"markdown","3238187e":"markdown","40e56a22":"markdown"},"source":{"67deeeec":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\n#Libraries for Data Manipulation\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport datetime as dt #For datetime\n\n#Libraries for Data Visualization\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n%matplotlib inline\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","d7b88fb2":"#Importing Dataset \ncrypto_data=pd.read_csv(\"..\/input\/g-research-crypto-forecasting\/train.csv\")\ncrypto_data.head(10)","66c13d5e":"#Filtering the dataset into different assets\nbitcoin=crypto_data.query('Asset_ID==1')\nbitcoin.head()","be74cca4":"#Checking columns with missing data\nbitcoin.isnull().sum()","3dacf518":"#Dropping Null Values and assest id as it is irrelevant\nbitcoin=bitcoin.dropna()\nbitcoin=bitcoin.drop(columns=['Asset_ID'])","b060ae72":"#Changing timestamp into date\nbitcoin['timestamp'] = pd.to_datetime(bitcoin['timestamp'],unit='s')\nbitcoin.head()","b1831d44":"bitcoin.describe().T","89164cd6":"print(\"All Time High Price:\",max(bitcoin['High']))\nprint(\"Highest Number of Bitcoin units traded during the minute:\",max(bitcoin['Volume']))\nprint(\"The Highest Number of trades that took place:\",max(bitcoin['Count']))","36838678":"#Plotting VWAP values of Bitcoin\nplt.figure(figsize=(16,8))\nplt.fill_between(bitcoin['timestamp'], bitcoin['VWAP'])\nplt.show()","6734e107":"#Plotting Trading Volume of Bitcoin\nplt.figure(figsize=(16,8))\nplt.plot(bitcoin['timestamp'], bitcoin['Volume'])","6f51f19d":"#Plotting The number of trades that took place this minute.\nplt.figure(figsize=(16,8))\nplt.plot(bitcoin['timestamp'], bitcoin['Count'])","7c9c4df8":"#Calculating Correlation\ncorr=bitcoin.corr()\n\n#Plotting Correlation\nplt.figure(figsize=(12,12))\nsns.heatmap(corr,annot=True,cmap=\"GnBu\")","7919c7a0":"#creating new data for forcasting  with timestamp and closing price\nclose_price= bitcoin[['timestamp', 'Close']].copy()\nclose_price=close_price.set_index('timestamp')\n\nclose_price = close_price.groupby('timestamp').sum()\nclose_price = close_price.asfreq('D')\nclose_price.head()","bbcd4872":"#Plotting the chart\nclose_price.plot()","51a01f2b":"!pip install pycaret-ts-alpha -U","63ef2faf":"#Setting up for comparing the best model to use with the data.\nfrom pycaret.time_series import *\nexp_name = setup(data = close_price,  fh = 12)\nbest_model = compare_models()  # Note that we provided seasonal_period manually for annual data","9759eefb":"plot_model(best_model, plot = 'insample')","ef34aa70":"plot_model(estimator = best_model, plot = 'forecast', data_kwargs = {'fh' : 100})","40d6b8ec":"**Trading Volume as per Time**","d6e839d2":"**The Number of Trades that took place as per Time**","9ac83e13":"# Filtering Bitcoin from the dataset","54c4c998":"**Installing Pycaret**","35f87dd3":"# Explanatory Data Analysis","784e9f39":"**Dropping Null Values**","9fd09471":"**Checking for Null Values**","6691ecd3":"# **Bitcoin**  \n\n![image.png](attachment:5913f20d-b322-4315-bd6c-fc6c6f284db5.png)\n\nBitcoin (\u20bf) is a decentralized digital currency, without a central bank or single administrator, that can be sent from user to user on the peer-to-peer bitcoin network without the need for intermediaries. Transactions are verified by network nodes through cryptography and recorded in a public distributed ledger called a blockchain. The cryptocurrency was invented in 2008 by an unknown person or group of people using the name Satoshi Nakamoto.The currency began use in 2009 when its implementation was released as open-source software.(Source: Wikipedia)","005a08d8":"**Some Insights about Bitcoin**","682f5804":"**Statistics of Bitcoin**","b74c6025":"> **Thank you for Visiting, Please upvote if you liked this Notebook.**","e881f94b":"**Plotting the best model**","333b43ba":"**Changing Unix timestamp into Date and Time**","ec04a1cf":"# Using **PyCaret** for Forcasting Close price of Bitcoin","5559313b":"**VWAP as per Time**","a2ab40fa":"**Correlation**","038e3568":"**Setting up the model and comapring between different models**","3238187e":"**Importing Dataset**","40e56a22":"PyCaret is an open-source, low-code machine learning library in Python that automates machine learning workflows. It is an end-to-end machine learning and model management tool that speeds up the experiment cycle exponentially and makes you more productive.\n\nThe time series module is still in beta. The development team is adding new functionalities every day and doing weekly pip releases. Please ensure to create a separate python environment to avoid dependency conflicts with the main pycaret. The final release of this module will be merged with the main pycaret in the next major release.\n\n**[Website](https:\/\/pycaret.org\/)** **[Github](https:\/\/github.com\/pycaret\/pycaret)** **[LinkedIn](https:\/\/www.linkedin.com\/company\/pycaret\/)**"}}