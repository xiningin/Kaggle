{"cell_type":{"81a7e722":"code","83fce78a":"code","611a7892":"code","f70a510a":"code","fa33c5eb":"code","5a9d3f5c":"code","16f45dd6":"code","bae7f8e9":"code","07bb0747":"code","fc8665e5":"code","57c7221b":"code","61c1432a":"code","2173cc2d":"code","5426737f":"code","ba1e3c3b":"code","ffddfbcc":"code","788c0673":"code","20f14763":"code","284fdd36":"code","f17de4b4":"code","e55d2501":"code","d07deafa":"code","9e94b642":"code","49cbdeec":"code","c0d26717":"code","5a243e20":"code","c6a1024a":"code","e41f761b":"code","ea595295":"code","7f7445bf":"code","9054fc2b":"code","fd5ee808":"code","cc0c57ff":"code","59a46710":"code","ded72b73":"markdown","2e5f68f9":"markdown","0ab74523":"markdown","b835997e":"markdown","05a8d611":"markdown","fbb5315b":"markdown","5bcf8b24":"markdown","6d44b8fe":"markdown"},"source":{"81a7e722":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","83fce78a":"# Reading dataset file\ndataset = pd.read_csv('\/kaggle\/input\/netflix-prize-data\/combined_data_1.txt',header = None, names = ['Cust_Id', 'Rating'], usecols = [0,1])\n\n# Convert Ratings column to a float\ndataset['Rating'] = dataset['Rating'].astype(float)\ndataset.head()","611a7892":"#To print the datatype of columns\ndataset.dtypes","f70a510a":"#To inspect the shape of the datset\ndataset.shape","fa33c5eb":"#To print the head of dataset\ndataset.head()","5a9d3f5c":"#To find the distribution of different ratings in the datset\nd = dataset.groupby('Rating')['Rating'].agg(['count'])\nd =pd.DataFrame(d)\nd","16f45dd6":"movie_count = dataset['Rating'].isnull().sum()\nmovie_count","bae7f8e9":"# get customer count\ncust_count = dataset['Cust_Id'].nunique()-movie_count\n\ncust_count","07bb0747":"# get rating count\n\nrating_count = dataset['Cust_Id'].count() - movie_count\nrating_count","fc8665e5":"import matplotlib.pyplot as plt\nax = d.plot(kind = 'barh', legend = False, figsize = (15,10))\nplt.title(f'Total pool: {movie_count} Movies, {cust_count} customers, {rating_count} ratings given', fontsize=20)\nplt.axis('On')\n\nfor i in range(1,6):\n    ax.text(d.iloc[i-1][0]\/4, i-1,'Rating {}: {:.0f}%'.format(i, d.iloc[i-1][0]*100 \/ d.sum()[0]), color = 'white', weight = 'bold')","57c7221b":"dataset.head()","61c1432a":"# To count all the 'nan' values in the Ratings column in the 'ratings' dataset\ndf_nan = pd.DataFrame(pd.isnull(dataset.Rating),)\n\ndf_nan.head()","2173cc2d":"df = pd.isnull(dataset['Rating'])\ndf1 = pd.DataFrame(df)\ndf2 = df1[df1['Rating']==True]\ndf2","5426737f":"df2 = df2.reset_index()\ndf_nan = df2.copy()","ba1e3c3b":"df_nan","ffddfbcc":"#To create a numpy array containing movie ids according the 'ratings' dataset\n\nmovie_np = []\nmovie_id = 1\n\nfor i,j in zip(df_nan['index'][1:],df_nan['index'][:-1]):\n    # numpy approach\n    temp = np.full((1,i-j-1), movie_id)\n    movie_np = np.append(movie_np, temp)\n    movie_id += 1\n\n# Account for last record and corresponding length\n# numpy approach\nlast_record = np.full((1,len(dataset) - df_nan.iloc[-1, 0] - 1),movie_id)\nmovie_np = np.append(movie_np, last_record)\n\n#print(f'Movie numpy: {movie_np}')\n#print(f'Length: {len(movie_np)}')","788c0673":"#To append the above created array to the datset after removing the 'nan' rows\ndataset = dataset[pd.notnull(dataset['Rating'])]\n\ndataset['Movie_Id'] = movie_np.astype(int)\ndataset['Cust_Id'] =dataset['Cust_Id'].astype(int)\nprint('-Dataset examples-')\ndataset.head()\n","20f14763":"f = ['count','mean']","284fdd36":"#To create a list of all the movies rated less often(only include top 30% rated movies)\ndataset_movie_summary = dataset.groupby('Movie_Id')['Rating'].agg(f)\n\ndataset_movie_summary.index = dataset_movie_summary.index.map(int)\n\n#dataset_movie_summary.index","f17de4b4":"movie_benchmark = round(dataset_movie_summary['count'].quantile(0.7),0)\n\n#movie_benchmark\ndrop_movie_list = dataset_movie_summary[dataset_movie_summary['count'] < movie_benchmark].index\n\nprint('Minimum number of times, a movie should reviewed: {}'.format(movie_benchmark))","e55d2501":"#To create a list of all the inactive users(users who rate less often)\ndataset_cust_summary = dataset.groupby('Cust_Id')['Rating'].agg(f)\n\ndataset_cust_summary.index = dataset_cust_summary.index.map(int)\n\ncust_benchmark = round(dataset_cust_summary['count'].quantile(0.7),0)\n\ndrop_cust_list = dataset_cust_summary[dataset_cust_summary['count'] < cust_benchmark].index\n\nprint(f'Customer minimum times of review: {cust_benchmark}')","d07deafa":"print(f'Original Shape: {dataset.shape}')\n","9e94b642":"dataset = dataset[~dataset['Movie_Id'].isin(drop_movie_list)]\ndataset = dataset[~dataset['Cust_Id'].isin(drop_cust_list)]\nprint('After Trim Shape: {}'.format(dataset.shape))","49cbdeec":"print('-Data Examples-')\ndataset.head()","c0d26717":"df_p = pd.pivot_table(dataset,values='Rating',index='Cust_Id',columns='Movie_Id')\n\nprint(df_p.shape)\ndf_p","5a243e20":"df_title = pd.read_csv('\/kaggle\/input\/netflix-prize-data\/movie_titles.csv', encoding = \"ISO-8859-1\", header = None, names = ['Movie_Id', 'Year', 'Name'])\n\ndf_title.set_index('Movie_Id', inplace = True)\n\nprint (df_title.head(10))","c6a1024a":"# Import required libraries\nimport math\nimport re\nimport matplotlib.pyplot as plt\n\nfrom surprise import Reader, Dataset, SVD\nfrom surprise.model_selection import cross_validate","e41f761b":"# Load Reader library\nreader = Reader()\n\n# get just top 100K rows for faster run time\ndata = Dataset.load_from_df(dataset[['Cust_Id', 'Movie_Id', 'Rating']][:100000], reader)\n\n# Use the SVD algorithm.\nsvd = SVD()\n\n# Compute the RMSE of the SVD algorithm\ncross_validate(svd, data, measures=['RMSE', 'MAE'], cv=3, verbose=True)","ea595295":"dataset.head()","7f7445bf":"dataset_712664 = dataset[(dataset['Cust_Id'] == 712664) & (dataset['Rating'] == 5)]\ndataset_712664 = dataset_712664.set_index('Movie_Id')\ndataset_712664 = dataset_712664.join(df_title)['Name']\ndataset_712664.head(10)","9054fc2b":"# Create a shallow copy for the movies dataset\nuser_712664 = df_title.copy()\n\nuser_712664 = user_712664.reset_index()\n\n#To remove all the movies rated less often \nuser_712664 = user_712664[~user_712664['Movie_Id'].isin(drop_movie_list)]\n","fd5ee808":"# getting 10K dataset\ndata = Dataset.load_from_df(dataset[['Cust_Id', 'Movie_Id', 'Rating']][:10000], reader)","cc0c57ff":"#create a training set for svd\ntrainset = data.build_full_trainset()\nsvd.fit(trainset)\n\n#Predict the ratings for user_712664\nuser_712664['Estimate_Score'] = user_712664['Movie_Id'].apply(lambda x: svd.predict(712664, x).est)\n\n#Drop extra columns from the user_712664 data frame\nuser_712664 = user_712664.drop('Movie_Id', axis = 1)","59a46710":"# Sort predicted ratings for user_712664 in descending order\nuser_712664 = user_712664.sort_values('Estimate_Score', ascending=False)\n\n#Print top 10 recommendations\n(user_712664.head(10))","ded72b73":"## Observation\n\n- The total number of ratings is 24053764","2e5f68f9":"## Observation\n-  The number of movies is 4499","0ab74523":"## To plot the distribution of the ratings in as a bar plot","b835997e":"# Train an SVD to predict ratings for user with userId = 1","05a8d611":"## Now we know all that where does the movies counting start from","fbb5315b":"## Observation\n\n- The number of customers is 470758","5bcf8b24":"# To install the scikit-surprise library for implementing SVD","6d44b8fe":"# Create ratings matrix for 'ratings' matrix with Rows = userId, Columns = movieId"}}