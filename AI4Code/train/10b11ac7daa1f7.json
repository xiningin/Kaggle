{"cell_type":{"e1ac18a4":"code","e232eb59":"code","f7063172":"code","22197ff2":"code","87c60f63":"code","7f76de5e":"code","53a3dca3":"code","a79fa1bf":"code","50e96ef3":"code","55ba32df":"code","e801efd0":"code","7b81d6c4":"code","cf8d19eb":"code","13a414a0":"code","ada7a9de":"code","cc8ff61f":"code","4d3f9fb2":"code","9715db4a":"code","4bdcdd6b":"code","bf93d46d":"code","3ce7c300":"code","1469e465":"code","d8beefaf":"code","b542d2bc":"code","ea85b9e9":"code","6e7b8b65":"code","363e12f8":"code","9c7ccad2":"code","081d55a8":"code","878c9ad1":"code","e677ae1f":"code","8a389819":"code","ad7610f2":"code","9d85ef50":"code","ba0150f4":"code","07555dd1":"code","0a1b2561":"code","a38a9049":"code","e10aa110":"code","65044411":"code","1ec9c217":"code","82f2baa9":"code","c110fdf3":"code","1d081e5a":"code","f4ef4e63":"code","f31672c3":"code","46cf8853":"code","72847cab":"code","698f0ef8":"code","585d02ab":"code","a5511074":"code","2688febc":"code","36c92021":"code","f133ae13":"code","b0bcf721":"code","605c9449":"code","315a91b0":"code","0e3ce6ba":"code","97a2cc9c":"code","7624ce6d":"code","889e772d":"code","2c781baa":"code","28997914":"code","d04400a8":"code","4a47aada":"code","82211c68":"code","25ab9eeb":"code","71e364b0":"code","124e299b":"code","c7b92150":"code","c2b975d0":"code","cd2a1826":"code","99fbb297":"code","da098665":"code","b14afa11":"code","20ca0f9a":"code","ffbe3621":"code","da407089":"code","4754654c":"code","b32d99d3":"code","2b6b6890":"code","ff70b6a5":"code","71dd5c29":"code","85581f04":"code","be51eb84":"code","2d01624e":"code","c3e02d6c":"code","2f7c8ec7":"code","d6f60b67":"code","05475bac":"code","ff7a7ce1":"code","c752c52d":"code","5c4ce1cc":"code","342eecae":"code","af555a88":"code","ddc658e5":"code","1a0ec6d7":"code","f58593f7":"code","ee16bba1":"code","c13c36a9":"code","4493be72":"code","09a49543":"code","15dbe329":"code","630dc1e9":"code","f5bfeb90":"code","3f46b3e4":"code","59fac97a":"code","3814bf30":"code","1ee5a6fa":"code","9190aae4":"code","2c50979b":"code","d0bfbe30":"code","042c19ef":"code","caaaefbb":"code","f5ba53c4":"code","a3ed21f0":"code","6ca30046":"code","b8513593":"code","41da8e50":"code","6b9e9c73":"code","505a7a09":"code","287c7f7a":"code","f599f1db":"code","87972294":"code","6a13ba3a":"code","9727d426":"code","8a6591ed":"code","9c83c481":"code","8188a9cd":"code","22fe6834":"code","89113e80":"code","1cdafaa9":"code","6ef804f3":"code","b1b3f84c":"code","ede6795d":"code","acdea578":"code","45104a21":"code","612be4ac":"code","bca7d36e":"code","983c26f9":"code","f0641678":"code","552176a0":"code","90a3f7ca":"code","006d1909":"markdown","529c03d4":"markdown","e35e27ed":"markdown","82200d97":"markdown","7498e150":"markdown","ec16db09":"markdown","1f4a191f":"markdown","6c4582a1":"markdown","2ae89421":"markdown","15f5e5ed":"markdown","0127b791":"markdown","c63922fd":"markdown","71dcbbe1":"markdown","1f1d8186":"markdown","88b4ac0a":"markdown","697cae25":"markdown","3dbaba92":"markdown","8da07c1f":"markdown","32f5ff1f":"markdown","114106eb":"markdown","ef6f2c9c":"markdown","77f85602":"markdown","52cf5340":"markdown","57f60867":"markdown","064f344c":"markdown","51d791f1":"markdown","85acb9c5":"markdown","f658adfb":"markdown","9c6f9baf":"markdown","b1c61454":"markdown","557f6535":"markdown","434b0659":"markdown","dc9909fb":"markdown","57e4b9fa":"markdown","303a6a15":"markdown","64e882ac":"markdown","069f94e9":"markdown","1023200f":"markdown","02c7f0bb":"markdown","b7f9cd7a":"markdown","ec2667b5":"markdown","85eb2667":"markdown","aa98a9d3":"markdown","8fd8bf8a":"markdown","c2dade54":"markdown","e6fae556":"markdown","1c1b969c":"markdown","1e0132f1":"markdown","ab7cd001":"markdown","1d3a29ef":"markdown","93fd49fe":"markdown","205256b9":"markdown","044dbde0":"markdown","c45e4550":"markdown","94bfa70b":"markdown","5cf533b1":"markdown","8c37472b":"markdown","a93e377d":"markdown","e64319a8":"markdown","dc665905":"markdown","c77c943d":"markdown","09d04339":"markdown","2d09668c":"markdown","2a07405c":"markdown","e513a96c":"markdown","d22c5fd1":"markdown","c7ba2ca1":"markdown","f9616a02":"markdown","556ae193":"markdown"},"source":{"e1ac18a4":"import pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\nimport seaborn as sns","e232eb59":"train = pd.read_csv('..\/input\/house-prices-advanced-regression-techniques\/train.csv')\ntest = pd.read_csv('..\/input\/house-prices-advanced-regression-techniques\/test.csv')\n\nprint(train.shape, test.shape)","f7063172":"#vari\u00e1veis categ\u00f3ricas\ntrain_cat = train.select_dtypes(include = ['object']).info()","22197ff2":"train.select_dtypes(exclude = ['object']).info()  \n#seleciona somente os tipos de vari\u00e1vel escolhidas no include ou exclu\u00eddas no exclude","87c60f63":"corr = train.corr() #correl\u00e7\u00e3o de todas as vari\u00e1veis\ncorr","7f76de5e":"f, ax = plt.subplots(figsize=(30, 30)) #mapa de calor das correla\u00e7\u00f5es\nsns.heatmap(corr,  vmax=.8,square=True, annot=True, cmap='Greys')","53a3dca3":"#vari\u00e1veis com maiores correla\u00e7\u00f5es com a vari\u00e1vel alvo SalePrice\nmaiores_corr = corr.index[abs(corr[\"SalePrice\"])>0.5] #pegando o nome das colunas com correla\u00e7\u00e3o > |0.5| cm a vari\u00e1vel SalesPrice\nmaiores_corr","a79fa1bf":"#Criando um heatmap de correla\u00e7\u00e3o com as vari\u00e1veis >|0,5| com SalePrice\nplt.figure(figsize=(15,15))\nax = sns.heatmap(train[maiores_corr].corr(),annot=True,cmap=\"Greys\")","50e96ef3":"#investigando melhor as vari\u00e1veis \ncorr.SalePrice.sort_values(ascending=False)","55ba32df":"#investigando como os dados como maior correla\u00e7\u00e3o se comportam em rela\u00e7\u00e3o umas as outras\nsns.pairplot(train[corr.SalePrice.sort_values(ascending=False).index[0:11]], kind='reg')","e801efd0":"outr_corr = (corr[corr > 0.8]).sum().sort_values(ascending=False) #maiores que 1 est\u00e3o altamente correlacionadas\noutr_corr","7b81d6c4":"outr_corr[outr_corr > 1] #filtrandoa > 1","cf8d19eb":"variaveis_temporais = [x for x in train if \"Year\" in x or \"Yr\" in x] \n#list comprehension, gera uma lista com valores x, se x no data set train  tiver 'Year' ou 'Yr' no nome da coluna\nprint(variaveis_temporais)","13a414a0":"ax = sns.pairplot(train, y_vars='SalePrice', x_vars=variaveis_temporais, height=5, kind='reg')\nax.fig.suptitle('Dispers\u00e3o entre as Vari\u00e1veis de Tempo', fontsize=20, y=1.05)","ada7a9de":"temp_vars=corr[['YearBuilt','GarageYrBlt', 'YearRemodAdd', 'YrSold']]\nplt.figure(figsize=(15,15))\nax = sns.heatmap(temp_vars,annot=True,cmap=\"Greys\")","cc8ff61f":"# Salvanso os \u00edndices para juntar no final\ntrain_index= train.shape[0]\ntest_index = test.shape[0]","4d3f9fb2":"#separando a vari\u00e1vel alvo que ser\u00e1 analisada na se\u00e7\u00e3o 3 e a y_train ser\u00e1 entrada nos modelos.\ny_train = train.SalePrice.copy()\nId = test['Id'].copy() #ser\u00e1 usado na submiss\u00e3o no Kaggle","9715db4a":"train.drop(['SalePrice'], axis=1, inplace=True)#excluindo a vari\u00e1vel alvo","4bdcdd6b":"#juntando os datasets\ntudo_junto = pd.concat([train, test], axis=0, sort=False)\ntudo_junto.shape #soma das linhas do train e test","bf93d46d":"tudo_junto.drop(['Id'], axis=1, inplace=True) \n#excluindo a coluna Id que n\u00e3o ser\u00e1 \u00fatil nas an\u00e1lises e nem no modelo","3ce7c300":"tudo_junto.shape","1469e465":"tudo_junto_cat = tudo_junto.select_dtypes(include='object')","d8beefaf":"valores_faltantes = tudo_junto_cat.isna().sum().sort_values(ascending=False)\nvalores_faltantes_percentual= tudo_junto_cat.isna().sum().sort_values(ascending=False)\/tudo_junto.shape[0] * 100\n\nvalores_falt_cat= pd.DataFrame({\"valores_faltantes\":valores_faltantes, \"valores_faltantes_percentual\":valores_faltantes_percentual})\nvalores_falt_cat.head(20)","b542d2bc":"#filtro para copiar o nome das colunas\ncol_falt = (valores_falt_cat[valores_falt_cat['valores_faltantes_percentual'] > 6]).index\ncol_falt","ea85b9e9":"tudo_junto.drop(col_falt, axis=1, inplace=True)","6e7b8b65":"#Confirmando que est\u00e3o com 5 colunas a menos\nprint(tudo_junto.shape)","363e12f8":"#filtro para copiar o nome das colunas\ncol_falt =valores_falt_cat[(valores_falt_cat['valores_faltantes_percentual'] > 0) & (valores_falt_cat['valores_faltantes_percentual']  < 6)].index","9c7ccad2":"dados_falt = tudo_junto[col_falt]\ndados_falt.head()","081d55a8":"#obtenho os valores \u00fanicos em cada coluna\nfor i in dados_falt.columns:\n  print(i,  dados_falt[i].unique())","878c9ad1":"#gr\u00e1ficos de barras da frequ\u00eancia de cada valor categ\u00f3rico em cada vari\u00e1vel\nfor x in dados_falt.columns:\n  \n  pd.DataFrame(dados_falt[x].value_counts()).plot.bar()","e677ae1f":"dados_falt.isna().sum()","8a389819":"#preenchendo os valores nulos & faltantes\nfor x in dados_falt.columns:\n  a = dados_falt[x].value_counts()\n  mais_freq = a.index[0]\n  #print(mais_freq)\n  tudo_junto[x].fillna(value=mais_freq, inplace=True)","ad7610f2":"#excluindo a coluna Utilities\ntudo_junto.drop('Utilities', axis=1, inplace=True)","9d85ef50":"#confirmando que todos os valores foram preenchidos e n\u00e3o h\u00e1 mais nulos nas vari\u00e1veis categ\u00f3ricas\ntudo_junto.select_dtypes(include = ['object']).isna().sum().sort_values(ascending=False)","ba0150f4":"tudo_junto_num = tudo_junto.select_dtypes(exclude='object')\nvalores_faltantes = tudo_junto_num.isna().sum().sort_values(ascending=False)\nvalores_faltantes_percentual= tudo_junto_num.isna().sum().sort_values(ascending=False)\/tudo_junto.shape[0] * 100\n\nvalores_falt_num= pd.DataFrame({\"valores_faltantes\":valores_faltantes, \"valores_faltantes_percentual\":valores_faltantes_percentual})\nvalores_falt_num.head(20)","07555dd1":"tudo_junto.drop([\"LotFrontage\"], axis=1, inplace=True)","0a1b2561":"col_falt = (valores_falt_num[(valores_falt_num['valores_faltantes_percentual'] > 0) & (valores_falt_num['valores_faltantes_percentual']  < 6)].index)\ncol_falt","a38a9049":"#analisando as colunas\ndados_falt = tudo_junto[col_falt]\ndados_falt.hist(figsize=(20,10))","e10aa110":"dados_falt.describe()","65044411":"tudo_junto['GarageYrBlt'].fillna(value=train['GarageYrBlt'].mean(), inplace=True)","1ec9c217":"tudo_junto['MasVnrArea'].fillna(value=166, inplace=True)","82f2baa9":"colunas =['BsmtFullBath', 'BsmtHalfBath','GarageArea', 'TotalBsmtSF', 'BsmtUnfSF',\n          'BsmtFinSF2', 'GarageCars','BsmtFinSF1']\nfor x in colunas:\n  a = 0\n  tudo_junto[x].fillna(value=0, inplace=True)","c110fdf3":"#confirmando\ntudo_junto.select_dtypes(exclude='object').isna().sum().sort_values(ascending=False)","1d081e5a":"MSSUbCLass = {\n    20: \"1-STORY 1946 & NEWER ALL STYLES\",\n    30: \"1-STORY 1945 & OLDER\",\n    40: \"1-STORY W\/FINISHED ATTIC ALL AGES\",\n    45: \"1-1\/2 STORY - UNFINISHED ALL AGES\",\n    50: \"1-1\/2 STORY FINISHED ALL AGES\",\n    60: \"2-STORY 1946 & NEWER\",\n    70: \"2-STORY 1945 & OLDER\",\n    75: \"2-1\/2 STORY ALL AGES\",\n    80: \"SPLIT OR MULTI-LEVEL\",\n    85: \"SPLIT FOYER\",\n    90: \"DUPLEX - ALL STYLES AND AGES\",\n    120: \"1-STORY PUD (Planned Unit Development) - 1946 & NEWER\",\n    150: \"1-1\/2 STORY PUD - ALL AGES\",\n    160: \"2-STORY PUD - 1946 & NEWER\",\n    180: \"PUD - MULTILEVEL - INCL SPLIT LEV\/FOYER\",\n    190: \"2 FAMILY CONVERSION - ALL STYLES AND AGES\",\n}","f4ef4e63":"tudo_junto['MSSubClass']= tudo_junto.MSSubClass.map(MSSUbCLass)","f31672c3":"#conferindo a mudan\u00e7a\ntudo_junto.MSSubClass","46cf8853":"#excluiindo as vari\u00e1veis \ntudo_junto.drop(['GarageCars','TotRmsAbvGrd', 'GarageYrBlt'], axis=1, inplace=True)","72847cab":"#criando uma nova coluna\ntudo_junto['TotalBsmtSF1stFlrSF2stFlrSF'] = tudo_junto['TotalBsmtSF'] + tudo_junto['1stFlrSF'] + tudo_junto['2ndFlrSF']","698f0ef8":"#excluindo as colunas individuais j\u00e1 que est\u00e3o representadas numa s\u00f3\ntudo_junto.drop(['TotalBsmtSF','1stFlrSF','2ndFlrSF'], axis=1, inplace=True)","585d02ab":"#salvando para iniciar a partir dqui e n\u00e3o ter que rodar o kernel novamente\n\ntudo_junto.to_csv(\"tudo_junto_1.csv\")","a5511074":"fig, (ax1, ax2 )= plt.subplots(2,1,figsize=(20, 8))\n\nax=sns.distplot(y_train, ax= ax1, color='grey')\nax.set_title(\"Distribui\u00e7\u00e3o dos pre\u00e7os das casas\", fontsize=20,pad=20,)\n\nsns.boxplot(y_train, orient='h', color='grey', ax=ax2)","2688febc":"display(f\"Assimetria: {y_train.skew().round(2)}\")\ndisplay(f\"Curtose: {y_train.kurt().round(2)}\")","36c92021":"#transformando os valores em logaritmo\ny_train= np.log1p(y_train)\ny_train.to_csv(\"ytrain_log.csv\")","f133ae13":"fig, (ax1, ax2 )= plt.subplots(2,1,figsize=(20, 8))\n\nax=sns.distplot(y_train,color='grey', ax=ax1)\nax.set_title(\"Distribui\u00e7\u00e3o dos pre\u00e7os das casas\", fontsize=20,pad=20,)\n\nsns.boxplot(y_train, orient='h', color='grey')","b0bcf721":"display(f\"Assimetria: {y_train.skew().round(2)}\")\ndisplay(f\"Curtose: {y_train.kurt().round(2)}\")","605c9449":"col_num = tudo_junto.select_dtypes(exclude='object').columns #nomesvari\u00e1veis num\u00e9rica\n#listando as vari\u00e1veis assim\u00e9tricas\nassimetria = tudo_junto[col_num].skew().sort_values(ascending=False)\nassimetria = assimetria[abs(assimetria) > 0.5]\nassimetria","315a91b0":"for x in assimetria.index:\n  tudo_junto[x] = np.log1p(tudo_junto[x])","0e3ce6ba":"tudo_junto = pd.get_dummies(tudo_junto)\ntudo_junto.head(5)","97a2cc9c":"x_train =tudo_junto[:train_index] #usaremos em nosso modelo\nx_test_competi\u00e7\u00e3o = tudo_junto[train_index:]\nprint(x_train.shape)\nprint(x_test_competi\u00e7\u00e3o.shape)","7624ce6d":"#salvandox_train_modelos caso precisar reiniciar o projeto a partir deste ponto\nx_train.to_csv(\"x_train_modelos.csv\")\nx_test_competi\u00e7\u00e3o.to_csv('x_test_competi\u00e7\u00e3o.csv')","889e772d":"comparacao_modelos = pd.DataFrame(columns=['Modelo','R\u00b2','EQM',\"REQM\"]) \n# Esse Data Frame tem o objetivo de armazenar os valores das m\u00e9tricas para facilitar a compara\u00e7\u00e3o dos valores.\n\n#essa fun\u00e7\u00e3o armazenar\u00e1, classificar\u00e1 por ordem de melhor desempenho o nome do modelo e sua acur\u00e1cia.\ndef comparar(Nome_do_modelo,R2,EQM,REQM):  \n\n  global comparacao_modelos\n\n  comparacao_modelos = comparacao_modelos.append({'Modelo': Nome_do_modelo, 'R\u00b2': R2,'EQM':EQM,'REQM':REQM }, ignore_index=True)\n\n  #Colocando em ordem crescente por REQM porqu\u00ea a competi\u00e7\u00e3o utiliza essa m\u00e9trica\n\n  comparacao_modelos.sort_values(ascending=True, by='REQM', inplace=True)\n\n  comparacao_modelos.drop_duplicates(inplace=True) # para caso duplicar uma linha sem querer :)\n  \n  display(comparacao_modelos) ","2c781baa":"from sklearn.model_selection import train_test_split\nfrom sklearn.metrics import mean_squared_error, make_scorer, r2_score","28997914":"#separar amostra de treino e teste\n#Usaremos 90% de nossos dados para treinamento e os outros 10% para teste.\nX_train,X_test,Y_train,Y_test = train_test_split(x_train, y_train, test_size=0.1, random_state=2021)","d04400a8":"from sklearn.tree import DecisionTreeRegressor","4a47aada":"params=pd.DataFrame() #variamos a escolha de 2 par\u00e2metros para escolher a combina\u00e7\u00e3o que tem melhor desempenho. \nfor i in [10,15,20,50,100]:\n  for x in [2,3,4]:\n    tree_reg = DecisionTreeRegressor(random_state=2021, max_depth=i,min_samples_split=x)\n    tree_reg.fit(X_train,Y_train)\n    R2 = tree_reg.score(X_train,Y_train)\n    params = params.append({'max_depth':i,\"min_samples_split\":x, 'R2':R2}, ignore_index=True)\ndisplay(params.sort_values(by='R2', ascending=False))","82211c68":"#aplicando na amostra de X_teste\n#De acordo com a tabela de varia\u00e7\u00e3o de par\u00e2metros  maxdepth=20 e min_samples_split=2\n\ntree_reg = DecisionTreeRegressor(random_state=2021, max_depth=20,min_samples_split=2)\ntree_reg.fit(X_train,Y_train)\ny_predict_tree =((tree_reg.predict(X_test)))","25ab9eeb":"#Calculando para a amostra de Teste\nEQM = mean_squared_error(Y_test,y_predict_tree).round(4)\nREQM = np.sqrt(EQM).round(4)\nR2 = (tree_reg.score(X_test,Y_test)).round(4)\n\ncomparar('Decision Tree',R2,EQM,REQM)","71e364b0":"# gerando o arquivo de submiss\u00e3o na competi\u00e7\u00e3o\ny_predict_tree_I = np.expm1(tree_reg.predict(x_test_competi\u00e7\u00e3o))\ny_predict_tree_I\n\nsub_tree_I = pd.DataFrame({'Id':Id,'SalePrice':y_predict_tree_I})\nsub_tree_I.to_csv('sub_tree_I.csv', index=False)","124e299b":"from sklearn.ensemble import RandomForestRegressor","c7b92150":"params=pd.DataFrame() \nfor i in [5,10,15,20,50,100]:\n  for x in [2,3,4]:\n    rand_for=RandomForestRegressor(max_depth=i,min_samples_split=x, random_state=2021)\n    rand_for.fit(X_train,Y_train)\n    R2 = rand_for.score(X_train,Y_train)\n    params = params.append({'max_depth':i,\"min_samples_split\":x, 'R2':R2}, ignore_index=True)\ndisplay(params.sort_values(by='R2', ascending=False))","c2b975d0":"#De acordo com a tabela de varia\u00e7\u00e3o de par\u00e2metros  maxdepth=15 e min_samples_split=2\nrand_for=RandomForestRegressor(max_depth=50,min_samples_split=2, random_state=2021)\nrand_for.fit(X_train,Y_train)\ny_predict_rand =((rand_for.predict(X_test)))","cd2a1826":"EQM = mean_squared_error(Y_test,y_predict_rand).round(4)\nREQM = np.sqrt(EQM).round(4)\nR2 = (rand_for.score(X_test,Y_test)).round(4)\nprint(f\"EQM = {EQM}, REQM = {REQM}, R\u00b2 = {R2}\",sep='\\n')\ncomparar('Random Forest',R2,EQM,REQM)","99fbb297":"# gerando o arquivo de submiss\u00e3o na competi\u00e7\u00e3o\ny_predict_rand_I = np.expm1(rand_for.predict(x_test_competi\u00e7\u00e3o))\ny_predict_rand_I\n\nsub_rand_I = pd.DataFrame({'Id':Id,'SalePrice':y_predict_rand_I})\nsub_rand_I.to_csv('sub_rand_I.csv', index=False)","da098665":"from sklearn.ensemble import GradientBoostingRegressor","b14afa11":"params=pd.DataFrame()\nfor i in [5,10,15,20,50,100]:\n  for x in [2,3,4]:\n    grad_b = GradientBoostingRegressor(max_depth=i,min_samples_split=x, random_state=2021)\n    grad_b.fit(X_train,Y_train)\n    R2 = rand_for.score(X_train,Y_train)\n    params = params.append({'max_depth':i,\"min_samples_split\":x, 'R2':R2}, ignore_index=True)\ndisplay(params.sort_values(by='R2', ascending=False))","20ca0f9a":"#De acordo com a tabela de varia\u00e7\u00e3o de par\u00e2metros  maxdepth=5 e min_samples_split=2\ngrad_b = GradientBoostingRegressor(max_depth=5,min_samples_split=2, random_state=2021)\ngrad_b.fit(X_train,Y_train)\n\ny_predict_grad= grad_b.predict(X_test)","ffbe3621":"EQM = mean_squared_error(Y_test,y_predict_grad).round(4)\nREQM = np.sqrt(EQM).round(4)\nR2 = (rand_for.score(X_test,Y_test)).round(4)\n\ncomparar('Gradient Boosting',R2,EQM,REQM)","da407089":"# gerando o arquivo de submiss\u00e3o na competi\u00e7\u00e3o\ny_predict_grad_I = np.expm1(grad_b.predict(x_test_competi\u00e7\u00e3o))\ny_predict_grad_I\n\nsub_grad_I = pd.DataFrame({'Id':Id,'SalePrice':y_predict_grad_I})\nsub_grad_I.to_csv('sub_grad_I.csv',index=False)","4754654c":"from xgboost import XGBRegressor","b32d99d3":"params=pd.DataFrame()\nfor i in [5,10,20,50]:\n  for x in [100,1000,3000]:\n   xgbr = XGBRegressor(max_depth=i, n_estimators=x, random_state=2021)                             \n   xgbr.fit(X_train,Y_train)\n   R2 = rand_for.score(X_train,Y_train)\n   params = params.append({'max_depth':i,\"n_estimators\":x, 'R2':R2}, ignore_index=True)\ndisplay(params.sort_values(by='R2', ascending=False))","2b6b6890":"#De acordo com a tabela de varia\u00e7\u00e3o de par\u00e2metros  maxdepth=5 e n_stimator=100\nxgbr = XGBRegressor(max_depth=5, n_estimators=100, random_state=2021)                             \nxgbr.fit(X_train,Y_train)\ny_predict_xgbr = xgbr.predict(X_test)","ff70b6a5":"EQM = mean_squared_error(Y_test,y_predict_xgbr).round(4)\nREQM = np.sqrt(EQM).round(4)\nR2 = (rand_for.score(X_test,Y_test)).round(4)\n\ncomparar('XGB',R2,EQM,REQM)","71dd5c29":"# gerando o arquivo de submiss\u00e3o na competi\u00e7\u00e3o\ny_predict_xgbr_I = np.expm1(xgbr.predict(x_test_competi\u00e7\u00e3o))\ny_predict_xgbr_I\n\nsub_xgbr_I = pd.DataFrame({'Id':Id,'SalePrice':y_predict_xgbr_I})\nsub_xgbr_I.to_csv('sub_xgbr_I.csv', index=False)","85581f04":"fig, (axis1,axis2,axis3,axis4) = plt.subplots(1,4,figsize=(100,8))\n\n#Gr\u00e1fico para comparar o real x estimado\n\n#Decision Tree\nax = sns.scatterplot(x=y_predict_tree, y=Y_test,ax=axis1)\nax.figure.set_size_inches(12, 6)\nax.set_title('Decision Tree', fontsize=18)\nax.set_xlabel('log do Pre\u00e7o - Previs\u00e3o', fontsize=14)\nax.set_ylabel('log do Pre\u00e7o - Real', fontsize=14)\nax\n\n#Random Forest\nax = sns.scatterplot(x=y_predict_rand, y=Y_test,ax=axis2)\nax.figure.set_size_inches(12, 6)\nax.set_title('Random Forest', fontsize=18)\nax.set_xlabel('log do Pre\u00e7o - Previs\u00e3o', fontsize=14)\nax.set_ylabel('log do Pre\u00e7o - Real', fontsize=14)\nax\n\n#Gradient Boost\nax = sns.scatterplot(x=y_predict_grad, y=Y_test, ax= axis3)\nax.figure.set_size_inches(12, 6)\nax.set_title('Gradient Boosting', fontsize=18)\nax.set_xlabel('log do Pre\u00e7o - Previs\u00e3o', fontsize=14)\nax.set_ylabel('log do Pre\u00e7o - Real', fontsize=14)\nax\n\n#XGB\nax = sns.scatterplot(x=y_predict_xgbr, y=Y_test, ax=axis4)\nax.figure.set_size_inches(12, 6)\nax.set_title('XGB Regressor', fontsize=18)\nax.set_xlabel('log do Pre\u00e7o - Previs\u00e3o', fontsize=14)\nax.set_ylabel('log do Pre\u00e7o - Real', fontsize=14)\nax","be51eb84":"fig, (axis1, axis2) = plt.subplots(1,2, figsize=(20,8))\n\nax = sns.barplot(x='R\u00b2', y=\"Modelo\", data=comparacao_modelos, palette='gist_gray', orient='h',ax=axis1).set_title('EQM', fontsize=15, pad=10)\n\nax = sns.barplot(x='REQM', y=\"Modelo\", data=comparacao_modelos, palette='gist_gray', orient='h',ax=axis2).set_title('REQM',fontsize=15, pad=10)","2d01624e":"melhores_resultados = comparacao_modelos.copy() #salvando para compara\u00e7\u00e3o nas demais se\u00e7\u00f5es\nmelhores_resultados","c3e02d6c":"#carreguei o arquivo novamente e alterei o nome da vari\u00e1vel para n\u00e3o alterar a vari\u00e1vel train usada anteriormente.\ntrain_1 = pd.read_csv('..\/input\/house-prices-advanced-regression-techniques\/train.csv')","2f7c8ec7":"#vari\u00e1veis com menores correla\u00e7\u00f5es com a vari\u00e1vel alvo SalePrice\ncorr= train_1.corr()\nmenores_corr = corr.index[abs(corr[\"SalePrice\"])<0.1] #pegando o nome das colunas com correla\u00e7\u00e3o > |0.5| cm a vari\u00e1vel SalesPrice\ndisplay(menores_corr)\n\n#Criando um heatmap de correla\u00e7\u00e3o com as vari\u00e1veis <|0.1| com SalePrice\nplt.figure(figsize=(15,15))\nax = sns.heatmap(train_1[menores_corr].corr(),annot=True,cmap=\"Greys\")","d6f60b67":"#excluindo as colunas\ntudo_junto_2 = tudo_junto.drop(['BsmtFinSF2', 'LowQualFinSF', 'BsmtHalfBath', '3SsnPorch',\n       'MiscVal', 'MoSold', 'YrSold'], axis=1)","05475bac":"#Como os data sets est\u00e3o separados, tamb\u00e9m teremos que excluir as mesmas colunas no data set de submiss\u00e3o da competi\u00e7\u00e3o\n\nx_test_competi\u00e7\u00e3o_I = x_test_competi\u00e7\u00e3o.drop(['BsmtFinSF2', 'LowQualFinSF', 'BsmtHalfBath', '3SsnPorch',\n       'MiscVal', 'MoSold', 'YrSold'], axis=1)","ff7a7ce1":"x_train_1 =tudo_junto_2[:train_index] #usaremos em nosso modelo\n\n#separar amostra de treino e teste\nX_train_1,X_test_1,Y_train_1,Y_test_1 = train_test_split(x_train_1, y_train, test_size=0.1, random_state=2021)","c752c52d":"comparacao_modelos = pd.DataFrame(columns=['Modelo','R\u00b2','EQM',\"REQM\"]) \n# Esse Data Frame tem o objetivo de armazenar os valores das m\u00e9tricas para facilitar a compara\u00e7\u00e3o dos valores. Aqui limpamos os valores","5c4ce1cc":"#aplicando na amostra de X_teste\n#De acordo com a tabela de varia\u00e7\u00e3o de par\u00e2metros  maxdepth=50 e min_samples_split=2\n\ntree_reg = DecisionTreeRegressor(random_state=2021, max_depth=50,min_samples_split=2)\ntree_reg.fit(X_train_1,Y_train_1)\ny_predict_tree =(tree_reg.predict(X_test_1))\n\n#Calculando para a amostra de Teste\nEQM = mean_squared_error(Y_test_1,y_predict_tree).round(4)\nREQM = np.sqrt(EQM).round(4)\nR2 = (tree_reg.score(X_test_1,Y_test_1)).round(4)\n\ncomparar('Decision Tree',R2,EQM,REQM)","342eecae":"melhores_resultados.query(\"Modelo == 'Decision Tree' \" ) #para comparar com as m\u00e9tricas da modelagem anterior","af555a88":"melhores_resultados = melhores_resultados.replace([0.7305,0.0343,0.1852],(0.7353,0.0337,0.1836))\n","ddc658e5":"melhores_resultados","1a0ec6d7":"#De acordo com a tabela de varia\u00e7\u00e3o de par\u00e2metros  maxdepth=15 e min_samples_split=2\nrand_for=RandomForestRegressor(max_depth=15,min_samples_split=2, random_state=2021)\nrand_for.fit(X_train_1,Y_train_1)\ny_predict_rand =((rand_for.predict(X_test_1)))\n\nEQM = mean_squared_error(Y_test_1,y_predict_rand).round(4)\nREQM = np.sqrt(EQM).round(4)\nR2 = (rand_for.score(X_test_1,Y_test_1)).round(4)\n\ncomparar('Random Forest',R2,EQM,REQM)","f58593f7":"melhores_resultados.query(\"Modelo == 'Random Forest' \" )","ee16bba1":"melhores_resultados= melhores_resultados.replace([0.8663,0.017,0.1304],(0.8671,0.0169,0.1300))\nmelhores_resultados","c13c36a9":"#De acordo com a tabela de varia\u00e7\u00e3o de par\u00e2metros  maxdepth=5 e min_samples_split=2\ngrad_b = GradientBoostingRegressor(max_depth=5,min_samples_split=2, random_state=2021)\ngrad_b.fit(X_train_1,Y_train_1)\ny_predict_grad= grad_b.predict(X_test_1)\n\nEQM = mean_squared_error(Y_test_1,y_predict_grad).round(4)\nREQM = np.sqrt(EQM).round(4)\n\nprint(f\"EQM = {EQM}, REQM = {REQM}, R\u00b2 = {R2}\",sep='\\n')\ncomparar('Gradient Boosting',R2,EQM,REQM)","4493be72":"melhores_resultados.query(\"Modelo == 'Gradient Boosting'\")","09a49543":"O Gradient Boosting obteve  melhor desempenho na m\u00e9trica REQM excluindo as vari\u00e1veis com baixa correla\u00e7\u00e3o! Agora esse resultado ser\u00e1 usado como base. Ser\u00e1 poss\u00edvel melhor\u00e1-lo?","15dbe329":"melhores_resultados= melhores_resultados.replace([0.8671,0.0149,0.1221],(0.8671,0.0124,0.1114))\nmelhores_resultados","630dc1e9":"# gerando o arquivo de submiss\u00e3o na competi\u00e7\u00e3o\ny_predict_grad_II= np.expm1(grad_b.predict(x_test_competi\u00e7\u00e3o_I))\n\nsub_grad_II = pd.DataFrame({'Id':Id,'SalePrice':y_predict_grad_II})\nsub_grad_II.to_csv('sub_grad_II.csv', index=False)","f5bfeb90":"#De acordo com a tabela de varia\u00e7\u00e3o de par\u00e2metros  maxdepth=5 e n_stimator=100\nxgbr = XGBRegressor(max_depth=5, n_estimators=100, random_state=2021)                             \nxgbr.fit(X_train_1,Y_train_1)\ny_predict_xgbr = xgbr.predict(X_test_1)\n\nEQM = mean_squared_error(Y_test_1,y_predict_xgbr).round(4)\nREQM = np.sqrt(EQM).round(4)\nR2 = (rand_for.score(X_test_1,Y_test_1)).round(4)\n\ncomparar('XGB',R2,EQM,REQM)","3f46b3e4":"comparacao_modelos_1.query(\"Modelo == 'XGB'\")","59fac97a":"comparacao_modelos = pd.DataFrame(columns=['Modelo','R\u00b2','EQM',\"REQM\"]) \n# Esse Data Frame tem o objetivo de armazenar os valores das m\u00e9tricas para facilitar a compara\u00e7\u00e3o dos valores. Aqui limpamos os valores","3814bf30":"#modelo da se\u00e7\u00e3o 5\ngrad_b = GradientBoostingRegressor(max_depth=5,min_samples_split=2, random_state=2021)                            \ngrad_b.fit(X_train,Y_train)\ny_predict = grad_b.predict(X_test)","1ee5a6fa":"#selecionamos as features que s\u00e3o importantes para o modelo em pelo menos 1%\nimportance_feat= pd.DataFrame({'Coluna':X_train.columns,'Import\u00e2ncia':grad_b.feature_importances_})\n\nmais_imp=importance_feat.query('Import\u00e2ncia > = 0.002').sort_values(ascending=False, by='Import\u00e2ncia')\n\nmais_imp['Coluna'].values","9190aae4":"mais_imp","2c50979b":"mais_imp['Import\u00e2ncia'].values.sum() #+ de 94% de import\u00e2ncia","d0bfbe30":"plt.figure(figsize=(10,8))\nsns.barplot(x='Import\u00e2ncia', y='Coluna',data=mais_imp, orient='h') #.set_title('Import\u00e2ncia de cada feature'))\n# plt.yticks(range(len(indices)), features[indices])\n# plt.xlabel('Relative Importance')\nplt.show()","042c19ef":"feat_grad_b=tudo_junto[:train_index]\nfeat_grad_b = feat_grad_b[mais_imp['Coluna'].values]\n\n#separar amostra de treino e teste\nX_train_2,X_test_2,Y_train_2,Y_test_2 = train_test_split(feat_grad_b, y_train, test_size=0.1, random_state=2021)","caaaefbb":"#testando o modelo\ngrad_b = GradientBoostingRegressor(max_depth=5,min_samples_split=2, random_state=2021)  \ngrad_b.fit(X_train_2,Y_train_2)\ny_predict = grad_b.predict(X_test_2)\n\nEQM = mean_squared_error(Y_test_2,y_predict).round(4)\nREQM = np.sqrt(EQM).round(4)\n\nR2 = (grad_b.score(X_test_2,Y_test_2)).round(4)\n\n#print(f\"EQM = {EQM}, REQM = {REQM}, R\u00b2 = {R2}\",sep='\\n')\n\nprint( f'O n\u00famero de colunas a menos \u00e9 de {tudo_junto.shape[1]- feat_grad_b.shape[1]}')\ncomparar('Gradient Boosting',R2,EQM,REQM)","f5ba53c4":"melhores_resultados.query('Modelo == \"Gradient Boosting\"')","a3ed21f0":"#De acordo com a tabela de varia\u00e7\u00e3o de par\u00e2metros  maxdepth=5 e n_stimator=100\nxgbr = XGBRegressor(max_depth=5, n_estimators=100, random_state=2021)                             \nxgbr.fit(X_train,Y_train)\ny_predict_xgbr = xgbr.predict(X_test)","6ca30046":"#selecionamos as features que s\u00e3o importantes para o modelo em pelo menos 1%\nimportance_feat= pd.DataFrame({'Coluna':tudo_junto.columns,'Import\u00e2ncia':xgbr.feature_importances_})\n\nmais_imp=importance_feat.query('Import\u00e2ncia > = 0.0015').sort_values(ascending=False, by='Import\u00e2ncia')\n\nmais_imp['Coluna'].values\n\nmais_imp['Import\u00e2ncia'].values.sum()","b8513593":"plt.figure(figsize=(10,8))\nsns.barplot(x='Import\u00e2ncia', y='Coluna',data=mais_imp, orient='h') #.set_title('Import\u00e2ncia de cada feature'))\n# plt.yticks(range(len(indices)), features[indices])\n# plt.xlabel('Relative Importance')\nplt.show()","41da8e50":"feat_xgbr=tudo_junto[:train_index]\nfeat_xgbr = feat_xgbr[mais_imp['Coluna'].values]\n\n#separar amostra de treino e teste\nX_train_3,X_test_3,Y_train_3,Y_test_3 = train_test_split(feat_xgbr, y_train, test_size=0.1, random_state=2021)","6b9e9c73":"#testando o modelo\nxgbr = XGBRegressor(max_depth=5, n_estimators=100, random_state=2021)    \nxgbr.fit(X_train_3,Y_train_3)\ny_predict = xgbr.predict(X_test_3)\n\nEQM = mean_squared_error(Y_test_3,y_predict).round(4)\nREQM = np.sqrt(EQM).round(4)\n\nR2 = (xgbr.score(X_test_3,Y_test_2)).round(4)\n\n#print(f\"EQM = {EQM}, REQM = {REQM}, R\u00b2 = {R2}\",sep='\\n')\n\nprint( f'O n\u00famero de colunas a menos \u00e9 de {tudo_junto.shape[1]- feat_xgbr.shape[1]}')\ncomparar('XGB',R2,EQM,REQM)","505a7a09":"melhores_resultados.query('Modelo == \"XGB\"')","287c7f7a":"from sklearn.feature_selection import SelectPercentile, f_regression","f599f1db":"x = list(range(10,101,1))","87972294":"select_best_percent = pd.DataFrame(columns=['%','R\u00b2','EQM',\"REQM\"]) \n\nfor i in x:\n  \n    \n    select_best= SelectPercentile(f_regression, percentile=i)\n    x_train_new = select_best.fit_transform(x_train, y_train)\n\n    #separando as vari\u00e1veis de teste e treino\n    X_train_4,X_test_4,Y_train_4,Y_test_4 = train_test_split(x_train_new, y_train, test_size=0.1, random_state=2021)\n\n    tree_reg = DecisionTreeRegressor(random_state=2021, max_depth=20,min_samples_split=2)  \n    tree_reg.fit(X_train_4,Y_train_4)\n    y_predict = tree_reg.predict(X_test_4)\n\n    EQM = mean_squared_error(Y_test_4,y_predict).round(4)\n    REQM = np.sqrt(EQM).round(4)\n    R2 = (tree_reg.score(X_test_4,Y_test_4)).round(4)  \n\n    select_best_percent= select_best_percent.append({'%':i,'R\u00b2': R2,'EQM':EQM,'REQM':REQM }, ignore_index=True)\n\n","6a13ba3a":"sns.lineplot(x='%',y='REQM', data=select_best_percent)","9727d426":"select_best_percent.sort_values(by='REQM').head(10)","8a6591ed":"melhores_resultados.query('Modelo == \"Decision Tree\"')","9c83c481":"#atualizando\nmelhores_resultados= melhores_resultados.replace([0.7353,0.0337,0.1836],(0.7889,0.0268,0.1637))\nmelhores_resultados","8188a9cd":"select_best_percent = pd.DataFrame(columns=['%','R\u00b2','EQM',\"REQM\"]) \n\nfor i in x:\n  \n    select_best= SelectPercentile(f_regression, percentile=i)\n    x_train_new = select_best.fit_transform(x_train, y_train)\n\n    #separando as vari\u00e1veis de teste e treino\n    X_train_4,X_test_4,Y_train_4,Y_test_4 = train_test_split(x_train_new, y_train, test_size=0.1, random_state=2021)\n\n    rand_for = RandomForestRegressor(max_depth=50,min_samples_split=2, random_state=2021)   \n    rand_for.fit(X_train_4,Y_train_4)\n    y_predict = rand_for.predict(X_test_4)\n\n    EQM = mean_squared_error(Y_test_4,y_predict).round(4)\n    REQM = np.sqrt(EQM).round(4)\n    R2 = (rand_for.score(X_test_4,Y_test_4)).round(4)  \n\n    select_best_percent= select_best_percent.append({'%':i,'R\u00b2': R2,'EQM':EQM,'REQM':REQM }, ignore_index=True)","22fe6834":"sns.lineplot(x='%',y='REQM', data=select_best_percent)","89113e80":"select_best_percent.sort_values(by='REQM').head(10)","1cdafaa9":"melhores_resultados.query('Modelo == \"Random Forest\"')","6ef804f3":"#atualizando\nmelhores_resultados= melhores_resultados.replace([0.8671,0.0169,0.13],(0.8678,0.0168,0.1296))\nmelhores_resultados","b1b3f84c":"select_best_percent = pd.DataFrame(columns=['%','R\u00b2','EQM',\"REQM\"]) \n\nfor i in x:\n  \n    select_best= SelectPercentile(f_regression, percentile=i)\n    x_train_new = select_best.fit_transform(x_train, y_train)\n\n    #separando as vari\u00e1veis de teste e treino\n    X_train_4,X_test_4,Y_train_4,Y_test_4 = train_test_split(x_train_new, y_train, test_size=0.1, random_state=2021)\n\n    grad_b = GradientBoostingRegressor(max_depth=5,min_samples_split=2, random_state=2021)  \n    grad_b.fit(X_train_4,Y_train_4)\n    y_predict = grad_b.predict(X_test_4)\n\n    EQM = mean_squared_error(Y_test_4,y_predict).round(4)\n    REQM = np.sqrt(EQM).round(4)\n    R2 = (grad_b.score(X_test_4,Y_test_4)).round(4)  \n\n    select_best_percent= select_best_percent.append({'%':i,'R\u00b2': R2,'EQM':EQM,'REQM':REQM }, ignore_index=True)","ede6795d":"sns.lineplot(x='%',y='REQM', data=select_best_percent)","acdea578":"select_best_percent.sort_values(by='REQM').head(10)","45104a21":"melhores_resultados.query('Modelo == \"Gradient Boosting\"')","612be4ac":"select_best_percent = pd.DataFrame(columns=['%','R\u00b2','EQM',\"REQM\"]) \n\nfor i in x:\n   \n    select_best= SelectPercentile(f_regression, percentile=i)\n    x_train_new = select_best.fit_transform(x_train, y_train)\n\n    #separando as vari\u00e1veis de teste e treino\n    X_train_4,X_test_4,Y_train_4,Y_test_4 = train_test_split(x_train_new, y_train, test_size=0.1, random_state=2021)\n\n    xgbr = XGBRegressor(max_depth=5, n_estimators=100, random_state=2021)    \n    xgbr.fit(X_train_4,Y_train_4)\n    y_predict = xgbr.predict(X_test_4)\n\n    EQM = mean_squared_error(Y_test_4,y_predict).round(4)\n    REQM = np.sqrt(EQM).round(4)\n    R2 = (xgbr.score(X_test_4,Y_test_4)).round(4)  \n\n    select_best_percent= select_best_percent.append({'%':i,'R\u00b2': R2,'EQM':EQM,'REQM':REQM }, ignore_index=True)\n\n","bca7d36e":"sns.lineplot(x='%',y='REQM', data=select_best_percent)","983c26f9":"select_best_percent.sort_values(by='REQM').head(10)","f0641678":"melhores_resultados.query('Modelo == \"XGB\"')","552176a0":"#atualizando\nmelhores_resultados= melhores_resultados.replace([0.8678,0.0164,0.1281],(0.8922,0.0137,0.1170))\nmelhores_resultados","90a3f7ca":"melhores_resultados['Kaggle'] = [0.13975, 0.13327,0.14254,0.20214]\nmelhores_resultados[['Modelo','REQM','Kaggle']].sort_values(by='Kaggle')","006d1909":"## **2.3 - Investigando as vari\u00e1veis temporais**","529c03d4":"Notamos que as 5 primeiras vari\u00e1veis est\u00e3o com mais de 48% dos dados ausentes.\nManter os dados assim n\u00e3o os tornam \u00fateis para a constru\u00e7\u00e3o dos modelos, portanto os exluiremos.","e35e27ed":"Nos gr\u00e1ficos observamos que os gr\u00e1ficos da direita est\u00e3o com as bolinhas menos dispersas e o Decision Tree mais dispersas. Observamos tamb\u00e9m que h\u00e1 um ponto comum aos graficos entre x<12, y<11. Esse ponto 'foge da reta' e n\u00e3o se encaixam ao modelo, provavelmente s\u00e3o outliers.","82200d97":"### **7.2.3 Gradient Boost Regressor**","7498e150":"Novamente pouca varia\u00e7\u00e3o mesmo eliminando 177 colunas de dados mas n\u00e3o conseguimos melhorar o resultado dos modelo.","ec16db09":"## **8.1 - Gradient Boost**","1f4a191f":"Separamos as amostras de teste nos modelos com as iniciais mai\u00fasculas. N\u00e3o confundir com o dataset que ser\u00e1 enviado para a competi\u00e7\u00e3o, que chamamos de x_test_competi\u00e7\u00e3o. \n\nSepararemos os dados de treino em dados de teste e dados de treinamento com a fun\u00e7\u00e3o *train_test_split*.\n\nH\u00e1 outros m\u00e9todos de valida\u00e7\u00e3o como o K-fold cross Validations, se hover interes voc\u00ea pode encontrar nos c\u00f3digos da competi\u00e7\u00e3o.","6c4582a1":"## **5.3 - Random Forest Regression**\n\n[Artigo sobre Random Forest - conte\u00fado em Ingl\u00eas](https:\/\/medium.com\/swlh\/random-forest-and-its-implementation-71824ced454f)\n\nhttps:\/\/heartbeat.fritz.ai\/random-forest-regression-in-python-using-scikit-learn-9e9b147e2153\n\nhttps:\/\/medium.com\/turo-engineering\/how-not-to-use-random-forest-265a19a68576","2ae89421":"Leva um pouco de tempo mas \u00e9 importante entender o que cada coluna armazena e o valor que atribu\u00eddo para a **tomada de decis\u00e3o em rela\u00e7\u00e3o aos valores ausentes**. Consulte o que significa cada abrevia\u00e7\u00e3o no arquivo data_description que possibilita entender o nome da coluna e os valores atribu\u00eddos.\n**Sabendo o significado de cada vari\u00e1vel e como cada casa \u00e9 classificada de acordo com o atributo, podemos tomar decis\u00f5es para proceder em rela\u00e7\u00e3o aos dados faltantes. Nos gr\u00e1ficos abaixo veremos as caracter\u00edsticas mais se repetem em cada vari\u00e1vel.**","15f5e5ed":"Observamos nos gr\u00e1ficos de cada classe um dos valoress se destaca. Ent\u00e3o, preencheremos os valores faltantes com o atributo mais frequente.\nMas poderiam ser adotados outros crit\u00e9rios como, por exemplo, colocar None supondo que a casa n\u00e3o teria o item que est\u00e1 faltando.\n\nA vari\u00e1vel Utilities possui praticamente um 'valor constante', como valores constantes n\u00e3o influenciam nas predi\u00e7\u00f5es, vamos exclu\u00ed-la.","0127b791":"## **3.3 Coluna MSSUbClass**\n\u00c9 uma coluna categ\u00f3rica  representada por n\u00fameros como pode ser verificado no arquivo description, ent\u00e3o vamos substituir os valores num\u00e9ricos por valores categ\u00f3ricos.","c63922fd":"## **XGB**","71dcbbe1":"## **5.4 - XGBoost**","1f1d8186":"H\u00e1 muitos dados na tabela e gr\u00e1fico que deixam a visualiza\u00e7\u00e3o um pouco confusa. Quanto mais escuro maior a correla\u00e7\u00e3o positiva e quanto mais claro maior a correla\u00e7\u00e3o negativa.\nEnt\u00e3o, podemos notar algumas correla\u00e7\u00f5es altas com valores maiores ou iguais a 0,8.\n\nVamos agora investigar as maiores correla\u00e7\u00f5es com a vari\u00e1vel SalePrice.","88b4ac0a":"## **3.1 Juntando os os datasets e separando a vari\u00e1vel alvo**","697cae25":"# **7 - Excluindo vari\u00e1veis com baixa correla\u00e7\u00e3o**\n\nNesta se\u00e7\u00e3o tentaremos melhorar os resultados obtidos com a exclus\u00e3o das vari\u00e1veis pouco correlacionadas com a vari\u00e1vel pre\u00e7o(SalePrice). Arbitrariamente escolherei o valor 0,10 e todas as vari\u00e1veis com valores de correla\u00e7\u00e3o menores ser\u00e3o excluidas.","3dbaba92":"### **7.2.4 XGBoost Regressor**","8da07c1f":"Com 76% das vari\u00e1veis obtemos o melhor resultado para o Modelo GradientBoostingRegressor mas n\u00e3o conseguimos melhorar o modelo.","32f5ff1f":"### **3.2.2 - Vari\u00e1veis Num\u00e9ricas**\n","114106eb":"## **4.4 - Separando os data sets train e test**","ef6f2c9c":"As vari\u00e1veis YearBuilt e GarageYrBlt s\u00e3o temporais. Vamos investig\u00e1-las.\nAs demais j\u00e1 foram analisadas na se\u00e7\u00e3o anterior.","77f85602":"H\u00e1 mais de 16% de valores faltantes na Vari\u00e1vel LotFrontage, 5% na Garage YrBlt e 0,78 % na MasVnrArea e muito pouco nas demais. Podemos exluir a coluna LotFrontage e prencher os demais dados.","52cf5340":"## **3.2 - Verificando e  preenchendo valores faltantes**\n\n> Verificamos os valores que est\u00e3o ausentes para decidirmos o que fazer com eles posteriormente. Para facilitar verificamos separadamente cada tipo de vari\u00e1vel.","57f60867":"# **4 - Feature Engineering**\n\nNesta se\u00e7\u00e3o normalizaremos as vari\u00e1veis e converteremos as vari\u00e1veis categ\u00f3ricas em num\u00e9ricas por meio da fun\u00e7\u00e3o pd.get_dummies. N\u00e3o obstante, h\u00e1 outras t\u00e9cnicas para essa \u00faltima opera\u00e7\u00e3o como Label Encoding e One Encoder que deixamos o artigo abaixo para consulta.\n\nhttps:\/\/towardsdatascience.com\/categorical-encoding-using-label-encoding-and-one-hot-encoder-911ef77fb5bd","064f344c":"# **3 - Tratando os dados faltantes**\nA seguir preencheremos os dados faltantes, modificaremos a vari\u00e1vel MSSubClass e excluiremos as vari\u00e1veis correlacionadas da se\u00e7\u00e3o anterior.\n\nPara facilitar as an\u00e1lises e mudan\u00e7as juntaremos os datasets test e train, quando finalizados os separaremos novamente em datasets j\u00e1 prontos para aplica\u00e7\u00e3o aos modelos.","51d791f1":"# **6- Gr\u00e1ficos para compara\u00e7\u00e3o**\nPlotaremos os valores preditos x valores reais em um gr\u00e1fico de dispers\u00e3o.","85acb9c5":"## **2.2 - Correla\u00e7\u00e3o dos dados**\nNesta se\u00e7\u00e3o investigaremos a correla\u00e7\u00e3o dos dados que pode auxiliar na redu\u00e7\u00e3o da dimens\u00e3o, isto \u00e9, reduzir o n\u00famero de vari\u00e1veis explicativas.\n\nTamb\u00e9m focaremos na correla\u00e7\u00e3o com a vari\u00e1vel SalesPrice, isto \u00e9, quais caracter\u00edsticas e atributos influenciam o pre\u00e7o de venda de uma casa em Ames, Ihoa-EUA.","f658adfb":"# **9 - SelectKbestPercentile**\nQuantos % das vari\u00e1veis explicativas s\u00e3o as maiores respons\u00e1veis pelo pre\u00e7o?\n\u00c9 o que vamos investigar nessa se\u00e7\u00e3o com a abordagem SelectKbestPercentile.\nDidaticamente vamos variar o percentual de 10 a 100 e tra\u00e7ar um gr\u00e1fico para analisarmos como a Raiz do Erro Quadr\u00e1tico se comporta em fun\u00e7\u00e3o do tamanho das vari\u00e1veis.","9c6f9baf":"Como podemos observar nos gr\u00e1ficos acima e nos valores Skewness e Kurtosis, o valor de venda possuui assimetria para a direita ou positiva, isto \u00e9, o valor de venda n\u00e3o se comporta como uma 'normal'.\n\nPara obtermos melhores resultados com nossos modelos \u00e9 importante  corrigirmos a assimetria ao representar os valores de venda como logaritmos.\n\n**Skewness (Assimetria)** *'Numa distribui\u00e7\u00e3o estat\u00edsstica, a assimetria \u00e9 o quanto sua curva de frequ\u00eancia se desvia ou se afasta da posi\u00e7\u00e3oo sim\u00e9trica.'*\n\n**Kurtosis (Curtose ou achatamento)** *'mede a concentra\u00e7\u00e3o ou dispers\u00e3o dos valores de um conjunto de valores em rela\u00e7\u00e3o as medidas de tend\u00eancia central em uma distribui\u00e7\u00e3o de frequ\u00eancias conhecida\n(a distribui\u00e7\u00e3o Normal)'.*\n\n[Explica\u00e7\u00e3o de Curtose e Assimetria](http:\/\/www.uel.br\/pessoal\/lscunha\/pages\/arquivos\/uel\/Economia%20Noturno\/Aula%206%20-%20Assimetria%20e%20Curtose(1).pdf)","b1c61454":"# **10 - Conclus\u00e3o**\nSubmetemos nossos resultados no Kaggle ficando entre o top 35%. Uma posi\u00e7\u00e3o satisfat\u00f3ria.\n\nAbaixo comparamos nossos resultados com os resultados obtidos na competi\u00e7\u00e3o.\n\n\n![resulthouseprice.PNG](data:image\/png;base64,iVBORw0KGgoAAAANSUhEUgAAA4wAAAG5CAYAAADF4rqVAAAAAXNSR0IArs4c6QAAAARnQU1BAACxjwv8YQUAAAAJcEhZcwAADsMAAA7DAcdvqGQAAIKYSURBVHhe7f3Pb1NX4v\/x989g2+UsZ8mWJWLFcqSs0EjfEVI3VN8FjDTVW7yrUZv3CFQ6KGpazZtAmNAaMuOm4R2SyAkkbpJPHBw8cZQQBxN54tQQByshGJzv63vOvdf2tXPt\/KRh4PmQ7pTje+\/55Y7Eq+fc64\/+f\/+\/\/584ODg4ODg4ODg4ODg4OOqPjwQAAAAAQAACIwAAAAAgEIERAAAAABCIwAgAAAAACERgBAAAAAAEOsLA+EabawXlX2155XfVljYLpp\/rb7xyE8WXyq+ta7M8pPoyAAAAgENVXM9qIb6g7HrR+2SXiutaX19Xw7tKRa0uJZVcWlWx5H22TVHrKwuKL2TVrPni6lMlZ59qNeCioumD7cf2Y4\/jeUuOMDAu6uIX\/Trdv+qV31WrutHWr49uLXrlJuIT+uiLYd1YblAGAAAAcEiymvjmvFpOndIp52jR+etxrXtnm1mNd+mzFnvP54rkvA99smPf6rxz3jtazqtrtjbAFRd+1Oe\/911z6owu3896Zz2bT9V36Yzvmvo+riryZ38d\/qNLSe+qo0Rg3BGBEQAAAHjXZO99ZkLV5\/rxiRu\/1v\/VpU9N0Pp8qFm+WDch0wS433+u2zcvO\/dvC4z\/7tNnJth9efepF+zWlbz5qQmN1xQvZ8ZiXNdMoPz0fye06q0+Zge\/NOH1M\/X92y1bC6FPdOqTbzXhdWn9iQmZpo+XR6uRcfsK44J+\/K9TavnrxK7C79t2sMBYXNVo\/5TOtUd0+m+TupFY805I+elptYZmlfLKVmp0Uq1308o7pXJgXFEqOqmzV4d19ta0BlZ2sfXT8UbLk9NO22euT2s0V9DoXVP\/6Ip7ei2t9tCkeh6vaiAc1emvphSzn2+tm\/amdeFvw6bPY7oynFG+Zstofb3P3m5gXMsoFB7Tma\/M+EMJjfrH32h+i8sK3ZnUlfK\/eR5nfsOPRT4FAADA+21Btz85pU9CC17ZlbzZolN\/7FPdOp\/Pqib+GdFTm8Rmu4ID44uniscXtOpfUKy\/1vw9fSEe19MXXtnKRZww2DXrlW1b35zX+X\/6++itKN5svHZYNG19cupT3a4d2pE5QGBcVeibfh37asSErscm9IzouAmAZ+8XnLPL\/cMmLE1o1Cm5Rm+Z4NWW8AKNGxh\/ezmik9+NmXBpQ5M532oCVmanh\/62FAtHdMwGzusmJJl7T389rN\/Z+8vBbjmh07b+S6Z+Ewxbb81oRgX1fOe2ce7urHr6x3SytV\/HQ2ltOjdtKXV3uHm9zew1MGYS+p1p\/+M2O\/5JnbPBtDL+ZvNb1ECnufbraV8gX1LrJTPeO0teGQAAAHhPeeHs2r+8sqc49a0Jdl9qZDebGBsFxm28FcZzt01MbcxZYWy5qgl\/iKxXTKrLBN3Gq6BuoHxXVhet\/QfG5zM6YwLMhcnyitiW8nOPFfNWyHYbGD9qn\/FWHI0tN\/Qc2ymcrc3qrLn3ZK8viZnwZQNifWCsuaZY0Mz0nGK+QJrqM\/1snXBXH1\/N6dxO9Tazp8DoC33l7mwt60a7Cbg9JvTtML+27mNfRNSedouandRvvxhUa+W\/aAAAAADvqW2reZ5dh0Bjx2sX9OMfz+vT35\/SH\/7UpXhgEPRWEc+2mEB5VZEnzV5UU\/SCZ5cWGlz2rq0uWgdeYXRW68IJ9cyuaNM38N0GxvpnGGMhc83VRM1W1m0SXliqyXDPdOOqL9h5gfFi3C1WvdHm0pIGJud0w9kKau4p93M39Tazp8CY1sVWM\/6+Z165XvP5LYfrk3fdLbixfwzWrTgCAAAA76lfJTCu62k8romh27p8vkUt\/3VbC+62RJ+iVufiio\/26ds\/n3FC44T3hFwtExZvnVdLy5eKBJ633r3VResQnmG0zx8O6jcm\/HzUGjEB7aVzareBsbyFtSzVG9FHlybdFb9GAoNY3ctpggLj1jOF2m0\/B91tqiaI3bhl2iv3czf1NrOnwBgcmGs0mV+rGhJrwyMAAADwXlsd0ZcmMH47VbtUtz521YRAE9p2k7j2Ei5fjOiyae\/L+832urrPVbbcql8eLOrpXbtd9TPdbrS0aLiri7UvzXkXHDAwFqu\/MWjCmBOsvEDoBsYxjVZ2f75Uz7Xq+cozjDXP3BXcQPfdbHWbahAvDJ4Z9oXN9Tlnm2rTwFgOcBmvbDhbUsuB0bvn3Jjvi3z1WBdsWDv0wOgG0WOdj73nJ62i6cJjDaS8cTWZX8fitE7Y+u\/b7aiN2gEAAADeN1n1\/cmEs\/+Nm79BlxUV\/65Fp\/7U7KU3Pg0C42r8R90OTeipV3Yldc0Exs\/uuTUXn4yYa\/qUrNmmmlXkv0\/plOmTn\/v21E+3\/SxHLW918Tv\/eN4N+w+M6WmdNOHqd33LbqhZTav1axOArs25YW\/Ghph+He+c1czKikbDI+4qWV1gPNY6rNbpVeXXVhXrj9a8OKexlxq4buqyK27DJmBNzupiW0THL+0QGL3n\/C5M2Pq3tJmZ04XL5p7KSqi3mnh5TD1LBdOnFfV0RkwfffU2s0NgXB6O6sTVCQ08d8v5+yM6ZvsTXTFtFZSKjlXHv9P8OlbUbj+z\/fM\/CwoAAAC85+xqog1iV4cWtLq+qoWhq\/r0VIuujpWXF1c18tfz+vxmg99mbLTCuHDbqef89RE9XV3X+uqCIm2fmmt9q38vJnS15ZTOXPpRyRX7UxhZxW99ZvrTUrPqmR2yYdEEzVsTisfj1WNutSYYFuPXtv0kx7viACuMW0rdNwHIhhUTbOzxcduUYpVv46Vi4WF97J07GVpUT8CW1ItR80\/nOUL3OB1e8q24NbG1ptHQiE58FTHHiK7MZNyw1ywwmj6NhiKVPh37akztd+q2zubmdNGEsHJ\/zkQWa+ttZofAOBMedJ5JvFF+UY3pz8xdL0h77VXHv9P8utyV3LrVVgAAAOC9V9TCPz\/XGRPInB+6b\/mDLt976gtiT\/XjuVNq+e9I8Ipjky2p6\/+6rS\/ti2y8ulvOfqkf52r\/Il5ciujbP\/l+lP\/3n+nbUX9LTX6U\/88Rc7bMWy19B1cXrYNtSXW80eZaQflXlb2n+7ClzUIh4KU51bBUPbxwt1WsfQmM93KaY6FKGmvs1brya9VnAbdz+xM0Juc5zKB++beK7pUZi11hrB1P2WHMLwAAAPCeKhWdH7x\/K2Frc13rO61mFe0K47sY9Q7HIQTGt8QJdXZbaP1hg563FfObKY16W0dH79rtrIO6GH\/LX9Z6fX+8o\/D+\/ksCAAAA4MP07gbGnayldaV9sLK99ONLI2qdbPbWIgAAAADAXvznBkYAAAAAwFtFYAQAAAAABCIwAgAAAAACERgBAAAAAIEIjAAAAACAQARGAAAAAEAgAiMAAAAAIBCBEQAAAAAQ6NACY+5ffQqPprXhlR1bBaUnhxTuCavvflK5ovf5fuUTCnc8UPqA9ZSKRZW8P\/+n2HgSVfRJzezuz1pGoVsjOvFVRCeuRnVlctU7cbSW70d17n6Dvuyrz0u6Yq+vO67MeKffimXTZr\/ORgteGQAAAPjPdjiB8UVSfXe6Fbo37wuMRaXvd2ogmVOxVNLG03F134kr553dn6IK+YOGpg3N3+vT\/LpX\/A+xMd+nvvkDjn1rSa2XB3UhuqL8+kvlV5bU\/o0JOPePPuAs9w\/rdH9AENx3nxd18Ythtc8VlF+rHpsH\/Y8WTW0pn17W8lttAwAAAPj1HEJgLCj5kwlgy\/Pq8wfGdVPuSZqzZSVlfu5QbMUr+hRXkkrni8ovJhR\/mFTGVlLMK\/UorvijlMwpT0Hph2m3zmJWySd5FZ+nlHgYV2LeBFPnGst3naNcLio7O66BH0IaGDN1P6leUXyRVtLUE380r2xNLjMh9WnS9Ku+jTqbpr+z5v6HCc2v1AW7jYxb96zpw2vTl9lstZ6tDWXn7bjjSj61PQzmBkZzftntS+Xakmn34bxy\/iXTfFrxhfz2VdTlhE63JbTsFR25jAZS5Xl4qdRkQldCk2q9O6fU2pb3+Yp67qa1vPJY7ebcleGM8ltvtDw5rVZTbvet+OWnp9U+XZ3X+rJW0roRNvWHptWTrqb2hoFxxz434gbGGzU3+jToh+1vT2pNo3fNuVH7L6s79tTjGTMv0xpds1fZYDjnzEVrOKHRlTf2Q0dqdNLUV\/6zuT6TUci0U5kD0\/eQrTs0pRvTu1kpBQAAAI7OgQNjYa5PvUnzl2EbEP2BcXlcbZNZr+ByQs\/c9r\/o28+778WUXCmokImp94de9Y0mlC0UlH00oI5IygtSWcXaYuZ\/DdvenbCij7IqbJjQNNatkGnPDUm+6xzlckkbv6Q03hPW+EJGGS+JllZiCt+NmdC6oYIJrw\/CA0p5GSI3HVbvVEaF4oZyyQF1jmW2B7H1lAZu9ir2NK+NjZzm73frwRMv+j2Lq\/vOA2dsG3nT9lCveivzVND8YFgPTIC0Y0hP9SpcGUMtO0ehu0OKbbvWBPGxTo1nqndlJ2vLFa8e60JrRBcnn2mznAUrioqFBnX8mgk5SwUTHCd08vKkYs51JnxdiuhMaE4zS0u68d2gTl4d0YXhZaVSs7pweVCtM26F9cGvppxJ6HdfRU14WtFyak4Xr5q+JNx5ahgYm\/a5mSaBcYd+HP9qRBeHH3uh1I59UKfNvPRMmtD8StqMT+jE1QkTLFeVMgHz7FfDCnntjN7q18V4+c9mPttMO9HHimVM\/csz+p0dS3TZhG93Ht+F1V0AAACgkYMFRhuUwt4207rAGLiF0gSz+hBp1QZJu2U0rOQLr1gT\/uoC4\/\/NV1cRi2k9+KG85bVRYLTqt6TaFdIhpTa9olF6+kChaVvThlIm0CWeu587GoSWkj+fVcJywKqqCZDlrbulzHhdALV96fWNvcrOUdtIuvbaHm8cZl4r9ZQyGr85rqC86Mgt6srfIvpN66BOtE\/UrnIVi75Q9kw3rpYDlw1fYxotnzOB6aPrcypPmT\/sNQ6MRQ10VoOl4\/GUTnw3q7z5Y8PAaDXrc0O2z\/36zWXfM4zXZrW8m370PXM\/d9SNXStq\/3pEId+\/E5vRqH77jyXnz7WBsV8XpnztmH95Nl9VVyM1NaaPbi16BQAAAODdc4DAaJ9RDCte\/rt1XWAsLUXVMVX7xOLGwoDCdjWyTm24rA90TQKjf0Wz0XWOZoHRnutUd0\/YeTmPc9zprATb0rOE+m6a8\/ceaHw2ow3\/3\/8rSs621fH7fe7935fvD3he0tfvoFCdnWwL3LZbG6pd1Wtziv8QdUKiDaHdD3fxpOhWUXlnda1fv4t4ASxnt2mO6YwNV5cHTUDzB8YJjToXGTYw+oLO7gLjqm601QU408Yxb7tp08BYFtTnhmyfg1YY99qPurF7QfR4+V57XOqvzEd9YCz\/2fVSqei0Lvxt2Nxnwu9fqvcBAAAA76L9B8ZfYuro6KqGrHCXV064q3x2Ja2yldSVexiqbtX0OfrAOO67NlipWFA2+UChn\/zPZbqKTx+o++e0CkVvWa+ykuquUNasGBbqAmN9CJzoUOwXr+Bjr3VXPcvs6mWoEtjt3EaXisqMdVdDfL1X68qv+1a4rExCp7+ZMWEpoyuXh3VldtV7MYwNVocdGE19Gffzeg0DY9M+N9MsMO6lH0GB0b\/iWKtZYMxHozp+fVapgvf\/gbp5BAAAAN41+w+MWyUVi8Xq8Typvv9LKl8OTc72ym7FVryyCUoDDbZKHn5gzCnW0afyYmYxM66QLzA620zt\/kOH+wxg9Gk1yBYWYoo5b94pKDUSV+a1+7lep\/WgI+Zte62qD365h92VFUq7qmrDpLMyuWUC3VRYHeV+v0iq947pV7n+Heao7QcTbH3X9lW24BqmrrCZt9oXDdWZmdRvv57STGWob5S6O6zf3rHbKeuCUG5GZ\/ezwhgx9f39sfK2nuKK2tv6K+dSdyM6Ga4mtc34lM71Z5ytrQ0DY9M+mzqW0hpdeun8uVajwLjXftQHRrultV\/nouV\/QbeUikzoovfin2aB0am7st31jWJ3BgmMAAAAeKcd+KU3FdsCnFFIKxrucrZ7dn3fp8SzgCRkHH5gNE0\/iSrc0aHOm10aWpjXuO+cDZBh83nvv7y49TqnxL0udYXdldKuewnlvGDm1PN9t7OK2n2n1315Sb3Xpm1vnOGwuWbyQSUw2kCan4+aIGfO3Ytq\/mmipt\/++neco3\/NK3bXXdHdfq0N6G3qnW0YF42Xmrk74j4LaLdS\/qVfv\/luWjPOXNvgY879xZ4zx3cTulDzDOPuAqPWl3TFhMSPWk3dX03oRth3buuZeq5F9JtLdivnoDkfVU\/GTagNA2PTPrvh7djfg0JX48C4t37UB0bDGaO5z25rtVt326YU8\/59bRYYtW7qMu0521nNvRdvRQmMAAAAeKcdXmBsolRZdXzHlYoK7qpdTd15DKViUaXyCp2f\/zPfltSq3dVfFjyfNjDWPS\/ZiH0W0P4u4auAzhZfKl\/eMvm22Dbqt5nupFmf92s\/\/fCz22X33J8tbRbe9u9BAgAAAIfjVwmMH7LikwfquhtTaiWn3EpK8XtdGliojYsHVXyW0fxUrzp\/DvjJDwAAAADYJwLjr6D4wgS6R\/ZH\/ZNKPTvcsGgV8xllVhr\/6D8AAAAA7AeBEQAAAAAQiMAIAAAAAAhEYAQAAAAABCIwAgAAAAACERgBAAAAAIEIjAAAAACAQARGAAAAAEAgAiMAAAAAIBCBEQAAAAAQiMAIAAAAAAhEYAQAAAAABCIwAgAAAAACERgBAAAAAIEIjAAAAACAQL9+YHxdVLHk\/TlQScXmFxxIqVg0LRyizZzSvxS9wgEcVj17sfV259p+l\/lMRoXX5aL57t9qewAAAAAO068eGLOTbeqb3\/BKAdbn1dcWU9YrHq6sYm19ml\/3iocg\/6hbbXcSynvl\/TqsevZkJaa2e\/Nq8m3UKZoAmNPGbjNfMa0HHR168NQNwhvzfXtsDwAAAMBRIjB+yPYcGA82fwRGAAAA4D\/LAQNjUfnFhMbv96nv\/riSTwvbtnturMwr7pyPK5UvbQ+MxYLSs1EN9QwpOps1xZ0DY7nOcCSqxGK+0mZxJam4rcMrW4UncSVXyp94gadQVLbc5qOU8r4b3Os3tJFJ6MG9Pj14aM6\/lkqFtJI\/D7njeF69YVublfGYeyeSym56n3v20veNTLI6t5namFUeV3E5qWgkrKGfk6q7ZLuNrOYfPlDfvQeK27YDAmPxeUoJM85y\/6rjyipp7u1tC2lgLK74k4J3wrtnwq13fDZd3YIqMxcP40q\/cEvbAuMOcwUAAADgaB0gMBaVvt+hjrsxpVZyypkgNH6nQwML1fhRmB9Qx50HJkhmlMmkFLs3pIF7vsD42gQ4c0\/vVMqcz5jwYELH4IDCTQJj8ckDt85MXoV8WrG7nRqYd8NL0ApWbUC1gTGsgUETUEywsW2mpnpNfaY9L+TY68Omn9FH9nxaiUEzxkFTHk0q7fWx27fKVttmTnFvPLlCwYRSc62v7t33vaTcw7A67dyaNp25u9uh7qlcJWA6\/TT9GvLmzhlHxwOlG4UuE8QHOrp94+7TkJkH\/3xtLA6p0\/d9xe91qnMs47ZZ2lDOhOghM3\/jC+a8l7KdMXX0KraYVe6ZCaRj3Wa+Ul6ddr7bFFtxCnuaKwAAAABH70ArjKWCCT6+v+CXlqJqK4eFUkbjJkgkvdUlx+uMoh3VAFeYNSHnZy+QeArJXrU1CYxOAJyrrm5pc6PSh90Fxjb1Jn33m9YzP5vgMut+Zq9v8\/fJWfE0Qayy1Lah1GCbokvuFTVtOttpx319L6m4Xn3Jzq777tQzpJQ\/\/DlzV51Pp58jad\/cbWjehPEHT\/xrlGVmjGNmjAHjrglwP9R9X9s+81Zo\/VtSXxeUL\/i+QfO9R9sGlHIqbRIYd5grAAAAAEfvwM8wlooF5eyK1Wxc45HuaiB4kVT4h7iJHH42pJQDnPvnbQHH3rfTCmNHWEOPUsrmN1Ta8k4YuwuMIcWfeUWPrbPtftrZfukEsUlf6wHPVPrrrG3Trpq1qfNeTPNPcyrUvRF0t32vCd4VdkW3Ol\/b+mnUjtWvoGTP9nE77fi\/r66oks6KZvlIabynGo7d+Qt4hrFUVOGZuX4xqfjEkG8Ftklg3GGuAAAAABy9AwTGglKRTnV8P6Dow7iSixnl5sergeCXmDp6kuaqWtmJcqipXamr2MUzjMUXGc0\/imoo3OUEsNiKW8fuAqN9htErli1X+32wwGhsbShngpN99rD7pglEkVTNHOym7xsLA2qb2D4D1bkL6KfRODDmFDNt1a4eGr5xO9\/XDwMaN99lvO7Y9gyoLzAWFobU2dGlgZ\/NtbMpZZ7Na3xXgdHYYa4AAAAAHK39B8ZncYXqVhBrVqw2Uhqo2cpp2ZWuaqjJTXUoNF23Bmnr2CEw+jmrg14\/atr3+ENWOcDUh9RCMqyOKbcfBw6Mflt5Jcx4g7eJ1va9pp6AuXXnrkOxX9zS3gKjG87r+2HHXft9RZVputBXHxjtltW6lUtnS+ouA6PfDnMFAAAA4Ne3\/8Bog1RHtBoIX+eVHPQ\/E+e+FKfbhJryJYU5uxrlCzUmGHV3DFRX\/IomYIQ71NEwMNrn9DoqL4qxCrO+EPIiqV4TVhLOW0xL2ng6rrC\/PSfAmPrDpv5Kp9yXwZRDz4EC40pMnf4XtxQzGv\/BhDwnMDXve22YMuHwJ3Ot73nHwpx9gVA1RO4tMLrh1Hm5j2\/cQzf935f7TKP\/+3Lm5qb5fioB0c5f2MyvV\/TGFPV+Z9HWkU+afu4mMDadKwAAAADvggNsSS0p96hPnSaAdd3pUsfNIaXmfFscrdc5Je51qq2jS10mnISnskrXhZrCk6gT6jq\/9+pY3mFLaiGtqA2V34edbYwdYRNaK7mq3CcTpky\/trdnA4wJM8spJyx1fW\/7FlbU9xMRBwqMlfY71W23nJp\/9j2qvtm0Wd+3rb5tZp23lLZ1dDohu\/OnmDK+l+DsNTDWfF9m3E5oflr3sxom9M+Php1+d31vwuTN3pq5sZwtqHZ+vWc+S88S6rNj+b5bXaavQwu73ZK6w1wBAAAAOHIHfumNtkoq7vTCktdFFX1vU93O1rG3N2SWzPXN69yZreOtBBRnThrXvae+7zh3e7Sb76tk2tzjS2icufS9xGfXdpgrAAAAAEfn4IERAAAAAPBeIjACAAAAAAIRGAEAAAAAgQiMAAAAAIBABEYAAAAAQCACIwAAAAAgEIERAAAAABCIwAgAAAAACERgBAAAAAAEIjACAAAAAAIRGAEAAAAAgQiMAAAAAIBABEYAAAAAQCACIwAAAAAgEIERAAAAABDoo9V8XhwcHBwcHBwcHBwcHBwc9QcrjAAAAACAQARGAAAAAEAgAiMAAAAAIBCBEQAAAAAQiMAIAAAAAAhEYAQAAAAABCIwAgAAAAACERgBAAAAAIEIjAAAAACAQARGAAAAAEAgAiMAAAAAIBCBEQAAAAAQiMAIAAAAAAhEYAQAAAAABCIwAgAAAAACHWFgfKPNtYLyr7a88q9pS5sF0\/b6G698GI5yPAAAAMCHqbie1UJ8Qdn1ovfJLhXXtb6+roZ3lYpaXUoqubSqYsn7rN4O1xRN\/baN7Udtq4HXbXonj9gRBsZFXfyiX6f7V73yr2lVN9r69dGtRa98GI5yPAAAAMCHJquJb86r5dQpnXKOFp2\/Hte6d7aZ1XiXPmux93yuSM770Cc79q3OO+e9o+W8umbrQt7Cba+ORtck1VU+V3\/8OWISiacY17dB19xMehccLQLjoSEwAgAAAL+W7L3PTLD6XD8+cSPi+r+69KkJWp8PNfv7+LoJmWd06vef6\/bNy8792wLjv\/v0mQmfX9596oXPdSVvfmoC4TXFy3nwxYSumrD46f9OaNVZWVzX07tfqqXlqiZeOFc4tq0c5ib07f\/H3Ne94F1h5CL6\/NR5\/ThXd+17scJYXNVo\/5TOtUd0+m+TupFY805I+elptYZmlfLKVmp0Uq1308o7pXLAWlEqOqmzV4d19ta0BlZ23ia6uTSnK6FJ9aSq2z+XJ6bUemdWM+UvcS2jUCiq01ejah3OaDM9a\/ozrVGni9XAmE8knP6fuT6lkPmSKtbSardtPF7VQNjU89WUYt6pYLsIjGa+Bu6OmbHa9qbVk\/b\/9483Wp5O6Mr1EZ2wfe438+QM741mhs28hR9r2bnO44xnysyXVwYAAAA+GAu6\/ckpfRLyBS8jebNFp\/7Yp6xX3m5VE\/+M6Kn9a\/hsV3BgfPFU8fiCVv2LhXXXro9dNWUTDv1\/nbcriiZEfnavSetDn5vgWRsq3bq\/1Mg7uu50gMC4qtA3\/Tr21YiuDD9WKDyi4yYwnb1fcM4u9w\/roy8mNOqUXKO3TEhrS3jBxw1Yv70c0cnvxkz4GdOZr8z51mHdyOz0HGBBPd\/56no+q7Ot\/fpdxJvl53NO2fbtggl9F74zAe0b2x9Tt3ODFxgvD+pkm217Uuds+YtBXYy\/dKrQckKnbf8umf79zVxza0Yz7pkGdgiM6+b85do+HfO1txwZ1rFW08\/wrAaGp3TGXvvdrBOuNyfGzLURtaedSx2xfwzqo0uTivHIJAAAAD40zqrcKV37l1f2FKe+3X34ahQYt\/FWGM\/dNjHVtXr\/S3Pvt9UVR4cbYhtuJS2aQGnO16wuGm6fr2lkLqIfQ7d1O9SniX\/XJNEjtf\/A+HxGZ0xAujBZXhHcUn7usWLeCuFuA+NH7TPeiqOxtaTWSyYo7War6PKMfmdC4bmxNVOvCU+m3vKCoxOmWqMaqMzzS43+3XxWHxhrAldBoXZf\/7zAeLLX7e3OmgfG1N3Itj4N3IroxHUbCtfctjsfe+eMXEYDs15dW6ZuM9aTd8vLie48\/fYfS14ZAAAA+IB4gbFr1iuX7ToEGjteu6Af\/3hen\/7+lP7wpy7F\/auC5W2rg9XVxOzQl+7zlP7nE30CVxcN53NT1x+++NaExdv69s9nTPnTbc9MHpUDrzDaFcFz4YR6Zle06RvTbgNjfcCKhcw1V03488qNbSnVZ9owQepju\/q2WE5+Xr+uz6lm2+\/U2PbAWBdM7SrfR1+MadRW5QXGi3H33M6aBUavT39vHISdFUZ7\/\/Up3YguKVXzBtctxe6YwPv1tDsvs5P6bd2KIwAAAPDB+FUC47qexuOaGLqty+db1PJft7VQCRhFZe+5AfHMufM6f+6MOd+nvusmMF4PWGFssLpYUfOG1aLi3+20tfbXcwjPMNrnDwf1GxPcPmqNVLdY7jIwlrewlqV6I+7Kn1duZjM+YYKTqfOSaeeV92GDMChzbX1grF+h2xyLmmtG1GOfczzkwBjYpxruM4ytfxvWib+Ya01dJ0KL1dDrC4nOCmo5PAIAAAAfmtURfWnC2rdTtatwwc8WNrCXcPliRJdNe1\/er\/27fjG3oLgJlfGFVRshFfnvU\/okIBS6q4vfKr7LF9m421R3OY637ICBsajN8sLe1jM3FHmB0A2M3mqd46V6rlXPlwPWb+\/4Q5u3LdR7dq8pu331cr+O35pyng08Hkp74WrLDaY12023NBM2QbR+hdG\/Hba8ilcOq4caGL0+1YW8fOqxBhLPvH6\/0WblNxy91dNKf61ltX9l6591tqM22voKAAAAvP+y6vvTKbX8b9z3O4reytyfdrky1yAwrsZ\/1O3QhJ56ZVdS10xgrLzQ5t8TzrOGSf\/2UmfV8xPdrs+L3uriZ3eDelXU0\/u3dfte0nsjq8t5A2xLV+WZyaO0\/8CYntZJE5B+17fshsbVtFq\/7texa3NuCJuxK2ImyHXOamZlRaPhEXcVsi4wHmsdVuv0qvJrq4r1R2tenNOYCVR2JdJ7JnAzMWHuG1TrrBe4Ft2+Hb82rZ7Jx+q5G9Xpy9ufYbQvmTk7vGzaLig1OaGTpn\/Hy6uOBwyMm4lJnf5qRO3lBytnJ52x\/a53ScumveXZaecZTLe9FbXbufsmoZQNjcWCRu+443NWOz3uc5Dmui9GFHrufQgAAAB8gOxqYsupT3V1aEGr66taGLqqT0+16OpYOXqtauSv5\/X5zQa\/zdhohXHhtlPP+esjerq6rvXVBUXaPjXXfqa+f3vXeCGw5X9+VHJlXatLE+r6rxZTHjGt1nLDX+PVxdpxrCvr\/UZkw+2rv7IDrDCa0HY\/qhM2BJogZI+P26YUq3wbLxULD+tj79zJ0KJ6ArakXoyaf9q3o3rXnQ4v1T57GCTjhrlqsHypgevmfruC5+WzzccJnbsa0YmvIjptQmtqavuW1NN9i+6Kptf2iWvmOu\/+gwbGfDTqPJN4obJMvqX8mBtKA9vLzOqcbx7ss6FXZrw3tpZ5fapdGQUAAAA+REUt\/PNznTnl\/dB9yx90+d5T34rjU\/14zoS6\/44Erzg22ZK6\/q\/b+vJsi1uvOVrOfun8TmKNlRF9e758jX1pzY++Zxw9m3F9a39qI3B1sayop0Pf6ry5zq3rjD4P1a44HqWDbUl1vNHmWkH5ynbK\/djSZqEQ8NIcX4CqHLXPRTb0qnY\/c\/mlN6GgPcrru+u\/s600qE+VELwbO8yX7Uuhru8AAAAAgpWKzg\/dv5W\/QW\/u4gf07TWH1Lj9of93LQkcQmB8S16tO1tFtx91q24BNifH9JsvBnVheNnd\/pma08Wrew12AWyY29YfcxDwAAAAALyH3t3AeCBvlBoe00nvbaMftQ7qZGdCM2sHWQUFAAAAgA\/LexoYAQAAAAAHRWAEAAAAAAQiMAIAAAAAAhEYAQAAAACBCIwAAAAAgEAERgAAAABAIAIjAAAAACAQgREAAAAAEOjIA2PuUViJX7zC+2IjrehoWhtecf\/eaHlySmevRnTiq4jO3JrRzNqWd+4oLenKV1OKeaVa++vz8v2oc33NcW1Wy975t2FzLKpjl6c045UBAAAA1DrywJidbFNsxSu8L9bn1Xdv\/sCBMX9\/RB9\/M23m56U21wtKRcd0\/PKkYkeeGRd18YsJjXolv\/32ebl\/WB91zim\/VqgehaJ39i0prmomve4VAAAAANQ7WGB8XVBmPqH4w7iSTwuq\/PW+mFXySV7F5yklzLnEfK56ro4TGDMbyszGTT0JpZ7XXll8kVbS1BF\/NK+sL4EVV5JKrlSv9Zftn9P5orK2zicF57NaJRUy807f4rNp1eaSovKLdkwJzf9SdOt64Z0yGvWnhhcYC5tmHura2MgklDDjrTL9TCZU85Fn9Fa\/Lsa9guOlUtNpLb\/yirmMQncn1Rqa0o3pVe9DE9qmp9WTWtfM8JQ5N62BlTfSmrk2bK4N+1f8VtQTmlXKK20rb62bwDdt6pjUlX7TbmWeGgfGHfvcgBMYby16pToN+2H6ezet1OMZXTHjHF0rj31No3ZeRr3\/EmGC4Wi\/nYtJtUdXlC8Pfy2tdnN\/3vwx8L71FQ0E3QcAAAB8IPYfGEs5xe5068Fs1oQhExwne9U9nXPP2cB0J6zoI3NuI6\/UWLdCk1kT07azgTF0N6b5ZwUVTDh7YOpMPHfPlVZiCptz6fyGey48oHkv\/23M96lvvpqy\/GX75+7wkGKLGWVMcKxVUm6qW90jSWVNiitkYuq9E5fb86LS9zvVO2VCxEZB2UdR9d0NVVZAm\/Wnhh3\/D70amrRtbCj\/1LQRjin72px7kVTvT0lVbrPX+ss+qbsRHb+WUGzVBL56yzP6XWtEF6PLWl5Z0o3vBnX2vluLDV\/H2ybUPr2i1OSETl6K6PS1KY0urWj0H8M61j7jhKTtwc9ffmnCX0QnQ3OaWTH33Y3qxDcz3hbRxoGxaZ+baBwYd+jHpUEzNhP2Jt1Q6oz9qxFdHH6sgZSZj61nuvFNRGdtsFxZNoE4ohOhtDbt7csJnW5LOHVtu+9VWhcvmzm1962Z4Gj6cPwfS\/YuAAAA4INxsBXGki8CFnzbMG0I+r\/5aggqpvXgh3Ioq2UD47jvQbXCXDn4FZT8qVdJ3+peKTOuzrGMEzx3Cox9c0ERzLNV8oXXgub\/r0\/zdmeiCXPhmq2kRaUi5S2zzftTw46\/7YHSNiB6Csmw178Nzd+r1lOY7VXvbKO+vtTM8ITOXOrXx5eGdTY8Z8JLeZlrS5uvfKFsaqwSuGz4Od33zPmztKobbRG1V7KYP+w1CYzpaZ2sBEvrpXquDap11v65cWBs3ufGnMDYOljzDOMV+3Dhjv0Y06iv+tqxS5sTYzp+xxf0tjK6YoJhz5r5c11g9N\/neOX7jw2Z6rUAAADAh+JAgbH4y7wSPw8p3BNW+E6XOvyBsSZ4ZRVri5n\/3a7+GcZq8Au4x1fvjoHRd26bzZzmH0U1ZPsd7lZXhxcYV2Jqm6ztZbV\/zftToz4wW766i4tmzpL2rA2hQ0o5y107WHdX145fnlDM2d750tmmeeFvwyZcmaD1l\/7awNhf3qJqA+OwblSSzi4DY3xiW4A73lrebtosMPps63NjTmAMWmHcYz9qx+6Wj\/3Ff\/+gftPqzUd9YPTdZwN5PpHQlesjzj0nLg3qGIERAAAAH5j9B8bnCXXfSyi34a2v+cPToQXG8dp77CrmYOqAgTGvxJ0+JZ5tqOSsTNkVPy8w\/hJTx8+1K4bZCX9gbNyfGnb8dSuqpaWoQuUtu5spE1aTKtjtqZFUg+c732hzbV2bNYtzWxr9uwlLCTOKqAli12eVKj8caYPVYQfGvwcEOEejwNi8z800DYx76EdQYNy2cljWLDA+ntLxtinz3b90y75rAQAAgA\/F\/gOjXTGbqManjcUHh7zCWFJmrFMDlYcES+ba7sr2zY2FAYUmMm7Y2iooea9tl4GxLvhtpPSgvMLoPJdpwqT34p3Si3kN3Sz3r3l\/atjxt4U0vlyOngUTSkOKV3KLqevnkJmjsKJL2za0egoKtffrXNT3Fs+1x7pwaUSh5\/VB6I3p9+A+AmNaF1uH1Z62W1u3lJ8c02\/L516Ztlqj6ilvJ916ptCtCQ04c9EoMDbvs7bWNDOZCXx5jO1zYGDcYz+2BT+7pfXrKc2UU\/n6oq5cT7jlZoGxJqhuaXl4hBVGAAAAfHAOsCW1oFSkS11hu60zrKGp8UNeYTRe55S457Vxp0vh0bRp1eOc61TbzU5zPqb5f+12hdH0fGFIXd+bOu2W1KGYxsvPMFqbWcUj7rmhh1mlKiuMRrP++DnjT2h+qtdt4\/su9T3KmZhYZZ9\/7OgYV6ZRXrRyc7r4tX0W0N1K+bF9yc2YffjOMMHnovnsuN1medl8fiu6j8C4pZT9\/cNW00broM5EErrgC2CbM1M6Xd7Oaf55OrzkviymYWA0mvXZhrcvTF8ybtGvYWA09tKPbcGvPEbv\/uN\/iejcfS9oNwuMNpi2D+o3Zm5PXDZzExpjhREAAAAfnIO99MZ6XVSxWeg5DG+jja2SikGV1q1+Vbek+uylP+Zad+trLeeFOXXPSza0bn+X0NsaWWNLm4WCNsurZ2+FbaN+m+kuNOzzfu2zHxV2u+w++mPH8WrfjQIAAAD\/0Q4eGN8nWzklfgrrwWxauWc5pWejCodjyh1qWC0oO29\/PqT2jasAAAAA8K4hMNbb2lBuMan4w7gS85m6H\/U\/BCVTfyajXOMdswAAAADwTiAwAgAAAAACERgBAAAAAIEIjAAAAACAQARGAAAAAEAgAiMAAAAAIBCBEQAAAAAQiMAIAAAAAAhEYAQAAAAABCIwAgAAAAACERgBAAAAAIEIjAAAAACAQARGAAAAAEAgAiMAAAAAIBCBEQAAAAAQ6NcPjK+LKpa8Pwcqqdj8ggMpFYumhUO0mVP6l6JXOIDDqmcvtt7uXNvvMp\/JqPC6XDTf\/VttDwAAAMBh+tUDY3ayTX3zG14pwPq8+tpiynrFw5VVrK1P8+te8RDkH3Wr7U5Cea+8X4dVz56sxNR2b15Nvo06RRMAc9rYbeYrpvWgo0MPnrpBeGO+b4\/tAQAAADhKBMYP2Z4D48Hmj8AIAAAA\/Gc5YGAsKr+Y0Pj9PvXdH1fyaWHbds+NlXnFnfNxpfKl7YGxWFB6NqqhniFFZ7OmuHNgLNcZjkSVWMxX2iyuJBW3dXhlq\/AkruRK+RMv8BSKypbbfJRS3neDe\/2GNjIJPbjXpwcPzfnXUqmQVvLnIXccz6s3bGuzMh5z70RS2U3vc89e+r6RSVbnNlMbs8rjKi4nFY2ENfRzUnWXbLeR1fzDB+q790Bx23ZAYCw+TylhxlnuX3VcWSXNvb1tIQ2MxRV\/UvBOePdMuPWOz6arW1Bl5uJhXOkXbmlbYNxhrgAAAAAcrQMExqLS9zvUcTem1EpOOROExu90aGChGj8K8wPquPPABMmMMpmUYveGNHDPFxhfmwBn7umdSpnzGRMeTOgYHFC4SWAsPnng1pnJq5BPK3a3UwPzbngJWsGqDag2MIY1MGgCigk2ts3UVK+pz7TnhRx7fdj0M\/rInk8rMWjGOGjKo0mlvT52+1bZatvMKe6NJ1comFBqrvXVvfu+l5R7GFannVvTpjN3dzvUPZWrBEynn6ZfQ97cOePoeKB0o9BlgvhAR7dv3H0aMvPgn6+NxSF1+r6v+L1OdY5l3DZLG8qZED1k5m98wZz3UrYzpo5exRazyj0zgXSs28xXyqvTznebYitOYU9zBQAAAODoHWiFsVQwwcf3F\/zSUlRt5bBQymjcBImkt7rkeJ1RtKMa4AqzJuT87AUSTyHZq7YmgdEJgHPV1S1tblT6sLvA2KbepO9+03rmZxNcZt3P7PVt\/j45K54miFWW2jaUGmxTdMm9oqZNZzvtuK\/vJRXXqy\/Z2XXfnXqGlPKHP2fuqvPp9HMk7Zu7Dc2bMP7giX+NssyMccyMMWDcNQHuh7rva9tn3gqtf0vq64LyBd83aL73aNuAUk6lTQLjDnMFAAAA4Ogd+BnGUrGgnF2xmo1rPNJdDQQvkgr\/EDeRw8+GlHKAc\/+8LeDY+3ZaYewIa+hRStn8hkpb3gljd4ExpPgzr+ixdbbdTzvbL50gNulrPeCZSn+dtW3aVbM2dd6Laf5pToW6N4Lutu81wbvCruhW52tbP43asfoVlOzZPm6nHf\/31RVV0lnRLB8pjfdUw7E7fwHPMJaKKjwz1y8mFZ8Y8q3ANgmMO8wVAAAAgKN3gMBYUCrSqY7vBxR9GFdyMaPc\/Hg1EPwSU0dP0lxVKztRDjW1K3UVu3iGsfgio\/lHUQ2Fu5wAFltx69hdYLTPMHrFsuVqvw8WGI2tDeVMcLLPHnbfNIEokqqZg930fWNhQG0T22egOncB\/TQaB8acYqat2tVDwzdu5\/v6YUDj5ruM1x3bngH1BcbCwpA6O7o08LO5djalzLN5je8qMBo7zBUAAACAo7X\/wPgsrlDdCmLNitVGSgM1Wzktu9JVDTW5qQ6FpuvWIG0dOwRGP2d10OtHTfsef8gqB5j6kFpIhtUx5fbjwIHRbyuvhBlv8DbR2r7X1BMwt+7cdSj2i1vaW2B0w3l9P+y4a7+vqDJNF\/rqA6Pdslq3culsSd1lYPTbYa4AAAAA\/Pr2HxhtkOqIVgPh67ySg\/5n4tyX4nSbUFO+pDBnV6N8ocYEo+6OgeqKX9EEjHCHOhoGRvucXkflRTFWYdYXQl4k1WvCSsJ5i2lJG0\/HFfa35wQYU3\/Y1F\/plPsymHLoOVBgXImp0\/\/ilmJG4z+YkOcEpuZ9rw1TJhz+ZK71Pe9YmLMvEKqGyL0FRjecOi\/38Y176Kb\/+3KfafR\/X87c3DTfTyUg2vkLm\/n1it6Yot7vLNo68knTz90ExqZzBQAAAOBdcIAtqSXlHvWp0wSwrjtd6rg5pNScb4uj9TqnxL1OtXV0qcuEk\/BUVum6UFN4EnVCXef3Xh3LO2xJLaQVtaHy+7CzjbEjbEJrJVeV+2TClOnX9vZsgDFhZjnlhKWu723fwor6fiLiQIGx0n6nuu2WU\/PPvkfVN5s26\/u21bfNrPOW0raOTidkd\/4UU8b3Epy9Bsaa78uM2wnNT+t+VsOE\/vnRsNPvru9NmLzZWzM3lrMF1c6v98xn6VlCfXYs33ery\/R1aGG3W1J3mCsAAAAAR+7AL73RVknFnV5Y8rqoou9tqtvZOvb2hsySub55nTuzdbyVgOLMSeO699T3Heduj3bzfZVMm3t8CY0zl76X+OzaDnMFAAAA4OgcPDACAAAAAN5LBEYAAAAAQCACIwAAAAAgEIERAAAAABCIwAgAAAAACERgBAAAAAAEIjACAAAAAAIRGAEAAAAAgQiMAAAAAIBABEYAAAAAQCACIwAAAAAgEIERAAAAABCIwAgAAAAACERgBAAAAAAEIjACAAAAAAJ9tJrPi4ODg4ODg4ODg4ODg4Oj\/mCFEQAAAAAQiMAIAAAAAAhEYAQAAAAABCIwAgAAAAACERgBAAAAAIEIjAAAAACAQARGAAAAAEAgAiMAAAAAIBCBEQAAAAAQiMAIAAAAAAhEYAQAAAAABCIwAgAAAAACERgBAAAAAIEIjAAAAACAQARGAAAAAECgIwyMb7S5VlD+1ZZXfldtabNg+rn+xis3UXyp\/Nq6Nt\/1IQEAAADvieJ6VgvxBWXXi94nu1Rc1\/r6uhreVSpqdSmp5NKqiiXvMz\/v\/vojqL7d9HHf43jLjjAwLuriF\/063b\/qld9Vq7rR1q+Pbi165SbiE\/roi2HdWPbKAAAAAN6SrCa+Oa+WU6d0yjladP56XOve2WZW4136rMXe87kiOe9Dn+zYtzrvnPeOlvPqmq0Nctm756vnK0ddfZsL+vHPZ3znTR+\/mTA991tX\/Lp\/HKd05lKfnm56p48YgXFHBEYAAADgXZO995kJV5\/rxyduRFz\/V5c+NWHr86Fm+WLdhEwT4H7\/uW7fvOzcvy0w\/rtPn5lg9+Xdp174XFfy5qcmNF5T3JcZkzdNuGsb0WqTFcaF0Cc69cm3mih3aaVPn5s+fnavGhnXR91+lMeh1Ql9+8kpfRJacMtH7GCBsbiq0f4pnWuP6PTfJnUjseadkPLT02oNzSrlla3U6KRa76aVd0rlwLiiVHRSZ68O6+ytaQ2s7GLrp+ONliennbbPXJ\/WaK6g0bum\/tEV9\/RaWu2hSfU8XtVAOKrTX00pZj\/fWjftTevC34ZNn8d0ZTijfM0W0vp6nx1uYFzLKBQe05mvzHhDCY3WjNe0PZ3QlesjOnE1qtZ+M1dO395oZtiMLfxYNVWnZ80cT5k588oAAADAB2FBtwNCVfJmi079sa9uBc9vVRP\/jOipzWazXcGB8cVTxeMLWvUnv23Xriry51NqudUs1LnXnLqZ9MrW9s8W\/nneWXX0x1wnjP45UvPZUTlAYFxV6Jt+HftqxISuxyYEjei4CYBn7xecs8v9wyY8TWjUKblGb5ng1ZbwQo8bGH97OaKT342Z4GNDlDnfagJXZqeHALcUC0d0zAbO6yZImXtPfz2s39n7y8FuOaHTtv5Lpn4TDFtvzWhGBfV857Zx7u6sevrHdLK1X8dDabkrvltK3R1uXm8zOwXGTEK\/M+193GbHO6lzNoj6xrscMW23mqAantXA8JTOXDbz+92sE7A3J8ZMvyJqTzuXOmL\/GNRHlyYV45lJAAAAfEhyEWel7tq\/vLKnOPWtCXZfamQ3SatRYNzGW2E8d9vE1LKs+v54Sp\/3xDVx77Zuh27rx6GkVuuedXRWQT+5pnh5n+xKRF+2tOjqWPmDIF4YrQmaR2f\/gfH5jM6YYHVhsrxCtqX83GPFvBWz3QbGj9pnvBVHY2tJrZdMSNopnK3N6qy592SvL5mZMGYDYn1grLmmWNDM9JxivkCa6jP9bJ1wVx9fzencTvU20zQwFjXQaer5elqpcvNby7rRbgJtz5IprCnUbs53PnbPWbmMBma9f9u3zHyZsHnybnk50Z2r3\/7D3gsAAAB8QLzA2DXrlct2HQKNHa9d0I9\/PK9Pf39Kf\/hTl+IvvI8dSXWZ9k\/9\/jNdvW4C4\/XLzjOPLf8T2fZ8YrL7M\/3h1Bl9ev4Pajn1qS7fW2j8oh0jO\/SlWlpM6N3NGH4FB15hdFbrwgn1zK5o0zfy3QbG+mcYYyFzzdVEzVbWbRIT7mpbTYZ7phtXzb11gfFi3C1WvdHm0pIGJud0w9kaau4p93M39TbTNDCmncB3uu+ZV97OWWG0c3J9SjeiS0rVvJl1S7E7g27gtMXZSf22bsURAAAA+CD8KoFxXU\/jcU0M3dbl8y1q+a\/bWqh\/EY1\/RdF59vGUvp2qhqLs\/cs6Y0PiP0cUN3WNhD53yvUv0CkrX9\/o\/FE4hGcY7fOHg\/qNCUMftUZMQHvpnNptYCxvYS1L9UbcbZZeOVBgMKt7OU1QYNx65q7itQ6621RN0L1xy7RX7udu6m2maWAMDsi13GcYW\/82rBN\/MW2a60+EFr3tsoYvJDrbUcvhEQAAAPiQrI7oy7pwZq2PXTUh8Kommu34LNtLuHwxosumvS\/vN\/u7vLtN9ZNub+NqMa5vzT3+F9xY7otw\/NtbXetT1\/SpCYtXxxo\/gXkUDhgYi9XfHDRhzAlWXiB0A+OYRiu7P1+q51r1fOUZxjv+LZUFN9B5z+015IXBM8O+sLk+52xTbRoYy4Eu45UNZ0tqOTB695wb8\/2L9+qxLtgwfODA6AbPY52PqwFQRdPkYw2kyuN4o83K71JueX3z17es9q9s6Jx1tqO++2+YBQAAAN4GE87+dEot\/xv3be8sKv5di079qdlLb3waBMbV+I+6HZrQU6\/sSuqaP\/ytxvVj6LYm\/u0WHSYgXmvxhUpvFbQ+1GYHPzftdpkaq9w3vLboy6F3Kyxa+w+M6WmdNOHqd33LbmhcTav1axOIrs25YW\/Grob163jnrGZWVjQaHnFXIesC47HWYbVOryq\/tqpYf7TmxTmNvdTAdVOXXdEcNoFrclYX2yI6bkJU08DorNAN6sKErX9Lm5k5Xbhs7qmshHqriZfH1LNUMH1aUU9nxPTRV28zdYFxMzGp01+NqN17aDF\/f0THbPvRFVN3QanomG+8K2q38\/dNQikbGosFjd6JmDFG1VN9+axSd+1n5rovRhR67n0IAAAAfGDsaqJ9JvDq0IJW11e1MHTVCV3VF8qsauSv5\/X5zQa\/zdhohXHhtlPP+esjerq6rvXVBUXaPjXXfqa+SkBc0O1zJrD+V5fiK75rWq5qovKsoxtqT527ppGlVecnN1YX+vSlfdbxrxOVPhVNP+zPgfzhr33OttXqUf5Zj6N1gBXGLaXuR3XChikTeuzxcduUYpVRvVQsPKyPvXMnQ4vqCdiSejFq\/uk8R+gep8NLvhW4JrbWNBoa0YmvIuYY0ZWZzM5bUk2fRkORSp+OfTWm9jt1W2dzc7poglu5P2cii\/vekpqPRp1nEi9U\/qvCS83c9YKzV3\/NeDOzOuebC\/t86JUZd4tvhTeuj\/wvCwIAAAA+OEUt\/NM+E2hCmT1a\/qDL9576Vhyf6kcb6v67\/kU0niZbUtf\/dVtfnm1x6zVHy9kv9eNcXXx7kdRt34\/yt5z\/VpGl2tVErS\/oxy\/sy268Pp46o8++G1HW9+yj8xMalfP+o3YV8qgcbEuq44021wrKV7ZS7seWNguFgJfm+MJT5fDC3Vax5vryy2mOhXbxFphX68qv1QWxGm5\/gsbkPIcZ1K9KEN4F03e7wljbf59103ah0UkAAAAAFaXith\/MPzSb61rfaTWruItrTO\/eWh\/fskMIjG+JE+rsttD6wwa98vbNKY16W0dH79rtrIO6GH\/LX4MNc0H9IuABAAAAeM+8u4FxJ2tpXWkfrGwv\/fjSiFoneQkMAAAAAByW\/9zACAAAAAB4qwiMAAAAAIBABEYAAAAAQCACIwAAAAAgEIERAAAAABCIwAgAAAAACERgBAAAAAAEIjACAAAAAAIdeWDMPQor8YtXeF9spBUdTWvDK+7fGy1PTuns1YhOfBXRmVszmlnb8s4dpSVd+WpKMa9Ua399Xr4fda6vOa7Natk7\/zZsjkV17PKUZrwyAAAAgFpHHhizk22KrXiF98X6vPruzR84MObvj+jjb6bN\/LzU5npBqeiYjl+eVOzIM+OiLn4xoVGv5LffPi\/3D+ujzjnl1wrVo1D0zr4lxVXNpNe9AgAAAIB6BwuMrwvKzCcUfxhX8mlBlb\/eF7NKPsmr+DylhDmXmM9Vz9VxAmNmQ5nZuKknodTz2iuLL9JKmjrij+aV9SWw4kpSyZXqtf6y\/XM6X1TW1vmk4HxWq6RCZt7pW3w2rdpcUlR+0Y4poflfim5dL7xTRqP+1PACY2HTzENdGxuZhBJmvFWmn8mEaj7yjN7q18W4V3C8VGo6reVXXjGXUejupFpDU7oxvep9aELb9LR6UuuaGZ4y56Y1sPJGWjPXhs21Yf+K34p6QrNKeaVt5a11E\/imTR2TutJv2q3MU+PAuGOfG3AC461Fr1SnYT9Mf++mlXo8oytmnKNr5bGvadTOy6j3XyJMMBztt3MxqfboivLl4a+l1W7uz5s\/Bt63vqKBoPsAAACAD8T+A2Mpp9idbj2YzZowZILjZK+6p3PuORuY7oQVfWTObeSVGutWaDJrYtp2NjCG7sY0\/6yggglnD0ydiefuudJKTGFzLp3fcM+FBzTv5b+N+T71zVdTlr9s\/9wdHlJsMaOMCY61SspNdat7JKmsSXGFTEy9d+Jye15U+n6neqdMiNgoKPsoqr67ocoKaLP+1LDj\/6FXQ5O2jQ3ln5o2wjFlX5tzL5Lq\/Smpym32Wn\/ZJ3U3ouPXEoqtmsBXb3lGv2uN6GJ0WcsrS7rx3aDO3ndrseHreNuE2qdXlJqc0MlLEZ2+NqXRpRWN\/mNYx9pnnJC0Pfj5yy9N+IvoZGhOMyvmvrtRnfhmxtsi2jgwNu1zE40D4w79uDRoxmbC3qQbSp2xfzWii8OPNZAy87H1TDe+ieisDZYryyYQR3QilNamvX05odNtCaeubfe9SuviZTOn9r41ExxNH47\/Y8neBQAAAHwwDrbCWPJFwIJvG6YNQf83Xw1BxbQe\/FAOZbVsYBz3PahWmCsHv4KSP\/Uq6VvdK2XG1TmWcYLnToGxby4ognm2Sr7wWtD8\/\/Vp3u5MNGEuXLOVtKhUpLxltnl\/atjxtz1Q2gZETyEZ9vq3ofl71XoKs73qnW3U15eaGZ7QmUv9+vjSsM6G50x4KS9zbWnzlS+UTY1VApcNP6f7njl\/llZ1oy2i9koW84e9JoExPa2TlWBpvVTPtUG1zto\/Nw6MzfvcmBMYWwdrnmG8Yh8u3LEfYxr1VV87dmlzYkzH7\/iC3lZGV0ww7Fkzf64LjP77HK98\/7EhU70WAAAA+FAcKDAWf5lX4uchhXvCCt\/pUoc\/MNYEr6xibTHzv9vVP8NYDX4B9\/jq3TEw+s5ts5nT\/KOohmy\/w93q6vAC40pMbZO1vaz2r3l\/atQHZstXd3HRzFnSnrUhdEgpZ7lrB+vu6trxyxOKOds7XzrbNC\/8bdiEKxO0\/tJfGxj7y1tUbWAc1o1K0tllYIxPbAtwx1vL202bBUafbX1uzAmMQSuMe+xH7djd8rG\/+O8f1G9avfmoD4y++2wgzycSunJ9xLnnxKVBHSMwAgAA4AOz\/8D4PKHuewnlNrz1NX94OrTAOF57j13FHEwdMDDmlbjTp8SzDZWclSm74ucFxl9i6vi5dsUwO+EPjI37U8OOv25FtbQUVai8ZXczZcJqUgW7PTWSavB85xttrq1rs2ZxbkujfzdhKWFGETVB7PqsUuWHI22wOuzA+PeAAOdoFBib97mZpoFxD\/0ICozbVg7LmgXGx1M63jZlvvuXbtl3LQAAAPCh2H9gtCtmE9X4tLH44JBXGEvKjHVqoPKQYMlc213ZvrmxMKDQRMYNW1sFJe+17TIw1gW\/jZQelFcYnecyTZj0XrxTejGvoZvl\/jXvTw07\/raQxpfL0bNgQmlI8UpuMXX9HDJzFFZ0aduGVk9BofZ+nYv63uK59lgXLo0o9Lw+CL0x\/R7cR2BM62LrsNrTdmvrlvKTY\/pt+dwr01ZrVD3l7aRbzxS6NaEBZy4aBcbmfdbWmmYmM4Evj7F9DgyMe+zHtuBnt7R+PaWZcipfX9SV6wm33Cww1gTVLS0Pj7DCCAAAgA\/OAbakFpSKdKkrbLd1hjU0NX7IK4zG65wS97w27nQpPJo2rXqcc51qu9lpzsc0\/6\/drjCani8Mqet7U6fdkjoU03j5GUZrM6t4xD039DCrVGWF0WjWHz9n\/AnNT\/W6bXzfpb5HORMTq+zzjx0d48o0yotWbk4Xv7bPArpbKT+2L7kZsw\/fGSb4XDSfHbfbLC+bz29F9xEYt5Syv3\/YatpoHdSZSEIXfAFsc2ZKp8vbOc0\/T4eX3JfFNAyMRrM+2\/D2helLxi36NQyMxl76sS34lcfo3X\/8LxGdu+8F7WaB0QbT9kH9xsztictmbkJjrDACAADgg3Owl95Yr4sqNgs9h+FttLFVUjGo0rrVr+qWVJ+99Mdc6259reW8MKfuecmG1u3vEnpbI2tsabNQ0GZ59eytsG3UbzPdhYZ93q999qPCbpfdR3\/sOF7tu1EAAADgP9rBA+P7ZCunxE9hPZhNK\/csp\/RsVOFwTLlDDasFZeftz4fUvnEVAAAAAN41BMZ6WxvKLSYVfxhXYj5T96P+h6Bk6s9klGu8YxYAAAAA3gkERgAAAABAIAIjAAAAACAQgREAAAAAEIjACAAAAAAIRGAEAAAAAAQiMAIAAAAAAhEYAQAAAACBCIwAAAAAgEAERgAAAABAIAIjAAAAACAQgREAAAAAEIjACAAAAAAIRGAEAAAAAAQiMAIAAAAAAv36gfF1UcWS9+dAJRWbX3AgpWLRtHCINnNK\/1L0CgdwWPXsxdbbnWv7XeYzGRVel4vmu3+r7QEAAAA4TL96YMxOtqlvfsMrBVifV19bTFmveLiyirX1aX7dKx6C\/KNutd1JKO+V9+uw6tmTlZja7s2rybdRp2gCYE4bu818xbQedHTowVM3CG\/M9+2xPQAAAABHicD4IdtzYDzY\/BEYAQAAgP8sBwyMReUXExq\/36e+++NKPi1s2+65sTKvuHM+rlS+tD0wFgtKz0Y11DOk6GzWFHcOjOU6w5GoEov5SpvFlaTitg6vbBWexJVcKX\/iBZ5CUdlym49SyvtucK\/f0EYmoQf3+vTgoTn\/WioV0kr+POSO43n1hm1tVsZj7p1IKrvpfe7ZS983Msnq3GZqY1Z5XMXlpKKRsIZ+Tqruku02spp\/+EB99x4obtsOCIzF5yklzDjL\/auOK6ukube3LaSBsbjiTwreCe+eCbfe8dl0dQuqzFw8jCv9wi1tC4w7zBUAAACAo3WAwFhU+n6HOu7GlFrJKWeC0PidDg0sVONHYX5AHXcemCCZUSaTUuzekAbu+QLjaxPgzD29UylzPmPCgwkdgwMKNwmMxScP3DozeRXyacXudmpg3g0vQStYtQHVBsawBgZNQDHBxraZmuo19Zn2vJBjrw+bfkYf2fNpJQbNGAdNeTSptNfHbt8qW22bOcW98eQKBRNKzbW+unff95JyD8PqtHNr2nTm7m6HuqdylYDp9NP0a8ibO2ccHQ+UbhS6TBAf6Oj2jbtPQ2Ye\/PO1sTikTt\/3Fb\/Xqc6xjNtmaUM5E6KHzPyNL5jzXsp2xtTRq9hiVrlnJpCOdZv5Snl12vluU2zFKexprgAAAAAcvQOtMJYKJvj4\/oJfWoqqrRwWShmNmyCR9FaXHK8zinZUA1xh1oScn71A4ikke9XWJDA6AXCuurqlzY1KH3YXGNvUm\/Tdb1rP\/GyCy6z7mb2+zd8nZ8XTBLHKUtuGUoNtii65V9S06WynHff1vaTievUlO7vuu1PPkFL+8OfMXXU+nX6OpH1zt6F5E8YfPPGvUZaZMY6ZMQaMuybA\/VD3fW37zFuh9W9JfV1QvuD7Bs33Hm0bUMqptElg3GGuAAAAABy9Az\/DWCoWlLMrVrNxjUe6q4HgRVLhH+ImcvjZkFIOcO6ftwUce99OK4wdYQ09Simb31Bpyzth7C4whhR\/5hU9ts62+2ln+6UTxCZ9rQc8U+mvs7ZNu2rWps57Mc0\/zalQ90bQ3fa9JnhX2BXd6nxt66dRO1a\/gpI928fttOP\/vrqiSjormuUjpfGeajh25y\/gGcZSUYVn5vrFpOITQ74V2CaBcYe5AgAAAHD0DhAYC0pFOtXx\/YCiD+NKLmaUmx+vBoJfYuroSZqramUnyqGmdqWuYhfPMBZfZDT\/KKqhcJcTwGIrbh27C4z2GUavWLZc7ffBAqOxtaGcCU722cPumyYQRVI1c7Cbvm8sDKhtYvsMVOcuoJ9G48CYU8y0Vbt6aPjG7XxfPwxo3HyX8bpj2zOgvsBYWBhSZ0eXBn42186mlHk2r\/FdBUZjh7kCAAAAcLT2HxifxRWqW0GsWbHaSGmgZiunZVe6qqEmN9Wh0HTdGqStY4fA6OesDnr9qGnf4w9Z5QBTH1ILybA6ptx+HDgw+m3llTDjDd4mWtv3mnoC5taduw7FfnFLewuMbjiv74cdd+33FVWm6UJffWC0W1brVi6dLam7DIx+O8wVAAAAgF\/f\/gOjDVId0WogfJ1XctD\/TJz7UpxuE2rKlxTm7GqUL9SYYNTdMVBd8SuagBHuUEfDwGif0+uovCjGKsz6QsiLpHpNWEk4bzEtaePpuML+9pwAY+oPm\/ornXJfBlMOPQcKjCsxdfpf3FLMaPwHE\/KcwNS877VhyoTDn8y1vucdC3P2BULVELm3wOiGU+flPr5xD930f1\/uM43+78uZm5vm+6kERDt\/YTO\/XtEbU9T7nUVbRz5p+rmbwNh0rgAAAAC8Cw6wJbWk3KM+dZoA1nWnSx03h5Sa821xtF7nlLjXqbaOLnWZcBKeyipdF2oKT6JOqOv83qtjeYctqYW0ojZUfh92tjF2hE1oreSqcp9MmDL92t6eDTAmzCynnLDU9b3tW1hR309EHCgwVtrvVLfdcmr+2feo+mbTZn3ftvq2mXXeUtrW0emE7M6fYsr4XoKz18BY832ZcTuh+Wndz2qY0D8\/Gnb63fW9CZM3e2vmxnK2oNr59Z75LD1LqM+O5ftudZm+Di3sdkvqDnMFAAAA4Mgd+KU32iqpuNMLS14XVfS9TXU7W8fe3pBZMtc3r3Nnto63ElCcOWlc9576vuPc7dFuvq+SaXOPL6Fx5tL3Ep9d22GuAAAAABydgwdGAAAAAMB7icAIAAAAAAhEYAQAAAAABCIwAgAAAAACERgBAAAAAIEIjAAAAACAQARGAAAAAEAgAiMAAAAAIBCBEQAAAAAQiMAIAAAAAAhEYAQAAAAABCIwAgAAAAACERgBAAAAAIEIjAAAAACAQARGAAAAAECgj1bzeXFwcHBwcHBwcHBwcHBw1B+sMAIAAAAAAhEYAQAAAACBCIwAAAAAgEAERgAAAABAIAIjAAAAACAQgREAAAAAEIjACAAAAAAIRGAEAAAAAAQiMAIAAAAAAhEYAQAAAACBCIwAAAAAgEAERgAAAABAIAIjAAAAACAQgREAAAAAEIjACAAAAAAIdISB8Y021wrKv9ryyu+wV+vKr730Cs1sabNgxrT+xisDAAAAeJuK61ktxBeUXS96n+xScV3r6+va8S7vusDqS0WtLiWVXFoNPm9qd+6tP5o0WvSu2eNo3pojDIyLuvhFv073r3rld9dy\/7A++mJCo165sVXdaOvXR7cWvTIAAACAtyOriW\/Oq+XUKZ1yjhadvx7Xune2mdV4lz5rsfd8rkjO+zBQVpE\/u\/V\/PlSbW4pLfbr8+3Lb5mg5r2tTda3\/u0\/nK\/2rHvV1VaxE9LlzzU79+vUQGHeBwAgAAAC8W7L3PnOC1Y9P3JC2\/q8ufdosjDnWTcg8o1O\/\/1y3b17eMZhlh75Uyyef6JNt9S7o9ien9Ml3E1ot2fK6nvZ8buq7rJEXzgWu2S7z2VWNrO5mhdGE0\/9p0SemvfcnMBZXNdo\/pXPtEZ3+26RuJNa8E1J+elqtoVmlvLKVGp1U69208k6pHBhXlIpO6uzVYZ29Na2BlV1u51xLqz00qZ7HqxoIR3X6qynF7Odb66a+aV3427Dp05iuDGeUr+x6XVGPuad9+plmht1+n7k+rdFc3bbYlcdqvz6iE+1jap9aU+pQA+MbLU+6\/XPqj674+mesmT7eHTPz4fatZ8nbCvt80RnvjVn\/v10Fjd41cxrJaNP7BAAAAHj\/eYEttOCVXcmbLTr1xz4TvRpZ1cQ\/I3pqM6YT5poEs9yIvmxp0bdTE+qqD4yrE\/r2j+f145xXtnLu6mDXrFc2VodMiGzpMr3d2ep9E05bvlX8\/+3Qr1\/ZAQLjqkLf9OvYVyMmlD1WKDyi4yYAnr1fcM4GrcqN3jJhqi2hZafkBsbfXo7o5HdjJlyO6cxX5nzrsG5kdvFc43JCp+39l8z9Jhi23prRjAlQPd+5dZy7O6ue\/jGdbO3X8VDaC1Tb2zxtzn90yfTzlXOBuWTa+ezjNnt+UufaIvrdN5FDCowvzRwMmv6ZMHjLBL1bJpTa\/pnrnf69SuviZdv2hG5E53Tj7xEd+2JQrbN2PlbU\/rWZ787H1XC4NquzZjxnht05BwAAAD4IXji79i+v7ClOfWvC1pca2c0mxqaBcV0Tf21Ry3dxFZXcHhgDFE19n9TVl717Xqf+\/KMJgX26Hbqt2yasJoOqeTGhq044Le4cZH9l+w+Mz2d0xoSVC5PlFcEt5eceK+atEO42MH7UPuOtOBpbS2q9ZELRbrZ0eoHxZK9bm6NY0Mz0nGK+wJnqM\/1onXBXH702j12fq4aux1M6YT67GLeFogaumz59Pa1UuYqtZ24IPIzAmJ7WSdPWubHqC3Q2JyZ04qsx9Tw3hZlJffxFRO1p95wNmKnptFJrbmecOW0d04AXbvP3R0y\/RtRTXdgFAAAA3n8Bq3mOvYStJtfa4NnSclUTzvbSXQTGTXPNuVP69NZCzctqkjft84hn9Nlfr5nAeE2Xz7foVMuXiqx4FziKin9nwulfJ9znL9+bwOitMDqreeGEemZXtOmbnd0GxvpnGGMhc83VRM1W1kBeYHSDnt8bbS4taWByTjfC3qplpR8BbdbUk9bF1n6d8IdQwwmdhxAYlyO2njGNNlpA9VYY7arthbuzGk2tadN\/bTmkT9iJdldTa1YcAQAAgA\/B2wyMJvxd+6RFX94vZ4YdAqMNiyYItvxPJHgrrPOMY1lWfX8yIdJZuXQV\/3VNn5gQOVLux\/sTGA3nGUb7\/OGgfmO3drZGTPByV892GxjLW1jLUr0RfXRp0lsRbCIoMG49U6jd9mPQ3aZqguyNW\/7tpDsFxuAQGzSWYDsExt3U4z3DeOarQX1s+vJR64hClRVTX0j0tqO64REAAAD4gKyO6EsT4pwtnD7rY1dN2Lqqid28KjUwmBWVvPmJTv1\/byv5ovySmglds4Hx7lPz57q\/e28+Vd\/\/mLD4X7e1sMtVHGeb6ifmelsomrD5ySl9GkpWX4jz\/645\/ep70ujlOL+uAwbGYnUFrLx10wuEbjjyr6a9VM+17YHxt3eWnJKr4Aa+72ar21QbCQqM8QnTpn0G0isbtauDOwVGL\/D5t6zabaqd5rNDCIy2f8dqtpwaq8samExrufwM5SvfvxXri7pwqba+zbGoCZET6hkecf7ZcLUSAAAAeG+5K3Ut\/1tdqbN\/b7dbO0\/9qdlLb3wCA+Nq5Wc0Ao8\/R8wVnpL7VtNT57qUDAyLq4r33NbtMX9vTB\/\/19zzPyNuPd5KaWBb5tjpuclfw\/4Do\/c83u\/6lt3QuJpWq30py7U5N+zNTOq35vzxzlnNrKxoNDzirkLWBcZjrcNqnV5Vfm1Vsf5ozYtzmgoKjLO2zUFdmLD3b2kzM6cLl\/1hb6fAWA66pg779tK1glLRMefFNPsKjK\/MnNi3nZo5cthnNO2W02+mFVspKL+ypHa7rffypGJmDjcnxpyX3FycLPd\/RmftS3HCvgT86rEumM+OmaM2bAMAAAAfDrua2HLqU10dWtDq+qoWhq7q01MtujpWXl5c1chfz+vzmw1+m3HXWz+DtqR6YfHUZ+oaiyserx4LuWqEXej+VKdazDXxrNYD+xjg\/dmSuqXU\/agXptzj47YpxSpjf6lYeNjdVmmOk6FF9QRsSb0YNf90njN0j9Phpd09kxcUGO1bSEORSpvHvhpT+529rDAaW2sauFWt4+P2GY3u9xnGtTkn8H38d+8tqFZuThdNsC6P99hXUfVUtpzWzpk9Tlybrb6Ax7Hlbu21b0+dYXkRAAAAH6qiFv75uc6UV+Ra\/qDL9576Vhyf6sdzp9Ty3w2eLTxIYGyyMlgbLNeVDPn7eF7fDvn7GOD9CYxlb7S5VlD+1UHCy5Y2C4WAl+ZUg1P12EVwe7Wu\/Fr1TaT7YusobP8qD9Qvv3UzZwH1O7aKzuqmfz4AAAAABCgVnWf\/3u2\/Ots+\/mf+5f4QAuNb4oQ+E6q2HQcMggf1rvYLAAAAAA7ZuxsYAQAAAABHisAIAAAAAAhEYAQAAAAABCIwAgAAAAACERgBAAAAAIEIjAAAAACAQARGAAAAAEAgAiMAAAAAIBCBEQAAAAAQ6MgDY+5RWIlfvML7YiOt6GhaG15x\/95oeXJKZ69GdOKriM7cmtHM2pZ37igt6cpXU4p5pVr76\/Py\/ahzfc1xbVbL3vm3YXMsqmOXpzTjlQEAAADUOvLAmJ1sU2zFK7wv1ufVd2\/+wIExf39EH38zbebnpTbXC0pFx3T88qRiR54ZF3XxiwmNeiW\/\/fZ5uX9YH3XOKb9WqB6Fonf2LSmuaia97hUAAAAA1DtYYHxdUGY+ofjDuJJPC6r89b6YVfJJXsXnKSXMucR8rnqujhMYMxvKzMZNPQmlntdeWXyRVtLUEX80r6wvgRVXkkquVK\/1l+2f0\/misrbOJwXns1olFTLzTt\/is2nV5pKi8ot2TAnN\/1J063rhnTIa9aeGFxgLm2Ye6trYyCSUMOOtMv1MJlTzkWf0Vr8uxr2C46VS02ktv\/KKuYxCdyfVGprSjelV70MT2qan1ZNa18zwlDk3rYGVN9KauTZsrg37V\/xW1BOaVcorbStvrZvAN23qmNSVftNuZZ4aB8Yd+9yAExhvLXqlOg37Yfp7N63U4xldMeMcXSuPfU2jdl5Gvf8SYYLhaL+di0m1R1eULw9\/La12c3\/e\/DHwvvUVDQTdBwAAAHwg9h8YSznF7nTrwWzWhCETHCd71T2dc8\/ZwHQnrOgjc24jr9RYt0KTWRPTtrOBMXQ3pvlnBRVMOHtg6kw8d8+VVmIKm3Pp\/IZ7LjygeS\/\/bcz3qW++mrL8Zfvn7vCQYosZZUxwrFVSbqpb3SNJZU2KK2Ri6r0Tl9vzotL3O9U7ZULERkHZR1H13Q1VVkCb9aeGHf8PvRqatG1sKP\/UtBGOKfvanHuRVO9PSVVus9f6yz6puxEdv5ZQbNUEvnrLM\/pda0QXo8taXlnSje8Gdfa+W4sNX8fbJtQ+vaLU5IROXoro9LUpjS6taPQfwzrWPuOEpO3Bz19+acJfRCdDc5pZMffdjerENzPeFtHGgbFpn5toHBh36MelQTM2E\/Ym3VDqjP2rEV0cfqyBlJmPrWe68U1EZ22wXFk2gTiiE6G0Nu3tywmdbks4dW2771VaFy+bObX3rZngaPpw\/B9L9i4AAADgg3GwFcaSLwIWfNswbQj6v\/lqCCqm9eCHciirZQPjuO9BtcJcOfgVlPypV0nf6l4pM67OsYwTPHcKjH1zQRHMs1XyhdeC5v+vT\/N2Z6IJc+GaraRFpSLlLbPN+1PDjr\/tgdI2IHoKybDXvw3N36vWU5jtVe9so76+1MzwhM5c6tfHl4Z1Njxnwkt5mWtLm698oWxqrBK4bPg53ffM+bO0qhttEbVXspg\/7DUJjOlpnawES+uleq4NqnXW\/rlxYGze58acwNg6WPMM4xX7cOGO\/RjTqK\/62rFLmxNjOn7HF\/S2MrpigmHPmvlzXWD03+d45fuPDZnqtQAAAMCH4kCBsfjLvBI\/DyncE1b4Tpc6\/IGxJnhlFWuLmf\/drv4ZxmrwC7jHV++OgdF3bpvNnOYfRTVk+x3uVleHFxhXYmqbrO1ltX\/N+1OjPjBbvrqLi2bOkvasDaFDSjnLXTtYd1fXjl+eUMzZ3vnS2aZ54W\/DJlyZoPWX\/trA2F\/eomoD47BuVJLOLgNjfGJbgDveWt5u2iww+mzrc2NOYAxaYdxjP2rH7paP\/cV\/\/6B+0+rNR31g9N1nA3k+kdCV6yPOPScuDeoYgREAAAAfmP0HxucJdd9LKLfhra\/5w9OhBcbx2nvsKuZg6oCBMa\/EnT4lnm2o5KxM2RU\/LzD+ElPHz7UrhtkJf2Bs3J8advx1K6qlpahC5S27mykTVpMq2O2pkVSD5zvfaHNtXZs1i3NbGv27CUsJM4qoCWLXZ5UqPxxpg9VhB8a\/BwQ4R6PA2LzPzTQNjHvoR1Bg3LZyWNYsMD6e0vG2KfPdv3TLvmsBAACAD8X+A6NdMZuoxqeNxQeHvMJYUmasUwOVhwRL5truyvbNjYUBhSYybtjaKih5r22XgbEu+G2k9KC8wug8l2nCpPfindKLeQ3dLPeveX9q2PG3hTS+XI6eBRNKQ4pXcoup6+eQmaOwokvbNrR6Cgq19+tc1PcWz7XHunBpRKHn9UHojen34D4CY1oXW4fVnrZbW7eUnxzTb8vnXpm2WqPqKW8n3Xqm0K0JDThz0SgwNu+zttY0M5kJfHmM7XNgYNxjP7YFP7ul9espzZRT+fqirlxPuOVmgbEmqG5peXiEFUYAAAB8cA6wJbWgVKRLXWG7rTOsoanxQ15hNF7nlLjntXGnS+HRtGnV45zrVNvNTnM+pvl\/7XaF0fR8YUhd35s67ZbUoZjGy88wWptZxSPuuaGHWaUqK4xGs\/74OeNPaH6q123j+y71PcqZmFhln3\/s6BhXplFetHJzuvi1fRbQ3Ur5sX3JzZh9+M4wweei+ey43WZ52Xx+K7qPwLillP39w1bTRuugzkQSuuALYJszUzpd3s5p\/nk6vOS+LKZhYDSa9dmGty9MXzJu0a9hYDT20o9twa88Ru\/+43+J6Nx9L2g3C4w2mLYP6jdmbk9cNnMTGmOFEQAAAB+cg730xnpdVLFZ6DkMb6ONrZKKQZXWrX5Vt6T67KU\/5lp362st54U5dc9LNrRuf5fQ2xpZY0ubhYI2y6tnb4Vto36b6S407PN+7bMfFXa77D76Y8fxat+NAgAAAP\/RDh4Y3ydbOSV+CuvBbFq5ZzmlZ6MKh2PKHWpYLSg7b38+pPaNqwAAAADwriEw1tvaUG4xqfjDuBLzmbof9T8EJVN\/JqNc4x2zAAAAAPBOIDACAAAAAAIRGAEAAAAAgQiMAAAAAIBABEYAAAAAQCACIwAAAAAgEIERAAAAABCIwAgAAAAACERgBAAAAAAEIjACAAAAAAIRGAEAAAAAgQiMAAAAAIBABEYAAAAAQCACIwAAAAAgEIERAAAAABDo1w+Mr4sqlrw\/Byqp2PyCAykVi6aFQ7SZU\/qXolc4gMOqZy+23u5c2+8yn8mo8LpcNN\/9W20PAAAAwGH61QNjdrJNffMbXinA+rz62mLKesXDlVWsrU\/z617xEOQfdavtTkJ5r7xfh1XPnqzE1HZvXk2+jTpFEwBz2tht5ium9aCjQw+eukF4Y75vj+0BAAAAOEoExg\/ZngPjweaPwAgAAAD8ZzlgYCwqv5jQ+P0+9d0fV\/JpYdt2z42VecWd83Gl8qXtgbFYUHo2qqGeIUVns6a4c2As1xmORJVYzFfaLK4kFbd1eGWr8CSu5Er5Ey\/wFIrKltt8lFLed4N7\/YY2Mgk9uNenBw\/N+ddSqZBW8uchdxzPqzdsa7MyHnPvRFLZTe9zz176vpFJVuc2UxuzyuMqLicVjYQ19HNSdZdst5HV\/MMH6rv3QHHbdkBgLD5PKWHGWe5fdVxZJc29vW0hDYzFFX9S8E5490y49Y7PpqtbUGXm4mFc6RduaVtg3GGuAAAAABytAwTGotL3O9RxN6bUSk45E4TG73RoYKEaPwrzA+q488AEyYwymZRi94Y0cM8XGF+bAGfu6Z1KmfMZEx5M6BgcULhJYCw+eeDWmcmrkE8rdrdTA\/NueAlawaoNqDYwhjUwaAKKCTa2zdRUr6nPtOeFHHt92PQz+sieTysxaMY4aMqjSaW9Pnb7Vtlq28wp7o0nVyiYUGqu9dW9+76XlHsYVqedW9OmM3d3O9Q9lasETKefpl9D3tw54+h4oHSj0GWC+EBHt2\/cfRoy8+Cfr43FIXX6vq\/4vU51jmXcNksbypkQPWTmb3zBnPdStjOmjl7FFrPKPTOBdKzbzFfKq9POd5tiK05hT3MFAAAA4OgdaIWxVDDBx\/cX\/NJSVG3lsFDKaNwEiaS3uuR4nVG0oxrgCrMm5PzsBRJPIdmrtiaB0QmAc9XVLW1uVPqwu8DYpt6k737TeuZnE1xm3c\/s9W3+PjkrniaIVZbaNpQabFN0yb2ipk1nO+24r+8lFderL9nZdd+deoaU8oc\/Z+6q8+n0cyTtm7sNzZsw\/uCJf42yzIxxzIwxYNw1Ae6Huu9r22feCq1\/S+rrgvIF3zdovvdo24BSTqVNAuMOcwUAAADg6B34GcZSsaCcXbGajWs80l0NBC+SCv8QN5HDz4aUcoBz\/7wt4Nj7dlph7Ahr6FFK2fyGSlveCWN3gTGk+DOv6LF1tt1PO9svnSA26Ws94JlKf521bdpVszZ13otp\/mlOhbo3gu627zXBu8Ku6Fbna1s\/jdqx+hWU7Nk+bqcd\/\/fVFVXSWdEsHymN91TDsTt\/Ac8wlooqPDPXLyYVnxjyrcA2CYw7zBUAAACAo3eAwFhQKtKpju8HFH0YV3Ixo9z8eDUQ\/BJTR0\/SXFUrO1EONbUrdRW7eIax+CKj+UdRDYW7nAAWW3Hr2F1gtM8wesWy5Wq\/DxYYja0N5Uxwss8edt80gSiSqpmD3fR9Y2FAbRPbZ6A6dwH9NBoHxpxipq3a1UPDN27n+\/phQOPmu4zXHdueAfUFxsLCkDo7ujTws7l2NqXMs3mN7yowGjvMFQAAAICjtf\/A+CyuUN0KYs2K1UZKAzVbOS270lUNNbmpDoWm69YgbR07BEY\/Z3XQ60dN+x5\/yCoHmPqQWkiG1THl9uPAgdFvK6+EGW\/wNtHavtfUEzC37tx1KPaLW9pbYHTDeX0\/7Lhrv6+oMk0X+uoDo92yWrdy6WxJ3WVg9NthrgAAAAD8+vYfGG2Q6ohWA+HrvJKD\/mfi3JfidJtQU76kMGdXo3yhxgSj7o6B6opf0QSMcIc6GgZG+5xeR+VFMVZh1hdCXiTVa8JKwnmLaUkbT8cV9rfnBBhTf9jUX+mU+zKYcug5UGBcianT\/+KWYkbjP5iQ5wSm5n2vDVMmHP5krvU971iYsy8QqobIvQVGN5w6L\/fxjXvopv\/7cp9p9H9fztzcNN9PJSDa+Qub+fWK3pii3u8s2jrySdPP3QTGpnMFAAAA4F1wgC2pJeUe9anTBLCuO13quDmk1Jxvi6P1OqfEvU61dXSpy4ST8FRW6bpQU3gSdUJd5\/deHcs7bEktpBW1ofL7sLONsSNsQmslV5X7ZMKU6df29myAMWFmOeWEpa7vbd\/Civp+IuJAgbHSfqe67ZZT88++R9U3mzbr+7bVt82s85bSto5OJ2R3\/hRTxvcSnL0Gxprvy4zbCc1P635Ww4T++dGw0++u702YvNlbMzeWswXVzq\/3zGfpWUJ9dizfd6vL9HVoYbdbUneYKwAAAABH7sAvvdFWScWdXljyuqii722q29k69vaGzJK5vnmdO7N1vJWA4sxJ47r31Pcd526PdvN9lUybe3wJjTOXvpf47NoOcwUAAADg6Bw8MAIAAAAA3ksERgAAAABAIAIjAAAAACAQgREAAAAAEIjACAAAAAAIRGAEAAAAAAQiMAIAAAAAAhEYAQAAAACBCIwAAAAAgEAERgAAAABAIAIjAAAAACAQgREAAAAAEIjACAAAAAAIRGAEAAAAAAQiMAIAAAAAAn20ms+Lg4ODg4ODg4ODg4ODg6P+YIURAAAAABCIwAgAAAAACERgBAAAAAAEIjACAAAAAAIRGAEAAAAAgQiMAAAAAIBABEYAAAAAQCACIwAAAAAgEIERAAAAABCIwAgAAAAACERgBAAAAAAEIjACAAAAAAIRGAEAAAAAgQiMAAAAAIBABEYAAAAAQKAjDIxvtLlWUP7Vllf+D\/RqXfm1l14BAAAAwK+tuJ7VQnxB2fWi98nOdnVPqajVpaSSS6sqlrzP6vmu2bH5zXWt76KPxXV73bp2P5q36wgD46IuftGv0\/2rXnlvNjNpDUwuK++Vj8Jy\/7A++mJCo14ZAAAAwK8lq4lvzqvl1Cmdco4Wnb8e17p3Nti64tf995zSmUt9errpnfYUF37U57+vXnPq95fVt1Qb4YpLfbrsv6blvK5NBbW+rqdDV\/Wpc12Xkt6ngVYi+ty57nNFct5nR+w\/NjC+C2GNwAgAAAAcjey9z5xg9eMTN6St\/6vLCWWfDzXOF+ujl2vu0eqEvv3klD4JLbhlqxjXtRbz2XcTWrUri6WsIv\/TolOfmLBXyYwLum3vK19jQ2HP56buyxp54Vzgeaofz7eo5fy36vru\/A6B0W3nk08+eY8CY3FVo\/1TOtce0em\/TepGYs07IeWnp9UamlXKK1up0Um13k17q4LlwLiiVHRSZ68O6+ytaQ2svHHONmPrufDNoAlrEZ0NTap9ulD5vPXuolJzM7po+nTuvvcvy1pGofCYznw1onPhhGK5um2wZhwDd8cqfehZ2t02050D45bypi9Xro\/oxNWoWvvTWvb\/h4lG81dcVujOpK5M1P7L7owv\/FjLXhkAAAD4MHmBzR\/0jORNE+z+2GeiV7CFf57X+W9MyPPKVvLmKZ36c6Ty2frY1e3BL+eu\/H075f1l3gbNP57Xj3Nu0eFd0zXrlR0L6rsVd0Ll6pANlI0D4+r9L9XS8q3i\/6\/rfQmMqwp9069jJoRdGX5sAtmIjpsAePa+G96CwtTorX591JbwAo8bGH97OaKT342ZcGkDnTnfOqwbmebPNTYKjE79lwZ1\/C\/DOmc+vzJpvvZMQr9r7dfHbWNq70+o9buIjvnbWDf9uOyOo9Wcb78+rI+\/GNTF+M6hsXlg3FLKnD9mQ\/F1E\/TM+E6bfhz7JqGU03Sz+StqoNOM5etpX+BeUuslM193lrwyAAAA8IHywtm1f3llT3HqWxO2vtRI7bpLE6uK\/PmUWm5WY5wTIP87Uhc6s+r7o7nuVm1A9SvOdumTJkGvaWB8MaGrLS1uIDX1vB+B8fmMzpiAc2GyvCJoV9MeK+atEO42MH7UPlN9DnHLDUXHbi16HzTWsP7WqAYqW4e94OVvQwWF2qttpO5GTMicVKySUbcUu2PCaKWfjTUNjK8e64IJiCd7fbUsJkwojuiK\/a8OO8yf4hMmbEbUnnaLmp3Ub02Qba35LxYAAADAByhwNc\/YY9jKDtlVPRMwfdfXrzi63GB5yhcsa2wm1XXulD41gbL2SceqxoGxqPh3LWr564T7\/OV7Exi9FTK7Imi3efbMrmjTNzu7DYz1zzDGQuaaq4maraxBdq7fSuuiCW0nbs1oYPJx5bjx93Ig9Mbw3VTN+YHwSOMg6NM0MCZs4LMrmV55m+bzVw7PJ++uOMXYP0yfa1YcAQAAgA\/UIQTG7P3LOnPqU1NHbcTbc2C0YdE+p\/g\/9auStRoFxuK\/rukTf2h9fwKj4TyDZ58\/HNRvTDD7qDVS2cq528BY3sJalur1Vvy8ciO7C4zettdv7JZXuy3UdzjPUq7qRpu55+vo9vN1z18GaRoY4xPmnAmMvgXGbZrMn1UNibXhEQAAAPigrY7oS\/8zhR73+cOrmgh6WanP+tQ1fWrC4tWx7RFv4VbQc5DeM5PddVtSN5+q739MWPyv21qoe9NqvcDAWDRh09T7aSjp\/JSGc\/y\/a05g7Hti\/txoufJXdMDAWNRmeSvn1jM3fHmBzQ1TYxqtbPV8qZ5r2wNj7TN57nbRj76b3fHnMnYXGN1AuO25v2J1G6hzT82WVaNyvrmmgXE5odN2y+mE71t+9UyxyceaKf\/niibz51ic1gkbOu\/b7ag7hE8AAADgg5FV359OqeV\/474toO7WzlN\/avzSG8t9m2qLvhwKvqoYv6aWU5+p79\/eB9a\/+\/SZueda3Pd3+\/LbU8+ZELhDWLQCA6O3Ulr5aY66o9kbX38t+w+M6WmdNIHod33LbuhZTav1634duzbnhq8ZG3L6dbxzVjMrKxoNj7iraHWB0b6ApnV6Vfm1VcX6ozUvzmkmf99uGx3WlVlzr\/fj\/9sDo3vdMbtyN2m3fL7R5tKcLlz2hcjZSdPmoM72L5l6zPnnS2q3W0XrQ2SA2sC4qtDfIjp967F3X0E935l6Lo+pZ6lgxreins5BfdQ6op7n5vRO8+dYUbv9zM7bLvoDAAAAfCjsamKLXSUcWtDq+qoWnN86bNHVsfLy4qpG\/npen9+s\/jajfTGN\/emNP\/y1T\/F43Hc8rVzjrCaeM2H0v7oUX1nX+kpcXf9lg+Ftc6bMC4smWHaN+euJayEXvCzY9KU3fu\/PltQtpe5HdcKGGRN87PFx25RilZl+qVjYvnHUPXcytKiegC2pF6Pmn\/btqN51p8NL2kVAl14t6YpdkTP3\/PYfbvgLCoy2HzN3vbDqtXHi2oxSle9xS\/mxCZ2sH8daZWm0odrAmNEV+7ZV\/\/OX6xm1fzfovCnVqduE4ysz5S2nO82fy22jX2eGdw7RAAAAwIejqIV\/fq4z5RW5lj\/o8r2nvhXHp\/rRBj\/fG0+d5xPL19ccdUFuZULfnreB0D1\/5k8mPAb8zEZtHe7RaFXwAwyMZW+0uVaorPLtz5Y2C4WAl+ZUw1T1aLAFdCdbReVNP2teLFMjYBzettKgflyMe9fsxqt103ajn+k4jPkDAAAAPlClovPsX8O\/5h9A0T5TuKvVrPfXIQTGt8QJWXYrZ\/2x8+8jHhovZAYdjYMnAAAAALwf3t3ACAAAAAA4UgRGAAAAAEAgAiMAAAAAIBCBEQAAAAAQiMAIAAAAAAhEYAQAAAAABCIwAgAAAAACERgBAAAAAIEIjAAAAACAQEceGHOPwkr84hXeFxtpRUfT2vCK+\/dGy5NTOns1ohNfRXTm1oxm1ra8c0dpSVe+mlLMK9XaX5+X70ed62uOa7Na9s6\/DZtjUR27PKUZrwwAAACg1pEHxuxkm2IrXuF9sT6vvnvzBw6M+fsj+vibaTM\/L7W5XlAqOqbjlycVO\/LMuKiLX0xo1Cv57bfPy\/3D+qhzTvm1QvUoFL2zb0lxVTPpda8AAAAAoN7BAuPrgjLzCcUfxpV8WlDlr\/fFrJJP8io+TylhziXmc9VzdZzAmNlQZjZu6kko9bz2yuKLtJKmjvijeWV9Cay4klRypXqtv2z\/nM4XlbV1Pik4n9UqqZCZd\/oWn02rNpcUlV+0Y0po\/peiW9cL75TRqD81vMBY2DTzUNfGRiahhBlvlelnMqGajzyjt\/p1Me4VHC+Vmk5r+ZVXzGUUujup1tCUbkyveh+a0DY9rZ7UumaGp8y5aQ2svJHWzLVhc23Yv+K3op7QrFJeaVt5a90EvmlTx6Su9Jt2K\/PUODDu2OcGnMB4a9Er1WnYD9Pfu2mlHs\/oihnn6Fp57GsatfMy6v2XCBMMR\/vtXEyqPbqifHn4a2m1m\/vz5o+B962vaCDoPgAAAOADsf\/AWMopdqdbD2azJgyZ4DjZq+7pnHvOBqY7YUUfmXMbeaXGuhWazJqYtp0NjKG7Mc0\/K6hgwtkDU2fiuXuutBJT2JxL5zfcc+EBzXv5b2O+T33z1ZTlL9s\/d4eHFFvMKGOCY62SclPd6h5JKmtSXCETU++duNyeF5W+36neKRMiNgrKPoqq726osgLarD817Ph\/6NXQpG1jQ\/mnpo1wTNnX5tyLpHp\/Sqpym73WX\/ZJ3Y3o+LWEYqsm8NVbntHvWiO6GF3W8sqSbnw3qLP33Vps+DreNqH26RWlJid08lJEp69NaXRpRaP\/GNax9hknJG0Pfv7ySxP+IjoZmtPMirnvblQnvpnxtog2DoxN+9xE48C4Qz8uDZqxmbA36YZSZ+xfjeji8GMNpMx8bD3TjW8iOmuD5cqyCcQRnQiltWlvX07odFvCqWvbfa\/SunjZzKm9b80ER9OH4\/9YsncBAAAAH4yDrTCWfBGw4NuGaUPQ\/81XQ1AxrQc\/lENZLRsYx30PqhXmysGvoORPvUr6VvdKmXF1jmWc4LlTYOybC4pgnq2SL7wWNP9\/fZq3OxNNmAvXbCUtKhUpb5lt3p8advxtD5S2AdFTSIa9\/m1o\/l61nsJsr3pnG\/X1pWaGJ3TmUr8+vjSss+E5E17Ky1xb2nzlC2VTY5XAZcPP6b5nzp+lVd1oi6i9ksX8Ya9JYExP62QlWFov1XNtUK2z9s+NA2PzPjfmBMbWwZpnGK\/Yhwt37MeYRn3V145d2pwY0\/E7vqC3ldEVEwx71syf6wKj\/z7HK99\/bMhUrwUAAAA+FAcKjMVf5pX4eUjhnrDCd7rU4Q+MNcErq1hbzPzvdvXPMFaDX8A9vnp3DIy+c9ts5jT\/KKoh2+9wt7o6vMC4ElPbZG0vq\/1r3p8a9YHZ8tVdXDRzlrRnbQgdUspZ7trBuru6dvzyhGLO9s6XzjbNC38bNuHKBK2\/9NcGxv7yFlUbGId1o5J0dhkY4xPbAtzx1vJ202aB0WdbnxtzAmPQCuMe+1E7drd87C\/++wf1m1ZvPuoDo+8+G8jziYSuXB9x7jlxaVDHCIwAAAD4wOw\/MD5PqPteQrkNb33NH54OLTCO195jVzEHUwcMjHkl7vQp8WxDJWdlyq74eYHxl5g6fq5dMcxO+ANj4\/7UsOOvW1EtLUUVKm\/Z3UyZsJpUwW5PjaQaPN\/5Rptr69qsWZzb0ujfTVhKmFFETRC7PqtU+eFIG6wOOzD+PSDAORoFxuZ9bqZpYNxDP4IC47aVw7JmgfHxlI63TZnv\/qVb9l0LAAAAfCj2HxjtitlENT5tLD445BXGkjJjnRqoPCRYMtd2V7ZvbiwMKDSRccPWVkHJe227DIx1wW8jpQflFUbnuUwTJr0X75RezGvoZrl\/zftTw46\/LaTx5XL0LJhQGlK8kltMXT+HzByFFV3atqHVU1CovV\/nor63eK491oVLIwo9rw9Cb0y\/B\/cRGNO62Dqs9rTd2rql\/OSYfls+98q01RpVT3k76dYzhW5NaMCZi0aBsXmftbWmmclM4MtjbJ8DA+Me+7Et+NktrV9PaaacytcXdeV6wi03C4w1QXVLy8MjrDACAADgg3OALakFpSJd6grbbZ1hDU2NH\/IKo\/E6p8Q9r407XQqPpk2rHudcp9pudprzMc3\/a7crjKbnC0Pq+t7UabekDsU0Xn6G0drMKh5xzw09zCpVWWE0mvXHzxl\/QvNTvW4b33ep71HOxMQq+\/xjR8e4Mo3yopWb08Wv7bOA7lbKj+1Lbsbsw3eGCT4XzWfH7TbLy+bzW9F9BMYtpezvH7aaNloHdSaS0AVfANucmdLp8nZO88\/T4SX3ZTENA6PRrM82vH1h+pJxi34NA6Oxl35sC37lMXr3H\/9LROfue0G7WWC0wbR9UL8xc3vispmb0BgrjAAAAPjgHOylN9broorNQs9heBttbJVUDKq0bvWruiXVZy\/9Mde6W19rOS\/MqXtesqF1+7uE3tbIGlvaLBS0WV49eytsG\/XbTHehYZ\/3a5\/9qLDbZffRHzuOV\/tuFAAAAPiPdvDA+D7ZyinxU1gPZtPKPcspPRtVOBxT7lDDakHZefvzIbVvXAUAAACAdw2Bsd7WhnKLScUfxpWYz9T9qP8hKJn6MxnlGu+YBQAAAIB3AoERAAAAABCIwAgAAAAACERgBAAAAAAEIjACAAAAAAIRGAEAAAAAgQiMAAAAAIBABEYAAAAAQCACIwAAAAAgEIERAAAAABCIwAgAAAAACERgBAAAAAAEIjACAAAAAAIRGAEAAAAAgQiMAAAAAIBAv35gfF1UseT9OVBJxeYXHEipWDQtHKLNnNK\/FL3CARxWPXux9Xbn2n6X+UxGhdflovnu32p7AAAAAA7Trx4Ys5Nt6pvf8EoB1ufV1xZT1iserqxibX2aX\/eKhyD\/qFttdxLKe+X9Oqx69mQlprZ782rybdQpmgCY08ZuM18xrQcdHXrw1A3CG\/N9e2wPAAAAwFEiMH7I9hwYDzZ\/BEYAAADgP8sBA2NR+cWExu\/3qe\/+uJJPC9u2e26szCvunI8rlS9tD4zFgtKzUQ31DCk6mzXFnQNjuc5wJKrEYr7SZnElqbitwytbhSdxJVfKn3iBp1BUttzmo5Tyvhvc6ze0kUnowb0+PXhozr+WSoW0kj8PueN4Xr1hW5uV8Zh7J5LKbnqfe\/bS941Msjq3mdqYVR5XcTmpaCSsoZ+Tqrtku42s5h8+UN+9B4rbtgMCY\/F5SgkzznL\/quPKKmnu7W0LaWAsrviTgnfCu2fCrXd8Nl3dgiozFw\/jSr9wS9sC4w5zBQAAAOBoHSAwFpW+36GOuzGlVnLKmSA0fqdDAwvV+FGYH1DHnQcmSGaUyaQUuzekgXu+wPjaBDhzT+9UypzPmPBgQsfggMJNAmPxyQO3zkxehXxasbudGph3w0vQClZtQLWBMayBQRNQTLCxbaamek19pj0v5Njrw6af0Uf2fFqJQTPGQVMeTSrt9bHbt8pW22ZOcW88uULBhFJzra\/u3fe9pNzDsDrt3Jo2nbm726HuqVwlYDr9NP0a8ubOGUfHA6UbhS4TxAc6un3j7tOQmQf\/fG0sDqnT933F73WqcyzjtlnaUM6E6CEzf+ML5ryXsp0xdfQqtphV7pkJpGPdZr5SXp12vtsUW3EKe5orAAAAAEfvQCuMpYIJPr6\/4JeWomorh4VSRuMmSCS91SXH64yiHdUAV5g1IednL5B4CsletTUJjE4AnKuubmlzo9KH3QXGNvUmffeb1jM\/m+Ay635mr2\/z98lZ8TRBrLLUtqHUYJuiS+4VNW0622nHfX0vqbhefcnOrvvu1DOklD\/8OXNXnU+nnyNp39xtaN6E8QdP\/GuUZWaMY2aMAeOuCXA\/1H1f2z7zVmj9W1JfF5Qv+L5B871H2waUciptEhh3mCsAAAAAR+\/AzzCWigXl7IrVbFzjke5qIHiRVPiHuIkcfjaklAOc++dtAcfet9MKY0dYQ49SyuY3VNryThi7C4whxZ95RY+ts+1+2tl+6QSxSV\/rAc9U+uusbdOumrWp815M809zKtS9EXS3fa8J3hV2Rbc6X9v6adSO1a+gZM\/2cTvt+L+vrqiSzopm+UhpvKcajt35C3iGsVRU4Zm5fjGp+MSQbwW2SWDcYa4AAAAAHL0DBMaCUpFOdXw\/oOjDuJKLGeXmx6uB4JeYOnqS5qpa2YlyqKldqavYxTOMxRcZzT+Kaijc5QSw2Ipbx+4Co32G0SuWLVf7fbDAaGxtKGeCk332sPumCUSRVM0c7KbvGwsDapvYPgPVuQvop9E4MOYUM23Vrh4avnE739cPAxo332W87tj2DKgvMBYWhtTZ0aWBn821syllns1rfFeB0dhhrgAAAAAcrf0HxmdxhepWEGtWrDZSGqjZymnZla5qqMlNdSg0XbcGaevYITD6OauDXj9q2vf4Q1Y5wNSH1EIyrI4ptx8HDox+W3klzHiDt4nW9r2mnoC5deeuQ7Ff3NLeAqMbzuv7Ycdd+31FlWm60FcfGO2W1bqVS2dL6i4Do98OcwUAAADg17f\/wGiDVEe0Gghf55Uc9D8T574Up9uEmvIlhTm7GuULNSYYdXcMVFf8iiZghDvU0TAw2uf0OiovirEKs74Q8iKpXhNWEs5bTEvaeDqusL89J8CY+sOm\/kqn3JfBlEPPgQLjSkyd\/he3FDMa\/8GEPCcwNe97bZgy4fAnc63vecfCnH2BUDVE7i0wuuHUebmPb9xDN\/3fl\/tMo\/\/7cubmpvl+KgHRzl\/YzK9X9MYU9X5n0daRT5p+7iYwNp0rAAAAAO+CA2xJLSn3qE+dJoB13elSx80hpeZ8Wxyt1zkl7nWqraNLXSachKeySteFmsKTqBPqOr\/36ljeYUtqIa2oDZXfh51tjB1hE1oruarcJxOmTL+2t2cDjAkzyyknLHV9b\/sWVtT3ExEHCoyV9jvVbbecmn\/2Paq+2bRZ37etvm1mnbeUtnV0OiG786eYMr6X4Ow1MNZ8X2bcTmh+WvezGib0z4+GnX53fW\/C5M3emrmxnC2odn69Zz5LzxLqs2P5vltdpq9DC7vdkrrDXAEAAAA4cgd+6Y22Siru9MKS10UVfW9T3c7Wsbc3ZJbM9c3r3Jmt460EFGdOGte9p77vOHd7tJvvq2Ta3ONLaJy59L3EZ9d2mCsAAAAAR+fggREAAAAA8F4iMAIAAAAAAhEYAQAAAACBCIwAAAAAgEAERgAAAABAIAIjAAAAACAQgREAAAAAEIjACAAAAAAIRGAEAAAAAAQiMAIAAAAAAhEYAQAAAAABpP8\/vdUuBVAF\/LoAAAAASUVORK5CYII=)","557f6535":"# **5 - Modelos**\nUsaremos 4 modelos e compararemos o coeficiente de correla\u00e7\u00e3o, o erro quadr\u00e1tico m\u00e9dio e sua raiz. Em cada se\u00e7\u00e3o deixaremos links de artigos que explicam o funcionamento e as altera\u00e7\u00f5es dos par\u00e2metros que nesse projeto optamos variar apenas 2 deles.\nO modelo Decision Tree ser\u00e1 usado como modelo base. ","434b0659":"### 3.2.1 - Vari\u00e1veis Categ\u00f3ricas","dc9909fb":"## **3.4 Tratando as colunas correlacionadas da se\u00e7\u00e3o 2**\n\n**Vari\u00e1veis que ser\u00e3o exclu\u00eddas: 'GarageCars','TotRmsAbvGrd', 'GarageYrBlt'**\n\n**Vari\u00e1veis que ser\u00e3o somadas: 'TotalBsmtSF','1stFlrSF','2stFlrSF'.**","57e4b9fa":"## **5.3 - Gradient Boosting**\n\n[Artigo sobre Gradient Boosting - conte\u00fado em Ingl\u00eas](https:\/\/https:\/\/towardsdatascience.com\/understanding-gradient-boosting-machines-9be756fe76ab)","303a6a15":"### **7.2.1 - Decision Tree**","64e882ac":"## **8.2 - XGB Boosting Regressor**","069f94e9":"# **2 - Conhecendo os dados**\nNesta se\u00e7\u00e3o exploraremos o dataset train para entender as vari\u00e1veis do problema e a correla\u00e7\u00e3o entre elas que auxiliar\u00e1 nas tomadas de decis\u00f5es nas pr\u00f3ximas se\u00e7\u00f5es.","1023200f":"Conseguimos melhorar os resultados ao aplicar novas t\u00e9cnicas no conjunto de vari\u00e1veis explicativas como exclus\u00e3o das vari\u00e1veis com baixa correla\u00e7\u00e3o, _feature_importance e a fun\u00e7\u00e3o SelectBestPercentile.\n\nAnalisando os resultados de outros competidores vemos que ainda \u00e9 poss\u00edvel melhorar as m\u00e9tricas. Topa o desafio?  :D","02c7f0bb":"O resultado das predi\u00e7\u00f5es melhoraram ao usar apenas 41% das vari\u00e1veis obtivemos melhores resultados.","b7f9cd7a":"**Usaremos o m\u00e9todo feature importances que retorna um vetor com um valor da import\u00e2ncia de cada Feature para  modelo. Posteriormente plotaremos em um gr\u00e1fico.**","ec2667b5":"Nesse caso n\u00e3o conseguimos melhorar a m\u00e9trica REQM ao excluir as vari\u00e1veis com baixa correla\u00e7\u00e3o.","85eb2667":"Com a transforma\u00e7\u00e3o dos valores em logaritmo realizamos os novos c\u00e1lculos para curtose e simetria vemos que os valores est\u00e3o pr\u00f3ximos de uma distribui\u00e7\u00e3o normal e com isso podemos seguir com nosso modelo.","aa98a9d3":"No dataset h\u00e1 43 vari\u00e1veis categ\u00f3ricas e 38 vari\u00e1veis numericas, sendo que 80 s\u00e3o explicativas da vari\u00e1vel alvo Pre\u00e7o de Venda (SalePrice).","8fd8bf8a":"## **5.1 - DataFrame para comparar os modelos e bibliotecas utilizadas**","c2dade54":"Interessante notar que com 33% dos dados os resultados s\u00e3o melhores do que com mais dados, curioso.","e6fae556":"Observamos uma tend\u00eancia de crescimento ao longo do tempo nos 3 primeiros gr\u00e1ficos.","1c1b969c":"## **4.3 - Convertendo os valores categ\u00f3ricos em valores num\u00e9ricos**","1e0132f1":"## **2.1 - Tipo de dados**\nNesta se\u00e7\u00e3o exploraremos o dataset train para entender as vari\u00e1veis do problema e a correla\u00e7\u00e3o entre elas que auxiliar\u00e1 nas tomadas de decis\u00f5es nas pr\u00f3ximas se\u00e7\u00f5es.","ab7cd001":"Podemos observar no gr\u00e1fico acima que:\n- 'OverQual' possui correla\u00e7\u00e3o de 0,79 com o Pre\u00e7o de Venda.\n- 'GarageCars' X 'GarageArea' tem correla\u00e7\u00e3o entre elas de  0.88, que \u00e9 l\u00f3gico e at\u00e9 esperado. Logo n\u00e3o \u00e9 necess\u00e1rio ter as duas no modelo.\n--  A vari\u00e1vel 'GrLivArea' possui boa correla\u00e7\u00e3o com Sales Price, ent\u00e3o a manteremos para o modelo.\n- 'TotalBsmtSF' (Total square feet of basement area) & '1stFlrSF'(1stFlrSF: First Floor square feet) possuem correla\u00e7\u00e3o de 0,82. \n-- Como essa vari\u00e1veis s\u00e3o \u00e1reas, podemos criar uma outra vari\u00e1vel somando-as e assim n\u00e3o perder informa\u00e7\u00e3o. Nesse caso \u00e9 importante verificar se h\u00e1 mais 'andares' como informa\u00e7\u00e3o, e h\u00e1!: '2stFlrSF': Second floor square feet\n- 'TotRmsAbvGrd'(Total rooms above grade (does not include bathrooms) & 'GrLivArea' tamb\u00e9m possuem forte correla\u00e7\u00e3o (0.83). Excluiremo a primeira j\u00e1 que a segunda tem uma correla\u00e7\u00e3o melhor com a SalePrice, e parto do pressuposto que 'GrLivArea' inclui 'TotRmsAbvGrd' +  include bathrooms.\n\n**Vari\u00e1veis que ser\u00e3o exclu\u00eddas: 'GarageCars','TotRmsAbvGrd'**\n\n**Vari\u00e1veis que ser\u00e3o somadas: 'TotalBsmtSF','1stFlrSF','2stFlrSF'.**","1d3a29ef":"## **4.2 - Fazendo a normaliza\u00e7\u00e3o das vari\u00e1veis explicativas num\u00e9ricas**\n\nSimilar ao que fizemos com a vari\u00e1vel alvo SalePrice, normalizaremos as demais vari\u00e1veis dos 2 data sets.","93fd49fe":"YearBuilt e GarageYrBlt possuem alta correla\u00e7\u00e3o.\n\nComo a YearBuilt tem maior correla\u00e7\u00e3o com a SalePrice, exclu\u00edremos a GarageYrBlt.","205256b9":"Agora vamos investigar as demais vari\u00e1veis categ\u00f3ricas com valores faltantes.","044dbde0":"#**Predicting House Prices - Passo a Passo - Brazilian Portuguese** \n###*beginner, iniciante*\n\n**Feedbacks s\u00e3o bem-vindos!!**\n# **1 - Introdu\u00e7\u00e3o**\nO Objetivo da competi\u00e7\u00e3o \u00e9 prever os pre\u00e7os das casas em Ames, Ihoa nos Estados Unidos por meio do aprendizado supervisionado.\nS\u00e3o fornecidos os dados de teste e treino na p\u00e1gina da competi\u00e7\u00e3o do Kaggle que voc\u00ea pode acessar clicando [aqui.](https:\/\/www.kaggle.com\/c\/house-prices-advanced-regression-techniques\/overview). N\u00e1 p\u00e1gina tamb\u00e9m h\u00e1 centenas de c\u00f3digos dispon\u00edveis que podem ser consultados para melhorar o entendimento e aperfei\u00e7oamento da resolu\u00e7\u00e3o do problema, fizemos uso de v\u00e1rios. Quando necess\u00e1rio, buscamos artigos na web com explica\u00e7\u00f5es did\u00e1ticas e em alguns casos os indicamos ao longo deste c\u00f3digo. \n\nA competi\u00e7\u00e3o foi projetada para desenvolver as seguintes habilidades:\n\n*   Trabalhar com as **feature engineering** uma vez que s\u00e3o muitas vari\u00e1veis e ser\u00e1 necess\u00e1rio escolher as mais adequadas e transform\u00e1-las para o melhorar o desempenho dos modelos.\n*   Trabalhar com modelos de regress\u00e3o como o random forest e gradient boost. Neste material aplicamos mais dois modelos de regress\u00e3o: o Decision Tree e XGB. \n\nEste material est\u00e1 dividido 10 se\u00e7\u00f5es, que s\u00e3o:\n- **Se\u00e7\u00e3o 1.** Introdu\u00e7\u00e3o.\n- **Se\u00e7\u00e3o 2.**  Explora\u00e7\u00e3o dos dados e correla\u00e7\u00f5es por meio de gr\u00e1ficos e tabelas.\n- **Se\u00e7\u00e3o 3.** Tratamento dos dados faltantes, exclus\u00e3o das vari\u00e1veis constantes e aquelas com altas taxas de correla\u00e7\u00e3o; realizadas as modifica\u00e7\u00f5es na vari\u00e1vel categ\u00f3rica MBSSubClass.\n- **Se\u00e7\u00e3o 4.** Normaliza\u00e7\u00e3o dos dados e prepara\u00e7\u00e3o das vari\u00e1veis categ\u00f3ricas em num\u00e9ricas para aplica\u00e7\u00e3o dos modelos\n- **Se\u00e7\u00e3o 5.** 1\u00aa Aplica\u00e7\u00e3o dos modelos.\n- **Se\u00e7\u00e3o 6.** Visualiza\u00e7\u00e3o dos resultados obtidos na se\u00e7\u00e3o 5.\n- **Se\u00e7\u00e3o 7.** 2\u00aa Aplica\u00e7\u00e3o dos modelos com exclus\u00e3o das vari\u00e1veis de baixa correla\u00e7\u00e3o coma vari\u00e1vel alvo de acordo com a se\u00e7\u00e3o 2.\n- **Se\u00e7\u00e3o 8.** 3\u00aa Aplica\u00e7\u00e3o dos modelos usando as vari\u00e1veis que mais impactam o modelo por meio do atributo _feature importance.\n- **Se\u00e7\u00e3o 9.** 4\u00aa Aplica\u00e7\u00e3o usando a fun\u00e7\u00e3o SelectBestPecentile\n- **Se\u00e7\u00e3o 10.** Conclus\u00e3o e submiss\u00e3o dos modelos.\nVamos come\u00e7ar importando as bibliotecas necess\u00e1rias para os primeiros passos.","c45e4550":"Comparando com os melhores resultados da se\u00e7\u00e3o anterior, vemos que o melhoramos! Logo atualizaremos a tabela melhores resultados.","94bfa70b":"## **Gradient Boost**","5cf533b1":"## **Decision Tree**","8c37472b":"## **4.1 - Normaliza\u00e7\u00e3o da vari\u00e1vel alvo SalePrice**","a93e377d":"Com 253 colunas a menos os valores das m\u00e9tricas pouco variaram mas n\u00e3o conseguimos melhorar o resultado do modelo.","e64319a8":"Notamos pelo gr\u00e1fico que a distribui\u00e7\u00e3o dessas duas vari\u00e1veis s\u00e3o assim\u00e9tricas para a direita e esquerda.\n\nNa coluna GarageYrBlt vemos que a m\u00e9dia est\u00e1 pr\u00f3xima aos 50% dos valores acima e abaixo, portanto adotaremos a m\u00e9dia nese caso.\n\nJ\u00e1 na coluna MasVnrArea observamos que 75% dos valores est\u00e3o acima de 166. Adotarei esse valor nessse caso.\n\nBsmtFullBath e BsmtHalfBath adotaremos o 0.","dc665905":"## **2.3 - Investigando outras correla\u00e7\u00f5es**","c77c943d":"## **7.2 - Aplicando os modelos**","09d04339":"## **7.1 - Excluindo as vari\u00e1veis com menor correla\u00e7\u00e3o**","2d09668c":"### **7.2.2 - Random Forest Regressor**","2a07405c":"## **5.2 - Decision Tree**\n[Artigo sobre \u00e1rvore de Decis\u00e3o - conte\u00fado em ingl\u00eas](https:\/\/https:\/\/towardsdatascience.com\/https-medium-com-lorrli-classification-and-regression-analysis-with-decision-trees-c43cdbc58054)","e513a96c":"## **Random Forest**","d22c5fd1":"O XGBRegressor obteve melhor resultado com 49% do conjunto de dados e melhorou o resultado anterior!","c7ba2ca1":"Nesse caso o modelo obteve melhor desempenho precisamos atualizar os melhores_modelos.","f9616a02":"Os dados de treino possuem 1460 linhas e 81 colunas.\nOs dados de teste possuem 1459 linhas e 80 colunas.\n\nAo que parece foi realizada um divis\u00e3o meio a meio entre dados de teste e de treino.","556ae193":"# **8 - .feature_importance_**\n\nUsaremos o atributo .feature Importance nos Modelos Gradient Boosting e XGB j\u00e1 que at\u00e9 o momento apresentaram os melhores desempenhos. Conseguiremos melhor\u00e1-los?\n\nO artigo abaixo lista algumas fun\u00e7\u00f5es para melhorar a escolha de vari\u00e1veis. Testaremos apenas o m\u00e9todo _feature_importance e SelektBestPercentile. Vale a Leitura!\n\n[Como selecionar as melhores features para seu modelo de Machine Learning](https:\/\/paulovasconcellos.com.br\/como-selecionar-as-melhores-features-para-seu-modelo-de-machine-learning-2e9df83d062a)\n\nVoltaremos aos modelos da se\u00e7\u00e3o 5. Em uma situa\u00e7a\u00f5 de problema nos mundo real a escolha dos valores dos hiperpar\u00e2metros deverriam ser realizadas novamente, como o intuito \u00e9 did\u00e1tico n\u00e3o o faremos por quest\u00e3o de tempo."}}