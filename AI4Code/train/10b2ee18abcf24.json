{"cell_type":{"4eccd36a":"code","5325668f":"code","209dbb79":"code","168e6345":"code","f12afa7b":"code","f85690ad":"code","045b0f67":"code","0c5a5cd8":"code","def7d617":"code","2a5201e7":"code","f6b69a75":"code","3009e716":"code","a091ef09":"code","22235640":"code","cc6bcdad":"code","f33f9533":"code","f6f3f6e2":"code","e8ca150e":"code","94b2fd97":"code","bbc994a6":"code","19fdace2":"code","ba9f4588":"code","0d1a9c58":"code","ff69cbf3":"code","2b5f7b1e":"code","59ad6b9d":"code","6fb16626":"code","8042283c":"code","6295983d":"code","5573e5ec":"code","5855f16c":"code","9edfc675":"code","3f991fe6":"code","2b1aa6a8":"code","aa147d1f":"markdown"},"source":{"4eccd36a":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","5325668f":"import numpy as np\nimport pandas as pd\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nimport tensorflow as tf","209dbb79":"data = pd.read_csv('\/kaggle\/input\/real-or-fake-fake-jobposting-prediction\/fake_job_postings.csv')","168e6345":"data.head(2)","f12afa7b":"data.info()","f85690ad":"data.drop(['department','salary_range','job_id'], axis=1, inplace=True)","045b0f67":"data.fillna(\" \", inplace=True)","0c5a5cd8":"data.head(2)","def7d617":"data['job_description'] = data['title'] + ' ' + data['location'] + ' ' + data['company_profile'] + ' ' + data['description'] + ' ' + data['requirements'] + ' ' + data['benefits'] + ' ' + data['employment_type'] + ' ' + data['required_experience'] + ' ' + data['required_education'] + ' ' + data['industry'] + ' ' + data['function'] ","2a5201e7":"data.drop(['title','location','company_profile','description','requirements','benefits','employment_type','required_experience','required_education','industry','function'], axis = 1, inplace= True)","f6b69a75":"data.head(2)","3009e716":"data.reset_index(inplace= True)","a091ef09":"data['fraudulent'].hist(figsize=(10,5))","22235640":"data['fraudulent'].value_counts()","cc6bcdad":"import nltk\nimport re , string\nfrom nltk.corpus import stopwords","f33f9533":"\nstop_words = set(stopwords.words('english'))\npunctuations = set(string.punctuation)\nstop_words.update(punctuations)","f6f3f6e2":"# from nltk.stem import WordNetLemmatizer\n# lemmatizer = WordNetLemmatizer()\n# text = []\n# for i in range(0, len(data['job_description'])):\n#     clean_text = re.sub('[^a-zA-Z]', ' ', data['job_description'][i])\n#     clean_text = clean_text.lower().split()    \n#     clean_text = [lemmatizer.lemmatize(word) for word in clean_text if not word in stop_words]\n#     clean_text = ' '.join(clean_text)\n#     text.append(clean_text)","e8ca150e":"from nltk.stem.snowball import SnowballStemmer\nlemmatizer = SnowballStemmer(language='english')\ntext = []\nfor i in range(0, len(data['job_description'])):\n    clean_text = re.sub('[^a-zA-Z]', ' ', data['job_description'][i])\n    clean_text = clean_text.lower().split()\n    clean_text = [lemmatizer.stem(word) for word in clean_text if not word in stop_words]\n    clean_text = ' '.join(clean_text)\n    text.append(clean_text)","94b2fd97":"text[0]","bbc994a6":"\nfrom tensorflow.keras.preprocessing.sequence import pad_sequences\nfrom tensorflow.keras.preprocessing.text import one_hot\nfrom tensorflow.keras.models import Sequential\nfrom tensorflow.keras.layers import Embedding\nfrom tensorflow.keras.layers import LSTM\nfrom tensorflow.keras.layers import Bidirectional\nfrom tensorflow.keras.layers import Dropout\nfrom tensorflow.keras.layers import Dense\n","19fdace2":"voc_size=5000","ba9f4588":"onehot_text=[one_hot(words,voc_size)for words in text] \nonehot_text[0]","0d1a9c58":"sent_length=100\nsent_with_same_lenght = pad_sequences(onehot_text,padding='post',maxlen=sent_length)\nprint(sent_with_same_lenght)","ff69cbf3":"sent_with_same_lenght[0]","2b5f7b1e":"#  model\nembedding_vector_features=30 #80\nmodel1=Sequential()\nmodel1.add(Embedding(voc_size,embedding_vector_features,input_length=sent_length))\nmodel1.add(Bidirectional(LSTM(150))) #combined two LSTM: one works from the start to the end, the second works from the end to the start  #90\nmodel1.add(Dropout(0.40))\nmodel1.add(Dense(1,activation='sigmoid')) \nmodel1.compile(loss='binary_crossentropy',optimizer='adam',metrics=['accuracy'])\nprint(model1.summary())","59ad6b9d":"len(sent_with_same_lenght),data['fraudulent'].shape","6fb16626":"import numpy as np\nX_final=np.array(sent_with_same_lenght)\ny_final=np.array(data['fraudulent'])","8042283c":"X_final[0]\n","6295983d":"from sklearn.model_selection import train_test_split\nX_train, X_test, y_train, y_test = train_test_split(X_final, y_final, test_size=0.2, random_state=42) \n","5573e5ec":"model1.fit(X_train,y_train,validation_data=(X_test,y_test),epochs=15,batch_size=64) ","5855f16c":"y_pred=model1.predict_classes(X_test)","9edfc675":"from sklearn.metrics import confusion_matrix\nconfusion_matrix(y_test,y_pred)","3f991fe6":"from sklearn.metrics import accuracy_score\naccuracy_score(y_test,y_pred)","2b1aa6a8":"from sklearn.metrics import classification_report\nprint(classification_report(y_test,y_pred))","aa147d1f":"**References**\n\nhttps:\/\/www.kaggle.com\/madz2000\/text-classification-using-keras-nb-97-accuracy\n\nhttps:\/\/www.kaggle.com\/gauravsahani\/real-or-fake-job-postings-with-bi-directional-lstm"}}