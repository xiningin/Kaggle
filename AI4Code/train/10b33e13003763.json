{"cell_type":{"a5c012a3":"code","f4bb338e":"code","46a1d269":"code","588e2f46":"code","692ed667":"code","815ea650":"code","f6e5eb9a":"code","2821ccb6":"code","210766c9":"code","45445c5b":"code","8bc1f93d":"code","880b4f00":"code","55c2e6e7":"code","5c9bd4dc":"code","9eddaf8f":"code","a1694efa":"code","0789005c":"code","1a55ce82":"code","957681f7":"code","08505ac5":"code","5494dceb":"code","c1a24a1a":"code","3339b42d":"code","49575092":"code","c1f533cf":"code","c5e2a8dd":"code","3a18c039":"code","347c517c":"code","fa11bd15":"code","8db0d855":"markdown","5a97c507":"markdown","50ef06a5":"markdown","e5c5f9c0":"markdown","29728c6d":"markdown","99376223":"markdown","c7879f55":"markdown","f66e7caf":"markdown","c8b827bf":"markdown","32bf8093":"markdown","3b580f38":"markdown","85037959":"markdown","35009c1e":"markdown","2c003e75":"markdown","a1513aef":"markdown","d7bed99f":"markdown"},"source":{"a5c012a3":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nsns.set_style('whitegrid')\n%matplotlib inline\n\n\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","f4bb338e":"train_data = pd.read_csv(\"\/kaggle\/input\/titanic\/train.csv\")\ntrain_data.head()","46a1d269":"test_data = pd.read_csv(\"\/kaggle\/input\/titanic\/test.csv\")\ntest_data.head()","588e2f46":"train_data.info()","692ed667":"sns.countplot(x='Survived',hue='Pclass',data=train_data,palette='rainbow');","815ea650":"import re\ntrain_data['Title'] = train_data['Name'].apply(lambda x: (re.search('([a-zA-Z]+)\\.', x)).group(1))\ntrain_data['Title'].value_counts()","f6e5eb9a":"\ntitles = {'Capt':       'Officer',\n          'Col':        'Officer',\n          'Major':      'Officer',\n          'Jonkheer':   'Royalty',\n          'Don':        'Royalty',\n          'Sir' :       'Royalty',\n          'Dr':         'Officer',\n          'Rev':        'Officer',\n          'Countess':   'Royalty',\n          'Dona':       'Royalty',\n          'Mme':        'Mrs',\n          'Mlle':       'Miss',\n          'Ms':         'Mrs',\n          'Mr' :        'Mr',\n          'Mrs' :       'Mrs',\n          'Miss' :      'Miss',\n          'Master' :    'Master',\n          'Lady' :      'Royalty'\n                    }\n\n# train_data['Title'] = train_data['Title'].map(titles)\n# train_data['Title'].value_counts()\n#map method is leaving Officer and loyalty so i dumped the method\n\nfor key,value in titles.items():\n    train_data.loc[train_data['Title'] == key, 'Title'] = value\n    \n#New frequencies.\ntrain_data['Title'].value_counts()","2821ccb6":"# Had forgetten bout test data lol\ntest_data['Title'] = test_data['Name'].apply(lambda x: (re.search(' ([a-zA-Z]+)\\.', x)).group(1))\nfor key,value in titles.items():\n    test_data.loc[test_data['Title'] == key, 'Title'] = value","210766c9":"sns.countplot(x='Survived',hue='Title',data=train_data,palette='rainbow');","45445c5b":"sns.heatmap(train_data.isnull(),yticklabels=False,cbar=False,cmap='viridis');","8bc1f93d":"plt.figure(figsize=(12, 7))\nsns.boxplot(x='Pclass',y='Age',data=train_data,palette='winter');","880b4f00":"def impute_age(cols):\n    Age = cols[0]\n    Pclass = cols[1]\n    \n    if pd.isnull(Age):\n\n        if Pclass == 1:\n            return 37\n\n        elif Pclass == 2:\n            return 29\n\n        else:\n            return 24\n\n    else:\n        return Age","55c2e6e7":"train_data['Age'] = train_data[['Age','Pclass']].apply(impute_age,axis=1)\ntest_data['Age'] = test_data[['Age','Pclass']].apply(impute_age,axis=1)","5c9bd4dc":"# checking the heatmap again\nsns.heatmap(train_data.isnull(),yticklabels=False,cbar=False,cmap='viridis');","9eddaf8f":"train_data.drop('Cabin',axis=1,inplace=True)\ntest_data.drop('Cabin',axis=1,inplace=True)","a1694efa":"train_data.dropna(inplace=True)\ntest_data.dropna(inplace=True)","0789005c":"train_data.head()","1a55ce82":"sex    = pd.get_dummies(train_data['Sex'],drop_first=True)\nembark = pd.get_dummies(train_data['Embarked'],drop_first=True)\ntitle  = pd.get_dummies(train_data['Title'],drop_first=True)\n\nsex_1    = pd.get_dummies(test_data['Sex'],drop_first=True)\nembark_1 = pd.get_dummies(test_data['Embarked'],drop_first=True)\ntitle_1  = pd.get_dummies(test_data['Title'],drop_first=True)","957681f7":"train_data.drop(['Sex','Embarked','Name','Ticket','Title'],axis=1,inplace=True)\ntest_data.drop(['Sex','Embarked','Name','Ticket','Title'],axis=1,inplace=True)","08505ac5":"train_data = pd.concat([train_data,sex,embark,title],axis=1)\ntest_data  = pd.concat([test_data,sex,embark,title],axis=1)\n\n","5494dceb":"train_data.tail()","c1a24a1a":"from sklearn.model_selection import train_test_split","3339b42d":"X_train, X_test, y_train, y_test = train_test_split(train_data.drop('Survived',axis=1), \n                                                    train_data['Survived'], test_size=0.30, \n                                                    random_state=101)","49575092":"from sklearn.linear_model import LogisticRegression","c1f533cf":"logmodel = LogisticRegression()\nlogmodel.fit(X_train,y_train)","c5e2a8dd":"predictions = logmodel.predict(X_test)","3a18c039":"print(len(predictions))","347c517c":"test_data.info()","fa11bd15":"output = pd.DataFrame({'PassengerId': test_data.PassengerId, 'Survived': predictions})\noutput.to_csv('my_submission.csv', index=False)","8db0d855":"***Roughly 20 percent of the Age data is missing. The proportion of Age missing is likely small enough for reasonable replacement with some form of imputation. Looking at the Cabin column, it looks like we are just missing too much of that data to do something useful with it at a basic level. We'll probably drop this later, or change it to another feature like \"Cabin Known: 1 or 0\"***","5a97c507":"***Its evident that wealthier passengers in the higher classes tend to be older, which makes sense. We'll use these average age values to impute based on Pclass for Age.***","50ef06a5":"## Converting Categorical Features\n***We'll need to convert categorical features to dummy variables using pandas! Otherwise our machine learning algorithm won't be able to directly take in those features as inputs.***","e5c5f9c0":"## Building a Logistic Regression model","29728c6d":"### Name \n**Names by themselves are useful. One way to use them is grouping people by family names - maybe families have better chance for survival?(a Lannister could have survived and not a Stark if it was in GOT) But it is complicated, and there is a better way to create a feature for families. Another way is extracting a title from the name and using it.**","99376223":"### Age \nusing seaborn to create a simple heatmap to see where we are missing data as we already know we have null values for age","c7879f55":"***Grouping the titles by social status***","f66e7caf":"## Training and Predicting","c8b827bf":"**Passengers with Pclass 3 had less chances of surviving. This is reasonable, as passengers in the first class lived at higher decks and thus could get to lifeboats faster.**","32bf8093":"***891 rows in train data.Name, Sex, Ticket, Cabin and Embarked are categorical variables. Name contains a name itself and a title. Cabin and ticket consist of a letters and numbers.***","3b580f38":"### Data Preparation","85037959":"\n### Passenger Class","35009c1e":"### The Data","2c003e75":"## Exploratory Data Analysis","a1513aef":"***dropping the Cabin column and the row in Embarked that is NaN..***","d7bed99f":"**It's clear most of mr(men) didnt survive the distater...more women survived especially those who are not married.It makes sense as men kinda helped them survive**"}}