{"cell_type":{"d3acd598":"code","18818897":"code","096a3f74":"code","deadc9e4":"code","e8ad5cbf":"code","829493f1":"code","9479b6a3":"code","4dbdcb27":"code","fbc37534":"code","3f236c60":"code","afdf48f2":"code","e1233edd":"code","cefe51c9":"code","c7531fcc":"code","cc915835":"code","5ae580ba":"code","198dbe50":"code","1a45b59d":"code","7e468234":"code","f3f97208":"code","9264c985":"markdown","b98e9bf2":"markdown","378151c8":"markdown","f10f4adf":"markdown","ba86eae1":"markdown","cfd02af5":"markdown","be3af1f7":"markdown","b0f20b51":"markdown","c53e8120":"markdown","55c1839c":"markdown","bc7975ea":"markdown","e772d9f5":"markdown","cb704bf6":"markdown","1bec1579":"markdown","5811f0e7":"markdown","4a3308c8":"markdown","739b6ac7":"markdown","faebb9a8":"markdown","f2e02ac6":"markdown","8940bbc8":"markdown","bf1b2bd5":"markdown","edd658d9":"markdown","c2a4b220":"markdown","60b154e3":"markdown"},"source":{"d3acd598":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","18818897":"import cv2","096a3f74":"import numpy as np\nfrom matplotlib import pyplot as plt\n","deadc9e4":"image=cv2.imread(\"..\/input\/natural-images\/data\/natural_images\/fruit\/fruit_0020.jpg\")","e8ad5cbf":"img=cv2.imread(\"..\/input\/natural-images\/data\/natural_images\/fruit\/fruit_0089.jpg\")","829493f1":"image","9479b6a3":"plt.imshow(image,cmap=\"gray\"),plt.axis(\"off\")\nplt.show()","4dbdcb27":"image.shape","fbc37534":"image[0,0]","3f236c60":"# Load libraries \nimport cv2 \nimport numpy as np\nfrom matplotlib import pyplot as plt\n# Load image as grayscale \nimage=cv2.imread(\"..\/input\/natural-images\/data\/natural_images\/fruit\/fruit_0020.jpg\",cv2.IMREAD_GRAYSCALE)\n# Save image \ncv2.imwrite(\"..\/input\/output.jpg\", image)\n","afdf48f2":"image=cv2.imread(\"..\/input\/natural-images\/data\/natural_images\/fruit\/fruit_0020.jpg\",cv2.IMREAD_GRAYSCALE)\nimg_50X50=cv2.resize(image,(20,20))\nplt.imshow(img_50X50,cmap=\"gray\"),plt.axis(\"off\")\nplt.show()","e1233edd":"plt.imshow(image,cmap=\"gray\"),plt.axis(\"off\")","cefe51c9":"image_cropped=image[:,:98]\nplt.imshow(image_cropped,cmap=\"gray\"),plt.axis(\"off\")","c7531fcc":"image_blurry=cv2.blur(image,(5,5))\nplt.imshow(image_blurry,cmap=\"gray\"),plt.axis(\"off\")","cc915835":"image_very_blurry=cv2.blur(image,(100,100))\nplt.imshow(image_very_blurry,cmap=\"gray\"),plt.axis(\"off\")","5ae580ba":"kernel=np.ones((5,5))\/25.0\nkernel","198dbe50":"image_kernal=cv2.filter2D(image,-1,kernel)\nplt.imshow(image_kernal,cmap=\"gray\"),plt.xticks([]),plt.yticks([])\n","1a45b59d":"kernel=np.array([[0,-1,0],[-1,5,-1],[0,-1,0]])\nimage_sharp=cv2.filter2D(image,-1,kernel)\nplt.imshow(image_sharp,cmap=\"gray\"),plt.axis(\"off\")\nplt.show()","7e468234":"image_enhanced=cv2.equalizeHist(image)\nplt.imshow(image_enhanced,cmap=\"gray\"),plt.axis(\"off\")\nplt.show()","f3f97208":"image_yuv = cv2.cvtColor(img, cv2.COLOR_BGR2YUV)\nimage_yuv[:, :, 0] = cv2.equalizeHist(image_yuv[:, :, 0])\nimage_rgb = cv2.cvtColor(image_yuv, cv2.COLOR_YUV2RGB)\nplt.imshow(image_rgb), plt.axis(\"off\") \nplt.show()\n","9264c985":"If we have to crop the image howu will do that?","b98e9bf2":"However, when we have a color image, we first need to convert the image to the YUV color format. The Y is the luma, or brightness, and U and V denote the color. After the conversion, we can apply equalizeHist to the image and then convert it back to BGR or RGB:\n","378151c8":"This image shows the information about image","f10f4adf":"Kernels are widely used in image processing to do everything from sharpening to edge detection, and will come up repeatedly in this chapter. The blurring kernel we used looks like this:","ba86eae1":"***CV2???***\nTo work with images, we will use the Open Source Computer Vision Library (OpenCV). While there are a number of good libraries out there, OpenCV is the most popular and documented library for handling images. One of the biggest hurdles to using OpenCV is installing it. \n","cfd02af5":"Importing other libraries","be3af1f7":"> **WRAP UP!!!!**","b0f20b51":"Lets upload the image!!!! HOw???","c53e8120":"This is showing false because of online server.U can try it on ur local server.","55c1839c":"SEE THE DIFFERENCE","bc7975ea":" Enhancing Contrast\n \n We want to increase the contrast between pixels in an image. ","e772d9f5":"Now time to load image","cb704bf6":"When u want to smooth out an image","1bec1579":"Its time to save image","5811f0e7":"Very blurry","4a3308c8":"Want to see image???","739b6ac7":"The resolution of our image is 100 x 100","faebb9a8":"How to sharpen image?","f2e02ac6":"**RESIGING IMAGES**","8940bbc8":"WE will another exercises in next chapter","bf1b2bd5":"WOOOWWWW!!!! WE DONE IT\n\n\n\nIs it so simple?","edd658d9":"Now when u want to see any pixel","c2a4b220":"The center element in the kernel is the pixel being examined, while the remaining elements are its neighbors. Since all elements have the same value (normalized to add up to 1), each has an equal say in the resulting value of the pixel of interest. We can manually apply a kernel to an image using filter2D to produce a similar blurring effect:\n","60b154e3":"To blur an image, each pixel is transformed to be the average value of its neighbors. This neighbor and the operation performed are mathematically represented as a kernel (don\u2019t worry if you don\u2019t know what a kernel is). The size of this kernel determines the amount of blurring, with larger kernels producing smoother images. Here we blur an image by averaging the values of a 5 \u00d7 5 kernel around each pixel:\n"}}