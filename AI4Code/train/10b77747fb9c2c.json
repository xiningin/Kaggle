{"cell_type":{"19d35783":"code","5c9a1a11":"code","2e0d38f0":"code","25e9f383":"code","b3dcefe3":"code","d904b04c":"code","d8beac03":"code","636f1983":"code","6e621de8":"code","5e780235":"code","bf1d039a":"code","9eca1f04":"code","e72cb726":"code","f3e7fa35":"code","c7078856":"code","a1ae3625":"code","baee4f93":"code","fd6c4e3d":"code","4b2bd2b8":"code","557fc1a1":"code","834ae8ea":"code","3791d9e8":"code","db81f58e":"code","30250eca":"code","b8329b35":"code","6f139819":"markdown"},"source":{"19d35783":"import pandas as pd\nimport matplotlib.pyplot as plt\nfrom matplotlib import style\nstyle.use('ggplot')\n%matplotlib inline\n\nimport plotly\nimport plotly.express as px\nimport plotly.graph_objects as go\nplt.rcParams['figure.figsize']=13,7\nimport cufflinks as cf\nimport plotly.offline as pyo\nfrom plotly.offline import init_notebook_mode,plot,iplot\nimport folium \nimport requests\nfrom bs4 import BeautifulSoup","5c9a1a11":"pyo.init_notebook_mode(connected=True)\ncf.go_offline()","2e0d38f0":"column_names= ['Sr.No','Name of State \/ UT','Total_cases','Cured\/Discharged\/migrated','Death']\ndf=pd.DataFrame(columns=column_names)","25e9f383":"page=requests.get('https:\/\/www.mohfw.gov.in\/')\nsoup=BeautifulSoup(page.content,'html.parser')\nTable1 =soup.find(class_ ='table table-striped')\nprint(Table1)","b3dcefe3":"A=[]\nB=[]\nC=[]\nD=[]\nE=[]\n\nfor row in Table1.findAll(\"tr\"):\n    cells = row.findAll('td')\n    if len(cells)==5: #Only extract table body not heading\n        A.append(cells[0].find(text=True))\n        B.append(cells[1].find(text=True))\n        C.append(cells[2].find(text=True))\n        D.append(cells[3].find(text=True))\n        E.append(cells[4].find(text=True))\n        \n        \n#Adding Data to our DataFrame\ndf['Sr.No']=A\ndf['Name of State \/ UT']=B\ndf['Total_cases']=C\ndf['Cured\/Discharged\/migrated']=D\ndf['Death']=E\n\ndf","d904b04c":"df.drop('Sr.No',axis=1,inplace=True)\ndf.iloc[0:33,0]","d8beac03":"df[['Total_cases','Cured\/Discharged\/migrated','Death']]=df[['Total_cases','Cured\/Discharged\/migrated','Death']].astype(int)\ndf['Name of State \/ UT']=df['Name of State \/ UT'].astype(str)","636f1983":"df.dtypes","6e621de8":"df['Total active cases'] = df['Total_cases'] - (df['Cured\/Discharged\/migrated']+df['Death'])","5e780235":"df","bf1d039a":"#total cases overall@India\ntotal_cases_overall= df['Total_cases'].sum()\ntotal__active_cases=df['Total active cases'].sum()\ntotal_cured_cases = df['Cured\/Discharged\/migrated'].sum()\nprint('The Total no of cases in India is',total_cases_overall)\nprint('The Total no of active cases in India is',total__active_cases)\nprint('The Total no of cured cases in India is',total_cured_cases)","9eca1f04":"df.style.background_gradient(cmap='Reds')","e72cb726":"Covid19=df.groupby('Name of State \/ UT')['Total_cases'].sum().sort_values(ascending=False).to_frame()\n","f3e7fa35":"Covid19.style.background_gradient(cmap='Reds')","c7078856":"df.iplot(kind='bar',x='Name of State \/ UT',y='Cured\/Discharged\/migrated',xTitle='States',\n    yTitle='Cured\/Dishcharged\/Migrated',)","a1ae3625":"plt.barh(df['Name of State \/ UT'],df['Total active cases'])","baee4f93":"df.iplot(kind='scatter',x = 'Name of State \/ UT',y='Total_cases',xTitle='Name of State \/ UT',yTitle='Total cases',title='Covid-19 India',mode='markers+lines')","fd6c4e3d":"px.bar(df,x = 'Name of State \/ UT',y='Death')","4b2bd2b8":"Indian_cord=pd.read_excel('..\/input\/covid19-india-coord\/Indian Coordinates copy.xlsx')\nIndian_cord","557fc1a1":"df_full=pd.merge(Indian_cord,df,on='Name of State \/ UT')","834ae8ea":"df_full #.replace(to_replace='Uttarakhand',value='Uttaranchal'","3791d9e8":"map=folium.Map(location=[20,70],zoom_start=4)\n\nfor lat,long,value, name in zip(df_full['Latitude'],df_full['Longitude'],df_full['Total_cases'],df_full['Name of State \/ UT']):\n    folium.Circle([lat,long],radius=value*13,popup=('<strong>State<\/strong>: '+str(name).capitalize()+'<br>''<strong>Total_cases<\/strong>: ' +  str(value)+ '<br>'),color='black',fill_color='red',fill_opacity=0.2).add_to(map)","db81f58e":"map","30250eca":"m=folium.Map(location=[20,70],zoom_start=4)\nstate_data= \"..\/input\/covid19-india-coord\/india_states.geojson\"\nfolium.Choropleth(\n    geo_data=state_data,\n    name='choropleth',\n    data=df_full,\n    columns=['Name of State \/ UT', 'Total_cases'],\n    key_on='feature.properties.NAME_1',\n    fill_color='Reds',\n    fill_opacity=0.7,\n    line_opacity=0.2,\n    legend_name='COVID-19',\n    nan_fill_color='white'\n).add_to(m)\n\nfor lat,long,value, name in zip(df_full['Latitude'],df_full['Longitude'],df_full['Total_cases'],df_full['Name of State \/ UT']):\n    folium.CircleMarker([lat,long],\n                  radius=value*0.0001,  \n                  fill_color='red',\n                  fill_opacity=0.000001,\n                  color='red',\n                  popup=('<strong>State<\/strong>: '+str(name).capitalize()+'<br>''<strong>Total_cases<\/strong>: ' +  str(value)+ '<br>')\n                 ).add_to(m)\n\n\n","b8329b35":"m","6f139819":"data"}}