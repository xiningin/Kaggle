{"cell_type":{"b381aca0":"code","4dcc2265":"code","b1dbd031":"code","4931e01d":"code","2dedb219":"code","65bbf8ab":"code","9850dc61":"code","a4fb4249":"code","7db4fae1":"code","5db03854":"code","906aa9d8":"code","ae63f6af":"code","6079a8f5":"code","bb5bf48a":"code","59852e6f":"code","3c372033":"code","22307cfc":"code","0c78a925":"code","472c1e7d":"code","92db5367":"code","3ead22c2":"code","6233947d":"markdown","a16d97ce":"markdown","871de5d8":"markdown","fbee7ea4":"markdown","ea4494d9":"markdown","71f94706":"markdown","645441c8":"markdown","4ded4819":"markdown","21b31ede":"markdown","4b57741f":"markdown"},"source":{"b381aca0":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nsns.set_style('darkgrid')\n%matplotlib inline\n\nimport warnings\nwarnings.filterwarnings('ignore')","4dcc2265":"df = pd.read_csv('..\/input\/pima-indians-diabetes-database\/diabetes.csv')\ndf.head(5)","b1dbd031":"df.info()","4931e01d":"df.describe().T","2dedb219":"fig = plt.figure(figsize=(10,4))\nax_1 = fig.add_subplot(121)\nax_2 = fig.add_subplot(122)\n\nsns.histplot(df['Pregnancies'],ax = ax_1)\nsns.boxplot(data=df,x='Outcome',y='Pregnancies',ax = ax_2);","65bbf8ab":"fig = plt.figure(figsize=(10,4))\nax_1 = fig.add_subplot(121)\nax_2 = fig.add_subplot(122)\n\nsns.histplot(df['Glucose'],ax = ax_1)\nsns.boxplot(data=df,x='Outcome',y='Glucose',ax = ax_2);","9850dc61":"fig = plt.figure(figsize=(10,4))\nax_1 = fig.add_subplot(121)\nax_2 = fig.add_subplot(122)\n\nsns.histplot(df['BloodPressure'],ax = ax_1)\nsns.boxplot(data=df,x='Outcome',y='BloodPressure',ax = ax_2);","a4fb4249":"fig = plt.figure(figsize=(10,4))\nax_1 = fig.add_subplot(121)\nax_2 = fig.add_subplot(122)\n\nsns.histplot(df['Insulin'],ax = ax_1)\nsns.boxplot(data=df,x='Outcome',y='Insulin',ax = ax_2);","7db4fae1":"fig = plt.figure(figsize=(10,4))\nax_1 = fig.add_subplot(121)\nax_2 = fig.add_subplot(122)\n\nsns.histplot(df['BMI'],ax = ax_1)\nsns.boxplot(data=df,x='Outcome',y='BMI',ax = ax_2);","5db03854":"fig = plt.figure(figsize=(10,4))\nax_1 = fig.add_subplot(121)\nax_2 = fig.add_subplot(122)\n\nsns.histplot(df['DiabetesPedigreeFunction'],ax = ax_1)\nsns.boxplot(data=df,x='Outcome',y='DiabetesPedigreeFunction',ax = ax_2);","906aa9d8":"fig = plt.figure(figsize=(10,4))\nax_1 = fig.add_subplot(121)\nax_2 = fig.add_subplot(122)\n\nsns.histplot(df['Age'],ax = ax_1)\nsns.boxplot(data=df,x='Outcome',y='Age',ax = ax_2);","ae63f6af":"sns.barplot(x=sorted(df.Outcome.unique()),y=df.Outcome.value_counts())\nplt.title(\"Outcomes\",fontsize=16);\n#imbalance target data","6079a8f5":"from sklearn.feature_selection import mutual_info_regression\n\ndef mutual_info_scores(X, y, discrete_features):\n    mi_scores = mutual_info_regression(X, y, discrete_features)\n    mi_scores = pd.Series(mi_scores, name=\"MI Scores\", index=X.columns)\n    mi_scores = mi_scores.sort_values(ascending=False)\n    return mi_scores\n\ndef plot_mi_scores(scores):\n    scores = scores.sort_values(ascending=True)\n    width = np.arange(len(scores))\n    ticks = list(scores.index)\n    plt.barh(width, scores)\n    plt.yticks(width, ticks)\n    plt.title(\"Mutual Information Scores\")","bb5bf48a":"mi_scores = mutual_info_scores(df.drop(columns=['Outcome']), df['Outcome'], discrete_features=False)\nplt.figure(dpi=100, figsize=(10, 5))\nplot_mi_scores(mi_scores)","59852e6f":"from sklearn.model_selection import KFold, GridSearchCV\nfrom sklearn.preprocessing import MinMaxScaler,PowerTransformer\nscaler = MinMaxScaler()\nscaled_data = scaler.fit_transform(df.drop(['Outcome','BloodPressure'],axis=1))\nten_fold = KFold(n_splits=10,shuffle=True,random_state=42)","3c372033":"from sklearn.metrics import classification_report,plot_roc_curve\nfrom imblearn.over_sampling import SMOTE \nsmote = SMOTE(sampling_strategy='minority')\nX_balanced, y_balanced = smote.fit_resample(scaled_data,df['Outcome'])","22307cfc":"pt = PowerTransformer(method='box-cox') \ngaussian_data = pt.fit_transform(df.drop('Outcome',axis=1)+1e-8)\nXg_balanced, yg_balanced = smote.fit_resample(gaussian_data, df['Outcome'])","0c78a925":"from sklearn.neighbors import KNeighborsClassifier\nparam_grid = {'n_neighbors':np.arange(3,9)}\nknn = KNeighborsClassifier()\nknn_cv = GridSearchCV(knn, param_grid, cv=ten_fold)\nknn_cv.fit(X_balanced, y_balanced)\nprint(classification_report(y_balanced,knn_cv.predict(X_balanced)))","472c1e7d":"from sklearn.linear_model import LogisticRegression\nparam_grid = {'C':np.arange(0.1,5,0.1)}\nlr = LogisticRegression()\nlr_cv = GridSearchCV(lr, param_grid, cv=ten_fold)\nlr_cv.fit(Xg_balanced, yg_balanced)\nprint(classification_report(yg_balanced,lr_cv.predict(Xg_balanced)))","92db5367":"from sklearn.svm import SVC\nparam_grid = {'C':np.arange(1,8),\n             'kernel':['poly', 'rbf', 'sigmoid'],\n             'degree':[2,3,4],\n             'gamma':['scale']}\nsvc = SVC()\nsvc_cv = GridSearchCV(svc, param_grid, cv=ten_fold)\nsvc_cv.fit(Xg_balanced, yg_balanced)\nprint(classification_report(yg_balanced,svc_cv.predict(Xg_balanced)))","3ead22c2":"fig = plt.figure(figsize=(14,5))\n\nax_1 = fig.add_subplot(131)\nplot_roc_curve(knn_cv,X_balanced,y_balanced,color='red',ax=ax_1)  \nplt.title(\"KNeighborsClassifier\")\n\nax_2 = fig.add_subplot(132)\nplot_roc_curve(lr_cv,Xg_balanced,yg_balanced,color='blue',ax=ax_2)  \nplt.title(\"LogisticRegression\")\n\nax_3 = fig.add_subplot(133)\nplot_roc_curve(svc_cv,Xg_balanced,yg_balanced,color='green',ax=ax_3)\nplt.title(\"Support Vector Classifier\");  ","6233947d":"**Note:**\n* **imbalance target data.**","a16d97ce":"### **KNeighbors**","871de5d8":"## **Deal with Imbalance Data**","fbee7ea4":"### Outcome","ea4494d9":"### **Support Vector machine**","71f94706":"## **Exploratory Data Analysis** ","645441c8":"### **ROC Curve**","4ded4819":"### **Logistic Regression**","21b31ede":"### **Mutual information**","4b57741f":"# Modeling"}}