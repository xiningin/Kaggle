{"cell_type":{"9c8879a2":"code","2c8884bd":"code","c5864c50":"code","d6d7b47d":"code","5c605a9e":"code","055c888b":"code","8a06751d":"code","f2949175":"code","30d0c408":"code","ee9e2150":"code","6a4ee302":"code","c8bd8be0":"code","28ba40a3":"code","3f9fda07":"code","6737acd5":"code","5c8bbcd3":"code","82c4de91":"code","b534e84e":"code","c0867c94":"code","111938e3":"code","d238eaf7":"code","c8ffbf0b":"code","3c82a323":"code","5c221bcd":"code","54a2e904":"code","77d90ed4":"code","538a8a7a":"code","8aeeb7bb":"code","f3dc0832":"code","f211c0a5":"code","078693e0":"code","99861aa0":"code","1bb7a1e1":"code","f7edb1a7":"code","92de69ec":"code","46f6a6c6":"code","0e104519":"code","bf5228e4":"code","60515ec4":"code","04f7c5a5":"code","83894976":"code","68890da5":"code","e9c38c30":"code","4d533ab4":"code","3067a1a1":"code","0da06935":"code","d1a8aaac":"code","f564c954":"code","fcad9b6e":"code","ea3b92fe":"markdown"},"source":{"9c8879a2":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","2c8884bd":"## importing datasets\nusers=pd.read_csv('\/kaggle\/input\/bookcrossing-dataset\/Book reviews\/BX-Users.csv',sep=\";\",error_bad_lines=False, encoding='latin-1')\nbooks = pd.read_csv('\/kaggle\/input\/bookcrossing-dataset\/Book reviews\/BX-Books.csv',sep=\";\",error_bad_lines=False, encoding='latin-1')\nrating=pd.read_csv('\/kaggle\/input\/bookcrossing-dataset\/Book reviews\/BX-Book-Ratings.csv',sep=\";\",error_bad_lines=False, encoding='latin-1')","c5864c50":"books.head()","d6d7b47d":"books.columns","5c605a9e":"books=books[['ISBN', 'Book-Title', 'Book-Author', 'Year-Of-Publication', 'Publisher']] #feature engineering : selecting features","055c888b":"books.head(2)","8a06751d":"books.rename(columns={'Book-Title':'title','Book-Author':'author','Year-Of-Publication':'year','Publisher':'publisher'},inplace=True) #feature engineering : changing the column names","f2949175":"books.head(2)","30d0c408":"users.head(2)","ee9e2150":"users.rename(columns={'User-ID':'user_id','Location':'location','Age':'age'},inplace=True) #feature engineering : changing the column names","6a4ee302":"rating.head(2)","c8bd8be0":"rating.rename(columns={'User-ID':'user_id','Book-Rating':'rating'},inplace=True) #feature engineering : changing the column names","28ba40a3":"rating.head(2)","3f9fda07":"books.shape","6737acd5":"users.shape","5c8bbcd3":"rating.shape","82c4de91":"## unique users\nrating['user_id'].value_counts().shape","b534e84e":"## considering those users who have viewed more than 200 books\nx=rating['user_id'].value_counts()>200\n","c0867c94":"x[x].shape","111938e3":"y=x[x].index","d238eaf7":"rating=rating[rating['user_id'].isin(y)]","c8ffbf0b":"rating.shape","3c82a323":"rating_with_books=rating.merge(books,on='ISBN') ##those users who have viewed more than 200 books with there rating on books","5c221bcd":"rating_with_books.shape","54a2e904":"number_rating=rating_with_books.groupby('title')['rating'].count().reset_index() ## total rating of a book ","77d90ed4":"number_rating.rename(columns={'rating':'number of rating'},inplace=True) #feature engineering : changing the column names","538a8a7a":"number_rating.head()","8aeeb7bb":"final_ratings=rating_with_books.merge(number_rating,on='title') ","f3dc0832":"final_ratings.head()","f211c0a5":"final_ratings.shape","078693e0":"final_ratings=final_ratings[final_ratings['number of rating']>=50] ## considering those books which has got more than 50 ratings ","99861aa0":"final_ratings.shape","1bb7a1e1":"final_ratings.drop_duplicates(['user_id','title'],inplace=True) ## droping the same record ","f7edb1a7":"final_ratings.shape","92de69ec":"book_pivot=final_ratings.pivot_table(columns='user_id',index='title',values='rating') ## pivot table","46f6a6c6":"book_pivot.shape","0e104519":"book_pivot.fillna(0,inplace=True)","bf5228e4":"book_pivot","60515ec4":"from scipy.sparse import csr_matrix\nbook_sparse=csr_matrix(book_pivot)","04f7c5a5":"type(book_sparse)","83894976":"from sklearn.neighbors import NearestNeighbors\nmodel=NearestNeighbors(algorithm='brute') ## model","68890da5":"model.fit(book_sparse)","e9c38c30":"book_pivot.iloc[237,:].values.reshape(1,-1)","4d533ab4":"distances,suggestions=model.kneighbors(book_pivot.iloc[54,:].values.reshape(1,-1))","3067a1a1":"distances","0da06935":"suggestions ## recommendation","d1a8aaac":"for i in range(len(suggestions)):\n    print(book_pivot.index[suggestions[i]])","f564c954":"def reco(book_name):\n    book_id=np.where(book_pivot.index==book_name)[0][0]\n    distances,suggestions=model.kneighbors(book_pivot.iloc[book_id,:].values.reshape(1,-1))\n    \n    \n    \n    for i in range(len(suggestions)):\n        if i==0:\n            print(\"the suggestions are \",book_name,\"are : \")\n        if not i:\n            print(book_pivot.index[suggestions[i]])","fcad9b6e":"reco('Animal Farm')","ea3b92fe":"### A recommender system, or a recommendation system, is a subclass of information filtering system that seeks to predict the \"rating\" or \"preference\" a user would give to an item. They are primarily used in commercial applications. (source - Wikipedia)\n\n## Mainly three types of recommendation systems in machine learning based on filtering are used to suggest product and services to the consumers.\n\n1. Content Filtering\n\n2. Collaborative Filtering\n\n3. Hybrid Filtering\n\n### 1. Content Filtering:\n\nIn this algorithm, we try finding items look alike. Once we have item look like matrix,we can easily recommend alike items to a customer, who has purchased any item from the store.\n\n### 2. Collaborative Filtering:\n\nHere, we try to search for look alike customers and offer products based on what his\/her lookalike has chosen.This algorithm is very effective but takes a lot of time and resources.\n\n### 3. Hybrid Filtering (Content Filtering + Collaborative Filtering):\n\nBoth Content Filtering & Collaborative Filtering is used for the purpose. you-tube uses this algorithm for their strong recommendation system.\n\n\n  ![image.png](attachment:image.png)"}}