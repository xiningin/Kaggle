{"cell_type":{"fa9783f9":"code","ec9842be":"code","af5c5ed9":"code","0d880db5":"code","de88e7aa":"code","81f09e68":"code","c94f4b7b":"code","0d422031":"code","e8b04ad1":"code","88fac833":"code","353e7e7c":"code","68ece5ee":"markdown","c0746aec":"markdown","a772636e":"markdown"},"source":{"fa9783f9":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory\n\nimport os\nprint(os.listdir(\"..\/input\"))\n\n# Any results you write to the current directory are saved as output.","ec9842be":"train = pd.read_csv(\"..\/input\/train.csv\")","af5c5ed9":"def combine_data(x):\n    return \" \".join(map(str, x))","0d880db5":"cols_combined = train.iloc[:,2:].apply(lambda x : combine_data(x), axis = 0)\ndata = pd.DataFrame({'cols' : train.columns[2:],'combined' : cols_combined})","de88e7aa":"from sklearn.feature_extraction.text import CountVectorizer\nmodel = CountVectorizer( binary = True)\ncount_model = model.fit_transform(data.combined)","81f09e68":"sim = np.dot(count_model,count_model.T)\nsim.todense().shape","c94f4b7b":"diagonalval = sim.diagonal()\ncolumn_sim = pd.DataFrame(sim \/ diagonalval, index = train.columns[2:], columns = train.columns[2:])\ncolumn_sim.sort_values(by = 'f190486d6', ascending = False).index[:40] ","0d422031":"train['combined'] = train.iloc[:,2:].apply(lambda x : combine_data(x), axis = 1)\ndata = train[['ID','target','combined']]\ndata.head()","e8b04ad1":"model_2 = CountVectorizer(binary = True)\ncount_model_2 = model_2.fit_transform(data.combined)","88fac833":"sim = np.dot(count_model_2,count_model_2.T)\nsim.todense().shape","353e7e7c":"diagonalval = sim.diagonal()\nrow_sim = pd.DataFrame(sim \/ diagonalval)\nrow_sim.iloc[:,2071].sort_values(ascending=False)","68ece5ee":"An easy way to find similar columns and similar rows in the data","c0746aec":"Find Similar Columns in data","a772636e":"Find Similar rows in data"}}