{"cell_type":{"41562f55":"code","3b0d5e9d":"code","ebc0e2d4":"code","a56c1674":"code","fef36848":"code","c673a1a6":"code","f8c8f9bd":"code","7bb73464":"code","b3fc4202":"markdown","4550ce28":"markdown","25fee55d":"markdown","9cf0c95a":"markdown","002540a1":"markdown","1a95935a":"markdown","ef9fe094":"markdown"},"source":{"41562f55":"# \u652f\u6301\u5411\u91cf\u548c\u77e9\u9635\u8fd0\u7b97\u7684\u5e93\nimport numpy as np\n\n# \u56fe\u7247\u8f93\u5165\u8f93\u51fa\nfrom skimage import io\n\n# \u56fe\u7247\u683c\u5f0f\u8f6c\u6362\nfrom skimage.color import rgb2lab, lab2rgb\n\n# KNN\u6a21\u578b\nfrom sklearn.neighbors import KNeighborsRegressor\n\n# \u7cfb\u7edf\u547d\u4ee4\nimport os\n\n# \u7ed8\u56fe\nimport matplotlib.pyplot as plt\n\n# \u6587\u4ef6\u5939\u524d\u7f00\ndir_prefix = \"..\/input\/knn-styletransfer\/\"","3b0d5e9d":"data_dir = dir_prefix + \"vangogh-style\/\"\n# os.listdir(data_dir)\nfor file in os.listdir(data_dir):\n    print(file)\n    img = io.imread(os.path.join(data_dir, file))\n    plt.imshow(img)\n    plt.show()","ebc0e2d4":"# block_size\u5373\u4ece\u50cf\u7d20\u70b9\u5411\u5916\u6269\u5c55\u51e0\u5c42\u50cf\u7d20\uff0c\u6269\u5c551\u5c42\u53733*3\nblock_size = 1\n\n# \u8bfb\u5165\u98ce\u683c\u56fe\u50cf, \u5f97\u5230\u6620\u5c04 X -> Y\n# X: \u50a8\u5b583*3\u50cf\u7d20\u683c\u7684\u7070\u5ea6\u503c\n# Y: \u50a8\u5b58\u4e2d\u5fc3\u50cf\u7d20\u683c\u7684\u8272\u5f69\u503c\ndef read_style_image(file_name, size=block_size):\n    # --------------------------------------------------------------------------\n    # io.imread:\n    # \u8f93\u5165\u4e00\u4e2a\u56fe\u7247\u6587\u4ef6\uff0c\u4ece\u4e2d\u8bfb\u53d6\u56fe\u7247\u5e76\u4fdd\u5b58\u6210rgb\u683c\u5f0f\uff0c\u53733\u4e2aM*N\u7684\u77e9\u9635\uff0c\u8f93\u51fa\u8fd9\u4e2a\u5f20\u91cf\uff08M*N*3\u7684\u5217\u8868\uff09\n    # https:\/\/scikit-image.org\/docs\/dev\/api\/skimage.io.html#skimage.io.imread\n    # --------------------------------------------------------------------------\n    img = io.imread(file_name)\n    # print(img)\n    # print(img.shape)\n    plt.imshow(img)\n    plt.show()\n    \n    # --------------------------------------------------------------------------\n    # rgb2lab:\n    # \u8f93\u5165\u4e00\u5f20rgb\u683c\u5f0f\u7684\u56fe\u7247\u5bf9\u5e94\u7684\u5f20\u91cf\uff08M*N*3\u7684\u5217\u8868\uff09\uff0c\u5c06\u5176\u8f6c\u6210lab\u683c\u5f0f\uff0c\u8f93\u51fa\u8f6c\u6362\u540e\u7684\u5f20\u91cf\uff08M*N*3\u7684\u5217\u8868\uff09\n    # https:\/\/scikit-image.org\/docs\/dev\/api\/skimage.color.html?highlight=rgb2lab#skimage.color.rgb2lab\n    # --------------------------------------------------------------------------\n    img = rgb2lab(img)\n    # plt.imshow(img)\n    # plt.show()\n    \n    # \u53d6\u51fa\u56fe\u7247\u7684\u5bbd\u5ea6\u548c\u9ad8\u5ea6\uff0cimg.shape\u53ef\u4ee5\u5f97\u5230\u56fe\u7247\u7684\u7ef4\u5ea6\u5217\u8868\uff0c\u53d6\u5217\u8868\u524d\u4e24\u4f4d\uff0c\u5373M\u548cN\n    w, h = img.shape[:2]\n    # print(img.shape[:])\n    \n    # \u521d\u59cb\u5316\u51fd\u6570\u7684\u8f93\u51fa\uff0c\u5373\u4e24\u4e2a\u5217\u8868X\u548cY\uff0c\u8868\u793a3*3\u7070\u5ea6\u77e9\u9635\uff08X\uff09\u5230\u4e2d\u5fc3\u70b9\u8272\u5f69\u503c\uff08Y\uff09\u7684\u6620\u5c04\n    X = []\n    Y = []\n    \n    # \u7528for\u5faa\u73af\u679a\u4e3e\u56fe\u50cf\u4e2d\u7684\u5168\u90e8\u53ef\u80fd\u7684\u4e2d\u5fc3\u70b9\uff0c\u56e0\u4e3a\u9700\u8981\u4ece\u4e2d\u5fc3\u70b9\u5411\u5916\u6269\u5c551\u5c42\uff0c\u6240\u4ee5\u679a\u4e3e\u8303\u56f4\u4ece(0, w)\u53d8\u6210(1, w - 1)\n    for x in range(size, w - size):\n        for y in range(size, h - size):\n            # ------------------------------------------------------------------\n            # \u679a\u4e3e\u597d\u4e2d\u5fc3\u70b9\u4f4d\u7f6e\uff0c\u5373\u5750\u6807(x, y)\u540e\uff0c\u5206\u522b\u6c42\u8be5\u4e2d\u5fc3\u70b9\u5bf9\u5e94\u76843*3\u7070\u5ea6\u77e9\u9635\uff08X\uff09\u548c\u4e2d\u5fc3\u70b9\u8272\u5f69\u503c\uff08Y\uff09\n            #\n            # \u4ece\u4e2d\u5fc3\u70b9\u5411\u5916\u6269\u4e00\u5708\uff0c\u5f97\u5230\u4e00\u4e2a3*3\u77e9\u9635\uff0c\u7528[x - size : x + size + 1, y - size : y + size + 1]\u53d6\u5230\u8fd9\u4e2a\u77e9\u9635\n            # \u5e76\u5728\u7b2c\u4e09\u4e2a\u7ef4\u5ea6\u4e0a\u53d6\u503c\u4e3a0\uff0c\u5373l\u901a\u9053\u5bf9\u5e94\u7684\u7070\u5ea6\u503c\n            #\n            # array.reshape():\n            # \u5c06\u76ee\u6807array\u8c03\u6574\u6210\u6240\u9700\u7684\u7ef4\u5ea6\u5f62\u72b6\uff0c-1\u8868\u793a\u67d0\u4e00\u4f4d\u7f3a\u7701\uff0c\u53ef\u7531\u5176\u4ed6\u7ef4\u5ea6\u63a8\u7406\u5f97\u5230\n            # https:\/\/docs.scipy.org\/doc\/numpy\/reference\/generated\/numpy.reshape.html\n            # ------------------------------------------------------------------\n            X.append(img[x - size : x + size + 1, y - size : y + size + 1, 0].reshape(-1))\n            \n            # \u53d6\u51fa\u4e2d\u5fc3\u70b9\u5bf9\u5e94\u7684\u8272\u5f69\u503c\uff0c\u5373\u5728\u7b2c\u4e09\u4e2a\u7ef4\u5ea6\u4e0a\u53bb\u503c\u4e3a1\u548c2\uff0c\u5373ab\u901a\u9053\u5bf9\u5e94\u7684\u8272\u5f69\u503c\n            Y.append(img[x, y, 1:])\n    print(\"finish reading \" + file_name)\n    return X, Y","a56c1674":"# \u98ce\u683c\u56fe\u50cf\u8def\u5f84\nstyle_data = dir_prefix + \"kNNstyle.jpg\"\n\n# \u8bfb\u53d6\u98ce\u683c\u56fe\u50cf\uff0c\u6784\u5efaKNN\u6620\u5c04\u6570\u636e\u96c6\nX, Y = read_style_image(style_data)","fef36848":"\n# \u98ce\u683c\u56fe\u50cf\u6587\u4ef6\u5939\u8def\u5f84\nstyle_data_dir = dir_prefix + \"vangogh-style\/\"\n# \u8bfb\u53d6\u98ce\u683c\u56fe\u50cf\u6587\u4ef6\u5939\u4e2d\u7684number\u5f20\u56fe\u50cf\uff0c\u8fd9\u91ccnumber=1\n# \u8f93\u51fa\u7531\u98ce\u683c\u56fe\u50cf\u6784\u5efa\u7684\u6620\u5c04\u6570\u636e\u96c6\ndef create_dataset(data_dir=style_data_dir, number=5):\n    # \u521d\u59cb\u5316\u51fd\u6570\u8f93\u51fa\n    X = []\n    Y = []\n    n = 0\n    # print(os.listdir(data_dir))\n    for file in os.listdir(data_dir):\n        print(\"reading\", file)\n        X0, Y0 = read_style_image(os.path.join(data_dir, file))\n        X.extend(X0)\n        Y.extend(Y0)\n        n += 1\n        if n >= number:\n            break\n    return X, Y\n\n\n# \u8c03\u7528\u6784\u5efa\u6620\u5c04\u6570\u636e\u96c6\u7684\u51fd\u6570\nprint(\"reading data\")\nX, Y = create_dataset(number=10)\nprint(\"finish reading\")","c673a1a6":"# \u521d\u59cb\u5316kNN\u6a21\u578b\uff0c\u5c06\u90bb\u5c45\u6570\u8bbe\u4e3a4\n# https:\/\/scikit-learn.org\/stable\/modules\/generated\/sklearn.neighbors.KNeighborsRegressor.html\nnbrs = KNeighborsRegressor(n_neighbors=4, weights='distance')\n\nprint(\"start fitting\")\n\n# \u7528X\u548cY\u6784\u5efakNN\u6a21\u578b\nnbrs.fit(X, Y)\nprint(\"finish fitting\")","f8c8f9bd":"# \u6574\u6bb5\u586b\u7a7a\ndef split_origin_image(img, size=block_size):\n    w, h = img.shape[:2]\n    X = []\n    for x in range(size, w - size):\n        for y in range(size, h - size):\n            X.append(img[x - size : x + size + 1, y - size : y + size + 1, 0].reshape(-1))\n    return X","7bb73464":"# \u8f93\u5165\u5185\u5bb9\u56fe\u50cf\uff0c\u6839\u636e\u5df2\u7ecf\u5efa\u7acb\u597d\u7684kNN\u6a21\u578b\uff0c\u8f93\u51fa\u8272\u5f69\u98ce\u683c\u8fc1\u79fb\u540e\u7684\u56fe\u50cf\u3002\ndef rebuild(file_name, size=block_size):\n    img = io.imread(file_name)\n    # \u6253\u5370\u5185\u5bb9\u56fe\u50cf\n    plt.imshow(img)\n    plt.show()\n    print(img.shape)\n    \n    img = rgb2lab(img)\n    w, h = img.shape[:2]\n    \n    # \u521d\u59cb\u5316\u8f93\u51fa\u56fe\u50cf\u5bf9\u5e94\u7684\u5f20\u91cf\n    photo = np.zeros([w, h, 3])\n    \n    # \u53d6\u51fa\u5185\u5bb9\u56fe\u50cf\u7684\u5168\u90e83*3\u7070\u5ea6\u77e9\u9635\n    X = split_origin_image(img)\n    \n    print(\"start predicting\")\n    # \u8c03\u7528kNN\u6a21\u578b\u7684predict\u65b9\u6cd5\uff0c\u5bf9\u4e8e\u8f93\u5165\u7684\u4e00\u7cfb\u52173*3\u7070\u5ea6\u77e9\u9635X\uff0c\u6c42\u5f97\u5176\u5404\u81ea\u5bf9\u5e94\u7684\u8272\u5f69\u7684\u56de\u5f52\u503c\n    # \u8c03\u7528reshape\u65b9\u6cd5\u5c06\u8f93\u51fa\u7684\u8272\u5f69\u503c\u8c03\u6574\u5230\u56fe\u7247\u5bf9\u5e94\u7684\u7ef4\u5ea6\n    p_ab = nbrs.predict(X)\n    print(p_ab.shape)\n    p_ab = p_ab.reshape(w - 2 * size, h - 2 * size, -1)\n    print(\"finish predicting\")\n    \n    # \u679a\u4e3e\u8f93\u51fa\u56fe\u50cf\u7684\u6bcf\u4e2a\u50cf\u7d20\uff0c\u6700\u5916\u5708\u65e0\u6cd5\u4f5c\u4e3a\u4e2d\u5fc3\u70b9\uff0c\u56e0\u6b64\u4e0d\u8d4b\u503c\uff08\u9ed1\u6846\uff1f\uff09\n    for x in range(size, w - size):\n        for y in range(size, h - size):\n            # \u5206\u522b\u5bf9\u8f93\u51fa\u56fe\u50cf\u76843\u4e2a\u901a\u9053\u8d4b\u503c\n            photo[x, y, 0] = img[x, y, 0]\n            \n            # \u540e\u4e24\u4e2a\u901a\u9053\u7684\u503cp_ab\u662f\u4ece0\u5f00\u59cb\u7684\uff0c\u6240\u4ee5\u5750\u6807\u9700\u8981\u5411\u5de6\u4e0a\u504f\u79fb1\u4e2a\u50cf\u7d20\n            photo[x, y, 1] = p_ab[x - size, y - size, 0]\n            photo[x, y, 2] = p_ab[x - size, y - size, 1]\n    \n    photo = photo[size : w - size, size : h - size, :]\n    return photo\n\n# \u5185\u5bb9\u56fe\u50cf\u8def\u5f84\ninput_path = dir_prefix + \"input.jpg\"\n\n# \u751f\u6210\u56fe\u50cf\nnew_photo = rebuild(input_path)\n\n# \u8f93\u51fa\u56fe\u50cf\u8def\u5f84\noutput_path = \"output.jpg\"\n\n# \u4fdd\u5b58\u8f93\u51fa\u56fe\u50cf\nio.imsave(output_path, lab2rgb(new_photo))\n\n# \u6253\u5370\u8f93\u51fa\u56fe\u50cf\nplt.imshow(lab2rgb(new_photo))\nplt.show()\nprint(new_photo.shape)","b3fc4202":"# \u8fd0\u7528kNN\u8fdb\u884c\u8272\u5f69\u98ce\u683c\u8fc1\u79fb\n\n\u6548\u679c\uff1a\n![result](https:\/\/i.loli.net\/2019\/10\/19\/dkEmNW18HfTlDrn.png)\n\n## \u5982\u4f55\u8868\u793a\u8272\u5f69\uff1f\n\n### RGB\n![rgb](https:\/\/i.loli.net\/2019\/10\/19\/AK6DzCYZ9bcJ4iE.png)\n\n![](https:\/\/i.loli.net\/2019\/10\/19\/1LOK9N7yWDksGZb.png)\n\n### Lab\n![](https:\/\/i.loli.net\/2019\/10\/19\/UmNlP8IwYehzfRc.png)\n\n\u8fd9\u6837\u5c31\u53ef\u4ee5\u628a\u4eae\u5ea6\u4fe1\u606f\u548c\u8272\u5f69\u4fe1\u606f\u533a\u5206\u5f00\n\n## \u4ece\u9ed1\u767d\u5230\u5f69\u8272\u7684\u6620\u5c04\n![](https:\/\/i.loli.net\/2019\/10\/19\/gLQ5GNkFUwsMCAu.png)\n\n\n## kNN\u7b97\u6cd5\n\n![](https:\/\/i.loli.net\/2019\/10\/19\/wbn74ayeKdOCxm1.png)\n\n![](https:\/\/i.loli.net\/2019\/10\/19\/7edtTIr5lwvSBy3.png)","4550ce28":"\u6839\u636ekNN\u7b97\u6cd5\u5f97\u5230\u8272\u5f69\u98ce\u683c\u8fc1\u79fb\u540e\u7684\u56fe\u50cf\u3002","25fee55d":"\u8bfb\u5165\u56fe\u50cf\uff0c\u8fd4\u56de\u56fe\u50cf\u4e2d\u6240\u6709$3 \\times 3$\u7070\u5ea6\u77e9\u9635\u5230\u4e2d\u5fc3\u70b9\u8272\u5f69\u503c\u7684\u6620\u5c04\u5173\u7cfb\u3002","9cf0c95a":"\u8bfb\u53d6\u82e5\u98ce\u683c\u56fe\u50cf\u6784\u5efa\u6570\u636e\u96c6\u3002","002540a1":"\n\n\u63a5\u4e0b\u6765\u6211\u4eec\u6765\u770b\u770b\u5177\u4f53\u7684\u4ee3\u7801\u5b9e\u73b0\u3002\u9996\u5148\uff0c\u5bfc\u5165\u6240\u9700\u7684\u5e93\u548c\u51fd\u6570\u3002\n\n*   numpy\uff0c\u2f64\u4e8e\u5904\u7406\u5404\u79cd\u6570\u503c\u8ba1\u7b97\n*   skimage\uff0c\u2f64\u4e8e\u8bfb\u2f0a\u3001\u4fdd\u5b58\u56fe\u2f5a\u4ee5\u53caRGB\u6a21\u5f0f\u548cLab\u6a21\u5f0f\u7684\u76f8\u4e92\u8f6c\u5316\n*   sklearn\uff0c\u63d0\u4f9bK\u8fd1\u90bb\u7b97\u6cd5\u7684\u63a5\u2f1d\n\n","1a95935a":"\u5904\u7406\u5185\u5bb9\u56fe\u7247\u5f97\u5230\u82e5\u5e72$3 \\times 3$\u7684\u7070\u5ea6\u77e9\u9635\u3002","ef9fe094":"\u5efa\u7acbkNN\u6a21\u578b\uff0c\u8bbe\u7f6ek=4\uff0c\u5373\u9884\u6d4b\u7684\u8272\u5f69\u503c\u662f\u4e0e\u5176\u6700\u8fd1\u76844\u4e2a\u70b9\u7684\u8272\u5f69\u503c\u7684\u52a0\u6743\u5e73\u5747\uff0c\u5176\u6743\u91cd\u4e0e\u8ddd\u79bb\u7684\u5012\u6570\u6210\u6b63\u6bd4\u3002"}}