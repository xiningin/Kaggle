{"cell_type":{"921186e9":"code","176c7547":"code","c055ab97":"code","0b52e3aa":"code","d4d2fb54":"code","8e3ca875":"code","4d0e39af":"code","aaac90b8":"code","d47e045d":"code","d2774ae9":"code","14396663":"code","c7264320":"code","51fe1482":"code","93f30946":"code","338fd3ce":"code","de750740":"code","4c5b3b72":"code","67d24fa1":"code","4b79287b":"code","3638b36a":"code","b737d903":"code","312910f6":"code","74635277":"code","e4ec9469":"code","46bea7fc":"code","b43f9f27":"code","e8781948":"code","f3e55234":"code","14be0f34":"code","6cf98c98":"code","593efc59":"code","bbb7cb3e":"code","a456de56":"code","2fa833db":"code","03799515":"code","cc45ba09":"code","add517de":"code","de208bee":"code","80b87fdb":"code","cf0f22aa":"code","9cc78c72":"code","a47ef3b1":"code","cac74acf":"code","3b4682b9":"code","834ff895":"code","f2df597a":"code","dd81505e":"code","c1fb741a":"code","522e0286":"code","e5a8763b":"code","37d71026":"code","a574f080":"code","0669e747":"code","60f83f0c":"code","792eb5b5":"code","7e35cd6c":"code","1a050b46":"code","7ab613d3":"code","b44fa2e2":"code","9bff16fd":"code","1d307980":"code","34189fc2":"code","a2f1f4cd":"code","b9ae0ad8":"code","19923ac0":"code","ea8a1ca7":"code","de3a786f":"code","ce188254":"code","de162ee9":"code","a9bdfd85":"code","cbcd0ddb":"code","537a6615":"code","456dfbf7":"code","871ae0ab":"code","4fbd662e":"code","46477acd":"code","a8e2a531":"code","6eb76c70":"code","c4f7a85c":"code","f0fef754":"code","8d16ebc9":"markdown","7d470a08":"markdown","58929328":"markdown","30845a07":"markdown","b9d9b525":"markdown","219d3432":"markdown","c0b500c7":"markdown","cdbb0285":"markdown","6d5b41a8":"markdown","903fbf86":"markdown","bbead95c":"markdown","40bc7354":"markdown","a694755e":"markdown","341aa30e":"markdown","a902060e":"markdown","67cd5895":"markdown","f9aade5a":"markdown","2fe62005":"markdown","828498e8":"markdown","08474762":"markdown","ffc768d4":"markdown"},"source":{"921186e9":"import gc\nimport optuna\nimport numpy as np\nimport pandas as pd\nimport seaborn as sns\nimport lightgbm as lgb\nimport xgboost as xgb\nimport matplotlib.pyplot as plt\n\nfrom sklearn.preprocessing import LabelEncoder\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.metrics import log_loss, accuracy_score\nfrom sklearn.model_selection import KFold\nfrom sklearn.model_selection import GridSearchCV\nfrom sklearn.metrics import roc_auc_score","176c7547":"train = pd.read_csv('..\/input\/home-credit-default-risk\/application_train.csv')\n\nprint(train.shape)\nprint(train.isnull().sum().sum())\ntrain.head()","c055ab97":"train.info(verbose=True)","0b52e3aa":"test = pd.read_csv('..\/input\/home-credit-default-risk\/application_test.csv')\n\nprint(test.shape)\ntest.head()","d4d2fb54":"bureau = pd.read_csv('..\/input\/home-credit-default-risk\/bureau.csv')\n\nprint(bureau.shape)\nbureau.head()","8e3ca875":"bureau.info(verbose=True)","4d0e39af":"ccb = pd.read_csv('..\/input\/home-credit-default-risk\/credit_card_balance.csv')\nprint(ccb.shape)\nccb.head()","aaac90b8":"ccb.info(verbose=True)","d47e045d":"balance = pd.read_csv('..\/input\/home-credit-default-risk\/POS_CASH_balance.csv')\n\nprint(balance.shape)\nbalance.head()","d2774ae9":"balance.info(verbose=True)","14396663":"previous = pd.read_csv('..\/input\/home-credit-default-risk\/previous_application.csv')\n\nprint(previous.shape)\nprevious.head()","c7264320":"previous.info()","51fe1482":"sns.set()","93f30946":"# \u76ee\u7684\u5909\u6570\uff080:\u8fd4\u6e08\u30ea\u30b9\u30af\u306a\u3057\u30011\uff1a\u8fd4\u6e08\u56f0\u96e3\uff09\nfigure ,ax = plt.subplots(1, 2, figsize=(12,5))\n\ntrain['TARGET'].value_counts().plot.pie(explode=[0,0.1],autopct='%1.1f%%', ax=ax[0], shadow=True)\nax[0].set_title('TARGET')\nax[0].set_ylabel('')\n\nsns.countplot(x='TARGET', data=train, ax=ax[1])\nax[1].set_title('TARGET')\n\nplt.show()","338fd3ce":"# \u30ed\u30fc\u30f3\u306e\u30bf\u30a4\u30d7\nsns.countplot(x='NAME_CONTRACT_TYPE', data=train, hue='TARGET')","de750740":"# \u6027\u5225\nsns.countplot(x='CODE_GENDER', data=train, hue='TARGET')","4c5b3b72":"# \u8eca\u6240\u6709\u306e\u6709\u7121\nsns.countplot(x='FLAG_OWN_CAR', data=train, hue='TARGET')","67d24fa1":"# \u5b50\u4f9b\u306e\u4eba\u6570\nsns.countplot(x='CNT_CHILDREN', data=train, hue='TARGET')","4b79287b":"# 1\u5e74\u9593\u306e\u53ce\u5165\u5408\u8a08\nfig = sns.FacetGrid(train, hue='TARGET', height=4, aspect=1.5)\nfig.map(sns.kdeplot, 'AMT_INCOME_TOTAL', shade=True)","3638b36a":"# \u5bb6\u6240\u6709\u306e\u6709\u7121\nsns.countplot(x='FLAG_OWN_REALTY', data=train, hue='TARGET')","b737d903":"# \u30ed\u30fc\u30f3\u7dcf\u984d\nfig = sns.FacetGrid(train, hue='TARGET', height=4, aspect=2)\nfig.map(sns.kdeplot, 'AMT_CREDIT', shade=True)\nplt.legend()","312910f6":"grid = sns.FacetGrid(train, col='TARGET', height=4, aspect=1)\ngrid.map(plt.hist, 'AMT_CREDIT', bins=20)","74635277":"# 1\u5e74\u9593\u3067\u8fd4\u6e08\u3057\u3066\u3044\u308b\u30ed\u30fc\u30f3\u984d\nfig = sns.FacetGrid(train, hue='TARGET', height=4, aspect=2)\nfig.map(sns.kdeplot, 'AMT_ANNUITY', shade=True)","e4ec9469":"grid = sns.FacetGrid(train, col='TARGET', height=4, aspect=1)\ngrid.map(plt.hist, 'AMT_ANNUITY', bins=20)","46bea7fc":"# \u30ed\u30fc\u30f3\u3067\u8cfc\u5165\u3059\u308b\u7269\u306e\u4fa1\u683c\ngrid = sns.FacetGrid(train, col='TARGET', height=4, aspect=1)\ngrid.map(plt.hist, 'AMT_GOODS_PRICE', bins=20)","b43f9f27":"# \u73fe\u5728\u306e\u8eca\u3092\u8cfc\u5165\u3057\u3066\u304b\u3089\u7d4c\u904e\u3057\u305f\u5e74\nfig = sns.FacetGrid(train, hue='TARGET', height=4, aspect=2)\nfig.map(sns.kdeplot, 'OWN_CAR_AGE', shade=True)","e8781948":"grid = sns.FacetGrid(train, col='TARGET', height=4, aspect=1)\ngrid.map(plt.hist, 'OWN_CAR_AGE', bins=20)","f3e55234":"# \u5e74\u9f62\ntrain['AGE'] = train['DAYS_BIRTH'] \/ 365 * (-1)\ntest['AGE'] = test['DAYS_BIRTH'] \/ 365 * (-1)\n\ntrain = train.drop('DAYS_BIRTH', axis=1)\ntest = test.drop('DAYS_BIRTH', axis=1)\n\nfig = sns.FacetGrid(train, hue='TARGET', height=4, aspect=2)\nfig.map(sns.kdeplot, 'AGE', shade=True)","14be0f34":"grid = sns.FacetGrid(train, col='TARGET', height=4, aspect=1)\ngrid.map(plt.hist, 'AGE', bins=20)","6cf98c98":"# \u30ed\u30fc\u30f3\u7533\u3057\u8fbc\u307f\u6642\u306e\u540c\u4f34\u8005\nplt.figure(figsize=(10, 5))\nsns.countplot(x='NAME_TYPE_SUITE', data=train, hue='TARGET')","593efc59":"# \u53ce\u5165\u306e\u30bf\u30a4\u30d7\nplt.figure(figsize=(15, 5))\nsns.countplot(x='NAME_INCOME_TYPE', data=train, hue='TARGET')","bbb7cb3e":"# \u7d50\u5a5a\u306e\u6709\u7121\nplt.figure(figsize=(10, 5))\nsns.countplot(x='NAME_FAMILY_STATUS', data=train, hue='TARGET')","a456de56":"# \u4f4f\u5c45\u306e\u30bf\u30a4\u30d7\nplt.figure(figsize=(15, 5))\nsns.countplot(x='NAME_HOUSING_TYPE', data=train, hue='TARGET')","2fa833db":"# \u6700\u7d42\u5b66\u6b74\nplt.figure(figsize=(15, 5))\nsns.countplot(x='NAME_EDUCATION_TYPE', data=train, hue='TARGET')","03799515":"# \u73fe\u5728\u306e\u4ed5\u4e8b\u306b\u5c31\u3044\u3066\u304b\u3089\u30ed\u30fc\u30f3\u3092\u7533\u3057\u8fbc\u3080\u307e\u3067\u306e\u65e5\u6570\nfig = sns.FacetGrid(train, hue='TARGET', height=4, aspect=2)\nfig.map(sns.kdeplot, 'DAYS_EMPLOYED', shade=True)\n\nprint(train['DAYS_EMPLOYED'][:10])","cc45ba09":"# \u4f4f\u3093\u3067\u3044\u308b\u5730\u57df\u306e\u4eba\u53e3\nfig = sns.FacetGrid(train, hue='TARGET', height=4, aspect=2)\nfig.map(sns.kdeplot, 'REGION_POPULATION_RELATIVE', shade=True)","add517de":"# \u4ed5\u4e8b\u306e\u696d\u754c\nplt.figure(figsize=(10, 20))\nsns.countplot(y='ORGANIZATION_TYPE', data=train, hue='TARGET')","de208bee":"# \u4ed5\u4e8b\u306e\u8077\u7a2e\nplt.figure(figsize=(10, 6))\nsns.countplot(y='OCCUPATION_TYPE', data=train, hue='TARGET')","80b87fdb":"# \u5bb6\u65cf\u4eba\u6570\nplt.figure(figsize=(10, 6))\nsns.countplot(x='CNT_FAM_MEMBERS', data=train, hue='TARGET')","cf0f22aa":"# 1\u5e74\u9593\u306e\u30c8\u30fc\u30bf\u30eb\u53ce\u5165\ndef INCOME_EDIT(x):\n    if x >= 1000000:\n        y = np.nan\n    else:\n        y = x\n    return y\n\ntrain['AMT_INCOME_TOTAL'] = train['AMT_INCOME_TOTAL'].apply(lambda x: INCOME_EDIT(x))\ntest['AMT_INCOME_TOTAL'] = test['AMT_INCOME_TOTAL'].apply(lambda x: INCOME_EDIT(x))\n\nfig = sns.FacetGrid(train, hue='TARGET', height=4, aspect=2)\nfig.map(sns.kdeplot, 'AMT_INCOME_TOTAL', shade=True)","9cc78c72":"# \u73fe\u5728\u306e\u8eca\u3092\u8cfc\u5165\u3057\u3066\u304b\u3089\u7d4c\u904e\u3057\u305f\u5e74\ndef CAR_transformer(x):\n    if x >= 50:\n        y = np.nan\n    else:\n        y = x\n    return y\n\ntrain['OWN_CAR_AGE'] = train['OWN_CAR_AGE'].apply(lambda x: CAR_transformer(x))\ntest['OWN_CAR_AGE'] = test['OWN_CAR_AGE'].apply(lambda x: CAR_transformer(x))\n\nfig = sns.FacetGrid(train, hue='TARGET', height=4, aspect=2)\nfig.map(sns.kdeplot, 'OWN_CAR_AGE', shade=True)","a47ef3b1":"# 1\u5e74\u9593\u3067\u8fd4\u6e08\u3057\u3066\u3044\u308b\u30ed\u30fc\u30f3\u984d\ndef ANNUITY_EDIT(x):\n    if x >= 125000:\n        y = np.nan\n    else:\n        y = x\n    return y\n\ntrain['AMT_ANNUITY'] = train['AMT_ANNUITY'].apply(lambda x: ANNUITY_EDIT(x))\ntest['AMT_ANNUITY'] = test['AMT_ANNUITY'].apply(lambda x: ANNUITY_EDIT(x))\n\nfig = sns.FacetGrid(train, hue='TARGET', height=4, aspect=2)\nfig.map(sns.kdeplot, 'AMT_ANNUITY', shade=True)","cac74acf":"# \u73fe\u8077\u306b\u5c31\u3044\u3066\u304b\u3089\u30ed\u30fc\u30f3\u3092\u7533\u3057\u8fbc\u3080\u307e\u3067\u306e\u65e5\u6570\ndef EMPLOYED_EDIT(x):\n    if x >= 0:\n        y = np.nan\n    elif x <= -10000:\n        y = np.nan\n    else:\n        y = x\n    return y\n\ntrain['DAYS_EMPLOYED'] = train['DAYS_EMPLOYED'].apply(lambda x: EMPLOYED_EDIT(x))\ntrain['DAYS_EMPLOYED'] = train['DAYS_EMPLOYED'] * (-1)\n\ntest['DAYS_EMPLOYED'] = test['DAYS_EMPLOYED'].apply(lambda x: EMPLOYED_EDIT(x))\ntest['DAYS_EMPLOYED'] = test['DAYS_EMPLOYED'] * (-1)\n\nfig = sns.FacetGrid(train, hue='TARGET', height=4, aspect=2)\nfig.map(sns.kdeplot, 'DAYS_EMPLOYED', shade=True)","3b4682b9":"# \u5b50\u4f9b\u306e\u4eba\u6570\ndef CHILDREN_transformer(x):\n    if x <= 1:\n        y = 1\n    else:\n        y = 0\n    return y\n\ntrain['CNT_CHILDREN_CLASSIFICATION'] = train['CNT_CHILDREN'].apply(lambda x: CHILDREN_transformer(x))\ntest['CNT_CHILDREN_CLASSIFICATION'] = test['CNT_CHILDREN'].apply(lambda x: CHILDREN_transformer(x))\n\nsns.countplot(x='CNT_CHILDREN_CLASSIFICATION', data=train, hue='TARGET')","834ff895":"# 1\u5e74\u9593\u306e\u30c8\u30fc\u30bf\u30eb\u53ce\u5165\ntrain['AMT_INCOME_TOTAL'] = train['AMT_INCOME_TOTAL'].fillna(train['AMT_INCOME_TOTAL'].median())\ntest['AMT_INCOME_TOTAL'] = test['AMT_INCOME_TOTAL'].fillna(test['AMT_INCOME_TOTAL'].median())\n\ndef INCOME_RANK(x):\n    if x <= 50000:\n        y = 0\n    elif x <= 100000:\n        y = 1\n    elif x <= 150000:\n        y = 2\n    elif x <= 200000:\n        y = 3\n    elif x <= 250000:\n        y = 4\n    else:\n        y = 5\n    return y\n\ntrain['AMT_INCOME_RANK'] = train['AMT_INCOME_TOTAL'].apply(lambda x: INCOME_RANK(x))\ntest['AMT_INCOME_RANK'] = test['AMT_INCOME_TOTAL'].apply(lambda x: INCOME_RANK(x))\n\nsns.countplot(x='AMT_INCOME_RANK', data=train, hue='TARGET')","f2df597a":"def INCOME_transformer(x):\n    if x >= 1:\n        y = 1\n    else:\n        y = 0\n    return y\n\ntrain['AMT_INCOME_RANK_CLASS'] = train['AMT_INCOME_RANK'].apply(lambda x: INCOME_transformer(x))\ntrain = train.drop('AMT_INCOME_RANK', axis=1)\n\ntest['AMT_INCOME_RANK_CLASS'] = test['AMT_INCOME_RANK'].apply(lambda x: INCOME_transformer(x))\ntest = test.drop('AMT_INCOME_RANK', axis=1)\n\nsns.countplot(x='AMT_INCOME_RANK_CLASS', data=train, hue='TARGET')","dd81505e":"# \u30ed\u30fc\u30f3\u7dcf\u984d\ndef CREDIT_transformer(x):\n    if x <= 1000000:\n        y = 1\n    else:\n        y = 0\n    return y\n\ntrain['AMT_CREDIT_CLASS'] = train['AMT_CREDIT'].apply(lambda x: CREDIT_transformer(x))\ntest['AMT_CREDIT_CLASS'] = test['AMT_CREDIT'].apply(lambda x: CREDIT_transformer(x))\n\nsns.countplot(x='AMT_CREDIT_CLASS', data=train, hue='TARGET')","c1fb741a":"# 1\u5e74\u9593\u306b\u652f\u6255\u3046\u30ed\u30fc\u30f3\u984d\ntrain['AMT_ANNUITY'] = train['AMT_ANNUITY'].fillna(train['AMT_ANNUITY'].median())\ntest['AMT_ANNUITY'] = test['AMT_ANNUITY'].fillna(test['AMT_ANNUITY'].median())\n\ndef ANNUITY_transformer(x):\n    if x <= 50000:\n        y = 1\n    else:\n        y = 0\n    return y\n\ntrain['AMT_ANNUITY_CLASS'] = train['AMT_ANNUITY'].apply(lambda x: ANNUITY_transformer(x))\ntest['AMT_ANNUITY_CLASS'] = test['AMT_ANNUITY'].apply(lambda x: ANNUITY_transformer(x))\n\nsns.countplot(x='AMT_ANNUITY_CLASS', data=train, hue='TARGET')","522e0286":"# 1\u5e74\u9593\u306e\u53ce\u5165 - 1\u5e74\u9593\u306b\u652f\u6255\u3046\u30ed\u30fc\u30f3\u984d\ntrain['BALANCE_PAYMENTS'] = train['AMT_INCOME_TOTAL'] - train['AMT_ANNUITY']\ntest['BALANCE_PAYMENTS'] = test['AMT_INCOME_TOTAL'] - test['AMT_ANNUITY']\n\ngrid = sns.FacetGrid(train, col='TARGET', height=4, aspect=1)\ngrid.map(plt.hist, 'BALANCE_PAYMENTS', bins=20)","e5a8763b":"def BALANCE_transformer(x):\n    if x >= 60000:\n        y = 1\n    else:\n        y = 0\n    return y\n\ntrain['BALANCE_PAYMENTS_CLASS'] = train['BALANCE_PAYMENTS'].apply(lambda x: BALANCE_transformer(x))\ntest['BALANCE_PAYMENTS_CLASS'] = test['BALANCE_PAYMENTS'].apply(lambda x: BALANCE_transformer(x))\n\nsns.countplot(x='BALANCE_PAYMENTS_CLASS', data=train, hue='TARGET')","37d71026":"# 1\u5e74\u9593\u306b\u652f\u6255\u3046\u30ed\u30fc\u30f3\u984d \/ 1\u5e74\u9593\u306e\u53ce\u5165 * 100\ntrain['BALANCE_RATE'] = train['AMT_ANNUITY'] \/ train['AMT_INCOME_TOTAL'] * 100\ntest['BALANCE_RATE'] = test['AMT_ANNUITY'] \/ test['AMT_INCOME_TOTAL'] * 100\n\ngrid = sns.FacetGrid(train, col='TARGET', height=4, aspect=1)\ngrid.map(plt.hist, 'BALANCE_RATE', bins=20)","a574f080":"train['AMT_GOODS_PRICE'] = train['AMT_GOODS_PRICE'].fillna(train['AMT_GOODS_PRICE'].median())\ntest['AMT_GOODS_PRICE'] = test['AMT_GOODS_PRICE'].fillna(test['AMT_GOODS_PRICE'].median())\n\ndef GOODS_transformer(x):\n    if x <= 1000000:\n        y = 1\n    else:\n        y = 0\n    return y\n\ntrain['AMT_GOODS_PRICE_CLASS'] = train['AMT_GOODS_PRICE'].apply(lambda x: GOODS_transformer(x))\ntest['AMT_GOODS_PRICE_CLASS'] = test['AMT_GOODS_PRICE'].apply(lambda x: GOODS_transformer(x))\n\nsns.countplot(x='AMT_GOODS_PRICE_CLASS', data=train, hue='TARGET')","0669e747":"# \u5e74\u9f62 \/ 1\u5e74\u9593\u306e\u53ce\u5165 * 100\ntrain['GROWTH_RATE'] = train['AGE'] \/ train['AMT_INCOME_TOTAL'] * 100\ntest['GROWTH_RATE'] = test['AGE'] \/ test['AMT_INCOME_TOTAL'] * 100\n\ngrid = sns.FacetGrid(train, col='TARGET', height=4, aspect=1)\ngrid.map(plt.hist, 'GROWTH_RATE', bins=20)","60f83f0c":"train['GROWTH_RATE'] = train['GROWTH_RATE'].fillna(train['GROWTH_RATE'].median())\ntest['GROWTH_RATE'] = test['GROWTH_RATE'].fillna(test['GROWTH_RATE'].median())\n\ndef Growth_transformer(x):\n    if x <= 0.05:\n        y = 1\n    else:\n        y = 0\n    return y\n\ntrain['GROWTH_RATE_CLASS'] = train['GROWTH_RATE'].apply(lambda x: Growth_transformer(x))\ntest['GROWTH_RATE_CLASS'] = test['GROWTH_RATE'].apply(lambda x: Growth_transformer(x))\n\nsns.countplot(x='GROWTH_RATE_CLASS', data=train, hue='TARGET')","792eb5b5":"# \u80b2\u3066\u89aa\u306e\u4eba\u6570\uff08\u5bb6\u65cf\u4eba\u6570 - \u5b50\u4f9b\u306e\u4eba\u6570\uff09\ntrain['CNT_FAM_MEMBERS'] = train['CNT_FAM_MEMBERS'].fillna(train['CNT_FAM_MEMBERS'].median())\ntest['CNT_FAM_MEMBERS'] = test['CNT_FAM_MEMBERS'].fillna(test['CNT_FAM_MEMBERS'].median())\n\ntrain['PARENTS'] = train['CNT_FAM_MEMBERS'] - train['CNT_CHILDREN']\ntest['PARENTS'] = test['CNT_FAM_MEMBERS'] - test['CNT_CHILDREN']\n\nsns.countplot(x='PARENTS', data=train, hue='TARGET')","7e35cd6c":"# \u8eca\u6240\u6709\u304b\u3064\u5bb6\u3092\u6301\u3063\u3066\u3044\u308b\uff080\uff1aNo\u30011\uff1aYes\uff09\ndef OWN_transformer(x):\n    if x == 'Y':\n        y = 1\n    else:\n        y = 0\n    return y\n\ntrain['FLAG_OWN_CAR'] = train['FLAG_OWN_CAR'].apply(lambda x: OWN_transformer(x))\ntrain['FLAG_OWN_REALTY'] = train['FLAG_OWN_REALTY'].apply(lambda x: OWN_transformer(x))\ntrain['CAR_AND_REALTY'] = train['FLAG_OWN_CAR'] * train['FLAG_OWN_REALTY']\n\ntest['FLAG_OWN_CAR'] = test['FLAG_OWN_CAR'].apply(lambda x: OWN_transformer(x))\ntest['FLAG_OWN_REALTY'] = test['FLAG_OWN_REALTY'].apply(lambda x: OWN_transformer(x))\ntest['CAR_AND_REALTY'] = test['FLAG_OWN_CAR'] * test['FLAG_OWN_REALTY']\n\nsns.countplot(x='CAR_AND_REALTY', data=train, hue='TARGET')","1a050b46":"# \u5973\u6027\u304b\u30641\u4eba\u89aa\uff080\uff1aNo\u30011\uff1aYes\uff09\ndef Female_transformer(x):\n    if x == 'F':\n        y = 1\n    else:\n        y = 0\n    return y\n\ndef Single_transformer(x):\n    if x == 1:\n        y = 1\n    else:\n        y = 0\n    return y\n\ntrain['FEMAIL'] = train['CODE_GENDER'].apply(lambda x: Female_transformer(x))\ntrain['SINGLE_PARENTS'] = train['PARENTS'].apply(lambda x: Single_transformer(x))\ntrain['SINGLE_FEMAIL_PARENTS'] = train['FEMAIL'] * train['SINGLE_PARENTS']\ntrain = train.drop(['FEMAIL', 'SINGLE_PARENTS'], axis=1)\n\ntest['FEMAIL'] = test['CODE_GENDER'].apply(lambda x: Female_transformer(x))\ntest['SINGLE_PARENTS'] = test['PARENTS'].apply(lambda x: Single_transformer(x))\ntest['SINGLE_FEMAIL_PARENTS'] =test['FEMAIL'] * test['SINGLE_PARENTS']\ntest = test.drop(['FEMAIL', 'SINGLE_PARENTS'], axis=1)\n\nsns.countplot(x='SINGLE_FEMAIL_PARENTS', data=train, hue='TARGET')","7ab613d3":"# \u30ed\u30fc\u30f3\u3092\u501f\u308a\u3066\u8cfc\u5165\u3059\u308b\u7269\u306e\u4fa1\u683c \/ 1\u5e74\u9593\u306e\u5e74\u53ce\ntrain['REPAYMENTS'] = train['AMT_GOODS_PRICE'] \/ train['AMT_INCOME_TOTAL']\ntest['REPAYMENTS'] = test['AMT_GOODS_PRICE'] \/ test['AMT_INCOME_TOTAL']\n\ngrid = sns.FacetGrid(train, col='TARGET', height=4, aspect=1)\ngrid.map(plt.hist, 'REPAYMENTS', bins=20)","b44fa2e2":"def Repayment_transformer(x):\n    if x <= 10:\n        y = 1\n    else:\n        y = 0\n    return y\n\ntrain['REPAYMENTS_CLASS'] = train['REPAYMENTS'].apply(lambda x: Repayment_transformer(x))\ntest['REPAYMENTS_CLASS'] = test['REPAYMENTS'].apply(lambda x: Repayment_transformer(x))\n\nsns.countplot(x='REPAYMENTS_CLASS', data=train, hue='TARGET')","9bff16fd":"# \u30ed\u30fc\u30f3\u306e\u7533\u8acb\u56de\u6570\nApplication_counts = bureau.groupby('SK_ID_CURR', as_index=False)['SK_ID_BUREAU'].count().rename(columns={'SK_ID_BUREAU': 'APPLICATION_COUNTS'})\nApplication_counts.head(10)","1d307980":"train = pd.merge(train, Application_counts, on='SK_ID_CURR', how='left')\ntest = pd.merge(test, Application_counts, on='SK_ID_CURR', how='left')\n\ngrid = sns.FacetGrid(train, col='TARGET', height=4, aspect=1)\ngrid.map(plt.hist, 'APPLICATION_COUNTS', bins=20)","34189fc2":"# CREDIT_ACTIVE = active\u306b\u306a\u3063\u3066\u3044\u308b\u56de\u6570\ndef CREDIT_ACTIVE_transformer(x):\n    if x == 'Active':\n        y = 1\n    else:\n        y = 0\n    return y\n\nbureau['CREDIT_ACTIVE'] = bureau['CREDIT_ACTIVE'].apply(lambda x: CREDIT_ACTIVE_transformer(x))\n\nCredit_counts = bureau.groupby('SK_ID_CURR')['CREDIT_ACTIVE'].sum()\npd.DataFrame(Credit_counts).head(10)","a2f1f4cd":"train = pd.merge(train, Credit_counts, on='SK_ID_CURR', how='left')\ntest = pd.merge(test, Credit_counts, on='SK_ID_CURR', how='left')\n\ngrid = sns.FacetGrid(train, col='TARGET', height=4, aspect=1)\ngrid.map(plt.hist, 'CREDIT_ACTIVE', bins=20)","b9ae0ad8":"# AMT_CREDIT_SUM\u306e\u5e73\u5747\nAMT_CREDIT_SUM_MEAN = bureau.groupby('SK_ID_CURR', as_index=False)['AMT_CREDIT_SUM'].mean().rename(columns={'AMT_CREDIT_SUM': 'AMT_CREDIT_SUM_MEAN'})\nAMT_CREDIT_SUM_MEAN.head(10)","19923ac0":"train = pd.merge(train, AMT_CREDIT_SUM_MEAN, on='SK_ID_CURR', how='left')\ntest = pd.merge(test, AMT_CREDIT_SUM_MEAN, on='SK_ID_CURR', how='left')\n\ngrid = sns.FacetGrid(train, col='TARGET', height=4, aspect=1)\ngrid.map(plt.hist, 'AMT_CREDIT_SUM_MEAN', bins=20)","ea8a1ca7":"def CREDIT_SUM_MEAN_transformer(x):\n    if x >= 1000000:\n        y = np.nan\n    else:\n        y = x\n    return y\n\ntrain['AMT_CREDIT_SUM_MEAN'] = train['AMT_CREDIT_SUM_MEAN'].apply(lambda x: CREDIT_SUM_MEAN_transformer(x))\ntest['AMT_CREDIT_SUM_MEAN'] = test['AMT_CREDIT_SUM_MEAN'].apply(lambda x: CREDIT_SUM_MEAN_transformer(x))\n\ngrid = sns.FacetGrid(train, col='TARGET', height=4, aspect=1)\ngrid.map(plt.hist, 'AMT_CREDIT_SUM_MEAN', bins=20)","de3a786f":"# AMT_BALANCE\u306e\u5e73\u5747\nAMT_BALANCE_MEAN = ccb.groupby('SK_ID_CURR', as_index=False)['AMT_BALANCE'].mean().rename(columns={'AMT_BALANCE': 'AMT_BALANCE_MEAN'})\nAMT_BALANCE_MEAN.head(10)","ce188254":"train = pd.merge(train, AMT_BALANCE_MEAN, on='SK_ID_CURR', how='left')\ntest = pd.merge(test, AMT_BALANCE_MEAN, on='SK_ID_CURR', how='left')\n\ngrid = sns.FacetGrid(train, col='TARGET', height=4, aspect=1)\ngrid.map(plt.hist, 'AMT_BALANCE_MEAN', bins=20)","de162ee9":"# AMT_TOTAL_RECEIVABLE\u306e\u5e73\u5747\nAMT_TOTAL_RECEIVABLE_MEAN = ccb.groupby('SK_ID_CURR', as_index=False)['AMT_TOTAL_RECEIVABLE'].mean().rename(columns={'AMT_TOTAL_RECEIVABLE': 'AMT_TOTAL_RECEIVABLE_MEAN'})\nAMT_TOTAL_RECEIVABLE_MEAN.head(10)","a9bdfd85":"train = pd.merge(train, AMT_TOTAL_RECEIVABLE_MEAN, on='SK_ID_CURR', how='left')\ntest = pd.merge(test, AMT_TOTAL_RECEIVABLE_MEAN, on='SK_ID_CURR', how='left')\n\ngrid = sns.FacetGrid(train, col='TARGET', height=4, aspect=1)\ngrid.map(plt.hist, 'AMT_TOTAL_RECEIVABLE_MEAN', bins=20)","cbcd0ddb":"X_train = train[[col for col in train.columns if col != 'TARGET']]\ny_train = train['TARGET']\nX_test = test\n\nX = pd.concat([X_train, X_test], axis=0)\nX = X.drop('SK_ID_CURR', axis=1)\n\nprint(X.shape)","537a6615":"numerical_col = [col for col in X.columns if X[col].dtype != 'object']\ncategorical_col = [col for col in X.columns if X[col].dtype == 'object']\n\nX_num = X[numerical_col]\nX_cat = X[categorical_col]","456dfbf7":"X_num = X_num.fillna(-9999)\nX_cat = X_cat.fillna(value='missing')\nX_cat = pd.get_dummies(X_cat)\n\nX = pd.concat([X_num, X_cat], axis=1)","871ae0ab":"train_rows = train.shape[0]\nX_train = X[:train_rows]\nX_test = X[train_rows:]\n\nprint(X_train.shape)\nprint(y_train.shape)\nprint(X_test.shape)","4fbd662e":"X_tr, X_val, y_tr, y_val = train_test_split(X_train, y_train, test_size=0.2, random_state=666)","46477acd":"'''\ndef create_model(trial):\n    n_estimators = trial.suggest_int('n_estimators', 50, 500)\n    max_depth = trial.suggest_int('max_depth', 3, 8)\n    learning_rate = trial.suggest_uniform('learning_rate', 0.0001, 0.99)\n    subsample = trial.suggest_uniform('subsample', 0.1, 1.0)\n    colsample_bytree = trial.suggest_uniform('colsample_bytree', 0.1, 1.0)\n    \n    model = xgb.XGBClassifier(\n        n_estimators=n_estimators, \n        max_depth=max_depth, \n        learning_rate=learning_rate,\n        subsample=subsample,\n        colsample_bytree=colsample_bytree,\n        random_state=666)\n        \n    return model\n\ndef objective(trial):\n    model = create_model(trial)\n    model.fit(X_tr, y_tr)\n    y_proba = model.predict_proba(X_val)[:,1]\n    score = roc_auc_score(y_val, y_proba)\n    return score\n\nstudy = optuna.create_study(direction='maximize')\nstudy.optimize(objective, n_trials=40)\nparams = study.best_params\n\nprint(params)\n\n'''","a8e2a531":"params = {'n_estimators': 496,\n          'max_depth': 4, \n          'learning_rate': 0.052819174028842786, \n          'subsample': 0.8699406829181138,\n          'colsample_bytree': 0.6127121392595005,\n          'random_state': 666}","6eb76c70":"%%time\n\ncls = xgb.XGBClassifier(**params)\ncls.fit(X_train, y_train)\n\ny_proba = cls.predict_proba(X_test)[:, 1]","c4f7a85c":"fig,ax = plt.subplots(figsize=(30,30))\nxgb.plot_importance(cls, ax=ax,importance_type='gain',max_num_features=160)\nplt.show()","f0fef754":"submit = pd.DataFrame(y_proba, index=test['SK_ID_CURR'], columns=['TARGET'])\nsubmit.to_csv('home_credit_submit.csv')\n\nsubmit.head(10)","8d16ebc9":"# Feature Engneering","7d470a08":"Home Credit\u793e\u306f\u30011997\u5e74\u306b\u30c1\u30a7\u30b3\u5171\u548c\u56fd\u3067\u8a2d\u7acb\u3055\u308c\u3001\u30aa\u30e9\u30f3\u30c0\u306b\u672c\u793e\u3092\u7f6e\u304f\u56fd\u969b\u7684\u306a\u30ce\u30f3\u30d0\u30f3\u30af\u91d1\u878d\u6a5f\u95a2\u3067\u3042\u308b\u3002<br>\n\u540c\u793e\u306f10\u304b\u56fd\u3067\u4e8b\u696d\u3092\u5c55\u958b\u3057\u3066\u304a\u308a\u3001\u4e3b\u306b\u4fe1\u7528\u5c65\u6b74\u304c\u306a\u3044\u4eba\u3005\u3078\u306e\u5206\u5272\u6255\u3044\u306b\u91cd\u70b9\u3092\u7f6e\u3044\u3066\u3044\u308b\u3002<br>\n\u4eca\u56de\u306f\u3001\u9867\u5ba2\u60c5\u5831\u3068\u8fd4\u6e08\u60c5\u5831\u3092\u3082\u3068\u306b\u3001\u65b0\u305f\u306a\u9867\u5ba2\u306e\u8fd4\u6e08\u30ea\u30b9\u30af\u306e\u6709\u7121\u3092\u4e88\u6e2c\u3059\u308b\u30e2\u30c7\u30eb\u3092\u4f5c\u6210\u3059\u308b\u3002","58929328":"# Preprocess","30845a07":"\u30e1\u30a4\u30f3\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u306fapplication.csv\u3067\u3042\u308a\u3001\u305d\u308c\u306b\u7d10\u3065\u3044\u3066\u3044\u304f\u3064\u304b\u306e\u30b5\u30d6\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u304c\u7528\u610f\u3055\u308c\u3066\u3044\u308b\u3002<br>\n\u4eca\u56de\u4f7f\u7528\u3059\u308b\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u306b\u3064\u3044\u3066\u3001\u3044\u304f\u3064\u304b\u4e2d\u8eab\u3092\u898b\u3066\u3044\u304f\u3002","b9d9b525":"# Module","219d3432":"![image.png](attachment:image.png)","c0b500c7":"\u6b63\u78ba\u306a\u30c7\u30fc\u30bf\u306e\u5206\u5e03\u3092\u898b\u308b\u305f\u3081\u306b\u3001\u5916\u308c\u5024\u306f\u6b20\u640d\u5024\u306b\u7f6e\u304d\u63db\u3048\u3066\u53ef\u8996\u5316\u3059\u308b\u3002","cdbb0285":"# Dataset","6d5b41a8":"# Visualization","903fbf86":"\u7279\u5fb4\u91cf\u3092\u4f5c\u6210\u3059\u308b\u4e0a\u3067\u3001\u6b20\u640d\u5024\u3092\u57cb\u3081\u308b\u5fc5\u8981\u304c\u3042\u308b\u3082\u306e\u306f\u3001\u5148\u306b\u88dc\u5b8c\u3059\u308b\u3002<br>\n\u5916\u308c\u5024\u3092\u9664\u3051\u3066\u3044\u306a\u3044\u30ab\u30e9\u30e0\u3082\u3042\u308b\u305f\u3081\u3001\u5e73\u5747\u3067\u306f\u306a\u304f\u4e2d\u592e\u5024\u3067\u306e\u88dc\u5b8c\u3092\u63a1\u7528\u3059\u308b\u3002","bbead95c":"\u30c7\u30fc\u30bf\u306e\u4e88\u6e2c\u5024\u304c\u5f97\u3089\u308c\u305f\u306e\u3067\u3001\u3053\u308c\u3092\u30b3\u30f3\u30da\u30c6\u30a3\u30b7\u30e7\u30f3\u4e3b\u50ac\u306b\u63d0\u51fa\uff08Submit\uff09\u3059\u308b\u3002<br>\n\u6b63\u89e3\u30c7\u30fc\u30bf\u3068\u7167\u3089\u3057\u5408\u308f\u305b\u3066\u3001\u3069\u306e\u7a0b\u5ea6\u5408\u3063\u3066\u3044\u305f\u304b\u3092\u30b9\u30b3\u30a2\u3068\u3057\u3066\u53d7\u3051\u53d6\u308b\u3002","40bc7354":"# Modeling","a694755e":"\u4eca\u56de\u306f\u30d9\u30a4\u30ba\u6700\u9069\u5316\u3092\u5229\u7528\u3057\u305fOptuna\u3067\u306e\u30d1\u30e9\u30e1\u30fc\u30bf\u30c1\u30e5\u30fc\u30cb\u30f3\u30b0\u3092\u884c\u3046\u3002<br>\n\u6b63\u78ba\u6027\u3068\u901f\u3055\u306e\u30d0\u30e9\u30f3\u30b9\u304c\u512a\u308c\u3066\u3044\u308b\u305f\u3081\u4f7f\u7528\u3057\u3066\u3044\u308b\u304c\u3001\u4ed6\u306e\u30c1\u30e5\u30fc\u30cb\u30f3\u30b0\u65b9\u6cd5\u306b\u3064\u3044\u3066\u3082\u968f\u6642\u691c\u8a0e\u3057\u3066\u3044\u304d\u305f\u3044\u3002","341aa30e":"# Outliers","a902060e":"\u5916\u308c\u5024\u304c\u542b\u307e\u308c\u3066\u3044\u308b\u53ef\u80fd\u6027\u304c\u9ad8\u3044\u3002","67cd5895":"\u30fbapplication_{train|test}.csv\uff1aHome Credit\u793e\u304c\u6301\u3064\u30c7\u30fc\u30bf\u3067\u3001\u8fd4\u6e08\u30ea\u30b9\u30af\u306e\u6709\u7121\u3068\u305d\u308c\u306b\u5bfe\u5fdc\u3059\u308b\u9867\u5ba2\u306e\u500b\u4eba\u60c5\u5831\u304c\u307e\u3068\u3081\u3089\u308c\u3066\u3044\u308b\u30c7\u30fc\u30bf<br>\n\u30fbbureau.csv\uff1aHome Credit\u793e\u4ee5\u5916\u3067\u306e\u878d\u8cc7\u60c5\u5831<br>\n\u30fbPOS_CASH_balance.csv\uff1abureau\u306e\u8ca0\u50b5\u6b8b\u9ad8\u306e\u5c65\u6b74<br>\n\u30fbcredit_card_balance.csv\uff1a\u30af\u30ec\u30b8\u30c3\u30c8\u30ab\u30fc\u30c9\u306e\u4f7f\u7528\u306b\u95a2\u3059\u308b\u60c5\u5831<br>\n\u30fbprevious_application.csv\uff1aHome Credit\u793e\u306b\u304a\u3051\u308b\u904e\u53bb\u306e\u878d\u8cc7\u60c5\u5831","f9aade5a":"[\u6a5f\u68b0\u5b66\u7fd2\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u9078\u629e\u30ac\u30a4\u30c9](https:\/\/blogs.sas.com\/content\/sasjapan\/2017\/11\/21\/machine-learning-algorithm-use\/)\u3092\u53c2\u8003\u306b\u3001\u4e88\u6e2c\u306e\u6b63\u78ba\u6027\u3092\u6700\u512a\u5148\u3068\u3057\u3001\u4ee5\u4e0b\u306e\u30e2\u30c7\u30eb\u3092\u8a66\u3057\u3066\u3044\u304f\u3002\n\n\u30fbRandomForest\uff1a\u2715\uff08\u30b9\u30b3\u30a2\u304c\u4f4e\u304b\u3063\u305f\u305f\u3081\u3001\u4e0d\u63a1\u7528\u3068\u3059\u308b\uff09<br>\n\u30fbLightGBM\uff1a\u25cb<br>\n\u30fbXGBoost\uff1a\u3053\u308c\u304b\u3089\u691c\u8a3c<br>\n\u30fbSupportVectorMachine\uff1a\u3053\u308c\u304b\u3089\u691c\u8a3c\n\n\u6c7a\u5b9a\u6728\u3092\u30d9\u30fc\u30b9\u3068\u3057\u305f\u30e2\u30c7\u30eb\u3067\u3042\u308b\u305f\u3081\u3001\u6b20\u640d\u5024\u306e\u88dc\u5b8c\u306f\u7279\u306b\u884c\u308f\u306a\u304f\u3066\u3082\u826f\u3044\u304c<br>\n\u88dc\u5b8c\u3092\u884c\u3063\u305f\u5834\u5408\u306e\u65b9\u304c\u30b9\u30b3\u30a2\u304c0.01\u307b\u3069\u9ad8\u304f\u306a\u3063\u305f\u305f\u3081\u3001\u51e6\u7406\u3092\u884c\u3063\u3066\u3044\u308b\u3002\n\n\u5c1a\u3001\u6c7a\u5b9a\u6728\u3092\u30d9\u30fc\u30b9\u3068\u3057\u305f\u30e2\u30c7\u30eb\u306b\u5bfe\u3057\u3066\u3001\u6b20\u640d\u5024\u3067\u3042\u308b\u3068\u8a8d\u8b58\u3055\u305b\u308b\u305f\u3081\u306b<br>\n\u6570\u5024\u30c7\u30fc\u30bf\u306e\u88dc\u5b8c\u306f\u3001-9999\u3068\u3044\u3046\u901a\u5e38\u53d6\u308a\u5f97\u308b\u7bc4\u56f2\u5916\u306e\u5024\u3092\u7528\u3044\u3066\u3044\u308b\u3002","2fe62005":"\u76ee\u7684\u5909\u6570\u306fTARGET\u3067\u3042\u308a\u3001\u5024\u306f\u4ee5\u4e0b\u306e2\u3064\u304c\u4e0e\u3048\u3089\u308c\u3066\u3044\u308b\u3002\n\n\u30fb0\uff1a\u8fd4\u6e08\u30ea\u30b9\u30af\u306a\u3057<br>\n\u30fb1\uff1a\u904e\u53bb\u306b\u652f\u6255\u3044\u306e\u9045\u5ef6\u304c\u3042\u308a\u3001\u8fd4\u6e08\u30ea\u30b9\u30af\u3042\u308a","828498e8":"# Submit","08474762":"\u5404\u7279\u5fb4\u91cf\uff08\u9867\u5ba2\u60c5\u5831\uff09\u306b\u5bfe\u3059\u308b\u76ee\u7684\u5909\u6570\uff08TARGET\uff09\u306e\u5206\u5e03\u3092\u898b\u3066\u3044\u304f\u3002","ffc768d4":"# Overview"}}