{"cell_type":{"3d81f6c6":"code","393d4103":"code","2a5b8c04":"code","44a6333e":"code","0c8c9ccf":"code","40445b70":"code","4679ed3c":"code","5aa07fbb":"code","deb4a90f":"code","d81e3046":"code","0ab0ac33":"code","04b626f0":"code","8639deee":"code","28168dbd":"code","1625a30c":"code","cd3e1937":"code","bfbd0d67":"code","226ec045":"code","f3675471":"code","3f24a82f":"code","b075ad8e":"code","1233301a":"code","96469df8":"code","dc7832c4":"code","3145ce70":"code","5e41e3aa":"code","88645097":"code","6dafdb1d":"code","05641fd4":"code","a02037fa":"code","62106678":"code","fd9e2ed8":"code","24b963ce":"code","7eac702d":"code","1136df66":"code","cd39effe":"code","0478e683":"code","3639332a":"code","4db094d4":"code","47f46243":"code","9a822324":"code","24087423":"code","d51ce69f":"code","6c20c03d":"code","aaf3ff41":"code","82e7e6c7":"code","10d6e855":"code","895416fb":"code","21bea544":"code","1aff2370":"code","81af7d82":"code","4e61f248":"markdown","0d1c32ad":"markdown","be917d90":"markdown","a155d168":"markdown","529d8e7b":"markdown","3590f4dc":"markdown","ec3cee50":"markdown","00506815":"markdown","5eeaf7de":"markdown","bda8e572":"markdown","369c0d3d":"markdown","a85a6ffc":"markdown","6926563a":"markdown","6e39d7ad":"markdown","5355308a":"markdown","496731d1":"markdown","b689da66":"markdown","c5c39486":"markdown","8b800adb":"markdown","0d2cd110":"markdown","8613caf2":"markdown","f1d4a0c4":"markdown"},"source":{"3d81f6c6":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","393d4103":"import pandas as pd\nimport numpy as np\nimport seaborn as sns\nimport matplotlib.pyplot as plt","2a5b8c04":"df=pd.read_csv(r'\/kaggle\/input\/credit-card-customers\/BankChurners.csv')","44a6333e":"df.head(10)","0c8c9ccf":"pd.set_option('display.max_columns', None)#to view all the columns\ndf.head()","40445b70":"#renaming some columns \ndf = df.rename(columns={'CLIENTNUM': 'phone', 'Customer_Age': 'age', 'Naive_Bayes_Classifier_Attrition_Flag_Card_Category_Contacts_Count_12_mon_Dependent_count_Education_Level_Months_Inactive_12_mon_1': 'naive_bayes_month_1', 'Naive_Bayes_Classifier_Attrition_Flag_Card_Category_Contacts_Count_12_mon_Dependent_count_Education_Level_Months_Inactive_12_mon_2': 'naive_bayes_month_2'})","4679ed3c":"df.head()","5aa07fbb":"df.describe()#descriptive summary","deb4a90f":"df.isnull().sum()#checking for null or missing values","d81e3046":"#attrition flag is our target variable\ndf[\"Attrition_Flag\"].value_counts()","0ab0ac33":"colors=('#453CC9', '#22AFF1')\nexplode=[0,0.1]\ndf[\"Attrition_Flag\"].value_counts().plot(kind='pie',shadow=True,explode=explode,colors=colors,autopct='%.2f',figsize=(8,6))\nplt.title('Ratio of class')\nplt.show()","04b626f0":"colors=('#165081', '#29ABF4')\nexplode=[0,0.1]\ndf[\"Gender\"].value_counts().plot(kind='pie',shadow=True,explode=explode,colors=colors,autopct='%.2f',figsize=(8,6))\nplt.title('Ratio of Gender')\nplt.show()","8639deee":"df['Education_Level'].value_counts().plot(kind='bar',colormap='winter',figsize=(15,5))\nplt.title('Frequency of Education')","28168dbd":"colors=('#031B88', '#6096FD', '#AAB6FB','#FB7B8E')\nexplode=[0.02,0.04,0.06,0.08]\ndf[\"Marital_Status\"].value_counts().plot(kind='pie',shadow=True,explode=explode,colors=colors,autopct='%.2f',figsize=(8,6))\nplt.title('Ratio of Maritial Status')\nplt.show()","1625a30c":"colors=('#192e5b', '#1d65a6', '#72a2c0','#00743f','#FB7B8E','#AAB6FB')\nexplode=[0.1,0.08,0.06,0.05,0.04,0]\ndf[\"Income_Category\"].value_counts().plot(kind='pie',shadow=True,explode=explode,colors=colors,autopct='%.2f',figsize=(8,6))\nplt.title('Ratio of Income  Category')\nplt.show()","cd3e1937":"df.head()","bfbd0d67":"df['Card_Category'].value_counts()","226ec045":"colors=('#0000CD', '#C0C0C0', '#FFD700','#e5e4e2')\nexplode=[0,0.2,0.2,0.3]\ndf[\"Card_Category\"].value_counts().plot(kind='pie',shadow=True,explode=explode,colors=colors,autopct='%.2f',figsize=(8,6))\nplt.title('Ratio of Card Category')\nplt.show()","f3675471":"df['Income_Category'].value_counts()","3f24a82f":"#encoding categorical columns\ndf['Attrition_Flag']=df['Attrition_Flag'].replace({'Existing Customer':0, 'Attrited Customer':1})\ndf['Gender']=df['Gender'].replace({'M':1,'F':0})\ndf['Education_Level']=df['Education_Level'].replace({'Uneducated':0, 'High School':1, 'College':2, 'Graduate':3, 'Post-Graduate':4, 'Doctorate':5, 'Unknown':6})\ndf['Marital_Status']=df['Marital_Status'].replace({'Single':0, 'Married':1, 'Divorced':2, 'Unknown':3})\ndf['Income_Category']=df['Income_Category'].replace({'Less than $40K':0, '$40K - $60K':1, '$60K - $80K':2, '$80K - $120K':3, '$120K +':4, 'Unknown':5})\ndf['Card_Category']=df['Card_Category'].replace({'Blue': 0, 'Silver':1,'Gold':2,'Platinum':3})","b075ad8e":"df.dtypes#verifying dtypes","1233301a":"plt.subplots(figsize=(15,8))\nplt.title('Correlation between variables')\nsns.heatmap(df.corr(),annot=True,cmap='YlGnBu')","96469df8":"df.hist(bins=50, figsize=(20,20))","dc7832c4":"#dropping unncecessary columns\ndf.drop(['naive_bayes_month_1','naive_bayes_month_2'], axis =1, inplace=True)","3145ce70":"df.shape","5e41e3aa":"from sklearn.model_selection import train_test_split\nfrom imblearn.over_sampling import SMOTE\nfrom sklearn.preprocessing import MinMaxScaler","88645097":"df.columns","6dafdb1d":"X=df[['phone', 'age', 'Gender', 'Dependent_count',\n       'Education_Level', 'Marital_Status', 'Income_Category', 'Card_Category',\n       'Months_on_book', 'Total_Relationship_Count', 'Months_Inactive_12_mon',\n       'Contacts_Count_12_mon', 'Credit_Limit', 'Total_Revolving_Bal',\n       'Avg_Open_To_Buy', 'Total_Amt_Chng_Q4_Q1', 'Total_Trans_Amt',\n       'Total_Trans_Ct', 'Total_Ct_Chng_Q4_Q1', 'Avg_Utilization_Ratio']]\ny=df['Attrition_Flag']","05641fd4":"oversample = SMOTE()\nX, y = oversample.fit_resample(X, y)","a02037fa":"# 80% training set 20% percent test set\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.20,shuffle=True)","62106678":"scaler=MinMaxScaler()\nscaler.fit(X_train)\nX_train=scaler.transform(X_train)\nX_test=scaler.transform(X_test)","fd9e2ed8":"print('Shape of Training data: ',X_train.shape, y_train.shape,\n     'Shape of test data: ',X_test.shape, y_test.shape)","24b963ce":"from sklearn.linear_model import LogisticRegression\nfrom sklearn.metrics import classification_report, f1_score, confusion_matrix, accuracy_score","7eac702d":"lr=LogisticRegression()\nlr.fit(X_train,y_train)","1136df66":"lr_pred=lr.predict(X_test)","cd39effe":"print('F1-Score: ',f1_score(y_test,lr_pred))","0478e683":"print('Report: ',classification_report(y_test,lr_pred))","3639332a":"confusion_matrix(y_test,lr_pred)","4db094d4":"accuracy_score(y_test,lr_pred)","47f46243":"from sklearn.tree import DecisionTreeClassifier","9a822324":"#after pruning\ndt=DecisionTreeClassifier(criterion='entropy',max_depth=11)\ndt.fit(X_train,y_train)","24087423":"dt_pred=dt.predict(X_test)","d51ce69f":"print('Report: ',classification_report(y_test,dt_pred))","6c20c03d":"print('Accuracy: ',accuracy_score(y_test,dt_pred))\n","aaf3ff41":"confusion_matrix(y_test,dt_pred)","82e7e6c7":"#decision tree pruning\nmax_depth=[]\nacc_gini=[]\nacc_entropy=[]\nfor i in range(1,50,5):\n    dtree=DecisionTreeClassifier(criterion='gini',max_depth=i)\n    dtree.fit(X_train,y_train)\n    pred=dtree.predict(X_test)\n    \n    acc_gini.append(accuracy_score(y_test,pred))\n    \n    dtree=DecisionTreeClassifier(criterion='entropy',max_depth=i)\n    dtree.fit(X_train,y_train)\n    pred=dtree.predict(X_test)\n    \n    acc_entropy.append(accuracy_score(y_test,pred))\n    \n    max_depth.append(i)\n    \n    d=pd.DataFrame({'acc_gini': pd.Series(acc_gini),\n                   'acc_entropy': pd.Series(acc_entropy),\n                   'max_depth': pd.Series(max_depth)})\n    \nplt.plot('max_depth','acc_gini', data=d, label='gini')\nplt.plot('max_depth','acc_entropy', data=d, label='entropy')\nplt.xlabel('max_depth')\nplt.ylabel('accuracy')\nplt.grid()\nplt.legend()","10d6e855":"from sklearn.ensemble import RandomForestClassifier","895416fb":"rf=RandomForestClassifier()\nrf.fit(X_train,y_train)","21bea544":"rf_pred=rf.predict(X_test)","1aff2370":"print('Report: ',classification_report(y_test,rf_pred))","81af7d82":"confusion_matrix(y_test,rf_pred)","4e61f248":"## 4.2 Decision Tree","0d1c32ad":"# <center> Thank you! <\/center>","be917d90":"### criterion= 'entropy' and max _depth=11 gives the accuracy upto 95%","a155d168":"# 5. Result Comparison","529d8e7b":"credit limit, avg oepn to buy, total_trans_amt seems to have outliers","3590f4dc":"there are no null\/missing values SIGH!","ec3cee50":"# 3. Splitting data into train and test,scaling and oversampling","00506815":"We can see that the people with less income are the ones who uses credit card the most","5eeaf7de":"# 1.Importing Necessary Libraries","bda8e572":"We can see that there are more number of female who uses the card than males","369c0d3d":"Married people use the credit card more than single people followed by unknown.","a85a6ffc":"# 4. Model Building","6926563a":"## 4.1 Logistic Regression","6e39d7ad":"### 4.2.1 Decision Tree Pruning","5355308a":"<table >\n  <tr>\n    <th>Algorithm<\/th>\n    <th>Accuracy<\/th> \n  \n  <\/tr>\n  <tr>\n    <td>Logistic Regression<\/td>\n    <td>88.6 %<\/td>\n  <\/tr>\n    <tr>\n    <td>Decision Tree<\/td>\n    <td>94 %<\/td>\n  <\/tr>\n    <tr>\n    <td>Random Forest <\/td>\n    <td>97 %<\/td>\n  <\/tr>\n  \n<\/table>\n<br>\n<br>\n<center> Out of all Random Forest outperformed other algorithms with accuracy of 97%<center>","496731d1":"\n<table >\n  <tr>\n    <th>Accuracy before pruning<\/th>\n    <th>Accuracy after pruning<\/th> \n  \n  <\/tr>\n  <tr>\n    <td>93 %<\/td>\n    <td>94 %<\/td>\n  <\/tr>\n  \n<\/table>","b689da66":"## 4.3 Random Forest\n","c5c39486":"# 2. Exploratory Data Analysis","8b800adb":"<center> <img src='https:\/\/thecreditpros.com\/wp-content\/uploads\/2017\/05\/Credit-Offers-1.jpg'> <\/center>","0d2cd110":"Blue cardholders are maximum.","8613caf2":"We can see that graduate holds the maximum no of credit cards followed by high school ","f1d4a0c4":"We can see that there are very few rows for 'attrited customer' we might need to oversample the data"}}