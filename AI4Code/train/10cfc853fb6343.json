{"cell_type":{"b81c4afd":"code","cefa5fa3":"code","b4991569":"code","0098c32d":"code","6b47cdbb":"code","7017b912":"code","7b131fd0":"code","6cba41fa":"code","80d62907":"code","85459a52":"code","9c4acbdd":"code","bf03074e":"code","0752a110":"code","3138c374":"code","8876d156":"code","15b94146":"code","27e1e7d0":"code","553287b7":"code","4f3a6484":"code","65eb4f10":"code","dac8264d":"code","3e11b51f":"markdown","5702fd9b":"markdown","2d994101":"markdown","49f1608f":"markdown","26c4cd3e":"markdown","3542e445":"markdown"},"source":{"b81c4afd":"import os\nfrom PIL import Image\nimport numpy as np\nimport pandas as pd\nfrom matplotlib import pyplot as plt\nimport seaborn as sns","cefa5fa3":"BASE_PATH = '..\/input\/landmark-recognition-2021'\n\n@np.vectorize\ndef get_train_filepath(data_id):\n    return os.path.join(BASE_PATH, 'train', data_id[0], data_id[1], data_id[2], data_id + '.jpg')\n\n@np.vectorize\ndef get_test_filepath(data_id):\n    return os.path.join(BASE_PATH, 'test', data_id[0], data_id[1], data_id[2], data_id + '.jpg')\n\n@np.vectorize\ndef get_img_dim(filepath):\n    return Image.open(filepath).size","b4991569":"train_df = pd.read_csv('..\/input\/landmark-recognition-2021\/train.csv')\ntrain_df.head()","0098c32d":"train_df.shape","6b47cdbb":"%%time\n\ntrain_df[\"filepath\"] = get_train_filepath(train_df['id'])\ntrain_df[['width', 'height']] = np.array(get_img_dim(train_df[\"filepath\"])).T\ntrain_df['aspect_ratio'] = train_df['width'] \/ train_df['height']\ntrain_df.head()","7017b912":"train_df.isnull().sum()","7b131fd0":"train_df[[\"width\", \"height\", \"aspect_ratio\"]].describe().round(2)","6cba41fa":"plt.figure(figsize = (12, 8))\nsns.kdeplot(data = train_df[[\"width\", \"height\"]], common_norm = False)\nplt.xlabel(\"Pixels\", fontsize = 16)\nplt.ylabel(\"Density\", fontsize = 16)\nplt.legend([\"Width\", \"Height\"], loc = \"upper left\", fontsize = 16)\nplt.show()","80d62907":"plt.figure(figsize = (12, 8))\nsns.kdeplot(data = train_df[\"aspect_ratio\"], common_norm = False)\nplt.xlabel(\"Aspect Ratio\", fontsize = 16)\nplt.ylabel(\"Density\", fontsize = 16)\nplt.xticks(np.arange(int(min(train_df[\"aspect_ratio\"])), int(max(train_df[\"aspect_ratio\"])) + 1, 1.0))\nplt.show()","85459a52":"landmark_vc = train_df[[\"landmark_id\"]].value_counts()\nprint(f\"Total unique landmarks: {train_df[['landmark_id']].nunique().values[0]}\")\nprint(\"\\nLandmarks with most samples:\\n\")\nlandmark_vc.sort_values(ascending = False)[:10]","9c4acbdd":"print(\"\\nLandmarks with least samples:\\n\")\nlandmark_vc.sort_values()[:10]","bf03074e":"mask = landmark_vc >= len(train_df) * 0.001\nprint(f\"Count of landmarks with at least 0.1% of total samples: {landmark_vc[mask].count()}\")\nprint(f\"Count of landmarks with less than 0.1% of total samples: {landmark_vc[~mask].count()}\")","0752a110":"plt.figure(figsize = (12, 8))\nsns.kdeplot(data = landmark_vc, common_norm = False)\nplt.xlabel(\"Count\", fontsize = 16)\nplt.ylabel(\"Number of Samples\", fontsize = 16)\nplt.title(\"Most landmarks have very few samples\", fontsize = 20)\nplt.show()","3138c374":"test_df = pd.read_csv('..\/input\/landmark-recognition-2021\/sample_submission.csv')\ntest_df.head()","8876d156":"test_df.shape","15b94146":"%%time\n\ntest_df[\"filepath\"] = get_test_filepath(test_df['id'])\ntest_df[['width', 'height']] = np.array(get_img_dim(test_df[\"filepath\"])).T\ntest_df['aspect_ratio'] = test_df['width'] \/ test_df['height']\ntest_df.head()","27e1e7d0":"test_df.isnull().sum()","553287b7":"test_df[[\"width\", \"height\", \"aspect_ratio\"]].describe().round(2)","4f3a6484":"plt.figure(figsize = (12, 8))\nsns.kdeplot(data = test_df[[\"width\", \"height\"]], common_norm = False)\nplt.xlabel(\"Pixels\", fontsize = 16)\nplt.ylabel(\"Density\", fontsize = 16)\nplt.legend([\"Width\", \"Height\"], loc = \"upper left\", fontsize = 16)\nplt.show()","65eb4f10":"plt.figure(figsize = (12, 8))\nsns.kdeplot(data = test_df[\"aspect_ratio\"], common_norm = False)\nplt.xlabel(\"Aspect Ratio\", fontsize = 16)\nplt.ylabel(\"Density\", fontsize = 16)\nplt.xticks(np.arange(int(min(test_df[\"aspect_ratio\"])), int(max(test_df[\"aspect_ratio\"])) + 1, 1.0))\nplt.show()","dac8264d":"train_df.to_csv(\"train_df.csv\", index = False)\ntest_df.to_csv(\"test_df.csv\", index = False)","3e11b51f":"## Saving the outputs","5702fd9b":"## Google Landmark Recognition - Basic EDA","2d994101":"## Training Data","49f1608f":"## Testing Data","26c4cd3e":"### Imports","3542e445":"### Utility Functions"}}