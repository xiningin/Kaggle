{"cell_type":{"90d6399a":"code","c2ebb771":"code","d5498514":"code","f582ba02":"code","f66e9ca8":"code","2288b7eb":"code","9b959e4f":"code","c1fd1669":"code","edae3ba5":"code","c1fe2102":"code","958dd747":"code","6a00cb35":"code","73e2dfb2":"code","4c54d081":"code","588bed56":"markdown","5bd3ac35":"markdown","2aedb35e":"markdown","fd4a6eec":"markdown","db6ce3f6":"markdown","464e7b87":"markdown","247484d8":"markdown","f266660f":"markdown","593866e6":"markdown","7c6b55e5":"markdown","38155700":"markdown","5ae7930b":"markdown"},"source":{"90d6399a":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport plotly.graph_objects as go\nimport plotly.offline as py\nimport plotly.express as px\nfrom plotly.offline import iplot\n\nimport warnings\nwarnings.simplefilter(action='ignore', category=Warning)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","c2ebb771":"df = pd.read_csv('..\/input\/learnplatform-covid19-impact-on-digital-learning\/engagement_data\/5404.csv', encoding='utf8')\ndf.head()","d5498514":"#Code by HarshGupta57 https:\/\/www.kaggle.com\/harshgupta57\/freediving-world-records-eda\/notebook\n\nimport datetime","f582ba02":"#Code by HarshGupta57 https:\/\/www.kaggle.com\/harshgupta57\/freediving-world-records-eda\/notebook\n\ndf[['year','month','date']] = df['time'].apply(lambda x : pd.Series(str(x).split('-')))","f66e9ca8":"#Code by HarshGupta57 https:\/\/www.kaggle.com\/harshgupta57\/freediving-world-records-eda\/notebook\n\ndf.drop('time', inplace=True, axis =1)","2288b7eb":"df.head()","9b959e4f":"!pip install sweetviz","c1fd1669":"import sweetviz as sv","edae3ba5":"my_report = sv.analyze(df, target_feat='lp_id')","c1fe2102":"my_report.show_notebook()","958dd747":"df1 = sv.compare(df[100:], df[:100])\ndf1.show_html('Compare.html')","6a00cb35":"#Code by https:\/\/www.youtube.com\/watch?v=CCy0JAB_fbo\n\nreport =sv.analyze(\n    df, target_feat='lp_id'\n)","73e2dfb2":"%%capture\n!pip install plotnine","4c54d081":"from plotnine import *\n#from plotnine.data import mtcars\n\n\n(ggplot(df, aes('lp_id', 'engagement_index', color='month'))\n + geom_point()\n + stat_smooth(method='lm')\n + facet_wrap('~month'))","588bed56":"<center style=\"font-family:verdana;\"><h1 style=\"font-size:200%; padding: 10px; background: #FFB6C1;\"><b style=\"color:white;\">Parse Date, SweetViz and Plotnine<\/b><\/h1><\/center>","5bd3ac35":"#That's all for Now. Stick around and we'll be right back with more stuff. ","2aedb35e":"<h1><span class=\"label label-default\" style=\"background-color:#CD5C5C;border-radius:100px 100px; font-weight: bold; font-family:Garamond; font-size:20px; color:white; padding:10px\">Sweetviz<\/span><\/h1><br>","fd4a6eec":"![](https:\/\/plotnine.readthedocs.io\/en\/stable\/_images\/logo-180.png)plotnine.readthedocs.io","db6ce3f6":"#Unfortunately SweetViz is Not popping up in the viewer.","464e7b87":"#Create a Report","247484d8":"![](https:\/\/encrypted-tbn0.gstatic.com\/images?q=tbn:ANd9GcQt_DNEPaaxrs-rD_Hd4QXuBHIMC6_coUFx8g&usqp=CAU)youtube.com","f266660f":"#I will find out how to fix X-axis messy in the Plotnine above.","593866e6":"What is SweetViz? \n\nSweetviz is an open-source Python library that helps generate beautiful, highly detailed visualizations to Exploratory Data Analysis with a single line of code. It also generates a summarised report and can help create interactive dashboards as well. The output generated is a fully self-contained HTML application. The system builds reports around quickly, visualizing the target values and even comparing datasets. SweetViz aims to generate a quick analysis of target characteristics, training vs testing data, and other such data characterization tasks.\n\nhttps:\/\/analyticsindiamag.com\/step-by-step-guide-to-data-analysis-using-sweetviz\/","7c6b55e5":"#Target feature shoul be integer (till now)","38155700":"<h1><span class=\"label label-default\" style=\"background-color:#CD5C5C;border-radius:100px 100px; font-weight: bold; font-family:Garamond; font-size:20px; color:white; padding:10px\">Plotnine<\/span><\/h1><br>\n\nA Grammar of Graphics for Python\n\n\"Plotnine is an implementation of a grammar of graphics in Python, it is based on ggplot2. The grammar allows users to compose plots by explicitly mapping data to the visual objects that make up the plot.\"\n\n\"Plotting with a grammar is powerful, it makes custom (and otherwise complex) plots easy to think about and then create, while the simple plots remain simple.\"\n\nhttps:\/\/plotnine.readthedocs.io\/en\/stable\/\n\nggplot\/plotnine are both declarative, while matplotlib is imperative.\n\n\"As for data analysis, Python\u2019s pandas library is very similar to dplyr, it just has slightly different names for functions (eg summarize versus aggregate but both use groupby) and pandas uses . while dplyr tends to use %>% to apply the output of one function to the input of another.\"\n\nhttp:\/\/aeturrell.com\/2020\/10\/24\/10-lesser-known-Python-packages\/","5ae7930b":"#Create Compare function \n\nCompare() function of Sweetviz is used for comparison of the dataset"}}