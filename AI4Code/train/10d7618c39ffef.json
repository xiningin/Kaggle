{"cell_type":{"334ccfb7":"code","83b84c18":"code","cea35a7a":"code","cb696127":"code","08f169ba":"code","90ec90d0":"code","2e0a7a69":"code","7ca0c82d":"code","58f81038":"code","a913350d":"code","0e90579a":"code","ac840e35":"code","a87cf663":"code","f26d2669":"code","6609ed1e":"code","98939133":"code","632aa757":"code","feaa4197":"code","10f3a5ee":"code","a64cc5f2":"code","275be6f4":"code","3fdf9666":"code","060e0723":"code","0055b9f1":"markdown"},"source":{"334ccfb7":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))","83b84c18":"import seaborn as sns\nimport io\nimport requests\nimport re\nimport warnings\nimport os\nprint(os.listdir(\"..\/input\"))\nimport plotly.express as px\nimport plotly.graph_objects as go\nimport plotly.io as pio\npio.templates\n\nimport matplotlib.pyplot as plt\n%matplotlib inline\nplt.style.use('seaborn-notebook')\nfrom matplotlib.ticker import StrMethodFormatter\nfrom sklearn.preprocessing import StandardScaler, MinMaxScaler, LabelBinarizer","cea35a7a":"train_data = pd.read_csv(\"\/kaggle\/input\/titanic\/train.csv\")\ntrain_data.head()","cb696127":"test_data = pd.read_csv(\"\/kaggle\/input\/titanic\/test.csv\")\ntest_data.head()","08f169ba":"A1= train_data[train_data['Pclass']==1]\nA2= train_data[train_data['Pclass']==2]\nA3= train_data[train_data['Pclass']==3]\nClasse1=len(A1)\nClasse2=len(A2)\nClasse3=len(A3)\nprint(\"Nella prima classe ci sono \",Classe1,\"passeggeri\")\nprint(\"Nella seconda classe ci sono \",Classe2,\"passeggeri\")\nprint(\"Nella terza classe ci sono \",Classe3,\"passeggeri\")","90ec90d0":"C1= train_data[train_data['Embarked']==\"C\"]\nSC1=C1[C1[\"Survived\"]==1]\nc1=C1[C1[\"Pclass\"]==1]\nc2=C1[C1[\"Pclass\"]==2]\nc3=C1[C1[\"Pclass\"]==3]\nQ1= train_data[train_data['Embarked']==\"Q\"]\nSQ1=Q1[Q1[\"Survived\"]==1]\nq1=Q1[Q1[\"Pclass\"]==1]\nq2=Q1[Q1[\"Pclass\"]==2]\nq3=Q1[Q1[\"Pclass\"]==3]\nS1= train_data[train_data['Embarked']==\"S\"]\nSS1=S1[S1[\"Survived\"]==1]\ns1=S1[S1[\"Pclass\"]==1]\ns2=S1[S1[\"Pclass\"]==2]\ns3=S1[S1[\"Pclass\"]==3]\nSC1perc=len(SC1)\/len(C1)*100\nSQ1perc=len(SQ1)\/len(Q1)*100\nSS1perc=len(SS1)\/len(S1)*100","2e0a7a69":"labels = ['C', 'S', 'Q']\ny = [SC1perc,SQ1perc, SS1perc]\nesplodi = [0, 0, 0.1]\n\nfig, ax1 = plt.subplots()\nax1.pie(y, labels=labels, explode=esplodi, autopct='%1.1f%%', startangle=90)\nax1.set_title(\"Percentuale di sopravvissuti per citt\u00e0\")\n\nfig.tight_layout()\n#fig.show()","7ca0c82d":"sns.set(style=\"darkgrid\")\nsns.countplot( x='Survived', data=train_data, hue=\"Pclass\", palette=\"Set3\");","58f81038":"sns.set(style=\"darkgrid\")\nsns.countplot( x='Survived', data=train_data, hue=\"Embarked\", palette=\"Set2\");","a913350d":"sns.set(style=\"darkgrid\")\nsns.countplot( x='Embarked', data=train_data, hue=\"Pclass\", palette=\"Set1\");","0e90579a":"df = pd.read_csv('..\/input\/titanic\/train.csv')\nfig = px.scatter_3d(df, x='PassengerId', y='Survived', z='Age',\n                    color='Age')\nfig.show()","ac840e35":"sns.countplot(hue='Pclass', x='Survived', data=train_data, palette=\"Set1\");","a87cf663":"women = train_data.loc[train_data.Sex == 'female'][\"Survived\"]\nrate_women = sum(women)\/len(women)\n\nprint(\"% of women who survived:\", rate_women)","f26d2669":"men = train_data.loc[train_data.Sex == 'male'][\"Survived\"]\nrate_men = sum(men)\/len(men)\n\nprint(\"% of men who survived:\", rate_men)","6609ed1e":"from sklearn.ensemble import RandomForestClassifier\n\ny = train_data[\"Survived\"]\n\nfeatures = [\"Pclass\", \"Sex\", \"SibSp\", \"Parch\", \"Embarked\",]\nX = pd.get_dummies(train_data[features])\nX_test = pd.get_dummies(test_data[features])\n\nmodel = RandomForestClassifier(n_estimators=100, max_depth=5, random_state=1)\nmodel.fit(X, y)\npredictions = model.predict(X_test)\n\nGoodPrediction = pd.DataFrame({'PassengerId': test_data.PassengerId,\"Pclass\": test_data.Pclass,\"Sex\": test_data.Sex,\"SibSp\": test_data.SibSp,\"Parch\": test_data.Parch,\"Embarked\": test_data.Embarked,\"Age\": test_data.Age, 'Survived': predictions})\nGoodPrediction.to_csv('my_submission.csv', index=False)\nprint(GoodPrediction)","98939133":"A = train_data[\"Survived\"]\n\nfeatures = [\"Sex\"]\nB = pd.get_dummies(train_data[features])\nB_test = pd.get_dummies(test_data[features])\n\nmodel = RandomForestClassifier(n_estimators=100, max_depth=5, random_state=1)\nmodel.fit(B, A)\npredictions = model.predict(B_test)\n\nBadPrediction = pd.DataFrame({'PassengerId': test_data.PassengerId,\"Pclass\": test_data.Pclass,\"Sex\": test_data.Sex,\"SibSp\": test_data.SibSp,\"Parch\": test_data.Parch,\"Embarked\": test_data.Embarked,\"Age\": test_data.Age, 'Survived': predictions})\nprint(BadPrediction)","632aa757":"A = train_data[\"Survived\"]\n\nfeatures = [\"Pclass\"]\nB = pd.get_dummies(train_data[features])\nB_test = pd.get_dummies(test_data[features])\n\nmodel = RandomForestClassifier(n_estimators=100, max_depth=5, random_state=1)\nmodel.fit(B, A)\npredictions = model.predict(B_test)\n\nPBadPrediction = pd.DataFrame({'PassengerId': test_data.PassengerId,\"Pclass\": test_data.Pclass,\"Sex\": test_data.Sex,\"SibSp\": test_data.SibSp,\"Parch\": test_data.Parch,\"Embarked\": test_data.Embarked,\"Age\": test_data.Age, 'Survived': predictions})\nprint(PBadPrediction)","feaa4197":"A = train_data[\"Survived\"]\n\nfeatures = [\"SibSp\"]\nB = pd.get_dummies(train_data[features])\nB_test = pd.get_dummies(test_data[features])\n\nmodel = RandomForestClassifier(n_estimators=100, max_depth=5, random_state=1)\nmodel.fit(B, A)\npredictions = model.predict(B_test)\n\nSBadPrediction = pd.DataFrame({'PassengerId': test_data.PassengerId,\"Pclass\": test_data.Pclass,\"Sex\": test_data.Sex,\"SibSp\": test_data.SibSp,\"Parch\": test_data.Parch,\"Embarked\": test_data.Embarked,\"Age\": test_data.Age, 'Survived': predictions})\nprint(SBadPrediction)","10f3a5ee":"print(sum(GoodPrediction['Survived']))\nprint(sum(PBadPrediction['Survived']))\nprint(sum(SBadPrediction['Survived']))\nprint(sum(BadPrediction['Survived']))","a64cc5f2":"sns.countplot(hue='SibSp', x='Survived', data=GoodPrediction, palette=\"Set1\");","275be6f4":"sns.countplot(hue='Pclass', x='Survived', data=BadPrediction, palette=\"Set1\");","3fdf9666":"sns.countplot(hue='Pclass', x='Survived', data=PBadPrediction, palette=\"Set1\");","060e0723":"sns.countplot(hue='SibSp', x='Survived', data=SBadPrediction, palette=\"Set1\");","0055b9f1":"PassengerId\nSurvived"}}