{"cell_type":{"40ba1d72":"code","9c0657d5":"code","76d132ca":"code","101cfbf1":"code","f8a05b2e":"code","c2eb993c":"code","b28716b5":"markdown","4164b6ff":"markdown","da253d53":"markdown","42f1cc2a":"markdown"},"source":{"40ba1d72":"!pip install dlib","9c0657d5":"!pip install imutils","76d132ca":"import os\nimport cv2\nimport dlib\nimport imutils\nfrom imutils import face_utils\nimport matplotlib.pyplot as plt\n\nimage_path = \"..\/input\/lfw-dataset\/lfw-deepfunneled\/lfw-deepfunneled\/Chip_Knight\/Chip_Knight_0001.jpg\"\nfilter_path = \"..\/input\/dlib-landmarks-predictor\/shape_predictor_68_face_landmarks.dat\"\n\nprint(dlib.__version__)\nprint(imutils.__version__)","101cfbf1":"detector = dlib.get_frontal_face_detector()\npredictor = dlib.shape_predictor(filter_path)","f8a05b2e":"image = cv2.imread(image_path)\nimage = imutils.resize(image, width=500)\nimage = cv2.cvtColor(image, cv2.COLOR_BGR2RGB)\n \n# detect faces in the image\nrects = detector(image, 1)","c2eb993c":"for (i, rect) in enumerate(rects):\n    shape = predictor(image, rect)\n    shape = face_utils.shape_to_np(shape)\n    \n    (x, y, w, h) = face_utils.rect_to_bb(rect)\n    cv2.rectangle(image, (x, y), (x + w, y + h), (0, 255, 0), 3)\n\n    for (x, y) in shape:\n        cv2.circle(image, (x, y), 1, (0, 255, 0), 3)\n\nplt.figure(figsize=(10,10))\nplt.imshow(image)\nplt.xticks([])\nplt.yticks([])\nplt.show()","b28716b5":"## 2. Some basic steps","4164b6ff":"## 1. Install libraries which are not available","da253d53":"## Face landmark detection using dlib, OpenCV\n\n- In this task of facial landmarks detection, firstly, the face has to be detected in a given image then the face has to be analysed to obtain the face landmarks\/keypoints.\n- Facial landmarks\/keypoints are useful to know the alignment of face and face features positions.\n\n### Reference(s):\n- https:\/\/www.pyimagesearch.com\/2017\/04\/03\/facial-landmarks-dlib-opencv-python\/","42f1cc2a":"## 3. Load image for fetching its facial landmarks"}}