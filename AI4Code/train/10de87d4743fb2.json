{"cell_type":{"22d15d34":"code","7d30d8a7":"code","a11963c3":"code","24f6c434":"code","8ec951b6":"code","efd412e2":"markdown","1ee318c0":"markdown","c53da758":"markdown","56e00725":"markdown"},"source":{"22d15d34":"import numpy as np # linear algebra\nimport pandas as pd # data processing\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n    break\n","7d30d8a7":"from tensorflow.keras.layers import Dense, Flatten, Conv2D\nfrom tensorflow.keras.losses import sparse_categorical_crossentropy\nfrom tensorflow.keras.optimizers import Adam\nfrom tensorflow.keras.preprocessing.image import ImageDataGenerator\nimport os\nimport yaml\nfrom tensorflow.keras.models import Sequential\n\n\ndef create_model(config):\n\n    input_shape = (config['img_width'], config['img_height'], config['img_num_channels'])\n\n    model = Sequential()\n    model.add(Conv2D(16, kernel_size=(5, 5), activation='relu', input_shape=input_shape))\n    model.add(Conv2D(32, kernel_size=(5, 5), activation='relu'))\n    model.add(Conv2D(64, kernel_size=(5, 5), activation='relu'))\n    model.add(Conv2D(128, kernel_size=(5, 5), activation='relu'))\n    model.add(Flatten())\n    model.add(Dense(16, activation='relu'))\n    model.add(Dense(config['no_classes'], activation='softmax'))\n\n    print(model.summary())\n    return model\n\n\ndef train(train_datagen, test_datagen, config):\n\n    loss_function = sparse_categorical_crossentropy\n    optimizer = Adam()\n\n    model = create_model(config=config)\n\n    model.compile(loss=loss_function,\n                  optimizer=optimizer,\n                  metrics=['accuracy'])\n\n    model.fit(\n        train_datagen,\n        epochs=config['no_epochs'],\n        validation_data=test_datagen,\n        shuffle=True)\n\n    return model\n\n\ndef run(config):\n\n    train_datagen = ImageDataGenerator(\n        rescale=1. \/ 255\n    )\n    train_datagen = train_datagen.flow_from_directory(\n        config['train_path'],\n        save_to_dir=config['tmp_train_dir'],\n        save_format='jpeg',\n        batch_size=config['batch_size'],\n        target_size=(25, 25),\n        class_mode='sparse')\n\n    \n    test_datagen = ImageDataGenerator(\n        rescale=1. \/ 255\n    )\n    test_datagen = test_datagen.flow_from_directory(\n        config['test_path'],\n        save_to_dir=config['tmp_test_dir'],\n        save_format='jpeg',\n        batch_size=config['batch_size'],\n        target_size=(25, 25),\n        class_mode='sparse')\n    \n    model = train(train_datagen, test_datagen, config=config)\n    test(config=config, test_datagen=test_datagen, model=model)\n\n\ndef test(config, test_datagen, model):\n\n    result = model.evaluate(test_datagen, verbose=1)\n    model.save(config['model_path'])\n    print(f\"Test loss: {result[0]}\")\n    print(f\"Test acc: {result[1]}\")\n","a11963c3":"config = {\n    'train_path': '\/kaggle\/input\/fruits\/fruits-360_dataset\/fruits-360\/Training',\n    'test_path': '\/kaggle\/input\/fruits\/fruits-360_dataset\/fruits-360\/Test',\n    'no_epochs': 25,\n    'img_width': 25,\n    'img_height': 25,\n    'img_num_channels': 3,\n    'no_classes': 131,\n    'batch_size': 128,\n    'train_dir': '\/kaggle\/input\/fruits\/fruits-360_dataset\/train',\n    'test_dir': '\/kaggle\/input\/fruits\/fruits-360_dataset\/test',\n    'tmp_train_dir': '\/tmp_train_dir',\n    'tmp_test_dir': '\/tmp_train_dir',\n    'model_path': '\/model',\n}","24f6c434":"os.makedirs(config['tmp_train_dir'], exist_ok=True)\nos.makedirs(config['tmp_test_dir'], exist_ok=True)\nos.makedirs(config['model_path'], exist_ok=True)\n","8ec951b6":"run(config=config)","efd412e2":" **Import libraries and data**","1ee318c0":"**Define and train model**","c53da758":"# SCO411: NEURAL NETWORKS ASSIGNMENT","56e00725":"**Run model**"}}