{"cell_type":{"0d5b05aa":"code","85fac0e7":"code","d886406a":"code","0942ad35":"code","8de4870e":"code","dd5e5aa5":"code","97cdaf7c":"code","0754847b":"code","4825b864":"code","adcf39a5":"code","ec9a36ce":"code","d1714720":"code","90bf0394":"code","64aecf48":"code","46f4231c":"code","3dfdf9e9":"code","ceeafc42":"code","34f91dba":"code","ebf73722":"code","b35e1b0c":"code","298a1d50":"code","15cd7cb8":"code","7b1eb556":"code","78e14992":"code","96824714":"code","223c6751":"code","012c4a04":"code","522ef22c":"code","5fc0ca3b":"code","3f2104af":"code","11c6ec96":"code","3718dfd3":"code","a15471dd":"code","385ec4e8":"markdown","9e049858":"markdown","4f2cf423":"markdown","1dd1697b":"markdown","9b20e61a":"markdown","3cc78fd9":"markdown","c94c317b":"markdown","7da2d978":"markdown","0def179f":"markdown","099f2303":"markdown","1af2d72f":"markdown","e106e714":"markdown","4199e797":"markdown","9861e982":"markdown","e0257943":"markdown","600cba42":"markdown"},"source":{"0d5b05aa":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np\nimport pandas as pd \nfrom matplotlib import pyplot as plt\nimport seaborn as sns\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.ensemble import RandomForestClassifier\nimport xgboost as xb\nfrom sklearn.linear_model import LogisticRegression\nimport warnings \nwarnings.filterwarnings('ignore')\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n","85fac0e7":"train_data=pd.read_csv('\/kaggle\/input\/titanic\/train.csv')\ntest_data=pd.read_csv('\/kaggle\/input\/titanic\/test.csv')","d886406a":"train_data.shape","0942ad35":"train_data.describe()","8de4870e":"train_data.columns","dd5e5aa5":"train_data.info()","97cdaf7c":"train_data.isnull().sum()","0754847b":"test_data.isnull().sum()","4825b864":"sns.distplot(train_data['Age'],kde=True)","adcf39a5":"train_data['Age'] = train_data['Age'].fillna(30)","ec9a36ce":"train_data = train_data.drop(['Cabin'],axis=1)\ntest_data = test_data.drop(['Cabin'],axis=1)","d1714720":"train_data['Embarked'].value_counts()","90bf0394":"train_data['Embarked']=train_data['Embarked'].fillna('S')","64aecf48":"train_data['Sex'] = pd.get_dummies(train_data['Sex'])\ntest_data['Sex'] = pd.get_dummies(test_data['Sex'])\ntrain_data['Fare']=train_data['Fare'].astype('int32')\ntrain_data['Embarked'] = pd.factorize(train_data['Embarked'])[0]\ntest_data['Embarked'] = pd.factorize(test_data['Embarked'])[0]\ntest_data['Fare']=test_data['Fare'].fillna(test_data['Fare'].mean())\ntest_data['Fare']=test_data['Fare'].astype('int32')","46f4231c":"sns.heatmap(train_data.corr(),annot=True,linewidths=0.5)","3dfdf9e9":"sns.countplot(x=train_data['Pclass'],hue=train_data['Survived'])","ceeafc42":"sns.countplot(x=train_data['Embarked'],hue=train_data['Survived'])","34f91dba":"sns.countplot(x=train_data['Age'],hue=train_data['Survived'])","ebf73722":"for i in range(0,len(train_data)):\n    if train_data['Age'][i] <= 15:\n        train_data['Age'][i] = 0\n    elif (train_data['Age'][i] > 15) & (train_data['Age'][i] <=35):\n        train_data['Age'][i]=1\n    elif (train_data['Age'][i] > 35) & (train_data['Age'][i] <=55):\n        train_data['Age'][i]=2\n    elif (train_data['Age'][i] > 55) & (train_data['Age'][i] <=75):\n        train_data['Age'][i]=3\n    else:\n        train_data['Age'][i]=4","b35e1b0c":"for i in range(0,len(test_data)):\n    if test_data['Age'][i] <= 15:\n        test_data['Age'][i] = 0\n    elif (test_data['Age'][i] > 15) & (test_data['Age'][i] <=26):\n        test_data['Age'][i]=1\n    elif (test_data['Age'][i] > 35) & (test_data['Age'][i] <=55):\n        test_data['Age'][i]=2\n    elif (test_data['Age'][i] > 55) & (test_data['Age'][i] <=75):\n        test_data['Age'][i]=3\n    else:\n        test_data['Age'][i]=4","298a1d50":"sns.countplot(x=train_data['Fare'],hue=train_data['Pclass'])","15cd7cb8":"for i in range(0,len(train_data)):\n    if train_data['Fare'][i] <= 50:\n        train_data['Fare'][i] = 3\n    elif (train_data['Fare'][i] > 50) & (train_data['Fare'][i] <=150 ):\n        train_data['Fare'][i]=2\n    else:\n        train_data['Fare'][i]=1","7b1eb556":"for i in range(0,len(test_data)):\n    if test_data['Fare'][i] <= 50:\n        test_data['Fare'][i] = 3\n    elif (test_data['Fare'][i] > 50) & (test_data['Fare'][i] <=150 ):\n        test_data['Fare'][i]=2\n    else:\n        test_data['Fare'][i]=1","78e14992":"train_data['Fam'] = train_data['Parch'] + train_data['SibSp']\ntest_data['Fam'] = test_data['Parch'] + test_data['SibSp']","96824714":"sns.countplot(train_data['Fam'])","223c6751":"for i in range(0,len(train_data)):\n    if train_data['Fam'][i] == 0:\n        train_data['Fam'][i] = 0\n    elif (train_data['Fam'][i] >= 1) & (train_data['Fam'][i] <=3):\n        train_data['Fam'][i]=1\n    elif (train_data['Fam'][i] >= 4) & (train_data['Fam'][i] <=6):\n        train_data['Fam'][i]=2\n    elif (train_data['Fam'][i] >= 7) & (train_data['Fam'][i] <=9):\n        train_data['Fam'][i]=3\n    else:\n        train_data['Fam'][i]=4","012c4a04":"for i in range(0,len(test_data)):\n    if test_data['Fam'][i] == 0:\n        test_data['Fam'][i] = 0\n    elif (test_data['Fam'][i] >= 1) & (test_data['Fam'][i] <=3):\n        test_data['Fam'][i]=1\n    elif (test_data['Fam'][i] >= 4) & (test_data['Fam'][i] <=6):\n        test_data['Fam'][i]=2\n    elif (test_data['Fam'][i] >= 7) & (test_data['Fam'][i] <=9):\n        test_data['Fam'][i]=3\n    else:\n        test_data['Fam'][i]=4","522ef22c":"X = train_data[['Sex','Pclass','Age','Parch','Fam','Fare','Embarked']]\ny = train_data[['Survived']]\nX_test = test_data[['Sex','Pclass','Age','Parch','Fam','Fare','Embarked']]\ntrain_X , test_X , train_y , test_y = train_test_split(X,y,test_size = 0.2,random_state=0)","5fc0ca3b":"classifier = RandomForestClassifier(n_estimators=500,max_depth=3)\nclassifier.fit(train_X,train_y)\nclassifier.score(test_X,test_y)","3f2104af":"xgb_model = xb.XGBClassifier(base_score=0.5,n_estimators=1000, learning_rate=0.05)\nxgb_model.fit(train_X, train_y, early_stopping_rounds=5, \n             eval_set=[(test_X, test_y)], verbose=False)\nxgb_model.score(test_X,test_y)","11c6ec96":"log_reg = LogisticRegression()\nlog_reg.fit(train_X,train_y)\nlog_reg.score(test_X,test_y)","3718dfd3":"predictions = xgb_model.predict(X_test)","a15471dd":"output = pd.DataFrame({'PassengerId': test_data.PassengerId, 'Survived': predictions})\noutput.to_csv('submission.csv', index=False)","385ec4e8":"Combining SibSp and Parch into a single feature Fam","9e049858":"# **Selecting X and Y and splitting the dataset**","4f2cf423":"**Lets have a look at**\n\n* Shape of the dataset\n* Description\n* Columns \n* Dataypes of columns","1dd1697b":"# **Importing libraries**","9b20e61a":"# **Training on different models**","3cc78fd9":"Embarked is a categorical feature which has only 2 null values. Hence the null values will be filled by calculating the mode.","c94c317b":"Plotting out the distribution of Age.","7da2d978":"Converting Fare into 3 groups based on above visualization ","0def179f":"# **Making predictions and saving into output csv file**","099f2303":"# **Reading input csv files**","1af2d72f":"Converting Age into 5 groups as follows","e106e714":"# **Data Preprocessing**","4199e797":"Plotting graphs to get insights  ","9861e982":"Dividing Fam into 5 groups as follows","e0257943":"Out of 871 entries, 677 entries of Cabin are null. Hence it is better to drop that column.","600cba42":"Converting categorical features Embarked and Sex into numerical and float variable Fare into int "}}