{"cell_type":{"819381b3":"code","74e400e8":"code","2952e7f8":"code","b0f97e6d":"code","754bdf19":"code","e4f07b6e":"code","d1e11013":"code","2312b3df":"code","6fb6f508":"code","ec7cc1b5":"code","b379d8a0":"code","ffcb482f":"code","4f20ad51":"code","fa333150":"code","63ac8e82":"code","4329adbd":"code","0af7ce1f":"code","a7762ab1":"code","6e9897c1":"code","f76cfe5c":"code","82e9e6ae":"code","dae99e59":"code","463b3e39":"code","684d91bb":"markdown","b1534b99":"markdown","6d6d72d1":"markdown","22f8e89e":"markdown","dc8b0f1b":"markdown","d2b0fad5":"markdown","13ff7611":"markdown","089d2516":"markdown","3e91a1f1":"markdown","d3dc9005":"markdown","620839ae":"markdown","8776060d":"markdown","75bbd230":"markdown","78250dbf":"markdown","e3153e06":"markdown","38ff9b21":"markdown","38c1af02":"markdown","64f8096d":"markdown","271a3e47":"markdown","c8233e54":"markdown","903b36ec":"markdown","7646004a":"markdown","614c6a14":"markdown","e6115cfa":"markdown","33a83d05":"markdown"},"source":{"819381b3":"import pandas as pd\n!pip install openpyxl","74e400e8":"pd.set_option('display.max_columns', None)\npd.set_option('display.width', 500)","2952e7f8":"movie = pd.read_csv('..\/input\/movielens-20m-dataset\/movie.csv')\nrating = pd.read_csv('..\/input\/movielens-20m-dataset\/rating.csv')\ndf = movie.merge(rating, how=\"left\", on=\"movieId\")\ndf.head()","b0f97e6d":"comment_counts = pd.DataFrame(df[\"title\"].value_counts())\ncomment_counts","754bdf19":"rare_movies = comment_counts[comment_counts[\"title\"] <= 1000].index\ncommon_movies = df[~df[\"title\"].isin(rare_movies)]","e4f07b6e":"user_movie_df = common_movies.pivot_table(index=[\"userId\"], columns=[\"title\"], values=\"rating\") \nuser_movie_df.head()","d1e11013":"random_user=28941","2312b3df":"random_user_df = user_movie_df[user_movie_df.index == random_user]\n\nmovies_watched = random_user_df.columns[random_user_df.notna().any()].tolist()\n\nlen(movies_watched)","6fb6f508":"movies_watched_df = user_movie_df[movies_watched]\nmovies_watched_df.shape[0]","ec7cc1b5":"user_movie_count = movies_watched_df.T.notnull().sum()\nuser_movie_count","b379d8a0":"user_movie_count = user_movie_count.reset_index()\nuser_movie_count.columns = [\"userId\", \"movie_count\"]\nuser_movie_count","ffcb482f":"user_movie_count[user_movie_count[\"movie_count\"] ==33].count()","4f20ad51":"users_same_movies = user_movie_count[user_movie_count[\"movie_count\"] > 20][\"userId\"]\nusers_same_movies.head()","fa333150":"final_df = pd.concat([movies_watched_df[movies_watched_df.index.isin(users_same_movies)],\n                      random_user_df[movies_watched]])\n\nfinal_df.head()","63ac8e82":"final_df.T.corr()","4329adbd":"corr_df = final_df.T.corr().unstack().sort_values().drop_duplicates()\ncorr_df = pd.DataFrame(corr_df, columns=[\"corr\"])\ncorr_df.index.names = ['user_id_1', 'user_id_2']\ncorr_df = corr_df.reset_index()\ncorr_df.head()","0af7ce1f":"top_users = corr_df[(corr_df[\"user_id_1\"] == random_user) & (corr_df[\"corr\"] >= 0.65)][\n    [\"user_id_2\", \"corr\"]].reset_index(drop=True)\n\ntop_users = top_users.sort_values(by='corr', ascending=False)\ntop_users.rename(columns={\"user_id_2\": \"userId\"}, inplace=True)\ntop_users","a7762ab1":"rating = pd.read_csv('..\/input\/movielens-20m-dataset\/rating.csv')\ntop_users_ratings = top_users.merge(rating[[\"userId\", \"movieId\", \"rating\"]], how='inner')\ntop_users_ratings.head()","6e9897c1":"top_users_ratings = top_users_ratings[top_users_ratings[\"userId\"] != random_user]","f76cfe5c":"top_users_ratings['weighted_rating'] = top_users_ratings['corr'] * top_users_ratings['rating']\ntop_users_ratings.head()","82e9e6ae":"top_users_ratings.groupby('movieId').agg({\"weighted_rating\": \"mean\"})","dae99e59":"recommendation_df = top_users_ratings.groupby('movieId').agg({\"weighted_rating\": \"mean\"})\n\nrecommendation_df = recommendation_df.reset_index()\n\nrecommendation_df[[\"movieId\"]].nunique()","463b3e39":"movies_to_be_recommend = recommendation_df[recommendation_df[\"weighted_rating\"] > 3.7].sort_values(\"weighted_rating\", ascending=False)\nmovie = pd.read_csv('..\/input\/movielens-20m-dataset\/movie.csv')\nmovies_to_be_recommend.merge(movie[[\"movieId\", \"title\"]])","684d91bb":"Recommendation scores were created for 4074 movies.","b1534b99":"## Step 1: Preparing the Data Set","6d6d72d1":"We will create the correlation df","22f8e89e":"## Step 4: Identifying Users with the Most Similar Behaviors to the User to Suggest","dc8b0f1b":"In the DataFrame we have userIds in rows and  titles in the columns. That means when we select this user from the DateFrame and select the titles which are not NaN, we can obtain the movies watched by the selected user","d2b0fad5":"As a result, we got movie recommendations for the selected user. \nHope our user will  have fun by watching ;)","13ff7611":"Here the selected user is included, we need to remove that","089d2516":"We want to find users who watched the same 33 movies as the user.\n\"movies_watched\" contains movies watched by the selected user. Users who have rated any of the 33 movies here are included in this dataset.","3e91a1f1":"## Introduction\n\nYou have left behind a very tiring day and now you want to watch a good movie. This time period that you want to spend with pleasure can be challenging with the abundance of movie options. We are lucky that recommender systems exist for this. \n\nA user-based collaborative filtering recommendation system for preferences in movie selection could make predictions about which movie a user should like given a partial list of that user's tastes.\n\nUser-based collaborative filtering is a method of making predictions about the interests of a user by collecting preferences of many other users. The underlying assumption of this approach is that if a User-1 has the same opinion as a User-3 on an issue, User-1 is more likely to have User-3's opinion on a different issue than that of a randomly chosen person.  \n\n\n![image.png](attachment:d4a7d843-6783-4f74-a7e6-63e4fe0de2cf.png)\n\n**Context**\n\nThe datasets describe ratings and free-text tagging activities from MovieLens, a movie recommendation service. It contains 20000263 ratings and 465564 tag applications across 27278 movies. These data were created by 138493 users between January 09, 1995 and March 31, 2015. This dataset was generated on October 17, 2016.\n\nUsers were selected at random for inclusion. All selected users had rated at least 20 movies.\n\n**Business Problem**\n\nMake a movie recommendation using the user-based recommender method for the user whose ID is given.\n\n\n\n**Attribute Information**\n\nThe two files from the data will be used in this study as rating.csv and movie.csv\n\nrating.csv that contains ratings of movies by users:\n\n*     userId \n*     movieId \n*     rating \n*     timestamp\n\nmovie.csv that contains movie information:\n\n*     movieId \n*     title\n*     genres\n\n**Task Details**\n\n**Step 1:** Preparing the Data Set\n\n**Step 2:** Determining the Movies Watched by the User to Suggest\n\n**Step 3:** Accessing Data and Ids of Other Users Watching Same Movies\n\n**Step 4:** Identifying Users with the Most Similar Behaviors to the User to Suggest\n\n**Step 5:** Calculating the Weighted Average Recommendation Score","d3dc9005":"## Step 3: Getting Data and Ids of Other Users Watching Same Movies","620839ae":"## Step 2: Determining the Movies Watched by the Selected User","8776060d":"Now we have common movies to use, but we need a user-item rating matrix with the titles in columns and userIds in rows.","75bbd230":"The user has watched 33 movies ","78250dbf":"## Step 5: Calculating the Weighted Average Recommendation Score","e3153e06":"There are 17 other users watching the same 33 movies as the selected user.\nWe will select users who watched 20 and more common movies ","38ff9b21":"All users and the number of movies that watched by them","38c1af02":"As you can see, some movies have less comments. In this case, it would be a right step to determine a threshold value and eliminate the films with less comments.","64f8096d":"We found the correlations, but we need to put them together with the movies.","271a3e47":"We found the correlation showing the similarity of likes for each person with another person.\nHere is all the data, including low values and negative values. We need to filter this.\n\nUsers with a correlation of 65 percent or more with our user:","c8233e54":"We gather the data of our user and other users who watched 20 movies in common.","903b36ec":"First we will select a user. The recommendation system will eventually make suggestions to that user.","7646004a":"We get the Transpose so that the users are in the column.","614c6a14":"Even if the correlation of the two people is high, the ratings they give to the movies may be different. In this case, the problem arises whether we should make the recommendation according to correlation or rating. To eliminate this, a score containing the effect of both is used.","e6115cfa":"**Calculation of weighted_rating**","33a83d05":"Here, weighted_ratings from all users for the movieId = 1 are included.\nTo make a recommendation, it should be averaged over the movie."}}