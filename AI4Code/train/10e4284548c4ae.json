{"cell_type":{"1ee4f817":"code","023a897b":"code","bad42828":"code","bfff34a9":"code","a562f7a6":"code","fd1d3191":"code","d16b15ff":"code","1ef7b558":"code","b11a49fd":"code","3026d0d6":"code","ec9da462":"code","fe1ca5ba":"code","fd480f56":"code","2ad9c296":"code","72e02d7b":"code","36ad4fc8":"code","968282ea":"code","6d617c52":"code","a8131401":"code","070cd299":"code","d66592ed":"code","ebeb2346":"code","ef740bad":"markdown","cb2389a4":"markdown","2b496b4e":"markdown","e87ee7b4":"markdown","16c8a6c7":"markdown","413da97d":"markdown","1daa1166":"markdown","24d6fabe":"markdown","51371216":"markdown","61178290":"markdown","6a65727d":"markdown","de54cf6c":"markdown","73094636":"markdown","54422256":"markdown","d31da837":"markdown","cbaffa7b":"markdown","5787bd2a":"markdown","7cb4c369":"markdown","9e546171":"markdown","bfb12e18":"markdown","583f32e8":"markdown"},"source":{"1ee4f817":"# Importing field\n# This section same with 'Chapter 1' data adjusting section.\n# With some short cuts ;)\n\nimport numpy as np\nimport pandas as pd\nfrom matplotlib import pyplot as plt\n\n# Reading...\ndata_set = pd.read_csv('..\/input\/voice.csv')\n\n# Converting... ( String to boolean)\ndata_set['label'] = [0 if each == 'male' else 1 for each in data_set['label']]\n\n# Normalizing...\ndata_set = (data_set - np.min(data_set)) \/ (np.max(data_set) - np.min(data_set))\n\n# Separeting...\nlabel = data_set['label'].values\n\n# Dropping...\ndata_set = data_set.drop(columns=['label'])\n\ndata_set.head()\n","023a897b":"# First column is in 0th index named 'meanfreq'\n# Making an int index holder\ncol_index = 0\n\n# Columns name\ncol_name_0 = data_set.columns[col_index]\n\n# Columns values\ncol_vals_0 = data_set[col_name_0].values\n\nprint('columns name : ',col_name_0)\nprint('columns values : ',col_vals_0)","bad42828":"# plotting with lineplot.\nplt.plot(col_vals_0, c='b')\n\nplt.show()","bfff34a9":"# 'marker' keyword argument for chosing mark shape 'o' is point, '^' is triagle shape, '+' is plus sign , '*' is star... etc. also '1','2','3' is diffrent shapes.\n# 'linestyle' keyword argument for lines between points but we don't want that we are trying to avoid continius like look. also it can be '-','--','-.',':' for another styles.\n# 'color' keyword argument for color.( how shocking )\n# 'markersize' keyword argument is markers size.\nplt.plot(col_vals_0, marker='o', linestyle='None', color='blue', markersize=1)\n\nplt.show()","a562f7a6":"# There is a shortcut:\n# 'bo' means blue point. first letter is for color it's optional, second is for marker.\n# ms is markersize initials.\nplt.plot(col_vals_0, 'bo',ms=1)\n\nplt.show()","fd1d3191":"# it is just a list of column values size.\nx = list(range(len(col_vals_0)))\n\n# y is sample values.\ny = col_vals_0\n\n# we are using 's' instate of 'ms' or 'markersize' in this function. It can be a float or an array of floats.\n# x and y is axes.\n# c is color\n# also we can use alpha if need some transparence.\nplt.scatter(x,y, s=1, c='b')\n\nplt.show()","d16b15ff":"# it is just a list of column values size.\nx = list(range(len(col_vals_0)))\n\n# y is sample values.\ny = col_vals_0\n\n# creating a hexadecimal  color.\ncolor_hex = '#ABCDEF'\n\nplt.scatter(x,y, s=1, c=color_hex)\n\nplt.show()","1ef7b558":"import random\n# Random hex number.\n# 0xffffff is upper limit for hex color.\nrandom_int = random.randint(0, int('0xffffff', 0))\n\n# Printing random integer number.\nprint('random_int:', random_int)\n\n# '%' is like a convertion operator.\n# But a hex color need to be 6 digits, to ensure this we have to add '0.6' statement in the middle of the '%' and 'X',\n# The '0.6' statement is going to add zero to the left of the number until it has six digits.\n# 'X' is indicates hexadecimal number.\nint_to_hex = '%0.6X' % random_int\n\n# Printing hexadecimal number.\nprint('int_to_hex:', int_to_hex)\n\n# Adding a hash (#) for color format.\nrandom_color = str('#' + str(int_to_hex))\n\n# Printing random hexadecimal number with color format  \nprint('random_color:', random_color)\n\n# Or we can simply use this!. its the same thing.\n# random_color = str(\"#%0.6X\" % random.randint(0, int('0xffffff', 0)))\n\n\nx = list(range(len(col_vals_0)))\ny = col_vals_0\n\nplt.scatter(x,y, s=1, c=random_color)\nplt.show()","b11a49fd":"# Drawing plot.\nplt.plot(col_vals_0, 'bo',ms=1)\n\n# Making simple annotate text.\nplt.annotate(xy=(1500,0.05), s='Hello')\n\nplt.show()","3026d0d6":"# Drawing plot.\nplt.plot(col_vals_0, 'bo',ms=1)\n\n# Sample to annotate.\nsample = 666\n\n# X coord. is sample number.\nx = sample\n\n# Y coord. is samples values.\ny = col_vals_0[sample]\n\n# Text string to annotate.\ntext = str(str(sample) + '. value')\n\n# text coord. there is no special meaning of this numbers just this area looks more clear that the others i think.\ntextcoord = (1500,0.05)\n\n# xy is annotates coordinate.\n# s is string value\n# xytext is texts coordinates.\n# arrowpros is a dictionary of arrow properties.\n# If you want to see full descriptions you can use print(help(plt.annotate)). actually you can use this 'help()' function for all 'plt' functions. it is very usefull!!\n# also you can use 'arrowprops={'arrowstyle': 'simple'}' for a regular arrow but i like this wegde thing much more. \nplt.annotate(xy=(x,y), s=text, xytext=textcoord, arrowprops={'arrowstyle': 'wedge'})\n\nplt.show()","ec9da462":"# Drawing plot.\nplt.plot(col_vals_0, 'bo',ms=1)\n\n# Finding max value and it's index\nmax_value = max(col_vals_0)\nmax_value_index= list(col_vals_0).index(max_value)\n\n# Finding min value and it's index\nmin_value = min(col_vals_0)\nmin_value_index= list(col_vals_0).index(min_value)\n\n\n# Text strings to annotate.\nmax_text = 'max. value'\nmin_text = 'min. value'\n\n# text coords. there is no special meaning of this numbers just this area looks more clear that the others i think.\nmax_textcoord = (2500,0.10)\nmin_textcoord = (1000,0.10)\n\n# Drawing max. values annotate.\nplt.annotate(xy=(max_value_index,max_value), s=max_text, xytext=max_textcoord, arrowprops={'arrowstyle': 'wedge'})\n\n# Drawing min. values annotate.\nplt.annotate(xy=(min_value_index,min_value), s=min_text, xytext=min_textcoord, arrowprops={'arrowstyle': 'wedge'})\n\n\nplt.show()","fe1ca5ba":"# Drawing plot.\nplt.plot(col_vals_0, 'bo',ms=1)\n\n# Horizontal lines y coordinate.\nhline_coord = 0.1\n\n# Draws a horizontal line.\nplt.axhline(hline_coord, c='m')\n\n# Vertical lines x coordinate.\nvline_coord = 2000\n\n# Draws a vertical line.\nplt.axvline(vline_coord, c='m')\n\nplt.show()","fd480f56":"# Drawing plot.\nplt.plot(col_vals_0, 'bo',ms=1)\n\n# setting limits.\nx_first_value = 2000\nx_second_value = 2500\n\n# Draws a vertical span between values\n# alpha for transperence\nplt.axvspan(x_first_value,x_second_value, alpha=0.1, color='m')\n\n# setting limits.\ny_first_value = 0.1\ny_second_value = 0.2\n\n# Draws a horizontal span between values\n# alpha for transperence\nplt.axhspan(y_first_value,y_second_value, alpha=0.1, color='g')\n\nplt.show()","2ad9c296":"# Drawing plot.\nplt.plot(col_vals_0, 'bo',ms=1)\n\n# polygones coordinates.\npolygones_x_coords = [0,2000,2000,0]\npolygones_y_coords = [0.10,0.10,0.25,0.25]\n\n# fill function for drawing polygone.\nplt.fill(polygones_x_coords, polygones_y_coords, c='r', alpha=0.1) \n\nplt.show()","72e02d7b":"# notch is a notch in mean of this data.\n# vert means vertical visualization.\n# patch_artist for coloring box.\nplt.boxplot(col_vals_0, notch=True, vert=False, patch_artist=True)\n\nplt.show()","36ad4fc8":"# for adding diffrent color.\nbox = plt.boxplot(col_vals_0, notch=True, vert=False, patch_artist=True)\n\nbox['boxes'][0].set_color('pink')\n\nplt.show()","968282ea":"# For plotting whole dataframe, first we have to change data frame to np array.\ndata = np.array(data_set)\n# Labels for y coordinates labels.\nlabels = data_set.columns.values\nplt.boxplot(data, notch=True, vert=False, patch_artist=True, labels=labels)\n\nplt.show()","6d617c52":"# This data is making no sens with this plot but I am just using for curiosity.\n# Lets limit the data.\ndata = col_vals_0[:50]\n\n# We can use marker, markersize, color and much more keyword arguments in this function.\nplt.polar(data, color='m', alpha=0.50)\n\nplt.show()","a8131401":"# To visualize a pie of polarplot, we have to make a subplot fisrt.\nfig = plt.figure()\nax = fig.add_subplot(111, polar=True)\nc = ax.plot(data, c='b', alpha=0.75)\n\n# starting angle.\nax.set_thetamin(135)\n\n# ending angle.\nax.set_thetamax(45)\n\nplt.show()","070cd299":"# Also we can offset origin.\nfig = plt.figure()\nax = fig.add_subplot(111, polar=True)\nc = ax.plot(data,c='pink', alpha=0.75)\n\n# starting angle.\nax.set_thetamin(135)\n\n# ending angle.\nax.set_thetamax(45)\n\n# Adding title.\nax.set_title('Pice of Pie')\n\n#Offseting origin.\nax.set_rorigin(-0.25)\n\nplt.show()","d66592ed":"# Violin plot for one feature.\n# Points is number of points in side distrubition drawings.\n# vert is boolean for vertical plot.\n# widths is widths of violins.\n# showextrema is boolean for extrema point.\n# showmedians is boolean for median point.\nplt.violinplot(col_vals_0, points=len(col_vals_0), vert=True, widths=0.1,showmeans=True, showextrema=True, showmedians=True)\n\nplt.show()","ebeb2346":"# For plotting whole dataframe, first we have to change data frame to np array.\ndata = np.array(data_set)\n\nplt.violinplot(data)\n\nplt.show()","ef740bad":"** Annotating max. and min. values. **","cb2389a4":"**Let's look at 'scatter()' function**\n# Scatter Function","2b496b4e":"## Vertical and Horizontal Lines","e87ee7b4":"** Lets make a random hex color generator**","16c8a6c7":"**O.K. our data set ready for visualize...**\n\n** Let's take one column values for visualize**","413da97d":"# Polar Function","1daa1166":"**  I didn't like how it looks, I think this data doesn't fit with this plot. **\n\n** In the next chapter I am going to study about seaborn. **","24d6fabe":"# Boxplot Function","51371216":"# Drawing Hatches","61178290":"# Custom and Random Colors\n**How about adding a hex color!**","6a65727d":"- **In the last chapter I notice some thing, when we visualize a data with plot() function , it draw data points with a continious lines.**\n- **But our data is all about data points not a continius line, to avoid this we can use scatter() function or we can use some keyword arguments.**\n\n# Using Keyword Arguments In 'plot()' Function","de54cf6c":"** Using arrow properties of annotation. **","73094636":"# Violin Function","54422256":"# CHAPTER 2","d31da837":"# Drawing Hatch With 'fill()' Function","cbaffa7b":"# THIS CHAPTER INCLUDES :\n- ** [Dot Visualization Without Scatter](#Dot-Visualization-Without-Scatter) **\n- ** [Scatter Function](#Scatter-Function) **\n- ** [Custom and Random Colors](#Custom-and-Random-Colors)**\n- ** [Annotation](#Annotation)**\n- ** [Vertical and Horizontal Lines](#Vertical-and-Horizontal-Lines)**\n- ** [Drawing Hatches](#Drawing-Hatches)**\n- ** [Boxplot Function](#Boxplot-Function)**\n- ** [Polar Function](#Polar-Function)**\n- ** [Violin Function](#Violin-Function)**\n\n\nThis notebook is my learning notes.\nIf you want to learn something from it enjoy!. Maybe we can learn this together :) eco","5787bd2a":"# Dot Visualization Without Scatter\n** for remember our  last plot is like this: **","7cb4c369":"# Annotation","9e546171":"** Perfect! this is the the true appearance of this data.**","bfb12e18":"# Importing Field","583f32e8":"# LEARNING DATA VISUALIZATION"}}