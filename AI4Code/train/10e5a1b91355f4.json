{"cell_type":{"5a573746":"code","406563c3":"code","293f33cd":"code","613771ef":"code","ecb8ad8d":"code","8b7020cb":"code","b305a2ca":"code","a7b9071c":"code","dd7be638":"code","7473ea81":"markdown"},"source":{"5a573746":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nfrom collections import defaultdict\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))","406563c3":"class TrieNode():\n    def __init__(self):\n        self.children = defaultdict()\n        self.terminating = False\n\n\nclass Trie():\n    def __init__(self):\n        self.root = self.get_node()\n\n    def get_node(self):\n        return TrieNode()\n\n    def get_index(self, ch):\n        return ord(ch) - ord('a')\n\n    def insert(self, word):\n\n        root = self.root\n        len1 = len(word)\n\n        for i in range(len1):\n            index = self.get_index(word[i])\n\n            if index not in root.children:\n                root.children[index] = self.get_node()\n            root = root.children.get(index)\n\n        root.terminating = True\n\n    def search(self, word):\n        root = self.root\n        len1 = len(word)\n\n        for i in range(len1):\n            index = self.get_index(word[i])\n            if not root:\n                return False\n            root = root.children.get(index)\n\n        return True if root and root.terminating else False\n\n    def has_child(self, word, ch):\n        root = self.root\n        len1 = len(word)\n        assert len(ch) == 1\n        for i in range(len1):\n            index = self.get_index(word[i])\n            if not root:\n                return False\n            root = root.children.get(index)\n        if not root:\n            return False\n        else:\n            index = self.get_index(ch)\n            root = root.children.get(index)\n            if not root:\n                return False\n            else:\n                return True\n    def delete(self, word):\n\n        root = self.root\n        len1 = len(word)\n\n        for i in range(len1):\n            index = self.get_index(word[i])\n\n            if not root:\n                print (\"Word not found\")\n                return -1\n            root = root.children.get(index)\n\n        if not root:\n            print (\"Word not found\")\n            return -1\n        else:\n            root.terminating = False\n            return 0\n\n    def update(self, old_word, new_word):\n        val = self.delete(old_word)\n        if val == 0:\n            self.insert(new_word)","293f33cd":"class Processor():\n    def __init__(self, vocabulary, ending_vocab):\n        ftrie = Trie()\n        etrie = Trie()\n        for word in vocabulary:\n            ftrie.insert(word)\n        self.ftrie = ftrie\n        for ending in ending_vocab:\n            etrie.insert(ending[::-1])\n        self.etrie = etrie\n\n    def extract_root(self, word):\n        valid_ending = False\n        reverse = word[::-1]\n        for ending in [reverse[:1], reverse[:2], reverse[:3]]:\n            if self.etrie.search(ending):\n                valid_ending = True\n        if not valid_ending:\n            return word\n        else:\n            i = 0\n            while i < len(word) - 1 and self.ftrie.has_child(word[:i], word[i]):\n                i+=1\n            if self.ftrie.search(word[:i]) and i != 0:\n                return word[:i]\n            else:\n                return word","613771ef":"nuhtsul = ['\u044b','\u044b\u043d','\u0438\u0439\u043d','\u0434','\u0442','\u044b\u0433','\u0438\u0439\u0433','\u0433','\u0430\u0430\u0441','\u044d\u044d\u0441','\u043e\u043e\u0441','\u04e9\u04e9\u0441','\u0430\u0430\u0440','\u044d\u044d\u0440','\u04e9\u04e9\u0440','\u043e\u043e\u0440','\u0442\u0430\u0439','\u0442\u044d\u0439',\n'\u0442\u043e\u0439','\u0440\u04af\u04af','\u0440\u0443\u0443','\u0430\u0430','\u044d\u044d','\u04e9\u04e9','\u043e\u043e']","ecb8ad8d":"df = pd.read_csv('\/kaggle\/input\/muis-challenge\/wordlist.csv')\nvocabulary = df['word']\nvocabulary = [word.strip() for word in vocabulary if word != '']","8b7020cb":"p = Processor(vocabulary, nuhtsul)","b305a2ca":"p.extract_root('\u043d\u043e\u043c\u043d\u043e\u043e\u0441')","a7b9071c":"p.extract_root('\u043c\u0430\u0448\u0438\u043d\u0442\u0430\u0439\u0433\u0430\u0430')","dd7be638":"p.extract_root('\u0445\u04af\u043c\u04af\u04af\u0441\u0438\u0439\u043d')","7473ea81":"## \u041d\u044d\u0440 \u04af\u0433\u0441\u044d\u044d\u0441 \u043d\u04e9\u0445\u0446\u04e9\u043b\u0438\u0439\u0433 \u0441\u0430\u043b\u0433\u0430\u0436 \u044f\u0437\u0433\u0443\u0443\u0440\u044b\u0433 \u043e\u043b\u043e\u0445 \u0445\u044d\u0440\u044d\u0433 \u0431\u043e\u043b\u0436 \u043c\u0430\u0433\u0430\u0434\u0433\u04af\u0439 \u0442\u0443\u043b \u0434\u0430\u0440\u0430\u0430\u0445 notebook-\u0433 public \u0431\u043e\u043b\u0433\u043e\u0436 \u0431\u0430\u0439\u043d\u0430. "}}