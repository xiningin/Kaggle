{"cell_type":{"cb5a1a4c":"code","866f5420":"code","ec1a15ed":"code","c7f9acc5":"code","9a88d312":"code","bb0c24ce":"code","5eda1f82":"code","7d823620":"code","9ec85eb8":"code","e2fa0321":"code","261cbebc":"code","098e8d08":"markdown","f2a11c25":"markdown","d0af5fc5":"markdown","8bab8c18":"markdown","fb82a471":"markdown","80dc59d7":"markdown","e2a845b1":"markdown","525c47e9":"markdown","82460a04":"markdown"},"source":{"cb5a1a4c":"import tensorflow as tf\n\n# Setup plotting\nimport matplotlib.pyplot as plt\n\nplt.style.use('seaborn-whitegrid')\n# Set Matplotlib defaults\nplt.rc('figure', autolayout=True)\nplt.rc('axes', labelweight='bold', labelsize='large',\n       titleweight='bold', titlesize=18, titlepad=10)\n\n# Setup feedback system\nfrom learntools.core import binder\nbinder.bind(globals())\nfrom learntools.deep_learning_intro.ex2 import *","866f5420":"import pandas as pd\n\nconcrete = pd.read_csv('..\/input\/dl-course-data\/concrete.csv')\nconcrete.head()","ec1a15ed":"# YOUR CODE HERE\ninput_shape = [8]\n\n# Check your answer\nq_1.check()","c7f9acc5":"# Lines below will give you a hint or solution code\n#q_1.hint()\n#q_1.solution()","9a88d312":"from tensorflow import keras\nfrom tensorflow.keras import layers\n\n# YOUR CODE HERE\nmodel = keras.Sequential([\n    layers.Dense(units=512,activation=\"relu\",input_shape=[8]),\n    layers.Dense(units=512,activation=\"relu\"),\n    layers.Dense(units=512,activation=\"relu\"),\n    layers.Dense(units=1)\n])\n\n# Check your answer\nq_2.check()","bb0c24ce":"# Lines below will give you a hint or solution code\n#q_2.hint()\n#q_2.solution()","5eda1f82":"### YOUR CODE HERE: rewrite this to use activation layers\nmodel = keras.Sequential([\n    layers.Dense(32,input_shape=[8]),\n    layers.Activation(\"relu\"),\n    layers.Dense(32),\n    layers.Activation(\"relu\"),\n    layers.Dense(1),\n])\n\n# Check your answer\nq_3.check()","7d823620":"# Lines below will give you a hint or solution code\n#q_3.hint()\n#q_3.solution()","9ec85eb8":"# YOUR CODE HERE: Change 'relu' to 'elu', 'selu', 'swish'... or something else\nactivation_layer = layers.Activation('tanh')\n\nx = tf.linspace(-3.0, 3.0, 100)\ny = activation_layer(x) # once created, a layer is callable just like a function\n\nplt.figure(dpi=100)\nplt.plot(x, y)\nplt.xlim(-3, 3)\nplt.xlabel(\"Input\")\nplt.ylabel(\"Output\")\nplt.show()","e2fa0321":"# YOUR CODE HERE: Change 'relu' to 'elu', 'selu', 'swish'... or something else\nactivation_layer = layers.Activation('sigmoid')\n\nx = tf.linspace(-3.0, 3.0, 100)\ny = activation_layer(x) # once created, a layer is callable just like a function\n\nplt.figure(dpi=100)\nplt.plot(x, y)\nplt.xlim(-3, 3)\nplt.xlabel(\"Input\")\nplt.ylabel(\"Output\")\nplt.show()","261cbebc":"# YOUR CODE HERE: Change 'relu' to 'elu', 'selu', 'swish'... or something else\nactivation_layer = layers.Activation('elu')\n\nx = tf.linspace(-3.0, 3.0, 100)\ny = activation_layer(x) # once created, a layer is callable just like a function\n\nplt.figure(dpi=100)\nplt.plot(x, y)\nplt.xlim(-3, 3)\nplt.xlabel(\"Input\")\nplt.ylabel(\"Output\")\nplt.show()","098e8d08":"---\n\n\n\n\n*Have questions or comments? Visit the [Learn Discussion forum](https:\/\/www.kaggle.com\/learn-forum\/191966) to chat with other Learners.*","f2a11c25":"# Keep Going #\n\nNow move on to Lesson 3 and [**learn how to train neural networks**](https:\/\/www.kaggle.com\/ryanholbrook\/stochastic-gradient-descent) with stochastic gradient descent.","d0af5fc5":"# 1) Input Shape #\n\nThe target for this task is the column `'CompressiveStrength'`. The remaining columns are the features we'll use as inputs.\n\nWhat would be the input shape for this dataset?","8bab8c18":"**This notebook is an exercise in the [Intro to Deep Learning](https:\/\/www.kaggle.com\/learn\/intro-to-deep-learning) course.  You can reference the tutorial at [this link](https:\/\/www.kaggle.com\/ryanholbrook\/deep-neural-networks).**\n\n---\n","fb82a471":"# 3) Activation Layers #\n\nLet's explore activations functions some.\n\nThe usual way of attaching an activation function to a `Dense` layer is to include it as part of the definition with the `activation` argument. Sometimes though you'll want to put some other layer between the `Dense` layer and its activation function. (We'll see an example of this in Lesson 5 with *batch normalization*.) In this case, we can define the activation in its own `Activation` layer, like so:\n\n```\nlayers.Dense(units=8),\nlayers.Activation('relu')\n```\n\nThis is completely equivalent to the ordinary way: `layers.Dense(units=8, activation='relu')`.\n\nRewrite the following model so that each activation is in its own `Activation` layer.","80dc59d7":"# Optional: Alternatives to ReLU #\n\nThere is a whole family of variants of the `'relu'` activation -- `'elu'`, `'selu'`, and `'swish'`, among others -- all of which you can use in Keras. Sometimes one activation will perform better than another on a given task, so you could consider experimenting with activations as you develop a model. The ReLU activation tends to do well on most problems, so it's a good one to start with.\n\nLet's look at the graphs of some of these. Change the activation from `'relu'` to one of the others named above. Then run the cell to see the graph. (Check out the [documentation](https:\/\/www.tensorflow.org\/api_docs\/python\/tf\/keras\/activations) for more ideas.)","e2a845b1":"In the *Concrete* dataset, your task is to predict the compressive strength of concrete manufactured according to various recipes.\n\nRun the next code cell without changes to load the dataset.","525c47e9":"# Introduction #\n\nIn the tutorial, we saw how to build deep neural networks by stacking layers inside a `Sequential` model. By adding an *activation function* after the hidden layers, we gave the network the ability to learn more complex (non-linear) relationships in the data.\n\nIn these exercises, you'll build a neural network with several hidden layers and then explore some activation functions beyond ReLU. Run this next cell to set everything up!","82460a04":"# 2) Define a Model with Hidden Layers #\n\nNow create a model with three hidden layers, each having 512 units and the ReLU activation.  Be sure to include an output layer of one unit and no activation, and also `input_shape` as an argument to the first layer."}}