{"cell_type":{"46477fbb":"code","29b316ea":"code","deede196":"code","ce85d778":"code","a513380d":"code","248f5517":"code","1ac033b4":"code","ee89381e":"code","b7223f40":"code","45b930c6":"code","a120d226":"code","f64afc3d":"code","b6056434":"code","aa084945":"code","79e1c7b5":"code","be715ab9":"code","7f9a6a9a":"code","eeb442aa":"code","a5fdae54":"code","347e95f8":"code","6ad9c9b9":"code","4c49f476":"code","a9808f47":"code","3ef182eb":"code","c05b8d4c":"code","df5c93be":"code","56e79a21":"code","e47818b2":"code","4df6bddf":"code","a4774143":"code","ba6e7a41":"code","83e2492e":"code","26adc24d":"code","6ad745dc":"code","e7cce8d7":"code","22508845":"code","d033562c":"code","7b16cfbb":"code","4e77a1e8":"code","49976cb5":"code","a73e5960":"code","1cbf12d8":"code","57ecfec5":"code","ce53db52":"code","241fb175":"code","bb6e15dc":"code","d4173412":"code","b0ed624f":"code","4fb17cc5":"code","35a9fd60":"code","e8794762":"code","30d50d71":"code","540f2e42":"code","20d5d7d0":"code","843396a7":"code","d69b0b70":"code","290cf0f5":"code","0c648333":"markdown","b8d3ab42":"markdown","69135185":"markdown","f37a099b":"markdown","c0057e1d":"markdown","5362d6e3":"markdown","e334ccbe":"markdown","8dce2e7c":"markdown","318cc8de":"markdown","d742a7fe":"markdown","c6eee7ea":"markdown","ab879f42":"markdown","f253a088":"markdown","7a716331":"markdown","9ee90dd4":"markdown","487c6daa":"markdown","08545dbf":"markdown","75846fe4":"markdown","173fb72a":"markdown","821e8a18":"markdown","f889421b":"markdown"},"source":{"46477fbb":"import os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))","29b316ea":"import numpy as np\nimport pandas as pd\nfrom matplotlib import pyplot as plt\nimport seaborn as sns\nfrom scipy import stats\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.linear_model import LogisticRegression, LinearRegression\nfrom sklearn.ensemble import RandomForestRegressor, ExtraTreesRegressor, GradientBoostingRegressor, AdaBoostRegressor\nfrom sklearn.neural_network import MLPRegressor\nfrom sklearn.tree import DecisionTreeRegressor\nfrom sklearn.model_selection import GridSearchCV\nfrom sklearn.svm import SVR\nfrom sklearn import metrics\nimport pickle\ndata = pd.read_csv(\"\/kaggle\/input\/predict-test-scores-of-students\/test_scores.csv\")\ndata.head()","deede196":"data.info()","ce85d778":"print(data.shape)\ndata.describe()","a513380d":"data.corr()","248f5517":"print(data.groupby(\"school_type\").count()[\"school\"]*100\/data.shape[0], \"\\n\\n\\n\")","1ac033b4":"\n\nprint(data.groupby(\"school\").mean()[\"posttest\"].max())\nprint(data.groupby(\"school\").mean()[\"posttest\"].min())\nprint(data.groupby(\"school\").mean()[\"n_student\"].max())\nprint(data.groupby(\"school\").mean()[\"n_student\"].min())\ndata.groupby(\"school\").mean()\n","ee89381e":"data.groupby(\"school\").describe()[\"posttest\"]","b7223f40":"data.groupby(\"school\").describe()[\"pretest\"]","45b930c6":"fig,a= plt.subplots(3,2)\ndata.groupby(\"school_setting\").count()[\"school\"].plot(kind=\"pie\", ax=a[0][0], title=\"School Setting\", autopct='%1.2f%%')\ndata.groupby(\"school_type\").count()[\"school\"].plot(kind=\"pie\", ax=a[0][1], title=\"School Type\", autopct='%1.2f%%')\ndata.groupby(\"teaching_method\").count()[\"school\"].plot(kind=\"pie\", ax=a[1][0], title=\"Teaching Method\", autopct='%1.2f%%')\ndata.groupby(\"gender\").count()[\"school\"].plot(kind=\"pie\", ax=a[1][1], title=\"Gender\", autopct='%1.2f%%')\ndata.groupby(\"lunch\").count()[\"school\"].plot(kind=\"pie\", ax=a[2][0], title=\"Lunch\", autopct='%1.2f%%')\n","a120d226":"data[\"pretest\"].hist(bins=10)","f64afc3d":"data[\"posttest\"].hist(bins=10)","b6056434":"sns.regplot(x=\"pretest\", y=\"posttest\", data=data)","aa084945":"sns.regplot(x=\"n_student\", y=\"posttest\", data=data)","79e1c7b5":"\nsns.pointplot(x=\"school_setting\", y=\"posttest\", data=data)\nstats.f_oneway(data[data['school_setting'] == 'Urban' ][\"posttest\"], data[data['school_setting'] == 'Suburban' ][\"posttest\"],\n              data[data['school_setting'] == 'Rural' ][\"posttest\"])","be715ab9":"sns.pointplot(x=\"school_type\", y=\"posttest\", data=data, color='r')\nstats.f_oneway(data[data['school_type'] == 'Public' ][\"posttest\"],\n              data[data['school_type'] == 'Non-public' ][\"posttest\"])","7f9a6a9a":"sns.pointplot(x=\"teaching_method\", y=\"posttest\", data=data, color='r')\nstats.f_oneway(data[data['teaching_method'] == 'Standard' ][\"posttest\"],\n              data[data['teaching_method'] == 'Experimental' ][\"posttest\"])","eeb442aa":"sns.pointplot(x=\"gender\", y=\"posttest\", data=data, color='r')\nstats.f_oneway(data[data['gender'] == 'Female' ][\"posttest\"], \n               data[data['gender'] == 'Male' ][\"posttest\"])","a5fdae54":"sns.pointplot(x=\"lunch\", y=\"posttest\", data=data, color='r')\nstats.f_oneway(data[data['lunch'] == 'Does not qualify' ][\"posttest\"], \n               data[data['lunch'] == 'Qualifies for reduced\/free lunch' ][\"posttest\"])","347e95f8":"abv_avg = data[data[\"posttest\"]>data[\"posttest\"].mean()]\nbel_avg = data[data[\"posttest\"]<=data[\"posttest\"].mean()]","6ad9c9b9":"print(abv_avg.groupby('school').count()['lunch'])\nbel_avg.groupby('school').count()['lunch']","4c49f476":"print(data[data[\"school\"]==\"UKPGS\"].shape[0])\nprint(data[data[\"school\"]==\"UKPGS\"].describe())","a9808f47":"data[data[\"posttest\"]>99]","3ef182eb":"data[data[\"school\"]==\"IDGFP\"].describe()","c05b8d4c":"lowests = data[data[\"posttest\"]<56] # 25%\nprint(lowests.groupby(\"school_setting\")[\"n_student\"].count(), \"\\n\\n\")\nprint(lowests.groupby(\"teaching_method\")[\"n_student\"].count(), \"\\n\\n\")\nprint(lowests.groupby(\"school\")[\"n_student\"].count(), \"\\n\\n\")\nprint(lowests.groupby(\"lunch\")[\"n_student\"].count(), \"\\n\\n\")\nprint(lowests.groupby(\"gender\")[\"n_student\"].count(), \"\\n\\n\")\nprint(lowests.groupby(\"school_type\")[\"n_student\"].count(), \"\\n\\n\")","df5c93be":"s5 = data[data[\"posttest\"]>77] #75%","56e79a21":"print(s5.shape)","e47818b2":"s5.groupby('school').count()[\"classroom\"]","4df6bddf":"s5.groupby('teaching_method').count()[\"classroom\"]","a4774143":"s5.groupby('school_type').count()[\"classroom\"]","ba6e7a41":"s5.groupby('school_setting').count()[\"classroom\"]","83e2492e":"s5.groupby('lunch').count()[\"classroom\"]","26adc24d":"data2 = data.copy()\nfields = [\"school\", \"school_setting\", \"school_type\", \"teaching_method\", \"n_student\", \"lunch\"]","6ad745dc":"from sklearn.preprocessing import LabelEncoder\nfor i in fields:\n    enc = LabelEncoder()\n    data2[i] = enc.fit_transform(data2[i])","e7cce8d7":"data2 = data2.drop(columns=[\"classroom\", \"student_id\", \"gender\"])","22508845":"data2","d033562c":"Y = data2[\"posttest\"]","7b16cfbb":"X = data2.drop(columns=[\"posttest\"])","4e77a1e8":"X_train, X_test, Y_train, Y_test = train_test_split(X, Y, test_size=0.25, random_state=39)\nparameters = {'kernel':('linear', 'rbf'), 'C':[1, 10]}\nsvc = SVR(gamma=\"scale\")\nsvc = GridSearchCV(svc, parameters, cv=5)\nsvc.fit(X_train, Y_train)","49976cb5":"svc.score(X_test, Y_test)","a73e5960":"mlp = MLPRegressor()\nmlp.fit(X_train, Y_train)","1cbf12d8":"mlp.score(X_test, Y_test)","57ecfec5":"rfr = RandomForestRegressor(n_estimators=25)\nrfr.fit(X_train, Y_train)","ce53db52":"rfr.score(X_test, Y_test)","241fb175":"lr = LogisticRegression(solver=\"liblinear\", multi_class=\"ovr\", penalty='l2', C=10)\nlr.fit(X_train, Y_train)","bb6e15dc":"lr.score(X_test, Y_test)","d4173412":"xtr = ExtraTreesRegressor(n_estimators=20)\nxtr.fit(X_train, Y_train)","b0ed624f":"xtr.score(X_test, Y_test)","4fb17cc5":"abr = AdaBoostRegressor(DecisionTreeRegressor(max_depth=6), n_estimators=300, random_state=754)\nabr.fit(X_train, Y_train)\n","35a9fd60":"abr.score(X_test, Y_test)","e8794762":"gbr = GradientBoostingRegressor(random_state=1455, n_estimators=15)\ngbr.fit(X_train, Y_train)","30d50d71":"gbr.score(X_test, Y_test)","540f2e42":"lreg = LinearRegression()\nlreg.fit(X_train, Y_train)\n","20d5d7d0":"lreg.score(X_test, Y_test)","843396a7":"print('MAE:', metrics.mean_absolute_error(Y_test, lreg.predict(X_test)))\nprint('MSE:', metrics.mean_squared_error(Y_test, lreg.predict(X_test)))\nprint('RMSE:', np.sqrt(metrics.mean_squared_error(Y_test, lreg.predict(X_test))))\nprint('R^2:', metrics.r2_score(Y_test, svc.predict(X_test)))","d69b0b70":"filename = 'model.pkl'\npickle.dump(lreg, open(filename, 'wb'))","290cf0f5":"!ls","0c648333":"**Analysis**  \nThe best performing student(s) is\/are from IDGFP.  \nThe worst performing student(s) is\/are from GOOBU.  ","b8d3ab42":"**Analysis**\nCCAAW, IDGFP and UKPGS have the most students performing above average.  \nUKPGS and IDGFP students all performed above average with CCAAW have a student performing below average.  \n  \nOn the lower end, GOOBU, QOQTS, VVTVA, and ZOWMK have the most students performing below average","69135185":"**Analysis**  \nAmong the students scoring in the bottom 25%:  \nThey were mostly urban and rural students.  \nThey were mostly taught using standard methods.  \nThey mostly qualified for reduced\/free lunch.  \nThere was no significant difference in gender proportion.\nThey were almost all from public school.","f37a099b":"**Analysis:**  \nUKPGS has the highest mean score (91.16).  \nKZKKE has the lowest mean score (47.92).  \nZOWMK has the highest mean number of students per classroom (29.31).  \nFBUMG has the lowest mean number of students per classroom (15.57).  \n","c0057e1d":"**Analysis**  \nLunch significantly affects the test scores of the students. Students that did not qualify for lunch  performed better on average.","5362d6e3":"# Exploratory Data Analysis","e334ccbe":"**Analysis**  \nTeaching methods significantly affects the test scores of the students. Students taught using experimental methods performed better on average.","8dce2e7c":"**Analysis**  \nMore students are from urban school settings than any other. Rural settings have the least number of students.  \nMore students are from public schools than Non-public with public schools having about 3 times more than the population of non-public students that took the test.  \nMost classes\/schools follow standard teaching methods as opposed to experimental methods.  \nThe proportion of male and female test takers are almost the same.  \nMost students don't qualify for lunch.  ","318cc8de":"Analysis","d742a7fe":"**Analysis**  \nThe school setting significantly affects the score of students with suburban students having the best scores and urban having the worst.","c6eee7ea":"# Conclusion\nLogistic Regression gives the best accuracy.","ab879f42":"Top students were mostly taught using experimental methods.","f253a088":"# Feature Engineering, Data Preparation And Model training","7a716331":"**Analysis**  \nThe students performed better in post tests than the pre tests with no student scoring below 30 in the post test.","9ee90dd4":"There were no significant differences in the school type among the top students.","487c6daa":"**Analysis**  \nGender is not a significant factor affecting the scores of student. The average scores of both genders are almost the same.","08545dbf":"**Analysis**  \nEvery student that score 100 in post tests where from IDGFP, class P2A, mostly males, did not qualify for lunch and where taught with experimental methods","75846fe4":"Suburban students were the most and rural student were the least","173fb72a":"**Drop columns that are not needed.**","821e8a18":"**Analysis**  \nSchool type significantly affects the test scores of the students with public school students performing the worst.","f889421b":"Analysis:\nPost Test scores have strong positive correlations with Pre Test scores.\nNumber of students have a slightly strong negative correlations with Test scores."}}