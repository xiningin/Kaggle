{"cell_type":{"7ff322f1":"code","b4309ba2":"code","c5edb69c":"code","26ada783":"code","972a5d8c":"code","090aa7bc":"code","379b4feb":"code","1abacf8d":"code","204b1796":"code","d0540e67":"code","808108ae":"code","2aed1754":"code","e9164c3d":"code","6194bf6f":"code","777694ce":"code","257bec38":"code","9e5e79fb":"code","d12f213a":"code","ee08aee6":"code","3e8f7e4c":"code","3bcbc6be":"code","0d721f8f":"code","55ad1748":"code","b25a9f74":"code","c69e5448":"code","aa42c309":"code","f80e31a8":"code","d25e0d7b":"code","20c1efa7":"code","b0ea5f7f":"code","240185c0":"code","05565173":"code","9b531038":"code","a8be739c":"code","b92fa5ee":"code","b1e7105d":"code","396c9004":"code","a346c745":"code","e307cc27":"code","527b1c9a":"code","ba4fa00a":"code","9c3fc17c":"code","efecbd67":"code","899bb02c":"code","59aed9bb":"code","aee6ec36":"code","49d39b4e":"code","9ef17164":"code","b9344c9e":"code","65610954":"code","21b98a55":"code","a9f76ab7":"code","c1783977":"code","1b5e9f6e":"code","d2cdaffd":"code","094ba53f":"code","91b810f6":"code","e186a05b":"code","babec6a2":"code","dd8fafe3":"code","751eadaf":"code","558b9a6c":"code","8f4aca8d":"code","da56a7c0":"code","d7f2d6aa":"code","f1fdff3a":"code","011f66bb":"code","bbcaa9f0":"code","42f3623b":"code","8c9f1935":"code","b4111b4b":"code","7d6804c3":"code","0f6e86dd":"code","c595e557":"code","0ceb2f07":"code","4ae68483":"code","68102951":"code","aff2406e":"code","842fa593":"code","e7118486":"code","9981289e":"code","bb7764cc":"code","64557ea9":"code","9ae3061b":"code","f14d5f6f":"code","9a808773":"code","1d2433a7":"markdown","9efc5c19":"markdown","d3b6ba4a":"markdown","ba2b1184":"markdown","ff80b260":"markdown","497a1271":"markdown"},"source":{"7ff322f1":"import pandas as pd\nimport plotly.express as px\nfrom copy import copy\nfrom scipy import stats\nimport matplotlib.pyplot as plt\nimport numpy as np\nimport plotly.figure_factory as ff\nfrom sklearn.linear_model import LinearRegression\nfrom sklearn.svm import SVR\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import r2_score\nfrom tensorflow import keras\n","b4309ba2":"# Read stock prices data\nstock_price_df = pd.read_csv(r'\/kaggle\/input\/capital-asset-pricing-model-capm\/stock.csv')\nstock_price_df.head()","c5edb69c":"# Read the stocks volume data\nstock_vol_df = pd.read_csv(r'\/kaggle\/input\/stock-volume\/stock_volume.csv')\nstock_vol_df.head()","26ada783":"# Sort the data based on Date\nstock_price_df = stock_price_df.sort_values(by = ['Date'])\nstock_price_df.head()","972a5d8c":"# Sort the data based on Date\nstock_vol_df = stock_vol_df.sort_values(by = ['Date'])\nstock_vol_df.head()","090aa7bc":"# Check if Null values exist in stock prices data\nstock_price_df.isnull().sum()","379b4feb":"# Check if Null values exist in stocks volume data\nstock_vol_df.isnull().sum()","1abacf8d":"# Get stock prices dataframe info\nstock_price_df.info()","204b1796":"# Get stock volume dataframe info\nstock_vol_df.info()","d0540e67":"stock_vol_df.describe()","808108ae":"#What is the average trading volume for Apple stock?\nprint(\"Average trading volume for Apple stock is\",stock_vol_df.AAPL.mean())\n","2aed1754":"#What is the maximum trading volume for sp500?\nprint(\"Maximum trading volume for S&P500 is\",stock_vol_df.sp500.max())","e9164c3d":"#Which security is traded the most? Explain it .\nprint('''The S&P 500 index is a broad-based measure of large corporations traded on U.S. stock markets. \nOver long periods of time, passively holding the index often produces better results than actively trading or picking single stocks. \nOver long-time horizons, the index typically produces better returns than actively managed portfolios.''')","6194bf6f":"#What is the average stock price of the S&P500 over the specified time period?\nprint(\"Average stock price of the S&P500 over the specified time period\",stock_vol_df.sp500.mean())","777694ce":"# Function to normalize stock prices based on their initial price\ndef normalize(df):\n  x = df.copy()\n  for i in x.columns[1:]:\n    x[i] = x[i]\/x[i][0]\n  return x","257bec38":"# Function to plot interactive plots using Plotly Express\ndef interactive_plot(df, title):\n  fig = px.line(title = title)\n  for i in df.columns[1:]:\n    fig.add_scatter(x = df['Date'], y = df[i], name = i)\n  fig.show()","9e5e79fb":"# plot interactive chart for stocks data\ninteractive_plot(stock_price_df, 'Stock Prices')","d12f213a":"#Plot the volume dataset for all stocks, list any observations we might see\ninteractive_plot(stock_vol_df, 'Stocks Volume')\n\n","ee08aee6":"# S&P500 trading is orders of magnitude compared to individual stocks","3e8f7e4c":"#Plot the normalized stock prices and volume dataset.\n# plot interactive chart for normalized stocks prices data\ninteractive_plot(normalize(stock_price_df), 'Stock Prices')","3bcbc6be":"# Let's normalize the data and re-plot interactive chart for volume data\ninteractive_plot(normalize(stock_vol_df), 'Normalized Volume')","0d721f8f":"# Function to concatenate the date, stock price, and volume in one dataframe\ndef individual_stock(price_df, vol_df, name):\n    return pd.DataFrame({'Date': price_df['Date'], 'Close': price_df[name], 'Volume': vol_df[name]})","55ad1748":"# Function to return the input\/output (target) data for AI\/ML Model\n# Note that our goal is to predict the future stock price \n# Target stock price today will be tomorrow's price \ndef trading_window(data):\n  \n  # 1 day window \n  n = 1\n\n  # Create a column containing the prices for the next 1 days\n  data['Target'] = data[['Close']].shift(-n)\n  \n  # return the new dataset \n  return data","b25a9f74":"# Let's test the functions and get individual stock prices and volumes for AAPL\nprice_volume_df = individual_stock(stock_price_df, stock_vol_df, 'AAPL')\nprice_volume_df.head()","c69e5448":"price_volume_target_df = trading_window(price_volume_df)\nprice_volume_target_df.head()","aa42c309":"# Remove the last row as it will be a null value\nprice_volume_target_df = price_volume_target_df[:-1]\nprice_volume_target_df.head()","f80e31a8":"# Scale the data\nfrom sklearn.preprocessing import MinMaxScaler\nsc = MinMaxScaler(feature_range = (0, 1))\nprice_volume_target_scaled_df = sc.fit_transform(price_volume_target_df.drop(columns = ['Date']))","d25e0d7b":"price_volume_target_scaled_df","20c1efa7":"price_volume_target_scaled_df.shape","b0ea5f7f":"# Creating Feature and Target\nX = price_volume_target_scaled_df[:,:2]\ny = price_volume_target_scaled_df[:,2:]","240185c0":"# Converting dataframe to arrays\n# X = np.asarray(X)\n# y = np.asarray(y)\nX.shape, y.shape","05565173":"# Spliting the data this way, since order is important in time-series\n# Note that we did not use train test split with it's default settings since it shuffles the data\nsplit = int(0.65 * len(X))\nX_train = X[:split]\ny_train = y[:split]\nX_test = X[split:]\ny_test = y[split:]","9b531038":"X_train.shape, y_train.shape","a8be739c":"X_test.shape, y_test.shape","b92fa5ee":"# Define a data plotting function\ndef show_plot(data, title):\n  plt.figure(figsize = (13, 5))\n  plt.plot(data, linewidth = 1)\n  plt.title(title)\n  plt.grid()\n\nshow_plot(X_train, 'Training Data')\nshow_plot(X_test, 'Testing Data')\n","b1e7105d":"#Test the created pipeline with S&P500 and Amazon datasets\n# Let's test the functions and get individual stock prices and volumes for S&P500\nprice_volume_df = individual_stock(stock_price_df, stock_vol_df, 'sp500')\nprice_volume_df.head()","396c9004":"# Let's test the functions and get individual stock prices and volumes for Amazon \nprice_volume_df = individual_stock(stock_price_df, stock_vol_df, 'AMZN')\nprice_volume_df.head()\n","a346c745":"from sklearn.linear_model import Ridge\n# Note that Ridge regression performs linear least squares with L2 regularization.\n# Create and train the Ridge Linear Regression  Model\nregression_model = Ridge()\nregression_model.fit(X_train, y_train)","e307cc27":"# Test the model and calculate its accuracy \nlr_accuracy = regression_model.score(X_test, y_test)\nprint(\"Linear Regression Score: \", lr_accuracy)","527b1c9a":"# Make Prediction\npredicted_prices = regression_model.predict(X)\npredicted_prices","ba4fa00a":"# Append the predicted values into a list\nPredicted = []\nfor i in predicted_prices:\n  Predicted.append(i[0])","9c3fc17c":"len(Predicted)","efecbd67":"# Append the close values to the list\nclose = []\nfor i in price_volume_target_scaled_df:\n  close.append(i[0])\n","899bb02c":"# Create a dataframe based on the dates in the individual stock data\ndf_predicted = price_volume_target_df[['Date']]\ndf_predicted.head()","59aed9bb":"# Add the close values to the dataframe\ndf_predicted['Close'] = close\ndf_predicted.head()","aee6ec36":"# Add the predicted values to the dataframe\ndf_predicted['Prediction'] = Predicted\ndf_predicted.head()","49d39b4e":"from sklearn.metrics import mean_squared_error\nmean_squared_error( df_predicted['Prediction'], df_predicted['Close'])**0.5","9ef17164":"# Plot the results\ninteractive_plot(df_predicted, \"Original Vs. Prediction\")","b9344c9e":"from sklearn.linear_model import Ridge\n# Note that Ridge regression performs linear least squares with L2 regularization.\n# Create and train the Ridge Linear Regression  Model\nregression_model = Ridge(alpha = 2)\nregression_model.fit(X_train, y_train)","65610954":"# Test the model and calculate its accuracy \nlr_accuracy = regression_model.score(X_test, y_test)\nprint(\"Quadratic Regression Score: \", lr_accuracy)\n","21b98a55":"# Make Prediction\npredicted_prices = regression_model.predict(X)\npredicted_prices","a9f76ab7":"# Append the predicted values into a list\nPredicted = []\nfor i in predicted_prices:\n  Predicted.append(i[0])","c1783977":"len(Predicted)","1b5e9f6e":"# Append the close values to the list\nclose = []\nfor i in price_volume_target_scaled_df:\n  close.append(i[0])\n","d2cdaffd":"# Create a dataframe based on the dates in the individual stock data\ndf_predicted = price_volume_target_df[['Date']]\ndf_predicted.head()","094ba53f":"# Add the close values to the dataframe\ndf_predicted['Close'] = close\ndf_predicted.head()","91b810f6":"# Add the predicted values to the dataframe\ndf_predicted['Prediction'] = Predicted\ndf_predicted.head()","e186a05b":"from sklearn.metrics import mean_squared_error\nmean_squared_error( df_predicted['Prediction'], df_predicted['Close'])**0.5","babec6a2":"# Plot the results\ninteractive_plot(df_predicted, \"Original Vs. Prediction\")","dd8fafe3":"# Let's test the functions and get individual stock prices and volumes for AAPL\nprice_volume_df = individual_stock(stock_price_df, stock_vol_df, 'sp500')\nprice_volume_df.head()","751eadaf":"# Get the close and volume data as training data (Input)\ntraining_data = price_volume_df.iloc[:, 1:3].values\ntraining_data","558b9a6c":"# Normalize the data\nfrom sklearn.preprocessing import MinMaxScaler\nsc = MinMaxScaler(feature_range = (0, 1))\ntraining_set_scaled = sc.fit_transform(training_data)","8f4aca8d":"# Create the training and testing data, training data contains present day and previous day values\nX = []\ny = []\nfor i in range(1, len(price_volume_df)):\n    X.append(training_set_scaled [i-1:i, 0])\n    y.append(training_set_scaled [i, 0])","da56a7c0":"X","d7f2d6aa":"# Convert the data into array format\nX = np.asarray(X)\ny = np.asarray(y)","f1fdff3a":"# Split the data\nsplit = int(0.7 * len(X))\nX_train = X[:split]\ny_train = y[:split]\nX_test = X[split:]\ny_test = y[split:]","011f66bb":"# Reshape the 1D arrays to 3D arrays to feed in the model\nX_train = np.reshape(X_train, (X_train.shape[0], X_train.shape[1], 1))\nX_test = np.reshape(X_test, (X_test.shape[0], X_test.shape[1], 1))\nX_train.shape, X_test.shape","bbcaa9f0":"# Create the model\ninputs = keras.layers.Input(shape=(X_train.shape[1], X_train.shape[2]))\nx = keras.layers.LSTM(50, return_sequences= True)(inputs)\nx = keras.layers.Dropout(0.3)(x)\nx = keras.layers.LSTM(50, return_sequences=True)(x)\nx = keras.layers.Dropout(0.3)(x)\nx = keras.layers.LSTM(50)(x)\noutputs = keras.layers.Dense(1, activation='linear')(x)\n\nmodel = keras.Model(inputs=inputs, outputs=outputs)\nmodel.compile(optimizer='adam', loss=\"mse\")\nmodel.summary()","42f3623b":"# Trail the model\nhistory = model.fit(\n    X_train, y_train,\n    epochs = 100,\n    batch_size = 32,\n    validation_split = 0.2\n)","8c9f1935":"# Make prediction\npredicted = model.predict(X)","b4111b4b":"# Append the predicted values to the list\ntest_predicted = []\n\nfor i in predicted:\n  test_predicted.append(i[0])","7d6804c3":"test_predicted","0f6e86dd":"df_predicted = price_volume_df[1:][['Date']]\ndf_predicted.head()","c595e557":"df_predicted['predictions'] = test_predicted\ndf_predicted.head()","0ceb2f07":"# Plot the data\nclose = []\nfor i in training_set_scaled:\n  close.append(i[0])\ndf_predicted['Close'] = close[1:]\ndf_predicted.head()","4ae68483":"from sklearn.metrics import mean_squared_error\nmean_squared_error( df_predicted['predictions'], df_predicted['Close'])**0.5","68102951":"# Plot the results\ninteractive_plot(df_predicted, \"Original Vs. Prediction\")","aff2406e":"#Experiment with various LSTM model parameters (Ex: Use 150 units instead of 50), print out the model summary and retrain the model\n# Create the model\ninputs = keras.layers.Input(shape=(X_train.shape[1], X_train.shape[2]))\nx = keras.layers.LSTM(150, return_sequences= True)(inputs)\nx = keras.layers.Dropout(0.3)(x)\nx = keras.layers.LSTM(150, return_sequences=True)(x)\nx = keras.layers.Dropout(0.3)(x)\nx = keras.layers.LSTM(150)(x)\noutputs = keras.layers.Dense(1, activation='linear')(x)\n\nmodel = keras.Model(inputs=inputs, outputs=outputs)\nmodel.compile(optimizer='adam', loss=\"mse\")\nmodel.summary()","842fa593":"# Trail the model\nhistory = model.fit(\n    X_train, y_train,\n    epochs = 100,\n    batch_size = 32,\n    validation_split = 0.2\n)","e7118486":"# Make prediction\npredicted = model.predict(X)","9981289e":"# Append the predicted values to the list\ntest_predicted = []\n\nfor i in predicted:\n  test_predicted.append(i[0])\n\ntest_predicted","bb7764cc":"df_predicted = price_volume_df[1:][['Date']]\ndf_predicted.head()\n","64557ea9":"df_predicted['predictions'] = test_predicted\ndf_predicted.head()","9ae3061b":"# Plot the data\nclose = []\nfor i in training_set_scaled:\n  close.append(i[0])\ndf_predicted['Close'] = close[1:]\ndf_predicted.head()","f14d5f6f":"from sklearn.metrics import mean_squared_error\nmean_squared_error( df_predicted['predictions'], df_predicted['Close'])**0.5","9a808773":"# Plot the results\ninteractive_plot(df_predicted, \"Original Vs. Prediction\")","1d2433a7":"# IMPORT DATASETS AND LIBRARIES\n","9efc5c19":"# PERFORM EXPLORATORY DATA ANALYSIS AND VISUALIZATION","d3b6ba4a":"**LSTM model is able to predict better when we added more parameters to it.\nLinear model is simple but not suggested for less accurate & more error prone.**","ba2b1184":"# PREPARE THE DATA BEFORE TRAINING THE AI\/ML MODEL","ff80b260":"# TRAIN AN LSTM TIME SERIES MODEL","497a1271":"# BUILD AND TRAIN A RIDGE LINEAR REGRESSION MODEL"}}