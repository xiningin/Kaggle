{"cell_type":{"5f98db82":"code","cff90484":"code","53c4bc47":"code","fd072761":"code","5c6fb11a":"code","ffb32185":"code","e89f2ed8":"code","a651ed5b":"code","6ffa4835":"code","8bbf4a28":"code","dbf75f0e":"code","88c68638":"code","82c4f380":"code","7f4e9b10":"code","e348408d":"code","a357444c":"code","332aef4b":"markdown","c4c08575":"markdown","f784b5b6":"markdown","071e4222":"markdown","c5f86a77":"markdown","93f240ab":"markdown","0e068fd8":"markdown","22e71942":"markdown","1998d45e":"markdown","c61ba2c5":"markdown","37c0b124":"markdown","4d71f096":"markdown","6fba63b9":"markdown"},"source":{"5f98db82":"import numpy as np \nimport pandas as pd\nimport os\nimport sklearn.datasets as dt\nimport matplotlib.pyplot as plt\nimport seaborn as sn\nsn.set()\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))","cff90484":"NOMES = [\"A1\",\"A2\",\"A3\",\"A4\",\"A5\",\"A6\",\"A7\",\"A8\",\"A9\",\"A10\",\"A11\",\"A12\",\"A13\",\"A14\",\"A15\",\"A16\"]\ndados = pd.read_csv(\"\/kaggle\/input\/credit-screening.data\",na_values = '?', names=nomes, sep=\",\")\ndados.head()","53c4bc47":"dados.describe()","fd072761":"dados.isnull().sum()","5c6fb11a":"dados.fillna({'A1':dados['A1'].mode(0),'A4':dados['A4'].mode(0), 'A5':dados['A5'].mode(0), 'A6':dados['A6'].mode(0), 'A7':data['A7'].mode(0)}, inplace= True)\ndados","ffb32185":"dados.fillna({'A2':dados['A2'].mean()})\ndados.fillna({'A14':dados['A14'].mean()})\n","e89f2ed8":"dados[{'A1', 'A4', 'A5', 'A6','A7','A9','A10','A12','A13'}].astype('category')","a651ed5b":"dados['A16'].astype('category').cat.codes","6ffa4835":"dados = pd.get_dummies(data, columns=['A1','A4','A5','A6','A7','A9','A10','A12','A13'])\ndata.head()","8bbf4a28":"dic = dt.load_digits()\ndic.keys()","dbf75f0e":"X = dic.data\ny = dic.target\nfrom sklearn.model_selection import train_test_split\nX_train, X_test, y_train, y_test = train_test_split(X,y)\n","88c68638":"y_train.shape\nX_train.shape\n","82c4f380":"y_test.shape\ny_train.shape","7f4e9b10":"from sklearn.neighbors import KNeighborsClassifier\nknn = KNeighborsClassifier(n_neighbors=3)\nknn\nmodel = knn.fit(X_train, y_train)\ny_pred = model.predict(X_test)\ny_score = model.score(X_test, y_test)\ny_pred\ny_score","e348408d":"from sklearn.tree import DecisionTreeClassifier\ndtree = DecisionTreeClassifier()\ndtree.fit(X_train,y_train)\npred = dtree.predict(X_test)","a357444c":"from sklearn.metrics import classification_report, confusion_matrix\nprint(classification_report(y_test, pred))\n","332aef4b":"1 - Importar arquivo (credit-screening.data) procure o dataset no Kaggle, caso n\u00e3o encontre, importe o arquivo dispon\u00edvel no Google Classroom. Importe o arquivo substituindo valores faltantes \"?\" por NaN e inserir o nome das colunas utilizando o vetor abaixo.\n\n#### nomes = [\"A1\",\"A2\",\"A3\",\"A4\",\"A5\",\"A6\",\"A7\",\"A8\",\"A9\",\"A10\",\"A11\",\"A12\",\"A13\",\"A14\",\"A15\",\"A16\"]5 - ","c4c08575":"*  Colunas Categ\u00f3ricas: A1, A4, A5, A6, A7, A9, A10, A12, A13\n*  Colunas Categ\u00f3ricas com valores faltantes : A1, A4, A5, A6, A7 preencher com a moda (valor que mais aparece na coluna)\n*  Colunas com valores cont\u00ednuos: A2, A3, A8, A11, A14, A15\n*  Colunas com valores cont\u00ednuos com valores faltantes:  A2 e A14 preencher com m\u00e9dia","f784b5b6":"6 - transforme todas as colunas com valores categ\u00f3ricos para o tipo \"category\"  use a fun\u00e7\u00e3o astype\n        * Colunas Categ\u00f3ricas: A1, A4, A5, A6, A7, A9, A10, A12, A13","071e4222":"5 - Preencha os campos faltantes das colunas com valores cont\u00ednuos com a m\u00e9dia\n        * Colunas com valores cont\u00ednuos com valores faltantes:  A2 e A14","c5f86a77":"10 - Execute o algoritmo dos K vizinhos mais pr\u00f3ximos com K=3, guarde o resultado da predi\u00e7\u00e3o em uma nova coluna do dataframe \"predictKNN\"","93f240ab":"7 - Transforme a coluna objetivo  A16 primeiro para o tipo category e depois fa\u00e7a a codifica\u00e7\u00e3o num\u00e9rica utiliando a fun\u00e7ao df[\"A16\"].cat.codes","0e068fd8":"3 - utilize   df.isnull().sum() para saber em quais colunas h\u00e1 valores faltantes NaN\n","22e71942":"4 - Preencha os campos das colunas com valores categ\u00f3ricos com a moda dos valores da coluna, para isso use a fun\u00e7\u00e3o fillna( ) e moda( )\n    * defina um vetor com as colunas a serem alteradas\n    * use um la\u00e7o para varrer o vetor   (for n in colunas: df.fillna...)","1998d45e":"9 - utilize train_test_split para criar bases de treino e teste","c61ba2c5":"11 - Execute o algoritmo de \u00c1rvore de Decis\u00e3o, guarde o resultado da predi\u00e7\u00e3o em uma nova coluna predictAD","37c0b124":"1. Title: Credit Approval\n2. Sources: \n    (confidential)\n    Submitted by quinlan@cs.su.oz.au\n3.  Past Usage:\n    See Quinlan,\n    * \"Simplifying decision trees\", Int J Man-Machine Studies 27, Dec 1987, pp. 221-234.\n    * \"C4.5: Programs for Machine Learning\", Morgan Kaufmann, Oct 1992\n4.  Relevant Information:\n    This file concerns credit card applications.  All attribute names\n    and values have been changed to meaningless symbols to protect\n    confidentiality of the data.\n    This dataset is interesting because there is a good mix of\n    attributes -- continuous, nominal with small numbers of\n    values, and nominal with larger numbers of values.  There\n    are also a few missing values.\n5.  Number of Instances: 690\n6.  Number of Attributes: 15 + class attribute\n7.  Attribute Information:\n    A1:\tb, a.\n    A2:\tcontinuous.\n    A3:\tcontinuous.\n    A4:\tu, y, l, t.\n    A5:\tg, p, gg.\n    A6:\tc, d, cc, i, j, k, m, r, q, w, x, e, aa, ff.\n    A7:\tv, h, bb, j, n, z, dd, ff, o.\n    A8:\tcontinuous.\n    A9:\tt, f.\n    A10:\tt, f.\n    A11:\tcontinuous.\n    A12:\tt, f.\n    A13:\tg, p, s.\n    A14:\tcontinuous.\n    A15:\tcontinuous.\n    A16: +,-         (class attribute)\n8.  Missing Attribute Values:\n    37 cases (5%) have one or more missing values.  The missing\n    values from particular attributes are:\n    A1:  12 ; A2:  12; A4:   6;  A5:   6; A6:   9;   A7:   9;    A14: 13\n9.  Class Distribution\n      +: 307 (44.5%)    -: 383 (55.5%)","4d71f096":"8 - utilize a fun\u00e7\u00e3o pd.get_dummies para transformar todas as colunas categ\u00f3ricas para indicadores de vari\u00e1veis. \n### df = pd.get_dummies( df, columns=['A1','A4','A5','A6','A7','A9','A10','A12','A13'])","6fba63b9":"2 - Execute a fun\u00e7\u00e3o describe para ver um resumo estat\u00edstico descritivo"}}