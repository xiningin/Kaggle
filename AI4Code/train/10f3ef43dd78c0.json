{"cell_type":{"1f26503e":"code","4b22e7c5":"code","dac3c75d":"code","02fd65ef":"code","0ec5fa2d":"code","397a9fe9":"code","2d74fca3":"code","359cef57":"code","6f27791b":"code","ad2af134":"code","6e067223":"code","688b511f":"code","24759d2d":"code","44a17e19":"code","aea44a02":"code","f1d2a8ff":"code","db0d0646":"code","3f90704c":"code","0138ec42":"code","2a29bcf1":"code","1eb1dd45":"code","b5d70ef7":"code","29529512":"code","6cd50cd5":"code","69d743ab":"code","7821e194":"code","a8ab6c0c":"code","3d0d2006":"code","d0891475":"markdown","8f4dad4c":"markdown","bac6d04a":"markdown","b1a3608b":"markdown","22de7ff4":"markdown","b0d9c27f":"markdown","16f3cdf2":"markdown","b1d88540":"markdown","1284f91e":"markdown","cad11acb":"markdown","229ae3c2":"markdown","11c0434d":"markdown","db770621":"markdown","2e412c8b":"markdown","f7fc60a0":"markdown","a95fec38":"markdown","077e6dfb":"markdown","dec5d321":"markdown","5439bad4":"markdown","238b574e":"markdown","f02db282":"markdown","854d3b1f":"markdown","8a229638":"markdown","41e5bfbd":"markdown","c6028c2b":"markdown","13e0e9cd":"markdown","f9e8a15b":"markdown","72dfa69f":"markdown","041a84b2":"markdown","ed90acd6":"markdown","83ecb176":"markdown","14138def":"markdown","899fa1a6":"markdown","2cf6fbc6":"markdown","46c5a23e":"markdown","694caf31":"markdown","db935399":"markdown","cbafbd88":"markdown","97c7d213":"markdown","846d279b":"markdown"},"source":{"1f26503e":"import pandas as pd \nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport plotly.express as px\nimport plotly\nimport tensorflow as tf\nimport plotly.graph_objects as go\nfrom nltk.corpus import stopwords \nfrom nltk.tokenize import word_tokenize \nfrom nltk.stem import WordNetLemmatizer \nfrom nltk.tokenize import TweetTokenizer\nimport copy\nfrom tensorflow.keras.preprocessing.text import Tokenizer\nfrom sklearn.model_selection import train_test_split\nimport tensorflow.keras.layers as L\nfrom tensorflow.keras.losses import MeanAbsoluteError\nfrom tensorflow.keras.optimizers import Adam\nfrom tensorflow.keras.preprocessing.sequence import pad_sequences\nfrom wordcloud import WordCloud\nplotly.offline.init_notebook_mode (connected = True)\n\n","4b22e7c5":"# Importing the Trip-Advisor-Hotel-Review Dataset\ndata=pd.read_csv('..\/input\/trip-advisor-hotel-reviews\/tripadvisor_hotel_reviews.csv')\n\n\n# Importing the Sentiment of the Reviews \nscore=np.load('..\/input\/score-trip-advisor\/score.npy')\n\n\n# Making a Sentiment Column in the data\ndata['Sentiment_Score']=score\n\n# This score denoted Postive remark is its higher than 0.5 ; Negative if it's lower than -0.5 and neutral otherwise\nscore_sentiment=[]\nfor i in data.Sentiment_Score:\n    if i<=-0.5:\n        score_sentiment.append('Negative')\n    elif i>=0.5:\n        score_sentiment.append('Positive')\n    else:\n        score_sentiment.append('Neutral')\n        \n        \n# Addint the sentiment to the data\ndata['Sentiment']=score_sentiment\n\n\n# Having a look at the data\ndata.head()\n","dac3c75d":"data.isna().sum()","02fd65ef":"sns.countplot(data['Sentiment'])","0ec5fa2d":"# Grouping the data on the basis on Rating and Sentiment and counting the sentiment score\ndata2=data.groupby(['Rating','Sentiment'])['Sentiment_Score'].count()\n\n\n# X here is the Ratings and Y is the Sentiment\nX=[i[0] for i in data2.index.values]\nY=[i[1] for i in data2.index.values]\n\n# Plotting the Bar Graph \nfig = px.bar(x=X, y=data2.values, color=Y, title=\"Sentiment Distribution WRT Ratings\",labels={'x':'Ratings','y':'Total Number'})\nfig.show()","397a9fe9":"# l is the list which has the names of the labels which is 1,2,3,4,5 and y is the count of these labels\nl=[]\nr=[]\nfor i in range(1,6):\n    l.append(i)\n    r.append(len(data[data['Rating']==i]))\n    \n# Plotting a countplot pie chart for ratings\nfig_pie = px.pie(values=r, names=l, title='Rating Distribution of the data')\nfig_pie.show()","2d74fca3":"# Jointplot on the basis of Rating and Sentiment Score of the data\nsns.jointplot(data=data,x='Rating',y='Sentiment_Score',kind='reg',color='orange')","359cef57":"# Violin plot of Rating and Sentiment Score with box plot embedded in it\nfig = go.Figure()\n\nRatings = [1,2,3,4,5]\n\nfor rating in Ratings:\n    fig.add_trace(go.Violin(x=data['Rating'][data['Rating'] == rating],\n                            y=data['Sentiment_Score'][data['Rating'] == rating],\n                            name=rating,\n                            box_visible=True,\n                            meanline_visible=True))\n\nfig.show()","6f27791b":"# Getting all the reviews termed positive in a single string and forming a word cloud of the string\ntext =''\nfor i in data[data['Sentiment']=='Positive']['Review'].values:\n    text+=i + ' '\n\nwordcloud = WordCloud().generate(text)\n\n# Display the generated image:\nplt.imshow(wordcloud, interpolation='bilinear')\nplt.axis(\"off\")\nplt.show()","ad2af134":"# Getting all the reviews termed Negative in a single string and forming a word cloud of the string\ntext =''\nfor i in data[data['Sentiment']=='Negative']['Review'].values:\n    text+=i + ' '\nwordcloud = WordCloud().generate(text)\n\n# Display the generated image:\nplt.imshow(wordcloud, interpolation='bilinear')\nplt.axis(\"off\")\nplt.show()","6e067223":"# Getting all the reviews termed Neutral in a single string and forming a word cloud of the string\ntext =''\nfor i in data[data['Sentiment']=='Neutral']['Review'].values:\n    text+=i + ' '\nwordcloud = WordCloud().generate(text)\n\n# Display the generated image:\nplt.imshow(wordcloud, interpolation='bilinear')\nplt.axis(\"off\")\nplt.show()","688b511f":"data2=copy.deepcopy(data)","24759d2d":"# This function is to remove stopwords from a particular column and to tokenize it\ndef rem_stopwords_tokenize(data,name):\n      \n    def getting(sen):\n        example_sent = sen\n\n        stop_words = set(stopwords.words('english')) \n\n        word_tokens = word_tokenize(example_sent) \n\n        filtered_sentence = [w for w in word_tokens if not w in stop_words] \n\n        filtered_sentence = [] \n\n        for w in word_tokens: \n            if w not in stop_words: \n                filtered_sentence.append(w) \n        return filtered_sentence\n    x=[]\n    for i in data[name].values:\n        x.append(getting(i))\n    data[name]=x","44a17e19":"rem_stopwords_tokenize(data2,'Review')","aea44a02":"# Making a function to lemmatize all the words\nlemmatizer = WordNetLemmatizer() \ndef lemmatize_all(data,name):\n    arr=data[name]\n    a=[]\n    for i in arr:\n        b=[]\n        for j in i:\n            x=lemmatizer.lemmatize(j,pos='n')\n            x=lemmatizer.lemmatize(j,pos='v')\n            x=lemmatizer.lemmatize(j,pos='a')\n            x=lemmatizer.lemmatize(j,pos='r')\n\n            x=lemmatizer.lemmatize(x)\n            b.append(x)\n        a.append(b)\n    data[name]=a","f1d2a8ff":"lemmatize_all(data2,'Review')","db0d0646":"# Putting the values of Review column in X variable\nX=data2['Review'].values\n\n# Making all the comma seperated lemmatized words back into a string and putting it back to X\nsentences=[]\nfor i in X:\n    s=''\n    for j in i :\n        s+=j+' '\n    sentences.append(s)\nX=np.array(sentences)","3f90704c":"tokenizer = Tokenizer()\n","0138ec42":"tokenizer.fit_on_texts(X)","2a29bcf1":"X = tokenizer.texts_to_sequences(X)","1eb1dd45":"# Checking the vocabulary size \nvocabulary_size = len(tokenizer.word_index)+1\nX=np.array(X)\n\n# Padding the reviews to the length of 600\nX = pad_sequences(X, padding='post', maxlen=600)\n","b5d70ef7":"encoding = {1: 0,\n            2: 1,\n            3: 2,\n            4: 3,\n            5: 4\n           }\n\nlabels = ['1', '2', '3', '4', '5']\n           \ny = data['Sentiment_Score'].copy()\ny.replace(encoding, inplace=True)","29529512":"X_train, X_test, y_train, y_test = train_test_split( X, y, test_size=0.05, random_state=42)","6cd50cd5":"# hyper parameters\nEPOCHS = 10\nBATCH_SIZE = 100\nembedding_dim = 16\nunits = 76\nmodel = tf.keras.Sequential([\n    L.Embedding(vocabulary_size, embedding_dim, input_length=X.shape[1]),\n    L.Bidirectional(L.LSTM(units,return_sequences=True)),\n    #L.LSTM(units,return_sequences=True),\n    L.Conv1D(64,3),\n    L.MaxPool1D(),\n    L.Flatten(),\n    L.Dropout(0.5),\n    L.Dense(128, activation=\"relu\"),\n    L.Dropout(0.5),\n    L.Dense(64, activation=\"relu\"),\n    L.Dropout(0.5),\n    L.Dense(1, activation=\"relu\")\n])\n","69d743ab":"model.compile(loss=MeanAbsoluteError(),\n              optimizer='adam',metrics=['MAE']\n             )\n\nmodel.summary()","7821e194":"history = model.fit(X_train, y_train, epochs=EPOCHS, validation_split=0.12, batch_size=BATCH_SIZE, verbose=2)\n","a8ab6c0c":"# summarize history for accuracy\nplt.plot(history.history['MAE'])\nplt.plot(history.history['val_MAE'])\nplt.title('model MAE')\nplt.ylabel('MAE')\nplt.xlabel('epoch')\nplt.legend(['train', 'test'], loc='upper left')\nplt.show()","3d0d2006":"# summarize history for loss\nplt.plot(history.history['loss'])\nplt.plot(history.history['val_loss'])\nplt.title('model loss')\nplt.ylabel('loss')\nplt.xlabel('epoch')\nplt.legend(['train', 'test'], loc='upper left')\nplt.show()","d0891475":"# This model is pretty good as we can predict the score quite good with low loss and Less MAE","8f4dad4c":"# Everybody Loves Trips","bac6d04a":"## Let's see the sentiment distribution with respect to Ratings","b1a3608b":"Most of the people rates there experience with a 5 star ratings :)","22de7ff4":"# Importing all the Required Data","b0d9c27f":"# Model Training On ML","16f3cdf2":"## Let's Lemmatize the data now :)","b1d88540":"Now the reviews are lemmatized too :) ","1284f91e":"Calling tokenizer and fitting it to the texts","cad11acb":"Since we don't have any nan values in the Review Column we dont need to fill it :)","229ae3c2":"So before the trip starts , we are curious to know where we are going to stay and how good it is :)\nSo the trip advisor helps us by providing the reviews of the place and helps us getting to know the place better :)","11c0434d":"# Violin Plot For Ratings and Sentiment Score","db770621":"Wow so we don't have any na values so Let's start","2e412c8b":"# Let's Lemmatize and Tokenize The Reviews","f7fc60a0":"# Train\/Test Split","a95fec38":"# Loss of Train vs Test","077e6dfb":"## Checking For Null Values","dec5d321":"# Visualizations","5439bad4":"![# Everybody Loves Trips](data:image\/jpeg;base64,\/9j\/4AAQSkZJRgABAQAAAQABAAD\/2wCEAAkGBxISEBIQEBAQEA8PDw8PDw8QFRAQDw8PFREWFhUVFRUYHSggGBolGxUVITEhJSkrLi4uFx8zODMsNygtLisBCgoKDg0OGhAQGi0lHR8rKy0tLS8rKy0tLS0tLS0tLS0rLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLf\/AABEIAOEA4QMBIgACEQEDEQH\/xAAcAAABBQEBAQAAAAAAAAAAAAADAAECBAUGBwj\/xABGEAACAQIDBQQGBgcGBgMAAAABAgADEQQSIQUTMUFRYXGBkQYUIjKhsQdCUsHR8BVTYnKS0uEjJIKTsvE0Q1Rjo8IWJTP\/xAAaAQADAQEBAQAAAAAAAAAAAAAAAQIDBAUG\/8QAKBEAAgIBAwQCAQUBAAAAAAAAAAECERIDEzEEIUFRFCJhMlJxobFC\/9oADAMBAAIRAxEAPwDBCRwks7uSFOdpwZFYJHCS0KckKUBZFTJJCnLe6jijGLIqCnJCnLYoyQpRiyKgpyQpy0KUmKUBWVVSOactrSjhIBkVMsTLpLRpRClc2jCypuoskt7u2kiyRFWU3XkJBqctlDIbqMMim1OQKS2UkWpwCymUkGSWysgVhQ7KpSQKS0VkGSIaZWKyBWWSkgVgVZXyyOWWCsbLApMBkjwuWPAdm4KUKtGXFoQyUJFnHkUBRkxRmitGSFCFiszxRkhRmgKMkaMLCzOFKSFGX9xH3MdhZQFGSWlLu5i3UdhZR3UkaFvGXN1EacLCykacdqNrS0EjNSgNMqVKPMQZSXivKQNKMbZRyQZSXjTkMtoWJMoGnBtTl5qcG9PSOxopMkEVlx6cGKRMVlqymySBWXGp2gmSBRVZYMrLTJIlIDsrZJFllgrIFYDTAWihssUB2dyMNaE3UuLS6iHpYYc5zZGOF8GduIUUOk11wI5axPhbHSLcRpsSMpcPHOHmqKEY0Y8w2jM9Xi9Xmnu+yIpDMW0jM3MW5mjupFkjyFtlDcQbUZoGnImlGpCcDP3MgaU0DTkDTlZE4meacGac0TSgzSjyFiZzU4Nkmg1KDajHkGLM9kg2pzRq4YjjBvQAW5OvSLNGq05eTNalBshl56Ykckdi7WZ26kGpTRNODelHYzOKSDLLzU4B6caZLsqMkGUlsrBusYWVssUNligGR6cKcsU0A5SSU4YJOBs64xHRuyKwkgkmEkdjbuByRjTEPliyR2JxKxpxt3LRSNklZE4FQ04xpS3kkSkeQsCoaUiacuFJErHZOBSNKQalLxpyJSPIlwM80oxoS81OQKR5AtMobqDNMS\/UQQBpwyKUKM6rTPE+crtTmg6QD0pakZyg7KW714SS0dLyxu\/KRNONyCMK5KlSnBtTFuEukQFV4W2DxRRqU5WdZdqQDiaIwbKjCCIllhBMspEgrRpPJHjEerKkIqyQWTUTzLPVUSISTCQgWOFistRB5Y+WFyxWisdAckbJD2jZY7CgGWMVh8siVhYYlcrIlYciQIjyFgAKxssKVjWjyEtMCyQZWGYQZEWRagkAqLAOkuMsgyxpsGkUjTg2piXmSCdJaZkyg6QDCaLLAtTmiZhKLM5xKzrNCqkrOk0TOeUWUWWCZZcZIF0lKRniyoyQTLLjJBMkeQUVssUNlihkFHqIb4yYfWY9LGDr8uPZLaV7637Z5G4e7t0aQEkBKQqmFV487DEsRXgc0fNHkKgt4rweaK8eQUSJkTHitCx0RIkLQtoxELACRIlYYiRIhYACsiUhyJEx2DRXKSJSHMgxlpkNAGEGwk6jf0lZ6o53jslxGeV3flKW19uUMOL1qoTS4T3qjdyjWee7e+kGq7ZMKu6Sx9twGqk9g91fjKySEtGUuD0epK9QTxvD+mWPThiWYdKio4+Iv8ZrYL6RMTZhUpUahAJFsyEgceZ7+EtTRnPppHpJAgHInMbB9NFxNVaJpOlRw1tVdLhSSL6HgDym\/VBve00Ukc89GUeUOy6XvBMZIKeukQpyrMHFg7iKT3UULFizoMO\/P\/eaNBuvgZRpL+OkuU0nzymfTSiXUbhDK8rqPjCiaKZk0HzyStAhhHzTTMnEsBpIGV1b5wimUp2JoMDHgw0lnl2RROKDLyD1hKyCgpMGXld6\/aLSs9flFkUol1qggnq9DM81zw5cIJz2wzK2y\/UxHLpxMr1a48IC\/eRFlHW46c48hYohUq31BnBfSLt\/EUiKNJ92r0w7OulQ3YiwbkNOWs791Xunl\/0rsN9TtqTQUWHEnePylJscUrOTquWJLEsx1JJJJPaZSqn2h3fjOrwfowWw+\/r1hQzGy0d3Uq4gC9gzoPcU206i0xq+ws2INJK9OygMKla9Gm+nAXGh46Eco0rKlqxTqzniYXB++vbceYIkcZhylR0OXMjspKkMpINtDzHbFg77xP3lHxloiXDNn0GP\/wBhhu13HnSeezGjPEfQ8H1\/C+0V\/vFMZhYnjqNevDxnvTkSk6OfXVso+rDjaQfD9lpdFQQT1BLUzklplL1ePLWYRpeRlizURLeEMrW\/P9IEMOz4SQE+UykfRlhakIHlQDsj5o91onEuhu2OKnbKG9Pwkd7LWv8AgMDRNbt5RhiRx\/AzOFXt\/PfEKn51\/JlrqH6DbNM4n89IxxX50mdn7\/COLzRdQw2kXKmLPb+EBUxB\/DWC3R\/2hFoTWM2xYpAzUJ5\/hFrDZQO+RzCVkl5EDse6DYGFaqIJ647+HSG6ilBkTflAYqruxmbMFJsCAxF+8DQdp0hGxPYey95ienO02wuFpV0YGrVfIpf2sgswuoPDgOEqE3J0TqRxVhMVtJtBmSirXs1ZlDNYa2vp4gP3TjMd6U0FqlqaPXqXytiH\/syAPsnVrdgyjs1nKu9RizkuzZSWqEnNbNl49LkCVq6qFYBgSMoGXVCATdgfK064w9nK5HqWE9I8F+jRVxDUKb1a9QLQOVmyLUt\/+YvpbW9uc47CbQoPtI5XQYQrm0O7RWKW46W1tOOqYM5c+Q5dLtbS5Jtr4QvqhVCTmvUoscrKy2tUW1ieIIsbjrLhHEzklLuG25SRcTWWmb0xVbIQcwyk3GvPjKmHPtp++v8AqEq027YSm\/tDX6w+cZtfajU2C2XG4Y9MXQH\/AJQJ7kX7Z4Hh62TEKx0WnXViRqQFqX4c+E9gw+PFWmlRDdHUMp4XB6iTJMmTRsu46wb1xMpqzWtK7u5jSMm0a\/rIimL7cUoyo7sSV4b1aLczwVCK8HrZAS0kG7oXdSQpCGCYZFYmMQJa3XZG3Rh8ePIZlbL3RAiHNI9IgnZDbS4KyAB+ySDHpCimelpIUTLUWJyQE17dkgcSeQMurheojmko5SlpLy2TmZzVHPDT4wLUah5nwmox6CDZjyE1jGK4DJmcMC\/O\/jH9SbqPhLNQvB5W6wcW\/I1qMA2D6kd\/WZG3Ng4eoj1aiK9VKLhGN7rZSRblx1m\/3zivSXbtUVKlFAVRfYNwFzAqL3J1sb8uUSi4v9Q8nLtR5dVqEvYkmwdVHHqAAO6RFMhbGyjLY348b8BL22q4FRASoABuF+r\/AFmXWxi\/VBPaZ6MZWrOOUKdEXrcRofZCXsL5QwIHmBD+us4ZWNxkYjViBYDgCTaZzVbm9o61rX04qV85pZOIy0yImU+WsYVJJ6gJ0uBpoTflrr33gMJil9t9Prv\/AKjPWvQumpwGHyge4SwH2s5uT4zyM1bkm\/EkzR9GKzLjcPkYKzYikl9bEMwUggHUaxSVoSPYzRPYIGpRmkUHWRIA5GYKbG4ozN2IpoXHSPHmyMEdm9oIrJZTGM8WU5LlHWhCmJMUwOcCzGDLtI+Wo+AotFR1jhR1Ep+0Y3q546zSPUZcIeP5LqleokrCUVoHpbxlimlustaj9CaXsIxHSIITwEkF7DJBiOctansQhh36SJwbdRJ709ZE1f2vKVnAn7Dep9WEHUoqOLSTG\/WCOG7ItyPhFK\/LKmIyjgSZRq1rcBNZsGe3wEq18Jbjp3y4tt1RplFLkw9qYqsKTbl6S1SQE32fd3vr7upNr2A4zkD6LYqu5rYzEMWZg26oAUkNh+0CzCwFwyjxno+D2SSzED+0Fszv7wB1so+qNOA8bnWC2h6P1m92qqaEaBtQeI7p2QjGPJyz1JP9J59W9G8NRqOXwtMH32z5qhJbUABmKjy0lComFyuauEwxo0wc7JTFKpc3yqjU7e0T954CdH6QbFrUVXM1PKzFRZm0GUlnYkWAAGpnPYDD+s1FKhfV6VTJhlqEU1xGIbQ1GvyA1tqQotrrOlYtWYfa+5k7H9HKJvv828FBsQKKkAimOGdjwLX0AHDU9JmHGUPq4OkB+09dj5hh8p1+G2Q+H2hVWpWXEHEYOu++UZcxLrcZbm1rdeBE4FeA7hKVDttlxsRQ54On\/hqVl+ZM1v8A43h2ak1qipXwTYhUUqzb1QGZASBfQ9k52dfsnFf3PDVeeCxm7e\/6mrx8P7QfwxMds5j9G4R\/drvTJ4LWpuPN6ZcfCWcPsXVCmWoKZBL4KqN\/cc9bsD3KILaGBZcTUw6KzstRwiIGdit7rZRqdCJsYH0ExtSxaktIcQazBSO2wuR5CN0uQTZ2vo7trCZBQFastRTquMYmtc8szcewTZrKOs5UeitYrTw1atSZkDuHdGrK6E+6GLK4ZTzBGjASvjdn4rB+6zVKFwApYkC50CvyPD2WA6AsZzuCb7MpTXlHU2XrFOO\/TX\/ZxX+W8Ue1L2VkvR7ucJ2xjhR2y\/aRKzB9PEzWozPOGWQOFHIHymllHSKZ\/GRW6zNXCH7IHfCjCdbS5B1a6r7zKt+FyBeC6aC5DckwHqo744pfs+dpTxePztkpk5Qt3dTbW5AA014Gcnjsa27quKj1KlJgGzElAGPL4jpE4QXCNYQlLlnaVaqL7zIveyiZ+J23hE97EU+4Xb5Tzv1x3uz5Aq8TlF+4dTMrF1C7Ei4B69JP19HTHpvbPR6npdghwZ3\/AHUsPNiJUqfSBhU92k57zT+4mecPT66wL0x0lRUfRfx0egVvpNpj3aHmx\/llCt9J7cqK\/wAT\/cBOGqACVKlVOomySZD0Yo7ip9JdQ\/8AKp+JqmBX6SaoYMKWHuOGbfWB6984sFTwIiNOXGMV4IemmdhW+keuQbDDqWYscu+ve3aJlVvTjFksy10TNa4G8sLC2gtp4TBamOkg1IdJokvRG0H2htrEYmyVsUXQnVSzqtu0EAHx7JsHaWGvQK75BhwN2FOHYZg3tFlLXubC5\/J5t6Q+Mi1ES0yJaV+Tr8BtLDpXNc1azDcGgKe6uqKaivpkJ5r8YtpU9mYirVqZnw4dKQpLSpVEFKqubOxBUAhrrpp7vHWcaaIkcluFx4mPsQ9J+zRbYdMEWxmEYZtc9Q0iV5DVdDNDYmzSlLFUnrYV6deiMppVke1VL5dOntHyEwVqsObHszML+MnTxV2AqUkyk6ld47DuDMQZV2Q9OSPXPQzF0Xwy1SaaVairvWAAZyFAOZudiCNZvh6X6wHuN54A72digGW5ym2U5b6aix4Q1PadVeFSqv7tSr8iSJjLSt3ZSi14PbtpIhUOhu9I5146ge8PEfIQrYikVGbLlccGIswI4EHjPF6XpJiV4V6luhFJwR23WQrbSNY5qtPB1Db3qqIlQjvFQH4RLR\/In2fH9nrv6HwX6mn\/ABt+MaeP3of9Ngv8+p\/PFHtv9wu3r\/D6oLQZeDMgVnPPVfhEqIQ1JE1YMrGtMXqTLxRM1Zx+Mrmq4p1SczV8yL0pWN7eU6TalQrRqMOIU28dJzWGpBCmIqsTZHK9BYWA7\/aMxlN3TZ0aMaTkaW0q4pUSwFvdRQOpIUfnsnFbZxWuSj7IrH+1UfWOb2R4WM6rHYxK1Co9M3FKxa\/Xu7rzjsJWW4qGzMqsVDdx+MJzvg6dCBUxDWCr1Gbz4fC0qVSI20cXnYMBlGVRl6WFvulF3PWOLOoO7CUNoYoIL8zwEIH6nQC5mHiKhqMWPDgo6CbwVmWrPFFfEV3fiSB0HD+sqNQM0VS\/7K3tfU3PQAak9kaphx0rXF7nKuluJKg3E6FRwSbZk3KnQkHsmjgdpfVfnwb8YCvS0vcMvAMOR6EcjKFRbS6FGbR0jVJA1JSweIzJr7y6HtHKTZ4G+Vqw1R\/mPnGNSV2f7oxeMkOXkS0AXjZ5Vkhi0SVSpDKSGBBBGhBHAgwGeNnjsQVjFmgc8YVI7EGJkGAPECR3kW8hYC3a9BFG3kULFSPq7fRjVmUK37VvOQfEC9g9\/MT5d9f2sNs1jVkKuJyqW42BOnGZDYluog1xp3lJSwVXrKrHh7OVj9wi0uuU9RQ9j2wm0Kr4igrISlnbMmpLqCVsfnMnF5qiLTDjKAyKObM3DyNpr7GValZ6YxAYKaj7ukbFfbHG3axvccxN87LoK5rFBmym7MSRlHH2Tp8J6mn00p\/axvXjp\/WjjdrYamKBpJlsCqNlKgkqQG1PE9Zz1AUqbkmrhwoJyjeAsLcNADC1trYYCqKymp\/e6tRFWwNma6txGljKdbb2z9ScI7E3JJykknncuZFJ9zojKUVSM\/GBHctv6JueOZv5ZVegn62h\/Hb5iWz6QYEH\/gge9UP\/ALwT+kmz+eAB\/wAFP+ebRggetNeDH2oFWkxWpSa9lslRHbXsHKYnIAceHjNzbu08FVpZcNhjQqZwzNYAFADp7x52nP06tiG+yQbdxvNoKjKc3Lk2zgLLqSqAFfZ1LDTyudT1v2TPxmBy+0NANb6BlPs8bHsPnNP0hqsKlgRkYK9PKABltfTQ8z8ZWwe0Du6qF8qMjMyhUYVapACi5F1HPQ8u2bR4OdszG19rqwpVQLHMWuVbTn7J8u2ZWKW2h4gkHwnY+j2ER1JcKc1elYMxDZFJZiB0tecltFwXcr7rVHK\/uliR8JSCyGBexPavyhmaU6bWPhCGpCjSMuwUtGLwW8ERYfaHkYx2TzxZ4O4+0PIxr\/tD4x0Kwm8jZ4PxX4\/hF4r8fwjCyeeNvJDxX4\/hF4jzgKwm8i3kH4jzjeI8xAAu8igfEeYigI93\/TrdB8Yx28fsjznLnEdsY4ifNfE0n\/yduKOnb0g\/Z+MrV9tBxldARxGpFjyNxwnOnEQTYjj3Rx6PTTtIKR1uy\/SVcMxajRQEqUu1ycpYHU3vxAluv9IVYgqVTUWNgLa8eM4J8RAviJ1Q03FYpuv5ZEoRbto3tq7WSrTy7tVYEWYWuFAIt3W+U52pSHWDfEQD1\/ul6WitNVHgHIK1BLasQ1zroRaBrUKeWwzF73Lk2Fvshfv+EE9f7vlAPW+6dMUzKUhGjb60GaXbINVkGqzVJmTZtU9pqaK0qql93pTccVS4NiDx4W7rcLSk1RDozHJp7KqFLCxvfXnceUzWqyJqS1ZDOhxO2xu2p0lKey1Olc33VNrZ7HiWNuPKc5Uo35iJqnz+EiakruTwRbDnqJA4c\/akmqSIqSu47Y3q56iMaB6iS3kbPAVsjuG6iNuG6iS3msRePuFshuG6iNuW6iTFSNnj7hbI7luoi3TdRJB42eHcLZHdN2RbluySzxZ4wtkd0eyKSzxRBbPRP6Rm+6KKeOeoQgakUUaECbnBN98aKaIzYB4Fvz8IopojNgn5wLxopqjMEfukH4xRTREA2kfwiilIQ35+Egef55RRRiInj4Ro0UYCMUUUaERMdo0UYhuvfFFFGAwiiigA0cxRQBjxRRRCP\/\/Z)","238b574e":"# Word Cloud For Neutral Reviews","f02db282":"## Encoding","854d3b1f":"Now our data don't have any stopwords  :)","8a229638":"Using tokenizer to convert the text to sequences","41e5bfbd":"# Word Cloud For Positive Reviews","c6028c2b":"# Importing Packages","13e0e9cd":"## Distribution of the sentiment with the Reviews","f9e8a15b":"# Hope you all liked the file ","72dfa69f":"## Ratings Vs Sentiment Score","041a84b2":"Copying Data frame to a new data frame so we can have the original .","ed90acd6":"Ok we can clearly see that the reviews voted 1 are the one's with high number of Negative Reviews which decreases as the ratings of the reviews increases","83ecb176":"# Word Cloud For Negative Reviews\n","14138def":"\n# Total Ratings distribution in whole data","899fa1a6":"Hotels play a crucial role in traveling and with the increased access to information new pathways of selecting the best ones emerged.\nWith this dataset, consisting of 20k reviews crawled from Tripadvisor, you can explore what makes a great hotel and maybe even use this model in your travels!","2cf6fbc6":"deep copy means any changes made to the copy won't reflect on the original","46c5a23e":"Ok we see a lot of positive statements :)","694caf31":"Well this is very informative :)\n\n* Most of the Reviews with Rating 1 has a sentiment score between -1 to 0.5\n* Most of the Reviews with the Rating 2 has a sentiment score between 0 to 0.75\n* Most of the Reviews with Rating 3 has a sentiment score between 0.8 to 1\n* Most of the Reviews with Rating 4 has a sentiment Score between 0.85 to 1\n* Most of the Reviews with Rating 5 has a sentiment Score between 0.9 to 1","db935399":"Well from this we can see that most of the statements are positive followed by negative and then neutral statements","cbafbd88":"### From this we can clearly see the relation between the sentiment score and ratings . As the ratings increases we alse see the sentiment score line to be increasing . We also observe from this data that most of the ratings have a sentiment value in the range of 0.5 - 1 which is a positive sentiment..","97c7d213":"# Accuracy of Train vs Test","846d279b":"![](data:image\/jpeg;base64,\/9j\/4AAQSkZJRgABAQAAAQABAAD\/2wCEAAkGBxMTEhUTExMWFhUXFxcXFRcXFxgXFxcXFxcXFxUYFxUYHSggGBolHRUXITEhJSkrLi4uFx8zODMtNygtLisBCgoKDg0OGxAQGi0mHyUvLS0tLS0tLS0tLS8tLS0tLS0tLS0tLS0tLS0tLy0tLS0tLS0tLS0tLS0tLS0tLS0tLf\/AABEIAKgBLAMBIgACEQEDEQH\/xAAcAAABBQEBAQAAAAAAAAAAAAACAQMEBQYABwj\/xABCEAABAwIDBAcFBQYGAgMAAAABAAIDBBEFEiEGMUFREyJhcYGRoQdyscHwMkJSYtEUI4KSovEVM0NTwuGDshZjc\/\/EABoBAAIDAQEAAAAAAAAAAAAAAAECAAMEBQb\/xAAuEQACAgEEAQEGBQUAAAAAAAAAAQIRAwQSITFBUQUTIkJhcTKBkbHRFCNSofD\/2gAMAwEAAhEDEQA\/APQHOTYC4x35pCDz7\/7reZmF0d0nRLmhx3Jwb0bBSYPQ8lw3J9qbc1CyVXQDB9fqnWMQNYVIYxBsKQIauLbo3hK1LYROjuibTpyFvYpGRYtbq\/cx47fRZix73z0QpIeSEN5qxDE1LFbhok0uvjm+GXEv3+38Ay4nDnwRmssi6NJUSBupIHeQFFdjMbRvLvdF\/U2C1ZM0Ifikl+ZXCMp8JMmFi50appdpB92I\/wARt6C6hTbQzHcGt7hc+qyS9pYI9O\/sjTHR5X4o1AYm3vYz7Tmt7yB8Vi5cSmdvkdbsOUeQURwuVln7XXyx\/UvjoH8zNhPjlO37+bsaCfXcoE20zPuxuPeQPhdZ\/o0hjWaftLO+ml9l\/Nl0dHiXfJcnaZx\/02jxJRR7Qu4sb4EhUJjSAKr+t1H+Q\/8ATYfQ11Ji7XkNIyk7tdD2KblusO2QrX4fU54g69juPePq\/iuv7O1cstwn2c\/WYFjqUeh97dEOQFE92ijZ11DJuQ70IRtiHemHzaeKJxI+vkpTJuiOujSZFFdM7fuXCU9qbawe8iOujKodraroKWaW+rWOt7xFm+pCvOlK889rta4UzIRq6WQCw3kN13e9kUbcYtkVSaR55i37rDqSLjM+WpeONh+5i8LMefFNCK1HBGN88zpD7rLRM9TIUe3rwKswtN208cdO3\/xMAf8A1l6shTXrooOFPFHGeWYNu\/8Are7yWCKtmxvg9E2dpLNaANwC0sUYsqrChZuqtWuXSiqRilJWWrL2BCMhOxDRIRyCpsvobY0cd6IAX0Rhg5JLIWShdULmIgnFCDbWp0MSxsRPna3Q3J5AKrJljBXJ0FRb6AypGt1QSVZ+623fqo7nP4uPhp8Fiye0sUerZYtPN\/QtWZWi7iB3m3omZcTjbuu49g+Zsq4Ackluxef1Gonlm5M3Y8MYqiRJizz9hgHvEn0FlCmnndoXkdjbN+Gqfv2JNVR8Rakl4K11KeK4UysHApGsVsfqBtkD9m7EhogrTo12RWpFe9lQcPCD\/DVddGuEaG1MPvGUrsPTT6A8loOjXdGjsRPesy76Qpl1OVqpKcFQ30aXZQyyWZ5lOVe4CMuZp3GxHwPy8k7HRJ+KEtNwtOkn7vNGX\/clOo+PG0SXtvpbRAIgNydiddK9i9TZykuLI4aP0TxCbY26etoowrkYc1DlAUjIm3AIojQyXAcF5ftRO2bGadrv8umYZ5OQEYMzr8haNg8V6bU6C\/w\/ReH1FbduK1l9XltLEeBEj+tbt6KH+pJmdQ+42LmRQYGP2iuY+T70pmk5WaTLJ6ArUbARmaaaofve4nxccx\/9vRZnAOpBVzcohC33p3ZT\/Q169D9nlDlgZpq7Xz1VOFXIum6RsaaKzbceCkWTscWm5OCJdHcjnOLuy4CUBAxqPKsrNiDG9A4JTzQkXQQWwmJUgRAqAscY5BHJmc5pGosR2g3\/AEQl6SN1pWHg4Fp+I9Qs2rhuxsaEqkSOjSOplObGlyLz042zbFlf+zBR6+SOGN8shsxjS5xsTYDUmw1VvkVBtfVhsJga3pJqgOjjj94ZXPdya0G90ix2x1K2RdnsdgrM\/Qh\/Uyk5220dctINyNbK5\/Z1QezGlbHRmLLlljlkZPzMjXb+7LlstdkRyY0pNLojkQP2ZL+zKdkXZEm0m4g\/s6F1OrEMXZUUmhW7MdjOISRVtHELdFP0rX3AvnawOjseGqvxGqb2iUxFMyoaDmppoptOLQ7K\/wAMrifBStp8ZbS0r6m2awGRt7BxcQG6jhrfuBV6juSoDLDo1xjSYc97oo3SNDXuY1zmg3DXEAkX7FJDUNtC2RzEgdCpeVIQooksiiFEIk\/ZcAjtJZGijsklUkjrHt1+X6KLO1eiwT3wTMU+LQjRogc7kl1QlXiXwOMCCoOlkbHJuSQcFF2Rvgze1mJdDSTSfebG4jeNbWb6kLxPGP3WHUkPGZ8tS8cbX6GHwsx58V6N7Yqy1MyFmrpZGttxs3rf+2XzXm+37wKswtN200cVM3\/xMAf4586q1D5SLMK4sHoSKOniG+omfKfdZaFnr0hXsOzdFZrRyAXmsdLmr4od4poo4zb8TW3f\/XI7yXseCwWbdTAvI2T0JWWyea1OADl6JsC+71WgoqiSx3LROJhj0YkCWSJGQ+Ny6yaY+6IlJQ1hDv1RNQAI2FRksQhPshB63LUd43JuOK57FOYFzPaGp2R93Ht\/sW4Me6W59EgHilQUZ6tuVx5bvSyjYziradmYskkcTZjI2FznO4DQWHeVzYrckzTXNA4xicdPGZJDYaBoG97j9lrRxJWY2K6SWpqpqltqhpY0NP8Apxubna1vn9XKtMIweWWUVdaB0o\/yYQbspweR+9Jzd\/1bp29DiTH7m1MRYeXSRatv2ltgnSSHT8IGli6HEZG7m1MYkA\/+yLqvt\/CQVpLKh2pbldTVH+1MA4\/kl6jvXKr5I0BvpiWSIkiRoAiSyUFZys2piMNW6F13092uu2wD9Q0i\/wBoXB8lFGwpNlziVG2aKSJ32ZGOYe5wI+a83ilNUzDqJ4uY5Xidp5U2gB5ggrUbCYvPMyWKpIM0L7EgAXa4XYbDTn4WWIjqZf8AGal9LkDwXhsbxdshbbpGh1xke7K4g81bCNNr0HS7R6y9iBQ8Ax2OqYS0FkjdJYn6PjdxDhy7UzhmIOfU1UDrfunRlnuPYD6EHzSK\/JW4ssrLgEZCFEUQhIAlKUKEAm0se34\/QUaZuu9TJG3BHZ68FCc64uutoJ3Fr0M2XsaKQu7EDxvQ3OnJdJIzuQ80iyjveLp0MUWp0umiuQSbo8y2ombNjNMx2sdO0zydgjBldfstEweK87wQGpr2Ok+\/KZZO4EyyegctFU1t\/wDFqznlpY+R6V+V1u3o4T\/Ms\/s71Iqub8MPRN96dwZp\/AJFiyu5NmzGqijVez5hmnmqHb3vJ8yXf8vRew0TeqF577NqHJTtO7Nr56r0qkaLWWnGqiVTfIUkVx3JgDv81PsAoEjNf0TxK5quRwhNudYhDM8iyPogd5VtGXdzSH4XgqQ63NVreqdNyfa\/n9eKrlAthkXTJYPoiib9BBCCRvUunjtqd\/BY9RmWGDky+EXNpIdY2ycahRALzM5ynJyl2zoxioqkLSmz3N52cPgfkpN1BcbSMPPqnx3etlOVmCVxr0BNc2cqPbKE9AJWC74Htmb\/AAmzv6SfJXiGRgIII0IIPcdCrrFTp2V+JQippXhv+pHdveRmafOyrf8A5GW0lPI1meWYtjYy9ryah1zwALSpGyUlonQnfBI6PwBu0+R9Fk3DocTgpiOoKiSaPlaZm4dzgUUixLtehrNnscdO6WKWPop4XWewHM0tOrXsPFpCgYziM8tcyhgeIm9EZppcoe4NvlDWB2gJuNSOPZqm1Y\/Z6inrho0HoKjkY3nqk+67j2hNPeIMYL5CGsnpw2N5+zmY5t25uGgv4hSiJeUQfZXUFjKijcbup53Ae448P4mn+ZY7pTG6vadGz9Ll7XRTNdb+Uu81oMBpJRLLiUDXPBqJmvjG+SAkHMwHe4G58OxIzZySrop3Njc2VtVLJCHjKXMcGZm9bgbDsu1Pxdjqk2Xl+gxCCYaR1cLY3cuka0GM95GUean1uycf7x8PUmdK2cPcSQJGnzDTc3HamJ8Gmmw2CMty1ETY3MzEdV8fV1cL72381qY72GbfYX5X4qpsrcvQqMW2dineJQXRTtFmzRHK+3J3B7exwKiYPgE8VU+olqGyZ4wwgR5CS0jK42cRewtorXFcWipwwzOLQ94jacrnddwJAOUG246lRYtoI3VU1LlfmhjbI99hls4A2GtybOHDmhyBN0WzmppzUxg2KxVULZ4STG++UkFp0JBu06jUKYQh0K0R7Lk6WICEwpwUGRtiR238Dr81OUStb1geYI+vNbdFKslepTnXw2Qy\/wBFzRolO9cL6fJdoxJiN0VNtZXiCmml4sjcR3gHKPOyupHLzv2zV+SjEYOsr2tt2N659WjzRuk2Olbo80xb91hlLFxnlmqXX32baCLw6sh8U02G1FBGN9RO6Q+7GBEy\/wDE6TyR7fvAqWwtILaaGGnaQbgljAXnT87nq0bSXr6en4U8MTHcs+XPJ\/XIfJYUrZtPT9mKTKxgG4ALWRnnoqrBorBW4C3eDN5OedbeqbfECbpyS1xfzTT9\/wD2ogMakvySuGiIDtQyNKtRjfqN5Lp+GPs+u9MM0U+kaXfXqhle2NvoGPl\/UkUzFKSAJQvJavUPNO\/Hg7mHHsj9QkQQBGFlLBiuHVuN418lOa64BHEA+ajTNu0osMdeMD8JI\/T0KOB1ka9USX4bJC4oki1lRn4f3WIPbwqIg8dr49Db+E3VV7QsPeHU1ZExz3wStzNYMziwuB3AcCD\/ADK22vicI2VLBd9O8SWG8s3SDy+CuqWobIxsjDdrgHNPMHUIrjksuqZHxnDm1EEkLtz2kdx3tPgQD4Kr2eY6WAQVdOc0Qax3SNDmPIuAWk\/a0AN+1aErroCJ8UNxQtY0NY0NaNA1oAA7gNyO6qsW2jp6d4ZK8hxGY2a5wa29szy0HK2\/EqzbICA4EEEXBB0IO435KEpi3XLHbZB1XPFh7HWDmOmmdyaLiMfzfJZXGMRlmw2CkJcJxMaeQXNyY9GAnjfM3xaioWOoWbjb7D+mopWgEuYBIy2\/MzredgR4qjw+sBrqSq+7W0xifyErLEg+IDVo9iq\/p6GB5NzkyOJ3ks6pv32v4rIOw5zY6mkZfpaSYVVLpvYetlbzsD52RXoGPoXfs3GSGenP+hUSMHu30+BWvWK2Sr2OrpnM0bVQxzgcnN6kje8Oz+S2t0klyLPsSyEtR2SKJCMbypiujuwnlr5b\/S6lFKG30V+N7ZKRXJWqKUfX90jtO1G0WJbxBI8tELmDivQJ3yc5egMhFuxeU+2mpZ0LG21zjLzGhufLTxXqktgvHvbfKLwN5l7vINHzQn+Bl2P8R5Ze1rL0X2e0z3zPnkcXvdqSd5J3nvXn9JAXva0byV7TsXhJjj3b1mxK5GmT4N1h4s0KYD9fRUenFmp8ha2Z7CcLqM866hPAHjYefwTUt77yoiSHo2IZGXSgm6dYE1lFKqI7IbK0pYco7UMFPrc8Nykri+09Zu\/tR\/P+DVpNPT3v8hEqRKAuKdA5EEiIIECI0UfDnWe9vPUeGh+SkqDfLK08zY+KS9s4sZK00WhC5EhXQM4jhcWQxRNaA1oDQNwAAA7gEa5AJyzG0FdKyvoI2yFsUplEjRbrFrQWg3F+K06y+31I4wsqGfbppGzC34QeuO7cfAorsMexnZumbUyV8kguJJXU+v8AtsaGkDle48gsxXzvbQxxTFz20tWIqhjTlzxgksuToBvAubblp\/ZlUdJSvf8AinkcfENPzTtPGIsUmYRdtRA2TUaZmHKR5AnxTdMsvlmf9lkJ6erfk6hyiN2bOGNzOPRB9yHWGXUfhWyn2bpnztqTF+9aQ4OBIBcNzi0GxParSOMAWaABwAFh5BGErduxJSt2jNYFh0tJPLEGF1PK8yRuBb+6cR1muBINtABa\/DttPrcFD6mKpa8skjBa6wBEkZ+46+7XW6tSo89bG17I3SMa998jC4Bz7Ak5Wk3OgO5Bg3NlLW4G2OeCenjDS2RwlDRa7JRZzrdhAK0CZjqLyOZkeMoBzltmOvwa6+pHHRJRVDn5s0T47OLW5iw5wNzxkcbA8AbHsChG2PFJdEQhTpCNigJwIGhGFYkKVGItyy34OAPiND8kD1KxyK7A78JB8DofkobZARp5rs6aW7EvpwYMi2zZFqAF4h7ZakOqo2D7rC4\/xOt\/xXt1VY9\/1f4L579p5JxCS5BFmZbcBl3Htvc+IV2bjGHBzMDYHDTJNmto3Re44NT2G4WXn3s7wwxxNcRq7f3nt7rL1SgiAA5pcUajZbOduh4N5InaWRHfZKQNyZipDbrIMn1\/ZPW7u3+6Qk\/i+aKC0NMGm9TaaMk79OKha37Oaq8U2lkpJGl0RfAdHFv22n8TeDh+X151auU4424dlWCKlJJmuSqLhmIxVEYlheHsPEcDxBG9p7DqpS8o7vk66OXLlyUItkQCQBKoAIKBiI4qeFGrWaKrKriPB8k+J+ZoPMA+aQqLhMl47fhJHzHxUwroY57oplElTaESLkqIBFxaCCDrfSy5KoQj0NDHCzJExsbbk5Wiwud5sqPHerXULufTMPaC1tvitHdZ3Gxmr6Jv4RM8+TQPgiNHs0YXEpCuQFOTbomlwcWjMLgOsLgHfY7wnEhChDkl0qQhMkAVJZKFwTpCsWyUBJZEEwBuoizNc3mCFm6d2m46bxyWme8AXJAHM6LNyPHSPym4JuCO3UroaGbTaM2ohdManaf0Xke1ey5lremvoct221uNBrysvY3tUMYQwuLjqSt+VblRVp3tbZS4Dh+VrRbcFp422CSnpcg0T1lPFDvl2IQlDUj0ROmiAyBIQGInmlI+tEgHb8UURnOiTU9IHCxAI4qU0pVN3gq2LsweJYJPRyGooX5T95m9jxvs9vHv38iFpNlttYqoiJ46Go4xOOjuZjd97u3j1VjMVkNpdm2TDMxuRwNwRpqNxB4G6xaj2fHKrj2Ww1ex1M9GRALzTAts56QiGvDnxjRs4F3t5dI0fbH5hr3716RS1DJGNkjc17HC7XNN2kcwQuBlwyxOpI6EZKStDiVcuVQwoKaqBonAhkGiSXQV2Q8IfZ7m8xfy\/urUqjY\/LM08L289Pmr6yu0buFegMy+KwbJESFaioh4jWGGzy0mP75Au5n5rcW8+W9SoJmvAc1wc07iCCD4hESqifZ9ly6F8kDibnoiA1x5ujILT5IB4LdzgBc6AakncBxN1nMGBqKqSsseiawQ0\/wCZt7vkHYTuPEKYcEzi088kzeLDkYw+82NoLu4kjsVq1oAsAABoANwA4AcFA3QV0l0JKUKIUW64pFyZIAqWyanqGRjNI9rBzc4NHmVnsQ28o4rgPdKeUbbj+Z1h5Epugcs01ktl5hiXtLldpDE1g5uJe7y0A9VlsSx+pnv0sz3D8N7N\/lbYeiKYdjPX8T2qo4Lh8zS4fdZ13eIbe3jZZHFPaWTpTxAD8chufBjdPUrzguQscnVEUDcUmMyzOzSyFx4cAO5o0HktFTTi4t4rE4K7ctZT7hzXT07W0z5I1IvC+\/JGSbaKNSv0Tj1sXJkfDY808EV1Gidru17067kg1TDGVodugaNOKRoTsYSlq5EbF2oXN8fEJ1wTIcOdlEM0G0JHlKAgeTwUEdJEeQ3F\/RMvFzbyv2I5nm1vWyZExAv2rTBMw5JK6HarDI5m2e0a7tyyH7FVYbIZKU5oibvhdfI7mR+B35h433LbU8oI1Phron5Iw4WOoPNZM+COTiSNeDK4Ljoa2Z2pgrGnIS2Rv24naPb2j8TfzDxsdFeLzjHNlLkTQOLJGm7S02cD2EKTs\/t05jhBiAyP3NntZjv\/ANB9w9u73V5\/U6KWJ8dHTx5IzVo34XOCEOvqNRvCIrAywpsRbxV9TyZmNdzAKp8RbopWBS3it+EkfMfFTSusjj6j5VcEyeUiJCV0GZhEhSlVtZjlPH9uVt+QOY+TbpJSS7Yyi30ixuuWTrNuYm\/5cbndriGj5lUNbtpUP+yWxj8oufN11nlqsa+pojpMkvFHpLyALkgDmVU1m0lNHvlBPJnWPmNAvLqvEZJDd73O94k\/HcopeVTLVv5UaI6FfMzdYp7Q2RtLmRmw1u82\/pbe\/msPUe0Cvn16Xomm9mxNDbDh1zd1+4rOYrUmV+Rp6jTr+Z36BFBFYW3rZiUttzfL\/wBFM4Q3VFEyWpe85nuc53NxLj5nVNucjggcdwKnU+ESO4fFWxhJ9ID2pclW5E0LTUuyxcdVd0mygFrhaY6abKHngjAmmcdwTsGFSOOgK9LGz7WncLJ+DDmjgtmPRccsy5NWr4Rk8Kwp4te60kNG6w9f7q3jp2BOdGOC0wxqHBVLJuIFPFaw81NN7WQyWunctxorijuwYDruCcNr7kDRp9fFFfsSseKpBEpU2SAuzIFiOe5Mm3NOXUcyWTIEhxpSPJSLk5mfQ1mA8UO\/j4XXLlelwZHLmh6AaqQ09q5cqZ9miHQTXc1VY7gMdQ0gtF+a5cqZRT4ZfCTXRkqHEavCnZbGal\/2z9pg5xO4e6dO7evSMDxyCrj6SB4cNzhucw\/he3e0\/QXLlwtdp4Qdo6WKblG2O1rdFAwetbG94ebAi\/iP7rly4rm4TUkbMcd8XFg4ntjFH9ljnnwaPM6+izVbt3O77AZGOwZnebtPRcuQlqckvP6GvHpcSXRRVmMzS\/5kjndhJt\/LuUIylcuVLV8s0xilwgblEyInglXIMYm02DyO4KLtHT9CGwt1leL6fcZuzHkTuHjySLls0WJZMqUjDqM8oppFfh+zrtLiwWko9lgLXSrl6jHpodnFnnn0aGiwFgG5W0NAxvBcuWhRS6KXNtWE2AX4KQyNcuTMric+yivcLrlyeCK8rCaeO\/yTl1y5R9jQ6GJSLp+2i5ciyQ8jRPkiLrBcuUrkKfFggowVy5BjxGpXpskLlyiBZ\/\/Z)"}}