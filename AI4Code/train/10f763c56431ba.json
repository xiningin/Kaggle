{"cell_type":{"328dbd3d":"code","fb7037c5":"code","610c199f":"code","ca3ddd73":"code","624ec27a":"code","f89b3718":"code","83815770":"markdown"},"source":{"328dbd3d":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# Input data files are available in the \"..\/input\/\" directory.\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\nimport matplotlib.image as mpimg\nimport h5py\nimport scipy\nfrom PIL import Image\nfrom scipy import ndimage\nimport os\nimport datetime as dt\nfrom glob import glob\n#from IPython.display import Image\nimport matplotlib.pylab as plb\nimport cv2\nimgt = cv2.imread(\"..\/input\/dataset\/dataset\/test\/rottenapples\/rotated_by_60_Screen Shot 2018-06-08 at 2.35.25 PM.png\")[...,::-1]\nplt.imshow(imgt)","fb7037c5":"def png_to_hdf5(set_type, file_name):\n    if set_type == 0:\n        set_name = \"train\"\n    else:\n        set_name = \"test\"\n    \n    #getting data paths for each set of images  \n    start = dt.datetime.now()\n    PATH = os.path.abspath(os.path.join('..', 'input'))\n    SOURCE_IMAGES_GOOD = os.path.join(PATH, \"dataset\", \"dataset\", set_name, \"freshapples\")\n    SOURCE_IMAGES_ROTTEN  = os.path.join(PATH, \"dataset\", \"dataset\", set_name, \"rottenapples\")\n    rotten_image_paths = glob(os.path.join(SOURCE_IMAGES_ROTTEN, \"*.png\"))\n    good_image_paths = glob(os.path.join(SOURCE_IMAGES_GOOD, \"*.png\"))\n    \n    #We are starting with good images first. This is important to remember for labeling purposes\n    all_image_paths = good_image_paths + rotten_image_paths\n    \n    #size of data\n    NUM_Rotten_Images = len(rotten_image_paths)\n    NUM_Good_Images = len(good_image_paths)\n    NUM_Images = len(all_image_paths)\n    HEIGHT = 256\n    WIDTH = 256\n    CHANNELS = 3\n    SHAPE = (HEIGHT, WIDTH, CHANNELS)\n    \n    SAVE_PATH = os.path.join(file_name)\n    \n    with h5py.File(SAVE_PATH, 'w') as hf:\n        for i, img in enumerate(all_image_paths):\n            image = cv2.imread(img)[...,::-1]\n            image = cv2.resize(image, (WIDTH,HEIGHT), interpolation=cv2.INTER_CUBIC)\n \n            \n            Xset = hf.create_dataset(\n                name='X'+str(i),\n                data=image,\n                shape=(HEIGHT, WIDTH, CHANNELS),\n                maxshape=(HEIGHT, WIDTH, CHANNELS),\n                compression=\"gzip\",\n                compression_opts=9)\n            \n            #labels\n            label = 0\n            if(i < NUM_Good_Images):\n                label = 1\n            else:\n                label = 0\n            \n            Yset = hf.create_dataset(\n                name='Y'+str(i),\n                data = label,\n                shape=(1,),\n                maxshape=(None,),\n                compression=\"gzip\",\n                compression_opts=9)\n            \n            end=dt.datetime.now()\n            \n        print(\"\\r\", i, \": \", (end-start).seconds, \"seconds\", end=\"\")","610c199f":"png_to_hdf5(0, \"trainSet\")\npng_to_hdf5(1, \"testSet\")","ca3ddd73":"!ls -lha","624ec27a":"with h5py.File('trainSet', 'r') as hf:\n    plt.imshow(hf[\"X1\"])\n    print(hf[\"Y1\"].value)","f89b3718":"print(hf)","83815770":"## Introduction\n\nIn this tutorial, you will be building a neural network to recognize good fruit from rotten fruit.\n\n**Building a Neural Network**\nBuilding a neural network has 5 main steps:\n\n1. Initialize parameters\n2. Define the model and hyperparameters (# of hidden layers, # of hidden units for each layer, activation functions, learning rate, etc.)\n3. Forward propogation\n    - In this step you compute the computation graph in the forward direction to obtain classification probabilities given the input and compute a cost function\n4. Backward propogation\n5. Updating Parameters\n\nAfter you have a trained neural network. You can use it for future predictions.\n\n- In this notebook, you will implement all the functions required to build a deep neural network.\n- In the next assignment, you will use these functions to build a deep neural network for image classification.\n\n**After this assignment you will be able to:**\n- Use non-linear units like ReLU to improve your model\n- Build a deeper neural network (with more than 1 hidden layer)\n- Implement an easy-to-use neural network class\n\n**Notation**:\n- Superscript $[l]$ denotes a quantity associated with the $l^{th}$ layer. \n    - Example: $a^{[L]}$ is the $L^{th}$ layer activation. $W^{[L]}$ and $b^{[L]}$ are the $L^{th}$ layer parameters.\n- Superscript $(i)$ denotes a quantity associated with the $i^{th}$ example. \n    - Example: $x^{(i)}$ is the $i^{th}$ training example.\n- Lowerscript $i$ denotes the $i^{th}$ entry of a vector.\n    - Example: $a^{[l]}_i$ denotes the $i^{th}$ entry of the $l^{th}$ layer's activations).\n\nLet's get started!"}}