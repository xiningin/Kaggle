{"cell_type":{"938ac237":"code","8ade2e55":"code","5032bcc7":"code","54c75547":"code","d5e88194":"code","e10ef343":"code","1b2e2449":"code","b69b4192":"code","e8d5c022":"code","a7226700":"code","35d327df":"code","8807c979":"code","67318f84":"code","ff49a218":"code","a7681456":"code","bed7616d":"code","20bdeb7a":"code","02f24ba3":"code","340e4d34":"code","59419826":"code","41f2f795":"markdown","dde95a66":"markdown","aaab4ec1":"markdown","dd3c2fcb":"markdown","29f4363d":"markdown","35ec7562":"markdown","ffdf2091":"markdown","5e8a8109":"markdown","acce7cd3":"markdown"},"source":{"938ac237":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","8ade2e55":"data = pd.read_csv('\/kaggle\/input\/global-co2-emissions\/CO2Emission_LifeExp.csv')\ndata.head()","5032bcc7":"def tuple_a(): # define tuple\n    t = (3,6,9)\n    return t\n\na,b,c = tuple_a() # a = 3, b = 6, c = 9\nprint(a,b,c)","54c75547":"x = 12 # global\ndef f():\n    x = 13\n    return x # local\n\nprint(x) # x = 12\n\nprint(f()) # x = 13","d5e88194":"x = 20\ndef f():\n    y = 2*x  # there is no local scope x\n    return y\nprint(f()) # it uses global scope x  ","e10ef343":"import builtins # built in scope\ndir(builtins)","1b2e2449":"#nested function\n\ndef square():\n    \n    def add():\n        \n        x = 6      # local\n        y = 8      # local\n        z = x + y\n        return z   # retrun z\n    return add()**3\nprint(square())","b69b4192":"def f(a, b=3, c=5):\n    y = a+b+c\n    return y\nprint(f(8))\n\n# 8 + 3 + 5","e8d5c022":"# flexible args-1\ndef f(*args):\n    for i in args:\n        print(i)\n        \nf(100)","a7226700":"# flexible args-2,  for lists\ndef f(*args):\n    for i in args:\n        print(i)\n        \nf(50,100,150,200)","35d327df":"def f(**kwargs):\n    for key, value in kwargs.items():              \n        print(key, \" \", value)\nf(war_plane = 'f22', feature = 'raptor', speed = '2414')","8807c979":"#LAMBDA FUNCTION\n\nsquare = lambda x : x ** 3\nprint(square(4))\n\ntot = lambda  x,y,z : x*y*z\nprint(tot(1,2,3))","67318f84":"number_list = [5,10,15]\ny = map(lambda x:x**3, number_list)\nprint(list(y))","ff49a218":"# iteration example\nname = \"blue\"\nit = iter(name)\nprint(next(it))    # print next iteration\nprint(*it) ","a7681456":"list_1 = [1,2,3,4]\nlist_2 = [5,6,7,8]\nz = zip(list_1, list_2)\nprint(z)\nz_list = list(z)\nprint(z_list)","bed7616d":"# Example of list comprehension\nnum1 = [20,40,60]\nnum2 = [i + 1 for i in num1 ]\nprint(num2)","20bdeb7a":"# Conditionals on iterable\nnum1 = [100,191,200]\nnum2 = [i**2 if i == 100 else i-5 if i > 100 else i+5 for i in num1]\nprint(num2)","02f24ba3":"num1 = np.random.randint(0,100,5)\nnum2 = [i*0 if i% 2 == 0 else i**3 for i in num1]\nnum2","340e4d34":"treshold = sum(data.CO2Emissions)\/ len(data.CO2Emissions)\nprint(\"treshold\",treshold)\ndata[\"co2_value\"] = [\"high\" if i > treshold else \"low\" for i in data.CO2Emissions]\ndata.loc[:10,[\"co2_value\", \"CO2Emissions\"]]\n","59419826":"life = sum(data.LifeExpectancy)\/ len(data.LifeExpectancy)\nprint(\"av_life : \",life)\ndata[\"av_life\"] = [\"high\" if i > life else \"low\" for i in data.LifeExpectancy]\ndata.loc[:20,[\"av_life\", \"LifeExpectancy\", \"Country\"]]","41f2f795":"**DEFAULT and FLEXIBLE ARGUMENTS**\n\nDefault argument example:\n\ndef f(a, b=1):     --> b = 1 is default argument\n\nFlexible argument example:\n\ndef f(*args):     --> *args can be one or more\n\ndef f(** kwargs):    --> kwargs is a dictionary\n\n\n\n","dde95a66":"**ANONYMOUS FUNCT\u0130ON**","aaab4ec1":"**ITERATORS**","dd3c2fcb":"\nCountry: Unique Identifier\n\nCode: Country Code\n\nCO2Emissions: CO2 Emission by country (tons, 2016)\n\nYearlyChange: Yearly CO2 Emission Change in Percentage\n\nPercapita: CO2 Emission Per Capita\n\nPopulation: Population of the Country (2016)\n\nLifeExpectancy: Life Expectancy of the Country (2016)\n\n","29f4363d":"**NESTED FUNCTION**\n\n\nfunction inside function.","35ec7562":"**LAMBDA FUNCTION**","ffdf2091":"# Python Tool Box","5e8a8109":"**SCOPE**\n\nglobal: defined main body in script\n\nlocal: defined in a function","acce7cd3":"**LIST COMPREHENS\u0130ON**"}}