{"cell_type":{"4ccc7e79":"code","5fae7772":"code","635a8b5c":"code","81fd6247":"code","ef7bae5e":"code","dcf3c605":"code","1b6b0fe6":"code","7267154c":"code","83b72212":"code","ac7e6a98":"code","897c2d14":"code","d637b333":"code","95ba8927":"code","0bd7ffbf":"code","7948af5e":"code","37798a4d":"code","24942e16":"code","cb0b23db":"code","533a44d4":"code","229ad61d":"code","0e39106f":"code","3a92f81c":"code","993fba72":"code","8806b1d2":"code","a8a47805":"code","a7924e50":"code","b8c78d94":"code","b1a81499":"code","fcd745f5":"code","f4c6c9b0":"code","a2f608cf":"code","ecc1e372":"code","5012e0ec":"code","399aeca8":"code","57b65076":"code","d1b15af3":"code","850a85fe":"code","d6857470":"code","0ac60e90":"code","4c27954b":"code","8b1ccb0a":"code","15a95a49":"code","2bb9eea3":"code","e2d61d3d":"code","5136f8f5":"code","1a3a18fd":"code","604fbca3":"code","970a6eb3":"code","c3fe3ebb":"code","674131ed":"code","66ba38e0":"code","9a1d3ac4":"code","0e2f07fb":"code","d09cf844":"code","200bb7a9":"code","7b647203":"code","8cf06225":"code","10bc3d4f":"code","fa35a7b2":"code","0df787b0":"code","daa381a2":"code","d2c2f1da":"code","420384ad":"code","9ceae5e4":"code","bf3e69c1":"code","a9c29598":"code","0d0ecf34":"code","480421b3":"code","a8c8683d":"code","8578e238":"code","8d28d7fa":"code","d5d6e146":"code","60a51b4c":"code","9ef81001":"code","fdde3b8f":"code","984e5dec":"code","4203f99f":"code","0988144c":"code","c7c685f1":"code","1b2ac474":"code","e73335ad":"code","227252ea":"code","7fbd103f":"code","c5ed6a57":"code","a7b3a933":"markdown","6ad8e9ec":"markdown","c40849f7":"markdown","d6a704fc":"markdown","a4edcd28":"markdown","19586623":"markdown","bdc40aab":"markdown","aefc8a3a":"markdown","a1c804d8":"markdown","619cef12":"markdown","fa16b8dc":"markdown","c841794a":"markdown","14196767":"markdown","3d609bbb":"markdown","55d414d4":"markdown","dd77904f":"markdown","3b07506f":"markdown","acbd76b6":"markdown","4906def1":"markdown","5bc7f416":"markdown","d6ec82e4":"markdown","069239dc":"markdown","04a20fce":"markdown","44aa2281":"markdown","8a0492b9":"markdown","7cb04fe7":"markdown","9c25826b":"markdown","1040a6ab":"markdown","9ee44b8a":"markdown","7ac24d9d":"markdown","6be4c346":"markdown","bc07bf55":"markdown","1169bf98":"markdown","1c7c59bf":"markdown","9c2c3410":"markdown","af60a824":"markdown","c29ca3f7":"markdown","4029c797":"markdown","38a5507f":"markdown","f799e64b":"markdown","5746d252":"markdown","c4497785":"markdown","c25af128":"markdown","aa12d58d":"markdown","c0a42988":"markdown","98818bc9":"markdown","2a436235":"markdown","ed0c7be8":"markdown","d4dee81a":"markdown","625f88ae":"markdown","f2e35656":"markdown"},"source":{"4ccc7e79":"# # This Python 3 environment comes with many helpful analytics libraries installed\n# # It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# # For example, here's several helpful packages to load in \n\n# import numpy as np # linear algebra\n# import pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# # Input data files are available in the \"..\/input\/\" directory.\n# # For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\n# import os\n# for dirname, _, filenames in os.walk('\/kaggle\/input'):\n#     for filename in filenames:\n#         print(os.path.join(dirname, filename))\n\n# # Any results you write to the current directory are saved as output.","5fae7772":"\nimport pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nfrom matplotlib import ticker \n!pip install pycountry_convert\nimport pycountry_convert as pc\nimport folium\nimport branca\nfrom datetime import datetime, timedelta,date\nfrom scipy.interpolate import make_interp_spline, BSpline\nimport plotly.express as px\nimport json, requests\n\nfrom keras.layers import Input, Dense, Activation, LeakyReLU\nfrom keras import models\nfrom keras.optimizers import RMSprop, Adam\n\nfrom sklearn.linear_model import LinearRegression, BayesianRidge\nfrom sklearn.model_selection import RandomizedSearchCV, train_test_split\nfrom sklearn.preprocessing import PolynomialFeatures\nfrom sklearn.tree import DecisionTreeRegressor\nfrom sklearn.svm import SVR\nfrom sklearn.metrics import mean_squared_error, mean_absolute_error\n\n%matplotlib inline","635a8b5c":"df_recoveries = pd.read_csv('https:\/\/raw.githubusercontent.com\/CSSEGISandData\/COVID-19\/master\/csse_covid_19_data\/csse_covid_19_time_series\/time_series_covid19_recovered_global.csv')\ndf_recoveries.head(3)","81fd6247":"df_covid19 = pd.read_csv(\"https:\/\/raw.githubusercontent.com\/CSSEGISandData\/COVID-19\/web-data\/data\/cases_country.csv\")\ndf_covid19.head(3)","ef7bae5e":"df_confirmed = pd.read_csv('https:\/\/raw.githubusercontent.com\/CSSEGISandData\/COVID-19\/master\/csse_covid_19_data\/csse_covid_19_time_series\/time_series_covid19_confirmed_global.csv')\ndf_confirmed.head(3)","dcf3c605":"df_deaths = pd.read_csv('https:\/\/raw.githubusercontent.com\/CSSEGISandData\/COVID-19\/master\/csse_covid_19_data\/csse_covid_19_time_series\/time_series_covid19_deaths_global.csv')\ndf_deaths.head(3)","1b6b0fe6":"df_table = pd.read_csv(\"https:\/\/raw.githubusercontent.com\/CSSEGISandData\/COVID-19\/web-data\/data\/cases_time.csv\",parse_dates=['Last_Update'])\ndf_table.head(3)","7267154c":"cols = df_confirmed.keys()\nconfirmed = df_confirmed.loc[:, cols[4]:cols[-1]]\ndeaths = df_deaths.loc[:, cols[4]:cols[-1]]\nrecoveries = df_recoveries.loc[:, cols[4]:cols[-1]]","83b72212":"dates = confirmed.keys()\nworld_cases = []\ntotal_deaths = [] \nmortality_rate = []\nrecovery_rate = [] \ntotal_recovered = [] \ntotal_active = [] \nchina_cases = [] \nitaly_cases = []\nus_cases = [] \nspain_cases = [] \nfrance_cases = [] \n\nfor i in dates:\n    confirmed_sum = confirmed[i].sum()\n    death_sum = deaths[i].sum()\n    recovered_sum = recoveries[i].sum()\n    world_cases.append(confirmed_sum)\n    total_deaths.append(death_sum)\n    total_recovered.append(recovered_sum)\n    total_active.append(confirmed_sum-death_sum-recovered_sum)\n    mortality_rate.append(death_sum\/confirmed_sum)\n    recovery_rate.append(recovered_sum\/confirmed_sum)\n    italy_cases.append(df_confirmed[df_confirmed['Country\/Region']=='Italy'][i].sum())\n    us_cases.append(df_confirmed[df_confirmed['Country\/Region']=='US'][i].sum())\n    spain_cases.append(df_confirmed[df_confirmed['Country\/Region']=='Spain'][i].sum())\n    france_cases.append(df_confirmed[df_confirmed['Country\/Region']=='France'][i].sum())\n","ac7e6a98":"import pycountry\nlen(pycountry.countries)\nlist(pycountry.countries)[104]","897c2d14":"len(pycountry.countries)\nlist(pycountry.countries)[1:]","d637b333":"df_confirmed = df_confirmed.rename(columns={\"Province\/State\":\"state\",\"Country\/Region\": \"country\"})\ndf_deaths = df_deaths.rename(columns={\"Province\/State\":\"state\",\"Country\/Region\": \"country\"})\ndf_covid19 = df_covid19.rename(columns={\"Country_Region\": \"country\"})\ndf_covid19[\"Active\"] = df_covid19[\"Confirmed\"]-df_covid19[\"Recovered\"]-df_covid19[\"Deaths\"]","95ba8927":"df_confirmed.loc[df_confirmed['country'] == \"US\", \"country\"] = \"USA\"\ndf_deaths.loc[df_deaths['country'] == \"US\", \"country\"] = \"USA\"\ndf_covid19.loc[df_covid19['country'] == \"US\", \"country\"] = \"USA\"\ndf_table.loc[df_table['Country_Region'] == \"US\", \"Country_Region\"] = \"USA\"","0bd7ffbf":"countries = np.asarray(df_confirmed[\"country\"])\ncountries1 = np.asarray(df_covid19[\"country\"])","7948af5e":"continents = {\n    'NA': 'North America',\n    'SA': 'South America', \n    'AS': 'Asia',\n    'OC': 'Australia',\n    'AF': 'Africa',\n    'EU' : 'Europe',\n    'na' : 'Others'\n}","37798a4d":"# continent code for country.\ndef country_to_continent_code(country):\n    try:\n        return pc.country_alpha2_to_continent_code(pc.country_name_to_country_alpha2(country))\n    except :\n        return 'na'","24942e16":"df_confirmed.insert(2,\"continent\", [continents[country_to_continent_code(country)] for country in countries[:]])\ndf_deaths.insert(2,\"continent\",  [continents[country_to_continent_code(country)] for country in countries[:]])\ndf_covid19.insert(1,\"continent\",  [continents[country_to_continent_code(country)] for country in countries1[:]])\ndf_table.insert(1,\"continent\",  [continents[country_to_continent_code(country)] for country in df_table[\"Country_Region\"].values])","cb0b23db":"df_countries_cases = df_covid19.copy().drop(['Lat','Long_','continent','Last_Update', 'Incident_Rate','People_Tested','People_Hospitalized','Mortality_Rate','UID'],axis =1)\ndf_countries_cases.index = df_countries_cases[\"country\"]\ndf_countries_cases = df_countries_cases.drop(['country'],axis=1)\ndf_continents_cases = df_covid19.copy().drop(['Lat','Long_','country','Last_Update'],axis =1)","533a44d4":"df_table = df_table[df_table[\"continent\"] != \"Others\"]\ndf_deaths[df_deaths[\"continent\" ]== 'Others']","229ad61d":"df_confirmed = df_confirmed.replace(np.nan, '', regex=True)\ndf_deaths = df_deaths.replace(np.nan, '', regex=True)","0e39106f":"def plot_params(ax,axis_label= None, plt_title = None,label_size=15, axis_fsize = 15, title_fsize = 20, scale = 'linear' ):\n    # Tick-Parameters\n    ax.xaxis.set_minor_locator(ticker.AutoMinorLocator())\n    ax.yaxis.set_minor_locator(ticker.AutoMinorLocator())\n    ax.tick_params(which='both', width=1,labelsize=label_size)\n    ax.tick_params(which='major', length=6)\n    ax.tick_params(which='minor', length=3, color='0')\n    plt.title( plt_title,{'fontsize':title_fsize})\n    plt.yscale(scale)\n    plt.minorticks_on()\n    xl = plt.xlabel(axis_label[0],fontsize = axis_fsize)\n    yl = plt.ylabel(axis_label[1],fontsize = axis_fsize)\n    \ndef visualize_covid_cases(confirmed, deaths, continent=None , country = None , state = None, period = None, figure = None, scale = \"linear\"):\n    x = 0\n    if figure == None:\n        f = plt.figure(figsize=(10,8))\n        # Sub plot\n        ax = f.add_subplot(111)\n        ax.set_facecolor(\"black\")\n    else :\n        f = figure[0]\n        # Sub plot\n        ax = f.add_subplot(figure[1],figure[2],figure[3])\n        ax.set_facecolor(\"black\")\n    plt.tight_layout(pad=10, w_pad=10, h_pad=10)\n    stats = [confirmed, deaths]\n    label = [\"Confirmed\", \"Deaths\"]  \n    if continent != None:\n        params = [\"continent\",continent]\n    elif country != None:\n        params = [\"country\",country]\n    else: \n        params = [\"All\", \"All\"]\n    color = [\"red\",\"green\"]\n    marker_style = dict(linewidth=4, linestyle='-', marker='o',markersize=5, markerfacecolor='#FF6347')\n    for i,stat in enumerate(stats):\n        if params[1] == \"All\" :\n            cases = np.sum(np.asarray(stat.iloc[:,5:]),axis = 0)[x:]\n        else :\n            cases = np.sum(np.asarray(stat[stat[params[0]] == params[1]].iloc[:,5:]),axis = 0)[x:]\n        date = np.arange(1,cases.shape[0]+1)[x:]\n        plt.plot(date,cases,label = label[i]+\" (Total : \"+str(cases[-1])+\")\",color=color[i],**marker_style)\n\n    if params[1] == \"All\" :\n        Total_confirmed = np.sum(np.asarray(stats[0].iloc[:,5:]),axis = 0)[x:]\n        Total_deaths = np.sum(np.asarray(stats[1].iloc[:,5:]),axis = 0)[x:]\n    else :\n        Total_confirmed =  np.sum(np.asarray(stats[0][stat[params[0]] == params[1]].iloc[:,5:]),axis = 0)[x:]\n        Total_deaths = np.sum(np.asarray(stats[1][stat[params[0]] == params[1]].iloc[:,5:]),axis = 0)[x:]\n        \n    text = \"From \"+stats[0].columns[5]+\" to \"+stats[0].columns[-1]+\"\\n\"\n    text += \"Mortality rate : \"+ str(int(Total_deaths[-1]\/(Total_confirmed[-1])*10000)\/100)+\"\\n\"\n    text += \"Last 24 Hours:\\n\"\n    text += \"Confirmed : \" + str(Total_confirmed[-1] - Total_confirmed[-2])+\"\\n\"\n    text += \"Deaths : \" + str(Total_deaths[-1] - Total_deaths[-2])+\"\\n\"\n    \n    plt.text(0.02, 0.78, text, fontsize=15, horizontalalignment='left', verticalalignment='top', transform=ax.transAxes,bbox=dict(facecolor='white', alpha=0.4))\n    \n    # Plot Axes Labels\n    axis_label = [\"Days (\"+df_confirmed.columns[5]+\" - \"+df_confirmed.columns[-1]+\")\",\"No of Cases\"]\n    \n    # Plot Parameters\n    plot_params(ax,axis_label,scale = scale)\n    \n    # Plot Title\n    if params[1] == \"All\" :\n        plt.title(\" \",{'fontsize':25})\n    else:   \n        plt.title(\" \"+params[1] ,{'fontsize':25})\n        \n    # Legend Location\n    l = plt.legend(loc= \"best\",fontsize = 15)\n    \n    if figure == None:\n        plt.show()\n        \ndef get_total_cases(cases, country = \"All\"):\n    if(country == \"All\") :\n        return np.sum(np.asarray(cases.iloc[:,5:]),axis = 0)[-1]\n    else :\n        return np.sum(np.asarray(cases[cases[\"country\"] == country].iloc[:,5:]),axis = 0)[-1]\n    \ndef get_mortality_rate(confirmed,deaths, continent = None, country = None):\n    if continent != None:\n        params = [\"continent\",continent]\n    elif country != None:\n        params = [\"country\",country]\n    else :\n        params = [\"All\", \"All\"]\n    \n    if params[1] == \"All\" :\n        Total_confirmed = np.sum(np.asarray(confirmed.iloc[:,5:]),axis = 0)\n        Total_deaths = np.sum(np.asarray(deaths.iloc[:,5:]),axis = 0)\n        mortality_rate = np.round((Total_deaths\/(Total_confirmed+1.01))*100,2)\n    else :\n        Total_confirmed =  np.sum(np.asarray(confirmed[confirmed[params[0]] == params[1]].iloc[:,5:]),axis = 0)\n        Total_deaths = np.sum(np.asarray(deaths[deaths[params[0]] == params[1]].iloc[:,5:]),axis = 0)\n        mortality_rate = np.round((Total_deaths\/(Total_confirmed+1.01))*100,2)\n    \n    return np.nan_to_num(mortality_rate)\ndef dd(date1,date2):\n    return (datetime.strptime(date1,'%m\/%d\/%y') - datetime.strptime(date2,'%m\/%d\/%y')).days\n\n\nout = \"\"#+\"output\/\"","3a92f81c":"df_t = pd.DataFrame(pd.to_numeric(df_countries_cases.sum()),dtype=np.float64).transpose()\ndf_t[\"Mortality Rate (per 100)\"] = np.round(100*df_t[\"Deaths\"]\/df_t[\"Confirmed\"],2)\ndf_t.style.background_gradient(cmap='Blues',axis=1).format(\"{:.0f}\",subset=[\"Confirmed\"])","993fba72":"df_countries_cases = df_covid19.copy().drop(['Lat','Long_','continent','Last_Update','Incident_Rate','People_Tested','People_Hospitalized','Mortality_Rate','UID','ISO3'],axis =1)\ndf_countries_cases.index = df_countries_cases[\"country\"]\ndf_countries_cases = df_countries_cases.drop(['country'],axis=1)\n\ndf_continents_cases = df_covid19.copy().drop(['Lat','Long_','country','Last_Update','Incident_Rate','People_Tested','People_Hospitalized','Mortality_Rate','UID'],axis =1)\ndf_continents_cases = df_continents_cases.groupby([\"continent\"]).sum()","8806b1d2":"df_countries_cases[\"Mortality Rate (per 100)\"] = np.round(100*df_countries_cases[\"Deaths\"]\/df_countries_cases[\"Confirmed\"],2)\ndf_countries_cases.sort_values(\"Mortality Rate (per 100)\", ascending= False).style.background_gradient(cmap='seismic')\n","a8a47805":"df_countries_cases[\"Mortality Rate (per 100)\"] = np.round(100*df_countries_cases[\"Deaths\"]\/df_countries_cases[\"Confirmed\"],2)\ndf_countries_cases.sort_values(\"Confirmed\", ascending= False).style.background_gradient(cmap='seismic')","a7924e50":"df_countries_cases[\"Mortality Rate (per 100)\"] = np.round(100*df_countries_cases[\"Deaths\"]\/df_countries_cases[\"Confirmed\"],2)\ndf_countries_cases.sort_values(\"Deaths\", ascending= False).style.background_gradient(cmap='seismic')","b8c78d94":"f = plt.figure(figsize=(18,8))\nf.add_subplot(111)\n\nplt.axes(axisbelow=True)\nplt.bar(df_countries_cases.sort_values('Confirmed')[\"Confirmed\"].index[-10:],df_countries_cases.sort_values('Confirmed')[\"Confirmed\"].values[-10:],color=\"blue\")\nplt.tick_params(size=5,labelsize = 13)\nplt.xlabel(\"Confirmed Cases\",fontsize=18)\nplt.title(\"Top 10 Countries (Confirmed COVID-19)\",fontsize=20)\n#plt.grid(alpha=0.3)\nplt.savefig(out+'Top 10 Countries (Confirmed Cases).png')","b1a81499":"f = plt.figure(figsize=(18,8))\nf.add_subplot(111)\n\nplt.axes(axisbelow=True)\nplt.bar(df_countries_cases.sort_values('Deaths')[\"Deaths\"].index[-10:],df_countries_cases.sort_values('Deaths')[\"Deaths\"].values[-10:],color=\"blue\")\nplt.tick_params(size=5,labelsize = 13)\nplt.xlabel(\"Deaths Cases\",fontsize=18)\nplt.title(\"Highly affected Countries (COVID-19 Deaths)\",fontsize=20)\n#plt.grid(alpha=0.3,which='both')\nplt.savefig(out+'Top 10 Countries (Deaths Cases).png')","fcd745f5":"f = plt.figure(figsize=(18,8))\nf.add_subplot(111)\nplt.axes(axisbelow=True)\nplt.bar(df_countries_cases.sort_values('Active')[\"Active\"].index[-10:],df_countries_cases.sort_values('Active')[\"Active\"].values[-10:],color=\"blue\")\nplt.tick_params(size=5,labelsize = 13)\nplt.xlabel(\"Active Cases\",fontsize=18)\nplt.title(\"Highly affected Countries (Active COVID-19)\",fontsize=20)\nplt.savefig(out+'Top 10 Countries (Active Cases).png')","f4c6c9b0":"temp_df = pd.DataFrame(df_countries_cases['Confirmed'])\ntemp_df = temp_df.reset_index()\nfig = px.choropleth(temp_df, locations=\"country\",color=np.log10(temp_df.iloc[:,-1]),hover_name=\"country\",hover_data=[\"Confirmed\"],color_continuous_scale=px.colors.sequential.Mint,locationmode=\"country names\")\nfig.update_geos(fitbounds=\"locations\", visible=False)\nfig.update_layout(title_text=\"Confirmed Cases Heat Map (Log Scale)\")\nfig.update_coloraxes(colorbar_title=\"Confirmed Cases(Log Scale)\",colorscale=\"Blues\")\nfig.show()","a2f608cf":"temp_df = pd.DataFrame(df_countries_cases['Deaths'])\ntemp_df = temp_df.reset_index()\nfig = px.choropleth(temp_df, locations=\"country\",color=np.log10(temp_df[\"Deaths\"]),hover_name=\"country\",hover_data=[\"Deaths\"],color_continuous_scale=px.colors.sequential.Plasma,locationmode=\"country names\")\nfig.update_geos(fitbounds=\"locations\", visible=False)\nfig.update_layout(title_text=\"Death Cases Heat Map (Log Scale)\")\nfig.update_coloraxes(colorbar_title=\"Deaths Cases(Log Scale)\",colorscale=\"Blues\")\nfig.show()","ecc1e372":"df_data = df_table.groupby(['Last_Update', 'Country_Region'])['Confirmed', 'Deaths'].max().reset_index()\ndf_data[\"Last_Update\"] = pd.to_datetime( df_data[\"Last_Update\"]).dt.strftime('%m\/%d\/%Y')\n\nfig = px.scatter_geo(df_data, locations=\"Country_Region\", locationmode='country names',color=np.power(df_data[\"Confirmed\"],0.3)-2 , size= np.power(df_data[\"Confirmed\"]+1,0.3)-1, hover_name=\"Country_Region\",hover_data=[\"Confirmed\"],range_color= [0, max(np.power(df_data[\"Confirmed\"],0.3))], projection=\"natural earth\", animation_frame=\"Last_Update\", \n                     color_continuous_scale=px.colors.sequential.Plasma,title='COVID-19: Progression of spread')\nfig.update_coloraxes(colorscale=\"rainbow\")\nfig.update(layout_coloraxis_showscale=False)\nfig.show()","5012e0ec":"case_nums_country = df_confirmed.groupby(\"country\").sum().drop(['Lat','Long'],axis =1).apply(lambda x: x[x > 0].count(), axis =0)\nd = [datetime.strptime(date,'%m\/%d\/%y').strftime(\"%d %b\") for date in case_nums_country.index]\n\nf = plt.figure(figsize=(15,8))\nf.add_subplot(111)\nmarker_style = dict(c=\"blue\",linewidth=5, linestyle='-')\nplt.plot(d, case_nums_country,**marker_style)\nplt.tick_params(labelsize = 20)\nplt.xticks(list(np.arange(0,len(d),int(len(d)\/5))),d[:-1:int(len(d)\/5)]+[d[-1]])\n#labels\nplt.xlabel(\"Dates\",fontsize=18)\nplt.ylabel(\"Number of Countries\",fontsize=18)\n\nplt.savefig(out+'spread.png')\nplt.show()\nplt.close()","399aeca8":"df_countries = df_confirmed.groupby([\"country\"]).sum()\ndf_countries = df_countries.sort_values(df_countries.columns[-1],ascending = True)\ncountries = df_countries[df_countries[df_countries.columns[-1]] >= 1200].index\n\ncols =2\nrows = int(np.ceil(countries.shape[0]\/cols))\nf = plt.figure(figsize=(20,8*rows))\nfor i,country in enumerate(countries):\n    visualize_covid_cases(df_confirmed, df_deaths,country = country,figure = [f,rows,cols, i+1])\n\nplt.show()","57b65076":"df_continent = df_confirmed.groupby([\"continent\"]).sum()\n\ndf_continent = df_continent.sort_values(df_continent.columns[-1],ascending = False)\ncontinent = df_continent[df_continent[df_continent.columns[-1]] >= 100].index\n\ncols = 2\nrows = int(np.ceil(continent.shape[0]\/cols))\nf = plt.figure(figsize=(20,8*rows))\nfor j,continent in enumerate(continent):\n    visualize_covid_cases(df_confirmed, df_deaths,continent = continent,figure = [f,rows,cols, j+1])\n\nplt.show()","d1b15af3":"df_continents= df_confirmed.groupby([\"continent\"]).sum()\ncontinents = df_continents.sort_values(df_continents.columns[-1],ascending = False).index\ncontinents = [\"All\"]+list(continents)\n\ncols =2\n#rows = 2\naxis_label = [\"Days (\"+df_confirmed.columns[5]+\" - \"+df_confirmed.columns[-1]+\")\",\"Mortality Rate (of 100)\"]\n\nf = plt.figure(figsize=(15,10*rows))\n\n#SubPlot 1\nax = f.add_subplot(211)\nax.set_facecolor(\"black\")\nmortality_rate = get_mortality_rate(df_confirmed,df_deaths,continent=continents[0])\nplt.plot(np.arange(1,mortality_rate.shape[0]+1),mortality_rate,label = \"World : Current Mortality Rate \"+str(mortality_rate[-1]))\n\nplt_title = \"COVID-19: World Mortality Rate Curve\"\nplot_params(ax,axis_label,plt_title)\n# Legend Location\nl = plt.legend(loc= \"best\")\n\n\n#SubPlot 2\nax = f.add_subplot(212)\nfor i, continent in enumerate(continents[1:]):\n    mortality_rate = get_mortality_rate(df_confirmed,df_deaths,continent=continent)\n#     mortality_rate = mortality_rate.replace(np.nan, 0, regex=True)\n    plt.plot(np.arange(1+mortality_rate[mortality_rate == 0].shape[0],mortality_rate[mortality_rate == 0].shape[0]+mortality_rate[mortality_rate > 0].shape[0]+1),mortality_rate[mortality_rate > 0],label = continents[i+1]+\" \"+str(mortality_rate[-1]))\n\nplt_title = \"COVID-19: Mortality Rate Curve for all Continents\"\nplot_params(ax,axis_label,plt_title)\n\n# Legend Location\nl = plt.legend(loc= \"best\")\nax.set_facecolor(\"black\")\n\nplt.minorticks_on()\nplt.savefig(out+'Mortality rate.png')\nplt.show()","850a85fe":"df_continents_cases[\"Mortality Rate (per 100)\"] = np.round(100*df_continents_cases[\"Deaths\"]\/df_continents_cases[\"Confirmed\"],2)\ndf_continents_cases.style.background_gradient(cmap='Blues',subset=[\"Confirmed\"])\\\n.background_gradient(cmap='Reds',subset=[\"Deaths\"])\\\n.background_gradient(cmap='Greens',subset=[\"Recovered\"])\\\n.background_gradient(cmap='Purples',subset=[\"Active\"])\\\n.background_gradient(cmap='YlOrBr',subset=[\"Mortality Rate (per 100)\"])\ndf_continents_cases.sort_values(\"Mortality Rate (per 100)\", ascending= False).style.background_gradient(cmap='Reds')\n","d6857470":"temp = df_confirmed.groupby('country').sum().drop([\"Lat\",\"Long\"],axis =1).sort_values(df_confirmed.columns[-1], ascending= False)\nthreshold = 50\nf = plt.figure(figsize=(20,10))\nax = f.add_subplot(111)\nax.set_facecolor(\"black\")\nfor i,country in enumerate(temp.index):\n    if i >=9 :\n        if country != \"India\" and country != \"Japan\" :\n            continue\n    x = 30\n    t = temp.loc[temp.index== country].values[0]\n    t = t[t>threshold][:x]\n     \n    date = np.arange(0,len(t[:x]))\n    xnew = np.linspace(date.min(), date.max(), 30)\n    spl = make_interp_spline(date, t, k=1)\n    power_smooth = spl(xnew)\n    if country != \"India\":\n        plt.plot(xnew,power_smooth,'->',label = country,linewidth =3, markevery=[-1])\n    else:\n        marker_style = dict(linewidth=4, linestyle='-', marker='.',markersize=10, markerfacecolor='#FFFFFF')\n        plt.plot(date,t,\"-.\",label = country,**marker_style)\nplt.tick_params(labelsize = 14)        \nplt.xticks(np.arange(0,30,7),[ \"Day \"+str(i) for i in range(30)][::7])     \nplt.xlabel(\"Days\",fontsize=17)\nplt.ylabel(\"Number of Confirmed Cases\",fontsize=17)\nplt.title(\" Confirmed cases Comparison of Different Countries and India \",fontsize=20)\nplt.legend(loc = \"upper left\")\nplt.yscale(\"log\")\nplt.savefig(out+'Trend Comparison with India (confirmed).png')\nplt.show()","0ac60e90":"temp = df_deaths.groupby('country').sum().drop([\"Lat\",\"Long\"],axis =1).sort_values(df_deaths.columns[-1], ascending= False)\nthreshold = 100\nf = plt.figure(figsize=(20,10))\nax = f.add_subplot(111)\nax.set_facecolor(\"black\")\nfor i,country in enumerate(temp.index):\n    if i > 10:\n        break\n    x = 40\n    t = temp.loc[temp.index== country].values[0]\n    t = t[t>threshold][:x]    \n    date = np.arange(0,len(t[:x]))\n    xnew = np.linspace(date.min(), date.max(), 30)\n    spl = make_interp_spline(date, t, k=1)\n    power_smooth = spl(xnew)\n    plt.plot(xnew,power_smooth,'->',label = country,linewidth =4, markevery=[-1])\nplt.tick_params(labelsize = 14)        \nplt.xticks(np.arange(0,30,7),[ \"Day \"+str(i) for i in range(30)][::7])     \nplt.xlabel(\"Days\",fontsize=17)\nplt.ylabel(\"Number of Deaths\",fontsize=17)\nplt.title(\"Different Countries Deaths Comparision\",fontsize=22)\nplt.legend(loc = \"upper left\")\nplt.yscale(\"log\")\n#plt.grid(which=\"both\")\nplt.savefig(out+'Trend Comparison countries deaths.png')\nplt.show()","4c27954b":"temp = df_confirmed.groupby('continent').sum().drop([\"Lat\",\"Long\"],axis =1).sort_values(df_confirmed.columns[-1], ascending= False)\nthreshold = 50\nf = plt.figure(figsize=(20,10))\nax = f.add_subplot(111)\nax.set_facecolor(\"black\")\nfor i,country in enumerate(temp.index):\n    if i > 10:\n        break\n    x = 30\n    t = temp.loc[temp.index== country].values[0]\n    t = t[t>threshold][:x]\n     \n    date = np.arange(0,len(t[:x]))\n    xnew = np.linspace(date.min(), date.max(), 30)\n    spl = make_interp_spline(date, t, k=1)\n    power_smooth = spl(xnew)\n    plt.plot(xnew,power_smooth,'->',label = country,linewidth =4, markevery=[-1])\n    plt.text(0.5, 3., \"serif\", label = country)\nplt.tick_params(labelsize = 14)        \nplt.xticks(np.arange(0,30,7),[ \"Day \"+str(i) for i in range(30)][::7])     \nplt.xlabel(\"Days\",fontsize=17)\nplt.ylabel(\"Number of Confirmed Cases\",fontsize=17)\nplt.title(\"COVID-19 confirmed cases in different  continents\",fontsize=20)\nplt.legend(loc = \"upper left\")\nplt.yscale(\"log\")\n#plt.grid(which=\"both\")\nplt.savefig(out+'Trend Comparison of continents (Confirmed).png')\nplt.show()","8b1ccb0a":"temp = df_deaths.groupby('continent').sum().drop([\"Lat\",\"Long\"],axis =1).sort_values(df_deaths.columns[-1], ascending= False)\nthreshold = 10\nf = plt.figure(figsize=(20,10))\nax = f.add_subplot(111)\nax.set_facecolor(\"black\")\nfor i,country in enumerate(temp.index):\n    if i > 10:\n        break\n    x = 30\n    t = temp.loc[temp.index== country].values[0]\n    t = t[t>threshold][:x]\n     \n    date = np.arange(0,len(t[:x]))\n    xnew = np.linspace(date.min(), date.max(), 10)\n    spl = make_interp_spline(date, t, k=1)  # type: BSpline\n    power_smooth = spl(xnew)\n    plt.plot(xnew,power_smooth,'->',label = country,linewidth =4, markevery=[-1])\nplt.tick_params(labelsize = 14)        \nplt.xticks(np.arange(0,30,7),[ \"Day \"+str(i) for i in range(30)][::7])     \nplt.xlabel(\"Days\",fontsize=17)\nplt.ylabel(\"Number of Deaths\",fontsize=17)\nplt.title(\"Trend Comparison of Different Continents \\n(Deaths)\",fontsize=22)\nplt.legend(loc = \"upper left\")\nplt.yscale(\"log\")\n#plt.grid(which=\"both\")\nplt.savefig(out+'Trend Comparison continents (deaths).png')\nplt.show()","15a95a49":"\ndf_india_test = pd.io.json.json_normalize(requests.get('https:\/\/api.rootnet.in\/covid19-in\/stats\/testing\/history').json()['data']).rename(columns = {\"totalIndividualsTested\":\"c_individualtest\",\n                                                                                                                                                    \"totalPositiveCases\":\"c_positive\",\"totalSamplesTested\":\"c_tests\"})","2bb9eea3":"df_india_test[\"p2t_ratio\"]= np.round(100*df_india_test[\"c_positive\"]\/df_india_test[\"c_tests\"],2)\ndf_india_test[\"positive\"] = df_india_test[\"c_positive\"].diff()\ndf_india_test[\"tests\"] = df_india_test[\"c_tests\"].diff()\ndf_india_test[\"p2t_ratio\"]= np.round(100*df_india_test[\"positive\"]\/df_india_test[\"tests\"],2)\ndf_india_test = df_india_test[1:]","e2d61d3d":"f = plt.figure(figsize=(20,5))\nf.add_subplot(111)\n\nplt.axes(axisbelow= False)\nplt.bar(df_india_test[\"day\"],df_india_test[\"tests\"].values[:],color=\"blue\",label=\"Negetive\"+str())\nplt.bar(df_india_test[\"day\"],df_india_test[\"positive\"].values[:],bottom=df_india_test[\"tests\"].values[:]-df_india_test[\"positive\"].values[:],color=\"black\",label=\"Positive\")\nplt.tick_params(size=5,labelsize = 13)\nplt.tick_params(axis=\"x\",size=5,labelsize = 13,labelrotation=60 )\nplt.xlabel(\"Date\",fontsize=18)\nplt.ylabel(\"Test Results\",fontsize=18)\n\nplt.title(\"Tests in India\",fontsize=20)\n#plt.grid(alpha=0.3)\nplt.legend()\nplt.savefig(out+'Test_India.png')","5136f8f5":"india_data_json = requests.get('https:\/\/api.rootnet.in\/covid19-in\/unofficial\/covid19india.org\/statewise').json()\ndf_india = pd.io.json.json_normalize(india_data_json['data']['statewise'])\ndf_india = df_india.set_index(\"state\")","1a3a18fd":"total = df_india.sum()\ntotal.name = \"Total\"\ndf_t = pd.DataFrame(total,dtype=float).transpose()\ndf_t[\"Mortality Rate (per 100)\"] = np.round(100*df_t[\"deaths\"]\/df_t[\"confirmed\"],2)\ndf_t.style.background_gradient(cmap='Reds',axis=1)","604fbca3":"f = plt.figure(figsize=(18,8))\nf.add_subplot(111)\n\nplt.axes(axisbelow=True)\nplt.bar(df_india.sort_values('confirmed')[\"confirmed\"].index[-10:],df_india.sort_values('confirmed')[\"confirmed\"].values[-10:],color=\"blue\")\nplt.tick_params(size=5,labelsize = 13)\nplt.xlabel(\"Confirmed Cases\",fontsize=18)\nplt.title(\"Top 10 States: India (Confirmed Cases)\",fontsize=20)\nplt.savefig(out+'Top 10 States_India (Confirmed Cases).png')","970a6eb3":"f = plt.figure(figsize=(18,8))\nf.add_subplot(111)\nplt.axes(axisbelow=True)\nplt.bar(df_india.sort_values('deaths')[\"deaths\"].index[-10:],df_india.sort_values('deaths')[\"deaths\"].values[-10:],color=\"blue\")\nplt.tick_params(size=5,labelsize = 13)\nplt.xlabel(\"Deaths\",fontsize=18)\nplt.title(\"Top 10 States: India (Deaths Cases)\",fontsize=20)\nplt.savefig(out+'Top 10 States_India (Deaths Cases).png')","c3fe3ebb":"locations = {\n    \"Kerala\" : [10.8505,76.2711],\"Maharashtra\" : [19.7515,75.7139],\"Karnataka\": [15.3173,75.7139],\"Telangana\": [18.1124,79.0193],\"Uttar Pradesh\": [26.8467,80.9462],\"Rajasthan\": [27.0238,74.2179],\"Gujarat\":[22.2587,71.1924],\"Delhi\" : [28.7041,77.1025],\"Punjab\":[31.1471,75.3412],\n    \"Tamil Nadu\": [11.1271,78.6569],\"Haryana\": [29.0588,76.0856],\"Madhya Pradesh\":[22.9734,78.6569],\"Jammu and Kashmir\":[33.7782,76.5762],\"Ladakh\": [34.1526,77.5770],\"Andhra Pradesh\":[15.9129,79.7400],\"West Bengal\": [22.9868,87.8550],\"Bihar\": [25.0961,85.3131],\n    \"Chhattisgarh\":[21.2787,81.8661],\"Chandigarh\":[30.7333,76.7794],\"Uttarakhand\":[30.0668,79.0193],\"Himachal Pradesh\":[31.1048,77.1734],\"Goa\": [15.2993,74.1240],\"Odisha\":[20.9517,85.0985],\"Andaman and Nicobar Islands\": [11.7401,92.6586],\"Puducherry\":[11.9416,79.8083],\n    \"Manipur\":[24.6637,93.9063],\"Mizoram\":[23.1645,92.9376],\"Assam\":[26.2006,92.9376],\"Meghalaya\":[25.4670,91.3662],\"Tripura\":[23.9408,91.9882],\"Arunachal Pradesh\":[28.2180,94.7278],\"Jharkhand\" : [23.6102,85.2799],\"Nagaland\": [26.1584,94.5624],\n    \"Sikkim\": [27.5330,88.5122],\"Dadra and Nagar Haveli\":[20.1809,73.0169],\"Lakshadweep\":[10.5667,72.6417],\"Daman and Diu\":[20.4283,72.8397]}\ndf_india[\"Lat\"] = \"\"\ndf_india[\"Long\"] = \"\"\nfor index in df_india.index :\n    df_india.loc[df_india.index == index,\"Lat\"] = locations[index][0]\n    df_india.loc[df_india.index == index,\"Long\"] = locations[index][1]","674131ed":"india = folium.Map(location=[23,80], zoom_start=4,max_zoom=6,min_zoom=4,height=500,width=\"80%\",tiles = 'Stamen Toner')\nfor i in range(0,len(df_india[df_india['confirmed']>0].index)):\n    folium.Circle(\n        location=[df_india.iloc[i]['Lat'], df_india.iloc[i]['Long']],\n        tooltip = \"<h5 style='text-align:center;font-weight: bold'>\"+df_india.iloc[i].name+\"<\/h5>\"+\n                    \"<hr style='margin:15px;'>\"+\n                    \"<ul style='color: #444;list-style-type:circle;align-item:left;padding-left:20px;padding-right:20px'>\"+\n        \"<li>Confirmed: \"+str(df_india.iloc[i]['confirmed'])+\"<\/li>\"+\n        \"<li>Active:   \"+str(df_india.iloc[i]['active'])+\"<\/li>\"+\n        \"<li>Recovered:   \"+str(df_india.iloc[i]['recovered'])+\"<\/li>\"+\n        \"<li>Deaths:   \"+str(df_india.iloc[i]['deaths'])+\"<\/li>\"+\n        \"<\/ul>\"\n        ,\n        radius=(int(np.log2(df_india.iloc[i]['confirmed']+1)))*15000,\n        color='\t#0000FF',\n        fill_color='red',\n        fill_opacity=0.9,\n        fill=True).add_to(india)\nindia","66ba38e0":"df_india[\"Mortality Rate (per 100)\"]= np.round(np.nan_to_num(100*df_india[\"deaths\"]\/df_india[\"confirmed\"]),2)\ndf_india.sort_values(\"Mortality Rate (per 100)\", ascending= False).style.background_gradient(cmap='Blues',subset=[\"confirmed\"])\\\n.background_gradient(cmap='Reds',subset=[\"deaths\"])\\\n.background_gradient(cmap='Greens',subset=[\"recovered\"])\\\n.background_gradient(cmap='Purples',subset=[\"active\"])\\\n.background_gradient(cmap='YlOrBr',subset=[\"Mortality Rate (per 100)\"])","9a1d3ac4":"date_usa = datetime.strptime(df_confirmed.columns[-1],'%m\/%d\/%y').strftime(\"%m-%d-%Y\")\ndf_temp = pd.read_csv(\"https:\/\/raw.githubusercontent.com\/CSSEGISandData\/COVID-19\/master\/csse_covid_19_data\/csse_covid_19_daily_reports\/\"+date_usa+\".csv\")\ndf_usa = df_temp.loc[df_temp[\"Country_Region\"]== \"US\"]\ndf_usa = df_usa.rename(columns={\"Admin2\":\"County\"})","0e2f07fb":"total = df_usa.sum()\ntotal.name = \"Total\"\ntotal[\"Mortality Rate (per 100)\"]= np.round(np.nan_to_num(100*total[\"Deaths\"]\/total[\"Confirmed\"]),2)\npd.DataFrame(total).transpose().loc[:,[\"Confirmed\",\"Deaths\", \"Mortality Rate (per 100)\"]].style.background_gradient(cmap='Reds',axis=1)","d09cf844":"df_usa[\"Mortality Rate (per 100)\"]= np.round(np.nan_to_num(100*df_usa[\"Deaths\"]\/df_usa[\"Confirmed\"]),2)\ndf_usa.loc[:,[\"Province_State\",\"Confirmed\",\"Deaths\",\"County\",\"Mortality Rate (per 100)\"]].sort_values(\"Confirmed\",ascending=False).set_index(\"County\")[:15].style.background_gradient(cmap='Blues',subset=[\"Confirmed\"])\\\n                        .background_gradient(cmap='Reds',subset=[\"Deaths\"])\\\n.background_gradient(cmap='Blues',subset=[\"Mortality Rate (per 100)\"])","200bb7a9":"f = plt.figure(figsize=(16,5))\nf.add_subplot(111)\nplt.axes(axisbelow=True)\nplt.bar(df_usa.groupby([\"Province_State\"]).sum().sort_values('Confirmed')[\"Confirmed\"].index[-10:],df_usa.groupby([\"Province_State\"]).sum().sort_values('Confirmed')[\"Confirmed\"].values[-10:],color=\"blue\")\nplt.tick_params(size=5,labelsize = 13)\nplt.xlabel(\"Confirmed Cases\",fontsize=18)\nplt.title(\"Top 10 States: USA (Confirmed Cases)\",fontsize=20)\nplt.savefig(out+'Top 10 States_USA (Confirmed Cases).png')","7b647203":"f = plt.figure(figsize=(16,5))\nf.add_subplot(111)\nplt.axes(axisbelow=True)\nplt.bar(df_usa.groupby([\"Province_State\"]).sum().sort_values('Deaths')[\"Deaths\"].index[-10:],df_usa.groupby([\"Province_State\"]).sum().sort_values('Deaths')[\"Deaths\"].values[-10:],color=\"blue\")\nplt.tick_params(size=5,labelsize = 13)\nplt.xlabel(\"Deaths\",fontsize=18)\nplt.title(\"Top 10 States: USA (Deaths Cases)\",fontsize=20)\nplt.savefig(out+'Top 10 States_USA (Deaths Cases).png')","8cf06225":"df_usa = df_usa.replace(np.nan, 0, regex=True)\nusa = folium.Map(location=[37, -102], zoom_start=4,max_zoom=8,min_zoom=4,tiles = 'Stamen Toner')\nfor i in np.int32(np.asarray(df_usa[df_usa['Confirmed'] > 0].index)):\n    folium.Circle(\n        location=[df_usa.loc[i]['Lat'], df_usa.loc[i]['Long_']],\n        tooltip = \"<h5 style='text-align:center;font-weight: bold'>\"+df_usa.loc[i]['Province_State']+\"<\/h5>\"+\n                    \"<div style='text-align:center;'>\"+str(np.nan_to_num(df_usa.loc[i]['County']))+\"<\/div>\"+\n                    \"<hr style='margin:10px;'>\"+\n                    \"<ul style='color: #444;list-style-type:circle;align-item:left;padding-left:20px;padding-right:20px'>\"+\n        \"<li>Confirmed: \"+str(df_usa.loc[i]['Confirmed'])+\"<\/li>\"+\n        \"<li>Active:   \"+str(df_usa.loc[i]['Active'])+\"<\/li>\"+\n        \"<li>Recovered:   \"+str(df_usa.loc[i]['Recovered'])+\"<\/li>\"+       \n        \"<li>Deaths:   \"+str(df_usa.loc[i]['Deaths'])+\"<\/li>\"+\n        \"<li>Mortality Rate:   \"+str(np.round(df_usa.loc[i]['Deaths']\/(df_usa.loc[i]['Confirmed']+1)*100,2))+\"<\/li>\"+\n        \"<\/ul>\"\n        ,\n        radius=int((np.log2(df_usa.loc[i]['Confirmed']+1))*6000),\n        color='blue',\n        fill_color='red',\n        fill_opacity=0.7,\n        fill=True).add_to(usa)\n\nusa","10bc3d4f":"state_geo = requests.get('https:\/\/raw.githubusercontent.com\/python-visualization\/folium\/master\/examples\/data\/us-states.json').json()\ncounty_geo = requests.get('https:\/\/raw.githubusercontent.com\/python-visualization\/folium\/master\/examples\/data\/us_counties_20m_topo.json').json()\n","fa35a7b2":"data_temp = df_usa.groupby([\"Province_State\"]).sum().reset_index().drop([\"Lat\",\"Long_\"],axis=1)\ndata_temp[\"Confirmed_log\"] = np.log10(data_temp[\"Confirmed\"]+1)\nbins = list(data_temp['Confirmed_log'].quantile([0, 0.25, 0.5, 0.75,0.95 ,1]))\nm = folium.Map(location=[37, -102], zoom_start=4,max_zoom=6,min_zoom=3, tiles = 'Stamen Toner')\n \n# Add the color for the chloropleth:\nfolium.Choropleth(\n    geo_data=state_geo,\n    name='choropleth',\n    data = data_temp,\n    columns=['Province_State', 'Confirmed_log'],\n    key_on='feature.properties.name',\n    fill_color='Blues',\n    fill_opacity=0.7,\n    line_opacity=0.2,\n    bins = bins,\n    reset=True,\n    legend_name='Confirmed cases log (10^x)'\n).add_to(m)\nfolium.LayerControl().add_to(m)\nm","0df787b0":"df_temp = pd.read_csv(\"https:\/\/raw.githubusercontent.com\/CSSEGISandData\/COVID-19\/master\/csse_covid_19_data\/csse_covid_19_daily_reports\/04-01-2020.csv\")\ndf_china = df_temp.loc[df_temp[\"Country_Region\"]== \"China\"]\ndf_china = df_china.rename(columns={\"Admin2\":\"County\"})\ntotal = df_china.sum()\ntotal.name = \"Total\"\ntotal[\"Mortality Rate (per 100)\"]= np.round(np.nan_to_num(100*total[\"Deaths\"]\/total[\"Confirmed\"]),2)\npd.DataFrame(total).transpose().loc[:,[\"Confirmed\",\"Deaths\",\"Mortality Rate (per 100)\"]].style.background_gradient(cmap='Purple',axis=1)","daa381a2":"df_china[\"Mortality Rate (per 100)\"]= np.round(np.nan_to_num(100*df_china[\"Deaths\"]\/df_china[\"Confirmed\"]),2)\ndf_china.loc[:,[\"Confirmed\",\"Deaths\",\"Province_State\",\"Mortality Rate (per 100)\"]].groupby([\"Province_State\"]).sum().sort_values(\"Mortality Rate (per 100)\",ascending=False).style.background_gradient(cmap='Blues',subset=[\"Confirmed\"])\\\n.background_gradient(cmap='Reds',subset=[\"Deaths\"])\\\n.background_gradient(cmap='Blues',subset=[\"Mortality Rate (per 100)\"])\n#df_china.sort_values(\"Mortality Rate (per 100)\", ascending= False).style.background_gradient(cmap='seismic')","d2c2f1da":"df_china = df_china.replace(np.nan, 0, regex=True)\nchina = folium.Map(location=[35, 104], zoom_start=4,max_zoom=8,min_zoom=4,tiles='Stamen Toner')\nfor i in np.int32(np.asarray(df_china[df_china['Confirmed'] > 0].index)):\n    folium.Circle(\n        location=[df_china.loc[i]['Lat'], df_china.loc[i]['Long_']],\n        tooltip = \"<h5 style='text-align:center;font-weight: bold'>\"+df_china.loc[i]['Province_State']+\"<\/h5>\"+\n                    \"<div style='text-align:center;'>\"+str(np.nan_to_num(df_china.loc[i]['County']))+\"<\/div>\"+\n                    \"<hr style='margin:50px;'>\"+\n                    \"<ul style='color: #4444;list-style-type:circle;align-item:left;padding-left:20px;padding-right:20px'>\"+\n        \"<li>Confirmed: \"+str(df_china.loc[i]['Confirmed'])+\"<\/li>\"+\n        \"<li>Active:   \"+str(df_china.loc[i]['Active'])+\"<\/li>\"+\n        \"<li>Recovered:   \"+str(df_china.loc[i]['Recovered'])+\"<\/li>\"+       \n        \"<li>Deaths:   \"+str(df_china.loc[i]['Deaths'])+\"<\/li>\"+\n        \"<li>Mortality Rate:   \"+str(np.round(df_china.loc[i]['Deaths']\/(df_china.loc[i]['Confirmed']+1)*100,2))+\"<\/li>\"+\n        \"<\/ul>\"\n        ,\n        radius=int((np.log2(df_china.loc[i]['Confirmed']+1))*6000),\n        color='#0000FF',\n        fill_color='red',fill_opacity=0.8,\n        fill=True).add_to(china)\n\nchina","420384ad":"df_confirmed_report = df_confirmed.copy()\ndf_confirmed_report.loc[df_confirmed_report['country'] != \"China\",\"country\"] = \"Outside China\"\ndf_confirmed_report = df_confirmed_report.groupby(\"country\").sum().drop([\"Lat\",\"Long\"],axis =1)\ndf_confirmed_report.loc[\"Total\"] = df_confirmed_report.sum()\ndf_confirmed_newcases = df_confirmed_report.groupby(level =0).diff(axis =1)\ndf_confirmed_newcases = df_confirmed_newcases.replace(np.nan, 0, regex=True) \nf = plt.figure(figsize=(15,8))\nax1 = f.add_subplot(111)\nax1.set_facecolor('black')\n\nax1.bar(df_confirmed_report[df_confirmed_report.index == \"China\"].columns,df_confirmed_newcases[df_confirmed_newcases.index == \"China\"].values[0], label = \"China (New)\",color='dodgerblue')\nax1.bar(df_confirmed_report[df_confirmed_report.index == \"Outside China\"].columns,df_confirmed_newcases[df_confirmed_newcases.index == \"Outside China\"].values[0],bottom=df_confirmed_newcases[df_confirmed_newcases.index == \"China\"].values[0],label = \"Outside China (New)\",color='white')\n\n# Labels\nax1.set_xlabel(\"Dates\",fontsize=17)\nax1.set_ylabel(\"New Cases Reported\",fontsize =17)\n\nax1.tick_params(size=5,labelsize=9)\nax1.set_xticks(np.arange(0.5, len(df_confirmed_report.columns), 6))\nax1.set_xticklabels([datetime.strptime(date,'%m\/%d\/%y').strftime(\"%d %b\") for date in df_confirmed_report.columns][::6],fontsize=15)\nl = np.arange(0, df_confirmed_report.max(axis = 1)[2]\/10+10000, 5000)\nax1.set_yticks(l[::int(len(l)\/5)])\n# ax1.spines['bottom'].set_position('zero')\n\nax2 = ax1.twinx()\nmarker_style = dict(linewidth=3, linestyle='-', marker='.',markersize=5, markerfacecolor='#ffffff')\n\nax2.plot(df_confirmed_report[df_confirmed_report.index == \"Total\"].columns ,df_confirmed_report[df_confirmed_report.index == \"Total\"].values[0],**marker_style,label = \"World Total (Cumulative)\",color=\"darkorange\",clip_on=False)\nax2.plot(df_confirmed_report[df_confirmed_report.index == \"China\"].columns ,df_confirmed_report[df_confirmed_report.index == \"China\"].values[0],**marker_style,label = \"China (Cumulative)\",color=\"red\",clip_on=False)\nax2.plot(df_confirmed_report[df_confirmed_report.index == \"Outside China\"].columns ,df_confirmed_report[df_confirmed_report.index == \"Outside China\"].values[0],**marker_style,label =\"Outside China (Cumulative)\",color=\"darkviolet\",clip_on=False)\nax2.bar([0],[0])\n\n# Label\nax2.tick_params(labelsize=15)\nax2.set_ylabel(\"Cumulative\",fontsize =17)\nax2.set_xticks(np.arange(0.5, len(df_confirmed_report.columns), 6))\nax2.set_xticklabels([datetime.strptime(date,'%m\/%d\/%y').strftime(\"%d %b\") for date in df_confirmed_report.columns][::6])\nl = np.arange(0, df_confirmed_report.max(axis = 1)[2]+100000, 100000)\nax2.set_yticks(l[::int(len(l)\/5)])\n\nf.tight_layout()\nf.legend(loc = \"upper left\", bbox_to_anchor=(0.1,0.95))\nplt.title(\"COVID-19 Confirmed Cases: China Vs Rest of the World\",fontsize = 22)\nplt.savefig(out+'China vs Rest of the world.png')\nplt.show()","9ceae5e4":"df_deaths_report = df_deaths.copy()\ndf_deaths_report.loc[df_deaths_report['country'] != \"China\",\"country\"] = \"Outside China\"\ndf_deaths_report = df_deaths_report.groupby(\"country\").sum().drop([\"Lat\",\"Long\"],axis =1)\ndf_deaths_report.loc[\"Total\"] = df_deaths_report.sum()\ndf_deaths_newcases = df_deaths_report.groupby(level =0).diff(axis =1)\ndf_deaths_newcases = df_deaths_newcases.replace(np.nan, 0, regex=True)\n\nf = plt.figure(figsize=(15,8))\nax1 = f.add_subplot(111)\nax1.set_facecolor('black')\n\nax1.bar(df_deaths_report[df_deaths_report.index == \"China\"].columns,df_deaths_newcases[df_deaths_newcases.index == \"China\"].values[0], label = \"China (New)\",color='dodgerblue')\nax1.bar(df_deaths_report[df_deaths_report.index == \"Outside China\"].columns,df_deaths_newcases[df_deaths_newcases.index == \"Outside China\"].values[0],bottom=df_deaths_newcases[df_deaths_newcases.index == \"China\"].values[0],label = \"Outside China (New)\",color='white')\n\n# Labels\nax1.set_xlabel(\"Dates\",fontsize=17)\nax1.set_ylabel(\"New Cases Reported\",fontsize =17)\n\nax1.tick_params(size=10,labelsize=15)\nax1.set_xticks(np.arange(0.5, len(df_deaths_report.columns), 6))\nax1.set_xticklabels([datetime.strptime(date,'%m\/%d\/%y').strftime(\"%d %b\") for date in df_deaths_report.columns][::6],fontsize=15)\nl = np.arange(0, df_deaths_report.max(axis = 1)[2]\/10+500, 500)\nax1.set_yticks(l[::int(len(l)\/5)])\nax1.spines['bottom'].set_position('zero')\n\nax2 = ax1.twinx()\nmarker_style = dict(linewidth=3, linestyle='-', marker='.',markersize=5, markerfacecolor='#ffffff')\n\nax2.plot(df_deaths_report[df_deaths_report.index == \"Total\"].columns ,df_deaths_report[df_deaths_report.index == \"Total\"].values[0],**marker_style,label = \"World Total (Cumulative)\",color=\"darkorange\",clip_on=False)\nax2.plot(df_deaths_report[df_deaths_report.index == \"China\"].columns ,df_deaths_report[df_deaths_report.index == \"China\"].values[0],**marker_style,label = \"China (Cumulative)\",color=\"red\",clip_on=False)\nax2.plot(df_deaths_report[df_deaths_report.index == \"Outside China\"].columns ,df_deaths_report[df_deaths_report.index == \"Outside China\"].values[0],**marker_style,label =\"Outsdte China (Cumulative)\",color=\"darkviolet\",clip_on=False)\nax2.bar([0],[0])\n\n# Label\nax2.tick_params(labelsize=15)\nax2.set_ylabel(\"Cumulative\",fontsize =17)\nax2.set_xticks(np.arange(0.5, len(df_deaths_report.columns), 6))\nax2.set_xticklabels([datetime.strptime(date,'%m\/%d\/%y').strftime(\"%d %b\") for date in df_deaths_report.columns][::6])\nl = np.arange(0, df_deaths_report.max(axis = 1)[2]+4000, 2000)\nax2.set_yticks(l[::int(len(l)\/5)])\n\nf.tight_layout()\nf.legend(loc = \"upper left\", bbox_to_anchor=(0.1,0.95))\nplt.title(\"COVID-19 Deaths Reported: China Vs Rest of the World\",fontsize = 22)\nplt.savefig(out+'China vs Rest of the world1.png')\nplt.show()","bf3e69c1":"Visible = Input(shape=(1,))\nDense_l1 = Dense(100,name=\"Dense_l1\")(Visible)\nLRelu_l1 = LeakyReLU(name = \"LRelu_l1\")(Dense_l1)\nDense_l2 = Dense(100,name = \"Dense_l2\")(LRelu_l1)\nLRelu_l2 = LeakyReLU(name = \"LRelu_l2\")(Dense_l2)\nDense_l3 = Dense(1,name=\"Dense_l3\")(LRelu_l2)\nLRelu_l3 = LeakyReLU(name = \"Output\")(Dense_l3)\nmodel = models.Model(inputs=Visible, outputs=LRelu_l3)\nmodel.compile(optimizer=Adam(lr=0.001), \n              loss='mean_squared_error',\n              metrics=['accuracy'])\nmodel.summary()","a9c29598":"data_y = np.log10(np.asarray(df_confirmed.sum()[5:]).astype(\"float32\"))\ndata_x = np.arange(1,len(data_y)+1)","0d0ecf34":"epochs = 600\nmodel.fit(data_x.reshape([data_y.shape[0],1]),data_y.reshape([data_y.shape[0],1]),epochs=epochs)","480421b3":"model.save('model_confirmed.h5')","a8c8683d":"model = models.load_model(\"model_confirmed.h5\")\nmodel.summary()","8578e238":"lakh = 100000\nprediction_days = 10\ndata = np.power(10,model.predict(np.arange(1,len(data_y)+prediction_days+1)))\ntemp_data = df_confirmed.iloc[:,5:].sum(axis =0)\nf = plt.figure(figsize=(15,10))\n#ax = f.set_facecolor('black')\nax = f.add_subplot(111)\n\ndate = np.arange(0,len(temp_data))\n\nmarker_style = dict(linewidth=3, linestyle='-', marker='o',markersize=7, markerfacecolor='#ffffff')\nplt.plot(date,temp_data\/lakh,\"-.\",color=\"darkcyan\",**marker_style, label=\"Actual Curve\")\n\ndate = np.arange(0,len(data))\nplt.plot(date,data\/lakh,\"-.\",color=\"orangered\",label=\"Predicted Curve\")\n\nnextdays = [(datetime.strptime(d[-1],'%d %b')+timedelta(days=i)).strftime(\"%d %b\") for i in range(1,prediction_days+1)]\ntotal = d + nextdays\n\ntext = \"Prediction for next \"+str(prediction_days) +\" days:\\n\"\nfor i in range(prediction_days):\n    text += nextdays[i]+\" : \"+str(np.round(data[-1*(prediction_days-i)],-3)[0]\/lakh)+\" L\\n\"\n\nplt.text(0.02, 0.78, text, fontsize=17, horizontalalignment='left', verticalalignment='top', transform=ax.transAxes,bbox=dict(facecolor='white', alpha=0.4))\n\n# X-axis\nplt.xticks(list(np.arange(0,len(total),int(len(total)\/5))),d[:-1:int(len(total)\/5)]+[total[-1]])\n\n# Tick-Parameters\nax.xaxis.set_minor_locator(ticker.AutoMinorLocator())\nax.yaxis.set_minor_locator(ticker.AutoMinorLocator())\nax.tick_params(which='both', width=1,labelsize=14)\nax.tick_params(which='major', length=6)\nax.tick_params(which='minor', length=3, color='0.8')\n\n# Grid\n# plt.grid(lw = 1, ls = '-', c = \"0.7\", which = 'major')\n# plt.grid(lw = 1, ls = '-', c = \"0.9\", which = 'minor')\n\n# Plot Title\nplt.title(\"COVID-19 Next 10 day Prediction Curve-Global Confirmed Cases\",{'fontsize':22})\n\n# Axis Lable\nplt.xlabel(\"Date\",fontsize =18)\nplt.ylabel(\"Number of Confirmed Cases (Lakh)\",fontsize =18)\n\nplt.yscale(\"log\")\nplt.legend(fontsize =18)\nplt.tick_params(labelsize = 13) \nplt.savefig(out+\"Prediction Curve-Confirmed.png\")\nplt.show()","8d28d7fa":"Visible = Input(shape=(1,))\nDense_l1 = Dense(80,name=\"Dense_l1\")(Visible)\nLRelu_l1 = LeakyReLU(name = \"LRelu_l1\")(Dense_l1)\nDense_l2 = Dense(80,name = \"Dense_l2\")(LRelu_l1)\nLRelu_l2 = LeakyReLU(name = \"LRelu_l2\")(Dense_l2)\nDense_l3 = Dense(1,name=\"Dense_l3\")(LRelu_l2)\nLRelu_l3 = LeakyReLU(name = \"Output\")(Dense_l3)\nmodel2 = models.Model(inputs=Visible, outputs=LRelu_l3)\nmodel2.compile(optimizer=Adam(lr=0.0001), \n              loss='mean_squared_error',\n              metrics=['accuracy'])\nmodel2.summary()","d5d6e146":"data1_y = np.log10(np.asarray(df_deaths.sum()[5:-1]).astype(\"float32\"))\ndata1_x = np.arange(1,len(data_y))","60a51b4c":"epochs=2000\nmodel2.fit(data1_x.reshape([data1_y.shape[0],1]),data1_y.reshape([data1_y.shape[0],1]),epochs=epochs)","9ef81001":"model2.save('model_1.h5')","fdde3b8f":"model2 = models.load_model(\"model_1.h5\")\nmodel2.summary()","984e5dec":"thousand = 1000\nprediction_days = 10\ndata = np.power(10,model2.predict(np.arange(1,len(data_y)+prediction_days+1)))\ntemp_data = df_deaths.iloc[:,5:].sum(axis =0)\nf = plt.figure(figsize=(15,10))\nax = f.add_subplot(111)\n\n\ndate = np.arange(0,len(temp_data))\n# xnew = np.linspace(date.min(), date.max(), 10)\n# spl = make_interp_spline(date, t, k=1)  # type: BSpline\n# power_smooth = spl(xnew)\n\nmarker_style = dict(linewidth=3, linestyle='-', marker='o',markersize=7, markerfacecolor='#ffffff')\nplt.plot(date,temp_data\/thousand,\"-.\",color=\"maroon\",**marker_style, label=\"Actual Curve\")\n\ndate = np.arange(0,len(data))\nplt.plot(date,data\/thousand,\"-.\",color=\"orangered\",label=\"Predicted Curve\")\n\nnextdays = [(datetime.strptime(d[-1],'%d %b')+timedelta(days=i)).strftime(\"%d %b\") for i in range(1,prediction_days+1)]\ntotal =d+nextdays\n\ntext = \"Prediction for next \"+str(prediction_days) +\" days:\\n\"\nfor i in range(prediction_days):\n    text += nextdays[i]+\" : \"+str(np.round(data[-1*(prediction_days-i)],-1)[0]\/thousand)+\"K\\n\"\n\nplt.text(0.02, 0.78, text, fontsize=17, horizontalalignment='left', verticalalignment='top', transform=ax.transAxes,bbox=dict(facecolor='white', alpha=0.4))\n\n# X-axis\nplt.xticks(list(np.arange(0,len(total),int(len(total)\/5))),total[:-1:int(len(total)\/5)]+[total[-1]])\n\n# Tick-Parameters\nax.xaxis.set_minor_locator(ticker.AutoMinorLocator())\nax.yaxis.set_minor_locator(ticker.AutoMinorLocator())\nax.tick_params(which='both', width=1,labelsize=12)\nax.tick_params(which='major', length=6)\nax.tick_params(which='minor', length=3, color='0.8')\n\n# Grid\n#plt.grid(lw = 1, ls = '-', c = \"0.7\", which = 'major')\n#plt.grid(lw = 1, ls = '-', c = \"0.9\", which = 'minor')\n\n# Plot Title\nplt.title(\"COVID-19 Next 10 day Prediction Curve-Global Deaths Cases\",{'fontsize':22})\n\n# Axis Lable\nplt.xlabel(\"Date\",fontsize =18)\nplt.ylabel(\"Number of Deaths Cases (Thousand)\",fontsize =18)\n\nplt.yscale(\"log\")\nplt.legend(fontsize =18)\nplt.tick_params(labelsize = 13) \nplt.savefig(out+\"Prediction Curve2.png\")\nplt.show()","4203f99f":"import datetime\ndef daily_increase(data):\n    d = [] \n    for i in range(len(data)):\n        if i == 0:\n            d.append(data[0])\n        else:\n            d.append(data[i]-data[i-1])\n    return d \n\nworld_daily_increase = daily_increase(world_cases)\nchina_daily_increase = daily_increase(china_cases)\nitaly_daily_increase = daily_increase(italy_cases)\nus_daily_increase = daily_increase(us_cases)\nspain_daily_increase = daily_increase(spain_cases)\nfrance_daily_increase = daily_increase(france_cases)\n\ndays_since_1_22 = np.array([i for i in range(len(dates))]).reshape(-1, 1)\nworld_cases = np.array(world_cases).reshape(-1, 1)\ntotal_deaths = np.array(total_deaths).reshape(-1, 1)\ntotal_recovered = np.array(total_recovered).reshape(-1, 1)\n\ndays_in_future = 10\nfuture_forcast = np.array([i for i in range(len(dates)+days_in_future)]).reshape(-1, 1)\nadjusted_dates = future_forcast[:-10]\n#Convert integer into datetime\n\nstart = '1\/22\/2020'\nstart_date = datetime.datetime.strptime(start, '%m\/%d\/%Y')\nfuture_forcast_dates = []\nfor i in range(len(future_forcast)):\n    future_forcast_dates.append((start_date + datetime.timedelta(days=i)).strftime('%m\/%d\/%Y'))","0988144c":"X_train_confirmed, X_test_confirmed, y_train_confirmed, y_test_confirmed = train_test_split(days_since_1_22, world_cases, test_size=0.10, shuffle=False) ","c7c685f1":"X_train_deaths, X_test_deaths, y_train_deaths, y_test_deaths = train_test_split(days_since_1_22, total_deaths, test_size=0.10, shuffle=False) ","1b2ac474":"X_train_confirmed, X_test_confirmed, y_train_confirmed, y_test_confirmed = train_test_split(days_since_1_22, world_cases, test_size=0.10, shuffle=False) ","e73335ad":"# svm_confirmed = svm_search.best_estimator_\nsvm_confirmed = SVR(shrinking=True, kernel='poly',gamma=0.01, epsilon=1,degree=7, C=0.1)\nsvm_confirmed.fit(X_train_confirmed, y_train_confirmed)\nsvm_pred = svm_confirmed.predict(future_forcast)\n\n# check against testing data\nsvm_test_pred = svm_confirmed.predict(X_test_confirmed)\n\nf = plt.figure(figsize=(15,10))\nax = f.add_subplot(111)\nax.set_facecolor(\"black\")\nplt.plot(y_test_confirmed)\nplt.plot(svm_test_pred)\nplt.legend(['Test Data', 'SVM Predictions'])\nplt.savefig(out+\"Prediction confirmed SVM.png\")\nprint('MAE:', mean_absolute_error(svm_test_pred, y_test_confirmed))\nprint('MSE:',mean_squared_error(svm_test_pred, y_test_confirmed))\n","227252ea":"# Future predictions using SVM \nprint('SVM conf classes predictions:')\nset(zip(future_forcast_dates[-10:], np.round(svm_pred[-10:])))","7fbd103f":"# svm_deaths = svm_search.best_estimator_\nsvm_deaths = SVR(shrinking=True, kernel='poly',gamma=0.01, epsilon=1,degree=7, C=0.1)\nsvm_deaths.fit(X_train_deaths, y_train_deaths)\nsvm_pred_death = svm_deaths.predict(future_forcast)\n\n# check against testing data\nsvm_test_pred = svm_deaths.predict(X_test_deaths)\nf = plt.figure(figsize=(15,10))\nax = f.add_subplot(111)\nax.set_facecolor(\"black\")\nplt.plot(y_test_deaths)\nplt.plot(svm_test_pred)\nplt.legend(['Test Data', ' Death Predictions'])\nplt.savefig(out+\"Prediction Death SVM.png\")\nprint('MAE:', mean_absolute_error(svm_test_pred, y_test_confirmed))\nprint('MSE:',mean_squared_error(svm_test_pred, y_test_confirmed))\n","c5ed6a57":"# Future predictions using SVM \nprint('SVM death classes predictions:')\nset(zip(future_forcast_dates[-10:], np.round(svm_pred_death[-10:])))","a7b3a933":"# **Tarining the data**","6ad8e9ec":"# **Global Confirmed cases Prediction**\n\n* A deep neural network (DNN) is an artificial neural network (ANN) with multiple layers between the input and output layers.\n* The DNN finds the correct mathematical manipulation to turn the input into the output, whether it be a linear relationship or a non-linear relationship. \n* The network moves through the layers calculating the probability of each output. For example, a DNN that is trained to recognize dog breeds will go over the given image and calculate the probability that the dog in the image is a certain breed. \n* The user can review the results and select which probabilities the network should display (above a certain threshold, etc.) and return the proposed label. Each mathematical manipulation as such is considered a layer, and complex DNN have many layers, hence the name \"deep\" networks.\n* In this work DNN is used to predict the increasing number of cases and confirmed deaths over time. ","c40849f7":"[](http:\/\/)\n* https:\/\/www.kaggle.com\/allen-institute-for-ai\/CORD-19-research-challenge \n* https:\/\/raw.githubusercontent.com\/CSSEGISandData\/COVID-19\/master\/csse_covid_19_data\/csse_covid_19_time_series\/time_series_covid19_confirmed_global.csv \n* https:\/\/raw.githubusercontent.com\/CSSEGISandData\/COVID-19\/master\/csse_covid_19_data\/csse_covid_19_time_series\/time_series_covid19_deaths_global.csv \n* https:\/\/raw.githubusercontent.com\/CSSEGISandData\/COVID-19\/web-data\/data\/cases_country.csv\" \n* https:\/\/raw.githubusercontent.com\/CSSEGISandData\/COVID-19\/web-data\/data\/cases_time.csv\",parse_dates=['Last_Update'] \n* https:\/\/raw.githubusercontent.com\/CSSEGISandData\/COVID-19\/master\/csse_covid_19_data\/csse_covid_19_time_series\/time_series_covid19_recovered_global.csv \n","d6a704fc":"# **Renaming Columns**","a4edcd28":"# **Mortality Rate Curve of Different Continents**","19586623":"# **Cases In India**","bdc40aab":"# **confirmed COVID-19 Trend Comparision with India**","aefc8a3a":"<font color='red'>\n    \n# **Contents**\n\n    \n# **Continent Wise Analysis:**\n\n* Total confirmed cases\n* Total death cases\n* Total recovered cases    \n* Total active cases   \n* Mortality rate per 100   \n* Covid-19 trend comparison confirm cases in different continents    \n* Covid-19 trend comparison of different continents    \n\n# **Visualization on Map:**\n\n* Global Confirmed Cases Heat Map  \n* Global Deaths Heat Map\n\n# **Country wise Analysis:**\n\n* Total confirmed cases\n* Total death cases\n* Total recovered cases\n* Total active cases\n* Mortality rate per 100\n* Different countries death comparison\n* Highly affected countries with confirmed cases\n* Highly affected countries with active cases\n* Highly affected countries with death cases\n* Spread Analysis\n* Mortality Rate\n\n# **India Case study:**\n\n* Indian map visualization \n* Indian state wise \n* Total confirmed cases\n* Total death cases\n* Total recovered cases\n* Total active cases\n* Mortality rate per 100\n\n# **China case Study:**\n\n* China map Visualization\n* China State wise\n* Total confirmed cases\n* Total death cases\n* Total recovered cases\n* Total active cases\n* Mortality rate per 100\n\n# **USA case study:**\n\n* USA map Visualization\n* USA State wise\n* Total confirmed cases\n* Total death cases\n* Total recovered cases\n* Total active cases\n* Mortality rate per 100\n\n# **Prediction Model:**\n\n* Deep Neural Network\n * Confirmed cases\n * Death cases\n* Support Vector Machine\n * Confirmed cases\n * Death cases \n<\/font>","a1c804d8":"# **Tabular Data**\n\n* Europe has the highest number of cases across the globe. \n* This shows the disease causes in all cases except the mortality rate is more in North America whereas South America's very less significant number is compared to North America even if the geographical location is very near to North America. But The mortality rate in SA is 4.14 percent which is lgreater than NA.\n* Asia continent which is the origin of COVID-19 has third-highest numbers in all cases except mortality rate.\n* Africa continent has fewer cases compared to other continents but the mortality rate is 5.44% which shows not a good sign that comes in the second number. \n* Australia which is far away from other continents has less affected cases compared to other continents\n","619cef12":"# **Top Countries with death cases**","fa16b8dc":"# **Changing the conuntry names as required by pycountry convert Lib**","c841794a":"# **All Countries**","14196767":"# **COVID-19 Deaths Trend Comparison of countries**","3d609bbb":"# **COVID-19 Confirmed cases Trend Comparison of Different Continents**","55d414d4":"# **Top Countries with confirmed cases**","dd77904f":"# **Importing Library**","3b07506f":"# **Global Heat Map**","acbd76b6":"**As we know this been a pandemic for the world we can easily conclude that the Covid-19 has not been limited to a certain continent.** ","4906def1":"# **Prediction Curve for Global Death Cases**\n","5bc7f416":"# **Continent Information**","d6ec82e4":"# **Remark**\n\n* **The mortality rate of COVID-19 varies in different geographical locations.**\n* If we compare three countries India, China, and the USA. China has the highest mortality rate of 4.03 which comes under continent Asia. Asia comes in 5th position in terms of mortality rate i.e. 3.69.\n* The most affected country the USA has a mortality rate of 3.97 which is a country in North America. North America has a mortality rate of 3.05 which holds the 4th position.\n* India has the less number of mortality rate compared to china and USA i.e 3.59\n* If the cases grow in this way the world will face new confirmed cases next week is near about 2.5 million whereas the death cases will grow to 2.5 lacks. And the mortality rate will become 10 per 100 people.\n\n\n","069239dc":"# **Importing Pycountry**","04a20fce":"![cv.jfif](attachment:cv.jfif)","44aa2281":"# **Most Affected States in USA**","8a0492b9":"**Total number of Confirmed, Active, death, recovered cases and mortality rate (per 100) accross the globe**\n","7cb04fe7":"* The total number of affected countries across the globe is more than 206 till Dt. 13.04.2020. \n* The USA has the most Confirmed cases whereas Italy has the highest number of deaths. China has the biggest number of recovered patients.\n* Italy which is a country of European continent though it has the second number of active cases the mortality rate is high among all highly affected countries.\n","9c25826b":"# **Tabular Data**","1040a6ab":"# **COVID-19 India Case Study**","9ee44b8a":"# **China and Rest of the World**","7ac24d9d":"* A total of 31 Indian states and union territories has been affected by COVID-19. The mortality rate is 3.59% whereas in Asia the number is 3.68%. It might increase with the increase in the number of cases. ","6be4c346":"# **Importing Data**","bc07bf55":"# **Global Progression Spred of COVID-19**","1169bf98":"* In India mortality rate also varies in different geographical locations. The highest mortality rate of state Jharkhand  is 10% though the number of cases is very less. If we consider Maharastra which has the highest number of cases. The mortality rate is 5%. Odisha holds the 12th position in terms of mortality rate.","1c7c59bf":"# **Indian States**","9c2c3410":"# **Affected Regions of India**","af60a824":"# **China Case Study**","c29ca3f7":"* We can clearly see that mortality rate of different continents varies. The high mortality is found in Europe where as low mortality rate is in Australia. It seems to be the mortality rate of whole world is increasing day by day.  ","4029c797":"# **USA Case Study**\n* The USA is the most affected country of COVID-19. The number of cases is increasing rapidly. The mortality rate is also adding more numbers to it. The most affected state in the USA is New York. The mortality rate is also high among all states in the USA.","38a5507f":"# **Objective**\n**The objective of this work is to analyze the confirmed, death, active, recovered cases and mortality rate (per 100) of the different geographical locations of the world.**","f799e64b":"# **Support Vector Machine**\n* SVM algorithm is used for supervised machine learning that is both for data classification and regression analysis. It classifies efficiently both linear and nonlinearly separable data by creating a hyperplane for data in the original space. The dot product of hyperplane with a vector is constant in that space. The hyperplane can be represented as \nw \u20d7.x \u20d7-b=0                              \n* Where, w is considered as a normalized vector to the hyperplane, x set of points and b\/(||w||) can be calculated by the equation of distance from a point to a plane. If the data points are linearly separable then by taking two parallel hyperplanes having distance between them is as much as possible. The bounded region is called the margin. It indicates the data points belong to either class of the data.\n","5746d252":"# **COVID-19 Deaths Trend Comparison of Different Continents** ","c4497785":"* The following graph indicates the spread of COVID-19 from 22nd Jan increased linearly till the last of Jan then the curve remains flattened around 25th of Feb. After that, the affected no of countries increased linearly to reach around 160 countries. Then it seems to be slow down.    ","c25af128":"# **Continents**","aa12d58d":"# **COVID-19 Visualization of Different Continents**","c0a42988":"# **Spraed of COVID-19**","98818bc9":"# **Top Mortality Rate**","2a436235":"# **USA Map visualization**","ed0c7be8":"# **COVID-19 Visualization of Different Countries**","d4dee81a":"# **Data**","625f88ae":"# **Transmission**\n* Some details about how the disease is spread are still being determined. The WHO and CDC say it is primarily spread during close contact and by small droplets produced when people cough, sneeze or talk; with close contact being within 1\u20133 m (3 ft. 3 in\u20139 ft. 10 in). A study in Singapore found that uncovered coughing can lead to droplets traveling up to 4.5 meters (15 feet). A second study, produced during the 2020 pandemic, found that advice on the distance droplets could travel might be based on old 1930s research which ignored the protective effect and speed of the warm moist outbreath surrounding the droplets; it advised that droplets can travel around 7\u20138 meters. ","f2e35656":"# **COVID-19**\n**Coronavirus disease 2019 (COVID-19) is an infectious disease caused by severe acute respiratory syndrome coronavirus 2 (SARS-CoV-2). The disease was first identified in December 2019 in Wuhan, the capital of China's Hubei province, and has since spread globally, resulting in the ongoing 2019\u201320 coronavirus pandemic. Common symptoms include fever, cough and shortness of breath. Other symptoms may include fatigue, muscle pain, diarrhoea, sore throat, loss of smell and abdominal pain. While the majority of cases result in mild symptoms, some progress to viral pneumonia and multi-organ failure. As of 13 April 2020, more than 1.8 million cases have been reported in more than 200 countries and territories, resulting in more than 114090 deaths. More than 421497 people have recovered.**"}}