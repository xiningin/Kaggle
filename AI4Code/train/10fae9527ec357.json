{"cell_type":{"3b2fc957":"code","8ddc7b79":"code","760c06bf":"code","b01a905e":"code","196fe596":"code","44f45bd4":"code","c7f92888":"code","a6132857":"code","63b12137":"code","9c27d40e":"code","46a90bf5":"code","e7c211d8":"markdown","c47eaf88":"markdown","63e53d92":"markdown","6e319708":"markdown"},"source":{"3b2fc957":"import numpy as np\nimport pandas as pd\n\nimport os\nimport json\nfrom pathlib import Path\n\nimport matplotlib.pyplot as plt\nfrom matplotlib import colors\nimport numpy as np\nfrom pathlib import Path\n\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    print(dirname)","8ddc7b79":"data_path = Path('\/kaggle\/input\/abstraction-and-reasoning-challenge\/')\ntraining_path = data_path \/ 'training'\nevaluation_path = data_path \/ 'evaluation'\ntest_path = data_path \/ 'test'\ntraining_tasks = sorted(os.listdir(training_path))\neval_tasks = sorted(os.listdir(evaluation_path))","760c06bf":"solved_id=set()\nsolved_eva_id=set()","b01a905e":"T = training_tasks\nTrains = []\nfor i in range(400):\n    task_file = str(training_path \/ T[i])\n    task = json.load(open(task_file, 'r'))\n    Trains.append(task)\n    \nE = eval_tasks\nEvals= []\nfor i in range(400):\n    task_file = str(evaluation_path \/ E[i])\n    task = json.load(open(task_file, 'r'))\n    Evals.append(task)","196fe596":"cmap = colors.ListedColormap(\n    ['#000000', '#0074D9','#FF4136','#2ECC40','#FFDC00',\n     '#AAAAAA', '#F012BE', '#FF851B', '#7FDBFF', '#870C25'])\nnorm = colors.Normalize(vmin=0, vmax=9)\n# 0:black, 1:blue, 2:red, 3:greed, 4:yellow,\n# 5:gray, 6:magenta, 7:orange, 8:sky, 9:brown\nplt.figure(figsize=(5, 2), dpi=200)\nplt.imshow([list(range(10))], cmap=cmap, norm=norm)\nplt.xticks(list(range(10)))\nplt.yticks([])\nplt.show()\n\ndef plot_task(task):\n    n = len(task[\"train\"]) + len(task[\"test\"])\n    fig, axs = plt.subplots(2, n, figsize=(4*n,8), dpi=50)\n    plt.subplots_adjust(wspace=0, hspace=0)\n    fig_num = 0\n    \n    for i, t in enumerate(task[\"train\"]):\n        t_in, t_out = np.array(t[\"input\"]), np.array(t[\"output\"])\n        axs[0][fig_num].imshow(t_in, cmap=cmap, norm=norm)\n        axs[0][fig_num].set_title(f'Train-{i} in')\n        axs[0][fig_num].set_yticks(list(range(t_in.shape[0])))\n        axs[0][fig_num].set_xticks(list(range(t_in.shape[1])))\n        axs[1][fig_num].imshow(t_out, cmap=cmap, norm=norm)\n        axs[1][fig_num].set_title(f'Train-{i} out')\n        axs[1][fig_num].set_yticks(list(range(t_out.shape[0])))\n        axs[1][fig_num].set_xticks(list(range(t_out.shape[1])))\n        fig_num += 1\n    for i, t in enumerate(task[\"test\"]):\n        t_in, t_out = np.array(t[\"input\"]), np.array(t[\"output\"])\n        axs[0][fig_num].imshow(t_in, cmap=cmap, norm=norm)\n        axs[0][fig_num].set_title(f'Test-{i} in')\n        axs[0][fig_num].set_yticks(list(range(t_in.shape[0])))\n        axs[0][fig_num].set_xticks(list(range(t_in.shape[1])))\n        axs[1][fig_num].imshow(t_out, cmap=cmap, norm=norm)\n        axs[1][fig_num].set_title(f'Test-{i} out')\n        axs[1][fig_num].set_yticks(list(range(t_out.shape[0])))\n        axs[1][fig_num].set_xticks(list(range(t_out.shape[1])))\n        fig_num += 1\n    \n    plt.tight_layout()\n    plt.show()","44f45bd4":"\ndef plot_picture(x):\n    plt.imshow(np.array(x), cmap = cmap, norm = norm)\n    plt.show()\n    \ndef Create(task, task_id = 0):\n    n = len(task['train'])\n    Input = [Defensive_Copy(task['train'][i]['input']) for i in range(n)]\n    Output = [Defensive_Copy(task['train'][i]['output']) for i in range(n)]\n    Input.append(Defensive_Copy(task['test'][task_id]['input']))\n    return Input, Output\n\ndef Defensive_Copy(A): \n    if type(A)!=list:\n        A=A.tolist()\n    n = len(A)\n    k = len(A[0])\n    L = np.zeros((n,k), dtype = int)\n    for i in range(n):\n        for j in range(k):\n            L[i,j] = 0 + A[i][j]\n    return L.tolist()","c7f92888":"BACKGROUND=0\ndef _get_bound(img0):\n    img=np.array(img0)\n    h, w = img.shape\n    x0 = w - 1\n    x1 = 0\n    y0 = h - 1\n    y1 = 0\n    for x in range(w):\n        for y in range(h):\n            if img[y, x] == BACKGROUND:\n                continue\n            x0 = min(x0, x)\n            x1 = max(x1, x)\n            y0 = min(y0, y)\n            y1 = max(y1, y)\n    return x0, x1, y0, y1\ndef get_bound_image(img0):\n    x0,x1,y0,y1=_get_bound(img0)\n    img=np.array(img0)\n    return img[y0:y1+1,x0:x1+1].tolist()\nBACKGROUND = 0\n\n_neighbor_offsets = {\n    4: [(1, 0), (-1, 0), (0, 1), (0, -1)],\n    8: [(1, 0), (-1, 0), (0, 1), (0, -1), (-1, -1), (-1, 1), (1, -1), (1, 1)]\n}\ndef _expand_region_indices(img, i, j, neighbor=4):\n    h, w = img.shape\n    seed_color = img[i, j]\n    idx = np.zeros_like(img, dtype=np.bool)\n    region = []\n    region.append((i, j))\n    while len(region) > 0:\n        ii, jj = region.pop()\n        if img[ii, jj] != seed_color:\n            continue\n        idx[ii, jj] = True\n        for di, dj in _neighbor_offsets[neighbor]:\n            ni, nj = ii + di, jj + dj\n            if ni >= 0 and ni < h and nj >= 0 and nj < w \\\n                    and not idx[ni, nj]:\n                region.append((ni, nj))\n    return idx\ndef _expand_region_indices01(img, i, j, neighbor=4):\n    h, w = img.shape\n    seed_color = 1\n    idx = np.zeros_like(img, dtype=np.bool)\n    region = []\n    region.append((i, j))\n    while len(region) > 0:\n        ii, jj = region.pop()\n        if img[ii, jj] == 0:\n            continue\n        idx[ii, jj] = True\n        for di, dj in _neighbor_offsets[neighbor]:\n            ni, nj = ii + di, jj + dj\n            if ni >= 0 and ni < h and nj >= 0 and nj < w \\\n                    and not idx[ni, nj]:\n                region.append((ni, nj))\n    return idx\n\n\n\ndef _split_object(img0, neighbor=4):\n    regions = []\n    img=np.array(img0)\n    mem = np.zeros_like(img, dtype=np.bool)\n    h, w = img.shape\n    for j in range(w):\n        for i in range(h):\n            p = img[i, j]\n            if p == BACKGROUND or mem[i, j]:\n                continue\n            conn_idx = _expand_region_indices(img, i, j, neighbor)\n            mem[conn_idx] = True\n            splitimage=np.where(conn_idx, img, BACKGROUND)\n\n            (minx,maxx,miny,maxy)=_get_bound(splitimage)\n            split_object=(splitimage[miny:maxy+1,minx:maxx+1]).tolist()\n            \n            \n            regions.append({'start': (miny, minx), 'obj':split_object})\n    return regions\n\ndef _split_object01(img0, neighbor=4):\n    regions = []\n    img=np.array(img0)\n    mem = np.zeros_like(img, dtype=np.bool)\n    h, w = img.shape\n    for j in range(w):\n        for i in range(h):\n            p = img[i, j]\n            if p == BACKGROUND or mem[i, j]:\n                continue\n            conn_idx = _expand_region_indices01(img, i, j, neighbor)\n            mem[conn_idx] = True\n            splitimage=np.where(conn_idx, img, BACKGROUND)\n\n        \n            (minx,maxx,miny,maxy)=_get_bound(splitimage)\n            split_object=(splitimage[miny:maxy+1,minx:maxx+1]).tolist()\n            \n            \n            regions.append({'start': (miny, minx), 'obj':split_object})\n    return regions\n\n    \n    \n    return color_image\ndef split_object(img):\n    return _split_object(img, neighbor=4)\ndef split_object8(img):\n    return _split_object(img, neighbor=8)\ndef split_object01(img):\n    return _split_object01(img, neighbor=4)\ndef split_object801(img):\n    return _split_object01(img, neighbor=8)\n","a6132857":"def inoutmap3(basic_task):\n    Input = [Defensive_Copy(x) for x in basic_task[0]]\n    Output = [Defensive_Copy(y) for y in basic_task[1]]\n    Test_Case = Input[-1]\n    Input = Input[:-1]\n    name_dic={}\n    obj_dic={}\n    for x, y in zip(Input,Output):\n        x_array=np.array(x)\n        y_array=np.array(y)\n        n0,m0=len(x),len(x[0])\n        a=split_object801(x)\n        if len(a)>10 or len(a)==0:\n            return -1\n        obj=[]\n        for i in range(len(a)):\n            obj.append(a[i][\"obj\"])\n        di_obj=[]\n        for i in range(len(obj)):\n            if obj[i] not in di_obj:\n                di_obj.append(obj[i])\n        \n\n\n\n        for k in range(len(di_obj)):\n            example=di_obj[k]\n            n,m=len(example),len(example[0])\n            for i in range(n0-n+1):\n                for j in range(m0-m+1):\n                    if x_array[i:i+n,j:j+m].tolist()==example:\n                        \n                        if i-1>=0 and i+n+1<=n0 and j-1>=0 and j+m+1<=m0:\n                            \n                            tmp_x=x_array[i-1:i+n+1,j-1:j+m+1]\n                            tmp_y=y_array[i-1:i+n+1,j-1:j+m+1]\n                            if str(tmp_x) not in obj_dic:\n                                name_dic[str(tmp_x)]=tmp_x\n                                obj_dic[str(tmp_x)]=tmp_y\n\n    return name_dic,obj_dic","63b12137":"def solve_inoutmap3(basic_task):\n    Input = [Defensive_Copy(x) for x in basic_task[0]]\n    Output = [Defensive_Copy(y) for y in basic_task[1]]\n    Test_Case = Input[-1]\n    Input = Input[:-1]\n    \n    if inoutmap3(basic_task)==-1:\n        return -1\n    name_dic,object_dict=inoutmap3(basic_task)\n    \n    for x, y in zip(Input,Output):\n        \n        if len(x)!=len(y) or len(x[0])!=len(y[0]):\n            return -1\n        x_array=np.array(x)\n        x_array_pad=np.pad(x_array,((1,1),(1,1)),'constant',constant_values = (0,0)) \n        x_array_copy=x_array.copy()\n        x_pad1=np.pad(x_array_copy,((1,1),(1,1)),'constant',constant_values = (0,0)) \n        y_array=np.array(y)\n        n0,m0=len(x),len(x[0])\n        \n        a=split_object801(x)\n        \n        if len(a)>10 or len(a)==0:\n            return -1\n        obj=[]\n        for i in range(len(a)):\n            obj.append(a[i][\"obj\"])\n        di_obj=[]\n        for i in range(len(obj)):\n            if obj[i] not in di_obj:\n                di_obj.append(obj[i])\n                \n        for k in range(len(di_obj)):\n            example=di_obj[k]\n            n,m=len(example),len(example[0])\n            for i in range(n0-n+1):\n                for j in range(m0-m+1):\n                    if x_array_pad[i+1:i+n+1,j+1:j+m+1].tolist()==example:\n                        \n                        if str(x_array_pad[i:i+n+1+1,j:j+m+1+1]) not in object_dict:\n                            return -1\n                       \n\n                        try:\n                            x_pad1[i:i+n+1+1,j:j+m+1+1]=object_dict[str(x_array_pad[i:i+n+1+1,j:j+m+1+1])]\n                            \n                        except:\n                            return-1\n                        \n        res=x_pad1[1:-1,1:-1]\n        \n        \n        if not (res==y_array).all():\n            return -1\n        \n    \n    Test_Case_array=np.array(Test_Case)\n    Test_Case_array_copy=Test_Case_array.copy()\n    Test_Case_pad=np.pad(Test_Case_array_copy,((1,1),(1,1)),'constant',constant_values = (0,0)) \n    Test_Case_pad1=np.pad(Test_Case_array_copy,((1,1),(1,1)),'constant',constant_values = (0,0)) \n    n0,m0=len(Test_Case),len(Test_Case[0])\n    a=split_object801(Test_Case)\n    obj=[]\n    \n    for i in range(len(a)):\n        obj.append(a[i][\"obj\"])\n    di_obj=[]\n    for i in range(len(obj)):\n        if obj[i] not in di_obj:\n            di_obj.append(obj[i])\n    for k in range(len(di_obj)):\n            example=di_obj[k]\n            n,m=len(example),len(example[0])\n            for i in range(n0-n+1):\n                for j in range(m0-m+1):\n                    if  Test_Case_pad[i+1:i+n+1,j+1:j+m+1].tolist()==example:\n                        \n                        if str(Test_Case_pad[i:i+n+1+1,j:j+m+1+1]) not in object_dict:\n                            return -1\n                        \n                       \n                        Test_Case_pad1[i:i+n+1+1,j:j+m+1+1]=object_dict[str(Test_Case_pad[i:i+n+1+1,j:j+m+1+1])]\n    return Test_Case_pad1[1:-1,1:-1].tolist()","9c27d40e":"for i in range(400):\n    task = Trains[i]\n    k = len(task['test'])\n\n    for j in range(k):        \n        basic_task = Create(task, j)\n        a=solve_inoutmap3(basic_task)\n        if a!=-1 :\n            print(i,j)\n            plot_task(task)\n            plot_picture(a)\n            solved_id.add(i)","46a90bf5":"list(solved_id)","e7c211d8":"Object split","c47eaf88":"### Result\n","63e53d92":"It is naive thinking,many place can improve.\n\nBut,it may have potential.\n\nYou can combine it to your DSL.\n\nThis is my first open Notebook in kaggle.Please tell me what can improve.\n\n","6e319708":"### Simple object map\n\n\ntrain 7\/400\n\nevals 0\/400\n\nLB: ????\n\nbased on [this method](https:\/\/www.kaggle.com\/szabo7zoltan\/howtofindmosaics)\n\n\n"}}