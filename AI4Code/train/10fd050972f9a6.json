{"cell_type":{"44f79e20":"code","60241366":"code","2554433d":"code","0ba1a563":"code","b3525c12":"code","60a80ad3":"code","88978c32":"code","4626558d":"code","73b25cf8":"code","8d6666f2":"code","db29682e":"code","04a87603":"code","934fd37b":"code","d5f7c75a":"code","91490bc7":"code","b37acb1f":"code","c74e5e88":"code","dfbf03e7":"code","70dce6df":"code","aac6ca43":"code","8c22f562":"code","5d910e96":"code","ebf678b0":"code","e0120505":"code","141f9f61":"code","3f828124":"code","4901bf47":"code","31be3d28":"code","5c9631fb":"markdown","db3998bd":"markdown","825296bc":"markdown","7d347c2a":"markdown","fd1c1510":"markdown","b4a9fa06":"markdown","80901578":"markdown","2b333892":"markdown"},"source":{"44f79e20":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))","60241366":"import matplotlib.pyplot as plt\nimport scipy.stats as stats\nimport seaborn as sns\n\n#pd.options.display.max_rows = 1000\n#pd.options.display.max_columns = 20","2554433d":"dfinputdir = '\/kaggle\/input\/iowa-liquor-mining\/liquor.csv'","0ba1a563":"colnan = ['Store Location']\ndfnan = pd.read_csv(dfinputdir,usecols=colnan,nrows=1000000)\nsumnan = dfnan.isnull().sum()\nprint((sumnan\/1000000)*100)","b3525c12":"cols = ['Sale (Dollars)','Pack','Bottles Sold','State Bottle Cost','State Bottle Retail','Bottle Volume (ml)','Volume Sold (Liters)']\ndf = pd.read_csv(dfinputdir,usecols=cols,nrows=1000000)","60a80ad3":"df.info()","88978c32":"print(df['Sale (Dollars)'].describe())\n#plt.figure(figsize=(9, 8))\n","4626558d":"def grubbs_test(x):\n    n = len(x)\n    mean_x = np.mean(x)\n    sd_x = np.std(x)\n    numerator = max(abs(x-mean_x))\n    g_calculated = numerator\/sd_x\n    print(\"Grubbs Calculated Value:\",g_calculated)\n    t_value = stats.t.ppf(1 - 0.05 \/ (2 * n), n - 2)\n    g_critical = ((n - 1) * np.sqrt(np.square(t_value))) \/ (np.sqrt(n) * np.sqrt(n - 2 + np.square(t_value)))\n    print(\"Grubbs Critical Value:\",g_critical)\n    if g_critical > g_calculated:\n        print(\"The calculated value is less than the critical value: by Grubbs test there are no outliers\\n\")\n    else:\n        print(\"The calculated value is greater than the critical value: by Grubbs test there is an outlier\\n\")","73b25cf8":"grubbs_test(df['Sale (Dollars)'].to_numpy())","8d6666f2":"grubbs_test(df['Pack'].to_numpy())","db29682e":"grubbs_test(df['Bottles Sold'].to_numpy())","04a87603":"grubbs_test(df['State Bottle Cost'].to_numpy())","934fd37b":"grubbs_test(df['Bottle Volume (ml)'].to_numpy())","d5f7c75a":"grubbs_test(df['State Bottle Retail'].to_numpy())","91490bc7":"grubbs_test(df['Volume Sold (Liters)'].to_numpy())","b37acb1f":"#Z-score based outlier detection\nz_out=[]\ndef Zscore_outlier(df):\n    m = np.mean(df)\n    sd = np.std(df)\n    for i in df: \n        z = (i-m)\/sd\n        if np.abs(z) > 3: \n            z_out.append(i)\n    print(\"Outliers:\",len(z_out))\nZscore_outlier(df['Sale (Dollars)'])\ndf_zo = pd.DataFrame (z_out, columns = ['outliers'])\n#print(df_zo['outliers'].describe())\n\ndf1 = df[df['Sale (Dollars)'].isin(z_out) == False]\nprint(df1['Sale (Dollars)'].describe())","c74e5e88":"#IQR based outlier detection\niqr_out=[]\ndef iqr_outliers(df):\n    q1 = df.quantile(0.25)\n    q3 = df.quantile(0.75)\n    iqr = q3-q1\n    Lower_tail = q1 - 1.5 * iqr\n    Upper_tail = q3 + 1.5 * iqr\n    for i in df:\n        if i > Upper_tail or i < Lower_tail:\n            iqr_out.append(i)\n    print(\"Outliers:\",len(iqr_out))\niqr_outliers(df['Sale (Dollars)'])\ndf_iqr = pd.DataFrame (iqr_out, columns = ['outliers'])\n#print(df_iqr['outliers'].describe())\n\ndf2 = df[df['Sale (Dollars)'].isin(iqr_out) == False]\nprint(df2['Sale (Dollars)'].describe())","dfbf03e7":"#Winsorization based outlier detection\nw_out=[]\ndef Winsorization_outliers(df):\n    q1 = np.percentile(df , 1)\n    q3 = np.percentile(df , 99)\n    for i in df:\n        if i > q3 or i < q1:\n            w_out.append(i)\n    print(\"Outliers:\",len(w_out))\nWinsorization_outliers(df['Sale (Dollars)'])\n\ndf3 = df[df['Sale (Dollars)'].isin(w_out) == False]\nprint(df3['Sale (Dollars)'].describe())","70dce6df":"plt.title(\"Raw Data (Outliers Included)\")\nsns.boxplot(df['Sale (Dollars)']);","aac6ca43":"plt.title(\"Z-Score Based Outlier Detection (6,129 Values Removed)\")\nsns.boxplot(df1['Sale (Dollars)']);","8c22f562":"plt.title(\"IQR Based Outlier Detection (66,710 Values Removed)\")\nsns.boxplot(df2['Sale (Dollars)']);","5d910e96":"plt.title(\"Winsorization Based Outlier Detection (19,480 Values Removed)\")\nsns.boxplot(df3['Sale (Dollars)']);","ebf678b0":"plt.title(\"Raw Data (Outliers Included)\")\nsns.distplot(df['Sale (Dollars)'], color='g', bins=100, hist_kws={'alpha': 0.4});","e0120505":"plt.title(\"Z-Score Based Outlier Detection (6,129 Values Removed)\")\nsns.distplot(df1['Sale (Dollars)'], color='g', bins=100, hist_kws={'alpha': 0.4});","141f9f61":"plt.title(\"IQR Based Outlier Detection (66,710 Values Removed)\")\nsns.distplot(df2['Sale (Dollars)'], color='g', bins=100, hist_kws={'alpha': 0.4});","3f828124":"plt.title(\"Winsorization Based Outlier Detection (19,480 Values Removed)\")\nsns.distplot(df3['Sale (Dollars)'], color='g', bins=100, hist_kws={'alpha': 0.4});","4901bf47":"def pairplot(x, y, **kwargs):\n    ax = plt.gca()\n    ts = pd.DataFrame({'time': x, 'val': y})\n    ts = ts.groupby('time').mean()\n    ts.plot(ax=ax)\n    plt.xticks(rotation=90)\n    \nf = pd.melt(df, id_vars=['Sale (Dollars)'])\ng = sns.FacetGrid(f, col=\"variable\",  col_wrap=2, sharex=False, sharey=False, size=5)\ng = g.map(pairplot, \"value\", \"Sale (Dollars)\")","31be3d28":"f = pd.melt(df2, id_vars=['Sale (Dollars)'])\ng = sns.FacetGrid(f, col=\"variable\",  col_wrap=2, sharex=False, sharey=False, size=5)\ng = g.map(pairplot, \"value\", \"Sale (Dollars)\")","5c9631fb":"References\n\nhttps:\/\/www.kaggle.com\/nareshbhat\/outlier-the-silent-killer\n\nhttps:\/\/www.kaggle.com\/dgawlik\/house-prices-eda\/notebook\n\nhttps:\/\/www.kaggle.com\/ekami66\/detailed-exploratory-data-analysis-with-python\n\nhttps:\/\/www.kaggle.com\/rpsuraj\/outlier-detection-techniques-simplified","db3998bd":"Read dataset into pandas dataframe. This is a subset of the dataset (1 million rows) with 5 numerical attributes: Sale, Pack, Bottles Sold, Bottle Cost, and Bottle Volume.","825296bc":"Pandas interprets pack, bottle volume, and bottles sold as integer datatypes. Bottle cost and sale are float datatypes.\nOutlier analysis focuses on the Sale attribute.","7d347c2a":"Dataset directory","fd1c1510":"The maximum value in Sale is more than 400 standard deviations away from the mean. Conventionally, outliers are detected at >=3 standard deviations from the mean (99.7% of data lies within 3 std). This is appears to be an individual, global outlier.","b4a9fa06":"Preprocessing: 'Store Location'. Calculate % of rows that contain empty fields (is null). Nearly 10% of values in this attribute are missing from a sample size of 1 million.","80901578":"Proprocessing step #1 - view info of dataframe.","2b333892":"Import extra libraries: matplotlib, scipy, seaborn"}}