{"cell_type":{"9561a696":"code","c23c2f5e":"code","34e8120a":"code","c64eef99":"code","55540342":"code","8c612e7d":"code","8c370204":"code","9d00593c":"code","051bdb3f":"code","20711498":"code","8f9ec73a":"code","291777ac":"code","06cf249f":"code","4d450b5a":"code","4abdb531":"code","bf1aefb9":"code","82968fef":"code","6d7c17b1":"code","3f0b7330":"code","ce9ce6f2":"code","c3cf2d43":"code","b065990f":"code","fb9848f7":"markdown","4333ceb3":"markdown","45a65f3f":"markdown","d2ddb6b3":"markdown","ce775291":"markdown","e2475dff":"markdown","89b5cd74":"markdown","b7e58489":"markdown","2136343a":"markdown","4073553c":"markdown","ad4962f8":"markdown","7be05aca":"markdown","c0c16ef6":"markdown","f60225f2":"markdown","c5b190ef":"markdown"},"source":{"9561a696":"# Pandas\nimport pandas as pd\n\n# Scikit learn\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import classification_report, accuracy_score, confusion_matrix\nfrom sklearn.preprocessing import LabelEncoder\nfrom sklearn.utils import shuffle\nfrom sklearn.utils import class_weight\n\n# Keras\nfrom keras.models import Sequential\nfrom keras.layers import Dense, Dropout, Activation, Flatten\nfrom keras.layers import Convolution2D, Conv2D, MaxPooling2D, GlobalAveragePooling2D\nfrom keras.utils import to_categorical\n\n# Audio\nimport librosa\nimport librosa.display\n\n# Plot\nimport matplotlib.pyplot as plt\n\n# Utility\nimport os\nimport glob\nimport numpy as np\nfrom tqdm import tqdm\nimport itertools","c23c2f5e":"%%time\ndataset = []\nfor folder in [\"..\/input\/set_a\/**\",\"..\/input\/set_b\/**\"]:\n    for filename in glob.iglob(folder):\n        if os.path.exists(filename):\n            label = os.path.basename(filename).split(\"_\")[0]\n            # skip audio smaller than 4 secs\n            if librosa.get_duration(filename=filename)>=4:\n                if label not in [\"Aunlabelledtest\", \"Bunlabelledtest\"]:\n                    dataset.append({\n                        \"filename\": filename,\n                        \"label\": label\n                    })\ndataset = pd.DataFrame(dataset)\ndataset = shuffle(dataset, random_state=42)","34e8120a":"dataset.info()","c64eef99":"plt.figure(figsize=(12,6))\ndataset.label.value_counts().plot(kind='bar', title=\"Dataset distribution\")\nplt.show()","55540342":"train, test = train_test_split(dataset, test_size=0.2, random_state=42)\n\nprint(\"Train: %i\" % len(train))\nprint(\"Test: %i\" % len(test))","8c612e7d":"%%time\nplt.figure(figsize=(20,20))\nidx = 0\nfor label in dataset.label.unique():    \n    y, sr = librosa.load(dataset[dataset.label==label].filename.iloc[0], duration=4)\n    idx+=1\n    plt.subplot(5, 3, idx)\n    plt.title(\"%s wave\" % label)\n    librosa.display.waveplot(y, sr=sr)\n    idx+=1\n    plt.subplot(5, 3, idx)\n    D = librosa.amplitude_to_db(np.abs(librosa.stft(y)), ref=np.max)\n    librosa.display.specshow(D, y_axis='linear')\n    plt.title(\"%s spectogram\" % label)\n    idx+=1\n    mfccs = librosa.feature.mfcc(y=y, sr=sr, n_mfcc=40)\n    plt.subplot(5, 3, idx)\n    librosa.display.specshow(mfccs, x_axis='time')\n    plt.title(\"%s mfcc\" % label)\nplt.show()\n","8c370204":"def extract_features(audio_path):\n    y, sr = librosa.load(audio_path, duration=4)\n    mfccs = librosa.feature.mfcc(y=y, sr=sr, n_mfcc=40)\n    return mfccs","9d00593c":"%%time\nx_train, x_test = [], []\nprint(\"Extract features from TRAIN  and TEST dataset\")\nfor idx in tqdm(range(len(train))):\n    x_train.append(extract_features(train.filename.iloc[idx]))\n\nfor idx in tqdm(range(len(test))):\n    x_test.append(extract_features(test.filename.iloc[idx]))\n    \n    \nx_test = np.asarray(x_test)\nx_train = np.asarray(x_train)\n\nprint(\"X train:\", x_train.shape)\nprint(\"X test:\", x_test.shape)","051bdb3f":"%%time\nencoder = LabelEncoder()\nencoder.fit(train.label)\n\ny_train = encoder.transform(train.label)\ny_test = encoder.transform(test.label)","20711498":"class_weights = class_weight.compute_class_weight('balanced',\n                                                 np.unique(y_train),\n                                                 y_train)\n\n","8f9ec73a":"\nx_train = x_train.reshape(x_train.shape[0], x_train.shape[1], x_train.shape[2], 1)\nx_test = x_test.reshape(x_test.shape[0], x_test.shape[1], x_test.shape[2], 1)\ny_train = to_categorical(y_train)\ny_test = to_categorical(y_test)\n\n\n\nprint(\"X train:\", x_train.shape)\nprint(\"Y train:\", y_train.shape)\nprint()\nprint(\"X test:\", x_test.shape)\nprint(\"Y test:\", y_test.shape)","291777ac":"model = Sequential()\nmodel.add(Conv2D(filters=16, kernel_size=2, input_shape=(x_train.shape[1],x_train.shape[2],x_train.shape[3]), activation='relu'))\nmodel.add(MaxPooling2D(pool_size=2))\nmodel.add(Dropout(0.2))\n\nmodel.add(Conv2D(filters=32, kernel_size=2, activation='relu'))\nmodel.add(MaxPooling2D(pool_size=2))\nmodel.add(Dropout(0.2))\n\nmodel.add(Conv2D(filters=64, kernel_size=2, activation='relu'))\nmodel.add(MaxPooling2D(pool_size=2))\nmodel.add(Dropout(0.2))\n\nmodel.add(Conv2D(filters=128, kernel_size=2, activation='relu'))\nmodel.add(MaxPooling2D(pool_size=2))\nmodel.add(Dropout(0.5))\nmodel.add(GlobalAveragePooling2D())\n\nmodel.add(Dense(len(encoder.classes_), activation='softmax'))\nmodel.summary()","06cf249f":"model.compile(loss='categorical_crossentropy', metrics=['accuracy'], optimizer='adam')","4d450b5a":"%%time\nhistory = model.fit(x_train, y_train,\n              batch_size=128,\n              epochs=300,\n              validation_data=(x_test, y_test),\n              class_weight=class_weights,\n              shuffle=True)","4abdb531":"# Loss Curves\nplt.figure(figsize=[14,10])\nplt.subplot(211)\nplt.plot(history.history['loss'],'r',linewidth=3.0)\nplt.plot(history.history['val_loss'],'b',linewidth=3.0)\nplt.legend(['Training loss', 'Validation Loss'],fontsize=18)\nplt.xlabel('Epochs ',fontsize=16)\nplt.ylabel('Loss',fontsize=16)\nplt.title('Loss Curves',fontsize=16)\n \n# Accuracy Curves\nplt.figure(figsize=[14,10])\nplt.subplot(212)\nplt.plot(history.history['acc'],'r',linewidth=3.0)\nplt.plot(history.history['val_acc'],'b',linewidth=3.0)\nplt.legend(['Training Accuracy', 'Validation Accuracy'],fontsize=18)\nplt.xlabel('Epochs ',fontsize=16)\nplt.ylabel('Accuracy',fontsize=16)\nplt.title('Accuracy Curves',fontsize=16)","bf1aefb9":"# Save model and weights\nmodel_name = \"heartbeat_disease.h5\"\nmodel.save(model_name)\nprint('Saved trained model at %s ' % model_name)","82968fef":"scores = model.evaluate(x_test, y_test, verbose=1)\nprint('Test loss:', scores[0])\nprint('Test accuracy:', scores[1])","6d7c17b1":"predictions = model.predict(x_test, verbose=1)","3f0b7330":"y_true, y_pred = [],[]\nclasses = encoder.classes_\nfor idx, prediction in enumerate(predictions): \n    y_true.append(classes[np.argmax(y_test[idx])])\n    y_pred.append(classes[np.argmax(prediction)])","ce9ce6f2":"print(classification_report(y_pred, y_true))","c3cf2d43":"def plot_confusion_matrix(cm, classes,\n                          title='Confusion matrix',\n                          cmap=plt.cm.Blues):\n    \"\"\"\n    This function prints and plots the confusion matrix.\n    Normalization can be applied by setting `normalize=True`.\n    \"\"\"\n    plt.figure(figsize=(11, 11))\n    plt.imshow(cm, interpolation='nearest', cmap=cmap)\n    plt.title(title, fontsize=30)\n    tick_marks = np.arange(len(classes))\n    plt.xticks(tick_marks, classes, rotation=90, fontsize=15)\n    plt.yticks(tick_marks, classes, fontsize=15)\n\n    fmt = '.2f'\n    thresh = cm.max() \/ 2.\n    for i, j in itertools.product(range(cm.shape[0]), range(cm.shape[1])):\n        plt.text(j, i, format(cm[i, j], fmt),\n                 horizontalalignment=\"center\",\n                 color=\"white\" if cm[i, j] > thresh else \"black\")\n\n    plt.ylabel('True label', fontsize=25)\n    plt.xlabel('Predicted label', fontsize=25)\n    plt.tight_layout()\n\n    plt.show()","b065990f":"cnf_matrix = confusion_matrix(y_pred, y_true)\ncnf_matrix = cnf_matrix.astype(float) \/ cnf_matrix.sum(axis=1)[:, np.newaxis]\nplot_confusion_matrix(cnf_matrix, classes)","fb9848f7":"### Build Dataset","4333ceb3":"### Extract features from audio","45a65f3f":"### Show Audio info","d2ddb6b3":"### Compile model","ce775291":"### Build Model","e2475dff":"### Input shapes","89b5cd74":"### Compute class weights","b7e58489":"### Fit model","2136343a":"### Classification Report","4073553c":"### Save model","ad4962f8":"### Encode labels","7be05aca":"# Heartbeat disease classifier","c0c16ef6":"### Confusion Matrix","f60225f2":"### Evaluate model","c5b190ef":"### Split dataset in train and test"}}