{"cell_type":{"35ee39d1":"code","dd0b75d4":"code","58c3753b":"code","9f50f951":"code","a0ebc39e":"code","86a29575":"code","68d46eb5":"code","7b4fd3b6":"code","dc078800":"code","5a0fc4ad":"code","12085b28":"code","135564ae":"code","1264b9fa":"code","0d3f1234":"code","8949a7ef":"code","ae1c02b0":"code","edd6c36f":"code","b8213655":"code","9635b5c5":"code","d0ffe48c":"code","8c062275":"code","a8760da7":"code","f09f1ae8":"code","4bf290a0":"code","51b05fed":"markdown","24249cfe":"markdown","9c441dfb":"markdown","860fed15":"markdown","3b25051e":"markdown","e986165b":"markdown","730eaafb":"markdown","2b461fb2":"markdown","decd8010":"markdown","d6553a27":"markdown"},"source":{"35ee39d1":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory\n\nimport os\nprint(os.listdir(\"..\/input\/1-step-by-step-format-data-to-columnar-format\/\"))\n\n# Any results you write to the current directory are saved as output.","dd0b75d4":"import pandas as pd\nidir = \"..\/input\/1-step-by-step-format-data-to-columnar-format\/\"\ntrain_df = pd.read_csv(idir + \"train_flat.csv\", \n    dtype={'fullVisitorId': str, 'date': str, 'visitId':str, 'visitNumber':str, 'visitStartTime':str, 'sessionId': str  },\n    nrows=1000000, \n    low_memory=False)\n\ntest_df = pd.read_csv(idir + \"test_flat.csv\", \n    dtype={'fullVisitorId': str, 'date': str, 'visitId':str, 'visitNumber':str, 'visitStartTime':str, 'sessionId': str  },\n    nrows=1000000, \n    low_memory=False)\n\ntrain_df.head()","58c3753b":"%%time\ncdf = pd.concat([train_df.count(), train_df.nunique(), train_df.isna().sum(), train_df.dtypes], axis = 1)\ncdf = cdf.reset_index()\ncdf.columns = [\"Column_Name\", \"Total_Records\", \"Unique_Values\", \"Null Values\", \"data_types\"]","9f50f951":"cdf[cdf.Total_Records > 0].reset_index()","a0ebc39e":"print(\"Variables not in test but in train : \", set(train_df.columns).difference(set(test_df.columns)))","86a29575":"train_df.drop(columns = ['trafficSource_campaignCode'], inplace = True)","68d46eb5":"%%time\nfor df in [train_df, test_df]: \n    df.drop(columns = cdf[cdf.Total_Records == 0][\"Column_Name\"], inplace=True)","7b4fd3b6":"train_df.select_dtypes('object').describe()","dc078800":"train_df.select_dtypes(exclude = 'object').describe()","5a0fc4ad":"for df in [train_df, test_df]: \n    df['totals_transactionRevenue'] = train_df['totals_transactionRevenue'].fillna(0)\n    df['totals_newVisits'] = train_df['totals_newVisits'].fillna(0)\n    df['totals_bounces'] = train_df['totals_newVisits'].fillna(0)\n    df['trafficSource_adwordsClickInfo.page'] = train_df['trafficSource_adwordsClickInfo.page'].fillna(0)\n\ntrain_df.select_dtypes(exclude = 'object').describe()","12085b28":"for df in ([train_df, test_df]): \n    df['trafficSource_adwordsClickInfo.isVideoAd'] = df['trafficSource_adwordsClickInfo.isVideoAd'].fillna(True)\n    df['trafficSource_isTrueDirect'] = df['trafficSource_isTrueDirect'].fillna(False)\n    df['trafficSource_isVideoAd'] = df['trafficSource_adwordsClickInfo.isVideoAd'].map({True: 1, False: 0})\n    df['trafficSource_isDirect'] = df['trafficSource_isTrueDirect'].map({True: 1, False: 0})\n    df.drop(columns = ['trafficSource_adwordsClickInfo.isVideoAd', 'trafficSource_isTrueDirect'])","135564ae":"%%time\nfor df in [train_df, test_df]: \n    for col in df.select_dtypes('object').columns: \n        df[col] = df[col].fillna('DEF')","1264b9fa":"train_df.select_dtypes('object').describe()","0d3f1234":"train_df.select_dtypes(exclude = 'object').describe()","8949a7ef":"%%time\n# attributes = ['device_browser']\nattributes = ['device_browser', 'device_deviceCategory', 'device_operatingSystem', 'geoNetwork_city', 'geoNetwork_metro', 'geoNetwork_region', 'geoNetwork_country', 'geoNetwork_subContinent', 'geoNetwork_continent', 'geoNetwork_networkDomain', 'trafficSource_adContent', 'trafficSource_adwordsClickInfo.adNetworkType', 'trafficSource_adwordsClickInfo.page', 'trafficSource_adwordsClickInfo.slot', 'trafficSource_campaign', 'trafficSource_keyword', 'trafficSource_medium', 'trafficSource_referralPath', 'trafficSource_source', 'trafficSource_adwordsClickInfo.gclId']\nfor att in attributes: \n    print(att)\n    c = train_df[att].value_counts()\n    s = train_df.groupby(att)['totals_transactionRevenue'].sum()\n    df = pd.concat([c, s], axis = 1, sort=True)\n    df.columns = ['recs', 'tr']\n    df = df.reset_index()\n    df.columns = ['idx', 'recs', 'tr']\n    val_to_keep = list(df[ (df.recs > 10000) | (df.tr > 0 ) ].idx)\n    val_to_keep.append('DEF')\n    d = dict()\n    counter = 0\n    for i in c.index:\n        if i not in val_to_keep: \n            d[i] = \"DEF\"\n            counter = counter + 1\n            if ( counter % 2000 == 0 ): \n                print(\"Iter : \" + str(round(counter\/2000)))\n                train_df[att].replace(d, inplace=True)\n                test_df[att].replace(d, inplace=True)\n                d = dict()\n    train_df[att].replace(d, inplace=True)\n    test_df[att].replace(d, inplace=True)","ae1c02b0":"f = '.\/train_flat_cln1.csv'\ntrain_df.to_csv(f, index = False)\ns = os.stat(f)\nnum_lines = sum(1 for line in open(f))\nprint(f + \":\" + str(round(s.st_size \/ (1024 * 1024)) ) + \" MB : \" + str(num_lines) + \" lines\")","edd6c36f":"f = '.\/test_flat_cln1.csv'\ntest_df.to_csv(f, index = False)\ns = os.stat(f)\nnum_lines = sum(1 for line in open(f))\nprint(f + \":\" + str(round(s.st_size \/ (1024 * 1024)) ) + \" MB : \" + str(num_lines) + \" lines\")","b8213655":"c = train_df.select_dtypes(exclude = 'object').drop(columns = ['totals_visits', 'trafficSource_isVideoAd', 'trafficSource_isDirect']).corr()\nc","9635b5c5":"from plotly.offline import init_notebook_mode, iplot\nimport plotly.graph_objs as go\nfrom plotly import tools","d0ffe48c":"init_notebook_mode(connected=True)\ntrace = go.Heatmap(z = c.values.tolist(), x = c.columns, y = c.columns, colorscale='RdBu')\ndata=[trace]\nlayout = go.Layout(\n    autosize=False,\n    width=600,\n    height=600,\n)\n\nfig = go.Figure(data=data, layout=layout)\niplot(fig, filename='basic-heatmap')","8c062275":"def create_count_rev_plot(bar_series, scatter_series): \n    trace1 = go.Bar(\n        x = bar_series.index, \n        y = bar_series.values, \n        name = 'No of Records'\n    )\n    trace2 = go.Scatter(\n        x = scatter_series.index, \n        y = scatter_series['totals_transactionRevenue'],\n        yaxis = 'y2', \n        mode='markers+text', \n        name = 'TR'\n    )\n    trace3 = go.Scatter(\n        x = scatter_series.index, \n        y = scatter_series['totals_transactionRevenue'] \/ scatter_series['totals_pageviews'],\n        yaxis = 'y3', \n        mode='markers+text', \n        name = 'TR \/ PV'\n    )\n    trace4 = go.Scatter(\n        x = scatter_series.index, \n        y = scatter_series['totals_transactionRevenue'] \/ scatter_series['totals_hits'],\n        yaxis = 'y4', \n        mode='markers+text', \n        name = 'TR \/ Hit'\n    )\n    layout = go.Layout(\n        title=sc.name + ' & ' + rs.name,\n        yaxis=dict(\n            title='No. of Records', \n            titlefont=dict(\n                color='#1f77b4'\n            ),\n            tickfont=dict(\n                color='#1f77b4'\n            )\n        ),\n        yaxis2=dict(\n            title='Total Revenue',\n            titlefont=dict(\n                color='#ff7f0e'\n            ),\n            tickfont=dict(\n                color='#ff7f0e'\n            ),\n            anchor='free',\n            overlaying='y',\n            side='left',\n            position=0.02\n        ),\n        yaxis3=dict(\n            title='Total Revenue Per PageView',\n            titlefont=dict(\n                color='#d62728'\n            ),\n            tickfont=dict(\n                color='#d62728'\n            ),\n            anchor='x',\n            overlaying='y',\n            side='right'        \n        ),\n        yaxis4=dict(\n            title='Total Revenue Per Hit',\n            titlefont=dict(\n                color='#9467bd'\n            ),\n            tickfont=dict(\n                color='#9467bd'\n            ),\n            anchor='free',\n            overlaying='y',\n            side='right',\n            position=0.98        \n        )\n    )\n    data = [trace1, trace2, trace3, trace4]\n    fig = go.Figure(data=data, layout=layout)\n    fig['layout'].update(showlegend = False, height = 600, width = 800)\n    return iplot(fig, filename='multiple-axes-multiple')","a8760da7":"for att in [\"device_browser\", 'device_deviceCategory', 'device_operatingSystem']:\n    sc = train_df[att].value_counts()\n    sc.name = att\n    rs = train_df.groupby(att)['totals_transactionRevenue', 'totals_hits', 'totals_pageviews'].sum()\n    rs.name = \"Revenues\"\n    create_count_rev_plot(sc,rs)","f09f1ae8":"# Skip: 'geoNetwork_networkDomain'\nfor att in [\"geoNetwork_city\", 'geoNetwork_metro', 'geoNetwork_region', 'geoNetwork_country', 'geoNetwork_subContinent', 'geoNetwork_continent', 'geoNetwork_networkDomain']:\n    sc = train_df[att].value_counts()\n    sc.name = att\n    rs = train_df.groupby(att)['totals_transactionRevenue', 'totals_hits', 'totals_pageviews'].sum()\n    rs.name = \"Revenues\"\n    create_count_rev_plot(sc,rs)","4bf290a0":"# Skip: 'trafficSource_adwordsClickInfo.gclId'\nfor att in [\"trafficSource_adContent\", 'trafficSource_adwordsClickInfo.adNetworkType', 'trafficSource_adwordsClickInfo.isVideoAd', 'trafficSource_adwordsClickInfo.page', 'trafficSource_adwordsClickInfo.slot', 'trafficSource_campaign', 'trafficSource_isTrueDirect', 'trafficSource_keyword', 'trafficSource_medium', 'trafficSource_referralPath', 'trafficSource_source', 'trafficSource_adwordsClickInfo.gclId']:\n    sc = train_df[att].value_counts()\n    sc.name = att\n    rs = train_df.groupby(att)['totals_transactionRevenue', 'totals_hits', 'totals_pageviews'].sum()\n    rs.name = \"Revenues\"\n    create_count_rev_plot(sc,rs)","51b05fed":"## Handle the null character columns\n\n### TODO: Hierarchy to be  be check  if data low level data is avialable\n-> If country is available, then we should populate continent and sub-continent  \n-> If Device is available, OS should be guessed","24249cfe":"From the above figure we see revenue is correlated with total_hits and page_views","9c441dfb":"## Drop columns in train not in test \nExcept for total revenue","860fed15":"## Understanding the variables\nWe have 4 JSON objects in the source - Device, Location, Traffic and Totals source.  Lets analyze these 4 in detail.","3b25051e":"## Handle the Text Boolean columns","e986165b":"### Drop columns that has 0 values","730eaafb":"## Correlation analysis","2b461fb2":"## Program to create ","decd8010":"## Group values with few rows and 0 revenue into a single value\n\nSome columns has huge list of values and we have to split them into batches of 1000's","d6553a27":"## Fill in 0's for null numeric values"}}