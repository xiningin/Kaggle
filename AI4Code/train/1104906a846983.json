{"cell_type":{"60958c9e":"code","137bdfc6":"code","bb3ccf0e":"code","afce9e03":"code","6a36133a":"code","9246aeeb":"code","fea120f8":"code","6ceaf1bd":"code","26d6154b":"code","b95a3bcf":"code","a3bec59c":"code","d29e239d":"code","e0927260":"code","74d7c5a4":"code","4ddfa961":"code","a563005e":"code","cabc75fa":"code","0d29cc3a":"code","e6633bb9":"code","82b94c7b":"code","49e1fdaa":"code","d3f74e74":"code","8dcb9183":"code","c0fe490f":"code","66a9b24c":"code","d723b951":"code","a36398b4":"code","2a3cb7e0":"code","54637146":"code","bfefd342":"code","8f8e21b7":"code","4f89abf9":"code","f50c8339":"code","30996b38":"markdown","d2d8c573":"markdown","045245fa":"markdown","707fdaf8":"markdown","46775e4a":"markdown"},"source":{"60958c9e":"# import necessary modules \nimport pandas as pd \nimport matplotlib.pyplot as plt \nimport numpy as np \nimport seaborn as sns\nsns.set(rc={'figure.figsize':(40,15)})","137bdfc6":"#reading csv for train data\ndata_train=pd.read_csv(\"..\/input\/titanic\/train.csv\")\ndata_train","bb3ccf0e":"#distplot\nsns.distplot(x = data_train['Fare'], bins =5)","afce9e03":"#countplot\nsns.countplot(data_train['Embarked'])","6a36133a":"#missing value check by matrix\nimport missingno as msno\nmsno.matrix(data_train)","9246aeeb":"#missing value check by heat map\nmsno.heatmap(data_train)","fea120f8":"#Checking correlation if any exists\ncorr=data_train.corr()\nsns.heatmap(corr)","6ceaf1bd":"#Checking For Null Values if any Present\ndata_train.isnull().sum()","26d6154b":"#filling  Numerical null values by mean\ndf=pd.DataFrame()\ndata_train['Age']=data_train['Age'].fillna((data_train['Age'].mean()))\n#filling non numerical Categorical null values by most occuring one\ndf_most_common_imputed = data_train.apply(lambda x: x.fillna(x.value_counts().index[0]))\ndf[\"Survived\"]=df_most_common_imputed[\"Survived\"]\n#appending the target value column to the last \ndf_most_common_imputed.drop([\"Survived\"], axis=1, inplace=True)\ndf_most_common_imputed[\"Survived\"]=df[\"Survived\"]\ndf_most_common_imputed.isnull().sum()","b95a3bcf":"#imputation is completed we will confirm still if there is any na value present\nimport missingno as msno\nmsno.matrix(df_most_common_imputed)","a3bec59c":"df_most_common_imputed.isnull().sum()","d29e239d":"#encoding object data type to which it can be fitted to model\nimport pandas as pd\nimport numpy as np\nfrom sklearn import preprocessing\nle = preprocessing.LabelEncoder()\nfor column_name in df_most_common_imputed.columns:\n    if df_most_common_imputed[column_name].dtype == object:\n        df_most_common_imputed[column_name] = le.fit_transform(df_most_common_imputed[column_name])\n    else:\n        pass\nfrom sklearn.feature_selection import SelectKBest\nfrom sklearn.feature_selection import chi2\nX = df_most_common_imputed.iloc[:,0:]  \ny = df_most_common_imputed.iloc[:,-1] \n#Selecting best featues according to importance\nbestfeatures = SelectKBest(score_func=chi2, k=12)\nfit = bestfeatures.fit(X,y)\ndfscores = pd.DataFrame(fit.scores_)\ndfcolumns = pd.DataFrame(X.columns)\n#concat two dataframes for better visualization \nfeatureScores = pd.concat([dfcolumns,dfscores],axis=1)\nfeatureScores.columns = ['Features','Score']  #naming the dataframe columns\nprint(featureScores.nlargest(12,'Score')) \ndf_most_common_imputed","e0927260":"#outliar checking  by boxplot\nsns.boxplot(data=df_most_common_imputed)","74d7c5a4":"#plotting pairplots\nsns.pairplot(df_most_common_imputed)","4ddfa961":"# df_most_common_imputed\n# import pandas as pd\n# from scipy import stats\n# z_scores = stats.zscore(df_most_common_imputed)\n# abs_z_scores = np.abs(z_scores)\n# filtered_entries = (abs_z_scores < 3).all(axis=1)\n# new_df = df_most_common_imputed[filtered_entries]\n# new_df","a563005e":"#reading csv for test data\ndata_test=pd.read_csv(\"..\/input\/titanic\/test.csv\")\ndata_test.head()","cabc75fa":"#Checking For Null Values if any Present\ndata_test.isnull().sum()","0d29cc3a":"#distplot\nsns.distplot(x = data_test['Fare'], bins = 5)","e6633bb9":"#countplot\nsns.countplot(data_test['Embarked'])","82b94c7b":"#missing value check by matrix\nimport missingno as msno\nmsno.matrix(data_test)","49e1fdaa":"#missing value check by heat map\nmsno.heatmap(data_test)","d3f74e74":"#Checking correlation if any exists\ncorr=data_test.corr()\nsns.heatmap(corr)","8dcb9183":"#filling  Numerical null values by mean\ndata_test['Age']=data_test['Age'].fillna((data_test['Age'].mean()))\ndata_test['Fare']=data_test['Fare'].fillna((data_test['Fare'].mean()))\n#filling non numerical Categorical null values by most occuring one\ndt_most_common_imputed = data_test.apply(lambda x: x.fillna(x.value_counts().index[0]))\ndt_most_common_imputed.isnull().sum()","c0fe490f":"#imputation is completed we will confirm still if there is any na value present\nimport missingno as msno\nmsno.matrix(dt_most_common_imputed)","66a9b24c":"dt_most_common_imputed.isnull().sum()","d723b951":"#outliar checking  by boxplot\nsns.boxplot(data=dt_most_common_imputed)","a36398b4":"#plotting pairplots\nsns.pairplot(dt_most_common_imputed)","2a3cb7e0":"#dataframe for submission\ndt=pd.DataFrame()\ndt['PassengerId']=dt_most_common_imputed['PassengerId']\ndt['Survived']=df_most_common_imputed['Survived']\ndt","54637146":"#encoding object data type to which it can be fitted to model\nimport pandas as pd\nimport numpy as np\nfrom sklearn import preprocessing\nle = preprocessing.LabelEncoder()\nfor column_name in dt_most_common_imputed.columns:\n    if dt_most_common_imputed[column_name].dtype == object:\n        dt_most_common_imputed[column_name] = le.fit_transform(dt_most_common_imputed[column_name])\n    else:\n        pass\n#splitting data for training and testing\nx_train =  df_most_common_imputed.iloc[:,0:-1]  \ny_train = df_most_common_imputed.iloc[:,-1] \nx_test=  dt_most_common_imputed\nx_train\ny_train\nx_test","bfefd342":"#Applying Catboost classifier as it is too efficient in this case!!\nfrom catboost import CatBoostClassifier\nfrom sklearn.metrics import accuracy_score,confusion_matrix\nclf = CatBoostClassifier(iterations=9,learning_rate=0.5)\nclf.fit(x_train, y_train)\ncat = clf.predict(x_test)\ndt[\"Survived\"]=cat\n\nsub=pd.read_csv(\"..\/input\/titanic\/gender_submission.csv\")\naccuracy = accuracy_score(sub[\"Survived\"], cat)\nprint(\"Accuracy: %.2f%%\" % (accuracy * 100.0))\n\nprint(accuracy_score(sub[\"Survived\"],cat))\nprint(confusion_matrix(sub[\"Survived\"],cat))\ndt.head()","8f8e21b7":"sns.scatterplot(data =dt, x = \"PassengerId\", y = \"Survived\")\nplt.show()","4f89abf9":"dt.info()","f50c8339":"#dt.to_csv(\"cat_boost.csv\",index=False)","30996b38":"#### Next step is for outliar removal but it may lead to low accuracy in this case","d2d8c573":"<img src=\"titanic.jpg\" alt=\"titanic\" height=\"100\">\n","045245fa":"### Training Data","707fdaf8":"## Testing Data","46775e4a":"## Titanic - Machine Learning from Disaster\n\n## ***Top 6%***"}}