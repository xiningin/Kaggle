{"cell_type":{"4253e266":"code","1789f20b":"code","61452e9e":"code","e69d19ae":"code","2cf8bc81":"code","7c154cee":"code","b7f3668e":"code","e264f9aa":"code","dcf65828":"code","57dcd7c3":"code","e12e5fc4":"code","d7ec75a3":"code","dd026be1":"code","3c467673":"code","8ccbadb5":"code","98b30460":"code","dbdb8f91":"code","c89d881e":"code","adf9b420":"code","c62cdc1a":"code","4ade560e":"code","1195ad4e":"code","328d7e1c":"code","10a08d1f":"code","aa59f978":"code","c8e57c0d":"markdown","2322554a":"markdown","555e2ab7":"markdown","67b1713b":"markdown","06e61e47":"markdown","2716d74c":"markdown"},"source":{"4253e266":"!pip install tensorflow-gpu==1.14.0\n!pip install keras==2.2.4","1789f20b":"import os, glob\nimport random\nfrom sklearn.model_selection import train_test_split\nimport cv2\nimport numpy as np\nimport pandas as pd\nimport multiprocessing\nfrom copy import deepcopy\nfrom sklearn.metrics import precision_recall_curve, auc\nimport keras\nimport keras.backend as K\nfrom keras.optimizers import Adam\nfrom keras.applications.densenet import DenseNet201\nfrom keras.layers import Dense, Flatten, Activation, Dropout, GlobalAveragePooling2D\nfrom keras.preprocessing.image import ImageDataGenerator\nfrom keras import optimizers, applications\nfrom keras.models import Model, load_model\nfrom keras.callbacks import Callback, ModelCheckpoint, LearningRateScheduler, TensorBoard, EarlyStopping\nfrom keras.utils import Sequence\nimport matplotlib.pyplot as plt\nfrom IPython.display import Image\nfrom tqdm import tqdm_notebook as tqdm\nimport json\nfrom numpy.random import seed\nseed(10)\n\n%matplotlib inline","61452e9e":"!pip install git+https:\/\/github.com\/qubvel\/efficientnet","e69d19ae":"!ls ..\/input\/iwildcam-2020-fgvc7\/iwildcam2020_train_annotations.json","2cf8bc81":"import json\nann_file = '..\/input\/iwildcam-2020-fgvc7\/iwildcam2020_train_annotations.json'\nwith open(ann_file) as data_file:\n        train_anns = json.load(data_file)","7c154cee":"train_anns_df = pd.DataFrame(train_anns['annotations'])[['image_id','category_id']]\ntrain_img_df = pd.DataFrame(train_anns['images'])[['id', 'file_name']].rename(columns={'id':'image_id'})\ndf_train_file_cat = pd.merge(train_img_df, train_anns_df, on='image_id')\ndf_train_file_cat['category_id']=df_train_file_cat['category_id'].astype(str)\ndf_train_file_cat.head()","b7f3668e":"# Example of images for category_id = 400\nimg_names = df_train_file_cat[df_train_file_cat['category_id']=='73']['file_name'][:30]\n\nplt.figure(figsize=[15,15])\ni = 1\nfor img_name in img_names:\n    img = cv2.imread(\"..\/input\/iwildcam-2020-fgvc7\/train\/%s\" % img_name)[...,[2, 1, 0]]\n    plt.subplot(6, 5, i)\n    plt.imshow(img)\n    i += 1\nplt.show()","e264f9aa":"#nb_classes = 572\nnb_classes = 267\nbatch_size = 256\nimg_size = 96\nnb_epochs = 10","dcf65828":"%%time\ntrain_datagen=ImageDataGenerator(rescale=1.\/255, \n    validation_split=0.25,\n    horizontal_flip = True,    \n    zoom_range = 0.3,\n    width_shift_range = 0.3,\n    height_shift_range=0.3\n    )\n\ntrain_generator=train_datagen.flow_from_dataframe(    \n    dataframe=df_train_file_cat,    \n    directory=\"..\/input\/iwildcam-2020-fgvc7\/train\",\n    x_col=\"file_name\",\n    y_col=\"category_id\",\n    batch_size=batch_size,\n    shuffle=True,\n    classes = [ str(i) for i in range(nb_classes)],\n    class_mode=\"categorical\",    \n    target_size=(img_size,img_size))","57dcd7c3":"%%time\ntest_datagen = ImageDataGenerator(rescale=1.\/255)\n\nvalid_generator=test_datagen.flow_from_dataframe(    \n    dataframe=df_train_file_cat[50000:],    \n    directory=\"..\/input\/iwildcam-2020-fgvc7\/train\",\n    x_col=\"file_name\",\n    y_col=\"category_id\",\n    batch_size=batch_size,\n    shuffle=True,\n    classes = [ str(i) for i in range(nb_classes)],\n    class_mode=\"categorical\",  \n    target_size=(img_size,img_size))","e12e5fc4":"import efficientnet.keras as efn \ndef get_model():\n    K.clear_session()\n    base_model =  efn.EfficientNetB2(weights='imagenet', include_top=False, pooling='avg', input_shape=(img_size, img_size, 3))\n    x = base_model.output\n    predictions = Dense(nb_classes, activation=\"softmax\")(x)\n    return Model(inputs=base_model.input, outputs=predictions)\n\nmodel = get_model()","d7ec75a3":"\nmodel.compile(optimizers.rmsprop(lr=0.003, decay=1e-6),loss='categorical_crossentropy',metrics=['accuracy'])","dd026be1":"# Callbacks\n\nearly = EarlyStopping(monitor='val_loss', min_delta=0, patience=5, verbose=1, mode='auto')","3c467673":"%%time\nhistory = model.fit_generator(generator=train_generator,  \n                                    \n                                    steps_per_epoch=5,\n                                    \n                                    validation_data=valid_generator, \n                                    \n                                    validation_steps=2,\n                                    \n                                    epochs=nb_epochs,\n                                    callbacks = [early],\n                                    verbose=2)","8ccbadb5":"#with open('history.json', 'w') as f:\n#    json.dump(history, f)\n\nhistory_df = pd.DataFrame(history.history)\nhistory_df[['loss', 'val_loss']].plot()\nhistory_df[['acc', 'val_acc']].plot()","98b30460":"import gc\ndel train_datagen, train_generator\ngc.collect()","dbdb8f91":"sam_sub_df = pd.read_csv('..\/input\/iwildcam-2020-fgvc7\/sample_submission.csv')","c89d881e":"sam_sub_df[\"file_name\"] = sam_sub_df[\"Id\"].map(lambda str : str + \".jpg\")","adf9b420":"sam_sub_df.head()","c62cdc1a":"%%time\n\ntest_generator = test_datagen.flow_from_dataframe(      \n    \n        dataframe=sam_sub_df,    \n    \n        directory = \"..\/input\/iwildcam-2020-fgvc7\/test\",    \n        x_col=\"file_name\",\n        target_size = (img_size,img_size),\n        batch_size = 1,\n        classes = [ str(i) for i in range(nb_classes)],\n        shuffle = False,\n        class_mode = None\n        )","4ade560e":"%%time\ntest_generator.reset()\npredict=model.predict_generator(test_generator, steps = len(test_generator.filenames))","1195ad4e":"len(predict)","328d7e1c":"predicted_class_indices=np.argmax(predict,axis=1)","10a08d1f":"predicted_class_indices","aa59f978":"sam_sub_df[\"Category\"] = predicted_class_indices\nsam_sub_df = sam_sub_df.loc[:,[\"Id\", \"Category\"]]\nsam_sub_df.to_csv(\"submission.csv\",index=False)","c8e57c0d":"**Example of Fine-tuning from pretrained model using Keras  and Efficientnet (https:\/\/pypi.org\/project\/efficientnet\/).**","2322554a":"I refered following kernels, thank you!\n\nhttps:\/\/www.kaggle.com\/ateplyuk\/inat2019-starter-keras-efficientnet\/data\n\nhttps:\/\/www.kaggle.com\/mobassir\/keras-efficientnetb2-for-classifying-cloud","555e2ab7":"### Prediction","67b1713b":"### Model","06e61e47":"### Test data","2716d74c":"### Train data"}}