{"cell_type":{"e9d9bc9e":"code","18abb3df":"code","3a8f13e4":"code","123f13ec":"code","1daf0588":"code","7bf09d44":"code","1c502caa":"code","46be91ee":"code","7d89d770":"code","778b8cdc":"code","fe2c4ef5":"code","b8e19cf4":"code","234822fd":"code","b90ab5ed":"code","44c0a31d":"code","956310f0":"code","bd75a698":"code","18b6e46f":"code","c3ab1cf9":"code","cb41e6ea":"code","18a7df0c":"code","85f8f0b3":"markdown","90bbf66f":"markdown","5c7f5b6a":"markdown","b51b3188":"markdown","060202dc":"markdown","8c9e664d":"markdown","32be31ab":"markdown","58ac0391":"markdown","68893e2b":"markdown","d03449c2":"markdown","9b2624dc":"markdown","d2766960":"markdown"},"source":{"e9d9bc9e":"import pandas as pd\nimport numpy as np\nfrom datetime import datetime\nimport matplotlib.pyplot as plt\n%matplotlib inline\nimport plotly.offline as py\npy.init_notebook_mode(connected=True)\nimport plotly.graph_objs as go\nfrom math import sqrt\nimport sys\nfrom scipy import spatial","18abb3df":"df = pd.read_csv('..\/input\/train.csv')","3a8f13e4":"sales_across_store_df = df.copy()\nsales_across_store_df = pd.pivot_table(sales_across_store_df, index='store', \n                                       values=['sales','date'], columns='item', aggfunc=np.mean)\nsales_across_store_df['avg_sale'] = sales_across_store_df.apply(lambda r: r.mean(), axis=1)\n\nsales_store_data = go.Scatter(\n    y = sales_across_store_df.avg_sale.values,\n    mode='markers',\n    marker=dict(\n        size = sales_across_store_df.avg_sale.values,\n        color = sales_across_store_df.avg_sale.values,\n        colorscale='Viridis',\n        showscale=True\n    ),\n    text = sales_across_store_df.index.values\n)\ndata = [sales_store_data]\n\nsales_store_layout = go.Layout(\n    autosize= True,\n    title= 'Scatter plot of avg sales per store',\n    hovermode= 'closest',\n    xaxis= dict(\n        title= 'Stores',\n        ticklen= 10,\n        zeroline= False,\n        gridwidth= 1,\n    ),\n    yaxis=dict(\n        title= 'Avg Sales',\n        ticklen= 10,\n        zeroline= False,\n        gridwidth= 1,\n    ),\n    showlegend= False\n)\nfig = go.Figure(data=data, layout=sales_store_layout)\npy.iplot(fig,filename='scatter_sales_store')","123f13ec":"store_clusters = []\nstore_clusters.append([2, 3, 4, 8, 9, 10])\nstore_clusters.append([1])\nstore_clusters.append([5, 6, 7])","1daf0588":"sales_across_item_df = df.copy()\nsales_across_item_df = pd.pivot_table(sales_across_item_df, index='store', \n                                       values=['sales','date'], columns='item', aggfunc=np.mean)\nsales_across_item_df.loc[11] = sales_across_item_df.apply(lambda r: r.mean(), axis=0)\navg_sales_per_item_across_stores_df = pd.DataFrame(data=[[i+1,a] for i,a in enumerate(sales_across_item_df.loc[11:].values[0])], columns=['item', 'avg_sale'])\n\n# Scatter plot of average sales per item\nsales_item_data = go.Bar(\n    x=[i for i in range(0, 50)],\n    y=avg_sales_per_item_across_stores_df.avg_sale.values,\n    marker=dict(\n        color=avg_sales_per_item_across_stores_df.avg_sale.values,\n        colorscale='Blackbody',\n        showscale=True\n    ),\n    text = avg_sales_per_item_across_stores_df.item.values\n)\ndata = [sales_item_data]\n\nsales_item_layout = go.Layout(\n    autosize= True,\n    title= 'Scatter plot of avg sales per item',\n    hovermode= 'closest',\n    xaxis= dict(\n        title= 'Items',\n        ticklen= 55,\n        zeroline= False,\n        gridwidth= 1,\n    ),\n    yaxis=dict(\n        title= 'Avg Sales',\n        ticklen= 10,\n        zeroline= False,\n        gridwidth= 1,\n    ),\n    showlegend= False\n)\nfig = go.Figure(data=data, layout=sales_item_layout)\npy.iplot(fig,filename='scatter_sales_item')","7bf09d44":"def plot_sales(item_ids, store_ids):\n    stores_items_df = df.copy()    \n    multi_store_item_ts_data = []\n    for st,it in zip(store_ids, item_ids):\n        flt = stores_items_df[stores_items_df.store == st]\n        flt = flt[flt.item == it]\n        multi_store_item_ts_data.append(go.Scatter(x=flt.date, y=flt.sales, name = \"Store:\" + str(st) + \",Item:\" + str(it)))\n    py.iplot(multi_store_item_ts_data)","1c502caa":"plot_sales([1], [1])","46be91ee":"plot_sales([1 for _ in range(10)], [x+1 for x in range(10)])","7d89d770":"for store_cluster in store_clusters:\n    plot_sales([1 for _ in range(len(store_cluster))], store_cluster)","778b8cdc":"plot_sales([1, 1, 15, 15, 42, 42], [2, 7, 2, 7, 2, 7])","fe2c4ef5":"def euclid_dist(t1, t2):\n    return np.sqrt(((t1-t2)**2).sum(axis = 1))","b8e19cf4":"def init_centroids(data, num_clust):\n    centroids = np.zeros([num_clust, data.shape[1]]) \n    centroids[0,:] = data[np.random.randint(0, data.shape[0], 1)]\n\n    for i in range(1, num_clust):\n        D2 = np.min([np.linalg.norm(data - c, axis = 1)**2 for c in centroids[0:i, :]], axis = 0) \n        probs = D2\/D2.sum()\n        cumprobs = probs.cumsum()\n        ind = np.where(cumprobs >= np.random.random())[0][0]\n        centroids[i, :] = np.expand_dims(data[ind], axis = 0)\n\n    return centroids","234822fd":"def calc_centroids(data, centroids):\n    dist = np.zeros([data.shape[0], centroids.shape[0]])\n\n    for idx, centroid in enumerate(centroids):\n        dist[:, idx] = euclid_dist(centroid, data)\n\n    return np.array(dist)","b90ab5ed":"def closest_centroids(data, centroids): \n    dist = calc_centroids(data, centroids) \n    return np.argmin(dist, axis = 1)","44c0a31d":"def move_centroids(data, closest, centroids):\n    k = centroids.shape[0]\n    new_centroids = np.array([data[closest == c].mean(axis = 0) for c in np.unique(closest)])\n\n    if k - new_centroids.shape[0] > 0:\n        print(\"adding {} centroid(s)\".format(k - new_centroids.shape[0]))\n        additional_centroids = data[np.random.randint(0, data.shape[0], k - new_centroids.shape[0])] \n        new_centroids = np.append(new_centroids, additional_centroids, axis = 0)\n\n    return new_centroids","956310f0":"def k_means(data, num_clust, num_iter): \n    centroids = init_centroids(data, num_clust)\n    last_centroids = centroids\n\n    for n in range(num_iter):\n        closest = closest_centroids(data, centroids)\n        centroids = move_centroids(data, closest, centroids)\n        if not np.any(last_centroids != centroids):\n            break\n        last_centroids = centroids\n\n    return centroids","bd75a698":"def cosine_similarity(t1, t2):\n    return 1 - spatial.distance.cosine(t1, t2)","18b6e46f":"store_ids = [s for s in range(1, 11)]\nitem_ids = [i for i in range(1, 51)]\n\nmulti_store_item_df = df.copy()\nseries_sales = []\n\nfor it in item_ids:\n#     sales = []\n    for st in store_ids:\n        flt = multi_store_item_df[multi_store_item_df.store == st]\n        flt = flt[flt.item == it]\n        series_sales.append(list(flt.sales.values))\n    \nseries_sales = np.reshape(series_sales, (len(series_sales), len(series_sales[0])))\nseries_sales.shape","c3ab1cf9":"num_cluster = 10\ncentroids = k_means(series_sales, num_cluster, 100)\n\nsales_clusters = [[] for _ in range(num_cluster)]\nfor i in range(len(series_sales)):\n    clostest_dist = 0\n    clust = 0\n    for c in range(num_cluster):\n        dist = cosine_similarity(centroids[c], series_sales[i])\n        if dist > clostest_dist:\n            clostest_dist = dist\n            clust = c\n    sales_clusters[clust].append({\n        'store': (i%10) + 1,\n        'item': int(i\/10) + 1\n    })\n\nfor sales_cluster in sales_clusters:\n    print(len(sales_cluster))","cb41e6ea":"item_ids = []\nstore_ids = []\nfor sales_dict in sales_clusters[6]:\n    item_ids.append(sales_dict['item'])\n    store_ids.append(sales_dict['store'])\nplot_sales(item_ids, store_ids)","18a7df0c":"item_ids = []\nstore_ids = []\nfor sales_dict in sales_clusters[3]:\n    item_ids.append(sales_dict['item'])\n    store_ids.append(sales_dict['store'])\nplot_sales(item_ids, store_ids)","85f8f0b3":"The member of the smallest cluster have the very similiar pattern","90bbf66f":"Now we see that items sales are vary among others, some have very high sales while the other don't. Now we will plot per item per store","5c7f5b6a":"As we can see, in terms of average sales, store 2, 3, 4, 8, 9, and 10 seems to be in  one cluster while 5, 6, and 7 in another cluster and store 1 in also another cluster. So we have 3 clusters. The following code will dig down to more detail into peritem. (index in the picture starts from 0)","b51b3188":"I tried to make 10 cluster and see the number of member on each cluster","060202dc":"I think maybe if we use these clusters to train the model, it might help to improve the accuracy. Hope this helps, thank you.","8c9e664d":"Those are plots on item 1 in all stores. They seem to follow the same pattern.","32be31ab":"That sales plot really shows us that there is seasonal pattern in it.","58ac0391":"The same goes for the second smallest cluster, they share very similiar pattern.","68893e2b":"This is my first kernel, I still got a lot to learn and hope this helps. You also might want to check this kernel here since I too learned from him.\nhttps:\/\/www.kaggle.com\/darshanadiga\/time-series-data-exploration","d03449c2":"Now we see each of the sales data react differently to the seasonal pattern. So next I will try to cluster them for each item per store using K means.","9b2624dc":"After we load the data, we now plot the store based on the item sales","d2766960":"Well I don't think split the data in to cluster based on the store make any difference. So next I will item on item in the same and different store."}}