{"cell_type":{"74ea47d7":"code","3ba8ca02":"code","1d28a4cc":"code","97fb7f58":"code","36e45edf":"code","3b517653":"code","49e90131":"code","7132a65a":"code","5edce73b":"code","46d6907c":"code","a8165b76":"code","dd226de9":"code","da0e3962":"code","3b272dd1":"code","803cd12f":"code","42e29519":"code","b078a773":"code","ad492d4f":"code","11f45a08":"code","a4606998":"code","595150d4":"code","e5646554":"code","a981b41d":"code","6ff78e24":"code","3d35f7fe":"code","a1b8da69":"markdown","29bb7f63":"markdown","e2bc1098":"markdown","3af1f522":"markdown"},"source":{"74ea47d7":"import numpy as np \nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.model_selection import GridSearchCV \nfrom sklearn.svm import SVC","3ba8ca02":"train = pd.read_csv('..\/input\/titanic\/train.csv')\ntest = pd.read_csv('..\/input\/titanic\/test.csv')\ntrain['train_test'] = 1\ntest['train_test'] = 0\nall_data = pd.concat([train,test], ignore_index = True)","1d28a4cc":"all_data.info() ","97fb7f58":"all_data.describe() ","36e45edf":"fig, axes = plt.subplots(nrows=1, ncols=3, figsize=(15,5))\ncat_columns = ['Sex','Pclass','Embarked']\nfor i in range(len(cat_columns)):\n    curr_feature = cat_columns[i]\n    train.groupby([curr_feature, 'Survived'])['PassengerId'].count().unstack().plot(kind = 'bar', stacked = False, ax = axes[i])\n    axes[i].legend(['Dead','Survived'])","3b517653":"all_data['isChild'] = 0\nall_data.loc[all_data['Age'] < 15, 'isChild'] = 1","49e90131":"all_data['Age_isMissing_mean_temp'] = all_data.groupby(['Pclass', 'Sex', 'isChild']).Age.transform('median')\nall_data.loc[all_data.Age.isnull(), 'Age'] = all_data.loc[all_data.Age.isnull(), 'Age_isMissing_mean_temp']\nall_data.drop('Age_isMissing_mean_temp', axis = 1, inplace = True)","7132a65a":"all_data['Cabin_initial'] = all_data.Cabin.apply(lambda x: str(x)[0])\ndef group_deck(deck):\n    if(deck in ['A','B','C','T']):\n        return \"ABC\"\n    elif(deck in ['D','E']):\n        return \"DE\"\n    elif (deck in ['F', 'G']):\n        return \"FG\"\n    else:\n        return \"N\"\nall_data['Cabin_deck'] = all_data['Cabin_initial'].apply(group_deck)","5edce73b":"fig, axes = plt.subplots(nrows=1, ncols=3, figsize=(15,5))\nfor i in range(3):\n    ax = all_data[all_data.Pclass == (i+1)].Fare.plot.hist(ax = axes[i], title='Plcass = ' + str(i+1))\n    ax.set_xlabel(\"Fare\")","46d6907c":"ticket_count = all_data.groupby('Ticket').PassengerId.count()\nall_data['Ticket_count'] = all_data['Ticket'].map(ticket_count)\nall_data['Fare_individual'] = all_data['Fare']\/all_data['Ticket_count']","a8165b76":"# Figure 3: plot the distribution of Fare_individual in each Pclass with more specific bins\nfig, axes = plt.subplots(nrows=1, ncols=3, figsize=(15,5))\nfor i in range(3):\n    ax = all_data[all_data.Pclass == (i+1)].Fare_individual.plot.hist(ax = axes[i], title='Plcass = ' + str(i+1))\n    ax.set_xlabel(\"Fare\")","dd226de9":"all_data.loc[all_data.Fare_individual.isnull(), 'Fare_individual'] = all_data[all_data['Pclass'] == 3].Fare_individual.median()\nall_data.loc[all_data.Fare_individual.isnull(), 'Fare'] = all_data[all_data['Pclass'] == 3].Fare_individual.median()","da0e3962":"all_data['Pclass_startingPrice'] = 0\nall_data.loc[all_data.Pclass==1, 'Pclass_startingPrice'] = 25\nall_data.loc[all_data.Pclass==2, 'Pclass_startingPrice'] = 10\nall_data.loc[all_data.Pclass==3, 'Pclass_startingPrice'] = 7\nall_data['Fare_differenceFromStart'] = all_data.Fare_individual - all_data.Pclass_startingPrice","3b272dd1":"all_data.loc[all_data.Embarked.isnull(), 'Embarked'] = 'C'","803cd12f":"all_data['FamilySize'] = all_data.Parch + all_data.SibSp + 1","42e29519":"all_data['GroupSize'] = all_data[['Ticket_count', 'FamilySize']].max(axis = 1)","b078a773":"all_data.loc[all_data.Sex == 'male', 'Sex'] = 1\nall_data.loc[all_data.Sex == 'female', 'Sex'] = 0","ad492d4f":"features_to_use = ['Pclass', 'Sex', 'Age', 'Embarked', 'train_test', 'Cabin_deck', \n                   'Fare_individual', 'Fare_differenceFromStart', 'GroupSize']\nall_features_train = all_data[features_to_use].copy()\nall_features_train.Pclass = all_features_train.Pclass.astype(str)\nall_features_train = pd.get_dummies(all_features_train, columns = ['Pclass', 'Embarked','Cabin_deck'])\nscaler = StandardScaler()\nto_be_scaled = ['Age', 'Fare_individual', 'Fare_differenceFromStart','GroupSize']\nall_features_train[to_be_scaled] = scaler.fit_transform(all_features_train[to_be_scaled])","11f45a08":"x_train = all_features_train[all_features_train.train_test == 1].copy()\nx_train.drop('train_test', axis = 1, inplace = True)\nx_test = all_features_train[all_features_train.train_test == 0].copy()\nx_test.drop('train_test', axis = 1, inplace = True)\ny_train = all_data[all_data.train_test == 1].Survived","a4606998":"train_temp = all_data[all_data.train_test == 1].copy()\ntest_temp = all_data[all_data.train_test == 0].copy()\n\nticket_train_list = train_temp.Ticket.value_counts().index.tolist()\nticket_test_list = test_temp.Ticket.value_counts().index.tolist()\nticket_only_test_list = list(set(ticket_test_list) - set(ticket_train_list))\n\nall_data['Ticket_survivalRate'] = 0\nall_data['Ticket_survivalRate'] = all_data['Ticket'].apply(lambda x: 1 if x in ticket_only_test_list else 0)\nall_data.loc[all_data.Ticket_count < 2, 'Ticket_survivalRate'] = 1\n\nall_data['Ticket_survivalRate'] = all_data['Ticket'].map(all_data[all_data.Ticket_survivalRate == 0].groupby('Ticket').Survived.mean())\nall_data['Ticket_survivalRate'] = all_data['Ticket_survivalRate'].fillna(0)","595150d4":"all_data['FirstName'] = all_data.Name.apply(lambda x: x.split(',')[0].strip())\n\ntrain_temp = all_data[all_data.train_test == 1].copy()\ntest_temp = all_data[all_data.train_test == 0].copy()\n\nFirstName_train_list = train_temp.FirstName.value_counts().index.tolist()\nFirstName_test_list = test_temp.FirstName.value_counts().index.tolist()\nFirstName_only_test_list = list(set(FirstName_test_list) - set(FirstName_train_list))\n\nall_data['Family_survivalRate'] = 0\nall_data['Family_survivalRate'] = all_data['FirstName'].apply(lambda x: 1 if x in FirstName_only_test_list else 0)\nall_data.loc[all_data.FamilySize < 2, 'Family_survivalRate'] = 1\n\nall_data['Family_survivalRate'] = all_data['FirstName'].map(all_data[all_data.Family_survivalRate == 0].groupby('FirstName').Survived.mean())\nall_data['Family_survivalRate'] = all_data['Family_survivalRate'].fillna(0)","e5646554":"all_data['SurvivalRate'] = (all_data['Family_survivalRate'] + all_data['Ticket_survivalRate'])\/2","a981b41d":"x_train['SurvivalRate'] = all_data[all_data.train_test == 1]['SurvivalRate']\nx_test['SurvivalRate'] = all_data[all_data.train_test == 0]['SurvivalRate']","6ff78e24":"svc = SVC()\nparam_grid = [{'kernel': ['rbf'], 'gamma': [.1,.5,1,2,5,10],\n                                  'C': [.1, 1, 10, 100, 1000]},\n                                 {'kernel': ['linear'], 'C': [.1, 1, 10, 100, 1000]},\n                                 {'kernel': ['poly'], 'degree' : [2,3,4,5], 'C': [.1, 1, 10, 100, 1000]}]\nclf_svc = GridSearchCV(svc, param_grid = param_grid, cv = 5, verbose = True, n_jobs = -1)\nbest_clf_svc = clf_svc.fit(x_train,y_train)\nprint(best_clf_svc.best_score_)\nprint(best_clf_svc.best_params_)","3d35f7fe":"svc = SVC(random_state=1, C = 1, degree = 2, kernel = 'poly')\nsvc.fit(x_train, y_train)\ny_pred_test_svc = svc.predict(x_test)\nsubmission = {'PassengerId': all_data[all_data.train_test == 0].PassengerId, 'Survived': y_pred_test_svc.astype(int)}\nsubmission = pd.DataFrame(data = submission)\nsubmission.to_csv('.\/Submission.csv', index=False)","a1b8da69":"### Loading and Merging data","29bb7f63":"### Imports","e2bc1098":"### EDA and Data preprocessing ","3af1f522":"### Modeling"}}