{"cell_type":{"a53f9c1c":"code","50ff56d1":"code","8793c3ee":"code","2a3f8315":"code","e0f9ebd6":"code","9c17f0d8":"code","bcfb943b":"code","800828b0":"code","cce5af27":"code","fbee61f5":"code","fd9dd55e":"code","ff7863b0":"code","266ac1c0":"code","b7936c18":"code","4fccf668":"code","9c71d40e":"code","1332fa10":"code","8eed09e7":"code","0236151c":"code","53bac082":"code","23fa7722":"markdown","18b37fa6":"markdown","1c90f8cd":"markdown","615dbd71":"markdown","a285d983":"markdown","658cca8c":"markdown","02030213":"markdown","5b4d2da5":"markdown","289b33fd":"markdown","924d7ef4":"markdown","86849790":"markdown","f43a8cc9":"markdown","09124c1c":"markdown","60417847":"markdown"},"source":{"a53f9c1c":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Jupyter Notebook\u306e\u4e2d\u3067\u30a4\u30f3\u30e9\u30a4\u30f3\u8868\u793a\u3059\u308b\u5834\u5408\u306e\u8a2d\u5b9a\uff08\u3053\u308c\u304c\u7121\u3044\u3068\u5225\u30a6\u30a3\u30f3\u30c9\u30a6\u3067\u30b0\u30e9\u30d5\u304c\u958b\u304f\uff09\n%matplotlib inline","50ff56d1":"train = pd.read_csv('\/kaggle\/input\/house-prices-advanced-regression-techniques\/train.csv')\ntest = pd.read_csv('\/kaggle\/input\/house-prices-advanced-regression-techniques\/test.csv')","8793c3ee":"# import pandas_profiling\n\n# train.profile_report()\n# test.profile_report()","2a3f8315":"#\u6700\u5927\u8868\u793a\u884c\u6570\u3092\u8a2d\u5b9a\npd.set_option('display.max_rows', 500)\n# \u30c7\u30fc\u30bf\u30bf\u30a4\u30d7\u306e\u78ba\u8a8d\ntrain.dtypes","e0f9ebd6":"# \u6587\u5b57\u5217\u3092\u30e9\u30d9\u30eb\u5316\u3057\u305f\u6570\u5024\u306b\u5909\u63db\u3059\u308b\u70ba\u306e\u30e9\u30a4\u30d6\u30e9\u30ea\u3092\u30a4\u30f3\u30dd\u30fc\u30c8\nfrom sklearn.preprocessing import LabelEncoder\n\n# \u30c7\u30fc\u30bf\u30bf\u30a4\u30d7\u304cobject\u306e\u5217\u306e\u5024\u3092\u30e9\u30d9\u30eb\u5316\u3057\u305f\u6570\u5024\u306b\u5909\u63db\nfor i in range(train.shape[1]):\n    if train.iloc[:, i].dtypes == object:\n        lbl = LabelEncoder()\n        lbl.fit(list(train.iloc[:, i].values) + list(test.iloc[:, i].values))\n        train.iloc[:, i] = lbl.transform(list(train.iloc[:, i].values))\n        test.iloc[:, i] = lbl.transform(list(test.iloc[:, i].values))","9c17f0d8":"# \u30c8\u30ec\u30fc\u30cb\u30f3\u30b0\u30c7\u30fc\u30bf\u306eNaN\u306e\u6570\ntrain_nan = train.isnull().sum()\ntrain_nan = train_nan[train_nan > 0]\ntrain_nan","bcfb943b":"# \u30c6\u30b9\u30c8\u30c7\u30fc\u30bf\u306eNaN\u306e\u6570\ntest_nan = test.isnull().sum()\ntest_nan = test_nan[test_nan > 0]\ntest_nan","800828b0":"# Id\u5217\u3092\u4fdd\u6301\u3057\u3066\u304a\u304f\ntrain_ID = train['Id']\ntest_ID = test['Id']\n\n# \u30c8\u30ec\u30fc\u30cb\u30f3\u30b0\u30c7\u30fc\u30bf\u3092\u5206\u3051\u308b\ny_train = train['SalePrice']\nX_train = train.drop(['Id', 'SalePrice'], axis=1)\nX_test = test.drop(['Id'], axis=1)\n\n# train\u3068test\u30c7\u30fc\u30bf\u306e\u7d50\u5408\ndata = pd.concat([X_train, X_test])\n# \u6b20\u640d\u5024\u306e\u591a\u3044\u30ab\u30e9\u30e0\u3092\u524a\u9664\ndata = data.drop(['LotFrontage', 'MasVnrArea', 'GarageYrBlt'], axis=1)\n# \u6b20\u640d\u5024\u306e\u5c11\u306a\u3044\u30ab\u30e9\u30e0\u306eNaN\u306f\u4e2d\u592e\u5024\u3067\u57cb\u3081\u308b\ndata = data.fillna(data.median())\n\n# \u6b20\u640d\u5024\u306e\u78ba\u8a8d\ndata_nan = data.isnull().sum()\ndata_nan = data_nan[data_nan > 0]\ndata_nan","cce5af27":"data['TotalSF'] = data[\"TotalBsmtSF\"] + data[\"1stFlrSF\"] + data[\"2ndFlrSF\"]","fbee61f5":"import matplotlib.pyplot as plt\nimport seaborn as sns\n\nsns.displot(y_train)\nplt.show()","fd9dd55e":"# \u5bfe\u6570\u8a08\u7b97\u3092\u5b9f\u65bd\n# \u6570\u5024\u306e\u3070\u3089\u3064\u304d\u3001\u504f\u308a\u3092\u5c0f\u3055\u304f\u3059\u308b\ny_train = np.log(y_train)\n\nsns.displot(y_train)\nplt.show()","ff7863b0":"# train + test\u306edata\u3092\u518d\u5ea6\u3001train\u3068test\u306b\u5206\u5272\nX_train = data.iloc[:train.shape[0], :]\nX_test = data.iloc[train.shape[0]:, :]\n\n# \u30e9\u30f3\u30c0\u30e0\u30d5\u30a9\u30ec\u30b9\u30c8\u3092\u30a4\u30f3\u30dd\u30fc\u30c8\nfrom sklearn.ensemble import RandomForestRegressor\nrf = RandomForestRegressor(n_estimators=80, max_features='auto')\nrf.fit(X_train, y_train)\nprint('\u30e9\u30f3\u30c0\u30e0\u30d5\u30a9\u30ec\u30b9\u30c8\u3092\u5b9f\u65bd')\n\n# np.argsort()\u306f\u30bd\u30fc\u30c8\u7d50\u679c\u306e\u914d\u5217\u306e\u30a4\u30f3\u30c7\u30c3\u30af\u30b9\u3092\u8fd4\u3059\u3002\u5f15\u6570\u306e\u982d\u306b\"-\"\u3092\u3064\u3051\u308b\u3068\u964d\u9806\u3002\n# \u3064\u307e\u308a\"-rf.feature_importance_\"\u3092\u5f15\u6570\u306b\u3059\u308b\u3053\u3068\u3067\u91cd\u8981\u5ea6\u306e\u9ad8\u3044\u9806\u306b\u30bd\u30fc\u30c8\u3057\u305f\u914d\u5217\u306e\u30a4\u30f3\u30c7\u30c3\u30af\u30b9\u3092\u8fd4\u3059\u3002\nranking = np.argsort(-rf.feature_importances_)\nf, ax = plt.subplots(figsize=(11, 9))\nsns.barplot(x=rf.feature_importances_[ranking], y=X_train.columns.values[ranking], orient='h')\nplt.tight_layout()\nplt.show()","266ac1c0":"X_train = X_train.iloc[:, ranking[:30]]\nX_test = X_test.iloc[:, ranking[:30]]\n\n# \u4e0a\u4f4d2\u500b\u306efeature\u3092\u639b\u3051\u5408\u308f\u305b\u308b\nX_train['Interaction'] = X_train['TotalSF'] * X_train['OverallQual']\nX_test['Interaction'] = X_test['TotalSF'] * X_test['OverallQual']","b7936c18":"# z-score\u306b\u3066\u6a19\u6e96\u5316\n# (\u5024 - \u5e73\u5747) \/ \u6a19\u6e96\u504f\u5dee\nX_train = (X_train - X_train.mean()) \/ X_train.std()\nX_test = (X_test - X_test.mean()) \/ X_test.std()\n","4fccf668":"fig = plt.figure(figsize=(12, 7))\nfor i in np.arange(30):\n    ax = fig.add_subplot(5, 6, i+1)\n    sns.regplot(x=X_train.iloc[:, i], y=y_train)\n    \nplt.tight_layout()\nplt.show()","9c71d40e":"data = X_train\ndata['SalePrice'] = y_train\ndata = data.drop(index = data[(data['TotalSF']>5) & (data['SalePrice']<12.5)].index)\ndata = data.drop(index = data[(data['GrLivArea']>5) & (data['SalePrice']<13)].index)\n\n# \u4ee3\u5165\u3057\u76f4\u3057\ny_train = data['SalePrice']\nX_train = data.drop(['SalePrice'], axis=1)","1332fa10":"# \u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u306b\u7dda\u5f62\u56de\u5e30(linear regression)\u3092\u63a1\u7528\nfrom sklearn.linear_model import LinearRegression\nslr = LinearRegression()\n\n# fit\u95a2\u6570\u3067\u5b66\u7fd2\u958b\u59cb\nslr.fit(X_train, y_train)\n\n# \u504f\u56de\u5e30\u4fc2\u6570(\u56de\u5e30\u5206\u6790\u306b\u304a\u3044\u3066\u5f97\u3089\u308c\u308b\u56de\u5e30\u65b9\u7a0b\u5f0f\u306e\u5404\u8aac\u660e\u5909\u6570\u306e\u4fc2\u6570)\u3092\u51fa\u529b\n# \u504f\u56de\u5e30\u4fc2\u6570\u306fscikit-learn\u306ecoef\u3067\u53d6\u5f97\nprint('\u50be\u304d\uff1a{0}'.format(slr.coef_[0]))\n\n# y\u5207\u7247(\u76f4\u7dda\u3068y\u8ef8\u3068\u306e\u4ea4\u70b9)\u3092\u51fa\u529b\n# \u4f59\u8ac7\uff1ax\u5207\u7247\u3082\u3042\u308a\u3001\u305d\u308c\u306f\u76f4\u7dda\u3068x\u8ef8\u3068\u306e\u4ea4\u70b9\u3092\u6307\u3059\nprint('y\u5207\u7247: {0}'.format(slr.intercept_))","8eed09e7":"# \u5b66\u7fd2\u6e08\u307f\u306e\u30e2\u30c7\u30eb\u304b\u3089\u4e88\u6e2c\u3057\u305f\u7d50\u679c\u3092\u30bb\u30c3\u30c8\n# log\u3067\u5c0f\u3055\u304f\u306a\u3063\u305f\u5c3a\u5ea6\u3092exp\u3067\u623b\u3059\ny_test_pred = np.exp(slr.predict(X_test))","0236151c":"y_test_pred","53bac082":"submission = pd.DataFrame({\n    \"Id\": test_ID,\n    \"SalePrice\": y_test_pred\n})\nsubmission.to_csv('submission.csv', index=False)","23fa7722":"## \u6a19\u6e96\u5316(Standardization)\u3067\u7279\u5fb4\u91cf\u306e\u5c3a\u5ea6\u3092\u63c3\u3048\u308b\n\u7279\u5fb4\u91cf\u3001\u3064\u307e\u308afeature\u304c\u8907\u6570\u3042\u308b\u5834\u5408\u3001feature\u306b\u3088\u3063\u3066\u6570\u5b57\u306e\u5927\u304d\u3055\u3084\u5358\u4f4d\u304c\u7570\u306a\u308b\u3002\n\n\u4f8b\u3048\u3070\u3001\u30ab\u30e9\u30e0A\u306e\u5024\u304c300cm\u3067\u30ab\u30e9\u30e0B\u306e\u5024\u304c3m\u306e\u5834\u5408\u3001\u4f55\u3082\u3057\u306a\u3051\u308c\u3070\u5024\u304c\u305d\u306e\u307e\u307e\u4ee3\u5165\u3055\u308c\u3066\u3057\u307e\u3046\u305f\u3081\u3001\u5f71\u97ff\u5ea6\u304c\u540c\u3058\u3067\u3042\u3063\u3066\u3082\u30ab\u30e9\u30e0A\u306e\u5f71\u97ff\u304c\u5927\u304d\u304f\u306a\u3063\u3066\u3057\u307e\u3046\u3002\n\n\u6a19\u6e96\u5316\u306f\u3001\u3053\u306e\u6570\u5b57\u306e\u5927\u304d\u3055\u3084\u5358\u4f4d\u306e\u5f71\u97ff\u3092\u306a\u304f\u3057\u3066\u3057\u307e\u3044\u3001\u305d\u308c\u305e\u308c\u306e\u5c3a\u5ea6\u3092\u540c\u3058\u5c3a\u5ea6\u306e\u5024\u306b\u63c3\u3048\u308b\u305f\u3081\u306e\u624b\u6cd5\u3002\n\n\u30c7\u30fc\u30bf\u3092\u4e00\u5b9a\u306e\u65b9\u6cd5\u3067\u5909\u5f62\u3057\u3001\u4f8b\u3048\u3070\u8eab\u9577\u3068\u4f53\u91cd\u307f\u305f\u3044\u306a\u6b21\u5143\u304c\u9055\u3046\u3082\u306e\u306b\u5bfe\u3057\u3066\u3082\u3001\u306a\u3093\u3068\u304b\u3057\u3066\u540c\u3058\u3088\u3046\u306a\u5358\u4f4d\u3067\u53d6\u308a\u6271\u3048\u308b\u3088\u3046\u306b\u3057\u3066\u3001\u8a08\u7b97\u3084\u6bd4\u8f03\u3057\u3084\u3059\u304f\u3057\u3088\u3046\u3068\u3044\u3046\u306e\u304c\u72d9\u3044\u306e\u3082\u306e\u3002","18b37fa6":"## \u30e2\u30c7\u30eb\u306e\u4f5c\u6210\n\u7dda\u5f62\u56de\u5e30\u5206\u6790\u3067\u4e88\u6e2c","1c90f8cd":"## SalesPrice\u304c\u6b63\u898f\u5206\u5e03\u306b\u5f93\u3063\u3066\u3044\u308b\u304b\n\u6a5f\u68b0\u5b66\u7fd2\u306b\u304a\u3051\u308b\u6b63\u898f\u5206\u5e03\u306e\u52b9\u679c\n\n\u4e88\u6e2c\u3057\u3088\u3046\u3068\u3057\u3066\u3044\u308b\u5024\u304c\u6b63\u898f\u5206\u5e03\u306b\u5f93\u3063\u305f\u65b9\u304c\u7cbe\u5ea6\u304c\u826f\u304f\u306a\u308b\u3002\n\n### \u30d2\u30b9\u30c8\u30b0\u30e9\u30e0\u3067\u5206\u6790\n* \u6a2a\u8ef8\u306bSalePrice\n* \u7e26\u8ef8\u306b\u5272\u5408","615dbd71":"## NaN(\u6b20\u640d\u5024)\u306e\u5bfe\u51e6","a285d983":"## EDA\n\u51fa\u529b\u7d50\u679c\u304c\u81a8\u5927\u306a\u306e\u3067\u30b3\u30e1\u30f3\u30c8\u30a2\u30a6\u30c8\\\n\u5fc5\u8981\u306a\u6642\u306b\u51fa\u529b","658cca8c":"## \u30e9\u30f3\u30c0\u30e0\u30d5\u30a9\u30ec\u30b9\u30c8\u3067\u7279\u5fb4\u91cf\u306e\u91cd\u8981\u5ea6\u306b\u30a2\u30af\u30bb\u30b9\n\u76f8\u95a2\u4fc2\u6570\u3067feature\u306e\u91cd\u8981\u5ea6\u3092\u5224\u65ad\u3059\u308b\u3093\u3067\u306f\u306a\u304f\u3001\u6a5f\u68b0\u5b66\u7a2e\u306e\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u3067\u3042\u308b\u30e9\u30f3\u30c0\u30e0\u30d5\u30a9\u30ec\u30b9\u30c8\u3067feature\u306e\u91cd\u8981\u5ea6\u3092\u5224\u65ad\u3059\u308b\u3002","02030213":"## \u5bfe\u6570\u8a08\u7b97\u3068\u306f\n\u4f55\u4e57\u3059\u308c\u3070\u3088\u3044\u304b\u3092\u6c42\u3081\u308b\u8a08\u7b97\n\n#### e.g.\nlog10(100) = 10\u3092\u4f55\u4e57\u3059\u308c\u3070100\u306b\u306a\u308b\u304b -> 2\n\n#### \u4eca\u56de\u306e\u8a08\u7b97\nlog(y_train) = log np.e(y_train)\n\n\u203bnp.e=2.718281828459045(Numpy\u306e\u5b9a\u6570\u3068\u3057\u3066\u5b9a\u7fa9\u3055\u308c\u3066\u3044\u308b)\n\nlog2.718281828459045(755000) = 13.534473\n\nlog2.718281828459045(140000) = 11.849398","5b4d2da5":"\u6b63\u898f\u5206\u5e03(\u30b0\u30e9\u30d5\u306b\u3057\u305f\u6642\u306b\u6570\u5024\u306e\u5927\u534a\u304c\u4e2d\u592e\u306b\u96c6\u4e2d\u3057\u3001\u5de6\u53f3\u5bfe\u79f0\u306e\u91e3\u9418\u578b\u306b\u5206\u5e03\u3059\u308b\u30c7\u30fc\u30bf)\u3067\u306f\u306a\u3044\u3002","289b33fd":"## Label Encode\n\u53d6\u308a\u6271\u3046\u30c7\u30fc\u30bf\u306e\u30c7\u30fc\u30bf\u30bf\u30a4\u30d7\u3092\u78ba\u8a8d\u3057\u3066\u3001objetct\u30bf\u30a4\u30d7\u306e\u30c7\u30fc\u30bf\u304c\u5b58\u5728\u3057\u305f\u5834\u5408\u306f\u3001Label Encode\u3059\u308b\u3002\n\n#### \u7406\u7531\nint64\u3001float64\u306f\u6570\u5024\u30c7\u30fc\u30bf\u306e\u70ba\u3001\u305d\u306e\u307e\u307e\u6271\u3048\u308b\u3053\u3068\u304c\u53ef\u80fd\u3002\n\n\u3057\u304b\u3057\u3001object\u306f\u57fa\u672c\u7684\u306b\u306f\u6587\u5b57\u60c5\u5831\u3067\u3001\u3053\u306e\u307e\u307e\u3060\u3068\u6271\u3046\u4e8b\u306f\u4e0d\u53ef\u80fd\u3002(\u6a5f\u68b0\u5b66\u7fd2\u306e\u5b9f\u4f53\u306f\u6570\u5f0f\u3092\u4f7f\u3063\u305f\u30d7\u30ed\u30b0\u30e9\u30e0\u306e\u70ba)\n\nLabel Encoder\u3092\u4f7f\u3063\u3066object\u3092\u30e9\u30d9\u30eb\u5316\u3057\u305f\u6570\u5024\u306b\u5909\u63db\u3059\u308b\u5fc5\u8981\u304c\u3042\u308b\u3002","924d7ef4":"## SalePrice\u3068\u5404feature\u306e\u95a2\u4fc2\u3092\u8abf\u3079\u308b","86849790":"# \u63d0\u51fa","f43a8cc9":"## \u65b0\u3057\u3044\u5217(feature)\u306e\u4f5c\u6210\n\u826f\u3044\u4e88\u6e2c\u3092\u3059\u308b\u305f\u3081\u306b\u306f\u3001\u65e2\u5b58\u306efeature(\u7279\u5fb4)\u3092\u7d44\u307f\u5408\u308f\u305b\u3066\u65b0\u3057\u3044feature\u3092\u4f5c\u6210\u3059\u308b\u3002\n\n\u4f8b. \u5730\u4e0b\u5ba4\u306e\u9762\u7a4d(TotalBsmtSF)\u30681\u968e\u306e\u30d5\u30ed\u30a2\u306e\u9762\u7a4d(1stFlrSF)\u30682\u968e\u306e\u30d5\u30ed\u30a2\u306e\u9762\u7a4d(2ndFlrSF)\u3092\u7d44\u307f\u5408\u308f\u305b\u3066\u3001\u5bb6\u5168\u4f53\u306e\u9762\u7a4d(TotalSF)\u3092\u4f5c\u6210","09124c1c":"OverallQual\u3068TotalSF\u306e\u91cd\u8981\u5ea6\u304c\u7a81\u51fa\u3057\u3066\u9ad8\u3044\u3053\u3068\u304c\u5224\u660e\u3002\n\n\u7528\u610f\u3055\u308c\u305f\u30c7\u30fc\u30bf\u306e\u4e2d\u3067SalePrice\u306e\u4e88\u6e2c\u306b\u5fc5\u8981\u306afeature\u306f\u5c11\u3057\u3057\u304b\u306a\u3044\u3053\u3068\u304c\u5224\u660e\u3002\n\n\u3068\u308a\u3042\u3048\u305a\u4e0a\u4f4d30\u500b\u306efeature\u3092\u53d6\u3063\u3066\u304d\u3066\u3001\u305d\u308c\u3092\u30e2\u30c7\u30eb\u306b\u4e0e\u3048\u3001\u8a13\u7df4\u3092\u5b9f\u65bd\u3002\n\n\u4e0a\u4f4d2\u500b\u306efeature\u3092\u639b\u3051\u5408\u308f\u305b\u305f\u3082\u306e\u3092'interaction'\u3092\u3057\u3066\u65b0\u3057\u3044feature\u3092\u4f5c\u6210\u3002","60417847":"## \u5916\u308c\u5024(outlier)\u3092\u524a\u9664\nTotalSF\u3068GrLivArea\u306e\u5916\u308c\u5024\u3092\u524a\u9664\n\n"}}