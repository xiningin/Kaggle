{"cell_type":{"01030efc":"code","cd9b1971":"code","4a478f21":"code","b96c1016":"code","53b34089":"code","4052568c":"code","51fd5776":"code","0ee7b4df":"code","1b58f719":"code","c720f470":"code","068d7a31":"code","deb4e331":"code","fc19879b":"code","65c5e5f7":"code","c1310737":"code","ee606b13":"code","6d0c97ba":"code","7e10eb76":"code","8c5350f3":"code","5c283597":"code","5cb84a18":"code","66ae8c0a":"code","3960b5bb":"code","0d244043":"code","e8802169":"code","63d5246f":"code","3e5e51f2":"code","1d04057c":"code","26be8efc":"code","0e8248e5":"code","9f9adcaf":"code","6ce53bbf":"code","82215031":"code","a3ccca47":"code","26dd5c03":"code","daa01d8a":"code","415f9c48":"code","a6b579ef":"code","8b45609a":"code","38e82cef":"code","e00b495c":"code","1c343895":"code","191964a4":"code","fce01c56":"code","68a292eb":"code","ae9deb13":"code","fb7db217":"code","1be80554":"code","c152d549":"code","50504784":"code","fba69b6d":"code","2a77591e":"code","9d8fa92a":"code","464bdc90":"code","9ff16e8b":"code","297fbe1b":"code","e9be386d":"code","46572b19":"code","2af569a2":"code","522fd552":"code","fa99a4d5":"markdown","6c0e84e6":"markdown","55e0aea0":"markdown","e52699fc":"markdown"},"source":{"01030efc":"import geopy \nfrom geopy.geocoders import Nominatim\nimport numpy as np\nimport seaborn as sns\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport io\nfrom folium.plugins import HeatMap\nimport folium\nfrom folium import plugins","cd9b1971":"gul=pd.read_csv('..\/input\/construction-chances-in-kalaburagigulbarga\/all collected data.csv')","4a478f21":"gul.head()","b96c1016":"gul.shape","53b34089":"sns.heatmap(gul.isnull())","4052568c":"m = folium.Map([17.339745348675089, 76.83301279909653], zoom_start=11)\n","51fd5776":"for index, row in gul.iterrows():\n    folium.CircleMarker([row['latitude'], row['longitude']],\n                        radius=10,\n                        popup=row['Area name'],\n                        fill_color=\"#3db7e4\", # divvy color\n                       ).add_to(m)","0ee7b4df":"! jupyter trust construction chances.ipynb\nstationArr = gul[['latitude', 'longitude']].to_numpy()\n# plot heatmap\nm.add_children(plugins.HeatMap(stationArr, radius=10))\nm\n","1b58f719":"high = gul[gul['Construction chances']=='high']\nmodrate = gul[gul['Construction chances']=='modrate']\nlow = gul[gul['Construction chances']=='low']","c720f470":"m1 = folium.Map([17.339745348675089, 76.83301279909653], zoom_start=11)\nfor index, row in high.iterrows():\n    folium.CircleMarker([row['latitude'], row['longitude']],\n                        radius=10,\n                        popup=row['Area name'],\n                        color='green',\n                        fill_color=\"green\", \n                       ).add_to(m1)\nstationArr = high[['latitude', 'longitude']].to_numpy()\n# plot heatmap\nm1.add_children(plugins.HeatMap(stationArr, radius=5))\nm1","068d7a31":"m2 = folium.Map([17.339745348675089, 76.83301279909653], zoom_start=11)\nfor index, row in modrate.iterrows():\n    folium.CircleMarker([row['latitude'], row['longitude']],\n                        radius=10,\n                        popup=row['Area name'],\n                        color='crimson',\n                        fill_color=\"red\", \n                       ).add_to(m2)\nstationArr = modrate[['latitude', 'longitude']].to_numpy()\n# plot heatmap\nm2.add_children(plugins.HeatMap(stationArr, radius=10))\nm2","deb4e331":"m3 = folium.Map([17.339745348675089, 76.83301279909653], zoom_start=11)\nfor index, row in low.iterrows():\n    folium.CircleMarker([row['latitude'], row['longitude']],\n                        radius=10,\n                        popup=row['Area name'],\n                        color='grey',\n                        fill_color=\"grey\", \n                       ).add_to(m3)\nstationArr = low[['latitude', 'longitude']].to_numpy()\n# plot heatmap\nm3.add_children(plugins.HeatMap(stationArr, radius=10))\nm3","fc19879b":"gul.info()","65c5e5f7":"\nsns.pairplot(gul, hue='Construction chances')\nfig=plt.gcf()\nfig.set_size_inches(13,13)","c1310737":"sns.heatmap(gul.corr(), annot=True)","ee606b13":"sns.countplot(x='Construction chances', data=gul)\n# construction chances are moderate in city compare to other two category","6d0c97ba":"sns.countplot(x='Average age' , data=gul)\n# Average age of houses that data collected is about ten and twenty are more compared to forty or thirty\n# that's why construction chances are moderate because houses are young.","7e10eb76":"sns.histplot(x='Area density', data=gul, hue='Construction chances')\n# the construction chances are more if area density is less clearly, if area density and age is high then also construction chances are high","8c5350f3":"sns.histplot(x='Area density', data=gul, hue='Average age')","5c283597":"sns.countplot(x='Material used', data=gul)\n# modern houses are generally made with bricks, old houses that are 40 years above used stones to construct houses.","5cb84a18":"sns.countplot(x='House Type', data=gul)\n# here simple means old houses.They are becoming less because of its age.\n# modern houses means high standard houses.","66ae8c0a":"sns.countplot(x='Type', data=gul)\n# new home means construction in open plots, Renovation means renovation or complete reconstruction of house\n# here we can see both class have equal opportunity","3960b5bb":"sns.countplot(x='Type', data=gul, hue='Construction chances')\n# construction chances are high in open plot construction. While Renovation of houses are moderate ","0d244043":"sns.countplot(x='Average age', data=gul)\n# average age of houses is a very important feature. it is observed that if age of house made of bricks crosses certain, chances of renovation is high.\n# observed value of average is about 30 years.","e8802169":"sns.countplot(x='Average age', data=gul,hue='Construction chances')\n# if we consider age about 40 and 30, construction chances for 40 is more compared to 30","63d5246f":"sns.barplot(x='Average age',y='Area density', data=gul,hue='Material used')\n","3e5e51f2":"sns.barplot(x='Material used',y='Area density', data=gul)","1d04057c":"sns.barplot(x='House Type',y='Area density', data=gul)\n","26be8efc":"sns.barplot(x='Type',y='Area density', data=gul)\n# if area density is high renovation is also high.","0e8248e5":"sns.barplot(x='Construction chances',y='Area density', data=gul)\n# Higher the area density lower the lower the construction chances.\n","9f9adcaf":"gul.dtypes","6ce53bbf":"gul.isnull().sum()","82215031":" from sklearn import preprocessing\nencoder = preprocessing.LabelEncoder()","a3ccca47":"enc_columns =[]\nfor column in gul.columns:\n    if(gul[column].dtype == 'object'):\n        enc_columns.append(column)\nprint(enc_columns)","26dd5c03":"for column in enc_columns:\n    gul[column] = encoder.fit_transform(gul[column])","daa01d8a":"gul.head()","415f9c48":"gul.dtypes","a6b579ef":"gul['Construction chances'].unique()","8b45609a":"x=gul.iloc[:,5:11]\ny=gul['Construction chances']","38e82cef":"#splitting x and y data to test and train\nfrom sklearn.model_selection import train_test_split\nx_train,x_test,y_train,y_test=train_test_split(x,y,test_size=0.2)","e00b495c":"from sklearn.linear_model import LogisticRegression \nclassifier = LogisticRegression() \nclassifier.fit(x_train, y_train)","1c343895":"#predicting on x_test\npred_log = classifier.predict(x_test)","191964a4":"from sklearn.metrics import confusion_matrix\n#confusion matrix \ncm = confusion_matrix(y_test, pred_log) \nprint (\"Confusion Matrix : \\n\", cm)","fce01c56":"#finding the accuracy score\nfrom sklearn.metrics import accuracy_score\nprint (\"Accuracy : \", accuracy_score(y_test,pred_log))","68a292eb":"#Create a classification report for the model\nfrom sklearn.metrics import classification_report\nprint(classification_report(y_test,pred_log))","ae9deb13":"from sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.metrics import accuracy_score\nfor i in range(1,51,2):\n    regressor=KNeighborsClassifier(n_neighbors=i)\n    regressor.fit(x_train,y_train)\n    pred_knn = regressor.predict(x_test)\n    print(\"Accuracy:\",accuracy_score(y_test, pred_knn), \"for \",i)","fb7db217":"#fitting the model\nfrom sklearn.tree import DecisionTreeClassifier","1be80554":"d_tree = DecisionTreeClassifier()","c152d549":"d_tree.fit(x_train,y_train)","50504784":"pred_tree = d_tree.predict(x_test)","fba69b6d":"from sklearn.metrics import accuracy_score\nprint(\"Accuracy : \",accuracy_score(y_test,pred_tree))","2a77591e":"from sklearn.metrics import classification_report,confusion_matrix\nprint(confusion_matrix(y_test,pred_tree))","9d8fa92a":"print(classification_report(y_test,pred_tree))","464bdc90":"from sklearn.model_selection import GridSearchCV\nparam={'n_neighbors':[17]}\nest=KNeighborsClassifier()\n\nht=GridSearchCV(estimator=est, param_grid=param, cv=20)","9ff16e8b":"ht.fit(x_train,y_train)","297fbe1b":"pred_cv = ht.predict(x_test)","e9be386d":"from sklearn.metrics import accuracy_score\nprint(\"Accuracy : \",accuracy_score(y_test, pred_cv))","46572b19":"print(confusion_matrix(y_test,pred_cv))","2af569a2":"print(classification_report(y_test,pred_cv))","522fd552":"print (\"Accuracy of logestic regression: \", accuracy_score(y_test,pred_log))\nprint (\"Accuracy of KNN: \", accuracy_score(y_test,pred_knn))\nprint (\"Accuracy of decision tree: \", accuracy_score(y_test,pred_tree))\nprint (\"Accuracy of grid search cv: \", accuracy_score(y_test,pred_cv))","fa99a4d5":"# **Logistic Regression**","6c0e84e6":"# ****every time i run this code Accuracy is changing","55e0aea0":"## **Grid search CV with KNN**","e52699fc":"# **KNN**"}}