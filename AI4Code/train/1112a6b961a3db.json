{"cell_type":{"ada06717":"code","5755bead":"code","716b31d6":"code","868fc7e1":"code","c18ca7cb":"code","117da651":"code","bfbad62d":"code","68313dff":"code","ce7fc557":"code","7ebface4":"code","5a9faf2e":"code","0d610d35":"code","4117b49d":"code","df41f197":"code","827634ac":"code","81ecd4c4":"code","27c03547":"code","b94652c7":"code","a2d01d83":"code","145995f0":"code","2c3e6f33":"code","232c6330":"markdown","04b6ad6a":"markdown","b8f8e548":"markdown"},"source":{"ada06717":"# HM Attaullah","5755bead":"import numpy as np\nimport pandas as pd\nimport tensorflow as tf\nimport seaborn as sns\nnp.random.seed(2)\n\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import confusion_matrix\nimport itertools\n\nfrom keras.utils.np_utils import to_categorical # convert to one-hot-encoding\nfrom keras.models import Sequential\nfrom keras.layers import Dense, Dropout, Flatten, Conv2D, MaxPool2D\nfrom keras.optimizers import RMSprop\nfrom keras.preprocessing.image import ImageDataGenerator\nfrom keras.callbacks import ReduceLROnPlateau\n","716b31d6":"# loading data \ntrain_data = pd.read_csv(\"..\/input\/digit-recognizer\/test.csv\")\ntest_data = pd.read_csv(\"..\/input\/digit-recognizer\/test.csv\")\n","868fc7e1":"# display first five rows of train_data\ntrain_data.head()","c18ca7cb":"# checking shape of train_data\ntrain_data.shape # ","117da651":"# checking shape of test_data\n\ntest_data.shape","bfbad62d":"# check the data\ntrain_data.describe()","68313dff":"# check missing and null values\ntest_data.isnull().sum()","ce7fc557":"train_data.isnull().sum()","7ebface4":"Y_train = train_data['label']\n\n# Drop 'label' column\nX_train = train_data.drop(labels = [\"label\"],axis = 1) \n\n# free some space\ndel train_data \n\ng = sns.countplot(Y_train)\n\nY_train.value_counts()","5a9faf2e":"# Normalize the data\nX_train= X_train \/ 255.0\ntest_data= test_data \/ 255.0","0d610d35":"# Reshape image in 3 dimensions (height = 28px, width = 28px , channel = 1)\nX_train = X_train.values.reshape((-1,28,28,1))\ntest_data = test_data.values.reshape((-1,28,28,1))","4117b49d":"test_data.shape","df41f197":"# Encode labels to one hot vectors (ex : 2 -> [0,0,1,0,0,0,0,0,0,0])\nY_train = to_categorical(Y_train, num_classes = 10)","827634ac":"# Set the random seed\nrandom_seed = 2","81ecd4c4":"# Split the train and the validation set for the fitting\nX_train, X_val, Y_train, Y_val = train_test_split(X_train, Y_train, test_size = 0.1, random_state=random_seed)","27c03547":"# Some examples\nimport matplotlib.pyplot as plt\n\nh = plt.imshow(X_train[0][:,:,0])","b94652c7":"from tensorflow.keras import layers\nfrom tensorflow.keras import models\n\nmodel = models.Sequential()\nmodel.add(layers.Conv2D(32, (3, 3), activation='relu', input_shape=(28, 28, 1)))\nmodel.add(layers.MaxPooling2D((2, 2)))\nmodel.add(layers.Conv2D(64, (3, 3), activation='relu'))\nmodel.add(layers.MaxPooling2D((2, 2)))\nmodel.add(layers.Conv2D(64, (3, 3), activation='relu'))","a2d01d83":"model.summary()","145995f0":"model.add(layers.Flatten())\nmodel.add(layers.Dense(64, activation='relu'))\nmodel.add(layers.Dense(10, activation='softmax'))","2c3e6f33":"model.summary()","232c6330":"**importing libraries**\n\n\n\n1.   data load\n2.   data preparation\n*   Normalization\n*   reshape\n*   label encoding\n*   spliting training and validation \n3.   introduction to convents\n4.   saving submission file\n\n\n\n\n\n\n\n\n\n","04b6ad6a":"Data Load","b8f8e548":"Now train"}}