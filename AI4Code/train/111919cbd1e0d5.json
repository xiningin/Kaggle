{"cell_type":{"d1ee159a":"code","487b0c4d":"code","c12b6aff":"code","965d45ae":"code","2d2c2e96":"code","c65e0e1d":"code","dafcbe0b":"code","9f076093":"code","bf9d4b8e":"code","4803f496":"code","d9b2929b":"code","a0fdf970":"code","dbec6ea9":"code","94347a9e":"code","7c461ed2":"code","6833d4e9":"code","cc76815b":"code","042f973e":"code","4795d483":"code","29b86850":"code","ec56c230":"code","e35c3cad":"code","b798d6b2":"code","912781a6":"code","9f64be1c":"code","5e880a99":"code","5633657b":"code","52e6717c":"markdown","eb687b06":"markdown","f5c246d2":"markdown","acf5cafa":"markdown","3728e5c3":"markdown","790ba5e1":"markdown","a5f4ea79":"markdown","e4333e80":"markdown","512d2ffe":"markdown","ada0fb35":"markdown","027d38b2":"markdown","cae246d4":"markdown","0e8b5dc2":"markdown","47a85b08":"markdown","246adb1c":"markdown","eaccafcd":"markdown"},"source":{"d1ee159a":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nplt.style.use('fivethirtyeight')\n\nimport collections\nimport itertools\n\nfrom plotly.offline import download_plotlyjs, init_notebook_mode, plot, iplot\nimport plotly as py\nimport plotly.graph_objs as go\n\nimport scipy.stats as stats\nfrom scipy.stats import norm\nfrom scipy.special import boxcox1p\n\nimport statsmodels\nimport statsmodels.api as sm\n#print(statsmodels.__version__)\n\nfrom sklearn.preprocessing import scale, StandardScaler, RobustScaler, OneHotEncoder\nfrom sklearn.utils import resample\nfrom sklearn.decomposition import PCA\nfrom sklearn.manifold import TSNE\n\nimport warnings\nwarnings.filterwarnings(\"ignore\", category=FutureWarning)\n\nimport colorlover as cl\nfrom IPython.display import HTML\n\nchosen_colors=cl.scales['7']['qual'][np.random.choice(list(cl.scales['7']['qual'].keys()))]\n\nprint('The color palette chosen for this notebook is:')\nHTML(cl.to_html(chosen_colors))\n","487b0c4d":"Combined_data = pd.read_csv('..\/input\/new-york-city-airbnb-open-data\/AB_NYC_2019.csv')\nCombined_data.head()","c12b6aff":"print('Number of features: {}'.format(Combined_data.shape[1]))\nprint('Number of examples: {}'.format(Combined_data.shape[0]))","965d45ae":"#for c in df.columns:\n#    print(c, dtype(df_train[c]))\nCombined_data.dtypes","2d2c2e96":"Combined_data['last_review'] = pd.to_datetime(Combined_data['last_review'],infer_datetime_format=True) ","c65e0e1d":"total = Combined_data.isnull().sum().sort_values(ascending=False)\npercent = (Combined_data.isnull().sum())\/Combined_data.isnull().count().sort_values(ascending=False)\nmissing_data = pd.concat([total, percent], axis=1, keys=['Total','Percent'], sort=False).sort_values('Total', ascending=False)\nmissing_data.head(40)","dafcbe0b":"Combined_data.drop(['host_name','name'], axis=1, inplace=True)","9f076093":"Combined_data[Combined_data['number_of_reviews']== 0.0].shape","bf9d4b8e":"Combined_data['reviews_per_month'] = Combined_data['reviews_per_month'].fillna(0)","4803f496":"earliest = min(Combined_data['last_review'])\nCombined_data['last_review'] = Combined_data['last_review'].fillna(earliest)\nCombined_data['last_review'] = Combined_data['last_review'].apply(lambda x: x.toordinal() - earliest.toordinal())","d9b2929b":"total = Combined_data.isnull().sum().sort_values(ascending=False)\npercent = (Combined_data.isnull().sum())\/Combined_data.isnull().count().sort_values(ascending=False)\nmissing_data = pd.concat([total, percent], axis=1, keys=['Total','Percent'], sort=False).sort_values('Total', ascending=False)\nmissing_data.head(40)","a0fdf970":"Combined_data = Combined_data[np.log1p(Combined_data['price']) < 8]\nCombined_data = Combined_data[np.log1p(Combined_data['price']) > 3]\nCombined_data['price'] = np.log1p(Combined_data['price'])\n\nCombined_data = Combined_data.drop(['host_id', 'id'], axis=1)\n\nCombined_data['minimum_nights'] = np.log1p(Combined_data['minimum_nights'])\n\nCombined_data['reviews_per_month'] = Combined_data[Combined_data['reviews_per_month'] < 17.5]['reviews_per_month']","dbec6ea9":"categorical_features = Combined_data.select_dtypes(include=['object'])\nprint('Categorical features: {}'.format(categorical_features.shape))\ncategorical_features_one_hot = pd.get_dummies(categorical_features)\ncategorical_features_one_hot.head()\nCombined_data['reviews_per_month'] = Combined_data['reviews_per_month'].fillna(0)\n\nnumerical_features =  Combined_data.select_dtypes(exclude=['object'])\ny = numerical_features.price\nnumerical_features = numerical_features.drop(['price'], axis=1)\nprint('Numerical features: {}'.format(numerical_features.shape))\n","94347a9e":"X = np.concatenate((numerical_features, categorical_features_one_hot), axis=1)\nX_df = pd.concat([numerical_features, categorical_features_one_hot], axis=1)\n#print('Dimensions of the design matrix: {}'.format(X.shape))\n#print('Dimension of the target vector: {}'.format(y.shape))\n\nProcessed_data = pd.concat([X_df, y], axis = 1)\n#Processed_data.to_csv('NYC_Airbnb_Processed.dat')","7c461ed2":"scaler = RobustScaler()\nscaler.fit(X)\nX = scaler.transform(X)\nX;","6833d4e9":"pca = PCA()\nX_pca = pca.fit_transform(X);\npca.get_covariance();\n\nexplained_variance = pca.explained_variance_ratio_\nexplained_variance = pd.DataFrame({'PCA Component': [1+x for x in range(len(explained_variance))], 'Explained Variance': explained_variance})\nexplained_variance.head()","cc76815b":"n_components = 50\ntrace1 = go.Scatter(\n    x=explained_variance[\"PCA Component\"][:n_components], \n    y=100*explained_variance[\"Explained Variance\"][:n_components],\n    \n    mode='markers',\n    line=dict(\n        color='red'\n    ),\n)\n\ntrace2 = go.Scatter(\n    x=explained_variance[\"PCA Component\"][:n_components], \n    y=100*explained_variance[\"Explained Variance\"][:n_components],\n    \n    mode='lines',\n    line=dict(\n        color='red'\n    ),\n)\n\ndata=[trace1, trace2]\n\nlayout = go.Layout(\n    title='Proportion of Explained Variance per PCA component',\n    xaxis=dict(\n        title='Component',\n        showgrid=True\n    ),\n    yaxis=dict(\n        title='Explained variance [%]',\n        type='log'\n    ),\n    hovermode='closest',\n)\n\nfigure = go.Figure(data=data, layout=layout)\n\nfigure.update_layout(showlegend=False)\n\niplot(figure)","042f973e":"pca_cov = pca.get_covariance();\npca_cov = pca_cov[:12, :12]\nf, ax = plt.subplots(figsize=(15,12))\nsns.heatmap(pca_cov, vmax=0.8, square=True, annot=True)","4795d483":"n_components = 235\npca_cov = pca.get_covariance();\npca_cov = pca_cov[:14, :n_components]\nf, ax = plt.subplots(figsize=(28,5))\nsns.heatmap(pca_cov, vmax=0.8, cmap=\"YlGnBu\")","29b86850":"print(\"Calculating TSNE\")\ntsne = TSNE(n_components=3, perplexity=5, verbose=2, n_iter=1000,early_exaggeration=1)\ntsne0 = tsne.fit_transform(X)\n\nfig, axes = plt.subplots(1,3,figsize=(18.5, 10.5))\n\naxes[0].scatter(tsne0[:,0],tsne0[:,1], \n            cmap = \"coolwarm\", edgecolor = \"None\", alpha=0.35)\naxes[0].set_title('TSNE[0] vs TSNE[1]')\n\naxes[1].scatter(tsne0[:,0],tsne0[:,2], \n            cmap = \"coolwarm\", edgecolor = \"None\", alpha=0.35)\naxes[1].set_title('TSNE[0] vs TSNE[2]')\n\naxes[2].scatter(tsne0[:,1],tsne0[:,2], \n            cmap = \"coolwarm\", edgecolor = \"None\", alpha=0.35)\naxes[2].set_title('TSNE[1] vs TSNE[2]')","ec56c230":"print(\"Calculating TSNE\")\ntsne = TSNE(n_components=3, perplexity=5, verbose=2, n_iter=1000,early_exaggeration=12)\ntsne0 = tsne.fit_transform(X)\n\nfig, axes = plt.subplots(1,3,figsize=(18.5, 10.5))\n\naxes[0].scatter(tsne0[:,0],tsne0[:,1], \n            cmap = \"coolwarm\", edgecolor = \"None\", alpha=0.35)\naxes[0].set_title('TSNE[0] vs TSNE[1]')\n\naxes[1].scatter(tsne0[:,0],tsne0[:,2], \n            cmap = \"coolwarm\", edgecolor = \"None\", alpha=0.35)\naxes[1].set_title('TSNE[0] vs TSNE[2]')\n\naxes[2].scatter(tsne0[:,1],tsne0[:,2], \n            cmap = \"coolwarm\", edgecolor = \"None\", alpha=0.35)\naxes[2].set_title('TSNE[1] vs TSNE[2]')","e35c3cad":"print(\"Calculating TSNE\")\ntsne = TSNE(n_components=3, perplexity=50, verbose=2, n_iter=5000,early_exaggeration=1)\ntsne0 = tsne.fit_transform(X)\n\nfig, axes = plt.subplots(1,3,figsize=(18.5, 10.5))\n\naxes[0].scatter(tsne0[:,0],tsne0[:,1], \n            cmap = \"coolwarm\", edgecolor = \"None\", alpha=0.35)\naxes[0].set_title('TSNE[0] vs TSNE[1]')\n\naxes[1].scatter(tsne0[:,0],tsne0[:,2], \n            cmap = \"coolwarm\", edgecolor = \"None\", alpha=0.35)\naxes[1].set_title('TSNE[0] vs TSNE[2]')\n\naxes[2].scatter(tsne0[:,1],tsne0[:,2], \n            cmap = \"coolwarm\", edgecolor = \"None\", alpha=0.35)\naxes[2].set_title('TSNE[1] vs TSNE[2]')","b798d6b2":"print(\"Calculating TSNE\")\ntsne = TSNE(n_components=3, perplexity=50, verbose=2, n_iter=1000,early_exaggeration=4)\ntsne0 = tsne.fit_transform(X_pca)\n\nfig, axes = plt.subplots(1,3,figsize=(18.5, 10.5))\n\naxes[0].scatter(tsne0[:,0],tsne0[:,1], \n            cmap = \"coolwarm\", edgecolor = \"None\", alpha=0.35)\naxes[0].set_title('TSNE[0] vs TSNE[1]')\n\naxes[1].scatter(tsne0[:,0],tsne0[:,2], \n            cmap = \"coolwarm\", edgecolor = \"None\", alpha=0.35)\naxes[1].set_title('TSNE[0] vs TSNE[2]')\n\naxes[2].scatter(tsne0[:,1],tsne0[:,2], \n            cmap = \"coolwarm\", edgecolor = \"None\", alpha=0.35)\naxes[2].set_title('TSNE[1] vs TSNE[2]')","912781a6":"X1 = X_df[['Longitude' , 'Latitude']].iloc[: , :].values\ninertia = []\nfor n in range(1 , 11):\n    algorithm = (KMeans(n_clusters = n ,init='k-means++', n_init = 10 ,max_iter=300, \n                        tol=0.0001,  random_state= 111  , algorithm='elkan') )\n    algorithm.fit(X1)\n    inertia.append(algorithm.inertia_)\n\nprint(intertia)","9f64be1c":"plt.figure(1 , figsize = (15 ,6))\nplt.plot(np.arange(1 , 11) , inertia , 'o')\nplt.plot(np.arange(1 , 11) , inertia , '-' , alpha = 0.5)\nplt.xlabel('Number of Clusters') , plt.ylabel('Inertia')\nplt.show()","5e880a99":"X2 = X_df[['Longitude' , 'Latitude']].iloc[: , :].values\ninertia = []\nfor n in range(1 , 11):\n    algorithm = (KMeans(n_clusters = n ,init='k-means++', n_init = 10 ,max_iter=300, \n                        tol=0.0001,  random_state= 111  , algorithm='elkan') )\n    algorithm.fit(X2)\n    inertia.append(algorithm.inertia_)\n\nprint(inertia)","5633657b":"plt.figure(1 , figsize = (15 ,6))\nplt.plot(np.arange(1 , 11) , inertia , 'o')\nplt.plot(np.arange(1 , 11) , inertia , '-' , alpha = 0.5)\nplt.xlabel('Number of Clusters') , plt.ylabel('Inertia')\nplt.show()","52e6717c":"The NaN values in the last_review and reviews_per_month columns all occur for examples where no reviews were given in the first place. \n\nFor reviews_per_month, I will fill those values with 0's.","eb687b06":"# PCA","f5c246d2":"# t-SNE","acf5cafa":"# K-means clustering","3728e5c3":"### Missing data","790ba5e1":"### Outliers & input transformations","a5f4ea79":"### Scaling","e4333e80":"# Acknowledgements","512d2ffe":"1. [This Mall Customer Segmentation Data notebook](https:\/\/www.kaggle.com\/kushal1996\/customer-segmentation-k-means-analysis) contains lost of great K-means visualizations coded up clearly.","ada0fb35":"### t-SNE","027d38b2":"See my rental price prediction notebook for details!\n","cae246d4":"# Load data","0e8b5dc2":"# Input processing","47a85b08":"1. [This Google Tech Talk by Laurens Van Der Maaten](https:\/\/www.youtube.com\/watch?v=RJVL80Gg3lA) is a fantastic introduction to t-SNE.\n2. A great reference for python code for t-SNE is [this kernel](https:\/\/www.kaggle.com\/arthurtok\/tsne-pca-quick-and-dirty-visuals).\n3. [This blog post is a tremendously enlightening discussion of how to correctly use t-SNE.](https:\/\/distill.pub\/2016\/misread-tsne\/)","246adb1c":"#### Categorical features","eaccafcd":"### K-means"}}