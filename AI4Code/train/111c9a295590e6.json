{"cell_type":{"61970e2c":"code","210a9cf2":"code","2d87b09b":"code","b4bded8a":"code","db0fa3c2":"code","f5bf7dd3":"code","aa080f16":"code","07aab40d":"code","f950aa71":"code","f415a754":"code","4d7609e3":"code","a82fdf34":"code","656535c0":"code","941594f4":"code","1d248b93":"code","9e162df3":"code","dc755a15":"code","153b58d1":"code","cf1014c6":"code","af514726":"code","3e997df4":"markdown","8286e7b2":"markdown"},"source":{"61970e2c":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nfrom bs4 import BeautifulSoup\nimport re\nimport nltk\nfrom nltk.corpus import stopwords\nfrom sklearn.feature_extraction.text import CountVectorizer\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","210a9cf2":"import zipfile\nwith zipfile.ZipFile('..\/input\/sentiment-analysis-on-movie-reviews\/train.tsv.zip', 'r') as zip_ref_t:\n    zip_ref_t.extractall('..\/output')\nwith zipfile.ZipFile('..\/input\/sentiment-analysis-on-movie-reviews\/test.tsv.zip', 'r') as zip_ref_te:\n    zip_ref_te.extractall('..\/output')","2d87b09b":"train_data=pd.read_csv('..\/output\/train.tsv',delimiter='\\t')\ntest_data=pd.read_csv('..\/output\/test.tsv',delimiter='\\t')","b4bded8a":"train_data['Phrase'][0]","db0fa3c2":"train_data.head()","f5bf7dd3":"def process_phrase(ph):\n    #Using Regular Expressions to further process the string\n    process = re.sub(\"[^a-zA-Z?!.;:]\", # The pattern to search for\n                      \" \",                   # The pattern to replace it with\n                      ph)  # The text to search\n    \n    #We will convert the string to lowercase letter and divide them into words\n    words=ph.lower().split()\n        \n    #Searching a set is much faster than searching list, so we will convert the stop words into a set\n    stops = set(stopwords.words(\"english\")) \n    \n    #We now remove the stop words or the unimportant words and retain only meaningful ones\n    mean_words=[w for w in words if not w in stops]\n    return \" \".join(mean_words)","aa080f16":"#Processing Each Phrase\ntrain_data['Phrase']=[process_phrase(p) for p in train_data['Phrase']]","07aab40d":"#Implementing BOW Model\nvectorizer=CountVectorizer(analyzer='word',\n                         tokenizer=None,\n                         preprocessor=None,\n                         stop_words=None,\n                         max_features=5000)\ntrain_data_features=vectorizer.fit_transform(train_data['Phrase'])","f950aa71":"#vectorizer.get_feature_names()","f415a754":"train_data_features.shape","4d7609e3":"from sklearn.linear_model import LogisticRegression\nlog_rot=LogisticRegression()\nlog_rot.fit(train_data_features,train_data['Sentiment'])","a82fdf34":"test_data.head()","656535c0":"#Pre-processing Test Data\ntest_data['Phrase']=[process_phrase(p) for p in test_data['Phrase']]","941594f4":"test_data_features=vectorizer.transform(test_data['Phrase'])\ntest_data_features=test_data_features.toarray()","1d248b93":"results=log_rot.predict(test_data_features)","9e162df3":"from sklearn.ensemble import RandomForestClassifier\n# Initialize a Random Forest classifier with 100 trees\nforest = RandomForestClassifier(n_estimators = 100)","dc755a15":"forest.fit(train_data_features,train_data['Sentiment'])","153b58d1":"fores_results=forest.predict(test_data_features)","cf1014c6":"#Saving submissions\noutput_file=pd.DataFrame(data={'PhraseID':test_data['PhraseId'],'Sentiment':fores_results})\noutput_file.to_csv('mysubmissions.csv',index=False)\nprint('The submission file has been saved successfully')","af514726":"output_file.head()","3e997df4":"LOGISTIC REGRESSION MODEL","8286e7b2":"Random Forest Model"}}