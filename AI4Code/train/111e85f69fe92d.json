{"cell_type":{"1c7c9b7e":"code","07c77a3d":"code","ed46251d":"code","f7fbc312":"code","51b56d6e":"code","1a1d256c":"code","75dbfb6b":"code","9cc71470":"code","162ed0a1":"code","57fc68e3":"code","3f3d8874":"code","de8b4adc":"markdown"},"source":{"1c7c9b7e":"# This note book depicts the concept of Max stacking and quantitzation\n# our intention is to combine multiple of sky patch and see the results","07c77a3d":"import numpy as np\nimport cv2\n#from google.colab import files\nimport matplotlib.pyplot as plt\nimport os\nimport sys\n","ed46251d":"# lets load our dataset\n#files.upload()","f7fbc312":"# let look at what we have captured\nimg = cv2.imread('..\/input\/nightskyimagaes\/nightsky\/IMG_20200807_215334533_BURST000_COVER.jpg')\nplt.figure(figsize=(50,50))\nplt.imshow(img)","51b56d6e":"x,y,c = img.shape\n#  creating an array of zeros to store the final image\nstackedImage = np.zeros((x,y,c))\nImagelist = os.listdir('..\/input\/nightskyimagaes\/nightsky')\nnumImages = len(Imagelist)\nnumImages","1a1d256c":"# lets do max stacking\nfor mem in Imagelist:\n  path = '..\/input\/nightskyimagaes\/nightsky\/' + mem\n  img1 = cv2.imread(path)\n  #(b, g, r) = cv2.split(img1)\n  #ret2, thresh2 = cv2.threshold(b, 150, 255, cv2.THRESH_BINARY)\n  #ret3, thresh3 = cv2.threshold(g, 150, 255, cv2.THRESH_BINARY)\n  #ret4, thresh4 = cv2.threshold(r, 150, 255, cv2.THRESH_BINARY)\n  #img1 = cv2.merge((thresh2, thresh3, thresh4))\n  stackedImage = np.maximum(stackedImage, img1) \n","75dbfb6b":"# lets see what we got but 1st we typecast to uint8\nstackedImage = np.array(stackedImage, dtype='uint8')\nplt.figure(figsize=(30,30))\nplt.imshow(stackedImage)","9cc71470":"# let perform quantization\n# we will set a pixels with value less than equal to 13 to zero which is the mean and all values above this to 100\n\nxi = 0\nwhile xi < x:\n  yi = 0\n  while yi < y:\n    ci = 0\n    while ci < c:\n      if stackedImage[xi,yi,ci] >= 14:\n        stackedImage[xi, yi, ci] = 100\n      else:\n        stackedImage[xi, yi, ci] = 0;\n      \n      ci = ci + 1\n    yi = yi +1\n  xi = xi + 1\n","162ed0a1":"# let type cast agian see the results over all channels\nstackedImage = np.array(stackedImage, dtype='uint8')\nplt.figure(figsize=(30,30))\nplt.imshow(stackedImage[:,:,0],cmap = 'gray')\n","57fc68e3":"## clearly this one is the best\nplt.figure(figsize=(30,30))\nplt.imshow(stackedImage[:,:,1],cmap = 'gray')","3f3d8874":"# and on third channel\nplt.figure(figsize=(30,30))\nplt.imshow(stackedImage[:,:,2],cmap = 'gray')","de8b4adc":"<a href=\"https:\/\/colab.research.google.com\/github\/khoslaritwek\/Python_Projects\/blob\/master\/ImageStacking.ipynb\" target=\"_parent\"><img src=\"https:\/\/colab.research.google.com\/assets\/colab-badge.svg\" alt=\"Open In Colab\"\/><\/a>"}}