{"cell_type":{"d618fb2c":"code","ec31500c":"code","ec627350":"code","0821c32d":"code","5ce92ae0":"code","d13af20d":"code","cdc3f555":"code","8d6075dc":"code","c1f58a48":"code","0085a3ea":"code","d4fd6054":"code","b476c15d":"code","bc985ff1":"code","6955302d":"markdown","3883a55e":"markdown","5af30e76":"markdown","6b8aa082":"markdown","5edc3566":"markdown","515169e0":"markdown","2a3b747b":"markdown","522d3a2a":"markdown","ce7f1ffd":"markdown"},"source":{"d618fb2c":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","ec31500c":"data = pd.read_csv(\"\/kaggle\/input\/deodorant-instant-liking-data\/Data_train_reduced.csv\")\ntest_data = pd.read_csv(\"\/kaggle\/input\/deodorant-instant-liking-data\/test_data.csv\")\n\ndata.info()\ntest_data.info()","ec627350":"test_data.Product.unique()","0821c32d":"print(test_data[test_data[\"Product\"] == \"Deodorant F\"].shape)\nprint(test_data[test_data[\"Product\"] == \"Deodorant G\"].shape)","5ce92ae0":"filt_1 = test_data[\"Product\"] == \"Deodorant F\"\nfilt_2 = test_data[\"Product\"] == \"Deodorant G\"\n\nmy_data = test_data[filt_1 | filt_2].copy()","d13af20d":"my_data.info()","cdc3f555":"my_data.drop([\"Respondent.ID\", \"Product.ID\"], axis=1, inplace=True)","8d6075dc":"my_data.Product = [1 if i == \"Deodorant F\" else 0 for i in my_data.Product]","c1f58a48":"y = my_data.Product.values\nx = my_data.drop([\"Product\"],axis=1)\nx_normalised = (x - np.min(x)) \/ (np.max(x) - np.min(x))","0085a3ea":"from sklearn.model_selection import train_test_split\n\nx_train, x_test, y_train, y_test = train_test_split(x_normalised, y, test_size=0.2, random_state=15)\n\nx_train = x_train.T\nx_test = x_test.T\ny_train = y_train.T\ny_test = y_test.T","d4fd6054":"print(x_train.shape)\nprint(x_test.shape)\n\nprint(y_train.shape)\nprint(y_test.shape)","b476c15d":"# initialise the w and b values\ndef set_initial_w_and_b_values(dimension):\n    w = np.full((dimension,1),0.01)\n    b = 0.0\n    return w,b\n\n# sigmoid function for making the values between 0 and 1\ndef sigmoid(z):\n    return 1.0\/(1.0 + np.exp(-z))\n\n# forward and backward propagation\ndef forward_and_backward_propagation(w,b,x,y):\n    z = np.dot(w.T,x) + b\n    y_head = sigmoid(z)\n    \n    loss = -y*np.log(y_head)-(1-y)*np.log(1-y_head)\n    cost = (np.sum(loss))\/x.shape[1]\n    \n    derivative_weight = (np.dot(x,((y_head-y).T)))\/x.shape[1]\n    derivative_bias = np.sum(y_head-y)\/x.shape[1]\n    \n    gradients = {\"derivative_weight\": derivative_weight, \"derivative_bias\": derivative_bias}\n    \n    return cost, gradients\n\n# update the parameters according to gradients\ndef update(w, b, x, y, learning_rate, number_of_iterarion):\n    cost_list = []\n    cost_list2 = []\n    index = []\n    \n    # updating(learning) parameters is number_of_iterarion times\n    for i in range(number_of_iterarion):\n        # make forward and backward propagation and find cost and gradients\n        cost, gradients = forward_and_backward_propagation(w,b,x,y)\n        cost_list.append(cost)\n        # update parameters\n        w = w - learning_rate * gradients[\"derivative_weight\"]\n        b = b - learning_rate * gradients[\"derivative_bias\"]\n        if i % int(number_of_iterarion\/20) == 0:\n            cost_list2.append(cost)\n            index.append(i)\n            print (\"Cost after iteration %i: %f\" %(i+1, cost))\n            \n    parameters = {\"weight\": w,\"bias\": b}\n    plt.plot(index,cost_list2)\n    plt.xticks(index,rotation='vertical')\n    plt.xlabel(\"Number of Iterarion\")\n    plt.ylabel(\"Cost\")\n    plt.show()\n    return parameters, gradients, cost_list\n\n# to make predictions\ndef predict(w,b,x):\n    z = sigmoid(np.dot(w.T,x)+b)\n    Y_prediction = np.zeros((1,x.shape[1]))\n    # if z is bigger than 0.5, our prediction is sign one (y_head=1),\n    # if z is smaller than 0.5, our prediction is sign zero (y_head=0),\n    for i in range(z.shape[1]):\n        if z[0,i]<= 0.5:\n            Y_prediction[0,i] = 0\n        else:\n            Y_prediction[0,i] = 1\n\n    return Y_prediction\n\n# logistic regression function\ndef logistic_regression(x_train, y_train, x_test, y_test, learning_rate ,  num_iterations):\n    # initialize\n    dimension =  x_train.shape[0]\n    w,b = set_initial_w_and_b_values(dimension)\n\n    parameters, gradients, cost_list = update(w, b, x_train, y_train, learning_rate, num_iterations)\n    \n    y_prediction_train = predict(parameters[\"weight\"],parameters[\"bias\"],x_train)\n    y_prediction_test = predict(parameters[\"weight\"],parameters[\"bias\"],x_test)\n\n    # Print test Errors\n    print(\"train accuracy: {} %\".format(100 - np.mean(np.abs(y_prediction_train - y_train)) * 100))\n    print(\"test accuracy: {} %\".format(100 - np.mean(np.abs(y_prediction_test - y_test)) * 100))\n    ","bc985ff1":"logistic_regression(x_train, y_train, x_test, y_test, learning_rate = 1, num_iterations = 300) ","6955302d":"There are two .csv files in this data. First I should check them.","3883a55e":"Run the proccess..","5af30e76":"I am going to use \"my_data\" for the rest of this notebook.","6b8aa082":"Dropping the irrelevant columns.","5edc3566":"Define functions","515169e0":"Define x and y. Then normalize x columns.","2a3b747b":"I chose the test_data to apply Logistic regression.\n\nBut there are 5 product options.\nSo, I filtered the data and there will be 2 product options left.\n(\"Deodorant F\" and \"Deodorant G\")","522d3a2a":"Split the data into train and test data","ce7f1ffd":"Product column is updated -> 1 for \"F\" and 0 for \"G\""}}