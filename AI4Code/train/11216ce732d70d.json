{"cell_type":{"3736259f":"code","6cd3aafe":"code","63cea238":"code","d83637b2":"code","e847ac8e":"code","42706f0a":"code","8019db5d":"code","4c523a36":"code","23dabcfb":"markdown","8e43d92d":"markdown","e9315a82":"markdown","f22defd0":"markdown","b3496466":"markdown","1d940b5d":"markdown","2239da27":"markdown","2a9d10fb":"markdown","02f5c3e7":"markdown","72d63a4d":"markdown","1e4b60f8":"markdown","7260e670":"markdown","07b067f1":"markdown","9a77a4d9":"markdown","52e39a2c":"markdown"},"source":{"3736259f":"!pip install -Iv pulp==1.6.8 --quiet","6cd3aafe":"import pulp as plp","63cea238":"Lpproblem = plp.LpProblem('Problem', plp.LpMaximize) ","d83637b2":"x = plp.LpVariable(\"x\", lowBound = 0)   \ny = plp.LpVariable(\"y\", lowBound = 0)  ","e847ac8e":"Lpproblem += 30 * x + 40 * y ","42706f0a":"Lpproblem += 12 * x + 4 * y <= 300\nLpproblem += 4 * x + 4 * y <= 120\nLpproblem += 3 * x + 12 * y <= 252","8019db5d":"print(Lpproblem)","4c523a36":"status = Lpproblem.solve()    \nprint(\"Model status: \", plp.LpStatus[status])   \nprint(\"Model solution: \\nProduct A: \", plp.value(x), \"\\nProduct B: \", plp.value(y), \"\\nProfit: \",plp.value(Lpproblem.objective)) ","23dabcfb":"Hi fellow kagglers! This is my first notebook on Kaggle, so I will gladly accept any feedback on the topic :)\nLinear optimization is widely used for economical and technical problems, for instance, production tasks, transportation strategy and even diet planning! Those can be easily solved with Solver tool in Excel, but what if there is a large amount of variables? There comes handy PuLP package in Python which helps in finding solutions much faster.\n\n![](https:\/\/img-9gag-fun.9cache.com\/photo\/a0RMzPz_460s.jpg)","8e43d92d":"# Optimization of the model","e9315a82":"# Introduction","f22defd0":"# Conclusion","b3496466":"# Getting started","1d940b5d":"Now solve the problem and display the final solution (first two values are amounts of product A and B that we need to produce and third value is our profit):","2239da27":"Display the problem:","2a9d10fb":"Now describe an objective function that we need to optimize:","02f5c3e7":"Set constraints for the problem:","72d63a4d":"Create a maximization problem:","1e4b60f8":"That's it! Looks easy, right? But if you use this for more complex models with hundreds of variables it may be a challenge to set them all in a PuLP model, I will share later an example of investment model with PuLP solver so that you can understand it. Thank you for reading this and hope you enjoyed my notebook! :)\n","7260e670":"Import newly installed package:","07b067f1":"# Example of optimization model\n\n> Let's assume that we are managing a big facility related to large-scale production. For the production of two products A and B the company uses three types of raw materials. Consumption rates for each type of raw material for the production of a single product unit are shown in the table below. The profit from the sales of each product unit and the total amount of raw materials that can be used by the enterprise are shown in the same table. \n\n![image.png](attachment:image.png)\n\nWe will set the produced amounts of each product as x (for product A) and y (for product B) - our *decision variables*. In linear programming, the values for decision variables are always greater than or equal to 0. An *objective function* will be the main goal of the task - maximising the profit, it will be marked as Z in the solution. Total amount of raw material will be used as *constraints*, or restrictions on decision variables, because we cannot more materials than we have available.\nWe need to maximize function ***Z = 30x + 40y*** with following constraints:\n*12x + 4y <= 300 (type 1 of material)\n4x + 4y <= 120 (type 2 of material)\n3x + 12y <= 252 (type 3 of material)\nx >= 0, y >= 0*","9a77a4d9":"Installing PuLP package in Kaggle notebooks may be challenging, but you can try installing older versions of PuLP package, it helped in this case:","52e39a2c":"Define variables for problem, lowBound = 0 means that it is a non-negative value."}}