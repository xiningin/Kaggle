{"cell_type":{"d0227020":"code","5a06f65d":"code","41ac450e":"code","d801c67a":"code","15a98806":"code","1e6d7a76":"code","1d748f99":"code","05982c49":"code","3c3a7833":"code","6b4c10dd":"code","9949d288":"code","b9102931":"code","52fecc29":"code","aa69e145":"code","47590769":"code","ee312c33":"code","2f8c2759":"code","318aa573":"code","718210db":"code","b9a7c9fb":"code","230902ec":"code","8641108c":"code","6f8b82bf":"code","b1dfc7a9":"code","b5afb111":"code","9e6257aa":"code","ffd5806a":"code","17676981":"markdown","9743033a":"markdown","833990c8":"markdown","a008cec1":"markdown","61eb76a7":"markdown"},"source":{"d0227020":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\nprint(len(filenames))\n\n# Any results you write to the current directory are saved as output.","5a06f65d":"import os\nimport pandas as pd\nimport numpy as np\nimport torch\nimport torchvision\nfrom PIL import Image\nfrom torch.utils.data import Dataset, DataLoader, random_split\nfrom torchvision import transforms","41ac450e":"file_path1 ='..\/input\/test.csv'\nfile_path2 ='..\/input\/train.csv'\nfile_path3 ='..\/input\/sample_submission.csv'","d801c67a":"test = pd.read_csv(file_path1)\ntrain = pd.read_csv(file_path2)\nsample_submission=pd.read_csv(file_path3)","15a98806":"print(train.shape[0], test.shape[0]) ","1e6d7a76":"test.head()","1d748f99":"train.head()","05982c49":"sample_submission.head()","3c3a7833":"from PIL import Image\nimport matplotlib.pyplot as plt\nwith open('\/kaggle\/input\/test_images\/b16787f65d49.png', 'rb') as file:\n    img=Image.open(file)\n    plt.axis('off')\n    plt.imshow(img)\n    #print(img.size)\n\n#print(img.format)","6b4c10dd":"class ImageDataset(Dataset):\n    def __init__(self, csv_file, root_dir, transform = None, train = True):\n        self.label_frame = pd.read_csv(csv_file)\n        self.root_dir = root_dir\n        self.transform = transform\n        self.train = train\n        \n    def __len__(self):\n        return len(self.label_frame)\n    \n    def __getitem__(self, indx):\n        img_name = os.path.join(self.root_dir, self.label_frame.iloc[indx, 0] + '.png')\n        img = Image.open(img_name)\n        if self.transform:\n            img = self.transform(img)\n            \n        if self.train == True:\n            label = self.label_frame.iloc[indx, 1]\n            label = np.array([label])\n            return img, label\n        else:\n            return img, img_name           \n            ","9949d288":"transform = transforms.Compose([transforms.Resize((224, 224)),\n                                transforms.Grayscale(3),\n                                transforms.ToTensor(), \n                                transforms.Normalize([0.485, 0.456, 0.406], [0.229, 0.224, 0.225])])                                               ","b9102931":"train_data = ImageDataset(\"..\/input\/train.csv\", \"..\/input\/train_images\", transform = transform, train = True)\ntest_data = ImageDataset(\"..\/input\/test.csv\", \"..\/input\/test_images\", transform = transform, train = False)","52fecc29":"train_loader = torch.utils.data.DataLoader(train_data, batch_size=64, shuffle=True)\ntest_loader = torch.utils.data.DataLoader(test_data, batch_size=64, shuffle=False)","aa69e145":"len(train_loader), len(test_loader)","47590769":"for data in train_loader:\n    img, lab = data\n    print(lab[0].shape)\n    print(img[0].shape)\n    break","ee312c33":"import torch.nn as nn\nimport torch.optim as optim\nimport torchvision.models as models\nfrom tqdm import tqdm_notebook","2f8c2759":"model = models.resnet18(pretrained=True)","318aa573":"for param in model.parameters():\n    param.requires_grad = False","718210db":"model.fc = nn.Linear(512, 5)","b9a7c9fb":"device = torch.device(\"cuda:0\" if torch.cuda.is_available else 'cpu')","230902ec":"model.to(device)\nloss_fn = nn.CrossEntropyLoss()\nopt = optim.Adam(model.parameters())","8641108c":"print(lab[0].shape)\nprint(lab[9,:])","6f8b82bf":"for i in tqdm_notebook(range(5)):\n    for data in tqdm_notebook(train_loader):\n        image, label = data\n        label = label.squeeze(1)\n        image, label = image.to(device), label.to(device)\n        \n        opt.zero_grad()\n        out = model(image)\n        loss = loss_fn(out, label)\n        loss.backward()\n        opt.step()\n        torch.save(model.state_dict(), \"best_model.pth\")\n        del image, label, out\n        torch.cuda.empty_cache()\n        \n        ","b1dfc7a9":"model.load_state_dict(torch.load(\"best_model.pth\"))\nmodel.to(device)\nmodel.eval()\n","b5afb111":"outputs = []\nfor test_img, test_filename in tqdm_notebook(test_loader):\n        test_img = test_img.to(device)\n        output = model(test_img)\n        num, ind = torch.max(output, 1)\n        output =  ind.squeeze().cpu().numpy()\n        outputs.extend(output)\n","9e6257aa":"submission = test\nsubmission['diagnosis'] = outputs\nsubmission.head()","ffd5806a":"submission.to_csv( 'submission.csv')","17676981":"**CSV Files Pasing and Visualisation-**","9743033a":"**Data Visualisation**","833990c8":"**Import Packages and Libraries**","a008cec1":"**Dataset Class**","61eb76a7":"**Data Preprocessing and Loading**"}}