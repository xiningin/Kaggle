{"cell_type":{"90d0a3a9":"code","9ed28ba0":"code","2b1d5489":"code","7dcb51d6":"code","3fe7123e":"code","b3e210fb":"code","eac07dc6":"code","2709d298":"code","9e90f17c":"code","6d5bdc9c":"code","3712824b":"markdown","6b42b3b6":"markdown","77dba42b":"markdown","8376b369":"markdown","4f149603":"markdown","f871c80d":"markdown","878506c8":"markdown"},"source":{"90d0a3a9":"import numpy as np\nimport pandas as pd\nfrom pathlib import Path\nimport os.path\n\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\nfrom sklearn.model_selection import train_test_split\n\nimport tensorflow as tf\n\nfrom sklearn.metrics import confusion_matrix, classification_report","9ed28ba0":"image_dir = Path('..\/input\/cat-and-dog-images-dataset\/Dog and Cat .png')","2b1d5489":"filepaths = list(image_dir.glob(r'**\/*.png'))\nlabels = list(map(lambda x: os.path.split(os.path.split(x)[0])[1], filepaths))\n\nfilepaths = pd.Series(filepaths, name='Filepath').astype(str)\nlabels = pd.Series(labels, name='Label')\n\nimage_df = pd.concat([filepaths, labels], axis=1)","7dcb51d6":"image_df","3fe7123e":"train_df, test_df = train_test_split(image_df, train_size=0.7, shuffle=True, random_state=1)","b3e210fb":"train_generator = tf.keras.preprocessing.image.ImageDataGenerator(\n    rescale=1.\/255,\n    horizontal_flip=True,\n    width_shift_range=0.2,\n    height_shift_range=0.2,\n    validation_split=0.2\n)\n\ntest_generator = tf.keras.preprocessing.image.ImageDataGenerator(\n    rescale=1.\/255\n)","eac07dc6":"train_images = train_generator.flow_from_dataframe(\n    dataframe=train_df,\n    x_col='Filepath',\n    y_col='Label',\n    target_size=(224, 224),\n    color_mode='rgb',\n    class_mode='binary',\n    batch_size=32,\n    shuffle=True,\n    seed=42,\n    subset='training'\n)\n\nval_images = train_generator.flow_from_dataframe(\n    dataframe=train_df,\n    x_col='Filepath',\n    y_col='Label',\n    target_size=(224, 224),\n    color_mode='rgb',\n    class_mode='binary',\n    batch_size=32,\n    shuffle=True,\n    seed=42,\n    subset='validation'\n)\n\ntest_images = test_generator.flow_from_dataframe(\n    dataframe=test_df,\n    x_col='Filepath',\n    y_col='Label',\n    target_size=(224, 224),\n    color_mode='rgb',\n    class_mode='binary',\n    batch_size=32,\n    shuffle=False\n)","2709d298":"inputs = tf.keras.Input(shape=(224, 224, 3))\nx = tf.keras.layers.Conv2D(filters=16, kernel_size=(3, 3), activation='relu')(inputs)\nx = tf.keras.layers.MaxPool2D()(x)\nx = tf.keras.layers.Conv2D(filters=32, kernel_size=(3, 3), activation='relu')(x)\nx = tf.keras.layers.MaxPool2D()(x)\nx = tf.keras.layers.GlobalAveragePooling2D()(x)\nx = tf.keras.layers.Dense(128, activation='relu')(x)\nx = tf.keras.layers.Dense(128, activation='relu')(x)\noutputs = tf.keras.layers.Dense(1, activation='sigmoid')(x)\n\nmodel = tf.keras.Model(inputs=inputs, outputs=outputs)\n\nmodel.compile(\n    optimizer='adam',\n    loss='binary_crossentropy',\n    metrics=['accuracy']\n)\n\nhistory = model.fit(\n    train_images,\n    validation_data=val_images,\n    epochs=100,\n    callbacks=[\n        tf.keras.callbacks.EarlyStopping(\n            monitor='val_loss',\n            patience=5,\n            restore_best_weights=True\n        ),\n        tf.keras.callbacks.ReduceLROnPlateau(\n            monitor='val_loss',\n            patience=3\n        )\n    ]\n)","9e90f17c":"results = model.evaluate(test_images, verbose=0)\n\nprint(\"    Test Loss: {:.5f}\".format(results[0]))\nprint(\"Test Accuracy: {:.2f}%\".format(results[1] * 100))","6d5bdc9c":"predictions = (model.predict(test_images) >= 0.5).astype(np.int)\n\ncm = confusion_matrix(test_images.labels, predictions, labels=[0, 1])\nclr = classification_report(test_images.labels, predictions, labels=[0, 1], target_names=[\"CAT\", \"DOG\"])\n\nplt.figure(figsize=(6, 6))\nsns.heatmap(cm, annot=True, fmt='g', vmin=0, cmap='Blues', cbar=False)\nplt.xticks(ticks=[0.5, 1.5], labels=[\"CAT\", \"DOG\"])\nplt.yticks(ticks=[0.5, 1.5], labels=[\"CAT\", \"DOG\"])\nplt.xlabel(\"Predicted\")\nplt.ylabel(\"Actual\")\nplt.title(\"Confusion Matrix\")\nplt.show()\n\nprint(\"Classification Report:\\n----------------------\\n\", clr)","3712824b":"# Data Every Day  \n\nThis notebook is featured on Data Every Day, a YouTube series where I train models on a new dataset each day.  \n\n***\n\nCheck it out!  \nhttps:\/\/youtu.be\/jZVVFUhsbgY","6b42b3b6":"# Getting Started","77dba42b":"# Load Image Data","8376b369":"# Results","4f149603":"# Task for Today  \n\n***\n\n## Cat and Dog Classification  \n\nGiven *images of cats and dogs*, let's try to classify which **pet** is present in a given image.\n\nWe will use a TensorFlow\/Keras CNN to make our predictions.","f871c80d":"# Training","878506c8":"# Create File DataFrame"}}