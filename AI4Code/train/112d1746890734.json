{"cell_type":{"6e6f6d40":"code","b93d1259":"code","d98fbb13":"code","5230fe84":"code","bf8241cf":"code","a198994d":"code","95793092":"code","6f0b095a":"code","75899c2e":"code","aacd8023":"code","63ac2fc7":"code","ff85a16b":"code","28ba8728":"code","99c9a145":"code","488f4f6c":"code","33449f6e":"code","196dbfa6":"code","e832b6a5":"code","54d5083c":"code","458b2a67":"code","8395de28":"code","d4489575":"code","bbc3d7d2":"code","b9fc69c9":"code","bdf6bb96":"code","73b8bb86":"code","19cc9d2e":"code","584cb369":"code","2387495b":"code","f6635feb":"code","b4adaff0":"code","02f723b0":"code","3a2da565":"code","54e8e497":"code","a763c650":"code","88df57e3":"code","5514fe88":"code","3cc567f6":"code","92429820":"code","229188ed":"code","66974d29":"code","12cc112c":"code","b8bbc9cb":"code","df64812c":"code","4c0e8a5e":"code","e658be43":"code","17e4115d":"code","c7a5aa11":"code","28bf0f29":"code","1f5578ad":"code","ccca1ebc":"code","7a9e106d":"code","13faa6db":"code","44ceaf0e":"code","87bc3f11":"code","d21b509d":"code","97342911":"code","82a4f37b":"code","dfe1df1e":"code","b6675043":"code","c6892c06":"code","4522d359":"code","859aa5ff":"code","eef608e3":"code","9487d150":"code","9b52e990":"code","063299ca":"code","3f3707f3":"code","f8ed1d28":"code","18af9b50":"code","5e0732d7":"code","d94fb082":"code","5ffd1c0c":"code","a177a0e5":"code","35d98329":"code","3669c013":"code","071b8224":"code","09f212dc":"markdown","8ca48046":"markdown","429bc761":"markdown","57165a2b":"markdown","8b5fcd64":"markdown","5188f589":"markdown","118121c9":"markdown","1466e34d":"markdown","9737834f":"markdown","fdd01b08":"markdown","757ac901":"markdown","cd51b3cc":"markdown","3e571439":"markdown","09f000fd":"markdown","ee86fe32":"markdown","febfaf49":"markdown","1c519714":"markdown"},"source":{"6e6f6d40":"import pandas as pd\nimport numpy as np\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nfrom warnings import filterwarnings\nfrom sklearn.metrics import confusion_matrix, accuracy_score, classification_report, roc_auc_score, roc_curve\nfrom tensorflow.keras.models import Sequential\nfrom keras.layers import Dense, Dropout, Flatten, Conv2D, MaxPool2D, BatchNormalization,MaxPooling2D\nfrom keras import models\nfrom keras import layers\nimport tensorflow as tf\nimport os\nimport os.path\nfrom pathlib import Path\nimport cv2\nfrom tensorflow.keras.preprocessing.image import ImageDataGenerator\nfrom keras.utils.np_utils import to_categorical\nfrom sklearn.model_selection import train_test_split\nfrom keras import regularizers\nfrom keras.optimizers import RMSprop,Adam\nimport glob\nfrom PIL import Image\nfrom sklearn.preprocessing import StandardScaler\nfrom keras.preprocessing import image","b93d1259":"filterwarnings(\"ignore\",category=DeprecationWarning)\nfilterwarnings(\"ignore\", category=FutureWarning) \nfilterwarnings(\"ignore\", category=UserWarning)","d98fbb13":"Bact_Pneu_Data = Path(\"..\/input\/covid19-detection-xray-dataset\/TrainData\/BacterialPneumonia\")\nCovid_Data = Path(\"..\/input\/covid19-detection-xray-dataset\/TrainData\/COVID-19\")\nNormal_Data = Path(\"..\/input\/covid19-detection-xray-dataset\/TrainData\/Normal\")\nOver_Samp_Aug_Data = Path(\"..\/input\/covid19-detection-xray-dataset\/TrainData\/OversampledAugmentedCOVID-19\")\nViral_Pneu = Path(\"..\/input\/covid19-detection-xray-dataset\/TrainData\/ViralPneumonia\")","5230fe84":"Over_Samp_JPG_Path = list(Over_Samp_Aug_Data.glob(r\"*\/*.jpeg\"))","bf8241cf":"Covid_Path = list(Covid_Data.glob(r\"*.jpeg\"))","a198994d":"Covid_JPG_Path = []\nfor JPG_Samp_Path in Over_Samp_JPG_Path:\n    Covid_JPG_Path.append(JPG_Samp_Path)\n    \nfor JPG_Covid_Path in Covid_Path:\n    Covid_JPG_Path.append(JPG_Covid_Path)","95793092":"Bact_Pneu_JPG_Path = list(Bact_Pneu_Data.glob(r\"*.jpeg\"))\nNormal_JPG_Path = list(Normal_Data.glob(r\"*.jpeg\"))\nViral_Pneu_JPG_Path = list(Viral_Pneu.glob(r\"*.jpeg\"))","6f0b095a":"print(\"BACT_PNEU: \\n\",Bact_Pneu_JPG_Path[0:5])\nprint(\"---\"*20)\nprint(\"NORMAL: \\n\",Normal_JPG_Path[0:5])\nprint(\"---\"*20)\nprint(\"VIRAL_PNEU: \\n\",Viral_Pneu_JPG_Path[0:5])\nprint(\"---\"*20)","75899c2e":"Main_JPG_Path = []\n\nfor JPGs_Bact in Bact_Pneu_JPG_Path:\n    Main_JPG_Path.append(JPGs_Bact)\n    \nfor JPGs_Normal in Normal_JPG_Path:\n    Main_JPG_Path.append(JPGs_Normal)\n    \nfor JPGs_Viral in Viral_Pneu_JPG_Path:\n    Main_JPG_Path.append(JPGs_Viral)\n\nfor JPGs_Corona in Covid_JPG_Path:\n    Main_JPG_Path.append(JPGs_Corona)","aacd8023":"JPG_All_Labels = list(map(lambda x: os.path.split(os.path.split(x)[0])[1],Main_JPG_Path))","63ac2fc7":"print(\"BacterialPneumonia: \",JPG_All_Labels.count(\"BacterialPneumonia\"))\nprint(\"COVID-19: \",JPG_All_Labels.count(\"COVID-19\"))\nprint(\"Normal: \",JPG_All_Labels.count(\"Normal\"))\nprint(\"ViralPneumonia: \",JPG_All_Labels.count(\"ViralPneumonia\"))","ff85a16b":"Main_JPG_Path_Series = pd.Series(Main_JPG_Path,name=\"JPG\").astype(str)\nJPG_All_Labels_Series = pd.Series(JPG_All_Labels,name=\"CATEGORY\")","28ba8728":"Main_Data = pd.concat([Main_JPG_Path_Series,JPG_All_Labels_Series],axis=1)","99c9a145":"print(Main_Data.head(-1))","488f4f6c":"print(Main_Data[\"CATEGORY\"].value_counts())","33449f6e":"print(Main_Data[\"JPG\"][1])\nprint(Main_Data[\"CATEGORY\"][1])\nprint(Main_Data[\"JPG\"][1398])\nprint(Main_Data[\"CATEGORY\"][1398])\nprint(Main_Data[\"JPG\"][355])\nprint(Main_Data[\"CATEGORY\"][355])\nprint(Main_Data[\"JPG\"][710])\nprint(Main_Data[\"CATEGORY\"][710])\nprint(Main_Data[\"JPG\"][1001])\nprint(Main_Data[\"CATEGORY\"][1001])\nprint(Main_Data[\"JPG\"][1501])\nprint(Main_Data[\"CATEGORY\"][1501])\nprint(Main_Data[\"JPG\"][2033])\nprint(Main_Data[\"CATEGORY\"][2033])","196dbfa6":"Main_Data = Main_Data.sample(frac=1).reset_index(drop=True)","e832b6a5":"print(Main_Data.head(-1))","54d5083c":"figure = plt.figure(figsize=(8,8))\nsns.countplot(Main_Data[\"CATEGORY\"])\nplt.show()","458b2a67":"Main_Data['CATEGORY'].value_counts().plot.pie(figsize=(5,5))\nplt.show()","8395de28":"figure = plt.figure(figsize=(10,10))\nx = plt.imread(Main_Data[\"JPG\"][0])\nplt.imshow(x)\nplt.xlabel(x.shape)\nplt.title(Main_Data[\"CATEGORY\"][0])","d4489575":"figure = plt.figure(figsize=(10,10))\nx = plt.imread(Main_Data[\"JPG\"][1])\nplt.imshow(x)\nplt.xlabel(x.shape)\nplt.title(Main_Data[\"CATEGORY\"][1])","bbc3d7d2":"figure = plt.figure(figsize=(10,10))\nx = plt.imread(Main_Data[\"JPG\"][2078])\nplt.imshow(x)\nplt.xlabel(x.shape)\nplt.title(Main_Data[\"CATEGORY\"][2078])","b9fc69c9":"figure = plt.figure(figsize=(10,10))\nx = plt.imread(Main_Data[\"JPG\"][105])\nplt.imshow(x)\nplt.xlabel(x.shape)\nplt.title(Main_Data[\"CATEGORY\"][105])","bdf6bb96":"fig, axes = plt.subplots(nrows=5, ncols=5, figsize=(10, 10),\n                        subplot_kw={'xticks': [], 'yticks': []})\n\nfor i, ax in enumerate(axes.flat):\n    ax.imshow(plt.imread(Main_Data[\"JPG\"][i]))\n    ax.set_title(Main_Data[\"CATEGORY\"][i])\nplt.tight_layout()\nplt.show()","73b8bb86":"Train_Data,Test_Data = train_test_split(Main_Data,train_size=0.8,random_state=42,shuffle=True)","19cc9d2e":"print(Train_Data.shape)","584cb369":"print(Test_Data.shape)","2387495b":"print(Train_Data.head(-1))","f6635feb":"print(Test_Data.head(-1))","b4adaff0":"Generator = ImageDataGenerator(rescale=1.\/255,\n                              validation_split=0.1,\n                               horizontal_flip=False,\n                               featurewise_center=False,\n                                    featurewise_std_normalization=False,\n                               rotation_range=20,\n                               zoom_range=0.2,\n                               shear_range=0.2)","02f723b0":"Example_IMG = Train_Data[\"JPG\"][3]\nIMG = image.load_img(Example_IMG,target_size=(300,400))\nArray_IMG = image.img_to_array(IMG)\nArray_IMG = Array_IMG.reshape((1,)+Array_IMG.shape)\n\ni = 0\nfor BTCH in Generator.flow(Array_IMG,batch_size=1):\n    plt.figure(i)\n    IMG_Plot = plt.imshow(image.array_to_img(BTCH[0]))\n    i += 1\n    if i % 6 == 0:\n        break\nplt.show()","3a2da565":"Train_IMG_Set = Generator.flow_from_dataframe(dataframe=Train_Data,\n                                             x_col=\"JPG\",\n                                             y_col=\"CATEGORY\",\n                                             color_mode=\"rgb\",\n                                             class_mode=\"categorical\",\n                                             subset=\"training\",\n                                             batch_size=32)","54e8e497":"Validation_IMG_Set = Generator.flow_from_dataframe(dataframe=Train_Data,\n                                             x_col=\"JPG\",\n                                             y_col=\"CATEGORY\",\n                                             color_mode=\"rgb\",\n                                             class_mode=\"categorical\",\n                                             subset=\"validation\",\n                                             batch_size=32)","a763c650":"Test_Generator = ImageDataGenerator(rescale=1.\/255)","88df57e3":"Test_IMG_Set = Test_Generator.flow_from_dataframe(dataframe=Test_Data,\n                                             x_col=\"JPG\",\n                                             y_col=\"CATEGORY\",\n                                             color_mode=\"rgb\",\n                                             class_mode=\"categorical\",\n                                             batch_size=32)","5514fe88":"for data_batch,label_batch in Train_IMG_Set:\n    print(\"DATA SHAPE: \",data_batch.shape)\n    print(\"LABEL SHAPE: \",label_batch.shape)\n    break","3cc567f6":"for data_batch,label_batch in Validation_IMG_Set:\n    print(\"DATA SHAPE: \",data_batch.shape)\n    print(\"LABEL SHAPE: \",label_batch.shape)\n    break","92429820":"for data_batch,label_batch in Test_IMG_Set:\n    print(\"DATA SHAPE: \",data_batch.shape)\n    print(\"LABEL SHAPE: \",label_batch.shape)\n    break","229188ed":"print(Train_IMG_Set.class_indices)\nprint(Train_IMG_Set.classes[0:5])\nprint(Train_IMG_Set.image_shape)","66974d29":"print(Validation_IMG_Set.class_indices)\nprint(Validation_IMG_Set.classes[0:5])\nprint(Validation_IMG_Set.image_shape)","12cc112c":"print(Test_IMG_Set.class_indices)\nprint(Test_IMG_Set.classes[0:5])\nprint(Test_IMG_Set.image_shape)","b8bbc9cb":"Model = Sequential()\n\nModel.add(Conv2D(32,(5,5),activation=\"relu\",\n                 input_shape=(256,256,3),padding=\"same\",strides=(2,2)))\nModel.add(MaxPooling2D((2,2)))\n\n#\nModel.add(Conv2D(64,(3,3),\n                 activation=\"relu\",padding=\"same\",strides=(2,2)))\nModel.add(MaxPooling2D((2,2)))\n\n#\nModel.add(Conv2D(128,(2,2),\n                 activation=\"relu\",padding=\"same\",strides=(2,2)))\nModel.add(MaxPooling2D((2,2)))\n\n#\nModel.add(Flatten())\nModel.add(Dense(256,activation=\"relu\"))\nModel.add(Dropout(0.5))\nModel.add(Dense(4,activation=\"softmax\"))","df64812c":"Model.compile(optimizer=RMSprop(lr=0.001),loss=\"categorical_crossentropy\",metrics=[\"accuracy\"])","4c0e8a5e":"ANN_Model = Model.fit(Train_IMG_Set,\n                      validation_data=Validation_IMG_Set,\n                      epochs=60,batch_size=5)","e658be43":"Model_Results = Model.evaluate(Test_IMG_Set,verbose=False)\nprint(\"LOSS:  \" + \"%.4f\" % Model_Results[0])\nprint(\"ACCURACY:  \" + \"%.2f\" % Model_Results[1])","17e4115d":"print(Model.summary())","c7a5aa11":"plt.plot(ANN_Model.history[\"accuracy\"])\nplt.plot(ANN_Model.history[\"val_accuracy\"])\nplt.ylabel(\"ACCURACY\")\nplt.legend()\nplt.show()","28bf0f29":"HistoryDict = ANN_Model.history\n\nval_losses = HistoryDict[\"val_loss\"]\nval_acc = HistoryDict[\"val_accuracy\"]\nacc = HistoryDict[\"accuracy\"]\nlosses = HistoryDict[\"loss\"]\nepochs = range(1,len(val_losses)+1)","1f5578ad":"plt.plot(epochs,val_losses,\"k-\",label=\"LOSS\")\nplt.plot(epochs,val_acc,\"r\",label=\"ACCURACY\")\nplt.title(\"LOSS & ACCURACY\")\nplt.xlabel(\"EPOCH\")\nplt.ylabel(\"Loss & Acc\")\nplt.legend()\nplt.show()","ccca1ebc":"plt.plot(epochs,losses,\"k-\",label=\"LOSS\")\nplt.plot(epochs,val_losses,\"r\",label=\"LOSS VAL\")\nplt.title(\"LOSS & LOSS VAL\")\nplt.xlabel(\"EPOCH\")\nplt.ylabel(\"LOSS & LOSS VAL\")\nplt.legend()\nplt.show()","7a9e106d":"Dict_Summary = pd.DataFrame(ANN_Model.history)\nDict_Summary.plot()","13faa6db":"Model_Test_Prediction = Model.predict(Test_IMG_Set)","44ceaf0e":"Model_Test_Prediction = Model_Test_Prediction.argmax(axis=-1)","87bc3f11":"print(Model_Test_Prediction)","d21b509d":"plt.style.use('dark_background')\nfig, axes = plt.subplots(nrows=5,\n                         ncols=5,\n                         figsize=(20, 20),\n                        subplot_kw={'xticks': [], 'yticks': []})\n\nfor i, ax in enumerate(axes.flat):\n    ax.imshow(plt.imread(Test_Data[\"JPG\"].iloc[i]))\n    ax.set_title(f\"PREDICTION:{Model_Test_Prediction[i]}\")\nplt.tight_layout()\nplt.show()","97342911":"Any_IMG = Train_Data[\"JPG\"][6]\nIMG = image.load_img(Any_IMG,target_size=(256,256))\nArray_IMG = image.img_to_array(IMG)\nArray_IMG = np.expand_dims(Array_IMG,axis=0)\nArray_IMG \/= 255","82a4f37b":"plt.imshow(Array_IMG[0])\nplt.show()","dfe1df1e":"layer_out = [layer.output for layer in Model.layers[:8]]","b6675043":"activation_model = models.Model(inputs=Model.input,outputs=layer_out)","c6892c06":"activations = activation_model.predict(Array_IMG)","4522d359":"first_layer_act = activations[0]\nprint(first_layer_act.shape)","859aa5ff":"plt.matshow(first_layer_act[0,:,:,4],cmap=\"viridis\")","eef608e3":"plt.matshow(first_layer_act[0,:,:,7],cmap=\"viridis\")","9487d150":"plt.matshow(first_layer_act[0,:,:,1],cmap=\"viridis\")","9b52e990":"plt.matshow(first_layer_act[0,:,:,18],cmap=\"viridis\")","063299ca":"plt.matshow(first_layer_act[0,:,:,31],cmap=\"viridis\")","3f3707f3":"plt.matshow(first_layer_act[0,:10,:10,7],cmap=\"viridis\")","f8ed1d28":"plt.matshow(first_layer_act[0,:5,:5,14],cmap=\"viridis\")","18af9b50":"New_Img_Path = \"..\/input\/covid19-detection-xray-dataset\/ValData\/COVID-19\/3.jpeg\"\nIMG_Load = image.load_img(New_Img_Path,target_size=(256,256))","5e0732d7":"N_IMG_Array = image.img_to_array(IMG_Load)","d94fb082":"print(N_IMG_Array.shape)","5ffd1c0c":"N_IMG_Array = np.expand_dims(N_IMG_Array,axis=0)","a177a0e5":"print(N_IMG_Array)","35d98329":"New_Predict = Model.predict(N_IMG_Array)","3669c013":"print(New_Predict)","071b8224":"print(New_Predict.argmax(axis=-1))","09f212dc":"**Generator Applied Image Example**","8ca48046":"# SPESIFIC PREDICTION","429bc761":"#### COMBINING COVID JPG","57165a2b":"#### TRANSFORMATION TO DATAFRAME","8b5fcd64":"#### PATH","5188f589":"#### SHUFFLING","118121c9":"#### SPLITTING","1466e34d":"# CNN","9737834f":"# PACKAGES AND LIBRARIES","fdd01b08":"#### LEARNING IN LAYERS","757ac901":"# DETERMINATION TRAIN, TEST AND VALIDATION DATA","cd51b3cc":"#### STRUCTURE","3e571439":"# VISUALIZATION","09f000fd":"#### IGNORING WARNINGS","ee86fe32":"#### PATH LIST AND LABELS","febfaf49":"# PATH & DATA PROCESS","1c519714":"#### IMAGE GENERATOR"}}