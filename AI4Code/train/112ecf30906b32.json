{"cell_type":{"0fb2f066":"code","68d8d286":"code","bd15cf60":"code","29a4b1a6":"code","bc184ef8":"code","bd052b05":"code","8f83593d":"code","1ab83e58":"code","9b836529":"code","a7eff928":"code","c155f032":"code","848c542b":"code","844d5c23":"code","2d6f811c":"code","e446186e":"code","8e2c0555":"code","4abbadf3":"code","b4677072":"code","0e2d0f2c":"code","26f26b4e":"code","9864cb3f":"code","c0f99e61":"code","5a5afa5b":"code","691ea661":"code","b4679c93":"code","f84fa518":"code","735b3ce1":"code","bcd6acc2":"code","4908aba3":"code","3c071501":"code","97be06d0":"code","a3da68e8":"code","d07c7839":"code","092f0080":"code","80f159c4":"code","dce5e816":"code","8870a060":"code","5398f937":"code","f9ea8977":"code","bb375656":"code","7d31a7e4":"code","334bc26b":"code","7526b483":"code","14ce695e":"code","5629c15a":"code","86e74b37":"code","4705e914":"code","3a228310":"code","53f05fd2":"code","57582c97":"code","6443f99f":"code","009ec319":"code","a2ef61c2":"code","9880f510":"code","96c213a5":"code","cb9145f4":"code","ae20edd0":"code","4abb1a59":"code","83b6d2b4":"code","73c1c66f":"code","ddceee1b":"code","e749388a":"code","e874df1b":"code","a5550e69":"code","a14e511f":"code","d794d8f0":"code","1acfcc30":"code","4252437b":"code","a00fd667":"code","15016699":"code","753723f4":"code","0aa5dd26":"code","4f08f4fa":"code","eeac03bc":"code","00de6c1a":"code","84cb4bc3":"code","f8ffe951":"code","9ffbee5c":"markdown","396fc4c7":"markdown","41884496":"markdown","9c9e4cf1":"markdown","10514e99":"markdown","0c877649":"markdown","52ef90f4":"markdown","7c78d6d7":"markdown","57bbade3":"markdown","8817df7c":"markdown","73be294a":"markdown","6de36132":"markdown","b34495b6":"markdown","3ce21a24":"markdown","daad5c41":"markdown","56969c45":"markdown","6a6332ad":"markdown","338271e4":"markdown","65be3495":"markdown","5245b210":"markdown","3e90a471":"markdown","0596d837":"markdown","ce6ad956":"markdown","a4bd7967":"markdown","040fb074":"markdown","4d49c57a":"markdown","efd9684c":"markdown","07fab46b":"markdown","d24fa076":"markdown","1e5caad0":"markdown","314cac49":"markdown","d72ad027":"markdown","b074a004":"markdown","08c48e44":"markdown","a644ed65":"markdown","dbac701f":"markdown","aaa20a15":"markdown","dc878564":"markdown","da079db4":"markdown","5ab1b2cd":"markdown","4710fb97":"markdown","0d8d913b":"markdown","55beee5a":"markdown","76f14f8a":"markdown","dfde41c1":"markdown","4baba579":"markdown","6b1d5f7e":"markdown"},"source":{"0fb2f066":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom datetime import datetime\n%matplotlib inline","68d8d286":"# Load CSV and create a dataframe df\ndf = pd.read_csv('..\/input\/noshowappointments\/KaggleV2-May-2016.csv')","bd15cf60":"# no of samples and columns in the dataset\ndf.shape","29a4b1a6":"# Datatypes of columns\ndf.info()","bc184ef8":"# initial look at the data\ndf.head(5)","bd052b05":"# gather descriptive statistics about data\ndf.describe()","8f83593d":"# finding duplicate rows in the dataset\ndf.duplicated().sum()","1ab83e58":"# looking at unique count in columns\ndf.nunique()","9b836529":"# Checking for any outliers in age\ndf['Age'].unique()","a7eff928":"# checking Neighbourhood\ndf['Neighbourhood'].unique()","c155f032":"# unique values in Gender and Scholarship\nprint(\"Gender: {} Scholarship: {}\".format(df['Gender'].unique(), df['Scholarship'].unique()))","848c542b":"# unique values in Hipertension and Diabetes\nprint(\"Hipertension: {} Diabetes: {}\".format(df['Hipertension'].unique(), df['Diabetes'].unique()))","844d5c23":"# unique values in Alcoholism and Handcap\nprint(\"Alcoholism: {} Handcap: {}\".format(df['Alcoholism'].unique(), df['Handcap'].unique()))","2d6f811c":"# unique values SMS_received and No-show\nprint(\"SMS_received: {} No-show: {}\".format(df['SMS_received'].unique(), df['No-show'].unique()))","e446186e":"# rename Handcap to Handicap, Hipertension to Hypertension and No-show to No_show\ndf = df.rename(columns = {'Handcap': 'Handicap', 'Hipertension': 'Hypertension','No-show': 'No_show'})","8e2c0555":"# check the columns are renamed\ndf.head(1)","4abbadf3":"# Patientid and AppointmentID columns are not used for analysis\ndf.drop(['PatientId', 'AppointmentID'], axis=1, inplace=True)","b4677072":"# confirm the columns are dropped\ndf.head(1)","0e2d0f2c":"# find number of rows where Age is between 0 and 100 (both inclusive) \nlen(df.query(\"Age >=0 and Age <=100\")), len(df)","26f26b4e":"# drop ouliers in data\ndf = df.query(\"Age >=0 and Age <=100\")","9864cb3f":"# check the rows are removed\nlen(df.query(\"Age < 0 and Age > 100\"))","c0f99e61":"# define a function to extract date\n# function returns date object from datetime data passed as argument\ndef extract_date(d):\n    return pd.to_datetime(d).date()","5a5afa5b":"# extract date from ScheduledDay keeping same yyyy-MM-dd date format\ndf['ScheduledDay'] = df['ScheduledDay'].apply(extract_date)","691ea661":"# extract date from AppointmentDay\ndf['AppointmentDay'] = df['AppointmentDay'].apply(extract_date)","b4679c93":"df.head(1)","f84fa518":"df.dtypes","735b3ce1":"# convert object to datetime for ScheduleDay\ndf['ScheduledDay'] = pd.to_datetime(df['ScheduledDay'])","bcd6acc2":"# convert object to datetime for AppointmentDay\ndf['AppointmentDay'] = pd.to_datetime(df['AppointmentDay'])","4908aba3":"# verify both columns ScheduledDay and AppointmentDay are of type datetime\ndf.info()","3c071501":"# check if scheduled date is after appointment date\noutliers_date = (df['AppointmentDay'] - df['ScheduledDay']).dt.days","97be06d0":"# extract only outliers rows where date is < 0\noutliers_date = outliers_date[outliers_date < 0]","a3da68e8":"# find size and row indexes\noutliers_date.index, outliers_date.index.size","d07c7839":"# removing 5 rows as they're treated as outliers or human error\ndf.drop(outliers_date.index, inplace=True)","092f0080":"df.shape","80f159c4":"# count of each value in Handicap Data\ndf.Handicap.value_counts()","dce5e816":"# converting [1,2,3,4] to 1 \ndf['Handicap'] = (df.Handicap > 0).astype(np.int)","8870a060":"# count values to confirm numbers match\ndf.Handicap.value_counts()","5398f937":"# calculating diffrence and converting to number of days\ndf['Waiting_Time'] = (df['AppointmentDay'] - df['ScheduledDay']).dt.days","f9ea8977":"# verify Waiting_Time doesn't contains any negative values.\ndf['Waiting_Time'].min(), df['Waiting_Time'].max()","bb375656":"# check new column Waiting_Time is created \ndf.head()","7d31a7e4":"# create weekday dictionary for mapping numeric to weekday\nmapDayOfWeek={0:'Monday', 1:'Tuesday', 2:'Wednesday', 3:'Thursday', 4:'Friday', 5:'Saturday', 6:'Sunday'}","334bc26b":"# create new column Weekday to store weekday\ndf['Weekday'] = df['AppointmentDay'].dt.dayofweek.map(mapDayOfWeek)","7526b483":"# check the new column Weekday is created with correct values\ndf.head(1)","14ce695e":"df.shape","5629c15a":"# Bin edges that will be used to \"cut\" the data into groups\n# we're dividing the waiting time into 5 groups based on number of days (waiting time)\nbin_edges = [-1, 0, 7, 30, 90, 180 ]","86e74b37":"# create bin names\nbin_names = ['same day', '1 week', '1 month', '3 months', '6 months+']","4705e914":"# create column Waiting_Period\ndf['Waiting_Period'] = pd.cut(df['Waiting_Time'], bin_edges, labels=bin_names)","3a228310":"# verify Waiting_Period created\ndf.head(1)","53f05fd2":"# Data distribution of numeric data\ndf.hist(figsize=(10,10));","57582c97":"# Patient appointments by Gender\nax = df['Gender'].value_counts().plot(kind='bar');\nax.set_title('Appointments for Female\/Male' )\nax.set_xticklabels(['Female', 'Male'], rotation=0);\nax.set_xlabel('Gender')\nax.set_ylabel('Count')\nplt.show;","6443f99f":"# lets see the distribution of Waiting_Period\nax = df.Waiting_Period.hist();\nax.set_title('Waiting Periods')\nax.set_xlabel('Waiting Period')\nax.set_ylabel('Count')\nplt.show;","009ec319":"# declare the sort order for weekdays\nweek_order = ['Monday','Tuesday','Wednesday','Thursday','Friday','Saturday','Sunday']","a2ef61c2":"# Weekday plot against show\/No Show\nplt.figure(figsize=(12,5))\nax = sns.countplot(x=df.Weekday, hue=df.No_show, order = week_order)\nax.set_title(\"Show\/NoShow on Weekdays\")\nplt.show()","9880f510":"# count plot for patients having Hypertension\nax = df['Hypertension'].value_counts().plot(kind='bar', title='Patients with Hypertenstion');\nax.set_xticklabels(['No', 'Yes'], rotation=0);\nax.set_xlabel('Hypertension')\nax.set_ylabel('Count')\nplt.show;","96c213a5":"# count plot for SMS received\nax = df['SMS_received'].value_counts().plot(kind='bar', title='SMS Received By Patients');\nax.set_xticklabels(['No', 'Yes'], rotation=0);\nax.set_xlabel('SMS received')\nax.set_ylabel('Count')\nplt.show;","cb9145f4":"# get counts by Gender type\ndf['Gender'].value_counts()","ae20edd0":"# check the count for each Gender for show\/no_show\npd.crosstab(df.Gender, df.No_show, margins=True, margins_name=\"Total\")","4abb1a59":"# Let's plot Show\/No_Show appointments for Males and Females\nax = sns.countplot(x=df.Gender, hue=df.No_show, data=df)\nax.set_xticklabels(['Female', 'Male'])\nax.set_title('Show\/No Show for Males and Females')\nplt.show()","83b6d2b4":"# let's check the proportion of Females for No show\ndf.query(\"Gender == 'F' and No_show == 'Yes'\").size \/ df.query(\"Gender == 'F'\").size","73c1c66f":"# let's check the proportion of Males for No show\ndf.query(\"Gender == 'M' and No_show == 'Yes'\").size \/ df.query(\"Gender == 'M'\").size","ddceee1b":"# let's look at the count of patients making appointments w.r.t Age\nax = df.Age.value_counts().plot(kind='bar', figsize=(18,5));\nax.set_title('Appointments By Age')\nax.set_xlabel('Age')\nax.set_ylabel('Count')\nplt.show();","e749388a":"# check the count for top 5 Age visitors\ndf.Age.value_counts().nlargest(5)","e874df1b":"# Let's plot Age with Show\/NoShow\nplt.figure(figsize=(18,5))\nax = sns.countplot(x=df.Age, hue=df.No_show)\nax.set_title(\"Show\/NoShow Appointments by Age\")\nplt.show()","a5550e69":"# let's check the proportion of Age with 'no show'(Do not show for appointments)\nno_show_prop = df.query(\"No_show == 'Yes'\").groupby(['Age']).size() \/ df.groupby(['Age']).size()","a14e511f":"# let's check the proportion of Age who showed up for appointments\nshow_prop = df.query(\"No_show == 'No'\").groupby(['Age']).size()\/df.groupby(['Age']).size()","d794d8f0":"df_age_prop = pd.DataFrame({'Show': show_prop,'No Show': no_show_prop})\nax = df_age_prop.plot.line()\nax.set_title('Show\/No Show Comparison By Age')\nax.set_xlabel('Age')\nax.set_ylabel('Count')\nplt.show();","1acfcc30":"# check the counts for Waiting_Period for show\/no_show\npd.crosstab(df.Waiting_Period, df.No_show, margins=True, margins_name=\"Total\")","4252437b":"# plot waiting period against Show\/No Show\nplt.figure(figsize=(12,5))\nax = sns.countplot(x=df.Waiting_Period, hue=df.No_show)\nax.set_title(\"Show\/NoShow Waiting Period\")\nax.set_xlabel('Waiting Period')\nplt.show();","a00fd667":"# calculate percentage Waiting Period for Patients who showed up\nshow_wtg_prop = df.query(\"No_show == 'No'\").groupby(['Waiting_Period']).size()\/df.groupby(['Waiting_Period']).size()","15016699":"# calculate percentage Waiting Period for Patients who DO NOT show up\nno_show_wtg_prop = df.query(\"No_show == 'Yes'\").groupby(['Waiting_Period']).size()\/df.groupby(['Waiting_Period']).size()","753723f4":"# Let's plot both to get a pattern \ndf_wtg_prop = pd.DataFrame({'Show': show_wtg_prop,'No Show': no_show_wtg_prop})\nax = df_wtg_prop.plot.line()\nax.set_title('Show\/NoShow Waiting Period')\nax.set_xlabel('Waiting Period')\nax.set_ylabel('Count')\nplt.show();","0aa5dd26":"no_show_wk_prop = df.query(\"No_show == 'Yes'\").groupby(['Weekday']).size()\/df.groupby(['Weekday']).size()","4f08f4fa":"no_show_wk_prop.sort_values(ascending=False)","eeac03bc":"# Let's check the percentage of Hypertension Patients with show\/No_show\npd.crosstab(df.Hypertension, df.No_show, normalize = \"index\")","00de6c1a":"ax = pd.crosstab(df.Hypertension, df.No_show, normalize = \"index\").plot(kind='bar', title='Show\/No Show with Hypertension');\nax.set_xticklabels(['No', 'Yes'], rotation=0);\nax.set_xlabel('Hypertension')\nax.set_ylabel('Ratio')\nplt.show();","84cb4bc3":"# lets check the proportion of SMS received with Show\/No Show\npd.crosstab(df.SMS_received, df.No_show, normalize = \"index\")","f8ffe951":"ax = pd.crosstab(df.SMS_received, df.No_show, normalize = \"index\").plot(kind='bar');\nax.set_xticklabels(['No', 'Yes'], rotation=0);\nax.set_title('SMS Received By Patients')\nax.set_xlabel('SMS Received')\nax.set_ylabel('Ratio')\nplt.show();","9ffbee5c":"Some of the hospital names like 'S\u00c3O CRIST\u00d3V\u00c3O' contains special character but we don't need to treat them specially for our analysis","396fc4c7":"### 1. Cleaning Column Labels","41884496":"#### Observation:\n- Both Females and Males have same proportion of 'No show' approx 20%.\n- There's no clear trend that a specific Gender would show up for an appointment.","9c9e4cf1":"### Basic information about Data","10514e99":"## Limitations\n1. AppointmentDay time is set to 00:00:00Z which is not very useful to analyze waiting time with respect to hours. It makes ScheduledDay time irrelevant as well. Had there been time available for AppointmentDay, we would know the time interval between ScheduledDay and AppointmentDay for same day appointments.\n2. Handicap values as per documentation are True\/False, but actual values found to be in range of 0 to 4. Looks like such values represents level of disability of a patient. Moreover, no more information is provided.","0c877649":"### Exploring Categorical Variables","52ef90f4":"<a id='intro'><\/a>\n## Introduction\n\nThis dataset collects information from 100k medical appointments in Brazil and is focused on the question of whether or not patients show up for their appointment.\n\n## Questions\n1. Is Gender a significant variable to predict if a patient will show up for their scheduled appointment?\n \n2. Are patients from a  particular age group tends to skip the medical appointments?\n \n3. Waiting time influences patients not to show up?\n\n4. Is there a weekday pattern where people do not show up for appointments?\n \n5. Does Hypertension prevents patients to attend appointments?\n \n6. The patients who receives SMS turn up more than the ones who didn't?","7c78d6d7":"### 7. Correct Handicap Data values","57bbade3":"Above graph shows Females are almost frequeent visitors than Males. The percentage of Female Vs Male is 65\/35.","8817df7c":"### Initial Data Summary\n- The data has total 110527 rows with 14 columns.\n- There are 13 independent variables and 1 dependednt variable No-show.\n- The average age of the Patient is around 37 yrs\n- Very few people have scholarships.\n- Approx 20% of the Patients have Hypertension but others like Diabetes, Alcoholism is very low","73be294a":"# Project: Investigate Medical Dataset for No Show Appointments\n\n## Table of Contents\n<ul>\n<li><a href=\"#intro\">Introduction<\/a><\/li>\n<li><a href=\"#wrangling\">Data Wrangling<\/a><\/li>\n<li><a href=\"#eda\">Exploratory Data Analysis<\/a><\/li>\n<li><a href=\"#conclusions\">Conclusions<\/a><\/li>\n<\/ul>","6de36132":"#### 8.3 Create Waiting_Period that categorizes time","b34495b6":"### 5. Convert datatype of ScheduledDay and AppointmentDay to datetime.","3ce21a24":"#### Observation:\n- New born babies and small children are the most frequent visitors. \n- There's a decrease in hospital visits among older population after 60.","daad5c41":"### Load data","56969c45":"Most appointments are scheduled on same day.","6a6332ad":"## Q2. Are patients from a particular age group tends to skip the medical appointments?","338271e4":"# Drawing Conclusions","65be3495":"The proportion of show\/No show is not very significant throughout the week and there's no clear pattern emerging out of weekday data.","5245b210":"#### 8.2 Extracting Weekday from date","3e90a471":"#### Observation: \n- The pateints who received SMS has lower show-up percentage than the ones who received it. \n- This is negative trend and looks like sending SMS to patients as a reminder is not helping much.","0596d837":"Since value = 0 has a count 108285, it's safe to assume other values [1,2,3,4] indicates the patient is Handicap. We need to convert  [1,2,3,4] to 1.","ce6ad956":"### 8. Feature Extraction","a4bd7967":"<a id='eda'><\/a>\n## Exploratory Data Analysis","040fb074":"### 2. Drop columns","4d49c57a":"### Observation about data\n1. Few columns like Handcap, Hipertension and No-show are misspelled and not consistent with other column names\n2. PatientId and AppointmentID are not relevant to our analysis and needs to be dropped.\n3. Minimum Age is -1 and Maximum age = 115 indicates there's human data error that needs further investigation.\n4. Extract Date from ScheduledDay and AppointmentDay Columns\n5. Convert datatype of ScheduledDay and AppointmentDay to datetime.\n6. Need to find any outliers present in ScheduledDay and AppointmentDay where AppointmentDay is before ScheduledDay.\n7. Correct Handicap Data values\n8. We need to extract features like Waiting_Time, Weekday and Waiting_Periods which would be useful to answer few questions.","efd9684c":"### 4. Extract Date from ScheduledDay and AppointmentDay Columns","07fab46b":"### 3. Remove outliers","d24fa076":"As seen above, there are more appointments at the start of the week than weekend.","1e5caad0":"#### Observation:\n- Patients prefer same day appointments. \n- As the waiting period gets higher patients tend to miss appointments .","314cac49":"Note: As per the original Kaggle documentation https:\/\/www.kaggle.com\/joniarroba\/noshowappointments Handcap has only 2 values True or False. Something to take care during data cleanup. ","d72ad027":"### Question 4. Is there a weekday pattern where people do not show up for appointments?","b074a004":"Found Age = -1 and max = 115 that looks like human error. This value must be removed during data cleanup.","08c48e44":"<a id='wrangling'><\/a>\n## Data Wrangling","a644ed65":"### General Observation \n1. As per Age distrribution young and middle age patients are more as compared to old age.\n2. Most people are not Handicap or Alcoholic or have diabetes.\n3. Almost 20% of the patients have Hypertension and it would be interesting to combine with other categorical variables\n4. Approx 35% of people receives SMS about appointment.\n5. The waiting time is quite less for most of the appointment.","dbac701f":"### 6. Finding outlier in ScheduledDay and AppointmentDay Data","aaa20a15":"### Question 5. Hypertension prevents patients to attend appointments?","dc878564":"### Q1.  Is Gender a significant variable to predict if a patient will show up for their scheduled appointment?","da079db4":"#### Observation:\n- 17% of Patients who missed the appointments have Hypertension.\n- 80 % of Pateints with Hypertension do show up for the appointment.","5ab1b2cd":"#### 8.1 Waiting_Time in days - calculate difference of AppointmentDay and ScheduledDay","4710fb97":"### Q3. Waiting time influences patients not to show up?\n","0d8d913b":"- Almost 20 % of the patients have Hypertension.","55beee5a":"### Question 6. The patients who receives SMS turn up more than the ones who didn't?","76f14f8a":"No duplicated row found in data","dfde41c1":"- Around 32% of Patients have received SMS reminders","4baba579":"#### Observations:\n- Show -> Around 80% of all Age group show up for the appointments.\n- No Show -> There's an increase in trend among very young population and upto 15 yrs of age. \n   This increase in trend starts declining after 20 yrs of age and continues for old age patients.","6b1d5f7e":"<a id='conclusions'><\/a>\n## Conclusions\n1. Parents of new born babies and Infants tend to miss appointments more than old age Patients\n2. Patients prefer Same Day appointment. With increase in waiting time, this percentage decreases.\n3. Other factors like Gender, Hypertension, Weekday, SMS Received are not important. \n\n### Hence based on analysis, we could conclude that Age and Same Day appointments are important factors to predict if patient will show up for their scheduled appointment. "}}