{"cell_type":{"0ff41d98":"code","0dd587e1":"code","5e0a64d8":"code","8d7777f7":"code","507ea1b0":"code","58ede335":"code","6280377b":"code","31950fb4":"code","3ff24abf":"code","39f06b52":"code","17873d7b":"markdown","0d9ef268":"markdown","19afd671":"markdown","95bd9c26":"markdown","6b188112":"markdown","fd684378":"markdown","d447720a":"markdown"},"source":{"0ff41d98":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","0dd587e1":"# Importing required python modules\n\nimport matplotlib.pyplot as plt\nfrom sklearn import datasets, neighbors\nfrom matplotlib.colors import ListedColormap\nfrom sklearn import metrics\n\nimport warnings\nwarnings.filterwarnings(\"ignore\")","5e0a64d8":"# having light colors haxcode\ncmap_light = ListedColormap(['#FF6161','#00807B']) \n\n# having above matching shades of dark colors\ncmap_bold = ListedColormap(['#F50000','#00B8B1'])","8d7777f7":"def kNN_visual_comparison(data,n_neighbors):\n    X = data[:,:2]\n    y = data[:,2]  \n    '''\n    k-NN Classifier\n    '''\n    knn_clf = neighbors.KNeighborsClassifier(n_neighbors=n_neighbors)\n    knn_clf.fit(X,y)\n    '''\n    mesh grid with grid_space = 0.02\n    '''\n    grid_space = .02\n    x_min,x_max = X[:,0].min()-1, X[:,0].max()+1 \n    y_min,y_max = X[:,1].min()-1,X[:,1].max()+1 \n    xx, yy = np.meshgrid(np.arange(x_min,x_max,grid_space),np.arange(y_min,y_max,grid_space))\n    \n    ''' \n    predicting value of each element in grid\n    '''\n    value_each_elem_of_grid = knn_clf.predict(np.c_[xx.ravel(),yy.ravel()])\n    value_each_elem_of_grid = value_each_elem_of_grid.reshape(xx.shape)\n    \n    '''\n    ploting descision boudries\n    '''\n    plt.figure(figsize=(18,8))\n    plt.pcolormesh(xx,yy,value_each_elem_of_grid,cmap=cmap_light)\n    plt.scatter(X[:,0],X[:,1],c=y,cmap=cmap_bold)\n    plt.xlim(xx.min(),xx.max())\n    plt.ylim(yy.min(),yy.max())\n    plt.title('K values = '+str(n_neighbors))\n    plt.show()","507ea1b0":"data6 = np.genfromtxt('\/kaggle\/input\/knn-dataset\/knn-data\/6.overlap.csv',delimiter=',')\ndata7 = np.genfromtxt('\/kaggle\/input\/knn-dataset\/knn-data\/7.xor.csv',delimiter=',')\ndata8 = np.genfromtxt('\/kaggle\/input\/knn-dataset\/knn-data\/8.twospirals.csv',delimiter=',')\ndata9 = np.genfromtxt('\/kaggle\/input\/knn-dataset\/knn-data\/9.random.csv',delimiter=',')","58ede335":"# n_neighbors\nk = [1,5,20,30,50]","6280377b":"# using kNN_visual_comparison function on above loaded data with k values as 1,5,20,30 and 50\nfor neighbor in k:\n    kNN_visual_comparison(data6,n_neighbors=neighbor)","31950fb4":"# using kNN_visual_comparison function on above loaded data with k values as 1,5,20,30 and 50\nfor neighbor in k:\n    kNN_visual_comparison(data7,n_neighbors=neighbor)","3ff24abf":"# using kNN_visual_comparison function on above loaded data with k values as 1,5,20,30 and 50\nfor neighbor in k:\n    kNN_visual_comparison(data8,n_neighbors=neighbor)","39f06b52":"# using kNN_visual_comparison function on above loaded data with k values as 1,5,20,30 and 50\nfor neighbor in k:\n    kNN_visual_comparison(data9,n_neighbors=neighbor)","17873d7b":"# For data8","0d9ef268":"# Observation\nObserve every image carefully again, you will see that `boundary becomes smoother with increasing value of K`\n* If `K increasing to infinity` image finally becomes all blue or all red depending on total majority\n* `Training Error Rate` and `Validation Error Rate` are two parameters,One need to access different K-value\n    * this is how one can select best suitable k value for the given problem statement","19afd671":"# Function\nThis Fucntion can be used on different dataset","95bd9c26":"# For data6","6b188112":"# For data7","fd684378":"# For data9","d447720a":"`This is second notebook for k-NN`\n\n# [First-Notebook](https:\/\/www.kaggle.com\/mukeshmanral\/k-nn-algorithm-1-basic\/edit)"}}