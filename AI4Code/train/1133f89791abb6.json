{"cell_type":{"783f1c81":"code","21b32cfa":"code","b2990750":"code","f49d7d5b":"code","ed5ebe12":"code","3c607874":"code","5fe89a58":"markdown","70f402ff":"markdown","1639301f":"markdown","07dce5f1":"markdown","7b9c5f7f":"markdown"},"source":{"783f1c81":"quantile0 =  5#@param [\"2\", \"4\", \"10\", \"5\"] {type:\"raw\", allow-input: true}\nvar_pred0 = \"mod_corte\" #@param [\"mod_coron\", \"mod_corte\", \"spd_o_coron\", \"spd_o_corte\", \"wind_gust_corte\", \"wind_gust_coron\"]\nvar_obs0 = \"spd_o_corte\" #@param [\"spd_o_corte\", \"spd_o_coron\", \"gust_spd_o_corte\", \"gust_spd_o_coron\"]\n!pip install simplekml\nimport numpy as np \nimport pandas as pd\nimport matplotlib.pyplot as plt\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import confusion_matrix ,classification_report \nfrom sklearn.model_selection import cross_val_score,cross_validate\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.ensemble import RandomForestClassifier\nimport seaborn as sns\nfrom sklearn import tree\nimport graphviz\nimport pickle\nimport simplekml\nimport datetime\nfrom datetime import timedelta\nfrom urllib.request import urlretrieve\nimport urllib.request\nimport xarray as xr\n\ndef wind_speed_class_test(q,spd_pred,spd_obs,w_df):\n    \n    \"\"\"\n    Convert wind velocity in labels above a wind intensity forecast and compare\n    wind direction observed plot results as a crosstabulation\n    \n    parameters:\n    \n    \n    q=Number of quantiles\n    spd_pred=column from the dataframe (w_df) where the wind is predicted;\n    spd_obs:column from the dataframe (w_df) where the wind is observed; \n    w_df=dataframe where all columns are \"\"\"\n    \n    \n        \n    #first q cut observed variable then cut predicted with the bins obtained at qcut\n    w_df[spd_obs+\"_l\"]=pd.qcut(w_df[spd_obs], q, retbins = False,precision=1)\n    interval=pd.qcut(w_df[spd_obs], q,retbins = True,precision=1)[0].cat.categories\n    w_df[spd_pred+\"_l\"]=pd.cut(w_df[spd_pred],bins = interval)\n    \n    \n    #plot results\n    table=pd.crosstab(w_df[spd_obs+\"_l\"], w_df[spd_pred+\"_l\"], margins=True,)\n    table_columns=pd.crosstab(w_df[spd_obs+\"_l\"], w_df[spd_pred+\"_l\"], margins=True,normalize=\"columns\")\n    table_index=pd.crosstab(w_df[spd_obs+\"_l\"], w_df[spd_pred+\"_l\"], margins=True,normalize=\"index\")\n    \n    fig, axs = plt.subplots(3,figsize = (8,10))\n    sns.heatmap(table,annot=True,ax=axs[0],cmap=\"YlGnBu\",fmt='.0f',)\n    sns.heatmap(table_columns,annot=True,ax=axs[1],cmap=\"YlGnBu\",fmt='.0%')\n    sns.heatmap(table_index,annot=True,ax=axs[2],cmap=\"YlGnBu\",fmt=\".0%\")\n    plt.show()\n\ndef class_report  (q,spd_pred,spd_obs,w_df):\n    \n    \"\"\"\n    Convert wind velocity in quantiles and compare\n    wind velocity plot results: precision,recall, accuracy and f1 \n    \n    parameters:\n    q=Number of quantiles\n    spd_pred=column from the dataframe (w_df) where the wind is predicted;\n    spd_obs:column from the dataframe (w_df) where the wind is observed; \n    w_df=dataframe where all columns are \n    \n   \"\"\"\n    #first q cut observed variable then cut predicted with the bins obtained at qcut\n    w_df[spd_obs+\"_l\"]=pd.qcut(w_df[spd_obs], q, retbins = False,precision=1).astype(str)\n    interval=pd.qcut(w_df[spd_obs], q,retbins = True,precision=1)[0].cat.categories\n    w_df[spd_pred+\"_l\"]=pd.cut(w_df[spd_pred],bins = interval).astype(str)\n        \n    \n    #classification report\n    #nan (=velocity predicted more than the hight velocity observed)\n    #transform labels as string type\n    \n    print(classification_report(w_df[spd_obs+\"_l\"],w_df[spd_pred+\"_l\"]))\n  \n\n\n\n\n  \n\ncoron=pd.read_csv('\/kaggle\/input\/wind-coron\/coron_all.csv',parse_dates=[\"time\"]).set_index(\"time\")\ncortegada=pd.read_csv('\/kaggle\/input\/wind-coron\/cortegada_all.csv',parse_dates=[\"time\"]).set_index(\"time\")\njoin = cortegada.join(coron, lsuffix='_corte', rsuffix='_coron').dropna()\nclass_report(quantile0,var_pred0,var_obs0,join)\nwind_speed_class_test(quantile0,var_pred0,var_obs0,join)\n","21b32cfa":"#@title Load or train model. If load, same quantile and var_pred1\nquantile1 =  5#@param [\"2\", \"4\", \"10\", \"5\"] {type:\"raw\", allow-input: true}\nvar_pred1 =  ['mod_coron', 'wind_gust_coron','mod_corte', 'wind_gust_corte'] #@param [\"['mod_coron', 'wind_gust_coron','mod_corte', 'wind_gust_corte']\", \"['mod_coron', 'wind_gust_coron']\", \"['mod_corte', 'wind_gust_corte']\", \"['gust_spd_o_coron', 'spd_o_coron' ]\", \"['gust_spd_o_corte', 'spd_o_corte' ]\"] {type:\"raw\"}\nvar_obs1 = \"spd_o_corte\" #@param [\"spd_o_corte\", \"spd_o_coron\", \"gust_spd_o_corte\", \"gust_spd_o_coron\", \"std_spd_o_corte\", \"std_spd_o_coron\"]\nmax_depth=5#@param [\"2\", \"5\", \"10\", \"15\"] {type:\"raw\", allow-input: true}\ncriterion = \"entropy\" #@param [\"gini\", \"entropy\"]\ntrain= True #@param {type:\"boolean\"}\nfilename_in = \"\/kaggle\/input\/wind-coron\/tree.h5\" #@param [\"\/kaggle\/input\/wind-coron\/tree.h5\"] {type:\"raw\", allow-input: true}\nfilename_out = \"tree2.h5\" #@param [\"tree2.h5\"\"] {type:\"raw\", allow-input: true}\n\n\n#cut in bins==wind quadrants exemple\nY=pd.qcut(join[var_obs1], quantile1, retbins = False,precision=1).astype(str)\nlabels=pd.qcut(join[var_obs1], quantile1,retbins = True,precision=1)[0].cat.categories.astype(str)\n#independent variables. Also observed variables!! if you wish\nX=join[var_pred1]\n\n\n#we do not scale!!\nx_train, x_test, y_train, y_test = train_test_split(X,Y, test_size=0.2,)\n\n#select classification\n#train and save as tree2 or load tree\nif train:\n  clf1 = DecisionTreeClassifier(max_depth=max_depth,criterion=criterion).fit(x_train,y_train) \n  pickle.dump(clf1, open(filename_out, 'wb'))\nelse:\n  #model loaded must have same X variables and q\n  clf1 = pickle.load(open(filename_in, 'rb'))\n\ny_pred=clf1.predict(x_test)\n\n#plot results\nprint(classification_report(y_test,y_pred))\ny_pred_df=pd.DataFrame({\"var_pred\":y_pred},index=y_test.index)\n\n#plot results\ntable=pd.crosstab(y_test,y_pred_df[\"var_pred\"], margins=True,)\ntable_columns1=pd.crosstab(y_test,y_pred_df[\"var_pred\"], margins=True,normalize=\"columns\")\ntable_index=pd.crosstab(y_test,y_pred_df[\"var_pred\"], margins=True,normalize=\"index\")\n\n\nfig, axs = plt.subplots(3,figsize = (8,10))\nsns.heatmap(table,annot=True,ax=axs[0],cmap=\"YlGnBu\",fmt='.0f',)\nsns.heatmap(table_columns1,annot=True,ax=axs[1],cmap=\"YlGnBu\",fmt='.0%')\nsns.heatmap(table_index,annot=True,ax=axs[2],cmap=\"YlGnBu\",fmt=\".0%\")\nplt.show()\n\n\nprint(\"Features importances:\")\nfi=[\"{:.0%}\".format(x) for x in clf1.feature_importances_]\nprint(dict(zip(X.columns,fi )))\n\n\n#cross validation\n\nprint (\"***Accuracy score***\")\nprint(cross_val_score(clf1, X, Y, cv=10,scoring=\"accuracy\"))\nprint (\"***F1_macro score***\")\nprint(cross_val_score(clf1, X, Y, cv=10,scoring='f1_macro'))\n\n#tree save file name: tree\ndot_data = tree.export_graphviz(clf1, out_file=None, \n                                  feature_names=X.columns,  \n                                  class_names=labels,  \n                                  filled=True, rounded=True,  \n                                  special_characters=True)  \ngraph = graphviz.Source(dot_data) \ngraph.render(\"tree\")\n   ","b2990750":"quantile2 =  10#@param [\"2\", \"4\", \"10\", \"5\"] {type:\"raw\", allow-input: true}\nvar_pred2 =  ['mod_coron', 'wind_gust_coron','mod_corte', 'wind_gust_corte'] #@param [\"['mod_coron', 'wind_gust_coron','mod_corte', 'wind_gust_corte']\", \"['mod_coron', 'wind_gust_coron']\", \"['mod_corte', 'wind_gust_corte']\", \"['gust_spd_o_coron', 'spd_o_coron' ]\", \"['gust_spd_o_corte', 'spd_o_corte' ]\"] {type:\"raw\"}\nvar_obs2 = var_obs1\ntrain= True #@param {type:\"boolean\"}\nfilename_in = \"\/kaggle\/input\/wind-coron\/rforest.h5\" #@param [\"\/content\/drive\/My Drive\/Colab Notebooks\/wind_ria_arousa\/rforest.h5\"] {type:\"raw\", allow-input: true}\nfilename_out = \"rforest2.h5\" #@param [\"rforest2.h5\"] {type:\"raw\", allow-input: true}\n\n#cut in bins==wind quadrants exemple\nY=pd.qcut(join[var_obs2], quantile2, retbins = False,precision=1).astype(str)\nlabels=pd.qcut(join[var_obs2], quantile2,retbins = True,precision=1)[0].cat.categories.astype(str)\n#independent variables. Also observed variables!! if you wish\nX=join[var_pred2]\n\n\n#we do not scale!!\nx_train, x_test, y_train, y_test = train_test_split(X,Y, test_size=0.2,)\n\n#select classification\nif train:\n  clf2 = RandomForestClassifier().fit(x_train,y_train) \n  pickle.dump(clf2, open(filename_out, 'wb'))\nelse:\n  #model loaded must have same X variables and q\n  clf2 = pickle.load(open(filename_in, 'rb'))\n\n\n\ny_pred=clf2.predict(x_test)\n\n#plot results\nprint(classification_report(y_test,y_pred))\ny_pred_df=pd.DataFrame({\"var_pred\":y_pred},index=y_test.index)\n\n#plot results\ntable=pd.crosstab(y_test,y_pred_df[\"var_pred\"], margins=True,)\ntable_columns2=pd.crosstab(y_test,y_pred_df[\"var_pred\"], margins=True,normalize=\"columns\")\ntable_index=pd.crosstab(y_test,y_pred_df[\"var_pred\"], margins=True,normalize=\"index\")\n\n\nfig, axs = plt.subplots(3,figsize = (8,10))\nsns.heatmap(table,annot=True,ax=axs[0],cmap=\"YlGnBu\",fmt='.0f',)\nsns.heatmap(table_columns2,annot=True,ax=axs[1],cmap=\"YlGnBu\",fmt='.0%')\nsns.heatmap(table_index,annot=True,ax=axs[2],cmap=\"YlGnBu\",fmt=\".0%\")\nplt.show()\n","f49d7d5b":"#@title Plot results\ndelete_ten_minutes = True #@param {type:\"boolean\"}\nshow_graph = True #@param {type:\"boolean\"}\ndate_input = '2020-06-11' #@param {type:\"date\"}\n\n\nfrom datetime import datetime, timedelta, date\nfrom urllib.request import urlretrieve\nimport xarray as xr\n\ndate_input=datetime.strptime(date_input,  '%Y-%m-%d')\n#getting model variables\n\n#creating the string_url\n#analysis day= Yesterday. Time 00:00Z. \ndatetime_str = (date_input-timedelta(days = 1)).strftime('%Y%m%d')\n\n#day to forecast 1= D+1 , 2 =D+2 and so on \nforecast=1\ndataframes=[]\ndate_anal = datetime.strptime(datetime_str,'%Y%m%d')\ndate_fore=(date_anal+timedelta(days=forecast)).strftime('%Y-%m-%d')\n\n#Coron lat: 42.580 N  lon: 8.8047 W. Cortegada lat: 42.626 N  lon: 8.784 W\ncoordenates=[\"latitude=42.626&longitude=-8.784&\",\"latitude=42.580&longitude=-8.8047&\"]\n#variables string type to perform url. The same variables as model (AI)\n\ndataframes=[]\nfor coordenate in coordenates:\n  head=\"http:\/\/mandeo.meteogalicia.es\/thredds\/ncss\/wrf_2d_04km\/fmrc\/files\/\"\n  text1=\"\/wrf_arw_det_history_d03_\"+datetime_str+\"_0000.nc4?\"\n  met_var=\"var=dir&var=mod&var=wind_gust&\"\n  scope1=\"time_start=\"+date_fore+\"T00%3A00%3A00Z&\"\n  scope2=\"time_end=\"+date_fore+\"T23%3A00%3A00Z&accept=netcdf\"\n  #add all the string variables\n  url=head+datetime_str+text1+met_var+coordenate+scope1+scope2\n  #load the actual model from Meteogalicia database and transform as pandas dataframe\n  urlretrieve(url,\"model\")\n  dataframes.append(xr.open_dataset(\"model\").to_dataframe().set_index(\"time\").loc[:, 'dir':])\nmodel = dataframes[0].join(dataframes[1], lsuffix='_corte', rsuffix='_coron')\n\n#model forecast bins and Machine learning forecast\ninterval=pd.qcut(join[var_obs0], quantile0,retbins = True,precision=1)[0].cat.categories\nmodel[var_pred0+\"_l\"]=pd.cut(model[var_pred0],bins = interval).astype(str)\nmodel[var_obs1+\"_decisiontree\"]=clf1.predict(model[var_pred1])\nmodel[var_obs2+\"_randomforest\"]=clf2.predict(model[var_pred2])\n\n\n\n#station results\nvariables_station=[\"spd_o_corte\",\"std_spd_o_corte\",\"gust_spd_o_corte\"]\nparam=[\"param=81\",\"param=10009\",\"param=10003\"]\n\nhead=\"http:\/\/www2.meteogalicia.gal\/galego\/observacion\/plataformas\/historicosAtxt\/DatosHistoricosTaboas_dezminutalAFicheiro.asp?\"\n\n\"\"\"Cortegada platform:15001, Ribeira buoy:15005 warnings: wind intensity negatives!!\"\"\"\nstation=\"est=15001&\"\n\n\ndateday=\"&data1=\"+date_input.strftime(\"%d\/%m\/%Y\")+\"&data2=\"+(date_input+timedelta(days = 1)).strftime(\"%d\/%m\/%Y\")\n\n\"\"\"param=83 (air temperature C) ,10018 (dew temperature C),86 (humidity%)\n,81(wind speed m\/s),10003 (wind gust m\/s),10009 (std wind speed m\/s)\n,82 (wind direction degrees),10010 (std wind direction degrees),\n10015 (gust direcction degree),20003 (temperature sea surface C),20005 (salinity),\n20004 (conductivity mS\/cm),20017 (density anomaly surface kg\/m^3),20019 (deep sea temperature degrees)\n,20018 (deep sea salinity),20022 (deep sea conductivity mS\/cm),20021 (density anomaly deep sea kg\/m^3),\n20020 (Presure water column db),20804 (East current compound cm\/s) ,20803 (North current compound cm\/s)\"\"\"\n\ndf_station=pd.DataFrame()\nfor parameters, var in zip(param,variables_station):\n  url3=head+station+parameters+dateday\n\n  #decimal are comma ,!!\n  df=pd.read_fwf(url3,skiprows=24,sep=\" \",encoding='latin-1',decimal=',').dropna()\n  df_station[\"datetime\"]=df[\"DATA\"]+\" \"+df['Unnamed: 2']\n  df_station['datetime'] = pd.to_datetime(df_station['datetime'])\n  df_station[var]=df['Valor'].astype(float)\ndf_station=df_station.set_index(\"datetime\") \n\n#merge station with meteorological model and plot\n\nfinal=pd.merge(model, df_station, left_index=True, right_index=True, how='outer')\nif show_graph:\n  g1=(final[['mod_corte',\"mod_coron\",\"spd_o_corte\"]]*1.9438).dropna().plot(title=\"wind velocity KT\",figsize=(9,5)).grid(True,which='both')\n  g2=(final[['mod_corte',\"mod_coron\",]]*1.9438).dropna().plot(title=\"wind velocity KT\",figsize=(9,5)).grid(True,which='both')\n  g3=(final[['mod_corte',\"mod_coron\",\"spd_o_corte\"]][1:]*1.9438).plot(title=\"wind velocity KT\",figsize=(9,5)).grid(True,which='both')\n  g4=(final[[\"wind_gust_corte\"\t,\"wind_gust_coron\",\"gust_spd_o_corte\"]]*1.9438).plot(title=\"wind gust velocity KT\",figsize=(9,5)).grid(True,which='both')\n  g5=final[['dir_corte','dir_coron']].plot(title=\"Wind direction\",figsize=(9,5)).grid(True,which='both')\n\n#reample observed data hourly and show all data about spd\npd.options.display.max_rows = 999\nfinal[\"observed_resample_hourly\"]=final.spd_o_corte.resample(\"H\").mean()\n\nif delete_ten_minutes:\n  final_s=final[[\"spd_o_corte\",\t\"std_spd_o_corte\",\"gust_spd_o_corte\",\n                 \"observed_resample_hourly\",var_pred0,var_pred0+\"_l\",\n                 var_obs1+\"_decisiontree\",var_obs2+\"_randomforest\"]].dropna()\nelse:\n  final_s=final[[\"spd_o_corte\",\t\"std_spd_o_corte\",\"gust_spd_o_corte\",\n                 \"observed_resample_hourly\",var_pred0,var_pred0+\"_l\",\n                 var_obs1+\"_decisiontree\",var_obs2+\"_randomforest\"]]\nfinal_s","ed5ebe12":"#@title quantum results\nq_df=final[[var_obs1+\"_decisiontree\",var_obs2+\"_randomforest\"]].dropna()\npd.set_option('max_colwidth', 2000)\nquantum_randomforest=[]\nquantum_decisiontree=[]\nformatter=\"{'.0%'}\".format\nfor i in range(0, len(q_df.index)):\n  quantum_randomforest.append(table_columns2[q_df[var_obs2+\"_randomforest\"][i]].map(\"{:.0%}\".format))\n  quantum_decisiontree.append(table_columns1[q_df[var_obs1+\"_decisiontree\"][i]].map(\"{:.0%}\".format))\n  \nquantum_fi=pd.DataFrame({var_obs1+\"_decision tree\":quantum_decisiontree,var_obs2+\"_randomforest\":quantum_randomforest}, index=q_df.index)\nquantum_fi\n","3c607874":"#@title Select time forecast\nhour = 12 #@param {type:\"slider\", min:0, max:23, step:1}\nknots = True #@param {type:\"boolean\"}\ncelsius = False\nH_resolution = True #@param {type:\"boolean\"}\nvariable_met = \"wind_gust\" #@param [\"wind_gust\", \"mod\", \"temp\", \"prec\", \"dir\"] {allow-input: true}\n\n\ntoday=date_input\nyesterday=today+timedelta(days=-1)\ntoday=today.strftime(\"%Y-%m-%d\")\nyesterday=yesterday.strftime(\"%Y%m%d\")\n\n\nurl1=\"http:\/\/mandeo.meteogalicia.es\/thredds\/ncss\/wrf_2d_04km\/fmrc\/files\/\"+yesterday+\"\/wrf_arw_det_history_d03_\"+yesterday+\"_0000.nc4?var=lat&var=lon&var=\"+variable_met+\"&north=42.650&west=-9.00&east=-8.75&south=42.450&disableProjSubset=on&horizStride=1&time_start=\"+today+\"T\"+str(hour)+\"%3A00%3A00Z&time_end=\"+today+\"T\"+str(hour)+\"%3A00%3A00Z&timeStride=1&accept=netcdf\"\nurl2=\"http:\/\/mandeo.meteogalicia.es\/thredds\/ncss\/wrf_1km_baixas\/fmrc\/files\/\"+yesterday+\"\/wrf_arw_det1km_history_d05_\"+yesterday+\"_0000.nc4?var=lat&var=lon&var=\"+variable_met+\"&north=42.650&west=-9.00&east=-8.75&south=42.450&disableLLSubset=on&disableProjSubset=on&horizStride=1&time_start=\"+today+\"T\"+str(hour)+\"%3A00%3A00Z&time_end=\"+today+\"T\"+str(hour)+\"%3A00%3A00Z&timeStride=1&accept=netcdf\"\nif H_resolution:\n  url=url2\n  r=\"HI_\"\nelse:\n  url=url1\n  r=\"LO_\"\n\n\nurlretrieve(url,\"model\")\ndf=xr.open_dataset(\"model\").to_dataframe()\ndf_n=pd.DataFrame(df[[\"lat\",\"lon\",variable_met]].values,columns=df[[\"lat\",\"lon\",variable_met]].columns)\n\nif knots and (variable_met==\"mod\" or variable_met==\"wind_gust\"):\n  df_n[variable_met]=round(df_n[variable_met]*1.94384,2).astype(int)\n  \nif variable_met==\"temp\" and celsius:\n  df_n[variable_met]=(df_n[variable_met]-273.16).astype(int)\n \nif variable_met==\"dir\":\n   df_n[variable_met]= df_n[variable_met].astype(int)\n\n\ndf_n[variable_met]=df_n[variable_met].astype(str)\nkml = simplekml.Kml()\ndf_n.apply(lambda X: kml.newpoint(name=X[variable_met], coords=[( X[\"lon\"],X[\"lat\"])]) ,axis=1)\n\n#add Cortegada wind variables if variable_met mod or wind_gust\ndescription=\"units m\/s\\n\"+quantum_fi.columns[0]+\" \"+str(quantum_fi.iloc[hour,0])[:-15]+\"\\n\"+quantum_fi.columns[1]+\" \"+str(quantum_fi.iloc[hour,1])[:-15]\n\nif variable_met==\"mod\" or variable_met==\"wind_gust\":\n  #add Cortegada velocity\n  string=final.index.strftime(\"%Y-%m-%d\")[0]+\" \"+str(hour)+\":00:00\"\n  if var_obs1[-5:]==\"coron\":\n    description=\"*\"\n  if knots:\n    kml.newpoint(name=str(round(final['spd_o_corte'].loc[string]*1.9438,0)), description=description,coords=[(-8.7836,42.6255)]) \n  else:\n    kml.newpoint(name=str(final['spd_o_corte'].loc[string]), description=description,coords=[(-8.7836,42.6255)]) \n\n  #add Cortegada gust\n  if knots:\n    kml.newpoint(name=str(round(final['gust_spd_o_corte'].loc[string]*1.9438,0)), description=description,coords=[(-8.7836,42.6255)]) \n  else:\n    kml.newpoint(name=str(final['gust_spd_o_corte'].loc[string]), description=description,coords=[(-8.7836,42.6255)]) \n   #add Coron\n  description=\"units m\/s\\n\"+quantum_fi.columns[0]+\" \"+str(quantum_fi.iloc[hour,0])[:-15]+\"\\n\"+quantum_fi.columns[1]+\" \"+str(quantum_fi.iloc[hour,1])[:-15]\n  if var_obs1[-5:]==\"corte\":\n    description=\"*\"\n  kml.newpoint(name=\"Coron\",description=description,coords=[(-8.8046,42.5801)])   \n\n#save results  \nkml.save(today+\"H\"+str(hour)+r+variable_met+\".kml\")","5fe89a58":"**Get a KML file. Low or high resolution model**","70f402ff":"**Random forest**","1639301f":"**Get meteorological model to fit Decision Tree or Random forest algorithm. Same input variables should be model variables three cases**","07dce5f1":"**Get meteorological model to fit Decision Tree or Random forest algorithm. Must be the same quantile number for decision tree and randomforest. Same observed station and independent variable to compare meteorological model ,decisiontree and randomforest algorithm**","7b9c5f7f":"**Wind velocity : select independent and observed station variables, quantiles and tune. Tree plot as output pdf file**"}}