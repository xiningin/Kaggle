{"cell_type":{"c452a9b4":"code","a4c6e834":"code","f1ae2b1e":"code","cd4c4f83":"code","05398878":"code","21c9b6e0":"code","0444160f":"code","d749b26a":"code","d0cc76e6":"code","b9638fd5":"code","fe9d9a70":"code","e3d4013c":"code","a2637e60":"code","f63d0446":"code","d5426695":"code","54bbe3a9":"code","d10c3a55":"code","47945665":"code","29dcc9a9":"code","c90ceab4":"code","358a0141":"code","25129e36":"code","1184f410":"code","843bb982":"code","6c1883c8":"code","0211e0a7":"markdown","82e02ef6":"markdown","de1fa35e":"markdown","882e52fc":"markdown","7048e4fa":"markdown","64d30a72":"markdown","5f42efe7":"markdown","e7cbdb53":"markdown","8b924d42":"markdown","b9875390":"markdown","7bc88a24":"markdown","71203aca":"markdown","13925975":"markdown","12eb1b08":"markdown","1922dfc1":"markdown"},"source":{"c452a9b4":"!pip install -U lightautoml","a4c6e834":"%matplotlib inline\n\n# Standard python libraries\nimport os\nimport time\nimport re\n\n# Installed libraries\nimport numpy as np\nimport pandas as pd\nfrom sklearn.metrics import mean_squared_log_error\nfrom sklearn.model_selection import train_test_split\nimport torch\nimport matplotlib.pyplot as plt\n\n# Imports from our package\nfrom lightautoml.automl.presets.tabular_presets import TabularAutoML, TabularUtilizedAutoML\nfrom lightautoml.tasks import Task","f1ae2b1e":"N_THREADS = 4 # threads number for lightgbm and linear models\nN_FOLDS = 5 # folds number for AutoML\nRANDOM_STATE = 42 # fixed random state for various reasons\nTEST_SIZE = 0.2 # Test size for metric check\nTIMEOUT = 3600 # Time in seconds for automl run\nTARGET_NAME = 'Price' # Name for target column ","cd4c4f83":"np.random.seed(RANDOM_STATE)\ntorch.set_num_threads(N_THREADS)","05398878":"%%time\n\ntrain_data = pd.read_csv('..\/input\/hse1-apartmentprice\/train.csv')\ntrain_data.head()","21c9b6e0":"test_data = pd.read_csv('..\/input\/hse1-apartmentprice\/test.csv')\ntest_data.head()","0444160f":"submission = pd.read_csv('..\/input\/hse1-apartmentprice\/sample_submission.csv')\nsubmission.head()","d749b26a":"train_data.shape, test_data.shape","d0cc76e6":"train_data[TARGET_NAME].describe()","b9638fd5":"train_data[TARGET_NAME].hist(bins = 100  , figsize = (20, 10))","fe9d9a70":"np.log(train_data[TARGET_NAME] + 1).hist(bins = 100, figsize = (20, 10))","e3d4013c":"def create_extra_features(data):\n    data['FloorDiff'] = data['FloorsTotal'] - data['Floor']\n    data['MeanRoomSize'] = data['Size'] \/ data['Room']\n\ndef create_gr_feats(data):\n    for col in ['Walls', 'District', 'Okrug']:\n        for n, f in [('mean', np.mean), ('min', np.nanmin), ('max', np.nanmax)]:\n            data[n + '_size_by_' + col] = data.groupby(col)['Size'].transform(f)\n    for col in ['Size', 'Room', 'Balcony', 'Floor', 'FloorsTotal',\n               'Walls','Age','Lift', 'District', 'Okrug']:\n        data[col + '_cnt'] = data[col].map(data[col].value_counts(dropna = False))\n\ncreate_extra_features(train_data)\ncreate_extra_features(test_data)\n\nall_df = pd.concat([train_data, test_data]).reset_index(drop = True)\ncreate_gr_feats(all_df)\ntrain_data, test_data = all_df[:len(train_data)], all_df[len(train_data):]\nprint(train_data.shape, test_data.shape)","a2637e60":"train_data","f63d0446":"%%time\n\ntask = Task('reg', loss = 'rmsle', metric = 'rmsle')","d5426695":"%%time\n\nroles = {\n    'target': TARGET_NAME,\n    'drop': ['Id'],\n}","54bbe3a9":"%%time\n\ncnt_trained = 0\nresults = []\nrs_list = list(range(2000, 2007))\nfor it, rs in enumerate(rs_list):\n    print('=' * 30)\n    print('START RANDOM_STATE = {}'.format(rs))\n    print('=' * 30)\n    \n    # Train AutoML\n    automl = TabularAutoML(task = task, \n                       timeout = TIMEOUT,\n                       cpu_limit = N_THREADS,\n                       reader_params = {'n_jobs': N_THREADS, 'cv': N_FOLDS, 'random_state': rs})\n    oof_pred = automl.fit_predict(train_data, roles = roles)\n    \n    # Predict on test\n    test_pred = automl.predict(test_data)\n    cnt_trained += 1\n    \n    # Save predictions\n    if it == 0:\n        oof_pred_full = oof_pred.data[:, 0].copy()\n        test_pred_full = test_pred.data[:, 0].copy()\n    else:\n        oof_pred_full += oof_pred.data[:, 0]\n        test_pred_full += test_pred.data[:, 0]\n    \n    # Check scores for current predict and aggregated one\n    rmsle_usual = mean_squared_log_error(train_data[TARGET_NAME].values, oof_pred.data[:, 0]) ** 0.5\n    rmsle_full = mean_squared_log_error(train_data[TARGET_NAME].values, oof_pred_full \/ cnt_trained) ** 0.5\n    results.append((rmsle_usual, rmsle_full, rmsle_full - rmsle_usual))\n    \n    print('Check scores...')\n    print('Holdout score: {}'.format(rmsle_usual))\n    print('Holdout score full: {}'.format(rmsle_full))\n    print('Difference: {}'.format(rmsle_full - rmsle_usual))","d10c3a55":"test_pred_full_0 = test_pred_full.copy() \/ cnt_trained","47945665":"import joblib\njoblib.dump(test_pred_full_0, 'saved_preds.pkl')","29dcc9a9":"submission[TARGET_NAME] = test_pred_full_0\nsubmission.to_csv('LightAutoML_multistart_before_pseudo_v.0.2.11.csv', index = False)","c90ceab4":"submission.describe()","358a0141":"%%time\n\n# Fast feature importances calculation - logged for better visual (size is dominated in normal scale)\nfast_fi = automl.get_feature_scores('fast')\nfast_fi.set_index('Feature')['Importance'].plot.bar(figsize = (20, 10), grid = True)","25129e36":"plt.figure(figsize = (20, 10))\nplt.plot(range(1, cnt_trained + 1), [res[0] for res in results], color = 'b', linewidth = 2, label = 'Usual LightAutoML model RMSLE')\nplt.plot(range(1, cnt_trained + 1), [res[1] for res in results], color = 'g', linewidth = 2, label = 'RMSLE for averaged LightAutoMLs')\nplt.grid()\nplt.legend()\nplt.title('LightAutoML RMSLE vs. averaged LightAutoMLs composition RMSLE')\nplt.xlabel('Iteration number')\nplt.ylabel('RMSLE')\nplt.show()","1184f410":"mean_rmsle = np.mean([res[0] for res in results])\nmean_rmsle","843bb982":"differences = np.array([res[1] - mean_rmsle for res in results])","6c1883c8":"plt.figure(figsize = (20, 10))\nplt.plot(range(1, cnt_trained + 1), differences, color = 'g', linewidth = 2, label = 'Difference')\nplt.plot(range(1, cnt_trained + 1), [np.mean(differences[0:i+1]) for i in range(len(differences))], 'b-.', linewidth = 2, label = 'Cumulative mean difference')\nplt.plot(range(1, cnt_trained + 1), [0.0 for res in results], 'r--', linewidth = 2, label = 'Zero line')\nplt.grid()\nplt.legend()\nplt.title('Difference between mean LightAutoML RMSLE and averaged LightAutoMLs composition RMSLE at each iteration')\nplt.xlabel('Iteration number')\nplt.ylabel('RMSLE difference')\nplt.show()","0211e0a7":"## Step 4. Graphical check","82e02ef6":"#### Let's set the powerful preset for tabular AutoML with iterations and informative training log","de1fa35e":"# Step 2. Define Parameters","882e52fc":"#### We should set the 'roles' where we specify variable with target, that we set in parameters","7048e4fa":"# Step 5. Add new features","64d30a72":"### LightAutoML can show feature importance","5f42efe7":"### Let's make the submission file","e7cbdb53":"## Step 2. Setup columns roles","8b924d42":"# ========= AutoML preset usage =========\n\n\n## Step 1. Create Task","b9875390":"# Step 3. Fix torch number of threads and numpy seed ","7bc88a24":"# Step 4. Data load ","71203aca":"# Step 1. Import all libs","13925975":"### If you like the code and results, please vote us with star at [GitHub](https:\/\/github.com\/sberbank-ai-lab\/LightAutoML)","12eb1b08":"### No need to clear data manually, no onehot encoding needed.\u00a0LightAutoML will do it itself, we just create extra business features","1922dfc1":"# Try get better Score in appartment price forecast in Moscow\n### This is the best score submission that uses few handmade features and all other job is done by LightAutoML while you are sleeping. Estimate running time is about 1.5 hrs"}}