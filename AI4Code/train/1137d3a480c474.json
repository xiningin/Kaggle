{"cell_type":{"9da4f2da":"code","f7269c83":"code","bdc4ef4c":"code","d946403d":"code","c85f16e5":"code","2bf7230a":"code","d27a16d8":"code","945f4a48":"code","feaf7647":"code","6b8aa5bd":"code","c4b83d7d":"code","eab265d0":"code","5d041eaa":"code","077490d8":"code","99bd9ff9":"markdown","3615c90a":"markdown","fe4645f5":"markdown","f29ec3ea":"markdown","aa5ce2d5":"markdown","922e46e2":"markdown","ebb84fc8":"markdown"},"source":{"9da4f2da":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","f7269c83":"full_data = pd.read_csv('\/kaggle\/input\/iris\/Iris.csv')","bdc4ef4c":"full_data.columns","d946403d":"from sklearn.model_selection import train_test_split\n\ny = pd.get_dummies(full_data['Species']).values\nX = full_data.drop(['Id', 'Species'], axis=1).values\n\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.25, random_state=42)","c85f16e5":"def mean_squared_error(predictions, labels):\n    N = labels.size\n    mse = ((predictions - labels)**2).sum() \/ (2*N)\n    \n    return mse\n\ndef accuracy(predictions, labels):\n    predicions_correct = predictions.argmax(axis=1) == labels.argmax(axis=1)\n    accuracy = predicions_correct.mean()\n    \n    return accuracy","2bf7230a":"lr = 0.1\nepochs = 15000\n\nn_input = 4\nn_hidden = 2\nn_output = 3\n\nN = y_train.size\n\nnp.random.seed(10)\nweights_1 = np.random.normal(scale=0.5, size=(n_input, n_hidden)) \nweights_2 = np.random.normal(scale=0.5, size=(n_hidden, n_output))\n\nmonitoring = {\"mean_squared_error\": [], \"accuracy\": []}","d27a16d8":"def sigmoid(X):\n    return 1 \/ (1 + np.exp(-X))","945f4a48":"def forward(X, weights):\n    inputs = np.dot(X, weights)\n    outputs = sigmoid(inputs)\n    \n    return outputs","feaf7647":"def backprop(output_layer_outputs, hidden_layer_outputs, y_train, weights_1, weights_2):\n    output_layer_error = output_layer_outputs - y_train\n    output_layer_delta = output_layer_error * output_layer_outputs * (1 - output_layer_outputs)\n\n    hidden_layer_error = np.dot(output_layer_delta, weights_2.T)\n    hidden_layer_delta = hidden_layer_error * hidden_layer_outputs * (1 - hidden_layer_outputs)\n    \n    return output_layer_error, output_layer_delta, hidden_layer_error, hidden_layer_delta","6b8aa5bd":"def update_weights(weights, outputs, delta):\n    updated_weights = np.dot(outputs.T, delta) \/ N\n    new_weights = weights - lr * updated_weights\n    \n    return new_weights","c4b83d7d":"for epoch in range(epochs):    \n    \n    # forward\n    hidden_layer_outputs = forward(X_train, weights_1)\n    output_layer_outputs = forward(hidden_layer_outputs, weights_2)\n    \n    \n    # monitor training process\n    mse = mean_squared_error(output_layer_outputs, y_train)\n    acc = accuracy(output_layer_outputs, y_train)\n    \n    monitoring[\"mean_squared_error\"].append(mse)\n    monitoring[\"accuracy\"].append(acc)\n    \n    \n    # backprop\n    output_layer_error, output_layer_delta, hidden_layer_error, hidden_layer_delta = backprop(output_layer_outputs, hidden_layer_outputs, y_train, weights_1, weights_2)\n\n    \n    # update weights\n    weights_2 = update_weights(weights_2, hidden_layer_outputs, output_layer_delta)\n    weights_1 = update_weights(weights_1, X_train, hidden_layer_delta)","eab265d0":"import matplotlib.pyplot as plt\nimport seaborn as sns\n%matplotlib inline\n\nmonitoring_df = pd.DataFrame(monitoring)\n\nfig, axes = plt.subplots(1, 2, figsize=(15,5))\nmonitoring_df.mean_squared_error.plot(ax=axes[0], title=\"Mean Squared Error\")\nmonitoring_df.accuracy.plot(ax=axes[1], title=\"Accuracy\");","5d041eaa":"hidden_layer_inputs = np.dot(X_test, weights_1)\nhidden_layer_outputs = sigmoid(hidden_layer_inputs)\n\noutput_layer_inputs = np.dot(hidden_layer_outputs, weights_2)\noutput_layer_outputs = sigmoid(output_layer_inputs)","077490d8":"acc = accuracy(output_layer_outputs, y_test)\nprint(\"Accuracy: {}\".format(acc))","99bd9ff9":"# Backprop","3615c90a":"# Main","fe4645f5":"# Parameters","f29ec3ea":"# Test","aa5ce2d5":"# Update Weights","922e46e2":"# Helper Functions","ebb84fc8":"# Forward"}}