{"cell_type":{"fc5da757":"code","29708f62":"code","21584d83":"code","5f3cd89d":"code","110442ce":"code","fed8a116":"code","d22ba8ac":"code","45aacc37":"code","3f1aa447":"code","06850c99":"code","a848b5f7":"code","a310011c":"code","0bd4861a":"code","172c5f87":"code","94ea96d9":"code","cbfb0a83":"code","81e45f63":"code","b2efe6a2":"code","f8c76d9c":"code","4573a6a0":"code","1bccb140":"code","0939539a":"code","e51d25fc":"code","97a5f4c4":"code","abb1a608":"code","1d4fd0aa":"code","f6a07fc6":"code","7c322ec5":"code","751c1a8f":"code","7477544b":"code","5766cc65":"code","58229381":"code","73348c97":"code","f437c665":"code","d6a72a9c":"code","7702da4c":"code","ea385ddf":"code","f652c5e5":"code","d362017e":"code","fb67333a":"code","565b071d":"code","bfe4dbe0":"code","d1ed5d88":"code","f3628236":"code","eda203e8":"code","63488bd5":"code","1f9e2c24":"code","5242cc95":"code","c5b0a916":"code","626f9b47":"code","14ee73fb":"code","907b6548":"code","ab659971":"code","21611a65":"code","45876a35":"code","5c2f21db":"code","5d13b321":"code","9332a8ff":"code","3dab6c83":"code","aed8c905":"code","f3018731":"code","64f87c71":"code","3259249f":"code","4de6ff15":"code","0c56db36":"code","4e84673b":"code","bf841dc9":"code","f3566dff":"code","de07132c":"code","5b7abf6c":"code","d43c6eec":"code","4b6486e9":"code","b68cf015":"code","1a05fadb":"code","db267cb8":"markdown","dc01128d":"markdown","b184c6ed":"markdown"},"source":{"fc5da757":"import pandas as pd\nimport numpy as np\n# importing plotting libraries\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nsns.set(style=\"whitegrid\")\n# Splits the dataframe into random train and test subsets to to \n# train the model and test\nfrom sklearn.model_selection import train_test_split\n# Gaussian Naive bayes for model building\nfrom sklearn.naive_bayes import GaussianNB\n# Metrics for accuracy and confusion matrix and classification report\nfrom sklearn import metrics\nfrom sklearn.preprocessing import MinMaxScaler, StandardScaler,scale","29708f62":"# To enable plotting graphs\n%matplotlib inline ","21584d83":"# Read the data from CSV using pandas \ndf = pd.read_csv('..\/input\/pima-indians-diabetes_nb.csv')","5f3cd89d":"# Check data is read into pandas dataframe\ndf.head()","110442ce":"# Check for number rows and columns present in the dataset\ndf.shape","fed8a116":"# To check data type of columns in the dataframe\ndf.info()","d22ba8ac":"# Check for null values\ndf.isnull().any()","45aacc37":"df[~df.applymap(np.isreal).all(1)]","3f1aa447":"# Check target column 'class' count \ndf['class'].value_counts()","06850c99":"# See the plot for categorical target column count\nsns.countplot(df['class'])","a848b5f7":"# Distribution of the attributes in the dataset\ndf.describe().T","a310011c":"# See the histograms for each independant variable present in dataframe df","0bd4861a":"# min is zero and right skewed\ndf['Preg'].hist()","172c5f87":"# Left skewed\ndf['Plas'].hist()","94ea96d9":"# left skewed and outliers present\ndf['Pres'].hist()","cbfb0a83":"# min zero more right skewed\ndf['skin'].hist()","81e45f63":"# Large right skewed\ndf['test'].hist()","b2efe6a2":"# Mean and median almost near \ndf['mass'].hist()","f8c76d9c":"# mean and median little near\ndf['pedi'].hist()","4573a6a0":"# data points largely right skewed \nsns.distplot(df['age'])","1bccb140":"df['class'].hist()","0939539a":"sns.pairplot(df, hue = 'class')","e51d25fc":"# When observe the pairplot plots and distribution of data (Plas,Pres, skin and mass) are nearly normally distributed\n# Attributes (Preg, test, pedi ) has exponential distribution","97a5f4c4":"sns.boxplot(x = df['Preg'] )","abb1a608":"sns.boxplot(x = df['test'] )","1d4fd0aa":"df.isnull().any()","f6a07fc6":"corr = df.corr()","7c322ec5":"sns.heatmap(corr,annot = True)","751c1a8f":"df.groupby('class').hist(figsize=(9, 9))","7477544b":"df1 = df","5766cc65":"# There are few zero values as this attribute is contnuous consider as missing values\n#df1['Plas'] = df1['Plas'].replace(0,np.NaN)","58229381":"#df1['Plas'] = df1['Plas'].replace(np.NaN, df1['Plas'].mean(skipna=True))","73348c97":"df1.head()","f437c665":"# drop target value for X values independent attributes\nX = df1.drop(['class'], axis =1)\n# target attribute - dependant attribute\ny = df1['class']","d6a72a9c":"# split the data 30 %\nX_train,X_test,y_train,y_test = train_test_split(X,y,test_size = 0.3, random_state = 1)","7702da4c":"# Gaussian Naivebayes model\ngnb = GaussianNB()","ea385ddf":"# train the model with train split\ngnb.fit(X_train,y_train)","f652c5e5":"# Check the score for train data\ngnb.score(X_train,y_train)","d362017e":"# Predict the target value for test data\ny_predict = gnb.predict(X_test)","fb67333a":"# Check the score for test data \ngnb.score(X_test,y_test)","565b071d":"# see the confusion matrics for precision and recall\nprint(metrics.confusion_matrix(y_test,y_predict))","bfe4dbe0":"# see the f1 score and precision , recall percentage\nprint(metrics.classification_report(y_test,y_predict))","d1ed5d88":"print(metrics.accuracy_score(y_test,y_predict))","f3628236":"X = df1.drop(['class'], axis =1)","eda203e8":"y = df1['class']","63488bd5":"X_train,X_test,y_train,y_test = train_test_split(X,y,test_size = 0.3, random_state = 1)","1f9e2c24":"from sklearn.preprocessing import scale\nX_train_scale = scale(X_train)\nX_test_scale = scale(X_test)","5242cc95":"X_test_scale.shape","c5b0a916":"X_train_scale.shape","626f9b47":"X_train_scale","14ee73fb":"gnb = GaussianNB()","907b6548":"gnb.fit(X_train_scale,y_train)","ab659971":"gnb.score(X_train_scale,y_train)","21611a65":"y_predict = gnb.predict(X_test_scale)","45876a35":"gnb.score(X_test_scale,y_test)","5c2f21db":"print(metrics.classification_report(y_test,y_predict))","5d13b321":"print(metrics.confusion_matrix(y_test,y_predict))","9332a8ff":"print(metrics.accuracy_score(y_test,y_predict))","3dab6c83":"X = df1.drop(['class'], axis =1)","aed8c905":"y = df1['class']","f3018731":"X_train,X_test,y_train,y_test = train_test_split(X,y,test_size = 0.3, random_state = 1)","64f87c71":"scale = StandardScaler()","3259249f":"X_train_scale = scale.fit_transform(X_train)\nX_test_scale = scale.fit_transform(X_test)","4de6ff15":"X_test_scale.shape","0c56db36":"X_train_scale.shape","4e84673b":"X_train_scale","bf841dc9":"gnb = GaussianNB()","f3566dff":"gnb.fit(X_train_scale,y_train)","de07132c":"gnb.score(X_train_scale,y_train)","5b7abf6c":"y_predict = gnb.predict(X_test_scale)","d43c6eec":"gnb.score(X_test_scale,y_test)","4b6486e9":"print(metrics.classification_report(y_test,y_predict))","b68cf015":"print(metrics.confusion_matrix(y_test,y_predict))","1a05fadb":"print(metrics.accuracy_score(y_test,y_predict))","db267cb8":"Analyzing the confusion matrix\n\nTrue Positives (TP): we correctly predicted that they do have diabetes 53\n\nTrue Negatives (TN): we correctly predicted that they don't have diabetes 128\n\nFalse Positives (FP): we incorrectly predicted that they do have diabetes (a \"Type I error\") 18 Falsely predict positive Type I error\n\nFalse Negatives (FN): we incorrectly predicted that they don't have diabetes (a \"Type II error\") 32 Falsely predict negative Type II error\n","dc01128d":"# Improve the model -----------------------------Iteration 2 -----------------------------------------------","b184c6ed":"# Improve the model -----------------------------Iteration 2 -----------------------------------------------"}}