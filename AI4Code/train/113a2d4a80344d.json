{"cell_type":{"2c2ed0c2":"code","d14ebd4c":"code","56af5f90":"code","e92e53e8":"code","60741a5e":"code","86babac2":"code","73dd3c2c":"code","38124f4b":"code","c43aa271":"code","2e3b92c2":"code","b488b39f":"code","a6fcd7f8":"code","8355c432":"code","271f0021":"code","b6d0d308":"code","055e1f16":"code","616b5ff8":"code","89d48e32":"code","363ea5c8":"code","90cb5e58":"code","0207490c":"code","4ff1eb91":"code","5a30510d":"code","07380deb":"code","929dcd93":"code","8f9bda0a":"code","a1940150":"code","98fd1e21":"code","745949ec":"code","b87796c1":"code","ef0779e1":"code","3b1e543f":"code","5378a7f3":"code","bf275a08":"code","dde60ab6":"code","91be5198":"code","821b8900":"code","97cf5229":"code","28f88858":"code","c56332d8":"code","9b1e4d86":"code","33d7e90f":"code","42443e32":"code","d4231f6d":"code","9b52966c":"code","e2028440":"code","c76ab5bd":"code","7bc467a2":"markdown","7339c0c5":"markdown","2fbcda64":"markdown","29e33fea":"markdown","a0dae1ad":"markdown","b0908c2e":"markdown","98ca0ec5":"markdown","9a5e9f59":"markdown","2a70fcad":"markdown","84e5225b":"markdown","d69f4748":"markdown","8f4fa9df":"markdown","8938be7c":"markdown","99cd0acc":"markdown","d4a53d72":"markdown","9fb0785b":"markdown","b56b1877":"markdown","8ae6fe15":"markdown","92ba13c6":"markdown","8d140ec4":"markdown","e6295f27":"markdown","4cc0cb93":"markdown","173111ca":"markdown","d04f6924":"markdown","ef7ce67f":"markdown","7b2cb89a":"markdown","db548cc8":"markdown","260c4f43":"markdown"},"source":{"2c2ed0c2":"import pandas as pd\nimport numpy as np\nimport seaborn as sns\nimport matplotlib.pyplot as plt","d14ebd4c":"dataset_test=pd.read_csv('..\/input\/titaniccsv\/test.csv')","56af5f90":"dataset_train=pd.read_csv('..\/input\/titaniccsv\/titanic.csv')\ndataset_train.head(2)\n","e92e53e8":"sns.countplot(dataset_train['Pclass'])","60741a5e":"dataset_train['Pclass'].value_counts().plot(kind='pie',autopct='%.2f')\n# dataset_train['Pclass'].value_counts().plot(kind='pie',autopct='%1.0f%%')","86babac2":"sns.histplot(dataset_train['Age'])","73dd3c2c":"sns.distplot(dataset_train['Age'])","38124f4b":"sns.boxplot(dataset_train['Age'])","c43aa271":"dataset_train.shape","2e3b92c2":"dataset_train.keys()","b488b39f":"cate_dataset=dataset_train.select_dtypes(include=['object']).columns\ncate_dataset","a6fcd7f8":"num_dataset=dataset_train.select_dtypes(include=['int64']).columns\nnum_dataset","8355c432":"dataset_train.select_dtypes(include=['datetime']).columns","271f0021":"dataset_train.isnull().sum()","b6d0d308":"dataset_test.isnull().sum()","055e1f16":"dataset_train.info()","616b5ff8":"dataset_train.count(axis=0,numeric_only=True)","89d48e32":"dataset_train.describe()","363ea5c8":"num_dataset.max()","90cb5e58":"dataset_train[cate_dataset].count()","0207490c":"dataset_train[cate_dataset].value_counts()","4ff1eb91":"dataset_train[cate_dataset].describe()","5a30510d":"# survived = dataset_train[dataset_train['Survived'] == 1]\n# not_survived = dataset_train[dataset_train['Survived'] == 0]\n\n# print (\"Survived: %i (%.1f%%)\"%(len(survived), float(len(survived))\/len(dataset_train)*100.0))\n# print (\"Not Survived: %i (%.1f%%)\"%(len(not_survived), float(len(not_survived))\/len(dataset_train)*100.0))\n# print (\"Total: %i\"%len(dataset_train))","07380deb":"dataset_train.groupby('Pclass').Survived.value_counts()","929dcd93":"dataset_train[['Pclass', 'Survived']].groupby(['Pclass'], as_index=False).mean()","8f9bda0a":"dataset_train[['Sex', 'Survived']].groupby(['Sex'], as_index=True).mean()","a1940150":"dataset_train[['Age','Survived']].groupby(['Age'],as_index=False).mean()","98fd1e21":"dataset_train.Age.hist(by=dataset_train.Survived)","745949ec":"dataset_train[['Age','Pclass','Survived']].groupby(['Age','Pclass'],as_index=False).mean()","b87796c1":"# dataset_train.Pclass.hist(by=dataset_train.Survived)\n# dataset_train.Age.hist(by=dataset_train.Survived)\n","ef0779e1":"# dataset_train.Embarked.hist(by=dataset_train.Survived)\n# dataset_train.Sex.hist(by=dataset_train.Survived)\n# dataset_train.Fare.hist(by=dataset_train.Survived)","3b1e543f":"grid = sns.FacetGrid(dataset_train, col='Survived', row='Pclass', size=2.2, aspect=1.6)\ngrid.map(plt.hist, 'Age', alpha=.5, bins=20)\ngrid.add_legend();","5378a7f3":"PLOT= sns.FacetGrid(dataset_train, row='Embarked', col='Survived', size=2.2, aspect=1.6)\nPLOT.map(sns.barplot, 'Sex', 'Fare', alpha=.5, ci=None)\nPLOT.add_legend()","bf275a08":"print('before',dataset_train.shape,dataset_test.shape)\ndataset_train_drop=dataset_train.drop(['Cabin'],axis=1)\ndataset_test_drop=dataset_test.drop(['Cabin'],axis=1)\nprint('After',dataset_train_drop.shape,dataset_test_drop.shape)","dde60ab6":"for dataset in dataset_train,dataset_test:\n    dataset['Sex'] = dataset['Sex'].map( {'female': 1, 'male': 0} ).astype(int)\n\ndataset_train.head()","91be5198":"dummyp=pd.get_dummies(dataset_train['Sex'],prefix='Sex')\ndummyp","821b8900":"dataset_train.isnull().sum()","97cf5229":"dataset_train['Age'].isnull().sum()","28f88858":"dataset_train_copy=dataset_train.copy()","c56332d8":"dataset_train_copy['Age'].isnull().sum()","9b1e4d86":"from sklearn.impute import KNNImputer\nknn_imp=KNNImputer(n_neighbors=5)\ndataset_train_copy[['Age']]=knn_imp.fit_transform(dataset_train_copy[['Age']])","33d7e90f":"dataset_train_copy['Age'].isnull().sum()","42443e32":"dataset_train.Embarked.value_counts()","d4231f6d":"dataset_train.Embarked.value_counts()\nfor dataset in dataset_train,dataset_test:\n    dataset['Embarked'] = dataset['Embarked'].fillna('S')","9b52966c":"dataset_train.head()","e2028440":"dataset_test['Fare'].fillna(dataset_test['Fare'].dropna().median(), inplace=True)\ndataset_test.head()","c76ab5bd":"dataset_train['FareBand'] = pd.qcut(dataset_train['Fare'], 4,duplicates='drop')\ndataset_train[['FareBand', 'Survived']].groupby(['FareBand'], as_index=False).mean().sort_values(by='FareBand', ascending=True)\nfor dataset in dataset_train,dataset_test:\n    dataset.loc[ dataset['Fare'] <= 7.91, 'Fare'] = 0\n    dataset.loc[(dataset['Fare'] > 7.91) & (dataset['Fare'] <= 14.454), 'Fare'] = 1\n    dataset.loc[(dataset['Fare'] > 14.454) & (dataset['Fare'] <= 31), 'Fare']   = 2\n    dataset.loc[ dataset['Fare'] > 31, 'Fare'] = 3\n    dataset['Fare'] = dataset['Fare'].astype(int)\n\ndataset_train = dataset_train.drop(['FareBand'], axis=1)\n#combine = [train_df, test_df]\n    \ndataset_train.head(10)","7bc467a2":"**Q8**","7339c0c5":"**Q15**","2fbcda64":"***In training set, which features contain blank, null or empty values? ***","29e33fea":"**Q12**","a0dae1ad":"# BOX PLOT","b0908c2e":"**In training set, which features are mixed data types?**\n\nNumerical, alphanumeric data within same feature. These are candidates for correcting goal.\n\nTicket is a mix of numeric and alphanumeric data types. Cabin is alphanumeric.\n","98ca0ec5":"**In training set, which features are categorical?**","9a5e9f59":"# countplot throug seaborn","2a70fcad":"In test set, which features\ncontain blank, null or empty values? ","84e5225b":"**In training set, which features are numerical (e.g., discrete, continuous, or time series based)?**","d69f4748":"# HIST PLOT","8f4fa9df":"**Q9**","8938be7c":"**Q20**","99cd0acc":"**Q18**","d4a53d72":"# pie chart show categorical counting","9fb0785b":"**Q17**","b56b1877":"**Q16**","8ae6fe15":"**Q11**","92ba13c6":"**Q19**","8d140ec4":"**Q13**","e6295f27":"# DIST PLOT","4cc0cb93":"**: In training set, what are the data types (e.g., integer, floats or strings ) for various features?**","173111ca":"**In training set, which features are available?**","d04f6924":"**Q18**","ef7ce67f":"# numerical data  showing in graph","7b2cb89a":"**Q9**","db548cc8":"To understand the distribution of numerical feature values across the samples, please list the\nproperties, including count, mean, std, min, 25% percentile, 50% percentile, 75% percentile, max, of\nnumerical features? ","260c4f43":"**Q10**"}}