{"cell_type":{"1fddf7f6":"code","5f882169":"code","36c842ff":"code","facb953c":"code","b813716c":"code","4583716a":"code","81f2b254":"code","05e024cf":"code","d2f6b0a6":"code","5056581f":"code","577fa69e":"code","22bf951b":"code","55ed42ac":"code","2ac537a2":"code","7d5f56db":"code","2cf839cb":"code","c45d6cf1":"code","99d7cf6a":"code","06e9a039":"code","21986bb2":"code","ea9636f3":"code","ff29b945":"code","83568e41":"code","eac4c7ef":"code","13c184a8":"code","b77ff5e7":"code","0bcf673a":"code","e75fea05":"code","e68b69f5":"markdown","729473e7":"markdown","822180cf":"markdown","2253b92e":"markdown","36784c1c":"markdown","b4dccdfc":"markdown","1681856e":"markdown","f7d1869d":"markdown","de5f476e":"markdown","092ec42f":"markdown","59837b33":"markdown","23036370":"markdown","1ad5e261":"markdown","4206f6bc":"markdown"},"source":{"1fddf7f6":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","5f882169":"data = pd.read_csv('\/kaggle\/input\/all-space-missions-from-1957\/Space_Corrected.csv')","36c842ff":"data.info()","facb953c":"data.describe()","b813716c":"data.head()","4583716a":"data.drop(['Unnamed: 0','Unnamed: 0.1'],axis=1,inplace=True)","81f2b254":"data['Location']","05e024cf":"data['Country'] = data.Location.apply(lambda x : x.split()[-1])","d2f6b0a6":"data.head()","5056581f":"# percentage calculation\nsuccess = data['Status Mission'].isin(['Success']).sum()\nFailure = data['Status Mission'].isin(['Failure']).sum()\nPartial_failure = data['Status Mission'].isin(['Partial_failure']).sum()\nPrelaunch_failure = data['Status Mission'].isin(['Prelaunch Failure']).sum()\nprint('The percentage of success',success\/len(data['Status Mission'])*100,'%')\nprint('The percentage of Failure',Failure\/len(data['Status Mission'])*100,'%')\nprint('The percentage of Partial_failure',Partial_failure\/len(data['Status Mission'])*100,'%')\nprint('The percentage of Prelaunch Failure',Prelaunch_failure\/len(data['Status Mission'])*100,'%')","577fa69e":"plt.figure(figsize=(10,10))\nlabels = ['success','failure','partial failure','prelaunch_failure']\npercentages = [success,Failure,Partial_failure, Prelaunch_failure]\nplt.pie(percentages, labels = labels,explode=[0,0,0.1,0.1], autopct='%1.1f%%',shadow= False)","22bf951b":"sns.countplot(data['Status Mission'])","55ed42ac":"data['Company Name'].value_counts()","2ac537a2":"ax = sns.countplot(x = 'Company Name',data=data,order=['RVSN USSR','NASA','ISRO','SpaceX','CASC'])\nfor p in ax.patches:\n        ax.annotate(format(p.get_height()), (p.get_x()+0.2, p.get_height()))","7d5f56db":"plt.figure(figsize=(10,10))\nsns.set(style=\"darkgrid\")\nax = sns.countplot(x = 'Company Name',data=data,order=['RVSN USSR','NASA','ISRO','SpaceX','CASC'],hue= \"Status Mission\",)\nfor p in ax.patches:\n        ax.annotate(format(p.get_height()), (p.get_x()-0.05, p.get_height()+20))","2cf839cb":"plt.figure(figsize=(10,10))\nsns.set(style=\"darkgrid\")\nsns.countplot(y = 'Country',data=data)","c45d6cf1":"plt.figure(figsize=(10,10))\nsns.set(style=\"darkgrid\")\nsns.countplot(y = 'Country',data=data,order=['Russia','USA','Kazakhstan','France','China','Japan','India'],hue='Status Mission')","99d7cf6a":"\nplt.figure(figsize=(10,10))\ncountry = data.groupby('Country')\nper_usa = len(country.get_group('USA'))\nper_russia = len(country.get_group('Russia'))\nper_china = len(country.get_group('China'))\nper_india= len(country.get_group('India'))\nper_france = len(country.get_group('France'))\nper = [per_usa,per_russia,per_china,per_india,per_france]\nlabels = ['USA','Russia','China','India','France']\nplt.figsize = (20,20)\nplt.pie(per,labels= labels,explode=[0,0,0,0.1,0], autopct='%1.1f%%')","06e9a039":"usa = country.get_group('USA')\nsns.countplot(usa['Status Mission'])","21986bb2":"plt.figure(figsize=(10,10))\nsuccess = usa['Status Mission'].isin(['Success']).sum()\nfailure = usa['Status Mission'].isin(['Failure']).sum()\npartial_failure = usa['Status Mission'].isin(['Partial Failure']).sum()\nprelaunch_failure = usa['Status Mission'].isin(['Prelaunce Failure']).sum()\noutcome = [success,failure,partial_failure,prelaunch_failure]\nlabels = ['Success','Failure','Partial Failure','Prelaunch Failure']\nplt.pie(outcome,labels= labels, autopct='%1.1f%%')\nplt.title('Percentage Suceessful and failed mission by USA ')\n","ea9636f3":"russia = country.get_group('Russia')\nsns.countplot(russia['Status Mission'])","ff29b945":"plt.figure(figsize=(10,10))\nsuccess = russia['Status Mission'].isin(['Success']).sum()\nfailure = russia['Status Mission'].isin(['Failure']).sum()\npartial_failure = russia['Status Mission'].isin(['Partial Failure']).sum()\nprelaunch_failure = russia['Status Mission'].isin(['Prelaunce Failure']).sum()\noutcome = [success,failure,partial_failure,prelaunch_failure]\nlabels = ['Success','Failure','Partial Failure','Prelaunch Failure']\nplt.pie(outcome,labels= labels, autopct='%1.1f%%')\nplt.title('Percentage Suceessful and failed mission by Russia ')","83568e41":"plt.figure(figsize=(5,5))\nindia = country.get_group('India')\nsns.countplot(india['Status Mission'])","eac4c7ef":"plt.figure(figsize=(10,10))\nsuccess = india['Status Mission'].isin(['Success']).sum()\nfailure = india['Status Mission'].isin(['Failure']).sum()\npartial_failure = india['Status Mission'].isin(['Partial Failure']).sum()\nprelaunch_failure = india['Status Mission'].isin(['Prelaunce Failure']).sum()\noutcome = [success,failure,partial_failure,prelaunch_failure]\nlabels = ['Success','Failure','Partial Failure','Prelaunch Failure']\nplt.pie(outcome,labels= labels, autopct='%1.1f%%')\nplt.title('Percentage Suceessful and failed mission by India ')","13c184a8":"plt.figure(figsize=(10,10))\nst = data['Status Rocket'].value_counts()\nplt.pie(st,shadow=False,autopct='%1.1f%%',colors=('tab:red', 'tab:blue'),explode=(0,0.05),startangle=40)\nplt.legend(['Stattus Retired','Status Acitve'])\nplt.title('Status Rocket', fontsize=18)\nplt.show()","b77ff5e7":"data['Year'] = pd.to_datetime(data['Datum']).apply(lambda year: year.year)\n","0bcf673a":"plt.figure(figsize=(20,10))\nsns.distplot(data['Year'],bins = 83)","e75fea05":"\nplt.figure(figsize=(10,20))\nsns.countplot(y = data['Year'])","e68b69f5":"### Classifying the databased on success and failure of the mission by the most popular companies","729473e7":"### Russia ","822180cf":"### visualizing the year wise change in the number of space missions ","2253b92e":"### Analyzing the feature 'Status Rocket'","36784c1c":"## Feature Engineering and Data Cleaning","b4dccdfc":"This is just after the checking the dataset and I keep changing the dataset as required while visulization","1681856e":"### Now I would analyse on the basis of the country who have launched the mission","f7d1869d":"### Russia and USA have done the most number of space mission","de5f476e":"# Data Visualization","092ec42f":"#### Lets first analyse how many missions were successful and how many of them were failure using countplot and pie chart.","59837b33":"### Analysis on the basis of company who manufactured. ","23036370":"### India ","1ad5e261":"### The plot gets clumsy if each and every company is plotted on it, so plotting some of the well known company. ","4206f6bc":"### Lets analyze USA space missions "}}