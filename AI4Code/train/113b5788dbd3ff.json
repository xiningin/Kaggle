{"cell_type":{"8709163c":"code","6c196f0e":"code","e54b99f8":"code","35a44a5b":"code","3c55e6c7":"code","2f12e750":"code","4664fbc0":"code","35730c11":"code","4bc9b849":"code","8ff217bc":"code","3db381d7":"code","9e3d73c2":"code","bc25f919":"code","b67be802":"code","466e18b0":"code","b819997e":"code","da2fca70":"code","935d2770":"code","4b724d01":"code","0cac0a38":"code","a64501a0":"code","95350a69":"code","a7a7220c":"code","b0c128d8":"code","60a68557":"code","2d85c5f5":"code","abe662b2":"code","5443b2ce":"code","ca438caa":"code","acdb63ff":"code","45b30fb1":"code","ffc0ca1e":"code","39935ac4":"code","2bdd3b0a":"markdown","f0ceb17d":"markdown","02650950":"markdown","6a8a0952":"markdown","57d7e637":"markdown","d1e168ee":"markdown","5dfe22fe":"markdown","c5212182":"markdown","c5b3b951":"markdown","b7c991e8":"markdown","35741e65":"markdown","d213a646":"markdown","32e956ec":"markdown","287bb0f8":"markdown","d2b72f5c":"markdown","87b1095f":"markdown","2ce5cd20":"markdown","f4830490":"markdown","47e4994f":"markdown","5cc5f1f4":"markdown","d7e650dd":"markdown","4c784ff6":"markdown"},"source":{"8709163c":"import os\nTITANIC_PATH = os.path.join(\"..\/input\/\", \"titanic\")\nimport pandas as pd\nfrom sklearn.base import BaseEstimator, TransformerMixin\nfrom sklearn.pipeline import Pipeline\nfrom sklearn.impute import SimpleImputer\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.model_selection import cross_val_score\nfrom sklearn.svm import SVC\nfrom sklearn.pipeline import FeatureUnion\nimport matplotlib.pyplot as plt\nimport seaborn as sns","6c196f0e":"def load_titanic_data(filename, titanic_path=TITANIC_PATH):\n    csv_path = os.path.join(titanic_path, filename)\n    return pd.read_csv(csv_path)","e54b99f8":"train_data = load_titanic_data(\"train.csv\")\ntest_data = load_titanic_data(\"test.csv\")","35a44a5b":"train_data.head()","3c55e6c7":"train_data.info()","2f12e750":"train_data.describe()","4664fbc0":"train_data[\"Survived\"].value_counts()","35730c11":"fig, ax = plt.subplots(1, 1, figsize=(9,6), sharey=True)\nsns.countplot(x='Survived',data=train_data,palette=\"rocket_r\",hue='Sex')\nplt.xlabel(\"Survived\",size=10)\nplt.ylabel(\"Passengers\",size=10)\nplt.show()","4bc9b849":"train_data[\"Pclass\"].value_counts()","8ff217bc":"fig, ax = plt.subplots(1, 1, figsize=(9,6), sharey=True)\nsns.countplot(x='Pclass',data=train_data,palette=\"rocket_r\",hue='Sex')\nplt.xlabel(\"Pclass\",size=10)\nplt.ylabel(\"Passengers\",size=10)\nplt.show()","3db381d7":"train_data[\"Sex\"].value_counts()","9e3d73c2":"fig, ax = plt.subplots(1, 1, figsize=(9,6), sharey=True)\nsns.countplot(x='Sex',data=train_data,palette=\"rocket_r\",hue='Survived')\nplt.xlabel(\"Sex\",size=10)\nplt.ylabel(\"Passengers\",size=10)\nplt.show()","bc25f919":"train_data[\"Embarked\"].value_counts()","b67be802":"fig, ax = plt.subplots(1, 1, figsize=(9,6), sharey=True)\nsns.countplot(x='Embarked',data=train_data,palette=\"rocket_r\",hue='Survived')\nplt.xlabel(\"Embarked\",size=10)\nplt.ylabel(\"Passengers\",size=10)\nplt.show()","466e18b0":"class DataFrameSelector(BaseEstimator, TransformerMixin):\n    def __init__(self, attribute_names):\n        self.attribute_names = attribute_names\n    def fit(self, X, y=None):\n        return self\n    def transform(self, X):\n        return X[self.attribute_names]","b819997e":"num_pipeline = Pipeline([\n        (\"select_numeric\", DataFrameSelector([\"Age\", \"SibSp\", \"Parch\", \"Fare\"])),\n        (\"imputer\", SimpleImputer(strategy=\"median\")),\n    ])","da2fca70":"num_pipeline.fit_transform(train_data)\n","935d2770":"class MostFrequentImputer(BaseEstimator, TransformerMixin):\n    def fit(self, X, y=None):\n        self.most_frequent_ = pd.Series([X[c].value_counts().index[0] for c in X],\n                                        index=X.columns)\n        return self\n    def transform(self, X, y=None):\n        return X.fillna(self.most_frequent_)","4b724d01":"from sklearn.preprocessing import OneHotEncoder","0cac0a38":"cat_pipeline = Pipeline([\n        (\"select_cat\", DataFrameSelector([\"Pclass\", \"Sex\", \"Embarked\"])),\n        (\"imputer\", MostFrequentImputer()),\n        (\"cat_encoder\", OneHotEncoder(sparse=False)),\n    ])","a64501a0":"cat_pipeline.fit_transform(train_data)\n","95350a69":"preprocess_pipeline = FeatureUnion(transformer_list=[\n        (\"num_pipeline\", num_pipeline),\n        (\"cat_pipeline\", cat_pipeline),\n    ])","a7a7220c":"X_train = preprocess_pipeline.fit_transform(train_data)\nX_train","b0c128d8":"y_train = train_data[\"Survived\"]","60a68557":"svm_clf = SVC(gamma=\"auto\")\nsvm_clf.fit(X_train, y_train)","2d85c5f5":"X_test = preprocess_pipeline.transform(test_data)\ny_pred = svm_clf.predict(X_test)","abe662b2":"svm_scores = cross_val_score(svm_clf, X_train, y_train, cv=10)\nsvm_scores.mean()","5443b2ce":"forest_clf = RandomForestClassifier(n_estimators=100, random_state=42)\nforest_scores = cross_val_score(forest_clf, X_train, y_train, cv=10)\nforest_scores.mean()","ca438caa":"plt.figure(figsize=(8, 4))\nplt.plot([1]*10, svm_scores, \".\")\nplt.plot([2]*10, forest_scores, \".\")\nplt.boxplot([svm_scores, forest_scores], labels=(\"SVM\",\"Random Forest\"))\nplt.ylabel(\"Accuracy\", fontsize=14)\nplt.show()","acdb63ff":"train_data[\"AgeBucket\"] = train_data[\"Age\"] \/\/ 15 * 15\ntrain_data[[\"AgeBucket\", \"Survived\"]].groupby(['AgeBucket']).mean()","45b30fb1":"train_data[\"RelativesOnboard\"] = train_data[\"SibSp\"] + train_data[\"Parch\"]\ntrain_data[[\"RelativesOnboard\", \"Survived\"]].groupby(['RelativesOnboard']).mean()","ffc0ca1e":"y = train_data[\"Survived\"]\n\nfeatures = [\"Pclass\", \"Sex\", \"SibSp\", \"Parch\"]\nX = pd.get_dummies(train_data[features])\nX_test = pd.get_dummies(test_data[features])\n\nmodel = RandomForestClassifier(n_estimators=100, random_state=42)\nforest_scores = cross_val_score(forest_clf, X_train, y_train, cv=10)\n#RandomForestClassifier(n_estimators=100, max_depth=5, random_state=1)\nmodel.fit(X, y)\npredictions = model.predict(X_test)\naccuracy = cross_val_score(model, X_train, y_train, cv=10)\naccuracy.mean()","39935ac4":"output = pd.DataFrame({'PassengerId': test_data.PassengerId, 'Survived': predictions})\noutput.to_csv('my_submission_TITANIC.csv', index=False)\nprint(\"Your submission was successfully saved!\")","2bdd3b0a":"We will also need an imputer for the string categorical columns (the regular SimpleImputer does not work on those):\n\n","f0ceb17d":"Finally, let's join the numerical and categorical pipelines:\n\n","02650950":"And now we could just build a CSV file with these predictions (respecting the format excepted by Kaggle), then upload it and hope for the best. But wait! We can do better than hope. Why don't we use cross-validation to have an idea of how good our model is?","6a8a0952":"We are now ready to train a classifier. Let's start with an SVC:\n\n","57d7e637":"Now let's take a quick look at all the categorical attributes:\n\n","d1e168ee":"Let's not forget to get the labels:\n\n","5dfe22fe":"# SVC","c5212182":"# Random Forest Classifier","c5b3b951":"Now we can build the pipeline for the categorical attributes:\n\n","b7c991e8":"Okay, over 73% accuracy, clearly better than random chance, but it's not a great score. So let's try to build a model that reaches 80% accuracy.","35741e65":"Okay, the **Age**, **Cabin** and **Embarked** attributes are sometimes null (less than 891 non-null), especially the Cabin (77% are null). We will ignore the Cabin for now and focus on the rest. The Age attribute has about 19% null values, so we will need to decide what to do with them. Replacing null values with the median age seems reasonable.\n\nThe Name and Ticket attributes may have some value, but they will be a bit tricky to convert into useful numbers that a model can consume. So for now, we will ignore them.\n\nLet's take a look at the numerical attributes:","d213a646":"The data is already split into a training set and a test set. However, the test data does not contain the labels: your goal is to train the best model you can using the training data, then make your predictions on the test data and upload them to Kaggle to see your final score.\n\nLet's take a peek at the top few rows of the training set:","32e956ec":"Let's try a **RandomForestClassifier**:\n\n","287bb0f8":"Great, our model is trained, let's use it to make predictions on the test set:\n\n","d2b72f5c":"* Yikes, only 38% Survived. :( That's close enough to 40%, so accuracy will be a reasonable metric to evaluate our model.\n\n* The mean Fare was \u00a332.20, which does not seem so expensive (but it was probably a lot of money back then).\n\n* The mean Age was less than 30 years old.\n\n**Let's check that the target is indeed 0 or 1:**","87b1095f":"**The Embarked attribute tells us where the passenger embarked: C=Cherbourg, Q=Queenstown,S=Southampton.**\n\n","2ce5cd20":"That's much better!\n\n","f4830490":"Let's build the pipeline for the numerical attributes:\n\n","47e4994f":"Now let's build our preprocessing pipelines. We will reuse the DataframeSelector we built in the previous chapter to select specific attributes from the DataFrame:","5cc5f1f4":"The attributes have the following meaning:\n\n**Survived:** that's the target, 0 means the passenger did not survive, while 1 means he\/she survived.\n\n**Pclass:** passenger class.\n\n**Name, Sex, Age:** self-explanatory\n\n**SibSp:** how many siblings & spouses of the passenger aboard the Titanic.\n\n**Parch:** how many children & parents of the passenger aboard the Titanic.\n\n**Ticket:** ticket id\n\n**Fare:** price paid (in pounds)\n\n**Cabin:** passenger's cabin number\n\n**Embarked:** where the passenger embarked the Titanic\n\nLet's get more info to see how much data is missing:","d7e650dd":"**The goal is to predict whether or not a passenger survived based on attributes such as their age,**\n**sex, passenger class, where they embarked and so on.**\n \n let's load the data:","4c784ff6":"Cool! Now we have a nice preprocessing pipeline that takes the raw data and outputs numerical input features that we can feed to any Machine Learning model we want."}}