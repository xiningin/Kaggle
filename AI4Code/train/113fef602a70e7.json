{"cell_type":{"29f3e130":"code","096a459e":"code","c92ede52":"code","750cfdfa":"code","57336627":"code","aeeb1085":"code","0f2cf8d2":"code","d782e82b":"code","1dfad70e":"code","759b6733":"code","38b07736":"code","47753fcd":"code","ddd9f630":"code","8f55b968":"code","c3fe2cb9":"code","9085f4e2":"code","122e538f":"code","28051ac4":"code","2caef262":"code","c27311c9":"code","e6ff7e89":"code","44e40d98":"code","bade6b86":"code","f494b54e":"code","e9ffe8b8":"markdown","e272ec30":"markdown","338c630a":"markdown","2f271710":"markdown","e09cfc4c":"markdown","3512c66d":"markdown","41d3ab6a":"markdown"},"source":{"29f3e130":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","096a459e":"import matplotlib.pyplot as plt\nimport seaborn as sns; sns.set()\n\nfrom sklearn import tree\nimport graphviz \nimport os\nimport preprocessing \n\nfrom sklearn.preprocessing import normalize\nfrom sklearn.preprocessing import StandardScaler, LabelEncoder, OneHotEncoder\nfrom sklearn.model_selection import train_test_split\n\nfrom sklearn.pipeline import Pipeline, make_pipeline\nfrom sklearn.decomposition import PCA\n\n\nfrom sklearn.linear_model import LinearRegression\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.neighbors import KNeighborsClassifier\n\nfrom sklearn.metrics import confusion_matrix, accuracy_score\nfrom sklearn.metrics import precision_score, recall_score, f1_score\nfrom sklearn.metrics import classification_report\n","c92ede52":"data = pd.read_csv('..\/input\/iris\/Iris.csv')\n","750cfdfa":"data.head()","57336627":"data.isnull().sum().sum()","aeeb1085":"setosa = data[data['Species'] == 'Iris-setosa']\nversicolor = data[data['Species'] == 'Iris-versicolor']\nvirginica = data[data['Species'] == 'Iris-virginica']","0f2cf8d2":"feature = 'SepalLengthCm'\n\nbp_data = [setosa[feature], versicolor[feature], virginica[feature]]\nplt.boxplot(bp_data, vert=False, labels=['setosa', 'versicolor', 'virginica'])\nplt.show()","d782e82b":"sns.boxplot(x='SepalLengthCm', y='Species', data=data)\nplt.show()","1dfad70e":"sns.barplot(x='SepalLengthCm', y='Species', data=data)\nplt.show()","759b6733":"plt.scatter(setosa['SepalLengthCm'].values, setosa['SepalWidthCm'].values)\nplt.scatter(virginica['SepalLengthCm'].values, virginica['SepalWidthCm'].values)\nplt.scatter(versicolor['SepalLengthCm'].values, versicolor['SepalWidthCm'].values)\nplt.show()","38b07736":"sns.scatterplot(x='SepalLengthCm', y='SepalWidthCm', data=setosa)\nsns.scatterplot(x='SepalLengthCm', y='SepalWidthCm', data=virginica)\nsns.scatterplot(x='SepalLengthCm', y='SepalWidthCm', data=versicolor)\nplt.show()","47753fcd":"plt.plot(setosa['SepalLengthCm'].values, setosa['SepalWidthCm'].values)\nplt.plot(virginica['SepalLengthCm'].values, virginica['SepalWidthCm'].values)\nplt.plot(versicolor['SepalLengthCm'].values, versicolor['SepalWidthCm'].values)\nplt.show()","ddd9f630":"plt.figure(figsize=(15,10))\nplt.subplot(2,2,1)\nsns.violinplot(x='Species',y='PetalLengthCm',data=data)\nplt.subplot(2,2,2)\nsns.violinplot(x='Species',y='PetalWidthCm',data=data)\nplt.subplot(2,2,3)\nsns.violinplot(x='Species',y='SepalLengthCm',data=data)\nplt.subplot(2,2,4)\nsns.violinplot(x='Species',y='SepalWidthCm',data=data)","8f55b968":"species_mapping = {'Iris-setosa':0, 'Iris-versicolor':1, 'Iris-virginica':2}","c3fe2cb9":"data['Species'] = data['Species'].map(species_mapping)\n","9085f4e2":"print(data['Species'])","122e538f":"X=data.drop(['Id','Species'],axis=1)\ny=data['Species']","28051ac4":"from sklearn.preprocessing import StandardScaler\n\nsc = StandardScaler()\nX = sc.fit_transform(X)\n","2caef262":"X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.33, random_state=101) \n\nprint(f'Total # of sample in whole dataset: {len(X)}')\nprint(f'Total # of sample in train dataset: {len(X_train)}')\nprint(f'Total # of sample in test dataset: {len(X_test)}')","c27311c9":"LogReg = LogisticRegression()","e6ff7e89":"LogReg.fit(X_train, y_train)","44e40d98":"y_pred = LogReg.predict(X_test)\nfrom sklearn.metrics import accuracy_score\naccuracy_score(y_pred, y_test)","bade6b86":"knn=KNeighborsClassifier(n_neighbors=10)\nknn.fit(X_train,y_train)\npred=knn.predict(X_test)","f494b54e":"print(confusion_matrix(y_test,pred))\nprint('\\n')\nprint(classification_report(y_test,pred))\naccuracy_score(pred, y_test)","e9ffe8b8":"# Import Data","e272ec30":"# Train-Test Split","338c630a":"# Scatter Plot","2f271710":"# Violin Plot","e09cfc4c":"# Logistic Regression","3512c66d":"# Box Plot","41d3ab6a":"# KNN Classifier"}}