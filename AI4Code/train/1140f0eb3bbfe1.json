{"cell_type":{"d98ca3cc":"code","2855ef65":"code","d2b38438":"code","a3850861":"code","b26e74ec":"code","ed984ff3":"code","d64aff74":"code","06c1dc9f":"code","c9b5864a":"code","fa09ac59":"code","10f86273":"code","7943f95c":"code","b78e4fb8":"code","049e15b2":"code","61f0c3c6":"code","f6ed484a":"code","3316215a":"code","019ef16e":"code","aad32011":"code","ac271489":"code","71e1856c":"code","f54131d1":"code","7290b0ee":"code","54ac9637":"code","447dc6b6":"code","a58dc2b6":"code","4f3fb6c8":"code","20f3f6b2":"code","11b788d9":"code","5442f883":"code","d8846cee":"code","189c1622":"code","42e3d8db":"code","677b85d0":"code","a3ab71f2":"code","e81da867":"code","9adaf988":"code","93925af0":"code","af1bebc1":"code","aaa96912":"markdown","a7130fd5":"markdown","72e50357":"markdown","1b6ff04d":"markdown","bf730e9d":"markdown","c07f0f0a":"markdown","f97d9940":"markdown","c0338a30":"markdown"},"source":{"d98ca3cc":"%matplotlib  inline\n\nimport numpy as np \nimport pandas as pd \n\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nsns.set()\n\nimport glob\nimport missingno as msno\nfrom fbprophet import Prophet\n\nfrom datetime import datetime, timedelta\nfrom statsmodels.tsa.arima_model import ARIMA\nfrom statsmodels.tsa.statespace.sarimax import SARIMAX\nfrom statsmodels.graphics.tsaplots import plot_acf, plot_pacf\nfrom statsmodels.tsa.stattools import adfuller\nfrom statsmodels.tsa.seasonal import seasonal_decompose\nfrom scipy import stats\nimport statsmodels.api as sm\nfrom itertools import product\nfrom math import sqrt\nfrom sklearn.metrics import mean_squared_error \n\nimport warnings\nwarnings.filterwarnings('ignore')\n\nimport os\nprint(os.listdir(\"..\/input\"))","2855ef65":"colors = [\"windows blue\", \"amber\", \"faded green\", \"dusty purple\"]\nsns.set(rc={\"figure.figsize\": (20,10), \"axes.titlesize\" : 18, \"axes.labelsize\" : 12, \n            \"xtick.labelsize\" : 14, \"ytick.labelsize\" : 14 })","d2b38438":"path =r'..\/input\/csvs_per_year\/csvs_per_year\/' # use your path\nallFiles = glob.glob(path + \"\/*.csv\")\nframe = pd.DataFrame()\nlist_ = []\nfor file_ in allFiles:\n    df = pd.read_csv(file_,index_col=None, header=0)\n    list_.append(df)\nframe = pd.concat(list_)\n\ncols = ['date', 'station', 'BEN', 'CH4', 'CO', 'EBE', 'MXY', 'NMHC', 'NO', 'NO_2', 'NOx', 'OXY',\n       'O_3', 'PM10', 'PM25', 'PXY', 'SO_2', 'TCH', 'TOL']\nframe = frame[cols]\nframe = frame.sort_values(['station', 'date'])\n\nframe.tail(3)","a3850861":"msno.matrix(frame);","b26e74ec":"msno.bar(frame);","ed984ff3":"stations = pd.read_csv('..\/input\/stations.csv')\nstations.head(1)","d64aff74":"locations  = stations[['lat', 'lon']]\nlocationlist = locations.values.tolist()\n\npopup = stations[['name']]\n\nimport folium\nmap_osm = folium.Map(location=[40.44, -3.69],\n                    # tiles='Stamen Toner',\n                     zoom_start=11) \n\nfor point in range(0, len(locationlist)):\n    folium.Marker(locationlist[point], popup=popup.iloc[point,0]).add_to(map_osm)\n    \nmap_osm","06c1dc9f":"cols = ['date', 'station', 'O_3']\no3 = frame[cols]\n\no3['date'] = pd.to_datetime(o3['date'])\no3['ppb'] = 24.45*o3['O_3'] \/48\n\no3.head()","c9b5864a":"# active stations with time\nplt.plot(o3.groupby(['date']).station.nunique());","fa09ac59":"# non-nulls per station\ncount_rows = pd.DataFrame(o3.groupby(['station']).O_3.count())\ntop3 = count_rows.sort_values('O_3', ascending=False).head(3)\ntop3","10f86273":"stations[stations.id == top3.index[0]]","7943f95c":"# select station with most data\no3_station = o3[o3.station == top3.index[0]]\n\n# Calculate Eight-Hour Average Ozone Concentrations\no3_station['ppb_rolling'] = o3_station['ppb'].rolling(8).mean()\n\ndel o3_station['station']\ndel o3_station['O_3']\ndel o3_station['ppb']\n\no3_station = o3_station.sort_values(\"date\")\n\no3_station.columns = ['ds', 'y']\no3_station.set_index('ds', inplace=True)\n\n# Resample to daily max\no3_station = o3_station.resample('D', how='max')\n\n# Any missing dates?\nd = pd.DataFrame(pd.date_range(start= o3_station.index.min(), end= o3_station.index.max(), freq='D'))   \n\no3_station.reset_index(level=0, inplace=True)\no3_station = d.join(o3_station)\ndel o3_station['ds']","b78e4fb8":"o3_station.columns = ['ds', 'y']\n\n# fill na \no3_station['y'].fillna(0, inplace=True)","049e15b2":"# 3 years in hours\ni = 3*365 \n\n# Train test split \ntrain = o3_station[1:-i]\ntest = o3_station[-i:]\n\ntrain.info()","61f0c3c6":"fig, ax = plt.subplots()\nfig.set_size_inches(12, 8)\n\nax = sns.scatterplot(x=train.index, y=train.y)\nax = sns.scatterplot(x=test.index, y=test.y)\n\nax.axes.set_xlim(train.index.min(), test.index.max());","f6ed484a":"train.reset_index(level=0, inplace=True)\ntest.reset_index(level=0, inplace=True)\n\ntrain['y'] = np.log1p(train.y)\ntest['y'] = np.log1p(test.y)\n\ntrain.head()","3316215a":"%%time\n\nm = Prophet(changepoint_prior_scale=0.01) \nm.fit(train)","019ef16e":"%%time\nfuture = m.make_future_dataframe(periods=i, freq='D')\n\nforecast = m.predict(future)\nforecast[['ds', 'yhat', 'yhat_lower', 'yhat_upper']].tail()","aad32011":"from  fbprophet.plot import add_changepoints_to_plot\nfig = m.plot(forecast)\na = add_changepoints_to_plot(fig.gca(), m, forecast)","ac271489":"fig2 = m.plot_components(forecast);","71e1856c":"test = pd.concat([test.set_index('ds'),forecast.set_index('ds')], axis=1, join='inner')\n\ncols = ['y', 'yhat', 'yhat_lower', 'yhat_upper']\ntest = test[cols]\n#test['y'] = np.expm1(test.y)\n#test['yhat'] = np.expm1(test.yhat)\n#test['yhat_lower'] = np.expm1(test.yhat_lower)\n#test['yhat_upper'] = np.expm1(test.yhat_upper)\n\ntest.tail()","f54131d1":"fig, ax = plt.subplots()\nfig.set_size_inches(12, 8)\n\nplt.plot(test.y)\nplt.plot(test.yhat)\nplt.legend();","7290b0ee":"test['e'] = test.y - test.yhat\n\nrmse = np.round(np.sqrt(np.mean(test.e**2)),2)\nmape = np.round(np.mean(np.abs(100*test.e\/test.y)), 2)\nprint('RMSE =', rmse)\nprint('MAPE =', mape, '%')","54ac9637":"cols = ['ds', 'y']\ntrain = train[cols]\n\ntrain.set_index('ds', inplace=True)\ntrain.head()","447dc6b6":"test.head()","a58dc2b6":"colors = [\"windows blue\", \"amber\", \"faded green\", \"dusty purple\"]\nsns.set(rc={\"figure.figsize\": (20,10), \"axes.titlesize\" : 18, \"axes.labelsize\" : 12, \n            \"xtick.labelsize\" : 14, \"ytick.labelsize\" : 14 })","4f3fb6c8":"seasonal_decompose(train.y, model='additive').plot()\nprint(\"Dickey\u2013Fuller test: p=%f\" % adfuller(train.y)[1])","20f3f6b2":"# Initial approximation of parameters using Autocorrelation and Partial Autocorrelation Plots\nax = plt.subplot(211)\n\n# Plot the autocorrelation function\nplot_acf(train.y[0:].values.squeeze(), lags=750, ax=ax)\nax = plt.subplot(212)\nplot_pacf(train.y[0:].values.squeeze(), lags=750, ax=ax)\nplt.tight_layout()","11b788d9":"# Initial approximation of parameters\nps = range(0, 2)\nd = 1\nqs = range(0, 2)\n\nparameters = product(ps, qs)\nparameters_list = list(parameters)\nlen(parameters_list)","5442f883":"%%time \n\n# Model Selection\nresults = []\nbest_aic = float(\"inf\")\nwarnings.filterwarnings('ignore')\nfor param in parameters_list:\n    try:\n        model = SARIMAX(train.y, order=(param[0], d, param[1])).fit(disp=-1)\n    except ValueError:\n        print('bad parameter combination:', param)\n        continue\n    aic = model.aic\n    if aic < best_aic:\n        best_model = model\n        best_aic = aic\n        best_param = param\n    results.append([param, model.aic])","d8846cee":"# Best Models\nresult_table = pd.DataFrame(results)\nresult_table.columns = ['parameters', 'aic']\nprint(result_table.sort_values(by='aic', ascending=True).head())","189c1622":"print(best_model.summary())","42e3d8db":"print(\"Dickey\u2013Fuller test:: p=%f\" % adfuller(best_model.resid[13:])[1])","677b85d0":"best_model.plot_diagnostics(figsize=(15, 12))\nplt.show()","a3ab71f2":"test['yhat_ARIMA'] = best_model.forecast(test.shape[0])\ntest.tail()","e81da867":"np.expm1(test.y).plot(linewidth=3)\nnp.expm1(test.yhat_ARIMA).plot(color='r', ls='--', label='Predicted Units', linewidth=3)\n\nplt.legend()\nplt.grid()\nplt.title('Max 8-hour average ozone concentration - daily forecast')\nplt.ylabel('parts per billion');","9adaf988":"test['e'] = test.y - test.yhat_ARIMA\n\nrmse = np.round(np.sqrt(np.mean(test.e**2)),2)\nmape = np.round(np.mean(np.abs(100*test.e\/test.y)), 2)\nprint('RMSE =', rmse)\nprint('MAPE =', mape, '%')","93925af0":"test.tail()","af1bebc1":"np.expm1(test.y).plot(linewidth=3)\n\nnp.expm1(test.yhat_ARIMA).plot(color='grey', ls='--', label='ARIMA forecast', linewidth=3)\nnp.expm1(test.yhat).plot(color='r', ls='--', label='Prophet forecast', linewidth=3)\n\nplt.legend()\nplt.grid()\nplt.title('Max 8-hour average ozone concentration - daily forecast')\nplt.ylabel('parts per billion');","aaa96912":"# Missing data?","a7130fd5":"# Where are the stations?","72e50357":"# Results so far","1b6ff04d":"# Modelling with fbprophet","bf730e9d":"## Stationarity check and Seasonal decomposition","c07f0f0a":"# Lets focus on Ozone \n* **`O_3`** ozone level measured in **\u03bcg\/m\u00b3**. \n* High levels can produce asthma, bronchytis or other chronic pulmonary diseases in sensitive groups or outdoor workers.\n\n## Tropospheric \u201cbad\u201d ozone [Source](https:\/\/ozonewatch.gsfc.nasa.gov\/facts\/SH.html)\nAlthough ozone high up in the stratosphere provides a shield to protect life on Earth, direct contact with ozone is harmful to both plants and animals (including humans). Ground-level, \u201cbad,\u201d ozone forms when **nitrogen oxide** gases from vehicle and industrial emissions react with volatile organic compounds (carbon-containing chemicals that evaporate easily into the air, such as paint thinners). In the troposphere near the Earth\u2019s surface, the natural concentration of ozone is about 10 parts per billion (0.000001 percent). According to the Environmental Protection Agency, exposure to ozone levels of greater than **70 parts per billion for 8 hours or longer is unhealthy**. Such concentrations occur in or near cities during periods where the atmosphere is warm and stable. The harmful effects can include throat and lung irritation or aggravation of asthma or emphysema.\n\n## Concentration\n[Source](https:\/\/cfpub.epa.gov\/ncer_abstracts\/index.cfm\/fuseaction\/display.files\/fileID\/14285)\n\nconcentration (ppb) = 24.45 x concentration (ug\/m3) \u00f7 molecular weight \n\nfor $O_3 = 48 g\/mol$\n\n\n## Eight-Hour Average Ozone Concentrations\n\n[Source](https:\/\/www3.epa.gov\/region1\/airquality\/avg8hr.html)\n\nBased on extensive scientific evidence about the effects of ozone on public health and welfare, on October 1, 2015, EPA strengthened the ground-level ozone standard to 0.070 ppm, averaged over an 8-hour period. This standard is met at an air quality monitor when the 3-year average of the annual fourth-highest daily maximum **8-hour average ozone concentration** is less than or equal to 0.070 ppm.","f97d9940":"# Read in data","c0338a30":"# Modelling with ARIMA"}}