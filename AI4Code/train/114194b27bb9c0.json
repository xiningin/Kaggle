{"cell_type":{"a08112ec":"code","0932c379":"code","f3918b24":"code","b6628c8d":"code","08c887e3":"code","e11eee4b":"code","0cfb324e":"code","0c33ae16":"code","2200ff5f":"code","f7e84c06":"code","95a224a0":"code","4d90b9a5":"code","b9c5079a":"code","f2881257":"code","f0083409":"code","5f91cce1":"code","bcdaabfb":"code","cc34dc5a":"code","8b8b31a5":"code","28c653ea":"code","49f2ccc5":"code","7cc7315a":"code","79466d65":"code","d9cc7a8b":"code","08d2f209":"code","b38887d5":"code","c9f80f67":"code","b06e46d8":"code","556c957d":"code","9b7e871d":"code","d1d68a9d":"code","e2fdfcd4":"code","8570c96d":"code","1053cf94":"code","9630318c":"code","be874f2a":"code","7aaa2e66":"code","575d7d5c":"code","1c6e0e51":"code","8d0fa3b4":"code","69966559":"code","eb33929d":"code","ac9a07e0":"markdown","9ae73823":"markdown","0fc1f76a":"markdown","8af7758b":"markdown","2de186f1":"markdown","4059e7e5":"markdown","0dd086d9":"markdown","c17b0def":"markdown","5cacdf59":"markdown","aa72784c":"markdown","98585ed6":"markdown","2bf8e761":"markdown","d6a60505":"markdown"},"source":{"a08112ec":"import torch\nfrom torch.utils.data import random_split\nimport torch.nn as nn\nimport torch.nn.functional as F\nimport torch.optim as optim\nfrom torchvision.datasets import ImageFolder\nimport torchvision.transforms as transforms\nimport torchvision.models as models\nfrom torch.utils.data.dataloader import DataLoader\nfrom torchvision.utils import make_grid\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport numpy as np\nimport os","0932c379":"data_dir = \"..\/input\/face-expression-recognition-dataset\/images\"\nclasses = os.listdir(data_dir+\"\/train\")\nclasses","f3918b24":"transforms_ = transforms.Compose([transforms.Resize(224),\n                                  transforms.ToTensor(),\n                                  transforms.Normalize((0.5,0.5,0.5), (0.5,0.5,0.5))])\ntrainset = ImageFolder(data_dir+\"\/train\", transform=transforms_)\nimg, label = trainset[5]\nprint(img.shape, label)\nprint(trainset.classes)\nprint(trainset.classes[label])\nplt.xticks([])\nplt.yticks([])\nplt.imshow(img.permute(1, 2, 0)\/2 + 0.5);  # Un-normalizing the image while showing","b6628c8d":"num_classes = 7\nclass_count = [0] * num_classes\nfor img, label in trainset:\n    class_count[label] += 1\n\nfor num, class_lab in zip(class_count, trainset.classes):\n    print(f\"{class_lab}:{num}\")\nprint(f\"Total number of images: {sum(class_count)}\")\nprint(f\"Class with the maximum number of images: {trainset.classes[class_count.index(max(class_count))]}({max(class_count)})\")\nprint(f\"Class with the minimum number of images: {trainset.classes[class_count.index(min(class_count))]}({min(class_count)})\")","08c887e3":"plt.figure(figsize=(7,7))\nplt.title(\"Bar plot of the number of images in each class\")\nsns.barplot(class_count, trainset.classes);","e11eee4b":"random_seed = 42\ntorch.manual_seed(random_seed);\n\nval_size = 2800\ntrain_size = len(trainset) - val_size\n\ntrain_ds, val_ds = random_split(trainset, [train_size, val_size])\nlen(train_ds), len(val_ds)","0cfb324e":"batch_size = 256\ntrain_dl = DataLoader(train_ds, batch_size, shuffle=True)\nval_dl = DataLoader(val_ds, batch_size*2)","0c33ae16":"def show_batch(dl):\n    for images, labels in dl:\n        fig, ax = plt.subplots(figsize=(12, 12))\n        ax.set_xticks([]); ax.set_yticks([])\n        ax.imshow(make_grid(images, nrow=16).permute(1, 2, 0)\/2 + 0.5) # Un-normalize the image while showing\n        break","2200ff5f":"show_batch(train_dl)","f7e84c06":"class ImageClassificationBase(nn.Module):\n    def training_step(self, batch):\n        images, labels = batch \n        out = self(images)                  # Generate predictions\n        loss = F.cross_entropy(out, labels) # Calculate loss\n        return loss\n    \n    def validation_step(self, batch):\n        images, labels = batch \n        out = self(images)                    # Generate predictions\n        loss = F.cross_entropy(out, labels)   # Calculate loss\n        acc = accuracy(out, labels)           # Calculate accuracy\n        return {'val_loss': loss.detach(), 'val_acc': acc}\n        \n    def validation_epoch_end(self, outputs):\n        batch_losses = [x['val_loss'] for x in outputs]\n        epoch_loss = torch.stack(batch_losses).mean()   # Combine losses\n        batch_accs = [x['val_acc'] for x in outputs]\n        epoch_acc = torch.stack(batch_accs).mean()      # Combine accuracies\n        return {'val_loss': epoch_loss.item(), 'val_acc': epoch_acc.item()}\n    \n    def epoch_end(self, epoch, result):\n        print(\"Epoch [{}], train_loss: {:.4f}, val_loss: {:.4f}, val_acc: {:.4f}\".format(\n            epoch, result['train_loss'], result['val_loss'], result['val_acc']))\n        \ndef accuracy(outputs, labels):\n    _, preds = torch.max(outputs, dim=1)\n    return torch.tensor(torch.sum(preds == labels).item() \/ len(preds))","95a224a0":"def get_default_device():\n    \"\"\"Pick GPU if available, else CPU\"\"\"\n    if torch.cuda.is_available():\n        return torch.device('cuda')\n    else:\n        return torch.device('cpu')\n    \ndef to_device(data, device):\n    \"\"\"Move tensor(s) to chosen device\"\"\"\n    if isinstance(data, (list,tuple)):\n        return [to_device(x, device) for x in data]\n    return data.to(device, non_blocking=True)\n\nclass DeviceDataLoader():\n    \"\"\"Wrap a dataloader to move data to a device\"\"\"\n    def __init__(self, dl, device):\n        self.dl = dl\n        self.device = device\n        \n    def __iter__(self):\n        \"\"\"Yield a batch of data after moving it to device\"\"\"\n        for b in self.dl: \n            yield to_device(b, self.device)\n\n    def __len__(self):\n        \"\"\"Number of batches\"\"\"\n        return len(self.dl)","4d90b9a5":"device = get_default_device()\ndevice","b9c5079a":"class Model(ImageClassificationBase):\n    def __init__(self):\n        super().__init__()\n        self.model = models.resnet18(pretrained=True)\n        for params in self.model.parameters():\n            params.requires_grad = False\n        input_shape = self.model.fc.in_features\n        self.model.fc = nn.Sequential(nn.Linear(input_shape, 1024),\n                                 nn.Linear(1024,7))\n        print(\"New Layers Added:\")\n        for params in self.model.parameters():\n            if params.requires_grad:\n                print(params.shape)\n    \n    def forward(self,x):\n        return self.model(x)","f2881257":"model = Model()\nmodel","f0083409":"train_dl = DeviceDataLoader(train_dl, device)\nval_dl = DeviceDataLoader(val_dl, device)\nto_device(model, device);","5f91cce1":"@torch.no_grad()\ndef evaluate(model, val_loader):\n    model.eval()\n    outputs = [model.validation_step(batch) for batch in val_loader]\n    return model.validation_epoch_end(outputs)\n\ndef fit(epochs, lr, model, train_loader, val_loader, opt_func=torch.optim.SGD):\n    history = []\n    optimizer = opt_func(model.parameters(), lr)\n    for epoch in range(epochs):\n        # Training Phase \n        model.train()\n        train_losses = []\n        for batch in train_loader:\n            loss = model.training_step(batch)\n            train_losses.append(loss)\n            loss.backward()\n            optimizer.step()\n            optimizer.zero_grad()\n        # Validation phase\n        result = evaluate(model, val_loader)\n        result['train_loss'] = torch.stack(train_losses).mean().item()\n        model.epoch_end(epoch, result)\n        history.append(result)\n    return history","bcdaabfb":"model = to_device(model, device)\nnum_epochs = 100\nopt_func = torch.optim.SGD\nlr = 0.01\nloss_fn = F.cross_entropy","cc34dc5a":"history_1 = fit(20, lr, model, train_dl, val_dl, opt_func)","8b8b31a5":"history_2 = fit(20, lr, model, train_dl, val_dl, opt_func)","28c653ea":"history_3 = fit(20, lr, model, train_dl, val_dl, opt_func)","49f2ccc5":"history_4 = fit(20, lr, model, train_dl, val_dl, opt_func)","7cc7315a":"history_5 = fit(20, lr, model, train_dl, val_dl, opt_func)","79466d65":"len(history_5)","d9cc7a8b":"history_6 = fit(20, lr, model, train_dl, val_dl, opt_func)","08d2f209":"print(len(history_6))","b38887d5":"history_7 = fit(20, lr, model, train_dl, val_dl, opt_func)","c9f80f67":"history_8 = fit(20, lr, model, train_dl, val_dl, opt_func)","b06e46d8":"history_9 = fit(20, lr, model, train_dl, val_dl, opt_func)","556c957d":"history_10 = fit(20, lr, model, train_dl, val_dl, opt_func)","9b7e871d":"history = history_1 + history_2 + history_3 + history_4 + history_5 + history_6 + history_7 + history_8 + history_9 + history_10","d1d68a9d":"def plot_accuracies(history):\n    accuracies = [x['val_acc'] for x in history]\n    plt.plot(accuracies, '-x')\n    plt.xlabel('epoch')\n    plt.ylabel('accuracy')\n    plt.title('Accuracy vs. No. of epochs');","e2fdfcd4":"def plot_losses(history):\n    train_losses = [x.get('train_loss') for x in history]\n    val_losses = [x['val_loss'] for x in history]\n    plt.plot(train_losses, '-bx')\n    plt.plot(val_losses, '-rx')\n    plt.xlabel('epoch')\n    plt.ylabel('loss')\n    plt.legend(['Training', 'Validation'])\n    plt.title('Loss vs. No. of epochs');","8570c96d":"plot_accuracies(history)","1053cf94":"plot_losses(history)","9630318c":"test_dataset = ImageFolder(data_dir+'\/validation', transform=transforms_)\n\ndef predict_image(img, model):\n    # Convert to a batch of 1\n    xb = to_device(img.unsqueeze(0), device)\n    # Get predictions from model\n    yb = model(xb)\n    # Pick index with highest probability\n    _, preds  = torch.max(yb, dim=1)\n    # Retrieve the class label\n    return test_dataset.classes[preds[0].item()]","be874f2a":"img, label = test_dataset[0]\nplt.imshow(img.permute(1, 2, 0)\/2 + 0.5) # Un-normalize the image\nprint('Label:', test_dataset.classes[label], ', Predicted:', predict_image(img, model))","7aaa2e66":"img, label = test_dataset[1000]\nplt.imshow(img.permute(1, 2, 0)\/2 + 0.5) # Un-normalize the image\nprint('Label:', test_dataset.classes[label], ', Predicted:', predict_image(img, model))","575d7d5c":"img, label = test_dataset[6153]\nplt.imshow(img.permute(1, 2, 0)\/2 + 0.5) # Un-normalize the image\nprint('Label:', test_dataset.classes[label], ', Predicted:', predict_image(img, model))","1c6e0e51":"test_loader = DeviceDataLoader(DataLoader(test_dataset, batch_size*2), device)\nresult = evaluate(model, test_loader)\nresult","8d0fa3b4":"torch.save(model.state_dict(), 'face-expressions-cnn.pth')","69966559":"model2 = to_device(Model(), device)","eb33929d":"model2.load_state_dict(torch.load('.\/face-expressions-cnn.pth'))\nevaluate(model2, test_loader)","ac9a07e0":"The dataset mentioned above was downloaded from Kaggle. This dataset containes images of humans with 7 different expressions.\n<br> They are:\n* angry\n* disgust\n* fear\n* happy\n* neutral\n* sad and\n* surprise\n\nThis is a classification task where we are to build a model that can classify the different facial expressions of humans.\n\nfirst we'll load the dataset and explore it.","9ae73823":"# Human Face Eppressions Detection\nIn this project, We build a Convolutional Neural Network that can classify the different facial expression that humans make. The dataset used here is obtained from [this Kaggle page](https:\/\/www.kaggle.com\/jonathanoheix\/face-expression-recognition-dataset).","0fc1f76a":"So in this project we saw that creating a CNN model to classify human facial expressions was very easy.","8af7758b":"About 10% of the training set is randomly sampled out for validation.","2de186f1":"### Calculating the number of images in each class of the training set","4059e7e5":"### Splitting the data into training and validation splits and creating data loaders for grouping the images into batches.","0dd086d9":"While loading the dataset, we use a transform technique ```ToTensor()``` to convert the image into PyTorch Tensors.\nIt can be seen that each image is a color image (3 channels) of the size 48*48. We clso normalize the images using the ```.Normalize()``` method.The labels for the images can be seen using the ```.classes``` attribute of the dataset.","c17b0def":"### Saving the learned parameters of the model","5cacdf59":"Importing necessary modules","aa72784c":"### Testing the performance of the trained model","98585ed6":"It can be seen that there are totally 28821 images with different expressions. Disgust has the lowest number of images and Happy has the most number of images.","2bf8e761":"### Defining the Convolutional Neural Network Architecture","d6a60505":"A small helper function to view all the images present in a single batch."}}