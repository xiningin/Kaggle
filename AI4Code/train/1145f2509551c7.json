{"cell_type":{"8590733d":"code","9a7de2ad":"code","0af4598e":"code","ca9b6900":"code","4fb6c7bf":"code","d70ddf69":"code","d12951b6":"code","02e85393":"code","5e8cdbb0":"code","d76e461a":"code","6b1bb073":"code","4bc6b08c":"code","7c25d646":"code","c6b9ca61":"code","ee10ce2f":"code","49131446":"code","67b69a99":"code","01df0355":"code","abbad694":"code","5f4fe489":"code","e02b8e32":"code","c2a6ddcb":"code","00262dc7":"code","fcbd75bd":"code","e3ecb4a5":"code","b9fa96d6":"code","efc36ceb":"code","514a0552":"code","62fb25a9":"code","f6f1a4db":"code","7445bb05":"code","a4dd3ccb":"code","d7021585":"code","89f658eb":"code","07948b7d":"code","0a7c3892":"code","b0f3b905":"code","05d639c0":"code","f518cc5b":"code","ce117e44":"code","b5ac15c3":"code","c6827e68":"code","02066955":"code","11445455":"code","7f1bf417":"code","92b63629":"code","b38c0611":"code","b27bc1fb":"code","411f03ad":"code","fa8f7c05":"code","48b68df0":"code","8b5e0ade":"code","f6d948ae":"code","22698b41":"code","2a47e67a":"code","d74f5b28":"code","0fe6b001":"code","1962d258":"code","ccc3aa7e":"code","1ed18435":"code","acd6a5f4":"code","fefbc855":"code","6b6a36a1":"code","1936f5b3":"code","7a13f2da":"code","140c69bd":"code","67cd387d":"markdown","e7fb4697":"markdown","d7ff1c36":"markdown","487be86b":"markdown","a701d240":"markdown","380734fb":"markdown","0f0d160c":"markdown","33e31b80":"markdown","7c3a1532":"markdown","7f395f06":"markdown","f90590ee":"markdown","fe563e12":"markdown","82e77dc4":"markdown","826b3ebd":"markdown","cbcece17":"markdown"},"source":{"8590733d":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","9a7de2ad":"import matplotlib.pyplot as plt\nimport seaborn as sns","0af4598e":"df = pd.read_csv('\/kaggle\/input\/customer\/Train.csv')","ca9b6900":"df","4fb6c7bf":"df.shape","d70ddf69":"df.columns","d12951b6":"df.drop(['ID'], axis=1)","02e85393":"df['Segmentation'].value_counts()","5e8cdbb0":"df['Segmentation'].value_counts().plot.pie()","d76e461a":"df.isnull().sum()","6b1bb073":"df.dtypes","4bc6b08c":"categorical_features = df.select_dtypes(include=[np.object]).columns\nprint(\"total categorical_features\",len(categorical_features))","7c25d646":"df[categorical_features]","c6b9ca61":"df['Gender'].value_counts()","ee10ce2f":"plt.figure(figsize=(8,5))\nsns.countplot(x='Gender',hue='Segmentation', data=df, palette='plasma')\nplt.title(\"Segmentation wrt Gender\")\nplt.show()","49131446":"df['Ever_Married'].value_counts()","67b69a99":"plt.figure(figsize=(8,5))\nsns.countplot(x='Ever_Married',hue='Segmentation', data=df, palette='plasma')\nplt.title(\"Segmentation wrt Ever_Married\")\nplt.show()","01df0355":"df['Graduated'].value_counts()","abbad694":"plt.figure(figsize=(8,5))\nsns.countplot(x='Graduated',hue='Segmentation', data=df, palette='plasma')\nplt.title(\"Segmentation wrt Graduated\")\nplt.show()","5f4fe489":"df['Profession'].value_counts()","e02b8e32":"plt.figure(figsize=(20,5))\nsns.countplot(x='Profession',hue='Segmentation', data=df, palette='plasma')\nplt.title(\"Segmentation wrt Profession\")\nplt.show()","c2a6ddcb":"df['Spending_Score'].value_counts()","00262dc7":"plt.figure(figsize=(8,5))\nsns.countplot(x='Spending_Score',hue='Segmentation', data=df, palette='plasma')\nplt.title(\"Segmentation wrt Spending_Score\")\nplt.show()","fcbd75bd":"df['Var_1'].value_counts()","e3ecb4a5":"plt.figure(figsize=(20,5))\nsns.countplot(x='Var_1',hue='Segmentation', data=df, palette='plasma')\nplt.title(\"Segmentation wrt Var_1\")\nplt.show()","b9fa96d6":"df['Family_Size'].value_counts()","efc36ceb":"plt.figure(figsize=(20,5))\nsns.countplot(x='Family_Size',hue='Segmentation', data=df, palette='plasma')\nplt.title(\"Segmentation wrt Family_Size\")\nplt.show()","514a0552":"df","62fb25a9":"df = df.drop(['ID'], axis=1)","f6f1a4db":"df","7445bb05":"# Replacing Male with 0 and Female with 1 in Gender column\ndf['Gender'] = df['Gender'].replace({'Male':0,'Female':1})","a4dd3ccb":"# Replacing No with 0 and Yes with 1 in Ever_Married column\ndf['Ever_Married'] = df['Ever_Married'].replace({'No':0,'Yes':1})","d7021585":"# Replacing No with 0 and Yes with 1 in Graduated column\ndf['Graduated'] = df['Graduated'].replace({'No':0,'Yes':1})","89f658eb":"df","07948b7d":"df['Spending_Score'].value_counts()","0a7c3892":"# Replacing Low with 0, Average with 1 and High with 2 in Spending_Score column\ndf['Spending_Score'] = df['Spending_Score'].replace({'Low':0,'Average':1,'High':2})","b0f3b905":"df['Var_1'].value_counts()","05d639c0":"# Replacing Cat_1 with 1, Cat_2 with 2, Cat_3 with 3, Cat4 with 4, Cat_5 with 5, Cat_6 with 6, and Cat_7 with 7 in Var_1 column\ndf['Var_1'] = df['Var_1'].replace({'Cat_1':1,'Cat_2':2,'Cat_3':3,'Cat_4':4,'Cat_5':5,'Cat_6':6,'Cat_7':7})","f518cc5b":"df","ce117e44":"df['Profession'].value_counts()","b5ac15c3":"# Replacing Artist with 0, Healthcare with 1, Entertainment with 2, Engineer with 3, Doctor with 4, Lawyer with 5, Executive with 6, Marketing with 7 and Homemaker with 8 in Var_1 column\ndf['Profession'] = df['Profession'].replace({'Artist':0,'Healthcare':1,'Entertainment':2,'Engineer':3,'Doctor':4,'Lawyer':5,'Executive':6,'Marketing':7,'Homemaker':8})","c6827e68":"df","02066955":"df['Profession'].value_counts()","11445455":"df['Var_1'].value_counts()","7f1bf417":"df['Segmentation'].value_counts()","92b63629":"# Replacing A with 0, B with 1, C with 2 and D with 3 in Spending_Score column\ndf['Segmentation'] = df['Segmentation'].replace({'A':0,'B':1,'C':2,'D':3})","b38c0611":"df['Segmentation'].value_counts()","b27bc1fb":"df","411f03ad":"df.isnull().sum()","fa8f7c05":"df['Ever_Married'].fillna(int(df['Ever_Married'].mean()), inplace=True)","48b68df0":"df['Ever_Married'].value_counts()","8b5e0ade":"df['Graduated'].fillna(int(df['Graduated'].mean()), inplace=True)\ndf['Profession'].fillna(int(df['Profession'].mean()), inplace=True)\ndf['Work_Experience'].fillna(int(df['Work_Experience'].mean()), inplace=True)\ndf['Family_Size'].fillna(int(df['Family_Size'].mean()), inplace=True)\ndf['Var_1'].fillna(int(df['Var_1'].mean()), inplace=True)","f6d948ae":"df.isna().sum()","22698b41":"X = df.iloc[:, :-1].values\ny = df.iloc[:, -1].values","2a47e67a":"print(X)\nprint(y)","d74f5b28":"from sklearn.model_selection import train_test_split","0fe6b001":"X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)","1962d258":"X_train","ccc3aa7e":"from sklearn.ensemble import RandomForestClassifier\nclassifier = RandomForestClassifier()\nclassifier.fit(X_train, y_train)","1ed18435":"y_pred = classifier.predict(X_test)","acd6a5f4":"y_pred","fefbc855":"from sklearn.metrics import confusion_matrix, accuracy_score\ncm = confusion_matrix(y_test, y_pred)\nprint(cm)\naccuracy_score(y_test, y_pred)","6b6a36a1":"\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.svm import SVC\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.ensemble import RandomForestClassifier\n\n#metrics\nfrom sklearn.metrics import accuracy_score, classification_report","1936f5b3":"#models\nlog_clf = LogisticRegression()\nsvc_clf = SVC()\nknn_clf = KNeighborsClassifier()\ndt_clf = DecisionTreeClassifier()\nrf_clf = RandomForestClassifier()\n","7a13f2da":"# first check the accuracy score on without scalled features\nfor clf in [log_clf, svc_clf, knn_clf, dt_clf, rf_clf]:\n    clf.fit(X_train, y_train)\n    \n    pred = clf.predict(X_test)\n    \n    print(clf.__class__.__name__, \" \", accuracy_score(y_test,pred))","140c69bd":"from xgboost import XGBClassifier\nxgb = XGBClassifier()\n\nxgb.fit(X_train, y_train)\n\nprediction = xgb.predict(X_test)\n\nprint(\"accuracy: \",accuracy_score(y_test,prediction))","67cd387d":"### Filling missing data ","e7fb4697":"## EDA","d7ff1c36":"## Predicting Test Set Result","487be86b":"Married people are mostly part of segmentation C, whereas unmarried people are mostly part of segmentation D","a701d240":"## Making Confusion Matrix","380734fb":"Healthcare Workers are mostly part of Segmentation D","0f0d160c":"People with low spending score are mostly part of Segmentation D","33e31b80":"Dropping ID Column ","7c3a1532":"#### Finding Categorical Data","7f395f06":"Graduated People are mostly part of Segmentation C, whereas Non-graduates are mostly part of segmenation D","f90590ee":"## Importing Libraries and Dataset","fe563e12":"Thus, we get accuracy of 50.55% using XGBClassifier\n","82e77dc4":"### Encoding Categorical Data","826b3ebd":"## Splitting Dataset into Training and Testing Set","cbcece17":"## Training the Random Forest Classification model on Training Set"}}