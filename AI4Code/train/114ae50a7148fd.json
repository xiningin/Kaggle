{"cell_type":{"53958f95":"code","327ca9a0":"code","f91578de":"code","9303f786":"code","8624f0fb":"code","260eaf72":"markdown","e9e4f75f":"markdown"},"source":{"53958f95":"import os\nimport numpy as np\nimport pandas as pd\nimport pydicom\nimport matplotlib.pyplot as plt\nimport seaborn as sns","327ca9a0":"# Load the data\nbase_path = \"\/kaggle\/input\/siim-covid19-detection\/\"\nstudies_df = pd.read_csv(os.path.join(base_path,\"train_study_level.csv\"))","f91578de":"# This function finds the first image in a StudyInstanceUID directory and returns its path.\ndef get_image_by_study_id(study_id):\n    study_path = base_path + \"train\/\" + study_id + \"\/\"\n    \n    for subdir, dirs, files in os.walk(study_path):\n        for file in files:     \n            image = os.path.join(subdir, file)\n            if os.path.isfile(image):\n                return image\n    return \"none\"","9303f786":"# Iterate through the images in the train set and grab the private tags. I'm sure there's a quicker way to do this, I was just lazy.\n\nfor index, row in studies_df.iterrows():\n    \n    f = row['id'].split(\"_\")\n    \n    img_file = get_image_by_study_id(f[0])\n    img = pydicom.dcmread(img_file)               \n    \n    studies_df.at[index,'tag_0029_0010'] = 0\n    studies_df.at[index,'tag_0903_0010'] = 0\n    studies_df.at[index,'tag_0905_0010'] = 0\n    studies_df.at[index,'tag_2001_0010'] = 0\n    studies_df.at[index,'tag_200B_0010'] = 0\n    studies_df.at[index,'tag_200B_0011'] = 0\n    studies_df.at[index,'tag_200B_0012'] = 0\n    studies_df.at[index,'tag_7FD1_0010'] = 0\n        \n    if (0x0029,0x0010) in img:\n        studies_df.at[index,'tag_0029_0010'] = 1\n        \n    if (0x0903,0x0010) in img:\n        studies_df.at[index,'tag_0903_0010'] = 1\n        \n    if (0x0905,0x0010) in img:\n        studies_df.at[index,'tag_0905_0010'] = 1\n        \n    if (0x2001,0x0010) in img:\n        studies_df.at[index,'tag_2001_0010'] = 1\n        \n    if (0x200B,0x0010) in img:\n        studies_df.at[index,'tag_200B_0010'] = 1\n        \n    if (0x200B,0x0011) in img:\n        studies_df.at[index,'tag_200B_0011'] = 1\n        \n    if (0x200B,0x0012) in img:\n        studies_df.at[index,'tag_200B_0012'] = 1\n        \n    if (0x7FD1,0x0010) in img:\n        studies_df.at[index,'tag_7FD1_0010'] = 1\n\nstudies_df.head(20)","8624f0fb":"plt.figure(figsize= (10,10))\ncorr = studies_df.corr()\nsns.heatmap(corr, annot = True);","260eaf72":"#### There seems to be some correlation between some of the private tags and the target classes. Especially for Negative and Typical.","e9e4f75f":"### Is there a correlation between private DICOM tags and study classes ?\n\n#### There are several private DICOM tags in these images. Not all of them appear in all the images.\n\n#### The tags are:\n\n- 0x0029,0010\n- 0x0903,0010\n- 0x0905,0010\n- 0x2001,0010\n- 0x200B,0010\n- 0x200B,0011\n- 0x200B,0012\n- 0x7FD1,0010\n\n#### I noticed that the distribution of some of them was abnormal. Possibly they were added as part of the annotation process.\n\n#### The values aren't relavent, but it seems the presence or absence of them might be.\n\n#### So I exported them from the images in the train set and made a column for each in the study DF and then made a correlation heat map."}}