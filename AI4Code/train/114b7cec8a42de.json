{"cell_type":{"6991627f":"code","06ccc3aa":"code","20e6f4e6":"code","0cdeae8b":"code","c499c267":"code","83d822cf":"code","b23a8485":"code","e377037c":"code","a4414f53":"code","d3003b39":"code","feb75d49":"code","bf50875e":"code","75b21cd1":"code","e75287e5":"code","9aa63a47":"code","7f679892":"code","aec01660":"code","41db1976":"code","d7dfa3d9":"code","264a4839":"code","a30eebc5":"code","28e70801":"code","972d5339":"code","53d984b1":"code","3c56eee1":"code","72beb777":"code","fc232ad8":"code","f7f2aab1":"code","ef43c0d7":"code","dc898904":"code","950a27a3":"code","985152e8":"code","efe28f2b":"code","580808bc":"code","49659781":"code","751114c5":"code","b4c6f3c9":"code","1d1f39eb":"code","5afc91b5":"code","50f7bad4":"code","58443d71":"code","6ccc1fc3":"code","2c69b2be":"code","34dd5a6a":"code","7d228093":"code","f5683db5":"markdown","537caf7a":"markdown","7397b7f9":"markdown","d5b8ac4b":"markdown","118b50bc":"markdown","14102413":"markdown","0e476cde":"markdown","d9e849c8":"markdown","ce2a0487":"markdown","978b7256":"markdown"},"source":{"6991627f":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport os\nimport warnings\n\n%matplotlib inline\npd.set_option(\"display.max_rows\",None,\"display.max_columns\", None)\nwarnings.simplefilter(action='ignore')\nplt.style.use('seaborn')","06ccc3aa":"df = pd.read_csv('..\/input\/vehicle-dataset-from-cardekho\/car data.csv')","20e6f4e6":"df.head()","0cdeae8b":"df.shape","c499c267":"df.info()","83d822cf":"df.describe()","b23a8485":"df.isna().sum()","e377037c":"df['Age'] = 2021 - df['Year']\ndf.drop('Year', axis=1, inplace=True)","a4414f53":"df.head()","d3003b39":"df.rename(columns = {'Selling_Price':'Selling_Price(lacs)', 'Present_Price':'Present_Price(lacs)', 'Owner':'Past_Owners'}, inplace=True)","feb75d49":"df.head()","bf50875e":"df.columns","75b21cd1":"cat_cols = ['Fuel_Type', 'Seller_Type', 'Transmission', 'Past_Owners']\ni = 0\nwhile i < 4:\n    fig = plt.figure(figsize=[10,4])\n    \n    plt.subplot(1,2,1)\n    sns.countplot(x=cat_cols[i], data=df)\n    i +=1\n    \n    plt.subplot(1,2,2)\n    sns.countplot(x=cat_cols[i], data=df)\n    i += 1\n    \n    plt.show()","e75287e5":"df[df['Present_Price(lacs)']>df['Present_Price(lacs)'].quantile(0.99)]","9aa63a47":"df[df['Selling_Price(lacs)'] > df['Selling_Price(lacs)'].quantile(0.99)]","7f679892":"df[df['Kms_Driven'] > df['Kms_Driven'].quantile(0.99)]","aec01660":"sns.heatmap(df.corr(), annot = True, cmap='RdBu')\nplt.show()","41db1976":"df.corr()['Selling_Price(lacs)']","d7dfa3d9":"df.pivot_table(values='Selling_Price(lacs)', index = 'Seller_Type', columns='Fuel_Type')","264a4839":"# Creating dummies for categorical values\ndf.drop(labels='Car_Name', axis=1, inplace = True)\n","a30eebc5":"df.head()","28e70801":"df = pd.get_dummies(data=df, drop_first=True)","972d5339":"df.head()","53d984b1":"# Train Test Split\nX = df.iloc[:,1:].values\ny = df.iloc[:,:1].values","3c56eee1":"print(X)","72beb777":"# print(y)","fc232ad8":"print(X.shape, y.shape)","f7f2aab1":"from sklearn.model_selection import train_test_split\nX_train, X_test, y_train, y_test = train_test_split(X,y,test_size=0.2, random_state=1)","ef43c0d7":"from sklearn.preprocessing import StandardScaler\nsc = StandardScaler()\nX_train = sc.fit_transform(X_train)\nX_test = sc.transform(X_test)","dc898904":"print(X.shape, X_train.shape, X_test.shape)","950a27a3":"print(y.shape, y_train.shape, y_test.shape)","985152e8":"from tensorflow.keras.models import Sequential\nfrom tensorflow.keras.layers import Dense","efe28f2b":"model = Sequential()\nmodel.add(Dense(30, activation='relu'))\nmodel.add(Dense(10, activation='relu'))\nmodel.add(Dense(1)) # O\/P\n\nmodel.compile(optimizer='rmsprop', loss='mse')","580808bc":"model.fit(X_train, y_train, epochs=100, validation_data=(X_test,y_test))","49659781":"model.summary()","751114c5":"loss_df = pd.DataFrame(model.history.history)","b4c6f3c9":"loss_df.plot()","1d1f39eb":"model.evaluate(X_test, y_test)","5afc91b5":"train_pred = model.predict(X_train)\n# print(pred_train)","50f7bad4":"test_pred = model.predict(X_test)","58443d71":"from sklearn.metrics import r2_score","6ccc1fc3":"r2_train = r2_score(y_train, train_pred)\nprint(\"R Squared value of train dataL: \",r2_train)","2c69b2be":"r2_test = r2_score(y_test, test_pred)\nprint(\"R Squared value of test data:\", r2_test)","34dd5a6a":"diff_r2_scores = r2_train - r2_test","7d228093":"print(\"Difference between two scores: \", diff_r2_scores.round(2))","f5683db5":"# Visualizing the data","537caf7a":"# Exploratory Data Analysis","7397b7f9":"# Data Preprocessing","d5b8ac4b":"# Train - Test - Split ","118b50bc":"# Model Evaluation","14102413":"# Building Artifical Neural Network ","0e476cde":"- R Squared : R-squared measures the strength of the relationship between your model and the dependent variable on a convenient 0 \u2013 100% scale.","d9e849c8":"## model.predict()  on X_train","ce2a0487":"# Scaling the data for better training","978b7256":"## model.predict() on X_test"}}