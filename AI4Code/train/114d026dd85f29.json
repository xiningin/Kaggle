{"cell_type":{"38d6465f":"code","4fa8b762":"code","766078b6":"code","2d149c50":"code","bb5059b3":"code","58a5a7d4":"code","dcacbd60":"code","99b9ca85":"code","1a6c0d6c":"code","cdd617cc":"code","c2cd3d84":"code","ef6743ef":"code","cc54ae92":"code","6e822488":"code","2623c710":"code","b0b7cf30":"code","728fd7a5":"code","d6fb76aa":"code","51234131":"code","7e8d128e":"code","cad9feb3":"code","87beeb3c":"code","75500043":"markdown","ca715dcd":"markdown","57bae761":"markdown","9ad538a9":"markdown","af55a2a2":"markdown","07d0621b":"markdown","6da059e0":"markdown","11c7c894":"markdown"},"source":{"38d6465f":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session\n\nimport matplotlib.pyplot as plt\nimport statsmodels.api as sm","4fa8b762":"data  = pd.read_csv('\/kaggle\/input\/satandgpa-lr\/SATandGPA_LinearRegression.csv')\n\ncolumn_names = pd.Series(data.columns)\nprint(column_names)","766078b6":"# x_cols = [col for col in data.columns if col not in ['ARR_DEL15']]\n\n# for col in x_cols:\n#   corr_coeffs = np.corrcoef(data[col].values, data.ARR_DEL15.values)\n  \n# # Get the number of missing values in each column \/ feature variable\n# data.isnull().sum()\n\n# Drop a feature variable \n#data = data.drop('feature_name', 1)\n\n# df.index.values","2d149c50":"# df.isnull().values.any().any() # ==> was false\n\n\n\n# Follow this syntax\n# np.where(if_this_condition_is_true, do_this, else_this)\n# Example\n# df['new_column'] = np.where(df[i] > 10, 'foo', 'bar) \n\n#nan_rows\n# this drop the entire column if any value conatin NAN, i only want to drop rows that contains na\n# clean_dataDF = df.dropna(how='any',axis=0) # number of rows --> 565963\n\n#drop only row that contains nan\nclean_dataDF = data.dropna() # number of rows --> 565963\n\n# clean_dataDF.info()\n# clean_dataDF.describe()","bb5059b3":"#equatins y^ = b0 + b1.X1\ny = clean_dataDF['GPA']\nx1 = clean_dataDF['SAT'] ","58a5a7d4":"#explore the data first\nplt.scatter(x1,y)\nplt.xlabel('SAT Score', fontsize = 20)\nplt.ylabel('Student GPA', fontsize = 20)\nplt.show()","dcacbd60":"#regression itself\n\nx = sm.add_constant(x1)\nresults = sm.OLS(y,x).fit()\nresults.summary()","99b9ca85":"#plot it in scatter\n\nplt.scatter(x1,y)\nyhat = 0.0017*x1+ 0.275\nfig = plt.plot(x1, yhat, lw = 4 , c= 'orange' , label = 'reg line')\nplt.xlabel('SAT Score', fontsize = 20)\nplt.ylabel('Student GPA', fontsize = 20)\n# plt.xlim(0)\n# plt.ylim(0)\nplt.show()","1a6c0d6c":"data = pd.read_csv('\/kaggle\/input\/multiplelineregressionsampledata\/1.02. Multiple linear regression.csv')\ndata.head(10)","cdd617cc":"y = data['GPA']\nx1 = data[['SAT' , 'Rand 1,2,3']]","c2cd3d84":"x = sm.add_constant(x1)\nresults = sm.OLS(y,x).fit()\nresults.summary()","ef6743ef":"raw_data = pd.read_csv('\/kaggle\/input\/103-dummiescsv\/1.03. Dummies.csv')\nraw_data","cc54ae92":"data = raw_data.copy()","6e822488":"data['Attendance'] = data['Attendance'].map({'Yes':1 , 'No':0})\ndata.describe()","2623c710":"y = data['GPA']\nx1 = data[['SAT', 'Attendance']]","b0b7cf30":"x = sm.add_constant(x1)\nresults = sm.OLS(y, x).fit()\nresults.summary()","728fd7a5":"#plot it in scatter\n\nplt.scatter(data['SAT'],y)\nyhat_NO = 0.6439+0.0014*data['SAT']\nyhat_yes = 0.8685 + 0.0014*data['SAT']\nfig = plt.plot(data['SAT'], yhat_NO, lw = 2 , c= 'orange' , label = 'reg line')\nfig = plt.plot(data['SAT'], yhat_yes, lw = 2 , c= 'red' , label = 'reg line')\nplt.xlabel('SAT Score', fontsize = 20)\nplt.ylabel('Student GPA', fontsize = 20)\nplt.show()","d6fb76aa":"x","51234131":"new_data = pd.DataFrame({'const' : 1, 'SAT':[1700, 1670], 'Attendance' : [0,1]})\nnew_data = new_data[['const', 'SAT' , 'Attendance']]\nnew_data","7e8d128e":"new_data.rename(index={0 : 'Bob' , 1 : 'Alice'})","cad9feb3":"predictions = results.predict(new_data)\npredictions","87beeb3c":"predictionsdf = pd.DataFrame({'predictions' : predictions})\njoined = new_data.join(predictionsdf)\njoined.rename(index = {0 : 'bob' , 1 : 'Alice'})","75500043":"# Handeling mission gvalues","ca715dcd":"Map attendance with zero and one --> 0 and 1","57bae761":"# Determine how to determine optimal number of variable to use in multiple regression","9ad538a9":"# Making predictions","af55a2a2":"# First multiple regression","07d0621b":"# Regression ","6da059e0":"# creare your first trgression","11c7c894":"# Running a correlation to understand the data"}}