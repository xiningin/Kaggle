{"cell_type":{"1cd63fe2":"code","080f2ee6":"code","dab20477":"code","94cfb2ff":"code","932722a4":"code","a3058222":"code","c4beabd6":"code","8e6cb9b4":"code","f39d4a74":"code","a7044b5d":"code","f72209b5":"code","6873a407":"code","f407451c":"code","3686b6f0":"code","7c06309c":"code","5a076c6d":"code","712de43b":"code","b2cb4e8f":"code","45c67b7d":"code","632c2861":"code","e3fd143f":"code","75336e1d":"code","c7380b7d":"code","33e2868d":"code","e3b8677d":"code","47d48c1d":"code","41313ee9":"code","d87053be":"code","32a430cf":"code","aadb833d":"code","187fe863":"code","dfc5a6dc":"code","8d9b964a":"markdown","d7511417":"markdown","382b2d9b":"markdown"},"source":{"1cd63fe2":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport tensorflow as tf\nfrom tensorflow import keras\nimport math","080f2ee6":"dataset = pd.read_csv('..\/input\/stock-time-series-20050101-to-20171231\/IBM_2006-01-01_to_2018-01-01.csv', index_col='Date', parse_dates=['Date'])\ndataset.head()","dab20477":"#choose 'High' attribute for prices\ntraining_set = dataset[:'2016'].iloc[:, 1:2].values\ntest_set = dataset['2017':].iloc[:, 1:2].values","94cfb2ff":"dataset['High'][:'2016'].plot(figsize=(16, 4), legend=True)\ndataset['High']['2017':].plot(figsize=(16, 4), legend=True)\nplt.legend(['Training set (Before 2017)', 'Test set (2017 and beyond)'])\nplt.title('IBM stock price')\nplt.show()","932722a4":"#scale the training set to range 0-1\nfrom sklearn.preprocessing import MinMaxScaler\n\nscaler = MinMaxScaler(feature_range=(0, 1))\ntraining_set_scaled = scaler.fit_transform(training_set)","a3058222":"training_set_scaled.shape","c4beabd6":"X_train, y_train = training_set_scaled[:-1], training_set_scaled[1:]","8e6cb9b4":"X_train, y_train = np.array([X_train]), np.array([y_train])\nX_train.shape, y_train.shape","f39d4a74":"keras.backend.clear_session()\nnp.random.seed(42)\ntf.random.set_seed(42)","a7044b5d":"model = keras.models.Sequential([\n    keras.layers.SimpleRNN(20, return_sequences=True, input_shape=[None, 1]), \n    keras.layers.SimpleRNN(20, return_sequences=True), \n    keras.layers.TimeDistributed(keras.layers.Dense(1))])\n\nmodel.compile(loss='mse', optimizer=keras.optimizers.Adam(learning_rate=0.01))\nhistory = model.fit(X_train, y_train, epochs=20)","f72209b5":"def plot_series(series, y=None, y_pred=None, x_label='$t$', y_label='$x(t)$'):\n    plt.plot(series, '-')\n    if y is not None:\n        plt.plot(n_steps, y, 'bx', markersize=10)\n    if y_pred is not None:\n        plt.plot(n_steps, y_pred, 'ro')\n    plt.grid(True)\n    if x_label:\n        plt.xlabel(x_label, fontsize=16)\n    if y_label:\n        plt.ylabel(y_label, fontsize=16, rotation=0)\n    plt.hlines(0, 0, 3000, linewidth=1)\n    plt.axis([0, n_steps + 1, -1, 1])","6873a407":"from sklearn.metrics import mean_squared_error\n\ndef return_rmse(test, predicted):\n    rmse = math.sqrt(mean_squared_error(test, predicted))\n    print('Root Mean Squared Error (RMSE): {}'.format(rmse))","f407451c":"n_steps = len(training_set_scaled)\nn_steps","3686b6f0":"y_pred = model.predict(X_train)[0, -1]","7c06309c":"plot_series(X_train[0], y_train[0, -1], y_pred)\nplt.show()","5a076c6d":"X_train = []\ny_train = []\nfor i in range(60, n_steps):\n    X_train.append(training_set_scaled[i-60: i, 0])\n    y_train.append(training_set_scaled[i, 0])\nX_train, y_train = np.array(X_train), np.array(y_train)","712de43b":"X_train.shape, y_train.shape","b2cb4e8f":"X_train = X_train[..., np.newaxis]","45c67b7d":"model = keras.models.Sequential()\nmodel.add(keras.layers.LSTM(50, return_sequences=True, input_shape=[None, 1]))\nmodel.add(keras.layers.Dropout(0.2))\nmodel.add(keras.layers.LSTM(50, return_sequences=True))\nmodel.add(keras.layers.Dropout(0.2))\nmodel.add(keras.layers.LSTM(50, return_sequences=True))\nmodel.add(keras.layers.Dropout(0.2))\nmodel.add(keras.layers.LSTM(50))\nmodel.add(keras.layers.Dropout(0.2))\nmodel.add(keras.layers.Dense(1))","632c2861":"model.compile(optimizer='rmsprop', loss='mean_squared_error')\nmodel.fit(X_train, y_train, epochs=20, batch_size=32)","e3fd143f":"dataset_total = pd.concat((dataset[\"High\"][:'2016'],dataset[\"High\"]['2017':]),axis=0)\ninputs = dataset_total[len(dataset_total) - len(test_set) - 60:].values\ninputs = inputs.reshape(-1,1)\ninputs  = scaler.transform(inputs)","75336e1d":"inputs.shape","c7380b7d":"X_test = []\nfor i in range(60, 311):\n    X_test.append(inputs[i-60:i, 0])\nX_test = np.array(X_test)\nX_test = X_test[..., np.newaxis]\ny_pred = model.predict(X_test)\ny_pred = scaler.inverse_transform(y_pred)","33e2868d":"def plot_predictions(actual, prediction):\n    plt.plot(actual, color='red',label='Actual IBM Stock Price')\n    plt.plot(prediction, color='blue',label='Predicted IBM Stock Price')\n    plt.title('IBM Stock Price Prediction')\n    plt.xlabel('Time')\n    plt.ylabel('IBM Stock Price')\n    plt.legend()\n    plt.show()","e3b8677d":"y_pred.shape","47d48c1d":"plot_predictions(test_set, y_pred)","41313ee9":"return_rmse(test_set, y_pred)","d87053be":"model = keras.models.Sequential()\nmodel.add(keras.layers.GRU(50, return_sequences=True, input_shape=[None, 1], activation='tanh'))\nmodel.add(keras.layers.Dropout(0.2))\nmodel.add(keras.layers.GRU(50, return_sequences=True, activation='tanh'))\nmodel.add(keras.layers.Dropout(0.2))\nmodel.add(keras.layers.GRU(50, return_sequences=True, activation='tanh'))\nmodel.add(keras.layers.Dropout(0.2))\nmodel.add(keras.layers.GRU(50, activation='tanh'))\nmodel.add(keras.layers.Dropout(0.2))\nmodel.add(keras.layers.Dense(1))","32a430cf":"optimizer = keras.optimizers.SGD(learning_rate=0.01, decay=1e-7, momentum=0.9, nesterov=False)\nmodel.compile(optimizer=optimizer, loss='mean_squared_error')\nmodel.fit(X_train, y_train, epochs=20, batch_size=150)","aadb833d":"X_test = []\nfor i in range(60, 311):\n    X_test.append(inputs[i-60:i, 0])\nX_test = np.array(X_test)\nX_test = X_test[..., np.newaxis]\ny_pred = model.predict(X_test)\ny_pred = scaler.inverse_transform(y_pred)","187fe863":"plot_predictions(test_set, y_pred)","dfc5a6dc":"return_rmse(test_set, y_pred)","8d9b964a":"For this case, we will have 60 time steps with 1 output:","d7511417":"Now let's try build a model using GRU cells:","382b2d9b":"Let's build a model based on LSTM cells:"}}