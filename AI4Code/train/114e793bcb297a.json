{"cell_type":{"1e20d31d":"code","f8d38530":"code","a5d7eb55":"code","f4534dea":"code","25538325":"code","8fed331d":"code","7afeaf2c":"code","c3f05f53":"code","6ad73bf6":"code","fb8dcd6e":"code","42fd8c84":"code","a67b1a03":"code","2cd5d194":"code","07171dea":"code","ca477840":"code","420c28b8":"code","4a7009fa":"code","4c8143f6":"code","d7b6cf4c":"code","0d212659":"code","bd2289a5":"code","dd071e40":"code","2a03e840":"code","480673a1":"code","3eaab008":"code","8361195e":"code","e32a7709":"code","ba0e45e6":"code","c23b7229":"code","2f206eff":"code","cbefbdf3":"code","b51eb4fb":"code","c2aab5de":"code","774126f5":"code","b791550b":"code","196b3bfd":"code","569c309a":"code","d7b6c476":"code","5571ca69":"code","11204717":"markdown","fabf248a":"markdown","74c6feea":"markdown","6d4e0989":"markdown","773d18a9":"markdown","e7afe69c":"markdown","8fd76779":"markdown","8966c378":"markdown","e3187a89":"markdown","857eeb77":"markdown","974a6763":"markdown","cfd90bf0":"markdown","827fd30d":"markdown","08f98de4":"markdown","67da5d9d":"markdown","9791d121":"markdown","62aa904b":"markdown","8b761e1d":"markdown","302677c4":"markdown","0cc56d10":"markdown","d9227a36":"markdown","f235b897":"markdown","c9b680b1":"markdown","9287ee70":"markdown","5b3d6f8c":"markdown","4affdef6":"markdown","86ccfbd2":"markdown","5f763a5b":"markdown","989cf2dd":"markdown","4974212b":"markdown","cfb2082b":"markdown","e9b2682a":"markdown","a9ba5ddb":"markdown","95e999c7":"markdown","417390c2":"markdown","01dfd707":"markdown","c68f8303":"markdown","3670203e":"markdown","4e5a809d":"markdown","651dca46":"markdown","c2e4d444":"markdown","c6bd0e52":"markdown"},"source":{"1e20d31d":"# import necessary libraries\nimport pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n%matplotlib inline\nimport warnings\nwarnings.filterwarnings('ignore')","f8d38530":"# load matches dataset\nmatches_df = pd.read_csv(\"..\/input\/ipl-data-set\/matches.csv\")\n\nmatches_df.head()","a5d7eb55":"# load deliveries dataset\ndeliveries_df = pd.read_csv(\"..\/input\/ipl-data-set\/deliveries.csv\")\n\ndeliveries_df.head()","f4534dea":"# merge matches & deliveries datasets\nmerge_df = pd.merge(deliveries_df,matches_df,left_on='match_id',right_on='id')\n\nmerge_df.head()","25538325":"# size of each dataset\nprint(\"============================================\")\nprint(\"size of matches dataset : \",matches_df.shape )\nprint(\"============================================\")\nprint(\"size of deliveries dataset : \",deliveries_df.shape )\nprint(\"============================================\")\nprint(\"size of merge dataset : \",merge_df.shape )\nprint(\"============================================\")","8fed331d":"matches_df.info()","7afeaf2c":"# statistical analysis of matches_df\nmatches_df.describe(include='all')","c3f05f53":"# missing values in matches_df\nmatches_df.isnull().sum()","6ad73bf6":"# drop \"umpire3\" column\nmatches_df.drop([\"umpire3\"],axis=1,inplace=True)","fb8dcd6e":"# find the venue name of all missing value \"city\" \nmatches_df[matches_df[\"city\"].isnull()][[\"city\",\"venue\"]]","42fd8c84":"matches_df[\"city\"] = matches_df[\"city\"].fillna(\"Dubai\")","a67b1a03":"# rows having missing values\nmatches_df[(matches_df[\"umpire1\"].isnull()) | (matches_df[\"umpire2\"].isnull()) | (matches_df[\"player_of_match\"].isnull())]","2cd5d194":"# delete rows having missing value in columns 'umpire1', 'umpire2', 'player_of_match'.\nmatches_df.dropna(subset=['umpire1', 'umpire2', 'player_of_match'],inplace=True)","07171dea":"# shape of updated matches_df DataFrame\nmatches_df.shape","ca477840":"deliveries_df.info()","420c28b8":"# statistical analysis of deliveries dataset\ndeliveries_df.describe()","4a7009fa":"# see how many missing value present each column\ndeliveries_df.isnull().sum()","4c8143f6":"# drop columns \"player_dismissed\",\"dismissal_kind\",\"fielder\" from the DataFrame\ndeliveries_df.drop(columns=[\"player_dismissed\",\"dismissal_kind\",\"fielder\"],axis=1,inplace=True)","d7b6cf4c":"# check for any missing value in deliveries_df\ndeliveries_df.isnull().sum().sum()","0d212659":"# check for any missing value in matches_df\nmatches_df.isnull().sum().sum()","bd2289a5":"matches_df.tail()","dd071e40":"deliveries_df.head()","2a03e840":"matches_df.groupby('Season')['team1'].nunique().plot(kind = 'bar', figsize=(15,5),color = 'c')\nplt.title(\"Number of teams participated each season \",fontsize=18,fontweight=\"bold\")\nplt.ylabel(\"Count of teams\", size = 25)\nplt.xlabel(\"Season\", size = 25)\nplt.xticks(size = 15)\nplt.yticks(size = 15)","480673a1":"plt.figure(figsize = (18,6))\nsns.countplot('Season',data=matches_df,)\nplt.title(\"Number of Matches played in each IPL season\",fontsize=20)\nplt.xlabel(\"season\",fontsize=15)\nplt.ylabel('Matches',fontsize=15)\nplt.show() ","3eaab008":"plt.figure(figsize = (18,6))\nsns.countplot(x='winner',data=matches_df, palette='cool')\nplt.title(\"Numbers of matches won by team \",fontsize=20)\nplt.xticks(rotation=50)\nplt.xlabel(\"Teams\",fontsize=15)\nplt.ylabel(\"No of wins\",fontsize=15)\nplt.show()","8361195e":"# find how many stadium present in each cities\ncity_venue = matches_df.groupby(['city','venue']).count()['Season']\ncity_venue_df = pd.DataFrame(city_venue)\ncity_venue_df","e32a7709":"# matches_df[\"venue\"].value_counts().sort_values(ascending = True).tail(10)\nmatches_df[\"venue\"].value_counts().sort_values(ascending = True).tail(10).plot(kind = 'barh',figsize=(12,8), fontsize=15, color='c')\nplt.title(\"Venue which has hosted most number of IPL matches\",fontsize=18,fontweight=\"bold\")\nplt.ylabel(\"Venue\", size = 25)\nplt.xlabel(\"Frequency\", size = 25)","ba0e45e6":"matches_df[\"winner\"].value_counts().sort_values(ascending = True).tail().plot(kind = 'barh', figsize = (15,5), color = 'c')\nplt.title(\"Winners of IPL across 11 seasons\",fontsize=18,fontweight=\"bold\")\nplt.ylabel(\"Teams\", size = 25)\nplt.xlabel(\"Frequency\", size = 25)\nplt.xticks(size = 15)\nplt.yticks(size = 15)","c23b7229":"colors = ['#FFBF00', '#FA8072']\nmatches_df['toss_decision'].value_counts().plot(kind='pie', fontsize=14, autopct='%3.1f%%', colors=colors,\n                                               figsize=(10,7), shadow=True, startangle=135, legend=True, cmap='Oranges')\nplt.ylabel('Toss Decision')\nplt.title('Decision taken by captains after winning tosses', size = 20)\nplt.show()","2f206eff":"# create a column which store 'win' if a team win a match & \nmatches_df['toss_win_game_win'] = np.where((matches_df.toss_winner == matches_df.winner),'win','loss')\nplt.figure(figsize = (15,5))\nsns.countplot('toss_win_game_win', data=matches_df, hue = 'toss_decision',)\nplt.title(\"How Toss Decision affects match result\", fontsize=18,fontweight=\"bold\")\nplt.xticks(size = 15)\nplt.yticks(size = 15)\nplt.xlabel(\"Winning Toss and winning match\", fontsize = 25)\nplt.ylabel(\"Frequency\", fontsize = 25)","cbefbdf3":"plt.figure(figsize = (18,6))\nsns.countplot(x='toss_winner',data=matches_df, palette='cool')\nplt.title(\"Number of Toss won by team \",fontsize=20)\nplt.xticks(rotation=50)\nplt.xlabel(\"Teams\",fontsize=15)\nplt.ylabel(\"No of toss\",fontsize=15)\nplt.show()","b51eb4fb":"plt.figure(figsize = (25,10))\nsns.countplot('toss_winner', data = matches_df, hue = 'toss_decision')\nplt.title(\"Teams decision to bat first or second after winning toss\", size = 30, fontweight = 'bold')\nplt.xticks(size = 15, rotation=50)\nplt.yticks(size = 15)\nplt.xlabel(\"Toss Winner\", size = 35)\nplt.ylabel(\"Count\", size = 35)","c2aab5de":"matches_df['player_of_match'].value_counts().head(10).plot(kind = 'bar',figsize=(12,8), fontsize=15, color='c')\nplt.title(\"Top 10 players with most MoM awards\",fontsize=18,fontweight=\"bold\")\nplt.ylabel(\"Frequency\", size = 25)\nplt.xlabel(\"Players\", size = 25)","774126f5":"merge_df.groupby('Season')['batsman_runs'].sum().plot(kind = 'line', linewidth = 3, figsize =(15,5),color = 'c')\n                                                                                          \nplt.title(\"Runs over the years\",fontsize= 25, fontweight = 'bold')\nplt.xlabel(\"Season\", size = 25)\nplt.ylabel(\"Total Runs Scored\", size = 25)\nplt.xticks(size = 12)\nplt.yticks(size = 12)","b791550b":"#let's plot the top 10 run getter so far in IPL\nmerge_df.groupby('batsman')['batsman_runs'].sum().sort_values(ascending = False).head(10).plot(kind = 'bar', color = 'c',\n                                                                                            figsize = (15,5))\nplt.title(\"Top Run Getters of IPL\", fontsize = 20, fontweight = 'bold')\nplt.xlabel(\"Batsmen\", size = 25)\nplt.ylabel(\"Total Runs Scored\", size = 25)\nplt.xticks(size = 12)\nplt.yticks(size = 12)","196b3bfd":"consistent_batsman = merge_df[merge_df.batsman.isin(['SK Raina', 'V Kohli','RG Sharma','G Gambhir',\n                                            'RV Uthappa', 'S Dhawan','CH Gayle', 'MS Dhoni',\n                                            'DA Warner', 'AB de Villiers'])][['batsman','Season','total_runs']]\n\nconsistent_batsman.groupby(['Season','batsman'])['total_runs'].sum().unstack().plot(kind = 'box', figsize = (15,8))\nplt.title(\"Most Consistent batsmen of IPL\", fontsize = 20, fontweight = 'bold')\nplt.xlabel(\"Batsmen\", size = 25)\nplt.ylabel(\"Total Runs Scored each season\", size = 25)\nplt.xticks(size = 15)\nplt.yticks(size = 15)","569c309a":"merge_df.groupby('bowler')['player_dismissed'].count().sort_values(ascending = False).head(10).plot(kind = 'bar', \n                                                color = 'c', figsize = (15,5))\nplt.title(\"Top Wicket Takers of IPL\", fontsize = 20, fontweight = 'bold')\nplt.xlabel(\"Bowler\", size = 25)\nplt.ylabel(\"Total Wickets Taken\", size = 25)\nplt.xticks(size = 12)\nplt.yticks(size = 12)","d7b6c476":"#We will consider players who have played 10 or more seasons\nno_of_balls = pd.DataFrame(merge_df.groupby('batsman')['ball'].count()) #total number of matches played by each batsman\nruns = pd.DataFrame(merge_df.groupby('batsman')['batsman_runs'].sum()) #total runs of each batsman\nseasons = pd.DataFrame(merge_df.groupby('batsman')['Season'].nunique()) #season = 1 implies played only 1 season\n\nbatsman_strike_rate = pd.DataFrame({'balls':no_of_balls['ball'],'run':runs['batsman_runs'],'Season':seasons['Season']})\nbatsman_strike_rate.reset_index(inplace = True)\n\nbatsman_strike_rate['strike_rate'] = batsman_strike_rate['run']\/batsman_strike_rate['balls']*100\nhighest_strike_rate = batsman_strike_rate[batsman_strike_rate.Season.isin([10,11])][['Season','batsman','strike_rate']].sort_values(by = 'strike_rate',\n                                                                                                           ascending = False)\n\nhighest_strike_rate.head(10)","5571ca69":"plt.figure(figsize = (15,6))\nsns.barplot(x='batsman', y='strike_rate', data = highest_strike_rate.head(10), hue = 'Season',palette = 'cool')\nplt.title(\"Highest strike rates in IPL\",fontsize= 30, fontweight = 'bold')\nplt.xlabel(\"Player\", size = 25)\nplt.ylabel(\"Strike Rate\", size = 25)\nplt.xticks(size = 15, rotation=50)\nplt.yticks(size = 14)","11204717":"## **8. Matches Played in Each Season**","fabf248a":"### **4.2. Handling Missing Values in \"umpire1\", \"umpire2\", \"player_of_match\" columns**","74c6feea":"## **6. Handling Missing Values**","6d4e0989":"## **13. How toss decision affects match results ?**","773d18a9":"## **7. Number of Teams Participated Each Season**","e7afe69c":"- SL Malinga is the top wicket taker of IPL","8fd76779":"## **5. EDA of Deliveries Dataset**","8966c378":"## **9. Number of Matches Won by Team**","e3187a89":"<h1 style=\"color:green\" align=\"center\"><b> Exploratory Data Analysis - Sports <\/b> <\/h1>","857eeb77":"## **21. Batsmen with the best strike rates over the years**","974a6763":"## **3. EDA of Matches dataset**","cfd90bf0":"- Columns \"city\", \"winner\", \"player_of_match\", \"umpire1\", \"umpire2\" have missing values.\n- Here \"umpire3\" column has maximum number of missing value present. So we should delete that column from the dataframe.","827fd30d":"# **2. Load Datasets**","08f98de4":"# **1. Import Libraries**","67da5d9d":"## **18. Top Run Getters of IPL**","9791d121":"### **Author: Sidharth Kumar Mohanty**\n### **Data Science and Business Analytics Intern @ The Spark Foundation**\n### **Task #5 : \"Exploratory Data Analysis : Sports (Indian Premier League)\"**\n### **Dataset:** Click [here](https:\/\/bit.ly\/34SRn3b)\n### **Problem Statement :**\n\n\n1.   Perform Exploratory Data Analysis on 'Indian Premiere League'.\n2.   As a sports analysts, find out the most successful teams, players and factors contributing win or loss of a team.\n3.  Suggest teams or players a company should endorse for its products.\n\n","62aa904b":"## **16. Which player's performance has mostly led team's win ?**","8b761e1d":"- Usually after winning the toss, team choose to field first.","302677c4":"## **15. Individual teams decision to choose bat first or second after winning toss**","0cc56d10":"## **11. Which Team has maximum number of win in IPL so far**","d9227a36":"Happy Learning!!!","f235b897":"- Virat Kohli is the top run getter of IPL in all over the seasons","c9b680b1":"- After winning the toss the team who choose to field first has higher probability of winning the match.","9287ee70":"- CH Gayle is the most lead run scorer for the team followed by AB de Villiers.","5b3d6f8c":"### **4.1. Handling Missing Values in \"city\" column**","4affdef6":"**Q-2: Suggest teams or players a company should endorse for its products.**\n- If the franchise is looking for a consistant batsman who needs to score good amount of runs then go for V Kohli, S Raina, Rohit Sharma , David Warner...\n- If the franchise is looking for a game changing batsman then go for Chris Gayle, AB deVillers, R Sharma , MS Dhoni...\n- If the franchise is looking for a batsman who could score good amount of runs every match the go for DA Warner, CH Gayle, V Kohli,AB de Villiers,S Dhawan\n- If the franchise needs the best finisher in lower order having good strike rate then go for CH Gayle,KA Pollard, DA Warner,SR Watson,BB McCullum\n- If the franchise need a experienced bowler then go for Harbhajan Singh ,A Mishra,PP Chawla ,R Ashwin,SL Malinga,DJ Bravo\n- If the franchise need a wicket taking bowler then go for SL Malinga,DJ Bravo,A Mishra ,Harbhajan Singh, PP Chawla\n- If the franchise need a bowler bowling most number of dot balls then go for Harbhajan Singh,SL Malinga,B Kumar,A Mishra,PP Chawla\n- If the franchise need a bowler with good economy then go for DW Steyn ,M Muralitharan ,R Ashwin,SP Narine ,Harbhajan Singh.\n","86ccfbd2":"## **19. Which batsman has been most consistent among top 10 run getters ?**","5f763a5b":"### If you find this notebook useful, kindly **upvote** it\n### If you want the code of this full project. Cleck [here](https:\/\/github.com\/sidharth178\/Exploratory-Data-Analysis-Sports-IPL)\n### Follow me on [github](https:\/\/github.com\/sidharth178). I used to upload good data science projects.","989cf2dd":"Now both the datasets are clean i.e there is no missing value present. ","4974212b":"- In matches_df \"player_of_match\", \"umpirr1\", and \"umpire2\" has 4,2,2 numbers of missing value. So we can delete these rows having missing values.","cfb2082b":"## **12. Does teams choose to bat or field first, after winning toss ?**","e9b2682a":"## **17. Teams total scoring runs over the years?**","a9ba5ddb":"## **14. Number of Toss won by individual team**","95e999c7":"- Mumbai Indians has maximum number of winning matches followed by Chennai Super Kings.\n- In matches_df DataFrame, \"city\" column has 32 unique values while \"venue\" column has 41 distinct values.\n- Let's find out which city has many number of venues.","417390c2":"- In the year of 2011, 2012, 2013, there were 10,9,9 teams participated while in other seasons participated teams were 8.","01dfd707":"## **10. Venue which has hosted most number of IPL matches**","c68f8303":"<a href=\"https:\/\/colab.research.google.com\/github\/sidharth178\/Exploratory-Data-Analysis-Sports-IPL\/blob\/master\/Exploratory_Data_Analysis_Sports(IPL).ipynb\" target=\"_parent\"><img src=\"https:\/\/colab.research.google.com\/assets\/colab-badge.svg\" alt=\"Open In Colab\"\/><\/a>","3670203e":"## **4. Handling Missing Values**\n","4e5a809d":"- Here we can see column \"player_dismissed\", \"dismissal_kind\", \"fielder\" have maximum(more than 90%) number of missing value present.\n- So we should delete these columns.","651dca46":"## **20. Top Wicket Takers of IPL**","c2e4d444":"**Q-1: As a sports analysts, find out the most successful teams, players and factors contributing win or loss of a team.**\n- Mumbai Indians is the most successful team in IPL and has won the most number of toss.\n- There were more matches won by chasing the total(419 matches) than defending(350 matches).\n- When defending a total, the biggest victory was by 146 runs(Mumbai Indians defeated Delhi Daredevils by 146 runs on 06 May 2017 at Feroz Shah Kotla stadium, Delhi).\n- When chasing a target, the biggest victory was by 10 wickets(without losing any wickets) and there were 11 such instances.\n- The Mumbai city has hosted the most number of IPL matches.\n- Chris Gayle has won the maximum number of player of the match title.\n- Eden Gardens has hosted the maximum number of IPL matches.\n- If a team wins a toss choose to field first as it has highest probablity of winning","c6bd0e52":"- As all missing values are from \"Dubai International Cricket Stadium\". So we can fill the missing value by \"Dubai\"."}}