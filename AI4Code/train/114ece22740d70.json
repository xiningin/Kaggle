{"cell_type":{"adedfbed":"code","1647c7a5":"code","ff0461aa":"code","9f53f954":"code","497d3949":"code","1e77bd47":"code","02410947":"code","c0dbea66":"code","66e6d1cb":"code","9b2b0c9d":"code","f72c5ff3":"code","b15e29c8":"code","b2404ffc":"code","497cb6d8":"code","6a2f83d3":"code","508b5ef9":"code","1c8a724a":"code","65fbad6e":"code","43a980ae":"code","349f93db":"code","bd82ba24":"code","a64e3213":"code","87d6a65f":"code","bb2b26a2":"markdown","725c8c20":"markdown","0fb81cac":"markdown","f1578d66":"markdown","90ccfe13":"markdown","e3d98e43":"markdown","8a55dedd":"markdown","2a1382cb":"markdown","27de470b":"markdown"},"source":{"adedfbed":"from statsmodels.graphics.tsaplots import plot_acf\nfrom statsmodels.graphics.tsaplots import plot_pacf\nfrom statsmodels.tsa.arima_model import ARIMA\nfrom statsmodels.tsa.stattools import adfuller\n\nimport matplotlib.pyplot as plt\nimport numpy as np\nimport pandas as pd\nimport warnings","1647c7a5":"warnings.filterwarnings(\"ignore\")","ff0461aa":"## Lendo o arquivo\nbova11 = pd.read_csv('\/kaggle\/input\/bova-11\/BOVA11.SA.csv')","9f53f954":"## Tornando o nome das colunas mais \"pythonico\"\nbova11.columns = 'date', 'open', 'high', 'low', 'close', 'adj_close', 'volume'","497d3949":"## Transformando a coluna date em tipo data \nbova11['date'] = pd.DatetimeIndex(bova11['date'])","1e77bd47":"## Adicionando colunas de ano, mes e semana\nbova11['year'] = bova11['date'].apply(lambda x: x.year)\nbova11['month'] = bova11['date'].apply(lambda x: x.month)\nbova11['week'] = bova11['date'].apply(lambda x: x.week)","02410947":"bova11.info()","c0dbea66":"bova11 = bova11.dropna()","66e6d1cb":"bova11.describe()","9b2b0c9d":"plt.figure(figsize=[20, 7])\nplt.title('Cota\u00e7\u00e3o maxima por dia da BOVA11 ao longo do tempo')\nplt.plot(bova11[bova11['date'].between('2014-01-01', '2014-12-31')]['high'], label='2014')\nplt.plot(bova11[bova11['date'].between('2015-01-01', '2015-12-31')]['high'], label='2015')\nplt.plot(bova11[bova11['date'].between('2016-01-01', '2016-12-31')]['high'], label='2016')\nplt.plot(bova11[bova11['date'].between('2017-01-01', '2017-12-31')]['high'], label='2017')\nplt.plot(bova11[bova11['date'].between('2018-01-01', '2018-12-31')]['high'], label='2018')\nplt.plot(bova11[bova11['date'].between('2019-01-01', '2019-12-31')]['high'], label='2019')\nplt.legend()\nplt.show()","f72c5ff3":"X = bova11[bova11['year'] >= 2016]['high']","b15e29c8":"plt.figure(figsize=[20, 7])\nplt.title('Cota\u00e7\u00e3o maxima por dia da BOVA11 ao longo do tempo a partir de 2016')\nplt.plot(X)\nplt.show()","b2404ffc":"plt.figure(figsize=[20, 7])\nplt.title('Distribui\u00e7\u00e3o dos valores maximos por dia da BOVA11')\nplt.hist(X)\nplt.show()","497cb6d8":"## O Teste de Dickey-Fuller serve para verificar se uma serie temporal \u00e9 estacionaria.\ndef dickey_fuller(serie):\n    resultado = adfuller(serie)\n    print('Estatistica ADF: %f' % resultado[0])\n    print('p-valor: %f' % resultado[1])\n    print('Valores criticos:')\n    for chave, valor in resultado[4].items():\n        print('\\t%s: %.3f' % (chave, valor))","6a2f83d3":"dickey_fuller(X)","508b5ef9":"serie_estacionaria = X - X.shift(-2)\nserie_estacionaria = serie_estacionaria.dropna()","1c8a724a":"dickey_fuller(serie_estacionaria)\n\nplt.figure(figsize=[20, 7])\nplt.title('BOVA11 apos o processo de se tornar estacionaria')\nplt.plot(serie_estacionaria, label='Valores')\n\nplt.legend()\nplt.show()\n\nplt.figure(figsize=[20, 7])\nplt.title('Distribuicao dos valores da BOVA11 ap\u00f3s se tornar estacionaria')\nplt.hist(serie_estacionaria)\nplt.show()","65fbad6e":"fig, (ax1, ax2) = plt.subplots(1, 2, figsize=(20, 5))\n\nplot_acf(serie_estacionaria, ax=ax1)\nplot_pacf(serie_estacionaria, ax=ax2)\nplt.show()","43a980ae":"tamanho_teste = 60\ntamanho_treino = len(X) - tamanho_teste\ntreino = list(X[0:tamanho_treino])\nteste = list(X[tamanho_treino:])\n\nordem = (1, 2, 0)","349f93db":"modelo = ARIMA(treino, order=ordem).fit()","bd82ba24":"fig, axs = plt.subplots(2, 2, figsize=(20, 7))\n\nprint('Media: %.2f' % np.mean(modelo.resid))\nprint('Desvio: %.2f\\n' % np.std(modelo.resid))\n\ndickey_fuller(modelo.resid)\n\naxs[0][0].hist(modelo.resid)\naxs[0][1].plot(modelo.resid)\n\nplot_acf(modelo.resid, ax=axs[1][0])\nplot_pacf(modelo.resid, ax=axs[1][1])\n\nplt.show()","a64e3213":"previsao_diario = []\nfor i in range(0, tamanho_teste):\n    modelo_diario = ARIMA(list(X[0:tamanho_treino + i]), order=ordem).fit()\n    previsao_diario.append(modelo_diario.forecast()[0][0])","87d6a65f":"rmse_diario = np.sqrt(np.sum(np.power(np.subtract(teste, previsao_diario), 2)))\nprint('RMSE: %.2f' % rmse_diario)\n\nplt.figure(figsize=[20, 7])\nplt.plot(teste, label='Real')\nplt.plot(previsao_diario, label='Previsto')\n\nplt.xticks([x for x in range(0, tamanho_teste)])\nplt.grid(axis='x')\nplt.legend()\nplt.show()","bb2b26a2":"## Previs\u00f5es","725c8c20":"Como podemos verificar a nossa s\u00e9rie n\u00e3o \u00e9 estacionaria. Vamos utilizar a diferencia\u00e7\u00e3o para transforma-la em um serie estacionaria.","0fb81cac":"Diferenciando com um lag de 2 conseguimos uma serie mais estacionaria.","f1578d66":"## Estacionaridade\nPara podermos utilizar modelos como o ARIMA devemos garantir que a serie temporal tenha m\u00e9dia e desvio padr\u00e3o constante.","90ccfe13":"De acordo com os graficos temos que o termo de m\u00e9dia movel \u00e9 0 e o de autoregress\u00e3o \u00e9 1.","e3d98e43":"## Auto correla\u00e7\u00e3o e auto correla\u00e7\u00e3o parcial\nCom o plot dessas fun\u00e7\u00f5es podemos definir os termos de auto regress\u00e3o e m\u00e9dia movel do ARIMA","8a55dedd":"## Conclus\u00e3o\nA partir do grafico podemos perceber que utilizando o arima podemos fazer boas previs\u00f5es do valor da a\u00e7\u00e3o com um erro m\u00e9dio de R\\$ 7.70","2a1382cb":"## Valida\u00e7\u00e3o do modelo","27de470b":"Como o grafico mostra a partir de 2016 houve uma mudan\u00e7a brusca na tendencia da serie. Por isso s\u00f3 utilizarei os valores de 2016 em diante"}}