{"cell_type":{"2e4f24f9":"code","0298edcf":"code","e28e0421":"code","dda4e72f":"code","40dbd840":"code","519d8ad8":"code","ace2db00":"code","228b518f":"code","ae72e80b":"code","8bcf2d6a":"code","0e14f9cb":"code","819cbb85":"code","dfd43c26":"code","e541209e":"code","1f54141a":"code","9999b4ac":"code","108be285":"code","d94481d1":"code","d4aacec5":"code","d11ab0b2":"code","f5f198d5":"code","87576fe5":"code","b45358ad":"code","a84bee1f":"code","ad38bac0":"code","80fb36a8":"code","0d6c8cfd":"code","1826a143":"code","b8b50280":"markdown","66038f75":"markdown","72f13f67":"markdown","b865b942":"markdown","d0896e5e":"markdown","63a8b9d1":"markdown","4e9af63b":"markdown","446f94b7":"markdown","7c767dce":"markdown","0a090219":"markdown","4ac3fd48":"markdown","555b1217":"markdown"},"source":{"2e4f24f9":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","0298edcf":"df = pd.read_csv(os.path.join(dirname, filename))\ndf.head(10)","e28e0421":"df.rename(columns={'Length1':'Vertical Length','Length2':'Diagonal Length','Length3':'Cross Length'},inplace=True)","dda4e72f":"df","40dbd840":"def species_int(col):\n    if col == 'Bream':\n        return 1\n    elif col == 'Perch':\n        return 2\n    elif col == 'Roach':\n        return 3\n    elif col == 'Pike':\n        return 4\n    elif col == 'Smelt':\n        return 5\n    elif col == 'Parkki':\n        return 6\n    elif col == 'Whitefish':\n        return 7","519d8ad8":"df['SpeciesNo'] = df['Species'].apply(species_int)","ace2db00":"df.corr()","228b518f":"import matplotlib.pyplot as plt\nimport seaborn as sns ","ae72e80b":"sns.countplot(x = df['Species'])","8bcf2d6a":"sns.scatterplot(x = 'Weight',y='Vertical Length',data = df)","0e14f9cb":"sns.scatterplot(x = 'Weight',y='Diagonal Length',data = df)","819cbb85":"sns.scatterplot(x = 'Weight',y='Cross Length',data = df,hue = 'Species',palette='coolwarm')","dfd43c26":"sns.pairplot(df)","e541209e":"from sklearn.model_selection import train_test_split\nX = df.drop(labels=['SpeciesNo','Weight','Species'],axis=1)\ny = df['Weight']","1f54141a":"X_train, X_test, y_train, y_test = train_test_split(X, y,random_state = 101)","9999b4ac":"from sklearn.linear_model import LinearRegression\nlm = LinearRegression()\nlm.fit(X_train,y_train)\nprediction = lm.predict(X_test)","108be285":"lm.score(X_test,y_test)","d94481d1":"from sklearn.metrics import mean_squared_error,mean_absolute_error,r2_score\nprint('MAE:',mean_absolute_error(prediction,y_test))\nprint('MSE:',mean_squared_error(prediction,y_test))\nprint('R2 Score:',r2_score(prediction,y_test))","d4aacec5":"plt.scatter(prediction,y_test)","d11ab0b2":"from sklearn.preprocessing import PolynomialFeatures\npoly = PolynomialFeatures(2)","f5f198d5":"poly.fit(X_train,y_train)","87576fe5":"xtrain_poly = poly.transform(X_train)\nxtest_poly = poly.transform(X_test)","b45358ad":"lm1 = LinearRegression()","a84bee1f":"lm1.fit(xtrain_poly,y_train)","ad38bac0":"poly_predict = lm1.predict(xtest_poly)","80fb36a8":"lm1.score(xtest_poly,y_test)","0d6c8cfd":"print('MAE:',mean_absolute_error(poly_predict,y_test))\nprint('MSE:',mean_squared_error(poly_predict,y_test))\nprint('R2 Score:',r2_score(poly_predict,y_test))","1826a143":"fig = plt.figure(figsize=(12,8))\nplt.scatter(poly_predict,y_test,edgecolors='black')","b8b50280":"First checking for linear model","66038f75":"# **Now checking for polynomial model of degree 2**","72f13f67":"The straight line shows the little variation between the predicted data and the original data ","b865b942":"A pretty good score","d0896e5e":"A function to assign a unique integer to each species","63a8b9d1":"The curvy line shows the large variation between the predicted data and the original data ","4e9af63b":"Correlation between each feature","446f94b7":"A better score than the linear model","7c767dce":"It seems tha Weight has a second order relation with the lenghts","0a090219":"Creating train-test dataset","4ac3fd48":"Changing column names for length1 , length2 , length3","555b1217":"Importing libraries for visualisation"}}