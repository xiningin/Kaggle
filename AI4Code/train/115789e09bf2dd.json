{"cell_type":{"19eb3fbe":"code","d62c7d1c":"code","c36d9c45":"code","20c6cc80":"code","d3d165cc":"code","c8ada329":"code","11055480":"code","319746fc":"code","dfa96e19":"code","e40c7e9c":"code","a9ba5f77":"code","47e40cb5":"code","4bc0188d":"code","964c2b7e":"code","3c1b5b99":"code","273b8747":"markdown"},"source":{"19eb3fbe":"import pandas as pd\nimport numpy as np\nimport seaborn as sns\nimport matplotlib.pyplot as plt","d62c7d1c":"data = pd.read_csv(\"..\/input\/coronavirus-2019ncov\/covid-19-all.csv\")\n#data = pd.read_csv(\"\/kaggle\/input\/novel-corona-virus-2019-dataset\/covid_19_data.csv\")\ndata_sp = data[data['Country\/Region'] == 'Spain']\ndata_it = data[data['Country\/Region'] == 'Italy']\ndata_fr = data[data['Country\/Region'] == 'France']","c36d9c45":"data_sp","20c6cc80":"first_countries = ['Italy', 'Germany', 'France', 'Spain', 'UK']\nasian_countries = ['South Korea', 'Japan', 'Taiwan', 'India']\nmore_countries = ['Austria', 'Poland', 'Sweden', 'Portugal', 'Ireland', 'Netherlands', 'Russia']\nwell_countries = []\ncountries = first_countries + more_countries + well_countries\n\n#data = pd.read_csv(\"\/kaggle\/input\/novel-corona-virus-2019-dataset\/covid_19_data.csv\")\ndata = pd.read_csv(\"..\/input\/coronavirus-2019ncov\/covid-19-all.csv\")\ndata = data.rename(columns={'Confirmed': 'NumberOfConfirmedCases'})\ndata['DayOfYear'] = pd.to_datetime(data['Date']).dt.dayofyear\ndata = data.filter(['DayOfYear', 'Country\/Region', 'Province\/State', 'NumberOfConfirmedCases', 'Deaths', 'Date', 'Recovered'])\ndata_ch = data[data['Country\/Region'] == 'Mainland China']\ndata = data[data.DayOfYear >= 40]\ndata_us = data[data['Country\/Region'] == 'US']\n\n# only country data:\ndata = data[data['Province\/State'].isnull() | (data['Province\/State'] == data['Country\/Region'])]\ndata['Symptomatic'] = data['NumberOfConfirmedCases'] - data['Deaths'] - data['Recovered']\ndata['EverSymptomatic'] = data['NumberOfConfirmedCases']","d3d165cc":"\n\n\n\n#data = data[pd.isnull(data['Province\/State'])]\n\nwith sns.axes_style(\"whitegrid\"):\n    fig, ax = plt.subplots(1, figsize=(16, 20))\n    ax.set_yscale('log')\n    #ax.set_ylim(1, 1e5)\n    ax.set_xlim(50, 85)\n    df=data[data['Country\/Region'] == 'Spain'].copy()\n    df['NewSymptomatic'] = df['EverSymptomatic'].diff()\n    df.plot(x='DayOfYear', y=['EverSymptomatic', 'Recovered', 'Symptomatic', 'Deaths', \"NewSymptomatic\"],\n                  ax=ax, marker='o')\n   ","c8ada329":"with sns.axes_style(\"whitegrid\"):\n    fig, axs = plt.subplots(2, figsize=(16, 20))\n    axs[0].set_yscale('log')\n    axs[0].set_ylim(1, 1e5)\n    #axs[0].set_xlim(50, 78)\n    axs[1].set_yscale('log')\n    axs[1].set_ylim(1, 1e5)\n    #axs[1].set_xlim(50, 78)\n    sns.lineplot(data=data[data['Country\/Region'].isin(first_countries + more_countries)],\n                 x ='DayOfYear', y='NumberOfConfirmedCases', hue='Country\/Region', ax=axs[0], marker='o')\n    sns.lineplot(data=data[data['Country\/Region'].isin(asian_countries)],\n                 x ='DayOfYear', y='NumberOfConfirmedCases', hue='Country\/Region', ax=axs[1], marker='o')","11055480":"with sns.axes_style(\"whitegrid\"):\n    fig, ax = plt.subplots(figsize=(16, 15))\n    #ax.set_yscale('log')\n    grid = sns.scatterplot(data=data[data['Country\/Region'].isin(countries)],\n                                     x ='DayOfYear', y='Deaths', hue='Country\/Region', ax=ax)","319746fc":"data_us = data_us[data_us.NumberOfConfirmedCases > 10]\n\nwith sns.axes_style(\"whitegrid\"):\n    fig, ax = plt.subplots(figsize=(16, 15))\n    ax.set_yscale('log')\n    grid = sns.lineplot(data=data_us, x ='DayOfYear', y='NumberOfConfirmedCases', hue='Province\/State', ax=ax, marker='o')\n","dfa96e19":"from math import log, exp\nfrom functools import reduce\n\nwith sns.axes_style(\"whitegrid\"):\n    fig, axs = plt.subplots(2, figsize=(20, 20))\n    axs[0].set_yscale('log')\n    axs[1].set(ylim=(-0.0, 160.0))\n    \n\n    #sns.scatterplot(data=data_es, x ='DayOfYear', y='Expected', ax=ax)\n    #sns.scatterplot(data=data_es, x ='DayOfYear', y='NOCC', ax=ax)\n\n    pandas = []\n    for country in ['South Korea', 'Italy', 'Spain']: #first_countries + asian_countries:\n        velocity_expected = []\n        velocity = []\n        ys = []\n        country_data = data[data['Country\/Region'] == country].copy()\n        for nocc in country_data['NumberOfConfirmedCases'].values:\n            ys.insert(0, log(nocc))\n            if len(ys) > 1:\n                n = 0;\n                Sx = 0;\n                Sy = 0;\n                Sx2 = 0;\n                Sy2 = 0;\n                Sxy = 0;            \n                for x, y in enumerate(ys):\n                    f = 1 if x < 2 else 0\n                    #f = 0.8 ** x if x < 7 else 0\n                    #f = 0.9 ** x if x < 8 else 0\n\n                    n += f\n                    Sx += f * x\n                    Sy += f * y\n                    Sx2 += f * x * x\n                    Sy2 += f * y * y\n                    Sxy += f * x * y\n                den = n*Sx2 - Sx*Sx\n                #print(\"y: %s, den: %f\" % (ys, den))\n                a = (Sy*Sx2 - Sx*Sxy) \/ den\n                b = (n*Sxy - Sx*Sy) \/ den\n            \n                expected = exp(a)\n                expected_yesterday = exp(a + b)\n                vel = expected\/expected_yesterday\n                #print(\"nocc: %f, y: %f, expected: %f, yesterday: %f, a: %f, b: %f, vel: %f\" %\n                #      (nocc, y, expected, expected_yesterday, a, b, vel))\n                velocity_expected.append(100 * (expected\/expected_yesterday - 1))\n                velocity.append(100*(exp(ys[0]-ys[1]) - 1))\n            else:\n                velocity_expected.append(0.0)\n                velocity.append(0.0)\n    \n        #print(\"len data: %s, len vel: %s\" % (len(country_data), len(velocity)))\n        country_data['Velocity'] = velocity_expected\n        pandas.append(country_data)\n\n    result = reduce(lambda a, b: a.append(b), pandas)\n    result = result[result.DayOfYear > 50]\n    sns.lineplot(data=result, x = 'DayOfYear', y='NumberOfConfirmedCases', ax=axs[0], hue='Country\/Region', marker='o')\n    g = sns.lineplot(data=result, x ='DayOfYear', y='Velocity', ax=axs[1],  hue='Country\/Region', marker=\"o\")\n    g.set(ylabel = 'Velocity (% Daily confirmed cases increase)')\n","e40c7e9c":"#result2 = result\nresult[result['DayOfYear']> 72]","a9ba5f77":"#with sns.axes_style(\"whitegrid\"):\n#    fig, ax = plt.subplots(figsize=(20, 16))\n#    ax.set(ylim=(-0.0, 60.0))\n#    sns.lineplot(data=result[result['Country\/Region'] =='Spain'], x ='DayOfYear', y='Velocity', ax=ax, marker=\"o\")\n#    sns.lineplot(data=result2[result2['Country\/Region'] =='Spain'], x ='DayOfYear', y='Velocity', ax=ax, marker=\"o\")\n    ","47e40cb5":"import pandas as pd\nccaa_source_data = pd.read_csv(\"\/kaggle\/input\/covid19spaindata7\/COVID19-Spain\/ccaa_covid19_casos.csv\")\nccaa_source_data=ccaa_source_data[ccaa_source_data['20\/03\/2020'] >= 100]\nccaa_source_data","4bc0188d":"from datetime import datetime\nfrom functools import reduce\ncas = []\ncases = []\ndates = []\nfor i, row in ccaa_source_data.iterrows():\n    ca = row.CCAA\n    #if ca == 'Total':\n    #    ca = 'Espa\u00f1a'\n    for i, val in enumerate(row):\n        if i <= 2:\n            continue\n        date = ccaa_source_data.columns[i]\n        cas.append(ca)\n        cases.append(val)\n        dates.append(datetime.strptime(date, \"%d\/%m\/%Y\"))\n\nccaa_data = pd.DataFrame({'CA': cas, 'ObservationDate': dates, 'NumberOfConfirmedCases': cases})\nccaa_data['DayOfYear'] = pd.to_datetime(ccaa_data['ObservationDate']).dt.dayofyear\nca_names = ccaa_source_data.CCAA.values","964c2b7e":"with sns.axes_style(\"whitegrid\"):\n    fig, ax = plt.subplots(figsize=(16, 15))\n    ax.set_yscale('log')\n    ax.set_ylim(1, 1e5)\n    sns.lineplot(data=ccaa_data,\n                 x ='DayOfYear', y='NumberOfConfirmedCases', hue='CA', ax=ax, marker='o')","3c1b5b99":"from math import log, exp\nfrom functools import reduce\n\nsoften_length = 4\n\npandas = []\nwith sns.axes_style(\"whitegrid\"):\n    fig, axs = plt.subplots(1, 1, figsize=(20, 16))\n    #for ax in axs:\n    axs.set(ylim=(1, 70.0))\n    for ca in ca_names:\n        soften_velocity = []\n        velocity = []\n        ys = []\n        ca_data = ccaa_data[ccaa_data['CA'] == ca].copy()\n        #print(ca, ca_data)\n        for nocc in ca_data['NumberOfConfirmedCases'].values:\n            y = log(nocc) if nocc >= 1 else 0\n            if ys:\n                ys.insert(0, y)\n            else:\n                ys = [y, y, y]\n            n = 0;\n            Sx = 0;\n            Sy = 0;\n            Sx2 = 0;\n            Sy2 = 0;\n            Sxy = 0;            \n            for x, y in enumerate(ys):\n                #f = 0.6 if x < 10 else 0\n                #f = 0.7 ** x if x < 5 else 0\n                f = 1 if x < soften_length else 0\n                n += f\n                Sx += f * x\n                Sy += f * y\n                Sx2 += f * x * x\n                Sy2 += f * y * y\n                Sxy += f * x * y\n            den = n*Sx2 - Sx*Sx\n            a = (Sy*Sx2 - Sx*Sxy) \/ den\n            b = (n*Sxy - Sx*Sy) \/ den\n            \n            expected = exp(a)\n            expected_yesterday = exp(a + b)\n            vel = expected\/expected_yesterday\n            #print(\"nocc: %f, y: %f, expected: %f, yesterday: %f, a: %f, b: %f, vel: %f\" %\n            #      (nocc, y, expected, expected_yesterday, a, b, vel))\n            soften_velocity.append(100 * (expected\/expected_yesterday - 1))\n            velocity.append(100*(exp(ys[0]-ys[1]) - 1))\n    \n        #print(\"len data: %s, len vel: %s\" % (len(country_data), len(velocity)))\n        #ca_data['SoftenVelocity'] = soften_velocity\n        #ca_data['Velocity'] = velocity\n        ca_data['Velocity'] = soften_velocity\n        if ca == 'Total' or ca == 'Madrid':\n            pandas.append(ca_data)\n    \n    vel_data = reduce(lambda a, b: a.append(b), pandas)\n    #sns.lineplot(data=vel_data, x ='DayOfYear', y='Velocity', ax=axs[1],  hue='CA')\n    sns.lineplot(data=vel_data, x ='DayOfYear', y='Velocity', ax=axs,  hue='CA', marker='o')\n\n\n","273b8747":"## Evaluaci\u00f3n por comunidades autonomas\n\nA partir de datos recogidos por [@datadista](https:\/\/twitter.com\/datadista) (https:\/\/github.com\/datadista\/datasets)."}}