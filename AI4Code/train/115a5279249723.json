{"cell_type":{"9e38f9bd":"code","23bbe727":"code","4f41c22d":"code","e6fedf93":"code","0fec134f":"code","3faf0aad":"code","0a0766d7":"code","58fe8936":"code","6c072227":"code","95ec2c62":"code","e61d3c12":"code","156d4491":"code","dd83eba3":"code","167550e9":"code","aa14ebe5":"code","94a77be4":"code","c46dd8d0":"code","013615d9":"code","b80df1d8":"code","48a060c7":"code","5c98a93f":"code","0443be97":"code","c4fd667f":"code","2995461e":"code","17bac690":"code","99c15159":"code","035cf640":"code","3e9562ba":"code","a6fbe9ae":"code","7c0af045":"code","8d0b16f0":"code","97360e91":"code","fd28fc47":"code","79557d0c":"code","4233b6f6":"code","c687478b":"code","7b2d502c":"code","ba23b55b":"code","ff9b69c0":"code","b07acda5":"code","d94394ef":"code","30240fa0":"markdown","bcda72e0":"markdown","064fe185":"markdown","94712e29":"markdown","96e6503b":"markdown","09df3aa4":"markdown"},"source":{"9e38f9bd":"import numpy as np \nimport pandas as pd \n\nimport tensorflow as tf\nfrom tensorflow.keras.models import Model, load_model\nfrom tensorflow.keras.layers import Input, LSTM, Embedding, Dense\nfrom sklearn.utils import shuffle\nfrom sklearn.model_selection import train_test_split\n\nimport re\nimport string\nfrom string import digits\n\nimport nltk\nfrom nltk.corpus import stopwords\nfrom nltk import word_tokenize\n\nimport matplotlib.pyplot as plt\nimport os","23bbe727":"lines = pd.read_csv(\"\/kaggle\/input\/hindi-english-truncated-corpus\/Hindi_English_Truncated_Corpus.csv\")\nlines.head()","4f41c22d":"lines['source'].value_counts()","e6fedf93":"lines=lines[lines['source']=='ted']","0fec134f":"lines.drop_duplicates(inplace=True)","3faf0aad":"lines=lines.sample(n=25000, random_state=101)\nlines.shape","0a0766d7":"# Lowercase all characters\nlines['english_sentence']=lines['english_sentence'].apply(lambda x: x.lower())\nlines['hindi_sentence']=lines['hindi_sentence'].apply(lambda x: x.lower())","58fe8936":"# Remove quotes\nlines['english_sentence']=lines['english_sentence'].apply(lambda x: re.sub(\"'\", '', x))\nlines['hindi_sentence']=lines['hindi_sentence'].apply(lambda x: re.sub(\"'\", '', x))","6c072227":"exclude = set(string.punctuation) # Set of all special characters\n# Remove all the special characters\nlines['english_sentence']=lines['english_sentence'].apply(lambda x: ''.join(ch for ch in x if ch not in exclude))\nlines['hindi_sentence']=lines['hindi_sentence'].apply(lambda x: ''.join(ch for ch in x if ch not in exclude))","95ec2c62":"# Remove all numbers from text\nremove_digits = str.maketrans('', '', digits)\nlines['english_sentence']=lines['english_sentence'].apply(lambda x: x.translate(remove_digits))\nlines['hindi_sentence']=lines['hindi_sentence'].apply(lambda x: x.translate(remove_digits))\nlines['hindi_sentence'] = lines['hindi_sentence'].apply(lambda x: re.sub(\"[\u0968\u0969\u0966\u096e\u0967\u096b\u096d\u096f\u096a\u096c]\", \"\", x))","e61d3c12":"# Remove extra spaces\nlines['english_sentence']=lines['english_sentence'].apply(lambda x: x.strip())\nlines['hindi_sentence']=lines['hindi_sentence'].apply(lambda x: x.strip())\nlines['english_sentence']=lines['english_sentence'].apply(lambda x: re.sub(\" +\", \" \", x))\nlines['hindi_sentence']=lines['hindi_sentence'].apply(lambda x: re.sub(\" +\", \" \", x))","156d4491":"\nlines['hindi_sentence']=lines['hindi_sentence'].apply(lambda x: re.sub(\"[a-zA-Z]\", \" \", x))","dd83eba3":"lines.head()","167550e9":"stop_words = stopwords.words('english') ","aa14ebe5":"corpus = ' '\nfor line in lines['english_sentence']:\n    corpus += ' '.join(line.split())\ncorpus","94a77be4":"from wordcloud import WordCloud\n\nwc = WordCloud(stopwords=stop_words, background_color=\"white\", colormap=\"Dark2\",\n               max_font_size=150 )\n\nwc.generate(corpus)\n\nplt.rcParams[\"figure.figsize\"] = (16,6)\nplt.imshow(wc, interpolation=\"bilinear\")\nplt.axis(\"off\")\n    \nplt.show()\n","c46dd8d0":"# Vectorize the data\n\ninput_texts = []\ntarget_texts = []\n\ninput_characters = set()\ntarget_characters = set()","013615d9":"for line in lines['english_sentence']:\n    input_texts.append(line)\n    for char in line:\n        if re.findall(\"[a-zA-Z]\", char) or char == ' ':\n            if char not in input_characters:\n                input_characters.add(char)\n            \nfor line in lines['hindi_sentence']:\n    \n    target_text = '%' + line + '$'\n    \n    target_texts.append(line)\n    for char in target_text:\n        if char not in target_characters:\n            target_characters.add(char)","b80df1d8":"target_characters","48a060c7":"# for line in lines['english_sentence']:\n#     for word in line.split():\n#         if word not in input_characters:\n#             input_characters.add(word)\n        \n# for line in lines['hindi_sentence']:\n#     for word in line.split():\n#         if word not in target_characters:\n#             target_characters.add(word)","5c98a93f":"# from nltk import ngrams \n# list(ngrams(words,2))","0443be97":"#input_characters","c4fd667f":"input_characters = sorted(list(input_characters))\ntarget_characters = sorted(list(target_characters))\n\nnum_encoder_tokens = len(input_characters)\nnum_decoder_tokens = len(target_characters)\n\nmax_encoder_seq_length = max([len(txt) for txt in input_texts])\nmax_decoder_seq_length = max([len(txt) for txt in target_texts])","2995461e":"print(\"Number of samples : \", len(input_texts))\nprint(\"Number of unique input tokens : \", num_encoder_tokens)\nprint(\"Number of unique output tokens : \", num_decoder_tokens)\nprint(\"Max sequence length for inputs : \", max_encoder_seq_length)\nprint(\"Max sequence length for outputs : \", max_decoder_seq_length)","17bac690":"input_token_index = dict([(char, i) for i, char in enumerate(input_characters)])\ntarget_token_index = dict([(char, i) for i, char in enumerate(target_characters)])","99c15159":"#input_token_index","035cf640":"encoder_input_data = np.zeros((len(input_texts), max_encoder_seq_length, num_encoder_tokens), dtype='float32')\ndecoder_input_data = np.zeros((len(input_texts), max_decoder_seq_length, num_decoder_tokens), dtype='float32')\ndecoder_target_data = np.zeros((len(input_texts), max_decoder_seq_length, num_decoder_tokens), dtype='float32')","3e9562ba":"print(\"Encoder input data : \", encoder_input_data.shape)\nprint(\"Decoder input data : \", decoder_input_data.shape)\nprint(\"Decoder target data : \", decoder_target_data.shape)","a6fbe9ae":"for i, (input_text, target_text) in enumerate(zip(input_texts, target_texts)):\n    for t, char in enumerate(input_text):\n        if re.findall(\"[a-zA-Z]\", char) or char == ' ': \n            encoder_input_data[i,t, input_token_index[char]] = 1\n    encoder_input_data[i,t+1:, input_token_index[' ']] = 1\n    \n    for t, char in enumerate(target_text):\n        decoder_input_data[i, t, target_token_index[char]] = 1\n        \n        if t > 0:\n            decoder_target_data[i, t-1, target_token_index[char]] = 1\n            \n    decoder_input_data[i,t+1:, target_token_index[' ']] = 1\n    decoder_target_data[i, t:, target_token_index[' ']] = 1","7c0af045":"encoder_input_data[0]","8d0b16f0":"batch_size = 128 # Batch size for training\nepochs = 50 # Number of epochs to train for\nlatent_dim = 256","97360e91":"# Define an input sequence and process it.\nencoder_inputs = Input(shape=(None, num_encoder_tokens))\nencoder = LSTM(latent_dim, return_state=True)\nencoder_outputs, state_h, state_c = encoder(encoder_inputs)\n\n# We discard `encoder_outputs` and only keep the states.\nencoder_states = [state_h, state_c]","fd28fc47":"# Set up the decoder, using `encoder_states` as initial state.\ndecoder_inputs = Input(shape=(None, num_decoder_tokens))\n\n# We set up our decoder to return full output sequences,\n# and to return internal states as well. We don't use the \n# return states in the training model, but we will use them in inference.\n\ndecoder_lstm = LSTM(latent_dim, return_sequences=True, return_state=True)\ndecoder_outputs, _, _ = decoder_lstm(decoder_inputs, initial_state=encoder_states)\n\ndecoder_dense = Dense(num_decoder_tokens, activation='softmax')\ndecoder_outputs = decoder_dense(decoder_outputs)","79557d0c":"# Define the model that will turn\n# `encoder_input_data` & `decoder_input_data` into `decoder_target_data`\nmodel = Model([encoder_inputs, decoder_inputs], decoder_outputs)\n\n# Run training\nmodel.compile(optimizer='rmsprop', loss='categorical_crossentropy', metrics=['accuracy'])","4233b6f6":"model.summary()","c687478b":"checkpoint_path = \"\/kaggle\/working\/training_1\/cp.ckpt\"\ncheckpoint_dir = os.path.dirname(checkpoint_path)\n\n# Create a callback that saves the model's weights\ncp_callback = tf.keras.callbacks.ModelCheckpoint(filepath=checkpoint_path,\n                                                 save_weights_only=True,\n                                                 verbose=1)","7b2d502c":"model.fit([encoder_input_data, decoder_input_data], decoder_target_data,\n          batch_size=batch_size,\n          epochs=epochs,\n          validation_split=0.2,\n         callbacks=[cp_callback])","ba23b55b":"# # Loads the weights\n# model.load_weights('\/kaggle\/working\/training_1\/cp.ckpt')","ff9b69c0":"encoder_model = Model(encoder_inputs, encoder_states)\n\ndecoder_state_input_h = Input(shape=(latent_dim,))\ndecoder_state_input_c = Input(shape=(latent_dim,))\n\ndecoder_states_inputs = [decoder_state_input_h, decoder_state_input_c]\ndecoder_outputs, state_h, state_c = decoder_lstm(decoder_inputs, initial_state = decoder_states_inputs)\n\ndecoder_states = [state_h, state_c]\ndecoder_outputs = decoder_dense(decoder_outputs)\n\ndecoder_model = Model([decoder_inputs] + decoder_states_inputs, [decoder_outputs] + decoder_states)\n\nreverse_input_char_index = dict((i, char) for char, i in input_token_index.items())\nreverse_target_char_index = dict((i, char) for char, i in target_token_index.items())","b07acda5":"def decode_sequence(input_seq):\n    # Encode the input as state vectors.\n    states_value = encoder_model.predict(input_seq)\n\n    # Generate empty target sequence of length 1.\n    target_seq = np.zeros((1, 1, num_decoder_tokens))\n    \n    # Populate the first character of target sequence with the start character.\n    target_seq[0, 0, target_token_index['%']] = 1.\n\n    # Sampling loop for a batch of sequences\n    # (to simplify, here we assume a batch of size 1).\n    \n    stop_condition = False\n    \n    decoded_sentence = ''\n    \n    while not stop_condition:\n        \n        output_tokens, h, c = decoder_model.predict(\n            [target_seq] + states_value)\n\n        # Sample a token\n        sampled_token_index = np.argmax(output_tokens[0, -1, :])\n        sampled_char = reverse_target_char_index[sampled_token_index]\n        \n        decoded_sentence += sampled_char\n\n        # Exit condition: either hit max length\n        # or find stop character.\n        \n        if (sampled_char == '$' or\n           len(decoded_sentence) > max_decoder_seq_length):\n            stop_condition = True\n\n        # Update the target sequence (of length 1).\n        target_seq = np.zeros((1, 1, num_decoder_tokens))\n        target_seq[0, 0, sampled_token_index] = 1.\n\n        # Update states\n        states_value = [h, c]\n\n    return decoded_sentence","d94394ef":"for seq_index in range(100):\n    input_seq = encoder_input_data[seq_index: seq_index + 1]\n    decoded_sentence = decode_sequence(input_seq)\n    print('-')\n    print('Input sentence : ', input_texts[seq_index])\n    print('Decoded sentence : ', decoded_sentence)","30240fa0":"# Encoder and Decoder Architecture","bcda72e0":"# Coverting text into one hot encoding ","064fe185":"# Encoder LSTM model","94712e29":"# Decoder LSTM Model","96e6503b":"# Data Preprocessing","09df3aa4":"**References**\n\n* http:\/\/colah.github.io\/posts\/2015-08-Understanding-LSTMs\/\n\n* https:\/\/blog.keras.io\/a-ten-minute-introduction-to-sequence-to-sequence-learning-in-keras.html"}}