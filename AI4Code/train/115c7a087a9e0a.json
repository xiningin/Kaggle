{"cell_type":{"1959a842":"code","267e8b0c":"code","b19cc5bc":"code","0ffccbe4":"code","a817434c":"code","4feb8b47":"code","f5c7e5d8":"code","43a4c1ff":"code","82961d3d":"code","70036be1":"code","5a76d007":"code","2a67120d":"code","89184d7b":"code","efb1809e":"code","bf055eab":"code","88f1e397":"code","fb0a0f51":"code","a96890e5":"code","b4797d8f":"code","324c4994":"code","06d2408f":"code","cf9b5151":"code","bdf3c7d8":"code","69e13647":"code","33702377":"code","8d75abec":"code","e4356264":"code","60df6b87":"code","14610176":"code","8ba85f7b":"code","10e1b5e0":"code","a5274697":"code","ad8f6919":"code","a3eeab80":"code","ab447506":"code","09ae4d2e":"code","700bb096":"code","0192f65e":"code","d40b700f":"code","32771585":"code","f66254f7":"code","71faf4cc":"code","8cb35afc":"code","59d86935":"code","4db39978":"code","562a309f":"code","2c4ab847":"code","cff24605":"code","ad776643":"code","06383c75":"code","da6759c0":"code","32994d97":"code","7a184a72":"code","cef5fa05":"code","703afd46":"code","38ef7b2c":"code","600ad42a":"code","317f24f6":"code","e62495ff":"code","e9f25912":"code","a3bcc267":"code","d6dbd85f":"code","d18f82f2":"code","ab7dcac4":"code","ab473bd4":"code","cf9785b3":"code","9849d7ad":"code","2c97a047":"code","662ac023":"code","5b9cf863":"code","20ca9e21":"code","c5766187":"code","e44161b1":"code","657eb5d5":"code","d7aee0f7":"code","8d012de7":"code","d4a8ed0b":"code","f39879f8":"code","506c47e0":"code","9fd17095":"code","3a686d0a":"code","61ca01fa":"code","c44210e3":"code","6cd0db10":"code","7de24534":"code","4fc91d7c":"code","3cfda7e8":"code","47d408a6":"code","ea1547d7":"code","e50dcee1":"code","25d15d2b":"code","44defe27":"code","a9378799":"code","d974ca93":"code","a4f6990d":"code","f29ba696":"code","d88feaf4":"code","da2aeb6b":"code","07648a91":"code","151be208":"code","8f7dcdc8":"code","e2fcf53c":"code","44094da4":"code","6602b6cb":"code","9634575c":"code","1293c3cd":"code","a00aead3":"code","275dcf0d":"code","5d48925c":"code","2170d56a":"code","58c53da7":"code","a457480f":"code","b37672bc":"code","08f630d7":"code","2d2af191":"code","58dec322":"code","791fac9b":"code","866fc249":"code","6aa44fc9":"code","31659e38":"code","e21f7669":"code","5e963a6e":"code","f6839885":"code","03ffdf8e":"code","bd1cc549":"code","2db5390a":"code","03d19266":"code","39c954f9":"code","1d10a83e":"code","e20a9d27":"code","58ac0e75":"code","bdc19e78":"code","39808b91":"code","763e0fe9":"code","5717081c":"code","f3491a5e":"code","71904337":"code","710fb50c":"code","d943d33d":"code","53f66285":"code","48e1f4b9":"code","ccb547a8":"code","8e9c8e5c":"code","737f3903":"code","4907a9f2":"code","dc67a568":"code","d0e54b3b":"code","23513c4f":"code","df11f1bd":"code","405584b3":"code","afef7615":"code","fb282a0c":"code","c9cd94d4":"code","a255ad76":"code","2c882f12":"code","76b67d5b":"code","00d046be":"code","d4fa0da3":"code","230f0a23":"code","a0db1e5a":"code","117a3d45":"code","32f7f57f":"code","291aa01d":"code","4321d50c":"code","148465c8":"code","da58e3d8":"code","56c28397":"code","bf1960e1":"code","a834ba42":"code","0b563ec7":"code","6ff591d1":"code","0f17e272":"code","b62e7af7":"code","7022bed3":"code","5b3525b0":"code","8fe91b82":"code","f38b0b52":"code","dc3ee71b":"code","eef23f2d":"code","ce85ade2":"code","3baed089":"code","ea2d928c":"code","61fb2ddf":"code","725e8cac":"code","fc39361a":"code","602acc1e":"code","e7f02266":"code","9a1b7c2f":"code","8038f329":"code","f5b1d17f":"code","dc4fa859":"code","913ea276":"code","cb7225c7":"code","57d0bf6c":"code","525a4ca3":"code","7ebe2879":"code","9e7797b9":"code","65631f01":"code","3d08a71a":"code","4b2eb1cb":"code","d814ee0a":"code","aceda437":"code","1d65cb93":"code","5f3ddb42":"code","e69e2001":"code","9058e4b6":"code","30428d5e":"code","8b6fea18":"code","12380ffc":"code","2a51f51a":"code","12a5ca6b":"code","33a7ac80":"code","c447e17e":"code","23b913e1":"code","24022082":"code","c099fa19":"code","8641d9c9":"code","0542c566":"code","0097898c":"code","cfc92870":"code","7f035dd0":"code","1dc8b616":"code","5fc3650c":"code","9005ca62":"code","8820f944":"code","284866a3":"code","7646b9c4":"code","afaebf17":"code","2bd5af42":"code","22cb9e0e":"code","1c778634":"code","5ac4bce9":"code","81286d4d":"code","99fe5bb5":"code","98fd414b":"code","e1c31f2b":"code","4823bc16":"code","5bb4cf63":"code","8f47774d":"code","d9b62465":"code","8dc43610":"code","538725fc":"code","46552219":"code","d380411c":"code","7daccec9":"code","7a8b971c":"code","486d0746":"code","df811ec4":"markdown","2a1d6730":"markdown","d1cf221a":"markdown","4eb1909f":"markdown","626f27db":"markdown","b1f05ce8":"markdown","63e7e54e":"markdown","342f20e2":"markdown","37cc5b6e":"markdown","4cdbdec9":"markdown","493b0af1":"markdown","6236a444":"markdown","a87315fe":"markdown","2c89353c":"markdown","e191adc9":"markdown","32981fbd":"markdown","4f45500c":"markdown","338c2f10":"markdown","58ab27ae":"markdown","55bccff4":"markdown","6c9d0efd":"markdown","ace1cd65":"markdown","03bc5182":"markdown","f54393c9":"markdown","b62ba59b":"markdown"},"source":{"1959a842":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","267e8b0c":"#Say\u0131lara ve Stringlere Giri\u015f\n9*9\n9+9\n9*9+9\n\n#Stringler\n\"hello ai era\"\n'sezgin'\n#1. print tu\u015fu olmadan derlemez\nprint(3+7)\n\n#olu\u015fturdu\u011fumuz her \u015feye nesne denir.\n\n#2. tipi,t\u00fcr\u00fcn\u00fc \u00f6\u011frenme\n\ntype(9)\ntype(8.23456)\ntype(\"ibrahim\")\n\n#invalid syntax\n#String yak\u0131n bak\u0131\u015f\ntype(\"1453\")\n\n#stringleri yanyana yazd\u0131rma\n\"a\" + \"b\"\n\"a\" \"b\"\n\n\n#typeError \n#Bu tip buna uygun de\u011fildir.\n\n\"a\"*3\n# \"a\"\/3\n\n#method=fonsiyon\n#len()\n\ngel_yaz=\"gelecegi_yazanlar\"\nmvk=\"sezgin\"\n\na=9\nb=10\na*b\n \n#del mvk\nlen(gel_yaz)\n  \n\n#upper() Lower()\n\ngel_yaz.upper()\n\ngel_yaz.lower()\ngel_yaz.islower()\n\nup=gel_yaz.upper()\nup.islower()\n\n#strip()\n#isteyenmelerden kurtulma\nadsoyad=\" sezgin ildes \"\nadsoyad.strip()\n\nadsoyad2=\"*sezgin ildes \"\n\nadsoyad2.strip(\"*\")\n\n#replace() yer de\u011fi\u015ftirme\nprint(mvk)\nmvk.replace(\"e\",\"a\")\n\nmvk.replace(\"i\",\"at\")\n##bu method atama yapmad\u0131\u011f\u0131 i\u00e7in orijinalde de\u011fi\u015fiklik yapmaz\nmvk \n\n##Methodlara genel bak\u0131\u015f\n\ndir(gel_yaz) # bu method ile di\u011fer methodlara ula\u015fabilirzi\n##bu veri \u00fczerinde neler kullanabilece\u011fini g\u00f6steriyor.\n#fsane bir \ngel_yaz.split(\"_\")\ngel_yaz.capitalize()\ngel_yaz.title()\ngel_yaz.find(\"a\")\n\n\n#Karakteri Dizinler\n#SubString Altk\u00fcme\n\ngel_yaz[0]#indeksler\ngel_yaz[7]\n# gel_yaz[19] #IndexError: string index out of range\n\n#sol dahil, sa\u011f hari\u00e7\ngel_yaz[0:3]\ngel_yaz[3:7]\n\n#De\u011fi\u015fkenler\n\na=98765\nc = a*6\nc\nc\/a\n\ntype(100)\ntype(100.3)\ntype(123+9j)\n\n\n#Type_Donusumleri\nprint(\"sayi gir\\n\")\nilkSayi = input()\nprint(\"ikinci say\u0131y\u0131 gir\\n\")\nikinciSayi = input()\nilkSayi + ikinciSayi\n\nint(ilkSayi) +int(ikinciSayi)\n#stringlerden int \u00e7evirdik.\n\nfloat(13)\nint(123.978)\n\n\n\n\n#print\nprint(\"sezgin ildes\")\nprint(\"gelecegi\", \"yazanlar\")\nprint(\"gelecegi\", \"yazanlar\", sep=\"_*_*_\")\n#arg\u00fcman alt g\u00f6rev belirteci\n\nprint()\n?print","b19cc5bc":"# -*- coding: utf-8 -*-\n\"\"\"\nSpyder Editor\n\nThis is a temporary script file.\n\"\"\"\nprint(\"sezgin\")\nprint(\"hello\")\n\n#VeriYapilari\n#1. Liste Olu\u015fturma\n#[]\n#list()\nnotlar = [90,80,70,50]\n#liste bir \u00fcst tiptir.\ntype(list)\nliste = [\"a\", 199.3,90]\nlisteGenis = [\"a\", 199.3,90, notlar]\nlen(listeGenis) \n\n\n#2. Liste \u0130\u00e7i Tip Sorgulama\n listeGenis[0]\n listeGenis[1]\n listeGenis[3]\ntype(listeGenis[0])\ntumListe = [liste, listeGenis]\n\n#liste lisme\ndel tumListe\n\n#3. Liste Elemanlar\u0131na Eri\u015fmek\nliste =  [10,20,30,40,50]\n\nliste[6]\nliste[0:2]\nliste[:4]\nliste[2:]\n\nyeni_liste =  [\"a\",10,[20,30,40,50]]\n\nyeni_liste[3]\nyeni_liste [2][1]\n\n#4. Listelere Eleman Ekleme ile De\u011fi\u015ftirme ve Silme\n\nliste= [\"ali\", \"veli\", \"berkcan\",\"ayse\"]\nliste \n\nliste[1] = \"velinin_babasi\"\nliste \nliste[1] = \"veli\"\n\nliste[0:3] = \"alinin_babasi\",\"velinin_babasi\", \"bercan\u0131n\u0131n_babas\u0131\"\nliste \n\nliste= liste +[\"kemal\"]\nliste \n\n#del liste[2]\nliste\n\n\n#5. Metodlar ile Eleman Ekleme ve Silme: append ve remove\n\nliste= [\"ali\", \"veli\", \"berkcan\",\"ayse\"]\nliste \n\n\ndir(liste )\n#append\nliste.append(\"kalem\")\nliste \n#liste de\u011fi\u015ftirebilir. append ile atama yapmadan kal\u0131c\u0131 de\u011fi\u015fiklik yapar\nliste.remove(\"ali\")\nliste \nliste.count(0)\nliste \nliste.pop(1)\nliste \nliste.reverse()\nliste\nliste.extend(0)\n\n\n\n#6. Indekse G\u00f6re Eleman Ekleme ve Silme: insert ve pop\nliste.insert(0,\"sezgin\")\nliste \n\nliste.insert(2,\"ibrahim\")\nliste \n \n\nliste.insert(len(liste), \"feyza\")\nliste \n\n#pop\nliste.pop(0)\nliste \n\n#7. Di\u011fer Liste Metodlar\u0131\n\nliste = [\"ali\", \"veli\", \"isik\", \"ali\", \"veli\"]\nliste.count(\"ali\")\n\n\n#copy\nliste_yedek= liste.copy()\nliste_yedek\n\n#Extend iki listeyei birle\u015ftirme\nliste.extend([\"a\",\"b\",10])\nliste \n#parantezdeki listeyi en soldaki listeye dahil et.\n\n#index\nliste.index(\"ali\")\n\n#reverse\nliste \nliste.reverse()\nliste \n\n#sort s\u0131ralama\nlist.sort()\nliste =[10,50, 90,5]\nliste.sort()\nliste \n\n#clear\nliste \nliste.clear()\nliste \n\n\n\n#8. Tuple: Tuple Olu\u015fturma\n\nt = (\"ali\",\"veli\",\n     2,3.2, [1,2,3,4])\nt\n#tuple()\n\nt = (\"eleman\")\ntype(t)\n##tek elamanl\u0131 tuplle ise sonuna virg\u00fcl \nt =(\"eleman\",)\ntype(t)\n\n\n#9. Tuple Eleman \u0130\u015flemleri\n\nt = (\"ali\",\"veli\",1, 2,3.2, [1,2,3,4])\nt[1]\nt[0:3]\nt[2]= 99\n\n\n#10. S\u00f6zl\u00fckler: S\u00f6zl\u00fck Olu\u015fturma\n\nsozluk = {\"REG\": \"Regresyon Modeli\",\n          \"LOJ\": \"Lojistik Regresyon\",\n         \"CART\": \"Classification and Reg\" }\n\nsozluk \nlen(sozluk)\n\nsozluk = {\"REG\": 10,\n          \"LOJ\": 20,\n         \"CART\": \"Classification and Reg\" }\nsozluk\nsozluk = {\"REG\":[\"RMSE\",10],\n          \"LOJ\":[\"MSE\", 20],\n         \"CART\": [\"SSE\",30]}\nsozluk \nlen(sozluk )\n\n\n#11. S\u00f6zl\u00fck Eleman Se\u00e7me \u0130\u015flemleri\ndir(sozluk)\nsozluk[0]\nsozluk[1]\nsozluk[\"REG\"]\n\nsozluk = {\"REG\":{\"RMSE\",10,\n                 \"MSE\", 20,\n                 \"SSE\",30},\n          \n          \"LOJ\":{\"RMSE\",10,\n                 \"MSE\", 20,\n                 \"SSE\",30},\n          \n         \"CART\": {\"RMSE\",10,\n                 \"MSE\", 20,\n                 \"SSE\",30}}\n\nsozluk \nsozluk[\"REG\"][\"SSE\"]\n\n#12. S\u00f6zl\u00fck Eleman Ekleme ve De\u011fi\u015ftirme\n\nsozluk = {\"REG\": \"Regresyon Modeli\",\n          \"LOJ\": \"Lojistik Regresyon\",\n         \"CART\": \"Classification and Reg\" }\n\nsozluk[\"GBM\"] = \"Gradient Boosting Mac\"\nsozluk \n\nsozluk[\"REG\"]= \"\u00c7oklu Do\u011frusal Regresyon\"\nsozluk[1] = \"yapay sinir aglari\"\n\nl= [1]\nsozluk[l] =\"Yeni bir sey\"\n####Dikkat buraya\nt = (\"tuple\",)\n\nsozluk[t] = \"yeni bir \u015fey\"\nsozluk \n\n#13. Setler: Set Olu\u015fturma\n\ns = set()\ns\nl = [1, \"a\", \"ali\", 123 ]\n\ns = set (l)\ns\n\nt = (\"a\", \"ali\")\ns = set(t)\ns\ntype(s)\n\nali = \"lutfen_ata_bakma_uzaya_git\"\ntype(ali )\n\ns =set(ali )\ns\n\n\nl = [\"ali\",\"lutfen\", \"ata\", \"bakma\", \"uzaya\",\n     \"git\",\"git\", \"ali\", \"git\"]\n\nl\ns = set(l)\ns\nlen(s)\n\n##setlerde s\u0131ras\u0131d\u0131r. e\u015fsizdir.\n\n#14. Set Eleman Ekleme ve \u00c7\u0131karma\nl[0]\ns[0]\ns\ndir(s)\ns.add(\"ile\")\ns.add(\"gelecege_git\")\ns\n\ns.add(\"ile\")\ns\ns.remove(\"ata\")\ns\ns.discard(\"ata\") # sildi ama hata da vermiyor.\n\n\n#15. Setlerde Fark \u0130\u015flemleri: difference ve symmetric difference\n\nset1 = set([1,3,5])\nset2 = set([1,2,5])\nset1.difference(set2 )\nset2.difference(set1 ) \n\nset1.symmetric_difference(set2 )\n#ikisinde nadir olanlar\n\nset1-set2 \n#16. Setlerde Kesi\u015fim ve Birle\u015fim \u0130\u015flemleri: intersection ve union\n\nset1.intersection(set2 )\nkesisim = set1 &set2 \nkesisim \n\nbirlesim =set1.union(set2 )\nbirlesim\n\nset1.intersection_update(set2 )\n\nset1 \n\n #17. Setlerde Sorgu \u0130\u015flemleri\n\nset1 = set([7,8,9])\nset2 = set([5,6,7,8,9,10])\n#iki k\u00fcmenin bo\u015f mu\n\n\nset1.isdisjoint(set2 )\n\n#bir k\u00fcme di\u011ferinin alt k\u00fcmesimi\nset1.issubset(set2 )\n\n# altk\u00fcme vs kapmsamak\nset2.issuperset(set1 )","0ffccbe4":"# 1. **`Fonksiyonlar`**: Fonksiyonlara Giri\u015f ve Fonksiyon Okuryazarl\u0131\u011f\u0131\n?print \nprint()\n\nlen(\"a\")\n\n\n\n# 2. Fonksiyon Nas\u0131l Yaz\u0131l\u0131r?\n4*4\n5\/7\n3**3\n\n\ndef kare_al(x):\n    print(\"sayi:\" + str(x)+\"say karesi:\" +str(x**2))\n    \n    kare_al(7) \n    \n\n   ## bu sonu\u00e7la i\u015flem yapmak istersen #return yazmak gerekiyor\n    \n\n# 3. Bilgi Notuyla \u00c7\u0131kt\u0131 \u00dcretmek\ndef kare_al(x):\n    print(\"sayi: \"+ str(x)+\" say\u0131n\u0131n karesi:\" +str(x**2))\n    \nkare_al(3) \n    \n\n# 4. \u0130ki Arg\u00fcmanl\u0131 Fonksiyon Tan\u0131mlamak\ndef carpma_yap(x,y):\n    print(\"ilk sayi: \"+ str(x)+ \n          \"son sayi: \"+ str(y) +\n          \"sonuc: \"+str(x*y))\n    \n\ncarpma_yap(9, 4)\n    \n\n# 5. \u00d6n Tan\u0131ml\u0131 Arg\u00fcmanlar\n\n#argumanlar\u0131n Siralamasi\ndef carpma_yap(x,y):\n    print(x*y)\ncarpma_yap(y=2,x=3)\n\n\n\n# 6. Ne Zaman Fonksiyon Yaz\u0131l\u0131r?\n\n#tekrar eden g\u00f6revleri ve\n#i\u015fleri dahaiyi hale getirmek i\u00e7in\n\n#isi,nem, sarj,\n(40+25)\/90\n\ndef direk_hesap(isi,nem,sarj):\n    print(\"verimlilik: \"+\n          str((isi+nem)\/sarj))\n\n\ndirek_hesap(90,13,24)\n\n# 8. Local ve Global De\u011fi\u015fkenler\n\nx= 10\ny=20\n\n\ndef carpma_yap(x,y=1,z=1):\n    return (x*y*z)\ncarpma_yap(2,3)\n\n\n\n# 9. Local Etki Alan\u0131ndan Global Etki Alan\u0131n\u0131 De\u011fi\u015ftirmek\n\n#Lokalden gobale ge\u00e7i\u015f\n\nx =[]\n#del x\ndef elemanEkle(y):\n    x.append(y)\n    print(str(y) + \"\")\n    \nelemanEkle(9)\nelemanEkle(\"ali\")\nelemanEkle(\"Sezgin\")\nelemanEkle(\"ilde\u015f\")\nelemanEkle(\"Psikolojik Dan\u0131\u015fman\")\n\nx\n\n# 10. **`Karar Kontrol Yap\u0131lar\u0131:` True-False Sorgulamalar\u0131**\n\n#true-false\nsinir =5000\nsinir==4000\n\n5==4\n\n\n# 11. \u0130f Yap\u0131s\u0131\n\nsinir=50000\ngelir=60000\nif gelir<sinir :\n    print(\"gelir sinirin altinda\")\n    print(gelir\/2)\nelse:\n    print(\"magazayi buyut\")\n    \n\n\n# 12. Else Yap\u0131s\u0131\nsinir=50000\ngelir=60000\nif gelir==sinir :\n    print(\"gelir sinira esittir\")\n    print(gelir\/2)\nelse:\n    print(\"magazayi buyut\")\n    print(\"Gelir sinira esittir\")\n\n# 13. Elif Yap\u0131s\u0131\n\nsinir=50000\ngelir=55000\ngelir1=60000\ngelir2=50000\ngelir3=35000\n\nif gelir >sinir :\n    print(\"oooo aferin al sana pasta\")\nelif gelir==sinir:\n    print(\"idare eder.\")\n    print(\"Gelir sinira esittir\")\nelse :\n    print(\"fazladan calis\")\n\nNt=int(input(\"Ald\u0131\u011f\u0131n S\u0131nav notunu gir.: \\n\"))\n\nif Nt>=90:\n    print(\"AA\")\n    print(\"Evlad\u0131m \u00e7al\u0131\u015fm\u0131\u015fs\u0131n, yememi\u015fsin\")\nelif Nt>=80:\n    print(\"BA\")\n    print(\"Bildiklerini payla\u015fmaya devamm\")\nelif Nt>=70:\n    print(\"BB\")\nelif Nt>=60:\n    print(\"CB\")\nelif Nt>=50:\n    print(\"CC\")\n    print(\"Dersi derste dinlesen nas\u0131l olur?\")\nelse:\n    print(\"FF\")\n    print(\"Sana \u00f6zel bir ders\")\n\n# 14. Uygulama: if ve input ile Kullan\u0131c\u0131 Etkile\u015fimli Program\n\nsinir=50000 \nmagazaAdi=input(\"Magaza Adi Nedir?\")\ngelir= int(input(\"Gelirinizi giriniz: \"))\n\n\nif gelir> sinir:\n    print(\"Tebrikler: \"+magazaAdi+ \", tatil ald\u0131n!\")\nelif gelir < sinir:\n    print(\"punish! work work b\"+str(gelir))\nelse:\n    print(\" e\u011fitim al. S\u0131n\u0131rdas\u0131n\u0131z.\")\n\nsayi=int(input(\"bir say\u0131 girer misin?\\n\"))\n\nif sayi>0:\n    print(\"pozitif\")\nif sayi==0:\n    print(\"s\u0131f\u0131r\")\nif sayi<0:\n    print(\"negatif\")\n\n# 15. `D\u00f6ng\u00fcler:` For D\u00f6ng\u00fcs\u00fc\n\nogrenci= [\"ali\", \"veli\", \"isik\", \"berk\", \"sezgin\", \"ildes\"]\n\nfor i in ogrenci:\n    print(i)\n\nvars = range(0,20,3)\nfor i in vars:\n    print(i, \" karesi \" + str(i**2))\n\n# 16. For D\u00f6ng\u00fcs\u00fc \u00d6rnek\n\nmaaslar=[10,20,30,40,50]\nfor maas in maaslar:\n    print(maas)\n    \n\n# 17. D\u00f6ng\u00fc ve Fonksiyonlar\u0131n Birlikte Kullan\u0131m\u0131\n#patronun can\u0131 s\u0131k\u0131ld\u0131 %20 zam yapacak. oleyyy\n\ndef kareAl(x):\n    print(x**2)\nkareAl(3)\n\nmaaslar=[10,20,30,40,50]\n\ndef yeni_maas(x):\n    print(\"yeni maas: \"+str(i+i*0.2))\n\nfor i in maaslar:\n    yeni_maas(i)\n\nprint(\"\u00c7arp\u0131m tablosu\\n\")\nfor s in range(1,6):\n    for e in range (1, 6):\n        print(s,\"*\",e,\"=\",s*e)\n    print(\"\\n\") # bir sat\u0131r atla\n    #e d\u00f6ng\u00fc sonu\n# s d\u00f6ng\u00fcs\u00fcn\u00fcn sonu\n\n\n# 18. Uygulama: if, for ve Fonksiyonlar\u0131n Birlikte Kullan\u0131m\u0131\n\nmaaslar=[10,20,30,40,50]\n\ndef yeniMaas(x):\n    if x<=30:\n        print( \"eski \", str(x),\"yeni: \"+str(x+x*0.2))\n    else:\n        print(\"yeni: \"+str(x+x*0.1))\n\nfor i in maaslar:\n    yeniMaas(i)\n\n\n# dik \u00fc\u00e7gen olu\u015fturma\nfor i in range(7):\n    for j in range (i+1):\n        print(\"*\", end=\"\")\n    print(\"\")\n\n# ters dik \u00fc\u00e7gen olu\u015fturma\nfor i in range(7,0,-1):\n    for j in range (i,0,-1):\n        print(\"*\", end=\"\")\n    print(\"\")\n\n# 19. Break ve Continue\n\nmaaslar=[8000,5000,1000,2000,3000,7000,1000]\ndir(maaslar)\nmaaslar.sort()\nmaaslar \nfor i in maaslar:\n    if i ==3000:\n        print(\"kesildi\")\n        break\n    print(i)\n    \nprint(\"\\n\")\n\nfor i in maaslar:\n    if i ==3000:\n        print(\"devam edildi\")\n        continue\n    print(i)\n\n# 20. While\n##oldu\u011fu s\u00fcrece, bu \u015fart sa\u011fland\u0131\u011f\u0131 s\u00fcrece\nsayi = 1\nwhile sayi <10:\n    print(sayi )\n    sayi+=1\n\n#faktoriel\nf=1\nn=int(input(\"bir say\u0131 giriniz: \"))\ni=n\nwhile i>=1:\n    f=f*i\n    i=i-1\n    print(n, \"!=\",f)\n\n","a817434c":"\n#Kendime Birka\u00e7 Soru\n\na = [1,2,3]\nlist(map(lambda x: x*2, a))\n\nlist(filter(lambda x: len(x) > 8, [\"pazartesi\",\"sali\",\"carsamba\",\"persembe\",\"cuma\"]))\n\n\nfrom functools import reduce\nreduce(lambda a,b: a\/b, [8,4,2])\n\nA = [\"ali\",\"veli\",\"isik\"]\nB = [1,2,3]\nAB = [A, B]\n\nfor i in AB:\n    if type(i[0]) == str:\n        print(list(map(lambda x: x + \" hi\", i)))  \n\nfrom functools import reduce\na = [1,2,3,4]\nreduce(lambda a,b: a*b, a)\n\n# Var olan s\u0131n\u0131flar\u0131n \u00f6zelliklerini ba\u015fka s\u0131n\u0131flar i\u00e7in kullanmak i\u00e7in a\u015fa\u011f\u0131dakilerden hangisi kullan\u0131l\u0131r?\n\n\nfun = lambda x: x**2\nfun(3)\n\nclass BolumSorulari():\n    fonksiyonlar = []\n    OOP = []\n    \n#Kod par\u00e7as\u0131nda yer alan \u201cfonksiyonlar\u201d ve \u201cOOP\u201d tan\u0131mlamalar\u0131 ne ifade etmektedir?\n\n\nA = [[1,2],[3,4],[5,6]]\nlist(map(lambda x: x[0]*3, A))\n\nimport numpy as np\na = np.array([1,1,1])\nb = np.array([2])\n\na+b\n\nlist(map(lambda x: x*1, [2,7,4]))\n\n\nA = []\nfor i in [\"ali\",\"veli\",\"isik\"]:\n    A.append(i.replace(\"i\",\"a\"))\nprint(A)\n\n\n\ndef islem(x,y,z):\n    if y == 0:\n        print(\"hatali islem\")\n    else:\n        return x\/y*z\n\n\nislem(1,0,2)\n\n\n\n\ndef yap(x,y,z):\n    try:\n        print(x\/y*z)\n    except ZeroDivisionError:\n        print(\"gecersiz islem\")\n\nyap(1,2,0)\n\nlist(map(lambda x: x.upper(), [\"Ali\",\"Veli\",\"isik\"]))\n\n\nclass BolumSorulari():\n    fonksiyonlar = []\n    OOP = []\nBolumSorular\u0131.\n\nliste = [\"a\",20,10,30,\"b\"]\nlist(filter(lambda x: type(x) == int, liste))\n\nlist(map(lambda x: x.capitalize(), [\"abc\",\"bcd\",\"cde\"]))\n\n\n# =============================================================================\n# 1. `Nesne Y\u00f6nelimli Programlama`: S\u0131n\u0131flara Giri\u015f ve S\u0131n\u0131f Tan\u0131mlamak\n##sinif nedir?\n#Benzer \u00f6zellikler, ortak ama\u00e7lar:verig\u00f6rselle\u015ftirm\n\nclass VeriBilimci():\n    print(\"Bu bir siniftir\")\n\n# 2. S\u0131n\u0131f \u00d6zellikleri\n##Class attributes\nclass VeriBilimci():\n    bolum =\" \"\n    sql = \"Evet\"\n    deneyim_yili = 0\n    bildigi_diller = []\n    \nVeriBilimci.sql\nVeriBilimci.bildigi_diller\n\nVeriBilimci.sql =\"Hayir\"\n\n# 3. S\u0131n\u0131f \u00d6rneklemesi\n#instantiation\nali =VeriBilimci()\nali.sql\nali.deneyim_yili\nali.bildigi_diller.append(\"Python\") #yap\u0131lan bir etki b\u00fct\u00fcn s\u0131n\u0131flara etkiledi \n\nveli = VeriBilimci() # s\u0131n\u0131f\u0131n \u00f6rne\u011fi, alt k\u00fcmesi\nveli.sql #veli\nveli.bildigi_diller\n\n\n\n# 4. \u00d6rnek \u00d6zellikleri\nclass VeriBilimci():\n    bildigi_diller = [\"R\", \"Python\", \"sql\"]# genel yetenek seti\n    bolum =\" \"\n    sql = \"\"\n    deneyim_yili = 0\n    def __init__(self): #\u00f6rnekler kendi i\u00e7indee de\u011fi\u015fbilir.\n        self.bildigi_diller=[]\n        self.bolum = \" \"\n        \nali = VeriBilimci()\nali.bildigi_diller\n\n\nveli = VeriBilimci()\nveli.bildigi_diller\nali.bildigi_diller.append(\"Python\")\nali.bildigi_diller\n\n\nveli.bildigi_diller.append(\"R\")\nveli.bildigi_diller\nVeriBilimci.bildigi_diller\n\nali.bolum \nveli.bolum \n\nVeriBilimci.bolum\nali.bolum = \"istatistik\"\nVeriBilimci.bolum\n\nveli.bolum\nveli.bolum =\"end_muh\"\nveli.bolum\n\nali.bolum\n\n# 5. \u00d6rnek Metodlar\u0131\n#\u00f6rnekler \u00fczerinde \u00e7al\u0131\u015fan fonksiyonlar\n\nclass VeriBilimci():\n    calisanlar=[]\n    def __init__(self):\n        self.bildigi_diller=[]\n        self.bolum = \" \"\n    def dil_ekle(self,yeni_dil):\n        self.bildigi_diller.append(yeni_dil)        \n\n\n\nali = VeriBilimci()\nali.bildigi_diller    \nali.bolum  \n\nveli= VeriBilimci()      \nveli.bildigi_diller\nveli.bolum\n\ndir(VeriBilimci)\n\nVeriBilimci.dil_ekle\nVeriBilimci.dil_ekle(\"R\")\n\nali.dil_ekle(\"R\")\nali.bildigi_diller\n\n\nveli.dil_ekle(\"sql\")\nveli.bildigi_diller\n\nVeriBilimci.calisanlar\n\n# 6. Miras Yap\u0131lar\u0131\nclass Employees():\n    def __init__(self):\n        self.FirstName = \"\"\n        self.LastName = \"\"\n        self.Address = \"\"\n\n\nclass DataScience(Employees):\n    def __init__(self):\n        self.Programming = \"\"\n        \nveribilimci1 = DataScience()\n\n\n\nclass Marketing(Employees):\n    def __init__(self):\n        self.StoryTelling = \"\"\n        \nmar1 = Marketing()    \n\n\n\n\n#Fonksiyonel, de\u011fi\u015fecebilecek bir sistem olu\u015fturmak i\u00e7in.\nclass Employee_yeni():\n    def __init__(self, FirstName, LastName,Address ):\n        self.FirstName = FirstName\n        self.LastName = LastName\n        self.Address = Address\n\nali = Employee_yeni(\"a\",\"b\",\"c\")\nali.FirstName\n\n\n# 7. `Fonksiyonel Programlama:` Fonksiyonel Programlamaya Giri\u015f\n#fonksiyonlar dilin ba\u015ftac\u0131d\u0131r.\n#birinci s\u0131n\u0131f nesnelerdir\n#yan etkisiz fonk,(stateless,girdi-cikti)\n#yuksek seviye fonksiyonlar\n#vektorel operasyonlar\n\n# 8. Yan Etkisiz Fonksiyonlar \u00d6rnek 1\n#pure functions\n#or1: ba\u011f\u0131ms\u0131zl\u0131k\nA = 9\ndef impure_sum(b):\n    return b +A\n\n\ndef pure_sum(a,b):\n    return a + b\n\nimpure_sum(6)\n\n\npure_sum(7,5)\n\n\n\n# 9. Yan Etkisiz Fonksiyonlar \u00d6rnek 2\n#\u00f6l\u00fcmc\u00fcl yan etki\n#OOP\nclass LineCounter:\n    def __init__(self, filaname):\n        self.file =open(filaname,\"r\")\n        self.lines =[]\n        \n        def read(self):\n            self.lines =[line for line in self.file]\n            \n        def count(self):\n            return len(self.lines)\nlc =LineCounter(\"deneme.txt\")\n\nprint(lc.lines)\nprint(lc.count())\n\nlc.read()\nprint(lc.lines)\nprint(lc.count()) #i\u00e7 nesnenin de\u011ferlerinin de\u011fi\u015fmesi\n\n\n#Fonc Prog\ndef read(filaname):\n    with open(filaname, \"r\") as f:\n        return [ line for line in f]\n\ndef count(lines):\n    return len(lines)\n\nexample_lines =read(\"deneme.txt\")\nlines_count = count(example_lines)\nlines_count\n\n\n# 10. \u0130simsiz Fonksiyonlar\ndef old_sum(a,b):\n    return a+b\nold_sum(9,5)\n\n\nnew_sum = lambda a, b: a+b\nnew_sum(4,6)\n\nsirasiz_liste = [(\"b\",3), (\"a\",8), (\"d\",12), (\"c\",1)]\nsirasiz_liste\n\n\nsorted(sirasiz_liste, key = lambda  x: x[1]) #ikinci elemanlar\u0131 s\u0131rala\nsorted(sirasiz_liste, key = lambda  x: x[0])#birinci elamanlar\u0131 s\u0131rala\n\n\n\n# 11. Vekt\u00f6rel Operasyonlar\n# oop\na = [1,2,3,4]\nb = [2,3,4,5]\nab = []\n\nfor i in range (0, len(a)):\n    print(i)\n    ab.append(a[i]*b[i])\nab\n\n#FP \n# funksiyonel programlama\nimport numpy as np\na = np.array([1,2,3,4])\nb = np.array([2,3,4,5])\na*b\n\n\na*a\n\n\na+b\n\n\na*2\n\n# 12. Map, filter ve <sbf reduce Fonksiyonlar\u0131\n\nliste =[1,2,4,5]\nfor i in liste:\n    print(i+10)\n\nliste =[1,2,4,5]\n\nlist(map(lambda x: x+10, liste ))\n\n\nlist(map(lambda x: x*10, liste ))\n\n\n#filter\nliste =[0,1,2,4,5,6,7,8,9,10]\n#iki b\u00f6l\u00fcnd\u00fc\u011f\u00fcnde s\u0131f\u0131r de\u011ferini b\u00f6len, 2ye tam b\u00f6l\u00fcnen say\u0131lar\u0131 bana \u00e7ek\nlist(filter(lambda x: x% 2==0, liste ))\n\n\nlist(filter(lambda x: x% 2!=0, liste ))\n#ikiye tam b\u00f6l\u00fcnmeyenleri bana getir\n\n#reduce=indirgnemek, yani i\u015flem yapacakt\u0131r.\n#reduce: indirmek\nfrom functools import reduce \nliste =[1,2,4,5,6,7,8,9,10]\nreduce(lambda a,b: a+b, liste)\n\n\n# 13. `Mod\u00fcl Olu\u015fturmak ve \u0130stisnalar`: Mod\u00fcl Olu\u015fturmak\n#k\u00fct\u00fcphane,paket,mod\u00fcl,\n#a\nimport HesapModulu\nHesapModulu.yeni_maas(800)\n\n\nimport HesapModulu as hm\nhm.yeni_maas(120)\nhm.maaslar\n\n\nfrom HesapModulu import yeni_maas\nyeni_maas(2800)\n\n\n#14. Hatalar (\u0130stisnalar)\n\n#exceptions\na =10\nb =0 \n\na\/b\n\n    \n\n\ntry:\n    print(a\/b)\nexcept ZeroDivisionError:\n    print(\"Paydada sifir olmaz\")\n\n\n\n\n# tip hatasi\na = 10\nb = \"2\"\na\/b\n\n    \n\n    # 15. B\u00f6l\u00fcm Sonu De\u011ferlendirmesi           \n\n\ntry:\n    print(a\/b)\nexcept TypeError:\n    print(\"sayi ve string problemi\")","4feb8b47":"######\na=np.array([[4, 7, 4, 5, 9],\n            [2, 5, 0, 7, 7],\n            [1, 9, 0, 8, 2]])\n\n\n\na[:,2]\n###\nnp.array([3.14, 4,6,1.2])\n###\nnp.arange(0,10)\n\n###\nv = np.array([2, 1, 4, 3, 5])\n\nnp.sort(v)\n\n###\nv=np.array([ 0, 3, 6, 9, 12, 15, 18, 21, 24, 27])\n\n\n[v[1], v[3]]\n\n###\n\nnp.arange(0,10, 2)\n\n##\na=np.array([[4, 7, 4, 5, 9],\n\n            [2, 5, 0, 7, 7],\n\n            [1, 9, 0, 8, 2]])\n\na[2,3]\n\nv = np.array([ 0, 3, 6, 9, 12, 15, 18, 21, 24, 27])\n\nv[[1,2,3]]\n\n##\n\nv=np.array([ 0, 3, 6, 9, 12, 15, 18, 21, 24, 27])\n\n\n[v[9], v[0]]\n\nv.size\n\nnp.array([3.14, 4,6,1.2])\n##\n5*np.array([1,2,3])","f5c7e5d8":"?np.size","43a4c1ff":"#1. `Python ile Veri Manip\u00fclasyonu Giri\u015f`\n    \n#2. JupyterLab\n#3. Numpy Giri\u015f\n #liste vs Numpy, fix, sabit bilgi\n    #verimli veri saklama ve vekt\u00f6rel i\u015flemler yapar.\n    # yer tutma maliyeti azalt\u0131r.\n\n","82961d3d":"#4. Neden Numpy \na=[1,2,3,4]\nb=[2,3,4,5]\na\n","70036be1":"ab=[]\nfor i in range(0, len(a)):\n    ab.append(a[i]*b[i])\nab","5a76d007":"### import numpy as np\n\na=np.array([1,2,3,4])\nb=np.array([2,3,4,5])\na*b","2a67120d":"#5. `Olu\u015fturma ve Bi\u00e7imlendirme \u0130\u015flemleri: Numpy Array Olu\u015fturmak`\na=np.array([1,2,3,4,5])\ntype(a)\n\nnp.array([3.14,4,2,13], dtype=\"int\") #veri t\u00fcr\u00fcn\u00fc sabitleme\n\n#s\u0131f\u0131rdan array olu\u015fturma\nnp.zeros(10, dtype=int)\n\nnp.ones((3,5),dtype=int)\n\nnp.full((3,6),9)\n\nnp.arange(0,31,3)\n\nnp.linspace(0,1,5)\n\n#np.random.normal(ort,stadanrt sapmas, boyutu)\nnp.random.normal(10,4,(3,4))\n\n#int de\u011ferlerind olu\u015fmu\u015f rastgele i\u015flemler\nnp.random.randint(0,10,(3,4))","89184d7b":"#6. Numpy Array \u00d6zellikleri\n#* ndim: boyut say\u0131s\u0131\n#    * shape: boyut bilgisi\n#        *size: toplam eleman say\u0131s\u0131\n#            *dtype: arrayt veri tipi\n\n\n\n \n\nimport numpy as np\n\nnp.random.randint(10, size = 10)\n\na = np.random.randint(10, size = 10)\n\na.ndim\n\na.shape\n\na.size\n\na.dtype\n\nb = np.random.randint(10, size = (3,5))\n\nb\n\nb.ndim\n\nb.shape\n\nb.size\n\nb.dtype","efb1809e":"# 7.Yeniden \u015eekillendirme (Reshaping)\n\nimport numpy as np\n\nnp.arange(1,10)\n\nnp.arange(1,10).reshape((3,3))\n\na = np.arange(1,10)\n\na\n\n","bf055eab":"9. Array Ay\u0131rma (Splitting)\n10. Array S\u0131ralama (Sorting)\n11. `Eleman \u0130\u015flemleri: Index ile Elemanlara Eri\u015fmek`\n12. Slicing Array Alt K\u00fcme \u0130\u015flemleri\n13. Alt K\u00fcme \u00dczerinde \u0130\u015flem Yapmak\n14. Fancy Index ile Elemanlara Eri\u015fmek","88f1e397":"\na.ndim #vektor\n\nb = a.reshape((1,9)) # iki k\u00f6\u015feli parantes, bir sat\u0131r 9 sutun\nb.ndim","fb0a0f51":"#8.Array Birlestirme (Concatenation) yanyana\n\nimport numpy as np\n\nx = np.array([1,2,3])\ny = np.array([4,5,6])\nx\n","a96890e5":"np.concatenate([x, y])\n\n","b4797d8f":"z = np.array([7,8,9])\nnp.concatenate([x, y, z])","324c4994":"\n#iki boyut\n\na = np.array([[1,2,3], \n              [4,5,6]])\n\nnp.concatenate([a,a])\n#sat\u0131r bazl\u0131\n\n","06d2408f":"#s\u00fct\u00fcn bazl\u0131 birlike\u015ftirme\nnp.concatenate([a,a], axis = 1)","cf9b5151":"# 9.Array Ay\u0131rma (Splitting)\n\nimport numpy as np\n\nx = np.array([1,2,3,99,99,3,2,1])\n\nnp.split(x, [3,5])# \u00fc\u00e7e kadar bir b\u00f6l, 5 e kadar b\u00f6l\n","bdf3c7d8":"a,b,c = np.split(x, [3,5])\n","69e13647":"a","33702377":"b","8d75abec":"c","e4356264":"\nc","60df6b87":"#iki boyutlu ay\u0131rma\nimport numpy as np\n\nm = np.arange(16).reshape(4,4)\nm\n","14610176":"# vertical b\u00f6l, 2e kadar b\u00f6l,\nnp.vsplit(m, [2])","8ba85f7b":"ust, alt = np.vsplit(m, [2])\n\nust","10e1b5e0":"\nalt","a5274697":"m\n#horizantol split, dikey b\u00f6lme\nnp.hsplit(m, [2])\n","ad8f6919":"\nsag, sol = np.hsplit(m, [2])","a3eeab80":"\nsag\n\nsol","ab447506":"# 10.Array S\u0131ralama (Sorting)\n\nimport numpy as np\n\nv = np.array([2,1,4,3,5])\n\nv","09ae4d2e":"np.sort(v)","700bb096":"v","0192f65e":"# sort methodu \u00f6l\u00fcmc\u00fcl yan etkisi var. dikkat yap\u0131y\u0131 bozuyor.\nv.sort()\n\nv","d40b700f":"\n#iki boyutlu array siralama\n\nm = np.random.normal(20,5, (3,3))\n\nm\n\n","32771585":"# iki boyutlu ary\u0131n sat\u0131rlar\u0131n\u0131 s\u0131ralama\nnp.sort(m, axis = 1)","f66254f7":"#s\u00fct\u00fcnlara g\u00f6re s\u0131ralama\nnp.sort(m, axis = 0)\n","71faf4cc":"# 11.Index ile Elemanlara Eri\u015fmek\n\nimport numpy as np\na = np.random.randint(10, size = 10)\na\n","8cb35afc":"\na[0]\n\na[-1]","59d86935":"a[0] = 100\n\na","4db39978":"\nm = np.random.randint(10, size = (3,5))\nm","562a309f":"m[0,0]\n","2c4ab847":"m[1,1]","cff24605":"m[1, 4]\n","ad776643":"m[1, 4] = 99\n\nm","06383c75":"m[1,4] = 2.2 #float s\u00fcrekli de\u011fi\u015fken int \u015feklinde kay\u0131t eder\n# en ba\u015fta ne varsa ona g\u00f6re \u015fekil al\u0131yor\nm\n","da6759c0":"# 12.Slicing ile Elemanlara Eri\u015fmek (Array Alt K\u00fcmesine Eri\u015fmek)\n\nimport numpy as np\n\na = np.arange(20,30)\na\n","32994d97":"a[0:3]\n\na[:3]\n\na[3:]","7a184a72":"a[1::2] #iki\u015fer iki\u015fer git\n","cef5fa05":"a[0::2]\n","703afd46":"a[2::2]\n","38ef7b2c":"a[0::3]","600ad42a":"#iki boyutlu slice islemleri\n\nm = np.random.randint(10, size = (5,5))\n\nm","317f24f6":"m[:,0]","e62495ff":"m[:,1]","e9f25912":"m[:,4]\n","a3bcc267":"m","d6dbd85f":"m[0,:]","d18f82f2":"m[0] # ilk sat\u0131r\u0131 \u00e7ekiyor yine","ab7dcac4":"m[1,:]","ab473bd4":"m[0:2, 0:3]\n","cf9785b3":"m[::,0:2] #t\u00fcm sat\u0131rlar\u0131n\u0131 al","9849d7ad":"m","2c97a047":"m[1:3, 0:2]","662ac023":"# 13.Alt K\u00fcme \u00dczerinde \u0130\u015flem Yapmak\n\nimport numpy as np\na = np.random.randint(10, size = (5, 5))\na","5b9cf863":"alt_a = a[0:3, 0:2]\nalt_a","20ca9e21":"alt_a[0,0] = 99999\nalt_a[1,1] = 888\n\nalt_a","c5766187":"a","e44161b1":"m = np.random.randint(10, size = (5, 5))\nm","657eb5d5":"\n#altk\u00fcmeleri ba\u011f\u0131ms\u0131zla\u015ft\u0131rmak\n\nalt_b = m[0:3, 0:2].copy()\nalt_b","d7aee0f7":"alt_b[0,0] = 9999\n\nalt_b\n\n","8d012de7":"m","d4a8ed0b":"# 14.Fancy Index ile Elemanlara Eri\u015fmek\n\nimport numpy as np\nv = np.arange(0, 30, 3)\nv","f39879f8":"v[1]\n","506c47e0":"v[3]","9fd17095":"v[5]","3a686d0a":"[v[1], v[3], v[5]]\n#liste halinde g\u00f6zlememek.","61ca01fa":"al_getir = [1,3,5]\n\nv","c44210e3":"#d\u00f6ng\u00fcs\u00fcz al getir.\nv[al_getir]","6cd0db10":"#iki boyutta fancy\n\nm = np.arange(9).reshape((3,3))\n\nm","7de24534":"satir = np.array([0,1])\nsutun = np.array([1,2])\n\nm[satir, sutun]","4fc91d7c":"#basit index ile fancy index\n\nm\n\nm[0, [1,2]]","3cfda7e8":"#slice ile fancy iki nokta: slice,fancy dilimin i\u00e7inde dilim\n\nm[0:, [1,2]]","47d408a6":"#1. `Pandas Giri\u015f`\n##Panel Data: numpy: fix type\n    # 1. a\u00e7\u0131k kaynakl\u0131\n    # 2. R dataframe-Python dataframe\n# 6. 2. Pandas Serisi Olu\u015fturma\n","ea1547d7":"# Pandas Serisi Olu\u015fturmak\n\nimport pandas as pd \n\npd.Series([10,88,3,4,5])","e50dcee1":"seri = pd.Series([10,88,3,4,5])\ntype(seri)","25d15d2b":"seri.axes\n","44defe27":"seri.dtype","a9378799":"seri.size","d974ca93":"seri.ndim\n","a4f6990d":"seri.values #i\u00e7erisindeki de\u011ferlerlere eri\u015fmek","f29ba696":"seri.head(3)\n","d88feaf4":"seri.tail(3)\n","da2aeb6b":"#index isimlendirmesi\n\npd.Series([99,22,332,94,5])","07648a91":"pd.Series([99,22,332,94,5], index = [1,3,5,7,9])\n","151be208":"pd.Series([99,22,332,94,5], index = [\"a\",\"b\",\"c\",\"d\",\"e\"])","8f7dcdc8":"seri = pd.Series([99,22,332,94,5], index = [\"a\",\"b\",\"c\",\"d\",\"e\"])\nseri[\"a\"]\n","e2fcf53c":"seri[\"a\":\"c\"]","44094da4":"#sozluk uzerinden liste olusturmak\n\nsozluk = {\"reg\":10, \"log\":11, \"cart\": 12}\n\nseri = pd.Series(sozluk)\n\nseri","6602b6cb":"#iki seriyi birlestirerek seri olusturma\n\npd.concat([seri,seri]) # seriler array gibi","9634575c":"import numpy as np\na = np.array([1,2,33,444,75])\nseri = pd.Series(a)\nseri","1293c3cd":"seri[0]","a00aead3":"seri[0:3]","275dcf0d":"seri = pd.Series([121,200,150,99], \n                 index = [\"reg\",\"loj\",\"cart\",\"rf\"])\n\nseri","5d48925c":"seri.index\n","2170d56a":"seri.keys","58c53da7":"list(seri.items())","a457480f":"seri.values","b37672bc":"#eleman sorgulama\n\n\"reg\" in seri","08f630d7":"\"a\" in seri","2d2af191":"seri[\"reg\"]\n","58dec322":"#fancy eleman\n\nseri[[\"rf\", \"reg\"]]","791fac9b":"seri[\"reg\"] = 130\n\nseri[\"reg\"]","866fc249":"seri[\"reg\":\"loj\"]","6aa44fc9":"import pandas as pd\n\nl = [1,2,39,67,90]\n\nl","31659e38":"pd.DataFrame(l, columns = [\"degisken_ismi\"])","e21f7669":"import numpy as np\nm = np.arange(1,10).reshape((3,3))\nm","5e963a6e":"pd.DataFrame(m, columns = [\"var1\",\"var2\",\"var3\"])","f6839885":"#df isimlendirme\n\ndf = pd.DataFrame(m, columns = [\"var1\",\"var2\",\"var3\"])\ndf.head()\n","03ffdf8e":"df.columns = (\"deg1\",\"deg2\",\"deg3\")\n\ndf","bd1cc549":"type(df)\n","2db5390a":"df.axes\n","03d19266":"df.shape","39c954f9":"df.ndim","1d10a83e":"df.size","e20a9d27":"df.values","58ac0e75":"type(df.values)","bdc19e78":"df.head()","39808b91":"df.tail(1)","763e0fe9":"a = np.array([1,2,3,4,5])\na","5717081c":"pd.DataFrame(a, columns = [\"deg1\"])","f3491a5e":"import numpy as np\ns1 = np.random.randint(10, size = 5)\ns2 = np.random.randint(10, size = 5)\ns3 = np.random.randint(10, size = 5)\n\nsozluk = {\"var1\": s1, \"var2\": s2, \"var3\": s3}\n\nsozluk","71904337":"df = pd.DataFrame(sozluk)\n\ndf","710fb50c":"df[0:1]","d943d33d":"df.index","53f66285":"df.index = [\"a\",\"b\",\"c\",\"d\",\"e\"]\n\ndf","48e1f4b9":"df[\"c\":\"e\"] # e dahil.","ccb547a8":"#silme\n\ndf.drop(\"a\", axis = 0) # yani y ekseni ba\u015fka bir deyi\u015fle sat\u0131rlar\u0131 al\u0131n\u0131r.\n\ndf","8e9c8e5c":"df.drop(\"a\", axis = 0, inplace = True) #inplace kal\u0131c\u0131 i\u015flem yapar. \n\ndf","737f3903":"#fancy \n\nl = [\"c\",\"e\"]\n\ndf.drop(l, axis = 0)","4907a9f2":"#degiskenler icin\n\ndf","dc67a568":"\"var1\" in df # var1 var m\u0131 df i\u00e7inde?\n","d0e54b3b":"l = [\"var1\",\"var4\",\"var2\"]\n\nfor i in l:\n    print(i in df)","23513c4f":"df","df11f1bd":"\n\ndf[\"var1\"]","405584b3":"#de\u011fi\u015fken olu\u015fturma\ndf[\"var4\"] = df[\"var1\"] \/ df[\"var2\"]\n\ndf","afef7615":"#degisken silmek\n\ndf.drop(\"var4\", axis = 1)\n\ndf","fb282a0c":"df.drop(\"var4\", axis = 1, inplace = True)\n\ndf","c9cd94d4":"#fancy ile silme\nl = [\"var1\",\"var2\"]\n\ndf.drop(l, axis = 1)","a255ad76":"# G\u00f6zlem ve De\u011fi\u015fken Se\u00e7imi: loc & iloc\n\nimport numpy as np\nimport pandas as pd\nm = np.random.randint(1,30, size = (10,3))\ndf = pd.DataFrame(m, columns = [\"var1\",\"var2\",\"var3\"])\ndf","2c882f12":"#loc: tan\u0131mland\u0131\u011f\u0131 \u015fekli ile se\u00e7im yapmak i\u00e7in kullan\u0131l\u0131r.\n\ndf.loc[0:3] # \u00fc\u00e7 dahil.birebir e\u015flenecek halde ","76b67d5b":"#iloc: al\u0131\u015f\u0131k oldu\u011fumuz indeksleme mant\u0131\u011f\u0131 ile se\u00e7im yapar.\n\ndf.iloc[0:3] # e kadar, klasik, index","00d046be":"df.iloc[0,0]","d4fa0da3":"df","230f0a23":"df.iloc[:3,:2]","a0db1e5a":"df.loc[0:3, \"var3\"] #lokasyon tabanl\u0131","117a3d45":"df.iloc[0:3][\"var3\"]","32f7f57f":"\n# Ko\u015fullu Eleman \u0130\u015flemleri\n\nimport numpy as np\nimport pandas as pd\nm = np.random.randint(1,30, size = (10,3))\ndf = pd.DataFrame(m, columns = [\"var1\",\"var2\",\"var3\"])\ndf","291aa01d":"df[\"var1\"]\n","4321d50c":"df[0:2][[\"var1\",\"var2\"]] #fancy yard\u0131m\u0131 ile","148465c8":"df","da58e3d8":"df.var1","56c28397":"df[df.var1 > 15]","bf1960e1":"df[(df.var1 > 15) & (df.var3 < 30)]","a834ba42":"df.loc[(df.var1 > 15), [\"var1\",\"var2\"]]\n","0b563ec7":"df[(df.var1 > 15)][[\"var1\",\"var2\"]]#fancy","6ff591d1":"# Birle\u015ftirme (Join) \u0130\u015flemleri\n\nimport numpy as np\nimport pandas as pd\nm = np.random.randint(1,30, size = (5,3))\ndf1 = pd.DataFrame(m, columns = [\"var1\",\"var2\",\"var3\"])\ndf1","0f17e272":"df2 = df1 + 99\n\ndf2","b62e7af7":"pd.concat([df1,df2])\n","7022bed3":"?pd.concat","5b3525b0":"pd.concat([df1,df2], ignore_index=True)\n","8fe91b82":"df1.columns","f38b0b52":"df2.columns = [\"var1\",\"var2\",\"deg3\"]\n\ndf2","dc3ee71b":"df1","eef23f2d":"pd.concat([df1, df2]) ## alt alta birle\u015ftirir.\n","ce85ade2":"pd.concat([df1, df2], join = \"inner\") \n#kesi\u015fimlerine g\u00f6re birle\u015ftir","3baed089":"pd.concat([df1, df2], join_axes = [df2.columns], ignore_index=True)","ea2d928c":"## 6.9. \u0130leri Birle\u015ftirme \u0130\u015flemleri\n","61fb2ddf":"# \u0130leri Birle\u015ftirme \u0130\u015flemleri\n\nimport pandas as pd\n\n#birebir birlestirme\n\ndf1 = pd.DataFrame({'calisanlar': ['Ali', 'Veli', 'Ayse', 'Fatma'],\n                    'grup': ['Muhasebe', 'Muhendislik', 'Muhendislik', '\u0130K']})\n\ndf1","725e8cac":"df2 = pd.DataFrame({'calisanlar': ['Ayse', 'Ali', 'Veli', 'Fatma'],\n                    'ilk_giris': [2010, 2009, 2014, 2019]})\n\ndf2","fc39361a":"import pandas as pd\npd.merge(df1, df2)","602acc1e":"pd.merge(df1, df2, on = \"calisanlar\")\n","e7f02266":"#coktan teke \n\ndf3 = pd.merge(df1, df2)\n\ndf3","9a1b7c2f":"df4 = pd.DataFrame({'grup': ['Muhasebe', 'Muhendislik', '\u0130K'],\n                    'mudur': ['Caner', 'Mustafa', 'Berkcan']})\n\ndf4","8038f329":"pd.merge(df3,df4)\n","f5b1d17f":"# \u00e7oktan \u00e7oka\n\ndf5 = pd.DataFrame({'grup': ['Muhasebe', 'Muhasebe',\n                              'Muhendislik', 'Muhendislik', '\u0130K', '\u0130K'],\n                    'yetenekler': ['matematik', 'excel', 'kodlama', 'linux',\n                               'excel', 'yonetim']})\n\ndf5","dc4fa859":"df1","913ea276":"pd.merge(df1, df5)","cb7225c7":"?sns.load_dataset\n","57d0bf6c":"import seaborn as sns\ndf = sns.load_dataset(\"planets\")\ndf.head()","525a4ca3":"df.shape","7ebe2879":"df.mean()\n","9e7797b9":"df[\"mass\"].mean()","65631f01":"df[\"mass\"].count()\n","3d08a71a":"df[\"mass\"].min()","4b2eb1cb":"df[\"mass\"].max()","d814ee0a":"df[\"mass\"].sum()","aceda437":"df[\"mass\"].std()\n","1d65cb93":"df[\"mass\"].var()","5f3ddb42":"df.describe().T\n","e69e2001":"df.dropna().describe().T","9058e4b6":"# Gruplama \u0130\u015flemleri\n\ndf = pd.DataFrame({'gruplar': ['A', 'B', 'C', 'A', 'B', 'C'],\n                   'veri': [10,11,52,23,43,55]}, columns=['gruplar', 'veri'])\ndf","30428d5e":"df.groupby(\"gruplar\") ","8b6fea18":"df.groupby(\"gruplar\").mean()","12380ffc":"df.groupby(\"gruplar\").sum()","2a51f51a":"df = sns.load_dataset(\"planets\")\ndf.head()","12a5ca6b":"df.groupby(\"method\")\n","33a7ac80":"df.groupby(\"method\")[\"orbital_period\"].mean()\n","c447e17e":"df.groupby(\"method\")[\"orbital_period\"].describe()","23b913e1":"# \u0130leri Toplula\u015ft\u0131rma \u0130\u015flemleri (Aggregate, filter, transform, apply)\n\nimport pandas as pd\ndf = pd.DataFrame({'gruplar': ['A', 'B', 'C', 'A', 'B', 'C'],\n                   'degisken1': [10,23,33,22,11,99],\n                   'degisken2': [100,253,333,262,111,969]},\n                   columns = ['gruplar', 'degisken1', 'degisken2'])\ndf","24022082":"#aggregate\n\ndf.groupby(\"gruplar\").mean()","c099fa19":"\nimport numpy as np\ndf.groupby(\"gruplar\").aggregate([min, np.median, max])\n\n","8641d9c9":"df.groupby(\"gruplar\").aggregate({\"degisken1\": \"min\", \"degisken2\": \"max\"})\n","0542c566":"#filter\n\nimport pandas as pd\ndf = pd.DataFrame({'gruplar': ['A', 'B', 'C', 'A', 'B', 'C'],\n                   'degisken1': [10,23,33,22,11,99],\n                   'degisken2': [100,253,333,262,111,969]},\n                   columns = ['gruplar', 'degisken1', 'degisken2'])\ndf","0097898c":"def filter_func(x):\n    return x[\"degisken1\"].std() > 9","cfc92870":"df.groupby(\"gruplar\").std()","7f035dd0":"df.groupby(\"gruplar\").filter(filter_func)","1dc8b616":"#transform\n\nimport pandas as pd\ndf = pd.DataFrame({'gruplar': ['A', 'B', 'C', 'A', 'B', 'C'],\n                   'degisken1': [10,23,33,22,11,99],\n                   'degisken2': [100,253,333,262,111,969]},\n                   columns = ['gruplar', 'degisken1', 'degisken2'])\ndf","5fc3650c":"\n\ndf[\"degisken1\"]*9","9005ca62":"\n\ndf_a = df.iloc[:,1:3]\n\n\ndf_a.transform(lambda x: (x-x.mean()) \/ x.std())","8820f944":"#apply\n\nimport pandas as pd\ndf = pd.DataFrame({'gruplar': ['A', 'B', 'C', 'A', 'B', 'C'],\n                   'degisken1': [10,23,33,22,11,99],\n                   'degisken2': [100,253,333,262,111,969]},\n                   columns = [ 'degisken1', 'degisken2'])\ndf","284866a3":"df.apply(np.sum)","7646b9c4":"df.apply(np.mean)\n","afaebf17":"import pandas as pd\ndf = pd.DataFrame({'gruplar': ['A', 'B', 'C', 'A', 'B', 'C'],\n                   'degisken1': [10,23,33,22,11,99],\n                   'degisken2': [100,253,333,262,111,969]},\n                   columns = ['gruplar', 'degisken1', 'degisken2'])\ndf\ndf.groupby(\"gruplar\").apply(np.mean)","2bd5af42":"# Pivot Tablolar\n\nimport pandas as pd\nimport seaborn as sns\ntitanic = sns.load_dataset('titanic')\ntitanic.head()","22cb9e0e":"titanic.groupby(\"sex\")[[\"survived\"]].mean()","1c778634":"titanic.groupby([\"sex\",\"class\"])[[\"survived\"]].aggregate(\"mean\").unstack()\n","5ac4bce9":"#pivot ile table\n\ntitanic.pivot_table(\"survived\", index = \"sex\", columns = \"class\")\n","81286d4d":"titanic.age.head()","99fe5bb5":"# kategorik de\u011fi\u015fkene \u00e7evirme\nage = pd.cut(titanic[\"age\"], [0, 18, 90])\nage.head(10)","98fd414b":"titanic.pivot_table(\"survived\", [\"sex\", age], \"class\")","e1c31f2b":"# D\u0131\u015f Kaynakl\u0131 Veri Okumak\n\nimport pandas as pd\n\n?pd.read_csv","4823bc16":"#csv okuma\npd.read_csv(\"reading_data\/ornekcsv.csv\", sep = \";\")","5bb4cf63":"#txt okuma\npd.read_csv(\"reading_data\/duz_metin.txt\")","8f47774d":"#excel\npd.read_excel(\"reading_data\/ornekx.xlsx\")\n\n\n\ndf = pd.read_excel(\"reading_data\/ornekx.xlsx\")\n\ntype(df)\n\ndf.head()\n\ndf.columns = (\"A\",\"B\",\"C\")\n\ndf\n\n#s\u0131f\u0131rdan txt okuma\ntips = pd.read_csv(\"reading_data\/data.txt\")\n\ntips.head()\n","d9b62465":"\n## 6.18. B\u00f6l\u00fcm Sonu De\u011ferlendirmesi\n19. Bonus: Problem \u00c7\u00f6zme ve Dok\u00fcman Okuma K\u00fclt\u00fcr\u00fc\n\n\n\n# Bonus: Problem \u00c7\u00f6zme ve D\u00f6k\u00fcman Okuma K\u00fclt\u00fcr\u00fc\n\n9 \/ 0\n\n# BOLUM SONU DEGERLENDIRMESI\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","8dc43610":"import numpy as np\nm = np.arange(1,7).reshape((3,2))\npd.DataFrame(m, columns = [\"var1\",\"var2\"])","538725fc":"# -*- coding: utf-8 -*-\n\"\"\"\nCreated on Sat Feb  6 12:58:37 2021\n\n@author: sezginildes\n\"\"\"\n\nimport numpy as np\n\nnp.arange(0,10, 2)\n\n\nk =np.array([[4, 7, 4, 5, 9],\n\n            [2, 5, 0, 7, 7],\n\n            [1, 9, 0, 8, 2]])\n\nk[3,2]\n\narray([[[7, 9],\n\n[4, 0],\n[5, 9]],\n\n[[4, 8],\n[6, 4],\n[4, 5]],\n\n[[2, 2],\n[8, 2],\n[0, 2]]])\n\n\n\nimport numpy as np\nnp.random.randint(10, size = (3,3,2))\n\n\n\n\nimport numpy as np\n\nv = np.array([2, 1, 4, 3, 5])\n\nnp.sort(v)\n\n\n\na =np.array([[4, 7, 4, 5, 9],\n            [2, 5, 0, 7, 7],\n            [1, 9, 0, 8, 2]])\n\n\na[:2, :3]\n\n\n5*np.array([1, 2,3])\n\n\nimport numpy as np\nnp.power(v, 3)\n\n\nv**3\n\nimport numpy as np\n\nv = np.array([ 0, 3, 6, 9, 12, 15, 18, 21, 24, 27])\n\n\n\nv[[1,2,3]]\n\n\nm =np.array([[4, 0, 3, 0, 1],\n\n            [9, 6, 1, 5, 9],\n\n            [1, 9, 0, 8, 2]])\n\nm[0:1]\n\n\nk =np.array([[4, 7, 4, 5, 9],\n\n            [2, 5, 0, 7, 7],\n\n            [1, 9, 0, 8, 2]])\n\n\nk[1,1]\n\n\nm= np.array([[4, 7, 4, 5, 9],\n            [2, 5, 0, 7, 7],\n            [1, 9, 0, 8, 2]])\n\nm[:,2]\n\n\nj = np.array([[0, 1, 2],\n             [3, 4, 5],\n             [6, 7, 8]])\n\n\nj[0, [1,2]]\n\n\nimport numpy as np\n\nnp.array([3.14, 4,6,1.2])\n\n\n\na=np.array([[4, 7, 4, 5, 9],\n\n            [2, 5, 0, 7, 7],\n\n            [1, 9, 0, 8, 2]])\n\n\n\na[2,3]\n\n\nimport numpy as np\nnp.ones((2,3))\n\n\nv =np.array([ 0, 3, 6, 9, 12, 15, 18, 21, 24, 27])\n[v[9], v[0]]\n\n\nv =np.array([ 0, 3, 6, 9, 12, 15, 18, 21, 24, 27])\n[v[1], v[3]]","46552219":"import numpy as np\nimport pandas as pd\nm = np.random.randint(1,31, size = (10,3))\ndf = pd.DataFrame(m, columns = [\"var1\",\"var2\",\"var3\"])\n\ndf[df.var1 > 15]  \ndf\n##\ndf.var1 \ndf['var1'] \ndf.describe()\ndf.ndim\ndf2=df\nk=pd.concat([df,df2], ignore_index = True)\nk","d380411c":"\n\ntitanic.pivot_table(\"survived\", columns = \"sex\", index = \"class\")\n\n\ntitanic.pivot_table(\"survived\", index = \"sex\", columns = \"class\")\n\n\ntitanic.pivottable(\"survived\", columns = \"sex\", index = \"class\")\n\n\ntitanic.pivottable(\"survived\", index = \"sex\", columns = \"class\")\n\n\ntitanic.group_by(\"sex\")","7daccec9":"df2 = df + 99\ndf2","7a8b971c":"seri = pd.Series([121,200,150,99],  index = [\"reg\",\"loj\",\"cart\",\"rf\"])\nseri\n\nimport numpy as np\nm = np.arange(1,7).reshape((3,2))\npd.DataFrame(m, columns = [\"var1\",\"var2\"])","486d0746":"seri = pd.Series([121,200,150,99])\n\nseri.values","df811ec4":"## 6.14. Transform\n","2a1d6730":"#### Veri Manip\u00fclasyonuna ati Birka\u00e7 soru\n","d1cf221a":"## 6.15. Apply","4eb1909f":"# Python 301","626f27db":"# Python 101","b1f05ce8":" # 6.Veri Manip\u00fclasyonu 201","63e7e54e":"## 6.13. Filter\n","342f20e2":"## 6.6. G\u00f6zlem ve De\u011fi\u015fken Se\u00e7imi : loc & iloc","37cc5b6e":"## 6.5. Eleman \u0130\u015flemleri","4cdbdec9":"## 6. 2. Pandas Serisi Olu\u015fturma\n","493b0af1":"# Veri Manip\u00fclasyonu 101 [notion notlar\u0131m](https:\/\/www.notion.so\/sezginildes\/Veri-Manip-lasyonu-101-795b054e84d94036af4138276897c5df****)","6236a444":"# Python 401","a87315fe":"# 6.Veri Manip\u00fclasyonu 201","2c89353c":"## 6.12. Aggregate\n","e191adc9":"## 6.11. Gruplama \u0130\u015flemleri","32981fbd":"## 6.10. `Gruplama ve Toplula\u015ft\u0131rma \u0130\u015flemleri:`Gruplama ve Toplula\u015ft\u0131rma (Grouping & Aggregation )\n","4f45500c":"### Toplula\u015ft\u0131rma ve Gruplama (Aggregation & Grouping)\n\nBasit toplula\u015ft\u0131rma fonksiyonlar\u0131:\n\n* count()\n* first()\n* last()\n* mean()\n* median()\n* min()\n* max()\n* std()\n* var()\n* sum()","338c2f10":"## 6.4. `Pandas Dataframe:Pandas Dataframe Olu\u015fturma\n","58ab27ae":"# Python 201","55bccff4":"## 6.16. Pivot Tablolar: ","6c9d0efd":"## 6.7. Ko\u015fullu Eleman i\u015flemleri\n","ace1cd65":"## 6.3. Eleman \u0130\u015flemleri","03bc5182":"## 6.17. D\u0131\u015f Kaynakl\u0131 Veri Okuma","f54393c9":"## 6.8. Birle\u015ftirme (Join) \u0130\u015flemleri","b62ba59b":"## 5.Veri Manip\u00fclasyonu 101 "}}