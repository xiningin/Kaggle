{"cell_type":{"ad80dc56":"code","257b7b71":"code","74100b02":"code","bb1c0286":"code","b5527a21":"code","e16d570e":"code","1e4498e2":"code","3ee3e6dc":"code","d2de75dd":"code","12060746":"code","5a1d20c6":"code","1f0ec15f":"code","fe2bfbde":"code","b56a4db8":"code","ae94f9a5":"code","12940726":"code","169185e6":"code","d5b69893":"code","ac42c10d":"code","7fed05c7":"code","45e9e838":"code","1b5b1bf9":"code","7a478a11":"code","62d81145":"code","bc0be2b7":"code","2f74d346":"code","73fa95f6":"code","89fb4a5f":"code","c3ee01af":"code","49ceff4f":"code","303efd0b":"code","977870ca":"code","4aa535d4":"markdown","08becba1":"markdown","d950dde6":"markdown","f20cba73":"markdown","eac9162a":"markdown","8bcfdeb0":"markdown","261d2014":"markdown","843a73db":"markdown","a00fbd10":"markdown","ba598ba2":"markdown","0ad0a387":"markdown","5ca380d5":"markdown","5e82a8e4":"markdown","cd1f0301":"markdown","cf7f8f0f":"markdown","e6785514":"markdown","674d4ea2":"markdown","164ba67e":"markdown"},"source":{"ad80dc56":"import pandas as pd\nimport numpy as np\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n%matplotlib inline","257b7b71":"from sklearn.preprocessing import StandardScaler\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.decomposition import PCA\nfrom sklearn.svm import SVC\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.ensemble import RandomForestClassifier, AdaBoostClassifier, GradientBoostingClassifier\nfrom sklearn.metrics import classification_report, confusion_matrix\nfrom tensorflow.keras.callbacks import EarlyStopping\nfrom tensorflow.keras.layers import Dense, Activation, Flatten, Dropout\nfrom tensorflow.keras import Sequential","74100b02":"data = pd.read_csv('..\/input\/creditcardfraud\/creditcard.csv')","bb1c0286":"data.head(3)","b5527a21":"data.info()","e16d570e":"data.describe().transpose()","1e4498e2":"data.shape","3ee3e6dc":"data.isnull().sum()","d2de75dd":"data.var()","12060746":"plt.figure(figsize = (10,8))\nsns.countplot(data=data, x='Class')","5a1d20c6":"plt.figure(figsize = (10,6))\nsns.boxplot(x = 'Class', y = 'Amount', data = data, hue = 'Class')","1f0ec15f":"corr = data.corr()\nplt.figure(figsize=(12,10))\nsns.heatmap(corr)","fe2bfbde":"sns.lmplot(x = 'Amount', y = 'V2', data = data, hue = 'Class', palette = 'Set1', fit_reg=True, scatter_kws={'edgecolor':'white', 'alpha':0.6, 'linewidths':1})\nsns.lmplot(x = 'Amount', y = 'V5', data = data, hue = 'Class', palette = 'magma', fit_reg=True, scatter_kws={'edgecolor':'white', 'alpha':0.6, 'linewidths':1})\nsns.lmplot(x = 'Amount', y = 'V7', data = data, hue = 'Class', palette = 'Dark2', fit_reg=True, scatter_kws={'edgecolor':'white', 'alpha':0.6, 'linewidths':1})\nsns.lmplot(x = 'Amount', y = 'V20', data = data, hue = 'Class', palette = 'Dark2_r', fit_reg=True, scatter_kws={'edgecolor':'white', 'alpha':0.6, 'linewidths':1})","b56a4db8":"amount = data['Amount'].values\ntime = data['Time'].values\nfig, (ax1, ax2) = plt.subplots(ncols = 2, figsize=(18, 4))\nsns.distplot(amount, ax = ax1, color = 'r', hist_kws={'edgecolor':'black'})\nax1.set_title('Amount')\nsns.distplot(time, ax = ax2, color = 'b', hist_kws={'edgecolor':'black'})\nax2.set_title('Time')","ae94f9a5":"data['Class'].value_counts()","12940726":"data = data.sample(frac=1)\nfraud = data.loc[data['Class'] == 1]\nnot_fraud = data.loc[data['Class'] == 0][ : 492]\ndata = pd.concat([fraud, not_fraud])\ndata = data.sample(frac=1, random_state=123)\ndata.head(3)","169185e6":"data.shape","d5b69893":"plt.figure(figsize = (10,8))\nsns.countplot(data=data, x='Class')","ac42c10d":"X = data.drop(['Class'], axis = 1).values\ny = data['Class'].values","7fed05c7":"print(X.shape)","45e9e838":"X_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.3, stratify = y, random_state = 123)","1b5b1bf9":"scaler = StandardScaler()\nX_train = scaler.fit_transform(X_train)\nX_test = scaler.transform(X_test)","7a478a11":"lr = LogisticRegression()\nlr.fit(X_train, y_train)\ny_pred = lr.predict(X_test)\nprint('Classification Report\\n', classification_report(y_test, y_pred))\nprint('Confusion Matrix\\n', confusion_matrix(y_test, y_pred))\nprint('Training Score : ', lr.score(X_train, y_train))\nprint('Test Score : ', lr.score(X_test, y_test))","62d81145":"svc = SVC()\nsvc.fit(X_train, y_train)\ny_pred = svc.predict(X_test)\nprint('Classification Report\\n', classification_report(y_test, y_pred))\nprint('Confusion Matrix\\n', confusion_matrix(y_test, y_pred))\nprint('Training Score : ', svc.score(X_train, y_train))\nprint('Test Score : ', svc.score(X_test, y_test))","bc0be2b7":"dt = DecisionTreeClassifier(max_depth= 4, min_samples_leaf= 4, random_state=123 )\ndt.fit(X_train, y_train)\ny_pred = dt.predict(X_test)\nprint('Classification Report\\n', classification_report(y_test, y_pred))\nprint('Confusion Matrix\\n', confusion_matrix(y_test, y_pred))\nprint('Training Score : ', dt.score(X_train, y_train))\nprint('Test Score : ', dt.score(X_test, y_test))","2f74d346":"rfc = RandomForestClassifier(max_depth= 6, min_samples_leaf= 6, random_state=123)\nrfc.fit(X_train, y_train)\ny_pred = rfc.predict(X_test)\nprint('Classification Report\\n', classification_report(y_test, y_pred))\nprint('Confusion Matrix\\n', confusion_matrix(y_test, y_pred))\nprint('Training Score : ', rfc.score(X_train, y_train))\nprint('Test Score : ', rfc.score(X_test, y_test))","73fa95f6":"adb = AdaBoostClassifier(base_estimator= rfc, n_estimators=50, random_state=123)\nadb.fit(X_train, y_train)\ny_pred = adb.predict(X_test)\nprint('Classification Report\\n', classification_report(y_test, y_pred))\nprint('Confusion Matrix\\n', confusion_matrix(y_test, y_pred))\nprint('Training Score : ', adb.score(X_train, y_train))\nprint('Test Score : ', adb.score(X_test, y_test))","89fb4a5f":"gdb = GradientBoostingClassifier(n_estimators= 50, max_depth= 2, min_samples_leaf= 10, random_state=123)\ngdb.fit(X_train, y_train)\ny_pred = gdb.predict(X_test)\nprint('Classification Report\\n', classification_report(y_test, y_pred))\nprint('Confusion Matrix\\n', confusion_matrix(y_test, y_pred))\nprint('Training Score : ', gdb.score(X_train, y_train))\nprint('Test Score : ', gdb.score(X_test, y_test))","c3ee01af":"model = Sequential()\nmodel.add(Flatten())\nmodel.add(Dense(128, activation='relu'))\nmodel.add(Dropout(0.5))\nmodel.add(Dense(128, activation='relu'))\nmodel.add(Dropout(0.5))\nmodel.add(Dense(128, activation='relu'))\nmodel.add(Dropout(0.5))\nmodel.add(Dense(1, activation='sigmoid'))","49ceff4f":"early_stop = EarlyStopping(monitor='val_loss', patience= 2, verbose= 0, mode = 'min')","303efd0b":"model.compile(optimizer= 'adam', loss='binary_crossentropy', metrics=['accuracy'])\nmodel.fit(X_train, y_train, epochs= 20, validation_data=(X_test, y_test), callbacks= [early_stop])","977870ca":"loss = pd.DataFrame(model.history.history)\nloss.plot()","4aa535d4":"## Exploratory Data Analysis","08becba1":"### Treating Uneven Class Distribution","d950dde6":"## Time to Train Models","f20cba73":"AdaBoost Classifier","eac9162a":"Not using PCA here because of loss of valuable information due to dimensionality reduction.","8bcfdeb0":"Preprocessing","261d2014":"Train Test Split","843a73db":"### Splitting and Preprocessing Data","a00fbd10":"### Machine Learning Methods","ba598ba2":"Support Vector Classification","0ad0a387":"Dividing data into features and labels","5ca380d5":"## Importing Libraries and Reading Data","5e82a8e4":"### Deep Learning Method","cd1f0301":"Gradient Boosting Classification","cf7f8f0f":"## Data Preparation","e6785514":"Decision Tree Classification","674d4ea2":"Random Forest Classifier","164ba67e":"Logistic regression"}}