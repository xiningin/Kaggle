{"cell_type":{"fbface11":"code","309261a9":"code","069b63d1":"code","bd062a0f":"code","dc7a6b15":"code","537ce6b1":"code","fe2349b3":"code","b066032e":"code","a61f488b":"code","46f4f6ea":"code","75373367":"code","2259fd5b":"code","23734c74":"code","ef2533fe":"code","d51a4b51":"code","10479c67":"code","0df892a5":"code","d3862fc2":"code","b5857022":"code","d05359b7":"code","9f3a0770":"code","286c7ca4":"code","134c8434":"code","63f16bf2":"code","2e455cd9":"code","543e7e50":"code","27a1dfa4":"code","2bb1e9c5":"code","15cbe150":"code","68e3ed70":"code","007956fd":"code","c45d1954":"code","a00e3e48":"code","a7061707":"code","41d1ad3c":"code","a042c80b":"code","b660d176":"code","cef92ad9":"code","7d2936a9":"code","6e3b3ed3":"code","23296528":"code","f4219ab1":"code","5dc5ea0b":"code","0b7572a4":"code","51a60d5c":"code","037bec03":"code","81cf2f20":"code","c1b8b8a5":"code","5a739b52":"code","19147245":"code","9bb7f4e7":"code","2ca3b5a1":"code","bebb00b1":"code","348c4178":"code","a6984b0e":"code","c5e2125c":"code","5ef7900f":"code","9a37d6f8":"code","917f5644":"code","98db3ca3":"code","a459c98a":"code","a29fa040":"code","32427e22":"code","af09fa98":"code","0105c94e":"code","4eefd3fa":"code","f854a503":"code","89d7564b":"code","c436309c":"code","7b78f47c":"code","43b5a278":"code","d26f561d":"code","d8d443bd":"code","7e6fd999":"code","4f74c106":"code","0af996ca":"code","f0119c5e":"code","9cf62ea5":"code","26a4e441":"code","603dece8":"code","0566b08f":"code","348e09aa":"code","9404be48":"code","6572acb9":"code","da2d424f":"code","46e4a7b7":"code","287d164f":"code","4fe0e6fa":"markdown","2b35bbaf":"markdown","53f000c6":"markdown","b1e28ee0":"markdown","426886d8":"markdown","f3b151f8":"markdown","bc0665c9":"markdown","45b9a4dc":"markdown","97bb9b7c":"markdown","f2ac07e3":"markdown","0006444d":"markdown","43e29933":"markdown","3dae5193":"markdown","77a1951a":"markdown","62061f60":"markdown","9f210181":"markdown","5d84ad88":"markdown","1956a4ce":"markdown","103d9aef":"markdown","9be77e49":"markdown","d5e8f92a":"markdown","94053e6d":"markdown","9687ab14":"markdown","bc0b55e4":"markdown","48b65bc9":"markdown","f66edb40":"markdown","ec7f0d28":"markdown","bb5198bc":"markdown","9686bcd2":"markdown","d156a1a6":"markdown","971d21db":"markdown","f8d7d79d":"markdown","cf05c4f2":"markdown","c4e11cf0":"markdown","74347d2c":"markdown","956d9ae9":"markdown","f1339c84":"markdown","e859bd26":"markdown","beb0c475":"markdown","2374a750":"markdown"},"source":{"fbface11":"from IPython.display import Image\nImage(\"..\/input\/netflix\/thibault-penin-AWOl7qqsffM-unsplash-scaled.jpg\")","309261a9":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\nfrom pandas import plotting\n\n#plotly \nimport plotly.offline as py\nimport plotly.graph_objects as go\nfrom plotly.offline import init_notebook_mode, iplot\nfrom plotly import tools\ninit_notebook_mode(connected=True)\nimport plotly.figure_factory as ff\nimport plotly.express as px\n","069b63d1":"df=pd.read_csv('..\/input\/netflix-shows\/netflix_titles.csv')\ndf.head()","bd062a0f":"((df.isnull().sum()\/len(df))*100).sort_values(ascending=True).plot(kind='barh',figsize=(10,10))\nplt.grid(b=True, which='both')","dc7a6b15":"df['type'].value_counts().plot(kind='barh', figsize=(10,10))\nplt.grid(b=True, which='both')","537ce6b1":"((df['type'].value_counts()\/len(df))*100).plot(kind='barh', figsize=(10,10))\nplt.grid(b=True, which='both')","fe2349b3":"dat=ff.create_table(df.head(10))\npy.iplot(dat)","b066032e":"# checks if there is any null value or not\ndf.isnull().any().any()","a61f488b":"df['rating'].value_counts()","46f4f6ea":"df['rating'].value_counts().plot(kind='barh', figsize=(10,10))\nplt.grid()\nplt.title(\"PLotting the rating curve \")\nplt.show()","75373367":"x=df['type'].value_counts()\nx","2259fd5b":"plt.rcParams['figure.figsize'] = (9, 9)\nlabels=['Movie', 'Tv']\nplt.pie(x, explode=(0,0.1), labels=labels,autopct='%1.1f%%', shadow=True)\nplt.title('Type ', fontsize = 20)\nplt.axis('off')\nplt.legend()\nplt.show()","23734c74":"df.columns","ef2533fe":"col = \"type\"\ngrouped = df[col].value_counts().reset_index()\ngrouped = grouped.rename(columns = {col : \"count\", \"index\" : col})\n\n## plot\ntrace = go.Pie(labels=grouped[col], values=grouped['count'], pull=[0.05, 0], marker=dict(colors=[\"#6ad49b\", \"#a678de\"]))\nlayout = go.Layout(title=\"\", height=600, legend=dict(x=0.1, y=1.1))\nfig = go.Figure(data = [trace], layout = layout)\niplot(fig)","d51a4b51":"col = \"rating\"\ngrouped = df[col].value_counts().reset_index()\ngrouped = grouped.rename(columns = {col : \"count\", \"index\" : col})\n\n## plot\nplt.figure(figsize=(10,10))\ntrace = go.Pie(labels=grouped[col], values=grouped['count'], pull=[0.05, 0], marker=dict(colors=[\"#6ad49b\", \"#a678de\"]))\nlayout = go.Layout(title=\"\", height=800, legend=dict(x=0.1, y=1.1))\nfig = go.Figure(data = [trace], layout = layout)\niplot(fig)","10479c67":"d1 = df[df[\"type\"] == \"TV Show\"]\nd2 = df[df[\"type\"] == \"Movie\"]\n\ncol = \"date_added\"\n\nvc1 = d1[col].value_counts().reset_index()\nvc1 = vc1.rename(columns = {col : \"count\", \"index\" : col})\nvc1['percent'] = vc1['count'].apply(lambda x : 100*x\/sum(vc1['count']))\nvc1 = vc1.sort_values(col)\n\nvc2 = d2[col].value_counts().reset_index()\nvc2 = vc2.rename(columns = {col : \"count\", \"index\" : col})\nvc2['percent'] = vc2['count'].apply(lambda x : 100*x\/sum(vc2['count']))\nvc2 = vc2.sort_values(col)\n\ntrace1 = go.Scatter(x=vc1[col], y=vc1[\"count\"], name=\"TV Shows\", marker=dict(color=\"#a678de\"))\ntrace2 = go.Scatter(x=vc2[col], y=vc2[\"count\"], name=\"Movies\", marker=dict(color=\"#6ad49b\"))\ndata = [trace1, trace2]\nlayout = go.Layout(title=\"Content added over the years\", legend=dict(x=0.1, y=1.1, orientation=\"h\"))\nfig = go.Figure(data, layout=layout)\nfig.show()","0df892a5":"df.columns","d3862fc2":"df.info()","b5857022":"df['date_added']=pd.to_datetime(df['date_added'])\ndf['year_added']=df['date_added'].dt.year\ndf['month_added']=df['date_added'].dt.month\n","d05359b7":"df['season_counts']=df.apply(lambda x: x['duration'].split(\" \")[0] if \"Season\" in x['duration'] else \"\", axis=1)\ndf['duration']=df.apply(lambda x: x['duration'].split(\" \")[0] if \"Season\" in x['duration'] else \"\", axis=1)\ndf.head()","9f3a0770":"df.info()","286c7ca4":"d1 = df[df[\"type\"] == \"TV Show\"]\nd2 = df[df[\"type\"] == \"Movie\"]\n\ncol = \"year_added\"\n\nvc1 = d1[col].value_counts().reset_index()\nvc1 = vc1.rename(columns = {col : \"count\", \"index\" : col})\nvc1['percent'] = vc1['count'].apply(lambda x : 100*x\/sum(vc1['count']))\nvc1 = vc1.sort_values(col)\n\nvc2 = d2[col].value_counts().reset_index()\nvc2 = vc2.rename(columns = {col : \"count\", \"index\" : col})\nvc2['percent'] = vc2['count'].apply(lambda x : 100*x\/sum(vc2['count']))\nvc2 = vc2.sort_values(col)\n\ntrace1 = go.Scatter(x=vc1[col], y=vc1[\"count\"], name=\"TV Shows\", marker=dict(color=\"#a678de\"))\ntrace2 = go.Scatter(x=vc2[col], y=vc2[\"count\"], name=\"Movies\", marker=dict(color=\"#6ad49b\"))\ndata = [trace1, trace2]\nlayout = go.Layout(title=\"Content Release years\", legend=dict(x=0.1, y=1.1, orientation=\"h\"))\nfig = go.Figure(data, layout=layout)\nfig.show()","134c8434":"d1 = df[df[\"type\"] == \"TV Show\"]\nd2 = df[df[\"type\"] == \"Movie\"]\n\ncol = \"release_year\"\n\nvc1 = d1[col].value_counts().reset_index()\nvc1 = vc1.rename(columns = {col : \"count\", \"index\" : col})\nvc1['percent'] = vc1['count'].apply(lambda x : 100*x\/sum(vc1['count']))\nvc1 = vc1.sort_values(col)\n\nvc2 = d2[col].value_counts().reset_index()\nvc2 = vc2.rename(columns = {col : \"count\", \"index\" : col})\nvc2['percent'] = vc2['count'].apply(lambda x : 100*x\/sum(vc2['count']))\nvc2 = vc2.sort_values(col)\n\ntrace1 = go.Bar(x=vc1[col], y=vc1[\"count\"], name=\"TV Shows\", marker=dict(color=\"#a678de\"))\ntrace2 = go.Bar(x=vc2[col], y=vc2[\"count\"], name=\"Movies\", marker=dict(color=\"#6ad49b\"))\ndata = [trace1, trace2]\nlayout = go.Layout(title=\"Content Release years\", legend=dict(x=0.1, y=1.1, orientation=\"h\"))\nfig = go.Figure(data, layout=layout)\nfig.show()","63f16bf2":"col = \"month_added\"\n\nvc1 = d1[col].value_counts().reset_index()\nvc1 = vc1.rename(columns = {col : \"count\", \"index\" : col})\nvc1['percent'] = vc1['count'].apply(lambda x : 100*x\/sum(vc1['count']))\nvc1 = vc1.sort_values(col)\n\nvc2 = d2[col].value_counts().reset_index()\nvc2 = vc2.rename(columns = {col : \"count\", \"index\" : col})\nvc2['percent'] = vc2['count'].apply(lambda x : 100*x\/sum(vc2['count']))\nvc2 = vc2.sort_values(col)\n\ntrace1 = go.Bar(x=vc1[col], y=vc1[\"count\"], name=\"TV Shows\", marker=dict(color=\"#a678de\"))\ntrace2 = go.Bar(x=vc2[col], y=vc2[\"count\"], name=\"Movies\", marker=dict(color=\"#6ad49b\"))\ndata = [trace1, trace2]\nlayout = go.Layout(title=\"Content Release years\", legend=dict(x=0.1, y=1.1, orientation=\"h\"))\nfig = go.Figure(data, layout=layout)\nfig.show()","2e455cd9":"df.columns","543e7e50":"small = df.sort_values(\"release_year\", ascending = True)\nsmall = small[small['season_counts'] != \"\"]\nsmall[['title', \"release_year\"]][:15]","27a1dfa4":"small = df.sort_values(\"release_year\", ascending = True)\nsmall = small[small['release_year'] != \"\"]\nsmall[['title', \"release_year\"]][:15]","2bb1e9c5":"small = d1.sort_values(\"release_year\", ascending = True)\nsmall = small[small['release_year'] != \"\"]\nsmall[['title', \"release_year\"]][:15]","15cbe150":"small = d2.sort_values(\"release_year\", ascending = True)\nsmall = small[small['release_year'] != \"\"]\nsmall[['title', \"release_year\"]][:15]","68e3ed70":"df.columns","007956fd":"plt.figure(figsize=(10,10))\nsns.displot(df['duration'],bins=100, kde=True)\nplt.show()","c45d1954":"df.columns","a00e3e48":"col = \"season_counts\"\n\nvc1 = d1[col].value_counts().reset_index()\nvc1 = vc1.rename(columns = {col : \"count\", \"index\" : col})\nvc1['percent'] = vc1['count'].apply(lambda x : 100*x\/sum(vc1['count']))\nvc1 = vc1.sort_values(col)\n\nvc2 = d2[col].value_counts().reset_index()\nvc2 = vc2.rename(columns = {col : \"count\", \"index\" : col})\nvc2['percent'] = vc2['count'].apply(lambda x : 100*x\/sum(vc2['count']))\nvc2 = vc2.sort_values(col)\n\ntrace1 = go.Bar(x=vc1[col], y=vc1[\"count\"], name=\"TV Shows\", marker=dict(color=\"#a678de\"))\ntrace2 = go.Bar(x=vc2[col], y=vc2[\"count\"], name=\"Movies\", marker=dict(color=\"#6ad49b\"))\ndata = [trace1, trace2]\nlayout = go.Layout(title=\"Season counts of show\", legend=dict(x=0.1, y=1.1, orientation=\"h\"))\nfig = go.Figure(data, layout=layout)\nfig.show()","a7061707":"col = \"season_counts\"\n\nvc1 = d1[col].value_counts().reset_index()\nvc1 = vc1.rename(columns = {col : \"count\", \"index\" : col})\nvc1['percent'] = vc1['count'].apply(lambda x : 100*x\/sum(vc1['count']))\nvc1 = vc1.sort_values(col)\n\ntrace1 = go.Bar(x=vc1[col], y=vc1[\"count\"], name=\"TV Shows\", marker=dict(color=\"#a678de\"))\n\ndata = [trace1]\nlayout = go.Layout(title=\"Season counts of Movies\", legend=dict(x=0.1, y=1.1, orientation=\"h\"))\nfig = go.Figure(data, layout=layout)\nfig.show()","41d1ad3c":"vc2 = d2[col].value_counts().reset_index()\nvc2 = vc2.rename(columns = {col : \"count\", \"index\" : col})\nvc2['percent'] = vc2['count'].apply(lambda x : 100*x\/sum(vc2['count']))\nvc2 = vc2.sort_values(col)\ntrace2 = go.Bar(x=vc2[col], y=vc2[\"count\"], name=\"Movies\", marker=dict(color=\"#6ad49b\"))\ndata = [trace1]\nlayout = go.Layout(title=\"Season counts of Tv Series\", legend=dict(x=0.1, y=1.1, orientation=\"h\"))\nfig = go.Figure(data, layout=layout)\nfig.show()","a042c80b":"col = \"rating\"\n\nvc1 = d1[col].value_counts().reset_index()\nvc1 = vc1.rename(columns = {col : \"count\", \"index\" : col})\nvc1['percent'] = vc1['count'].apply(lambda x : 100*x\/sum(vc1['count']))\nvc1 = vc1.sort_values(col)\n\nvc2 = d2[col].value_counts().reset_index()\nvc2 = vc2.rename(columns = {col : \"count\", \"index\" : col})\nvc2['percent'] = vc2['count'].apply(lambda x : 100*x\/sum(vc2['count']))\nvc2 = vc2.sort_values(col)\n\ntrace1 = go.Bar(x=vc1[col], y=vc1[\"count\"], name=\"TV Shows\", marker=dict(color=\"#a678de\"))\ntrace2 = go.Bar(x=vc2[col], y=vc2[\"count\"], name=\"Movies\", marker=dict(color=\"#6ad49b\"))\ndata = [trace1, trace2]\nlayout = go.Layout(title=\"Rating count of MOvie and TV show\", legend=dict(x=0.1, y=1.1, orientation=\"h\"))\nfig = go.Figure(data, layout=layout)\nfig.show()","b660d176":"df.columns","cef92ad9":"col = \"listed_in\"\n\nvc1 = d1[col].value_counts().reset_index()\nvc1 = vc1.rename(columns = {col : \"count\", \"index\" : col})\nvc1['percent'] = vc1['count'].apply(lambda x : 100*x\/sum(vc1['count']))\nvc1 = vc1.sort_values(col)\n\nvc2 = d2[col].value_counts().reset_index()\nvc2 = vc2.rename(columns = {col : \"count\", \"index\" : col})\nvc2['percent'] = vc2['count'].apply(lambda x : 100*x\/sum(vc2['count']))\nvc2 = vc2.sort_values(col)\n\ntrace1 = go.Bar(x=vc1[col], y=vc1[\"count\"], name=\"TV Shows\", marker=dict(color=\"#a678de\"))\ntrace2 = go.Bar(x=vc2[col], y=vc2[\"count\"], name=\"Movies\", marker=dict(color=\"#6ad49b\"))\ndata = [trace1, trace2]\nlayout = go.Layout(title=\"Rating count of MOvie and TV show\", legend=dict(x=0.1, y=1.1, orientation=\"h\"))\nfig = go.Figure(data, layout=layout)\nfig.show()","7d2936a9":"df['listed_in'].value_counts().sort_values(ascending=False).iloc[1:21].plot(kind='barh', figsize=(15,15))\nplt.grid()\nplt.show()","6e3b3ed3":"((df['listed_in'].value_counts()\/len(df))*100).sort_values(ascending=False).iloc[1:51].plot(kind='barh', figsize=(15,15))\nplt.grid()\nplt.show()","23296528":"((df['listed_in'].value_counts()\/len(df))*100).sort_values(ascending=False).iloc[1:21].plot(kind='barh', figsize=(15,15))\nplt.grid()\nplt.show()","f4219ab1":"df['listed_in'].head()","5dc5ea0b":"df['country'].value_counts().sort_values(ascending=False).iloc[1:21].plot(kind='barh', figsize=(15,15))\nplt.grid()\nplt.show()","0b7572a4":"df.columns","51a60d5c":"df[df['country']==\"India\"]['cast'].value_counts().sort_values(ascending=False).iloc[1:21].plot(kind='barh', figsize=(15,15))","037bec03":"from collections import Counter\ndef country_trace(country, flag = \"movie\"):\n    df[\"from_us\"] = df['country'].fillna(\"\").apply(lambda x : 1 if country.lower() in x.lower() else 0)\n    small = df[df[\"from_us\"] == 1]\n    if flag == \"movie\":\n        small = small[small[\"duration\"] != \"\"]\n    else:\n        small = small[small[\"season_count\"] != \"\"]\n    cast = \", \".join(small['cast'].fillna(\"\")).split(\", \")\n    tags = Counter(cast).most_common(25)\n    tags = [_ for _ in tags if \"\" != _[0]]\n\n    labels, values = [_[0]+\"  \" for _ in tags], [_[1] for _ in tags]\n    trace = go.Bar(y=labels[::-1], x=values[::-1], orientation=\"h\", name=\"\", marker=dict(color=\"#a678de\"))\n    return trace\n\nfrom plotly.subplots import make_subplots\ntraces = []\ntitles = [\"United States\", \"\",\"India\",\"\", \"United Kingdom\", \"Canada\",\"\", \"Spain\",\"\", \"Japan\"]\nfor title in titles:\n    if title != \"\":\n        traces.append(country_trace(title))\n\nfig = make_subplots(rows=2, cols=5, subplot_titles=titles)\nfig.add_trace(traces[0], 1,1)\nfig.add_trace(traces[1], 1,3)\nfig.add_trace(traces[2], 1,5)\nfig.add_trace(traces[3], 2,1)\nfig.add_trace(traces[4], 2,3)\nfig.add_trace(traces[5], 2,5)\n\nfig.update_layout(height=1200, showlegend=False)\nfig.show()","81cf2f20":"col = \"listed_in\"\ncategories = \", \".join(d2['listed_in']).split(\", \")\ncounter_list = Counter(categories).most_common(50)\nlabels = [_[0] for _ in counter_list][::-1]\nvalues = [_[1] for _ in counter_list][::-1]\ntrace1 = go.Bar(y=labels, x=values, orientation=\"h\", name=\"TV Shows\", marker=dict(color=\"#a678de\"))\n\ndata = [trace1]\nlayout = go.Layout(title=\"Content added over the years\", legend=dict(x=0.1, y=1.1, orientation=\"h\"))\nfig = go.Figure(data, layout=layout)\nfig.show()","c1b8b8a5":"df.isnull().sum()","5a739b52":"for i in df.columns:\n    null_rate=df[i].isnull().sum()\/len(df)*100\n    if null_rate>0:\n        print(\"{} 's null rate {}%\".format(i, round(null_rate,2)))","19147245":"df.nunique()","9bb7f4e7":"df.notna().sum().plot(kind='barh', figsize=(15,15))\nplt.grid()\nplt.show()","2ca3b5a1":"rating_replacements = {\n    67: 'TV-PG',\n    2359: 'TV-14',\n    3660: 'TV-MA',\n    3736: 'TV-MA',\n    3737: 'NR',\n    3738: 'TV-MA',\n    4323: 'TV-MA '\n}\n\nfor id, rate in rating_replacements.items():\n    df.iloc[id, 8] = rate\n    \ndf['rating'].isnull().sum()","bebb00b1":"df=df[df[\"date_added\"].notna()]","348c4178":"df.isnull().sum()","a6984b0e":"df['country'] = df['country'].fillna(df['country'].mode()[0])","c5e2125c":"df.isnull().sum()","5ef7900f":"df['country'].nunique()","9a37d6f8":"df['Principal_country']=df['country'].apply(lambda x: x.split(\",\")[0])\ndf['Principal_country'].head()","917f5644":"df.head()","98db3ca3":"df['Principal_country'].nunique()","a459c98a":"df.isnull().sum()","a29fa040":"ratings_ages = {\n    'TV-PG': 'Older Kids',\n    'TV-MA': 'Adults',\n    'TV-Y7-FV': 'Older Kids',\n    'TV-Y7': 'Older Kids',\n    'TV-14': 'Teens',\n    'R': 'Adults',\n    'TV-Y': 'Kids',\n    'NR': 'Adults',\n    'PG-13': 'Teens',\n    'TV-G': 'Kids',\n    'PG': 'Older Kids',\n    'G': 'Kids',\n    'UR': 'Adults',\n    'NC-17': 'Adults'\n}\ndf['target_ages'] = df['rating'].replace(ratings_ages)\ndf['target_ages'].unique()","32427e22":"country_data = df['country']\ncountry_count = pd.Series(dict(Counter(','.join(country_data).replace(' ,',',').replace(\n    ', ',',').split(',')))).sort_values(ascending=False)\ntop20country = country_count.head(20)\nplt.figure(figsize=(15,5))\nsns.barplot(x= top20country.index, y=top20country, palette=\"pastel\")\nplt.xticks(rotation=50)\nplt.title('Top 20 countries with most contents', fontsize=15, fontweight='bold')\nplt.show()","af09fa98":"plt.figure(figsize=(15,15))\nsns.countplot(x=df['target_ages'],hue=df['type'])\nplt.grid()\nplt.show()","0105c94e":"from wordcloud import WordCloud,STOPWORDS\n\ntext=' '.join(d1['listed_in'])\n\nplt.rcParams['figure.figsize']=(15,15)\nwordcloud=WordCloud(background_color='black', colormap='vlag', width=1200, height=1200, max_words=121).generate(text)\nplt.imshow(wordcloud)\nplt.axis(\"off\")\nplt.show()\n","4eefd3fa":"text=' '.join(d2['listed_in'])\n\nplt.rcParams['figure.figsize']=(15,15)\nwordcloud=WordCloud(background_color='lightblue', colormap='vlag', width=1200, height=1200, max_words=121).generate(text)\nplt.imshow(wordcloud)\nplt.axis(\"off\")\nplt.show()","f854a503":"Ratings = df['rating'].value_counts()","89d7564b":"Visualization = px.funnel(Ratings,title='Types of Rating on Netflix')\n\nVisualization.show()","c436309c":"Ratings = df['target_ages'].value_counts()\nVisualization = px.funnel(Ratings,title='Types of Target Audience on Netflix')\n\nVisualization.show()","7b78f47c":"Ratings = df['country'].value_counts().iloc[1:20]\nVisualization = px.funnel(Ratings,title='Top Country on Netflix')\n\nVisualization.show()","43b5a278":"df.columns","d26f561d":"df.info()","d8d443bd":"text=' '.join(d1['title'])\n\nplt.rcParams['figure.figsize']=(15,15)\nwordcloud=WordCloud(background_color='black', colormap='vlag', width=1200, height=1200, max_words=121).generate(text)\nplt.imshow(wordcloud)\nplt.axis(\"off\")\nplt.show()","7e6fd999":"text=' '.join(d2['title'])\n\nplt.rcParams['figure.figsize']=(15,15)\nwordcloud=WordCloud(background_color='lightblue', colormap='vlag', width=1200, height=1200, max_words=121).generate(text)\nplt.imshow(wordcloud)\nplt.axis(\"off\")\nplt.show()","4f74c106":"df_country = df['country'].value_counts()\n\niplot([go.Choropleth(\n    locationmode='country names',\n    locations=df_country.index.values,\n    text=df.index,\n    z=df.values,\n)])","0af996ca":"! pip install rake_nltk\nfrom sklearn.feature_extraction.text import CountVectorizer\nfrom sklearn.metrics.pairwise import cosine_similarity\nfrom rake_nltk import Rake","f0119c5e":"df.columns","9cf62ea5":"df_new=df[['title','director','cast','listed_in', 'description']]\ndf_new.head()","26a4e441":"df_new['director']=df_new['director'].fillna(' ')\ndf_new['director']=df_new['director'].astype('str')","603dece8":"df_new['cast']=df_new['cast'].fillna(' ')\ndf_new['cast']=df_new['cast'].astype('str')","0566b08f":"df_new['bag_of_word']= ''\nfor index,row in df_new.iterrows():\n    plot = row['description']\n    r = Rake()\n    r.extract_keywords_from_text(plot)\n    keyword_score = r.get_word_degrees()\n    g = ''.join(row['listed_in'].split(',')).lower()\n    d = ''.join(row['director'].replace(' ','').split(',')).lower()\n    a = ' '.join(row['cast'].replace(' ','').split(',')).lower()\n    k = ' '.join(list(keyword_score.keys()))\n    row['bag_of_word'] = g + ' ' + ' ' + d + ' ' + a + ' ' + k\n\nmydf = df_new[['title','bag_of_word']]\nmydf.head()","348e09aa":"c = CountVectorizer()\ncount_mat = c.fit_transform(mydf['bag_of_word'])\ncosine_sim = cosine_similarity(count_mat,count_mat)\nprint(cosine_sim)","9404be48":"indices = pd.Series(mydf['title'])\ndef recommend_movie(name):\n    movie=[]\n    idx = indices[indices == name].index[0]\n    sort_index = pd.Series(cosine_sim[idx]).sort_values(ascending = False)\n    top_10 = sort_index.iloc[1:11]\n    for i in top_10.index:\n        movie.append(indices[i])\n    return movie","6572acb9":"recommend_movie('Transformers Prime')","da2d424f":"df['title'].head(20)","46e4a7b7":"recommend_movie('1983')","287d164f":"from IPython.display import Image\nImage(\"..\/input\/thank-you\/download.jpg\", width=1000, height=1000)","4fe0e6fa":"**Obs**\n* As we can see that content added over the month \n* DUring january the movie added is most\n* During the december the Tv show added is more","2b35bbaf":"# Content added over the time ","53f000c6":"# Visualizing the percentage missing value from dataset","b1e28ee0":"# PLotting the different rating in dataset\n","426886d8":"# Season counts","f3b151f8":"# Rating counts of the Movie and TV show","bc0665c9":"# Word Cloud of the top title of Movie on Netflix","45b9a4dc":"**Obs**\n* Not a very good insight \n* Need alternative method to plot the curve","97bb9b7c":"#  Word cloud of the Tv Show added over the period","f2ac07e3":"# Content added over the year \n* As we can see the curve \n* Movie was popular once, but the popularity starts decrease\n* Tv show on the other hand starts incfreasing with the timming","0006444d":"# Recommending Top 10 content from Netflix","43e29933":"# Plotting the different ratings from the dataset","3dae5193":"# Oldest TV show Relase with year","77a1951a":"# Content from top 20 country ","62061f60":"**Obs**\n* Now there are only 81 unique country ","9f210181":"# Content added over the month","5d84ad88":"# Filling the country column with Most common country ","1956a4ce":"# Oldest Moview Relase with year","103d9aef":"**Obs** :-As we can see that there is null value","9be77e49":"# Word cloud of the Movie added over the period","d5e8f92a":"**Obs**:-\n* it is obious from the plot\n* Movie release date is decreases\n* Tv show is getting much popular ","94053e6d":"# Top 20 Plotting the list of top Genres that are avilable in Netflix","9687ab14":"# Count of type\n* Movie and TV show counts \n* As we can see maximu is Movie \n* 70% Movies and 30% TV shows ","bc0b55e4":"# Table of Content:-\n* **Panda**\n* **Nump**y\n* **Matplotlib**\n* **Seaborn**\n* **Plotly**\n* **Recomender System** \n* **Conclusion**","48b65bc9":"# Dataset -Description\n* **show_id** - numeric Value of Shows available in Netflix\n* **type** - Type of show avilable on Netflix - Movie and TV show\n* **title**- Title of show avilable on Netflix\n* **director**- Direcots listed in Movie and TV show\n* **cast** - Actor and Actress\n* **country**-  Origin country of the show \n* **date_added** -Year when conted added to Netflux\n* **release_year** - Relase year of the Show\n* **rating** - Rating given by the users\n* **duration** - Duration of the show avilable on Netflix\n* **listed_in**-  When the show avilable on netflix\n* **description**- - Decription given by Usera","f66edb40":"# Top 50 % of Plotting the list of top Genres that are avilable in Netflix","ec7f0d28":"# Visualizing the Rating Target ","bb5198bc":"**Inference**\n* List of top 20 geners\n* Stand up-comedy is quite popular, Most Popular one\n* Then Drama , internation Movie\n* Like wise we can see list of the number ","9686bcd2":"# Recommendations\n* Here we are going  to recommend content base recommendation \n* We have the required columns as type, casting , rating, target_ratings, etc\n","d156a1a6":"# Pie Chart for the Type of Genre","971d21db":"# Taking the only Non-Null columns from the dataset","f8d7d79d":"**Obs**\n* There are 681 unique country in dataset","cf05c4f2":"# Word Cloud of the top title of TV show on Netflix","c4e11cf0":"# Reading the dataset","74347d2c":"# Conclusion\n1. Recommender systems are used in a variety of areas, with commonly recognised examples taking the form of playlist generators for video and music services, product recommenders for online stores, or content recommenders for social media platforms and open web content recommenders\n2. It is great way of recommending the Best content of Top Netflix content\n3. Next update will be done and soon\n4. If you like you can follow and review my other kernels. Here is my profile  \n[Rabi SIngh](https:\/\/www.kaggle.com\/jurk06)","956d9ae9":"# Content Realease date over the period","f1339c84":"# Oldest Release ","e859bd26":"# Visualization of the Ratings ","beb0c475":"**Inference**\n* There are only 14 different rating in datasdt\n* Maximum rating is \"TV-MA\" ,its couunts is more 2863\n* Then -TV-14 - count is 1931\n* Least is NC-17 , count is 3","2374a750":"**inference**\n* As we can see that Stand up comedy and Drama are almost same popular\n* The differece between Stand up comedy and Drama is not that big\n"}}