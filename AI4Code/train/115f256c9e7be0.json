{"cell_type":{"2c7cb20f":"code","51eadd67":"code","ca0ed531":"code","68723114":"code","2029b812":"code","d2d6c574":"code","1f6f324d":"code","75f4da2b":"code","fcb50f8a":"code","3c982d3e":"code","7ab55c2a":"code","efe406ba":"code","eca8482c":"code","e7afc3de":"markdown","1e5888f2":"markdown","be792d53":"markdown","548cb91a":"markdown","db2b7e75":"markdown","78d5af9f":"markdown","d11a1a21":"markdown","bcdc9529":"markdown","58fffa80":"markdown","0410b9c8":"markdown","eb501ee6":"markdown","5ecf354f":"markdown","80144664":"markdown","fd80a3cc":"markdown"},"source":{"2c7cb20f":"!pip install -q dl-translate","51eadd67":"import dl_translate as dlt\n\n\nmt = dlt.TranslationModel()\n\ntext_hi = \"\u0938\u0902\u092f\u0941\u0915\u094d\u0924 \u0930\u093e\u0937\u094d\u091f\u094d\u0930 \u0915\u0947 \u092a\u094d\u0930\u092e\u0941\u0916 \u0915\u093e \u0915\u0939\u0928\u093e \u0939\u0948 \u0915\u093f \u0938\u0940\u0930\u093f\u092f\u093e \u092e\u0947\u0902 \u0915\u094b\u0908 \u0938\u0948\u0928\u094d\u092f \u0938\u092e\u093e\u0927\u093e\u0928 \u0928\u0939\u0940\u0902 \u0939\u0948\"\nmt.translate(text_hi, source=dlt.lang.HINDI, target=dlt.lang.ENGLISH)","ca0ed531":"text_ar = \"\u0627\u0644\u0623\u0645\u064a\u0646 \u0627\u0644\u0639\u0627\u0645 \u0644\u0644\u0623\u0645\u0645 \u0627\u0644\u0645\u062a\u062d\u062f\u0629 \u064a\u0642\u0648\u0644 \u0625\u0646\u0647 \u0644\u0627 \u064a\u0648\u062c\u062f \u062d\u0644 \u0639\u0633\u0643\u0631\u064a \u0641\u064a \u0633\u0648\u0631\u064a\u0627.\"\nmt.translate(text_ar, source=\"Arabic\", target=\"fr\")","68723114":"print(mt.available_languages())  # All languages that you can use\nprint(mt.available_codes())  # Code corresponding to each language accepted\nprint(mt.get_lang_code_map())  # Dictionary of lang -> code","2029b812":"mt.device","d2d6c574":"import nltk\nnltk.download(\"punkt\")","1f6f324d":"text = \"Mr. Smith went to his favorite cafe. There, he met his friend Dr. Doe.\"\nsents = nltk.tokenize.sent_tokenize(text, \"english\")  # don't use dlt.lang.ENGLISH\n\" \".join(mt.translate(sents, source=dlt.lang.ENGLISH, target=dlt.lang.FRENCH))","75f4da2b":"mt.translate(sents, source=dlt.lang.ENGLISH, target=dlt.lang.FRENCH, batch_size=32, verbose=True)","fcb50f8a":"print(dlt.utils.available_languages('mbart50'))  # All languages that you can use\nprint(dlt.utils.available_codes('mbart50'))  # Code corresponding to each language accepted\nprint(dlt.utils.get_lang_code_map('mbart50'))  # Dictionary of lang -> code","3c982d3e":"mt.save_obj(\"saved_model\")","7ab55c2a":"%%time\nmt = dlt.TranslationModel.load_obj('saved_model')","efe406ba":"bart = mt.get_transformers_model()\ntokenizer = mt.get_tokenizer()\n\nprint(tokenizer)\nprint(bart)","eca8482c":"mt.translate(\n    sents,\n    source=dlt.lang.ENGLISH,\n    target=dlt.lang.SPANISH,\n    generation_options=dict(num_beams=5, max_length=128)\n)","e7afc3de":"### Setting a `batch_size` and verbosity when calling `dlt.TranslationModel.translate`\n\nIt's possible to set a batch size (i.e. the number of elements processed at once) for `mt.translate` and whether you want to see the progress bar or not:","1e5888f2":"## Usage\n\n### Selecting a device\n\nWhen you load the model, you can specify the device:\n```python\nmt = dlt.TranslationModel(device=\"auto\")\n```\n\nBy default, the value will be `device=\"auto\"`, which means it will use a GPU if possible. You can also explicitly set `device=\"cpu\"` or `device=\"gpu\"`, or some other strings accepted by [`torch.device()`](https:\/\/pytorch.org\/docs\/stable\/tensor_attributes.html#torch.torch.device). __In general, it is recommend to use a GPU if you want a reasonable processing time.__\n\nLet's check what we originally loaded:","be792d53":"### Loading from a path\n\nBy default, `dlt.TranslationModel` will download the model from the [huggingface repo](https:\/\/huggingface.co\/facebook\/mbart-large-50-one-to-many-mmt) and cache it. However, you are free to load from a path:\n```python\nmt = dlt.TranslationModel(\"\/path\/to\/your\/model\/directory\/\")\n```\nMake sure that your tokenizer is also stored in the same directory if you use this approach.\n\n\n### Using a different model\n\nYou can also choose another model that has [a similar format](https:\/\/huggingface.co\/models?filter=mbart-50), e.g.\n```python\nmt = dlt.TranslationModel(\"facebook\/mbart-large-50-one-to-many-mmt\")\n```\nNote that the available languages will change if you do this, so you will not be able to leverage `dlt.lang` or `dlt.utils`.\n\n\n### Breaking down into sentences\n\nIt is not recommended to use extremely long texts as it takes more time to process. Instead, you can try to break them down into sentences with the help of `nltk`. First install the library with `pip install nltk`, then run:","548cb91a":"If you want to verify whether a language is available, you can check it:","db2b7e75":"\n**Warning:** Only use this if you are certain the torch module saved in `saved_model\/weights.pt` can be correctly loaded. Indeed, it is possible that the `huggingface`, `torch` or some other dependencies change between when you called `save_obj` and `load_obj`, and that might break your code. Thus, it is recommend to only run `load_obj` in the same environment\/session as `save_obj`. **Note this method might be deprecated in the future once there's no speed benefit in loading this way.**\n\n\n### Interacting with underlying model and tokenizer\n\nWhen initializing `model`, you can pass in arguments for the underlying BART model and tokenizer (which will respectively be passed to `MBartForConditionalGeneration.from_pretrained` and `MBart50TokenizerFast.from_pretrained`):\n\n```python\nmt = dlt.TranslationModel(\n    model_options=dict(\n        state_dict=...,\n        cache_dir=...,\n        ...\n    ),\n    tokenizer_options=dict(\n        tokenizer_file=...,\n        eos_token=...,\n        ...\n    )\n)\n```\n\nYou can also access the underlying `transformers` model and `tokenizer`:","78d5af9f":"If you set `batch_size=None`, it will compute the entire `text` at once rather than splitting into \"chunks\". We recommend lowering `batch_size` if you do not have a lot of RAM or VRAM and run into CUDA memory error. Set a higher value if you are using a high-end GPU and the VRAM is not fully utilized.\n\n\n### `dlt.utils` module\n\nAn alternative to `mt.available_languages()` is the `dlt.utils` module. You can use it to find out which languages and codes are available:\n","d11a1a21":"Above, you can see that `dlt.lang` contains variables representing each of the 50 available languages with auto-complete support. Alternatively, you can specify the language (e.g. \"Arabic\") or the language code (e.g. \"fr\" for French):","bcdc9529":"To translate some text:","58fffa80":"## Quickstart\n\nInstall the library with pip:","0410b9c8":"## DL Translate\n\n*A deep learning-based translation library built on Huggingface `transformers` and Facebook's `mBART-Large`*\n\n\ud83d\udcbb [GitHub Repository](https:\/\/github.com\/xhlulu\/dl-translate)<br>\n\ud83d\udcda [Documentation](https:\/\/git.io\/dlt-docs) \/ [readthedocs](https:\/\/dl-translate.readthedocs.io)<br>\n\ud83d\udc0d [PyPi project](https:\/\/pypi.org\/project\/dl-translate\/)","eb501ee6":"See the [huggingface docs](https:\/\/huggingface.co\/transformers\/master\/model_doc\/mbart.html) for more information.\n\n\n### `bart_model.generate()` keyword arguments\n\nWhen running `mt.translate`, you can also give a `generation_options` dictionary that is passed as keyword arguments to the underlying `bart_model.generate()` method:","5ecf354f":"Learn more in the [huggingface docs](https:\/\/huggingface.co\/transformers\/main_classes\/model.html#transformers.generation_utils.GenerationMixin.generate).\n\n\n## Acknowledgement\n\n`dl-translate` is built on top of Huggingface's implementation of two models created by Facebook AI Research.\n\n1. The multilingual BART finetuned on many-to-many translation of over 50 languages, which is [documented here](https:\/\/huggingface.co\/transformers\/master\/model_doc\/mbart.html) The original paper was written by Tang et. al from Facebook AI Research; you can [find it here](https:\/\/arxiv.org\/pdf\/2008.00401.pdf) and cite it using the following:\n    ```\n    @article{tang2020multilingual,\n        title={Multilingual translation with extensible multilingual pretraining and finetuning},\n        author={Tang, Yuqing and Tran, Chau and Li, Xian and Chen, Peng-Jen and Goyal, Naman and Chaudhary, Vishrav and Gu, Jiatao and Fan, Angela},\n        journal={arXiv preprint arXiv:2008.00401},\n        year={2020}\n    }\n    ```\n2. The transformer model published in [Beyond English-Centric Multilingual Machine Translation](https:\/\/arxiv.org\/abs\/2010.11125) by Fan et. al, which supports over 100 languages. You can cite it here:\n   ```\n   @misc{fan2020englishcentric,\n        title={Beyond English-Centric Multilingual Machine Translation}, \n        author={Angela Fan and Shruti Bhosale and Holger Schwenk and Zhiyi Ma and Ahmed El-Kishky and Siddharth Goyal and Mandeep Baines and Onur Celebi and Guillaume Wenzek and Vishrav Chaudhary and Naman Goyal and Tom Birch and Vitaliy Liptchinsky and Sergey Edunov and Edouard Grave and Michael Auli and Armand Joulin},\n        year={2020},\n        eprint={2010.11125},\n        archivePrefix={arXiv},\n        primaryClass={cs.CL}\n    }\n   ```\n\n`dlt` is a wrapper with useful `utils` to save you time. For huggingface's `transformers`, the following snippet is shown as an example:\n```python\nfrom transformers import MBartForConditionalGeneration, MBart50TokenizerFast\n\narticle_hi = \"\u0938\u0902\u092f\u0941\u0915\u094d\u0924 \u0930\u093e\u0937\u094d\u091f\u094d\u0930 \u0915\u0947 \u092a\u094d\u0930\u092e\u0941\u0916 \u0915\u093e \u0915\u0939\u0928\u093e \u0939\u0948 \u0915\u093f \u0938\u0940\u0930\u093f\u092f\u093e \u092e\u0947\u0902 \u0915\u094b\u0908 \u0938\u0948\u0928\u094d\u092f \u0938\u092e\u093e\u0927\u093e\u0928 \u0928\u0939\u0940\u0902 \u0939\u0948\"\narticle_ar = \"\u0627\u0644\u0623\u0645\u064a\u0646 \u0627\u0644\u0639\u0627\u0645 \u0644\u0644\u0623\u0645\u0645 \u0627\u0644\u0645\u062a\u062d\u062f\u0629 \u064a\u0642\u0648\u0644 \u0625\u0646\u0647 \u0644\u0627 \u064a\u0648\u062c\u062f \u062d\u0644 \u0639\u0633\u0643\u0631\u064a \u0641\u064a \u0633\u0648\u0631\u064a\u0627.\"\n\nmodel = MBartForConditionalGeneration.from_pretrained(\"facebook\/mbart-large-50-many-to-many-mmt\")\ntokenizer = MBart50TokenizerFast.from_pretrained(\"facebook\/mbart-large-50-many-to-many-mmt\")\n\n# translate Hindi to French\ntokenizer.src_lang = \"hi_IN\"\nencoded_hi = tokenizer(article_hi, return_tensors=\"pt\")\ngenerated_tokens = model.generate(**encoded_hi, forced_bos_token_id=tokenizer.lang_code_to_id[\"fr_XX\"])\ntokenizer.batch_decode(generated_tokens, skip_special_tokens=True)\n# => \"Le chef de l 'ONU affirme qu 'il n 'y a pas de solution militaire en Syria.\"\n\n# translate Arabic to English\ntokenizer.src_lang = \"ar_AR\"\nencoded_ar = tokenizer(article_ar, return_tensors=\"pt\")\ngenerated_tokens = model.generate(**encoded_ar, forced_bos_token_id=tokenizer.lang_code_to_id[\"en_XX\"])\ntokenizer.batch_decode(generated_tokens, skip_special_tokens=True)\n# => \"The Secretary-General of the United Nations says there is no military solution in Syria.\"\n```\n\nWith `dlt`, you can run:\n```python\nimport dl_translate as dlt\n\narticle_hi = \"\u0938\u0902\u092f\u0941\u0915\u094d\u0924 \u0930\u093e\u0937\u094d\u091f\u094d\u0930 \u0915\u0947 \u092a\u094d\u0930\u092e\u0941\u0916 \u0915\u093e \u0915\u0939\u0928\u093e \u0939\u0948 \u0915\u093f \u0938\u0940\u0930\u093f\u092f\u093e \u092e\u0947\u0902 \u0915\u094b\u0908 \u0938\u0948\u0928\u094d\u092f \u0938\u092e\u093e\u0927\u093e\u0928 \u0928\u0939\u0940\u0902 \u0939\u0948\"\narticle_ar = \"\u0627\u0644\u0623\u0645\u064a\u0646 \u0627\u0644\u0639\u0627\u0645 \u0644\u0644\u0623\u0645\u0645 \u0627\u0644\u0645\u062a\u062d\u062f\u0629 \u064a\u0642\u0648\u0644 \u0625\u0646\u0647 \u0644\u0627 \u064a\u0648\u062c\u062f \u062d\u0644 \u0639\u0633\u0643\u0631\u064a \u0641\u064a \u0633\u0648\u0631\u064a\u0627.\"\n\nmt = dlt.TranslationModel()\ntranslated_fr = mt.translate(article_hi, source=dlt.lang.HINDI, target=dlt.lang.FRENCH)\ntranslated_en = mt.translate(article_ar, source=dlt.lang.ARABIC, target=dlt.lang.ENGLISH)\n```\n\nNotice you don't have to think about tokenizers, condition generation, pretrained models, and regional codes; you can just tell the model what to translate!\n\nIf you are experienced with `huggingface`'s ecosystem, then you should be familiar enough with the example above that you wouldn't need this library. However, if you've never heard of huggingface or mBART, then I hope using this library will give you enough motivation to [learn more about them](https:\/\/github.com\/huggingface\/transformers) :)","80144664":"## Advanced\n\nThe following section assumes you have knowledge of PyTorch and Huggingface Transformers.\n\n### Saving and loading\n\nIf you wish to accelerate the loading time the translation model, you can use `save_obj`:\n","fd80a3cc":"\nThen later you can reload it with `load_obj`:"}}