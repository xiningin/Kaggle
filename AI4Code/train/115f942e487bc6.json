{"cell_type":{"b0e0a9e7":"code","1bb0a2c4":"code","dafa644a":"code","b5481c2f":"code","43c16f44":"code","13c11d97":"code","cba64893":"code","e9175fec":"code","269a7cdf":"code","0aefe002":"code","96711e28":"code","ab2c65f6":"code","0795fba6":"code","b34effa6":"code","a6dea258":"code","3e11add1":"code","4ec2871c":"code","f046745a":"code","fada4401":"code","ae0ca8cc":"code","d2bf1520":"code","46542805":"code","a118aab9":"code","5820123a":"code","eb26bba9":"code","204969b2":"code","ed794636":"code","1003d934":"code","a1472780":"code","bf0bb895":"markdown","27cdfcb1":"markdown","cb63fc62":"markdown","2140f449":"markdown","dcb846e0":"markdown","b0a74424":"markdown","bc13616c":"markdown","a657fc4c":"markdown","3d78c6cc":"markdown","c408c851":"markdown","855b20be":"markdown","cef52fa5":"markdown","72c5bb84":"markdown","810e05f5":"markdown","9da7848a":"markdown","886e4c9d":"markdown","21b1ba67":"markdown","9e15af5f":"markdown","d074459f":"markdown","b43e4725":"markdown","79593ffc":"markdown","a68ced0b":"markdown","e1901dd6":"markdown","9c287984":"markdown","54f7df69":"markdown","72fb8f92":"markdown","97381d8b":"markdown","ab5ce2e5":"markdown","ac4110e5":"markdown","eff55662":"markdown","87573b24":"markdown","f92bf2bb":"markdown","2cc6400a":"markdown","1cb9f107":"markdown","3b5bbb75":"markdown"},"source":{"b0e0a9e7":"# TensorFlow and tf.keras\nimport tensorflow as tf\n\n# Helper libraries\nimport numpy as np\nimport matplotlib.pyplot as plt\n\nprint(tf.__version__)","1bb0a2c4":"fashion_mnist = tf.keras.datasets.fashion_mnist\n\n(train_images, train_labels), (test_images, test_labels) = fashion_mnist.load_data()","dafa644a":"class_names = ['T-shirt\/top', 'Trouser', 'Pullover', 'Dress', 'Coat',\n               'Sandal', 'Shirt', 'Sneaker', 'Bag', 'Ankle boot']","b5481c2f":"train_images.shape","43c16f44":"len(train_labels)","13c11d97":"train_labels","cba64893":"test_images.shape","e9175fec":"len(test_labels)","269a7cdf":"plt.figure()\nplt.imshow(train_images[0])\nplt.colorbar()\nplt.grid(False)\nplt.show()","0aefe002":"train_images = train_images \/ 255.0\n\ntest_images = test_images \/ 255.0","96711e28":"plt.figure(figsize=(10,10))\nfor i in range(25):\n    plt.subplot(5,5,i+1)\n    plt.xticks([])\n    plt.yticks([])\n    plt.grid(False)\n    plt.imshow(train_images[i], cmap=plt.cm.binary)\n    plt.xlabel(class_names[train_labels[i]])\nplt.show()","ab2c65f6":"model = tf.keras.Sequential([\n    tf.keras.layers.Flatten(input_shape=(28, 28)),\n    tf.keras.layers.Dense(128, activation='relu'),\n    tf.keras.layers.Dense(10)\n])","0795fba6":"model.compile(optimizer='adam',\n              loss=tf.keras.losses.SparseCategoricalCrossentropy(from_logits=True),\n              metrics=['accuracy'])","b34effa6":"model.fit(train_images, train_labels, epochs=10)","a6dea258":"test_loss, test_acc = model.evaluate(test_images,  test_labels, verbose=2)\n\nprint('\\nTest accuracy:', test_acc)","3e11add1":"probability_model = tf.keras.Sequential([model, \n                                         tf.keras.layers.Softmax()])","4ec2871c":"predictions = probability_model.predict(test_images)","f046745a":"predictions[0]","fada4401":"np.argmax(predictions[0])","ae0ca8cc":"test_labels[0]","d2bf1520":"def plot_image(i, predictions_array, true_label, img):\n  true_label, img = true_label[i], img[i]\n  plt.grid(False)\n  plt.xticks([])\n  plt.yticks([])\n\n  plt.imshow(img, cmap=plt.cm.binary)\n\n  predicted_label = np.argmax(predictions_array)\n  if predicted_label == true_label:\n    color = 'blue'\n  else:\n    color = 'red'\n\n  plt.xlabel(\"{} {:2.0f}% ({})\".format(class_names[predicted_label],\n                                100*np.max(predictions_array),\n                                class_names[true_label]),\n                                color=color)\n\ndef plot_value_array(i, predictions_array, true_label):\n  true_label = true_label[i]\n  plt.grid(False)\n  plt.xticks(range(10))\n  plt.yticks([])\n  thisplot = plt.bar(range(10), predictions_array, color=\"#777777\")\n  plt.ylim([0, 1])\n  predicted_label = np.argmax(predictions_array)\n\n  thisplot[predicted_label].set_color('red')\n  thisplot[true_label].set_color('blue')","46542805":"i = 0\nplt.figure(figsize=(6,3))\nplt.subplot(1,2,1)\nplot_image(i, predictions[i], test_labels, test_images)\nplt.subplot(1,2,2)\nplot_value_array(i, predictions[i],  test_labels)\nplt.show()","a118aab9":"i = 12\nplt.figure(figsize=(6,3))\nplt.subplot(1,2,1)\nplot_image(i, predictions[i], test_labels, test_images)\nplt.subplot(1,2,2)\nplot_value_array(i, predictions[i],  test_labels)\nplt.show()","5820123a":"# Plot the first X test images, their predicted labels, and the true labels.\n# Color correct predictions in blue and incorrect predictions in red.\nnum_rows = 5\nnum_cols = 3\nnum_images = num_rows*num_cols\nplt.figure(figsize=(2*2*num_cols, 2*num_rows))\nfor i in range(num_images):\n  plt.subplot(num_rows, 2*num_cols, 2*i+1)\n  plot_image(i, predictions[i], test_labels, test_images)\n  plt.subplot(num_rows, 2*num_cols, 2*i+2)\n  plot_value_array(i, predictions[i], test_labels)\nplt.tight_layout()\nplt.show()","eb26bba9":"# Grab an image from the test dataset.\nimg = test_images[1]\n\nprint(img.shape)","204969b2":"# Add the image to a batch where it's the only member.\nimg = (np.expand_dims(img,0))\n\nprint(img.shape)","ed794636":"predictions_single = probability_model.predict(img)\n\nprint(predictions_single)","1003d934":"plot_value_array(1, predictions_single[0], test_labels)\n_ = plt.xticks(range(10), class_names, rotation=45)\nplt.show()","a1472780":"np.argmax(predictions_single[0])","bf0bb895":"### Evaluate accuracy\n\nNext, compare how the model performs on the test dataset:","27cdfcb1":"Let's look at the 0th image, predictions, and prediction array. Correct prediction labels are blue and incorrect prediction labels are red. The number gives the percentage (out of 100) for the predicted label.","cb63fc62":"As the model trains, the loss and accuracy metrics are displayed. This model reaches an accuracy of about 0.91 (or 91%) on the training data.","2140f449":"Loading the dataset returns four NumPy arrays:\n\n* The `train_images` and `train_labels` arrays are the *training set*\u2014the data the model uses to learn.\n* The model is tested against the *test set*, the `test_images`, and `test_labels` arrays.\n\nThe images are 28x28 NumPy arrays, with pixel values ranging from 0 to 255. The *labels* are an array of integers, ranging from 0 to 9. These correspond to the *class* of clothing the image represents:\n\n<table>\n  <tr>\n    <th>Label<\/th>\n    <th>Class<\/th>\n  <\/tr>\n  <tr>\n    <td>0<\/td>\n    <td>T-shirt\/top<\/td>\n  <\/tr>\n  <tr>\n    <td>1<\/td>\n    <td>Trouser<\/td>\n  <\/tr>\n    <tr>\n    <td>2<\/td>\n    <td>Pullover<\/td>\n  <\/tr>\n    <tr>\n    <td>3<\/td>\n    <td>Dress<\/td>\n  <\/tr>\n    <tr>\n    <td>4<\/td>\n    <td>Coat<\/td>\n  <\/tr>\n    <tr>\n    <td>5<\/td>\n    <td>Sandal<\/td>\n  <\/tr>\n    <tr>\n    <td>6<\/td>\n    <td>Shirt<\/td>\n  <\/tr>\n    <tr>\n    <td>7<\/td>\n    <td>Sneaker<\/td>\n  <\/tr>\n    <tr>\n    <td>8<\/td>\n    <td>Bag<\/td>\n  <\/tr>\n    <tr>\n    <td>9<\/td>\n    <td>Ankle boot<\/td>\n  <\/tr>\n<\/table>\n\nEach image is mapped to a single label. Since the *class names* are not included with the dataset, store them here to use later when plotting the images:","dcb846e0":"## Build the model\n\nBuilding the neural network requires configuring the layers of the model, then compiling the model.","b0a74424":"It turns out that the accuracy on the test dataset is a little less than the accuracy on the training dataset. This gap between training accuracy and test accuracy represents *overfitting*. Overfitting happens when a machine learning model performs worse on new, previously unseen inputs than it does on the training data. An overfitted model \"memorizes\" the noise and details in the training dataset to a point where it negatively impacts the performance of the model on the new data. For more information, see the following:\n*   [Demonstrate overfitting](https:\/\/www.tensorflow.org\/tutorials\/keras\/overfit_and_underfit#demonstrate_overfitting)\n*   [Strategies to prevent overfitting](https:\/\/www.tensorflow.org\/tutorials\/keras\/overfit_and_underfit#strategies_to_prevent_overfitting)","bc13616c":"## Preprocess the data\n\nThe data must be preprocessed before training the network. If you inspect the first image in the training set, you will see that the pixel values fall in the range of 0 to 255:","a657fc4c":"And the test set contains 10,000 images labels:","3d78c6cc":"## Use the trained model\n\nFinally, use the trained model to make a prediction about a single image.","c408c851":"Likewise, there are 60,000 labels in the training set:","855b20be":"This guide trains a neural network model to classify images of clothing, like sneakers and shirts. It's okay if you don't understand all the details; this is a fast-paced overview of a complete TensorFlow program with the details explained as you go.\n\nThis guide uses [tf.keras](https:\/\/www.tensorflow.org\/guide\/keras), a high-level API to build and train models in TensorFlow.","cef52fa5":"# Basic classification: Classify images of clothing","72c5bb84":"A prediction is an array of 10 numbers. They represent the model's \"confidence\" that the image corresponds to each of the 10 different articles of clothing. You can see which label has the highest confidence value:","810e05f5":"There are 10,000 images in the test set. Again, each image is represented as 28 x 28 pixels:","9da7848a":"So, the model is most confident that this image is an ankle boot, or `class_names[9]`. Examining the test label shows that this classification is correct:","886e4c9d":"### Make predictions\n\nWith the model trained, you can use it to make predictions about some images.\nThe model's linear outputs, [logits](https:\/\/developers.google.com\/machine-learning\/glossary#logits). Attach a softmax layer to convert the logits to probabilities, which are easier to interpret. ","21b1ba67":"This guide uses the [Fashion MNIST](https:\/\/github.com\/zalandoresearch\/fashion-mnist) dataset which contains 70,000 grayscale images in 10 categories. The images show individual articles of clothing at low resolution (28 by 28 pixels), as seen here:\n\n<table>\n  <tr><td>\n    <img src=\"https:\/\/tensorflow.org\/images\/fashion-mnist-sprite.png\"\n         alt=\"Fashion MNIST sprite\"  width=\"600\">\n  <\/td><\/tr>\n  <tr><td align=\"center\">\n    <b>Figure 1.<\/b> <a href=\"https:\/\/github.com\/zalandoresearch\/fashion-mnist\">Fashion-MNIST samples<\/a> (by Zalando, MIT License).<br\/>&nbsp;\n  <\/td><\/tr>\n<\/table>\n\nFashion MNIST is intended as a drop-in replacement for the classic [MNIST](http:\/\/yann.lecun.com\/exdb\/mnist\/) dataset\u2014often used as the \"Hello, World\" of machine learning programs for computer vision. The MNIST dataset contains images of handwritten digits (0, 1, 2, etc.) in a format identical to that of the articles of clothing you'll use here.\n\nThis guide uses Fashion MNIST for variety, and because it's a slightly more challenging problem than regular MNIST. Both datasets are relatively small and are used to verify that an algorithm works as expected. They're good starting points to test and debug code.\n\nHere, 60,000 images are used to train the network and 10,000 images to evaluate how accurately the network learned to classify images. You can access the Fashion MNIST directly from TensorFlow. Import and [load the Fashion MNIST data](https:\/\/www.tensorflow.org\/api_docs\/python\/tf\/keras\/datasets\/fashion_mnist\/load_data) directly from TensorFlow:","9e15af5f":"## Explore the data\n\nLet's explore the format of the dataset before training the model. The following shows there are 60,000 images in the training set, with each image represented as 28 x 28 pixels:","d074459f":"### Verify predictions\n\nWith the model trained, you can use it to make predictions about some images.","b43e4725":"Graph this to look at the full set of 10 class predictions.","79593ffc":"### Set up the layers\n\nThe basic building block of a neural network is the [*layer*](https:\/\/www.tensorflow.org\/api_docs\/python\/tf\/keras\/layers). Layers extract representations from the data fed into them. Hopefully, these representations are meaningful for the problem at hand.\n\nMost of deep learning consists of chaining together simple layers. Most layers, such as `tf.keras.layers.Dense`, have parameters that are learned during training.","a68ced0b":"Here, the model has predicted the label for each image in the testing set. Let's take a look at the first prediction:","e1901dd6":"The first layer in this network, `tf.keras.layers.Flatten`, transforms the format of the images from a two-dimensional array (of 28 by 28 pixels) to a one-dimensional array (of 28 * 28 = 784 pixels). Think of this layer as unstacking rows of pixels in the image and lining them up. This layer has no parameters to learn; it only reformats the data.\n\nAfter the pixels are flattened, the network consists of a sequence of two `tf.keras.layers.Dense` layers. These are densely connected, or fully connected, neural layers. The first `Dense` layer has 128 nodes (or neurons). The second (and last) layer returns a logits array with length of 10. Each node contains a score that indicates the current image belongs to one of the 10 classes.\n\n### Compile the model\n\nBefore the model is ready for training, it needs a few more settings. These are added during the model's [*compile*](https:\/\/www.tensorflow.org\/api_docs\/python\/tf\/keras\/Model#compile) step:\n\n* [*Loss function*](https:\/\/www.tensorflow.org\/api_docs\/python\/tf\/keras\/losses) \u2014This measures how accurate the model is during training. You want to minimize this function to \"steer\" the model in the right direction.\n* [*Optimizer*](https:\/\/www.tensorflow.org\/api_docs\/python\/tf\/keras\/optimizers) \u2014This is how the model is updated based on the data it sees and its loss function.\n* [*Metrics*](https:\/\/www.tensorflow.org\/api_docs\/python\/tf\/keras\/metrics) \u2014Used to monitor the training and testing steps. The following example uses *accuracy*, the fraction of the images that are correctly classified.","9c287984":"And the model predicts a label as expected.","54f7df69":"<table class=\"tfo-notebook-buttons\" align=\"left\">\n  <td>\n    <a target=\"_blank\" href=\"https:\/\/www.tensorflow.org\/tutorials\/keras\/classification\"><img src=\"https:\/\/www.tensorflow.org\/images\/tf_logo_32px.png\" \/>View on TensorFlow.org<\/a>\n  <\/td>\n  <td>\n    <a target=\"_blank\" href=\"https:\/\/colab.research.google.com\/github\/tensorflow\/docs\/blob\/master\/site\/en\/tutorials\/keras\/classification.ipynb\"><img src=\"https:\/\/www.tensorflow.org\/images\/colab_logo_32px.png\" \/>Run in Google Colab<\/a>\n  <\/td>\n  <td>\n    <a target=\"_blank\" href=\"https:\/\/github.com\/tensorflow\/docs\/blob\/master\/site\/en\/tutorials\/keras\/classification.ipynb\"><img src=\"https:\/\/www.tensorflow.org\/images\/GitHub-Mark-32px.png\" \/>View source on GitHub<\/a>\n  <\/td>\n  <td>\n    <a href=\"https:\/\/storage.googleapis.com\/tensorflow_docs\/docs\/site\/en\/tutorials\/keras\/classification.ipynb\"><img src=\"https:\/\/www.tensorflow.org\/images\/download_logo_32px.png\" \/>Download notebook<\/a>\n  <\/td>\n<\/table>","72fb8f92":"Scale these values to a range of 0 to 1 before feeding them to the neural network model. To do so, divide the values by 255. It's important that the *training set* and the *testing set* be preprocessed in the same way:","97381d8b":"`tf.keras` models are optimized to make predictions on a *batch*, or collection, of examples at once. Accordingly, even though you're using a single image, you need to add it to a list:","ab5ce2e5":"## Train the model\n\nTraining the neural network model requires the following steps:\n\n1. Feed the training data to the model. In this example, the training data is in the `train_images` and `train_labels` arrays.\n2. The model learns to associate images and labels.\n3. You ask the model to make predictions about a test set\u2014in this example, the `test_images` array.\n4. Verify that the predictions match the labels from the `test_labels` array.\n","ac4110e5":"Let's plot several images with their predictions. Note that the model can be wrong even when very confident.","eff55662":"## Import the Fashion MNIST dataset","87573b24":"Each label is an integer between 0 and 9:","f92bf2bb":"Now predict the correct label for this image:","2cc6400a":"`tf.keras.Model.predict` returns a list of lists\u2014one list for each image in the batch of data. Grab the predictions for our (only) image in the batch:","1cb9f107":"### Feed the model\n\nTo start training,  call the [`model.fit`](https:\/\/www.tensorflow.org\/api_docs\/python\/tf\/keras\/Model#fit) method\u2014so called because it \"fits\" the model to the training data:","3b5bbb75":"To verify that the data is in the correct format and that you're ready to build and train the network, let's display the first 25 images from the *training set* and display the class name below each image."}}