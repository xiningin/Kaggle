{"cell_type":{"c8d72e9d":"code","69c00057":"code","07230364":"code","58428096":"code","ac426d4e":"code","ba1a1e42":"code","8956e86a":"code","5c0f4fec":"code","0fd543de":"code","35f58086":"code","b730fe59":"code","e7b7fca9":"code","584e760c":"code","8b27aee0":"code","92b650e1":"code","97c6ab29":"code","d0ddf389":"code","6504bced":"code","a251cba1":"code","785a56c4":"code","44965c6f":"code","a8ae8052":"code","8a7d9aa4":"code","5236b26f":"code","2bb3851a":"code","05e78113":"code","b524790b":"code","deaf05a9":"code","f96baab3":"code","5e0d821b":"code","f7660a77":"markdown","b0410c97":"markdown","9fed1df5":"markdown","44ea654c":"markdown","42a4ecab":"markdown","b26e5c13":"markdown","5eac7003":"markdown","07647f74":"markdown"},"source":{"c8d72e9d":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\n%matplotlib inline\n# %load_ext autotime","69c00057":"# Load all data from file\nwith open('..\/input\/hashcode-drone-delivery\/busy_day.in','r') as fd:\n    # Load base params\n    rows, columns,drones,turns,max_payload = [ int(x) for x in fd.readline().split(' ')]\n    product_types_count = int(fd.readline())\n\n    # Products weights\n    arr_products_weights = np.empty(product_types_count, dtype = \"int32\")\n    weights = fd.readline().split(' ')\n    for i in range(0,product_types_count):\n        arr_products_weights[i] = int(weights[i])\n\n    # stock\n    warehouses_count = int(fd.readline())\n    arr_warehouses_locations = np.empty((warehouses_count,2), dtype=\"int32\")\n    arr_inventories = np.empty((product_types_count,warehouses_count), dtype = 'int32')\n    for i in range(warehouses_count):\n        arr_warehouses_locations[i,:] = [ int(x) for x in fd.readline().split(' ')]\n        arr_inventories[:,i] = [ int(x) for x in fd.readline().split(' ')]\n    df_warehouses_locations = pd.DataFrame(arr_warehouses_locations,columns=['row','column'])\n    df_inventories = pd.DataFrame(arr_inventories, columns = [x for x in range(warehouses_count)])\n\n    # orders\n    orders_count = int(fd.readline())\n    arr_orders = np.empty((orders_count,3),'int32')\n    df_orders_inventory = pd.DataFrame(columns=[\"order_id\",\"product_id\",\"product_count\"], dtype='int32')\n    for i in range(orders_count):\n        # orders table\n        row,column = [int(x) for x in fd.readline().split(' ')]\n        items_count = int(fd.readline())\n        arr_orders[i,:] = row,column,items_count\n        # orders items table\n        order_items = [ int(x) for x in fd.readline().split(' ')]\n        product_ids, product_counts = np.unique(order_items,return_counts = True)\n        arr_order_items = np.empty((len(product_ids),3),'int32')\n        arr_order_items[:,0] = i # set order id for all rows\n        arr_order_items[:,1] = product_ids\n        arr_order_items[:,2] = product_counts\n        df_order_items=pd.DataFrame(arr_order_items, columns = [\"order_id\",\"product_id\",\"product_count\"])\n        df_orders_inventory = df_orders_inventory.append(df_order_items,ignore_index=True)\n    df_orders = pd.DataFrame(arr_orders, columns = [\"row\",\"column\",\"items_count\"])","07230364":"df_orders.head()","58428096":"# Helper table  - distances between all orders\ndf_orders_dist = pd.DataFrame(columns = df_orders.index,index = df_orders.index)\nfor order_no in df_orders.index:\n    r1 = df_orders[\"row\"].loc[order_no]\n    c1 = df_orders[\"column\"].loc[order_no]\n    r2 = df_orders[\"row\"]\n    c2 = df_orders[\"column\"]\n    arr_dists = ((r1 - r2)**2 + (c1 - c2)**2  )**0.5\n    df_orders_dist.loc[order_no] = arr_dists\ndf_orders_dist","ac426d4e":"# convenient unit of weight - a share of the drone's maximum load\n# calculate the weights of all orders in these units\narr_orders_weight = np.empty(orders_count,'float64')\nfor order_id in range(orders_count):\n    order_items = df_orders_inventory[df_orders_inventory['order_id'] == order_id]\n    order_weight = np.sum(arr_products_weights[order_items['product_id']] * \\\n                    order_items['product_count'])\/ \\\n                  float(max_payload)\n    arr_orders_weight[order_id] = order_weight\ndf_orders['weight'] = arr_orders_weight","ba1a1e42":"# Let's estimate - for how many drone flights can orders be delivered in current data?\ndf_orders['weight'].hist(bins=50)","8956e86a":"# Render the map:\n# how are warehouses and orders distributed on the map?\nplt.scatter(df_orders['row'],df_orders['column'],c='blue',marker=\".\",label='orders')\nplt.scatter(arr_warehouses_locations[:,0],arr_warehouses_locations[:,1],c='red',label='warehouses')\nplt.legend()\nplt.grid()\nfig = plt.gcf()\nfig.set_size_inches(15, 10)\n","5c0f4fec":"# Which warehouses are the most loaded in terms of the number of goods in pieces?\nprint(df_inventories.sum(axis=0))","0fd543de":"# we calculate for each order and add the distance to each of the warehouses \n# save results in the orders table so that later you can quickly sort by them\n# add columns like wh_0, wh_1 and so on\n\nfor wh in df_warehouses_locations.index:\n    df_orders['wh_'+str(wh)] = ((df_orders['row'] - df_warehouses_locations['row'][wh]) ** 2 + (df_orders['column'] - df_warehouses_locations['column'][wh]) ** 2)**0.5\n# total distance from each warehouse to all orders we have\ndf_orders[[\"wh_%d\" % wh_id for wh_id in range(warehouses_count)]].sum(axis=0)","35f58086":"# reservation procedure\n# table for account non reserved inventory in warehouses\ndf_inventories_nonreserved = df_inventories.copy()\ndf_orders_inventory['reserved'] = 0\n# main reserve table - for a start it is empty\ndf_reserve = pd.DataFrame(columns = [\"order_id\",\"warehouse_id\",\"product_id\",\"amount\",\"distance\"],dtype=\"int32\")\nwarehouse_id = 0\nfor warehouse_id in range(warehouses_count):\n    # get all available goods on the warehouse\n    wh_inventories = df_inventories[warehouse_id][df_inventories[warehouse_id] > 0]\n    # iterate over each available product on warehouse\n    for prod_id in wh_inventories.index:\n        prod_amount = wh_inventories[prod_id]\n        # find orders line records need this product and not reserved yet\n        # we kno the only line for one product can be in this table\n        orders = df_orders_inventory[(df_orders_inventory['product_id'] == prod_id) & \\\n                ((df_orders_inventory['product_count']- df_orders_inventory['reserved'] ) > 0)]\n        # join to our dataframe distance info - from this warehouse to the order\n        dist_orders = pd.merge(orders,df_orders,left_on='order_id',right_index=True,how='left') \\\n           [['order_id','product_id','product_count','reserved','wh_' + str(warehouse_id)]]\n        # order invenory records by distance - more closer first\n        ordered_dist_orders = dist_orders.sort_values(by=['wh_' + str(warehouse_id)], ascending=True)\n        # iterate over inventory records from closer to farther and make reservation for them\n        for order in ordered_dist_orders.iterrows():\n            need_for_reserve = int(order[1]['product_count'] - order[1]['reserved'])\n            order_order_id = order[1]['order_id']\n            # calculate amount for reserve this product for the order\n            available = df_inventories_nonreserved[warehouse_id][prod_id]\n            if(available < need_for_reserve):\n                # we can reserve available amount\n                reserve_amount = available\n            else:\n                # we can reserve needed amount\n                reserve_amount = need_for_reserve\n            # add a record to reserve table    \n            df_reserve = df_reserve.append({'order_id':order_order_id, \\\n                'warehouse_id':warehouse_id, \\\n                'product_id':prod_id, \\\n                'amount':reserve_amount, \\\n                'distance':order[1]['wh_'+str(warehouse_id)]}, ignore_index=True)\n\n            # note reserve in df_orders_inventory\n            # first find order line using product_id and order_id\n            inventory_index = df_orders_inventory[(df_orders_inventory['order_id'] == order_order_id) & \\\n                (df_orders_inventory['product_id'] == prod_id)].index[0]\n            \n            df_orders_inventory.at[inventory_index,'reserved'] += reserve_amount\n            # decreace available warehouse amount df_inventories_nonreserved\n            df_inventories_nonreserved[warehouse_id][prod_id] -= reserve_amount\n            # if product is finishes get to the next one\n            if df_inventories_nonreserved[warehouse_id][prod_id] == 0:\n                break","b730fe59":"# Check reservation was correct\ntotal_reserved_1 = (df_inventories.sum() - df_inventories_nonreserved.sum()).sum()\ntotal_reserved_2 = df_reserve['amount'].sum()\ntotal_reserved_3 = df_orders_inventory['reserved'].sum()\nprint(total_reserved_1,total_reserved_2,total_reserved_3)\nif(total_reserved_1 == total_reserved_2 == total_reserved_3):\n    print(\"First check looks good\")\nelse:\n    print(\"First check looks wrong\")\n\nreserve_diff = df_orders_inventory[df_orders_inventory['product_count'] != df_orders_inventory['reserved']]\nif(len(reserve_diff) == 0):\n    print(\"Second check looks good\")\nelse:\n    print(\"Second check looks wrong\")\n    print(reserve_diff)\n","e7b7fca9":"# We estimate the total distance of all reserves from the warehouse where they are made\nfor wh_id in range(warehouses_count):\n    reserves = df_reserve[df_reserve['warehouse_id'] == wh_id]\n    distance = reserves['distance'].sum()\n    print(\"For warehouse %s distance is %s \" % (wh_id, distance))\n    ","584e760c":"# TODO - visualize by reserves - for which warehouses which reserves are assigned \n# to visually assess the optimality","8b27aee0":"# attach the row and count columns from df_orders to the reserves so that we can quickly calculate the distance\ndf_reserve = pd.merge(df_reserve,df_orders[['row','column']],left_on='order_id',right_index=True,how='left')\n# for a start planned reserves is 0 0\ndf_reserve['planned'] = 0\n# Start from route number 0. After we finish to plan route increment route_index\nroute_index = 0\n\n","92b650e1":"import warnings\nwarnings.filterwarnings('ignore')\n\n# Join item_weight column to df_reserve based on product_id and product weights table\narr_prod_ids = np.array(df_reserve['product_id'].values,dtype=\"int\")\ndf_reserve['product_item_weight'] = arr_products_weights[arr_prod_ids]\/float(max_payload)\n\n# table route\/reserve connection - a lot of things - so that everything that is needed when we program the drones\ndf_reserve_route = pd.DataFrame(columns=[\"reserve_id\",\"warehouse_id\",\"route_id\",\"order_id\",\"row\",\"column\",\"product_id\",\"amount\",\"item_weight\"])\n\nfor wh_id in range(warehouses_count):\n    df_wh_reserves = df_reserve[df_reserve['warehouse_id'] == wh_id].sort_values('distance')\n    # Loop - while there are unplanned reserves for this warehouse\n    while(df_wh_reserves['amount'].sum() > df_wh_reserves['planned'].sum()):\n        # planning one route\n        # initial carrying capacity of the route\n        route_workload = 1\n\n        # Flag: remaining orders are not far\n        orders_not_far = True\n        reserve_no = 0\n        # loop - until we have goods that fit into the route AND the remaining orders are close enough\n        while(len(df_wh_reserves[df_wh_reserves['amount'] > df_wh_reserves['planned']]\n                   [df_wh_reserves['product_item_weight'] <= route_workload] > 0)):\n            # unplanned reserves that remain\n            df_res_not_planned = df_wh_reserves[df_wh_reserves['amount'] > df_wh_reserves['planned']]\\\n                [df_wh_reserves['product_item_weight'] <= route_workload]\n\n            if(not reserve_no): # first order in the route\n                from_row,from_col = df_warehouses_locations.loc[wh_id]\n\n            # determine the closest reserve\n            df_res_not_planned['distance'] = ((from_row-df_res_not_planned['row'])**2 \n                                            + (from_col-df_res_not_planned['column'])**2)**0.5\n            nearest_reserve = df_res_not_planned.sort_values('distance').iloc[0]\n            # if the distance to the nearest reserve is greater than the specified limit, \n            # we finish planning\n            # TODO 40 it the constant by which we decide that the remaining orders are far away, \n            # can be optimized\n            if(nearest_reserve.distance > 40 and reserve_no != 0):\n                orders_not_far = False\n                reserve_no += 1\n                break\n            # the number of units of goods from the reserve that will fit into the drone\n            space_available = route_workload \/\/ nearest_reserve.product_item_weight\n            # how much will we load\n            amount_for_load = min([space_available,nearest_reserve.amount - nearest_reserve.planned])\n            route_link = {\n                \"reserve_id\": nearest_reserve.name,\n                \"warehouse_id\": wh_id,\n                \"route_id\" : route_index,\n                \"order_id\" : nearest_reserve.order_id,\n                \"row\" : nearest_reserve.row,\n                \"column\" : nearest_reserve.column,\n                \"product_id\" : nearest_reserve.product_id,\n                \"amount\" : amount_for_load,\n                \"item_weight\" : nearest_reserve.product_item_weight\n            }\n            route_workload -= amount_for_load*nearest_reserve.product_item_weight\n            # Writing to the link table\n            df_reserve_route = df_reserve_route.append(route_link,ignore_index = True)\n            # in the table of reserves, we increase the planned by the reserve by amount_for_load\n            df_wh_reserves.at[nearest_reserve.name,\"planned\"] = df_wh_reserves.at[nearest_reserve.name,\"planned\"] + amount_for_load\n            df_reserve.at[nearest_reserve.name,\"planned\"] = df_wh_reserves.at[nearest_reserve.name,\"planned\"]\n            from_row,from_col = nearest_reserve[['row','column']]\n            reserve_no += 1\n        route_index += 1\n    ","97c6ab29":"# Let's check that we have compiled the routes correctly\nfor wh_id in range(warehouses_count):\n    print(\"Checks for warehouse %s \" % wh_id)\n    if (df_reserve[df_reserve[\"warehouse_id\"] == wh_id]['planned'].sum() == \n        df_reserve[df_reserve[\"warehouse_id\"] == wh_id]['amount'].sum()):\n        print(\"First check well\")\n    else:\n        print(\"First check fails planned sum = %s amound = %s\"%\n              (df_reserve[df_reserve[\"warehouse_id\"] == wh_id]['planned'].sum(),\n              df_reserve[df_reserve[\"warehouse_id\"] == wh_id]['amount'].sum()))\n    if(df_reserve_route[df_reserve_route['warehouse_id'] == wh_id]['amount'].sum() == \n           df_reserve[df_reserve[\"warehouse_id\"] == wh_id]['planned'].sum()):\n        print(\"Second check well\")\n    else:\n        print(\"Second check fails. Reserve route has %s items, but df_reserve has %s\"%\n             (df_reserve_route[df_reserve_route['warehouse_id'] == wh_id]['amount'].sum(),\n             df_reserve[df_reserve[\"warehouse_id\"] == wh_id]['planned'].sum()))\n        \n    if(set(df_reserve_route[df_reserve_route[\"warehouse_id\"] == wh_id]['order_id']) == set(df_reserve[df_reserve['warehouse_id'] == wh_id]['order_id'])):\n        print(\"Third check well\")\n    else:\n        print(\"Third check fails df_reserve router orders are not equal to df_reserve orders\")\n","d0ddf389":"# Preliminary preparation\nroute_ids = set(df_reserve_route['route_id'])\ndf_routes = pd.DataFrame(index = route_ids, columns=['weight','distance','warehouse_id','drone_id'])\n# estimate the total weight in routes\ndf_reserve_route['reserve_weight'] = df_reserve_route['amount'] * df_reserve_route['item_weight']\n# we group reserves \/ routes by routes, adding up the total weight\nreserve_weight = df_reserve_route[['route_id','reserve_weight']].groupby('route_id').sum()\n# push the resulting weight into df_routes\ndf_routes['weight'] = reserve_weight\n# estimate of the drone load obtained during the reservation: how much drones are filled in routes\nreserve_weight.hist(bins = 100)\n","6504bced":"#visual assessment of what routes we got (reserves distributed along routes)\ndf_reserve_route.sort_values('route_id').head(20)\n","a251cba1":"# count the total number of turns for each route in order to evenly distribute the routes among the drones\nfor route in df_routes.index:\n    # take route reserves\n    r_reserve = df_reserve_route[df_reserve_route['route_id'] == route]\n    # warehouse coordinates - from here we fly out and here we return\n    wh_id = r_reserve['warehouse_id'].iloc[0]\n    wh_row,wh_col = df_warehouses_locations.loc[wh_id]\n    # get the coordinates of the reserve and group them by orders\n    df_orders_locations = r_reserve[[\"order_id\",\"row\",\"column\"]].groupby('order_id').mean()\n    # calculate how many turns the route will take\n    arr_points = np.zeros((df_orders_locations.shape[0]+3,4))\n    arr_points[1:-2,:2] = np.array(df_orders_locations)\n    arr_points[[0,-2],:2] = wh_row,wh_col\n    arr_points[1:,2:] = arr_points[:-1,:2]\n    mat = arr_points[1:-1,:]\n    full_dist = np.sum(np.ceil(((mat[:,0]-mat[:,2])**2 + (mat[:,1] - mat[:,3])**2)**0.5))\n    # add turns to load \/ unload\n    # TODO did not take into account here that one turn is needed for unloading and \n    # loading for each product - not critical, but it can be done\n    full_dist += full_dist + df_orders_locations.shape[0]+1\n    # save what we counted\n    df_routes.at[route,['distance','warehouse_id']] = full_dist,wh_id\n","785a56c4":"# turns by warehouses\ndf_wh_turns = df_routes[['warehouse_id','distance']].groupby('warehouse_id').sum()\n# Do we manage to distribute all orders with existing drones \n# for the number of turns given to us?\ndf_wh_turns.sum().distance \/ (drones*turns)","44965c6f":"# count the number of drones associated with warehouses in proportion to the total distance of routes of the same warehouses\ndf_wh_turns['share'] = df_wh_turns['distance']\/df_wh_turns.distance.sum()\ndf_wh_turns['drones'] = np.floor(df_wh_turns['share']*drones)\nrest_drone_amount = int(drones - df_wh_turns['drones'].sum())\nrest_indexes = df_wh_turns.sort_values('distance',ascending=False).iloc[:rest_drone_amount].index.values\nrest_indexes\ndf_wh_turns.at[rest_indexes,'drones'] = df_wh_turns.loc[rest_indexes,'drones'] +1\n\n# sign for assigning drones to warehouses\ndf_wh_drones = pd.DataFrame(index = range(drones),columns = [\"wh_id\"])\ndf_wh_drones['wh_id'] = [ wh_id for wh_id in range(warehouses_count) for c in range(int(df_wh_turns.loc[wh_id].drones)) ]","a8ae8052":"# we carry out planning for each warehouse and associated drones\n# we plan to simultaneously spread orders between drones in this way, \n# so that all drones first carry quick orders, then slow.\nfor wh_id in range(warehouses_count):\n    # the total number of routes in the warehouse is divided by rounding up by the number of fixed drones\n    route_per_drone = np.ceil(len(df_routes[df_routes.warehouse_id == wh_id] ) \/ df_wh_turns.loc[wh_id].drones)\n    # we multiply the array with drone IDs for the given warehouse the resulting number of times and cut the result to the total number of routes in the warehouse\n    # assign the resulting list of drone IDs to routes for this warehouse\n    arr_drones = df_wh_drones[df_wh_drones.wh_id == wh_id].index.values\n    arr2 = np.zeros((int(route_per_drone),len(arr_drones)))\n    arr2[:,:] = arr_drones\n    df_routes.loc[df_routes.warehouse_id == wh_id,['drone_id']] = \\\n        arr2.flatten()[:len(df_routes[df_routes.warehouse_id == wh_id] )]\n    \n    ","8a7d9aa4":"# check - do all routes have drones?\nlen(df_routes[df_routes.drone_id.isnull()])","5236b26f":"# we estimate turns by drones - to see who finishes earlier - who later\ndf_routes[['distance','drone_id']].groupby(\"drone_id\").sum().plot()","2bb3851a":"# Planned drone distances\ndrone_distances = df_routes[['distance','drone_id']].groupby(\"drone_id\").sum().values\n# distance spread estimation\nnp.std(drone_distances)\/np.median(drone_distances)","05e78113":"while True:\n    df_drone_distances = df_routes[['distance','drone_id']].groupby(\"drone_id\").sum().sort_values('distance', ascending=False)\n    most_loaded_drone = df_drone_distances.iloc[0]\n    least_loaded_drone = df_drone_distances.iloc[-1]\n    distance_diff = most_loaded_drone.values - least_loaded_drone.values\n\n    # tail of the most loaded drone starting at least_loaded_drone.values\n    df_routes_drone = df_routes[df_routes.drone_id == most_loaded_drone.name]\n    df_routes_drone['dist_cum'] = df_routes_drone['distance'].cumsum()\n    extra_routes = df_routes_drone[df_routes_drone.dist_cum > least_loaded_drone.values[0]]\n\n    # the tail must be divided into 4 parts - and then - leave one alone and the other three removed and added\n    # to the drones that are less loaded\n    dist_ranges = np.linspace(extra_routes.iloc[0].dist_cum,extra_routes.iloc[-1].dist_cum,5)\n    # for three pieces of tail\n    for i in range(3):\n        # routes of the next piece\n        part_routes = df_routes_drone[(df_routes_drone.dist_cum > (dist_ranges[i+1])) & \\\n                                      (df_routes_drone.dist_cum < (dist_ranges[i+2]))].index\n        # we take the least loaded drones for reloading\n        reload_drone_id = df_drone_distances.iloc[-(i+1)].name\n        # add routes to the selected drone. to do this, set drone_id to the id of this drone in df_routes\n        df_routes.loc[part_routes,\"drone_id\"] = reload_drone_id\n    # Planned drone distances\n    drone_distances = df_routes[['distance','drone_id']].groupby(\"drone_id\").sum().values\n    # distance spread estimation\n    deviation = np.std(drone_distances)\/np.median(drone_distances)\n    print(\"Deviation: %s Extra routes len: %s \" % (deviation,len(extra_routes)))\n    if(deviation < 0.02):\n        break\n    ","b524790b":"# check - all routes have drones\nlen(df_routes[df_routes.drone_id.isnull()]),len(df_routes)","deaf05a9":"# we estimate the turnover by drones it is clear that in general the situation is better than it was before\ndf_routes[['distance','drone_id']].groupby(\"drone_id\").sum().plot()","f96baab3":"# For each of the routes in df_routes, we form a set of lines - commands.\n# Add the lines to the final list of lines\ncommands = []\nfor route_id in df_routes.index:\n    p_route = df_reserve_route[df_reserve_route.route_id == route_id]\n    drone_id = df_routes.loc[route_id].drone_id\n    \n    # Load command - for each position in the route\n    for p_reserve in p_route.iterrows():\n        command =\"%d L %d %d %d\" % (drone_id,\n                                    p_reserve[1]['warehouse_id'],\n                                    p_reserve[1]['product_id'],\n                                    p_reserve[1]['amount'])\n        commands.append(command)\n    # Deliver commands - for each position in the route\n    for p_reserve in p_route.iterrows():\n        command = \"%d D %d %d %d\" % (drone_id,\n                                    p_reserve[1]['order_id'],\n                                    p_reserve[1]['product_id'],\n                                    p_reserve[1]['amount'])\n        commands.append(command)","5e0d821b":"# We put the number of commands and the commands themselves for all drones in the submission.out file\ntotal_commands = len(commands)\nwith open('.\/submission.csv','w') as f:\n    f.write(\"%d\\n\" % total_commands)\n    for command in commands:\n        f.write(\"%s\\n\" % command)","f7660a77":"# Lay out routes by drones\nCalculate the total distance for each route\nCreate a table with routes where the index will be the set from df_reserve_route and the columns will be:\n- total weight in the route (to check and assess the quality of planning - should be less than 1)\n- total mileage between all points of the route (including return to warehouse + steps of loading and unloading)\n- warehouse number\n- drone number\n\nWeigh the resulting routes by warehouses - that is, how many kilometers of the route are there for each warehouse\n\nDistribute existing drones proportionally across warehouses\n\nEstimate how much we can deliver from the total volume of orders\n\nDistribute routes to drones","b0410c97":"# General approach to solution\n\n1. We will reserve all goods in warehouses for specific orders, we will receive a table with reserves\n2. We will calcalute drone routes that will contain specific deliveries of reserves\n3. Distribute routes between existing drones\n4. Write a program for the drones and prepare the submission\n\n\n### Reservation procedure\nWe move based on warehouses and the goods available on them.\nFor each product in the warehouse - we are looking for orders closest to the warehouse with this product and form a reserve\n","9fed1df5":"# how reservation works\nReservations are made by warehouses: we distribute the goods available in warehouses according to the orders closest to the warehouses\n- We make a table with reserves - each record in the table will contain: order ID, warehouse ID, product ID, amount\n- The df_inventories_nonreserved table stores the quantity of unreserved goods by warehouses\n- For processing speed and the possibility of checking the correctness of the reserve, we save the record about the reserve in\n   - df_orders_inventory ['reserved'] - increase the reserved amount\n   - df_inventories_nonreserved - decrease the reserved amoun\n    \nFor each warehouse:\n  for each product with its stock:\n  - we extract from the df_orders_inventory table the records with this product in which the product_count-reserved is greater than 0\n  - join the resulting table with the order table using the order ID key - attach the column here - the distance to the warehouse\n  - we sort the resulting table in ascending order of distance to the warehouse - that is, we get the nearest orders that the warehouse can serve\n  - we take the top lines of the table and make reserves for them\n    Thus, we got the lines of which we need to make reserves\n    For each such line:\n    - add an entry to the table with reserves\n    - increase reserved in the original plate df_orders_inventory\n    - we decrease the quantity of this product in this warehouse by df_inventories_nonreserved","44ea654c":"# Drone Mutual Aid\nThe first distribution gives a high spread - that is, if everything is left like this, then some drones will finish earlier, while others will work additionally the same amount of time compared to those who finished\n\nThis is unfair and let those who finished earlier help those who did a lot of work.\n\n## Algorithm\n\nGrab the busiest drone and grab the least loaded drone based on the range of all connected routes. Subtract the shortest mileage from the longest\n\nWe take the tail of the routes from the most loaded drone (starting with the minimum mileage from the previous point) and divide it between 4 drones - three of which are the least loaded\n\nWe try to distribute the division of routes not by quantity, but by the same mileage for all 4 drones\n\nWe repeat the procedure until the estimate of the spread is set to 0.02","42a4ecab":"# Prepare submission\n","b26e5c13":"# Let's first look at the data","5eac7003":"# Divide drones between warehouses and distribute routes among drones\n- we need all drones to deliver the fastest orders first and then the slowest ones from all warehouses\n- it is necessary that all drones are loaded evenly and all work until the end of the simulation\n- when the drone has finished delivering goods in its warehouse - it can help deliver goods from someone else's\n\n## implementation\n- we count the number of drones associated with warehouses in proportion to the mileage of routes from the same warehouses\n- we make a table with drones - where we do the initial assignment of drones to warehouses\n\n\n- we carry out planning for each warehouse and associated drones\n- we plan to simultaneously scatter orders between drones - in such a way that all drones would first carry quick orders, then slowes ones.","07647f74":"# Thoughts on route planning\n- most of the orders - exceed the drone's carrying capacity - this means there is no point in complex algorithms for constructing a route graph - there will not be many points in any route\n- it is necessary first of all to take away small orders and then larger ones\n- it is necessary first of all to take away the closest orders and then the most distant ones\n- the denser we load goods into the drone, the faster we will deliver everything - drones should leave the warehouses with the maximum load\n\n## algorithm\n- we choose the nearest unplanned reserve, and we plan an order for the route\n- if there is room left in the drone:\n     - select the 10 closest reserves to the current one and look for one that fits in the remaining space in the drone\n     - planning it\n     - repeat until there is room in the drone\n\n## implementation of the routes formation\n- initial drone capacity in the route sheet = 1\n- filter by product_item_weight and available load capacity unplanned reserves - if the list is empty - close the route\n- if the reserve is the first in the route:\n  - we take the goods closest to the warehouse and plan it (we include as many units in the route as it will fit)\n- if the reserve is not the first:\n    - calculate the distance to everything else from the previous reserve\n    - we discard everything that exceeds 1\/10 of the map in distance - if as a result the list is empty - we close the route. there is no point in making big flights\n    - we sort by distance to the last reserve what we have selected.\n    - select the product closest to the last reserve and add it to the route.\n\n"}}