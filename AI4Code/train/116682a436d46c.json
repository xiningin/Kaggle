{"cell_type":{"6f9feb1b":"code","49705d96":"code","0c064660":"code","c00c0b02":"code","50e1181d":"code","9ca021bb":"code","a9190a40":"code","0c99c2db":"code","93ec9b8b":"code","ad33b3fb":"code","d149e42c":"code","ff3cbd31":"code","50896b5d":"code","3314126e":"code","2b216ba1":"code","dcdb847a":"code","69196420":"code","dfe789f3":"code","7c334d04":"code","65ccda61":"code","5ec5983f":"code","b6c8f6c8":"code","ee2fe652":"code","1d695457":"code","c2521fa9":"code","5ee06792":"code","934acc2b":"markdown","ab628cfa":"markdown","47cc7b72":"markdown","c198698b":"markdown","58b9163d":"markdown","e1f47141":"markdown","203b3efd":"markdown"},"source":{"6f9feb1b":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","49705d96":"messages=pd.read_csv('..\/input\/spam-ham-dataset\/spamhamdata.csv',sep='\\t',names=[\"label\",\"message\"])","0c064660":"messages.head()","c00c0b02":"import nltk\nnltk.download('stopwords')","50e1181d":"import re","9ca021bb":"from nltk.stem import PorterStemmer\nfrom nltk.corpus import stopwords\nfrom nltk.stem import WordNetLemmatizer\nps=PorterStemmer()\nlemmatizer=WordNetLemmatizer()","a9190a40":"corpus=[]\nfor i in range(0,len(messages)):\n    review=re.sub('[^a-zA-Z]',' ',messages['message'][i])\n    review=review.lower()\n    review=review.split()\n    review=[lemmatizer.lemmatize(word) for word in review if not word in stopwords.words('english')]\n    review=' '.join(review)\n    corpus.append(review)","0c99c2db":"corpus","93ec9b8b":"len(corpus)","ad33b3fb":"from sklearn.feature_extraction.text import CountVectorizer\ncv=CountVectorizer(max_features=2500)\nx=cv.fit_transform(corpus).toarray()","d149e42c":"x.shape","ff3cbd31":"y=pd.get_dummies(messages['label'])","50896b5d":"y","3314126e":"y=y.iloc[:,1].values","2b216ba1":"type(y)","dcdb847a":"from sklearn.model_selection import train_test_split\nxtrain,xtest,ytrain,ytest=train_test_split(x,y,test_size=0.20,random_state=1)","69196420":"from sklearn.naive_bayes import MultinomialNB","dfe789f3":"model = MultinomialNB().fit(xtrain,ytrain)","7c334d04":"ypred=model.predict(xtest)","65ccda61":"from sklearn.metrics import accuracy_score","5ec5983f":"accuracy_score(ypred,ytest)*100","b6c8f6c8":"from sklearn.metrics import confusion_matrix\nprint(confusion_matrix(ypred,ytest))","ee2fe652":"msg=[\"Hey I got this free, click here to win the lottery\"]","1d695457":"ab=['Hi I am bagavathy priya']","c2521fa9":"X=cv.transform(msg).toarray()","5ee06792":"model.predict(X)","934acc2b":"**The model works pretty good on the other data too**","ab628cfa":"# Model creation using Naive Bayes classifier","47cc7b72":"# Data cleaning and processing","c198698b":"**The model has a good accuracy and predicting well on the test data too**","58b9163d":"# Bag of words","e1f47141":"# Train test split\n","203b3efd":"# Testing"}}