{"cell_type":{"c964b637":"code","b70df1b4":"code","ba15a96f":"code","09e51748":"code","5dc6e370":"code","fea90726":"code","56feb919":"code","83c72cbb":"code","3c4d8287":"code","a88dc43d":"code","ed934f15":"code","1b367d60":"code","81733ca6":"code","7e0e5a54":"code","4702f6be":"code","c6949f14":"code","a5d63518":"code","f0470cc5":"code","8cb4187c":"code","7a1afc4e":"code","1df55d4d":"code","eabc475f":"code","25108136":"code","cd141002":"code","78cb6a9b":"code","7fa7a763":"code","47c6889b":"code","1b158b1e":"code","f9b07b1b":"markdown","f5044667":"markdown","11b502cb":"markdown","9d6a6a5d":"markdown","5a97ec64":"markdown","22763d8b":"markdown","9bfe830c":"markdown","c90ed2c8":"markdown","bfb0763e":"markdown","5f887282":"markdown","8541dd3a":"markdown","02dd4589":"markdown","2e47c2f8":"markdown","a5f6dbbf":"markdown","1f43365b":"markdown","02f2f11f":"markdown","ca71e406":"markdown","5790f6e8":"markdown"},"source":{"c964b637":"!pip install --upgrade seaborn","b70df1b4":"import numpy as np, pandas as pd\nfrom glob import glob\nimport shutil, os\nimport matplotlib.pyplot as plt\nfrom sklearn.model_selection import GroupKFold\nfrom tqdm.notebook import tqdm\nimport seaborn as sns","ba15a96f":"dim = 512 #512, 256, 'original'\nfold = 2","09e51748":"train_df = pd.read_csv('..\/input\/xml-train-csv\/train_df.csv')\ntrain_df.head()\ntrain_df['class_id']=0","5dc6e370":"for i in range(train_df.shape[0]):\n    if train_df.loc[i,'name'] == 'heart':\n        train_df.loc[i,'class_id'] = 0\n    if train_df.loc[i,'name'] == 'lung_1':\n        train_df.loc[i,'class_id'] = 1\n    if train_df.loc[i,'name'] == 'lung_2':\n        train_df.loc[i,'class_id'] = 2","fea90726":"train_df['image_path'] = f'\/kaggle\/input\/vinbigdata-{dim}-image-dataset\/vinbigdata\/train\/'+train_df.filename+('.png' if dim!='original' else '.jpg')\ntrain_df.head()","56feb919":"#train_df = train_df[train_df.class_id!=14].reset_index(drop = True)","83c72cbb":"train_df['xmin'] = train_df.apply(lambda row: (row.xmin)\/row.width, axis =1)\ntrain_df['ymin'] = train_df.apply(lambda row: (row.ymin)\/row.height, axis =1)\n\ntrain_df['xmax'] = train_df.apply(lambda row: (row.xmax)\/row.width, axis =1)\ntrain_df['ymax'] = train_df.apply(lambda row: (row.ymax)\/row.height, axis =1)\n\ntrain_df['xmid'] = train_df.apply(lambda row: (row.xmax+row.xmin)\/2, axis =1)\ntrain_df['ymid'] = train_df.apply(lambda row: (row.ymax+row.ymin)\/2, axis =1)\n\ntrain_df['w'] = train_df.apply(lambda row: (row.xmax-row.xmin), axis =1)\ntrain_df['h'] = train_df.apply(lambda row: (row.ymax-row.ymin), axis =1)\n\ntrain_df['area'] = train_df['w']*train_df['h']\ntrain_df.head()","3c4d8287":"features = ['xmin', 'ymin', 'xmax', 'ymax', 'xmid', 'ymid', 'w', 'h', 'area']\nX = train_df[features]\ny = train_df['name']\nX.shape, y.shape","a88dc43d":"class_ids, class_names = list(zip(*set(zip(train_df.class_id, train_df.name))))\nclasses = list(np.array(class_names)[np.argsort(class_ids)])\nclasses = list(map(lambda x: str(x), classes))\nclasses","ed934f15":"gkf  = GroupKFold(n_splits = 5)\ntrain_df['fold'] = -1\nfor fold, (train_idx, val_idx) in enumerate(gkf.split(train_df, groups = train_df.filename.tolist())):\n    train_df.loc[val_idx, 'fold'] = fold\ntrain_df.head()","1b367d60":"train_df.loc[0,'image_path']","81733ca6":"train_files = []\nval_files   = []\nval_files += list(train_df[train_df.fold==fold].image_path.unique())\ntrain_files += list(train_df[train_df.fold!=fold].image_path.unique())\nlen(train_files), len(val_files)","7e0e5a54":"os.makedirs('\/kaggle\/working\/vinbigdata\/labels\/train', exist_ok = True)\nos.makedirs('\/kaggle\/working\/vinbigdata\/labels\/val', exist_ok = True)\nos.makedirs('\/kaggle\/working\/vinbigdata\/images\/train', exist_ok = True)\nos.makedirs('\/kaggle\/working\/vinbigdata\/images\/val', exist_ok = True)\nlabel_dir = '\/kaggle\/input\/vinbigdata-txt-yolov5\/label'\nfor file in tqdm(train_files):\n    shutil.copy(file, '\/kaggle\/working\/vinbigdata\/images\/train')\n    filename = file.split('\/')[-1].split('.')[0]\n    shutil.copy(os.path.join(label_dir, filename+'.txt'), '\/kaggle\/working\/vinbigdata\/labels\/train')\n    \nfor file in tqdm(val_files):\n    shutil.copy(file, '\/kaggle\/working\/vinbigdata\/images\/val')\n    filename = file.split('\/')[-1].split('.')[0]\n    shutil.copy(os.path.join(label_dir, filename+'.txt'), '\/kaggle\/working\/vinbigdata\/labels\/val')","4702f6be":"class_ids, class_names = list(zip(*set(zip(train_df.class_id, train_df.name))))\nclasses = list(np.array(class_names)[np.argsort(class_ids)])\nclasses = list(map(lambda x: str(x), classes))\nclasses","c6949f14":"from os import listdir\nfrom os.path import isfile, join\nimport yaml\n\ncwd = '\/kaggle\/working\/'\n\nwith open(join( cwd , 'train.txt'), 'w') as f:\n    for path in glob('\/kaggle\/working\/vinbigdata\/images\/train\/*'):\n        f.write(path+'\\n')\n            \nwith open(join( cwd , 'val.txt'), 'w') as f:\n    for path in glob('\/kaggle\/working\/vinbigdata\/images\/val\/*'):\n        f.write(path+'\\n')\n\ndata = dict(\n    train =  join( cwd , 'train.txt') ,\n    val   =  join( cwd , 'val.txt' ),\n    nc    = 3,\n    names = classes\n    )\n\nwith open(join( cwd , 'vinbigdata.yaml'), 'w') as outfile:\n    yaml.dump(data, outfile, default_flow_style=False)\n\nf = open(join( cwd , 'vinbigdata.yaml'), 'r')\nprint('\\nyaml:')\nprint(f.read())","a5d63518":"# https:\/\/www.kaggle.com\/ultralytics\/yolov5\n# !git clone https:\/\/github.com\/ultralytics\/yolov5  # clone repo\n# %cd yolov5\nshutil.copytree('\/kaggle\/input\/yolov5-official-v31-dataset\/yolov5', '\/kaggle\/working\/yolov5')\nos.chdir('\/kaggle\/working\/yolov5')\n# %pip install -qr requirements.txt # install dependencies\n\nimport torch\nfrom IPython.display import Image, clear_output  # to display images\n\nclear_output()\nprint('Setup complete. Using torch %s %s' % (torch.__version__, torch.cuda.get_device_properties(0) if torch.cuda.is_available() else 'CPU'))","f0470cc5":"!python detect.py --weights yolov5s.pt --img 640 --conf 0.25 --source data\/images\/\nImage(filename='runs\/detect\/exp\/zidane.jpg', width=600)","8cb4187c":"#!WANDB_MODE=\"dryrun\" python train.py --img 640 --batch 16 --epochs 3 --data coco128.yaml --weights yolov5s.pt --nosave --cache \n!WANDB_MODE=\"dryrun\" python train.py --img 512 --batch 16 --epochs 30 --data \/kaggle\/working\/vinbigdata.yaml --weights yolov5x.pt --cache","7a1afc4e":"plt.figure(figsize = (20,20))\nplt.axis('off')\nplt.imshow(plt.imread('runs\/train\/exp\/labels_correlogram.jpg'));","1df55d4d":"plt.figure(figsize = (20,20))\nplt.axis('off')\nplt.imshow(plt.imread('runs\/train\/exp\/labels.jpg'));","eabc475f":"import matplotlib.pyplot as plt\nplt.figure(figsize = (15, 15))\nplt.imshow(plt.imread('runs\/train\/exp\/train_batch0.jpg'))\n\nplt.figure(figsize = (15, 15))\nplt.imshow(plt.imread('runs\/train\/exp\/train_batch1.jpg'))\n\nplt.figure(figsize = (15, 15))\nplt.imshow(plt.imread('runs\/train\/exp\/train_batch2.jpg'))","25108136":"fig, ax = plt.subplots(3, 2, figsize = (2*5,3*5), constrained_layout = True)\nfor row in range(3):\n    ax[row][0].imshow(plt.imread(f'runs\/train\/exp\/test_batch{row}_labels.jpg'))\n    ax[row][0].set_xticks([])\n    ax[row][0].set_yticks([])\n    ax[row][0].set_title(f'runs\/train\/exp\/test_batch{row}_labels.jpg', fontsize = 12)\n    \n    ax[row][1].imshow(plt.imread(f'runs\/train\/exp\/test_batch{row}_pred.jpg'))\n    ax[row][1].set_xticks([])\n    ax[row][1].set_yticks([])\n    ax[row][1].set_title(f'runs\/train\/exp\/test_batch{row}_pred.jpg', fontsize = 12)","cd141002":"plt.figure(figsize=(30,15))\nplt.axis('off')\nplt.imshow(plt.imread('runs\/train\/exp\/results.png'));","78cb6a9b":"plt.figure(figsize=(30,15))\nplt.axis('off')\nplt.imshow(plt.imread('runs\/train\/exp\/confusion_matrix.png'));","7fa7a763":"!python detect.py --weights 'runs\/train\/exp\/weights\/best.pt'\\\n--img 512\\\n--conf 0.15\\\n--iou 0.5\\\n--source \/kaggle\/working\/vinbigdata\/images\/val\\\n--exist-ok","47c6889b":"import matplotlib.pyplot as plt\nfrom mpl_toolkits.axes_grid1 import ImageGrid\nimport numpy as np\nimport random\nimport cv2\nfrom glob import glob\nfrom tqdm import tqdm\n\nfiles = glob('runs\/detect\/exp\/*')\nfor _ in range(3):\n    row = 4\n    col = 4\n    grid_files = random.sample(files, row*col)\n    images     = []\n    for image_path in tqdm(grid_files):\n        img          = cv2.cvtColor(cv2.imread(image_path), cv2.COLOR_BGR2RGB)\n        images.append(img)\n\n    fig = plt.figure(figsize=(col*5, row*5))\n    grid = ImageGrid(fig, 111,  # similar to subplot(111)\n                     nrows_ncols=(col, row),  # creates 2x2 grid of axes\n                     axes_pad=0.05,  # pad between axes in inch.\n                     )\n\n    for ax, im in zip(grid, images):\n        # Iterating over the grid returns the Axes.\n        ax.imshow(im)\n        ax.set_xticks([])\n        ax.set_yticks([])\n    plt.show()","1b158b1e":"shutil.rmtree('\/kaggle\/working\/vinbigdata')\nshutil.rmtree('runs\/detect')","f9b07b1b":"# Confusion Matrix","f5044667":"# [YOLOv5](https:\/\/github.com\/ultralytics\/yolov5)\n![](https:\/\/user-images.githubusercontent.com\/26833433\/98699617-a1595a00-2377-11eb-8145-fc674eb9b1a7.jpg)\n![](https:\/\/user-images.githubusercontent.com\/26833433\/90187293-6773ba00-dd6e-11ea-8f90-cd94afc0427f.png)","11b502cb":"## Pretrained Checkpoints:\n\n| Model | AP<sup>val<\/sup> | AP<sup>test<\/sup> | AP<sub>50<\/sub> | Speed<sub>GPU<\/sub> | FPS<sub>GPU<\/sub> || params | FLOPS |\n|---------- |------ |------ |------ | -------- | ------| ------ |------  |  :------: |\n| [YOLOv5s](https:\/\/github.com\/ultralytics\/yolov5\/releases\/tag\/v3.0)    | 37.0     | 37.0     | 56.2     | **2.4ms** | **416** || 7.5M   | 13.2B\n| [YOLOv5m](https:\/\/github.com\/ultralytics\/yolov5\/releases\/tag\/v3.0)    | 44.3     | 44.3     | 63.2     | 3.4ms     | 294     || 21.8M  | 39.4B\n| [YOLOv5l](https:\/\/github.com\/ultralytics\/yolov5\/releases\/tag\/v3.0)    | 47.7     | 47.7     | 66.5     | 4.4ms     | 227     || 47.8M  | 88.1B\n| [YOLOv5x](https:\/\/github.com\/ultralytics\/yolov5\/releases\/tag\/v3.0)    | **49.2** | **49.2** | **67.7** | 6.9ms     | 145     || 89.0M  | 166.4B\n| | | | | | || |\n| [YOLOv5x](https:\/\/github.com\/ultralytics\/yolov5\/releases\/tag\/v3.0) + TTA|**50.8**| **50.8** | **68.9** | 25.5ms    | 39      || 89.0M  | 354.3B\n| | | | | | || |\n| [YOLOv3-SPP](https:\/\/github.com\/ultralytics\/yolov5\/releases\/tag\/v3.0) | 45.6     | 45.5     | 65.2     | 4.5ms     | 222     || 63.0M  | 118.0B","9d6a6a5d":"# Only 14 Class","5a97ec64":"# Inference","22763d8b":"# Batch Image","9bfe830c":"# Selecting Models\nIn this notebok I'm using `v5s`. To select your prefered model just replace `--cfg models\/yolov5s.yaml --weights yolov5s.pt` with the following command:\n* `v5s` : `--cfg models\/yolov5s.yaml --weights yolov5s.pt`\n* `v5m` : `--cfg models\/yolov5m.yaml --weights yolov5m.pt`\n* `v5l` : `--cfg models\/yolov5l.yaml --weights yolov5l.pt`\n* `v5x` : `--cfg models\/yolov5x.yaml --weights yolov5x.pt`","c90ed2c8":"# Class Distribution","bfb0763e":"# Pre-Processing","5f887282":"# Inference Plot","8541dd3a":"# YOLOv5 Stuff","02dd4589":"# Version\nfold2\n\ncopy and edit from[https:\/\/www.kaggle.com\/awsaf49\/vinbigdata-cxr-ad-yolov5-14-class-train?scriptVersionId=51243860](https:\/\/www.kaggle.com\/awsaf49\/vinbigdata-cxr-ad-yolov5-14-class-train?scriptVersionId=51243860)","2e47c2f8":"# Copying Files","a5f6dbbf":"# Train","1f43365b":"# Split","02f2f11f":"# (Loss, Map) Vs Epoch","ca71e406":"# Get Class Name","5790f6e8":"# GT Vs Pred"}}