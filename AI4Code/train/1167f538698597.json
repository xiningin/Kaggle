{"cell_type":{"c18d5089":"code","e27ab30e":"code","617d0467":"code","984accb0":"code","19c0a8fa":"code","ff7aa725":"code","1d981f6a":"code","6d1971c6":"code","27dba94e":"code","6a1101fe":"code","147e1b9a":"code","a4bebad5":"code","3c51c502":"code","d160e598":"code","85ae2bbe":"code","5df44c74":"code","a667ea45":"code","cdc6f044":"code","87314cdd":"code","3ebcfb8a":"code","4d541c78":"code","e604b9bd":"code","90d9d416":"code","a184e36a":"code","96569773":"code","551339d2":"code","eb3b9000":"code","9e45d445":"code","edcbc621":"code","12e1a051":"code","44521b8f":"code","aa4668ed":"code","737dd52c":"markdown","b60112b5":"markdown","cd3c1524":"markdown","c2b8deca":"markdown","385d5d17":"markdown","537530a7":"markdown","a514d9bc":"markdown","d575aadf":"markdown","ebad84ad":"markdown","98dc9891":"markdown","2a9d2ec9":"markdown","5cc071e6":"markdown","f37be662":"markdown","9979b0f1":"markdown","0cf0369e":"markdown","94c046d3":"markdown","7c721723":"markdown","99e81ea8":"markdown","92d77a48":"markdown","c2d399ba":"markdown","dcd9fa97":"markdown","056fc334":"markdown","4fc7d4a5":"markdown","090eace1":"markdown","d15d16fc":"markdown","504b5ddd":"markdown","a3f0e34d":"markdown","fda3ad33":"markdown","2e1c560c":"markdown","639d7c0d":"markdown","4cc2b798":"markdown","38014543":"markdown","4d9005c3":"markdown","727be5db":"markdown","24beddfe":"markdown","60c179c3":"markdown","e25e847b":"markdown","5c95a1ef":"markdown","c774e365":"markdown","51f695bf":"markdown","58a6bb44":"markdown","159c2ee0":"markdown","9487d37f":"markdown","75f08fb4":"markdown","c7eea868":"markdown","d36628a0":"markdown","7b09400d":"markdown","56dd6c83":"markdown"},"source":{"c18d5089":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","e27ab30e":"import numpy as np\nimport pandas as pd\nimport math\nimport numpy as np\nimport missingno as msno\nimport matplotlib.pyplot as plt\n%matplotlib inline\nimport seaborn as sns\nplt.style.use('seaborn-darkgrid')\npalette = plt.get_cmap('Set2')","617d0467":"df=pd.read_csv(\"..\/input\/telecom-users-dataset\/telecom_users.csv\")","984accb0":"df.head()","19c0a8fa":"msno.bar(df)","ff7aa725":"df.nunique()","1d981f6a":"df.dtypes","6d1971c6":"df.describe(include=[np.number])","27dba94e":"df.describe(include=[np.object])","6a1101fe":"gender=df[\"gender\"].value_counts()\nplt.figure(figsize=(8,6))\nplot=gender.plot.pie(autopct=\"%1.0f%%\")\nplt.show()\n","147e1b9a":"ismarried=df['Partner'].value_counts()\nplt.title('Clients who are married or not')\nplt.ylabel('Counts')\nsns.barplot(x=ismarried.index,y=ismarried.values)\nplt.show()","a4bebad5":"tenure = df['tenure']\nplt.figure(figsize=(10,8))\nsns.histplot(tenure, bins=50, alpha=0.8)\nplt.xticks(list(range(0,tenure.max(),5)))\nplt.yticks(list(range(0,550,50)))\nplt.title('Clients using services for how much time')\nplt.show()\n","3c51c502":"phone_services=df['PhoneService'].value_counts()\nplt.figure(figsize=(10,8))\nsns.barplot(x=phone_services.index,y=phone_services.values)\nplt.ylabel('Clients using mobiles',size=20)\nplt.grid()\nplt.title('Number of customers using mobiles ',size=20)\nplt.show()\n","d160e598":"other_servises = ['MultipleLines', 'InternetService', 'OnlineSecurity',\n                  'OnlineBackup', 'DeviceProtection', 'TechSupport',\n                  'StreamingTV', 'StreamingMovies']\n\nfig, ax = plt.subplots(nrows=4, ncols=2, figsize=(20, 15), sharey=True)\nt = 0\n\nfor i in range(4):\n    for j in range(2):\n        data_prep = [df[obj].value_counts()  for obj in other_servises]\n        axes = ax[i][j]\n\n        sns.barplot(x=data_prep[t].index, y=data_prep[t].values, ax=axes, alpha=0.8)\n        axes.set_title(other_servises[t], fontsize=16)\n        axes.set_yticks(list(range(0, 3001, 500)))\n        if j == 0:\n            axes.set_ylabel('Number of clients', fontsize=12)\n        t += 1\n\nfig.suptitle('Customers who use additional services', y=0.93, fontsize=20)\nplt.show()","85ae2bbe":"contract=df['Contract'].value_counts()\nplt.figure(figsize=(10,8))\nsns.barplot(y=contract.values,x=contract.index)\nplt.title('Contracts vs Number of clients',size=20)\nplt.show()","5df44c74":"billing=df['PaperlessBilling'].value_counts()\nplt.figure(figsize=(8,6))\nsns.barplot(x=billing.index,y=billing.values)\nplt.title('Paperless Biling',size=20)\nplt.show()","a667ea45":"payment=df['PaymentMethod'].value_counts()\nplt.figure(figsize=(10,8))\nsns.barplot(x=payment.index,y=payment.values)\nplt.title('Cliens using mode of payment',size=20)\nplt.ylabel('No of clients',size=20)\nplt.xlabel('Payment method',size=20)\nplt.show()","cdc6f044":"charges=df['MonthlyCharges']\nplt.figure(figsize=(10,8))\nsns.distplot(charges)\nplt.title('Monthly payment date')\nplt.xlabel('Monthly Charges')\nplt.show()","87314cdd":"#Removing usless data\ndrop_elements=['Unnamed: 0','customerID','Churn']\ntrain=df.drop(drop_elements, axis=1)\ntest=df['Churn']","3ebcfb8a":"colormap = plt.cm.RdBu\nplt.figure(figsize=(14,12))\nplt.title('Feature correlation matrix', y=1, size=15)\nsns.heatmap(df.corr(),linewidths=0.1,vmax=1.0, \n            square=True, cmap=colormap, linecolor='white', annot=True)\nplt.show()","4d541c78":"corr_train=df.corr()","e604b9bd":"depends=df['Dependents'].value_counts()\nplt.figure(figsize=(10,8))\nsns.barplot(x=depends.index,y=depends.values)\nplt.ylabel('No of Clients')\nplt.yticks(list(range(0,4500,100)))\nplt.show()\n","90d9d416":"plt.figure(figsize=(20,10))\nstreamingtv=df['StreamingTV'].value_counts()\nplt.yticks(list(range(0,2500,200)))\nsns.barplot(x=streamingtv.index,y=streamingtv.values)\nplt.title('Clients streaming TV')\nplt.ylabel(' No of Clients streaming TV')\nplt.show()","a184e36a":"streamingmov=df['StreamingMovies'].value_counts()\nplt.figure(figsize=(20,10))\nplt.yticks(list(range(0,2500,100)))\nsns.barplot(x=streamingmov.index,y=streamingmov.values)\nplt.title('Clients streaming Movies')\nplt.ylabel(' No of Clients streaming Movies')\nplt.show()","96569773":"plt.figure(figsize=(10,8))\ncharge=df['MonthlyCharges']\nsns.histplot(charge,kde=True)\nplt.xticks(list(range(20,120,5)))\nplt.title('Monthly Charges',size=30)","551339d2":"techsupport=df[\"TechSupport\"].value_counts()\nplt.figure(figsize=(8,6))\nplot=techsupport.plot.pie(autopct=\"%1.0f%%\",frame=True,shadow=True)\nplt.show()\n","eb3b9000":"plt.figure(figsize=(8,8))\nchurn=df['Churn']\nplt.yticks(list(range(0,5000,500)))\nsns.histplot(churn,binwidth=20)","9e45d445":"df=df.replace('Yes',1)\ndf=df.replace('No',0)\ndf=df.replace('No internet service',0)\ndf=df.replace('No phone service',0)\ndf=df.replace('Fiber optic',2)\ndf=df.replace('DSL',1)\n","edcbc621":"df=df.replace('Male',1)\ndf=df.replace('Female',0)","12e1a051":"df.info()","44521b8f":"df1=pd.get_dummies(data=df, columns=['Contract','PaymentMethod'], drop_first=True)","aa4668ed":"df.isna().sum()","737dd52c":"``It shows that 4 columns are of type numbers``","b60112b5":"# Removing useless data from the dataset","cd3c1524":"``Lets now check the missing values``","c2b8deca":"``Finding the data types of the dataset``","385d5d17":"# Importing the suitable librarires","537530a7":"``Here is shows that mostly clients are independent``","a514d9bc":"# Finding the marriage status of the clients","d575aadf":"# Finding first 5 values","ebad84ad":"``Many of the data types are objects ``","98dc9891":"``From the histplot we can see the most paid charges given by the clients are around 20-25``","2a9d2ec9":"# Finding unique values in the dataset","5cc071e6":"# Calculating the corelation matrix","f37be662":"# Finding the  payment method of the clients ","9979b0f1":"# Clients streaming TV","0cf0369e":"**Most of the clients pay by electronic check**","94c046d3":"# Finding the additonal services used by the clients","7c721723":"``2400 clients  do not stream TV ,2300 clients stream TV and 1100 do not have internet service``","99e81ea8":"<img src=\"data:image\/jpeg;base64,\/9j\/4AAQSkZJRgABAQAAAQABAAD\/2wCEAAoGBxUUExYUFBMWGBYZGRkZGRoaGhoaGRkZGhkaGhoaGRkaICsiGhwqHxsaIzQjKCwuMTExHyE3PDcwOyswMS4BCwsLDw4PHBERHTAoIigwMDAyLjAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMP\/AABEIAMgA\/AMBIgACEQEDEQH\/xAAbAAACAgMBAAAAAAAAAAAAAAAEBQMGAQIHAP\/EAD8QAAICAAQFAgQDBgMHBQEAAAECAxEABBIhBRMiMUEGUSMyYXEUQoEHUmKRobGSwfAkM3KCwtHhFUNzovFT\/8QAGQEAAwEBAQAAAAAAAAAAAAAAAAECAwQF\/8QAIBEAAgIDAAMBAQEAAAAAAAAAAAECERIhMQNBUWEiE\/\/aAAwDAQACEQMRAD8AEjjxOseNo48TqmPcPCI1jxtoxLpx7TgGQhcbBcSacZC4BkQXGdOJQuNmGJGiDRg7h2UV9qN+f1wNpxY\/SmVWi53PavasR5ZYxs08ccpUKv8A0ipApBo4b8iyBQWvGGHE2RCpI84j4hGKH1IxzZuVHSoKNkuUfUKvGJcsp29++IMs7A9tsEZxmIGn3F\/54zapmidoxHlQpFHBqIO+Fs0hG1E\/XGIc9q2Br3vvfasJxb2NSSGlDAWeNiqxIZNPc4ygDWcStbG96FOTQqW\/d9qwXLASNsbmAntiUqQN8aOWyFGkVSTLuhAN7ndR7Xsfvh3w8aRvXfb7YNGT1GyO3bEOWyt39CcVKakiYwxZBncySQF98ehy+o9W+DIsiL7YinjaNhQ2OJtcRVPrN4csBdDAefNdhuNxhzE6lbwu4h2P8sTF7HJaF8WdN+31wY0V0Sd8aJkQBfe6wUsIvvti5NeiYp+wJtXjtiCXLMw84cTuqLZoDALZnUOnCTYNIrmZypDViL8JhsYPfvgeSPfvjSzOhciYmVMbKmJAmOuzjSItOPacTaMe04VhRDpx4LibTjOjBY6PZbLFiBjabLEE\/TBPDz1gHse+Gs+SV01IAP7HGcvJi9msPHlHRXXgoA+Dh\/6anpCuncGwfe8S5DJhhUg+w\/7YizUSQNa+24xlOan\/ACbQg4f0E5qPUbJN+B9sEjIArR8dt+2IsrPqAb3o1hlABjCUmtG8UnsEENCqxuEAGC5VwHPCT5rEp2U1RsyirxCmWQAkdzufucRPl2\/TGukp+YkH+n2xVfGTf4Zk4aG+a798TZKQK2i96H6jGyyWDWE+fd1kFAke\/nDinLTFJqO0WRarGktV2wsgzBU0TscSyTtW3+vviMHZeSokgc82r207DBUGVpiffCaOfQ4Ldvf+eGUWf3q\/F4cov0KMl7CJKGBs7MNOPT5oVeIDmFse57YUYg2K81mH2KtX6XiTJ5V+7MWPejVYMmRQLPbGxzA0AoLxrlrSM8d7MlTW52wPY30\/bGVdtvF4KggA3\/1vieFdFkmTdhRY0TiUJy0wwmkCjA8sqkb4MmxYpCmZgOr3wtkck3htIQ17beMLywG1Y0RmyNVxuFxuExuFx1WclEWjGdOJtOMaMKx0Q6cbwx2d8bmPHgMFgkZBA7d8P+BZnWNLd+\/\/AIwgVdxf64sfCo0SiGBBvxjDzVidHhvILzOWGx9sD\/glLau\/33wwljtSMQjTpoH71jlUmdbihfINN0AN9v8AxgzKL0nffHmhBIavtjUSBdz47\/pht2hJUEFbGMiLbfGNYPYi8ZXNKe5F+cRsrRnRYrEMuTGCG9xjSSWhhpsGkDQwdxiHiGXpbA7YJ5hJ2G2IszmqIvz\/AE++KTdkuqAXishvYWfr74LjZQvfviKaYADcfUYi0jsB39+2L70i6J83lldawheYxAjUQLO+1LXuT4w6Mdb3thH6zi\/2YqBfMdI6\/eDuAQfoRd\/S8OMsUKUcmJs16m0TQozaIWLa5WOxsbaR4Gqra\/N9qOLDDHduDa9gfJ+p9t\/\/ADjk7ZKTWxlLaFJBUjrKFq7b0b2N7knf3xbeC8ckyyrHIS0Gg6VKkyBjQQKxbcA+PY7ewheV3s1l4VSovUi0Cx3Fb+O39hhYnrTI8xIfxCF3IUBQWXUdqLqCo\/U45X6w4tmswRrtcuB8OPVaso+VpNJ62NA79vHnGvBHy0cSvKh1tZLEahsxAoD5e3t\/PE\/6J6FjR22SVAaJAOBM3myp2ND3rHNh63jBsZpr+oc9vowOLb6Q42c5HITTKhUB9JXUTdivNbeB3xpFxshqRYJpCQN8aQRDc4KBAG+Bmzagbd9\/GGvwT\/QaeIrZFYX89fPfBU7MxvsPPviD8Kf3caJfTNv4bhcbBcSBcZC42s50jTTjZI7NY3C4my8e94TZSjYIUxjTguRRqONWXBkGIOFwZk3r7Yh0YlhNHfthS2io6Y4ymaYg32\/yx5oKBYD9BiXIqrLtibSfptjjbpnYlaIcorFb\/p7Y3EFHUfOMrmQG3IAP+WI+JZ1QKG5+njE7b0GkjEqKSB2PYHz749HlALvf64GzSOxBvTg3LyG6JBFfzxTtIFtm6xmsZVRW+MRy0axPINsQUgVZRdbViHM5ZWO+NJoCWu6rtiYmh7\/XFc4T3oMMmPABOMCBuw7fXBcfviax4w82CigGSAkb9sAcZl5cJcx3y7ZT02DRFrq2uicNc1mQDW5wk9XyqMq7S6eXcYfUAV0tIqtYO1UT3wJ\/Qa+HO85Kb1SEFxI4JQ6gx5rK\/UbIFi+9CvYjEfCU5xEexcKXQEAEWrVZNkkAdNdu\/jddHnlWN1G\/MaRVGqgAWonpu1+g2Y1RajiCbUJgxNbk3+Y+5b+5O3nGTNkqHOf4fIqcqWl7kDaxf5WbcBjRP1LX2JISZnhEhjbSfl0CNG2aSzRK+1H3\/ntiyHMx5kllsv0hE0k6q7sK2ABoEse1kmwCwuZy4ljjVj862WNMAABs5JuyKtjsdLEe5VJcE\/6FPB\/T0aZczZiLmFnYJoa10IFBZWW1PUSD9sXP9m3EFt4oYmSIWzatzr6V2I+nj6dsIU4lDFCMvLBqVL6kY9Ool2B36rZuw3Ao\/QP87xySGFfwsQlUoDrUgupAU2yKKYaWjUkVR1fprAzmn0tGeVq6AR\/bEkSjTVb4Ck4pywq5hkVmHTpDkGv0IB77XvRrtibJcTjfZHViACQCNQB2BI7gbHG12jGqdm5Sq23\/AMsR2cEs1+MalDh2TRAFxsFxIFx4LjWzGjULjfxjYLj2nAOiIjGQuJViJ7Y8Y68YVjojC4yFxvWFXq3i\/wCFyzzb3sq13DMe\/wBNr\/WsJulY0tgnrX1qMmqwxm5yAT\/Ah\/Mf4j2A\/Xxu\/wDQ\/GTmY9T7MKG\/c0BufrvjkgjjnYSMRKW31tfM9gWJ6rFedtsEZjiM0cGhNSwEsutT8SQIWBBINBb1MW0jvXYY5ZM6oROtz5qKUmKGRZH+YrZ+Tayu3Ud1r6EHtVmZDhmwf6dscy9I8T5SrQDbao2AXXQuMydWmlLCgpay3TRB26twnOrIDodWUVuCDRIurG3kYSlLGhuMciV9hVYCjy5D2O2GhS8YMWEpUNxsH1fTfGZWIxtMvTviBJjpGnqPufGGgejMZOrqrt2wTQwHJNRs9uxwXlmDCwcKX0F8IJl9sCZlQO9\/oaw1eMYCzSb1\/X2w4sUkRZYLpA\/vucAvxfLGSWEyDXEoMg6hpU1R1D\/iHY+cUT1f6wzSTTZcERaGIBSwxSrU6jvuKO1d8VrL5iSbONmAvNaVT06QRrlQxgaTtsxWr8gYJBH4OuI8Py2\/Kb4RlKKEFyUZGApidWhaNbg9xRsEJ8xl0UyRaVpCdMwJVm0GzS2bBF\/Tzg6TPSM0gjg5WosGQiigMhqPRQLKuw0gVa2cV7iRIcRkliDRFGyewArc\/QD6YybNI22MuEqqNup0n5GpSA9aVBB3ZbYA2a7ffD\/M8XjlikeFDzHqIruY43kNW0m+stQOlQTSi6u8UZ5pN4dIG4JX+I\/lcj5QRqGn5veqxPwbiqxSrJuqDY6VAqxRYeAw2G3fv2dsUnRWHsdZ7LtAIyZC+sWXKspB7aN+3kDv23IwLkkeFOdHpKk1LGbEdVrUUPDFGGsVRFHvQtU0bzK8pSYxAGNAjqejSFPNLCgLYry06r1CiDtU+K8KVKCluWFbdiQFr5l0ydUYstRaidvO+B6FZDxH1c7wcgHp0pGGYhpBpYFesV1LvvV7nfA3oj8RmM3GqzSmgzk62PyKdIJJ7Fiq17E4WcQhCyHl9SuFZTRsatwDfn37733xcfSvG2yoy\/Ny8Co6BRmQlNpY6lSQrua0iz9jv3KjJt2xyjrR0lJQQGHYgEfYixjbXiLJr8NBamhsVNrX5aPkVW+JSmOtHEzYLjbTjesbBcaWZ0RgYzpxvoxhWBsAg1sa8H2OFYUZy8oRhZAvYAnc+dvfG75mGSXlI4LqAWH7oPaz4P074pfr71QsIEMO856g3iMe\/wDET4Hba\/ABG\/ZrmxGMxLmGEShVYvIT1VbNR\/M9MpK\/N1LtvjKU0pG0YNxL\/wDgCO5AHv8A1xTvV3EOYghETyRyEq+hQxdaJGkn5AaBD7mrYCqJdS8a\/EI8KZeR42AFlXVgrACyCLVuoH3G9AkECXiHLy0ZY6zzNSlnVlZWKMxIZ\/ynSbBPejfkZvyMteNIp3AvQKZe55CCySR1GxRkIMigpJdEkA0aNbeRtiu+os5IuYYIhjQ7hT1Fl6q197IDFfc2AbO+Lj6n9SnSTFVM6OtBi4YMXZ9RrUBSqBQ6ie9bG+hOGJORLMgIiUIqEbhiNZYkbN839B4CgQ\/w0i\/pTEy0awwpoYyylnf5G6EbQqAmygFGyCL06ew2tvBvWCI8MGtajWmKjpFA7Eg0T529t98Q\/tB9EZrMZhWyxLJINwzhVir8pPfR5oA+dsMPR\/7PIsqwaYiWUbjao1P8C+T\/ABH9AMOMmKaL5BnlNb74lacYWyZUghvbsKvG6ZojZkIrzW2BxXoFJ+wkLfz\/AKDGq5YAWvfG6yhq+uMsawtj0RCANZI3qsAy5do2JjJ38dxgySR72xtAt2ScUm0S0mClpT5H6Y3eTSosffBDQYjGoHT3GC7CqOTftm4QS8eajsXUTj\/EyN9e5X\/Dhb6C4NIQ3OWRFr4bhCwVubE19qBFMwY1W++OrerZoosrNJLGHjC7oezGxpH+KsJOE+qspmMsGzDwxLbRyRO4KgbgAhgLDLv29+9YlrdlLlFOz3abVKZaZl0krpLu9FpPO93SbfRgThPx+MF2EUY1vTalXddK9RQhqFfNdkm99O4xlcuvNREIeOVnkjjh1F1VSydAUUpOj5rXzqNLh2Mx+Fi1ZiNVWSIcqONhrVNRdWaQAGidDAKAoC1VDTiOm9KItm4KHjCxkM8g1qwNRIsaKJCSwtmBIj71qYWbW8V3OOrv0HsN+0ajSa+Uir86Qb398TniLKCHtQdlQEiRY9yqMwrlp1tdbnUfbC+a7VlC6TZCiwkbDYjvRPyk3udVVvgsN2WX0jn1HwczNKEUloxZ0KxXUSEB7Hc2fBJ8Pi45zgMPMa15saoqSkHTueq9ardKNJYA9mB8HHN+HKZaA2kDKoArUdyfNCtuknYPsaDY7B6VmjfLKFLOANkVSNQ7AmwO+kij2IZWLEE4uJnO1tFQzPAEhkcxK7ZbYOyt1RNR0teoh01MwNixRs2MD5nhjahlSNavpCFtIcAgHSoFAMBS2raWVgR8pA6FlspUVSx6VosykpW+7BmB2UdtI2obk45vxXMFWWRUKwqytEzMPhIeZykGrddi0iitvN1s6SJUm9FrlhPD1QR9UNdUfbQfzOnlVJO92ATv3vDTL8XidbDoPBDbMD5BGF\/pzjqzoYzHqlC3IRusg7axdsRRFijpJ04AzUIRqjiEiflJWXpHbQGC9QFbE71Q8Y2UjnlF2XIjA3EuJx5dNcjUOwA+Zj7KPJxjjXE48tE8sppEFn3J8Ko8knYY4zxP1NLmp+cxIN1Gg3CL7D6+58\/ypzmokxg5HZeFcYSePV8pHdTuw9u3e9u2AOLO8ZZ40tWKBwLJWyVLkdjuy9A9iTdkYpvpHiYOYVpCRQIWu5c2Ao+\/a\/F+3Z9xz1byllQRrrQppZWDpGSRSv5M9itIsG16gCThZpqyv83dAs65JVf8U453zCYWzSklXA0obDVpGgUNJGmgekHI8RUuef0xBneJCusxMWbqPLpTKQxqQA6PF2TgFfTvLL5jMnV1bdQZklOiQayNt9VCgASa2OlTPPltr9+2M140zSU3E6N6U4zl5bSN0B1ghbYMV5QGpgwBJBFEi\/G++FP7TfU6RNHCvVJ+avyLIGQ2R2JW9v7XeOfCFgwZTY2I8Mp9wcOOH8HkzZ1agJI7CEgnW7sXJLXZkO4A7UPAUkKUMVYRnk6JvTeUSd5hmDGiKrNLp\/KFYBNIvav3VANtvd6Q79JepIoWMcUT8prLAy8wqy0o0EmjdWd63\/Lpor\/U3p1cplXkkGqST4ZdY1KRWdTkPVlrtQx7222KMOPlRy8uGUNsXO8r9hQPcf3+2ITVlNOjunCeKfiNZTYodlJFkbb7bd7FeMHPrNdOn3Pf+WKf+zT05mIgs04aNdykW+rqFW\/7o\/hO97msXxGs1isvgkvpDBOGNHvid1G117b4w+UB38+MRPDXiz7+wwteitmufmWKNpCNkBYgd6As4p8HqyZ5yoW1Jji0rsyNK1WNQ3oUSb2qvIph6rzTJ022kqTp6aajuG\/MNytGx5745xwHOOk6sHOqyVA3I1DalrqPt\/SsDKitNnYsmWDEsGBO29ePbSSKwTdE0NvfGcmzPGrOulyoLL7Gtxjdz9PGBuyUqM6sLc1mWD0VOnajgsgkDft7Yq3EvX+WAOhXlIPgaVJH1b\/thxJkwb9rstcOfudTxivs2r\/pxRPQbSwRmd435DSxOx0M0ehBIr6tNn5ZQflN19MXLgHqaPOq8ebWFQrl0snTpAIIJJ3YAk39e214skmfghEcKkA6dMaAE9KjwAOwHc\/98FOylLRybgOaRoZhGsSt0M5Zm6gBZGokMoILoUSu9DVYwp43NJO9oZXUlQGKkszBdQRQq7UqhgKvzXemh4VpysDRhnnIjaJqOkM3xGjWh84DMzd+iySCMWv0LNFDCvQ0socsX0uWJaRopQm1adRvYi7A7riNtUdEmk2znvDPTcsz6TUbFt+YdN0GLEndtVAbAE2a27Yu2e9HqmR+HTOnxDIQF32BEY\/KNAIs3vpIvFg9RKOjMqAI1dJHBQi9G9gsuxKa1286ffDUZGOVgzLHy46Oyimkrbetwvcn96uxU3UYpGDk3s4twqXlPr0WylhIhu5I7PMWtj1JUgZq3jatiMW7gvGfw8omjtoJAHZyaHUQDKVPyKflkJrqCSAVqGEvq\/hX4fMvpACFg669WkhupCVJ1SG9attQVQBu2IfTPESoMGkGJmaQlwPhHUUZyBuIz8j1dCz5ODmjR7VnT+PZ1ZhHllbaazL31CFDTppFnWzfD0961\/u4RZyETIGMeozzI4CkBuSQUiDMD8O4xt9z7HEHDIpYMu2q45JkRUkfqlKsBGiWQADGtO17keRRpvPw3mxaBIqxqY2Ih2PcAJq1MK0nx9DdnakYrRR85k5MvIvKV44TJa\/NKsTEHoY7q0Tfp332Y4saesoWA58hjkAAKqxCVQIKGupSDYP1rxjGezGWi1QDMSvuUEYk1W1gtqqhGljfcWQK3sGqycJIJEbRBAaAZcxJXuFfl7rd\/reDa4Dp9LT+1bgk+ajRoCHjj1FkGxd+1r++VFih7mrOwpT+kZ4cvzXAErhCsYI1qrdiR2TzsTd37GuiZvj5hhfkyhpg5DMULJENbFjGFADew71Y+oxSvVvHGmjRVZogf95LT9chXqW1FWV0k211sAqisR5I5PoQdKitLmwFVVJolS77hrqqO+6q1nxZo+BVy9O5LLwsoZubG2lVm1nlxEgXDIjWhsoAG82Aa6cLvSvpP8Q8Ukz\/AApC1FiU5lD5idLGrI6iBfviw8Y9M5nKO8kMcTI6FWgUNomFU7IhGgTBRZUDq3KqepcOGipOz3FOLxZXmQuxkhZ1Xltpkk0cuIMD2tKFAn2INHAuY4c2WUS85ZcpKpMdKZNLndYdV22odIc3ZuwCd6jFEZZWYyAJqhQyO7Pp5inSGL6WatBWtgKq+zF3PMymKKGIhF5hhQku+mRSHmdAvZ7YLYGkDcVZFOb9EqC4wiTiMYk0FKJAOoEGMihZDGrAuu3cH2xZOCcGfnIx1BP94NvkB06SG7xzPXTX5SR+betQ8HjVxC8iiFFMjhC0jRMK6Sw6UsKQFP1Bbuy3Xhmdnmi5OWCxZcKPjSFi0i1uRfV\/Pc1bUWrCc5S0wUIx4W\/iGSGYhaJk+G66aBHY9iPYjYj9MIuCeicpkm5kcTNJ4ll6mH\/D2C\/oAcE8FikRghnMoXctqYaen5St6XJO\/awP0txIzsdJ2He\/+2BLYN6MjiB22u8E85Bv\/lvgZ8qRWkfqPbBUZYbVeB16CN+zZm29sCtOF3bYH3Ox2s7\/AG3\/AExOIrJDbj+2+EfqMFmjVE10SzbhaAvTbHZQSCPJonbfC0N2IvU8rTZhAFemoDYGlAZmIF32Kjbc2wrtbv036eiiVnCLrZtpK6tOkdibIBNnb3xQZ\/UWnNcxf4VFk9OwZgoJb5iW\/oavFvyvrGKMgOH0EqPHwxIwB1++l2Iv2s4OhzpZxIRsDdbX5\/XHgXutqHnGUFbAViTX7nDEaQzgbGtztjgXqmJsvmp4CaCu1C\/yk2D+oo47pnFJG1bb45Z+2vhb8yPNCMgFQkjCtOrfRvd3QPihQ98HFYd0UvJZi9ajv8w\/zr9QP54unApMxm3iIn08nLuySC2fpJUkKTTGm0Ww7au+Oe5IMHDKCe4NeQRX\/n9MdT9K8IMmRhbLymOWITCRuUGV0kYOV1vsBpVR02dzsN8JMEqMelo15GVkzTlBJHFFATIQyKoDFlAOzMVKrV2oi86rMtmST8PGXkjMkkTnUisG3kQh+shi2oCjTEbkCyLkuGRxZVGiXUAYVl2ARNE0ZDEgjmkpRI3I7jS1hrPkuFSOvOM0gdzqUilqPfRYZSbKkEg3Ww3IsuK9FSle0V1o5XTVOw0PRYKooCQdQUsSAQbOqwxAJGxJxL6b4s4yyDmRl4tUbpIukKYnZCbsHU2m6pms9sa8Zcxh1jlMvSVorGYilamJYAamjKMKW6AVTRKjC\/hsUqTSogjto1zYpC8TAoqDQqMSepLvbejdEYdgqZr+0rJtPCuYcKzRkhuV1DlttpsrtvpJYk+SKvFF4JK0fUy2BJYRiFDEL1q57kFVAr6VRJx07iBKRuc1LLpFrYVFXSwoqomBKkg1tv8AX25zmuG\/EVEVW0UuksgSMk76lJBcdvFdNUd8KS40JS9Mvq8WWT8PEsr8umly7rbzWBpSMqAdbIGkO96lVdXZ2xLxLKOYJnYGFkUgxq7PI7sLDuWJQKbLWoJoHqBBAq3pDKOOZrPKc6Sj9VjTvy1SIEHq6l0nv3BFrh62ZzGYilkaRQ8KyRtHy9TG0IkJkU6Qmhn0m23J3O6loJV6HHE+C\/hIby0kq0aWHU0iyPIwrdjrUlj31UL3BwpyKaFKkZ1m1ya2gOuNnDsGNgCmsbggH6YK4lmeW3KzUpmk0rUUUqLpCjvIajKgnyzUdhRrEUTs4sSCMDYIIp5goHjmMRq\/QAe2KRD0B5P0rC7Ry8qaOMj4aF\/iMkdEv7Ir0lsa2NKF2ZmvFPSQjjcrAJoHX48QHUpA\/wB5AT1ahQJF2aBHthvkYpWmbUlMirqdyLkV21WoQkJvHRHbua3xY4bqtQ+tLv8AzJP9sS0khJts556d4nHGwjeRWDKFimqklRupIJVUfDkG4UACzdCyym0QTFYjHOPhEgDVu8G4KrIQffcOO225oNhJ609LiMy5iGyHCCeGhUodimpQAAHB0kH77jFY4\/6naCHkiYzB10xvqdZlU9LRToTRKfXckrfnUrLE3rpYnzk5jBRXWoyKVZpI3XXLIDtpJ1DV2YrqHesOfTWXdJYSSkzvSxKGJIblkjmuLKQiiQAbNHbzipw5VpBDBXWyHcH5VDMKLNtsFC9z2HtjrHpD06iLzKJZ0AYtd8ur0hT8uvZiDvp0giycCVjcqAvUvD41SOAbmTVKZAAGfljZhtsS7jSgsKi6QADizQZYukYA5SAVstNVDpVT8o+rfy84YkHG8Qvb\/wDcXVGVtm\/DcsqjpA0jYDz9Sb7k+574NjdfG\/8AljSChsN8SaARvt9sZyds1iqR7nKBsR\/r6Y1jYnc7Hx9seEYUXe2Iebe+9b\/084VBZ7P59YlLMdPj7n2HudjQ8nFR9W8Tkjy0rEadRABNWWdQAosdSgVvW4F3tiP1xnx1U5+GodNPlwylCRfUNmJ2qtJvCL1TnWzGYSJmUxs0bVsO4AY+wBUnf3B8YGhxl9HPp\/hwjyUZZVDkCXVSmQyPuqqbsEaVBPn+oR8Q9O5gZmeNoXaGWNirICwAcnosdmUkj\/lB84ueay5lVAWVhIQACLGldyrrY3pCCBVbjvh9k4wiKAaVVVVH2Fb4aVbCTyPZeMhRZ3oX963xJWJVG2MN2wWKiMRC98C8c4bFmYZIJACriiPIN2GH1BAP6YM0X5++AeIQsYpVi\/3hRwp9mKkDfxvg6HDn+VhyGStAhzUimtRAVAR486j\/ADGLBwn1Jl5oZYlj5T8uRgm2lukk6aqz57A45\/YGxIFd9xt98LZPUaxSoISruW0nuVCuCrbjzRP2\/pisYpWTcmdC4lmwkWjdhyRo011SRpqQuBQUKAwBJGvQCAdOLDyLISdxo5ZIjUkIAmkHmMaMgojvS\/w4paGoRl8zm+SCmrlFVpNLbN4LAFQbFsDuRVMZMxxLMZuvw7OsZARpZAaYuNRjjjJPMvRW5ANUdjiUxj\/jEZbRMgAMYEgDWFTLqR0sBuC5669owK6aNS4lIIOI5eRXWNZFaFda2qAvzLK2CAG6aGxBB1dRJuHCci8bHmSySuqIzl9B3JkvSCtdJDV9GNVioeumE0aqsgBikRojpIaREYBZSfYA6AK6irE7KCG06KjJDGV8tmMyS+Y1RRMrvM9EvKRpWKJQNKKK1bAknSDdYr\/7Q3hWRZ4I3QLayalcM7EfOVI+amG7m9xsOk4Ny+dyeXgikd9T6NYCWZnMgtnYk1Ep3AJIBH1OEfG8\/LNWtVysDdShgSzlNWnqrUzaTQoAVXU1YBAq5tIWDAmyoLKuzBqGkluw8eRsAMFPxcyTKZSqpIRUOXdU+VgugyEULA1DcBt+rviuyMANMZoqb1PW7AEjo309rs73Wy49lswHUlxqX5XsWRfyyAfvKfPtt5xOXoWJ2jJcCiWEFWkUP8T4UrotsLJFHzZNmyfJwFLwnc1mMzX\/AMrH+uKz+zb1gdQykptSTy3sUCd9IB30k3W5IJr7WLiPqrLRuUaRdQ70QaPsfY\/THT46aMPJadItuTFvM38YUfZUX\/qLYMBoYT8A41FLCGiLSay79KMa1uzBWNUpF1RI7YJzOedRqaNY0AJLSuOmhe4TUO1+RjKzRCz1jxaopoYxrmktFUfkURq7yN\/wq1geSVG13jmTwpnZY+UjliNbSlus6hrIYns+ouoP29icHcV9WSzySOl\/EAWIhdPw9VfKdR6tm7+V98MuCcDZf9mSONpS+iYso0JXUAm1k6WpiDsFq7YXPsoL9M8HjlZXhQKiHTThjqYD5SbBNW5butdh1ALf8uCigWCfJ9z5P88D8N4YsChVsnclj3JY6nb6W29DbYDwMF1ikQyWNx5G1YjkcHsKrGhGM1h0FkkOYrxeJWzdg4GrFd416tgiSUKWldVYBIwdz2oN27+ReE4oak+DjPysUpWIs0CN6FXYHkhdTffRjeXNLGoRRXZUHYUKWgR2okL9yMU709mp5MxI5GtRp2GwMmylGZu+kqvb9zsSd3rSCZrABCAFb3ujZJ\/QHbzZsbGiguhX614KWUUG0bNIylQSV1aVAb8pYrtW1Ht4UelSJpZZpdWy0obSQNrJYUAy7FSB+8CBht6wzxSPQH6pE21btZ2LWLruoHbzgn0rkFijiYopLAmybOoiwQD2GkAWNz\/ZYlZGeE5GSV9NPGse6sCVZiKHarOxbcim8YuIAI8UP6YpHG\/VzQaWjVQZCqDVZIqi22x\/9xCL\/lh96a4gZ4NUgGsM6tWwOljpNfVdJI9ycFAmN4W22s\/bEpqt+\/jEOXIUX5OFnqXja5dL7yNehb\/+zfwj+vbE1sd0gvO8WjgW5mCg9h+Yn6AbnFXzvr1wSIYVUE93sn70pAH8zisZ7OPK5eRiznyfH0HsPpgY4vFEZsB4pwOCaRpHTqZix0swFsbNC6AvxiDhvAsvAJWKu8nLbk2RpWX8pYCifp7Hx5DQnGjDbCcUNSY89O8MjzEj5ueTnksEimMTBFKIjA8oDTp1mSOm6ugbgtYarMsbGQsVYHm8ti2l2YGOR9NWoYNaMPF2DRUV7gjSrDM6OXjaUGaMsNQLEnmouk7AgEj82mvGxnH+IpNDHJI8da+6MQjEAkq8htpQ2kLp2I1KaOxxMVRTYyzXGkkk0HpQq0fL19Uz6l0Auo2iOpzqXvR+zVTj+YVpNayiPlHQ0i0hkdyUkIJBKhdkVVGoAPv+bAnEvUTzsoiVi7VGC11RsdMbCrNgljtajahg3hXp+NX0RxHMudnrToiNC9TE6VGw6SS3kA707sSEfCUq1gRdYaxNKpsG7+HHZ0mq6mBYe9YFnyZmc1KZczzCt6rVVBotJI3yjVv9ht9H8fBQmYmhzXxGEPMjjRiqvIrhFjL7MxIeM3tevcGsWrJ8Qy+XiGUy0P4iRE5biHSUutLGWX5VJPcbn6YSjZbaijl3H+DPlpgJwrbgMVYlW2U3fuRfge\/viLMqusSpp0stuooIm1FQR37EjbtpOLbx\/wBLzLDrmlZyFIjj1M4i7aVJKgynZhuB48DFQys5cvDZvcoT2DL8yrtsrAGvqqDA4iv2SBNSKF0syjpoUSDX7u7e1mvG2LX6S9TxR5dUkg6hseXGCDQAs7im23\/n5oUqNmhKvQ0tq0kfKHBpgpF7A19wf1weOGpL1kLZ9i39frgjKS4TKKfTpvGG\/wDTBl8zEDyiuiaLVSFmjU60vZHOgk+CQL3N4VerfWAzUVRXosfCPzsQVsy0ehbYBRvqJvsDU3rCeXMRzRiT4WXUhnohZsyo2jVRsFQ7Hc9V\/u0ab6Y4eJjpWWOMqGIErdDADcML1ANekUCR3sdi7EWj0xwoQxfiplIuhGAfiEsCwYXuvSfmB1VdadmF69J8IMEeplCu4+Qdok7iMfW92+v0Awq9MwjOS\/iWR1jiYhEJ6S4VFBAFagAimyO+iq0m7lWGhEdY9WN6xisOwNKxisbkY1dqBP8Ar7YYA+bpgyaqJU6iO6qbF\/fvX6+2OPcSzzZaUxvGLFlTdiQdQUjatNqb79jjquap7+V121dWzvv0+aRas\/p7G6Dx\/wBOvnMyRZUpsxpiWBOoIASVUgMB3q2rbxMm60ONXsj9L51eQVaMH8wsh2AFsZAtDpBHsSD07UAb1npNEDcsF2KjpA61G41NZJ1C+1ePbCHgGQAblJSgRiINRFBi2os47M21EWO29EDB\/GGKZYyAiN2vsSSzsa1sRVae977DfsKSZTjbKgc3+KzKIWJ0m31mrVfmNflJGuqHhRjoeYlZr6SCqkaj0q24OgDcntv+teaof7NeHlpZcwoIU\/DR2voG1b1ROkKv0s2KNYvcuddIowQlnYgA9lB+ICT2sL33tgO5FuLHOO6B8x6ZhzMNTaiS+oEHSUKsR0d9NgUffDbhuTWCMRpdCzZ3JJN2cS5GIrEgPcKt\/U1uf53icRk4ejMygvv4s45fxviJnmeT3NL9EHyj+X9ScdK4lYhlA+YxuB9ypAxyQHAgkSXjUtjBxkJhiMAYxmJAiFm7AXiWqxV\/UXGg1xoencE+5+h\/1\/bEt0OKtknBuOTRuzQ2WcOhXTr6fmJVD3NKT\/PY3WG83DWjkjkH+0HUQSAHjV7F2VUBQLJKgE+aurXehUiE34jMAGCEBnFkFmc6EVQN2bctX8Js4eZj1BJPA8EUDKEQm5LIjyyPSIgG+uQlVI\/MSKNKKh7NIo39LcCXMczNSsGWJgaUlEkUOS7ajVrQ0gWtAAHsMXeLjyMojyGWMwAoFBysun3lIo\/ZAxwpk9FjLwo87NNGutpUY\/DgMmp3kjjXYqshDG7I02PNPWzwlVGy6aoW0h9GyuCPyECtvlNbtso7WGmDRSPUHBpJZYczmTBKqypFIiakiVGZtg4t3pqsnY+Bti7RSRxKE5QiUbAAAR\/oy7fzon2wN6myCPl5giAB01pstalogqw2G4Xa7IJ9gMR8LU5iKN0QRqyAlrIs1R0pGw2u+5B+mNINWZTvgs9brJIUQA8sqSf3Sy3QP7xF2F7G78Y5l6i4e8MutWAGzL5OtSpI++qj9t\/GOx5fhIAfS76L0gMdQZlJ1Np7KAenp0npJvfFH9XcDBEyldozzFomukAsKslQVaro+17YckmrFBtOirTLFpLMoIemUgW2o7aRQ1CPuB\/yH6YV5jNOhrUaoFTRNqex+h8EeCDgnL5ld0BJ8jTXhQKUHudIBr3QfrjLyyINNxiidmIvv9\/Pf9cYmqLlw+A5mT8NAT+H6dZ1GiyimJYjYmg7fRfcgHaD07HLmCkUloxMa9IDSKjHWyj90IUUnsLA2DErPLwn8NCQ7nVIDrjG6kJvJzHAuRlY0T2ZyqU2gVavSuW\/2cF8tcsrKqq1VGg6gCwsoydTtdMX1HYsBhkFr4bkY4Y1jiQIoHYf3PuT74JrCzKZCaNUiWTWtHVK1CXVYJJAGliSTvtVDZsNQMMo0IxisSVjFYAojOAc9mCNgLbUAo92I7\/oL+l37Xg7MFQpLVpAs37DfCKZlg5k7FtQVyqFmY9rIVbNbjc++r6W7JFfEM1yC0YUhQpoBWKs\/wANY47FnqYlST7PfgY1y6uisgkXmStoVr+WwWmkoEUxJO47dJ7AnGGiZmVWIDxshfyBPIBpBI+blx2xY3YJ\/TMcQjcNK6kaQEAXSRCqyhQdzV6ixNfmA8DA2UqIc1nhl83l4ObpRxI0ppa0lXkC73fcDe7seRhB60zfSV5ruFcxqTRCmRgxQ6aBqM7sQbLVfTZM4e5mzZzFBYYhIzyaQ2p9J2WjQoaqIPe\/JICeXL8\/OxwkUOkymjepxrkAr5iF6KNnV73vMuFeNu7Ll6Vy5yuUjXSW1LqaNAGctJuAR3BApTt2B32wfPA1hbChxGLvWaY6NAN0oAAN72bNDanPDoDpVmABrpUdkB8e1nyf0+pHmKnMIibkEvLQFAaTps+GLaTXsvjy+IV27GRGPKT4xk41IxRJjNQOQaO5BAPsT5xzv1R6a\/DAOjFo+3Vuwb22FGx28ntvjo6v4wNxHLLMjRSC1YUQCQfcEMN1YGiCNwQDidj0clE8YFmRNgCbYbA7i8B5v1BBHYBLnv0jb\/Edq+14Z+tP2bZtpDLCeep7kBUlv3cCtbfxDv7DFWi9B54mhlcxf\/xsB\/iahiVJ+ysIgXGPUTzCh0r7A\/3Pn+n2wuyWWaR1Ud2YKoPkk0LPgb98XXI\/stzIo5gxwLsTZDvV7\/LYUbd7NexxLwyDLRfgZIjG03MHNjkbR1d+pyCug7UaodvfEtlcWi4cK9J5XhkXOzOmQrGztIV21r3VFP7wIAHnTuLOFXBuGyzz5iWRL1qWeNP\/AOiqKiStiYuYlqdyyHBHFszPnCyEPHlsowkeuuUyqtiHUwoMvUAxBolQbNE2HJZDVDDFBXJiKhnBPxSemXQ12VpnYvZLHYe+KSJuhrlcyc0gqxEQOYw25hrqRP4Lu289h5OFfC8qMrGYQSsKMUsf+y1hkdgdjGwKMT3RiRen5LNCoAAAAFUANgAOwA8YBzxCTK\/5ZByn9r3MZPirLp9S6+2ALF+f5igSAkITbKmnpkNgtpdWofMrAE9y1d7rnAoysckEUrq6zmNN9NRE8zWVrchA3fzQ2w4zUr5aaKIaeQ7Hls7N8KRw2mLYG1IWTSSRudN\/LdfznBWXiOktGDLE7LSycvUPmXQJQflAPet604uJEmOZpI415acyUrS6Ell1LWwDENoU\/wDEVGEnHODu7whlKI7FHKlpZAVVpEYlgQLYEEAHZjvvhomVzKFU1LoRbIjRaF7L33HZtgrH+mNOIR8xNIzUqy\/MisIk6ltkJBjDAagO9X7Y11Rjuzl\/GeHNl5yiIrAAujXvpJKECz8waxW\/f7YXZrKrq6gfFaVJFV7147D6AYsnrA6l\/EqxLjQDqbdtWtdAahewEgsWFKbe1dyKkLbTFNRLABbBHawfawR+mMJqno3jtWdl4Bw05mf8RKiiGFgsKAbao9tr\/Irdq7so76QTZJeFDmPOjFZigQHcrQ3pk7NZqzsaCgEVj2PYESF5GF1XrfUx7+FB\/hHcD73gqsex7AWYIxpIwUWTQ98ex7DEyv5rOGQiQN08xAq79XxFWtF0T8xJI6WNd0OB+KZgB3lcKViBYnankuoolN7bsL7HVV7Gsex7AAv4blQSsEoVyGaSZmFrzGtyN\/lIsDcigpF74n9SZNMw0UJkKRFqkZdzIQrsqJewGxuu1iu5Ixj2ABTxaWDL6csm8YUysl6tIjrfUxsuzFFNjtuO2+P2eZaOSZ5pVHykKTe7y0zn6EIqj\/mbwScex7AMvM2bCIFsqAm799OlRsL7ufH9fAI\/BcqwlLOBq5Ysg3u7dS\/8pjG\/kknuTj2PYBDcjGpGPY9gBmpGI2x7HsUiWERTAVuAMSmcfpj2PYhopSZX+LzqJUDsaLKQNtNc6qsDf5gKJ3vtim\/tM4fEuayiwZePU\/N6UGgO\/SIyxStlY6j9AbOMY9iZIrJjTh\/CZEi+AGlh35xvTJnWJ1SEEkApZYBzRYHT1LubZkM\/HJGDHsPl0ldLIRtpZDRQjtVY9j2KXRMklmwJnSJI2QmiRsfKkbqw+oIBH2x7HsaqKMZSYuZ\/xMLhgAxVVIIsJKjNYI\/MA\/jyPocVvjeZaIZaZtRWKWgxJZowbWWGVvNFaVz8w770X9j2Bh7HWW45rBMSPKWYm0FR6flU8x6U9IBIUkgk7YH4tzpE+O6Ilr8ONQ7E3svMlFEk0KCA798Zx7GiSozcnZVc9w9csJdEaGQJpJY69STaVUAtbMFk6KFWvnwKdK08DNGrkqD0nRr6aGnc\/LtXSNhj2PYmSo0g7R\/\/2Q==\">","92d77a48":"# Describing the data into numbers and making a pie chart","c2d399ba":"``From the pieplot we can see 49% are not getting tech support,29% are getting tech support and 22% do not have internet service``","dcd9fa97":"# Telecommunication Data","056fc334":"# Describing the data into numbers\n","4fc7d4a5":"# Finding the different types of datasets","090eace1":"**Here is says that more than 3500 clients use services on monthly basis and relatively less clients use on one and two year basis**","d15d16fc":"# Reading the files","504b5ddd":"# **IN this data set you will be able to analyse about the telecommunication market**","a3f0e34d":"# Finding the contract period of the clients","fda3ad33":"``Here we can see our data has 22 columns``","2e1c560c":"``Here  most of the people do not have churn ``","639d7c0d":"**It is clear that maximum clients use paperless billing methor and are eco-friendly**","4cc2b798":"# Finding the monthly billing of the clients ","38014543":"**On average 2\/3 of the clients who are married use additional services while**","4d9005c3":"# Finding the interdepent clients","727be5db":"# Finding that are clients eco friendly","24beddfe":"``About 2350 clients do not watch movies and about 2300 clients watch movies and 1300 clients  do not have internet``","60c179c3":"``Conclusion made from here is there are every customers using mobile phones``","e25e847b":"``Data shows that 51 % are males and 49% users are females``","5c95a1ef":"**No of clients with their with their contract types**","c774e365":"# Making the data in the form of a graph","51f695bf":"# Are clients getting tech support","58a6bb44":"<ul>\n    <li>Importing the suitable librarires <\/li>\n    <li>Reading the files <\/li> \n    <li>Cleaning the data<\/li>\n    <li> Visualisation of the data <\/li>\n    <li>Conclusion made from the data ","159c2ee0":"# Finding the phone service used  by the clients","9487d37f":"``Finding missing values in the dataset``","75f08fb4":"# CONTENTS","c7eea868":"``This data has 21 columns of objects``","d36628a0":"# Finding the tenure of the clients","7b09400d":"# Data Cleaning","56dd6c83":"``It does not have any duplicate values``"}}