{"cell_type":{"a0ea0490":"code","bf0a259c":"code","9699e68f":"code","705f504e":"code","48a350f1":"code","007ad243":"code","bf1f76d2":"code","cd0360ff":"code","3a7718bb":"code","d6b740ae":"code","971e934e":"code","f130bb4a":"code","f6aa5f48":"code","2aaa6ef1":"code","444d457b":"code","b9e3764f":"code","b11de56f":"code","c7ee2b4b":"markdown","424ada86":"markdown","459f297d":"markdown","c0421b9d":"markdown","f5b86c34":"markdown"},"source":{"a0ea0490":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt \nimport seaborn as sns\n%matplotlib inline\nimport plotly.express as px\nimport plotly.graph_objects as go\nimport plotly.offline as py\nimport plotly.express as px\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","bf0a259c":"df = pd.read_excel('\/kaggle\/input\/cookie-business\/cookie_business.xlsx')\ndf.head()","9699e68f":"# checking dataset\n\nprint (\"Rows     : \" ,df.shape[0])\nprint (\"Columns  : \" ,df.shape[1])\nprint (\"\\nFeatures : \\n\" ,df.columns.tolist())\nprint (\"\\nMissing values :  \", df.isnull().sum().values.sum())\nprint (\"\\nUnique values :  \\n\",df.nunique())","705f504e":"df = df.rename(columns={'Customer ID':'ID', 'Cookies bought each week': 'weekly', 'Favourite Cookie': 'favourite'})","48a350f1":"# Distribution of different type of amount\nfig , ax = plt.subplots(1,3,figsize = (12,5))\n\nID = df.ID.values\nAge = df.Age.values\nweekly = df.weekly.values\n\nsns.distplot(ID , ax = ax[0] , color = 'blue').set_title('Cookies Customer ID' , fontsize = 14)\nsns.distplot(Age , ax = ax[1] , color = 'cyan').set_title('Cookies Customer Age' , fontsize = 14)\nsns.distplot(weekly , ax = ax[2] , color = 'purple').set_title('Cookies bought weekly' , fontsize = 14)\n\n\nplt.show()","007ad243":"import matplotlib.gridspec as gridspec\nfrom scipy.stats import skew\nfrom sklearn.preprocessing import RobustScaler,MinMaxScaler\nfrom scipy import stats\nimport matplotlib.style as style\nstyle.use('seaborn-colorblind')","bf1f76d2":"def plotting_3_chart(df, feature): \n    ## Creating a customized chart. and giving in figsize and everything. \n    fig = plt.figure(constrained_layout=True, figsize=(10,6))\n    ## crea,ting a grid of 3 cols and 3 rows. \n    grid = gridspec.GridSpec(ncols=3, nrows=3, figure=fig)\n    #gs = fig3.add_gridspec(3, 3)\n\n    ## Customizing the histogram grid. \n    ax1 = fig.add_subplot(grid[0, :2])\n    ## Set the title. \n    ax1.set_title('Histogram')\n    ## plot the histogram. \n    sns.distplot(df.loc[:,feature], norm_hist=True, ax = ax1)\n\n    # customizing the QQ_plot. \n    ax2 = fig.add_subplot(grid[1, :2])\n    ## Set the title. \n    ax2.set_title('QQ_plot')\n    ## Plotting the QQ_Plot. \n    stats.probplot(df.loc[:,feature], plot = ax2)\n\n    ## Customizing the Box Plot. \n    ax3 = fig.add_subplot(grid[:, 2])\n    ## Set title. \n    ax3.set_title('Box Plot')\n    ## Plotting the box plot. \n    sns.boxplot(df.loc[:,feature], orient='v', ax = ax3 );\n \n\nprint('Skewness: '+ str(df['weekly'].skew())) \nprint(\"Kurtosis: \" + str(df['weekly'].kurt()))\nplotting_3_chart(df, 'weekly')","cd0360ff":"train_heat=df[df[\"weekly\"].notnull()]\ntrain_heat=train_heat.drop([\"weekly\"],axis=1)\nstyle.use('ggplot')\nsns.set_style('whitegrid')\nplt.subplots(figsize = (10,8))\n## Plotting heatmap. \n\n# Generate a mask for the upper triangle (taken from seaborn example gallery)\nmask = np.zeros_like(train_heat.corr(), dtype=np.bool)\nmask[np.triu_indices_from(mask)] = True\n\n\nsns.heatmap(train_heat.corr(), \n            cmap=sns.diverging_palette(255, 133, l=60, n=7), \n            mask = mask, \n            annot=True, \n            center = 0, \n           );\n## Give title. \nplt.title(\"Heatmap of All Cookies\", fontsize = 30);","3a7718bb":"fig = px.bar(df, \n             x='weekly', y='Age', color_discrete_sequence=['#2B3A67'],\n             title='Cookies!!!', text='Postcode')\nfig.show()","d6b740ae":"fig = px.bar(df, \n             x='Age', y='weekly', color_discrete_sequence=['crimson'],\n             title='Cookies!!!', text='ID')\nfig.show()","971e934e":"ax = df.groupby('weekly')['Age'].mean().plot(kind='barh', figsize=(12,8),\n                                                           title='Cookies Weekly')\nplt.xlabel('Mean estimated Cookies Weekly')\nplt.ylabel('Count')\nplt.show()","f130bb4a":"from category_encoders import OneHotEncoder\nfrom sklearn.linear_model import LinearRegression, Ridge\nfrom sklearn.preprocessing import StandardScaler, MinMaxScaler, MaxAbsScaler\n\ncols_selected = ['weekly']\nohe = OneHotEncoder(cols=cols_selected, use_cat_names=True)\ndf_t = ohe.fit_transform(df[cols_selected+['Age']])\n\n#scaler = MaxAbsScaler()\nX = df_t.iloc[:,:-1]\ny = df_t.iloc[:, -1].fillna(df_t.iloc[:, -1].mean()) \/ df_t.iloc[:, -1].max()\n\nmdl = Ridge(alpha=0.1)\nmdl.fit(X,y)\n\npd.Series(mdl.coef_, index=X.columns).sort_values().head(10).plot.barh()","f6aa5f48":"def plot_weekly(col, df, title):\n    fig, ax = plt.subplots(figsize=(18,6))\n    df.groupby(['weekly'])[col].sum().plot(rot=45, kind='bar', ax=ax, legend=True, cmap='bone')\n    ax.set_yticklabels(['{:,}'.format(int(x)) for x in ax.get_yticks().tolist()])\n    ax.set(Title=title, xlabel='weekly')\n    return ax","2aaa6ef1":"plot_weekly('weekly', df, 'Cookies bought each week');","444d457b":"ax = df.groupby('weekly')['ID', 'Age'].sum().plot(kind='bar', rot=45, figsize=(12,6), logy=True,\n                                                                 title='Cookies')\nplt.xlabel('Cookies bought each week')\nplt.ylabel('Count Log')\n\nplt.show()","b9e3764f":"#Code from Gabriel Preda\n#plt.style.use('dark_background')\ndef plot_count(feature, title, df, size=1):\n    f, ax = plt.subplots(1,1, figsize=(4*size,4))\n    total = float(len(df))\n    g = sns.countplot(df[feature], order = df[feature].value_counts().index[:20], palette='Set2')\n    g.set_title(\"Number and percentage of {}\".format(title))\n    if(size > 2):\n        plt.xticks(rotation=90, size=8)\n    for p in ax.patches:\n        height = p.get_height()\n        ax.text(p.get_x()+p.get_width()\/2.,\n                height + 3,\n                '{:1.2f}%'.format(100*height\/total),\n                ha=\"center\") \n    plt.show()","b11de56f":"plot_count(\"favourite\", \"Favourite Cookie\", df,4)","c7ee2b4b":"![](https:\/\/laughingsquid.com\/wp-content\/uploads\/cookie-monster-20080603-133713.jpg)https:\/\/laughingsquid.com\/cookie-monster-no-want-to-delete-cookies\/","424ada86":"Das War's, Kaggle Notebook Runner: Mar\u00edlia Prata   @mpwolke","459f297d":"#Skewness and Kurtosis of the Cookies! Only in Kaggle","c0421b9d":"![](https:\/\/i.imgflip.com\/1cakyr.jpg)https:\/\/imgflip.com\/meme\/47340360\/cookie-monster-computer","f5b86c34":"![](https:\/\/media3.giphy.com\/media\/54ZRhrb6hl15lK9nZk\/giphy.gif?cid=ecf05e47snlxl544kgz3go5shjdzxnkitjrrl2j4nppu26d7&rid=giphy.gif)"}}