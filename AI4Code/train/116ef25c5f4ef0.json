{"cell_type":{"4469b90c":"code","4ae379e6":"code","5cf630e8":"code","f6405411":"code","51c6fd76":"code","85feb160":"code","4099acdb":"code","243438c0":"code","83aefe23":"code","7d54f850":"code","f08711b4":"code","b16271cc":"code","aa094777":"code","dfb8375b":"code","21aefad2":"code","095a1d46":"code","cfb35abf":"code","75f8c8a9":"code","b87aa804":"code","ad2f60ed":"code","f0855ddb":"code","ad0925f6":"code","5fd46c07":"code","157bd292":"code","46a0011b":"code","d723ee67":"code","273a52e3":"code","8dd6d807":"code","7f026f5b":"code","5d19079d":"code","b874e3cd":"code","6aeadb60":"code","0ba65871":"code","bca1e89a":"code","99d5b4ea":"code","e6ecf937":"code","084cb7a3":"code","c4b2565a":"code","c169f5f4":"code","06f8a582":"code","e12f058d":"code","98a02d63":"code","6d0361ad":"code","6514c136":"code","3ed71a6a":"code","0108ccbd":"code","90ec2f89":"code","e33572ad":"code","488eb8d8":"code","027b5811":"code","036b6372":"code","6f0b51b7":"code","617efb37":"code","ba0aabfe":"code","5d06544f":"code","0a08b916":"code","d9b1fe1a":"code","d5345cf1":"markdown","8d1bbedd":"markdown","1473f240":"markdown","a5cedc04":"markdown","c1922cae":"markdown","a3afb174":"markdown","e482cf54":"markdown","bae2623c":"markdown","92f472cd":"markdown","700ceeba":"markdown","6e86e8ae":"markdown","108597d3":"markdown","a91d0e5f":"markdown","1b6cdc4a":"markdown","bc2721b3":"markdown","667c7719":"markdown","8d09d6e8":"markdown","1e896dea":"markdown","5cd3a46e":"markdown","e75ed709":"markdown","859ef8b5":"markdown","fd57931b":"markdown","d5a66e63":"markdown","7f9775ec":"markdown","fbbfcb6a":"markdown","c856fbb1":"markdown","15215334":"markdown","6d84f2f1":"markdown","064ee82f":"markdown","1dbeb3d3":"markdown"},"source":{"4469b90c":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport scipy as sp\nimport warnings\nimport os \nwarnings.filterwarnings(\"ignore\")\nimport datetime\n","4ae379e6":"data=pd.read_csv('\/kaggle\/input\/breast-cancer-wisconsin-data\/data.csv')\n","5cf630e8":"data.head()      #displaying the head of dataset they gives the 1st to 5 rows of the data","f6405411":"data.describe()      #description of dataset ","51c6fd76":"data.info()","85feb160":"data.shape       #569 rows and 33 columns","4099acdb":"data.columns     #displaying the columns of dataset","243438c0":"data.value_counts","83aefe23":"data.dtypes","7d54f850":"data.isnull().sum()","f08711b4":"data.drop('Unnamed: 32', axis = 1, inplace = True)\n","b16271cc":"data","aa094777":"data.corr()","dfb8375b":"plt.figure(figsize=(18,9))\nsns.heatmap(data.corr(),annot = True, cmap =\"Accent_r\")\n\n\n\n","21aefad2":"sns.barplot(x=\"id\", y=\"diagnosis\",data=data[160:190])\nplt.title(\"Id vs Diagnosis\",fontsize=15)\nplt.xlabel(\"Id\")\nplt.ylabel(\"Diagonis\")\nplt.show()\nplt.style.use(\"ggplot\")\n","095a1d46":"sns.barplot(x=\"radius_mean\", y=\"texture_mean\", data=data[170:180])\nplt.title(\"Radius Mean vs Texture Mean\",fontsize=15)\nplt.xlabel(\"Radius Mean\")\nplt.ylabel(\"Texture Mean\")\nplt.show()\nplt.style.use(\"ggplot\")\n","cfb35abf":" \nmean_col = ['diagnosis','radius_mean', 'texture_mean', 'perimeter_mean',\n       'area_mean', 'smoothness_mean', 'compactness_mean', 'concavity_mean',\n       'concave points_mean', 'symmetry_mean', 'fractal_dimension_mean']\n\nsns.pairplot(data[mean_col],hue = 'diagnosis', palette='Accent')\n","75f8c8a9":"sns.violinplot(x=\"smoothness_mean\",y=\"perimeter_mean\",data=data)","b87aa804":"plt.figure(figsize=(14,7))\nsns.lineplot(x = \"concavity_mean\",y = \"concave points_mean\",data = data[0:400], color='green')\nplt.title(\"Concavity Mean vs Concave Mean\")\nplt.xlabel(\"Concavity Mean\")\nplt.ylabel(\"Concave Points\")\nplt.show()\n\n","ad2f60ed":"worst_col = ['diagnosis','radius_worst', 'texture_worst',\n       'perimeter_worst', 'area_worst', 'smoothness_worst',\n       'compactness_worst', 'concavity_worst', 'concave points_worst',\n       'symmetry_worst', 'fractal_dimension_worst']\n\nsns.pairplot(data[worst_col],hue = 'diagnosis', palette=\"CMRmap\")","f0855ddb":"# Getting Features\n\nx = data.drop(columns = 'diagnosis')\n\n# Getting Predicting Value\ny = data['diagnosis']\n","ad0925f6":"\n#train_test_splitting of the dataset\nfrom sklearn.model_selection import train_test_split \nx_train,x_test,y_train,y_test = train_test_split(x,y,test_size=0.2,random_state=0)\n","5fd46c07":"print(len(x_train))\n","157bd292":"print(len(x_test))","46a0011b":"print(len(y_train))","d723ee67":"print(len(y_test))","273a52e3":"from sklearn.linear_model import LogisticRegression\nreg = LogisticRegression()\nreg.fit(x_train,y_train)                         \n","8dd6d807":"y_pred=reg.predict(x_test)\nfrom sklearn.metrics import accuracy_score,classification_report,confusion_matrix,r2_score\nprint(classification_report(y_test,y_pred))\nprint(confusion_matrix(y_test,y_pred))\nprint(\"Training Score: \",reg.score(x_train,y_train)*100)\n\n\n","7f026f5b":"data = pd.DataFrame({'Actual': y_test, 'Predicted': y_pred})\ndata\n\n\n\n\n","5d19079d":"print(accuracy_score(y_test,y_pred)*100)","b874e3cd":"from sklearn.model_selection import GridSearchCV\nparam = {\n         'penalty':['l1','l2'],\n         'C':[0.001, 0.01, 0.1, 1, 10, 20,100, 1000]\n}\nlr= LogisticRegression(penalty='l1')\ncv=GridSearchCV(reg,param,cv=5,n_jobs=-1)\ncv.fit(x_train,y_train)\ncv.predict(x_test)\n","6aeadb60":"print(\"Best CV score\", cv.best_score_*100)","0ba65871":"from sklearn.tree import DecisionTreeClassifier\ndtree = DecisionTreeClassifier(max_depth=6, random_state=123)\n\ndtree.fit(x_train,y_train)\n\n#y_pred = dtree.predict(x_test)\n","bca1e89a":"y_pred=dtree.predict(x_test)\nfrom sklearn.metrics import classification_report,confusion_matrix,accuracy_score,mean_squared_error\nprint(classification_report(y_test,y_pred))\nprint(confusion_matrix(y_test,y_pred))\nprint(\"Training Score: \",dtree.score(x_train,y_train)*100)\n\n","99d5b4ea":"print(accuracy_score(y_test,y_pred)*100)","e6ecf937":"from sklearn.ensemble import RandomForestClassifier\nrfc=RandomForestClassifier()\nrfc.fit(x_train,y_train)\n\n","084cb7a3":"y_pred=rfc.predict(x_test)\nfrom sklearn.metrics import classification_report,confusion_matrix,accuracy_score,mean_squared_error\nprint(classification_report(y_test,y_pred))\nprint(confusion_matrix(y_test,y_pred))\nprint(\"Training Score: \",rfc.score(x_train,y_train)*100)\n","c4b2565a":"print(accuracy_score(y_test,y_pred)*100)","c169f5f4":"from sklearn.neighbors import KNeighborsClassifier\nknn=KNeighborsClassifier(n_neighbors=7)\n\nknn.fit(x_train,y_train)\n","06f8a582":"y_pred=knn.predict(x_test)\nfrom sklearn.metrics import classification_report,confusion_matrix,accuracy_score,mean_squared_error,r2_score\nprint(classification_report(y_test,y_pred))\nprint(confusion_matrix(y_test,y_pred))\nprint(\"Training Score: \",knn.score(x_train,y_train)*100)\nprint(knn.score(x_test,y_test))\n","e12f058d":"print(accuracy_score(y_test,y_pred)*100)\n","98a02d63":"from sklearn.svm import SVC\n\nsvc = SVC()\nsvc.fit(x_train, y_train)\n","6d0361ad":"y_pred=svc.predict(x_test)\nfrom sklearn.metrics import classification_report,confusion_matrix,accuracy_score,mean_squared_error,r2_score\nprint(classification_report(y_test,y_pred))\nprint(confusion_matrix(y_test,y_pred))\nprint(\"Training Score: \",svc.score(x_train,y_train)*100)\nprint(svc.score(x_test,y_test))\n","6514c136":"print(\"Training Score: \",svc.score(x_train,y_train)*100)","3ed71a6a":"from sklearn.ensemble import AdaBoostClassifier\nadb = AdaBoostClassifier(base_estimator = None)\nadb.fit(x_train,y_train)\n\n\n\n\n\n","0108ccbd":"y_pred=adb.predict(x_test)\nfrom sklearn.metrics import classification_report,confusion_matrix,accuracy_score,mean_squared_error,r2_score\nprint(classification_report(y_test,y_pred))\nprint(confusion_matrix(y_test,y_pred))\nprint(\"Training Score: \",adb.score(x_train,y_train)*100)","90ec2f89":"print(accuracy_score(y_test,y_pred)*100)","e33572ad":"from sklearn.ensemble import GradientBoostingClassifier\ngbc=GradientBoostingClassifier()\ngbc.fit(x_train,y_train)\n","488eb8d8":"y_pred=gbc.predict(x_test)\nfrom sklearn.metrics import classification_report,confusion_matrix,accuracy_score,mean_squared_error,r2_score\nprint(classification_report(y_test,y_pred))\nprint(confusion_matrix(y_test,y_pred))\nprint(\"Training Score: \",gbc.score(x_train,y_train)*100)\nprint(gbc.score(x_test,y_test))\n","027b5811":"print(accuracy_score(y_test,y_pred)*100)","036b6372":"from xgboost import XGBClassifier\n\nxgb =XGBClassifier(objective ='reg:linear', colsample_bytree = 0.3, learning_rate = 0.1,\n                max_depth = 5, alpha = 10, n_estimators = 10)\n\nxgb.fit(x_train, y_train)\n","6f0b51b7":"y_pred=xgb.predict(x_test)\nfrom sklearn.metrics import classification_report,confusion_matrix,accuracy_score,mean_squared_error,r2_score\nprint(classification_report(y_test,y_pred))\nprint(confusion_matrix(y_test,y_pred))\nprint(\"Training Score: \",xgb.score(x_train,y_train)*100)\nprint(xgb.score(x_test,y_test))\n","617efb37":"print(\"Training Score: \",xgb.score(x_train,y_train)*100)","ba0aabfe":"data = pd.DataFrame({'Actual': y_test, 'Predicted': y_pred})\ndata","5d06544f":"from sklearn.naive_bayes import GaussianNB\ngnb = GaussianNB()\ngnb.fit(x_train,y_train)","0a08b916":"y_pred=gnb.predict(x_test)\nfrom sklearn.metrics import classification_report,confusion_matrix,accuracy_score,mean_squared_error,r2_score\nprint(classification_report(y_test,y_pred))\nprint(confusion_matrix(y_test,y_pred))\nprint(accuracy_score(y_test,y_pred))\nprint(\"Training Score: \",gnb.score(x_train,y_train)*100)\nprint(gnb.score(x_test,y_test))\n","d9b1fe1a":"data = pd.DataFrame({'Actual': y_test, 'Predicted': y_pred})\ndata","d5345cf1":"**So we get a accuracy score of 98.24 % using AdaBoostClassifier**","8d1bbedd":"# MODELS","1473f240":"# LOADING THE DATASET","a5cedc04":"**So we get a accuracy score of 63.7 % using SVC**","c1922cae":"# 4. KNeighborsClassifier\n\n","a3afb174":"# TRAINING AND TESTING DATA","e482cf54":"# VISUALIZING THE DATA","bae2623c":"# 9. Naive Bayes","92f472cd":"**So we get a accuracy score of 97.80 % using  XGBClassifier**","700ceeba":"**So we get a accuracy score of 58.7 % using logistic regression**","6e86e8ae":"# 6. AdaBoostClassifier","108597d3":"What Are the Symptoms of Breast Cancer?\n\nNew lump in the breast or underarm (armpit).\n\nThickening or swelling of part of the breast.\n\nIrritation or dimpling of breast skin.\n\n\nRedness or flaky skin in the nipple area or the breast.\n\nPulling in of the nipple or pain in the nipple area.\n\nNipple discharge other than breast milk, including blood.\n","a91d0e5f":"# 1. Logistic Regression","1b6cdc4a":"#  7. Gradient Boosting Classifier","bc2721b3":"# Breast Cancer (Diagnostic) Data Set\n","667c7719":"# 5. SVC","8d09d6e8":"**So we get a accuracy score of 96.49 % using Random Forest Classifier**","1e896dea":"**So we get a accuracy score of 95.61 % using GradientBoostingClassifier**","5cd3a46e":"**So now we conclude the accuracy of different models:**\n\n**1. AdaBoost Classifier = 98.24 %**\n\n**2. XGB Classifier= 97.84 %**\n\n**3. Random Forest Classifier =96.57 %**\n\n**4. Gradient Boosting Classifier= 95.66%**\n\n**5. Decision Tree Classifier= 94.78 %**\n\n**6. K Neighbours Classifier= 70.18 %**\n\n**7. SVC = 63.80 %**\n\n**8. Naiye Bayes= 63.30 %**\n\n**9. Logistic Regression = 58.82%**\n","e75ed709":"**So we get a accuracy score of 94.73 % using Decision Tree Classifier**","859ef8b5":"# 8. XGBClassifier","fd57931b":"# IMPORTING THE LIBRARIES","d5a66e63":"# 3. Random Forest Classifier","7f9775ec":"**Ada Boost Classifier got the highest accuracy**","fbbfcb6a":"# If you liked this notebook, please UPVOTE it.","c856fbb1":"# 2. DECISION TREE CLASSIFIER","15215334":"**Task : To predict whether the cancer is benign or malignant**","6d84f2f1":"**So we get a accuracy score of 70.17 % using KNeighborsClassifier**","064ee82f":"**So we get a accuracy score of 63.29 % using Naive Bayes**","1dbeb3d3":"**So we have to drop the Unnamed: 32 coulumn which contains NaN values**"}}