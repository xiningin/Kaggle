{"cell_type":{"1627b60a":"code","38256aff":"code","68316765":"code","b85447f6":"code","1262db6c":"code","53b363d0":"code","08751722":"code","767e8c91":"code","bd8b61f6":"code","0f11b351":"code","f0337fe6":"code","60aca4f3":"code","9ae33217":"code","064f2fdb":"code","4b7d5b45":"code","6d5f1f86":"code","48ee9a4c":"code","41df488d":"code","33e0e964":"code","8974990e":"code","129f1128":"code","bbea07c9":"code","a518b774":"code","19685dc9":"code","f4661de9":"code","be4b198d":"code","60b2b491":"code","a9604c1d":"code","65a464e4":"code","31aa2d3e":"code","7d7202bb":"code","d9b4122e":"code","8e74267a":"code","68616776":"code","5dc3fbc5":"markdown","caabe612":"markdown","79ed9ab2":"markdown","b7d6f454":"markdown","3123b6ca":"markdown","e68ea961":"markdown"},"source":{"1627b60a":"!pip install -qq git+https:\/\/www.github.com\/ildoonet\/tf-pose-estimation","38256aff":"!pip install -qq pycocotools","68316765":"%load_ext autoreload\n%autoreload 2\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nplt.rcParams[\"figure.figsize\"] = (8, 8)\nplt.rcParams[\"figure.dpi\"] = 125\nplt.rcParams[\"font.size\"] = 14\nplt.rcParams['font.family'] = ['sans-serif']\nplt.rcParams['font.sans-serif'] = ['DejaVu Sans']\nplt.style.use('ggplot')\nsns.set_style(\"whitegrid\", {'axes.grid': False})","b85447f6":"%matplotlib inline\nimport tf_pose\nimport cv2\nfrom glob import glob\nfrom tqdm import tqdm_notebook\nfrom PIL import Image\nimport numpy as np\nimport os\nimport math","1262db6c":"from tf_pose.estimator import TfPoseEstimator\nfrom tf_pose.networks import get_graph_path, model_wh\ntfpe = tf_pose.get_estimator()","53b363d0":"DEF_SHAPE = 256","08751722":"im_side = cv2.imread('..\/input\/pose-detection\/unnamed.jpg')\nres_side = cv2.resize(im_side, dsize=(DEF_SHAPE,DEF_SHAPE))\n#print(im_side.shape)\n# print(res_side.shape)","767e8c91":"plt.imshow(res_side)","bd8b61f6":"pts_side = tfpe.inference(npimg=res_side, upsample_size=4.0)\nprint(pts_side)","0f11b351":"new_image = TfPoseEstimator.draw_humans(res_side, pts_side, imgcopy=False)\nfig, ax1 = plt.subplots(1, 1, figsize=(10, 10))\nax1.imshow(new_image[:, :, ::-1])","f0337fe6":"body_to_dict = lambda c_fig: {'bp_{}_{}'.format(k, vec_name): vec_val \n                              for k, part_vec in c_fig.body_parts.items() \n                              for vec_name, vec_val in zip(['x', 'y', 'score'],\n                                                           (part_vec.x, 1-part_vec.y, part_vec.score))}\nc_fig_side = pts_side[0]\nbody_to_dict(c_fig_side)","60aca4f3":"# print(pts_side[0].body_parts.items())","9ae33217":"count = 0\nshldr=[0,0]\nhip=[0,0]\nknee=[0,0]\near=[0,0]\nfor k, part_vec in pts_side[0].body_parts.items():\n    if k==5:\n        count+=1\n        shldr[0]=part_vec.x\n        shldr[1]=part_vec.y\n    if k==11:\n        count+=1\n        hip[0]=part_vec.x\n        hip[1]=part_vec.y\n    if k==12:\n        count+=1\n        knee[0]=part_vec.x\n        knee[1]=part_vec.y\n    if k==17:\n        count+=1\n        ear[0]=part_vec.x\n        ear[1]=part_vec.y","064f2fdb":"if count<4:\n    print(\"image not ideal for work\")","4b7d5b45":"def length(arr1,arr2):\n    return (math.sqrt((arr1[0]-arr2[0])**2+(arr1[1]-arr2[1])**2))","6d5f1f86":"ang =math.acos((((ear[0]-shldr[0])*(shldr[0]-hip[0]))+((ear[1]-shldr[1])*(shldr[1]-hip[1])))\/\n               ((length(ear,shldr))*(length(shldr, hip))))\nang = math.degrees(ang)*100\/90","48ee9a4c":"print(ang,\"%\")","41df488d":"hipt = ((knee[0]-shldr[0])\/(knee[1]-shldr[1]))*(hip[1]-knee[1])+knee[0]\nslch_scr = abs((hipt-hip[0])\/(knee[1]-shldr[1])*100)","33e0e964":"print(hipt)\nprint(slch_scr,\"%\")","8974990e":"eart = ((hip[0]-shldr[0])\/(hip[1]-shldr[1]))*(ear[1]-shldr[1])+shldr[0]\nkypho_scr = abs((eart-ear[0])\/(hip[1]-shldr[1])*100)","129f1128":"print(eart)\nprint(kypho_scr,\"%\")","bbea07c9":"hipt = ((ear[0]-knee[0])\/(ear[1]-knee[1]))*(hip[1]-ear[1])+ear[0]\nlordo_scr = abs((hipt-hip[0])\/(ear[1]-knee[1]))*100","a518b774":"print(hipt)\nprint(lordo_scr,\"%\")","19685dc9":"im_front = cv2.imread('..\/input\/pose-detection\/Josh-Simson.jpg')\nres_front = cv2.resize(im_front, dsize=(DEF_SHAPE,DEF_SHAPE))","f4661de9":"plt.imshow(res_front)","be4b198d":"pts_front = tfpe.inference(npimg=res_front, upsample_size=4.0)\nprint(pts_front)","60b2b491":"new_image = TfPoseEstimator.draw_humans(res_front, pts_front, imgcopy=False)\nfig, ax1 = plt.subplots(1, 1, figsize=(10, 10))\nax1.imshow(new_image[:, :, ::-1])","a9604c1d":"body_to_dict = lambda c_fig: {'bp_{}_{}'.format(k, vec_name): vec_val \n                              for k, part_vec in c_fig.body_parts.items() \n                              for vec_name, vec_val in zip(['x', 'y', 'score'],\n                                                           (part_vec.x, 1-part_vec.y, part_vec.score))}\nc_fig_front = pts_front[0]\nbody_to_dict(c_fig_front)","65a464e4":"count = 0\nleft_hip=[0,0]\nright_hip=[0,0]\nleft_knee=[0,0]\nright_knee=[0,0]\nleft_foot=[0,0]\nright_foot=[0,0]\nfor k, part_vec in pts_front[0].body_parts.items():\n    if k==8:\n        count+=1\n        right_hip[0]=part_vec.x\n        right_hip[1]=part_vec.y\n    if k==9:\n        count+=1\n        right_knee[0]=part_vec.x\n        right_knee[1]=part_vec.y\n    if k==10:\n        count+=1\n        right_foot[0]=part_vec.x\n        right_foot[1]=part_vec.y\n    if k==11:\n        count+=1\n        left_hip[0]=part_vec.x\n        left_hip[1]=part_vec.y\n    if k==12:\n        count+=1\n        left_knee[0]=part_vec.x\n        left_knee[1]=part_vec.y\n    if k==13:\n        count+=1\n        left_foot[0]=part_vec.x\n        left_foot[1]=part_vec.y","31aa2d3e":"if count<6:\n    print(\"image not ideal to work\")","7d7202bb":"l_knee_t = ((left_foot[0]-left_hip[0])\/(left_foot[1]-left_hip[1]))*(left_knee[1]-left_foot[1])+left_foot[0]\nleft_leg_scr = (-1)*((l_knee_t-left_knee[0])\/(left_foot[1]-left_hip[1]))*250","d9b4122e":"print(l_knee_t)\nprint(left_leg_scr,\"%\")","8e74267a":"r_knee_t = ((right_foot[0]-right_hip[0])\/(right_foot[1]-right_hip[1]))*(right_knee[1]-right_foot[1])+right_foot[0]\nright_leg_scr = ((r_knee_t-right_knee[0])\/(right_foot[1]-right_hip[1]))*250","68616776":"print(r_knee_t)\nprint(right_leg_scr,\"%\")","5dc3fbc5":"# Swayback score\nideally zero","caabe612":"# Front head angle\nin degrees","79ed9ab2":"# Knock knees\/bow legs\npositive score means bow legs, negative score means knock knees","b7d6f454":"# **Slouch Score**\nideally slouch score should be zero","3123b6ca":"# Kyphotic curve score\nideally zero","e68ea961":"## Libraries we need\nInstall tf_pose and pycocotools"}}