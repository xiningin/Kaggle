{"cell_type":{"57f3df03":"code","611d3c3b":"code","ec3b3eb8":"code","f0b79bc1":"code","4993d611":"code","2a5be42b":"code","429a28c5":"code","0ee34dff":"code","fff9d647":"code","e6cd1f8b":"code","0f78247e":"code","b1e7ebac":"code","56491bc8":"code","6c3a32b5":"code","7f1475c2":"code","3bbdd198":"code","c9b0f318":"code","08070f09":"code","a578a7c0":"code","8bc5c269":"code","ce0a830d":"code","3d3da519":"code","9075828f":"code","a4f718cd":"code","a5c9f600":"code","eb880216":"code","37e1e363":"markdown","451c040d":"markdown","9d6c4a7c":"markdown","e9abd79f":"markdown"},"source":{"57f3df03":"import pandas as pd\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nimport numpy as np","611d3c3b":"Data=pd.read_csv('..\/input\/diabetescsv\/diabetes.csv')","ec3b3eb8":"Data.head(10)","f0b79bc1":"sns.heatmap(Data.corr(),cmap = 'RdGy')","4993d611":"sns.set_theme(style=\"ticks\")\nsns.pairplot(Data,hue='Outcome')","2a5be42b":"print(Data.dtypes)","429a28c5":"sns.displot(Data.Outcome)","0ee34dff":"for i in Data.columns:\n   missing_data=Data[i].isnull().sum()\n   percent_missing=(missing_data\/len(Data))*100\n   print(i+' missing:',missing_data,\"values\",\",percent\", percent_missing)\n    ","fff9d647":"X=np.array(Data.iloc[:,:8]).reshape(-1,8)\nY=np.array(Data.iloc[:,-1]).reshape(-1,1)","e6cd1f8b":"print(X.shape)\nprint(Y.shape)","0f78247e":"from sklearn.model_selection import train_test_split\nX_train,X_test,Y_train,Y_test=train_test_split(X,Y,test_size=0.3)","b1e7ebac":"from sklearn.preprocessing import StandardScaler\nsc=StandardScaler()\nX_train = sc.fit_transform(X_train)\nX_test=sc.transform(X_test)","56491bc8":"print(\"X_train\",X_train.shape)\nprint(\"Y_train\",Y_train.shape)\nprint(\"X_test\",X_test.shape)\nprint(\"Y_test\",Y_test.shape)","6c3a32b5":"from sklearn.model_selection import cross_val_score\nfrom sklearn.tree import DecisionTreeClassifier\ndepth = []\nfor i in range(3,20):\n    clf = DecisionTreeClassifier(max_depth=i)\n    scores = cross_val_score(estimator=clf, X=X, y=Y, cv=10)\n    depth.append((i,scores.mean()))\nprint(depth)","7f1475c2":"plt.plot(*zip(*depth))\nplt.show()","3bbdd198":"from sklearn.model_selection import  GridSearchCV\nparameters={'max_depth':range(3,30)}\nclf = GridSearchCV(DecisionTreeClassifier(), parameters)\nclf.fit(X_train,Y_train)\ntree_model = clf.best_estimator_\nprint (clf.best_score_, clf.best_params_)","c9b0f318":"from sklearn.tree import plot_tree\nplt.figure(figsize=(50,25))\na = plot_tree(tree_model, \n              feature_names=Data.iloc[:,:8].columns, \n              class_names='Outcome', \n              filled=True, \n              rounded=True, \n              fontsize=14)","08070f09":"print('Train Data:',tree_model.score(X_train,Y_train))\nprint('Test Data: ',tree_model.score(X_test,Y_test))","a578a7c0":"from sklearn.metrics import classification_report, plot_confusion_matrix,plot_roc_curve\nprint (classification_report(Y_train,tree_model.predict(X_train)))\nplot_confusion_matrix(tree_model,X_train, Y_train)\nplot_roc_curve(tree_model,X_train, Y_train)\nplt.show()","8bc5c269":"from sklearn.metrics import classification_report, plot_confusion_matrix,plot_roc_curve\nprint (classification_report(Y_test,tree_model.predict(X_test)))\nplot_confusion_matrix(tree_model,X_test, Y_test)\nplot_roc_curve(tree_model,X_test, Y_test)\nplt.show()","ce0a830d":"from sklearn.ensemble import RandomForestClassifier\nn_estimators = 100\nn_estimator=[]\noob=[]\noob2=[]\nforest = RandomForestClassifier(warm_start=True, oob_score=True)\nforest2 = RandomForestClassifier(criterion='entropy',warm_start=True, oob_score=True)\nfor i in range(1, n_estimators + 1):\n    forest.set_params(n_estimators=i).fit(X_train,Y_train)\n    forest2.set_params(n_estimators=i).fit(X_train,Y_train)\n    n_estimator.append(i)\n    oob.append(forest.oob_score_)\n    oob2.append(forest2.oob_score_)","3d3da519":"plt.plot(n_estimator,oob, label = 'gini')\nplt.plot(n_estimator,oob2,'r',label='entropy')\nplt.xlabel(\"n_estimator\")\nplt.ylabel(\"oob_score\")\nplt.legend(loc='best')\nplt.show()","9075828f":"from sklearn.ensemble import RandomForestClassifier\nclf=RandomForestClassifier(n_estimators=60, max_depth=5,random_state=0,oob_score=True)\nclf.fit(X_train,Y_train)\nprint(\"OOB_score:\",clf.oob_score_)\nprint('Train Data:',clf.score(X_train,Y_train))\nprint('Test Data: ',clf.score(X_test,Y_test))","a4f718cd":"from sklearn.metrics import classification_report, plot_confusion_matrix,plot_roc_curve\nprint (classification_report(Y_train,clf.predict(X_train)))\nplot_confusion_matrix(clf,X_train, Y_train)\nplot_roc_curve(clf,X_train, Y_train)\nplt.show()","a5c9f600":"from sklearn.metrics import classification_report, plot_confusion_matrix,plot_roc_curve\nprint (classification_report(Y_test,clf.predict(X_test)))\nplot_confusion_matrix(clf,X_test, Y_test)\nplot_roc_curve(clf,X_test, Y_test)\nplt.show()","eb880216":"from sklearn.svm import SVC\nclf_SVM=SVC(C=1,kernel='rbf')\nclf_SVM.fit(X_train,Y_train)\nprint (classification_report(Y_test,clf_SVM.predict(X_test)))\nplot_roc_curve(clf_SVM,X_test, Y_test)\nplot_confusion_matrix(clf_SVM,X_test,Y_test)","37e1e363":"# Pre-Processing Data","451c040d":"# Traning Model Perceptron","9d6c4a7c":"# Training Model Decision Tree","e9abd79f":"# Train Model RanDomForest"}}