{"cell_type":{"2bbb2e8f":"code","f8016c6e":"code","1292cdd4":"code","959afc46":"code","87c2343e":"code","59d01d15":"code","884cb0fa":"code","3a388b99":"code","6f3f79d1":"code","787ad195":"code","2ddafbe3":"code","de1e7946":"code","56aa8059":"code","b282d2ea":"code","34d81bc3":"code","049e7013":"code","386cb63a":"code","b0ec63b4":"code","228fe1a0":"code","a35939bb":"code","d9c017ab":"code","9176ddc4":"code","5915cc9a":"code","e5788c97":"code","9da988d0":"code","c0603539":"code","7bfd9387":"code","306c63f3":"code","b1cf0eea":"code","b1d45c71":"code","cf3d635e":"code","80e66ef9":"code","5f69d302":"code","c4ad2f35":"code","96d53642":"code","2ef47306":"code","7e44fb50":"code","15359f33":"code","e186db83":"code","26c04f4f":"code","83cdf86d":"code","49d32331":"markdown","46bc62bd":"markdown","c569094b":"markdown","acef39e3":"markdown","0266697d":"markdown","aece9550":"markdown","11796d19":"markdown","92b6f2aa":"markdown","25ce978d":"markdown","ade9e6ef":"markdown","ff9d6939":"markdown","8c2477d9":"markdown","4f5da05d":"markdown"},"source":{"2bbb2e8f":"import pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport numpy as np\nfrom scipy.stats import norm\nfrom sklearn.preprocessing import StandardScaler\nfrom scipy import stats\nimport warnings\nwarnings.filterwarnings('ignore')\n%matplotlib inline\nfrom sklearn.preprocessing import LabelEncoder\nfrom scipy.stats import norm, skew\nfrom scipy.special import boxcox1p\nfrom sklearn.linear_model import LinearRegression\nfrom sklearn.linear_model import Ridge\nfrom sklearn.linear_model import Lasso\nfrom sklearn.model_selection import GridSearchCV\nfrom sklearn.pipeline import make_pipeline\nfrom sklearn.preprocessing import RobustScaler\nfrom sklearn.base import BaseEstimator, TransformerMixin, RegressorMixin, clone\nfrom sklearn.model_selection import KFold, cross_val_score, train_test_split\nfrom sklearn.metrics import mean_squared_error, r2_score","f8016c6e":"df_train = pd.read_csv('..\/input\/house-prices-advanced-regression-techniques\/train.csv')\ndf_test = pd.read_csv('..\/input\/house-prices-advanced-regression-techniques\/test.csv')","1292cdd4":"df_train.dtypes.array","959afc46":"sns.distplot(df_train['SalePrice'] , fit=norm);\nfig = plt.figure()\nres = stats.probplot(df_train['SalePrice'], plot=plt)\nplt.show()","87c2343e":"df_train[\"SalePrice\"] = np.log1p(df_train[\"SalePrice\"])","59d01d15":"sns.distplot(df_train['SalePrice'] , fit=norm);\nfig = plt.figure()\nres = stats.probplot(df_train['SalePrice'], plot=plt)\nplt.show()","884cb0fa":"sns.set()\ncols = ['SalePrice', 'OverallQual', 'GrLivArea', 'GarageCars', 'TotalBsmtSF', 'FullBath', 'YearBuilt']\nsns.pairplot(df_train[cols], size = 2.5)\nplt.show();","3a388b99":"sns.pairplot(df_train[[\"SalePrice\", 'GrLivArea']])","6f3f79d1":"df_train.drop(df_train[(df_train['GrLivArea']>4000) & (df_train['SalePrice']<300000)].index, inplace=True)","787ad195":"corrmat = df_train.corr()","2ddafbe3":"k = 10\ncols = corrmat.nlargest(k, 'SalePrice')['SalePrice'].index\ncm = np.corrcoef(df_train[cols].values.T)\nsns.set(font_scale=1.25)\nhm = sns.heatmap(cm, cbar=True, annot=True, \n                 square=True, fmt='.2f', annot_kws={'size': 10}, yticklabels=cols.values, xticklabels=cols.values)\nplt.show()","de1e7946":"target = df_train.SalePrice.copy()","56aa8059":"df = pd.concat((df_train, df_test)).reset_index(drop=True)\ndf.drop(['SalePrice'], axis=1, inplace=True)\nprint(\"all_data size is : {}\".format(df.shape))","b282d2ea":"total = df.isnull().sum().sort_values(ascending=False)\npercent = (df.isnull().sum() \/ df.isnull().count()).sort_values(ascending=False)\nmissing_data = pd.concat([total, percent], axis=1, keys=['Total', 'Percent'])\nmissing_data.head(20)","34d81bc3":"for col in [\"PoolQC\", \"MiscFeature\", \"Alley\", \"Fence\", \"FireplaceQu\"] :\n    df[col] = df[col].fillna(\"No\")\nfor col in ['GarageType', 'GarageFinish', 'GarageQual', 'GarageCond']:\n    df[col] = df[col].fillna('No')\nfor col in ['GarageYrBlt', 'GarageArea', 'GarageCars']:\n    df[col] = df[col].fillna(0)\nfor col in ['BsmtFinSF1', 'BsmtFinSF2', 'BsmtUnfSF','TotalBsmtSF', 'BsmtFullBath', 'BsmtHalfBath']:\n    df[col] = df[col].fillna(0)\nfor col in ['BsmtQual', 'BsmtCond', 'BsmtExposure', 'BsmtFinType1', 'BsmtFinType2']:\n    df[col] = df[col].fillna('No')","049e7013":"df[\"MasVnrType\"] = df[\"MasVnrType\"].fillna(\"None\")\ndf[\"MasVnrArea\"] = df[\"MasVnrArea\"].fillna(0)","386cb63a":"df.MSZoning.hist()","b0ec63b4":"df['MSZoning'] = df['MSZoning'].fillna(df['MSZoning'].mode()[0])","228fe1a0":"df[\"Functional\"] = df[\"Functional\"].fillna(\"Typ\")","a35939bb":"df[\"LotFrontage\"] = df.groupby(\"Neighborhood\")[\"LotFrontage\"].transform(lambda x: x.fillna(x.median()))\ntotal = df.isnull().sum().sort_values(ascending=False)\npercent = (df.isnull().sum() \/ df.isnull().count()).sort_values(ascending=False)\nmissing_data = pd.concat([total, percent], axis=1, keys=['Total', 'Percent'])\nmissing_data.head(20)","d9c017ab":"df['KitchenQual'] = df['KitchenQual'].fillna(df['KitchenQual'].mode()[0])","9176ddc4":"df['MSSubClass'] = df['MSSubClass'].fillna(\"No\")\ndf['Exterior1st'] = df['Exterior1st'].fillna(df['Exterior1st'].mode()[0])\ndf['Exterior2nd'] = df['Exterior2nd'].fillna(df['Exterior2nd'].mode()[0])\ndf['Electrical'] = df['Electrical'].fillna(df['Electrical'].mode()[0])\ndf.drop([\"Utilities\"], axis=1, inplace=True)","5915cc9a":"for col in [\"MSSubClass\", \"OverallCond\", \"YrSold\", \"MoSold\"]:\n    df[col] = df[col].apply(str)","e5788c97":"##Ordinal Encoding for those variables:\ncols = ('FireplaceQu', 'BsmtQual', 'BsmtCond', 'GarageQual', 'GarageCond', \n        'ExterQual', 'ExterCond','HeatingQC', 'PoolQC', 'KitchenQual', 'BsmtFinType1', \n        'BsmtFinType2', 'Functional', 'Fence', 'BsmtExposure', 'GarageFinish', 'LandSlope',\n        'LotShape', 'PavedDrive', 'Street', 'Alley', 'CentralAir', 'MSSubClass', 'OverallCond', \n        'YrSold', 'MoSold')\n\nfor c in cols:\n    lbl = LabelEncoder() \n    lbl.fit(list(df[c].values)) \n    df[c] = lbl.transform(list(df[c].values))","9da988d0":"##Check Skewness:\nnumeric_feats = df.dtypes[df.dtypes != \"object\"].index\nskewed_feats = df[numeric_feats].apply(lambda x: skew(x)).sort_values(ascending=False)\nskewness = pd.DataFrame({'Skew' : skewed_feats})\nskewness.head(10)","c0603539":"skewed_features = skewness.index\nlam = 0.15\nfor col in skewed_features:\n    df[col] = boxcox1p(df[col], lam)","7bfd9387":"df.drop([\"Id\"], axis=1, inplace=True)\ndf = pd.get_dummies(df)\ntrain = df[:df_train.shape[0]]\ntest = df[df_train.shape[0]:]","306c63f3":"num_vars = train.select_dtypes(include=['int64','float64']).columns\nscaler = StandardScaler()\ntrain[num_vars] = scaler.fit_transform(train[num_vars])\ntest[num_vars] = scaler.transform(test[num_vars])","b1cf0eea":"X_train, X_test, y_train, y_test = train_test_split(train, target, test_size=0.2, random_state=42)","b1d45c71":"params = {'alpha': [0.0001, 0.001, 0.01, 0.05, 0.1, \n                 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1.0, 2.0, 3.0, \n                 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0, 20, 50, 100]\n         }\n\n\nridge = Ridge()\n\nfolds = 5\nmodel_cv = GridSearchCV(estimator = ridge, \n                        param_grid = params, \n                        scoring= 'neg_mean_squared_error', \n                        cv = folds, \n                        return_train_score=True,\n                        verbose = 1)    \n\nmodel_cv.fit(X_train, y_train) ","cf3d635e":"ridge = model_cv.best_estimator_","80e66ef9":"y_train_pred_ridge = ridge.predict(X_train)\nprint(r2_score(y_true=y_train, y_pred=y_train_pred_ridge))","5f69d302":"y_test_pred_ridge = ridge.predict(X_test)\nprint(r2_score(y_true=y_test, y_pred=y_test_pred_ridge))","c4ad2f35":"print ('RMSE Validation is: \\n', mean_squared_error(y_test, y_test_pred_ridge))","96d53642":"params = {'alpha': [0.00005, 0.0001, 0.001, 0.008, 0.01]}\nlasso = Lasso()\n\nmodel_cv_l = GridSearchCV(estimator = lasso, \n                        param_grid = params, \n                        scoring= 'neg_mean_squared_error', \n                        cv = folds, \n                        return_train_score=True,\n                        verbose = 1)            \n\nmodel_cv_l.fit(X_train, y_train)","2ef47306":"lasso = model_cv_l.best_estimator_","7e44fb50":"y_train_pred_lasso = lasso.predict(X_train)\nprint(r2_score(y_true=y_train, y_pred=y_train_pred_lasso))","15359f33":"y_test_pred_lasso = lasso.predict(X_test)\nprint(r2_score(y_true=y_test, y_pred=y_test_pred_lasso))","e186db83":"print ('RMSE Validation is: \\n', mean_squared_error(y_test, y_test_pred_lasso))","26c04f4f":"preds = np.exp(ridge.predict(test))\npredictions = pd.DataFrame({'Id': df_test['Id'] ,'SalePrice': preds })\npredictions.to_csv(\"preds.csv\",index=False)","83cdf86d":"predictions.SalePrice","49d32331":"** The Paireplot helps me to distinguish the distribution of variable itself, and the relationships among variables.**","46bc62bd":"\nMissing Data:","c569094b":"**Training Models:**","acef39e3":"**Removing OutLiers**","0266697d":"**preparing submition**","aece9550":"**\nExploring the target variable:**","11796d19":"Imputing Missing data:","92b6f2aa":"**\nApplying One-Hot Encoding:**","25ce978d":"**Trying Ridge Regression:**","ade9e6ef":"**Trying Lasso Regression**\n","ff9d6939":"**The Remaining features has only 1 or 2 Na values, so i dropped them.**","8c2477d9":"**\nHouse Prices - Advanced Regression Techniques**","4f5da05d":"**Applying one of the most powerfull transformation methods Box-Cox transformation**"}}