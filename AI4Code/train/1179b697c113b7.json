{"cell_type":{"73b24145":"code","ef744847":"code","bca27930":"code","24cd6351":"code","d748d2fa":"code","5b8acd12":"code","f502f05b":"code","5d9f5cca":"code","fdb4c654":"code","a846fcff":"code","ea113526":"code","2e999b56":"code","dd426e94":"code","303f1dda":"code","22a693e8":"code","3133dd55":"code","30d80b26":"code","2fd45538":"code","5acda615":"code","e2b581bf":"code","93ff35cf":"code","a8185b5e":"code","fece7396":"code","4a86da39":"code","4eb79807":"code","9ac1cdd9":"code","a98fb7cf":"code","a60f28a9":"code","cd5e0b21":"code","a7c1dda0":"code","97961db7":"code","7c0a631d":"code","e54569f3":"code","062bc719":"code","4b3e0a16":"code","682598db":"code","c2fd69e4":"code","63a21016":"markdown","5b3e49e3":"markdown","0ef4f72a":"markdown","ddca8536":"markdown","2cd8143d":"markdown","f1b02456":"markdown","ef4b59b0":"markdown","58d5e45c":"markdown","dcba092c":"markdown","9be34a1e":"markdown","34ada7a1":"markdown","527ea4f7":"markdown","7a1c3399":"markdown","2aade1da":"markdown","dbc1e635":"markdown","7d103973":"markdown","c767f918":"markdown","d6778367":"markdown","87572367":"markdown","04429d1f":"markdown","70ac8082":"markdown","5debef8c":"markdown","de974efa":"markdown","62b4f288":"markdown","012b0e73":"markdown","1431b2bf":"markdown","af2a628f":"markdown","649a4a58":"markdown","81a115f5":"markdown","7ffd7a89":"markdown","6a1bc982":"markdown","80d97bfe":"markdown","e2d05cfb":"markdown","c282faca":"markdown","b8063f65":"markdown","00c1cf2b":"markdown"},"source":{"73b24145":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\nfrom sklearn import preprocessing\nfrom sklearn.linear_model import LinearRegression\nfrom sklearn.model_selection import train_test_split\nfrom sklearn import metrics\nfrom sklearn.model_selection import cross_val_score\nfrom sklearn.preprocessing import PolynomialFeatures\nfrom sklearn.linear_model import Ridge\n\n%matplotlib inline\nsns.set_style(\"darkgrid\")","ef744847":"df = pd.read_csv(\"..\/input\/new-york-city-airbnb-open-data\/AB_NYC_2019.csv\")\ndf.sample(5)","bca27930":"df.info()","24cd6351":"df.dtypes","d748d2fa":"# Fix datatype\ndf['last_review'] = pd.to_datetime(df['last_review'])","5b8acd12":"# dealing with missing data\ndf.isnull().sum()","f502f05b":"df['name'].fillna('None', inplace=True)\ndf['host_name'].fillna('None', inplace=True)\ndf['last_review'].fillna('None', inplace=True)","5d9f5cca":"review_avg = df['reviews_per_month'].mean()\ndf['reviews_per_month'].fillna(review_avg, inplace = True)","fdb4c654":"df.isnull().any()","a846fcff":"plt.figure(figsize=(8, 6))\nsns.distplot(df['price'], bins=200, kde=True)\nplt.xscale('log') # Log transform the price \nplt.xticks([100, 200, 500, 1000, 10000], ['100', '200', '500', '1k', '10k'])\nplt.ylabel('Percentage', fontsize=12)\nplt.xlabel('Price (dollar)', fontsize=12)\nplt.title('Listed Price Distribution', fontsize=14);","ea113526":"plt.figure(figsize=(8, 6))\nsns.distplot(df['reviews_per_month'], kde=True)\nplt.ylabel('Percentage', fontsize=12)\nplt.xlabel('Reviews per Month', fontsize=12)\nplt.title('Reviews per Month Distribution', fontsize=14);","2e999b56":"neighbourhood_counts = df['neighbourhood_group'].value_counts()\nplt.figure(figsize=(8, 8))\nsns.barplot(neighbourhood_counts.index, neighbourhood_counts.values, palette='RdBu')\nplt.xlabel('Neighbourhood', fontsize=12)\nplt.ylabel('Counts', fontsize=12)\nplt.title('Popular Neighbourhood', fontsize=14);","dd426e94":"df.minimum_nights.describe()\nplt.figure(figsize=(8, 6))\nsns.countplot(data=df, x='minimum_nights')\nplt.xlim(0, 40)\nplt.ylabel('Percentage', fontsize=12)\nplt.xlabel('Minimum Stayed', fontsize=12)\ntick = [1,5,10,15,20,25,30,35,40]\nplt.xticks(tick, tick)\nplt.title('Minimum Stay Distribution', fontsize=14);","303f1dda":"plt.figure(figsize=(8, 6))\nsns.regplot(data=df, x='reviews_per_month', y='price', color=sns.color_palette()[0], \n                x_jitter = 0.04, y_jitter = 0.04, fit_reg=False, scatter_kws={'alpha': 0.5})\nplt.yscale('log')\nplt.yticks([100, 200, 500, 1000, 10000], ['100', '200', '500', '1k', '10k'])\nplt.xlabel('Review Per Month', fontsize=12)\nplt.ylabel('Price (dollar)', fontsize=12)\nplt.xlim(0, 20)\nplt.title('Review VS. Price', fontsize=14);","22a693e8":"plt.figure(figsize=(8, 6))\nsns.barplot(data=df, x='room_type', y='price', color=sns.color_palette()[0]);\nplt.xlabel('Room Type', fontsize=12)\nplt.ylabel('Price (dollar)', fontsize=12)\nplt.title('Price for Different Room Type', fontsize=14);","3133dd55":"df['price'].describe()\n# segment price into two groups \nbin_edges = [0, 106, 10000]\nbin_name = ['low', 'high']\ndf['price_bin'] = pd.cut(df['price'], bins=bin_edges, labels=bin_name)\n\n# get the post content for each price group\nlow = ''\ndf_low = df[df['price_bin'] == 'low']['name'].astype(str)\nfor i in range(len(df_low)):\n    words = df_low.iloc[i].split(' ')\n    for word in words:\n        low += word+' '\n        \nhigh = ''\ndf_high = df[df['price_bin'] == 'high']['name'].astype(str)\nfor i in range(len(df_high)):\n    words = df_high.iloc[i].split(' ')\n    for word in words:\n        high += word+' '","30d80b26":"# Get the most popular 5 words for each price group \nfrom collections import Counter\nlow_Counter = Counter(low.lower().split(' '))\nlow_occur = low_Counter.most_common(5)\n\nhigh_Counter = Counter(high.lower().split(' '))\nhigh_occur = high_Counter.most_common(5)\n\nlow_df = pd.DataFrame(low_occur, columns=['word', 'count'])\nlow_df = low_df.iloc[1:,:]\n\nhigh_df = pd.DataFrame(high_occur, columns=['word', 'count'])\nhigh_df = high_df.iloc[1:,:]","2fd45538":"plt.figure(figsize=(10, 5))\nplt.subplot(1, 2, 1)\nax1 = sns.barplot(data=low_df, x='word', y='count', palette = \"BuGn_d\")\nplt.title('Lower Price Group', fontsize=12);\n\nplt.subplot(1, 2, 2)\nax2 = sns.barplot(data=high_df, x='word', y='count', palette = \"BuGn_d\")\nplt.title('Higher Price Group', fontsize=12)\nplt.suptitle('Popular Words in Different Price Group');","5acda615":"plt.figure(figsize=(10, 8))\nsns.barplot(data=df, x='neighbourhood_group', y='price', hue='room_type', palette=sns.cubehelix_palette(8))\nplt.xlabel('Neighbourhood', fontsize=12)\nplt.ylabel('Price (dollar)', fontsize=12)\nplt.title('Price for Different Neighbourhood and Room Types', fontsize=14)\nplt.legend(loc=1, framealpha=0, title='Room Type');","e2b581bf":"df2 = df[df['price'] <= 200]\nfig, ax = plt.subplots(figsize=(12,12))\n\n# Show Background image\nimg=plt.imread('..\/input\/new-york-city-airbnb-open-data\/New_York_City_.png', 0)\ncoordenates_to_extent = [-74.258, -73.7, 40.49, 40.92]\nax.imshow(img, zorder=0, extent=coordenates_to_extent)\n\n# Plotting\nscatter_map = plt.scatter(data=df2, x='longitude', y='latitude', c='price', alpha=0.3)\nplt.colorbar(shrink = 0.5)\nax.grid(True)\nplt.title('Price Map', fontsize=14)\nplt.show()","93ff35cf":"plt.figure(figsize=(12, 12))\nsns.heatmap(df.corr(), square=True, annot=True, fmt = '.2f', cmap = 'vlag_r', center=0);","a8185b5e":"# Trim the data for prediction\ncols = ['host_id', 'neighbourhood_group', 'longitude', 'room_type', 'price', 'minimum_nights', 'reviews_per_month', 'availability_365']\ndf_clean = df.loc[:, cols]\ndf_clean.head()","fece7396":"# get dummy value\nle = preprocessing.LabelEncoder()\nle.fit(df_clean['neighbourhood_group'])\ndf_clean['neighbourhood_group']=le.transform(df_clean['neighbourhood_group'])\n\nle.fit(df_clean['room_type'])\ndf_clean['room_type']=le.transform(df_clean['room_type'])","4a86da39":"# build model\nlm = LinearRegression()\nX = df_clean.drop(['host_id', 'price'], axis=1)\ny = df_clean['price']","4eb79807":"X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=42)\nlm.fit(X_train, y_train)\n\ny_pred = lm.predict(X_test)","9ac1cdd9":"# Evaluate\nmse = metrics.mean_squared_error(y_test, y_pred)\nr_square = metrics.r2_score(y_test, y_pred)\n\nprint('Mean absolute error is {}'.format(mse))\nprint('R^2 is {}'.format(r_square))","a98fb7cf":"def DistributionPlot(RedFunction, BlueFunction, RedName, BlueName, Title):\n    plt.figure(figsize=(10, 8))\n\n    ax1 = sns.distplot(RedFunction, hist=False, color=\"r\", label=RedName)\n    ax2 = sns.distplot(BlueFunction, hist=False, color=\"b\", label=BlueName, ax=ax1)\n    plt.title(Title)\n    plt.xlabel('Price (dollars)')\n    plt.show()\n    plt.close()","a60f28a9":"# Visualize the results\nDistributionPlot(y_test, y_pred, 'Actual Values (Train)', 'Predicted Values (Train)', 'Distribution  Plot of  Predicted Value Using Training Data vs Training Data Distribution')","cd5e0b21":"Rcross = cross_val_score(lm, X, y, cv=4)\nprint(\"The mean of the folds are\", Rcross.mean(), \"and the standard deviation is\" , Rcross.std())","a7c1dda0":"# test polynomial orders\nR_square = []\norder = [1, 2, 3, 4, 5, 6, 7]\nfor n in order:\n    pr = PolynomialFeatures(degree=n)    \n    X_train_pr = pr.fit_transform(X_train) \n    X_test_pr = pr.fit_transform(X_test)    \n    \n    lm.fit(X_train_pr, y_train)\n    \n    R_square.append(lm.score(X_test_pr, y_test))\n\nplt.plot(order, R_square)\nplt.xlabel('order')\nplt.ylabel('R^2')\nplt.ylim(0, 0.2)\nplt.title('R^2 Using Test Data')\nplt.text(4, 0.17, 'Maximum R^2');    ","97961db7":"# fit the data with forth order polynomial\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=42)\npr = PolynomialFeatures(degree=4)\nX_train_pr = pr.fit_transform(X_train) \nX_test_pr = pr.fit_transform(X_test)  \nlm.fit(X_train_pr, y_train)\nprint('R^2 is {}'.format(lm.score(X_test_pr, y_test)))\ny_pred = lm.predict(X_test_pr)","7c0a631d":"# plot the new fitting\nDistributionPlot(y_test, y_pred, 'Actual Values (Train)', 'Predicted Values (Train)', 'Distribution  Plot of  Predicted Value Using Training Data vs Training Data Distribution')","e54569f3":"RR_square = []\nRR_train = []\ndummy = []\nalpha = [0, 0.001, 0.01, 1, 10, 100]\nfor a in alpha:\n    RigeModel = Ridge(alpha=a) \n    RigeModel.fit(X_train_pr, y_train)\n    RR_square.append(RigeModel.score(X_test_pr, y_test))\n    RR_train.append(RigeModel.score(X_train_pr, y_train))","062bc719":"plt.figure(figsize=(8, 5))\nplt.plot(alpha,RR_square, label='validation data')\nplt.plot(alpha,RR_train, 'r', label='training Data')\nplt.xlabel('alpha')\nplt.ylabel('R^2')\nplt.ylim(0, 0.2)\nplt.legend();","4b3e0a16":"# Best bridge model\nRR = Ridge(alpha=0.15)\nRR.fit(X_train_pr, y_train)\ny_RR = RR.predict(X_test_pr)\nprint('R^2 is {}'.format(metrics.r2_score(y_test, y_RR)))","682598db":"DistributionPlot(y_test, y_pred, 'Actual Values (Train)', 'Predicted Values (Train)', 'Distribution  Plot of  Predicted Value Using Training Data vs Training Data Distribution')","c2fd69e4":"plt.figure(figsize=(10,5))\nsns.regplot(x=y_test, y=y_pred, color=sns.color_palette()[0])\nplt.xlim(0, 2000)\nplt.title('Predict Model', fontsize=14)\nplt.xlabel('Test Data')\nplt.ylabel('Predictions');","63a21016":"**2.5 Price VS. Review**","5b3e49e3":"**2.8 Price for different neighbourhoods and room types**","0ef4f72a":"With a log transformation, we can see that the price is highly right skewed. Most listed price are under 500 dollars, with a peak around 100 dollars. The price distribution also seems to just cut off at its maximum, rather than declining in a smooth tail. ","ddca8536":"# 2. Data Visualization","2cd8143d":"From the plot we can tell that entire home\/apt is more expensive. In popular neighbourhoods like Brooklyn and Manhattan, private room is more expensive than shared room. However, when comes to less popular areas such as Staten Island and Bronx, there's no significant difference between them. In this case, maybe choose a private room would render better experiences.","f1b02456":"**2.6 Prive VS. Room Type**","ef4b59b0":"# **Introduction**\n\nAirbnb is an online marketplace for arranging or offering lodging, primarily homestays, or tourism experiences. Since 2008, guests and hosts have used Airbnb to expand on traveling possibilities. It renders an unique and personalized way of experiencing the world and socializing with new people. \nThis dataset describes the listing activity and metrics in NYC, NY for 2019. This data file includes all needed information to find out more about hosts, geographical availability, necessary metrics to make predictions and draw conclusions.\nThe analysis could provide some insights on the hosts and areas, answering questions like whether locations, room type, reviews would affect price. \n\nI hope you like this kernel and your UPVOTES would be appreciate :)","58d5e45c":"# 3. Model Build","dcba092c":"We can see that the minimum stay result follows a bimodal distribution. Most lists have minimun stays that are less than 5 days, with some hosts prefer stays around 30 days. ","9be34a1e":"The results do not exhibit obvious, strong correlations between these variables. Only longitude show some negative correlation with the price, which we can tell a little bit from the mapview.","34ada7a1":"**2.7 Popular ad words**","527ea4f7":"As expected, the entire home\/apartment room type is significantly more expensive than private or shared room. ","7a1c3399":"## Import packages and data","2aade1da":"**2.10 Pearson correlation matrix**","dbc1e635":"From the map we could see that there are a lot of lists in Manhattan, and many of them are at higher price. The density of lists for other areas are much lower. In general, the closer to Manhattan, the lists are more clustered and expensive. Interestingly, there are more lists located along the river.","7d103973":"From the scatterplot above, we can't tell whether price is correlate with monthly review number.","c767f918":"* ### Bivariate Visualization\n","d6778367":"* ### Univariate Visualization\n","87572367":"**3.4 Ridge Regression**","04429d1f":"It seems like a forth order polynomial fits the data the best...(still pretty bad at R^2~0.15\uff09","70ac8082":"We can see that both Manhattan and Brooklyn are very popular, and staten island is the least popular neighbourhood group.","5debef8c":"Next, we will segment the lists to low(<50%) and high(>50%) price groups and check their popular ad words.","de974efa":"# 1. Assess and Wrangling\n","62b4f288":"We can see that the review per month is also highly right skewed. Most hosts only get 1-2 reviews per month, with very few exceptional reviewed hosts. ","012b0e73":"![](http:\/\/)**2.9 Price mapview**","1431b2bf":"The model appears no overfitting issues, so I think use the forth polynomial order model so far is the best. ","af2a628f":"**2.4 Minimum stay distribution**","649a4a58":"**3.1 Linear Regression**","81a115f5":"* ### Multivariate Visualization","7ffd7a89":"**3.2 Cross-validation score**","6a1bc982":"**2.3 Popular neighbourhood**","80d97bfe":"![title](https:\/\/secureservercdn.net\/198.71.233.214\/aa7.834.myftpupload.com\/wp-content\/uploads\/2019\/08\/airbnb-678x381.png)","e2d05cfb":"**2.1 Price distribution**","c282faca":"**2.2 Review per month distribution**","b8063f65":"Seems like the lower listed price group prefer to use words like 'private' and 'cozy', while 'studio' and 'apartment' yield higher listed prices. ","00c1cf2b":"**3.3 Underfitting and model selection**"}}