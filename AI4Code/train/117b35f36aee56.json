{"cell_type":{"492f73b3":"code","7cf7926f":"code","68e060b1":"code","77aa11ec":"code","b00bfbdc":"code","20822a30":"code","1db30310":"code","1a6b6941":"code","069de2e2":"code","a0b66204":"code","5cec40d6":"code","3923b9ce":"code","7854b8a2":"code","d5d1c181":"code","3a36e87c":"code","3dd8ba17":"code","b50be886":"code","8826af89":"code","26301fd4":"code","07eb70af":"code","52aba667":"code","3c4522c1":"code","0aab3e6b":"code","988f392e":"code","b9731cfb":"code","9ea4b315":"code","4ec84e2a":"code","5af1fae0":"code","8a20023d":"code","a488621c":"code","04f48e2a":"code","940a843c":"code","63f7c9f6":"code","d6ccaf59":"code","85843e6d":"code","311ec08d":"code","819d14be":"code","2e695b77":"code","8e2824e2":"code","6eae36c1":"code","05bf87d0":"code","34825913":"code","61968f0b":"code","2803e809":"markdown","5c8121ce":"markdown","24a1067c":"markdown","7f4c7034":"markdown","cbe309eb":"markdown","c1a053f9":"markdown","a1f9bc34":"markdown","dc07a774":"markdown","37c7e0ca":"markdown","93dc4131":"markdown","63a3ecbc":"markdown","e72db33d":"markdown","d70872d7":"markdown","70a85430":"markdown","54cda2a6":"markdown","9cb62825":"markdown","b1376b05":"markdown","7ad0df40":"markdown","f38f58f7":"markdown","77f4dd24":"markdown","fa0fc0af":"markdown","58ea8f0e":"markdown","0c6539d4":"markdown","f57268e9":"markdown","c32adcb8":"markdown","071a6bf6":"markdown","4ac46a3e":"markdown","18db9a3d":"markdown","70b4d87d":"markdown","f7cb54a6":"markdown","f11caf08":"markdown","e8396848":"markdown","c4ff4527":"markdown","e2312090":"markdown","93f12736":"markdown","b1792cb0":"markdown","fa17c59a":"markdown","8d3cb16e":"markdown","b6eaf153":"markdown"},"source":{"492f73b3":"from nltk.corpus import stopwords    \nfrom nltk.tokenize import word_tokenize\nfrom textblob import TextBlob\n\nfrom keras.preprocessing.text import Tokenizer\nfrom keras.preprocessing.sequence import pad_sequences\nfrom keras.layers import Dense, Input, LSTM, Embedding, Dropout, Activation, SpatialDropout1D, MaxPooling1D, Conv1D, Concatenate, Bidirectional, GlobalMaxPool1D, ActivityRegularization, BatchNormalization\nfrom keras.models import Model\nfrom keras.callbacks import ModelCheckpoint, ReduceLROnPlateau\n\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import accuracy_score, f1_score\n\nfrom tqdm import tqdm\n\nimport matplotlib.pyplot as plt\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\nimport re\nimport string\n\n%matplotlib inline\nimport cufflinks as cf\ncf.go_offline()\ncf.set_config_file(offline=False, world_readable=True)\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\nnr_examples = 75","7cf7926f":"train_df = pd.read_csv('\/kaggle\/input\/nlp-getting-started\/train.csv')\ntest_df = pd.read_csv('\/kaggle\/input\/nlp-getting-started\/test.csv')\ntrain_df.head()","68e060b1":"fig, ax = plt.subplots(figsize = (20, 5))\n\nax.plot(train_df['location'].value_counts().head(nr_examples).index, train_df['location'].value_counts().head(nr_examples).values)\nax.set(xlabel = 'locations', ylabel = '# of appearances')\n\nplt.xticks(rotation = 'vertical')\nplt.tight_layout()\nplt.show()\n\ntrain_df['haslocation'] = np.where(train_df['location'].isnull(), 0, 1)\n\"{:.2f}% of the entries have a location\".format((len(train_df[(train_df['haslocation'] == 1)]) \/ len(train_df) * 100))","77aa11ec":"\"{:.2f}% of the entries which represent actual disasters have a location\".format((len(train_df[(train_df['haslocation'] == 1) & (train_df['target'] == 1)]) \/ len(train_df[(train_df['target'] == 1)]) * 100)) ","b00bfbdc":"\"{:.2f}% of the entries which do not represent disasters have a location\".format((len(train_df[(train_df['haslocation'] == 1) & (train_df['target'] == 0)]) \/ len(train_df[(train_df['target'] == 0)]) * 100)) ","20822a30":"train_df.drop([\"location\", \"haslocation\"], axis = 1, inplace = True)\ntest_df.drop([\"location\"], axis = 1, inplace = True)","1db30310":"fig, ax = plt.subplots(figsize = (20, 5))\n\nax.bar(np.arange(nr_examples), train_df.where(train_df['target'] == 1)['keyword'].value_counts().head(nr_examples), 0.35, color = \"C0\")\nax.set_ylabel('# appeareances')\nax.set_title('Keyword')\nax.set_xticks(np.arange(nr_examples))\nax.set_xticklabels(train_df.where(train_df['target'] == 1)['keyword'].value_counts().head(nr_examples).index, rotation = 'vertical')\n\nplt.tight_layout()\nplt.show()\n\ntrain_df['haskeyword'] = np.where(train_df['keyword'].isnull(), 0, 1)\n\"{:.2f}% of the entries have a keyword\".format((len(train_df[(train_df['haskeyword'] == 1)]) \/ len(train_df) * 100)) ","1a6b6941":"fig, (ax, bx) = plt.subplots(nrows = 2, ncols = 1, figsize = (20, 10))\n\nax.bar(np.arange(nr_examples), train_df.where(train_df['target'] == 1)['keyword'].value_counts().head(nr_examples), 0.35, color = \"C1\")\nax.set_ylabel('# appeareances')\nax.set_title('Disaster')\nax.set_xticks(np.arange(nr_examples))\nax.set_xticklabels(train_df.where(train_df['target'] == 1)['keyword'].value_counts().head(nr_examples).index, rotation='vertical')\n\nbx.bar(np.arange(nr_examples), train_df.where(train_df['target'] == 0)['keyword'].value_counts().head(nr_examples), 0.35, color = \"C0\")\nbx.set_ylabel('# appeareances')\nbx.set_title('Non-disaster')\nbx.set_xticks(np.arange(nr_examples))\nbx.set_xticklabels(train_df.where(train_df['target'] == 0)['keyword'].value_counts().head(nr_examples).index, rotation='vertical')\n\nplt.tight_layout()\nplt.show()","069de2e2":"train_df['keyword_sentiment'] = train_df['keyword'].apply(lambda x: (TextBlob(x).sentiment[0] + 1) \/ 2 if type(x) == str else None)\ntrain_df['tweet_sentiment'] = train_df['text'].apply(lambda x: (TextBlob(x).sentiment[0] + 1) \/ 2)\ntest_df['tweet_sentiment'] = test_df['text'].apply(lambda x: (TextBlob(x).sentiment[0] + 1) \/ 2)","a0b66204":"disaster = train_df.where(train_df['target'] == 1)['keyword_sentiment'].dropna().values\nnot_disaster = train_df.where(train_df['target'] == 0)['keyword_sentiment'].dropna().values\n\nfig, ax = plt.subplots(figsize = (20, 5))\nax.set_title('Disaster keyword sentiment vs Non-disaster keyword sentiment')\nax.boxplot([disaster, not_disaster])\n\nplt.tight_layout()\nplt.show()","5cec40d6":"disaster = train_df.where(train_df['target'] == 1)['tweet_sentiment'].dropna().values\nnot_disaster = train_df.where(train_df['target'] == 0)['tweet_sentiment'].dropna().values\n\nfig, ax = plt.subplots(figsize = (20, 5))\nax.set_title('Disaster overall sentiment vs Non-disaster overall sentiment')\nax.boxplot([disaster, not_disaster])\n\nplt.tight_layout()\nplt.show()","3923b9ce":"train_df['text'] = train_df['keyword'].astype(str) + ' ' + train_df['text'].astype(str)\ntest_df['text'] = test_df['keyword'].astype(str) + ' ' + test_df['text'].astype(str)\n\ntrain_df.drop([\"keyword\", \"haskeyword\", \"keyword_sentiment\"], axis = 1, inplace = True)\ntest_df.drop([\"keyword\"], axis = 1, inplace = True)","7854b8a2":"train_df['nr_of_char'] = train_df['text'].str.len()\ntrain_df['nr_of_char'] = train_df['nr_of_char'] \/ train_df['nr_of_char'].max()\n\ndisaster = train_df.where(train_df['target'] == 1)['nr_of_char'].dropna().values\nnot_disaster = train_df.where(train_df['target'] == 0)['nr_of_char'].dropna().values\n\nfig, ax = plt.subplots(figsize = (20, 5))\nax.set_title('Disaster # of chars vs Non-disaster # of chars')\nax.boxplot([disaster, not_disaster])\n\nplt.tight_layout()\nplt.show()\n\ntest_df['nr_of_char'] = test_df['text'].str.len()\ntest_df['nr_of_char'] = test_df['nr_of_char'] \/ test_df['nr_of_char'].max()","d5d1c181":"train_df['nr_of_words'] = train_df['text'].str.split().str.len()\ntrain_df['nr_of_words'] = train_df['nr_of_words'] \/ train_df['nr_of_words'].max()\n\ndisaster = train_df.where(train_df['target'] == 1)['nr_of_words'].dropna().values\nnot_disaster = train_df.where(train_df['target'] == 0)['nr_of_words'].dropna().values\n\nfig, ax = plt.subplots(figsize = (20, 5))\nax.set_title('Disaster # of words vs Non-disaster # of words')\nax.boxplot([disaster, not_disaster])\n\nplt.tight_layout()\nplt.show()\n\ntest_df['nr_of_words'] = test_df['text'].str.split().str.len()\ntest_df['nr_of_words'] = test_df['nr_of_words'] \/ test_df['nr_of_words'].max()","3a36e87c":"train_df['nr_of_unique_words'] = train_df['text'].apply(lambda x: len(set(x.split())))\ntrain_df['nr_of_unique_words'] = train_df['nr_of_unique_words'] \/ train_df['nr_of_unique_words'].max()\n\ndisaster = train_df.where(train_df['target'] == 1)['nr_of_unique_words'].dropna().values\nnot_disaster = train_df.where(train_df['target'] == 0)['nr_of_unique_words'].dropna().values\n\nfig, ax = plt.subplots(figsize = (20, 5))\nax.set_title('Disaster # of unique words vs Non-disaster # of unique words')\nax.boxplot([disaster, not_disaster])\n\nplt.tight_layout()\nplt.show()\n\ntest_df['nr_of_unique_words'] = test_df['text'].apply(lambda x: len(set(x.split())))\ntest_df['nr_of_unique_words'] = test_df['nr_of_unique_words'] \/ test_df['nr_of_unique_words'].max()","3dd8ba17":"train_df['nr_of_punctuation'] = train_df['text'].str.split(r\"\\?|,|\\.|\\!|\\\"|'\").str.len()\ntrain_df['nr_of_punctuation'] = train_df['nr_of_punctuation'] \/ train_df['nr_of_punctuation'].max()\n\ndisaster = train_df.where(train_df['target'] == 1)['nr_of_punctuation'].dropna().values\nnot_disaster = train_df.where(train_df['target'] == 0)['nr_of_punctuation'].dropna().values\n\nfig, ax = plt.subplots(figsize = (20, 5))\nax.set_title('Disaster # of punctuation signs vs Non-disaster # of punctuation signs')\nax.boxplot([disaster, not_disaster])\n\nplt.tight_layout()\nplt.show()\n\ntest_df['nr_of_punctuation'] = test_df['text'].str.split(r\"\\?|,|\\.|\\!|\\\"|'\").str.len()\ntest_df['nr_of_punctuation'] = test_df['nr_of_punctuation'] \/ test_df['nr_of_punctuation'].max()","b50be886":"stop_words = set(stopwords.words('english'))\ntrain_df['nr_of_stopwords'] = train_df['text'].str.split().apply(lambda x: len(set(x) & stop_words))\ntrain_df['nr_of_stopwords'] = train_df['nr_of_stopwords'] \/ train_df['nr_of_stopwords'].max()\n\ndisaster = train_df.where(train_df['target'] == 1)['nr_of_stopwords'].dropna().values\nnot_disaster = train_df.where(train_df['target'] == 0)['nr_of_stopwords'].dropna().values\n\nfig, ax = plt.subplots(figsize = (20, 5))\nax.set_title('Disaster # of stopwords vs Non-disaster # of stopwords')\nax.boxplot([disaster, not_disaster])\n\nplt.tight_layout()\nplt.show()\n\ntest_df['nr_of_stopwords'] = test_df['text'].str.split().apply(lambda x: len(set(x) & stop_words))\ntest_df['nr_of_stopwords'] = test_df['nr_of_stopwords'] \/ test_df['nr_of_stopwords'].max()","8826af89":"train_df.corr().iplot(kind='heatmap',colorscale=\"Reds\",title=\"Feature Correlation Matrix\")","26301fd4":"glove_embeddings = np.load('\/kaggle\/input\/embfile\/emb\/glove.840B.300d.pkl', allow_pickle=True)\n\n# credit to \ndef build_vocab(X):\n    \n    tweets = X.apply(lambda s: s.split()).values      \n    vocab = {}\n    \n    for tweet in tweets:\n        for word in tweet:\n            try:\n                vocab[word] += 1\n            except KeyError:\n                vocab[word] = 1                \n    return vocab\n\ndef check_embeddings_coverage(X, embeddings):\n    \n    vocab = build_vocab(X)    \n    \n    covered = {}\n    oov = {}    \n    n_covered = 0\n    n_oov = 0\n    \n    for word in vocab:\n        try:\n            covered[word] = embeddings[word]\n            n_covered += vocab[word]\n        except:\n            n_oov += vocab[word]\n            \n    vocab_coverage = len(covered) \/ len(vocab)\n    text_coverage = (n_covered \/ (n_covered + n_oov))\n    \n    return vocab_coverage, text_coverage\n\ntrain_glove_vocab_coverage, train_glove_text_coverage = check_embeddings_coverage(train_df['text'], glove_embeddings)\nprint('GloVe Embeddings cover {:.2%} of vocabulary and {:.2%} of text in Training Set'.format(train_glove_vocab_coverage, train_glove_text_coverage))\ntest_glove_vocab_coverage, test_glove_text_coverage = check_embeddings_coverage(test_df['text'], glove_embeddings)\nprint('GloVe Embeddings cover {:.2%} of vocabulary and {:.2%} of text in Test Set'.format(test_glove_vocab_coverage, test_glove_text_coverage))","07eb70af":"def clean(tweet): \n            \n    # Special characters\n    tweet = re.sub(r\"\\x89\u00db_\", \"\", tweet)\n    tweet = re.sub(r\"\\x89\u00db\u00d2\", \"\", tweet)\n    tweet = re.sub(r\"\\x89\u00db\u00d3\", \"\", tweet)\n    tweet = re.sub(r\"\\x89\u00db\u00cfWhen\", \"When\", tweet)\n    tweet = re.sub(r\"\\x89\u00db\u00cf\", \"\", tweet)\n    tweet = re.sub(r\"China\\x89\u00db\u00aas\", \"China's\", tweet)\n    tweet = re.sub(r\"let\\x89\u00db\u00aas\", \"let's\", tweet)\n    tweet = re.sub(r\"\\x89\u00db\u00f7\", \"\", tweet)\n    tweet = re.sub(r\"\\x89\u00db\u00aa\", \"\", tweet)\n    tweet = re.sub(r\"\\x89\u00db\\x9d\", \"\", tweet)\n    tweet = re.sub(r\"\u00e5_\", \"\", tweet)\n    tweet = re.sub(r\"\\x89\u00db\u00a2\", \"\", tweet)\n    tweet = re.sub(r\"\\x89\u00db\u00a2\u00e5\u00ca\", \"\", tweet)\n    tweet = re.sub(r\"from\u00e5\u00cawounds\", \"from wounds\", tweet)\n    tweet = re.sub(r\"\u00e5\u00ca\", \"\", tweet)\n    tweet = re.sub(r\"\u00e5\u00c8\", \"\", tweet)\n    tweet = re.sub(r\"Jap\u00cc_n\", \"Japan\", tweet)    \n    tweet = re.sub(r\"\u00cc\u00a9\", \"e\", tweet)\n    tweet = re.sub(r\"\u00e5\u00a8\", \"\", tweet)\n    tweet = re.sub(r\"Suru\u00cc\u00a4\", \"Suruc\", tweet)\n    tweet = re.sub(r\"\u00e5\u00c7\", \"\", tweet)\n    tweet = re.sub(r\"\u00e5\u00a33million\", \"3 million\", tweet)\n    tweet = re.sub(r\"\u00e5\u00c0\", \"\", tweet)\n    \n    # Contractions\n    tweet = re.sub(r\"he's\", \"he is\", tweet)\n    tweet = re.sub(r\"there's\", \"there is\", tweet)\n    tweet = re.sub(r\"We're\", \"We are\", tweet)\n    tweet = re.sub(r\"That's\", \"That is\", tweet)\n    tweet = re.sub(r\"won't\", \"will not\", tweet)\n    tweet = re.sub(r\"they're\", \"they are\", tweet)\n    tweet = re.sub(r\"Can't\", \"Cannot\", tweet)\n    tweet = re.sub(r\"wasn't\", \"was not\", tweet)\n    tweet = re.sub(r\"don\\x89\u00db\u00aat\", \"do not\", tweet)\n    tweet = re.sub(r\"aren't\", \"are not\", tweet)\n    tweet = re.sub(r\"isn't\", \"is not\", tweet)\n    tweet = re.sub(r\"What's\", \"What is\", tweet)\n    tweet = re.sub(r\"haven't\", \"have not\", tweet)\n    tweet = re.sub(r\"hasn't\", \"has not\", tweet)\n    tweet = re.sub(r\"There's\", \"There is\", tweet)\n    tweet = re.sub(r\"He's\", \"He is\", tweet)\n    tweet = re.sub(r\"It's\", \"It is\", tweet)\n    tweet = re.sub(r\"You're\", \"You are\", tweet)\n    tweet = re.sub(r\"I'M\", \"I am\", tweet)\n    tweet = re.sub(r\"shouldn't\", \"should not\", tweet)\n    tweet = re.sub(r\"wouldn't\", \"would not\", tweet)\n    tweet = re.sub(r\"i'm\", \"I am\", tweet)\n    tweet = re.sub(r\"I\\x89\u00db\u00aam\", \"I am\", tweet)\n    tweet = re.sub(r\"I'm\", \"I am\", tweet)\n    tweet = re.sub(r\"Isn't\", \"is not\", tweet)\n    tweet = re.sub(r\"Here's\", \"Here is\", tweet)\n    tweet = re.sub(r\"you've\", \"you have\", tweet)\n    tweet = re.sub(r\"you\\x89\u00db\u00aave\", \"you have\", tweet)\n    tweet = re.sub(r\"we're\", \"we are\", tweet)\n    tweet = re.sub(r\"what's\", \"what is\", tweet)\n    tweet = re.sub(r\"couldn't\", \"could not\", tweet)\n    tweet = re.sub(r\"we've\", \"we have\", tweet)\n    tweet = re.sub(r\"it\\x89\u00db\u00aas\", \"it is\", tweet)\n    tweet = re.sub(r\"doesn\\x89\u00db\u00aat\", \"does not\", tweet)\n    tweet = re.sub(r\"It\\x89\u00db\u00aas\", \"It is\", tweet)\n    tweet = re.sub(r\"Here\\x89\u00db\u00aas\", \"Here is\", tweet)\n    tweet = re.sub(r\"who's\", \"who is\", tweet)\n    tweet = re.sub(r\"I\\x89\u00db\u00aave\", \"I have\", tweet)\n    tweet = re.sub(r\"y'all\", \"you all\", tweet)\n    tweet = re.sub(r\"can\\x89\u00db\u00aat\", \"cannot\", tweet)\n    tweet = re.sub(r\"would've\", \"would have\", tweet)\n    tweet = re.sub(r\"it'll\", \"it will\", tweet)\n    tweet = re.sub(r\"we'll\", \"we will\", tweet)\n    tweet = re.sub(r\"wouldn\\x89\u00db\u00aat\", \"would not\", tweet)\n    tweet = re.sub(r\"We've\", \"We have\", tweet)\n    tweet = re.sub(r\"he'll\", \"he will\", tweet)\n    tweet = re.sub(r\"Y'all\", \"You all\", tweet)\n    tweet = re.sub(r\"Weren't\", \"Were not\", tweet)\n    tweet = re.sub(r\"Didn't\", \"Did not\", tweet)\n    tweet = re.sub(r\"they'll\", \"they will\", tweet)\n    tweet = re.sub(r\"they'd\", \"they would\", tweet)\n    tweet = re.sub(r\"DON'T\", \"DO NOT\", tweet)\n    tweet = re.sub(r\"That\\x89\u00db\u00aas\", \"That is\", tweet)\n    tweet = re.sub(r\"they've\", \"they have\", tweet)\n    tweet = re.sub(r\"i'd\", \"I would\", tweet)\n    tweet = re.sub(r\"should've\", \"should have\", tweet)\n    tweet = re.sub(r\"You\\x89\u00db\u00aare\", \"You are\", tweet)\n    tweet = re.sub(r\"where's\", \"where is\", tweet)\n    tweet = re.sub(r\"Don\\x89\u00db\u00aat\", \"Do not\", tweet)\n    tweet = re.sub(r\"we'd\", \"we would\", tweet)\n    tweet = re.sub(r\"i'll\", \"I will\", tweet)\n    tweet = re.sub(r\"weren't\", \"were not\", tweet)\n    tweet = re.sub(r\"They're\", \"They are\", tweet)\n    tweet = re.sub(r\"Can\\x89\u00db\u00aat\", \"Cannot\", tweet)\n    tweet = re.sub(r\"you\\x89\u00db\u00aall\", \"you will\", tweet)\n    tweet = re.sub(r\"I\\x89\u00db\u00aad\", \"I would\", tweet)\n    tweet = re.sub(r\"let's\", \"let us\", tweet)\n    tweet = re.sub(r\"it's\", \"it is\", tweet)\n    tweet = re.sub(r\"can't\", \"cannot\", tweet)\n    tweet = re.sub(r\"don't\", \"do not\", tweet)\n    tweet = re.sub(r\"you're\", \"you are\", tweet)\n    tweet = re.sub(r\"i've\", \"I have\", tweet)\n    tweet = re.sub(r\"that's\", \"that is\", tweet)\n    tweet = re.sub(r\"i'll\", \"I will\", tweet)\n    tweet = re.sub(r\"doesn't\", \"does not\", tweet)\n    tweet = re.sub(r\"i'd\", \"I would\", tweet)\n    tweet = re.sub(r\"didn't\", \"did not\", tweet)\n    tweet = re.sub(r\"ain't\", \"am not\", tweet)\n    tweet = re.sub(r\"you'll\", \"you will\", tweet)\n    tweet = re.sub(r\"I've\", \"I have\", tweet)\n    tweet = re.sub(r\"Don't\", \"do not\", tweet)\n    tweet = re.sub(r\"I'll\", \"I will\", tweet)\n    tweet = re.sub(r\"I'd\", \"I would\", tweet)\n    tweet = re.sub(r\"Let's\", \"Let us\", tweet)\n    tweet = re.sub(r\"you'd\", \"You would\", tweet)\n    tweet = re.sub(r\"It's\", \"It is\", tweet)\n    tweet = re.sub(r\"Ain't\", \"am not\", tweet)\n    tweet = re.sub(r\"Haven't\", \"Have not\", tweet)\n    tweet = re.sub(r\"Could've\", \"Could have\", tweet)\n    tweet = re.sub(r\"youve\", \"you have\", tweet)  \n    tweet = re.sub(r\"don\u00e5\u00abt\", \"do not\", tweet)   \n           \n    # Urls\n    tweet = re.sub(r\"https?:\\\/\\\/t.co\\\/[A-Za-z0-9]+\", \"\", tweet)\n        \n    # Words with punctuations and special characters\n    punctuations = '@#!?+&*[]-%.:\/();$=><|{}^' + \"'`\"\n    for p in punctuations:\n        tweet = tweet.replace(p, '')\n        \n    # ... and ..\n    tweet = tweet.replace('...', ' ... ')\n    if '...' not in tweet:\n        tweet = tweet.replace('..', ' ... ')\n        \n    #Spaces\n    tweet = tweet.replace('  ', ' ')\n    tweet = tweet.replace('   ', ' ')\n        \n    tweet = tweet.lower()\n    \n    tweet = \" \".join(tweet.split())\n    \n    return tweet\n\ntrain_df['text_cleaned'] = train_df['text'].apply(lambda s : clean(s))\ntest_df['text_cleaned'] = test_df['text'].apply(lambda s : clean(s))\n\ntrain_glove_vocab_coverage, train_glove_text_coverage = check_embeddings_coverage(train_df['text_cleaned'], glove_embeddings)\nprint('GloVe Embeddings cover {:.2%} of vocabulary and {:.2%} of text in Training Set'.format(train_glove_vocab_coverage, train_glove_text_coverage))\ntest_glove_vocab_coverage, test_glove_text_coverage = check_embeddings_coverage(test_df['text_cleaned'], glove_embeddings)\nprint('GloVe Embeddings cover {:.2%} of vocabulary and {:.2%} of text in Test Set'.format(test_glove_vocab_coverage, test_glove_text_coverage))","52aba667":"def create_corpus(df):\n    \n    corpus = []\n    \n    for tweet in tqdm(df['text_cleaned']):\n        words = [word.lower() for word in word_tokenize(tweet) if((word.isalpha() == 1) and word not in stop_words)]\n        corpus.append(words)\n        \n    return corpus\n\ntrain_corpus = create_corpus(train_df)\ntest_corpus = create_corpus(test_df)\n\ntokenizer_obj_train = Tokenizer()\ntokenizer_obj_train.fit_on_texts(train_corpus)\nseq_train=tokenizer_obj_train.texts_to_sequences(train_corpus)\n\ntokenizer_obj_test = Tokenizer()\ntokenizer_obj_test.fit_on_texts(test_corpus)\nseq_test=tokenizer_obj_test.texts_to_sequences(test_corpus)\n\nMAX_WORDS = 0\nfor i in seq_train:\n    MAX_WORDS = max(MAX_WORDS, len(i))\n\nfor i in seq_test:\n    MAX_WORDS = max(MAX_WORDS, len(i))\n    \ntrain_pad = pad_sequences(seq_train, maxlen = MAX_WORDS, truncating = 'post', padding = 'post')\ntest_pad = pad_sequences(seq_test, maxlen = MAX_WORDS, truncating = 'post', padding = 'post')\n\ntokenizer_obj_train.word_index.update(tokenizer_obj_test.word_index)","3c4522c1":"word_index = tokenizer_obj_train.word_index\nprint('Number of unique words:',len(word_index))","0aab3e6b":"num_words = len(word_index) + 1\nembedding_matrix = np.zeros((num_words, 300))\n\ncounter = 0\n\nfor word, i in tqdm(word_index.items()):\n    emb_vec = glove_embeddings.get(word)\n    if emb_vec is not None:\n        embedding_matrix[i] = emb_vec\n    else:\n        counter += 1\n\ndel glove_embeddings\ncounter","988f392e":"x_train, x_test, y_train, y_test = train_test_split(train_pad, train_df['target'].values, test_size = 0.25, random_state = 42)\n\nprint(\"Shape of train\", x_train.shape)\nprint(\"Shape of Validation\", x_test.shape)","b9731cfb":"inp = Input(shape = (MAX_WORDS, ))\nx = Embedding(num_words, 300, weights = [embedding_matrix])(inp)\nx = Bidirectional(LSTM(MAX_WORDS, dropout = 0.2, recurrent_dropout = 0.2, return_sequences = True))(x)\nx = ActivityRegularization(l2 = 0.1)(x)\nx = GlobalMaxPool1D()(x)\nx = Dropout(0.2)(x)\nx = BatchNormalization()(x)\nx = Dense(4, activation = \"relu\")(x)\nx = ActivityRegularization(l2 = 0.1)(x)\nx = Dropout(0.2)(x)\nx = Dense(1, activation = \"sigmoid\")(x)\n\nmodel_LSTM = Model(inputs = inp, outputs = x)\nmodel_LSTM.compile(loss = 'binary_crossentropy', optimizer = 'adam', metrics = ['accuracy'])\n\nprint(model_LSTM.summary())","9ea4b315":"checkpoint = ModelCheckpoint(\n    'model_LSTM.h5', \n    monitor = 'val_loss', \n    verbose = 1, \n    save_best_only = True\n)\n\nreduce_lr = ReduceLROnPlateau(\n    monitor = 'val_loss', \n    factor = 0.2, \n    verbose = 1, \n    patience = 5,                        \n    min_lr = 0.001\n)\n\nmodel_LSTM.fit(x_train, y_train, batch_size = 32, epochs = 15, validation_data = (x_test, y_test), callbacks = [reduce_lr, checkpoint])","4ec84e2a":"model_LSTM.load_weights('model_LSTM.h5')\npred_LSTM = model_LSTM.predict(x_test)\n\nacc_LSTM = accuracy_score(y_test, np.where(pred_LSTM > 0.5, 1, 0))\nf1_LSTM = f1_score(y_test, np.where(pred_LSTM > 0.5, 1, 0))\n\nprint(acc_LSTM, f1_LSTM)","5af1fae0":"inp = Input(shape = (MAX_WORDS, ))\nx = Embedding(num_words, 300, weights = [embedding_matrix])(inp)\nx = Conv1D(MAX_WORDS, 3)(x)\nx = Activation('relu')(x)\nx = MaxPooling1D(pool_size=2, strides=2)(x)\nx = Bidirectional(LSTM(MAX_WORDS, dropout = 0.2, recurrent_dropout = 0.2, return_sequences = True))(x)\nx = ActivityRegularization(l2 = 0.1)(x)\nx = GlobalMaxPool1D()(x)\nx = Dropout(0.2)(x)\nx = BatchNormalization()(x)\nx = Dense(4, activation = \"relu\")(x)\nx = ActivityRegularization(l2 = 0.1)(x)\nx = Dropout(0.2)(x)\nx = Dense(1, activation = \"sigmoid\")(x)\n\nmodel_CNN_LSTM = Model(inputs = inp, outputs = x)\nmodel_CNN_LSTM.compile(loss = 'binary_crossentropy', optimizer = 'adam', metrics = ['accuracy'])\n\nprint(model_CNN_LSTM.summary())","8a20023d":"checkpoint = ModelCheckpoint(\n    'model_CNN_LSTM.h5', \n    monitor = 'val_loss', \n    verbose = 1, \n    save_best_only = True\n)\n\nmodel_CNN_LSTM.fit(x_train, y_train, batch_size = 64, epochs = 10, validation_data = (x_test, y_test), callbacks = [reduce_lr, checkpoint])","a488621c":"model_CNN_LSTM.load_weights('model_CNN_LSTM.h5')\npred_CNN_LSTM = model_CNN_LSTM.predict(x_test)\n\nacc_CNN_LSTM = accuracy_score(y_test, np.where(pred_CNN_LSTM > 0.5, 1, 0))\nf1_CNN_LSTM = f1_score(y_test, np.where(pred_CNN_LSTM > 0.5, 1, 0))\n\nprint(acc_CNN_LSTM, f1_CNN_LSTM)","04f48e2a":"numerical_features = train_df[['tweet_sentiment', 'nr_of_char', 'nr_of_words', 'nr_of_unique_words', 'nr_of_punctuation', 'nr_of_stopwords']].to_numpy()","940a843c":"nlp_inp = Input(shape = (MAX_WORDS, ))\nx = Embedding(num_words, 300, weights = [embedding_matrix])(nlp_inp)\nx = Bidirectional(LSTM(MAX_WORDS,dropout = 0.2, recurrent_dropout = 0.2, return_sequences = True))(x)\nx = ActivityRegularization(l2 = 0.1)(x)\nx = GlobalMaxPool1D()(x)\nx = Dropout(0.2)(x)\nx = BatchNormalization()(x)\nx = Dense(4, activation = \"relu\")(x)\nx = ActivityRegularization(l2 = 0.1)(x)\n\nnum_features_inp = Input(shape = (6, ), name = 'num_features_inp')\ny = Dense(4, activation = \"relu\")(num_features_inp)\nx = ActivityRegularization(l2 = 0.1)(x)\n\nz = Concatenate()([x, y])\nz = Dropout(0.2)(z)\nz = Dense(1, activation = \"sigmoid\")(z)\n\nmodel_LSTM_FC = Model(inputs = [nlp_inp, num_features_inp], outputs = z)\nmodel_LSTM_FC.compile(loss = 'binary_crossentropy', optimizer = 'adam', metrics = ['accuracy'])\n\nprint(model_LSTM_FC.summary())","63f7c9f6":"x_train_text, x_test_text, x_train_num, x_test_num, y_train, y_test = train_test_split(train_pad, numerical_features, train_df['target'].values, test_size=0.25, random_state = 42)\n\nprint(\"Shape of train\", x_train_text.shape)\nprint(\"Shape of Validation\", x_test_text.shape)\nprint(\"Shape of train\", x_train_num.shape)\nprint(\"Shape of Validation\", x_test_num.shape)","d6ccaf59":"checkpoint = ModelCheckpoint(\n    'model_LSTM_FC.h5', \n    monitor = 'val_loss', \n    verbose = 1, \n    save_best_only = True\n)\n\nmodel_LSTM_FC.fit([x_train_text, x_train_num], y_train, batch_size=32, epochs=15, validation_data=([x_test_text, x_test_num], y_test), callbacks = [reduce_lr, checkpoint])","85843e6d":"model_LSTM_FC.load_weights('model_LSTM_FC.h5')\npred_LSTM_FC = model_LSTM_FC.predict([x_test_text, x_test_num])\n\nacc_LSTM_FC = accuracy_score(y_test, np.where(pred_LSTM_FC > 0.5, 1, 0))\nf1_LSTM_FC = f1_score(y_test, np.where(pred_LSTM_FC > 0.5, 1, 0))\n\nprint(acc_LSTM_FC, f1_LSTM_FC)","311ec08d":"print(\"Accuracy and F1-Score of the LSTM: \", acc_LSTM, f1_LSTM)\nprint(\"Accuracy and F1-Score of the CNN_LSTM: \", acc_CNN_LSTM, f1_CNN_LSTM)\nprint(\"Accuracy and F1-Score of the LSTM_FC: \", acc_LSTM_FC, f1_LSTM_FC)","819d14be":"!pip install transformers\n!pip install simpletransformers\n!pip uninstall -y pyarrow\n!pip install 'pyarrow>=1.0.0, <5.0.0'\n!pip uninstall -y tqdm\n!pip install 'tqdm==v4.43.0'\n!pip uninstall -y tokenizers\n!pip install 'tokenizers>=0.10.1,<0.11'","2e695b77":"columns = train_df[[\"text_cleaned\", \"target\"]]\ntrain_df_V2 = columns.copy()","8e2824e2":"rename = {\"text_cleaned\": \"text\", \"target\": \"labels\"}\ntrain_df_V2.rename(columns = rename, inplace=True)","6eae36c1":"train_x_y = train_df_V2.sample(frac = 0.75, random_state = 42)\ntest_x_y = pd.concat([train_df_V2, train_x_y]).drop_duplicates(keep=False)","05bf87d0":"from simpletransformers.classification import ClassificationModel, ClassificationArgs\n\n\nmodel_args = ClassificationArgs()\nmodel_args.use_early_stopping = True\nmodel_args.early_stopping_delta = 0.01\nmodel_args.early_stopping_metric = \"mcc\"\nmodel_args.early_stopping_metric_minimize = False\nmodel_args.early_stopping_patience = 5\nmodel_args.evaluate_during_training_steps = 1000\nmodel_args.reprocess_input_data = True\nmodel_args.overwrite_output_dir = True\nmodel_args.no_save = True\n\nmodel_bert = ClassificationModel('bert', 'bert-base-uncased', args=model_args, use_cuda=False)\nmodel_bert.train_model(train_x_y)","34825913":"pred_bert, out_bert = model_bert.predict(test_x_y['text'].tolist())\n\nacc_bert = accuracy_score(test_x_y['labels'].to_numpy(), pred_bert)\nf1_bert = f1_score(test_x_y['labels'].to_numpy(), pred_bert)\n\nprint(acc_bert, f1_bert)","61968f0b":"model_bert = ClassificationModel(\"bert\", \"bert-base-uncased\", args=model_args, use_cuda=False)\nmodel_bert.train_model(train_df_V2)\n\nfinal_pred_bert, final_out_bert = model_bert.predict(test_df['text_cleaned'].tolist())\n\nsubmit = pd.read_csv('..\/input\/nlp-getting-started\/sample_submission.csv')\nsubmit['target'] = final_pred_bert\nsubmit.to_csv('submission.csv', index=False)","2803e809":"**In both cases the keyword seems to be a negative word, with misspellings or not. Not very helpful. Let us convince ourselves of the lack of importance of the keyword by comparing the sentiment of the keywords for dissaster vs non-dissaster tweets. If we're doing this, we might aswell analyze the sentiment for the text too.**","5c8121ce":"**As with the first two models, we'll finish by checking the performance on the validation set.**","24a1067c":"**Number of words.**","7f4c7034":"**66% is pretty low and we don't have a good way to replace the missing data. Let's see whether the presence of the location could be a useful feature instead of the location itself.**","cbe309eb":"# So the location and the keyword did not help us very much, but the tweet sentiment seems to. Let's try and find more valuable features to add. We will normalize everything in order for the future neural net to learn better.","c1a053f9":"**That's more like it. Now let's prepare our train and test corpus.**","a1f9bc34":"**As with the first model, we'll finish by checking the performance on the validation set.**","dc07a774":"# But what about the keyword?","37c7e0ca":"# <font size=\"+2\" color=\"black\"><b>2. Text Cleaning + Glove Embeddings <\/b><\/font><br><a id=\"2\"><\/a>\n\n**First, we'll download the Glove embeddings and see how much of the text they already cover.**","93dc4131":"# <font size=\"+2\" color=\"black\"><b>4. Submission <\/b><\/font><br><a id=\"4\"><\/a>\n\n**We will train the Bert model on the whole training dataset and use it to make the final submission.**","63a3ecbc":"# <font size=\"+2\" color=\"black\"><b>0. Imports <\/b><\/font><br><a id=\"0\"><\/a>","e72db33d":"<a id='top'><\/a>\n<div class=\"list-group\" id=\"list-tab\" role=\"tablist\">\n<h3 data-toggle=\"list\"  role=\"tab\" aria-controls=\"home\"><p style=\"font-size : 25px\">NLP Disaster Tweets:<\/p><\/h3>\n    \n0. [Imports](#0)\n    \n1. [Data Understanding and Feature Selection](#1)      \n    \n2. [Text Cleaning + Glove Embeddings](#2)\n    \n3. [Neural Networks](#3)\n    - 3.1 [Bidirectional LSTM](#3.1)\n    - 3.2 [1D CNN + Bidirectional LSTM](#3.2)\n    - 3.3 [Bidirectional LSTM + FC Network on numerical features](#3.3)\n    - 3.4 [Bert](#3.4)  \n    \n4. [Submission](#4)\n\n5. [Conclusions](#5)","d70872d7":"**As with the first three models, we'll finish by checking the performance on the validation set. Admittedly, it is not the same validation set as before, but it should be just as useful to show the model's performance.**","70a85430":"**Now that seems a bit better.**","54cda2a6":"**Now that we have the accuracies and f1-scores for all of our first 3 models, let's compare them.**","9cb62825":"**Now that's a percentage we can work with. Let's see what kind of keywords do the real disaster tweets have compared to the non-disater ones.**","b1376b05":"**Number of unique words.**","7ad0df40":"**The keyword sentiment does not appear to matter that much. The overall tweet sentiment however, seems to be of somewhat importance. Let's keep that one and drop the keyword sentiment. Due to the unfortunately small size of the dataset thought, we will add the keyword to the text.**","f38f58f7":"**It seems pretty bad. We can make those percentages better by cleaning the text.**","77f4dd24":"# <font size=\"+2\" color=\"black\"><b>5. Conclusions <\/b><\/font><br><a id=\"5\"><\/a>\n\n**In conclusion, as expected, Bert does do a better job at the task at hand than our previous simpler models. I'm pretty sure that with enough data cleaning, the simpler models would have done just fine. Furthermore, with more data cleaning and some fine tuning, the Bert model could have achieved a much higher score, but as previously stated this is not the goal of this notebook. The goal was to practice investigating detasets, visalisations and model creation. In my opinion, the goal has been achieved.**","fa0fc0af":"<font size=\"+1\" color=\"black\"><b>3.1 Bidirectional LSTM <\/b><\/font><br><a id=\"3.1\"><\/a>\n\n**Now, for our first model. We will try a simple bidirectional LSTM with a lot of regularization since the dataset is so small.**","58ea8f0e":"**Unfortunately, the performance is not really what we would of wanted and it doesn't differ that much between the 3 models. I expect this to happen because of the small dataset and the fact that there are lots of tweets with very few words, of which 25% we don't even have in the embeddings. In order to get good performance with the 3 models we tried until now, we would need to clean the data much better. As I previously mentioned, this would be a tedious task and not the target of this notebook. Therefore, let's try Google's Bert and see if it has any improvements over our approaches.**","0c6539d4":"<font size=\"+1\" color=\"black\"><b>3.2 1D CNN + Bidirectional LSTM <\/b><\/font><br><a id=\"3.2\"><\/a>\n\n**For our second model, we will add a 1D convolutional layer with a kernel size of 3 hoping that it will help the model understand meaning from tri-grams.**","f57268e9":"# <font size=\"+2\" color=\"black\"><b>3. Neural Networks <\/b><\/font><br><a id=\"3\"><\/a>\n\n**We will try 3 types of models: Bidirectional LSTM, 1D CNN + Bidirectional LSTM and Bidirectional LSTM + FC Network on numerical features.**","c32adcb8":"**Number of characters.**","071a6bf6":"# <font size=\"+2\" color=\"black\"><b>1. Data Understanding and Feature Selection <\/b><\/font><br><a id=\"1\"><\/a>\n\n**Let's take our first look at the data.**","4ac46a3e":"**First, let's split the original training set in training and validation.**","18db9a3d":"**We'll finish by checking the performance on the validation set.**","70b4d87d":"**There seem to be a lot of NaN in keyword and location. Let's take a closer look at these columns in order to see if we can use them as features or not.**","f7cb54a6":"**Number of stopwords.**","f11caf08":"**We are missing about 25% of the words in the corpus, which is kind of high, but getting to a better percentage would require a large amount of manual work on the dataset and that is not our purpose.**","e8396848":"<font size=\"+1\" color=\"black\"><b>3.4 Bert <\/b><\/font><br><a id=\"3.4\"><\/a>\n\n**We are going to use the SimpleTransformers library in order to try and train Bert for our problem. In order to use it, we need to install it and then put the data in a specific format.**","c4ff4527":"**The presence\/absence of the location does not seem to be correlated with the target. Let's drop location and haslocation.**","e2312090":"**Also, we will have to re-create the testing and validation data since we also need the numerical features for this model.**","93f12736":"# Does location matter?","b1792cb0":"<font size=\"+1\" color=\"black\"><b>3.3 Bidirectional LSTM + FC Network on numerical features <\/b><\/font><br><a id=\"3.3\"><\/a>\n\n**Here, we will try using the numerical features that we collected in the first chapter. In order to do that, we need to fetch them.**","fa17c59a":"**Number of punctuation marks.**","8d3cb16e":"This notebook tries to classify tweets as either being about a **real** disaster or not. It is intended only for learning and practicing NLP tehniques.","b6eaf153":"**It seems like none of our features are highly correlated with the target. Nevertheless, we will try to use them in a network as an experiment.**"}}