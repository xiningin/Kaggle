{"cell_type":{"f0a03d86":"code","fcc92ff6":"code","73eee408":"code","9d88a6fb":"code","ade63e76":"code","88b0c627":"code","e25920cc":"code","c65f3768":"code","cd2943e4":"code","f58f1081":"code","51ebee69":"code","3f519a87":"code","3f964e7d":"code","c8c456d6":"code","94fc8761":"code","20f149b2":"code","870ff197":"code","b92fb876":"code","f7a8b28f":"code","1af91c1b":"code","29e886c3":"code","f591a5db":"code","15f02942":"code","3d25a6d2":"code","d89b6791":"code","6450ed45":"code","5c220137":"code","95a4bb21":"code","587a224e":"code","9bc1d374":"code","ce602402":"code","fd83c89c":"code","1bbb5574":"code","5288c2d3":"markdown","d0c29205":"markdown","61e88ee6":"markdown","692eb71e":"markdown","236d9615":"markdown","0726a020":"markdown","92d3a5d0":"markdown","7c9fa632":"markdown","1aa80ed4":"markdown","3e1cc2ff":"markdown","021349f5":"markdown","05d90e6d":"markdown","3a56440d":"markdown","a3f94b67":"markdown"},"source":{"f0a03d86":"import os\nimport numpy as np\nimport pandas as pd\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n%matplotlib inline\nimport cv2\nfrom tqdm import tqdm\nfrom PIL import Image\nimport io\n\nimport tensorflow as tf\nfrom tensorflow.keras.preprocessing.image import ImageDataGenerator\nfrom sklearn.utils import shuffle\nfrom sklearn.model_selection import train_test_split\nfrom tensorflow.keras.applications import EfficientNetB2\nfrom keras.layers import GlobalAveragePooling2D, Dropout, Dense\nfrom keras.models import Model\nfrom tensorflow.keras.callbacks import EarlyStopping, ReduceLROnPlateau, TensorBoard, ModelCheckpoint\nfrom sklearn.metrics import classification_report, confusion_matrix\nfrom IPython.display import display, clear_output\nimport ipywidgets as widgets\n","fcc92ff6":"labels = ['glioma_tumor', 'meningioma_tumor', 'no_tumor', 'pituitary_tumor']\nX_train = []\nY_train  = []\nX_test = []\nY_test = []\nimage_size=150\n\nfor label in labels:\n    trainPath = os.path.join('..\/input\/brain-tumor-classification-mri\/Training',label)\n    for file in tqdm(os.listdir(trainPath)):\n        image = cv2.imread(os.path.join(trainPath, file))\n        image = cv2.resize(image, (image_size, image_size))\n        X_train.append(image)\n        Y_train.append(label)\n    \n    testPath = os.path.join('..\/input\/brain-tumor-classification-mri\/Testing',label)\n    for file in tqdm(os.listdir(testPath)):\n        image = cv2.imread(os.path.join(testPath, file))\n        image = cv2.resize(image, (image_size, image_size))\n        X_test.append(image)\n        Y_test.append(label)\n    \nX_train = np.array(X_train)\nX_test = np.array(X_test)","73eee408":"fig, ax = plt.subplots(1,4, figsize=(20,20))\nk = 0\nfor i in range(0,4):\n    if i==0: idx=0\n    elif i==1: idx=827\n    elif i==2: idx=1649\n    else: idx=2045\n    ax[k].imshow(X_train[idx])\n    ax[k].set_title(Y_train[idx])\n    ax[k].axis('off')\n    k+=1","9d88a6fb":"X_train, Y_train = shuffle(X_train, Y_train, random_state=28)","ade63e76":"X_train.shape","88b0c627":"sns.countplot(Y_test)","e25920cc":"sns.countplot(Y_train)","c65f3768":"y_train_ = []\nfor i in Y_train:\n    y_train_.append(labels.index(i))\nY_train = y_train_\n\nY_train = tf.keras.utils.to_categorical(Y_train)\n\ny_test_ = []\nfor i in Y_test:\n    y_test_.append(labels.index(i))\nY_test = y_test_\n\nY_test = tf.keras.utils.to_categorical(Y_test)","cd2943e4":"X_train, X_val, Y_train, Y_val = train_test_split(X_train, Y_train, test_size=0.2, random_state=28)","f58f1081":"base_model = EfficientNetB2(weights='imagenet', include_top=False, input_shape=(image_size, image_size, 3))","51ebee69":"model = base_model.output\nmodel = GlobalAveragePooling2D()(model)\nmodel = Dense(4, activation='softmax')(model)\nmodel = Model(inputs = base_model.input, outputs=model)","3f519a87":"model.summary()","3f964e7d":"model.compile(loss='categorical_crossentropy', optimizer='Adam', metrics=['accuracy'])","c8c456d6":"reduce_lr = ReduceLROnPlateau(monitor='val_accuracy', factor=0.3, patience=2, min_denta=0.0001, mode='auto', verbose=1)\ntensorboard = TensorBoard(log_dir='logs')\ncheckpoint = ModelCheckpoint(\"brain_tumor_classification.h5\", monitor='val_accuracy', save_best_only=True, mode='auto', verbose=1)","94fc8761":"datagen = ImageDataGenerator(\nfeaturewise_center=False,\nsamplewise_center=False,\nfeaturewise_std_normalization=False,\nsamplewise_std_normalization=False,\nzca_whitening=False,\nrotation_range=10,\nzoom_range=0.2,\nwidth_shift_range=0.2,\nhorizontal_flip=False,\nvertical_flip=False)\n\ndatagen.fit(X_train)","20f149b2":"history = model.fit_generator(datagen.flow(X_train, Y_train, batch_size=32),\n                              validation_data=(X_val, Y_val), \n                              epochs=50, \n                              verbose=1,\n                            callbacks=[tensorboard, checkpoint, reduce_lr])","870ff197":"# Plot the loss and accuracy curves for training and validation \nfig, ax = plt.subplots(2,1)\nax[0].plot(history.history['loss'], color='b', label=\"Training loss\")\nax[0].plot(history.history['val_loss'], color='r', label=\"validation loss\",axes =ax[0])\nlegend = ax[0].legend(loc='best', shadow=True)\n\nax[1].plot(history.history['accuracy'], color='b', label=\"Training accuracy\")\nax[1].plot(history.history['val_accuracy'], color='r',label=\"Validation accuracy\")\nlegend = ax[1].legend(loc='best', shadow=True)","b92fb876":"pred = model.predict(X_test)\npred = np.argmax(pred,axis=1)\ny_test_new = np.argmax(Y_test,axis=1)","f7a8b28f":"accuracy = np.sum(pred==y_test_new)\/len(pred)\nprint(\"Accuracy on testing dataset: {:.2f}%\".format(accuracy*100))","1af91c1b":"def img_pred(upload):\n    for name, file_info in uploader.value.items():\n        img = Image.open(io.BytesIO(file_info['content']))\n    opencvImage = cv2.cvtColor(np.array(img), cv2.COLOR_RGB2BGR)\n    img = cv2.resize(opencvImage,(150,150))\n    img = img.reshape(1,150,150,3)\n    p = model.predict(img)\n    p = np.argmax(p,axis=1)[0]\n\n    if p==0:\n        p='Glioma Tumor'\n    elif p==1:\n        p='Meningioma Tumor'\n    elif p==2:\n        print('The model predicts that there is no tumor')\n    else:\n        p='Pituitary Tumor'\n\n    if p!=2:\n        print(f'The Model predicts that it is a {p}')","29e886c3":"uploader = widgets.FileUpload()\ndisplay(uploader)\nbutton = widgets.Button(description='Predict')\nout = widgets.Output()\ndef on_button_clicked(_):\n    with out:\n        clear_output()\n        try:\n            img_pred(uploader)\n        except:\n            print('No Image Uploaded\/Invalid Image File')\nbutton.on_click(on_button_clicked)\nwidgets.VBox([button,out])","f591a5db":"new_model = tf.keras.models.load_model('.\/brain_tumor_classification.h5')","15f02942":"test_pred = new_model.predict(X_test)\ntest_pred = np.argmax(test_pred, axis=1)\nY_test_ = np.argmax(Y_test, axis=1)\nprint(\"Accuracy on testing set: {:.2f}%\".format(np.sum(test_pred==Y_test_)\/len(Y_test_)*100))","3d25a6d2":"train_pred = new_model.predict(X_train)\ntrain_pred = np.argmax(train_pred, axis=1)\nY_train_ = np.argmax(Y_train, axis=1)\nprint(\"Accuracy on training set: {:.2f}%\".format(np.sum(train_pred==Y_train_)\/len(Y_train_)*100))","d89b6791":"# tunning the model\nbase_model.trainable = True\n\nfor layer in base_model.layers[:-1]:\n  base_model.trainable = False\n\nmodel.compile(\n    loss = tf.keras.losses.categorical_crossentropy,\n    optimizer = tf.keras.optimizers.Adam(learning_rate= 0.001),\n    metrics = [\"accuracy\"]\n)","6450ed45":"model.summary()","5c220137":"train_dir = \"..\/input\/brain-tumor-classification-mri\/Training\"\ntest_dir = \"..\/input\/brain-tumor-classification-mri\/Testing\"","95a4bb21":"import tensorflow as tf\n\ntrain_data = tf.keras.preprocessing.image_dataset_from_directory(train_dir,\n                                                                 image_size=(150,150),\n                                                                 label_mode = \"categorical\",\n                                                                 batch_size = 32\n                                                                 )\ntest_data =tf.keras.preprocessing.image_dataset_from_directory(test_dir,\n                                                               image_size =(150,150),\n                                                               label_mode = \"categorical\",\n                                                               batch_size = 32\n                                                               )","587a224e":"# fitting data to the tuned model\n\nh_t=model.fit(train_data,\n          epochs = 10,\n          steps_per_epoch = len(train_data),\n          validation_data = test_data,\n          validation_steps = len(test_data)\n          )","9bc1d374":"# evaluatinn the model\nmodel_evaluation = model.evaluate(test_data)","ce602402":"print(f\"Model Accuracy:{model_evaluation[1] *100: 0.2f} %\")","fd83c89c":"import seaborn as sns\ncolors_dark = [\"#1F1F1F\", \"#313131\", '#636363', '#AEAEAE', '#DADADA']\ncolors_red = [\"#331313\", \"#582626\", '#9E1717', '#D35151', '#E9B4B4']\ncolors_green = ['#01411C','#4B6F44','#4F7942','#74C365','#D0F0C0']\n\nsns.palplot(colors_dark)\nsns.palplot(colors_green)\nsns.palplot(colors_red)","1bbb5574":"epochs = [i for i in range(10)]\nfig, ax = plt.subplots(1,2,figsize=(14,7))\ntrain_acc = h_t.history['accuracy']\ntrain_loss = h_t.history['loss']\nval_acc = h_t.history['val_accuracy']\nval_loss = h_t.history['val_loss']\n\nfig.text(s='Epochs vs. Training and Validation Accuracy\/Loss_tunning',size=18,fontweight='bold',\n             fontname='monospace',color=colors_dark[1],y=1,x=0.28,alpha=0.8)\n\nsns.despine()\nax[0].plot(epochs, train_acc, marker='o',markerfacecolor=colors_green[2],color=colors_green[3],\n           label = 'Training Accuracy')\nax[0].plot(epochs, val_acc, marker='o',markerfacecolor=colors_red[2],color=colors_red[3],\n           label = 'Validation Accuracy')\nax[0].legend(frameon=False)\nax[0].set_xlabel('Epochs')\nax[0].set_ylabel('Accuracy')\n\nsns.despine()\nax[1].plot(epochs, train_loss, marker='o',markerfacecolor=colors_green[2],color=colors_green[3],\n           label ='Training Loss')\nax[1].plot(epochs, val_loss, marker='o',markerfacecolor=colors_red[2],color=colors_red[3],\n           label = 'Validation Loss')\nax[1].legend(frameon=False)\nax[1].set_xlabel('Epochs')\nax[1].set_ylabel('Training & Validation Loss')\n\nfig.show()","5288c2d3":"## Import Necessarcy Libraries","d0c29205":"## Data Preparation","61e88ee6":"## One-Hot encoding","692eb71e":"## Data Augmentation","236d9615":"## Show sample images from each label","0726a020":"## Shuffle the train set","92d3a5d0":"## Split the data into training and validation subsets","7c9fa632":"## Train Model","1aa80ed4":"## Evaluate the model","3e1cc2ff":"## Define Callbacks","021349f5":"### Show the counts of observations in each categorical bin using bars.","05d90e6d":"# Tunning the model\n","3a56440d":"## Visusalize model performance","a3f94b67":"## Transfer Learning with EfficientNetB2"}}