{"cell_type":{"eddf9671":"code","c2182057":"code","b2e0bd39":"code","cf312690":"code","e07a6f39":"code","495f731b":"code","dc53459b":"code","f431b7b2":"code","3b23c78d":"code","00244380":"code","fa517d5f":"code","9f5bb9c1":"code","7fc53907":"code","357ec314":"markdown","a45b7918":"markdown","85510f6a":"markdown","e74e9b92":"markdown","8094b596":"markdown","f387d16d":"markdown","4ac3bd6c":"markdown","2edda67d":"markdown","92d4cc87":"markdown","87bd8ff2":"markdown"},"source":{"eddf9671":"import os\nimport sys\nimport random\nimport warnings\n\nimport numpy as np\nimport pandas as pd\nimport cv2\n\nimport matplotlib.pyplot as plt\n\nfrom tqdm import tqdm\nfrom itertools import chain\nimport skimage\nfrom PIL import Image\nfrom skimage.io import imread, imshow, imread_collection, concatenate_images\nfrom skimage.transform import resize\nfrom skimage.util import crop, pad\nfrom skimage.morphology import label\nfrom skimage.color import rgb2gray, gray2rgb, rgb2lab, lab2rgb\nfrom sklearn.model_selection import train_test_split\n\nfrom keras.applications.inception_resnet_v2 import InceptionResNetV2, preprocess_input\nfrom keras.models import Model, load_model,Sequential\nfrom keras.preprocessing.image import ImageDataGenerator\nfrom keras.layers import Input, Dense, UpSampling2D, RepeatVector, Reshape\nfrom keras.layers.core import Dropout, Lambda\nfrom keras.layers.convolutional import Conv2D, Conv2DTranspose\nfrom keras.layers.pooling import MaxPooling2D\nfrom keras.layers.merge import concatenate\nfrom keras.callbacks import EarlyStopping, ModelCheckpoint, ReduceLROnPlateau\nfrom keras import backend as K\n\nimport tensorflow as tf\n\nwarnings.filterwarnings('ignore', category=UserWarning, module='skimage')\nseed = 42\nrandom.seed = seed\nnp.random.seed = seed","c2182057":"IMG_WIDTH = 256\nIMG_HEIGHT = 256\nIMG_CHANNELS = 3\nINPUT_SHAPE=(IMG_HEIGHT, IMG_WIDTH, 1)\nTRAIN_PATH = '..\/input\/art-images-drawings-painting-sculpture-engraving\/dataset\/dataset_updated\/training_set\/painting\/'\n\ntrain_ids = next(os.walk(TRAIN_PATH))[2]","b2e0bd39":"%%time\nX_train = np.zeros((len(train_ids)-86, IMG_HEIGHT, IMG_WIDTH, IMG_CHANNELS), dtype=np.uint8)\nmissing_count = 0\nprint('Getting train images ... ')\nsys.stdout.flush()\nfor n, id_ in tqdm(enumerate(train_ids), total=len(train_ids)):\n    path = TRAIN_PATH + id_+''\n    try:\n        img = imread(path)\n        img = resize(img, (IMG_HEIGHT, IMG_WIDTH), mode='constant', preserve_range=True)\n        X_train[n-missing_count] = img\n    except:\n#         print(\" Problem with: \"+path)\n        missing_count += 1\n\nX_train = X_train.astype('float32') \/ 255.\nprint(\"Total missing: \"+ str(missing_count))","cf312690":"imshow(X_train[5])\nplt.show()","e07a6f39":"X_train, X_test = train_test_split(X_train, test_size=20, random_state=seed)","495f731b":"inception = InceptionResNetV2(weights=None, include_top=True)\ninception.load_weights('..\/input\/inception-resnet-v2-weights\/inception_resnet_v2_weights_tf_dim_ordering_tf_kernels.h5')\ninception.graph = tf.get_default_graph()","dc53459b":"def Colorize():\n    embed_input = Input(shape=(1000,))\n    \n    #Encoder\n    encoder_input = Input(shape=(256, 256, 1,))\n    encoder_output = Conv2D(128, (3,3), activation='relu', padding='same',strides=1)(encoder_input)\n    encoder_output = MaxPooling2D((2, 2), padding='same')(encoder_output)\n    encoder_output = Conv2D(128, (4,4), activation='relu', padding='same')(encoder_output)\n    encoder_output = Conv2D(128, (3,3), activation='relu', padding='same',strides=1)(encoder_output)\n    encoder_output = MaxPooling2D((2, 2), padding='same')(encoder_output)\n    encoder_output = Conv2D(256, (4,4), activation='relu', padding='same')(encoder_output)\n    encoder_output = Conv2D(256, (3,3), activation='relu', padding='same',strides=1)(encoder_output)\n    encoder_output = MaxPooling2D((2, 2), padding='same')(encoder_output)\n    encoder_output = Conv2D(256, (4,4), activation='relu', padding='same')(encoder_output)\n    encoder_output = Conv2D(256, (3,3), activation='relu', padding='same')(encoder_output)\n    encoder_output = Conv2D(256, (3,3), activation='relu', padding='same')(encoder_output)\n    \n    #Fusion\n    fusion_output = RepeatVector(32 * 32)(embed_input) \n    fusion_output = Reshape(([32, 32, 1000]))(fusion_output)\n    fusion_output = concatenate([encoder_output, fusion_output], axis=3) \n    fusion_output = Conv2D(256, (1, 1), activation='relu', padding='same')(fusion_output)\n    \n    #Decoder\n    decoder_output = Conv2D(128, (3,3), activation='relu', padding='same')(fusion_output)\n    decoder_output = Conv2D(64, (3,3), activation='relu', padding='same')(decoder_output)\n    decoder_output = UpSampling2D((2, 2))(decoder_output)\n    decoder_output = Conv2D(128, (3,3), activation='relu', padding='same')(decoder_output)\n    decoder_output = UpSampling2D((2, 2))(decoder_output)\n    decoder_output = Conv2D(64, (4,4), activation='relu', padding='same')(decoder_output)\n    decoder_output = Conv2D(64, (3,3), activation='relu', padding='same')(decoder_output)\n    decoder_output = Conv2D(32, (2,2), activation='relu', padding='same')(decoder_output)\n    decoder_output = Conv2D(2, (3, 3), activation='tanh', padding='same')(decoder_output)\n    decoder_output = UpSampling2D((2, 2))(decoder_output)\n    return Model(inputs=[encoder_input, embed_input], outputs=decoder_output)\n\nmodel = Colorize()\nmodel.compile(optimizer='adam', loss='mean_squared_error')\nmodel.summary()","f431b7b2":"%%time\n\n# Image transformer\ndatagen = ImageDataGenerator(\n        shear_range=0.2,\n        zoom_range=0.2,\n        rotation_range=20,\n        horizontal_flip=True)\n\n#Create embedding\ndef create_inception_embedding(grayscaled_rgb):\n    def resize_gray(x):\n        return resize(x, (299, 299, 3), mode='constant')\n    grayscaled_rgb_resized = np.array([resize_gray(x) for x in grayscaled_rgb])\n    grayscaled_rgb_resized = preprocess_input(grayscaled_rgb_resized)\n    with inception.graph.as_default():\n        embed = inception.predict(grayscaled_rgb_resized)\n    return embed\n\n#Generate training data\ndef image_a_b_gen(dataset=X_train, batch_size = 20):\n    for batch in datagen.flow(dataset, batch_size=batch_size):\n        X_batch = rgb2gray(batch)\n        grayscaled_rgb = gray2rgb(X_batch)\n        lab_batch = rgb2lab(batch)\n        X_batch = lab_batch[:,:,:,0]\n        X_batch = X_batch.reshape(X_batch.shape+(1,))\n        Y_batch = lab_batch[:,:,:,1:] \/ 128\n        yield [X_batch, create_inception_embedding(grayscaled_rgb)], Y_batch\n        ","3b23c78d":"# Set a learning rate annealer\nlearning_rate_reduction = ReduceLROnPlateau(monitor='loss', \n                                            patience=3, \n                                            verbose=1, \n                                            factor=0.5,\n                                            min_lr=0.00001)\nfilepath = \"Art_Colorization_Model.h5\"\ncheckpoint = ModelCheckpoint(filepath,\n                             save_best_only=True,\n                             monitor='loss',\n                             mode='min')\n\nmodel_callbacks = [learning_rate_reduction,checkpoint]","00244380":"%%time\nBATCH_SIZE = 20\nmodel.fit_generator(image_a_b_gen(X_train,BATCH_SIZE),\n            epochs=30,\n            verbose=1,\n            steps_per_epoch=X_train.shape[0]\/BATCH_SIZE,\n             callbacks=model_callbacks\n                   )","fa517d5f":"model.save(filepath)\nmodel.save_weights(\"Art_Colorization_Weights.h5\")","9f5bb9c1":"sample = X_test\ncolor_me = gray2rgb(rgb2gray(sample))\ncolor_me_embed = create_inception_embedding(color_me)\ncolor_me = rgb2lab(color_me)[:,:,:,0]\ncolor_me = color_me.reshape(color_me.shape+(1,))\n\noutput = model.predict([color_me, color_me_embed])\noutput = output * 128\n\ndecoded_imgs = np.zeros((len(output),256, 256, 3))\n\nfor i in range(len(output)):\n    cur = np.zeros((256, 256, 3))\n    cur[:,:,0] = color_me[i][:,:,0]\n    cur[:,:,1:] = output[i]\n    decoded_imgs[i] = lab2rgb(cur)\n    cv2.imwrite(\"img_\"+str(i)+\".jpg\", lab2rgb(cur))","7fc53907":"plt.figure(figsize=(20, 6))\nfor i in range(10):\n    # grayscale\n    plt.subplot(3, 10, i + 1)\n    plt.imshow(rgb2gray(X_test)[i].reshape(256, 256))\n    plt.gray()\n    plt.axis('off')\n \n    # recolorization\n    plt.subplot(3, 10, i + 1 +10)\n    plt.imshow(decoded_imgs[i].reshape(256, 256,3))\n    plt.axis('off')\n    \n    # original\n    plt.subplot(3, 10, i + 1 + 20)\n    plt.imshow(X_test[i].reshape(256, 256,3))\n    plt.axis('off')\n \nplt.tight_layout()\nplt.show()","357ec314":"# Image Colorization Using Autoencoders and Resnet\n\nThis notebook is an attempt to colorize grayscale images using deep learning. While I originally played around with this idea using an autoencoder and my own steam, I switched to the trying technique discribed in this article: https:\/\/medium.freecodecamp.org\/colorize-b-w-photos-with-a-100-line-neural-network-53d9b4449f8d","a45b7918":"# Conclusion\n\nThe results are ok but not perfect, mostly brownish with some interesting splashes of color on the testing set. However this is not too bad all things considered because:\n\n-The data set was on artworks, not photographs, which are less consistent and problematic for classification. resnet might be trained on 1.2 million images but I'm not sure how many victorian ball gowns and such are in it.\n\n-The writer of the original article admits that he had to cherry pick the results to get a good sample of 20 from his ~2500 testing set. Most of his results turned out brownish as well.\n\nThere are other techniques to try in the future, but this is a good stopping place for this notebook. If you enjoyed this notebook, please upvote it and check out my other notebooks.","85510f6a":"# Data Generator Functions","e74e9b92":"# Checkpoints","8094b596":"# Read in Data\n\nThe dataset I am using is ~2000 classic paintings which we will remove the color from and attempt to teach a nearal network to recolorize them.","f387d16d":"# Create the Model\n\nThe model is a combination of an autoencoder and resnet classifier. The best an autoencoder by itself is just shade everything in a brownish tone. The model uses an resnet classifier to give the neural network an \"idea\" of what things should be colored.","4ac3bd6c":"# Sample the Results","2edda67d":"# Train\/Test Split\nJust getting a sample of 20 images to test the model when it is done.","92d4cc87":"# Train the Model","87bd8ff2":"(Note that 86 of the train_ids have errors while being loading into our dataset, so we will just skip over them. We don't really need them.)"}}