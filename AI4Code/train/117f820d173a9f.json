{"cell_type":{"6f1c6c04":"code","feb733e8":"code","2d521303":"code","931b46c2":"code","1cdf9325":"code","8fd3312e":"code","5dfb687d":"code","25434b2f":"code","8f29dccf":"code","b5a49ec9":"code","807d046a":"code","1189a2a2":"code","d3f00bf7":"code","86bc4235":"code","9d8e87cf":"code","4acc66a3":"code","f5c19a20":"code","28d959e1":"code","6c6dffe7":"code","5b5d3f74":"code","ee930ea6":"code","4e2d9843":"code","083b20ce":"code","5e03b94f":"code","9ef159ef":"code","ea8fa9a5":"code","d60c5462":"code","1aae92f1":"code","c78a6caa":"code","0a904b5a":"code","195edc17":"code","ae33e1e5":"code","1dee4cdc":"code","2af20cef":"code","9c5358dd":"code","352b20ed":"markdown","9bf9b908":"markdown","6368307e":"markdown","4e5ea0a0":"markdown","36d39b97":"markdown","b62600c7":"markdown","bc9823fb":"markdown","5bc3c80b":"markdown","bbd63c2c":"markdown","083745f0":"markdown","35fc9072":"markdown","470a259f":"markdown","a2672f8d":"markdown","b5dfbcb0":"markdown","f15169bf":"markdown","39345fca":"markdown","03e14b79":"markdown","63aff8d7":"markdown","d07033f4":"markdown","ce63d441":"markdown","840098f1":"markdown","fed9e21a":"markdown"},"source":{"6f1c6c04":"import pandas as pd \nimport numpy as np\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nfrom gensim.test.utils import get_tmpfile\nfrom gensim.models.doc2vec import Doc2Vec, TaggedDocument\nfrom sklearn.decomposition import PCA\n%matplotlib inline","feb733e8":"ramen_df = pd.read_csv('..\/input\/ramen-ratings\/ramen-ratings.csv')\nprint(ramen_df.shape)\nramen_df.head()","2d521303":"print(ramen_df['Review #'].nunique())","931b46c2":"ramen_df.info()","1cdf9325":"\nramen_df[ramen_df['Top Ten'].isnull() == False]['Top Ten'].unique()","8fd3312e":"ramen_df[ramen_df['Top Ten'].isnull() == False][['Review #','Top Ten']].sort_values(by='Review #')","5dfb687d":"ramen_df['Top Ten'].fillna('not ranked',inplace=True)\nramen_df.loc[ramen_df[\"Top Ten\"] ==\"\\n\",'Top Ten'] = 'not ranked'\n","25434b2f":"top_ramen = pd.DataFrame()\ntop_ramen = ramen_df[ramen_df[\"Top Ten\"] != \"not ranked\"]\ntop_ramen['year'] = ramen_df[ramen_df[\"Top Ten\"] != \"not ranked\"][\"Top Ten\"].str.extract(r'([0-9]+)')\ntop_ramen['rank'] = ramen_df[ramen_df[\"Top Ten\"] != \"not ranked\"][\"Top Ten\"].str.extract(r'(#[0-9]+)').replace('#',' ',regex=True)\ntop_ramen.drop('Top Ten',inplace =True,axis=1)\ntop_ramen.head()","8f29dccf":"ramen_df['Stars'].unique()","b5a49ec9":"ramen_df.dtypes","807d046a":"row = ramen_df.query('Stars != \"Unrated\"')['Stars'].astype('float')","1189a2a2":"plt.hist(row,bins=20);","d3f00bf7":"ramen_df.query('Stars == \"Unrated\"').shape[0]","86bc4235":"ramen_df.drop(ramen_df[ramen_df['Stars']==\"Unrated\"].index,inplace=True)\nramen_df['Stars'] = ramen_df['Stars'].astype('float')","9d8e87cf":"category_cols = ['Brand','Variety','Style','Country']\n\nfor i,col in enumerate(category_cols):\n    print(ramen_df[col].nunique())","4acc66a3":"color = sns.color_palette()[0]\nsns.countplot(data=ramen_df,x='Style',color=color,order = ramen_df['Style'].value_counts().index);","f5c19a20":"plt.figure(figsize=(12,12))\nsns.countplot(data=ramen_df,y='Country',color=color,order = ramen_df['Country'].value_counts().index);\n","28d959e1":"ramen_df['Brand'].value_counts()[ramen_df['Brand'].value_counts() >30]","6c6dffe7":"plt.figure(figsize=(12,12))\nB_count = ramen_df['Brand'].value_counts()\nB_count = B_count[B_count>10]\nsns.barplot(x=B_count,y=B_count.index,color=color);\n","5b5d3f74":"cols = ['Country', 'Brand', 'Style']\nfig,axs = plt.subplots(3,1,figsize=(10,10))\nfor i,col in enumerate(cols):\n    top = list(ramen_df[cols[i]].value_counts()[:10].index)\n    \n    df= ramen_df[ramen_df[col].isin(top)]\n    sns.violinplot(data=df,x=cols[i],y='Stars',ax=axs[i],order=top);\n    \n","ee930ea6":"cols = ['Country', 'Brand', 'Style']\nfig,axs = plt.subplots(3,1,figsize=(10,10))\nfor i,col in enumerate(cols):\n    top = list(ramen_df[cols[i]].value_counts()[:10].index)\n    \n    df= ramen_df[ramen_df[col].isin(top)]\n    sns.boxplot(data=df,x=cols[i],y='Stars',ax=axs[i],order=top);\n    \n","4e2d9843":"k = ramen_df.loc[:,'Stars'].groupby(np.arange(len(ramen_df))\/\/30).mean()\nplt.plot(k)\nplt.ylim(0);","083b20ce":"df = ramen_df\nTopRamenCountris = ramen_df['Country'].value_counts()[:11]\ndf = ramen_df.query('Country in @TopRamenCountris.index')\ndf = df.groupby(['Country','Brand']).size().reset_index()\ndf = df.pivot('Brand','Country',0).fillna(0)\nbrands = df.sum(axis=1)[df.sum(axis=1)>50].index\nsns.clustermap(df.loc[brands,:])","5e03b94f":"variety_words =set()\nfor index,row in ramen_df.iterrows():\n    #print(row)\n    word_list = row['Variety'].split()\n    variety_words.update(word_list)\nlen(variety_words)","9ef159ef":"\ntext = ramen_df['Variety'].unique()\ndocuments = [TaggedDocument(doc, [i]) for i, doc in enumerate(text)]\nmodel = Doc2Vec(documents, vector_size=6, window=2, min_count=1, workers=4)\n#Persist a model to disk:\n\n\nfname = get_tmpfile(\"my_doc2vec_model\")\n\nmodel.save(fname)\n\n","ea8fa9a5":"\nfname = get_tmpfile(\"my_doc2vec_model\")\nmodel = Doc2Vec.load(fname)  # you can continue training with the loaded model!\n#If you\u2019re finished training a model (=no more updates, only querying, reduce memory usage), you can do:\n\nmodel.delete_temporary_training_data(keep_doctags_vectors=True, keep_inference=True)\n#Infer vector for a new document:\n","d60c5462":"for index,row in ramen_df.iterrows(): \n    ramen_df.loc[index,['1','2','3','4','5','6']] = model.infer_vector(row['Variety'].split()) ","1aae92f1":"pca = PCA(n_components=2)\nprincipalComponents = pca.fit_transform(ramen_df[['1','2','3','4','5','6']])\nprincipalDf = pd.DataFrame(data = principalComponents\n             , columns = ['principal component 1', 'principal component 2'])\nprincipalDf['Stars'] = ramen_df['Stars']","c78a6caa":"plt.scatter(data=principalDf,x='principal component 1',y='principal component 2',c=principalDf['Stars'],alpha=5\/10)\nplt.colorbar()","0a904b5a":"TopRamenCountris = ramen_df['Country'].value_counts()[:11]\nTopRamenCountris","195edc17":"df = ramen_df.query('Country in @TopRamenCountris.index')\nk = df.loc[:,['Country','Stars']].groupby([np.arange(len(df))\/\/40,'Country']).mean()\nk = k.reset_index()\nk","ae33e1e5":"\nd = k.pivot(\"Country\", \"level_0\", \"Stars\").fillna(0)\nd = d.drop(55,axis=1)\nsns.clustermap(d,col_cluster=False)","1dee4cdc":"TopRamenBrands = ramen_df['Brand'].value_counts()[:11]\ndf = ramen_df.query('Brand in @TopRamenBrands.index')\nk = df.loc[:,['Brand','Stars']].groupby([np.arange(len(df))\/\/40,'Brand']).mean()\nk = k.reset_index()\nd = k.pivot(\"Brand\", \"level_0\", \"Stars\").fillna(0)\n#d = d.drop(55,axis=1)\nsns.clustermap(d,col_cluster=False)","2af20cef":"TopRamenBrands = ramen_df['Brand'].value_counts()[:10]\ndf = ramen_df.query('Brand in @TopRamenBrands.index')\nk = df.loc[:,['Brand','Stars']].groupby([np.arange(len(df))\/\/40,'Brand']).mean()\nk = k.reset_index()","9c5358dd":"g= sns.FacetGrid(data=k,col='Brand',col_order=TopRamenBrands.index,aspect=2,col_wrap=3);\n\ng.map(plt.plot,'level_0','Stars');","352b20ed":">Indomie Brand is in indonisea mainly and indonisea has high ratings. From previous plots we see that Indomie has high ratings too.  ","9bf9b908":"### The reiew number looks to be associated with time ","6368307e":"> The ratings are high in general. For countries Japan, Malaysia, Indenosia and Singapore hs high peaks in 5 Stars rating. The Brands that has higher ratings are Nissin,Nongshim, Paldo and Indomies. \n\n>The style graph looks to not have effect on rating except for Box style which has high ratings (may be because the very low number of records). ","4e5ea0a0":"### let's check if this associated with countries contribution in rating over time.","36d39b97":"### let's try to imped them and see if the rating is affected by it","b62600c7":"There are many flactuations but in general some Brands are increasing in ratings with time, some are decreasing and some just are maintaining their level.","bc9823fb":"> left skewed as positive ratings like 5 (the higheest frequency) and 4 are more likely to be found.","5bc3c80b":"> Top ten is given for top 10 ramens ranked over a year in years 2013-2016 (4 years * 10 =40 number of non-null values -1 because of that \/n record)","bbd63c2c":"### now visualise the impeddings using PCA ","083745f0":"### Now let's take closer loak on Variety as the elements in it is nearly unique","35fc9072":"### the variety doesn't play major role in seperating the ratings","470a259f":"### let's do some exploration","a2672f8d":"### let's see the relation between countries, Brand, style with rating","b5dfbcb0":"> The ratings are decreasing with time","f15169bf":"> Nissin is in Hong Kong, USA, Singapore  and mainly in Japan. The rest of the brands are in one or two places. USA, Japan and South Korea has more than 1 main Brand (3 main Brands).","39345fca":"> There are 1564 unique word in the varieties ","03e14b79":"> let's see if the review numbe is associated with the years","63aff8d7":"> just 3 records unrated we can git rid of them ","d07033f4":"#### let's see the review number effect on the rating","ce63d441":"### let's see what is top 10 means","840098f1":"## The ID is review","fed9e21a":">Some brands doesn't have reviews in early times like Mama, Luckt Me!, Vina Acecook. \nSamyang Foods doesn't have records at late times. \n\n>Nissin has moderately high ratings over time.\nSome Brands has no records in some time intervals and some has really high ratings at early times which decreases over time like Nongshim and Paldo."}}