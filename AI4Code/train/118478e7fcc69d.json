{"cell_type":{"fbc00b37":"code","297565cc":"code","0848e982":"code","31565d5f":"code","e48be50d":"code","07d13b2b":"code","b8cce095":"code","f6de762d":"code","30bb5f21":"code","2928baff":"code","fe7be5f4":"code","d0adc1d4":"code","a8445d24":"code","09fce5c6":"code","13bb97ee":"code","ef6022f9":"code","253c5343":"code","0a05a756":"code","311f1137":"code","fe606ebb":"code","58096a4e":"code","24662381":"code","78a6d341":"code","7a128556":"code","f870d427":"code","de6b7335":"code","6005779b":"code","83e6dc95":"code","1485924e":"code","5bcdeffb":"code","13bad909":"code","8007d1bf":"code","0eafacf9":"code","a2f0a5be":"code","337f25d8":"code","7d41f848":"code","667a793c":"code","33833245":"code","a36474b4":"code","78d047dd":"code","f5e8314f":"code","4e0dd2df":"code","549f8c55":"code","8dd75ef8":"code","d42300c0":"code","a7678b0d":"code","72d02fac":"code","1b84edbf":"code","1a241214":"code","53d2f382":"code","67898942":"code","68f5fa4e":"code","3ffc79a2":"code","a7cba94b":"code","66f4cfc0":"code","88e8fa23":"code","78d0a7bc":"code","844e0ff1":"code","4ac79968":"code","d8eac38f":"code","386a32f7":"code","a7fb8a71":"code","2661a6ce":"markdown"},"source":{"fbc00b37":"import numpy as np\nimport pandas as pd\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n%matplotlib inline\nimport IPython","297565cc":"pd.set_option('max_columns' , None) #to see all the columns\ndf = pd.read_csv(r'C:\\Users\\Chitwan\\Downloads\\summeranalytics2020\\train.csv')\ndf_test = pd.read_csv(r'C:\\Users\\Chitwan\\Downloads\\summeranalytics2020\\test.csv')","0848e982":"df.shape","31565d5f":"df.head()","e48be50d":"X = df.drop([\"Attrition\"] , axis = 1)","07d13b2b":"y = df[\"Attrition\"]","b8cce095":"X.head()","f6de762d":"y.head()","30bb5f21":"from sklearn.model_selection import train_test_split","2928baff":"X_train, X_test, y_train, y_test = train_test_split(X,y,test_size = 0.3,random_state = 1)","fe7be5f4":"#Now we'll check the categorical variables so as to determine whether to go for label encoding or One hot encoding.\nobj_dict_train = { obj_col : list(X_train[obj_col].unique()) for obj_col in X_train.select_dtypes(include = 'object')}","d0adc1d4":"obj_dict_train","a8445d24":"obj_dict_test = {obj_col : list(X_test[obj_col].unique()) for obj_col in X_test.select_dtypes(include = 'object')}","09fce5c6":"obj_dict_test #checking wether the training set and testing set have the same categorical varaibles","13bb97ee":"label_col = [\"BusinessTravel\" , \"OverTime\"] #Ordinal Categorical Data","ef6022f9":"OH_X_train = list(set(df.select_dtypes(include = \"object\")) - set(label_col))","253c5343":"OH_X_train","0a05a756":"#Now we'll begin with One Hot Encoding\nX_train = pd.concat([X_train , pd.get_dummies(X_train[OH_X_train])] , axis = 1)\nX_train.drop(OH_X_train, axis=1, inplace=True)","311f1137":"X_train.head()","fe606ebb":"X_test = pd.concat([X_test , pd.get_dummies(X_test[OH_X_train])] , axis = 1)","58096a4e":"X_test.drop(OH_X_train, axis = 1, inplace = True)","24662381":"X_test.head()","78a6d341":"OH_X_test = list(set(df_test.select_dtypes(include = 'object')) - set(label_col))","7a128556":"df_test = pd.concat([df_test , pd.get_dummies(df_test[OH_X_test])] , axis = 1)","f870d427":"df_test.drop(OH_X_test , axis = 1 , inplace =True)","de6b7335":"df_test.head()","6005779b":"# Now we have to encode ordinal categorical variables\n# Business Travel\ncat1 = pd.Categorical(X_train.BusinessTravel , categories = ['Non-Travel' , 'Travel_Rarely' , 'Travel_Frequently'] , ordered = True)\nlabels1 , unique1 = pd.factorize(cat1 , sort =True)\nX_train['BusinessTravel'] = labels1\n# OverTime\ncat2 = pd.Categorical(X_train.OverTime , categories = ['No' , 'Yes'] , ordered = True)\nlabels2 , unique2 = pd.factorize(cat2 , sort =True)\nX_train['OverTime'] = labels2","83e6dc95":"cat3 = pd.Categorical(X_test.BusinessTravel , categories = ['Non-Travel' , 'Travel_Rarely' , 'Travel_Frequently'] , ordered = True)\nlabels3 , unique3 = pd.factorize(cat3 , sort =True)\nX_test['BusinessTravel'] = labels3\n# OverTime\ncat4 = pd.Categorical(X_test.OverTime , categories = ['No' , 'Yes'] , ordered = True)\nlabels4 , unique4 = pd.factorize(cat4 , sort =True)\nX_test['OverTime'] = labels4","1485924e":"#Encoding Test file\n#Business Travel\ncat_test = pd.Categorical(df_test.BusinessTravel , categories = ['Non-Travel' , 'Travel_Rarely' , 'Travel_Frequently'] , ordered = True)\nlabels_test , unique_test = pd.factorize(cat_test , sort =True)\ndf_test['BusinessTravel'] = labels_test\n#OverTime\ncat_test_1 = pd.Categorical(df_test.OverTime , categories = ['No' , 'Yes'] , ordered = True)\nlabels_test_1 , unique_test_1 = pd.factorize(cat_test_1 , sort =True)\ndf_test['OverTime'] = labels_test_1","5bcdeffb":"X_train.head()","13bad909":"X_test.head()","8007d1bf":"df_test.drop(['Behaviour' , 'Gender_Female'] , axis = 1 , inplace = True)","0eafacf9":"df_test.head()","a2f0a5be":"X_train.nunique()","337f25d8":"#Feature Scaling\nnum_cols = [ col for col in X_train.columns if X_train[col].nunique() > 5]","7d41f848":"from sklearn.preprocessing import StandardScaler\nnum_scaler = StandardScaler(copy = False)\nscaled_train = pd.DataFrame(num_scaler.fit_transform(X_train[num_cols]))\nscaled_test = pd.DataFrame(num_scaler.fit_transform(X_test[num_cols]))\nscaled_df_test = pd.DataFrame(num_scaler.fit_transform(df_test[num_cols]))\nscaled_train.columns = num_cols\nscaled_test.columns = num_cols\nscaled_df_test.columns = num_cols\nscaled_train.index = X_train.index\nscaled_test.index = X_test.index\nscaled_df_test.index = df_test.index\n","667a793c":"scaled_train.head()","33833245":"X_train.drop(num_cols , axis = 1 , inplace = True)","a36474b4":"X_train.head()","78d047dd":"X_train = pd.concat([X_train , scaled_train] , axis = 1 )\nX_test = pd.concat([X_test , scaled_test] , axis = 1)\ndf_test = pd.concat([df_test, scaled_df_test] , axis = 1)","f5e8314f":"df_test.head()","4e0dd2df":"plt.style.use('ggplot')\nsns.set_style('white')","549f8c55":"data_count = pd.concat([X_train.drop(columns = num_cols) , y] , axis = 1)","8dd75ef8":"len(data_count.columns)","d42300c0":"fig , axes = plt.subplots(round((len(data_count.columns)-1)\/3) , 3 , figsize = (12,25))\nfor i, ax in enumerate(fig.axes):\n    if i <= len(data_count.columns):\n     ax.set_xticklabels(ax.xaxis.get_majorticklabels(), rotation=45)\n     sns.countplot(x=data_count.columns[i], hue=data_count.Attrition, alpha=0.7, data=data_count, ax=ax)\n\nfig.tight_layout()","a7678b0d":"#Numerical Data\nX_train[num_cols].hist(figsize = (14,20) ,  xlabelsize = 8 , ylabelsize = 8);","72d02fac":"#prediction","1b84edbf":"from sklearn.ensemble import RandomForestClassifier","1a241214":"model = RandomForestClassifier(n_estimators = 500)","53d2f382":"model.fit(X_train , y_train)","67898942":"preds = model.predict(X_test)","68f5fa4e":"from sklearn.metrics import roc_auc_score,accuracy_score","3ffc79a2":"roc_auc_score(y_test,preds)","a7cba94b":"df_test.shape","66f4cfc0":"X_train.shape","88e8fa23":"X_train.head()","78d0a7bc":"final_pred = model.predict(df_test)","844e0ff1":"final_pred","4ac79968":"output = pd.concat([df_test.Id,pd.Series(final_pred)], axis=1)\noutput.columns=['Id','Id2','Attrition']\noutput.set_index('Id' , inplace = True)","d8eac38f":"output.drop(columns = 'Id2' ,axis = 1 ,inplace = True)","386a32f7":"output.to_csv(\"submission.csv\",index=False)","a7fb8a71":"output","2661a6ce":"DATA Visualisation"}}