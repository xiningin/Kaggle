{"cell_type":{"e08d2af9":"code","f99031c9":"code","5d99c298":"code","26418809":"code","70ba5e80":"code","596e578c":"code","e2a1f4f6":"code","04f03b8c":"code","1329c36b":"code","57482d08":"code","38d176ad":"code","12638b79":"code","188b03eb":"code","b07dd70b":"code","c7c0203f":"code","281da221":"code","1598910c":"code","22ee09fb":"code","c23679db":"code","7d3ef0f3":"code","e9201217":"code","6fd4991c":"code","47950a43":"code","9bffa54f":"code","71c835bc":"code","24a0fc4f":"code","c25850a2":"code","1339dc67":"code","c38c3404":"code","0b6eccf4":"code","c3da68b3":"code","f1da0bc4":"code","7d9fbeb6":"code","6ea5c087":"code","141c701d":"code","647756b9":"code","bbcd5dbb":"code","7fcacf15":"code","df3081d1":"code","b48d9b28":"code","24bf18ac":"code","f52083c0":"code","9155b042":"code","9e51b13d":"code","58d24534":"code","032ca8d4":"code","6888e992":"code","b8851096":"code","aca66c83":"code","c2e41b0e":"markdown","4bdec470":"markdown","449a411b":"markdown","beb134a8":"markdown","031208fc":"markdown","1b48299b":"markdown","038fa20f":"markdown","32b08458":"markdown","bacfcb4a":"markdown","d11e585b":"markdown","483237d9":"markdown","bda781f0":"markdown","47d995af":"markdown","a9bfdbd0":"markdown","7756b781":"markdown","0d05b2fc":"markdown","9f842893":"markdown","55582b70":"markdown","357b3188":"markdown","271c5ce6":"markdown","6a6dfcde":"markdown","eed5db4e":"markdown","7dd6e4c7":"markdown","ee12bc79":"markdown","42902c3b":"markdown","272f91df":"markdown","92dddc90":"markdown","fec4c067":"markdown","caf3fc65":"markdown","6ede5e28":"markdown","532eb99b":"markdown","ec2caee6":"markdown"},"source":{"e08d2af9":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","f99031c9":"train = pd.read_csv('..\/input\/titanic\/train.csv')\ntest = pd.read_csv('..\/input\/titanic\/test.csv')\ngender_submission = pd.read_csv('..\/input\/titanic\/gender_submission.csv')","5d99c298":"os.getcwd()","26418809":"print(train.shape) #\u5b66\u7fd2\u7528\u30c7\u30fc\u30bf\nprint(test.shape) #\u30c6\u30b9\u30c8\u7528\u30c7\u30fc\u30bf\nprint(gender_submission.shape)","70ba5e80":"test.info()","596e578c":"train.info()","e2a1f4f6":"train.head()","04f03b8c":"test.head()","1329c36b":"train.isnull().sum()","57482d08":"test.isnull().sum()","38d176ad":"print(train.shape,\"train\u30c7\u30fc\u30bf\u306e\u6570\")\nprint(test.shape,\"test\u30c7\u30fc\u30bf\u306e\u6570\")","12638b79":"df_full = pd.concat([train,test],axis=0,sort=False)\ndf_full.shape","188b03eb":"df_full.describe()","b07dd70b":"df_full.describe(include='O') # include\u95a2\u6570\u3092\u4f7f\u3044\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u578b\u306e\u8981\u7d20\u6570\u3092\u8868\u793a","c7c0203f":"# import pandas_profiling as pdp #Pandas-profilling\u306e\u30a4\u30f3\u30dd\u30fc\u30c8\n# pdp.ProfileReport(train) #\u30ec\u30dd\u30fc\u30c8\u306e\u4f5c\u6210","281da221":"import matplotlib as mpl\nimport matplotlib.pyplot as plt\nimport seaborn as sns","1598910c":"sns.palplot(sns.color_palette(\"Set1\", 24))","22ee09fb":"sns.countplot(x='Survived',data=train,palette=\"Set2\") \nplt.title('Death or  Alive')\nplt.xticks([0,1],['Death','Alive'])\nplt.show","c23679db":"sns.countplot(x='Sex',hue='Survived',data=train,palette=\"Set3\") \nplt.title(' Death or  Alive')\nplt.legend(['\u6b7b\u4ea1'],['\u751f\u5b58'])\nplt.show\n\ndisplay(pd.crosstab(train['Sex'],train['Survived']))\ndisplay(pd.crosstab(train['Sex'],train['Survived'],normalize='index'))","7d3ef0f3":"sns.countplot(x='Pclass',hue='Survived',data=train,palette=\"Set2\") \nplt.title(' Ticket Death or  Alive')\nplt.legend(['\u6b7b\u4ea1'],['\u751f\u5b58'])\nplt.show\n\ndisplay(pd.crosstab(train['Pclass'],train['Survived']))\ndisplay(pd.crosstab(train['Pclass'],train['Survived'],normalize='index'))","e9201217":"sns.countplot(x='Parch',data=train)\nplt.title('DOJO')","6fd4991c":"#2\u4ee5\u4e0b\u3067\u3042\u308c\u3070\u305d\u306e\u307e\u307e\u306e\u6570\u30013\u4ee5\u4e0a\u306f3\u3068\u3044\u3046\u5909\u63db\u3092\u884c\u3046\ntrain['Parch_0_1_2_3over'] = [i if i<=2 else 3 for i in train['Parch']]\ntest['Parch_0_1_2_3over'] = [i if i<=2 else 3 for i in test['Parch']]  # \u306e\u3061\u307b\u3069test\u30c7\u30fc\u30bf\u3067\u691c\u8a3c\u3092\u3059\u308b\u306e\u3067\u3001\u3053\u3053\u3067\u3082\u51e6\u7406\u3092\u3057\u3066\u304a\u304d\u307e\u3059\u3002","47950a43":"sns.countplot(x='Parch_0_1_2_3over',hue='Survived',data=train,palette=\"Set2\") \nplt.title(' Ticket Death or  Alive')\nplt.legend(['\u6b7b\u4ea1'],['\u751f\u5b58'])\nplt.xticks([0,1,2,3],['0','1','2','3'])\nplt.xlabel('Parch')\nplt.show\n\ndisplay(pd.crosstab(train['Parch_0_1_2_3over'],train['Survived']))","9bffa54f":"display(pd.crosstab(train['Parch_0_1_2_3over'],train['Survived'],normalize='index'))","71c835bc":"display(pd.crosstab(train['Parch_0_1_2_3over'],train['Survived'],normalize='all'))\ndisplay(pd.crosstab(train['Parch_0_1_2_3over'],train['Survived'],normalize='columns'))","24a0fc4f":"train.head()","c25850a2":"train['FamilySize'] = train['SibSp'] + train['Parch'] + 1 #\u3000SipSp +Parch \u304c\u540c\u4e57\u3057\u3066\u3044\u308b\u5bb6\u65cf\u306e\u6570\u3000+1\u3092\u8db3\u3059\u3068\u5bb6\u65cf\u306e\u4eba\u6570\u306b\u306a\u308b\ntest['FamilySize'] = train['SibSp'] + train['Parch'] + 1 #\u3000\u306e\u3061\u307b\u3069Test\u30c7\u30fc\u30bf\u3067\u691c\u8a3c\u3059\u308b\u305f\u3081\u3001\u3053\u3053\u3067\u51e6\u7406\u3059\u308b\u3002\n\n# IsAlone\u3092\uff10\u3068\u3057\u30012\u884c\u76ee\u3067FamilySize\u304c2\u4ee5\u4e0a\u3067\u3042\u308c\u30701\u306b\u3057\u3066\u3044\u308b\u3002\ntrain['IsAlone'] = 0 \ntrain.loc[train['FamilySize']>=2 ,'IsAlone'] = 1\n\ntest['IsAlone'] = 0 \ntest.loc[test['FamilySize']>=2 ,'IsAlone'] = 1","1339dc67":"\n#IsAlone \u3054\u3068\u306b\u53ef\u8996\u5316\nsns.countplot(x='IsAlone',hue='Survived',data=train)\nplt.xticks([0,1],['1','2\u4eba\u4ee5\u4e0a'])\n\nplt.legend(['\u6b7b\u4ea1'],['\u751f\u5b58'])\nplt.title('1\u4eba\u4ee5\u4e0a or 2\u4eba\u4ee5\u4e0a\u3067\u4e57\u8239\u5225\u306e\u6b7b\u4ea1\u8005\u3068\u751f\u5b58\u8005\u306e\u6570')\nplt.show\n\n#IsAlone\u3068Survived\u3092\u30af\u30ed\u30b9\u96c6\u8a08\u3059\u308b\ndisplay(pd.crosstab(train['IsAlone'],train['Survived']))\ndisplay(pd.crosstab(train['IsAlone'],train['Survived'],normalize='index'))","c38c3404":"train.head()","0b6eccf4":"# Sex\u3068Embarked\u306eOne-Hot\u30a8\u30f3\u30b3\u30fc\u30c7\u30a3\u30f3\u30b0\ntrain = pd.get_dummies(train,columns=['Sex','Embarked'])\ntest = pd.get_dummies(test,columns=['Sex','Embarked'])","c3da68b3":"# Sex\u3068Embarked\u306eOne-Hot\u30a8\u30f3\u30b3\u30fc\u30c7\u30a3\u30f3\u30b0\n# train2 = pd.get_dummies(train,columns=['Sex','Embarked'])\n# test2 = pd.get_dummies(test,columns=['Sex','Embarked'])","f1da0bc4":"#\u4e0d\u8981\u306a\u5217\u306e\u524a\u9664\n train.drop(['PassengerId','Name','Cabin','Ticket'],axis=1,inplace=True)\n test.drop(['PassengerId','Name','Cabin','Ticket'],axis=1,inplace=True)","7d9fbeb6":"train.head()","6ea5c087":"## 5.2 \u30db\u30fc\u30eb\u30c9\u30a2\u30a6\u30c8\u6cd5","141c701d":"X_train = train.drop(['Survived'],axis=1) # X_train\u306ftrain\u306eSurvived\u5217\u4ee5\u5916\ny_train = train['Survived'] # y_train\u306ftrain\u306eSurvived\u5217","647756b9":"import lightgbm as lgb\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import accuracy_score\n\n#X_train\u3068y_train\u3092train\u3068valid\u306b\u5206\u5272\ntrain_x,valid_x,train_y,valid_y = train_test_split(X_train,y_train,test_size=0.33,random_state=0)\n\n#lgb.Dateset\u3067train\u3068valid\u3092\u4f5c\u3063\u3066\u304a\u304f\nlgb_train = lgb.Dataset(train_x, train_y)#\u3000\u8a13\u7df4\u30c7\u30fc\u30bf\u306e\u7279\u5fb4\u91cf\u304ctrain_x \u8a13\u7df4\u30c7\u30fc\u30bf\u306e\u30e9\u30d9\u30eb\u304ctrain_y \nlgb_eval = lgb.Dataset(valid_x, valid_y)#\u3000\u30c6\u30b9\u30c8\u30c7\u30fc\u30bf\u306e\u7279\u5fb4\u91cf\u304cvalid_x \u30c6\u30b9\u30c8\u30c7\u30fc\u30bf\u306e\u30e9\u30d9\u30eb\u304cvalid_y \n\n # lgb.Dataset\u3067train\u3068valid\u3092\u4f5c\u3063\u3066\u304a\u304f","bbcd5dbb":"#\u30d1\u30e9\u30e1\u30fc\u30bf\u30fc\u3092\u5b9a\u7fa9\nlgbm_params = {\"objective\":\"binary\"}   \n\n#params={}\n#params[\"objective\"]=\"binary\"\n#\u2191\u3068\u540c\u3058\u610f\u5473\u3067\u3059\u3002\n\n\n# gbm\u3000\u5b66\u7fd2\u30e2\u30c7\u30eb\u3092\u4f5c\u308b\n# lgb.train\u3067\u5b66\u7fd2\nevals_result = {}\ngbm = lgb.train(params=lgbm_params,\n               train_set=lgb_train,\n               valid_sets=[lgb_train,lgb_eval,lgb_eval],  \n                early_stopping_rounds=20,\n                evals_result=evals_result,\n                verbose_eval=10\n               );\n\n#gbm = lgb.train(parms,\n#               train_set=lgb_train,\n#               valid_sets=[lgb_train,lgb_eval,lgb_eval],  \n#                early_stopping_rounds=20,\n#                evals_result=evals_result,\n#                verbose_eval=10\n#               );\n#\u2191\u3067#parms={}\n# parms[\"objective\"]=\"binary\"\u3000\u3000\u3068\u3044\u308c\u305f\u5834\u5408\u306f\u3001\u4e0a\u8a18\u306e\u3088\u3046\u306b\u306a\u308b\u3002\n\n\n# trainig\u3000\u8a13\u7df4\u30c7\u30fc\u30bf\u3000 valid_1\u306f\u691c\u8a3c\u30c7\u30fc\u30bf","7fcacf15":"# valid_x\u306b\u3064\u3044\u3066\u306e\u63a8\u8ad6\noof = (gbm.predict(valid_x)>0.5).astype(int) #\u30ab\u30c3\u30c8\u30aa\u30d5\nprint('score',round(accuracy_score(valid_y, oof)*100,2))","df3081d1":"print(oof)","b48d9b28":"gbm.predict(valid_x)  ","24bf18ac":"print(valid_y)","f52083c0":"import matplotlib.pyplot as plt\nplt.plot(evals_result['training']['binary_logloss'],label='train_loss')\nplt.plot(evals_result['valid_1']['binary_logloss'],label='valid_1 loss')\nplt.legend()","9155b042":"test.shape","9e51b13d":"test_pred = (gbm.predict(test) > 0.5).astype(int)\ngender_submission['Survived'] = test_pred\ngender_submission.to_csv('train_test_split.csv',index=False)","58d24534":"gender_submission.head","032ca8d4":"print(test.head)","6888e992":"print(valid_x.head)  ","b8851096":"from sklearn.model_selection import KFold\n\n# 3\u5206\u5272\u4ea4\u5dee\u691c\u8a3c\u3092\u6307\u5b9a\u3057\u3001\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u5316\nkf = KFold(n_splits=3,shuffle=True)\n\n#\u3000\u30b9\u30b3\u30a2\u3068\u30e2\u30c7\u30eb\u3092\u683c\u7d0d\u3059\u308b\u30ea\u30b9\u30c8\nscore_list = []\nmodels = [] \n\nfor fold_,(train_index ,valid_index) in enumerate(kf.split(X_train,y_train)): \n    print(f'fold{fold_ + 1} start')\n\n    train_x = X_train.iloc[train_index]\n    valid_x = X_train.iloc[valid_index]\n    train_y = y_train.iloc[train_index]\n    valid_y = y_train.iloc[valid_index]\n    \n    # lab.Dataset\u3092\u4f7f\u3063\u3066\u3001train\u3068valid\u3092\u4f5c\u3063\u3066\u304a\u304f\n    lgb_train = lgb.Dataset(train_x, train_y) \n    lgb_valid = lgb.Dataset(valid_x, valid_y) \n    lgbm_params = {\"objective\":\"binary\"} # \u30d1\u30e9\u30e1\u30fc\u30bf\u3092\u5b9a\u7fa9\n \n    gbm = lgb.train(params = lgbm_params,\n        train_set = lgb_train,\n        valid_sets= [lgb_train, lgb_valid],\n        early_stopping_rounds=20,\n        verbose_eval=-1 # \u5b66\u7fd2\u306e\u72b6\u6cc1\u3092\u8868\u793a\u3057\u306a\u3044\n\n    ) \n\n    oof = (gbm.predict(valid_x) > 0.5).astype(int)\n    score_list.append(round(accuracy_score(valid_y, oof)*100,2))\n    models.append(gbm) # \u5b66\u7fd2\u304c\u7d42\u308f\u3063\u305f\u30e2\u30c7\u30eb\u3092\u30ea\u30b9\u30c8\u306b\u5165\u308c\u3066\u304a\u304f\n    print(f'fold{fold_ + 1} end\\n' ) \nprint(score_list, '\u5e73\u5747score', round(np.mean(score_list), 2))","aca66c83":"test_pred = np.zeros((len(test),3))\n\nfor fold_, gbm in enumerate(models):\n    pred_= gbm.predict(test)\n    test_pred[:,fold_] = pred_\n\npred = (np.mean(test_pred,axis=1)>0.5).astype(int)\ngender_submission['Survived'] = pred\ngender_submission.to_csv('3-fold_cross-validation.csv',index=False)","c2e41b0e":"### <font color=\"Red\">\u2605 <\/font>\u3000train['Partch_0_1_2_3over']  \u3067\u65b0\u898f\u306e\u30ea\u30b9\u30c8\u4f5c\u6210\u3092\u884c\u3046\n[]\u3000\u3067\u5217\u306e\u65b0\u898f\u8ffd\u52a0\u3092\u884c\u3063\u3066\u3044\u308b\u3002[]  = [] \u3067\u5217\u306e\u4e2d\u8eab\u306e\u5b9a\u7fa9","4bdec470":"# \u6b20\u640d\u5024\u306e\u78ba\u8a8d","449a411b":"## Pandas-profilling\u306e\u5b9f\u884c  <font color=\"Red\">*\u4f5c\u696d\u4e2d\u306f\u91cd\u3044\u305f\u3081\u3001\u4e00\u6642\u7684\u306b\u505c\u6b62 <\/font>","beb134a8":"n_split\uff1a\u30c7\u30fc\u30bf\u306e\u5206\u5272\u6570\u3000<p>\nshuffle\uff1aTrue\u3000=\u30e9\u30f3\u30c0\u30e0\u306b\u30c7\u30fc\u30bf\u3092\u9078\u629e\u3059\u308b\uff0e  False=\u9023\u7d9a\u3059\u308b\u6570\u5b57\u3067\u30b0\u30eb\u30fc\u30d7\u5206\u3051\u305b\u305a","031208fc":" ## \u7537\u5973\u5225\u306e\u6b7b\u4ea1\u8005\u3068\u751f\u5b58\u8005\u306e\u6570\u3092\u30af\u30ed\u30b9\u96c6\u8a08\u3059\u308b","1b48299b":"\u3010\u6a5f\u68b0\u5b66\u7fd2\u5b9f\u8df5\u3011LightGBM\u3067\u56de\u5e30\u3057\u3066\u307f\u308b\u3010Python\u3011\nhttps:\/\/rin-effort.com\/2019\/12\/29\/machine-learning-6\/","038fa20f":"# \u4e21\u89aa\u3001\u5b50\u4f9b\u306e\u6570\u30003\u4ee5\u4e0a\u306f3\u3068\u3044\u3046\u5909\u63db\u3092\u884c\u3046","32b08458":"## Head \u30c7\u30fc\u30bf\u306e\u4e2d\u8eab\u306e\u78ba\u8a8d","bacfcb4a":"### \u73fe\u5728\u306e\u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u306e\u78ba\u8a8d","d11e585b":"## \u5168\u4f53\u3068\u5217\u3067\u5408\u8a08\uff11\u3068\u3059\u308b","483237d9":"## \u30c1\u30b1\u30c3\u30c8\u30af\u30e9\u30b9\u5225\u306e\u6b7b\u4ea1\u8005\u3068\u751f\u5b58\u8005\u6570\u3092\u30af\u30ed\u30b9\u96c6\u8a08\u3059\u308b","bda781f0":"# \u57fa\u672c\u7684\u306a\u30c7\u30fc\u30bf\u5206\u6790\n## \u30d5\u30a1\u30a4\u30eb\u306e\u53d6\u5f97","47d995af":"### <font color=\"Red\">\u2605 <\/font>\u3000normalize \u6b63\u898f\u5316\u8868\u73fe\u3067\u5c11\u6570\u70b9\u304c\u3064\u3044\u3066\u3044\u308b\u306e\u306f\u5408\u8a08\u3067\uff11\u306b\u3059\u308b\u305f\u3081","a9bfdbd0":"## \u8981\u7d04\u7d71\u8a08\u91cf","7756b781":"### <font color=\"Red\">\u2605 <\/font>seaborn # palette=\"Set2\" \u3067\u8272\u3092\u5909\u66f4\u3059\u308b","0d05b2fc":"#  Light GBM","9f842893":"# K\u5206\u5272\u4ea4\u5dee\u691c\u8a3c (K-3)\n ","55582b70":"accuracy_score\n<p>ex.\n> y_true = [0, 0, 0, 0, 1, 1, 1, 0, 1, 0] <p>\n> y_pred = [0, 0, 0, 0, 1, 1, 1, 1, 0, 1]<p>\n> accuracy_score(y_true, y_pred)<p>\n0.69999999999999996","357b3188":"# \u63d0\u51fa","271c5ce6":"# Parch_0_1_2_3over \u304c\u5897\u3048\u3066\u3044\u308b\u3053\u3068\u3092\u78ba\u8a8d","6a6dfcde":"### <font color=\"Red\">\u2605 <\/font>\u3000\u3010\u89e3\u6c7a\u3011lgbm_params = {\"objective\":\"binary\"}   []\u3092\u4f7f\u3048\u306a\u3044\uff1f\n### <font color=\"Red\">\u2605 <\/font>\u3000valid_1\u3068\u306f\u3069\u3093\u306a\u95a2\u6570\n[Python]\u30ea\u30b9\u30c8\u3001\u30bf\u30d7\u30eb\u3001\u8f9e\u66f8\u3001\u96c6\u5408\u306e\u9055\u3044\nhttps:\/\/qiita.com\/taro-ari\/items\/9f54536fe3c623813db1","eed5db4e":"## \u30c7\u30fc\u30bf\u306e\u884c\u6570\u3001\u5217\u6570\u306e\u78ba\u8a8d","7dd6e4c7":"\n![[2020-02-21_14h49_13.png]](attachment:2020-02-21_14h49_13.png)","ee12bc79":"### <font color=\"Red\">\u3010\u89e3\u6c7a\u3011\u26051 <\/font>\u3000 \n\uff25\uff52\uff52\uff4f\uff52\u3000\u3000The number of features in data (10) is not the same as it was in training data (13).\ntest\u30c7\u30fc\u30bf\u304c\u300113\u3067\u306a\u3044\u3068\u3044\u3051\u306a\u3044\uff1f\n\nfeatures\u3000\uff1d\u7279\u5fb4\u91cf","42902c3b":"### <font color=\"Red\">\u26053 \u3010\u89e3\u6c7a\u3011 <\/font>\u3000 \n lgb_train = lgb.Dataset(train_x, train_y) \n    lgb_valid = lgb.Dataset(valid_x, valid_y)   \u4ee5\u4e0b\u3092\u30ab\u30c3\u30c8\u3057\u305f\u6642\u306b\u30a8\u30e9\u30fc\u306b\u306a\u308b\u3002\u304b\u3064\u5206\u5272\u7d71\u5408\u3057\u305f\u6642\u306b\u306f\u3001\u306a\u305c\u304b\uff1f\u3000\u8d64\u8272\u306e\u6587\u5b57\u306b\u306a\u308ainvalid\u30a8\u30e9\u30fc\u304c\u8868\u793a\u3055\u308c\u308b\u3002","272f91df":"### <font color=\"Red\">\u2605 <\/font>\u3000One-hot \u30a8\u30f3\u30b3\u30fc\u30c7\u30a3\u30f3\u30b0\u3000train = pd.get_dummies(train,columns=['Sex','Embarked']) 2\u56de\u5b9f\u884c\u3059\u308b\u3068\u30a8\u30e9\u30fc\u306b\u306a\u308b\u3002\u4f55\u5ea6\u3082\u5b9f\u884c\u3059\u308b\u3068\u9762\u5012\u306a\u306e\u3067\u3001\u901a\u5e38\u306f\u3069\u3093\u306a\u3084\u308a\u65b9\u3092\u4f7f\u3046\uff1f \u2192test = pd.get_dummies(test2,columns=['Sex','Embarked']) \u3068\u3059\u308b\u3053\u3068\u30672\u56de\u5b9f\u884c\u3057\u3066\u3082\u30a8\u30e9\u30fc\u306b\u306a\u3089\u306a\u3044\u3088\u3046\u306b\u3059\u308b\u3053\u3068\u3082\u3067\u304d\u308b\n\n","92dddc90":"## Info \u6982\u8981\u306e\u78ba\u8a8d","fec4c067":"## \u6b7b\u4ea1\u8005\u3068\u751f\u5b58\u8005","caf3fc65":"# \u7279\u5fb4\u3068\u53ef\u8996\u5316","6ede5e28":"train\u3092 X_train \u3068y_train\u306b\u5206\u5272","532eb99b":"### <font color=\"Red\">\u26054 \u3010\u89e3\u6c7a\u3011<\/font>\u3000\ntrain_data = lgb.Dataset(X_train, label = y_train)","ec2caee6":"## 1\u4eba\u4e57\u8239\u304b\uff1f\u30002\u4eba\u4ee5\u4e0a\u304b\uff1f"}}