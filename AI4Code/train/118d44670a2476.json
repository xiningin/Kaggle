{"cell_type":{"eee14c01":"code","ce9d19a1":"code","3c7a1d2b":"code","66949e40":"code","797650b3":"code","a5f712ed":"code","d8293ca7":"code","c8b5af1d":"code","81267daf":"code","0d4a1f92":"code","3ffe0ab9":"code","44c0d3b2":"code","f49eca37":"code","45ce2100":"code","49375230":"code","2d7c5aad":"code","4e5a22f5":"code","4e5474e9":"code","571a5183":"code","9df3b974":"code","a330df24":"code","dd42d513":"code","7c138498":"code","3a6052e9":"code","5d0cbf77":"code","21eb9ab7":"code","af1e0878":"code","5199209f":"code","768fd993":"code","607a88a4":"code","ba88448c":"code","4e36bc7e":"code","c9866d8a":"code","40834eb6":"code","5f7fdb6b":"code","61234895":"code","111fe9cd":"code","0db0924d":"code","79784d8c":"code","38748fbe":"code","4a7ca443":"code","6b31781d":"code","aab17b10":"code","3529b80c":"code","42d0a7ba":"code","cbc852cd":"code","b87d11a9":"code","ff4bfcf8":"code","88c56551":"code","b7102f6f":"code","588d7e1b":"code","b62920ca":"code","739c6688":"code","c61d154c":"code","be3468e0":"code","a311b2d2":"code","64f53097":"code","fa364761":"code","1b6b4591":"code","b7a9ed69":"code","42e8bf14":"code","a1337856":"code","5188d0c9":"code","05f2ea15":"code","cf2ccf47":"code","7232e3f5":"code","6107b2d7":"code","c25bd826":"code","b8dc76a4":"code","26a33c4a":"code","6fb305f2":"code","0d51ec50":"code","afb8cc4d":"code","befa32d6":"code","67c37d41":"code","425a030e":"code","818c7c8e":"code","2ebe7b1a":"code","09030c0b":"code","3ed562d8":"code","5abe38f6":"code","0bae789f":"code","27122085":"code","d9dec3d7":"code","6f60e0f4":"code","c32eb14a":"code","c3970c5c":"code","a8cf3496":"code","0350624c":"code","b050c191":"code","e8dc38dc":"code","7ddcaf89":"code","065cf57b":"code","0618f7e5":"code","8f46c5fc":"code","0d0882d4":"code","e7984438":"code","ed4bfcba":"code","a5a1e532":"code","86d93de0":"code","aa74cbb5":"code","ef68f49b":"code","71ef2074":"code","459ee426":"code","7d4360dd":"code","d73a0763":"code","68b586cb":"code","0b5dfd44":"code","58dee997":"code","50a7a6d5":"code","e456292c":"code","a05ff9cb":"code","7fea9821":"code","24f08416":"code","a9d23f1c":"code","3b5264f5":"markdown","617194d1":"markdown","ad3cf5eb":"markdown","fa641331":"markdown","d7baa1e9":"markdown","76788c79":"markdown","75c20433":"markdown","f5563bd0":"markdown","48ea0ee2":"markdown","3648c16d":"markdown","446dbbd2":"markdown","6d7948d1":"markdown","fe25914b":"markdown","0a2ab567":"markdown","8ed1c856":"markdown","93b811d3":"markdown","d990813a":"markdown","7f2e87c6":"markdown","dda83f22":"markdown","ce399436":"markdown","22201f20":"markdown","9e1bdfae":"markdown","76ee039a":"markdown","708dad50":"markdown","d6ba9515":"markdown","a7af02b4":"markdown","caf2d3f7":"markdown","3bf90457":"markdown","17cba151":"markdown","e206ff34":"markdown","28896a0f":"markdown","e5f75e0c":"markdown","6b951ec9":"markdown","a0b486bb":"markdown","ea9e1691":"markdown","7696338c":"markdown","edf24e70":"markdown","854bea72":"markdown","ddedc107":"markdown","d7a7afb5":"markdown","558004e9":"markdown","1938f3d5":"markdown","89a854c1":"markdown","b4cc9897":"markdown","298d7886":"markdown","73b8d041":"markdown","f35a4752":"markdown","4110817c":"markdown","1286bad8":"markdown","ed6af182":"markdown","d622add9":"markdown","5fbd6b59":"markdown","e61a0752":"markdown","9c97da98":"markdown","bdaa0969":"markdown","a9aa7199":"markdown","cc51a581":"markdown","b706110b":"markdown","f1e21a1c":"markdown","0597954e":"markdown","7ede283b":"markdown","41edf82f":"markdown"},"source":{"eee14c01":"# This Python 3 environment comes with many helpful analytics libraries installed\n\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport re\nimport time\nimport warnings\nimport numpy as np\nfrom nltk.corpus import stopwords\nfrom sklearn.decomposition import TruncatedSVD\nfrom sklearn.preprocessing import normalize\nfrom sklearn.feature_extraction.text import CountVectorizer\nfrom sklearn.manifold import TSNE\nimport seaborn as sns\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.metrics import confusion_matrix\nfrom sklearn.metrics.classification import accuracy_score, log_loss\nfrom sklearn.feature_extraction.text import TfidfVectorizer\nfrom sklearn.linear_model import SGDClassifier\nfrom imblearn.over_sampling import SMOTE\nfrom collections import Counter\nfrom scipy.sparse import hstack\nfrom sklearn.multiclass import OneVsRestClassifier\nfrom sklearn.svm import SVC\nfrom sklearn.model_selection import StratifiedKFold \nfrom collections import Counter, defaultdict\nfrom sklearn.calibration import CalibratedClassifierCV\nfrom sklearn.naive_bayes import MultinomialNB\nfrom sklearn.naive_bayes import GaussianNB\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.model_selection import GridSearchCV\nimport math\nfrom sklearn.metrics import normalized_mutual_info_score\nfrom sklearn.ensemble import RandomForestClassifier\nwarnings.filterwarnings(\"ignore\")\n\nfrom mlxtend.classifier import StackingClassifier\n\nfrom sklearn import model_selection\nfrom sklearn.linear_model import LogisticRegression","ce9d19a1":"# exploring the data files\nfrom subprocess import check_output\n# checking for subfolder name\nprint(check_output([\"ls\", \"..\/input\"]).decode(\"utf8\"))","3c7a1d2b":"# exploring available data files\nprint(check_output([\"ls\", \"..\/input\/msk-redefining-cancer-treatment\"]).decode(\"utf8\"))","66949e40":"# unzipping training data\nimport zipfile\n\n# declaring datasets to unzip\nDatasets = [\n    \"..\/input\/msk-redefining-cancer-treatment\/\" + \"training_text.zip\",\n    \"..\/input\/msk-redefining-cancer-treatment\/\" + \"training_variants.zip\"\n]\n\n# unzipping declared datasets\nfor dataset in Datasets:\n    with zipfile.ZipFile(dataset,\"r\") as z:\n        z.extractall(\".\")","797650b3":"# Checking that unziped file is created\nfor dataset in Datasets:\n    # dataset name is in both cases the 3 index after split \"\/\" in this particular example\n    print(check_output([\"ls\",dataset.split(\"\/\")[3][:-4]]).decode(\"utf8\"))","a5f712ed":"# Loading training data\ndata_variants = pd.read_csv('training_variants')\n# training_text dataset uses \"||\" as a seperator and has the headers seperated by \",\" so we skip that row and declare headers\ndata_text =pd.read_csv(\"training_text\",sep=\"\\|\\|\",engine=\"python\",names=[\"ID\",\"TEXT\"],skiprows=1)","d8293ca7":"data_variants.head(3)","c8b5af1d":"data_variants.info()","81267daf":"data_variants.describe()","0d4a1f92":"# Checking dimention of data\n# even though we already know from count and columns exploration (data_variants.head(3))\ndata_variants.shape","3ffe0ab9":"# Clecking column in above data set\n# even though we already know from data_variants.head(3)\ndata_variants.columns","44c0d3b2":"data_text.head(3)","f49eca37":"data_text.info()","45ce2100":"# data_text.describe() is not useful for text data values\ndata_text.columns","49375230":"# checking the dimentions (which we already know)\ndata_text.shape","2d7c5aad":"# Confirmation of aviable results\ndata_variants.Class.unique()","4e5a22f5":"# We would like to remove all stop words like a, is, an, the, ... \n# so we collecting all of them from nltk library\nstop_words = set(stopwords.words('english'))","4e5474e9":"# defining function to remove all stop words from data\ndef data_text_preprocess(total_text, ind, col):\n    # Remove int values from text data as that might not be imp\n    if type(total_text) is not int:\n        string = \"\"\n        # replacing all special char with space\n        total_text = re.sub('[^a-zA-Z0-9\\n]', ' ', str(total_text))\n        # replacing multiple spaces with single space\n        total_text = re.sub('\\s+',' ', str(total_text))\n        # bring whole text to same lower-case scale.\n        total_text = total_text.lower()\n        \n        for word in total_text.split():\n        # if the word is a not a stop word then retain that word from text\n            if not word in stop_words:\n                string += word + \" \"\n        \n        data_text[col][ind] = string","571a5183":"# applying data_text_preprocess to data_text\nfor index, row in data_text.iterrows():\n    if type(row['TEXT']) is str:\n        data_text_preprocess(row['TEXT'], index, 'TEXT')","9df3b974":"# merging both gene_variations and text data based on ID\nresult = pd.merge(data_variants, data_text,on='ID', how='left')\nresult.head()","a330df24":"# checking for missing values\n# missing values may create qualitive problematics in our final analysis\nresult[result.isnull().any(axis=1)]","dd42d513":"# Imputing the missing values as \"Gene\" + \"Variation\" text\n# This is the example imputation used in the course (check note in the beggining)\nresult.loc[result['TEXT'].isnull(),'TEXT'] = result['Gene'] +' '+result['Variation']","7c138498":"# Confirming that tere are no missing values\nresult[result.isnull().any(axis=1)]","3a6052e9":"y_true = result['Class'].values\n# replacing spaces with \"_\"\nresult.Gene      = result.Gene.str.replace('\\s+', '_')\nresult.Variation = result.Variation.str.replace('\\s+', '_')","5d0cbf77":"# Splitting the data into train and test set \nX_train, test_df, y_train, y_test = train_test_split(result, y_true, stratify=y_true, test_size=0.2)\n# split the train data now into train validation and cross validation\ntrain_df, cv_df, y_train, y_cv = train_test_split(X_train, y_train, stratify=y_train, test_size=0.2)","21eb9ab7":"print('Number of data points in train data:', train_df.shape[0])\nprint('Number of data points in test data:', test_df.shape[0])\nprint('Number of data points in cross validation data:', cv_df.shape[0])","af1e0878":"# counting class values for each set and sorting for better comparison\ntrain_class_distribution = train_df['Class'].value_counts().sort_index(axis=0, level=None, ascending=True, inplace=False, kind='quicksort', na_position='last', sort_remaining=True)\ntest_class_distribution = test_df['Class'].value_counts().sort_index(axis=0, level=None, ascending=True, inplace=False, kind='quicksort', na_position='last', sort_remaining=True)\ncv_class_distribution = cv_df['Class'].value_counts().sort_index(axis=0, level=None, ascending=True, inplace=False, kind='quicksort', na_position='last', sort_remaining=True)","5199209f":"train_class_distribution","768fd993":"# Visualizing train class distrubution\nmy_colors = 'rgbkymc'\ntrain_class_distribution.plot(kind='bar')\nplt.xlabel('Class')\nplt.ylabel(' Number of Data points per Class')\nplt.title('Distribution of yi in train data')\nplt.grid()\nplt.show()","607a88a4":"# Printing distribution in percentage form\nsorted_yi = np.argsort(-train_class_distribution.values)\nfor i in sorted_yi:\n    print('Number of data points in class', i+1, ':',train_class_distribution.values[i], '(', np.round((train_class_distribution.values[i]\/train_df.shape[0]*100), 3), '%)')","ba88448c":"# test set diribution visualization\nmy_colors = 'rgbkymc'\ntest_class_distribution.plot(kind='bar')\nplt.xlabel('Class')\nplt.ylabel('Number of Data points per Class')\nplt.title('Distribution of yi in test data')\nplt.grid()\nplt.show()","4e36bc7e":"# test set distribution in percentage form\nsorted_yi = np.argsort(-test_class_distribution.values)\nfor i in sorted_yi:\n    print('Number of data points in class', i+1, ':',test_class_distribution.values[i], '(', np.round((test_class_distribution.values[i]\/test_df.shape[0]*100), 3), '%)')","c9866d8a":"# cross validation set diribution visualization\nmy_colors = 'rgbkymc'\ncv_class_distribution.plot(kind='bar')\nplt.xlabel('Class')\nplt.ylabel('Number of Data points per Class')\nplt.title('Distribution of yi in test data')\nplt.grid()\nplt.show()","40834eb6":"# cross validation set distribution in percentage form\nsorted_yi = np.argsort(-cv_class_distribution.values)\nfor i in sorted_yi:\n    print('Number of data points in class', i+1, ':',test_class_distribution.values[i], '(', np.round((test_class_distribution.values[i]\/test_df.shape[0]*100), 3), '%)')","5f7fdb6b":"# getting the length of our datasets\ntest_data_len = test_df.shape[0]\ncv_data_len = cv_df.shape[0]\n\n# creating an output array that has exactly same size as the CV data\ncv_predicted_y = np.zeros((cv_data_len,9))\nfor i in range(cv_data_len):\n    rand_probs = np.random.rand(1,9)\n    # setting random values so each row sum is equal to 1\n    cv_predicted_y[i] = ((rand_probs\/sum(sum(rand_probs)))[0])\n# Evaluating and printing the Log Loss for worst model\n# All models that will be generated should not be worse than worst model\nprint(\"Log loss on Cross Validation Data using Random Model\",log_loss(y_cv,cv_predicted_y, eps=1e-15))\n\n# Test-Set error (worst model).\n# creating output array that has exactly same as the test data\ntest_predicted_y = np.zeros((test_data_len,9))\nfor i in range(test_data_len):\n    rand_probs = np.random.rand(1,9)\n    test_predicted_y[i] = ((rand_probs\/sum(sum(rand_probs)))[0])\nprint(\"Log loss on Test Data using Random Model\",log_loss(y_test,test_predicted_y, eps=1e-15))","61234895":"# Lets get the index of max probablity\npredicted_y =np.argmax(test_predicted_y, axis=1)\npredicted_y","111fe9cd":"predicted_y = predicted_y + 1","0db0924d":"C = confusion_matrix(y_test, predicted_y)\nC","79784d8c":"# Displaying predictions\nlabels = [1,2,3,4,5,6,7,8,9]\nplt.figure(figsize=(20,7))\nsns.heatmap(C, annot=True, cmap=\"YlGnBu\", fmt=\".3f\", xticklabels=labels, yticklabels=labels)\nplt.xlabel('Predicted Class')\nplt.ylabel('Original Class')\nplt.show()","38748fbe":"# generating precision matrix\nB =(C\/C.sum(axis=0))\n# diplaying precision matrix\nplt.figure(figsize=(20,7))\nsns.heatmap(B, annot=True, cmap=\"YlGnBu\", fmt=\".3f\", xticklabels=labels, yticklabels=labels)\nplt.xlabel('Predicted Class')\nplt.ylabel('Original Class')\nplt.show()","4a7ca443":"# generating recall matrix\nA =(((C.T)\/(C.sum(axis=1))).T)\n# diplaying recall matrix\nplt.figure(figsize=(20,7))\nsns.heatmap(A, annot=True, cmap=\"YlGnBu\", fmt=\".3f\", xticklabels=labels, yticklabels=labels)\nplt.xlabel('Predicted Class')\nplt.ylabel('Original Class')\nplt.show()","6b31781d":"# Creating unique genes series\nunique_genes = train_df['Gene'].value_counts()\n# measuring the length of unique genes matrix\nprint('Number of Unique Genes :', unique_genes.shape[0])\n# the top 10 genes that occured most\nprint(unique_genes.head(10))","aab17b10":"# Cumulative distribution of unique genes\ns = sum(unique_genes.values);\nh = unique_genes.values\/s;\nc = np.cumsum(h)\nplt.plot(c,label='Cumulative distribution of Genes')\nplt.grid()\nplt.legend()\nplt.show()","3529b80c":"# one-hot encoding of Gene feature.\ngene_vectorizer = CountVectorizer()\ntrain_gene_feature_onehotCoding = gene_vectorizer.fit_transform(train_df['Gene'])\ntest_gene_feature_onehotCoding = gene_vectorizer.transform(test_df['Gene'])\ncv_gene_feature_onehotCoding = gene_vectorizer.transform(cv_df['Gene'])","42d0a7ba":"# checking classified train set shape\ntrain_gene_feature_onehotCoding.shape","cbc852cd":"# plotting added column names\ngene_vectorizer.get_feature_names()","b87d11a9":"# ----Notes----\n# code for response coding with Laplace smoothing.\n# alpha : used for laplace smoothing\n# feature: ['gene', 'variation']\n# df: ['train_df', 'test_df', 'cv_df']\n# algorithm\n# ----------\n# Consider all unique values and the number of occurances of given feature in train data dataframe\n# build a vector (1*9) , the first element = (number of times it occured in class1 + 10*alpha \/ number of time it occurred in total data+90*alpha)\n# gv_dict is like a look up table, for every gene it store a (1*9) representation of it\n# for a value of feature in df:\n# if it is in train data:\n# we add the vector that was stored in 'gv_dict' look up table to 'gv_fea'\n# if it is not there is train:\n# we add [1\/9, 1\/9, 1\/9, 1\/9,1\/9, 1\/9, 1\/9, 1\/9, 1\/9] to 'gv_fea'\n# return 'gv_fea'\n# ----------------------\n\n\n# get_gv_fea_dict: Get Gene varaition Feature Dict\ndef get_gv_fea_dict(alpha, feature, df):\n    # value_count: it contains a dict like\n    # print(train_df['Gene'].value_counts())\n    # output:\n    #        {BRCA1      174\n    #         TP53       106\n    #         EGFR        86\n    #         BRCA2       75\n    #         PTEN        69\n    #         ...}\n    # print(train_df['Variation'].value_counts())\n    # output:\n    # {\n    # Truncating_Mutations                     63\n    # Deletion                                 43\n    # Amplification                            43\n    # Fusions                                  22\n    # Overexpression                            3\n    # E17K                                      3\n    # Q61L                                      3\n    # S222D                                     2\n    # P130S                                     2\n    # ...\n    # }\n    value_count = train_df[feature].value_counts()\n    \n    # gv_dict : Gene Variation Dict, which contains the probability array for each gene\/variation\n    gv_dict = dict()\n    \n    # denominator will contain the number of time that particular feature occured in whole data\n    for i, denominator in value_count.items():\n        # vec will contain (p(yi==1\/Gi) probability of gene\/variation belongs to perticular class\n        # vec is 9 diamensional vector\n        vec = []\n        for k in range(1,10):\n            # print(train_df.loc[(train_df['Class']==1) & (train_df['Gene']=='BRCA1')])\n            #         ID   Gene             Variation  Class  \n            # 2470  2470  BRCA1                S1715C      1   \n            # 2486  2486  BRCA1                S1841R      1   \n            # 2614  2614  BRCA1                   M1R      1   \n            # 2432  2432  BRCA1                L1657P      1   \n            # 2567  2567  BRCA1                T1685A      1   \n            # 2583  2583  BRCA1                E1660G      1   \n            # 2634  2634  BRCA1                W1718L      1   \n            # cls_cnt.shape[0] will return the number of rows\n\n            cls_cnt = train_df.loc[(train_df['Class']==k) & (train_df[feature]==i)]\n            \n            # cls_cnt.shape[0](numerator) will contain the number of time that particular feature occured in whole data\n            vec.append((cls_cnt.shape[0] + alpha*10)\/ (denominator + 90*alpha))\n\n        # we are adding the gene\/variation to the dict as key and vec as value\n        gv_dict[i]=vec\n    return gv_dict\n\n# Get Gene variation feature\ndef get_gv_feature(alpha, feature, df):\n    # print(gv_dict)\n    #     {'BRCA1': [0.20075757575757575, 0.03787878787878788, 0.068181818181818177, 0.13636363636363635, 0.25, 0.19318181818181818, 0.03787878787878788, 0.03787878787878788, 0.03787878787878788], \n    #      'TP53': [0.32142857142857145, 0.061224489795918366, 0.061224489795918366, 0.27040816326530615, 0.061224489795918366, 0.066326530612244902, 0.051020408163265307, 0.051020408163265307, 0.056122448979591837], \n    #      'EGFR': [0.056818181818181816, 0.21590909090909091, 0.0625, 0.068181818181818177, 0.068181818181818177, 0.0625, 0.34659090909090912, 0.0625, 0.056818181818181816], \n    #      'BRCA2': [0.13333333333333333, 0.060606060606060608, 0.060606060606060608, 0.078787878787878782, 0.1393939393939394, 0.34545454545454546, 0.060606060606060608, 0.060606060606060608, 0.060606060606060608], \n    #      'PTEN': [0.069182389937106917, 0.062893081761006289, 0.069182389937106917, 0.46540880503144655, 0.075471698113207544, 0.062893081761006289, 0.069182389937106917, 0.062893081761006289, 0.062893081761006289], \n    #      'KIT': [0.066225165562913912, 0.25165562913907286, 0.072847682119205295, 0.072847682119205295, 0.066225165562913912, 0.066225165562913912, 0.27152317880794702, 0.066225165562913912, 0.066225165562913912], \n    #      'BRAF': [0.066666666666666666, 0.17999999999999999, 0.073333333333333334, 0.073333333333333334, 0.093333333333333338, 0.080000000000000002, 0.29999999999999999, 0.066666666666666666, 0.066666666666666666],\n    #      ...\n    #     }\n    gv_dict = get_gv_fea_dict(alpha, feature, df)\n    # value_count is similar in get_gv_fea_dict\n    value_count = train_df[feature].value_counts()\n    \n    # gv_fea: Gene_variation feature, it will contain the feature for each feature value in the data\n    gv_fea = []\n    # for every feature values in the given data frame we will check if it is there in the train data then we will add the feature to gv_fea\n    # if not we will add [1\/9,1\/9,1\/9,1\/9,1\/9,1\/9,1\/9,1\/9,1\/9] to gv_fea\n    for index, row in df.iterrows():\n        if row[feature] in dict(value_count).keys():\n            gv_fea.append(gv_dict[row[feature]])\n        else:\n            gv_fea.append([1\/9,1\/9,1\/9,1\/9,1\/9,1\/9,1\/9,1\/9,1\/9])\n#             gv_fea.append([-1,-1,-1,-1,-1,-1,-1,-1,-1])\n    return gv_fea","ff4bfcf8":"# response-coding of the Gene feature\n# alpha is used for laplace smoothing\nalpha = 1\n# train gene feature\ntrain_gene_feature_responseCoding = np.array(get_gv_feature(alpha, \"Gene\", train_df))\n# test gene feature\ntest_gene_feature_responseCoding = np.array(get_gv_feature(alpha, \"Gene\", test_df))\n# cross validation gene feature\ncv_gene_feature_responseCoding = np.array(get_gv_feature(alpha, \"Gene\", cv_df))","88c56551":"# exploring training gene shape\ntrain_gene_feature_responseCoding.shape","b7102f6f":"# We need a hyperparemeter for SGD classifier.\n# giving alpha a set of ranges to compare\nalpha = [10 ** x for x in range(-5, 1)]","588d7e1b":"# We will be using SGD classifier\n# http:\/\/scikit-learn.org\/stable\/modules\/generated\/sklearn.linear_model.SGDClassifier.html\n# We will also be using Calibrated Classifier to get the result into probablity format t be used for log loss\ncv_log_error_array=[]\nfor i in alpha:\n    clf = SGDClassifier(alpha=i, penalty='l2', loss='log', random_state=42)\n    clf.fit(train_gene_feature_onehotCoding, y_train)\n    sig_clf = CalibratedClassifierCV(clf, method=\"sigmoid\")\n    sig_clf.fit(train_gene_feature_onehotCoding, y_train)\n    predict_y = sig_clf.predict_proba(cv_gene_feature_onehotCoding)\n    cv_log_error_array.append(log_loss(y_cv, predict_y, labels=clf.classes_, eps=1e-15))\n    print('For values of alpha = ', i, \"The log loss is:\",log_loss(y_cv, predict_y, labels=clf.classes_, eps=1e-15))","b62920ca":"# Lets plot the same to check the best Alpha value\n#fig, ax = plt.subplots()\n#ax.plot(alpha, cv_log_error_array,c='g')\n#for i, txt in enumerate(np.round(cv_log_error_array,3)):\n#    ax.annotate((alpha[i],np.round(txt,3)), (alpha[i],cv_log_error_array[i]))\n#plt.grid()\n#plt.title(\"Cross Validation Error for each alpha\")\n#plt.xlabel(\"Alpha i's\")\n#plt.ylabel(\"Error measure\")\n#plt.show()\n\n\n# because the graph is not clear this section is commented and written to just give the best alpha\ndef print_best_alpha(alpha_arr, loss_arr):\n    print(\"The best alpha is: \" + str(alpha_arr[loss_arr.index(min(loss_arr))]) + \"\\nThe best alpha index is: \" + str(loss_arr.index(min(loss_arr))))\nprint_best_alpha(alpha, cv_log_error_array)","739c6688":"# Lets use best alpha value as we can see from above graph and compute log loss\n# Building a very simple model using just gene column to check error decrease from worst model\n# building a model with just one feature gives information on how much that feature is meaningful for the final result\nbest_alpha = np.argmin(cv_log_error_array)\nclf = SGDClassifier(alpha=alpha[best_alpha], penalty='l2', loss='log', random_state=42)\nclf.fit(train_gene_feature_onehotCoding, y_train)\nsig_clf = CalibratedClassifierCV(clf, method=\"sigmoid\")\nsig_clf.fit(train_gene_feature_onehotCoding, y_train)\n\npredict_y = sig_clf.predict_proba(train_gene_feature_onehotCoding)\nprint('For values of best alpha = ', alpha[best_alpha], \"The train log loss is:\",log_loss(y_train, predict_y, labels=clf.classes_, eps=1e-15))\npredict_y = sig_clf.predict_proba(cv_gene_feature_onehotCoding)\nprint('For values of best alpha = ', alpha[best_alpha], \"The cross validation log loss is:\",log_loss(y_cv, predict_y, labels=clf.classes_, eps=1e-15))\npredict_y = sig_clf.predict_proba(test_gene_feature_onehotCoding)\nprint('For values of best alpha = ', alpha[best_alpha], \"The test log loss is:\",log_loss(y_test, predict_y, labels=clf.classes_, eps=1e-15))\n","c61d154c":"# checking for overlaping between train set and [cross_validation, test] set\ntest_coverage=test_df[test_df['Gene'].isin(list(set(train_df['Gene'])))].shape[0]\ncv_coverage=cv_df[cv_df['Gene'].isin(list(set(train_df['Gene'])))].shape[0]","be3468e0":"print('1. In test data',test_coverage, 'out of',test_df.shape[0], \":\",(test_coverage\/test_df.shape[0])*100)\nprint('2. In cross validation data',cv_coverage, 'out of ',cv_df.shape[0],\":\" ,(cv_coverage\/cv_df.shape[0])*100)","a311b2d2":"unique_variations = train_df['Variation'].value_counts()\nprint('Number of Unique Variations :', unique_variations.shape[0])\n# the top 10 variations that occured most\nprint(unique_variations.head(10))","64f53097":"# looking at the comulative distribution of unique variation values\ns = sum(unique_variations.values);\nh = unique_variations.values\/s;\nc = np.cumsum(h)\nprint(c)\nplt.plot(c,label='Cumulative distribution of Variations')\nplt.grid()\nplt.legend()\nplt.show()","fa364761":"unique_variations = train_df['Variation'].value_counts()\nprint('Number of Unique Variations :', unique_variations.shape[0])\n# the top 10 variations that occured most\nprint(unique_variations.head(10))","1b6b4591":"# ploting the distribution of variation values\ns = sum(unique_variations.values);\nh = unique_variations.values\/s;\nc = np.cumsum(h)\nprint(c)\nplt.plot(c,label='Cumulative distribution of Variations')\nplt.grid()\nplt.legend()\nplt.show()","b7a9ed69":"# one-hot encoding of variation values.\nvariation_vectorizer = CountVectorizer()\ntrain_variation_feature_onehotCoding = variation_vectorizer.fit_transform(train_df['Variation'])\ntest_variation_feature_onehotCoding = variation_vectorizer.transform(test_df['Variation'])\ncv_variation_feature_onehotCoding = variation_vectorizer.transform(cv_df['Variation'])","42e8bf14":"# The shape of one hot encoder column for variation\ntrain_variation_feature_onehotCoding.shape","a1337856":"# Response encoding of variation values.\n# alpha is used for laplace smoothing\nalpha = 1\n# train gene feature\ntrain_variation_feature_responseCoding = np.array(get_gv_feature(alpha, \"Variation\", train_df))\n# test gene feature\ntest_variation_feature_responseCoding = np.array(get_gv_feature(alpha, \"Variation\", test_df))\n# cross validation gene feature\ncv_variation_feature_responseCoding = np.array(get_gv_feature(alpha, \"Variation\", cv_df))","5188d0c9":"# the shape of this response encoding result\ntrain_variation_feature_responseCoding.shape","05f2ea15":"# Lets again build the model with only column name of variation column\n# We need a hyperparemeter for SGD classifier.\nalpha = [10 ** x for x in range(-5, 1)]\n# We will be using SGD classifier\n# http:\/\/scikit-learn.org\/stable\/modules\/generated\/sklearn.linear_model.SGDClassifier.html\n# We will also be using Calibrated Classifier to get the result into probablity format t be used for log loss\ncv_log_error_array=[]\nfor i in alpha:\n    clf = SGDClassifier(alpha=i, penalty='l2', loss='log', random_state=42)\n    clf.fit(train_variation_feature_onehotCoding, y_train)\n    \n    sig_clf = CalibratedClassifierCV(clf, method=\"sigmoid\")\n    sig_clf.fit(train_variation_feature_onehotCoding, y_train)\n    predict_y = sig_clf.predict_proba(cv_variation_feature_onehotCoding)\n    \n    cv_log_error_array.append(log_loss(y_cv, predict_y, labels=clf.classes_, eps=1e-15))\n    print('For values of alpha = ', i, \"The log loss is:\",log_loss(y_cv, predict_y, labels=clf.classes_, eps=1e-15))","cf2ccf47":"print_best_alpha(alpha, cv_log_error_array)","7232e3f5":"# checking for error on a simple model buided using just variation column\nbest_alpha = np.argmin(cv_log_error_array)\nclf = SGDClassifier(alpha=alpha[best_alpha], penalty='l2', loss='log', random_state=42)\nclf.fit(train_variation_feature_onehotCoding, y_train)\nsig_clf = CalibratedClassifierCV(clf, method=\"sigmoid\")\nsig_clf.fit(train_variation_feature_onehotCoding, y_train)\n\npredict_y = sig_clf.predict_proba(train_variation_feature_onehotCoding)\nprint('For values of best alpha = ', alpha[best_alpha], \"The train log loss is:\",log_loss(y_train, predict_y, labels=clf.classes_, eps=1e-15))\npredict_y = sig_clf.predict_proba(cv_variation_feature_onehotCoding)\nprint('For values of best alpha = ', alpha[best_alpha], \"The cross validation log loss is:\",log_loss(y_cv, predict_y, labels=clf.classes_, eps=1e-15))\npredict_y = sig_clf.predict_proba(test_variation_feature_onehotCoding)\nprint('For values of best alpha = ', alpha[best_alpha], \"The test log loss is:\",log_loss(y_test, predict_y, labels=clf.classes_, eps=1e-15))","6107b2d7":"# checking overlaping of training set with other sets\ntest_coverage=test_df[test_df['Variation'].isin(list(set(train_df['Variation'])))].shape[0]\ncv_coverage=cv_df[cv_df['Variation'].isin(list(set(train_df['Variation'])))].shape[0]\nprint('1. In test data',test_coverage, 'out of',test_df.shape[0], \":\",(test_coverage\/test_df.shape[0])*100)\nprint('2. In cross validation data',cv_coverage, 'out of ',cv_df.shape[0],\":\" ,(cv_coverage\/cv_df.shape[0])*100)","c25bd826":"# cls_text is a data frame\n# for every row in data fram consider the 'TEXT'\n# split the words by space\n# make a dict with those words\n# increment its count whenever we see that word\n\ndef extract_dictionary_paddle(cls_text):\n    dictionary = defaultdict(int)\n    for index, row in cls_text.iterrows():\n        for word in row['TEXT'].split():\n            dictionary[word] +=1\n    return dictionary\n\n#https:\/\/stackoverflow.com\/a\/1602964\ndef get_text_responsecoding(df):\n    text_feature_responseCoding = np.zeros((df.shape[0],9))\n    for i in range(0,9):\n        row_index = 0\n        for index, row in df.iterrows():\n            sum_prob = 0\n            for word in row['TEXT'].split():\n                sum_prob += math.log(((dict_list[i].get(word,0)+10 )\/(total_dict.get(word,0)+90)))\n            text_feature_responseCoding[row_index][i] = math.exp(sum_prob\/len(row['TEXT'].split()))\n            row_index += 1\n    return text_feature_responseCoding","b8dc76a4":"# building a CountVectorizer with all the words that occured minimum 3 times in train data\ntext_vectorizer = CountVectorizer(min_df=3)\ntrain_text_feature_onehotCoding = text_vectorizer.fit_transform(train_df['TEXT'])\n# getting all the feature names (words)\ntrain_text_features= text_vectorizer.get_feature_names()\n\n# train_text_feature_onehotCoding.sum(axis=0).A1 will sum every row and returns (1*number of features) vector\ntrain_text_fea_counts = train_text_feature_onehotCoding.sum(axis=0).A1\n\n# zip(list(text_features),text_fea_counts) will zip a word with its number of times it occured\ntext_fea_dict = dict(zip(list(train_text_features),train_text_fea_counts))\n\nprint(\"Total number of unique words in train data :\", len(train_text_features))","26a33c4a":"dict_list = []\n# dict_list =[] contains 9 dictoinaries each corresponds to a class\nfor i in range(1,10):\n    cls_text = train_df[train_df['Class']==i]\n    # build a word dict based on the words in that class\n    dict_list.append(extract_dictionary_paddle(cls_text))\n    # append it to dict_list\n\n# dict_list[i] is build on i'th  class text data\n# total_dict is buid on whole training text data\ntotal_dict = extract_dictionary_paddle(train_df)\n\n\nconfuse_array = []\nfor i in train_text_features:\n    ratios = []\n    max_val = -1\n    for j in range(0,9):\n        ratios.append((dict_list[j][i]+10 )\/(total_dict[i]+90))\n    confuse_array.append(ratios)\nconfuse_array = np.array(confuse_array)","6fb305f2":"# response coding of text features\n# text column calculations teke a long time\ntrain_text_feature_responseCoding  = get_text_responsecoding(train_df)\ntest_text_feature_responseCoding  = get_text_responsecoding(test_df)\ncv_text_feature_responseCoding  = get_text_responsecoding(cv_df)","0d51ec50":"# https:\/\/stackoverflow.com\/a\/16202486\n# we convert each row values such that they sum to 1  \ntrain_text_feature_responseCoding = (train_text_feature_responseCoding.T\/train_text_feature_responseCoding.sum(axis=1)).T\ntest_text_feature_responseCoding = (test_text_feature_responseCoding.T\/test_text_feature_responseCoding.sum(axis=1)).T\ncv_text_feature_responseCoding = (cv_text_feature_responseCoding.T\/cv_text_feature_responseCoding.sum(axis=1)).T","afb8cc4d":"# don't forget to normalize every feature\ntrain_text_feature_onehotCoding = normalize(train_text_feature_onehotCoding, axis=0)\n\n# we use the same vectorizer that was trained on train data\ntest_text_feature_onehotCoding = text_vectorizer.transform(test_df['TEXT'])\n# don't forget to normalize every feature\ntest_text_feature_onehotCoding = normalize(test_text_feature_onehotCoding, axis=0)\n\n# we use the same vectorizer that was trained on train data\ncv_text_feature_onehotCoding = text_vectorizer.transform(cv_df['TEXT'])\n# don't forget to normalize every feature\ncv_text_feature_onehotCoding = normalize(cv_text_feature_onehotCoding, axis=0)","befa32d6":"#https:\/\/stackoverflow.com\/a\/2258273\/4084039\nsorted_text_fea_dict = dict(sorted(text_fea_dict.items(), key=lambda x: x[1] , reverse=True))\nsorted_text_occur = np.array(list(sorted_text_fea_dict.values()))","67c37d41":"# Number of words for a given frequency.\nprint(Counter(sorted_text_occur))","425a030e":"cv_log_error_array=[]\nfor i in alpha:\n    clf = SGDClassifier(alpha=i, penalty='l2', loss='log', random_state=42)\n    clf.fit(train_text_feature_onehotCoding, y_train)\n    \n    sig_clf = CalibratedClassifierCV(clf, method=\"sigmoid\")\n    sig_clf.fit(train_text_feature_onehotCoding, y_train)\n    predict_y = sig_clf.predict_proba(cv_text_feature_onehotCoding)\n    cv_log_error_array.append(log_loss(y_cv, predict_y, labels=clf.classes_, eps=1e-15))\n    print('For values of alpha = ', i, \"The log loss is:\",log_loss(y_cv, predict_y, labels=clf.classes_, eps=1e-15))","818c7c8e":"print_best_alpha(alpha, cv_log_error_array)","2ebe7b1a":"# Simple model with only text data to evaluate its importance and check error\nbest_alpha = np.argmin(cv_log_error_array)\nclf = SGDClassifier(alpha=alpha[best_alpha], penalty='l2', loss='log', random_state=42)\nclf.fit(train_text_feature_onehotCoding, y_train)\nsig_clf = CalibratedClassifierCV(clf, method=\"sigmoid\")\nsig_clf.fit(train_text_feature_onehotCoding, y_train)\n\npredict_y = sig_clf.predict_proba(train_text_feature_onehotCoding)\nprint('For values of best alpha = ', alpha[best_alpha], \"The train log loss is:\",log_loss(y_train, predict_y, labels=clf.classes_, eps=1e-15))\npredict_y = sig_clf.predict_proba(cv_text_feature_onehotCoding)\nprint('For values of best alpha = ', alpha[best_alpha], \"The cross validation log loss is:\",log_loss(y_cv, predict_y, labels=clf.classes_, eps=1e-15))\npredict_y = sig_clf.predict_proba(test_text_feature_onehotCoding)\nprint('For values of best alpha = ', alpha[best_alpha], \"The test log loss is:\",log_loss(y_test, predict_y, labels=clf.classes_, eps=1e-15))","09030c0b":"# Checking text overlap\ndef get_intersec_text(df):\n    df_text_vec = CountVectorizer(min_df=3)\n    df_text_fea = df_text_vec.fit_transform(df['TEXT'])\n    df_text_features = df_text_vec.get_feature_names()\n\n    df_text_fea_counts = df_text_fea.sum(axis=0).A1\n    df_text_fea_dict = dict(zip(list(df_text_features),df_text_fea_counts))\n    len1 = len(set(df_text_features))\n    len2 = len(set(train_text_features) & set(df_text_features))\n    return len1,len2\n\nlen1,len2 = get_intersec_text(test_df)\nprint(np.round((len2\/len1)*100, 3), \"% of word of test data appeared in train data\")\nlen1,len2 = get_intersec_text(cv_df)\nprint(np.round((len2\/len1)*100, 3), \"% of word of Cross Validation appeared in train data\")","3ed562d8":"# Functions delcaration\n\ndef report_log_loss(train_x, train_y, test_x, test_y,  clf):\n    clf.fit(train_x, train_y)\n    sig_clf = CalibratedClassifierCV(clf, method=\"sigmoid\")\n    sig_clf.fit(train_x, train_y)\n    sig_clf_probs = sig_clf.predict_proba(test_x)\n    return log_loss(test_y, sig_clf_probs, eps=1e-15)\n\n# This function plots the confusion matrices given y_i, y_i_hat.\ndef plot_confusion_matrix(test_y, predict_y):\n    C = confusion_matrix(test_y, predict_y)\n    \n    A =(((C.T)\/(C.sum(axis=1))).T)\n    \n    B =(C\/C.sum(axis=0)) \n    labels = [1,2,3,4,5,6,7,8,9]\n    # representing A in heatmap format\n    print(\"-\"*20, \"Confusion matrix\", \"-\"*20)\n    plt.figure(figsize=(20,7))\n    sns.heatmap(C, annot=True, cmap=\"YlGnBu\", fmt=\".3f\", xticklabels=labels, yticklabels=labels)\n    plt.xlabel('Predicted Class')\n    plt.ylabel('Original Class')\n    plt.show()\n\n    print(\"-\"*20, \"Precision matrix (Columm Sum=1)\", \"-\"*20)\n    plt.figure(figsize=(20,7))\n    sns.heatmap(B, annot=True, cmap=\"YlGnBu\", fmt=\".3f\", xticklabels=labels, yticklabels=labels)\n    plt.xlabel('Predicted Class')\n    plt.ylabel('Original Class')\n    plt.show()\n    \n    # representing B in heatmap format\n    print(\"-\"*20, \"Recall matrix (Row sum=1)\", \"-\"*20)\n    plt.figure(figsize=(20,7))\n    sns.heatmap(A, annot=True, cmap=\"YlGnBu\", fmt=\".3f\", xticklabels=labels, yticklabels=labels)\n    plt.xlabel('Predicted Class')\n    plt.ylabel('Original Class')\n    plt.show()\n\n\ndef predict_and_plot_confusion_matrix(train_x, train_y,test_x, test_y, clf):\n    clf.fit(train_x, train_y)\n    sig_clf = CalibratedClassifierCV(clf, method=\"sigmoid\")\n    sig_clf.fit(train_x, train_y)\n    pred_y = sig_clf.predict(test_x)\n\n    # for calculating log_loss we willl provide the array of probabilities belongs to each class\n    print(\"Log loss :\",log_loss(test_y, sig_clf.predict_proba(test_x)))\n    # calculating the number of data points that are misclassified\n    print(\"Number of mis-classified points :\", np.count_nonzero((pred_y- test_y))\/test_y.shape[0])\n    plot_confusion_matrix(test_y, pred_y)\n\n# this function will be used just for naive bayes\n# for the given indices, we will print the name of the features\n# and we will check whether the feature present in the test point text or not\ndef get_impfeature_names(indices, text, gene, var, no_features):\n    gene_count_vec = CountVectorizer()\n    var_count_vec = CountVectorizer()\n    text_count_vec = CountVectorizer(min_df=3)\n    \n    gene_vec = gene_count_vec.fit(train_df['Gene'])\n    var_vec  = var_count_vec.fit(train_df['Variation'])\n    text_vec = text_count_vec.fit(train_df['TEXT'])\n    \n    fea1_len = len(gene_vec.get_feature_names())\n    fea2_len = len(var_count_vec.get_feature_names())\n    \n    word_present = 0\n    for i,v in enumerate(indices):\n        if (v < fea1_len):\n            word = gene_vec.get_feature_names()[v]\n            yes_no = True if word == gene else False\n            if yes_no:\n                word_present += 1\n                print(i, \"Gene feature [{}] present in test data point [{}]\".format(word,yes_no))\n        elif (v < fea1_len+fea2_len):\n            word = var_vec.get_feature_names()[v-(fea1_len)]\n            yes_no = True if word == var else False\n            if yes_no:\n                word_present += 1\n                print(i, \"variation feature [{}] present in test data point [{}]\".format(word,yes_no))\n        else:\n            word = text_vec.get_feature_names()[v-(fea1_len+fea2_len)]\n            yes_no = True if word in text.split() else False\n            if yes_no:\n                word_present += 1\n                print(i, \"Text feature [{}] present in test data point [{}]\".format(word,yes_no))\n\n    print(\"Out of the top \",no_features,\" features \", word_present, \"are present in query point\")","5abe38f6":"# merging gene, variance and text features\n\n# building train, test and cross validation data sets\n# a = [[1, 2], \n#      [3, 4]]\n# b = [[4, 5], \n#      [6, 7]]\n# hstack(a, b) = [[1, 2, 4, 5],\n#                [ 3, 4, 6, 7]]\n\ntrain_gene_var_onehotCoding = hstack((train_gene_feature_onehotCoding,train_variation_feature_onehotCoding))\ntest_gene_var_onehotCoding = hstack((test_gene_feature_onehotCoding,test_variation_feature_onehotCoding))\ncv_gene_var_onehotCoding = hstack((cv_gene_feature_onehotCoding,cv_variation_feature_onehotCoding))\n\ntrain_x_onehotCoding = hstack((train_gene_var_onehotCoding, train_text_feature_onehotCoding)).tocsr()\ntrain_y = np.array(list(train_df['Class']))\n\ntest_x_onehotCoding = hstack((test_gene_var_onehotCoding, test_text_feature_onehotCoding)).tocsr()\ntest_y = np.array(list(test_df['Class']))\n\ncv_x_onehotCoding = hstack((cv_gene_var_onehotCoding, cv_text_feature_onehotCoding)).tocsr()\ncv_y = np.array(list(cv_df['Class']))\n\n\ntrain_gene_var_responseCoding = np.hstack((train_gene_feature_responseCoding,train_variation_feature_responseCoding))\ntest_gene_var_responseCoding = np.hstack((test_gene_feature_responseCoding,test_variation_feature_responseCoding))\ncv_gene_var_responseCoding = np.hstack((cv_gene_feature_responseCoding,cv_variation_feature_responseCoding))\n\ntrain_x_responseCoding = np.hstack((train_gene_var_responseCoding, train_text_feature_responseCoding))\ntest_x_responseCoding = np.hstack((test_gene_var_responseCoding, test_text_feature_responseCoding))\ncv_x_responseCoding = np.hstack((cv_gene_var_responseCoding, cv_text_feature_responseCoding))\n\n\nprint(\"One hot encoding features :\")\nprint(\"(number of data points * number of features) in train data = \", train_x_onehotCoding.shape)\nprint(\"(number of data points * number of features) in test data = \", test_x_onehotCoding.shape)\nprint(\"(number of data points * number of features) in cross validation data =\", cv_x_onehotCoding.shape)\nprint(\" Response encoding features :\")\nprint(\"(number of data points * number of features) in train data = \", train_x_responseCoding.shape)\nprint(\"(number of data points * number of features) in test data = \", test_x_responseCoding.shape)\nprint(\"(number of data points * number of features) in cross validation data =\", cv_x_responseCoding.shape)","0bae789f":"# http:\/\/scikit-learn.org\/stable\/modules\/generated\/sklearn.naive_bayes.MultinomialNB.html\nalpha = [0.00001, 0.0001, 0.001, 0.1, 1, 10, 100,1000]\ncv_log_error_array = []\nfor i in alpha:\n    print(\"for alpha =\", i)\n    # MultinomialNB is used for multi class classification\n    clf = MultinomialNB(alpha=i)\n    clf.fit(train_x_onehotCoding, train_y)\n    sig_clf = CalibratedClassifierCV(clf, method=\"sigmoid\")\n    sig_clf.fit(train_x_onehotCoding, train_y)\n    sig_clf_probs = sig_clf.predict_proba(cv_x_onehotCoding)\n    cv_log_error_array.append(log_loss(cv_y, sig_clf_probs, labels=clf.classes_, eps=1e-15))\n    # to avoid rounding error while multiplying probabilites we use log-probability estimates\n    print(\"Log Loss :\",log_loss(cv_y, sig_clf_probs)) \n\nprint_best_alpha(alpha, cv_log_error_array)","27122085":"best_alpha = np.argmin(cv_log_error_array)\nclf = MultinomialNB(alpha=alpha[best_alpha])\nclf.fit(train_x_onehotCoding, train_y)\nsig_clf = CalibratedClassifierCV(clf, method=\"sigmoid\")\nsig_clf.fit(train_x_onehotCoding, train_y)\n\n\npredict_y = sig_clf.predict_proba(train_x_onehotCoding)\nprint('For values of best alpha = ', alpha[best_alpha], \"The train log loss is:\",log_loss(y_train, predict_y, labels=clf.classes_, eps=1e-15))\npredict_y = sig_clf.predict_proba(cv_x_onehotCoding)\nprint('For values of best alpha = ', alpha[best_alpha], \"The cross validation log loss is:\",log_loss(y_cv, predict_y, labels=clf.classes_, eps=1e-15))\npredict_y = sig_clf.predict_proba(test_x_onehotCoding)\nprint('For values of best alpha = ', alpha[best_alpha], \"The test log loss is:\",log_loss(y_test, predict_y, labels=clf.classes_, eps=1e-15))","d9dec3d7":"clf = MultinomialNB(alpha=alpha[best_alpha])\nclf.fit(train_x_onehotCoding, train_y)\nsig_clf = CalibratedClassifierCV(clf, method=\"sigmoid\")\nsig_clf.fit(train_x_onehotCoding, train_y)\nsig_clf_probs = sig_clf.predict_proba(cv_x_onehotCoding)\n# to avoid rounding error while multiplying probabilites we use log-probability estimates\nprint(\"Log Loss :\",log_loss(cv_y, sig_clf_probs))\nprint(\"Number of missclassified point :\", np.count_nonzero((sig_clf.predict(cv_x_onehotCoding)- cv_y))\/cv_y.shape[0])\nplot_confusion_matrix(cv_y, sig_clf.predict(cv_x_onehotCoding.toarray()))","6f60e0f4":"# checked item is defined apriory, without any meaning\n# we can check whichever item we want\n# defining item to be checked\ntest_point_index = 2\n# important features to be printed\nno_feature = 100\npredicted_cls = sig_clf.predict(test_x_onehotCoding[test_point_index])\nprint(\"Predicted Class :\", predicted_cls[0])\nprint(\"Predicted Class Probabilities:\", np.round(sig_clf.predict_proba(test_x_onehotCoding[test_point_index]),4))\nprint(\"Actual Class :\", test_y[test_point_index])\nindices = np.argsort(-clf.coef_)[predicted_cls-1][:,:no_feature]\nprint(\"-\"*50)\nget_impfeature_names(indices[0], test_df['TEXT'].iloc[test_point_index],test_df['Gene'].iloc[test_point_index],test_df['Variation'].iloc[test_point_index], no_feature)","c32eb14a":"test_point_index = 100\nno_feature = 100\npredicted_cls = sig_clf.predict(test_x_onehotCoding[test_point_index])\nprint(\"Predicted Class :\", predicted_cls[0])\nprint(\"Predicted Class Probabilities:\", np.round(sig_clf.predict_proba(test_x_onehotCoding[test_point_index]),4))\nprint(\"Actual Class :\", test_y[test_point_index])\nindices = np.argsort(-clf.coef_)[predicted_cls-1][:,:no_feature]\nprint(\"-\"*50)\nget_impfeature_names(indices[0], test_df['TEXT'].iloc[test_point_index],test_df['Gene'].iloc[test_point_index],test_df['Variation'].iloc[test_point_index], no_feature)","c3970c5c":"alpha = [5, 11, 15, 21, 31, 41, 51, 99]\ncv_log_error_array = []\nfor i in alpha:\n    print(\"for alpha =\", i)\n    clf = KNeighborsClassifier(n_neighbors=i)\n    clf.fit(train_x_responseCoding, train_y)\n    sig_clf = CalibratedClassifierCV(clf, method=\"sigmoid\")\n    sig_clf.fit(train_x_responseCoding, train_y)\n    sig_clf_probs = sig_clf.predict_proba(cv_x_responseCoding)\n    cv_log_error_array.append(log_loss(cv_y, sig_clf_probs, labels=clf.classes_, eps=1e-15))\n    # to avoid rounding error while multiplying probabilites we use log-probability estimates\n    print(\"Log Loss :\",log_loss(cv_y, sig_clf_probs))\nprint(\"\")\nprint_best_alpha(alpha, cv_log_error_array)","a8cf3496":"best_alpha = np.argmin(cv_log_error_array)\nclf = KNeighborsClassifier(n_neighbors=alpha[best_alpha])\nclf.fit(train_x_responseCoding, train_y)\nsig_clf = CalibratedClassifierCV(clf, method=\"sigmoid\")\nsig_clf.fit(train_x_responseCoding, train_y)\n\npredict_y = sig_clf.predict_proba(train_x_responseCoding)\nprint('For values of best alpha = ', alpha[best_alpha], \"The train log loss is:\",log_loss(y_train, predict_y, labels=clf.classes_, eps=1e-15))\npredict_y = sig_clf.predict_proba(cv_x_responseCoding)\nprint('For values of best alpha = ', alpha[best_alpha], \"The cross validation log loss is:\",log_loss(y_cv, predict_y, labels=clf.classes_, eps=1e-15))\npredict_y = sig_clf.predict_proba(test_x_responseCoding)\nprint('For values of best alpha = ', alpha[best_alpha], \"The test log loss is:\",log_loss(y_test, predict_y, labels=clf.classes_, eps=1e-15))","0350624c":"clf = KNeighborsClassifier(n_neighbors=alpha[best_alpha])\npredict_and_plot_confusion_matrix(train_x_responseCoding, train_y, cv_x_responseCoding, cv_y, clf)","b050c191":"# Lets look at few test points\nclf = KNeighborsClassifier(n_neighbors=alpha[best_alpha])\nclf.fit(train_x_responseCoding, train_y)\nsig_clf = CalibratedClassifierCV(clf, method=\"sigmoid\")\nsig_clf.fit(train_x_responseCoding, train_y)\n\ntest_point_index = 1\npredicted_cls = sig_clf.predict(test_x_responseCoding[0].reshape(1,-1))\nprint(\"Predicted Class :\", predicted_cls[0])\nprint(\"Actual Class :\", test_y[test_point_index])\nneighbors = clf.kneighbors(test_x_responseCoding[test_point_index].reshape(1, -1), alpha[best_alpha])\nprint(\"The \",alpha[best_alpha],\" nearest neighbours of the test points belongs to classes\",train_y[neighbors[1][0]])\nprint(\"Fequency of nearest points :\",Counter(train_y[neighbors[1][0]]))","e8dc38dc":"clf = KNeighborsClassifier(n_neighbors=alpha[best_alpha])\nclf.fit(train_x_responseCoding, train_y)\nsig_clf = CalibratedClassifierCV(clf, method=\"sigmoid\")\nsig_clf.fit(train_x_responseCoding, train_y)\n\ntest_point_index = 100\n\npredicted_cls = sig_clf.predict(test_x_responseCoding[test_point_index].reshape(1,-1))\nprint(\"Predicted Class :\", predicted_cls[0])\nprint(\"Actual Class :\", test_y[test_point_index])\nneighbors = clf.kneighbors(test_x_responseCoding[test_point_index].reshape(1, -1), alpha[best_alpha])\nprint(\"the k value for knn is\",alpha[best_alpha],\"and the nearest neighbours of the test points belongs to classes\",train_y[neighbors[1][0]])\nprint(\"Fequency of nearest points :\",Counter(train_y[neighbors[1][0]]))","7ddcaf89":"alpha = [10 ** x for x in range(-6, 3)]\ncv_log_error_array = []\nfor i in alpha:\n    print(\"for alpha =\", i)\n    clf = SGDClassifier(class_weight='balanced', alpha=i, penalty='l2', loss='log', random_state=42)\n    clf.fit(train_x_onehotCoding, train_y)\n    sig_clf = CalibratedClassifierCV(clf, method=\"sigmoid\")\n    sig_clf.fit(train_x_onehotCoding, train_y)\n    sig_clf_probs = sig_clf.predict_proba(cv_x_onehotCoding)\n    cv_log_error_array.append(log_loss(cv_y, sig_clf_probs, labels=clf.classes_, eps=1e-15))\n    # to avoid rounding error while multiplying probabilites we use log-probability estimates\n    print(\"Log Loss :\",log_loss(cv_y, sig_clf_probs)) \nprint(\"\")\nprint_best_alpha(alpha, cv_log_error_array)","065cf57b":"best_alpha = np.argmin(cv_log_error_array)\nclf = SGDClassifier(class_weight='balanced', alpha=alpha[best_alpha], penalty='l2', loss='log', random_state=42)\nclf.fit(train_x_onehotCoding, train_y)\nsig_clf = CalibratedClassifierCV(clf, method=\"sigmoid\")\nsig_clf.fit(train_x_onehotCoding, train_y)\n\npredict_y = sig_clf.predict_proba(train_x_onehotCoding)\nprint('For values of best alpha = ', alpha[best_alpha], \"The train log loss is:\",log_loss(y_train, predict_y, labels=clf.classes_, eps=1e-15))\npredict_y = sig_clf.predict_proba(cv_x_onehotCoding)\nprint('For values of best alpha = ', alpha[best_alpha], \"The cross validation log loss is:\",log_loss(y_cv, predict_y, labels=clf.classes_, eps=1e-15))\npredict_y = sig_clf.predict_proba(test_x_onehotCoding)\nprint('For values of best alpha = ', alpha[best_alpha], \"The test log loss is:\",log_loss(y_test, predict_y, labels=clf.classes_, eps=1e-15))","0618f7e5":"clf = SGDClassifier(class_weight='balanced', alpha=alpha[best_alpha], penalty='l2', loss='log', random_state=42)\npredict_and_plot_confusion_matrix(train_x_onehotCoding, train_y, cv_x_onehotCoding, cv_y, clf)","8f46c5fc":"def get_imp_feature_names(text, indices, removed_ind = []):\n    word_present = 0\n    tabulte_list = []\n    incresingorder_ind = 0\n    for i in indices:\n        if i < train_gene_feature_onehotCoding.shape[1]:\n            tabulte_list.append([incresingorder_ind, \"Gene\", \"Yes\"])\n        elif i< 18:\n            tabulte_list.append([incresingorder_ind,\"Variation\", \"Yes\"])\n        if ((i > 17) & (i not in removed_ind)) :\n            word = train_text_features[i]\n            yes_no = True if word in text.split() else False\n            if yes_no:\n                word_present += 1\n            tabulte_list.append([incresingorder_ind,train_text_features[i], yes_no])\n        incresingorder_ind += 1\n    print(word_present, \"most importent features are present in our query point\")\n    print(\"-\"*50)\n    print(\"The features that are most importent of the \",predicted_cls[0],\" class:\")\n    print (tabulate(tabulte_list, headers=[\"Index\",'Feature name', 'Present or Not']))","0d0882d4":"# from tabulate import tabulate\nclf = SGDClassifier(class_weight='balanced', alpha=alpha[best_alpha], penalty='l2', loss='log', random_state=42)\nclf.fit(train_x_onehotCoding,train_y)\ntest_point_index = 1\nno_feature = 500\npredicted_cls = sig_clf.predict(test_x_onehotCoding[test_point_index])\nprint(\"Predicted Class :\", predicted_cls[0])\nprint(\"Predicted Class Probabilities:\", np.round(sig_clf.predict_proba(test_x_onehotCoding[test_point_index]),4))\nprint(\"Actual Class :\", test_y[test_point_index])\nindices = np.argsort(-clf.coef_)[predicted_cls-1][:,:no_feature]\nprint(\"-\"*50)\nget_impfeature_names(indices[0], test_df['TEXT'].iloc[test_point_index],test_df['Gene'].iloc[test_point_index],test_df['Variation'].iloc[test_point_index], no_feature)","e7984438":"test_point_index = 100\nno_feature = 500\npredicted_cls = sig_clf.predict(test_x_onehotCoding[test_point_index])\nprint(\"Predicted Class :\", predicted_cls[0])\nprint(\"Predicted Class Probabilities:\", np.round(sig_clf.predict_proba(test_x_onehotCoding[test_point_index]),4))\nprint(\"Actual Class :\", test_y[test_point_index])\nindices = np.argsort(-clf.coef_)[predicted_cls-1][:,:no_feature]\nprint(\"-\"*50)\nget_impfeature_names(indices[0], test_df['TEXT'].iloc[test_point_index],test_df['Gene'].iloc[test_point_index],test_df['Variation'].iloc[test_point_index], no_feature)","ed4bfcba":"alpha = [10 ** x for x in range(-6, 1)]\ncv_log_error_array = []\nfor i in alpha:\n    print(\"for alpha =\", i)\n    clf = SGDClassifier(alpha=i, penalty='l2', loss='log', random_state=42)\n    clf.fit(train_x_onehotCoding, train_y)\n    sig_clf = CalibratedClassifierCV(clf, method=\"sigmoid\")\n    sig_clf.fit(train_x_onehotCoding, train_y)\n    sig_clf_probs = sig_clf.predict_proba(cv_x_onehotCoding)\n    cv_log_error_array.append(log_loss(cv_y, sig_clf_probs, labels=clf.classes_, eps=1e-15))\n    print(\"Log Loss :\",log_loss(cv_y, sig_clf_probs)) \nprint(\"\")\nprint_best_alpha(alpha, cv_log_error_array)","a5a1e532":"best_alpha = np.argmin(cv_log_error_array)\nclf = SGDClassifier(alpha=alpha[best_alpha], penalty='l2', loss='log', random_state=42)\nclf.fit(train_x_onehotCoding, train_y)\nsig_clf = CalibratedClassifierCV(clf, method=\"sigmoid\")\nsig_clf.fit(train_x_onehotCoding, train_y)\n\npredict_y = sig_clf.predict_proba(train_x_onehotCoding)\nprint('For values of best alpha = ', alpha[best_alpha], \"The train log loss is:\",log_loss(y_train, predict_y, labels=clf.classes_, eps=1e-15))\npredict_y = sig_clf.predict_proba(cv_x_onehotCoding)\nprint('For values of best alpha = ', alpha[best_alpha], \"The cross validation log loss is:\",log_loss(y_cv, predict_y, labels=clf.classes_, eps=1e-15))\npredict_y = sig_clf.predict_proba(test_x_onehotCoding)\nprint('For values of best alpha = ', alpha[best_alpha], \"The test log loss is:\",log_loss(y_test, predict_y, labels=clf.classes_, eps=1e-15))","86d93de0":"clf = SGDClassifier(alpha=alpha[best_alpha], penalty='l2', loss='log', random_state=42)\npredict_and_plot_confusion_matrix(train_x_onehotCoding, train_y, cv_x_onehotCoding, cv_y, clf)","aa74cbb5":"clf = SGDClassifier(alpha=alpha[best_alpha], penalty='l2', loss='log', random_state=42)\nclf.fit(train_x_onehotCoding,train_y)\ntest_point_index = 1\nno_feature = 500\npredicted_cls = sig_clf.predict(test_x_onehotCoding[test_point_index])\nprint(\"Predicted Class :\", predicted_cls[0])\nprint(\"Predicted Class Probabilities:\", np.round(sig_clf.predict_proba(test_x_onehotCoding[test_point_index]),4))\nprint(\"Actual Class :\", test_y[test_point_index])\nindices = np.argsort(-clf.coef_)[predicted_cls-1][:,:no_feature]\nprint(\"-\"*50)\nget_impfeature_names(indices[0], test_df['TEXT'].iloc[test_point_index],test_df['Gene'].iloc[test_point_index],test_df['Variation'].iloc[test_point_index], no_feature)","ef68f49b":"alpha = [10 ** x for x in range(-5, 3)]\ncv_log_error_array = []\nfor i in alpha:\n    print(\"for C =\", i)\n#     clf = SVC(C=i,kernel='linear',probability=True, class_weight='balanced')\n    clf = SGDClassifier( class_weight='balanced', alpha=i, penalty='l2', loss='hinge', random_state=42)\n    clf.fit(train_x_onehotCoding, train_y)\n    sig_clf = CalibratedClassifierCV(clf, method=\"sigmoid\")\n    sig_clf.fit(train_x_onehotCoding, train_y)\n    sig_clf_probs = sig_clf.predict_proba(cv_x_onehotCoding)\n    cv_log_error_array.append(log_loss(cv_y, sig_clf_probs, labels=clf.classes_, eps=1e-15))\n    print(\"Log Loss :\",log_loss(cv_y, sig_clf_probs))\nprint(\"\")\nprint_best_alpha(alpha, cv_log_error_array)","71ef2074":"best_alpha = np.argmin(cv_log_error_array)\n# clf = SVC(C=i,kernel='linear',probability=True, class_weight='balanced')\nclf = SGDClassifier(class_weight='balanced', alpha=alpha[best_alpha], penalty='l2', loss='hinge', random_state=42)\nclf.fit(train_x_onehotCoding, train_y)\nsig_clf = CalibratedClassifierCV(clf, method=\"sigmoid\")\nsig_clf.fit(train_x_onehotCoding, train_y)\n\npredict_y = sig_clf.predict_proba(train_x_onehotCoding)\nprint('For values of best alpha = ', alpha[best_alpha], \"The train log loss is:\",log_loss(y_train, predict_y, labels=clf.classes_, eps=1e-15))\npredict_y = sig_clf.predict_proba(cv_x_onehotCoding)\nprint('For values of best alpha = ', alpha[best_alpha], \"The cross validation log loss is:\",log_loss(y_cv, predict_y, labels=clf.classes_, eps=1e-15))\npredict_y = sig_clf.predict_proba(test_x_onehotCoding)\nprint('For values of best alpha = ', alpha[best_alpha], \"The test log loss is:\",log_loss(y_test, predict_y, labels=clf.classes_, eps=1e-15))","459ee426":"clf = SGDClassifier(alpha=alpha[best_alpha], penalty='l2', loss='hinge', random_state=42,class_weight='balanced')\npredict_and_plot_confusion_matrix(train_x_onehotCoding, train_y,cv_x_onehotCoding,cv_y, clf)","7d4360dd":"clf = SGDClassifier(alpha=alpha[best_alpha], penalty='l2', loss='hinge', random_state=42)\nclf.fit(train_x_onehotCoding,train_y)\ntest_point_index = 1\n# test_point_index = 100\nno_feature = 500\npredicted_cls = sig_clf.predict(test_x_onehotCoding[test_point_index])\nprint(\"Predicted Class :\", predicted_cls[0])\nprint(\"Predicted Class Probabilities:\", np.round(sig_clf.predict_proba(test_x_onehotCoding[test_point_index]),4))\nprint(\"Actual Class :\", test_y[test_point_index])\nindices = np.argsort(-clf.coef_)[predicted_cls-1][:,:no_feature]\nprint(\"-\"*50)\nget_impfeature_names(indices[0], test_df['TEXT'].iloc[test_point_index],test_df['Gene'].iloc[test_point_index],test_df['Variation'].iloc[test_point_index], no_feature)","d73a0763":"alpha = [100,200,500,1000,2000]\nmax_depth = [5, 10]\ncv_log_error_array = []\nfor i in alpha:\n    for j in max_depth:\n        print(\"for n_estimators =\", i,\"and max depth = \", j)\n        clf = RandomForestClassifier(n_estimators=i, criterion='gini', max_depth=j, random_state=42, n_jobs=-1)\n        clf.fit(train_x_onehotCoding, train_y)\n        sig_clf = CalibratedClassifierCV(clf, method=\"sigmoid\")\n        sig_clf.fit(train_x_onehotCoding, train_y)\n        sig_clf_probs = sig_clf.predict_proba(cv_x_onehotCoding)\n        cv_log_error_array.append(log_loss(cv_y, sig_clf_probs, labels=clf.classes_, eps=1e-15))\n        print(\"Log Loss :\",log_loss(cv_y, sig_clf_probs)) ","68b586cb":"best_alpha = np.argmin(cv_log_error_array)\nclf = RandomForestClassifier(n_estimators=alpha[int(best_alpha\/2)], criterion='gini', max_depth=max_depth[int(best_alpha%2)], random_state=42, n_jobs=-1)\nclf.fit(train_x_onehotCoding, train_y)\nsig_clf = CalibratedClassifierCV(clf, method=\"sigmoid\")\nsig_clf.fit(train_x_onehotCoding, train_y)\n\npredict_y = sig_clf.predict_proba(train_x_onehotCoding)\nprint('For values of best estimator = ', alpha[int(best_alpha\/2)], \"The train log loss is:\",log_loss(y_train, predict_y, labels=clf.classes_, eps=1e-15))\npredict_y = sig_clf.predict_proba(cv_x_onehotCoding)\nprint('For values of best estimator = ', alpha[int(best_alpha\/2)], \"The cross validation log loss is:\",log_loss(y_cv, predict_y, labels=clf.classes_, eps=1e-15))\npredict_y = sig_clf.predict_proba(test_x_onehotCoding)\nprint('For values of best estimator = ', alpha[int(best_alpha\/2)], \"The test log loss is:\",log_loss(y_test, predict_y, labels=clf.classes_, eps=1e-15))","0b5dfd44":"clf = RandomForestClassifier(n_estimators=alpha[int(best_alpha\/2)], criterion='gini', max_depth=max_depth[int(best_alpha%2)], random_state=42, n_jobs=-1)\npredict_and_plot_confusion_matrix(train_x_onehotCoding, train_y,cv_x_onehotCoding,cv_y, clf)","58dee997":"# test_point_index = 10\nclf = RandomForestClassifier(n_estimators=alpha[int(best_alpha\/2)], criterion='gini', max_depth=max_depth[int(best_alpha%2)], random_state=42, n_jobs=-1)\nclf.fit(train_x_onehotCoding, train_y)\nsig_clf = CalibratedClassifierCV(clf, method=\"sigmoid\")\nsig_clf.fit(train_x_onehotCoding, train_y)\n\ntest_point_index = 1\nno_feature = 100\npredicted_cls = sig_clf.predict(test_x_onehotCoding[test_point_index])\nprint(\"Predicted Class :\", predicted_cls[0])\nprint(\"Predicted Class Probabilities:\", np.round(sig_clf.predict_proba(test_x_onehotCoding[test_point_index]),4))\nprint(\"Actual Class :\", test_y[test_point_index])\nindices = np.argsort(-clf.feature_importances_)\nprint(\"-\"*50)\nget_impfeature_names(indices[:no_feature], test_df['TEXT'].iloc[test_point_index],test_df['Gene'].iloc[test_point_index],test_df['Variation'].iloc[test_point_index], no_feature)","50a7a6d5":"alpha = [10,50,100,200,500,1000]\nmax_depth = [2,3,5,10]\ncv_log_error_array = []\nfor i in alpha:\n    for j in max_depth:\n        print(\"for n_estimators =\", i,\"and max depth = \", j)\n        clf = RandomForestClassifier(n_estimators=i, criterion='gini', max_depth=j, random_state=42, n_jobs=-1)\n        clf.fit(train_x_responseCoding, train_y)\n        sig_clf = CalibratedClassifierCV(clf, method=\"sigmoid\")\n        sig_clf.fit(train_x_responseCoding, train_y)\n        sig_clf_probs = sig_clf.predict_proba(cv_x_responseCoding)\n        cv_log_error_array.append(log_loss(cv_y, sig_clf_probs, labels=clf.classes_, eps=1e-15))\n        print(\"Log Loss :\",log_loss(cv_y, sig_clf_probs)) \n\n\nbest_alpha = np.argmin(cv_log_error_array)\nclf = RandomForestClassifier(n_estimators=alpha[int(best_alpha\/4)], criterion='gini', max_depth=max_depth[int(best_alpha%4)], random_state=42, n_jobs=-1)\nclf.fit(train_x_responseCoding, train_y)\nsig_clf = CalibratedClassifierCV(clf, method=\"sigmoid\")\nsig_clf.fit(train_x_responseCoding, train_y)\n\npredict_y = sig_clf.predict_proba(train_x_responseCoding)\nprint('For values of best alpha = ', alpha[int(best_alpha\/4)], \"The train log loss is:\",log_loss(y_train, predict_y, labels=clf.classes_, eps=1e-15))\npredict_y = sig_clf.predict_proba(cv_x_responseCoding)\nprint('For values of best alpha = ', alpha[int(best_alpha\/4)], \"The cross validation log loss is:\",log_loss(y_cv, predict_y, labels=clf.classes_, eps=1e-15))\npredict_y = sig_clf.predict_proba(test_x_responseCoding)\nprint('For values of best alpha = ', alpha[int(best_alpha\/4)], \"The test log loss is:\",log_loss(y_test, predict_y, labels=clf.classes_, eps=1e-15))","e456292c":"clf = RandomForestClassifier(max_depth=max_depth[int(best_alpha%4)], n_estimators=alpha[int(best_alpha\/4)], criterion='gini', max_features='auto',random_state=42)\npredict_and_plot_confusion_matrix(train_x_responseCoding, train_y,cv_x_responseCoding,cv_y, clf)","a05ff9cb":"clf = RandomForestClassifier(n_estimators=alpha[int(best_alpha\/4)], criterion='gini', max_depth=max_depth[int(best_alpha%4)], random_state=42, n_jobs=-1)\nclf.fit(train_x_responseCoding, train_y)\nsig_clf = CalibratedClassifierCV(clf, method=\"sigmoid\")\nsig_clf.fit(train_x_responseCoding, train_y)\n\n\ntest_point_index = 1\nno_feature = 27\npredicted_cls = sig_clf.predict(test_x_responseCoding[test_point_index].reshape(1,-1))\nprint(\"Predicted Class :\", predicted_cls[0])\nprint(\"Predicted Class Probabilities:\", np.round(sig_clf.predict_proba(test_x_responseCoding[test_point_index].reshape(1,-1)),4))\nprint(\"Actual Class :\", test_y[test_point_index])\nindices = np.argsort(-clf.feature_importances_)\nprint(\"-\"*50)\nfor i in indices:\n    if i<9:\n        print(\"Gene is important feature\")\n    elif i<18:\n        print(\"Variation is important feature\")\n    else:\n        print(\"Text is important feature\")","7fea9821":"clf1 = SGDClassifier(alpha=0.001, penalty='l2', loss='log', class_weight='balanced', random_state=0)\nclf1.fit(train_x_onehotCoding, train_y)\nsig_clf1 = CalibratedClassifierCV(clf1, method=\"sigmoid\")\n\nclf2 = SGDClassifier(alpha=1, penalty='l2', loss='hinge', class_weight='balanced', random_state=0)\nclf2.fit(train_x_onehotCoding, train_y)\nsig_clf2 = CalibratedClassifierCV(clf2, method=\"sigmoid\")\n\n\nclf3 = MultinomialNB(alpha=0.001)\nclf3.fit(train_x_onehotCoding, train_y)\nsig_clf3 = CalibratedClassifierCV(clf3, method=\"sigmoid\")\n\nsig_clf1.fit(train_x_onehotCoding, train_y)\nprint(\"Logistic Regression :  Log Loss: %0.2f\" % (log_loss(cv_y, sig_clf1.predict_proba(cv_x_onehotCoding))))\nsig_clf2.fit(train_x_onehotCoding, train_y)\nprint(\"Support vector machines : Log Loss: %0.2f\" % (log_loss(cv_y, sig_clf2.predict_proba(cv_x_onehotCoding))))\nsig_clf3.fit(train_x_onehotCoding, train_y)\nprint(\"Naive Bayes : Log Loss: %0.2f\" % (log_loss(cv_y, sig_clf3.predict_proba(cv_x_onehotCoding))))\nprint(\"-\"*50)\nalpha = [0.0001,0.001,0.01,0.1,1,10] \nbest_alpha = 999\nfor i in alpha:\n    lr = LogisticRegression(C=i)\n    sclf = StackingClassifier(classifiers=[sig_clf1, sig_clf2, sig_clf3], meta_classifier=lr, use_probas=True)\n    sclf.fit(train_x_onehotCoding, train_y)\n    print(\"Stacking Classifer : for the value of alpha: %f Log Loss: %0.3f\" % (i, log_loss(cv_y, sclf.predict_proba(cv_x_onehotCoding))))\n    log_error =log_loss(cv_y, sclf.predict_proba(cv_x_onehotCoding))\n    if best_alpha > log_error:\n        best_alpha = log_error","24f08416":"lr = LogisticRegression(C=0.1)\nsclf = StackingClassifier(classifiers=[sig_clf1, sig_clf2, sig_clf3], meta_classifier=lr, use_probas=True)\nsclf.fit(train_x_onehotCoding, train_y)\n\nlog_error = log_loss(train_y, sclf.predict_proba(train_x_onehotCoding))\nprint(\"Log loss (train) on the stacking classifier :\",log_error)\n\nlog_error = log_loss(cv_y, sclf.predict_proba(cv_x_onehotCoding))\nprint(\"Log loss (CV) on the stacking classifier :\",log_error)\n\nlog_error = log_loss(test_y, sclf.predict_proba(test_x_onehotCoding))\nprint(\"Log loss (test) on the stacking classifier :\",log_error)\n\nprint(\"Number of missclassified point :\", np.count_nonzero((sclf.predict(test_x_onehotCoding)- test_y))\/test_y.shape[0])\nplot_confusion_matrix(test_y=test_y, predict_y=sclf.predict(test_x_onehotCoding))","a9d23f1c":"#Refer:http:\/\/scikit-learn.org\/stable\/modules\/generated\/sklearn.ensemble.VotingClassifier.html\nfrom sklearn.ensemble import VotingClassifier\nvclf = VotingClassifier(estimators=[('lr', sig_clf1), ('svc', sig_clf2), ('rf', sig_clf3)], voting='soft')\nvclf.fit(train_x_onehotCoding, train_y)\nprint(\"Log loss (train) on the VotingClassifier :\", log_loss(train_y, vclf.predict_proba(train_x_onehotCoding)))\nprint(\"Log loss (CV) on the VotingClassifier :\", log_loss(cv_y, vclf.predict_proba(cv_x_onehotCoding)))\nprint(\"Log loss (test) on the VotingClassifier :\", log_loss(test_y, vclf.predict_proba(test_x_onehotCoding)))\nprint(\"Number of missclassified point :\", np.count_nonzero((vclf.predict(test_x_onehotCoding)- test_y))\/test_y.shape[0])\nplot_confusion_matrix(test_y=test_y, predict_y=vclf.predict(test_x_onehotCoding))","3b5264f5":"## Exploring and reading the datafiles","617194d1":"**Checking on train, validation, and test datasets ditribution**","ad3cf5eb":"Ok, now we understood the problem statement. Let's work on the solution. \n\n***Note*** I highly recomend you to attempt the solution on your own first. After that come back and enjoy our solution. \n\nWe have huge amount of text data. So, we need to pre process it. So lets write a function for the same.","fa641331":"From the graph - Top 50 Gene attributes make almost 75% of all data","d7baa1e9":"# Random Forest Classifier","76788c79":"## Evaluating Variation column\nVariation is also a categorical variable so we have to deal in same way like we have done for ***Gene*** column. We will again get the one hot encoder and response enoding variable for variation column.","75c20433":"**One hot encoder of genes classification**","f5563bd0":"Awesome, so all missing values are gone now.\n\n## Creating Training, Test and Validation data\n\nBefore we split the data into taining, test and validation data set. We want to ensure that all spaces in Gene and Variation column to be replaced by _.","48ea0ee2":"# Maximum voting Classifier","3648c16d":"This is descrete data so it is ***classification*** problem and since there are multiple descrete output possible so we can call it ***Multi class*** classification problem","446dbbd2":"Looking at another item","6d7948d1":"# Linear Support Vector Machines","fe25914b":"## Course content ends here!\nHere on is my personal playground","0a2ab567":"<h3>This kernel (notebook) is for learning pourposes<\/h3>\n<strong>While this row is here this kernel is yet not complete and frequently changing :D<\/strong><br \/>\nIt is done following \"Machine Learning Projects A-Z  Kaggle and Real World Pro\" course and most credits are given to the course author and other contributors<br \/>\n It has changes from the original course code and may also contain significant changes<br \/>\n Some of comments may slightly change from the results because the notes were made on a different run<br \/>\n Author: Ani Verzivolli<br \/>\n Credits: https:\/\/www.udemy.com\/course\/machine-learning-projects-kaggle-and-real-world-pro\/\n ","8ed1c856":"Notes from some different runs:<br \/>\nNone of top 100 and 2 of top 500 top features on this particular missclassified point<br \/>\nNone of top 100 and 18 of top 500 top features on this particular missclassified point<br \/>\nNone of top 200 and 7 of top 500 top features on this particular missclassified point\nNone of top 100 seems constent confusion (logically)","93b811d3":"## Evaluating Variation column\nVariation is also a categorical variable so we have to deal in same way like we have done for Gene column. We will again get the one hot encoder and response enoding variable for variation column.","d990813a":"There is very low overlapping.\nThe low overlapping is the main reason for error increase from training set to test and cross-validation set\nThis feature may be considered to be dropped","7f2e87c6":"<strong>Exploring the datasets<\/strong><br \/>\n**data_variants**","dda83f22":"The index value ranging from 0 to 8. Each value should be increased by 1.","ce399436":"Even though we knew its column names which we defined ourselfs, we notice (from deeper exploration of datasets) that ID column is common and matches fro both datasets","22201f20":"May want to dense alpha values between 5 and 15 for a better alpha, but for the purpose of this kernel will take 11","9e1bdfae":"<strong>Testing query point and interpretability<\/strong>","76ee039a":"We will build model having only gene column with one hot encoder with simple model like Logistic regression. If log loss with only one column Gene comes out to be better than random model, than this feature is important.","708dad50":"** Visualizing for train class distrubution**","d6ba9515":"## Naive Bayes","a7af02b4":"We can see many rows with missing data. Now the question is what to do with this missing value. One way could be that we can drop these rows having missing values or we can do some imputation in it. Let's go with imputation only. But question is what to impute here","caf2d3f7":"data_text has hull values","3bf90457":"OVerlaping of treining set with cross-validation and test set is very high which is very good for our models","17cba151":"# K Nearest Neighbour Classification","e206ff34":"We need to convert these categorical variable to appropirate format which my machine learning algorithm will be able to take as an input.\n\nSo we have 2 techniques to deal with it.\n\n    ***One-hot encoding***\n    ***Response Encoding*** (Mean imputation)\n\nWe will use both of them to see which one work the best. So lets start encoding using one hot encoder<br \/>\nFor Response encoding we will add columns representing class values filled with values of probability of that class given GENE - i\n","28896a0f":"# Logistic Regression","e5f75e0c":"## Evaluating text column\ntext column is little different from other columns because it cointains many words in a single cell\nwe have already removed all stop words from our text data cells","6b951ec9":"## Building Machine Learning models","a0b486bb":"Precision matrix is same as confusion matrix put cells are expressed as percentages in the same column (values predicted as class Xi)\nCell 1,1 shows how many percent of points predicted as Class 1 are actualy Class 1","ea9e1691":"<strong>Interpretability of Naive Bayes<\/strong>","7696338c":"There is very high difference on error on the training set with errors in cross-validation and test set","edf24e70":"Can think of workaround when there are not alot of important features present<br \/>\nMay come back later to this","854bea72":"Mathematical description of the dataset","ddedc107":"Combining all 3 features together","d7a7afb5":"**Recall matrix**","558004e9":"## Data prepration for Machine Learning models","1938f3d5":"recall matrix is same as confusion matrix but values are expressed as percentage in row direction\nmeaning each cell represents how percent of class i are predicted as class j","89a854c1":"<p>\n    Some data explanation <br>\n    <ul>\n        <li><b>ID : <\/b>row id used to link the mutation to the clinical evidence<\/li>\n        <li><b>Gene : <\/b>the gene where this genetic mutation is located <\/li>\n        <li><b>Variation : <\/b>the aminoacid change for this mutations <\/li>\n        <li><b>Class :<\/b> class value 1-9, this genetic mutation has been classified on<p><strong>This is be our result data<\/strong><\/p><\/li>\n    <\/ul>","b4cc9897":"## RF with Response Coding","298d7886":"<strong>Data preparation<\/strong>","73b8d041":"The diagonal of confusion matrix gives the correctly predicted values (values with class 1 predicted as class 1 for the first cell of example)","f35a4752":"# Stacking model","4110817c":"Now lets check how many values are overlapping between train, test or between CV and train","1286bad8":"<strong>Logistic regression without balancing<\/strong>","ed6af182":"**data_text**","d622add9":"There are no null-values in the data_varuiants","5fbd6b59":"**Precision matrix**","e61a0752":"## Building a Random model - WORST MODEL","9c97da98":"## Evaluating Gene Column\n\nNow we will look at each independent column to make sure its relavent for my target variable but the question is, how? Let's understand with our first column Gene which is categorial in nature.\n\nSo, lets explore column **Gene** and lets look at its distribution. ","bdaa0969":"<strong>logistic regression with ballancing of classes<\/strong>","a9aa7199":"Response encoding adds a number of classes equal to number of classes (posible results)","cc51a581":"<strong>Logistic regression interpreability<\/strong>","b706110b":"** Response Encoding of genes classification**<br \/>\nCode is as given in the course (i do not fully understand Response Encoding yet). Course link given in description at the begining of this notebook","f1e21a1c":"From precision and recall matrix diagonal values show correctly predicted values<br \/>\nChecking these matrixes we can also see between which classes is confusion happening","0597954e":"May have to check comparing with a Naive Bayes builded using only text data as input","7ede283b":"***Important note*** : This is medical related problem so correct results are very important. Error can be really costly here so we would like to have result  for each class in terms of Probablity. We might not be much bothered about time taken by ML algorithm as far as it is reasonable. \n\nWe also want our model to be highly interpritable because a medical practitionar want to also give proper reasonining on why ML algorithm is predicting any class. \n\nWe will evaluate our model using Confution matrix and Multi class log-loss","41edf82f":"**Confusion Matrix**"}}