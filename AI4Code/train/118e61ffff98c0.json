{"cell_type":{"a3e5070c":"code","71c75747":"code","81aa1328":"code","8e45e2c8":"code","f11fa03d":"code","0c5b83da":"code","62daac3f":"code","b72776cd":"code","62e1552d":"code","1de9e469":"code","a92efb25":"code","e77f0ba3":"code","b012cf62":"code","af2e790a":"code","4e71592c":"code","4682d30b":"code","5a9d8ecb":"code","bcb7be98":"code","07ac68e6":"code","654f7bb9":"code","bd79081a":"code","aea1ae70":"code","c12550ac":"code","965c4b25":"code","6c788a40":"code","e53f0f17":"markdown","f3b41275":"markdown","5a2341a9":"markdown"},"source":{"a3e5070c":"import numpy as np\nimport matplotlib.pyplot as plt\nimport matplotlib.dates as mdates\nimport pandas as pd\nfrom datetime import datetime\nfrom datetime import timedelta\nfrom dateutil.tz import tzlocal\n%matplotlib inline","71c75747":"world_poppercap = 7700000000 \/ 1000000\nus_poppercap = 329877505 \/ 1000000\nla_poppercap = 4648794 \/ 1000000\n\nticks = 10  #number of X ticks\n","81aa1328":"def weekofyear(date):\n    \"\"\"\n    Convert date to week of year for plotting weekly data\n    Intended use for pandas.dataframe.map\n    Need to be done before dropping yeah from date\n    \"\"\"\n    dt = datetime.strptime(date, '%Y-%m-%d')\n    week = int(dt.strftime('%U'))\n    \n    #adjust for 2021\n    if dt.year > 2020:\n        week += 52\n    \n    return week\n\n\ndef rollingavg(y, days = 7):\n    y = np.array(y)\n    \n    output = np.zeros((y.shape[0] * days), dtype=np.float64).reshape((y.shape[0],days))\n        \n    for idx in range(days,y.shape[0]):\n        output[idx] = y[idx-days:idx]\n    \n    return np.nanmean(output,axis=1)\n    \ndef newstats(df):\n    \"\"\"\n        Changes daily totals to new cases and new deaths and adds them to dateframe\n    \"\"\"\n    #changing daily totals to new cases\n    newcases = np.zeros(df.shape[0], dtype=np.int32)\n    newdeaths = np.zeros(df.shape[0], dtype=np.int32)\n    deathscolumn = df.columns.get_loc('deaths')\n    casescolumn = df.columns.get_loc('cases')\n\n    newcases[0] = df.iloc[0,casescolumn]\n    newdeaths[0] = df.iloc[0,deathscolumn]\n\n\n    for idx in df.index[1:]:\n        newcases[idx] = df.iloc[idx,casescolumn] - df.iloc[idx-1,casescolumn]\n        newdeaths[idx] = df.iloc[idx,deathscolumn] - df.iloc[idx-1,deathscolumn]\n\n    df['NewCases'] = newcases\n    df['NewDeaths'] = newdeaths\n    df['NewCasesRollAvg'] = rollingavg(newcases)\n    df['NewDeathsRollAvg'] = rollingavg(newdeaths)\n\ndef drawindexofCDCdataloss(df,ax, color=\"magenta\", label=\"CDC Loses Ctrl\"):\n    pass\n    \ndef getyTicks(df, columns, yticks=8):\n    \"\"\"\n        Gets yTicks and returns labels\n    \"\"\"\n    dfmax = np.max(df[columns])\n    items_per_tick = dfmax \/ yticks\n    out_yticks = np.arange(0,dfmax,items_per_tick)\n    #axs[0].set_yticks(la_yticks)\n    out_ticklabels = []\n    for i in out_yticks:\n        if i > 1000000:\n            out_ticklabels.append(\"{0:,.3g}M\".format(i\/1000000.))\n        elif i > 10000:\n            out_ticklabels.append(\"{0:,.3g}K\".format(i\/1000.0))\n        else:\n            out_ticklabels.append(\"{0:,.0f}\".format(i))\n\n    return (out_yticks, out_ticklabels)\n    \n#This is to mark the dataset problem mentioned above\n\ndef LACFline(df,ax):\n    \"\"\"\n        Adds a line for data adjustment to LA data on 6\/19 mentioned above.  nytimes issues 377\n        This has become less relavent and so isn't being used\n    \"\"\"\n    \n    idx = df[df['date']=='06-19'].index.values[0]\n    line = ax.axvline(idx,ymin=0,ymax=1,color='r',label=\"LA Data Adjust\", zorder=-100)\n    \n    return line\n\ndef holidays(df,ax):\n    \"\"\"\n        Adds lines for major holiday\n        \n    \"\"\"\n    holidays_list = [\n        ('2020-03-25','Memorial Day'),\n        ('2020-07-04', '4th of July'),\n        ('2020-04-12','Easter'),\n        ('2020-09-07','Labor Day'),\n        ('2020-11-27','Thanksgiving'),\n        ('2021-01-01','New Years')\n    ]\n    \n    label = \"Holiday\"\n    for h in holidays_list:\n        #circling back to this\n        #line = ax.axvline(df[df['date']==h[0]].index.values[0],ymin=0,ymax=1,color='pink',label=label, zorder=-100)\n        #label = None\n        pass\n    \n    #return line\n    return None\n    \ndef ladhdatamax(ax):\n    \"\"\"\n        Adds a line where the LaDH data stops\n    \"\"\"\n    return ax.axvline(orleans_df.index[-1]+1, color='red', label='End LaDH dataset', alpha=0.5)\n","8e45e2c8":"#state_df = pd.read_csv('.\/us-states.csv')\n#state_df = pd.read_csv('.\/covid-19-data\/us-states.csv')  #moved nytimes data to submodule\nstate_df = pd.read_csv('..\/input\/nytimes-covid19-dataset\/us-states.csv')\n\nla_df = state_df[state_df['state'] == 'Louisiana']\nla_df = la_df.sort_values(['date'], ascending=True)\n\n#week of year\nla_df['week'] = la_df['date'].map(weekofyear)  #maybe this will be used again later\n\n#little bit of a year 2000 problem here\n#shorten date  \n#la_df['date'] = la_df['date'].map(lambda x: x[5:])\n\nla_df['cases_ravg'] = rollingavg(la_df['cases'])\nla_df['deaths_ravg'] = rollingavg(la_df['deaths'])\n\nla_df.index = np.arange(la_df.shape[0])\nnewstats(la_df)\n\nla_df['NewCasesPerCapita'] = la_df['NewCases'] \/ la_poppercap\nla_df['NewDeathsPerCapita'] = la_df['NewDeaths'] \/ la_poppercap\n\nla_df['NewCasesPerCapita_ravg'] = rollingavg(la_df['NewCasesPerCapita'])\nla_df['NewDeathsPerCapita_ravg'] = rollingavg(la_df['NewDeathsPerCapita'])\n\nla_items_pertick = la_df.shape[0] \/ ticks\nla_ticks = np.append(np.arange(0,la_df.shape[0], la_items_pertick), [la_df.shape[0]-1])\nla_items_pertick += 1\n\n\nla_df.tail(2)\n","f11fa03d":"#us_df = pd.read_csv('.\/covid-19-data\/us.csv')  \nus_df = pd.read_csv('..\/input\/nytimescovid19datasetus\/us.csv')  \nus_df = us_df.sort_values('date')\nus_df[us_df['date'] == '2020-03-09']\n\n#slice to match up with Louisiana data for better comparison\nus_df = us_df.iloc[48:,:]\n\n#week of year\nus_df['week'] = us_df['date'].map(weekofyear)  #maybe this will be used again later\n\n#little bit of a year 2000 problem ghere\n#shorten date\n#us_df['date'] = us_df['date'].map(lambda x: x[5:])\n\nus_df['cases_ravg'] = rollingavg(us_df['cases'])\nus_df['deaths_ravg'] = rollingavg(us_df['deaths'])\n\nus_df.index = np.arange(us_df.shape[0])\nnewstats(us_df)\n\nus_df['NewCasesPerCapita'] = us_df['NewCases'] \/ us_poppercap\nus_df['NewDeathsPerCapita'] = us_df['NewDeaths'] \/ us_poppercap\n\nus_df['NewCasesPerCapita_ravg'] = rollingavg(us_df['NewCasesPerCapita'])\nus_df['NewDeathsPerCapita_ravg'] = rollingavg(us_df['NewDeathsPerCapita'])\n\nus_items_pertick = us_df.shape[0] \/ ticks\nus_ticks = np.append(np.arange(0,us_df.shape[0], us_items_pertick),[us_df.shape[0]-1])\nus_items_pertick += 1\n\n#used to set xlim to lign up graphs\nxdatalen = us_df.index.shape[0]\nus_df.tail(2)","0c5b83da":"columns = ['date','new_cases','new_deaths','total_cases','total_deaths']\nnewcolumns = ['date','NewCases','NewDeaths','cases','deaths']  #set the columns to match the other dataframes\n\n#world_df = pd.read_csv('.\/owid-coviddata\/public\/data\/owid-covid-data.csv')\nworld_df = pd.read_csv('..\/input\/owidcoviddataset\/owid-covid-data.csv')\nworld_df = world_df[world_df['iso_code'] == 'OWID_WRL'][columns]\nworld_df.columns = newcolumns\n\nworld_df = world_df.sort_values('date')\nworld_df.index = np.arange(world_df.shape[0])\nworld_df = world_df.iloc[world_df.index[world_df['date'] == '2020-03-09'][0]:,:]\n\nworld_df['week'] = world_df['date'].map(weekofyear)\n#world_df['date'] = world_df['date'].map(lambda x: x[5:])\n\nworld_df['NewCasesRollAvg'] = rollingavg(world_df['NewCases'])\nworld_df['NewDeathsRollAvg'] = rollingavg(world_df['NewDeaths'])\n\nworld_df['cases_ravg'] = rollingavg(world_df['cases'])\nworld_df['deaths_ravg'] = rollingavg(world_df['deaths'])\n\nworld_df.index = np.arange(world_df.shape[0])\n\nworld_df['NewCasesPerCapita'] = world_df['NewCases'] \/ world_poppercap\nworld_df['NewDeathsPerCapita'] = world_df['NewDeaths'] \/ world_poppercap\n\nworld_df['NewCasesPerCapita_ravg'] = rollingavg(world_df['NewCasesPerCapita'])\nworld_df['NewDeathsPerCapita_ravg'] = rollingavg(world_df['NewDeathsPerCapita'])\n\nworld_items_pertick = world_df.shape[0] \/ ticks\nworld_items_per_tick = world_df.shape[0] \/ ticks\nworld_ticks = np.append(np.arange(0,world_df.shape[0], world_items_pertick),[world_df.shape[0]-1])\n\n\nworld_df.tail(2)","62daac3f":"#df = pd.read_excel(\".\/LaDeptHealth\/LA_COVID_TESTBYDAY_PARISH_PUBLICUSE.xlsx\")\ndf = pd.read_csv(\"..\/input\/ladepthealthcoviddatacsv\/LA_COVID_TESTBYDAY_PARISH_PUBLICUSE.csv\")\n\n#fix for CSV version\ndf['Lab Collection Date'] = pd.to_datetime( df['Lab Collection Date'])\ndf.head()","b72776cd":"parishes = sorted(df['Parish'].unique())\nprint(parishes)","62e1552d":"mindate = df['Lab Collection Date'].min()\nprint(mindate)","1de9e469":"maxdate = df['Lab Collection Date'].max()\nprint(maxdate)","a92efb25":"columns = []\ndates_raw = np.sort(df['Lab Collection Date'].unique())\n\ndates = sorted(np.datetime_as_string( dates_raw, unit='D'))\nfor date in dates_raw:\n    columns.append(date)\n\nrows_cases = []\nrows_tests = []\n\n\nfor parish in parishes:\n    parish_mask = df['Parish'] == parish\n    \n    casecount = []\n    testcount = []\n\n    for date in dates_raw:\n        \n        data = df[np.logical_and( parish_mask,  df['Lab Collection Date']==date)]\n        casecount.append(data['Daily Case Count'].iloc[0])\n        testcount.append(data['Daily Test Count'].iloc[0])\n    \n    \n    \n    assert len(casecount) == len(columns), \"Outdata_cases len=%d, but columns len=%d\" % (len(outdata),len(columns))\n    assert len(testcount) == len(columns), \"Outdata_tests len=%d, but columns len=%d\" % (len(outdata),len(columns))\n    rows_cases.append(casecount)\n    rows_tests.append(testcount)\n\n\n#rows_cases.append(outdata_cases)\n#rows_tests.append(outdata_tests)\n    \ndf_parish_cases = pd.DataFrame(rows_cases, columns=columns, index=parishes)\ndf_parish_tests = pd.DataFrame(rows_tests, columns=columns, index=parishes)\ndf_parish_cases.loc['Louisiana'] = df_parish_cases.sum()\ndf_parish_tests.loc['Louisiana'] = df_parish_tests.sum()\n\n\n    ","e77f0ba3":"df_parish_cases.tail(2)","b012cf62":"df_parish_tests.tail(2)","af2e790a":"df_population = pd.read_csv(\"..\/input\/us-pop\/co-est2019-alldata.csv\" ,encoding='latin1')\ndf_population = df_population[df_population['STNAME'] == 'Louisiana']\ndf_population.index = df_population['CTYNAME'].str.replace(\" Parish\",\"\")\norleans_population = df_population.loc['Orleans']['POPESTIMATE2019']\nla_population = df_population.loc['Louisiana']['POPESTIMATE2019']\nebr_population = df_population.loc['East Baton Rouge']['POPESTIMATE2019']","4e71592c":"def processparishdf(parish):\n    populationpercap = df_population.loc[parish]['POPESTIMATE2019'] \/ 1000000\n    \n    df = pd.DataFrame( df_parish_cases.columns, columns=['date'])\n    df['date'] = df['date'].map(lambda x: \"%4d-%.2d-%.2d\" % (x.year,x.month,x.day))\n    df['week'] = df['date'].map(weekofyear)\n    #df['date'] = df['date'].map(lambda x: x[5:])\n    \n    df['NewCases'] = df_parish_cases.loc[parish].values\n    df['NewCasesRollAvg'] = rollingavg(df['NewCases'])\n    \n    cases = []\n    cases_num = 0\n    for row in df.iterrows():\n        cases_num += row[1][2]\n        cases.append(cases_num)\n    \n    df['cases'] = cases\n    df['cases_ravg'] = rollingavg(df['cases'])\n    \n    df['NewCasesPerCapita'] = df['NewCases'] \/ populationpercap\n    df['NewCasesPerCapita_ravg'] = rollingavg(df['NewCasesPerCapita'])\n    df = df.iloc[8:,:]\n    \n    df.index = np.arange(df.shape[0])\n    \n    items_pertick = df.shape[0] \/ ticks\n    out_ticks = np.append(np.arange(0,df.shape[0], items_pertick), [df.shape[0]-1])\n    items_pertick += 1\n    \n    return (df, out_ticks)\n    \n(orleans_df, orleans_ticks) = processparishdf('Orleans')\n(ebr_df, ebr_ticks) = processparishdf('East Baton Rouge')\n(la2_df,la2_ticks) = processparishdf('Louisiana')\n(tamm_df,tamm_ticks) = processparishdf('St. Tammany')\n    \norleans_df.tail(2)","4682d30b":"#Figure 9\n\nfig,axs = plt.subplots(figsize=(15,10))\n\n#axs.plot(la_df['date'],la_df['NewCases'], label='NyTimes Data')\n#axs.plot(la2_df['date'],la2_df['NewCases'], label='LaDH Data')\n\naxs.plot(la_df['date'],la_df['NewCasesRollAvg'], label='NyTimes Data ravg')\naxs.plot(la2_df['date'],la2_df['NewCasesRollAvg'], label='LaDH Data ravg')\n\nidx = 0\nfor label in axs.xaxis.get_ticklabels():\n    \n    if idx % 10 != 0:\n        label.set_visible(False)\n        \n    idx = idx+1\n\naxs.tick_params(axis='x', rotation=90)\naxs.set_title(\"NyTimes vs La Dept of Health New Case data from Louisiana Rolling Avg (for comparing data sources)\")\n\nladhdatamax(axs)\naxs.legend()\nfig.savefig(\"fig9.jpg\")","5a9d8ecb":"#Figure 1\nfig, axs = plt.subplots(6, figsize=(15,19))\n\ndef plotme(df, ax,xticks,addeaths=True):\n    \n\n\n    ax.bar(df.index,df['NewCases'], color='y', label='New Cases', width=1.0)\n    ax.plot(df.index,df['NewCasesRollAvg'], color = 'b',label='New Cases 7DRollAvg')\n    \n    if addeaths:\n        ax.bar(df.index,df['NewDeaths'], color='r', label='New Deaths', width=1.0)\n        ax.plot(df.index,df['NewDeathsRollAvg'], color = 'g', label='New Deaths 7DRollAvg')\n\n    ax.set_xticks(us_ticks)\n    ax.set_xticklabels(us_df.iloc[us_ticks,0])\n    xmarg,_ = ax.margins()\n    ax.set_xlim(xmax=xdatalen + (xdatalen * xmarg))\n    \n    drawindexofCDCdataloss(df,ax)\n    holidays(df,ax)\n    ladhdatamax(ax)    \n    yticks,yticklabels = getyTicks(df,'NewCases')\n    ax.set_yticks(yticks)        \n    ax.set_yticklabels(yticklabels)\n    ax.set_ylabel(\"New Cases\")\n    \n    #la data adjustment causes negative values on one day\n    #this information is no longer relavent in the context of the larger data set\n    ax.set_ylim(bottom=0) \n    \n    \naxs[0].title.set_text('Orleans')\nplotme(orleans_df,axs[0],orleans_ticks, addeaths=False)\n\naxs[1].title.set_text(\"East Baton Rouge\")\nplotme(ebr_df,axs[1],ebr_ticks,addeaths=False)\n\naxs[2].title.set_text(\"St. Tammany\")\nplotme(tamm_df,axs[2],tamm_ticks,addeaths=False)\n\naxs[3].title.set_text('Louisiana (nytimes data)')\n#adjustments for LA data issue 4\/19\n#LACFline(la_df,axs[3])\naxs[3].plot(la2_df.index,la2_df['NewCasesRollAvg'], linestyle='--',color = 'b',label='New Cases 7DRollAvg (LaDH)')\nplotme(la_df,axs[3],la_ticks, addeaths=False)\n\naxs[4].title.set_text('US')\nplotme(us_df,axs[4],us_ticks, addeaths=False)\n\naxs[5].title.set_text('World')\nplotme(world_df,axs[5],world_ticks, addeaths=False)\n\n#add lines for summer highs\nsummstart = pd.to_datetime('2020-05-01')\nsummend = pd.to_datetime('2020-09-01')\nfor curr_df, ax in [(orleans_df, axs[0]),(ebr_df,axs[1]),(tamm_df,axs[2]),(la_df,axs[3]),(us_df,axs[4])]:\n    dts = pd.to_datetime(curr_df['date'])\n    summermask = (dts > summstart) & ( dts < summend)\n    summerhigh = curr_df['NewCasesRollAvg'][summermask].max()\n    ax.axhline(summerhigh, label=\"Aprox. Summer high (%.0d)\" % summerhigh, color='magenta', alpha=0.4)\n \nfor ax in fig.axes:\n    ax.legend()\n    \nfig.suptitle(\"New Daily Cases\/Deaths Covid-19 La vs US\")\nfig.tight_layout()\nplt.savefig(\"fig1.jpg\")\n","bcb7be98":"#Figure 2\nfig, axs = plt.subplots(6, figsize=(15,19))\n\ndef plotme(df,ax, xticks, addeaths = True):\n    ax.bar(df.index,df['cases'], color='y', label='Cases', width=1.0)\n    ax.plot(df.index,df['cases_ravg'], color = 'b',label='Cases RollAvg')\n    \n    if addeaths:\n        ax.bar(df.index,df['deaths'], color='r', label='Deaths', width=1.0)\n        ax.plot(df.index,df['deaths_ravg'], color = 'g', label='Deaths RollAvg')\n        \n    ax.set_xticks(us_ticks)\n    ax.set_xticklabels(us_df.iloc[us_ticks,0])\n    xmarg,_ = ax.margins()\n    ax.set_xlim(xmax=xdatalen + (xdatalen * xmarg))\n    \n    drawindexofCDCdataloss(df,ax)\n    holidays(df,ax)\n    ladhdatamax(ax)\n    ax.legend(ncol=2)\n    \n\n    yticks,yticklabels = getyTicks(df,'cases')\n    ax.set_yticks(yticks)        \n    ax.set_yticklabels(yticklabels)\n    ax.set_ylabel(\"Cases\/Deaths\")\n\naxs[0].title.set_text(\"Orleans\")\nplotme(orleans_df,axs[0],orleans_ticks, addeaths=False)\n\naxs[1].title.set_text(\"East Baton Rouge\")\nplotme(ebr_df,axs[1],ebr_ticks, addeaths=False)\n\naxs[2].title.set_text(\"St. Tammany\")\nplotme(tamm_df,axs[2],tamm_ticks,addeaths=False)\n\naxs[3].title.set_text('Louisiana (nytimes data)')\naxs[3].plot(la2_df.index,la2_df['cases_ravg'], linestyle='--', color = 'b',label='Cases RollAvg (LaDH)')\nplotme(la_df,axs[3],la_ticks,addeaths=True)\n#adjustments for LA data issue 4\/19\n#LACFline(la_df,axs[3])\n\naxs[4].title.set_text('US')\nplotme(us_df,axs[4],us_ticks)\n\naxs[5].title.set_text(\"World\")\nplotme(world_df,axs[5],world_ticks)\n\nfig.suptitle(\"Covid-19 Orleans\/EBR\/La\/US vs World Totals\")\nfig.tight_layout()\nplt.savefig(\"fig2.jpg\")","07ac68e6":"#Figure 3\n\nfig, axs = plt.subplots(3, figsize=(15,10))\n\ndef plotme(df,ax,xticks):\n\n    ax.bar(df.index,df['NewDeaths'], color = 'y', label=\"New Deaths\", width=1.0)\n    ax.plot(df.index,df['NewDeathsRollAvg'], color='g', label=\"New Deaths 7DRollAvg\")\n    \n    ax.set_xticks(us_ticks)\n    ax.set_xticklabels(us_df.iloc[us_ticks,0])\n    xmarg,_ = ax.margins()\n    ax.set_xlim(xmax=xdatalen + (xdatalen * xmarg))\n    \n    drawindexofCDCdataloss(df,ax)\n    holidays(df,ax)\n    #ladhdatamax(ax)  #no ladh data on this one\n    ax.legend()\n\n    yticks,yticklabels = getyTicks(df,'NewDeaths')\n    ax.set_yticks(yticks)        \n    ax.set_yticklabels(yticklabels)\n    ax.set_ylabel(\"New Deaths\")\n\naxs[0].title.set_text('Louisiana Deaths (nytimes)')\n\n#adjustments for LA data issue 4\/19\n#LACFline(la_df,axs[0])\n\nplotme(la_df,axs[0],la_ticks)\n\n\naxs[1].title.set_text('US Deaths')\nplotme(us_df,axs[1],us_ticks)\n\naxs[2].title.set_text('World Deaths')\nplotme(world_df,axs[2],world_ticks)\n\n#add lines for summer highs\nsummstart = pd.to_datetime('2020-06-22')\nsummend = pd.to_datetime('2020-09-01')\nfor curr_df, ax in [(la_df,axs[0]),(us_df,axs[1])]:\n    dts = pd.to_datetime(curr_df['date'])\n    summermask = (dts > summstart) & ( dts < summend)\n    summerhigh = curr_df['NewDeathsRollAvg'][summermask].max()\n    ax.axhline(summerhigh, label=\"Aprox. Summer high (%.0d)\" % summerhigh, color='magenta', alpha=0.4)\n \nfor ax in fig.axes:\n    ax.legend()\n\nfig.suptitle(\"Covid-19 La vs US New Deaths Daily\")\nfig.tight_layout()\nplt.savefig(\"fig3.jpg\")","654f7bb9":"#Figure 4\n\n#problem with the legend need to work on this\ndef plotme(df,ax,xticks, column, label, color = 'r', linestyle='-'):\n    lines = []\n    \n    lines.append(ax.plot(df.index,df[column],color=color, label=label, linestyle=linestyle))\n    ax.set_xticks(xticks)\n    ax.set_xticklabels(df.iloc[xticks,0])\n    \n    \n    drawindexofCDCdataloss(df,ax)\n    lines.append(holidays(df,ax)) \n    \n    return lines\n    \n    \nfig, axs = plt.subplots(2, figsize=(15,17))\n\nax1lines = []\nax2lines = []\n\nax1lines.append( plotme(orleans_df,axs[0],orleans_ticks,'NewCasesPerCapita_ravg',\"Orleans New Cases\", color = 'r')[0][0])\nax1lines.append( plotme(ebr_df,axs[0],ebr_ticks,'NewCasesPerCapita_ravg',\"Baton Rouge New Cases\", color = 'orange')[0][0])\nax1lines.append( plotme(tamm_df,axs[0],orleans_ticks,'NewCasesPerCapita_ravg',\"St. Tammany New Cases\", color = 'purple')[0][0])\nax1lines.append( plotme(la2_df,axs[0],la2_ticks, 'NewCasesPerCapita_ravg',\"La New Cases (LaDH)\", color='b')[0][0])\n\nax1lines.append( plotme(la_df,axs[0],la_ticks, 'NewCasesPerCapita_ravg',\"La New Cases (nytimes)\", color='b', linestyle='--')[0][0])\n\nax1lines.append( plotme(us_df,axs[0],us_ticks, 'NewCasesPerCapita_ravg','US New Cases', color='g')[0][0])\nax1lines.append( plotme(world_df,axs[0],world_ticks,'NewCasesPerCapita_ravg',\"World New Cases\", color='m')[0][0])\n\nax1lines.append(ladhdatamax(axs[0]))\n\nax2lines.append( plotme(la_df,axs[1],la_ticks, 'NewDeathsPerCapita_ravg',\"La New Deaths (nytimes)\", color='b')[0][0])\nax2lines.append( plotme(us_df,axs[1],us_ticks, 'NewDeathsPerCapita_ravg','US New Deaths', color='g')[0][0])\nax2lines.append( plotme(world_df,axs[1],world_ticks,'NewDeathsPerCapita_ravg',\"World New Daths\", color='m')[0][0])\n\n#ax2lines.append(ladhdatamax(axs[1]))  #no ladh data\n\n\n#for col,ax in zip([('NewCasesPerCapita_ravg','New Cases'),('NewDeathsPerCapita_ravg', 'New Deaths')],((axs[0],ax1lines),(axs[1],ax2lines))):\n    \n#    ax[1].append( plotme(la_df,ax[0],la_ticks, col[0],\"La %s\" % col[1], color='b')[0][0])\n#    ax[1].append( plotme(us_df,ax[0],us_ticks, col[0],'US %s' % col[1], color='g')[0][0])\n#    ax[1].append( plotme(world_df,ax[0],world_ticks,col[0],\"World %s\" % col[1], color='m')[0][0])\n    \naxs[0].legend(handles=ax1lines,ncol=2)\naxs[1].legend(handles=ax2lines)\n    \n    \n\naxs[0].title.set_text('Orleans, EBR, Louisiana vs US vs World New Cases per 1million 7 day rolling avg')\naxs[1].title.set_text('Louisiana vs US vs World New Deaths per 1million 7 day rolling avg')\n\naxs[0].set_ylabel(\"New Cases per 1 million people\")\naxs[1].set_ylabel(\"New Deaths per 1 million people\")\n\nfig.suptitle(\"Covid-19 La vs US New Cases\/Deaths per capita 7 day rolling avg \")\nfig.tight_layout()\nplt.savefig(\"fig4.jpg\")","bd79081a":"#Figure 5\n\n#problem with the legend need to work on this\ndef plotme(df,ax,xticks, column, label, color = 'r'):\n    lines = []\n    \n    lines.append(ax.plot(df.index,df[column],color=color, label=label))\n    ax.set_xticks(xticks)\n    ax.set_xticklabels(df.iloc[xticks,0])\n    \n    drawindexofCDCdataloss(df,ax)\n    lines.append(holidays(df,ax))\n    #lines.append(LACFline(df,ax))   #I'm not sure the data for deaths and cases was effected by the adjustment\n    \n    yticks,yticklabels = getyTicks(df,column)\n    ax.set_yticks(yticks)        \n    ax.set_yticklabels(yticklabels)\n    ax.set_ylabel(label,color=color)\n    ax.tick_params(axis='y',color=color,labelcolor=color)\n    \n    return lines\n    \n    \nfig, axs = plt.subplots(4, figsize=(15,15))\n\nidx = 0\nfor col, label in zip(['NewCasesRollAvg','NewDeathsRollAvg'], ['New Cases','New Deaths']):\n    for compare_place, label_place in zip([(us_df,us_ticks),(world_df,world_ticks)], ['US','World']):\n        line1 = plotme(la_df,axs[idx],la_ticks, col,\"La %s\" % label, color='b')\n        axsY2 = axs[idx].twinx()\n        line2 = plotme(compare_place[0],axsY2,compare_place[1], col,\"%s %s\" % (label_place, label), color='g')\n        axs[idx].legend(handles=[line1[0][0],line2[0][0]],loc='upper left')\n        axs[idx].title.set_text(\"Louisiana (nytimes data) vs %s %s 7 day rolling avg\"%(label_place,label))\n        idx += 1\n    \nfig.suptitle(\"Covid-19 Louisiana vs * New Cases 7 day rolling avg Compared (separatly scaled)\")\nfig.tight_layout()\nplt.savefig(\"fig5.jpg\")","aea1ae70":"#Figure 5\n\n#problem with the legend need to work on this\ndef plotme(df,ax,xticks, column, label, color = 'r'):\n    lines = []\n    \n    lines.append(ax.plot(df.index,df[column],color=color, label=label))\n    ax.set_xticks(xticks)\n    ax.set_xticklabels(df.iloc[xticks,0])\n    \n    drawindexofCDCdataloss(df,ax)\n    lines.append(holidays(df,ax))\n    #lines.append(LACFline(df,ax))   #I'm not sure the data for deaths and cases was effected by the adjustment\n    lines.append(ladhdatamax(ax))\n    \n    yticks,yticklabels = getyTicks(df,column)\n    ax.set_yticks(yticks)        \n    ax.set_yticklabels(yticklabels)\n    ax.set_ylabel(label,color=color)\n    ax.tick_params(axis='y',color=color,labelcolor=color)\n    ax.set_xlim(xmax=xdatalen)\n    \n    return lines\n    \n    \nfig, axs = plt.subplots(5, figsize=(15,17))\n\nidx = 0\ncol = 'NewCasesRollAvg'\nlabel = 'New Cases'\nfor compare_place, label_place in zip([(ebr_df,ebr_ticks,'orange'),(tamm_df,tamm_ticks,'purple'), (la2_df,la2_ticks,'b'), (us_df,us_ticks,'g'),(world_df,world_ticks,'m')], ['Baton Rouge', 'St. Tammany','Louisiana (LaDH datasource)','US','World']):\n    line1 = plotme(orleans_df,axs[idx],orleans_ticks, col,\"Orleans %s\" % label, color='r')\n    axsY2 = axs[idx].twinx()\n    line2 = plotme(compare_place[0],axsY2,compare_place[1], col,\"%s %s\" % (label_place, label), color=compare_place[2])\n    axs[idx].legend(handles=[line1[0][0],line2[0][0]])\n    axs[idx].title.set_text(\"New Orleans vs %s %s 7 day rolling avg\"%(label_place,label))\n    idx += 1\n\nfig.suptitle(\"Covid-19 La vs US vs World New Cases\/Deaths 7 day rolling avg Compared (separatly scaled, (New Orleans\/EBR uses collection date)\")\nfig.tight_layout()\nplt.savefig(\"fig8.jpg\")","c12550ac":"weeks = []\nday = mindate\ndeltaweek = timedelta(days=7)\nenddate = datetime.now() - deltaweek\nwhile day <= enddate:\n    weeks.append(day)\n    day = day + deltaweek\n\n      \ndef getWeeklyDF(df):\n    \n    df.index = df['date'].map( lambda x: pd.Timestamp(x))\n    dfmaxdate = pd.to_datetime(df.index.max())\n    enddate = dfmaxdate - timedelta(days=7)\n    \n    newdf = pd.DataFrame(index = weeks)\n    \n    columns = ['NewCases', 'NewDeaths']\n    for column in columns:\n        if column in df.columns:\n        \n            totals = []\n            deltaweek = timedelta(days=7)\n            for week in weeks:\n                if week <= enddate:\n                    mask = (df.index < week + deltaweek) & (df.index >= week)\n                    totals.append(np.nansum(df[column][mask]))\n                else:\n                    totals.append(np.nan)\n                \n            newdf[column] = pd.Series(totals,index=weeks)\n            newcol = column + 'RollAvg'\n            newdf[newcol] = rollingavg(newdf[column],3)\n            newdf[newcol] = np.where(newdf[column] > 0, newdf[newcol], np.nan)\n\n    return newdf\n\norleans_df_weekly = getWeeklyDF(orleans_df) #pd.DataFrame(orleans_df.groupby('week')['NewCases'].sum())\nebr_df_weekly = getWeeklyDF(ebr_df) #pd.DataFrame(ebr_df.groupby('week')['NewCases'].sum())\ntamm_df_weekly = getWeeklyDF(tamm_df)#pd.DataFrame(tamm_df.groupby('week')['NewCases'].sum())\nla2_df_weekly = getWeeklyDF(la2_df)#pd.DataFrame(la2_df.groupby('week')['NewCases'].sum())\nla_df_weekly = getWeeklyDF(la_df)#la_df.groupby('week')[['NewCases','NewDeaths']].sum()\nus_df_weekly = getWeeklyDF(us_df)#.groupby('week')[['NewCases','NewDeaths']].sum()\nworld_df_weekly = getWeeklyDF(world_df)#.groupby('week')[['NewCases','NewDeaths']].sum()\n\nprint(weeks[-1])\nworld_df_weekly.tail()\n#us_df_weekly.tail(2)","965c4b25":"#Figure 6\n\ndef plotme(df,ax, title = \"Graphs\", color = 'y', linecolor = 'r'):\n    ax.bar(df.index,df['NewCases'], color=color, label='weekly new cases', width=6.5)\n    ax.plot(df.index,df['NewCasesRollAvg'], color=linecolor, label='3 week rolling avg')\n    \n    ax.set_title(title)\n    ax.set_xticks(df.index)\n    ax.xaxis.set_major_formatter(mdates.DateFormatter('%b %d'))\n    ax.tick_params(axis='x',rotation=90)\n    ax.set_xlim((weeks[0]-timedelta(days=4),weeks[-1] + timedelta(days=5)))\n    ax.legend()\n      \nfig, axs = plt.subplots(6, figsize=(15,18))\nfig.suptitle(\"Weekly New Cases\")\n\nplotme(orleans_df_weekly,axs[0], title=\"Orleans\")\nplotme(ebr_df_weekly,axs[1],title=\"Baton Rough\")\nplotme(tamm_df_weekly,axs[2],title=\"St. Tammany\")\n\n\naxs[3].plot(la2_df_weekly.index, la2_df_weekly['NewCasesRollAvg'], linestyle='--', color='r', label='3 week rolling avg (LaDH)')\nplotme(la_df_weekly,axs[3], title=\"Louisiana (nytimes data)\")\nplotme(us_df_weekly,axs[4], title=\"US\")\nplotme(world_df_weekly,axs[5],title=\"World\")\n\nfig.tight_layout()\n\nplt.savefig(\"fig6.jpg\")","6c788a40":"#Figure 7\n\ndef plotme(df,ax, title = \"Graphs\", color = 'y', linecolor='r'):\n    ax.bar(df.index,df['NewDeaths'], color=color, label='weekly new deaths', width=6.5)\n    ax.plot(df.index,df['NewDeathsRollAvg'], color=linecolor, label='3 week rolling avg')\n    \n    ax.set_title(title)\n    ax.set_xticks(df.index)\n    ax.xaxis.set_major_formatter(mdates.DateFormatter('%b %d'))\n    ax.tick_params(axis='x',rotation=90)\n    ax.set_xlim((weeks[0]-timedelta(days=4),weeks[-1] + timedelta(days=5)))\n    ax.legend()\n    \nfig, axs = plt.subplots(3, figsize=(15,12))\nfig.suptitle(\"Weekly New Deaths\")\n\nplotme(la_df_weekly,axs[0], title=\"Louisiana (nytimes data)\")\nplotme(us_df_weekly,axs[1], title=\"US\")\nplotme(world_df_weekly,axs[2],title=\"World\")\n\nfig.tight_layout()\n\nplt.savefig(\"fig7.jpg\")","e53f0f17":"### [Full Project on Github](https:\/\/github.com\/GarysCorner\/Covid19-LaCompared)\n\n**Some information below is for the [full project](https:\/\/github.com\/GarysCorner\/Covid19-LaCompared)**\n\n# Updated: April  1 2021  10:25 AM CDT\n\n# Covid-19 Louisiana Data Compared\n\n**This project is NOT a scientific study!!!  Conclusions should not be drawn from the information contained here.  This is mostly an exercise in data processing and visualization.  For information you can draw conclusion on, please visit the [CDC's Covid19 page](https:\/\/www.cdc.gov\/coronavirus\/2019-ncov\/index.html)**\n\n**This project is a replacement for the garyscorner for of nytimes\/covid-19-data which will no longer be updated**\n\n[Watch the Maps video on Youtube](https:\/\/youtu.be\/RiEHIBp87I8)\n\n[Watch the Mask video on Youtube](https:\/\/youtu.be\/4GHW_iREiJE)\n\n[View Main Project](https:\/\/github.com\/GarysCorner\/Covid19-LaCompared\/blob\/master\/CovidData.ipynb)\n\n[View Maps and Maps Video Project](https:\/\/github.com\/GarysCorner\/Covid19-LaCompared\/blob\/master\/CovidMaps.ipynb)\n\n[View Mask Use Graph Project](https:\/\/github.com\/GarysCorner\/Covid19-LaCompared\/blob\/master\/MaskUseOverview.ipynb)\n\n[View Video Project](https:\/\/github.com\/GarysCorner\/Covid19-LaCompared\/blob\/master\/MaskUseRatesVideo.ipynb)\n\n## Description\nThis is a simple project aimed at visualizing and comparing Covid-19 data from Louisiana, a state which is very important to us (people from Louisiana).  The main analysis\/visualization is in the file CovidData.py, which pulls data from one or more submodules or locations.  Other python notebooks (MaskUseRates.ipynb\/MaskUseOverview.ipynb) contained in this project are not updated daily.\n\n## Datasets\n\n* **[Louisiana Department of Health](https:\/\/ldh.la.gov\/Coronavirus\/)** - Data on new cases by parish as well as testing numbers.  This data comes out slower then the other data sources (every two weeksish) and so graphs using parish data, are behind graphics using NYTimes\/OWID data.  Please look at the dates on the graphics carefully before making any comparisons between different data sets.\n* **[nytimes\/covid-19-data](https:\/\/github.com\/nytimes\/covid-19-data)** - Data on new cases and new deaths in the US and Louisiana were taken from this dataset.  Nytimes data was used in most places for Louisiana, but in some places an reduction of the LaDH data was used to provide better comparison with parish data.\n* **[Our World in Data](https:\/\/github.com\/owid\/covid-19-data\/)** - World Covid-19 data and [world population](https:\/\/ourworldindata.org\/world-population-growth)\n* **[U.S. Census Bureau](https:\/\/www.census.gov)** - Population of the US and of Louisiana were taken from the Census Bureau and used for per capita comparisons.  Additional data on [FIPS codes](https:\/\/www.census.gov\/2010census\/xls\/fips_codes_website.xls) by parish where taken from U.S. Census Bureau.\n* **[U.S. Geological Survey](https:\/\/pubs.usgs.gov\/of\/1998\/of98-805\/html\/gismeta.htm)** - Shape files for inlane water.\n\nDatasets taken from LaDH are dated by sample collection date, but NyTimes and OWID data is by reported date, so there is an offset in the dates between New Orleans\/EBR and other datasets.  Please make note of this when drawing any conclusions.","f3b41275":"## Limitation\n\nThis is not a scientific study please don't treat it like one.  This is a data visualization and processing project.  Please keep that in mind.\n\nThe analysis here is done with data from outside sources such as the [Louisiana Department of Health](https:\/\/ldh.la.gov\/) and the [NYTimes](https:\/\/github.com\/nytimes\/covid-19-data\/).  The sources have no affiliation with this project, and the projects maintainer makes no claims about the accuracy of the sources.  Essentially if you have an issue with what you see in the data, you should probably take it up with the upsteam data souces.\n\nPlease excuse spelling, I hammered this out pretty quick, and if you are reading this it means I didn't follow through on circling back to fix it :(\n\n## Liabilities\nThis project should be interesting and nothing more, it is not intended for research purposed or policy decisions.  No decisions, assumptions, accusations, etc stemming from the analysis here should be made, and anyone who does so will do so at their own risk.  Any liability resulting from the use of this analysis is solely the end user's responsibility. \n\n","5a2341a9":"![image.png](attachment:image.png)\n\nThere was an issue with one of the days in louisiana which caused a negative result in the newcases for 6\/19\n\nhttps:\/\/github.com\/nytimes\/covid-19-data\/issues\/377"}}