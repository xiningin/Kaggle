{"cell_type":{"2c9f3e85":"code","bdc7bf83":"code","47a67795":"code","37cd38c9":"code","dc6c8baa":"code","5a5b45c6":"code","826b2db1":"code","b94d7543":"code","e8b8d03a":"code","2d3256b0":"code","b8b4920e":"code","3dae3e90":"code","71bfa59e":"code","c60f5399":"code","baa95a2a":"markdown","16becac6":"markdown","9a367afd":"markdown","6d0402e6":"markdown","de184fe8":"markdown","90a66586":"markdown","aa4bac5e":"markdown","065812f1":"markdown","e31d1d78":"markdown","e089871b":"markdown","2f2e847a":"markdown"},"source":{"2c9f3e85":"# Erzeugung einer Variable und anschlie\u00dfnde Abfrage des Datentyps\nvariable = 42\nprint(type(variable))\n\n# Typkonvertierung: int -> float\nvariable = float(variable)\nprint(type(variable))","bdc7bf83":"zahl = 2.72\nprint(zahl, type(zahl))\n\nzahl = int(zahl)\nprint(zahl, type(zahl))\n\nzahl = bool(zahl)\nprint(zahl, type(zahl))\n\nzahl = float(zahl)\nprint(zahl, type(zahl))","47a67795":"datenbank = [\n    {\"age\":33, \"salary\": 35000, \"sex\":\"w\"},\n    {\"age\":25, \"salary\": 26000, \"sex\":\"m\"},\n    {\"age\":21, \"salary\": None, \"sex\":\"w\"},\n    {\"age\":35, \"salary\": 34000, \"sex\":\"m\"},\n    {\"age\":41, \"salary\": 43000, \"sex\":\"w\"}\n]","37cd38c9":"# Um Auf Wert zugreifen zu k\u00f6nnen, benutzen wir den \"Zugriffsoperator\"\ndatenbank[-1]['salary']","dc6c8baa":"# Ein kleines Programm um den Datensatz nach dem Alter zu Filtern (nur Menschen die \u00e4lter sind als 25)\nfor kunde in datenbank:\n    if kunde[\"age\"] > 25:\n        print(kunde)","5a5b45c6":"\"\"\"\nEin kleines Programm, um alle Personen unserer Datenbank anzeigen zu lassen, \ndie unvollst\u00e4ndige Angaben gemacht haben\"\"\"\n\nfor kunde in datenbank:\n    if None in kunde.values():  # dict.values() zeigt NUR die im Dictionary enthaltenen Werte an\n        print(kunde)","826b2db1":"# Funktionen und Methoden\n\n# Beispiel: Ergebnisse eines Tests mit 5 Teilnehmer*innen\nresults =  [2, 1, \"3\", 2]\nprint(results)","b94d7543":"# Problem 1: Eine Note wurde noch nicht in die Liste gegeben. Wir erg\u00e4nzen die Liste um den Wert 5.\n\nresults =  [2, 1, \"3\", 2]\nresults.append(5)\nprint(results)","e8b8d03a":"# Problem 2: Wir wollen die Liste auf ihre Vollst\u00e4ndigkeit Pr\u00fcfen. Daf\u00fcr nutzen wir len() um die L\u00e4nge zu ermitteln\nresults =  [2, 1, \"3\", 2, 5]\n\nlaenge = len(results)\nprint(laenge)","2d3256b0":"# Problem 3: Datentypen aufr\u00e4umen\nresults =  [2, 1, \"3\", 2, 5]\n\nfor i in range(laenge):               # Da wir eine Stelle der Liste \u00fcberschreiben wollen, iterieren wir direkt \u00fcber den Index \n    if isinstance(results[i], str):   # Die Funktion isinstance(\"wert\", \"typ\") Fragt, ob ein Wert zu einem gewissen Datentyp geh\u00f6rt. Output: True oder False\n        results[i] = int(results[i])  # Wenn ein String gegeben ist, wird eine Typkonvertierung vorgenommen\n        \nprint(results)","b8b4920e":"# Problem 4: Mittelwert berechnen\nresults = [2, 1, 3, 2, 5]\n\n# Mit der Funktion sum() l\u00e4sst sich einfach die Summe bestimmen\nsumme = sum(results)\nprint(summe\/laenge)","3dae3e90":"from random import randint\n\nwuerfel = randint(1, 6)\nprint(wuerfel)","71bfa59e":"# Zusatzaufgabe\n\nBestimme den Mittelwert deiner Liste","c60f5399":"liste = [2.7654195140002127, 2.6360629952455965, 2.3519786024695133, 3.3204244749015435, 2.7004251215445025, 1.7863907369175647, 2.6253129227400644, 2.8892304326198635, 2.4358900186959422, 2.4540005982902064, 2.0257700228948035, 2.0981858199993275, 2.3111710972338972, 2.5652065616002977, 2.4683343348655806, 2.6238552225820966, 2.4953127742992915, 2.435800166731548, 2.020265052626991, 2.2169061727422594, 3.295040092885287, 2.698843050274864, 1.8951775641529396, 2.806201278660757, 2.4901587718002456, 2.0771886928266796, 2.8444453736518245, 2.0035669093760404, 2.2123088966580853, 2.5033991528391866, 2.7742768195505225, 2.4766739504225703, 2.10694973072974, 2.158204051964268, 2.7879942890092195, 2.0789996037686937, 2.429539663371832, 2.1137195100467583, 2.427255135585847, 2.930174083509128, 2.706037360678834, 2.753833363830004, 2.347546715753651, 3.016308474767132, 2.615021262559031, 2.464543748361637, 1.8308382407418335, 2.9474281113373424, 3.1699146863051038, 2.9776441233907285, 3.0168438547541605, 2.136676421763241, 2.124239224150846, 2.071626092407238, 1.8005835430987607, 2.2580399215821316, 2.502451947357013, 2.0969778238468098, 2.704355867088698, 2.160390248428144, 2.16759901283257, 2.9956637081963837, 2.708941574141792, 2.188032351332944, 2.8602872297751256, 2.867565629053123, 2.568060346736654, 2.5137085346831802, 2.139906820746545, 2.0444684210808246, 2.771513327044323, 2.6613038708259196, 2.4887018026536083, 2.237105631439797, 2.7410359632229535, 2.66759291534105, 2.9611117374664033, 3.0160769528405935, 2.036078921022056, 2.3761843338038213, 2.715730024048058, 2.3349323154812165, 2.4582216420131346, 2.729016108330505, 2.681233981842955, 2.285686665975881, 2.1046278522461264, 2.8575346552187675, 2.4560532826705788, 2.882614815873426, 2.66225446607747, 3.013781136510169, 2.61176498475017, 2.613707852679415, 2.8966169119772567, 2.7939279732986737, 2.607250954178873, 2.01088479064598, 2.6206248241093535, 2.1593394258010434]\n","baa95a2a":"# Einf\u00fchrung","16becac6":"Bibliotheken sind sozusagen Zusatzprogramme (andere py-Programme) die wir einfach in unseren Code importieren k\u00f6nnen. Einige Bibliotheken wie beispielsweise **random** geh\u00f6ren zur Grundausstattung von Python. \n\nMit **random** erhalten wir Zugriff auf n\u00fctzliche Funktionen, um Zufallszahlen zu generieren. Das untere Beispiel demonstriert, wie sich die Funktion **randint** aus dem Programm **random** importieren l\u00e4sst.\n\n**randint()** bietet die M\u00f6glichkeit einen zuf\u00e4lligen Integerwert zu erzeugen. Als Argumente der Funktion \u00fcbergeben wir eine untere und eine obere Grenze. Folgendes Beispiel simuliert einen klassischen 6-seitigen W\u00fcrfel.","9a367afd":"Ein Auge auf die Datentypen zu haben ist von entscheidender Bedeutung. \n\nDer Datentyp entscheidet, welche Operationen m\u00f6glich sind oder welche Methoden zur Verf\u00fcgung stehen.\n\nDatentypen lassen sich ebenfalls in andere Datentypen umwandeln.","6d0402e6":"# Zusatzaufgabe\n\nBestimme den Mittelwert deiner Liste","de184fe8":"# Aufgabe\n\nSchreibe ein Programm, dass dir eine Liste erstellt mit 100 zuf\u00e4lligen Zahlen (zwischen 1 und 5).\n\nDaf\u00fcr brauchst du\n* Eine leere Liste\n* Eine **for**-Schleife\n* Die Funktion **randint()** von der Bibliothek **random**\n* Die Methode **append()** um die Werte in die Liste zu schreiben","90a66586":"# Hausaufgabe","aa4bac5e":"**WICHTIG** Listen sind nach numerischem Index sortiert, w\u00e4hrend Werte die in Dictionaries abgelegt wurden, \u00fcber ein Schl\u00fcssel zu erreichen sind.","065812f1":"Finde den Mittelwert und die Standardabweichung der gegebenen Liste","e31d1d78":"Als n\u00e4chstes w\u00fcrden wir gerne den Mittelwert bestimmen. Daf\u00fcr brauchen wir einerseits die Summe aller Noten als auch die L\u00e4nge der Liste (Diese haben wir ja im vorherigen Schritt bestimmt).\n\nW\u00fcrden wir die Liste in derzeitiger Form an die Funktion **sum()** \u00fcbergeben, w\u00fcrde eine Fehlermeldung erscheinen, denn wir haben in unserer Datenstruktur neben 4 Integer einen String (\"3\").\n\nWir m\u00fcssen also vorher die Liste auf einen Datentypen reduzieren.","e089871b":"# Datenstrukturen\n\nUnten siehst du einen kleinen erfundenen Datensatz. Hierbei handelt es sich um eine Liste und die einzelnen Elemente dieser Liste sind Dictionaries mit jeweils 3 Schl\u00fcssel-Wert-Paaren","2f2e847a":"Bei der Typkonvertierung kann es passieren, dass Informationen verloren gehen.\nHier im Beispiel haben wir nach mehrmaliger Konvertierung nicht mehr die M\u00f6glichkeit unseren Ursprungswert von 2.72 zu rekonstruieren.\n\nManchmal mag es jedoch gew\u00fcnscht sein, Informationen zu reduzieren.\n"}}