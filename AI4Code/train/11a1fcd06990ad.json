{"cell_type":{"5de00a15":"code","73983409":"code","95d41787":"code","4b037250":"code","2eb1ad6b":"code","b3adbd25":"code","2895442a":"code","a088acd3":"code","f6e29c83":"code","943cc41a":"code","b3162ddf":"code","e2c232c2":"code","07512229":"code","1b965145":"code","f9dabe78":"code","1ddfba6b":"code","bfb0097c":"code","c2304eff":"code","3da6c9bc":"code","1e46143b":"code","181b4c73":"code","29085e19":"code","696b6cc3":"code","2badca03":"code","64ec60c0":"code","c5dddd6d":"code","ced98a37":"code","1d930737":"code","9af5923a":"code","076cdd1d":"code","f6bccb7c":"code","460947e6":"code","a6af3d32":"code","405ba6bb":"code","76a31b39":"code","d52e157e":"code","4ad596bb":"code","0769f671":"code","2e556cd4":"code","c333e4e4":"code","a4c6d8de":"markdown","0b583d0f":"markdown","8fb1876a":"markdown","40918491":"markdown","748559f6":"markdown","bba16b91":"markdown","392708e7":"markdown","de5c0d16":"markdown","582cf012":"markdown","62abc298":"markdown","44f6f126":"markdown","64491880":"markdown","931e206d":"markdown","05de8cdf":"markdown","3256ba33":"markdown","3064d7a1":"markdown","94293155":"markdown","2ba8213b":"markdown","b34eaa60":"markdown","cf04b80e":"markdown","23d3f0a3":"markdown","1f917d95":"markdown","fb446898":"markdown","4883ca4c":"markdown","97959bdb":"markdown","2a611d1c":"markdown","5cd79a4a":"markdown","37457d55":"markdown","58b6838f":"markdown","02f70605":"markdown","ff236221":"markdown","fdbe9a0e":"markdown","d8dc2afc":"markdown","1a47211f":"markdown","42e6effb":"markdown","4c89d1ce":"markdown","3f7f116e":"markdown","36aeb99c":"markdown","f847feb8":"markdown","2c579901":"markdown","4b726479":"markdown","aff90999":"markdown","6c269059":"markdown","a33da7de":"markdown","d58146c0":"markdown","4309e2b8":"markdown","047a6358":"markdown"},"source":{"5de00a15":"!pip install pycountry_convert \nimport pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport folium\nimport pycountry_convert as pc\nimport warnings\nfrom datetime import datetime, timedelta, date\nwarnings.filterwarnings('ignore')\n\n%matplotlib inline","73983409":"# importing covid19 confirmed cases datatset\ndf_confirmed = pd.read_csv('https:\/\/raw.githubusercontent.com\/CSSEGISandData\/COVID-19\/master\/csse_covid_19_data\/csse_covid_19_time_series\/time_series_covid19_confirmed_global.csv')\n\n# renaming some columns\ndf_confirmed = df_confirmed.rename(columns={\"Country\/Region\": \"Country\", \"Province\/State\": \"State\"})\ndf_confirmed.head()","95d41787":"# importing covid19 deaths datatset\ndf_deaths = pd.read_csv('https:\/\/raw.githubusercontent.com\/CSSEGISandData\/COVID-19\/master\/csse_covid_19_data\/csse_covid_19_time_series\/time_series_covid19_deaths_global.csv')\n\n# renaming some columns\ndf_deaths = df_deaths.rename(columns={\"Country\/Region\": \"Country\", \"Province\/State\": \"State\"})\ndf_deaths.head()","4b037250":"# importing covid19 datatset\ndf_covid19 = pd.read_csv(\"https:\/\/raw.githubusercontent.com\/CSSEGISandData\/COVID-19\/web-data\/data\/cases_country.csv\")\n\n# dropping columns that are not required\ndf_covid19.drop(['Last_Update', 'People_Tested', 'People_Hospitalized', 'UID', 'ISO3'], inplace=True, axis=1)\n\n# changing column name\ndf_covid19 = df_covid19.rename(columns={\"Country_Region\": \"Country\"})\ndf_covid19.head()","2eb1ad6b":"# Breif info about the dataset\ndf_covid19.info()","b3adbd25":"# Changing the conuntry names as required by pycountry_convert library\ndf_confirmed.loc[df_confirmed['Country'] == \"US\", \"Country\"] = \"USA\"\ndf_deaths.loc[df_deaths['Country'] == \"US\", \"Country\"] = \"USA\"\ndf_covid19.loc[df_covid19['Country'] == \"US\", \"Country\"] = \"USA\"\n\n\ndf_confirmed.loc[df_confirmed['Country'] == 'Korea, South', \"Country\"] = 'South Korea'\ndf_deaths.loc[df_deaths['Country'] == 'Korea, South', \"Country\"] = 'South Korea'\ndf_covid19.loc[df_covid19['Country'] == \"Korea, South\", \"Country\"] = \"South Korea\"\n\ndf_confirmed.loc[df_confirmed['Country'] == 'Taiwan*', \"Country\"] = 'Taiwan'\ndf_deaths.loc[df_deaths['Country'] == 'Taiwan*', \"Country\"] = 'Taiwan'\ndf_covid19.loc[df_covid19['Country'] == \"Taiwan*\", \"Country\"] = \"Taiwan\"\n\ndf_confirmed.loc[df_confirmed['Country'] == 'Congo (Kinshasa)', \"Country\"] = 'Democratic Republic of the Congo'\ndf_deaths.loc[df_deaths['Country'] == 'Congo (Kinshasa)', \"Country\"] = 'Democratic Republic of the Congo'\ndf_covid19.loc[df_covid19['Country'] == \"Congo (Kinshasa)\", \"Country\"] = \"Democratic Republic of the Congo\"\n\ndf_confirmed.loc[df_confirmed['Country'] == \"Cote d'Ivoire\", \"Country\"] = \"C\u00f4te d'Ivoire\"\ndf_deaths.loc[df_deaths['Country'] == \"Cote d'Ivoire\", \"Country\"] = \"C\u00f4te d'Ivoire\"\ndf_covid19.loc[df_covid19['Country'] == \"Cote d'Ivoire\", \"Country\"] = \"C\u00f4te d'Ivoire\"\n\ndf_confirmed.loc[df_confirmed['Country'] == \"Reunion\", \"Country\"] = \"R\u00e9union\"\ndf_deaths.loc[df_deaths['Country'] == \"Reunion\", \"Country\"] = \"R\u00e9union\"\ndf_covid19.loc[df_covid19['Country'] == \"Reunion\", \"Country\"] = \"R\u00e9union\"\n\ndf_confirmed.loc[df_confirmed['Country'] == 'Congo (Brazzaville)', \"Country\"] = 'Republic of the Congo'\ndf_deaths.loc[df_deaths['Country'] == 'Congo (Brazzaville)', \"Country\"] = 'Republic of the Congo'\ndf_covid19.loc[df_covid19['Country'] == \"Congo (Brazzaville)\", \"Country\"] = \"Republic of the Congo\"\n\ndf_confirmed.loc[df_confirmed['Country'] == 'Bahamas, The', \"Country\"] = 'Bahamas'\ndf_deaths.loc[df_deaths['Country'] == 'Bahamas, The', \"Country\"] = 'Bahamas'\ndf_covid19.loc[df_covid19['Country'] == \"Bahamas, The\", \"Country\"] = \"Bahamas\"\n\ndf_confirmed.loc[df_confirmed['Country'] == 'Gambia, The', \"Country\"] = 'Gambia'\ndf_deaths.loc[df_deaths['Country'] == 'Gambia, The', \"Country\"] = 'Gambia'\ndf_covid19.loc[df_covid19['Country'] == \"Gambia, The\", \"Country\"] = \"Gambia\"","2895442a":"continents = {\n    'NA': 'North America',\n    'SA': 'South America', \n    'AS': 'Asia',\n    'OC': 'Australia',\n    'AF': 'Africa',\n    'EU' : 'Europe',\n    'OTH' : 'Others'\n}","a088acd3":"# function to find the continent of the country supplied\ndef country_to_continent(country):\n    try:\n        continent_code = pc.country_alpha2_to_continent_code(pc.country_name_to_country_alpha2(country))\n    except:\n        continent_code = 'OTH'\n    return continents[continent_code]","f6e29c83":"# extracting the countries columns from all the 3 datasets \ncountries_covid19 = np.asarray(df_covid19[\"Country\"])\ncountries_confirmed = np.asarray(df_confirmed[\"Country\"])\ncountries_deaths = np.asarray(df_deaths[\"Country\"])","943cc41a":"# applying the above function to all the 3 datasets to find the continents of the respective countries\ndf_covid19.insert(1,\"Continent\",  [country_to_continent(country) for country in countries_covid19])\ndf_confirmed.insert(1,\"Continent\",  [country_to_continent(country) for country in countries_confirmed])\ndf_deaths.insert(1,\"Continent\",  [country_to_continent(country) for country in countries_deaths])","b3162ddf":"df_global = df_covid19.drop(['Country', 'Continent', 'Lat', 'Long_', 'Incident_Rate', 'Mortality_Rate'], axis=1)","e2c232c2":"df_global_cases = pd.DataFrame(pd.to_numeric(df_global.sum()), dtype=np.float64).transpose()\ndf_global_cases['Mortality_Rate'] = np.round((df_global_cases[\"Deaths\"]\/df_global_cases[\"Confirmed\"])*100,2)\ndf_global_cases","07512229":"labels =  [df_global_cases.columns[i]+ \"\\n\" + str(int(df_global_cases.values[0][i])) for i in range(1,4)]\nvalues = [df_global_cases.values[0][i] for i in range(1,4)]\nplt.figure(figsize=(8,8))\nplt.pie(values, labels=labels, autopct='%1.2f%%', pctdistance=0.85, labeldistance=1.1, textprops = {'fontsize':12})\nmy_circle = plt.Circle( (0,0), 0.7, color='white')\np = plt.gcf()\np.gca().add_artist(my_circle)\nplt.text(0, 0, \"Total\\nConfirmed Cases \\n\"+str(int(df_global_cases.values[0][0])), horizontalalignment='center', verticalalignment='center', size=18)\nplt.show()","1b965145":"confirmed_cases = df_confirmed.drop(['Lat', 'Long', 'State', 'Country', 'Continent'], axis=1)\ncases = confirmed_cases.sum().tolist()\ncases = np.asarray(cases)\n\ndeath_cases = df_deaths.drop(['Lat', 'Long', 'State', 'Country', 'Continent'], axis=1)\ndeaths = death_cases.sum().tolist()\ndeaths = np.asarray(deaths)\n\ndates = confirmed_cases.columns\nd = [datetime.strptime(date,'%m\/%d\/%y').strftime(\"%d %b\") for date in dates]","f9dabe78":"plt.figure(figsize=(8,8))\nmarker_style_confirmed = dict(c=\"darkcyan\", linewidth=6, linestyle='-', marker='o', markersize=6, markerfacecolor='#ffffff')\nmarker_style_death = dict(c=\"crimson\", linewidth=6, linestyle='-', marker='o', markersize=6, markerfacecolor='#ffffff')\nplt.plot(d, cases, label = 'Confirmed', **marker_style_confirmed)\nplt.plot(d, deaths, label = 'Deaths', **marker_style_death)\nplt.fill_between(d, cases, color='darkcyan', alpha=0.3)\nplt.fill_between(d, deaths, color='crimson', alpha=0.3)\nplt.xlabel(\"Date\", fontsize = 15)\nplt.ylabel(\"No. of Cases\",fontsize = 15)\nplt.title(\"COVID Cases: WorldWide\", fontsize = 18)\nplt.legend(loc= \"best\", fontsize = 15)\nplt.grid(alpha=0.8)\nplt.xticks(list(np.arange(0,len(d),int(len(d)\/5))))\nplt.yticks(np.arange(0, max(cases), 10**(len(str(int(max(cases))))-1)))\nplt.show()","1ddfba6b":"daily_cases = np.nan_to_num(df_confirmed.sum()[5:].diff())\nf = plt.figure(figsize=(15,10))\ndate = np.arange(0,len(daily_cases))\nmarker_style = dict(linewidth=2, linestyle='-', marker='o',markersize=5)\nplt.plot(date, daily_cases\/1000,\"-.\",color=\"blue\",**marker_style)\n\n# Grid Settings\nplt.grid(lw = 1, ls = '-', c = \"0.85\", which = 'major')\nplt.grid(lw = 1, ls = '-', c = \"0.95\", which = 'minor')\n\n#Title\nplt.title(\"COVID-19 Daily Confirmed Cases - Worldwide\",{'fontsize':24})\n\n# Axis Label\nplt.xlabel(\"Days\",fontsize =18)\nplt.ylabel(\"Number of Daily New Cases (Thousand)\",fontsize =18)\n\nplt.show()","bfb0097c":"daily_deaths = np.nan_to_num(df_deaths.sum()[5:].diff())\nf = plt.figure(figsize=(15,10))\ndate = np.arange(0,len(daily_deaths))\nmarker_style = dict(linewidth=2, linestyle='-', marker='o',markersize=5)\nplt.plot(date, daily_deaths\/1000,\"-.\",color=\"red\",**marker_style)\n\n# Grid Settings\nplt.grid(lw = 1, ls = '-', c = \"0.85\", which = 'major')\nplt.grid(lw = 1, ls = '-', c = \"0.95\", which = 'minor')\n\n#Title\nplt.title(\"COVID-19 Daily Deaths - Worldwide\",{'fontsize':24})\n\n# Axis Label\nplt.xlabel(\"Days\",fontsize =18)\nplt.ylabel(\"Number of Daily Deaths (Thousand)\",fontsize =18)\n\nplt.show()","c2304eff":"df_continents = df_covid19.drop(['Country', 'Lat', 'Long_', 'Incident_Rate', 'Mortality_Rate'], axis=1)","3da6c9bc":"df_continents_cases = df_continents.groupby('Continent').sum()\ndf_continents_cases['Mortality_Rate'] = np.round((df_continents_cases[\"Deaths\"]\/df_continents_cases[\"Confirmed\"])*100,2)\ndf_continents_cases.drop(['Others'], inplace=True)\ndf_continents_cases","1e46143b":"labels = list(df_continents_cases.index)\nsizes = df_continents_cases['Confirmed'].values\nplt.figure(figsize=(8,8))\nplt.pie(sizes, labels=labels, autopct='%1.2f%%', pctdistance=0.85, labeldistance=1.1, textprops = {'fontsize':10.5})\nmy_circle = plt.Circle( (0,0), 0.7, color='white')\np = plt.gcf()\np.gca().add_artist(my_circle)\nplt.text(0, 0, \"Continent wise \\n Distribution of Cases\", horizontalalignment='center', verticalalignment='center', size=18)\nplt.show()","181b4c73":"df_confirmed_continents = df_confirmed.groupby('Continent').sum()\ndf_confirmed_continents = df_confirmed_continents[df_confirmed_continents.index!='Others']\ndf_confirmed_continents.drop(['Lat', 'Long'], inplace=True, axis=1)\n\ndf_deaths_continents = df_deaths.groupby('Continent').sum()\ndf_deaths_continents = df_deaths_continents[df_deaths_continents.index!='Others']\ndf_deaths_continents.drop(['Lat', 'Long'], inplace=True, axis=1)\n\ndates = df_confirmed_continents.columns\nd = [datetime.strptime(date,'%m\/%d\/%y').strftime(\"%d %b\") for date in dates]","29085e19":"marker_style_confirmed = dict(c=\"darkcyan\", linewidth=6, linestyle='-', marker='o', markersize=6, markerfacecolor='#ffffff')\nmarker_style_death = dict(c=\"crimson\", linewidth=6, linestyle='-', marker='o', markersize=6, markerfacecolor='#ffffff')\nfig, axes = plt.subplots(nrows=3, ncols=2, figsize=(15,15))\nplt.subplots_adjust(top = 1.2, bottom = 0.1)\ni=0\nfor rows in axes:\n    for ax1 in rows:\n        ax1.plot(d, df_confirmed_continents.iloc[i], label = 'Confirmed', **marker_style_confirmed)\n        ax1.plot(d, df_deaths_continents.iloc[i], label = 'Deaths', **marker_style_death)\n        ax1.fill_between(d, df_confirmed_continents.iloc[i], color='darkcyan', alpha=0.3)\n        ax1.fill_between(d, df_deaths_continents.iloc[i], color='crimson', alpha=0.3)\n        ax1.set_xlabel(\"Dates\", fontsize = 12)\n        ax1.set_ylabel(\"No. of Cases\",fontsize = 12)\n        ax1.set_title(\"COVID Cases: \"+df_deaths_continents.index[i], fontsize = 15)\n        ax1.legend(loc= \"best\", fontsize = 12)\n        ax1.grid(which='major', linewidth = 0.3)\n        ax1.set_xticks(list(np.arange(0,len(d),int(len(d)\/5))))\n        i+=1","696b6cc3":"daily_cases_continents = df_confirmed.groupby('Continent').sum().diff(axis=1).replace(np.nan,0)\ndaily_cases_continents = daily_cases_continents[daily_cases_continents.index!='Others']\nf = plt.figure(figsize=(20,12))\nax = f.add_subplot(111)\nfor i,continent in enumerate(daily_cases_continents.index):\n    t = daily_cases_continents.loc[daily_cases_continents.index == continent].values[0]\n    t = t[t>=0]\n    date = np.arange(0,len(t[:]))\n    plt.plot(date,t\/1000,'-o',label = continent,linewidth =2, markevery=[-1])\n\n# Grid Settings\nplt.grid(lw = 1, ls = '-', c = \"0.85\", which = 'major')\nplt.grid(lw = 1, ls = '-', c = \"0.95\", which = 'minor')\n\n#Title\nplt.title(\"COVID-19 Daily Confirmed Cases in Continents\",{'fontsize':24})\n\n# Axis Label\nplt.xlabel(\"Days\",fontsize =18)\nplt.ylabel(\"Number of Daily Confirmed Cases (Thousand)\",fontsize =18)\n\n# Legend\nplt.legend(fontsize=18)\n\nplt.show()","2badca03":"daily_deaths_continents = df_deaths.groupby('Continent').sum().diff(axis=1).replace(np.nan,0)\ndaily_deaths_continents = daily_deaths_continents[daily_deaths_continents.index!='Others']\nf = plt.figure(figsize=(20,12))\nax = f.add_subplot(111)\nfor i,continent in enumerate(daily_deaths_continents.index):\n    t = daily_deaths_continents.loc[daily_deaths_continents.index == continent].values[0]\n    t = t[t>=0]\n    date = np.arange(0,len(t[:]))\n    plt.plot(date,t\/1000,'-o',label = continent,linewidth =2, markevery=[-1])\n\n# Grid Settings\nplt.grid(lw = 1, ls = '-', c = \"0.85\", which = 'major')\nplt.grid(lw = 1, ls = '-', c = \"0.95\", which = 'minor')\n\n#Title\nplt.title(\"COVID-19 Daily Deaths in Continents\",{'fontsize':24})\n\n# Axis Label\nplt.xlabel(\"Days\",fontsize =18)\nplt.ylabel(\"Number of Daily Deaths (Thousand)\",fontsize =18)\n\n# Legend\nplt.legend(fontsize=18)\n\nplt.show()","64ec60c0":"df_continents_cases['Latitude'] = [6.426117205286786, 44.94789322476297, -25.734968546496344, 44.94789322476297, 56.51520886670177, -31.065922730080157]\ndf_continents_cases['Longitude'] = [18.2766152761759, 95.7503726784575, 134.489562782425, 28.2490403487619, -92.32043635079269, -60.7921128171538]\ndf_continents_cases.head()","c5dddd6d":"world_map = folium.Map(location=[10,0], tiles=\"cartodbpositron\", zoom_start=2, max_zoom=6, min_zoom=2)\nfor i in range(0, len(df_continents_cases)):\n    folium.Circle(\n        location=[df_continents_cases.iloc[i]['Latitude'], df_continents_cases.iloc[i]['Longitude']],\n        tooltip = \"<h5 style='text-align:center;font-weight: bold'>\"+df_continents_cases.index[i]+\"<\/h5>\"+\n                    \"<hr style='margin:10px;'>\"+\n                    \"<ul style='color: #444;list-style-type:circle;align-item:left;padding-left:20px;padding-right:20px'>\"+\n        \"<li>Active: \"+str(df_continents_cases['Active'][i])+\"<\/li>\"+\n        \"<li>Confirmed: \"+str(df_continents_cases['Confirmed'][i])+\"<\/li>\"+\n        \"<li>Deaths:   \"+str(df_continents_cases['Deaths'][i])+\"<\/li>\"+\n        \"<\/ul>\",\n        radius=(int((np.log(df_continents_cases['Confirmed'][i]+1.00001)))+0.2)*50000,\n        color='#ff6600',\n        fill_color='#ff8533',\n        fill=True).add_to(world_map)\nworld_map","ced98a37":"df_country = df_covid19.drop(['Continent', 'Lat', 'Long_', 'Incident_Rate', 'Mortality_Rate'], axis=1)\ndf_country.index = df_country[\"Country\"]\ndf_country.drop(['Country'], axis=1, inplace=True)\ndf_country.fillna(0,inplace=True)","1d930737":"df_country['Mortality_Rate'] = np.round((df_country[\"Deaths\"]\/df_country[\"Confirmed\"])*100,2)\ndf_country","9af5923a":"# function for plotting horizontal bar plot\ndef horizontal_barplot(x, y, title, xlabel, ylabel, color):\n    fig = plt.figure(figsize = (10,5))\n    fig.add_subplot(111)\n    plt.axes(axisbelow = True)\n    plt.barh(x.index[-10:], y.values[-10:], color = color)\n    plt.tick_params(size = 5, labelsize = 13)\n    plt.xlabel(xlabel, fontsize = 18)\n    plt.ylabel(ylabel,fontsize = 18)\n    plt.title(title,fontsize = 20)\n    plt.grid(alpha = 0.3)\n    plt.show()","076cdd1d":"horizontal_barplot(x = df_country.sort_values('Confirmed')[\"Confirmed\"], \n                   y = df_country.sort_values('Confirmed')[\"Confirmed\"], \n                   title = \"Top 10 Countries - Confirmed Cases\", \n                   xlabel = \"Confirmed Cases\", \n                   ylabel = \"Countries\", \n                   color = \"blue\")","f6bccb7c":"horizontal_barplot(x = df_country.sort_values('Active')[\"Active\"], \n                   y = df_country.sort_values('Active')[\"Active\"], \n                   title = \"Top 10 Countries - Active Cases\", \n                   xlabel = \"Active Cases\", \n                   ylabel = \"Countries\", \n                   color = \"orange\")","460947e6":"horizontal_barplot(x = df_country.sort_values('Recovered')[\"Recovered\"], \n                   y = df_country.sort_values('Recovered')[\"Recovered\"], \n                   title = \"Top 10 Countries - Recovered Cases\", \n                   xlabel = \"Recovered\", \n                   ylabel = \"Countries\", \n                   color = \"limegreen\")","a6af3d32":"horizontal_barplot(x = df_country.sort_values('Deaths')[\"Deaths\"], \n                   y = df_country.sort_values('Deaths')[\"Deaths\"], \n                   title = \"Top 10 Countries - Deaths\", \n                   xlabel = \"Deaths\", \n                   ylabel = \"Countries\", \n                   color = \"red\")","405ba6bb":"df_countries = df_covid19.drop(['Continent', 'Incident_Rate', 'Mortality_Rate'], axis=1)\ndf_countries.index = df_countries[\"Country\"]\ndf_countries.fillna(0,inplace=True)\ndf_countries.head()","76a31b39":"world_map = folium.Map(location=[10,0], tiles=\"cartodbpositron\", zoom_start=2, max_zoom=6, min_zoom=2)\nfor i in range(0, len(df_countries)):\n    folium.Circle(\n        location=[df_countries.iloc[i]['Lat'], df_countries.iloc[i]['Long_']],\n        tooltip = \"<h5 style='text-align:center;font-weight: bold'>\"+df_countries.index[i]+\"<\/h5>\"+\n                    \"<hr style='margin:10px;'>\"+\n                    \"<ul style='color: #444;list-style-type:circle;align-item:left;padding-left:20px;padding-right:20px'>\"+\n        \"<li>Active: \"+str(df_countries['Active'][i])+\"<\/li>\"+\n        \"<li>Confirmed: \"+str(df_countries['Confirmed'][i])+\"<\/li>\"+\n        \"<li>Deaths:   \"+str(df_countries['Deaths'][i])+\"<\/li>\"+\n        \"<\/ul>\",\n        radius=(int((np.log(df_countries['Confirmed'][i]+1.00001)))+0.2)*50000,\n        color='#ff6600',\n        fill_color='#ff8533',\n        fill=True).add_to(world_map)\nworld_map","d52e157e":"case_nums_country = df_confirmed.groupby(\"Country\").sum().drop(['Lat','Long'],axis =1).apply(lambda x: x[x > 0].count(), axis =0)\nd = [datetime.strptime(date,'%m\/%d\/%y').strftime(\"%d %b\") for date in case_nums_country.index]\n\nf = plt.figure(figsize=(14,8))\nf.add_subplot(111)\nmarker_style = dict(c=\"crimson\",linewidth=6, linestyle='-', marker='o',markersize=6, markerfacecolor='#ffffff')\nplt.plot(d, case_nums_country,**marker_style)\nplt.tick_params(labelsize = 14)\nplt.xticks(list(np.arange(0,len(d),int(len(d)\/5))),d[:-1:int(len(d)\/5)]+[d[-1]])\n\nplt.xlabel(\"Dates\",fontsize=18)\nplt.ylabel(\"Number of Countries\",fontsize=18)\nplt.grid(alpha = 0.3)\nplt.show()","4ad596bb":"df_countries_cases = df_confirmed.groupby([\"Country\"]).sum()\ndf_countries_deaths = df_deaths.groupby([\"Country\"]).sum()\n\ndf_countries_cases.drop(['Lat', 'Long'], inplace=True, axis=1)\ndf_countries_deaths.drop(['Lat', 'Long'], inplace=True, axis=1)\n\ndf_countries_cases = df_countries_cases.sort_values(df_confirmed.columns[-1],ascending = False)[:20]\n\ndates = df_countries_cases.columns\nd = [datetime.strptime(date,'%m\/%d\/%y').strftime(\"%d %b\") for date in dates]","0769f671":"marker_style_confirmed = dict(c=\"darkcyan\", linewidth=6, linestyle='-', marker='o', markersize=6, markerfacecolor='#ffffff')\nmarker_style_death = dict(c=\"crimson\", linewidth=6, linestyle='-', marker='o', markersize=6, markerfacecolor='#ffffff')\nfig, axes = plt.subplots(nrows=10, ncols=2, figsize=(15,15))\nplt.subplots_adjust(top = 4.0)\ni=0\nfor rows in axes:\n    for ax1 in rows:\n        ax1.plot(d, df_countries_cases.iloc[i], label = 'Confirmed', **marker_style_confirmed)\n        ax1.plot(d, df_countries_deaths[df_countries_deaths.index == df_countries_cases.index[i]].values[0], label = 'Deaths', **marker_style_death)\n        ax1.fill_between(d, df_countries_cases.iloc[i], color='darkcyan', alpha=0.3)\n        ax1.fill_between(d, df_countries_deaths[df_countries_deaths.index == df_countries_cases.index[i]].values[0], color='crimson', alpha=0.3)\n        ax1.set_xlabel(\"Dates\", fontsize = 12)\n        ax1.set_ylabel(\"No. of Cases\",fontsize = 12)\n        ax1.set_title(\"COVID Cases: \"+df_countries_cases.index[i], fontsize = 15)\n        ax1.legend(loc= \"best\", fontsize = 12)\n        ax1.set_xticks(list(np.arange(0,len(d),int(len(d)\/5))))\n        ax1.grid(which='major', linewidth = 0.3)\n        i+=1","2e556cd4":"temp = df_confirmed.groupby('Country').sum().diff(axis=1).sort_values(df_confirmed.columns[-1],ascending=False).head(10).replace(np.nan,0)\nf = plt.figure(figsize=(20,12))\nax = f.add_subplot(111)\nfor i,country in enumerate(temp.index):\n    t = temp.loc[temp.index ==country].values[0]\n    t = t[t>=0]\n    date = np.arange(0,len(t[:]))\n    plt.plot(date,t\/1000,'-o',label = country,linewidth =2, markevery=[-1])\n\n# Grid Settings\nplt.grid(lw = 1, ls = '-', c = \"0.85\", which = 'major')\nplt.grid(lw = 1, ls = '-', c = \"0.95\", which = 'minor')\n\n#Title\nplt.title(\"COVID-19 Daily Confirmed Cases in Top 10 Countries\",{'fontsize':24})\n\n# Axis Label\nplt.xlabel(\"Days\",fontsize =18)\nplt.ylabel(\"Number of Daily Confirmed Cases (Thousand)\",fontsize =18)\n\n# Legend\nplt.legend(fontsize=18)\n\nplt.show()","c333e4e4":"temp = df_deaths.groupby('Country').sum().diff(axis=1).sort_values(df_deaths.columns[-1],ascending=False).head(10).replace(np.nan,0)\nf = plt.figure(figsize=(20,12))\nax = f.add_subplot(111)\nfor i,country in enumerate(temp.index):\n    t = temp.loc[temp.index ==country].values[0]\n    t = t[t>=0]\n    date = np.arange(0,len(t[:]))\n    plt.plot(date,t\/1000,'-o',label = country,linewidth =2, markevery=[-1])\n\n# Grid\nplt.grid(lw = 1, ls = '-', c = \"0.85\", which = 'major')\nplt.grid(lw = 1, ls = '-', c = \"0.95\", which = 'minor')\n\n#Title\nplt.title(\"COVID-19 Daily Deaths in Top 10 Countries\",{'fontsize':24})\n\n# Axis Label\nplt.xlabel(\"Days\",fontsize =18)\nplt.ylabel(\"Number of Daily Death Cases (Thousand)\",fontsize =18)\n\n# Legend\nplt.legend(fontsize=18)\n\nplt.show()","a4c6d8de":"This section analyzes Continent wise Total Confirmed cases, Deaths reported, Recoveries, Active cases and Mortality Rate as of **25th July, 2020**","0b583d0f":"# Preprocessing","8fb1876a":"### Top 10 Countries - Recovered Cases","40918491":"<img src=\"https:\/\/www.heywood.org\/images\/heyBanner\/imgBanner\/banner2.png\" width=\"2000px\" align=\"center\"><\/img>","748559f6":"There are **188** countries that have reported Covid Cases","bba16b91":"<a><\/a>\n # Dataset\n \nAll datasets are imported from 2019 Novel Coronavirus COVID-19 (2019-nCoV) Data Repository by **Johns Hopkins CSSE** - https:\/\/github.com\/CSSEGISandData\/COVID-19\n- **df_covid19**  consists of Number of Confirmed cases, Deaths, Recovered, Active, Incident_Rate and Mortality_Rate updated daily country wise.\n- **df_confirmed** and **df_deaths**, both are time-series datasets that are updated on daily basis from various official sources by John Hopkins CSSE.\n- df_confirmed enlists number of confirmed cases in different countries on a daily basis.\n- df_deaths enlists number of deaths in different countries on a daily basis.","392708e7":"### Visualization on World Map","de5c0d16":"From the above plot it is evident that almost all countries were affected of Covid19 by 21st April","582cf012":"The following graphs show the spread of Covid19 across different Continents. It shows how the number of confirmed cases and deaths have increased over time.","62abc298":"The following graph shows the number of deaths reported each day across the world","44f6f126":"### Top 10 Countries - Active Cases","64491880":"### COVID19 Spread Analysis","931e206d":"<h1 align=\"center\"> COVID-19 Case Study - A Beginner Friendly Analysis <\/h1>","05de8cdf":"<a><\/a>\n# Content:\n\n- [About COVID-19](#About-COVID-19)<br>\n- [Dataset](#Dataset)\n- [Imports and Datasets](#Imports-and-Datasets)\n- [Preprocessing](#Preprocessing)\n- [Global Analysis](#Global-Analysis)\n- [Continent wise Analysis](#Continent-wise-Analysis)\n- [Country wise Analysis](#Country-wise-Analysis)\n- [Feedback](#Feedback)","3256ba33":"### Daily New Cases - Globally","3064d7a1":"# Continent-wise-Analysis","94293155":"### Daily Deaths - Globally","2ba8213b":"The following graph shows number of confirmed deaths reported each day across different Continents","b34eaa60":"### Daily deaths - Top 10 Countries","cf04b80e":"The following graph shows number of confirmed new cases reported each day across different Continents","23d3f0a3":"The following graph shows number of confirmed new cases reported each day across the world","1f917d95":"### Overview","fb446898":"This section analyzes total Confirmed cases, Deaths reported, Recoveries, Active cases and Mortality Rate across the world as of **25th July, 2020**","4883ca4c":"In this Notebook, I have performed a beginner friendly analysis of COVID19. Please UPVOTE & COMMENT if you find it useful. ","97959bdb":"### COVID19 Spread Analysis","2a611d1c":"The following Pie Chart shows the Continent wise distribution of Covid19 Confirmed Cases","5cd79a4a":"<i>Image Credits: <a href=\"https:\/\/nenow.in\/north-east-news\/manipur\/manipurs-covid-19-tally-reaches-385-with-19-new-cases.html\">Northeast Now<\/a><\/i>","37457d55":"### Overview","58b6838f":"# Imports-and-Datasets\n- Pandas - for performing basic operations on dataset \n- Numpy - for mathematical calculations\n- Matplotlib & Seaborn - for visualizations & plots\n- Folium - for visualizing data on Maps\n- pycountry_convert - for getting continent name from their country names","02f70605":"### Global Spread Analysis of Covid19","ff236221":"The following graphs show the spread of Covid19 across Top 20 Contries (Confirmed Cases). It shows how the number of confirmed cases and deaths have increased over time.","fdbe9a0e":"\n # About-COVID-19","d8dc2afc":"### Top 10 Countries - Confirmed Cases","1a47211f":"# Country-wise-Analysis","42e6effb":"# Global-Analysis","4c89d1ce":"### Number of Countries affected by COVID19 over time ","3f7f116e":"### Visualization on World Map","36aeb99c":"This section analyzes Country wise Total Confirmed cases, Deaths reported, Recoveries, Active cases and Mortality Rate as of **25th July, 2020**","f847feb8":"### Daily Deaths - Continents","2c579901":"- This was my small effort in applying my data analytics skills to analyze the spread of COVID19\n- Special mention to the Notebook \"COVID-19 Case Study - Analysis, Viz & Comparisons\" by Tarun Kumar\n- Your FEEDBACK is much APPRECIATED\n- Please UPVOTE if you LIKE my EFFORT","4b726479":"### Daily Confirmed Cases - Continents","aff90999":"# Feedback","6c269059":"### Daily Confirmed cases - Top 10 Countries","a33da7de":"The following graph shows the spread of Covid19. It shows how the number of confirmed cases and deaths have increased over time.","d58146c0":"### Top 10 Countries - Deaths","4309e2b8":"<p><b>Coronavirus<\/b> is a family of viruses that can cause illness, whereas the disease that is caused due to Coronavirus is termed as <b>COVID19<\/b> by the scientists. Middle East Respiratory Syndrome (MERS-CoV) and Severe Acute Respiratory Syndrome (SARS-CoV) belong to the Coronavirus family as well which the world already has faced.<\/p>\n<p> SARS-CoV-2 (n-coronavirus) is the new virus of the Coronavirus family, which was discovered in 2019, which has not been identified in humans before. It is a contiguous virus which started from Wuhan in December 2019. Which was later declared as a Pandemic by WHO due to high rate spreads throughout the world.<\/p>\n<p> In this nootebook, I have made a small effort of analyzing the data of Covid cases over time. The notebook is mainly divided into 3 sections - Global Analysis, Continent wise Ananlysis and Country wise Analysis. <\/p>","047a6358":"The following Pie Chart shows the breakdown of Total Confirmed Cases into Active, Recovered and Deaths"}}