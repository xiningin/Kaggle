{"cell_type":{"6aa18700":"code","22bc3c37":"code","cb7c9656":"code","993fe792":"code","6e0491b1":"code","f05fe25c":"code","10f0f887":"code","87edc61a":"code","4fda7768":"code","2aace8e6":"code","7f1710e1":"code","eea074ad":"code","e0230bd1":"code","fe0962a9":"code","fbcea78d":"code","6283931b":"code","eca6237e":"code","41bc9868":"code","5f846707":"code","ebf57b24":"code","b0952189":"code","cb6834ea":"code","89b58528":"code","6698b3ec":"code","d396837c":"code","9b135bb5":"code","ce1c4cdd":"code","484c7446":"code","bdec8394":"code","3eb3a066":"code","557218a7":"code","138d9e87":"code","a4f8342b":"code","8e031503":"code","9176a7ce":"code","c3b5a03e":"code","035f7d56":"code","d31a8c48":"code","6239aae8":"code","0acee1e4":"code","f83c27a5":"code","f57b2eb3":"markdown","194f4c48":"markdown","3a7c2584":"markdown","33150aec":"markdown","552ff8aa":"markdown","64112e26":"markdown","85416d61":"markdown","70e90483":"markdown","029d2b2a":"markdown","cbd3ee12":"markdown","2804abb3":"markdown","0e4bc696":"markdown","2935352a":"markdown","3f59ce72":"markdown","c91dd7b0":"markdown","da75a589":"markdown","87584de8":"markdown","5311bf61":"markdown","1896bfea":"markdown","316d9a61":"markdown","c1ef73ac":"markdown","c0b2f8dc":"markdown","accaaf7e":"markdown","df4ea158":"markdown"},"source":{"6aa18700":"pip install joypy","22bc3c37":"import pandas as pd\nimport numpy as np\n\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport squarify\nimport plotly.graph_objects as go\nimport plotly.express as px\nimport joypy\n\nimport warnings\nwarnings.filterwarnings('ignore')\n\n# Chart setting\nsns.set()\nfacecolor = '#f1f1f9'\nplt.rcParams['figure.facecolor'] = facecolor\nplt.rcParams['axes.facecolor'] = facecolor\n#plt.rcParams.update({'axes.spines.top': False, 'axes.spines.right': False})\nplt.rcParams['font.family'] = ['Calibri']\npalette17 = ['#FFD166','#F16A70','#B1D877','#8CDCDA','#4D4D4D']\npalette18 = ['#F16A70','#B1D877','#8CDCDA','#4D4D4D']\npalette19 = ['#B1D877','#8CDCDA','#4D4D4D']","cb7c9656":"# Load files\nraw21 = pd.read_csv('..\/input\/kaggle-survey-2021\/kaggle_survey_2021_responses.csv')\nraw20 = pd.read_csv('..\/input\/kaggle-survey-2020\/kaggle_survey_2020_responses.csv')\nraw19 = pd.read_csv('..\/input\/kaggle-survey-2019\/multiple_choice_responses.csv')\nraw18 = pd.read_csv('..\/input\/kaggle-survey-2018\/multipleChoiceResponses.csv')\nraw17 = pd.read_csv('..\/input\/kaggle-survey-2017\/multipleChoiceResponses.csv',encoding='unicode_escape')","993fe792":"# Clean data\ncolumn_name21 = raw21.columns.str.replace(r'_Part([\\s\\S])*', '', regex=True).str.replace('_OTHER', '')\ncolumn_name20 = raw20.columns.str.replace(r'_Part([\\s\\S])*', '', regex=True).str.replace('_OTHER', '')\ncolumn_name19 = raw19.columns.str.replace(r'_Part([\\s\\S])*', '', regex=True).str.replace('_OTHER', '')\ncolumn_name18 = raw18.columns.str.replace(r'_Part([\\s\\S])*', '', regex=True).str.replace('_OTHER', '')\ncolumn_name17 = raw17.columns.str.replace(r'_Part([\\s\\S])*', '', regex=True).str.replace('_OTHER', '')","6e0491b1":"# 2021 data\ndata21 = raw21.iloc[1:,:]\ndata21.columns = column_name21\ndata21['year'] = '2021'\n\n# 2020 data\ndata20 = raw20.iloc[1:,:]\ndata20.columns = column_name20\ndata20['year'] = '2020'\n\n# 2019 data\ndata19 = raw19.iloc[1:,:]\ndata19.columns = column_name19\ndata19['year'] = '2019'\n\n# 2018 data\ndata18 = raw18.iloc[1:,:]\ndata18.columns = column_name18\ndata18['year'] = '2018'\n\n# 2017 data\ndata17= raw17.loc[1:,:]\ndata17columns = column_name17\ndata17['year'] = '2017'\n\n# consolidate\nfiles = [data21, data20, data19, data18, data17] # all data\nfiles1 = [data21, data20, data19, data18] # exclude 2017\nfiles2 = [data21, data20, data19] # exclude 2018","f05fe25c":"sns.palplot(palette17)\nplt.title('color palette for this notebook', size=14, fontweight='bold')\nplt.show()","10f0f887":"duration_cols = ['Time from Start to Finish (seconds)', 'Time from Start to Finish (seconds)', 'Time from Start to Finish (seconds)', 'Time from Start to Finish (seconds)']\n\ndf_duration = []\n\nfor (file, duration) in zip(files1, duration_cols):\n    df_duration.append(file.loc[:,['year', duration]])\n\nfor i in range(len(duration_cols)):\n    df_duration[i].columns = ['year', 'duration']\n\ndf_duration = pd.concat(df_duration, axis=0, ignore_index=False)\n\ndf_duration['duration'] = pd.to_numeric(df_duration['duration'], downcast=\"float\")\ndf_duration = df_duration[((df_duration['duration']>0) & (df_duration['duration']<3600))]\n\nfig,axes =  joypy.joyplot(df_duration, by='year',color=palette18, alpha=0.8)\nplt.title('Time taken to complete the survey (in seconds)', size=14, fontweight='bold')\nplt.show()","87edc61a":"# Total number of participants \nno_participants = []\nfor i, file in enumerate(files):\n    no_participants.append([(2021-i), len(file)])\nno_participants = pd.DataFrame(no_participants, columns=['year', 'number'])\n\n# chart (no. of participants vs. year)\nfig = plt.figure(figsize=(6,4))\nplt.bar(x=no_participants['year'], height=no_participants['number'], width=0.6, color=palette17[::-1])\n\n# Label bar values\nfor rect in plt.gca().patches:\n    height = rect.get_height()\n    width = rect.get_width()\n    x = rect.get_x()\n    y = rect.get_y()\n    # label\n    label = '{:,}'.format(int(height))\n    # coordinates for text\n    x_coord = x + width\/2\n    y_coord = y + height+200\n    plt.gca().text(x_coord, y_coord, label, ha='center', va='bottom', fontsize=12)\nplt.title('No. of participants between 2017 - 2021', y=1.05, size=14)\nplt.show()","4fda7768":"# Rename to make gender choices consistent\ndata19.replace(['Female', 'Male'],['Woman', 'Man'], inplace=True)\ndata18.replace(['Female', 'Male'],['Woman', 'Man'], inplace=True)\ndata17.replace(['Female', 'Male'],['Woman', 'Man'], inplace=True)\n\n# Gender distribution\ngender_col = ['Q2', 'Q2', 'Q2', 'Q1', 'GenderSelect']\ndf_genders = []\n\nfor (file, gender) in zip(files, gender_col):\n    df_genders.append(file.loc[:,['year', gender]])\n\nfor i in range(len(gender_col)):\n    df_genders[i].columns = ['year', 'gender']\n\ndf_genders = pd.concat(df_genders, axis=0, ignore_index=False)\ndf_genders_ct = pd.crosstab(index=df_genders['year'], columns=df_genders['gender'], values=df_genders['gender'], aggfunc='count') ","2aace8e6":"color_b = ['#6c8fc5', '#6c8fc5', '#6c8fc5', '#6c8fc5', '#34568B']\ncolor_o = ['#fbc283', '#fbc283', '#fbc283', '#fbc283', '#FDAC53']\n\nfig, ax = plt.subplots(figsize=(10,6))\nax.barh(df_genders_ct.index, df_genders_ct['Man'], color=color_b, linewidth=2, label='Male')\nax.barh(df_genders_ct.index, df_genders_ct['Woman'], left = df_genders_ct['Man'], color=color_o, linewidth=2, label='Female')\nax.invert_yaxis()    \n# Label bar values\nfor rect in ax.patches:\n    height = rect.get_height()\n    width = rect.get_width()\n    x = rect.get_x()\n    y = rect.get_y()\n    # label\n    label = '{:,}'.format(int(width))\n    # coordinates for text\n    x_coord = x + width - 300\n    y_coord = y + height \/ 2\n    ax.text(x_coord, y_coord, label, ha='right', va='center', fontsize=14, color='w',  fontweight='bold')\n\nplt.title('No. of male and female particpants',  size=16)\nplt.legend() \nplt.show()","7f1710e1":"# percentage male and female\ndf_genders_pct = df_genders_ct.loc[:,['Man', 'Woman']].div(df_genders_ct.loc[:,['Man', 'Woman']].sum(axis=1), axis=0) *100\n\ncolor_b = ['#6c8fc5', '#6c8fc5', '#6c8fc5', '#6c8fc5', '#34568B']\ncolor_o = ['#fbc283', '#fbc283', '#fbc283', '#fbc283', '#FDAC53']\n\nfig, ax = plt.subplots(figsize=(10,6))\nax.barh(df_genders_pct.index, df_genders_pct['Man'], color=color_b, linewidth=2, label='Male')\nax.barh(df_genders_pct.index, df_genders_pct['Woman'], left = df_genders_pct['Man'], color=color_o, linewidth=2, label='Female')\nax.invert_yaxis()    \n\n# Label bar values\nfor rect in ax.patches:\n    height = rect.get_height()\n    width = rect.get_width()\n    x = rect.get_x()\n    y = rect.get_y()\n    # label\n    label = '{:.1f}%'.format(width)\n    # coordinates for text\n    x_coord = x + width - 2\n    y_coord = y + height \/ 2\n    ax.text(x_coord, y_coord, label, ha='right', va='center', fontsize=14, color='w',  fontweight='bold')\n\nplt.title('% male vs. female',  size=16)\nplt.show()","eea074ad":"def plot_heatmap(data, cmap=['Reds', 'Greens', 'Blues', 'Greys'], figsize=(12,6)):\n    fig = plt.figure(figsize=figsize)\n    for i in range(len(data.index)):\n        ax = fig.add_subplot(5,1,i+1)\n        sns.heatmap(pd.DataFrame(data.iloc[i,:]).transpose(), cbar=False, cmap=cmap[i], annot=True, fmt='.1%', linewidth=0.5)\n        ax.set_xlabel('')\n        plt.yticks(rotation=360)\n        if i < (len(data.index)-1):\n            ax.set_xticklabels('')\n    plt.subplots_adjust(hspace=0.01)","e0230bd1":"# Age columns in different files\nage_col = ['Q1', 'Q1', 'Q1', 'Q2']\n\n# Rename to make age choices consistent\ndata18.replace(['70-79', '80+'],['70+', '70+'], inplace=True)\n\ndf_age = []\n\nfor (file, age) in zip(files1, age_col):\n    df_age.append(file.loc[:,['year', age]])\n\nfor i in range(len(age_col)):\n    df_age[i].columns = ['year', 'age']\n\ndf_age = pd.concat(df_age, axis=0, ignore_index=False)\ndf_age_ct = pd.crosstab(index=df_age['year'], columns=df_age['age'], values=df_age['age'], aggfunc='count') \ndf_age_pct = df_age_ct.div(df_age_ct.sum(axis=1), axis=0)\n\n# Plot\nplot_heatmap(data = df_age_pct)\nplt.title('Age comparison from 2018 - 2021',  y=4.1, size=16)\nplt.show()","fe0962a9":"# country columns in  files\ncountry_col = ['Q3', 'Q3', 'Q3', 'Q3','Country']\n\n# Rename \ndata17.replace(['United States', 'United Kingdom', \"People 's Republic of China\"],['USA', 'UK', 'China'], inplace=True)\ndata18.replace(['United Kingdom of Great Britain and Northern Ireland', 'United States of America','Viet Nam'],['UK','USA', 'Vietnam'], inplace=True)\ndata19.replace(['United Kingdom of Great Britain and Northern Ireland', 'United States of America','Viet Nam'],['UK','USA', 'Vietnam'], inplace=True)\ndata20.replace(['United Kingdom of Great Britain and Northern Ireland', 'United States of America','Viet Nam'],['UK','USA', 'Vietnam'], inplace=True)\ndata21.replace(['United Kingdom of Great Britain and Northern Ireland', 'United States of America','Viet Nam'],['UK','USA', 'Vietnam'], inplace=True)\n\n# DataFrame summary\ndf_country = []\nfor (file, country) in zip(files, country_col):\n    df_country.append(file.loc[:,['year', country]])\n\nfor i in range(len(country_col)):\n    df_country[i].columns = ['year', 'country']\n\ndf_country = pd.concat(df_country, axis=0, ignore_index=False)\ndf_country_ct = pd.crosstab(index=df_country['year'], columns=df_country['country'], values=df_country['country'], aggfunc='count').transpose().drop(index='Other')\n\n\ncountry_no = []\nfor i in range(len(country_col)):\n    country_no.append([2017+i, df_country_ct.iloc[:,i].nunique()])\n\ncountry_no = pd.DataFrame(country_no, columns=['year', 'number'])\n\n# chart (no. of participants vs. year)\nfig = plt.figure(figsize=(6,4))\nplt.bar(x=country_no['year'], height=country_no['number'], width=0.6, color=palette17)\n\n# Label bar values\nfor rect in plt.gca().patches:\n    height = rect.get_height()\n    width = rect.get_width()\n    x = rect.get_x()\n    y = rect.get_y()\n    # label\n    label = '{:,}'.format(int(height))\n    # coordinates for text\n    x_coord = x + width\/2\n    y_coord = y + height+1\n    plt.gca().text(x_coord, y_coord, label, ha='center', va='bottom', fontsize=12)\nplt.title('No. of countries participated in the survey', y=1.05, size=14)   \nplt.show()","fbcea78d":"color = palette17\n\nfig = plt.figure(figsize=(15,6))\nfor i in range(len(country_col)):\n    ax = fig.add_subplot(1,5, i+1)\n    top10 =  df_country_ct.iloc[:, i].nlargest(10)\n    ax= top10.plot(kind='barh', color=color[i])\n    ax.set_title(top10.name + ' top 10 countries', size=12, fontweight='bold')\n    \n    ax.invert_yaxis()\n    ax.set_ylabel(\"\")\n    \n    values = top10.values    \n    for j, value in enumerate(values):\n        ax.text(value+values.max()*0.05 , j, '{:,}'.format(int(value)),va='center', \n                 fontweight='bold', alpha=0.8, size=12, ha='left')   \nplt.tight_layout()","6283931b":"age_country_tm = data21.loc[:,['Q1','Q3']].reset_index().groupby(['Q1','Q3'], as_index=False).count()\nage_country_tm\nfig = px.treemap(age_country_tm, path=['Q1','Q3'], values='index')\nfig.update_layout(\n    treemapcolorway = palette17[::-1],\n    margin = dict(t=50, l=25, r=25, b=25)\n)\nfig.show()","eca6237e":"# education columns in files\neducation_col = ['Q4', 'Q4', 'Q4', 'Q4']\n\n# Rename \ndata21.replace(['Professional doctorate'],['Professional degree'], inplace=True)\n\ndf_education = []\n\nfor (file, education) in zip(files1, education_col):\n    df_education.append(file.loc[:,['year', education]])\n\nfor i in range(len(age_col)):\n    df_education[i].columns = ['year', 'education']\n\ndf_education = pd.concat(df_education, axis=0, ignore_index=False)\ndf_education_ct = pd.crosstab(index=df_education['year'], columns=df_education['education'], values=df_education['education'], aggfunc='count') \ndf_education_ct.columns = ['Bachelor\u2019s', 'PhD', 'Not disclosed', 'Master\u2019s', 'High school', 'Professional', 'College']\ndf_education_ct = pd.DataFrame(df_education_ct, columns=['Professional','PhD', 'Master\u2019s', 'Bachelor\u2019s', 'High school', 'College', 'Not disclosed'])\ndf_education_pct = df_education_ct.div(df_education_ct.sum(axis=1), axis=0)\n\n# Plot\nplot_heatmap(data=df_education_pct, figsize=(9,6))\nplt.title('Academic qualification from 2018 - 2021', y=4.2, size=16)\nplt.show()","41bc9868":"exp_col = ['Q6', 'Q6', 'Q15', 'Q24']\n\n# Rename\ndata18.replace(['1-2 years', '20-30 years','30-40 years', '40+ years', '< 1 year', 'I have never written code and I do not want to learn', 'I have never written code but I want to learn'],['1-3 years', '20+ years', '20+ years','20+ years', '< 1 years', 'Never','Never'], inplace=True)\ndata19.replace(['1-2 years', 'I have never written code'],['1-3 years', 'Never'], inplace=True)\ndata20.replace(['1-2 years', 'I have never written code'],['1-3 years', 'Never'], inplace=True)\ndata21.replace(['I have never written code'],['Never'], inplace=True)\n\ndf_exp = []\n\nfor (file, exp) in zip(files1, exp_col):\n    df_exp.append(file.loc[:,['year', exp]])\n\nfor i in range(len(exp_col)):\n    df_exp[i].columns = ['year', 'experience']\n\ndf_exp = pd.concat(df_exp, axis=0, ignore_index=False)\ndf_exp_ct = pd.crosstab(index=df_exp['year'], columns=df_exp['experience'], values=df_exp['experience'], aggfunc='count') \ndf_exp_ct = pd.DataFrame(df_exp_ct, columns=['Never','< 1 years','1-3 years', '3-5 years', '5-10 years','10-20 years','20+ years'])\ndf_exp_pct = df_exp_ct.div(df_exp_ct.sum(axis=1), axis=0)\n\nplot_heatmap(df_exp_pct, figsize=(9,6))\nplt.title('Years of coding experience', y=4.2, size=16)\nplt.show()","5f846707":"job_col = ['Q5', 'Q5', 'Q5', 'Q6', 'CurrentJobTitleSelect']\n\ndf_job = []\nfor (file, job) in zip(files, job_col):\n    df_job.append(file.loc[:,['year', job]])\n\nfor i in range(len(job_col)):\n    df_job[i].columns = ['year', 'job']\n\ndf_job = pd.concat(df_job, axis=0, ignore_index=False)\ndf_job_ct = pd.crosstab(index=df_job['year'], columns=df_job['job'], values=df_job['job'], aggfunc='count').transpose().drop(index='Other')\ndf_job_ct.loc['Student', '2017'] = len(data17[data17['StudentStatus'] == 'Yes'])\n\ndf = df_job.reset_index().groupby(['year','job'], as_index=False).count()\n\nfig = px.treemap(df, path=['year','job'], values='index')\nfig.update_layout(\n    treemapcolorway = palette17[::-1],\n    margin = dict(t=50, l=25, r=25, b=25)\n)","ebf57b24":"snapshot21 = data21.loc[:, ['Q1','Q2','Q4','Q5', 'Q6']]\nfig = px.parallel_categories(snapshot21,  labels={'Q1':'Age', 'Q2':'Gender', 'Q4':'Education', 'Q5':'Job', 'Q6': 'coding experience'})\n\nfig.update_layout(\n    hovermode = 'x',\n    title=\"<b>2021 Kaggle Survey Participant's Profile<\/b>\",\n    font=dict(size = 10, color = 'black'),\n    titlefont=dict(size =16),\n    paper_bgcolor=facecolor\n)\n\nfig.show()","b0952189":"# Function to extract all mc responses\ndef question(columns, store_list, choice, file=files1):\n    for i in range(len(file)):\n        data_year = files[i]\n        col = columns[i]\n        for j in range(len(data_year[col].columns)):\n            choice_name = data_year[col].iloc[:, j].dropna().unique()\n            count = data_year[col].iloc[:, j].count()\n            store_list.append([2021-i, choice_name, count, len(data_year)])\n            \n    df = pd.DataFrame(store_list)\n    df.columns = ['year', choice, 'count', 'participants']\n    df.iloc[:,1] =   df.iloc[:,1].str.get(0)\n    df['pct'] = df['count'] \/ df['participants']\n\n    return df\n\n# Function for bar plot\ndef bar_plot(df, columns, choice,title=None, color=palette18):\n    fig = plt.figure(figsize=(15,10))\n    color = color\n    for i in range(len(lang_cols)):\n        ax = fig.add_subplot(2,2, i+1)\n        df[df['year']==2018+i].loc[:, [choice, 'pct']].sort_values(by=['pct'], ascending=False).plot.barh(y='pct', x=choice, ax=ax, color=color[i])\n        ax.invert_yaxis()\n        ax.set_title('Response from '+str(2018+i) + ' Kaggle Survey', size=15)\n        ax.set_ylabel('')\n        ax.get_legend().remove()\n        \n        # label values\n        values = df[df['year']==2018+i].loc[:,'pct'].sort_values(ascending=False)\n        for j, value in enumerate(values):\n            ax.text(value+values.max()*0.01 , j, '{:.1%}'.format(value),va='center', \n                    fontweight='bold', alpha=0.8, size=11, ha='left')\n    plt.suptitle(t=title, y=1, size=20, fontweight='bold')\n    plt.tight_layout()\n\n    return\n\n# Function for scatter plot\ndef scatter_plot(data, choice, palette=palette19, title=None):\n    fig = plt.figure(figsize=(10,5))\n    ax = sns.scatterplot(x='pct', y=choice, hue='year', s=50, data=data, palette = palette, edgecolor='grey', linewidth=1.5)\n    plt.title(title, y=1.05, size=16)\n    plt.xlabel('')\n    plt.ylabel('')\n    plt.gca().xaxis.set_major_formatter(mtick.PercentFormatter(1.0, decimals=0))\n    \n    return","cb6834ea":"lang_cols = ['Q7', 'Q7', 'Q18', 'Q16']\nlang_list = []\nchoice = 'language'\ntitle = \"What programming languages do you use on a regular basis?\"\n\nlang_df = question(columns=lang_cols, store_list=lang_list, choice=choice)\nbar_plot(df=lang_df, columns=lang_cols, choice=choice, title=title)","89b58528":"# Which languages to learn for your job?\nchoice_name = []  # create an empty list to store names of programming languages \njob_lang= data21.loc[:, ['Q5','Q7']]\nfor i in range(len(job_lang['Q7'].columns)):\n    choice_name.append(job_lang['Q7'].iloc[:, i].dropna().unique())\n\nchoice_name= pd.DataFrame(choice_name).values\nchoice_name = [element for sublist in choice_name for element in sublist] # to seperate list in list\njob_lang = pd.pivot_table(data=job_lang, index='Q5', values='Q7', aggfunc='count')\njob_lang.columns = choice_name # replace columns with the language's name\njob_lang['participants'] = data21.groupby('Q5')['Q5'].count()\njob_lang =  job_lang.div(job_lang.loc[:, 'participants'], axis=0)\njob_lang.drop(columns='participants', inplace=True)","6698b3ec":"fig = plt.figure(figsize=(15,8))\nsns.heatmap(job_lang, cmap='Blues', annot=True, fmt='.1%', linewidth=1)\nplt.ylabel('')\nplt.title('Which programming languages to learn for your job? (2021 data)', y=1.05, size=16)\nplt.show()","d396837c":"# Create Sankey diagram from DataFrame\n# prepare Sankey plot\nlabel = (job_lang.index.tolist(), job_lang.columns.tolist())\nlabel = [element for sublist in label for element in sublist]\ncolor_palette = ['#ffc107', '#00ffff', '#c0ff3e', '#d6d6dd','#d6d6dd','#d6d6dd','#d6d6dd','#d6d6dd','#d6d6dd','#d6d6dd','#d6d6dd','#d6d6dd','#d6d6dd']\n\nsource= []\ntarget = []\nvalue = []\ncolor = []\n\n# create array to store 'source', 'target', 'value', and 'color'\nfor i in range(len(job_lang.index)):\n    for j in range(len(job_lang.columns)):\n        source.append(i)  # source encoding\n        target.append(j+ len(job_lang.index)) # target encoding\n        value.append(job_lang.iloc[i,j]) # value with respect to source\/target\n        color.append(color_palette[j])\n                \nsource = np.array(source)\ntarget = np.array(target)\nvalue = np.array(value)\n\n# plot\n\nlink = dict(source=source, target=target, value=value, color=color)\nnode = dict(pad=8, thickness=30, label=label, line = dict(color = \"blue\", width = 0.5), color='#56a1ec')\n\nfig = go.Figure(go.Sankey(link=link, node=node))\n\nfig.update_layout(\n    hovermode = 'x',\n    title=\"<b>Who uses Python, R and SQL? <\/b> (Visualization in a different way)\",\n    titlefont=dict(size =16),\n    font=dict(size = 11, color = 'black'),\n    paper_bgcolor= facecolor\n)\n","9b135bb5":"langrec_cols = ['Q8' ,'Q8', 'Q19', 'Q18']\n\n# Rename to make age choices consistent\n#data18.replace(['70-79', '80+'],['70+', '70+'], inplace=True)\n\ndf_rec = []\n\nfor (file, rec) in zip(files1, langrec_cols):\n    df_rec.append(file.loc[:,['year', rec]])\n\nfor i in range(len(langrec_cols)):\n    df_rec[i].columns = ['year', 'recommendation']\n\ndf_rec = pd.concat(df_rec, axis=0, ignore_index=False)\ndf_rec_ct = pd.crosstab(index=df_rec['year'], columns=df_rec['recommendation'], values=df_rec['recommendation'], aggfunc='count') \ndf_rec_pct = df_rec_ct.div(df_rec_ct.sum(axis=1), axis=0)\ndf_rec_pct.sort_index(axis=1, inplace=True, ascending=False)","ce1c4cdd":"import matplotlib.ticker as mtick\nfig = plt.figure(figsize=(10,5), facecolor = facecolor)\ncolor =palette18\nfor i in range(len(langrec_cols)):\n    x = df_rec_pct.iloc[i, :]\n    y =  df_rec_pct.columns\n    plt.scatter(x=x, y=y, s=40, label=2018+i, color=color[i], edgecolor='black')\nplt.title('What programming language would you recommend an aspiring data scientist to learn first?', y=1.05, size=16)\nplt.gca().xaxis.set_major_formatter(mtick.PercentFormatter(1.0, decimals=0))\nplt.legend()\nplt.show()","484c7446":"ide_cols = ['Q9', 'Q9', 'Q16', 'Q13']\nide_list = []\nchoice = 'IDE'\ntitle = \"Which of the integrated development environments (IDE's) do you use on a regular basis?\"\n\nide_df = question(columns=ide_cols, store_list=ide_list, choice=choice)\nbar_plot(df=ide_df, columns=ide_cols, choice=choice, title=title)","bdec8394":"notebook_cols = ['Q10', 'Q10', 'Q17', 'Q14']\nnotebook_list = []\nchoice = 'notebook'\ntitle = \"Which of the following hosted notebook products do you use on a regular basis?\"\n\nnotebook_df = question(columns=notebook_cols, store_list=notebook_list, choice=choice)\nbar_plot(df=notebook_df, columns=notebook_cols, choice=choice, title=title)","3eb3a066":"hardware_cols = ['Q12','Q12','Q21']\n# Rename\ndata19.replace(['None \/ I do not know'],['None'], inplace=True)\n\nhardware_list = []\nchoice = 'hardware'\ntitle = \"Which types of specialized hardware do you use on a regular basis? \"\n\nhardware_df = question(columns=hardware_cols, store_list=hardware_list, choice=choice, file=files2)\n\nfig = plt.figure(figsize=(10,5))\nax = sns.scatterplot(x='pct', y='hardware', hue='year', data=hardware_df, s=hardware_df['pct']*30**2, palette = ['#B1D877','#8CDCDA','#4D4D4D'], edgecolor='grey', linewidth=1.5)\nplt.title(title, y=1.05, size=16)\nplt.xlabel(\"\")\nplt.ylabel(\"\")\nplt.gca().xaxis.set_major_formatter(mtick.PercentFormatter(1.0, decimals=0))\nplt.show()","557218a7":"vis_cols = ['Q14', 'Q14', 'Q20', 'Q21']\nvis_list = []\nchoice = 'visualisation library'\ntitle = \"What data visualization libraries or tools do you use on a regular basis?\"\n\nvis_df = question(columns=vis_cols, store_list=vis_list, choice=choice)\nbar_plot(df=vis_df, columns=notebook_cols, choice=choice, title=title)","138d9e87":"mlf_cols = ['Q16', 'Q16', 'Q28', 'Q19']\nmlf_list = []\nchoice = 'ML framework'\ntitle = \"Which of the following machine learning frameworks do you use on a regular basis?\"\n\nmlf_df = question(columns=mlf_cols, store_list=mlf_list, choice=choice)\nbar_plot(df=mlf_df, columns=notebook_cols, choice=choice, title=title)","a4f8342b":"algo_cols = ['Q17', 'Q17', 'Q24']\nalgo_list = []\nchoice = 'ML algorithm'\ntitle = \"Which of the following ML algorithms do you use on a regular basis?\"\n\nalgo_df = question(columns=algo_cols, store_list=algo_list, choice=choice, file=files2)\nscatter_plot(algo_df, choice, palette=palette19, title=title)","8e031503":"vision_cols = ['Q18', 'Q18', 'Q26']\nvision_list = []\nchoice = 'vision'\ntitle = \"Which categories of computer vision methods do you use on a regular basis? \"\n\nvision_df = question(columns=vision_cols, store_list=vision_list, choice=choice, file=files2)\nscatter_plot(vision_df, choice, palette=palette19, title=title)","9176a7ce":"nlp_cols = ['Q19', 'Q19', 'Q27']\nnlp_list = []\nchoice = 'NLP'\ntitle = \"Which of the following natural language processing (NLP) methods do you use on a regular basis? \"\n\nnlp_df = question(columns=nlp_cols, store_list=nlp_list, choice=choice, file=files2)\nscatter_plot(nlp_df, choice, palette=palette19, title=title)","c3b5a03e":"cloud_cols =  ['Q27_A', 'Q26_A', 'Q29']\ncloud_list = []\nchoice = 'cloud'\ntitle = \"Which of the following cloud computing platforms do you use on a regular basis? \"\n\ncloud_df = question(columns=cloud_cols, store_list=cloud_list, choice=choice, file=files2)\nscatter_plot(cloud_df, choice, palette=palette19, title=title)","035f7d56":"salary_cols = ['Q25', 'Q24', 'Q10']\n\n# Rename\ndata21.replace(['$500,000-999,999','>$1,000,000','300,000-499,999'],['> 500,000','> 500,000','300,000-500,000'], inplace=True)\ndata21['Q25'] = data21['Q25'] .str.replace('$', '')\ndata20['Q24'] = data20['Q24'] .str.replace('$', '')\ndata19['Q10'] = data19['Q10'] .str.replace('$', '')\n\n# Salary order\nsalary_order = ['0-999', '1,000-1,999', '2,000-2,999', '3,000-3,999', '4,000-4,999', '5,000-7,499', '7,500-9,999', '10,000-14,999',\n         '15,000-19,999', '20,000-24,999', '25,000-29,999', '30,000-39,999', '40,000-49,999', '50,000-59,999', '60,000-69,999',\n         '70,000-79,999', '80,000-89,999', '90,000-99,999', '100,000-124,999', '125,000-149,999', '150,000-199,999', '200,000-249,999',\n         '250,000-299,999', '300,000-500,000', '> 500,000']\n\ndf_salary = []\nchoice = 'salary'\ntitle = \"Which of the following machine learning frameworks do you use on a regular basis?\"\n\nfor (file, salary) in zip(files2, salary_cols):\n    df_salary.append(file.loc[:,['year', salary]])\n\nfor i in range(len(salary_cols)):\n    df_salary[i].columns = ['year', 'salary']\n\ndf_salary = pd.concat(df_salary, axis=0, ignore_index=False)\ndf_salary_ct = pd.crosstab(index=df_salary['year'], columns=df_salary['salary'], values=df_salary['salary'], aggfunc='count') \ndf_salary_ct = pd.DataFrame(df_salary_ct, columns=salary_order)\ndf_salary_pct = df_salary_ct.div(df_salary_ct.sum(axis=1), axis=0)","d31a8c48":"# bar plot to show salary distribution\ncolor = palette19\nfig = plt.figure(figsize=(15,10))\nfor i in range(len(salary_cols)):\n    ax = fig.add_subplot(1,3, i+1)\n    df_salary_ct.iloc[i,:].plot(kind='barh', color=palette19[i])\n    ax.invert_yaxis()\n    ax.set_title(str(2019+i) +' salary distribution (in $)', fontweight='bold', ha='center', size=12)\n    if i > 0:\n        ax.set_yticks([])\n        \n    values = df_salary_ct.iloc[i,:].values    \n    for j, value in enumerate(values):\n        ax.text(value+50 , j, '{:,}'.format(int(value)),va='center', \n                 fontweight='bold', alpha=0.8, size=12, ha='left')   ","6239aae8":"plot_heatmap(df_salary_pct, cmap=['Greens', 'Blues', 'Greys'], figsize=(15,6))\nplt.title('salary distribution in %', y=3.2, size=16)\nplt.show()","0acee1e4":"data21_salary = data21[(data21['Q5']!= 'Student') & (data21['Q5']!= 'Currently not employed')]\ndata21_salary = pd.crosstab(index=data21_salary['Q3'], columns = data21_salary['Q25'], values = data21_salary['Q25'], aggfunc='count', margins=True).sort_values(by='All', ascending=False).drop(index=['All', 'Other']).head(20).iloc[:,:-1]\ndata21_salary = pd.DataFrame(data21_salary, columns=salary_order)\ndata21_salary_pct = data21_salary.div(data21_salary.sum(axis=1), axis=0)","f83c27a5":"fig = plt.figure(figsize=(15,12))\nsns.heatmap(data21_salary_pct, cmap='Blues', annot=True, fmt='.0%', linewidth=1, cbar=False)\nplt.xlabel('')\nplt.ylabel('')\nplt.title('Which country has  the highest % of high-income participants? (excl. students\/unemployed)', y=1.02, size=15, fontweight='bold')\nplt.show()","f57b2eb3":"> ### <font color='#4a8bad'>4.2. Which hosted notebook to choose?<\/font>\n- When the question was asked in 2018, over 30% of participants have not used any hosted notebook products\n- Although this ratio drops in recent years as more people are opting for Kaggle Notebook and Colab Notebook, it is still hard to say at this point who will win in the future","194f4c48":"> ### <font color='#4a8bad'>2.7. A snapshot of 2021 participant's profile<\/font>\n- The `parallel category` plot provides a quick snapshot of 2021 participant's profile\n- In summary, Kaggle Survey is mostly attacted by young male students with higher education who have 1-3 years of coding experience","3a7c2584":"> ### <font color='#4a8bad'>2.5. Half of participants have less than 3 years of coding experience<\/font>","33150aec":"# <font color='#4a8bad'>3. The current state of programming languages<\/font>\n<a id=\"state\"><\/a>\n***\n\n> ### <font color='#4a8bad'>3.1. Will R fade away with the rise of Python?<\/font>\n- Python is extensively used by the Kaggle Community and it has been the most popular programming languages  in recent years.\n- In 2018, 66% of participants used Python and this ratio increases to 84% this year\n- Meanwhile, the importance of SQL cannot be underestimated, over 40% of the participants have also used SQL on a regular basis\n- At first glance, it seems that R has gradually lost intests to the Kaggle community\n- However, if we look at the programming language usage by jobs, R is heavily used by statisticians. According to the 2021 survey, 64% of statisticians use R on a regular basis.\n- The below figure suggests that if you want to be a Database Engineer or Data Engineer, you should also learn SQL\n- And if you want to be a Software Engineer or Developer Relations, you should learn Javascript on top of Python to enhance your competitiveness","552ff8aa":"> ### <font color='#4a8bad'>3.2.  Kagglers suggest to start DS\/ML with Python<\/font>\n- In response to the question `What programming language would you recommend an aspiring data scientist to learn first?`, the ratio of participants opting for Python increases every year, in constrast to proportion of participants choosing R","64112e26":"> ### <font color='#4a8bad'>2.2. The rise of young coders<\/font>\n<a id=\"age\"><\/a>\n- The chart below provides a clear trend that the growth of the youngest age group(18-21) that took part in the survey is outpacing rest of age groups\n- Participants who are at age 18-21 account for nearly 19% of the sample population this year, almost on par with the largest population age group (25-29).\n- In recent years, we have seen coding is gain popularity among children and many countries have introduced programming classes as an important part of school curriculum. If Kaggle Survery were to include age selection for non-adults, we should see some intersting figures regarding evolution of programming for younger students below age18","85416d61":"> ### <font color='#4a8bad'>2.3. Participants represented 60 countries with over 7,000 from India<\/font>\n- Not only the number of participants reach a record high this year, the number of countries represented by participants is also rising to 60. It is good to see a more diversified Kaggle society\n- India continues to top the list for the third year in a row, with 7,434 participants in 2021. This number has almost tripled from 5 years ago\n- While US continues to remain at top 2 of the list, the number of participants has dropped by 40% when compared to the peak in 2018\n- However, for age group 45 or above, US paraticipants still represent the largest sample population\n- Apart from India and US, countries that remain at top 10 of the list for the past 5 years include Russia, UK, China and Brazil\n- There were no African countries in the top 10 list 5 years ago, however we have seen  African country (Nigeria) breaking into top 10 for the first time in 2020. In 2021, we have also seen 482 participants from Egypt","70e90483":"# <font color='#4a8bad'>4. Trends in Data Science and Machine Learning<\/font>\n<a id=\"trend\"><\/a>\n***\n\n> ### <font color='#4a8bad'>4.1. Jupyter Notebook - data scientists' IDE of choice?<\/font>\n- Jupyter Notebook is the most popular IDE for data scientists with over 60% of participants use Jupyter on a regular basis, significantly outperforming others\n- Back in 2018,  RStudio was the second most popular IDE according to the survey, with 36% of particpants using RStudio on a regular basis. However, this ratio is dropping every year with only 18% of participants choosing this option in the latest survey. \n- The rate of decline in number of participants use RStudio is faster than that of participants use R programming language, implying that some R users may have switched their favour from RStudio to other IDEs\n- It is also worth norting that VSCode has been gaining popularity in recent years","029d2b2a":"# <font color='#4a8bad'>Table of contents<\/font>\n***\n* [1. Introduction](#intro)\n\n* [2. Overview of participant profile](#overview)\n\n* [3. The current state of programming languages](#state)\n\n* [4. Trends in Data Science and Machine Learning](#trend)\n\n* [5. Exploring the salaray gap](#salary)","cbd3ee12":"> ### <font color='#4a8bad'>4.7. Computer Vision<\/font>\n- Based on the survey, the evolution of computer vision methods remains largely the same over the past three years","2804abb3":"# <font color='#4a8bad'>5. Exploring the salaray gap<\/font>\n<a id=\"salary\"><\/a>\n***","0e4bc696":"> ### <font color='#4a8bad'>4.3. How important is specialized hardware?<\/font>\n- Half of participants do not use specialized hareware according to the latest survey, this ratio increases compare to 2 years ago, likely because of higher proportion of less experienced participants took part in the survey","2935352a":"> ### <font color='#4a8bad'>5.1. Salary trend from 2019-2021<\/font>\n- This year, there is a large number of low income participants, as a result of higher ratio of students and unemployed participants","3f59ce72":"> ### <font color='#4a8bad'>4.5. Machine learning with Scikit-learn<\/font>\n- There are many machine learning framework available for DS and ML to choose from\n- Scikit-learn is one of the most popular ML frameworks that provide fast and easy way to build and test ML models\n- TensorFlow and Keras have consistently ranked in top 3 of the list","c91dd7b0":"> ### <font color='#4a8bad'>4.8. NLP<\/font>\n- Similar trend is also seen in NLP methods, but this is likely due to the fact that survey participants are more involved in data analysis\/visualization rather than NLP. ","da75a589":"> ### <font color='#4a8bad'>52. Which country has the highest ratio of high-income participants? <\/font>\n- Stripping out students and unemployed participants, more than 40% of participants in Egypt, Pakistan, Indonesia and Nigeria earn less than $1000 a year    \n\n- In comparison, more than 40% of participants from US and Australia earn $100k+ a year","87584de8":"> ### <font color='#4a8bad'>4.9. Cloud Computing<\/font>","5311bf61":"> ### <font color='#4a8bad'>2.6. Students and Data Scientists are most active participants<\/font>\n- The initial Kaggle Survey had less than 1,000 students participating, but the number surged by over 4 times in just a year to 5,000+. The number of student reaches 6,804 this year. \n- The second largest occupation is Data Scientist","1896bfea":"> ### <font color='#4a8bad'>4.6. Machine learning algorithm<\/font>\n- LG and DT\/RF are the most popular Machine Learning algorithms, there are not much changes from the past 3 years. ","316d9a61":"> ### <font color='#4a8bad'>2.4. The Kaggle Survey is attracted by people with higher education<\/font>\n- Although getting a degree is not prerequisite for becoming a Data Scientist, results from Kaggle Survey suggest that the majority of the Kaggle community received higher educations. People with Master's and Bachelor's represent the largest sample population. \n- Less than 10% of participants do not receive formal education beyond high school ","c1ef73ac":"# <font color='#4a8bad'>1. Introduction<\/font>\n<a id=\"intro\"><\/a>\n***\n\n\nThe Kaggle platform has been gaining popularity in recent years. It is the fifth year in a row that Kaggle conducts an industry-wide survey that presents a comprehensive view of the state of Data Science and Machine Learning. This year, the survey has attracted over 25,000 enthusiastic participants around the globe.\n\n**In my previous notebook [(click here for details)](https:\/\/www.kaggle.com\/lynnxy\/kaggle-survey-participants-profile-and-response), I have provided a snapshot of the status quo** , summarising participants' basic profile and how participants responsed to the questions with respect to their experience, jobs, and academic achievement.\n\n**The objective of this notebook is to explore how things have been evolving in the Data Science and Machine Learning space over the past 5 years** since Kaggle first launched the survey. The notebook aims to address the following questions:\n- Is the community getting more diversified in terms of participant's age, gender, job and academic background?\n- Which countries have seen rising interests in Data Science and Machine Learning?\n- The current state of programming languages, will R fade away with the rise of Python?\n- Trends for the popular Data Science and Machine Learning tools\n- Which country has the highest paying jobs for Data Scientists and Machine Learners?","c0b2f8dc":"#### <font color='#4a8bad'>Before we start, let's find out how long it takes to complete the survey<\/font>\n> - Majority of participants take no more than 15 mins to finish the survey    \n> - And notably, participants spent less time on the survey compared to 4 years ago as a result of the questionaire being more concise and consistent","accaaf7e":"> ### <font color='#4a8bad'>4.4. Matplotlib - a swiss  army knife for visiualization<\/font>\n- Matplotlib is the most popular visualization library due to its flexibility and power to create complicated charts\n- Nearly 70% of participants used Matplotlib on a regular basis, followed by Seaborn\n- Plotly should gain wider acceptance in the future as it is capable of creating beautiful interactive charts\n- Less participants use ggplot, inline with the rate of decline in number of R users","df4ea158":"# <font color='#4a8bad'>2. Overview of participant profile<\/font>\n<a id=\"overview\"><\/a>\n***\n\n> ### <font color='#4a8bad'>2.1. Record high number of participants with higher female ratio<\/font>\n<a id=\"number\"><\/a>\n- The Kaggle Survey has registered a record high number of participants this year, with nearly 26,000 people providing valuable feedback, representing a 55% increase compared to 2017.\n- In terms of gender breakdown, there are 20,598 male and 4,890 female participanted in the 2021 survey, representing 51% and 76% growth respectively compared to when the survey was first launched.\n- Although women are still significantly underrepresented in the DS\/ML space, with the growth of female participants outpacing male, women have now accounted for almost one fifth of the sample population"}}