{"cell_type":{"a0d5cd6a":"code","5981c589":"code","2eb18faa":"code","f22527e1":"code","5fe8089a":"code","3f133aa2":"code","010904b2":"code","2ed4fadd":"code","abc89acb":"code","77b09e84":"code","1b6b2e58":"code","24fef512":"code","fa4ab8eb":"code","18d79578":"code","66052b73":"code","7afcfccb":"code","15f073f9":"code","80e55cd9":"code","5c2ab7c6":"code","195f9ce7":"code","f1bc9e98":"code","0dad5388":"code","bba857b3":"code","23471e63":"code","ef1dfab9":"code","b4570e8f":"code","29274af5":"markdown","9ff6243e":"markdown","5783c3b5":"markdown","5616793b":"markdown","68545dd1":"markdown","a790db41":"markdown","77413a84":"markdown","2a8f2efc":"markdown","2a8357c7":"markdown","ddf14bbd":"markdown"},"source":{"a0d5cd6a":"# Immport Libraries\nimport numpy as np\nimport tensorflow.keras as keras\nfrom tensorflow.keras.preprocessing.image import ImageDataGenerator\nfrom tensorflow.keras.preprocessing import image\nfrom tensorflow.keras.applications.mobilenet import preprocess_input, decode_predictions\nfrom tensorflow.keras.layers import GlobalAveragePooling2D, Dense\nfrom tensorflow.keras.models import Model\n\nfrom IPython.display import Image","5981c589":"# Load Mobile\nmodel = keras.applications.mobilenet_v2.MobileNetV2()","2eb18faa":"def prepare_image(filepath):\n   img = image.load_img(filepath, target_size=(224, 224))\n   img_array = image.img_to_array(img)\n   img_array_expanded_dims = np.expand_dims(img_array, axis=0)\n   return keras.applications.mobilenet.preprocess_input(img_array_expanded_dims)","f22527e1":"img_file='..\/input\/xi-pooh\/pooh.jpg'\nImage(filename=img_file)","5fe8089a":"# check model prediction\npreprocessed_image = prepare_image(img_file)\npredictions = model.predict(preprocessed_image)\nresults = decode_predictions(predictions)\nprint(results)","3f133aa2":"img_file='..\/input\/xi-pooh\/xi.jpg'\nImage(filename=img_file)","010904b2":"# check model prediction\npreprocessed_image = prepare_image(img_file)\npredictions = model.predict(preprocessed_image)\nresults = decode_predictions(predictions)\nprint(results)","2ed4fadd":"!pip install google_images_download","abc89acb":"# import google_images_download\nfrom google_images_download import google_images_download\nresponse = google_images_download.googleimagesdownload()","77b09e84":"arguments = {\"keywords\":\"pooh\",\"limit\":20,\"print_urls\":False,\"format\":\"jpg\", \"size\":\">400*300\"}\npaths = response.download(arguments)","1b6b2e58":"# remove files of URLError \/ Wrong image format\n!rm .\/downloads\/\"pooh\"\/8.*\n!rm .\/downloads\/\"pooh\"\/15.*\n!rm .\/downloads\/\"pooh\"\/19.*\n!rm .\/downloads\/\"pooh\"\/17.*\n!rm .\/downloads\/\"pooh\"\/4.*\n!rm .\/downloads\/\"pooh\"\/5.*\n# rename files with special characters\n!mv .\/downloads\/\"pooh\"\/2.* .\/downloads\/\"pooh\"\/2.pooh.jpg\n!mv .\/downloads\/\"pooh\"\/18.* .\/downloads\/\"pooh\"\/18.pooh.jpg","24fef512":"arguments = {\"keywords\":\"xi\",\"limit\":20,\"print_urls\":False, \"format\":\"jpg\", \"size\":\">400*300\"}\npaths = response.download(arguments)","fa4ab8eb":"# remove files of URLError \/ Wrong image format\n!rm .\/downloads\/xi\/2.*.jpg\n!rm .\/downloads\/xi\/18.*.jpg\n!rm .\/downloads\/xi\/17.*.jpg\n!rm .\/downloads\/xi\/20.*.jpg\n# rename files with special characters\n!mv .\/downloads\/xi\/1.* .\/downloads\/xi\/1.xi.jpg","18d79578":"# Data Generator\ntrain_datagen=ImageDataGenerator(preprocessing_function=preprocess_input)\n\ntrain_generator=train_datagen.flow_from_directory('.\/downloads',\n                                                target_size=(224,224),\n                                                color_mode='rgb',\n                                                batch_size=32,\n                                                class_mode='categorical',\n                                                shuffle=True)","66052b73":"num_classes = 2\nprediction_dict = {0: \"pooh\", 1: \"xi\"}","7afcfccb":"# Load Model (MobieNet V2)\nbase_model=keras.applications.mobilenet_v2.MobileNetV2(input_shape=(224,224,3),weights='imagenet',include_top=False) #imports the mobilenet model and discards the last 1000 neuron layer.\n\n# Add Extra Layers to Model\nx=base_model.output\nx=GlobalAveragePooling2D()(x)\nx=Dense(1024,activation='relu')(x) #we add dense layers so that the model can learn more complex functions and classify for better results.\nx=Dense(1024,activation='relu')(x) #dense layer 2\nx=Dense(512,activation='relu')(x) #dense layer 3\npreds=Dense(num_classes,activation='softmax')(x) #final layer with softmax activation\n\nmodel=Model(inputs=base_model.input,outputs=preds)","15f073f9":"# Check layers no. & name\nfor i,layer in enumerate(model.layers):\n    print(i,layer.name)","80e55cd9":"# set extra layers to trainable (layer #155~159)\nfor layer in model.layers[:155]:\n    layer.trainable=False\nfor layer in model.layers[155:]:\n    layer.trainable=True\n\n# Compile Model\nmodel.compile(loss='categorical_crossentropy', optimizer='adam',metrics=['accuracy'])\nmodel.summary()","5c2ab7c6":"# Train Model (target is loss <0.01)\nnum_epochs = 10\nstep_size_train=train_generator.n\/\/train_generator.batch_size\nmodel.fit_generator(generator=train_generator, steps_per_epoch=step_size_train, epochs=num_epochs)","195f9ce7":"img_file='..\/input\/xi-pooh\/pooh.jpg'\nImage(filename=img_file)","f1bc9e98":"# Test the new model\npreprocessed_image = prepare_image(img_file)\npredictions = model.predict(preprocessed_image)\nmaxindex = int(np.argmax(predictions))\nprint(predictions[0][maxindex],prediction_dict[maxindex])","0dad5388":"img_file='..\/input\/xi-pooh\/xi.jpg'\nImage(filename=img_file)","bba857b3":"# Test the new model\npreprocessed_image = prepare_image(img_file)\npredictions = model.predict(preprocessed_image)\nmaxindex = int(np.argmax(predictions))\nprint(predictions[0][maxindex],prediction_dict[maxindex])","23471e63":"img_file='..\/input\/xi-pooh\/pooh.jpg'\nImage(filename=img_file)","ef1dfab9":"# Test the new model\npreprocessed_image = prepare_image(img_file)\npredictions = model.predict(preprocessed_image)\nprint(predictions[0])","b4570e8f":"# remove downloaded images\n!rm -rf .\/downloads","29274af5":"### Download Xi Images","9ff6243e":"## Test Model","5783c3b5":"### *Confirm the model recognize German Shepherd*","5616793b":"### *Confirm the model don't recognize Blue Tit*","68545dd1":"# Image Classification - MobileNet v2 Transfer Learning","a790db41":"### Download Pooh images","77413a84":"## Load Model (Keras built-in)","2a8f2efc":"> ## Test New Model","2a8357c7":"### Install google_images_download","ddf14bbd":"## Download Images from Internet"}}