{"cell_type":{"057b192e":"code","4d805ca0":"code","8715716e":"code","e5d8e659":"code","4d50e29f":"code","39331697":"code","4c1806eb":"code","b15f61f3":"code","a09a5ea8":"code","47d46496":"code","c9dd67ec":"code","9373872b":"code","9d014252":"code","8c2e82f6":"code","780346cc":"code","4751db10":"code","763b8b64":"code","ef2cc403":"code","260f2c81":"code","22952888":"code","a4fb65c0":"code","0d78fae1":"code","ef538c2f":"code","6220ce38":"code","13519c2c":"code","94f1008e":"code","0ed8049d":"code","da525b62":"code","13fdf99c":"code","bb88295b":"code","99014f7e":"code","cd3b1a1c":"code","e59875e0":"code","76692393":"code","5b8f109c":"code","61a65020":"code","3dab98bb":"code","e0ea12dc":"code","d94175b4":"code","276100ef":"code","5f8cf1d5":"code","bcebf8da":"code","df115078":"markdown","2ad19ba2":"markdown","40574cb9":"markdown","4521d1b8":"markdown","cda4e997":"markdown","537b2f92":"markdown","d2bdf562":"markdown","c5ad8e25":"markdown"},"source":{"057b192e":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom collections import Counter\nimport time\nimport datetime\nfrom datetime import datetime\nimport collections\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory\n\nimport os\nprint(os.listdir(\"..\/input\"))\n\n# Any results you write to the current directory are saved as output.","4d805ca0":"data = pd.read_csv('..\/input\/earthquake.csv')","8715716e":"data.columns","e5d8e659":"data.info()","4d50e29f":"data.describe()","39331697":"data.corr()","4c1806eb":"data.head(5)","b15f61f3":"data.tail(5)","a09a5ea8":"data[\"city\"].unique()","47d46496":"data[\"city\"].value_counts()","c9dd67ec":"print(data.iloc[:5,1])","9373872b":"a=data.loc[:,\"date\"]                            \nb=data.loc[:,\"time\"]\nprint (a[0], b[0])\ntype(a)                                        \n\ntemp = a+\"_\"+b                               # this is the combined form we would like to achieve\ntimeformat=\"%Y.%m.%d_%H:%M:%S %p\"\n\nnew=[datetime.strptime(x, timeformat) for x in temp]\n\n#for i in temp:\n#    i=datetime.strptime(i,timeformat)\n#why not this way??\n\nprint(\"temp =\",type(temp),\"\\n\"\"new =\",type(new),\"\\n\"\"data.time =\",type(data.date))\n\ndata.time=new\n\ndata.rename(columns={'time': 'newtime'}, inplace=True) \ndel data[\"date\"]                            # we dont need it anymore as all stored in date.time","9d014252":"data[\"year\"]=[int(datetime.strftime(x,\"%Y\")) for x in data.newtime]\ndata[\"month\"]=[int(datetime.strftime(x,\"%m\"))+int(datetime.strftime(x,\"%Y\"))*12 for x in data.newtime]","8c2e82f6":"tur=data.country == \"turkey\"\nreal=data.richter > 1\n\ncit=data[tur & real].city\ncits=cit.unique()\n\nprint(\"Total Cities =\",cit.size)\n\na=0\nfor i in cits:\n    a=a+1\n    if a==len(cits):\n        print(\"Unique Cities = {}\".format(a))\n\nf=Counter(cit)\nnewf=f.most_common()\n\nprint(type(f))\nprint(type(newf))","780346cc":"maks=max(f, key=f.get) \nmost=f.most_common(5)[0]\nmost2=f.most_common(5)[1]\nprint(\"Max number of eq occured in {} with {} eq and second is {} with {}\" .format(maks.upper(),most[1],most2[0].upper(),most2[1]))","4751db10":"yearfilter = data.year > 1997\ndata[yearfilter][[\"year\",\"country\",\"city\",\"area\",\"depth\"]].groupby([\"year\"], as_index = False).count().sort_values(by = \"year\", ascending = False)","763b8b64":"yearfilter = data.year > 1997\ndata[yearfilter][[\"year\",\"richter\",\"xm\",\"md\",\"mw\",\"ms\",\"mb\"]].groupby([\"year\"], as_index = False).count().sort_values(by = \"richter\", ascending = False)","ef2cc403":"yearfilter = data.year > 1997\ndata[yearfilter][[\"year\",\"richter\",\"long\"]].groupby([\"year\"], as_index = False).mean().sort_values(by = \"richter\", ascending = False)","260f2c81":"data.columns[data.isnull().any()]  ","22952888":"data.isnull().sum()","a4fb65c0":"data.year.plot(kind = \"hist\" , color = \"red\" , edgecolor=\"black\", bins = 100 , figsize = (12,12) , label = \"Earthquakes frequency\")\nplt.legend(loc = \"upper right\")\nplt.show()","0d78fae1":"def dist(baslik):\n    \n    \n    tur = data.country==\"turkey\"                # There arent many records before 2000 roughly, so lets filter after 1998, also just take magnitudes over 2 \n    richter = data.richter > 2\n    yearfilter = data.year > 1998\n    md = data.md > 2\n    \n    datatr= data[tur & richter & yearfilter & md]\n    \n    plt.figure(figsize=(10,5))\n    plt.hist(datatr[baslik], bins=30, color=\"blue\")\n    plt.ylabel(\"Frequency\")\n    plt.title(baslik)\n\nozet=[\"richter\", \"year\", \"md\", \"xm\",\"lat\",\"long\"]\n    \nfor each in ozet:\n    dist(each)\n    ","ef538c2f":"plt.scatter(data.year,data.country, color=\"red\", alpha=0.5)","6220ce38":"data.country.value_counts().plot(kind = \"bar\" , color = \"blue\" , figsize = (30,10),fontsize = 20)\nplt.xlabel(\"country\",fontsize=18,color=\"blue\")\nplt.ylabel(\"Frequency\",fontsize=18,color=\"blue\")\nplt.show()","13519c2c":"a=data.country.value_counts()[0:6]\nsizes=a.values\nlabels=a.index\nexplode=[0,0,0,0,0,0]\ncolors=[\"orange\",\"red\",\"blue\",\"green\",\"yellow\",\"violet\"]\nplt.figure(figsize=(7,7))\nplt.pie(sizes,explode=[0.1]*6,labels=labels,colors=colors,autopct='%1.1f%%')\nplt.title('Country',color = 'blue',fontsize = 15)","94f1008e":"data.city.value_counts().plot(kind = \"bar\" , color = \"blue\" , figsize = (30,10),fontsize = 20)\nplt.xlabel(\"City\",fontsize=18,color=\"blue\")\nplt.ylabel(\"Frequency\",fontsize=18,color=\"blue\")\nplt.show()","0ed8049d":"a=data.city.value_counts()[0:6]\nsizes=a.values\nlabels=a.index\nexplode=[0,0,0,0,0,0]\ncolors=[\"orange\",\"red\",\"blue\",\"green\",\"yellow\",\"violet\"]\nplt.figure(figsize=(7,7))\nplt.pie(sizes,explode=[0.1]*6,labels=labels,colors=colors,autopct='%1.1f%%')\nplt.title('City',color = 'blue',fontsize = 15)","da525b62":"a=data.area.value_counts()[0:6]\nsizes=a.values\nlabels=a.index\nexplode=[0,0,0,0,0,0]\ncolors=[\"orange\",\"red\",\"blue\",\"green\",\"yellow\",\"violet\"]\nplt.figure(figsize=(7,7))\nplt.pie(sizes,explode=[0.1]*6,labels=labels,colors=colors,autopct='%1.1f%%')\nplt.title('Area',color = 'blue',fontsize = 15)","13fdf99c":"data.plot(kind = \"scatter\",x=\"richter\",y = \"xm\")\nplt.show()","bb88295b":"#plt.scatter(d.long, d.lat, grid=True, label= \"latitude - duration\", color=\"red\")\ndata.plot(kind= \"scatter\", x= \"long\", y= \"lat\", grid=True, label= \"long - lat\", color=\"red\")\nplt.legend()\nplt.xlabel(\"duration\")\nplt.ylabel(\"latitude\")\nplt.title(\"long - lat\")","99014f7e":"plt.scatter(data.depth, data.mb)\nplt.legend()\nplt.xlabel(\"Depth\")\nplt.ylabel(\"Magnitude body\")\nplt.show()","cd3b1a1c":"data.plot(kind= \"scatter\", x= \"xm\", y= \"dist\",color= \"brown\", grid= True)\nplt.xlabel= \"Latitude\"\nplt.ylabel= \"md\"\nplt.legend()","e59875e0":"plt.scatter(data.depth, data.xm, color= \"green\")\nplt.legend()\nplt.xlabel = \"Depth\"\nplt.ylabel = \"xm\"\nplt.show()","76692393":"data.plot(kind= \"scatter\", x= \"depth\", y= \"dist\",color= \"purple\", grid= True)\nplt.xlabel= \"Latitude\"\nplt.ylabel= \"md\"\nplt.legend()","5b8f109c":"istanbul = data[data.city== \"istanbul\"]\nprint(istanbul)","61a65020":"print(len(istanbul), \"times in izmir except the districts\")","3dab98bb":"ankara = data[data.city== \"ankara\"]\nprint(ankara)","e0ea12dc":"print(len(ankara), \"times in izmir except the districts\")","d94175b4":"izmir = data[data.city== \"izmir\"]\nprint(izmir)","276100ef":"print(len(izmir), \"times in izmir except the districts\")","5f8cf1d5":"corum = data[data.city== \"corum\"]\nprint(corum)","bcebf8da":"corum = data[data.city== \"corum\"]\nprint(corum)","df115078":"# The reality of earthquake becomes important every day in our country. We need analysis and research to learn this truth to the most important points. For this reason, I share my analysis between 1910 and 2017 with you.\n# I wish you healt. :)","2ad19ba2":"**As we can see here we have some null areas in given data like in: \"city\" \"area\" \"direction\" columns**","40574cb9":"![Earhtmap](https:\/\/seismo.berkeley.edu\/gifs\/blog_20200126_Figure2.png)","4521d1b8":"# YARARLANDIGIM MAKALELER\n\nhttps:\/\/www.kaggle.com\/tuttypie\/earthquakes-turkey\nhttps:\/\/www.kaggle.com\/berkesun\/earthquakes-in-turkey-1910-2017-basic-eda\n","cda4e997":"**First we will convert the csv file to Panda Data Frame**","537b2f92":"**We have some null values however these are irrevelant headers for our analysis so we can ignore**","d2bdf562":"<font color = \"Blue\"> \n1. id:           id of the earthquake\n1. date:         date\n1. time:         time\n1. lat:          latitude (enlem)\n1. long:         longitude (boylam)\n1. country:      country\n1. city:         city\n1. area:         area\n1. direction:    direction\n1. dist:         distance of eq\n1. depth:        depth of eq\n1. xm:           Biggest magnitude out of MD, ML, Mw, Ms and Mb\n1. md:           Duration Magnitude\n1. richter:      Richter magnitude or local magnitude (ML)\n1. mw:           moment magnitude\n1. ms:           surface-wave magnitude\n1. mb:           body-wave magnitude","c5ad8e25":"**First we need to combine both date and time that we can use it as one parameter for each eq**"}}