{"cell_type":{"1c37f93f":"code","25907a33":"code","3d847fad":"code","fcb32b7a":"code","74da26e2":"code","d98b7f23":"code","f23a551a":"code","46e2d95f":"code","7cd4f6a5":"code","ac9a5abe":"code","a761d8bc":"code","3f1468c8":"code","023554f1":"markdown","62eb5c09":"markdown","ef10a514":"markdown","1299c2b4":"markdown","9954c441":"markdown","18f16974":"markdown","c564726d":"markdown","860af04b":"markdown","48527642":"markdown","f7042f09":"markdown","3872abe7":"markdown","26368bb6":"markdown","651bef07":"markdown","b38da494":"markdown","1b3b8ad8":"markdown","944f62b6":"markdown"},"source":{"1c37f93f":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nfrom datetime import datetime\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","25907a33":"data = pd.read_csv('\/kaggle\/input\/daily-min-temperature\/daily-min-temperatures.csv')","3d847fad":"data.head()","fcb32b7a":"data.info()","74da26e2":"data['Date'] = data['Date'].astype('datetime64[ns]')","d98b7f23":"data['month'] = data['Date'].dt.month\ndata['day'] = data['Date'].dt.day","f23a551a":"lag = pd.DataFrame(data['Temp'])\nlag_data = pd.concat([lag.shift(1), lag], axis=1)\nlag_data.columns = ['t-1', 't+1']","46e2d95f":"lag_data.head(2)","7cd4f6a5":"org = pd.DataFrame(data['Temp'])\nshifted = org.shift(1)\nwindow = shifted.rolling(window=2)\nmeans = window.mean()\nrolled_data = pd.concat([means, org], axis=1)\nrolled_data.columns = ['mean(t-2,t-1)', 't+1']","ac9a5abe":"rolled_data.head()","a761d8bc":"temps = data['Temp']\nwindow = temps.expanding()\nexpand_data = pd.concat([window.min(), window.mean(), window.max(), temps.shift(-1)], axis=1)\nexpand_data.columns = ['min', 'mean', 'max', 't+1']","3f1468c8":"expand_data.head()","023554f1":"Lag features are the classical way that time series forecasting problems are transformed into supervised learning problems.\n\nThe simplest approach is to predict the value at the next time (t+1) given the value at the previous time (t-1).\nThe supervised learning problem with shifted values looks as follows:\n\nValue(t-1), Value(t+1)\n\nValue(t-1), Value(t+1)\n\nValue(t-1), Value(t+1)\n","62eb5c09":"Let\u2019s start with some of the simplest features that we can use.\n\nThese are features from the date\/time of each observation. In fact, these can start off simply and head off into quite complex domain-specific areas.\n\nTwo features that we can start with are the integer month and day for each observation. We can imagine that supervised learning algorithms may be able to use these inputs to help tease out time-of-year or time-of-month type seasonality information.","ef10a514":"### Lag Features","1299c2b4":"We would have to discard the first row to use the dataset to train a supervised learning model, as it does not contain enough data to work with.\n\nThe addition of lag features is called the sliding window method, in this case with a window width of 1. It is as though we are sliding our focus along the time series for each observation with an interest in only what is within the window width.","9954c441":"### Expanding Window Statistics","18f16974":"### Date Time Features","c564726d":"A step beyond adding raw lagged values is to add a summary of the values at previous time steps.\n\nWe can calculate summary statistics across the values in the sliding window and include these as features in our dataset. Perhaps the most useful is the mean of the previous few values, also called the rolling mean.\n\nFor example, we can calculate the mean of the previous two values and use that to predict the next value. For the temperature data, we would have to wait 3 time steps before we had 2 values to take the average of before we could use that value to predict a 3rd value.","860af04b":"Running the example prints the first 5 rows of the new dataset. We can see that the first two rows are not useful.\n\n* The first NaN was created by the shift of the series.\n* The second because NaN cannot be used to calculate a mean value.\n* Finally, the third row shows the expected value of 19.30 (the mean of 20.7 and 17.9) used to predict the 3rd value in the series of 18.8.","48527642":"A difficulty with the sliding window approach is how large to make the window for your problem.\n\nPerhaps a good starting point is to perform a sensitivity analysis and try a suite of different window widths to in turn create a suite of different \u201cviews\u201d of your dataset and see which results in better performing models. There will be a point of diminishing returns.","f7042f09":"Another type of window that may be useful includes all previous data in the series.\n\nThis is called an expanding window and can help with keeping track of the bounds of observable data. Like the rolling() function on DataFrame, Pandas provides an expanding() function that collects sets of all prior values for each time step.\n\nThese lists of prior numbers can be summarized and included as new features.","3872abe7":"The Pandas library provides the shift() function to help create these shifted or lag features from a time series dataset. Shifting the dataset by 1 creates the t-1 column, adding a NaN (unknown) value for the first row. The time series dataset without a shift represents the t+1.","26368bb6":"### Sample of Dataset","651bef07":"Date-time based features are a good start, but it is often a lot more useful to include the values at previous time steps.","b38da494":"### Load the Dataset","1b3b8ad8":"### Rolling Window Statistics","944f62b6":"Using just the month and day information alone to predict temperature is not sophisticated and will likely result in a poor model. Nevertheless, this information coupled with additional engineered features may ultimately result in a better model."}}