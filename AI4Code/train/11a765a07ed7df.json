{"cell_type":{"51c659c6":"code","fb22bbce":"code","0266d2ee":"code","5cdb5c08":"code","6fa9f717":"code","198587f3":"code","c8eacfa0":"code","766c7b0c":"code","cb94dd42":"code","274692f7":"code","d41db5ca":"code","875bfd39":"code","a260cb68":"code","eec716a2":"code","d90380af":"code","6fc59bdc":"code","1b4ee8fb":"code","494c48bf":"code","8046ecca":"code","3c832a36":"code","067e9cb4":"code","712d788d":"code","6c306e93":"code","2b4d2864":"code","fe94fb93":"code","bc53d30e":"code","a8f37c97":"code","df7b3fcb":"code","1e8f8309":"code","26ea62bb":"code","33cd5879":"code","3bf0c566":"code","6aa84f2d":"code","05b8c3d9":"code","b2b520c8":"code","445f3217":"code","438ca3be":"code","4726b438":"code","005c8ec9":"code","b29887e6":"code","a04d6d03":"code","78b99395":"code","25ed2894":"code","3e8677ab":"code","21b1b910":"code","7b6b597e":"code","7fb40c6d":"code","9ce2fb21":"code","b4098bf9":"code","58f77bcc":"code","90ba073f":"code","6f12542d":"code","a5697a62":"code","94a14d82":"code","e4d5b10f":"code","a68d1fe8":"code","27feff56":"code","d2177b87":"code","2255c8cc":"code","4ef017d5":"code","12530eba":"code","530f42de":"code","c7f8f640":"code","ec940705":"code","00763af0":"code","662627a3":"code","b7a7630d":"code","e44f0642":"code","5b904547":"code","e15d847a":"code","8ecab20c":"code","6729c201":"code","c485da93":"code","ab76d0fa":"code","cfa1aa0f":"code","7ccd95d1":"code","0bb109cf":"code","1d2ca9f5":"code","622bb292":"code","30e6990e":"code","7ea0a931":"code","fd7083f5":"code","754af1d5":"code","bd6a845e":"code","b3579478":"code","c6ee2592":"code","e712d12f":"code","bcff6901":"code","22cba092":"code","a1c0755b":"code","9be1c89c":"code","f061fe30":"code","cf625243":"code","e451d8e3":"code","8603f93e":"code","889b8295":"code","393e5436":"code","fbb12ac0":"code","844d625b":"code","697a50a6":"code","b68a8b6d":"code","382ee03f":"code","61f4a527":"code","cf8c062f":"code","0f3abfd5":"code","7d97fc57":"code","3608848f":"code","32aa9884":"code","6a5078c0":"code","ee8c0653":"code","59c8b4d6":"code","514f3b5b":"code","4d42c675":"code","39684ff4":"code","b6de5a13":"code","8ca2d7ba":"code","3c037d89":"code","49088f4d":"code","9aac9331":"code","bf9f9478":"code","b93887f5":"code","c94e90f8":"code","5f72773c":"code","f9a85f81":"code","9071590b":"code","269cdeaa":"code","8946daec":"code","a3ad8902":"code","ec34e492":"code","cef370da":"markdown","c925ac63":"markdown","9955622c":"markdown","5c4fc70c":"markdown","7523926f":"markdown","3d100566":"markdown","119ef079":"markdown","6f73d10c":"markdown","24a3ea20":"markdown","5d3a9b2d":"markdown","9251a588":"markdown","1f206d6e":"markdown","fb3a963f":"markdown","2f942213":"markdown"},"source":{"51c659c6":"import pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\nimport seaborn as sns\nfrom copy import copy\nfrom scipy import stats\nimport plotly.express as px\nimport plotly.figure_factory as ff\nimport plotly.graph_objects as go\nimport warnings\nwarnings.filterwarnings(\"ignore\")\n","fb22bbce":"df=pd.read_csv('..\/input\/berkshire-hathaway-stock-latest-and-updated\/BekshireHathaway_stock_history.csv',index_col='Date', parse_dates=['Date'])","0266d2ee":"df","5cdb5c08":"df.info()","6fa9f717":"df.isna().sum()","198587f3":"df.duplicated().sum()","c8eacfa0":"df[df.duplicated()][40:80]","766c7b0c":"df.drop([\"Open\",\"High\",\"Low\",\"Dividends\",\"Stock Splits\"],axis=1,inplace=True)","cb94dd42":"df","274692f7":"df.describe()","d41db5ca":"def interactive_plot(df, title):\n  fig = px.line(title = title)\n  \n  # Loop through each stock (while ignoring time columns with index 0)\n  for i in df.columns:\n    fig.add_scatter(x =df.index, y = df[i], name = i) # add a new Scatter trace\n\n  fig.show()","875bfd39":"fig = px.line(title =\"Price\")\nfig.add_scatter(x =df.index, y = df[\"Close\"], name = \"Close\")\n","a260cb68":"fig = px.line(title =\"Volume\")\nfig.add_scatter(x =df.index, y = df[\"Volume\"], name = \"Volume\")","eec716a2":"returns=df[\"Close\"].pct_change().fillna(0)*100","d90380af":"returns","6fc59bdc":"fig = px.line(title =\"Returns\")\nfig.add_scatter(x =returns.index, y =returns, name = \"Returns\")","1b4ee8fb":"plt.figure(figsize=(14,6))\nsns.distplot(df[\"Close\"]);\nplt.title(\"Price Distribution\")\nplt.xlabel(\"Price\");","494c48bf":"import scipy.stats\n\nscipy.stats.probplot(df.Close,plot=plt)\nplt.title(\"QQ Plot Close Price\",size=14);","8046ecca":"plt.figure(figsize=(14,6))\nsns.distplot(df[\"Volume\"]);\nplt.title(\"Volume Distribution\")\nplt.xlabel(\"Volume\");","3c832a36":"plt.figure(figsize=(14,6))\nsns.distplot(returns);\nplt.title(\"Returns Distribution\")\nplt.xlabel(\"Returns\");","067e9cb4":"print(\"The Stock Average Return is :\",returns.mean()*100,\"%\")","712d788d":"print(f\"The Cummulative Returns is :\",(((df[\"Close\"][-1]-df[\"Close\"][0])\/df[\"Close\"][0])*100),\"%\")","6c306e93":"print(f\"The Standard Deviation of the stock is :\",df[\"Close\"].std())","2b4d2864":"volatility = returns**2","fe94fb93":"volatility.plot(figsize=(20,5))\nplt.title(\"Volatility\",size=24)\nplt.show()","bc53d30e":"print(f\"The Annual Sharpe Ratio is : {(returns.mean()*252-3)\/(returns.std()*np.sqrt(252))} \")","a8f37c97":"moving_avrge=df[\"Close\"].rolling(21).mean()","df7b3fcb":"fig = px.line(x = df.index[20:], y = df[\"Close\"][20:], title =  \"Stock Price vs. 21-days Moving Average change\")\nfig.add_scatter(x = moving_avrge.index[20:], y = moving_avrge[20:], name = '21-days moving average')\nfig.show()","1e8f8309":"signals = copy(df[\"Close\"])","26ea62bb":"signals","33cd5879":"# logic to create buy (1) and sell (-1) signal\n# if price is above the moving average, we buy since the trend is up\n# if the price is below the moving average, we sell since the trend is down\n# The moving average is a technical stock analysis tool that works by smoothing out price data or noise due to random short-term price fluctuations.\n# As you increase the averaging window (look back window), the curve tend to become more smoother\n\n\nfor i in range(21, len(df)):\n        \n        if  df[\"Close\"][i] > moving_avrge[i]:\n          signals[i] = 1\n\n        elif  df[\"Close\"][i] < moving_avrge[i]:\n            signals[i] = -1\n            \n        else:\n          signals[i] = 0\n\n","3bf0c566":"signals=signals[21:]","6aa84f2d":"signals","05b8c3d9":"sns.countplot(signals);","b2b520c8":"import statsmodels.graphics.tsaplots as sgt\nimport statsmodels.tsa.stattools as sts","445f3217":"p=sts.adfuller(df[\"Close\"])[1]\nif p<0.05:\n    print(\"Reject Null Hipothesis. Serie is Stationary : P value---> \",p)\nelse:\n    print(\"Not Reject Null Hipothesis. Serie is not Stationary : P value---> \",p)","438ca3be":"from statsmodels.graphics.tsaplots import plot_acf\n\nsgt.plot_acf(df[\"Close\"], lags = 40)\nplt.title(\"ACF for Close Price\",size=24)\nplt.show()","4726b438":"sgt.plot_pacf(df[\"Close\"], lags = 40)\nplt.title(\"PACF for Close Price\",size=24)\nplt.show()","005c8ec9":"\ndf_train=df.iloc[:-15]\ndf_test=df.iloc[-15:]","b29887e6":"df_train","a04d6d03":"df_test","78b99395":"df_train.shape,df_test.shape","25ed2894":"!pip install pmdarima","3e8677ab":"\nfrom pmdarima.arima import auto_arima","21b1b910":"model_auto = auto_arima(df_train.Close,\n                       max_order = None, max_p =10, max_q = 10, max_d = 1,\n                       maxiter = 50, alpha = 0.05, n_jobs = -1, trend = 'ct', information_criterion = 'aic')","7b6b597e":"model_auto.summary()","7fb40c6d":"start_date= \"2021-11-10\"\nend_date= \"2021-12-01\"\ndf_auto_pred = pd.DataFrame(model_auto.predict(n_periods = len(df_test[start_date:end_date])))\ndf_auto_pred.index=df_test[start_date:end_date].index","9ce2fb21":"predictions=pd.concat([df_test,df_auto_pred],axis=1)\npredictions.columns=[\"Price\",\"Volume\",\"Prediction\"]","b4098bf9":"predictions.drop(\"Volume\",axis=1,inplace=True)","58f77bcc":"predictions.plot(figsize=(16,8))\nplt.title(\"SARIMA (2,1,2)(2,0,0,5) Predictions\");","90ba073f":"from sklearn.metrics import mean_squared_error,mean_absolute_error","6f12542d":"print(\"MSE\",mean_squared_error(predictions[\"Price\"],predictions[\"Prediction\"]))\nprint(\"RMSE\",np.sqrt(mean_squared_error(predictions[\"Price\"],predictions[\"Prediction\"])))\nprint(\"MAE\",mean_absolute_error(predictions[\"Price\"],predictions[\"Prediction\"]))","a5697a62":"df[\"Target\"]=df[\"Close\"].shift(-1)","94a14d82":"df=df.dropna()","e4d5b10f":"split=int(0.70*df.shape[0])","a68d1fe8":"X_train=df.drop(\"Target\",axis=1)[:split]\ny_train=df[\"Target\"][:split]","27feff56":"len(X_train),len(y_train)","d2177b87":"X_test=df.drop(\"Target\",axis=1)[split:]\ny_test=df[\"Target\"][split:]","2255c8cc":"len(X_test),len(y_test)","4ef017d5":"len(X_test)+len(X_train)","12530eba":"from sklearn.preprocessing import MinMaxScaler\n\nscaler=MinMaxScaler(feature_range=(0,1))\nX_train=scaler.fit_transform(X_train)\nX_test=scaler.transform(X_test)","530f42de":"X_train","c7f8f640":"X_test","ec940705":"y_train","00763af0":"from sklearn.linear_model import Ridge","662627a3":"rr=Ridge()\nrr.fit(X_train,y_train)","b7a7630d":"predictions=rr.predict(X_train)\npredictions2=rr.predict(X_test)","e44f0642":"rr_rmse=np.sqrt(mean_squared_error(y_test,predictions2))\nprint(f\"RMSE score for training is {np.sqrt(mean_squared_error(y_train,predictions))}\")\nprint(f\"RMSE score for testing is {np.sqrt(mean_squared_error(y_test,predictions2))}\")","5b904547":"fig = px.line(x = y_test.index, y = y_test.values,title=\"Price\")\nfig.add_scatter(x =y_test.index, y =predictions2,name=\"Prediction\")\nfig.show()","e15d847a":"from sklearn.linear_model import LinearRegression","8ecab20c":"lm=LinearRegression()","6729c201":"\nlm.fit(X_train,y_train)","c485da93":"predictions=lm.predict(X_train)\npredictions2=lm.predict(X_test)","ab76d0fa":"lm_rmse=np.sqrt(mean_squared_error(y_test,predictions2))\nprint(f\"RMSE score for training is {np.sqrt(mean_squared_error(y_train,predictions))}\")\nprint(f\"RMSE score for testing is {np.sqrt(mean_squared_error(y_test,predictions2))}\")","cfa1aa0f":"fig = px.line(x = y_test.index, y = y_test.values,title=\"Price\")\nfig.add_scatter(x =y_test.index, y =predictions2,name=\"Prediction\")\nfig.show()","7ccd95d1":"from sklearn.linear_model import Lasso\nlasso=Lasso()","0bb109cf":"lasso.fit(X_train,y_train)","1d2ca9f5":"predictions=lasso.predict(X_train)\npredictions2=lasso.predict(X_test)","622bb292":"lasso_rmse=np.sqrt(mean_squared_error(y_test,predictions2))\nprint(f\"RMSE score for training is {np.sqrt(mean_squared_error(y_train,predictions))}\")\nprint(f\"RMSE score for testing is {np.sqrt(mean_squared_error(y_test,predictions2))}\")","30e6990e":"fig = px.line(x = y_test.index, y = y_test.values,title=\"Price\")\nfig.add_scatter(x =y_test.index, y =predictions2,name=\"Prediction\")\nfig.show()","7ea0a931":"from sklearn.linear_model import ElasticNet\nelasticnet=ElasticNet()","fd7083f5":"elasticnet.fit(X_train,y_train)","754af1d5":"predictions=elasticnet.predict(X_train)\npredictions2=elasticnet.predict(X_test)","bd6a845e":"elasticnet_rmse=np.sqrt(mean_squared_error(y_test,predictions2))\nprint(f\"RMSE score for training is {np.sqrt(mean_squared_error(y_train,predictions))}\")\nprint(f\"RMSE score for testing is {np.sqrt(mean_squared_error(y_test,predictions2))}\")","b3579478":"fig = px.line(x = y_test.index, y = y_test.values,title=\"Price\")\nfig.add_scatter(x =y_test.index, y =predictions2,name=\"Prediction\")\nfig.show()","c6ee2592":"from sklearn.linear_model import Lars","e712d12f":"lars=Lars()","bcff6901":"lars.fit(X_train,y_train)","22cba092":"predictions=lars.predict(X_train)\npredictions2=lars.predict(X_test)","a1c0755b":"lars_rmse=np.sqrt(mean_squared_error(y_test,predictions2))\nprint(f\"RMSE score for training is {np.sqrt(mean_squared_error(y_train,predictions))}\")\nprint(f\"RMSE score for testing is {np.sqrt(mean_squared_error(y_test,predictions2))}\")","9be1c89c":"fig = px.line(x = y_test.index, y = y_test.values,title=\"Price\")\nfig.add_scatter(x =y_test.index, y =predictions2,name=\"Prediction\")\nfig.show()","f061fe30":"from sklearn.linear_model import HuberRegressor","cf625243":"hr=HuberRegressor()","e451d8e3":"hr.fit(X_train,y_train)","8603f93e":"predictions=hr.predict(X_train)\npredictions2=hr.predict(X_test)","889b8295":"hr_rmse=np.sqrt(mean_squared_error(y_test,predictions2))\nprint(f\"RMSE score for training is {np.sqrt(mean_squared_error(y_train,predictions))}\")\nprint(f\"RMSE score for testing is {np.sqrt(mean_squared_error(y_test,predictions2))}\")","393e5436":"fig = px.line(x = y_test.index, y = y_test.values,title=\"Price\")\nfig.add_scatter(x =y_test.index, y =predictions2,name=\"Prediction\")\nfig.show()","fbb12ac0":"from sklearn.linear_model import TheilSenRegressor","844d625b":"tsr=TheilSenRegressor()","697a50a6":"tsr.fit(X_train,y_train)","b68a8b6d":"predictions=tsr.predict(X_train)\npredictions2=tsr.predict(X_test)","382ee03f":"tsr_rmse=np.sqrt(mean_squared_error(y_test,predictions2))\nprint(f\"RMSE score for training is {np.sqrt(mean_squared_error(y_train,predictions))}\")\nprint(f\"RMSE score for testing is {np.sqrt(mean_squared_error(y_test,predictions2))}\")","61f4a527":"fig = px.line(x = y_test.index, y = y_test.values,title=\"Price\")\nfig.add_scatter(x =y_test.index, y =predictions2,name=\"Prediction\")\nfig.show()","cf8c062f":"from sklearn.linear_model import PassiveAggressiveRegressor","0f3abfd5":"par=PassiveAggressiveRegressor()","7d97fc57":"par.fit(X_train,y_train)","3608848f":"predictions=par.predict(X_train)\npredictions2=par.predict(X_test)","32aa9884":"par_rmse=np.sqrt(mean_squared_error(y_test,predictions2))\nprint(f\"RMSE score for training is {np.sqrt(mean_squared_error(y_train,predictions))}\")\nprint(f\"RMSE score for testing is {np.sqrt(mean_squared_error(y_test,predictions2))}\")","6a5078c0":"fig = px.line(x = y_test.index, y = y_test.values,title=\"Price\")\nfig.add_scatter(x =y_test.index, y =predictions2,name=\"Prediction\")\nfig.show()","ee8c0653":"from sklearn.linear_model import BayesianRidge","59c8b4d6":"br=BayesianRidge()","514f3b5b":"br.fit(X_train,y_train)","4d42c675":"predictions=br.predict(X_train)\npredictions2=br.predict(X_test)","39684ff4":"br_rmse=np.sqrt(mean_squared_error(y_test,predictions2))\nprint(f\"RMSE score for training is {np.sqrt(mean_squared_error(y_train,predictions))}\")\nprint(f\"RMSE score for testing is {np.sqrt(mean_squared_error(y_test,predictions2))}\")","b6de5a13":"fig = px.line(x = y_test.index, y = y_test.values,title=\"Price\")\nfig.add_scatter(x =y_test.index, y =predictions2,name=\"Prediction\")\nfig.show()","8ca2d7ba":"from sklearn.linear_model import SGDRegressor","3c037d89":"sgdr=SGDRegressor()\nsgdr.fit(X_train,y_train)","49088f4d":"predictions=sgdr.predict(X_train)\npredictions2=sgdr.predict(X_test)","9aac9331":"sgdr_rmse=np.sqrt(mean_squared_error(y_test,predictions2))\nprint(f\"RMSE score for training is {np.sqrt(mean_squared_error(y_train,predictions))}\")\nprint(f\"RMSE score for testing is {np.sqrt(mean_squared_error(y_test,predictions2))}\")","bf9f9478":"fig = px.line(x = y_test.index, y = y_test.values,title=\"Price\")\nfig.add_scatter(x =y_test.index, y =predictions2,name=\"Prediction\")\nfig.show()","b93887f5":"from sklearn.linear_model import ARDRegression","c94e90f8":"ardr=ARDRegression()","5f72773c":"ardr.fit(X_train,y_train)","f9a85f81":"predictions=ardr.predict(X_train)\npredictions2=ardr.predict(X_test)","9071590b":"ardr_rmse=np.sqrt(mean_squared_error(y_test,predictions2))\nprint(f\"RMSE score for training is {np.sqrt(mean_squared_error(y_train,predictions))}\")\nprint(f\"RMSE score for testing is {np.sqrt(mean_squared_error(y_test,predictions2))}\")","269cdeaa":"fig = px.line(x = y_test.index, y = y_test.values,title=\"Price\")\nfig.add_scatter(x =y_test.index, y =predictions2,name=\"Prediction\")\nfig.show()","8946daec":"models = pd.DataFrame({\n    'Model' : ['Linear Regression',\"Ridge Regression\",\"Lasso Regression\",\"Elastic Net Regressor\",\"SGD Regressor\",\"Lars\",\"ARDRegressor\",\"Bayesian Ridge Regressor\",\"Huber Regressor\",\"Theil-Sen Regressor\",\"Passive Aggressive Regressor\"],\n    'Score' : [lm_rmse,rr_rmse,lasso_rmse,elasticnet_rmse,sgdr_rmse,lars_rmse,ardr_rmse,br_rmse,hr_rmse,tsr_rmse,par_rmse]\n})","a3ad8902":"models","ec34e492":"models.sort_values(by = 'Score', ascending =True)","cef370da":"* We shift the data for using supervised algorithms","c925ac63":"# Thx for watching. Any feedback is very appreciated","9955622c":"## Linear Models","5c4fc70c":"* We suspect that this duplicates are filled values","7523926f":"#### We are going to create \"signals\" that are used to tell us if we have to sell or buy by using the moving average","3d100566":"* \"The Sharpe ratio was developed by Nobel laureate William F. Sharpe and is used to help investors understand the return of an investment compared to its risk.1 The ratio is the average return earned in excess of the risk-free rate per unit of volatility or total risk. Volatility is a measure of the price fluctuations of an asset or portfolio\"\n\nhttps:\/\/www.investopedia.com\/terms\/s\/sharperatio.asp","119ef079":"* The prediction is not good but it is fine","6f73d10c":"# Predictions","24a3ea20":"We see that the best model is the Theil -Sen Regressor","5d3a9b2d":"# Data Preprocessing","9251a588":"# Statistical Analysis","1f206d6e":"* The higher the standard deviation, the more volatile the stock is","fb3a963f":"# Data Visualization","2f942213":"## MA"}}