{"cell_type":{"3d2a8399":"code","69ce4eed":"code","bc02f8a5":"code","72c04f83":"code","4a578bb7":"code","96d096b0":"code","bd63e2ca":"code","27b983ff":"code","6e2346ba":"code","6ae91b6d":"code","93636848":"code","336d1734":"code","d9f89b89":"code","e7edc290":"code","d30b3d2e":"code","b501e06d":"code","fa73f782":"markdown","a7279abf":"markdown","71f717a1":"markdown","2e5a0f36":"markdown","f6384e1c":"markdown","46105ed2":"markdown","3f6513b0":"markdown","83cfd9be":"markdown","2519818e":"markdown","43d4d48b":"markdown","61e8db10":"markdown","da70f916":"markdown","ec794f87":"markdown","d0f87b9d":"markdown","f475097f":"markdown","e51d01e6":"markdown","3181efb0":"markdown","ad5081d1":"markdown","4c0d7343":"markdown","19892809":"markdown","a01c8e96":"markdown","8b278fa9":"markdown","27fa6c94":"markdown","b1632f23":"markdown","21eab9f1":"markdown","e2902e80":"markdown","c63f96e2":"markdown","6831e17d":"markdown","ceaa0f30":"markdown","36a1e842":"markdown","c98335dd":"markdown","9caa3f58":"markdown","4cc9505d":"markdown"},"source":{"3d2a8399":"import numpy as np\nimport matplotlib.pyplot as plt\nimport pandas as pd\n\nfrom tensorflow import random\nfrom sklearn.preprocessing import MinMaxScaler\nfrom keras.models import Sequential\nfrom keras.layers import LSTM, Dense, Dropout","69ce4eed":"dataset_training = pd.read_csv('..\/input\/amazonstockprice\/AMZN_train.csv')\ndataset_training.head()","bc02f8a5":"training_data = dataset_training[['Open']].values\ntraining_data","72c04f83":"scaler = MinMaxScaler(feature_range=(0, 1))\n\n# Preprocessing training data\ntraining_data_scaled = scaler.fit_transform(training_data)\ntraining_data_scaled","4a578bb7":"X_train = []\ny_train = []\n\n# 60 timestamps\nfor i in range(60, 1258):\n    X_train.append(training_data_scaled[i-60:i, 0])\n    y_train.append(training_data_scaled[i, 0])\n    \nX_train, y_train = np.array(X_train), np.array(y_train)","96d096b0":"X_train = np.reshape(X_train, (X_train.shape[0], X_train.shape[1], 1))\nX_train","bd63e2ca":"seed = 1\nnp.random.seed(seed)\nrandom.set_seed(seed)","27b983ff":"model = Sequential()\n\n# First LSTM layer\nmodel.add(LSTM(50, return_sequences=True, input_shape=(X_train.shape[1], 1)))\n\n# Second LSTM layer\nmodel.add(LSTM(50, return_sequences=True))\n\n# Third LSTM layer\nmodel.add(LSTM(50, return_sequences=True))\n\n# Fourth LSTM layer\nmodel.add(LSTM(50))\n\n# Output layer\nmodel.add(Dense(1))","6e2346ba":"model.compile(optimizer='adam', loss='mean_squared_error')","6ae91b6d":"model.fit(X_train, y_train, epochs=100, batch_size=32)","93636848":"dataset_testing = pd.read_csv('..\/input\/amazonstockprice\/AMZN_test.csv')\nactual_stock_price = dataset_testing[['Open']].values\nactual_stock_price","336d1734":"total_data = pd.concat((dataset_training['Open'], dataset_testing['Open']), axis=0)","d9f89b89":"inputs = total_data[len(total_data) - len(dataset_testing) - 60:].values\ninputs = inputs.reshape(-1, 1)\ninputs = scaler.transform(inputs)","e7edc290":"X_test = []\n\nfor i in range(60, 81):\n    X_test.append(inputs[i-60:i, 0])\n\nX_test = np.array(X_test)\nX_test = np.reshape(X_test, (X_test.shape[0], X_test.shape[1], 1))","d30b3d2e":"predicted_stock_price = model.predict(X_test)\n\n# Reescale the data\npredicted_stock_price = scaler.inverse_transform(predicted_stock_price)","b501e06d":"# Actual price\nplt.plot(actual_stock_price, color = 'blue',label = 'Real Amazon Stock Price', ls='--')\n# Predicted price\nplt.plot(predicted_stock_price, color = 'red', label = 'Predicted Amazon Stock Price', ls='-')\n\nplt.title('PREDICTED AMAZON STOCK PRICE')\nplt.xlabel('Time in days')\nplt.ylabel('Real Stock Price')\nplt.legend()\n\nplt.show()","fa73f782":"### X_test","a7279abf":"We are going to make our prediction using the **Open** stock price; therefore, select the Open stock price column from the dataset and print the values:","71f717a1":"# Validation","2e5a0f36":"### Load test data","f6384e1c":"# Libraries","46105ed2":"### Select only \"Open\" column","3f6513b0":"# References","83cfd9be":"### Compile the model","2519818e":"# Objective","43d4d48b":"# Load data","61e8db10":"If you do not know what is RNN or LSTM, or want to increase your knowledge about it, I recommend reading these tutorials: [Long Short-Term Memory Networks (LSTMs)](https:\/\/machinelearningmastery.com\/start-here\/#lstm)","da70f916":"# Modeling","ec794f87":"### Concatenate data","d0f87b9d":"- The Deep Learning with Keras Workshop - [Packt](https:\/\/courses.packtpub.com\/)","f475097f":"Then, perform feature scaling by normalizing the data using **MinMaxScaler** and setting the range of the features so that they have a minimum value of 0 and a maximum value of 1:","e51d01e6":"### Make predictions","3181efb0":"# Create X_train and y_train","ad5081d1":"We can see that, although the actual and predicted prices are quite different, the model was able to predict trends (where the price **goes up** and where the price **goes down**) correctly.","4c0d7343":"Reshape and scale the input to prepare the test data. Note that we are predicting the January monthly trend, which has **21** financial days, so in order to prepare the test set, we take the lower bound value as 60 and the upper bound value as 81. This ensures that the difference of **21** is maintained:","19892809":"Concatenate the data; we will need **60** previous instances in order to get the stock price for each day. Therefore, we will need both training and test data:","a01c8e96":"### Seed","8b278fa9":"# Preprocessing","27fa6c94":"Add an LSTM layer to the network with **50** units, set the return_sequences argument to **True**, and set the input_shape argument to **(X_train.shape[1], 1)**. Add **three additional LSTM layers**, each with **50** units, and set the return_sequences argument to **True** for the first two, as follows:","b1632f23":"Create the data to get **60** timestamps from the current instance. We chose **60** here as this will give us a sufficient number of previous instances so that we can understand the trend; technically, this can be any number, but **60** is the optimal value. Additionally, the upper bound value here is **1258**, which is the index or count of rows (or records) in the training set:","21eab9f1":"# Conclusion","e2902e80":"### Reshape","c63f96e2":"### Visualize the results","6831e17d":"Next, reshape the data to add an extra dimension to the end of X_train using NumPy's reshape function:","ceaa0f30":"### Important","36a1e842":"We will examine the **stock price of Amazon** for the last 5 years - that is, from January 1, 2014, to December 31, 2018. In doing so, we will try to predict and forecast the company's future trend for January 2019 using an **RNN** and **LSTM**. We have the actual values for January 2019, so we can compare our predictions to the actual values later.","c98335dd":"### Fit the model","9caa3f58":"### Reshape","4cc9505d":"### Model"}}