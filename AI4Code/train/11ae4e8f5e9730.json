{"cell_type":{"cfbcc259":"code","ac7b97c7":"code","e59b9dfb":"code","f7513f68":"code","bcaf8d07":"code","5de75e86":"code","43bebc6a":"code","d23a86c3":"code","7175501d":"markdown","560912ad":"markdown","3f727ff0":"markdown","337e602f":"markdown"},"source":{"cfbcc259":"!pip install wget\n!pip install pylightxl","ac7b97c7":"import wget\nimport pylightxl as xl\nimport pandas as pd","e59b9dfb":"# Clear all files\n! rm *\n\n# Download files\n\n# CUB\/m\u00b2 - Unidades da Federa\u00e7\u00e3o - Global\nwget.download('http:\/\/www.cbicdados.com.br\/media\/anexos\/tabela_06.A.06_BI_10.xlsx', 'cub_global.xlsx')\n\n# CUB\/m\u00b2 - Unidades da Federa\u00e7\u00e3o - Componente Materiais\nwget.download('http:\/\/www.cbicdados.com.br\/media\/anexos\/tabela_06.A.07_BI_10.xlsx', 'cub_cm.xlsx')\n\n# CUB\/m\u00b2 - Unidades da Federa\u00e7\u00e3o - Componente M\u00e3o de Obra\nwget.download('http:\/\/www.cbicdados.com.br\/media\/anexos\/tabela_06.A.08_BI_10.xlsx', 'cub_cmo.xlsx')\n\n# CUB\/m\u00b2 - Unidades da Federa\u00e7\u00e3o - Componente Despesa Administrativa\nwget.download('http:\/\/www.cbicdados.com.br\/media\/anexos\/tabela_06.A.09_BI_10.xlsx', 'cub_cda.xlsx')\n\n# CUB\/m\u00b2 - Unidades da Federa\u00e7\u00e3o - Componente Equipamento\nwget.download('http:\/\/www.cbicdados.com.br\/media\/anexos\/tabela_06.A.10_BI_10.xlsx', 'cub_ce.xlsx')\n\n# Evolu\u00e7\u00e3o do valor m\u00e9dio\/mediano do A\u00e7o CA 50 de 10mm (em R$\/Kg) - UF e M\u00e9dia Brasil\nwget.download('http:\/\/www.cbicdados.com.br\/media\/anexos\/tabela_07.B.01_91.xlsx', 'evo_ca50.xlsx')","f7513f68":"# Repeat values on empty lines\ndef repeat_val(list):\n    # param list: list of values, column\n    aux = ''\n    list_aux = []\n\n    for i in list:\n        if i == '':\n            i = aux\n        else:\n            aux = i\n\n        list_aux.append(i)\n        \n    return(list_aux)\n\n# Worksheet to dataframe\ndef ws_to_df(xlsx, ws):\n    # param xlsx:  object pylightxl\n    # param ws: Worksheet name\n\n    ss = []\n\n    for col in xlsx.ws(ws=ws).cols:\n        ss.append(col)\n\n    ss[0] = repeat_val(ss[0])\n\n    df = pd.DataFrame(ss[0], columns=['col_0'])\n\n    for i in range(len(ss)-1):\n        df = pd.concat([df, pd.DataFrame(ss[i+1], columns=[f'col_{i+1}']).reindex(df.index)], axis=1)\n    \n    df['state'] = ws\n        \n    return df\n\n# Format dataframe output\ndef format_output(df):\n    \n    # Select relevant columns    \n    df = df[['col_0', 'col_1', 'state', 'col_2']]\n    \n    # Rename columns    \n    df = df.rename(columns = {'col_0':'year', 'col_1':'month', 'col_2':'value'})\n    \n    # Select years\n    df['year'] = df['year'].map(str)    \n    df = df.query('year>\"1500\" & year <= \"3000\"')\n    \n    # Change nominal months to integer\n    df['month'] = df['month'].map({'JAN': '1', 'FEV': '2', 'MAR': '3', 'ABR': '4',\n                                    'MAI': '5', 'JUN': '6', 'JUL': '7', 'AGO': '8',\n                                    'SET': '9', 'OUT': '10', 'NOV': '11', 'DEZ': '12'})\n    \n    # Change column type\n    df['year'] = df['year'].map(int)\n    df['month'] = df['month'].map(int)\n    \n    # Filter nan values\n    df = df.query('value!=\"\"')\n    df = df.query('value!=\"...\"')\n    \n    return df\n\n# \ndef pivot_ca50_state(df, col):\n    \n    df = df[['year', 'month', col]]\n    df['state'] = df.iloc[0][col]\n    \n    df = df.rename(columns = {col:'value'})\n    \n    # Select years\n    df['year'] = df['year'].map(str)    \n    df = df.query('year>\"1500\" & year <= \"3000\"')\n    \n    return df\n\n# \ndef pivot_ca50(df):\n    \n    cols = df.iloc[:,2:23].columns\n    \n    df_aux = pd.DataFrame(columns = ['year', 'month', 'value'])\n    \n    for col in cols:\n        df_aux = pd.concat([df_aux, pivot_ca50_state(df, col)])\n        \n    return df_aux\n\n\n# Format dataframe output\ndef format_output_ca50(df):\n    \n    # Select relevant rows    \n    df = df.loc[4:]\n    \n    # Rename columns    \n    df = df.rename(columns = {'col_0':'year', 'col_1':'month'})\n    \n    df = pivot_ca50(df)    \n    \n    # Change nominal months to integer\n    df['month'] = df['month'].map({'JAN': '1', 'FEV': '2', 'MAR': '3', 'ABR': '4',\n                                    'MAI': '5', 'JUN': '6', 'JUL': '7', 'AGO': '8',\n                                    'SET': '9', 'OUT': '10', 'NOV': '11', 'DEZ': '12'})\n    \n    # Change column type\n    df['year'] = df['year'].map(int)\n    df['month'] = df['month'].map(int)\n    \n    # Filter nan values\n    df = df.query('value!=\"\"')\n    df = df.query('value!=\"...\"')\n    \n    return df\n\n# XLSX file to dataframe\ndef xlsx_to_df(path, label):\n\n    df = pd.DataFrame(columns = ['col_0'])\n\n    # Read xlsx\n    xlsx = xl.readxl(path)\n\n    for ws in xlsx.ws_names:\n        df = pd.concat([df, ws_to_df(xlsx, ws)])\n        \n    if label == 'ca50':\n        df = format_output_ca50(df)\n    else:\n        df = format_output(df)\n    \n    df = df.rename(columns = {'value':f'{label}_value'})\n    \n    return df","bcaf8d07":"# Convert all downloaded files into a single dataframe\n\ndf_g = xlsx_to_df('cub_global.xlsx', 'global') # Global - Valo Total componentes\ndf_cm  = xlsx_to_df('cub_cm.xlsx',  'cm')  # Componente Materiais\ndf_cmo = xlsx_to_df('cub_cmo.xlsx', 'cmo') # Componente M\u00e3o de Obra\ndf_cda = xlsx_to_df('cub_cda.xlsx', 'cda') # Componente Despesa Administrativa\ndf_ce  = xlsx_to_df('cub_ce.xlsx',  'ce')  # Componente Equipamento\n\ndf_ca50  = xlsx_to_df('evo_ca50.xlsx', 'ca50')  # Evolu\u00e7\u00e3o CA50\n\ndf = pd.merge(df_g, df_cm,   on=['year', 'month', 'state'])\ndf = pd.merge(df,   df_cmo,  on=['year', 'month', 'state'])\ndf = pd.merge(df,   df_cda,  on=['year', 'month', 'state'])\ndf = pd.merge(df,   df_ce,   on=['year', 'month', 'state'])\ndf = pd.merge(df,   df_ca50, on=['year', 'month', 'state'])","5de75e86":"df.sort_values(by=['year', 'month'], ascending=False).head()","43bebc6a":"df.to_csv('dataset.csv', header=True, index=False)","d23a86c3":"# Remove temp files\n!rm cub_global.xlsx\n!rm cub_cm.xlsx\n!rm cub_cmo.xlsx\n!rm cub_cda.xlsx\n!rm cub_ce.xlsx\n!rm evo_ca50.xlsx","7175501d":"## Files to Dataframe","560912ad":"# **CUB M\u00e9dio Brasil - Custo Unit\u00e1rio B\u00e1sico de Constru\u00e7\u00e3o por m\u00b2**\n\n<p>O Custo Unit\u00e1rio B\u00e1sico de Constru\u00e7\u00e3o (CUB) \u00e9 um indicador de custos no setor da constru\u00e7\u00e3o calculado e divulgado pelos Sinduscons estatuais e regido pela Lei Federal 4.591\/64.\n<p>O CUB Brasil \u00e9 uma m\u00e9dia ponderada dos indicadores de alguns dos principais estados da federa\u00e7\u00e3o. Este t\u00f3pico cont\u00e9m informa\u00e7\u00f5es sobre a evolu\u00e7\u00e3o do CUB Brasil e dos estados que o comp\u00f5em.\n\nhttp:\/\/www.cbicdados.com.br\/menu\/custo-da-construcao\/cub-medio-brasil-custo-unitario-basico-de-construcao-por-m2\n    \n# **A\u00e7o - 10mm e Produtos de A\u00e7o Longo**\n<p>Informa\u00e7\u00f5es sobre a produ\u00e7\u00e3o e o consumo aparente de a\u00e7o segundo dados do Instituto A\u00e7o Brasil e tamb\u00e9m sobre a evolu\u00e7\u00e3o do pre\u00e7o do A\u00e7o 10mm no Brasil e em alguns estados segundo dados do CUB Brasil\n    \nhttp:\/\/www.cbicdados.com.br\/menu\/materiais-de-construcao\/aco-10mm-e-produtos-de-aco-longo","3f727ff0":"## Files Functions","337e602f":"## Get files"}}