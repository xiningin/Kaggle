{"cell_type":{"3de4bb90":"code","8570eedc":"code","8ece6a9a":"code","04ce8101":"code","df02b983":"code","e4b83009":"code","9cf58bbe":"code","e7e4ab1d":"code","4f501b07":"code","f15e0c4d":"code","f5cac244":"code","97561041":"code","854cb41c":"code","b81d1725":"code","54897479":"code","237491e9":"code","7a79edba":"code","8316d6ba":"code","86b64de8":"code","d64ce6c7":"code","38d8703d":"code","51f46b5d":"code","75e1a65e":"code","c308726d":"code","e9356eaa":"code","ee519348":"code","0f31d780":"code","7f3e3466":"code","c76857bd":"code","3bd1daa1":"code","92ac1b42":"code","4c3869dc":"code","dada1b01":"code","ca1fd47a":"code","c4a1d411":"code","22f8fbe3":"code","b5b0aec9":"code","18469ad5":"code","750027f7":"code","3c4fb9c0":"code","f2636ae8":"code","a6aededd":"code","f5d277a4":"code","ebc7ce74":"code","9dd93e7b":"code","47586f5a":"code","732b0e69":"code","e7e0a1b4":"code","3f8e6c2e":"code","a0f7bb78":"code","7eb30dbc":"code","3da4e7a9":"code","31c5e41a":"code","d44041d4":"code","f0766bd5":"code","ad276f69":"code","3be0afd9":"code","aa6e6919":"code","9fb54460":"code","b3c9181f":"code","79d49b93":"code","4154f9c9":"code","55511d02":"code","1203cf9c":"code","643e2d87":"code","f9fdb244":"code","e0553976":"code","c5fa025b":"code","03ae8302":"code","031c8577":"code","d6ed2c4b":"code","1b2dad96":"code","910e5bbc":"code","1bd86b79":"code","eaf55891":"code","2e3f3098":"code","07eba03d":"code","ada0773a":"code","c98af068":"code","03677877":"code","774759af":"code","d98e1650":"code","81e11074":"code","5d218a55":"code","ce1ec4d1":"code","ed85274f":"code","16d797d3":"code","bba31420":"code","a1ee2702":"code","6bba1355":"code","306afc8d":"code","f122d5fc":"markdown","3b955f7c":"markdown","da83271a":"markdown","936c9c98":"markdown","c5721a4e":"markdown","334e30f3":"markdown","0fa327f7":"markdown","a260a2ec":"markdown","0ad78041":"markdown","02d4960e":"markdown","71776454":"markdown","7734a7fe":"markdown","01b04f81":"markdown","c5a1893d":"markdown","5100de04":"markdown","46b183e6":"markdown","c467a2a7":"markdown","0702b994":"markdown","8f92b250":"markdown","7991a6a6":"markdown","2e0a1523":"markdown","9c885298":"markdown","e0bd93e0":"markdown","fcecac0d":"markdown","2c264615":"markdown","9e96cb6c":"markdown","b399938e":"markdown","b93df0f2":"markdown","9ebc16b5":"markdown","2e24e6ed":"markdown","e9a10558":"markdown","a5eb3b36":"markdown","c7617d65":"markdown","f4175500":"markdown","33ef26da":"markdown","c274a0f0":"markdown","07c151c1":"markdown","acd2e7ed":"markdown","9befda40":"markdown","275a0d92":"markdown","f7562156":"markdown","3817c6b6":"markdown","fddbf734":"markdown","5245e050":"markdown","ac52756e":"markdown","e8d4d48d":"markdown","3105e7be":"markdown"},"source":{"3de4bb90":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport seaborn as sns\nfrom collections import Counter\nimport warnings\nwarnings.filterwarnings('ignore')\n#pythondan kaynakl\u0131 sorunlar\u0131 g\u00f6sterme demek\nimport matplotlib.pyplot as plt\nplt.style.use('seaborn-whitegrid')\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","8570eedc":"#plt.style.available\n#GRID'S COLOR","8ece6a9a":"train_df = pd.read_csv('\/kaggle\/input\/titanic\/train.csv')\n\ntest_df = pd.read_csv('\/kaggle\/input\/titanic\/test.csv')\ntest_PassengerId = test_df['PassengerId']\n\n\n","04ce8101":"train_df.columns\n","df02b983":"train_df.head()","e4b83009":"train_df.describe()","9cf58bbe":"train_df.info()","e7e4ab1d":"def bar_plot(variable):\n    \"\"\"\n    input: variable ex: \"Sex\"\n    output: bar plot & value count\n    \"\"\"\n    #get feature\n    var = train_df[variable]\n    #count number of categorical variable(value\/sample)\n    varValue = var.value_counts()\n    \n    #visualize\n    plt.figure(figsize = (9,3))\n    plt.bar(varValue.index,varValue) #x = 0 or 1 y = varValue\n    plt.xticks(varValue.index,varValue.index.values)\n    plt.ylabel('Frequency')\n    plt.title(variable)\n    plt.show()\n    print(\"{}: \\n {}:\".format(variable,varValue))\n","4f501b07":"category1 = ['Survived','Sex','Pclass','Embarked','SibSp','Parch']\nfor c in category1:\n    bar_plot(c)","f15e0c4d":"category2 = ['Cabin','Name','Ticket']\nfor c in category2:\n    print(\"{}: \\n\".format(train_df[c].value_counts()))","f5cac244":"def plot_hist(variable):\n    plt.figure(figsize = (9,3))\n    plt.hist(train_df[variable],bins = 50)\n    plt.xlabel(variable)\n    plt.ylabel('Frequency')\n    plt.title(\"{} distribution with hist\".format(variable))\n    plt.show()","97561041":"numericVar = [\"Fare\",\"Age\",\"PassengerId\"]\nfor n in numericVar:\n    plot_hist(n)","854cb41c":"# Pclass vs Survived\ntrain_df[['Pclass','Survived']].groupby(['Pclass'],as_index = False).mean().sort_values(by = 'Survived', ascending = False)\n#according to pclass - groupby \n","b81d1725":"# Sex vs Survived\ntrain_df[['Sex','Survived']].groupby(['Sex'],as_index = False).mean().sort_values(by = 'Survived', ascending = False)\n\n","54897479":"#SibSp vs Survived\ntrain_df[['SibSp','Survived']].groupby(['SibSp'],as_index = False).mean().sort_values(by = 'Survived', ascending = False)\n\n","237491e9":"#Parch vs Survived\ntrain_df[['Parch','Survived']].groupby(['Parch'],as_index = False).mean().sort_values(by = 'Survived', ascending = False)\n\n","7a79edba":"train_df.info()","8316d6ba":"def detect_outlier(df,features):\n    outlier_indices = []\n    \n    for c in features:\n        # First Quartile\n        \n        Q1 = np.percentile(df[c],25)\n        \n        \n        # Third Quartile\n        Q3 = np.percentile(df[c],75)\n        \n        \n        # IQR\n        IQR = Q3 - Q1\n        \n        # Outlier Step\n        outlier_step = IQR * 1.5\n        \n        # Detect outlier and their indeces\n        \n        outlier_list_col = df[(df[c] < Q1 - outlier_step) | (df[c] > Q3 + outlier_step)].index\n        \n        # Store indexes\n        outlier_indices.extend(outlier_list_col)\n    \n    outlier_indices = Counter(outlier_indices)\n    multiple_outliers = list(i for i, v in outlier_indices.items() if v > 2)\n    \n    return multiple_outliers\n    \n    ","86b64de8":"train_df.loc[detect_outlier(train_df,['Age','SibSp','Parch','Fare'])]","d64ce6c7":"#\u00a0Drop Outliers\ntrain_df = train_df.drop(detect_outlier(train_df,['Age','SibSp','Parch','Fare']),axis = 0).reset_index(drop = True)","38d8703d":"train_df_len = len(train_df)\ntrain_df = pd.concat([train_df,test_df],axis = 0 ).reset_index(drop = True)\n","51f46b5d":"train_df.head()","75e1a65e":"train_df.columns[train_df.isnull().any()]","c308726d":"train_df.isnull().sum()","e9356eaa":"train_df[train_df['Embarked'].isnull()]","ee519348":"train_df.boxplot(column = 'Fare',by = 'Embarked')\nplt.show()","0f31d780":"train_df['Embarked'] = train_df['Embarked'].fillna('C')","7f3e3466":"train_df[train_df['Embarked'].isnull()]","c76857bd":"train_df[train_df['Fare'].isnull()]","3bd1daa1":"train_df['Fare'] = train_df['Fare'].fillna(np.mean(train_df[train_df['Pclass'] == 3]['Fare']))","92ac1b42":"train_df[train_df['Fare'].isnull()]","4c3869dc":"list1 = ['SibSp','Parch','Age','Fare','Survived']\nsns.heatmap(train_df[list1].corr(),annot = True,fmt = '.2f')\nplt.show()","dada1b01":"g = sns.factorplot(x = 'SibSp', y = 'Survived',data = train_df,kind = 'bar',size = 6)\ng.set_ylabels('Survived Probability')\nplt.show()","ca1fd47a":"g = sns.factorplot(x='Parch',y = 'Survived',kind = 'bar',data = train_df,size = 6)\ng.set_ylabels('Survived Probability')\nplt.show()","c4a1d411":"g = sns.factorplot(x = 'Pclass', y = 'Survived',data = train_df,kind = 'bar',size = 6)\ng.set_ylabels('Survived Probability')\nplt.show()","22f8fbe3":"g = sns.FacetGrid(train_df,col = 'Survived')\ng.map(sns.distplot, 'Age',bins = 25)\nplt.show()","b5b0aec9":"g = sns.FacetGrid(train_df,col = 'Survived', row = 'Pclass',size = 2)\ng.map(plt.hist,'Age',bins = 25)\ng.add_legend()\nplt.show()","18469ad5":"g = sns.FacetGrid(train_df,row = 'Embarked',size = 3)\ng.map(sns.pointplot,'Pclass','Survived','Sex')\ng.add_legend()\nplt.show()","750027f7":"g = sns.FacetGrid(train_df,row = 'Embarked',col = 'Survived',size = 2.5)\ng.map(sns.barplot,'Sex','Fare')\ng.add_legend()\nplt.show()","3c4fb9c0":"train_df[train_df['Age'].isnull()]","f2636ae8":"sns.factorplot(x = 'Sex',y = 'Age',data = train_df,kind = 'box')\nplt.show()","a6aededd":"sns.factorplot(x = 'Sex',y = 'Age',hue = 'Pclass',kind = 'box',data = train_df)\nplt.show()","f5d277a4":"sns.factorplot(x = 'Parch',y = 'Age',kind = 'box',data = train_df)\nsns.factorplot(x = 'SibSp',y = 'Age',kind = 'box',data = train_df)\nplt.show()","ebc7ce74":"train_df['Sex'] = [1 if i == 'male' else 0 for i in train_df['Sex']]","9dd93e7b":"sns.heatmap(train_df[['Age','Sex','SibSp','Parch','Pclass']].corr(),annot = True)\nplt.show()","47586f5a":"index_nan_age = list(train_df[\"Age\"][train_df[\"Age\"].isnull()].index)\nfor i in index_nan_age:\n    age_pred = train_df[\"Age\"][((train_df[\"SibSp\"] == train_df.iloc[i][\"SibSp\"]) &(train_df[\"Parch\"] == train_df.iloc[i][\"Parch\"])& (train_df[\"Pclass\"] == train_df.iloc[i][\"Pclass\"]))].median()\n    age_med = train_df[\"Age\"].median()\n    if not np.isnan(age_pred):\n        train_df[\"Age\"].iloc[i] = age_pred\n    else:\n        train_df[\"Age\"].iloc[i] = age_med\n        ","732b0e69":"train_df[train_df['Age'].isnull()]","e7e0a1b4":"train_df['Name'].head(10)","3f8e6c2e":"name  = train_df['Name']\ntrain_df['Title'] = [i.split('.')[0].split(',')[-1].strip() for i in name]","a0f7bb78":"train_df.Title.value_counts()","7eb30dbc":"sns.countplot(x = 'Title',data = train_df)\nplt.xticks(rotation = 60)\n\nplt.show()","3da4e7a9":"# convert to categorical\ntrain_df['Title'] =train_df['Title'].replace(['Lady','the Countess','Capt','Col','Don','Dr','Major','Rev','Sir','Jonkheer','Dona'],'Other')\ntrain_df['Title'] = [0 if i == 'Master' else 1 if i == 'Miss' or i == 'Ms' or i == 'Mlle' or i == 'Mrs' else 2 if i == 'Mr' else 3 for i in train_df['Title']]","31c5e41a":"train_df['Title'].head()","d44041d4":"sns.countplot(x = 'Title',data = train_df)\nplt.xticks(rotation = 60)\n\nplt.show()","f0766bd5":"g = sns.factorplot(x = 'Title', y = 'Survived',data = train_df,kind = 'bar')\ng.set_xticklabels(['Master','Mrs','Mr','Other'])\ng.set_ylabels('Survival Probability')\nplt.show()\n","ad276f69":"train_df.drop(labels = ['Name'],axis = 1,inplace = True)","3be0afd9":"train_df.head()","aa6e6919":"train_df = pd.get_dummies(train_df,columns = ['Title'])\ntrain_df.head()","9fb54460":"train_df.head()","b3c9181f":"train_df['Fsize'] = train_df['SibSp'] + train_df['Parch'] + 1","79d49b93":"train_df.head()","4154f9c9":"g = sns.factorplot(x = 'Fsize',y = 'Survived',kind = 'bar',data = train_df)\ng.set_ylabels('Survival ')\ng.set_xlabels('Family Size')\nplt.show()","55511d02":"train_df['family_size'] = [1 if i <5 else 0 for i in train_df['Fsize']]","1203cf9c":"train_df.head(10)","643e2d87":"sns.countplot(x = 'family_size', data = train_df)\nplt.show()","f9fdb244":"g = sns.factorplot(x = 'family_size',y = 'Survived',kind = 'bar',data = train_df)\ng.set_ylabels('Survived ')\n\nplt.show()","e0553976":"train_df = pd.get_dummies(train_df,columns = ['family_size'])\ntrain_df.head()","c5fa025b":"train_df['Embarked'].head() # S - C - Q","03ae8302":"sns.countplot(x = 'Embarked',data = train_df)\nplt.show()","031c8577":"train_df = pd.get_dummies(train_df,columns = ['Embarked'])\ntrain_df.head()","d6ed2c4b":"train_df['Ticket'].head(20)","1b2dad96":"tickets = []\nfor i in list(train_df.Ticket):\n    if not i.isdigit():\n        tickets.append(i.replace('.','').replace('\/','').strip().split(' ')[0])\n    else:\n        tickets.append('x')\n        \ntrain_df['Ticket'] = tickets","910e5bbc":"train_df['Ticket'].head(20)","1bd86b79":"train_df.head()","eaf55891":"train_df = pd.get_dummies(train_df, columns = ['Ticket'],prefix = 'T')\ntrain_df.head(10)","2e3f3098":"sns.countplot(x = 'Pclass',data = train_df)\nplt.show()","07eba03d":"train_df['Pclass'] = train_df['Pclass'].astype('category')\ntrain_df = pd.get_dummies(train_df, columns = ['Pclass'])\ntrain_df.head()","ada0773a":"train_df['Sex'] = train_df['Sex'].astype('category')\ntrain_df = pd.get_dummies(train_df,columns = ['Sex'])\ntrain_df.head()","c98af068":"train_df.drop(labels = ['PassengerId','Cabin'],axis = 1 , inplace = True)","03677877":"train_df.columns","774759af":"from sklearn.model_selection import train_test_split, StratifiedKFold,GridSearchCV\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.svm import SVC\nfrom sklearn.ensemble import RandomForestClassifier, VotingClassifier\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.metrics import accuracy_score","d98e1650":"train_df_len","81e11074":"test = train_df[train_df_len:]\ntest.drop(labels = ['Survived'],axis = 1, inplace = True)","5d218a55":"test.head()","ce1ec4d1":"train = train_df[:train_df_len]\nX_train = train.drop(labels = 'Survived',axis = 1)\ny_train = train['Survived']\nX_train , x_test , y_train , y_test = train_test_split(X_train,y_train,test_size = 0.33,random_state = 42)\nprint('X_train',len(X_train))\nprint('x_test',len(x_test))\nprint('y_train',len(y_train))\nprint('y_test',len(y_test))","ed85274f":"logreg  = LogisticRegression()\nlogreg.fit(X_train,y_train)\nacc_log_train = round(logreg.score(X_train , y_train)*100,2)\nacc_log_test = round(logreg.score(x_test,y_test)*100,2)\nprint('Training Accuracy: % {}'.format(acc_log_train))\nprint('Testing Accuracy: % {}'.format(acc_log_test))","16d797d3":"random_state = 42\nclassifier = [DecisionTreeClassifier(random_state = random_state),\n              SVC(random_state = random_state),\n              RandomForestClassifier(random_state = random_state),\n              LogisticRegression(random_state = random_state),\n              KNeighborsClassifier()\n                ]\n\ndt_param_grid = {'min_samples_split': range(10,500,20),\n                'max_depth': range(1,20,2)}\n\nsvc_param_grid = {'kernel': ['rbf'],\n                 'gamma':[0.001,0.01,0.1,1],\n                 'C':[1,10,50,100,200,300,1000]}\n\nrf_param_grid = {'max_features':[1,3,10],\n                'min_samples_split': [2,3,10],\n                'min_samples_leaf':[1,3,10],\n                'bootstrap':[False],\n                'n_estimators':[100,300],\n                'criterion': ['gini']}\nlogreg_param_grid = {'C': np.logspace(-3,3,7),\n                    'penalty': ['l1','l2']}\n\nknn_param_grid = {'n_neighbors': np.linspace(1,19,10, dtype = int).tolist(),\n                 'weights': ['uniform','distance'],\n                 'metric': ['euclidean','manhattan']}\n\nclassifier_param = [dt_param_grid ,svc_param_grid,rf_param_grid ,logreg_param_grid,knn_param_grid]\n\n\n\n\n\n","bba31420":"cv_results = []\nbest_estimators = []\nfor i in range(len(classifier)):\n    clf = GridSearchCV(classifier[i],param_grid= classifier_param[i],cv = StratifiedKFold(n_splits = 10),scoring = 'accuracy',n_jobs = -1,verbose = 1)\n    clf.fit(X_train,y_train)\n    cv_results.append(clf.best_score_)\n    best_estimators.append(clf.best_estimator_)\n    print(cv_results[i])","a1ee2702":"cv_result = pd.DataFrame({'Cross Validation Means': cv_results, 'ML Models': ['DecisionTreeClassifier',\n              'SVM',\n              'RandomForestClassifier',\n              'LogisticRegression',\n              'KNeighborsClassifier'\n                ] })\n\ng = sns.barplot('Cross Validation Means','ML Models',data = cv_result)\ng.set_xlabel('Mean Accuracy')\ng.set_title('Cross Validation Scores')\nplt.show()","6bba1355":"votingC = VotingClassifier(estimators =[('dt', best_estimators[0]),\n                                       ('rfc', best_estimators[2]),\n                                       ('lr', best_estimators[3])],voting = 'soft',n_jobs = -1 )\n\nvotingC = votingC.fit(X_train,y_train)\nprint(accuracy_score(votingC.predict(x_test),y_test))\n","306afc8d":"test_survived = pd.Series(votingC.predict(test), name = 'Survived').astype(int)\nresults = pd.concat([test_PassengerId, test_survived],axis = 1)\nresults.to_csv('Titanic.csv', index = False)","f122d5fc":"Age is not correlated with Sex, but it is correlated with parch, sibsp and pclass","3b955f7c":"* Age <= 10 has a high survival rate,\n* Oldest passengers (80) survived, \n* Large number of 20 years ol did not survive,\n* Most passengers are in 15 - 35 age range,\n* Use age feature in training,\n* Use age distribution for missing value of age","da83271a":"<a id = '21' ><\/a>\n# Feature Engineering","936c9c98":"* Pclass is important for model training\n","c5721a4e":"<a id = \"2\" ><\/a><br>\n# Variable Description\n1. PassengerId: unique id number to each passenger\n2. Survived: passenger survive(1) or died(0)\n3. Pclass: passenger class\n4. Name: name\n5. Sex: gender of passenger\n6. Age: age of passenger\n7. SibSp: number of siblings\/spouses\n8. Parch: number of parents\/children\n9. Ticket: number of ticket\n10. Fare: amount of money spent on ticket\n11. Cabin: cabin category\n12. Embarked: port where passenger embarked(C = Cherbourg, Q = Queenstown, S = Southampton)\n","334e30f3":"Small families have more chance to survive than large families","0fa327f7":"<a id = '12' ><\/a>\n## Correlation Between SibSp -- Parch -- Age -- Fare -- Survived","a260a2ec":"<a id = '14'><\/a>\n## Parch -- Survived","0ad78041":"<a id = \"1\"><\/a>\n# Load and check Data","02d4960e":"<a id = '18'><\/a> <br>\n## Embarked -- Sex -- Plcass - Survived","71776454":"<a id = '34'><\/a>\n## Prediction and Submission","7734a7fe":"<a id = '23'> <\/a>\n## Family Size","01b04f81":"<a id = '9'> <\/a>\n## Find Missing Value","c5a1893d":"<a id = '20'><\/a>\n## Fill Missing: Age Feature","5100de04":"<a id = '13'><\/a>\n## SibSp -- Survived","46b183e6":"Sex is not informative for age prediction, age distribution seems to be same.","c467a2a7":"<a id = '4' > <\/a><br>\n## Categorical Variable","0702b994":"<a id = '8' > <\/a>\n# Missing Value\n  * Find Missing Value\n  * Fill Missing Value\n    ","8f92b250":"<a id = '22'><\/a>\n\n## Name -- Title","7991a6a6":"<a id = '19'><\/a> <br>\n## Embarked -- Sex -- Fare - Survived","2e0a1523":"<a id = '11' ><\/a>\n## Visualization","9c885298":"<a id = '28'><\/a>\n## Drop PassengerId and Cabin","e0bd93e0":"* Passengers who pay higher fare have better survival. Fare can be used as categorical for training.\n","fcecac0d":"1st class passengers are older than 2nd, and 2nd is older than 3rd class.","2c264615":"<a id = '6'><\/a>\n# Basic Data Analysis\n\n* Pclass - Survived\n* Sex - Survived\n* SibSp - Survived\n* Parch - Survived\n<br> \n\n*s\u0131n\u0131flar\u0131n yolcular\u0131n hayatta kalmayla bir ili\u015fkisi var m\u0131? kontrol etme ama\u00e7l\u0131 or cinsiyetle hayatta kalma ili\u015fkisi gibi durumlar*","9e96cb6c":"<a id = '15'><\/a>\n## Pclass -- Survived","b399938e":"<a id = '31'><\/a>\n## Simple Logistic Regression","b93df0f2":"<a id = '29'><\/a>\n# Modeling","9ebc16b5":"<a id = '10'> <\/a>\n## Fill Missing Value\n* Embarked has 2 missing value\n* Fare has only 1","2e24e6ed":" * float64(2): Fare and Age\n * int64(5): Pclass, SibSp, Parch, Survived and PassengerId\n * object(5): Name, Sex, Ticket, Cabin, Embarked","e9a10558":"<a id = '7' > <\/a>\n\n# Outlier Detection","a5eb3b36":"<a id = '30'><\/a>\n## Train - Test Split","c7617d65":"<a id = '3' > <\/a><br>\n# Univariate Variable Analysis\n\n   * Categorical Variable: Survived, Sex, Pclass, Embarked, Cabin, Name, Ticket, Sibsp and Parch\n   * Numerical Variable: Age, PassengerId and Fare\n","f4175500":"<a id = '5' > <\/a><br>\n## Numerical Variable","33ef26da":"* SibSp and Parch can be used for new feature extraction with th = 3 \n* Small families have more chance to survive\n* There is a std in survival of passenger with parch = 3 ","c274a0f0":"* Female passengers have much better survival rate than males.\n* Males have better survival rate in Pclass == 3 in C.\n* Embarked and Sex will be used in training\n","07c151c1":"<a id = '25'><\/a>\n## Ticket","acd2e7ed":"<a id = '32'><\/a>\n## Hyperparameter Tuning -- Grid Search -- Cross Validation\nWe will compare 5 ML classifier and evaulate mean accuracy of each of them by stratified cross validation.\n\n* Decision Tree\n* SVM\n* Random Forest Classifier\n* KNN\n* Logistic Regression\n","9befda40":"<a id = '24'><\/a>\n## Embarked","275a0d92":"<a id = '17'><\/a> <br>\n## Plcass -- Survived -- Age","f7562156":"* Having a lot of SipSp have less chance to survive\n* If SipSp == 0 or 1 or 2, passenger has more chance to survive\n* We can consider a new feature describing these categories.","3817c6b6":"<a id = '33'><\/a>\n## Ensemble Modeling","fddbf734":"Fare feature seems to have correlation with survived feature (0.26)","5245e050":" ## Introduction \n- The sinking of Titanic is one of the most notorious shipwrecks in the history. During her voyage, the Titanic sank after colliding with an iceberg. killing 1502 out of 2224 passengers and crew.\n\n<font color = \"blue\">\nContent:\n\n1. [Load and check Data](#1)\n2. [Variable Description](#2)\n * [Univariate Variable Analysis](#3)\n   * [Categorical Variable Analysis](#4)\n   * [Numerical Variable Analysis](#5)\n1. [Basic Data Analysis](#6)\n1. [Outlier Detection](#7)\n1. [Missing Value](#8)\n    * [Find Missing Value](#9)\n    * [Fill Missing Value](#10)\n1. [Visualization](#11)\n    * [Correlation Between SibSp -- Parch -- Age -- Fare -- Survived](#12)\n    * [SibSp -- Survived](#13)\n    * [Parch -- Survived](#14)\n    * [Pclass -- Survived](#15)\n    * [Age -- Survived](#16)\n    * [Pclass -- Survived -- Age](#17)\n    * [Embarked -- Sex -- Plcass - Survived](#18)\n    * [Embarked -- Sex -- Fare - Survived](#19)\n    * [Fill Missing: Age Feature](#20)\n1. [Feature Engineering](#21)\n    * [Name -- Title](#22)\n    * [Family Size](#23)\n    * [Embarked](#24)\n    * [Ticket](#25)\n    * [Pclass](#26)\n    * [Sex](#27)\n    * [Drop PassengerId and Cabin](#28)\n1. [Modeling](#29)\n    * [Train - Test Split](#30)\n    * [Simple Logistic Regression](#31)\n    * [Hyperparameter Tuning -- Grid Search -- Cross Validation](#32)\n    * [Ensemle Modeling](#33)\n    * [Prediction and Submission](#34)\n    ","ac52756e":"<a id = '26'><\/a>\n## Pclass","e8d4d48d":"<a id = '27'><\/a>\n## Sex","3105e7be":"<a id = '16'><\/a>\n## Age -- Survived"}}