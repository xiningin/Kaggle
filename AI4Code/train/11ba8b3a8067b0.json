{"cell_type":{"47babeef":"code","203a7cf3":"code","097e71b2":"code","c5aefa9e":"code","6218462e":"code","e6fe91d0":"code","eac2ad12":"code","159f041a":"code","9e55471a":"code","39cfd078":"code","899ff90e":"code","4ba77122":"code","502b4bcf":"code","7bf3b466":"code","903da160":"code","05be2d8d":"code","b2739c9b":"code","9db062b8":"code","165a3eed":"code","41dcce09":"code","b196d49e":"code","66279351":"code","82976ce0":"code","f685481d":"code","51e5f088":"code","11745b73":"code","35137207":"code","d15363d6":"code","1557c88f":"code","763f8e1d":"code","6e64b7ba":"code","55af17f4":"code","57766cec":"code","01af9809":"code","03cbed5a":"code","19f88c9f":"code","b95913cb":"code","a6ffdf40":"code","0dfdfb75":"code","10e1f092":"code","6f168784":"code","6ebcd953":"code","19f98f6b":"code","f3f8dedf":"markdown","5bc63e3e":"markdown","a5b0077b":"markdown"},"source":{"47babeef":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory\n\nimport os\nprint(os.listdir(\"..\/input\"))\n\n# Any results you write to the current directory are saved as output.","203a7cf3":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport plotly.offline as py\nfrom plotly.offline import init_notebook_mode, iplot\nimport plotly.graph_objs as go\nfrom plotly import tools\ninit_notebook_mode(connected=True)  \nimport plotly.figure_factory as ff\nimport os\nprint(os.listdir(\"..\/input\"))","097e71b2":"game_data = pd.read_csv('..\/input\/game_data.csv')","c5aefa9e":"game_data.head()","6218462e":"import random\ndef random_colors(number_of_colors):\n    color = [\"#\"+''.join([random.choice('0123456789ABCDEF') for j in range(6)])\n                 for i in range(number_of_colors)]\n    return color","e6fe91d0":"game_data['Temperature']= game_data['Temperature'].fillna(game_data['Temperature'].mean())","eac2ad12":"game_data.head()\n","159f041a":"video_review= pd.read_csv('..\/input\/video_review.csv')\nvideo_review.head()","9e55471a":"NGS= pd.read_csv('..\/input\/NGS-2016-post.csv')","39cfd078":"NGS.head()","899ff90e":"NGS = NGS.fillna(0)\nNGS.head()","4ba77122":"NGS1= NGS.truncate(before=1, after=1000)","502b4bcf":"def convert_to_mph(dis, converter):\n    mph = dis * converter\n    return mph","7bf3b466":"def get_speed(ng_data, playId, gameKey, player, partner):\n    ng_data = pd.read_csv(ng_data,low_memory=False)\n    ng_data['mph'] = convert_to_mph(ng_data['dis'], 20.455)\n    player_data = ng_data.loc[(ng_data.GameKey == gameKey) & (ng_data.PlayID == playId) \n                               & (ng_data.GSISID == player)].sort_values('Time')\n    partner_data = ng_data.loc[(ng_data.GameKey == gameKey) & (ng_data.PlayID == playId) \n                              & (ng_data.GSISID == partner)].sort_values('Time')\n    player_grouped = player_data.groupby(['GameKey','PlayID','GSISID'], \n                               as_index = False)['mph'].agg({'max_mph': max,\n                                                             'avg_mph': np.mean\n                                                            })\n    player_grouped['Player_Involved'] = 'player_injured'\n    partner_grouped = partner_data.groupby(['GameKey','PlayID','GSISID'], \n                               as_index = False)['mph'].agg({'max_mph': max,\n                                                             'avg_mph': np.mean\n                                                            })\n    partner_grouped['Player_Involved'] = 'primary_partner'\n    return pd.concat([player_grouped, partner_grouped], axis = 0)[['Player_Involved',\n                                                                   'max_mph',\n                                                                   'avg_mph']].reset_index(drop=True)","903da160":"def load_layout():\n    \"\"\"\n    Returns a dict for a Football themed Plot.ly layout \n    \"\"\"\n    layout = dict(\n        title = \"Player Activity\",\n        plot_bgcolor='darkseagreen',\n        showlegend=True,\n        xaxis=dict(\n            autorange=False,\n            range=[0, 120],\n            showgrid=False,\n            zeroline=False,\n            showline=True,\n            linecolor='black',\n            linewidth=1,\n            mirror=True,\n            ticks='',\n            tickmode='array',\n            tickvals=[10,20, 30, 40, 50, 60, 70, 80, 90, 100, 110],\n            ticktext=['Goal', 10, 20, 30, 40, 50, 40, 30, 20, 10, 'Goal'],\n            showticklabels=True\n        ),\n        yaxis=dict(\n            title='',\n            autorange=False,\n            range=[-3.3,56.3],\n            showgrid=False,\n            zeroline=False,\n            showline=True,\n            linecolor='black',\n            linewidth=1,\n            mirror=True,\n            ticks='',\n            showticklabels=False\n        ),\n        shapes=[\n            dict(\n                type='line',\n                layer='below',\n                x0=0,\n                y0=0,\n                 x1=120,\n                y1=0,\n                line=dict(\n                    color='white',\n                    width=2\n                )\n            ),\n            dict(\n                type='line',\n                layer='below',\n                x0=0,\n                y0=53.3,\n                x1=120,\n                y1=53.3,\n                line=dict(\n                    color='white',\n                    width=2\n                )\n            ),\n            dict(\n                type='line',\n                layer='below',\n                x0=10,\n                y0=0,\n                x1=10,\n                y1=53.3,\n                line=dict(\n                    color='white',\n                    width=10\n                )\n            ),\n            dict(\n                type='line',\n                layer='below',\n                x0=20,\n                y0=0,\n                x1=20,\n                y1=53.3,\n                line=dict(\n                    color='white'\n                )\n            ),\n             dict(\n                type='line',\n                layer='below',\n                x0=30,\n                y0=0,\n                x1=30,\n                y1=53.3,\n                line=dict(\n                    color='white'\n                )\n            ),\n            dict(\n                type='line',\n                layer='below',\n                x0=40,\n                y0=0,\n                x1=40,\n                y1=53.3,\n                line=dict(\n                    color='white'\n                )\n            ),\n            dict(\n                type='line',\n                layer='below',\n                x0=50,\n                y0=0,\n                x1=50,\n                y1=53.3,\n                line=dict(\n                    color='white'\n                )\n            ),\n            dict(\n                type='line',\n                layer='below',\n                x0=60,\n                y0=0,\n                x1=60,\n                y1=53.3,\n                line=dict(\n                    color='white'\n                )\n            ),dict(\n                type='line',\n                layer='below',\n                x0=70,\n                y0=0,\n                x1=70,\n                y1=53.3,\n                line=dict(\n                    color='white'\n                )\n            ),dict(\n                type='line',\n                layer='below',\n                x0=80,\n                y0=0,\n                x1=80,\n                y1=53.3,\n                line=dict(\n                    color='white'\n                )\n            ),\n            dict(\n                type='line',\n                layer='below',\n                x0=90,\n                y0=0,\n                x1=90,\n                y1=53.3,\n                line=dict(\n                    color='white'\n                )\n            ),dict(\n                type='line',\n                layer='below',\n                x0=100,\n                y0=0,\n                x1=100,\n                y1=53.3,\n                line=dict(\n                    color='white'\n                )\n            ),\n             dict(\n                type='line',\n                layer='below',\n                x0=110,\n                y0=0,\n                x1=110,\n                y1=53.3,\n                line=dict(\n                    color='white',\n                    width=10\n                )\n            )\n        ]\n    )\n    return layout\n\nlayout = load_layout()","05be2d8d":"Player_position= go.Scatter(x=NGS1.x,y=NGS1.y)\n\nfig=go.Figure(data=[Player_position],layout=layout)\npy.iplot(fig)\n","b2739c9b":"# Loading and plotting functions\n\ndef load_plays_for_game(GameKey):\n    \"\"\"\n    Returns a dataframe of play data for a given game (GameKey)\n    \"\"\"\n    play_information = pd.read_csv('..\/input\/NFL-Punt-Analytics-Competition\/play_information.csv')\n    play_information = play_information[play_information['GameKey'] == GameKey]\n    return play_information\n\n\ndef load_game_and_ngs(ngs_file=None, GameKey=None):\n    \"\"\"\n    Returns a dataframe of player movements (NGS data) for a given game\n    \"\"\"\n    if ngs_file is None:\n        print(\"Specifiy an NGS file.\")\n        return None\n    if GameKey is None:\n        print('Specify a GameKey')\n        return None\n    # Merge play data with NGS data    \n    plays = load_plays_for_game(GameKey)\n    ngs = pd.read_csv(ngs_file, low_memory=False)\n    merged = pd.merge(ngs, plays, how=\"inner\", on=[\"GameKey\", \"PlayID\", \"Season_Year\"])\n    return merged\n\n\ndef plot_play(game_df, PlayID, player1=None, player2=None, custom_layout=False):\n    \"\"\"\n    Plots player movements on the field for a given game, play, and two players\n    \"\"\"\n    game_df = game_df[game_df.PlayID==PlayID]\n    \n    GameKey=str(pd.unique(game_df.GameKey)[0])\n    HomeTeam = pd.unique(game_df.Home_Team_Visit_Team)[0].split(\"-\")[0]\n    VisitingTeam = pd.unique(game_df.Home_Team_Visit_Team)[0].split(\"-\")[1]\n    YardLine = game_df[(game_df.PlayID==PlayID) & (game_df.GSISID==player1)]['YardLine'].iloc[0]\n    \n    traces=[]   \n    if (player1 is not None) & (player2 is not None):\n        game_df = game_df[ (game_df['GSISID']==player1) | (game_df['GSISID']==player2)]\n        for player in pd.unique(game_df.GSISID):\n            player = int(player)\n            trace = go.Scatter(\n                x = game_df[game_df.GSISID==player].x,\n                y = game_df[game_df.GSISID==player].y,\n                name='GSISID '+str(player),\n                mode='markers'\n            )\n            traces.append(trace)\n    else:\n        print(\"Specify GSISIDs for player1 and player2\")\n        return None\n    \n    if custom_layout is not True:\n        layout = load_layout()\n        layout['title'] =  HomeTeam + \\\n        ' vs. ' + VisitingTeam + \\\n        '<br>Possession: ' + \\\n        YardLine.split(\" \")[0] +'@'+YardLine.split(\" \")[1]\n    data = traces\n    fig = dict(data=data, layout=layout)\n    play_description = game_df[(game_df.PlayID==PlayID) & (game_df.GSISID==player1)].iloc[0][\"PlayDescription\"]\n    print(\"\\n\\n\\t\",play_description)\n    offline.iplot(fig, config=config)\n    ","9db062b8":"video_review1 = pd.merge(video_review,NGS, on=['Season_Year','GameKey','PlayID','GSISID'])","165a3eed":"video_review1","41dcce09":"import glob\nfrom plotly import offline\nimport plotly.graph_objs as go\n\n\npd.set_option('max.columns', None)\noffline.init_notebook_mode()\nconfig = dict(showLink=False)","b196d49e":"NGS_pre= pd.read_csv('..\/input\/NGS-2016-pre.csv')\nNGS_pre.head()","66279351":"NGS_pre1= NGS_pre.truncate(before=1, after=1000)\n","82976ce0":"trace1= go.Scatter(x=NGS_pre1.x,y=NGS_pre1.y)\n\nfig=go.Figure(data=[trace1],layout=layout)\npy.iplot(fig)","f685481d":"video_review1 = pd.merge(video_review,NGS_pre, on=['Season_Year','GameKey','PlayID','GSISID'])","51e5f088":"video_review1= video_review1.sort_values('GSISID', ascending=False).drop_duplicates('GameKey').sort_index()","11745b73":"# Plot a single play, with two players\nprint('Primary Impact:',video_review1.iloc[0][\"Primary_Impact_Type\"]) \nprint('Primary Activity:',video_review1.iloc[0][\"Player_Activity_Derived\"] )\nprint('Partners Activity:',video_review1.iloc[0][\"Primary_Partner_Activity_Derived\"] )\nprint('Players from same team :',video_review1.iloc[0][\"Friendly_Fire\"] )\nprint(get_speed('..\/input\/NGS-2016-pre.csv', 3129, 5, 31057, 32482))\n","35137207":"# Plot a single play, with two players\nprint('Primary Impact:',video_review1.iloc[1][\"Primary_Impact_Type\"]) \nprint('Primary Activity:',video_review1.iloc[1][\"Player_Activity_Derived\"] )\nprint('Partners Activity:',video_review1.iloc[1][\"Primary_Partner_Activity_Derived\"] )\nprint('Players from same team :',video_review1.iloc[1][\"Friendly_Fire\"] )\nprint(get_speed('..\/input\/NGS-2016-pre.csv', 2587, 21, 29343, 31059))\n","d15363d6":"# Plot a single play, with two players\nprint('Primary Impact:',video_review1.iloc[2][\"Primary_Impact_Type\"]) \nprint('Primary Activity:',video_review1.iloc[2][\"Player_Activity_Derived\"] )\nprint('Partners Activity:',video_review1.iloc[2][\"Primary_Partner_Activity_Derived\"] )\nprint('Players from same team :',video_review1.iloc[2][\"Friendly_Fire\"] )\nprint(get_speed('..\/input\/NGS-2016-pre.csv', 538, 29, 31023, 31941))","1557c88f":"print('Primary Impact:',video_review1.iloc[3][\"Primary_Impact_Type\"]) \nprint('Primary Activity:',video_review1.iloc[3][\"Player_Activity_Derived\"] )\nprint('Partners Activity:',video_review1.iloc[3][\"Primary_Partner_Activity_Derived\"] )\nprint('Players from same team :',video_review1.iloc[3][\"Friendly_Fire\"] )\nprint(get_speed('..\/input\/NGS-2016-pre.csv', 1212, 45, 33121, 28429))","763f8e1d":"print('Primary Impact:',video_review1.iloc[5][\"Primary_Impact_Type\"]) \nprint('Primary Activity:',video_review1.iloc[5][\"Player_Activity_Derived\"] )\nprint('Partners Activity:',video_review1.iloc[5][\"Primary_Partner_Activity_Derived\"] )\nprint('Players from same team :',video_review1.iloc[5][\"Friendly_Fire\"] )\nprint(get_speed('..\/input\/NGS-2016-pre.csv', 905, 60, 30786, 29815))","6e64b7ba":"NGS_reg= pd.read_csv('..\/input\/NGS-2016-reg-wk1-6.csv')\nNGS_reg.head()","55af17f4":"NGS_reg1= NGS_reg.truncate(before=1, after=1000)","57766cec":"trace1= go.Scatter(x=NGS_reg1.x,y=NGS_reg1.y)\n\nfig=go.Figure(data=[trace1],layout=layout)\npy.iplot(fig)","01af9809":"video_review= pd.merge(video_review,NGS_reg, on=['Season_Year','GameKey','PlayID','GSISID'])\nvideo_review1= video_review1.sort_values('GSISID', ascending=False).drop_duplicates('GameKey').sort_index()","03cbed5a":"print('Primary Impact:',video_review1.iloc[0][\"Primary_Impact_Type\"]) \nprint('Primary Activity:',video_review1.iloc[0][\"Player_Activity_Derived\"] )\nprint('Partners Activity:',video_review1.iloc[0][\"Primary_Partner_Activity_Derived\"] )\nprint('Players from same team :',video_review1.iloc[0][\"Friendly_Fire\"] )\nprint(get_speed('..\/input\/NGS-2016-reg-wk1-6.csv', 2342, 144, 32410, 23259))","19f88c9f":"print('Primary Impact:',video_review1.iloc[1][\"Primary_Impact_Type\"]) \nprint('Primary Activity:',video_review1.iloc[1][\"Player_Activity_Derived\"] )\nprint('Partners Activity:',video_review1.iloc[1][\"Primary_Partner_Activity_Derived\"] )\nprint('Players from same team :',video_review1.iloc[1][\"Friendly_Fire\"] )\nprint(get_speed('..\/input\/NGS-2016-reg-wk1-6.csv', 3663, 149, 28128, 29629))","b95913cb":"NGS_reg= pd.read_csv('..\/input\/NGS-2016-reg-wk7-12.csv')\nNGS_reg.head()","a6ffdf40":"NGS_reg1= NGS_reg.truncate(before=1, after=1000)","0dfdfb75":"trace1= go.Scatter(x=NGS_reg1.x,y=NGS_reg1.y)\n\nfig=go.Figure(data=[trace1],layout=layout)\npy.iplot(fig)","10e1f092":"video_review1 = pd.merge(video_review,NGS_reg, on=['Season_Year','GameKey','PlayID','GSISID'])\nvideo_review1= video_review1.sort_values('GSISID', ascending=False).drop_duplicates('GameKey').sort_index()","6f168784":"NGS_pre1= NGS_pre.truncate(before=1, after=1000)\nNGS_pre.head()","6ebcd953":"NGS_pre1= NGS_pre.truncate(before=1, after=1000)","19f98f6b":"trace1= go.Scatter(x=NGS_pre1.x,y=NGS_pre1.y)\n\nfig=go.Figure(data=[trace1],layout=layout)\npy.iplot(fig)","f3f8dedf":"Players and their Partner's Movement during the play which caused concussion","5bc63e3e":"Pre Season Analysis of 2017 NFL Matches","a5b0077b":"No concussion incident happened during 2016 post season matches."}}