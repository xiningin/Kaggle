{"cell_type":{"b547327f":"code","59686dcf":"code","1f7b6471":"code","86b6ddac":"code","5ae6a686":"code","6af129ef":"code","43170213":"code","2aa512a1":"code","6f0595de":"code","1a33d74a":"code","157aac09":"code","921f54f5":"code","ca36ee23":"code","848fda48":"code","3b4b7b78":"code","db621462":"code","b2e1be62":"code","0b4ac5c6":"code","5b3f48bc":"code","f5a444fd":"code","b3c73c85":"code","5cb2fe8e":"code","cfdea908":"code","949e1ed3":"markdown"},"source":{"b547327f":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport warnings\nwarnings.filterwarnings('ignore')  # To ignore python warnings\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))","59686dcf":"# Import the data set\ndataset = pd.read_csv('..\/input\/speed-dating-experiment\/Speed Dating Data.csv', encoding=\"ISO-8859-1\")","1f7b6471":"# Age distribution of the participants\nplt.figure(figsize = (15,10))\nsns.countplot(x = 'age', data= dataset, color = 'blue')\nplt.xlabel('Age of participants')\nplt.ylabel('Count')\nplt.title('Age Distribution')\nplt.show()","86b6ddac":"# Check for missing values in age\ndataset['age'].isnull().sum()","5ae6a686":"# Lets create a utility function to fill the missing values in the column with the value provided\n\nimport math\ndef fill_missing_values(column_name, value):\n    for i in range(len(dataset[column_name].values)):\n        if math.isnan(dataset[column_name][i]):\n            dataset[column_name][i] = value","6af129ef":"import statistics\nmedian = statistics.mode(dataset['age'].values)\nfill_missing_values('age', median)","43170213":"# Check if there are still any missing values\ndataset['age'].isnull().sum()","2aa512a1":"plt.figure(figsize = (15,10))\nsns.distplot(dataset['age'])","6f0595de":"# Lets apply KMeans clustering algorithm between Gender and age\nx = dataset[['gender', 'age']].values","1a33d74a":"# Lets create utility function to Get the Within Cluster Sum of Squares (WCSS) and plot the Elbow curve so that \n# we can decide optimum number of clusters\n\nfrom sklearn.cluster import KMeans\n\ndef get_wcss(x):\n    wcss = []\n    for i in range(1,11):\n        kmeans = KMeans(n_clusters = i, init = 'k-means++')\n        kmeans.fit(x)\n        wcss.append(kmeans.inertia_)\n    return wcss\n\ndef plot_elbow_curve(wcss):\n    plt.figure(figsize = (15,10))\n    plt.plot(range(1,11), wcss, color = 'blue')\n    plt.xlabel('Number of clusters')\n    plt.ylabel('Within Cluster Sum of Squares')\n    plt.title('Elbow Curve')\n    plt.show()","157aac09":"# Get and plot the WCSS for Kmeans applied on Gender and Age\nwcss = get_wcss(x)\nplot_elbow_curve(wcss)","921f54f5":"# Looks like 6 can be the optimum number of clusters for the extracted dataset\nkmeans = KMeans(n_clusters = 6, init = 'k-means++')\ny_clusters = kmeans.fit_predict(x)","ca36ee23":"plt.figure(figsize = (10,10))\nplt.scatter(x[y_clusters == 0, 0], x[y_clusters == 0, 1], s = 100, c = 'red', label = 'Cluster-1')\nplt.scatter(x[y_clusters == 1, 0], x[y_clusters == 1, 1], s = 100, c = 'blue', label = 'Cluster-2')\nplt.scatter(x[y_clusters == 2, 0], x[y_clusters == 2, 1], s = 100, c = 'green', label = 'Cluster-3')\nplt.scatter(x[y_clusters == 3, 0], x[y_clusters == 3, 1], s = 100, c = 'cyan', label = 'Cluster-4')\nplt.scatter(x[y_clusters == 4, 0], x[y_clusters == 4, 1], s = 100, c = 'brown', label = 'Cluster-5')\nplt.scatter(x[y_clusters == 5, 0], x[y_clusters == 5, 1], s = 100, c = 'pink', label = 'Cluster-6')\n\nplt.xlabel('Gender - Male or Female')\nplt.ylabel('Age of participant')\nplt.title('Gender- Age Distribution of participants')\nplt.show()","848fda48":"# Age distribution of the partners\nplt.figure(figsize = (15,10))\nsns.countplot(x = 'age_o', data= dataset, color = 'blue')\nplt.xlabel('Age of partner')\nplt.ylabel('Count')\nplt.title('Age Distribution')\nplt.show()","3b4b7b78":"# Check for missing values in age of partner\ndataset['age_o'].isnull().sum()","db621462":"mode = statistics.mode(dataset['age_o'].values)\nfill_missing_values('age_o', mode)","b2e1be62":"# Check if we still have missing values\ndataset['age_o'].isnull().sum()","0b4ac5c6":"plt.figure(figsize = (15,10))\nsns.distplot(dataset['age_o'])","5b3f48bc":"# Lets apply K-Means between age of participant and age of partner\nx = dataset[['age_o', 'age']].values","f5a444fd":"wcss = get_wcss(x)\nplot_elbow_curve(wcss)","b3c73c85":"# Looks like 8 can be the optimum number of clusters for the extracted dataset\nkmeans = KMeans(n_clusters = 8, init = 'k-means++')\ny_clusters = kmeans.fit_predict(x)","5cb2fe8e":"# Scatter plot to show the distribution between the two parameters before clustering\nplt.scatter(dataset['age_o'], dataset['age'])\nplt.show()","cfdea908":"# Plot the clusters obtained after applying K-Means\nplt.figure(figsize = (10,10))\nplt.scatter(x[y_clusters == 0, 0], x[y_clusters == 0, 1], s = 100, c = 'red', label = 'Cluster-1')\nplt.scatter(x[y_clusters == 1, 0], x[y_clusters == 1, 1], s = 100, c = 'blue', label = 'Cluster-2')\nplt.scatter(x[y_clusters == 2, 0], x[y_clusters == 2, 1], s = 100, c = 'green', label = 'Cluster-3')\nplt.scatter(x[y_clusters == 3, 0], x[y_clusters == 3, 1], s = 100, c = 'cyan', label = 'Cluster-4')\nplt.scatter(x[y_clusters == 4, 0], x[y_clusters == 4, 1], s = 100, c = 'brown', label = 'Cluster-5')\nplt.scatter(x[y_clusters == 5, 0], x[y_clusters == 5, 1], s = 100, c = 'pink', label = 'Cluster-6')\nplt.scatter(x[y_clusters == 6, 0], x[y_clusters == 6, 1], s = 100, c = 'brown', label = 'Cluster-7')\nplt.scatter(x[y_clusters == 7, 0], x[y_clusters == 7, 1], s = 100, c = 'pink', label = 'Cluster-8')\n\nplt.xlabel('Age of the partner')\nplt.ylabel('Age of participant')\nplt.title('Gender- Age Distribution of participants')\nplt.show()","949e1ed3":"[](http:\/\/)**Lets see the clustering between age of participant and age of partner!**"}}