{"cell_type":{"6d1ae5c0":"code","f249f55d":"code","9b1e0177":"code","d39ed001":"code","63265781":"code","2f3a46b5":"code","f9189b1f":"code","b35cf0af":"code","9862a14a":"code","ee166d13":"code","429c0e50":"code","851a872a":"code","dbf4c0ab":"code","6d237305":"code","2223621f":"code","48e1a458":"code","9691d367":"code","04c83334":"code","396f114f":"code","e61294b3":"code","5d9513df":"markdown","03d09747":"markdown","0d3596e1":"markdown","0d85d0a7":"markdown","4150c812":"markdown","03ba94df":"markdown","44ba35ab":"markdown","fbc1ea70":"markdown","6f67beb3":"markdown","f48b7438":"markdown","1171ba61":"markdown","a4de9eb3":"markdown","ef44853c":"markdown","753a85b6":"markdown","e2367c3c":"markdown","6a82d2ae":"markdown"},"source":{"6d1ae5c0":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","f249f55d":"from __future__ import print_function\nimport numpy as np # linear algebra\nimport pandas as pd # data processing\n\nfrom sklearn.feature_extraction.text import CountVectorizer \nfrom keras.preprocessing.text import Tokenizer\nfrom keras.preprocessing.sequence import pad_sequences\nfrom tensorflow import keras\nfrom tensorflow.keras.models import Sequential\nfrom tensorflow.keras.layers import Dense, SpatialDropout1D, Flatten, Embedding, LSTM\nfrom tensorflow.keras import backend\nfrom sklearn.model_selection import train_test_split\nfrom keras.utils.np_utils import to_categorical\n\nimport matplotlib.pyplot as plt\nimport matplotlib.patches as mpatches\nimport re","9b1e0177":"data = pd.read_csv('..\/input\/twitter-climate-change-sentiment-dataset\/twitter_sentiment_data.csv')\ndata","d39ed001":"data = data[['message','sentiment']]\ndata.head(5)","63265781":"print(data.message[1])","2f3a46b5":"print(data.message[4])","f9189b1f":"for cat in ['sentiment']:\n    print(\"Levels for category '{0}': {1}\".format(cat, data[cat].unique()))","b35cf0af":"data.sentiment.value_counts()","9862a14a":"data.groupby('sentiment').count().plot(kind='bar')","ee166d13":"values = [1,0]\ndata = data[data.sentiment.isin(values) == False]","429c0e50":"data.sentiment.value_counts()","851a872a":"data","dbf4c0ab":"data['message'] = data['message'].apply(lambda x: x.lower())\ndata['message'] = data['message'].apply((lambda x: re.sub('[^a-zA-z0-9\\s]','',x)))\nprint(data[ data['sentiment'] == '2'].size)\nprint(data[ data['sentiment'] == '-1'].size)","6d237305":"for idx,row in data.iterrows():\n    row[0] = row[0].replace('rt',' ')","2223621f":"max_fatures = 2000\ntokenizer = Tokenizer(num_words=max_fatures, split=' ')\ntokenizer.fit_on_texts(data['message'].values)\nX = tokenizer.texts_to_sequences(data['message'].values)\nX = pad_sequences(X)","48e1a458":"embed_dim = 128\nlstm_out = 196\n\nmodel = Sequential()\nmodel.add(Embedding(max_fatures, embed_dim,input_length = X.shape[1]))\nmodel.add(SpatialDropout1D(0.4))\nmodel.add(LSTM(lstm_out, dropout=0.2, recurrent_dropout=0.2))\nmodel.add(Dense(2,activation='softmax'))\nmodel.compile(loss = 'categorical_crossentropy', optimizer='adam',metrics = ['accuracy'])\nprint(model.summary())","9691d367":"Y = pd.get_dummies(data['sentiment']).values\nX_train, X_test, Y_train, Y_test = train_test_split(X,Y, test_size = 0.33, random_state = 42)\nprint(X_train.shape,Y_train.shape)\nprint(X_test.shape,Y_test.shape)","04c83334":"batch_size = 40\nmodel.fit(X_train, Y_train, epochs = 12, batch_size=batch_size, verbose = 2)","396f114f":"validation_size = 1500\n\nX_validate = X_test[-validation_size:]\nY_validate = Y_test[-validation_size:]\nX_test = X_test[:-validation_size]\nY_test = Y_test[:-validation_size]\nscore,acc = model.evaluate(X_test, Y_test, verbose = 2, batch_size = batch_size)\nprint(\"score: %.2f\" % (score))\nprint(\"acc: %.2f\" % (acc*100))","e61294b3":"pos_cnt, neg_cnt, pos_correct, neg_correct = 0, 0, 0, 0\nfor x in range(len(X_validate)):\n    \n    result = model.predict(X_validate[x].reshape(1,X_test.shape[1]),batch_size=1,verbose = 2)[0]\n   \n    if np.argmax(result) == np.argmax(Y_validate[x]):\n        if np.argmax(Y_validate[x]) == 0:\n            neg_correct += 1\n        else:\n            pos_correct += 1\n       \n    if np.argmax(Y_validate[x]) == 0:\n        neg_cnt += 1\n    else:\n        pos_cnt += 1\n\n\n\nprint(\"pos_acc\", pos_correct\/pos_cnt*100, \"%\")\nprint(\"neg_acc\", neg_correct\/neg_cnt*100, \"%\")","5d9513df":"# Building Testing Training and Validating model \nSpecifying dimensions of embeddings \nAdding layers by calling sequential() \nMentioning dropout dimensions \nAdding lstm layer \nCalling activation function softmax \nIn the end compiling loss function(categrical cross entropy)\n\nHere softmax is used because of its ability of working well with categorical cross entropy","03d09747":"**Importing Libraries**","0d3596e1":"Validating on test","0d85d0a7":"Preprocessing for certain characters occurring frequently in tweets","4150c812":"Keeping only the neccessary columns","03ba94df":"Sampling a batch for traning and fitting model \n12 epochs are run\n1 epoch is completed after the number of iterations, which is derived by the Total Samples divided by a batch size, is obtained.","44ba35ab":"So assuming, -1= strong negative 2 = positive\n\nChecking the distribution of tweets","fbc1ea70":"Tokenizing and padding the sequences","6f67beb3":"Reading file","f48b7438":"We can observe the dataset performs better on training because it was optimized for training and not test. This assures stability inn performance of the model. It means that during test a similar distribution was used as used for training, implying the cosistency with the sampling","1171ba61":"Train Test Split","a4de9eb3":"LSTM Implementation for Sentiment Analysis","ef44853c":"Removing unnecessary characcters","753a85b6":"Thus we can see the accuracy of the correctly positive classified tweets and correctly negative classsified tweets \nThere is a higher accuracy for positively classified tweets as compared to negatively classified which may mean the dataset was large where the tweets werent classified properly and the model needed more time \nThis tells that the model is good but still needs more epochs for mastering negative classifications.","e2367c3c":"we see uneven sample distributions for negative and positive sentiment valued tweets. Thus we try to somewhat even distribution by including only positive or only negative tweets\nUsually, in such a case accuracy may not provide a fair view due to the bias in the data, thus we may use other metrics such as F1 score for measuring model stability and robustness","6a82d2ae":"Checking the number of unique values in sentiment column as my objective will be to work only with strictly positive or strictly negative tweets"}}