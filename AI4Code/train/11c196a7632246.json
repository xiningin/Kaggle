{"cell_type":{"85cb4a44":"code","40d5ead0":"code","0d79f080":"code","7acd59cd":"code","c9df1ff5":"code","16dba027":"code","79c631bf":"code","f358ffa0":"code","9fa90630":"code","e87268a5":"code","61a4de3a":"code","0f174575":"code","bf8cadcc":"code","739a5e64":"code","83d481e6":"code","0ad4159b":"code","8f69035a":"code","2da069a3":"code","116fb4fa":"code","59d8fe78":"code","1df37093":"code","0c81e620":"code","8cbf5fcf":"code","0053b40c":"code","37455888":"code","db830d30":"code","b1a54a99":"code","f1efaaae":"code","db9b5000":"code","2c7221b9":"code","c685b182":"code","07a978c4":"code","3e67c0de":"markdown","32a3f7fb":"markdown","9bf707c9":"markdown","9e5a967f":"markdown","24508f7c":"markdown","b33f0c3a":"markdown"},"source":{"85cb4a44":"import numpy as np\nimport pandas as pd\nfrom pandas import Series, DataFrame\nimport matplotlib.pyplot as plt","40d5ead0":"df = pd.read_csv('..\/input\/data.csv', index_col='Name')","0d79f080":"df.describe()","7acd59cd":"df.isna().sum().sort_values(ascending=False)","c9df1ff5":"df.drop('Loaned From', axis=1, inplace=True)","16dba027":"df.fillna(df.mean(), inplace=True)","79c631bf":"df.isna().sum().sort_values(ascending=False)","f358ffa0":"df.head(3)","9fa90630":"def convert_money(money):\n    if money[-1] == 'M':\n        return int(float(money[:-1]) * 10 ** 6)\n    elif money[-1] == 'K':\n        return int(float(money[:-1]) * 10 ** 3)\n    else:\n        return int(money)","e87268a5":"df.drop('Unnamed: 0', axis=1, inplace=True)\ndf['Release Clause'].fillna('\u20ac0', inplace=True)\nmodified = ['Value', 'Wage', 'Release Clause']\nfor m in modified:\n    df.loc[:, m] = df[m].str.replace('\u20ac', '').map(convert_money)\ncolumns = {m: m + '(\u20ac)' for m in modified}\ndf.rename(columns=columns, inplace=True)","61a4de3a":"def convert_height(height):\n    feet, inch = height.split(\"'\") # 1 feet = 30.48 cm, 1 inch = 2.54 cm\n    return int(feet) * 30.48 + int(inch) * 2.54","0f174575":"df['Height'].fillna(\"0'0\", inplace=True)\ndf.loc[:, 'Height'] = df['Height'].map(convert_height)\ndf.rename(columns={'Height': 'Height(cm)'}, inplace=True)","bf8cadcc":"df.loc[:, 'Weight'] = df['Weight'].str.replace('lbs', '')\ndf['Weight'].fillna(0, inplace=True)\ndf.loc[:, 'Weight'] = df['Weight'].map(int) * 0.45 # 1 lbs = 0.453592 kg\ndf.rename(columns={'Weight': 'Weight(kg)'}, inplace=True)","739a5e64":"df.fillna('Unassigned', inplace=True)","83d481e6":"df.isna().sum().sort_values(ascending=False)","0ad4159b":"df['Nationality'].value_counts()[:10].plot(kind='bar')\nplt.show()","8f69035a":"df.sort_values(by='Value(\u20ac)', ascending=False)[:10]","2da069a3":"# Top 10 countries for Value(\u20ac)\ndf.groupby('Nationality')['Value(\u20ac)'].sum().sort_values(ascending=False)[:10].plot(kind='bar')\nplt.show()","116fb4fa":"# Top 10 Club for Value(\u20ac)\ndf.groupby('Club')['Value(\u20ac)'].sum().sort_values(ascending=False)[:10].plot(kind='bar')\nplt.show()","59d8fe78":"# Top 10 countries for overall\n# Result does not match our common sense on soccer.\n# In this case, I need to filter out some countries whose counts is smaller than the mean counts.\ndf.groupby('Nationality')['Overall'].mean().sort_values(ascending=False)[:10].plot(kind='bar')\nplt.show()","1df37093":"# Get top 20 countries\nnationality_top20 = df['Nationality'].value_counts()[:20].index","0c81e620":"# Again, top 10 countries for overall from top 20 countries index\ndf[df['Nationality'].isin(nationality_top20)].groupby('Nationality')['Overall'].mean().sort_values(ascending=False)[:10].plot(kind='bar')\nplt.show()","8cbf5fcf":"korea = df[df['Nationality'] == 'Korea Republic']","0053b40c":"korea_clubs = DataFrame(korea['Club'].value_counts().index, columns=['Club'])","37455888":"korea_clubs['playwhere'] = np.where(korea['Club'].value_counts() >= 10, 'domestic', 'overseas')","db830d30":"korea_clubs.set_index('Club', inplace=True)","b1a54a99":"kclub_dict = korea_clubs['playwhere'].to_dict()","f1efaaae":"korea['playwhere'] = korea['Club'].map(kclub_dict)","db9b5000":"# define font properties fot plot\ntitledict = {'fontsize': 30,\n             'color': 'black',\n             'weight': 'bold'}\nxlabeldict = {'fontsize': 20,\n              'color': 'green'}\nylabeldict = {'fontsize': 20,\n              'color': 'red'}","2c7221b9":"ax = korea['playwhere'].value_counts().plot(kind='bar', figsize=(8, 8))\nax.set_xticklabels(['domestic', 'overseas'], fontsize=20, rotation=0)\nax.set_yticklabels([i * 50 for i in range(7)], fontsize=15)\nax.set_xlabel('Play where', fontdict=xlabeldict)\nax.set_ylabel('Number of Korean players', fontdict=ylabeldict)\nax.set_title(\"Korean players' ratio who play overseas\", fontdict=titledict)\nplt.show()","c685b182":"interests = ['Value(\u20ac)', 'Age', 'International Reputation', 'Height(cm)', 'Weight(kg)']\ncountries = ['Japan', 'Iran', 'United States', 'Germany', 'England', 'Spain',\n             'France', 'Mexico', 'Italy', 'Brazil']\nresult = {}\nfor country in countries:\n    temp = []\n    df_country = df[df['Nationality'] == country]\n    for interest in interests:\n        temp.append(round(korea[interest].mean() \/ df_country[interest].mean(), 3))\n    result[country] = temp\nax = DataFrame(result, index=interests).plot(kind='bar', figsize=(20, 20))\nax.plot([-2, 10], [1, 1], linewidth=3, linestyle='--', color='black')\nax.set_title(\"Korea's Relative Capability against several countries\",\n             fontdict=titledict)\nax.legend(loc='upper left', bbox_to_anchor=(1, 1), borderaxespad=0, fontsize=20)\nax.set_xticklabels(interests, rotation=0, fontsize=20)\nax.set_yticklabels([round(i * 0.2, 1) for i in range(6)], fontsize=20)\nax.set_xlabel('Abilities', fontdict=xlabeldict)\nax.set_ylabel('Relativity', fontdict=ylabeldict)\nplt.show()","07a978c4":"hson_overall = korea.loc['H. Son', 'Overall']\ninterests = ['Age', 'Value(\u20ac)', 'International Reputation', 'Height(cm)', 'Weight(kg)']\nresult = {}\nfor interest in interests:\n    comparision = korea.loc['H. Son', interest] \/ df[df['Overall'] == hson_overall][interest].mean()\n    result[interest] = comparision\nresult = Series(result)\nax = result.plot(kind='bar', figsize=(10, 10))\nax.set_title('Compare H. Son and same overall players(H. Son \/ Other players)',\n             fontdict=titledict)\nax.set_xlabel('Abilities', fontdict=xlabeldict)\nax.set_xticklabels(interests, rotation=0)\nax.set_ylabel('Relativity', fontdict=ylabeldict)\nplt.show()","3e67c0de":"# Modify Weight from string(lbs) to  numeric(kg)","32a3f7fb":"# Compare and H. Son and other players who have same overall(84)","9bf707c9":"# Modify money string to numeric","9e5a967f":"# Modify Height from string to numeric","24508f7c":"# Compare Korea and other countries","b33f0c3a":"# Korean players' ratio who play overseas"}}