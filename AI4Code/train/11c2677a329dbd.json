{"cell_type":{"601ef072":"code","43d7e0b4":"code","0972122a":"code","d08e67b9":"code","ed73d3a4":"code","6b5abc84":"code","8bea4744":"markdown","092148b0":"markdown","d77745dd":"markdown","f41c15b2":"markdown"},"source":{"601ef072":"import pandas as pd\nfrom tqdm import tqdm\ntqdm.pandas()\ndf = pd.read_csv(\"..\/input\/jigsaw-toxic-severity-rating\/validation_data.csv\")\ntxts = df[\"more_toxic\"].unique().tolist() + df[\"less_toxic\"].unique().tolist()\ntxts = list(set(txts))","43d7e0b4":"!pip install choix -qq\nimport choix","0972122a":"#https:\/\/github.com\/lucasmaystre\/choix\/blob\/3e1365e56978299f090a61581bb265cf92620258\/notebooks\/intro-pairwise.ipynb\ndef generate_pair_tuple(row):\n    winner = txts.index(row[\"more_toxic\"])\n    loser = txts.index(row[\"less_toxic\"])\n    return (winner, loser)\n\npairs = df.progress_apply(generate_pair_tuple, axis=1).tolist()\nparams_mm = choix.mm_pairwise(len(txts), pairs, alpha=0.01)\nprint(\"MM done\")\n_ = \"\"\"\n#params_bfgs = choix.opt_pairwise(len(txts), pairs, alpha=0.01, method=\"BFGS\")\n#print(\"BFGS done\")\n#params_newton = choix.opt_pairwise(len(txts), pairs, alpha=0.01, method=\"Newton-CG\") \n#print(\"Newton done\")\nparams_lsr = choix.lsr_pairwise(len(txts), pairs, alpha=0.01)\nprint(\"LSR Sparse done\")\nparams_ilsr = choix.ilsr_pairwise(len(txts), pairs, alpha=0.01)\nprint(\"ILSR Sparse done\")\n\"\"\"","d08e67b9":"import wt_text_processing_utils as wtp_utils\n\ntxts = pd.Series(txts)\ntclean = wtp_utils.preprocess_text(txts)","ed73d3a4":"txts = txts.to_frame()\ntxts.columns = [\"txt\"]\ntxts[\"tclean\"] = tclean\ntxts[\"reg_rank_mm\"] = params_mm #MM Converged properly for all non-contradictory datapoints. So use that. \n\ntxts.to_csv(\"eval_regression.csv\", index=False)","6b5abc84":"dfpairs = pd.read_csv(\"..\/input\/jigsaw-toxic-severity-rating\/validation_data.csv\") \nrankdf = dfpairs[[\"less_toxic\", \"more_toxic\"]].drop_duplicates().copy().reset_index(drop=True)\n\nrdf1 = pd.merge(rankdf, rankdf, how=\"left\", left_on=\"less_toxic\", right_on=\"more_toxic\")\ndel rdf1[\"more_toxic_y\"]\nrdf1.rename(columns = {\"less_toxic_x\": \"t2\", \"more_toxic_x\": \"t1\", \"less_toxic_y\": \"t3\"}, inplace=True)\nrdf1[\"t3\"].fillna(\"\", inplace=True)\n\nrdf2 = pd.merge(rankdf, rankdf, how=\"left\", left_on=\"more_toxic\", right_on=\"less_toxic\")\ndel rdf2[\"less_toxic_y\"]\nrdf2.rename(columns = {\"more_toxic_x\": \"t2\", \"less_toxic_x\": \"t1\", \"more_toxic_y\": \"t3\"}, inplace=True)\nrdf2[\"t3\"].fillna(\"\", inplace=True)\n\ncois = list(map(lambda i: f\"t{i+1}\", range(3)))\nrdf = pd.concat([rdf1[cois], rdf2[cois]]).reset_index(drop=True)\nrdf = rdf.drop_duplicates()\n(rdf[\"t1\"]==rdf[\"t3\"]).sum(), (~rdf[\"t3\"].isna()).sum(), rankdf.shape\n\ncpairdf = rdf[rdf[\"t1\"]==rdf[\"t3\"]][[\"t1\", \"t2\"]]\ncpairdf[\"is_contra\"] = True\n\ndfpairs = pd.merge(dfpairs, cpairdf, left_on=[\"less_toxic\", \"more_toxic\"], right_on=[\"t1\", \"t2\"], how=\"left\")\ndel dfpairs[\"t1\"], dfpairs[\"t2\"]\ndfpairs[\"is_contra\"].fillna(False, inplace=True)\n\ndfpairs.to_csv(\"eval_rankable.csv\", index=False)","8bea4744":"## Bertweet cleanup","092148b0":"## Regression Op gen","d77745dd":"## Are there contradictory text pairs","f41c15b2":"## Convert pairwise datapoints to regression data"}}