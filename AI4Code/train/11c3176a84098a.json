{"cell_type":{"cafc8a55":"code","a08f2854":"code","0fb5a8c0":"code","be5dfc03":"code","15aebc51":"code","80727b58":"code","80dbdcec":"code","1d0aed86":"code","ad5073d4":"code","5e131f19":"code","f4b0accd":"code","7269aa06":"code","24d54c43":"code","cae9f035":"code","88343a9c":"code","d52c5afa":"code","fee84af9":"code","5abc56cf":"code","0cbe89b2":"code","ccd54582":"code","9c2e5208":"code","f9cea2a3":"code","3f1d98a2":"markdown","f6b56cb5":"markdown","8d8e0c67":"markdown","fc95833c":"markdown","294577ac":"markdown","1881c1ab":"markdown","aab3794d":"markdown","dc21f5bf":"markdown"},"source":{"cafc8a55":"# This Python 3 environment comes with many helpful analytics libraries installed\nimport random\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport torch # Deep learning framework\nimport torch.nn.functional as F\n\n# Input data files are available in the \"..\/input\/\" directory.\nimport os\nprint(os.listdir(\"..\/input\"))\n\n#Init random seed to get reproducible results\nseed = 1111\nrandom.seed(seed)\nnp.random.RandomState(seed)\ntorch.manual_seed(seed)\n\n# Any results you write to the current directory are saved as output.\nx_train_full = open(\"..\/input\/x_train.txt\").read().splitlines()\ny_train_full = open(\"..\/input\/y_train.txt\").read().splitlines()\nprint('Example:')\nprint('LANG =', y_train_full[0])\nprint('TEXT =', x_train_full[0])","a08f2854":"class Dictionary(object):\n    def __init__(self):\n        self.token2idx = {}\n        self.idx2token = []\n\n    def add_token(self, token):\n        if token not in self.token2idx:\n            self.idx2token.append(token)\n            self.token2idx[token] = len(self.idx2token) - 1\n        return self.token2idx[token]\n\n    def __len__(self):\n        return len(self.idx2token)","0fb5a8c0":"char_vocab = Dictionary()\npad_token = '<pad>' # reserve index 0 for padding\nunk_token = '<unk>' # reserve index 1 for unknown token\npad_index = char_vocab.add_token(pad_token)\nunk_index = char_vocab.add_token(unk_token)\n\n# join all the training sentences in a single string\n# and obtain the list of different characters with set\nchars = set(''.join(x_train_full))\nfor char in sorted(chars):\n    char_vocab.add_token(char)\nprint(\"Vocabulary:\", len(char_vocab), \"UTF characters\")\n\nlang_vocab = Dictionary()\n# use python set to obtain the list of languages without repetitions\nlanguages = set(y_train_full)\nfor lang in sorted(languages):\n    lang_vocab.add_token(lang)\nprint(\"Labels:\", len(lang_vocab), \"languages\")","be5dfc03":"#From token or label to index\nprint('a ->', char_vocab.token2idx['a'])\nprint('cat ->', lang_vocab.token2idx['cat'])\nprint(y_train_full[0], x_train_full[0][:10])\nx_train_idx = [np.array([char_vocab.token2idx[c] for c in line]) for line in x_train_full]\ny_train_idx = np.array([lang_vocab.token2idx[lang] for lang in y_train_full])\nprint(y_train_idx[0], x_train_idx[0][:10])","15aebc51":"from sklearn.model_selection import train_test_split\nx_train, x_val, y_train, y_val = train_test_split(x_train_idx, y_train_idx, test_size=0.15, random_state=seed)\ntrain_data = [(x, y) for x, y in zip(x_train, y_train)]\nval_data = [(x, y) for x, y in zip(x_val, y_val)]\nprint(len(train_data), \"training samples\")\nprint(len(val_data), \"validation samples\")","80727b58":"def batch_generator(data, batch_size, token_size):\n    \"\"\"Yield elements from data in chunks with a maximum of batch_size sequences and token_size tokens.\"\"\"\n    minibatch, sequences_so_far, tokens_so_far = [], 0, 0\n    for ex in data:\n        minibatch.append(ex)\n        seq_len = len(ex[0])\n        if seq_len > token_size:\n            ex = (ex[0][:token_size], ex[1])\n            seq_len = token_size\n        sequences_so_far += 1\n        tokens_so_far += seq_len\n        if sequences_so_far == batch_size or tokens_so_far == token_size:\n            yield minibatch\n            minibatch, sequences_so_far, tokens_so_far = [], 0, 0\n        elif sequences_so_far > batch_size or tokens_so_far > token_size:\n            yield minibatch[:-1]\n            minibatch, sequences_so_far, tokens_so_far = minibatch[-1:], 1, len(minibatch[-1][0])\n    if minibatch:\n        yield minibatch","80dbdcec":"def pool_generator(data, batch_size, token_size, shuffle=False):\n    \"\"\"Sort within buckets, then batch, then shuffle batches.\n    Partitions data into chunks of size 100*token_size, sorts examples within\n    each chunk, then batch these examples and shuffle the batches.\n    \"\"\"\n    for p in batch_generator(data, batch_size * 100, token_size * 100):\n        p_batch = batch_generator(sorted(p, key=lambda t: len(t[0]), reverse=True), batch_size, token_size)\n        p_list = list(p_batch)\n        if shuffle:\n            for b in random.sample(p_list, len(p_list)):\n                yield b\n        else:\n            for b in p_list:\n                yield b","1d0aed86":"class CharRNNClassifier(torch.nn.Module):\n\n    def __init__(self, input_size, embedding_size, hidden_size, output_size, model=\"lstm\", num_layers=1, bidirectional=False, pad_idx=0):\n        super().__init__()\n        self.model = model.lower()\n        self.hidden_size = hidden_size\n        self.embed = torch.nn.Embedding(input_size, embedding_size, padding_idx=pad_idx)\n        if self.model == \"gru\":\n            self.rnn = torch.nn.GRU(embedding_size, hidden_size, num_layers, bidirectional=bidirectional)\n        elif self.model == \"lstm\":\n            self.rnn = torch.nn.LSTM(embedding_size, hidden_size, num_layers, bidirectional=bidirectional)\n        self.h2o = torch.nn.Linear(hidden_size, output_size)\n        \n    def forward(self, input, input_lengths):\n        # T x B\n        encoded = self.embed(input)\n        # T x B x E\n        packed = torch.nn.utils.rnn.pack_padded_sequence(encoded, input_lengths)\n        # Packed T x B x E\n        output, _ = self.rnn(packed)\n        # Packed T x B x H\n        padded, _ = torch.nn.utils.rnn.pad_packed_sequence(output, padding_value=float('-inf'))\n        # T x B x H\n        padded = padded.permute(1,2,0)\n        # B x H x T\n        output = F.adaptive_max_pool1d(padded, 1).view(-1, self.hidden_size)\n        # B x H\n        output = self.h2o(output)\n        # B x O\n        return output","ad5073d4":"if not torch.cuda.is_available():\n    print(\"WARNING: CUDA is not available. Select 'GPU On' on kernel settings\")\ndevice = torch.device(\"cuda\")\ntorch.cuda.manual_seed(seed)","5e131f19":"criterion = torch.nn.CrossEntropyLoss(reduction='sum')","f4b0accd":"def train(model, optimizer, data, batch_size, token_size, log=False):\n    model.train()\n    total_loss = 0\n    ncorrect = 0\n    nsentences = 0\n    ntokens = 0\n    niterations = 0\n    for batch in pool_generator(data, batch_size, token_size, shuffle=True):\n        # Get input and target sequences from batch\n        X = [torch.from_numpy(d[0]) for d in batch]\n        X_lengths = [x.numel() for x in X]\n        ntokens += sum(X_lengths)\n        X_lengths = torch.tensor(X_lengths, dtype=torch.long, device=device)\n        y = torch.tensor([d[1] for d in batch], dtype=torch.long, device=device)\n        # Pad the input sequences to create a matrix\n        X = torch.nn.utils.rnn.pad_sequence(X).to(device)\n        model.zero_grad()\n        output = model(X, X_lengths)\n        loss = criterion(output, y)\n        loss.backward()\n        optimizer.step()\n        # Training statistics\n        total_loss += loss.item()\n        ncorrect += (torch.max(output, 1)[1] == y).sum().item()\n        nsentences += y.numel()\n        niterations += 1\n    \n    total_loss = total_loss \/ nsentences\n    accuracy = 100 * ncorrect \/ nsentences\n    if log:\n        print(f'Train: wpb={ntokens\/\/niterations}, bsz={nsentences\/\/niterations}, num_updates={niterations}')\n    return accuracy","7269aa06":"def validate(model, data, batch_size, token_size):\n    model.eval()\n    # calculate accuracy on validation set\n    ncorrect = 0\n    nsentences = 0\n    with torch.no_grad():\n        for batch in pool_generator(data, batch_size, token_size):\n            # Get input and target sequences from batch\n            X = [torch.from_numpy(d[0]) for d in batch]\n            X_lengths = torch.tensor([x.numel() for x in X], dtype=torch.long, device=device)\n            y = torch.tensor([d[1] for d in batch], dtype=torch.long, device=device)\n            # Pad the input sequences to create a matrix\n            X = torch.nn.utils.rnn.pad_sequence(X).to(device)\n            answer = model(X, X_lengths)\n            ncorrect += (torch.max(answer, 1)[1] == y).sum().item()\n            nsentences += y.numel()\n        dev_acc = 100 * ncorrect \/ nsentences\n    return dev_acc","24d54c43":"hidden_size = 256\nembedding_size = 64\nbidirectional = False\nntokens = len(char_vocab)\nnlabels = len(lang_vocab)","cae9f035":"model = CharRNNClassifier(ntokens, embedding_size, hidden_size, nlabels, bidirectional=bidirectional, pad_idx=pad_index).to(device)\noptimizer = torch.optim.Adam(model.parameters())","88343a9c":"batch_size, token_size = 256, 200000\nepochs = 25\ntrain_accuracy = []\nvalid_accuracy = []\nprint(f'Training cross-validation model for {epochs} epochs')\nfor epoch in range(1, epochs + 1):\n    acc = train(model, optimizer, train_data, batch_size, token_size, log=epoch==1)\n    train_accuracy.append(acc)\n    print(f'| epoch {epoch:03d} | train accuracy={acc:.1f}%')\n    acc = validate(model, val_data, batch_size, token_size)\n    valid_accuracy.append(acc)\n    print(f'| epoch {epoch:03d} | valid accuracy={acc:.1f}%')","d52c5afa":"import matplotlib.pyplot as plt\nplt.plot(range(1, len(train_accuracy)+1), train_accuracy)\nplt.plot(range(1, len(valid_accuracy)+1), valid_accuracy)\nplt.xlabel('epoch')\nplt.ylabel('Accuracy');","fee84af9":"model = CharRNNClassifier(ntokens, embedding_size, hidden_size, nlabels, bidirectional=bidirectional).to(device)\noptimizer = torch.optim.Adam(model.parameters())","5abc56cf":"print(f'Training final model for {epochs} epochs')\nfor epoch in range(1, epochs + 1):\n    print(f'| epoch {epoch:03d} | train accuracy={train(model, optimizer, train_data + val_data, batch_size, token_size, log=epoch==1):.3f}')","0cbe89b2":"def test(model, data, batch_size, token_size):\n    model.eval()\n    sindex = []\n    labels = []\n    with torch.no_grad():\n        for batch in pool_generator(data, batch_size, token_size):\n            # Get input sequences from batch\n            X = [torch.from_numpy(d[0]) for d in batch]\n            X_lengths = torch.tensor([x.numel() for x in X], dtype=torch.long, device=device)\n            # Pad the input sequences to create a matrix\n            X = torch.nn.utils.rnn.pad_sequence(X).to(device)\n            answer = model(X, X_lengths)\n            label = torch.max(answer, 1)[1].cpu().numpy()\n            # Save labels and sentences index\n            labels.append(label)\n            sindex += [d[1] for d in batch]\n    return np.array(sindex), np.concatenate(labels)","ccd54582":"x_test_txt = open(\"..\/input\/x_test.txt\").read().splitlines()\nx_test_idx = [np.array([char_vocab.token2idx[c] if c in char_vocab.token2idx else unk_index for c in line]) for line in x_test_txt]\ntest_data = [(x, idx) for idx, x in enumerate(x_test_idx)]","9c2e5208":"index, labels = test(model, test_data, batch_size, token_size)\norder = np.argsort(index)\nlabels = labels[order]","f9cea2a3":"with open('submission.csv', 'w') as f:\n    print('Id,Language', file=f)\n    for sentence_id, lang_id in enumerate(labels):\n        language = lang_vocab.idx2token[lang_id]\n        if sentence_id < 10:\n            print(f'{sentence_id},{language}')\n        print(f'{sentence_id},{language}', file=f)","3f1d98a2":"The sentence index is used to rearrange the labels in the original sentence order","f6b56cb5":"The **nn.CrossEntropyLoss()** criterion combines **nn.LogSoftmax()** and **nn.NLLLoss()** in one single class.  \nIt is useful when training a classification problem.","8d8e0c67":"In the test database we replace the label (language) with a sentence index.  ","fc95833c":"Model for cross-validation","294577ac":"Radomly select 15% of the database for validation  \nCreate lists of (input, target) tuples for training and validation","1881c1ab":"**DNN Model**  \nIncludes Python comments with the dimension of the input  matrix:  \nT = Max number of tokens in a sequence  \nB = Number of sequences (batch size)  \nE = Embedding size  \nH = Hidden size  \nO = Output size (number of languages)","aab3794d":"**Final model**  \nFinally, we create a model using all the training data and we generate the submission with the predicted test labels","dc21f5bf":"The **Dictionary** class is used to map tokens (characters, words, subwords) into consecutive integer indexes.  \nThe index **0** is reserved for padding sequences up to a fixed lenght, and the index **1** for any 'unknown' character"}}