{"cell_type":{"bb0d9114":"code","db9539b8":"code","3ef2c3cf":"code","98ce27cd":"code","dcf2ea83":"code","37d20502":"code","c7c0710e":"code","e1809825":"code","4e992eb9":"code","2f0ea039":"code","ba4ff259":"code","d7dbc014":"code","8ba7c438":"code","9b27e288":"code","93b25a8b":"code","c74d991a":"code","5603ebb4":"code","1b502e4e":"code","cb0b2883":"code","024980e4":"code","4a78d68f":"code","8b2c113d":"markdown","ccbedffb":"markdown","da4f0613":"markdown","f2e22a60":"markdown","9d25b283":"markdown","a6f20773":"markdown","e470e371":"markdown","6fd5d0f7":"markdown","4fd02e0c":"markdown","6e01a4f6":"markdown"},"source":{"bb0d9114":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib as mpl\nimport matplotlib.pyplot as plt\nfrom matplotlib.patches import Polygon\nfrom matplotlib import animation, rc\nfrom IPython.display import HTML","db9539b8":"%%capture\nrc('animation', html='jshtml') # \nnp.random.seed(0)\n\nfig,ax = plt.subplots(figsize=(12, 9))\nax.axis('off')\nfig.set_facecolor('black')\n\niters = 100\nx = np.linspace(0, 1, 100)\ny = np.random.rand(100)\n\nspeed = np.random.rand(100) \/ 40 + 0.01\nsize = np.random.rand(100) * 100\nalpha = np.random.rand(100)\n\n\nims = []\nfor i in range(iters):\n    y -= speed\n    y[y < 0] = np.random.rand(len(y[y < 0]))\n    im = ax.scatter(x, y,color='white', s=size, alpha=alpha,  animated=True)\n    ims.append([im])\n\nfig.tight_layout()\nani = animation.ArtistAnimation(fig, ims, interval=100, blit=True,\n                                repeat_delay=1000)\n\nani.save('snow_effect.gif', writer='imagemagick')","3ef2c3cf":"HTML(ani.to_jshtml())","98ce27cd":"%%capture\nimport seaborn as sns\nrc('animation', html='jshtml')\nnp.random.seed(0)\n\nfig,ax = plt.subplots(figsize=(12, 9))\nax.axis('off')\n\nnums = 10\niters = 160\nx, y = 0, 0\nv_x, v_y = 1, 3\na_x, a_y = 0, 0.2\nx_list, y_list = [x for _ in range(nums)], [y for _ in range(nums)]\nsize = np.arange(0, 1000, 1000\/nums)\nalpha = np.linspace(0, 1, nums)\ncolor = sns.color_palette(\"RdPu\", nums)\n\nims = []\n\nv_ystart = v_y\nfor i in range(iters):\n    im = ax.scatter(x_list, y_list,color=color, s=size, alpha=alpha,  animated=True)\n    ims.append([im])\n    v_y -= a_y\n    x += v_x\n    y += v_y\n    if y < 0:\n        y = 0\n        v_y = v_ystart * 0.8\n        v_ystart = v_y\n\n    x_list.append(x)\n    y_list.append(y)\n    x_list = x_list[1:]\n    y_list = y_list[1:]\n\nfig.tight_layout()\nani = animation.ArtistAnimation(fig, ims, interval=50, blit=True,\n                                repeat_delay=1000)\nani.save('bounce_ball.gif', writer='imagemagick')","dcf2ea83":"HTML(ani.to_jshtml())","37d20502":"from itertools import product, combinations\n\ndef x_rotate(v, theta):\n    x_theta = np.array([\n        [1, 0, 0],\n        [0, np.cos(theta), -np.sin(theta)],\n        [0, np.sin(theta), np.cos(theta)]\n    ])\n    return np.matmul(v, x_theta)\n    \ndef y_rotate(v, theta):\n    y_theta = np.array([\n        [np.cos(theta), 0, np.sin(theta)],\n        [0, 1, 0],\n        [-np.sin(theta), 0, np.cos(theta)]\n    ])\n    return np.matmul(v, y_theta)\n    \n\ndef z_rotate(v, theta):\n    z_theta = np.array([\n        [np.cos(theta), -np.sin(theta), 0],\n        [np.sin(theta), np.cos(theta), 0],\n        [0, 0, 1]\n    ])\n    return np.matmul(v, z_theta)\n    \ndef edge_init(lst):\n    ret = []\n    dist = []\n    for i, a in enumerate(lst):\n        for j, b in enumerate(lst):\n            if i <= j: continue\n            dist.append(np.linalg.norm(a-b))\n            \n    dist = min(dist)\n    for i, a in enumerate(lst):\n        for j, b in enumerate(lst):\n            if i >= j: continue\n            if abs(dist-np.linalg.norm(a-b)) < 1e-6:\n                ret.append([i, j])\n    return ret\n\ndef face_init(lst, n):\n    face_lst = []\n    for comb in combinations(lst, n):\n        if len(set(np.concatenate(comb))) != n: continue\n        face = [comb[0][0]]\n        ck = [False for _ in range(n)]\n        for i in range(n):\n            v = face[-1]\n            for j in range(n):\n                if ck[j]: continue\n                if v in comb[j]:\n                    if v==comb[j][0]: v = comb[j][1]\n                    elif v==comb[j][1]: v = comb[j][0]\n                    ck[j] = True\n                    face.append(v)\n                    break\n        face.append(face[0])\n        face_lst.append(face)\n    return face_lst\n\n","c7c0710e":"ones = np.array([-1, 1])\nphi = (1+np.sqrt(5))\/2\nphis = np.array([-phi, phi])\nphi_revs = np.array([-1\/phi,1\/phi])","e1809825":"def draw(points, edges, faces, iters, save_name=None):\n    fig,ax = plt.subplots(figsize=(12, 12))\n    ax.axis('off')\n    ax.set_aspect('equal')\n    ims = []\n    for i in range(iters):\n        x = points[:,0]\n        y =  points[:,1]\n        z = points[:,2]\n        e,f = [], []\n        for edge in edges:\n            line = ax.plot(x[edge], y[edge], color='black', linewidth=5, animated=True)\n            e.append(*line)\n\n        cm = plt.cm.get_cmap('rainbow', len(faces))\n        for idx, face in enumerate(faces):\n            fc = Polygon(np.stack([x[face], y[face]]).T, fc=cm(idx),#'#6667ab', \n                         closed=True, alpha=0.3, animated=True)\n            p = ax.add_patch(fc)\n            f.append(p)\n\n        ims.append([*e, *f])\n        points = x_rotate(points, np.pi\/24)\n        points = z_rotate(points, np.pi\/12)\n\n    fig.tight_layout()\n    ani = animation.ArtistAnimation(fig, ims, interval=100, blit=True,\n                                    repeat_delay=0)\n    if save_name:\n        ani.save(f'{save_name}.gif', writer='imagemagick')\n    return ani","4e992eb9":"%%capture  \npoints = np.array(list(product(ones, ones, ones)))\nedges = edge_init(points)\nfaces = face_init(edges, 4)\niters = 24\nani = draw(points, edges, faces, iters, 'cube')","2f0ea039":"HTML(ani.to_jshtml())","ba4ff259":"%%capture\npoints = np.array(\n    [[1, 1, 1],\n    [1, -1, -1],\n    [-1, 1, -1],\n    [-1, -1, 1]]\n)\n\nedges = edge_init(points)\nfaces = face_init(edges, 3)\niters = 24\nani = draw(points, edges, faces, iters,'tetrahedron')","d7dbc014":"HTML(ani.to_jshtml())","8ba7c438":"%%capture\npoints = np.array(list(product(ones,[0], [0]))+list(product([0], ones, [0]))+list(product([0], [0], ones)))\nedges = edge_init(points)\nfaces = face_init(edges, 3)\niters = 24\nani = draw(points, edges, faces, iters, 'octahedron')","9b27e288":"HTML(ani.to_jshtml())","93b25a8b":"%%capture\npoints = np.array(list(product([0], ones, phis))+list(product(ones,phis,[0]))+list(product(phis,[0], ones)))\nedges = edge_init(points)\nfaces = face_init(edges, 3)\niters = 24\nani = draw(points, edges, faces, iters,'isosahedron')","c74d991a":"HTML(ani.to_jshtml())","5603ebb4":"%%capture\npoints = np.array(\n    list(product(ones, ones, ones))+\n    list(product([0], phi_revs, phis))+\n    list(product(phi_revs, phis, [0]))+\n    list(product(phis, [0], phi_revs))\n)\nedges = edge_init(points)\nfaces = face_init(edges, 5)\nprint(faces)\niters = 24\nani = draw(points, edges, faces, iters, 'dodecahedron')","1b502e4e":"HTML(ani.to_jshtml())","cb0b2883":"%%capture\np_lst = [\n    np.array(\n    [[1, 1, 1],\n    [1, -1, -1],\n    [-1, 1, -1],\n    [-1, -1, 1]]\n    ),\n    np.array(list(product(ones, ones, ones))),\n    np.array(list(product(ones*np.sqrt(2),[0], [0]))+list(product([0], ones*np.sqrt(2), [0]))+list(product([0], [0], ones*np.sqrt(2)))),\n    np.array(\n    list(product(ones, ones, ones))+\n    list(product([0], phi_revs, phis))+\n    list(product(phi_revs, phis, [0]))+\n    list(product(phis, [0], phi_revs))\n    ),\n    np.array(list(product([0], ones, phis))+list(product(ones,phis,[0]))+list(product(phis,[0], ones))),\n]\n\ne_lst = [edge_init(p) for p in p_lst]\nf_lst = [face_init(e, n) for e, n in zip(e_lst, [3,4,3,5,3])]\niters = 120\ncenters = [\n    [6, 5],\n    [10, 5],\n    [4, 1],\n    [8, 1],\n    [12, 1]\n]\n\n\nfig,ax = plt.subplots(figsize=(24, 18))\nax.axis('off')\nax.set_aspect('equal')\nims = []\ntxt = ax.text(8,-1.4,'(C) 2022. Subin An(@subinium) all rights reserved.', \n              color='gray', fontsize=32, fontweight='bold', \n              va='center', ha='center')\n\nfor i in range(iters):\n    ims_tmp = []\n    for idx, (points, edges, faces, center) in enumerate(zip(p_lst, e_lst, f_lst, centers)):\n        x, y = points[:,0].copy(), points[:,1].copy()\n        xp, yp = x+center[0], y+center[1]\n        \n        z = points[:,2]\n        e,f = [], []\n        for edge in edges:\n            line = ax.plot(xp[edge], yp[edge], color='black', linewidth=5, animated=True)\n            e.append(*line)\n\n        cm = plt.cm.get_cmap('rainbow', len(faces))\n        for jdx, face in enumerate(faces):\n            fc = Polygon(np.stack([xp[face], yp[face]]).T, fc=cm(jdx),#'#6667ab', \n                         closed=True, alpha=0.3, animated=True)\n            p = ax.add_patch(fc)\n            f.append(p)\n\n        ims_tmp += e + f + [txt]\n        p_lst[idx] = x_rotate(p_lst[idx], 2*np.pi\/iters*2)\n        p_lst[idx] = z_rotate(p_lst[idx], 2*np.pi\/iters)\n    ims.append(ims_tmp)\n\nfig.tight_layout()\nani = animation.ArtistAnimation(fig, ims, interval=50, blit=True,\n                                repeat_delay=0)\n\nani","024980e4":"ani.save('result.gif', writer='imagemagick')","4a78d68f":"HTML(ani.to_jshtml())","8b2c113d":"### Isosahedron","ccbedffb":"## 3D Rotation","da4f0613":"## Snow","f2e22a60":"### Octahedron","9d25b283":"### All","a6f20773":"## Bounce Ball","e470e371":"### Cube","6fd5d0f7":"### Tetrahedron","4fd02e0c":"### Dodecahedron","6e01a4f6":"## Matplotlib Animation Techniques"}}