{"cell_type":{"a5e28935":"code","8434230c":"code","7deee3ab":"code","3f69b0e4":"code","cabd1e1e":"code","8528bd18":"code","2fc59369":"code","01d88f56":"code","85d0a0dd":"code","21dfe3ed":"code","fa9b2492":"markdown","a36a613a":"markdown","e4dd3eee":"markdown","053d0684":"markdown","510b61e1":"markdown","30e36909":"markdown","3c71aff2":"markdown","9b90885c":"markdown","fa97d82d":"markdown","c4b1d610":"markdown"},"source":{"a5e28935":"import tensorflow as tf\nfrom kaggle_datasets import KaggleDatasets\nfrom tensorflow.keras.layers import Flatten, Dropout, Dense, Conv2D, MaxPooling2D, GlobalAveragePooling2D\nfrom tensorflow.keras.optimizers import Adam, RMSprop, SGD\nimport numpy as np\nimport matplotlib.pyplot as plt\n\nprint(\"Tensorflow version \" + tf.__version__)","8434230c":"# Detect hardware, return appropriate distribution strategy\ntry:\n    tpu = tf.distribute.cluster_resolver.TPUClusterResolver()  # TPU detection. No parameters necessary if TPU_NAME environment variable is set. On Kaggle this is always the case.\n    print('Running on TPU ', tpu.master())\nexcept ValueError:\n    tpu = None\n\nif tpu:\n    tf.config.experimental_connect_to_cluster(tpu)\n    tf.tpu.experimental.initialize_tpu_system(tpu)\n    strategy = tf.distribute.experimental.TPUStrategy(tpu)\nelse:\n    strategy = tf.distribute.get_strategy() # default distribution strategy in Tensorflow. Works on CPU and single GPU.\n\nprint(\"REPLICAS: \", strategy.num_replicas_in_sync)","7deee3ab":"GCS_DS_PATH = KaggleDatasets().get_gcs_path('tpu-getting-started') # you can list the bucket with \"!gsutil ls $GCS_DS_PATH\"","3f69b0e4":"IMAGE_SIZE = [512, 512] # at this size, a GPU will run out of memory. Use the TPU\nEPOCHS_STEP1 = 50\nEPOCHS_STEP2 = 40\nAUTOTUNE = tf.data.experimental.AUTOTUNE\nBATCH_SIZE = 16 * strategy.num_replicas_in_sync\nprint(\"Batch size = \", BATCH_SIZE)\n\nNUM_TRAINING_IMAGES = 12753\nNUM_TEST_IMAGES = 7382\nSTEPS_PER_EPOCH = NUM_TRAINING_IMAGES \/\/ BATCH_SIZE\nprint(\"Steps per epoch = \", STEPS_PER_EPOCH)","cabd1e1e":"def decode_image(image_data):\n    image = tf.image.decode_jpeg(image_data, channels=3)\n    image = tf.cast(image, tf.float32) \/ 255.0  # convert image to floats in [0, 1] range\n    image = tf.reshape(image, [*IMAGE_SIZE, 3]) # explicit size needed for TPU \n    return image\n\ndef read_labeled_tfrecord(example):\n    LABELED_TFREC_FORMAT = {\n        \"image\": tf.io.FixedLenFeature([], tf.string), # tf.string means bytestring\n        \"class\": tf.io.FixedLenFeature([], tf.int64),  # shape [] means single element\n    }\n    example = tf.io.parse_single_example(example, LABELED_TFREC_FORMAT)\n    image = decode_image(example['image'])\n    label = tf.cast(example['class'], tf.int32)\n    return image, label # returns a dataset of (image, label) pairs\n\ndef read_unlabeled_tfrecord(example):\n    UNLABELED_TFREC_FORMAT = {\n        \"image\": tf.io.FixedLenFeature([], tf.string), # tf.string means bytestring\n        \"id\": tf.io.FixedLenFeature([], tf.string),  # shape [] means single element\n        # class is missing, this competitions's challenge is to predict flower classes for the test dataset\n    }\n    example = tf.io.parse_single_example(example, UNLABELED_TFREC_FORMAT)\n    image = decode_image(example['image'])\n    idnum = example['id']\n    return image, idnum # returns a dataset of image(s)\n\ndef load_dataset(filenames, labeled=True, ordered=False):\n    # Read from TFRecords. For optimal performance, reading from multiple files at once and\n    # disregarding data order. Order does not matter since we will be shuffling the data anyway.\n    ignore_order = tf.data.Options()\n    if not ordered:\n        ignore_order.experimental_deterministic = False # disable order, increase speed\n\n    dataset = tf.data.TFRecordDataset(filenames) # automatically interleaves reads from multiple files\n    dataset = dataset.with_options(ignore_order) # uses data as soon as it streams in, rather than in its original order\n    dataset = dataset.map(read_labeled_tfrecord if labeled else read_unlabeled_tfrecord)\n    # returns a dataset of (image, label) pairs if labeled=True or (image, id) pairs if labeled=False\n    return dataset\n\ndef data_augmention(image, label):\n    images = tf.image.random_flip_left_right(image)\n    return images, label\n\ndef get_training_dataset():\n    dataset = load_dataset(tf.io.gfile.glob(GCS_DS_PATH + '\/tfrecords-jpeg-512x512\/train\/*.tfrec'), labeled=True)\n    dataset = dataset.map(data_augmention, num_parallel_calls = AUTOTUNE)\n    dataset = dataset.repeat() # the training dataset must repeat for several epochs\n    dataset = dataset.shuffle(2048)\n    dataset = dataset.batch(BATCH_SIZE)\n    dataset = dataset.prefetch(AUTOTUNE)\n    return dataset\n\ndef get_validation_dataset():\n    dataset = load_dataset(tf.io.gfile.glob(GCS_DS_PATH + '\/tfrecords-jpeg-512x512\/val\/*.tfrec'), labeled=True, ordered=False)\n    dataset = dataset.batch(BATCH_SIZE)\n    dataset = dataset.cache()\n    dataset = dataset.prefetch(AUTOTUNE)\n    return dataset\n\ndef get_test_dataset(ordered=False):\n    dataset = load_dataset(tf.io.gfile.glob(GCS_DS_PATH + '\/tfrecords-jpeg-512x512\/test\/*.tfrec'), labeled=False, ordered=ordered)\n    dataset = dataset.batch(BATCH_SIZE)\n    dataset = dataset.prefetch(AUTOTUNE)\n    return dataset\n\ntraining_dataset = get_training_dataset()\nvalidation_dataset = get_validation_dataset()","8528bd18":"with strategy.scope():\n    \n    pretrained_model = tf.keras.applications.InceptionV3(input_shape = [*IMAGE_SIZE, 3], include_top = False,\n                                                     weights='..\/input\/inception-v3-weights\/inception_v3_weights_tf_dim_ordering_tf_kernels_notop.h5')\n\n    pretrained_model.trainable = False\n\n#     last_layer = pretrained_model.get_layer('mixed7')\n#     last_output = last_layer.output\n\n#     x = data_augmentation()(last_output)\n    x = GlobalAveragePooling2D()(pretrained_model.get_layer('mixed7').output)\n    x = Flatten()(x)\n    x = Dropout(0.2)(x)\n    x = Dense(1024, activation='relu')(x)\n    x = Dropout(0.2)(x)\n    x = Dense(2048, activation='relu')(x)\n    x = Dropout(0.2)(x)\n    x = Dense  (104, activation='softmax')(x)           \n\n    model = tf.keras.Model( pretrained_model.input, x)\n\nmodel.compile(\n    optimizer = RMSprop(learning_rate=1e-3),\n    loss = 'sparse_categorical_crossentropy',\n    metrics=['sparse_categorical_accuracy']\n)\n\n# early_stop = tf.keras.callbacks.EarlyStopping(verbose=1, patience=5, monitor=\"val_loss\", restore_best_weights=True)\n\nhistorical = model.fit(training_dataset, \n          steps_per_epoch=STEPS_PER_EPOCH, \n          epochs=EPOCHS_STEP1,\n          validation_data=validation_dataset)","2fc59369":"# plot helper function\ndef plot_graph(history, string):\n    plt.figure(figsize=(10, 6))\n    plt.plot(history.history[string])\n    plt.plot(history.history['val_' + string])\n    plt.xlabel(\"Epochs\")\n    plt.ylabel(string)\n    plt.legend([string, 'val_' + string])\n    \nplot_graph(historical, \"sparse_categorical_accuracy\")\nplot_graph(historical, \"loss\")\nplt.show()","01d88f56":"pretrained_model.trainable = True\n\nmodel.compile(\n    optimizer = RMSprop(learning_rate=1e-5),\n    loss = 'sparse_categorical_crossentropy',\n    metrics=['sparse_categorical_accuracy']\n)\n\nhistorical = model.fit(training_dataset, \n          steps_per_epoch=STEPS_PER_EPOCH, \n          epochs=EPOCHS_STEP2, \n          validation_data=validation_dataset)","85d0a0dd":"plot_graph(historical, \"sparse_categorical_accuracy\")\nplot_graph(historical, \"loss\")\nplt.show()","21dfe3ed":"test_ds = get_test_dataset(ordered=True) # since we are splitting the dataset and iterating separately on images and ids, order matters.\n\nprint('Computing predictions...')\ntest_images_ds = test_ds.map(lambda image, idnum: image)\nprobabilities = model.predict(test_images_ds)\npredictions = np.argmax(probabilities, axis=-1)\nprint(predictions)\n\nprint('Generating submission.csv file...')\ntest_ids_ds = test_ds.map(lambda image, idnum: idnum).unbatch()\ntest_ids = next(iter(test_ids_ds.batch(NUM_TEST_IMAGES))).numpy().astype('U') # all in one batch\nnp.savetxt('submission.csv', np.rec.fromarrays([test_ids, predictions]), fmt=['%s', '%d'], delimiter=',', header='id,label', comments='')","fa9b2492":"# Build, Compile and fit the model","a36a613a":"# Load my data\n\nThis data is loaded from Kaggle and automatically sharded to maximize parallelization.","e4dd3eee":"#  Set some parameters","053d0684":"# Detect my accelerator","510b61e1":"# Optimizer learning rate tuning","30e36909":"# Import libraries\n\nThis is intended as a simple, short introduction to the operations competitors will need to perform with TPUs.","3c71aff2":"# Get my data path","9b90885c":"![image.png](attachment:6c459b51-2a09-4b5c-9b77-c32f1b8cdb80.png)","fa97d82d":"lr_schedule = tf.keras.callbacks.LearningRateScheduler(\n    lambda epoch: 1e-5 * 10**(epoch \/ 10))\n\nwith strategy.scope():        \n\n    local_weights_file = '..\/input\/inception-v3-weights\/inception_v3_weights_tf_dim_ordering_tf_kernels_notop.h5'\n    pretrained_model = tf.keras.applications.InceptionV3(input_shape = [*IMAGE_SIZE, 3], \n                                include_top = False, \n                                weights = None)\n\n    pretrained_model.load_weights(local_weights_file)\n\n    for layer in pretrained_model.layers:\n        layer.trainable = False\n    \n    last_layer = pretrained_model.get_layer('mixed7')\n    print('last layer output shape: ', last_layer.output_shape)\n    last_output = last_layer.output\n\n    x = GlobalAveragePooling2D()(last_output)\n    x = Flatten()(x)\n    x = Dropout(0.2)(x)\n    x = Dense(1024, activation='relu')(x)\n    x = Dropout(0.2)(x)\n    x = Dense(2048, activation='relu')(x)\n    x = Dropout(0.2)(x)\n    x = Dense  (104, activation='softmax')(x)           \n    \n    model = tf.keras.Model( pretrained_model.input, x)\n\nmodel.compile(\n    optimizer = RMSprop(learning_rate=1e-5),\n    loss = 'sparse_categorical_crossentropy',\n    metrics=['sparse_categorical_accuracy']\n)\n\nhistorical = model.fit(training_dataset, \n          steps_per_epoch=STEPS_PER_EPOCH, \n          epochs=EPOCHS, \n          validation_data=validation_dataset,\n            callbacks=[lr_schedule])\n\nplt.semilogx(historical.history[\"lr\"], historical.history[\"loss\"])\nplt.axis([1e-5, 1e-2, 0, 5])","c4b1d610":"# Compute your predictions on the test set!\n\nThis will create a file that can be submitted to the competition."}}