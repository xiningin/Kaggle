{"cell_type":{"c89b30f6":"code","8009edec":"code","1a44ee39":"code","2314fbda":"code","4fff5d08":"code","fcdc4644":"code","ce200487":"code","293a18df":"code","db9be29d":"code","3c84b276":"code","85a027d8":"code","51699049":"code","e3583c59":"code","116a5675":"code","c1454a3e":"code","bb60eb68":"code","abe86177":"code","37f55d39":"code","b4d2bf58":"code","f541311d":"code","bb15ec9e":"code","8f839371":"code","fcd7c9f9":"code","90775fd2":"code","a559df7f":"code","469ce0c1":"code","b6609bde":"code","2afef1c4":"code","79e3e19b":"code","fc93d936":"code","c848ecc2":"code","e9c252e8":"code","3ed7580b":"code","6c3f70eb":"code","59b2540f":"code","16345fca":"code","525adc94":"code","b3305fc9":"code","6a5bc636":"code","7653c795":"code","6658ce9a":"code","d516bfbb":"code","1b472926":"code","b9d2b178":"code","dda835c6":"code","a56abbcf":"code","c8d5d043":"code","3414a012":"code","73aa9218":"code","ea8123fa":"code","68cb44b2":"code","4b10f93c":"code","c64fc665":"code","8375d5a9":"code","fbd0033a":"code","c9cafb86":"code","668e444d":"code","2802b615":"code","9b86a836":"markdown","7ac85d55":"markdown","63157ebf":"markdown","edc84a7e":"markdown","06abaf72":"markdown","0793be14":"markdown","3a1108b5":"markdown","caca7ee0":"markdown","c3e5d447":"markdown","39f4d2d1":"markdown","1ddf0f2f":"markdown","8ad83bbf":"markdown","2d4b3a12":"markdown"},"source":{"c89b30f6":"# Importing Libraries\nimport numpy as np\nimport pandas as pd\nimport seaborn as sns\nimport matplotlib\nimport matplotlib.pyplot as plt\nimport warnings\nwarnings.filterwarnings('ignore')","8009edec":"#reading the data\nsampleEntry = pd.read_csv('..\/input\/credit\/sampleEntry.csv')\ntrain = pd.read_csv('..\/input\/credit\/cs-training.csv')\ntest = pd.read_csv('..\/input\/credit\/cs-test.csv')","1a44ee39":"#dimension of the data\nprint(train.shape)\nprint(test.shape)","2314fbda":"#getting first five observations\ntrain.head()","4fff5d08":"#getting first five observations \ntest.head()","fcdc4644":"#describing train data\ntrain.describe()","ce200487":"print(train.isnull().sum())","293a18df":"print(test.isnull().sum())","db9be29d":"train.nunique()","3c84b276":"train['MonthlyIncome'].fillna(train['MonthlyIncome'].mean(),inplace=True)","85a027d8":"train['NumberOfDependents'].fillna(train['NumberOfDependents'].mode()[0], inplace=True)","51699049":"test['MonthlyIncome'].fillna(test['MonthlyIncome'].mean(),inplace=True)","e3583c59":"test['NumberOfDependents'].fillna(test['NumberOfDependents'].mode()[0], inplace=True)","116a5675":"print(train.isnull().sum())","c1454a3e":"print(test.isnull().sum())","bb60eb68":"#plot two tyep classe \"0\" and \"1\"\nsns.countplot(x='SeriousDlqin2yrs',data=train)\nplt.show()","abe86177":"cor=train.corr()\nfig, ax = plt.subplots(figsize=(12,12))\nsns.heatmap(cor,xticklabels=cor.columns,yticklabels=cor.columns,annot=True,ax=ax)","37f55d39":"X = train.drop('SeriousDlqin2yrs',1)\ny = train['SeriousDlqin2yrs']","b4d2bf58":"train.columns","f541311d":"from sklearn.model_selection import train_test_split","bb15ec9e":"#splitting data into train and test\nX_train, X_val, y_train, y_val = train_test_split(X, y, test_size=0.20, random_state=568)\nprint(X_train.shape)\nprint(X_val.shape)\nprint(y_train.shape)\nprint(y_val.shape)","8f839371":"from xgboost import XGBClassifier","fcd7c9f9":"from sklearn.model_selection import GridSearchCV, RandomizedSearchCV","90775fd2":"xgb = XGBClassifier(n_jobs=-1) \n \n# Use a grid over parameters of interest\nparam_grid = {\n                  'n_estimators' :[100,150,200,250,300],\n                  \"learning_rate\" : [0.001,0.01,0.0001,0.05, 0.10 ],\n                  \"gamma\"            : [ 0.0, 0.1, 0.2 , 0.3 ],\n                  \"colsample_bytree\" : [0.5,0.7],\n                  'max_depth': [3,4,6,8]\n              }","a559df7f":"xgb_randomgrid = RandomizedSearchCV(xgb, param_distributions=param_grid, cv=5)","469ce0c1":"%%time\nxgb_randomgrid.fit(X_train,y_train)","b6609bde":"best_est = xgb_randomgrid.best_estimator_","2afef1c4":"y_pred = best_est.predict_proba(X_train)\ny_pred = y_pred[:,1]","79e3e19b":"from sklearn.metrics import auc,roc_curve\nfpr,tpr,_ = roc_curve(y_train, y_pred)\nroc_auc = auc(fpr, tpr)\nplt.figure(figsize=(10,8))\nplt.title('Receiver Operating Characteristic')\nsns.lineplot(fpr, tpr, label = 'AUC = %0.2f' % roc_auc)\nplt.legend(loc = 'lower right')\nplt.plot([0, 1], [0, 1],'r--')\nplt.ylabel('True Positive Rate')\nplt.xlabel('False Positive Rate')\nplt.show()","fc93d936":"X_test = test.drop('SeriousDlqin2yrs',1)\ny_test=best_est.predict_proba(X_test)\ny_test= y_test[:,1]","c848ecc2":"print(y_test)","e9c252e8":"sampleEntry[\"Probability\"]=y_test\nsampleEntry.head()","3ed7580b":"sampleEntry.to_csv(\"submission.csv\",index=False)","6c3f70eb":"from imblearn.over_sampling import SMOTE","59b2540f":"smote = SMOTE(random_state=0)\n\nos_data_X,os_data_y=smote.fit_sample(X_train,y_train)","16345fca":"from sklearn.ensemble import RandomForestClassifier\nrfc = RandomForestClassifier(n_jobs=-1, max_features='sqrt') \n \n# Use a grid over parameters of interest\nparam_grid = { \n           \"n_estimators\" : [9, 18, 27, 36, 100, 150],\n           \"max_depth\" : [2,3,5,7,9],\n           \"min_samples_leaf\" : [2, 4]}","525adc94":"rfc_randomgrid = RandomizedSearchCV(rfc, param_distributions=param_grid, cv=5)","b3305fc9":"rfc_randomgrid.fit(os_data_X,os_data_y)","6a5bc636":"best_est1 = rfc_randomgrid.best_estimator_","7653c795":"y_pred1 = best_est1.predict_proba(X_train)\ny_pred1 = y_pred1[:,1]","6658ce9a":"y_test1=best_est1.predict_proba(X_test)\ny_test1= y_test1[:,1]","d516bfbb":"fpr,tpr,_ = roc_curve(y_train, y_pred1)\nroc_auc = auc(fpr, tpr)\nplt.figure(figsize=(10,8))\nplt.title('Receiver Operating Characteristic')\nsns.lineplot(fpr, tpr, label = 'AUC = %0.2f' % roc_auc)\nplt.legend(loc = 'lower right')\nplt.plot([0, 1], [0, 1],'r--')\nplt.ylabel('True Positive Rate')\nplt.xlabel('False Positive Rate')\nplt.show()","1b472926":"sampleEntry[\"Probability\"]=y_test1\nsampleEntry.head()","b9d2b178":"sampleEntry.to_csv(\"submission1.csv\",index=False)","dda835c6":"from sklearn.neighbors import KNeighborsClassifier","a56abbcf":"knn = KNeighborsClassifier(n_neighbors=3)","c8d5d043":"knn.fit(X_train,y_train)","3414a012":"y_pred2 = knn.predict_proba(X_train)\ny_pred2 = y_pred2[:,1]","73aa9218":"fpr,tpr,_ = roc_curve(y_train, y_pred2)\nroc_auc = auc(fpr, tpr)\nplt.figure(figsize=(10,8))\nplt.title('Receiver Operating Characteristic')\nsns.lineplot(fpr, tpr, label = 'AUC = %0.2f' % roc_auc)\nplt.legend(loc = 'lower right')\nplt.plot([0, 1], [0, 1],'r--')\nplt.ylabel('True Positive Rate')\nplt.xlabel('False Positive Rate')\nplt.show()","ea8123fa":"md_KNN = KNeighborsClassifier()\n\nneighbors = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20]\nparam_grid = dict(n_neighbors=neighbors)","68cb44b2":"KNN_GridSearch = GridSearchCV(md_KNN,param_grid=param_grid,cv=10)","4b10f93c":"KNN_GridSearch.fit(X_train,y_train)","c64fc665":"best_est2=KNN_GridSearch.best_estimator_","8375d5a9":"y_pred3 = best_est2.predict_proba(X_train)\ny_pred3 = y_pred3[:,1]","fbd0033a":"fpr,tpr,_ = roc_curve(y_train, y_pred3)\nroc_auc = auc(fpr, tpr)\nplt.figure(figsize=(10,8))\nplt.title('Receiver Operating Characteristic')\nsns.lineplot(fpr, tpr, label = 'AUC = %0.2f' % roc_auc)\nplt.legend(loc = 'lower right')\nplt.plot([0, 1], [0, 1],'r--')\nplt.ylabel('True Positive Rate')\nplt.xlabel('False Positive Rate')\nplt.show()","c9cafb86":"y_test2=best_est2.predict_proba(X_test)\ny_test2= y_test2[:,1]","668e444d":"sampleEntry[\"Probability\"]=y_test2\nsampleEntry.head()","2802b615":"sampleEntry.to_csv(\"submission2.csv\",index=False)","9b86a836":"**Problem statement**\n   -Predicting the probability that somebody will experience financial distress in the next two years.which can make banks a       guess at the probability of default, are use to determine whether or not a loan should be granted.","7ac85d55":"**correlation**","63157ebf":"**Checking unique items in each column**","edc84a7e":"**checking null values**","06abaf72":"**Imputing Null values**","0793be14":"**Random Forest using SMOTE**","3a1108b5":"**Conclusion**","caca7ee0":"**XGBOOST**","c3e5d447":"**KNN_model**","39f4d2d1":"**classes in Target variable**","1ddf0f2f":"**Splitting Data**","8ad83bbf":"So, we have seen that AUC for  XGboost is around 89%  and also achieved score of 0.86 which is very close to 1 . Therefore, it is inferred that XGBoost is the suitable model for this dataset.SMOTE using with Random forest achieved a score of 0.85 which is also preferable.As KNN is performng well for train and slight deforming for test data getting a score of 0.5.","2d4b3a12":"The dataset cantains **12** features along with **150000** observations.\n\nThe description for the 12 features is given below: <br>\nVariable Name\tDescription\tType\n- ``SeriousDlqin2yrs``\tPerson experienced 90 days past due delinquency or worse\tY\/N\n- ``RevolvingUtilizationOfUnsecuredLines``\tTotal balance on credit cards and personal lines of credit except real estate and no installment debt like car loans divided by the sum of credit limits\tpercentage\n- ``age``\tAge of borrower in years\tinteger\n- ``NumberOfTime3059DaysPastDueNotWorse``\tNumber of times borrower has been 30-59 days past due but no worse in the last 2 years.\tinteger\n- ``DebtRatio``\tMonthly debt payments, alimony,living costs divided by monthy gross income\tpercentage\n- ``MonthlyIncome``\tMonthly income\treal\n- ``NumberOfOpenCreditLinesAndLoans``\tNumber of Open loans (installment like car loan or mortgage) and Lines of credit (e.g. credit cards)\tinteger\n- ``NumberOfTimes90DaysLate``\tNumber of times borrower has been 90 days or more past due.\tinteger\n- ``NumberRealEstateLoansOrLines``\tNumber of mortgage and real estate loans including home equity lines of credit\tinteger\n- ``NumberOfTime60-89DaysPastDueNotWorse``\tNumber of times borrower has been 60-89 days past due but no worse in the last 2 years.\tinteger\n- ``NumberOfDependents``\tNumber of dependents in family excluding themselves (spouse, children etc.)\tinteger"}}