{"cell_type":{"67f3b9e8":"code","0008915a":"code","b8b17934":"code","44dd71ae":"code","829b3a7a":"code","6ec814b2":"code","b6bee2d9":"code","a607da32":"code","52d90c56":"code","b0d4b4a5":"code","67b62bbe":"code","fd6af16e":"code","2894a9a2":"code","0456bad2":"code","27b5fe44":"code","f2166ea0":"code","0297e278":"code","69ec348b":"code","56caaf94":"code","508a136f":"code","7872b1cd":"code","90c3d7b5":"code","9d2151f2":"code","b5a5197d":"code","b4d42f3c":"code","ed0754e8":"code","ec3f6a39":"code","523354fd":"code","d5d1b809":"code","bdf2bee3":"code","49dc447d":"code","e543582d":"code","bc23bde3":"code","33a2fb32":"code","3d2f66e9":"code","c29f03bf":"code","09ef7187":"code","24c7b14f":"code","a0d4f496":"markdown","35ccf15f":"markdown","37a4af05":"markdown","3e5ec0df":"markdown","b42e6153":"markdown","627d9d99":"markdown","48b864c1":"markdown","ac821e19":"markdown","b73f339c":"markdown","12f4c55d":"markdown","52af429b":"markdown","ab442cc0":"markdown","87b31ebd":"markdown","7d6c9a15":"markdown","1a0fcbfc":"markdown","2cbc86d7":"markdown","c61b2d1b":"markdown","09487759":"markdown","fcd96f32":"markdown","68d99078":"markdown","37ecae7a":"markdown","a8864507":"markdown","7cc47395":"markdown","46012ddd":"markdown","5fb30976":"markdown"},"source":{"67f3b9e8":"import os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n","0008915a":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport os\nimport warnings\nwarnings.filterwarnings(\"ignore\")","b8b17934":"rating_df = pd.read_csv('\/kaggle\/input\/the-movies-dataset\/ratings_small.csv')\nrating_df.head()","44dd71ae":"movie_df = pd.read_csv('\/kaggle\/input\/the-movies-dataset\/movies_metadata.csv')\nmovie_df.head()","829b3a7a":"import re\nmovie_data = pd.read_csv('\/kaggle\/input\/the-movies-dataset\/movies_metadata.csv')\nmovie_data['title'] = movie_data['title'] + movie_data['release_date'].apply(lambda x : ' (' + str(x)[:4] + ')')\nprep = movie_data.reset_index()\nprep.iloc[:,0] = prep.iloc[:,0] + 1\nprep.rename({'index': 'movieId'}, axis=1, inplace=True)\nmovie_df = prep[['movieId', 'title','genres']]\nmovie_df['genres'] = movie_df['genres'].apply(lambda x : '|'.join(re.findall(r\"\\: '([A-z]+)\\'\", x)))\n\nmovie_df.head()","6ec814b2":"# \uc0ac\uc6a9\uc790 \uc218\nlen(rating_df['userId'].unique())","b6bee2d9":"# \uc601\ud654\uc758 \uc218\nlen(rating_df['movieId'].unique())","a607da32":"rating_df['rating'].hist()","52d90c56":"from surprise import Dataset, Reader\nfrom surprise.model_selection import train_test_split\n\nreader = Reader(rating_scale=(1, 5))\ndata = Dataset.load_from_df(rating_df[['userId', 'movieId','rating']],reader)\ntrainset, testset = train_test_split(data, test_size=.25)","b0d4b4a5":"from surprise import KNNBasic\nfrom surprise import accuracy","67b62bbe":"# User_based : True, False\ub85c user\/item based \nalg_user = KNNBasic(k=40, min_k=1, sim_options={\"user_based\": True, \"name\": \"cosine\"})\nalg_item = KNNBasic(k=40, min_k=1, sim_options={\"user_based\": False, \"name\": \"cosine\"})\n\nalg_user.fit(trainset)\nalg_item.fit(trainset)\n\npred_user = alg_user.test(testset)\npred_item = alg_item.test(testset)","fd6af16e":"acc_user = accuracy.rmse(pred_user)\nacc_item = accuracy.rmse(pred_item)\nprint(f'user based : {acc_user}, item_based : {acc_item}') ","2894a9a2":"# \uac1c\uc218 \uc120\ud0dd\nN = 20\npredictions_user = alg_user.test(testset[:N])\npredictions_item = alg_item.test(testset[:N])\n\nfor i in range(N):\n    _, iid, r_ui, user_rating, _ = predictions_user[i]\n    _, _, _, item_rating, _ = predictions_item[i]\n    print(\"Item id\", iid, \"|\", \"real rating :\", r_ui, \"|\", \"item_based :\", round(item_rating,2), \"user_based :\", round(user_rating,2))\n","0456bad2":"movie_df.head()","27b5fe44":"rating_df.head()","f2166ea0":"user_movie_df = pd.merge(rating_df, movie_df, on = 'movieId')\nuser_movie_df.head()","0297e278":"user_movie_df.shape","69ec348b":"user_movie_rating = user_movie_df.pivot_table('rating', index = 'userId', columns='title').fillna(0)","56caaf94":"user_movie_rating.shape","508a136f":"user_movie_rating.head()","7872b1cd":"movie_user_rating = user_movie_rating.values.T\nmovie_user_rating.shape","90c3d7b5":"from sklearn.decomposition import TruncatedSVD\nfrom scipy.sparse.linalg import svds","9d2151f2":"SVD = TruncatedSVD(n_components=12)\nmatrix = SVD.fit_transform(movie_user_rating)\nmatrix.shape","b5a5197d":"matrix[0]","b4d42f3c":"corr = np.corrcoef(matrix)\ncorr.shape","ed0754e8":"corr2 = corr[:200, :200]\ncorr2.shape\nplt.figure(figsize=(16,10))\nsns.heatmap(corr2)","ec3f6a39":"movie_title = user_movie_rating.columns\nmovie_title_list = list(movie_title)\n[name for name in movie_title if 'Batman' in name]","523354fd":"coffey_hands = movie_title_list.index(\"Batman (1989)\")\ncorr_coffey_hands = corr[coffey_hands]\nlist(movie_title[(corr_coffey_hands >= 0.9)])[:50]","d5d1b809":"df_user_movie_ratings = rating_df.pivot(\n    index='userId',\n    columns='movieId',\n    values='rating'\n).fillna(0)","bdf2bee3":"df_user_movie_ratings.head()","49dc447d":"# matrix\ub294 pivot_table \uac12\uc744 numpy matrix\ub85c \ub9cc\ub4e0 \uac83 \nmatrix = df_user_movie_ratings.values\n\n# user_ratings_mean\uc740 \uc0ac\uc6a9\uc790\uc758 \ud3c9\uade0 \ud3c9\uc810 \nuser_ratings_mean = np.mean(matrix, axis = 1)\n\n# # R_user_mean : \uc0ac\uc6a9\uc790-\uc601\ud654\uc5d0 \ub300\ud574 \uc0ac\uc6a9\uc790 \ud3c9\uade0 \ud3c9\uc810\uc744 \ube80 \uac83.\nmatrix_user_mean = matrix - user_ratings_mean.reshape(-1, 1)\n\n# Truncated SVD\nU, sig, V = svds(matrix_user_mean, k = 12)\n\nprint(U.shape)\nprint(sig.shape)\nprint(V.shape)","e543582d":"sigma = np.diag(sig)\nsigma.shape","bc23bde3":"svd_user_predicted_ratings = np.dot(np.dot(U, sigma), V) + user_ratings_mean.reshape(-1, 1)\ndf_svd_preds = pd.DataFrame(svd_user_predicted_ratings, columns = df_user_movie_ratings.columns)\ndf_svd_preds.head()","33a2fb32":"# rating_df\ub97c \uc785\ub825\ubc1b\uc544\uc11c SVD\ub97c \uacc4\uc0b0\ud558\ub294 \ud568\uc218\ndef get_svd(ori_rating_df, k):\n    df_user_movie_ratings = ori_rating_df.pivot(index='userId', columns='movieId', values='rating').fillna(0)\n    # matrix\ub294 pivot_table \uac12\uc744 numpy matrix\ub85c \ub9cc\ub4e0 \uac83 \n    matrix = df_user_movie_ratings.values\n\n    # user_ratings_mean\uc740 \uc0ac\uc6a9\uc790\uc758 \ud3c9\uade0 \ud3c9\uc810 \n    user_ratings_mean = np.mean(matrix, axis = 1)\n\n    # R_user_mean : \uc0ac\uc6a9\uc790-\uc601\ud654\uc5d0 \ub300\ud574 \uc0ac\uc6a9\uc790 \ud3c9\uade0 \ud3c9\uc810\uc744 \ube80 \uac83.\n    matrix_user_mean = matrix - user_ratings_mean.reshape(-1, 1)\n    \n    # Truncated SVD\n    U, sig, V = svds(matrix_user_mean, k = k)\n    sigma = np.diag(sig)\n    \n    # \ub2e4\uc2dc \ub0b4\uc801 \ud6c4 \ud3c9\uade0\uc744 \ub354\ud574\uc8fc\uae30\n    svd_user_predicted_ratings = np.dot(np.dot(U, sigma), V) + user_ratings_mean.reshape(-1, 1)\n\n    # \ub370\uc774\ud130\ud504\ub808\uc784\uc73c\ub85c \ubcc0\ud658\n    df_svd_preds = pd.DataFrame(svd_user_predicted_ratings, columns = df_user_movie_ratings.columns)\n    \n    return df_svd_preds","3d2f66e9":"# user\ndef recommend_movies(df_svd_preds, user_id, ori_movies_df, ori_ratings_df, num_recommendations=5):\n    \n    #\ud604\uc7ac\ub294 index\ub85c \uc801\uc6a9\uc774 \ub418\uc5b4\uc788\uc73c\ubbc0\ub85c user_id - 1\uc744 \ud574\uc57c\ud568.\n    user_row_number = user_id - 1 \n    \n    # \ucd5c\uc885\uc801\uc73c\ub85c \ub9cc\ub4e0 pred_df\uc5d0\uc11c \uc0ac\uc6a9\uc790 index\uc5d0 \ub530\ub77c \uc601\ud654 \ub370\uc774\ud130 \uc815\ub82c -> \uc601\ud654 \ud3c9\uc810\uc774 \ub192\uc740 \uc21c\uc73c\ub85c \uc815\ub82c \ub40c\n    sorted_user_predictions = df_svd_preds.iloc[user_row_number].sort_values(ascending=False)\n    \n    # \uc6d0\ubcf8 \ud3c9\uc810 \ub370\uc774\ud130\uc5d0\uc11c user id\uc5d0 \ud574\ub2f9\ud558\ub294 \ub370\uc774\ud130\ub97c \ubf51\uc544\ub0b8\ub2e4. \n    user_data = ori_ratings_df[ori_ratings_df.userId == user_id]\n\n    # \uc704\uc5d0\uc11c \ubf51\uc740 user_data\uc640 \uc6d0\ubcf8 \uc601\ud654 \ub370\uc774\ud130\ub97c \ud569\uce5c\ub2e4. \n    user_history = user_data.merge(ori_movies_df, on = 'movieId').sort_values(['rating'], ascending=False)\n    \n    # \uc6d0\ubcf8 \uc601\ud654 \ub370\uc774\ud130\uc5d0\uc11c \uc0ac\uc6a9\uc790\uac00 \ubcf8 \uc601\ud654 \ub370\uc774\ud130\ub97c \uc81c\uc678\ud55c \ub370\uc774\ud130\ub97c \ucd94\ucd9c\n    recommendations = ori_movies_df[~ori_movies_df['movieId'].isin(user_history['movieId'])]\n    # \uc0ac\uc6a9\uc790\uc758 \uc601\ud654 \ud3c9\uc810\uc774 \ub192\uc740 \uc21c\uc73c\ub85c \uc815\ub82c\ub41c \ub370\uc774\ud130\uc640 \uc704 recommendations\uc744 \ud569\uce5c\ub2e4. \n    recommendations = recommendations.merge( pd.DataFrame(sorted_user_predictions).reset_index(), on = 'movieId')\n    # \uceec\ub7fc \uc774\ub984 \ubc14\uafb8\uace0 \uc815\ub82c\ud574\uc11c return\n    recommendations = recommendations.rename(columns = {user_row_number: 'Predictions'}).sort_values('Predictions', ascending = False).iloc[:num_recommendations, :]\n                      \n\n    return user_history[['userId', 'movieId', 'timestamp', 'title', 'genres']], recommendations[['movieId', 'title', 'genres', 'Predictions']]","c29f03bf":"# rating_df\uc5d0\uc11c SVD \uacc4\uc0b0\ndf_svd_preds = get_svd(rating_df, k=12)\n# SVD\ub85c \uacc4\uc0b0\ub41c \ub370\uc774\ud130 \ud504\ub808\uc784\uacfc, movie_df, rating_df\ub97c \uc774\uc6a9\ud558\uc5ec \ucd94\ucc9c\n# id\uac00 25\uc778 \uc720\uc800\uc5d0\uac8c \ud3c9\uc810\uc774 \ub192\uc740 \uc0c1\uc704 12\uac1c \uc601\ud654 \ucd94\ucc9c\nalready_rated, predictions = recommend_movies(df_svd_preds, 25, movie_df, rating_df, 12)","09ef7187":"# User 25\uac00 \uc774\ubbf8 \ubcf8 \uc601\ud654\ub4e4\nalready_rated.head()","24c7b14f":"# User 25\uac00 \uc548 \ubcf8 \uc601\ud654 \uc911 \ucd94\ucc9c\ud574\uc904 \uc601\ud654\npredictions","a0d4f496":"### \ubaa8\ub378 \ud3c9\uac00 - \ud14c\uc2a4\ud2b8 \ub370\uc774\ud130 \uc14b\uc5d0\uc11c \uc77c\ubd80 \uacb0\uacfc \ud655\uc778","35ccf15f":"## \ud2b9\uc815 \uc601\ud654\uc640 \ube44\uc2b7\ud55c \uc601\ud654\ub4e4 \ucd94\ucc9c","37a4af05":"### \uc0ac\uc6a9\uc790-\uc601\ud654 pivot table \ub9cc\ub4e4\uae30\n\n1. pivot_table\uc744 matrix\ub85c \ubcc0\ud658\n2. \uac01 \uc0ac\uc6a9\uc790\ub4e4\uc774 \ub9e4\uae30\ub294 \ud3c9\uc810\uc758 \ud3c9\uade0\uc744 \uad6c\ud568\n3. 1 - 2 \ub85c (\uc0ac\uc6a9\uc790 - \ud3c9\uade0) \ub370\uc774\ud130 \uac12\uc744 \ubcc0\uacbd","3e5ec0df":"\uc0c1\uad00\uacc4\uc218 \uacc4\uc0b0, \uc2dc\uac01\ud654","b42e6153":"## \ud568\uc218\ub85c \uc815\ub9ac\n","627d9d99":"### Train \/ Test \ub370\uc774\ud130 \ubd84\ub9ac","48b864c1":"### recommend movies\n- input : \n    - df_svd_preds ; SVD \uacc4\uc0b0\ud55c table\n    - user_id : \uc601\ud654\ub97c \ucd94\ucc9c\ubc1b\uc744 \uc0ac\uc6a9\uc790 id\n    - ori_movies_df :  \uc601\ud654 \uc815\ubcf4 \ub370\uc774\ud130\ud504\ub808\uc784\n    - ori_rating_df : \uc720\uc800\ubcc4 \uc601\ud654 \ud3c9\uc810 \ub370\uc774\ud130\ud504\ub808\uc784\n    - num_recommendations : \ucd94\ucc9c\ud560 \uc601\ud654\uc758 \uc218  \n- \uacfc\uc815 : \n    - \uc785\ub825\ubc1b\uc740 \uc0ac\uc6a9\uc790 id\uc5d0 \ub300\ud574 SVD\ub97c \ud1b5\ud574 \uad6c\ud55c \uc601\ud654 \ud3c9\uc810\uc774 \uac00\uc7a5 \ub192\uc740 \ub370\uc774\ud130 \uc21c\uc73c\ub85c \uc815\ub82c\n    - \uc0ac\uc6a9\uc790\uac00 \uc774\ubbf8 \ubcf8 \uc601\ud654\ub97c \uc81c\uc678\ud574\uc11c \uc548 \ubcf8 \uc601\ud654 \uc911 \ud3c9\uc810\uc774 \ub192\uc740 \uc601\ud654 \ucd94\ucc9c","ac821e19":"Sigma\ub97c \ud589\ub82c\ub85c \ubcc0\ud658","b73f339c":"### SVD \uc801\uc6a9","12f4c55d":"# \ub370\uc774\ud130\uc14b \uc900\ube44\ud558\uae30","52af429b":"### KNN \ubaa8\ub378 \ud559\uc2b5\n- user_based \/ item_based","ab442cc0":"user-movie \ub370\uc774\ud130\ud504\ub808\uc784 \ubcd1\ud569","87b31ebd":"\uc9c0\uae08\uae4c\uc9c0 \uc9c4\ud589\ud55c \uacfc\uc815\uc774\n\n1. \uc6d0\ubcf8 user-movie \ud3c9\uc810 \ud589\ub82c\uc5d0\uc11c\n2. user\uc758 \ud3c9\uade0 \uc810\uc218\ub97c \ube7c\uc11c matrix_user_mean \ud589\ub82c\uc744 \ub9cc\ub4e4\uace0\n3. SVD\ub97c \uc801\uc6a9\ud574\uc11c U, sigma, V\ub97c \uad6c\ud568 (truncated : k = 12)\n4. sigma\ub97c symm. matrix\ub85c \ubcc0\uacbd","7d6c9a15":"### EDA - \uc0ac\uc6a9\uc790 \uc218\uc640 \uc601\ud654\uc758 \uc218 \ud0d0\uc0c9","1a0fcbfc":"\ubc30\ud2b8\ub9e8 1989\uc640 \uc720\uc0ac\ud55c \uc601\ud654 \uc608\uce21 (\uc720\uc0ac\ub3c4 0.9 \uc774\uc0c1)","2cbc86d7":"### Get SVD\n- input \n    - ori_rating_df : rating \ub370\uc774\ud130\ud504\ub808\uc784\n    - k : Truncated SVD\uc2dc \uc0ac\uc6a9\ud560 K \uac12\n- \uacfc\uc815\n    1. rating \ub370\uc774\ud130\ud504\ub808\uc784\uc744 userId-movieId\ub85c pivot\ud55c \ud14c\uc774\ube14 \uc0dd\uc131\n    2. \uc704\uc5d0\uc11c \uc0dd\uc131\ud55c \ud14c\uc774\ube14\uc744 matrix\ub85c \ubcc0\ud658 \ud6c4 \uc0ac\uc6a9\uc790\uc758 \ud3c9\uade0 \ud3c9\uc810 \uacc4\uc0b0\n    3. \uae30\uc874 matrix\uc5d0\uc11c \uc0ac\uc6a9\uc790\uc758 \ud3c9\uade0 \ud3c9\uc810\uc744 \ube7c\uc11c matrix_user_mean\uc774\ub77c\ub294 \ud589\ub82c \uc0dd\uc131\n    4. \uc774 \ub54c scipy\ub97c \uc774\uc6a9\ud558\uc5ec Truncated SVD \uacc4\uc0b0\n    5. \uacc4\uc0b0\ub41c U, sigma, V\ub97c \ub2e4\uc2dc \ub0b4\uc801 \ud6c4 \ud3c9\uade0\uc744 \ub354\ud574\uc8fc\uae30","c61b2d1b":"### EDA - \uc601\ud654 \ud3c9\uac00 \uc810\uc218\uc758 \ubd84\ud3ec \ud0d0\uc0c9","09487759":"# CF-based \ubaa8\ub378\ub9c1(KNN)","fcd96f32":"\ud2b9\uc774\uac12 12\uac1c\uac00 \ucd94\ucd9c\ub41c \uac83\uc744 \uc54c \uc218 \uc788\uc74c","68d99078":"# \uc8fc\uc81c : \uc601\ud654\ub370\uc774\ud130\ub97c \ud1b5\ud55c \ucd94\ucc9c\uc2dc\uc2a4\ud15c \ub9cc\ub4e4\uae30\n## TODO List\n- \ud2b9\uc815 \uae30\uc900\uc5d0 \ub530\ub77c \uc601\ud654\uc758 \uc218\uc775\uc774\ub098 \uc131\uacf5\uc5ec\ubd80\ub97c \uc608\uce21\ud558\uae30(Predicting movie revenue and\/or movie success based on a certain metric)\n- TMDB\uc5d0\uc11c \uc5b4\ub5a4 \uc601\ud654\uac00 \ud3c9\uc810\uc774 \ub2ec\ub9b0 \ud69f\uc218\ub098 \ud3c9\uade0\ud3c9\uc810\uc774 \ub192\uc740 \uacbd\ud5a5\uc744 \ubcf4\uc774\ub294\uac00? (What movies tend to get higher vote counts and vote averages on TMDB?)\n- \ucf58\ud150\uce20 \uae30\ubc18 \ud544\ud130\ub9c1\uacfc \ud611\ub825 \uae30\ubc18 \ud544\ud130\ub9c1\uc774 \uc788\ub294 \ucd94\ucc9c \uc2dc\uc2a4\ud15c\uc744 \ub9cc\ub4dc\uc2dc\uc624 (Building Content Based and Collaborative Filtering Based Recommendation Engines)\n\n#### \ucd94\ucc9c\uc2dc\uc2a4\ud15c\uc5d0 \ub300\ud55c \ube14\ub85c\uadf8 \uae00\n- https:\/\/lsjsj92.tistory.com\/563\n----------\n\n## \ub370\uc774\ud130 \ub0b4\uc6a9\n\n    - \ub370\uc774\ud130 \uc124\uba85: 27\ub9cc\uba85\uc758 \uc720\uc800\uc758 45000\uac1c\uc601\ud654 \ub300\ud55c \ub9ac\ubdf0\ub85c\uc368 2\ucc9c6\ubc31\ub9cc\uac1c\uc758 rating\uacfc 75\ub9cc\uac1c\uc758 tag application\uc774 \uc788\ub2e4.\n    \uc790\uc138\ud55c \ub0b4\uc6a9\uc740: https:\/\/grouplens.org\/datasets\/movielens\/latest\/\n\n    - \uac01 \ud30c\uc77c\uc758 \ub0b4\uc6a9\n    movies_metadata.csv: \uba54\uc778 \uba54\ud0c0 \ub370\uc774\ud130 \ud30c\uc77c. \ubb34\ube44 \ub80c\uc988(https:\/\/movielens.org\/)\uc5d0\uc11c \uc81c\uacf5\ud55c 45000\uac1c\uc758 \uc601\ud654\ub370\uc774\ud130. Feature\uc5d0\ub294 \ud3ec\uc2a4\ud130, \uc601\ud654\ubc30\uacbd(backdrops), \uc608\uc0b0(budget), \uc218\uc775(revenue), \ucd9c\uc2dc\ub0a0\uc9dc(release dates), \uc5b8\uc5b4(languages), \uc81c\uc870 \uad6d\uac00\uc640 \ud68c\uc0ac(production countries and companies)\n\n    keywords.csv: \uc601\ud654 \uc904\uac70\ub9ac\uc5d0 \ub300\ud55c \ud0a4\uc6cc\ub4dc\uac00 \uc788\ub294 \ud30c\uc77c. Available in the form of a stringified JSON Object (JSON \ud615\uc2dd\uc73c\ub85c \ubcfc \uc218 \uc788\ub2e4\ub294 \ub73b?)\n\n    credits.csv: \uc601\ud654 \ub4f1\uc7a5\uc778\ubb3c\uacfc \uc81c\uc791\uc790\uc5d0 \ub300\ud55c \uc815\ubcf4. Available in the form of a stringified JSON Object.\n\n    links.csv: MovieLens\uc5d0 \uc788\ub294 \uc601\ud654 \ub370\uc774\ud130\uc758 TMDB\uc640 IMBD ID\ubc88\ud638\n\n    links_small.csv: MovieLens\uc5d0 \uc788\ub294 \uc601\ud654 \ub370\uc774\ud130 \uc911 9000\uac1c\uc758 TMDB\uc640 IMBD ID\ubc88\ud638\n\n    ratings.csv\n\n    ratings_small.csv: 700\uba85\uc758 \uc720\uc800\uc758 9000\uac1c \uc601\ud654\uc5d0 \ub300\ud55c 10\ub9cc\uac1c \ud3c9\uac00\n\n-----    \n## \ub370\uc774\ud130 \ubd84\uc11d\uacc4\ud68d\n    1. Surprise : KNN\n    2. Sklearn : SVD\n    3. \n    \n    \n    \n    \n- \ub370\uc774\ud130 \ucd9c\ucc98: https:\/\/www.kaggle.com\/rounakbanik\/the-movies-dataset\n\n---","37ecae7a":"\uc0ac\uc6a9\uc790-\uc601\ud654 \uae30\uc900\uc758 \ub370\uc774\ud130\ub97c \uc601\ud654-\uc0ac\uc6a9\uc790 \uae30\uc900\uc73c\ub85c \ubcc0\ud658","a8864507":"### RMSE \ud3c9\uac00","7cc47395":"\uc601\ud654 \uc81c\ubaa9 \ub9ac\uc2a4\ud2b8\ub97c \uc0dd\uc131\ud55c \ub2e4\uc74c  \n'Batman' \uc601\ud654 \uac80\uc0c9","46012ddd":"## \ud55c \uc0ac\uc6a9\uc790\uc5d0\uac8c \uac1c\uc778 \ucd94\ucc9c","5fb30976":"# MF-based \ubaa8\ub378\ub9c1 (SVD)\n- sklearn \uc0ac\uc6a9"}}