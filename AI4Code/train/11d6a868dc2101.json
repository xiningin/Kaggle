{"cell_type":{"3651a0fc":"code","f23af87c":"code","e7aefaa7":"code","ab6df889":"code","84efab65":"code","3f085b58":"code","cf093f3a":"code","3f1b2a2f":"code","050eaaf6":"code","9472614f":"code","62afbc3c":"code","0c830e2a":"markdown","a45eb7e9":"markdown","5df3e0b6":"markdown","4f679399":"markdown","0c5480c9":"markdown","be79227e":"markdown","8716d109":"markdown","4be04aaf":"markdown","f6c906ea":"markdown","a740c601":"markdown","ef11cbae":"markdown","319d1894":"markdown"},"source":{"3651a0fc":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport matplotlib.image as mpimg\nimport seaborn as sns\n%matplotlib inline\n\nfrom keras.models import Sequential\nfrom keras.layers import Dense, Dropout, Flatten, Conv2D, MaxPooling2D, BatchNormalization\nfrom keras.utils import np_utils\n\nimport os\nprint(os.listdir(\"..\/input\"))","f23af87c":"# load data\ntrain = pd.read_csv(\"..\/input\/train.csv\")\nprint(\"train dataset shape is\", train.shape)\ntrain.head(5)","e7aefaa7":"# load data\ntest = pd.read_csv(\"..\/input\/test.csv\")\nprint(\"test dataset shape is\", test.shape)\ntest.head(5)","ab6df889":"X_train = train.drop(\"label\", axis=1)\nX_train = X_train.values.astype(\"float32\")","84efab65":"y_train = train['label']\ny_train = y_train.values.astype(\"int32\")","3f085b58":"X_test = test.values.astype(\"float32\")","cf093f3a":"# Normalize the data\nX_train = X_train \/ 255\nX_test = X_test \/ 255\n\n# Reshape the data\nX_train = X_train.reshape(-1, 28, 28, 1)\nX_test = X_test.reshape(-1, 28, 28, 1)\n\n# One hot encoding\ny_train = np_utils.to_categorical(y_train, 10)\n\n# Check the data shape\nprint(\"X_train shape is \", X_train.shape, \"y_train shape is\", y_train.shape)","3f1b2a2f":"model = Sequential()\n\n# Must define the input shape in the first layer of the neural network\nmodel.add(Conv2D(filters=32, kernel_size=3, padding='same', activation='relu', input_shape=(28,28,1))) \nmodel.add(BatchNormalization())\nmodel.add(MaxPooling2D(pool_size=2))\nmodel.add(Dropout(0.3))\n\nmodel.add(Conv2D(filters=64, kernel_size=3, padding='same', activation='relu'))\nmodel.add(BatchNormalization())\nmodel.add(MaxPooling2D(pool_size=2))\nmodel.add(Dropout(0.3))\n\nmodel.add(Flatten())\nmodel.add(Dense(128, activation='relu'))\nmodel.add(Dropout(0.5))\nmodel.add(Dense(10, activation='softmax'))\n\n# Take a look at the model summary\nmodel.summary()","050eaaf6":"model.compile(loss=\"categorical_crossentropy\", optimizer=\"Adam\", metrics=['accuracy'])","9472614f":"model.fit(X_train, y_train, batch_size=64, epochs=5)","62afbc3c":"predictions = model.predict_classes(X_test, verbose=0)\n\nsubmissions=pd.DataFrame({\"ImageId\": list(range(1,len(predictions)+1)),\n                         \"Label\": predictions})\nsubmissions.to_csv(\"mnist_keras.csv\", index=False, header=True)","0c830e2a":"**Load train dataset**","a45eb7e9":"**split test dataset into X**","5df3e0b6":"# Preprocess the data","4f679399":"** split train dataset into X**","0c5480c9":"**Compile the model**","be79227e":"# Build the model","8716d109":"# Load train and test datasets","4be04aaf":"**split train dataset into y**","f6c906ea":"**Load test dataset**","a740c601":"**Fit the model**","ef11cbae":"# Import libraries","319d1894":"# Split dataset into X and y"}}