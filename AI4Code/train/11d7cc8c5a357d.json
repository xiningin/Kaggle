{"cell_type":{"2d293098":"code","06cbe6c6":"code","aecb6bd9":"code","6df91138":"code","ed15873a":"code","7f1338e2":"code","8e5804a4":"code","d12d0b39":"code","a19b6ce6":"code","1988dbf1":"code","5542a8fc":"code","8fd0b08c":"code","abc2d684":"code","6b707a09":"markdown","b47de970":"markdown","c0a48443":"markdown","fbbbf03e":"markdown","4f56bbbb":"markdown","490e10a6":"markdown","e9971152":"markdown"},"source":{"2d293098":"import numpy as np #\u5bfc\u5165NumPy\nimport pandas as pd #\u5bfc\u5165Pandas \ndf_app = pd.read_csv('..\/input\/flower-app\/App.csv', index_col='Date', parse_dates=['Date']) #\u5bfc\u5165\u6570\u636e\ndf_app #\u663e\u793a\u6570\u636e","06cbe6c6":"import matplotlib.pyplot as plt #\u5bfc\u5165matplotlib.pyplot\nplt.style.use('fivethirtyeight') #\u8bbe\u5b9a\u7ed8\u56fe\u98ce\u683c\ndf_app[\"Activation\"].plot(figsize=(12,4),legend=True) #\u7ed8\u5236\u6fc0\u6d3b\u6570\nplt.title('App Activation Count') #\u56fe\u9898\nplt.show() #\u7ed8\u56fe","aecb6bd9":"# \u6309\u71672020\u5e7410\u67081\u65e5\u4e3a\u754c\u62c6\u5206\u6570\u636e\u96c6\nTrain = df_app[:'2020-09-30'].iloc[:,0:1].values #\u8bad\u7ec3\u96c6\nTest = df_app['2020-10-01':].iloc[:,0:1].values #\u6d4b\u8bd5\u96c6","6df91138":"# \u4ee5\u4e0d\u540c\u989c\u8272\u4e3a\u8bad\u7ec3\u96c6\u548c\u6d4b\u8bd5\u96c6\u7ed8\u56fe\ndf_app[\"Activation\"][:'2020-09-30'].plot(figsize=(12,4),legend=True) #\u8bad\u7ec3\u96c6\ndf_app[\"Activation\"]['2020-10-01':].plot(figsize=(12,4),legend=True) #\u6d4b\u8bd5\u96c6\nplt.legend(['Training set (Before October 2020)','Test set (2020 October and beyond)']) #\u56fe\u4f8b\nplt.title('App Activation Count') #\u56fe\u9898\nplt.show() #\u7ed8\u56fe","ed15873a":"from sklearn.preprocessing import MinMaxScaler #\u5bfc\u5165\u5f52\u4e00\u5316\u7f29\u653e\u5668\nScaler = MinMaxScaler(feature_range=(0,1)) #\u521b\u5efa\u7f29\u653e\u5668\nTrain = Scaler.fit_transform(Train) #\u62df\u5408\u7f29\u653e\u5668\u5e76\u5bf9\u8bad\u7ec3\u96c6\u8fdb\u884c\u5f52\u4e00\u5316","7f1338e2":"# \u521b\u5efa\u5177\u6709 60 \u4e2a\u65f6\u95f4\u6b65\u957f\u548c 1 \u4e2a\u8f93\u51fa\u7684\u6570\u636e\u7ed3\u6784 - \u8bad\u7ec3\u96c6\nX_train = [] #\u521d\u59cb\u5316\ny_train = [] #\u521d\u59cb\u5316\nfor i in range(60,Train.size): \n    X_train.append(Train[i-60:i,0]) #\u6784\u5efa\u7279\u5f81\n    y_train.append(Train[i,0]) #\u6784\u5efa\u6807\u7b7e\nX_train, y_train = np.array(X_train), np.array(y_train) #\u8f6c\u6362\u4e3aNumPy\u6570\u7ec4\nX_train = np.reshape(X_train, (X_train.shape[0],X_train.shape[1],1)) #\u8f6c\u6362\u6210\u795e\u7ecf\u7f51\u7edc\u6240\u9700\u7684\u5f20\u91cf\u5f62\u72b6","8e5804a4":"TrainTest = df_app[\"Activation\"][:] #\u6574\u4f53\u6570\u636e\ninputs = TrainTest[len(TrainTest)-len(Test) - 60:].values #Test\u52a0\u4e0a\u524d60\u4e2a\u65f6\u95f4\u6b65\ninputs = inputs.reshape(-1,1) #\u8f6c\u6362\u5f62\u72b6\ninputs  = Scaler.transform(inputs) #\u5f52\u4e00\u5316\n# \u521b\u5efa\u5177\u6709 60 \u4e2a\u65f6\u95f4\u6b65\u957f\u548c 1 \u4e2a\u8f93\u51fa\u7684\u6570\u636e\u7ed3\u6784 - \u6d4b\u8bd5\u96c6\nX_test = [] #\u521d\u59cb\u5316\ny_test = [] #\u521d\u59cb\u5316\nfor i in range(60,inputs.size): \n    X_test.append(inputs[i-60:i,0]) #\u6784\u5efa\u7279\u5f81\n    y_test.append(inputs[i,0]) #\u6784\u5efa\u6807\u7b7e\nX_test = np.array(X_test) #\u8f6c\u6362\u4e3aNumPy\u6570\u7ec4\nX_test = np.reshape(X_test, (X_test.shape[0],X_test.shape[1],1)) #\u8f6c\u6362\u6210\u795e\u7ecf\u7f51\u7edc\u6240\u9700\u7684\u5f20\u91cf\u5f62\u72b6","d12d0b39":"from tensorflow.keras.models import Sequential #\u5bfc\u5165\u5e8f\u8d2f\u6a21\u578b\nfrom tensorflow.keras.layers import Dense, LSTM #\u5bfc\u5165\u5168\u8fde\u63a5\u5c42\u548cLSTM\u5c42\n# from keras.optimizers import SGD\n# LSTM\u7f51\u7edc\u67b6\u6784\nRNN_LSTM = Sequential() #\u5e8f\u8d2f\u6a21\u578b\nRNN_LSTM.add(LSTM(units=50, return_sequences=True, input_shape=(X_train.shape[1],1))) #\u8f93\u5165\u5c42LSTM,return_sequences\u8fd4\u56de\u8f93\u51fa\u5e8f\u5217\nRNN_LSTM.add(LSTM(units=50, return_sequences=True)) #\u4e2d\u95f41\u5c42LSTM\uff0creturn_sequences\u8fd4\u56de\u8f93\u51fa\u5e8f\u5217\nRNN_LSTM.add(LSTM(units=50, return_sequences=True)) #\u4e2d\u95f42\u5c42LSTM\uff0creturn_sequences\u8fd4\u56de\u8f93\u51fa\u5e8f\u5217\nRNN_LSTM.add(LSTM(units=50)) #\u4e2d\u95f43\u5c42LSTM\nRNN_LSTM.add(Dense(units=1)) #\u8f93\u51fa\u5c42Dense\n# \u7f16\u8bd1\u7f51\u7edc\n# RNN_LSTM.compile(loss='mean_squared_error', #\u635f\u5931\u51fd\u6570\n#                  optimizer='rmsprop', #\u4f18\u5316\u5668\n#                  metrics=['mae']) #\u8bc4\u4f30\u6307\u6807\nRNN_LSTM.compile(loss='mse', #\u635f\u5931\u51fd\u6570\n                 optimizer='rmsprop', #\u4f18\u5316\u5668\n                 metrics=['mae']) #\u8bc4\u4f30\u6307\u6807\nRNN_LSTM.summary() #\u8f93\u51fa\u795e\u7ecf\u7f51\u7edc\u7ed3\u6784\u4fe1\u606f","a19b6ce6":"# \u8bad\u7ec3\u5e76\u4fdd\u5b58\u8bad\u7ec3\u5386\u53f2\u4fe1\u606f\nhistory = RNN_LSTM.fit(X_train, y_train, # \u6307\u5b9a\u8bad\u7ec3\u96c6\n                  epochs=30,        # \u6307\u5b9a\u8bad\u7ec3\u7684\u8f6e\u6b21\n                  batch_size=64,    # \u6307\u5b9a\u6570\u636e\u6279\u91cf\n                  validation_split=0.2) #\u8fd9\u91cc\u76f4\u63a5\u4ece\u8bad\u7ec3\u96c6\u6570\u636e\u4e2d\u62c6\u5206\u9a8c\u8bc1\u96c6\uff0c\u66f4\u65b9\u4fbf","1988dbf1":"def show_history(history): # \u663e\u793a\u8bad\u7ec3\u8fc7\u7a0b\u4e2d\u7684\u5b66\u4e60\u66f2\u7ebf\n    loss = history.history['loss'] #\u8bad\u7ec3\u635f\u5931\n    val_loss = history.history['val_loss'] #\u9a8c\u8bc1\u635f\u5931\n    epochs = range(1, len(loss) + 1) #\u8bad\u7ec3\u8f6e\u6b21\n    plt.figure(figsize=(12,4)) # \u56fe\u7247\u5927\u5c0f\n    plt.subplot(1, 2, 1) #\u5b50\u56fe1\n    plt.plot(epochs, loss, 'bo', label='Training loss') #\u8bad\u7ec3\u635f\u5931\n    plt.plot(epochs, val_loss, 'b', label='Validation loss') #\u9a8c\u8bc1\u635f\u5931\n    plt.title('Training and validation loss') #\u56fe\u9898\n    plt.xlabel('Epochs') #X\u8f74\u6587\u5b57\n    plt.ylabel('Loss') #Y\u8f74\u6587\u5b57\n    plt.legend() #\u56fe\u4f8b\n    plt.show() #\u7ed8\u56fe","5542a8fc":"show_history(history) # \u8c03\u7528\u7ed8\u56fe\u51fd\u6570","8fd0b08c":"# \u5b9a\u4e49\u7ed8\u56fe\u51fd\u6570\ndef plot_predictions(test,predicted):\n    plt.plot(test, color='red',label='Real Count') #\u771f\u503c\n    plt.plot(predicted, color='blue',label='Predicted Count') #\u9884\u6d4b\u503c\n    plt.title('Flower App Activation Prediction') #\u56fe\u9898\n    plt.xlabel('Time') #X\u8f74\u65f6\u95f4\n    plt.ylabel('Flower App Activation Count') #Y\u8f74\u6fc0\u6d3b\u6570\n    plt.legend() #\u56fe\u4f8b\n    plt.show() #\u7ed8\u56fe","abc2d684":"Pred = RNN_LSTM.predict(X_test) #\u9884\u6d4b\nPred = Scaler.inverse_transform(Pred) #\u53cd\u5f52\u4e00\u5316\nplot_predictions(Test,Pred) #\u7ed8\u56fe","6b707a09":"## \u7279\u5f81\u5de5\u7a0b","b47de970":"## \u9009\u62e9\u7b97\u6cd5\n\n\u8fd9\u91cc\u6211\u4eec\u91c7\u7528RNN\u795e\u7ecf\u7f51\u7edc\u7b97\u6cd5","c0a48443":"## \u6784\u5efa\u7279\u5f81\u96c6\u548c\u6807\u7b7e\u96c6","fbbbf03e":"# \u96f6\u57fa\u7840\u5b9e\u6218\u673a\u5668\u5b66\u4e60\n\u7b2c12\u8bb2 RNN\u9884\u6d4bApp\u7684\u6fc0\u6d3b\u6570\u8d70\u52bf\n\u4f5c\u8005 \u9ec4\u4f73\n\n\u6781\u5ba2\u65f6\u95f4\u4e13\u680f\u94fe\u63a5\uff1ahttps:\/\/time.geekbang.org\/column\/intro\/438\n\n\u95ee\u9898\uff1a\u6839\u636eApp\u7684\u5386\u53f2\u6fc0\u6d3b\uff08\u5373\u4e0b\u8f7d\u540e\u6ce8\u518c\u7528\u6237\u5e76\u4f7f\u7528App\uff09\u6570\u5b57\uff0c\u6765\u9884\u6d4b\u5176\u672a\u6765\u8d70\u52bf\n\n\u6613\u901f\u9c9c\u82b1\u516c\u53f8\u62e5\u6709\u8fc7\u53bb\u4e24\u5e74App\u7684\u65e5\u6fc0\u6d3b\u6570\u3002\n\n\u901a\u8fc7\u795e\u7ecf\u7f51\u7edc\u4e2d\u7684RNN\u6a21\u578b\uff0c\u6211\u4eec\u53ef\u4ee5\u5bf9\u8fd9\u4e2a\u65f6\u5e8f\u6570\u636e\u96c6\u8fdb\u884c\u9884\u6d4b\u3002","4f56bbbb":"## \u62c6\u5206\u6570\u636e\u96c6","490e10a6":"## \u6570\u636e\u53ef\u89c6\u5316\n","e9971152":"## \u5bfc\u5165\u6570\u636e"}}