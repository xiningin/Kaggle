{"cell_type":{"5e8e24a7":"code","8c14b6f1":"code","49a0e714":"code","f70985c1":"code","f949ce1c":"code","eacb3041":"code","31170f59":"code","88b97829":"code","9155b964":"code","7dca3e1a":"code","ae0ee9d2":"code","d3cccc8e":"code","5f1a29ba":"code","58cad735":"code","9c0f1a9e":"code","a446b5e8":"code","a40c1d8f":"code","f8b6e1c8":"code","0fd8d77a":"code","e6d90a65":"code","473b85e0":"code","a12ea859":"code","b9a607e7":"code","5b665955":"code","8a68436d":"code","54c7ebe0":"code","36b0845a":"code","7e23e73f":"code","a320d8fa":"code","bae199e4":"code","b6899d5e":"markdown","9bffd6d2":"markdown","e1e7ce9f":"markdown","527c274c":"markdown","5d7e6837":"markdown","8439064b":"markdown"},"source":{"5e8e24a7":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport os\nimport seaborn as sns\nfrom sklearn.metrics import mean_absolute_error\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.tree import DecisionTreeRegressor\nprint(os.listdir(\"..\/input\"))","8c14b6f1":"avocado = pd.read_csv(\"..\/input\/avocado.csv\", index_col = \"year\") # DataFrame holds 'index' (ex. sort_index)\nprint(\"shape =\", avocado.shape)\navocado.describe()","49a0e714":"avocado.columns","f70985c1":"avocado[\"region\"]","f949ce1c":"avocado.sample(10)","eacb3041":"avocado.region.value_counts() # Produce Series which holds 'region' as key, its number of record as value","31170f59":"y = avocado.AveragePrice # Setting AveragePrice as the prediction target by dot-notation\nX = avocado[[\"Date\", \"Total Volume\", \"region\"]] # Setting Date, type and region as the features\nX.describe() # Hmm...","88b97829":"avocado[avocado.year == 2015].AveragePrice.tail(10)","9155b964":"avocado.region.unique()","7dca3e1a":"avocado.region.value_counts()","ae0ee9d2":"g1 = avocado.groupby(\"region\") # Create tables for each region\ng2 = avocado.groupby(\"type\")","d3cccc8e":"g1.describe().head(10)","5f1a29ba":"g2.describe().head(10)","58cad735":"avocado[avocado.region.isin([\"SanDiego\", \"Chicago\"])].head(10)","9c0f1a9e":"avocado.groupby('region').sum()","a446b5e8":"avocado.region.replace('NewYork', 'newyork')","a40c1d8f":"avocado.isnull()","f8b6e1c8":"# This code doesn't work\ncols_with_missing = [col for col in avocado.columns \n                                 if avocado[col].isnull().any()]\ntrain = train.drop(cols_with_missing, axis=1)\ntest = test.drop(cols_with_missing, axis=1)","0fd8d77a":"# Apply lambda to each value\navocado.apply(lambda n: n \/ 2 if n.dtype == 'float' else n, axis='columns')","e6d90a65":"columns = avocado.columns\nnames = {'AveragePrice':'price', 'Total Volume':'volume', 'Total Bags':'bags'}\navocado = avocado.rename(columns = names)","473b85e0":"# Create custom column\navocado.assign(rate=(avocado.price \/ avocado.volume))","a12ea859":"avocado.AveragePrice.head(10).plot.bar()","b9a607e7":"avocado.sample(10).plot.scatter(x = 'Total Bags', y = 'AveragePrice') # This case has less overwrapping","5b665955":"avocado.sample(1000).plot.scatter(x = 'Total Bags', y = 'AveragePrice') # This case has a large overwrapping","8a68436d":"avocado.sample(1000).plot.hexbin(x = 'Total Bags', y = 'AveragePrice', gridsize = 20)","54c7ebe0":"sns.countplot(avocado.sample(1000).AveragePrice)","36b0845a":"sns.kdeplot(avocado.sample(1000).AveragePrice)","7e23e73f":"def fit(X, y):\n    train_X, test_X, train_y, test_y = train_test_split(X, y, random_state=1)\n    model = DecisionTreeRegressor(random_state=1)\n    model.fit(train_X, train_y)\n    pred_y = model.predict(test_X)\n    mae = mean_absolute_error(test_y, pred_y)\n    return model, mae","a320d8fa":"def formatting(d, nf, cf, tr=[]):\n    \"\"\"\n    nf = numerical features\n    cf = categolical features\n    One stop function for\n    - Drop NaN\n    - One-hot encoding\n    \"\"\"\n    \n    # Drop NaN\n    d = d[nf + cf + tr]\n    d = d.dropna(axis=0)\n    \n    # One-hot encoding\n    num_df = d[nf]\n    cat_df = pd.get_dummies(d[cf])\n    X = pd.concat([num_df, cat_df], axis=1)\n    if len(tr) != 0:\n        y = d[tr]\n    else:\n        y = None\n    return X, y","bae199e4":"train = avocado\n\nnf = ['bags'] # numerical features\ncf = ['region'] # categolical features\ntr = ['price'] # target\n\nX, y = formatting(train, nf, cf, tr)\nmodel, mae = fit(X, y)\nprint(mae)","b6899d5e":"# Visualization","9bffd6d2":"## Prediction","e1e7ce9f":"# Data cleaning","527c274c":"# Data analysis","5d7e6837":"# Data augmentation","8439064b":"## Get data on your hand\nThis is a personal note of data handing.\n\n#### Terms\n- dot-notation: Expression of . like data.Price.\n- Prediction Target: Target columns I'm trying to apply ML.\n- y: A variable name commonly used for prediction target.\n- Features: Columns with which we predict the prediction target.\n- X: A series of variable name commonly used for features.\n\n#### Facts\n- .describe() shows numeric columns only.\n"}}