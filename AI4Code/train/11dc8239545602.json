{"cell_type":{"c02a9a7a":"code","c03c6c4a":"code","ee2c514d":"code","ce0432d6":"code","55ff47ce":"code","96d54cd9":"code","f25f48c9":"code","445134d3":"code","fe8bdadf":"code","3361ca35":"code","22b27355":"code","445f985d":"code","fb4dd758":"code","719aaf07":"code","cacf5b2d":"code","df95bd13":"code","dc8d045e":"code","3789a671":"code","d8cc6c4b":"code","c7cfa2f9":"code","4976e2a1":"code","0f490d48":"code","55d94301":"code","d0821d5f":"markdown","39de3679":"markdown","7aa662b5":"markdown","1196abf9":"markdown","66aaf251":"markdown","a0346dee":"markdown","eeaa6534":"markdown","ed794a27":"markdown","c813ff9f":"markdown","2a2928af":"markdown","3d361756":"markdown","15ea4ba5":"markdown","c5b93063":"markdown","8614d3ed":"markdown","82edb4d6":"markdown","e140f34a":"markdown","61dc11b8":"markdown"},"source":{"c02a9a7a":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nfrom scipy import stats\nimport datetime\n%matplotlib inline\nimport warnings\nwarnings.filterwarnings('ignore')\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\ndf = pd.read_csv('\/kaggle\/input\/london-bike-sharing-dataset\/london_merged.csv')\ndf.head()","c03c6c4a":"df.info()","ee2c514d":"# return distplot and result of Shapiro test\ndef normal (data, name):\n    x = data.sample(1000, random_state = 17)\n    a = 0.05\n    stat, p = stats.shapiro(x)\n    plt.figure(figsize = (13, 6))\n    sns.distplot(data, color = 'steelblue', kde_kws = dict(lw = 3), hist_kws = dict(edgecolor = 'black'))\n    sns.despine()\n    plt.xlabel('')\n    plt.ylabel('')\n    plt.tick_params(direction='out', length=8, width=4, colors='black', grid_color='black', labelsize = 16)\n    plt.title(f'Ditribution of {name}', color = 'black', fontsize = 24, fontweight = 'bold', x = 0.05, y = 1.1)\n    plt.show()\n    if p > 0.05:\n        print(f'{p} > 0.05, no reject HO (distribution is normal)')\n    else:\n        print(f'{p} < 0.05, reject HO (distribution is not normal)')\n\n# return barplot \ndef barplot(data_x, data_y, x_label, y_label,  x_ticks, title, color):\n    fig = plt.figure(figsize = (13, 6))\n    ax = fig.add_axes([0, 0, 1, 1])\n    ax.bar(x = data_x, height = data_y, color = 'steelblue', width = 0.4)\n    sns.despine()\n    for p in ax.patches:\n        width = p.get_width()\n        height = p.get_height()\n        x, y = p.get_xy() \n        ax.annotate('{:.0f}'.format(height), (x + width\/2, y + height*1.02), ha='center', fontsize=16, color='black')\n    ax.set_xlabel(x_label, color = 'black', fontsize = 20, fontweight = 'bold')\n    ax.set_ylabel(y_label, color = 'black', fontsize = 20, fontweight = 'bold')\n    ax.set_xticks(x_ticks)\n    ax.tick_params(direction='out', length=8, width=4, colors='black', grid_color='black', labelsize = 16)\n    plt.title(title, color= 'black', fontsize = 24, fontweight = 'bold', x = 0.2, y = 1.1)\n    plt.show()\n\n# return df with extreme values\ndef detected_extrem_values(data, column):\n    q25, q75 = column.quantile([0.25, 0.75])\n    intr_qr = q75-q25\n    lower_bound = q25 - 1.5 * intr_qr\n    upper_bound = q75 + 1.5 * intr_qr\n    extreme_values = data[(column < lower_bound) | (column > upper_bound)]\n    return extreme_values","ce0432d6":"df['timestamp'] = pd.to_datetime(df['timestamp'])\nby_year = df \\\n    .groupby(df['timestamp'].dt.year) \\\n    .agg({'cnt' : 'sum'}) \\\n    .reset_index() \\\n    .rename(columns = {'timestamp' : 'year'})\nbarplot(data_x = by_year['year'], \n        data_y = by_year['cnt'], \n        x_label = 'year', \n        y_label = 'cnt', \n        x_ticks = range(2015, 2018, 1), \n        title = 'Count of a new bike shares by year', \n        color = 'steelblue')\n\nprint(f'''Beginning of the period - {df['timestamp'].dt.date.min()};\nEnd of the period - {df['timestamp'].dt.date.max()}''')","55ff47ce":"by_season = df \\\n    .groupby('season') \\\n    .agg({'cnt' : 'sum'}) \\\n    .reset_index()\nbarplot(data_x = by_season['season'], \n        data_y = by_season['cnt'], \n        x_label = 'season',\n        y_label = 'cnt', \n        x_ticks = range(0, 4, 1), \n        title = 'Count of a new bike shares by season', color = 'steelblue')","96d54cd9":"by_month = df \\\n    .groupby(df['timestamp'].dt.month) \\\n    .agg({'cnt' : 'sum'}) \\\n    .reset_index() \\\n    .rename(columns = {'timestamp' : 'by_month'})\nplt.figure(figsize = (13, 6))\nsns.lineplot(x = by_month['by_month'], y = by_month['cnt'], color = 'steelblue', lw = 2)\nplt.scatter(x = by_month['by_month'], y = by_month['cnt'], color = 'black', zorder = 3, lw = 4)\nsns.despine()\nplt.xticks(range(0, 13, 1))\nplt.yticks(range(0, 3000000, 300000))\nplt.title('Count of a new bike shares by month', color= 'black', fontsize = 24, fontweight = 'bold', x = 0.25, y = 1.1)\nplt.xlabel('month', color = 'black', fontsize = 20, fontweight = 'bold')\nplt.ylabel('cnt', color = 'black', fontsize = 20, fontweight = 'bold')\nplt.tick_params(direction='out', length=8, width=4, colors='black', grid_color='black', labelsize = 16)\nplt.show()","f25f48c9":"by_weekend = df \\\n    .groupby(df['is_weekend']) \\\n    .agg({'cnt' : 'sum'}) \\\n    .reset_index() \nbarplot(data_x = by_weekend['is_weekend'].replace({0: 'weekday', 1: 'weekend'}),  \n        data_y = by_weekend['cnt'], \n        x_label = '', \n        y_label = 'cnt', \n        x_ticks = ['weekday', 'weekend'], \n        title = 'Count of a new bike shares by weekday and weekend', color = 'steelblue')","445134d3":"by_holiday = df \\\n    .groupby(df['is_holiday']) \\\n    .agg({'cnt' : 'sum'}) \\\n    .reset_index() \nbarplot(data_x = by_holiday['is_holiday'].replace({0: 'no holiday', 1: 'holiday'}),  \n        data_y = by_holiday['cnt'], \n        x_label = '', \n        y_label = 'cnt', \n        x_ticks = ['no holiday', 'holiday'], \n        title = 'Count of a new bike shares by non holiday and holiday', color = 'steelblue')","fe8bdadf":"count_weekend = df['is_weekend'] \\\n    .value_counts() \\\n    .to_frame() \\\n    .reset_index()\nbarplot(data_x = count_weekend['index'].replace({0: 'weekday', 1: 'weekend'}),  \n        data_y = count_weekend['is_weekend'], \n        x_label = '', \n        y_label = 'number of days', \n        x_ticks = ['weekday', 'weekend'], \n        title = 'Number of weekdays and weekends', color = 'steelblue')","3361ca35":"count_holiday = df['is_holiday'] \\\n    .value_counts() \\\n    .to_frame() \\\n    .reset_index()\ncount_holiday\nbarplot(data_x = count_holiday['index'].replace({0: 'no holiday', 1: 'holiday'}),  \n        data_y = count_holiday['is_holiday'], \n        x_label = '', \n        y_label = 'number of days', \n        x_ticks = ['no holiday', 'holiday'], \n        title = 'Number of no holiday and holidays', color = 'steelblue')","22b27355":"by_day_of_week = df \\\n    .groupby(df['timestamp'].dt.weekday) \\\n    .agg({'cnt' : 'sum'}) \\\n    .reset_index() \\\n    .rename(columns = {'timestamp' : 'day_of_week'})\nby_day_of_week['day_of_week'] = by_day_of_week['day_of_week'].replace({0 : 'Monday', 1 : 'Tuesday', 2 : 'Wednesday', 3 : 'Thursday', 4 : 'Friday', 5 : 'Saturday', 6 : 'Sunday'})    \nbarplot(data_x = by_day_of_week['day_of_week'], \n        data_y = by_day_of_week['cnt'], \n        x_label = 'day of week', \n        y_label = 'cnt', \n        x_ticks = by_day_of_week['day_of_week'], \n        title = 'Count of a new bike shares by day of week', \n        color = 'steelblue')","445f985d":"by_date = df \\\n    .groupby(df['timestamp'].dt.date) \\\n    .agg({'cnt' : 'sum'}) \n#     .rolling(30).sum()\nby_date['cnt_roll'] = by_date['cnt'].rolling(30).sum()\nplt.figure(figsize = (13, 6))\nsns.lineplot(y = by_date['cnt_roll'], x = by_date.index)\nplt.xlabel('date', color = 'black', fontsize = 20, fontweight = 'bold')\nplt.ylabel('cnt', color = 'black', fontsize = 20, fontweight = 'bold')\nplt.tick_params(direction='out', length=8, width=4, colors='black', grid_color='black', labelsize = 16)\nplt.title('Count of a new bike shares by 30 days', color= 'black', fontsize = 24, fontweight = 'bold', x = 0.25, y = 1.1)\nsns.despine()\nplt.show()","fb4dd758":"plt.figure(figsize = (13, 6))\nsns.lineplot(y = by_date['cnt'], x = by_date.index)\nplt.xlabel('date', color = 'black', fontsize = 20, fontweight = 'bold')\nplt.ylabel('cnt', color = 'black', fontsize = 20, fontweight = 'bold')\nplt.tick_params(direction='out', length=8, width=4, colors='black', grid_color='black', labelsize = 16)\nplt.title('Count of a new bike shares by date', color= 'black', fontsize = 24, fontweight = 'bold', x = 0.25, y = 1.1)\nsns.despine()\nplt.show()","719aaf07":"normal(df['cnt'], 'cnt')","cacf5b2d":"by_date.drop('cnt_roll', axis = 1, inplace = True)\ndetected_extrem_values(by_date, by_date['cnt'])","df95bd13":"for i in ['t1', 't2', 'hum', 'wind_speed']:\n    normal(df[i], i)","dc8d045e":"weather_code = df['weather_code'] \\\n    .value_counts() \\\n    .to_frame() \\\n    .reset_index()\nweather_code['index'] = weather_code['index'].replace({1 : 'Clear', 2 : 'few clouds', 3 : 'Broken clouds', 4 : 'Cloudy',\n                                               7 : 'Rain', 10 : 'rain with thunderstorm ', 26 : 'snowfall', 94 : 'Freezing Fog'})\nbarplot(data_x = weather_code['index'],  \n        data_y = weather_code['weather_code'], \n        x_label = '', \n        y_label = 'number of weather_code', \n        x_ticks = weather_code['index'], \n        title = 'Number of weather code', color = 'steelblue')","3789a671":"df[df['timestamp'].dt.date == datetime.date(year=2015,month=8,day=6)]","d8cc6c4b":"time_period = []\nfor i in df['timestamp'].dt.hour:\n    if i >= 4 and i < 10:\n        time_period.append('morning')\n    elif i >= 10 and i < 17:\n        time_period.append('afternoon')\n    elif i >= 17 and i < 22:\n        time_period.append('evening')\n    elif i >= 22 and i < 24:\n        time_period.append('night')\n    elif i >= 0 and i < 4:\n        time_period.append('night')\ndf['time_period'] = time_period\ndf.head()","c7cfa2f9":"by_time_period = df \\\n    .groupby('time_period', as_index = False) \\\n    .agg({'cnt' : 'sum'})\nbarplot(data_x = by_time_period['time_period'],  \n        data_y = by_time_period['cnt'], \n        x_label = 'time_period', \n        y_label = 'cnt', \n        x_ticks = by_time_period['time_period'], \n        title = 'Count of a new bike shares by time period', color = 'steelblue')","4976e2a1":"anomaly_day = df[df['timestamp'].dt.date == datetime.date(year=2015,month=8,day=6)] \n\n# morning\nmorning_anomaly = anomaly_day \\\n    .query(\"time_period == 'morning'\")[['t1', 't2', 'hum', 'wind_speed']]\nmorning_anomaly = round(morning_anomaly.mean())\n\n#afternoon\nafternoon_anomaly = anomaly_day \\\n    .query(\"time_period == 'afternoon'\")[['t1', 't2', 'hum', 'wind_speed']]\nafternoon_anomaly = round(afternoon_anomaly.mean())\n\n# evening\nevening_anomaly = anomaly_day \\\n    .query(\"time_period == 'evening'\")[['t1', 't2', 'hum', 'wind_speed']]\nevening_anomaly = round(evening_anomaly.mean())\n\n# night\nnight_anomaly = anomaly_day \\\n    .query(\"time_period == 'night'\")[['t1', 't2', 'hum', 'wind_speed']]\nnight_anomaly = round(night_anomaly.mean(), 2)\n\naugust_2015 = df[df['timestamp'].dt.year == 2015] \naugust_2015 = august_2015[august_2015['timestamp'].dt.month == 8] \naugust_2015 = august_2015[august_2015['timestamp'].dt.date != datetime.date(year=2015,month=8,day=6)] \n\n# morning\naugust_2015_morning_mean = round(august_2015 \\\n    .query(\"time_period == 'morning'\") \\\n    .groupby(august_2015['timestamp'].dt.date) \\\n    .agg({'t1' : 'mean',\n        't2' : 'mean',\n         'hum' : 'mean',\n         'wind_speed' : 'mean'}).mean(), 2)\n\n# afternoon\naugust_2015_afternoon_mean = round(august_2015 \\\n    .query(\"time_period == 'afternoon'\") \\\n    .groupby(august_2015['timestamp'].dt.date) \\\n    .agg({'t1' : 'mean',\n        't2' : 'mean',\n         'hum' : 'mean',\n         'wind_speed' : 'mean'}).mean(), 2)\n\n# evening\naugust_2015_evening_mean = round(august_2015 \\\n    .query(\"time_period == 'evening'\") \\\n    .groupby(august_2015['timestamp'].dt.date) \\\n    .agg({'t1' : 'mean',\n        't2' : 'mean',\n         'hum' : 'mean',\n         'wind_speed' : 'mean'}).mean(), 2)\n\n# night\naugust_2015_night_mean = round(august_2015 \\\n    .query(\"time_period == 'evening'\") \\\n    .groupby(august_2015['timestamp'].dt.date) \\\n    .agg({'t1' : 'mean',\n        't2' : 'mean',\n         'hum' : 'mean',\n         'wind_speed' : 'mean'}).mean(), 2)\n\nmorning_df = pd.DataFrame({'anomaly' : morning_anomaly, 'august_2015' : august_2015_morning_mean}, index = morning_anomaly.index)\nafternoon_df = pd.DataFrame({'anomaly' : afternoon_anomaly, 'august_2015' : august_2015_afternoon_mean}, index = morning_anomaly.index)\nevening_df = pd.DataFrame({'anomaly' : evening_anomaly, 'august_2015' : august_2015_evening_mean}, index = morning_anomaly.index)\nnight_df = pd.DataFrame({'anomaly' : night_anomaly, 'august_2015' : august_2015_night_mean}, index = morning_anomaly.index)\n\nprint('Morning')\nprint(morning_df)\nprint()\n\nprint('Afternoon')\nprint(afternoon_df)\nprint()\n\nprint('Evening')\nprint(evening_df)\nprint()\n\nprint('Night')\nprint(night_df)\nprint()","0f490d48":"by_time_period_anomaly = anomaly_day \\\n    .groupby('time_period', as_index = False) \\\n    .agg({'cnt' : 'sum'})\nbarplot(data_x = by_time_period_anomaly['time_period'],  \n        data_y = by_time_period_anomaly['cnt'], \n        x_label = 'time_period', \n        y_label = 'cnt', \n        x_ticks = by_time_period_anomaly['time_period'], \n        title = 'Count of a new bike shares by time period (anomaly)', color = 'steelblue')","55d94301":"by_time_period_august_2015 = august_2015 \\\n    .groupby('time_period', as_index = False) \\\n    .agg({'cnt' : 'sum'})\nbarplot(data_x = by_time_period_august_2015['time_period'],  \n        data_y = by_time_period_august_2015['cnt'], \n        x_label = 'time_period', \n        y_label = 'cnt', \n        x_ticks = by_time_period_august_2015['time_period'], \n        title = 'Count of a new bike shares by time period (august_2015)', color = 'steelblue')","d0821d5f":"# I got the expected results, the largest number was in summer, the smallest was in winter.\n\n# And now I want to check by month.","39de3679":"# All distributions are not normal","7aa662b5":"# We can see that most days with good weather (Clear) by explore period. \n\n# I will compare weather by mean of month with weather by anomaly day.","1196abf9":"# From the dataframe, we can see how the weather changes by the hour. In order to correctly compare weather conditions, I will divide the day into time intervals: morning (>= 4:00), day (>= 10: 00), evening (>= 17: 00), night (>= 22: 00). Let's add column.","66aaf251":"* Morning - the anomaly day was hotter; almost the same humidity and wind speed;\n\n* Afternoon - the temperature, humidity and wind speed on anomaly day are higher; \n\n* Evening - the temperature is almost the same; the humidity on anomaly day is less, and the wind speed is higher;\n\n* Night - the temperature and wind speed are less, and the humidity is higher.\n\n# From analyze weather we can see some differences, but they don't explain the anomaly amount of cnt.\n\n# Else I want to check number of cnt by time period in anomaly day and august 2015.","a0346dee":"# By date we have some extreme values, I want to check these dates, but firstly I want to see distribution of cnt.","eeaa6534":"# The expected result was obtained. The largest number of cnt is day, the smallest is night.\n\n# Let's check statistics of weather featerues by time period in anomaly day and august 2015 without anomaly day.","ed794a27":"# We can see that count of a new bike shares were more in 2016 then in 2015. Such a small number in 2017 due to the fact that the period ended 2017-01-03.","c813ff9f":"# I didn't find anything about 2015-08-06 in London, but 2015-07-09 in London was 24-hour underground strike. The unions for the London Underground train drivers have called a day-long strike across the city. Drivers are upset over wages and a new plan to extend Tube service through the night. Millions of London's workers struggled to get to work Thursday morning after the British capital's underground train drivers began a day-long strike the night before. The drivers are protesting low pay as well as plans to provide round-the-clock train service beginning in September.\n![](https:\/\/static.dw.com\/image\/18571999_303.jpg)\n\n\n[source](https:\/\/www.dw.com\/en\/londoners-struggle-through-24-hour-underground-strike\/a-18572090) - Deutsche Welle\n\n# The main reason for the increase cnt in 2015-07-09 - Underground strike. To try to find out the reasons for the increase cnt in 2015-06-08, I will explore the weather conditions on this day. But firstly I will make EDA columns about weather.","2a2928af":"# The largest number of cnt is in July, the smallest in February.\n\n# After analyzing the number of cnt by season and month, we can conclude about the seasonal dependence.\n\n# Else I want to check dependence of the number of cnt on weekends and holidays.","3d361756":"# From the charts, we can see that in anomaly day, the largest number of cnt was in the evening. However, in August 2015 and for the all period, the largest number was in the afternoon.","15ea4ba5":"# Else we can check time_period:","c5b93063":"# And in the end I can say that I don't find reasons of anomaly number of cnt in 2015-08-06. I can assume that we don't have enough data. But maybe I missed something, I will be glad to see your suggestions in the comments.","8614d3ed":"# Such differences are explained by the ratio of the number of weekdays and weekends, not holidays and holidays:","82edb4d6":"# The largest number of cnt on Thursday, the smallest on Sunday.\n# And now I check cnt by month and year, I will use rolling","e140f34a":"# Distribution of cnt is right skewed. Let's detected extreme values.","61dc11b8":"# From the graph we observed several extreme values:\n* growth ~ 07.2015 - 08.2015 and 08.2016 - 09.2016;\n* fall ~ 01.2016 - 02.2016."}}