{"cell_type":{"399a0606":"code","c5c7a93e":"code","95b11646":"code","67c863da":"code","4a4f2dfa":"code","2311fcba":"code","68cbd085":"code","28c78f8a":"code","9a388bb7":"code","5b06f1a5":"code","844e9344":"code","525a54c2":"code","86d80a60":"code","c755e05a":"code","7cf83255":"code","3893c287":"code","95067fd4":"code","1dd27739":"code","103b380e":"code","334949b0":"code","b437155e":"code","c89a3ae7":"code","1011186c":"code","4885a5bf":"code","9c5eba0a":"code","cc47b500":"code","cfa43cdc":"code","7161f384":"code","ccbb5c11":"code","8db61198":"code","7cb25998":"code","36742657":"code","8a2b0564":"code","ab54a64b":"code","bb52ea6a":"code","e0c64a2d":"code","441ce96d":"code","8340d592":"code","ae01018f":"code","7a29eea3":"code","2d943254":"code","96ffc61d":"code","cb3184fe":"code","65301bf9":"code","2f677340":"code","304ee518":"code","9fce38f7":"code","c61fc7a0":"code","9bf2ae31":"code","f790ab97":"code","f0005842":"code","91458681":"code","c1648875":"code","ed8bc55b":"code","ff2104a7":"code","e3f70fd8":"code","6a1f54e5":"code","b456526c":"code","5b6edf58":"code","d44c52d3":"code","402ae635":"code","3bfee0be":"code","297421a9":"code","4e890d23":"code","b58cf384":"markdown","95803285":"markdown","b5fc7784":"markdown","ee00bfaf":"markdown","55e6d7f5":"markdown","c4f95089":"markdown","f1157e50":"markdown","fab2bead":"markdown","8b2f11f7":"markdown","19c13be2":"markdown"},"source":{"399a0606":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n\nimport warnings\nwarnings.filterwarnings('ignore')\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","c5c7a93e":"from sklearn.preprocessing import OneHotEncoder , LabelEncoder , label_binarize\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.preprocessing import LabelEncoder\nfrom sklearn.metrics import accuracy_score,confusion_matrix\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.svm import SVC\nfrom sklearn.linear_model import LogisticRegression\nfrom xgboost import XGBClassifier\nfrom sklearn.naive_bayes import GaussianNB\nfrom sklearn.metrics import plot_roc_curve,roc_auc_score,roc_curve","95b11646":"train = pd.read_csv('..\/input\/titanic\/train.csv')\ntest = pd.read_csv('..\/input\/titanic\/test.csv')\ndf=pd.DataFrame()","67c863da":"import plotly.express as px","4a4f2dfa":"train.head()","2311fcba":"train.shape","68cbd085":"missing_rows=pd.DataFrame(train.isna().sum().sort_values(ascending=False),columns=['Column'])\nmissing_rows['Percentage']=(missing_rows['Column']\/891)*100","28c78f8a":"missing_rows.head()","9a388bb7":"test.head()","5b06f1a5":"fig=plt.figure(figsize=(12,1))\nsns.countplot(y=train['Survived'])","844e9344":"df['Survived']=train['Survived']\n","525a54c2":"df.head()","86d80a60":"fig=plt.figure(figsize=(12,1))\nsns.countplot(y=train['Embarked'])","c755e05a":"train.Pclass.value_counts()","7cf83255":"df['Pclass']=train['Pclass']","3893c287":"fig=plt.figure(figsize=(8,5))\nsns.boxplot(data=train, x=\"Age\")","95067fd4":"train['Age'].fillna((train['Age'].mean()),inplace=True)","1dd27739":"train.isna().sum()","103b380e":"df['Age']=train['Age']","334949b0":"df.isna().sum()","b437155e":"fig=plt.figure(figsize=(8,5))\nsns.distplot(train.Pclass)","c89a3ae7":"train.Age.mean()","1011186c":"plt.figure(figsize=(11,7))\nsns.regplot(x='Fare',y='Survived',data=train,color='orange')","4885a5bf":"train.head()","9c5eba0a":"df['Sex']=train['Sex']","cc47b500":"df.head()","cfa43cdc":"d={'male':0,'female':1}\ntrain['Sex']=train.Sex.map(d)","7161f384":"columns=['Sex','SibSp','Parch']","ccbb5c11":"for c in columns:\n    plt.figure(figsize=(11,10))\n    sns.distplot(train.loc[train['Survived']==1][c],kde_kws={'label':'Survived'},color='green')\n    sns.distplot(train.loc[train['Survived']==0][c],kde_kws={'label':'Did not Survive'},color='red')\n    \n    plt.legend(labels=['Survived','Did not Survive'])\n    plt.title(c)\n    ","8db61198":"df['SibSp']=train['SibSp']","7cb25998":"train.Parch.value_counts()","36742657":"df['Parch']=train['Parch']","8a2b0564":"df['Fare']=train['Fare']","ab54a64b":"df['Embarked']=train['Embarked']","bb52ea6a":"df.isna().sum()","e0c64a2d":"df=df.dropna(subset=['Embarked'])","441ce96d":"train.head()","8340d592":"train.isna().sum()","ae01018f":"df.head()","7a29eea3":"df2=df.apply(LabelEncoder().fit_transform)","2d943254":"df2.head()","96ffc61d":"X=df2.drop('Survived',axis=True)\ny=df2['Survived']","cb3184fe":"X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.33, random_state=42)","65301bf9":"X_train.head()","2f677340":"clf_random_forest=RandomForestClassifier()\nclf_random_forest=clf_random_forest.fit(X_train,y_train)\nrandom_forest_predictions=clf_random_forest.predict(X_test)\n\naccuracy_random_forest=accuracy_score(y_test,random_forest_predictions)*100\nprint(accuracy_random_forest)","304ee518":"r_fpr,r_tpr,_=roc_curve(y_test,random_forest_predictions)\nr_auc=roc_auc_score(y_test,random_forest_predictions)\nplt.plot(r_fpr,r_tpr,label='Random Forest Prediction (area={:.3f})'.format(r_auc))\nplt.title('ROC plot Random Forest Classifier')\nplt.xlabel('False Positive rate')\nplt.ylabel('True Positive rate')\nplt.legend(loc='best')\nplt.show()","9fce38f7":"s_regression=SVC()\ns_regression=s_regression.fit(X_train,y_train)\nsvc_predictions=s_regression.predict(X_test)\n\naccuracy_svc=accuracy_score(y_test,svc_predictions)*100\nprint(accuracy_svc)","c61fc7a0":"s_fpr,s_tpr,_=roc_curve(y_test,svc_predictions)\ns_fpr,s_tpr,_=roc_curve(y_test,svc_predictions)\ns_auc=roc_auc_score(y_test,svc_predictions)\nplt.plot(s_fpr,s_tpr,label='SVC Prediction (area={:.3f})'.format(s_auc))\nplt.title('ROC plot SVC')\nplt.xlabel('False Positive rate')\nplt.ylabel('True Positive rate')\nplt.legend(loc='best')\nplt.show()\ns_auc","9bf2ae31":"KNC=KNeighborsClassifier()\nKNC=KNC.fit(X_train,y_train)\nKNN_predictions=KNC.predict(X_test)\n\nknn_accuracy=accuracy_score(y_test, KNN_predictions)*100\nprint(knn_accuracy)","f790ab97":"k_fpr,k_tpr,_=roc_curve(y_test,KNN_predictions)\nknn_score=roc_auc_score(y_test,KNN_predictions)\nplt.plot(k_fpr,k_tpr,label='KNN prediction (area={:.3f})'.format(knn_score))\nplt.title('ROC plot KNN')\nplt.xlabel('False Positive rate')\nplt.ylabel('True Positive rate')\nplt.legend(loc='best')\nplt.show()","f0005842":"d_tree=DecisionTreeClassifier()\nd_tree=d_tree.fit(X_train,y_train)\nd_tree_predictions=d_tree.predict(X_test)\n\nd_tree_accuracy=accuracy_score(y_test,d_tree_predictions)*100\nprint(d_tree_accuracy)","91458681":"d_fpr,d_tpr,_=roc_curve(y_test,d_tree_predictions)\nd_tree_score=roc_auc_score(y_test,d_tree_predictions)\nplt.plot(d_fpr,d_tpr,label='Decision Tree prediction (area={:.3f})'.format(d_tree_score))\nplt.title('ROC plot Decision Tree Classifier')\nplt.xlabel('False Positive rate')\nplt.ylabel('True Positive rate')\nplt.legend(loc='best')\nplt.show()","c1648875":"clf = GaussianNB()\nclf=clf.fit(X_train,y_train)\nclf_predictions=clf.predict(X_test)\ngb_score=accuracy_score(y_test,clf_predictions)*100\nprint(gb_score)","ed8bc55b":"gb_fpr,gb_tpr,_=roc_curve(y_test,clf_predictions)\nclf_score=roc_auc_score(y_test,clf_predictions)\nplt.plot(gb_fpr,gb_tpr,label='Logistic Reg (area={:.3f})'.format(clf_score))\nplt.title('ROC plot GaussianNB')\nplt.xlabel('False Positive rate')\nplt.ylabel('True Positive rate')\nplt.legend(loc='best')\nplt.show()","ff2104a7":"xgb_model =XGBClassifier(random_state=2, learning_rate=0.1, max_depth=10, min_child_weight=1, n_estimators=50)\n\nxgb_model.fit(X_train, y_train)\nlog_accuracy_xgb=accuracy_score(y_test,xgb_model.predict(X_test))\nprint(f'The accuracy score for Bagging classifier is {log_accuracy_xgb*100}%')","e3f70fd8":"xgb_fpr,xgb_tpr,_=roc_curve(y_test,xgb_model.predict(X_test))\nclf_score=roc_auc_score(y_test,xgb_model.predict(X_test))\nplt.plot(xgb_fpr,xgb_tpr,label='XGB (area={:.3f})'.format(clf_score))\nplt.title('XGB Classifier')\nplt.xlabel('False Positive rate')\nplt.ylabel('True Positive rate')\nplt.legend(loc='best')\nplt.show()","6a1f54e5":"models=pd.DataFrame({'Model':['RandomForestClassifier','SVC','KNN','Decision Tree','Gaussian','XGB'],\n                     'Score':[accuracy_random_forest,accuracy_svc,knn_accuracy,d_tree_accuracy,gb_score,log_accuracy_xgb]\n                    })","b456526c":"models.head()","5b6edf58":"test_columns=X_train.columns","d44c52d3":"predictions=clf_random_forest.predict(test[test_columns].apply(LabelEncoder().fit_transform))\n","402ae635":"submission=pd.DataFrame()","3bfee0be":"submission['PassengerId']=test['PassengerId']\nsubmission['Survived']=predictions","297421a9":"submission.head()","4e890d23":"submission.to_csv('submission.csv', index=False)","b58cf384":"# Density Plots for Sex , SibSp , Parch against those who survived and did not survive","95803285":"# Density Plot for Pclass","b5fc7784":"# Assessing different Models","ee00bfaf":"# Correlation between Fare and those who survived","55e6d7f5":"# Choosing the best model based on performance","c4f95089":"# Figuring out the Missing values for the training data set","f1157e50":"# Count Plots for Survived and Embarked","fab2bead":"# Changing the Sex column to represent Females as 1 and Males as 0","8b2f11f7":"# Analysis of Age column","19c13be2":"# Survivors correlation with Pclass"}}