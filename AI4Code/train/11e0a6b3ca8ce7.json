{"cell_type":{"ad167155":"code","d60bceca":"code","4b8ed7d1":"code","8b949f7a":"code","6c0fa273":"code","a23f0ac5":"code","e3573dfe":"code","7862a0ae":"code","ee33b406":"code","11cd79ff":"code","00519e5d":"code","25228117":"code","3a593bcd":"code","4e1aac79":"code","3bd85231":"code","8e4c3e4a":"code","84af3e57":"code","fdfd7b94":"code","c820aaf3":"code","62eec7fd":"code","6a7d643e":"code","a4eeb2c5":"code","5b2baaa9":"markdown","49e06132":"markdown","3aa1221a":"markdown","588b7271":"markdown","f1afe506":"markdown","6dac357d":"markdown"},"source":{"ad167155":"# Input data files are available in the \"..\/input\/\" directory.\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\n%matplotlib inline\n\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.\n\n","d60bceca":"global_data = pd.read_csv(\"..\/input\/novel-corona-virus-2019-dataset\/covid_19_data.csv\")\nglobal_data.head()","4b8ed7d1":"countries = ['Mainland China', 'Hong Kong', 'Macau', 'Taiwan', 'US', 'Japan',\n       'Thailand', 'South Korea', 'Singapore', 'Philippines', 'Malaysia',\n       'Vietnam', 'Australia', 'Mexico', 'Brazil', 'Colombia', 'France',\n       'Nepal', 'Canada', 'Cambodia', 'Sri Lanka', \n       'Germany', 'Finland', 'United Arab Emirates', 'India', 'Italy',\n       'UK', 'Russia', 'Sweden', 'Spain', 'Belgium', 'Egypt',\n       'Iran', 'Israel', 'Bahrain', 'Kuwait', 'Austria', 'Croatia',\n       'Switzerland', 'Pakistan', 'Georgia', 'Greece', \n       'Norway', 'Romania', 'Denmark', 'Estonia', 'Netherlands',\n       'San Marino', ' Azerbaijan', 'Belarus', 'Iceland', 'Lithuania',\n       'New Zealand', 'Nigeria', 'North Ireland', 'Ireland', 'Luxembourg',\n       'Monaco', 'Qatar', 'Ecuador', 'Azerbaijan', 'Czech Republic',\n       'Armenia', 'Dominican Republic', 'Indonesia', 'Portugal',\n       'Latvia', 'Morocco', 'Saudi Arabia', \n       'Argentina', 'Chile', 'Jordan', 'Ukraine', \n       'Hungary', 'Poland',\n       'Tunisia', 'Palestine', 'Bosnia and Herzegovina', 'Slovenia',\n       'South Africa', 'Bhutan', 'Cameroon', 'Costa Rica', 'Peru',\n       'Serbia', 'Slovakia', 'Togo', 'Vatican City',\n       'Malta', 'Republic of Ireland', 'Bulgaria',\n       'Maldives', 'Bangladesh', 'Moldova', 'Paraguay', 'Albania',\n       'Cyprus', 'Brunei',  \n       'Mongolia', 'Panama', 'Bolivia', 'Honduras', 'Congo (Kinshasa)',\n       'Jamaica', 'Reunion', 'Turkey', 'Cuba', 'Guyana', 'Kazakhstan',\n       'Kenya', 'Uruguay', 'Ghana',\n       'Namibia', 'Venezuela','Kosovo',\n       'Uzbekistan', 'Tanzania', 'Montenegro',\n       'Kyrgyzstan', 'Mauritius', 'Nicaragua', 'Madagascar', 'Angola', \n       'Zimbabwe', 'Dominica', 'Syria', 'Laos',\n       'West Bank and Gaza']","8b949f7a":"# This is a function which plots (for in input country) the active, confirmed, and recovered cases, deaths, and the growth factor.\nshifts = [1,8,12,16,20,23]\n\ndef plot_ratio(country):\n    global table\n    global table2   \n    country_data = global_data[global_data['Country\/Region']==country]\n    provinces = country_data['Province\/State'].unique()\n    for province in provinces:\n        province_data = country_data[country_data['Province\/State']==province] \n        if len(provinces)==1:\n             province_data = country_data \n        table = province_data.drop(['SNo','Province\/State', 'Last Update'], axis=1)\n        table = table[table['Confirmed']>100]\n        #table['ActiveCases'] = table['Confirmed'] - table['Recovered'] - table['Deaths']\n        table.set_index('ObservationDate',inplace=True)\n        table2 = []\n        stds= []   \n        for shift in shifts:\n            table['Ratio'] = np.roll(np.array(table['Recovered']),-shift)\/table['Confirmed']\n            table['Ratio'] = table['Recovered']\/table['Confirmed']\n\n            if (len(table[table['Ratio'].notna()])>2) and not province in ['Mayotte','Martinique','Isle of Man','Victoria']:\n                table2.append(table['Ratio'])\n                stds.append(table['Ratio'][:-shift].std())\n\n        \n        if (len(stds)>0)and min(stds)>0.05:\n            choice = stds.index(min(stds)) \n            choice = 0\n            print('Country ',country,' Province ',province, ' Shifted by ',shifts[choice],' days')\n            table2[choice][:-shifts[choice]].plot(title=country,rot=90,ylim=(0,3))\n            temp = 1\/(table['Confirmed'].max())*table['Confirmed']\n            temp.plot()\n            temp = 1\/(table['Confirmed'].max())*table['Recovered']\n            temp.plot()\n           \n            plt.show()\n\n   \n    return \n","6c0fa273":"plot_ratio('South Korea')","a23f0ac5":"for country in countries[3:]:\n     print(country)\n     plot_ratio(country)","e3573dfe":"plot_ratio('Italy')","7862a0ae":"plot_ratio('Spain')","ee33b406":"plot_ratio('France')","11cd79ff":"plot_ratio('Israel')","00519e5d":"plot_ratio('Russia')","25228117":"plot_ratio('Japan',8)","3a593bcd":"plot_ratio('Norway',8)","4e1aac79":"plot_ratio('Sweden',8)","3bd85231":"plot_ratio('Finland',8)","8e4c3e4a":"plot_ratio('Poland',8)","84af3e57":"plot_ratio('Russia',8)","fdfd7b94":"restofworld_data = global_data\nfor country in restofworld_data['Country\/Region']:\n    if country != 'Mainland China': \n        restofworld_data['Country\/Region'] = restofworld_data['Country\/Region'].replace(country, \"RestOfWorld\")\n\nplot_country_active_confirmed_recovered('RestOfWorld')","c820aaf3":"from scipy.optimize import curve_fit\n","62eec7fd":"# We want number of confirmed for each date for each country\n#country_data = global_data[global_data['Country\/Region']=='Mainland China']\nglobal_data = pd.read_csv(\"..\/input\/novel-corona-virus-2019-dataset\/covid_19_data.csv\")\ncountry_data = global_data[global_data['Country\/Region']=='Italy']\n\ncountry_data = country_data.drop(['SNo','Province\/State', 'Last Update'], axis=1)\ncountry_data = pd.pivot_table(country_data, values=['Confirmed', 'Recovered','Deaths'], index=['ObservationDate'], aggfunc=np.sum)\ncountry_data.tail()","6a7d643e":"#country_data['GrowthFactor'] = growth_factor(country_data['Confirmed'])\n\n# we will want x_data to be the number of days since first confirmed and the y_data to be the confirmed data. This will be the data we use to fit a logistic curve\nx_data = range(len(country_data.index))\ny_data = country_data['Confirmed']\n\ndef log_curve(x, k, x_0, ymax):\n    return ymax \/ (1 + np.exp(-k*(x-x_0)))\n\n# Fit the curve\npopt, pcov = curve_fit(log_curve, x_data, y_data, bounds=([0,0,0],np.inf), maxfev=50000)\nestimated_k, estimated_x_0, ymax= popt\n\n\n# Plot the fitted curve\nk = estimated_k\nx_0 = estimated_x_0\ny_fitted = log_curve(x_data, k, x_0, ymax)\nprint(k, x_0, ymax)\n#print(y_fitted)\ny_data.tail()","a4eeb2c5":"# Plot everything for illustration\nfig = plt.figure()\nax = fig.add_subplot(111)\nax.plot(x_data, y_fitted, '--', label='fitted')\nax.plot(x_data, y_data, 'o', label='Confirmed Data')\n","5b2baaa9":"### Notice that this predicts Italy hit the inflection point around day 53 (it is currently day 79 as of April 8th) and the number of confirmed cases will max out around 145,188 cases. The curve is certainly underestimating. Furthermore, for some countries, it is too early to use this method to get a reasonable estimate. We should also consider that the number of positive undiagnosed cases in each country is likely to be significant. Because most countries aren't testing enough, the mortality rate is likely inflated since the number of actual positive cases in each population is likely considerably higher than confirmed cases.","49e06132":"## Estimating recovered number","3aa1221a":"## Logistic Curve Fitting\n\nWe are going to use scipy.optimize.curve_fit to fit a logistic curve to the number of confirmed cases in Italy.","588b7271":"## Import Data","f1afe506":"\n## Smoothed vs Unsmoothed Growth Factor\n\nThe growth factor we see above for Rest Of World is smoothed, just for illustration, let's look at smoothed vs unsmoothed.\n\nThe orange plot is the unsmoothed growth factor data for all countries except for china, the blue is the smoothed data. Smoothed data is essentially a weighted average, you can see how we define it above.\n\n![SmoothedVsUnsmoothedGF.png](attachment:SmoothedVsUnsmoothedGF.png)","6dac357d":"## Rest of the World"}}