{"cell_type":{"8839ff76":"code","864a1801":"code","15765518":"code","e7f1f72f":"code","8e8bb1b3":"code","20bc8c2b":"code","13088e62":"code","42384561":"code","358aae05":"code","6b0545ec":"code","f785c8eb":"code","42ebba4d":"code","c2077d94":"code","c5dea4c9":"code","0445de9e":"code","1039077e":"code","8faf489d":"code","500d356c":"code","db3446b1":"code","4ca4181d":"code","5207fb5d":"code","ee2e0c97":"code","43bf7574":"code","b46a156a":"code","c380bb8b":"code","f24f6560":"code","87246743":"code","43190e5f":"code","02ab8e51":"code","600afbee":"code","5d42c820":"code","b7f5c7e1":"code","6b621cda":"code","cda42ce7":"code","ae9fddf3":"code","4d472cdb":"code","e5525fe3":"code","c71570cf":"code","7cc88334":"code","07a8ef20":"code","00d4f587":"code","3f187c71":"code","dbc49aba":"code","d52e3910":"code","eedf900f":"code","81448d93":"code","c9fb3569":"code","1f821250":"markdown","21e50be5":"markdown","d5260750":"markdown","50e790d4":"markdown","e0ce26c2":"markdown","a110d5cb":"markdown","c6c4faaa":"markdown","1cdceadb":"markdown","027e3cfa":"markdown","f3cdfdd3":"markdown","f8c49586":"markdown","0cdf08d7":"markdown","7c75e1e7":"markdown","b68b8331":"markdown","29f3947e":"markdown","8715973a":"markdown","8695b408":"markdown","d3e82707":"markdown"},"source":{"8839ff76":"import numpy as np \nimport pandas as pd\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n","864a1801":"state_region = pd.read_csv('..\/input\/daily-power-generation-in-india-20172020\/State_Region_corrected.csv')\nfile_data = pd.read_csv('..\/input\/daily-power-generation-in-india-20172020\/file.csv')","15765518":"!pip install -q pandas-profiling[notebook]","e7f1f72f":"from pandas_profiling import ProfileReport","8e8bb1b3":"state_region_profile = ProfileReport(state_region, title=\"state_region Profiling Report\")\nfile_data_profile = ProfileReport(file_data, title=\"file_data Profiling Report\")","20bc8c2b":"state_region_profile.to_notebook_iframe()","13088e62":"file_data_profile.to_notebook_iframe()","42384561":"state_region.head()","358aae05":"# Some data is missing\nstate_region['National Share (%)'].sum()","6b0545ec":"# MU stands for million units. In India 1 unit of energy is a kilowatt-hour, so 1 MU == 1 gigawatt-hour\nfile_data","f785c8eb":"# Date column spanning Sept 2017 to March 2020. We're going to need the datetime library ;)\nfile_data['Date'].unique()","42ebba4d":"state_region.plot.bar(y = \"National Share (%)\", x = \"State \/ Union territory (UT)\", figsize = (15, 6));","c2077d94":"# grab a GeoJSON of Indian states\n#!curl -O https:\/\/github.com\/Subhash9325\/GeoJson-Data-of-Indian-States\/blob\/master\/Indian_States","c5dea4c9":"# !curl -O https:\/\/www.kaggle.com\/sauravmishra1710\/indian-state-geojson-data\/version\/2?select=india_state_geo.json","0445de9e":"# state_region.columns","1039077e":"from urllib.request import urlopen\nimport json\n\nwith urlopen('https:\/\/raw.githubusercontent.com\/Subhash9325\/GeoJson-Data-of-Indian-States\/master\/Indian_States') as response:\n    counties = json.load(response)","8faf489d":"# we need to change the name Odissa to Orissa, to match the GeoJSON\nstate_region.replace('Odisha', 'Orissa', inplace = True)","500d356c":"# because there isn't an id column in the GeoJSON, we need to specify the properties.NAME_1 and make a copy of the State \/ Union.. column under the same name in our df\nimport pandas as pd\ndf = state_region\ndf['NAME_1'] = df['State \/ Union territory (UT)']\nimport plotly.express as px\n\nfig = px.choropleth_mapbox(df, geojson=counties, locations='State \/ Union territory (UT)', featureidkey=\"properties.NAME_1\", color='National Share (%)',\n                           color_continuous_scale=\"Viridis\",\n                           range_color=(0, max(df['National Share (%)'])),\n                           mapbox_style=\"carto-positron\",\n                           zoom=3, center = {\"lat\": 22.5934 , \"lon\": 77.2223},\n                           opacity=0.5,\n                           labels={'state':'State \/ Union territory (UT)'}\n                          )\nfig.update_layout(margin={\"r\":0,\"t\":0,\"l\":0,\"b\":0})\nfig.show()","db3446b1":"file_data.head()","4ca4181d":"# convert the thermal generation columns to valid numeric columns\nfile_data = file_data.replace(',','', regex=True)","5207fb5d":"file_data['Thermal Generation Actual (in MU)'] = file_data['Thermal Generation Actual (in MU)'].astype('float64')\nfile_data['Thermal Generation Estimated (in MU)'] = file_data['Thermal Generation Estimated (in MU)'].astype('float64')","ee2e0c97":"# fairly strong seasonality in the data already visible\nfile_data.plot(alpha = 0.4);","43bf7574":"file_data['Date'] = pd.to_datetime(file_data['Date'], format = '%Y\/%m\/%d')\nfile_data.index = file_data['Date']","b46a156a":"file_data.dtypes","c380bb8b":"# lets format the date column properly\nax = file_data.iloc[:,1::].plot(subplots=True, layout=(6,1), figsize = (15, 10));","f24f6560":"cols = ['Thermal Generation Actual (in MU)',\n       'Thermal Generation Estimated (in MU)',\n       'Nuclear Generation Actual (in MU)',\n       'Nuclear Generation Estimated (in MU)',\n       'Hydro Generation Actual (in MU)',\n       'Hydro Generation Estimated (in MU)']","87246743":"# pd.pivot_table(file_data,index=file_data.index, columns='Region', values=cols)","43190e5f":"# pd.pivot_table(file_data,index=file_data.index, columns='Region', values=cols).plot(subplots=True, layout = (6, 5), figsize = (25, 15), legend = True);","02ab8e51":"import matplotlib.pyplot as plt\ng = file_data.groupby('Region')\n\nfig, axes = plt.subplots(g.ngroups, sharex=True, figsize=(10, 10))\n\nfor i, (region, d) in enumerate(g):\n    ax = d.plot.line(x='Date', y=cols, ax=axes[i], title=region)\n    if i == 0:\n        box = ax.get_position()\n        ax.set_position([box.x0, box.y0, box.width * 0.8, box.height])\n        #ax.legend(loc = 'best')\n        ax.legend(loc='center left', bbox_to_anchor=(1, 0.5))\n        fig.tight_layout()\n    else:\n        ax.legend().remove()","600afbee":"NE_data = file_data.loc[file_data['Region'] == 'NorthEastern']","5d42c820":"cols = ['Thermal Generation Actual (in MU)',\n       'Thermal Generation Estimated (in MU)',\n       'Hydro Generation Actual (in MU)',\n       'Hydro Generation Estimated (in MU)']","b7f5c7e1":"# ACF plot - aka correlogram - correlation of the time series with a lagged copy of itself reveals trend and seasonality\nimport statsmodels.api as sm\nfig, axes = plt.subplots(len(cols), sharex=False, figsize=(15, 15))\nfor i, j in enumerate(cols):\n    ax = sm.graphics.tsa.plot_acf(NE_data[j].values.squeeze(), lags=40, ax = axes[i], title=j)","6b621cda":"# Augmented Dickey Fuller (ADF) test. https:\/\/en.wikipedia.org\/wiki\/Augmented_Dickey%E2%80%93Fuller_test\nfrom statsmodels.tsa.stattools import adfuller\ndef adf_test(timeseries, name):\n    print ('Results of Dickey-Fuller Test:{}'.format(name))\n    dftest = adfuller(timeseries, autolag='AIC')\n    dfoutput = pd.Series(dftest[0:4], index=['Test Statistic','p-value','#Lags Used','Number of Observations Used'])\n    for key,value in dftest[4].items():\n       dfoutput['Critical Value (%s)'%key] = value\n    print (dfoutput)","cda42ce7":"for i in NE_data[cols]:\n    adf_test(NE_data[i], i)","ae9fddf3":"#  Kwiatkowski\u2013Phillips\u2013Schmidt\u2013Shin (KPSS) tests. https:\/\/en.wikipedia.org\/wiki\/KPSS_test  'c\u2019 : The data is stationary around a constant (default).\nfrom statsmodels.tsa.stattools import kpss\ndef kpss_test(timeseries, name):\n    print ('Results of KPSS Test:{}'.format(name))\n    kpsstest = kpss(timeseries, regression='c', nlags=None)\n    kpss_output = pd.Series(kpsstest[0:3], index=['Test Statistic','p-value','Lags Used'])\n    for key,value in kpsstest[3].items():\n        kpss_output['Critical Value (%s)'%key] = value\n    print (kpss_output)","4d472cdb":"for i in NE_data[cols]:\n    kpss_test(NE_data[i], i)","e5525fe3":"#  Kwiatkowski\u2013Phillips\u2013Schmidt\u2013Shin (KPSS) tests. https:\/\/en.wikipedia.org\/wiki\/KPSS_test  \u2018ct\u2019 : The data is stationary around a trend.\nfrom statsmodels.tsa.stattools import kpss\ndef kpss_test(timeseries, name):\n    print ('Results of KPSS Test:{}'.format(name))\n    kpsstest = kpss(timeseries, regression='ct', nlags=None)\n    kpss_output = pd.Series(kpsstest[0:3], index=['Test Statistic','p-value','Lags Used'])\n    for key,value in kpsstest[3].items():\n        kpss_output['Critical Value (%s)'%key] = value\n    print (kpss_output)","c71570cf":"for i in NE_data[cols]:\n    kpss_test(NE_data[i], i)","7cc88334":"!pip install -q fbprophet","07a8ef20":"df1 = pd.DataFrame(data = NE_data.iloc[:,2], index = NE_data.index)\ndf1.reset_index(level=0, inplace=True)\ndf1.rename(columns= {'Date':'ds', 'Thermal Generation Actual (in MU)': 'y'}, inplace = True)","00d4f587":"from fbprophet import Prophet\nm = Prophet()\nm.fit(df1)\nfuture = m.make_future_dataframe(periods=365*3)\nforecast = m.predict(future)","3f187c71":"fig2 = m.plot_components(forecast)","dbc49aba":"from fbprophet.plot import plot_plotly\nimport plotly.offline as py\npy.init_notebook_mode()\n\nfig = plot_plotly(m, forecast)  # This returns a plotly Figure\npy.iplot(fig)","d52e3910":"df2 = pd.DataFrame(data = NE_data.iloc[:,6], index = NE_data.index)\ndf2.reset_index(level=0, inplace=True)\ndf2.rename(columns= {'Date':'ds', 'Hydro Generation Actual (in MU)': 'y'}, inplace = True)","eedf900f":"m = Prophet()\nm.fit(df2)\nfuture = m.make_future_dataframe(periods=365*3)\nforecast = m.predict(future)","81448d93":"fig2 = m.plot_components(forecast)","c9fb3569":"py.init_notebook_mode()\n\nfig = plot_plotly(m, forecast)  # This returns a plotly Figure\npy.iplot(fig)","1f821250":"# Time series forecasting in Facebook Prophet - Bayesian curve fitting (generalised additive model)\n- Prophet is like a bundle of classical time series forecasting methods (ARIMA, Holt-Winters), using a Bayesian generalised additive model, wrapped up in an easy to use API, which works best with daily data demonstrating seasonality. The model works like this:\n\n#### y = trend * (daily_seasonality + weekly_seasonality)\n\n- Because we have daily data with seasonality Prophet should work quite well for forecasting.\n\n\n- LSTMs are also appealing modern methods of time series forecasting but are less effective at modelling the seasonality we have in our data here. Both Prophet and LSTMs have the attractive feature of not requiring user defined input parameters in order to get a meaningful forecast, where as ARIMA and Holt-Winters require the setting of parameters defining the seasonality and auto regressive properties of the input data. Some genius even combined LSTMs (good at out of context immediate trend prediction) and Prophet (good at modelling seasonal data), so maybe you can get the best of both worlds https:\/\/ieeexplore.ieee.org\/document\/8986377","21e50be5":"### Looking at the map of % energy production in India at a state level we can conclude:\n- Our top three producing states Rajasthan, Madhya Pradesh and Maharashtra, are each adjacent to each other\n- I wonder if these are the areas of India with the greatest urban populations and\/or economic\/industrial activity? Maybe these areas just produce more energy because they have more thermal, hydroelectric or nuclear power plants? We could answer these questions with population, per capita productivity overlays\n","d5260750":"## Trend, Seasonality and Stationarity - North Eastern Region\n- lets quantify the trend and seasonality in the data with an autocorrelation function (ACF) plot","50e790d4":"### KPSS assuming stationarity around a trend test results:\n- Thermal generation estimated exceeds the critical value for 1%, at p = 0.01, therefore they are non-stationary time series and trending upward\n- The Hydro values exceed the 5% critical values, therefore they may be non-stationary trending time series","e0ce26c2":"# Conclusions\n\n- Clearly Hydroelectric energy production is highly seasonal and are exploited more readily where you have mountains to create the necessary gradients and collect water\n\n- Thermal production may be reduced as hydroelectric production increases\n\n- The states with the most energy production in India, are generating it by Thermal means\n\n- Nuclear energy is not widely exploited in India compared to Thermal and Hydroelectric energy production","a110d5cb":"### So Rajasthan produces the largest percentage of Indias total energy. Let see where all these places are on the map and color them by % of total energy production","c6c4faaa":"# Time Series Analysis","1cdceadb":"# Questions to ponder\n\n- I would like to generate an overlay of population and energy production and economic activity (per capita productivity\/income) and energy production on the chloropleth map. Is energy being generated where there are more people and economic activity?\n\n- In terms of forecasting, what are the factors determining future energy production requirements? Economic growth (you need capital investment to increase energy production capacity), population growth (more people need more electrical energy to live a modern lifestyle) and climate change (as rainfall patterns change hydroelectric output varies and the government attitude to Thermal power generation from burning hydrocarbons may also shift)","027e3cfa":"- Taking a look at the forecast for the 'Hydro Generation Actual' data, we can see that Hydroelectric energy production is expected to trend down over the next three years\n- Again Fridays show the least Thermal energy generation on a weekly scale and January through April shows little production with a substantial increase in production through the summer months peaking in September. This yearly seasonality is expected to recur in the coming years\n\n\n### Forecasting conclusions:\n1. It looks like as the Hydroelectric power generation increases through the summer, thermal power generation is reduced, likely coinciding with the seasonal melting of snow and\/or monsoon season in the foothills of the Himalayas \n2. My common sense tells me that as economic and population growth continues, energy production in NE India will have to increase to match, by increasing energy production capacity. I think if more training data were available the forecasts might indicate more of a trend towards increased thermal production capacity and depending on temperature\/precipitation\/capacity changes over time, the hydroelectric output forecast would also be affected","f3cdfdd3":"- Taking a look at the forecast for the 'Thermal Generation Actual' data, we can see that Thermal energy production is expect to remain constant over the next three years but looking at the confidence interval, is more likely to increase than decrease\n- Fridays show the least Thermal energy generation on a weekly scale and August is the month with the lowest Thermal energy output, which is expect to recur in the coming years","f8c49586":"# Exploring the percentages of total energy produced by each state","0cdf08d7":"# Geospatial Analysis","7c75e1e7":"### KPSS assuming stationarity around a constant test results:\n- Thermal generation actual and estimated exceed the critical value for 1%, at p = 0.01, therefore they are non-stationary time series\n- The Hydro values do not exceed any of the critical values, therefore they are stationary time series","b68b8331":"### ADF test conclusions:\n1. Thermal estimated is more negative than the 1% critical value with p = 0.000005, so it is definitely trending and non-stationary\n2. The other time series are not significantly or trending and non-stationary","29f3947e":"# Task\n\n- No task is provided so I'll just approach this as an exercise in data exploration\n- I should start by visualising the distribution of different energy sources in India by region\n- The time series of energy production in different places is also interesting, is there any seasonality to the data which might allow us to forecast likely demand?\n","8715973a":"- In these region by region time series, the seasonality seems most pronounced in the hydro power generation. Hydro energy is rainfall dependent and probably gives a greater output in the monsoons and the Northern and NE regions of India,because this is where the foothills of the Himalayas are located\n- At its' peak, Hydro generation in NE India is comparable to that produced Thermally\n- Nuclear and thermal energy also appears to have some seasonality, though this is less pronounced\n- We can now see that Western India produces the most energy by thermal means, followed by the northern and southern regions\n- There is no nuclear energy produced in Eastern or North Eastern India\n- Clearly nuclear energy represents a tiny fraction of Indian energy production","8695b408":"- Stationarity (where the mean and variance are constant in time) - stationarity tests for the presence of a unit root","d3e82707":"- From the plot above we can see definite seasonality in the data:\n 1.  Hydro peaks in the summer months until October and drops over the winter\n 2.  Nuclear seems to pick up the slack in the winter\n- Thermal generation seems to be fairly consistent in time and also produces far more MU of energy than the others, in the region of 1000 MU compare to 200\/400 MU for hydro and nuclear. Thermal represents the hydrocarbon (coal\/natural gas) fire power stations that make up the backbone of the energy grid\n\n- Do these patterns hold if we now use the \"Region\" column to get a regional breakdown of the time series for each energy source"}}