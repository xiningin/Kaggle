{"cell_type":{"ebdb6cc3":"code","a198f055":"code","80eca433":"code","91b2e74b":"code","36a13d67":"code","897fb348":"code","2c994fd0":"code","1178cd9b":"code","adc2a617":"code","f2f60cad":"code","89358486":"code","3feca9fd":"code","b0f94c11":"code","16c326b2":"code","0f8a3e3e":"code","b84360c9":"code","36c33b9d":"code","fd201598":"code","b56966b6":"markdown"},"source":{"ebdb6cc3":"%pylab inline\nimport matplotlib.pyplot as plt\nimport matplotlib.image as mpimg\n\nimport numpy as np\nimport pandas as pd","a198f055":"df_train = pd.read_csv('\/kaggle\/input\/i2a2-brasil-pneumonia-classification\/train.csv')\ndf_train.head()","80eca433":"positive = df_train.query('pneumonia == 1')\nprint(len(positive))\n\nnegative = df_train.query('pneumonia == 0')\nprint(len(negative))","91b2e74b":"def show_images(df):\n    for filename in df['fileName']:\n      image = mpimg.imread(f\"\/kaggle\/input\/i2a2-brasil-pneumonia-classification\/images\/{filename}\")\n      imgplot = plt.imshow(image)\n      plt.show()","36a13d67":"df = positive.head()\nshow_images(df)","897fb348":"df = negative.head()\nshow_images(df)","2c994fd0":"df_test = pd.read_csv('\/kaggle\/input\/i2a2-brasil-pneumonia-classification\/test.csv')\ndf_test.head()","1178cd9b":"import numpy as np\nimport os\nimport random\nimport tensorflow as tf\n\nfrom tensorflow.keras.preprocessing.image import ImageDataGenerator\nfrom tensorflow.keras.applications.inception_resnet_v2 import InceptionResNetV2, preprocess_input\n\nfrom keras.callbacks import EarlyStopping, ModelCheckpoint   \nfrom keras.layers import Conv2D, Dense, Dropout, GlobalMaxPooling2D, MaxPooling2D\nfrom keras.models import Model, Sequential\nfrom keras.preprocessing.image import img_to_array, load_img\nfrom keras.utils import np_utils\n\nfrom sklearn.model_selection import train_test_split","adc2a617":"MODEL_PATH = 'model.pneumonia.weights.best.hdf5'","f2f60cad":"def init_model():\n    if not os.path.isfile(MODEL_PATH):\n        model = train()\n        print('New train!')\n    else:\n        model = create_model()\n        model.load_weights(MODEL_PATH)\n        print('Using network trained!')\n\n    return model","89358486":"def prepare_dataset(df):\n    images = [preprocess_images(f\"\/kaggle\/input\/i2a2-brasil-pneumonia-classification\/images\/{filename}\") for filename in df['fileName']]\n    images = np.array(images, dtype=np.float32)\n\n    outputs = None\n    if 'pneumonia' in df.columns:\n        outputs = df['pneumonia']\n    \n    return images, outputs\n\ndef preprocess_images(filename):\n    image = load_img(filename, target_size=(224, 224))\n    image = img_to_array(image)\n    image = image.reshape((image.shape[0], image.shape[1], image.shape[2]))\n    return preprocess_input(image) ","3feca9fd":"def create_model():\n    base_model = InceptionResNetV2(weights=\"imagenet\",\n                          classes=2,\n                          classifier_activation=\"softmax\",\n                          include_top=False, \n                          input_shape= (224, 224, 3))\n\n    x = GlobalMaxPooling2D()(base_model.output)\n    x = Dense(16, activation = 'relu')(x)\n    x = Dense(1, activation = 'sigmoid')(x)\n\n    model = Model(base_model.input, x)\n    model.summary()\n    \n    return model","b0f94c11":"def train():\n    df_train = pd.read_csv('\/kaggle\/input\/i2a2-brasil-pneumonia-classification\/train.csv')\n    images, outputs = prepare_dataset(df_train)\n    \n    # divindo dataset de treinamento em treinamento, teste e valida\u00e7\u00e3o\n    x_train, x_test, y_train, y_test = train_test_split(images, outputs, test_size = 0.2, stratify = outputs)\n    x_train, x_valid, y_train, y_valid = train_test_split(x_train, y_train, test_size = 0.2, stratify = y_train)\n\n    # normaliza\u00e7\u00e3o\n    x_train = x_train.astype('float32')\/255\n    x_valid = x_valid.astype('float32')\/255\n    x_test = x_test.astype('float32')\/255\n\n    model = create_model()\n    model.compile(optimizer='adam', \n                  loss=tf.keras.losses.BinaryCrossentropy(), \n                  metrics=['accuracy'])\n    \n    checkpointer = [ModelCheckpoint(filepath=MODEL_PATH, save_best_only=True),\n                    EarlyStopping(patience= 15)]\n    \n    aug = ImageDataGenerator(\n            rotation_range=20,\n            zoom_range=0.15,\n            width_shift_range=0.2,\n            height_shift_range=0.2,\n            shear_range=0.15,\n            horizontal_flip=True,\n            fill_mode=\"nearest\")\n    \n    class_weight = {\n        0: 1.37044467,\n        1: 3.69945848\n    }\n        \n    hist = model.fit(\n       x=aug.flow(x_train, y_train, batch_size=64),\n       epochs=50,\n       validation_data=(x_valid, y_valid),\n       class_weight = class_weight,\n       callbacks=checkpointer)\n\n    # carregando os pesos que geraram a melhor precis\u00e3o de valida\u00e7\u00e3o\n    model.load_weights(MODEL_PATH)\n\n    # avaliar e imprimir a precis\u00e3o do teste\n    score = model.evaluate(x_test, y_test)\n    print('\\n', 'Test accuracy:', score[1])\n    \n    return model","16c326b2":"train()","0f8a3e3e":"def predict_value(value):\n    if value > 0.5:\n        return 1\n    return 0\n    \ndef execute_prediction(df):\n    X, _ = prepare_dataset(df)\n\n    X = X.astype('float32')\/255\n    model = init_model()\n\n    predictions = model.predict(X)\n    predictions = [predict_value(pred) for pred in predictions]\n    \n    filenames = df['fileName']\n    return pd.DataFrame({ \"fileName\": filenames, \"pneumonia\": predictions })","b84360c9":"df_test = pd.read_csv('\/kaggle\/input\/i2a2-brasil-pneumonia-classification\/test.csv')\nresult_test = execute_prediction(df_test)\nresult_test.head(10)","36c33b9d":"df_submission = pd.read_csv('\/kaggle\/input\/i2a2-brasil-pneumonia-classification\/sample_submission.csv')\nresult_submission = execute_prediction(df_submission)\nresult_submission.head(10)","fd201598":"result_submission.to_csv(\"results.csv\",index=False)","b56966b6":"## Neural network"}}