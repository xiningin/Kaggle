{"cell_type":{"8888b2e2":"code","c0ee416e":"code","745fccdf":"code","d2dbdec5":"code","6bcef7d4":"code","19998b76":"code","ed8785ce":"code","0d951ca2":"code","22902a29":"code","5c3efc86":"code","513694e1":"code","55a691e8":"code","d9988ac3":"code","1d6bba8b":"code","1617a7ce":"code","9f431d8a":"markdown","55f13fda":"markdown","ba7dfac6":"markdown","64c3fd8b":"markdown","905e960e":"markdown","d4bcb2e8":"markdown"},"source":{"8888b2e2":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","c0ee416e":"#Importing Libraries\nimport pandas as pd\nimport numpy as np\nfrom sklearn.neural_network import MLPClassifier\nfrom sklearn.neural_network import MLPRegressor\nfrom sklearn.model_selection import train_test_split\nimport calendar\nfrom datetime import datetime\nimport matplotlib.pyplot as plt\nfrom sklearn.naive_bayes import BernoulliNB\nfrom sklearn import tree\n#%%\n#Loading in datasets\ndf_games = pd.read_csv('\/kaggle\/input\/nfl-big-data-bowl-2022\/games.csv')\n#Teams playing in each game\ndf_PFF = pd.read_csv('\/kaggle\/input\/nfl-big-data-bowl-2022\/PFFScoutingData.csv')\n#Play level scouting\ndf_players = pd.read_csv('\/kaggle\/input\/nfl-big-data-bowl-2022\/players.csv')\n#Player info\n#height has some players listed in inches i think\ndf_plays = pd.read_csv('\/kaggle\/input\/nfl-big-data-bowl-2022\/plays.csv')\n#Play level info each game","745fccdf":"df_games.head(5) #Just making sure everything was read in properly.","d2dbdec5":"#%%\n#This gets day of week\ndf_games['dayOfWeek'] = np.nan\nfor index, i in enumerate(df_games['gameDate']):\n    df_games['dayOfWeek'][index] = (datetime.strptime(df_games['gameDate'][index], '%m\/%d\/%Y').date().strftime('%A'))\n\ngameday = dict(zip(df_games.gameId, df_games.dayOfWeek))","6bcef7d4":"df_games.head(5)","19998b76":"#%%\n#This cell is to determine whether we can predict whether onside kicks will work\nonside_plays = df_plays[df_plays['playDescription'].str.contains('onside')]\nonside_PFF = df_PFF.loc[(df_PFF['kickType'] == 'O') | (df_PFF['kickType'] == 'S')]\nonside = pd.merge(onside_plays, onside_PFF, on ='gameId')\n\nonside.drop_duplicates(subset=['playId_x'], inplace =True)\nonside['Success'] = np.nan\nonside = onside.reset_index()\n\nfor index, i in enumerate(onside['specialTeamsResult']):\n    if onside['specialTeamsResult'][index] == 'Kickoff Team Recovery':\n        onside['Success'][index] = 1\n    else: \n        onside['Success'][index] = 0\n\nonside.groupby('Success')['index'].count()\n\nprint ('Onside kicks have a' , (onside.groupby('Success')['index'].count()[1]\/onside.groupby('Success')['index'].count()[0]).round(4), \n       'percent success rate.')\n\nclf = MLPRegressor(activation = 'logistic' , solver='sgd', alpha=0.3, hidden_layer_sizes=(50, 50, 50, 50, 50),\n                    random_state=42, shuffle = False)\n\ny = onside['Success']\nX = onside[['quarter', 'preSnapVisitorScore', 'preSnapHomeScore', 'kickLength', 'kickType', 'kickDirectionActual', 'kickoffReturnFormation']]\nX = pd.get_dummies(X, columns = ['quarter', 'kickType', 'kickDirectionActual', 'kickoffReturnFormation'])\n\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.5)\n\nclf.fit(X_train, y_train)\n\nresults = clf.predict(X_test)\n'''\nNothing looks to be a good indicator of successful onside kicks by current metrics\n'''","ed8785ce":"results","0d951ca2":"#%%\n\npunt_plays = df_plays[df_plays['playDescription'].str.contains('punt')]\npunt_PFF = df_PFF.loc[(df_PFF['kickType'] == 'A') | (df_PFF['kickType'] == 'R') | (df_PFF['kickType'] == 'N')]\npunt = pd.merge(punt_plays, punt_PFF, on ='gameId')\npunt.drop_duplicates(subset=['playId_x'], inplace =True)\n\ntemp = punt.stack().map(gameday).unstack()\npunt['dayOfWeek'] = np.nan\npunt['dayOfWeek'] = temp['gameId']\n\n#No significant difference in punt length based on day of week. Though, on short rest (TNF), they kick the furthest\n#And on more rest (MNF), they kick the shortest. Probably coincidense \nk = punt.groupby('dayOfWeek')['kickLength'].mean().reset_index()\n\n#Need to do this for fitting\npunt.dropna(subset=['hangTime'], inplace = True)\npunt.dropna(subset=['kickLength'], inplace = True)\n\n\n#Algorithm for predicting punt length\ny = punt['kickLength']\nX = punt[['snapDetail', 'snapTime', 'hangTime', 'kickType', 'kickDirectionActual']]\n\nX = pd.get_dummies(X, columns = ['snapDetail', 'kickType', 'kickDirectionActual'])\n\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2)\n\nclf = MLPRegressor(activation = 'logistic' , solver='sgd', alpha=0.5, hidden_layer_sizes=(10,10,10),\n                    random_state=42, shuffle = False)\n\nclf.fit(X_train, y_train)\n\ntemp = clf.predict(X_test)\n'''\nThis does not lead to anything. Everything comes out to ~45 yards punt\n'''","22902a29":"temp[0:101]","5c3efc86":"#%%\n#Checking hangtime affect. Does hangtime affect how the returner handles the ball\nn = punt.groupby('kickContactType')['hangTime'].mean().reset_index()\n'''\nNothing here\n'''","513694e1":"n.sort_values(by='hangTime', ascending = False)","55a691e8":"#%%\n#Ranking punters lengths\nn =  (punt.groupby('kickerId')['kickLength'].count().reset_index())\nm =  (punt.groupby('kickerId')['kickLength'].mean().reset_index())\nn = pd.merge(n, m, on ='kickerId')\n\nid_name = dict(zip(df_players.nflId, df_players.displayName))\n\ntemp = n.stack().map(id_name).unstack()\nn['kickerId'] = temp['kickerId']\nn.rename(columns = {'kickerId': 'Kicker', 'kickLength_x': 'Number of Punts', 'kickLength_y': 'Average Punt Length'}, inplace = True)\n\n#Getting sample size\nn = n.loc[n['Number of Punts'] >= 30].sort_values(by = ['Average Punt Length'], ascending = False)\n\n#Final Punt Leaderboard\nprint (n[['Kicker', 'Number of Punts', 'Average Punt Length']])\n'''\nTress way and Andy Lee have the longest punt average with a very large sample size.\n'''","d9988ac3":"#%%\n#Creating my own kicking metric. Composite Kicker Score (CKS)\n#Kickers gain score by completing kicks and lose score from missing kicks.\n#If a kick is made, the score increases based on the distance kicked.\n#For example, making 3 kicks at 25, 35, and 50 yards would result in a score of 110\n#If a kick is missed, the kicker is penalized the closer they are to the goal.\n#The formula to calculate lost points is: Pts lost = -67 + kick length\n#-67 accounts for the longest kick in NFL History (Justin Tucker) being 66 yards.\n#Missing anything above that wouldnt be deserving of a penalty.\nkick_plays = df_plays.loc[(df_plays['specialTeamsPlayType'] == 'Extra Point') | (df_plays['specialTeamsPlayType'] == 'Field Goal')]\n#Yardline number will break if a 69 yarder is attempted.\n#This dataset should have kick distance as a metric. kickLength only accounts for made kicks\nkick_plays = kick_plays[['specialTeamsPlayType', 'specialTeamsResult', 'kickerId' ,'yardlineNumber']]\nkick_plays = kick_plays.loc[(kick_plays['specialTeamsResult'] == 'Kick Attempt Good') | (kick_plays['specialTeamsResult'] == 'Kick Attempt No Good')]\nkick_plays.replace('Kick Attempt Good', 0, inplace = True)\nkick_plays.replace('Kick Attempt No Good', -67, inplace = True)\n\nkick_plays['yardlineNumber'] = kick_plays['yardlineNumber'] + 18\n\nkick_plays['Points Gained or Lost'] = kick_plays['specialTeamsResult'] + kick_plays['yardlineNumber']\n\nid_name = dict(zip(df_players.nflId, df_players.displayName))\n\ntemp = kick_plays.stack().map(id_name).unstack()\nkick_plays['Kicker Name'] = temp['kickerId']\n\nscoreboard = kick_plays.groupby('Kicker Name')['Points Gained or Lost'].sum().reset_index()\n\nscoreboard.sort_values(by = ['Points Gained or Lost'], ascending = False)\n\n'''\nNames that you would expect to be at the top of a leaderboard like this are there.\nI believe that this is a stat that the NFL could use on screen to show who the\nmost prolific kickers in the league are.\n\nOn a yearly basis, fans could take interest and root for their teams kicker \nto be at the top of the leaderboard. At the end of the year, the NFL could even\nacknowledge the highest score with an award (similar to an NBA scoring leader).\n'''","1d6bba8b":"scoreboard.sort_values(by = ['Points Gained or Lost'], ascending = False)\n","1617a7ce":"my_submission = pd.DataFrame(scoreboard)\nmy_submission.to_csv('submission.csv', index=False)","9f431d8a":"**Nothing looks to be a good indicator of successful onside kicks by current metrics**","55f13fda":"**Names that you would expect to be at the top of a leaderboard like this are there.\nI believe that this is a stat that the NFL could use on screen to show who the\nmost prolific kickers in the league are.**\n\n**On a yearly basis, fans could take interest and root for their teams kicker \nto be at the top of the leaderboard. At the end of the year, the NFL could even\nacknowledge the highest score with an award (similar to an NBA scoring leader).**","ba7dfac6":"**This does not lead to anything. Everything comes out to ~45 yards punt**","64c3fd8b":"**Tress way and Andy Lee have the longest punt average with a very large sample size**","905e960e":"**Nothing here**","d4bcb2e8":"This is a notebook that explores a few NFL Special Teams topics that could give an advantage to an informed team.\n\nThe topics I researched are as follows:\n1. Improving onside kick recovery rate\n1. Predicting the length of a punt \n     * as well as whether day of week has an impact on punt length\n3. Checking the affect of hangtime on how a returner fields a punt (Ideally to see whether we can make the returner muff more often)\n4. Ranking the longest punters in the league\n\nAside from trying to improve special team performance, I also created my own metric of Composite Kicking Score (The name could use work). It is a scoreboard that the NFL can use to rank the most accurate long range kickers, possibly for a season long competition\/award."}}