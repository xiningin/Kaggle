{"cell_type":{"965d7cc7":"code","7fb813d0":"code","63d0676d":"code","4c8cd9cc":"code","b50d02d1":"code","1c3f6c0d":"code","c8ce1b4b":"code","a63cdfbb":"code","d12152bf":"code","8f62b938":"code","5c8c2e4b":"code","6b301624":"code","67de293f":"code","15fddcc2":"code","baea986f":"code","8362ec80":"code","c5cae2ee":"code","af8aec9a":"code","f911b80e":"code","a372aca9":"code","d87002db":"code","29604bf1":"code","e4fcbdbe":"code","d7d4465a":"code","00deaa95":"code","1ddfe6b3":"code","8d2dfce6":"code","546c323e":"code","6c8b37fc":"code","dd1227d6":"code","3f5d7425":"code","dddf0e3d":"code","b77b7fe6":"code","0c2c8145":"code","c6747926":"code","116a6fe5":"code","4836dcd1":"code","4fb5a479":"markdown","11f1b18a":"markdown","6e476628":"markdown","9bd34cee":"markdown"},"source":{"965d7cc7":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","7fb813d0":"df=pd.read_csv('\/kaggle\/input\/telecom-users-dataset\/telecom_users.csv')","63d0676d":"df","4c8cd9cc":"df=df.drop(['customerID'],axis=1)","b50d02d1":"df.gender=df.gender.apply(lambda x: 1 if x==\"Male\" else 0)","1c3f6c0d":"df.Partner=df.Partner.apply(lambda x: 1 if x==\"Yes\" else 0)","c8ce1b4b":"df.Dependents=df.Dependents.apply(lambda x: 1 if x==\"Yes\" else 0)","a63cdfbb":"df.PhoneService=df.PhoneService.apply(lambda x: 1 if x==\"Yes\" else 0)","d12152bf":"df.columns","8f62b938":"df[['MultipleLines','InternetService','OnlineSecurity','OnlineBackup','DeviceProtection','TechSupport','StreamingTV','StreamingMovies','Contract','PaperlessBilling']]","5c8c2e4b":"gn=pd.get_dummies(df[['MultipleLines','InternetService','OnlineSecurity','OnlineBackup','DeviceProtection','TechSupport','StreamingTV','StreamingMovies','Contract','PaperlessBilling','PaymentMethod']])","6b301624":"df.drop(['PaymentMethod','MultipleLines','InternetService','OnlineSecurity','OnlineBackup','DeviceProtection','TechSupport','StreamingTV','StreamingMovies','Contract','PaperlessBilling'],axis=1)","67de293f":"gn","15fddcc2":"df_fnl=df.drop(['MultipleLines','InternetService','OnlineSecurity','OnlineBackup','DeviceProtection','TechSupport','StreamingTV','StreamingMovies','Contract','PaperlessBilling','PaymentMethod'],axis=1)","baea986f":"df_fnl=pd.concat([df_fnl,gn],axis=1)","8362ec80":"df_fnl.Churn=df_fnl.Churn.apply(lambda x: 1 if x==\"Yes\" else 0)","c5cae2ee":"df_fnl","af8aec9a":"df_fnl.columns","f911b80e":"df.Churn=df.Churn.apply(lambda x: 1 if x==\"Yes\" else 0)","a372aca9":"df[['Unnamed: 0','tenure', 'MonthlyCharges', 'TotalCharges', 'Churn']]","d87002db":"import seaborn as sns\nimport matplotlib.pyplot as plt","29604bf1":"plt.figure(figsize = (30,30))\nsns.heatmap(df_fnl.corr(),annot=True)\nplt.show()","e4fcbdbe":"df_fnl.drop(['MultipleLines_No'],axis=1,inplace=True)","d7d4465a":"from sklearn.ensemble import RandomForestClassifier\nfrom sklearn.model_selection import GridSearchCV\nfrom sklearn.metrics import accuracy_score\nfrom sklearn.model_selection import train_test_split\nimport re","00deaa95":"rf=RandomForestClassifier(random_state=42)","1ddfe6b3":"param_grid = { \n    'n_estimators': [100,200,300,400,500],\n    'max_depth' : [4,5,6,7,8],\n    'criterion' :['gini', 'entropy']\n}","8d2dfce6":"Y=df_fnl.pop('Churn')\nX=df_fnl","546c323e":"X[X.TotalCharges.str.isalpha()]","6c8b37fc":"def strip_character(dataCol):\n    r = re.compile(r'[^a-zA-Z !@#$%&*_+-=|\\:\";<>,.\/()[\\]{}\\']')\n    return r.sub('', dataCol)","dd1227d6":"## X.TotalCharges.apply(strip_character)\n#X[X.TotalCharges.str.contains(r'[@#&$%+-\/*]')].TotalCharges\n## X.TotalCharges.astype(float)\n\ncd=X.TotalCharges.apply(strip_character)\nX.TotalCharges=cd.apply(lambda x: float(x) if x!=\" \" else 0.0)\n","3f5d7425":"X_train,X_test,Y_train,Y_test=train_test_split(X,Y,test_size=0.3,random_state=42)","dddf0e3d":"CV_rfc = GridSearchCV(estimator=rf, param_grid=param_grid, cv= 5)\nCV_rfc.fit(X_train, Y_train)","b77b7fe6":"CV_rfc.best_params_","0c2c8145":"rfc1=RandomForestClassifier(random_state=42, n_estimators= 500, max_depth=8, criterion='entropy')","c6747926":"rfc1.fit(X_train,Y_train)","116a6fe5":"Y_pred=rfc1.predict(X_test)","4836dcd1":"print(\"Accuracy for Random Forest on CV data: \",accuracy_score(Y_test,Y_pred))","4fb5a479":"### Grid search cv","11f1b18a":"### Multiplelines_yes is strongly correlated with Multiplelines_No hence dropping Multiplelines_No","6e476628":"#### Building random forest model","9bd34cee":"#### CustomerID unique column ,can be dropped.\n"}}