{"cell_type":{"a2158407":"code","a2c2a6f8":"code","9a197662":"code","8b98f012":"code","aac1b752":"code","4f44e967":"code","25f7b477":"code","78199683":"code","8be5f5ed":"code","9775c59d":"code","97cca269":"code","beb5de2c":"code","b95662ea":"code","bb98f37b":"code","b004a8b4":"code","4d8c955b":"code","0c48b896":"code","35fbee21":"code","616b80dd":"code","b49b6335":"code","67b2dc22":"code","6db72e54":"markdown","9d4d4ba8":"markdown","d4198ac8":"markdown","52ebf165":"markdown","fb1d891d":"markdown","dbd87af3":"markdown","1e35590b":"markdown"},"source":{"a2158407":"! pip uninstall --y kaggle\n! pip install --upgrade pip\n! pip install kaggle==1.5.6\n\n! mkdir -p ~\/.kaggle\n!cp kaggle.json ~\/.kaggle\/\n! chmod 600 ~\/.kaggle\/kaggle.json\n!kaggle -v","a2c2a6f8":"import pandas as pd\nimport numpy as np\n\nimport torch\nimport torchvision.datasets as data\nimport torchvision.transforms as transforms\nimport random\n\nfrom sklearn import preprocessing","9a197662":"device = 'cuda' if torch.cuda.is_available() else 'cpu'\n\nrandom.seed(777)\ntorch.manual_seed(777)\nif device == 'cuda':\n  torch.cuda.manual_seed_all(777)","8b98f012":"learning_rate = 1e-4\ntraining_epoches = 700\nbatch_size = 50\nScaler = preprocessing.StandardScaler()","aac1b752":"# \uc800\ub294 \uc81c\uac00 \ub9cc\ub4e0 csv\ud30c\uc77c \ubc14\ub85c \ub123\uc5b4\uc11c \ud588\ub294\ub370, \uc5ec\ub7ec\ubd84\uc740 ! kaggle \ud574\uc11c \ub2e4\uc6b4\ub85c\ub4dc \ubc1b\uc544\uc11c \ud558\uc2dc\uba74 \ub429\ub2c8\ub2e4!\n# ! kaggle competitions download -c solarenergy-meteorologicalphenomenon2\n# ! unzip solarenergy-meteorologicalphenomenon2.zip","4f44e967":"train = pd.read_csv('Solar_TrainData_3.csv', header=None, skiprows=1, usecols=range(0,9))\ntrain = train.dropna()\ntrain","25f7b477":"test = pd.read_csv('Solar_TestData_2.csv', header = None, skiprows=1,usecols=range(0,8))\n\ntest","78199683":"x_train = train.loc[:,1:7]\ny_train = train.loc[:,8:8]\n\nx_train = np.array(x_train)\ny_train = np.array(y_train)\n\nx_train = torch.FloatTensor(x_train)\ny_train = torch.FloatTensor(y_train)","8be5f5ed":"train_dataset = torch.utils.data.TensorDataset(x_train, y_train)\ndata_loader = torch.utils.data.DataLoader(dataset = train_dataset,\n                                          batch_size = batch_size,\n                                          shuffle = True,\n                                          drop_last=True)","9775c59d":"linear1 = torch.nn.Linear(7,32, bias = True) # feature\nlinear2 = torch.nn.Linear(32,32, bias = True)\nlinear3 = torch.nn.Linear(32,32, bias = True)\nlinear4 = torch.nn.Linear(32,16, bias = True)\nlinear5 = torch.nn.Linear(16,16, bias = True)\nlinear6 = torch.nn.Linear(16,16, bias = True)\nlinear7 = torch.nn.Linear(16,8, bias = True)\nlinear8 = torch.nn.Linear(8,8, bias = True)\nlinear9 = torch.nn.Linear(8,8, bias = True)\nlinear10 = torch.nn.Linear(8,1, bias = True)\n# layer 5 -> 7- > 10","97cca269":"torch.nn.init.xavier_uniform_(linear1.weight)\ntorch.nn.init.xavier_uniform_(linear2.weight)\ntorch.nn.init.xavier_uniform_(linear3.weight)\ntorch.nn.init.xavier_uniform_(linear4.weight)\ntorch.nn.init.xavier_uniform_(linear5.weight)\ntorch.nn.init.xavier_uniform_(linear6.weight)\ntorch.nn.init.xavier_uniform_(linear7.weight)\ntorch.nn.init.xavier_uniform_(linear8.weight)\ntorch.nn.init.xavier_uniform_(linear9.weight)\ntorch.nn.init.xavier_uniform_(linear10.weight)","beb5de2c":"model = torch.nn.Sequential(linear1,\n                            linear2,\n                            linear3,\n                            linear4,\n                            linear5,\n                            linear6,\n                            linear7,\n                            linear8,\n                            linear9,\n                            linear10).to(device)","b95662ea":"loss = torch.nn.MSELoss().to(device)\noptimizer = torch.optim.Adam(model.parameters(), lr=learning_rate)","bb98f37b":"total_batch = len(data_loader)\n\nfor epoch in range(training_epoches):\n  avg_cost = 0\n\n  for X, Y in data_loader:\n\n    X = X.to(device)\n    Y = Y.to(device)\n\n    optimizer.zero_grad()\n    hypothesis = model(X)\n    cost = loss(hypothesis, Y)\n    cost.backward()\n    optimizer.step()\n\n    avg_cost += cost \/ total_batch\n  \n  print('Epoch:','%04d' % (epoch+1), 'cost=', '{:.9f}'.format(avg_cost))\nprint('Learning finshed')","b004a8b4":"with torch.no_grad():\n  x_test = test.loc[:,1:7]\n  x_test = np.array(x_test)\n\n  x_test = torch.from_numpy(x_test).float().to(device)\n\n  prediction = model(x_test)","4d8c955b":"correct_prediction = prediction.cpu().numpy().reshape(-1,1)","0c48b896":"MAKE = pd.read_csv('Solar_TestData_2.csv', header = None, skiprows= 1) ","35fbee21":"submit = pd.read_csv('Solar_SubmitForm_2.csv')\nsubmit","616b80dd":"for i in range(len(correct_prediction)):\n  submit['Predict'][i] = correct_prediction[i].item()\n\nsubmit['YYYY\/MM\/DD'] = MAKE[0]\nsubmit","b49b6335":"submit.to_csv('Baseline_By_NN.csv', mode='w', index = False)","67b2dc22":"# \uc81c\ucd9c : ) \n# ! kaggle co\u314bmpetitions submit -c solarenergy-meteorologicalphenomenon2 -f submission.csv -m \"Message\"","6db72e54":"## \ub370\uc774\ud130 \ub85c\ub4dc","9d4d4ba8":"## NN layer \uc313\uae30 \ubc0f \ubaa8\ub378 \ucd08\uae30\ud654","d4198ac8":"## \ubaa8\ub4c8 \uc784\ud3ec\ud2b8","52ebf165":"## \ud30c\ub77c\ubbf8\ud130 \uc124\uc815","fb1d891d":"## \uacf5\uaca9 \ucf54\ub4dc\uc640 \ub2ec\ub77c\uc9c4 \uc810\n- layer\uc758 \uc218\uc640 \uc740\ub2c9 \ub808\uc774\uc5b4\uc5d0\uc11c \ub4e4\uc5b4\uc624\uace0 \ub098\uac00\ub294 \uac12 \uc870\uc808\n- \uacf5\uaca9\uc790: 7\uac1c\uc758 layer, 7>1024->1\n- \ubc29\uc5b4: 10\uac1c\uc758 layer, 7->32->16->8->1","dbd87af3":"## \uce90\uae00 \uc5f0\uacb0","1e35590b":"## \ubaa8\ub378\ud559\uc2b5"}}