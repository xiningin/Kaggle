{"cell_type":{"731acf8f":"code","7df281ed":"code","4f32365b":"code","33a897cf":"code","11e73b6d":"code","ef8840cc":"code","e712aed6":"code","08da4895":"code","de527cf9":"code","993c1b9f":"code","f5f2aad4":"code","fab7116d":"code","6695a5b1":"code","be10613b":"code","edaea678":"code","056b151e":"code","39e4956f":"code","32ac8260":"code","864417aa":"code","8599b7c2":"code","f97a2c42":"code","27629bbb":"code","c0cbeede":"code","a3e45161":"code","ea7ef3f1":"code","f94f850c":"markdown","00f0d45d":"markdown","d27ab4ac":"markdown","0ea1d470":"markdown","3bdde6c1":"markdown","2dcee191":"markdown"},"source":{"731acf8f":"#Importing Libraries\nimport numpy as np \nimport pandas as pd\nimport seaborn as sns\nfrom matplotlib import pyplot as plt","7df281ed":"train_df = pd.read_csv(\"..\/input\/titanic\/train.csv\") \ntest_df = pd.read_csv(\"..\/input\/titanic\/test.csv\")","4f32365b":"train_df.head()","33a897cf":"train_df.tail()","11e73b6d":"test_df.head()","ef8840cc":"train_df.info()","e712aed6":"train_df.describe()","08da4895":"train_df.isnull().sum()","de527cf9":"train_df.columns.values","993c1b9f":"mean_age = train_df['Age'].mean()\nmode_embarked = train_df['Embarked'].mode()\ntrain_df['Age'].fillna(mean_age,axis = 0,inplace = True)\ntrain_df['Embarked'].fillna(mode_embarked[0],axis = 0, inplace = True)","f5f2aad4":"train_df.isnull().sum()","fab7116d":"# number of survivors\n#Get a count of the number of survivors  \nprint(train_df['Survived'].value_counts())\n#Visualize the count of number of survivors\nsns.countplot(train_df['Survived'],label=\"Count\")","6695a5b1":"#visualize the count of survivors for columns 'x', 'plclass', 'sibsp','parch','embarked'\n\ncols = ['Sex', 'Pclass','SibSp','Parch','Embarked','Age']\nn_rows = 2\nn_cols = 3\nfig, axs = plt.subplots(n_rows, n_cols, figsize = (n_cols * 3.2, n_rows * 3.2))\n\nfor r in range(0,n_rows):\n    for c in range(0, n_cols):\n        i = r*n_cols + c #index to go throgh the number of columns\n        ax = axs[r][c]\n        sns.countplot(train_df[cols[i]],hue = train_df['Survived'], ax=ax)\n        ax.set_title(cols[i])\n        ax.legend(title = 'Survived',loc = 'upper right')\nplt.tight_layout()\n                               \n","be10613b":"train_df.groupby('Sex')[['Survived']].mean()","edaea678":"#Because there are too many null values, that's why we have dropped the values.\ntrain_df = train_df.drop(['Cabin', 'Age', 'PassengerId'], axis = 1)","056b151e":"train_df.head()","39e4956f":"#Encoding categorical data values (Transforming object data types to integers)\nfrom sklearn.preprocessing import LabelEncoder\nlabelencoder = LabelEncoder()\n\n#Encode sex column\ntrain_df.iloc[:,3]= labelencoder.fit_transform(train_df.iloc[:,3].values)\n\n#Encode embarked\ntrain_df.iloc[:,8]= labelencoder.fit_transform(train_df.iloc[:,8].values)\n\n#Print the NEW unique values in the columns\nprint(train_df['Sex'].unique())\nprint(train_df['Embarked'].unique())","32ac8260":"train_df.head()","864417aa":"train_df = train_df.drop(['Name','Ticket'], axis = 1)\ntrain_df.head()","8599b7c2":"#Split the data into independent 'X' and dependent 'Y' variables\nX = train_df.iloc[:, 1:7].values \nY = train_df.iloc[:, 0].values \nprint(X)\nprint(Y)","f97a2c42":"# Split the dataset into 80% Training set and 20% Testing set\nfrom sklearn.model_selection import train_test_split\nX_train, X_test, Y_train, Y_test = train_test_split(X, Y, test_size = 0.2, random_state = 0)","27629bbb":"#Feature Scaling\nfrom sklearn.preprocessing import StandardScaler\nsc = StandardScaler()\nX_train = sc.fit_transform(X_train)\nX_test = sc.transform(X_test)\nprint(X_train)","c0cbeede":"def models(X_train, Y_train):\n    \n    #Logistic Regression\n    from sklearn.linear_model import LogisticRegression\n    log = LogisticRegression(random_state = 0)\n    log.fit(X_train, Y_train)\n    print('Logistic Regression Training Accuracy:',log.score(X_train,Y_train))\n    \n    #KNeighbors\n    from sklearn.neighbors import KNeighborsClassifier\n    knn = KNeighborsClassifier(n_neighbors = 5, metric = 'minkowski', p=2)\n    knn.fit(X_train, Y_train)\n    \n    #SVC\n    from sklearn.svm import SVC\n    svc_rbf = SVC(kernel = 'rbf',random_state =0)\n    svc_rbf.fit(X_train,Y_train)\n    \n    #Gaussian NB\n    from sklearn.naive_bayes import GaussianNB\n    gauss = GaussianNB()\n    gauss.fit(X_train, Y_train)\n    \n    #Decision Tree\n    from sklearn.tree import DecisionTreeClassifier\n    tree = DecisionTreeClassifier(criterion = 'entropy', random_state = 0)\n    tree.fit(X_train, Y_train)\n    \n    #RandomForest\n    from sklearn.ensemble import RandomForestClassifier\n    forest = RandomForestClassifier(n_estimators = 10, criterion = 'entropy', random_state = 0)\n    forest.fit(X_train, Y_train)\n    \n    print('[0]Logistic Regression Training Accuracy:',log.score(X_train,Y_train))\n    print('[1]KNeighbors Training Accuracy:',knn.score(X_train,Y_train))\n    print('[2]SVM Training Accuracy:',svc_rbf.score(X_train,Y_train))\n    print('[3]Naive Bayes Training Accuracy:',gauss.score(X_train,Y_train))\n    print('[4]Decision Tree Training Accuracy:',tree.score(X_train,Y_train))\n    print('[5]Random Forest Classifier Training Accuracy:',forest.score(X_train,Y_train))\n    \n    return log, knn, svc_rbf, gauss, tree, forest","a3e45161":"model = models(X_train, Y_train)","ea7ef3f1":"from sklearn.metrics import confusion_matrix\n\nfor i in range(len(model)):\n    cm = confusion_matrix(Y_test, model[i].predict(X_test))\n    TN, TP, FN, FP = confusion_matrix(Y_test, model[i].predict(X_test)).ravel()\n    test_score = (TP+TN)\/(TP+TN+FP+FN)\n    print(cm)\n    print('Model[{}] Testing Accuracy = \"{}\"'.format(i, test_score))\n    print()","f94f850c":"# Statistics on the Dataset","00f0d45d":"# Dropping columns ","d27ab4ac":"# Integer Encoding\n\ngenders = {\"male\":0, \"female\":1}\ndata = [df]\nfor dataset in data:\n    dataset['Sex'] = dataset['Sex'].map(genders)\n    \nports = {\"S\":0, \"C\":1, \"Q\":2}\ndata = [df]\nfor dataset in data:\n    dataset['Embarked'] = dataset['Embarked'].map(ports)","0ea1d470":"# Exploring Dataset","3bdde6c1":"# Replacing missing value","2dcee191":"# Importing Dataset"}}