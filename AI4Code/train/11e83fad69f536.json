{"cell_type":{"ab0301ce":"code","54ff35b4":"code","c09a94dc":"code","665f42b9":"code","b7c082e2":"code","28d86ce0":"code","e5a52e5b":"code","1a21552e":"code","6776e71a":"code","6f8fe9fb":"code","6246bd29":"code","ac24f4ea":"code","fa779d11":"code","3a8e37bd":"code","99cff3ce":"code","0849a463":"code","3f9c2f51":"code","28cf6335":"code","c4029f86":"code","78920ada":"code","7e99b7ae":"code","d8c0832d":"code","83f7084e":"code","8b394dea":"code","b6e76c7a":"code","5ada81ff":"code","bdd30c22":"code","c65a3cfe":"code","de96ad61":"code","6ef90733":"code","f340f449":"code","7cadaa53":"code","12235fce":"code","e230bc1a":"code","9d096e75":"code","71b48a9d":"code","115655eb":"code","69891849":"code","a6cc1e90":"code","dc6d119d":"code","7c328dcc":"code","5b6d94c8":"code","f071f0ff":"code","2cf97cbd":"code","59a5873d":"code","4b05ad9a":"code","6f2b9b18":"code","68980ea0":"code","f05eca08":"code","28b2af56":"code","b51e4116":"code","cbbeb988":"code","f9d791eb":"code","e021589d":"code","e138363d":"code","1c58c642":"code","54c8a527":"code","b5a5c485":"code","c31fceb1":"code","b173e471":"code","aa45d00e":"code","24b0fd26":"code","f76dabf0":"code","e8622e9f":"code","66cc4e72":"code","00e9c964":"code","32985d67":"code","966f42b4":"code","6e3e8947":"code","1c9065b6":"code","31e886f8":"code","a464a700":"code","7383806d":"code","ef51e0af":"markdown","0c66a469":"markdown","33ccfc5b":"markdown","79f46f5e":"markdown","fe3aa61c":"markdown","06636348":"markdown","838a6be6":"markdown","2bdbbc88":"markdown","3ddb2bea":"markdown","fbf83c2b":"markdown","0c7d2730":"markdown","f36ff6aa":"markdown","d468e989":"markdown","454e3d65":"markdown","f9920a0d":"markdown","29512e66":"markdown","7eeeca54":"markdown","16a1c336":"markdown","524cf7c1":"markdown","f515d077":"markdown","7a1f5f91":"markdown","fd8e7623":"markdown","c2505786":"markdown","c7596439":"markdown"},"source":{"ab0301ce":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","54ff35b4":"# integer vs string \nstr1 = 'this is a string'\nint1 = 23\n\nprint('int1: ', int1)\nprint('my string: ', str1)","c09a94dc":"# simple funtion: expected salary \n\ndef expected_salary(age, height):\n    if age > 22:\n        salary = 15 * height\n    else: \n        salary = 10 * height\n    return salary\n\n\njames_salary = expected_salary(25, 200)\ngeorges_salary = expected_salary(18, 150)\n\nprint('james_salary: {} euro'.format(james_salary))\nprint('georges_salary: {} euro'.format(georges_salary))\n","665f42b9":"# just for 1 employee I need 3 different valiables!\nemployee1_name = 'messi'\nemployee1_age = 30\nemployee1_adress = 'barcelona'\n\n# instead I will create a Class that contains similars objects","b7c082e2":"class Employee_Class:\n    # attributes = age, name, adress\n    # behaviours = pass \n    pass # right now class is empty, thats why we use pass command\n\nemployee1 = Employee_Class() # right now it is empty","28d86ce0":"employee1","e5a52e5b":"class Football_player:\n    football_club = 'fenerbahce'\n    age = 30\n\nalex = Football_player() ","1a21552e":"alex # it is an object of Football_player class","6776e71a":"alex.age","6f8fe9fb":"alex.football_club","6246bd29":"# We will have an error here\n# classes take objects not variables as an input\n# (funstions take variables as an input)\n\nclass Football_player(age, football_club):\n    football_club = 'fenerbahce'\n    age = 30\n\nsemih = Football_player() ","ac24f4ea":"alex.football_club = 'galatasaray'\n\nalex.football_club","fa779d11":"class Square(object):\n    \n    edge = 5 # meters\n\ns1 = Square()\n\nprint(s1)\nprint(s1.edge)","3a8e37bd":"class Square(object):\n    \n    # attributes\n    edge = 5 # meters\n    \n    # behaviours (methods)\n    def calculate_area(self): # self = object (here we use self to say our method that it is our object   \n        area = self.edge * self.edge\n        return area \n\ns1 = Square() # create an object of class Square\n\na = s1.edge # this object has an attribute edge \n\nb = s1.calculate_area() # this object behaves as calculate_area\n\nprint('s1 has attribute: ', a)\nprint('s1 behaves as calculate_area: ', b)","99cff3ce":"s1.edge = 7 # update edge\nprint('new edge of s1: ', s1.edge)\nprint('new area: ', s1.calculate_area())","0849a463":"class Employee(object):\n    age = 20\n    salary = 1000 # in dollars\n    \n    # this is a method \n    def age_salary_ratio(self):\n        print('age_salary_ratio of method: ', (self.age\/self.salary))\n\n# this is a function\ndef Age_Salary_Ratio(age, salary):\n    print('age_salary_ratio of function: ', (age\/salary))\n\nempl1 = Employee()\nempl1.age_salary_ratio()\nAge_Salary_Ratio(30,3000)","3f9c2f51":"class Animals(object):\n    \n    # we were writing attributes below manually\n    # name = 'dog'\n    # age = 2\n    \n    # __init__ is a method that will define my attributes. Previously, I was changing \n    # the attributes (age, name, salary etc) manually. Now I will create initializer for attributes\n    \n    def __init__(self, name, age, eat):\n        self.name = name\n        self.age = age\n        self.eat = eat\n        \nanimal1 = Animals('dog',2, 'meat')\n\nprint('name: ', animal1.name)\nprint('age: ', animal1.age)\nprint('eat: ', animal1.eat)","28cf6335":"class Animals(object):\n    \n    # we were writing attributes below manually\n    # name = 'dog'\n    # age = 2\n    \n    # __init__ is a method that will define my attributes. Previously, I was changing \n    # the attributes (age, name, salary etc) manually. Now I will create initializer for attributes\n    \n    def __init__(self, a, b, c):\n        self.name = a\n        self.age = b\n        self.eat = c\n        \nanimal1 = Animals('dog',2, 'meat')\n\nprint('name: ', animal1.name)\nprint('age: ', animal1.age)\nprint('eat: ', animal1.eat)","c4029f86":"animal2 = Animals('cat', 1, 'mouse')\nprint('{} eats {} '.format(animal2.name, animal2.eat))","78920ada":"class Animals(object):\n    \n    # with __init__ method I have created below my attributes which are name, age and eat\n    def __init__(self, name, age, eat):\n        self.name = name\n        self.age = age\n        self.eat = eat\n        \n    # this is my method \n    def print_animal_attributes(self):\n        print('name: {}, age: {}, eat: {}'.format(self.name, self.age, self.eat))\n\na1 = Animals('bird', 5, 'forage')","7e99b7ae":"a1.print_animal_attributes()","d8c0832d":"# below the orange colored strings are called docstring, it is an explanation of class and methods \n# they are not compiled\n\nclass Calculator(object):\n    'calculator'\n    \n    def __init__(self, a, b):\n        'initialize values'\n        self.num1 = a\n        self.num2 = b\n    \n    def add(self):\n        'addition'\n        c = self.num1 + self.num2\n        return c\n    \n    def multiply(self):\n        'multiplication'\n        return self.num1 * self.num2\n\nv1 = input('type first value: ') # it returns a string\nv2 = input('type second value: ') # it returns a string\n\nval1 = int(v1)\nval2 = int(v2)\n\n# alternatively\n# val1 = int(input('type first value: '))\n# val2 = int(input('type second value: '))\n\nc1 = Calculator(val1, val2)\n\nselection = input('to add type 1, to multiply type 2: ')\n\nif selection == '1':\n    print ('addition: ', c1.add())\n    \nelif selection == '2':\n    print('multiplication: ', c1.multiply())\n\nelse:\n    print('print 1 or 2')\n    \n# print('addition = ', c1.add())\n# print('multiplication = ', c1.multiply())","83f7084e":"class BankAccount(object):\n    def __init__(self, name, money, address):\n        self.name = name\n        self.money = money\n        self.address = address\n\np1 = BankAccount('messi', 1000, 'barcelona')\np2 = BankAccount('ronaldo', 1200, 'turin')","8b394dea":"# I can easily access to Messi`s amount of money\np1.money","b6e76c7a":"# Besides, I can transfer messi`s money to ronaldo\n\np2.money += p1.money\np1.money = 0","5ada81ff":"print('ronaldo`s money right now: ', p2.money)\nprint('messi`s money right now', p1.money)","bdd30c22":"class BankAccount(object):\n    def __init__(self, name, money, address):\n        self.name = name # global variable: can be accessed from everyone\n        self.__money = money # made private variable using self.__AnyAttribute \n        self.address = address\n\np1 = BankAccount('messi', 1000, 'barcelona')\np2 = BankAccount('ronaldo', 1200, 'turin')","c65a3cfe":"print('name: ', p1.name) # global\nprint('messi`s money right now', p1.__money) # private, I can not see it","de96ad61":"class BankAccount(object):\n    \n    def __init__(self, name, money, address):\n        self.name = name # global variable: can be accessed from everyone\n        self.__money = money # has been made private variable using self.__AnyAttribute \n        self.address = address\n     \n    # define get\n    def getMoney(self):\n        return self.__money\n    \n    #define set\n    def setMoney(self, amount):\n        self.__money = amount\n\np3 = BankAccount('neymar', 1000, 'paris')\np4 = BankAccount('alex', 1200, 'istanbul')","6ef90733":"p4.__money # no access","f340f449":"p4.getMoney() # now it has access using getMoney method","7cadaa53":"p4.setMoney(3000) # change money to 3000\np4.getMoney() # see money","12235fce":"class BankAccount(object):\n    \n    def __init__(self, name, money, address):\n        self.name = name # global variable: can be accessed from everyone\n        self.__money = money # has been made private variable using self.__AnyAttribute \n        self.address = address\n     \n    # define get (global method)\n    def getMoney(self):\n        return self.__money\n    \n    # define set (global method)\n    def setMoney(self, amount):\n        self.__money = amount\n    \n    # this is a private method, since we have used __\n    # it can be used inside the class but not outside\n    def __increaseMoney(self, a):\n        self.__money += a\n    \np5 = BankAccount('benzema', 2350, 'madrid')","e230bc1a":"p5.__increaseMoney(1000) # we will have an error, because the method is private now","9d096e75":"# parent class\nclass Animal():\n    \n    def __init__(self):\n        print('animal class is created')\n        \n    def toString(self):\n        print('animal')\n    \n    def walk(self):\n        print('animal walks')\n        \n# child class\nclass Monkey(Animal): # in paranthesyses I write the parent class that I want to use\n    \n    def __init__(self):\n        super().__init__() # we use this line to use init of animal class\n        print('monkey is created')\n        \n    def toString(self):\n        print('monkey')\n        \n    def climb(self):\n        print('monkey climbs')","71b48a9d":"m1 = Monkey() # it uses init of Animal class also","115655eb":"m1.toString() # method of Monkey","69891849":"m1.climb() # method of Monkey","a6cc1e90":"m1.walk() # method of Animal, but I can use also this method","dc6d119d":"# lets create another child class, Bird\nclass Bird(Animal):\n    \n    def __init__(self):\n        super().__init__()\n        print('bird is created')\n    \n    def fly(self):\n        print('birds fly')","7c328dcc":"b1 = Bird()","5b6d94c8":"b1.fly()","f071f0ff":"b1.walk()","2cf97cbd":"b1.climb() # Bird class can not use methods of Monkey class","59a5873d":"class Website():\n    'parent class'\n    \n    def __init__(self, name, surname):\n        self.name = name\n        self.surname = surname\n        \n    def LoginInfo(self):\n        print(self.name + ' ' + self.surname)\n        \nclass ChildWebsite(Website):\n    'child class'\n    \n    def __init__(self, name, surname, mail_address):\n        super().__init__(name, surname) # Alternatively we can use Website.__init__(self, name, surname)\n        self.mail_address = mail_address\n        \n    def printUserInfo(self):\n        print('name: ', self.name)\n        print('surname: ', self.surname)\n        print('mail address: ', self.mail_address)","4b05ad9a":"user1 = Website('lionel', 'messi')\nuser1.LoginInfo()","6f2b9b18":"user2 = ChildWebsite('alexander', 'pato', 'ap@hotmail.com')\nuser2.printUserInfo()","68980ea0":"class GrandChildWebsite(ChildWebsite):\n    'another child class, actually this is grandchild class, child of ChildWebsite which is child of Website'\n    \n    def __init__(self,name, surname, mail_address, ids):\n        ChildWebsite.__init__(self, name, surname, mail_address) \n        self.ids = ids\n        \n    def printAllUserInfo(self):\n        print('name: ', self.name)\n        print('surname: ', self.surname)\n        print('mail address: ', self.mail_address)\n        print('ID: ', self.ids)","f05eca08":"# user3 is an object of GrandChildWebsite class\nuser3 = GrandChildWebsite('david', 'beckam', 'db@hotmail.com', '1234')","28b2af56":"user3.printAllUserInfo() # this method is from GrandChildWebsite class","b51e4116":"user3.printUserInfo() # this method is from ChildWebsite class","cbbeb988":"user3.LoginInfo() # this method is from Website class","f9d791eb":"class Another_Child_Of_Website(Website):\n        'this class is child of parent class = Website'\n        \n        def __init__(self, name, surname, tel):\n            Website.__init__(self, name, surname)\n            self.tel = tel\n            \n        def print_tel_number(self):\n            print('tel_number: ', self.tel)","e021589d":"user4 = Another_Child_Of_Website('alex', 'morgan', 12345)","e138363d":"user4.print_tel_number() # this method is from Another_Child_Of_Website class","1c58c642":"user4.name","54c8a527":"user4.surname","b5a5c485":"user4.ids # Error: because, ids is GrandChildWebsite`s attribute\n\n# user4 has attributes only from Another_Child_Of_Website and Website ","c31fceb1":"from abc import ABC, abstractmethod  # abc: abstract base class\n\n# this class will build my template\nclass Animal(ABC):  # super class or parent class\n    \n    @abstractmethod\n    def walk(self): pass  # here the walk method is an abstract method\n    \n    def run(self): \n        print('this animal can run')\n    \n    \nclass Bird(Animal): # sub class or child class\n    \n    def __init__(self, name):\n        self.name = name\n        print('{} is a bird'.format(self.name))\n        \n    def walk(self): # we have to use this method, if we want to create a sub class of super class\n        print('this bird can walk')","b173e471":"a1 = Animal()","aa45d00e":"a2 = Bird('eagle')","24b0fd26":"a2.walk()","f76dabf0":"a2.run()","e8622e9f":"from abc import ABC, abstractmethod  # abc: abstract base class\n\n# this class will build my template\nclass Animal(ABC):  # super class or parent class\n    \n    @abstractmethod\n    def walk(self): pass  # here the walk method is an abstract method\n    \n    def run(self): \n        print('this animal can run')\n    \n    \nclass Bird(Animal): # sub class or child class\n    \n    def __init__(self, name):\n        self.name = name\n        print('{} is a bird'.format(self.name))","66cc4e72":"a3 = Bird('canary')","00e9c964":"class Animal():\n    \n    def toString(self):\n        print('animal')\n        \nclass Monkey(Animal):\n    \n    def toString(self):\n        print('monkey')","32985d67":"animal1 = Animal()\nanimal1.toString()","966f42b4":"monkey1 = Monkey()\nmonkey1.toString()","6e3e8947":"class Employee():\n    \n    def raisee(self):\n        raise_rate = 0.1\n        salary = 100 + 100 * raise_rate\n        print('emplyee salary: ', salary)\n        \nclass CompEng(Employee):\n    \n    def raisee(self):\n        raise_rate = 0.2\n        salary = 100 + 100 * raise_rate\n        print('CE salary: ', salary)\n    \n\nclass EEE(Employee):\n    \n    def raisee(self):\n        raise_rate = 0.3\n        salary = 100 + 100 * raise_rate\n        print('EEE salary: ', salary)","1c9065b6":"e = Employee()\nce = CompEng()\neee = EEE()\n\ne.raisee()\nce.raisee()\neee.raisee()","31e886f8":"from abc import ABC, abstractmethod\n\nclass Shape(ABC):\n    '''\n    this is my abstarct class or template\n    \n    '''\n    \n    # these are examples for abstract methods\n    @abstractmethod\n    def area(self): pass\n    \n    @abstractmethod\n    def perimeter(self): pass\n    \n    # this is an example for overriding and polymorphism   \n    def toString(self): pass\n    \nclass Square(Shape):\n    ''' \n    child class of Shape\n    \n    '''\n    \n    def __init__(self,lenght):\n        self.__lenght = lenght # encapsulation, private attribute\n    \n    def area(self):\n        result = self.__lenght**2\n        print('area of this square: ', result)\n    \n    def perimeter(self):\n        result = 4 * self.__lenght\n        print('perimeter of this square: ', result)\n    \n    def toString(self): # example for overriding and polymorphism\n        print('lenght of the square: ', self.__lenght)\n        \nclass Circle(Shape):\n    ''' \n    child class of Shape\n    \n    '''\n    pi = 3.14 # constant variable\n    \n    def __init__(self, radius):\n        self.__radius = radius\n        \n    def area(self):\n        result = self.pi * self.__radius**2\n        print('area of the circle: ', result)\n        \n    def perimeter(self):\n        result = 2*self.pi*self.__radius\n        print('perimeter of the circle: ', result)\n        \n    def toString(self):\n        print('radius of the circle: ', self.__radius)","a464a700":"c1 = Circle(5)\nc1.area()\nc1.perimeter()\nc1.toString()","7383806d":"s1 = Square(6)\ns1.area()\ns1.perimeter()\ns1.toString()","ef51e0af":"**2. CLASSES**\n\n- Lets say we want to create a database of our employees. To keep theis name, age and adress values I need that much of variables. But, what if I have thousands of employees in my company?\n\n- objects in classes have attributes and behaviours (methods)","0c66a469":"**1. FUNCTIONS**","33ccfc5b":"**10. Lets combine all topics in a project**","79f46f5e":"- when I have the same methods both in super class and sub class which one will be called?","fe3aa61c":"**2.4. Initializer Or Constructer**","06636348":"**4. Encapsulation**","838a6be6":"**7. Abstract Classes**","2bdbbc88":"**4.1 get and set**","3ddb2bea":"** We see that, now I can create infinitely many objects in Animla class **","fbf83c2b":"**2.2 Methods**","0c7d2730":"**6. Inheritance Project**","f36ff6aa":"- Abstract Classes in Python: An abstract class can be considered as a blueprint for other classes, allows you to create a set of methods that must be created within any child classes built from your abstract class. A class which contains one or abstract methods is called an abstract class\n\n-  super class can be a abstract class by using at least one abstract method\n- when we create sub class from this super class, the sub class must have the abstract method defined in super class","d468e989":"I could not created canary animal becasue in Bird class I dont have abstract method walk","454e3d65":"**4.2 but this get and set are still global, I can make a private method also using '__'**","f9920a0d":"I have easily changed money in bank accounts, which is not prefered. I have to restrict access to bank accounts. ","29512e66":"**9. Polymorphism**","7eeeca54":"**2.3. Methods vs Functions**","16a1c336":"**I will have an error here because?**","524cf7c1":"**Transfer season is opened**","f515d077":"- In literal sense, Polymorphism means the ability to take various forms. In Python, Polymorphism allows us to define methods in the child class with the same name as defined in their parent class. As we know, a child class inherits all the methods from the parent class","7a1f5f91":"**8. Overriding**","fd8e7623":"**5. Inheritance**\n\n- Let say I have an 'animal' class which has a method (or an attribute) 'run'\n- Let also I have a 'monkey' class which has 'run' and 'climb' methods\n- For monkey class I dont want to create again 'run' method, so I want to use the 'run' method of 'animal' class.\n- (here we usually call animal class as 'parent' and monkey class as 'child')","c2505786":"**2.1 Atributes**","c7596439":"**3. Calculator Project**"}}