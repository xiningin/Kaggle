{"cell_type":{"66881b07":"code","a74f31b4":"code","456fe04b":"code","9fbc01c7":"code","a4b692f6":"code","fd307540":"code","a5e648f1":"code","62d040e6":"code","8d925e7d":"code","b6509459":"code","57300a5d":"code","f7178d8e":"code","8f05980c":"code","a05a0fc6":"code","3744f639":"code","cd7acad7":"code","024b4408":"code","64fb143f":"code","cb3eb0d0":"code","42f9f1db":"code","9aaccef5":"code","bd6a4a51":"code","f0744cf6":"code","7a83006a":"code","d5c9d267":"code","f88860ea":"code","510f8d04":"code","80b13de5":"code","8d7b3afe":"code","95241ad8":"code","ef475800":"code","cc2a4ae6":"code","57c844d5":"code","39c3dc96":"code","a9b85860":"code","4c4464fe":"code","6d85bc58":"code","5a6d63f3":"code","57dd6920":"code","626b7fb7":"code","9fc2c695":"code","9c8102f0":"code","29a61b36":"code","09cfc372":"code","3875eafb":"code","40ac82eb":"code","f57b57d8":"code","1f07f444":"code","d9d3a8a8":"code","d6a8e485":"markdown","b1d22a7e":"markdown","bb015e02":"markdown","9bb3e396":"markdown","591a2e1d":"markdown","d605807a":"markdown","f42664f4":"markdown","825b819b":"markdown","db80ab86":"markdown","f3b9de9a":"markdown","4ebaba53":"markdown","05a85b5d":"markdown","a0a5b72c":"markdown","7b9a9b02":"markdown","d050e4e3":"markdown","b44740ef":"markdown","cdc79cf6":"markdown","04681194":"markdown","16ce6b37":"markdown","973b7b83":"markdown","807c955a":"markdown","8dd5aa90":"markdown","adde761e":"markdown","256e42fd":"markdown","3b3ef6d4":"markdown","cfa8fc7a":"markdown","a02845c9":"markdown","d017628b":"markdown"},"source":{"66881b07":"#importing all the required librarys\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n%matplotlib inline\n\nimport warnings\nwarnings.filterwarnings(\"ignore\")","a74f31b4":"#loading the dataset and reading csv\ndf= pd.read_csv('..\/input\/weather-dataset-rattle-package\/weatherAUS.csv')","456fe04b":"#taking a peek into dataframea\ndf.head(5)","9fbc01c7":"# the number of rows and columns in a dataset\ndf.shape","a4b692f6":"# statistics for all columns of the dataset\ndf.describe()","fd307540":"#columns names in the dataset\ndf.columns","a5e648f1":"df.nunique( )","62d040e6":"# information of dataset\ndf.info()","8d925e7d":"# all columns are now lowercase letters\ndf.columns=df.columns.str.strip().str.lower()\ndf.columns","b6509459":"\ndf['date'] = pd.to_datetime(df['date']) # parse as datatime\n\ndf['Year'] = df['date'].dt.year\ndf['Month'] = df['date'].dt.month\ndf['Day'] = df['date'].dt.day\n\ndf[['date', 'Year', 'Month', 'Day']] # preview changes made\n\ndf.drop('date', axis=1, inplace = True)\ndf.info()","57300a5d":"df.isnull().sum( )","f7178d8e":"# Checking data completeness\nmissing = pd.DataFrame(df.isnull().sum(),columns = ['no.of missing values'])\n\nmissing['% missing_values']= (missing\/len(df)).round(2)*100\nmissing","8f05980c":"df=df.drop(['sunshine','evaporation','cloud3pm','cloud9am'], axis=1)","a05a0fc6":"missing","3744f639":"# Remove rows where target variables are missing\ndf.dropna(how='all', subset=['raintomorrow'], inplace=True) \n","cd7acad7":"# Extract numerical features\nnum_col = df.select_dtypes(include=np.number).columns.to_list()\nlen(num_col)","024b4408":"df.head()","64fb143f":"# exrtact categorical features\ncat_col=df.select_dtypes(object).columns.tolist()\nlen(cat_col)\n","cb3eb0d0":"for i in num_col:\n   \n    fig, axs = plt.subplots(1,2,figsize=(15, 3))\n\n    sns.histplot(df[i],bins=20, kde=True,ax=axs[0]);\n    sns.boxplot(df[i], ax = axs[1], color='#99befd', fliersize=1);","42f9f1db":"# droping rainfall column in dataframe and Numerical columns\ndf=df.drop(['rainfall'], axis=1)\nnum_col\nnum_col.remove('rainfall')","9aaccef5":"from sklearn.preprocessing import LabelEncoder","bd6a4a51":"# Impute missing values for numerical features\nmedian_values = df[num_col].median()\ndf[num_col] = df[num_col].fillna(value=median_values)","f0744cf6":"# Convert categorized values to numerical values\nle = LabelEncoder()\ndf[cat_col] =df[cat_col].astype('str').apply(le.fit_transform)","7a83006a":"# Impute missing values for categorical features\nmode_values=df[cat_col].mode()\ndf[cat_col] = df[cat_col].fillna(value=mode_values)","d5c9d267":"df.isnull().sum()","f88860ea":"df.head()","510f8d04":"# lets see the correlation between eachother by using heatmap\nfig, ax = plt.subplots(figsize=(20,10))\nmask = np.triu(np.ones_like(df.corr(), dtype=np.bool))\nsns.heatmap(df.corr(), annot=True, cmap=\"Reds\", mask=mask, linewidth=0.5)\n","80b13de5":"# lets drop the correlated variables\ndf=df.drop(columns=['temp9am','temp3pm','pressure9am'],axis=1)\n","8d7b3afe":"numcol_del=['temp9am','temp3pm','pressure9am']\nnum_cols = list(set(num_col) - set(numcol_del))\nnum_cols","95241ad8":"df.shape","ef475800":"cat_col","cc2a4ae6":"df.describe()","57c844d5":"# spliting training and testing data\nfrom sklearn.model_selection import train_test_split\n\nX = df.drop(['raintomorrow'], axis = 1)\ny = df['raintomorrow']\n\nX_train, X_test, y_train, y_test = train_test_split(X,y,test_size=0.3,random_state=27)","39c3dc96":"from sklearn.linear_model import LogisticRegression\nfrom sklearn.metrics import accuracy_score","a9b85860":"# Initiatlize the model\nlogreg = LogisticRegression(solver='liblinear', random_state = 0)\n\n# Fit the model\nlogreg.fit(X_train, y_train)\n\n# Predict data points \ny_pred_test = logreg.predict(X_test)\n\n# Print accuracy scores\nprint(f'Model accuracy score: {round(accuracy_score(y_test, y_pred_test) * 100, 2)}%')","4c4464fe":"# Additional Metrics\n\nprint(f'Training set score: {round(logreg.score(X_train, y_train) * 100, 2)}%')\nprint(f'Test set score: {round(logreg.score(X_test, y_test) * 100, 2)}%')\n","6d85bc58":"from sklearn.ensemble import RandomForestClassifier","5a6d63f3":"model = RandomForestClassifier(n_jobs=-1, random_state=42)","57dd6920":"model.fit(X_train, y_train)","626b7fb7":"model.score(X_train, y_train)","9fc2c695":"model.score(X_test, y_test)","9c8102f0":"\nfrom sklearn.preprocessing import StandardScaler\nscalar = StandardScaler()\ndf_scaled = pd.DataFrame(scalar.fit_transform(df), columns=df.columns)\ndf_scaled.head()","29a61b36":"from sklearn.decomposition import PCA","09cfc372":"pca = PCA(n_components=.95)","3875eafb":"df_pca = pd.DataFrame(pca.fit_transform(df_scaled))\nx = df_pca \nx","40ac82eb":"import matplotlib.pyplot as plt\npd.DataFrame(pca.explained_variance_ratio_).plot.bar()\nplt.legend('')\nplt.xlabel('Principal Components')\nplt.ylabel('Explained Varience');","f57b57d8":"#splitting dataset into a training set and test set\n\nfrom sklearn.model_selection import train_test_split\n\nX_train, X_test, Y_train, Y_test = train_test_split(x, y, test_size=0.2, random_state = 0)","1f07f444":"#fitting logistic Regression to training set\n\nfrom sklearn.linear_model import LogisticRegression\n\nclassifier = LogisticRegression(random_state = 0)\n\nclassifier.fit(X_train, Y_train)","d9d3a8a8":"\ny_pred = classifier.predict(X_test)\n\nprint(\"accuracy score:\", accuracy_score(Y_test,y_pred))","d6a8e485":"# Dont forget to UPVOTE","b1d22a7e":"* For other features, there are data missing, we will handle these missing values with an appropriate method later in the study\n\n#### reamaining features are to sorted into numerical aand categorical features ","bb015e02":"# Project : Predict next-day rain in Australia","9bb3e396":"# Model : Logistic Regression","591a2e1d":"# Model : Random Forest ","d605807a":"## 2.\n### changing the formate of date and droping the orginal","f42664f4":"# PCA","825b819b":"* we can see that all the features in dataframe are numerical\n\n* lets see the dependency of independent variables","db80ab86":"\n## 5.\n## Datascaling","f3b9de9a":"## 4.\n### cheking for multicolinarity","4ebaba53":"###  Lets first split the data first ","05a85b5d":"#### observations:\n * we can see that the min and max values of each columns of dataframe excluding the categorical features\n * ['mintemp','maxtemp','windgustspeed','windspeed9pm','windspeed3pm','humidity9am','humidity3pm',pressure9am','pressure3pm','temp9am','temp3pm']","a0a5b72c":"###  lets standardize the data before applying the PCA","7b9a9b02":"### 2.\n### we shall deal with missing and null values","d050e4e3":"## 3.\n### Encoding and Imputation","b44740ef":"# Data cleaning\n\n### 1.\n### we start with making all the column names into Lowercase","cdc79cf6":"#### we have found enough information from the dataset and it time to clean it for the best fit","04681194":"## The data is cleaned and ready for modeling","16ce6b37":"* we will delete columns with more missing values -- [sunshine,evaporation,cloud3pm,cloud9am]\n\n","973b7b83":"###  100% finally","807c955a":"* The target variable RainTomorrow has two missing data, we will drop these two rows from the dataset","8dd5aa90":"* The Rainfall data seems to have a huge distortion, we will drop this feature for our analysis\n* there are many outliers and will with it later \n","adde761e":"* we can see that 5 pcs are explaining 80% of target variable","256e42fd":"### Numeriacal Features\n\n* we know that there are some different number of missing values to each features\n* Depending on their dirstubtion we are going to replace with median or mean ","3b3ef6d4":"### Lets try PCA and see how it goes better on this data","cfa8fc7a":"### The dataset contains 23 attributes:\n>#### About some of them are\n* DATE          - The date of observation\n* LOCATION      - The common name of the location of the weather station\n\n* MINTEMP       - The minimum temperature in degrees celsius\n\n* MAXTEMP       - The maximum temperature in degrees celsius\n\n* RAINFALL      - The amount of rainfall recorded for the day in mm\n\n* EVAPORATION   -  The so-called Class A pan evaporation (mm) in the 24 hours to 9am\n\n* SUNSHINE      - The number of hours of bright sunshine in the day.\n\n* WINDGUESTDIR  - The direction of the strongest wind gust in the 24 hours to midnight\n\n* WINDGUESTSPEED- The speed (km\/h) of the strongest wind gust in the 24 hours to midnight\n\n* WINDDIR9AM    - Direction of the wind at 9am","a02845c9":"### About the dataset :\n > This dataset contains about 10 years of daily weather observations from numerous Australian weather stations.\n>RainTomorrow is the target variable to predict. It means -- did it rain the next day, Yes or No?\n This column is Yes if the rain for that day was 1mm or more.","d017628b":"## Data Wrangling\n### General Properties"}}