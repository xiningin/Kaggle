{"cell_type":{"efc18852":"code","4314e9e3":"code","86356736":"code","e76e0c7d":"code","910dcb8e":"code","962b0589":"code","86fb1f0a":"code","5533d722":"code","0e706ad0":"code","bef1b509":"code","2ccdbf86":"code","4b275757":"code","7393766b":"code","2ebf0c54":"code","df361b54":"code","7123d992":"code","3a6ca968":"code","85126361":"code","b6356c3d":"code","1063eb78":"code","2b68ff2e":"code","65845954":"code","3db24b2e":"code","f1bad505":"code","8eab0564":"code","927f2493":"code","21eb7dc0":"code","b887da90":"code","0d74d661":"code","62cf90cd":"code","5c4180c6":"code","2795cf02":"code","c108e639":"code","ae2d45d3":"code","181d1e31":"code","53bd5b38":"code","aa839605":"code","d8136c8c":"code","b9a75625":"code","b93b1565":"code","1e78deb3":"code","6a13ef17":"code","49940049":"code","c75f9899":"code","0e5ec690":"code","7f3b810b":"code","5999ee26":"markdown","2a987613":"markdown","db42200b":"markdown","265a1d81":"markdown"},"source":{"efc18852":"!pip install pyspark","4314e9e3":"from pyspark.ml.evaluation import RegressionEvaluator\nfrom pyspark.ml.recommendation import ALS\nfrom pyspark.ml.tuning import ParamGridBuilder, CrossValidator\nfrom pyspark.sql import SparkSession\nfrom pyspark.sql import functions as f\nfrom pyspark.sql.functions import avg, when, explode","86356736":"from pyspark.conf import SparkConf\nspark = SparkSession.builder.appName(\"movieRecommendationSystem\") \\\n.config(conf=SparkConf([('spark.executor.memory', '16g'), \n                        ('spark.executor.cores', '6'), \n                        ('spark.cores.max', '6'), \n                        ('spark.driver.memory','16g')])) \\\n.getOrCreate()","e76e0c7d":"ratings = (\n    spark.read.csv(\n        path=\"..\/input\/it2034ch1502-movie-recommendation-system\/ratings.csv\",\n        header=True,\n        inferSchema = True,\n    )\n    .select('userId', 'movieId', 'rating')\n    .cache()\n)\n\nratings.printSchema()\nratings.show(3)\nratings.summary().show()","910dcb8e":"movies = (\n    spark.read.csv(\n        path = \"..\/input\/it2034ch1502-movie-recommendation-system\/movies.csv\",\n        header = True,\n        inferSchema = True,\n    )\n    .select('movieId', 'title', 'genres', 'year')\n    .cache()\n)\nmovies.printSchema()\nmovies.show(3)\nmovies.summary().show()","962b0589":"tags = (\n    spark.read.csv(\n        path = \"..\/input\/it2034ch1502-movie-recommendation-system\/tags.csv\",\n        header = True,\n        inferSchema = True,\n    )\n    .select('userId', 'movieId', 'tag')\n    .cache()\n)\ntags.printSchema()\ntags.show(3)\ntags.summary().show()","86fb1f0a":"als = ALS(\n    userCol = \"userId\", \n    itemCol = \"movieId\", \n    ratingCol = \"rating\", \n    nonnegative = True, \n    implicitPrefs = False, \n)\n\nevaluator = RegressionEvaluator(metricName = \"rmse\", labelCol = \"rating\", predictionCol = \"prediction\")\n\nparam_grid = ParamGridBuilder() \\\n            .addGrid(als.rank, [150]) \\\n            .addGrid(als.maxIter, [10]) \\\n            .addGrid(als.regParam, [0.05, 0.1]) \\\n            .build()\n\ncv = CrossValidator(estimator = als, estimatorParamMaps = param_grid, evaluator = evaluator)","5533d722":"train, validate = ratings.randomSplit([0.8, 0.2], seed = 1234)\ntrain.count(), validate.count()","0e706ad0":"model = cv.fit(train)","bef1b509":"bestModel = model.bestModel\n\nbestRank = bestModel._java_obj.parent().getRank()\nbestMaxIter = bestModel._java_obj.parent().getMaxIter()\nbestRegParam = bestModel._java_obj.parent().getRegParam()\n\nprint(\"Rank:\", bestRank)\nprint(\"MaxIter:\", bestMaxIter)\nprint(\"RegParam:\",bestRegParam)\n\nbestModel.userFactors.show(3, False)","2ccdbf86":"predictions = bestModel.transform(validate)\npredictions.show(3)","4b275757":"rmse = evaluator.evaluate(predictions.na.drop()) \nprint(\"RMSE 1 = %s\" % str(rmse))","7393766b":"avgRatings = ratings.select(\"rating\").groupBy().avg().first()[0]\nprint (\"avgRatings: %s\" % str(avgRatings))","2ebf0c54":"avgMoviesRating = ratings.groupby(\"movieId\").agg(f.mean(\"rating\").alias(\"rating\")).agg({\"rating\":\"mean\"}).collect()[0][\"avg(rating)\"]\nprint (\"avgMoviesRating: %s\" % str(avgMoviesRating))","df361b54":"avgUsersRating = ratings.groupby(\"userId\").agg(f.mean(\"rating\").alias(\"rating\")).agg({\"rating\":\"mean\"}).collect()[0][\"avg(rating)\"]\nprint (\"avgUsersRating: %s\" % str(avgUsersRating))","7123d992":"rmse = evaluator.evaluate(predictions.na.fill(avgRatings))\nprint(\"RMSE 2 = %s\" % str(rmse))","3a6ca968":"avgRatingsPerMovie = ratings.groupBy(\"movieId\").agg(avg(ratings.rating).alias(\"avgRatingsPerMovie\"))\navgRatingsPerMovie.show(10, truncate=False)","85126361":"avgRatingsPerUser = ratings.groupBy('userId').agg(avg(ratings.rating).alias(\"avgRatingsPerUser\"))\navgRatingsPerUser.show(10, truncate=False)","b6356c3d":"predictions = predictions.join(avgRatingsPerMovie, [\"movieId\"],\"left\")\npredictions = predictions.join(avgRatingsPerUser, [\"userId\"],\"left\")","1063eb78":"predictions = predictions.withColumn(\"prediction\", when((predictions.prediction == \"nan\") & (predictions.avgRatingsPerMovie.isNull()) & (predictions.avgRatingsPerUser.isNull()), avgUsersRating) \\\n        .when((predictions.prediction == \"nan\") & (predictions.avgRatingsPerMovie.isNull()), predictions.avgRatingsPerUser) \\\n        .when(predictions.prediction == \"nan\", predictions.avgRatingsPerMovie) \\\n        .when(predictions.prediction > 5, 5) \\\n        .when(predictions.prediction < 0.5, 0.5) \\\n        .otherwise(predictions.prediction))","2b68ff2e":"rmse = evaluator.evaluate(predictions)\nprint(\"RMSE 3 = %s\" % str(rmse))","65845954":"nrecommendations = bestModel.recommendForAllUsers(10)\nnrecommendations.limit(10).show()\n\nnrecommendations = nrecommendations \\\n    .withColumn(\"rec_exp\", explode(\"recommendations\")) \\\n    .select('userId', \"rec_exp.movieId\", \"rec_exp.rating\")\nnrecommendations.limit(10).show()","3db24b2e":"bestAls = ALS(\n    userCol=\"userId\", \n    itemCol=\"movieId\", \n    ratingCol=\"rating\", \n    nonnegative = True, \n    implicitPrefs = False, \n    rank = bestRank,\n    maxIter = bestMaxIter, \n    regParam = bestRegParam\n)","f1bad505":"testModel = bestAls.fit(ratings)","8eab0564":"test = (\n    spark.read.csv(\n        path=\"..\/input\/it2034ch1502-movie-recommendation-system\/test.csv\",\n        header=True,\n        inferSchema = True,\n    )\n    .select(\"ratingId\", \"userId\", \"movieId\")\n    .cache()\n)\n\ntest.printSchema()\ntest.show(3)\ntest.summary().show()","927f2493":"testSolutions = testModel.transform(test).withColumnRenamed(\"prediction\",\"rating\")\ntestSolutions.show(3)","21eb7dc0":"testSolutions = testSolutions.join(avgRatingsPerMovie, [\"movieId\"],\"left\")\ntestSolutions = testSolutions.join(avgRatingsPerUser, [\"userId\"],\"left\")","b887da90":"testSolutions.show(3)","0d74d661":"solutions = testSolutions.withColumn(\"rating\", when((testSolutions.rating == \"nan\") & (testSolutions.avgRatingsPerMovie.isNull()) & (testSolutions.avgRatingsPerUser.isNull()), avgUsersRating) \\\n                .when((testSolutions.rating == \"nan\") & (testSolutions.avgRatingsPerMovie.isNull()), testSolutions.avgRatingsPerUser) \\\n                .when(testSolutions.rating == \"nan\", testSolutions.avgRatingsPerMovie) \\\n                .when(testSolutions.rating > 5, 5) \\\n                .when(testSolutions.rating < 0.5, 0.5) \\\n                .otherwise(testSolutions.rating))","62cf90cd":"solutions = solutions.withColumn(\"rating\", f.round(\"rating\", 1)) \\\n                    .select(\"ratingId\", \"rating\") \\\n                    .sort(\"ratingId\")","5c4180c6":"solutions.filter(solutions.rating == \"nan\").count()","2795cf02":"testSolutions.unpersist()","c108e639":"solutions.toPandas().to_csv('testSolutions.csv', header = True, index = False)","ae2d45d3":"genresResult = testSolutions.join(movies, [\"movieId\"], \"left\").select(\"ratingId\", \"userId\", \"movieId\", \"genres\", \"rating\")\ngenresResult = genresResult.na.fill(\"nan\")\ngenresResult = genresResult.withColumn(\"genres\", f.regexp_replace(\"genres\", \"\\[|\\]|\\'\", \"\")) \\\n                .withColumn(\"genres\", f.split(\"genres\", \", \")) \\\n                .withColumn(\"genres\", f.explode(\"genres\"))\ngenresResult.filter(genresResult.rating != \"nan\").show(10)","181d1e31":"genresTrain = ratings.join(movies,[\"movieId\"], \"left\").select(\"userId\", \"movieId\", \"genres\", \"rating\")\ngenresTrain = genresTrain.withColumn(\"genres\", f.regexp_replace(\"genres\",\"\\[|\\]|\\'\",\"\")) \\\n                .withColumn(\"genres\",f.split(\"genres\",\", \")) \\\n                .withColumn(\"genres\",f.explode(\"genres\")) \\\n                .groupby(\"userId\", \"genres\").agg(f.mean(\"rating\").alias(\"genresRatings\"))\ngenresTrain.show(10)","53bd5b38":"genresRatings = genresResult.join(genresTrain, [\"userId\", \"genres\"], \"left\")\ngenresRatings = genresRatings.withColumn(\"rating\", when((f.col(\"rating\") == \"nan\") & (f.col(\"genresRatings\").isNotNull()), genresTrain.genresRatings)\n                      .otherwise(genresRatings.rating))\ngenresRatings.filter(f.col(\"genresRatings\").isNotNull()).show(10)","aa839605":"tagsResult = testSolutions.join(tags, [\"userId\",\"movieId\"], \"left\").select(\"ratingId\", \"userId\", \"movieId\", \"tag\", \"rating\")\ntagsResult.filter(tagsResult.tag.isNotNull()).show(10)","d8136c8c":"tagsTrain = ratings.join(tags, [\"userId\",\"movieId\"], \"left\").select(\"userId\", \"movieId\", \"tag\", \"rating\")\ntagsTrain = tagsTrain.filter(f.col(\"tag\").isNotNull()).groupBy(\"movieId\", \"tag\").agg(f.mean(f.col(\"rating\")).alias(\"tagsRatings\"))\ntagsTrain.show(10)","b9a75625":"tagsRatings = genresRatings.join(tags, [\"userId\", \"movieId\"], \"left\").select(\"ratingId\", \"userId\", \"movieId\", \"tag\", \"rating\")\ntagsRatings = tagsRatings.join(tagsTrain, [\"tag\", \"movieId\"], \"left\")\ntagsRatings = tagsRatings.withColumn(\"rating\", f.when((f.col(\"rating\") == \"nan\") & (f.col(\"tagsRatings\").isNotNull()),tagsRatings.tagsRatings)\n                      .otherwise(tagsRatings.rating))\ntagsRatings.filter(f.col(\"tagsRatings\").isNotNull()).show(10)","b93b1565":"moviesRatings = tagsRatings.join(avgRatingsPerMovie, [\"movieId\"], \"left\")\nmoviesRatings = moviesRatings.withColumn(\"rating\", f.when((f.col(\"rating\") == \"nan\") & (f.col(\"avgRatingsPerMovie\").isNotNull()), moviesRatings.avgRatingsPerMovie) \\\n                      .otherwise(moviesRatings.rating))\nmoviesRatings.filter(f.col(\"avgRatingsPerMovie\").isNotNull()).show(10)","1e78deb3":"userRatings = moviesRatings.join(avgRatingsPerUser, [\"userId\"],\"left\")\nuserRatings = userRatings.withColumn(\"rating\", when((userRatings.rating == \"nan\") & \n                                    (f.col(\"avgRatingsPerUser\").isNotNull()), userRatings.avgRatingsPerUser) \\\n                                    .otherwise(userRatings.rating)).drop(\"avgRatingsPerMovie\",\"avgRatingsPerUser\")\nuserRatings.filter(f.col(\"tagsRatings\").isNotNull()).show(10)","6a13ef17":"testSolutions = userRatings.groupby(\"ratingId\").agg(f.mean(f.col(\"rating\")).alias(\"rating\"))","49940049":"testSolutions = testSolutions.withColumn(\"rating\", when(testSolutions.rating == \"nan\", avgUsersRating) \\\n                                    .when(testSolutions.rating > 5, 5) \\\n                                    .when(testSolutions.rating < 0.5, 0.5) \n                                    .otherwise(testSolutions.rating))","c75f9899":"solutions = testSolutions.withColumn(\"rating\", f.round(\"rating\", 1)) \\\n                    .select(\"ratingId\", \"rating\") \\\n                    .sort(\"ratingId\")","0e5ec690":"solutions.show(10)","7f3b810b":"solutions.toPandas().to_csv(\"testSolutions.csv\", header = True, index = False)","5999ee26":"# M\u00d4N H\u1eccC: X\u1eec L\u00dd D\u1eee LI\u1ec6U L\u1edaN\n\n**B\u00c0I T\u1eacP 2:** MOVIE RECOMMENDATION SYSTEM (MRS)\n\n**Gi\u1ea3ng vi\u00ean h\u01b0\u1edbng d\u1eabn:** TS. \u0110\u1ed7 Tr\u1ecdng H\u1ee3p\n\n**Nh\u00f3m:** Smiley Team\n\n**Th\u00e0nh vi\u00ean:**\n1. L\u00ea Anh Tu\u1ea5n - CH1902037\n2. Nguy\u1ec5n C\u00f4ng Danh - CH1902029\n3. V\u00f5 Ho\u00e0ng V\u0169 - CH1902039","2a987613":"### 2. Chu\u1ea9n b\u1ecb d\u1eef li\u1ec7u","db42200b":"### 1. C\u00e0i \u0111\u1eb7t PySpark v\u00e0 n\u1ea1p th\u01b0 vi\u1ec7n","265a1d81":"### 3. Hu\u1ea5n luy\u1ec7n v\u00e0 \u0111\u00e1nh gi\u00e1 m\u00f4 h\u00ecnh"}}