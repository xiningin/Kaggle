{"cell_type":{"95fc348f":"code","fb53b0dc":"code","2718b2c9":"code","083d7d98":"code","17bcc552":"code","ad108ef7":"code","42bbf039":"code","c43def73":"code","d5c530e4":"code","4592f703":"code","ae3139de":"code","a48b8958":"code","4d25fa56":"code","e80e1cc5":"code","008cabc7":"code","59cf7d7c":"code","fd940a2d":"code","1b916b6c":"code","bb2b3b67":"code","fd451750":"code","50eb178f":"code","ee557687":"code","664a6cf2":"code","7fa3fbb9":"code","f48caeda":"code","c373d3e2":"code","cc0998f7":"code","6cc82c3a":"code","a4d40d67":"code","5ad1e643":"code","1ed082fe":"code","4fa7eeba":"code","e07c547c":"code","2ea8e6b4":"code","c8ccac88":"code","7cf04a54":"code","9728e659":"code","d55ff8f5":"code","872bda8b":"markdown","85bd1dc8":"markdown","94f216cf":"markdown","5fd32e96":"markdown","33fa4ee9":"markdown","e8950ac8":"markdown","c5388292":"markdown","ea0ee427":"markdown","d28930ea":"markdown","4b1c109c":"markdown","b9de0e01":"markdown","ad6a9811":"markdown","29da5a67":"markdown","3f40862f":"markdown","7482f778":"markdown","831b06d0":"markdown","7de34a2a":"markdown","38191beb":"markdown","88c81a5a":"markdown","15fe22a1":"markdown","8838580d":"markdown"},"source":{"95fc348f":"import warnings\nwarnings.filterwarnings(\"ignore\")\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nimport pandas as pd\nimport numpy as np\nimport scipy\nfrom lightgbm import LGBMClassifier\nfrom sklearn.model_selection import StratifiedKFold\nimport matplotlib.ticker as ticker\nimport matplotlib.animation as animation\nfrom IPython.display import HTML\nimport random","fb53b0dc":"result = pd.read_csv('..\/input\/google-cloud-ncaa-march-madness-2020-division-1-mens-tournament\/MDataFiles_Stage1\/MNCAATourneyCompactResults.csv')\nresult = result.drop(columns=['WLoc', 'NumOT', 'DayNum'])\nresult.head()","2718b2c9":"seeds = pd.read_csv('..\/input\/google-cloud-ncaa-march-madness-2020-division-1-mens-tournament\/MDataFiles_Stage1\/MNCAATourneySeeds.csv')\nseeds.Seed = seeds.Seed.map(lambda string : int(string[1:3]))\nseeds.head()","083d7d98":"team_name = pd.read_csv('..\/input\/google-cloud-ncaa-march-madness-2020-division-1-mens-tournament\/MDataFiles_Stage1\/MTeamSpellings.csv',\n                       encoding='cp1252')\nteam_name = team_name.drop_duplicates(subset=['TeamID'], keep='last').reset_index(drop=True)\nteam_name.TeamNameSpelling = team_name.TeamNameSpelling.map(lambda string : string.upper())\nteam_name.head()","17bcc552":"teams_avg_seed = seeds.groupby('TeamID').Seed.mean().sort_values()\nlow_seed = pd.merge(left=teams_avg_seed, right=team_name, how='left', on=['TeamID'] ).head(20)\nplt.figure(figsize=(20,10))\nax = sns.barplot(low_seed.Seed, low_seed.TeamNameSpelling)\nplt.title('Top 20 rich-traditional NCAA Teams')\nfor p in ax.patches:\n    plt.text(p.get_width()-0.07, \n    p.get_y()+0.55*p.get_height(),f'{p.get_width():.2f}',ha='center', va='center')","ad108ef7":"Wname = team_name.rename(columns={'TeamNameSpelling':'Wteam_name', 'TeamID':'WTeamID'})\nteam_result = pd.merge(left=result, right=Wname, how='left', on=['WTeamID'])\n\nwin_by_year = team_result.groupby(['Season', 'Wteam_name'])\\\n              ['WScore'].count().reset_index()\\\n              .rename(columns={'Wteam_name':'Team', 'WScore':'Win_matches'})\n              \ndf = win_by_year[win_by_year.Win_matches == win_by_year.Win_matches.max()].drop(columns=['Win_matches']).set_index('Season')\ndf","42bbf039":"plt.figure(figsize=(22,8))\nax = sns.countplot(df.Team)\nfor p in ax.patches:\n    ax.text(p.get_x()+p.get_width()\/2., p.get_height()+0.05, f'{p.get_height()}',ha='center')\nplt.title('Most successful colleges in the NCAA Tournament')\nplt.ylabel('Number of NCAA titles')","c43def73":"win_by_year = win_by_year.groupby(['Team', 'Season']).Win_matches.sum()\\\n              .unstack(fill_value=0).cumsum(axis=1).sort_values(by=2019, ascending=False).head(15)\ncum_win = pd.melt(win_by_year, value_vars=win_by_year.columns, value_name=\"Win_matches\")\ncum_win['Team'] = list(win_by_year.index)*35\ncum_win = cum_win[['Season', 'Team', 'Win_matches']]","d5c530e4":"fig, ax = plt.subplots(figsize=(15, 8))\n\ncolors = [\"#\"+''.join([random.choice('0123456789ABCDEF') for j in range(6)]) for i in range(15)]\nteam2color = dict(zip(cum_win.Team, colors))\n\ndef draw_barchart(current_season):\n    dff = cum_win[cum_win['Season'].eq(current_season)].sort_values(by='Win_matches', ascending=True)\n    ax.clear()\n    ax.barh(dff['Team'], dff['Win_matches'], color=dff['Team'].map(team2color))\n    dx = dff['Win_matches'].max() \/ 200\n    for i, (value, name) in enumerate(zip(dff['Win_matches'], dff['Team'])):\n        ax.text(value-dx, i,     name,       size=10, weight=600, ha='right', va='bottom')\n        ax.text(value+dx, i,     f'{value:}',size=10, ha='left',  va='center')\n        \n    ax.text(1, 0.4, current_season, transform=ax.transAxes, color='#777777', size=46, ha='right', weight=800)\n    ax.text(0, 1.06, 'Matches', transform=ax.transAxes, size=12, color='#777777')\n    ax.xaxis.set_major_formatter(ticker.StrMethodFormatter('{x:,.0f}'))\n    ax.xaxis.set_ticks_position('top')\n    ax.tick_params(axis='x', colors='#777777', labelsize=12)\n    ax.set_yticks([])\n    ax.margins(0, 0.01)\n    ax.grid(which='major', axis='x', linestyle='-')\n    ax.set_axisbelow(True)\n    ax.text(0, 1.15, 'Number of win matches of top 15 NCAA teams from 1985 to 2019',\n            transform=ax.transAxes, size=24, weight=600, ha='left', va='top')\n    plt.box(False)\n    \nanimator = animation.FuncAnimation(fig, draw_barchart, frames=range(1985, 2020),repeat=True, interval=500)\nHTML(animator.to_jshtml())","4592f703":"Wseeds = seeds.rename(columns={'TeamID':'WTeamID', 'Seed':'WSeed'})\nLseeds = seeds.rename(columns={'TeamID':'LTeamID', 'Seed':'LSeed'})\n\ndata = pd.merge(left=result, right=Wseeds, how='left', on=['Season', 'WTeamID'])\ndata = pd.merge(left=data, right=Lseeds, on=['Season', 'LTeamID'])\n\ndata.head()","ae3139de":"low_seed_win = data[data.WSeed < data.LSeed].groupby('Season')['WSeed'].count()\nhigh_seed_win = data[data.WSeed > data.LSeed].groupby('Season')['WSeed'].count()\n\nplt.figure(figsize=(20,10))\nN = len(low_seed_win)\nlow_seed_win_std = low_seed_win - low_seed_win.mean()\nhigh_seed_win_std = high_seed_win - high_seed_win.mean()\n\nind = np.arange(N)   \nwidth = 0.35       \n\np1 = plt.bar(ind, low_seed_win, width, yerr=low_seed_win_std)\np2 = plt.bar(ind, high_seed_win, width,\n             bottom=low_seed_win, yerr=high_seed_win_std)\np3 = plt.plot(np.arange(-1,N+1), [low_seed_win.mean()]*(N+2), linestyle='--', color='yellow')\nplt.ylabel('Number of matches')\nplt.title('Winning ratio over years')\nplt.xticks(ind, low_seed_win.index)\nplt.yticks(np.arange(0, 81, 10))\n\nplt.legend((p1[0], p2[0], p3[0]), ('Low seed wins', 'High seed wins', f'Average : {low_seed_win.mean():.2f} (matches)'))\n\nplt.show()","a48b8958":"scores = pd.read_csv('..\/input\/google-cloud-ncaa-march-madness-2020-division-1-mens-tournament\/MDataFiles_Stage1\/MRegularSeasonCompactResults.csv')\nscores.head()","4d25fa56":"Lscores = scores[['Season', 'WTeamID', 'WScore']].rename(columns={'WTeamID':'TeamID', 'WScore':'Score'})\nWscores = scores[['Season', 'LTeamID', 'LScore']].rename(columns={'LTeamID':'TeamID', 'LScore':'Score'})\n\nresult_scores = pd.concat([Wscores, Lscores])\nresult_scores.head()","e80e1cc5":"season_score = result_scores.groupby(['Season', 'TeamID'])['Score'].sum()\nseason_score.sort_values(ascending=False).head()","008cabc7":"result_scores.sort_values(by='Score', ascending=False).head(15)","59cf7d7c":"team_name[team_name.TeamID.isin([1258, 1328])]","fd940a2d":"data = pd.merge(data, season_score, left_on=['Season', 'WTeamID'], right_on=['Season', 'TeamID'], how='left')\ndata = data.rename(columns={'Score':'WScoreT'})\ndata = pd.merge(data, season_score, left_on=['Season', 'LTeamID'], right_on=['Season', 'TeamID'], how='left')\ndata = data.rename(columns={'Score':'LScoreT'})\ndata = data.drop(columns=['WScore', 'LScore'])\ndata.head()","1b916b6c":"low_score_win = data[data.WScoreT < data.LScoreT].groupby('Season')['WSeed'].count()\nhigh_score_win = data[data.WScoreT > data.LScoreT].groupby('Season')['WSeed'].count()\n\nplt.figure(figsize=(20,10))\nN = len(low_score_win)\nlow_score_win_std = low_score_win - low_score_win.mean()\nhigh_score_win_std = high_score_win - high_score_win.mean()\n\nind = np.arange(N)   \nwidth = 0.35       \n\np1 = plt.bar(ind, low_score_win, width, yerr=low_score_win_std)\np2 = plt.bar(ind, high_score_win, width,\n             bottom=low_score_win, yerr=high_score_win_std)\np3 = plt.plot(np.arange(-1,N+1), [low_score_win.mean()]*(N+2), linestyle='--', color='yellow')\nplt.ylabel('Number of matches')\nplt.title('Winning ratio over years')\nplt.xticks(ind, low_score_win.index)\nplt.yticks(np.arange(0, 81, 10))\nplt.legend((p1[0], p2[0], p3[0]), ('Low score wins', 'High score wins', f'Average : {low_score_win.mean():.2f} (matches)'))\n\nplt.show()","bb2b3b67":"Wdata = data.drop(columns=['Season', \n                           #'WTeamID', \n                           #'LTeamID'\n                           ])\nWdata.rename(columns={'WSeed':'Seed1', 'LSeed':'Seed2', \n                      'WScoreT':'ScoreT1', 'LScoreT':'ScoreT2',\n                      'WTeamID':'TeamID_1', 'LTeamID': 'TeamID_2'}, inplace=True)\nWdata.head()","fd451750":"Ldata = data[['LTeamID', 'WTeamID', 'LSeed', 'WSeed', 'LScoreT', 'WScoreT']]\nLdata.rename(columns={'LTeamID':'TeamID_1', 'WTeamID':'TeamID_2', \n                      'LSeed':'Seed1', 'WSeed':'Seed2', \n                      'LScoreT':'ScoreT1', 'WScoreT':'ScoreT2',}, inplace=True)\nLdata.head()","50eb178f":"Wdata['Seed_diff'] = Wdata['Seed1'] - Wdata['Seed2']\nWdata['ScoreT_diff'] = Wdata['ScoreT1'] - Wdata['ScoreT2']\nLdata['Seed_diff'] = Ldata['Seed1'] - Ldata['Seed2']\nLdata['ScoreT_diff'] = Ldata['ScoreT1'] - Ldata['ScoreT2']","ee557687":"# At present, I drop the Season columns but this figure can play an important role \nWdata['result'] = 1\nLdata['result'] = 0\ntrain = pd.concat((Wdata, Ldata)).reset_index(drop=True)\n#train = train[train.TeamID_1 < train.TeamID_2]\n#train['Season'] = data.Season\ntrain.head()","664a6cf2":"result0 = train[train.result==0]\nresult1 = train[train.result==1]\n\ncols = train.columns.drop(['TeamID_1', 'TeamID_2', 'result'])\nfig, ax = plt.subplots(2,3,figsize=(22,7))\n\nfor i, col in enumerate(cols):\n    plt.subplot(2,3,i+1)\n    plt.xlabel(col, fontsize=9)\n    sns.kdeplot(result0[col].values, bw=0.5,label='Result: Lose')\n    sns.kdeplot(result1[col].values, bw=0.5,label='Result: Win')  \nplt.show() ","7fa3fbb9":"# a seimple heatmap\nplt.figure(figsize=(10,7))\ncols = train.columns.drop(['TeamID_1', 'TeamID_2'])\ncorr = train[cols].corr()\nsns.heatmap(corr, \n            xticklabels=corr.columns.values,\n            yticklabels=corr.columns.values)","f48caeda":"# Extract year and ID number out of string\ntest = pd.read_csv('..\/input\/google-cloud-ncaa-march-madness-2020-division-1-mens-tournament\/MSampleSubmissionStage1_2020.csv')\ntest['Season'] = test.ID.map(lambda string : int(string.split('_')[0]))\ntest['TeamID_1'] = test.ID.map(lambda string : int(string.split('_')[1]))\ntest['TeamID_2'] = test.ID.map(lambda string : int(string.split('_')[2]))\ntest = test.drop(columns=['ID'])\ntest.head()","c373d3e2":"# Convert test data to the train set's format\ntest = pd.merge(test, seeds, left_on=['Season', 'TeamID_1'], right_on=['Season', 'TeamID'], how='left')\ntest.rename(columns={'Seed':'Seed1'}, inplace=True)\ntest = test.drop('TeamID', axis=1)\ntest = pd.merge(test, seeds, left_on=['Season', 'TeamID_2'], right_on=['Season', 'TeamID'], how='left')\ntest.rename(columns={'Seed':'Seed2'}, inplace=True)\ntest = test.drop('TeamID', axis=1)\ntest = pd.merge(test, season_score, left_on=['Season', 'TeamID_1'], right_on=['Season', 'TeamID'], how='left')\ntest.rename(columns={'Score':'ScoreT1'}, inplace=True)\ntest = pd.merge(test, season_score, left_on=['Season', 'TeamID_2'], right_on=['Season', 'TeamID'], how='left')\ntest.rename(columns={'Score':'ScoreT2'}, inplace=True)\ntest['Seed_diff'] = test['Seed1'] - test['Seed2']\ntest['ScoreT_diff'] = test['ScoreT1'] - test['ScoreT2']\n#test = test.drop(columns=['Pred', 'Season', 'TeamID_1', 'TeamID_2'])\ntest = test.drop(columns=['Pred', 'Season'])\ntest.head()","cc0998f7":"X_train = train.drop(columns=['result'])\ny_train = train.result\nX_test = test.copy()\n\ndata_full = pd.concat([X_train, X_test])\ndata_full.shape","6cc82c3a":"OH_cols = ['TeamID_1', 'TeamID_2']\n\nOH_full = pd.get_dummies(\n    data_full[OH_cols],\n    columns=OH_cols,\n    drop_first=True,\n    dummy_na=True,\n    sparse=True,\n).sparse.to_coo()","a4d40d67":"retain_full = data_full.drop(columns=OH_cols)\nretain_full = retain_full\/retain_full.max()\nretain_full.head()","5ad1e643":"encoded_full = scipy.sparse.hstack([OH_full, retain_full, retain_full**2]).tocsr()\nprint(encoded_full.shape)\n\nencoded_train = encoded_full[:len(X_train)]\nencoded_test = encoded_full[len(X_train):]","1ed082fe":"submission = pd.read_csv('..\/input\/google-cloud-ncaa-march-madness-2020-division-1-mens-tournament\/MSampleSubmissionStage1_2020.csv')\nsubmission.head()","4fa7eeba":"LGB = LGBMClassifier(\n    n_estimators=10000,\n    learning_rate =0.005,\n    max_depth=-1,\n    objective= 'binary',\n    eval_metric='cross_entropy',\n    first_metric_only=True,)","e07c547c":"n_folds = 10\ncv = StratifiedKFold(n_splits=n_folds, shuffle=True)\nlosses = []\nLGB_predicts = []\nfor i, (train,valid) in enumerate(cv.split(encoded_train, y_train)):\n\n    LGB.fit(encoded_train[train], y_train[train], \n            eval_set=[(encoded_train[train], y_train[train]), (encoded_train[valid, :], y_train[valid])], \n            verbose=False)\n\n    test_pred = LGB.predict_proba(encoded_test)[:,1]\n    LGB_predicts.append(test_pred)\n\n# Take the average probabilty on 10 folds\nLGB_predicts = np.asarray(LGB_predicts)\nLGB_predict = np.mean(LGB_predicts, axis=0)","2ea8e6b4":"submission.Pred = LGB_predict\nsubmission.to_csv(f'LGB.csv', index=False)","c8ccac88":"opt_result = pd.read_csv('..\/input\/google-cloud-ncaa-march-madness-2020-division-1-mens-tournament\/MDataFiles_Stage1\/MNCAATourneyCompactResults.csv')\nopt_result = opt_result[opt_result.Season > 2014].reset_index()\nopt_result = opt_result[['Season', 'WTeamID', 'LTeamID']]\nopt_result.head()","7cf04a54":"# Convert the result to sample submission's format\nfor index, match in opt_result.iterrows():\n\n    opt_result.loc[index, 'ID'] = f\"{match.Season}_{'_'.join(str(num) for num in sorted([match.WTeamID,match.LTeamID]))}\"\n    opt_result.loc[index, 'Pred'] = 1 if match.WTeamID < match.LTeamID else 0\n    \nopt_result = opt_result[['ID', 'Pred']]\nopt_result.head()","9728e659":"opt_test = pd.read_csv('..\/input\/google-cloud-ncaa-march-madness-2020-division-1-mens-tournament\/MSampleSubmissionStage1_2020.csv').drop(columns='Pred')\nopt_test.head()","d55ff8f5":"# This file is the one you can take like your homework keys\npredict = pd.merge(left=opt_test, right=opt_result, how='left', on='ID')\npredict.Pred = predict.Pred.fillna(0)\npredict.to_csv('Phan_Viet_Hoang.csv', index=False)","872bda8b":"#### On average, a team with lower score has about 24% chance to win against their opponent","85bd1dc8":"It's hard for me to provide any conclusion here, the patterns sharply fluctuate and it seems there isn't ay clear correlation between these figures in both results. As [Mr. Clutch](https:\/\/www.pinterest.cl\/pin\/326229566755829747\/) 's quote:\n\n![4fa546e81c8c06ae99f941bd89af2cb8](https:\/\/user-images.githubusercontent.com\/52401767\/74668815-91418f00-51d8-11ea-8c0e-647e34895856.jpg)\n","94f216cf":"#### The 2 most prestigious and rich-traditional teams are Duke and Kansas Jayhawks. I had predicted that before I entered this compettion because Blue Devils won 5 NCAA Championships (fourth all-time) and has an NCAA-best 75,5% NCAA tournament winning percentage. And  other one is currently all-time consecutive conference titles record holder with 14 consecutive titles (2005-2018), also has 5 overall claimed National Championships\n\n![maxresdefault](https:\/\/user-images.githubusercontent.com\/52401767\/74656114-1cfaf180-51c0-11ea-9fb1-b5a73955ad91.jpg)\n","5fd32e96":"### Creat a bar chart race to have a greater insight into these basketball team's performance\n\nPause button is on the middle\n\n[Reference](https:\/\/towardsdatascience.com\/bar-chart-race-in-python-with-matplotlib-8e687a5c8a41)","33fa4ee9":"## Calculate the seed and score difference","e8950ac8":"# Model","c5388292":"<p><font size=\"3\" color=\"green\">Last update on 17\/2\/2020<\/font><\/p> \n<p><font size=\"5\" color=\"yellow\">What's next?<\/font><\/p>\n\n- Try others feature engineering technique (especially with the time series data)\n- Get some visualization (like my previous work \ud83d\ude05\ud83d\ude05)\n- Fine tune the vanilla Catboost\n- Update them in this kernel\n\n<p><font size=\"3\" color=\"red\">Thank you<\/font> for spending time on my kernel!<\/p>","ea0ee427":"### Loyola Marymount Lions and Oklahoma Sooners\n\nIn 1991, when two of the top four highest-scoring NCAAT games were recorded, the Lions' scored 186 points on a crazy match \u2014 15 more than the next highest team - the Sooner. But on the previous year, Oklahoma scored 7 more points on a single match compares to Loyola Marymount. They are actually rivals on that time the Lions were masters of getting other teams to play at their pace and the Sooner even beat Kansas beaten twice in regular season play.\n\n\n![sportfximg-119214-10809-1psbkb q8y0g](https:\/\/user-images.githubusercontent.com\/52401767\/74666274-ca2b3500-51d3-11ea-9939-d5efe3a25370.jpg)\n","d28930ea":"# Prepare test data","4b1c109c":"# Feature engineering\n\nMy work is fundamentally inherited from [Pentagram](https:\/\/www.kaggle.com\/nxrprime) 's great work. By the way, I've added some changes","b9de0e01":"### It seems that somehow, The 1258 and 1328 team were involved in all four of the highest scoring games, nine of the top 16 and four of 5 highest all season scoring .  Who are they?","ad6a9811":"## Merge score","29da5a67":"## Merge seeds","3f40862f":"![1_2p1GIUUcRSzyyJjSj4x7Iw](https:\/\/user-images.githubusercontent.com\/52401767\/74623348-daf98d80-5176-11ea-8c70-7494a60b0794.jpeg)\n# Welcome back to my kernel!\n- This is my 'naive' approach for the [Google Cloud & NCAA\u00ae ML Competition 2020-NCAAW](https:\/\/www.kaggle.com\/c\/google-cloud-ncaa-march-madness-2020-division-1-womens-tournament) \n- And as usual, if my work can make you feel excited, help me to <font color='red' size=3>upvote this kernel <\/font>on the right corner \ud83d\udc96\ud83d\udc96\n\nP\/s: I come from Vietnam, so please ignore my English grammar mistakes through out this notebook \ud83d\ude0a\ud83d\ude0a\n","7482f778":"# Optional\n\nInstead of consecutively submitting your prediction, you can get the ground truth label and practice on your local machine","831b06d0":"#### On average, a team with higher seed has up to 44.6% chance to beat higher-appreciated opponent. This is easy to understand and trivially happened in history . As the case of Loyola Marymount on 1990, they are 11st seed that year but the Lion was a blast to watch. They scored averaged 122.4 points per game, which will be discussed below on NCAA's records section \ud83c\udf1f\ud83c\udf1f","7de34a2a":"# Preparation","38191beb":"![0_Q1DUD6HIeksecpPq](https:\/\/user-images.githubusercontent.com\/52401767\/74579824-3a696900-4fd0-11ea-8c65-47dbc8e86f45.png)\n\n## Light Gradient Boosting Machine\n- Faster training speed and higher efficiency.\n- Lower memory usage.\n- Better accuracy.\n- Support of parallel and GPU learning.\n- Capable of handling large-scale data.\n\n[Reference](https:\/\/lightgbm.readthedocs.io\/en\/latest\/)","88c81a5a":"#### List of NCAA  basketball champions in the period of 1985-2019","15fe22a1":"## Keep the Team ID feature","8838580d":"# One-hot Encoding\n\nI will encode team ID (and may be Season as well, in near future) with the pd.get_dummies module for memory\/cpu resourses saving (compare to the corresponding sklearn's OneHotEncoder) and avoid session crashing "}}