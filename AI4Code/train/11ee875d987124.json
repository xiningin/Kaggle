{"cell_type":{"a08d4645":"code","36a3d9dd":"code","6258a00c":"code","8dc70fb5":"code","ad8d2ae7":"code","23b1e788":"code","3e57a70f":"code","b431806e":"code","c62d8e54":"code","d8b23353":"code","8b632d65":"code","08ff7175":"code","42af056b":"code","b024b1b9":"code","9abdeedf":"code","e9fd2837":"code","d67ddf10":"code","7606d19b":"code","41d16f44":"code","d3ece5f6":"code","364202a1":"code","0c15e2e8":"markdown","03e9d8a0":"markdown","0877815a":"markdown"},"source":{"a08d4645":"import numpy as np \nimport pandas as pd \nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom sklearn.preprocessing import LabelEncoder\nfrom sklearn.model_selection import train_test_split\nfrom sklearn import tree\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.metrics import classification_report\nfrom sklearn.metrics import confusion_matrix\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n","36a3d9dd":"# importing data\ntrain_data = pd.read_csv(\"\/kaggle\/input\/titanic\/train.csv\")\ntrain_data","6258a00c":"train_data.describe()","8dc70fb5":"train_data.info()","ad8d2ae7":"# dropping columns that have no effect on the outcome of the model\ntrain_data.drop(['PassengerId', 'Name', 'Ticket'], axis=1, inplace=True)\ntrain_data","23b1e788":"# checking whether missing values in age is random or systematic\ntrain_data.groupby(train_data['Age'].isnull()).mean()","3e57a70f":"# filling in missing age values with mean age\ntrain_data['Age'].fillna(train_data['Age'].mean(), inplace=True)\ntrain_data.isnull().sum()","b431806e":"# checking if missing values in cabin in sytematic or random\ntrain_data.groupby(train_data['Cabin'].isnull()).mean()","c62d8e54":"# creating a column called cabin_ind to store values for where cabin in null(0) or not(1)\ntrain_data['Cabin_ind'] = np.where(train_data['Cabin'].isnull(), 0, 1)\ntrain_data","d8b23353":"# dropping cabin column\ntrain_data.drop('Cabin', axis=1, inplace=True)\ntrain_data","8b632d65":"# converting sex into numerical values\nle = LabelEncoder()\ntrain_data['Sex'] = le.fit_transform(train_data['Sex'])\ntrain_data","08ff7175":"# converting embarked column to numerical\n\ndummies = pd.get_dummies(train_data['Embarked'], prefix='Embarked')\ntrain_data = pd.concat([train_data, dummies], axis=1)\ntrain_data.drop('Embarked', inplace=True, axis=1)\ntrain_data","42af056b":"train_data.isnull().sum()","b024b1b9":"X = train_data.drop('Survived', axis=1)\ny = train_data['Survived']\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.2, random_state=0)\n","9abdeedf":"clf = DecisionTreeClassifier(max_depth=3, min_samples_leaf=10)\nclf.fit(X_train, y_train)\npred = clf.predict(X_test)\nreport = classification_report(y_test, pred)\nprint(report)","e9fd2837":"feature_names = X.columns\nfig = plt.figure(figsize=(25,20))\ntree_plot = tree.plot_tree(clf, \n                   feature_names=feature_names,\n                   class_names=['Not Survived', 'Survived'],\n                   filled=True)\n","d67ddf10":"# using entire training data\nclf_final = DecisionTreeClassifier(max_depth=3, min_samples_leaf=10)\nclf_final.fit(X, y)","7606d19b":"test_data = pd.read_csv(\"\/kaggle\/input\/titanic\/test.csv\")\n#dropping unneeded columns\ntest_data = test_data.drop(['Name', 'Ticket'], axis=1)\n#filling in missing data in age, cabin and fare\ntest_data['Age'].fillna(test_data['Age'].mean(), inplace=True)\ntest_data['Fare'].fillna(test_data['Fare'].mean(), inplace=True)\ntest_data['Cabin_ind'] = np.where(test_data['Cabin'].isnull(), 0, 1)\n\n# dropping cabin column\ntest_data.drop('Cabin', axis=1, inplace=True)\n\n# encoding sex feature to numerical\nle = LabelEncoder()\ntest_data['Sex'] = le.fit_transform(test_data['Sex'])\n#encoding emmbarked column to numerical\ntest_dummies = pd.get_dummies(test_data['Embarked'], prefix='Embarked')\n\ntest_data = pd.concat([test_data, test_dummies], axis=1)\ntest_data.drop('Embarked', inplace=True, axis=1)\n\ntest_data.info()","41d16f44":"test_predictions = clf_final.predict(test_data.drop('PassengerId', axis=1))\ntest_predictions","d3ece5f6":"test_data['Survived'] = test_predictions\ntest_data.drop(['Pclass','Age','Sex','SibSp','Parch','Embarked_C','Embarked_Q','Embarked_S', 'Fare', 'Cabin_ind'],inplace=True,axis=1)\ntest_data","364202a1":"test_data.to_csv('Submission.csv', index = False)","0c15e2e8":"There are no longer missing values in the age column, but there are missing values in the Cabin and Embarked column","03e9d8a0":"Clearly, there is a higher survival rate(about 67%) for when Cabin values were not missing than when cabin values were missing(about 30%). This shows that the missing values in the Cabin column was systematic amd is a very strong indicator of whether someone survived or not. As a result, although the missing values represent a very percentage or our dataset, we will not drop the missing values, but rather convert it to numerical values with a binary indicator to help our classification.","0877815a":"Although there are some significant values in Fare and Parch for when age was missing or not, the difference in survival rate for when age was missing or not is not so much. As a result, we can treat the missing values in age as random and not sytematic. Hence we can go ahead and fill in the missing values in age with the mean age, since doing so these not bias the model towards any outcome."}}