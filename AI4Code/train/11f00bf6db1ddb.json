{"cell_type":{"7e016f1a":"code","7993ccc1":"code","62375843":"code","aeffb55d":"code","5106fad1":"code","363e66ca":"code","6827e007":"code","f82d23e7":"code","a6738801":"code","aadcf23d":"code","93f8b6da":"code","bd24e4dd":"code","12811cbf":"code","ad4bbbfc":"code","3266507c":"code","44fdb043":"code","3dd63f6e":"code","387f9141":"code","9c8bf94a":"code","52af603f":"code","9765c603":"code","9cdc8eae":"code","a0445e4d":"code","376a0e76":"code","eb58395f":"code","6d06790e":"code","1fb986bf":"code","b8ff60f3":"code","b26a9f11":"code","fc9aa83f":"code","52fe88d7":"code","8d7c0d1c":"code","519d89f5":"code","e590991d":"code","9e55d0fe":"code","b75d4d60":"code","3d1399a1":"code","1d8e5aa4":"code","d6e2b987":"code","357bec08":"code","28dd426d":"code","3a3ce456":"code","f5086d54":"markdown","7869217b":"markdown"},"source":{"7e016f1a":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","7993ccc1":"def loadData_train(filename, trainData=[]):\n    for x in range(781):\n        row = filename.iloc[x]\n        trainData.append([int(row[0]), row[1], row[2], row[3], row[4], row[5], row[6], row[7], row[8]])\n    for x in range(len(trainData)):\n        for y in range(1, 9):\n            trainData[x][y] = float(trainData[x][y])\n\n        \ndef loadData_test(filename, testData=[]):\n    for x in range(418):\n        row = filename.iloc[x]\n        testData.append([row[0], row[1], row[2], row[3], row[4], row[5], row[6], row[7]])\n    \n    for x in range(len(testData)):\n        for y in range(8):\n            testData[x][y] = float(testData[x][y])\n    ","62375843":"import math\ndef euclideanDistance(trainInstance, testInstance, length):\n    distance = 0\n    \n    for x in range(length):\n        distance += pow(trainInstance[x+1] - testInstance[x], 2)\n    \n    return math.sqrt(distance)\n    ","aeffb55d":"import operator\n\ndef getNeighbors(trainData, testInstance, k):\n    length = len(testInstance)\n    distance = []\n    for x in range(len(trainData)):\n        dis = euclideanDistance(trainData[x], testInstance, length)\n        distance.append((trainData[x], dis))\n    \n    distance.sort(key=operator.itemgetter(1))\n    \n    neighbors = []\n    for x in range(k):\n        neighbors.append(distance[x][0])\n    \n    return neighbors","5106fad1":"def getResponce(neighbors):\n    dictonary = {}\n    \n    for x in range(len(neighbors)):\n        if neighbors[x][0] in dictonary:\n            dictonary[neighbors[x][0]] += 1\n        else:\n            dictonary[neighbors[x][0]] = 1\n\n    sortDict = sorted(dictonary.items(), key=operator.itemgetter(1), reverse=True)\n    \n    return sortDict[0][0]","363e66ca":"def getAccuracy(prediction, original):\n    correct = 0\n    \n    for x in range(len(prediction)):\n        row = original.iloc[x]\n        if prediction[x] == row[1]:\n            correct += 1\n    print('correct prediction :', correct)\n    return (correct \/ float(len(original))) * 100.0","6827e007":"Train_data = pd.read_csv('\/kaggle\/input\/titanic\/train.csv')\nTrain_data.head()","f82d23e7":"Test_data = pd.read_csv('\/kaggle\/input\/titanic\/test.csv')\n\nTest_data.head()","a6738801":"print(Train_data.info())\nprint('\\n')\nprint(Test_data.info())","aadcf23d":"Train_data = Train_data.drop(['Ticket', 'Cabin'], axis=1)\nTest_data = Test_data.drop(['Ticket', 'Cabin'], axis=1)","93f8b6da":"Train_data['Title'] = Train_data.Name.str.extract('([A-Za-z]+)\\.', expand=False)\nTest_data['Title'] = Test_data.Name.str.extract('([A-Za-z]+)\\.', expand=False)","bd24e4dd":"pd.crosstab(Train_data['Title'], Train_data['Sex'])","12811cbf":"combines = [Train_data, Test_data]\n\nfor dataset in combines:\n    dataset['Title'] = dataset['Title'].replace(['Lady', 'Countess', 'Capt', 'Col', 'Don', 'Dr', 'Major', 'Rev', 'Sir', 'Jonkheer'], 'Rare')\n    dataset['Title'] = dataset['Title'].replace(['Mlle', 'Ms'], 'Miss')\n    dataset['Title'] = dataset['Title'].replace('Mme', 'Mrs')\n    ","ad4bbbfc":"pd.crosstab(Train_data['Title'], Train_data['Sex'])","3266507c":"title_mapping = {'Mr': 1, 'Miss': 2, 'Mrs': 3, 'Master': 4, 'Rare': 5}\n\nfor dataset in combines:\n    dataset['Title'] = dataset['Title'].map(title_mapping)\n    dataset['Title'] = dataset['Title'].fillna(0)\n    ","44fdb043":"Train_data = Train_data.drop(['Name', 'PassengerId'], axis=1)\nTest_data = Test_data.drop('Name', axis=1)\ncombines = [Train_data, Test_data]","3dd63f6e":"for dataset in combines:\n    dataset['Sex'] = dataset['Sex'].map({'female':0, 'male':1}).astype(int)","387f9141":"mid1 = Train_data['Age'].mean()\nmid2 = Test_data['Age'].mean()\n\nx_mid = (mid1 + mid2) \/ 2\n\nTrain_data['Age'].fillna(x_mid, inplace = True)\nTest_data['Age'].fillna(x_mid, inplace = True)\n\ncombines = [Train_data, Test_data]\n","9c8bf94a":"for dataset in combines:\n    dataset['Age'] = dataset['Age'].astype(int)","52af603f":"for dataset in combines:\n    dataset.loc[(dataset.Fare.isnull()), 'Fare'] = dataset['Fare'].mode()[0] ","9765c603":"freq_port = dataset.Embarked.dropna().mode()[0]\nprint(freq_port)\nfor dataset in combines:\n    dataset['Embarked'] = dataset['Embarked'].fillna(freq_port)\n    dataset['Embarked'] = dataset['Embarked'].map({'S':0, 'C':1, 'Q':2}).astype(int)","9cdc8eae":"Test_data = Test_data.drop('PassengerId', axis=1)","a0445e4d":"Train_data.info()","376a0e76":"Test_data.info()","eb58395f":"Train_data.head(2)","6d06790e":"Test_data.head(2)","1fb986bf":"Train_data.drop_duplicates()","b8ff60f3":"X_train = Train_data.drop('Survived', axis=1)\nY_train = Train_data['Survived']\nX_test = Test_data","b26a9f11":"from sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.metrics import accuracy_score\nfrom sklearn.model_selection import cross_val_score\nimport seaborn as sns \n\nknn = KNeighborsClassifier(n_neighbors=3)\nknn.fit(X_train, Y_train)\nY_pred = knn.predict(X_test)\nacc = round(knn.score(X_train, Y_train) * 100, 2)\nprint('Accuracy : ', acc)\nout = pd.read_csv('\/kaggle\/input\/titanic\/gender_submission.csv')\nacc2 = getAccuracy(Y_pred, out)\nprint('Accuracy : ', acc2)\n\nacc3 = accuracy_score(y_pred=Y_pred, y_true=out['Survived'])\nprint('Accuracy : ', acc3)","fc9aa83f":"knn = KNeighborsClassifier(n_neighbors=5)","52fe88d7":"x = Train_data.drop('Survived', axis=1)\ny = Train_data['Survived']","8d7c0d1c":"# 10 fold cross validation\nscore = cross_val_score(knn, x, y, cv=10, scoring='accuracy')\nscore","519d89f5":"score.mean()","e590991d":"# for best value of k Neighbors\nk_range = range(1, 41)\nscore_li = []\n\nfor k in range(1, 41):\n    knn = KNeighborsClassifier(n_neighbors=k)\n    score = cross_val_score(knn, x, y, cv=10, scoring='accuracy')\n    score_li.append(score.mean())","9e55d0fe":"score_li[:10]","b75d4d60":"sns.lineplot(x = k_range, y = score_li)","3d1399a1":"trainData = []\ntestData = []\nloadData_train(Train_data, trainData)\nloadData_test(Test_data, testData)\n\ntrainData[:5]","1d8e5aa4":"testData[:5]","d6e2b987":"k = 3\nprediction = []\nfor x in range(len(testData)):\n    neighbors = getNeighbors(trainData, testData[x], k)\n    result = getResponce(neighbors)\n    prediction.append(result)\n    ","357bec08":"prediction[:10]","28dd426d":"out = pd.read_csv('\/kaggle\/input\/titanic\/gender_submission.csv')\nout.head()","3a3ce456":"accuracy = getAccuracy(prediction, out)\n\nprint(accuracy)","f5086d54":"# Now here we find the prediction by using user defined functions.","7869217b":"## Prediction By using inbuild KNN classifier"}}