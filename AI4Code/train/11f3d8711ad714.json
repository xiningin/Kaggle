{"cell_type":{"005549c3":"code","f4b0df82":"code","42ddda86":"code","a9f8262f":"code","55730f67":"code","08b2747b":"code","970da290":"code","a6d3f40a":"code","17bfacb3":"code","e5c7823d":"code","74309374":"code","27e4f75b":"code","c907547f":"code","5ccbaa62":"code","a2f54f2c":"code","f26a23b1":"code","cce64002":"code","9461d3e8":"code","6dec5560":"code","2d484bf5":"code","3be1204f":"code","6d3abc89":"code","91edce67":"code","83942a50":"code","a1ee1145":"code","cb9745e3":"code","34a71a95":"code","17e81903":"code","a98f5cb3":"code","d7bc748c":"code","1656a26c":"code","811280ab":"code","b5d43263":"code","55f0c95c":"code","2558f1e8":"code","02d96aa3":"code","92693a37":"code","923e9f74":"code","afc5ba94":"code","31f6c9b5":"code","cd388236":"markdown","8c6cca33":"markdown","6ff7e6cd":"markdown","c175607d":"markdown","dd995f5d":"markdown","89883b04":"markdown","4a7978e1":"markdown","71cfc4d1":"markdown","361ee454":"markdown","f29d422e":"markdown","ff5a6f81":"markdown","a4001062":"markdown","97cfe11e":"markdown"},"source":{"005549c3":"\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.model_selection import GridSearchCV\nfrom sklearn.pipeline import Pipeline\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.model_selection import GridSearchCV\nfrom sklearn.pipeline import Pipeline\nfrom sklearn.preprocessing import MinMaxScaler","f4b0df82":"train = pd.read_csv('..\/input\/tabular-playground-series-aug-2021\/train.csv')\ntest = pd.read_csv('..\/input\/tabular-playground-series-aug-2021\/test.csv')\nsubmession = pd.read_csv('..\/input\/tabular-playground-series-aug-2021\/sample_submission.csv')","42ddda86":"train.head()","a9f8262f":"print(\"The Shape of Training Set : {}\".format(train.shape))\nprint(\"The Shape of Testing Set : {}\".format(test.shape))\nprint(\"The Shape of Submession Set : {}\".format(submession.shape))\n\n\n","55730f67":"train.isnull().sum().sort_values(ascending =False)","08b2747b":"test.isnull().sum().sort_values(ascending =False)","970da290":"submession.isnull().sum().sort_values(ascending =False)","a6d3f40a":"test.head()","17bfacb3":"sns.displot(train.loss)","e5c7823d":"sns.displot(submession.loss)","74309374":"submession.loss.value_counts(ascending =False)","27e4f75b":"fig = plt.figure(figsize=(15,12))\nsns.heatmap(train.corr())","c907547f":"corr_train=train.corr()\ncorr_train = corr_train['loss'].sort_values(ascending=False).round(2)\ncorr_train","5ccbaa62":"corr_train[corr_train >0]","a2f54f2c":"# No Relevant for the Work\nX = train.drop('id', axis = 1)\nX_test = test.drop('id', axis = 1)\n","f26a23b1":"X.shape","cce64002":"X.dtypes.value_counts()","9461d3e8":"X.head()\ntest.head()","6dec5560":"X = X.drop('loss',axis = 1)\nprint(\"Shape of the dependent Features {}\".format(X.shape))\ny = train['loss']\n","2d484bf5":"print(\"The Shape of X : {}\".format(X.shape))\nprint(\"The Shape of X_test : {}\".format(X_test.shape))\n","3be1204f":"X_train,X_val,y_train,y_val=train_test_split(X,y,test_size = 0.3, random_state = 1)\n","6d3abc89":"from sklearn.decomposition import PCA\nfrom sklearn.preprocessing import MinMaxScaler\nfrom sklearn.pipeline import Pipeline\n\n#The best 50 Features\npca = Pipeline([('scale', MinMaxScaler()), ('pca', PCA(49, random_state=0))\n]).fit(X_train)\nX_train_pca = pca.transform(X_train)\nX_val_pca = pca.transform(X_val)\nX_test =pca.transform(X_test)","91edce67":"from sklearn.tree import DecisionTreeRegressor\ndt = DecisionTreeRegressor(random_state=123).fit(X_train, y_train)","83942a50":"Features_importance = pd.DataFrame([(col,coef) for col , coef in zip(X.columns,dt.feature_importances_)], \n             columns = ['feature', 'importance']).set_index('feature').sort_values('importance',ascending = False)\nFeatures_importance","a1ee1145":"Features_importance = Features_importance[Features_importance.values > 0.01]\nFeatures_importance.shape","cb9745e3":"Features_importance.index","34a71a95":"X_RF = X[Features_importance.index]\nX_test_RF = test.drop (columns = ['id'])\nX_test_RF = X_test_RF[Features_importance.index]\nX_RF.shape,X_test_RF.shape","17e81903":"from sklearn.ensemble import GradientBoostingRegressor\n\ngbrt = GradientBoostingRegressor(random_state=123, learning_rate=0.1,n_estimators=100).fit(X_train_pca, y_train)\ngbrt_pred=gbrt.predict(X_val_pca)\n\n\n","a98f5cb3":"\nscaler = StandardScaler()\nscaler.fit(X_RF)\nX_RF = scaler.transform(X_RF)\nX_test_RF = scaler.transform(X_test_RF)\nX_train_RF,X_val_RF,y_train,y_val=train_test_split(X_RF,y,test_size = 0.3, random_state = 1)\n\n\n","d7bc748c":"gbrt_RF = GradientBoostingRegressor(random_state=123, learning_rate=0.1,n_estimators=100).fit(X_train_RF, y_train)\nxgb_pred_RF=gbrt_RF.predict(X_val_RF)","1656a26c":"import xgboost\n\n\nxgb=xgboost.XGBRegressor(random_state=24, learning_rate=0.1,n_estimators=100).fit(X_train_pca, y_train)\nxgb_pred=xgb.predict(X_val_pca)","811280ab":"from sklearn.metrics import r2_score\n\nprint(\"gbrt.score: {}\".format(gbrt.score(X_val_pca,y_val)))\nprint(\"gbrt_r2_score: {}\".format(r2_score(y_val,gbrt_pred)))\n\n\nprint(\"xgb.score: {}\".format(gbrt.score(X_val_pca,y_val)))\nprint(\"xgb_r2_score: {}\".format(r2_score(y_val,xgb_pred)))","b5d43263":"from sklearn.metrics import mean_squared_error\n\nrmse_gbrt = mean_squared_error(y_val,gbrt_pred, squared = False)\n\nrmse_xgb = mean_squared_error(y_val,xgb_pred, squared = False)\nrmse_xgb_RF = mean_squared_error(y_val,xgb_pred_RF, squared = False)\n\nprint(\"rmse_xgb :\",rmse_xgb)\nprint(\"rmse_gbrt :\",rmse_gbrt)\nprint(\"rmse_gbrt_RF :\",rmse_xgb_RF)\n","55f0c95c":"X_train.shape,X_test.shape","2558f1e8":"Sub_final_2 = gbrt.predict(X_test)\nSub_final_2 = np.clip(Sub_final_2,y_train.min(),y_train.max()) \nSub_final_2","02d96aa3":"Sub_final_3 = xgb.predict(X_test)\nSub_final_3 = np.clip(Sub_final_3,y_train.min(),y_train.max()) \nSub_final_3","92693a37":"Sub_final_4 = gbrt_RF.predict(X_test_RF)\nSub_final_4 = np.clip(Sub_final_4,y_train.min(),y_train.max()) \nSub_final_4","923e9f74":"gbrt_model=pd.DataFrame({'loss': Sub_final_2})\nxgb_model=pd.DataFrame({'loss': Sub_final_3})\ngbrt_model_RF=pd.DataFrame({'loss': Sub_final_4})\n\nSub_final_2= pd.concat([submession['id'].reset_index(drop=True), gbrt_model], axis=1)\nSub_final_3= pd.concat([submession['id'].reset_index(drop=True), xgb_model], axis=1)\nSub_final_4= pd.concat([submession['id'].reset_index(drop=True), gbrt_model_RF], axis=1)","afc5ba94":"import csv\n\nSub_final_2.to_csv('.\/Submission_gbrt.csv',index=False)\nSub_final_3.to_csv('.\/Submission_xgb.csv',index=False)\nSub_final_4.to_csv('.\/Submission_gbrt_RF.csv',index=False)","31f6c9b5":"pd.read_csv(\".\/Submission_xgb.csv\").head()","cd388236":"## Select the best 50 Column","8c6cca33":"# Plot the Target","6ff7e6cd":"## Analys the Correlation","c175607d":"## Analyse the Data Types","dd995f5d":"# Tabular-Playground Compitution ","89883b04":"## Checking Missvalues","4a7978e1":"## Drop the Id-Feature","71cfc4d1":"## The most correlated Features (Above 0)","361ee454":"## Dimensionality reduction With PCA","f29d422e":"## Split The Dataset","ff5a6f81":"## Model I\n- `GradientBoostingRegressor`","a4001062":"## Model II \n- `XGBRegressor`","97cfe11e":"## Model Evaluation"}}