{"cell_type":{"34ea0a13":"code","46912f55":"code","86954bc2":"code","aed55c87":"code","4fec9211":"code","a03f349f":"code","ad8cbc6f":"code","63c7083a":"code","f62629b9":"code","b5dec077":"code","5c53fb9a":"code","7c324fbf":"markdown"},"source":{"34ea0a13":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","46912f55":"from scipy.io import loadmat\nimport numpy as np\nfrom matplotlib import pyplot as plt\nfrom glob import glob\nfrom os import path","86954bc2":"mat_fps = glob(path.join('\/kaggle\/input\/chiu-2015\/2015_BOE_Chiu\/', '*.mat'))","aed55c87":"mat = loadmat(mat_fps[0])","4fec9211":"fluid_class = 9","a03f349f":"def get_valid_idx(manualLayer):\n    idx = []\n    for i in range(0,61):\n        temp = manualLayer[:,:,i]\n        if np.sum(temp) != 0:\n            idx.append(i)\n    return idx","ad8cbc6f":"# 0~9\n\ndef get_valid_img_seg(mat):\n    manualLayer = np.array(mat['manualLayers1'], dtype=np.uint16)\n    manualFluid = np.array(mat['manualFluid1'], dtype=np.uint16)\n    img = np.array(mat['images'], dtype=np.uint8)\n    valid_idx = get_valid_idx(manualLayer)\n\n\n    manualFluid = manualFluid[:, :, valid_idx]\n    manualLayer = manualLayer[:, :, valid_idx]\n\n    print(manualLayer.shape)\n\n    seg = np.zeros((496, 768, 11))\n    seg[manualFluid > 0] = fluid_class\n    max_col = -100\n    min_col = 900\n    for b_scan_idx in range(0, 11):\n        for col in range(768):\n            cur_col = manualLayer[:, col, b_scan_idx]\n            if np.sum(cur_col) == 0:\n                continue\n\n            max_col = max(max_col, col)\n            min_col = min(min_col, col)\n\n            labels_idx = cur_col.tolist()\n    #         print(f'{b_scan_idx} {labels_idx}')\n    #         labels_idx.append(-1)\n    #         labels_idx.insert(0, 0)\n            last_st = None\n            last_ed = None\n            for label, (st, ed) in enumerate(zip([0]+labels_idx, labels_idx+[-1])):\n    #             print(st, ed)\n                if st == 0 and ed == 0:\n                    st = last_ed\n                    # \u7a7f\u8d8a\u7b2c\u4e00\u5c42\n                    while(seg[st, col, b_scan_idx] == fluid_class):\n                        st += 1\n\n                    while(seg[st, col, b_scan_idx] != fluid_class):\n                        seg[st, col, b_scan_idx] = label\n                        st += 1\n                        if st >= 496:\n                            break\n                    continue\n                if ed == 0:\n                    ed = st + 1\n                    while(seg[ed, col, b_scan_idx] != fluid_class):\n                        ed += 1\n\n                if st == 0 and label != 0:\n                    st = ed-1\n                    while(seg[st, col, b_scan_idx] != fluid_class):\n                        st -= 1\n                    st += 1\n\n                seg[st:ed, col, b_scan_idx] = label\n                last_st = st\n                last_ed = ed\n\n    seg[manualFluid > 0] = fluid_class\n    \n    seg = seg[:, min_col:max_col+1]\n    img = img[:, min_col:max_col+1]\n    return img, seg","63c7083a":"img, seg = get_valid_img_seg(mat)","f62629b9":"plt.imshow(seg[:, :, 0], cmap=plt.cm.jet, vmax=9)","b5dec077":"plt.imshow(img[:, :, 0])","5c53fb9a":"plt.imshow(seg[:, :, 3], cmap=plt.cm.jet, vmax=9)","7c324fbf":"> The 11 B-scans per\npatient were annotated centered at fovea and 5 frames on either side of the fovea\n\nHere use `get_valid_idx` to get the valid B-scans index"}}