{"cell_type":{"a6a5a84b":"code","7fa85be6":"code","96032a0e":"code","3eb83a99":"code","ecfae273":"code","5172e892":"code","3d5ce3f4":"code","41cfd182":"code","5f4352bc":"code","24acd16e":"code","b1ef204e":"code","7d16361f":"code","3dcfa351":"code","83bbc678":"code","9bbb2f4c":"code","a0ccf08b":"code","1cc0256b":"code","37f4e4da":"code","9f93d0f5":"code","977e0c74":"code","cdf2bd0d":"code","0bd820b2":"code","8dd77ba7":"code","99bf7728":"code","dea1764c":"code","82771b36":"code","68694427":"code","2aa09d1d":"code","7b3e7508":"code","f2115308":"code","2ac3b18c":"code","1adca14b":"code","74f71572":"code","c0e1657a":"code","22ddcdf2":"code","176548e6":"code","9dd1139d":"code","1a4b5b4e":"code","07c4033c":"code","9334e677":"code","13b335b4":"code","9c5980f0":"code","d08747e4":"code","885d8b73":"code","2efb1cdc":"code","fd2b71a6":"code","1f71c794":"code","50d36015":"code","15c85bc0":"code","e95de76e":"code","24912070":"code","c70fb08e":"markdown","d406faa8":"markdown","6087394b":"markdown","e75a9e8c":"markdown","df45f453":"markdown","0cdedb53":"markdown","32b25bc0":"markdown"},"source":{"a6a5a84b":"#importing neccessary libraries\nimport pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\n%matplotlib inline\nimport seaborn as sns\nimport datetime\nfrom sklearn.preprocessing import LabelEncoder\nfrom xgboost.sklearn import XGBClassifier\nimport warnings\nwarnings.filterwarnings('ignore')\nfrom sklearn.model_selection import GridSearchCV","7fa85be6":"#Loading the Data\ndf_train = pd.read_csv('..\/input\/airbnb-recruiting-new-user-bookings\/train_users_2.csv.zip')\ndf_test = pd.read_csv('..\/input\/airbnb-recruiting-new-user-bookings\/test_users.csv.zip')\ndf_train.shape, df_test.shape","96032a0e":"labels = df_train.country_destination.values\nid_test = df_test.id\ndf_train.drop(['country_destination'], axis = 1)\n#Concatenating train and test data for EDA\ndf_all = pd.concat((df_train, df_test), axis = 0, ignore_index= True)","3eb83a99":"df_all.shape","ecfae273":"df_all.head()","5172e892":"#Finding the number of null entries in each column.\nfor i in df_all.columns:\n    ab = df_all[i].isnull().sum()\n    if ab != 0:\n        print(i + \" has {} null values.\".format(ab))\n        print()","3d5ce3f4":"df_all.info()","41cfd182":"df_all = df_all.drop(['id','country_destination','date_first_booking'], axis = 1)","5f4352bc":"for i in df_all.columns:\n    ab = df_all[i].isnull().sum()\n    if ab != 0:\n        print(i + \" has {} null values.\".format(ab))\n        print()","24acd16e":"df_all.head()","b1ef204e":"df_all.gender.value_counts()","7d16361f":"df_all.age.describe()","3dcfa351":"df_all[df_all['age']<15].age = np.nan\ndf_all[df_all['age']>=100].age = np.nan","83bbc678":"#Converting below columns as categories for plotting in graphs\ncategorical_features = [\n    'affiliate_channel',\n    'affiliate_provider',\n    'first_affiliate_tracked',\n    'first_browser',\n    'first_device_type',\n    'gender',\n    'language',\n    'signup_app',\n    'signup_method',\n    'signup_flow'\n]\n\nfor categorical_feature in categorical_features:\n    df_all[categorical_feature] = df_all[categorical_feature].astype('category')","9bbb2f4c":"df_all['date_account_created'] = pd.to_datetime(df_all['date_account_created'])\ndf_all['timestamp_first_active'] = pd.to_datetime(df_all['timestamp_first_active'], format='%Y%m%d%H%M%S')","a0ccf08b":"sns.set_style('whitegrid')\nsns.set_context(\"talk\")","1cc0256b":"#Finding the gender distribution\n\nplt.figure(figsize=(14,8))\norder1 = df_all['gender'].value_counts().index\nsns.countplot(data = df_all, x = 'gender', order = order1, color = sns.color_palette()[0])\nplt.xlabel('Gender')\nplt.ylabel('Count')\nplt.title('Gender Distribution')\norder2 = df_all['gender'].value_counts()\n\nfor i in range(order2.shape[0]):\n    count = order2[i]\n    strt='{:0.1f}%'.format(100*count \/ df_all.shape[0])\n    plt.text(i,count+1000,strt,ha='center')","37f4e4da":"#Finding Destination Distribution.\n\nplt.figure(figsize=(14,8))\norder1 = df_train['country_destination'].value_counts().index\nsns.countplot(data = df_train, x = 'country_destination', order = order1, color = sns.color_palette()[1])\nplt.xlabel('Destination')\nplt.ylabel('Count')\nplt.title('Destination Distribution')\norder2 = df_train['country_destination'].value_counts()\n\nfor i in range(order2.shape[0]):\n    count = order2[i]\n    strt='{:0.1f}%'.format(100*count \/ df_train.shape[0])\n    plt.text(i,count+1000,strt,ha='center')","9f93d0f5":"#Extracting year for date_account_created\ndf_all['acc_year'] = df_all['date_account_created'].dt.year\n\n\ndf1 = df_all.groupby('acc_year').count()\ndf1.head()\n\nyears = [2010,2011,2012,2013,2014]\nyearsOrder=pd.api.types.CategoricalDtype(ordered=True, categories=years)\ndf1.reset_index(inplace = True)\ndf1.acc_year = df1.acc_year.astype(yearsOrder)","977e0c74":"#Finding year-wise distribution\n\nplt.figure(figsize=[14,8])\nsns.barplot(data=df1,x='acc_year',y='affiliate_provider',color=sns.color_palette()[2]);\nplt.title('Year wise distribution');\nplt.xlabel('Year')\nplt.ylabel('Counts')\nfor i in range(df1.shape[0]):\n    count=df1.iloc[i]['affiliate_provider']\n    strt='{:0.2f}%'.format(100*count\/df_all.shape[0])\n    plt.text(i,count+1000,strt,ha='center')","cdf2bd0d":"# Creating a month centered dataframe for 2014\ndf2 = df_all[df_all['date_account_created'].dt.year==2014]\ndf2['monthYear14'] = df2['date_account_created'].map(lambda x: x.strftime('%m-%Y'))\ndf2 = df2.groupby('monthYear14').count()","0bd820b2":"#Number of accounts created in different month of 2014\n\nplt.figure(figsize=[14,8])\nsns.barplot(data=df2,x=df2.index,y='affiliate_provider',color=sns.color_palette()[3]);\nplt.title('2014 month wise distribution');\nplt.xlabel('Month-Year')\nplt.ylabel('Counts')\nfor i in range(df2.shape[0]):\n    count=df2.iloc[i]['affiliate_provider']\n    strt='{:0.2f}%'.format(100*count\/df_all.shape[0])\n    plt.text(i,count+100,strt,ha='center')","8dd77ba7":"#Dividing member ages into various bins\n\ndf_all['member_age_bins']=df_all['age'].apply(lambda x: '18 - 20' if 18<x<=20\n                                                  else '20 - 30' if 20<x<=30\n                                                  else '30 - 40' if 30<x<=40\n                                                  else '40 - 50' if 40<x<=50\n                                                  else '50 - 60' if 50<x<=60\n                                                  else '60-70' if 60<x<=70\n                                                  else '70+' if 70<x<=100\n                                                  else np.nan)","99bf7728":"df_all.head()","dea1764c":"# Creating a month centered dataframe for 2014\n\ndf3 = df_all[df_all['date_account_created'].dt.year==2013]\ndf3['monthYear13'] = df3['date_account_created'].map(lambda x: x.strftime('%m-%Y'))\ndf3 = df3.groupby('monthYear13').count()","82771b36":"#Number of accounts created in different month of 2014\n\nplt.figure(figsize=[14,8])\nsns.barplot(data=df3,x=df3.index,y='affiliate_provider',color=sns.color_palette()[4]);\nplt.title('2013 month wise distribution');\nplt.xlabel('Month-Year')\nplt.ylabel('Counts')\nfor i in range(df3.shape[0]):\n    count=df3.iloc[i]['affiliate_provider']\n    strt='{:0.2f}%'.format(100*count\/df_all.shape[0])\n    plt.text(i,count+100,strt,ha='center')","68694427":"#Plotting Age distribution of the members\nplt.figure(figsize=[14,8])\nsns.distplot(df_all.age.dropna(),bins=np.arange(18,100+5,5),color=sns.color_palette()[5],kde=False);\nplt.xlabel('Age of members')\nplt.ylabel('Count')\nplt.title('Age distribution of Users')\nplt.xlim(18,100);","2aa09d1d":"#Destination-Age distribution plot\n\nplt.figure(figsize=[14,8])\nsns.boxplot(data=df_train,y='age',x='country_destination',color=sns.color_palette()[6]);\nplt.ylim(18,100)\nplt.xlabel('Country');\nplt.ylabel('Age');\nplt.title('Country-Age Distribution');","7b3e7508":"#Gender-Age Distribution plot\n\nplt.figure(figsize=[14,8])\nsns.boxplot(data=df_all,y='age',x='gender',color=sns.color_palette()[7]);\nplt.ylim(18,100)\nplt.xlabel('Gender');\nplt.ylabel('Age');\nplt.title('Gender-Age Distribution');","f2115308":"#Gender-Destination Distribution Plot\n\nplt.figure(figsize=(14,8))\norder1 = df_train['country_destination'].value_counts().index\nsns.countplot(data = df_train, x = 'country_destination', order = order1,hue='gender')\nplt.xlabel('Destination')\nplt.ylabel('Count')\nplt.title('Gender-Destination Distribution')\norder2 = df_train['country_destination'].value_counts()","2ac3b18c":"df3 = df_all[df_all['date_account_created'].dt.year==2013]\ndf3['monthYear13'] = df3['date_account_created'].map(lambda x: x.strftime('%m-%Y'))\n\ndf3= df3.groupby(['monthYear13','member_age_bins']).count()\n\ndf3.reset_index(inplace=True)","1adca14b":"#Age wise distribution of the booking in different months of 2013\n\nplt.figure(figsize=[14,8])\nsns.pointplot(data=df3,x='monthYear13',y='affiliate_provider',hue='member_age_bins');\nplt.title('2013 month-age wise distribution');\nplt.xlabel('Month-Year')\nplt.ylabel('Counts')","74f71572":"df3 = df_all[df_all['date_account_created'].dt.year==2013]\ndf3['monthYear13'] = df3['date_account_created'].map(lambda x: x.strftime('%m-%Y'))\n\ndf3= df3.groupby(['monthYear13','gender']).count()\n\ndf3.reset_index(inplace=True)","c0e1657a":"#Gender wise distribution of the booking in different months of 2013\n\nplt.figure(figsize=[14,8])\nsns.pointplot(data=df3,x='monthYear13',y='affiliate_provider',hue='gender');\nplt.title('2013 month-gender wise distribution');\nplt.xlabel('Month-Year')\nplt.ylabel('Counts')","22ddcdf2":"#Relation ship between age-gender-destination\n\nplt.figure(figsize=[14,8])\nsns.boxplot(data=df_train,y='age',x='country_destination',hue='gender');\nplt.ylim(18,100)\nplt.xlabel('Country');\nplt.ylabel('Age');\nplt.title('Country-Age Distribution');","176548e6":"df_train = df_train.drop(['country_destination'], axis=1)","9dd1139d":"dfWork = pd.concat((df_train, df_test), axis=0, ignore_index=True)\ndfWork = dfWork.drop(['id', 'date_first_booking'], axis=1)\n#Filling nan\ndfWork = dfWork.fillna(-1)\n","1a4b5b4e":"#date_account_created\n\ndac = np.vstack(dfWork.date_account_created.astype(str).apply(lambda x: list(map(int, x.split('-')))).values)\ndfWork['dac_year'] = dac[:,0]\ndfWork['dac_month'] = dac[:,1]\ndfWork['dac_day'] = dac[:,2]\ndfWork = dfWork.drop(['date_account_created'], axis=1)","07c4033c":"#timestamp_first_active\n\ntfa = np.vstack(dfWork.timestamp_first_active.astype(str).apply(lambda x: list(map(int, [x[:4],x[4:6],x[6:8],x[8:10],x[10:12],x[12:14]]))).values)\ndfWork['tfa_year'] = tfa[:,0]\ndfWork['tfa_month'] = tfa[:,1]\ndfWork['tfa_day'] = tfa[:,2]\ndfWork = dfWork.drop(['timestamp_first_active'], axis=1)","9334e677":"av = dfWork.age.values\ndfWork['age'] = np.where(np.logical_or(av<14, av>100), -1, av)","13b335b4":"#One-hot-encoding features\nohe_feats = ['gender', 'signup_method', 'signup_flow', 'language', 'affiliate_channel',\n             'affiliate_provider', 'first_affiliate_tracked', 'signup_app', 'first_device_type', 'first_browser']\nfor f in ohe_feats:\n    dfWork_dummy = pd.get_dummies(dfWork[f], prefix=f)\n    dfWork = dfWork.drop([f], axis=1)\n    dfWork = pd.concat((dfWork, dfWork_dummy), axis=1)","9c5980f0":"#Splitting train and test\nvals = dfWork.values\nX = vals[:df_train.shape[0]]\nle = LabelEncoder()\ny = le.fit_transform(labels)   \nX_test = vals[df_train.shape[0]:]","d08747e4":"#Classifier\nxgb = XGBClassifier(max_depth=6, learning_rate=0.3, n_estimators=25,\n                    objective='multi:softprob', subsample=0.5, colsample_bytree=0.5, seed=0)                  \nxgb.fit(X, y)","885d8b73":"#Prediction\ny_pred = xgb.predict_proba(X_test)","2efb1cdc":"#Taking the 5 classes with highest probabilities\nids = []  #list of ids\ncts = []  #list of countries\nfor i in range(len(id_test)):\n    idx = id_test[i]\n    ids += [idx] * 5\n    cts += le.inverse_transform(np.argsort(y_pred[i])[::-1])[:5].tolist()","fd2b71a6":"#Generate submission\nsub = pd.DataFrame(np.column_stack((ids, cts)), columns=['id', 'country'])\nsub.to_csv('sub.csv',index=False)","1f71c794":"#Classifier\n# xgb = XGBClassifier(max_depth=6, learning_rate=0.3, n_estimators=1,\n#                     objective='multi:softprob', subsample=0.5, colsample_bytree=0.5, seed=0)  \n\nxgb2 = XGBClassifier(objective='multi:softprob', subsample = 0.5, colsample_bytree = 0.5, seed = 0)  \n\nclf = GridSearchCV(\n    xgb2,\n    {\n        'max_depth': [5, 6],\n        'n_estimators': [10, 25, 30],\n        'learning_rate': [0.1, 0.2, 0.3],\n    }\n)\n\nclf.fit(X, y)\n# xgb.fit(X, y)","50d36015":"y_pred = clf.predict_proba(X_test)","15c85bc0":"clf.score(X,y)","e95de76e":"#Taking the 5 classes with highest probabilities\nids = []  #list of ids\ncts = []  #list of countries\nfor i in range(len(id_test)):\n    idx = id_test[i]\n    ids += [idx] * 5\n    cts += le.inverse_transform(np.argsort(y_pred[i])[::-1])[:5].tolist()","24912070":"#Generate submission\nsub = pd.DataFrame(np.column_stack((ids, cts)), columns=['id', 'country'])\nsub.to_csv('sub.csv',index=False)","c70fb08e":"#### Bivariate Plots","d406faa8":"### One hot Encoding","6087394b":"### Feature Engineering","e75a9e8c":"#### Multivariate Plot","df45f453":"#### Univariate plots","0cdedb53":"# Visualizations","32b25bc0":"# Computation for the Booking Destination"}}