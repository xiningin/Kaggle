{"cell_type":{"1227c21c":"code","ef3a8041":"code","084a73c5":"code","97a5bcca":"code","011d1036":"code","56b29a83":"code","08647a69":"code","32267d5a":"code","6817cb00":"code","7e6bf01b":"code","5ada2ec9":"code","004b3206":"code","1a879ed3":"code","9558c992":"code","02290bcc":"code","13053298":"code","10cb119c":"code","2578853c":"code","20972431":"code","a91aa16b":"code","092a214e":"code","93a4b31d":"code","423f34d3":"code","426869a0":"code","5bee2db5":"code","74dee4a5":"code","e6737b18":"code","5585e4a5":"code","39238cd9":"code","75a61020":"code","c357e46d":"code","cef40c49":"code","b6d7326c":"code","ec0ad4ed":"code","80caf67a":"code","5fd2bf65":"code","7efddf27":"code","ec1aa520":"code","7b0f6e6b":"code","7e6cd2a0":"markdown","99a10870":"markdown","8e27c1f8":"markdown","dfaf85e4":"markdown","2008053b":"markdown","d199604f":"markdown","4d7200e0":"markdown"},"source":{"1227c21c":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory\n\nimport os\nprint(os.listdir(\"..\/input\"))\n\n# Any results you write to the current directory are saved as output.\nimport warnings\nwarnings.filterwarnings('ignore')","ef3a8041":"data_train=pd.read_csv('..\/input\/train.csv')\ndata_test=pd.read_csv('..\/input\/test.csv')\ndata_train","084a73c5":"data_train.shape,data_test.shape","97a5bcca":"data_train.info()","011d1036":"#\u5220\u9664\u7b2c\u4e00\u5217['Id']\ndata_train.drop(['Id'],axis =1)","56b29a83":"#\u6c42\u76f8\u5173\u6027\u77e9\u9635\uff0c\u7b5b\u9009\u4e0eSalePrice\u5177\u6709\u6700\u5927\u7cfb\u6570\u7684\u76f8\u5173\u53d8\u91cf\ncorr_matrix=data_train.corr()\nf,ax=plt.subplots(figsize=(20,9))\nsns.heatmap(corr_matrix,vmax=1,annot=True)","08647a69":"#\u9009\u53d6\u5177\u6709\u6700\u5927\u76f8\u5173\u6027features\uff0ctop_corr_feature\ntop_corr_feature=corr_matrix.index[abs(corr_matrix[\"SalePrice\"])>0.5]\nprint(top_corr_feature)","32267d5a":"#\u8fdb\u4e00\u6b65\u7f29\u5c0f\u76f8\u5173\u77e9\u9635,10\u4e2a\u5177\u6709\u6700\u5927\u76f8\u5173\u6027\u7684features\ntop_corr_matrix=data_train[top_corr_feature].corr()\nf,ax=plt.subplots(figsize=(15,10))\nsns.heatmap(top_corr_matrix,vmax=1,annot=True)","6817cb00":"#\u6c42\u6570\u636e\u4e24\u4e24\u4e4b\u95f4\u5173\u7cfb\uff0c\u7ed8\u5236\u5173\u7cfb\u70b9\u56fe\ncols=['OverallQual', 'YearBuilt', 'YearRemodAdd', 'TotalBsmtSF', 'GrLivArea', 'FullBath', 'TotRmsAbvGrd', 'GarageCars']\nsns.pairplot(data_train[cols],size=4)\nplt.show()","7e6bf01b":"data_train[cols].isnull().sum()","5ada2ec9":"data_test[cols].isnull().sum()","004b3206":"#np.median(data_test['TotalBsmtSF']) \nprint(data_test['TotalBsmtSF'].median())         #TotalBsmtSF\u4e2d\u4f4d\u6570\nprint(data_test['GarageCars'].median())          #GarageCars\u4e2d\u4f4d\u6570\n\n#\u5bf9test\u6570\u636e\u4e2d\u7684\u7f3a\u5931\u503c\u8fdb\u884c\u586b\u5145","1a879ed3":"#\u7531\u4e8e\u7f3a\u5931\u503c\u8f83\u5c11\uff0c\u9009\u53d6\u7528\u4e2d\u4f4d\u6570\u8fdb\u884c\u586b\u5145\ndata_test['TotalBsmtSF'].fillna(988, inplace = True)","9558c992":"data_test['GarageCars'].fillna(2,inplace=True)","02290bcc":"data_test[cols].isnull().sum()","13053298":"#\u8ba1\u7b97\u7f3a\u5931\u503c\u6240\u5360\u6bd4\u4f8b\uff0c\u5141\u8bb8missing_data\u7684\u6570\u76ee\uff0c\u5148\u5b9a25%\n#\u53c2\u8003\u8d44\u6599\uff1ahttps:\/\/discuss.analyticsvidhya.com\/t\/what-should-be-the-allowed-percentage-of-missing-values\/2456\n\ntrain_nas=data_train.isnull().sum().sort_values(ascending=False)\npercent=(data_train.isnull().sum()\/data_train.isnull().count()).sort_values(ascending=False)\nmissing_data=pd.concat([train_nas,percent],axis=1,keys=['train_nas','percent'])\nmissing_data.head(20)","10cb119c":"#\u5bf9\u9884\u6d4b\u6570\u636eSalePrice\u8fdb\u884c\u53ef\u89c6\u5316\ndata_train['SalePrice'].describe()","2578853c":"from scipy import stats\nfrom scipy.stats import norm,skew\n\nsns.distplot(data_train['SalePrice'],fit=norm)\n(mu,sigma)=norm.fit(data_train['SalePrice'])\nprint( '\\n mu = {:.2f} and sigma = {:.2f}\\n'.format(mu, sigma))\nplt.legend(['Normal dist. ($\\mu=$ {:.2f} and $\\sigma=$ {:.2f} )'.format(mu, sigma)],\n            loc='best')\nplt.ylabel('Frequency')\nplt.title('SalePrice distribution')\nfig = plt.figure(figsize=(8,5))","20972431":"res = stats.probplot(data_train['SalePrice'], plot=plt)\n#\u6b63\u6001\u6982\u7387\u56fe\uff0c\u7528\u6765\u68c0\u9a8c\u6570\u636e\u662f\u5426\u670d\u4ece\u6b63\u6001\u5206\u5e03\uff0c\u5982\u679c\u662f\u4e00\u6761\u76f4\u7ebf\u7684\u8bdd\uff0c\u8868\u793a\u670d\u4ece\u6b63\u6001\u5206\u5e03\nplt.show()","a91aa16b":"print(\"Skewness:%f\"%data_train['SalePrice'].skew())\nprint(\"Kurtosis:%f\"%data_train['SalePrice'].kurt())","092a214e":"data_train.SalePrice=np.log1p(data_train.SalePrice)#\u53d6\u5bf9\u6570\uff0c\u4f7f\u5176\u7b26\u5408\u6b63\u6001\u5206\u5e03","93a4b31d":"fig=plt.figure(figsize=(15,5))\nplt.subplot(121)\ny=data_train.SalePrice\nsns.distplot(y,fit=norm)\nplt.ylabel('Frequency')\nplt.xlabel('SalePrice')\nplt.title('SalePrice Distribution')\n\nplt.subplot(122)\nres=stats.probplot(data_train['SalePrice'],plot=plt)","423f34d3":"#\u7528\u7ebf\u6027\u6a21\u578b\u8fdb\u884c\u9884\u6d4b\uff1aLinearRegression,Ridge,Lasso\nfrom sklearn.linear_model import LinearRegression,Ridge,Lasso\nfrom sklearn.metrics import r2_score #\u6a21\u578b\u51c6\u786e\u5ea6\u8bc4\u4ef7\u6307\u6807 R2\nfrom sklearn.cross_validation import train_test_split\n\ncols=['OverallQual', 'YearBuilt', 'YearRemodAdd', 'TotalBsmtSF', 'GrLivArea', 'FullBath', 'TotRmsAbvGrd', 'GarageCars']\nx = data_train[cols].values\ny = data_train['SalePrice'].values\n\nX_train1,X_test1, y_train1, y_test1 = train_test_split(x,y, test_size=0.33, random_state=42)\n\nRegs={\n    'LinearRegression':LinearRegression(),\n    'ridge':Ridge(),\n    'Lasso':Lasso()\n}\nfor Reg in Regs:\n    try:\n        Regs[Reg].fit(X_train1,y_train1)\n        y_pred1=Regs[Reg].predict(X_test1)\n        print(Reg+\" cost:\"+str(r2_score(y_test1,y_pred1)))\n    except Exception as e:\n        print(Reg+\"Error\")\n        print(str(e)) \n\n'''\n#\u4e5f\u53ef\u4ee5\u4f7f\u7528\u6700\u7b80\u5355\u7684\u5206\u6b65\u8ba1\u7b97\nline.fit(X_train1,y_train1)\nridge.fit(X_train1,y_train1)\nlasso.fit(X_train1,y_train1)\n#\u9884\u6d4b\u6570\u636e\nline_y_pre=line.predict(x_test1)\nridge_y_pre=ridge.predict(x_test1)\nlasso_y_pre=lasso.predict(x_test1)\n'''\n'''\nline_score=r2_score(y_test,line_y_pre)\nridge_score=r2_score(y_test,ridge_y_pre)\nlasso_score=r2_score(y_test,lasso_y_pre)\ndisplay(line_score,ridge_score,lasso_score)\n'''","426869a0":"Reg1=Ridge()\nReg1.fit(X_train1,y_train1)\ny_pred1=Reg1.predict(X_test1)\nprint(y_pred1)","5bee2db5":"y_pred_L=np.expm1(y_pred1)\ny_pred_L.shape()","74dee4a5":"prediction1 = pd.DataFrame(y_pred_L, columns=['SalePrice'])\nresult1 = pd.concat([data_test['Id'], prediction1], axis=1)","e6737b18":"#result1","5585e4a5":"from sklearn import preprocessing\nfrom sklearn import linear_model,svm,gaussian_process\nfrom sklearn.ensemble import RandomForestRegressor\n\nimport numpy as np","39238cd9":"x_scaler = preprocessing.StandardScaler().fit_transform(x)\ny_scaler = preprocessing.StandardScaler().fit_transform(y.reshape(-1,1))\nX_train,X_test, y_train, y_test = train_test_split(x_scaler, y_scaler, test_size=0.33, random_state=42)","75a61020":"clfs={\n    'svm':svm.SVR(),\n    'RandomForestRegressor':RandomForestRegressor(n_estimators=400),\n    'BayesianRidge':linear_model.BayesianRidge()\n}\nfor clf in clfs:\n    try:\n        clfs[clf].fit(X_train,y_train)\n        y_pred=clfs[clf].predict(X_test)\n        print(clf+\"cost:\"+str(np.sum(y_pred-y_test)\/len(y_pred)))\n    except Exception as e:\n        print(clf+\"Error\")\n        print(str(e))","c357e46d":"X_train,X_test, y_train, y_test = train_test_split(x,y, test_size=0.33, random_state=42)","cef40c49":"clf=RandomForestRegressor(n_estimators=400)\nclf.fit(X_train,y_train)\ny_pred=clf.predict(X_test)\nprint(y_pred)","b6d7326c":"sum(abs(y_pred-y_test)\/len(y_pred))","ec0ad4ed":"import pandas as pd\nfrom sklearn.ensemble import RandomForestRegressor\n\nrfr = clf","80caf67a":"x = data_test[cols].values\ny_rfr_pred = rfr.predict(x)\nprint(y_rfr_pred)\n\nprint(y_rfr_pred.shape)","5fd2bf65":"#\u9884\u6d4b\u5f97\u5230\u7684\u6570\u636e\u9700\u8981inverse\u4e00\u4e0b\ny_rfr_pred1=np.expm1(y_rfr_pred)","7efddf27":"\nprediction = pd.DataFrame(y_rfr_pred1, columns=['SalePrice'])\nresult = pd.concat([ data_test['Id'], prediction], axis=1)\nresult.columns","ec1aa520":"result","7b0f6e6b":"result.to_csv('.\/Predictions.csv', index=False)","7e6cd2a0":"\u6700\u5927\u76f8\u5173\u6027\u77e9\u9635\u53ef\u5f97\uff0c\u4ee5\u4e0b10\u4e2a\u81ea\u53d8\u91cf\u4f1a\u5bf9SalePrice\u9020\u6210\u8f83\u5927\u5f71\u54cd\uff0c\u5305\u62ec\uff1a\n\n'OverallQual', 'YearBuilt', 'YearRemodAdd', 'TotalBsmtSF', '1stFlrSF', 'GrLivArea', 'FullBath', 'TotRmsAbvGrd', 'GarageCars', 'GarageArea'\n\n\u4f46\u662f\u8003\u8651\u5230\u4ee5\u4e0b\u4e24\u4e2a\u65b9\u9762\uff1a\n1.  GarageCars\u548cGarageArea\u53cd\u5e94\u7684\u5e94\u8be5\u662f\u4e00\u4e2a\u610f\u601d\uff0c\uff08GarageCars: Size of garage in car capacity\uff1bGarageArea: Size of garage in square feet\uff09\u6545\u9009\u53d6\u76f8\u5173\u7cfb\u6570\u66f4\u5927\u7684GarageCars\u4f5c\u4e3a\u4e3b\u8981\u7279\u5f81\n2. 'TotalBsmtSF'\u548c '1stFlrSF'\u4e00\u4e2a\u662f\u5730\u4e0b\u5ba4\u9762\u79ef\uff0c\u4e00\u4e2a\u662f\u4e00\u5c42\u9762\u79ef\uff0c\u4e24\u4e2afeatures\u4e0eSalePrice\u76f8\u5173\u7cfb\u6570\u5747\u4e00\u6837\uff0c\u56e0\u6b64\uff0c\u9009\u5176\u4e2d\u4e00\u4e2a\u5c31\u53ef\u4ee5\uff0c\u8fd9\u91cc\u6211\u4eec\u9009\u62e9'TotalBsmtSF'\u4f5c\u4e3a\u4e3b\u8981\u7279\u5f81\u53d8\u91cf\u3002\n\n\u6545\u7b5b\u9009\u5b8c\uff0c\u5269\u4e0b'OverallQual', 'YearBuilt', 'YearRemodAdd', 'TotalBsmtSF', 'GrLivArea', 'FullBath', 'TotRmsAbvGrd', 'GarageCars' 8\u4e2a\u53d8\u91cf\n","99a10870":"\u6709Notebook\u5bf9\u6240\u6709\u53d8\u91cf\u8fdb\u884c\u7c7b\u522b\u7b5b\u9009\uff0c\u793a\u4f8b\u7a0b\u5e8f\u5982\u4e0b\uff1a\n''' python\n#\u7b5b\u9009\u51fa\u7c7b\u522b\u53d8\u91cf\ncategorical_features = data_train.select_dtypes(include=['object']).columns\ncategorical_features\n#\u7b5b\u9009\u51fa\u6570\u503c\u53d8\u91cf\nnumerical_features=data_train.select_dtypes(exclude='object').columns\nnumerical_features\nnumerical_features.drop('SalePrice')\n'''\n\n\u53ef\u662f\u5728\u6211\u7684\u7406\u89e3\u4e0a\uff0c\u6211\u89c9\u5f97\u4e00\u4e9b\u6570\u636e\u4e5f\u662f\u7c7b\u522b\u53d8\u91cf\uff0c\u4f8b\u5982OverallQual(Overall material and finish quality)\u611f\u89c9\u8fd9\u4e2a\u53d8\u91cf\u662f\u5bf9\u603b\u4f53\u8fdb\u884c\u7b49\u7ea7\u6307\u6807\u8bc4\u4ef7\uff0c\u4e00\u5171\u5305\u542b10\u4e2a\u7b49\u7ea7\uff0c\u5e94\u5c5e\u4e8e\u7c7b\u522b\u53d8\u91cf\u3002\n\u4f46\u82e5\u6309\u7167\u4e0a\u8ff0\u4ee3\u7801\u8fd0\u884c\uff0c\u4f1a\u5c06\u5176\u5f52\u4e3anumerical features\u4e2d\u3002\n![image.png](attachment:image.png)","8e27c1f8":"**\u5cad\u56de\u5f52\u65b9\u6cd5\u597d\u4e00\u4e9b**","dfaf85e4":"\u84dd\u8272\u66f2\u7ebf\u662f\u5bc6\u5ea6\u66f2\u7ebf\uff0c\u53cd\u6620\u603b\u4f53\u7684\u5206\u5e03\u89c4\u5f8b\uff0c\u9ed1\u8272\u662f\u6b63\u6001\u5206\u5e03\u66f2\u7ebf\uff0c\u53ef\u4ee5\u660e\u663e\u770b\u51faSalePrice\u660e\u663e\u6b63\u504f\uff0c\u4e14\u8f83\u9661\u5ced\n\n\u4e24\u4e2a\u7edf\u8ba1\u5b66\u6982\u5ff5\uff1a\n\n1. \u5cf0\u5ea6\uff08Kurtosis\uff09\n\n\u5cf0\u5ea6\u662f\u548c\u6b63\u592a\u5206\u5e03\u76f8\u6bd4\u8f83\u7684\n\n\u5cf0\u5ea6Kurtosis=0\u4e0e\u6b63\u592a\u5206\u5e03\u7684\u9661\u7f13\u6210\u90fd\u76f8\u540c\n\n\u5cf0\u5ea6Kurtosis>0\u6bd4\u6b63\u592a\u5206\u5e03\u7684\u9ad8\u5cf0\u66f4\u52a0\u9661\u5ced\u2014\u2014\u5c16\u9876\u5cf0\n\n\u5cf0\u5ea6Kurtosis<0\u6bd4\u6b63\u592a\u5206\u5e03\u7684\u9ad8\u5cf0\u66f4\u5e73\u5766\n\n2. \u504f\u5ea6\n\n\u504f\u5ea6\u662f\u63cf\u8ff0\u53d8\u91cf\u53d6\u503c\u5206\u5e03\u5bf9\u79f0\u6027\u7684\u7edf\u8ba1\u91cf\n\n\u504f\u5ea6\uff08Skewness\uff09\n\nSkewness=0,\u5206\u5e03\u5f62\u6001\u4e0e\u6b63\u592a\u5206\u5e03\u76f8\u540c\n\nSkewness>0,\u6b63\u504f\uff0c\u957f\u5c3e\u5df4\u5728\u53f3\u8fb9\n\nSkewness<0,\u8d1f\u504f\uff0c\u957f\u5c3e\u5df4\u5728\u5de6\u8fb9","2008053b":"\u4e00\u3001\u8f7d\u5165\u6570\u636e\uff1a\n\u5305\u62ec\u6d4b\u8bd5\u96c6\u548c\u6570\u636e\u96c6","d199604f":"\u7531\u6b64\u53ef\u4ee5\u6392\u9664\u6389\u56db\u4e2a\u53d8\u91cf\uff1aPoolQC\u3001MiscFeature\u3001Alley\u3001Fence","4d7200e0":"\u5bf9\u7f3a\u5931\u503c\u8fdb\u884c\u586b\u8865\uff1a\n\n\u6709\u4e00\u7bc7kernel\uff1ahttps:\/\/www.kaggle.com\/marsggbo\/kaggle \u5bf9\u4e8e\u7f3a\u5931\u503c\u7528\u7684\u662f\u5747\u503c\u586b\u8865\uff0c\u7528\u4e2d\u4f4d\u6570\u7684\u8bdd\uff0c\u5e94\u8be5\u4f1a\u597d\u4e00\u4e9b\u3002"}}