{"cell_type":{"e297583f":"code","e8684b5b":"code","8b27260e":"code","c584181f":"code","78996696":"code","3f92323b":"code","c4a0db9a":"code","ee55645a":"code","cf1d1ba5":"code","9cada96d":"code","f35a7c3f":"code","c74a0d9a":"code","2ea46dab":"code","9545db7a":"code","508b8941":"code","9d0902d8":"code","31707e6c":"code","d1bb2436":"code","7cbd16b3":"code","78d8f348":"code","f9f4548f":"code","9da40561":"code","0bdcc2ac":"code","1451a7e1":"code","57a8997a":"code","6040f59b":"markdown","ac6dcd5d":"markdown","d840de72":"markdown","717f44eb":"markdown","66c92097":"markdown","8246668c":"markdown","06505492":"markdown","e5891ee3":"markdown","e0b3afe6":"markdown","cc6ce6dd":"markdown","b2ed50e8":"markdown","607b6a8f":"markdown","755095f5":"markdown","1140c36b":"markdown","fc5f9636":"markdown","b68fb4b5":"markdown","099fd620":"markdown","617cb511":"markdown","165480f5":"markdown","a265ef96":"markdown","7ea8edc5":"markdown","4fa5bd2d":"markdown","155fc415":"markdown","9ef68eeb":"markdown","1a82f0f8":"markdown","f65658c0":"markdown","9e8f62fa":"markdown","234359b2":"markdown"},"source":{"e297583f":"\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport os\nprint(os.listdir(\"..\/input\"))\n\n# plotly\nimport plotly.plotly as py\nfrom plotly.offline import init_notebook_mode, iplot\ninit_notebook_mode(connected=True)\nimport plotly.graph_objs as go\n#import the data\nathlete = pd.read_csv('..\/input\/athlete_events.csv',index_col = False)\nregions = pd.read_csv('..\/input\/noc_regions.csv',index_col = False)\nathlete.head()","e8684b5b":"athlete.info()","8b27260e":"athlete.Medal = athlete.Medal.fillna(0)","c584181f":"athlete.head()","78996696":"summ = athlete[athlete.Season == 'Summer'] \nwint = athlete[athlete.Season == 'Winter']\n","3f92323b":"fig, ax = plt.subplots(figsize=(8,6))\nsns.countplot(x=\"Sex\", hue=\"Medal\", data=athlete,ax=ax)","c4a0db9a":"fig, ax = plt.subplots(figsize=(8,6))\na = athlete[~athlete['Medal'].isnull()].Sex\nsns.countplot(x=a, hue=\"Season\", data=athlete,ax=ax)","ee55645a":"# Group data according to gold\ncounts_gold = {}\nfor key,values in athlete.iterrows():\n    if(values['Medal'] == 'Gold'):\n        if(counts_gold.get(values.Team) == None):\n            counts_gold[values.Team] = 1\n        else:\n            counts_gold[values.Team] +=1  \ngdata = pd.concat({k:pd.Series(v) for k, v in counts_gold.items()}).unstack().astype(float).reset_index()","cf1d1ba5":"gdata.columns = ['Team', 'gold']\ngdata.info()","9cada96d":"g_data = gdata.sort_values(by='gold',ascending=False)","f35a7c3f":"fig, ax = plt.subplots(figsize=(15,6))\nax = sns.barplot(x=\"Team\", y=\"gold\", data=g_data.head(10),ax=ax)","c74a0d9a":"import plotly.plotly as py\nimport plotly.graph_objs as go","2ea46dab":"counts_silver = {}\nfor key,values in athlete.iterrows():\n    if(values['Medal'] == 'Silver'):\n        if(counts_silver.get(values.Team) == None):\n            counts_silver[values.Team] = 1\n        else:\n            counts_silver[values.Team] +=1\n            \nsdata = pd.concat({k:pd.Series(v) for k, v in counts_silver.items()}).unstack().astype(float).reset_index()\nsdata.columns = ['Team', 'silver']\ns_data = sdata.sort_values(by='silver',ascending=False)\n","9545db7a":"sdata.head()","508b8941":"counts_bronze = {}\nfor key,values in athlete.iterrows():\n    if(values['Medal'] == 'Bronze'):\n        if(counts_bronze.get(values.Team) == None):\n            counts_bronze[values.Team] = 1\n        else:\n            counts_bronze[values.Team] +=1\n            \nbdata = pd.concat({k:pd.Series(v) for k, v in counts_bronze.items()}).unstack().astype(float).reset_index()\nbdata.columns = ['Team', 'bronze']\nb_data = bdata.sort_values(by='bronze',ascending=False)\n","9d0902d8":"data1 = {}\ndata1['Team'] = athlete.Team.unique()\n\ndata1=pd.DataFrame(data1)\n\ndata1 = pd.merge(data1, gdata, on='Team')\ndata1 =pd.merge(data1, sdata, on='Team')\ndata1 =pd.merge(data1, bdata, on='Team')\n\ndata1 = data1.sort_values(by=['gold','silver','bronze'],ascending=False)","31707e6c":"# prepare data frames\ndfd = data1.head(20)\n# import graph objects as \"go\"\nimport plotly.graph_objs as go\n# create trace1 \ntrace1 = go.Bar(\n                x = dfd.Team,\n                y = dfd.gold,\n                name = \"gold\",\n                marker = dict(color = 'rgba(255, 223, 0, 0.5)',\n                             line=dict(color='rgb(0,0,0)',width=1.5)),\n                text = dfd.Team)\n# create trace2 \ntrace2 = go.Bar(\n                x = dfd.Team,\n                y = dfd.silver,\n                name = \"silver\",\n                marker = dict(color = 'rgba(192, 192, 192, 0.5)',\n                              line=dict(color='rgb(0,0,0)',width=1.5)),\n                text = dfd.Team)\n# create trace3\ntrace3 = go.Bar(\n                x = dfd.Team,\n                y = dfd.bronze,\n                name = \"bronze\",\n                marker = dict(color = 'rgba(205, 127, 50, 0.5)',\n                              line=dict(color='rgb(0,0,0)',width=1.5)),\n                text = dfd.Team)\ndata = [trace1, trace2, trace3]\nlayout = go.Layout(barmode = \"group\")\nfig = go.Figure(data = data, layout = layout)\niplot(fig)","d1bb2436":"# Group data according to gold for summer\ncounts_gold = {}\nfor key,values in summ.iterrows():\n    if(values['Medal'] == 'Gold'):\n        if(counts_gold.get(values.Team) == None):\n            counts_gold[values.Team] = 1\n        else:\n            counts_gold[values.Team] +=1  \ngdata = pd.concat({k:pd.Series(v) for k, v in counts_gold.items()}).unstack().astype(float).reset_index()\ngdata.columns = ['Team', 'gold']\ng_data = gdata.sort_values(by='gold',ascending=False)\nfig, ax = plt.subplots(figsize=(15,6))\nax = sns.barplot(x=\"Team\", y=\"gold\", data=g_data.head(10),ax=ax).set_title('Top 10 countries in summer oylmpics')\nimport plotly.plotly as py\nimport plotly.graph_objs as go\n\ncounts_silver = {}\nfor key,values in summ.iterrows():\n    if(values['Medal'] == 'Silver'):\n        if(counts_silver.get(values.Team) == None):\n            counts_silver[values.Team] = 1\n        else:\n            counts_silver[values.Team] +=1\n            \nsdata = pd.concat({k:pd.Series(v) for k, v in counts_silver.items()}).unstack().astype(float).reset_index()\nsdata.columns = ['Team', 'silver']\ns_data = sdata.sort_values(by='silver',ascending=False)\n\ncounts_bronze = {}\nfor key,values in summ.iterrows():\n    if(values['Medal'] == 'Bronze'):\n        if(counts_bronze.get(values.Team) == None):\n            counts_bronze[values.Team] = 1\n        else:\n            counts_bronze[values.Team] +=1\n            \nbdata = pd.concat({k:pd.Series(v) for k, v in counts_bronze.items()}).unstack().astype(float).reset_index()\nbdata.columns = ['Team', 'bronze']\nb_data = bdata.sort_values(by='bronze',ascending=False)\n\ndata1 = {}\ndata1['Team'] = summ.Team.unique()\n\ndata1=pd.DataFrame(data1)\n\ndata1 = pd.merge(data1, gdata, on='Team')\ndata1 =pd.merge(data1, sdata, on='Team')\ndata1 =pd.merge(data1, bdata, on='Team')\n\ndata1 = data1.sort_values(by=['gold','silver','bronze'],ascending=False)\n\n","7cbd16b3":"# prepare data frames\ndfd = data1.head(20)\n# import graph objects as \"go\"\nimport plotly.graph_objs as go\n# create trace1 \ntrace1 = go.Bar(\n                x = dfd.Team,\n                y = dfd.gold,\n                name = \"gold\",\n                marker = dict(color = 'rgba(255, 223, 0, 0.5)',\n                             line=dict(color='rgb(0,0,0)',width=1.5)),\n                text = dfd.Team)\n# create trace2 \ntrace2 = go.Bar(\n                x = dfd.Team,\n                y = dfd.silver,\n                name = \"silver\",\n                marker = dict(color = 'rgba(192, 192, 192, 0.5)',\n                              line=dict(color='rgb(0,0,0)',width=1.5)),\n                text = dfd.Team)\n# create trace3\ntrace3 = go.Bar(\n                x = dfd.Team,\n                y = dfd.bronze,\n                name = \"bronze\",\n                marker = dict(color = 'rgba(205, 127, 50, 0.5)',\n                              line=dict(color='rgb(0,0,0)',width=1.5)),\n                text = dfd.Team)\ndata = [trace1, trace2, trace3]\nlayout = go.Layout(title='Top countries in summer oylmpics',barmode = \"group\")\nfig = go.Figure(data = data, layout = layout)\niplot(fig)","78d8f348":"# Group data according to gold\ncounts_gold = {}\nfor key,values in wint.iterrows():\n    if(values['Medal'] == 'Gold'):\n        if(counts_gold.get(values.Team) == None):\n            counts_gold[values.Team] = 1\n        else:\n            counts_gold[values.Team] +=1  \ngdata = pd.concat({k:pd.Series(v) for k, v in counts_gold.items()}).unstack().astype(float).reset_index()\ngdata.columns = ['Team', 'gold']\ng_data = gdata.sort_values(by='gold',ascending=False)\nfig, ax = plt.subplots(figsize=(15,6))\nax = sns.barplot(x=\"Team\", y=\"gold\", data=g_data.head(10),ax=ax).set_title('Top 10 countries in winter oylmpics')\nimport plotly.plotly as py\nimport plotly.graph_objs as go\n\ncounts_silver = {}\nfor key,values in wint.iterrows():\n    if(values['Medal'] == 'Silver'):\n        if(counts_silver.get(values.Team) == None):\n            counts_silver[values.Team] = 1\n        else:\n            counts_silver[values.Team] +=1\n            \nsdata = pd.concat({k:pd.Series(v) for k, v in counts_silver.items()}).unstack().astype(float).reset_index()\nsdata.columns = ['Team', 'silver']\ns_data = sdata.sort_values(by='silver',ascending=False)\n\ncounts_bronze = {}\nfor key,values in wint.iterrows():\n    if(values['Medal'] == 'Bronze'):\n        if(counts_bronze.get(values.Team) == None):\n            counts_bronze[values.Team] = 1\n        else:\n            counts_bronze[values.Team] +=1\n            \nbdata = pd.concat({k:pd.Series(v) for k, v in counts_bronze.items()}).unstack().astype(float).reset_index()\nbdata.columns = ['Team', 'bronze']\nb_data = bdata.sort_values(by='bronze',ascending=False)\n\ndata1 = {}\ndata1['Team'] = wint.Team.unique()\n\ndata1=pd.DataFrame(data1)\n\ndata1 = pd.merge(data1, gdata, on='Team')\ndata1 =pd.merge(data1, sdata, on='Team')\ndata1 =pd.merge(data1, bdata, on='Team')\n\ndata1 = data1.sort_values(by=['gold','silver','bronze'],ascending=False)\n\n","f9f4548f":"# prepare data frames\ndfd = data1.head(20)\n# import graph objects as \"go\"\nimport plotly.graph_objs as go\n# create trace1 \ntrace1 = go.Bar(\n                x = dfd.Team,\n                y = dfd.gold,\n                name = \"gold\",\n                marker = dict(color = 'rgba(255, 223, 0, 0.5)',\n                             line=dict(color='rgb(0,0,0)',width=1.5)),\n                text = dfd.Team)\n# create trace2 \ntrace2 = go.Bar(\n                x = dfd.Team,\n                y = dfd.silver,\n                name = \"silver\",\n                marker = dict(color = 'rgba(192, 192, 192, 0.5)',\n                              line=dict(color='rgb(0,0,0)',width=1.5)),\n                text = dfd.Team)\n# create trace3\ntrace3 = go.Bar(\n                x = dfd.Team,\n                y = dfd.bronze,\n                name = \"bronze\",\n                marker = dict(color = 'rgba(205, 127, 50, 0.5)',\n                              line=dict(color='rgb(0,0,0)',width=1.5)),\n                text = dfd.Team)\ndata = [trace1, trace2, trace3]\nlayout = go.Layout(title='Top countries in Winter Oylmpics',barmode = \"group\")\nfig = go.Figure(data = data, layout = layout)\niplot(fig)","9da40561":"gusa = {}\nfor key,values in athlete.iterrows():\n    if((values['Team'] == 'United States') and (values['Medal'] == 'Gold')):\n        if(gusa.get(values.Year) == None):\n            gusa[values.Year] = 1\n        else:\n            gusa[values.Year] +=1\n            \ngusa = pd.concat({k:pd.Series(v) for k, v in gusa.items()}).unstack().astype(float).reset_index()\ngusa.columns = ['Year', 'gold']\n\n\n#silver for usa\nsusa = {}\nfor key,values in athlete.iterrows():\n    if((values['Team'] == 'United States') and (values['Medal'] == 'Silver')):\n        if(susa.get(values.Year) == None):\n            susa[values.Year] = 1\n        else:\n            susa[values.Year] +=1\n            \nsusa = pd.concat({k:pd.Series(v) for k, v in susa.items()}).unstack().astype(float).reset_index()\nsusa.columns = ['Year', 'silver']  \n\n\n# bronze for usa\n\nbusa = {}\nfor key,values in athlete.iterrows():\n    if((values['Team'] == 'United States') and (values['Medal'] == 'Bronze')):\n        if(busa.get(values.Year) == None):\n            busa[values.Year] = 1\n        else:\n            busa[values.Year] +=1\n            \nbusa = pd.concat({k:pd.Series(v) for k, v in busa.items()}).unstack().astype(float).reset_index()\nbusa.columns = ['Year', 'bronze']\n\n\n#### for Soviet Union\n\n# gold for Soviet Union\n\ngsu = {}\nfor key,values in athlete.iterrows():\n    if((values['Team'] == 'Soviet Union') and (values['Medal'] == 'Gold')):\n        if(gsu.get(values.Year) == None):\n            gsu[values.Year] = 1\n        else:\n            gsu[values.Year] +=1\n            \ngsu = pd.concat({k:pd.Series(v) for k, v in gsu.items()}).unstack().astype(float).reset_index()\ngsu.columns = ['Year', 'gold']\n\n\nssu = {}\nfor key,values in athlete.iterrows():\n    if((values['Team'] == 'Soviet Union') and (values['Medal'] == 'Silver')):\n        if(ssu.get(values.Year) == None):\n            ssu[values.Year] = 1\n        else:\n            ssu[values.Year] +=1\n            \nssu = pd.concat({k:pd.Series(v) for k, v in ssu.items()}).unstack().astype(float).reset_index()\nssu.columns = ['Year', 'silver']\n\nbsu = {}\nfor key,values in athlete.iterrows():\n    if((values['Team'] == 'Soviet Union') and (values['Medal'] == 'Bronze')):\n        if(bsu.get(values.Year) == None):\n            bsu[values.Year] = 1\n        else:\n            bsu[values.Year] +=1\n            \nbsu = pd.concat({k:pd.Series(v) for k, v in bsu.items()}).unstack().astype(float).reset_index()\nbsu.columns = ['Year', 'bronze']\n","0bdcc2ac":"# import graph objects as \"go\"\nimport plotly.graph_objs as go\n\n# Creating trace1 USA Gold\ntrace1 = go.Scatter(\n                    x = gusa.Year,\n                    y = gusa.gold,\n                    mode = \"lines+markers\",\n                    name = \"USA gold\",\n                    marker = dict(color = 'rgba(240,230,140 0.8)'),\n                    )\n# Creating trace2 USA silver\ntrace2 = go.Scatter(\n                    x = susa.Year,\n                    y = susa.silver,\n                    mode = \"lines+markers\",\n                    name = \"USA silver\",\n                    marker = dict(color = 'rgba(211,211,211, 0.8)'),\n                    )\n# Creating trace3 USA bronze\ntrace3 = go.Scatter(\n                    x = busa.Year,\n                    y = busa.bronze,\n                    mode = \"lines+markers\",\n                    name = \"USA bronze\",\n                    marker = dict(color = 'rgba(220,165,112)'),\n                    )\n# Creating trace4 Soviet gold\ntrace4 = go.Scatter(\n                    x = gsu.Year,\n                    y = gsu.gold,\n                    mode = \"lines+markers\",\n                    name = \"Soviet Union gold\",\n                    marker = dict(color = 'rgba(218,165,32, 0.8)'),\n                    )\n# Creating trace5 Soviet silver\ntrace5 = go.Scatter(\n                    x = ssu.Year,\n                    y = ssu.silver,\n                    mode = \"lines+markers\",\n                    name = \"Soviet Union Silver\",\n                    marker = dict(color = 'rgba(128,128,128, 0.8)'),\n                    )\n# Creating trace6 Soviet bronze\ntrace6 = go.Scatter(\n                    x = bsu.Year,\n                    y = bsu.bronze,\n                    mode = \"lines+markers\",\n                    name = \"Soviet Union bronze\",\n                    marker = dict(color = 'rgba(144,89,35, 0.8)'),\n                    )\n\ndata = [trace1, trace2,trace3,trace4,trace5,trace6]\nlayout = dict(title = 'Comparision between USA and Soviet union in years',\n              xaxis= dict(title= 'Years',ticklen= 5,zeroline= False)\n             )\nfig = dict(data = data, layout = layout)\niplot(fig)","1451a7e1":"athlete = athlete[pd.notnull(athlete['Height'])]\nathlete = athlete[pd.notnull(athlete['Weight'])]","57a8997a":"# prepare data frames\nathg = athlete[athlete.Medal == 'Gold']\naths = athlete[athlete.Medal == 'Silver']\nathb = athlete[athlete.Medal == 'Bronze']\n\n# creating trace1\ntrace1 =go.Scatter(\n                    x = athg.Weight,\n                    y = athg.Height,\n                    mode = \"markers\",\n                    name = \"Gold\",\n                    marker = dict(color = 'rgba(255, 128, 255, 0.8)'),\n                    text= athg.Medal)\n# creating trace2\ntrace2 =go.Scatter(\n                    x = aths.Weight,\n                    y = aths.Height,\n                    mode = \"markers\",\n                    name = \"Silver\",\n                    marker = dict(color = 'rgba(255, 128, 2, 0.8)'),\n                    text= aths.Medal)\n# creating trace3\ntrace3 =go.Scatter(\n                    x = athb.Weight,\n                    y = athb.Height,\n                    mode = \"markers\",\n                    name = \"Bronze\",\n                    marker = dict(color = 'rgba(0, 255, 200, 0.8)'),\n                    text= athb.Medal)\ndata = [trace1, trace2, trace3]\nlayout = dict(title = 'Corelation between Height and Weight',\n              xaxis= dict(title= 'Weight',ticklen= 5,zeroline= False),\n              yaxis= dict(title= 'Height',ticklen= 5,zeroline= False)\n             )\nfig = dict(data = data, layout = layout)\niplot(fig)\n\n\n\n","6040f59b":"## Now one last as this will get boring if i excedded any further, lastly i will see corelation between Athletes on Height and weight","ac6dcd5d":"# Now same for Silver ","d840de72":"# we can visualise this dataset in three types \n\n* Players who played in summer oylmpics\n* Players who played in winter oylmpics\n* All the Players combined\n\n## So now we will represent \n\n* **summ** -  for summer oylmpics\n* **wint** -  for winter oylmpics\n* **athlete** -  for overall all players combined","717f44eb":" ## Now we will find same for summer and winter oylmpics","66c92097":"# Happy Coding :)","8246668c":"If someone has some good optimized way then i will be happy to see that.","06505492":"## Now let's group the data according to gold medal, silver medal and bronze medal based on countries.","e5891ee3":"## Now we will create a new dataframe data1 that stores all gold, silver and bronze medal according to their country name.","e0b3afe6":"# And for Bronze","cc6ce6dd":"## We can also see Medal also has missing values but because it says that that person havent got any medal in that event. so we will convert them to 0","b2ed50e8":"![](https:\/\/unmanned-aerial.com\/wp-content\/uploads\/2018\/02\/intel-2.jpg)","607b6a8f":"### First Lets import the packages and import the data.","755095f5":"# Here there is an important information to note that i have created two dataframe, ie \n * **gdata** - for Team and gold\n \n * **g_data** - for Team and gold (but it is sorted in descending order)","1140c36b":"## Now here the interesting part comes... We will visualise top countries which has highest medals using Plotly","fc5f9636":"## Let us see how much Male and Female had got medals w.r.t Summer and Winter oylmpics","b68fb4b5":"## Thats it for now. I know there will be some mistakes and i will improve it in later times.\n## as this is my first notebook, if it pleases you for atleast 1% , please upvote this notebook. and if you didnt like then please let me know my mistakes. ","099fd620":"## Here only Age, Height and Weight have some missing values. We can ignore the whole row, but from an oylmpic standpoint it would be wise right now to not remove these rows as even a single row is important as it repesent an individual in an sport.","617cb511":"Please note the code to display is same as above. I have just changed the datatypes","165480f5":"## here we got to know basic info of the dataset and what overall it shows, and boy it has some good information to know about.","a265ef96":"## There's some more time for Oylmpic season to get started but the fever is still alive. This is my first notebook and as a fresher in Kaggle, i am open to corrections, recommendations and suggestions. Here i have basically tried to find insights of Oylmpic over the years and to visualise it.","7ea8edc5":"## This Visualisation shows that top countries that have most golds in oylmpics","4fa5bd2d":"## Wow it shows that United States is way ahead in terms of medals and then Soviet Union comes second in comparision of Oylmpics.\n\n### Let's just focus only these two countries and see their progression over the years","155fc415":"## **<code>Lets Start<\/code>**","9ef68eeb":"## Oh It shows some interesting blast in the past. we can see that the Soviet Union started in 1952 and last played in 1988 as after that it was changed.\n\n<a href=\"https:\/\/www.google.co.in\/search?q=soviet+union+1988&rlz=1C1GGRV_enIN801IN801&oq=soviet+union+1988&aqs=chrome..69i57j69i60j0l4.9119j0j9&sourceid=chrome&ie=UTF-8\">See here<\/a>","1a82f0f8":"## Suprisingly, we haven't saw much change in summer and overall oylmpics, but in winter, looks like canada is on lead","f65658c0":"# **Understanding Sports of past 120 years **","9e8f62fa":" It was a dumb visualisation from me ... But still it shows How much male and female Athletes had got the medals. In the coming codes i will really create some interesting plots.","234359b2":"## Now for Winter"}}