{"cell_type":{"96537dfc":"code","9d84fd67":"code","fcdc2249":"code","bf8cb9f1":"code","0aac425a":"code","ded30f38":"code","7629e6a3":"markdown","759c0282":"markdown"},"source":{"96537dfc":"import pandas as pd \nimport math\nimport sys\nimport warnings\n\nwarnings.simplefilter(\"ignore\")\n\n# read data\ndf_conf_raw = pd.read_csv('\/kaggle\/input\/novel-corona-virus-2019-dataset\/time_series_covid_19_confirmed.csv')\ndf_reco_raw = pd.read_csv('\/kaggle\/input\/novel-corona-virus-2019-dataset\/time_series_covid_19_recovered.csv')\ndf_dead_raw = pd.read_csv('\/kaggle\/input\/novel-corona-virus-2019-dataset\/time_series_covid_19_deaths.csv')\n\n# make a copy\ndf_conf = df_conf_raw\ndf_reco = df_reco_raw\ndf_dead = df_dead_raw\n\n#print(df_conf['Country\/Region'].sort_values().tolist())\n\n# filter to germany\ndf_conf = df_conf[df_conf['Country\/Region']=='Germany']\ndf_reco = df_reco[df_reco['Country\/Region']=='Germany']\ndf_dead = df_dead[df_dead['Country\/Region']=='Germany']\n\n# add label\ndf_reco['Label'] = 'Recovered'\ndf_conf['Label'] = 'Confirmed'\ndf_dead['Label'] = 'Deaths'\n\n# transpose and union\ndf = pd.concat([df_conf,df_reco,df_dead])\ndf = df.drop(['Province\/State','Country\/Region','Lat','Long'],1)\ndf_transposed = df.transpose()\ncols = df_transposed.loc[['Label']].values.tolist()[0]\nts = df.drop('Label',1).transpose()\nts.columns = cols\nts.index = pd.to_datetime(ts.index)\n\n# add absolute metrics\nts['Active'] = ts.Confirmed - ts.Recovered - ts.Deaths\nts['NewConfirmed'] = ts.Confirmed - ts.Confirmed.shift(periods=1)\nts['NewRecovered'] = ts.Recovered - ts.Recovered.shift(periods=1)\nts['NewDeaths'] = ts.Deaths - ts.Deaths.shift(periods=1)\n\n# add relative metrics\nts['NewRecoveredRate'] = ts['NewRecovered'] \/ ts['NewConfirmed']\nts['DeathRate'] = ts['Deaths'] \/ ts['Confirmed']\nts['RecoveredRate'] = ts['Recovered'] \/ ts['Confirmed']\nts['NewConfirmedRate'] = ts['NewConfirmed'] \/ (ts['Confirmed'] - ts['NewConfirmed'] )","9d84fd67":"import matplotlib.pyplot as plt\n\nts_filtered = ts[ts['Confirmed'] > 500]\n#ts_filtered.plot()\n#print(ts_filtered.columns)\n\n#fig, axs = plt.subplots(2, 2, figsize=(15,8))\n\nfig, axes = plt.subplots(nrows=2, ncols=2,figsize=(20,6))\n\nts_filtered[['Confirmed','Recovered','Active']].plot(ax=axes[0,0])\nts_filtered[['NewConfirmed','NewRecovered','Deaths','NewDeaths']].plot(ax=axes[1,0])\nts_filtered[['NewRecoveredRate','RecoveredRate','NewConfirmedRate']].plot(ax=axes[0,1]) \nts_filtered[['DeathRate']].plot(ax=axes[1][1])\n\n#fig.show()","fcdc2249":"pd.set_option(\"display.max_rows\", 30)\nts[ts.Confirmed>0].sort_index(ascending=False).head(30)","bf8cb9f1":"country_list = ['Germany','Italy','Spain','Austria','Portugal','France','Denmark','Switzerland','United Kingdom','Netherlands']\ncountry_df = {}\n\nfor country in country_list:\n    df_conf = df_conf_raw\n    df_reco = df_reco_raw\n    df_dead = df_dead_raw\n    df_conf = df_conf[df_conf['Country\/Region']==country].groupby('Country\/Region').sum()\n    df_reco = df_reco[df_reco['Country\/Region']==country].groupby('Country\/Region').sum()\n    df_dead = df_dead[df_dead['Country\/Region']==country].groupby('Country\/Region').sum()\n    \n    # add label\n    df_reco.loc[:,'Label'] = 'Recovered'\n    df_conf.loc[:,'Label'] = 'Confirmed'\n    df_dead.loc[:,'Label'] = 'Deaths'\n    # transpose and union\n    df = pd.concat([df_conf,df_reco,df_dead])\n    #df = df.drop(['Province\/State','Lat','Long','Country\/Region'],1)\n    df = df.drop(['Lat','Long'],1)\n    df_transposed = df.transpose()\n    cols = df_transposed.loc[['Label']].values.tolist()[0]\n    ts = df.drop('Label',1).transpose()\n    ts.columns = cols\n    ts.index = pd.to_datetime(ts.index)\n\n    # add absolute some metrics\n    ts['Active'] = ts.Confirmed - ts.Recovered - ts.Deaths\n    ts['NewConfirmed'] = ts.Confirmed - ts.Confirmed.shift(periods=1)\n    country_df[country] = ts[ts.index > '2020-03-01']\n    \ncols = 3\nrows = math.ceil(len(country_df)\/cols) \nfig, axes = plt.subplots(nrows=rows, ncols=cols,figsize=(21,3*rows))\ni = 0\nfor country in country_df:\n    country_df[country][['Confirmed','Active','Recovered']].plot(title=country,ax=axes[int(math.floor(i\/cols)),i%cols])\n    i+=1","0aac425a":"def moving_average (df,n):\n    data2 = df.rolling(n).mean()\n    col_list = data2.columns.tolist()\n    new_cols = []\n    for i in col_list:\n        new_cols += [str(i) + '_ma' + str(n)]\n    data2.columns = new_cols \n    return data2\n\n\"\"\"\nfig2, axes2 = plt.subplots(nrows=rows, ncols=cols,figsize=(21,3*rows))\ni = 0\nfor country in country_df:\n    data = country_df[country][['NewConfirmed']][country_df[country]['NewConfirmed'].shift(periods=-2) > 0]\n    #moving_average(data,3).plot(title=country,ax=axes2[int(math.floor(i\/cols)),i%cols])\n    i+=1\n\"\"\"\ndata = moving_average(pd.concat(country_df),3).NewConfirmed_ma3\n#data\ndata.unstack(level=0).plot(figsize=(21,9),title='New confirmed cases by country with moving average 3')","ded30f38":"population_data = [\n    ['Germany',82500000],\n    ['France',67000000],\n    ['United Kingdom',65800000],\n    ['Italy',60600000],\n    ['Spain',46500000],\n    ['Netherlands',17100000],\n    ['Portugal',10300000],\n    ['Austria',8700000],\n    ['Switzerland',8400000],\n    ['Denmark',5750000]\n]\npopulation_df = pd.DataFrame(population_data,columns=['country','population'])\npopulation_df = population_df.set_index('country')\n\n\nfor country in country_list:\n    mrc = country_df[country].sort_index(ascending=False).head(1).Confirmed[0]\n    population_df.loc[country,'most_recent_confirmed'] = mrc\n    \npopulation_df['Infection_Rate'] = population_df.most_recent_confirmed \/ population_df.population\n\npopulation_df.Infection_Rate.sort_values(ascending=False).plot(kind='bar')\n\nimport numpy as np\npopulation_df['confirmed_per_mil'] = (population_df.Infection_Rate*1000000).astype(int)\npopulation_df.sort_values('confirmed_per_mil',ascending=False)\n    ","7629e6a3":"# Plotting","759c0282":"# **Data Preparation**"}}