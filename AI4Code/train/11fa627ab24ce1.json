{"cell_type":{"0acc4d65":"code","10dd266f":"code","59290c09":"code","4c7f7dd7":"code","3ee811ec":"code","c7630248":"code","3bb2eb75":"code","7f56a75c":"code","c1a38fea":"code","70ac8c31":"code","7feae1c8":"code","27212d2d":"code","b1ddfbb6":"code","b2357277":"code","492dbe16":"code","7df7ef9b":"code","46cb8bc1":"code","32e4d80b":"code","a69b1ebb":"code","d4cb8e64":"code","7a78d19b":"code","f1825d56":"code","9bf7e547":"code","fbf04c8f":"code","830b96b3":"code","e5e1b1f2":"code","2336103d":"code","45d32a7f":"code","cf42de98":"code","8c51c0ff":"code","47a64874":"code","3fb37fc1":"code","d400ac8a":"code","a13d0775":"code","c2963446":"code","434808ee":"code","fbce2673":"code","38f82142":"code","23c459b3":"code","6d8f664d":"code","46bc28e0":"code","30cea37b":"code","4331a9c1":"code","a94ff506":"code","56505a8d":"code","1b971037":"code","1525e493":"code","dd6867b8":"code","11871f53":"code","e07ddba6":"code","076b1a0d":"code","f68c954e":"code","c72e058e":"code","ccb8dd1e":"code","91c4531c":"code","c615fcc2":"code","4afdd1f0":"code","a75e3924":"code","3cedec3e":"code","dd996587":"code","e29b9593":"code","c59f98da":"code","a90d7ae8":"markdown"},"source":{"0acc4d65":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","10dd266f":"import numpy as np","59290c09":"import pandas as pd\nimport matplotlib.pyplot as plt","4c7f7dd7":"data = pd.read_csv('\/kaggle\/input\/vehicle-dataset-from-cardekho\/car data.csv')\ndata1 = pd.read_csv('\/kaggle\/input\/vehicle-dataset-from-cardekho\/CAR DETAILS FROM CAR DEKHO.csv')\ndata2= pd.read_csv('\/kaggle\/input\/vehicle-dataset-from-cardekho\/Car details v3.csv')","3ee811ec":"data.head()\ndata1.head()\ndata2.head()","c7630248":"data1.head()\n","3bb2eb75":"data2.head()","7f56a75c":"data.info()","c1a38fea":"data1.info()","70ac8c31":"data2.info()","7feae1c8":"data2.groupby('name')['name'].agg('count').sort_values(ascending = False)","27212d2d":"data2.describe()","b1ddfbb6":"data2.groupby('seller_type')['seller_type'].agg('count').sort_values(ascending = False)","b2357277":"data2.corr()","492dbe16":"data2.groupby('owner')['owner'].agg('count').sort_values(ascending = False)","7df7ef9b":"data2 = data2.drop(['transmission','seller_type','torque'],axis = 'columns')","46cb8bc1":"data2.head()","32e4d80b":"data2.mileage.unique()","a69b1ebb":"data2.isnull().sum()","d4cb8e64":"data2 = data2.dropna()","7a78d19b":"data2","f1825d56":"data2.isnull().sum()","9bf7e547":"data2.info()","fbf04c8f":"data2['power'] = data2['max_power'].apply(lambda x: (x.split(' ')[0]))","830b96b3":"data2.head()","e5e1b1f2":"data2.seats.unique()","2336103d":"from pandas.plotting import scatter_matrix\nattribute = ['name','year','km_driven','fuel','owner','mileage','engine','seats','power']\nscatter_matrix(data2[attribute],figsize= (12,8))","45d32a7f":"data2.head()","cf42de98":"#correltion","8c51c0ff":"data2.corr()","47a64874":"data2['max_power'] = data2['max_power'].apply(lambda x: (x.split(' ')[0]))","3fb37fc1":"data2.head()","d400ac8a":"data2['mileage'] = data2['mileage'].apply(lambda x: (x.split(' ')[0]))","a13d0775":"def isfloat(x):\n    try:\n        float(x)\n    except:\n        return False\n    return True","c2963446":"data2 =data2[data2['mileage'].apply(isfloat)]","434808ee":"data2 =data2[data2['max_power'].apply(isfloat)]","fbce2673":"data2\n","38f82142":"def isstring(x):\n    try:\n        str(x)\n    except:\n        return False\n    return True","23c459b3":"data2[data2['year'].apply(isstring)]","6d8f664d":"data2.info()","46bc28e0":"data2['engine'] = data2['engine'].apply(lambda x: (x.split(' ')[0]))","30cea37b":"data2.head()","4331a9c1":"import datetime\n\ndate = datetime.date.today()\nyear1 = date.strftime(\"%Y\")\n","a94ff506":"year1 = int(year1)","56505a8d":"data2['year'] = data2['year'].astype(int)","1b971037":"data2['year_old'] = year1-data2['year']","1525e493":"data2.head()","dd6867b8":"#label encoder","11871f53":"from sklearn.preprocessing import LabelEncoder\nlabelencoder = LabelEncoder()","e07ddba6":"data2['fuel'] = labelencoder.fit_transform(data2['fuel'])\ndata2['owner'] = labelencoder.fit_transform(data2['owner'])\n","076b1a0d":"data2.head()","f68c954e":"#feature aelection","c72e058e":"x = data2[['km_driven','fuel','owner','engine','max_power','seats','power','year_old']]","ccb8dd1e":"y = data2[['selling_price']]","91c4531c":"from sklearn.model_selection import train_test_split\nfrom sklearn.linear_model import LinearRegression\n","c615fcc2":"x_train,x_test, y_train,y_test = train_test_split(x,y,test_size = 0.3,random_state = 10)","4afdd1f0":"lnr = LinearRegression()","a75e3924":"model =lnr.fit(x_train,y_train)","3cedec3e":"predict = model.predict(x_test)","dd996587":"from sklearn.metrics import r2_score","e29b9593":"r2_score(y_test,predict)","c59f98da":"plt.title('Comparison of Y values in test and the Predicted values')\nplt.ylabel('Test Set')\nplt.xlabel('Predicted values')\nplt.scatter( y_test,predict,  color='black')\nplt.show()","a90d7ae8":"data2.head()"}}