{"cell_type":{"24cfe95c":"code","b35fb1fe":"code","d97f808e":"code","495f46ba":"code","857e7990":"code","9e9418c2":"code","04e4eba2":"code","34b63cfb":"code","04a69b14":"code","0f0ed656":"code","513eb035":"code","1abf9078":"code","00e6a081":"code","1c40c18a":"code","c68fd7c7":"code","4a01d515":"code","d409d43c":"code","b1704e4b":"code","77338ba1":"code","0103f308":"code","af403dd5":"code","15676594":"code","6e5315ad":"code","a83759f1":"markdown"},"source":{"24cfe95c":"import pandas as pd\nimport numpy as np\nimport collections\nfrom datetime import datetime\nfrom datetime import timedelta\n\nfrom tqdm import tqdm\ntqdm.pandas()\n\n\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.linear_model import LinearRegression\nfrom sklearn.metrics import mean_squared_error, r2_score\nimport matplotlib.pyplot as plt\n\nfrom sklearn import linear_model\nfrom sklearn import model_selection\nfrom sklearn.metrics import classification_report\nfrom sklearn.metrics import confusion_matrix\nfrom sklearn.metrics import accuracy_score\nfrom sklearn.metrics import zero_one_loss\nfrom sklearn.ensemble import RandomForestClassifier\n\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))","b35fb1fe":"train=pd.read_csv(\"\/kaggle\/input\/data-science-bowl-2019\/train.csv\",sep=',',decimal='.')\ntest=pd.read_csv(\"\/kaggle\/input\/data-science-bowl-2019\/test.csv\",sep=',',decimal='.')\ntrain_labels=pd.read_csv(\"\/kaggle\/input\/data-science-bowl-2019\/train_labels.csv\",sep=',',decimal='.')\nspecs=pd.read_csv(\"\/kaggle\/input\/data-science-bowl-2019\/specs.csv\",sep=',',decimal='.')\nsample_submission=pd.read_csv(\"\/kaggle\/input\/data-science-bowl-2019\/sample_submission.csv\",sep=',',decimal='.')","d97f808e":"print('Evaluaciones: ', train_labels['title'].unique())\nprint('Total de Evaluaciones: ', len(train_labels['title'].unique()))","495f46ba":"assessment=train_labels['title'].value_counts()\nfig = plt.figure()\nax = assessment.plot(kind='barh',grid=False, color='blue')\nplt.show()","857e7990":"train=train.drop(['timestamp','event_data'],axis=1)\ntest=test.drop(['timestamp','event_data'],axis=1)","9e9418c2":"train=train[train.installation_id.isin(train_labels.installation_id.unique())]\ntest_assess = test[test.type == 'Assessment'].copy()\ntest_labels = sample_submission.copy()\ntest_labels['title'] = test_labels['installation_id'].progress_apply(lambda install_id: test_assess[test_assess.installation_id == install_id].iloc[-1].title)","04e4eba2":"train=train.drop(['event_id','event_code'],axis=1)\ntest=test.drop(['event_id','event_code'],axis=1)\n\ntrain_2=(pd.get_dummies(train.drop(columns=['game_session', 'event_count', 'game_time']),\n            columns=['title', 'type', 'world']).groupby(['installation_id']).sum())\n\ntest_2=(pd.get_dummies(test.drop(columns=['game_session', 'event_count', 'game_time']),\n            columns=['title', 'type', 'world']).groupby(['installation_id']).sum())\n\ntrain_3=(train[['installation_id', 'event_count', 'game_time']].groupby(['installation_id'])\n        .agg([np.sum, np.mean, np.std, np.min, np.max]))\n            \ntest_3=(test[['installation_id', 'event_count', 'game_time']].groupby(['installation_id'])\n        .agg([np.sum, np.mean, np.std, np.min, np.max]))","34b63cfb":"def parameters(group1, col):\n    return group1[['installation_id', col, 'event_count', 'game_time']\n                 ].groupby(['installation_id', col]).agg([np.mean, np.sum, np.std]).reset_index().pivot(\n        columns=col,index='installation_id')\n\n\nworld_time_stats_train = parameters(train, 'world')\ntype_time_stats_train = parameters(train, 'type')\nworld_time_stats_test = parameters(test, 'world')\ntype_time_stats_test = parameters(test, 'type')","04a69b14":"new_train=train_2.join(train_3).join(world_time_stats_train).join(type_time_stats_train).fillna(0)\nnew_test=test_2.join(test_3).join(world_time_stats_test).join(type_time_stats_test).fillna(0)","0f0ed656":"titles = train_labels.title.unique()\ntitle2mode = {}\n\nfor title in titles:\n    mode = train_labels[train_labels.title == title].accuracy_group.value_counts().index[0]\n    title2mode[title] = mode\n\ntrain_labels['title_mode'] = train_labels.title.apply(lambda title: title2mode[title])\ntest_labels['title_mode'] = test_labels.title.apply(lambda title: title2mode[title])","513eb035":"final_train = pd.get_dummies((train_labels.set_index('installation_id')\n        .drop(columns=['num_correct', 'num_incorrect', 'accuracy', 'game_session'])\n        .join(new_train)),columns=['title'])\n\n\n\nfinal_train = final_train.reset_index().groupby('installation_id').apply(lambda x: x.iloc[-1])\nfinal_train = final_train.drop(columns='installation_id')\n\nprint('Dimensi\u00f3n train_labels:', final_train.shape)\n\nfinal_test = pd.get_dummies(test_labels.set_index('installation_id').join(new_test), columns=['title'])\n\nprint('Dimensi\u00f3n test_labels:',final_test.shape)","1abf9078":"X = final_train.drop(columns='accuracy_group').values\ny = final_train['accuracy_group'].values\n\nX_train, X_test, y_train, y_test = train_test_split(X, y, random_state=1)\n\nprint('Dimensiones x_train: ',X_train.shape)\nprint('Dimensiones x_test: ',X_test.shape)\nprint('Dimensiones y_train: ',y_train.shape)\nprint('Dimensiones y_test: ',y_test.shape)","00e6a081":"from sklearn.model_selection import train_test_split\nfrom sklearn.preprocessing import MinMaxScaler\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.metrics import classification_report\nfrom sklearn.metrics import confusion_matrix\n\nimport matplotlib.pyplot as plt\nfrom matplotlib.colors import ListedColormap\nimport matplotlib.patches as mpatches\nimport seaborn as sb","1c40c18a":"scaler = MinMaxScaler()\nX_train = scaler.fit_transform(X_train)\nX_test = scaler.transform(X_test)","c68fd7c7":"\nn_neighbors = 7\n\nknn = KNeighborsClassifier(n_neighbors)\nknn.fit(X_train, y_train)\nprint('Accuracy of K-NN classifier on training set: {:.2f}'\n     .format(knn.score(X_train, y_train)))\nprint('Accuracy of K-NN classifier on test set: {:.2f}'\n     .format(knn.score(X_test, y_test)))\n","4a01d515":"pred = knn.predict(X_test)\nprint(confusion_matrix(y_test, pred))\nprint(classification_report(y_test, pred))","d409d43c":"k_range = range(1, 20)\nscores = []\nfor k in k_range:\n    knn = KNeighborsClassifier(n_neighbors = k)\n    knn.fit(X_train, y_train)\n    scores.append(knn.score(X_test, y_test))\nplt.figure()\nplt.xlabel('k')\nplt.ylabel('accuracy')\nplt.scatter(k_range, scores)\nplt.xticks([0,5,10,15,20])","b1704e4b":"results=pd.DataFrame()\nresults['k']=list(range(1,20))\nresults['Scores']=scores","77338ba1":"max_value_score=results['Scores'].max()\nprint('Max. Accuracy: ',max_value_score)\nk_max=(results['k'][results['Scores']==max_value_score]).tolist()[0]\nprint('k value with max. accuracy: ', k_max)","0103f308":"n_neighbors = k_max\n\nknn = KNeighborsClassifier(n_neighbors)\nknn.fit(X_train, y_train)\nprint('Accuracy of K-NN classifier on training set: {:.2f}'\n     .format(knn.score(X_train, y_train)))\nprint('Accuracy of K-NN classifier on test set: {:.2f}'\n     .format(knn.score(X_test, y_test)))","af403dd5":"pred = knn.predict(X_test)\nprint(confusion_matrix(y_test, pred))\nprint(classification_report(y_test, pred))","15676594":"X2=final_train.drop(columns='accuracy_group').index\ny2=final_train['accuracy_group'].index\nX_train2, X_test2, y_train2, y_test2 = train_test_split(X2, y2, random_state=1)","6e5315ad":"sub=pd.DataFrame()\nsub['installation_id']=X_test2\nsub['accuracy_group']=pred\nsub.to_csv('submission.csv', index=False)","a83759f1":"> **k-Nearest Neighbor**"}}