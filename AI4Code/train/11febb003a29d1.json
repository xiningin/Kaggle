{"cell_type":{"56a1d243":"code","a5d440bc":"code","d070f8e0":"code","f64ba293":"code","ba26888d":"code","727e0711":"code","89fb27b2":"code","c9c3f622":"code","e9d21cf4":"code","626f2d13":"code","2d9df61d":"code","32e8b6f0":"code","8eb1e61f":"code","7ddd8e80":"code","51688e47":"code","99bcf30f":"code","b2669439":"markdown"},"source":{"56a1d243":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nfrom collections import Counter\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\nfrom sklearn.metrics import roc_auc_score\nfrom sklearn.model_selection import train_test_split\nfrom keras.preprocessing.text import Tokenizer\nfrom keras.utils import to_categorical\nfrom keras.preprocessing.sequence import pad_sequences\nfrom keras.layers import Embedding\nfrom keras.layers import Input\nfrom keras.layers import Conv1D\nfrom keras.layers import MaxPooling1D\nfrom keras.layers import Flatten\nfrom keras.layers import Dropout\nfrom keras.layers import Dense\nfrom keras.optimizers import RMSprop\nfrom keras.models import Model\nfrom keras.models import load_model\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory\n\nimport os\nprint(os.listdir(\"..\/input\"))\nprint(os.listdir(\"..\/input\/glove-global-vectors-for-word-representation\"))\nprint(os.listdir(\"..\/input\/jigsaw-unintended-bias-in-toxicity-classification\"))\n\n# Any results you write to the current directory are saved as output.","a5d440bc":"# Config\nSEED = 11\nTARGET = 'target'\nTEXT = 'comment_text'\nPREDICTION = 'prediction'\nIDENTITY = ['male', 'female', 'homosexual_gay_or_lesbian', 'christian', 'jewish', 'muslim',\n            'black', 'white', 'psychiatric_or_mental_illness']\nMAX_NUM_WORDS = 10000\nMAX_SEQUENCE_LENGTH = 250\nTEST_SIZE = 0.01\nEMBEDDINGS_PATH = '..\/input\/glove-global-vectors-for-word-representation\/glove.6B.100d.txt'\nEMBEDDINGS_DIMENSION = 100\nDROPOUT_RATE = 0.3\nLEARNING_RATE = 1e-5\nNUM_EPOCHS = 10\nBATCH_SIZE = 128\n","d070f8e0":"CONTRACTIONS = {\"ain't\": \"is not\", \"aren't\": \"are not\",\"can't\": \"cannot\", \"'cause\": \"because\", \"could've\": \"could have\", \"couldn't\": \"could not\", \"didn't\": \"did not\", \n                \"doesn't\": \"does not\", \"don't\": \"do not\", \"hadn't\": \"had not\", \"hasn't\": \"has not\", \"haven't\": \"have not\", \"he'd\": \"he would\",\"he'll\": \"he will\", \"he's\": \"he is\",\n                \"how'd\": \"how did\", \"how'd'y\": \"how do you\", \"how'll\": \"how will\", \"how's\": \"how is\",  \"I'd\": \"I would\", \"I'd've\": \"I would have\", \"I'll\": \"I will\",\n                \"I'll've\": \"I will have\",\"I'm\": \"I am\", \"I've\": \"I have\", \"i'd\": \"i would\", \"i'd've\": \"i would have\", \"i'll\": \"i will\",  \"i'll've\": \"i will have\",\n                \"i'm\": \"i am\", \"i've\": \"i have\", \"isn't\": \"is not\", \"it'd\": \"it would\", \"it'd've\": \"it would have\", \"it'll\": \"it will\", \"it'll've\": \"it will have\",\n                \"it's\": \"it is\", \"let's\": \"let us\", \"ma'am\": \"madam\", \"mayn't\": \"may not\", \"might've\": \"might have\",\"mightn't\": \"might not\",\"mightn't've\": \"might not have\",\n                \"must've\": \"must have\", \"mustn't\": \"must not\", \"mustn't've\": \"must not have\", \"needn't\": \"need not\", \"needn't've\": \"need not have\",\"o'clock\": \"of the clock\",\n                \"oughtn't\": \"ought not\", \"oughtn't've\": \"ought not have\", \"shan't\": \"shall not\", \"sha'n't\": \"shall not\", \"shan't've\": \"shall not have\", \"she'd\": \"she would\",\n                \"she'd've\": \"she would have\", \"she'll\": \"she will\", \"she'll've\": \"she will have\", \"she's\": \"she is\", \"should've\": \"should have\", \"shouldn't\": \"should not\",\n                \"shouldn't've\": \"should not have\", \"so've\": \"so have\",\"so's\": \"so as\", \"this's\": \"this is\",\"that'd\": \"that would\", \"that'd've\": \"that would have\",\n                \"that's\": \"that is\", \"there'd\": \"there would\", \"there'd've\": \"there would have\", \"there's\": \"there is\", \"here's\": \"here is\",\"they'd\": \"they would\",\n                \"they'd've\": \"they would have\", \"they'll\": \"they will\", \"they'll've\": \"they will have\", \"they're\": \"they are\", \"they've\": \"they have\", \"to've\": \"to have\",\n                \"wasn't\": \"was not\", \"we'd\": \"we would\", \"we'd've\": \"we would have\", \"we'll\": \"we will\", \"we'll've\": \"we will have\", \"we're\": \"we are\", \"we've\": \"we have\",\n                \"weren't\": \"were not\", \"what'll\": \"what will\", \"what'll've\": \"what will have\", \"what're\": \"what are\",  \"what's\": \"what is\", \"what've\": \"what have\",\n                \"when's\": \"when is\", \"when've\": \"when have\", \"where'd\": \"where did\", \"where's\": \"where is\", \"where've\": \"where have\", \"who'll\": \"who will\",\n                \"who'll've\": \"who will have\", \"who's\": \"who is\", \"who've\": \"who have\", \"why's\": \"why is\", \"why've\": \"why have\", \"will've\": \"will have\", \"won't\": \"will not\",\n                \"won't've\": \"will not have\", \"would've\": \"would have\", \"wouldn't\": \"would not\", \"wouldn't've\": \"would not have\", \"y'all\": \"you all\", \"y'all'd\": \"you all would\",\n                \"y'all'd've\": \"you all would have\",\"y'all're\": \"you all are\",\"y'all've\": \"you all have\",\"you'd\": \"you would\", \"you'd've\": \"you would have\",\n                \"you'll\": \"you will\", \"you'll've\": \"you will have\", \"you're\": \"you are\", \"you've\": \"you have\", \"it's\": \"it is\" }\n","f64ba293":"train = pd.read_csv('..\/input\/jigsaw-unintended-bias-in-toxicity-classification\/train.csv')\n\n# Make sure all comment_text values are strings\ntrain[TEXT] = train[TEXT].astype(str) \n\n# Convert taget and identity columns to booleans\ndef convert_to_bool(df, col_name):\n    df[col_name] = np.where(df[col_name] >= 0.5, True, False)\n    \ndef convert_dataframe_to_bool(df):\n    bool_df = df.copy()\n    for col in [TARGET] + IDENTITY:\n        convert_to_bool(bool_df, col)\n    return bool_df\n\ntrain = convert_dataframe_to_bool(train)\n","ba26888d":"train.shape","727e0711":"# All comments must be truncated or padded to be the same length.\ndef pad_text(texts, tokenizer):\n    return pad_sequences(tokenizer.texts_to_sequences(texts), maxlen=MAX_SEQUENCE_LENGTH)\n\n\ndef _embeddings_index(path):\n    \"\"\"Load embeddings\"\"\"\n    embeddings_index = {}\n    with open(path) as f:\n        for line in f:\n            values = line.split()\n            word = values[0]\n            coefs = np.asarray(values[1:], dtype='float32')\n            embeddings_index[word] = coefs\n    return embeddings_index\n\n\ndef _unknown_words(vocab, embeddings_index):\n    known_words_count_unique = 0\n    known_words_count = 0\n    unknown_words_count = 0\n    unknown_words = Counter()\n    for word in vocab.keys():\n        em = embeddings_index.get(word, None)\n        c = vocab.get(word)\n        if em is None:\n            unknown_words_count += c\n            unknown_words[word] += c\n        else:\n            known_words_count_unique += 1\n            known_words_count += c\n    print('Found embeddings for {:.3%} of vocab'.format(known_words_count_unique \/ len(vocab)))\n    print('Found embeddings for  {:.3%} of all text'.format(known_words_count \/ (known_words_count + unknown_words_count)))\n    return unknown_words\n\n\ndef add_lowercase_to_embeddings(embeddings_index, vocab):\n    c = 0\n    for word in vocab:\n        l = word.lower()\n        if word in embeddings_index and l not in embeddings_index:  \n            embeddings_index[l] = embeddings_index[word]\n            c += 1\n    print('add_lowercase_to_embeddings: added {} words'.format(c))\n\n\ndef clean_contractions(str, mapping=CONTRACTIONS):\n    specials = [\"\u2019\", \"\u2018\", \"\u00b4\", \"`\"]\n    for s in specials:\n        str = str.replace(s, \"'\")\n    res = ' '.join([mapping[t] if t in mapping else t for t in str.split(' ')])\n    return res\n    \n\ntrain[TEXT] = train[TEXT].apply(lambda x: clean_contractions(x))\n# Create a text tokenizer.\ntokenizer = Tokenizer(num_words=MAX_NUM_WORDS)\ntokenizer.fit_on_texts(train[TEXT])\nvocab = Counter(tokenizer.word_counts)\nprint('most common vocab: {}'.format(vocab.most_common(100)))\n\n\n\n    ","89fb27b2":"embeddings_index = _embeddings_index(EMBEDDINGS_PATH)\n# Glove does not have contractions such as \"it's\", \"that's\"\n#print(\"it is={}\".format(\"it is\" in embeddings_index))\n#print(\"that is={}\".format(\"that is\" in embeddings_index))\nadd_lowercase_to_embeddings(embeddings_index, vocab)\nunknown_words = _unknown_words(vocab, embeddings_index)\nprint('{} unknown words'.format(len(unknown_words)))\nprint('most common unknown words: {}'.format(unknown_words.most_common(1000)))","c9c3f622":"train_df, validate_df = train_test_split(train, test_size=TEST_SIZE, random_state=SEED)\ntrain_df.shape, validate_df.shape","e9d21cf4":"def _embedding_matrix(embeddings_index, tokenizer, dimension_size):\n    embedding_matrix = np.zeros((len(tokenizer.word_index) + 1, dimension_size))\n    for word, i in tokenizer.word_index.items():\n        embedding_vector = embeddings_index.get(word)\n        if embedding_vector is not None:\n            # words not found in embedding index will be all-zeros.\n            embedding_matrix[i] = embedding_vector\n    return embedding_matrix\n\n\ndef train_model(train_df, validate_df, tokenizer, embeddings_index):\n    \"\"\"Define and train a Convolutional Neural Net for classifying toxic comments\"\"\"\n    # Prepare data\n    train_text = pad_text(train_df[TEXT], tokenizer)\n    train_labels = to_categorical(train_df[TARGET])\n    validate_text = pad_text(validate_df[TEXT], tokenizer)\n    validate_labels = to_categorical(validate_df[TARGET])\n\n    embedding_matrix = _embedding_matrix(embeddings_index, tokenizer, dimension_size=EMBEDDINGS_DIMENSION)\n    \n\n    # Create model layers.\n    def get_convolutional_neural_net_layers():\n        \"\"\"Returns (input_layer, output_layer)\"\"\"\n        sequence_input = Input(shape=(MAX_SEQUENCE_LENGTH,), dtype='int32')\n        embedding_layer = Embedding(len(tokenizer.word_index) + 1,\n                                    EMBEDDINGS_DIMENSION,\n                                    weights=[embedding_matrix],\n                                    input_length=MAX_SEQUENCE_LENGTH,\n                                    trainable=False)\n        x = embedding_layer(sequence_input)\n        x = Conv1D(128, 2, activation='relu', padding='same')(x)\n        x = MaxPooling1D(5, padding='same')(x)\n        x = Conv1D(128, 3, activation='relu', padding='same')(x)\n        x = MaxPooling1D(5, padding='same')(x)\n        x = Conv1D(128, 4, activation='relu', padding='same')(x)\n        x = MaxPooling1D(40, padding='same')(x)\n        x = Flatten()(x)\n        x = Dropout(rate=DROPOUT_RATE, seed=SEED)(x)\n        x = Dense(128, activation='relu')(x)\n        preds = Dense(2, activation='softmax')(x)\n        return sequence_input, preds\n\n    # Compile model.\n    print('compiling model...')\n    input_layer, output_layer = get_convolutional_neural_net_layers()\n    model = Model(input_layer, output_layer)\n    model.compile(loss='categorical_crossentropy',\n                  optimizer=RMSprop(lr=LEARNING_RATE),\n                  metrics=['acc'])\n\n    # Train model.\n    print('training model...')\n    history = model.fit(train_text,\n                  train_labels,\n                  batch_size=BATCH_SIZE,\n                  epochs=NUM_EPOCHS,\n                  validation_data=(validate_text, validate_labels),\n                  verbose=2)\n\n    return model, history\n\nmodel, history = train_model(train_df, validate_df, tokenizer, embeddings_index)\nmodel.summary()","626f2d13":"plt.figure(figsize=(12,8))\nplt.plot(history.history['acc'], label='Train Accuracy')\nplt.plot(history.history['val_acc'], label='Validation Accuracy')\nplt.show()","2d9df61d":"validate_df[PREDICTION] = model.predict(pad_text(validate_df[TEXT], tokenizer))[:, 1]\nvalidate_df.head()","32e8b6f0":"class JigsawEvaluator:\n\n    def __init__(self, y_true, y_identity, power=-5, overall_model_weight=0.25):\n        self.y = (y_true >= 0.5).astype(int)\n        self.y_i = (y_identity >= 0.5).astype(int)\n        self.n_subgroups = self.y_i.shape[1]\n        self.power = power\n        self.overall_model_weight = overall_model_weight\n\n    @staticmethod\n    def _compute_auc(y_true, y_pred):\n        try:\n            return roc_auc_score(y_true, y_pred)\n        except ValueError:\n            return np.nan\n\n    def _compute_subgroup_auc(self, i, y_pred):\n        \"\"\"Restrict the data set to only the examples that mention the specific identity subgroup.\n        A low value in this metric means the model does a poor job of distinguishing\n        between toxic and non-toxic comments that mention the identity.\"\"\"\n        mask = self.y_i[:, i] == 1\n        return self._compute_auc(self.y[mask], y_pred[mask])\n\n    def _compute_bpsn_auc(self, i, y_pred):\n        \"\"\"BPSN (Background Positive, Subgroup Negative) AUC:\n        Restrict the test set to the non-toxic examples that mention the identity and the toxic examples that do not.\n        A low value in this metric means that the model confuses non-toxic examples\n        that mention the identity with toxic examples that do not,\n        likely meaning that the model predicts higher toxicity scores than it should for non-toxic examples mentioning the identity.\"\"\"\n        mask = self.y_i[:, i] + self.y == 1\n        return self._compute_auc(self.y[mask], y_pred[mask])\n\n    def _compute_bnsp_auc(self, i, y_pred):\n        \"\"\"BNSP (Background Negative, Subgroup Positive) AUC:\n        Restrict the test set to the toxic examples that mention the identity and the non-toxic examples that do not.\n        A low value here means that the model confuses toxic examples that mention the identity with non-toxic examples that do not,\n        likely meaning that the model predicts lower toxicity scores than it should for toxic examples mentioning the identity.\"\"\"\n        mask = self.y_i[:, i] + self.y != 1\n        return self._compute_auc(self.y[mask], y_pred[mask])\n\n    def _compute_bias_metrics_for_model(self, y_pred):\n        records = np.zeros((3, self.n_subgroups))\n        for i in range(self.n_subgroups):\n            records[0, i] = self._compute_subgroup_auc(i, y_pred)\n            records[1, i] = self._compute_bpsn_auc(i, y_pred)\n            records[2, i] = self._compute_bnsp_auc(i, y_pred)\n        return records\n\n    def _calculate_overall_auc(self, y_pred):\n        return roc_auc_score(self.y, y_pred)\n\n    def _power_mean(self, array):\n        total = sum(np.power(array, self.power))\n        return np.power(total \/ len(array), 1 \/ self.power)\n\n    def get_final_metric(self, y_pred):\n        bias_metrics = self._compute_bias_metrics_for_model(y_pred)\n        bias_score = np.average([\n            self._power_mean(bias_metrics[0]),\n            self._power_mean(bias_metrics[1]),\n            self._power_mean(bias_metrics[2])\n        ])\n        overall_score = self.overall_model_weight * self._calculate_overall_auc(y_pred)\n        bias_score = (1 - self.overall_model_weight) * bias_score\n        return overall_score + bias_score","8eb1e61f":"y_true = validate_df[TARGET].values\ny_identity = validate_df[IDENTITY].values\n\n# predict\ny_pred = validate_df[PREDICTION].values\n\n# evaluate\nevaluator = JigsawEvaluator(y_true, y_identity)\nauc_score = evaluator.get_final_metric(y_pred)\nprint('auc_score={}'.format(auc_score))","7ddd8e80":"test = pd.read_csv('..\/input\/jigsaw-unintended-bias-in-toxicity-classification\/test.csv')\nsubmission = pd.read_csv('..\/input\/jigsaw-unintended-bias-in-toxicity-classification\/sample_submission.csv', index_col='id')\nsubmission[PREDICTION] = model.predict(pad_text(test[TEXT], tokenizer))[:, 1]\nsubmission.head()","51688e47":"submission.shape","99bcf30f":"submission.to_csv('submission.csv')\nprint(os.listdir(\".\"))","b2669439":"Best auc_score=0.8815765536994753"}}