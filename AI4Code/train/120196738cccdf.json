{"cell_type":{"51b2b60a":"code","8023a618":"code","31bcc57b":"code","db53ee1d":"code","3e3fb823":"code","96bfa936":"code","949227a6":"code","c4e73eaf":"code","1ad0d94e":"code","78bd7d83":"code","e9d36269":"code","103172d7":"code","0e8ce54d":"code","3cb52179":"code","41917ce6":"code","f36871f5":"code","63e91487":"code","54f4504b":"code","fc8bde9f":"code","594e863e":"code","7a04e5ec":"code","a06f350c":"code","89e6490b":"code","6367f594":"code","285618f3":"code","c1064b90":"code","95a5fb96":"code","672bdfaf":"code","bfd73281":"code","39391ab3":"code","4db245e3":"code","3d4b64bc":"code","2d03c48c":"code","42651f92":"code","cd3c8c5a":"code","59092414":"code","187a806f":"code","9cb13b7a":"code","6b124a75":"code","51d6b200":"code","1cbc47ed":"code","2ed8ba39":"code","b19cd0a0":"code","c33d0807":"code","97cb4f39":"markdown","58b0a4a9":"markdown","9cd90cfb":"markdown","81046c1e":"markdown","8ee3664f":"markdown","42150f70":"markdown","fd5812d2":"markdown","4bad33b1":"markdown","9aea55ad":"markdown","bdfe924d":"markdown","9c8ae536":"markdown","f8a097d3":"markdown","327d1d1d":"markdown","6abe8839":"markdown","3681449b":"markdown","d478ee4a":"markdown","f4c9e897":"markdown","c3172694":"markdown","35339494":"markdown","9f184ff3":"markdown","550e4e44":"markdown","99c23d01":"markdown","dd604915":"markdown","a7778417":"markdown","7627f383":"markdown","27a41a4f":"markdown","0667bcdf":"markdown","481cce4c":"markdown","1d65f1a1":"markdown","7947e3e0":"markdown"},"source":{"51b2b60a":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","8023a618":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport math as math\nimport datetime as dt\nfrom functools import reduce\nfrom scipy import stats as st\nimport plotly.express as px\nimport scipy.stats as stats\nimport plotly.graph_objects as go\nfrom plotly.graph_objects import Layout\n\nimport sys\nimport warnings\nif not sys.warnoptions:\n       warnings.simplefilter(\"ignore\")","31bcc57b":"import plotly.io as pio\n\npio.renderers","db53ee1d":"pio.renderers.default = \"png\"","3e3fb823":"!pip install openpyxl \n!pip install -U kaleido","96bfa936":"import plotly.graph_objects as go\nfrom plotly.offline import init_notebook_mode, iplot\ninit_notebook_mode(connected=True)","949227a6":"# upload files\n\nathletes = pd.read_excel(\"..\/input\/2021-olympics-in-tokyo\/Athletes.xlsx\")\ncoaches = pd.read_excel(\"..\/input\/2021-olympics-in-tokyo\/Coaches.xlsx\")\nentriesGender = pd.read_excel(\"..\/input\/2021-olympics-in-tokyo\/EntriesGender.xlsx\")\nmedals = pd.read_excel(\"..\/input\/2021-olympics-in-tokyo\/Medals.xlsx\")\nteams = pd.read_excel(\"..\/input\/2021-olympics-in-tokyo\/Teams.xlsx\")\n\ndf_list = [athletes,coaches,entriesGender,medals,teams]","c4e73eaf":"athletes.name = 'athletes'\ncoaches.name = 'coaches'\nentriesGender.name = 'entriesGender'\nmedals.name = 'medals'\nteams.name = 'teams'","1ad0d94e":"display(athletes.sample(5))\ndisplay(entriesGender.sample(5))\ndisplay(medals.sample(5))\ndisplay(teams.sample(5))","78bd7d83":"# check for missing values\nfor i in df_list:\n    display(i.name)\n    display(i.isnull().sum())","e9d36269":"# groupby country, count the number of atheltes\nNOC_athletes_cnt = athletes.groupby('NOC')['Name'].count().reset_index().rename(columns = {'Name':'cnt'}).sort_values('cnt', ascending = False)\n\n# plot top 20 countries who have the most athletes\nfig = px.bar(NOC_athletes_cnt.head(20), \n             x=\"NOC\", y='cnt', hover_data=['NOC'])\n\niplot(fig)","103172d7":"census_data = pd.read_csv(\"..\/input\/tokyo-2020\/CensusData.csv\")\n\ndisplay(census_data.info()) # pop data is numeric \ncensus_data_copy = census_data.copy()\ndisplay(census_data)","0e8ce54d":"# array of all columns containing population data\npop_cols = [col for col in census_data.columns if 'pop' in col]\n\n# correct the population columns \nfor i in pop_cols:\n    census_data[i] = census_data[i] * 1000\n    census_data[i] = census_data[i].astype(int)\n\ndisplay(census_data)","3cb52179":"# slice the data for 2021\ncensus_2021 = census_data[['name','pop2021']]","41917ce6":"# Korea \ndisplay(census_2021[census_2021['name'].str.contains(\"Korea\")])\ndisplay(NOC_athletes_cnt[NOC_athletes_cnt['NOC'].str.contains(\"Korea\")])\n# United \ndisplay(census_2021[census_2021['name'].str.contains(\"United\")])\ndisplay(NOC_athletes_cnt[NOC_athletes_cnt['NOC'].str.contains(\"United\")])\n# America\ndisplay(census_2021[census_2021['name'].str.contains(\"America\")])\ndisplay(NOC_athletes_cnt[NOC_athletes_cnt['NOC'].str.contains(\"America\")])\n# Russia\ndisplay(census_2021[census_2021['name'].str.contains(\"Russ\")])\ndisplay(NOC_athletes_cnt[NOC_athletes_cnt['NOC'].str.contains(\"Russ\")])\n# Congo\ndisplay(census_2021[census_2021['name'].str.contains(\"Cong\")])\ndisplay(NOC_athletes_cnt[NOC_athletes_cnt['NOC'].str.contains(\"Cong\")])","f36871f5":"# United States\nusa_alias = ['United States', 'United States of America', 'US', 'U.S', 'USA', 'U.S.A'] \n# Russia\nrussia_alias = ['Russia', 'ROC','Russian Federation'] \n# China\nchina_alias = ['People\\'s Republic of China', 'China'] \n# Great Britain\nuk_alias = ['Great Britain', 'United Kingdom', 'UK'] \n# South Korea\nsouth_korea_alias = ['Republic of Korea', 'South Korea']\n","63e91487":"# another good solution example to check suspected aliases:\n# census_2021.name.str.contains(usa_pattern)","54f4504b":"#census_2021['name'] = np.where(census_2021['name'].isin(usa_alias), 'United States', census_2021['name'])\n#census_2021['name'] = np.where(census_2021['name'].isin(uk_alias), 'Great Britain', census_2021['name'])","fc8bde9f":"# function that change the alias name \ndef country_name(df,column):\n    df[column] = np.where(df[column].isin(usa_alias), 'United States', df[column])\n    df[column] = np.where(df[column].isin(uk_alias), 'Great Britain', df[column])\n    df[column] = np.where(df[column].isin(russia_alias), 'Russia', df[column])\n    df[column] = np.where(df[column].isin(china_alias), 'China', df[column])\n    df[column] = np.where(df[column].isin(south_korea_alias), 'South Korea', df[column])","594e863e":"dfs = [census_2021, NOC_athletes_cnt]\ncolumn_names = ['name','NOC']\n\nfor i in dfs:\n    for x in i.columns:\n        for j in column_names:\n            if j == x:\n                country_name(i,j) \n ","7a04e5ec":"# check succseful standardization\ndisplay(census_2021.head(5))\ndisplay(NOC_athletes_cnt.head(5))","a06f350c":"# fill missing values in order to avoide errors\nNOC_athletes_cnt = NOC_athletes_cnt.fillna(0)\ncensus_2021 = census_2021.fillna(0)\n\n# Merge the two dataframes and select only the top 50 populated countries\nathletes_per_mil = pd.merge(NOC_athletes_cnt.iloc[0:50], census_2021, left_on=  ['NOC'], right_on= ['name'], how = 'left').drop(columns= ['name']).sort_values('pop2021', ascending = False)\n\n# drop missing values\nathletes_per_mil = athletes_per_mil.dropna()\n\n# change type in order to show numbers in long form\nathletes_per_mil['pop2021'] = athletes_per_mil['pop2021'].astype('int')\n\n# sort the data by number of athletes\nathletes_per_mil = athletes_per_mil.sort_values('cnt', ascending = False)\nathletes_per_mil.head(5)","89e6490b":"# sort the data by number of athletes\nathletes_per_mil = athletes_per_mil.sort_values('cnt', ascending = False)\ndisplay(athletes_per_mil.head(5))\n\n# check country\nathletes_per_mil[athletes_per_mil['NOC'] == 'Israel']","6367f594":"# calculate the number of people per athelete and number of athelers per million\nathletes_per_mil['ppl_per_athlete'] = round(athletes_per_mil['pop2021'] \/ athletes_per_mil['cnt']).astype('int')\nathletes_per_mil['athlete_per_mil'] = (athletes_per_mil['cnt'] * 1000000) \/ athletes_per_mil['pop2021']","285618f3":"# sort the table by athelet per million\nathletes_per_mil = athletes_per_mil.sort_values('athlete_per_mil', ascending = False)\n\nathletes_per_mil.head(10)","c1064b90":"# plot top 20 countries by athelete per 1 million population\nfig = px.bar(athletes_per_mil.head(20), x=\"NOC\", y='athlete_per_mil', hover_data=['NOC'])\niplot(fig)","95a5fb96":"# total number of unique team categories\ndisplay('Number of distinct Disciplines:', teams['Discipline'].nunique())","672bdfaf":"display(teams.head(10))","bfd73281":"# find the number of distinct events for each discipline\ndiscipline_max_events = teams.groupby('Discipline')['Event'].nunique().reset_index().rename(columns = {'Event':'max_events'}).sort_values('max_events', ascending = False)\ndiscipline_max_events.head(10)","39391ab3":"# count the number of teams for each country by discipline\ndicipline_NOC = teams.groupby(['Discipline', 'NOC'])['Event'].count().reset_index().rename(columns={'Event':'No_of_Represtative'})\ndisplay(dicipline_NOC)\n\n# join the maximum number of possible teams for eeach dicipline \ndicipline_NOC = dicipline_NOC.merge(discipline_max_events[['Discipline','max_events']] , on = 'Discipline', how = 'left').sort_values(['max_events', 'No_of_Represtative'], ascending = False)\n\ndisplay(dicipline_NOC.head(20))","4db245e3":"# For each record - check if the country sent the maximum amount of teams. \ndicipline_NOC['Full_representation'] = np.where((dicipline_NOC['No_of_Represtative'] \/ dicipline_NOC['max_events']) == 1, 1, 0)\n\n# new table only for yes\/no full represnetations \ndicipline_NOC_full_rep = dicipline_NOC.drop(['No_of_Represtative','max_events'], axis = 'columns')\ndicipline_NOC_full_rep.sample(10)","3d4b64bc":"percentages = dicipline_NOC_full_rep.groupby('NOC')['Full_representation'].count().reset_index().sort_values('Full_representation', ascending = False)\ndisplay(percentages.head(10))\ndisplay(percentages.tail(10))","2d03c48c":"# check the prectentage of full representation for each country\npercentages['Full_representation'] = (percentages['Full_representation'] \/ dicipline_NOC_full_rep['Discipline'].nunique())\n\n# sort values \nprecentages = percentages.sort_values('Full_representation', ascending = False)\n\ndisplay(precentages.head(10))\ndisplay(precentages.tail(10))\n# problem to solve - not all countries send represenative at all! Intresting.","42651f92":"# create graph of top 20 countries with relative full representative\nfig = px.bar(percentages.sort_values('Full_representation',ascending = False).iloc[0:20], \n             x=\"NOC\", y='Full_representation', hover_data=['Full_representation'])\n\n# tickangle xaxis\nfig.update_layout(xaxis_tickangle=-45)\n\n\niplot(fig)","cd3c8c5a":"medals.head(10)","59092414":"# standerdize aliases  \ncountry_name(medals, 'Team\/NOC')","187a806f":"# add census data\nmedals = pd.merge(medals, census_2021, left_on = ['Team\/NOC'], right_on = ['name'], how = 'left').drop(columns = ['name'])\nmedals = medals.dropna()\nmedals['pop2021'] = medals['pop2021'].astype('int')","9cb13b7a":"top_10_total = medals.sort_values('Rank by Total').head(10)\ntop_10_total","6b124a75":"# row function: check if a country is a golden\/silver\/bronze country by the maximum number of medals\nmedals\n\ndef medal_county(df):\n    gold = df.Gold\n    silver = df.Silver\n    bronze = df.Bronze\n    \n    if gold > silver and gold > bronze:\n        return 'gold'\n    elif silver > gold and silver > bronze:\n        return 'silver'\n    elif bronze > gold and bronze > silver:\n        return 'bronze'\n    else:\n        return 'tie'\n        ","51d6b200":"medals['top_rank'] = medals.apply(medal_county,axis = 1)\nmedals","1cbc47ed":"# plot simple pie chart \n#fig = px.pie(medals.sort_values('Gold', ascending = False).head(5), values = 'Gold', names = 'Team\/NOC', title = 'Top 10 gold', color_discrete_sequence = px.colors.sequential.thermal)\n#fig.show()\n\ngold_palette = ['#fccf45',  '#fadc57', '#fbe673', '#fff59d','#fffdcf']\n\n# plot styled pie chart\nfig = go.Figure(data = [go.Pie(labels = medals.sort_values('Gold', ascending = False).head(5)['Team\/NOC'], values = medals.sort_values('Gold', ascending = False).head(5)['Gold'])])\n\n\nfig.update_traces(hoverinfo='label+percent+value', textfont_size=15, textinfo='label+value', \n                  pull=[0.1,0,0,0,0,0],\n                  marker=dict(colors = gold_palette ,line=dict(color='#0b0c10', width = 2)))\n# add title\nfig.update_layout(\n    title={\n        'text': \"Top 5 Gold Medals Countries\",\n        'y':0.9,\n        'x':0.45,\n        'xanchor': 'center',\n        'yanchor': 'top'})\n\niplot(fig)","2ed8ba39":"\nsilver_palette = ['#bdbdbd', '#c2c2c2', '#d7d7d7', '#dcdcdc','#eeeeee']\n\n# plot styled pie chart\nfig = go.Figure(data = [go.Pie(labels = medals.sort_values('Silver', ascending = False).head(5)['Team\/NOC'], values = medals.sort_values('Silver', ascending = False).head(5)['Silver'])])\n\n\nfig.update_traces(hoverinfo='label+percent+value', textfont_size=15, textinfo='label+value', \n                  pull=[0.1,0,0,0,0,0],\n                  marker=dict(colors = silver_palette ,line=dict(color='#0b0c10', width = 2)))\n# add title\nfig.update_layout(\n    title={\n        'text': \"Top 5 Silver Medals Countries\",\n        'y':0.9,\n        'x':0.45,\n        'xanchor': 'center',\n        'yanchor': 'top'})\n\niplot(fig)","b19cd0a0":"\nsilver_palette = ['#a86048', '#a56b57', '#c1907f', '#ddb2a6','#ddc4be']\n\n# plot styled pie chart\nfig = go.Figure(data = [go.Pie(labels = medals.sort_values('Bronze', ascending = False).head(5)['Team\/NOC'], values = medals.sort_values('Bronze', ascending = False).head(5)['Bronze'])])\n\n\nfig.update_traces(hoverinfo='label+percent+value', textfont_size=15, textinfo='label+value', \n                  pull=[0.1,0,0,0,0,0],\n                  marker=dict(colors = silver_palette ,line=dict(color='#0b0c10', width = 2)))\n# add title\nfig.update_layout(\n    title={\n        'text': \"Top 5 Bronze Medals Countries\",\n        'y':0.9,\n        'x':0.45,\n        'xanchor': 'center',\n        'yanchor': 'top'})\n\niplot(fig)","c33d0807":"top_10_gold = medals.sort_values('Gold', ascending = False).head(10)\ntop_10_gold","97cb4f39":"### Standardize the aliases","58b0a4a9":"<a class=\"anchor\" id=\"4\"><\/a>\n## 4. Countries rank by full-represenatation for team sports","9cd90cfb":"#### Gold Medals","81046c1e":"#### a loop to run on both dfs ","8ee3664f":"<a class=\"anchor\" id=\"5\"><\/a>\n## 5. top 10 countries by medals","42150f70":"Color Palette Hex: https:\/\/www.color-hex.com\/color-palettes\/?keyword=Bronze","fd5812d2":"#### fix population data ","4bad33b1":"https:\/\/public.tableau.com\/app\/profile\/nadav.navon\/viz\/Tokyo_2020_Analysis\/Tokyo_Dashboard?publish=yes","9aea55ad":"#### Number of distinct events for each discipline","bdfe924d":"- The manual check showed defrences in aliases:\n        census data             | tokyo2020 data                      | checked manually\n              \n        - South Korea           | Republic of Korea\t               |\n        - United States         | United States of America            |\n        - United Kingdom        | -                                   | Great Britain\n        - Russia                | -                                   | ROC\n        - DR Congo              | Democratic Republic of the Congo    |\n        - Republic of the Congo | Congo\t                           |","9c8ae536":"#### optional example: manualy replace data for each country in the census data","f8a097d3":"### Medals Pie Charts","327d1d1d":"#### Results:","6abe8839":"#### function: rename the values of the countries column ","3681449b":"#### Number of unique disciplines ","d478ee4a":"#### check for suspect aliases in country name columns of both census and athelets dataframes","f4c9e897":"- The data is numeric\n- population should be corrected - multiply by 1000","c3172694":"\n## Data Upload \n","35339494":"Hello everyone, \nThe main point of this project is the additional use of an additional dataset of census data. This allows to make an anlysis that take countries population size into account. \nThe analysis shows some surprising insights, among theem - about how NZ rocks. Another impressive insight is the impressive representation of Japan in team sports.\n\nI would like to point out for those who are intersted what are the key methods that are most intresting about this notebooks:\n- A way to compare different countries stats by choice with an interactive Tableau dashboard.\n- Standardize states names for the original tokyo dataset with the external census dataset.\n- Analysis of the data together with universal census data.\n- A nice visualization of the medals count.\n\n\n\n\nCheers,\n\nNadav","9f184ff3":"#### Bronze Medals","550e4e44":"<a class=\"anchor\" id=\"6\"><\/a>\n## Conclusions\n\n\n- New Zealand has the most atheletes per capita, with 41 athletes per million. The runner up is Irlands with only 23 atheleres per million.\n- Japan had a 100% represenation in all teams sports disciplines and categories within these disciplines.\n- The U.S.A team is still number 1 overall (in absolute numbers). \n","99c23d01":"#### - Import population data.\n\nLink: https:\/\/worldpopulationreview.com\/","dd604915":"<a class=\"anchor\" id=\"2\"><\/a>\n## 2. Number of athletes for each country","a7778417":"<a class=\"anchor\" id=\"1\"><\/a>\n## 1. Tableau Dashboard\n\n\nThis is the final outcome after adding census analysis","7627f383":"<a class=\"anchor\" id=\"3\"><\/a>\n## 3. Countries rank by athelets per million","27a41a4f":"# Tokyo 2020 Athletes Analysis","0667bcdf":"#### slice the data for 2021","481cce4c":"# On the Agenda  \n\n### **[1. Tableau Dashboard](#1)**\n### **[2. Number of athletes for each country](#2)**\n### **[3. Countries rank by athelets per million](#3)**\n### **[4. Countries rank by full-represenatation for team sports](#4)**\n### **[5. Top countries by medals](#5)**\n\n","1d65f1a1":"#### list of similar aliases","7947e3e0":"#### Silver Medals"}}