{"cell_type":{"bc70e349":"code","f866ec11":"code","c4fc4efa":"code","d8fe1e35":"code","f73e3433":"code","8ffadac1":"code","7cf6c7c0":"code","808c06b2":"code","0e93a4f6":"code","00545d85":"code","6f047aae":"code","38b04c17":"code","15934650":"code","819c3e97":"code","13859168":"code","49f5e93f":"code","bdd33240":"code","635c45d9":"code","5b68cae6":"code","720a7cd0":"code","f8cec887":"code","cbe5b44a":"code","d6eac8ba":"code","d2d82c45":"code","6be751ca":"code","31b969b1":"code","251fda26":"code","94aa0990":"code","84a2f37e":"code","6598b975":"code","3ee91b07":"code","6b1c0ee8":"code","fe3be3af":"code","b0d85c94":"code","2e3c2290":"code","77a19b3c":"code","aa983ccf":"code","116efd02":"code","376806b2":"code","b44e137f":"code","cb427601":"code","1c4db239":"code","0564f121":"code","d12329dd":"code","6dd84eac":"code","2adf679e":"code","a80b9a72":"code","bd043410":"code","90f1bb95":"code","8179e375":"code","41f01856":"code","63a35a84":"code","a0ec30cc":"code","a13d6fd8":"code","0fe203d2":"code","eba8e5c7":"code","e1bd0d22":"code","05c196c8":"code","8426215d":"code","9d273764":"code","dd9cc94f":"code","9a5ca2bb":"code","cc3c68d0":"code","13c366a1":"code","4165fff2":"code","a0e20bde":"code","2d9f8c5f":"code","a33a354c":"code","a29c0239":"code","723036a0":"markdown","20d0cbc8":"markdown","aa922af0":"markdown","b4f2d2aa":"markdown","698ca70e":"markdown","f001ddb9":"markdown","a932c871":"markdown","71de214a":"markdown","ced04114":"markdown","8c7f5cb4":"markdown","854b0ff1":"markdown","13c6cd33":"markdown","838c124c":"markdown","cd1447e2":"markdown","eb21d6ec":"markdown","074c9b3e":"markdown","9e370feb":"markdown","f83f6244":"markdown","3cfd0414":"markdown","5218fa98":"markdown","92cd1f59":"markdown","a44e20e0":"markdown","d3830e52":"markdown","990f707f":"markdown","f1af56d8":"markdown","46bbeaea":"markdown","d18f6e33":"markdown","431a12e6":"markdown","7f723bd2":"markdown","f984464b":"markdown","5c85dda4":"markdown","acda9edf":"markdown","51cbe8aa":"markdown","fa857697":"markdown"},"source":{"bc70e349":"pip install xmltodict","f866ec11":"#Data comes in a sqlite format, and can be exported in csv format using DB browser (https:\/\/sqlitebrowser.org\/)","c4fc4efa":"cd ..\/input\/european-soccer-csv-files\/","d8fe1e35":"#Essential Imports\nimport pandas as pd\nimport numpy as np\nimport xmltodict\nimport collections","f73e3433":"#Data comes in a sqlite format, and can be exported in csv format using DB browser (https:\/\/sqlitebrowser.org\/)\n\n#reading data csv files\ncountry_df = pd.read_csv('Country.csv')\nleague_df = pd.read_csv('League.csv')\nmatch_df = pd.read_csv('Match.csv')\nplayer_df = pd.read_csv('Player.csv')\nplayer_attr_df = pd.read_csv('Player_Attributes.csv')\nteam_df = pd.read_csv('Team.csv')\nteam_attr_df = pd.read_csv('Team_Attributes.csv')","8ffadac1":"country_df.info()","7cf6c7c0":"type(country_df.name.iloc[0])","808c06b2":"country_df","0e93a4f6":"league_df.info()","00545d85":"type(league_df.name.iloc[0])","6f047aae":"league_df.head(5)","38b04c17":"#country_id column drop\nleague_df.drop('country_id', axis= 1, inplace= True)","15934650":"#country df deletion\ndel country_df","819c3e97":"match_df.info()","13859168":"#columns names\nfor i, col in enumerate(match_df.columns):\n    print(i, col)","49f5e93f":"(match_df.country_id == match_df.league_id).all()","bdd33240":"#confirmation step\ncols = np.r_[1, 6, 11:55]\nmatch_df.drop(match_df.columns[cols],axis=1, inplace=True)\nmatch_df.columns","635c45d9":"#columns names\nfor i, col in enumerate(match_df.columns):\n    print(i, col)","5b68cae6":"cols1 = np.r_[0:9, 31:39]\nmatch_stats_df = match_df.iloc[:, cols1].reset_index().drop('index', axis= 1)\ncols2 = np.r_[0, 39:69]\nmatch_bets_df = match_df.iloc[:, cols2].reset_index().drop('index', axis= 1)\ncols3 = np.r_[0, 9:31]\nmatch_lineup_df = match_df.iloc[:, cols3].reset_index().drop('index', axis= 1)\ndel match_df","720a7cd0":"#change date from string to datetime\nmatch_stats_df.date = pd.to_datetime(match_stats_df.date)","f8cec887":"#inspecting goal values\nmatch_stats_df.goal.unique()[1]","cbe5b44a":"#inspecting possession values\nmatch_stats_df.possession.unique()[1]","d6eac8ba":"# o = xmltodict.parse(match_stats_df.goal.unique()[1])\n# o","d2d82c45":"def parse_goal(goal, home_id, away_id):\n    '''\n    The function parses the goal values which is xml text into more convenient tuble\n    Args:\n        goal -> xml text with multiple tags and goal info\n        home_id -> the id of the home team of the match that goal was scored in\n        away_id -> the id of the away team\n    Returns:\n        a tuble of two lists: the first one is the home goals list and the second is the away goals list.\n        each list consists of a number of tubles correspond to each goal.\n        tuble format: (time of the goal in mins-int, scorer id-int, assisstant id-int, goal type-string)\n    '''\n    if pd.notna(goal):\n        if xmltodict.parse(goal)['goal'] != None:\n            goal_dict = xmltodict.parse(goal)['goal']['value']\n            home_goals = list()\n            away_goals = list()\n            if type(goal_dict) == collections.OrderedDict:\n                goal_dict = [goal_dict]\n            for g in goal_dict:\n                try:\n                    p1 = int(g['player1'])\n                except:\n                    p1 = 0\n                try:\n                    p2 = int(g['player2'])\n                except:\n                    p2 = 0                \n                g_info = (int(g['elapsed']),p1, p2, g['comment'])\n                if 'del' not in g.keys():\n                    if int(g['team']) == home_id:\n                        home_goals.append(g_info)\n                    else:\n                        away_goals.append(g_info)\n            return home_goals, away_goals","6be751ca":"match_stats_df[\"goals_info\"] = match_stats_df.apply(lambda row: parse_goal(row.goal, row.home_team_api_id, row.away_team_api_id), axis= 1)","31b969b1":"odd_goals = match_stats_df[match_stats_df.goals_info.isnull() == False]","251fda26":"#confirmation step\nodd_goals[odd_goals.home_team_goal+odd_goals.away_team_goal != odd_goals.goals_info.apply(lambda x: len(x[0])+len(x[1]))][['goals_info', 'home_team_goal', 'away_team_goal']].head(10)","94aa0990":"def parse_poss(poss):\n    '''\n    The function parses the possession values which is xml text into more convenient tuble\n    Args:\n        poss -> xml text with multiple tags and possession info\n    Returns:\n        a list of tubles: each one represents the essential possession info\n        tuble format: (time at which the possession recorded in mins-int, home possession-int, away possession-int)\n    '''\n    if pd.notna(poss):\n        if xmltodict.parse(poss)['possession'] != None:\n            poss_dict = xmltodict.parse(poss)['possession']['value']\n            if type(poss_dict) == collections.OrderedDict:\n                poss_dict = [poss_dict]\n            poss_info = list()\n            for p in poss_dict:\n                try:\n                    poss_info.append((int(p['elapsed']), int(p['homepos']), int(p['awaypos'])))\n                except:\n                    pass\n            return poss_info","84a2f37e":"match_stats_df['poss_info'] = match_stats_df.possession.apply(lambda val: parse_poss(val))","6598b975":"match_stats_df[match_stats_df.goals_info.isnull() == False]","3ee91b07":"match_stats_df.drop(['goal', 'shoton', 'shotoff', 'foulcommit', 'card', 'cross', 'corner', 'possession'], axis=1, inplace= True)","6b1c0ee8":"match_lineup_df.dropna(thresh=20, inplace= True)","fe3be3af":"match_lineup_df.reset_index(inplace=True)","b0d85c94":"match_lineup_df.drop('index', axis=1, inplace=True)","2e3c2290":"#max number of missing values per lineup\nmatch_lineup_df.isnull().sum(axis= 1).max()","77a19b3c":"match_bets_df.dropna(subset= list(match_bets_df.columns).remove('id'), inplace= True)","aa983ccf":"match_bets_df.reset_index(inplace= True)","116efd02":"match_bets_df.drop('index', inplace= True, axis= 1)","376806b2":"cols = list(match_bets_df.columns)\ncols.remove('id')","b44e137f":"for c in cols:\n    match_bets_df[c] = match_bets_df[c].apply(lambda x: 1\/x)","cb427601":"match_bets_df","1c4db239":"player_df.info()","0564f121":"print(type(player_df.player_name[0]))\nprint(type(player_df.birthday[0]))","d12329dd":"player_df.birthday = pd.to_datetime(player_df.birthday)","6dd84eac":"player_attr_df.info()","2adf679e":"player_attr_df.date = pd.to_datetime(player_attr_df.date)","a80b9a72":"player_attr_df.describe()","bd043410":"old_mean = player_attr_df.describe().loc['mean']\nold_std = player_attr_df.describe().loc['std']","90f1bb95":"for i in zip(player_attr_df.columns, player_attr_df.dtypes):\n    if i[1] == 'float64':\n        player_attr_df[i[0]] = player_attr_df[i[0]].fillna(player_attr_df[i[0]].mean())","8179e375":"player_attr_df.isnull().sum()","41f01856":"player_attr_df.describe().loc['mean'] - old_mean","63a35a84":"player_attr_df.describe().loc['std'] - old_std","a0ec30cc":"player_attr_df.preferred_foot.unique()","a13d6fd8":"player_attr_df.preferred_foot.fillna(value= 0, inplace=True)","0fe203d2":"player_attr_df.replace({'right': 1, 'left': -1}, inplace=True)","eba8e5c7":"player_attr_df.preferred_foot.unique()","e1bd0d22":"player_attr_df.attacking_work_rate.value_counts()","05c196c8":"player_attr_df.defensive_work_rate.value_counts()","8426215d":"team_df.info()","9d273764":"0 in team_df.team_fifa_api_id.unique()","dd9cc94f":"team_df.team_fifa_api_id.fillna(value= 0, inplace=True)","9a5ca2bb":"team_attr_df.info()","cc3c68d0":"team_attr_df.date = pd.to_datetime(team_attr_df.date)","13c366a1":"for c in zip(team_attr_df.columns, team_attr_df.dtypes):\n    if c[1] == 'object':\n        print(team_attr_df[c[0]].unique())","4165fff2":"team_attr_df.buildUpPlayDribbling.isnull().sum()","a0e20bde":"team_attr_df[['buildUpPlayDribbling', 'buildUpPlayDribblingClass']][team_attr_df[['buildUpPlayDribbling', 'buildUpPlayDribblingClass']].buildUpPlayDribbling.isnull()].buildUpPlayDribblingClass.value_counts()","2d9f8c5f":"little_vals = dict(team_attr_df[['buildUpPlayDribbling', 'buildUpPlayDribblingClass']][team_attr_df[['buildUpPlayDribbling', 'buildUpPlayDribblingClass']].buildUpPlayDribblingClass == 'Little'].buildUpPlayDribbling.value_counts())\nprint(little_vals)","a33a354c":"#calculate average for buildUpPlayDribbling values in 'little' buildUpPlayDribblingClass\navg = sum(list(little_vals.keys()))\/len(little_vals)\n\n#calculate weighted average\nsummation = 0\ntotal = 0\nfor k, v in little_vals.items():\n    summation = summation + (k*v)\n    total = total + v\nweighted_avg = summation\/total\n\nprint(f'average= {avg}')\nprint(f'weighted_avg= {weighted_avg}')","a29c0239":"team_attr_df.buildUpPlayDribbling.fillna(value= weighted_avg, inplace=True)\nteam_attr_df.info()","723036a0":"The league table is straitforward, it contains the league name along with its id and the id of the corresponding country. The two ids are identical. so, what I will do is that I will drop the country id column and delete the country dataframe. As the league name is totally indicative of the country name.","20d0cbc8":"The match table has 115 columns. the names are indicative enough tho.\n>country_id can be dropped as it is the same as league_id\n>\n>Match api id can be dropped as it refers to the data source (match_api_id)\n>\n>Columns from 11:54 are related to the players coordinates, I can't find a use for them rightnow, so will be dropped unless needed in future work\n>\n>Columns 85 till the end indicate the bets organization initials and ends with (H,D,A) for (Home wins, Draw, Away wins)","aa922af0":"we can replace (right, left, nan) with (1, -1, 0) as 0 means not available info about this player","b4f2d2aa":"some fifa_api_ids are missing, I will make sure that 0 is not in the column then fill the missing values with it","698ca70e":"Typically, the possession is recorded 4 times during the match (25', 45', 70' and 90') sometimes it varies either in the time of the record or in the number of times","f001ddb9":"we can see that the effect is negligible with difference values of order 10 to the power -15 in the mean and small values in the std","a932c871":">This is a simple table contains the 11 countries of interest along with their ids that link them with other tables, it will be of a great use when we try to focus on a specific league.\n>\n> It has two attributes {id: int64, name: string}\n> no need for wrangling","71de214a":"#### team attributes table","ced04114":"#### match bets table","8c7f5cb4":"#### player table","854b0ff1":"<a id='intro'><\/a>\n## Introduction\n\nEuropean Soccer Database contains data for soccer matches, players, and teams from 2008 to 2016 from the top 11 leagues. The dataset provides rich stats such as:\n<ul>\n    <li>+25,000 matches<\/li>\n    <li>+10,000 players<\/li>\n    <li>11 European Countries with their lead championship<\/li>\n    <li>Seasons 2008 to 2016<\/li>\n    <li>Players and Teams' attributes* sourced from EA Sports' FIFA video game series, including the weekly updates<\/li>\n    <li>Team line up with squad formation (X, Y coordinates)<\/li>\n    <li>Betting odds from up to 10 providers<\/li>\n    <li>Detailed match events (goal types, possession, corner, cross, fouls, cards etc\u2026) for +10,000 matches<\/li>\n    <\/ul>\n\nfor more details or download, you can refer to this [link](https:\/\/www.kaggle.com\/hugomathien\/soccer)","13c6cd33":"multiple conditions were added to the function logic to handle various cases of the goal values such as:\nnot all the attributes exist all the time\nnormally the parser returns a list of ordereddicts of all the goals but if it is one goal it returns an ordereddict not a list of length one","838c124c":"#### player attributes table","cd1447e2":"The bets values represent decimal odds, I would go for converting them to probabilities to be more indicative by taking the reciprocal. <br\/> important thing to nore is that the probabilities don't sum up to 100% but close. This can be due to [Overround](http:\/\/betting.football-data.co.uk\/overround.php) ","eb21d6ec":"#### Country Table","074c9b3e":"now, we can drop the original and possession columns.\n<br\/> additionally, the other stats columns have a great variation in their tags and have multiple empty tags (like <corner \/>) so will be dropped for now unless needed for future analysis","9e370feb":"**inspecting the remaining attributes: (preferred_foot, attacking_work_rate, defensive_work_rate)**","f83f6244":"all the missing values are in the 'little' class","3cfd0414":"#### Match Table","5218fa98":"it seems that there are some ambiguous goal types that are mentioned but they don't count in the score \n<br\/> n -> normal goal that can be a shot or a header, etc (sometimes this type has a subtype)\n<br\/> p -> penality kick\n<br\/> o -> own goal (and it is counted in the list of goals info of the team that received it)\n<br\/> dg, npm -> types of goals that are not counted in the score, maybe canceled by VAR or something","92cd1f59":"I will fill the null values in the numeric columns with the mean values (normally average players in Fifa have average stats)","a44e20e0":"#### match lineup table","d3830e52":"Those two columns are odd! I don't think those values are meaningfull. They can be dropped for now, but for future investigation, their values can be interpolated from other values such as stamina, strength, long_shots, aggression.","990f707f":"we can drop the lineups with more than 20 missing values (out of 22)","f1af56d8":"# Project: European Soccer Database\n\n## Table of Contents\n<ul>\n<li><a href=\"#intro\">Introduction<\/a><\/li>\n<li><a href=\"#wrangling\">Data Wrangling\/Cleaning<\/a><\/li>\n<\/ul>","46bbeaea":"I will focus on fixing the datatypes and parsing the necessary info and will leave handling null values when it comes to proposing questions later to handle each separatly","d18f6e33":"#### League Table","431a12e6":"All cleaned tables are saved for further analysis","7f723bd2":"I can see it more convenient for the analysis to split this table into three tables:\n>One with the match statistics\n>\n>One with the lineup players ids\n>\n>One fot the bets values","f984464b":"<a id='wrangling'><\/a>\n## Data Wrangling\/Cleaning","5c85dda4":"buildUpPlayDribbling is the only column with null values","acda9edf":"I will compare the mean and std of the numerical columns before and after the fill-null-with-mean step to observe the effect","51cbe8aa":"no big difference between the two values, so I will choose the weighted average","fa857697":"#### team table"}}