{"cell_type":{"caf3af96":"code","2a71eab1":"code","8a0c41ea":"code","95b0cf3c":"code","d3beba20":"code","b9ec7921":"code","97724d01":"code","a59394bc":"code","57906564":"code","0b2abce8":"code","2e6b42ba":"code","7a84ae70":"code","6e89cac1":"code","a7b6e3ba":"code","05760ce1":"code","d05ed8f3":"code","c1e3a514":"code","80fbb927":"code","0bb80502":"code","f9de2ee9":"code","26c38e00":"code","e8b99488":"code","775d8813":"code","c858b462":"code","444876b2":"code","2d111ae0":"code","92995691":"code","74dd8dc2":"code","2c1f16ed":"code","399b03b0":"code","aa04a60c":"code","a4eefd32":"code","c587b52b":"markdown","9844f2bb":"markdown","eab38209":"markdown","456fbfa7":"markdown","6ed914a9":"markdown","76bf737b":"markdown","cfe1153b":"markdown","7e313b28":"markdown"},"source":{"caf3af96":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.\nfrom sklearn.model_selection import train_test_split\n\nfrom xgboost import XGBRegressor\nfrom sklearn.multioutput import MultiOutputRegressor\nfrom sklearn.impute import SimpleImputer\n\nfrom shapely.geometry import Point,Polygon\nimport requests ","2a71eab1":"train_data = pd.read_csv('\/kaggle\/input\/covid19-global-forecasting-week-4\/train.csv')\ntest_data = pd.read_csv('\/kaggle\/input\/covid19-global-forecasting-week-4\/test.csv')\nsubmission_csv = pd.read_csv('\/kaggle\/input\/covid19-global-forecasting-week-4\/submission.csv')","8a0c41ea":"convert_dict = {'Province_State': str,'Country_Region':str,'ConfirmedCases':int,'Fatalities':int}\nconvert_dict_test = {'Province_State': str,'Country_Region':str}\ntrain_data = train_data.astype(convert_dict)\ntest_data = test_data.astype(convert_dict_test)","95b0cf3c":"train_data['Date'] = pd.to_datetime(train_data['Date'], infer_datetime_format=True)\ntest_data['Date'] = pd.to_datetime(test_data['Date'], infer_datetime_format=True)","d3beba20":"train_data.loc[:, 'Date'] = train_data.Date.dt.strftime('%m%d')\ntrain_data.loc[:, 'Date'] = train_data['Date'].astype(int)\n\ntest_data.loc[:, 'Date'] = test_data.Date.dt.strftime('%m%d')\ntest_data.loc[:, 'Date'] = test_data['Date'].astype(int)","b9ec7921":"train_data['Country_Region'] = np.where(train_data['Province_State'] == 'nan',train_data['Country_Region'],train_data['Province_State']+' '+train_data['Country_Region'])\ntest_data['Country_Region'] = np.where(test_data['Province_State'] == 'nan',test_data['Country_Region'],test_data['Province_State']+' '+test_data['Country_Region'])\n\n#train_data['Province_State'] = np.where(train_data['Province_State'] == 'nan',train_data['Country_Region'],train_data['Province_State']+train_data['Country_Region'])\n#test_data['Province_State'] = np.where(test_data['Province_State'] == 'nan',test_data['Country_Region'],test_data['Province_State']+test_data['Country_Region'])\n\n\n","97724d01":"train_data = train_data.drop(columns=['Province_State'])\ntest_data = test_data.drop(columns=['Province_State'])","a59394bc":"test_data.head(2)","57906564":"#get list of categorical variables\ns = (train_data.dtypes == 'object')\nobject_cols = list(s[s].index)","0b2abce8":"from sklearn.preprocessing import LabelEncoder","2e6b42ba":"label_encoder1 = LabelEncoder()\nlabel_encoder2 = LabelEncoder()\n\n#train_data['Province_State'] = label_encoder1.fit_transform(train_data['Province_State'])\n#test_data['Province_State'] = label_encoder1.transform(test_data['Province_State'])\n\ntrain_data['Country_Region'] = label_encoder2.fit_transform(train_data['Country_Region'])\ntest_data['Country_Region'] = label_encoder2.transform(test_data['Country_Region'])\n\n    ","7a84ae70":"train_data.head(2)","6e89cac1":"test_data.head(2)","a7b6e3ba":"Test_id = test_data.ForecastId","05760ce1":"train_data.drop(['Id'], axis=1, inplace=True)\ntest_data.drop('ForecastId', axis=1, inplace=True)","d05ed8f3":"missing_val_count_by_column = (train_data.isnull().sum())\nprint(missing_val_count_by_column[missing_val_count_by_column>0])","c1e3a514":"from xgboost import XGBRegressor","80fbb927":"train_data.head(1)","0bb80502":"X_train = train_data[['Country_Region','Date']]\ny_train = train_data[['ConfirmedCases', 'Fatalities']]","f9de2ee9":"x_train = X_train.iloc[:,:].values\nx_test = test_data.iloc[:,:].values","26c38e00":"#from sklearn.metrics import mean_squared_error","e8b99488":"#X_train,X_test,Y_train,Y_test = train_test_split(X_train, y_train, test_size=0.2, random_state=42, shuffle=True)","775d8813":"error_list = []\ndef return_error(estimator, x_train,x_test,y_train):\n    model = MultiOutputRegressor(XGBRegressor(n_estimators=estimator, random_state=0, max_depth=20))\n    model.fit(x_train, y_train)\n\n    predict = MultiOutputRegressor(model.predict(x_test))\n    \n    #error = mean_squared_error( y_test.values, predict.estimator)\n    #error_list.append(error)\n    \n    return predict","c858b462":"#from sklearn.model_selection import RandomizedSearchCV, GridSearchCV","444876b2":"#num_estimators = [1000,1100,1200,1250,1300]\n#learn_rates = [0.02,0.05,0.06,0.07]\n\n#param_grid = {'n_estimators':num_estimators,\n #             'learning_rate':learn_rates\n#            }","2d111ae0":"#random_search = GridSearchCV(XGBRegressor(loss='huber'), param_grid,cv=3,return_train_score=True, n_jobs=1)","92995691":"#random_search.fit(x_train, y_train.Fatalities)","74dd8dc2":"#random_search.best_params_","2c1f16ed":"#estimator_list = [1200,1250,1300,1350]\n#for value in estimator_list:\n#    error_ = return_error(value, X_train,X_test,Y_train,Y_test)","399b03b0":"predict = return_error(1500,x_train,x_test,y_train)","aa04a60c":"df_sub = pd.DataFrame()\ndf_sub['ForecastId'] = Test_id\ndf_sub['ConfirmedCases'] = (predict.estimator[:,0]).astype(int)\ndf_sub['Fatalities'] = (predict.estimator[:,1]).astype(int)\n\ndf_sub.to_csv('submission.csv', index=False)","a4eefd32":"df_sub","c587b52b":"**Try using Label Encoder**","9844f2bb":"**Loading Training and Testing Data**","eab38209":"**Splitting data train\/test**","456fbfa7":"**Make model XGBRegressor**","6ed914a9":"**Check missing value**","76bf737b":"**Convert String Datetime to python datetime**","cfe1153b":"**Label Encoding Country**","7e313b28":"**Submission**"}}