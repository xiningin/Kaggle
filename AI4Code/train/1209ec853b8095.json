{"cell_type":{"9f5dc43d":"code","9a20bae9":"code","640aff9b":"code","41f67689":"code","00401330":"code","a3283c96":"code","990284f7":"code","3bfa10da":"code","c4344986":"code","6d0f6e67":"code","5aee70ae":"code","711f1acc":"code","ff8e3fa0":"code","1d9c7031":"code","4d4f9951":"code","11f9c132":"code","07aaba80":"code","c5bfad02":"code","b831d50f":"code","93ae2f63":"code","89527174":"code","4ad38545":"code","c39a5912":"code","a7a79d4f":"code","5fb26158":"code","f20d71c7":"code","8a62ba77":"code","ca944c71":"code","d29bc840":"code","e8e5d540":"code","5e1e8e88":"code","f1063304":"code","25e7b172":"code","c51dfd37":"code","81afc0d7":"code","5e45b624":"code","d840ac92":"code","71ce9cec":"code","cb029e2e":"code","6c7cbe9a":"code","5eb5e1c2":"code","2ed576ff":"code","b48b7f87":"code","6b9eab3a":"code","591efd7c":"markdown","97536fe8":"markdown","1bf38024":"markdown","6e048a08":"markdown","91d7c053":"markdown","0a115cb7":"markdown","321a0fda":"markdown","7edb453d":"markdown","feda602a":"markdown"},"source":{"9f5dc43d":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt","9a20bae9":"!wget -O loan_train.csv https:\/\/cf-courses-data.s3.us.cloud-object-storage.appdomain.cloud\/IBMDeveloperSkillsNetwork-ML0101EN-SkillsNetwork\/labs\/FinalModule_Coursera\/data\/loan_train.csv","640aff9b":"loan_df = pd.read_csv(\"loan_train.csv\")\nloan_df","41f67689":"loan_df.shape","00401330":"loan_df.dtypes\n# as datatype of date are Objects we need to change it to datetime format","a3283c96":"loan_df[\"effective_date\"] = pd.to_datetime(loan_df[\"effective_date\"])\nloan_df[\"due_date\"] = pd.to_datetime(loan_df[\"due_date\"])","990284f7":"loan_df.education.value_counts()","3bfa10da":"loan_df.Gender.value_counts()","c4344986":"loan_df.loan_status.value_counts()","6d0f6e67":"#replacing object datatype to corresponding dummy numeric variable for ease of calculation\nloan_df.replace(['PAIDOFF','male','High School or Below'],0,inplace=True)\nloan_df.replace(['COLLECTION','female','college'],1,inplace=True)\nloan_df.replace(['Bechalor'],2,inplace=True)\nloan_df.replace(['Master or Above'],3,inplace=True)","5aee70ae":"loan_df.head()","711f1acc":"loan_df.dtypes","ff8e3fa0":"#converting dates to corresponding days\nloan_df['due_week_day'] = loan_df['due_date'].dt.dayofweek\nloan_df['eff_week_day'] = loan_df['effective_date'].dt.dayofweek\nloan_df.head()","1d9c7031":"#here we try make a DataFrame\n#representing people paid loans on due date \n#Group by days\npaid_df = pd.DataFrame(loan_df[loan_df['loan_status']==0]['due_week_day'])\nk = paid_df['due_week_day'].value_counts()\nt = list(zip(k.index,k.values))\nt_df = pd.DataFrame(t,index=k.index,columns=['day','No_of_day'])\nt_df = t_df.sort_values(by=['day'])\nt_df","4d4f9951":"#here we try make a DataFrame\n#representing effective date of loan who paid loan\n#Group by days\neff_paid_df = pd.DataFrame(loan_df[loan_df['loan_status']==0]['eff_week_day'])\na = eff_paid_df['eff_week_day'].value_counts()\nb = list(zip(a.index,a.values))\nb_df = pd.DataFrame(b,index=a.index,columns=['day','No_of_day'])\nb_df = b_df.sort_values(by=['day'])\nb_df","11f9c132":"#here we try make a DataFrame\n#representing people who not paid loans on due date \n#Group by days\ncol_df = pd.DataFrame(loan_df[loan_df['loan_status']==1]['due_week_day'])\nk_1 = col_df['due_week_day'].value_counts()\nt_1 = list(zip(k_1.index,k_1.values))\nt_1_df = pd.DataFrame(t_1,index=k_1.index,columns=['day','No_of_day'])\nt_1_df = t_1_df.sort_values(by=['day'])\nt_1_df","07aaba80":"#here we try make a DataFrame\n#representing date of effective loan who didn't paid the loan on due date \n#Group by days\neff_col_df = pd.DataFrame(loan_df[loan_df['loan_status']==1]['eff_week_day'])\na_1 = eff_col_df['eff_week_day'].value_counts()\nb_1 = list(zip(a_1.index,a_1.values))\nb_1_df = pd.DataFrame(b_1,index=a_1.index,columns=['day','No_of_day'])\nb_1_df = b_1_df.sort_values(by=['day'])\nb_1_df","c5bfad02":"plt.bar(t_df['day'],t_df['No_of_day'],color='r')\nplt.bar(t_1_df['day'],t_1_df['No_of_day'],color='b')\nplt.show()","b831d50f":"plt.bar(b_df['day'],b_df['No_of_day'],color='r')\nplt.bar(b_1_df['day'],b_1_df['No_of_day'],color='b')\nplt.show()","93ae2f63":"t_df['per'] = (t_df['No_of_day']\/(t_df['No_of_day']+t_1_df['No_of_day']))*100\nt_df","89527174":"plt.bar(t_df['day'],t_df['per'])\nplt.plot(t_df['day'],t_df['per'],color='r')\nplt.show()","4ad38545":"loan_df['due_days'] = loan_df['due_week_day'].apply(lambda x: 1 if (x>3 or x==0)  else 0)\nloan_df['eff_days'] = loan_df['eff_week_day'].apply(lambda x: 1 if (x>3)  else 0)\nloan_df.head()","c39a5912":"X = loan_df[['Principal','age','education','Gender','terms','due_days','eff_days']].values\nX[0:5]","a7a79d4f":"from sklearn import preprocessing\nX = preprocessing.StandardScaler().fit(X).transform(X.astype(float))\nX[0:5]","5fb26158":"y = loan_df['loan_status'].values\ny[0:5]\n","f20d71c7":"from sklearn.model_selection import train_test_split\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=4)\nprint('X_train: {}\\n\\n y_train: {}\\n'.format(X_train[0:5],y_train[0:5]))\nprint('X_test: {}\\n\\n y_test: {}\\n'.format(X_test[0:5],y_test[0:5]))","8a62ba77":"from sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.metrics import jaccard_score,f1_score,log_loss\nfrom sklearn.metrics import log_loss\nK = 10\nmean_acc_jaccard = np.zeros((K-1))\nmean_acc_f1 = np.zeros((K-1))\n\nfor n in range(1,K): \n    neigh = KNeighborsClassifier(n_neighbors = n).fit(X_train,y_train)\n    yhat=neigh.predict(X_test)\n    mean_acc_jaccard[n-1] = jaccard_score(y_test, yhat,pos_label=0)\n    mean_acc_f1[n-1] = f1_score(y_test,yhat,pos_label=0)\n    \nprint(mean_acc_jaccard)\nprint(mean_acc_f1)    ","ca944c71":"plt.plot(range(1,K),mean_acc_jaccard,'r')\nplt.plot(range(1,K),mean_acc_f1,'b')\nplt.legend(('Jaccard','f1_score'))\nplt.ylabel('Accuracy')\nplt.xlabel('Number of Neighbors (K)')\nplt.tight_layout()\nplt.show()\n","d29bc840":"print(\"The best accuracy is (f1_score): \",mean_acc_f1.max(),\" with k = \",mean_acc_f1.argmax()+1)\nprint(\"The best accuracy is (jaccard_score): \",mean_acc_jaccard.max(),\" with k = \",mean_acc_jaccard.argmax()+1)","e8e5d540":"from sklearn.tree import DecisionTreeClassifier\nloan_tree = DecisionTreeClassifier()\nloan_tree.fit(X_train,y_train)\nyhat_tree = loan_tree.predict(X_test)\njs_tree = jaccard_score(y_test, yhat_tree,pos_label=0)\nf1s_tree = f1_score(y_test,yhat_tree,pos_label=0)","5e1e8e88":"print(\"The accuracy is (f1_score): \",f1s_tree)\nprint(\"The accuracy is (jaccard_score): \",js_tree)","f1063304":"from sklearn import svm\nfrom sklearn.pipeline import make_pipeline\nfrom sklearn.preprocessing import StandardScaler\nloan_svm = make_pipeline(StandardScaler(), svm.SVC(gamma='auto',probability=True)).fit(X_train, y_train)\nyhat_svm = loan_svm.predict(X_test)\nyhat_prob_svm = loan_svm.predict_proba(X_test)\nll_svm = log_loss(y_test,yhat_prob_svm)\njs_svm = jaccard_score(y_test,yhat_svm,pos_label=0)\nf1s_svm = f1_score(y_test,yhat_svm,pos_label=0)","25e7b172":"print(\"The accuracy is (f1_score): \",f1s_svm)\nprint(\"The accuracy is (jaccard_score): \",js_svm)\nprint(\"The accuracy is (log_loss): \",ll_svm)","c51dfd37":"from sklearn.linear_model import LogisticRegression\nloan_LR = LogisticRegression(C=0.01, solver='liblinear').fit(X_train,y_train)\nyhat_LR = loan_LR.predict(X_test)\nyhat_prob_LR = loan_LR.predict_proba(X_test)\njs_LR = jaccard_score(y_test,yhat_LR,pos_label=0)\nf1s_LR = f1_score(y_test,yhat_LR,pos_label=0)\nll_LR = log_loss(y_test,yhat_prob_LR)","81afc0d7":"print(\"The accuracy is (f1_score): \",f1s_LR)\nprint(\"The accuracy is (jaccard_score): \",js_LR)\nprint(\"The accuracy is (Log_loss): \",ll_LR)","5e45b624":"!wget -O loan_test.csv https:\/\/s3-api.us-geo.objectstorage.softlayer.net\/cf-courses-data\/CognitiveClass\/ML0101ENv3\/labs\/loan_test.csv","d840ac92":"test_df = pd.read_csv(\"loan_test.csv\")\ntest_df.head()","71ce9cec":"test_df[\"effective_date\"] = pd.to_datetime(test_df[\"effective_date\"])\ntest_df[\"due_date\"] = pd.to_datetime(test_df[\"due_date\"])\ntest_df.replace(['PAIDOFF','male','High School or Below'],0,inplace=True)\ntest_df.replace(['COLLECTION','female','college'],1,inplace=True)\ntest_df.replace(['Bechalor'],2,inplace=True)\ntest_df.replace(['Master or Above'],3,inplace=True)\ntest_df['due_week_day'] = test_df['due_date'].dt.dayofweek\ntest_df['eff_week_day'] = test_df['effective_date'].dt.dayofweek\ntest_df['due_days'] = test_df['due_week_day'].apply(lambda x: 1 if (x>3 or x==0)  else 0)\ntest_df['eff_days'] = test_df['eff_week_day'].apply(lambda x: 1 if (x>3)  else 0)\ntest_df.head()","cb029e2e":"test_X = loan_df[['Principal','age','education','Gender','terms','due_days','eff_days']].values\ntest_X = preprocessing.StandardScaler().fit(X).transform(X.astype(float))\ntest_X[0:5]","6c7cbe9a":"test_y = loan_df['loan_status'].values\ntest_y[0:5]","5eb5e1c2":"Ks = 10\ntmean_acc_jaccard = np.zeros((Ks-1))\ntmean_acc_f1 = np.zeros((Ks-1))\n\nfor n in range(1,Ks): \n    neigh = KNeighborsClassifier(n_neighbors = n).fit(X_train,y_train)\n    test_yhat=neigh.predict(test_X)\n    tmean_acc_jaccard[n-1] = jaccard_score(test_y, test_yhat,pos_label=0)\n    tmean_acc_f1[n-1] = f1_score(test_y,test_yhat,pos_label=0)\nplt.plot(range(1,Ks),tmean_acc_jaccard,'r')\nplt.plot(range(1,Ks),tmean_acc_f1,'b')\nplt.legend(('Jaccard','f1_score'))\nplt.ylabel('Accuracy')\nplt.xlabel('Number of Neighbors (K)')\nplt.tight_layout()\nplt.show()\nprint(\"KNN best accuracy is (f1_score): \",tmean_acc_f1.max(),\" with k = \",tmean_acc_f1.argmax()+1)\nprint(\"KNN best accuracy is (jaccard_score): \",tmean_acc_jaccard.max(),\" with k = \",tmean_acc_jaccard.argmax()+1)","2ed576ff":"loan_tree = DecisionTreeClassifier()\nloan_tree.fit(X_train,y_train)\ntest_yhat_tree = loan_tree.predict(test_X)\njs_tree = jaccard_score(test_y, test_yhat_tree,pos_label=0)\nf1s_tree = f1_score(test_y,test_yhat_tree,pos_label=0)\nprint(\"Decision Tree accuracy is (f1_score): \",f1s_tree)\nprint(\"Decision Tree accuracy is (jaccard_score): \",js_tree)","b48b7f87":"loan_svm = make_pipeline(StandardScaler(), svm.SVC(gamma='auto',probability=True)).fit(X_train, y_train)\nt_yhat_svm = loan_svm.predict(test_X)\nt_yhat_prob_svm = loan_svm.predict_proba(test_X)\nll_svm = log_loss(test_y,t_yhat_prob_svm)\njs_svm = jaccard_score(test_y,t_yhat_svm,pos_label=0)\nf1s_svm = f1_score(test_y,t_yhat_svm,pos_label=0)\nprint(\"SVM accuracy is (f1_score): \",f1s_svm)\nprint(\"SVM accuracy is (jaccard_score): \",js_svm)\nprint(\"SVM accuracy is (log_loss): \",ll_svm)","6b9eab3a":"loan_LR = LogisticRegression(C=0.01, solver='liblinear').fit(X_train,y_train)\nt_yhat_LR = loan_LR.predict(test_X)\nt_yhat_prob_LR = loan_LR.predict_proba(test_X)\njs_LR = jaccard_score(test_y,t_yhat_LR,pos_label=0)\nf1s_LR = f1_score(test_y,t_yhat_LR,pos_label=0)\nll_LR = log_loss(test_y,t_yhat_prob_LR)\nprint(\"LR accuracy is (f1_score): \",f1s_LR)\nprint(\"LR accuracy is (jaccard_score): \",js_LR)\nprint(\"LR accuracy is (log_loss): \",ll_LR)","591efd7c":"From above graph it observed that max people paid the loan from monday to thursday","97536fe8":"In the notebook we load the `loan_train.csv` and `loan_test.csv`, then we cleaned, transformed and analyzed the `loan_train.csv` data using python libraries.\nWe created the Machine Learning models like `KNeighborClassifier`,`DecisionTreeClassifier`,`svm`,`LgisticRegression` and created Model evaluation metrics using `jaccard_score`,`f1-score` and `log_loss` to calculate the accuracy","1bf38024":"##  Model evaluation using Test case","6e048a08":"## Capstone Project\n### Final capstone project of Coursera IBM Machine Learning with Python course\n### Data Collected is from IBM source provided to complete the project\n","91d7c053":"Decision Tree","0a115cb7":"from above grah we conclude that people paid off loan less on maonday,friday,saturday and sunday","321a0fda":"From above graph it is observed that people who took loan on last three days of week did'nt paid loan","7edb453d":"Support Vector Machine (SVM)","feda602a":"Logistic Regression"}}