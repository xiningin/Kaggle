{"cell_type":{"1e082f96":"code","b31cc516":"code","2f7e2b14":"code","4e5e40e6":"code","07c6f579":"code","a8c75622":"code","daa043de":"code","635077ca":"code","e3fb0f42":"code","337e1213":"code","4e1c3d8d":"code","0f1ca32f":"code","b725421a":"code","eb81da20":"code","b6dfd95c":"code","610eb43f":"code","71cf943d":"markdown","3ba1781d":"markdown","e9e30cad":"markdown","ee52befa":"markdown","f82c2b73":"markdown","7f8cd492":"markdown","612c29c3":"markdown","1369ad3d":"markdown","49a9db35":"markdown","5f117a77":"markdown","80bf5482":"markdown","9ef666ad":"markdown","f365c029":"markdown"},"source":{"1e082f96":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom sklearn.model_selection import train_test_split\n\nfrom sklearn.preprocessing import LabelEncoder, OneHotEncoder\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.svm import SVC\nfrom xgboost import XGBClassifier\nfrom sklearn.ensemble import GradientBoostingClassifier\nfrom sklearn.ensemble import ExtraTreesClassifier\nfrom sklearn.ensemble import AdaBoostClassifier\nfrom sklearn.gaussian_process import GaussianProcessClassifier\nfrom sklearn.naive_bayes import GaussianNB\nfrom sklearn.ensemble import BaggingClassifier\nfrom sklearn.ensemble import VotingClassifier\nfrom sklearn.model_selection import cross_val_score\nfrom sklearn.model_selection import GridSearchCV\nfrom sklearn.model_selection import cross_val_predict\nfrom sklearn import model_selection\nplt.style.use('seaborn')\nsns.set(font_scale=2.5) \nimport missingno as msno\n\n#ignore warnings\nimport warnings\nwarnings.filterwarnings('ignore')\n\n%matplotlib inline","b31cc516":"data = pd.read_csv(\"\/kaggle\/input\/red-wine-quality-cortez-et-al-2009\/winequality-red.csv\")","2f7e2b14":"data.head()","4e5e40e6":"data.shape","07c6f579":"for col in data.columns:\n    print(\"column: {:>30}\\tPercent of NaN value:{:.2f}%\".format(col,100*(data[col].isnull().sum()\/ data[col].shape[0])) )","a8c75622":"f, ax = plt.subplots(1,2, figsize = (18,8))\ndata[\"quality\"].value_counts().plot.pie(autopct = \"%1.1f%%\",ax = ax[0], shadow=True)\nax[0].set_title(\"Pie plot - quality\")\nax[1].set_title(\"Count plot - quality\")\n\nsns.countplot(\"quality\",data = data, ax = ax[1],order = data['quality'].value_counts().index)\n\nplt.show()","daa043de":"heatmap_data = data\ncolormap = plt.cm.RdBu\nplt.figure(figsize=(14, 12))\nplt.title('Pearson Correlation of Features', y=1.05, size=15)\nsns.heatmap(heatmap_data.astype(float).corr(), linewidths=0.1, vmax=1.0,\n           square=True, cmap=colormap, linecolor='white', annot=True, annot_kws={\"size\": 16})\n\ndel heatmap_data","635077ca":"plt.figure(figsize = (20,60))\nfor ind,col in enumerate(data.columns[:-1]):\n    \n    plt.subplot(6,2,ind+1)\n    plt.title(col, color = \"black\", fontweight='bold', fontsize = 20)\n    sns.boxplot('quality', col, data = data)\n    plt.xlabel(\"\")","e3fb0f42":"temp = data.copy()\nfor col in data.columns[:-1]:\n    \n    temp[col+\"_group\"] = 0\n    temp[col+\"_group\"] = pd.qcut(data[col], 10, labels=np.arange(0, 10))\n    temp.drop([col],axis=1,inplace = True )\ntemp.head()","337e1213":"temp = data.copy()\ntemp[\"test\"] = 0\n\nbins = (2, 6.5, 8)\ngroup_names = ['bad', 'good']\ntemp['quality'] = pd.cut(temp['quality'], bins = bins, labels = group_names)","4e1c3d8d":"\n\ny = temp.quality\nx = temp.drop([\"quality\"], axis = 1)\n\n\n\ntest_size = 0.20\nX_train, X_test, Y_train, Y_test = train_test_split(x, y, test_size = test_size, random_state = 206)\n\n","0f1ca32f":"temp.head(5)","b725421a":"ran = RandomForestClassifier(random_state=1)\nknn = KNeighborsClassifier()\nlog = LogisticRegression()\nxgb = XGBClassifier()\ngbc = GradientBoostingClassifier()\nsvc = SVC(probability=True)\next = ExtraTreesClassifier()\nada = AdaBoostClassifier()\ngnb = GaussianNB()\ngpc = GaussianProcessClassifier()\nbag = BaggingClassifier()\n# \ub9ac\uc2a4\ud2b8 \uc900\ube44\nmodels = [ran, knn, log, xgb, gbc, svc, ext, ada, gnb, gpc, bag]         \nmodel_names = ['Random Forest', 'K Nearest Neighbour', 'Logistic Regression', 'XGBoost', 'Gradient Boosting', 'SVC', 'Extra Trees', 'AdaBoost', 'Gaussian Naive Bayes', 'Gaussian Process', 'Bagging Classifier']\nscores = {}\n\n# \ud559\uc2b5 \ubc0f \uad50\ucc28 \uac80\uc99d\nfor ind, mod in enumerate(models):\n    mod.fit(X_train, Y_train)\n    acc = cross_val_score(mod, X_train, Y_train, scoring = \"accuracy\", cv = 10)\n    scores[model_names[ind]] = acc","eb81da20":"results = pd.DataFrame(scores).T\nresults['mean'] = results.mean(1)\nresult_df = results.sort_values(by='mean', ascending=False)\nresult_df.head(11)\n\n\nresult_df = result_df.drop(['mean'], axis=1)\nsns.boxplot(data=result_df.T, orient='h')\nplt.title('Machine Learning Algorithm Accuracy Score \\n')\nplt.xlabel('Accuracy Score (%)');","b6dfd95c":"\n\nresult_df.style.background_gradient(\"Blues_r\")\n\n","610eb43f":"result_df.max().max()","71cf943d":"## \ub370\uc774\ud130 \uc14b \ud655\uc778\n* \ub370\uc774\ud130 \uc900\ube44 \ubc0f \ubaa8\ub4c8 import ","3ba1781d":"## Exploratory data analysis(\ub370\uc774\ud130 \ubd84\uc11d \ud0d0\uad6c)\n* \ud2b9\uc131 \ubcc4 \uc0c1\uad00\uad00\uacc4 \ubd84\uc11d","e9e30cad":"# \ubaa9\ucc28\n1. \ub370\uc774\ud130 \uc14b \ud655\uc778\n* \ub370\uc774\ud130 \uc900\ube44 \ubc0f \ubaa8\ub4c8 import \n* null check \n* Target label \ud655\uc778","ee52befa":"\ub370\uc774\ud130\uac00 \ube44\uad50\uc801 \uace0\ub974\uac8c \ubd84\ud3ec\ub418\uc5b4 \uc788\uc2b5\ub2c8\ub2e4.","f82c2b73":"\uc804\uccb4 1599\uac1c\uc758 \ub370\uc774\ud130\uc640 12\uac1c\uc758 feature(\ud2b9\uc131)\ub85c \uc774\ub8e8\uc5b4\uc838 \uc788\uc2b5\ub2c8\ub2e4.","7f8cd492":"* target label \ud655\uc778\n * target data\uac00 \ud55c\ucabd\uc73c\ub85c \uce58\uc6b0\uccd0 \uc788\ub2e4\uba74 \uc815\ud655\ud55c \uc608\uce21\uc744 \ud560 \uc218 \uc5c6\uae30 \ub54c\ubb38\uc5d0 \ud655\uc778\ud558\ub3c4\ub85d \ud558\uaca0\uc2b5\ub2c8\ub2e4.","612c29c3":"\ub370\uc774\ud130\uc5d0\ub294 null\uac12\uc740 \uc5c6\uc2b5\ub2c8\ub2e4.","1369ad3d":"\uc11c\ub85c \uac15\ud55c \uc0c1\uad00\uad00\uacc4\ub97c \uac00\uc9c0\ub294 feature\ub4e4\uc774 \uc5c6\ub2e4\ub294 \uac83\uc744 \uc54c \uc218 \uc788\uc2b5\ub2c8\ub2e4. \uc774\ub7ec\ud55c \uac83\uc740 \uc6b0\ub9ac\uac00 \ubaa8\ub378\uc744 \ud559\uc2b5 \uc2dc\ud0ac \ub54c \ubd88\ud544\uc694\ud55c feature \uac00 \uc5c6\ub2e4\ub294 \uac83\uc744 \uc758\ubbf8 \ud569\ub2c8\ub2e4.","49a9db35":"* \ud2b9\uc131 \ubcc4 box plot ","5f117a77":"| \ubcc0\uc218 | \uc124\uba85 | \ud0c0\uc785 |\n|--------|:--------:|-------:|\n| quality | \uc640\uc778\uc758 \uc88b\uc740 \uc815\ub3c4(target) | int |\n| fixed acidity  | \uace0\uc815 \uc0b0\ub3c4 | float |\n| volatile acidity | \ud718\ubc1c\uc131 \uc0b0\ub3c4 | float |\n| citric acid | \uad6c\uc5f0\uc0b0 | float |\n| residual sugar | \uc794\ub958 \uc124\ud0d5 | float |\n| chlorides  | \uc5fc\ud654\ubb3c | float |\n| free sulfur dioxide | \uc720\ub9ac \uc774\uc0b0\ud654\ud669 | float |\n|  sulfur  | \ud669 | float |\n| dioxide  | \uc774\uc0b0\ud654\ubb3c | float |\n| density  | \ubc00\ub3c4 | float |\n| pH | ph | float |\n| sulphates | \ud669\uc0b0\uc5fc | float |\n|  alcohol  | \uc54c\ucf54\uc62c | float |","80bf5482":"## Feature engineering\n* \uc2e4\uc218\ud615 \ubcc0\uc218 \uadf8\ub8f9\ud654\n  \ub370\uc774\ud130\ub97c \ud6a8\uacfc\uc801\uc73c\ub85c \ud559\uc2b5\ud558\uae30 \uc704\ud574\uc11c 10\uac1c\uc758 \uadf8\ub8f9\uc73c\ub85c \ub9cc\ub4e4\uaca0\uc2b5\ub2c8\ub2e4.","9ef666ad":"* Null data \uccb4\ud06c","f365c029":"quality\ub97c \uc81c\uc678\ud55c \ubaa8\ub4e0 \ud2b9\uc131 \uac12\uc740 float(\uc2e4\uc218\ud615)\uc785\ub2c8\ub2e4."}}