{"cell_type":{"42478d71":"code","8339382b":"code","ce808809":"code","1d44b2b0":"code","11c13fe4":"code","fc0ae68a":"code","cf40cbee":"code","25e2e66d":"code","989fbf76":"code","7b689ffa":"code","cc82d7e5":"code","b510bc76":"code","92950c7a":"code","384256a0":"code","e052399e":"code","55793a27":"code","26245521":"code","62f95e46":"code","1197be77":"code","8d7ff341":"code","d8ff9979":"code","ae8995fe":"code","c28c8a36":"code","ecf0055e":"code","623500c1":"code","0777118c":"code","11889e3b":"code","c155d750":"code","ae4528dd":"code","de53299b":"code","198e44eb":"code","1e7461db":"code","a7351dda":"code","bc5dae69":"code","851c5243":"code","f66e3958":"code","1d0cc3d7":"code","e3368cf6":"code","f8c5e7fd":"code","036721a0":"code","19f1b6a5":"code","a65acef9":"code","9d8e63fe":"code","21f7f990":"code","331c90ea":"code","f02094a8":"code","68b8f67c":"code","19224b88":"code","9a4ec65d":"code","009216cf":"code","a285a8d4":"code","81f7d9fa":"code","5eb2bb5e":"code","ccf85bb6":"code","5370c32b":"code","b0920e0c":"code","08e40044":"code","120fdfe2":"code","77e138b3":"code","cf069e4b":"code","f991454b":"code","d65c8580":"code","7a6f527b":"code","23609724":"code","325ac562":"code","ea63e314":"code","df26306a":"code","f22c602d":"code","f9037b97":"code","15f383b7":"code","a861ad80":"code","2addbb8d":"code","30de0b49":"code","4e23bbf1":"code","d89314e7":"code","dd14c3dc":"code","640e7fc8":"code","61c3c166":"code","194c407f":"code","73832049":"code","250f8577":"code","38ed76b6":"code","ad543b48":"code","331caeb0":"code","df3022b3":"code","91701793":"code","1fa3c597":"code","dfdea600":"code","27fb5692":"markdown","8e447290":"markdown","80792c0b":"markdown","5359bb68":"markdown","d465665e":"markdown","b901b828":"markdown","5e38d0f5":"markdown","2f209fc9":"markdown","d0db08c7":"markdown","cf08cb5c":"markdown","2ff487c6":"markdown","6114f9e2":"markdown","e7a0ce46":"markdown","7d2eaecd":"markdown","4593358b":"markdown","4a2940e3":"markdown","af365c34":"markdown","3bd69e51":"markdown","2a47c8ad":"markdown"},"source":{"42478d71":"#import needed libraries\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport numpy as np","8339382b":"from sklearn.preprocessing import StandardScaler\nfrom sklearn.feature_selection import SelectKBest\nfrom sklearn.feature_selection import chi2\nfrom sklearn.feature_selection import f_regression\nfrom sklearn.feature_selection import SelectKBest\nfrom sklearn.model_selection import GridSearchCV\nfrom sklearn.metrics import confusion_matrix, classification_report, accuracy_score","ce808809":"from sklearn.metrics import accuracy_score\nfrom sklearn.metrics import precision_score\nfrom sklearn.metrics import recall_score\nfrom sklearn.metrics import f1_score\nfrom sklearn.metrics import balanced_accuracy_score","1d44b2b0":"#read and load data csv files\ndata = pd.read_csv('..\/input\/ckdisease\/kidney_disease.csv')\n","11c13fe4":"#Check the 10 samples of train data\ndata.head(10)","fc0ae68a":"#Check the last 5 samples of train data\ndata.tail(5)","cf40cbee":"#check simple information like  columns names ,  columns datatypes and null values\ndata.info()","25e2e66d":"NewCols={\"bp\":\"blood_pressure\",\"sg\":\"specific_gravity\", \"al\":\"albumin\",\"su\":\"sugar\",\"rbc\":\"red_blood_cells\",\"pc\":\"pus_cell\",\n         \"pcc\":\"pus_cell_clumps\",\"ba\":\"bacteria\",\"bgr\":\"blood_glucose_random\",\"bu\":\"blood_urea\",\"sc\":\"serum_creatinine\",\n         \"sod\":\"sodium\",\"pot\":\"potassium\",\"hemo\":\"haemoglobin\",\"pcv\":\"packed_cell_volume\",\"wc\":\"white_blood_cell_count\",\n          \"rc\":\"red_blood_cell_count\",\"htn\":\"hypertension\",\"dm\":\"diabetes_mellitus\",\"cad\":\"coronary_artery_disease\",\n          \"appet\":\"appetite\",\"pe\":\"pedal_edema\",\"ane\":\"anemia\"}","989fbf76":"# Change columns of CKD data to new columns\ndata.rename(columns=NewCols, inplace=True)","7b689ffa":"#check summary of numerical data  such as count , mean , max , min  and standard deviation.\ndata.describe()","cc82d7e5":"#check numbers of rows(samples) and columns(features)\ndata.shape","b510bc76":"#check count of values for each features\ndata.count()","92950c7a":"#Check total missing values in each feature\ndata.isnull().sum()","384256a0":"#visualization of null values in features\nplt.subplots(figsize=(10, 7))\n((data.isnull().sum())).sort_values(ascending=False).plot(kind='bar')","e052399e":"# Drop id column \ndata.drop([\"id\"],axis=1,inplace=True) ","55793a27":"data[['red_blood_cells','pus_cell']] = data[['red_blood_cells','pus_cell']].replace(to_replace={'abnormal':1,'normal':0})\ndata[['pus_cell_clumps','bacteria']] = data[['pus_cell_clumps','bacteria']].replace(to_replace={'present':1,'notpresent':0})\ndata[['hypertension','diabetes_mellitus','coronary_artery_disease','pedal_edema','anemia']] = data[['hypertension','diabetes_mellitus','coronary_artery_disease','pedal_edema','anemia']].replace(to_replace={'yes':1,'no':0})\ndata[['appetite']] = data[['appetite']].replace(to_replace={'good':1,'poor':0,'no':np.nan})\ndata['coronary_artery_disease'] = data['coronary_artery_disease'].replace(to_replace='\\tno',value=0)\ndata['diabetes_mellitus'] = data['diabetes_mellitus'].replace(to_replace={'\\tno':0,'\\tyes':1,' yes':1, '':np.nan})\ndata['classification'] = data['classification'].replace(to_replace={'ckd':1.0,'ckd\\t':1.0,'notckd':0.0,'no':0.0})","26245521":"data['pedal_edema'] = data['pedal_edema'].replace(to_replace='good',value=0) \ndata['appetite'] = data['appetite'].replace(to_replace='no',value=0)\ndata['coronary_artery_disease']=data['coronary_artery_disease'].replace('yes',1)","62f95e46":"##data=data.fillna(0)","1197be77":"data['age']=data['age'].fillna(np.mean(data['age']))\ndata['blood_pressure']=data['blood_pressure'].fillna(np.mean(data['blood_pressure']))\ndata['albumin']=data['albumin'].fillna(np.mean(data['albumin']))\n","8d7ff341":"data['specific_gravity']=data['specific_gravity'].fillna(np.mean(data['specific_gravity']))\ndata['sugar']=data['sugar'].fillna(np.mean(data['sugar']))\ndata['blood_glucose_random']=data['blood_glucose_random'].fillna(np.mean(data['blood_glucose_random']))\ndata['blood_urea']=data['blood_urea'].fillna(np.mean(data['blood_urea']))\ndata['serum_creatinine']=data['serum_creatinine'].fillna(np.mean(data['serum_creatinine']))\ndata['haemoglobinhaemoglobin']=data['haemoglobin'].fillna(np.mean(data['haemoglobin']))\ndata['potassium']=data['potassium'].fillna(np.mean(data['potassium']))\ndata['sodium']=data['sodium'].fillna(np.mean(data['sodium']))\n","d8ff9979":"data = data.replace(\"\\t?\", np.nan)\ndata = data.replace(\" ?\", np.nan)\ndata = data.fillna(method='ffill')\ndata = data.fillna(method='backfill')","ae8995fe":"# Again ,Check missing values\ndata.isnull().sum()","c28c8a36":"#check outliers\nfig, ax = plt.subplots()\nax.scatter(x = data['specific_gravity'], y = data['classification'])\nplt.ylabel('specific_gravity', fontsize=13)\nplt.xlabel('classfication', fontsize=13)\nplt.show()","ecf0055e":"fig, ax = plt.subplots()\nax.scatter(x = data['sugar'], y = data['classification'])\nplt.ylabel('sugar', fontsize=13)\nplt.xlabel('classfication', fontsize=13)\nplt.show()","623500c1":"#check outliers\nfig, ax = plt.subplots()\nax.scatter(x = data['blood_pressure'], y = data['classification'])\nplt.ylabel('blood_pressure', fontsize=13)\nplt.xlabel('classification', fontsize=13)\nplt.show()","0777118c":"numericalFeatures = data.select_dtypes(include=np.number)\ncategoricalFeatures = data.select_dtypes(include='object')\n","11889e3b":"numericalFeatures","c155d750":"datacorrnumerical=numericalFeatures.corr()\ndatacorrcategorical=categoricalFeatures.corr()\n","ae4528dd":"sns.pairplot(numericalFeatures)","de53299b":"plt.subplots(figsize=(10, 10))\nsns.heatmap(datacorrnumerical,annot=True)","198e44eb":"plt.scatter(data['classification'],data['age'])\nplt.xlabel('classification',fontsize=10)\nplt.ylabel('age',fontsize=10)","1e7461db":"plt.scatter(data['classification'],data['blood_pressure'])\nplt.xlabel('classification',fontsize=10)\nplt.ylabel('blood_pressure',fontsize=10)","a7351dda":"plt.scatter(data['classification'],data['albumin'])\nplt.xlabel('classification',fontsize=10)\nplt.ylabel('albumin',fontsize=10)","bc5dae69":"sns.boxplot(x='hypertension', y='specific_gravity', data=data, palette='viridis')","851c5243":"sns.boxplot(x='hypertension', y='albumin', data=data, palette='viridis')","f66e3958":"X = data.iloc[:, :-1]\ny = data.iloc[:, 24]","1d0cc3d7":"X=X.drop('classification', axis=1)","e3368cf6":"X=pd.DataFrame(X)","f8c5e7fd":"from sklearn.feature_selection import RFE\nfrom sklearn.tree import DecisionTreeClassifier","036721a0":"model = DecisionTreeClassifier()\nselector = RFE(estimator=model, n_features_to_select=14)","19f1b6a5":"selector.fit(X, y)","a65acef9":"selector.get_support(indices=True)","9d8e63fe":"Features=X.columns","21f7f990":"selected_features_idx = selector.get_support(indices=True)\nselected_features_idx","331c90ea":"selected_featuresDT = Features[selected_features_idx]\nselected_featuresDT","f02094a8":"from sklearn.ensemble import RandomForestClassifier\nfrom sklearn.feature_selection import SelectFromModel","68b8f67c":"rfc = RandomForestClassifier(random_state=0, criterion='gini') ","19224b88":"selector = SelectFromModel(estimator=rfc)","9a4ec65d":"selector.fit(X, y)","009216cf":"x=X[selected_featuresDT]","a285a8d4":"x.head()","81f7d9fa":"from sklearn.model_selection import train_test_split\n\nx_train, x_test, y_train, y_test = train_test_split(x, y, test_size=0.25, random_state=42)","5eb2bb5e":"from sklearn.tree import DecisionTreeClassifier\nmodeldt = DecisionTreeClassifier()","ccf85bb6":"modeldt.fit(x_train, y_train)","5370c32b":"y_preddt = modeldt.predict(x_test)\ny_preddt","b0920e0c":"CMDT=confusion_matrix(y_test,y_preddt)\nCMDT","08e40044":"print(classification_report(y_test, y_preddt))","120fdfe2":"sns.set(font_scale=1.1)\nsns.heatmap(CMDT, annot=True,fmt=\"g\")\nax= plt.subplot()\nplt.title(\"CM_CKD with DT\")\n#plt.tight_layout()\nplt.ylabel(' True Label')\nplt.xlabel(' Predicted Label ')\nax.xaxis.set_ticklabels(['NotCKD', 'CKD']); ax.yaxis.set_ticklabels(['NotCKD', 'CKD']);\nplt.show()","77e138b3":"############## DT ##########\naccuracy = accuracy_score(y_test,y_preddt)\nprint('Accuracy: %f' % accuracy)\naccuracy = balanced_accuracy_score(y_test,y_preddt)\nprint('Balanced_Accuracy: %f' % accuracy)\nprecision = precision_score(y_test,y_preddt)\nprint('Precision: %f' % precision)\nrecall = recall_score(y_test,y_preddt)\nprint('Recall: %f' % recall)\nf1 = f1_score(y_test,y_preddt)\nprint('F1 score: %f' % f1)","cf069e4b":"from sklearn.preprocessing import StandardScaler\n\nscaler = StandardScaler()\nscaler.fit(x_train)","f991454b":"x_train = scaler.transform(x_train)\nx_test = scaler.transform(x_test)","d65c8580":"from sklearn.ensemble import RandomForestClassifier\nmodelRF = RandomForestClassifier()","7a6f527b":"modelRF.fit(x_train, y_train)","23609724":"y_predrf = modelRF.predict(x_test)\ny_predrf","325ac562":"print(classification_report(y_test, y_predrf))","ea63e314":"CMRF=confusion_matrix(y_test, y_predrf)\nCMRF","df26306a":"sns.set(font_scale=1.1)\nsns.heatmap(CMRF, annot=True,fmt=\"g\")\nax= plt.subplot()\nplt.title(\"CM_CKD with RF\")\n#plt.tight_layout()\nplt.ylabel(' True Label')\nplt.xlabel(' Predicted Label ')\nax.xaxis.set_ticklabels(['NotCKD', 'CKD']); ax.yaxis.set_ticklabels(['NotCKD', 'CKD']);\nplt.show()","f22c602d":"###########  RF #############\naccuracy = accuracy_score(y_test,y_predrf)\nprint('Accuracy: %f' % accuracy)\naccuracy = balanced_accuracy_score(y_test,y_predrf)\nprint('Balanced_Accuracy: %f' % accuracy)\nprecision = precision_score(y_test,y_predrf)\nprint('Precision: %f' % precision)\nrecall = recall_score(y_test,y_predrf)\nprint('Recall: %f' % recall)\nf1 = f1_score(y_test,y_predrf)\nprint('F1 score: %f' % f1)","f9037b97":"from sklearn.svm import SVC\nmodelsvc = SVC(C=0.05)\nmodelsvc.fit(x_train, y_train)\ny_predsvc = modelsvc.predict(x_test)","15f383b7":"print(classification_report(y_test, y_predsvc))","a861ad80":"CMsvm=confusion_matrix(y_test, y_predsvc)\nCMsvm","2addbb8d":"sns.set(font_scale=1.1)\nsns.heatmap(CMsvm, annot=True,fmt=\"g\")\nax= plt.subplot()\nplt.title(\"CM_CKD with SVM\")\n#plt.tight_layout()\nplt.ylabel(' True Label')\nplt.xlabel(' Predicted Label ')\nax.xaxis.set_ticklabels(['NotCKD', 'CKD']); ax.yaxis.set_ticklabels(['NotCKD', 'CKD']);\nplt.show()","30de0b49":"############## SVM ##########\naccuracy = accuracy_score(y_test,y_predsvc)\nprint('Accuracy: %f' % accuracy)\naccuracy = balanced_accuracy_score(y_test,y_predsvc)\nprint('Balanced_Accuracy: %f' % accuracy)\nprecision = precision_score(y_test,y_predsvc)\nprint('Precision: %f' % precision)\nrecall = recall_score(y_test,y_predsvc)\nprint('Recall: %f' % recall)\nf1 = f1_score(y_test,y_predsvc)\nprint('F1 score: %f' % f1)","4e23bbf1":"from sklearn.neighbors import KNeighborsClassifier\nmodelknn = KNeighborsClassifier(n_neighbors=7)\nmodelknn.fit(x_train, y_train)\ny_predknn = modelknn.predict(x_test)","d89314e7":"print(classification_report(y_test, y_predknn))","dd14c3dc":"CMknn=confusion_matrix(y_test, y_predknn)\nCMknn","640e7fc8":"sns.set(font_scale=1.1)\nsns.heatmap(CMknn, annot=True,fmt=\"g\")\nax= plt.subplot()\nplt.title(\"CM_CKD with KNN\")\n#plt.tight_layout()\nplt.ylabel(' True Label')\nplt.xlabel(' Predicted Label ')\nax.xaxis.set_ticklabels(['NotCKD', 'CKD']); ax.yaxis.set_ticklabels(['NotCKD', 'CKD']);\nplt.show()","61c3c166":"############# KNN ##############\naccuracy = accuracy_score(y_test,y_predknn)\nprint('Accuracy: %f' % accuracy)\naccuracy = balanced_accuracy_score(y_test,y_predknn)\nprint('Balanced_Accuracy: %f' % accuracy)\nprecision = precision_score(y_test,y_predknn)\nprint('Precision: %f' % precision)\nrecall = recall_score(y_test,y_predknn)\nprint('Recall: %f' % recall)\nf1 = f1_score(y_test,y_predknn)\nprint('F1 score: %f' % f1)","194c407f":"from xgboost import XGBClassifier\n\nmodelxgb = XGBClassifier(n_estimators=100)\nmodelxgb.fit(x_train, y_train)\ny_predxgb = modelxgb.predict(x_test)","73832049":"CMxgb=confusion_matrix(y_test, y_predxgb)\nCMxgb","250f8577":"sns.set(font_scale=1.1)\nsns.heatmap(CMxgb, annot=True,fmt=\"g\")\nax= plt.subplot()\nplt.title(\"CM_CKD with XGB\")\n#plt.tight_layout()\nplt.ylabel(' True Label')\nplt.xlabel(' Predicted Label ')\nax.xaxis.set_ticklabels(['NotCKD', 'CKD']); ax.yaxis.set_ticklabels(['NotCKD', 'CKD']);\nplt.show()","38ed76b6":"########### XGBoost ################\naccuracy = accuracy_score(y_test,y_predxgb)\nprint('Accuracy: %f' % accuracy)\naccuracy = balanced_accuracy_score(y_test,y_predxgb)\nprint('Balanced_Accuracy: %f' % accuracy)\nprecision = precision_score(y_test,y_predxgb)\nprint('Precision: %f' % precision)\nrecall = recall_score(y_test,y_predxgb)\nprint('Recall: %f' % recall)\nf1 = f1_score(y_test,y_predxgb)\nprint('F1 score: %f' % f1)","ad543b48":"import joblib","331caeb0":"joblib.dump(model,\"FinalProject_model_RF.pkl\")","df3022b3":"joblib.dump(modelxgb,\"FinalProject_model_xgb.pkl\")","91701793":"predictions = [round(value) for value in y_predrf]","1fa3c597":"case=[1.02,0,0.0,0.0,0.0,148,11.3,38,6000,5.2,0,0,0.0,1]\ncase = np.array(case).reshape((1,-1))\nres=modelRF.predict(case)[0]","dfdea600":"str(res)","27fb5692":"## Intro\n### Chronic Kidney Disease (CKD) patients are at higher risk for more severe illness. Due to immunosuppression, the kidney disease patients who appear most at risk for  COVID-19. The complications of CKD are high blood pressure, anemia (low blood count), and poor nutritional health.  So, developing a model to classify CKD patients is needed and an important to avoid the risk of this disease\n","8e447290":"## Roadmap of Notebook\n###\tProblem Definition\n###\tCKD Features\n###\tAnalysis & Visualization.\n###\tData Preprocessing\n####\tData Cleaning\n####\tHandling Missing Values\n####\tOutliers\n####\tSplitting Data\n####\tFeature Selection\n####\tSnapshots of some visualization\n###\tUsed machine learning models\n###\tResults\n### Save a Model\n### Try a Model\n","80792c0b":"### Support Vector Machine (SVM)","5359bb68":"### 1.4 Visualization","d465665e":"### Try a Model","b901b828":"Many thank for  your visiting my notebook and your time.\n If my notebook is useful and helpful. Please, Upvote.","5e38d0f5":"### 1.6 Splitting Data","2f209fc9":"### 1.6 Feature Selection","d0db08c7":"### K Nearest Neighbor (KNN)","cf08cb5c":"####  Random Forest Classifier","2ff487c6":"### 1.1 Data Cleaning","6114f9e2":"### 1.2 Handling Missing Values","e7a0ce46":"#### Decision Tree Classiffer","7d2eaecd":"### 1.3 Outliers","4593358b":"### Save a Model","4a2940e3":"##  1. Data  Preprocessing  ","af365c34":"### Used Machine Learning Models\n#### 1.\tDecision Tree\n#### 2.\tRandom forest \n#### 3.\tSVM\n#### 4.\tKNN\n#### 5.\tXGBoost\n","3bd69e51":"### Train Data with Decision Tree, RF, XGBoost classifier, SVM, and KNN Models ","2a47c8ad":"### Hello, Everyone.\n### Welcome to My Notebook for Classification Chronic kidney disease (CKD).\n## The web application for this project is available in this link\n https:\/\/ckdclassification.herokuapp.com\/"}}