{"cell_type":{"97e6900d":"code","857dbad0":"code","897a45e3":"code","83778acd":"code","9b68de92":"code","5d4d18c7":"code","968491cb":"code","495c766f":"code","19f8e284":"code","66fe2e0c":"code","11ba245d":"code","b34ef7d3":"code","8a7757c0":"code","922e30ec":"code","0af0937f":"code","68c80bdb":"code","587a9c5b":"code","09c96bfa":"code","98c7d77f":"code","9307729d":"code","8d4fb617":"code","5a974c0d":"code","4ccbc803":"code","dfe8b2da":"code","d484da04":"code","d76f496f":"code","39d2c2d1":"code","eb9b9a9f":"code","41d464a3":"code","16155646":"code","cfe28979":"code","299ef153":"code","083ddb67":"code","a03a4c3f":"code","bf01899b":"code","37def603":"code","bb983aa7":"code","4d6d33bc":"code","b933f64b":"code","a6086efd":"code","cb86af61":"code","39ec4bb3":"code","16b5d6d2":"code","05a17ac9":"code","fe189ffa":"code","0795411d":"code","1a1b1dd1":"code","cc001066":"code","ebc1b970":"code","bc757cfe":"code","004508f2":"code","a8ce6438":"code","730a6f97":"code","3d03aedb":"code","99191426":"code","a17cd8d8":"code","b142d9e4":"code","87c3fe56":"code","6702d0d4":"code","50acd764":"code","a9077e27":"code","3399cead":"code","bf4e0e22":"code","f8b8b4e3":"code","e5b43903":"code","7f4eb30d":"code","16740154":"code","3266a8fe":"code","8d6f7295":"code","37a8c10a":"code","e66d7f70":"code","28572af6":"code","92f1b7c3":"code","d96f577d":"code","10e3b919":"code","a114bd20":"code","0f6929d1":"code","92cb8e0c":"code","0c66435c":"code","a8730d76":"code","097aedeb":"code","cd2c4ef8":"code","652e41b7":"code","a11bd0a3":"code","6a2715c6":"code","bd5af4f8":"code","bf7a999d":"code","68ce8ba1":"code","aae21bf0":"code","fd564e6c":"code","b5326b07":"code","f8d60980":"code","7b49c3eb":"code","4d84abaf":"markdown","1f50e208":"markdown","70b32505":"markdown","084a4fac":"markdown","41eb4904":"markdown","3f6e1941":"markdown","eea4e4f0":"markdown","f422563e":"markdown","890d7e20":"markdown","7c068e75":"markdown","387a635f":"markdown","46afcb7e":"markdown"},"source":{"97e6900d":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n","857dbad0":"df_train = pd.read_csv('..\/input\/titanic\/train.csv')\ndf_test = pd.read_csv('..\/input\/titanic\/test.csv')\ngender_df=pd.read_csv('..\/input\/titanic\/gender_submission.csv')","897a45e3":"df_train.head()","83778acd":"df_train.describe()","9b68de92":"df_train.info()","5d4d18c7":"df_train.isnull().sum().sort_values(ascending = False) ","968491cb":"df_test.isnull().sum().sort_values(ascending = False) ","495c766f":"def null_table():\n  null_train = df_train.isnull().sum()\n  null_test = df_test.isnull().sum() \n  null_table=pd.DataFrame({'null_train' : null_train ,\n                           'null_test' : null_test,\n                           'null_train_per(%)' : round((null_train\/len(df_train))*100, 2),\n                        'null_test_per(%)' : round((null_test\/len(df_test))*100, 2)})\n  return null_table","19f8e284":"null_table()","66fe2e0c":"sns.heatmap(df_train.isnull())","11ba245d":"sns.heatmap(df_test.isnull())","b34ef7d3":"df_train['Age'] = df_train['Age'].fillna(df_train['Age'].mean())\ndf_test['Age'] = df_test['Age'].fillna(df_train['Age'].mean())","8a7757c0":"df_train.isnull().sum()","922e30ec":"df_train['Embarked'].value_counts()","0af0937f":"count=df_train['Embarked'].value_counts().sort_index()\nfig = plt.figure(figsize=(9, 6))\nax = fig.gca()\ncount.plot.bar(ax=ax)\nplt.show()\n","68c80bdb":"df_train['Embarked'] = df_train['Embarked'].fillna('S')","587a9c5b":"df_train['Embarked'].isnull().sum()","09c96bfa":"df_train=df_train.drop(['Ticket','Cabin'],axis=1)\ndf_test=df_test.drop(['Ticket','Cabin'],axis=1)","98c7d77f":"df_train['Embarked'].value_counts()","9307729d":"null_table()","8d4fb617":"df_train.isnull().sum().sort_values(ascending = False) ","5a974c0d":"df_train['Sex'].value_counts()","4ccbc803":"df_train['Survived'].value_counts()","dfe8b2da":"df_train[['Survived','Sex']].groupby('Sex',as_index=False).mean().sort_values(by='Survived' ,ascending=False)\n","d484da04":"sns.violinplot(df_train['Sex'] , df_train['Survived'])\nplt.show()","d76f496f":"sns.violinplot(x=df_train['Survived'] , y= df_train['Age'])\nplt.title('Gender vs Age', fontsize = 20)\nplt.show()","39d2c2d1":"sns.factorplot('Sex', col = 'Survived', data = df_train, kind ='count', \n               palette = \"OrRd\")","eb9b9a9f":"sns.factorplot('Pclass', col = 'Survived', data = df_train, kind ='count', \n               palette = \"OrRd\")","41d464a3":"chart=sns.FacetGrid(df_train,col='Survived')\nchart.map(sns.histplot,'Age' , color='red')\nplt.show()","16155646":"\nchart=sns.FacetGrid(df_train,col='Survived')\nchart.map(sns.histplot,'Embarked' , color='red')\nplt.show()","cfe28979":"chart=sns.FacetGrid(df_train,col='Embarked')\nchart.map(sns.histplot,'Pclass' , color='red')\nplt.show()","299ef153":"feature = ['SibSp', 'Parch', 'Pclass', 'Sex','Embarked']\nfor feat in feature:\n    f, x = plt.subplots(figsize=(8, 6))\n    sns.histplot(data=df_train, x=feat, hue=\"Survived\", multiple=\"dodge\")\n    plt.show()","083ddb67":"datas=[ 'Pclass', 'Sex', 'SibSp','Parch', 'Embarked']\nfor col in datas:\n  fig=plt.figure(figsize=(9,6))\n  sns.barplot(x = df_train[col] , y = df_train['Survived'],palette = \"copper_r\")\n  plt.title('Survival Propability by: '+ col)\nplt.show()","a03a4c3f":"df_train.isnull().sum()","bf01899b":"df_test.isnull().sum()","37def603":"df_test['Fare']=df_test['Fare'].fillna(df_test['Fare'].mean())","bb983aa7":"df_train.info()","4d6d33bc":"df=pd.concat([df_train,df_test],axis=0).reset_index(drop=True)","b933f64b":"df.shape","a6086efd":"df.isnull()","cb86af61":"df.columns","39ec4bb3":"sns.heatmap(df[['Survived', 'SibSp','Parch', 'Age','Fare']].corr() , annot=True)","16b5d6d2":"df['SibSp'].value_counts()","05a17ac9":"df[['Survived','SibSp']].groupby('Survived',as_index=False).mean()","fe189ffa":"df['Parch'].value_counts()","0795411d":"df[['Survived','Parch']].groupby('Survived' , as_index=False).mean()","1a1b1dd1":"sns.histplot(df['Age'],label='Skewness: %.2f'%(df_train['Age'].skew()))\nplt.legend(loc='best')\nplt.title('Passenger Age Distribution')\nplt.show()\n","cc001066":"df.isnull().sum()","ebc1b970":"df['Sex'] = df['Sex'].replace({'male' : 0 , 'female': 1})","bc757cfe":"df.head(5)","004508f2":"df['Title'] = [name.split(\",\")[1].split('.')[0].strip() for name in df['Name']]\n","a8ce6438":"df[['Name' , 'Title']].head()","730a6f97":"df['Title'].value_counts()","3d03aedb":"df['Title'] = df['Title'].replace(['Dr','Rev','Col',\n                                'Major','Lady','Jonkheer','Don',\n                                 'the Countess','Sir','Dona'],'Rare')\n\ndf['Title'] = df['Title'].replace(['Mlle' , 'Ms'], 'Miss')\ndf['Title'] = df['Title'].replace('Mme', 'Mrs')","99191426":"df['Title'].value_counts()","a17cd8d8":"sns.countplot(df['Title'] )\nplt.show()","b142d9e4":"#df.groupby('Title')['Survived'].mean()","87c3fe56":"df[['Title' , 'Survived']].groupby('Title', as_index = False).mean()\n#df.groupby('Title')['Survived'].count()","6702d0d4":"\nsns.barplot(x=df['Title'] , y = df['Survived'])\nplt.ylabel(\"Survived Probability\")\nplt.title(\"Mean of Survival by Title\")\nplt.show()","50acd764":"df= df.drop('Name'  ,axis=1)","a9077e27":"df","3399cead":"new_df= pd.get_dummies(df , columns= ['Title']) \n","bf4e0e22":"\nnew_df = pd.get_dummies(new_df , columns= ['Embarked'], prefix = 'Em')","f8b8b4e3":"new_df","e5b43903":"new_df['Age']=new_df['Age'].astype(int)","7f4eb30d":"#df.loc[df['month']=='march' , 'month'] = 3\n","16740154":"new_df.loc[new_df['Age'] < 16 , 'Age']=0\nnew_df.loc[(new_df['Age'] >= 16) & (new_df['Age']<=32) , 'Age' ]=1 \nnew_df.loc[(new_df['Age'] > 32 ) & (new_df['Age']<=48) , 'Age']=2\nnew_df.loc[(new_df['Age'] > 48) & (new_df['Age']<= 62) , 'Age']=3\nnew_df.loc[new_df['Age'] >  62, 'Age']=4  ","3266a8fe":"new_df","8d6f7295":"train = new_df[:len(df_train)]\nprint(len(train))\ntest = new_df[len(df_train):]\nprint(len(test))","37a8c10a":"train.head()","e66d7f70":"test","28572af6":"gender_df","92f1b7c3":"train['Survived'] =  train['Survived'].astype(int)","d96f577d":"X_train = train.drop([\"Survived\", \"PassengerId\"], axis=1)\ny_train = train[\"Survived\"]\nX_test  = test.drop([\"PassengerId\", \"Survived\"], axis=1)\ny_test = gender_df['Survived']","10e3b919":"print(X_train.shape)\nprint(X_test.shape)","a114bd20":"print('X_train shape = ', X_train.shape)\nprint('Y_train shape = ', y_train.shape)\nprint('X_test shape = ', X_test.shape)\nprint('Y_test shape = ', y_test.shape)","0f6929d1":"from sklearn.linear_model import LogisticRegression\nfrom sklearn.svm import SVC, LinearSVC\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.naive_bayes import GaussianNB\nfrom sklearn.linear_model import Perceptron\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn import metrics","92cb8e0c":"Svc= SVC()\nSvc.fit(X_train,y_train)\ny_predict = Svc.predict(X_test)\n\n# Training And Testing Accuracy\n\ntraining_acc_SVC=round(Svc.score(X_train,y_train),2)\ntesting_acc_SVC=round(Svc.score(X_test,y_test),2)\n\nprint('Testing Accurcy:' , training_acc_SVC ,'\\n' )\nprint('Testing Accurcy:' , testing_acc_SVC ,'\\n')\n\n# Accuracy , Precision and Recall Score\nprint('Accuracy Score:',round(metrics.accuracy_score(y_test,y_predict),2),'\\n')\nprint(\"Precision:\",round(metrics.precision_score(y_test, y_predict),2),'\\n' )\nprint(\"Recall:\",round(metrics.recall_score(y_test, y_predict),2),'\\n')\n\n# confusion matrix\ncm = metrics.confusion_matrix(y_test, y_predict)\nprint('Confusion Metrix: \\n' ,cm , '\\n') \n\n# Heatmap of Confusion Matrix\n\nsns.heatmap(cm,annot=True, fmt=\".3f\", linewidths=.5, square = True, cmap = 'Blues_r')\nplt.ylabel('Actual label')\nplt.xlabel('Predicted label')\nall_sample_title = 'Accuracy Score: {0}'.format(round(metrics.accuracy_score(y_test,y_predict),2))\nplt.title(all_sample_title, size = 15)","0c66435c":"LSvc = LinearSVC()\nLSvc.fit(X_train,y_train)\ny_predict = LSvc.predict(X_test)\n\n# Training And Testing Accuracy\n\ntraining_acc_LSVC=round(LSvc.score(X_train,y_train),2)\ntesting_acc_LSVC=round(LSvc.score(X_test,y_test),2)\n\nprint('Testing Accurcy:' , training_acc_LSVC ,'\\n' )\nprint('Testing Accurcy:' , testing_acc_LSVC ,'\\n')\n\n# Accuracy , Precision and Recall Score\nprint('Accuracy Score:',round(metrics.accuracy_score(y_test,y_predict),2),'\\n')\nprint(\"Precision:\",round(metrics.precision_score(y_test, y_predict),2),'\\n' )\nprint(\"Recall:\",round(metrics.recall_score(y_test, y_predict),2),'\\n')\n\n# confusion matrix\ncm = metrics.confusion_matrix(y_test, y_predict)\nprint('Confusion Metrix: \\n' ,cm , '\\n') \n\n# Heatmap of Confusion Matrix\n\nsns.heatmap(cm,annot=True, fmt=\".3f\", linewidths=.5, square = True, cmap = 'Blues_r')\nplt.ylabel('Actual label')\nplt.xlabel('Predicted label')\nall_sample_title = 'Accuracy Score: {0}'.format(round(metrics.accuracy_score(y_test,y_predict),2))\nplt.title(all_sample_title, size = 15)","a8730d76":"KNN = KNeighborsClassifier(n_neighbors = 3)\nKNN.fit(X_train,y_train)\ny_predict = KNN.predict(X_test)\n\n# Training And Testing Accuracy\n\ntraining_acc_KNN=round(KNN.score(X_train,y_train),2)\ntesting_acc_KNN=round(KNN.score(X_test,y_test),2)\n\nprint('Testing Accurcy:' , training_acc_KNN ,'\\n' )\nprint('Testing Accurcy:' , testing_acc_KNN ,'\\n')\n\n# Accuracy , Precision and Recall Score\nprint('Accuracy Score:',round(metrics.accuracy_score(y_test,y_predict),2),'\\n')\nprint(\"Precision:\",round(metrics.precision_score(y_test, y_predict),2),'\\n' )\nprint(\"Recall:\",round(metrics.recall_score(y_test, y_predict),2),'\\n')\n\n# confusion matrix\ncm = metrics.confusion_matrix(y_test, y_predict)\nprint('Confusion Metrix: \\n' ,cm , '\\n') \n\n# Heatmap of Confusion Matrix\n\nsns.heatmap(cm,annot=True, fmt=\".3f\", linewidths=.5, square = True, cmap = 'Blues_r')\nplt.ylabel('Actual label')\nplt.xlabel('Predicted label')\nall_sample_title = 'Accuracy Score: {0}'.format(round(metrics.accuracy_score(y_test,y_predict),2))\nplt.title(all_sample_title, size = 15)","097aedeb":"GNB = GaussianNB()\nGNB.fit(X_train,y_train)\ny_predict = GNB.predict(X_test)\n\n# Training And Testing Accuracy\n\ntraining_acc_GNB=round(GNB.score(X_train,y_train),2)\ntesting_acc_GNB=round(GNB.score(X_test,y_test),2)\n\nprint('Testing Accurcy:' , training_acc_GNB ,'\\n' )\nprint('Testing Accurcy:' , testing_acc_GNB ,'\\n')\n\n# Accuracy , Precision and Recall Score\nprint('Accuracy Score:',round(metrics.accuracy_score(y_test,y_predict),2),'\\n')\nprint(\"Precision:\",round(metrics.precision_score(y_test, y_predict),2),'\\n' )\nprint(\"Recall:\",round(metrics.recall_score(y_test, y_predict),2),'\\n')\n\n# confusion matrix\ncm = metrics.confusion_matrix(y_test, y_predict)\nprint('Confusion Metrix: \\n' ,cm , '\\n') \n\n# Heatmap of Confusion Matrix\n\nsns.heatmap(cm,annot=True, fmt=\".3f\", linewidths=.5, square = True, cmap = 'Blues_r')\nplt.ylabel('Actual label')\nplt.xlabel('Predicted label')\nall_sample_title = 'Accuracy Score: {0}'.format(round(metrics.accuracy_score(y_test,y_predict),2))\nplt.title(all_sample_title, size = 15)","cd2c4ef8":"RFC = RandomForestClassifier()\nRFC.fit(X_train,y_train)\ny_predict = RFC.predict(X_test)\n\n# Training And Testing Accuracy\n\ntraining_acc_RFC=round(RFC.score(X_train,y_train),2)\ntesting_acc_RFC=round(RFC.score(X_test,y_test),2)\n\nprint('Testing Accurcy:' , training_acc_RFC ,'\\n' )\nprint('Testing Accurcy:' , testing_acc_RFC ,'\\n')\n\n# Accuracy , Precision and Recall Score\nprint('Accuracy Score:',round(metrics.accuracy_score(y_test,y_predict),2),'\\n')\nprint(\"Precision:\",round(metrics.precision_score(y_test, y_predict),2),'\\n' )\nprint(\"Recall:\",round(metrics.recall_score(y_test, y_predict),2),'\\n')\n\n# confusion matrix\ncm = metrics.confusion_matrix(y_test, y_predict)\nprint('Confusion Metrix: \\n' ,cm , '\\n') \n\n# Heatmap of Confusion Matrix\n\nsns.heatmap(cm,annot=True, fmt=\".3f\", linewidths=.5, square = True, cmap = 'Blues_r')\nplt.ylabel('Actual label')\nplt.xlabel('Predicted label')\nall_sample_title = 'Accuracy Score: {0}'.format(round(metrics.accuracy_score(y_test,y_predict),2))\nplt.title(all_sample_title, size = 15)\n","652e41b7":"PCE = Perceptron()\nPCE.fit(X_train,y_train)\ny_predict = PCE.predict(X_test)\n\n# Training And Testing Accuracy\n\ntraining_acc_PCE =round(PCE.score(X_train,y_train),2)\ntesting_acc_PCE=round(PCE.score(X_test,y_test),2)\n\nprint('Testing Accurcy:' , training_acc_PCE ,'\\n' )\nprint('Testing Accurcy:' , testing_acc_PCE ,'\\n')\n\n# Accuracy , Precision and Recall Score\nprint('Accuracy Score:',round(metrics.accuracy_score(y_test,y_predict),2),'\\n')\nprint(\"Precision:\",round(metrics.precision_score(y_test, y_predict),2),'\\n' )\nprint(\"Recall:\",round(metrics.recall_score(y_test, y_predict),2),'\\n')\n\n# confusion matrix\ncm = metrics.confusion_matrix(y_test, y_predict)\nprint('Confusion Metrix: \\n' ,cm , '\\n') \n\n# Heatmap of Confusion Matrix\n\nsns.heatmap(cm,annot=True, fmt=\".3f\", linewidths=.5, square = True, cmap = 'Blues_r')\nplt.ylabel('Actual label')\nplt.xlabel('Predicted label')\nall_sample_title = 'Accuracy Score: {0}'.format(round(metrics.accuracy_score(y_test,y_predict),2))\nplt.title(all_sample_title, size = 15)","a11bd0a3":"DTC = DecisionTreeClassifier()\nDTC.fit(X_train,y_train)\ny_predict = DTC.predict(X_test)\n\n# Training And Testing Accuracy\n\ntraining_acc_DTC=round(DTC.score(X_train,y_train),2)\ntesting_acc_DTC=round(DTC.score(X_test,y_test),2)\n\nprint('Testing Accurcy:' , training_acc_DTC ,'\\n' )\nprint('Testing Accurcy:' , testing_acc_DTC ,'\\n')\n\n# Accuracy , Precision and Recall Score\nprint('Accuracy Score:',round(metrics.accuracy_score(y_test,y_predict),2),'\\n')\nprint(\"Precision:\",round(metrics.precision_score(y_test, y_predict),2),'\\n' )\nprint(\"Recall:\",round(metrics.recall_score(y_test, y_predict),2),'\\n')\n\n# confusion matrix\ncm = metrics.confusion_matrix(y_test, y_predict)\nprint('Confusion Metrix: \\n' ,cm , '\\n') \n\n# Heatmap of Confusion Matrix\n\nsns.heatmap(cm,annot=True, fmt=\".3f\", linewidths=.5, square = True, cmap = 'Blues_r')\nplt.ylabel('Actual label')\nplt.xlabel('Predicted label')\nall_sample_title = 'Accuracy Score: {0}'.format(round(metrics.accuracy_score(y_test,y_predict),2))\nplt.title(all_sample_title, size = 15)","6a2715c6":"LR = LogisticRegression(max_iter=1000)\nLR.fit(X_train,y_train)\ny_predict = LR.predict(X_test)\n\n# Training And Testing Accuracy\n\ntraining_acc_LR=round(LR.score(X_train,y_train),2)\ntesting_acc_LR=round(LR.score(X_test,y_test),2)\n\nprint('Testing Accurcy:' , training_acc_LR ,'\\n' )\nprint('Testing Accurcy:' , testing_acc_LR ,'\\n')\n\n# Accuracy , Precision and Recall Score\nprint('Accuracy Score:',round(metrics.accuracy_score(y_test,y_predict),2),'\\n')\nprint(\"Precision:\",round(metrics.precision_score(y_test, y_predict),2),'\\n' )\nprint(\"Recall:\",round(metrics.recall_score(y_test, y_predict),2),'\\n')\n\n# confusion matrix\ncm = metrics.confusion_matrix(y_test, y_predict)\nprint('Confusion Metrix: \\n' ,cm , '\\n') \n\n# Heatmap of Confusion Matrix\n\nsns.heatmap(cm,annot=True, fmt=\".3f\", linewidths=.5, square = True, cmap = 'Blues_r')\nplt.ylabel('Actual label')\nplt.xlabel('Predicted label')\nall_sample_title = 'Accuracy Score: {0}'.format(round(metrics.accuracy_score(y_test,y_predict),2))\nplt.title(all_sample_title, size = 15)","bd5af4f8":"model = pd.DataFrame({\n                        'Model' : ['Support vector Machines','KNN',\n                                 'Logistic Regression','Random Forest',\n                                 'Naive Bayes','Perceptron',\n                                  'Linear SVC','Decision tree'\n                                  ],\n                      'Score_Train' : [training_acc_SVC,\n                                training_acc_KNN,\n                               training_acc_LR,\n                               training_acc_RFC,\n                               training_acc_GNB,\n                               training_acc_PCE, \n                               training_acc_LSVC,\n                               training_acc_DTC\n                               ],\n                     'Score_Test' : [testing_acc_SVC,\n                                testing_acc_KNN,\n                               testing_acc_LR,\n                               testing_acc_RFC,\n                               testing_acc_GNB,\n                               testing_acc_PCE, \n                               testing_acc_LSVC,\n                               testing_acc_DTC\n                               ]\n                      })\nmodel= model.sort_values(by = 'Score_Test', ascending = False, ignore_index = True)\n\n","bf7a999d":"model['Difference'] = np.abs(model['Score_Train'] - model['Score_Test'])\nmodel\n","68ce8ba1":"classifiers = []\nclassifiers.append(LogisticRegression(max_iter=1000))\nclassifiers.append(SVC())\nclassifiers.append(KNeighborsClassifier())\nclassifiers.append(GaussianNB())\nclassifiers.append(Perceptron())\nclassifiers.append(DecisionTreeClassifier())\nclassifiers.append(RandomForestClassifier())\nlen(classifiers)","aae21bf0":"from sklearn.model_selection import cross_val_score\n","fd564e6c":"cv_results = []\nfor classifier in classifiers:\n    cv_results.append(cross_val_score(classifier,X_train,y_train,\n                                     scoring='accuracy',cv=10))\ncv_results","b5326b07":"cv_mean = []\ncv_std = []\nfor cv_result in cv_results:\n    cv_mean.append(cv_result.mean())\n    cv_std.append(cv_result.std())","f8d60980":"submission = pd.DataFrame({\n        \"PassengerId\": test[\"PassengerId\"],\n        \"Survived\": y_predict\n    })\nsubmission.to_csv('Titanic_Submission.csv', index=False)","7b49c3eb":"submission.to_csv('Titanic_Submission.csv', index=False)","4d84abaf":"# Modeling","1f50e208":"# EXPLORATORY DATA ANALYSIS (EDA) & VISUALIZATION \n\n","70b32505":"# Random Forest Classifier","084a4fac":"# IMPORTING LIBRARIES","41eb4904":"# IMPORTING DATASETS","3f6e1941":"# DecisionTreeClassifier","eea4e4f0":"# Perceptron","f422563e":"# Naive Bayes","890d7e20":"# Linear SVC","7c068e75":"# KNN","387a635f":"# Logistic Regression","46afcb7e":"# SVC"}}