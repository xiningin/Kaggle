{"cell_type":{"df453e51":"code","f9d2d53e":"code","b40f3b1a":"code","8f7bc68b":"code","3e8f8e2b":"code","9ad9b10c":"code","87c98475":"code","83c03b8b":"code","f1f94275":"code","9c8318d8":"markdown","b4b941d0":"markdown"},"source":{"df453e51":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\nimport matplotlib.pyplot as plt\nplt.style.use('seaborn-whitegrid')\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","f9d2d53e":"vtime = pd.read_csv(\"\/kaggle\/input\/novel-corona-virus-2019-dataset\/time_series_covid_19_confirmed.csv\")\nvtime","b40f3b1a":"dtime = pd.read_csv(\"\/kaggle\/input\/novel-corona-virus-2019-dataset\/time_series_covid_19_deaths.csv\")\ndtime","8f7bc68b":"ww = vtime.iloc[:,1]\nww[np.where(ww == \"Iran (Islamic Republic of)\")[0]] = \"Iran\"\nww[np.where(ww == \"Republic of Korea\")[0]] = \"South Korea\"\nww[np.where(ww == \"Korea, South\")[0]] = \"South Korea\"\nww[np.where(ww == \"China\")[0]] = \"Mainland China\"\nww[np.where(ww == \"UK\")[0]] = \"United Kingdom\"\nww[np.where(ww == \"Viet Nam\")[0]] = \"Vietnam\"\nww[np.where(ww == \"Republic of Moldova\")[0]] = \"Moldova\"\nww[np.where(ww == \"Russian Federation\")[0]] = \"Russia\"\nuc = ww.unique()\nuc.sort()","3e8f8e2b":"counter = 0\n\nplt.figure(figsize=(20,45))\nplt.tight_layout(pad=4.0, w_pad=4.0)\n\nfor country in uc:\n    ma = np.where(ww == country)[0]\n    country_count = vtime.iloc[ma, 4:].sum(axis=0)\n    \n    if np.max(country_count) > 100:\n        sig_cases = np.where(country_count > 30)[0]\n        counter = counter + 1\n        plt.subplot(10,4,counter)\n        plt.plot(country_count[sig_cases], 'r.-')\n        #plt.plot(np.log(country_count))\n        \n        plt.xticks(rotation=90)\n        plt.title(country)\n        plt.ylabel(\"cases\")\n\nplt.subplots_adjust(left=0, right=1.3, top=1.3, bottom=0, hspace=0.5)\nplt.show()","9ad9b10c":"ma = np.where(ww == \"Mainland China\")[0]\nchina_count = vtime.iloc[ma, 4:].sum(axis=0)\n\ncountry_count = vtime.iloc[:, 4:].sum(axis=0)\nplt.figure(figsize=(20,10))\nres1, = plt.plot(country_count, 'b.-', label=\"Global\")\nres2, = plt.plot(china_count, 'r.-', label=\"Mainland China\")\nplt.title(\"Global Infections\")\nplt.ylabel(\"cases\")\nplt.xticks(rotation=90)\nplt.legend(handles=[res1, res2])\nplt.show()","87c98475":"\ncountry = \"Italy\"\nma = np.where(ww == country)[0]\ncountry_count = vtime.iloc[ma, 4:].sum(axis=0)\ncountry_deaths = dtime.iloc[ma, 4:].sum(axis=0)\n\n\nsig_cases = np.where(country_count > 30)[0]\n\nfig, ax1 = plt.subplots(figsize=(10,6))\n\nplt.xticks(rotation=90)\n\nax2 = ax1.twinx()  # instantiate a second axes that shares the same x-axis\n\ncolor = 'black'\nax1.set_xlabel('date')\nax1.set_ylabel('cases', color=color)\nax1.plot(country_count[sig_cases], 'b^-', label=\"Cases (Italy)\")\nax2.plot(country_deaths[sig_cases], 'b^--', label=\"Deaths (Italy)\")\n\nax1.tick_params(axis='y', labelcolor=color)\n\n\ncountry = \"South Korea\"\nma = np.where(ww == country)[0]\ncountry_count = vtime.iloc[ma, 4:].sum(axis=0)\ncountry_deaths = dtime.iloc[ma, 4:].sum(axis=0)\n\ncolor = 'green'\nax2.set_ylabel('deaths', color=color)  # we already handled the x-label with ax1\nax1.plot(country_count[sig_cases], 'ro-', label=\"Cases (South Korea)\")\nax2.plot(country_deaths[sig_cases], 'ro--', label=\"Deaths (South Korea)\")\nax2.tick_params(axis='y', labelcolor=color)\n\nfig.tight_layout()  # otherwise the right y-label is slightly clipped\nax1.legend(loc='upper left')\nax2.legend(loc='upper center')\nplt.show()\n\n","83c03b8b":"country = \"Italy\"\nma = np.where(ww == country)[0]\ncountry_count = vtime.iloc[ma, 4:].sum(axis=0)\ncountry_deaths = dtime.iloc[ma, 4:].sum(axis=0)\ndr_italy = country_deaths \/ country_count\n\nd_cases = np.where(country_deaths > 3)[0]\n\ncountry = \"South Korea\"\nma = np.where(ww == country)[0]\ncountry_count = vtime.iloc[ma, 4:].sum(axis=0)\ncountry_deaths = dtime.iloc[ma, 4:].sum(axis=0)\ndr_korea = country_deaths \/ country_count\n\nplt.figure(figsize=(10,6))\nres1, = plt.plot(dr_italy[d_cases], 'b.-', label=\"Death rate (Italy)\")\nres2, = plt.plot(dr_korea[d_cases], 'r.-', label=\"Death rae (South Korea)\")\nplt.title(\"Death rates\")\nplt.ylabel(\"death rate\")\nplt.xticks(rotation=90)\nplt.legend(handles=[res1, res2])\nplt.show()","f1f94275":"scaling_factor = dr_italy[d_cases] \/ dr_korea[d_cases]\ncountry = \"Italy\"\nma = np.where(ww == country)[0]\n\ncountry_count = vtime.iloc[ma, 4:].sum(axis=0)\ncountry_deaths = dtime.iloc[ma, 4:].sum(axis=0)\n\npotential_cases = country_count[d_cases] * scaling_factor\n\nplt.figure(figsize=(10,6))\nres1, = plt.plot(country_count[d_cases], 'bo-', label=\"Cases (Italy)\")\nres2, = plt.plot(potential_cases, 'ro-', label=\"Correct Cases (Italy)\")\nplt.title(\"Corrected case count by death rate\")\nplt.ylabel(\"cases\")\nplt.xticks(rotation=90)\nplt.legend(handles=[res1, res2])\nplt.show()\n","9c8318d8":"## Italy might have more than 100.000 corona cases\n\n### Italy might have a large number of unreported corona virus cases assuming the death rate in all countries is the same and observed differences stem in false negative cases. \n\nThis script plots the countries with at least 100 validated cases of corona virus over time. Only dates are plotted with 30 cases or more. Further down the script compares the reported death rate between South Korea and Italy. While Italy currently reports death rates of around 6% South Korea reported a constant death rate below 1%. South Korea is testing vigorously and it can be assumed that it has a much lower false negative rate than Italy.\n\nThe resulting corrected case numbers for Italy are potentially 8 times higher than reported. This is making several assumptions that if not met would alter the result of this analysis.","b4b941d0":"### Assuming that the death rate reported in South Korea is correct and we assume similar death rates in all countries we can correct the reported number of cases for Italy by using the observed differences in death rates\n\n### Assumptions\n1. Death rates should be the same in all countries\n2. Cases are generally under reported (there is a large number of false negative cases, this number depends on how thourougly the population is tested and there is no false positives)\n3. The number of deaths attributed to corona virus have low false negative rates and no false positives\n\nWith these assumptions if there are significant differences in death rates it means there is a difference in false negative cases between countries. "}}