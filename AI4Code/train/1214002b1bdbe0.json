{"cell_type":{"d461f8e2":"code","bd94e2bc":"code","7339f712":"code","61f7c4eb":"code","d15653ae":"code","9d6a3f81":"code","288f02ad":"code","aaecb2e8":"code","81ca9c8f":"code","d065f9ce":"code","e2de90bd":"code","c3a9fa75":"code","a5808ec4":"code","652afabb":"code","f5eac8ea":"code","cdc4a2c3":"code","df97fbad":"code","41e7603b":"code","d3242032":"code","4b4b3347":"code","02377cd9":"code","4c35d1f9":"code","74aac78d":"code","2ebfc96b":"code","588228f8":"code","dbbbcf37":"code","94912b23":"code","e38f9363":"markdown"},"source":{"d461f8e2":"import os\n#Dataset file should has a directory structure like this\nprint(os.listdir('\/kaggle\/input\/lego-v1-train-test\/LEGO brick images v1'))\n\nprint(os.listdir('\/kaggle\/input\/lego-v1-train-test\/LEGO brick images v1\/train'))\nprint(os.listdir('\/kaggle\/input\/lego-v1-train-test\/LEGO brick images v1\/test'))","bd94e2bc":"data_dir= r'\/kaggle\/input\/lego-v1-train-test\/LEGO brick images v1\/' ","7339f712":"import pandas as pd\nimport numpy as np\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nfrom matplotlib.image import imread\n","61f7c4eb":"test_path=data_dir+'\/test\/'\ntrain_path=data_dir+'\/train\/'","d15653ae":"os.listdir(train_path)\n","9d6a3f81":"os.listdir(train_path+'11214 Bush 3M friction with Cross axle')\nlen(os.listdir(train_path+'11214 Bush 3M friction with Cross axle'))","288f02ad":"os.listdir(train_path+'11214 Bush 3M friction with Cross axle')[0]","aaecb2e8":"Example_one_image=train_path+'11214 Bush 3M friction with Cross axle'+'\/201706171006-0002.png' ","81ca9c8f":"imread(Example_one_image).shape","d065f9ce":"plt.imshow(imread(Example_one_image))","e2de90bd":"image_shape= (100,100,1) #in order to make computation faster, reduce the size of images","c3a9fa75":"from tensorflow.keras.preprocessing.image import ImageDataGenerator","a5808ec4":"image_gen = ImageDataGenerator(rescale=1\/255,rotation_range=90,width_shift_range=0.05,height_shift_range=0.05,shear_range=0.1,zoom_range=0.1,horizontal_flip=True,fill_mode='nearest') \n","652afabb":"plt.imshow(imread(Example_one_image))","f5eac8ea":"plt.imshow(image_gen.random_transform(imread(Example_one_image))) ","cdc4a2c3":"image_gen.flow_from_directory(train_path)\nimage_gen.flow_from_directory(test_path)","df97fbad":"train_image_gen = image_gen.flow_from_directory(train_path,target_size=(100,100),color_mode='grayscale',batch_size=16,class_mode='categorical')         \n\n","41e7603b":"test_image_gen = image_gen.flow_from_directory(test_path,\n                                               target_size=(100,100),\n                                               color_mode='grayscale',\n                                               batch_size=16,\n                                               class_mode='categorical',\n                                               shuffle=False)","d3242032":"train_image_gen.class_indices ","4b4b3347":"from tensorflow.keras.models import Sequential\nfrom tensorflow.keras.layers import Activation, Dropout, Flatten, Dense, Conv2D, MaxPooling2D","02377cd9":"model = Sequential()\n\nmodel.add(Conv2D(filters=32, kernel_size=(4,4),input_shape=image_shape, activation='relu',))\nmodel.add(MaxPooling2D(pool_size=(2, 2)))\n\nmodel.add(Conv2D(filters=64, kernel_size=(4,4),input_shape=image_shape, activation='relu',))\nmodel.add(MaxPooling2D(pool_size=(2, 2)))\n\nmodel.add(Conv2D(filters=64, kernel_size=(4,4),input_shape=image_shape, activation='relu',))\nmodel.add(MaxPooling2D(pool_size=(2, 2)))\n\nmodel.add(Flatten())\n\nmodel.add(Dense(256))   \nmodel.add(Activation('relu'))\nmodel.add(Dropout(0.5))\n\n\nmodel.add(Dense(16))\nmodel.add(Activation('softmax'))      \n\n\nmodel.compile(loss='categorical_crossentropy',optimizer='adam',metrics=['accuracy'])\nmodel.summary()\n","4c35d1f9":"from tensorflow.keras.callbacks import EarlyStopping\nearly_stop = EarlyStopping(monitor='val_loss',patience=5)","74aac78d":"model.fit_generator(train_image_gen,epochs=25, validation_data=test_image_gen, callbacks=[early_stop])","2ebfc96b":"model.metrics_names\nmodel.evaluate_generator(test_image_gen) ","588228f8":"losses = pd.DataFrame(model.history.history)\nlosses[['loss','val_loss']].plot()\nlosses[['accuracy','val_accuracy']].plot()","dbbbcf37":"pred_probabilities = model.predict_generator(test_image_gen) ","94912b23":"predictions = pred_probabilities > 0.5\npredictions","e38f9363":"Hello, I want to share my humble work regarding this dataset. I tried to build image multiclass classifier using CNNs. In this project I used ImageDataGenerator from keras to generate \"dummy\" images. This method is a solution to deal with limited image samples or limited storage in your pc. "}}