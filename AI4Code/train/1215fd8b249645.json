{"cell_type":{"036f2781":"code","768ad629":"code","c33acd96":"code","b16f4398":"code","42d2b982":"code","9b22e3dc":"code","53bb59fe":"code","3a58bbf8":"code","532aa067":"code","94988d8c":"code","d489b4c5":"code","702d1267":"code","5111d445":"code","681bb0ce":"code","4a3092d4":"code","d2f264a8":"code","0f3850ba":"code","177c1cd7":"code","b99b41c8":"code","59913a3e":"code","c2b1a10d":"code","c59d064f":"markdown","3a1466cd":"markdown","a61b5b92":"markdown","29278656":"markdown"},"source":{"036f2781":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n        \nimport plotly.express as px\nimport seaborn as sns\nimport matplotlib.pyplot as plt","768ad629":"players = pd.read_csv(\"\/kaggle\/input\/nfl-big-data-bowl-2021\/players.csv\")\nplayers.head()","c33acd96":"fig = px.histogram(players, x=\"weight\",width=600,height=500,nbins=50,\n                   title='Players weight distribution')\nfig.show()","b16f4398":"players.height = players.height.str.replace('-','*12+').apply(lambda x: eval(x))\ndf = players.groupby('height')['nflId'].count().reset_index(name = 'counts')\ndf = df.sort_values(by = 'counts', ascending = False)\nfig = px.bar(df, x='height', y='counts', color = 'height',width=600,height=500,\n             title='Players height distribution')\nfig.show()","42d2b982":"df = players.groupby('position')['nflId'].count().reset_index(name = 'counts')\ndf = df.sort_values(by  = 'counts', ascending = False)\nfig = px.bar(df, y='position', x='counts', color = 'position',width=600,height=500,\n            title=' Top Position by number of players')\nfig.show()","9b22e3dc":"players.birthDate = pd.to_datetime(players.birthDate)\nplayers['birthyear'] = players['birthDate'].dt.year\ndf = players.groupby('birthyear')['nflId'].count().reset_index(name = 'counts')\nfig = px.bar(df, x='birthyear', y='counts', color = 'birthyear',width=600,height=500\n            ,title='Players Birthyear distribution')\nfig.show()","53bb59fe":"games = pd.read_csv('\/kaggle\/input\/nfl-big-data-bowl-2021\/games.csv')\ngames.head()","3a58bbf8":"df= games['gameDate'].value_counts().reset_index()\ndf.columns = ['Date' , \"Games\"]\ndf= df.sort_values('Games' , ascending = True)\n\nfig= px.bar(df,y = 'Date',x = 'Games',orientation = 'h',color = 'Games',height=500,width=600\n             ,title = 'Number of games for every Date')\nfig.show()\n\nfig= px.line(df, x='Date',y=\"Games\",title='Line Plot',height=500,width=600)\nfig.show()","532aa067":"df= games['gameTimeEastern'].value_counts().reset_index()\ndf.columns = ['Time' , 'Games']\ndf= df.sort_values('Games')\n\nfig = px.bar(df, x = 'Games',y = 'Time',color = 'Games',orientation = 'h',height = 500,width = 600\n            ,title = 'Number of games for every Time')\nfig.show()\n\nfig = px.line(df, x='Time',y=\"Games\",  title='line plot',height = 500,width = 600)\nfig.show()","94988d8c":"df= games['homeTeamAbbr'].value_counts().reset_index()\ndf.columns = ['Team', 'Games']\ndf= df.sort_values('Games')\n\nfig = px.bar(df, y='Team', x=\"Games\", orientation='h',color = 'Games',\n             title='Number of games for every team (home)', height=500, width=600)\nfig.show()","d489b4c5":"df= games['visitorTeamAbbr'].value_counts().reset_index()\ndf.columns = ['Team', 'Games']\ndf = df.sort_values('Games')\n\nfig = px.bar(df, y='Team', x=\"Games\", orientation='h',color='Team', \n             title='Number of games for every team (Visitor)', height=500, width=600)\nfig.show()","702d1267":"df= games['week'].value_counts().reset_index()\ndf.columns = ['Week_Numeric', 'Games']\ndf = df.sort_values('Games')\n\nfig = px.bar(df, y='Week_Numeric', x=\"Games\",orientation='h',color = 'Games',\n             title='Number of games for every week', height=500, width=600)\nfig.show()","5111d445":"def uni(df,col,v,hue =None):\n    sns.set(style=\"darkgrid\")\n    \n    if v == 0:\n        fig, ax=plt.subplots(nrows =1,ncols=3,figsize=(20,8))\n        ax[0].set_title(\"Distribution Plot\")\n        sns.distplot(df[col],ax=ax[0], color=\"#da0463\")\n        plt.yscale('log')\n        ax[1].set_title(\"Violin Plot\")\n        sns.violinplot(data =df, x=col,ax=ax[1], inner=\"quartile\", color=\"#f85959\")\n        plt.yscale('log')\n        ax[2].set_title(\"Box Plot\")\n        sns.boxplot(data =df, x=col,ax=ax[2],orient='v', color=\"#d89cf6\")\n        plt.yscale('log')\n        \n    if v == 1:\n        temp = pd.Series(data = hue)\n        fig, ax = plt.subplots()\n        width = len(df[col].unique()) + 6 + 4*len(temp.unique())\n        fig.set_size_inches(width , 7)\n        ax = sns.countplot(data = df, x= col, color=\"#4CB391\", order=df[col].value_counts().index,hue = hue) \n        \n        if len(temp.unique()) > 0:\n            for p in ax.patches:\n                ax.annotate('{:1.1f}%'.format((p.get_height()*100)\/float(len(loan))), (p.get_x()+0.05, p.get_height()+20))  \n        else:\n            for p in ax.patches:\n                ax.annotate(p.get_height(), (p.get_x()+0.32, p.get_height()+20)) \n        del temp\n    else:\n        exit     \n    plt.show()","681bb0ce":"players[\"WeightKg\"] = players[\"weight\"]*0.45359237\nuni(df=players,col='WeightKg',v=0)\nuni(df=players,col='height',v=0)","4a3092d4":"df= players.collegeName.value_counts().reset_index()\ndf.columns = ['collegeName' , 'Players']\ndf.sort_values('Players' , inplace=True)\n\nfig = px.bar(df.tail(20),y= 'Players',x= 'collegeName',\n             title = 'Top 20 colleges by number of Players',color = 'Players',width=600,height=500)\nfig.show()","d2f264a8":"plays = pd.read_csv(\"\/kaggle\/input\/nfl-big-data-bowl-2021\/plays.csv\")\nplays.head()","0f3850ba":"df = plays.groupby(\"isDefensivePI\")['playId'].count().reset_index(name = 'counts')\nfig = px.pie(df, values='counts', names='isDefensivePI', \n             title='Defensive Count',height=600,width=600)\nfig.show()","177c1cd7":"df= plays['offenseFormation'].value_counts().reset_index()\ndf.columns = ['offenseFormation', 'plays']\ndf= df.sort_values('plays')\n\nfig = px.pie(df, names='offenseFormation', values=\"plays\",\n             title='Plays offense formation type',height=600,width=600)\nfig.show()","b99b41c8":"plays = pd.read_csv(\"\/kaggle\/input\/nfl-big-data-bowl-2021\/plays.csv\")\nim = plays[\"passResult\"].value_counts()\ndf = pd.DataFrame({'labels': ['Complete Pass', 'Incomplete pass', 'Quarterback sack', 'Intercepted pass', 'R'],'values': im.values})\nfig=px.pie(df,labels='labels',values='values', title='Pass Result Distribution', hole = 0.5,height=600,width=600)\nfig.show()","59913a3e":"im = plays[\"playType\"].value_counts()\ndf = pd.DataFrame({'labels': ['Pass', 'Sack', 'Unknown'],'values': im.values})\nfig=px.pie(df,labels='labels',values='values', \n           title='Play Type Distribution', hole = 0.5,height=600,width=600)\nfig.show()","c2b1a10d":"df= plays['possessionTeam'].value_counts().reset_index()\ndf.columns = ['team', 'plays']\ndf = df.sort_values('plays')\n\nfig = px.bar(df, y='team', x=\"plays\", orientation='h', color = 'plays',\n             title='Number of plays for every team',height=800,width=600)\nfig.show()","c59d064f":"# **Game Data**","3a1466cd":"# **Univariate Analysis for Player Height and Weight**","a61b5b92":"# **Play Data**","29278656":"# **Player Data**"}}