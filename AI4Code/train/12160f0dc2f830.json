{"cell_type":{"8e0806c9":"code","21d49101":"code","6c51aa19":"code","3d597a5e":"code","4c703709":"code","5b9777c2":"code","5a8b7b31":"code","d330dfeb":"code","494b9adf":"code","fa2a428f":"code","dca2cd8c":"code","ca0a6a0c":"code","03cc321d":"code","a316f7d8":"code","37503453":"code","ae21716f":"code","80b81c13":"code","a6c767fc":"code","8b76f6e3":"code","9ef86fdc":"code","d9a43852":"code","1cfa9937":"code","51d70445":"code","5f44b768":"code","d748b5d8":"code","a35045de":"code","e1e95db9":"code","26db7bc8":"code","cb9ddaed":"code","bdcde715":"code","cdd9840f":"code","cfd156ac":"code","d08724fa":"code","7c1a11c2":"code","77620877":"code","07ed8974":"code","cdcb5482":"code","5ce7359f":"code","ea863a2b":"code","5c03c37c":"code","d24ba9e0":"code","f20f9a70":"code","69842660":"code","e604232d":"code","f5147bf9":"code","7f3b1da4":"code","2f83c646":"code","f4c8e0a7":"code","c976f3c8":"code","0e1e7183":"code","dba2bba3":"code","3d826875":"code","873c538b":"code","53527911":"code","5a705144":"code","032139fc":"code","4340d907":"code","9dea0566":"code","4f355954":"code","ae8cefc3":"code","ceb2aa4d":"code","b0244cbe":"code","1f3507b4":"code","f1da8e2b":"code","39a5b484":"code","9f4f4ca2":"code","05168938":"code","f0f5db96":"code","27454e57":"code","ce5a3df4":"code","f45413b2":"code","23ca24ba":"code","e7ff1c05":"code","d8c4dd32":"code","96c7d6d0":"code","c4c8e6e8":"code","730712db":"code","59b4c610":"code","89cc5ce1":"code","5ad60bb1":"code","49fa1913":"code","f9cb0f55":"code","a480d4cf":"code","5fddda9b":"code","9cdb6d3e":"code","15c2ad27":"code","2c4ace4d":"code","7e8cc371":"code","c132f420":"code","e7952300":"code","7b829608":"code","695af9a6":"code","732906b4":"code","78d0ed56":"code","7c9b66b3":"markdown","7a5668eb":"markdown","ca07fa07":"markdown","06114119":"markdown","28d8984d":"markdown","7e79d093":"markdown","92d4ff09":"markdown","f35b5d02":"markdown","df02f984":"markdown","a7cfb9c7":"markdown","15b407e5":"markdown","750b877d":"markdown","933cd842":"markdown","c0087c7d":"markdown","d3b9c4a6":"markdown","c8510f72":"markdown","e602703f":"markdown","e3a7c753":"markdown","388dc0ba":"markdown","fadc0d87":"markdown","55d3b2e7":"markdown","4b596887":"markdown","9dadbb6e":"markdown","542be9b1":"markdown","d319dd2a":"markdown","6c6dd90b":"markdown","99041681":"markdown"},"source":{"8e0806c9":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","21d49101":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport nltk\nfrom nltk.tokenize import word_tokenize\nfrom nltk.corpus import stopwords\nimport string","6c51aa19":"df = pd.read_csv('..\/input\/twitter-sample-dataset\/twitter dataset.csv',encoding='iso-8859-1')\ndf","3d597a5e":"df.info()","4c703709":"df = df.drop(['gender_gold','profile_yn_gold','tweet_coord','tweet_id','tweet_location','user_timezone'],axis = 1)\ndf.head()","5b9777c2":"df.info()","5a8b7b31":"df['gender'].unique()","d330dfeb":"df = df[df['gender'] != 'nan']\ndf.info()","494b9adf":"df = df.dropna(subset = ['gender'])\ndf.info()","fa2a428f":"df = df.replace(np.nan, '', regex = True)\ndf.info()","dca2cd8c":"df = df[df['gender'] != 'unknown']\ndf['gender'].unique()","ca0a6a0c":"df.shape","03cc321d":"df = df.drop(['_unit_state', 'created', 'tweet_created', 'sidebar_color', 'link_color', 'profileimage', '_last_judgment_at', '_trusted_judgments'],axis = 1)\ndf.head()","a316f7d8":"df.shape","37503453":"from sklearn.preprocessing import LabelEncoder\nlabelen = LabelEncoder()","ae21716f":"df['gender1'] = labelen.fit_transform(df['gender'])\ndf['profile_yn1'] = labelen.fit_transform(df['profile_yn'])\ndf.head()","80b81c13":"df['gender1'].value_counts()","a6c767fc":"df.describe()","8b76f6e3":"df = df.sort_values('gender:confidence', ascending = True)\ndf","9ef86fdc":"fig, ax = plt.subplots(figsize=(15,6))\nax.scatter(df['gender:confidence'], df['gender1'])\nax.set_xlabel('Gender Confidence')\nax.set_ylabel('gender')\nplt.show()","d9a43852":"df = df[df['gender:confidence']>=0.6]\ndf","1cfa9937":"df = df.sort_values('tweet_count', ascending = False)\ndf","51d70445":"df = df[df['tweet_count']>=1000]\ndf","5f44b768":"df.describe()","d748b5d8":"import seaborn as sb","a35045de":"sb.boxplot(x=df['tweet_count'])","e1e95db9":"fig, ax = plt.subplots(figsize=(15,6))\nax.scatter(df['tweet_count'], df['gender1'])\nax.set_xlabel('Number of Tweets')\nax.set_ylabel('gender')\nplt.show()","26db7bc8":"df = df[df['tweet_count']<=500000]\ndf","cb9ddaed":"df['gender1'].value_counts()","bdcde715":"male_df = df[df['gender1'] == 1][:4903]\nfemale_df = df[df['gender1'] == 2]\nfemale_df.shape,male_df.shape\n\ndf = male_df\ndf = df.append(female_df)","cdd9840f":"df.shape","cfd156ac":"df['gender1'].value_counts()","d08724fa":"df.describe()","7c1a11c2":"tweets = list(df['text'])\ntweets[5]","77620877":"def strip_all_entities(text):\n    words = []\n    entity_prefixes = ['@','#','\\\\']\n\n    for word in text.split():\n        word = word.strip()\n        if word:\n            if word[0] not in entity_prefixes:\n                words.append(word)\n    return ' '.join(words)\n\n\nfor i in range(0,len(tweets)):\n    tweets[i] = tweets[i].lower()\n    tweets[i] = strip_all_entities(tweets[i])\n\ntweets[5]","07ed8974":"def remove_links(text):\n    words = []\n    for word in text.split():\n        if not 'https' in word:\n            words.append(word)\n    return ' '.join(words)\n\n\nfor i in range(0,len(tweets)):\n    tweets[i] = remove_links(tweets[i])\n    tweets[i] = tweets[i].replace(\"[^a-zA-Z#]\",\" \")\ntweets[0:5]","cdcb5482":"def remove_punc(text):\n    words = nltk.word_tokenize(text)\n    words=[word for word in words if word.isalpha()]\n    return ' '.join(words)\n\nfor i in range(0,len(tweets)):\n    tweets[i] = remove_punc(tweets[i])\n\ntweets[0:10]","5ce7359f":"stop_words = set(stopwords.words('english'))\n\ndef remove_stopwords(text):\n    words = nltk.word_tokenize(text)\n    words = [word for word in words if word not in stop_words]\n    return ' '.join(words)\n\nfor i in range(0,len(tweets)):\n    tweets[i] = remove_stopwords(tweets[i])\n\ntweets[0:10]","ea863a2b":"from nltk.stem import WordNetLemmatizer\n\nlemm = WordNetLemmatizer()\n\ndef get_root_words(text):\n    words = nltk.word_tokenize(text)\n    words = [lemm.lemmatize(word) for word in words]\n    return \" \".join(words)\n\nfor i in range(0,len(tweets)):\n    tweets[i] = get_root_words(tweets[i])\n\ntweets[0:10]","5c03c37c":"df['tweets'] = tweets\n\ndf.head()","d24ba9e0":"df.info()","f20f9a70":"import seaborn as sb\n\nplt.subplots(figsize=(20,15))\nsb.heatmap(df.corr(), annot=True)","69842660":"df.to_csv('twitter dataset_final.csv')\ndf","e604232d":"df.columns","f5147bf9":"df.info()","7f3b1da4":"X = df[['gender:confidence','fav_number', 'retweet_count', 'tweet_count']].values\nY = df[['gender1']].values","2f83c646":"from sklearn.model_selection import train_test_split","f4c8e0a7":"X_train, X_test, Y_train, Y_test = train_test_split(X, Y, test_size = 0.2, random_state = 0)","c976f3c8":"X_train.shape, X_test.shape, Y_train.shape, Y_test.shape","0e1e7183":"from sklearn.linear_model import LogisticRegression","dba2bba3":"lr = LogisticRegression()","3d826875":"lr.fit(X_train, Y_train)","873c538b":"lr.score(X_test, Y_test)","53527911":"from sklearn.tree import DecisionTreeClassifier ","5a705144":"dtc=DecisionTreeClassifier(random_state = 0)","032139fc":"dtc.fit(X_train,Y_train)","4340d907":"dtc.score(X_test,Y_test)","9dea0566":"from sklearn.naive_bayes import GaussianNB","4f355954":"gnb = GaussianNB()\ngnb.fit(X_train,Y_train)","ae8cefc3":"gnb.score(X_test,Y_test)","ceb2aa4d":"from sklearn.ensemble import RandomForestClassifier","b0244cbe":"rf = RandomForestClassifier(random_state = 0)\nrf.fit(X_train,Y_train)","1f3507b4":"rf.score(X_test,Y_test)","f1da8e2b":"from sklearn.neighbors import KNeighborsClassifier","39a5b484":"knn = KNeighborsClassifier()","9f4f4ca2":"knn.fit(X_train,Y_train)","05168938":"knn.score(X_test,Y_test)","f0f5db96":"from sklearn.ensemble import VotingClassifier","27454e57":"clf1 = LogisticRegression(multi_class = 'multinomial', random_state = 0)\nclf2 = RandomForestClassifier(n_estimators = 50, random_state = 0)\nclf3 = DecisionTreeClassifier(random_state = 0)","ce5a3df4":"vc = VotingClassifier(estimators=[('lr', clf1), ('rf', clf2), ('dtc', clf3)], voting='hard')\nvc.fit(X_train,Y_train)","f45413b2":"vc.score(X_test,Y_test)","23ca24ba":"from sklearn.feature_extraction.text import CountVectorizer","e7ff1c05":"cv = CountVectorizer(ngram_range = (1,3),max_features = 10000)\n\nX = cv.fit_transform(df['tweets'])\n\ndf['gender'].unique()","d8c4dd32":"y = df['gender1']","96c7d6d0":"X_train,X_test,y_train,y_test = train_test_split(X,y,test_size = 0.2,random_state = 0)","c4c8e6e8":"from sklearn.naive_bayes import MultinomialNB\n\nnb = MultinomialNB()\nnb.fit(X_train,y_train)\npred1 = nb.predict(X_test)\n\nfrom sklearn.metrics import accuracy_score\naccuracy_score(pred1,y_test)","730712db":"dtc.fit(X_train,y_train)\npred2 = dtc.predict(X_test)\n\naccuracy_score(pred2,y_test)","59b4c610":"rf.fit(X_train,y_train)\npred3 = rf.predict(X_test)\n\naccuracy_score(pred3,y_test)","89cc5ce1":"X_test = X_test.toarray()\nX_train = X_train.toarray()\nlr.fit(X_train,y_train)\npred5 = lr.predict(X_test)\n\naccuracy_score(pred5,y_test)","5ad60bb1":"clf1 = LogisticRegression(multi_class='multinomial', random_state=0)\nclf2 = RandomForestClassifier(n_estimators=50, random_state=0)\nclf3 = MultinomialNB()\n\nvc = VotingClassifier(estimators=[('lr', clf1), ('rf', clf2), ('mnb', clf3)], voting='hard')\nvc.fit(X_train,y_train)\npred6 = vc.predict(X_test)\n\naccuracy_score(pred6,y_test)","49fa1913":"from sklearn.feature_extraction.text import CountVectorizer\n\nfrom yellowbrick.text import FreqDistVisualizer","f9cb0f55":"male_df = df[df['gender'] == 'male']\nfemale_df = df[df['gender'] == 'female']","a480d4cf":"cvm = CountVectorizer()\ncvf = CountVectorizer()\n\nXm = cvm.fit_transform(male_df['tweets'])\nXf = cvf.fit_transform(female_df['tweets'])","5fddda9b":"featuresm   = cvm.get_feature_names()\n\nvisualizerm = FreqDistVisualizer(features=featuresm, orient='v',size=(1080, 720),n = 100)\nvisualizerm.fit(Xm)\nvisualizerm.show()","9cdb6d3e":"featuresf   = cvf.get_feature_names()\n\nvisualizerf = FreqDistVisualizer(features=featuresf, orient='v',size=(1080, 720),n = 100)\nvisualizerf.fit(Xf)\nvisualizerm.show()","15c2ad27":"df['fav_number']","2c4ace4d":"import sympy as sp","7e8cc371":"lst=[]\nfor i in df['fav_number']:\n    if sp.isprime(i)==True:\n        lst.append('1')\n    else:\n        lst.append('0')","c132f420":"lst","e7952300":"arr=np.asarray(lst, dtype=np.int64)\narr","7b829608":"df['prime_numbers']=arr\ndf","695af9a6":"df.info()","732906b4":"df=df[df['prime_numbers']==1]\ndf","78d0ed56":"df['gender'].value_counts()","7c9b66b3":"### Multinomial Naive-Bayes ","7a5668eb":"#### 0 indicates not a prime number","ca07fa07":"# Q.1:What are the most common emotions\/words used by Males and Females?","06114119":"### Decision Tree Classifier","28d8984d":"#  Balancing the Dataset","7e79d093":"## DTC","92d4ff09":"## Considering only Prime numbers ","f35b5d02":"# Feature Selection","df02f984":"## Cleaning the tweet text by Natural Language Processing using the Natural Language Toolkit or NLTK ","a7cfb9c7":"### Random Forest Classifier","15b407e5":"## Voting Classifier for Ensemble Learning","750b877d":"## Adding a new Column indicating whether fav_number is Prime or not","933cd842":"# Building a Model which predicts the gender based on the tweet text\n## Here I used the following algorithms:\n### 1. Multinomial Naive-Bayes\n### 2. Decision Tree Classifier\n### 3. Random Forest Classifier\n### 4. Gaussian Naive-Bayes\n### 5. Logistic Regression\n### 6. Voting Classifier for ensemble modelling","c0087c7d":" ## Logistic Regression","d3b9c4a6":"# Label Encoding","c8510f72":"I have done the modelling in two ways. One, using numerical values only- gender:confidence, fav_number, retweet_count, and tweet_count, and the second, using tweet text and NLP.****","e602703f":"### The 5 most common words used by females are 'like', 'get', 'one', 'love', 'day'.\n### The 5 most common words used by males are 'like', 'get', 'one', 'time', 'go'.","e3a7c753":"# Building a Model which predicts the gender based on the numerical values given in the data\n## Here we use the following algorithms:\n### 1. Logistic Regression\n### 2. Decision Tree Classifier\n### 3. Gaussian Naive-Bayes\n### 4. Random Forest Classifier\n### 5. K-Nearest Neighbours\n### 6. Voting Classifier for ensemble modelling","388dc0ba":"## KNN","fadc0d87":"#### 1 indicates prime number ","55d3b2e7":"### Voting Classifier for Ensemble Modelling\n","4b596887":"#### Since number of males is greater than number of females, males prefer prime number as their favourite number more than females.","9dadbb6e":"# Data Visualization","542be9b1":"## Random Forest","d319dd2a":"# Q.2: Which gender prefers prime numbers as their favourite number?","6c6dd90b":"### Logistic Regression","99041681":"## GaussianNB"}}