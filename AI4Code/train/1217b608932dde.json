{"cell_type":{"fa63a492":"code","7f44676f":"code","0ae18d75":"code","0b3df6e2":"code","1dcec725":"code","d07e7b0b":"code","2e1e0c29":"code","98b5ffbe":"code","522f1e9a":"code","ee44b321":"code","6bfda09c":"code","92f8f4d3":"code","2ecb2888":"code","e1f82bd4":"code","847492f8":"code","57c59d1e":"code","b029c6d9":"code","feb7509e":"code","784278f5":"code","02f8bf5f":"code","81abd5ab":"code","7a71e3c1":"code","4186a5df":"code","0c644ce7":"code","aba29b41":"code","6fb15dc0":"code","6cc0d13f":"code","ba020daf":"code","86adc637":"code","98c44146":"code","c10f6b8a":"code","9f19bdd0":"code","e37c9474":"code","cfed2d7c":"code","f21ef186":"code","06e67e0e":"code","020c6f7b":"code","1d0621b6":"code","056478c2":"code","38c0a637":"code","312c6303":"code","84b434b6":"code","09565879":"code","05051244":"code","9bfd07a6":"code","bddbec91":"code","7ec367fa":"code","d7ae6dd2":"code","fc1bb14b":"code","2daf2500":"code","a661c5cf":"code","1663ce19":"code","c7e00f35":"markdown","15b5dd11":"markdown","1c6c9c4d":"markdown","0cfde8ae":"markdown","683c4f51":"markdown","3387320e":"markdown","cab2c2a5":"markdown","4720a9e8":"markdown","8961e6b0":"markdown","a95659f2":"markdown","4d7513a2":"markdown","b6496b15":"markdown","6790983f":"markdown","5dccce54":"markdown","d64a349d":"markdown","9f2d1ab0":"markdown","7481625c":"markdown","91a3f3e5":"markdown","6e392dbd":"markdown","4d5ce1c7":"markdown"},"source":{"fa63a492":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","7f44676f":"train_data = pd.read_csv('\/kaggle\/input\/titanic\/train.csv')\ntest_data = pd.read_csv('\/kaggle\/input\/titanic\/test.csv')","0ae18d75":"train_data.head()","0b3df6e2":"test_data.head()","1dcec725":"print(train_data.shape)\nprint(test_data.shape)","d07e7b0b":"from matplotlib import pyplot as plt\nimport seaborn as sns","2e1e0c29":"sex_pivot = train_data.pivot_table(index='Sex', values=\"Survived\")\nsex_pivot.plot.bar()\nplt.show()","98b5ffbe":"class_pivot = train_data.pivot_table(index='Pclass', values=\"Survived\")\nclass_pivot.plot.bar()\nplt.show()","522f1e9a":"train_data['Age'].describe()","ee44b321":"survived = train_data[train_data[\"Survived\"]==1]\nsurvived.head()","6bfda09c":"died = train_data[train_data[\"Survived\"]==0]\ndied.head()","92f8f4d3":"survived[\"Age\"].plot.hist(alpha=0.75, color='green', bins=50)\ndied[\"Age\"].plot.hist(alpha=0.25, color='red', bins=50)\nplt.legend(['Survived','Died'])\nplt.show()","2ecb2888":"sns.scatterplot(x=train_data['Survived'], y=train_data['Embarked'])","e1f82bd4":"sns.scatterplot(x=train_data['Age'], y=train_data['Embarked'])","847492f8":"sns.scatterplot(x=train_data['Pclass'], y=train_data['Embarked'])","57c59d1e":"sns.barplot(x=train_data['Age'], y=train_data['Sex'])","b029c6d9":"train_data = train_data.drop(['PassengerId'], axis = 1)","feb7509e":"train_data = train_data.drop(['Name', 'Ticket'], axis = 1)","784278f5":"train_data.head()","02f8bf5f":"train_data.shape","81abd5ab":"test_data = test_data.drop(['PassengerId', 'Name', 'Ticket'], axis = 1)","7a71e3c1":"test_data.head()","4186a5df":"test_data.shape","0c644ce7":"train_data.isnull().sum()","aba29b41":"train_data = train_data.drop(['Cabin'], axis = 1)\ntest_data = test_data.drop(['Cabin'], axis = 1)","6fb15dc0":"train_data = train_data.drop(['Embarked'], axis = 1)\n","6cc0d13f":"train_data.shape","ba020daf":"y = train_data['Survived']\ny","86adc637":"X = train_data.drop(['Survived'], axis=1)\nX.head()","98c44146":"from sklearn.model_selection import train_test_split\nX_train, X_valid, y_train, y_valid = train_test_split(X, y, train_size=0.8, test_size=0.2,\n                                                                random_state=0)\n","c10f6b8a":"X_train.head()","9f19bdd0":"X_valid.head()","e37c9474":"s = (X_train.dtypes == 'object')\nobject_cols = list(s[s].index)\n\nprint(\"Categorical variables:\")\nprint(object_cols)","cfed2d7c":"from sklearn.preprocessing import LabelEncoder\n\n# Make copy to avoid changing original data \nlabel_X_train = X_train.copy()\nlabel_X_valid = X_valid.copy()\n\n# Apply label encoder to each column with categorical data\nlabel_encoder = LabelEncoder()\nfor col in object_cols:\n    label_X_train[col] = label_encoder.fit_transform(X_train[col])\n    label_X_valid[col] = label_encoder.transform(X_valid[col])\n\n","f21ef186":"label_X_train.head()","06e67e0e":"X_train.isnull().sum()\n","020c6f7b":"X_valid.isnull().sum()","1d0621b6":"from sklearn.impute import SimpleImputer\n\n# Imputation\nmy_imputer = SimpleImputer()\nimputed_X_train = pd.DataFrame(my_imputer.fit_transform(label_X_train))\nimputed_X_valid = pd.DataFrame(my_imputer.transform(label_X_valid))\n\n# Imputation removed column names; put them back\nimputed_X_train.columns = X_train.columns\nimputed_X_valid.columns = X_valid.columns\n","056478c2":"imputed_X_train.head()","38c0a637":"imputed_X_train.isnull().sum()","312c6303":"from sklearn.linear_model import LogisticRegression # Logistic Regression\nfrom sklearn.metrics import accuracy_score  #for accuracy_score\nfrom sklearn.metrics import mean_absolute_error #evaluate the erroe\n\n\nmodel = LogisticRegression()\nmodel.fit(imputed_X_train,y_train)\nprediction_lr=model.predict(imputed_X_valid)\nprint(accuracy_score(y_valid, prediction_lr))\nprint(mean_absolute_error(y_valid, prediction_lr))","84b434b6":"from sklearn.ensemble import RandomForestClassifier\nmodel = RandomForestClassifier(n_estimators=1000)\nmodel.fit(imputed_X_train,y_train)\nprediction_rf=model.predict(imputed_X_valid)\n\nprint(accuracy_score(y_valid, prediction_rf))\nprint(mean_absolute_error(y_valid, prediction_rf))","09565879":"from sklearn.svm import SVC, LinearSVC\n\nmodel = SVC()\nmodel.fit(imputed_X_train,y_train)\nprediction_svm=model.predict(imputed_X_valid)\nprint(accuracy_score(y_valid, prediction_svm))\nprint(mean_absolute_error(y_valid, prediction_svm))","05051244":"from sklearn.discriminant_analysis import LinearDiscriminantAnalysis\nmodel= LinearDiscriminantAnalysis()\nmodel.fit(imputed_X_train,y_train)\nprediction_lda=model.predict(imputed_X_valid)\nprint(accuracy_score(y_valid, prediction_lda))\nprint(mean_absolute_error(y_valid, prediction_lda))","9bfd07a6":"categorical_cols = [cname for cname in X_train.columns if X_train[cname].nunique() < 10 and \n                        X_train[cname].dtype == \"object\"]\n\n# Select numerical columns\nnumerical_cols = [cname for cname in X_train.columns if X_train[cname].dtype in ['int64', 'float64']]\n\n# Keep selected columns only\nmy_cols = categorical_cols + numerical_cols\nX_train = X_train[my_cols].copy()\nX_valid = X_valid[my_cols].copy()","bddbec91":"from sklearn.compose import ColumnTransformer\nfrom sklearn.pipeline import Pipeline\nfrom sklearn.impute import SimpleImputer\nfrom sklearn.preprocessing import OneHotEncoder\n\n# Preprocessing for numerical data\nnumerical_transformer = SimpleImputer()\n\n# Preprocessing for categorical data\ncategorical_transformer = Pipeline(steps=[\n    ('imputer', SimpleImputer()),\n    ('onehot', OneHotEncoder(handle_unknown='ignore'))\n])\n\n# Bundle preprocessing for numerical and categorical data\npreprocessor = ColumnTransformer(\n    transformers=[\n        ('num', numerical_transformer, numerical_cols),\n        ('cat', categorical_transformer, categorical_cols)\n    ])","7ec367fa":"model = LogisticRegression()\nmy_pipeline = Pipeline(steps=[('preprocessor', preprocessor),\n                              ('model', model)\n                             ])\n\n# Preprocessing of training data, fit model \nmy_pipeline.fit(imputed_X_train, y_train)\n\n# Preprocessing of validation data, get predictions\npreds = my_pipeline.predict(imputed_X_valid)\n\n# Evaluate the model\nscore = accuracy_score(y_valid, preds)\nprint('MAE:', score)\nprint(mean_absolute_error(y_valid, prediction_lda))","d7ae6dd2":"from xgboost import XGBRegressor\nmy_model = XGBRegressor(n_estimators=1000, learning_rate=0.05, n_jobs=4)\nmy_model.fit(imputed_X_train, y_train, \n             early_stopping_rounds=5, \n             eval_set=[(imputed_X_valid, y_valid)], \n             verbose=False)","fc1bb14b":"# predictions = my_model.predict(imputed_X_valid)\n# print(accuracy_score(predictions, y_valid))","2daf2500":"train_data.shape","a661c5cf":"test_data.head()","1663ce19":"# test_data_sub = pd.read_csv('\/kaggle\/input\/titanic\/gender_submission.csv')\n# output = pd.DataFrame({'Id': test_data_sub.index, 'Survived': prediction_rf})\n# output.to_csv('submission.csv', index=False)\n# print('done!')","c7e00f35":"### show the Age of Passengers","15b5dd11":"# second model\n# RandomForestClassifier\n","1c6c9c4d":"# step 3 \n# Delete unnecessary columns","0cfde8ae":"# with pipelines\n","683c4f51":"# fourth model\n# LinearDiscriminantAnalysis\n","3387320e":"# show the shape of data","cab2c2a5":"### show the relationship between the Age of passengers and their impact on the Survived column","4720a9e8":"# step 1\n# Read the data\n","8961e6b0":"### show the relationship between the Pcalss columns and their impact on the Survived column","a95659f2":"# step 7\n# Applying differnt model into train-valid data and get the score of the best model","4d7513a2":"# step 2\n# vizualizations","b6496b15":"# show the train and test data","6790983f":"# step 5 \n# Handing the object columns","5dccce54":"# step 4\n# Break train and validation set from training data\n","d64a349d":"### show the relationship between the Sex of passengers Age column","9f2d1ab0":"# first model\n# Logistic Regression","7481625c":"### show the relationship between the Sex of passengers and their impact on the Survived column","91a3f3e5":"# step 6 \n# Handing The Missnig Value (NaN)","6e392dbd":"# third model\n# support vector machine","4d5ce1c7":"### show the impact of Embarked column with others"}}