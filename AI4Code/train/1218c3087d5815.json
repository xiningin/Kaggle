{"cell_type":{"95a9fb5a":"code","ce7ce2b2":"code","cd86d083":"code","24392473":"code","5c487b86":"code","91a824b1":"code","30087fd5":"code","dacb0915":"code","f9db6f42":"code","63d19262":"code","13ad4331":"code","e21913b5":"code","8d2478b4":"code","2a9658af":"code","9b26e75b":"code","d5824373":"code","03028352":"code","b5c7c7a5":"code","3a20f64b":"code","16efc288":"code","0e6b202d":"code","3c53fcf1":"code","602d8892":"code","05d9d2ae":"code","e3dc1277":"code","2e9685d1":"code","cac8019d":"code","7cb35e47":"code","e5d9e8bb":"code","ec53d3a7":"code","cd9873c1":"code","c0281b71":"code","2eab3001":"code","7096c06e":"code","89819abd":"code","5ea59ae1":"code","bdc88c50":"code","8308fd2a":"code","24d61f18":"markdown","4724a2a2":"markdown"},"source":{"95a9fb5a":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","ce7ce2b2":"import pandas as pd\nimport numpy as np\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n%matplotlib inline","cd86d083":"pip install openpyxl","24392473":"df_Train=pd.read_excel('\/kaggle\/input\/flight-fare-prediction-mh\/Data_Train.xlsx')\ndf_Test=pd.read_excel('\/kaggle\/input\/flight-fare-prediction-mh\/Test_set.xlsx')","5c487b86":"df_Train.head()","91a824b1":"print(df_Train.shape)\nprint(df_Test.shape)","30087fd5":"df_Big=df_Train.append(df_Test,sort=False)\ndf_Big.head()","dacb0915":"df_Big.tail()","f9db6f42":"import pandas_profiling as pp","63d19262":"pp.ProfileReport(df_Big)","13ad4331":"#Dealing with dates:\n\ndf_Big['Date']=df_Big['Date_of_Journey'].str.split('\/').str[0]\ndf_Big['Month']=df_Big['Date_of_Journey'].str.split('\/').str[1]\ndf_Big['Year']=df_Big['Date_of_Journey'].str.split('\/').str[2]","e21913b5":"df_Big.head()","8d2478b4":"df_Big.dtypes","2a9658af":"df_Big['Date']=df_Big['Date'].astype(int)\ndf_Big['Month']=df_Big['Month'].astype(int)\ndf_Big['Year']=df_Big['Year'].astype(int)","9b26e75b":"df_Big.dtypes","d5824373":"df_Big=df_Big.drop(['Date_of_Journey'],axis=1)\ndf_Big.head()","03028352":"df_Big['Arrival_Time']=df_Big['Arrival_Time'].str.split(' ').str[0]\ndf_Big.head()","b5c7c7a5":"df_Big[df_Big['Total_Stops'].isnull()]","3a20f64b":"#We can see there is only one NaN value at 9039 row, so we'll replace this the NaN value with 1-stop!\n\ndf_Big['Total_Stops']=df_Big['Total_Stops'].fillna('1 stop')\ndf_Big[df_Big['Total_Stops'].isnull()]","16efc288":"df_Big['Total_Stops']=df_Big['Total_Stops'].replace('non-stop','0 stop')\ndf_Big.head()","0e6b202d":"df_Big['Total_Stops'] = df_Big['Total_Stops'].str.split(' ').str[0]\ndf_Big['Total_Stops']=df_Big['Total_Stops'].astype(int)\ndf_Big.head()","3c53fcf1":"df_Big.dtypes","602d8892":"df_Big['Arrival_Hour'] = df_Big['Arrival_Time'].str.split(':').str[0]\ndf_Big['Arrival_Minute'] = df_Big['Arrival_Time'].str.split(':').str[1]\ndf_Big['Arrival_Hour']=df_Big['Arrival_Hour'].astype(int)\ndf_Big['Arrival_Minute']=df_Big['Arrival_Minute'].astype(int)\ndf_Big=df_Big.drop(['Arrival_Time'],axis=1)\ndf_Big.head()","05d9d2ae":"df_Big['Departure_Hour'] = df_Big['Dep_Time'] .str.split(':').str[0]\ndf_Big['Departure_Minute'] = df_Big['Dep_Time'] .str.split(':').str[1]\ndf_Big['Departure_Hour']=df_Big['Departure_Hour'].astype(int)\ndf_Big['Departure_Minute']=df_Big['Departure_Minute'].astype(int)\ndf_Big=df_Big.drop(['Dep_Time'],axis=1)\ndf_Big.head()","e3dc1277":"df_Big['Route_1']=df_Big['Route'].str.split('\u2192 ').str[0]\ndf_Big['Route_2']=df_Big['Route'].str.split('\u2192 ').str[1]\ndf_Big['Route_3']=df_Big['Route'].str.split('\u2192 ').str[2]\ndf_Big['Route_4']=df_Big['Route'].str.split('\u2192 ').str[3]\ndf_Big['Route_5']=df_Big['Route'].str.split('\u2192 ').str[4]\ndf_Big.head()","2e9685d1":"#Since the \"price\" is more like Normal Distribution, we'll just replace NaN values with the mean!\n\n\ndf_Big['Price'].fillna((df_Big['Price'].mean()),inplace=True)\ndf_Big['Route_1'].fillna(\"None\",inplace=True)\ndf_Big['Route_2'].fillna(\"None\",inplace=True)\ndf_Big['Route_3'].fillna(\"None\",inplace=True)\ndf_Big['Route_4'].fillna(\"None\",inplace=True)\ndf_Big['Route_5'].fillna(\"None\",inplace=True)\ndf_Big.head()","cac8019d":"df_Big=df_Big.drop(['Route'],axis=1)\ndf_Big=df_Big.drop(['Duration'],axis=1)\ndf_Big.head()","7cb35e47":"df_Big.isnull().sum()","e5d9e8bb":"from sklearn.preprocessing import LabelEncoder\nencoder=LabelEncoder()\ndf_Big[\"Airline\"]=encoder.fit_transform(df_Big['Airline'])\ndf_Big[\"Source\"]=encoder.fit_transform(df_Big['Source'])\ndf_Big[\"Destination\"]=encoder.fit_transform(df_Big['Destination'])\ndf_Big[\"Additional_Info\"]=encoder.fit_transform(df_Big['Additional_Info'])\ndf_Big[\"Route_1\"]=encoder.fit_transform(df_Big['Route_1'])\ndf_Big[\"Route_2\"]=encoder.fit_transform(df_Big['Route_2'])\ndf_Big[\"Route_3\"]=encoder.fit_transform(df_Big['Route_3'])\ndf_Big[\"Route_4\"]=encoder.fit_transform(df_Big['Route_4'])\ndf_Big[\"Route_5\"]=encoder.fit_transform(df_Big['Route_5'])\ndf_Big.head()","ec53d3a7":"from sklearn.linear_model import Lasso\nfrom sklearn.feature_selection import SelectFromModel\n\ndf_train=df_Big[0:10683]\ndf_test=df_Big[10683:]\n\nX=df_train.drop(['Price'],axis=1)\ny=df_train.Price\n\nfrom sklearn.model_selection import train_test_split\nX_train,X_test,y_train,y_test=train_test_split(X,y,test_size=0.3,random_state=0)\n\n#selectfrommodel(estimator), where estimator is lasso, with alpha=0.005, we can hypertune it!\nmodel=SelectFromModel(Lasso(alpha=0.005,random_state=0))\n\nmodel.fit(X_train,y_train)","cd9873c1":"model.get_support()","c0281b71":"selected_features=X_train.columns[(model.get_support())]\nselected_features","2eab3001":"X_train=X_train.drop(['Year'],axis=1)\nX_test=X_test.drop(['Year'],axis=1)","7096c06e":"from sklearn.model_selection import RandomizedSearchCV\n#Randomized Search CV\n\n# Number of trees in random forest\nn_estimators = [int(x) for x in np.linspace(start = 100, stop = 1200, num = 12)]\n# Number of features to consider at every split\nmax_features = ['auto', 'sqrt']\n# Maximum number of levels in tree\nmax_depth = [int(x) for x in np.linspace(5, 30, num = 6)]\n# max_depth.append(None)\n# Minimum number of samples required to split a node\nmin_samples_split = [2, 5, 10, 15, 100]\n# Minimum number of samples required at each leaf node\nmin_samples_leaf = [1, 2, 5, 10]\n\n# Create the random grid\nrandom_grid = {'n_estimators': n_estimators,\n               'max_features': max_features,\n               'max_depth': max_depth,\n               'min_samples_split': min_samples_split,\n               'min_samples_leaf': min_samples_leaf}\n\nprint(random_grid)","89819abd":"# Use the random grid to search for best hyperparameters\n# First create the base model to tune\nfrom sklearn.ensemble import RandomForestRegressor\nrf = RandomForestRegressor()\n# Random search of parameters, using 3 fold cross validation, \n# search across 50 different combinations\nrf_random = RandomizedSearchCV(estimator = rf, param_distributions = random_grid,scoring='neg_mean_squared_error',\n                               n_iter = 50, cv = 5, verbose=2, random_state=42, n_jobs = 1)\n\nrf_random.fit(X_train,y_train)","5ea59ae1":"y_pred=rf_random.predict(X_test)\n\nfrom sklearn.metrics import r2_score\nr2_score(y_pred,y_test)","bdc88c50":"sns.distplot(y_test-y_pred)","8308fd2a":"plt.scatter(y_test,y_pred)","24d61f18":"# Data Understanding and EDA","4724a2a2":"# Featuring Engineering"}}