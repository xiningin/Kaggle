{"cell_type":{"3a098a10":"code","82435edf":"code","12262cbd":"code","562e8f95":"code","fb618d5c":"code","e8b1c48e":"code","cd2fd6dc":"code","04db5649":"code","5763085b":"code","81a4b3ed":"code","02a6fd55":"code","0f6439c1":"code","ea79d2a1":"code","6ced7c79":"code","ddda3225":"code","3a9a1c3f":"code","37c954a0":"code","bc86d532":"code","dd3c9aa4":"code","6f8e0969":"code","58f1d0f1":"markdown","fbc758b3":"markdown","a0c20cc1":"markdown","26847dbf":"markdown","e85d20e0":"markdown","e626b7da":"markdown","e123d4ec":"markdown","411012c9":"markdown","47f2bf28":"markdown","b5e7b33c":"markdown","e1e073f2":"markdown","230fca5a":"markdown","fa867665":"markdown","9435aac8":"markdown","64f83cb9":"markdown","e4c1092c":"markdown","a0c5d3fc":"markdown","7e23f750":"markdown","bfcd9229":"markdown","35d9e4cd":"markdown"},"source":{"3a098a10":"#import packages \nimport pandas as pd\nfrom pandasql import sqldf \n#We're using plotly to graph\nimport plotly.express as px\n#This is for cleaning up the data later \nimport datetime\nimport re ","82435edf":"#Load villager data \ndf_villagers = pd.read_csv(\"..\/input\/animal-crossing\/villagers.csv\", encoding='utf-8')","12262cbd":"df_villagers.head()\ndf_villagers.drop(columns=['id', 'row_n', 'phrase', 'full_id', 'url'])","562e8f95":"species = sqldf(\"SELECT species, COUNT(species) AS size FROM df_villagers GROUP BY species ORDER BY size DESC\")\npie = px.pie(species, values='size', names='species', title='Villager Species', color_discrete_sequence=px.colors.qualitative.Dark24,)\npie.show()\n\n\nbarh = px.bar(species, x=\"size\", y=\"species\", orientation='h', color=\"size\",  title='Villager Species')\nbarh.update_layout(\n    \n    autosize=False,\n    height=800,\n)\nbarh.show()\n","fb618d5c":"gender = sqldf(\"SELECT gender, COUNT(gender) AS count FROM df_villagers GROUP BY gender ORDER BY count DESC\")\nspecies_gender = sqldf(\"SELECT species, gender, COUNT(gender) AS count FROM df_villagers GROUP BY species, gender ORDER BY count ASC\")\n\nfig = px.pie(gender, values='count', names='gender', title='Gender Breakdown')\nfig.show()\n\nbar = px.bar(species_gender, x=\"species\", y=\"count\", color=\"gender\", title=\"Gender and Species\")\nbar.show()","e8b1c48e":"personality = sqldf(\"SELECT personality, COUNT(personality) AS count FROM df_villagers GROUP by personality ORDER BY count ASC\")\nspecies_personality = sqldf(\"SELECT species, personality, COUNT(personality) AS count FROM df_villagers GROUP BY species, personality\")\n\nfig = px.pie(personality, values='count', names='personality', title='Personality Types')\nfig.show()\n\nbar = px.bar(species_personality, x=\"count\", y=\"species\", color=\"personality\", orientation='h', title='Personality and Species')\nbar.update_layout(\n    \n        autosize=False,\n    width=1000,\n    height=1000,\n)\nbar.show()","cd2fd6dc":"df_villagers.fillna({'song': 'Not available'}, inplace = True)\ndf_villagers.isnull().sum()\n\nsong = sqldf(\"SELECT species, personality, song, COUNT(song) AS count FROM df_villagers GROUP by species, personality, song\")\n\nfig = px.scatter(song, x=\"species\", y=\"personality\", size=\"count\", color=\"song\")\nfig.update_layout(\n     autosize=False,\n    width=1000,\n    height=1000,\n)\nfig.show()","04db5649":"birth_list = df_villagers['birthday'].to_list()","5763085b":"def horoscope_dates(start, end):\n    horoscope_start = datetime.datetime.strptime(start, \"%m-%d\")\n    horoscope_end = datetime.datetime.strptime(end, \"%m-%d\")\n    horoscope_interval = [horoscope_start + datetime.timedelta(days=x) for x in range(0, (horoscope_end-horoscope_start).days)]\n    \n    string_interval = []\n    final_interval = []\n    for date in horoscope_interval:\n        string_interval.append(date.strftime(\"%m-%d\"))\n        #we clean up the string here using regex and strip methods \n        string_interval = [i.lstrip(\"0\") for i in string_interval]\n        final_interval = [re.sub(r'(-0)', '-', i) for i in string_interval]\n        \n    return final_interval","81a4b3ed":"aries = horoscope_dates(\"3-21\", \"4-20\")\ntaurus = horoscope_dates(\"4-20\", \"5-21\")\ngemini = horoscope_dates(\"5-21\", \"6-22\")\ncancer = horoscope_dates(\"6-22\", \"7-23\")\nleo = horoscope_dates(\"7-23\", \"8-23\")\nvirgo = horoscope_dates(\"8-23\", \"9-23\")\nlibra = horoscope_dates(\"9-23\", \"10-23\")\nscorpio = horoscope_dates(\"10-23\", \"11-23\")\nsagittarius = horoscope_dates(\"11-23\", \"12-22\")\ncapricorn = horoscope_dates(\"12-22\", \"1-20\")\naquarius = horoscope_dates(\"1-20\", \"2-19\")\npisces = horoscope_dates(\"2-19\", \"3-21\")","02a6fd55":"star_signs = []","0f6439c1":"for birthday in birth_list: \n    if birthday in aries: \n        star_signs.append(\"Aries\")\n    elif birthday in taurus: \n        star_signs.append(\"Taurus\")\n    elif birthday in gemini: \n        star_signs.append(\"Gemini\")\n    elif birthday in cancer: \n        star_signs.append(\"Cancer\")\n    elif birthday in leo: \n        star_signs.append(\"Leo\")\n    elif birthday in virgo: \n        star_signs.append(\"Virgo\")\n    elif birthday in libra: \n        star_signs.append(\"Libra\")\n    elif birthday in scorpio: \n        star_signs.append(\"Scorpio\")\n    elif birthday in sagittarius: \n        star_signs.append(\"Sagittarius\")\n    elif birthday in aquarius: \n        star_signs.append(\"Aquarius\")\n    elif birthday in pisces: \n        star_signs.append(\"Pisces\")\n    else: \n        #Since it's at the end of the year, the function doesn't work on Capricorn \n        #You can leave it as the else statement \n        star_signs.append(\"Capricorn\")","ea79d2a1":"df_villagers['sign'] = star_signs ","6ced7c79":"sign = sqldf(\"SELECT sign, COUNT(sign) AS count FROM df_villagers GROUP BY sign\")\nsign_personality = sqldf(\"SELECT sign, personality, COUNT(sign) AS count FROM df_villagers GROUP BY sign, personality\")\nsign_personality_species = sqldf(\"SELECT species, personality, sign, COUNT(sign) AS count FROM df_villagers GROUP by species, personality, sign\")\n\nbar = px.bar(sign_personality, x=\"count\", y=\"sign\", color=\"personality\", orientation='h')\nbar.show()\n","ddda3225":"pie = px.pie(sign, values='count', names='sign', title='Horoscope Signs')\npie.show()\n\nfig = px.scatter(sign_personality_species, x=\"species\", y=\"sign\", size=\"count\", color=\"personality\", title=\"Horoscope, Personality, Species\")\n\nfig.update_layout(autosize=False,width=1000, height=1000)\nfig.show()","3a9a1c3f":"#Load items data \ndf_items = pd.read_csv(\"..\/input\/animal-crossing\/items.csv\", encoding='utf-8')","37c954a0":"df_items.head()\n#Let's drop the columns we don't need\ndf_items.drop(columns=['num_id', 'id', 'orderable', 'sources', 'customizable', 'recipe', 'recipe_id', 'games_id', 'id_full', 'image_url'])","bc86d532":"categories = sqldf(\"SELECT category, COUNT(category) AS count FROM df_items GROUP BY category ORDER BY count DESC\")\n\nfig = px.pie(categories, values='count', names='category', title='Item Categories')\nfig.update_layout(\n    \n    autosize=False,\n    width=800,\n    height=500,\n)\nfig.show()\n\nbarh = px.bar(categories, x=\"count\", y=\"category\", barmode='relative', orientation='h', title='Item Categories')\nbarh.show()","dd3c9aa4":"resale = sqldf(\"SELECT category,sell_value, buy_value from df_items\")\n#Since some items have missing values we drop those \nresale = resale.dropna()\n\n#We define resale value as the percentage of sell value over buy value\nresale['resale'] = (resale['sell_value'] \/ resale['buy_value'])*100\n\n\nresale_categories = sqldf(\"SELECT category, AVG(resale) AS avg_resale from resale GROUP BY category ORDER BY avg_resale DESC\")\nresale_categories ","6f8e0969":"bar = px.bar(resale_categories, x=\"category\", y=\"avg_resale\", color=\"avg_resale\", title='Average Resale Value by Item Category')\nbar.update_layout(\n    \n        autosize=False,\n    width=1000,\n    height=1000,\n)\nbar.show()","58f1d0f1":"# Categories \nNow we can look at the different categories of items. ","fbc758b3":"# Conclusion\nNow we're finished! This was a pretty simple overview of the data, but I hope it was interesting!","a0c20cc1":"## Loading Packages ","26847dbf":"# Personality\nUp next is personality.","e85d20e0":"# Villager Data Analysis\n\nLet's do some basic visualizations of the data found in the villagers.csv file. ","e626b7da":"Now we're going to store the intervals as horoscope sign objects (lists) using their range","e123d4ec":"# Overview \n\nRecently, I tried buying a nintendo switch to play animal crossing, but they were sold out everywhere. So I thought if I couldn\u2019t play the game now might as well do some basic analyses to prepare myself for when I could. \n\nI visualize the following:\n1. Villager Species \n2. Villager Gender\n3. Villager Personality\n4. Villager Horoscope Sign\n5. Item Categories \n6. Item Resale Value\n","411012c9":"We'll need an empty list to store the signs data before adding it to the dataframe as a column. ","47f2bf28":"First, we're going to store the birthdays into a list ","b5e7b33c":"# Horoscope Signs\nNow we want to find horoscope signs for each villager. This is a bit trickier to query through since we're not given an easy way to convert birthdays into horoscope signs. We need to make a function of our own that does that. ","e1e073f2":"# Song Choice \nI was curious about the song choice of each villager and what their personality was. ","230fca5a":"# Species\nLet's find out what species the villagers are. \n\nWe'll do this by querying with sql and then visualizing with plotly. ","fa867665":"# Resale Value\nFinally, we're going to look at resale value because we want to be cost effective with our currency. ","9435aac8":"Let's drop the columns that we don't need ","64f83cb9":"Now we just query and graph against the new data like before.","e4c1092c":"# Gender\nNow let's go deeper and look into the diversity of the populations. We'll look at gender next. ","a0c5d3fc":"Finally, we can add it as a new column\n","7e23f750":"Now let's define a function that converts two dates into a set. This set will be representative of the interval of dates that a horoscope sign is born into. \nWe're using **datetime** package to convert string into a datetime object that way we can find the difference between two dates. \n","bfcd9229":"# Items Data Analysis \nOk great! We made it through the villager.csv data, now let's take a quick look at the items.csv data. ","35d9e4cd":"Now we loop through the list that has the birthdays from the data frame and append a sign to the new list with a matching index."}}