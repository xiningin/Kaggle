{"cell_type":{"c57312c5":"code","82c345e7":"code","fd578055":"code","fe7097f1":"code","205fb69a":"code","60303cba":"code","fa0fb4cf":"code","7023d3b3":"code","95c8d819":"code","9b5636c3":"code","bc53d1ee":"code","6c6f587d":"code","a440f95e":"code","a435178c":"code","40795de7":"code","8df044c4":"code","bbab4502":"code","cc244e5d":"code","517ae437":"code","095fe98b":"code","59400a9f":"code","f9caaafe":"code","b11f8db3":"code","a8db5010":"code","9dab52dc":"code","28c804d2":"code","ddb22255":"markdown","81ef65ad":"markdown","f361c016":"markdown","82e70784":"markdown"},"source":{"c57312c5":"%matplotlib inline \nimport pandas as pd \nimport numpy as np \nimport matplotlib.pyplot as plt","82c345e7":"train_df = pd.read_csv('..\/input\/titanic\/train.csv')\ntest_df = pd.read_csv('..\/input\/titanic\/test.csv')\ntrain_df.head()","fd578055":"train_df.groupby('Sex')['Survived'].mean().plot(kind = 'bar')","fe7097f1":"data = [train_df, test_df]\n\nfor i in range(len(data)):\n    data[i] = pd.get_dummies(data[i], columns = ['Sex', 'Embarked'])\ntrain_df, test_df = data[0], data[1]\ntrain_df.head()","205fb69a":"for df in data: \n    df['Title'] = df['Name'].str.extract('([A-Za-z]+)\\.')\ntrain_df['Title'].value_counts()","60303cba":"for df in data:\n    df['Title'].replace(['Dr', 'Rev', 'Major', 'Col', 'Mlle', 'Jonkheer', 'Countess', \n                           'Ms', 'Capt', 'Sir', 'Mme','Don','Lady'], 'Other', inplace = True)\ntrain_df['Title'].value_counts()","fa0fb4cf":"median_age = dict(train_df.groupby('Title')['Age'].median())\nprint(median_age)","7023d3b3":"for title, median in median_age.items():\n    for df in data:\n        df.loc[(train_df.Age.isnull())&(df.Title== title), 'Age'] = median\n# train_df['Age'].fillna(value = train_df.groupby('Title')['Age'].median(), inplace = True)","95c8d819":"for df in data:\n    df.drop(columns = ['Cabin', 'Ticket'], inplace = True)\ntrain_df.head()","9b5636c3":"for df in data:\n    df['Title'] = df['Title'].astype('category')\n    df['Title_cat'] = df['Title'].cat.codes\n\ntrain_df.head()","bc53d1ee":"for column in ['Fare', 'Age']:\n    for df in data:\n        df['{}_range'.format(column)] = pd.qcut(train_df[column], 4, labels = [1, 2, 3, 4])\ntrain_df.head()","6c6f587d":"X = train_df.drop(columns=['PassengerId', 'Survived', 'Name', 'Age', 'Fare', 'Title'])\ny = train_df['Survived']\nX.head()","a440f95e":"from sklearn.tree import DecisionTreeClassifier \nfrom sklearn.linear_model import LogisticRegression \nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.ensemble import StackingClassifier\nfrom sklearn.ensemble import AdaBoostClassifier\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.model_selection import train_test_split","a435178c":"X_train, X_test, y_train, y_test = train_test_split(X, y)","40795de7":"by_depth = []\nfor i in range(50):\n    tree = DecisionTreeClassifier(max_depth = i + 1)\n    tree.fit(X_train, y_train)\n    \n    train_error = (tree.predict(X_train) != y_train).mean() * 100\n    test_error = (tree.predict(X_test) != y_test).mean() * 100\n    by_depth.append({'train': train_error, 'test': test_error})\n\nby_depth_df = pd.DataFrame.from_records(by_depth)\nax = by_depth_df.plot(kind = 'line')\nplt.show(ax)","8df044c4":"zoom = by_depth_df.head(10)\nzoom.plot(kind = 'line')","bbab4502":"by_depth = []\nfor i in range(50):\n    forest = RandomForestClassifier(max_depth = i + 1)\n    forest.fit(X_train, y_train)\n    \n    train_error = (forest.predict(X_train) != y_train).mean() * 100\n    test_error = (forest.predict(X_test) != y_test).mean() * 100\n    by_depth.append({'train': train_error, 'test': test_error})\n\nby_depth_df = pd.DataFrame.from_records(by_depth)\nax = by_depth_df.plot(kind = 'line')\nplt.show(ax)","cc244e5d":"zoom = by_depth_df.head(10)\nzoom.plot(kind = 'line')","517ae437":"rf_classifier = RandomForestClassifier(max_depth = 4)\nrf_classifier.fit(X_train, y_train)\nrf_classifier.score(X_test, y_test)","095fe98b":"by_neighbors = []\nfor i in range(50):\n    knn = KNeighborsClassifier(n_neighbors = i + 1)\n    knn.fit(X_train, y_train)\n    \n    train_error = (knn.predict(X_train) != y_train).mean() * 100\n    test_error = (knn.predict(X_test) != y_test).mean() * 100\n    by_neighbors.append({'train': train_error, 'test': test_error})\n\nby_neighbors_df = pd.DataFrame.from_records(by_neighbors)\nax = by_neighbors_df.plot(kind = 'line')\nplt.show(ax)","59400a9f":"knn_classifier = KNeighborsClassifier(n_neighbors = 7)\nknn_classifier.fit(X_train, y_train)\nknn_classifier.score(X_test, y_test)","f9caaafe":"logr_classifier = LogisticRegression()\nlogr_classifier.fit(X_train, y_train)\nlogr_classifier.score(X_test, y_test)","b11f8db3":"estimators = [('rf', rf_classifier), ('knn', knn_classifier), ('logr', logr_classifier)]\nstack = StackingClassifier(estimators=estimators, final_estimator=LogisticRegression())\nstack.fit(X_train, y_train)\nstack.score(X_test, y_test)","a8db5010":"ids = test_df['PassengerId']\ntest_df = test_df.drop(columns=['PassengerId', 'Name', 'Age', 'Fare', 'Title'])\npreds = stack.predict(test_df)","9dab52dc":"submission = pd.DataFrame({'PassengerId': ids, 'Survived': preds})\nsubmission.head()","28c804d2":"submission.to_csv('titanic_submission.csv', index = False)","ddb22255":"We will fill any missings in age using the median age for their title group.","81ef65ad":"### Data cleaning","f361c016":"Hey all, I have no idea what I'm doing and trying to learn play kaggle competitions.\n\nAnyone who is willing to take a look at this, I'd to have your notes and advice on how to approach these competitions. I haven't done anything like this before and have only done a little bit of self-study (from here: http:\/\/www.cs.cmu.edu\/~tom\/10701_sp11\/). So any guidance would be appreciated.","82e70784":"### Data is relatively cleaned up, let's make some predictions"}}