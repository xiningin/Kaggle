{"cell_type":{"7ada95a3":"code","676db7ed":"code","6c510e80":"code","90cfd0d1":"code","205b1f30":"code","196644e4":"code","f6c91fa2":"code","ee904254":"code","1dd31c58":"code","95e2b9bc":"code","63ef7e60":"code","ec98e8d6":"code","5899eb3a":"code","29298458":"code","11d46920":"code","8e1bf6cb":"code","1cf8b2ab":"code","e84f69bc":"code","6799d3e8":"code","8ff8eaf4":"code","f5874ed9":"code","6cb0cbb9":"code","87314816":"code","c07bce68":"code","2f91a1fb":"code","d84301f3":"code","04690411":"code","84c131cb":"code","42ebfcd4":"code","681b7e92":"code","5200cb08":"code","d5a84a62":"code","2d37e8a1":"code","e3f4bf16":"code","74399e8d":"code","cd45ff65":"code","0a5063d6":"code","f883f1b7":"code","727aa956":"code","af3b815f":"code","d699ac2a":"code","338b4d8d":"code","b09abd61":"code","890f6ac5":"code","e9c43c66":"code","9cdfd5d4":"code","d7cfffa8":"code","c3fbf4e9":"code","32eabaa1":"code","fd731588":"code","8326bdf1":"code","f929e4a6":"code","69338ffb":"code","8fcd589a":"code","37f2afde":"code","5349efb3":"code","3a73c9a8":"markdown","fd2c65ec":"markdown"},"source":{"7ada95a3":"from IPython.display import IFrame\ndisplay(IFrame(src = 'https:\/\/www.theregister.co.uk\/2019\/11\/07\/python_java_github_javascript\/', width=1000, height=700))","676db7ed":"from IPython.display import YouTubeVideo\nYouTubeVideo(\"HaSpqsKaRbo\")","6c510e80":"documentation = IFrame(src = 'https:\/\/ipywidgets.readthedocs.io\/en\/latest\/index.html', width=1000, height=600)\ndisplay(documentation)","90cfd0d1":"import ipywidgets\nimport time\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\n%matplotlib inline","205b1f30":"5 * 5","196644e4":"def f1(x):\n    \n    y = x * x\n    print(\"{0} * {0} = {1}\".format(x, y))","f6c91fa2":"f1(3)","ee904254":"ipywidgets.interact(f1, x = 10);","1dd31c58":"@ipywidgets.interact(x = 10, y = 10)\ndef f2(x, y):\n    z = x * y\n    print(\"{0} * {1} = {2}\".format(x, y, z))","95e2b9bc":"def myPlot(frequency = 2, color = 'blue', lw = 4, grid = True):\n    \"\"\"\n    plots cos(pi * f * x)\n    \"\"\"\n    \n    x = np.linspace(-3, 3, 1000)\n    fig, ax = plt.subplots(1, 1, figsize = (6, 4))\n    ax.plot(x, np.cos(np.pi * frequency * x), lw = lw, color = color)\n    ax.grid(grid)\n    plt.title(\"plot of cos(pi * f * x)\", fontdict = {\"size\" : 20})\n    \nmyPlot()","63ef7e60":"ipywidgets.interact(myPlot, color = ['blue', 'red', 'green'], lw = (1, 10));","ec98e8d6":"ipywidgets.interact_manual(myPlot, color = ['blue', 'red', 'green'], lw = range(1, 10));","5899eb3a":"from sklearn.datasets import load_boston\nboston = load_boston()\n\nprint(boston.DESCR)\n\nboston_df = pd.DataFrame(boston.data, columns = boston.feature_names)\nboston_df[\"PRICE\"] = boston.target\nboston_df.head(10)","29298458":"def filterColumn(column, threshold):\n    \n    boston_df_select = boston_df.loc[boston_df[column] > threshold]\n    msg = \"There are {:,} records for {} > {:,}\".format(boston_df_select.shape[0], column, threshold)\n    \n    print(\"{0}\\n{1}\\n{0}\".format(\"=\" * len(msg), msg))\n    display(boston_df_select.head(10))","11d46920":"filterColumn(\"RM\", 5)","8e1bf6cb":"ipywidgets.interact(filterColumn, column = list(boston_df.columns), threshold = 30);","1cf8b2ab":"col_widget = ipywidgets.Select(\n    description = \" \",\n    options = list(boston_df.columns),\n    value = list(boston_df.columns)[0],\n    layout = ipywidgets.Layout(\n        width = '200px',\n        height = '240px',\n        margin = \"0px\",\n        padding = \"0px\"))\n\nthreshold_widget = ipywidgets.FloatSlider(\n    description = \"Threshold: \",\n    value = boston_df[col_widget.value].mean(),\n    min = boston_df[col_widget.value].min(),\n    max = boston_df[col_widget.value].max())\n\nw1 = ipywidgets.interactive_output(filterColumn, {\"column\": col_widget, \"threshold\": threshold_widget})\n\nipywidgets.HBox(children = [col_widget, ipywidgets.VBox([threshold_widget, w1])], layout = ipywidgets.Layout(\n        display = 'flex',\n        flex_flow = 'row nowrap',\n        align_items = 'flex-start',\n        justify_content = 'center'))","e84f69bc":"@ipywidgets.interact\ndef calcCorr(column1 = boston_df.columns, column2 = boston_df.columns):\n    print(\"Correlation between '{}' and '{}': {:.3f}\".format(\n        column1,\n        column2,\n        boston_df[column1].corr(boston_df[column2])))","6799d3e8":"w_bins = ipywidgets.BoundedIntText(description = \"bins: \", value = 7, min = 5, max = 15, step = 1)\nw_cols = ipywidgets.Select(description = \"cols: \", \n                           options = boston_df.columns,\n                           layout = ipywidgets.Layout(\n                                width = '303px',\n                                height = '240px',\n                                margin = \"0px\",\n                                padding = \"0px\"))\n\ndef plotHist(col, bins):\n    \n    boston_df[col].plot.hist(bins = bins);\n    plt.xlabel(col)\n    plt.title(\"Histogram\")\n\nw_hist = ipywidgets.interactive_output(plotHist, {\"col\": w_cols, \"bins\": w_bins})\n\nipywidgets.HBox([ipywidgets.VBox([w_bins, w_cols]), w_hist])","8ff8eaf4":"w_floatSlider = ipywidgets.FloatSlider(\n    value = 7.5,\n    min = 5.0,\n    max = 10.0,\n    step = 0.1,\n    description = 'Input:')\n\nw_floatSlider.style.handle_color = 'lightgreen'\nw_floatSlider","f5874ed9":"w_floatSlider.value = 6.1","6cb0cbb9":"w_floatText = ipywidgets.FloatText(\n    value = 2.4,\n    step = 0.1,\n    description = 'Value')\n\nw_floatText","87314816":"w_floatText.value","c07bce68":"ipywidgets.link((w_floatSlider, 'value'), (w_floatText, 'value'))\nipywidgets.HBox([w_floatSlider, w_floatText])","2f91a1fb":"w_datePicker = ipywidgets.DatePicker(description = \"Pick a date: \")\nw_datePicker","d84301f3":"w_datePicker.value","04690411":"w_start = ipywidgets.DatePicker(description = \"Start date: \")\nw_end = ipywidgets.DatePicker(description = \"End date: \")\ndisplay(ipywidgets.VBox([w_start, w_end]))","84c131cb":"diff = (w_end.value - w_start.value).days\nprint(\"There are {} days between '{}' and '{}'\".format(diff, w_end.value, w_start.value))","42ebfcd4":"w_colorPicker = ipywidgets.ColorPicker(\n    description = \"Pick a color: \",\n    concise = False)\n\nw_colorPicker","681b7e92":"w_colorPicker.value","5200cb08":"w_checkBox = ipywidgets.Checkbox(description = \"check me, and I will return True\")\nw_checkBox","d5a84a62":"w_checkBox.value","2d37e8a1":"w_radioButtons = ipywidgets.RadioButtons(\n    options = ['Cappuccino', 'Espresso', 'Americano'],\n    value = 'Cappuccino',\n    description = 'Your Pick?')\n\nw_radioButtons","e3f4bf16":"w_radioButtons.value","74399e8d":"w_select = ipywidgets.Select(\n    options = ['Cappuccino', 'Espresso', 'Americano'],\n    value = 'Cappuccino',\n    description = 'Select:')\n\nw_select","cd45ff65":"w_select.value","0a5063d6":"w_selectMultiple = ipywidgets.SelectMultiple(\n    options = ['Cappuccino', 'Espresso', 'Americano'],\n    value = ['Cappuccino'],\n    description = 'Multi Select:')\n\nw_selectMultiple","f883f1b7":"w_selectMultiple.value","727aa956":"w_toggleButtons = ipywidgets.ToggleButtons(\n    options = ['Cappuccino', 'Espresso', 'Americano'],\n    value = 'Cappuccino',\n    button_style = 'info', # 'success', 'info', 'warning', 'danger' or ''\n    tooltips = ['Description of Cappuccino', 'Description of Espresso', 'Description of Americano'])\n\nw_toggleButtons","af3b815f":"w_toggleButtons.value","d699ac2a":"w_button = ipywidgets.Button(\n    description = \"click me!\",\n    button_style = \"info\",\n    tooltip = \"This is your tooltip\")\n\ndef onButtonClicked(change):\n    tada = \"\\U0001F389\"\n    print (\"{0}\\n{1} button was clicked! {1}\\n{0}\".format(tada * 17, tada * 4))\n    \nw_button.style.button_color = 'brown'\nw_button.style.font_weight = \"bold\"\nw_button.on_click(onButtonClicked)\nw_button","338b4d8d":"w_Text = ipywidgets.Text(\n    placeholder = 'Enter your name...',\n    description = \"my app: \")\n\ndef onSubmit(change):\n    print(\"Hello {}!\".format(w_Text.value))\n\nw_Text.on_submit(onSubmit)\nw_Text","b09abd61":"def celsiusToFahrenheit(temp):\n    return \"{:.2f}\".format(1.8 * temp + 32)\n\ndef fahrenheitToCelsius(temp):\n    return \"{:.2f}\".format((temp -32) \/ 1.8)\n\nw_celsius = ipywidgets.FloatText(\n    description = 'Celsius $^\\circ$C',\n    value = 0)\n\nw_fahrenheit = ipywidgets.FloatText(\n    description = 'Fahrenheit $^\\circ$F', \n    value = celsiusToFahrenheit(w_celsius.value))\n\ndef onCelsiusChange(change):\n    w_fahrenheit.value = celsiusToFahrenheit(change['new'])\n    \ndef onFahrenheitChange(change):\n    w_celsius.value = fahrenheitToCelsius(change['new'])\n    \nw_celsius.observe(onCelsiusChange, names = 'value')\nw_fahrenheit.observe(onFahrenheitChange, names = 'value')\n\ndisplay(w_celsius, w_fahrenheit)","890f6ac5":"w_floatRangeSlider = ipywidgets.FloatRangeSlider(\n    description = \"RangeSlider:\",\n    value = [5, 15],\n    min = 0,\n    max = 20,\n    step = 0.2, \n    orientation = \"horizontal\", # vertical\n    readout = True,\n    readout_format = \"0.1f\")\n\nw_label = ipywidgets.Label(value = \"Diff: 10\")\ndisplay(w_label)\n\ndef onChangeRange(change):\n    w_label.value = \"Diff: {:.2f}\".format(w_floatRangeSlider.upper - w_floatRangeSlider.lower)\n\nw_floatRangeSlider.observe(onChangeRange)\nw_floatRangeSlider","e9c43c66":"print(\"lower bound: {0.lower}\\nupper bound: {0.upper}\".format(w_floatRangeSlider))","9cdfd5d4":"w_password = ipywidgets.Password(\n    description = \"Enter pw: \",\n    value = \"password\"\n)\nw_password","d7cfffa8":"w_password.value","c3fbf4e9":"w_progressBar = ipywidgets.IntProgress(\n    description = \"loading...\", \n    value = 0,\n    min = 0,\n    max = 100)\ndisplay(w_progressBar)\n\nfor i in range(100):\n    w_progressBar.value = i\n    time.sleep(0.04)\n    \nw_progressBar.description = \"Done!\"","32eabaa1":"w_html = ipywidgets.HTMLMath(\n    value = r\"\"\"\n        <b>Cappuccino is bold.<\/b> <br>\n        <i>Espresso is italized.<\/i> <br>\n        <u>Americano is underlined.<\/u> <br>\n        <br>Some math: <br>\n        $$i\\hbar\\frac{\\partial}{\\partial t} \\Psi(\\mathbf{r},t) = \\left [ \\frac{-\\hbar^2}{2m}\\nabla^2 + V(\\mathbf{r},t)\\right ] \\Psi(\\mathbf{r},t)$$\"\"\",\n    description = 'HTML: ')\n\nw_html","fd731588":"w_fileUpload = ipywidgets.FileUpload(\n    accept = \".jpg\",\n    multiple = False)\n\nw_fileUpload","8326bdf1":"class addon:\n    \n    def __init__(self, name):\n        self.name = name\n        \n    def toadd(self):\n        return ipywidgets.IntSlider(description = self.name, value = 0, min = 0, max = 3)\n\nw_coffee = ipywidgets.RadioButtons(options = ['Cappuccino', 'Espresso', 'Americano'])\nw_cup = ipywidgets.Select(options = ['Small', 'Medium', 'Large', 'Extra Large'])\nw_suger = addon(\"Suger:\").toadd()\nw_milk = addon(\"Milk:\").toadd()\nw_cream = addon(\"Cream:\").toadd()\nw_smc = ipywidgets.HBox(children = [w_suger, w_milk, w_cream])\nw_pay = ipywidgets.ToggleButtons(description = \"Pay with?\", options = ['Visa', 'MasterCard', 'AmEx'], button_style = \"info\")\nw_finish = ipywidgets.Button(description = \"Finish\", button_style = \"warning\")\nw_valid = ipywidgets.Valid(description = \"All set!\", value = True)\nw_checkout = ipywidgets.HBox(children = [w_pay, w_finish], layout = ipywidgets.Layout(\n        display = 'flex',\n        flex_flow = 'row nowrap',\n        align_items = 'flex-start',\n        justify_content = 'space-between'))\n\nw_tab = ipywidgets.Tab(children = [w_coffee, w_cup, w_smc, w_checkout])\n\ndef onButtonClicked(change):\n\n    display(w_valid)\n\n    print(\"You selected {} {} with {} suger, {} milk and {} cream; paying with {}.\".format(\n        w_cup.value, \n        w_coffee.value,\n        w_suger.value,\n        w_milk.value,\n        w_cream.value,\n        w_pay.value))\n\nw_finish.on_click(onButtonClicked)\n\nw_tab.set_title(0, 'Pick your coffee:')\nw_tab.set_title(1, 'Pick your cup:')\nw_tab.set_title(2, 'Suger\/milk\/cream:')\nw_tab.set_title(3, 'Check-out:')\nw_tab","f929e4a6":"w_accordion = ipywidgets.Accordion(children = [w_coffee, w_cup, w_smc, w_checkout])\nw_accordion.set_title(0, 'Pick your coffee:')\nw_accordion.set_title(1, 'Pick your cup:')\nw_accordion.set_title(2, 'Suger\/milk\/cream:')\nw_accordion.set_title(3, 'Check-out:')\nw_accordion","69338ffb":"w_audio = ipywidgets.Audio.from_url(\"https:\/\/www.kozco.com\/tech\/piano2-CoolEdit.mp3\")\nw_audio","8fcd589a":"w_video = ipywidgets.Video.from_url(\"https:\/\/www.radiantmediaplayer.com\/media\/bbb-360p.mp4\")\nw_video","37f2afde":"w_selPic = ipywidgets.Select(options = [\"fruits\", \"girl\", \"cat\", \"pool\", \"watch\", \"peppers\"], \n        layout =ipywidgets.Layout(\n            width = '120px',\n            height = '150px',\n            margin = \"10px\",\n            padding = \"10px\"))\n\ndef disPic(url):\n    url = \"https:\/\/homepages.cae.wisc.edu\/~ece533\/images\/\" + url\n    display(ipywidgets.Image.from_url(url))\n\nw_disPic = ipywidgets.interactive_output(disPic, {\"url\": w_selPic})\n\nipywidgets.HBox([w_selPic, w_disPic], layout = ipywidgets.Layout(\n        display = 'flex',\n        flex_flow = 'row nowrap',\n        align_items = 'flex-start',\n        justify_content = 'center'))","5349efb3":"import ipyleaflet\n\nw_mapTypes = ipywidgets.Dropdown(\n    options = [\n        'Esri.WorldStreetMap',\n        'Esri.DeLorme',\n        'Esri.WorldTopoMap',\n        'Esri.WorldImagery',\n        'Esri.NatGeoWorldMap',\n        'CartoDB.Positron',\n        'CartoDB.DarkMatter',\n        'HikeBike.HikeBike',\n        'Hydda.Full',\n        'NASAGIBS.ViirsEarthAtNight2012',\n        'NASAGIBS.ModisTerraTrueColorCR',\n        'OpenStreetMap.Mapnik',\n        'OpenStreetMap.HOT',\n        'OpenTopoMap',\n        'Stamen.Toner',\n        'Stamen.Watercolor'],\n    value = 'Esri.WorldStreetMap',\n    description = 'Map type:')\n\n\ndef toggleMap(mapType):\n    m = ipyleaflet.Map(center = (43.6532, -79.3832), zoom = 6, basemap = eval(\"ipyleaflet.basemaps.\" + mapType))\n    display(m)\n    \nw_map = ipywidgets.interactive_output(toggleMap, {\"mapType\": w_mapTypes});\n\nipywidgets.VBox([w_mapTypes, w_map])","3a73c9a8":"# Bring switches, dials and knobs into your Jupyter Notebooks!\n\n<div style=\"display:flex\">\n     <div style=\"flex:1;padding-right:50px;padding-left:50px;padding-top:50px;\">\n          <img src=\"https:\/\/upload.wikimedia.org\/wikipedia\/commons\/thumb\/f\/f8\/Python_logo_and_wordmark.svg\/1920px-Python_logo_and_wordmark.svg.png\" width = 250>\n     <\/div>\n     <div style=\"flex:1;padding-left:100px;padding-top:30px;\">\n          <img src=\"https:\/\/upload.wikimedia.org\/wikipedia\/commons\/thumb\/3\/38\/Jupyter_logo.svg\/1200px-Jupyter_logo.svg.png\" width = 100>\n     <\/div>\n     <div style=\"flex:1;padding-left:200px;padding-top:40px;\">\n          <img src=\"https:\/\/cdn.freebiesupply.com\/logos\/large\/2x\/javascript-logo-png-transparent.png\" width = 100>\n     <\/div>\n<\/div>\n\n\n### Objective:\n\nThis notebook is an effort to introduce __ipywidgets__ library, and walks the reader through a few examples in which this library can be used. Any feedback is very much appreciated at Amin.Torabi@Scotiabank.com.\n\n\n### What is ipywidgets?\n\nThe ipywidgets library provides built-in controls, called widgets, to express code and visualize data in an interactive manner in the Jupyter Notebook. This will enable end users to control aspects of their visualizations by tuning switches, knobs and dials, thereby making Jupyter Notebooks a light-weight app.\nUsing ipywidgets, you do not need to re-run the same cell over and over again, each time slightly changing the input parameters to see their impact. Instead, you simply tune the widgets; to see how, read on.\n\n### How widgets work?\n\nThere are two sides to each widget:\n\n- on the back-end we have the Python objects, which handle logic and are run in the notebook kernel \n- on the front-end we have the JavaScript objects, which are the visual representation of the python objects and are run in the browser\n\nUsing ipywidgets, you only need to focus on the Python side; the JS side will be taken care of by the library.\n\n\n### How to install?\n\nipywidgets library can be installed with conda (Read more [here](https:\/\/ipywidgets.readthedocs.io\/en\/latest\/user_install.html)):\n\n`conda install -c conda-forge ipywidgets`\n\n\n### References:\n\n- Documentation: https:\/\/ipywidgets.readthedocs.io\/en\/latest\/index.html\n- GitHub: https:\/\/github.com\/jupyter-widgets\n- The following YouTube video is a 3-hour long presentation by the ipywidgets developers at 2019 SciPy Conference:","fd2c65ec":"From: https:\/\/github.com\/jupyter-widgets\/tutorial\/blob\/master\/notebooks\/00.00-introduction.ipynb\n\nJupyter widgets forms a framework for representing python objects interactively. Some large open-source interactive controls based on Jupyter widgets include:\n\n - bqplot - 2d plotting library\n - pythreejs - low-level 3d graphics library\n - ipyvolume - 3d plotting and volume rendering\n - ipyleaflet - interactive maps\n - ipywebrtc - video streaming\n - ipysheet - interactive spreadsheets"}}