{"cell_type":{"687918b5":"code","79fb3bfd":"code","8cd8085b":"code","56bbc55d":"code","d3816511":"code","8104019b":"code","723d82d7":"code","a29df445":"markdown","b358fffe":"markdown","f25c766e":"markdown","f3b0aa7e":"markdown"},"source":{"687918b5":"#codes from Rodrigo Lima  @rodrigolima82\nfrom IPython.display import Image\nImage(url = 'https:\/\/encrypted-tbn0.gstatic.com\/images?q=tbn:ANd9GcSvxG0v_4OZxepiuJVE1lTA4hdrRe5bY0yQ-OzOQzYpcdjApsXr6Q&s',width=400,height=400)","79fb3bfd":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","8cd8085b":"nRowsRead = 1000 # specify 'None' if want to read whole file\n# Results.csv may have more rows in reality, but we are only loading\/previewing the first 1000 rows\ndf = pd.read_csv('\/kaggle\/input\/questionanswer-combination\/Results.csv', delimiter=',', nrows = nRowsRead)\ndf.dataframeName = 'Results.csv'\nnRow, nCol = df.shape\nprint(f'There are {nRow} rows and {nCol} columns')","56bbc55d":"df.head()","d3816511":"df.dtypes","8104019b":"#word cloud\nfrom wordcloud import WordCloud, ImageColorGenerator\ntext = \" \".join(str(each) for each in df.question)\n# Create and generate a word cloud image:\nwordcloud = WordCloud(max_words=200, background_color=\"black\").generate(text)\nplt.figure(figsize=(10,6))\nplt.figure(figsize=(15,10))\n# Display the generated image:\nplt.imshow(wordcloud, interpolation='Bilinear')\nplt.axis(\"off\")\nplt.figure(1,figsize=(8, 8))\nplt.show()","723d82d7":"import plotly.offline as pyo\nimport plotly.graph_objs as go\nlowerdf1 = df.groupby('question').size()\/df['answer_text'].count()*100\nlabels = lowerdf1.index\nvalues = lowerdf1.values\n\n# Use `hole` to create a donut-like pie chart\nfig = go.Figure(data=[go.Pie(labels=labels, values=values, hole=.6)])\nfig.show()","a29df445":"Kaggle Notebook Runner: Mar\u00edlia Prata  @mpwolke.","b358fffe":"Image youtube.com - Since there was no Public Kernel in that Dataset I made one. Now,the Dataset has 10.0 usability score.","f25c766e":"Dataset \"Question-Answer combination (Contextual Semantic Similarity, Auto generate Text-based answers)\" by \ud835\udce5\ud835\udcee\ud835\udcee\ud835\udcfb\ud835\udcea\ud835\udcf5\ud835\udcea \ud835\udcd7\ud835\udcea\ud835\udcfb\ud835\udcf2 \ud835\udcda\ud835\udcfb\ud835\udcf2\ud835\udcfc\ud835\udcf1\ud835\udcf7\ud835\udcea https:\/\/www.kaggle.com\/veeralakrishna\/questionanswer-combination\nDataset Description:Valuelabs ML Hackathon\nAbout Problem Statement: Genre: NLP - Problem Type: Contextual Semantic Similarity, Auto-generate Text-based answers.","f3b0aa7e":"Different Pie Chart? Yes, almost everything I intend to do doesn't work as I expect."}}