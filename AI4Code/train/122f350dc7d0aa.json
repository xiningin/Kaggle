{"cell_type":{"1218eb23":"code","cba3071c":"code","f7a2b67d":"code","1bc8c8e5":"code","9bcb98c2":"code","61ab26de":"code","833bbec2":"code","fc84af47":"markdown","cdcd9d5a":"markdown","7fe5a87a":"markdown","1c0e1b0f":"markdown","c9cac9db":"markdown"},"source":{"1218eb23":"import numpy as np \nimport pandas as pd\nimport datatable as dt\nimport matplotlib.pyplot as plt\n%matplotlib inline\n\nimport warnings\nwarnings.filterwarnings('ignore')\n\nfrom sklearn.model_selection import KFold, train_test_split\nfrom sklearn.metrics import roc_auc_score\nfrom catboost import CatBoostClassifier\nfrom sklearn.preprocessing import MinMaxScaler","cba3071c":"%%time\ntrain = dt.fread('..\/input\/tabular-playground-series-nov-2021\/train.csv').to_pandas()\ntest  = dt.fread('..\/input\/tabular-playground-series-nov-2021\/test.csv').to_pandas()\nsub   = dt.fread('..\/input\/tabular-playground-series-nov-2021\/sample_submission.csv').to_pandas()","f7a2b67d":"train.drop('id',axis=1,inplace=True)\ntest.drop('id',axis=1,inplace=True)","1bc8c8e5":"y = train['target']\ntrain.drop('target',axis=1,inplace=True)","9bcb98c2":"# catboost params\ncat_params = {'iterations': 296,\n 'od_wait': 3385,\n 'learning_rate': 0.15574579120098908,\n 'reg_lambda': 0.32139709692279206,\n 'subsample': 0.8442605943226449,\n 'random_strength': 22.468752639603235,\n 'depth': 7,\n 'min_data_in_leaf': 31,\n 'leaf_estimation_iterations': 15,\n 'task_type':\"GPU\",\n 'bootstrap_type':'Poisson'\n}","61ab26de":"folds = KFold(n_splits = 5, random_state = 102021, shuffle = True)\n\npredictions = np.zeros(len(test))\ncat_oof = np.zeros(train.shape[0])\n\nfor fold, (trn_idx, val_idx) in enumerate(folds.split(train)):\n\n    X_train, X_test = train.iloc[trn_idx], train.iloc[val_idx]\n    y_train, y_test = y.iloc[trn_idx], y.iloc[val_idx]\n\n    scaler = MinMaxScaler(feature_range=(0, 1)) \n    X_train = scaler.fit_transform(X_train) \n    X_test = scaler.transform(X_test)\n    \n    model = CatBoostClassifier(**cat_params)\n    print(f\"model fit started for Fold: {fold}\")\n    model.fit(X_train, \n              y_train,\n              eval_set=[(X_test, y_test)],\n              early_stopping_rounds=400,\n              verbose=False)\n    pred = model.predict_proba(X_test)[:,1]\n    cat_oof[val_idx] = pred\n    roc = roc_auc_score(y_test, pred)\n    print(f\" roc_auc_score: {roc}\")\n    print(\"-\"*50)\n    \n    test = scaler.transform(test)\n    predictions += model.predict_proba(test)[:,1] \/ folds.n_splits ","833bbec2":"sub['target'] = predictions\nsub.to_csv(f'submission_catboost_1.csv',index = False)\nnp.savez_compressed('oof_catboost.npz', cat_oof)","fc84af47":"# Store submission and oof ","cdcd9d5a":"# 5-fold model training and prediction","7fe5a87a":"# Imports","1c0e1b0f":"# Load dataset","c9cac9db":"# Model hyperparameters"}}