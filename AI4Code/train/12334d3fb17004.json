{"cell_type":{"c016ee15":"code","e4e27125":"code","dd4f7030":"code","e0b720dc":"code","1bdd2609":"code","5d5ebb3e":"code","da3f19ee":"code","feaea330":"code","564d537e":"code","2ef636e4":"code","8da39c49":"code","9dc2234e":"code","8978e87f":"code","73d053df":"code","8112c522":"code","aeac9911":"code","36c11dac":"code","2506fe83":"code","85bf0a1c":"code","ea912be3":"code","08bb3015":"code","9beae3b7":"code","68018f9e":"code","d0c346df":"code","5cda3fa3":"code","cd3f869d":"code","ef753254":"code","b57283fa":"code","6a965be2":"code","14171b7b":"code","9512d5f9":"code","fe92f916":"code","a0d1d3a0":"code","2dadda20":"code","e344b0ee":"code","e723dacb":"code","cac32d61":"code","eff08a9c":"code","bde67a43":"code","f9b22a1c":"code","b8ae3e72":"code","d0a7bedd":"code","0d3d8022":"code","3be8b8eb":"code","99c5d804":"code","88eab73c":"code","5a2c763a":"code","9735b613":"code","8ab332d5":"code","40ad6aa1":"code","dc7b9858":"code","3b1c6d4a":"code","5821ea5b":"code","95f4c6cb":"code","f4d1c4f1":"code","2b3acf41":"code","015d125a":"code","e485d1db":"code","58f1089e":"code","55782196":"code","2e27fddf":"code","d5774031":"code","bcb0eb40":"code","90bff0c1":"code","979bdffe":"code","de09394c":"code","2356cd8c":"code","034741f4":"code","1d67a1e4":"code","4674efbb":"code","6d4cfee9":"code","ee3d8288":"code","eeab6278":"code","28f911e5":"code","d7832aca":"code","12abf7b0":"code","b4ccbe59":"code","b56b3cb1":"code","bc43bf29":"code","7a8ad470":"code","1ce1b4b3":"code","30a790ce":"code","ed4e0953":"code","116202a9":"code","ac3c80bc":"code","d831819e":"markdown","fbb683c8":"markdown","3ad2dc24":"markdown","d29a3bf4":"markdown","26bfe740":"markdown","3085652f":"markdown","3d191074":"markdown","4fd917ec":"markdown","d3b9093b":"markdown","20ebcf89":"markdown","149144bd":"markdown","877c7625":"markdown","12c356c7":"markdown","f2504253":"markdown","f5edb2c6":"markdown","a27c83e0":"markdown"},"source":{"c016ee15":"import matplotlib.pyplot as plt\nimport numpy as np\nimport pandas as pd\nfrom pprint import pprint\n%matplotlib inline\n\n# Preprocessing\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.impute import SimpleImputer\nfrom sklearn.impute import KNNImputer\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.pipeline import Pipeline\nfrom sklearn.compose import ColumnTransformer\n\n# Models\nfrom sklearn.linear_model import SGDRegressor, Lasso\nfrom sklearn.ensemble import RandomForestRegressor\nfrom xgboost import XGBRegressor\nfrom sklearn.model_selection import GridSearchCV, RandomizedSearchCV\n\n# Metrics\nfrom sklearn.metrics import mean_absolute_error","e4e27125":"df = pd.read_csv('..\/input\/how-much-did-it-rain-ii\/train.zip')","dd4f7030":"df.head()","e0b720dc":"df.shape","1bdd2609":"df.info()","5d5ebb3e":"df.groupby(['Id']).mean().head()","da3f19ee":"# Show chart with tpo ten features with missing values\nfig, ax = plt.subplots(figsize = (15, 5))\ndf_na = (df.isnull().sum() \/ len(df))\ndf_na = df_na.drop(df_na[df_na == 0].index).sort_values(ascending = False)[: 10]\nax.bar(range(df_na.size), df_na, width = 0.5)\nplt.xticks(range(df_na.size), df_na.index, rotation = 0)\nplt.ylim([0, 1])\nplt.title('Top ten features with the most missing values')\nplt.ylabel('Missing ratio')\nplt.show()","feaea330":"df.fillna(0, inplace = True)","564d537e":"df.isna().sum()","2ef636e4":"df['Ref_5x5_10th'].hist()","8da39c49":"pd.set_option('display.float_format', lambda x: '%.3f' % x)","9dc2234e":"corr_mat = df.corr()\ncorr_mat.style.background_gradient(cmap='coolwarm')","8978e87f":"f = plt.figure(figsize=(10, 10))\nplt.matshow(corr_mat, fignum=f.number)\nplt.colorbar()","73d053df":"df[[\"Expected\"]].describe()","8112c522":"# On top we can see a lot of outliers, which disturb our scores\nplt.figure(figsize=(10, 10))\nplt.scatter(np.arange(len(df[\"Expected\"].unique())), df[\"Expected\"].unique())","aeac9911":"from scipy import stats\n\nprint(stats.percentileofscore(df[\"Expected\"], 106))","36c11dac":"# Exclude the outliers\ndf.drop(df[df[\"Expected\"] >= 106].index, inplace=True)\ndf.head()","2506fe83":"# No outliers now, looks much better\nplt.figure(figsize=(15, 10))\nplt.scatter(np.arange(len(df[\"Expected\"].unique())), df[\"Expected\"].unique())","85bf0a1c":"df_grouped = pd.DataFrame(df.groupby(['Id']).mean())","ea912be3":"df_grouped.shape","08bb3015":"df_grouped.head()","9beae3b7":"target = df_grouped['Expected']","68018f9e":"target.head(10)","d0c346df":"small_df = df_grouped.sample(n = 200000, random_state = 42)","5cda3fa3":"small_df.shape","cd3f869d":"small_df.isna().sum()","ef753254":"std_scaler = StandardScaler()","b57283fa":"small_X = small_df.drop(['minutes_past', 'Expected'], axis = 1)\nsmall_y = small_df['Expected']","6a965be2":"s_X_train, s_X_test, s_y_train, s_y_test = train_test_split(small_X, small_y, test_size = 0.2, random_state = 42)","14171b7b":"s_X_train_sc = std_scaler.fit_transform(s_X_train)","9512d5f9":"s_X_test_sc = std_scaler.transform(s_X_test)","fe92f916":"s_X_train_sc.shape, s_X_test_sc.shape","a0d1d3a0":"s_y_train.shape, s_y_test.shape","2dadda20":"sgd = SGDRegressor(random_state = 42)","e344b0ee":"sgd.fit(s_X_train_sc, s_y_train)","e723dacb":"sgd.score(s_X_test_sc, s_y_test)","cac32d61":"sgd_preds = sgd.predict(s_X_test_sc)","eff08a9c":"mean_absolute_error(s_y_test, sgd_preds)","bde67a43":"rf = RandomForestRegressor(random_state = 42)","f9b22a1c":"rf.fit(s_X_train_sc, s_y_train)","b8ae3e72":"rf_preds = rf.predict(s_X_test_sc)","d0a7bedd":"mean_absolute_error(s_y_test, rf_preds)","0d3d8022":"xgb = XGBRegressor(random_state = 42)","3be8b8eb":"xgb.fit(s_X_train_sc, s_y_train)","99c5d804":"xgb_preds = xgb.predict(s_X_test_sc)","88eab73c":"mean_absolute_error(s_y_test, xgb_preds)","5a2c763a":"lasso = Lasso(random_state = 42)","9735b613":"lasso.fit(s_X_train_sc, s_y_train)","8ab332d5":"lasso_preds = lasso.predict(s_X_test_sc)","40ad6aa1":"mean_absolute_error(s_y_test, lasso_preds)","dc7b9858":"xgb_param_grid = {\"learning_rate\"    : [0.05, 0.10, 0.15, 0.20, 0.25, 0.30] ,\n                  \"max_depth\"        : [ 3, 4, 5, 6, 8, 10, 12, 15],\n                  \"min_child_weight\" : [ 1, 3, 5, 7],\n                  \"gamma\"            : [ 0.0, 0.1, 0.2 , 0.3, 0.4],\n                  \"colsample_bytree\" : [ 0.3, 0.4, 0.5 , 0.7],\n                  \"n_estimators\"     : [100, 400, 700, 1000]}","3b1c6d4a":"xgb_rscv = RandomizedSearchCV(xgb, param_distributions = xgb_param_grid, n_iter = 8, cv = 3, scoring = 'neg_mean_absolute_error', random_state = 42)","5821ea5b":"xgb_rscv.fit(s_X_train_sc, s_y_train)","95f4c6cb":"xgb_rscv.score(s_X_test_sc, s_y_test)","f4d1c4f1":"xgb_rscv.score(s_X_train_sc, s_y_train)","2b3acf41":"xgb_rscv_preds = xgb_rscv.predict(s_X_test_sc)","015d125a":"mean_absolute_error(s_y_test, xgb_rscv_preds)","e485d1db":"xgb_rscv.best_params_","58f1089e":"df_grouped = pd.DataFrame(df.groupby(['Id']).mean())","55782196":"X = df_grouped.drop(['minutes_past', 'Expected'], axis = 1)\ny = df_grouped['Expected']","2e27fddf":"X.shape, y.shape","d5774031":"std_scaler_full = StandardScaler()","bcb0eb40":"X_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.1, random_state = 42)","90bff0c1":"X_train.shape, X_test.shape, y_train.shape, y_test.shape","979bdffe":"X_train_sc = std_scaler_full.fit_transform(X_train)","de09394c":"X_test_sc = std_scaler_full.transform(X_test)","2356cd8c":"xgb_new_params = XGBRegressor(n_estimators = 100,\n                              min_child_weight = 7,\n                              max_depth = 10,\n                              learning_rate = 0.05,\n                              gamma = 0.1,\n                              colsample_bytree = 0.3,\n                              random_state = 42)","034741f4":"xgb_new_params.fit(X_train_sc, y_train)","1d67a1e4":"xgb_new_params_preds = xgb_new_params.predict(X_test_sc)","4674efbb":"mean_absolute_error(y_test, xgb_new_params_preds)","6d4cfee9":"test = pd.read_csv('..\/input\/how-much-did-it-rain-ii\/test.zip')","ee3d8288":"test.isna().sum()","eeab6278":"test.fillna(0, inplace = True)","28f911e5":"small_X.columns","d7832aca":"test.columns","12abf7b0":"test = pd.DataFrame(test.groupby(['Id']).mean())","b4ccbe59":"test.shape","b56b3cb1":"test.drop(['minutes_past'], axis = 1, inplace = True)","bc43bf29":"X_sub = std_scaler.transform(test)","7a8ad470":"X_sub.shape","1ce1b4b3":"predictions = xgb_new_params.predict(X_sub)","30a790ce":"submission = pd.DataFrame(predictions, columns = ['Expected'])","ed4e0953":"submission.index.name = 'Id'","116202a9":"submission.index = submission.index + 1","ac3c80bc":"submission.to_csv('rain_submission.csv')","d831819e":"### Let's see correlation between variables","fbb683c8":"### We have to work on grouped data (by 'Id' column)","3ad2dc24":"### Let's build new models with learned parameters on full data","d29a3bf4":"### XGB Regressor Randomized Search CV","26bfe740":"## Make predictions on test data","3085652f":"## XGB Regressor","3d191074":"## SGD","4fd917ec":"## NaN are very small values, we can fill these with 0","d3b9093b":"### XGB Regressor on full data with parameters learned during Randomized Search CV","20ebcf89":"### We can see that mean is 108.626, but 75% percentile is only 3.810. Let's check outliers.","149144bd":"## Lasso","877c7625":"# Modelling\n\n We will use SGD Regressor, RandomForestRegressor, XGBRegressor and Lasso Regression.","12c356c7":"# Prepare the data\n\nWe can use a sample of whole dataset to see which operations on data are most successful.","f2504253":"## Random Forest Regressor","f5edb2c6":"# 1. Problem definition\n\nPredicting the amount of rain based on data from radars and gauges. The results are measured by Mean Absolute Error.\n\n# 2. Data\n\nData is taken from https:\/\/www.kaggle.com\/c\/how-much-did-it-rain-ii\/data\n\n# 3. Evaluation\n\nModel will be considered good if we reach Mean Absolute Error value of 25.5.\n\n# 4. Features\n\nThe columns in the datasets are:\n\n* Id:  A unique number for the set of observations over an hour at a gauge.\n* minutes_past:  For each set of radar observations, the minutes past the top of the hour that the radar observations were carried out.  Radar observations are snapshots at that point in time.\n* radardist_km:  Distance of gauge from the radar whose observations are being reported.\n* Ref:  Radar reflectivity in km\n* Ref_5x5_10th:   10th percentile of reflectivity values in 5x5 neighborhood around the gauge.\n* Ref_5x5_50th:   50th percentile\n* * Ref_5x5_90th:   90th percentile\n* RefComposite:  Maximum reflectivity in the vertical column above gauge.  In dBZ.\n* RefComposite_5x5_10th\n* RefComposite_5x5_50th\n* RefComposite_5x5_90th\n* RhoHV:  Correlation coefficient (unitless)\n* RhoHV_5x5_10th\n* RhoHV_5x5_50th\n* RhoHV_5x5_90th\n* Zdr:    Differential reflectivity in dB\n* Zdr_5x5_10th\n* Zdr_5x5_50th\n* Zdr_5x5_90th\n* Kdp:  Specific differential phase (deg\/km)\n* Kdp_5x5_10th\n* Kdp_5x5_50th\n* Kdp_5x5_90th\n* Expected:  Actual gauge observation in mm at the end of the hour.\n\n# 5. Modelling\n\nFor regression problem, we will use SGD Regressor, RandomForestRegressor, XGBRegressor and Lasso Regression.","a27c83e0":"## Random Forest Regressor and XGB Regressor provided best results, but let's focus on XGB Regressor as there are memory issues with Random Forest Regressor when using RandomizedSearchCV or running a model on full data."}}