{"cell_type":{"fdf6e7fc":"code","97b83da1":"code","79572388":"code","d1696b94":"code","47d64d85":"code","757171d9":"code","31a64cab":"code","11db80a2":"code","21754b6b":"code","5afcd720":"code","77a91571":"code","d411beec":"code","b853aab3":"code","80dc44e6":"code","d5726fb5":"code","1f99c25e":"code","efec07b9":"code","8a0eba62":"code","9a229f56":"code","2e7e0bd5":"code","a510cdec":"code","3b04fe95":"code","ab3e0ff1":"code","307f64bd":"code","a0524ae5":"code","b6e62b0f":"code","aee70088":"code","b42eb100":"code","88a9a883":"code","81ff1dc5":"code","190ba132":"code","e6a87f0d":"code","d655936e":"code","3d1fb572":"code","4a135ca0":"code","67e567c9":"code","89579e6e":"code","ecf2e75c":"code","2e0ab74d":"code","c6990c5f":"code","886ade5d":"code","313a5eef":"code","1f47a37e":"code","75a10e4c":"code","ec8448d2":"code","8c649b41":"code","ad03c64f":"code","d7175031":"code","38b250ee":"code","cc7aab3c":"code","875e3dc4":"code","24c9e6b6":"code","c350c2bd":"code","43713b50":"code","1b245f12":"code","569a505f":"code","1ec08550":"code","5e9ffc2a":"code","455ba126":"code","b555c954":"code","ac799c24":"code","7862b79d":"code","3e1bf489":"code","5e043278":"code","72842bfc":"code","c0a3a04b":"code","515582d0":"code","2a3addb6":"code","62194cc3":"code","9dc7c33c":"code","ce059e09":"code","fd393f74":"code","6cb669c4":"code","9b9d3441":"code","a30fee32":"code","115d332c":"code","5247deb8":"code","66d9f6ec":"code","0b1d8549":"code","3cc20771":"code","3a238c9b":"code","6621dd52":"code","e0a04755":"code","35b33812":"code","62b7a636":"code","815f3c0e":"code","1e5b1d51":"code","9c3dc688":"code","70c11d37":"code","1980739b":"code","cc9f949d":"code","e3141f2b":"code","31b66b9a":"code","ae83f257":"code","98656379":"code","cce115db":"code","6e675a40":"code","70aad43a":"code","e74dfce8":"code","a09e8531":"code","213db049":"code","384dd5f7":"code","c0eb3e7e":"code","91e7f9dc":"code","059e52c3":"code","635dd903":"code","93cf8ed5":"code","4668cf4c":"code","62d45c2e":"markdown","89194173":"markdown","e1322145":"markdown","04712b83":"markdown","0519a142":"markdown","c75d406a":"markdown","8326ac51":"markdown","8202febb":"markdown","ad4f1eec":"markdown","0284ee48":"markdown","b8a71c2d":"markdown","231f3d94":"markdown","30a8649c":"markdown","ac770c16":"markdown","a3c2975d":"markdown","c8441a81":"markdown","a4b49846":"markdown","c0bcf0ec":"markdown","c723d4e8":"markdown","9b07dc6f":"markdown","536dfcbf":"markdown","0dacb4bd":"markdown","53efae92":"markdown","5ec6ddf1":"markdown","d0cf48a6":"markdown","367737af":"markdown","6fd8565f":"markdown","b568570c":"markdown","5c782b70":"markdown","674b7495":"markdown"},"source":{"fdf6e7fc":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\nplt.style.use('seaborn')\nsns.set(font_scale=2.5)\n\nimport missingno as msno\n\n#ignore warnings\nimport warnings\nwarnings.filterwarnings('ignore') \n\n%matplotlib inline\n\n# \ucd94\uac00 \uc784\ud3ec\ud2b8 (sklearn)\n\nfrom collections import Counter\n\nfrom sklearn.ensemble import RandomForestClassifier, AdaBoostClassifier, GradientBoostingClassifier, ExtraTreesClassifier, VotingClassifier\nfrom sklearn.discriminant_analysis import LinearDiscriminantAnalysis\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.neural_network import MLPClassifier\nfrom sklearn.svm import SVC\nfrom sklearn.model_selection import GridSearchCV, cross_val_score, StratifiedKFold, learning_curve","97b83da1":"df_train = pd.read_csv('..\/input\/train.csv')\ndf_test = pd.read_csv('..\/input\/test.csv')\n\n# \ud2b8\ub808\uc778 \ud14c\uc2a4\ud2b8 \ub370\uc774\ud130 \ub098\ub204\uae30","79572388":"# \ucd94\uac00\uc140: Outlier detection (IQR(\ud29c\ud0a4\uc758 \ubc29\ubc95)\uc744 \uc774\uc6a9\ud55c \ud568\uc218\ub97c \uc9c0\uc815\ud558\uc5ec \uc774\uc0c1\uce58\ub97c \ud0d0\uc0c9)\ndef detect_outliers(df, n, features):\n    outlier_indices = []\n    for col in features:\n        Q1 = np.percentile(df[col], 25)\n        Q3 = np.percentile(df[col], 75)\n        IQR = Q3 - Q1\n        \n        outlier_step = 1.5 * IQR\n        \n        outlier_list_col = df[(df[col] < Q1 - outlier_step) | (df[col] > Q3 + outlier_step)].index\n        outlier_indices.extend(outlier_list_col)\n    outlier_indices = Counter(outlier_indices)\n    multiple_outliers = list(k for k, v in outlier_indices.items() if v > n)\n        \n    return multiple_outliers\n        \nOutliers_to_drop = detect_outliers(df_train, 2, [\"Age\", \"SibSp\", \"Parch\", \"Fare\"])","d1696b94":"# \uc774\uc0c1\uce58\uac00 \ubc1c\uacac\ub41c \ud589 \ud655\uc778 \ndf_train.loc[Outliers_to_drop]","47d64d85":"# \uc774\uc0c1\uce58 \uc81c\uac70\ndf_train = df_train.drop(Outliers_to_drop, axis = 0).reset_index(drop=True)","757171d9":"df_train.head(10)\n\n# \ud2b8\ub808\uc778 \ub370\uc774\ud130 \ubd88\ub7ec\uc624\uae30 \n#()\uc55e\uc5d0\uc11c\ubd80\ud130 n\uac1c\uc758 \ud2b8\ub808\uc778 \ub370\uc774\ud130 ","31a64cab":"df_train.describe()\n# train \ub370\uc774\ud130\uc758 \ud1b5\uacc4\uc801 \uc218\uce58\ub4e4 \ud45c\ud604 \n# Pclass\uac00 891\uc778\ub370 Age\ub294 714\uc774\ub2e4. \uc774\ub294 NA\ub370\uc774\ud130 \ub54c\ubb38","11db80a2":"df_test.describe()\n# test \ub370\uc774\ud130\uc758 \ud1b5\uacc4\uc801 \uc218\uce58\ub4e4 \ud45c\ud604","21754b6b":"df_train.columns\n# \uac01 \uc5f4\uc758 \uc18d\uc131\uc744 \ubcf4\uc5ec\uc8fc\ub294 \ud568\uc218","5afcd720":"for col in df_train.columns:\n    msg = 'column: {:>10}\\t Percent of NaN value: {:.2f}%'.format(col, 100 * (df_train[col].isnull().sum() \/ df_train[col].shape[0]))\n    print(msg)\n    \n    # \uac01 column\uc5d0 \uacb0\uce21\uce58\uac00 \uba87 % \uc778\uc9c0 \ud655\uc778\ud558\uae30 \uc704\ud55c \uacfc\uc815\n    # df_train[col].isnull().sum() : \ud574\ub2f9 \uc5f4\uc758 \uacb0\uce21\uce58\uac00 \uba87\uac1c\uc778\uc9c0 \uc54c \uc218 \uc788\uac8c\ud558\ub294 \ubb38\uc7a5 (TRUE=1(\uacb0\uce21\uce58), FALSE=0\uc73c\ub85c \uacc4\uc0b0\ub41c\ub2e4.)\n    # df_train[col].shape[0] : \ud574\ub2f9 \uc5f4\uc758 \ucc28\uc6d0 (\uc5f4\uc774 \uc9c0\uc815\ub418\uc5b4 \uc788\uc73c\ubbc0\ub85c \ud589\uc758 \uac2f\uc218\ub97c \ubcf4\uc5ec\uc900\ub2e4.)\n    # 100 * (df_train[col].isnull().sum() \/ df_train[col].shape[0] : \uc704\uc758 \uc124\uba85\uc744 \ud1b5\ud574 %\ub97c \ucd9c\ub825\ud574\uc8fc\ub294 \ubb38\uc7a5\uc784\uc744 \uc54c \uc218 \uc788\ub2e4.","77a91571":"for col in df_test.columns:\n    msg = 'column: {:>10}\\t Percent of NaN value: {:.2f}%'.format(col, 100 * (df_test[col].isnull().sum() \/ df_test[col].shape[0]))\n    print(msg)\n    \n    # \uc704\uc758 \uacfc\uc815\uacfc \ub3d9\uc77c ","d411beec":"msno.matrix(df=df_train.iloc[:, :], figsize=(8,8), color=(0.1, 0.6, 0.8))\n\n# msno.matrix\ub294 \ubc11\uc5d0 \ubcf4\uc774\ub294\uac83\uacfc \uac19\uc740 \ub9e4\ud2b8\ub9ad\uc2a4\ub97c \ub9cc\ub4e4\uc5b4\uc900\ub2e4. figsize\ub294 \ud06c\uae30, color\ub294 \uc21c\uc11c\ub300\ub85c RGB\uac12 \n# \ube48\uce78\uc774 NULL\ub370\uc774\ud130 ","b853aab3":"msno.bar(df=df_train.iloc[:, :], figsize=(8,8), color=(0.1, 0.6, 0.8))\n\n# \ubc14 \ud615\ud0dc\uc758 \uadf8\ub798\ud504\ub85c \ub9cc\ub4e4\uc5b4\uc900\ub2e4.","80dc44e6":"f, ax = plt.subplots(1,2, figsize = (18,8)) # \ub3c4\ud654\uc9c0\ub97c \uc900\ube44(\ud589,\uc5f4,\uc0ac\uc774\uc988)\n\ndf_train['Survived'].value_counts().plot.pie(explode = [0, 0.1], autopct = '%1.1f%%', ax=ax[0], shadow = True)\n# \uc2dc\ub9ac\uc988 \ud0c0\uc785\uc758 \ud30c\uc774\ud50c\ub78f\uc744 \uadf8\ub824\uc900\ub2e4. \ud37c\uc13c\ud2b8\ub97c \ub098\ud0c0\ub0b4\uc900\ub2e4. \ub3c4\ud654\uc9c0 \uccab\ubc88\uc9f8 \uacf5\uac04\uc5d0, \uadf8\ub9bc\uc790\ub97c \ub123\uc5b4\uc11c\nax[0].set_title('Pie plot - Survived')\n# \uccab\ubc88\uc9f8 \ud50c\ub78f\uc758 \uc81c\ubaa9 \uc124\uc815\nax[0].set_ylabel('')\n# \uccab\ubc88\uc9f8 \ud50c\ub78f\uc758 y\ub77c\ubca8 \uc124\uc815\nsns.countplot('Survived', data = df_train, ax=ax[1])\n# \uce74\uc6b4\ud2b8 \ud50c\ub78f\uc744 \uadf8\ub9b0\ub2e4. \ud2b8\ub808\uc778\uc14b\uc758, \ub450\ubc88\uc9f8 \uacf5\uac04\uc5d0\nax[1].set_title('Count plot - Survived')\n# \uce74\uc6b4\ud2b8 \ud50c\ub78f\uc758 \uc81c\ubaa9 \uc124\uc815\nplt.show()\n# \ubcf4\uc5ec\uc8fc\uc138\uc694\n\n# \ud2b8\ub808\uc778 \uc14b\uc758 \uc0dd\uc874 0\uacfc 1\uc758 \ube44\uc728\uc744 \uadf8\ub798\ud504\ub85c \ubcf4\uc5ec\uc900\ub2e4.","d5726fb5":"df_train[['Pclass', 'Survived']].groupby(['Pclass'], as_index = True).count()\n# \uaf2d \ub9ac\uc2a4\ud2b8\ub85c \ubb36\uc5b4\uc11c \ud574\uc57c\ud55c\ub2e4 []\n# groupby\ub85c \ubb36\uc5b4\uc8fc\uace0 count\ub294 \uba87\uac1c\uac00 \uc788\ub294\uc9c0 \uc138\uc900\ub2e4.","1f99c25e":"pd.crosstab(df_train['Pclass'], df_train['Survived'], margins = True).style.background_gradient(cmap='Pastel1')\n# margin\uc740 total\uc744 \ubcf4\uc5ec\uc900\ub2e4.","efec07b9":"df_train[['Pclass', 'Survived']].groupby(['Pclass'], as_index = True).mean().sort_values(by='Survived', ascending = False).plot.bar()\n\n# (0*\ud574\ub2f9 \ud074\ub798\uc2a4\uc758 \uac2f\uc218 + 1*\ud574\ub2f9 \ud074\ub798\uc2a4\uc758 \uac2f\uc218)\/ALL\n# \uc774\ub294 \uace7 \uc0dd\uc874\ub960\uc744 \uc758\ubbf8\ud55c\ub2e4.","8a0eba62":"y_position = 1.02\nf, ax = plt.subplots(1, 2, figsize= (18,8))\ndf_train[\"Pclass\"].value_counts().plot.bar(color = [\"#CD7F32\", \"#FFDF00\", \"#D3D3D3\"], ax = ax[0])\nax[0].set_title(\"Number of passengers By Pclass\")\nax[0].set_ylabel(\"Count\")\nsns.countplot(\"Pclass\", hue = \"Survived\", data = df_train, ax = ax[1])\nax[1].set_title(\"Pclass: Survived vs Dead\", y = y_position)\nplt.show()\n     \n# Passenger Class\uc5d0 \ub530\ub978 \uc2b9\uac1d \uc218\uc640, \uc0dd\uc874\ube44\uc728\uc744 \uc54c \uc218 \uc788\ub294 \ud50c\ub78f. 3\ud074\ub798\uc2a4(economy\ub77c\uace0 \uc0dd\uac01)\uc774 \uac00\uc7a5 \ub9ce\uc774 \ud0d1\uc2b9\ud558\uc600\uace0, FirstCLass \uc2b9\uac1d\ub4e4 \uc0dd\uc874 \ube44\uc728\uc774 \uac00\uc7a5 \ub192\ub2e4.","9a229f56":"print(\"\uc81c\uc77c \ub098\uc774\uac00 \ub9ce\uc740 \ud0d1\uc2b9\uac1d : {:.1f} years\".format(df_train[\"Age\"].max()))\nprint(\"\uc81c\uc77c \uc5b4\ub9b0 \ud0d1\uc2b9\uac1d : {:.1f} years\".format(df_train[\"Age\"].min()))\nprint(\"\ud0d1\uc2b9\uac1d \ub098\uc774\uc758 \ud3c9\uade0 : {:.1f} years\".format(df_train[\"Age\"].mean()))\n      ","2e7e0bd5":"fix, ax = plt.subplots(1, 1, figsize = (9, 5))\nsns.kdeplot(df_train[df_train[\"Survived\"] == 1][\"Age\"], ax=ax)\nsns.kdeplot(df_train[df_train[\"Survived\"] == 0][\"Age\"], ax=ax)    # df_train[df_train[\"Survived\"] == 0: \ud310\ub2e4\uc2a4\uc5d0\uc11c \ub9ce\uc774 \uc0ac\uc6a9\ud558\ub294 \uc778\ub371\uc2f1 \ubc29\ubc95, \uadf8\uac83\uc5d0 [\"Age\"]\ub9cc \uac00\uc838\uc640\uc11c \ud50c\ub78f\uc5d0 \ub123\uaca0\ub2e4\ub294 \ucf54\ub4dc\nplt.legend([\"Survived == 1\", \"Survived == 0\"])\nplt.show()\n\n# \ub370\uc774\ud130\ub4e4\uc758 \ubd84\ud3ec\ub97c \ucd94\uc815\ud558\uae30 \uc704\ud574 kdeplot\uc744 \uc0ac\uc6a9 (\ubc00\ub3c4\ud568\uc218, \ud788\uc2a4\ud1a0\uadf8\ub7a8\uc744 \ubd80\ub4dc\ub7fd\uac8c \uadf8\ub9b0\uac83\uc774\ub2e4.)","a510cdec":"fix, ax = plt.subplots(1, 1, figsize = (9, 7))\nsns.kdeplot(df_train[df_train[\"Pclass\"] == 1][\"Age\"], ax=ax)\nsns.kdeplot(df_train[df_train[\"Pclass\"] == 2][\"Age\"], ax=ax)\nsns.kdeplot(df_train[df_train[\"Pclass\"] == 3][\"Age\"], ax=ax)\nplt.xlabel(\"Age\")\nplt.title(\"Age Distribution within classes\")\nplt.legend([\"1st Class\", \"2nd Class\", \"3rd Class\"])\nplt.show()                       \n\n# \uc774\ub7f0 \uc0c1\ud669\uc5d0\uc11c \ud788\uc2a4\ud1a0\uadf8\ub7a8\uc73c\ub85c \ud558\uba74 \uacb9\uccd0\uc11c \uc548\ubcf4\uc774\uae30 \ub54c\ubb38\uc5d0 kde\ub97c \uc0ac\uc6a9\ud574\uc8fc\ub294 \uac83\n# Class\uc5d0 \ub530\ub978 Age \ubd84\ud3ec\ub97c \uc54c \uc218 \uc788\ub2e4.","3b04fe95":"fig, ax  = plt.subplots(1, 1, figsize = (9, 5))\nsns.kdeplot(df_train[(df_train[\"Survived\"] == 0) & (df_train[\"Pclass\"] == 1)][\"Age\"], ax=ax)\nsns.kdeplot(df_train[(df_train[\"Survived\"] == 1) & (df_train[\"Pclass\"] == 1)][\"Age\"], ax=ax)\nplt.legend([\"Survived == 0\", \"Survived == 1\"])\nplt.title(\"1st Class\")\nplt.show()\n\n# \uc0dd\uc874\ud558\uc9c0 \uc54a\uc740 \uc0ac\ub78c\uc911\uc5d0 Pclass\uac00 1\uc778 \uc0ac\ub78c\ub4e4\uc758 Age \ubd84\ud3ec\n# \uc0dd\uc874\ud55c \uc0ac\ub78c\uc911\uc5d0 Pclass\uac00 1\uc778 \uc0ac\ub78c\ub4e4\uc758 Age \ubd84\ud3ec","ab3e0ff1":"fig, ax  = plt.subplots(1, 1, figsize = (9, 5))\nsns.kdeplot(df_train[(df_train[\"Survived\"] == 0) & (df_train[\"Pclass\"] == 2)][\"Age\"], ax=ax)\nsns.kdeplot(df_train[(df_train[\"Survived\"] == 1) & (df_train[\"Pclass\"] == 2)][\"Age\"], ax=ax)\nplt.legend([\"Survived == 0\", \"Survived == 1\"])\nplt.title(\"2nd Class\")\nplt.show()\n\n# \uc0dd\uc874\ud558\uc9c0 \uc54a\uc740 \uc0ac\ub78c\uc911\uc5d0 Pclass\uac00 2\uc778 \uc0ac\ub78c\ub4e4\uc758 Age \ubd84\ud3ec\n# \uc0dd\uc874\ud55c \uc0ac\ub78c\uc911\uc5d0 Pclass\uac00 2\uc778 \uc0ac\ub78c\ub4e4\uc758 Age \ubd84\ud3ec","307f64bd":"fig, ax  = plt.subplots(1, 1, figsize = (9, 5))\nsns.kdeplot(df_train[(df_train[\"Survived\"] == 0) & (df_train[\"Pclass\"] == 3)][\"Age\"], ax=ax)\nsns.kdeplot(df_train[(df_train[\"Survived\"] == 1) & (df_train[\"Pclass\"] == 3)][\"Age\"], ax=ax)\nplt.legend([\"Survived == 0\", \"Survived == 1\"])\nplt.title(\"3rd Class\")\nplt.show()\n\n# \uc0dd\uc874\ud558\uc9c0 \uc54a\uc740 \uc0ac\ub78c\uc911\uc5d0 Pclass\uac00 3\uc778 \uc0ac\ub78c\ub4e4\uc758 Age \ubd84\ud3ec\n# \uc0dd\uc874\ud55c \uc0ac\ub78c\uc911\uc5d0 Pclass\uac00 3\uc778 \uc0ac\ub78c\ub4e4\uc758 Age \ubd84\ud3ec","a0524ae5":"chage_age_range_survival_ratio = []\ni = 80\nfor i in range(1,81):\n    chage_age_range_survival_ratio.append(df_train[df_train[\"Age\"] < i][\"Survived\"].sum()\/len(df_train[df_train[\"Age\"] < i][\"Survived\"])) # i\ubcf4\ub2e4 \uc791\uc740 \ub098\uc774\uc758 \uc0ac\ub78c\ub4e4\uc774 \uc0dd\uc874\ub960\n\nplt.figure(figsize = (7, 7))\nplt.plot(chage_age_range_survival_ratio)\nplt.title(\"Survival rate change depending on range of Age\", y = 1.02)\nplt.ylabel(\"Survival rate\")\nplt.xlabel(\"Range of Age(0-x)\")\nplt.show()\n    \n# \uadf8\ub798\ud504\ub97c \ubcf4\uba74 \ub098\uc774\uac00 \uc5b4\ub9b4\uc218\ub85d \uc0dd\uc874\ud655\ub960\uc774 \ub192\uace0 \ub9ce\uc544\uc9c8\uc218\ub85d \uc801\uc740\uac83\uc744 \uc54c \uc218 \uc788\ub2e4.","b6e62b0f":"f, ax = plt.subplots(1, 2, figsize=(18, 8))\nsns.violinplot(\"Pclass\",\"Age\", hue = \"Survived\", data = df_train, scale = \"count\", split = True, ax=ax[0])\nax[0].set_title(\"Pclass and Age vs Survived\")\nax[0].set_yticks(range(0, 110, 10))\n\nsns.violinplot(\"Sex\", \"Age\", hue = \"Survived\", data = df_train, scale = \"count\", split = True, ax=ax[1])\nax[1].set_title(\"Sex and Age vs Survived\")\nax[1].set_yticks(range(0, 110, 10))\n\nplt.show()\n\n# \ub098\uc774\ub97c \uae30\uc900\uc73c\ub85c Pclass\uc5d0 \ub530\ub978 \uc0dd\uc874\ub960, \uc131\ubcc4\uc5d0 \ub530\ub978 \uc0dd\uc874\ub960\uc744 \ud55c\ub208\uc5d0 \ubcfc \uc218 \uc788\ub2e4.\n# \uacb0\uacfc\uc801\uc73c\ub85c Pclass\uac00 \uc88b\uc744\uc218\ub85d \uc0dd\uc874\ub960\uc774 \ub192\uace0, \uc5ec\uc790\uac00 \ub0a8\uc790\ubcf4\ub2e4 \uc0dd\uc874\ub960\uc774 \ub192\uc740\uac83\uc744 \uc54c \uc218 \uc788\ub2e4.","aee70088":"f, ax = plt.subplots(1, 1, figsize=(7,7))\ndf_train[[\"Embarked\",\"Survived\"]].groupby([\"Embarked\"], as_index=True).mean().sort_values(by=\"Survived\",\n                                                                                         ascending = False).plot.bar(ax=ax)\n# ascending\uc740 \uc624\ub984\ucc28\uc21c(True), \ub0b4\ub9bc\ucc28\uc21c(False)\n# sort_values, sort_index()\uc5d0 \ub300\ud574\uc11c \ub354 \ucc3e\uc544\ubcf4\uae30","b42eb100":"f, ax = plt.subplots(2, 2, figsize=(20,15))\nsns.countplot(\"Embarked\", data = df_train, ax=ax[0,0])\nax[0,0].set_title(\"(1) No. of Passengers Boared\")\n\nsns.countplot(\"Embarked\", hue = \"Sex\", data = df_train, ax=ax[0,1])\nax[0,1].set_title(\"(2) Male-Female split for Embarked\")\n\nsns.countplot(\"Embarked\", hue = \"Survived\", data = df_train, ax=ax[1,0])\nax[1,0].set_title(\"(3) Embarked vs Survived\")\n\nsns.countplot(\"Embarked\", hue = \"Pclass\", data = df_train, ax=ax[1,1])\nax[1,1].set_title(\"(4) Embarked vs Pclass\")\n\nplt.subplots_adjust(wspace = 0.4, hspace = 0.5) # \uacb9\uce58\uc9c0\uc54a\uac8c \ud558\ub294 \uacf5\ubc31 \ub9cc\ub4e4\uc5b4\uc8fc\uae30\nplt.show()\n\n# \uacb0\uacfc\uc801\uc73c\ub85c C\uc5d0\uc11c \ud0d1\uc2b9\ud55c \uc0ac\ub78c\ub4e4\uc774 Firstclass\uac00 \ub9ce\uace0 \uc5ec\uc790\uac00 \ub9ce\uae30 \ub54c\ubb38\uc5d0 \uc0dd\uc874\ub960\uc774 \ub192\uac8c \ub098\uc628\ub2e4.","88a9a883":"df_train[\"FamilySize\"] = df_train[\"SibSp\"] + df_train[\"Parch\"]+1\ndf_test[\"FamilySize\"] = df_test[\"SibSp\"] + df_test[\"Parch\"]+1\n\n# \ud310\ub2e4\uc2a4 \ub07c\ub9ac\ub294 \uc5f0\uc0b0\uc774 \uac00\ub2a5\ud558\ub2e4. \uc0c8\ub85c\uc6b4 feature\uc778 \"FamilySize\"\ub97c \ub9cc\ub4e0\ub2e4.","81ff1dc5":"df_train[\"FamilySize\"].head(5)","190ba132":"df_test[\"FamilySize\"].head()","e6a87f0d":"print(\"Maximum size of Family: \", df_train[\"FamilySize\"].max())\nprint(\"Minimum size of Family: \", df_train[\"FamilySize\"].min())","d655936e":"f, ax = plt.subplots(1, 3, figsize = (40, 10))\nsns.countplot(\"FamilySize\", data = df_train, ax = ax[0])\nax[0].set_title(\"(1) No. of Passenger Boarded\", y = 1.02)\n\nsns.countplot(\"FamilySize\", hue = \"Survived\", data = df_train, ax = ax[1])\nax[1].set_title(\"(2) Survived countplot depending of FamilySize\")\n\ndf_train[[\"FamilySize\", \"Survived\"]].groupby([\"FamilySize\"], as_index = True).mean().sort_values(by = \"Survived\",\n                                                                                                      ascending = False).plot.bar(ax = ax[2])\nax[2].set_title(\"(3) Survived rate depending on FamilySize\", y = 1.02)\n\nplt.subplots_adjust(wspace = 0.2, hspace = 0.5)\nplt.show()\n\n# \uccab\ubc88\uc9f8 \ud50c\ub78f\uc740 \uac00\uc871\uc218 (1\uc778 \ubd80\ud130 11\uc778\uae4c\uc9c0)\uc5d0 \ub530\ub978 \ud0d1\uc2b9\uac1d \uc218, \ub450\ubc88\uc9f8 \ud50c\ub78f\uc740 \uac00\uc871 \uc218\uc5d0 \ub530\ub978 \uc0dd\uc874\uc790 \uc218, \uc138\ubc88\uc9f8 \ud50c\ub78f\uc740 \uac00\uc871\uc218\uc5d0 \ub530\ub978 \uc0dd\uc874\ub960\n# \uac00\uc871 \uc218 \uac00 4\uba85\uc778 \uac00\uc871\uc758 \uc0dd\uc874\ub960\uc774 \uc81c\uc77c \ub192\ub2e4.","3d1fb572":"f, ax = plt.subplots(1, 1, figsize = (8,8))\ng = sns.distplot(df_train[\"Fare\"], color = \"b\", label=\"Skewness: {:2f}\".format(df_train[\"Fare\"].skew()), ax=ax)\ng = g.legend(loc = \"best\")\n\n# skewness\ub294 \ubd84\ud3ec\uac00 \uc5bc\ub9c8\ub098 \ube44\ub300\uce6d\uc778\uac00\ub97c \uc54c\ub824\uc8fc\ub294 \uac83 (\uc65c\ub3c4: a=0\uc774\uba74 \uc815\uaddc\ubd84\ud3ec, a<0 \uc774\uba74 \uc624\ub978\ucabd\uc73c\ub85c \uce58\uc6b0\uce68, a>0\uc774\uba74 \uc67c\ucabd\uc73c\ub85c \uce58\uc6b0\uce68)","4a135ca0":"# skewness\ub97c \uc5c6\uc560\uc8fc\uae30 \uc704\ud574 \ub85c\uadf8\ub97c \ucde8\ud55c\ub2e4.\n\ndf_train[\"Fare\"] = df_train[\"Fare\"].map(lambda i:np.log(i) if i>0 else 0)","67e567c9":"df_train[\"Fare\"].head(5)","89579e6e":"f, ax = plt.subplots(1, 1, figsize = (8,8))\ng = sns.distplot(df_train[\"Fare\"], color = \"b\", label=\"Skewness: {:2f}\".format(df_train[\"Fare\"].skew()), ax=ax)\ng = g.legend(loc = \"best\")\n\n# \ub85c\uadf8\ub97c \ucde8\ud574\uc900 \uadf8\ub798\ud504\uac00 \ubc14\ub010 \ubaa8\uc2b5\uc744 \ubcfc \uc218 \uc788\ub2e4. (\uc815\uaddc\uadfc\uc0ac\ud654) (\uac04\ub2e8\ud55c feature engineering\uc774\ub77c\uace0 \ud560 \uc218 \uc788\ub2e4.)","ecf2e75c":"# \uac00\uc7a5 \uba3c\uc800 NULL\ub370\uc774\ud130\ub97c \ucc98\ub9ac\ud55c\ub2e4. (\ucc44\uc6cc\uc900\ub2e4)\n\ndf_train[\"Age\"].isnull().sum()\n# Age\uc5d0\ub294 NULL \ub370\uc774\ud130\uac00 177\uac1c \uc788\ub2e4.","2e0ab74d":"# \uc774\ub984\uc5d0 \ub4e4\uc5b4\uac00\ub294 \ud638\uce6d(mr, ms, mrs)\ub4f1\uc744 \uc774\uc6a9\ud558\uc5ec \uadf8\ub8f9\ud551\ud574\uc900\ub2e4. \uc815\uaddc\ud45c\ud604\uc2dd\uc744 \uc774\uc6a9\ud558\uc5ec \ucd94\ucd9c\ud55c\ub2e4.\n\ndf_train[\"Initial\"] = df_train[\"Name\"].str.extract(\"([A-Za-z]+)\\.\") # Initial\ub85c \ud638\uce6d\uc744 \uc800\uc7a5\ud574\uc900\ub2e4.\ndf_test[\"Initial\"] = df_test[\"Name\"].str.extract(\"([A-Za-z]+)\\.\")","c6990c5f":"df_train.head()","886ade5d":"df_test.head()","313a5eef":"pd.crosstab(df_train[\"Initial\"], df_train[\"Sex\"]).T.style.background_gradient(cmap = \"Pastel2\")\n\n# \uc131\ubcc4\ub85c \ud638\uce6d\uc744 \ud655\uc778 crosstab\uc744 \uc774\uc6a9\ud558\uc5ec \ube48\ub3c4\ud45c\ub97c \ub9cc\ub4e0\ub2e4.","1f47a37e":"# \uc5ec\ub7ec\uac1c\uc758 \ud638\uce6d\uc744 \uac04\ub2e8\ud558\uac8c \uce58\ud658\uc2dc\ucf1c\uc900\ub2e4. (replace() \uc0ac\uc6a9)\n\ndf_train[\"Initial\"].replace([\"Mlle\",\"Mme\", \"Ms\", \"Dr\",\"Major\",\"Lady\",\"Countess\", \"Jonkheer\", \"Col\", \"Rev\", \"Capt\", \"Sir\", \"Don\", \"Dona\"],\n                           [\"Miss\", \"Miss\",\"Miss\", \"Mr\", \"Mr\", \"Mrs\", \"Mrs\", \"Other\", \"Other\", \"Other\", \"Mr\", \"Mr\", \"Mr\", \"Mr\"], inplace = True)\n\ndf_test[\"Initial\"].replace([\"Mlle\",\"Mme\", \"Ms\", \"Dr\",\"Major\",\"Lady\",\"Countess\", \"Jonkheer\", \"Col\", \"Rev\", \"Capt\", \"Sir\", \"Don\", \"Dona\"],\n                           [\"Miss\", \"Miss\",\"Miss\", \"Mr\", \"Mr\", \"Mrs\", \"Mrs\", \"Other\", \"Other\", \"Other\", \"Mr\", \"Mr\", \"Mr\", \"Mr\"], inplace = True)","75a10e4c":"df_train.groupby(\"Initial\").mean()","ec8448d2":"df_train.groupby(\"Initial\")[\"Survived\"].mean().plot.bar()\n\n# \uc5ed\uc2dc Miss\ub098 Mrs \uac19\uc740 \uc5ec\uc131\uc740 \uc0dd\uc874\ub960\uc774 \ub192\uace0, Master\uc758 \uacbd\uc6b0 \ud3c9\uade0\ub098\uc774\uac00 \uc5b4\ub9b0\ub370 \uc0dd\uc874\ub960\uc774 \ub192\ub2e4. \ub610\ud55c Mr\ub294 \uc0dd\uc874\ub960\uc774 \ub0ae\ub2e4.","8c649b41":"# train, test \ub450\uac1c\uc758 \ub370\uc774\ud130 \uc14b\uc744 \ud569\uccd0\uc11c \ud1b5\uacc4\ub7c9\uc744 \ud655\uc778\ud55c\ub2e4. (concat \uc0ac\uc6a9: \ub370\uc774\ud130\uc14b\uc5d0 \ub370\uc774\ud130\uc14b\uc744 \uc313\ub294 \ud568\uc218)\ndf_all = pd.concat([df_train,df_test])\ndf_all.shape","ad03c64f":"df_all.groupby(\"Initial\").mean()\n\n# \uc5ec\uae30\uc11c Age\uc758 \ud3c9\uade0\uc744 \uc774\uc694\ud558\uc5ec NULL \uac12\ub4e4\uc744 \ucc44\uc6cc\uc900\ub2e4.","d7175031":"# loc \uc778\ub371\uc11c: \ubcf4\uace0\uc2f6\uc740 \ud589\uc774\ub098 \uc5f4\uc758 \ub370\uc774\ud130\ub4e4\uc744 \uc870\uac74\uc5d0 \ub9de\uac8c \ubc18\ud658\ud574\uc900\ub2e4. \n# \uc9c0\uae08\uc740 NULL\ub370\uc774\ud130\ub97c \uac00\uc9c0\ub294 \uc778\ub371\uc2a4\ub97c \ubc18\ud658\ud558\uac8c \ud574\uc8fc\uc5b4\uc57c \ud55c\ub2e4.\n\ndf_train.loc[(df_train[\"Age\"].isnull()) & (df_train[\"Initial\"] == \"Mr\"), \"Age\"] = 33\ndf_train.loc[(df_train[\"Age\"].isnull()) & (df_train[\"Initial\"] == \"Master\"),\"Age\"] = 5\ndf_train.loc[(df_train[\"Age\"].isnull()) & (df_train[\"Initial\"] == \"Miss\"), \"Age\"] = 22\ndf_train.loc[(df_train[\"Age\"].isnull()) & (df_train[\"Initial\"] == \"Mrs\"), \"Age\"] = 37\ndf_train.loc[(df_train[\"Age\"].isnull()) & (df_train[\"Initial\"] == \"Other\"), \"Age\"] = 45\n\ndf_test.loc[(df_test[\"Age\"].isnull()) & (df_test[\"Initial\"] == \"Mr\"), \"Age\"] = 33\ndf_test.loc[(df_test[\"Age\"].isnull()) & (df_test[\"Initial\"] == \"Master\"),\"Age\"] = 5\ndf_test.loc[(df_test[\"Age\"].isnull()) & (df_test[\"Initial\"] == \"Miss\"), \"Age\"] = 22\ndf_test.loc[(df_test[\"Age\"].isnull()) & (df_test[\"Initial\"] == \"Mrs\"), \"Age\"] = 37\ndf_test.loc[(df_test[\"Age\"].isnull()) & (df_test[\"Initial\"] == \"Other\"), \"Age\"] = 45\n\n# Age\uac00 NULL, Initial\uc774 Mr\uc778\uac83 \ubc18\ud658, Age \uceec\ub7fc\ub9cc \ubf51\uace0 \uadf8\uac78 \uc804\ubd80 33(\uc704\uc5d0\uc11c \ubcf8 Age\uc758 \ud3c9\uade0)\uc73c\ub85c \ucc44\uc6cc\uc900\ub2e4.\n# \uc804\ubd80 \ub2e4 \ub3d9\uc77c\ud55c \ubc29\ubc95\uc73c\ub85c NULL\ub370\uc774\ud130 \ucc44\uc6cc\uc8fc\uae30.","38b250ee":"# \ud655\uc778\n\ndf_train[\"Age\"].isnull().sum()","cc7aab3c":"df_test[\"Age\"].isnull().sum()","875e3dc4":"df_train[\"Embarked\"].isnull().sum()","24c9e6b6":"df_train.shape\n\n# 891\uac1c\uc758 row \uc911\uc5d0 2\uac1c\ubc16\uc5d0 \uacb0\uce21\uce58\uac00 \uc5c6\uc73c\ubbc0\ub85c \ucd5c\ube48\uac12\uc73c\ub85c \ub300\uccb4\ud574\uc900\ub2e4. ","c350c2bd":"df_train[\"Embarked\"].fillna(\"S\", inplace = True)\n\n# fillna\ub294 \uacb0\uce21\uce58 \uac12\uc744 \uc9c0\uc815\uac12\uc73c\ub85c \uc804\ubd80 \ucc44\uc6cc\uc900\ub2e4. EDA \uacfc\uc815\uc5d0\uc11c S\uac00 \uac00\uc7a5 \ub9ce\uc558\uc73c\ubbc0\ub85c \ub300\uccb4\ud574\uc900\ub2e4.","43713b50":"df_test[\"Embarked\"].isnull().sum()","1b245f12":"df_train[\"Age_Categ\"] = 0\ndf_test[\"Age_Categ\"] = 0\n\n# \uc0c8\ub85c\uc6b4 feature \uc0dd\uc131","569a505f":"def category_age(x):\n    if x < 10:\n        return 0\n    elif x < 20:\n        return 1\n    elif x < 30:\n        return 2\n    elif x < 40:\n        return 3 \n    elif x < 50:\n        return 4\n    elif x < 60: \n        return 5\n    elif x < 70: \n        return 6\n    else:\n        return 7\n    \n# apply \uc0ac\uc6a9\uc744 \uc704\ud574 \ud568\uc218\ub97c \ub9cc\ub4e4\uc5b4 \uc900\ub2e4.    ","1ec08550":"df_train[\"Age_Categ\"] = df_train[\"Age\"].apply(category_age)\ndf_test[\"Age_Categ\"] = df_test[\"Age\"].apply(category_age)\n\n# apply \ud568\uc218\ub97c \uc774\uc6a9\ud558\uc5ec train, test \uc14b\uc5d0 \ubc94\uc8fc\ud654 \uc2dc\ud0a8 \ub098\uc774 \uc5f4\uc758 \uc815\ubcf4\ub97c \ucd94\uac00\ud55c\ub2e4.","5e9ffc2a":"df_train[\"Age_Categ\"].head(10)","455ba126":"df_test[\"Age_Categ\"].head(10)","b555c954":"# \uc774\ub7f0 \uc2dd\uc73c\ub85c \ud558\ub4dc\ucf54\ub529\ud558\uc5ec train, test \uc14b\uc5d0 \ubc94\uc8fc\ud654 \uc2dc\ud0a8 \ub098\uc774 \uc5f4\uc758 \uc815\ubcf4\ub97c \ucd94\uac00\ud558\ub294 \ubc29\ubc95\ub3c4 \uc788\ub2e4.\n\ndf_train.loc[df_train[\"Age\"] < 10, \"Age_Categ\"] = 0\ndf_train.loc[(10 <= df_train[\"Age\"]) & (df_train[\"Age\"] < 20), \"Age_Categ\"] = 1\ndf_train.loc[(20 <= df_train[\"Age\"]) & (df_train[\"Age\"] < 30), \"Age_Categ\"] = 2\ndf_train.loc[(30 <= df_train[\"Age\"]) & (df_train[\"Age\"] < 40), \"Age_Categ\"] = 3\ndf_train.loc[(40 <= df_train[\"Age\"]) & (df_train[\"Age\"] < 50), \"Age_Categ\"] = 4\ndf_train.loc[(50 <= df_train[\"Age\"]) & (df_train[\"Age\"] < 60), \"Age_Categ\"] = 5\ndf_train.loc[(60 <= df_train[\"Age\"]) & (df_train[\"Age\"] < 70), \"Age_Categ\"] = 6\ndf_train.loc[(70 <= df_train[\"Age\"]), \"Age_Categ\"] = 7\n\ndf_test.loc[df_test[\"Age\"] < 10, \"Age_Categ\"] = 0\ndf_test.loc[(10 <= df_test[\"Age\"]) & (df_test[\"Age\"] < 20), \"Age_Categ\"] = 1\ndf_test.loc[(20 <= df_test[\"Age\"]) & (df_test[\"Age\"] < 30), \"Age_Categ\"] = 2\ndf_test.loc[(30 <= df_test[\"Age\"]) & (df_test[\"Age\"] < 40), \"Age_Categ\"] = 3\ndf_test.loc[(40 <= df_test[\"Age\"]) & (df_test[\"Age\"] < 50), \"Age_Categ\"] = 4\ndf_test.loc[(50 <= df_test[\"Age\"]) & (df_test[\"Age\"] < 60), \"Age_Categ\"] = 5\ndf_test.loc[(60 <= df_test[\"Age\"]) & (df_test[\"Age\"] < 70), \"Age_Categ\"] = 6\ndf_test.loc[(70 <= df_test[\"Age\"]), \"Age_Categ\"] = 7","ac799c24":"df_train.head()","7862b79d":"df_test.head()","3e1bf489":"# Age\ub97c \ubc94\uc8fc\ud654 \uc2dc\ucf30\uc73c\ubbc0\ub85c \ud544\uc694\uc5c6\uc5b4\uc9c4 Age \uceec\ub7fc\uc744 \uc0ad\uc81c\uc2dc\ucf1c\uc900\ub2e4.\n\ndf_train.drop([\"Age\"], axis = 1 ,inplace = True)\ndf_test.drop([\"Age\"], axis = 1, inplace = True)","5e043278":"df_train.head()","72842bfc":"# Initial\uc744 \uc81c\ub300\ub85c \ub41c \ub7ec\ub2dd\uc744 \uc704\ud574 \uc22b\uc790\ub85c \ubc14\uafd4\uc8fc\ub294 \uc791\uc5c5\uc744 \ud574\uc900\ub2e4.\ndf_train[\"Initial\"].unique()","c0a3a04b":"df_train[\"Initial\"] = df_train[\"Initial\"].map({\"Master\" : 0, \"Miss\" : 1, \"Mr\" : 2, \"Mrs\" : 3, \"Other\" : 4})\ndf_test[\"Initial\"] = df_test[\"Initial\"].map({\"Master\" : 0, \"Miss\" : 1, \"Mr\" : 2, \"Mrs\" : 3, \"Other\" : 4})","515582d0":"# \ub9c8\ucc2c\uac00\uc9c0\ub85c Embarked\ub3c4 \uc22b\uc790\ub85c \ubc14\uafd4\uc900\ub2e4.\ndf_train[\"Embarked\"].value_counts()","2a3addb6":"df_train[\"Embarked\"] = df_train[\"Embarked\"].map({\"C\" : 0, \"Q\" : 1, \"S\" : 2})\ndf_test[\"Embarked\"] = df_test[\"Embarked\"].map({\"C\" : 0, \"Q\" : 1, \"S\" : 2})","62194cc3":"df_train.head()","9dc7c33c":"df_test.head()","ce059e09":"# Sex\ub3c4 \ubc14\uafd4\uc900\ub2e4.\ndf_train[\"Sex\"].unique()","fd393f74":"df_train[\"Sex\"] = df_train[\"Sex\"].map({\"female\" : 0, \"male\" : 1})\ndf_test[\"Sex\"] = df_test[\"Sex\"].map({\"female\" : 0, \"male\" : 1})\n","6cb669c4":"heatmap_data = df_train[[\"Survived\", \"Pclass\", \"Sex\", \"Fare\", \"Embarked\", \"FamilySize\", \"Initial\", \"Age_Categ\"]]","9b9d3441":"colormap = plt.cm.PuBu\nplt.figure(figsize=(10, 8))\nplt.title(\"Person Correlation of Features\", y = 1.05, size = 15)\nsns.heatmap(heatmap_data.astype(float).corr(), linewidths = 0.1, vmax = 1.0,\n           square = True, cmap = colormap, linecolor = \"white\", annot = True, annot_kws = {\"size\" : 16})\n\n\n# \uc0c1\uad00\uacc4\uc218 \ubd84\uc11d\uc744 \ud1b5\ud574 \uacb9\uce58\ub294 feature\uac00 \uc788\ub294\uc9c0, \uc5b4\ub290 feature\ub07c\ub9ac \uc0c1\uad00\uad00\uacc4\ub97c \ubcf4\uc774\ub294\uc9c0 \uc54c \uc218 \uc788\ub2e4.","a30fee32":"# \ubaa8\ub378\uc758 \uc131\ub2a5\uc744 \ub192\uc774\uae30 \uc704\ud574\uc11c \uce74\ud14c\uace0\ub9ac\ud654 \uc2dc\ucf30\ub358 \ub370\uc774\ud130\uc758 \uc815\ubcf4\ub97c \uc798 \uc0ac\uc6a9\ud558\uae30 \uc704\ud574 \ud615\ud0dc\ub97c \ubc14\uafd4\uc8fc\ub294 \uc791\uc5c5\uc774\ub2e4.\n# One Hot Encoding\uc740 \uc774\uac83\ub4e4\uc744 \ubca1\ud130\ud654 \uc2dc\ud0a4\ub294 \uac83\uc774\ub2e4. (Dummy)\n\ndf_train = pd.get_dummies(df_train, columns = [\"Initial\"], prefix = \"Initial\")\ndf_test = pd.get_dummies(df_test, columns = [\"Initial\"], prefix = \"Initial\")","115d332c":"# Initial\uacfc \uac19\uc774 \ub9c8\ucc2c\uac00\uc9c0\ub85c \uce74\ud14c\uace0\ub9ac\ud654 \uc2dc\ucf30\ub358 Embarked\ub3c4 \uc2e4\ud589\ud574\uc900\ub2e4.\n\ndf_train = pd.get_dummies(df_train, columns = [\"Embarked\"], prefix = \"Embarked\")\ndf_test = pd.get_dummies(df_test, columns = [\"Embarked\"], prefix = \"Embarked\")","5247deb8":"# \uc4f0\uc774\uc9c0 \uc54a\ub294 feature\ub4e4\uc744 \uc0ad\uc81c\ud574\uc900\ub2e4. \ndf_train.head(1)","66d9f6ec":"df_train.drop([\"PassengerId\", \"Name\", \"SibSp\", \"Parch\", \"Ticket\", \"Cabin\"], axis = 1, inplace = True)\ndf_test.drop([\"PassengerId\", \"Name\", \"SibSp\", \"Parch\", \"Ticket\", \"Cabin\"], axis = 1, inplace = True)","0b1d8549":"df_train.head() \n\n# \uae54\ub054\ud558\uac8c \uc815\ub9ac\ub41c \uac83 \ud655\uc778","3cc20771":"df_test.head()","3a238c9b":"kfold = StratifiedKFold(n_splits=10)","6621dd52":"df_train[\"Survived\"] = df_train[\"Survived\"].astype(int)\n\nY_train = df_train[\"Survived\"]\n\nX_train = df_train.drop(labels = [\"Survived\"],axis = 1)","e0a04755":"# \uc5ec\ub7ec \uc54c\uace0\ub9ac\uc998\uc73c\ub85c \ubaa8\ub378\ub9c1 \ud14c\uc2a4\ud2b8\nrandom_state = 2\nclassifiers = []\nclassifiers.append(SVC(random_state = random_state))\nclassifiers.append(DecisionTreeClassifier(random_state = random_state))\nclassifiers.append(AdaBoostClassifier(DecisionTreeClassifier(random_state = random_state), random_state = random_state, learning_rate = 0.1))\nclassifiers.append(RandomForestClassifier(random_state = random_state))\nclassifiers.append(ExtraTreesClassifier(random_state = random_state))\nclassifiers.append(GradientBoostingClassifier(random_state = random_state))\nclassifiers.append(MLPClassifier(random_state = random_state))\nclassifiers.append(KNeighborsClassifier())\nclassifiers.append(LogisticRegression(random_state = random_state))\nclassifiers.append(LinearDiscriminantAnalysis())\n\ncv_results = []\nfor classifier in classifiers:\n    cv_results.append(cross_val_score(classifier, X_train, y = Y_train, scoring = \"accuracy\", cv = kfold, n_jobs = 4))\n    \ncv_means = []\ncv_std = []\nfor cv_result in cv_results:\n    cv_means.append(cv_result.mean())\n    cv_std.append(cv_result.std())\n    \ncv_res = pd.DataFrame({\"CrossValMeans\": cv_means, \"CrossValerrors\": cv_std,\n                       \"Algorithm\": [\"SVC\", \"DecisionTree\", \"AdaBoost\", \"RandomForest\",\n                                     \"ExtraTrees\", \"GradientBoosting\", \"MultipleLayerPerceptron\", \"KNeighboors\",\n                                    \"LogisticRegression\", \"LinearDiscriminantAnalysis\"]})\n\ng = sns.barplot(\"CrossValMeans\", \"Algorithm\", data = cv_res, palette = \"Set3\",\n               orient = \"h\", **{'xerr': cv_std})\ng.set_xlabel(\"Mean Accuracy\")\ng = g.set_title(\"Cross validation scores\")","35b33812":"# 5\uac00\uc9c0 \ubaa8\ub378\uc5d0 \ub300\ud55c \uadf8\ub9ac\ub4dc \uac80\uc0c9 \ucd5c\uc801\ud654 \uc218\ud589\n    \n# Adaboost\nDTC = DecisionTreeClassifier()\nadaDTC = AdaBoostClassifier(DTC, random_state = 7)\n\nada_param_grid = {\"base_estimator__criterion\" : [\"gini\", \"entropy\"],\n                 \"base_estimator__splitter\": [\"best\", \"random\"],\n                 \"algorithm\": [\"SAMME\", \"SAMME.R\"],\n                 \"n_estimators\": [1,2],\n                 \"learning_rate\": [0.0001,0.001, 0.01, 0.1, 0.2, 0.3, 1.5]}\n\ngsadaDTC = GridSearchCV(adaDTC,param_grid = ada_param_grid, cv = kfold, scoring = \"accuracy\",\n                       n_jobs = 4, verbose = 1)\ngsadaDTC.fit(X_train, Y_train)\nada_best = gsadaDTC.best_estimator_\n\ngsadaDTC.best_score_","62b7a636":"# ExtraTrees\n\nExtC = ExtraTreesClassifier()\n\n# \ucd5c\uc801\uc758 \ub9e4\uac1c \ubcc0\uc218\ub97c\uc704\ud55c \uac80\uc0c9 \uadf8\ub9ac\ub4dc\n\nex_param_grid = {\"max_depth\": [None],\n                \"max_features\": [1,2,10],\n                \"min_samples_split\": [2, 3, 10],\n                \"min_samples_leaf\": [1,3,10],\n                \"bootstrap\": [False],\n                \"n_estimators\": [100, 300],\n                \"criterion\": [\"gini\"]}\n\ngsExtC = GridSearchCV(ExtC, param_grid = ex_param_grid, cv = kfold, scoring = \"accuracy\",\n                     n_jobs = 4, verbose = 1)\n\ngsExtC.fit(X_train, Y_train)\nExtC_best = gsExtC.best_estimator_\n\ngsExtC.best_score_","815f3c0e":"# RandomForestClassifier\nRFC = RandomForestClassifier()\n\n# \ucd5c\uc801\uc758 \ub9e4\uac1c \ubcc0\uc218\ub97c\uc704\ud55c \uac80\uc0c9 \uadf8\ub9ac\ub4dc\nrf_param_grid = {\"max_depth\": [None],\n                \"max_features\": [1,3,10],\n                \"min_samples_split\": [2,3,10],\n                \"min_samples_leaf\": [1,2,10],\n                \"bootstrap\": [False],\n                \"n_estimators\": [100,300],\n                \"criterion\": [\"gini\"]}\n\ngsRFC = GridSearchCV(RFC, param_grid = rf_param_grid, cv=kfold, scoring = \"accuracy\", n_jobs = 4,\n                    verbose = 1)\n\ngsRFC.fit(X_train,Y_train)\nRFC_best = gsRFC.best_estimator_\n\ngsRFC.best_score_\n","1e5b1d51":"# Gradient boosting tunning\n\nGBC = GradientBoostingClassifier()\ngb_param_grid = {\"loss\": [\"deviance\"],\n                \"n_estimators\": [100,200,300],\n                \"learning_rate\": [0.1, 0.05, 0.01],\n                \"max_depth\": [4, 8],\n                \"min_samples_leaf\": [100,150],\n                \"max_features\": [0.3, 0.1]}\n\ngsGBC = GridSearchCV(GBC,param_grid = gb_param_grid, cv = kfold, scoring = \"accuracy\",\n                    n_jobs = 4, verbose = 1)\n\ngsGBC.fit(X_train, Y_train)\nGBC_best = gsGBC.best_estimator_\n\ngsGBC.best_score_","9c3dc688":"# SVC classifier\nSVMC = SVC(probability=True)\nsvc_param_grid = {'kernel': ['rbf'], \n                  'gamma': [ 0.001, 0.01, 0.1, 1],\n                  'C': [1, 10, 50, 100,200,300, 1000]}\n\ngsSVMC = GridSearchCV(SVMC,param_grid = svc_param_grid, cv=kfold, scoring=\"accuracy\", n_jobs= 4, verbose = 1)\n\ngsSVMC.fit(X_train,Y_train)\n\nSVMC_best = gsSVMC.best_estimator_\n\n# Best score\ngsSVMC.best_score_","70c11d37":"def plot_learning_curve(estimator, title, X, y, ylim=None, cv=None,\n                        n_jobs=-1, train_sizes=np.linspace(.1, 1.0, 5)):\n    \"\"\"Generate a simple plot of the test and training learning curve\"\"\"\n    plt.figure()\n    plt.title(title)\n    if ylim is not None:\n        plt.ylim(*ylim)\n    plt.xlabel(\"Training examples\")\n    plt.ylabel(\"Score\")\n    train_sizes, train_scores, test_scores = learning_curve(\n        estimator, X, y, cv=cv, n_jobs=n_jobs, train_sizes=train_sizes)\n    train_scores_mean = np.mean(train_scores, axis=1)\n    train_scores_std = np.std(train_scores, axis=1)\n    test_scores_mean = np.mean(test_scores, axis=1)\n    test_scores_std = np.std(test_scores, axis=1)\n    plt.grid()\n\n    plt.fill_between(train_sizes, train_scores_mean - train_scores_std,\n                     train_scores_mean + train_scores_std, alpha=0.1,\n                     color=\"r\")\n    plt.fill_between(train_sizes, test_scores_mean - test_scores_std,\n                     test_scores_mean + test_scores_std, alpha=0.1, color=\"g\")\n    plt.plot(train_sizes, train_scores_mean, 'o-', color=\"r\",\n             label=\"Training score\")\n    plt.plot(train_sizes, test_scores_mean, 'o-', color=\"g\",\n             label=\"Cross-validation score\")\n\n    plt.legend(loc=\"best\")\n    return plt\n\ng = plot_learning_curve(gsRFC.best_estimator_,\"RF mearning curves\",X_train,Y_train,cv=kfold)\ng = plot_learning_curve(gsExtC.best_estimator_,\"ExtraTrees learning curves\",X_train,Y_train,cv=kfold)\ng = plot_learning_curve(gsSVMC.best_estimator_,\"SVC learning curves\",X_train,Y_train,cv=kfold)\ng = plot_learning_curve(gsadaDTC.best_estimator_,\"AdaBoost learning curves\",X_train,Y_train,cv=kfold)\ng = plot_learning_curve(gsGBC.best_estimator_,\"GradientBoosting learning curves\",X_train,Y_train,cv=kfold)","1980739b":"votingC = VotingClassifier(estimators = [(\"rfc\", RFC_best), (\"extc\", ExtC_best),\n                                        (\"svc\", SVMC_best), (\"adac\", ada_best),\n                                        (\"gbc\", GBC_best)], voting = \"soft\", n_jobs = 4)\n\nvotingC = votingC.fit(X_train, Y_train)","cc9f949d":"# \uc0ac\uc774\ud0b7\ub7f0 import (\ud30c\uc774\uc36c \ub77c\uc774\ube0c\ub7ec\ub9ac\ub97c \uc774\uc6a9\ud55c \uba38\uc2e0\ub7ec\ub2dd \ucc45 \ucc38\uace0)\n# \ubb38\uc81c\uac00 binary \ubd84\ub958 \uc774\ubbc0\ub85c randomforestClassifier\uc744 \ubd88\ub7ec\uc640\uc900\ub2e4.\n\n#from sklearn.ensemble import RandomForestClassifier\n#from sklearn import metrics\n#from sklearn.model_selection import train_test_split","e3141f2b":"# test \ud558\uae30\uc804 validation \uacfc\uc815\uc744 \uac70\uccd0\uc8fc\uc5b4\uc57c \ud55c\ub2e4.\n\n#X_train = df_train.drop(\"Survived\", axis = 1).values\n#target_label = df_train[\"Survived\"].values\n#X_test = df_test.values","31b66b9a":"#X_tr, X_vld, y_tr, y_vld = train_test_split(X_train, target_label, test_size = 0.3, random_state = 2019)\n\n# \ud30c\ub77c\ubbf8\ud130\ub97c \uc5b4\ub5bb\uac8c \ud29c\ub2dd\ud558\ub290\ub0d0\uc5d0 \ub530\ub77c \uc131\ub2a5\uc774 \ub9ce\uc774 \ucc28\uc774\ub09c\ub2e4. \uacbd\ud5d8\uc774 \uc911\uc694\ud558\ubbc0\ub85c \ub9ce\uc774 \ucc3e\uc544\ubcf4\uace0 \uc0ac\uc6a9\ud55c\ub2e4.\n# train \ub370\uc774\ud130\uc758 30%\ub97c validation\uc73c\ub85c \uc8fc\uace0 70%\uc744 train\uc73c\ub85c \ub454\ub2e4","ae83f257":"# \ubaa8\ub378 \uc138\uc6b0\uace0 train set\uc5d0 \ud559\uc2b5\uc2dc\ud0a4\uae30 (default setting)\n\n#model = RandomForestClassifier()\n#model.fit(X_tr, y_tr)","98656379":"# validation\uc744 \uac00\uc9c0\uace0 \uc608\uce21\ud558\uae30 \n\n#prediction = model.predict(X_vld)","cce115db":"#prediction","6e675a40":"#print(\"\ucd1d {}\uba85 \uc911 {:.2f}%\uc758 \uc815\ud655\ub3c4\ub85c \uc0dd\uc874 \uc608\uce21\".format(y_vld.shape[0], 100*metrics.accuracy_score\n                                           #(prediction, y_vld)))","70aad43a":"#model.feature_importances_","e74dfce8":"#from pandas import Series","a09e8531":"#feature_importance = model.feature_importances_\n#Series_feat_imp = Series(feature_importance, index = df_test.columns)","213db049":"#df_test.head()#","384dd5f7":"#plt.figure(figsize = (8,8))#\n#Series_feat_imp.sort_values(ascending = True).plot.barh()\n#plt.xlabel(\"Feature importance\")\n#plt.ylabel(\"Feature\")\n#plt.show()\n\n# Feature Importance\ub97c \ubcf4\uace0 \uc911\uc694\ud558\uc9c0 \uc54a\uc740 feature\ub97c selection\ud560 \uc218\ub3c4 \uc788\ub2e4.","c0eb3e7e":"submission = pd.read_csv(\"..\/input\/gender_submission.csv\")","91e7f9dc":"submission.head()","059e52c3":"df_test[\"Fare\"].fillna(\"35.6271\", inplace = True)\nX_test = df_test.values","635dd903":"prediction = votingC.predict(X_test)","93cf8ed5":"submission[\"Survived\"] = prediction","4668cf4c":"submission.to_csv(\".\/The_first_submission.csv\", index = False)","62d45c2e":"****Family: SibSp + Parch**** (Family\ub77c\ub294 \uc0c8\ub85c\uc6b4 feature\ub97c \ub9cc\ub4e0\ub2e4.)","89194173":"### plot learning curves","e1322145":"****One Hot Encoding****","04712b83":"****FARE\uc5d0 \ub530\ub978 \uc0dd\uc874\ub960 \ud655\uc778****","0519a142":"****Age, Sex, Pclass (violinplot)****","c75d406a":"****Machine Leanrning Model Development****","8326ac51":"****Cabin\uc5d0 \ub530\ub978 \uc0dd\uc874\ub960 \ud655\uc778\uc740 \uacb0\uce21\uce58\uac00 \ub300\ubd80\ubd84\uc774\uae30 \ub54c\ubb38\uc5d0 \uc81c\uc678\ud55c\ub2e4.****","8202febb":"****Embarked\uc5d0 \ub530\ub978 \uc0dd\uc874\ub960 \ud655\uc778****","ad4f1eec":"**** Age\ub97c \uc774\uc6a9\ud558\uc5ec \uc5f0\uc18d\ud615 \ubcc0\uc218\ub97c \ubc94\uc8fc\ud615 \ubcc0\uc218\ub85c \ubc14\uafd4\ubcf4\uae30****","0284ee48":"\ubc14\uadf8\ub798\ud504\uc758 \uc815\ud655\ub3c4\ub97c \ud655\uc778\ud558\uace0 \uc5b4\ub5a4 \ubaa8\ub378\ub4e4\ub85c \uc559\uc0c1\ube14\ud560\uac74\uc9c0 \uacb0\uc815 \n(Practice \uacfc\uc815\uc744 \ub530\ub77c\uac00\uba70 SVC, AdaBoost, RandomForest, ExtraTrees, GradientBoosing\uc744 \uc120\ud0dd)","b8a71c2d":"****Age Feature Engineering****","231f3d94":"****Correlaton Between The Features****","30a8649c":"****Pclass\uc5d0 \ub530\ub978 \uc0dd\uc874\ub960 \ud655\uc778****","ac770c16":"### Ensemble Practice","a3c2975d":"****Feature Importance****\n\uc5b4\ub5a4 feature\uc5d0 \uc774 \ubaa8\ub378\uc774 \uac00\uc7a5 \uc601\ud5a5\uc744 \ub9ce\uc774 \ubc1b\ub294\uac00","c8441a81":"****#002 EDA\uc758 \uc9c4\ud589 (feature\ub4e4\uac04\uc758 \uc5b4\ub5a4 \uad00\uacc4\uac00 \uc788\ub294\uc9c0) \n\uc5b4\ub5a4 \ubaa8\ub378\uc744 \uc4f8\uc9c0 \uacb0\uc815\ud558\uac8c \ud558\ub294 \uacfc\uc815****","a4b49846":"****Submission****","c0bcf0ec":"****Machine Learning Model\uc744 \ub9cc\ub4e4\uae30 \uc804\uc5d0 \ub9c8\uc9c0\ub9c9 \ub370\uc774\ud130 \uc815\ub9ac****","c723d4e8":"10\uac1c\uc758 \ubd84\ub958\uae30\ub97c \uc0ac\uc6a9\ud558\uc5ec kfold \uad50\ucc28\uac80\uc99d \uc808\ucc28\ub97c \ud1b5\ud574 \uac01\uac01\uc758 \ud3c9\uade0 \uc815\ud655\ub3c4 \ud3c9\uac00\n\n* SVC\n* Decision Tree\n* AdaBoost\n* Random Forest\n* Extra Trees\n* Gradient Boosting\n* Multiple layer perceptron (neural network)\n* KNN\n* Logistic regression\n* Linear Discriminant Analysis","9b07dc6f":"****Embarked Feature Engineering****","536dfcbf":"****#003 Feature Engineering****\nFeature Engineering\uc740 train, test \ub458 \ub2e4 \uc801\uc6a9 \uc2dc\ucf1c\uc8fc\uc5b4\uc57c \ud55c\ub2e4.","0dacb4bd":"### combining models","53efae92":"****Pearson Coefficient Hitmap****","5ec6ddf1":"****string data\ub97c numerical data\ub85c \ubc14\uafb8\ub294 \uc791\uc5c5****","d0cf48a6":"****Ticket\uc5d0 \ub530\ub978 \uc0dd\uc874\ub960 \ud655\uc778****\n****Ticket\uc740 str(\ubb38\uc790\uc5f4)\uc758 \uc885\ub958\uac00 \ub9e4\uc6b0 \ub2e4\uc591\ud558\ub2e4. \uacf5\ud1b5\uc810\uc744 \ud30c\uc545\ud558\uace0 feature engineering\uc5d0\uc11c \ub2e4\ub904\uc11c \uc0c8\ub85c\uc6b4 feature\ub97c \uc0dd\uc131\n\ud558\uc5ec \ud655\uc778\ud55c\ub2e4. \uc77c\ub2e8 \uc81c\uc678\ud55c\ub2e4.****","367737af":"****AGE\uc5d0 \ub530\ub978 \uc0dd\uc874\ub960 \ud655\uc778****","6fd8565f":"****#001 \ub370\uc774\ud130 \ud30c\uc545\ud558\uae30****","b568570c":"#### Hyperparameter tunning for best models","5c782b70":"****Random Forest****","674b7495":"Interpreting The Heatmap\nThe first thing to note is that only the numeric features are compared as it is obvious that we cannot correlate between alphabets or strings. Before understanding the plot, let us see what exactly correlation is.\n\nPOSITIVE CORRELATION: If an increase in feature A leads to increase in feature B, then they are positively correlated. A value 1 means perfect positive correlation.\n\nNEGATIVE CORRELATION: If an increase in feature A leads to decrease in feature B, then they are negatively correlated. A value -1 means perfect negative correlation.\n\nNow lets say that two features are highly or perfectly correlated, so the increase in one leads to increase in the other. This means that both the features are containing highly similar information and there is very little or no variance in information. This is known as MultiColinearity as both of them contains almost the same information.\n\nSo do you think we should use both of them as one of them is redundant. While making or training models, we should try to eliminate redundant features as it reduces training time and many such advantages.\n\nNow from the above heatmap,we can see that the features are not much correlated. \n\n\ud788\ud2b8 \ub9f5 \ud574\uc11d\n\uac00\uc7a5 \uba3c\uc800 \uc720\uc758\ud560 \uc810\uc740 \uc54c\ud30c\ubcb3\uc774\ub098 \ubb38\uc790\uc5f4 \uac04\uc758 \uc0c1\uad00 \uad00\uacc4\uac00 \uba85\ud655\ud558\uc9c0 \uc54a\uc73c\ubbc0\ub85c \uc22b\uc790 \uae30\ub2a5 \ub9cc \ube44\uad50\ub41c\ub2e4\ub294 \uac83\uc785\ub2c8\ub2e4. \uc904\uac70\ub9ac\ub97c \uc774\ud574\ud558\uae30 \uc804\uc5d0 \uc815\ud655\ud788 \uc5b4\ub5a4 \uc0c1\uad00 \uad00\uacc4\uac00 \uc788\ub294\uc9c0 \ubd05\uc2dc\ub2e4.\n\n\uae0d\uc815\uc801 \uc778 \uc0c1\uad00 \uad00\uacc4 : \ud53c\uccd0 A\uac00 \uc99d\uac00\ud558\uba74 \ud53c\uccd0 B\uac00 \uc99d\uac00\ud558\uace0 \uae0d\uc815\uc801 \uc778 \uc0c1\uad00 \uad00\uacc4\uac00 \uc788\uc2b5\ub2c8\ub2e4. \uac12 1\uc740 \uc644\uc804\ud55c \uc591\uc758 \uc0c1\uad00 \uad00\uacc4\ub97c \uc758\ubbf8\ud569\ub2c8\ub2e4.\n\n\ubd80\uc815\uc801\uc778 \uc0c1\uad00 \uad00\uacc4 : \ud53c\uccd0 A\uc758 \uc99d\uac00\uac00 \ud53c\uccd0 B\uc758 \uac10\uc18c\ub85c \uc774\uc5b4\uc9c4\ub2e4\uba74, \uadf8\ub4e4\uc740 \uc74c\uc758 \uc0c1\uad00 \uad00\uacc4\uac00 \uc788\uc2b5\ub2c8\ub2e4. \uac12 -1\uc740 \uc644\uc804\ud55c \uc74c\uc758 \uc0c1\uad00 \uad00\uacc4\ub97c \uc758\ubbf8\ud569\ub2c8\ub2e4.\n\n\uc774\uc81c \ub450 \uac00\uc9c0 \uae30\ub2a5\uc774 \uace0\ub3c4\ub85c \ub610\ub294 \uc644\ubcbd\ud558\uac8c \uc0c1\ud638 \uc5f0\uad00\ub418\uc5b4 \uc788\uc73c\ubbc0\ub85c \ud558\ub098\uc758 \uc99d\uac00\ub294 \ub2e4\ub978 \ud558\ub098\uc758 \uc99d\uac00\ub97c \ucd08\ub798\ud569\ub2c8\ub2e4. \uc989, \ub450 \uae30\ub2a5 \ubaa8\ub450 \ub9e4\uc6b0 \uc720\uc0ac\ud55c \uc815\ubcf4\ub97c \ud3ec\ud568\ud558\uace0 \uc788\uc73c\uba70 \uc815\ubcf4\uc5d0 \uac70\uc758 \ucc28\uc774\uac00 \uc5c6\uc2b5\ub2c8\ub2e4. \uc774 \ub450 \uac00\uc9c0 \ubaa8\ub450 \uac70\uc758 \ub3d9\uc77c\ud55c \uc815\ubcf4\ub97c \ud3ec\ud568\ud558\uae30 \ub54c\ubb38\uc5d0 MultiColarisity\ub77c\uace0\ud569\ub2c8\ub2e4.\n\n\uadf8\ub798\uc11c \uadf8\ub4e4 \uc911 \ud558\ub098\uac00 \ubd88\ud544\uc694\ud558\ubbc0\ub85c \uc6b0\ub9ac\ub294 \ub458 \ub2e4 \uc0ac\uc6a9\ud574\uc57c\ud560 \ud544\uc694\uac00 \uc5c6\uc2b5\ub2c8\ub2e4. \ubaa8\ub378\uc744 \ub9cc\ub4e4\uac70\ub098 \ud6c8\ub828\ud558\ub294 \ub3d9\uc548 \uc6b0\ub9ac\ub294 \uad50\uc721 \uc2dc\uac04\uacfc \ub9ce\uc740 \uc774\uc810\uc744 \uc904\uc774\uba74\uc11c \uc911\ubcf5 \uae30\ub2a5\uc744 \uc81c\uac70\ud558\ub824\uace0 \ub178\ub825\ud574\uc57c\ud569\ub2c8\ub2e4.\n\n\uc704\uc758 \ud788\ud2b8 \ub9f5\uc5d0\uc11c \uad00\ub828\uc774 \ub9ce\uc740 \uc0c1\uad00 \uad00\uacc4\uac00\uc5c6\ub294 \uac83\uc744 \ubcfc \uc218 \uc788\uc2b5\ub2c8\ub2e4. "}}