{"cell_type":{"f8ac37b0":"code","cbfdf853":"code","ee813bc4":"code","1d0bd77c":"code","04b99515":"code","92a1f4b7":"code","2495f1ae":"code","822ac2be":"code","b5095cef":"code","f57136fd":"code","ed9d9ca5":"code","88c799d3":"code","1b6a83d1":"code","14f2275a":"code","067cc364":"code","780e5925":"code","1136827c":"code","73442911":"code","f315fca8":"code","ed4c31e4":"code","9c5db1cd":"markdown","05cd5541":"markdown","998b5c99":"markdown"},"source":{"f8ac37b0":"import numpy as np\nimport pandas as pd\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","cbfdf853":"# import tensorflow as tf\nimport tensorflow.compat.v1 as tf\nimport tensorflow_datasets as tfds\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\nimport tempfile\nimport pprint\n\nfrom PIL import Image, ImageOps\n\nimport glob\nimport io\nimport os\nimport yaml\n\nimport IPython.display as display\n\n%matplotlib inline","ee813bc4":"train = pd.read_csv('\/kaggle\/input\/digit-recognizer\/train.csv')\n\nprint(train.shape)\ntrain.head()","1d0bd77c":"test = pd.read_csv('\/kaggle\/input\/digit-recognizer\/test.csv')\n\nprint(test.shape)\ntest.head()","04b99515":"class TFRecordGenerator(object):    \n    def __init__(self, df, cols, img_size, mode=None):\n        self.img_size = img_size\n        self.images = df[cols].values.reshape(-1,28,28,1).astype(np.uint8)\n        \n        self.mode = mode\n        if self.mode != \"test\":\n            self.labels = df['label'].values\n        else:\n            self.labels = np.zeros(len(df))\n            \n        self.features_dataset = tf.data.Dataset.from_tensor_slices((self.images, self.labels))\n        self.filename = f\"mnist_{mode}.tfrecord\"\n        \n    \n    def _bytes_feature(self, value):\n      \"\"\"Returns a bytes_list from a string \/ byte.\"\"\"\n      if isinstance(value, type(tf.constant(0))):\n        value = value.numpy() # BytesList won't unpack a string from an EagerTensor.\n      return tf.train.Feature(bytes_list=tf.train.BytesList(value=[value]))\n\n\n    def _float_feature(self, value):\n      \"\"\"Returns a float_list from a float \/ double.\"\"\"\n      return tf.train.Feature(float_list=tf.train.FloatList(value=[value]))\n\n    \n    def _int64_feature(self, value):\n      \"\"\"Returns an int64_list from a bool \/ enum \/ int \/ uint.\"\"\"\n      return tf.train.Feature(int64_list=tf.train.Int64List(value=[value]))\n    \n    \n    def serialize_example(self, feature0, feature1):\n      \"\"\"\n      Creates a tf.train.Example message ready to be written to a file.\n      \"\"\"\n      # Create a dictionary mapping the feature name to the tf.train.Example-compatible\n      # data type.\n      feature = {\n          'image': self._bytes_feature(tf.io.encode_jpeg(feature0)), # cast uint tesnsor -> bytes\n          'label': self._int64_feature(feature1),\n      }\n\n      # Create a Features message using tf.train.Example.\n      example_proto = tf.train.Example(features=tf.train.Features(feature=feature))\n      return example_proto.SerializeToString()\n\n\n    def generator(self):\n      for features in self.features_dataset:\n        yield self.serialize_example(*features)\n    \n    \n    def show_sample(self, num_show=1):\n        for f0,f1 in self.features_dataset.take(num_show):\n          print(f1)\n          plt.imshow(f0.numpy().reshape(self.img_size[0], self.img_size[1]))\n\n    \n    def write(self):\n        serialized_features_dataset = tf.data.Dataset.from_generator(\n            self.generator, output_types=tf.string, output_shapes=())\n        \n        \n        print(f\"{self.filename} writing ...\")\n        writer = tf.data.experimental.TFRecordWriter(self.filename)\n        writer.write(serialized_features_dataset)\n        print(\"done!\")","92a1f4b7":"DS, info = tfds.load(name='mnist', split='train', with_info=True,\n                     as_supervised=True, try_gcs=True)","2495f1ae":"DS","822ac2be":"features_dataset = tf.data.Dataset.from_tensor_slices((train[list(train.columns[1:])].values.reshape(-1,28,28,1).astype(np.uint8), train['label'].values))\nfeatures_dataset","b5095cef":"for f0,f1 in features_dataset.take(1):\n    print(f1)\n    plt.imshow(f0.numpy().reshape(28,28))","f57136fd":"pixel_columns = train.columns[1:].tolist()\n\ntrain_ds = TFRecordGenerator(train, pixel_columns, (28,28), mode=\"train\")\ntest_ds = TFRecordGenerator(test, pixel_columns, (28,28), mode=\"test\")","ed9d9ca5":"train_ds.show_sample(5)","88c799d3":"test_ds.show_sample()","1b6a83d1":"train_ds.write()","14f2275a":"test_ds.write()","067cc364":"!ls","780e5925":"filenames = ['mnist_train.tfrecord']\nraw_dataset = tf.data.TFRecordDataset(filenames)\nraw_dataset","1136827c":"# Create a description of the features.\nfeature_description = {\n    'image': tf.io.FixedLenFeature([], tf.string, default_value=''),\n    'label': tf.io.FixedLenFeature([], tf.int64, default_value=0),\n}\n\ndef _parse_function(example_proto):\n  # Parse the input `tf.train.Example` proto using the dictionary above.\n  return tf.io.parse_single_example(example_proto, feature_description)","73442911":"def _decode_image_function(example):\n    image = example['image']\n    label = example['label']\n    \n    image = tf.image.decode_jpeg(image, channels=1)\n    image = tf.reshape(image, [28,28,1])\n    return image, label","f315fca8":"parsed_dataset = raw_dataset.map(_parse_function)\nparsed_dataset = parsed_dataset.map(_decode_image_function)\nparsed_dataset","ed4c31e4":"for parsed_record in parsed_dataset.take(5):\n    images = parsed_record[0].numpy()\n    labels = parsed_record[1]\n    \n    print(labels)\n    images = images.reshape(28,28)\n    images = Image.fromarray(images)\n    display.display(images)","9c5db1cd":"### Writing a TFRecord file","05cd5541":"### \u53c2\u8003\n\nhttps:\/\/www.tensorflow.org\/tutorials\/load_data\/tfrecord\n\nhttps:\/\/github.com\/tensorflow\/tpu\/blob\/master\/tools\/colab\/image_classification_converter.ipynb\n\nhttps:\/\/www.tensorflow.org\/api_docs\/python\/tf\/io\/encode_jpeg\n\nhttps:\/\/stackoverflow.com\/questions\/62870656\/file-system-scheme-local-not-implemented-in-google-colab-tpu","998b5c99":"### Reading a TFRecord file"}}