{"cell_type":{"fc99fc2a":"code","70919057":"code","7f052bbd":"code","fdc49c7c":"code","5f9cc079":"code","8d51357d":"code","24214d36":"code","41d21cca":"code","cf0817c0":"code","63fc28dc":"code","0d5e64d7":"code","5fde947b":"code","2584673d":"code","04392b1d":"code","5de5f03f":"code","821060b0":"code","901d73ef":"code","bce546c2":"code","1d7a8aa4":"code","5aee8fd0":"code","746cb084":"code","ac437a91":"code","86cad6ae":"code","a90b697e":"code","d8a1e28a":"code","dea3431a":"code","943bd380":"code","c9139810":"code","6076f402":"code","d14bf493":"code","447da97d":"code","339e3dcf":"code","5e2c324d":"code","edc966f8":"code","f3f88f0f":"code","0e0ee9f6":"code","139c40c4":"code","17b16fd0":"code","cd59fe23":"code","db66ce08":"code","cf4338c2":"code","9f37cd1f":"code","7cc7f830":"code","e79258fa":"code","d62971e5":"code","c2524f3b":"code","d251a018":"code","388d1d6a":"code","2c363a92":"code","1aa6640b":"code","57322ef3":"code","bdf2c45f":"code","9be4f97f":"code","7acfafb9":"code","85f828f5":"code","4a8a163e":"code","8d6e63e3":"code","ab874236":"code","ab1bd96d":"markdown","b00b4d23":"markdown","66bfaf61":"markdown","654bc181":"markdown","41a973c5":"markdown","78fb7ec6":"markdown","af918db9":"markdown","c0b08200":"markdown","c0724351":"markdown","d8d572c5":"markdown","c90f61ff":"markdown","6ea5b348":"markdown","70f4f282":"markdown","dc7f92da":"markdown","66561eba":"markdown","699ce4d2":"markdown","8836fb7a":"markdown"},"source":{"fc99fc2a":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt ","70919057":"df = pd.read_csv('..\/input\/drug-classification\/drug200.csv')","7f052bbd":"pd.set_option('display.max_rows',None)\ndf.head(200)","fdc49c7c":"df.isna().sum()","5f9cc079":"# To find the correlation using pearson method\ndf.corr(method ='pearson')","8d51357d":"# Heat Map\nimport seaborn as sns; sns.set_theme()\n\nax = sns.heatmap(df.corr(method ='pearson'),linewidths=.5, center=0)","24214d36":"df.dtypes","41d21cca":"obj_df = df[['Sex','BP','Cholesterol','Drug']]","cf0817c0":"obj_df.head()","63fc28dc":"for i in obj_df.columns:\n    print(i)\n    print(obj_df[i].value_counts())\n    print(\"-----------------------\")","0d5e64d7":"#One Hot Encoding using pd.get_dummies\npd.get_dummies(obj_df, columns=['Sex']).head()","5fde947b":"#One Hot Encoding using sklearn\nfrom sklearn.preprocessing import OneHotEncoder\nenc = OneHotEncoder()\n\nenc_result = enc.fit_transform(df[['Sex']])\n\npd.DataFrame(enc_result.toarray(), columns = enc.categories_).head()","2584673d":"enc_result","04392b1d":"#Ordinal using sklearn\nfrom sklearn.preprocessing import OrdinalEncoder\nenc = OrdinalEncoder()\ndf['BP_enc'] = enc.fit_transform(obj_df[['BP']])\ndf['Cholesterol_enc'] = enc.fit_transform(obj_df[['Cholesterol']])\n\ndf","5de5f03f":"#Ordinal using sklearn\nfrom sklearn.preprocessing import OrdinalEncoder\nenc = OrdinalEncoder()\ndf['Drug_enc'] = enc.fit_transform(obj_df[['Drug']])","821060b0":"d = df.drop(columns=['Sex','BP','Cholesterol','Drug'])","901d73ef":"d","bce546c2":"X = d.iloc[:, :-1].values\ny = d.iloc[:, -1].values","1d7a8aa4":"from sklearn.model_selection import train_test_split\nX_train,X_test,y_train,y_test = train_test_split(X,y, test_size=0.2, random_state=0)","5aee8fd0":"pd.reset_option('display')\nprint(X_train)","746cb084":"print(y_train)","ac437a91":"print(X_test)","86cad6ae":"print(y_test)","a90b697e":"from sklearn.preprocessing import StandardScaler\nsc = StandardScaler()\nX_train = sc.fit_transform(X_train)\nX_test = sc.transform(X_test)","d8a1e28a":"# To find the correlation using pearson method\ndf.corr(method ='pearson')","dea3431a":"# Heat Map\nimport seaborn as sns; sns.set_theme()\n\nax = sns.heatmap(df.corr(method ='pearson'),linewidths=.5, center=0)","943bd380":"results = {}","c9139810":"from sklearn.tree import DecisionTreeClassifier\nclassifier = DecisionTreeClassifier(criterion='entropy', random_state=0)\nclassifier.fit(X_train,y_train)","6076f402":"print(classifier.predict([[23,7.298,1.0,0.0]]))","d14bf493":"y_pred = classifier.predict(X_test)\n\nfrom sklearn.metrics import confusion_matrix, accuracy_score\ncm = confusion_matrix(y_test, y_pred)\nprint(cm)\naccuracy_score(y_test, y_pred)","447da97d":"results[\"Decision Tree\"] = accuracy_score(y_test, y_pred)","339e3dcf":"# Print Text Representation\nfrom sklearn import tree\ntext_representation = tree.export_text(classifier)\nprint(text_representation)","5e2c324d":"# Plot Tree with plot_tree\nplt.figure(figsize=(20,20))\ntree.plot_tree(classifier,filled=True)\nplt.title(\"plot_tree for Decision tree classifier\")\nplt.show()","edc966f8":"from sklearn.ensemble import RandomForestClassifier\nclassifier = RandomForestClassifier(n_estimators = 10, criterion = 'entropy', random_state = 0)\nclassifier.fit(X_train, y_train)","f3f88f0f":"y_pred = classifier.predict(X_test)\n\nfrom sklearn.metrics import confusion_matrix, accuracy_score\ncm = confusion_matrix(y_test, y_pred)\nprint(cm)\naccuracy_score(y_test, y_pred)","0e0ee9f6":"results[\"Random Forest\"] = accuracy_score(y_test, y_pred)","139c40c4":"from sklearn.svm import SVC\nclassifier = SVC(kernel='linear', random_state=0)\nclassifier.fit(X_train,y_train)","17b16fd0":"y_pred = classifier.predict(X_test)\n\nfrom sklearn.metrics import confusion_matrix, accuracy_score\ncm = confusion_matrix(y_test, y_pred)\nprint(cm)\naccuracy_score(y_test, y_pred)","cd59fe23":"results[\"SVM\"] = accuracy_score(y_test, y_pred)","db66ce08":"from sklearn.linear_model import LogisticRegression\nclassifier = LogisticRegression(random_state = 0)\nclassifier.fit(X_train, y_train)","cf4338c2":"y_pred = classifier.predict(X_test)\n\nfrom sklearn.metrics import confusion_matrix, accuracy_score\ncm = confusion_matrix(y_test, y_pred)\nprint(cm)\naccuracy_score(y_test, y_pred)","9f37cd1f":"results[\"Logistic Regression\"] = accuracy_score(y_test, y_pred)","7cc7f830":"from sklearn.neighbors import KNeighborsClassifier\nclassifier = KNeighborsClassifier(n_neighbors = 5, metric = 'minkowski', p = 2)\nclassifier.fit(X_train, y_train)","e79258fa":"y_pred = classifier.predict(X_test)\n\nfrom sklearn.metrics import confusion_matrix, accuracy_score\ncm = confusion_matrix(y_test, y_pred)\nprint(cm)\naccuracy_score(y_test, y_pred)","d62971e5":"results[\"KNN\"] = accuracy_score(y_test, y_pred)","c2524f3b":"from sklearn.svm import SVC\nclassifier = SVC(kernel = 'rbf', random_state = 0)\nclassifier.fit(X_train, y_train)","d251a018":"y_pred = classifier.predict(X_test)\n\nfrom sklearn.metrics import confusion_matrix, accuracy_score\ncm = confusion_matrix(y_test, y_pred)\nprint(cm)\naccuracy_score(y_test, y_pred)","388d1d6a":"results[\"Kernel SVM\"] = accuracy_score(y_test, y_pred)","2c363a92":"from sklearn.naive_bayes import GaussianNB\nclassifier = GaussianNB()\nclassifier.fit(X_train,y_train)","1aa6640b":"y_pred = classifier.predict(X_test)\n\nfrom sklearn.metrics import confusion_matrix, accuracy_score\ncm = confusion_matrix(y_test, y_pred)\nprint(cm)\naccuracy_score(y_test, y_pred)","57322ef3":"results[\"Naive Bayes\"] = accuracy_score(y_test, y_pred)","bdf2c45f":"result_df = pd.DataFrame.from_dict(results ,orient = \"index\",columns=[\"Score\"])","9be4f97f":"plt.figsize=(20,5)\n\nsns.barplot(x = result_df.index,y = result_df.Score)\n\nplt.xticks(rotation=60)\n\nplt.show()","7acfafb9":"result_df","85f828f5":"classifier = RandomForestClassifier(n_estimators = 10, criterion = 'entropy', random_state = 0)\nmodel = classifier.fit(X_train, y_train)\nimportance_value=np.round((model.feature_importances_)*100,2)","4a8a163e":"importance_features=[(feature,importance) for feature,importance in zip(df.columns,importance_value)]\nimportance_features=sorted(importance_features,key=lambda x: x[1],reverse=True) \n[print('Variable: {:20} Importance: {}'.format(*pair)) for pair in importance_features];","8d6e63e3":"importance_df = pd.DataFrame(importance_features, columns=['Variable', 'Importance_Score'])","ab874236":"plt.figsize=(20,5)\n\nsns.barplot(x = importance_df.Variable,y = importance_df .Importance_Score)\n\nplt.xticks(rotation=60)\n\nplt.show()","ab1bd96d":"### Encoding dependent variable","b00b4d23":"## Encoding Categorical Variables","66bfaf61":"### Naive Bayes","654bc181":"### Decision Tree","41a973c5":"### Encoding independent variable","78fb7ec6":"### Logistic Regression","af918db9":"## Importing the libraries","c0b08200":"### KNN","c0724351":"### SVM","d8d572c5":"## Feature Scaling","c90f61ff":"## Data Modelling","6ea5b348":"### Random Forest","70f4f282":"## Splitting the dataset into the Training set and Test set","dc7f92da":"### Kernel SVM","66561eba":"## Importing the dataset","699ce4d2":"## Feature Importance","8836fb7a":"## Results"}}