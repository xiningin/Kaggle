{"cell_type":{"1e45acf7":"code","b43b1b19":"code","31af098c":"code","8cb2beb3":"code","db6fe42b":"code","d4762e22":"code","08498f3a":"code","6ef95876":"code","59545335":"code","e75f07c1":"code","ef7649a3":"code","c3cdc3e2":"code","9786896a":"code","738488bb":"code","df75d0dd":"code","77a99e82":"code","835e3e8b":"code","010dd7e0":"code","2660e5e1":"code","cfa53e1c":"code","9cb730e9":"code","da86b855":"code","8895334a":"code","80091619":"code","3b786990":"code","f11b2482":"code","6e6c736e":"code","199ae821":"code","a0ccf2c6":"code","7568e395":"code","2711cc9e":"code","49f6386e":"code","3d0c664e":"code","72f16f44":"code","15c712a9":"code","0d342b1c":"code","500c1b9c":"code","52ba84c5":"code","50519508":"code","819e0c73":"code","c707ba76":"code","5df4cb20":"code","000b1e00":"code","8a728f7e":"code","4ea30829":"code","13caea45":"code","4a11cdf8":"code","505cfd9a":"code","311ab0ca":"code","8fdd20cd":"code","57606270":"code","c861277b":"code","dcb4cc16":"code","7dd94cac":"code","27f6e547":"code","b9d67859":"code","1089465e":"code","cce4f319":"code","55275478":"code","46439fd2":"code","ab222f21":"code","07a4b92d":"code","719c7d65":"code","f4f14b84":"code","1ba03716":"code","2ecfcca9":"code","34f90443":"code","5c3dbb99":"code","6bb37f69":"code","cdbdb7c0":"code","0a56ac2e":"code","8c986bb0":"code","5e307604":"code","1ba33040":"code","8e6f257c":"code","4fc08353":"code","e71d9e03":"code","6f55c5f9":"code","300f44f5":"code","305735b9":"code","3a5cd5b7":"code","2103fa77":"code","2de95314":"code","3c39fda1":"code","14a851f2":"code","855ff2dd":"code","696c50d0":"code","d109dd19":"code","82d70b36":"code","bc9a6dcf":"code","2ebf6bb1":"code","a67b5df4":"code","5409e839":"code","140b900d":"code","37aef952":"code","28d720c5":"code","d04556eb":"code","61342ca7":"markdown","52f6c586":"markdown","936c2fad":"markdown","89c9142f":"markdown","ea7af7e1":"markdown","d05ea9aa":"markdown","ec78bca2":"markdown","88db6538":"markdown","b0a11d42":"markdown","b9f6e6da":"markdown","941ebd67":"markdown","d33173ad":"markdown","77bd750d":"markdown","0ec371d9":"markdown","40b6af2b":"markdown","5cfa221c":"markdown","93ecc38a":"markdown","328ecd4f":"markdown","2ed726b2":"markdown","f565425c":"markdown","8a84587a":"markdown","9d78bf59":"markdown","805269db":"markdown","8cc20d77":"markdown","8574e024":"markdown","64e19ce7":"markdown","5cb35b24":"markdown","07f8ecd4":"markdown","97b6b2bb":"markdown","7f3564bf":"markdown","af0e412a":"markdown","73f248f0":"markdown","17baa46f":"markdown","41fa7a97":"markdown","6514934c":"markdown","5bcdfa9c":"markdown","41d90ff0":"markdown","c3b5dea3":"markdown","2ac83c51":"markdown","c75118a4":"markdown","07bdb3ca":"markdown","27443974":"markdown","d8416942":"markdown","0645aab6":"markdown","430649ce":"markdown","a53985a1":"markdown"},"source":{"1e45acf7":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nfrom pandas import DataFrame\nimport matplotlib.pyplot as plt","b43b1b19":"import os\nprint(os.listdir(\"..\/input\"))","31af098c":"raw_data = pd.read_csv('..\/input\/train.csv')","8cb2beb3":"raw_data.describe()","db6fe42b":"raw_data.head(10)","d4762e22":"numeric_colmuns = []\nnumeric_colmuns.extend(list(raw_data.dtypes[raw_data.dtypes == np.int64].index))\nnumeric_colmuns.extend(list(raw_data.dtypes[raw_data.dtypes == np.float64].index))","08498f3a":"numeric_colmuns","6ef95876":"numeric_colmuns.remove('SalePrice')\nnumeric_colmuns.append('SalePrice')","59545335":"numeric_colmuns.remove('Id')","e75f07c1":"numeric_data = DataFrame(raw_data, columns=numeric_colmuns)","ef7649a3":"numeric_data.describe()","c3cdc3e2":"numeric_data.head(10)","9786896a":"nan_columns = np.any(pd.isna(numeric_data), axis = 0)\nnan_columns = list(nan_columns[nan_columns == True].index)","738488bb":"nan_columns","df75d0dd":"numeric_data['LotFrontage'] = numeric_data['LotFrontage'].fillna(0)\nnumeric_data['MasVnrArea'] = numeric_data['MasVnrArea'].fillna(0)\nnumeric_data['GarageYrBlt'] = numeric_data['GarageYrBlt'].fillna(0)","77a99e82":"nan_columns = np.any(pd.isna(numeric_data), axis = 0)\nnan_columns = list(nan_columns[nan_columns == True].index)","835e3e8b":"nan_columns","010dd7e0":"import torch\nimport torch.nn as nn","2660e5e1":"numeric_x_columns = list(numeric_data.columns)\nnumeric_x_columns.remove('SalePrice')\nnumeric_y_columns = ['SalePrice']","cfa53e1c":"numeric_x_columns","9cb730e9":"numeric_x_df = DataFrame(numeric_data, columns=numeric_x_columns)\nnumeric_y_df = DataFrame(numeric_data, columns=numeric_y_columns)","da86b855":"numeric_x = torch.tensor(numeric_x_df.values, dtype=torch.float)\nnumeric_y = torch.tensor(numeric_y_df.values, dtype=torch.float)","8895334a":"numeric_x.shape","80091619":"numeric_y.shape","3b786990":"class Net(nn.Module):\n    def __init__(self, D_in, H1, H2, H3, D_out):\n        super(Net, self).__init__()\n        \n        self.linear1 = nn.Linear(D_in, H1)\n        self.linear2 = nn.Linear(H1, H2)\n        self.linear3 = nn.Linear(H2, H3)\n        self.linear4 = nn.Linear(H3, D_out)\n        \n    def forward(self, x):\n        y_pred = self.linear1(x).clamp(min=0)\n        y_pred = self.linear2(y_pred).clamp(min=0)\n        y_pred = self.linear3(y_pred).clamp(min=0)\n        y_pred = self.linear4(y_pred)\n        return y_pred","f11b2482":"H1, H2, H3 = 500, 1000, 200","6e6c736e":"D_in, D_out = numeric_x.shape[1], numeric_y.shape[1]","199ae821":"model1 = Net(D_in, H1, H2, H3, D_out)","a0ccf2c6":"criterion = nn.MSELoss(reduction='sum')","7568e395":"optimizer = torch.optim.SGD(model1.parameters(), lr=1e-4)","2711cc9e":"losses1 = []\n\nfor t in range(500):\n    y_pred = model1(numeric_x)\n    \n    loss = criterion(y_pred, numeric_y)\n    print(t, loss.item())\n    losses1.append(loss.item())\n    \n    if torch.isnan(loss):\n        break\n    \n    optimizer.zero_grad()\n    loss.backward()\n    optimizer.step()","49f6386e":"means, maxs, mins = dict(), dict(), dict()","3d0c664e":"for col in numeric_data:\n    means[col] = numeric_data[col].mean()\n    maxs[col] = numeric_data[col].max()\n    mins[col] = numeric_data[col].min()","72f16f44":"numeric_data = (numeric_data - numeric_data.mean()) \/ (numeric_data.max() - numeric_data.min())","15c712a9":"numeric_x_df = DataFrame(numeric_data, columns=numeric_x_columns)\nnumeric_y_df = DataFrame(numeric_data, columns=numeric_y_columns)","0d342b1c":"numeric_x = torch.tensor(numeric_x_df.values, dtype=torch.float)\nnumeric_y = torch.tensor(numeric_y_df.values, dtype=torch.float)","500c1b9c":"model2 = Net(D_in, H1, H2, H3, D_out)","52ba84c5":"criterion = nn.MSELoss(reduction='sum')","50519508":"optimizer = torch.optim.SGD(model2.parameters(), lr=1e-4)","819e0c73":"losses2 = []\n\nfor t in range(500):\n    y_pred = model2(numeric_x)\n    \n    loss = criterion(y_pred, numeric_y)\n    print(t, loss.item())\n    losses2.append(loss.item())\n    \n    if torch.isnan(loss):\n        break\n    \n    optimizer.zero_grad()\n    loss.backward()\n    optimizer.step()","c707ba76":"plt.figure(figsize=(12, 10))\nplt.plot(range(len(losses2)), losses2)\nplt.show()","5df4cb20":"model3 = Net(D_in, H1, H2, H3, D_out)\noptimizer = torch.optim.SGD(model3.parameters(), lr=1e-4 * 2)","000b1e00":"losses3 = []\n\nfor t in range(500):\n    y_pred = model3(numeric_x)\n    \n    loss = criterion(y_pred, numeric_y)\n    print(t, loss.item())\n    losses3.append(loss.item())\n    \n    if torch.isnan(loss):\n        break\n    \n    optimizer.zero_grad()\n    loss.backward()\n    optimizer.step()","8a728f7e":"plt.figure(figsize=(12, 10))\nplt.plot(range(len(losses2)), losses2)\nplt.plot(range(len(losses3)), losses3)\nplt.show()","4ea30829":"model4 = Net(D_in, H1, H2, H3, D_out)\noptimizer = torch.optim.Adam(model4.parameters(), lr=1e-4 * 2)","13caea45":"losses4 = []\n\nfor t in range(500):\n    y_pred = model4(numeric_x)\n    \n    loss = criterion(y_pred, numeric_y)\n    print(t, loss.item())\n    losses4.append(loss.item())\n    \n    if torch.isnan(loss):\n        break\n    \n    optimizer.zero_grad()\n    loss.backward()\n    optimizer.step()","4a11cdf8":"plt.figure(figsize=(12, 10))\nplt.plot(range(len(losses2)), losses2, label='SGD, 1e-4')\nplt.plot(range(len(losses3)), losses3, label='SGD, 2*1e-4')\nplt.plot(range(len(losses4)), losses4, label = 'Adam, 2*1e-4')\n\nplt.legend(loc='upper right')\nplt.show()","505cfd9a":"non_numeric_columns = [col for col in list(raw_data.columns) if col not in numeric_colmuns]\nnon_numeric_columns.remove('Id')\n\nnon_numeric_columns","311ab0ca":"non_numeric_data = DataFrame(raw_data, columns=non_numeric_columns)","8fdd20cd":"non_numeric_data.describe()","57606270":"non_numeric_data.head(10)","c861277b":"nan_columns = np.any(pd.isna(non_numeric_data), axis=0)\nnan_columns = list(nan_columns[nan_columns == True].index)","dcb4cc16":"nan_columns","7dd94cac":"for col in nan_columns:\n    non_numeric_data[col] = non_numeric_data[col].fillna('N\/A')","27f6e547":"nan_columns = np.any(pd.isna(non_numeric_data), axis = 0)\nnan_columns = list(nan_columns[nan_columns == True].index)","b9d67859":"nan_columns","1089465e":"mapping_table = dict()\n\nfor col in non_numeric_columns:\n    curr_mapping_table = dict()\n    \n    unique_values = pd.unique(non_numeric_data[col])\n    for inx, v in enumerate(unique_values):\n        curr_mapping_table[v] = inx + 1\n        non_numeric_data[col] = non_numeric_data[col].replace(v, inx + 1)\n    \n    mapping_table[col] = curr_mapping_table\n","cce4f319":"non_numeric_data.head()","55275478":"for col in non_numeric_data:\n    means[col] = non_numeric_data[col].mean()\n    maxs[col] = non_numeric_data[col].max()\n    mins[col] = non_numeric_data[col].min()","46439fd2":"non_numeric_data = (non_numeric_data - non_numeric_data.mean()) \/ (non_numeric_data.max() - non_numeric_data.min())","ab222f21":"non_numeric_x_df = DataFrame(non_numeric_data, columns=non_numeric_columns)\nnon_numeric_y_df = DataFrame(numeric_y_df)","07a4b92d":"non_numeric_x = torch.tensor(non_numeric_x_df.values, dtype=torch.float)\nnon_numeric_y = torch.tensor(non_numeric_y_df.values, dtype=torch.float)","719c7d65":"D_in, D_out = non_numeric_x.shape[1], non_numeric_y.shape[1]","f4f14b84":"model5 = Net(D_in, H1, H2, H3, D_out)\noptimizer = torch.optim.Adam(model5.parameters(), lr=1e-4 * 2)","1ba03716":"losses5 = []\n\nfor t in range(500):\n    y_pred = model5(non_numeric_x)\n    \n    loss = criterion(y_pred, non_numeric_y)\n    print(t, loss.item())\n    losses5.append(loss.item())\n    \n    if torch.isnan(loss):\n        break\n    \n    optimizer.zero_grad()\n    loss.backward()\n    optimizer.step()","2ecfcca9":"plt.figure(figsize=(12, 10))\nplt.plot(range(len(losses4)), losses4, label = 'Numeric')\nplt.plot(range(len(losses5)), losses5, label = 'Non-Numeric')\n\nplt.legend(loc='upper right')\nplt.show()","34f90443":"plt.figure(figsize=(12, 10))\nplt.plot(range(len(losses4[-50:])), losses4[-50:], label = 'Numeric')\nplt.plot(range(len(losses5[-50:])), losses5[-50:], label = 'Non-Numeric')\n\nplt.legend(loc='upper right')\nplt.show()","5c3dbb99":"x_df = DataFrame(numeric_x_df, columns=numeric_x_columns)\ny_df = DataFrame(numeric_y_df)","6bb37f69":"for col in non_numeric_columns:\n    x_df[col] = non_numeric_x_df[col]","cdbdb7c0":"x_df.head()","0a56ac2e":"x = torch.tensor(x_df.values, dtype=torch.float)\ny = torch.tensor(y_df.values, dtype=torch.float)","8c986bb0":"D_in, D_out = x.shape[1], y.shape[1]","5e307604":"model6 = Net(D_in, H1, H2, H3, D_out)\noptimizer = torch.optim.Adam(model6.parameters(), lr=1e-4 * 2)","1ba33040":"losses6 = []\n\nfor t in range(500):\n    y_pred = model6(x)\n    \n    loss = criterion(y_pred, y)\n    print(t, loss.item())\n    losses6.append(loss.item())\n    \n    if torch.isnan(loss):\n        break\n    \n    optimizer.zero_grad()\n    loss.backward()\n    optimizer.step()","8e6f257c":"plt.figure(figsize=(12, 10))\nplt.plot(range(len(losses4)), losses4, label = 'Numeric Only')\nplt.plot(range(len(losses5)), losses5, label = 'Non-Numeric Only')\nplt.plot(range(len(losses6)), losses6, label = 'Entire Data')\n\nplt.legend(loc='upper right')\nplt.show()","4fc08353":"plt.figure(figsize=(12, 10))\nplt.plot(range(len(losses4[-50:])), losses4[-50:], label = 'Numeric Only')\nplt.plot(range(len(losses5[-50:])), losses5[-50:], label = 'Non-Numeric Only')\nplt.plot(range(len(losses6[-50:])), losses6[-50:], label = 'Entire')\n\nplt.legend(loc='upper right')\nplt.show()","e71d9e03":"raw_test_data = pd.read_csv('..\/input\/test.csv')","6f55c5f9":"raw_test_data.describe()","300f44f5":"raw_test_data.head(10)","305735b9":"test_x = DataFrame(raw_test_data)\ntest_x = test_x.drop(columns=['Id'])","3a5cd5b7":"for col in numeric_x_columns:\n    test_x[col].fillna(0)","2103fa77":"for col in non_numeric_columns:\n    test_x[col] = test_x[col].fillna('N\/A')","2de95314":"test_x.head()","3c39fda1":"for col in mapping_table.keys():\n    curr_mapping_table = mapping_table[col]\n    for k, v in curr_mapping_table.items():\n        test_x[col] = test_x[col].replace(k, v)","14a851f2":"test_x.head(10)","855ff2dd":"unreplaced_columns = []\n\nfor col in test_x.columns:\n    if 'N\/A' in pd.unique(test_x[col]):\n        unreplaced_columns.append(col)\n        \nprint(unreplaced_columns)","696c50d0":"for col in unreplaced_columns:\n    test_x[col] = test_x[col].replace('N\/A', 0)","d109dd19":"for col in test_x.columns:\n    test_x[col] = (test_x[col] - means[col]) \/ (maxs[col] - mins[col])","82d70b36":"test_y = model6(torch.tensor(test_x.values, dtype=torch.float))","bc9a6dcf":"result = DataFrame(test_y.data.numpy(), columns=['SalePrice'])","2ebf6bb1":"result['SalePrice'] = result['SalePrice'].fillna(0)","a67b5df4":"result['SalePrice'] = result['SalePrice'] * (maxs['SalePrice'] - mins['SalePrice']) + means['SalePrice']","5409e839":"result['Id'] = np.array(result.index)","140b900d":"result['Id'] = result['Id'] + 1461","37aef952":"result = DataFrame(result, columns=['Id', 'SalePrice'])","28d720c5":"result","d04556eb":"result.to_csv('.\/submission.csv', columns=['Id', 'SalePrice'], index=False)","61342ca7":"* Much Better!","52f6c586":"# Linear Regression with Non-Numeric Data","936c2fad":"#### Saving Mean, Max, Min for each Columns","89c9142f":"#### Explore Numeric Data","ea7af7e1":"### NAN Data","d05ea9aa":"### Explore Non-Numeric Data","ec78bca2":"## Normalize","88db6538":"### Find Non-Numeric Data Columns","b0a11d42":"#### Saving Mean, Max, Min for each Columns","b9f6e6da":"# Model Found!!","941ebd67":"---","d33173ad":"__NOTE: Normalizing should be based on train data's mean, max, min__","77bd750d":"# Linear Regression with Entire Data","0ec371d9":"## Dtype Check","40b6af2b":"---","5cfa221c":"#### Assume NAN Values as 'N\/A'","93ecc38a":"# Import Raw Data","328ecd4f":"# NAN Data","2ed726b2":"* Works Better, but not enough","f565425c":"#### Assume NAN Values as 0","8a84587a":"---","9d78bf59":"# Entire Data","805269db":"# Import Library","8cc20d77":"# Normalize","8574e024":"#### Check Shape","64e19ce7":"#### SalePrice to Last Index","5cb35b24":"#### Define Model : 5-Layer Net","07f8ecd4":"## Convert String to int using mapping table","97b6b2bb":"* Looks like similar, so we need closer look","7f3564bf":"## Replace String to Int","af0e412a":"# Explore Data","73f248f0":"# Second Prediction","17baa46f":"#### Remove Id","41fa7a97":"# Make a Prediction","6514934c":"* Works pretty well, but not perfect","5bcdfa9c":"### Find Numeric Data Columns","41d90ff0":"### Get Numeric Data","c3b5dea3":"#### Check NAN Data","2ac83c51":"# Non-Numeric Data","c75118a4":"### Normalize Data","07bdb3ca":"# Numeric Data","27443974":"# Linear Regression with Numeric Data","d8416942":"#### Check NAN Data","0645aab6":"### First Prediction","430649ce":"# Test Data","a53985a1":"---"}}