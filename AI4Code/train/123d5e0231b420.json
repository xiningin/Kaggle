{"cell_type":{"dcb74d27":"code","b960941f":"code","2adbaa3b":"code","762b81f1":"code","46625db7":"code","83bcc660":"code","8fd43761":"code","65d717ed":"code","6378d4c5":"code","b3753ba0":"code","1ae549b4":"code","9fe7f243":"code","ce5a08f6":"code","52063204":"code","79d5c085":"markdown","4c844ce6":"markdown","3df26b34":"markdown","8e2d259f":"markdown","cdb61223":"markdown"},"source":{"dcb74d27":"import pandas as pd\nimport numpy as np\n\n#Read the dataset and split it into 100 parts\ndfs = np.array_split(pd.get_dummies(pd.read_csv(\"..\/input\/adult-income-dataset\/adult.csv\"),drop_first=True),100)","b960941f":"df = dfs[-1]\ndf","2adbaa3b":"X = df.iloc[:, :-1].values\ny = df.iloc[:, -1].values","762b81f1":"from sklearn.model_selection import train_test_split\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.2, random_state = 1)","46625db7":"from sklearn.ensemble import RandomForestClassifier\nfrom sklearn.model_selection import train_test_split\n\nest = RandomForestClassifier(n_estimators=4,random_state=0)\nest.fit(X_train, y_train)","83bcc660":"est.score(X_test, y_test)","8fd43761":"from sklearn.metrics import classification_report\ny_pred = est.predict(X_test)\nprint(classification_report(y_test,y_pred))","65d717ed":"def fit(df):\n    d_est = RandomForestClassifier(n_estimators=3,random_state=0)\n    d_est.fit(df.drop(\"income_>50K\",axis=1), df[\"income_>50K\"])\n    return d_est\n\ntrain = dfs[:-1]\ntest = dfs[-1]","6378d4c5":"estimators = []\nfor i in range(len(train)):\n  estimators.append(fit(train[i]))","b3753ba0":"def predict(d_est, df):\n    return d_est.predict(df.drop(\"income_>50K\",axis=1))\npredictions = []\nfor d_est in estimators:\n  predictions.append(predict(d_est, pd.get_dummies(test,drop_first=True)))","1ae549b4":"pred_df = pd.DataFrame(predictions).transpose()\npred_df['majority'] = pred_df.mode(axis=1)[0].astype(int)\npred_df","9fe7f243":"print(classification_report(y,pred_df['majority']))","ce5a08f6":"\nfrom sklearn.metrics import precision_recall_fscore_support\nprecision =[]\nrecall =[]\nfscore =[]\n\ndd = pred_df\n\nfor i in range(98, 0, -1):\n  dd.drop([i], axis=1, inplace=True)\n  dd['majority'] = dd.mode(axis=1)[0].astype(int)\n  prfs = precision_recall_fscore_support(y,dd['majority'],average='weighted')\n  precision.append(prfs[0])\n  recall.append(prfs[1])\n  fscore.append(prfs[2])","52063204":"import matplotlib.pyplot as plt\nplt.rcParams['figure.figsize']=(20,5)\nfig, ax1 = plt.subplots()\nax1.plot(np.sort(np.arange(98))[::-1],precision, color = 'red')\nax1.plot(np.sort(np.arange(98))[::-1],recall, color = 'blue')\nax1.plot(np.sort(np.arange(98))[::-1],fscore, color = 'green')\nax1.set_xlabel('Nodes')\nax1.set_ylabel('PRF')\nL=ax1.legend(['precision', 'recall', 'fscore' ]) #get the legend","79d5c085":"Now we eliminate nodes one by one to see the performance","4c844ce6":"Get the majority vote","3df26b34":"**My Github: https:\/\/github.com\/ramtiin\/**\nhttps:\/\/github.com\/ramtiin\/Distributed-Random-Forests","8e2d259f":"\nWe test on a single node first:","cdb61223":"## Distributed Random Forests on Adult income dataset\n\nPrediction task is to determine whether a person makes over 50K a year. This is just an experiment to show the distributed random forrest on a dummy dataset. Other datasets can also be used.\n\nDataset link:\nhttp:\/\/archive.ics.uci.edu\/ml\/datasets\/Adult https:\/\/www.kaggle.com\/wenruliu\/adult-income-dataset"}}