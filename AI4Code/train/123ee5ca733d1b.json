{"cell_type":{"8d17ed11":"code","a2de3921":"code","9c556b63":"code","446cb252":"code","7f92a2e3":"code","108b4b3c":"code","f7815410":"code","f4683e47":"code","70e78b5b":"code","ef91df44":"code","ff65f432":"code","bf445e1e":"code","8c4d93a8":"code","c6d54886":"code","6cdd7dfe":"code","18fdac00":"code","00ba6d83":"code","004fceb6":"code","ca5a9821":"code","3f7a5dda":"code","da76e277":"code","98ba1023":"code","fe2e51de":"code","896ebd64":"code","e6f33d7a":"code","7b726bd7":"code","5b412789":"code","46bf3d68":"code","9a4d2c99":"code","6369ba26":"code","aa987338":"code","e4d6d9b8":"code","be0695e6":"code","21a6a5a1":"code","5021f7d1":"code","f8bde3a3":"code","3880f7f3":"code","f12e71d2":"code","0180a788":"code","9c84ebda":"code","6ba5a261":"code","a4efac6c":"code","2182b3ed":"code","6893fadc":"code","05c726ef":"code","aae155de":"code","745ccaf3":"code","d2c08c74":"code","642ed8d0":"code","83e9d418":"code","4712612e":"code","593df732":"code","7bf0c123":"code","300a99f4":"code","37ff6b9c":"code","0216d7b2":"code","ee67941e":"code","a389f641":"markdown","557f708e":"markdown","35d8cfb5":"markdown","c4b87387":"markdown","a199ebf3":"markdown","41e76e9d":"markdown","8598dfd5":"markdown","3df63e71":"markdown","cc398e90":"markdown","9a03f3ba":"markdown","270047dc":"markdown","41955cf4":"markdown","869ae848":"markdown","f652a039":"markdown","d16f5bb0":"markdown","fba01433":"markdown","dccc585e":"markdown","b5b1974c":"markdown","38d77178":"markdown","1425231e":"markdown","09b36ebc":"markdown","34cf9c49":"markdown","24b52407":"markdown","1b7f5a83":"markdown","c968a444":"markdown","426d0792":"markdown","6a9d346d":"markdown","ad490146":"markdown","be675e91":"markdown","ea5dc58b":"markdown","d33dacb7":"markdown","59052a8e":"markdown","812eab2f":"markdown","3089113e":"markdown","a7a61033":"markdown","4a9ffac8":"markdown"},"source":{"8d17ed11":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sb\n%matplotlib inline","a2de3921":"#Importing Data On Kaggle:\ndf_sample = pd.read_csv('\/kaggle\/input\/dataset\/sample.csv')\ndf_train = pd.read_csv('\/kaggle\/input\/dataset\/train.csv')\ndf_test = pd.read_csv('\/kaggle\/input\/dataset\/test.csv')\ndf_train.shape, df_test.shape, df_sample.shape","9c556b63":"df_train.head()","446cb252":"df_sample.head(2)","7f92a2e3":"df_train.info()","108b4b3c":"df_train.prov_id.value_counts(),print(df_train.prov_id.value_counts().count(),\" Categories\")","f7815410":"df_train.area_id.value_counts()","f4683e47":"df_train.user_id.value_counts()","70e78b5b":"df_train.nunique()","ef91df44":"df_train.active_days01","ff65f432":"days=['active_days01', 'active_days02',\n       'active_days03', 'active_days04', 'active_days05', 'active_days06',\n       'active_days07', 'active_days08', 'active_days09', 'active_days10',\n       'active_days11', 'active_days12', 'active_days13', 'active_days14',\n       'active_days15', 'active_days16', 'active_days17', 'active_days18',\n       'active_days19', 'active_days20', 'active_days21', 'active_days22',\n       'active_days23']\ndf_train.drop(columns=days,inplace=True)\ndf_test.drop(columns=days,inplace=True)","bf445e1e":"assert df_train.isnull().sum().sum()==0 , df_test.isnull().sum().sum() == 0","8c4d93a8":"false_columns=[]\nfor i in df_test.columns:\n    if i not in df_train.columns:\n        false_columns.append(i)","c6d54886":"assert false_columns == []","6cdd7dfe":"df_train.columns,df_train.columns.shape[0]","18fdac00":"plt.figure(figsize=[25,10])\nplt.subplot(2,1,1)\nb=sb.distplot(df_train[df_train['is_5g']==1]['city_5g_ratio'],color=\"skyblue\")\nb.set_xlabel(\"city_5g_ratio of is_5g = 1\",fontsize=25)\nb.set_ylabel(\"Density\",fontsize=25)\nb.tick_params(labelsize=20);\nplt.subplot(2,1,2)\nb=sb.distplot(df_train[df_train['is_5g']==0]['city_5g_ratio'],color=\"red\")\nb.set_xlabel(\"city_5g_ratio of is_5g = 0\",fontsize=25)\nb.set_ylabel(\"Density\",fontsize=25)\nb.tick_params(labelsize=20)\nplt.tight_layout();","00ba6d83":"plt.figure(figsize=[25,10])\nb=sb.barplot(x=\"prov_id\", y=\"is_5g\", data=df_train)\nb.axes.set_title(\"prov_id investigation with is_5g\",fontsize=50)\nb.set_xlabel(\"prov_id\",fontsize=30)\nb.set_ylabel(\"is_5g\",fontsize=30)\nb.tick_params(labelsize=20);","004fceb6":"plt.figure(figsize=[25,10])\nb=sb.barplot(x=\"chnl_type\", y=\"is_5g\", hue='service_type', data=df_train)\nb.axes.set_title(\"Channel Type v.s is_5g on Service Type\",fontsize=50)\nb.set_xlabel(\"Channel Types\",fontsize=30)\nb.set_ylabel(\"is_5g\",fontsize=30)\nb.tick_params(labelsize=20)\nplt.setp(b.get_legend().get_texts(), fontsize='20')\nplt.setp(b.get_legend().get_title(), fontsize='25');","ca5a9821":"plt.figure(figsize=[25,10])\nb=sb.barplot(x=\"chnl_type\", y=\"is_5g\", hue='product_type', data=df_train)\nb.axes.set_title(\"Channel Type v.s is_5g on Product Type\",fontsize=50)\nb.set_xlabel(\"Channel Types\",fontsize=30)\nb.set_ylabel(\"is_5g\",fontsize=30)\nb.tick_params(labelsize=20)\nplt.setp(b.get_legend().get_texts(), fontsize='20') # for legend text\nplt.setp(b.get_legend().get_title(), fontsize='25'); # for legend title","3f7a5dda":"plt.figure(figsize=[25,10])\nb=sb.barplot(x=\"product_type\", y=\"is_5g\", hue='service_type', data=df_train)\nb.axes.set_title(\"Product Type v.s is_5g on Service Type\",fontsize=50)\nb.set_xlabel(\"Product Types\",fontsize=30)\nb.set_ylabel(\"is_5g\",fontsize=30)\nb.tick_params(labelsize=20)\nplt.setp(b.get_legend().get_texts(), fontsize='20') # for legend text\nplt.setp(b.get_legend().get_title(), fontsize='25'); # for legend title","da76e277":"plt.figure(figsize=[25,10])\nb=sb.barplot(x=\"activity_type\", y=\"is_5g\", hue='sex', data=df_train)\nb.axes.set_title(\"Activity Type v.s is_5g on Sex Type\",fontsize=50)\nb.set_xlabel(\"Activity Type\",fontsize=30)\nb.set_ylabel(\"is_5g\",fontsize=30)\nb.tick_params(labelsize=20)\nplt.setp(b.get_legend().get_texts(), fontsize='20') # for legend text\nplt.setp(b.get_legend().get_title(), fontsize='25'); # for legend title","98ba1023":"plt.figure(figsize=[25,10])\nb=sb.barplot(x=\"comp_type\", y=\"is_5g\", hue='is_act_expire', data=df_train)\nb.axes.set_title(\"Comp Type v.s is_5g on is_act_expire\",fontsize=50)\nb.set_xlabel(\"Comp Type\",fontsize=30)\nb.set_ylabel(\"is_5g\",fontsize=30)\nb.tick_params(labelsize=20)\nplt.setp(b.get_legend().get_texts(), fontsize='20') # for legend text\nplt.setp(b.get_legend().get_title(), fontsize='25'); # for legend title","fe2e51de":"plt.figure(figsize=[25,10])\nb=sb.barplot(x=\"term_type\", y=\"is_5g\", hue='max_rat_flag', data=df_train)\nb.axes.set_title(\"Term Type v.s is_5g on max_rat_flag\",fontsize=50)\nb.set_xlabel(\"Term Type\",fontsize=30)\nb.set_ylabel(\"is_5g\",fontsize=30)\nb.tick_params(labelsize=20)\nplt.setp(b.get_legend().get_texts(), fontsize='20') # for legend text\nplt.setp(b.get_legend().get_title(), fontsize='25'); # for legend title","896ebd64":"plt.figure(figsize=[25,10])\nb=sb.barplot(x=\"age\", y=\"is_5g\", hue='sex', data=df_train)\nb.axes.set_title(\"age v.s is_5g on sex\",fontsize=50)\nb.set_xlabel(\"age\",fontsize=30)\nb.set_ylabel(\"is_5g\",fontsize=30)\nb.tick_params(labelsize=20)\nplt.setp(b.get_legend().get_texts(), fontsize='20') # for legend text\nplt.setp(b.get_legend().get_title(), fontsize='25'); # for legend title","e6f33d7a":"plt.figure(figsize=[25,10])\nb=sb.barplot(x=\"city_level\", y=\"is_5g\", hue='sex', data=df_train)\nb.axes.set_title(\"City Level v.s is_5g on Sex Type\",fontsize=50)\nb.set_xlabel(\"City Level\",fontsize=30)\nb.set_ylabel(\"is_5g\",fontsize=30)\nb.tick_params(labelsize=20)\nplt.setp(b.get_legend().get_texts(), fontsize='20') # for legend text\nplt.setp(b.get_legend().get_title(), fontsize='25'); # for legend title","7b726bd7":"plt.figure(figsize=[25,10])\nb=sb.barplot(x=\"manu_name\", y=\"is_5g\", hue='sex', data=df_train)\nb.axes.set_title(\"manu_name v.s is_5g on Sex Type\",fontsize=50)\nb.set_xlabel(\"Manu Name\",fontsize=30)\nb.set_ylabel(\"is_5g\",fontsize=30)\nb.tick_params(labelsize=20)\nplt.setp(b.get_legend().get_texts(), fontsize='20') # for legend text\nplt.setp(b.get_legend().get_title(), fontsize='25'); # for legend title","5b412789":"df_train_area_of_interest = ['user_id','prov_id', 'chnl_type', 'service_type', 'product_type','activity_type','sex','manu_name', 'term_type', 'max_rat_flag', 'is_5g_base_cover','is_work_5g_cover', 'is_home_5g_cover', 'is_work_5g_cover_l01','is_home_5g_cover_l01', 'is_work_5g_cover_l02', 'is_home_5g_cover_l02','is_act_expire', 'comp_type', 'city_5g_ratio', 'city_level', 'is_5g']","46bf3d68":"df_test_area_of_interest = df_train_area_of_interest.copy()\ndf_test_area_of_interest.remove('is_5g')","9a4d2c99":"df_train = df_train[df_train_area_of_interest]\ndf_test = df_test[df_test_area_of_interest]","6369ba26":"df_train.head()","aa987338":"df_test.head()","e4d6d9b8":"from sklearn.model_selection import train_test_split\nfrom sklearn.metrics import classification_report","be0695e6":"train_user_id=df_train['user_id']","21a6a5a1":"test_user_id=df_test['user_id']","5021f7d1":"x = df_train.drop(columns=['user_id','is_5g'])\ny = df_train['is_5g']","f8bde3a3":"x_train, x_validation, y_train, y_validation = train_test_split(x, y, test_size=0.25, random_state=42)","3880f7f3":"x_test = df_test.drop('user_id',axis=1)\ny_test = df_sample['is_5g']","f12e71d2":"x_train.shape,x_validation.shape,x_test.shape,y_train.shape,y_validation.shape,y_test.shape","0180a788":"from sklearn.linear_model import LogisticRegression\nmodel1 = LogisticRegression(solver='liblinear')\nmodel1.fit(x_train, y_train)\npred = model1.predict(x_validation)\nprint(classification_report(y_validation,pred))","9c84ebda":"pred_test1 = model1.predict(x_test)\nprint(classification_report(y_test,pred_test1))","6ba5a261":"from sklearn.tree import DecisionTreeClassifier\nmodel2 = DecisionTreeClassifier()\nmodel2.fit(x_train, y_train)\npred = model2.predict(x_validation)\nprint(classification_report(y_validation, pred))","a4efac6c":"pred_test2 = model2.predict(x_test)\nprint(classification_report(y_test,pred_test2))","2182b3ed":"from sklearn.ensemble import RandomForestClassifier\nmodel3 = RandomForestClassifier()\nmodel3.fit(x_train, y_train)\npred = model3.predict(x_validation)\nprint(classification_report(y_validation, pred))","6893fadc":"pred_test3 = model3.predict(x_test)\nprint(classification_report(y_test,pred_test3))","05c726ef":"from xgboost import XGBClassifier\nmodel4 = XGBClassifier()\nmodel4.fit(x_train,y_train)\npred = model4.predict(x_validation)\nprint(classification_report(y_validation, pred))","aae155de":"pred_test4 = model4.predict(x_test)\nprint(classification_report(y_test,pred_test4))","745ccaf3":"model_compare= pd.DataFrame(list(zip(df_sample['is_5g'],pred_test1, pred_test2, pred_test3, pred_test4)),\n               columns =['ActualSet','LogisticRegression','DecisionTree','RandomForest','XGB'])","d2c08c74":"population=model_compare.shape[0]","642ed8d0":"elements,count=\\\nnp.unique(np.where(model_compare['LogisticRegression'] == model_compare['ActualSet'],True,False),return_counts=True)\nprint('Count Of Correct And False: Logistic Regression')\nprint('Correct Predictions: {} - False Predictions: {}'.format(count[0],count[0]-model_compare['LogisticRegression'].shape[0]))\ncorrect1=count[0]*100\/population","83e9d418":"elements,count=\\\nnp.unique(np.where(model_compare['DecisionTree'] == model_compare['ActualSet'],True,False),return_counts=True)\nprint('Count Of Correct And False: Decision Tree')\nprint('Correct Predictions: {} - False Predictions: {}'.format(count[1], count[0]))\ncorrect2=count[1]*100\/population","4712612e":"elements,count=\\\nnp.unique(np.where(model_compare['RandomForest'] == model_compare['ActualSet'],True,False),return_counts=True)\nprint('Count Of Correct And False: Random Forest')\nprint('Correct Predictions: {} - False Predictions: {}'.format(count[1], count[0]))\ncorrect3=count[1]*100\/population","593df732":"elements,count=\\\nnp.unique(np.where(model_compare['XGB'] == model_compare['ActualSet'],True,False),return_counts=True)\nprint('Count Of Correct And False: XGBoost')\nprint('Correct Predictions: {} - False Predictions: {}'.format(count[1], count[0]))\ncorrect4=count[1]*100\/population","7bf0c123":"acc={'Logistic Regression':correct1,'Decision Tree':correct2,'Random Forest':correct3,'XGBoost':correct4}","300a99f4":"acc=sorted(acc.items(),key=lambda x: x[1], reverse=True)","37ff6b9c":"acc=dict(acc)","0216d7b2":"plt.figure(figsize=[25,10])\nplt.plot(acc.keys(), acc.values())\nplt.ylabel('Accuracy percentage',fontsize=30)\nplt.xlabel('ML Classifiers',fontsize=30)\nplt.xticks(fontsize=20)\nplt.yticks(fontsize=20)\nplt.title('5G-user-prediction',fontsize=50)\nplt.grid()\nplt.tight_layout()","ee67941e":"model_compare.to_csv('submission.csv',index=False)","a389f641":"### Introduction","557f708e":"Now we made sure that each user_id is a unique user","35d8cfb5":"Since we are dealing with a basic binary classification problem 1 or 0, so lets implement the **logistic regression**.","c4b87387":"# **Data Predictions**","a199ebf3":"\\\n<font size = 6 color='black'><b><u><i><center>.5G User Prediction.<\/b><\/i><\/u><\/center><\/font>\n\\\n<font size = 5 color='brown'><center>By: Ahmed Metwalli<\/center><\/font>","41e76e9d":"<font size=5 color='indigo'> **Product, Channel and Service** types mainly will be taken into consideration since they are giving high amount of information that can be used during classifications","8598dfd5":"From these **sample data** which is the y output of **test data**, we should predict the **is_5g** column on **user_id**.","3df63e71":"## Output CSVs","cc398e90":"Since we are dealing with a real world problem, I will use a **validation set** so our sets will be [Train Data, Validation Data, Test Data] to refine the \"tuning\" of each model.","9a03f3ba":"#### As we can see from the training df, the data says there are only 2 categorical variables ['area_id','user_id'] which is obviously wrong. Because there are many other columns containing (types) that represent categories. is_5g columns in which I preliminary think that they will be used as if they are categories but with numerical values 0 or 1 (binary classified). And  'prov_id' uniqueness of values (value_counts) should be investigated along with active_days","270047dc":"#### In this section, I would investigate some of the features using uni, bi and multivariate explorations in order to find what would be the best features to be taken into consideration with is_5g column to use during decision","41955cf4":"<font size = 6 color='black'><b><i><center>Content<\/b><\/i><\/center><\/font>\n\\\n\\\n<font size = 4 ><b>1. Introduction\\\n    \\\n    2. Data Explore And Data Wrangling\\\n    \\\n    3. Choosing Area Of Interest\\\n    \\\n    4. Data Visualization\\\n    \\\n    5. Predictions","869ae848":"**To conclude what we have just done, our area of interest which will be used in our model is consisting of :**\n***'user_id','prov_id', 'chnl_type', 'service_type', 'product_type', 'sex','activity_type','manu_name', 'term_type', 'max_rat_flag', 'is_5g_base_cover','is_work_5g_cover', 'is_home_5g_cover', 'is_work_5g_cover_l01','is_home_5g_cover_l01', 'is_work_5g_cover_l02', 'is_home_5g_cover_l02','is_act_expire', 'comp_type', 'city_5g_ratio', 'city_level', 'is_5g'***","f652a039":"These active_days columns can be deleted since it would be an unwanted load on our model. Our goal here is to predict is_5g not predict each day for each user to distinguish whether they are using 5g or not.","d16f5bb0":"**Random Forest**","fba01433":"**manu name 5** is the most common one in each manu name in terms of is_5g. For sex 1 it is higher (as usual).","dccc585e":"**City Level 1** is the most common level and sex type 1 is always dominant accross each city level in terms of 5g pred","b5b1974c":"**max_rat_flag 2** is the most common one across each term type over is_5g col.","38d77178":"It seems that **85,81,51,31,11** prov_ids are having the highest density (is_5g)","1425231e":"As we can see that for is_5g = 0 the city_5g_ratio is the most probable accross all of the city_5g_ratios.","09b36ebc":"**Product Type 5** is also the most common one across each product type from 2 to 6 in terms of is_5g probability","34cf9c49":"Now lets try another classifier **Decision Tree** but using this classifier it is recommended to reorder the columns by its weight effect on the decision (from lowest entropy to highest) but this step is optional here since we are dealing with low entropy columns.","24b52407":"The **age** column will be out of interest since it contains 43 and all of them having the sex 1 is higher than sex 0 except age of **59**. So it doesn't give any additional information to predict **is_5g**","1b7f5a83":"**Service Type 5** is the most common one across each channel type from 1 to 10 in terms of is_5g probability","c968a444":"Columns are fine","426d0792":"Putting machine learning techniques into work in the branch of wireless communication specially 5G is a challenging idea. Since we are looking for low latency and fast computations, we need to build a model that runs fast and performs well as it can be judged by its key metrics. In this report, our aim is to predict that the user is on 5G network or not. This 1000000x60 data is uploaded on Kaggle and can be downloaded from [https:\/\/www.kaggle.com\/liukunxin\/dataset?select=train.csv]. Luckily, me as a communication wireless engineer I was able to create a reliable area of interest during the analysis and to extract the best features during predictions.","6a9d346d":"**Activity Type 7** is made by only 1 sec type and it is the most common one impacting on 5g","ad490146":"## **Data Exploration**","be675e91":"No nulls","ea5dc58b":"## Conclusion","d33dacb7":"# **Data Visualization**","59052a8e":"It does not need any hyperparameter tuning lets move on to the **XGB**","812eab2f":"**Product Type 5** is the most common one across each channel type from 1 to 10 in terms of is_5g probability","3089113e":"**is_act_expire 2** is the most common accross all comp types in terms of 5g prob.","a7a61033":"We have found that using the linear regression the model could achieve 100% since the features or columns have very low entropy which helped the 4 models to have 99% to 100% accuracy.","4a9ffac8":"## Models Comparison"}}