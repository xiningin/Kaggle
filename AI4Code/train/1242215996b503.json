{"cell_type":{"add30241":"code","ead3a477":"code","8be3379d":"code","8a555c1d":"code","0c6e3034":"code","31381bbf":"code","18bb334f":"code","20d8ec41":"code","b4837efc":"code","8f4a496d":"markdown","be56c662":"markdown","05146055":"markdown","9157e9d0":"markdown","147fa26f":"markdown","85226426":"markdown"},"source":{"add30241":"import os\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\nimport matplotlib.image as mpimg\n%matplotlib inline\n\nimport tensorflow as tf\nfrom tensorflow.keras.preprocessing.image import ImageDataGenerator\nfrom tensorflow.keras.preprocessing.image import img_to_array, load_img\nfrom tensorflow.keras.optimizers import RMSprop\n\nimport random\nbase_dir='..\/input\/defect-imageset'\ntrain_dir = os.path.join(base_dir, 'train')\nvalidation_dir = os.path.join(base_dir, 'valid')","ead3a477":"train_B_MD_Line = os.path.join(train_dir, 'B_MD Line')\ntrain_Bright = os.path.join(train_dir, 'Bright')\ntrain_Coating = os.path.join(train_dir, 'Coating')\ntrain_D_MD_Line = os.path.join(train_dir, 'D_MD Line')\ntrain_Dark = os.path.join(train_dir, 'Dark')\ntrain_Dent = os.path.join(train_dir, 'Dent')\ntrain_Insect = os.path.join(train_dir, 'Insect')\ntrain_Pass_G_Film = os.path.join(train_dir, 'Pass_G_Film')\ntrain_Pass_Glue = os.path.join(train_dir, 'Pass_Glue')\ntrain_Pass_W_Film = os.path.join(train_dir, 'Pass_W_Film')\ntrain_Scratch = os.path.join(train_dir, 'Scratch')\ntrain_Substance = os.path.join(train_dir, 'Substance')\ntrain_Uncoating = os.path.join(train_dir, 'Uncoating')","8be3379d":"validation_dir_B_MD_Line = os.path.join(validation_dir, 'B_MD Line')\nvalidation_dir_Bright = os.path.join(validation_dir, 'Bright')\nvalidation_dir_D_MD_Line = os.path.join(validation_dir, 'D_MD Line')\nvalidation_dir_Dark = os.path.join(validation_dir, 'Dark')\nvalidation_dir_Dent = os.path.join(validation_dir, 'Dent_RGH')\nvalidation_dir_Insect = os.path.join(validation_dir, 'Insect')\nvalidation_dir_Pass_G_Film = os.path.join(validation_dir, 'Pass_G_Film')\nvalidation_dir_Pass_Glue = os.path.join(validation_dir, 'Pass_Glue')\nvalidation_dir_Pass_W_Film = os.path.join(validation_dir, 'Pass_W_Film')\nvalidation_dir_Scratch = os.path.join(validation_dir, 'Scratch')\nvalidation_dir_Substance = os.path.join(validation_dir, 'Substance')\nvalidation_dir_Uncoating = os.path.join(train_dir, 'Uncoating')","8a555c1d":"train_datagen = ImageDataGenerator(rescale=1.0\/255,\n                                  rotation_range=40,\n                                  width_shift_range=0.2,\n                                  height_shift_range=0.2,\n                                  shear_range=0.2,\n                                  zoom_range=0.2,\n                                  horizontal_flip=True,\n                                  fill_mode='nearest')\ntest_datagen = ImageDataGenerator(rescale=1.0\/255)","0c6e3034":"train_generator = train_datagen.flow_from_directory(train_dir,batch_size=20,class_mode='categorical',target_size=(150,150))\nvalidation_generator = test_datagen.flow_from_directory(validation_dir,batch_size=20,class_mode='categorical',target_size=(150,150))","31381bbf":"model=tf.keras.models.Sequential([\n    tf.keras.layers.Conv2D(16, (3,3), activation='relu',input_shape=(150,150,3)),\n    tf.keras.layers.MaxPooling2D(2,2),\n    tf.keras.layers.Conv2D(32, (3,3), activation='relu'),\n    tf.keras.layers.MaxPooling2D(2,2),\n    tf.keras.layers.Conv2D(64, (3,3), activation='relu'),\n    tf.keras.layers.MaxPooling2D(2,2),\n    tf.keras.layers.Flatten(),\n    tf.keras.layers.Dense(1024, activation='relu'),\n    tf.keras.layers.Dense(1,activation='sigmoid')    \n])","18bb334f":"model.compile(optimizer=RMSprop(lr=0.001),\n              loss='categorical_crossentropy',\n              metrics=['acc'])","20d8ec41":"\nhistory=model.fit_generator(train_generator,\n                           validation_data=validation_generator,\n                           steps_per_epoch=100,\n                           epochs=158,\n                           validation_steps=50,\n                           verbose=1)\n\n\nmodel.save(\"rps.h5\")","b4837efc":"acc = history.history['acc']\nval_acc = history.history['val_acc']\nloss = history.history['loss']\nval_loss = history.history['val_loss']\n\nepochs = range(len(acc))\n\nplt.plot(epochs, acc, 'r', label='Training accuracy')\nplt.plot(epochs, val_acc, 'b', label='Validation accuracy')\nplt.title('Training and validation accuracy')\nplt.legend(loc=0)\nplt.figure()\n\n\nplt.show()","8f4a496d":"# *Explore the Data*","be56c662":"# *Import Packages*","05146055":"# *Building Model*","9157e9d0":"# *Training*","147fa26f":"# *Evaluating Accuracy and Loss for the Model*","85226426":"# *Data Preprocessing*"}}