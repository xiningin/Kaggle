{"cell_type":{"63d98fe9":"code","c24cb259":"code","37f5b015":"code","7038ad81":"code","050bf63e":"code","33a64b1f":"code","7de2e455":"code","087e949d":"code","41e41684":"code","a21302f5":"code","8ac55940":"code","385b1181":"code","786f1362":"code","631ec89c":"code","5e609c84":"code","5a8934c0":"code","a975a840":"code","ec3b9f73":"code","f18c030c":"markdown","b9701ff8":"markdown","49a4ba7c":"markdown"},"source":{"63d98fe9":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","c24cb259":"imdb = pd.read_csv('\/kaggle\/input\/trainings\/IMDB Dataset.csv')\nprint(imdb.shape)\nimdb.head()","37f5b015":"imdb['sentiment'].value_counts()","7038ad81":"from wordcloud import WordCloud\nimport matplotlib.pyplot as plt\nimport nltk\ncommon_stopwords = nltk.corpus.stopwords.words('english')\ncustom_stopwords = ['<br \/>', 'br', \n                   'film', 'movie', 'one', 'would']\nstopwords = common_stopwords + custom_stopwords\ndocs_string_negative = ' '.join(imdb[imdb['sentiment'] == 'negative']['review'].str.lower())\nwc = WordCloud(background_color='white', stopwords=stopwords).generate(docs_string_negative)\nplt.imshow(wc)","050bf63e":"docs_string_positive = ' '.join(imdb[imdb['sentiment'] == 'positive']['review'].str.lower())\nwc = WordCloud(background_color='white', stopwords=stopwords).generate(docs_string_negative)\nplt.imshow(wc)","33a64b1f":"imdb.isna().sum()","7de2e455":"from gensim.parsing.preprocessing import remove_stopwords\nfrom gensim.parsing.porter import PorterStemmer\n\nstemmer = PorterStemmer()\n\ndocs = imdb['review'].str.lower().str.replace('<br \/>', '').str.replace('[^a-z\\s]', '')\ndocs = docs.apply(remove_stopwords)\ndocs = stemmer.stem_documents(docs)\ndocs = pd.Series(docs)","087e949d":"from sklearn.model_selection import train_test_split\nfrom sklearn.feature_extraction.text import CountVectorizer, TfidfVectorizer\n\ntrain_x, test_x, train_y, test_y = train_test_split(docs, imdb['sentiment'],\n                                                   test_size=0.2, random_state=1)\n\nvectorizer = CountVectorizer(min_df=10).fit(train_x)","41e41684":"vocab = vectorizer.get_feature_names()\ntrain_dtm = vectorizer.transform(train_x)\ntest_dtm = vectorizer.transform(test_x)","a21302f5":"from sklearn.naive_bayes import MultinomialNB\nfrom sklearn.metrics import accuracy_score\nmodel = MultinomialNB().fit(train_dtm, train_y)\ntest_y_pred = model.predict(test_dtm)\nprint('Accuracy: ', accuracy_score(test_y, test_y_pred))","8ac55940":"from sklearn.feature_extraction.text import TfidfVectorizer\nvectorizer = TfidfVectorizer().fit(train_x)\nvocab = vectorizer.get_feature_names()\ntrain_dtm = vectorizer.transform(train_x)\ntest_dtm = vectorizer.transform(test_x)","385b1181":"model = MultinomialNB().fit(train_dtm, train_y)\ntest_y_pred = model.predict(test_dtm)\nprint('Accuracy: ', accuracy_score(test_y, test_y_pred))","786f1362":"docs = imdb['review'].str.replace('<br \/>', '')\ndocs.head()\n","631ec89c":"nltk.download('vader_lexicon')","5e609c84":"from nltk.sentiment.vader import SentimentIntensityAnalyzer\nreview = 'i like tea'\nanalyzer = SentimentIntensityAnalyzer()\nanalyzer.polarity_scores(review)","5a8934c0":"total_score = 0.5\ncompound_score = total_score \/ np.sqrt(np.square(total_score) + 15)\ncompound_score","a975a840":"analyzer.polarity_scores('i hate coffee i love tea')","ec3b9f73":"print(analyzer.polarity_scores('i like tea'))\nprint(analyzer.polarity_scores('i LIKE tea'))\nprint(analyzer.polarity_scores('i like tea!!!'))\nprint(analyzer.polarity_scores('i like tea :)'))\nprint(analyzer.polarity_scores('i very much like tea :)'))","f18c030c":"## Sentiment analysis using rule based methods","b9701ff8":"### Sentiment analysis using Text Classification","49a4ba7c":"### Text preprocessing"}}