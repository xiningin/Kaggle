{"cell_type":{"bf552ab5":"code","27af9126":"code","af95bf00":"code","9c8f49e6":"code","ab86dda0":"code","5fa3d0b4":"code","fddcd249":"code","55e0e320":"code","5e1ef318":"code","12c58984":"code","7933d960":"code","7f49bea6":"code","d6f76bcc":"code","2ba8a74a":"code","9a3f25ff":"code","e3dce699":"code","da4871e1":"code","787759f8":"code","8316fde7":"code","4d89ffe7":"code","bde04fa8":"code","3922968f":"code","ad73f6d6":"code","7aa50861":"code","c7224b23":"code","9ec9d131":"code","c15d442c":"code","d9ed2d15":"code","f896e2bc":"code","69305ea1":"code","f4efb74c":"code","e67ff36d":"code","4079513d":"code","c2c82d35":"code","7255decb":"code","a5e446c5":"code","73786eda":"code","12bdb1d7":"code","606764f3":"code","8aafe951":"code","7568354a":"code","ae060181":"code","6ff7cdc4":"code","90ab0ccc":"code","8be6a4d0":"code","559568b0":"code","ac25189d":"code","20ed4c77":"code","5b76e9cb":"code","980d27ed":"code","0741b1bb":"code","e3d08cf1":"code","807d6f37":"code","48ae4932":"code","b8dedb2a":"code","e0d3ae38":"code","8ccf32e1":"code","02283339":"code","2b4bc991":"code","7a4d47dc":"code","627cfdfd":"code","2ef0cc43":"code","a71de5bb":"code","3e214f2d":"code","44f7b7bd":"code","97d7d7d7":"code","d205c3d7":"code","3858a202":"code","5363bff0":"code","74ac85cc":"code","9ffa21cd":"code","9458455b":"code","5a2f10c9":"code","444826fb":"code","3be648f1":"code","15bf3d4c":"code","19a2a91f":"code","42bfce9c":"code","1b9cc788":"code","7fc1dd05":"code","cdb41207":"code","e0d6b41e":"code","f619dbaa":"code","e7425739":"code","6a1676a4":"code","138ab811":"code","d3416a0d":"code","0fff1a48":"code","824d7e13":"code","a1991b1f":"code","ca4e03a6":"code","54963b67":"code","2a16fb5b":"code","4ee72331":"code","6d9cfa98":"code","c867884e":"code","1417bc79":"code","f15c8690":"code","3f117fee":"code","f79d59cc":"code","98204245":"code","fb2ce7c5":"code","d1c70196":"code","595b6fee":"code","4577056d":"code","7a142f3d":"markdown","64273177":"markdown","677bef69":"markdown","85d39222":"markdown","3112b9be":"markdown","6404f4bd":"markdown","90fd252e":"markdown","33d35173":"markdown","89cbd612":"markdown","9440ffc6":"markdown","612a9990":"markdown","b185a139":"markdown","16a13d1c":"markdown","60510030":"markdown","0ed7c7b2":"markdown","2e95029f":"markdown","e8bb3950":"markdown","10330fd2":"markdown","12061d82":"markdown","e048e572":"markdown","26bd1af0":"markdown","9717e55b":"markdown","192a6c1e":"markdown","be5044fa":"markdown","93d904a0":"markdown","8b299d8e":"markdown","96514dc6":"markdown"},"source":{"bf552ab5":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom pandas_profiling import ProfileReport","27af9126":"from sklearn.impute import SimpleImputer\nfrom sklearn.impute import KNNImputer","af95bf00":"import statsmodels.api as sm\nfrom scipy import stats\nfrom sklearn import preprocessing\nfrom sklearn.linear_model import LinearRegression, Ridge, Lasso, ElasticNet,ElasticNetCV\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import mean_absolute_error, mean_squared_error, r2_score","9c8f49e6":"pd.set_option('display.max_columns', 30)\n# pd.set_option(\"max_columns\", 2) #Showing only two columns","ab86dda0":"life_df = pd.read_csv(\"..\/input\/life-expectancy-who\/Life Expectancy Data.csv\")","5fa3d0b4":"life_df.head(5)","fddcd249":"life_df.columns","55e0e320":"life_df.shape","5e1ef318":"life_df.info()","12c58984":"life_df.describe()","7933d960":"life_df.isnull().sum().plot(kind='bar')","7f49bea6":"# profile = ProfileReport(life_df, title = \"Life expectancy report\")\n# profile.to_file(\"expectancy.html\")","d6f76bcc":"life_df = life_df.rename(columns= lambda x: x.strip())","2ba8a74a":"\ntwenty_percent = (life_df.shape[0]\/100)*20\nfor col in life_df.columns:\n    life_df[col].isnull().sum()\n    if (life_df[col].isnull().sum()) >= twenty_percent:\n        print(\"20%-'\",col,\"'\")\n    elif (life_df[col].isnull().sum()) > 0:\n        print(\"> 0 %-'\", col,\"'\")","9a3f25ff":"plt.hist(life_df['Adult Mortality'])","e3dce699":"sns.distplot(life_df['Adult Mortality'])","da4871e1":"check_expectancy = life_df[\"Adult Mortality\"][~ np.isnan(life_df[\"Adult Mortality\"])]\nnan_expectancy = life_df[\"Adult Mortality\"].copy()","787759f8":"plt.boxplot(check_expectancy)","8316fde7":"imputer = SimpleImputer(missing_values=np.nan, strategy='mean')\ndummy_simple = imputer.fit_transform(nan_expectancy.values.reshape(-1,1))","4d89ffe7":"plt.boxplot(dummy_simple)","bde04fa8":"sns.distplot(dummy_simple)","3922968f":"knnimpute = KNNImputer(n_neighbors=4)\ndummy_knn = knnimpute.fit_transform(nan_expectancy.values.reshape(-1,1))","ad73f6d6":"sns.distplot(dummy_knn)","7aa50861":"sm.qqplot(dummy_knn, fit=True, line=\"45\")","c7224b23":"plt.boxplot(dummy_knn)","9ec9d131":"# sm.qqplot(dummy_knn, fit=True, line=\"45\")","c15d442c":"scale_data = preprocessing.scale(dummy_knn)","d9ed2d15":"# sm.qqplot(scale_data, fit=True, line=\"45\")","f896e2bc":"standard_scale = preprocessing.StandardScaler()","69305ea1":"standard_scale_data = standard_scale.fit_transform(dummy_knn)","f4efb74c":"sm.qqplot(standard_scale_data, fit=True, line=\"45\")","e67ff36d":"standard_scale_data[:10]","4079513d":"plt.boxplot(standard_scale_data)","c2c82d35":"plt.hist(standard_scale_data)","7255decb":"sns.distplot(standard_scale_data)","a5e446c5":"transformer = preprocessing.PowerTransformer(method=\"box-cox\", standardize= True)","73786eda":"dummy_power = transformer.fit_transform(dummy_knn)","12bdb1d7":"sm.qqplot(dummy_power, fit=True, line=\"45\")","606764f3":"sns.distplot(dummy_power)","8aafe951":"plt.hist(dummy_power)","7568354a":"life_df.info()","ae060181":"life_df_numeric = life_df.select_dtypes(exclude=\"object\")\nlife_df_object = life_df.select_dtypes(include=\"object\")","6ff7cdc4":"life_df_numeric.columns","90ab0ccc":"# life_df_numeric = life_df_numeric.loc[:,['Measles', 'under-five deaths']]","8be6a4d0":"life_df_numeric.loc[:,'Measles'] = life_df_numeric.loc[:,'Measles'].astype(float)\nlife_df_numeric.loc[:,'under-five deaths'] = life_df_numeric.loc[:,'under-five deaths'].astype(float)\nlife_df_numeric.loc[:,'infant deaths'] = life_df_numeric.loc[:,'infant deaths'].astype(float)\n","559568b0":"life_df_numeric.info()","ac25189d":"life_df_numeric.isna().sum()","20ed4c77":"before_outlier = life_df_numeric.copy()","5b76e9cb":"life_df_numeric.describe()","980d27ed":"\nfor col in life_df_numeric.columns:\n    q1 = life_df_numeric[col].quantile(0.25)\n    q3 = life_df_numeric[col].quantile(0.75)\n    iqr = q3-q1\n    liqr = q1 - (1.5 * iqr)\n    hiqr = q3 + (1.5 * iqr)\n#     print(iqr, hiqr)\n\n#     print('\\n',col, '\\niqr: ',iqr,'\\nminimum: ',np.min(life_df_numeric[col]), 'liqr: ',liqr,'\\nmaximum: ', np.max(life_df_numeric[col]),'hiqr: ', hiqr)\n    life_df_numeric.loc[:][col] = np.where((life_df_numeric.loc[:][col] <= liqr) | (life_df_numeric.loc[:][col] >= hiqr), np.nan , life_df_numeric.loc[:][col])\n#     life_df_numeric.loc[:][col] = np.where((life_df_numeric.loc[:][col] >= hiqr), None, life_df_numeric.loc[:][col])","0741b1bb":"life_df_numeric","e3d08cf1":"after_outlier = life_df_numeric.copy()","807d6f37":"life_df_numeric.isna().sum()","48ae4932":"life_df_numeric.describe()","b8dedb2a":"for col in life_df_numeric.columns:\n#     print(col,\"\\n\\nMinimum\\nBefore-\",np.min(before_outlier[col]), \"After\",np.min(after_outlier[col]))\n#     print(\"Maximum\\nBefore\",np.max(before_outlier[col]), \"After\",np.max(after_outlier[col]))\n    q1b = before_outlier[col].quantile(0.25)\n    q3b = before_outlier[col].quantile(0.75)\n    iqrb = q3b-q1b\n    liqrb = q1b - (1.5 * iqrb)\n    hiqrb = q3b + (1.5 * iqrb)\n    \n    if np.min(after_outlier[col]) > liqrb:\n        print\n    print(col,'\\nminimum- ',np.min(after_outlier[col]), 'liqr- ',liqrb,'\\nmaximum- ', np.max(after_outlier[col]),'hiqr- ', hiqrb)\n    print('\\n')\n","e0d3ae38":"life_df_final = pd.concat([life_df_numeric, life_df_object], axis=1)","8ccf32e1":"knnimpute = KNNImputer(n_neighbors=3)\nfor col in life_df_final.columns:\n    if (life_df_final[col].isnull().sum()) > 0:\n        life_df_final[col] = knnimpute.fit_transform(life_df_final[col].values.reshape(-1,1))","02283339":"life_df_final.isna().sum()","2b4bc991":"life_df_final.head(20)","7a4d47dc":"for col in life_df_final.columns:\n    if life_df_final[col].dtypes != 'object':\n        q1 = life_df_final[col].quantile(0.25)\n        q3 = life_df_final[col].quantile(0.75)\n        iqr = q3-q1\n        liqr = q1 - (1.5 * iqr)\n        hiqr = q3 + (1.5 * iqr)\n        print('\\n',col,'--low---', (life_df_final[col] <= liqr).any())\n        print(col,'--high---', (life_df_final[col] >= hiqr).any())\n        print('iqr- ',iqr,'\\nminimum- ',np.min(life_df_final[col]), 'liqr- ',liqr,'\\nmaximum- ', np.max(life_df_final[col]),'hiqr- ', hiqr)","627cfdfd":"life_df_final.isna().sum()","2ef0cc43":"fig = plt.figure(figsize = (10,10))\nax = fig.gca()\nlife_df_final.hist(ax=ax)\nplt.subplots_adjust(top = 0.99, bottom=0.01, hspace=1.5, wspace=0.4)\nplt.show()","a71de5bb":"life_df_final.iloc[:,0:5].boxplot()","3e214f2d":"life_df_final.iloc[:,5:10].boxplot()","44f7b7bd":"Y = life_df_final[\"Life expectancy\"]","97d7d7d7":"Y","d205c3d7":"X = life_df_final.drop(\"Life expectancy\", axis=1)","3858a202":"X.head(5)","5363bff0":"label = preprocessing.LabelEncoder()\nX_numeric = X.apply(label.fit_transform)","74ac85cc":"X_numeric.head(5)","9ffa21cd":"X_numeric[(X_numeric == 0).any(1)]","9458455b":"# transformer = preprocessing.PowerTransformer(method=\"box-cox\", standardize= True)\ntransformer = preprocessing.QuantileTransformer(output_distribution='normal', random_state=0)\nX_transform = transformer.fit_transform(X_numeric)","5a2f10c9":"X_transform = pd.DataFrame(X_transform)","444826fb":"X_transform.columns = X_numeric.columns","3be648f1":"X_transform.head()","15bf3d4c":"fig = plt.figure(figsize = (10,10))\nax = fig.gca()\nX_transform.hist(ax=ax)\nplt.subplots_adjust(top = 0.99, bottom=0.01, hspace=1.5, wspace=1.5)\nplt.show()","19a2a91f":"Y_transform = transformer.fit_transform(Y.values.reshape(-1,1))","42bfce9c":"plt.hist(Y_transform)","1b9cc788":"xtrain, xtest, ytrain, ytest = train_test_split(X_transform, Y_transform, test_size = 0.3, random_state=101)","7fc1dd05":"linear_model = LinearRegression()\nlinear_model.fit(xtrain, ytrain)","cdb41207":"linear_model.coef_","e0d6b41e":"ypredict = linear_model.predict(xtest)","f619dbaa":"linear_model.score(xtest, ytest)","e7425739":"print(mean_absolute_error(ytest, ypredict))","6a1676a4":"print(mean_squared_error(ytest, ypredict))","138ab811":"print(np.sqrt(mean_squared_error(ypredict, ytest)))","d3416a0d":"print(r2_score(ytest, ypredict))","0fff1a48":"ytest_actual = transformer.inverse_transform(ytest)","824d7e13":"ypredict_actual = transformer.inverse_transform(ypredict)","a1991b1f":"print((np.in1d(ytest_actual, ypredict_actual)).shape)","ca4e03a6":"print((np.intersect1d(ytest_actual, ypredict_actual)).shape)","54963b67":"ridge_model = Ridge(alpha=0.01)\nridge_model.fit(xtrain, ytrain)","2a16fb5b":"ypredict_ridge = ridge_model.predict(xtest)\n\nprint(ridge_model.score(xtest, ytest))\n\nprint(mean_absolute_error(ytest, ypredict_ridge))\n\nprint(mean_squared_error(ytest, ypredict_ridge))","4ee72331":"ridge_model = Ridge(alpha=50)\nridge_model.fit(xtrain, ytrain)","6d9cfa98":"ypredict_ridge = ridge_model.predict(xtest)\n\nprint(ridge_model.score(xtest, ytest))\n\nprint(mean_absolute_error(ytest, ypredict_ridge))\n\nprint(mean_squared_error(ytest, ypredict_ridge))","c867884e":"lasso_model = Lasso()\nlasso_model.fit(xtrain, ytrain)","1417bc79":"ypredict_lasso = lasso_model.predict(xtest)\n\nprint(lasso_model.score(xtest, ytest))\n\nprint(\"Number of features used:\",np.sum(lasso_model.coef_!=0))\n\nprint(mean_absolute_error(ytest, ypredict_lasso))\n\nprint(mean_squared_error(ytest, ypredict_lasso))","f15c8690":"lasso_model = Lasso(alpha=0.01, max_iter=10e5)\nlasso_model.fit(xtrain, ytrain)","3f117fee":"ypredict_lasso = lasso_model.predict(xtest)\n\nprint(lasso_model.score(xtest, ytest))\n\nprint(\"Number of features used:\",np.sum(lasso_model.coef_!=0))\n\nprint(mean_absolute_error(ytest, ypredict_lasso))\n\nprint(mean_squared_error(ytest, ypredict_lasso))","f79d59cc":"elatic_model = ElasticNet(alpha=0.01)\nelatic_model.fit(xtrain, ytrain)","98204245":"elatic_model.coef_","fb2ce7c5":"ypredict_elastic = elatic_model.predict(xtest)\n\nprint(elatic_model.score(xtest, ytest))\n\nprint(\"Number of features used:\",np.sum(lasso_model.coef_!=0))\n\nprint(mean_absolute_error(ytest, ypredict_elastic))\n\nprint(mean_squared_error(ytest, ypredict_elastic))","d1c70196":"alphas = [0.0001, 0.001, 0.01, 0.1, 0.3, 0.5, 0.7, 1]\nelasticnetcv_model = ElasticNetCV(alphas=alphas, cv=5)\nelasticnetcv_model.fit(xtrain, ytrain)","595b6fee":"ypredict_elastic = elasticnetcv_model.predict(xtest)\n\nprint(elasticnetcv_model.score(xtest, ytest))\n\nprint('Best alpha value: ',elasticnetcv_model.alpha_)\n\nprint('Intercept: ',elasticnetcv_model.intercept_)\n\nprint(\"Number of features used:\",np.sum(lasso_model.coef_!=0))\n\nprint(\"Number of features not used:\",np.sum(lasso_model.coef_==0))\n\nprint(mean_absolute_error(ytest, ypredict_elastic))\n\nprint(mean_squared_error(ytest, ypredict_elastic))","4577056d":"lasso_model.coef_","7a142f3d":"# ----------------------------------------------------------------------------\n# Did basic testing using different techniques","64273177":"**Detecting outliers by using the IQR values and Replacing the outliers with the null values**","677bef69":"# Lasso regression","85d39222":"**Reference - https:\/\/towardsdatascience.com\/feature-selection-using-regularisation-a3678b71e499**","3112b9be":"**Notice the additional parameters defined in Lasso function \u2013 \u2018max_iter\u2018. This is the maximum number of iterations for which we want the model to run if it doesn\u2019t converge before. This exists for Ridge as as well but setting this to a higher than default value was required in this case.**","6404f4bd":"**Histogram plot for all the features in the dataframe**","90fd252e":"# Life expectancy dataset","33d35173":"# Ridge regression","89cbd612":"# ElasticNet and ElasticNetCV","9440ffc6":"**Simple imputer**","612a9990":"# ----------------------------------------------------------------------------\n# End of testing basic techniques","b185a139":"# KNN imputer imputes outlier values to null values","16a13d1c":"# Linear regression","60510030":"**Filtering more than 20% null values**","0ed7c7b2":"# Pandas profiling","2e95029f":"**Checking normal distribution**","e8bb3950":"**Histogram with a line on it**","10330fd2":"**Reference - https:\/\/towardsdatascience.com\/ridge-and-lasso-regression-a-complete-guide-with-python-scikit-learn-e20e34bcbf0b**","12061d82":"**Standard scalar**","e048e572":"**Removing spaces in column name**","26bd1af0":"**KNN imputer**","9717e55b":"**Basics computaion libraries**","192a6c1e":"**Merging object and non_object data**","be5044fa":"**Converting values to normal or gaussian distribution by Box-Cox technique**","93d904a0":"**Imputer**","8b299d8e":"**Filling NULL values using KNN**","96514dc6":"# Imputer"}}