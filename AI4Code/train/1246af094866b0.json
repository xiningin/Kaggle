{"cell_type":{"fc6f7da3":"code","bbe13b7d":"code","622de6fa":"code","b07105d4":"code","ebaff3c7":"code","aad675f6":"code","0352df06":"code","e7a5d952":"code","48d3e546":"code","1bf5eabd":"code","9b2f3729":"code","567f30ee":"code","2f9cc9ff":"code","2c48215e":"code","731d4507":"code","f8a77ceb":"code","a6428d27":"code","03ff0bb0":"code","f684270a":"code","d2483707":"code","8bb8ea01":"code","1e3a4786":"code","363f6744":"code","52dc846c":"code","df30f72d":"code","f45f758a":"code","ad7c8758":"code","c58ca51e":"code","de80c8d7":"code","1557ac7e":"code","6f274091":"code","806305c5":"code","4414c638":"code","7ad28f08":"code","cd47ccbd":"code","ccb86ed5":"code","bf6783dc":"code","97f31617":"code","c22b07c6":"code","071d2f79":"code","3ee8e8f8":"code","136e43b4":"code","9921deae":"code","3fd08061":"code","40b6e005":"code","de855f65":"code","e7a6134b":"code","5d3923f7":"code","4dbd0887":"code","340a3d93":"code","d2ea8e13":"code","efbd648c":"code","b07164a7":"code","d0496e92":"code","5fdd8cad":"code","9d6786f3":"code","37c10291":"code","3bba5092":"code","b72defaa":"code","3eb7c341":"code","f404aafb":"code","4fbad907":"code","cb85d390":"code","0ba480b4":"code","21068816":"code","2c1f458b":"code","28499aa9":"code","4d66fae2":"code","1e0ebfb2":"code","a4a7f9e4":"code","f97a70e3":"code","94fbd793":"code","3d9549dd":"code","9f4c8b80":"code","b66bc638":"code","118a487f":"code","e3e3f707":"code","8f68509c":"code","1f610765":"code","679326ad":"code","ace0a1a5":"code","0b31be57":"code","eea00a3d":"code","b8ec8db3":"code","696143de":"code","b6280d4e":"code","1b8c2339":"code","674f6f70":"code","7b4d447d":"code","0743b44a":"code","aff713f3":"code","5b79cdf6":"code","b99b717d":"code","16650e07":"code","de78a857":"code","c55daa81":"code","a46f12a5":"code","0ac5625b":"code","07b140ac":"code","cd305f97":"code","e9362831":"code","9d1543c5":"code","dcc02dc1":"code","03847a94":"code","f91ca532":"code","9b42cb7e":"code","69661d41":"code","f7e54469":"code","9b5b1f68":"code","db824419":"code","58c398f9":"code","fed53ec7":"code","a64be05d":"code","0f6f4377":"code","46327a8f":"code","7bbee1e7":"code","71ddff9f":"code","88dda3ac":"code","94a8e060":"markdown","ec672e2d":"markdown","d47e3bf4":"markdown","c226c548":"markdown","0724ddd4":"markdown","493598d0":"markdown","092add1a":"markdown","f0a5fbdc":"markdown","c6bb3e09":"markdown","e865231e":"markdown","2e74270c":"markdown","ef0caf09":"markdown","d5572d06":"markdown","9adffcc8":"markdown","19d9807f":"markdown","2194ff33":"markdown","9ba62ad2":"markdown","9c70fad6":"markdown","a6ba1385":"markdown","2f93ea3a":"markdown","cc3d100a":"markdown","978ec942":"markdown","ce268c24":"markdown","47205eb3":"markdown","2b407b91":"markdown","eeeb571c":"markdown","df2a8ab6":"markdown","caa448ca":"markdown","97ecedbe":"markdown","0572d704":"markdown","f270718d":"markdown","6b7eb464":"markdown","27a123d0":"markdown","0de3a24c":"markdown","4a266714":"markdown","1054707b":"markdown","4cf8ce96":"markdown","eff14c7b":"markdown","b6fa31e8":"markdown","5fe35dc5":"markdown","1a228727":"markdown","98c7072e":"markdown","bb0ce9ae":"markdown","c7aa21e5":"markdown","cfa34e3e":"markdown","aca48b19":"markdown","f5e15c21":"markdown","a54a7880":"markdown","2626a647":"markdown","aa49d85f":"markdown","1a12ed27":"markdown","288eb8ba":"markdown","8b4c4e6d":"markdown","b1bd7a6b":"markdown"},"source":{"fc6f7da3":"import numpy as np\nimport pandas as pd \nimport statsmodels.api as sm\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nfrom sklearn.preprocessing import scale, StandardScaler\nfrom sklearn.model_selection import train_test_split, GridSearchCV, cross_val_score\nfrom sklearn.metrics import confusion_matrix, accuracy_score, mean_squared_error, r2_score, roc_auc_score, roc_curve, classification_report\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.ensemble import GradientBoostingClassifier\nfrom collections import Counter\nimport warnings\nwarnings.filterwarnings(\"ignore\")","bbe13b7d":"telco=pd.read_csv('..\/input\/telco-customer-churn\/WA_Fn-UseC_-Telco-Customer-Churn.csv')\ntelco.head()","622de6fa":"telco.info()","b07105d4":"telco.isnull().sum()","ebaff3c7":"# Although,TotalCharges should be numerical data type,but it is object type here.\ntelco.TotalCharges=pd.to_numeric(telco.TotalCharges,errors='coerce') #If 'coerce', then invalid parsing will be set as NaN.","aad675f6":"def null_values(telco):\n    nv=pd.concat([telco.isnull().sum(), 100 * telco.isnull().sum()\/telco.shape[0]],axis=1).rename(columns={0:'Missing_Records', 1:'Percentage (%)'})\n    return nv[nv.Missing_Records>0].sort_values('Missing_Records', ascending=False)","0352df06":"null_values(telco)","e7a5d952":"telco.columns","48d3e546":"null_indexes=telco[telco.TotalCharges.isnull()].index\ntelco.loc[null_indexes,['tenure','MonthlyCharges','TotalCharges','Churn']]","1bf5eabd":"# we can drop null values and customerID column.\ntelco=telco.fillna(0)\ntelco=telco.drop(['customerID'],axis=1)","9b2f3729":"telco['Churn_Rate']=telco['Churn'].map({\"No\":0,\"Yes\":1})","567f30ee":"telco.rename(columns={\"tenure\": \"Tenure\", \"gender\": \"Gender\"},inplace=True)","2f9cc9ff":"plt.figure(figsize=(10,8))\nsns.heatmap(telco.corr(), cmap='coolwarm',annot=True);","2c48215e":"telco.corr()[\"Churn_Rate\"].sort_values().plot.barh();","731d4507":"telco.describe()","f8a77ceb":"# categorik verilerin istatistiksel analizi icin:\ntelco.describe(include=['O'])","a6428d27":"# her columns in num of uniques\ntelco.apply(lambda x: x.nunique())","03ff0bb0":"print('Unique Values of Each Features:\\n')\nfor i in telco:\n    print(f'{i}:\\n{sorted(telco[i].unique())}\\n')","f684270a":"telco.Churn.value_counts()","d2483707":"def perc_col(df,col):\n    for i in sorted(df[col].unique(),reverse=True):\n        print('%s: %%%.2f' % (i, 100*df[col].value_counts()[i]\/len(df)))","8bb8ea01":"sns.countplot(x='Churn',data=telco)\nplt.show()\n\nprint(dict(Counter(telco['Churn'])))\nprint('\\nCustomer Attrition Ratio:')\nperc_col(telco,'Churn')","1e3a4786":"plt.figure(figsize=(15,4))\nplt.subplot(121)\nplt.title(\"Count of Churned According to Gender\")\nsns.countplot(x='Gender', data=telco, hue='Churn')\nplt.subplot(122)\nplt.title(\"Count of Churned According to Partner\")\nsns.countplot(x='Partner', data=telco, hue='Churn')\nplt.show()\n\nprint(\"Churn:'Yes'\\n\",\n      'Gender: ',dict(Counter(telco[telco.Churn=='Yes']['Gender'])),\n      '\\nPartner: ',dict(Counter(telco[telco.Churn=='Yes']['Partner'])),\n     \"\\n\\nChurn:'No'\\n\",\n      'Gender: ',dict(Counter(telco[telco.Churn=='No']['Gender'])),\n     '\\nPartner: ',dict(Counter(telco[telco.Churn=='No']['Partner'])),sep='')","363f6744":"plt.figure(figsize=(15,4))\nplt.subplot(131)\nplt.title(\"PhoneService\")\nsns.countplot(x='PhoneService',hue='Churn',data=telco)\nplt.subplot(132)\nplt.title(\"StreamingTV\")\nsns.countplot(x='StreamingTV',hue='Churn',data=telco)\nplt.subplot(133)\nplt.title(\"MultipleLines\")\nsns.countplot(x='MultipleLines',hue='Churn',data=telco)\nplt.show()","52dc846c":"plt.figure(figsize=(12,4))\nplt.subplot(121)\nplt.title(\"Online Security\")\nsns.countplot(x = 'OnlineSecurity', hue = 'Churn', data = telco)\nplt.subplot(122)\nplt.title(\"Tech Support\")\nsns.countplot(x = 'TechSupport', hue = 'Churn', data = telco)\nplt.show()\n\nprint('Churn Ratios by Online Security','\\n')\nprint(round(telco[telco['Churn']=='Yes']['OnlineSecurity'].value_counts() \/ telco['OnlineSecurity'].value_counts()*100,2))\n\nprint('\\nChurn Ratios by Tech Support','\\n')\nprint(round(telco[telco['Churn']=='Yes']['TechSupport'].value_counts() \/ telco['TechSupport'].value_counts()*100,2))","df30f72d":"churn_tenure=telco[telco.Churn=='Yes']['Tenure']\nnot_churn_tenure=telco[telco.Churn=='No']['Tenure']\n\nplt.figure(figsize=(8,5))\nsns.kdeplot(data=not_churn_tenure, shade=True)\nsns.kdeplot(data=churn_tenure, shade=True)\nplt.legend((\"Churn:No\", \"Churn:Yes\"),title='Churn')\nplt.title(\"Distributions of Tenure, by Churn\")\n\nplt.show()\n\nprint('Average Tenure of Churned Customers:',round(churn_tenure.mean()),\n      '\\nAverage Tenure of Not-Churned Customers:',round(not_churn_tenure.mean()))","f45f758a":"churn_mcharge=telco[telco.Churn=='Yes']['MonthlyCharges']\nnot_churn_mcharge=telco[telco.Churn=='No']['MonthlyCharges']\nplt.figure(figsize=(8,5))\n\nsns.kdeplot(data=not_churn_mcharge,shade=True)\nsns.kdeplot(data=churn_mcharge,shade=True)\nplt.legend((\"Churn:No\", \"Churn:Yes\"),title='Churn')\nplt.title(\"Distributions of Monthly Charges, by Churn\")\nplt.show()\n\nprint('Average Monthly Fee of Churned Customers:',round(churn_mcharge.mean()),\n      '\\nAverage Monthly Fee of Not-Churned Customers:',round(not_churn_mcharge.mean()))","ad7c8758":"telco.info()","c58ca51e":"categorical=telco.select_dtypes(include='object').columns.tolist()\nnumeric=telco.dtypes[telco.dtypes!=object].keys().tolist() # result of dtypes is Series, so we use keys(), not columns\nprint('Categorical Features:',categorical,'\\nNumerical Features:',numeric,sep='\\n')","de80c8d7":"plt.figure(figsize=(20,4))\nplt.subplot(131)\nsns.boxplot(x='Churn', y='Tenure', data=telco, palette=\"coolwarm\",whis=1.6)\nplt.subplot(132)\nsns.boxplot(x='Churn', y='MonthlyCharges', data=telco, palette=\"coolwarm\")\nplt.subplot(133)\nsns.boxplot(x='Churn', y='TotalCharges', data=telco, palette=\"coolwarm\")\nplt.show()","1557ac7e":"f=lambda x:(np.sqrt(x) if x>=0 else -np.sqrt(-x))\ntelco.TotalCharges=telco.TotalCharges.apply(f)","6f274091":"sns.boxplot(x='Churn', y='TotalCharges', data=telco, palette=\"coolwarm\");","806305c5":"g=sns.FacetGrid(telco,col='SeniorCitizen', hue='Churn',height=4)\ng.map(plt.scatter, 'Tenure', 'MonthlyCharges', alpha=0.7)\ng.add_legend();","4414c638":"plt.figure(figsize=(6,4))\nsns.countplot(x='SeniorCitizen', data=telco, hue='Churn')\nplt.show()\n\nprint('SeniorCitizens percentage of customers: % {:.2f}'.format(len(telco[telco.SeniorCitizen==1])\/len(telco.SeniorCitizen)*100))\nprint('SeniorCitizens churn rate: % {:.2f}'.format(len(telco[(telco.SeniorCitizen==1) & (telco.Churn=='Yes')])\/len(telco[telco.SeniorCitizen==1])*100))\nprint('non-SeniorCitizens churn rate: % {:.2f}'.format(len(telco[(telco.SeniorCitizen==0) & (telco.Churn=='Yes')])\/len(telco[telco.SeniorCitizen==0])*100))","7ad28f08":"telco.Contract.value_counts()","cd47ccbd":"telco.InternetService.value_counts()","ccb86ed5":"g = sns.FacetGrid(telco,col='InternetService',height=4)\nax = g.map(sns.barplot, \"Contract\", \"Churn_Rate\", palette = \"Blues_d\", order= telco.Contract.unique())","bf6783dc":"plt.figure(figsize=(15,5))\nsns.barplot(x=telco.Tenure\/\/12+1,y='MonthlyCharges',data=telco,hue='Churn',estimator=np.sum) #tenure with year\nplt.title(\"Sum of MonthlyCharges of Churned by Tenure and Churn\")\nplt.show()","97f31617":"print('Average MonthlyCharges of Churned by Tenure:',\n      telco.groupby([telco.Tenure\/\/12+1,'Churn']).MonthlyCharges.mean(),sep='\\n\\n')","c22b07c6":"print('Sum of Churned Count by Tenure:',\n      telco.groupby([telco.Tenure\/\/12+1,'Churn']).MonthlyCharges.count(),sep='\\n\\n')","071d2f79":"telco.head()","3ee8e8f8":"telco['Churn']=telco['Churn'].map({\"No\":0,\"Yes\":1})\ntelco.drop(columns=['Churn_Rate'],axis=1,inplace=True)","136e43b4":"import pickle\npickle.dump(telco,open(\"telco_not_dummy.pkl\",\"wb\"))","9921deae":"telco=pd.get_dummies(telco,drop_first=True)\ntelco.head()","3fd08061":"telco.isnull().sum().any()","40b6e005":"telco.to_csv(\".\/telco_clean_20201215.csv\", index = False)","de855f65":"# conda install -c districtdatalabs yellowbrick","e7a6134b":"import pandas as pd\nimport numpy as np\nfrom numpy import percentile\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom sklearn.utils import resample\nfrom imblearn.over_sampling import SMOTE, ADASYN\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.decomposition import PCA\nfrom IPython.core.pylabtools import figsize\nfrom scipy.stats import zscore\nfrom scipy import stats\nfrom sklearn.metrics import accuracy_score,f1_score, recall_score, classification_report,confusion_matrix,precision_score,roc_auc_score\nfrom sklearn.model_selection import train_test_split, cross_val_score, TimeSeriesSplit, GridSearchCV, RandomizedSearchCV\nfrom statsmodels.formula.api import ols\nfrom scipy.stats import zscore\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.naive_bayes import GaussianNB\nfrom sklearn.svm import SVC, LinearSVC\nfrom sklearn.ensemble import RandomForestClassifier , GradientBoostingClassifier\nfrom xgboost import XGBClassifier\nfrom yellowbrick.classifier import ClassificationReport\nfrom yellowbrick.datasets import load_occupancy\nfont_title = {'family': 'times new roman', 'color': 'darkred', \n              'weight': 'bold', 'size': 14}\nimport warnings\nwarnings.filterwarnings('ignore')\nsns.set_style(\"whitegrid\")\n\nplt.rcParams['figure.dpi'] = 100","5d3923f7":"df = pd.read_csv(\".\/telco_clean_20201215.csv\")\ndf.head()","4dbd0887":"df.Churn.value_counts()","340a3d93":"print(\"Percentage of Churned Customer:%\",\n      round(df.Churn.mean(),2))","d2ea8e13":"X=df.drop('Churn',axis=1)\ny=df.Churn","efbd648c":"X_train, X_test, y_train, y_test = train_test_split(X, y,test_size=0.2,random_state=42) # stratify=y","b07164a7":"y_train.value_counts()","d0496e92":"from imblearn.over_sampling import SMOTE\nsm = SMOTE(random_state=42)\nX_smote, y_smote = sm.fit_resample(X_train, y_train) # fit_sample\ny_smote.value_counts()","5fdd8cad":"ad = ADASYN(random_state=42)\nX_adasyn, y_adasyn = ad.fit_resample(X_train, y_train)  # fit_sample\ny_adasyn.value_counts()","9d6786f3":"# SMOTE\nX_train, y_train = X_smote, y_smote\n\n# ADASYN\n# X_train, y_train = X_adasyn, y_adasyn","37c10291":"# pip install lazypredict==0.2.9\n# import lazypredict\n# from lazypredict.Supervised import LazyClassifier\n# from sklearn.utils.testing import ignore_warnings\n\n# clf = LazyClassifier(verbose=0, ignore_warnings=True, custom_metric=None)\n# models, predictions = clf.fit (X_train, X_test, y_train, y_test)\n# models","3bba5092":"from xgboost import XGBClassifier\nxgb= XGBClassifier()\nxgb.fit(X_train , y_train)","b72defaa":"y_pred = xgb.predict(X_test)","3eb7c341":"print('Confusion Matrix:',*confusion_matrix(y_test,y_pred), sep=\"\\n\")\nprint(classification_report(y_test, y_pred))","f404aafb":"xgb_accuracy = accuracy_score(y_test, y_pred)\nxgb_f1_score = f1_score(y_test, y_pred, average='weighted')\nxgb_recall = recall_score(y_test, y_pred, average='weighted')\nprint('xgb_accuracy:',xgb_accuracy,\n      '\\nxgb_f1_score:',xgb_f1_score,\n      '\\nxgb_recall:',xgb_recall)","4fbad907":"xgb = XGBClassifier()","cb85d390":"xgb_params = {\"n_estimators\": [50,500,1000],\n             \"subsample\":[0.1,0.5,1],\n             \"max_depth\":[3,7,9],\n             \"learning_rate\":[0.1,0.01,0.3]}","0ba480b4":"# xgb_grid= GridSearchCV(xgb, xgb_params, cv = 5, \n#                             n_jobs = -1, verbose = 2).fit(X_train, y_train)","21068816":"# xgb_grid= RandomizedSearchCV(xgb, xgb_params, cv = 5,\n#                              n_iter=10,\n#                             n_jobs = -1, verbose = 2,scoring='f1').fit(X_train, y_train)","2c1f458b":"# xgb_grid.best_params_","28499aa9":"xgb_tuned = XGBClassifier(learning_rate= 0.01, \n                                max_depth= 3, \n                                n_estimators= 520, \n                                subsample= 0.15).fit(X_train, y_train)\n\ny_pred = xgb_tuned.predict(X_test)","4d66fae2":"print('Confusion Matrix:',*confusion_matrix(y_test,y_pred), sep=\"\\n\")\nprint(classification_report(y_test, y_pred))","1e0ebfb2":"xgb_f1_true=float(classification_report(y_test, y_pred).split()[12])\nxgb_f1_true","a4a7f9e4":"xgb_accuracy = accuracy_score(y_test, y_pred)\nxgb_f1_score = f1_score(y_test, y_pred, average='weighted')\nxgb_recall = recall_score(y_test, y_pred, average='weighted')\nprint('xgb_accuracy:',xgb_accuracy,\n      '\\nxgb_f1_score:',xgb_f1_score,\n      '\\nxgb_recall:',xgb_recall)","f97a70e3":"# xgb_accuracy = cross_val_score(xgb_tuned, X_test, y_test,cv = 10).mean()\n# xgb_f1_score = cross_val_score(xgb_tuned, X_test, y_test,cv = 10,scoring='f1_weighted').mean()\n# xgb_recall = cross_val_score(xgb_tuned, X_test, y_test,cv = 10,scoring='recall_weighted').mean()\n# print('rfc_accuracy:',rfc_accuracy,\n#       '\\nrfc_f1_score:',rfc_f1_score,\n#       '\\nrfc_recall:',rfc_recall)","94fbd793":"from sklearn.metrics import classification_report,confusion_matrix\nsns.heatmap(confusion_matrix(y_test,y_pred), annot=True, cmap=\"YlGnBu\",fmt='d')\nplt.ylabel('Actual Label')\nplt.xlabel('Predicted Label');","3d9549dd":"from sklearn.ensemble import RandomForestClassifier\nrf_model = RandomForestClassifier(n_estimators=100)\nrf_model.fit(X_train, y_train)","9f4c8b80":"y_pred = rf_model.predict(X_test)","b66bc638":"print('Confusion Matrix:',*confusion_matrix(y_test,y_pred), sep=\"\\n\")\nprint(classification_report(y_test, y_pred))","118a487f":"rfc_accuracy = accuracy_score(y_test, y_pred)\nrfc_f1_score = f1_score(y_test, y_pred, average='weighted')\nrfc_recall = recall_score(y_test, y_pred, average='weighted')\nprint('rfc_accuracy:',rfc_accuracy,\n      '\\nrfc_f1_score:',rfc_f1_score,\n      '\\nrfc_recall:',rfc_recall)","e3e3f707":"# rfc_accuracy = cross_val_score(rf_model, X_test, y_test,cv = 10).mean()\n# rfc_f1_score = cross_val_score(rf_model, X_test, y_test,cv = 10,scoring='f1_weighted').mean()\n# rfc_recall = cross_val_score(rf_model, X_test, y_test,cv = 10,scoring='recall_weighted').mean()\n# print('rfc_accuracy:',rfc_accuracy,\n#       '\\nrfc_f1_score:',rfc_f1_score,\n#       '\\nrfc_recall:',rfc_recall)","8f68509c":"rfc_params = {\"n_estimators\":[300,500,1000],\n              \"max_depth\":[7,10,15],\n              \"max_features\": [8,10,15],\n              \"min_samples_split\": [4,6,8]}","1f610765":"# rfc_grid = GridSearchCV(rf_model, rfc_params, cv = 5, n_jobs = -1, verbose = 2).fit(X_train, y_train)","679326ad":"# rfc_grid= RandomizedSearchCV(rf_model, xgb_params, cv = 5,\n#                              n_iter=10,\n#                             n_jobs = -1, verbose = 2,scoring='f1').fit(X_train_tf_idf, y_train)","ace0a1a5":"# rfc_grid.best_params_","0b31be57":"rfc_tuned = RandomForestClassifier(max_depth = 10,             \n                                  max_features = 10, \n                                  min_samples_split = 4, \n                                  n_estimators = 500).fit(X_train, y_train)","eea00a3d":"y_pred = rfc_tuned.predict(X_test)\nprint('Confusion Matrix:',*confusion_matrix(y_test,y_pred), sep=\"\\n\")\nprint(classification_report(y_test, y_pred))","b8ec8db3":"rf_f1_true=float(classification_report(y_test, y_pred).split()[12])\nrf_f1_true","696143de":"from sklearn.metrics import classification_report,confusion_matrix\nsns.heatmap(confusion_matrix(y_test,y_pred), annot=True, cmap=\"YlGnBu\",fmt='d')\nplt.ylabel('Actual Label')\nplt.xlabel('Predicted Label');","b6280d4e":"from sklearn.preprocessing import StandardScaler\nsc = StandardScaler()\nX_train = sc.fit_transform(X_train)\nX_test= sc.transform(X_test)","1b8c2339":"from sklearn.neighbors import KNeighborsClassifier","674f6f70":"knn = KNeighborsClassifier(n_neighbors=1)\nknn.fit(X_train,y_train)","7b4d447d":"y_pred = knn.predict(X_test)","0743b44a":"neighbors = range(1,18,2) # k nin tek sayi olmasi beklenir.\ntrain_accuracy =np.empty(len(neighbors))\ntest_accuracy = np.empty(len(neighbors))\n\nfor i,k in enumerate(neighbors):\n    #Setup a knn classifier with k neighbors\n    knn = KNeighborsClassifier(n_neighbors = k)\n    \n    #Fit the model\n    knn.fit(X_train, y_train)\n    \n    #Compute accuracy on the training set\n    train_accuracy[i] = knn.score(X_train, y_train)\n    \n    #Compute accuracy on the test set\n    test_accuracy[i] = knn.score(X_test, y_test)","aff713f3":"plt.figure(figsize=(8,5))\nplt.title('k-NN assesment of number of neighbors')\nplt.plot(neighbors, test_accuracy, label='Accuracy of Test Data')\nplt.plot(neighbors, train_accuracy, label='Accuracy of Training Data')\nplt.legend()\nplt.xlabel('Number of neighbors')\nplt.ylabel('Accuracy')\nplt.show()","5b79cdf6":"error_rate = []\n# Her bir error rate icin olusan k degeri bu listeye atilacak\n# k nin tek sayi olmasi beklenir.\n# Will take some time\nfor i in range(1,18,2):\n    \n    model = KNeighborsClassifier(n_neighbors=i) # k= i\n    model.fit(X_train,y_train)\n    y_pred_i = model.predict(X_test)\n    error_rate.append(np.mean(y_pred_i != y_test)) \n    \n\n# print('Optimum K_Value: ',error_rate.index(min(error_rate)))","b99b717d":"plt.figure(figsize=(10,6))\nplt.plot(range(1,18,2),\n         error_rate,\n         color='blue', \n         linestyle='dashed', \n         marker='o',\n         markerfacecolor='red', \n         markersize=10)\nplt.title('Error Rate vs. K Value')\nplt.xlabel('K')\nplt.ylabel('Error Rate');","16650e07":"knn = KNeighborsClassifier()\nknn_params = {\"n_neighbors\": range(1,18,2)} # k tek sayi olmali\n\nknn_cv_model = GridSearchCV(knn, knn_params, cv=10).fit(X_train, y_train)","de78a857":"knn_cv_model.best_params_","c55daa81":"knn_tuned= KNeighborsClassifier(n_neighbors = 33).fit(X_train, y_train)\ny_pred = knn_tuned.predict(X_test)","a46f12a5":"print('Confusion Matrix:',*confusion_matrix(y_test,y_pred), sep=\"\\n\")\nprint(classification_report(y_test, y_pred))","0ac5625b":"knn_accuracy = accuracy_score(y_test, y_pred)\nknn_f1_score = f1_score(y_test, y_pred, average='weighted')\nknn_recall = recall_score(y_test, y_pred, average='weighted')\nprint('knn_accuracy:',knn_accuracy,\n      '\\nknn_f1_score:',knn_f1_score,\n      '\\nknn_recall:',knn_recall)","07b140ac":"knn_f1_true=float(classification_report(y_test, y_pred).split()[12])\nknn_f1_true","cd305f97":"from sklearn.metrics import classification_report,confusion_matrix\nsns.heatmap(confusion_matrix(y_test,y_pred), annot=True, cmap=\"YlGnBu\",fmt='d')\nplt.ylabel('Actual Label')\nplt.xlabel('Predicted Label');","e9362831":"model=LogisticRegression()\nmodel.fit(X_train,y_train)","9d1543c5":"y_pred=model.predict(X_test)","dcc02dc1":"print('Confusion Matrix:',*confusion_matrix(y_test,y_pred), sep=\"\\n\")\nprint(classification_report(y_test, y_pred))","03847a94":"log_accuracy = accuracy_score(y_test, y_pred)\nlog_f1_score = f1_score(y_test, y_pred, average='weighted')\nlog_recall = recall_score(y_test, y_pred, average='weighted')\nprint('log_accuracy:',log_accuracy,\n      '\\nlog_f1_score:',log_f1_score,\n      '\\nlog_recall:',log_recall)","f91ca532":"log_f1_true=float(classification_report(y_test, y_pred).split()[12])\nlog_f1_true","9b42cb7e":"compare = pd.DataFrame({\"Model\": [\"Random Forest\", \"XGBoost\",\"Logistic Regression\",\"K-Nearest Neighbor\"],\n                        \"Accuracy\": [rfc_accuracy, xgb_accuracy, log_accuracy,knn_accuracy],\n                        \"F1 Score\": [rfc_f1_score, xgb_f1_score, log_f1_score, knn_f1_score],\n                        \"Recall\": [rfc_recall, xgb_recall, log_recall,knn_recall],\n                        \"F1 Score (True)\": [rf_f1_true, xgb_f1_true, log_f1_true, knn_f1_true]})\n\ndef labels(ax):\n    for p in ax.patches:\n        width = p.get_width()    # get bar length\n        ax.text(width,       # set the text at 1 unit right of the bar\n                p.get_y() + p.get_height() \/ 2, # get Y coordinate + X coordinate \/ 2\n                '{:1.2f}'.format(width), # set variable to display, 2 decimals\n                ha = 'left',   # horizontal alignment\n                va = 'center')  # vertical alignment\n    \nplt.subplot(411)\ncompare = compare.sort_values(by=\"Accuracy\", ascending=False)\nax=sns.barplot(x=\"Accuracy\", y=\"Model\", data=compare, palette=\"Blues_d\")\nlabels(ax)\nplt.show()\n\nplt.subplot(412)\ncompare = compare.sort_values(by=\"Recall\", ascending=False)\nax=sns.barplot(x=\"Recall\", y=\"Model\", data=compare, palette=\"Blues_d\")\nlabels(ax)\nplt.xlabel('Recall (Weighted)')\nplt.show()\n\nplt.subplot(413)\ncompare = compare.sort_values(by=\"F1 Score\", ascending=False)\nax=sns.barplot(x=\"F1 Score\", y=\"Model\", data=compare, palette=\"Blues_d\")\nlabels(ax)\nplt.xlabel('F1 Score (Weighted)')\nplt.show()\n\nplt.subplot(414)\ncompare = compare.sort_values(by=\"F1 Score\", ascending=False)\nax=sns.barplot(x=\"F1 Score (True)\", y=\"Model\", data=compare, palette=\"Blues_d\")\nlabels(ax)\nplt.show()","69661d41":"feature_imp = pd.Series(xgb_tuned.feature_importances_,\n                        index=X.columns).sort_values(ascending=False)\n\nsns.barplot(x=feature_imp, y=feature_imp.index)\nplt.title(\"Feature Importance\")\nplt.show()\n\nfeature_imp[:10]","f7e54469":"feature_imp = pd.Series(rfc_tuned.feature_importances_,\n                        index=X.columns).sort_values(ascending=False)\n\nsns.barplot(x=feature_imp, y=feature_imp.index)\nplt.title(\"Feature Importance\")\nplt.show()\n\nfeature_imp[:10]","9b5b1f68":"import pickle\nimport pandas as pd","db824419":"pickle.dump(xgb_tuned,open(\"XGBoost.pkl\",\"wb\"))\npickle.dump(rfc_tuned,open(\"RandomForest.pkl\",\"wb\"))","58c398f9":"xgb_model = pickle.load(open(\"XGBoost.pkl\",\"rb\"))\nrfc_model = pickle.load(open(\"RandomForest.pkl\",\"rb\"))\n# df = pd.read_csv(\"telco_clean_20201215.csv\")","fed53ec7":"new_list=[\"Contract\", \"InternetService\", \"Dependents\", \"OnlineSecurity\",'TechSupport',\"PaymentMethod\",'Partner','Tenure']","a64be05d":"my_dict = {\"Contract\":'Month-to-month', \n           \"InternetService\":'Fiber optic', \n           \"Dependents\":\"Yes\", \n           \"OnlineSecurity\":'Yes',\n           \"TechSupport\":'Yes',\n           'PaymentMethod':'Electronic check',\n           'Partner':'Yes',\n           'Tenure':60,\n           'TotalCharges':2500\n            }\n\nX = pd.DataFrame.from_dict([my_dict])\n\nX=pd.get_dummies(X)\nX.columns","0f6f4377":"all_columns=df.drop('Churn',axis=1).columns\nall_columns","46327a8f":"X = pd.get_dummies(X).reindex(columns=all_columns, fill_value=0)\nX","7bbee1e7":"prediction_XGB = xgb_model.predict(X)\nprint(\"The Churn : \",'Yes' if prediction_XGB[0] else 'No')","71ddff9f":"prediction_XGB = xgb_model.predict_proba(X)\nprint(f'The Probability of the Customer Churn is %{round(prediction_XGB[0][1]*100,1)}')","88dda3ac":"# pip freeze -o requirements.txt","94a8e060":"### **Evaluate the performance**","ec672e2d":"### Result\n* F1 score is used in the case where we have skewed classes i.e one type of class examples more than the other type class examples.\n* For Churn Analysis, `F1 score of True Class` is the most important parameter.\n* As we can say, XGBoost and Random Forest Classifier with SMOTE algorithm are the best models when we looked at the `F1 score of True Class`","d47e3bf4":"**Content**\n\nEach row represents a customer, each column contains customer\u2019s attributes described on the column Metadata.\n\nThe data set includes information about:\n\nCustomers who left within the last month \u2013 the column is called Churn\nServices that each customer has signed up for \u2013 phone, multiple lines, internet, online security, online backup, device protection, tech support, and streaming TV and movies\nCustomer account information \u2013 how long they\u2019ve been a customer, contract, payment method, paperless billing, monthly charges, and total charges\nDemographic info about customers \u2013 gender, age range, and if they have partners and dependents","c226c548":"### Scaling","0724ddd4":"**'TotalCharges' has some outliers. We can use root square for outliers.**","493598d0":"## `Telco_Customer_Churn`","092add1a":"> **Customers who did not sign up for `OnlineSecurity` and `TechSupport` are most likely to churn.**","f0a5fbdc":"# `4-Logistic Regression`","c6bb3e09":"### **RF Tunning**","e865231e":"> **Target variable is a bit of imbalanced. We should resample the data.**","2e74270c":"### SMOTE","ef0caf09":"### Monthly Charges","d5572d06":"> **`Gender` is ineffective for prediction of customer churn.**","9adffcc8":"### **Visualization of Confusion Matrix with Table**","19d9807f":"### ADASYN","2194ff33":"### **Visualize Accuracies of Train & Test Data by Different k`s**","9ba62ad2":"**Exploring the Data**\n\nOur purpose here, mostly, understanding which and how variables are related to 'Churn'. Who wants to leave the telecom service company and why? So we made it 'Churn' oriented.\n\nCustomer churn is the loss of clients or customers.","9c70fad6":"### **Evaluate the Performance**","a6ba1385":"### Feature Importance for Random Forest","2f93ea3a":"### Deal with Outliers","cc3d100a":"### Phone Service - Streaming TV - MultipleLines","978ec942":"### **Find Optimum K Value with Elbow Method**","ce268c24":"## Splitting Data","47205eb3":"> **SeniorCitizens are only 16% of customers, but they have a much higher churn rate: 42% against 23% for non-senior customers.**","2b407b91":"   **Top 10 Feature Importance for XGBoost**\n   \n    Contract_Two year                        0.152446\n    Contract_One year                        0.147547\n    InternetService_Fiber optic              0.099390\n    InternetService_No                       0.072385\n    Dependents_Yes                           0.053979\n    OnlineSecurity_Yes                       0.046085\n    TechSupport_Yes                          0.039856\n    PaymentMethod_Credit card (automatic)    0.036813\n    Partner_Yes                              0.036286\n    Tenure                                   0.036252","eeeb571c":"> **Churned customers paid over 20% higher on average monthly fee than not-churned customers.**","df2a8ab6":"> **Short term contracts have higher churn rates. It is obvious that contract term does have an effect on churn.There were very few churns when customers have a two-year contract. And most churns occurred on customers with a month-to-month contract.**\n\n> **It seems customers who signed up for Fiber optic are most likely to churn.**","caa448ca":"### Saving Model","97ecedbe":"### `Compare Models Accuracies & F1 Scores & Recall`","0572d704":"### **Evaluate the performance**","f270718d":"# ``1.XGBoost Classifer``","6b7eb464":"### Tenure","27a123d0":"### Visualization of Confusion Matrix with Table","0de3a24c":"### Gender - Partner ","4a266714":"# Customer Churn Prediction","1054707b":"> **Not churned customers have a much longer average tenure (20 months) than the churned customers.**","4cf8ce96":"### Visualization of Confusion Matrix with Table","eff14c7b":"### **Tunning XGBOOST**","b6fa31e8":"### **Evaluate the performance**","5fe35dc5":"### Online Security - Tech Support","1a228727":"## EDA","98c7072e":"> **Whether customer have `Phone Service` not does not seem to have an effect on the churn.**","bb0ce9ae":"### Feature Importance for XGBoost","c7aa21e5":"> **In first year, count of the Churned and Not Churned are close to each other. In the later years,the Not Churned customers are more than Churned customers.**","cfa34e3e":"### Building Models","aca48b19":"### Contract-Internet Service-Churn","f5e15c21":"**`Cross Validation Scores`**","a54a7880":"**`Cross Validation Scores`**","2626a647":"### Tunning KNN with GridSearchCV","aa49d85f":"# ``3.KNeighborsClassifer``","1a12ed27":"### Transform to Dummy and Drop Categorical Features","288eb8ba":"# ``2.Random Forest Classifier``","8b4c4e6d":"## Customer Churn Prediction","b1bd7a6b":"### Senior Citizen-Tenure-Monthly Charges"}}