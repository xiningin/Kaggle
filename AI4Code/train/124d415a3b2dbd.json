{"cell_type":{"28e4f817":"code","55149743":"code","d72d37fd":"code","76fe3163":"code","58ecca4a":"code","49e062c9":"code","1bdcd03f":"code","330527bf":"code","edf48238":"code","50441b7a":"markdown","8a62cc1f":"markdown","6b40dc51":"markdown","749b3681":"markdown","da74ccbd":"markdown","267c8a43":"markdown","655eb1c7":"markdown","f17dd8c3":"markdown","05145e46":"markdown"},"source":{"28e4f817":"import tensorflow as tf\nimport pandas as pd\nimport numpy as np\nfrom sklearn.model_selection import train_test_split","55149743":"x_data = pd.read_csv('..\/input\/needed-data-of-pokemon\/pokemon_feature.csv')\ny_data = pd.read_csv('..\/input\/needed-data-of-pokemon\/pokemon_label.csv')","d72d37fd":"x_train,x_test,y_train,y_test = train_test_split(x_data,y_data,shuffle=True,test_size=0.25)","76fe3163":"x=tf.placeholder('float',shape=([None,6]))\ny=tf.placeholder('float',shape=([None,1]))\nfp=tf.Variable(x_test)\nfp=tf.cast(fp,'float')","58ecca4a":"w0 = tf.Variable(tf.random_normal([6,1]))\nb0 = tf.Variable(tf.random_normal([1]))","49e062c9":"out = tf.add(tf.matmul(x,w0),b0)","1bdcd03f":"cost = tf.square(tf.subtract(out,y))\noptimizer = tf.train.AdamOptimizer(learning_rate=0.0001)\ntrain = optimizer.minimize(cost)","330527bf":"with tf.Session() as sess:\n    #initializing global vars\n    sess.run(tf.global_variables_initializer())\n    #setting epochs\n    epochs = 50000\n    #running for epoch times\n    for i in range(epochs):\n        #training one epoch\n        sess.run(train,feed_dict={x:x_train,y:y_train})\n        #printing errors to ... uhh... see\n        if i % 2500 ==0:\n            print('Error at ',i,':',np.mean(sess.run(cost,feed_dict={x:x_train,y:y_train})))\n    \n    #getting test data and doing magic to get output\n    y_pred=sess.run(tf.add(tf.matmul(fp,w0),b0))\n    vr=0\n    y_test = np.array(y_test)\n    min_y=min(y_pred)\n    max_y=max(y_pred)\n    #loop that makes output 1 and 0\n    while vr < len(y_pred):\n        y_pred[vr] = y_pred[vr] - min(y_pred)\n        y_pred[vr] = y_pred[vr] \/ max(y_pred)\n        if y_test[vr] < 0:\n            y_test[vr] = 0\n        if y_pred[vr] > 0.8:\n            y_pred[vr] = 1\n        else:\n            y_pred[vr] = 0\n        vr+=1\n    vr=0\n    count=0\n    \n    #loop to count accuracy on test data\n    while vr < len(y_pred):\n        if y_pred[vr] == y_test[vr]:\n            count+=1\n        vr+=1 \n    print('Accuracy :',count\/len(y_pred))\n    \n    fw,fb = sess.run([w0,b0])\n    ","edf48238":"predict_this_x = np.array([[35,55,40,50,50,90]],dtype='float32')\npredicted_y = np.add(np.matmul(predict_this_x,fw),fb)\npredicted_y = predicted_y - min_y\npredicted_y = predicted_y \/ max_y\nif predicted_y > 0.8:\n    print('Seems Legendary !')\nelse:\n    print('Nah, just need some more :\/')","50441b7a":"~~get enemies , destroy em !~~ get cost\/loss\/error , minimize it ","8a62cc1f":"Lets split'em up ! Train .. ,train.. and fight oops **test**","6b40dc51":"# Make your own stats and predict em !? (this given are of pikachu !)\n# HP,Attack,Defense,Sp.Atk,Sp.Def,Speed","749b3681":"sometimes kadabra runs session and does some magical stuff","da74ccbd":"# Note : you need to download seperated data\n    -Download the pokemon_feature.csv and pokemon_label.csv\n    \n# Required\n    -Tensorflow\n    -pandas\n    -numpy\n    -scikitlearn\n    - ~~A pikachu~~\n    \n# Checking if pokemon is legendary by using stat as labels\nImport some secret things (Its SECRET)","267c8a43":"getting pokemon data in pandas !(hope there was such pokemon ,**pandas** )","655eb1c7":"The **legendary** equation","f17dd8c3":"setting yummy layers","05145e46":"Some more secret ,noii senpai !"}}