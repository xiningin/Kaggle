{"cell_type":{"b43827ef":"code","f50b42fd":"code","b40dd519":"code","957b1a9f":"code","dcd83752":"code","eb027dcb":"code","dd6c9eda":"code","2b426452":"code","db080e0d":"code","bc8d4d74":"code","951be504":"code","a8242765":"code","9a98e48c":"code","b237454c":"code","a67e2835":"code","b3be7501":"code","b55f62a1":"code","991d5788":"code","9fd87d7b":"code","5dcbcc40":"code","9743162d":"markdown","6a366f8b":"markdown","761b7624":"markdown","0a9dd3a2":"markdown","33911460":"markdown","d16fde4c":"markdown","3c0b2901":"markdown","b83addfc":"markdown","238c65f6":"markdown","70c633cc":"markdown","91bce82b":"markdown","47aab0bb":"markdown","c5b5aaf8":"markdown","2a738512":"markdown","1a6409c4":"markdown","94e59ac6":"markdown","67c6975b":"markdown"},"source":{"b43827ef":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nimport plotly.graph_objects as go\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","f50b42fd":"df = pd.read_csv('\/kaggle\/input\/earthquake\/earthquake.csv')","b40dd519":"df.fillna(-1,inplace=True)\ndf","957b1a9f":"df_corr =df.corr()\nsns.heatmap(df_corr)\n","dcd83752":"df.country.value_counts()\nx = df.country.value_counts().index\ny = df.country.value_counts().values \nf, (ax1) = plt.subplots(figsize=(15, 30), sharex=True)\nsns.barplot(x=x, y=y, palette=\"rocket\", ax=ax1)\nplt.xticks(rotation = 90 , color='white')\nax1.axhline(0, color=\"k\", clip_on=False)\n\n","eb027dcb":"bool_turkey = df.country == 'turkey'\nturkey = df[bool_turkey]\nturkey.city.value_counts()\nf, (ax1) = plt.subplots(figsize=(16, 16), sharex=True)\nsns.barplot(x=turkey.city.value_counts().index, y=turkey.city.value_counts().values, palette=\"ch:2.5,-.2,dark=.3\", ax=ax1)\nplt.xticks(rotation = 90 , color='black')\nax1.axhline(0, color=\"k\", clip_on=False)\n\n\n\n","dd6c9eda":"import plotly.express as px\nturkey.direction\nax = sns.barplot(x=turkey.direction.value_counts().index, y=turkey.direction.value_counts().values,palette=\"ch:2.5,-.2,dark=.3\" )\nplt.xticks(rotation=90 , color ='black')\nplt.yticks(rotation=0 , color ='black')\nplt.show()\n\n\n\n\n\n\n\n\n\n","2b426452":"fig = px.scatter_mapbox(turkey, lat=\"lat\", lon=\"long\", hover_name=\"city\", hover_data=[\"depth\", \"richter\",'direction'],\n                        color_discrete_sequence=[\"light green\"], zoom=5, height=300)\nfig.update_layout(mapbox_style=\"open-street-map\")\nfig.update_layout(margin={\"r\":0,\"t\":0,\"l\":0,\"b\":0})\nfig.show()","db080e0d":"turkey['date'] = pd.to_datetime(turkey['date'])\nturkey['year'] = turkey['date'].dt.year\nlabels_turkey = turkey.year.value_counts().index\nplt.figure(figsize=(25,25))\npal = sns.cubehelix_palette(len(turkey.year.value_counts().index), start=.5, rot=-.75)\nsns.barplot(x=np.sort(turkey.year.value_counts().index) ,y = turkey.year.value_counts().values,palette =pal )\nplt.xticks(rotation=90 , color ='black')\nplt.show()\n","bc8d4d74":"boolen_mediterranean = df['country'] == 'mediterranean'\nmediterranean = df[boolen_mediterranean]\nmediterranean","951be504":"mediterranean['date'] = pd.to_datetime(mediterranean['date'])\nmediterranean['year'] = mediterranean['date'].dt.year\nplt.figure(figsize=(25,25))\npal = sns.cubehelix_palette(len(mediterranean.year.value_counts().index), start=.5, rot=-.75)\nsns.barplot(x=np.sort(mediterranean.year.value_counts().index) ,y = mediterranean.year.value_counts().values,palette =pal )\nplt.xticks(rotation=90 , color ='black')\nplt.show()\n\n","a8242765":"fig = px.scatter_mapbox(mediterranean, lat=\"lat\", lon=\"long\", hover_name=\"city\", hover_data=[\"depth\", \"richter\",'direction'],\n                        color_discrete_sequence=[\"light green\"], zoom=5, height=300)\nfig.update_layout(mapbox_style=\"open-street-map\")\nfig.update_layout(margin={\"r\":0,\"t\":0,\"l\":0,\"b\":0})\nfig.show()","9a98e48c":"boolen_greece = df['country'] == 'greece'\ngreece = df[boolen_greece]\n","b237454c":"greece","a67e2835":"plt.figure(figsize=(25,25))\npal = sns.cubehelix_palette(len(greece.year.value_counts().index), start=.5, rot=-.75)\nsns.barplot(x=np.sort(greece.year.value_counts().index) ,y = greece.year.value_counts().values,palette =pal )\nplt.xticks(rotation=90 , color ='black')\nplt.show()\n","b3be7501":"greece_value_counts =greece.area.value_counts().index[1:]\ngreece_value_counts","b55f62a1":"f, (ax1) = plt.subplots(figsize=(16, 16), sharex=True)\nsns.barplot(x=greece.area.value_counts().index[1:], y=greece.area.value_counts().values[1:], palette=\"ch:2.5,-.2,dark=.3\", ax=ax1)\nplt.xticks(rotation = 90 , color='black')\nax1.axhline(0, color=\"k\", clip_on=False)\n","991d5788":"fig = px.scatter_mapbox(greece, lat=\"lat\", lon=\"long\", hover_name=\"city\", hover_data=[\"depth\", \"richter\",'direction'],\n                        color_discrete_sequence=[\"light green\"], zoom=5, height=300)\nfig.update_layout(mapbox_style=\"open-street-map\")\nfig.update_layout(margin={\"r\":0,\"t\":0,\"l\":0,\"b\":0})\nfig.show()","9fd87d7b":"df['date'] = pd.to_datetime(df['date'])\ndf['year'] = df['date'].dt.year\nlabels = df.year.value_counts().index\nplt.figure(figsize=(25,25))\npal = sns.cubehelix_palette(len(df.year.value_counts().index), start=.5, rot=-.75)\nsns.barplot(x=np.sort(df.year.value_counts().index) ,y = df.year.value_counts().values,palette =pal )\nplt.xticks(rotation=90 , color ='black')\nplt.show()\n","5dcbcc40":"long_data = zip(df.dist,df.depth,df.xm,df.md,df.richter,df.mw,df.ms,df.mb)\ndata_long = pd.DataFrame(long_data,columns=[\"dist\",\"depth\",\"xm\",\"md\",\"richter\",\"mw\",\"ms\",\"mb\"])\ndata_long.head()\ndata_long.dist = data_long.dist \/max(data_long.dist)\ndata_long.depth = data_long.depth \/max(data_long.depth)\ndata_long.xm = data_long.xm \/max(data_long.xm)\ndata_long.md = data_long.md \/max(data_long.md)\ndata_long.richter = data_long.richter \/max(data_long.richter)\ndata_long.mw = data_long.mw \/max(data_long.mw)\ndata_long.ms = data_long.ms \/max(data_long.ms)\ndata_long.mb = data_long.mb \/max(data_long.mb)\n\nplt.figure(figsize = (32,32))\npal = sns.cubehelix_palette(8, start=.5, rot=-.75)\nsns.violinplot(data = data_long,palette = pal , inner = \"points\" )\n","9743162d":"Turkey's earthquake map","6a366f8b":"The frequency of earthquakes in Turkey","761b7624":"Mediterranean's Earthquake Map","0a9dd3a2":"Most Dangerous Country","33911460":"**Thanks for listening\n**","d16fde4c":"**Direction Denstiy**","3c0b2901":"                                                       End Of Turkey Analysis","b83addfc":"All Earthquake Dates","238c65f6":"                                                       End Of Mediterranean Analysis","70c633cc":"Most Dangerous Area At Greece","91bce82b":"Most Dangerous Citys At Turkey","47aab0bb":"Greece's Eartquake Map","c5b5aaf8":"                                                       End Of Greece Analysis","2a738512":"**Corr Map ****","1a6409c4":"Mediterranean Eartquake Years","94e59ac6":"Greece Eartquake Date","67c6975b":"**\nAll Value densities of scales**"}}