{"cell_type":{"2c827758":"code","7fb1b373":"code","390cf9ac":"code","e1a5c6b5":"code","312349c4":"code","e132f2ec":"code","7945584b":"code","9465fc60":"code","c1f185d0":"code","2614f870":"code","a9100baa":"code","9718a2c4":"code","95381b18":"code","157a96ba":"code","6d43dc2f":"code","8b543f2c":"code","0e27d1da":"code","276cc553":"code","bd9f28ea":"code","8f8ef8e9":"code","2a0f505a":"code","7e750102":"markdown","257b0fc7":"markdown"},"source":{"2c827758":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","7fb1b373":"my_file = '..\/input\/arxiv\/arxiv-metadata-oai-snapshot-2020-08-14.json'","390cf9ac":"# get access to metadata\ndef get_metadata():\n    with open(my_file, 'r') as f:\n        for line in f:\n            yield line\n            \nmetadata = get_metadata()","e1a5c6b5":"import json\ncategories = []\nabstract = []\nfor ind, paper in enumerate(metadata):\n    paper = json.loads(paper)\n    categories.append(paper['categories'])\n    abstract.append(paper['abstract'])","312349c4":"# will only use the first category as a lable to simplify the problem\ndef clean_catagoris(catagorie):\n    return catagorie.replace(' ','.').split('.')[0]\n","e132f2ec":"categories2 = []\nfor i in categories:\n    categories2.append(clean_catagoris(i))","7945584b":"categories = pd.Series(categories2)\n","9465fc60":"len(abstract)","c1f185d0":"# will only use 15% of the total data for training, to speed up training\nfrom sklearn.model_selection import train_test_split\n\nX_train, X_test, y_train, y_test = train_test_split(\n    abstract, categories, test_size=0.85, random_state=42)","2614f870":"# turn y_train to catagories\nfrom sklearn import preprocessing\nle = preprocessing.LabelEncoder()\nle.fit(y_train)\ny_train_num = le.transform(y_train)","a9100baa":"len(np.unique(y_train))","9718a2c4":"import tensorflow_hub as hub\nfrom tensorflow import keras\nimport tensorflow as tf\n\n# a neural network with pretrained embedding layer, the embedding layer also is trainable\n\nmodel = keras.Sequential([\n    hub.KerasLayer(\"https:\/\/tfhub.dev\/google\/tf2-preview\/nnlm-en-dim50\/1\",\n                   dtype=tf.string, input_shape=[], output_shape=[50],trainable=True),\n    keras.layers.Dropout(rate=.4),\n    keras.layers.Dense(128, activation=\"relu\"),\n    keras.layers.Dropout(rate=.4),\n    keras.layers.Dense(128, activation=\"relu\"),\n    keras.layers.Dropout(rate=.4),\n    keras.layers.Dense(38, activation=\"softmax\")\n])\nmodel.compile(loss=\"sparse_categorical_crossentropy\", optimizer=\"adam\",\n              metrics=[\"accuracy\"])","95381b18":"early_stopping_cb = keras.callbacks.EarlyStopping(patience=5,\n                                                  restore_best_weights=True)\nhistory = model.fit(np.array(X_train),y_train_num, validation_split=.2, epochs=30,\n                    callbacks=[early_stopping_cb])","157a96ba":"le.inverse_transform(model.predict_classes(X_test[:15]))","6d43dc2f":"y_pred = le.transform(y_test[:5000])","8b543f2c":"model.evaluate(np.array(X_test[:5000]),y_pred)","0e27d1da":"y_test[:15].values","276cc553":"#an example of a wrong prediction\nX_test[3]","bd9f28ea":"from sklearn.metrics import confusion_matrix\npred = model.predict_classes(X_test[:5000])\n","8f8ef8e9":"cf_matrix = confusion_matrix(y_pred,pred)","2a0f505a":"import seaborn as sns\nsns.heatmap(cf_matrix\/np.sum(cf_matrix))","7e750102":"### Conclution: this model does well on a few cases but gets stuck on others, one way to potentially improve this model is to train an LSTM Model on it ","257b0fc7":"## Summary: determine what category a paper belongs to based on its abstract\n\n### Model Structure: I will be using a neural network with a pre-trained embedding layer (nnlm-en-dim50)"}}