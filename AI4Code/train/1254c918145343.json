{"cell_type":{"6646fddf":"code","08d56946":"code","99d2aa49":"code","2bdf459c":"code","6ab38bcf":"code","668ecc0e":"code","f33c7078":"code","f824d33d":"code","b03baa62":"code","093d59a5":"code","b76fdb8a":"code","686fd80f":"code","99675c35":"code","13650680":"code","b2f2aa5e":"code","415e05cb":"code","cb916df7":"code","8e909315":"code","de2320a9":"code","4d40dcd5":"code","a3e5992b":"code","d78b53ee":"code","9973b740":"code","09aad108":"code","4898d453":"code","d6675b22":"code","4c0fb075":"code","efcea83b":"markdown","3fbd27df":"markdown","2de2ddef":"markdown","6af2df07":"markdown","b7857c3f":"markdown","515a7628":"markdown"},"source":{"6646fddf":"import numpy as np\nimport pandas as pd\n\nfrom sklearn.model_selection import train_test_split  # split data to train and test\nfrom sklearn.compose import ColumnTransformer \nfrom sklearn.impute import SimpleImputer   # To remove null values\nfrom sklearn.preprocessing import OneHotEncoder\nfrom sklearn.preprocessing import MinMaxScaler\nfrom sklearn.pipeline import Pipeline, make_pipeline\nfrom sklearn.feature_selection import SelectKBest, chi2\nfrom sklearn.tree import DecisionTreeClassifier","08d56946":"df = pd.read_csv('..\/input\/titanic\/train.csv')","99d2aa49":"df.head()","2bdf459c":"df.isnull().sum()","6ab38bcf":"df.drop(columns = ['PassengerId', 'Name','Ticket','Cabin'], inplace = True)","668ecc0e":"X_train, X_test, y_train, y_test = train_test_split(df.drop(columns = ['Survived']),\n                                                   df['Survived'],\n                                                   test_size = 0.2,\n                                                   random_state=42)","f33c7078":"X_train.head()","f824d33d":"y_train.sample(5)","b03baa62":"# Imputation transform \n# fills empty cell with mean age\n\ntrf1 = ColumnTransformer([\n    ('impute_age', SimpleImputer(),[2]),  \n    ('impute_embarked',SimpleImputer(strategy = 'most_frequent'), [6])\n], remainder = 'passthrough')","093d59a5":"# one hot encoding\n\ntrf2 = ColumnTransformer([\n    ('ohe_sex_embarked', OneHotEncoder(sparse = False, handle_unknown='ignore'),[1,6])\n], remainder = 'passthrough')","b76fdb8a":"# Scaling\n\ntrf3 = ColumnTransformer([\n    ('scale', MinMaxScaler(), slice(0,10))\n])","686fd80f":"# Feature Selection\ntrf4 = SelectKBest(score_func=chi2 , k =8)","99675c35":"# Train The Model\ntrf5 = DecisionTreeClassifier()","13650680":"pipe = Pipeline([\n    ('trf1',trf1),\n    ('trf2',trf2),\n    ('trf3',trf3),\n    ('trf4',trf4),\n    ('trf5',trf5)\n])","b2f2aa5e":"# Alternate Syntax\n#pipe = make_pipeline(trf1,trf2,trf3,trf4,trf5)","415e05cb":"# train\npipe.fit(X_train,y_train)","cb916df7":"# Details\npipe.named_steps","8e909315":"# Display pipeline\n\nfrom sklearn import set_config\nset_config(display = 'diagram')","de2320a9":"pipe.fit(X_train,y_train)","4d40dcd5":"# Predict\ny_pred = pipe.predict(X_test)","a3e5992b":"y_pred","d78b53ee":"from sklearn.metrics import accuracy_score\naccuracy_score(y_test,y_pred)","9973b740":"# cross Validation using cross_val_score\nfrom sklearn.model_selection import cross_val_score\ncross_val_score(pipe , X_train,y_train, cv = 5, scoring = 'accuracy').mean() \n# does train_test_split 5 times as cv = 5 and then removes their accuracy and takes their mean","09aad108":"# Hyper tuning Parameter -- To increase accuracy\n# double underscore\nparams = {\n    'trf5__max_depth':[1,2,3,4,5,None]\n}","4898d453":"from sklearn.model_selection import GridSearchCV\ngrid = GridSearchCV(pipe, params, cv=5, scoring='accuracy')\ngrid.fit(X_train, y_train)","d6675b22":"grid.best_score_","4c0fb075":"grid.best_params_","efcea83b":"# Cross Validation using Pipeline","3fbd27df":"# Create Pipeline","2de2ddef":"# Pipeline Vs make_pipeline\n\nPipeline requires naming of steps, make_pipeline does not.\n\n(Same applies to ColumnTransformer vs make_column_transformer)","6af2df07":"# GridSearch using Pipeline","b7857c3f":"# Let's Plan","515a7628":"# Explore the Pipeline"}}