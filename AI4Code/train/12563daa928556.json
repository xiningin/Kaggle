{"cell_type":{"fe74131a":"code","1538bcb7":"code","89e5a75d":"code","a9bf6c6b":"code","f557ad8b":"code","0cf4c56b":"code","90851b03":"code","53e907eb":"code","60e1c031":"code","a19eb08f":"code","9bc13600":"code","c3482e77":"code","c70c8b18":"code","7b341ea6":"code","e6cf8a85":"code","7fc8d96f":"code","405c91ea":"code","f0d8b8b5":"code","a72df169":"code","c36f4d2c":"code","1a9da9c2":"code","c8dd03e0":"code","860e1dce":"code","26b56d39":"code","281651c0":"code","569c52f2":"code","c5825b1b":"code","0c34ea4c":"code","08ed7ce7":"code","59450f15":"code","158bc234":"code","2fa2692e":"code","7c3e8f18":"code","48c7498d":"code","942d7c32":"code","cb1421a0":"code","a39f4709":"code","0995c44a":"markdown","d88c66aa":"markdown","bc262b48":"markdown","3682b82d":"markdown","77251c12":"markdown","289625b2":"markdown","5cceaec5":"markdown","66024c88":"markdown","285fab45":"markdown","68c4184e":"markdown","71fa3cb6":"markdown","7fcd598f":"markdown","85b45bcb":"markdown","ac6e90d0":"markdown","2c65c83c":"markdown","d0369c98":"markdown","df3e3f5b":"markdown","a2b31b6a":"markdown","c089cae0":"markdown","505998ae":"markdown"},"source":{"fe74131a":"import numpy as np\nimport pandas as pd\nimport plotly.express as px\nfrom iso3166 import countries\nfrom wordcloud import WordCloud, STOPWORDS\nimport matplotlib.pyplot as plt","1538bcb7":"df = pd.read_csv(\"\/kaggle\/input\/covid19-tweets\/covid19_tweets.csv\")\ndf.head()","89e5a75d":"df['date'] = pd.to_datetime(df['date']) \ndf = df.sort_values(['date'])\ndf['day'] = df['date'].astype(str).str.split(' ', expand=True)[0]","a9bf6c6b":"def split_hashtags(x): \n    return str(x).replace('[', '').replace(']', '').split(',')\n\ndf['hashtag'] = df['hashtags'].apply(lambda row : split_hashtags(row))\ndf = df.explode('hashtag')\ndf['hashtag'] = df['hashtag'].astype(str).str.lower().str.replace(\"'\", '').str.replace(\" \", '')\ndf = df[df['hashtag']!='nan']","f557ad8b":"hashtags = df.groupby(['day', 'hashtag'])['user_name'].count().reset_index()\nhashtags.columns = ['day', 'hashtag', 'count']","0cf4c56b":"def plot_hashtags_by_day(data, hashtag):\n    data = data[data['hashtag']==hashtag]\n    fig = px.line(\n        data, \n        x='day', \n        y='count', \n        orientation='v', \n        title='Dynamic of hashtag \"' + hashtag + '\"' , \n        width=800\n    )\n    fig.show()","90851b03":"plot_hashtags_by_day(hashtags, 'corona')","53e907eb":"plot_hashtags_by_day(hashtags, 'covid19')","60e1c031":"plot_hashtags_by_day(hashtags, 'coronavirus')","a19eb08f":"plot_hashtags_by_day(hashtags, 'hydroxychloroquine')","9bc13600":"plot_hashtags_by_day(hashtags, 'vaccine')","c3482e77":"plot_hashtags_by_day(hashtags, 'pandemic')","c70c8b18":"hashtags_country = df.groupby(['day', 'hashtag', 'user_location'])['user_name'].count().reset_index()\nhashtags_country.columns = ['day', 'hashtag', 'location', 'count']\n\nhashtags_country['location'] = hashtags_country['location'].str.split(',', expand=True)[1].str.lstrip().str.rstrip()\n\ncountry_dict = {}\nfor c in countries:\n    country_dict[c.name] = c.alpha3\n    \nhashtags_country['alpha3'] = hashtags_country['location']\nhashtags_country = hashtags_country.replace({\"alpha3\": country_dict})\n\ncountry_list = ['England', 'United States', 'United Kingdom', 'London', 'UK']\n\nhashtags_country = hashtags_country[\n    (hashtags_country['alpha3'] == 'USA') | \n    (hashtags_country['location'].isin(country_list)) | \n    (hashtags_country['location'] != hashtags_country['alpha3'])\n]\n\ngbr = ['England', 'United Kingdom', 'London', 'UK']\nus = ['United States', 'NY', 'CA', 'GA']\n\nhashtags_country = hashtags_country[hashtags_country['location'].notnull()]\nhashtags_country.loc[hashtags_country['location'].isin(gbr), 'alpha3'] = 'GBR'\nhashtags_country.loc[hashtags_country['location'].isin(us), 'alpha3'] = 'USA'\n\nhashtags_country.loc[hashtags_country['alpha3'] == 'USA', 'location'] = 'USA'\nhashtags_country.loc[hashtags_country['alpha3'] == 'GBR', 'location'] = 'United Kingdom'\nhashtags_country = hashtags_country.groupby(['day', 'hashtag', 'location', 'alpha3'])['count'].sum().reset_index()\nhashtags_country","7b341ea6":"def plot_hashtag_map(data, hashtag):\n    data = data[data['hashtag']==hashtag]\n    fig = px.choropleth(\n        data, \n        locations=\"alpha3\",\n        hover_name=\"hashtag\",\n        color=\"count\",\n        animation_frame=\"day\",\n        projection=\"natural earth\",\n        color_continuous_scale=px.colors.sequential.Plasma,\n        title='Dynamic of hashtag \"' + hashtag + '\"' ,\n        width=800, \n        height=600\n    )\n    fig.show()","e6cf8a85":"plot_hashtag_map(hashtags_country, 'covid19')","7fc8d96f":"plot_hashtag_map(hashtags_country, 'coronavirus')","405c91ea":"plot_hashtag_map(hashtags_country, 'vaccine')","f0d8b8b5":"top20_hashtags_list = hashtags.groupby(['hashtag'])['count'].sum().reset_index().sort_values('count', ascending=False).head(20)['hashtag'].tolist()\nhdf = hashtags[hashtags['hashtag'].isin(top20_hashtags_list)]\nhdf","a72df169":"fig = px.bar(\n    hdf, \n    x=\"count\", \n    y=\"hashtag\", \n    animation_frame=\"day\", \n    orientation='h', \n    title='Dynamic of top 20 hashtags', \n    width=800, \n    height=700\n)\nfig.show()","c36f4d2c":"df['country'] = df['user_location'].str.split(',', expand=True)[1].str.lstrip().str.rstrip()\n\ncountry_dict = {}\nfor c in countries:\n    country_dict[c.name] = c.alpha3\n    \ndf['alpha3'] = df['country']\ndf = df.replace({\"alpha3\": country_dict})\n\ncountry_list = ['England', 'United States', 'United Kingdom', 'London', 'UK']\n\ndf = df[\n    (df['alpha3'] == 'USA') | \n    (df['country'].isin(country_list)) | \n    (df['country'] != df['alpha3'])\n]\n\ndf = df[df['country'].notnull()]\ndf.loc[df['country'] == 'England', 'alpha3'] = 'GBR'\ndf.loc[df['country'] == 'United States', 'alpha3'] = 'USA'\ndf.loc[df['country'] == 'United Kingdom', 'alpha3'] = 'GBR'\ndf.loc[df['country'] == 'London', 'alpha3'] = 'GBR'\ndf.loc[df['country'] == 'UK', 'alpha3'] = 'GBR'\ndf.loc[df['country'] == 'NY', 'alpha3'] = 'USA'\ndf.loc[df['country'] == 'CA', 'alpha3'] = 'USA'\ndf.loc[df['country'] == 'GA', 'alpha3'] = 'USA'\n\ndf.loc[df['alpha3'] == 'USA', 'country'] = 'USA'\ndf.loc[df['alpha3'] == 'GBR', 'country'] = 'United Kingdom'\ndf","1a9da9c2":"res = df.groupby(['country', 'day'])['text'].count().reset_index()\ntop5list = res.groupby(['country'])['text'].sum().reset_index().sort_values('text', ascending=False).head(5)['country'].tolist()","c8dd03e0":"data = res[res['country'].isin(top5list)]\nfig = px.line(\n    data, \n    x=\"day\", \n    y=\"text\", \n    title='Dynamic of top 5 countries', \n    color='country'\n)\nfig.show()","860e1dce":"res = df.groupby(['country', 'day'])['text'].count().reset_index()\ntop12list = res.groupby(['country'])['text'].sum().reset_index().sort_values('text', ascending=False).head(12)['country'].tolist()\ndata = res[res['country'].isin(top12list)]\nfig = px.bar(\n    data, \n    x=\"day\", \n    y=\"text\", \n    color='country', \n    title='Dynamic for top 12 countries'\n)\nfig.show()","26b56d39":"udf = df.groupby(['day', 'country', 'alpha3', 'user_name'])['user_location'].count().reset_index().drop(['user_location'], axis=1)\nudf = udf.groupby(['day', 'country', 'alpha3'])['user_name'].count().reset_index()\nudf","281651c0":"fig = px.scatter_geo(\n    udf, \n    locations=\"alpha3\",  \n    size=\"user_name\", \n    animation_frame=\"day\",\n    projection=\"natural earth\", \n    width=800, \n    height=600, \n    title='Dynamic of number of users'\n)\nfig.show()","569c52f2":"df['tweet_len'] = df['text'].str.len()\ndata = df.groupby('day')['tweet_len'].mean().reset_index()","c5825b1b":"fig = px.line(\n    data, \n    x=\"day\", \n    y=\"tweet_len\", \n    title='Average len of tweets'\n)\nfig.show()","0c34ea4c":"df = pd.read_csv(\"\/kaggle\/input\/covid19-tweets\/covid19_tweets.csv\")\nds = df.groupby('user_name')['user_location'].count().reset_index()\nds.columns = ['user_name', 'count']\nds = ds.sort_values(['count'])\nmost_active = ds['user_name'].tail(1).tolist()\ndf['date'] = pd.to_datetime(df['date']) \ndf = df.sort_values(['date'])\ndf['day'] = df['date'].astype(str).str.split(' ', expand=True)[0]\nds = df[df['user_name'].isin(most_active)]\nds = ds.groupby(['user_name', 'day', 'user_followers'])['user_friends'].count().reset_index()[['user_name', 'day', 'user_followers']]\nfig = px.line(\n    ds, \n    x=\"day\", \n    y=\"user_followers\", \n    color='user_name', \n    title='Followers dynamic'\n)\nfig.show()","08ed7ce7":"def split_hashtags(x): \n    return str(x).replace('[', '').replace(']', '').split(',')\n\ndf['hashtag'] = df['hashtags'].apply(lambda row : split_hashtags(row))\ndf = df.explode('hashtag')\ndf['hashtag'] = df['hashtag'].astype(str).str.lower().str.replace(\"'\", '').str.replace(\" \", '')\ndf = df[df['hashtag']!='nan']\ntrump = df[df['hashtag']=='trump']","59450f15":"ds = trump['user_name'].value_counts().reset_index()\nds.columns = ['user_name', 'tweets']\nds = ds.sort_values(['tweets'])\ntop5users = ds.tail(5)['user_name'].unique().tolist()\nfig = px.bar(\n    ds.tail(20), \n    x=\"tweets\", \n    y=\"user_name\", \n    orientation='h', \n    title='Top 20 users by total number of tweets with hashtag \"trump\"'\n)\nfig.show()","158bc234":"ds = trump.groupby(['day', 'user_name'])['hashtag'].count().reset_index()\nds.columns = ['day', 'user_name', 'tweets']\nds = ds[ds['user_name'].isin(top5users)]\nfig = px.line(\n    ds, \n    x=\"day\", \n    y=\"tweets\", \n    color='user_name', \n    title='Dynamic for top 5 users'\n)\nfig.show()","2fa2692e":"data = trump.groupby('day')['user_name'].count().reset_index()\ndata.columns = ['day', 'count']\nfig = px.line(\n    data, \n    x=\"day\", \n    y=\"count\", \n    title='Dynamic for \"trump\" hashtag'\n)\nfig.show()","7c3e8f18":"trump_country = trump.groupby(['user_location'])['user_name'].count().reset_index()\ntrump_country.columns = ['location', 'count']\n\ntrump_country['location'] = trump_country['location'].str.split(',', expand=True)[1]\ntrump_country['location'] = trump_country['location'].str.lstrip()\ntrump_country['location'] = trump_country['location'].str.rstrip()\n\ncountry_dict = {}\nfor c in countries:\n    country_dict[c.name] = c.alpha3\n    \ntrump_country['alpha3'] = trump_country['location']\ntrump_country = trump_country.replace({\"alpha3\": country_dict})\n\ntrump_country = trump_country[\n    (trump_country['alpha3'] == 'USA') | \n    (trump_country['location'] == 'England') | \n    (trump_country['location'] == 'United States') | \n    (trump_country['location'] == 'United Kingdom') |  \n    (trump_country['location'] == 'London') | \n    (trump_country['location'] == 'UK') | \n    (trump_country['location'] != trump_country['alpha3'])\n]\n\n\ntrump_country = trump_country[trump_country['location'].notnull()]\ntrump_country.loc[trump_country['location'] == 'England', 'alpha3'] = 'GBR'\ntrump_country.loc[trump_country['location'] == 'United States', 'alpha3'] = 'USA'\ntrump_country.loc[trump_country['location'] == 'United Kingdom', 'alpha3'] = 'GBR'\ntrump_country.loc[trump_country['location'] == 'London', 'alpha3'] = 'GBR'\ntrump_country.loc[trump_country['location'] == 'UK', 'alpha3'] = 'GBR'\ntrump_country.loc[trump_country['location'] == 'NY', 'alpha3'] = 'USA'\ntrump_country.loc[trump_country['location'] == 'CA', 'alpha3'] = 'USA'\ntrump_country.loc[trump_country['location'] == 'GA', 'alpha3'] = 'USA'\n\ntrump_country.loc[trump_country['alpha3'] == 'USA', 'location'] = 'USA'\ntrump_country.loc[trump_country['alpha3'] == 'GBR', 'location'] = 'United Kingdom'\ntrump_country = trump_country.groupby(['location', 'alpha3'])['count'].sum().reset_index()","48c7498d":"fig = px.bar(\n    trump_country, \n    x=\"location\", \n    y=\"count\", \n    title='Countries that used hashtag \"trump\"',\n    width=800\n)\nfig.show()","942d7c32":"fig = px.scatter_geo(\n    trump_country, \n    locations=\"alpha3\", \n    size=\"count\", \n    projection=\"natural earth\", \n    width=800, \n    height=600, \n    title='Countries that used hashtag \"trump\"'\n)\nfig.show()","cb1421a0":"def build_wordcloud(df, title):\n    wordcloud = WordCloud(\n        background_color='black', \n        stopwords=set(STOPWORDS), \n        max_words=50, \n        max_font_size=40, \n        random_state=666\n    ).generate(str(df))\n\n    fig = plt.figure(1, figsize=(15,15))\n    plt.axis('off')\n    fig.suptitle(title, fontsize=16)\n    fig.subplots_adjust(top=2.3)\n\n    plt.imshow(wordcloud)\n    plt.show()","a39f4709":"build_wordcloud(trump['text'], 'Prevalent words in tweets with hashtag \"trump\"')","0995c44a":"## Now we arre going to see countries that used hashtag `#trump`","d88c66aa":"<a id=\"3\"><\/a>\n<h2 style='background:blue; border:0; color:white'><center>Dynamic for top 20 hashtags<\/center><h2>","bc262b48":"### Prepare dataset for dynamic monitoring.","3682b82d":"<a id=\"7\"><\/a>\n<h2 style='background:blue; border:0; color:white'><center>Followers dynamics<\/center><h2>","77251c12":"## Lets see wordcloud for tweets with hashtag `#trump`","289625b2":"## Lest see dynamics of tweets with hashtag `#trump`","5cceaec5":"<a id=\"6\"><\/a>\n<h2 style='background:blue; border:0; color:white'><center>Tweets length dynamics<\/center><h2>","66024c88":"## Top 20 users that write about Trump","285fab45":"<a id=\"2\"><\/a>\n<h2 style='background:blue; border:0; color:white'><center>Dynamic of hashtags on the world map<\/center><h2>","68c4184e":"<a id=\"5\"><\/a>\n<h2 style='background:blue; border:0; color:white'><center>Number of users for every country<\/center><h2>","71fa3cb6":"<h1><center>Covid19. Dynamic in time and space of the tweets.<\/center><\/h1>\n\n<center><img src=\"https:\/\/ichef.bbci.co.uk\/news\/1024\/cpsprodpb\/031C\/production\/_112869700_gettyimages-1209519827-1.jpg\"><\/center>","7fcd598f":"### To do dynamic monitoring we need to have `day` feature. So lets extract `day` from `date` column. ","85b45bcb":"## Here we are going to see some dynamics on the world map.","ac6e90d0":"## Lets see dynamic for top 5 users","2c65c83c":"<a id=\"4\"><\/a>\n<h2 style='background:blue; border:0; color:white'><center>Tweets dynamics for countries<\/center><h2>","d0369c98":"<a id=\"8\"><\/a>\n<h2 style='background:blue; border:0; color:white'><center>Tweets about Trump. Analysis<\/center><h2>","df3e3f5b":"## Hello everyone!\n\n### In this notebook I am going to present some scripts for COVID tweets dynamic monitoring in time space. \n\n\n<a id=\"top\"><\/a>\n\n<h3 style='background:blue; border:0; color:white'><center>Quick navigation<\/center><\/h3>\n\n* [1. Hashtag dynamic monitoring](#1)\n* [2. Dynamic of hashtags on the world map](#2)\n* [3. Dynamic for top 20 hashtags](#3)\n* [4. Tweets dynamics for countries](#4)\n* [5. Number of users for every country](#5)\n* [6. Tweets length dynamics](#6)\n* [7. Followers dynamics](#7)\n* [8. Tweets about Trump. Analysis](#8)\n    \n#### If you are interested in EDA and simple sentiment analysis of this dataset, you can check another one my kernel: https:\/\/www.kaggle.com\/isaienkov\/covid19-eda-animated-geographical-distribution\n\n","a2b31b6a":"### Function for dynamic monitoring. Need to specify what hashtag do you want to check","c089cae0":"### To work with hashtags we need to separate `hashtags` column.","505998ae":"<a id=\"1\"><\/a>\n<h2 style='background:blue; border:0; color:white'><center>Hashtag dynamic monitoring<\/center><h2>"}}