{"cell_type":{"733bc6d3":"code","7fa3d163":"code","236fe1c0":"code","41819783":"code","66f915f5":"code","e3a6e54c":"code","2d486af9":"code","5b1b641b":"code","b5d1db91":"code","b1a2839d":"code","d2b5b96b":"code","9f124156":"code","0a21d984":"code","2c8e4cf0":"code","f7e21c9c":"code","2ce5e62b":"code","fa545eff":"code","80911c3f":"code","8001defc":"code","9a5cd9ff":"code","3f192f74":"code","8a872ed4":"code","34b3019f":"code","f5a3ecbe":"code","38939f26":"code","b341b222":"code","96ca1c44":"code","b1d7c2a3":"code","7f9f6759":"code","2eedc66b":"code","176d3e21":"code","c4c12c9e":"code","60a9a7bc":"markdown","ba1dc453":"markdown","19e29afd":"markdown","e17839cc":"markdown","f353b83a":"markdown","4ebbb63f":"markdown","886e91dc":"markdown","3aa5f0a4":"markdown","14baa744":"markdown","3dbbce1a":"markdown","bb7c14f9":"markdown","fc22aae5":"markdown","c42d5be1":"markdown"},"source":{"733bc6d3":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\nimport matplotlib\nimport seaborn as sns\nimport folium\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))","7fa3d163":"df = pd.read_csv(\"\/kaggle\/input\/riga-real-estate-dataset\/riga_re.csv\")\ndisplay(df.head())","236fe1c0":"df.describe()","41819783":"df.nunique()","66f915f5":"df.isnull().sum()","e3a6e54c":"plt.figure(figsize=(20, 6))\nsns.heatmap(df.isnull(),yticklabels=False,cbar=False,cmap='viridis')\nplt.show()","2d486af9":"df_n = df.dropna()\n# Address column is useless for now, let's drop it.\ndf_n = df_n.drop(columns=['street'])\ndf_n.head()","5b1b641b":"sns.set(rc={'figure.figsize':(10,8)})","b5d1db91":"sns.lineplot(data=df_n, x=\"floor\", y=\"price\")\nplt.title(\"Floor impact on price\")\nplt.show()","b1a2839d":"sns.lineplot(data=df_n, x=\"area\", y=\"price\")\nplt.title(\"Area impact on price\")\nplt.show()","d2b5b96b":"sns.lineplot(data=df_n, x=\"total_floors\", y=\"price\")\nplt.title(\"Total floors impact on price\")\nplt.show()","9f124156":"g = sns.barplot(data=df_n, x='district', y='price')\nplt.xticks(rotation=90, size = 12)\nplt.show()","0a21d984":"def it_dict_from_arr(arr, iter_begin = 0):\n    \"\"\"\n    A function to make iterative dictionary from a list\n    You can pass in something like: df_n.house_type.unique() and get iterized indexes for unique values from iter_begin with step 1\n    \n    \"\"\"\n    dictionary = {}\n    for i in arr:\n        dictionary.update({i:iter_begin})\n        iter_begin+=1\n        \n    return dictionary\n\n\n# Make condition into dict\ndf_n['condition'] = df_n['condition'].map(it_dict_from_arr(df_n['condition'].unique()))\ndf_n['house_type'] = df_n['house_type'].map(it_dict_from_arr(df_n['house_type'].unique()))\ndf_n['house_seria'] = df_n['house_seria'].map(it_dict_from_arr(df_n['house_seria'].unique()))\ndistricts = it_dict_from_arr(df_n['district'].unique())\ndf_n['district'] = df_n['district'].map(it_dict_from_arr(districts))\ndf_n['op_type'] = df_n['op_type'].map(it_dict_from_arr(df_n['op_type'].unique()))\n\n#Rooms contains \"Citi\", it will be \"zero\"\ndf_n['rooms'].replace({'Citi':0}, inplace=True)\ndf_n['rooms'] = df_n['rooms'].astype(int)\n\n#price should be float\ndf_n['price'] = df_n['price'].astype(int)\n\ndisplay(df_n.head())","2c8e4cf0":"latitude = 56.946285\nlongitude = 24.105078\n\nm = folium.Map(location=[latitude, longitude], zoom_start=11)\ndistricts_val = list(districts.values())\nx = np.arange(districts_val[0], districts_val[-1], 1)\nys = [i + x + (i*x)**2 for i in list(districts.values())]\ncolors_array = matplotlib.cm.rainbow(np.linspace(0, 1, len(ys)))\nrainbow = [matplotlib.colors.rgb2hex(i) for i in colors_array]\n\n# add markers to map\nfor lat, lng, dist, price in zip(df_n['lat'], df_n['lon'], df_n['district'], df_n['price']):\n    distr = list(districts.keys())[list(districts.values()).index(dist)]\n    label = 'Location: {}, price: {}'.format(distr, price)\n    label = folium.Popup(label, parse_html=True)\n    folium.CircleMarker(\n        [lat, lng],\n        radius=5,\n        popup=label,\n        color=rainbow[dist],\n        fill_opacity=0.7,\n        parse_html=False).add_to(m)  \nm","f7e21c9c":"jet= plt.get_cmap('jet')\ncolors = iter(jet(np.linspace(0,1,10)))\n\ndef correlation(df, variables, n_rows, n_cols):\n    fig = plt.figure(figsize=(15,10))\n    for i, var in enumerate(variables):\n        ax = fig.add_subplot(n_rows,n_cols,i+1)\n        asset = df.loc[:,var]\n        sns.scatterplot(df[\"price\"], asset, c = next(colors))\n        ax.set_xlabel(\"price\")\n        ax.set_ylabel(\"{}\".format(var))\n        ax.set_title(var +\" vs price\")\n        plt.xticks(rotation=30)\n    fig.tight_layout()\n    plt.show()\n    \ncorrelation(df_n, df_n.columns[:9], 3, 3)","2ce5e62b":"from sklearn.linear_model import LinearRegression","fa545eff":"X = df_n.drop(columns=['lat','lon','price'])\nY = df_n['price']","80911c3f":"from sklearn.model_selection import train_test_split\nX_train, X_test,Y_train, Y_test = train_test_split(X, Y, test_size=0.1)","8001defc":"lr = LinearRegression()\nlr.fit(X_train, Y_train)","9a5cd9ff":"Y_hat = lr.predict(X)","3f192f74":"lr.score(X_test, Y_test)","8a872ed4":"!pip install pycaret","34b3019f":"from pycaret.regression import *\nexp_reg101 = setup(data = df_n, target = 'price', session_id=123, silent = True)","f5a3ecbe":"best = compare_models(exclude = ['ransac'])","38939f26":"cb = create_model('catboost')","b341b222":"tuned_cat = tune_model(cb)","96ca1c44":"plot_model(cb)","b1d7c2a3":"plot_model(cb, plot = 'error')","7f9f6759":"plot_model(cb, plot='feature')","2eedc66b":"predict_model(cb)","176d3e21":"cb = finalize_model(cb)","c4c12c9e":"predict_model(cb)","60a9a7bc":"# Thank you for reading!","ba1dc453":"## Let's turn features into digits!","19e29afd":"## Placing locations on the map","e17839cc":"# Just for the fun of it, let's try regression to predict price.\nTO-DO: Add more ML algorithms","f353b83a":"# Real Estate Price Prediction\n\n### 1. Imports","4ebbb63f":"### There are many possibilities to fill in the missing data\n**Ideas:**\n1. Fill in lat and lon with geocoder by address\n2. Try to guess address by coordinates\n3. Interpret missing floor as some new floor class, like 0 or -1.\n4. Break 'street' into 'street' and 'house_no'\n \n### For now we will drop it.","886e91dc":"#### Data Cleaning","3aa5f0a4":"## Catboost is very effective, predicting with 0.8 R^2 on unseen data\nThis about does it. We can check on unseen data, using:\n```python\nunseen_predictions = predict_model(cb, data=data_unseen)\n```","14baa744":"### Null value density visualizaton:","3dbbce1a":"### Feature Importance Plot","bb7c14f9":"# How features co-relate","fc22aae5":"# Bonus: PyCaret\nPyCaret allows to quickly select the best regression method real fast.","c42d5be1":"## Exploring the data"}}