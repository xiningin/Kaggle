{"cell_type":{"975b62e2":"code","8698efbc":"code","b994a733":"code","1af3040a":"code","abcba515":"code","4daf1f62":"code","8c61353a":"code","64456f0c":"code","6fcebe14":"code","1e6bf588":"code","0204cdd8":"code","ea6cca83":"code","5be9b6ce":"code","be2df1a1":"code","167f90ec":"code","8d8da297":"code","7099d143":"code","739fb10d":"code","061cdc60":"markdown","98a1d776":"markdown","9c75aa33":"markdown","b8e1aada":"markdown","393e7b42":"markdown","c943e1b6":"markdown","b249bf3c":"markdown","9d31c81f":"markdown","413c953a":"markdown","961a92d9":"markdown","ac4e728d":"markdown","a7750140":"markdown","155924fb":"markdown","9561f60f":"markdown","f60aebb9":"markdown","2e17cdf5":"markdown","950e4837":"markdown","9302423e":"markdown","10e7502a":"markdown","b743b874":"markdown"},"source":{"975b62e2":"import datetime\nimport calendar\nimport collections\n\nimport numpy as np\nimport pandas as pd\n\nimport matplotlib.cm as cm\nimport matplotlib.pyplot as plt\nfrom matplotlib.colors import ListedColormap, LinearSegmentedColormap\n\nimport seaborn as sns\nimport plotly.graph_objects as go\n\nimport networkx as nx\nimport community as community_louvain\nfrom operator import itemgetter\n\nimport folium\nfrom folium import plugins\n\n# Custom Colors\nMAGENTA = \"#6C3483\"\nGREEN = \"#239B56\"\nBLUE = \"#5DADE2\"","8698efbc":"# For Kaggle\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n","b994a733":"dataframe = pd.read_csv(\"\/kaggle\/input\/helsinki-city-bikes\/database.csv\", low_memory=False)\ndataframe.head()","1af3040a":"dataframe[['departure','return']] =  dataframe[['departure','return']].apply(pd.to_datetime, format='%Y-%m-%d %H:%M:%S.%f')\n\ndataframe = dataframe.rename(columns={'distance (m)': 'distance',\n                                     'duration (sec.)': 'duration',\n                                     'avg_speed (km\/h)':'speed',\n                                      'Air temperature (degC)':'temperature',\n                                     })\ndataframe = dataframe[ \n                    (50 < dataframe['distance']) & (dataframe['distance'] < 10000) &\n                    (120 < dataframe['duration']) & (dataframe['duration'] <  18000) &\n                    (-20 < dataframe['temperature']) & (dataframe['temperature'] < 50)        \n                    ]","abcba515":"def bikeNetwork(dataframe, year=2020):\n    \"\"\"\n    This function plots the City bike network with node sizes illustrating station popularity.\n    \"\"\"\n    # Data\n    df = dataframe.copy()\n    df = df[df['departure'].dt.year == year]\n    df.dropna(inplace=True)\n    #print(df.isna().sum())\n    \n    # Graphs\n    G = nx.Graph()\n    G = nx.from_pandas_edgelist(df, 'departure_name', 'return_name', edge_attr=['duration','distance'])\n\n    # Figure\n    fig, ax = plt.subplots(figsize=(20,11))\n\n    # Positions\n    stantions  = pd.read_csv(\"https:\/\/raw.githubusercontent.com\/Geometrein\/helsinki-city-bikes\/main\/data\/downloaded_data\/station_coordinates.csv\")\n    stantions.set_index('name',inplace=True)\n    stantions[\"pos\"] = list(zip(stantions[\"longitude\"].astype(float), stantions[\"latitude\"].astype(float)))\n    pos = stantions.to_dict()['pos']\n\n    # Map \"pos\" atribute to nodes from pos dict\n    for node, position in pos.items():\n        try:\n            G.nodes[node]['pos'] = position\n        except KeyError:\n            pass\n\n    # Draw\n    nx.draw_networkx_nodes(G=G,pos=G.nodes.data('pos'), node_color=BLUE, alpha=0.5, node_size= (df['departure_name'].value_counts()\/15).tolist())\n    nx.draw_networkx_edges(G=G,pos=G.nodes.data('pos'), edge_color='grey', style =\"dotted\", alpha=0.1, arrows=False)\n    ax.axis('off')\n    \n    # Watermark\n    ax.text(0.99, 0.01, '\u00a9 Github\/Geometrein',\n            verticalalignment='bottom',\n            horizontalalignment='right',\n            transform=ax.transAxes,\n            color='grey',\n            fontsize=15,\n            alpha = 0.9)\n\n    return G\n\nG = bikeNetwork(dataframe)","4daf1f62":"def networkStats(G):\n    \"\"\"\n    This function prints the basic properties of the City bike network.\n    \"\"\"\n    print(nx.info(G))\n    density = nx.density(G)\n    print(\"Network density:\", density)\n    triadic_closure = nx.transitivity(G)\n    print(\"Triadic closure:\", triadic_closure)\n\n    degree_dict = dict(G.degree(G.nodes()))\n    nx.set_node_attributes(G, degree_dict, 'degree')\n    #print(G.nodes['Kamppi (M)'])\n\n    sorted_degree = sorted(degree_dict.items(), key=itemgetter(1), reverse=True)\n    print(\"\\nTop 5 nodes by degree:\\n\")\n    for d in sorted_degree[:5]:\n        print(d)\n\n    betweenness_dict = nx.betweenness_centrality(G) # Compute betweenness centrality\n    eigenvector_dict = nx.eigenvector_centrality(G) # Compute eigenvector centrality\n\n    sorted_betweenness = sorted(betweenness_dict.items(), key=itemgetter(1), reverse=True)\n\n    print(\"\\nTop 5 nodes by betweenness centrality:\\n\")\n    for b in sorted_betweenness[:5]:\n        print(b)\n\nnetworkStats(G)","8c61353a":"def mapPlot(dataframe, year = 2020):\n    \"\"\"\n    This function prints an interactive bubble plot by destination locations for a given year.\n    \"\"\"\n    # Data\n    df = dataframe.copy()\n    df = df[df['departure'].dt.year == year]\n    #df = df[:1000]\n    df.dropna(inplace=True)\n    df['freq'] = df.groupby('departure_name')['departure_name'].transform('count')\n    #print(df.isna().sum())\n    df[\"name\"] = df[\"departure_name\"]\n    df = df[[\"name\", \"freq\"]]\n    df = df.drop_duplicates(subset=['name'])\n    freq_dict = dict(zip(df.name, df.freq))\n\n    df_stations = pd.read_csv(\"https:\/\/raw.githubusercontent.com\/Geometrein\/helsinki-city-bikes\/main\/data\/downloaded_data\/station_coordinates.csv\", index_col=False)\n    df_stations = df_stations[df_stations[\"latitude\"]<=60.254011]\n    #print(df_stations.head())\n    df_stations['freq']= df_stations['name'].map(freq_dict)\n    #print(df_stations.head(), df_stations.isna().sum(), len(df_stations))\n    df_stations[\"freq_adj\"] = df_stations['freq']\/(df_stations['freq'].median()\/3)\n    df_stations.fillna(1, inplace=True)\n    df_stations.dropna(inplace=True)\n\n    # Map\n    hel_map = folium.Map([60.1975594, 24.9320720], zoom_start=12)\n    folium.TileLayer('cartodbdark_matter').add_to(hel_map)\n\n    for index, row in df_stations.iterrows():\n        folium.CircleMarker([row['latitude'],row['longitude']],\n                        radius=row[\"freq_adj\"],\n                        popup=row['freq'],\n                        color=\"#eab544\",\n                        fill_color=\"#eab544\",\n                    ).add_to(hel_map)\n\n    display(hel_map)\n    \n# function call is commented for performance reasons\nmapPlot(dataframe)","64456f0c":"def heatMapPlot(dataframe, year = 2020):\n    \"\"\"\n    This function prints an interactive heatmap by destination locations for a given year.\n    \"\"\"\n    # Data\n    df = dataframe.copy()\n    df = df[df['departure'].dt.year == year]\n\n    df.dropna(inplace=True)\n    df['freq'] = df.groupby('departure_name')['departure_name'].transform('count')\n    \n    # Map\n    hel_map = folium.Map([60.1975594, 24.9320720], zoom_start=12)\n    folium.TileLayer('cartodbdark_matter').add_to(hel_map)\n\n    stationArr = df[['departure_latitude', 'departure_longitude']].to_numpy()\n    hel_map.add_child(plugins.HeatMap(stationArr, radius=15))\n\n    display(hel_map)\n    \n# function call is commented for performance reasons\n#heatMapPlot(dataframe)","6fcebe14":"def centralityDegree(G):\n    \"\"\"\n    This function plots an interactive City bike network with node degrees\n    \"\"\"\n    # Figure\n    fig, ax = plt.subplots(figsize=(20,11))\n\n    degree = nx.degree_centrality(G)\n    node_color = [degree[i] for i in degree.keys()]\n\n    # Color scale\n    colors=range(20)\n    cmap=plt.cm.viridis\n    vmin = min(node_color)\n    vmax = max(node_color)\n    sm = plt.cm.ScalarMappable(cmap=cmap, norm=plt.Normalize(vmin = vmin, vmax=vmax))\n    sm._A = []\n    plt.colorbar(sm)\n\n    # Draw\n    nx.draw_networkx_nodes(G=G, pos=G.nodes.data('pos') ,node_color=node_color,cmap=\"viridis\", alpha=1, node_size= 50)\n    nx.draw_networkx_edges(G=G, pos=G.nodes.data('pos') ,edge_color='grey', style =\"dotted\", alpha=0.1, arrows=False)\n\n    # Labeling Axes\n    ax.set_title('Helsinki City Bike Network Degree Centrality', fontdict={\"fontsize\":20}, pad = 15)\n    ax.axis('off')\n\n    # Watermark\n    ax.text(0.99, 0.01, '\u00a9 Github\/Geometrein',\n            verticalalignment='bottom',\n            horizontalalignment='right',\n            transform=ax.transAxes,\n            color='grey',\n            fontsize=15,\n            alpha = 0.9)\n\n\n# function call is commented for performance reasons\ncentralityDegree(G)","1e6bf588":"def centralityDegreeInteractive(G):\n    \"\"\"\n    This function plots an interactive network with colorcoded node degrees.\n    \"\"\"\n    edge_x = []\n    edge_y = []\n    for edge in G.edges():\n        x0, y0 = G.nodes[edge[0]]['pos']\n        x1, y1 = G.nodes[edge[1]]['pos']\n        edge_x.append(x0)\n        edge_x.append(x1)\n        edge_x.append(None)\n        edge_y.append(y0)\n        edge_y.append(y1)\n        edge_y.append(None)\n\n    edge_trace = go.Scatter(\n        x=edge_x, y=edge_y,\n        opacity=0.4,\n        line=dict(width=0.5, color='#888', dash='dot'),\n        hoverinfo='none',\n        mode='lines')\n\n    node_x = []\n    node_y = []\n    for node in G.nodes():\n        x, y = G.nodes[node]['pos']\n        node_x.append(x)\n        node_y.append(y)\n\n    node_trace = go.Scatter(x=node_x, y=node_y, mode='markers', hoverinfo='text',\n        marker=dict(\n            showscale=True,\n            colorscale='Blues',\n            reversescale=True,\n            color=[],\n            size=10,\n            colorbar=dict(thickness=15,title='Node Connections',xanchor='left',titleside='right'),\n            line_width=1))\n\n    node_adjacencies = []\n    node_text = []\n    for node, adjacencies in enumerate(G.adjacency()):\n        node_adjacencies.append(len(adjacencies[1]))\n        node_text.append('Number of connections: '+str(len(adjacencies[1])))\n\n    node_trace.marker.color = node_adjacencies\n    node_trace.text = node_text\n\n    fig = go.Figure(data=[edge_trace, node_trace],\n                 layout=go.Layout(\n                    width=800,\n                    height=500, \n                    title='Helsinki City Bike Network 2020',\n                    titlefont_size=16,\n                    showlegend=False,\n                    hovermode='closest',\n                    margin=dict(b=20,l=5,r=5,t=40),\n                    paper_bgcolor='rgba(255,255,255,0)',\n                    plot_bgcolor='rgba(255,255,255,1)',\n                    annotations=[ dict(\n                        text=\"Helsinki\",\n                        showarrow=False,\n                        xref=\"paper\", yref=\"paper\",\n                        x=0.005, y=-0.002 )],\n                    xaxis=dict(showgrid=True, zeroline=False, showticklabels=True),\n                    yaxis=dict(showgrid=True, zeroline=False, showticklabels=True))\n                    )\n\n    fig.show()\n\n# function call is commented for performance reasons\n#centralityDegreeInteractive(G)","0204cdd8":"def centralityDegreeDist(G):\n    \"\"\"\n    Centrality degree distribution\n    \"\"\"\n    # Degree\n    degree_sequence = sorted([d for n, d in G.degree()], reverse=True)\n    degreeCount = collections.Counter(degree_sequence)\n    deg, cnt = zip(*degreeCount.items())\n\n    # Figure\n    fig, ax = plt.subplots(figsize=(20,9))\n    plt.bar(deg, cnt, width=1, color=BLUE)\n    plt.axvline(x = sum(deg)\/len(deg), color=GREEN, linestyle='-', linewidth=2) # Degree Mean\n    #plt.axvline(x = np.median(deg), color=\"blue\", linestyle='-', linewidth=1) # Degree Median\n\n    # Labeling\n    plt.title(\"Helsinki City Bike Network Degree Distribution\")\n    plt.ylabel(\"Count\")\n    plt.xlabel(\"Degree\")\n    plt.text(x= 152,y=6.5, s=\"Mean\", color = GREEN, fontsize= 12)\n    ax.set_xticks(range(40,340,20))\n\n    # Watermark\n    ax.text(0.99, 0.01, '\u00a9 Github\/Geometrein',\n            verticalalignment='bottom',\n            horizontalalignment='right',\n            transform=ax.transAxes,\n            color='grey',\n            fontsize=15,\n            alpha = 0.9)\n\n    plt.show()\n    \ncentralityDegreeDist(G)","ea6cca83":"def centralityBetweenness(Graph): \n    \"\"\"\n    This function plots the city bike network betweenes centrality\n    \"\"\"\n    \n    G = Graph.copy(as_view=False)\n    G.remove_node(\"Haukilahdenkatu\")\n        \n    # Figure\n    fig, ax = plt.subplots(figsize=(20,11))\n    \n   \n\n    betweenness = nx.betweenness_centrality(G)\n    node_color = [betweenness[i] for i in betweenness.keys()]\n\n    # Color scale\n    colors=range(20)\n    cmap=plt.cm.viridis\n    vmin = min(node_color)\n    vmax = max(node_color) - (sum(node_color)\/len(node_color))\n    sm = plt.cm.ScalarMappable(cmap=cmap, norm=plt.Normalize(vmin = vmin, vmax=vmax))\n    sm._A = []\n    plt.colorbar(sm)\n\n    # Draw\n    nx.draw_networkx_nodes(G=G, pos=G.nodes.data('pos') ,node_color=node_color,cmap=\"viridis\", alpha=1, node_size= 50)\n    nx.draw_networkx_edges(G=G, pos=G.nodes.data('pos') ,edge_color='grey', style =\"dotted\", alpha=0.1, arrows=False)\n\n    # Labeling Axes\n    ax.set_title('Helsinki City Bike Network Betweenness Centrality', fontdict={\"fontsize\":20}, pad = 15)\n    ax.axis('off')\n\n    # Watermark\n    ax.text(0.99, 0.01, '\u00a9 Github\/Geometrein',\n            verticalalignment='bottom',\n            horizontalalignment='right',\n            transform=ax.transAxes,\n            color='grey',\n            fontsize=15,\n            alpha = 0.9)\n\n\ncentralityBetweenness(G)","5be9b6ce":"def centralityCloseness(G):\n    \"\"\"\n    This function plots an interactive City bike network with node degrees\n    \"\"\"\n    # Figure\n    fig, ax = plt.subplots(figsize=(20,11))\n\n    closeness = nx.closeness_centrality(G)\n    node_color = [closeness[i] for i in closeness.keys()]\n\n    # Color scale\n    colors=range(20)\n    cmap=plt.cm.viridis\n    vmin = min(node_color)\n    vmax = max(node_color)\n    sm = plt.cm.ScalarMappable(cmap=cmap, norm=plt.Normalize(vmin = vmin, vmax=vmax))\n    sm._A = []\n    plt.colorbar(sm)\n\n    # Draw\n    nx.draw_networkx_nodes(G=G, pos=G.nodes.data('pos') ,node_color=node_color,cmap=\"viridis\", alpha=1, node_size= 50)\n    nx.draw_networkx_edges(G=G, pos=G.nodes.data('pos') ,edge_color='grey', style =\"dotted\", alpha=0.1, arrows=False)\n\n    # Labeling Axes\n    ax.set_title('Helsinki City Bike Network Closeness Centrality', fontdict={\"fontsize\":20}, pad = 15)\n    ax.axis('off')\n\n    # Watermark\n    ax.text(0.99, 0.01, '\u00a9 Github\/Geometrein',\n            verticalalignment='bottom',\n            horizontalalignment='right',\n            transform=ax.transAxes,\n            color='grey',\n            fontsize=15,\n            alpha = 0.9)\n\n\ncentralityCloseness(G)","be2df1a1":"def centralityEigenvector(G):\n    \"\"\"\n    This function plots the city bike network Eigenvector centrality\n    \"\"\"\n    # Figure\n    fig, ax = plt.subplots(figsize=(20,11))\n\n    eigenvector = nx.eigenvector_centrality(G, max_iter=6000, weight=\"duration\")\n    node_color = [eigenvector[i] for i in eigenvector.keys()]\n\n    # Color scale\n    colors=range(20)\n    cmap=plt.cm.viridis\n    vmin = min(node_color)\n    vmax = max(node_color)\n    sm = plt.cm.ScalarMappable(cmap=cmap, norm=plt.Normalize(vmin = vmin, vmax=vmax))\n    sm._A = []\n    plt.colorbar(sm)\n\n    # Draw\n    nx.draw_networkx_nodes(G=G, pos=G.nodes.data('pos') ,node_color=node_color,cmap=\"viridis\", alpha=1, node_size= 50)\n    nx.draw_networkx_edges(G=G, pos=G.nodes.data('pos') ,edge_color='grey', style =\"dotted\", alpha=0.1, arrows=False)\n\n    # Labeling Axes\n    ax.set_title('Helsinki City Bike Network Eigenvector Centrality', fontdict={\"fontsize\":20}, pad = 15)\n    ax.axis('off')\n\n    # Watermark\n    ax.text(0.99, 0.01, '\u00a9 Github\/Geometrein',\n            verticalalignment='bottom',\n            horizontalalignment='right',\n            transform=ax.transAxes,\n            color='grey',\n            fontsize=15,\n            alpha = 0.9)\n\n\n# function call is commented for performance reasons\ncentralityEigenvector(G)","167f90ec":"def centralityPageRank(dataframe, year=2020):\n    \"\"\"\n    This function plots the city bike network nodes by PageRank\n    \"\"\"\n\n    df = dataframe.copy()\n    df = df[df['departure'].dt.year == year]\n    df.dropna(inplace=True)\n    \n    # Directed Graph\n    G = nx.Graph()\n    G = nx.from_pandas_edgelist(df, source='departure_name', target='return_name', edge_attr=['duration','distance'], create_using=nx.DiGraph())\n\n    # Positions\n    stantions  = pd.read_csv(\"https:\/\/raw.githubusercontent.com\/Geometrein\/helsinki-city-bikes\/main\/data\/downloaded_data\/station_coordinates.csv\")\n    stantions.set_index('name',inplace=True)\n    stantions[\"pos\"] = list(zip(stantions[\"longitude\"].astype(float), stantions[\"latitude\"].astype(float)))\n    pos = stantions.to_dict()['pos']\n\n    # Map \"pos\" atribute to nodes from pos dict\n    for node, position in pos.items():\n        try:\n            G.nodes[node]['pos'] = position\n        except KeyError:\n            pass\n\n    # Phagerank\n    phagerank = nx.algorithms.link_analysis.pagerank_alg.pagerank(G, weight=\"duration\")\n    node_color = [phagerank[i] for i in phagerank.keys()]\n\n    # Figure\n    fig, ax = plt.subplots(figsize=(20,11))\n\n    # Color Scale\n    colors=range(20)\n    cmap=plt.cm.viridis\n    vmin = min(node_color)\n    vmax = max(node_color)\n    sm = plt.cm.ScalarMappable(cmap=cmap, norm=plt.Normalize(vmin = vmin, vmax=vmax))\n    sm._A = []\n    plt.colorbar(sm)\n\n    # Draw\n    nx.draw_networkx_nodes(G=G, pos=G.nodes.data('pos'), node_color=node_color, cmap=\"viridis\", alpha=1, node_size= 50)\n    nx.draw_networkx_edges(G=G, pos=G.nodes.data('pos'), edge_color='grey', style =\"dotted\", alpha=0.1, arrows=False)\n\n    # Labeling Axes\n    ax.set_title('Helsinki City Bike Network PageRank Centrality', fontdict={\"fontsize\":20}, pad = 15)\n    ax.axis('off')\n\n    # Watermark\n    ax.text(0.99, 0.01, '\u00a9 Github\/Geometrein',\n            verticalalignment='bottom',\n            horizontalalignment='right',\n            transform=ax.transAxes,\n            color='grey',\n            fontsize=15,\n            alpha = 0.9)\n\ncentralityPageRank(dataframe) ","8d8da297":"# Import pycombo \ndef communityCombo(G):\n    \"\"\"\n    \"\"\"\n    # Figure\n    fig, ax = plt.subplots(figsize=(20,11))\n\n    # Partition\n    partition, modularity = pycombo.execute(G, return_modularity=True, modularity_resolution= 1,  weight=\"duration\", max_communities=2, random_seed=1)\n\n    # Partition colormap\n    cmap = cm.get_cmap('tab20b', max(partition.values()) + 1)\n\n    # Draw Nodes & Edges\n    nx.draw_networkx_nodes(G, G.nodes.data('pos'), partition.keys(), node_size=40, cmap=cmap, node_color=list(partition.values()))\n    nx.draw_networkx_edges(G, G.nodes.data('pos'), alpha=0.015)\n\n    # Labeling Axes\n    ax.set_title('Helsinki City Bike Network Communities (Combo method)', fontdict={\"fontsize\":20}, pad = 15)\n    ax.axis('off')\n\n    # Watermark\n    ax.text(0.99, 0.01, '\u00a9 Github\/Geometrein',\n            verticalalignment='bottom',\n            horizontalalignment='right',\n            transform=ax.transAxes,\n            color='grey',\n            fontsize=15,\n            alpha = 0.9)\n\n    plt.show()\n\n#communityCombo(G)","7099d143":"def communityLouvain(G):\n    \"\"\"\n    This function applies the Louvain method for community detection on the City bike network.\n    \"\"\"\n\n    # Figure\n    fig, ax = plt.subplots(figsize=(20,11))\n\n    # Compute Louvain method\n    partition = community_louvain.best_partition(G, resolution=0.95, random_state=1)\n\n    # Partition colormap\n    cmap = cm.get_cmap('tab20b', max(partition.values()) + 1)\n\n    # Draw Nodes & Edges\n    nx.draw_networkx_nodes(G, G.nodes.data('pos'), partition.keys(), node_size=40, cmap=cmap, node_color=list(partition.values()))\n    nx.draw_networkx_edges(G, G.nodes.data('pos'), alpha=0.015)\n\n    # Labeling Axes\n    ax.set_title('Helsinki City Bike Network Communities (Louvain method)', fontdict={\"fontsize\":20}, pad = 15)\n    ax.axis('off')\n\n    # Watermark\n    ax.text(0.99, 0.01, '\u00a9 Github\/Geometrein',\n            verticalalignment='bottom',\n            horizontalalignment='right',\n            transform=ax.transAxes,\n            color='grey',\n            fontsize=15,\n            alpha = 0.9)\n\n    plt.show()\n    \ncommunityLouvain(G)","739fb10d":"def communityFluid(G):\n    \"\"\"\n    This function applies the Fluid Communities method for community detection on the City bike network.\n    \"\"\"\n\n    # Figure\n    fig, ax = plt.subplots(figsize=(20,11))\n\n    # Compute Fluid method\n    communities = nx.algorithms.community.asyn_fluid.asyn_fluidc(G, k=5, max_iter=10000, seed=1)\n    \n    # Assigning each node to its cluster\n    partition = {}\n    for idx, val in enumerate(communities):\n        for k in val:\n            partition[k] = idx\n\n    # Partition colormap\n    cmap = cm.get_cmap('tab20b', max(partition.values()) + 1)\n\n    # Draw Nodes & Edges\n    nx.draw_networkx_nodes(G, G.nodes.data('pos'), partition.keys(), node_size=40, cmap=cmap, node_color=list(partition.values()))\n    nx.draw_networkx_edges(G, G.nodes.data('pos'), alpha=0.015)\n\n    # Labeling Axes\n    ax.set_title('Helsinki City Bike Network Communities (Fluid Communities method)', fontdict={\"fontsize\":20}, pad = 15)\n    ax.axis('off')\n\n    # Watermark\n    ax.text(0.99, 0.01, '\u00a9 Github\/Geometrein',\n            verticalalignment='bottom',\n            horizontalalignment='right',\n            transform=ax.transAxes,\n            color='grey',\n            fontsize=15,\n            alpha = 0.9)\n\n    plt.show()\n    \ncommunityFluid(G)","061cdc60":"This means that bike usage inside these four communities is higher than the bike usage between these communities. Nodes with high betweenness centrality are usually the places where the communities might be divided into modules. If we return to our betweenness centrality graph this relationship will become even more evident. Boundaries of the communities pass roughly through the nodes with high betweenness centrality. Also, this division doesn't come as a surprise taking into account the geographic character of the Helsinki archipelago. Landmasses and their divisions by large bodies of water significantly affect community formation. It is important to highlight that all transportation networks are spatial networks and their structure and evolution are closely intertwined with physical constraints. An interesting discovery is that the Leppavara area, despite being part of Espoo municipality, is more densely connected to Munkiniemi and Pit\u00e4j\u00e4nmaki than to Otniemi or Tapiola areas. A similar tendency can be seen in some stations around S\u00f6rn\u00e4inen where stations are more densely connected to the Herttoniemi area.","98a1d776":"# Helsinki City Bikes: Network\u00a0Analysis\n\n| **[Associated Github Repo](https:\/\/github.com\/Geometrein\/helsinki-city-bikes)** | \n**[Associated Medium Article](https:\/\/towardsdatascience.com\/helsinki-city-bikes-network-analysis-512cc7f121cd)** |\n\nThe **[first part](https:\/\/www.kaggle.com\/geometrein\/helsinki-city-bikes-eda)** of this Kernel looked at the Helsinki city bike system through the lens of descriptive statistics. In this article, the city bike system will be analyzed as a complex network.\n\n# Introduction\nFor the past decades, transportation systems are commonly analyzed as networks. This abstraction allows to reduce the amount of information available and focus primarily on the internal structure of the underlying systems.\nThis idea is certainly not novel in [mathematics](https:\/\/en.wikipedia.org\/wiki\/Seven_Bridges_of_K%C3%B6nigsberg) or [urban planning](https:\/\/tigran-khachatryan.medium.com\/architectural-context-in-the-age-of-big-data-camillo-sitte-a0d9ff377b5c). However, the recent developments in computational technologies and GIS frameworks enabled a new pragmatic application of graph theoretical ideas in the field of transport planning and geographic mobility.\n\n>Within the context of transportation, the term network  refers to the framework of routes within a system of locations, identified as nodes. A route is a single link between two nodes that are part of a larger network that can refer to tangible routes such as roads and rails, or less tangible routes such as air and sea corridors.\n\nTransportation networks normally denote either permanent physical tracks such as roads and railroads or a scheduled service. What makes bike-sharing and car-sharing services special is their ubiquity and possibility for self-organization. Unlike scheduled bus and train services, bike-sharing occurs on-demand and is more spatially flexible. It is crucial to highlight that edges of the city bike network are not predetermined, they are generated by the users. Thus, the structure of the network emerges from the flow of people through the city. Reoccurring trips made by the residents gradually formulate usage patterns and create the structure of the bike-sharing network. This information, in turn, can be used in a feedback loop for the evolution of the network. Rising or decreasing bike demand can provide insights into wider sociological, economical and geographic factors in certain areas.","9c75aa33":"The graph below illustrates bike usage in different areas of Helsinki during 2020. As expected the central Helsinki where most of the economic and cultural value is accumulated is the most active in terms of geographic mobility. However, as pointed out in the first part of this article, the geographic centre of Helsinki and the centre of Helsinki bike network are not the same. Where exactly is the centre of the city bike network?","b8e1aada":"# Betweenness Centrality\n\nThe betweenness centrality captures how much a given node is \"in-between\" others. This measure calculates the shortest paths between all the nodes of the network and assigns each node a measure based on the number of shortest paths going through the target node. The graph below illustrates the city bike stations by betweenness centrality.","393e7b42":"# Combo Method\n## Does Not work on kaggle yet. Preview **[here.](https:\/\/github.com\/Geometrein\/helsinki-city-bikes\/blob\/main\/Helsinki_city_bikes_network_analysis.ipynb)**\nThe majority of exiting community detection strategies iteratively perform one of the following operations: merging two small communities, splitting a large community into two, moving nodes between two distinct communities. The Combo algorithm developed at MIT sensible city lab compounds all three strategies into a sequence. After creating an initial single community, for each source community, the best possible redistribution of all source nodes is calculated then the best grouping is applied. These steps are iteratively repeated until the given fitness criteria are achieved. The graph below illustrates the Combo method applied to the Helsinki city bike network.","c943e1b6":"We can see that the Fluid community detection method confirms the communities identified with the Louvain method and identifies one additional community.\u00a0\n- Eastern Espoo(Magenta Community) is a distinct community shaped by geographic constraints and extending along the metro line towards the West.\u00a0\n- Lepp\u00e4vaara, Pit\u00e4janmaki, Munkiniemi, and Etel\u00e4 Haaga (Green Community) form another cycling community despite the municipality divisions separating the districts.\n- The areas of Vallila, Kapyla and Oulunkyl\u00e4 form another group(Pink Community) separated from the Green community by Central Park. This community is stretched along the railroad in northern Helsinki.\n- The southern part of Helsinki (Blue Community) includes the geographic centre of Helsinki and major stations such as Kammpi, central railway station and extends towards the southern shoreline.\n- Meanwhile, Herttoniemi is at the centre of another enclave (Yellow Community) that extend from Sornainen to Vuosaari along the metro line.","b249bf3c":"As illustrated before a large amount of station is directly connected to Haukilahdenkatu station. This leads to Haukilahdenkatu station having the highest closeness centrality within the network. Other nodes with high closeness centrality are located in the areas of T\u00f6\u00f6lo and Pasila. Closeness centrality might be interesting metrics for network optimization, especially for larger networks. In larger bike-sharing networks users might be motivated to make stops at the intermediary bike stations to avoid extra charges. However, as we have seen in the previous part of this article long trips are not common in Helsinki.","9d31c81f":"# Community Detection\nCommunities in networks refer to groups of nodes that are densely connected internally. Community detection is often a crucial process for understanding the structure of complex networks. In the case of the city bike network, community detection can help to better understand bike usage patterns and determine adequate pricing models. There is a number of algorithms available for community detection.","413c953a":"The node with the highest betweenness centrality represents the Lehtisaarentie station. This is a well-saturated example of geographic constraints affecting the structure of spatial networks. The station is located on the Lehtisaari island that links the Aalto University campus to Munkkiniemi and Helsinki. Due to the specificity of the Helsinki archipelago, traffic flows from one municipality to another are mostly channelled through island-bridge systems that lie in between. This makes both Lehtisaari and Lautasarri islands crucial traffic nodes connecting the municipality of Espoo to Helsinki.","961a92d9":"## Basic Network Stats","ac4e728d":"# Louvain Method\nSince the previous community detection method did not yield insightful results we can apply a different method that only focuses on the modularity of the network. The Louvain community detection algorithm is chosen due to its beautiful simplicity and the resulting ease of implementation\/computation. It allows circumventing the NP-complete problem of maximum cuts in Graphs. Applying the Louvain method to the Helsinki city bike network reveals four distinct communities.","a7750140":"## Creating the Graph object","155924fb":"# Eigenvector centrality &\u00a0PageRank\nEigenvector centrality measures a node's importance within the network while giving consideration to the importance of its neighbours. Connections to high-scoring eigenvector centrality nodes contribute more to the score than equal connections to low-scoring nodes. In other words, a node with a large number of connections may have a low Eigenvector score if all of its connections are with low-score nodes. A popular variation of eigenvector centrality is Google's PageRank. In essence, PageRank is a variation of normalized eigenvector centrality combined with random jumps. Thus it is not surprising that Pagerank yields result comparable to Eigenvector(graphs below). With this method, stations like the Central Railway Station, Pasila, Lehtisaarentie and Haukilahdenkatu appear as central nodes within the network.","9561f60f":"# Closeness Centrality\nCloseness centrality is a way of detecting nodes that are able to distribute flows efficiently through the network. The closeness centrality is calculated as the normalized average of all of its geodesic distances. Within the context of the city bikes, a node with high closeness centrality will indicate stations that can potentially act as versatile intermediary stations within the network.","f60aebb9":"# Network Centrality Measures\nComplex networks by definition are highly heterogeneous structures. This often results in some parts of the network being more information-rich than others. For example, in social networks, some individuals might have a large number of connections and can spread information faster than others. Hence, within the context of social network analysis, the nodes that represent them are considered more important(central). Within the context of transportation networks, an urban region where the influx of people is higher than in the other areas can be considered central. However, the centrality of a given network may change over time as a result of the growth and evolution of the underlying system. Thus, the definition of centrality is not absolute but rather depends on the specific context and the purpose of the abstraction. Taking this relativity into account, several centrality measures have been proposed that focus on different types of relationships between the nodes.\n\n# Degree Centrality\n\nDegree centrality is the most simple centrality measure to understand and compute. \"Degree\" of a node refers to the number of nodes that a given node is connected to. Within the context of city bikes, this refers to the number of bike stations that users have travelled to from the target station. As we can see in the graph below stations located in central Helsinki have a higher number of connections. Closer to the periphery of the network the degree of the nodes gradually decreases.\n","2e17cdf5":"# Fluid Communities Method\nThe Fluid Communities algorithm is a community detection algorithm based on the idea of introducing a number of fluids within a non-homogeneous environment, where fluids will expand and push each other influenced by the topology of the environment until a stable state is reached. The algorithm does the following. First, it defines each of the starting communities in a random node of the graph. Then the algorithm iterates over all nodes in a random order, updating the community of each node based on its own community and the communities of its neighbours. This process is performed iteratively until convergence.","950e4837":"The average degree of a node in the Helsinki city bike network is 162. This means that a bike station on average is connected to 162 different stations. The stations with the highest centrality degree are:\n\n- Haukilahdenkatu:    312 connections\n\n- Paciuksenkaari:     272 connections\n\n- Huopalahdentie:     267 connections \n\n- Laajalahden aukio:  262 connections\n\n- Munkkiniemen aukio: 262 connections\n\n- T\u00f6\u00f6l\u00f6ntulli:        260 connections\n\n- Tilkanvierto:       259 connections\n\n- Paciuksenkatu:      258 connections\n\n- Pasilan asema:      258 connections \n\n- Esterinportti:      256 connections\n\nThe fact that Haukilahdenkatu station is at the top of this list suggests that a large number of citizens from different districts make regular trips to and from this station. This could potentially mean that this station is either next to a large transportation hub or an important point of interest. Quick google search will reveal that it's located across the street from a large educational institution and a work rehabilitation centre. This explains both the regularity of the trips and the inflow of people from different suburban areas.","9302423e":"# Conclusion\nIn this part of the kernel, the Helsinki city bike network was briefly analyzed as a complex network. Multiple centrality measures were applied to the network and important centres were identified. Tree community detection algorithms revealed different possible groupings of the nodes within the network. The next part of the kernel will take a look at how machine learning methods can be applied to further enhance understanding of relationships within the network.","10e7502a":"This grouping reveals two distinct communities that are separated approximately in line with the exiting municipality divisions. This is perhaps not extremely informative since this division could have been assumed merely by looking at the map. Based on the first part of this article, intuitive understanding suggests that bikes are more likely to be used inside the municipalities on shorter distances. Therefore if other communities exist they should be found on a more local scale.","b743b874":"The application of eigenvector and PageRank in an urban context is a subject of ongoing debate. It has been suggested that these metrics applied in an urban context often lead to misleading results since they ignore a multitude of urban qualities that might contribute to the importance of the node within the city. Some methods to overcome this issue propose adding an increasing amount of information to the graphs. This is a questionable approach since adding an increasing amount of information will inevitably introduce new arbitrary patterns within the data. Thus, these approaches often blur the clarity achieved by the act of abstraction creating a clear anti-pattern.\n\n\u00a0While the limitation of Eigenvector centrality to capture urban qualities might be a problem in collective transportation systems where the routes of the services are predetermined, this is certainly not the case with individual transportation. As mentioned before, the structure of individual transportation networks is generated by the users therefore it already has the information about the urban qualities embedded in it. The fact that users have a choice and choose to take one path instead of the other creates a trivial voting mechanism that rates different areas of the city. Thus, in this kind of networks, the study of the structure of the network is also a study of user behaviour and their preferable urban qualities. Additionally, Eigenvector centrality in individual transportation networks allows highlighting not only important singular nodes but also geographically important areas within the city. This is possible because it acknowledges not only the importance of individual station but also the importance of stations adjacent to them. Eigenvector centrality illustrates that importance in the city bike stations(nodes) is derived no so much from their inherent attributes(location, station size) but rather from their relationships with other nodes within the network. Central stations together with nodes adjacent to them form small enclaves of activity. The identification of this kind of groupings of nodes within the context of complex networks is commonly referred to as community detection."}}