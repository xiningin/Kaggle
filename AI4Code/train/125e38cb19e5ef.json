{"cell_type":{"cbca0cc8":"code","c7805840":"code","4520d94c":"code","7f33de1f":"code","543c1182":"code","531de948":"code","0421a502":"code","3d107fd7":"code","16f1b68f":"code","1860f425":"code","b591ef22":"code","d4804322":"code","d4699950":"code","2e259f3f":"code","0ff16c31":"code","68c85682":"code","2d23caf9":"code","a1f4e4d3":"code","02f7ff7f":"code","dafa5945":"code","be9892a2":"code","b898786c":"code","d6d671d0":"code","46d69e73":"code","f508c3ea":"code","1fb4574c":"code","c2bf3103":"code","c7b38af1":"code","b5139f5a":"code","6f9a254e":"code","a9ab7c57":"code","a2a8aa04":"code","50a19c8f":"code","fdcb0dd1":"code","5cdd355c":"code","2fb53dfd":"code","6a87fce7":"markdown","bba53c51":"markdown","5b646d82":"markdown","50616a45":"markdown","649612ce":"markdown","4228fc8c":"markdown","4afd9f86":"markdown"},"source":{"cbca0cc8":"!pip install -q imageio\n!pip install -q git+https:\/\/github.com\/tensorflow\/docs","c7805840":"import tensorflow as tf\nimport glob\nimport imageio\nimport matplotlib.pyplot as plt\nimport numpy as np\nimport os\nfrom glob import glob\nimport pandas as pd\nimport tensorflow_docs.vis.embed as embed\nfrom PIL import Image\nfrom tensorflow.keras import layers\nimport time\nfrom IPython import display","4520d94c":"data_dir = '..\/input\/celeba-dataset\/'","7f33de1f":"df_partition = pd.read_csv(f'{data_dir}list_eval_partition.csv')\nimg_dir = f'{data_dir}img_align_celeba\/img_align_celeba\/'\ntrain_paths = [img_dir + i for i in df_partition[df_partition['partition'] == 0]['image_id']]\nval_paths = [img_dir + i for i in df_partition[df_partition['partition'] == 1]['image_id']]\ntest_paths = [img_dir + i for i in df_partition[df_partition['partition'] == 2]['image_id']]\nprint(f'Train: {len(train_paths)}')\nprint(f'Val: {len(val_paths)}')\nprint(f'Test: {len(test_paths)}')","543c1182":"def load_image(path, max_dim=None, gray=False):\n    img = Image.open(path)\n    if max_dim:\n        img.thumbnail((max_dim, max_dim))\n    if gray:\n        img = img.convert('L')\n    return np.array(img)","531de948":"def normalize(img):\n    img = (img - 127.5) \/ 127.5\n    return img\n\n\ndef denormalize(img):\n    img = img * 127.5 + 127.5\n    return img\n\n\ndef show(img, gray=False):\n    plt.axis('off')\n    if gray:\n        plt.imshow(img, cmap='gray')\n    else:\n        plt.imshow(img)","0421a502":"# all valid dimentions\nfor i in range(max(load_image(train_paths[100000], gray=True).shape)):\n    im = load_image(train_paths[100000], max_dim=i, gray=True)\n    shape = im.shape\n    if shape[0] % 4 == 0 and shape[1] % 4 == 0:\n        print(shape)","3d107fd7":"max_dim = 88\ngray = False","16f1b68f":"im = load_image(train_paths[100000], max_dim=max_dim, gray=gray)\nshape = im.shape\nprint(f'Shape: {shape}')\n# Both dimentions have to be divisible by 4\nassert shape[0] % 4 == 0\nassert shape[1] % 4 == 0\nshow(im, gray)","1860f425":"train_images = np.array([load_image(path, max_dim=max_dim, gray=gray)\n                         for path in test_paths])\nif len(train_images.shape) == 3:\n    train_images = train_images.reshape(train_images.shape + (1,))\ninput_shape = train_images.shape[1:]\ntrain_images.shape","b591ef22":"train_images = normalize(train_images)","d4804322":"BUFFER_SIZE = 60000\nBATCH_SIZE = 256","d4699950":"# Batch and shuffle the data\ntrain_dataset = tf.data.Dataset.from_tensor_slices(train_images).shuffle(BUFFER_SIZE).batch(BATCH_SIZE)","2e259f3f":"# Delete train_images to save memory\ndel train_images","0ff16c31":"noise_dim = 100","68c85682":"def make_generator_model(img_shape):\n    model = tf.keras.Sequential()\n    model.add(layers.Dense((img_shape[0] \/\/ 4) * (img_shape[1] \/\/ 4) * 256, \n                           use_bias=False, input_shape=(noise_dim,)))\n    model.add(layers.BatchNormalization())\n    model.add(layers.LeakyReLU())\n\n    model.add(layers.Reshape((img_shape[0] \/\/ 4, img_shape[1] \/\/ 4, 256)))\n    assert model.output_shape == (None, img_shape[0] \/\/ 4, img_shape[1] \/\/ 4, 256)\n\n    model.add(layers.Conv2DTranspose(128, (5, 5), strides=(1, 1), padding='same', use_bias=False))\n    assert model.output_shape == (None, img_shape[0] \/\/ 4, img_shape[1] \/\/ 4, 128)\n    model.add(layers.BatchNormalization())\n    model.add(layers.LeakyReLU())\n\n    model.add(layers.Conv2DTranspose(64, (5, 5), strides=(2, 2), padding='same', use_bias=False))\n    assert model.output_shape == (None, img_shape[0] \/\/ 2, img_shape[1] \/\/ 2, 64)\n    model.add(layers.BatchNormalization())\n    model.add(layers.LeakyReLU())\n\n    model.add(layers.Conv2DTranspose(img_shape[2], (5, 5), strides=(2, 2), padding='same', use_bias=False, activation='tanh'))\n    assert model.output_shape == (None, img_shape[0], img_shape[1], img_shape[2])\n\n    return model","2d23caf9":"generator = make_generator_model(input_shape)\ngenerator.summary()","a1f4e4d3":"noise = tf.random.normal([1, noise_dim])\ngenerated_image = generator(noise, training=False)\n\nshow(generated_image[0, :, :, :]\/2+0.5, gray)","02f7ff7f":"def make_discriminator_model(img_shape):\n    model = tf.keras.Sequential()\n    model.add(layers.Conv2D(64, (5, 5), strides=(2, 2), padding='same',\n                                     input_shape=list(img_shape)))\n    model.add(layers.LeakyReLU())\n    model.add(layers.Dropout(0.3))\n\n    model.add(layers.Conv2D(128, (5, 5), strides=(2, 2), padding='same'))\n    model.add(layers.LeakyReLU())\n    model.add(layers.Dropout(0.3))\n\n    model.add(layers.Flatten())\n    model.add(layers.Dense(1))\n\n    return model","dafa5945":"discriminator = make_discriminator_model(input_shape)\ndiscriminator.summary()","be9892a2":"decision = discriminator(generated_image)\nprint(decision)","b898786c":"# This method returns a helper function to compute cross entropy loss\ncross_entropy = tf.keras.losses.BinaryCrossentropy(from_logits=True)","d6d671d0":"def discriminator_loss(real_output, fake_output):\n    real_loss = cross_entropy(tf.ones_like(real_output), real_output)\n    fake_loss = cross_entropy(tf.zeros_like(fake_output), fake_output)\n    total_loss = real_loss + fake_loss\n    return total_loss","46d69e73":"def generator_loss(fake_output):\n    return cross_entropy(tf.ones_like(fake_output), fake_output)","f508c3ea":"generator_optimizer = tf.keras.optimizers.Adam(1e-4)\ndiscriminator_optimizer = tf.keras.optimizers.Adam(1e-4)","1fb4574c":"checkpoint_dir = '.\/training_checkpoints'\ncheckpoint_prefix = os.path.join(checkpoint_dir, 'ckpt')\ncheckpoint = tf.train.Checkpoint(generator_optimizer=generator_optimizer,\n                                 discriminator_optimizer=discriminator_optimizer,\n                                 generator=generator,\n                                 discriminator=discriminator)","c2bf3103":"EPOCHS = 500\nnum_examples_to_generate = 16\n\n# You will reuse this seed overtime (so it's easier)\n# to visualize progress in the animated GIF)\nseed = tf.random.normal([num_examples_to_generate, noise_dim])","c7b38af1":"@tf.function\ndef train_step(images):\n    noise = tf.random.normal([BATCH_SIZE, noise_dim])\n\n    with tf.GradientTape() as gen_tape, tf.GradientTape() as disc_tape:\n        generated_images = generator(noise, training=True)\n\n        real_output = discriminator(images, training=True)\n        fake_output = discriminator(generated_images, training=True)\n\n        gen_loss = generator_loss(fake_output)\n        disc_loss = discriminator_loss(real_output, fake_output)\n\n    gradients_of_generator = gen_tape.gradient(gen_loss, generator.trainable_variables)\n    gradients_of_discriminator = disc_tape.gradient(disc_loss, discriminator.trainable_variables)\n\n    generator_optimizer.apply_gradients(zip(gradients_of_generator, generator.trainable_variables))\n    discriminator_optimizer.apply_gradients(zip(gradients_of_discriminator, discriminator.trainable_variables))","b5139f5a":"def train(dataset, epochs):\n    for epoch in range(epochs):\n        start = time.time()\n\n        for image_batch in dataset:\n            train_step(image_batch)\n\n        # Produce images for the GIF as you go\n        display.clear_output(wait=True)\n        generate_and_save_images(generator,\n                                 epoch + 1,\n                                 seed)\n\n        # Save the model every 15 epochs\n        if (epoch + 1) % 15 == 0:\n            checkpoint.save(file_prefix = checkpoint_prefix)\n\n        print(f'Time for epoch {epoch + 1} is {time.time() - start} sec')\n\n    # Generate after the final epoch\n    display.clear_output(wait=True)\n    generate_and_save_images(generator,\n                           epochs,\n                           seed)","6f9a254e":"def generate_and_save_images(model, epoch, test_input):\n    predictions = model(test_input, training=False)\n\n    fig = plt.figure(figsize=(8, 8))\n\n    for i in range(predictions.shape[0]):\n        plt.subplot(4, 4, i + 1)\n        pred = predictions[i, :, :, :] \/ 2 + 0.5\n#         pred = predictions[i, :, :, :]\n#         pred = denormalize(predictions[i, :, :, :])\n        if gray:\n            plt.imshow(pred, cmap='gray')\n        else:\n            plt.imshow(pred)\n        plt.axis('off')\n\n    plt.savefig('image_at_epoch_{:04d}.png'.format(epoch))\n    plt.show()","a9ab7c57":"train(train_dataset, EPOCHS)","a2a8aa04":"# checkpoint.restore(tf.train.latest_checkpoint(checkpoint_dir))","50a19c8f":"def display_image(epoch_no):\n    return Image.open('image_at_epoch_{:04d}.png'.format(epoch_no))","fdcb0dd1":"display_image(EPOCHS)","5cdd355c":"anim_file = 'dcgan.gif'\n\nwith imageio.get_writer(anim_file, mode='I') as writer:\n    filenames = glob('image*.png')\n    filenames = sorted(filenames)\n    for filename in filenames:\n        image = imageio.imread(filename)\n        writer.append_data(image)\n    image = imageio.imread(filename)\n    writer.append_data(image)","2fb53dfd":"embed.embed_file(anim_file)","6a87fce7":"## The Discriminator","bba53c51":"## Train model","5b646d82":"## Define the loss and optimizers","50616a45":"## Create GIF","649612ce":"## Load data","4228fc8c":"## Define the training loop","4afd9f86":"## The Generator"}}