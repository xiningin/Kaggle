{"cell_type":{"cc0c8a9c":"code","72ca78e0":"code","954eb26a":"code","72b12e0b":"code","5209ee38":"code","64524d5d":"code","15b7f750":"code","1b2defc4":"code","758258bd":"code","f92b614c":"code","05bf4c12":"code","3ff65d24":"code","0e8a0ac0":"code","ca67d492":"code","ea42511f":"code","59998118":"code","a1917b34":"code","a658578c":"code","9d961620":"code","d60eb3dc":"code","1d131f8b":"code","f2c0adfe":"code","1a96c3fa":"code","8a19db89":"code","5c0cde30":"code","78f2b5f5":"code","f6ade566":"code","5170624f":"code","444c9417":"code","002da631":"code","60010f06":"code","215fdc29":"code","cfbab55e":"code","098d74ae":"code","d6b6c1e9":"code","dcd7fe77":"code","22340c67":"code","9dd822e0":"code","31538f84":"code","bf22361f":"code","5d06e4a4":"code","98a119eb":"code","ea39cc80":"code","8527b909":"code","12bccd7b":"code","e2760a15":"code","88f6b0d2":"code","3b380da6":"code","56966d6d":"code","4336a141":"code","5b617c77":"code","2823beb0":"code","a004dde8":"code","0c6fdf5c":"code","2d7e575b":"code","a4f7b7cf":"markdown","657bf332":"markdown","13caf3ad":"markdown","8b800140":"markdown","e64fa9bf":"markdown","28860583":"markdown","ed3fa71b":"markdown","76056231":"markdown","f59e00a0":"markdown","17d86510":"markdown","2829f40b":"markdown","0c4bc40d":"markdown","27c9b1b2":"markdown","068ac054":"markdown","9eee9864":"markdown","7d12f8f0":"markdown","495dedf7":"markdown","49d41076":"markdown","edc656dd":"markdown","69d61915":"markdown","dbf4497f":"markdown","d9d9158d":"markdown","d1751f34":"markdown","a43f057c":"markdown","aba06833":"markdown","88829269":"markdown","7fa44837":"markdown","8063aee7":"markdown","6d80a731":"markdown","361a0841":"markdown","0106842e":"markdown","8602b9c8":"markdown","50541993":"markdown","35daff6b":"markdown","026661b4":"markdown","a767c75b":"markdown","be1d0e8b":"markdown","aa1d3643":"markdown","6d04d26b":"markdown","50d1ea92":"markdown","f0baec14":"markdown","438e28c2":"markdown","2ae52f12":"markdown","7fabf56d":"markdown","60fb7ebb":"markdown","3f8fa420":"markdown","3cd709ac":"markdown","3f2b5920":"markdown","6f96d050":"markdown","0f6ab01b":"markdown","fb704594":"markdown","12df895b":"markdown","b16d6b17":"markdown","a8e9598e":"markdown","574cac96":"markdown","37e7b5bb":"markdown","ced42735":"markdown","daed264b":"markdown","1666a5c5":"markdown","0a5fba13":"markdown","1b1e170e":"markdown","15ea7203":"markdown"},"source":{"cc0c8a9c":"!pip install folium plotly","72ca78e0":"# imports\nimport plotly.express as px\nimport plotly.graph_objects as go\nimport plotly.figure_factory as ff\nfrom plotly.subplots import make_subplots\n\nimport folium\n\nimport pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\n%matplotlib inline\n\nimport math\nimport random\nfrom datetime import timedelta\n\nimport warnings\nwarnings.filterwarnings('ignore')\n\n# color pallette\ncnf = '#393e46'\ndth = '#ff2e63'\nrec = '#21bf73'\nact = '#fe9801'","954eb26a":"import plotly as py\npy.offline.init_notebook_mode(connected = True)","72b12e0b":"import os\ntry:\n    os.system(\"rm -rf Covid-19-Preprocessed-Dataset\")\nexcept:\n    print(\"File does not exist\")","5209ee38":"!git clone https:\/\/github.com\/laxmimerit\/Covid-19-Preprocessed-Dataset.git","64524d5d":"df = pd.read_csv(\"Covid-19-Preprocessed-Dataset\/preprocessed\/covid_19_data_cleaned.csv\", parse_dates=['Date'])\ncountry_daywise = pd.read_csv(\"Covid-19-Preprocessed-Dataset\/preprocessed\/country_daywise.csv\", parse_dates=['Date'])\ncountrywise = pd.read_csv(\"Covid-19-Preprocessed-Dataset\/preprocessed\/countrywise.csv\")\ndaywise = pd.read_csv(\"Covid-19-Preprocessed-Dataset\/preprocessed\/daywise.csv\", parse_dates=['Date'])","15b7f750":"df['Province\/State'] = df['Province\/State'].fillna(\"\")\ndf","1b2defc4":"country_daywise","758258bd":"countrywise","f92b614c":"daywise","05bf4c12":"confirmed = df.groupby('Date').sum()['Confirmed'].reset_index()\nrecovered = df.groupby('Date').sum()['Recovered'].reset_index()\ndeaths = df.groupby('Date').sum()['Deaths'].reset_index()","3ff65d24":"df.isnull().sum()","0e8a0ac0":"df.info()","ca67d492":"df.describe()","ea42511f":"df.query('Country == \"India\"')","59998118":"countrywise.query('Country == \"India\"')","a1917b34":"country_daywise.query('Country == \"India\"')","a658578c":"confirmed.tail()","9d961620":"recovered.tail()","d60eb3dc":"deaths.tail()","1d131f8b":"fig = go.Figure()\nfig.add_trace(go.Scatter(x = confirmed['Date'], y = confirmed['Confirmed'],\n                         mode = 'lines+markers', name = 'Confirmed', \n                         line = dict(color = \"Red\", width = 2)))\nfig.add_trace(go.Scatter(x = recovered['Date'], y = recovered['Recovered'],\n                         mode = 'lines+markers', name = 'Recovered', \n                         line = dict(color = \"Green\", width = 2)))\nfig.add_trace(go.Scatter(x = deaths['Date'], y = deaths['Deaths'],\n                         mode = 'lines+markers', name = 'Deaths', \n                         line = dict(color = \"Grey\", width = 2)))\nfig.update_layout(title = 'Worldwide Covid-19 Cases', xaxis_tickfont_size = 14, \n                 yaxis = dict(title = 'Number of Cases'))\nfig.show()","f2c0adfe":"df.info()","1a96c3fa":"df['Date'] = df['Date'].astype(str)","8a19db89":"df.info()","5c0cde30":"fig = px.density_mapbox(df, lat = 'Lat', lon = 'Long', \n                        hover_name = 'Country', hover_data = ['Confirmed','Recovered','Active','Deaths'],\n                        animation_frame = 'Date', color_continuous_scale = 'Portland', radius = 7,\n                        zoom = 0, height = 700)\nfig.update_layout(title = 'Worldwide Covid-19 Cases with Time Lapse')\nfig.update_layout(mapbox_style = 'open-street-map', mapbox_center_lon = 0)\nfig.show()","78f2b5f5":"temp = df.groupby('Date')['Confirmed','Recovered','Active','Deaths'].sum().reset_index()\ntemp = temp[temp['Date'] == max(temp['Date'])].reset_index(drop = True)\ntemp","f6ade566":"tm = temp.melt(id_vars = 'Date', value_vars = ['Confirmed','Active','Recovered','Deaths'])\nfig = px.treemap(tm, path = ['variable'], values = 'value', height = 250, width = 1000, \n                 color_discrete_sequence = [cnf,rec,act,dth])\nfig.data[0].textinfo = 'label+text+value'\nfig.show()","5170624f":"temp1 = df.groupby('Date')['Recovered','Deaths','Active'].sum().reset_index()\ntemp1 = temp1.melt(id_vars = 'Date', value_vars = ['Recovered','Deaths','Active'], \n                   var_name = 'Case', value_name = 'Count')\nfig = px.area(temp1, x = 'Date', y = 'Count', color = 'Case', height = 600, title = 'Cases over Time', \n              color_discrete_sequence = [rec,dth,act])\nfig.update_layout(xaxis_rangeslider_visible = True)\nfig.show()","444c9417":"temp = df[df['Date'] == max(df['Date'])]\ntemp","002da631":"m = folium.Map(location = [0,0], tiles = 'cartodbpositron', min_zoom = 1, max_zoom = 4, zoom_start = 1)\nfor i in range(0,len(temp)):\n    folium.Circle(location = [temp.iloc[i]['Lat'], temp.iloc[i]['Long']], color = 'crimson', fill = 'crimson',\n                  tooltip = '<li><bold> Country: ' + str(temp.iloc[i]['Country']) + \n                     '<li><bold> Province: ' + str(temp.iloc[i]['Province\/State']) + \n                     '<li><bold> Confirmed: ' + str(temp.iloc[i]['Confirmed']) + \n                     '<li><bold> Deaths: ' + str(temp.iloc[i]['Deaths']),\n                  radius = int(temp.iloc[i]['Confirmed'])**0.5).add_to(m)\nm","60010f06":"fig = px.choropleth(country_daywise, locations = 'Country', locationmode = 'country names',\n                    color = country_daywise['Confirmed'], hover_name = 'Country', hover_data = ['Confirmed'],\n                    animation_frame = country_daywise['Date'].dt.strftime('%Y-%m-%d'), title='Cases over time', \n                    color_continuous_scale = px.colors.sequential.Inferno)\nfig.update(layout_coloraxis_showscale = True)\nfig.show()","215fdc29":"daywise.head()","cfbab55e":"fig_c = px.bar(daywise, x = 'Date', y = 'Confirmed', color_discrete_sequence = [act])\nfig_d = px.bar(daywise, x = 'Date', y = 'Deaths', color_discrete_sequence = [dth])\nfig = make_subplots(rows = 1, cols = 2, shared_xaxes = False, horizontal_spacing = 0.1, \n                    subplot_titles = ('Confirmed Cases', 'Death Cases'))\nfig.add_trace(fig_c['data'][0], row = 1, col = 1)\nfig.add_trace(fig_d['data'][0], row = 1, col = 2)\nfig.update_layout(height = 480)\nfig.show()","098d74ae":"fig_c = px.choropleth(countrywise, locations = 'Country', locationmode = 'country names', \n                      color = np.log(countrywise['Confirmed']), hover_name = 'Country', \n                      hover_data = ['Confirmed'])\ntemp = countrywise[countrywise['Deaths']>0]\nfig_d = px.choropleth(temp, locations = 'Country', locationmode = 'country names', \n                      color = np.log(temp['Deaths']), hover_name = 'Country', \n                      hover_data = ['Deaths'])\nfig = make_subplots(rows = 1 ,cols = 2, subplot_titles = ('Confirmed Cases', 'Death Cases'),\n                    specs = [[{'type':'choropleth'}, {'type':'choropleth'}]])\nfig.add_trace(fig_c['data'][0], row = 1, col = 1)\nfig.add_trace(fig_d['data'][0], row = 1, col = 2)\nfig.update(layout_coloraxis_showscale = False)\nfig.show()","d6b6c1e9":"fig1 = px.line(daywise, x = 'Date', y = 'Deaths \/ 100 Cases', color_discrete_sequence = [dth])\nfig2 = px.line(daywise, x = 'Date', y = 'Recovered \/ 100 Cases', color_discrete_sequence = [rec])\nfig3 = px.line(daywise, x = 'Date', y = 'Deaths \/ 100 Recovered', color_discrete_sequence = ['blue'])\nfig = make_subplots(rows = 1, cols = 3, shared_xaxes = False,\n                    subplot_titles = ('Deaths \/ 100 Cases','Recovered \/ 100 Cases', 'Deaths \/ 100 Recovered'))\nfig.add_trace(fig1['data'][0], row = 1, col = 1)\nfig.add_trace(fig2['data'][0], row = 1, col = 2)\nfig.add_trace(fig3['data'][0], row = 1, col = 3)\nfig.update_layout(height = 480)\nfig.show()","dcd7fe77":"fig_c = px.bar(daywise, x = 'Date', y = 'Confirmed', color_discrete_sequence = [act])\nfig_d = px.bar(daywise, x = 'Date', y = 'No. of Countries', color_discrete_sequence = [dth])\nfig = make_subplots(rows = 1, cols = 2, shared_xaxes = False, horizontal_spacing = 0.1, \n                    subplot_titles = ('No. of New Cases per Day','No. of Countries'))\nfig.add_trace(fig_c['data'][0], row = 1, col = 1)\nfig.add_trace(fig_d['data'][0], row = 1, col = 2)\nfig.update_layout(height = 480)\nfig.show()","22340c67":"countrywise.columns","9dd822e0":"top = 15\nfig_c = px.bar(countrywise.sort_values('Confirmed').tail(top), x = 'Confirmed', y = 'Country', \n               text = 'Confirmed', orientation = 'h', color_discrete_sequence = [cnf])\nfig_d = px.bar(countrywise.sort_values('Deaths').tail(top), x = 'Deaths', y = 'Country', \n               text = 'Deaths', orientation = 'h', color_discrete_sequence = [dth])\n\nfig_a = px.bar(countrywise.sort_values('Active').tail(top), x = 'Active', y = 'Country', \n               text = 'Active', orientation = 'h', color_discrete_sequence = [act])\nfig_r = px.bar(countrywise.sort_values('Recovered').tail(top), x = 'Recovered', y = 'Country', \n               text = 'Recovered', orientation = 'h', color_discrete_sequence = [rec])\n\nfig_dc = px.bar(countrywise.sort_values('Deaths \/ 100 Cases').tail(top), x = 'Deaths \/ 100 Cases', y = 'Country', \n               text = 'Deaths \/ 100 Cases', orientation = 'h', color_discrete_sequence = ['#f84351'])\nfig_rc = px.bar(countrywise.sort_values('Recovered \/ 100 Cases').tail(top), x = 'Recovered \/ 100 Cases', y = 'Country', \n               text = 'Recovered \/ 100 Cases', orientation = 'h', color_discrete_sequence = ['#a45398'])\n\nfig_nc = px.bar(countrywise.sort_values('New Cases').tail(top), x = 'New Cases', y = 'Country', \n               text = 'New Cases', orientation = 'h', color_discrete_sequence = ['#f04341'])\ntemp = countrywise[countrywise['Population']>1000000]\nfig_p = px.bar(temp.sort_values('Cases \/ Million People').tail(top), x = 'Cases \/ Million People', y = 'Country', \n               text = 'Cases \/ Million People', orientation = 'h', color_discrete_sequence = ['#b40398'])\n\nfig_wc = px.bar(countrywise.sort_values('1 week change').tail(top), x = '1 week change', y = 'Country', \n               text = '1 week change', orientation = 'h', color_discrete_sequence = ['#c04041'])\ntemp = countrywise[countrywise['Confirmed']>100]\nfig_wi = px.bar(temp.sort_values('1 week % increase').tail(top), x = '1 week % increase', y = 'Country', \n               text = '1 week % increase', orientation = 'h', color_discrete_sequence = ['#f00398'])\n\nfig = make_subplots(rows = 5, cols = 2, shared_xaxes = False, horizontal_spacing = 0.14,\n                    vertical_spacing = 0.1, subplot_titles = ('Confirmed Cases','Deaths Reported',\n                                                              'Active Cases','Recovered Cases',\n                                                             'Deaths \/ 100 Cases','Recovered \/ 100 Cases',\n                                                              'New Cases','Cases \/ Million People',\n                                                             '1 Week Change','1 Week % Increase'))\nfig.add_trace(fig_c['data'][0], row = 1, col = 1)\nfig.add_trace(fig_d['data'][0], row = 1, col = 2)\n\nfig.add_trace(fig_a['data'][0], row = 2, col = 1)\nfig.add_trace(fig_r['data'][0], row = 2, col = 2)\n\nfig.add_trace(fig_dc['data'][0], row = 3, col = 1)\nfig.add_trace(fig_rc['data'][0], row = 3, col = 2)\n\nfig.add_trace(fig_nc['data'][0], row = 4, col = 1)\nfig.add_trace(fig_p['data'][0], row = 4, col = 2)\n\nfig.add_trace(fig_wc['data'][0], row = 5, col = 1)\nfig.add_trace(fig_wi['data'][0], row = 5, col = 2)\n\nfig.update_layout(height = 3000)\nfig.show()","31538f84":"top = 15\nfig = px.scatter(countrywise.sort_values('Deaths', ascending = False).head(top), x = 'Confirmed', y = 'Deaths', \n                 color = 'Country', size = 'Confirmed', height = 700, text = 'Country', log_x = True, log_y = True,\n                 title = 'Deaths vs Confirmed Cases')\nfig.update_traces(textposition = 'top center')\nfig.update_layout(showlegend = False)\nfig.update_layout(xaxis_rangeslider_visible = True)\nfig.show()","bf22361f":"fig = px.bar(country_daywise, x = 'Date', y = 'Confirmed', color = 'Country', height = 600,\n             title = 'Confirmed', color_discrete_sequence = px.colors.cyclical.mygbm)\nfig.show()","5d06e4a4":"fig = px.bar(country_daywise, x = 'Date', y = 'Deaths', color = 'Country', height = 600,\n             title = 'Deaths', color_discrete_sequence = px.colors.cyclical.mygbm)\nfig.show()","98a119eb":"fig = px.bar(country_daywise, x = 'Date', y = 'Recovered', color = 'Country', height = 600,\n             title = 'Recovered', color_discrete_sequence = px.colors.cyclical.mygbm)\nfig.show()","ea39cc80":"fig = px.bar(country_daywise, x = 'Date', y = 'New Cases', color = 'Country', height = 600,\n             title = 'New Cases', color_discrete_sequence = px.colors.cyclical.mygbm)\nfig.show()","8527b909":"fig = px.line(country_daywise, x ='Date', y = 'Confirmed', color = 'Country', height = 600, title = 'Confirmed',\n              color_discrete_sequence = px.colors.cyclical.mygbm)\nfig.show()","12bccd7b":"fig = px.line(country_daywise, x ='Date', y = 'Deaths', color = 'Country', height = 600, title = 'Deaths',\n              color_discrete_sequence = px.colors.cyclical.mygbm)\nfig.show()","e2760a15":"fig = px.line(country_daywise, x ='Date', y = 'Recovered', color = 'Country', height = 600, title = 'Recovered',\n              color_discrete_sequence = px.colors.cyclical.mygbm)\nfig.show()","88f6b0d2":"gt_100 = country_daywise[country_daywise['Confirmed']>100]['Country'].unique()\ntemp = df[df['Country'].isin(gt_100)]\ntemp = temp.groupby(['Country','Date'])['Confirmed'].sum().reset_index()\ntemp = temp[temp['Confirmed']>100]\n\nmin_date = temp.groupby('Country')['Date'].min().reset_index()\nmin_date.columns = ['Country','Min Date']\n\nfrom_100th_case = pd.merge(temp, min_date, on = 'Country')\nfrom_100th_case['N days'] = (pd.to_datetime(from_100th_case['Date']) - pd.to_datetime(from_100th_case['Min Date'])).dt.days\n\nfig = px.line(from_100th_case, x = 'N days', y = 'Confirmed', color = 'Country', title = 'N days from 100 case', height = 600)\nfig.show()","3b380da6":"gt_1000 = country_daywise[country_daywise['Confirmed']>1000]['Country'].unique()\ntemp = df[df['Country'].isin(gt_1000)]\ntemp = temp.groupby(['Country','Date'])['Confirmed'].sum().reset_index()\ntemp = temp[temp['Confirmed']>1000]\n\nmin_date = temp.groupby('Country')['Date'].min().reset_index()\nmin_date.columns = ['Country','Min Date']\n\nfrom_1000th_case = pd.merge(temp, min_date, on = 'Country')\nfrom_1000th_case['N days'] = (pd.to_datetime(from_1000th_case['Date']) - pd.to_datetime(from_1000th_case['Min Date'])).dt.days\n\nfig = px.line(from_1000th_case, x = 'N days', y = 'Confirmed', color = 'Country', title = 'N days from 1000 case', height = 600)\nfig.show()","56966d6d":"gt_10000 = country_daywise[country_daywise['Confirmed']>10000]['Country'].unique()\ntemp = df[df['Country'].isin(gt_10000)]\ntemp = temp.groupby(['Country','Date'])['Confirmed'].sum().reset_index()\ntemp = temp[temp['Confirmed']>10000]\n\nmin_date = temp.groupby('Country')['Date'].min().reset_index()\nmin_date.columns = ['Country','Min Date']\n\nfrom_10000th_case = pd.merge(temp, min_date, on = 'Country')\nfrom_10000th_case['N days'] = (pd.to_datetime(from_10000th_case['Date']) - pd.to_datetime(from_10000th_case['Min Date'])).dt.days\n\nfig = px.line(from_10000th_case, x = 'N days', y = 'Confirmed', color = 'Country', title = 'N days from 10000 case', height = 600)\nfig.show()","4336a141":"gt_100000 = country_daywise[country_daywise['Confirmed']>100000]['Country'].unique()\ntemp = df[df['Country'].isin(gt_100000)]\ntemp = temp.groupby(['Country','Date'])['Confirmed'].sum().reset_index()\ntemp = temp[temp['Confirmed']>100000]\n\nmin_date = temp.groupby('Country')['Date'].min().reset_index()\nmin_date.columns = ['Country','Min Date']\n\nfrom_100000th_case = pd.merge(temp, min_date, on = 'Country')\nfrom_100000th_case['N days'] = (pd.to_datetime(from_100000th_case['Date']) - pd.to_datetime(from_100000th_case['Min Date'])).dt.days\n\nfig = px.line(from_100000th_case, x = 'N days', y = 'Confirmed', color = 'Country', title = 'N days from 100000 case', height = 600)\nfig.show()","5b617c77":"gt_1000000 = country_daywise[country_daywise['Confirmed']>1000000]['Country'].unique()\ntemp = df[df['Country'].isin(gt_1000000)]\ntemp = temp.groupby(['Country','Date'])['Confirmed'].sum().reset_index()\ntemp = temp[temp['Confirmed']>1000000]\n\nmin_date = temp.groupby('Country')['Date'].min().reset_index()\nmin_date.columns = ['Country','Min Date']\n\nfrom_1000000th_case = pd.merge(temp, min_date, on = 'Country')\nfrom_1000000th_case['N days'] = (pd.to_datetime(from_1000000th_case['Date']) - pd.to_datetime(from_1000000th_case['Min Date'])).dt.days\n\nfig = px.line(from_1000000th_case, x = 'N days', y = 'Confirmed', color = 'Country', title = 'N days from 1000000 case', height = 600)\nfig.show()","2823beb0":"full_latest = df[df['Date'] == max(df['Date'])]\nfig = px.treemap(full_latest.sort_values(by = 'Confirmed', ascending = False).reset_index(drop = True),\n                 path = ['Country'], values = 'Confirmed', height = 700,\n                 title = 'Number of Confirmed Cases', color_discrete_sequence = px.colors.qualitative.Dark2)\nfig.data[0].textinfo = 'label+text+value'\nfig.show()","a004dde8":"full_latest = df[df['Date'] == max(df['Date'])]\nfig = px.treemap(full_latest.sort_values(by = 'Deaths', ascending = False).reset_index(drop = True),\n                 path = ['Country'], values = 'Deaths', height = 700,\n                 title = 'Number of Deaths Reported', color_discrete_sequence = px.colors.qualitative.Dark2)\nfig.data[0].textinfo = 'label+text+value'\nfig.show()","0c6fdf5c":"first_date = df[df['Confirmed']>0]\nfirst_date = first_date.groupby('Country')['Date'].agg(['min']).reset_index()\n\nlast_date = df.groupby(['Country','Date'])['Confirmed','Deaths','Recovered']\nlast_date = last_date.sum().diff().reset_index()\n\nmask = (last_date['Country'] != last_date['Country'].shift(1))\n\nlast_date.loc[mask,'Confirmed'] = np.nan\nlast_date.loc[mask,'Deaths'] = np.nan\nlast_date.loc[mask,'Recovered'] = np.nan\nlast_date = last_date[last_date['Confirmed']>0]\nlast_date = last_date.groupby('Country')['Date'].agg(['max']).reset_index()\n\nfirst_last = pd.concat([first_date, last_date['max']], axis = 1)\nfirst_last['Days'] = pd.to_datetime(first_last['max']) - pd.to_datetime(first_last['min'])\nfirst_last['Task'] = first_last['Country']\nfirst_last.columns = ['Country','Start','Finish','Days','Task']\nfirst_last = first_last.sort_values('Days')\n\ncolors = ['#' + ''.join([random.choice('0123456789ABCDEF') for j in range(6)]) for i in range(len(first_last))]\nfig = ff.create_gantt(first_last, index_col = 'Country', colors = colors, show_colorbar = False,\n                      bar_width = 0.2, showgrid_x = True, showgrid_y = True, height = 2500)\nfig.show()","2d7e575b":"temp = country_daywise.groupby(['Country','Date'])['Confirmed'].sum().reset_index()\ntemp = temp[temp['Country'].isin(gt_100000)]\ncountries = temp['Country'].unique()\n\nncols = 3\nnrows = math.ceil(len(countries)\/ncols)\n\nfig = make_subplots(rows = nrows, cols = ncols, shared_xaxes = False, subplot_titles = countries)\n\nfor ind, country in enumerate(countries):\n    row = int((ind\/ncols)+1)\n    col = int((ind%ncols)+1)\n    fig.add_trace(go.Bar(x = temp['Date'], y = temp.loc[temp['Country']==country,'Confirmed'], name = country), \n                  row = row, col = col)\nfig.update_layout(height = 4000, title_text = 'Confirmed Cases in Each Country')\nfig.update_layout(showlegend = False)\nfig.show()","a4f7b7cf":"**Summay of Data.**","657bf332":"**Countrywise New Confirmed Cases over Time.**","13caf3ad":"### Bar Plot","8b800140":"### Deaths Cases","e64fa9bf":"## Growth Rate after 10000 Cases","28860583":"**Summary of type of Data.**","ed3fa71b":"**Worldwide Covid-19 Cases with Time Lapse**","76056231":"**Latest Confirmed, Recovered, Active Cases and Deaths Reported.**","f59e00a0":"## Confirmed Cases with Choropleth Map","17d86510":"**Storing the Total Confirmed, Recovered, Deaths in variables to be used later.**","2829f40b":"## Cases Over the Time with Area Plot","0c4bc40d":"**Confirmed, Recovered, Active Cases and Deaths Reported on Area Plot over time.**","27c9b1b2":"## Growth Rate after 100 Cases","068ac054":"* **Confirmed Cases and Death Reported**\n* **Active and Recovered Cases**\n* **Deaths \/ 100 Cases and Recovered \/ 100 Cases**\n* **New Cases and Cases \/ Million People**\n* **1 Week Change and 1 Week % Increase**","9eee9864":"**Wolrdwide Cases on Folium Maps.**","7d12f8f0":"![](https:\/\/eyewire.news\/wp-content\/uploads\/sites\/2\/2020\/03\/banner.png)","495dedf7":"**Checking whether missing values are there or not.**","49d41076":"**Checking the latest 5 days data of Confirmed, Recovered, Deaths.**","edc656dd":"## Case Density Animation on World Map","69d61915":"### Line Plot","dbf4497f":"**Countrywise Confirmed Cases over Time.**","d9d9158d":"**Country Daywise Dataset contains:**\n* Date\n* Country\n* Confirmed Cases\n* Deaths Reported\n* Recovered Cases\n* Active Cases\n* New Confirmed Cases\n* New Deaths Reported\n* New Recovered Cases","d1751f34":"**Data of Country India.**","a43f057c":"## Confirmed, Deaths, New Cases vs Country and Date","aba06833":"**Countrywise Confirmed Cases over Time.**","88829269":"**Plotting the Worldwide Total Confirmed, Recovered, and Deaths**","7fa44837":"## Confirmed Cases Country and Day Wise","8063aee7":"## Scatter Plot for Deaths vs Confirmed Cases","6d80a731":"**Countrywise Deaths Reported over Time.**","361a0841":"## Dataset Preparation","0106842e":"**Last Reported Date Cases.**","8602b9c8":"## Tree Map Analysis","50541993":"## Confirmed and Death Cases with Static Colormap","35daff6b":"**Importing all the modules and packages.**","026661b4":"## Confirmed and Death Cases with Bar Plot","a767c75b":"## New Cases and No. of Countries","be1d0e8b":"## Worldwide Total Confirmed, Recovered, and Deaths","aa1d3643":"**Daywise Dataset contains:**\n* Date\n* Confirmed Cases\n* Deaths Reported\n* Recovered Cases\n* Active Cases\n* New Confirmed Cases\n* Deaths Reported per 100 Cases\n* Recovered Cases per 100 Cases\n* Deaths Reported per 100 Recovered Cases\n* Number of Countries","6d04d26b":"**Welcome to Covid-19 Exploratory Data Analysis.**","50d1ea92":"# Covid-19 Exploratory Data Analysis","f0baec14":"## Growth Rate after 1000 Cases","438e28c2":"**Countrywise Deaths Reported over Time.**","2ae52f12":"**Reading the datasets.**","7fabf56d":"**Plot of Confirmed Cases and Death Cases on Bar Plot.**","60fb7ebb":"**Countrywise Recovered Cases over Time.**","3f8fa420":"**Country, Province\/State, Confirmed Cases and Deaths Reported on Folium Maps.**","3cd709ac":"**Countrywise Recovered Cases over Time.**","3f2b5920":"**Confirmed, Recovered, Active Cases and Deaths Reported TreeMap.**","6f96d050":"## Folium Maps","0f6ab01b":"**Countrywise Dataset contains:**\n* Country\n* Confirmed Cases\n* Deaths Reported\n* Recovered Cases\n* Active Cases\n* New Confirmed Cases\n* Deaths Reported per 100 Cases\n* Recovered Cases per 100 Cases\n* Deaths Reported per 100 Recovered Cases\n* Population\n* Cases per Million People\n* 1 Week Change\n* 1 Week % Increase","fb704594":"## Growth Rate after 1M Cases","12df895b":"**Cases over time of Confirmed Cases with Choropleth Map.**","b16d6b17":"## Covid-19 Data Understanding","a8e9598e":"## Recovered and Deaths per 100 Cases","574cac96":"**We will require folium for the maps and plotly for interactive plots.**","37e7b5bb":"## First and Last Case Report Time","ced42735":"## Growth Rate after 100k Cases","daed264b":"## Top 15 Countries Case Analysis","1666a5c5":"**Full Dataset contains:**\n* Date\n* Province\/State\n* Country\n* Latitude\n* Longitude\n* Confirmed Cases\n* Recovered Cases\n* Deaths Reported\n* Active Cases","0a5fba13":"### Confirmed Cases","1b1e170e":"**Now we will clone the preprocessed data.\nData is in CSV format and updated daily. It is sourced from this upstream repository maintained by the amazing team at Johns Hopkins University Center for Systems Science and Engineering (CSSE) who have been doing a great public service from an early point by collating data from around the world.**","15ea7203":"**Converting the Date from datetime to object**"}}