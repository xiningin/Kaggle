{"cell_type":{"5173c2e8":"code","9a12356a":"code","50325f70":"code","23d0df5c":"code","2014fe7f":"code","e34b3005":"code","b7afdea0":"code","1a398703":"code","8c71c07d":"code","ef4a49eb":"code","33a7ce84":"code","8b502543":"code","4c99e059":"code","04e71da7":"code","292e62ef":"code","45795021":"code","c22f1fb7":"code","701c83d3":"code","13b2c1e2":"code","50dc811d":"markdown","ea55e9e1":"markdown","662441aa":"markdown","b9d08089":"markdown"},"source":{"5173c2e8":"import pandas as pd\nloding = pd.read_csv('..\/input\/loding.csv')\nloding.head()\ncombine = [loding]","9a12356a":"# 0 too low loding, 1 nice, 2 too much\nfor dataset in combine:\n    dataset.loc[dataset['withoutSalt']<150,'withoutSalt']=0\n#     dataset.loc[(dataset['withoutSalt']<=200) & (dataset['withoutSalt']>100),'withoutSalt']=1\n    dataset.loc[dataset['withoutSalt']>150,'withoutSalt']=1\nloding.loc[loding['withoutSalt']==1].count()\n# loding.head()","50325f70":"loding[['Gender', 'withoutSalt']].groupby(['Gender'], as_index=False).mean()","23d0df5c":"# pd.crosstab(loding['Education_Level'],loding['withoutSalt'])\nloding[['Education_Level', 'withoutSalt']].groupby(['Education_Level'], as_index=False).mean()\n# loding[['Education_Level', 'withoutSalt']].groupby(['withoutSalt'], as_index=False).mean()","2014fe7f":"loding['AgeBand'] = pd.cut(loding['Age'], 4)\n# loding[['AgeBand', 'withoutSalt']].groupby(['AgeBand'], as_index=False).count()\n# pd.crosstab(loding['AgeBand'],loding['withoutSalt'])\nloding[['AgeBand', 'withoutSalt']].groupby(['AgeBand'], as_index=False).mean()\n","e34b3005":"for dataset in combine:    \n    dataset.loc[ dataset['Age'] <= 31, 'Age'] = 0\n    dataset.loc[(dataset['Age'] > 31) & (dataset['Age'] <= 43), 'Age'] = 1\n    dataset.loc[(dataset['Age'] > 43) & (dataset['Age'] <= 55), 'Age'] = 2\n#     dataset.loc[(dataset['Age'] > 55) & (dataset['Age'] <= 67), 'Age'] = 3\n    dataset.loc[ dataset['Age'] > 55, 'Age'] = 3","b7afdea0":"# pd.crosstab(loding['Occupation'],loding['withoutSalt'])\nloding[['Occupation', 'withoutSalt']].groupby(['Occupation'], as_index=False).mean()","1a398703":"loding[['City', 'withoutSalt']].groupby(['City'], as_index=False).mean()","8c71c07d":"loding[['Nutrition', 'withoutSalt']].groupby(['Nutrition'], as_index=False).mean()","ef4a49eb":"loding[['Smoking', 'withoutSalt']].groupby(['Smoking'], as_index=False).mean()","33a7ce84":"loding[['lodized', 'withoutSalt']].groupby(['lodized'], as_index=False).mean()","8b502543":"loding[['awarenness', 'withoutSalt']].groupby(['awarenness'], as_index=False).mean()","4c99e059":"loding['knowledgeBand'] = pd.cut(loding['knowledge'], 4)\n# loding[['AgeBand', 'withoutSalt']].groupby(['AgeBand'], as_index=False).count()\n# pd.crosstab(loding['AgeBand'],loding['withoutSalt'])\nloding[['knowledgeBand', 'withoutSalt']].groupby(['knowledgeBand'], as_index=False).mean()","04e71da7":"for dataset in combine:    \n    dataset.loc[ dataset['knowledge'] <= 6.5, 'knowledge'] = 0\n    dataset.loc[(dataset['knowledge'] > 6.5) & (dataset['knowledge'] <= 12), 'knowledge'] = 1\n    dataset.loc[(dataset['knowledge'] > 12) & (dataset['knowledge'] <= 17.5), 'knowledge'] = 2\n#     dataset.loc[(dataset['Age'] > 55) & (dataset['Age'] <= 67), 'Age'] = 3\n    dataset.loc[ dataset['knowledge'] > 17.5, 'knowledge'] = 3","292e62ef":"feature_cols = ['Gender','Education_Level','Age','Smoking','lodized','awarenness','knowledge']\nvalid_fraction = 0.15\nvalid_rows = int(len(loding)*valid_fraction)\nloding = loding.sort_values('Id')\ntrain = loding[:-valid_rows*2]\nvalid = loding[-valid_rows*2:-valid_rows]\ntest = loding[-valid_rows:]","45795021":"import lightgbm as lgb\n# train_data = lgb.Dataset(train[feature_cols],train['withoutSalt'])\n# val_data = lgb.Dataset(valid[feature_cols],valid['withoutSalt'])\n# dtest = lgb.Dataset(test[feature_cols],label=test['withoutSalt'])\ndtrain = lgb.Dataset(train[feature_cols], label=train['withoutSalt'])\ndvalid = lgb.Dataset(valid[feature_cols], label=valid['withoutSalt'])\ndtest = lgb.Dataset(test[feature_cols], label=test['withoutSalt'])\nprint(dtrain)\nparam = {'num_leaves':64,'objective':'binary'}\nparam['metric'] = 'auc'\nnum_round = 1000\nbst = lgb.train(param, dtrain, num_round,valid_sets = [dvalid],early_stopping_rounds=10)\n\n","c22f1fb7":"from sklearn import metrics\n\nypred = bst.predict(test[feature_cols])\nscore = metrics.roc_auc_score(test['withoutSalt'], ypred)\nprint(f\"Test score: {score}\")","701c83d3":"feature_cols = ['Gender','Education_Level','Age','Smoking','lodized','awarenness','knowledge']\nvalid_fraction = 0.20\nvalid_rows = int(len(loding)*valid_fraction)\nloding = loding.sort_values('Id')\ntrain = loding[:-valid_rows]\ntest = loding[-valid_rows:]","13b2c1e2":"from sklearn.tree import DecisionTreeClassifier\ndecision_tree = DecisionTreeClassifier()\ndecision_tree.fit(train[feature_cols], train['withoutSalt'])\npred = decision_tree.predict(test[feature_cols])\nacc_decision_tree = round(decision_tree.score(train[feature_cols], train['withoutSalt']) * 100, 2)\nprint(acc_decision_tree)\nans = test['withoutSalt'].as_matrix()\nsumNum = len(pred)\ncorrect_num = 0\nfor i in range(0,sumNum):\n    if(pred[i]==ans[i]):\n        correct_num = correct_num+1\nprint('test_auc='+str(correct_num\/sumNum)) ","50dc811d":"0. Elementary school and below  \n1.  Junior high school \n2.  High school  \n3.  University or junior college  \n4.  Graduate and above","ea55e9e1":"I guess this has no significent impact??","662441aa":"The people over 55 are likely to eat more salt.","b9d08089":"female are more like eat more than 150 salt.\n0. Male   \n1. Female"}}