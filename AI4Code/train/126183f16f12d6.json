{"cell_type":{"91b92406":"code","c4ea7f0a":"code","296b30ed":"code","2b367d3a":"code","a2f8e704":"code","9846e8cd":"code","d1fa6d46":"code","d5f0e728":"code","8c62e51e":"code","78791ae4":"code","138eb121":"code","b5d1b997":"code","cea70767":"code","c6b1ac6b":"code","e01a8f9e":"code","4b72e7d4":"code","8fd0dfe0":"code","fd1b5443":"code","6779cdba":"code","64e58b70":"code","604640d9":"code","a2f264bf":"code","ef552045":"markdown","6dce2315":"markdown","94711ac5":"markdown","8b9264d8":"markdown","27d2f79a":"markdown","0fda37c5":"markdown","f502c2b5":"markdown","7586d4d8":"markdown","4a9bd9e0":"markdown"},"source":{"91b92406":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\nfrom scipy.optimize import curve_fit\nimport math\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","c4ea7f0a":"df = pd.read_csv('\/kaggle\/input\/covid19-coronavirus-romania\/covid-19RO.csv')\ndf.dataframeName = 'covid-19RO.csv'\nnRow, nCol = df.shape\nprint(f'There are {nRow} rows and {nCol} columns')","296b30ed":"df.tail()","2b367d3a":"df.info()","a2f8e704":"plt.plot(df.cases)","9846e8cd":"plt.plot(df.cases.diff())","d1fa6d46":"def logistic(x, L, k, x0):\n    return L \/ (1 + np.exp(-k * (x - x0))) + 1","d5f0e728":"p0 = [80000, 0.2, 90]\n\npopt, pcov = curve_fit(logistic, df.index, df.cases, p0, method = \"trf\")\nprint(\"Last day number of cases: \" + str(int(df.cases[-1:])))\nprint(\"Number of cases aproximated for the next day: \" + str(int(int(df.cases[-1:] + logistic(len(df) , *popt) - logistic(len(df)-1 , *popt)))))\n\nplt.title(\"Number of cases (blue) and prediction (red) for \" + str(len(df)) + \" days\")\nplt.plot(df.index, df.cases, 'b-', label='data')\nplt.plot(range(len(df) + 1), logistic(range(len(df) + 1), *popt), 'r-', label='fit')","8c62e51e":"print(\"Predicted L (the maximum number of confirmed cases): \" + str(int(popt[0])))\nprint(\"Predicted k (growth rate): \" + str(float(popt[1])))\nprint(\"Predicted x0 (the day of the inflexion): \" + str(int(popt[2])) + \"\")","78791ae4":"plt.title(\"Number of cases (blue) and prediction (red) for \" + str(int(popt[-1]*2)) + \" days\")\nplt.plot(df.index, df.cases, 'b-', label='data')\nplt.plot(range(int(popt[-1]*2)), logistic(range(int(popt[-1]*2)), *popt), 'r-', label='fit')","138eb121":"plt.title(\"Log scale of cases (blue) and prediction (red) for \" + str(len(df.cases)+10) + \" days\")\nplt.plot(np.log(df.cases[10:]), 'b-')\nplt.plot(np.log(logistic(range(len(df.cases)+10), *popt)), 'r-')","b5d1b997":"def logisticFixedx0(x, L, k):\n    x0 = 67\n    return L \/ (1 + np.exp(-k * (x - x0))) + 1","cea70767":"p0 = [80000, 0.2]\n\npopt, pcov = curve_fit(logisticFixedx0, df.index, df.cases, p0, method = \"trf\")\nprint(\"Last day number of cases: \" + str(int(df.cases[-1:])))\nprint(\"Number of cases aproximated for the next day: \" + str(int(int(df.cases[-1:] + logisticFixedx0(len(df) , *popt) - logisticFixedx0(len(df)-1 , *popt)))))\n\nplt.title(\"Number of cases (blue) and prediction (red) for \" + str(len(df)) + \" days, with inflexion in day 67\")\nplt.plot(df.index, df.cases, 'b-', label='data')\nplt.plot(range(len(df) + 1), [logisticFixedx0(x , *popt) for x in range(len(df)+1)], 'r-', label='fit')","c6b1ac6b":"print(\"Predicted L (the maximum number of confirmed cases): \" + str(int(popt[0])))\nprint(\"Predicted k (growth rate): \" + str(float(popt[1])))","e01a8f9e":"plt.plot(df.cases.diff())","4b72e7d4":"def gaussian(x, a, b, c):\n    return a * np.exp(-(1\/2.)* np.power(((x - b)*1.) \/ c, 2))","8fd0dfe0":"plt.plot([gaussian(i, 380, 55, 20) for i in range(180)], 'r-', label='fit')\nplt.plot(df.index, df.cases.diff(), 'b-', label='data')","fd1b5443":"plt.title(\"Number of tests per day\")\nplt.plot(df.tests)","6779cdba":"plt.title(\"Number of new tests and confirmed cases per day\")\nplt.plot(df.tests.diff())\nplt.plot(df.cases.diff()*10)","64e58b70":"from sklearn.linear_model import LinearRegression\n\n\na = np.array(df.cases.diff()[2:])\nb = np.array(df.tests.diff()[:-2])\n\nX = np.array(range(len(a))).reshape((len(a), 1))\ny = np.nan_to_num(a\/b)\n\nreg = LinearRegression().fit(X, y)\n\nyhat = reg.predict(X)\n\nplt.title(\"Percent of confirmed cases out of performed tests per day, with 2 days delayed result\")\nplt.scatter(range(len(a)), a\/b)\nplt.plot(range(len(a)), yhat, color='blue', linewidth=3)","604640d9":"X = df.index\na = np.array(df.cases.diff())\ny = df.cases * (1 + np.array(reg.predict(np.array(range(len(a))).reshape((len(a), 1)))))\n\np0 = [80000, 0.2, 80]\n\npopt, pcov = curve_fit(logistic, X, y, p0, method = \"lm\")\nprint(\"Last day number of cases: \" + str(int(y[-1:]\/(1 + reg.predict([[len(X)-1]])[0]))))\nprint(\"Number of cases aproximated for the next day: \" + str(int(int(\n                                                                     int(\n                                                                         y[-1:]\/(1 + reg.predict([[len(X)-1]])[0]))\n                                                                     + \n                                                                     int(\n                                                                         logistic(len(X) , *popt)\/(1 + reg.predict([[len(X)]])[0]))\n                                                                     - int(\n                                                                         logistic(len(X)-1 , *popt)\/(1 + reg.predict([[len(X)]])[0]))\n                                                                 ))))\n\nplt.title(\"Number of cases (blue) and prediction (red) for \" + str(len(X)) + \" days\")\nplt.plot(X, y, 'b-', label='data')\nplt.plot(range(len(X) + 1), logistic(range(len(X) + 1), *popt), 'r-', label='fit')","a2f264bf":"print(\"Predicted L (the maximum number of confirmed cases): \" + str(int(popt[0])))\nprint(\"Predicted k (growth rate): \" + str(float(popt[1])))\nprint(\"Predicted x0 (the day of the inflexion): \" + str(int(popt[2])) + \"\")","ef552045":"# Weighting the number of cases with the percent of confirmed cases","6dce2315":"An example of Gaussian function and the number of new cases per day.","94711ac5":"# Fitting the number of new cases per day to a Gaussian function","8b9264d8":"### Defining the logistic function","27d2f79a":"# Fitting a logistic function with fixed inflexion\n\nWe used some initialisation for the parameters as follows:\n* L (the maximum number of confirmed cases) = 80000 taken from the China example\n* k (growth rate) = 0.2 an approximated value from most of the countries","0fda37c5":"## Data preparation\n\nAdding the needed packages, reading the data and creating some basic analysis.","f502c2b5":"# Fitting the logistic function on the data\n\nWe used some initialisation for the parameters as follows:\n* L (the maximum number of confirmed cases) = 80000 taken from the China example\n* k (growth rate) = 0.2 an approximated value from most of the countries\n* x0 (the day of the inflexion) = 50 approximated form the Italy example","7586d4d8":"## Introduction\n\nLet's try to fit a logistic curve over the cases of COVID-19 from Romania. Inspiration: https:\/\/www.youtube.com\/watch?v=Kas0tIxDvrg","4a9bd9e0":"# Number of tests analysis"}}