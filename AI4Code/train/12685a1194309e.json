{"cell_type":{"ceb1d6c1":"code","aee1cb34":"code","a3f95afb":"code","62f72040":"code","e5dc925d":"code","2a77fdc8":"code","b95f7fec":"code","798ea001":"code","6f313c0d":"code","0a137c10":"code","6c58c35f":"code","c0ddb782":"code","c6b85c9d":"code","5202ba18":"code","5217b33c":"code","503dfa60":"code","773002fb":"code","09258c52":"code","75851a6c":"code","1b2917ae":"code","8934386a":"code","aa7e91b4":"code","ab49ad2f":"code","9615239b":"code","e75ba0cc":"code","e82b2ff1":"code","1cdb7991":"code","26c2d53e":"code","377a7217":"code","04a68d03":"code","9e3e94ca":"code","7a354c2a":"code","7af45ab4":"code","71f2f623":"code","9214d8da":"code","10da7a9c":"code","0796822c":"code","8d116375":"code","0a0e1163":"code","badb09e2":"code","9bd9da2d":"code","395950aa":"code","d662e3a5":"code","4fb76848":"code","6158c133":"code","05d54d2f":"code","2fa15948":"code","15479b80":"code","997e49c8":"code","e24122a0":"markdown","9751593a":"markdown","4055a329":"markdown","2db06ca1":"markdown"},"source":{"ceb1d6c1":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","aee1cb34":"import tensorflow as tf\nfrom tensorflow import keras","a3f95afb":"# import the necessary packages\nimport json, sys, random, os\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport PIL\nimport seaborn as sns","62f72040":"from tensorflow.keras.models import Sequential\nfrom tensorflow.keras.layers import Dense, Flatten, Activation\nfrom tensorflow.keras.layers import Dropout\nfrom tensorflow.keras.layers import Conv2D, MaxPooling2D\nfrom tensorflow.keras.optimizers import SGD\nfrom tensorflow.keras.callbacks import ReduceLROnPlateau, EarlyStopping, ModelCheckpoint, LearningRateScheduler\nfrom tensorflow.keras.preprocessing.image import ImageDataGenerator\nfrom tensorflow.keras import backend as K\nfrom tensorflow.keras.models import Model, load_model\nfrom tensorflow.keras.initializers import glorot_uniform\nfrom tensorflow.keras.utils import plot_model\nfrom PIL import Image, ImageDraw \nfrom sklearn.model_selection import train_test_split\nfrom sklearn.utils import shuffle","e5dc925d":"train = []\nlabel = []\n\n# os.listdir returns the list of files in the folder, in this case image class names\nfor i in os.listdir('.\/..\/input\/satellite-imagery-of-ships'):\n  train_class = os.listdir(os.path.join('..\/input\/satellite-imagery-of-ships',i))\n  for j in train_class:\n    img = os.path.join('Data',i,j)\n    train.append(img)\n    label.append(i)\n\nprint('Number of train images : {} \\n'.format(len(train)))\n","2a77fdc8":"# Visualize the images in the dataset\n\nfig, axs = plt.subplots(2, 5, figsize=(20, 10))\ncount = 0\nfor i in os.listdir('.\/..\/input\/satellite-imagery-of-ships'):\n  # get the list of images in the particualr class\n  train_class = os.listdir(os.path.join('..\/input\/satellite-imagery-of-ships',i))\n  # plot 5 images per class\n  for j in range(5):\n    img = os.path.join('..\/input\/satellite-imagery-of-ships',i,train_class[j])\n    \n    img = PIL.Image.open(img)\n    axs[count][j].title.set_text(i)\n    axs[count][j].imshow(img)  \n  count += 1\n\nfig.tight_layout()","b95f7fec":"no_ships=list()\nclass_name=list()\nfor i in os.listdir('.\/..\/input\/satellite-imagery-of-ships'):\n    train_class = os.listdir(os.path.join('..\/input\/satellite-imagery-of-ships',i))\n    no_ships.append(len(train_class))\n    class_name.append(i)\n    print(f\"Number of images in {i}={len(train_class)}\")","798ea001":"plt.figure(figsize=(15,10))\ncolors = ['#ff9999','#66b3ff']\nplt.pie(no_ships, labels = class_name, autopct = '%1.1f%%',colors=colors)\nplt.show","6f313c0d":"df1=pd.DataFrame(train,columns=[\"Images\"])\ndf1\n","0a137c10":"df2=pd.DataFrame(label,columns=[\"Labels\"])\ndf2","6c58c35f":"df=pd.concat([df1,df2],axis=1)\ndf","c0ddb782":"from sklearn.preprocessing import LabelEncoder","c6b85c9d":"le=LabelEncoder()\ndf[\"Labels\"]=le.fit_transform(df[\"Labels\"])\ndf","5202ba18":"df = shuffle(df)\n\ntrain, test = train_test_split(df, test_size = 0.2)","5217b33c":"train.info()","503dfa60":"test.info()","773002fb":"train_datagen = ImageDataGenerator(\n        rescale=1.\/255,\n        shear_range=0.2,\n\n        horizontal_flip=True)\ntraining_set = train_datagen.flow_from_directory(\n        '..\/input\/satellite-imagery-of-ships',\n        target_size=(256, 256),\n        batch_size=32,color_mode=\"rgb\",\n        class_mode='categorical')","09258c52":"training_set[0]","75851a6c":"model= Sequential()","1b2917ae":"model.add(Conv2D(filters=96, input_shape=(256,256,3),kernel_size=(11,11),strides=(4,4), activation=\"relu\"))","8934386a":"model.add(MaxPooling2D(pool_size=(2,2),strides=(2,2)))","aa7e91b4":"#Adding 2. Convolutional Layer","ab49ad2f":"model.add(Conv2D(filters=256,kernel_size=(3,3), strides=(2,2),activation=\"relu\"))","9615239b":"model.add(MaxPooling2D(pool_size=(2,2),strides=(2,2)))","e75ba0cc":"model.add(Conv2D(filters=256,kernel_size=(3,3), strides=(2,2),activation=\"relu\"))","e82b2ff1":"model.add(MaxPooling2D(pool_size=(2,2),strides=(2,2)))","1cdb7991":"model.add(Flatten())","26c2d53e":"# 1st Fully Connected Layer\nmodel.add(Dense(units=4000, activation=\"relu\"))\n# Add Dropout to prevent overfitting\nmodel.add(Dropout(0.3))","377a7217":"# 2nd Fully Connected Layer\nmodel.add(Dense(units=2000, activation=\"relu\"))\nmodel.add(Dropout(0.2))","04a68d03":"# 3rd Fully Connected Layer\nmodel.add(Dense(units=1000, activation=\"relu\"))","9e3e94ca":"# 4th Fully Connected Layer\nmodel.add(Dense(units=500,activation=\"relu\"))","7a354c2a":"# Add Final Dropout\nmodel.add(Dropout(0.4))","7af45ab4":"# Output Layer\nmodel.add(Dense(units=2, activation=\"softmax\"))","71f2f623":"model.summary() #Here we get a summary of our neural network","9214d8da":"model.compile(optimizer=\"adam\", loss=\"categorical_crossentropy\",metrics=[\"accuracy\"])","10da7a9c":"# using early stopping to exit training if validation loss is not decreasing even after certain epochs (patience)\nearly_stopping=EarlyStopping(monitor=\"val_loss\",mode=\"min\",verbose=1,patience=15)","0796822c":"# save the best model with lower validation loss\ncheck_pointer = ModelCheckpoint(filepath=\"weights.hdf5\", verbose=1, save_best_only=True)","8d116375":"model.fit(x=training_set, epochs = 15, callbacks=[early_stopping])","0a0e1163":"pd.DataFrame(model.history.history)\n","badb09e2":"from tensorflow.keras.preprocessing import image","9bd9da2d":"def predictor(location):\n    test_image=image.load_img(location,target_size=(256,256))\n    test_image=np.asarray(test_image, dtype= np.float32)\n    test_image=test_image\/255\n    test_image= test_image.reshape(-1,256,256,3)\n    result=model.predict(test_image)\n    training_set.class_indices\n    if result[0][0] == 1:\n        \n        prediction = \"There is ship in the image\"\n    else:\n        prediction = \"There is NO ship in the image\"\n    print(result[0][0])\n    return prediction\n\n","395950aa":"plt.imshow(plt.imread(\"..\/input\/image1\/imgae1.jpg\"))\n#There is ship in the image below","d662e3a5":"predictor(\"..\/input\/image1\/imgae1.jpg\")\n# Our model can truely detect the ship as in the picture above","4fb76848":"plt.imshow(plt.imread(\"..\/input\/image7\/image7.png\"))\n#There is no ship in this image","6158c133":"predictor(\"..\/input\/image7\/image7.png\")\n#And Our model predict correctly","05d54d2f":"plt.imshow(plt.imread(\"..\/input\/image2\/image2.jpg\"))\n#There is ship in the image below","2fa15948":"predictor(\"..\/input\/image2\/image2.jpg\")\n#And Our model predict correctly again","15479b80":"plt.imshow(plt.imread(\"..\/input\/image6\/image6.jpg\"))\n#There is no ship in this image","997e49c8":"predictor(\"..\/input\/image6\/image6.jpg\")\n#And Our model predict correctly","e24122a0":"Creating Fully Connected Layers","9751593a":"# Passing it to a Fully Connected layer","4055a329":"#Adding 1. Convolutional Layer","2db06ca1":"#Adding 3. Convolutional Layer"}}