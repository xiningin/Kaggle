{"cell_type":{"79b58ccf":"code","d04d30f1":"code","f003bc33":"code","764a9a61":"code","e07a6aed":"code","5c3cfc5b":"code","73cd6c92":"code","a713b6e8":"code","196cce6d":"code","37ee8b6a":"markdown","80274b5e":"markdown","a2047a30":"markdown","2b462f0a":"markdown","f395270a":"markdown","fe470170":"markdown","2e887796":"markdown","26e98f38":"markdown"},"source":{"79b58ccf":"!!mkdir -p ~\/.kaggle\n!cp kaggle.json ~\/.kaggle\n!chmod 600 ~\/.kaggle\/kaggle.json\n!kaggle competitions download -c tabular-playground-series-oct-2021","d04d30f1":"!pip install pycaret[full]\n\nimport pandas as pd\nimport numpy as np\nimport gc\nfrom lightgbm import LGBMClassifier\nfrom pycaret.classification import *","f003bc33":"train = pd.read_csv('\/content\/train.csv.zip')\ntest = pd.read_csv('\/content\/test.csv.zip')","764a9a61":"train.drop(columns = 'id', inplace = True)\ntest.drop(columns = 'id', inplace = True)","e07a6aed":"def pycaret_model(train, target, test, fold):\n    \n    print('Setup Your Data....')\n    setup(data=train,\n        target=target,\n        silent= True,\n        use_gpu=True,\n        normalize = True,\n        normalize_method = 'robust',\n        session_id = 42)\n    \n    print('Creating Models....')\n    \n    model_list = []\n    lgbm = create_model(estimator = 'lightgbm', fold = fold)\n    xgb = create_model(estimator = 'xgboost', fold = fold)\n    cat = create_model(estimator = 'catboost', fold = fold)\n    \n    model_list.append(lgbm)\n    model_list.append(xgb)\n    model_list.append(cat)\n    \n    print('Blending Models....')\n    blended = blend_models(estimator_list= model_list, fold=fold)\n    pred_holdout = predict_model(blended)\n\n    print('Finallizing Models....')\n    final_model = finalize_model(blended)\n\n    print('Done...!!!')\n\n    prep_pipe = get_config('prep_pipe')\n    prep_pipe.steps.append(['trained_model', final_model])\n    pred = prep_pipe.predict_proba(test)\n\n    return pred","5c3cfc5b":"result = pycaret_model(train, 'target', test, 5)\nresult","73cd6c92":"sub = pd.read_csv('\/content\/sample_submission.csv.zip')\nsub['target'] = result[:, 1]\nsub","a713b6e8":"sub.to_csv('sub.csv', index = 0)","196cce6d":"sub = pd.read_csv('..\/input\/tps-oct-pycaret-submission\/sub (21).csv')\nsub.to_csv('sub.csv', index = 0)","37ee8b6a":"<h4> PyCaret is an open source, low-code machine learning library in Python that allows you to go from preparing your data to deploying your model within minutes in your choice of notebook environment.<\/h4>\n\n### [Click Here](https:\/\/pycaret.org\/) to visit pycaret.org","80274b5e":"# **Load Data**","a2047a30":"# **Install Pycaret, Import Library**","2b462f0a":"![](data:image\/png;base64,iVBORw0KGgoAAAANSUhEUgAAAUAAAACeCAMAAAB0DSNzAAABzlBMVEX\/\/\/8FBwhDNHsAAAAnquEABAXFxcZPUFGpqqqAgIA3L3D19fVBM3kbqOCWl5dcrd\/k5OSk2fHN6vhkwek\/QEA7MXTy8vIzLG03ODja2tomHWeLi4vr6+vR0dG03\/QvKGu7u7uioqJ9fX2Fy+3Gw9SPj48iGGYqImlUR4c8LHddUYu0tLTf39\/Y1+I2I3TKysrg3+h2cpp0a5ysp8JtbW1Mt+UfFGVgW4t2vudubm4bHR6zscZPSYDp6O9AOXddXV3r9\/yZlrOJhaeARofXUJGZs8YYGRpVVVXb8PpZVIdKRH1zY3MxKnqknryzV5FrQINBYqRNPoJFkc95d5e\/R4r52lXHqU9bvecoKiqxrsRgUXZoWHW9p2XszFXpylfZdo+SRYhJdK2EZ1xPP2ilkWrXlLX\/7J3689zTu2Dlu0p1W1\/Bq2TujInsk4HiaJ2ynWhNl87CXJSibJ68pcCMe2\/wwNWnR4r21uSiflRaLXG2jEmhUY3kirIvHHhYhqx9ucPj165\/Ypo2TIlVocqZwNpHN2vf2W6VxLY\/crDFibjYQ4vUbJ2lbrB4M4D97rzH0IHHnI+kd3Lcq2OYg2OdWoRti8NrtMu4zI+2k7e2qoj6IWiXAAAWfElEQVR4nO1diX\/bxpUeExYEEBQEySJoEIAIQDwMg4co0rJpiRJFK5YlU7blWrGVNKmVtM3VqlLSdeI4Sbdy23U322S33u12\/9t9g4sXAEJtlMgtvsQUSM7DzHzzrnnAj0AoQoQIESJEiBAhQoQIESJEiBAhQoQIESJEiBAhQoQIESJEiBDhjKE17QWEuse3giTNI04mvcHYTTl1dWY8Jw+egfGWqhSlgG8lVPHprecMp0KVNwtXzntgYg5NTbjvZr1FL0ycn2uholF\/dP0c4YlVm0DypvU+N3AG0VuMuHn9YkMpInnc47vrkuIj1YPBjk4RcxOeBE5MAYMTzhtPBucm5m4x1LjFzZgHiBnJakkRxDkMgtD6zqB6y4GkyeIGyZDXicFvKsLgZ8PidcZjvKeDKU\/+MGtTXW4nzntY8RQopvKIsLnxAEEIVkvSbUMQas8Z5HO+slZjYkPiLva3gRNcDJTCbR7x3wt3GNPnfQkEtbvgMnilNSw5zdT92cPzYK2WzEy3FUEU3TP0fu6NMeJ6Ubre24pYRY2R\/BFDvvbUcMuXv0EGH7YGJK+0QDnGgubRsJv2zZiYca1rdRQTFhlyzyqBNBXY6TnMuoq+Nzyc8AdwO9264jJ4oU+w9XC617jGPPz4jG1HAzN2p8cGBQFXhLiItJ7PMZ0ezfr6b6DvDbMPL\/jiCubwVg+DU72SF+aYcZc\/7PDHh2DbETfg6BwDkzaGRVxc72odYRS7n1Oo0dfupsXgWG\/39e\/PAQZjFii8cqt13g3FPQxOXQEFcqc41lD8o55rqI62EBdDzNBw\/SN4PX\/Yi9jjF84SWpjB1nSXwWnnm9mJWWmMcKxnvBhwErUbgN0jMUzvDvHETcm\/0dkmEHjC4XfWZfC8zeD0+Sst0eUvMGetOLQRF+VHziFBhuhccpsL\/o3OOIG3Jszg0WXwipkOgmbO8U4EIepBZ2Au9pBmOD6feBSgVC7G\/zEI7NvUWengBUhwKkQoLnJ9Zlt332lBQjZ6CGQ8gc48gbMmcX0MXjD3fhPTjmsLNmDFNeAN\/Na1yjHCGNm5o7zETZ72zHSw6p9xAh9ODG\/q5qZxhtjSHGaCkn43g3E2dT1GzI3q3HGyEIU3vPi7ic9wpgm8dcENHq3ulgS\/7RJIXA8iou4qnL2pQy7vjRGpjNxwuaaKHhtGYswMRD8wgdNTAbhwvqt1EDi6m7rzvQQGucBuBuMGGseICVFiA0CPu5sM4rrLeg\/GCMo83w9M4FzARm7CVTkr\/2s97Nk1T7Roe+Tn\/DVQuOkGmm4jxSKGEGUvsxzeoxGEUvT63t6u\/eAE+lYSemsK1g6ku6mDz6YphxzF7+RuraU\/YljqZBI4pFfDIEDTVi8OY8P2AK8Agd0d3K2eD6cEW0f800DRO2fhTSPGBI4oqpgFgusKarAMPwSHrzNPIBhytxh9qyeh5mecGrPPrqK7BZnhh78IQ+C5c49UXtoILE6dbQKxH5xq9bR30kHsFJ1aAnHRM4y4ZVBiaCMhhiOQYDmGowdq2IM4KwR6R5Erc7OtvvazDoG3ehm66HUFzK3BDGfaWHl7CBwOEPbnjwyEK96vAIETV6ZmhzHdag22n+ohEFEuRQQ9lE13M+aN4akJ14kugURO4vogd7fPLIJs0E5YvHFWCGyFa99HoLtXxTo001CpLpDgbkGsRJuheiGLvQQOKZjspj+gvRpkLJQfjFebQKlb0u+v6NeZjYEMZnAzey6IwO5FvDFTB\/3BvtoEIu+LSjAZt1htJznKULtAAmELM9bLoE+0wSd\/tQlEkGMMZcPEmCB3i6hmBsM9Gm4VSGB384a1zOfinUnaK04gYtRzgxSC35pxfZiVI3owMIJA1weYW5ENLwata1OvOoEIFdmbPTvX\/gvf9rWPnMf8RxCI+J4IpTBeK2B51x+cQDvha4VrP+VkiL03evBGva9KZ7jH1qy8qwbdYoJa9MrEhZvdtoo0M3wC2mzm3HwU5kLfKWB2zsLU6KYmpu32c63+z\/kKxdImNBKxGm0fW1sQ1XnfC03hnCNS8KxOk66YRvPFoRPYF\/bszjT2LBZUI0SIECFChAgRIkSIECFChAgRIkSIECFChAgRIkSIECFChAgR\/onBN5snuaODL2WXlrKl6CYQE83awlamUIgvV5dC3VfELF2Np03Eq9nTHpzVY3ZtYXlra7O6Nx9WpLRdNSVqpZP2VapVN5c3q9vZkOpRqqYLmVQqHk+lMulMuzlSoBZPZ1LxJCCeyuRXlk44QBhic35+dDddNNfii3iIeID5zTBLxtRWFtO2xOLySUbYbMfz6UwmlckU8pl2iOVi2vlMPJlIxACJRDJVKNSCBeaX06m41R4kgMP81ZOQgea3F1YK+XxhpVoLKVfLFFJ4iABYs8zi1ZHTyq6kHQlzhFthtZBZK3T7igMZ7VFa2NxMQ\/uYC6AwXw0cWyET72kPEvFMPLyVgLpj9QWAbqSrYVa4mk\/1jBDmlSmMUKl2PtU7xgRQuBZqdE1Qjr6+Uunl4CE2VwbowN2lr\/oLZKGH2IBAMpUJ65ksdXepKKRHTozfLMQHeoQ13g4SqaZtCR1gScTz7RCjm48PsgHakQnSDmYrE48NAhj01cH5zBB\/eHyZrVDW6KHu6asjbAT4G+4vvrjnLwH84T70sv7G7dtv6B3dnFMIHWzGM8OTA6cWoB1Vj9GZvfn5wU23C3t1dfNvvBBo9s4AvdS9sBXIYBuzYeuR9Qf3Bzroqxe1vNlJ+c0fv4Xx9q\/e6JgdLY4MPubkdA\/t8B1hNj84IZd1b43ayzuE71QBl\/XL+M9CLBbPj46NzOaQuicwgwEOwxxh4sZPfvK4DGgv4Nf9a\/vAYGbZR2I+nTL171e7r7\/zbnzl3Xde3\/2pbs4pMyJFW0vD8C6t9TJoHscLvua\/6aGyFoM+Mispi\/CEXmV4nql9afki+CCzGTw6QHtI3RM37sL4gvwgHmHixtu7Pytls6Wfv5cFTKE5Ha+YTyCpFvCc9Pc\/+NC0Xb3TeeeDj0wGC8FG3CzgyV3OlnsGuG+O0teIs1if9J3LlwCXd3T9konLloyXCmYdBXx8t7zEoJJe3uYlhmNMCxkViUvD6p64cwPrYNpX1OwwceMXv7yztby8Kde2lrc2r80e6lihvFVw3nSA5Y8+eLcDqntwcDcR67z5wa\/KeE7xQEe9lsbM9xKo7x8GqhOoRDKmX3YM\/JLTqonHl\/Za4KqpsQn97sERVoBSubzNSPBfiPX1VHeTQDBHXwdqd\/jxHz+pfRnT0wVY7vnq70wziHt7wTWsgJ1fv\/VG58bRjQfr6w9uHN3tfLh7Gyut55xcJM3TAoFOjhs7fp6xhplKenvBLRDRYfD\/gpqfIrRgBY5b02gHm6TXpFK4j8SdOzCwJ19\/ahHIw39mJ35OyUZp0dbenXsYPQTCzHxMhLFcRqFdW8zWsGZg\/solPea\/YpsZkNDf\/qxz92B9\/fHTp4\/XDw52yp+\/Xw5cKGQaSMwi8Blo7Q7u4\/mxzaSPh2+aFlxFn65\/cXBgEthqoVuTkyaBqRUPAYsDGNkR\/PuiTwMhGATnI+2CnZvdu48RK0M07VgEJv284Lw1Kb1dK6eztS\/LZcxfzCIwkfEKPs0MVorbb70bSxw9SOwfHt57un6UiH31m\/vHeiK1FTC+mmnBmMAnd\/R7k\/s75a\/2nXiSLHjmndl80iSQ\/\/rg4GcmgdeuTU9O\/g4TGItnhh2GtUiJx+tHT28cPPjEJJC3CYzFF4NTweWMGRz1y6+ZqG0D1mwCPblwRogJ3C7Hytn3P3r9X4E\/vWR5qZRXdlHCkbTz09c7idiDp8f3709O7t99dnw4ef9w8hjCacAQ7QUGAjN3fvv8eP\/54aEbj73tETYVFoHNA5fAScyfRaBHZ9Z8Es\/Wj3ZurB80EX+57ERhTGDgbqRppoD65YVrc3PXXHxsEgju3Vt7ba3Q5eJOTP\/9Hx7+20fgCdvvtc3UOLXikZaYcyp\/9HkHVjiRyBReTJq4V4gDH76uAqNqLjAmUN\/647KuZ144Buyn7S6Bn\/77z762TJifPAT+RhAYOwD7XV8\/+ALWW1\/+EUYIAk3V0IFvhpEmXfzHn8xRx9PeqlGzzf69by7rsd9\/O\/GXj0ATl36+Z6pgKu5P4GedZ0AgNFo5xN0cAv\/3QxN4\/Py3d3SIlDuJUQTaJsxkUbNkBRHejGx+BFpxIPHkCQ4iYMKIqZV1Z78ZzweacAl3VjZPz7v8PfzP\/7IIzHvPbM\/SQAgi6Zi+vPvtH0ADE\/H5gqW2Kx5qm8XrVP7x5+W7Rw8gTY+BDd8H830ROz68H5bAwxeFZ8+e3Tk4iiVcAhe8RObtIGJjwd2+7fgMzw4i8dTTg6+5LIPm5viq4ycSqYz\/4JBLIHhMvkvg8w\/+bJPvnQm6PhAWamf+5cuXCo7FdhDxDPvzlg\/8QF9bfvD4GKvf8eMnhf3Jw8nDFU+\/7mLN9YEQhu4+uJFM3fj6ru4EEc9EkImn4MtLpXkAZxFYxMdZ3U9pnY1I7L\/\/On1tdgoInN8J1vIugaZqDBD4P7\/4iZUm+KhGM+1GYRx\/O50yzmacKOzl2GFOCdgGf8MzOwfrfzre3z\/+0\/pBTIeD+IhMa8mNwubq4Hxt5+iOTWDau3ZhpakFjBUZE7hkHhdMEa\/AbUeq8hrHzE5OQThAkpO4+\/XhclHwIPA3u2+tmMNN+aRAW9a+tr0dw\/kLALKZjp0Hpj0LHguZhL4mAR\/61wfrDx6DtwFTjH32rh6woTAx7+aB3diReGAd+FnIklsaiOkrwkJtqeCKenslywnqCxKMsAVZYwtJkrX5TvjFgT4ugEDeInAOB\/zJb3d3X3YwgX4baXvFnk+WquBtO\/Av\/8mdLx4n\/APPHihtsrrEb3Z2niWfQC6dfJaEnchybGTBY9PZicS6DKbsPz4JJOOaJLCydWmzu9Xyy8yumgWfbfzrPhIG\/Mna+4JR9SzspK0gwgF\/CM1NTv5ld3f3bT1oG1gyi1n3Wuh5td1uvyfDy8d\/3j3CMt5+HTXxbknPJ9+9rScTd4+OdhIZ\/Y0kVsDgPNpRp8vZnUu9sDyMX3Wvlu+pj7hbQFMBvXXWKgjohV5YaxRUdTSRBe3V22t7r732HDY7gNnJ\/wUCdxu6r4Ugu7ZyPDf11V6ttvRNsVbb++sv\/wwE+hcvzKJUTP\/17pudjp7KdPSdz99a1mMB9RsbzJZZK17K9mFB98k4LfjUs+KFH\/kItNM+FdjAGrsJPD69nHzxYv\/FvjnK1\/7vdcDLju9GBDCPa0zJ43uFcrmc3lwplwtPnzyB7Nu\/ggtmZdazbidefv6h\/uY7H\/7+\/dtmNWtkwc2qjqb7EVQ5s8bnWaFf9tvX4qLoUA02EaogvWSVszIYBTy2QgdDTwT6pr1FkEomE66NJFOpFLz4K0V20aro6\/X3f\/zl62+\/7HSseupIG7Gq3x7aFDS57OLwNaJ4Ju7fV3PLqyw\/6sKGiat+6h7Ifjs\/eE0Js+FfQgTHtGhJ6OVOLFPo2BKjK\/owwmEGYXLBmptNDxCSjBdWgtaKH7gwhK9PLIS6hN+Me6u7146iB+38gNioK2Xg2lN9IzSva4a6uL4wuFrJ+MirXuZ1crc\/3NXCqGsH+YIjYF589o1RgygNOwxMxijTqhUyPUsW4lotysYL\/RKFlZBXrtfSvX0l45l0iMuh2313amyNXqr5aiF9ontBHJQGr7tidR89tdLVvD3AJPSZzoS4QFlNF2wJc4nboX9KqHR10ZHEbGyGIp7ZuxpP59Pw\/0rIe4Wae1XnbqQT3dbRvJrvqnsCq3s1lHy2msmncc6Uzi9vh5IotVcciZW10DckWZLxPIim8\/mT3Dll3a02f5K71ZrN5t\/wE1FLK1ib4qYuhVJ3G0xpb63dXlsKzwVTWjIlTnpzFpbM1rZrS2f13r1s1b41Lqy6RxgEM4+v8p7Irv5RwOGfWu1B3+\/ljnykxD8qgAXBMnf8OCcmiAeFkvgiI3CyjDgSCRVFkmVZQBUZyQpaDXhYziuB7i8H8n0fcMHOkCckdJPjMY0aEiSJDWirNFRFqquUqioNha0XaYPSFM1QRWW1omqnqIJwavsX63n35TvHuIIY4ExiOBUUCfo04BhoyQU\/MoivU3K9ohkUsECqIhn0U92KwTBohjSKAq2RFRqJRlGVRJFSKixic6cYtQgZzVSwRvA0w\/DIa0Y8jYSRT2EMaiAbGtqg6ArVkFUa0RoFpKgq\/pV0JfCcPCuCSpFIExErsmwggeSqyFKyqDZoXhRJEeWMIiXlirQoAIFUcD\/dSeRypq6e5KnFdVZarWig+dSGIOYqXo+C48EI1BxitRzLiSK3StVF2WBZRSNzGrdK5zQpl6tsyDlW1ryNjKZnihqCqayS0FHF0CoaR0PThrwRODOeNVhD1lSFVVdllpVDPEuT+ru8XQPxDV6lhHFODf3cTo2lDENFWgOpqqgqfgRSqqI0ENtgRSrHQ3PZqFNFyahXchxFUnWKZYVVysci+QbiaCCQpeoKxT9COYrVSKrBIJraCB6nZXmm8SOeRyEMkf+7jLUBfMiyJrOCHNptapU6SWKLolZlkRJor0GBB1e5ixDLNMpQhBxfl9l6ZZXiWAr8tUApiibIogAv3o8LBc+AJAl4EHieKbKIEeC4iL2tEIaTk4D3fRMKDSRpFDgaFl6CHuPY3wt+cBvQzfGI57w7FRBkCDSqkxIiSaYo0SQqknKRYRSZKzKcxBQVhhM4hQnxvF\/jNHchPF5\/3qKOQZQ5tZP0p4qiJOfUIquw7HcduNWiGyck5Ts+tyc4TcTPd3ByF6Ey+hF1JoE5VazkwK2LrGjQdakhfo+PYT8NmE51wNMxmIsivFCGTPo9BQO8q8CJOYElWVWiRZVmOZqWVkUloDNexGbI1pGSIxmWpooKqzCnSaC6qlm\/4o5nwQQ90MMFq2mKdSSECnhaUaOFiwIrcsCBqBg0pBqVcUEUhQ0aYl1FmVFJzutxQ4zM5kCLKHaVatAcQ5JiTiqykAUFdMavkoIGHt1oKCCoUYJB0tToZ8yShscAeCbM\/MAwG4qaq1AVmuYolc3xojYiCVJlpCCFVA1BoHKClFODnQwts5wqynU2B04U0TlJY6FHjqxDVgdGSsL8RNXrN84NtdigDFLOaYICeYJB0fCq0J6ZqgtZLsL+r0LSsmHA3o7hJcoYnZCsQquizJBIkjnwFaAaPIlERUEVcO\/BdLACrKhCiaKhVKgczIUd6WsoAeKJSEuiQq4ykLhowcFOkylJ1eQcJ9Nog9FYKSdXBJYm6woN+qSSlAbJkaekbPBmzGIMAZEyIuEV5oZC6IUEybdBWQvr\/A1Cvagq48U6KdIKLUPmPl6ElFatiCxJG5oa+IxfIFCUVhVaNCoWgZRCjSBQxQTSkOoroA4ipHfBBFYkgRFkoaLyFbRKSTIERwUZkPsUFQpVBA6+I5WRUzxdrML6aMy4YYjIMHJg\/ohlNaMoNpCRU4qBnk2WYNtiAHtFThJkGcmcSo94qjLJIYo1DKTIMoUMmfV4mJIfvPcpTJBX+16gmf9E1RBzsAukjRyqQ4ZL5cgcXVGKIaJ\/DyQxqOQxDIo6WfuzDB7RkpM3Ms7\/p44zWp3\/2\/BPW3iNECFChAgRIkSIECFChAgRIkSIECFChAgRIkSIEOG7xv8DrkJgy+zjDpUAAAAASUVORK5CYII=)","f395270a":"# **Modeling**\n\n## Blending Ensemble\n* LightGBM\n* Catboost\n* Xgboost","fe470170":"# Notebook for Colab Pro Environment ","2e887796":"# For public LB","26e98f38":"# **TPS - Sep 2021**\n\n## **Simple Baseline Using Pycaret (AutoML)**\n\n## **You should run this notebook at least**\n\n*   RAM > 20GB\n\n"}}