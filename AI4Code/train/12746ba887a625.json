{"cell_type":{"5eca742d":"code","9f0e7661":"code","da850fa4":"code","cbd4f86b":"code","c0711577":"code","03d4161e":"code","c73099ec":"code","3aa06c45":"code","d1159fff":"code","1d5df3e8":"code","fc9b1f52":"code","41a47d30":"code","da580f27":"code","15a2aae8":"code","8a2827ac":"code","22385354":"code","4bd03552":"code","5c2598ba":"code","be3faea2":"code","de0660ea":"code","0ef07aec":"code","b54d8dc3":"code","ec5e4a26":"code","3b67b638":"code","79e57e08":"code","1ff9abd7":"code","cfe54c3a":"code","590dc547":"code","a875ecda":"markdown","95cc9b7e":"markdown","292b0ba4":"markdown","8d625d32":"markdown","e688dcd5":"markdown","6a8e1097":"markdown","8d4ef910":"markdown","d7ddd4f0":"markdown","d51ffd71":"markdown","80e9b6b5":"markdown","e868bc76":"markdown","a6a2abc5":"markdown","f1050784":"markdown","f457a395":"markdown","314fe3db":"markdown","a79fd4a2":"markdown","a8893695":"markdown","8c739202":"markdown"},"source":{"5eca742d":"import pandas as pd \nimport numpy as np\nimport json","9f0e7661":"with open(\"..\/input\/spotify-recommendation\/good.json\",\"r\") as f:\n    liked = json.load(f)\nliked = pd.DataFrame(liked[\"audio_features\"])\nliked","da850fa4":"with open(\"..\/input\/spotify-recommendation\/dislike.json\",\"r\") as f:\n    disliked = json.load(f)\ndisliked = pd.DataFrame(disliked[\"audio_features\"])\ndisliked","cbd4f86b":"liked[\"liked\"] = [1] * 100\ndisliked[\"liked\"] = [0] * 95","c0711577":"liked","03d4161e":"disliked","c73099ec":"data = pd.concat([liked,disliked])\ndata","3aa06c45":"data.drop([\"type\",\"id\",\"uri\",\"track_href\",\"analysis_url\"],axis=1,inplace=True)\ndata","d1159fff":"data = data.sample(frac=1)\ndata","1d5df3e8":"try :\n    data = pd.read_csv(\"..\/input\/spotify-recommendation\/data.csv\")\n    print(\"Loading file...\")\nexcept :\n    data.to_csv(\"..\/input\/spotify-recommendation\/data.csv\",index=False)\n    print(\"Saving file...\")","fc9b1f52":"# import the library we're going to use\nimport matplotlib.pyplot as plt\nimport seaborn as sns","41a47d30":"corr = data.corr()[[\"liked\"]]\nfig, ax = plt.subplots(figsize=(10,10)) \nsns.heatmap(\n    corr, \n    annot=True,\n    ax=ax\n);","da580f27":"from sklearn.svm import SVC\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.model_selection import train_test_split , GridSearchCV\nfrom sklearn.metrics import accuracy_score , log_loss , roc_auc_score ","15a2aae8":"def evaluation(y_true,y_pred):\n    return accuracy_score(y_true , y_pred) , log_loss(y_true , y_pred ) , roc_auc_score(y_true , y_pred)","8a2827ac":"X , y = data.drop(\"liked\",axis=1) , data.liked\nX_train , X_test , y_train , y_test = train_test_split(X,y,test_size=0.2,random_state=0)","22385354":"np.random.seed(42)\n\nsvc = SVC(kernel=\"rbf\")\nsvc.fit(X_train,y_train)\ny_svc_pred = svc.predict(X_test)\n\nrf = RandomForestClassifier()\nrf.fit(X_train,y_train)\ny_rf_pred = rf.predict(X_test)\n\nknn = KNeighborsClassifier()\nknn.fit(X_train,y_train)\ny_knn_pred = knn.predict(X_test)","4bd03552":"class_svc , loss_svc , auc_svc = evaluation(y_test , y_svc_pred)\nclass_rf , loss_rf , auc_rf = evaluation(y_test ,y_rf_pred)\nclass_knn , loss_knn , auc_knn = evaluation(y_test , y_knn_pred)","5c2598ba":"scores = {\n    \"SVC\":{\n        \"Accuracy\":class_svc,\n        \"Loss\":loss_svc,\n        \"AUC\":auc_svc\n    },\n    \"Random Forest\":{\n        \"Accuracy\":class_rf,\n        \"Loss\":loss_rf,\n        \"AUC\":auc_rf\n    },\n    \"KNN\":{\n        \"Accuracy\":class_knn,\n        \"Loss\":loss_knn,\n        \"AUC\":auc_knn\n    }\n}\nscores = pd.DataFrame(scores)\nscores","be3faea2":"scores.drop(\"Loss\").plot.bar();","de0660ea":"scores.drop([\"Accuracy\",\"AUC\"]).plot.bar();","0ef07aec":"# as i've already run it locally , I didn't include all my attempts to limit running time\nnp.random.seed(42)\n\nrf = RandomForestClassifier(n_jobs=-1)\nrf_grid = {\n 'max_depth': [10,15],\n 'max_features': ['auto', 'sqrt'],\n 'min_samples_leaf': [1,3],\n 'min_samples_split': [2,4],\n 'n_estimators': [10,42,100]\n}\nrf_cv = GridSearchCV(rf,rf_grid,verbose=2,cv=3)\nrf_cv.fit(X_train , y_train)","b54d8dc3":"rf_cv.best_params_","ec5e4a26":"cv_pred = rf_cv.predict(X_test)","3b67b638":"cv_acc , cv_loss , cv_auc = evaluation(y_test,cv_pred)\nprint(cv_acc , cv_loss , cv_auc)","79e57e08":"comp = {\n    \"Old\":{\n        \"Accuracy\":class_rf,\n        \"Loss\":loss_rf,\n        \"AUC\":auc_rf\n    },\n    \"CV\":{\n        \"Accuracy\":cv_acc,\n        \"Loss\":cv_loss,\n        \"AUC\":cv_auc\n    }\n}\ncomp = pd.DataFrame(comp)\ncomp","1ff9abd7":"comp.drop(\"Loss\").plot.bar();","cfe54c3a":"comp.drop([\"Accuracy\",\"AUC\"]).plot.bar();","590dc547":"# Reimporting libraries in case I just want to run this cell\nimport pickle\nfrom sklearn.ensemble import RandomForestClassifier\nimport pandas as pd\nimport os\nimport json\nimport urllib.parse\n\ndata = pd.read_csv(\"..\/input\/spotify-recommendation\/data.csv\")\nX , y = data.drop(\"liked\",axis=1) , data.liked\n\ntry :\n    model = pickle.load(open(\".\/model.sav\", 'rb'))\nexcept:\n    model = RandomForestClassifier(n_jobs=-1,\n                                  max_depth=15,\n                                  min_samples_leaf=1,\n                                  min_samples_split=4,\n                                  n_estimators=42)\n\n    model.fit(X,y)\n\n    pickle.dump(model, open(\".\/model.sav\", 'wb'))\n\ntoken = input(\"\"\" Spotify token :\n\nTo create one , visit this page : https:\/\/developer.spotify.com\/console\/get-several-tracks\/\n\nLog in to your spotify Account , and then copy what's in \"OAuth Token\" field \"\"\")\nquery = input(\"\\n\\n\\nName of the track and artist ( be careful the database is somewhat capricious ) : \")\n\nquery = urllib.parse.quote(query)\nstream = os.popen(f'curl -X \"GET\" \"https:\/\/api.spotify.com\/v1\/search?q={query}&type=track\" -H \"Accept: application\/json\" -H \"Content-Type: application\/json\" -H \"Authorization: Bearer {token}\"')\ndata = stream.read()\ntry :\n    data = json.loads(data)[\"tracks\"][\"items\"][0]\n    song_id = data[\"id\"]\n    artist = data[\"artists\"][0][\"name\"]\n    title = data[\"name\"]\n    stream = os.popen(f'curl -X \"GET\" \"https:\/\/api.spotify.com\/v1\/audio-features\/{song_id}\" -H \"Accept: application\/json\" -H \"Content-Type: application\/json\" -H \"Authorization: Bearer {token}\"')\n    data = stream.read()\n    data = json.loads(data)\n    data = pd.DataFrame(data,index=[0])\n    data.drop([\"type\",\"id\",\"uri\",\"track_href\",\"analysis_url\"],axis=1,inplace=True)\n    print(f\"\\n\\n\\n\\nThere is {list(model.predict_proba(data)[0])[1]*100:.2f}% chance that Brice likes \\\"{title}\\\" by {artist}\\n\\n\\n\")\nexcept KeyError:\n    print(\"\\n\\n\\nYour token has expired , create a new one : https:\/\/developer.spotify.com\/console\/get-several-tracks\/\\n\\n\\n\")\nexcept IndexError:\n    print(\"\\n\\n\\nWe didn't find the song you were looking for\\n\\n\\n\")","a875ecda":"# Spotify recommandation","95cc9b7e":"## 2. Data features\n\nFrom [Spotify's API documentation](https:\/\/developer.spotify.com\/documentation\/web-api\/reference\/#object-audiofeaturesobject) :\n\n* **acousticness** : A confidence measure from 0.0 to 1.0 of whether the track is acoustic. 1.0 represents high confidence the track is acoustic.\n* **danceability** : Danceability describes how suitable a track is for dancing based on a combination of musical elements including tempo, rhythm stability, beat strength, and overall regularity. A value of 0.0 is least danceable and 1.0 is most danceable.\n* **duration_ms** : The duration of the track in milliseconds.\n* **energy** : Energy is a measure from 0.0 to 1.0 and represents a perceptual measure of intensity and activity. Typically, energetic tracks feel fast, loud, and noisy. For example, death metal has high energy, while a Bach prelude scores low on the scale. Perceptual features contributing to this attribute include dynamic range, perceived loudness, timbre, onset rate, and general entropy.\n* **instrumentalness** : Predicts whether a track contains no vocals. \u201cOoh\u201d and \u201caah\u201d sounds are treated as instrumental in this context. Rap or spoken word tracks are clearly \u201cvocal\u201d. The closer the instrumentalness value is to 1.0, the greater likelihood the track contains no vocal content. Values above 0.5 are intended to represent instrumental tracks, but confidence is higher as the value approaches 1.0.\n* **key** : The key the track is in. Integers map to pitches using standard Pitch Class notation . E.g. 0 = C, 1 = C\u266f\/D\u266d, 2 = D, and so on.\n* **liveness** : Detects the presence of an audience in the recording. Higher liveness values represent an increased probability that the track was performed live. A value above 0.8 provides strong likelihood that the track is live.\n* **loudness** : The overall loudness of a track in decibels (dB). Loudness values are averaged across the entire track and are useful for comparing relative loudness of tracks. Loudness is the quality of a sound that is the primary psychological correlate of physical strength (amplitude). Values typical range between -60 and 0 db.\n* **mode** : Mode indicates the modality (major or minor) of a track, the type of scale from which its melodic content is derived. Major is represented by 1 and minor is 0.\n* **speechiness** : Speechiness detects the presence of spoken words in a track. The more exclusively speech-like the recording (e.g. talk show, audio book, poetry), the closer to 1.0 the attribute value. Values above 0.66 describe tracks that are probably made entirely of spoken words. Values between 0.33 and 0.66 describe tracks that may contain both music and speech, either in sections or layered, including such cases as rap music. Values below 0.33 most likely represent music and other non-speech-like tracks.\n* **tempo** : The overall estimated tempo of a track in beats per minute (BPM). In musical terminology, tempo is the speed or pace of a given piece and derives directly from the average beat duration.\n* **time_signature** : An estimated overall time signature of a track. The time signature (meter) is a notational convention to specify how many beats are in each bar (or measure).\n* **valence** : A measure from 0.0 to 1.0 describing the musical positiveness conveyed by a track. Tracks with high valence sound more positive (e.g. happy, cheerful, euphoric), while tracks with low valence sound more negative (e.g. sad, depressed, angry).\n\n\nAnd the variable that has to be predicted :\n\n* **liked** : 1 for liked songs , 0 for disliked songs","292b0ba4":"From statistics about liked and disliked songs , we're going to create a model to predict wether I like a song or not\n\nSummary :\n\n1. Data Collection\n2. Data Features\n3. Data Cleaning\n4. Exploratory Data analysis\n5. Modelling\n6. Testing on new data","8d625d32":"### 5.1 Initial modelling","e688dcd5":"### Add the \"Liked\" column","6a8e1097":"**I don't really understand why it didn't improve , it did on my side with the same code**","8d4ef910":"With such results , I'm not even going to try to hyperparameter tune the other models","d7ddd4f0":"According to the figures , I'm very likely...\n* To like ... songs :\n    * danceable\n    * high energy\n    * loud\n    * with many words\n    * fast\n    * with high amount of beats\n    * slightly positive \n* To dislike ... songs :\n    * not very accoustic\n    * with low instrumentalness\n    * short ","d51ffd71":"For this , we're going to try several models:\n* SVC with RBF kernel\n* Random Forest Classifier\n* KNN Classifier","80e9b6b5":"## 1. Data Collection\n\n### 1.1 Playlist creation\nI collected 100 liked songs and 95 disliked songs\n\nFor those I like , I made a [playlist](https:\/\/open.spotify.com\/playlist\/2WONKi3eZaR29QaQCRSiAE?si=a2463f1d382f4399) of my favorite 100 songs. It is mainly French Rap , sometimes American rap , rock or electro music.\n\nFor those I dislike , I collected songs from various kind of music so the model will have a broader view of what I don't like\n\nThere is :\n- [25 metal songs ( Cannibal Corps )](https:\/\/open.spotify.com\/playlist\/37i9dQZF1DZ06evO0grpKg?si=3c829a46465d4367)\n- [20 \" I don't like \" rap songs ( PNL )](https:\/\/open.spotify.com\/playlist\/37i9dQZF1DX2fxPY4lXxv8?si=c69f40a2a2014a25)\n- [25 classical songs](https:\/\/open.spotify.com\/playlist\/1h0CEZCm6IbFTbxThn6Xcs?si=933db0752a684db0)\n- [25 Disco songs](https:\/\/open.spotify.com\/playlist\/2rkU3Aop33atDJoF8LCCjh?si=5e1247ee29284f0a)\n\nI didn't include any Pop song because I'm kinda neutral about it\n\n### 1.2 Getting the ID's\n\n1. From the [Spotify's API \"Get a playlist's Items\"](https:\/\/developer.spotify.com\/console\/get-playlist-tracks\/) , I turned the playlists into json formatted data which cointains the ID and the name of each track ( ids\/yes.py and ids\/no.py ). NB : on the website , specify \"items(track(id,name))\" in the fields format , to avoid being overwhelmed by useless data.\n\n2. With a script ( ids\/ids_to_data.py ) , I turned the json data into a long string with each ID separated with a comma.\n\n### 1.3 Getting the statistics\n\nNow I just had to enter the strings into the [Spotify API \"Get Audio Features from several tracks\"](https:\/\/developer.spotify.com\/console\/get-audio-features-several-tracks\/) and get my data files ( data\/good.json and data\/dislike.json )","e868bc76":"### Load Data","a6a2abc5":"### Shuffle rows\n\nIf you don't do it , the model will somewhat think they only have to learn what is a liked song because they'll only see them at the beginning \n\nSuffling prevents this from happening","f1050784":"## 3. Data Cleaning\n\nWe're going to :\n* Take each json files \n* Turn them into a dataframe\n* Add a \"Liked\" column\n* Drop useless columns\n* Shuffle them ( it's somewhat better for learning )\n* Save it as a csv file","f457a395":"## 4. Exploratory Data Analysis\n\nAs all figures are integers or digits , we're just going to see the correlation between them and the liked column","314fe3db":"### Save the dataframe as a csv file","a79fd4a2":"## 5.2 Hyperparameter tuning","a8893695":"### Drop useless columns\n\nWe're going to drop things like id's , url's ...","8c739202":"## 5. Modelling"}}