{"cell_type":{"37e1452d":"code","cd3445a9":"code","cf9d944c":"code","e05e5db1":"code","b0df98cc":"code","028fbc75":"code","8a64824b":"code","dc20a623":"code","0d8514b5":"code","e47eb457":"code","3ca8a764":"code","dd5b123e":"code","0bb00e3e":"code","0260804b":"code","dfbe735d":"code","0b2f6f63":"code","5df93231":"code","d49aae25":"code","60ca26f2":"code","7dcbde17":"code","273f2c6b":"code","81fc0f13":"code","6fb61bd6":"code","4a0851c5":"code","844c5e82":"code","a810d68e":"code","fc5ac55d":"code","c4e561c7":"code","9a84b287":"code","1ae78955":"code","0d4ae9e3":"code","fcb6f98b":"code","16b3253c":"code","260c6a12":"code","378d86af":"code","731ed8e5":"code","e00a3d7b":"code","7549d9aa":"code","7ab4b6c1":"code","8325898e":"code","87b89d18":"code","486d8cbe":"code","524f842f":"markdown","de8e31e1":"markdown","f66680fd":"markdown","50a8041f":"markdown","d86de56f":"markdown","b70ef3b7":"markdown","17e0acfb":"markdown","19c22fbe":"markdown","912a8cb2":"markdown","e94bf35a":"markdown","5147836f":"markdown","ea27e3bb":"markdown","aca9ac50":"markdown","ca6cb5f1":"markdown","520e875c":"markdown","bd00fbce":"markdown","aef1093f":"markdown","798eba22":"markdown","821ab6c9":"markdown","05019302":"markdown","48fc1d14":"markdown","ff279365":"markdown","f1f7f6c1":"markdown","821d5b87":"markdown","b9caa1bd":"markdown","d903e8c7":"markdown","ebc83017":"markdown","ee97e4d2":"markdown","dad107c6":"markdown","7f73a39a":"markdown","6635e577":"markdown","cc66fba2":"markdown","875dce52":"markdown","3dd5292b":"markdown","cb5b5497":"markdown","6899a14b":"markdown","ef0bda9c":"markdown","7267b83a":"markdown","90047ef1":"markdown","3a0b5e39":"markdown","789cd4cc":"markdown","8d7dee4f":"markdown","1024c30d":"markdown","ce9ac73a":"markdown","577cc3a9":"markdown","600075f0":"markdown","7aadb7c4":"markdown","1bca69d7":"markdown","a2874c51":"markdown","e3a561d1":"markdown"},"source":{"37e1452d":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# \u67e5\u770b\u6570\u636e\u96c6\u6587\u4ef6\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))","cd3445a9":"#\u914d\u7f6eTPU\u8fd0\u884c\u6a21\u5f0f\nimport tensorflow as tf\n# from kaggle_datasets import KaggleDatasets\n# \u63a2\u6d4bTPU\ntry:\n    tpu = tf.distribute.cluster_resolver.TPUClusterResolver()\n    print('Running on TPU ', tpu.master())\nexcept ValueError:\n    tpu = None\n\nif tpu:\n    tf.config.experimental_connect_to_cluster(tpu)\n    tf.tpu.experimental.initialize_tpu_system(tpu)\n    strategy = tf.distribute.experimental.TPUStrategy(tpu)\nelse:\n    # Default distribution strategy in Tensorflow. Works on CPU and single GPU.\n    strategy = tf.distribute.get_strategy()\nBATCH_SIZE = 16 * strategy.num_replicas_in_sync\nprint(\"REPLICAS: \", strategy.num_replicas_in_sync)","cf9d944c":"BATCH_SIZE = 32 * strategy.num_replicas_in_sync","e05e5db1":"!pip install bert-for-tf2","b0df98cc":"!wget https:\/\/storage.googleapis.com\/bert_models\/2018_11_03\/chinese_L-12_H-768_A-12.zip","028fbc75":"!unzip chinese_L-12_H-768_A-12.zip  # \u89e3\u538b\u4e2d\u6587\u6a21\u578b\u5305","8a64824b":"import os\nos.makedirs(\"model\", exist_ok=True)","dc20a623":"!mv chinese_L-12_H-768_A-12\/ model","0d8514b5":"import os\nimport datetime\n\nfrom tqdm import tqdm\n\nimport pandas as pd\nimport numpy as np\n\nimport tensorflow as tf\nfrom tensorflow.keras import Model\nfrom tensorflow.keras.layers import Input, Lambda, Dense, Dropout\nfrom tensorflow.keras.optimizers import Adam\nfrom tensorflow.keras.losses import SparseCategoricalCrossentropy\nfrom tensorflow.keras.metrics import SparseCategoricalAccuracy\nfrom tensorflow.keras.models import load_model\nfrom tensorflow.keras.callbacks import TensorBoard\n\nfrom bert import BertModelLayer\nfrom bert.loader import StockBertConfig, map_stock_config_to_params, load_stock_weights\nfrom bert.tokenization.bert_tokenization import FullTokenizer\n\nimport seaborn as sns\n\nimport matplotlib.pyplot as plt\n\nfrom sklearn.metrics import confusion_matrix, classification_report\n\n%matplotlib inline","e47eb457":"# \u8bbe\u5b9a\u968f\u673a\u6570\u79cd\u5b50\nRANDOM_SEED = 2021\nnp.random.seed(RANDOM_SEED)\ntf.random.set_seed(RANDOM_SEED)","3ca8a764":"train = pd.read_csv('..\/input\/natural-language-understanding-dataset\/train.csv')\nvalid = pd.read_csv('..\/input\/natural-language-understanding-dataset\/valid.csv')\ntest = pd.read_csv('..\/input\/natural-language-understanding-dataset\/test.csv')","dd5b123e":"train = train.append(valid).reset_index(drop=True)","0bb00e3e":"train.shape","0260804b":"train.head()","dfbe735d":"chart = sns.countplot(x = train.intent)\nplt.title(\"Number of texts per intent\")\nchart.set_xticklabels(chart.get_xticklabels(), rotation=30, horizontalalignment='right');","0b2f6f63":"bert_model_zh = 'chinese_L-12_H-768_A-12'\nbert_ckpt_dir = f'model\/{bert_model_zh}'\nbert_ckpt_file = f'{bert_ckpt_dir}\/bert_model.ckpt'\nbert_config_file = f'{bert_ckpt_dir}\/bert_config.json'\nbert_vocab_file = f'{bert_ckpt_dir}\/vocab.txt'","5df93231":"print('\u9884\u8bad\u7ec3\u6a21\u578b\u5b58\u653e\u76ee\u5f55\uff1a',bert_ckpt_dir)\nprint('\u6a21\u578b\u7ed3\u6784\u4e0e\u53c2\u6570\u6587\u4ef6\uff1a',bert_ckpt_file)\nprint('\u6a21\u578b\u8d85\u53c2\u6570\u914d\u7f6e\u6587\u4ef6\uff1a', bert_config_file)\nprint('\u5b57\u5178\u6587\u4ef6\uff1a', bert_vocab_file)","d49aae25":"class IntentDetectionData:\n  DATA_COLUMN = \"text\"\n  LABEL_COLUMN = \"intent\"\n\n  def __init__(self, train, test, tokenizer: FullTokenizer, classes, max_seq_len=192):\n    self.tokenizer = tokenizer\n    self.max_seq_len = 0\n    self.classes = classes\n    \n    ((self.train_x, self.train_y), (self.test_x, self.test_y)) = map(self._prepare, [train, test])\n\n    print(\"max seq_len\", self.max_seq_len)\n    self.max_seq_len = min(self.max_seq_len, max_seq_len)\n    self.train_x, self.test_x = map(self._pad, [self.train_x, self.test_x])\n\n  def _prepare(self, df):\n    x, y = [], []\n    \n    for _, row in tqdm(df.iterrows()):\n      text, label = row[IntentDetectionData.DATA_COLUMN], row[IntentDetectionData.LABEL_COLUMN]\n      tokens = self.tokenizer.tokenize(text)\n      tokens = [\"[CLS]\"] + tokens + [\"[SEP]\"]\n      token_ids = self.tokenizer.convert_tokens_to_ids(tokens)\n      self.max_seq_len = max(self.max_seq_len, len(token_ids))\n      x.append(token_ids)\n      y.append(self.classes.index(label))\n\n    return np.array(x), np.array(y)\n\n  def _pad(self, ids):\n    x = []\n    for input_ids in ids:\n      input_ids = input_ids[:min(len(input_ids), self.max_seq_len - 2)]\n      input_ids = input_ids + [0] * (self.max_seq_len - len(input_ids))\n      x.append(np.array(input_ids))\n    return np.array(x)","60ca26f2":"tokenizer = FullTokenizer(bert_vocab_file)","7dcbde17":"tokens = tokenizer.tokenize(\"\u529b\u5c3d\u4e0d\u77e5\u70ed\uff0c\u4f46\u60dc\u590f\u65e5\u957f\u3002\")\ntokens","273f2c6b":"tokenizer.convert_tokens_to_ids(tokens)","81fc0f13":"tokens = tokenizer.tokenize(\"I can't wait to visit Bulgaria again!\")\ntokens","6fb61bd6":"tokenizer.convert_tokens_to_ids(tokens)","4a0851c5":"def create_model(max_seq_len, bert_ckpt_file):\n    # \u52a0\u8f7dBERT\u9884\u8bad\u7ec3\u6a21\u578b\n    with tf.io.gfile.GFile(bert_config_file, \"r\") as reader:\n        bc = StockBertConfig.from_json_string(reader.read())\n        bert_params = map_stock_config_to_params(bc)\n        bert_params.adapter_size = None\n        # BERT\u9884\u8bad\u7ec3\u6a21\u578b\n        bert = BertModelLayer.from_params(bert_params, name=\"bert\")\n    # \u8f93\u5165\u5c42\uff0c\u6839\u636e\u6700\u5927\u8f93\u5165\u5e8f\u5217\u957f\u5ea6\u51b3\u5b9a\n    input_ids = Input(shape=(max_seq_len, ), dtype='int32', name=\"input_ids\")\n    bert_output = bert(input_ids)\n\n    print(\"bert shape\", bert_output.shape)\n    # \u65b0\u589eLambda\u5c42\n    cls_out = Lambda(lambda seq: seq[:, 0, :])(bert_output)\n    cls_out = Dropout(0.5)(cls_out)\n    # \u65b0\u589e\u5168\u8fde\u63a5\u5c42\n    logits = Dense(units=768, activation=\"tanh\")(cls_out)\n    logits = Dropout(0.5)(logits)\n    # \u65b0\u589e\u5206\u7c7b\u5c42\n    logits = Dense(units=len(classes), activation=\"softmax\")(logits)\n    # \u65b0\u6a21\u578b\n    model = Model(inputs=input_ids, outputs=logits)\n    model.build(input_shape=(None, max_seq_len))\n    # \u52a0\u8f7d\u6743\u91cd\n    load_stock_weights(bert, bert_ckpt_file)\n    # \u6a21\u578b\u7f16\u8bd1\n    model.compile(optimizer=Adam(1e-5), \\\n                  loss='sparse_categorical_crossentropy', \\\n                  metrics=['sparse_categorical_accuracy'])      \n    return model","844c5e82":"classes = train.intent.unique().tolist()\n\ndata = IntentDetectionData(train, test, tokenizer, classes, max_seq_len=128)","a810d68e":"data.train_x.shape","fc5ac55d":"data.train_x[0]","c4e561c7":"data.train_y[0]","9a84b287":"data.max_seq_len","1ae78955":"with strategy.scope():\n    classes = train.intent.unique().tolist()\n    model = create_model(data.max_seq_len, bert_ckpt_file)","0d4ae9e3":"model.summary()","fcb6f98b":"history = model.fit(\n  x=data.train_x, \n  y=data.train_y,\n  validation_split=0.1,\n  batch_size=BATCH_SIZE,\n  shuffle=True,\n  epochs=5\n)","16b3253c":"model.save('intent_chinese.h5') # \u4fdd\u5b58\u6a21\u578b","260c6a12":"plt.plot(history.history['loss'])\nplt.plot(history.history['val_loss'])\nplt.ylabel('Loss')\nplt.xlabel('Epoch')\nplt.legend(['train', 'val'])\nplt.title('Loss over training epochs')\nplt.show();","378d86af":"plt.plot(history.history['sparse_categorical_accuracy'])\nplt.plot(history.history['val_sparse_categorical_accuracy'])\nplt.ylabel('Accuracy')\nplt.xlabel('Epoch')\nplt.legend(['train', 'val'])\nplt.title('Accuracy over training epochs')\nplt.show();","731ed8e5":"# \u7528\u8bad\u7ec3\u597d\u7684\u6a21\u578b\u505a\u9884\u6d4b\nimport bert\nmodel = load_model('intent_chinese.h5', custom_objects={\"BertModelLayer\": bert.model.BertModelLayer})","e00a3d7b":"_, train_acc = model.evaluate(data.train_x, data.train_y)\n_, test_acc = model.evaluate(data.test_x, data.test_y)\n\nprint(\"train acc\", train_acc)\nprint(\"test acc\", test_acc)","7549d9aa":"y_pred = model.predict(data.test_x).argmax(axis=-1)","7ab4b6c1":"print(classification_report(data.test_y, y_pred, target_names=classes))","8325898e":"cm = confusion_matrix(data.test_y, y_pred)\ndf_cm = pd.DataFrame(cm, index=classes, columns=classes)","87b89d18":"hmap = sns.heatmap(df_cm, annot=True, fmt=\"d\")\nhmap.yaxis.set_ticklabels(hmap.yaxis.get_ticklabels(), rotation=0, ha='right')\nhmap.xaxis.set_ticklabels(hmap.xaxis.get_ticklabels(), rotation=30, ha='right')\nplt.ylabel('True label')\nplt.xlabel('Predicted label');","486d8cbe":"sentences = [\n  \"Play our song now\",\n  \"Rate this book as awful\"\n]\n\npred_tokens = map(tokenizer.tokenize, sentences)\npred_tokens = map(lambda tok: [\"[CLS]\"] + tok + [\"[SEP]\"], pred_tokens)\npred_token_ids = list(map(tokenizer.convert_tokens_to_ids, pred_tokens))\n\npred_token_ids = map(lambda tids: tids +[0]*(data.max_seq_len-len(tids)),pred_token_ids)\npred_token_ids = np.array(list(pred_token_ids))\n\npredictions = model.predict(pred_token_ids).argmax(axis=-1)\n\nfor text, label in zip(sentences, predictions):\n  print(\"text:\", text, \"\\nintent:\", classes[label])\n  print()","524f842f":"\u7b2c1\u4e2a\u6837\u672c\u662f\u8fd9\u4e2a\u6837\u5b50\u3002\u540e\u9762\u76840\u662f\u8865\u9f50\u6700\u5927\u957f\u5ea6\u7684\u3002","de8e31e1":"\u5305\u542b\u8bad\u7ec3\u96c6\u3001\u9a8c\u8bc1\u96c6\u548c\u6d4b\u8bd5\u96c6\u3002\u539f\u59cb\u6570\u636e\u96c6\u662fJson\u683c\u5f0f\u7684\uff0c\u4e09\u4e2acsv\u6587\u4ef6\u8fdb\u884c\u4e86\u95ee\u9898\u3001\u610f\u56fe\u63d0\u53d6\u3002","f66680fd":"\u6ce8\u610f\u89c2\u5bdf\u8bad\u7ec3\u96c6\u7684\u7ef4\u5ea6\uff0c\u6837\u672c\u6570\u4e0d\u53d8\uff0c\u4f46\u662f\u5217\u6570\uff08\u5373\u7279\u5f81\u5217\uff09\u53d8\u4e3a54","50a8041f":"\u65e0\u8bba\u662f\u635f\u5931\u51fd\u6570\u66f2\u7ebf\u8fd8\u662f\u51c6\u786e\u7387\u66f2\u7ebf\uff0c\u5176\u5f62\u6001\u4e0e\u8d8b\u52bf\u90fd\u5f88\u9177\uff01","d86de56f":"\u8bad\u7ec3\u96c6\u548c\u6d4b\u8bd5\u96c6\u7279\u5f81\u63d0\u53d6","b70ef3b7":"## 1 \u6570\u636e\u96c6\u89c2\u5bdf\u4e0e\u7406\u89e3","17e0acfb":"\u5206\u8bcd\u5217\u8868\u8f6c\u6362\u4e3a\u6570\u5b57\u5217\u8868\u3002\u6570\u5b57\u8868\u793a\u5206\u8bcd\u5728\u8bcd\u5178\u4e2d\u7684\u4f4d\u7f6e\u3002","19c22fbe":"### <font color='red'>\u592a\u9177\u4e86\uff0c\u8fd9\u4e2a\u6a21\u578b\u662f\u5728\u6709\u4e9b\u51c6\uff01\uff01!<\/font>","912a8cb2":"\u7ed8\u5236\u635f\u5931\u51fd\u6570\u66f2\u7ebf\u548c\u51c6\u786e\u7387\u66f2\u7ebf","e94bf35a":"\u4e0b\u9762\u7684\u51fd\u6570\u521b\u5efa\u6a21\u578b\u3002\u5728BERT\u9884\u8bad\u7ec3\u6a21\u578b\u7684\u57fa\u7840\u4e0a\u6dfb\u52a0\u4e00\u4e2aLambda\u5c42\u3001\u4e00\u4e2a\u5168\u8fde\u63a5\u5c42\u548csoftmax\u5206\u7c7b\u5c42\u3002","5147836f":"\u5206\u8bcd\u4e3e\u4f8b\u3002\u5bf9\u4e8e\u4e2d\u6587\u800c\u8a00\uff0c\u4ee5\u5b57\u4e3a\u5355\u4f4d\u5206\u8bcd\u3002","ea27e3bb":"\u521b\u5efamodel\u76ee\u5f55\uff0c\u7528\u4e8e\u5b58\u653eBERT\u6a21\u578b","aca9ac50":"\u6570\u636e\u96c6\u6765\u81eaGitHub\uff1ahttps:\/\/github.com\/sonos\/nlu-benchmark\/tree\/master\/2017-06-custom-intent-engines<br\/>\n\u6570\u636e\u96c6\u9996\u6b21\u7528\u4e8e\u8bed\u97f3\u7406\u89e3\u8bc6\u522b\u9879\u76ee\uff0c\u76f8\u5173\u8bba\u6587\uff1ahttps:\/\/arxiv.org\/pdf\/1805.10190.pdf","ca6cb5f1":"\u4e0b\u9762\u8fd9\u53e5\u82f1\u6587\u5206\u8bcd\uff0c\u4e8b\u5b9e\u4e0a\u4e0d\u5982\u7528\u82f1\u6587BERT\u8bcd\u5178\u5206\u5f97\u597d\u3002\u6bd5\u7adf\u4e2d\u6587\u8bcd\u5178\u4e0e\u82f1\u6587\u8bcd\u5178\u5404\u6709\u6240\u957f\u3002","520e875c":"\u663e\u793a\u6570\u636e\u96c6\u5217\u8868","bd00fbce":"#### \u6570\u636e\u96c6\u9884\u5904\u7406\u3002\u5b9a\u4e49\u4e00\u4e2a\u7c7b\uff0c\u5bf9\u6570\u636e\u96c6\u505a\u7279\u5f81\u7f16\u7801\u5904\u7406\u3002","aef1093f":"\u8bad\u7ec3\u96c6\u5305\u542b\u4e24\u5217\uff0ctext\u5217\u662f\u7528\u6237\u7684\u95ee\u9898\uff0cintent\u5217\u662f\u6807\u7b7e\uff0c\u8868\u793a\u610f\u56fe\u5206\u7c7b\u3002","798eba22":"\u6df7\u6dc6\u77e9\u9635\u4e5f\u592a\u7406\u60f3\u4e86\u5427\uff0c\u53ef\u4ee5\u770b\u770b\u51fa\u9519\u7684\u54ea\u51e0\u4e2a\u6848\u4f8b\u90fd\u662f\u8c01\uff0c\u4ec0\u4e48\u6837\u5b50\u7684\u60c5\u51b5\u3002","821ab6c9":"\u7ed8\u56fe\u89c2\u5bdf\u5404\u79cd\u7c7b\u522b\u6837\u672c\u7684\u5206\u5e03","05019302":"\u5c06\u9a8c\u8bc1\u96c6\u548c\u8bad\u7ec3\u96c6\u5408\u5e76\u5728\u4e00\u8d77","48fc1d14":"\u7ecf\u5178\u7684\u8bed\u97f3\u8bc6\u522b\u63a7\u5236\u6d41\u7a0b\u5982\u56fe1\u6240\u793a\u3002\n![image.png](attachment:9e7acb21-bf32-4016-9442-df2561ad6c43.png)","ff279365":"\u4e0b\u9762\u7684\u8bed\u53e5\u662f\u4e0b\u8f7dBERT\u9884\u8bad\u7ec3\u6a21\u578b\u3002\u6ce8\u610f\uff0c\u6b64\u5904\u6545\u610f\u91c7\u7528\u4e2d\u6587\u6a21\u578b\uff0c\u6765\u89c2\u5bdf\u5728\u82f1\u6587\u6570\u636e\u96c6\u4e0a\u7684\u5efa\u6a21\u6548\u679c\u3002\u4e8b\u5b9e\u4e0a\uff0c\u5982\u679c\u786e\u5b9a\u662f\u82f1\u6587\u73af\u5883\uff0c\u7528\u82f1\u6587\u6a21\u578b\u5e94\u8be5\u66f4\u597d\u3002","f1f7f6c1":"\u5bfc\u5165\u5efa\u6a21\u8fc7\u7a0b\u4e2d\u7528\u5230\u7684\u76f8\u5173\u5e93","821d5b87":"## 4 \u6a21\u578b\u9884\u6d4b\u4e0e\u8bc4\u4f30","b9caa1bd":"\u5c06\u89e3\u538b\u7684BERT\u6a21\u578b\u79fb\u52a8\u5230model\u76ee\u5f55\u4e0b\u3002","d903e8c7":"### \u6700\u540e\uff0c\u7ed9\u51e0\u4e2a\u53e5\u5b50\u505a\u505a\u6d4b\u8bd5\u5427\uff0c\u4f53\u9a8c\u673a\u5668\u9886\u4f1a\u548c\u8bc6\u522b\u4eba\u7c7b\u610f\u56fe\u7684\u672c\u9886\u5982\u4f55\uff1f","ebc83017":"\u6839\u636eTPU\u8bbe\u5b9a\u6279\u5904\u7406\u5927\u5c0f\u3002","ee97e4d2":"# \u57fa\u4e8eBERT\u5b9e\u73b0\u95ee\u9898\u7406\u89e3\u548c\u610f\u56fe\u8bc6\u522b","dad107c6":"\u8bfb\u53d6\u8bad\u7ec3\u96c6\u3001\u9a8c\u8bc1\u96c6\u3001\u6d4b\u8bd5\u96c6\u3002","7f73a39a":"## 2 \u57fa\u4e8eBERT\u9884\u8bad\u7ec3\u6a21\u578b\u6784\u5efa\u65b0\u6a21\u578b","6635e577":"\u663e\u793a\u6700\u5927\u5e8f\u5217\u957f\u5ea6","cc66fba2":"\u901a\u8fc7F1-Score\u5bf9\u6a21\u578b\u7efc\u5408\u8bc4\u5206","875dce52":"## <font color='red'>\u505a\u5b8c\u8fd9\u4e2a\u6a21\u578b\uff0c\u770b\u5230\u76f8\u5173\u5b9e\u9a8c\u7ed3\u679c\uff0c\u60a8\u6709\u4ec0\u4e48\u60f3\u8bf4\u7684\uff1f\u6709\u6ca1\u6709\u60f3\u5927\u5e72\u4e00\u573a\u7684\u51b2\u52a8\u5462\uff1f<\/font>","3dd5292b":"\u5728\u6d4b\u8bd5\u96c6\u4e0a\u505a\u9884\u6d4b","cb5b5497":"\u5b9a\u4e49BERT\u6a21\u578b\u5206\u8bcd\u5668","6899a14b":"\u8fd9\u662f\u4e00\u4e2a\u57fa\u4e8eBERT\u9884\u8bad\u7ec3\u6a21\u578b\u5f3a\u5927\u7684\u8bed\u4e49\u7406\u89e3\u80fd\u529b\u5b9e\u73b0\u7684\u95ee\u9898\u610f\u56fe\u8bc6\u522b\u5206\u7c7b\u6559\u5b66\u6848\u4f8b\u3002\u95ee\u9898\u7406\u89e3\u548c\u610f\u56fe\u8bc6\u522b\uff0c\u5e38\u7528\u4e8e\u673a\u5668\u4eba\u95ee\u7b54\u3001\u673a\u5668\u4eba\u804a\u5929\u8fc7\u7a0b\u4e2d\uff0c\u7279\u522b\u662f\u5e38\u89c1\u4e8e\u673a\u5668\u4eba\u5ba2\u670d\u95ee\u7b54\u7cfb\u7edf\u4e2d\u3002\u4ee5\u4eac\u4e1c\u673a\u5668\u4eba\u5ba2\u670d\u4e3a\u4f8b\uff0c\u4eac\u4e1c\u4e3a\u5ba2\u670d\u7cfb\u7edf\u5b9a\u4e49\u4e86\u63a5\u8fd1300\u4e2a\u7c7b\u522b\u7684\u670d\u52a1\u5bfc\u5411\u3002\u5f53\u7528\u6237\u63d0\u4ea4\u95ee\u9898\u65f6\uff0c\u673a\u5668\u4eba\u9996\u5148\u9700\u8981\u5224\u522b\u7528\u6237\u7684\u95ee\u9898\u5c5e\u4e8e\u54ea\u4e2a\u7c7b\u522b\uff0c\u7136\u540e\u5728\u76f8\u5e94\u7684\u7c7b\u522b\u91cc\u9762\u751f\u6210\u8f83\u4e3a\u51c6\u786e\u7684\u56de\u7b54\u7ed9\u5ba2\u6237\u3002<br\/>\n\u5e38\u89c1\u7684\u667a\u80fd\u8bed\u97f3\u97f3\u7bb1\uff0c\u5f80\u5f80\u4e5f\u662f\u6839\u636e\u7528\u6237\u7684\u95ee\u9898\u9996\u5148\u8fdb\u884c\u610f\u56fe\u8bc6\u522b\uff0c\u7136\u540e\u518d\u751f\u6210\u8f83\u4e3a\u51c6\u786e\u7684\u56de\u7b54\u3002","ef0bda9c":"\u901a\u8fc7\u6df7\u6dc6\u77e9\u9635\u5bf9\u5404\u4e2a\u7c7b\u522b\u505a\u5fae\u89c2\u89c2\u5bdf","7267b83a":"\u521b\u5efa\u6a21\u578b\u3002\u6ce8\u610f\u91c7\u7528\u4e86TPU\u7b56\u7565\u6a21\u5f0f\u3002","90047ef1":"\u8bed\u97f3\u8bc6\u522b\u63a7\u5236\u6d41\u7a0b\u5206\u6790\u5982\u56fe2\u6240\u793a\u3002\n![image.png](attachment:f7548a6f-ba12-4062-804e-63f0143de9cf.png)","3a0b5e39":"\u8fd9\u662f\u6807\u7b7e\u7684\u6837\u5b50\uff0c7\u4e2a\u7c7b\u522b\uff0c\u6545\u6807\u7b7e\u53d6\u503c0-6","789cd4cc":"\u89c2\u5bdf\u6a21\u578b\u5206\u522b\u5728\u8bad\u7ec3\u96c6\u548c\u6d4b\u8bd5\u96c6\u4e0a\u7ed9\u51fa\u7684\u7efc\u5408\u51c6\u786e\u7387\u7ed3\u679c","8d7dee4f":"\u6ce8\u610f\u770b\uff0cBERT\u6a21\u578b\u7684\u8f93\u51fa\u7ef4\u5ea6\u4e3a\uff1a(None, 54, 768)","1024c30d":"#### \u672c\u6848\u4f8b\u5c06\u57fa\u4e8eBERT\u82f1\u6587\u9884\u8bad\u7ec3\u6a21\u578b\u5bf9\u6570\u636e\u96c6\u4e2d\u7684\u95ee\u9898\u8fdb\u884c\u8fc1\u79fb\u5b66\u4e60\u8bad\u7ec3\u3002\u5982\u679c\u662f\u4e2d\u6587\u6570\u636e\u96c6\uff0c\u8bf7\u6362\u6210BERT\u4e2d\u6587\u9884\u8bad\u7ec3\u6a21\u578b\u5373\u53ef\u3002\n#### \u6570\u636e\u96c6\u4e2d\u5305\u542b7\u79cd\u610f\u56fe\u7c7b\u522b\uff1a\n\u2022 GetWeather (\u5173\u4e8e\u5929\u6c14\u7c7b\u578b\u7684\u95ee\u9898)<br\/>\n\u2022 BookRestaurant (\u5173\u4e8e\u5403\u996d\u8ba2\u9910\u7684\u95ee\u9898)<br\/>\n\u2022 PlayMusic (\u4e0e\u97f3\u4e50\u64ad\u653e\u76f8\u5173\u7684\u95ee\u9898)<br\/>\n\u2022 AddToPlaylist (\u52a0\u5165\u5230\u64ad\u653e\u5217\u8868)<br\/>\n\u2022 RateBook (\u7ed9\u56fe\u4e66\u8bc4\u5206\u6216\u8bc4\u7ea7)<br\/>\n\u2022 SearchScreeningEvent (\u4e0e\u7535\u5f71\u76f8\u5173\u7684\u8bdd\u9898)<br\/>\n\u2022 SearchCreativeWork\uff08\u521b\u610f\u7c7b\u76f8\u5173\u8bdd\u9898\uff09<br\/>","ce9ac73a":"\u89c2\u5bdf\u65b0\u8bad\u7ec3\u96c6\u7684\u7ef4\u5ea6","577cc3a9":"\u89c2\u5bdf\u8bad\u7ec3\u96c6\u524d\u4e94\u6761\u8bb0\u5f55","600075f0":"\u672c\u9879\u76ee\u91c7\u7528TPU\u8bad\u7ec3\u6a21\u5f0f\uff0c\u4e0b\u9762\u7684\u4ee3\u7801\u7528\u4e8e\u68c0\u6d4bTPU\u3002","7aadb7c4":"\u5b89\u88c5\u57fa\u4e8eTensorFlow2\u7684BERT\u6a21\u578b\u5e93","1bca69d7":"## 3 \u6a21\u578b\u8bad\u7ec3","a2874c51":"BERT\u6a21\u578b\u76ee\u5f55\u3001\u914d\u7f6e\u6587\u4ef6\u3001\u6a21\u578b\u8bcd\u5178","e3a561d1":"\u663e\u7136\uff0c7\u79cd\u610f\u56fe\u7684\u6837\u672c\u5206\u5e03\u76f8\u5bf9\u5747\u8861"}}