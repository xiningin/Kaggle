{"cell_type":{"174fb61a":"code","f9847bc4":"code","380b564e":"code","194c89e7":"code","87f02f2c":"code","bcdcbaea":"code","8ad63201":"code","98b16548":"code","6b20dc71":"code","5dc6a9ab":"code","01df0bb5":"code","7deefc3f":"code","317a6338":"code","75c91c09":"code","6b4e89e3":"code","02554018":"code","2091d893":"code","3d3a5130":"code","7adc28d9":"code","cb979a94":"code","67350551":"code","bf59c540":"markdown","150fb13c":"markdown","98c6b932":"markdown","d68e6d87":"markdown","c24c1637":"markdown","bb72356a":"markdown","9c73cde4":"markdown","30c5604c":"markdown","18f95d2d":"markdown","a10c2560":"markdown","ee74b68b":"markdown","94609abb":"markdown","d1ced932":"markdown","afbb6677":"markdown","254b116f":"markdown","2ec54d5d":"markdown"},"source":{"174fb61a":"import numpy as np \nimport pandas as pd\n\nfrom sklearn.metrics import mean_squared_error\nfrom sklearn.model_selection import train_test_split\nfrom xgboost import XGBRegressor\nfrom catboost import CatBoostRegressor\n\n%matplotlib inline","f9847bc4":"import os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))","380b564e":"dataset = pd.read_csv(\"..\/input\/santander-value-prediction-challenge\/train.csv\")\ndataset.shape","194c89e7":"dataset.head(5)","87f02f2c":"dataset.describe()","bcdcbaea":"dataset.isnull().sum()","8ad63201":"dataset.dtypes","98b16548":"dataset.dtypes.value_counts()","6b20dc71":"columns = dataset.std() == 0\nconst_columns = columns.iloc[[i for i, x in enumerate(columns) if x]]\ndataset.drop(const_columns.index, axis = 1, inplace = True)","5dc6a9ab":"def drop_sparse(train):\n    sparse_columns = []\n    flist = dataset.columns[2:]\n    for f in flist:\n        if len(np.unique(train[f]))<2:\n            sparse_columns.append(f)\n    return sparse_columns\n\nsparse_columns = drop_sparse(dataset)\ndataset.drop(sparse_columns, axis = 1, inplace = True)","01df0bb5":"def duplicate_columns(dataset):\n    groups = dataset.columns.to_series().groupby(dataset.dtypes).groups\n    my_dict = {}\n    duplicate_features = []\n    \n    for d_type, columns in groups.items():\n        columns_group = dataset[columns]\n        list_of_column_names = dataset[columns].columns\n        length = len(columns)\n        \n        for i in range(length):\n            a = tuple(columns_group.iloc[:, i])\n            if a in my_dict:\n                duplicate_features.append(list_of_column_names[i])\n            else:\n                my_dict[a] = list_of_column_names[i]\n            \n    return duplicate_features\n\nduplicate_features = duplicate_columns(dataset)\ndataset.drop(sparse_columns, axis = 1, inplace = True)","7deefc3f":"dataset = dataset.drop(['ID'], axis = 1)\nX = dataset.iloc[:,1:]       \nY = dataset.iloc[:,0]  ","317a6338":"x_train, x_test, y_train, y_test = train_test_split(X, Y, test_size=0.21, random_state=42)","75c91c09":"xb_model = XGBRegressor(colsample_bytree=0.055, colsample_bylevel =0.5, \n                             gamma=1.5, learning_rate=0.01, max_depth=32, \n                             objective='reg:linear',booster='gbtree',\n                             min_child_weight=57, n_estimators=800, reg_alpha=0, \n                             reg_lambda = 0,eval_metric = 'rmse', subsample=0.7, \n                             silent=1, n_jobs = -1, early_stopping_rounds = 14,\n                             random_state =7, nthread = -1)\nxb_model.fit(x_train, y_train,\n             eval_set=[(x_test, y_test)], verbose=False)","6b4e89e3":"# Predicting the values form the test_set\ny_pred = xb_model.predict(x_test)\n\n# the root-mean squared error for predictions\nrmse = np.sqrt(mean_squared_error(y_test, y_pred))\nrmse","02554018":"# Comparing the predictions rmse with benchmark rmse\ny_mean = [y_test.mean()] * y_test.shape[0]\n\nrmse_benchmarch = np.sqrt(mean_squared_error(y_mean, y_pred))\nprint(rmse_benchmarch)","2091d893":"# Loading the test dataset for predicting the target feature\ntest_dataset = pd.read_csv(\"..\/input\/santander-value-prediction-challenge\/test.csv\")\ntest_id_s = test_dataset['ID']\ntest_dataset = test_dataset[dataset.columns[1:]]\ntest_pred_xgb = xb_model.predict(test_dataset)\ntest_pred_xgb = np.clip(test_pred_xgb, 1, float('inf'))","3d3a5130":"cb_model = CatBoostRegressor(iterations=1000,\n                             learning_rate=0.05,\n                             depth=10,\n                             eval_metric='RMSE',\n                             random_seed = 42,\n                             bagging_temperature = 0.2,\n                             od_type='Iter',\n                             metric_period = 50,\n                             od_wait=20)","7adc28d9":"cb_model.fit(x_train, y_train,\n             eval_set=(x_test, y_test),\n             use_best_model=True,\n             verbose=50)","cb979a94":"test_pred_cb = cb_model.predict(test_dataset)\ntest_pred_cb = np.clip(test_pred_cb, 0, float('inf'))","67350551":"final_preds = (test_pred_xgb * 0.5 + test_pred_cb * 0.3)\npred_df = pd.DataFrame({'ID':test_id_s, 'target': final_preds})\npred_df.to_csv(\"submission.csv\", float_format=\"%.10g\", index = False)","bf59c540":"## Model Training","150fb13c":"### Checking the directories of the datasets available","98c6b932":"### Removing duplicate columns","d68e6d87":"### Checking the null values in the data","c24c1637":"## Importing data and required libraries","bb72356a":"### Importing necessary libraries","9c73cde4":"### Statistics of the data","30c5604c":"### Removing sparse columns","18f95d2d":"### Importing the dataset","a10c2560":"### Listing all the datatypes used in the dataset","ee74b68b":"### Checking the data type of the columns","94609abb":"### Printing the first five records","d1ced932":"### CatBoost","afbb6677":"### XGBoost","254b116f":"## Data Exploration","2ec54d5d":"### Removing constant columns"}}