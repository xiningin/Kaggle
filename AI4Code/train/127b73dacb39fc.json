{"cell_type":{"e7a39ce6":"code","0159bfd5":"code","fcfb648f":"code","259636fd":"code","2e9780b0":"code","18eaa1cf":"code","f1917c86":"code","9c428b98":"markdown","3291f7ca":"markdown","95a07749":"markdown","e8bad61d":"markdown","f3121e91":"markdown","53065ef0":"markdown","1a213f3d":"markdown","71057fbb":"markdown","97145ae3":"markdown","c80dc7ef":"markdown","01c7409a":"markdown","4fc431fa":"markdown","2bbcd979":"markdown","83d40cbe":"markdown","3334232b":"markdown","8f87b272":"markdown","e37b30d8":"markdown"},"source":{"e7a39ce6":"import numpy as np \nimport pandas as pd \n\nfrom path import Path\nimport os\nfrom functools import partial\n\nfrom ipywidgets import interact, interact_manual, fixed\nfrom IPython.display import display\n\nimport cufflinks as cf\nimport matplotlib.pyplot as plt\n\nfrom sklearn.linear_model import LinearRegression\nfrom scipy.integrate import odeint, solve_ivp","0159bfd5":"pd.set_option('display.max_rows', 500)\npd.set_option('use_inf_as_na', True)\ncf.set_config_file(offline=True, theme='solar');","fcfb648f":"def solve_I(\u03b2, \u0263, N, I, S):\n\n    dI_dt = \u03b2*(I\/N)*S - \u0263*I\n    return dI_dt","259636fd":"def solve_S(\u03b2, N, I, S):\n\n    dS_dt = - \u03b2*(I\/N)*S\n    return dS_dt","2e9780b0":"def solve_R(\u0263, I):\n    dR_dt = \u0263*I\n    return dR_dt","18eaa1cf":"def sir_model(\u03b2, \u0263, N, t, Y):\n    \n    I, S, R = Y\n    dS_dt = - \u03b2*(I\/N)*S\n    dR_dt = \u0263*I\n    dI_dt = - dS_dt - dR_dt\n    \n    return [dI_dt, dS_dt, dR_dt]","f1917c86":"@ interact(\u03b2=(0.0, 1., 0.01), \u0263=(0.01, 1., 0.01))\ndef sir_play(\u03b2=0.15, \u0263=0.15):\n    \n    \n    N = 10_000\n    I0 = 10\n    R0 = 0\n    S0 = N - I0 - R0\n    \n    t = np.linspace(0, 90, 180)\n    \n#     I = odeint(func=partial(sir_model, \u03b2, \u0263, N), y0=[I0, S0, R0], t=t, tfirst=True)\n    I = solve_ivp(fun=partial(sir_model, \u03b2, \u0263, N), y0=[I0, S0, R0], t_eval=t, t_span=(0, len(t))).y.T\n\n    print(f\"Reproduction Rate is {\u03b2\/\u0263}\")\n    pd.DataFrame(index=t, data=I, columns=['I', 'S', 'R']).iplot(y=['I', 'R'], secondary_y=['S'])","9c428b98":"Simplifying the equation by assuming: \n\n* $\\beta = P_{spread}*P_{contact}$\n* $\\gamma = P_{recover}$\n\nThe equation reduces to :\n\n\n$$\n\\begin{equation}\nI_{t+1} = I_{t} + \\beta*(\\frac{I_{t}}{N}) * S_{t} - \\gamma*I_{t} \n\\end{equation}\n$$","3291f7ca":"Let's understand every component of the RHS\n\n\n$$ \n\\begin{equation}\nI_{t+1} = \\overbrace{I_{t}}^{I_{t}} + \\overbrace{P_{contact} * P_{spread} * \\frac{I_{t}}{N} * S_{t}}^{S_{t-1} - S_{t}} - \\overbrace{P_{recover} * I_{t}}^{R_{t}}\n\\end{equation}\n$$\n\nwhere, \n* $I_{t}$ is the number of infected people at time $t$\n\n* $N$ is the total population of the region. For a closed population SIR model $\\forall{t}: N = S_{t} + I_{t} + R_{t}$  \n\n* $S_{t}$ is the number of susceptible people at time $t$\n\n* $P_{contact}$ is the probability that a suspectible person contacts an infected person\n\n* $P_{spread}$ is the probability that a suspectible person gets infected (after contact)\n\n* $P_{recover}$ is the probability of an infected person recovering (or dying)","95a07749":"## Increase in Infected People\n\n\n$$ \n\\begin{equation}\nI_{t+1} = I_{t} + P_{contact} * P_{spread} * \\frac{I_{t}}{N} * S_{t} - P_{recover} * I_{t}\n\\end{equation}\n$$","e8bad61d":"# Things you can try:\n\n1. The biggest drawback of SIR model is that a 'recovered' patient can either be healthy (alive after infection) or dead -_-.\n\n    Try building SIR-D model, in which an infected person can move from infected to dead too\n\n    *Hint*:\n    Add a parameter $\\delta$ to account for the death rate\n    \n    \n2. Play with values of $\\beta$, $\\gamma$ and see what happens when reproduction rate is < 1 or = 1 or > 1. ","f3121e91":"#### To play around with interactive widgets, *Fork* the notebook!","53065ef0":"After every unit of time passes, some susceptible people go from $S \\longrightarrow I$, hence reducing $S$' population. This decrement is given by,\n\n$ S_{t+1} = S_{t} - \\beta*(\\frac{I_{t}}{N}) * S_{t}$\n\n$ \\implies S_{t+1} - S_{t} =  - \\beta*(\\frac{I_{t}}{N}) * S_{t}$\n\n\nDividing both sides by $\\Delta t = (t + 1) - t = 1 $:\n\n$\\implies \\frac{dS_{t}}{dt} =  - \\beta*(\\frac{I_{t}}{N}) * S_{t} $\n","1a213f3d":"## Differential equation for $I_{t}$","71057fbb":"## Differential equation for $R_{t}$\n\nAfter every unit of time passes, some infected people go from $I \\longrightarrow R$, hence increasing $R$'s population. This increment is given by,\n\n$ R_{t+1} = R_{t} + \\gamma * I_{t} $\n\n$\\implies R_{t+1} - R_{t} = \\gamma * I_{t} $\n\nDividing both sides by $\\Delta t = (t + 1) - t = 1 $:\n\n$\\implies \\frac{dR_{t}}{dt} = \\gamma * I_{t}  $\n\n","97145ae3":"## Significance of $\\beta$ and $\\gamma$","c80dc7ef":"Furthermore,\n\n1. Reproduction Rate: $R_{0} = \\frac{\\beta}{\\gamma}$  \n2. Vaccination Threshold: $V_{0} > 1 - \\frac{1}{R_{0}}$ ","01c7409a":"*T.D.*","4fc431fa":"# SIR Model","2bbcd979":"# Complete Model","83d40cbe":"This simple visualistion tells how the SIR model is assigning people to different groups","3334232b":"$\\implies I_{t+1} - I_{t} = \\beta*(\\frac{I_{t}}{N}) * S_{t} - \\gamma*I_{t} $\n\n$\\implies I_{t+\\Delta t} - I_{t} = \\beta*\\Delta t*(\\frac{I_{t}}{N}) * S_{t} - \\gamma*\\Delta t*I_{t} $\n\nDividing both sides by $\\Delta t $:\n\n$\\implies \\frac{I_{t+1} - I_{t}}{\\Delta t} = \\frac{\\beta*\\Delta t*(\\frac{I_{t}}{N}) * S_{t} - \\gamma*\\Delta t*I_{t}}{\\Delta t} $\n\n$\\implies \\frac{dI_{t}}{dt} = \\beta*(\\frac{I_{t}}{N}) * S_{t} - \\gamma*I_{t} $\n\n$\\implies I_{t}' = \\beta*(\\frac{I_{t}}{N}) * S_{t} - \\gamma*I_{t} $\n\n","8f87b272":"![SIR Model](https:\/\/media.springernature.com\/full\/springer-static\/image\/art%3A10.1038%2Fsrep46076\/MediaObjects\/41598_2017_Article_BFsrep46076_Fig1_HTML.jpg)","e37b30d8":"## Differential equation for $S_{t}$"}}