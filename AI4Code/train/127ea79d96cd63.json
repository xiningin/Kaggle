{"cell_type":{"7413ff90":"code","00f1b526":"code","f01a199e":"code","4149de74":"code","d1065044":"code","27234224":"code","99f3526f":"code","9673d166":"code","7c76d627":"code","574ffcc8":"code","e1f04746":"code","57ae0f72":"code","b9f04c7d":"code","df88b118":"code","c38980bf":"code","77bc704b":"code","bf24366d":"code","78f79d40":"code","61d54b06":"code","2318e96e":"code","c0758f6e":"code","1661ecf2":"code","8e976623":"code","6950488f":"code","e2ecc19c":"code","c2b0a6d8":"code","e58fbd64":"code","d4db545b":"code","08a8eb52":"code","dfd06da4":"code","733795d8":"code","be8292d9":"code","68967402":"code","947db223":"code","6809567f":"code","5e90e258":"code","ff8c9f45":"code","6fc83ffd":"markdown"},"source":{"7413ff90":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\n%matplotlib inline","00f1b526":"train = pd.read_csv('..\/input\/janatahack-customer-segmentation\/Train.csv')\ntest = pd.read_csv('..\/input\/janatahack-customer-segmentation\/Test.csv')\ntrain.head()","f01a199e":"combine = train.append(test)\ncombine.shape","4149de74":"combine.columns","d1065044":"combine.isnull().sum()","27234224":"combine['Week'] = combine['ID'] % 7\ncombine['Month'] = combine['ID'] % 30\ncombine['Year'] = combine['ID'] % 365\ncombine['Quarter'] = combine['ID'] % 90\n\ncombine['NWeeks'] = combine['ID'] \/\/ 7\ncombine['NYear'] = combine['ID'] \/\/ 365\ncombine['NQuarter'] = combine['ID'] \/\/ 90\ncombine['NMonth'] = combine['ID'] \/\/ 30\n\ncombine.head()","99f3526f":"combine['Gender'].value_counts()","9673d166":"combine['Ever_Married'].value_counts()","7c76d627":"combine['Ever_Married'].fillna('Unknown', inplace=True)\ncombine['Ever_Married'].value_counts()","574ffcc8":"combine['Age'].describe()","e1f04746":"bins= [17,30,40,50,60,90]\nlabels = ['Age_Tier1','Age_Tier2','Age_Tier3','Age_Tier4', 'Age_Tier5']\ncombine['Age'] = pd.cut(combine['Age'], bins=bins, labels=labels, right=False)\ncombine['Age'].value_counts()","57ae0f72":"combine['Graduated'].value_counts()","b9f04c7d":"combine['Graduated'].fillna('Unknown', inplace=True)\ncombine['Graduated'].value_counts()","df88b118":"combine['Profession'].value_counts()","c38980bf":"combine['Profession'].fillna('Unknown', inplace=True)\ncombine['Profession'].value_counts()","77bc704b":"combine['Work_Experience'].describe()","bf24366d":"combine['Work_Experience'].fillna(-1, inplace=True)\nbins= [-1, 0, 3, 6, 9, 12, 15]\nlabels = [6, 5, 4, 3, 2, 1]\ncombine['Work_Experience'] = pd.cut(combine['Work_Experience'], bins=bins, labels=labels, right=False)\ncombine['Work_Experience'].value_counts()","78f79d40":"combine['Spending_Score'].value_counts()","61d54b06":"combine['Family_Size'].describe()","2318e96e":"def get_family(years):\n    switcher = {\n        1: \"F1\",\n        2: \"F2\",\n        3: \"F3\",\n        4: \"F4\",\n        5: \"F5\",\n        6: \"F6\",\n        7: \"F7\",\n        8: \"F8\",\n    }\n    return (switcher.get(years,\"F9\"))\n\ncombine['Family_Size'] = combine['Family_Size'].apply(lambda x: get_family(x))\ncombine['Family_Size'].value_counts()","c0758f6e":"combine['Var_1'].value_counts()","1661ecf2":"combine['Var_1'].fillna('Unknown', inplace=True)\ncombine['Var_1'].value_counts()","8e976623":"combine.isnull().sum()","6950488f":"train_cleaned = combine[combine['Segmentation'].isnull()!=True].drop(['ID'], axis=1)","e2ecc19c":"train_cleaned.columns","c2b0a6d8":"Gender = pd.crosstab(train_cleaned['Gender'], train_cleaned['Segmentation'])\nEver_Married = pd.crosstab(train_cleaned['Ever_Married'], train_cleaned['Segmentation'])\nAge = pd.crosstab(train_cleaned['Age'], train_cleaned['Segmentation'])\nGraduated = pd.crosstab(train_cleaned['Graduated'], train_cleaned['Segmentation'])\nProfession = pd.crosstab(train_cleaned['Profession'], train_cleaned['Segmentation'])\nWork_Experience = pd.crosstab(train_cleaned['Work_Experience'], train_cleaned['Segmentation'])\nSpending_Score = pd.crosstab(train_cleaned['Spending_Score'], train_cleaned['Segmentation'])\nVar_1 = pd.crosstab(train_cleaned['Var_1'], train_cleaned['Segmentation'])\n\n\n\nGender.plot(kind=\"bar\", figsize=(4, 4))\nEver_Married.plot(kind=\"bar\", figsize=(4, 4))\nAge.plot(kind=\"bar\", figsize=(4, 4))\nGraduated.plot(kind=\"bar\", figsize=(4, 4))\nProfession.plot(kind=\"bar\", figsize=(4, 4))\nWork_Experience.plot(kind=\"bar\", figsize=(4, 4))\nSpending_Score.plot(kind=\"bar\", figsize=(4, 4))\nVar_1.plot(kind=\"bar\", figsize=(4, 4))\n\nplt.show()","e58fbd64":"segmentation = {'A':1, 'B':2, 'C':3, 'D':4}\ncombine['Segmentation'] = combine['Segmentation'].apply(lambda x: segmentation.get(x))","d4db545b":"from sklearn.preprocessing import LabelEncoder\n\ncat_cols = ['Gender', 'Ever_Married', 'Spending_Score', 'Var_1', 'Age', \n            'Family_Size', 'Profession', 'Graduated']\n\nencoder = LabelEncoder()\nfor col in cat_cols:\n    combine[col] = encoder.fit_transform(combine[col])\n#combine = pd.get_dummies(combine)\ncombine.shape","08a8eb52":"X = combine[combine['Segmentation'].isnull()!=True].drop(['ID','Segmentation'], axis=1)\ny = combine[combine['Segmentation'].isnull()!=True]['Segmentation']\n\nX_test = combine[combine['Segmentation'].isnull()==True].drop(['ID','Segmentation'], axis=1)\n\nX.shape, y.shape, X_test.shape","dfd06da4":"X.head()","733795d8":"from sklearn.model_selection import train_test_split\nx_train, x_val, y_train, y_val = train_test_split(X, y, test_size=0.2)","be8292d9":"from sklearn.ensemble import ExtraTreesClassifier, RandomForestClassifier\nfrom sklearn.metrics import confusion_matrix, accuracy_score\nfrom xgboost import XGBClassifier\nfrom lightgbm import LGBMClassifier","68967402":"model = LGBMClassifier(n_estimators=5000,\n                       max_depth = 20,\n                       max_features=0.85,\n                       learning_rate=1.1)\nmodel.fit(x_train, y_train)","947db223":"pred_val = model.predict(x_val)\naccuracy_score(y_val, pred_val)","6809567f":"confusion_matrix(y_val, pred_val)","5e90e258":"segmentation = {1:'A', 2:'B', 3:'C', 4:'D'}\nsubmission = pd.DataFrame()\nsubmission['ID'] = test['ID']\nsubmission['Segmentation'] = [segmentation.get(x) for x in model.predict(X_test)]\nsubmission.head()","ff8c9f45":"submission.to_csv('submission.csv', index=False)","6fc83ffd":"Github Link: https:\/\/github.com\/bilalProgTech\/online-data-science-ml-challenges\/tree\/master\/AV-JanataHack-Customer-Segmentation"}}