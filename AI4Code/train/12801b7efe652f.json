{"cell_type":{"77436fec":"code","af42c1aa":"code","38204642":"code","409712d4":"code","f87f9e34":"code","75c2d09c":"code","26bf3eea":"code","60d9d694":"code","cbc1103f":"code","a70212ba":"code","aefe0914":"code","3f757f85":"code","df216c92":"code","fdeda439":"code","cf3da7b5":"code","d2bf0e8c":"code","ff52702b":"code","b9377238":"code","fada51cb":"code","cd3014de":"code","48069112":"code","fab0ce08":"code","63f6e083":"markdown","0ab73980":"markdown","2224bd22":"markdown","a7e08206":"markdown"},"source":{"77436fec":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","af42c1aa":"# TensorFlow e tf.keras\nimport tensorflow as tf\nfrom tensorflow import keras\n\n# Librariesauxiliares\nimport numpy as np\nimport matplotlib.pyplot as plt","38204642":"df = pd.read_csv('\/kaggle\/input\/currency-symbol-datasets\/datasets.csv')","409712d4":"def eda(dfA, all=False, desc='Exploratory Data Analysis'):\n    print(desc)\n    print(f'\\nShape:\\n{dfA.shape}')\n    print(f'\\nIs Null: {dfA.isnull().sum().sum()}')\n    print(f'{dfA.isnull().mean().sort_values(ascending=False)}')\n    dup = dfA.duplicated()\n    print(f'\\nDuplicated: \\n{dfA[dup].shape}\\n')\n    try:\n        print(dfA[dfA.duplicated(keep=False)].sample(4))\n    except:\n        pass\n    if all:  # here you put yours prefered analysis that detail more your dataset\n\n        print(f'\\nDTypes - Numerics')\n        print(dfA.describe(include=[np.number]))\n        print(f'\\nDTypes - Categoricals')\n        print(dfA.describe(include=['object']))\n\n        # print(df.loc[:, df.dtypes=='object'].columns)\n        print(f'\\nHead:\\n{dfA.head()}')\n        print(f'\\nSamples:\\n{dfA.sample(2)}')\n        print(f'\\nTail:\\n{dfA.tail()}')","f87f9e34":"eda(df)","75c2d09c":"df.sample(5)","26bf3eea":"varFeat = df.iloc[:, 1:].columns.tolist()\nvarT = 'label'","60d9d694":"targetNames = df.label.unique().tolist()\ntargetNames","cbc1103f":"dataset = df[varFeat]\ndataset['target'] = df.label.apply(lambda x: targetNames.index(x))","a70212ba":"dataset.sample()","aefe0914":"from sklearn.model_selection import train_test_split","3f757f85":"X = dataset[varFeat]\ny = dataset.target\nXtrain, Xtest, ytrain, ytest = train_test_split(X, y, test_size=0.3, random_state=42)","df216c92":"Xtrain.shape, ytrain.shape, Xtest.shape, ytest.shape","fdeda439":"train_images = []\nfor i in range(0,len(Xtrain)):\n    x = np.array(Xtrain.iloc[i].values)\n    x = x.reshape(64,64)\n    train_images.append(x)\ntrain_images = np.asarray(train_images) ","cf3da7b5":"plt.figure(figsize=(10,10))\nfor i in range(0,50):\n    plt.subplot(5,10,i+1)\n    plt.xticks([])\n    plt.yticks([])\n    plt.grid(False)\n    plt.imshow(train_images[i], cmap=plt.cm.binary)\n#     print(ytrain.iloc[i])\n    plt.xlabel(ytrain.iloc[i])\nplt.show()","d2bf0e8c":"test_images = []\nfor i in range(0,len(Xtest)):\n    x = np.array(Xtest.iloc[i].values)\n    x = x.reshape(64,64)\n    test_images.append(x)\ntest_images = np.asarray(test_images) ","ff52702b":"plt.figure(figsize=(10,10))\nfor i in range(0,50):\n    plt.subplot(5,10,i+1)\n    plt.xticks([])\n    plt.yticks([])\n    plt.grid(False)\n    plt.imshow(test_images[i], cmap=plt.cm.binary)\n    plt.xlabel(ytest.iloc[i])\nplt.show()","b9377238":"model = keras.Sequential([\n    keras.layers.Flatten(input_shape=(64, 64)),\n    keras.layers.Dense(256, activation='relu'),\n    keras.layers.Dense(10, activation='softmax')\n])\n\nmodel.compile(optimizer='adam',\n              loss='sparse_categorical_crossentropy',\n              metrics=['accuracy'])","fada51cb":"model.fit(train_images, ytrain, epochs=10)","cd3014de":"predictions = model.predict(Xtest)","48069112":"for i in range(0,12):\n    print(np.argmax(predictions[i]), targetNames[np.argmax(predictions[i])])","fab0ce08":"plt.figure(figsize=(10,10))\nfor i in range(50):\n    plt.subplot(5,10,i+1)\n    plt.xticks([])\n    plt.yticks([])\n    plt.grid(False)\n    plt.imshow(test_images[i], cmap=plt.cm.binary)\n    plt.xlabel(targetNames[np.argmax(predictions[i])])\nplt.show()","63f6e083":"# **Test Set**","0ab73980":"# **Training - Keras**","2224bd22":"# **Prediction**","a7e08206":"# **Train Set**"}}