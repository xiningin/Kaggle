{"cell_type":{"30250204":"code","4ae88b29":"code","f96b5d8f":"code","970b183d":"code","db12e2e2":"code","bbb9835e":"code","3e20ce4f":"code","b5524695":"code","0c4e43d5":"code","e30e7bae":"code","1e78fe1a":"code","9d332374":"code","9300c08c":"code","582032ba":"code","3c8f356c":"code","2818c36f":"code","e5e0be50":"code","5aa96683":"code","f1dbda5a":"code","b86a32c8":"code","cc0f6a96":"code","9c4007ef":"code","6dca2f45":"code","34322b11":"code","07e1c17f":"code","eba1454c":"code","3281ef42":"code","4e058e96":"code","dff5a475":"code","0eaeb2ee":"code","2f7a971e":"code","4ad2885b":"code","1853e34d":"code","055aa706":"code","287e4f05":"code","d465a040":"code","e81e4a08":"code","68aa8bbf":"code","00ea66f1":"code","91907875":"code","f47340c5":"code","3124aa9e":"code","0e61bd73":"code","fdd4af56":"code","4d22755c":"code","a17c32d7":"code","81a70ecf":"code","0e70c557":"code","5eb1ef24":"code","12b98749":"code","d3bc0e5a":"code","4f788050":"code","b09138b7":"code","ae24136d":"code","66055845":"code","08880cb3":"code","1fe6f75c":"code","d49d4789":"code","75c77e36":"code","dbabc760":"code","08885d15":"code","4d017981":"code","db498b67":"code","6c4ce06e":"code","ab48dc3b":"code","3e826c7e":"code","533130f9":"code","c7894c41":"code","a9921484":"code","0c4b6c13":"code","36cb0093":"code","bb0827cb":"code","dd3b9c0c":"code","50b4fe49":"code","32cb6a01":"code","0bafe952":"code","cf3db734":"code","d07ec3a3":"code","dd0db297":"code","49553032":"code","94b621e4":"code","a8ce7cb2":"code","ec0bce04":"code","0a5b09f7":"code","bc136747":"code","8211425e":"code","bf53b6be":"code","1f3265fb":"code","a6335ad5":"code","60b91c47":"code","41b97683":"code","a28e604b":"code","676b13ba":"code","f41e6f6a":"code","7c1704af":"code","90cd4855":"code","5a900681":"code","871c1ebe":"code","c05068b8":"code","53b6f09c":"code","44494e38":"code","31979845":"code","b5bc01fd":"code","c601aec5":"code","825e0d2d":"code","b468feaa":"code","087fb4d8":"code","d21b3eda":"code","6f6b2865":"code","0bcb01f0":"markdown","a42aca9b":"markdown","994b5afb":"markdown","8b2a6a9e":"markdown","3cc96b59":"markdown","a9f16b5f":"markdown","dd224ad1":"markdown","f1b7b07a":"markdown","b7594e8a":"markdown","df4a4c31":"markdown","81ac4f6b":"markdown","98903b68":"markdown","2e459af7":"markdown","ee175f4c":"markdown","c789d495":"markdown","0ce25947":"markdown","43dd5eb0":"markdown","f0750981":"markdown","e40c11a0":"markdown","022350d2":"markdown","46ed2d69":"markdown","5098644f":"markdown","b1957d86":"markdown","4eb2e133":"markdown","7f0d3421":"markdown","ed2760c1":"markdown","d7bca96c":"markdown","31f08c08":"markdown","c4a31ec3":"markdown","6712f002":"markdown","93bdf664":"markdown","f21bcceb":"markdown","7198ec64":"markdown","655cbad4":"markdown","611e1a9c":"markdown","e2a8d8cb":"markdown","dac1da05":"markdown","3458f92d":"markdown","cdc6d1a7":"markdown","3d86fc70":"markdown","dde830c9":"markdown","3d613b59":"markdown","1828cdcf":"markdown","105839d4":"markdown","aaa92b02":"markdown","a5b5e11a":"markdown","b18afda9":"markdown","85c12230":"markdown","0e43c9cd":"markdown","8b02f423":"markdown","cbae996b":"markdown","2a9b15a1":"markdown","dc0018cf":"markdown","0791568d":"markdown","d7e62d0a":"markdown","e412ae78":"markdown","f94b4793":"markdown"},"source":{"30250204":"import os\nimport pandas as pd\nimport seaborn as sns\n\n%pylab inline\n\npd.set_option('display.max_columns', 200)\npd.set_option('display.max_rows', 1000)","4ae88b29":"def count_words(df, colonne):\n    list_words = set()\n    for word in df[colonne].str.split(','):\n        if isinstance(word, float): continue\n        list_words = set().union(word, list_words)       \n    print(\"Nb of categories in '{}': {}\".format(colonne, len(list_words)))\n    return list(list_words)\n\n# calcul du taux de remplissage\ndef filling_factor(df):\n  missing_df = df.isnull().sum(axis=0).reset_index()\n  missing_df.columns = ['column_name', 'missing_count']\n  missing_df['filling_factor'] = (df.shape[0]-missing_df['missing_count'])\/df.shape[0]*100\n  missing_df = missing_df.sort_values('filling_factor').reset_index(drop = True)\n  return missing_df","f96b5d8f":"print('Python Version: ' + sys.version)\nprint('Matplotlib Version: ' + mpl.__version__)\nprint('NumPy Version: ' + np.version.full_version)","970b183d":"for dirname, _, filenames in os.walk('..\/input\/sea-building-energy-benchmarking'):\n    for filename in filenames:\n        print(filename)\n","db12e2e2":"fichier_2015='..\/input\/sea-building-energy-benchmarking\/2015-building-energy-benchmarking.csv'\ndf_2015 = pd.read_csv(fichier_2015)\ndf_2015.info()","bbb9835e":"fichier_2016='..\/input\/sea-building-energy-benchmarking\/2016-building-energy-benchmarking.csv'\ndf_2016 = pd.read_csv(fichier_2016)\ndf_2016.info()","3e20ce4f":"list_1 = list(df_2015.columns) \nlist_2 = list(df_2016.columns)\n\ndef comp_col(list_1, list_2):\n  return list_1 == list_2\n\nprint(comp_col(list_1, list_2))","b5524695":"def comp_col(list_1, list_2):\n  dif_list_1_list_2 = list(set(list_1) - set(list_2))\n  dif_list_2_list_1 = list(set(list_2) - set(list_1))\n  return dif_list_1_list_2 , dif_list_2_list_1\n\nprint(\"Les colonnes pr\u00e9sentes dans le fichier 2015 et absentes du fichier 2016 sont :\")\ncomp_col(list_1, list_2)[0]","0c4e43d5":"print(\"Les colonnes pr\u00e9sentes dans le fichier 2016 et absentes du fichier 2015 sont :\")\ncomp_col(list_1, list_2)[1]","e30e7bae":"df_2015['Location'][0]","1e78fe1a":"import ast\ndf_2015['Location'] = [ast.literal_eval(str(item)) for index, item in df_2015.Location.iteritems()]\ndf_2015 = pd.concat([df_2015.drop(['Location'], axis=1), df_2015['Location'].apply(pd.Series)], axis=1)\ndf_2015['human_address'] = [ast.literal_eval(str(item)) for index, item in df_2015.human_address.iteritems()]\ndf_2015 = pd.concat([df_2015.drop(['human_address'], axis=1), df_2015['human_address'].apply(pd.Series)], axis=1)\ndf_2015.head()","9d332374":"df_2015 = df_2015.rename(columns={\"latitude\":\"Latitude\", \n                                  \"longitude\":\"Longitude\",\n                                  \"address\":\"Address\", \n                                  \"city\":\"City\", \n                                  \"state\":\"State\", \n                                  \"zip\":\"ZipCode\"})","9300c08c":"print(f\"Description de la variable GHGEmissions(MetricTonsCO2e) 2015 : \\n\\n\",\n      df_2015['GHGEmissions(MetricTonsCO2e)'].describe(),\n      f\"\\n\\nDescription de la variable TotalGHGEmissions 2016 : \\n\\n\", \n      df_2016['TotalGHGEmissions'].describe(),\n      f\"\\n\\nDescription de la variable GHGEmissionsIntensity(kgCO2e\/ft2) 2015 : \\n\\n\", \n      df_2015['GHGEmissionsIntensity(kgCO2e\/ft2)'].describe(),\n      f\"\\n\\nDescription de la variable GHGEmissionsIntensity 2016 : \\n\\n\", \n      df_2016['GHGEmissionsIntensity'].describe(),\n      )","582032ba":"df_2015 = df_2015.rename(columns={'GHGEmissions(MetricTonsCO2e)':'TotalGHGEmissions',\n                                  'GHGEmissionsIntensity(kgCO2e\/ft2)':'GHGEmissionsIntensity',\n                                  'Comment':'Comments'})\ndf_2015.drop(['OtherFuelUse(kBtu)','2010 Census Tracts',\n              'Seattle Police Department Micro Community Policing Plan Areas',\n              'City Council Districts','SPD Beats', \n              'Zip Codes'], axis=1, inplace=True)","3c8f356c":"list_1 = list(df_2015.columns) \nlist_2 = list(df_2016.columns)\ncomp_col(list_1, list_2)","2818c36f":"pd.DataFrame([df_2015.dtypes, df_2016.dtypes])","e5e0be50":"df_2015[['Latitude','Longitude', 'ZipCode']] = df_2015[['Latitude','Longitude', 'ZipCode']].astype('float64')","5aa96683":"df = pd.concat([df_2015[df_2016.columns],df_2016], axis = 0).sort_values([\"DataYear\", \"OSEBuildingID\"])\ndf.shape","f1dbda5a":"df.info()","b86a32c8":"df['BuildingType'].unique()","cc0f6a96":"df = df[~df['BuildingType'].str.contains(\"Multifamily\")]\ndf['BuildingType'].unique()","9c4007ef":"df.shape","6dca2f45":"for column in df.columns:\n    if df[column].nunique()<20:\n        print('Colonne {}, valeurs uniques :\\n{}\\n'.format(column, df[column].unique()))\n    else:\n        print('Colonne {}, {} valeurs uniques'.format(column, df[column].nunique()))","34322b11":"def search_componant(df, suffix=None):\n  componant = []\n  for col in df.columns:\n      if suffix in col: \n        componant.append(col)\n  return componant","07e1c17f":"# suppressions des variables qui ne nous int\u00e9ressent pas\ndf.drop(['State','Comments','ZipCode','City'], axis=1, inplace=True)","eba1454c":"#Suppression des variables avec suffixe WN\ndf.drop(search_componant(df,'WN'), axis=1, inplace=True)","3281ef42":"#Suppression des variables redondantes\nredundant_features = ['NaturalGas(therms)','Electricity(kWh)']\ndf.drop(redundant_features, axis=1, inplace=True)","4e058e96":"df['Neighborhood'].replace('DELRIDGE NEIGHBORHOODS', 'DELRIDGE', inplace=True)\ndf['Neighborhood']=df['Neighborhood'].map(lambda x: x.upper())","dff5a475":"df['Neighborhood'].unique()","0eaeb2ee":"df['ComplianceStatus'].replace('Missing Data', np.nan, inplace=True)\ndf['ComplianceStatus'].replace('Error - Correct Default Data', np.nan, inplace=True)","2f7a971e":"df.min()","4ad2885b":"df[df['PropertyGFAParking']<0]","1853e34d":"df[df['PropertyGFABuilding(s)']<0]","055aa706":"index_to_drop=df[df['PropertyGFAParking']<0].index\ndf.drop(index_to_drop, inplace=True)","287e4f05":"index_to_drop=df[df['PropertyGFABuilding(s)']<0].index\ndf.drop(index_to_drop, inplace=True)","d465a040":"df['NumberofBuildings'].fillna(0, inplace=True)\ndf['NumberofBuildings'].replace(0, 1, inplace=True)\ndf['NumberofFloors'].fillna(0, inplace=True)\ndf['NumberofFloors'].replace(0, 1, inplace=True)","e81e4a08":"df['NumberofBuildings'].unique()","68aa8bbf":"df['NumberofFloors'].unique()","00ea66f1":"import folium\nmap_osm = folium.Map()\nmap_osm = folium.Map(location=[df['Latitude'].mean(), df['Longitude'].mean()],zoom_start=11)\nfor i in range(0,len(df)):\n    folium.Circle([df.iloc[i]['Latitude'],df.iloc[i]['Longitude']], \n                      popup=df.iloc[i]['Address'], radius =100).add_to(map_osm)\nmap_osm","91907875":"df_nan = df.isna().sum().sort_values(ascending=False)\ndf_nan","f47340c5":"plt.figure(figsize=(10,10))\nplt.title('Proportion de NaN par variable (%)')\nsns.barplot(x=df_nan.values\/df.shape[0]*100, y=df_nan.index)","3124aa9e":"df.drop(['Outlier'],axis=1)\ndf.shape","0e61bd73":"plt.title('Distribution du nombre de NaN par colonne')\nsns.histplot(df.isna().sum(axis=1), bins=50)","fdd4af56":"df.dropna(how = 'all', axis=0, inplace=True)\ndf.shape","4d22755c":"col_nan_to_zero = ['ThirdLargestPropertyUseTypeGFA', 'SecondLargestPropertyUseTypeGFA',\n                   'LargestPropertyUseTypeGFA','SteamUse(kBtu)',\n                   'Electricity(kBtu)','NaturalGas(kBtu)']\ndf[col_nan_to_zero] = df[col_nan_to_zero].fillna(0, )","a17c32d7":"col_no_use = ['LargestPropertyUseType', 'SecondLargestPropertyUseType',\n              'ThirdLargestPropertyUseType']\ndf[col_no_use] = df[col_no_use].fillna('No information')","81a70ecf":"df[df['LargestPropertyUseType'] == 'No information']","0e70c557":"df = df.drop(['SteamUse(kBtu)','Electricity(kBtu)',\n                         'NaturalGas(kBtu)'], axis=1)","5eb1ef24":"columns_to_categorize = ['BuildingType', 'CouncilDistrictCode',\n                        'ComplianceStatus', 'Neighborhood']","12b98749":"df[columns_to_categorize] = df[columns_to_categorize].astype('category')","d3bc0e5a":"df.select_dtypes(['object', 'category']).nunique().sort_values(ascending=False)","4f788050":"property_use_types_columns = ['LargestPropertyUseType',\n                              'PrimaryPropertyType',\n                              'SecondLargestPropertyUseType',\n                              'ThirdLargestPropertyUseType']","b09138b7":"usetype_dict = {'Retail Store' : 'Retail',\n                'Supermarket\/Grocery Store' : 'Retail',\n                'Repair Services (Vehicle, Shoe, Locksmith, etc)' : 'Retail',\n                'Automobile Dealership': 'Retail',\n                'Convenience Store without Gas Station': 'Retail',\n                'Personal Services': 'Retail',\n                'Enclosed Mall': 'Retail',\n                'Strip Mall': 'Retail',\n                'Wholesale Club\/Supercenter': 'Retail',\n                'Other - Mall': 'Retail',\n                'Supermarket \/ Grocery Stor': 'Retail',\n                \n                'Food Sales': 'Leisure',\n                'Restaurant' : 'Leisure',\n                'Other - Restaurant\/Bar' : 'Leisure',\n                'Food Service': 'Leisure' ,\n                'Worship Facility': 'Leisure',\n                'Other - Recreation': 'Leisure',\n                'Other - Entertainment\/Public Assembly': 'Leisure',\n                'Performing Arts': 'Leisure',\n                'Bar\/Nightclub': 'Leisure',\n                'Movie Theater': 'Leisure',\n                'Museum': 'Leisure',\n                'Social\/Meeting Hall': 'Leisure',\n                'Fitness Center\/Health Club\/Gym': 'Leisure',\n                'Lifestyle Center ': 'Leisure',\n                'Fast Food Restaurant': 'Leisure',\n                \n                'Multifamily Housing' : 'Hotel\/Senior Care\/Housing',\n                'Other - Lodging\/Residential': 'Hotel\/Senior Care\/Housing',\n                'Residence Hall\/Dormitory': 'Hotel\/Senior Care\/Housing',\n                'Hotel' : 'Hotel\/Senior Care\/Housing',\n                'Senior Care Community' : 'Hotel\/Senior Care\/Housing',\n                'Residential Care Facility' : 'Hotel\/Senior Care\/Housing',\n                'High-Rise Multifamily': 'Hotel\/Senior Care\/Housing',\n                \n                'Medical Office' : 'Health',\n                \n                'Other - Services' : 'Office',\n                'Bank Branch' : 'Office',\n                'Financial Office' : 'Office',\n                'Other - Public Services': 'Office',\n\n                'K-12 School' : 'Education',\n                'Other - Education': 'Education',\n                'Vocational School' : 'Education', \n                'Adult Education' : 'Education',\n                'Pre-school\/Daycare': 'Education',\n                'University': 'Education',\n                'College\/University': 'Education',\n                'Library': 'Education'\n               }","ae24136d":"for column in property_use_types_columns:\n    df[column] = df[column].replace(usetype_dict)","66055845":"for column in df[property_use_types_columns].columns:\n    print(df[column].value_counts())\n    print('\\n')","08880cb3":"df['PrimaryPropertyType'] = df['PrimaryPropertyType'].str.replace('\\n','')","1fe6f75c":"for column in df[property_use_types_columns].columns:\n    print(df[column].name, ':')\n    print(df[column].value_counts(),'\\n')","d49d4789":"df.isna().sum()","75c77e36":"df[df['TotalGHGEmissions'].isna()]","dbabc760":"index_with_nan = df['TotalGHGEmissions'].index[df['TotalGHGEmissions'].isnull()]\n\ndf = df.drop(index=index_with_nan)","08885d15":"df[df.TotalGHGEmissions==0]","4d017981":"index_a_zero = df['TotalGHGEmissions'].index[df['TotalGHGEmissions']==0]\n\ndf = df.drop(index=index_a_zero)","db498b67":"columns_to_drop = ['PropertyName', #similaire \u00e0 ID\n                   'TaxParcelIdentificationNumber', #similaire \u00e0 ID\n                   #'ListOfAllPropertyUseTypes', #donn\u00e9e figurant dans d'autres colonnes\n                   'ComplianceStatus', #infos sur la comp\u00e9tude des donn\u00e9es \u00e0 supprimer\n                   'DefaultData', #utilit\u00e9 de la variable inconnue\n                   'Address', #non conserv\u00e9 (latitude et longitude pr\u00e9f\u00e9r\u00e9es)\n                   'Outlier', #trop de donn\u00e9es manquantes\n                   'YearsENERGYSTARCertified' #donn\u00e9es incompl\u00e8tes\n                  ]","6c4ce06e":"columns_to_drop += ['SiteEUI(kBtu\/sf)',\n                    'SourceEUI(kBtu\/sf)']","ab48dc3b":"df['OSEBuildingID'].value_counts().head()","3e826c7e":"df.groupby(\"OSEBuildingID\").filter(lambda x: len(x) > 1).sort_values(by='OSEBuildingID').head(10)","533130f9":"col_dbl = ['OSEBuildingID','DataYear','SiteEnergyUse(kBtu)','TotalGHGEmissions']\ndbleBat = df[col_dbl].groupby(\"OSEBuildingID\").filter(lambda x: len(x) > 1).sort_values(by='OSEBuildingID')","c7894c41":"ghg = sns.displot(dbleBat, x='TotalGHGEmissions', hue='DataYear',  \n            element=\"step\", palette='bright', height=6, aspect=1.5)\nplt.xlim(0,1000)\nghg.set(title=\"Distribution des \u00e9carts d'\u00e9missions de CO2 normalis\u00e9e 2015-2016\\n pour des b\u00e2timents identiques (en %)\")","a9921484":"seu=sns.displot(dbleBat, x='SiteEnergyUse(kBtu)', hue='DataYear',  \n            element=\"step\", palette='bright', height=6, aspect=1.5)\nplt.xlim(0,0.5e8)\nseu.set(title=\"Distribution des \u00e9carts de consommation normalis\u00e9e 2015-2016\\n pour des b\u00e2timents identiques (en %)\")","0c4b6c13":"f, axs = plt.subplots(1, 2, figsize=(14, 5))\nsns.histplot(data=dbleBat, x=\"TotalGHGEmissions\", hue=\"DataYear\", kde=True, palette='bright', ax=axs[0])\nsns.histplot(data=dbleBat, x=\"SiteEnergyUse(kBtu)\", hue=\"DataYear\", kde=True, palette='bright', ax=axs[1])\nf.tight_layout()","36cb0093":"spread = df.groupby(\"OSEBuildingID\").filter(lambda x: len(x) > 1).sort_values(by='OSEBuildingID').groupby('OSEBuildingID')['SiteEnergyUse(kBtu)'].agg(['max','min'])\nspread.head()","bb0827cb":"spread['min'] = np.true_divide(spread['min'], spread['max'])\nspread['max'] = np.true_divide(spread['max'], spread['max'])\nspread = spread.diff(axis=1)\nspread = spread.multiply(100)\nspread = spread.dropna(axis=1)\nspread = spread.abs()\nspread.rename(columns={'min':'\u00e9cart'}, inplace=True)\nspread.head()","dd3b9c0c":"g=sns.displot(spread, kde=True, palette='bright', legend=False, height=6, aspect=1.5)\ng.set(title='Distribution des \u00e9carts de consommation normalis\u00e9e 2015-2016\\n pour des b\u00e2timents identiques (en %)')\nplt.xlabel('Ecart de consommation 2015\/2016 (en %)')","50b4fe49":"print(round(spread.shape[0]*2 \/ df.shape[0] * 100,0), \n      '% du jeu de donn\u00e9es est constitu\u00e9 de b\u00e2timents \\ndont on a des informations pour 2015 et 2016')","32cb6a01":"spread.describe().T[['mean', 'min', 'max', '50%', 'std']]","0bafe952":"id_high_spread = spread[spread['\u00e9cart']>(7.24 + 3*8.57)].reset_index()['OSEBuildingID'].values","cf3db734":"df_high_spread = df[df['OSEBuildingID'].isin(id_high_spread)].sort_values(by='OSEBuildingID')\ndf_high_spread.head(10)","d07ec3a3":"df = df[~df['OSEBuildingID'].isin(id_high_spread)]\ndf.shape","dd0db297":"for column in columns_to_drop:\n    try:\n        df.drop(column, axis=1, inplace=True)\n    except:\n        print('colonne {} absente du jeu de donn\u00e9e'.format(column))","49553032":"df.info()","94b621e4":"building_type = df.groupby(by='BuildingType')['OSEBuildingID'].nunique()\nfont_title = {'family': 'serif',\n              'color':  '#1d479b',\n              'weight': 'bold',\n              'size': 18,\n             }\n\nfig, ax = plt.subplots(figsize=(6,6))\nax.pie(building_type.values, labels=building_type.index, \n       autopct='%1.1f%%', shadow=True, startangle=30,\n       textprops=dict(color=\"black\",size=12, weight=\"bold\"))\nax.axis('equal')\nax.set_title(\"R\u00e9partition des types de b\u00e2timents du dataset\", fontdict=font_title)\nplt.show()","a8ce7cb2":"df.loc[(df['BuildingType']==\"NonResidential\"),'PrimaryPropertyType'].value_counts()","ec0bce04":"df['BuildingType'].value_counts()","0a5b09f7":"index_to_drop=df[df['BuildingType']==\"Nonresidential WA\"].index\ndf.drop(index_to_drop, inplace=True)","bc136747":"fig = plt.figure(figsize=(12,8))\nax = sns.histplot(data=df, x='YearBuilt', bins=int((df.YearBuilt.max() - df.YearBuilt.min())\/5))\nax.set_xlabel(\"Ann\u00e9e de construction\")\nax.set_ylabel(\"Nombre de b\u00e2timents\")\nplt.title(f\"Distribution des ann\u00e9es de construction des b\u00e2timents\\n\", fontdict=font_title)\nplt.show()","8211425e":"df['BuildingAge'] = df['DataYear'] - df['YearBuilt']\n# df.drop('YearBuilt', axis=1, inplace=True)\n\nfig = plt.figure(figsize=(10,7))\nax = sns.histplot(data=df, x='BuildingAge', bins=int((df.BuildingAge.max() - df.BuildingAge.min())\/5))\nax.set_xlabel(\"Age du b\u00e2timent\")\nax.set_ylabel(\"Nombre de b\u00e2timents\")\nplt.title(f\"Distribution de l'\u00e2ge des b\u00e2timents\\n\", fontdict=font_title)\nplt.show()","bf53b6be":"var_to_hist = ['YearBuilt','PropertyGFATotal','SiteEnergyUse(kBtu)',\n               'TotalGHGEmissions','GHGEmissionsIntensity']","1f3265fb":"for column in var_to_hist:\n    plt.figure(figsize = (8,1))\n    \n    sns.boxplot(x=df[column])\n    chaine = 'Distribution de : ' + column\n    plt.title(chaine)\n    plt.xlabel(column)\n    plt.show()\nsns.set(font_scale=1)","a6335ad5":"df[df['PropertyGFATotal']>9000000]","60b91c47":"index_to_drop=df[df['PropertyGFATotal']>9000000].index\ndf.drop(index_to_drop, inplace=True)","41b97683":"df[df['SiteEnergyUse(kBtu)']>6e8]","a28e604b":"df['PropertyGFATotal'].describe()","676b13ba":"#This function allows you to view the distribution \n#of CO2 emissions within the classes of a variable.\ndef visualisation(variable,df):\n    # the_mean=df[\"GHGEmissions(MetricTonsCO2e)\"].mean()\n    the_mean=df[\"TotalGHGEmissions\"].mean()\n    fig=plt.figure(figsize=[18,7])\n    fig.patch.set_facecolor('#E0E0E0')\n    fig.patch.set_alpha(0.7)\n    plt.title(\"C02 emissions distribution by {}\".format(variable),size=16)\n    sns.boxplot(x=variable, y=\"TotalGHGEmissions\", data=df,color=\"#cbd1db\",width=0.5,showfliers=False,showmeans=True)\n    plt.hlines(y=the_mean,xmin=-0.5,xmax=len(df[variable].unique())-0.5,color=\"#6d788b\",ls=\"--\",label=\"Global mean\")\n\n    plt.ylabel(\" C02 emissions\",size=14)\n    plt.xticks(range(0,len(df[variable].unique()))\n               ,df[variable].unique(),rotation=90)\n    plt.legend()\n    plt.grid()\n    plt.show()","f41e6f6a":"visualisation('Neighborhood',df)","7c1704af":"visualisation('BuildingType',df)","90cd4855":"corr = df.corr()\nmask = np.zeros_like(corr)\nmask[np.triu_indices_from(mask)] = True\nfig, ax = plt.subplots(figsize=(10,10))\nax = sns.heatmap(corr, annot=True, fmt=\".2f\", annot_kws={'size':8}, \n                 mask=mask, center=0, cmap=\"coolwarm\")\nplt.title(f\"Heatmap des corr\u00e9lations lin\u00e9aires\\n\", fontsize = 18)\nplt.show()","5a900681":"threshold = 0.7\ncorr_pairs = corr.unstack().sort_values(kind=\"quicksort\")\nstrong_corr = (pd.DataFrame(corr_pairs[(abs(corr_pairs) > threshold)])\n               .reset_index().rename(columns={0:'corr_coeff'}))\nstrong_corr = strong_corr[(strong_corr.index%2 == 0) & (strong_corr['level_0'] != strong_corr['level_1'])]\nstrong_corr.sort_values('corr_coeff', ascending=False)","871c1ebe":"def split_words(df, column = None):\n  list_words = set()\n  for word in df[column].str.split(','):\n    if isinstance(word, float):\n      continue\n    list_words = set().union(word, list_words)\n  return list(list_words)\n\nlist_use_type = split_words(df, 'ListOfAllPropertyUseTypes')\nprint(\"Nombre de type d'usages dans la base : {}\".format(len(list_use_type)))","c05068b8":"df['TotalUseTypeNumber'] = [str(word).count(\",\") + 1 for word in df['ListOfAllPropertyUseTypes'].str.split(',')]\ndf.drop('ListOfAllPropertyUseTypes', axis=1, inplace=True)","53b6f09c":"gfa_features = search_componant(df, suffix='GFA')\ndf[['TotalUseTypeNumber'] + gfa_features].head(10)","44494e38":"df.describe()","31979845":"# Calcul des ratios\ndf['GFABuildingRate'] = (round((df['PropertyGFABuilding(s)'].fillna(0)\n                                  \/df['PropertyGFATotal'].fillna(0)),5))\ndf['GFAParkingRate'] = (round((df['PropertyGFAParking'].fillna(0)\n                                 \/df['PropertyGFATotal'].fillna(0)),5))\n\n# Suppression des variables inutiles\ndf.drop(['LargestPropertyUseTypeGFA', \n           'SecondLargestPropertyUseTypeGFA',\n           'SecondLargestPropertyUseType',\n           'ThirdLargestPropertyUseTypeGFA',\n           'ThirdLargestPropertyUseType',\n           'PropertyGFAParking',\n           'PropertyGFABuilding(s)'],\n         axis=1, inplace=True)\n\n#On compl\u00e8te les usages de la partie la plus large\ndf['LargestPropertyUseType'] = df['LargestPropertyUseType'].fillna(\"Unknown\")\ndf['NumberofFloors'] = df['NumberofFloors'].fillna(1)","b5bc01fd":"df['GFAPerBuilding'] = round((df['PropertyGFATotal'] \/ df['NumberofBuildings']),3)\ndf['GFAPerFloor'] = round((df['PropertyGFATotal'] \/ df['NumberofFloors']),3)","c601aec5":"df.describe()","825e0d2d":"corr = df.corr()\nmask = np.zeros_like(corr)\nmask[np.triu_indices_from(mask)] = True\nfig, ax = plt.subplots(figsize=(10,10))\nax = sns.heatmap(corr, annot=True, fmt=\".2f\", annot_kws={'size':8}, \n                 mask=mask, center=0, cmap=\"coolwarm\")\nplt.title(f\"Heatmap des corr\u00e9lations lin\u00e9aires\\n\", fontsize = 18)\nplt.show()","b468feaa":"threshold_up = 0.7\ncorr_pairs = corr.unstack().sort_values(kind=\"quicksort\")\nstrong_corr = (pd.DataFrame(corr_pairs[(abs(corr_pairs) > threshold_up)])\n               .reset_index().rename(columns={0:'corr_coeff'}))\nstrong_corr = strong_corr[(strong_corr.index%2 == 0) & \n                          (strong_corr['level_0'] != strong_corr['level_1'])]\nstrong_corr.sort_values('corr_coeff', ascending=False)","087fb4d8":"anaghg=sns.displot(df['TotalGHGEmissions'], palette='bright', height=6, aspect=1.5)\nplt.xlim(0,1500)\nanaghg.set(title=\"Distribution de la variable TotalGHGEmissions\")","d21b3eda":"anaseu=sns.displot(df['SiteEnergyUse(kBtu)'], palette='bright', height=6, aspect=1.5)\nplt.xlim(0,0.5e8)\nanaseu.set(title=\"Distribution de la variable SiteEnergyUse(kBtu)\")","6f6b2865":"df.set_index(\"OSEBuildingID\").to_csv(\"\/kaggle\/working\/building-energy-pred.csv\")","0bcb01f0":"On peut observer des corr\u00e9lations importantes entre :\n\n* PropertyGFATotal et PropertyGFABuilding(s) \/ LargestPropertyUseTypeGFA\n* PropertyGBABuilding(s) et LargestPropertyUseTypeGFA\n* TotalGHEmissions et SiteEnergyUse(kBtu) \/ NaturalGas(kBtu)\n\nPour les variables \u00e0 pr\u00e9dire 'TotalGHGEmissions' et 'SiteEnergyUse(kBtu)', on remarque des corr\u00e9lations lin\u00e9aires tr\u00e8s fortes avec les variables de relev\u00e9s (les consommations) mais \u00e9galement avec le nombre de batiments ou d'\u00e9tages ainsi que les surfaces au sol.\n\nLes fortes corr\u00e9lations visibles sur le heatmap peuvent amener des probl\u00e8mes de colin\u00e9arit\u00e9 dans nos futurs mod\u00e8les. Isolons donc les paires de variables avec des corr\u00e9lations de Pearson sup\u00e9rieurs \u00e0 0.7 :","a42aca9b":"<font color=\"#337da4\"><h4>3. Ajustement des donn\u00e9es de localisation de 2015<\/h4><a class=\"anchor\" id=\"section_3\"><\/a><\/font>\n\nLes donn\u00e9es de localisation sont diff\u00e9rentes dans les fichiers 2015 et 2016. Regardons ce que contient la variable 'Location' du set 2015 :","994b5afb":"<font color=\"#337da4\">2.3. Analyse des variables \u00e0 pr\u00e9dire<\/font><br>\n\nPour rappel, les variables \u00e0 pr\u00e9dire sont 'TotalGHGEmissions' et 'SiteEnergyUse(kBtu)'.","8b2a6a9e":"Nous allons ensuite convertir les diff\u00e9rentes surfaces (Buildings et Parking) en pourcentage de la surface totale et nous conserverons uniquement ces 2 variables en supprimant les variables LargestPropertyUseTypeGFA, SecondLargestPropertyUseTypeGFA, ThirdLargestPropertyUseTypeGFA :","3cc96b59":"Regardons les variables qui semblent identiques, \u00e0 savoir :\n- GHGEmissionsIntensity(kgCO2e\/ft2) et GHGEmissionsIntensity\n- GHGEmissions(MetricTonsCO2e) et TotalGHGEmissions","a9f16b5f":"Quelques donn\u00e9es ont des \\n qu'il convient de supprimer.","dd224ad1":"Supprimons les colonnes qui ne nous int\u00e9ressent pas dans ce projet :\n\nState (une seule valeur)\nComments\nles variables qui se terminent par WN (Weather Normalized) qui sont des corrections des conditions climatiques.\nD'autres variables sont redondantes :\n\nElectricity(kWh) \/ Electricity(kBtu)\nNaturalGas(therms) \/ NaturalGas(kBtu)","f1b7b07a":"Comme nous avons conserv\u00e9 les deux ann\u00e9es, nous avons des lignes en double.","b7594e8a":"Quels sont ces b\u00e2timents r\u00e9f\u00e9renc\u00e9s 'NonResidential' et qui repr\u00e9sentent la majeure partie des b\u00e2timents.","df4a4c31":"En ce qui concerne l'\u00e9nergie, nous pouvons \u00e9liminer \u00e9galement les donn\u00e9es surfaciques.","81ac4f6b":"Nous avons des valeurs n\u00e9gatives pour les variables PropertyGFAParking et PropertyGFABuilding(s). Regardons :","98903b68":"<font color=\"#337da4\"><h4>4. Description et nettoyage des donn\u00e9es.<\/h4><a class=\"anchor\" id=\"section_4\"><\/a>\n<\/font>\nIl est pr\u00e9cisi\u00e9 dans le projet que seuls les b\u00e2timents non destin\u00e9s \u00e0 l'habitation seront \u00e9tudi\u00e9s. Nous allons donc supprimer toutes les lignes correspondant \u00e0 des habitations en nous basant sur la variable BuildingType.<br><br>\n\n<font color=\"#337da4\">4.1 Supppression des donn\u00e9es d'habitations<\/font>","2e459af7":"\n *   la moyenne d'\u00e9cart de consommation normalis\u00e9e est de 10,4 %\n *   le minimum d'\u00e9cart est nul\n *   le maximum d'\u00e9cart est de 100 % (!)\n *   la m\u00e9diane est \u00e0 5,4 %\n *   la d\u00e9viation standard est \u00e0 15,4 %\n \n Regardons de plus pr\u00e8s les donn\u00e9es dont le maximum d'\u00e9cart est sup\u00e9rieur \u00e0 la moyenne + 3 x la d\u00e9viation standard","ee175f4c":"On observe quelques \u00e9carts d'une ann\u00e9e \u00e0 l'autre.\nCalculons l'\u00e9cart de consommation \u00e9nerg\u00e9tique entre les deux ann\u00e9es pour chaque b\u00e2timent.","c789d495":"Le but de notre programme \u00e9tant de supprimer les relev\u00e9s co\u00fbteux pour les ann\u00e9es \u00e0 venir, nous allons donc exclure toutes les donn\u00e9es de rel\u00e8ve de notre dataset.","0ce25947":"Elimination des lignes comportant que des NaNs","43dd5eb0":"On peut constater pour certains b\u00e2timents des changements d'usage.\nPour d'autres, nous n'avons pas d'explication; nous allons donc supprimer les valeurs extr\u00eames.","f0750981":"V\u00e9rifions si les types sont identiques entre 2015 et 2016.","e40c11a0":"<b>Localisation<\/b>","022350d2":"Les bureaux de petite et moyenne taille repr\u00e9sentent la plus grande part des b\u00e2timents non r\u00e9sidentiels.","46ed2d69":"Correction du nombre de b\u00e2timents et d'\u00e9tages (ne peut \u00eatre nul ou NaN)","5098644f":"Il reste des entr\u00e9es pour lesquelles nous n'avons pas d'information de consommation d'\u00e9nergie","b1957d86":"V\u00e9rifions l'impact de ce feature engineering sur la matrice des corr\u00e9lations lin\u00e9aires :","4eb2e133":"Nous renommons les nouvelles colonnes afin qu'elles coincident avec celles de 2016 :","7f0d3421":"Cette variable contient toutes les donn\u00e9es de localisation qui sont pr\u00e9sentes dans des variables diff\u00e9renti\u00e9es en 2016.<br>\nNous allons s\u00e9parer ces variables pour extraire les variables imbriqu\u00e9es :\n","ed2760c1":"<font color=\"#337da4\"><h4>Fonctions<\/h4><a class=\"anchor\" id=\"section_1\"><\/a><\/font>","d7bca96c":"Les deux sets 2015 et 2016 sont maintenant identiques et nous allons les regrouper dans un unique jeu de donn\u00e9es :","31f08c08":"<b>Explication des variables<\/b><br>\nPlusieurs variables concernent les surfaces (GFA = Gross floor area) :<br>\n- Gross floor area : surface totale\n- PropertyGFAParking : surface des parkings\n- PropertyGFABuilding(s) : surface des b\u00e2timents\n- ListOfAllPropertyUseTypes : les diff\u00e9rentes utilisations des surfaces (Hotel, Parking, Restaurant, Piscine, etc.)\n- LargestPropertyUseType \/ LargestPropertyUseTypeGFA : principale destination du b\u00e2timent et sa surface\n- SecondLargestPropertyUseType \/ SecondLargestPropertyUseTypeGFA : seconde destination du b\u00e2timent et sa surface\n- ThirdLargestPropertyUseType\t\/ ThirdLargestPropertyUseTypeGFA : troisi\u00e8me destination du b\u00e2timent et sa surface\n\nConcernant l'\u00e9nergie, ENERGY STAR nous indique :\n- SiteEUI(kBtu\/sf)\t\/ SiteEUIWN(kBtu\/sf)\t: Energy Use Intensity (EUI) ou intensit\u00e9 de la consommation d'\u00e9nergie ; l'EUI exprime la consommation d'\u00e9nergie d'un b\u00e2timent en fonction de sa taille ou d'autres caract\u00e9ristiques.<br>\n- SourceEUI(kBtu\/sf)\tSourceEUIWN(kBtu\/sf) : la source d'\u00e9nergie est l'unit\u00e9 d'\u00e9valuation la plus \u00e9quitable pour comparer diff\u00e9rents b\u00e2timents entre eux. La source d'\u00e9nergie repr\u00e9sente la quantit\u00e9 totale de combustible brut n\u00e9cessaire au fonctionnement du b\u00e2timent. Il int\u00e8gre toutes les pertes de transmission, de livraison et de production. En prenant en compte toutes les consommations d'\u00e9nergie, le score fournit une \u00e9valuation compl\u00e8te de l'efficacit\u00e9 \u00e9nerg\u00e9tique d'un b\u00e2timent. <br>\n\nSiteEnergyUse(kBtu)\tSiteEnergyUseWN(kBtu)\tSteamUse(kBtu)\tElectricity(kWh)\tElectricity(kBtu)\tNaturalGas(therms)\tNaturalGas(kBtu) : l'utilisation des \u00e9nergies est exprim\u00e9e en diverses unit\u00e9s :\n- kBTu : le B.T.U. (British Thermal Unit) est une unit\u00e9 de mesure d'\u00e9nergie thermique. Le BTU, de symbole Btu, est utilis\u00e9 dans les pays anglo-saxons et asiatiques et \u00e9quivaut \u00e0 1055,06 Joule ou 252 calories.<br>\n1 BTU est l\u2019\u00e9nergie n\u00e9cessaire pour chauffer ou refroidir une livre d\u2019eau de 1 degr\u00e9 Fahrenheit au niveau de la mer.<br>\nPour convertir une puissance en Btu une puissance en watt il suffit de diviser la puissance en Btu par 3414,5 pour obtenir la puissance en Kw. <br>\n\n- therms : le therm est une unit\u00e9 d'\u00e9nergie thermique anglo-saxone \u00e9gale \u00e0 1 000 000 unit\u00e9s thermiques britanniques (BTU). \n>1 kWh = 0.034095106405145 thm <br>\n>1 thm = 29.329722222222 kWh","c4a31ec3":"Mettons \u00e0 jour quelques valeurs dans les variables uniques:","6712f002":"<font color=\"#337da4\">2.1 Explorations<\/font>\n\n<h4><font color=\"#337da4\">2.1.1 Les types de b\u00e2timents<\/font><\/h4>","93bdf664":"Plus que l'ann\u00e9e de construction, il serait int\u00e9ressant de traiter l'\u00e2ge des b\u00e2timents pour r\u00e9duire la dispersion des donn\u00e9es et lier l'ann\u00e9e des relev\u00e9s. Nous allons donc cr\u00e9er cette nouvelle variable et supprimer l'ann\u00e9e de construction :","f21bcceb":"<font color=\"#337da4\">4.3 V\u00e9rification des valeurs n\u00e9gatives<\/font><br><a class=\"anchor\" id=\"section4_3\"><\/a>","7198ec64":"<h1>Projet 4<br \/>\nAnticipez les besoins en consommation \u00e9lectrique de b\u00e2timents<\/h1><br \/>\n\n<h3><font color=\"#1d479b\">Contexte<\/font><\/h3>\n<p>Pour atteindre l'objectif de ville neutre en \u00e9missions de carbone en 2050, la ville de Seattle s\u2019int\u00e9resse de pr\u00e8s aux \u00e9missions des b\u00e2timents non destin\u00e9s \u00e0 l\u2019habitation.\n\nDes relev\u00e9s minutieux ont \u00e9t\u00e9 effectu\u00e9s en 2015 et en 2016. Cependant, ces relev\u00e9s sont co\u00fbteux \u00e0 obtenir, et \u00e0 partir de ceux d\u00e9j\u00e0 r\u00e9alis\u00e9s, nous devons tenter de pr\u00e9dire les \u00e9missions de CO2 et la consommation totale d\u2019\u00e9nergie de b\u00e2timents pour lesquels elles n\u2019ont pas encore \u00e9t\u00e9 mesur\u00e9es.<\/p>\n\nLes donn\u00e9es de consommation sont \u00e0 t\u00e9l\u00e9charger [\u00e0 cette adresse](https:\/\/www.kaggle.com\/city-of-seattle\/sea-building-energy-benchmarking#2015-building-energy-benchmarking.csv)<br>\nLe score Star Energy est consultable [ici](https:\/\/www.energystar.gov\/buildings\/facility-owners-and-managers\/existing-buildings\/use-portfolio-manager\/interpret-your-results\/what)<br>\nLa description des variables est consultable sur le [site de Seattle](https:\/\/data.seattle.gov\/dataset\/2016-Building-Energy-Benchmarking\/2bpz-gwpy)","655cbad4":"Examinons la distribution de quelques variables","611e1a9c":"il n'y a qu'une seule valeur pour 'Nonresidential WA', ce qui risque de poser des probl\u00e8mes lors de la s\u00e9paration du jeu de donn\u00e9es; nous allons \u00e9liminer cette ligne :","e2a8d8cb":"<h4><font color=\"#337da4\">2.2. Les ann\u00e9es de construction<\/font><\/h4>\nNous allons regarder les distribution des ann\u00e9es de construction des b\u00e2timents de Seattle :","dac1da05":"Nous pouvons constater que la structure des donn\u00e9es a chang\u00e9 entre 2015 et 2016.<br>\nV\u00e9rifions quelles colonnes sont diff\u00e9rentes.","3458f92d":"V\u00e9rifions tout d'abord si nous avons les m\u00eames colonnes dans les 2 datasets","cdc6d1a7":"<font color=\"#337da4\">4.2 Observations sur les colonnes<\/font><br>\nAnalysons les donn\u00e9es uniques des colonnes ","3d86fc70":"<font color=\"#337da4\"><h4>1. Imports<\/h4><a class=\"anchor\" id=\"section_1\"><\/a><\/font>","dde830c9":"Quelques valeurs sont beaucoup trop \u00e9loign\u00e9es des autres et risquent de nous g\u00eaner dans l'analyse; nous allons les \u00e9liminer :","3d613b59":"<font color=\"#1d479b\"><h2>Plan du notebook<\/h2><\/font>\n<h3><font color=\"#1d479b\">1. Adaptation et nettoyage des donn\u00e9es<\/font><\/h3>\n\n1. [Import et fonctions](#section_1)<br>\n1. [Aper\u00e7u des fichiers](#section_2)<br>\n1. [D\u00e9compactage des donn\u00e9es de localisation de 2015](#section_3)<br>\n1. [Description et nettoyage des donn\u00e9es](#section_4)<br>\n  1.4.1 Supppression des donn\u00e9es d'habitations<br>\n  1.4.2 Observations sur les colonnes<br>\n  1.4.3 Valeurs n\u00e9gatives<br>\n  1.4.4 Outliers<br>\n  1.4.5 NaNs <br>\n  1.4.6 Cat\u00e9gorisation et regroupements\n\n<h3><font color=\"#1d479b\">2. Analyse exploratoire & Feature Engineering<\/font><\/h3>\n\n1. [Explorations](#section_2_1)<br>\n  2.1.1 Les types de b\u00e2timents<br>\n  2.1.2 Les ann\u00e9es de construction<br>\n  2.1.3 Distributions<br>\n1. [Analyse les variables \u00e0 pr\u00e9dire](#section_2_2)","1828cdcf":"<h3><font color=\"#1d479b\">2. Analyse exploratoire & Feature Engineering<\/font><\/h3>\n\n<b>Identification des colonnes inutiles<\/b>\n\nNous allons pour commencer supprimer quelques colonnes qui ne seront pas utiles pour notre exploration, notamment nom, adresse, identifiant, etc.","105839d4":"<font color=\"#337da4\">4.6 Cat\u00e9gorisation et regroupements<\/font>","aaa92b02":"On remarque que les variables suffix\u00e9es GFA pr\u00e9sentent de fortes corr\u00e9lations avec plusieurs autres variables. Nous allons donc cr\u00e9er de nouvelles variables pour tenter de gommer ces corr\u00e9lations lin\u00e9aires :","a5b5e11a":"<font color=\"#337da4\">2.3. Corr\u00e9lations lin\u00e9aires<\/font><br>","b18afda9":"**Compl\u00e9tion des NaN de certaines variables par des valeurs**\nCompl\u00e9tion avec 0 :","85c12230":"**Traitement des NaNs**","0e43c9cd":"<font color=\"#337da4\"><h4>2. Aper\u00e7u des fichiers<\/h4><a class=\"anchor\" id=\"section_2\"><\/a><\/font>\nNous avons 2 fichiers: un pour 2015 et un autre pour 2016.","8b02f423":"Afin de pr\u00e9parer un OneHotEncoder, nous allons cr\u00e9er une variable donnant le nombre total d'usages du b\u00e2timent, puis supprimer la liste compl\u00e8te des usages :","cbae996b":"Sauvegardons les donn\u00e9es dans un nouveau fichier pour travailler sur les diff\u00e9rents mod\u00e8les de pr\u00e9diction.","2a9b15a1":"**Suppression des colonnes non utilis\u00e9es.**","dc0018cf":"Ces 4 variables sont du m\u00eame ordre de grandeur deux \u00e0 deux : nous allons les renommer \u00e0 l'identique.\nNous supprimerons \u00e9galement les colonnes qui ne sont pas communes aux deux sets.","0791568d":"Les b\u00e2timents sont bien localis\u00e9s dans Seattle.","d7e62d0a":"Eliminons les valeurs n\u00e9gatives pour PropertyGFAParking et PropertyGFABuilding(s) :","e412ae78":"Nous pouvons \u00e9galement calculer la surface moyenne par b\u00e2timent et par \u00e9tage :","f94b4793":"\u00c9liminons la variable Outlier qui ne contient que tr\u00e8s peu de valeurs :"}}