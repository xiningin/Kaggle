{"cell_type":{"4598ff78":"code","dd32b790":"code","f4ab244f":"code","5e72b744":"code","5447ebe1":"code","60e8023f":"code","1b480c85":"code","ef56d768":"code","3e8c3e41":"code","27e8e257":"code","414c8b39":"code","36564150":"code","76b8e8bf":"code","4a3312a1":"code","63cc9eba":"code","cc7cb6b4":"code","d7d23845":"code","dc7a1ab5":"code","32c174bb":"code","259df36d":"code","a0898abe":"code","38918844":"code","7f913633":"code","331ff17a":"code","737ef1f9":"code","0bdc2493":"code","a7f6180d":"code","1f4a3270":"code","c85ee8bb":"code","fa8bfe1f":"code","1f62e540":"code","8d242a10":"code","5e52181c":"code","0bbec702":"code","8723535c":"code","b3c0be1e":"code","1d073d17":"code","30c735d1":"code","0cbcdf71":"code","fa8a034e":"code","f1913f37":"code","f5ccaf92":"code","5ae36f36":"code","bc877a3e":"code","8bf1984e":"code","e9ac2b71":"code","f8b74beb":"code","9b29b140":"code","c508caba":"code","6bcca897":"code","fddd1b4f":"code","0a472660":"code","c5e7df30":"markdown","31f9bd0d":"markdown","5bdca15d":"markdown","1a7e00fe":"markdown","79f319dd":"markdown","77880852":"markdown","6a72fa41":"markdown"},"source":{"4598ff78":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import classification_report, confusion_matrix\nfrom sklearn.metrics import accuracy_score\nfrom sklearn.preprocessing import OneHotEncoder\nfrom sklearn.compose import ColumnTransformer\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.ensemble import RandomForestClassifier","dd32b790":"df = pd.read_csv(\"\/kaggle\/input\/basketball-players-stats-per-season-49-leagues\/players_stats_by_season_full_details.csv\")\ndf.head()","f4ab244f":"# only keep the euroleague information\ndf = df[df.League  == \"Euroleague\"]\ndf.head()","5e72b744":"df.Season.iloc[1].split(\"-\")[1].split(\" \")[1]","5447ebe1":"# season is only equal to the last value\nyear = []\nfor i in range(len(df.Season)):\n    year.append(df.Season.iloc[i].split(\"-\")[1].split(\" \")[1])","60e8023f":"df.Season = year\ndf.head()","1b480c85":"df.info()","ef56d768":"# calculate the field goals success rate\ndf[\"field_goal_per\"] = df[\"FGM\"] \/ df[\"FGA\"] * 100\ndf.drop(\"FGM\", axis = 1, inplace=True)\ndf.drop(\"FGA\", axis = 1, inplace=True)\n\n# calculate the three points success rate\ndf[\"three_points_per\"] = df[\"3PM\"] \/ df[\"3PA\"] * 100\ndf.drop(\"3PM\", axis = 1, inplace=True)\ndf.drop(\"3PA\", axis = 1, inplace=True)\n\n# calculate the free throws success rate\ndf[\"free_throws_per\"] = df[\"FTM\"] \/ df[\"FTA\"] * 100\ndf.drop(\"FTM\", axis = 1, inplace=True)\ndf.drop(\"FTA\", axis = 1, inplace=True)\n\n# drop the full birth date\ndf.drop(\"birth_date\", axis = 1, inplace=True)\n\n# drop height in feet\ndf.drop(\"height\", axis = 1, inplace=True)\n\n# drop weight in pounds\ndf.drop(\"weight\", axis = 1, inplace=True)","3e8c3e41":"#Points per game\ndf['points_per_game'] = df['PTS'] \/ df['GP']\n\n#Minutes per game\ndf['min_per_game'] = df['MIN'] \/ df['GP']\n\n#Turnover per game\ndf['turnover_per_game'] = df['TOV'] \/ df['GP']\n\n#Fauls per game\ndf['fauls_per_game'] = df['PF'] \/ df['GP']","27e8e257":"df = df.drop(['MIN', 'TOV', 'PF', 'PTS'], axis=1)","414c8b39":"df.info()","36564150":"df.describe()","76b8e8bf":"# we have several values for each player on each year. we only care about their latest team since they will join euroleague with them.\ndf[df.Player ==\"Shane Larkin\"]","4a3312a1":"df = df.sort_values('Season', ascending=False).drop_duplicates('Player', keep='first')\ndf","63cc9eba":"df[df.Player ==\"Shane Larkin\"]","cc7cb6b4":"df = df.reset_index()","d7d23845":"df = df.drop(\"index\", axis = 1)","dc7a1ab5":"corr = df.corr()\nsns.heatmap(corr);","32c174bb":"df.Team.value_counts()","259df36d":"df.Team.value_counts().head(30).index\ndf.Team.value_counts().head(30).values\n\nsns.barplot(x= df.Team.value_counts().head(30).index, y=df.Team.value_counts().head(30).values)\nplt.xticks(rotation=90)\nplt.xlabel(\"Team Name\")\nplt.ylabel(\"Number of Players\")\nplt.title(\"Teams that Players Played the Most Recently\");","a0898abe":"top_nationalities = df.nationality.value_counts().head(30)","38918844":"sns.barplot(x = top_nationalities.index, y = top_nationalities.values)\nplt.xticks(rotation=90)\nplt.xlabel(\"Nationality\")\nplt.ylabel(\"Number of Players\")\nplt.title(\"Nationality of Players\");","7f913633":"high_school = df[\"high_school\"].value_counts().head(20)","331ff17a":"sns.barplot(x = high_school.index, y = high_school.values)\nplt.xticks(rotation=90)\nplt.xlabel(\"High School Name\")\nplt.ylabel(\"Number of Players\")\nplt.title(\"High School of Players\");","737ef1f9":"# I will drop the high school columns since it is not a good predictor\ndf.drop(\"high_school\", axis = 1, inplace=True)","0bdc2493":"# check if a specific birth month brings more points\n\nsns.relplot(x=\"birth_month\", y=\"points_per_game\", data=df, kind=\"scatter\", hue=\"birth_year\")\nplt.xlabel(\"Birth Month\")\nplt.ylabel(\"Points Per Game\")\nplt.title(\"Relation Between Birth Month and Points Scored\");","a7f6180d":"sns.relplot(x=\"free_throws_per\", y=\"points_per_game\", data=df, kind=\"scatter\", hue=\"turnover_per_game\");","1f4a3270":"df.isna().sum()","c85ee8bb":"df.head()","fa8bfe1f":"# all missing except month and year\ndf[\"weight_kg\"].fillna(df[\"weight_kg\"].mean, inplace=True)\ndf[\"draft_team\"].fillna(\"missing\", inplace=True)\ndf[\"draft_round\"].fillna(df[\"draft_round\"].mean(), inplace=True)\ndf[\"draft_pick\"].fillna(df[\"draft_pick\"].mean(), inplace=True)\ndf[\"three_points_per\"].fillna(df[\"three_points_per\"].mean(), inplace=True)\ndf[\"free_throws_per\"].fillna(df[\"free_throws_per\"].mean(), inplace=True)","1f62e540":"df[df[\"birth_month\"].isna()]","8d242a10":"# will drop this row since it belongs to a player from an older season\ndf = df.drop(df.iloc[1294].name, axis = 0)\ndf = df.reset_index()","5e52181c":"df.isna().sum().sum()","0bbec702":"df.head()","8723535c":"df.drop(\"League\", axis = 1, inplace = True)","b3c0be1e":"df.drop(\"Stage\", axis = 1, inplace = True)","1d073d17":"df.isna().sum().sum()","30c735d1":"df.info()","0cbcdf71":"# weight column to numeric\ndf['Season'] = pd.to_numeric(df['Season'], errors='coerce')\ndf.drop(\"weight_kg\", axis = 1, inplace = True)","fa8a034e":"cat_col = [\"Player\", \"Team\", \"birth_month\", \"nationality\", \"draft_team\"]","f1913f37":"dummies = pd.get_dummies(df[cat_col])","f5ccaf92":"df = df.drop(cat_col, axis = 1)\ndf = pd.concat([df, dummies], axis = 1)","5ae36f36":"df.head()","bc877a3e":"df = df.drop(\"index\", axis = 1)","8bf1984e":"set(df.columns) - set(df.select_dtypes(include=np.number).columns.tolist())","e9ac2b71":"# can we predict points per game\nX = df.drop(\"points_per_game\", axis = 1)\ny = df[\"points_per_game\"]","f8b74beb":"X_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.2, random_state=50)","9b29b140":"from sklearn.ensemble import RandomForestRegressor\nfrom sklearn import linear_model\nfrom sklearn.linear_model import ElasticNet\nfrom sklearn.datasets import make_regression\nfrom sklearn.svm import SVR\nfrom sklearn.linear_model import LinearRegression","c508caba":"# random forest regressor\nmodel = RandomForestRegressor()\nmodel.fit(X_train, y_train)\nmodel.score(X_test, y_test)","6bcca897":"# lasso\nmodel = linear_model.Lasso(alpha=0.1)\nmodel.fit(X_train, y_train)\nmodel.score(X_test, y_test)","fddd1b4f":"# SVR\nmodel = SVR()\nmodel.fit(X_train, y_train)\nmodel.score(X_test, y_test)","0a472660":"# linear regression\nmodel = LinearRegression()\nmodel.fit(X_train, y_train)\nmodel.score(X_test, y_test)","c5e7df30":"# Data Visualization","31f9bd0d":"# Modeling","5bdca15d":"# EDA","1a7e00fe":"# Fill the Missing Values","79f319dd":"# Split the Data","77880852":"# Importing the Libraries","6a72fa41":"# Handle Categorical Data"}}