{"cell_type":{"9e7b165d":"code","b973de38":"code","20604c5b":"code","0734d621":"code","25e3eecd":"code","86928c4e":"code","c5eab546":"code","aa519dbb":"code","f83eae15":"code","3c482cef":"code","44864c70":"code","34eb0dc6":"code","5c212a8a":"code","c18b4e8b":"code","d9fc4fa6":"code","e6d0e3d1":"code","7194f0d1":"code","fb7eb31c":"code","83b80829":"code","de8264bd":"code","a93e4f76":"markdown","2cf087aa":"markdown","5531c791":"markdown","b5cc3d6f":"markdown","87cc146e":"markdown","270bb401":"markdown","42903318":"markdown","588ed03a":"markdown","77b5d8a4":"markdown","12514cb6":"markdown","77f496b0":"markdown","8853e849":"markdown"},"source":{"9e7b165d":"import numpy as np # linear algebra\nfrom scipy.stats.stats import pearsonr\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nfrom tqdm import tqdm_notebook as tqdm\nimport seaborn as sns \nimport matplotlib.pyplot as plt\nsns.set()\nimport os\n\nfrom sklearn.linear_model import LinearRegression,ElasticNetCV, RidgeCV\nfrom sklearn.model_selection import cross_val_predict, cross_val_score, GroupKFold","b973de38":"def load_dir_csv(directory, csv_files=None):\n    if csv_files is None:\n        csv_files = sorted( [ f for f in os.listdir(directory) if f.endswith(\".csv\") ])    \n    csv_vars  = [ filename[:-4] for filename in csv_files ]\n    gdict = globals()\n    for filename, var in zip( csv_files, csv_vars ):\n        print(f\"{var:32s} = pd.read_csv({directory}\/{filename})\")\n        gdict[var] = pd.read_csv( f\"{directory}\/{filename}\" )\n        print(f\"{'nb of cols ':32s} = \" + str(len(gdict[var])))\n        display(gdict[var].head())\n\nload_dir_csv(\"..\/input\/\", \n             [\"train.csv\", \"test.csv\", \"structures.csv\", \"mulliken_charges.csv\"])\n","20604c5b":"!conda install -y -c openbabel openbabel \nimport openbabel as ob","0734d621":"# differentiate train and test set\ntrain_molecules = train.molecule_name.unique()\ntest_molecules  = test.molecule_name.unique()\n\n\nmulliken   = []\nmulliken_charges_idx = mulliken_charges.set_index(['molecule_name'])\n# ensure mulliken charges are in same order as for partial charges\nfor molecule_name in train_molecules:\n    mc  = mulliken_charges_idx.loc[molecule_name].sort_index()\n    mulliken.extend(mc.mulliken_charge.values)","25e3eecd":"print(len(mulliken))\nmulliken[0:2]","86928c4e":"##\n## Build molecules from files.xyz\n##\n\nobConversion = ob.OBConversion()\n#def read_ob_molecule(molecule_name, datadir=\"..\/input\/champs-scalar-coupling\/structures\"):\ndef read_ob_molecule(molecule_name, datadir=\"..\/input\/structures\"):\n    mol = ob.OBMol()\n    path = f\"{datadir}\/{molecule_name}.xyz\"\n    if not obConversion.ReadFile(mol, path):\n        raise FileNotFoundError(f\"Could not read molecule {path}\")\n    return mol\n    \n\nob_methods = [ \"eem\", \"mmff94\", \"gasteiger\", \"qeq\", \"qtpie\", \n               \"eem2015ha\", \"eem2015hm\", \"eem2015hn\", \"eem2015ba\", \"eem2015bm\", \"eem2015bn\" ]\n\nstructures_idx = structures.set_index( [\"molecule_name\"] )\ndef get_charges_df(molecule_names):\n    ob_methods_charges = [ [] for _ in ob_methods]\n    ob_molecule_name = []  # container for output  DF\n    ob_atom_index    = []  # container for output  DF\n    ob_error         = []\n    for molecule_name in molecule_names:\n        # fill data for output DF\n        ms = structures_idx.loc[molecule_name].sort_index()\n        natoms = len(ms)\n        ob_molecule_name.extend( [molecule_name] * natoms )\n        ob_atom_index.extend(    ms.atom_index.values )\n\n        # calculate open babel charge for each method\n        mol = read_ob_molecule(molecule_name)\n        assert( mol.NumAtoms() == natoms ) # consistency\n        error = 0\n        for method, charges in zip(ob_methods, ob_methods_charges):\n            ob_charge_model = ob.OBChargeModel.FindType(method)\n            if not ob_charge_model.ComputeCharges(mol):\n                error = 1\n            charges.extend( ob_charge_model.GetPartialCharges() )\n        ob_error.extend([error] * natoms)\n            \n    ob_charges = pd.DataFrame({\n        'molecule_name' : ob_molecule_name,\n        'atom_index'    : ob_atom_index}\n    )\n    for method, charges in zip(ob_methods, ob_methods_charges):\n        ob_charges[method] = charges\n    ob_charges[\"error\"] = ob_error\n    display(ob_charges.head())\n    return ob_charges","c5eab546":"%time train_ob_charges = get_charges_df(train_molecules)","aa519dbb":"%time test_ob_charges = get_charges_df(test_molecules)","f83eae15":"train_molecules[0:1]","3c482cef":"# correlation plots\ncorrs = []\nfor method in ob_methods:\n    charges = train_ob_charges[method].values\n    fig = plt.figure()\n    ax = sns.scatterplot(mulliken, charges)\n    corr, pval = pearsonr(mulliken, charges)\n    corrs.append(corr)\n    title = f\"method = {method:10s}  corr = {corr:7.4f}\"\n    print(title)\n    plt.title(title)\n    plt.xlabel(\"Mulliken charge\")\n    plt.ylabel(f\"Open Babel {method}\")\n","44864c70":"fig = plt.figure(figsize=(12,6))\ndata = pd.DataFrame( {'method':ob_methods, 'corr':[abs(c) for c in corrs]}).sort_values('corr', ascending=False)\nax = sns.barplot(data=data, x='corr', y='method', orient=\"h\", dodge=False)","34eb0dc6":"from sklearn.preprocessing import LabelEncoder\n# split by molecule for CV\nle = LabelEncoder()","5c212a8a":"train_ob_charges[\"mulliken_actual\"] = mulliken\ntrain_ob_charges.tail()","c18b4e8b":"## Let's look at correlation between the methods\n\ntrain_ob_charges.drop([\"error\"],axis=1).corr()","d9fc4fa6":"X = train_ob_charges.drop([\"mulliken_actual\"],axis=1).copy()\nX[\"molecule_name\"] = le.fit_transform(X[\"molecule_name\"])\n\ny = mulliken\n\nprint(X.shape)\n# print()\nX.head()","e6d0e3d1":"# LinearRegression,ElasticNetCV, RidgeCV\nclf = LinearRegression()\n\nprint(cross_val_score(clf,X,y,groups=X[\"molecule_name\"],cv=GroupKFold(4)).mean())","7194f0d1":"print(cross_val_score(clf,X.drop([\"atom_index\"],axis=1),y,groups=X[\"molecule_name\"],cv=GroupKFold(4)).mean())","fb7eb31c":"print(cross_val_score(clf,X[[\"atom_index\",\"eem\"]],y,groups=X[\"molecule_name\"],cv=GroupKFold(4)).mean())","83b80829":"# train_ob_charges.isna().sum() # no missing values\n# sns.heatmap(train_ob_charges.drop([\"atom_index\",\"error\"],axis=1)) # gives error about ufunc 'isnan' ? ","de8264bd":"train_ob_charges.to_csv(\"train_ob_charges.csv.gzip\",index=False,compression=\"gzip\")\ntest_ob_charges.to_csv(\"test_ob_charges.csv.gzip\",index=False,compression=\"gzip\")","a93e4f76":"Load CSV data","2cf087aa":"# Load Data","5531c791":"# Load Mulliken Charges from train set","b5cc3d6f":"# Install OpenBabel\n\nThe installation method was  demonstrated in: [Molecule with OpenBabel](https:\/\/www.kaggle.com\/jmtest\/molecule-with-openbabel)","87cc146e":"# Write Output dataframes","270bb401":"# Synopsis\n\n![OpenBabel](http:\/\/openbabel.org\/babel130.png)\n\nIn this kernel I will explore an alternative way of calculating local `mulliken charges`. \nYou may be interrested only if you wish to incorportate these features in your model.  \n=> The charges calculated with Open Babel are available as an autonomous dataset in [Open Babel Atom Charges](https:\/\/www.kaggle.com\/asauve\/open-babel-atom-charges)\n\nThe [Open Babel](http:\/\/openbabel.org\/wiki\/Main_Page) Package allow to\n* Read .xyz files (the ones provided in the structures directory)\n* Build bonding scheme (groovy baby!)\n* Compute partial charges, with several builtin methods\n\nHumm this last one is really interresting as it provides a quick way of computing atoms local charge with a method based on linear algebra. Hence it is fast and in the range of the allowed options for the competition.\n\nThe most promising method is Electronegativity Equalization Method  (EEM) which is describeed in this paper:  \n[High-quality and universal empirical atomic charges for chemoinformatics applications](https:\/\/www.ncbi.nlm.nih.gov\/pmc\/articles\/PMC4667495\/)\n\n\n","42903318":"Open Babel local charge estimation is worth a try in our models!\n\nBest match is method **\"eem\"** and some of its variants!\n\nNote that some outliers in the scatter plots come from different convention for how ionization charge is located inside the molecule. For example COO- can have -1 charge set on one O, or let it be shared by both oxygens. Hence the fact that some models differ from the data in the table `mulliken_charges` does not mean that it is systematically worse for the end purpose to predict coupling.\n","588ed03a":"# Compute atom partial charges with Open Babel ","77b5d8a4":"## Added step: cross validated predictions of the target variable\n* Could just use single best variable, but using multiple allows us to take advantage of any non colinear properties. i.e if they're not correlated, then combining them may improve prediction. \n* Likely bettered by: Adding in the OHE of the atome , and molecule base d properties (index number, surrounding atoms..) \n\n* Linear regression default score is R^2 : higher is better\n\n* Conclusion: using multiple methods in gives a better score than just the top method(s) alone \\[makes sense!]","12514cb6":"# Compare Mulliken charges to Open Babel EEM","77f496b0":"# Conclusion","8853e849":"# Definition of partial charge\n\nThere is no such thing as a space localized electron, they are rather something like a wave all around atomic nuclei. But there are some models for getting an approximation of the average charge at the location of atoms. This is this what is computed in this kernel under the name partial charge. \n\nOpen babel offers several methods to compute these values (you have to dig into the code to get them) which are all provided under the column with the matching name."}}