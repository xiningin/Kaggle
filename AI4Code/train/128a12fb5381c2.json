{"cell_type":{"cbd88d3f":"code","a2112d66":"code","3b37a041":"code","f6e07eac":"code","81260907":"code","12c14b05":"code","66dd8c7b":"markdown","4a4d8457":"markdown","c35b01ac":"markdown","ddd6d310":"markdown","30d9047d":"markdown","2a4fb0c4":"markdown","6fdd1aa2":"markdown","45805670":"markdown","51ec50f0":"markdown","27361e2c":"markdown","95dfc9cd":"markdown"},"source":{"cbd88d3f":"#==========================================================================\n# STEP-1: Installation of required packages & change of directory for ease\n#==========================================================================\n# library(tidyverse) #helps wrangle data\n# library(lubridate) #helps wrangle data attributes\n# library(ggplot2) #helps to visualize data\n# getwd() #displays your working directory\n# setwd(\"C:\/Users\/TEMP\/Downloads\/GDA\/Cyclistic Bike-Share\") #sets your working directory to simplify calls to data\n#setwd() should be used in desktop version of R","a2112d66":"#==========================================================================\n# STEP-2: Import data into R\n#==========================================================================\n# read_csv() imports data from .csv files\n\n# m5_2020 <- read_csv(\"202005-divvy-tripdata.csv\")\n# m6_2020 <- read_csv(\"202006-divvy-tripdata.csv\")\n# m7_2020 <- read_csv(\"202007-divvy-tripdata.csv\")\n# m8_2020 <- read_csv(\"202008-divvy-tripdata.csv\")\n# m9_2020 <- read_csv(\"202009-divvy-tripdata.csv\")\n# m10_2020 <- read_csv(\"202010-divvy-tripdata.csv\")\n# m11_2020 <- read_csv(\"202011-divvy-tripdata.csv\")\n# m12_2020 <- read_csv(\"202012-divvy-tripdata.csv\")\n# m1_2021 <- read_csv(\"202101-divvy-tripdata.csv\")\n# m2_2021 <- read_csv(\"202102-divvy-tripdata.csv\")\n# m3_2021 <- read_csv(\"202103-divvy-tripdata.csv\")\n# m4_2021 <- read_csv(\"202104-divvy-tripdata.csv\")","3b37a041":"# m4_2021 <- m4_2021 %>% select(-c(start_station_name, start_station_id, end_station_name, end_station_id))\n# m3_2021 <- m3_2021 %>% select(-c(start_station_name, start_station_id, end_station_name, end_station_id))\n# m2_2021 <- m2_2021 %>% select(-c(start_station_name, start_station_id, end_station_name, end_station_id))\n# m1_2021 <- m1_2021 %>% select(-c(start_station_name, start_station_id, end_station_name, end_station_id))\n# m12_2020 <- m12_2020 %>% select(-c(start_station_name, start_station_id, end_station_name, end_station_id))\n# m11_2020 <- m11_2020 %>% select(-c(start_station_name, start_station_id, end_station_name, end_station_id))\n# m10_2020 <- m10_2020 %>% select(-c(start_station_name, start_station_id, end_station_name, end_station_id))\n# m9_2020 <- m9_2020 %>% select(-c(start_station_name, start_station_id, end_station_name, end_station_id))\n# m8_2020 <- m8_2020 %>% select(-c(start_station_name, start_station_id, end_station_name, end_station_id))\n# m7_2020 <- m7_2020 %>% select(-c(start_station_name, start_station_id, end_station_name, end_station_id))\n# m6_2020 <- m6_2020 %>% select(-c(start_station_name, start_station_id, end_station_name, end_station_id))\n# m5_2020 <- m5_2020 %>% select(-c(start_station_name, start_station_id, end_station_name, end_station_id))\n\n# Combine dataframes\n# all_trips <- bind_rows(m5_2020, m6_2020, m7_2020, m8_2020, m9_2020, m10_2020, m11_2020, m12_2020, m1_2021, m2_2021, m3_2021, m4_2021)\n","f6e07eac":"#==========================================================================\n# Check unique output values generated\n#==========================================================================\n# table(all_trips$member_casual) #results in either \"member\" or \"casual\" \n# table(all_trips$rideable_type) #results in either \"classic_bike\", \"docked_bike\", or \"electric_bike\"\n\n#==========================================================================\n# Add data\n#==========================================================================\n# all_trips$date <- as.Date(all_trips$started_at)\n# all_trips$month <- format(as.Date(all_trips$date), \"%m\")\n# all_trips$day <- format(as.Date(all_trips$date), \"%d\")\n# all_trips$year <- format(as.Date(all_trips$date), \"%Y\")\n# all_trips$day_of_week <- format(as.Date(all_trips$date), \"%A\")\n\n# all_trips$ride_length <- difftime(all_trips$ended_at,all_trips$started_at)","81260907":"# all_trips_v2 <- all_trips[!(all_trips$rideable_type == \"docked_bike\" | all_trips$ride_length<0),]","12c14b05":"# all_trips_v2 %>% \n#      group_by(member_casual) %>% \n#      summarise(number_of_rides = n()\n#                ,average_duration = mean(ride_length))\n\n## A tibble: 2 x 3\n#  member_casual number_of_rides average_duration\n#  <chr>                   <int>            <dbl>\n#1 casual                 425600            1480.\n#2 member                 817979             839.\n\n# all_trips_v2 %>% \n#      group_by(member_casual, rideable_type) %>% \n#      summarise(number_of_rides = n())\n\n#`summarise()` has grouped output by 'member_casual'. You can override using the `.groups` argument.\n\n## A tibble: 4 x 3\n## Groups:   member_casual [2]\n#  member_casual rideable_type number_of_rides\n#  <chr>         <chr>                   <int>\n#1 casual        classic_bike           141576\n#2 casual        electric_bike          284024\n#3 member        classic_bike           392911\n#4 member        electric_bike          425068","66dd8c7b":"# Recommendations\n* Implement a new annual membership tier at a lower price point where a total number of rides are allotted for a given time period (e.g. week, month), versus current annual membership structure (unlimited number of rides, 45-min. limit per ride), and given that on average, casual riders spend more time on their rides than current members, but on average only 1480 sec.(24.67 min.)\n* Implement a limited time promotion for annual membership that loosens limits on Friday, Saturday, Sunday rides, given those are the most popular days casual riders use Cyclistic bikes\n* Add more electric bikes to inventory given casual riders prefer them over classic bikes\n\n### Other Considerations\n* Collect data on available inventory at docking station user is at at point of rental to analyze impact on resulting bike type choice\n* Collect data on full route of a bike during rental, not just start and end locations, to analyze if certain areas\/geospatial factors constitute certain bike types (e.g. terrain)\n* Include data on whether a casual rider uses a single-ride pass or full-day pass, to analyze how pricing may impact usage","4a4d8457":"# Scenario \nYou are a junior data analyst working in the marketing analyst team at Cyclistic, a bike-share company in Chicago. The director of\nmarketing believes the company\u2019s future success depends on maximizing the number of annual memberships. Therefore, your\nteam wants to understand how casual riders and annual members use Cyclistic bikes differently. From these insights, your team\nwill design a new marketing strategy to convert casual riders into annual members. But first, Cyclistic executives must approve\nyour recommendations, so they must be backed up with compelling data insights and professional data visualizations.","c35b01ac":"![Cyclistic Bike-Share Number of Rides Plot.png](attachment:ec568304-3e97-4230-8f29-e451db5cdf00.png)\n\n![Cyclistic Bike-Share Avg Ride Duration.png](attachment:957ffe38-2dc8-415e-9aa2-8916822fa63c.png)\n\n![Cyclistic Bike-Share Usage by Bike Type.png](attachment:8c66fce6-61ed-4615-9411-1379826466a1.png)","ddd6d310":"### Step 3: Wrangle Data and Combine into a Single Dataframe\nCompare column names and data types and consolidate\/make consistent\n   * column names and data types are shown upon import of each .csv file | or use str() function\n   * Drop the following columns:\n       * start_station_name\n       * start_station_id\n       * end_station_name\n       * end_station_id\n   * Why? Numerous rows show incomplete entries and similar identifying information can be gleaned from the start_lat, start_lng, end_lat, end_lng column entries","30d9047d":"The rideable_type \"docked_bike\" designates bikes that were taken out of circulation by Cyclistic to assess for quality control. There are also various trips where ride_length returns a negative duration. These entries need to be omitted from our dataframe. Doing so will bring the total rows from 3,742,202 to 1,243,579.","2a4fb0c4":"### Key Findings\n* Users with an annual membership complete more rides than casual riders\n* Among casual riders, Fridays, Saturdays, and Sundays are the most popular usage days\n* Casual riders, on average, spend about 76% more time on their rides than users with an annual membership\n* About 67% of total bike rides by casual riders were via electric bikes, compared to about 52% for total bike rides by users with an annual membership","6fdd1aa2":"# Prepare\/Process Data\n* Cyclistic's historical trip data (May 2020-April 2021) was provided to analyze and identify trends (internal\/first-party data provided as .csv spreadsheets)\n* This data includes de-identified User IDs, user type, bike type, and start & end details (times, positions, station names & IDs).\n* Original files are stored in a separate directory and copies are made of each dataset, in case the originals need to be referenced.\n* Given the large sizes of the datasets, I will be using R via RStudio to prepare, process, and analyze.","45805670":"**The following analysis is originally based on the case study \"'Sophisticated, Clear, and Polished\u2019: Divvy and Data Visualization\" written by Kevin Hartman (found here: https:\/\/artscience.blog\/home\/divvy-dataviz-case-study). We will be using the [Divvy dataset](http:\/\/divvy-tripdata.s3.amazonaws.com\/index.html) for the case study, as part of the Google Data Analytics Program. The data has been made publicly available by Motivate International Inc. under this [license](http:\/\/www.divvybikes.com\/data-license-agreement). Due to data-privacy, any personally-identifiable information has been removed\/encrypted.**","51ec50f0":"# Analysis","27361e2c":"### Step 4: Further Clean Up and Add Data to Prepare for Analysis\n* Check to make sure the proper number of observations are present\n* Add columns that list the date, month, day, day of the week, and year of each ride (this will allow us to aggregate data beyond the ride level)\n* Add a \"ride_length\" calculation to all_trips (in seconds)","95dfc9cd":"### Business Task\nHow do annual members and casual riders use Cyclistic bikes differently?"}}