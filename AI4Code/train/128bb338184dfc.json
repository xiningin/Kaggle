{"cell_type":{"fccaa4c2":"code","04fe18bd":"code","d498dd61":"code","cf7c14a0":"code","5c7f1467":"code","73ea788c":"markdown"},"source":{"fccaa4c2":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","04fe18bd":"import random","d498dd61":"class Player:\n    \n    def __init__(self, marker=\"X\", is_human=True):\n        self._marker = marker\n        self._is_human = is_human\n        \n    @property\n    def marker(self):\n        return self._marker\n    \n    @property\n    def is_human(self):\n        return self._is_human\n    \n    def get_player_move(self):\n        if self._is_human:\n            return self.get_human_move()\n        else:\n            return self.get_computer_move()\n    \n    def get_human_move(self):\n        move = input(\"Player move (X): \")\n        return move\n    \n    def get_computer_move(self):\n        row = random.choices([1,2,3])\n        col = random.choices([\"A\",\"B\",\"C\"])\n        move = str(row[0]) + str(col[0])\n        \n        print(\"Computer move (O): \", str(row) + str(col))\n        return move\n    ","cf7c14a0":"class Board:\n    \n    EMPTY = 0\n    COLUMNS = {\"A\": 0, \"B\": 1, \"C\": 2}\n    ROWS = (1, 2, 3)\n    \n    def __init__(self, game_board=None):\n        if game_board:\n            self.game_board = game_board\n        else:\n            self.game_board = [[0, 0, 0],\n                               [0, 0, 0],\n                               [0, 0, 0]]\n    \n    def print_board(self):\n        print(\"    A   B   C\")\n        for i, row in enumerate(self.game_board,1):\n            print(i, end=\" | \")\n            for col in row:\n                if col != Board.EMPTY:\n                    print(col, end= \"  | \")\n                else:\n                    print(\"  | \", end =\"\")\n            print(\"\\n--------------\")\n            \n    def submit_move(self, move, player):\n        if not self.is_move_valid(move):\n            print(\"Invalid Input: Please Enter the row and column of your move (Example: 1A)\")\n            return\n        else:\n            row_index = int(move[0])-1\n            col_index = Board.COLUMNS[move[1]]\n            \n            value = self.game_board[row_index][col_index]\n            \n            if value == Board.EMPTY:\n                self.game_board[row_index][col_index] = player.marker\n            else:\n                print(\"This space is already taken.\")\n    \n    def is_move_valid(self, move):\n        return ((len(move) == 2)\n            and (int(move[0]) in Board.ROWS)\n            and (move[1] in Board.COLUMNS)\n            )\n    \n    def is_winner(self, player, row, col):\n        if self.check_row(row, player):\n            return True\n        elif self.check_col(col, player):\n            return True\n        elif self.check_diagonal(player):\n            return True\n        elif self.check_antidiagonal(player):\n            return True\n        else:\n            return False\n    \n    def check_row(self, row, player):\n        row_index = int(row)-1\n        board_row = self.game_board[row_index]\n        \n        if board_row.count(player.marker) == 3:\n            return True\n        else:\n            return False\n    \n    def check_col(self, col, player):\n        col_index = Board.COLUMNS[col]\n        total_markers = 0\n        \n        for i in range(3):\n            if self.game_board[i][col_index] == player.marker:\n                total_markers +=1\n                \n        if total_markers == 3: \n            return True\n        else:\n            return False\n    \n    def check_diagonal(self, player):\n        total_markers = 0\n        \n        for i in range(3):\n            if self.game_board[i][i] == player.marker:\n                total_markers += 1\n        \n        if total_markers == 3: \n            return True\n        else:\n            return False             \n    \n    def check_antidiagonal(self, player):\n        total_markers = 0\n        \n        for i in range(3):\n            if self.game_board[i][2-i] == player.marker:\n                total_markers += 1\n        \n        if total_markers == 3: \n            return True\n        else:\n            return False  \n        \n","5c7f1467":"print(\"********************\")\nprint(\"    Tic-Tac-Toe!\")\nprint(\"********************\")\n   \nboard = Board()\nplayer = Player()\ncomputer = Player(\"O\", False)\n\nboard.print_board()\n\nwhile True:\n    move = player.get_player_move()\n    board.submit_move(move, player)\n    board.print_board()\n        \n    if board.is_move_valid(move) and board.is_winner(player, move[0], move[1]):\n        print(\"You win!\")\n        break\n        \n    comp_move = computer.get_player_move()\n    board.submit_move(comp_move, computer)\n    board.print_board()\n        \n    if board.is_winner(computer,comp_move[0],comp_move[1]):\n        print(\"The Computer Won!\")\n        break\n\n\n        \n","73ea788c":"# Tic Tac Toe - Object Oriented Programming"}}