{"cell_type":{"04280ed4":"code","cf11a19b":"code","fb13abe4":"code","16accf78":"code","ff8ce4bb":"code","b3a967f4":"code","d5032445":"code","1730b24c":"code","66a9220b":"markdown","0a00d7dd":"markdown","77ee5f76":"markdown"},"source":{"04280ed4":"import tracemalloc\nimport numpy as np\nimport pandas as pd\nimport tensorflow as tf\nimport matplotlib.pyplot as plt\nfrom IPython.display import clear_output\nclear_output()\ntf.__version__","cf11a19b":"df = pd.read_csv('..\/input\/heart-disease-uci\/heart.csv')\ndf.head()","fb13abe4":"X = df.drop('target',axis = 1)\ny = df['target']","16accf78":"feature = []\nfor i in range(len(X.columns)):\n    feature.append(str(i))\n\ncol_rename = {i: j for i, j in zip(X.columns, feature)}\nX = X.rename(columns=col_rename, inplace=False)\nX = X.astype(\"int64\")\ny = y.astype(\"int64\")","ff8ce4bb":"def _make_input_fn(X, y, n_epochs=None, shuffle=True):\n    def input_fn():\n        NUM_EXAMPLES = len(y)\n        dataset = tf.data.Dataset.from_tensor_slices((dict(X), y))\n        if shuffle:\n            dataset = dataset.shuffle(NUM_EXAMPLES)\n        # For training, cycle thru dataset as many times as need (n_epochs=None).\n        dataset = dataset.repeat(n_epochs)\n        # In memory training doesn't use batching.\n        dataset = dataset.batch(NUM_EXAMPLES)\n        return dataset\n    return input_fn","b3a967f4":"train_input_fn = _make_input_fn(X, y)\n\nnum_columns = feature\nfeature_columns = []\nn_classes = len(np.unique(y))\n\nfor feature_name in num_columns:\n    feature_columns.append(tf.feature_column.numeric_column(feature_name,\n                                                            dtype=tf.float32))","d5032445":"T = 100\nstep = 1\nt = range(1, T + 1, step)\nmem = np.zeros((T,))\nfor i, tree in enumerate(t):\n    tracemalloc.start()\n    tracemalloc.clear_traces()\n    zero_size = tracemalloc.get_traced_memory()[0]\n\n    est = tf.estimator.BoostedTreesClassifier(feature_columns,\n                                              n_batches_per_layer=1,\n                                              n_classes=n_classes,\n                                              n_trees=tree,\n                                              max_depth=10,\n                                              learning_rate=0.1,\n                                              label_vocabulary=None,\n                                              center_bias=False\n                                              )\n    est.train(train_input_fn, max_steps=None,\n              steps=100)\n    mem[i] = tracemalloc.get_traced_memory()[0] - zero_size\n    clear_output()","1730b24c":"fig, ax1 = plt.subplots()\nax1.set_xlabel(\"Booosting iteration\")\nax1.set_ylabel(\"Memory usage (in MB)\")\nln1 = ax1.plot(mem[1:], color='black',\n               linewidth=1, drawstyle=\"steps-mid\")\nplt.title(\"Recorded used memory blocks - Dataset: heart-disease-uci\")\nplt.grid(True, linewidth=1, color='gainsboro', alpha=0.5)","66a9220b":"# Training the model","0a00d7dd":"# Preparing the inputs of the model","77ee5f76":"# Memory usage"}}