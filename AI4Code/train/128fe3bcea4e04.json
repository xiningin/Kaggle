{"cell_type":{"1becbb8f":"code","8dd7e2b5":"code","949a2d39":"code","a15977a2":"code","9955f1aa":"code","2ef7c198":"code","c30777ef":"code","2a70d187":"markdown","c345c263":"markdown","55a0b872":"markdown","65ba83c5":"markdown","0f330988":"markdown","a38b1cc4":"markdown","c8997dff":"markdown","a094f925":"markdown"},"source":{"1becbb8f":"from PIL import Image, ImageDraw, ImageChops\nimport matplotlib.pyplot as plt\nimport numpy as np\nimport random\nimport colorsys","8dd7e2b5":"def setup():\n    global image_size, padding\n    image_size = 512\n    padding = 32","949a2d39":"from IPython.display import display","a15977a2":"image1 = Image.new('RGB', size=(256, 256), color=(255, 0, 0))\nimage2 = Image.new('RGB', size=(256, 256), color=(0, 255, 0))\nimage3 = Image.new('RGB', size=(256, 256), color=(0, 0, 255))\ndisplay(image1)\ndisplay(image2)\ndisplay(image3)","9955f1aa":"draw1 = ImageDraw.Draw(image1)\nline1 = ((0, 0), (256, 256))\ndraw1.line(line1, width=20)\ndisplay(image1)\n\ndraw2 = ImageDraw.Draw(image2)\nline2 = ((256, 0), (0, 256))\ndraw2.line(line2, width=20)\ndisplay(image2)\n\ndraw3 = ImageDraw.Draw(image3)\nline3 = ((0, 0), (256, 256))\ndraw3.line(line3, width=20)\ndisplay(image3)","2ef7c198":"def generate_point(num_points):\n    points=[]\n    for i in range(num_points):\n        points.append((random.randint(0+padding, image_size-padding), random.randint(0+padding, image_size-padding)))\n    return points\n\ndef random_color():\n    h = random.random() ## Only bright colors, since the canvas is black\n    s = 1\n    v = 1\n    float_rgb = colorsys.hsv_to_rgb(h, s, v)\n    rgb = [int(s*255) for s in float_rgb]\n    return tuple(rgb)\n\ndef interpolate(start_color, end_color, factor: float):\n    recip = 1-factor\n    return (\n        int(start_color[0] * recip + end_color[0] * factor),\n        int(start_color[1] * recip + end_color[1] * factor),\n        int(start_color[2] * recip + end_color[2] * factor),\n    )\n    \ndef generate_art(path):\n    print('Generating art!')\n    \n    setup()\n    ## Image background\n    image_bg = (0, 0, 0)\n    image = Image.new('RGB', size=(image_size, image_size), color=image_bg)\n    \n    draw = ImageDraw.Draw(image)\n    points = generate_point(10) # Draw 10 lines\n    \n    start_color = random_color()\n    end_color = random_color()\n    \n    for i in range(len(points)):\n        \n        overlay_image = Image.new('RGB', size=(image_size, image_size), color=image_bg)\n        overlay_draw = ImageDraw.Draw(overlay_image)\n        \n        if i==(len(points)-1):\n            p1 = points[i]\n            p2 = points[0]\n        else:\n            p1 = points[i]\n            p2 = points[i+1]\n        factor = i\/(len(points)-1)\n        line_color = interpolate(start_color, end_color, factor)\n        line = (p1, p2)\n        overlay_draw.line(line, fill=line_color, width=i+1)\n        image = ImageChops.add(image, overlay_image)\n    \n    image.resize((image_size, image_size), resample=Image.ANTIALIAS)\n    image.save(path)","c30777ef":"## Creating 12 art and showcasing\nfor i in range(12):\n    generate_art(f'image_{i}.png')\n\nfig = plt.figure(figsize=(20, 20))\ncolumns = 4\nrows = 3\nfor i in range(0, 12):\n    img = np.array(Image.open(f'.\/image_{i}.png'))\n    fig.add_subplot(rows, columns, i+1)\n    plt.imshow(img)\n    plt.axis('off')\nplt.tight_layout()","2a70d187":"# Generative Image Generation\n\nIn this notebook, we will be generating Images fit for creating NFTs (Non-fungible tokens) since we can create thousands of images in just one click. Let us go through the steps we need to do to create the images.","c345c263":"## Let's create the canvas\n\nWe can create canvas using `Image` from `PIL` as shown","55a0b872":"## Now we will create the NFTs\n\nWe will have 4 funtions:\n\n1. `generate_point` : This will generate a random point within the drawing space of the canvas\n2. `random_color` : This will assign a random `start_color` and a random `end_color` (others colors will be interpolated)\n3. `interpolate` : This will generate colors between the `start_color` and the `end_color` and that will give us a gradient of colors\n4. `generate_art` : This is the function that we will call. It accepts the path at which we will save the generated image as an argument. It calls the other functions inside it.","65ba83c5":"## Creating NFTs and showcasing :)","0f330988":"## Importing the Libraries\n\nFirst of we will start with importing libraries. We will be using PIL library to do most the work","a38b1cc4":"## Setup\n\nSetting up the target image size, padding size","c8997dff":"## Let's see what things we can do using PIL","a094f925":"## Now we can draw lines on the canvas. "}}