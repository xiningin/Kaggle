{"cell_type":{"19694db1":"code","f6d93c36":"code","1c6bfc6a":"code","f6d69323":"code","b6677786":"code","b89cba4d":"code","ae466d68":"code","6fcf5254":"code","33182875":"code","eb8ebef6":"code","5a6bc1e0":"markdown","d64cb402":"markdown","ccf7011a":"markdown","fa021aef":"markdown"},"source":{"19694db1":"from glob import glob\nimport os\nimport numpy as np\nimport pandas as pd\nimport random\nfrom skimage.io import imread\n\nimport matplotlib.pyplot as plt\n%matplotlib inline\n\nfrom tensorflow.python.keras.applications import ResNet50\nfrom tensorflow.python.keras.applications.resnet50 import preprocess_input, decode_predictions\nfrom tensorflow.python.keras.models import Sequential\nfrom tensorflow.python.keras.layers import Dense, Flatten, GlobalAveragePooling2D\nfrom tensorflow.python.keras.preprocessing.image import ImageDataGenerator, img_to_array, load_img\n\nnum_classes = 2\nresnet_weights_path = '..\/input\/resnet50\/resnet50_weights_tf_dim_ordering_tf_kernels_notop.h5'\n\nmodel = Sequential()\nmodel.add(ResNet50(include_top=False, pooling='avg', weights=resnet_weights_path))\nmodel.add(Dense(num_classes, activation='softmax'))\n\nmodel.layers[0].trainable = False\n\nmodel.compile(optimizer='sgd', loss='categorical_crossentropy', metrics=['accuracy'])","f6d93c36":"# Path to data\ndata_dir  = '..\/input\/chest-xray-pneumonia\/chest_xray\/chest_xray\/'\ntrain_dir = data_dir+'train\/'\ntest_dir  = data_dir+'test\/'\nval_dir   = data_dir + 'val\/'\n\n# Get the path to the normal and pneumonia sub-directories\nnormal_cases_dir = train_dir + 'NORMAL\/'\npneumonia_cases_dir = train_dir + 'PNEUMONIA\/'\n\nprint(\"Datasets:\",os.listdir(data_dir))\nprint(\"Train:\\t\", os.listdir(train_dir))\nprint(\"Test:\\t\", os.listdir(test_dir))","1c6bfc6a":"img_name = 'NORMAL2-IM-0588-0001.jpeg'\nimg_normal = load_img(normal_cases_dir + img_name)\n\nprint('NORMAL')\nplt.imshow(img_normal)\nplt.show()","f6d69323":"img_name = 'person1044_virus_1740.jpeg'\nimg_pneumonia = load_img(pneumonia_cases_dir + img_name)\n\nprint('PNEUMONIA')\nplt.imshow(img_pneumonia)\nplt.show()","b6677786":"# Get the list of all the images\nnormal_cases = glob(normal_cases_dir+'\/*.jpeg')\npneumonia_cases = glob(pneumonia_cases_dir+'\/*.jpeg')\n\n# An empty list. We will insert the data into this list in (img_path, label) format\ntrain_data = []\n\n# Go through all the normal cases. The label for these cases will be 0\nfor img in normal_cases:\n    train_data.append((img,0))\n\n# Go through all the pneumonia cases. The label for these cases will be 1\nfor img in pneumonia_cases:\n    train_data.append((img, 1))\n\n# Get a pandas dataframe from the data we have in our list \ntrain_data = pd.DataFrame(train_data, columns=['image', 'label'],index=None)\n\n# Shuffle the data \ntrain_data = train_data.sample(frac=1.).reset_index(drop=True)\n\n# Get few samples for both the classes\npneumonia_samples = (train_data[train_data['label']==1]['image'].iloc[:5]).tolist()\nnormal_samples = (train_data[train_data['label']==0]['image'].iloc[:5]).tolist()\n\n# Concat the data in a single list and del the above two list\nsamples = pneumonia_samples + normal_samples\ndel pneumonia_samples, normal_samples\n\n# Plot the data \nf, ax = plt.subplots(2,5, figsize=(30,10))\nfor i in range(10):\n    img = imread(samples[i])\n    ax[i\/\/5, i%5].imshow(img, cmap='gray')\n    if i<5:\n        ax[i\/\/5, i%5].set_title(\"Pneumonia\")\n    else:\n        ax[i\/\/5, i%5].set_title(\"Normal\")\n    ax[i\/\/5, i%5].axis('off')\n    ax[i\/\/5, i%5].set_aspect('auto')\nplt.show()","b89cba4d":"image_size = 150\nnb_train_samples = 5216 # number of files in training set\nbatch_size = 16\n\nEPOCHS = 6\nSTEPS = nb_train_samples \/ batch_size\n\n## Specify the values for all arguments to data_generator_with_aug.\ndata_generator_with_aug = ImageDataGenerator(preprocessing_function=preprocess_input,\n                                             horizontal_flip = True,\n                                             width_shift_range = 0.2,\n                                             height_shift_range = 0.2,\n                                             shear_range = 0.2,\n                                             zoom_range = 0.2\n                                            )\n            \ndata_generator_no_aug = ImageDataGenerator(preprocessing_function=preprocess_input            \n                                          )\n\ntrain_generator = data_generator_with_aug.flow_from_directory(\n       directory = '..\/input\/chest-xray-pneumonia\/chest_xray\/chest_xray\/train\/',\n       target_size = (image_size, image_size),\n       batch_size = batch_size,\n       class_mode = 'categorical')\n\nvalidation_generator = data_generator_no_aug.flow_from_directory(\n       directory = '..\/input\/chest-xray-pneumonia\/chest_xray\/chest_xray\/val\/',\n       target_size = (image_size, image_size),\n       class_mode = 'categorical')\n\ntest_generator = data_generator_no_aug.flow_from_directory(\n       directory = '..\/input\/chest-xray-pneumonia\/chest_xray\/chest_xray\/test\/',\n       target_size = (image_size, image_size),\n       batch_size = batch_size,\n       class_mode = 'categorical')\n\nmodel.fit_generator(\n       train_generator, # specify where model gets training data\n       epochs = EPOCHS,\n       steps_per_epoch=STEPS,\n       validation_data=validation_generator) # specify where model gets validation data\n\n# Evaluate the model\nscores = model.evaluate_generator(test_generator)\nprint(\"\\n%s: %.2f%%\" % (model.metrics_names[1], scores[1]*100))","ae466d68":"from tensorflow.python.keras.models import load_model\nmodel.save('xray_model.h5')\n# model = load_model('xray_model.h5')","6fcf5254":"# Accuracy \nplt.plot(model.history.history['acc'])\nplt.plot(model.history.history['val_acc'])\nplt.title('Model Accuracy')\nplt.ylabel('Accuracy')\nplt.xlabel('Epoch')\nplt.legend(['Training set', 'Validation set'], loc='upper left')\nplt.show()","33182875":"# Loss \nplt.plot(model.history.history['loss'])\nplt.plot(model.history.history['val_loss'])\nplt.title('Model Loss')\nplt.ylabel('Loss')\nplt.xlabel('Epoch')\nplt.legend(['Training set', 'Test set'], loc='upper left')\nplt.show()","eb8ebef6":"def choose_image_and_predict():\n    normal_or_pneumonia = ['NORMAL', 'PNEUMONIA']\n    folder_choice = (random.choice(normal_or_pneumonia))\n    \n    pneumonia_images = glob('..\/input\/chest-xray-pneumonia\/chest_xray\/chest_xray\/val\/'+folder_choice+'\/*')\n    img_choice = (random.choice(pneumonia_images))\n\n    img = load_img(img_choice, target_size=(150, 150))\n    img = img_to_array(img)\n    plt.imshow(img \/ 255.)\n    x = preprocess_input(np.expand_dims(img.copy(), axis=0))\n    pred_class = model.predict_classes(x)\n    pred = model.predict(x)\n    print(\"Actual class:\", folder_choice)\n    if pred_class[0] == 0:\n        print(\"Predicted class: Normal\")\n        print(\"Likelihood:\", pred[0][0].round(4))\n        if pred[0][0].round(4) < 0.8:\n            print(\"WARNING, low confidence\")\n    else:\n        print(\"Predicted class: Pneumonia\")\n        print('Likelihood:', pred[0][1].round(4))\n        if pred[0][1].round(4) < 0.8:\n            print(\"WARNING, low confidence\")        \n        \nchoose_image_and_predict()","5a6bc1e0":"# Simple Keras Resnet-50 for Pneumonia\n\nThis is my first go at using deep learning. **I would really appreciate any advice, feedback or ideas! **","d64cb402":"## Fit the model using data augmentation","ccf7011a":"## Make Predictions","fa021aef":"## Looking at the data"}}