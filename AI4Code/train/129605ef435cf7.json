{"cell_type":{"26cb9587":"code","7d845794":"code","52525aea":"code","b1992c56":"code","a9ab57be":"code","49af35cd":"code","ebb4b452":"code","7317e8b4":"code","04cee102":"code","829d838f":"code","5e55018c":"code","a2dd1526":"code","b331253c":"code","852a0fb2":"code","50f91841":"code","6420c0b1":"code","7d0dcd70":"code","a01f30f2":"code","59b3c58c":"markdown","d7f01b23":"markdown","df7ba12c":"markdown","3d316f75":"markdown","3c64f197":"markdown","6f881add":"markdown","a14e8164":"markdown","fa3dcad3":"markdown","74856e20":"markdown","031ebc00":"markdown","f041e592":"markdown","9b76a4ae":"markdown","0f558059":"markdown","f6cda4b1":"markdown","6ec40e39":"markdown","f8838805":"markdown","25089be2":"markdown","49248f85":"markdown"},"source":{"26cb9587":"'''import os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))'''","7d845794":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\n%matplotlib inline\nimport seaborn as sns\nimport tensorflow as tf","52525aea":"df_train = pd.read_csv(\"\/kaggle\/input\/digit-recognizer\/train.csv\") #..\/input\/digit-recognizer\/train.csv\ndf_test = pd.read_csv(\"\/kaggle\/input\/digit-recognizer\/test.csv\")\ndf_submission = pd.read_csv(\"\/kaggle\/input\/digit-recognizer\/sample_submission.csv\")","b1992c56":"df_submission","a9ab57be":"display(\"Train File\", df_train.head())\ndisplay(\"Test File\", df_test.head())","49af35cd":"print(\"Train File\", df_train.shape)\nprint(\"Test File\", df_test.shape)","ebb4b452":"print(\"Train File\", df_train.isnull().any().sum())\nprint(\"Test File\", df_test.isnull().any().sum())","7317e8b4":"display(\"Train File\", df_train.describe())\ndisplay(\"Test File\", df_test.describe())","04cee102":"sns.countplot(df_train['label'])","829d838f":"y_train = df_train['label'].astype('float32')\nX_train = df_train.drop(['label'], axis=1).astype('int32')\nX_test = df_test.astype('float32')\nX_train.shape, y_train.shape, X_test.shape","5e55018c":"X_train = X_train\/255\nX_test = X_test\/255","a2dd1526":"X_train = X_train.values.reshape(-1,28,28,1)\nX_test = X_test.values.reshape(-1,28,28,1)\nX_train.shape , X_test.shape","b331253c":"from keras.utils.np_utils import to_categorical\ny_train = to_categorical(y_train, num_classes = 10)\ny_train.shape","852a0fb2":"from sklearn.model_selection import train_test_split\nX_train, X_cv, y_train, y_cv = train_test_split(X_train, y_train, test_size = 0.1, random_state=42)","50f91841":"from keras.layers import Input,InputLayer, Dense, Activation, ZeroPadding2D, BatchNormalization, Flatten, Conv2D\nfrom keras.layers import AveragePooling2D, MaxPooling2D, Dropout\nfrom keras.models import Sequential,Model\nfrom keras.optimizers import SGD\nfrom keras.callbacks import ModelCheckpoint,LearningRateScheduler\nimport keras\nfrom keras import backend as K","6420c0b1":"# Building a CNN model\ninput_shape = (28,28,1)\nX_input = Input(input_shape)\n\n# layer 1\nx = Conv2D(64,(3,3),strides=(1,1),name='layer_conv1',padding='same')(X_input)\nx = BatchNormalization()(x)\nx = Activation('relu')(x)\nx = MaxPooling2D((2,2),name='maxPool1')(x)\n# layer 2\nx = Conv2D(32,(3,3),strides=(1,1),name='layer_conv2',padding='same')(x)\nx = BatchNormalization()(x)\nx = Activation('relu')(x)\nx = MaxPooling2D((2,2),name='maxPool2')(x)\n# layer 3\nx = Conv2D(32,(3,3),strides=(1,1),name='conv3',padding='same')(x)\nx = BatchNormalization()(x)\nx = Activation('relu')(x)\nx = MaxPooling2D((2,2), name='maxPool3')(x)\n# fc\nx = Flatten()(x)\nx = Dense(64,activation ='relu',name='fc0')(x)\nx = Dropout(0.25)(x)\nx = Dense(32,activation ='relu',name='fc1')(x)\nx = Dropout(0.25)(x)\nx = Dense(10,activation ='softmax',name='fc2')(x)\n\nconv_model = Model(inputs=X_input, outputs=x, name='Predict')\nconv_model.summary()","7d0dcd70":"# Adam optimizer\nconv_model.compile(optimizer='adam',loss='categorical_crossentropy',metrics=['accuracy'])\nconv_model.fit(X_train, y_train, epochs=10, batch_size=100, validation_data=(X_cv,y_cv))","a01f30f2":"y_pred = conv_model.predict(X_test)\ny_pred = np.argmax(y_pred,axis=1)\nmy_submission = pd.DataFrame({'ImageId': list(range(1, len(y_pred)+1)), 'Label': y_pred})\nmy_submission.to_csv('submission.csv', index=False)","59b3c58c":"# EDA","d7f01b23":"#### Segregating Data","df7ba12c":"#### Predicting labels and saving in csv file","3d316f75":"#### Model Layers","3c64f197":"#### Normalizing Data","6f881add":"#### Data description","a14e8164":"#### Checking for NULL values","fa3dcad3":"#### Looking into data","74856e20":"# IMPORTING LIBRARIES","031ebc00":"#### One Hot Encoding","f041e592":"#### Adam Optimizer (it converges more efficiently)","9b76a4ae":"#### Shape of files","0f558059":"#### Model Preparation Libraries","f6cda4b1":"#### Label plot","6ec40e39":"# Preprocessing","f8838805":"# LOADING DATA","25089be2":"## -> GETTING VIEW OF SUBMISSION FILE","49248f85":"#### Reshaping data(as images)"}}