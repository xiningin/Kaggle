{"cell_type":{"f637b77d":"code","10d6c5e9":"code","b396ebc1":"code","c3c54432":"code","0550bbe6":"code","5935d4d8":"code","3d8565af":"code","fe6545a2":"code","bdbf8642":"code","f7d8bf4d":"code","79898642":"code","33642969":"code","5842ba99":"code","a3c3f7ff":"code","f1c80fd6":"code","89e27d2a":"code","7cfaefda":"code","81a18d8c":"code","7453e4ca":"code","c8667db3":"code","6e938087":"code","702e96ec":"code","fdf9e425":"code","b42dbedd":"code","66ff5078":"code","6a697ce8":"markdown","e8f953a7":"markdown","2f328a0b":"markdown","0ae4af0d":"markdown","c2fa084f":"markdown","0b82429a":"markdown","d031eabc":"markdown","67816dc3":"markdown","36112865":"markdown","b6ef0b16":"markdown","7fd3feb2":"markdown","72f78b3f":"markdown","78f57b74":"markdown","44b7de62":"markdown","de77db6c":"markdown","de283ad8":"markdown","88e4ea39":"markdown","bf4e2e3e":"markdown","75e91363":"markdown","ff6e7f89":"markdown","6bf9d516":"markdown","2238b6a0":"markdown","e26faf0d":"markdown","f1b38a0e":"markdown","52d2982b":"markdown","98178361":"markdown","c4d1ff3e":"markdown","813530b8":"markdown","0e788712":"markdown","b2a6ba06":"markdown","f76d80ff":"markdown","1354fbbe":"markdown","3260ea5f":"markdown","fcdbc00d":"markdown","7f0ac2df":"markdown","6dde4928":"markdown"},"source":{"f637b77d":"import numpy as np\nimport tensorflow as tf\nfrom tensorflow import keras","10d6c5e9":"#obtaining a labeled dataset from image files on disk\n\n#1-Create a dataset.\ndataset = keras.preprocessing.image_dataset_from_directory('..\/input\/', batch_size=6, image_size=(200, 200))\n\n# 2-iterate over the batches yielded by the dataset.\nfor data, labels in dataset:\n   print(data.shape) # (6, 200, 200, 3)\n   print(data.dtype)  # float32\n   print(labels.shape)  # (6,)\n   print(labels.dtype)  # int32","b396ebc1":"from tensorflow.keras.layers.experimental.preprocessing import TextVectorization\n\ntraining_data = np.array([[\"This is Ammar Alhaj Ali.\"], [\"This is My First Example\"]])\n\n# Create a TextVectorization layer instance.\n# The text standardization and text splitting algorithms are fully configurable.\nvectorizer = TextVectorization(output_mode=\"int\")\n\n# Calling `adapt` on an array or dataset makes the layer generate a vocabulary index for the data.\nvectorizer.adapt(training_data)\n\n# After calling adapt, the layer is able to encode any n-gram it has seen before in the `adapt()` data.\ninteger_data = vectorizer(training_data)\nprint(integer_data)","c3c54432":"from tensorflow.keras.layers.experimental.preprocessing import TextVectorization\n\ntraining_data = np.array([[\"This is Ammar Alhaj Ali.\"], [\"This is My First Example\"]])\n\n# Create a TextVectorization layer instance. \n# The text standardization and text splitting algorithms are fully configurable.\nvectorizer = TextVectorization(output_mode=\"binary\", ngrams=2)\n\n# Calling `adapt` on an array or dataset makes the layer generate a vocabulary index for the data.\nvectorizer.adapt(training_data)\n\n# After calling adapt, the layer is able to encode any n-gram it has seen before in the `adapt()` data.\ninteger_data = vectorizer(training_data)\nprint(integer_data)","0550bbe6":"from tensorflow.keras.layers.experimental.preprocessing import Normalization\n\ntraining_data = np.random.randint(0, 256, size=(6, 200, 200, 3)).astype(\"float32\")\n\nnormalizer = Normalization(axis=-1)\nnormalizer.adapt(training_data)\n\nnormalized_data = normalizer(training_data)\nprint(\"var: %.4f\" % np.var(normalized_data))\nprint(\"mean: %.4f\" % np.mean(normalized_data))","5935d4d8":"from tensorflow.keras.layers.experimental.preprocessing import CenterCrop\nfrom tensorflow.keras.layers.experimental.preprocessing import Rescaling\n\ntraining_data = np.random.randint(0, 256, size=(6, 200, 200, 3)).astype(\"float32\")\n\ncropper = CenterCrop(height=150, width=150)\nscaler = Rescaling(scale=1.0 \/ 255)\n\noutput_data = scaler(cropper(training_data))\nprint(\"shape:\", output_data.shape)\nprint(\"min:\", np.min(output_data))\nprint(\"max:\", np.max(output_data))","3d8565af":"# here's a layer that maps its inputs to a 16-dimensional feature\ndense = keras.layers.Dense(units=16)","fe6545a2":"# an input for 200x200 RGB image would have shape (200, 200, 3).\n# Let's say we expect our inputs to be RGB images of arbitrary size.\ninputs = keras.Input(shape=(None, None, 3))","bdbf8642":"from tensorflow.keras import layers\n\n# Center-crop images to 150x150\nx = CenterCrop(height=150, width=150)(inputs)\n# Rescale images to [0, 1]\nx = Rescaling(scale=1.0 \/ 255)(x)\n\n# Apply some convolution and pooling layers\nx = layers.Conv2D(filters=32, kernel_size=(3, 3), activation=\"relu\")(x)\nx = layers.MaxPooling2D(pool_size=(3, 3))(x)\nx = layers.Conv2D(filters=32, kernel_size=(3, 3), activation=\"relu\")(x)\nx = layers.MaxPooling2D(pool_size=(3, 3))(x)\nx = layers.Conv2D(filters=32, kernel_size=(3, 3), activation=\"relu\")(x)\n\n# Apply global average pooling to get flat feature vectors\nx = layers.GlobalAveragePooling2D()(x)\n\n# Add a dense classifier on top\nnum_classes = 10\noutputs = layers.Dense(num_classes, activation=\"softmax\")(x)","f7d8bf4d":"model = keras.Model(inputs=inputs, outputs=outputs)","79898642":"data = np.random.randint(0, 256, size=(64, 200, 200, 3)).astype(\"float32\")\nprocessed_data = model(data)\nprint(processed_data.shape)","33642969":"model.summary()","5842ba99":"#This is the compile() step:\nmodel.compile(optimizer=keras.optimizers.RMSprop(learning_rate=1e-3),\n              loss=keras.losses.CategoricalCrossentropy())","a3c3f7ff":"model.compile(optimizer='rmsprop', loss='categorical_crossentropy')","f1c80fd6":"\n# model.fit(numpy_array_of_samples, numpy_array_of_labels,batch_size=32, epochs=10)","89e27d2a":"# Here's what fitting a model looks like with a dataset:\n# model.fit(dataset_of_samples_and_labels, epochs=10)","7cfaefda":"# Get the data as Numpy arrays\n(x_train, y_train), (x_test, y_test) = keras.datasets.mnist.load_data()\n\n# Build a simple model\ninputs = keras.Input(shape=(28, 28))\nx = layers.experimental.preprocessing.Rescaling(1.0 \/ 255)(inputs)\nx = layers.Flatten()(x)\nx = layers.Dense(128, activation=\"relu\")(x)\nx = layers.Dense(128, activation=\"relu\")(x)\noutputs = layers.Dense(10, activation=\"softmax\")(x)\nmodel = keras.Model(inputs, outputs)\nmodel.summary()\n\n# Compile the model\nmodel.compile(optimizer=\"adam\", loss=\"sparse_categorical_crossentropy\")\n\n# Train the model for 1 epoch from Numpy data\nbatch_size = 64\nprint(\"Fit on NumPy data\")\nhistory = model.fit(x_train, y_train, batch_size=batch_size, epochs=1)\n\n# Train the model for 1 epoch using a dataset\ndataset = tf.data.Dataset.from_tensor_slices((x_train, y_train)).batch(batch_size)\nprint(\"Fit on Dataset\")\nhistory = model.fit(dataset, epochs=1)","81a18d8c":"print(history.history)","7453e4ca":"model.compile(\n    optimizer=\"adam\",\n    loss=\"sparse_categorical_crossentropy\",\n    metrics=[keras.metrics.SparseCategoricalAccuracy(name=\"acc\")],\n)\nhistory = model.fit(dataset, epochs=1)","c8667db3":"val_dataset = tf.data.Dataset.from_tensor_slices((x_test, y_test)).batch(batch_size)\nhistory = model.fit(dataset, epochs=1, validation_data=val_dataset)","6e938087":"callbacks = [\n    keras.callbacks.ModelCheckpoint(\n        filepath='path\/to\/my\/model_{epoch}',\n        save_freq='epoch')\n]\nmodel.fit(dataset, epochs=2, callbacks=callbacks)","702e96ec":"callbacks = [\n    keras.callbacks.TensorBoard(log_dir='.\/logs')\n]\nmodel.fit(dataset, epochs=2, callbacks=callbacks)","fdf9e425":"# tensorboard --logdir=.\/logs","b42dbedd":"loss, acc = model.evaluate(val_dataset)  # returns loss and metrics\nprint(\"loss: %.2f\" % loss)\nprint(\"acc: %.2f\" % acc)","66ff5078":"predictions = model.predict(val_dataset)\nprint(predictions.shape)","6a697ce8":"## 4-Building models with the Keras Functional API.","e8f953a7":"### Using callbacks for checkpointing (and more)\n - If training goes on for more than a few minutes, it's important to save your model at regular intervals during training. You can then use your saved models to restart training in case your training process crashes.\n - An important feature of Keras is callbacks, configured in fit(). Callbacks are objects that get called by the model at different point during training","2f328a0b":"### Monitoring training progress with TensorBoard\n\n- Staring at the Keras progress bar isn't the most ergonomic way to monitor how your loss and metrics are evolving over time. There's a better solution: TensorBoard, a web application that can display real-time graphs of your metrics (and more).\n\n- To use TensorBoard with fit(), simply pass a keras.callbacks.TensorBoard callback specifying the directory where to store TensorBoard logs:","0ae4af0d":"- Since the data yielded by a dataset is expected to be already batched, you don't need to specify the batch size here.","c2fa084f":"## 2-Data loading\n - Keras models accept three types of inputs:\n    1. NumPy arrays\n    2. TensorFlow Dataset objects\n    3. Python generators ","0b82429a":"-You can pass validation data to fit() to monitor your validation loss & validation metrics. Validation metrics get reported at the end of each epoch.","d031eabc":"- Loss and optimizer can be specified via their string identifiers (in this case their default constructor argument values are used):","67816dc3":"- Simply, A \"layer\" is a simple input-output transformation (like the scaling & center-cropping transformations ). ","36112865":"Reference:https:\/\/keras.io\/getting_started\/intro_to_keras_for_engineers\/","b6ef0b16":"- You can then launch a TensorBoard instance that you can open in your browser to monitor the logs getting written to this location:","7fd3feb2":"- Besides the data, you have to specify two key parameters: the batch_size and the number of epochs (iterations on the data). Here our data will get sliced on batches of 32 samples, and the model will iterate 10 times over the data during training.","72f78b3f":"## 3-Data preprocessing.\n   - definitely, Neural networks don't process raw data(text files,JPEG image files, or CSV files)\n        1. Text files need to be read into string tensors, then split into words. Finally, the words need to be indexed & turned into integer tensors.\n        2. Images need to be read and decoded into integer tensors, then converted to floating point and normalized to small values (usually between 0 and 1).\n        3. CSV data needs to be parsed, with numerical features converted to floating point tensors and categorical features indexed and converted to integer tensors. Then each feature typically needs to be normalized to zero-mean and unit-variance.\n        \n        \n   - Once your data is in the form of string\/int\/float NumPy arrays, a Dataset object, or a Python generator  that yields batches of string\/int\/float tensors. it is time to preprocess the data. This can mean:\n        - Tokenization of string data, followed by token indexing.\n        - Feature normalization.\n        - Rescaling the data to small values,typically we expect either data with zero-mean and unit-variance, or data in the [0, 1] range.\n","78f57b74":"- Now, you can chain layer transformations on top of your inputs, until output:","44b7de62":"## Monitoring metrics","de77db6c":"### Using Keras preprocessing layers\n - In Keras, We do data preprocessing via preprocessing layers. This includes:\n        1.Vectorizing raw strings of text via the (TextVectorization) layer\n        2. Feature normalization via the (Normalization) layer\n        3. Image rescaling, cropping, or image data augmentation","de283ad8":"- The next step is to train your model on your data. The Model class features a built-in training loop, the fit() method.\n- Before you can call fit(), you need to specify an optimizer and a loss function.","88e4ea39":"- The fit() call returns a \"history\" object which records what happened over the course of training. The history.history dict contains per-epoch timeseries of metrics values (here we have only one metric, the loss, and one epoch, so we only get a single scalar):","bf4e2e3e":"- This model behaves basically like a bigger layer. You can call it on batches of data, like this:","75e91363":"- Once your model is compiled, you can start \"fitting\" the model to the data.","ff6e7f89":"- A \"model\" is a directed acyclic graph of layers\n- The most common and most powerful way to build Keras models is the Functional API.\n- To build models with the Functional API, you start by specifying the shape of your inputs.\n- If any dimension of your input can vary, you can specify it as None.","6bf9d516":"### 3.1-Turning strings into sequences of integer word indices\n","2238b6a0":"## 5-Training models with fit().","e26faf0d":"### 3.3- Normalizing features","f1b38a0e":"### 3.2-Turning strings into sequences of one-hot encoded bigrams\n","52d2982b":"### 3.4- Rescaling & center-cropping images","98178361":"### Passing validation data to fit()","c4d1ff3e":"## 1-Setup","813530b8":"- during training a model, you want to keep track of metrics such as classification accuracy, precision, recall, AUC, and you want to monitor also on a validation set.","0e788712":"- You can print a summary of how your data gets transformed at each stage of the model.","b2a6ba06":"### Example: a model to classify MNIST digits:","f76d80ff":"# Make sure to upvote if this was useful (and motivate me to make more!)\u00b6","1354fbbe":"## 6-Keeping track of performance metrics\n","3260ea5f":"# Introduction to Keras for Beginners","fcdbc00d":"- Once you have defined layers that turn your input(s) into your outputs, instantiate a Model object","7f0ac2df":"## 8-After fit(): evaluating test performance & generating predictions on new data\n- Once you have a trained model, you can evaluate its loss and metrics on new data via evaluate():\n","6dde4928":"- You can pass a list of metric objects to compile(), like this:"}}