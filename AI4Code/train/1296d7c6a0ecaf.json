{"cell_type":{"34cba47a":"code","85cbff51":"code","701807a5":"code","8362008b":"code","a60e312a":"code","ae95f123":"code","2041b598":"code","81de35f0":"code","b56df3ad":"code","2293d583":"code","5046468e":"code","04fc3253":"code","113d9800":"code","72bae579":"code","62c7cb01":"code","45959a63":"code","df557c37":"code","12f2efb1":"code","37c4e661":"code","e801fb32":"code","f20546e2":"code","a663da67":"code","34f92667":"markdown","d6a56dd2":"markdown","13ed4420":"markdown","bb26962d":"markdown","89986e29":"markdown","be323232":"markdown","060b8956":"markdown","e253115e":"markdown","b595614a":"markdown","393e4134":"markdown","40482903":"markdown","a3dcb956":"markdown","0579a80c":"markdown","1fef8513":"markdown","b9bcceb4":"markdown","d58666f3":"markdown","739663af":"markdown","ca1df8dd":"markdown"},"source":{"34cba47a":"print(\"\\n... IMPORTS STARTING ...\\n\")\n\n!pip install weightedstats\nimport weightedstats as ws\n\nprint(\"\\n\\tVERSION INFORMATION\")\n# Machine Learning and Data Science Imports\nimport tensorflow as tf; print(f\"\\t\\t\u2013 TENSORFLOW VERSION: {tf.__version__}\");\nimport tensorflow_addons as tfa; print(f\"\\t\\t\u2013 TENSORFLOW ADDONS VERSION: {tfa.__version__}\");\nimport pandas as pd; pd.options.mode.chained_assignment = None;\nimport numpy as np; print(f\"\\t\\t\u2013 NUMPY VERSION: {np.__version__}\");\nimport sklearn; print(f\"\\t\\t\u2013 SKLEARN VERSION: {sklearn.__version__}\");\nfrom sklearn.preprocessing import RobustScaler, PolynomialFeatures\nfrom sklearn.model_selection import GroupKFold;\n\n# Built In Imports\nfrom kaggle_datasets import KaggleDatasets\nfrom collections import Counter\nfrom datetime import datetime\nfrom glob import glob\nimport warnings\nimport requests\nimport imageio\nimport IPython\nimport sklearn\nimport urllib\nimport zipfile\nimport pickle\nimport random\nimport shutil\nimport string\nimport math\nimport time\nimport gzip\nimport ast\nimport sys\nimport io\nimport os\nimport gc\nimport re\n\n# Visualization Imports\nfrom matplotlib.colors import ListedColormap\nimport matplotlib.patches as patches\nimport plotly.graph_objects as go\nimport matplotlib.pyplot as plt\nfrom tqdm.notebook import tqdm; tqdm.pandas();\nimport plotly.express as px\nimport seaborn as sns\nfrom PIL import Image\nimport matplotlib; print(f\"\\t\\t\u2013 MATPLOTLIB VERSION: {matplotlib.__version__}\");\nimport plotly\nimport PIL\nimport cv2\n\n\ndef seed_it_all(seed=7):\n    \"\"\" Attempt to be Reproducible \"\"\"\n    os.environ['PYTHONHASHSEED'] = str(seed)\n    random.seed(seed)\n    np.random.seed(seed)\n    tf.random.set_seed(seed)\n\n    \nprint(\"\\n\\n... IMPORTS COMPLETE ...\\n\")\n    \nprint(\"\\n... SEEDING FOR DETERMINISTIC BEHAVIOUR ...\\n\")\nseed_it_all()","85cbff51":"print(f\"\\n... ACCELERATOR SETUP STARTING ...\\n\")\n\n# Detect hardware, return appropriate distribution strategy\ntry:\n    # TPU detection. No parameters necessary if TPU_NAME environment variable is set. On Kaggle this is always the case.\n    TPU = tf.distribute.cluster_resolver.TPUClusterResolver()  \nexcept ValueError:\n    TPU = None\n\nif TPU:\n    print(f\"\\n... RUNNING ON TPU - {TPU.master()} ...\\n\")\n    tf.config.experimental_connect_to_cluster(TPU)\n    tf.tpu.experimental.initialize_tpu_system(TPU)\n    strategy = tf.distribute.experimental.TPUStrategy(TPU)\nelse:\n    strategy = tf.distribute.get_strategy()     \n    if tf.config.experimental.list_physical_devices('GPU'):\n        print(f\"\\n ... RUNNING ON GPU ...\\n\")\n        import cudf, cuml, cupy\n        from numba import cuda\n        from cuml.neighbors import NearestNeighbors\n    else:\n        print(f\"\\n ... RUNNING ON CPU ...\\n\")\n    # Yield the default distribution strategy in Tensorflow\n    #   --> Works on CPU and single GPU.\n    \n\n# What Is a Replica?\n#    --> A single Cloud TPU device consists of FOUR chips, each of which has TWO TPU cores. \n#    --> Therefore, for efficient utilization of Cloud TPU, a program should make use of each of the EIGHT (4x2) cores. \n#    --> Each replica is essentially a copy of the training graph that is run on each core and \n#        trains a mini-batch containing 1\/8th of the overall batch size\nN_REPLICAS = strategy.num_replicas_in_sync\n    \nprint(f\"... # OF REPLICAS: {N_REPLICAS} ...\\n\")\n\nprint(f\"\\n... ACCELERATOR SETUP COMPLTED ...\\n\")","701807a5":"print(\"\\n... DATA ACCESS SETUP STARTED ...\\n\")\n\nif TPU:\n    # Google Cloud Dataset path to training and validation images\n    DATA_DIR = KaggleDatasets().get_gcs_path('ventilator-pressure-prediction')\nelse:\n    # Local path to training and validation images\n    DATA_DIR = \"\/kaggle\/input\/ventilator-pressure-prediction\"\n    \nprint(f\"\\n... DATA DIRECTORY PATH IS:\\n\\t--> {DATA_DIR}\")\n\nprint(f\"\\n... IMMEDIATE CONTENTS OF DATA DIRECTORY IS:\")\nfor file in tf.io.gfile.glob(os.path.join(DATA_DIR, \"*\")): print(f\"\\t--> {file}\")\n\n    \nprint(\"\\n\\n... DATA ACCESS SETUP COMPLETED ...\\n\")","8362008b":"print(\"\\n... BASIC DATA SETUP STARTING ...\\n\\n\")\n\n# If set to false, pre-generated dataframes will be loaded from disk using pandas\nDO_CLUSTERING=True\n\nprint(\"\\n... TRAIN DATAFRAME ..\\n\")\nif DO_CLUSTERING:\n    TRAIN_CSV = os.path.join(DATA_DIR, \"train.csv\")\n    train_df = cudf.read_csv(TRAIN_CSV)\nelse:\n    TRAIN_CSV = os.path.join(DATA_DIR, \"train.csv\")\n    train_df = pd.read_csv(TRAIN_CSV)\ndisplay(train_df)\n\nprint(\"\\n... TEST DATAFRAME ..\\n\")\nif DO_CLUSTERING:\n    TEST_CSV = os.path.join(DATA_DIR, \"test.csv\")\n    test_df = cudf.read_csv(TEST_CSV)\nelse:\n    TEST_CSV = os.path.join(DATA_DIR, \"test.csv\")\n    test_df = pd.read_csv(TEST_CSV)\ndisplay(test_df)\n\nprint(\"\\n... SAMPLE SUBMISSION DATAFRAME ..\\n\")\nSS_CSV = os.path.join(DATA_DIR, \"sample_submission.csv\")\nss_df = pd.read_csv(SS_CSV)\ndisplay(ss_df)\n\n\n# Get some basic breath information\nN_TRAIN_BREATHS = len(train_df.groupby(\"breath_id\").count())\nN_TEST_BREATHS = len(test_df.breath_id.value_counts())\nROWS_PER_BREATH = 80\n\n# Add in a piece of basic information (which step in each breath's time series are we?)\ntest_df[\"breath_step\"] = np.arange(ROWS_PER_BREATH).tolist()*(len(test_df)\/\/ROWS_PER_BREATH)\ntrain_df[\"breath_step\"] = np.arange(ROWS_PER_BREATH).tolist()*(len(train_df)\/\/ROWS_PER_BREATH)\n\n# Get some basic information around pressures\nPOSSIBLE_PRESSURES = train_df.pressure.unique().sort_values().values\nPRESSURE_DELTA_STEP = float((POSSIBLE_PRESSURES[1:]-POSSIBLE_PRESSURES[:-1]).mean())\n\nprint(\"\\n\\n... BASIC DATA SETUP FINISHING ...\\n\")","a60e312a":"print(f\"\\n... XLA OPTIMIZATIONS STARTING ...\\n\")\n\nprint(f\"\\n... CONFIGURE JIT (JUST IN TIME) COMPILATION ...\\n\")\n# enable XLA optmizations (10% speedup when using @tf.function calls)\ntf.config.optimizer.set_jit(True)\n\nprint(f\"\\n... XLA OPTIMIZATIONS COMPLETED ...\\n\")","ae95f123":"def flatten_l_o_l(nested_list):\n    \"\"\" Flatten a list of lists \"\"\"\n    return [item for sublist in nested_list for item in sublist]\n\n\ndef compute_weighted_median(_values, _weights, redux_factor=1):\n    \"\"\" Compute a weighted median using knn distances\n    \n    Args:\n        values (): TBD\n        weights (): TBD\n    \n    Returns:\n        The weighted median\n    \"\"\"\n    return np.median(flatten_l_o_l([[_v,]*int(_w\/\/redux_factor) for _v,_w in zip(_values,_weights)]))\n\n\ndef add_features(df, \n                 U_IN_N_FORWARD=3,\n                 U_IN_N_BACKWARD=3,\n                 U_OUT_N_FORWARD=1, \n                 U_OUT_N_BACKWARD=1, \n                 use_rc=True):\n    \"\"\" TBD \"\"\"\n    \n    # Features\n    print(\"\\n... Add general features ...\\n\")\n    df['uin_auc'] = df['time_step'] * df['u_in']\n    df['uin_auc'] = df.groupby('breath_id')['uin_auc'].cumsum()\n    df['uin_csum'] = (df['u_in']).groupby(df['breath_id']).cumsum()\n    df['cross3']= df['time_step']*df['u_in']\n    df['cross3_sqd_1']= df['time_step']*df['u_in']**2\n    df['cross3_sqd_2']= df['time_step']**2*df['u_in']\n    df['cross3_cubed_1']= df['time_step']*df['u_in']**3\n    df['cross3_cubed_2']= df['time_step']**3*df['u_in']\n\n    \n    # Uin Lag\n    print(\"\\t... Add lag and advance UIN features ...\")\n    for i in range(1, U_IN_N_BACKWARD+1):\n        df[f'u_in_{i}_back'] = df.groupby(\"breath_id\")['u_in'].shift(i).fillna(0)\n    for i in range(1, U_IN_N_FORWARD+1):\n        df[f'u_in_{i}_forw'] = df.groupby(\"breath_id\")['u_in'].shift(-i).fillna(0)\n    \n    print(\"\\t... Add lag and advance UOUT features ...\")\n    for i in range(1, U_OUT_N_BACKWARD+1):\n        df[f'u_out_{i}_back'] = df.groupby(\"breath_id\")['u_out'].shift(i).fillna(0)\n    for i in range(1, U_OUT_N_FORWARD+1):\n        df[f'u_out_{i}_forw'] = df.groupby(\"breath_id\")['u_out'].shift(-i).fillna(0)\n    \n    print(\"\\t... Add UIN and UOUT `diff` features ...\")\n    for i in range(1, U_IN_N_BACKWARD+1):\n        df[f'u_in_diff_{i}_back'] = df['u_in'] - df[f'u_in_{i}_back']\n    for i in range(1, U_OUT_N_BACKWARD+1):\n        df[f'u_out_diff_{i}_back'] = df['u_out'] - df[f'u_out_{i}_back']\n    for i in range(1, U_IN_N_FORWARD+1):\n        df[f'u_in_diff_{i}_back'] = df['u_in'] - df[f'u_in_{i}_forw']\n    for i in range(1, U_OUT_N_FORWARD+1):\n        df[f'u_out_diff_{i}_forw'] = df['u_out'] - df[f'u_out_{i}_forw']\n    \n    print(\"\\t... Add categorical features ...\")\n    if use_rc:\n        # df['R_C'] = df['R'].astype(str)+\"_\"+df['C'].astype(str)\n        df['_R'] = df['R'].astype(str)\n        df['_C'] = df['C'].astype(str)\n        df['R'] = df['R']\/50\n        df['C'] = df['C']\/50\n        df = pd.get_dummies(df,)\n    \n    print(\"\\t... Reset dtypes for lower memory usage ...\")\n    for c in df.columns:\n        if c in [\"u_out\", \"breath_step\"]:\n            df[c] = df[c].astype(\"uint8\")\n        elif df[c].dtype==\"float64\":\n            df[c] = df[c].astype(\"float32\")\n    \n    # Final cleanup\n    gc.collect(); gc.collect();\n    \n    return df","2041b598":"print(\"\\n... ADDING FEATURES TO TRAIN DATAFRAME ...\\n\")\ntrain_df = add_features(train_df.to_pandas(), use_rc=True)\ntrain_df = cudf.from_pandas(train_df)\n\nprint(\"\\n... ADDING FEATURES TO TEST DATAFRAME ...\\n\")\ntest_df = add_features(test_df.to_pandas(), use_rc=True)\ntest_df = cudf.from_pandas(test_df)\n\ndisplay(train_df.head(3))\ndisplay(test_df.head(3))","81de35f0":"test_df = test_df.to_pandas()\ntest_df[\"breath_duration\"] = test_df.groupby('breath_id')[['time_step']].transform('max')\ntest_df[\"exhale_steps\"] = test_df.groupby('breath_id')[['u_out']].transform('sum')\ntest_df[\"inhale_steps\"] = 80-test_df.groupby('breath_id')[['u_out']].transform('sum')\ntest_df = cudf.from_pandas(test_df)\n\ntrain_df = train_df.to_pandas()\ntrain_df[\"breath_duration\"] = train_df.groupby('breath_id')[['time_step']].transform('max')\ntrain_df[\"exhale_steps\"] = train_df.groupby('breath_id')[['u_out']].transform('sum')\ntrain_df[\"inhale_steps\"] = 80-train_df.groupby('breath_id')[['u_out']].transform('sum')\ntrain_df = cudf.from_pandas(train_df)\n\ndisplay(train_df)\ndisplay(test_df)","b56df3ad":"RS = cuml.preprocessing.RobustScaler()\nFEATURE_COLS = [_c for _c in train_df.columns if _c not in ['id', 'breath_id', 'pressure']]\ntrain_df[FEATURE_COLS] = RS.fit_transform(train_df[FEATURE_COLS])\ntest_df[FEATURE_COLS] = RS.transform(test_df[FEATURE_COLS])\n\ndisplay(train_df)\ndisplay(test_df)","2293d583":"def compress_df(df):\n    cdf = df.groupby('breath_id').collect().reset_index()\n    \n    flatten_cols = list(set([_c for _c in cdf.columns if \"_back\" in _c]+\\\n                   [_c for _c in cdf.columns if \"_forw\" in _c]+\\\n                   [_c for _c in cdf.columns if \"cross\" in _c]+\\\n                   [_c for _c in cdf.columns if \"u_in\" in _c]+\\\n                   [_c for _c in cdf.columns if \"u_out\" in _c]+\\\n                   [_c for _c in cdf.columns if \"uin\" in _c]+\\\n                   [_c for _c in cdf.columns if \"uout\" in _c]+\\\n                   [\"breath_step\", \"time_step\"]))\n    \n    for j, _c in enumerate(flatten_cols):\n        for i in range(ROWS_PER_BREATH): cdf[f'{chr(97+j)}_{i}'] = cdf[_c].list.get(i)\n    \n    if \"pressure\" in cdf.columns:\n        for i in range(ROWS_PER_BREATH): cdf[f'z_{i}'] = cdf[\"pressure\"].list.get(i)\n        flatten_cols.append(\"pressure\")\n    cdf.drop(columns=flatten_cols+[\"id\",], inplace=True)\n    \n    # Get \n    REPEAT_COLS = list(set([_c for _c in cdf.columns if \"R\" in _c]+\\\n                   [_c for _c in cdf.columns if \"C\" in _c]+\\\n                   [\"breath_duration\", \"exhale_steps\", \"inshale_steps\"]))\n    REPEAT_COLS = [\"R\", \"C\", \"_R_20\", \"_R_5\", \"_R_50\", \"_C_10\", \"_C_20\", \"_C_50\", \"breath_duration\", \"exhale_steps\", \"inhale_steps\"]\n    for _rc in REPEAT_COLS:\n        cdf[_rc] = cdf[_rc].list.get(0)\n    return cdf\n\ntrain_df = compress_df(train_df)\ntest_df = compress_df(test_df)\n\ndisplay(train_df)\ndisplay(test_df)","5046468e":"PRESSURE_COLS = [f\"z_{i}\" for i in range(80)]\nUSE_COLS = [_c for _c in train_df.columns if _c not in [\"breath_id\", \"id\"]+[f\"z_{i}\" for i in range(80)]]\nBLEND_NEIGHBORS = 100\nRESTRICT_RC=True","04fc3253":"# Explore For Breath 1\nBREATH_ID=1\ngt_breath = train_df.loc[train_df.breath_id==BREATH_ID].to_pandas()\nBREATH_R = gt_breath.R.values[0]\nBREATH_C = gt_breath.C.values[0]\n\ndf_to_use = train_df.copy()[(train_df.R==BREATH_R)&(train_df.C==BREATH_C)].reset_index(drop=True) if RESTRICT_RC else train_df.copy()\n\n# Fit the model\nmodel = NearestNeighbors(n_neighbors=BLEND_NEIGHBORS, metric=\"l1\",)\nmodel.fit(df_to_use[USE_COLS])\n\ndistances, indices = model.kneighbors(gt_breath[USE_COLS])\ndistances, indices = distances[0, 1:], indices[0, 1:] #discard GT\n\ngt_breath_pressure = gt_breath[PRESSURE_COLS].squeeze().values\nnn_pressure_df = df_to_use.iloc[indices][PRESSURE_COLS]\nnn_pressure_df.insert(loc=0, name=\"nn_distance\", value=distances)\nnn_pressures = nn_pressure_df[PRESSURE_COLS].values\n\nfor UP_TO in [BLEND_NEIGHBORS-1, 75, 50, 25, 12, 5, 2, 1]:\n    print(\"\\n\\n\\n\")\n    plt.figure(figsize=(20, 8))\n    for i in range(UP_TO):\n        if i==UP_TO-1:\n            plt.plot(nn_pressures[i].get(), color=\"lightblue\", linewidth=1, label=\"NEIGHBORS\")\n        else:\n            plt.plot(nn_pressures[i].get(), color=\"lightblue\")\n    plt.plot(gt_breath_pressure, color=\"blue\", linewidth=3, label=\"GROUND TRUTH\")\n    \n    mean_pressure = nn_pressures[:UP_TO].mean(axis=0).get()\n    mean_mae = np.abs(gt_breath_pressure-mean_pressure).mean()\n    plt.plot(mean_pressure, color=\"deepskyblue\", linewidth=3, label=\"NEIGHBOR MEAN\")\n    \n    median_pressure = np.median(nn_pressures[:UP_TO].get(),axis=0)\n    median_mae = np.abs(gt_breath_pressure-median_pressure).mean()\n    plt.plot(median_pressure, color=\"mediumspringgreen\", linewidth=3, label=\"NEIGHBOR MEDIAN\")\n    \n    plt.title(f\"{UP_TO} NEAREST NEIGHBORS VS GROUND TRUTH\\n\\nMEAN MAE = {mean_mae:.5f}\\nMEDIAN MAE = {median_mae:.5f}\", fontweight=\"bold\")\n    plt.xlabel(\"Step In Breath\", fontweight=\"bold\")\n    plt.ylabel(\"Pressure (mm\/H2O)\", fontweight=\"bold\")\n\n    plt.legend(loc=\"upper right\", prop={\"size\":14})\n    plt.grid(which=\"both\")\n    \n    plt.tight_layout()\n    plt.show()\n    \nneighbor_means = []\nneighbor_medians = []\nfor UP_TO in tqdm(range(1, BLEND_NEIGHBORS), total=BLEND_NEIGHBORS-1):\n    mean_pressure = nn_pressures[:UP_TO].mean(axis=0).get()\n    neighbor_means.append(np.abs(gt_breath_pressure-mean_pressure).mean())\n    \n    median_pressure = np.median(nn_pressures[:UP_TO].get(),axis=0)\n    neighbor_medians.append(np.abs(gt_breath_pressure-median_pressure).mean())\n    \n    \n    \n# ERROR PLOT - WHICH NUMBER OF NEIGHBORS IS BEST\nplt.figure(figsize=(20, 8))\n\nMIN_MAE = min(min(neighbor_means), min(neighbor_medians))\n\nplt.plot(neighbor_means, color=\"deepskyblue\", linewidth=3, label=\"NEIGHBOR MEAN\")\nplt.fill_between(x=np.arange(BLEND_NEIGHBORS-1), y1=neighbor_means, y2=MIN_MAE, color=\"deepskyblue\", alpha=0.25)\n\nplt.plot(neighbor_medians, color=\"mediumspringgreen\", linewidth=3, label=\"NEIGHBOR MEDIAN\")\nplt.fill_between(x=np.arange(BLEND_NEIGHBORS-1), y1=neighbor_medians, y2=MIN_MAE, color=\"mediumspringgreen\", alpha=0.25)\n\nIDEAL_NUMBER_OF_NEIGHBORS = np.argmin(neighbor_medians) if min(neighbor_means)>min(neighbor_medians) else np.argmin(neighbor_means)\nBLEND_STYLE = \"MEDIAN\" if min(neighbor_means)>min(neighbor_medians) else \"MEAN\"\nplt.axvline(x=IDEAL_NUMBER_OF_NEIGHBORS, color='blue', linestyle=\"dotted\")\n\nplt.xlabel(\"Number of Neighbors\", fontweight=\"bold\")\nplt.ylabel(\"MAE When Compared to Ground Truth\", fontweight=\"bold\")\nplt.title(f\"NEAREST NEIGHBOR MEAN v. MEDIAN FOR DIFFERENT AMOUNTS OF NEIGHBORS\", fontweight=\"bold\")\nplt.legend(loc=\"upper right\", prop={\"size\":14})\nplt.grid(which=\"both\")\n\nplt.tight_layout()\nplt.show()\n\nprint(f\"\\n\\n... THE IDEAL NUMBER OF NEIGHBORS IS {IDEAL_NUMBER_OF_NEIGHBORS}, USING `{BLEND_STYLE}` WITH AN MAE OF {MIN_MAE} ...\\n\\n\")","113d9800":"# Explore For Breath 28\nBREATH_ID=28\n\ngt_breath = train_df.loc[train_df.breath_id==BREATH_ID].to_pandas()\nBREATH_R = gt_breath.R.values[0]\nBREATH_C = gt_breath.C.values[0]\n\ndf_to_use = train_df.copy()[(train_df.R==BREATH_R)&(train_df.C==BREATH_C)].reset_index(drop=True) if RESTRICT_RC else train_df.copy()\n\n# Fit the model\nmodel = NearestNeighbors(n_neighbors=BLEND_NEIGHBORS, metric=\"l1\",)\nmodel.fit(df_to_use[USE_COLS])\n\ndistances, indices = model.kneighbors(gt_breath[USE_COLS])\ndistances, indices = distances[0, 1:], indices[0, 1:] #discard GT\n\ngt_breath_pressure = gt_breath[PRESSURE_COLS].squeeze().values\nnn_pressure_df = df_to_use.iloc[indices][PRESSURE_COLS]\nnn_pressure_df.insert(loc=0, name=\"nn_distance\", value=distances)\nnn_pressures = nn_pressure_df[PRESSURE_COLS].values\n\nfor UP_TO in [BLEND_NEIGHBORS-1, 75, 50, 25, 12, 5, 2, 1]:\n    print(\"\\n\\n\\n\")\n    plt.figure(figsize=(20, 8))\n    for i in range(UP_TO):\n        if i==UP_TO-1:\n            plt.plot(nn_pressures[i].get(), color=\"lightblue\", linewidth=1, label=\"NEIGHBORS\")\n        else:\n            plt.plot(nn_pressures[i].get(), color=\"lightblue\")\n    plt.plot(gt_breath_pressure, color=\"blue\", linewidth=3, label=\"GROUND TRUTH\")\n    \n    mean_pressure = nn_pressures[:UP_TO].mean(axis=0).get()\n    mean_mae = np.abs(gt_breath_pressure-mean_pressure).mean()\n    plt.plot(mean_pressure, color=\"deepskyblue\", linewidth=3, label=\"NEIGHBOR MEAN\")\n    \n    median_pressure = np.median(nn_pressures[:UP_TO].get(),axis=0)\n    median_mae = np.abs(gt_breath_pressure-median_pressure).mean()\n    plt.plot(median_pressure, color=\"mediumspringgreen\", linewidth=3, label=\"NEIGHBOR MEDIAN\")\n    \n    plt.title(f\"{UP_TO} NEAREST NEIGHBORS VS GROUND TRUTH\\n\\nMEAN MAE = {mean_mae:.5f}\\nMEDIAN MAE = {median_mae:.5f}\", fontweight=\"bold\")\n    plt.xlabel(\"Step In Breath\", fontweight=\"bold\")\n    plt.ylabel(\"Pressure (mm\/H2O)\", fontweight=\"bold\")\n\n    plt.legend(loc=\"upper right\", prop={\"size\":14})\n    plt.grid(which=\"both\")\n    \n    plt.tight_layout()\n    plt.show()\n    \nneighbor_means = []\nneighbor_medians = []\nfor UP_TO in tqdm(range(1, BLEND_NEIGHBORS), total=BLEND_NEIGHBORS-1):\n    mean_pressure = nn_pressures[:UP_TO].mean(axis=0).get()\n    neighbor_means.append(np.abs(gt_breath_pressure-mean_pressure).mean())\n    \n    median_pressure = np.median(nn_pressures[:UP_TO].get(),axis=0)\n    neighbor_medians.append(np.abs(gt_breath_pressure-median_pressure).mean())\n    \n    \n    \n# ERROR PLOT - WHICH NUMBER OF NEIGHBORS IS BEST\nplt.figure(figsize=(20, 8))\n\nMIN_MAE = min(min(neighbor_means), min(neighbor_medians))\n\nplt.plot(neighbor_means, color=\"deepskyblue\", linewidth=3, label=\"NEIGHBOR MEAN\")\nplt.fill_between(x=np.arange(BLEND_NEIGHBORS-1), y1=neighbor_means, y2=MIN_MAE, color=\"deepskyblue\", alpha=0.25)\n\nplt.plot(neighbor_medians, color=\"mediumspringgreen\", linewidth=3, label=\"NEIGHBOR MEDIAN\")\nplt.fill_between(x=np.arange(BLEND_NEIGHBORS-1), y1=neighbor_medians, y2=MIN_MAE, color=\"mediumspringgreen\", alpha=0.25)\n\nIDEAL_NUMBER_OF_NEIGHBORS = np.argmin(neighbor_medians) if min(neighbor_means)>min(neighbor_medians) else np.argmin(neighbor_means)\nBLEND_STYLE = \"MEDIAN\" if min(neighbor_means)>min(neighbor_medians) else \"MEAN\"\nplt.axvline(x=IDEAL_NUMBER_OF_NEIGHBORS, color='blue', linestyle=\"dotted\")\n\nplt.xlabel(\"Number of Neighbors\", fontweight=\"bold\")\nplt.ylabel(\"MAE When Compared to Ground Truth\", fontweight=\"bold\")\nplt.title(f\"NEAREST NEIGHBOR MEAN v. MEDIAN FOR DIFFERENT AMOUNTS OF NEIGHBORS\", fontweight=\"bold\")\nplt.legend(loc=\"upper right\", prop={\"size\":14})\nplt.grid(which=\"both\")\n\nplt.tight_layout()\nplt.show()\n\nprint(f\"\\n\\n... THE IDEAL NUMBER OF NEIGHBORS IS {IDEAL_NUMBER_OF_NEIGHBORS}, USING `{BLEND_STYLE}` WITH AN MAE OF {MIN_MAE} ...\\n\\n\")","72bae579":"# Explore For Breath 87\nBREATH_ID=87\n\ngt_breath = train_df.loc[train_df.breath_id==BREATH_ID].to_pandas()\nBREATH_R = gt_breath.R.values[0]\nBREATH_C = gt_breath.C.values[0]\n\ndf_to_use = train_df.copy()[(train_df.R==BREATH_R)&(train_df.C==BREATH_C)].reset_index(drop=True) if RESTRICT_RC else train_df.copy()\n\n# Fit the model\nmodel = NearestNeighbors(n_neighbors=BLEND_NEIGHBORS, metric=\"l1\",)\nmodel.fit(df_to_use[USE_COLS])\n\ndistances, indices = model.kneighbors(gt_breath[USE_COLS])\ndistances, indices = distances[0, 1:], indices[0, 1:] #discard GT\n\ngt_breath_pressure = gt_breath[PRESSURE_COLS].squeeze().values\nnn_pressure_df = df_to_use.iloc[indices][PRESSURE_COLS]\nnn_pressure_df.insert(loc=0, name=\"nn_distance\", value=distances)\nnn_pressures = nn_pressure_df[PRESSURE_COLS].values\n\nfor UP_TO in [BLEND_NEIGHBORS-1, 75, 50, 25, 12, 5, 2, 1]:\n    print(\"\\n\\n\\n\")\n    plt.figure(figsize=(20, 8))\n    for i in range(UP_TO):\n        if i==UP_TO-1:\n            plt.plot(nn_pressures[i].get(), color=\"lightblue\", linewidth=1, label=\"NEIGHBORS\")\n        else:\n            plt.plot(nn_pressures[i].get(), color=\"lightblue\")\n    plt.plot(gt_breath_pressure, color=\"blue\", linewidth=3, label=\"GROUND TRUTH\")\n    \n    mean_pressure = nn_pressures[:UP_TO].mean(axis=0).get()\n    mean_mae = np.abs(gt_breath_pressure-mean_pressure).mean()\n    plt.plot(mean_pressure, color=\"deepskyblue\", linewidth=3, label=\"NEIGHBOR MEAN\")\n    \n    median_pressure = np.median(nn_pressures[:UP_TO].get(),axis=0)\n    median_mae = np.abs(gt_breath_pressure-median_pressure).mean()\n    plt.plot(median_pressure, color=\"mediumspringgreen\", linewidth=3, label=\"NEIGHBOR MEDIAN\")\n    \n    plt.title(f\"{UP_TO} NEAREST NEIGHBORS VS GROUND TRUTH\\n\\nMEAN MAE = {mean_mae:.5f}\\nMEDIAN MAE = {median_mae:.5f}\", fontweight=\"bold\")\n    plt.xlabel(\"Step In Breath\", fontweight=\"bold\")\n    plt.ylabel(\"Pressure (mm\/H2O)\", fontweight=\"bold\")\n\n    plt.legend(loc=\"upper right\", prop={\"size\":14})\n    plt.grid(which=\"both\")\n    \n    plt.tight_layout()\n    plt.show()\n    \nneighbor_means = []\nneighbor_medians = []\nfor UP_TO in tqdm(range(1, BLEND_NEIGHBORS), total=BLEND_NEIGHBORS-1):\n    mean_pressure = nn_pressures[:UP_TO].mean(axis=0).get()\n    neighbor_means.append(np.abs(gt_breath_pressure-mean_pressure).mean())\n    \n    median_pressure = np.median(nn_pressures[:UP_TO].get(),axis=0)\n    neighbor_medians.append(np.abs(gt_breath_pressure-median_pressure).mean())\n    \n    \n    \n# ERROR PLOT - WHICH NUMBER OF NEIGHBORS IS BEST\nplt.figure(figsize=(20, 8))\n\nMIN_MAE = min(min(neighbor_means), min(neighbor_medians))\n\nplt.plot(neighbor_means, color=\"deepskyblue\", linewidth=3, label=\"NEIGHBOR MEAN\")\nplt.fill_between(x=np.arange(BLEND_NEIGHBORS-1), y1=neighbor_means, y2=MIN_MAE, color=\"deepskyblue\", alpha=0.25)\n\nplt.plot(neighbor_medians, color=\"mediumspringgreen\", linewidth=3, label=\"NEIGHBOR MEDIAN\")\nplt.fill_between(x=np.arange(BLEND_NEIGHBORS-1), y1=neighbor_medians, y2=MIN_MAE, color=\"mediumspringgreen\", alpha=0.25)\n\nIDEAL_NUMBER_OF_NEIGHBORS = np.argmin(neighbor_medians) if min(neighbor_means)>min(neighbor_medians) else np.argmin(neighbor_means)\nBLEND_STYLE = \"MEDIAN\" if min(neighbor_means)>min(neighbor_medians) else \"MEAN\"\nplt.axvline(x=IDEAL_NUMBER_OF_NEIGHBORS, color='blue', linestyle=\"dotted\")\n\nplt.xlabel(\"Number of Neighbors\", fontweight=\"bold\")\nplt.ylabel(\"MAE When Compared to Ground Truth\", fontweight=\"bold\")\nplt.title(f\"NEAREST NEIGHBOR MEAN v. MEDIAN FOR DIFFERENT AMOUNTS OF NEIGHBORS\", fontweight=\"bold\")\nplt.legend(loc=\"upper right\", prop={\"size\":14})\nplt.grid(which=\"both\")\n\nplt.tight_layout()\nplt.show()\n\nprint(f\"\\n\\n... THE IDEAL NUMBER OF NEIGHBORS IS {IDEAL_NUMBER_OF_NEIGHBORS}, USING `{BLEND_STYLE}` WITH AN MAE OF {MIN_MAE} ...\\n\\n\")","62c7cb01":"# Explore For Breath 101\nBREATH_ID=101\n\ngt_breath = train_df.loc[train_df.breath_id==BREATH_ID].to_pandas()\nBREATH_R = gt_breath.R.values[0]\nBREATH_C = gt_breath.C.values[0]\n\ndf_to_use = train_df.copy()[(train_df.R==BREATH_R)&(train_df.C==BREATH_C)].reset_index(drop=True) if RESTRICT_RC else train_df.copy()\n\n# Fit the model\nmodel = NearestNeighbors(n_neighbors=BLEND_NEIGHBORS, metric=\"l1\",)\nmodel.fit(df_to_use[USE_COLS])\n\ndistances, indices = model.kneighbors(gt_breath[USE_COLS])\ndistances, indices = distances[0, 1:], indices[0, 1:] #discard GT\n\ngt_breath_pressure = gt_breath[PRESSURE_COLS].squeeze().values\nnn_pressure_df = df_to_use.iloc[indices][PRESSURE_COLS]\nnn_pressure_df.insert(loc=0, name=\"nn_distance\", value=distances)\nnn_pressures = nn_pressure_df[PRESSURE_COLS].values\n\nfor UP_TO in [BLEND_NEIGHBORS-1, 75, 50, 25, 12, 5, 2, 1]:\n    print(\"\\n\\n\\n\")\n    plt.figure(figsize=(20, 8))\n    for i in range(UP_TO):\n        if i==UP_TO-1:\n            plt.plot(nn_pressures[i].get(), color=\"lightblue\", linewidth=1, label=\"NEIGHBORS\")\n        else:\n            plt.plot(nn_pressures[i].get(), color=\"lightblue\")\n    plt.plot(gt_breath_pressure, color=\"blue\", linewidth=3, label=\"GROUND TRUTH\")\n    \n    mean_pressure = nn_pressures[:UP_TO].mean(axis=0).get()\n    mean_mae = np.abs(gt_breath_pressure-mean_pressure).mean()\n    plt.plot(mean_pressure, color=\"deepskyblue\", linewidth=3, label=\"NEIGHBOR MEAN\")\n    \n    median_pressure = np.median(nn_pressures[:UP_TO].get(),axis=0)\n    median_mae = np.abs(gt_breath_pressure-median_pressure).mean()\n    plt.plot(median_pressure, color=\"mediumspringgreen\", linewidth=3, label=\"NEIGHBOR MEDIAN\")\n    \n    plt.title(f\"{UP_TO} NEAREST NEIGHBORS VS GROUND TRUTH\\n\\nMEAN MAE = {mean_mae:.5f}\\nMEDIAN MAE = {median_mae:.5f}\", fontweight=\"bold\")\n    plt.xlabel(\"Step In Breath\", fontweight=\"bold\")\n    plt.ylabel(\"Pressure (mm\/H2O)\", fontweight=\"bold\")\n\n    plt.legend(loc=\"upper right\", prop={\"size\":14})\n    plt.grid(which=\"both\")\n    \n    plt.tight_layout()\n    plt.show()\n    \nneighbor_means = []\nneighbor_medians = []\nfor UP_TO in tqdm(range(1, BLEND_NEIGHBORS), total=BLEND_NEIGHBORS-1):\n    mean_pressure = nn_pressures[:UP_TO].mean(axis=0).get()\n    neighbor_means.append(np.abs(gt_breath_pressure-mean_pressure).mean())\n    \n    median_pressure = np.median(nn_pressures[:UP_TO].get(),axis=0)\n    neighbor_medians.append(np.abs(gt_breath_pressure-median_pressure).mean())\n    \n    \n    \n# ERROR PLOT - WHICH NUMBER OF NEIGHBORS IS BEST\nplt.figure(figsize=(20, 8))\n\nMIN_MAE = min(min(neighbor_means), min(neighbor_medians))\n\nplt.plot(neighbor_means, color=\"deepskyblue\", linewidth=3, label=\"NEIGHBOR MEAN\")\nplt.fill_between(x=np.arange(BLEND_NEIGHBORS-1), y1=neighbor_means, y2=MIN_MAE, color=\"deepskyblue\", alpha=0.25)\n\nplt.plot(neighbor_medians, color=\"mediumspringgreen\", linewidth=3, label=\"NEIGHBOR MEDIAN\")\nplt.fill_between(x=np.arange(BLEND_NEIGHBORS-1), y1=neighbor_medians, y2=MIN_MAE, color=\"mediumspringgreen\", alpha=0.25)\n\nIDEAL_NUMBER_OF_NEIGHBORS = np.argmin(neighbor_medians) if min(neighbor_means)>min(neighbor_medians) else np.argmin(neighbor_means)\nBLEND_STYLE = \"MEDIAN\" if min(neighbor_means)>min(neighbor_medians) else \"MEAN\"\nplt.axvline(x=IDEAL_NUMBER_OF_NEIGHBORS, color='blue', linestyle=\"dotted\")\n\nplt.xlabel(\"Number of Neighbors\", fontweight=\"bold\")\nplt.ylabel(\"MAE When Compared to Ground Truth\", fontweight=\"bold\")\nplt.title(f\"NEAREST NEIGHBOR MEAN v. MEDIAN FOR DIFFERENT AMOUNTS OF NEIGHBORS\", fontweight=\"bold\")\nplt.legend(loc=\"upper right\", prop={\"size\":14})\nplt.grid(which=\"both\")\n\nplt.tight_layout()\nplt.show()\n\nprint(f\"\\n\\n... THE IDEAL NUMBER OF NEIGHBORS IS {IDEAL_NUMBER_OF_NEIGHBORS}, USING `{BLEND_STYLE}` WITH AN MAE OF {MIN_MAE} ...\\n\\n\")","45959a63":"MAX_DISTANCE = 5000\nIDEAL_NEIGHBOR_MAX = 25\nCALCULATE_WEIGHTED = True\n\nglobal_nn_means, global_nn_medians = [], []\nglobal_wtd_nn_means, global_wtd_nn_medians = [], []\n\nfor BREATH_ID in tqdm(sorted(train_df.breath_id.values.get())[:20], total=20,):\n    gt_breath = train_df.loc[train_df.breath_id==BREATH_ID].to_pandas()\n    BREATH_R = gt_breath.R.values[0]\n    BREATH_C = gt_breath.C.values[0]\n    df_to_use = train_df.copy()[(train_df.R==BREATH_R)&(train_df.C==BREATH_C)].reset_index(drop=True) if RESTRICT_RC else train_df.copy()\n\n    # Fit the model\n    model = NearestNeighbors(n_neighbors=IDEAL_NEIGHBOR_MAX, metric=\"l1\",)\n    model.fit(df_to_use[USE_COLS])\n\n    distances, indices = model.kneighbors(gt_breath[USE_COLS])\n    distances, indices = distances[0, 1:], indices[0, 1:] #discard GT\n\n    gt_breath_pressure = gt_breath[PRESSURE_COLS].squeeze().values\n    nn_pressure_df = df_to_use.iloc[indices][PRESSURE_COLS]\n    nn_pressure_df.insert(loc=0, name=\"nn_distance\", value=distances)\n    nn_pressures = nn_pressure_df[PRESSURE_COLS].values\n\n    neighbor_means, neighbor_medians = [], []\n    wtd_neighbor_means, wtd_neighbor_medians = [], []\n    \n    for UP_TO in range(1, IDEAL_NEIGHBOR_MAX):\n        \n        # Calculate Unweighted\n        mean_pressure = nn_pressures[:UP_TO].mean(axis=0).get()\n        median_pressure = np.median(nn_pressures[:UP_TO].get(),axis=0)\n        neighbor_means.append(np.abs(gt_breath_pressure-mean_pressure).mean())\n        neighbor_medians.append(np.abs(gt_breath_pressure-median_pressure).mean())\n        \n        if CALCULATE_WEIGHTED:\n            wtd_mean_pressure = np.average(nn_pressures[:UP_TO], weights=MAX_DISTANCE-np.clip(distances[:UP_TO], 0, MAX_DISTANCE), axis=0).get()\n            wtd_median_pressure = np.array([compute_weighted_median(_values=nn_pressures[:UP_TO, i].get(), _weights=(MAX_DISTANCE-np.clip(distances[:UP_TO], 0, MAX_DISTANCE))**0.5, redux_factor=3) for i in range(80)])\n            \n            wtd_neighbor_means.append(np.abs(gt_breath_pressure-mean_pressure).mean())\n            wtd_neighbor_medians.append(np.abs(gt_breath_pressure-wtd_median_pressure).mean())\n            \n    global_nn_means.append(neighbor_means)\n    global_nn_medians.append(neighbor_medians)\n    \n    if CALCULATE_WEIGHTED:\n        global_wtd_nn_means.append(wtd_neighbor_means)\n        global_wtd_nn_medians.append(wtd_neighbor_medians)\n    \nglobal_nn_mean_reduced = np.array(global_nn_means).mean(axis=0)\nglobal_nn_median_reduced = np.array(global_nn_medians).mean(axis=0)\n\nif CALCULATE_WEIGHTED:\n    global_wtd_nn_mean_reduced = np.array(global_wtd_nn_means).mean(axis=0)\n    global_wtd_nn_median_reduced = np.array(global_wtd_nn_medians).mean(axis=0)\n\n# ERROR PLOT - WHICH NUMBER OF NEIGHBORS IS BEST\nplt.figure(figsize=(20, 8))\n\nplt.plot(global_nn_mean_reduced, color=\"deepskyblue\", linewidth=3, label=\"NEIGHBOR MEAN\")\nplt.plot(global_nn_median_reduced, color=\"mediumspringgreen\", linewidth=3, label=\"NEIGHBOR MEDIAN\")\nplt.fill_between(x=np.arange(IDEAL_NEIGHBOR_MAX-1), y1=global_nn_mean_reduced, y2=global_nn_median_reduced, color=\"lightblue\", alpha=0.5)\n\nif CALCULATE_WEIGHTED:\n    plt.plot(global_wtd_nn_mean_reduced, color=\"orangered\", linewidth=3, label=\"NEIGHBOR WTD MEAN\")\n    plt.plot(global_wtd_nn_median_reduced, color=\"hotpink\", linewidth=3, label=\"NEIGHBOR WTD MEDIAN\")\n    plt.fill_between(x=np.arange(IDEAL_NEIGHBOR_MAX-1), y1=global_wtd_nn_mean_reduced, y2=global_wtd_nn_median_reduced, color=\"lightcoral\", alpha=0.5)\n\nplt.xticks(np.arange(IDEAL_NEIGHBOR_MAX-1))\nplt.xlabel(\"Number of Neighbors\", fontweight=\"bold\")\nplt.ylabel(\"MAE Averaged Across First 100 Training Breaths\", fontweight=\"bold\")\nplt.title(f\"NEAREST NEIGHBOR MEAN v. MEDIAN FOR DIFFERENT AMOUNTS OF NEIGHBORS\", fontweight=\"bold\")\nplt.legend(loc=\"upper right\", prop={\"size\":14})\nplt.grid(which=\"both\")\n\nplt.tight_layout()\nplt.show()","df557c37":"# [1,2,3,4,5] # median=3\n#\n# values = [1,2,3,4,5]\n# weights = [2,2,2,1,1]\n# w_values = [1,1,2,2,3,3,4,5]","12f2efb1":"NN_TO_USE = 10\nbreath_ids, mean_test_pressures, median_test_pressures = [], [], []\nfor _R in test_df.R.unique().to_pandas():\n    for _C in test_df.C.unique().to_pandas():\n        test_df_to_use = test_df[(test_df.R==_R)&(test_df.C==_C)].reset_index(drop=True)\n        train_df_to_use = train_df[(train_df.R==_R)&(train_df.C==_C)].reset_index(drop=True)\n        model = NearestNeighbors(n_neighbors=NN_TO_USE, metric=\"l1\")\n        model.fit(train_df_to_use[USE_COLS])\n        distances, indices = model.kneighbors(test_df_to_use[USE_COLS])\n        distances, indices = distances.values, indices.values\n        for i, BREATH_ID in tqdm(enumerate(sorted(test_df_to_use.breath_id.values.get())), total=len(test_df_to_use)):\n            breath_ids.append(BREATH_ID)\n            _distances, _indices = distances[i], indices[i]\n            nn_pressures = train_df_to_use.iloc[_indices][PRESSURE_COLS].values.get()         \n            mean_test_pressures.append(np.average(nn_pressures, axis=0, weights=_distances.get()))\n            median_test_pressures.append(np.median(nn_pressures,axis=0))","37c4e661":"ss_df = pd.merge(left=ss_df, right=pd.read_csv(\"..\/input\/ventilator-pressure-prediction\/test.csv\")[[\"id\", \"breath_id\"]], on=\"id\")\nss_df[\"median_pressure\"] = ss_df[\"pressure\"].copy()\nss_df[\"mean_pressure\"] = ss_df[\"pressure\"].copy()\n\nsort_indices = np.argsort(breath_ids)\nss_df[\"mean_pressure\"] = np.array(mean_test_pressures)[sort_indices].reshape(-1)\nss_df[\"median_pressure\"] = np.array(median_test_pressures)[sort_indices].reshape(-1)\nss_df[\"pressure\"] = (ss_df[\"mean_pressure\"]+ss_df[\"median_pressure\"])\/2\nss_df","e801fb32":"for x in [\"median\", \"mean\", None]:\n    p_name = \"pressure\" if not x else f\"{x}_pressure\"\n    tmp_csv_df = ss_df[[\"id\", p_name]]\n    tmp_csv_df.columns = [\"id\", \"pressure\"]\n    tmp_csv_df.to_csv(f\"{p_name}_submission.csv\", index=False)","f20546e2":"# # BLEND_NEIGHBORS = len(train_df) --> WILL GO OOM\nBLEND_NEIGHBORS = 1000\nCLIP_DISTANCE_MIN = 0.0\nCLIP_DISTANCE_MAX = 1500.0\nDISTANCE_MATRIX = np.zeros((len(train_df), len(train_df)), dtype=np.uint8)\n\nmodel = NearestNeighbors(n_neighbors=BLEND_NEIGHBORS, metric=\"l1\",)\nmodel.fit(train_df[USE_COLS])\nall_distances, all_indices = model.kneighbors(train_df[USE_COLS])\n\nfor distances, indices in tqdm(zip(all_distances.values, all_indices.values), total=len(train_df)):\n    distances, indices = cupy.clip(distances[1:], CLIP_DISTANCE_MIN, CLIP_DISTANCE_MAX), indices[1:]\n    DISTANCE_MATRIX[i, indices] = (255*(1-(distances-CLIP_DISTANCE_MIN)\/(CLIP_DISTANCE_MAX))).astype(np.uint8)","a663da67":"np.savez(\"nxn_distance_matrix.npz\", DISTANCE_MATRIX)","34f92667":"<h3 style=\"font-family: Verdana; font-size: 20px; font-style: normal; font-weight: normal; text-decoration: none; text-transforam: none; letter-spacing: 2px; color: darkorange; background-color: #ffffff;\">4.2 RESTRUCTURE (COMPRESS) THE ORIGINAL DATAFRAME STRUCTURE AND ADD IN SOME RELEVANT ADDITIONAL INFO<\/h3>\n\n---","d6a56dd2":"<br>\n\n<a id=\"imports\"><\/a>\n\n<h1 style=\"font-family: Verdana; font-size: 24px; font-style: normal; font-weight: bold; text-decoration: none; text-transform: none; letter-spacing: 3px; background-color: #ffffff; color: darkorange;\" id=\"imports\">0&nbsp;&nbsp;IMPORTS&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"#toc\">&#10514;<\/a><\/h1>","13ed4420":"<h3 style=\"font-family: Verdana; font-size: 20px; font-style: normal; font-weight: normal; text-decoration: none; text-transform: none; letter-spacing: 2px; color: darkorange; background-color: #ffffff;\">2.1 ACCELERATOR DETECTION<\/h3>\n\n---\n\nIn this cell we will ascertain the training strategy. I am setting this notebook up so that it can perform three fundamental operations. \n* Clustering (**GPU**)\n* Neural Network Training (**TPU**)\n* Submission (**CPU**)\n\n---\n\nIn order to use **`TPU`**, we use **`TPUClusterResolver`** for the initialization which is necessary to connect to the remote cluster and initialize cloud TPUs. Let's go over two important points\n\n1. When using TPU on Kaggle, you don't need to specify arguments for **`TPUClusterResolver`**\n2. However, on **G**oogle **C**ompute **E**ngine (**GCE**), you will need to do the following:\n\n<br>\n\n```python\n# The name you gave to the TPU to use\nTPU_WORKER = 'my-tpu-name'\n\n# or you can also specify the grpc path directly\n# TPU_WORKER = 'grpc:\/\/xxx.xxx.xxx.xxx:8470'\n\n# The zone you chose when you created the TPU to use on GCP.\nZONE = 'us-east1-b'\n\n# The name of the GCP project where you created the TPU to use on GCP.\nPROJECT = 'my-tpu-project'\n\ntpu = tf.distribute.cluster_resolver.TPUClusterResolver(tpu=TPU_WORKER, zone=ZONE, project=PROJECT)\n```\n\n<div class=\"alert alert-block alert-danger\" style=\"margin: 2em; line-height: 1.7em; font-family: Verdana;\">\n    <b style=\"font-size: 16px;\">\ud83d\uded1 &nbsp; WARNING:<\/b><br><br>- Although the Tensorflow documentation says it is the <b>project name<\/b> that should be provided for the argument <b><code>`project`<\/code><\/b>, it is actually the <b>Project ID<\/b>, that you should provide. This can be found on the GCP project dashboard page.<br>\n<\/div>\n\n<div class=\"alert alert-block alert-info\" style=\"margin: 2em; line-height: 1.7em; font-family: Verdana;\">\n    <b style=\"font-size: 16px;\">\ud83d\udcd6 &nbsp; REFERENCES:<\/b><br><br>\n    - <a href=\"https:\/\/www.tensorflow.org\/guide\/tpu#tpu_initialization\"><b>Guide - Use TPUs<\/b><\/a><br>\n    - <a href=\"https:\/\/www.tensorflow.org\/api_docs\/python\/tf\/distribute\/cluster_resolver\/TPUClusterResolver\"><b>Doc - TPUClusterResolver<\/b><\/a><br>\n\n<\/div>","bb26962d":"<br>\n\n\n<a id=\"helper_functions\"><\/a>\n\n\n<h1 style=\"font-family: Verdana; font-size: 24px; font-style: normal; font-weight: bold; text-decoration: none; text-transform: none; letter-spacing: 3px; color: darkorange; background-color: #ffffff;\" id=\"helper_functions\">\n    3&nbsp;&nbsp;HELPER FUNCTION & CLASSES&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"#toc\">&#10514;<\/a>\n<\/h1>","89986e29":"<h3 style=\"font-family: Verdana; font-size: 20px; font-style: normal; font-weight: normal; text-decoration: none; text-transforam: none; letter-spacing: 2px; color: darkorange; background-color: #ffffff;\">4.1 DETERMINE SUBCATEGORIES OF DATA TO CLUSTER WITHIN<\/h3>\n\n---\n\nWe will predivide the data into 9 seperate sets. Each set is representative of a combination of R and C values.<br>**I would recommend Chris Deotte's wonderful notebook for more information.**","be323232":"# Make Nearest Neighbor Embedding for All Train And Test Examples","060b8956":"<h3 style=\"font-family: Verdana; font-size: 20px; font-style: normal; font-weight: normal; text-decoration: none; text-transform: none; letter-spacing: 2px; color: darkorange; background-color: #ffffff;\">2.2 COMPETITION DATA ACCESS<\/h3>\n\n---\n\nTPUs read data must be read directly from **G**oogle **C**loud **S**torage **(GCS)**. Kaggle provides a utility library \u2013\u00a0**`KaggleDatasets`** \u2013 which has a utility function **`.get_gcs_path`** that will allow us to access the location of our input datasets within **GCS**.<br><br>\n\n<div class=\"alert alert-block alert-info\" style=\"margin: 2em; line-height: 1.7em; font-family: Verdana;\">\n    <b style=\"font-size: 16px;\">\ud83d\udccc &nbsp; TIPS:<\/b><br><br>- If you have multiple datasets attached to the notebook, you should pass the name of a specific dataset to the <b><code>`get_gcs_path()`<\/code><\/b> function. <i>In our case, the name of the dataset is the name of the directory the dataset is mounted within.<\/i><br><br>\n<\/div>","e253115e":"\n<h1 style=\"text-align: center; font-family: Verdana; font-size: 32px; font-style: normal; font-weight: bold; text-decoration: none; text-transform: none; font-variant: small-caps; letter-spacing: 3px; color: orange; background-color: #ffffff;\">Ventilator Pressure Prediction<\/h1>\n<h2 style=\"text-align: center; font-family: Verdana; font-size: 24px; font-style: normal; font-weight: bold; text-decoration: underline; text-transform: none; letter-spacing: 2px; color: black; background-color: #ffffff;\">Interactive Clustering On U_IN and PRESSURE<\/h2>\n<h5 style=\"text-align: center; font-family: Verdana; font-size: 12px; font-style: normal; font-weight: bold; text-decoration: None; text-transform: none; letter-spacing: 1px; color: black; background-color: #ffffff;\">CREATED BY: DARIEN SCHETTLER<\/h5>\n\n<br>\n\n---\n\nThis notebook is heavily inspired by [**Chris Deotte's notebook**](https:\/\/www.kaggle.com\/cdeotte\/rapids-knn-and-kmeans-0-600). Please check it out and give it an upvote. I simply wanted to learn all I code and I did that by refactoring some of the code and implementing it using Plotly.\n\n---\n\n**Addendum:**\n\nI wanted to see how different the U_IN and R&C values could be given a similar pressure plot. As such I decided to cluster the time series by using Pressure\n\n\n\n<br>\n\n","b595614a":"# Make Nearest Neighbor Embedding for All Train And Test Examples","393e4134":"<br>\n\n<a id=\"background_information\"><\/a>\n\n<h1 style=\"font-family: Verdana; font-size: 24px; font-style: normal; font-weight: bold; text-decoration: none; text-transform: none; letter-spacing: 3px; color: darkorange; background-color: #ffffff;\" id=\"background_information\">1&nbsp;&nbsp;BACKGROUND INFORMATION&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"#toc\">&#10514;<\/a><\/h1>\n\n<br><b style=\"text-decoration: underline; font-family: Verdana; text-transform: uppercase;\">PRIMARY TASK DESCRIPTION<\/b>\n\n\n**In this notebook, we will use RAPIDS Nearest Neighbors and RAPIDS KMeans to help us understand the data. We will find similar u_in time series and display them. We will notice that many time series with the same u_in have different pressure! This will help us to understand how parameters R and C affect pressure when the same u_in is used for different R and C combinations.**\n\n---\n\n<br>","40482903":"<br>\n\n\n<a id=\"clustering\"><\/a>\n\n\n<h1 style=\"font-family: Verdana; font-size: 24px; font-style: normal; font-weight: bold; text-decoration: none; text-transform: none; letter-spacing: 3px; color: darkorange; background-color: #ffffff;\" id=\"clustering\">\n    4&nbsp;&nbsp;CLUSTERING WITH PLOTLY&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"#toc\">&#10514;<\/a>\n<\/h1>","a3dcb956":"<p id=\"toc\"><\/p>\n\n<br><br>\n\n<h1 style=\"font-family: Verdana; font-size: 24px; font-style: normal; font-weight: bold; text-decoration: none; text-transform: none; letter-spacing: 3px; color: darkorange; background-color: #ffffff;\">TABLE OF CONTENTS<\/h1>\n\n---\n\n<h3 style=\"text-indent: 10vw; font-family: Verdana; font-size: 20px; font-style: normal; font-weight: normal; text-decoration: none; text-transform: none; letter-spacing: 2px; color: navy; background-color: #ffffff;\"><a href=\"#imports\">0&nbsp;&nbsp;&nbsp;&nbsp;IMPORTS<\/a><\/h3>\n\n---\n\n<h3 style=\"text-indent: 10vw; font-family: Verdana; font-size: 20px; font-style: normal; font-weight: normal; text-decoration: none; text-transform: none; letter-spacing: 2px; color: navy; background-color: #ffffff;\"><a href=\"#background_information\">1&nbsp;&nbsp;&nbsp;&nbsp;BACKGROUND INFORMATION<\/a><\/h3>\n\n---\n\n<h3 style=\"text-indent: 10vw; font-family: Verdana; font-size: 20px; font-style: normal; font-weight: normal; text-decoration: none; text-transform: none; letter-spacing: 2px; color: navy; background-color: #ffffff;\"><a href=\"#setup\">2&nbsp;&nbsp;&nbsp;&nbsp;SETUP<\/a><\/h3>\n\n---\n\n<h3 style=\"text-indent: 10vw; font-family: Verdana; font-size: 20px; font-style: normal; font-weight: normal; text-decoration: none; text-transform: none; letter-spacing: 2px; color: navy; background-color: #ffffff;\"><a href=\"#helper_functions\">3&nbsp;&nbsp;&nbsp;&nbsp;HELPER FUNCTIONS<\/a><\/h3>\n\n---\n\n<h3 style=\"text-indent: 10vw; font-family: Verdana; font-size: 20px; font-style: normal; font-weight: normal; text-decoration: none; text-transform: none; letter-spacing: 2px; color: navy; background-color: #ffffff;\"><a href=\"#clustering\">4&nbsp;&nbsp;&nbsp;&nbsp;CLUSTERING WITH PLOTLY<\/a><\/h3>\n\n---","0579a80c":"<h3 style=\"font-family: Verdana; font-size: 20px; font-style: normal; font-weight: normal; text-decoration: none; text-transforam: none; letter-spacing: 2px; color: darkorange; background-color: #ffffff;\">4.5 RECREATE BREATHS W\/ RAPIDS AND KNN<\/h3>\n\n---\n\nWe will cluster breaths (from similar RC configs) together based on **`U_IN`** and other features. We will then blend these Nearest Neighbors to recreate the original **`PRESSURE`** curve and see how we do...\n\n<br>","1fef8513":"<br>\n\n\n<a id=\"setup\"><\/a>\n\n\n<h1 style=\"font-family: Verdana; font-size: 24px; font-style: normal; font-weight: bold; text-decoration: none; text-transform: none; letter-spacing: 3px; color: darkorange; background-color: #ffffff;\"  id=\"setup\">2&nbsp;&nbsp;SETUP&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"#toc\">&#10514;<\/a>\n<\/h1>","b9bcceb4":"**Try by weighting the neighbors using supplied distance**","d58666f3":"<h3 style=\"font-family: Verdana; font-size: 20px; font-style: normal; font-weight: normal; text-decoration: none; text-transform: none; letter-spacing: 2px; color: darkorange; background-color: #ffffff;\">3.1 GENERAL HELPER FUNCTIONS<\/h3>\n\n---","739663af":"<h3 style=\"font-family: Verdana; font-size: 20px; font-style: normal; font-weight: normal; text-decoration: none; text-transform: none; letter-spacing: 2px; color: darkorange; background-color: #ffffff;\">2.3 BASIC DATA DEFINITIONS & INITIALIZATIONS<\/h3>\n\n---\n","ca1df8dd":"<h3 style=\"font-family: Verdana; font-size: 20px; font-style: normal; font-weight: normal; text-decoration: none; text-transform: none; letter-spacing: 2px; color: darkorange; background-color: #ffffff;\">2.4 LEVERAGING XLA OPTIMIZATIONS<\/h3>\n\n---\n\n\n**XLA** (Accelerated Linear Algebra) is a domain-specific compiler for linear algebra that can accelerate TensorFlow models with potentially no source code changes. **The results are improvements in speed and memory usage**.\n\n<br>\n\nWhen a TensorFlow program is run, all of the operations are executed individually by the TensorFlow executor. Each TensorFlow operation has a precompiled GPU\/TPU kernel implementation that the executor dispatches to.\n\nXLA provides us with an alternative mode of running models: it compiles the TensorFlow graph into a sequence of computation kernels generated specifically for the given model. Because these kernels are unique to the model, they can exploit model-specific information for optimization.<br><br>\n\n<div class=\"alert alert-block alert-danger\" style=\"margin: 2em; line-height: 1.7em; font-family: Verdana;\">\n    <b style=\"font-size: 16px;\">\ud83d\uded1 &nbsp; WARNING:<\/b><br><br>- XLA can not currently compile functions where dimensions are not inferrable: that is, if it's not possible to infer the dimensions of all tensors without running the entire computation<br>\n<\/div>\n\n<div class=\"alert alert-block alert-info\" style=\"margin: 2em; line-height: 1.7em; font-family: Verdana;\">\n    <b style=\"font-size: 16px;\">\ud83d\udccc &nbsp; NOTE:<\/b><br><br>- XLA compilation is only applied to code that is compiled into a graph (in <b>TF2<\/b> that's only a code inside <b><code>tf.function<\/code><\/b>).<br>- The <b><code>jit_compile<\/code><\/b> API has must-compile semantics, i.e. either the entire function is compiled with XLA, or an <b><code>errors.InvalidArgumentError<\/code><\/b> exception is thrown)\n<\/div>\n\n<div class=\"alert alert-block alert-info\" style=\"margin: 2em; line-height: 1.7em; font-family: Verdana;\">\n    <b style=\"font-size: 16px;\">\ud83d\udcd6 &nbsp; REFERENCE:<\/b><br><br>    - <a href=\"https:\/\/www.tensorflow.org\/xla\"><b>XLA: Optimizing Compiler for Machine Learning<\/b><\/a><br>\n<\/div>"}}