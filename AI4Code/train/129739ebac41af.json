{"cell_type":{"436211b1":"code","00258d12":"code","0eeb895e":"code","c2beb756":"code","3f6910d2":"code","9b94207e":"code","6b8c757d":"code","da351544":"code","30401449":"code","c02f0673":"code","d768d454":"code","9ad8dd14":"code","f9755f06":"code","28313fd9":"code","8ba4a34c":"code","d2be9b52":"code","cff50c18":"code","8e0bf775":"code","4b719c99":"code","e4a788a6":"code","f14e2d77":"code","6eb2d7a6":"code","4d3513d4":"code","6db21a25":"code","d85ee7f1":"code","495b97f3":"code","6b5d02c2":"code","a5ecae95":"code","c9fe5cae":"code","034b8200":"code","6a68f3e6":"code","6a09c5cb":"code","a6500cef":"code","6e516917":"code","23fdd228":"code","aa10121c":"code","ddcf5db7":"code","cce33215":"code","12ec487c":"code","049a0f1e":"code","b4c56d9d":"code","dc58995a":"code","821e4e9d":"code","8ccdcde4":"code","356461c0":"code","ece96ace":"code","2f122266":"code","fdc6c7f8":"code","4ddb6a51":"code","4cd6d18d":"code","1c2f761c":"code","359814fb":"code","8e3b78f8":"code","266deea9":"code","0a0ee3ee":"code","e025dda0":"code","f0f50d2e":"code","44f6928d":"code","3f39155d":"code","f9b0d339":"code","c98e4085":"code","f06f695f":"code","f42efe77":"code","b50cd4d8":"code","f0b301da":"code","bd525c11":"code","d0f73e7e":"code","ba72c57a":"code","b84993e5":"code","b95b335a":"code","3b4cb680":"code","760916ae":"code","96c74276":"code","6dcd53b7":"code","5ed75a51":"code","524f7198":"markdown","d531eab8":"markdown","56caef6a":"markdown","e885a606":"markdown","57c1ccd8":"markdown","89ea606b":"markdown","e165e937":"markdown","d49af4c4":"markdown","b8a1b74f":"markdown","ea5e6d78":"markdown","0dbfcbf7":"markdown","f54a6273":"markdown","8b36ccb9":"markdown","065ce298":"markdown","2f6d4731":"markdown","11f77e2c":"markdown","9b907a23":"markdown","e3d2d9ff":"markdown","3d93f9c8":"markdown","edf7a5db":"markdown","1b10cad4":"markdown","70859733":"markdown","c5ecea2d":"markdown"},"source":{"436211b1":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","00258d12":"df=pd.read_csv('\/kaggle\/input\/fifa19\/data.csv')\ndf.head()","0eeb895e":"#suppression des colonnes inutiles\ndf.drop(columns=['Unnamed: 0'],inplace=True)\n#suppression des espaces\ndf.columns = df.columns.str.replace(' ', '')","c2beb756":"df.columns","3f6910d2":"#visualisations des nulls\ndf.isna().sum()","9b94207e":"\nrole_score=df[['ID','LS', 'ST', 'RS', 'LW', 'LF',\n               'CF', 'RF', 'RW','LAM', 'CAM', \n               'RAM', 'LM', 'LCM', 'CM', 'RCM', \n               'RM', 'LWB', 'LDM','CDM', 'RDM', \n               'RWB', 'LB', 'LCB', 'CB', 'RCB', 'RB']]\n\n\n","6b8c757d":"#traitment des roles scores \nimport re \nrole_score.head()\n#on supprime les +X\nrole_score=role_score.replace(to_replace ='[+][0-9]', value = '', regex = True)\nrole_score.head()\n","da351544":"#mettre en num\u00e9rique\nrole_score=role_score.apply(pd.to_numeric)\n#remplir les nulls avec la moyenne\nrole_score=role_score.fillna(role_score.mean())\nrole_score.dtypes\nrole_score.head()","30401449":"role_score[['LS', 'ST', 'RS', 'LW', 'LF','CF', 'RF', 'RW','LAM', 'CAM', \n            'RAM', 'LM', 'LCM', 'CM', 'RCM', 'RM', 'LWB', 'LDM','CDM', 'RDM', \n            'RWB', 'LB', 'LCB', 'CB', 'RCB', 'RB']]=role_score[['LS', 'ST', 'RS', 'LW', 'LF','CF', 'RF', 'RW','LAM', 'CAM', \n            'RAM', 'LM', 'LCM', 'CM', 'RCM','RM', 'LWB', 'LDM','CDM', 'RDM', \n            'RWB', 'LB', 'LCB', 'CB', 'RCB', 'RB']].apply(lambda x : pd.qcut(x, 5, labels=['very bad','bad','medium','good','very good']),axis=0)\n","c02f0673":"#1.2\n\n#traitment des positions\ndf['Position'].value_counts()\ndf['Position']=df['Position'].replace(' ','')\n#les positions avec moins de 100 joueurs sont fusionn\u00e9es\ndf=df.replace({'Position': {'RF':'CF','LF': 'CF','LAM':'CAM','RAM': 'CAM','RWB':'RB','LWB':'LB'}})","d768d454":"#1.3 Traitment de body type\ndf['BodyType'].value_counts()\n","9ad8dd14":"#Les body \"uniques\" sont remplac\u00e9s par les standards Lean Normal et Stocky\n#les photos des joueurs avec des body types specifiques nous ont aid\u00e9 a meiux les repartir\n\ndf['BodyType']=df['BodyType'].replace('C. Ronaldo','Stocky')\ndf['BodyType']=df['BodyType'].replace('Akinfenwa','Stocky')\ndf['BodyType']=df['BodyType'].replace('Messi','Normal')\ndf['BodyType']=df['BodyType'].replace('Shaqiri','Stocky')\ndf['BodyType']=df['BodyType'].replace('Neymar','Lean')\ndf['BodyType']=df['BodyType'].replace('Courtois','Normal')\ndf['BodyType']=df['BodyType'].replace('PLAYER_BODY_TYPE_25','Normal')\ndf['BodyType'].value_counts()","f9755f06":"\n#1.4 Gestion de la colonne WorkRate qui est de la forme Low\/Medium\n#separation en deux colonnes def rate et atk rate\ndf[\"WorkRate\"]=df[\"WorkRate\"].replace(' ','')\n\nnew = df[\"WorkRate\"].str.split(\"\/\", n = 1, expand = True) \n  \ndf[\"AttackRate\"]= new[0]\n  \ndf[\"DefenceRate\"]= new[1]\n  \ndf.drop(columns =[\"WorkRate\"], inplace = True) \n","28313fd9":"#Mettre les colonnes DefRate et ATkRate en categories numeriques\n#utilisation du regex car ceratines colonnes contiennent des caracteres speciaux\ndf['DefenceRate'] = df[\"DefenceRate\"].replace('.*Low.*',1, regex=True)\ndf['DefenceRate'] = df[\"DefenceRate\"].replace('.*Medium.*',2, regex=True)\ndf['DefenceRate'] = df[\"DefenceRate\"].replace('.*High.*',3, regex=True)\n\ndf['AttackRate'] = df[\"AttackRate\"].replace('.*Low.*',1, regex=True)\ndf['AttackRate'] = df[\"AttackRate\"].replace('.*Medium.*',2, regex=True)\ndf['AttackRate'] = df[\"AttackRate\"].replace('.*High.*',3, regex=True)","8ba4a34c":"df[[\"AttackRate\",\"DefenceRate\"]]","d2be9b52":"\nimport seaborn as sns \n\nsns.catplot(x=\"BodyType\", y=\"Overall\", kind=\"bar\", data=df)\n\nsns.catplot(x=\"BodyType\", y=\"Potential\", kind=\"bar\", data=df)","cff50c18":"#df[['BodyType', 'Position']].plot.pie()\ndf.BodyType.value_counts().plot(kind='pie')\n","8e0bf775":"df.groupby(df[\"Age\"])[\"Overall\"].agg(\"mean\").plot(x=\"Age\",y=\"Overall\",marker='.')","4b719c99":"#on remplit les salaires manquants avec le salaire moyen\ndf['Wage'].fillna('\u20ac200K')\n\ndef wage_in_euros(wage):\n    if type(wage)==str:\n        x=wage.replace('\u20ac', '')\n        x=x.replace('K', '000')\n        return float(x)\n    \n    return(wage)\n\ndf['Wage'] = df['Wage'].apply(wage_in_euros)\n\ndf['Wage'].head()","e4a788a6":"df.groupby(df[\"Age\"])[\"Wage\"].agg(\"mean\").plot(x=\"Age\",y=\"Wage\",marker='.')","f14e2d77":"df.groupby(df[\"Age\"])[\"Overall\"].agg(\"mean\")","6eb2d7a6":"df.groupby(df[\"Age\"])[\"Wage\"].agg(\"mean\")","4d3513d4":"#Pace=(Vitesse+Acceleration)\/2 graph de la Pace par rapport a l age \n\ndf[\"Pace\"] = df[[\"Acceleration\",\"SprintSpeed\"]].sum(axis=1)\ndf[\"Pace\"]=df[\"Pace\"]\/2\ndf[\"Pace\"]\ndf.groupby(df[\"Age\"])[\"Pace\"].agg(\"mean\").plot(x=\"Age\",y=\"Pace\",marker='.')\n#df[[\"Pace\",\"Age\"]].loc[df['Club']=='Olympique Lyonnais']","6db21a25":"df.groupby(df[\"PreferredFoot\"])[\"Overall\"].agg(\"mean\").plot.hist(by=\"PreferredFoot\")","d85ee7f1":"sns.catplot(x=\"PreferredFoot\", y=\"Potential\", kind=\"bar\", data=df)","495b97f3":"#on remplit les cellules vides poids avec le poid moyen\ndf['Weight'].fillna(\"180lbs\")\n\n#fonction pour extraire les donn\u00e9es num\u00e9riques et convertir en kg les lbs\ndef lbs_to_kg(weight):\n    if type(weight)==str:\n        return float(weight.replace('lbs', ''))\/2.205\n    return(weight\/2.205)\n\ndf['Weight'] = df['Weight'].apply(lbs_to_kg)\n\ndf['Weight'].head()","6b5d02c2":"#visualisation du poid par role \nsns.catplot(x=\"Position\", y=\"Weight\", kind=\"bar\", data=df,aspect=7)\n#les roles defensifs sont les plus lourds car ils doivent tenir des positions par oppos\u00e9s les roles offensifs sont plus legers pour infiltrer les defenses","a5ecae95":"df.groupby(df[\"Position\"])[\"Weight\"].agg(\"mean\")","c9fe5cae":"#on remplit les tailles manquantes avec la taille moyenne\ndf['Height'].fillna('5\\'6')\n\n#fonction pour extraire les donn\u00e9es num\u00e9riques et convertir en cm les feet\ndef feet_to_cm(weight):\n    if type(weight)==str:\n        return float(weight.replace('\\'', '.'))*30.48\n    return(weight*30.48)\n\ndf['Height'] = df['Height'].apply(feet_to_cm)\n\ndf['Height'].head()","034b8200":"df.groupby(df[\"Position\"])[\"Height\"].agg(\"mean\")","6a68f3e6":"#visualisation des tailles par role\nsns.catplot(x=\"Position\", y=\"Height\", kind=\"bar\", data=df,aspect=7)\n#les roles defensifs sont les plus grands  car ils doivent tenir des positions et intercepter des ballons par oppos\u00e9s les roles offensifs sont plus petits pour infiltrer les defenses","6a09c5cb":"#FAIRE LA MEME CHOSE AVEC LES IMC\nheight_in_m=df['Height']\/100\ndf['IMC']=df['Weight']\/(height_in_m*height_in_m)\ndf['IMC']","a6500cef":"df.groupby(df[\"Position\"])[\"IMC\"].agg(\"mean\")\n#resultats tres surprenants les IMC les plus eleves sont les lateraux\n#probablment pour percer les defenses sans vasciller, ne pas tomber au moindre accrochage","6e516917":"#Vitesse par rapport au poid\ndf.groupby(df[\"Weight\"])[\"Pace\"].agg(\"mean\").plot(x=\"Weight\",y=\"Pace\",marker='.')","23fdd228":"#note globale par rapport au poid\ndf.groupby(df[\"Weight\"])[\"Overall\"].agg(\"mean\").plot(x=\"Weight\",y=\"Overall\",marker='.')","aa10121c":"df.groupby(df[\"Weight\"])[\"ID\"].agg(\"count\")","ddcf5db7":"#vitesse par rapport a la taille\ndf.groupby(df[\"Height\"])[\"Pace\"].agg(\"mean\").plot(x=\"Height\",y=\"Pace\",marker='.')","cce33215":"#note gloabl par rapport a la taille\ndf.groupby(df[\"Height\"])[\"Overall\"].agg(\"mean\").plot(x=\"Height\",y=\"Overall\",marker='.')","12ec487c":"#vitesse par rapport a l IMC\ndf.groupby(df[\"IMC\"])[\"Pace\"].agg(\"mean\").plot(x=\"IMC\",y=\"Pace\",marker='.')","049a0f1e":"#note gloable par rapport a l IMC\ndf.groupby(df[\"IMC\"])[\"Overall\"].agg(\"mean\").plot(x=\"IMC\",y=\"Overall\",marker='.')","b4c56d9d":"df.groupby(df[\"Position\"])[\"Wage\"].agg(\"mean\")","dc58995a":"# 2.3 salaire par poste\nsns.catplot(x=\"Position\", y=\"Wage\", kind=\"bar\", data=df,aspect=2)","821e4e9d":"import matplotlib.pyplot as plt\nimport seaborn as sns\nplt.figure(figsize=(24,20))\ncor = df.corr()\nsns.heatmap(cor, annot=True, cmap=plt.cm.Reds)\nplt.show()","8ccdcde4":"df[\"Shooting\"] = df[[\"Finishing\",\"LongShots\",\"Penalties\",\"Positioning\",\"ShotPower\",\"Volleys\"]].sum(axis=1)\ndf[\"Shooting\"]=df[\"Shooting\"]\/6\n\ndf[\"Passing\"] = df[[\"Crossing\",\"Curve\",\"LongPassing\",\"ShortPassing\",\"Vision\"]].sum(axis=1)\ndf[\"Passing\"] = df[\"Passing\"]\/5\n\ndf[\"DribblingMean\"] = df[[\"Agility\",\"Balance\",\"BallControl\",\"Composure\",\"Dribbling\",\"Reactions\"]].sum(axis=1)\ndf[\"DribblingMean\"] = df[\"DribblingMean\"]\/6\n\ndf[\"Defending\"] = df[[\"Interceptions\",\"Marking\",\"SlidingTackle\",\"StandingTackle\"]].sum(axis=1)\ndf[\"Defending\"] = df[\"Defending\"]\/4\n\ndf[\"Physical\"] = df[[\"Aggression\",\"Jumping\",\"Stamina\",\"Strength\"]].sum(axis=1)\ndf[\"Physical\"] = df[\"Physical\"]\/4\ndf[[\"Pace\",\"Shooting\",\"Passing\",\"DribblingMean\",\"Defending\",\"Physical\"]].loc[df['Nationality']=='Spain']","356461c0":"#Dividing stats \ndf[\"PaceD\"] = df[\"Pace\"]\/30\n\ndf[\"ShootingD\"]=df[\"Shooting\"]\/30\n\ndf[\"PassingD\"] = df[\"Passing\"]\/30\n\ndf[\"DribblingMeanD\"] = df[\"DribblingMean\"]\/30\n\ndf[\"DefendingD\"] = df[\"Defending\"]\/30\n\ndf[\"PhysicalD\"] = df[\"Physical\"]\/30\n\n\n","ece96ace":"# 5 Best Football Nations' graphic with their stats\n\ndef GraphPays(Pays) : \n    dfFrance= df[[\"PaceD\", \"ShootingD\", \"PassingD\", \"DribblingMeanD\",\"DefendingD\",\"PhysicalD\",\"SkillMoves\"]].loc[df['Nationality']==Pays].mean(axis=0)\n    # Making the label's graph.\n    labels = [dfFrance[\"PaceD\"].round(decimals=2),dfFrance[\"ShootingD\"].round(decimals=2),dfFrance[\"PassingD\"].round(decimals=2)\n              ,dfFrance[\"DribblingMeanD\"].round(decimals=2),dfFrance[\"DefendingD\"].round(decimals=2)\n              ,dfFrance[\"PhysicalD\"].round(decimals=2),dfFrance[\"SkillMoves\"].round(decimals=2)]\n\n    ax = dfFrance.plot(kind=\"bar\")\n    rects = ax.patches\n\n    for rect, label in zip(rects, labels):\n        height = rect.get_height()\n        ax.text(rect.get_x() + rect.get_width() \/ 2, height, label,\n                ha='center', va='bottom')\n    plt.show()\n","2f122266":"#Belgium\nGraphPays(\"Belgium\")\n#France\nGraphPays(\"France\")\n#England\nGraphPays(\"England\")\n#Brazil\nGraphPays(\"Brazil\")\n#Germany\nGraphPays(\"Germany\")\n#Italy\nGraphPays(\"Italy\")\n#Spain\nGraphPays(\"Spain\")","fdc6c7f8":"\n#selection des features\n#et supression des qq lignes restantes avec des valeurs nulles\nX=df[['Crossing','Overall', 'Potential',\n       'Finishing', 'HeadingAccuracy', 'ShortPassing', 'Volleys', 'Dribbling',\n       'Curve', 'FKAccuracy', 'LongPassing', 'BallControl', 'Acceleration',\n       'SprintSpeed', 'Agility', 'Reactions', 'Balance', 'ShotPower',\n       'Jumping', 'Stamina', 'Strength', 'LongShots', 'Aggression',\n       'Interceptions', 'Positioning', 'Vision', 'Penalties', 'Composure',\n       'Marking', 'StandingTackle', 'SlidingTackle', 'GKDiving', 'GKHandling',\n       'GKKicking', 'GKPositioning', 'GKReflexes','Position','Wage','Height','Weight','Special','Age','AttackRate','DefenceRate','BodyType']].dropna()\n\n#influence de l'age ??\n","4ddb6a51":"#X=X.replace({'BodyType': {'Lean':1,'Normal': 2,'Stocky':3}})\n# Get one hot encoding of columns B\noneHot = pd.get_dummies(X['BodyType'])\n\n# Drop column B as it is now encoded\nX = X.drop('BodyType',axis = 1)\n# Join the encoded df\nX = X.join(oneHot)\n","4cd6d18d":"X.head()","1c2f761c":"#fusion des position tres similaires pour diminuer le nombre de labels\nX=X.replace({'Position': {'LCB':'CB','RCB': 'CB','LB':'RB','LM': 'RM','CF':'ST','LCM':'RCM','LDM':'RDM','LW':'RW','LS':'RS'}})\nX=X.replace({'Position': {'RW':'RM','RDM':'CDM','RS':'ST','RCM':'CM' }})\n#la ligne de la greed\nX=X.replace({'Position': {'CDM':'CM','CAM':'RM'}})","359814fb":"#selection des labels\ny=X['Position']\nX=X.drop('Position',axis=1)\n#X.loc[:, 'Crossing':'Age']=X.loc[:, 'Crossing':'Age'].apply(lambda x : pd.qcut(x, 5, labels=[1,2,3,4,5]),axis=0)\n#qcut des features sur les stats \nX.iloc[:,:-5]=X.iloc[:,:-5].apply(lambda x : pd.qcut(x, 5, labels=[1,2,3,4,5]),axis=0)\nX","8e3b78f8":"from sklearn.model_selection import train_test_split\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn import metrics\n\nX_train, X_test, y_train, y_test = train_test_split(X, y)","266deea9":"logistic_regression= LogisticRegression()\nlogistic_regression.fit(X_train,y_train)\ny_pred=logistic_regression.predict(X_test)","0a0ee3ee":"#visualisation des erreurs matrice de confusion\nimport matplotlib.pyplot as plt\nconfusion_matrix = pd.crosstab(y_test, y_pred, rownames=['Actual'], colnames=['Predicted'])\nplt.figure(figsize=(12,10))\nsns.heatmap(confusion_matrix, annot=True)","e025dda0":"#Amelioration de l'algo de ML en rajoutant l'age (surprenant)\n\n#ACCURACY sur le train set et le test set\n\ny_pred = logistic_regression.predict(X_train)\nprint('Accuracy sur le Train set: ',metrics.accuracy_score(y_train, y_pred))\n\ny_pred = logistic_regression.predict(X_test)\nprint('Accuracy sur le Test set: ',metrics.accuracy_score(y_test, y_pred))","f0f50d2e":"from sklearn.tree import DecisionTreeClassifier\ntree = DecisionTreeClassifier()\ntree.fit(X_train, y_train)","44f6928d":"y_pred = tree.predict(X_test)","3f39155d":"#visualisation des erreurs matrice de confusion\nimport matplotlib.pyplot as plt\nconfusion_matrix = pd.crosstab(y_test, y_pred, rownames=['Actual'], colnames=['Predicted'])\nplt.figure(figsize=(12,10))\nsns.heatmap(confusion_matrix, annot=True)","f9b0d339":"#ACCURACY sur le train set et le test set\n\ny_pred = tree.predict(X_train)\nprint('Accuracy sur le Train set: ',metrics.accuracy_score(y_train, y_pred))\n\ny_pred = tree.predict(X_test)\nprint('Accuracy sur le Test set: ',metrics.accuracy_score(y_test, y_pred))","c98e4085":"from sklearn import svm\nsvm_clf = svm.SVC(gamma='scale')\nsvm_clf.fit(X_train, y_train) ","f06f695f":"#visualisation des erreurs matrice de confusion\nimport matplotlib.pyplot as plt\nconfusion_matrix = pd.crosstab(y_test, y_pred, rownames=['Actual'], colnames=['Predicted'])\nplt.figure(figsize=(12,10))\nsns.heatmap(confusion_matrix, annot=True)","f42efe77":"#ACCURACY sur le train set et le test set\n\ny_pred = svm_clf.predict(X_train)\nprint('Accuracy sur le Train set: ',metrics.accuracy_score(y_train, y_pred))\n\ny_pred = svm_clf.predict(X_test)\nprint('Accuracy sur le Test set: ',metrics.accuracy_score(y_test, y_pred))","b50cd4d8":"from sklearn.neighbors import KNeighborsClassifier\nknc_clf = KNeighborsClassifier()\nknc_clf.fit(X_train, y_train) ","f0b301da":"y_pred = knc_clf.predict(X_test)\nprint('Accuracy: ',metrics.accuracy_score(y_test, y_pred))","bd525c11":"from sklearn.ensemble import VotingClassifier\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.svm import SVC\nfrom sklearn.naive_bayes import GaussianNB\n\n#liste des classifiers utilis\u00e9s pour le voting\nlog_clf=LogisticRegression()\nrdn_clf=RandomForestClassifier()\nsvm_clf=SVC()\ngnb_clf = GaussianNB()\n\nvoting_clf=VotingClassifier(estimators=[('lr',log_clf),('rf',rdn_clf),('svc',svm_clf),('gnb',gnb_clf)],voting='hard')\n#voting_clf.fit(X_train,y_train)","d0f73e7e":"for clf in (log_clf,rdn_clf,svm_clf,gnb_clf,voting_clf):\n    clf.fit(X_train,y_train)\n    y_pred=clf.predict(X_test)\n    print(clf.__class__.__name__,metrics.accuracy_score(y_test,y_pred))","ba72c57a":"#essayer de comprendre pk les CDM ET CM sont confondus et CAM et RM et identifier ce qui permettrait de les differencier\npd.options.display.max_columns = 200\ndf.loc[(df['Position']=='CDM')|(df['Position']=='CM')].groupby('Position').mean()\ndf.loc[(df['Position']=='CAM')|(df['Position']=='RM')].groupby('Position').mean()","b84993e5":"from sklearn.cluster import KMeans\ntest1=df[['Crossing','Finishing', 'HeadingAccuracy', 'ShortPassing', 'Volleys', 'Dribbling',\n       'Curve', 'FKAccuracy', 'LongPassing', 'BallControl', 'Acceleration',\n       'SprintSpeed', 'Agility', 'Reactions', 'Balance', 'ShotPower',\n       'Jumping', 'Stamina', 'Strength', 'LongShots', 'Aggression',\n       'Interceptions', 'Positioning', 'Vision', 'Penalties', 'Composure',\n       'Marking', 'StandingTackle', 'SlidingTackle', 'GKDiving', 'GKHandling',\n       'GKKicking', 'GKPositioning', 'GKReflexes','Position']].dropna()\n\ntest1=test1.replace({'Position': {'LCB':'CB','RCB': 'CB','LB':'RB','LM': 'RM','CF':'ST','LCM':'RCM','LDM':'RDM','LW':'RW','LS':'RS'}})\ntest1=test1.replace({'Position': {'RW':'RM','RDM':'CDM','RS':'ST','RCM':'CM' }})\n#la ligne de la greed\ntest1=test1.replace({'Position': {'CDM':'CM','CAM':'RM'}})\ntest2=test1['Position']\ntest1.drop('Position',axis=1,inplace=True)\nkmeans = KMeans(n_clusters=6, random_state=0).fit(test1)","b95b335a":"plt.scatter(test1.Finishing,test1.Crossing, c=kmeans.labels_, cmap='rainbow')","3b4cb680":"plt.scatter(test1.GKKicking,test1.GKHandling, c=kmeans.labels_, cmap='rainbow')","760916ae":"plt.scatter(test1.Stamina,test1.ShortPassing, c=kmeans.labels_, cmap='rainbow')","96c74276":"#comparaison des clusters avec les positions\nimport matplotlib.pyplot as plt\nconfusion_matrix = pd.crosstab(kmeans.labels_, test2, rownames=['Actual'], colnames=['Predicted'])\nplt.figure(figsize=(12,10))\nsns.heatmap(confusion_matrix, annot=True)\n\n#on constate que seul le cluster pour les GK est bien constitu\u00e9 \n#les autres cluster ne correspondent pas aux 6 positions (bien que pour ceratins roles comme les STrikers ou les CB ca se rapproche)","6dcd53b7":"X['Position']=y\n\nplayer_features = ('Crossing','Finishing', 'HeadingAccuracy', 'ShortPassing', 'Volleys', 'Dribbling',\n       'Curve', 'FKAccuracy', 'LongPassing', 'BallControl', 'Acceleration',\n       'SprintSpeed', 'Agility', 'Reactions', 'Balance', 'ShotPower',\n       'Jumping', 'Stamina', 'Strength', 'LongShots', 'Aggression',\n       'Interceptions', 'Positioning', 'Vision', 'Penalties', 'Composure',\n       'Marking', 'StandingTackle', 'SlidingTackle', 'GKDiving', 'GKHandling',\n       'GKKicking', 'GKPositioning', 'GKReflexes')\n\n# Top four features for every position in football\n\nfor i, val in df.groupby(X['Position'])[player_features].mean().iterrows():\n    print('Position {}: {}, {}, {},{},{}'.format(i, *tuple(val.nlargest(5).index)))","5ed75a51":"for position_name, features in df.groupby(X['Position'])[player_features].mean().iterrows():\n    top_features = dict(features.nlargest(5))\n    print(top_features)\n    lists = sorted(top_features.items())\n    a, b = zip(*lists) # unpack a list of pairs into two tuples\n    # intialise data of lists. \n    data = {'Stats':list(a), 'Mean':list(b)} \n    # Create DataFrame \n    df1 = pd.DataFrame(data) \n    #dislay\n    print(\"                          \"+position_name+\"                           \")\n    sns.catplot(x=\"Stats\", y=\"Mean\", kind=\"bar\", data=df1,aspect=2)\n    plt.show()\n   \n#ce sont respectivement les graphes de Position CB, Position CM, Position GK, Position RB, Position RM, Position ST","524f7198":"Ci dessus la map des roles pour mieux identifier les positions et savoir comment les rassembler","d531eab8":"**3.6 KMEAN CLUSTERING**\n\n\nEssayer de voir si le clustering va creer des cluster en adequation avec les 6 roles","56caef6a":"**1. CLEANING **","e885a606":"**2. QUELQUES VISUALISATIONS et ANALYSES**","57c1ccd8":"**Ci dessous respectivement les graphes de Position CB, Position CM, Position GK, Position RB, Position RM, Position ST**","89ea606b":"**1.1 TRANSFROMATION DES COLONNES ROLES SCORES **\n\nForme de la colonne type int '90+3'","e165e937":"**4. BEST ATTRIBUTES FOR EACH ROLE**\n\nQuels sont les meilleurs attributs a chaque roles ?","d49af4c4":"1.5 TRAITEMENT DE LA COLONNE WEIGHT QUI EST DE LA FORME\n\nstring : ['180lbs']  et conversion en kg","b8a1b74f":"**3.1 DESCRIPTION DES LABELS**\n1. GK= Goalkeeper, le gardien  c'est le dernier rempart \n2. CB = Central Back, les defenseurs centraux grands solides ils doivent tenir des positions devant les buts dernieres lignes avant le gardien\n3. RB= Right Back, les defenseurs lateraux (droit et gauche) ils protegent les flancs ils sont assez rapides\n4. CM= Central Midfielder, les milieux de terrain assez techniques (bons en passes) ils assurent la transition entre attaque et defense \n5. RM= Right Midfielder, les milieux lateraux rapides et techniques doivent deborder les defenses adverses pour centrer sur les attaquants \n6. ST= Striker, les attaquants leur objectifs et des percer les defenses et de marquer","ea5e6d78":"**3. MACHINE LEARNING**\n\n\nWe wnat to predict the best position for a palyer using his stats and informations\n\n\n**3.1 Features engineering**","0dbfcbf7":"**KNeighborsClassifier**","f54a6273":"**2.4 REGROUPEMENTS DE CRATINES STATS POUR LETUDE DES STATS DE PAYS**\n\nDans le monde du football nous avons aussi nos propres st\u00e9r\u00e9otypes et id\u00e9es re\u00e7ues, par exemple on entend souvent : \"Les espagnols sont \u00e0 l'aise balle au pieds\", \"les br\u00e9siliens sont techniques\" , \"les italiens jouent le contre attaque\", nous allons essayer de d\u00e9couvrir parmis les 5 grandes nations du football quels sont les attributs les plus d\u00e9velopp\u00e9s selon les pays.\u200bPour ce faire, nous allons determiner des features qui regroupent un certain nombre de statistiques, comme nous avons fait plus haut avec la Vitesse globale d'un joueur (Acceleration + SprintSpeed). Ainsi nous regroupons les stats les plus corr\u00e9l\u00e9s \u00e0 l'aide de la matrice de correlation ci dessus.\n\n**Shooting** sera la moyenne entre les stats de : Finishing, LongShot, Penalties, Positioning, ShotPower, Volleys\n\n**Passing **: Crossing, Curve, Long Passing, Short Passing, Vision\n\n**Dribbling** : Agility, Balance, Ball Control, Composure, Dribbling, Reactions\n\n**Defending** : Heading, Interceptions, Marking, SlidingTackle, StandingTackle\n\n**Physical** : Aggression, Jumping, Stamina, Strength","8b36ccb9":"1.5 Traitement de la colonne Height qui est un string de la forme 5'6 avec une mesure en feet","065ce298":"**3.2 REGRESSION LOGISTIQUE**","2f6d4731":"**3.5 ML ENSEMBLING**   VOTING","11f77e2c":"**3.4 SUPPORT VECTOR MACHINE**","9b907a23":"![image.png](attachment:image.png)","e3d2d9ff":"Photo de Shaqiri qui apparait comme \"Stocky\"\n![image.png](attachment:image.png)\n","3d93f9c8":"**PROJET PYTHON par Yehoudah AZOULAY, Anas ELHARISSI et Mickael CHENG**\n\n**DATASET FIFA PLAYERS 19**\n\n> PLAN :\n\n1. Cleaning et transformations de colonnes\n\n    1.1 Attributs scores\n    \n    1.2 Regroupements des positions\n    \n    1.3 \"BodyType\" cleaning\n    \n    1.4 \"WorkRate\" splitting\n    \n    1.5 Height Weight\n    \n    1.6 Wage\n    \n    1.7 Creation de la colonne IMC\n    \n\n2. Analyses et visualisations\n\n    2.1 Influence de l'age sur les performances \n    \n    2.2 Taille et poids par role\n    \n    2.3 Salaire par role\n    \n    2.4 Regroupement de certaines stats\n    \n    2.4 Statistiques des pays\n    \n    \n  \n3. Machine Learning\n\n    3.1 Features engineering\n    \n    3.2 Regression Logistqiue\n    \n    3.3 Decision Tree\n    \n    3.4 Support Vector Machine\n    \n    3.5 Ensembling ('Voting')\n    \n    3.6 Clustering\n    \n    \n    \n4. Meilleurs attributs par position\n\n\n","edf7a5db":"1.6 Transformations de la colonne wage ","1b10cad4":"**3.3 DECISION TREE**","70859733":"**2.5 STATS DES PAYS**","c5ecea2d":"**1.7 Creation de la colonne IMC**"}}