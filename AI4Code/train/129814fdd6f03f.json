{"cell_type":{"f4a5a0e0":"code","d0034f77":"code","f570693f":"code","a5f6928f":"code","f9948f70":"code","1039ab1e":"code","8df74514":"code","bf4734c1":"code","68df7b61":"code","a7a5675f":"code","7925dabf":"code","d1173030":"code","6e82a463":"code","ba662bab":"code","77aa4066":"code","33460966":"code","0fab0ba7":"code","5e696ea2":"code","593a5c9d":"code","4b10038c":"code","0dec8601":"code","949b4136":"markdown","2c536d48":"markdown","1cdf0300":"markdown","22ff702e":"markdown","40b422bf":"markdown","621d973f":"markdown","78e5ba7e":"markdown","1356ae63":"markdown","fa70e77d":"markdown"},"source":{"f4a5a0e0":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","d0034f77":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns","f570693f":"train=pd.read_csv('..\/input\/titanic\/train.csv')\ntest=pd.read_csv('..\/input\/titanic\/test.csv')","a5f6928f":"df=train.copy()","f9948f70":"sns.distplot(df['Age'].dropna())","1039ab1e":"figure=df.Age.hist(bins=50)\nfigure.set_title('Age')\nfigure.set_xlabel('Age')\nfigure.set_ylabel('No. of Passengers')","8df74514":"figure=df.boxplot(column=\"Age\", figsize=(20,20))","bf4734c1":"df['Age'].describe()","68df7b61":"uppper_boundary=df['Age'].mean() + 1.5* df['Age'].std()\nlower_boundary=df['Age'].mean() - 1.5* df['Age'].std()\nprint(lower_boundary), print(uppper_boundary),print(df['Age'].mean())","a7a5675f":"##### Assuming Age follows a Gaussian Distribution, we will calculate the boundaries which differentiates the outliers\n\nuppper_boundary=df['Age'].mean() + 3* df['Age'].std()\nlower_boundary=df['Age'].mean() - 3* df['Age'].std()\nprint(lower_boundary), print(uppper_boundary),print(df['Age'].mean())","7925dabf":"df.loc[df['Age']>=73,'Age']=73\nfigure=df.boxplot(column=\"Age\",figsize=(20,20))","d1173030":"figure=df.Age.hist(bins=50)\nfigure.set_title('Age')\nfigure.set_xlabel('Age')\nfigure.set_ylabel('No. of Passengers')","6e82a463":"sns.distplot(df['Fare'].dropna())","ba662bab":"figure=df.Fare.hist(bins=50)\nfigure.set_title('Fare')\nfigure.set_xlabel('Fare')\nfigure.set_ylabel('No. of Passengers')","77aa4066":"df.boxplot(column=\"Fare\",figsize=(10,10))","33460966":"df['Fare'].describe()","0fab0ba7":"IQR=df.Fare.quantile(0.75)-df.Fare.quantile(0.25)\nlower_bridge=df['Fare'].quantile(0.25)-(IQR*1.5)\nupper_bridge=df['Fare'].quantile(0.75)+(IQR*1.5)\nprint(lower_bridge), print(upper_bridge)","5e696ea2":"lower_bridge=df['Fare'].quantile(0.25)-(IQR*3)\nupper_bridge=df['Fare'].quantile(0.75)+(IQR*3)\nprint(lower_bridge), print(upper_bridge)","593a5c9d":"df.loc[df['Fare']>=66,'Fare']=66","4b10038c":"df.boxplot(column=\"Fare\",figsize=(10,10))","0dec8601":"figure=df.Fare.hist(bins=50)\nfigure.set_title('Fare')\nfigure.set_xlabel('Fare')\nfigure.set_ylabel('No. of Passengers')","949b4136":"Feel free to upvote if you found it useful.\n\nThanks","2c536d48":"# In the following notebook, I have implemented techniques to take care of outliers for normally distributed and skewed feature columns by taking an example involving Age and Fare columns from Titanic dataset Survival prediction problem.","1cdf0300":"Here, we'll be using IQR technique because the 'Fare' feature variable is skewed i.e. not normally distributed.","22ff702e":"# 2. Fare","40b422bf":"So, only a single outlier was handled with above calculation and 6 outliers still remanined. \nHowever, the fact that only a single outlier was replaced doesn't necessarily make this a bad technique to handle outliers. This technique will come in quite handy when there are outliers in dataset with large range of numerical values. To see the full extent of how well this technique performs, try implementing it on another problem like Housing Price Prediction which has many numerical columns ","621d973f":"# 1. Age","78e5ba7e":"We will not consider \"*1.5* df['feature'].std()\" because upper boundary age extreme point is around 63 to 67 years whereas from above calculation, we are getting 51.5 or, 52 years as upper boundary of age.If we consider this as our upper boundary, many of our 'true' age data will be lost. So, we'll consider below case of \"*3* df['feature'].std()\" instead.","1356ae63":"So, from implementing this IOR technique for outlier feature engineering, we now only have a single outlier present in the dataset as opposed to many that were present before.","fa70e77d":"Now, consider the Fare variable in which I have implemented IQR technique for outlier feature engineering. This will give us a much better visualization in terms of boxplot on how we have handled the outliers."}}