{"cell_type":{"e72771b6":"code","0c39cc26":"code","e6c5e3dc":"code","61a7fa6c":"code","b4df5d2b":"code","31427723":"code","c1ed8a85":"code","840e897d":"markdown"},"source":{"e72771b6":"import numpy as np\nimport pandas as pd\nfrom numba import njit, prange","0c39cc26":"data = pd.read_csv('\/kaggle\/input\/santa-workshop-tour-2019\/family_data.csv', index_col='family_id')\nfamily_size = data.n_people.values.astype(np.int8)\n\npenalties = np.asarray([\n    [\n        0,\n        50,\n        50 + 9 * n,\n        100 + 9 * n,\n        200 + 9 * n,\n        200 + 18 * n,\n        300 + 18 * n,\n        300 + 36 * n,\n        400 + 36 * n,\n        500 + 36 * n + 199 * n,\n        500 + 36 * n + 398 * n\n    ] for n in range(family_size.max() + 1)\n])\n\nfamily_cost_matrix = np.concatenate(data.n_people.apply(lambda n: np.repeat(penalties[n, 10], 100).reshape(1, 100)))\n\nfor fam in data.index:\n    for choice_order, day in enumerate(data.loc[fam].drop(\"n_people\")):\n        family_cost_matrix[fam, day - 1] = penalties[data.loc[fam, \"n_people\"], choice_order]\n\n\naccounting_cost_matrix = np.zeros((500, 500))\nfor n in range(accounting_cost_matrix.shape[0]):\n    for diff in range(accounting_cost_matrix.shape[1]):\n        accounting_cost_matrix[n, diff] = max(0, (n - 125.0) \/ 400.0 * n**(0.5 + diff \/ 50.0))\n\n\n@njit(fastmath=True)\ndef cost_function(prediction, family_size, family_cost_matrix, accounting_cost_matrix):\n    N_DAYS = family_cost_matrix.shape[1]\n    MAX_OCCUPANCY = 300\n    MIN_OCCUPANCY = 125\n    penalty = 0\n    daily_occupancy = np.zeros(N_DAYS + 1, dtype=np.int16)\n    for i, (pred, n) in enumerate(zip(prediction, family_size)):\n        daily_occupancy[pred - 1] += n\n        penalty += family_cost_matrix[i, pred - 1]\n\n    accounting_cost = 0\n    n_low = 0\n    n_high = 0\n    daily_occupancy[-1] = daily_occupancy[-2]\n    for day in range(N_DAYS):\n        n_next = daily_occupancy[day + 1]\n        n = daily_occupancy[day]\n        n_high += (n > MAX_OCCUPANCY)\n        n_low += (n < MIN_OCCUPANCY)\n        diff = abs(n - n_next)\n        accounting_cost += accounting_cost_matrix[n, diff]\n\n    return np.asarray([penalty, accounting_cost, n_low, n_high])\n\n\ndef score(prediction):\n    fc, ac, l, h = cost_function(prediction, family_size, family_cost_matrix, accounting_cost_matrix)\n    return (fc + ac) + (l + h) * 1000000\n\nfam = pd.read_csv(\"\/kaggle\/input\/santa-workshop-tour-2019\/family_data.csv\")\npref = fam.values[:,1:-1]","e6c5e3dc":"pred = pd.read_csv('\/kaggle\/input\/santa-ip\/submission.csv', index_col='family_id').assigned_day.values\ninit_score = score(pred)\n\nprint(init_score)","61a7fa6c":"sub = pd.read_csv('\/kaggle\/input\/santa-ip\/submission.csv')\n\n# !cp \/kaggle\/input\/santa-ip\/submission.csv .\/submission_{best_score}.csv\n!cp \/kaggle\/input\/santa-ip\/submission.csv .\/submission_72398.91780918743.csv","b4df5d2b":"def seed_finding(seed, prediction_input):\n    prediction = prediction_input.copy()\n    np.random.seed(seed)\n    best_score = score(prediction)\n    original_score = best_score\n    print(\"SEED: {}   ORIGINAL SCORE: {}\".format(seed, original_score))\n    for t in range(100):\n        for i in range(5000):\n            for j in range(10):\n                di = prediction[i]\n                prediction[i] = pref[i, j]\n                cur_score = score(prediction)\n\n                KT = 1\n                if t < 5:\n                    KT = 1.5\n                elif t < 10:\n                    KT = 4.5\n                else:\n                    if cur_score > best_score + 100:\n                        KT = 3\n                    elif cur_score > best_score + 50 :\n                        KT = 2.75\n                    elif cur_score > best_score + 20:\n                        KT = 2.5\n                    elif cur_score > best_score + 10:\n                        KT = 2\n                    elif cur_score > best_score:\n                        KT = 1.5\n                    else:\n                        KT = 1\n\n                prob = np.exp(-(cur_score - best_score) \/ KT)\n                if np.random.rand() < prob:\n                    best_score = cur_score\n                else:\n                    prediction[i] = di\n        if best_score < original_score:\n            print(\"NEW BEST SCORE on seed {}: {}\".format(seed, best_score))\n            sub.assigned_day = prediction\n            sub.to_csv(f'submission_{best_score}.csv', index=False)\n            break\n\n    if best_score >= original_score:\n        print(\"UNLUCKY on seed {} for 100 runs, no impovement.\".format(seed))\n\n    return prediction, best_score","31427723":"best_score = init_score\n\nfor seed in range(1201, 1225):\n    pred, best_score = seed_finding(seed, pred)\n    if best_score < init_score:\n        init_score = best_score\n    else:\n        best_score = init_score\n    pred = pd.read_csv(f'submission_{best_score}.csv', index_col='family_id').assigned_day.values","c1ed8a85":"!ls","840e897d":"- Starter submission from https:\/\/www.kaggle.com\/vipito\/santa-ip\n- KT: https:\/\/www.kaggle.com\/c\/santa-workshop-tour-2019\/discussion\/119858\n- Cost function: https:\/\/www.kaggle.com\/nickel\/santa-s-2019-fast-pythonic-cost-23-s"}}