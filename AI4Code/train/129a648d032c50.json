{"cell_type":{"6f2810e2":"code","32df088c":"code","a473a5d1":"code","77aa79ae":"code","ac52d577":"code","e2310394":"code","849b3f5f":"code","35a197e3":"code","086f869a":"code","3d7128c6":"code","fb0acf39":"code","63377c4c":"code","2d18f733":"code","b95d4562":"code","d7173c4c":"code","d05fb228":"code","d1ded8f0":"code","0088ef37":"code","973372a7":"code","22cb5dbc":"code","0be4881f":"code","923c2520":"code","4ba07fc6":"code","a76e42ba":"code","ceb8a816":"code","3abe41e1":"markdown","73a0d9be":"markdown","d76481d2":"markdown","f33f7da5":"markdown","bb653ebb":"markdown","a196871c":"markdown","699b9b6f":"markdown","0d8f61ba":"markdown","89d701e7":"markdown","5e93bfd4":"markdown","e04caef1":"markdown","a535c178":"markdown","c5d33f98":"markdown","a763878d":"markdown","1e616b9f":"markdown","54a40ba5":"markdown"},"source":{"6f2810e2":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom sklearn.preprocessing import StandardScaler, LabelEncoder","32df088c":"house_pred = pd.read_csv('..\/input\/house-prices-advanced-regression-techniques\/train.csv')\nNA_COLS = ['Alley', 'BsmtQual', 'BsmtCond', 'BsmtExposure', 'BsmtFinType1', 'BsmtFinType2',\n           'FireplaceQu', 'GarageType', 'GarageFinish', 'GarageQual', 'GarageCond',\n           'PoolQC', 'Fence', 'MiscFeature']\nhouse_pred[NA_COLS] = house_pred[NA_COLS].fillna('NA')\nprint('shape of data frame', house_pred.shape)\nprint(house_pred.info())\ntarget = 'SalePrice'","a473a5d1":"def cntMissingData(df):\n    total = df.isna().sum().sort_values(ascending=False)\n    percentage = (total \/ df.shape[0]) * 100\n    miss_df = pd.DataFrame({'total':total, 'percentage':percentage})\n    cond = miss_df['total'] > 0\n    print(miss_df.loc[cond])\n    return miss_df.loc[cond].index\n\ncntMissingData(house_pred)","77aa79ae":"numeric_cols = house_pred.select_dtypes(include=['int', 'float']).columns\nprint(numeric_cols.shape)\nnumeric_cols","ac52d577":"house_pred['GarageYrBlt'] = house_pred['YearBuilt']\nhouse_pred['LotFrontage'] = house_pred.groupby('Neighborhood')['LotFrontage'].apply(lambda x: x.fillna(x.mean()))","e2310394":"scaler = StandardScaler().fit_transform(house_pred[[target]])\nscaler = pd.DataFrame(scaler, index=house_pred.index, columns=[target])\nscaler[target] = abs(scaler[target])\n\nsns.displot(scaler[target], kde=True)","849b3f5f":"cond = scaler[target] > 4\nprint(' Sale price >4', house_pred.loc[cond].shape)\nhouse_pred.drop(house_pred.loc[cond, [target]].index, inplace=True)\nprint(house_pred.shape)","35a197e3":"def findHighCorrFeatureWrtTarget(df, target):\n    df[target] = abs(df[target])\n    df.sort_values(by=target, ascending=False, inplace=True)\n    print(df[target])\n    cond = df[target] > 0.5\n    sorted_cols = df.loc[cond].index\n    return sorted_cols\n\nsorted_cols = findHighCorrFeatureWrtTarget(house_pred.corr(), target)\nsorted_cols","086f869a":"sns.set(rc={'figure.figsize':(14,10)})\nsns.heatmap(house_pred[sorted_cols].corr(), annot=True)","3d7128c6":"sorted_cols = ['SalePrice', 'OverallQual', 'GrLivArea', 'GarageCars', 'TotalBsmtSF', 'FullBath', 'YearBuilt', 'YearRemodAdd']","fb0acf39":"sns.pairplot(house_pred[sorted_cols])","63377c4c":"sns.scatterplot(x=house_pred['GrLivArea'], y=house_pred['SalePrice'])","2d18f733":"cond1 = (house_pred[target] < 300000) & (house_pred['GrLivArea'] > 4000)\ndrp_index = house_pred.loc[cond1].index\nhouse_pred.drop(drp_index, inplace=True)\nprint(house_pred.shape)","b95d4562":"sns.scatterplot(x=house_pred['GrLivArea'], y=house_pred['SalePrice'])","d7173c4c":"sns.scatterplot(x=house_pred['TotalBsmtSF'], y=house_pred[target])","d05fb228":"sns.scatterplot(x=house_pred['YearBuilt'], y=house_pred[target])","d1ded8f0":"cond = ((house_pred['YearBuilt'] < 1900) & (house_pred[target] > 200000)) | ((house_pred['YearBuilt'] < 1980) & (house_pred[target] > 300000))\ndrp_index = house_pred.loc[cond].index\nhouse_pred.drop(drp_index, inplace=True)\nprint(house_pred.shape)","0088ef37":"sns.scatterplot(x=house_pred['YearBuilt'], y=house_pred[target])","973372a7":"sns.scatterplot(x=house_pred['YearRemodAdd'], y=house_pred[target])","22cb5dbc":"cat_cols = house_pred.select_dtypes(include='object').columns\nprint(' cat columns are' , cat_cols)\nhouse_pred_cat = pd.DataFrame(house_pred[cat_cols])\nhouse_pred_cat[target] = house_pred[target]\n\n#fetch nominals details from data_description file\nordinals = ['BsmtCond', 'BsmtQual', 'BsmtExposure', 'BsmtFinType1', 'BsmtFinType2', 'FireplaceQu',\n            'GarageFinish', 'GarageQual', 'GarageCond', 'PoolQC', 'LandSlope', 'ExterQual', 'KitchenQual',\n            'ExterCond', 'HeatingQC']\n\n#get nominals = total categorical - nominals\nnominals = np.setdiff1d(house_pred_cat.columns.to_list(), ordinals)\n\ndict_LandSlope = {'Gtl':0,  'Mod': 1, 'Sev': 2}\ndict_qual = {'Po':0,  'Fa': 1, 'TA': 2,'Gd': 3,  'Ex': 4}\ndict_garageFin = {'NA':0,  'Unf': 1, 'RFn': 2,'Fin': 3}\ndict_qualNA = {'NA':0, 'Po':1,  'Fa': 2, 'TA': 3,'Gd': 4,  'Ex': 5}\ndict_bsmtFinTyp = {'NA':0, 'Unf':1,  'LwQ': 2, 'Rec': 3,'BLQ': 4,  'ALQ': 5, 'GLQ': 6}\ndict_BsmtExposure = {'Gd':1, 'Av':2, 'Mn':3, 'No':4, 'NA':5}\n\n#encode ordinals based on respective dict\nhouse_pred_cat['BsmtCond'] = house_pred_cat['BsmtCond'].map(dict_qualNA)\nhouse_pred_cat['BsmtQual'] = (house_pred_cat['BsmtQual']).map(dict_qualNA)\nhouse_pred_cat['BsmtExposure'] = (house_pred_cat['BsmtExposure']).map(dict_BsmtExposure)\nhouse_pred_cat['BsmtFinType1'] = (house_pred_cat['BsmtFinType1']).map(dict_bsmtFinTyp)\nhouse_pred_cat['BsmtFinType2'] = (house_pred_cat['BsmtFinType2']).map(dict_bsmtFinTyp)\nhouse_pred_cat['FireplaceQu'] = (house_pred_cat['FireplaceQu']).map(dict_qualNA)\nhouse_pred_cat['GarageFinish'] = (house_pred_cat['GarageFinish']).map(dict_garageFin)\nhouse_pred_cat['GarageQual'] = (house_pred_cat['GarageQual']).map(dict_qualNA)\nhouse_pred_cat['GarageCond'] = (house_pred_cat['GarageCond']).map(dict_qualNA)\nhouse_pred_cat['PoolQC'] = (house_pred_cat['PoolQC']).map(dict_qualNA)\nhouse_pred_cat['LandSlope'] = house_pred_cat['LandSlope'].map(dict_LandSlope)\nhouse_pred_cat['ExterQual'] = (house_pred_cat['ExterQual']).map(dict_qual)\nhouse_pred_cat['KitchenQual'] = (house_pred_cat['KitchenQual']).map(dict_qual)\nhouse_pred_cat['ExterCond'] = (house_pred_cat['ExterCond']).map(dict_qual)\nhouse_pred_cat['HeatingQC'] = (house_pred_cat['HeatingQC']).map(dict_qual)\n\n# encode all nominals at once\nle = LabelEncoder()\nhouse_pred_cat[nominals] = house_pred_cat[nominals].apply(le.fit_transform)\nhouse_pred_cat[target] = house_pred[target]\nprint(house_pred_cat.head())\nprint(house_pred_cat.shape)","0be4881f":"def findHighCorrFeatureWrtTarget(df, target):\n    df[target] = abs(df[target])\n    df.sort_values(by=target, ascending=False, inplace=True)\n    print(df[target])\n    cond = df[target] > 0.5\n    sorted_cols = df.loc[cond].index\n    return sorted_cols\n\nsorted_cols_cat = findHighCorrFeatureWrtTarget(house_pred_cat.corr(), target)\nprint(sorted_cols_cat)","923c2520":"sns.heatmap(house_pred_cat[sorted_cols_cat].corr(), annot=True)","4ba07fc6":"house_pred[sorted_cols_cat] = house_pred_cat[sorted_cols_cat]","a76e42ba":"fin_cols = ['SalePrice', 'OverallQual', 'GrLivArea', 'GarageCars', 'TotalBsmtSF', 'FullBath', 'YearBuilt', 'YearRemodAdd', 'ExterQual', 'KitchenQual', 'BsmtQual', 'GarageFinish','FireplaceQu']","ceb8a816":"sns.heatmap(house_pred[fin_cols].corr(), annot=True)","3abe41e1":"Remove two outlier on the right side","73a0d9be":"Lets start with target and look displot of target after normalization on it. Z-score in range -3 to +3 for good for data.","d76481d2":"Just after we can count how many missing values are present in our data. Keep in mind we will fill missing data as per the analysis found in later sections.","f33f7da5":"Remove the value having z-socre > 4","bb653ebb":"Clean some visible data","a196871c":"Lets dig further into categorical features and try to find out whcih columns has high correlation with target. For simplicity  I copied findHighCorrFeatureWrtTarget function again. And we found that ExterQual, KitchenQual, BsmtQual, GarageFinish are in good relation with Mr target. So lets focus on these.\n","699b9b6f":"Data Imputation for numeric type\n1. It may consider GarageYrBlt can be same as YearBuilt.\n2. LotFrontage can be estimated from mean of neighbour LotFrontage ","0d8f61ba":"1. Some house has no basement thats the reason their x value is zero.\n2. present point of view: relation looks good","89d701e7":"1. OverallQual, GarageCars and fullbath looks good in relation with target\n2. GrLivArea have some outlier with saleprice plot","5e93bfd4":"Chacke again YearBuilt","e04caef1":"Some close look on other attributes","a535c178":"Selected columns are filtered and put in final list","c5d33f98":"First thing first to do get familiar with your data and EDA. In desription file certain values are defined as NA for some categorical attributes. For visibility purpose those column names are listed in NA_COLS. When we read csv file, pandas read_csv function treat them as NAN value. So we restored them as 'NA' so that we can map to some numbers as some of categorical variables are ordinal in nature. \n1. remember the shape\n2. Datatype: here we have 3 different data types int, float and object. Int and Float are numeric type\n    and object is categorical.\n    ","a763878d":"Now heapmap will help us to catch multicollinearity between independent variables as-\n1. GarageCars and GarageArea\n2. TotalBsmtSF and 1stFlrSF\n3. GrLivArea and TotRmsAbvGrd \n4. YearBuilt and GarageYrBlt\n\nWe keep GarageCars as it has high corr value than GarageArea and similar way to others.\nand make new sorted columns again.","1e616b9f":"Let's dive first to Numeric columns and extracts selected columns with some analysis.\nCorrelation matrix only works in numeric values not no need to seperate out\nnumeric columns seperately as we will do for categorical columns later in this notebook.\n\n**findHighCorrFeatureWrtTarget** function will give you the details of high correlated predictors with repect to target-\n1. the df passed is a corr dataframe (N * N) \n2. correlation is good either positive or negative, that's reason we took abs in first line\n3. we just done sorting for reading and collect the columns those have higher corr value than 0.5\n\n\n","54a40ba5":"1. Filter the object type columns from dataframe\n2. create seperate dataframe for categorical features as house_pred_cat\n3. create ordinal and nominal list columns\n\nCoversion from cat to numeric is to be taken care , for example default LabelEncoder will encode ordinal columns such as quality columns as {'Po':3,  'Fa': 1, 'TA': 4,'Gd': 2,  'Ex': 0} alphabetically but the correct order is {'Po':0,  'Fa': 1, 'TA': 2,'Gd': 3,  'Ex': 4}. So seperate out nominal attributes from ordinal attributes. Nominal are stored in **non_ordinal**. \n\nEncode all of them\n"}}