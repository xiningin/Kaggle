{"cell_type":{"3d7d3de8":"code","6227f225":"code","e6b75084":"code","7c565da2":"code","a3f1770d":"code","ab65f80e":"code","581a2967":"code","65272b53":"code","5be28815":"code","16ae5358":"code","14d1aeb6":"code","5377bb4d":"code","0e785109":"code","6c59ae01":"code","e13facb2":"code","05caed50":"code","4d237847":"code","a8e345c6":"code","8895707a":"markdown","407e0808":"markdown","a64a4066":"markdown","e5f4ed00":"markdown","e1617983":"markdown","1fc7e6db":"markdown","0a22c243":"markdown","f9f5b805":"markdown"},"source":{"3d7d3de8":"import numpy as np\nimport pandas as pd\n\nfrom xgboost import XGBRegressor\n\nfrom sklearn.impute import SimpleImputer\nfrom sklearn.decomposition import PCA\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.model_selection import train_test_split, cross_val_score\n\nfrom pandas.api.types import is_string_dtype\n\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nsns.set()\n\nimport warnings\nwarnings.filterwarnings('ignore')\n\n%config InlineBackend.figure_format = 'svg'","6227f225":"#Import data into a data frame\ndata = pd.read_csv('..\/input\/Melbourne_housing_FULL.csv') #Imports data in a data frame\n\n#Select columns for X\ncols = data.columns\ncols = cols.drop('Price')\n\ndata.info()","e6b75084":"#Drop down data instances whose Sale Price is not defined\ndata = data[data.Price.notnull()]\n\n#Display 1st five instances of data\ndata.head()","7c565da2":"#Seperate categorical from numerical data\ncategorical = data.select_dtypes(exclude = [np.number])\nnumerical = data.select_dtypes(include = [np.number])","a3f1770d":"%config InlineBackend.figure_format = 'png'\n#Plot numerical data against Sale Price\nfig, axes = plt.subplots(4, 3, figsize=(12, 12))\n\nfor idx, feat in enumerate(numerical.columns.difference(['Price'])):\n    ax = axes[int(idx \/ 3), idx%3]\n    sns.scatterplot(x=feat, y='Price', data=numerical, ax=ax);\n    ax.set_xlabel(feat)\n    ax.set_ylabel('Price')\n    \nfig.tight_layout();","ab65f80e":"#Describe Sale Price's characteristics\ndata['Price'].describe()","581a2967":"%config InlineBackend.figure_format = 'svg'\n#Plot the SalePrice of each instance\nsns.distplot(data['Price'])","65272b53":"#skewness and kurtosis\nprint(\"Skewness: %f\" % data['Price'].skew())\nprint(\"Kurtosis: %f\" % data['Price'].kurt())","5be28815":"#Tranform categorical data into numerical data for training purpose\nfor col, col_data in data.items():\n    if is_string_dtype(col_data):\n        data[col] = data[col].astype('category').cat.as_ordered().cat.codes","16ae5358":"# SalePrice correlation matrix\ncorrmat = data.corr()\nf, ax = plt.subplots(figsize=(8, 6))\nsns.set(font_scale=0.5)\nsns.heatmap(corrmat,annot=True, square=True, fmt='.2f', vmax=.8);","14d1aeb6":"crcols = ['Price', 'Rooms', 'Type', 'Distance', 'Bedroom2', 'Bathroom', 'Car', 'YearBuilt']\ncorrmat = data[crcols].corr()\nf, ax = plt.subplots(figsize=(8, 6))\nsns.set(font_scale=0.75)\nsns.heatmap(corrmat,annot=True, square=True, fmt='.2f', vmax=.8);","5377bb4d":"#Feature Selection\ncrcols.remove('Bedroom2')\ncols = crcols\ndata = data[cols]\ndata.head()","0e785109":"#Fill in null data cells using Simple Imputer\ny = data.Price\nX = SimpleImputer().fit_transform(data[cols])","6c59ae01":"#Split the data into training and validation data sets\ntrain_X, val_X, train_y, val_y = train_test_split(X, y, test_size=0.3)\n\n#Standardize the data before feeding it to PCA algorithm\nscaler = StandardScaler()\nscaler.fit(train_X)\n\ntrain_X = scaler.transform(train_X)\nval_X = scaler.transform(val_X)\n\n#Use PCA algorithm to reduce the number of features to speed up training \npca = PCA(.95)\npca.fit(train_X)\n\ntrain_X = pca.transform(train_X)\nval_X = pca.transform(val_X)","e13facb2":"#Train a model using XGBRegressor\nmodel = XGBRegressor(n_estimators=1000, learning_rate=0.05, nthread=10)\nmodel.fit(train_X, train_y, early_stopping_rounds=5, eval_set=[(val_X, val_y)], verbose=False)","05caed50":"#Validate the trained model using validation data-set\ncvt = cross_val_score(model, X, y)\n\nmae = cross_val_score(model, X, y, scoring = 'neg_mean_absolute_error')\n\nprint(\"Model Accuracy:\\t\",cvt.mean())\nprint(\"\\nMean Absolute Error:\\t\",(-1 * mae.mean()))","4d237847":"#Predict Sale Price for houses in cross validation set\npredict_y = model.predict(val_X)","a8e345c6":"#Plot the actual Price value against predicted Sale Price \ng = sns.jointplot(x= val_y, y= predict_y, kind='reg', xlim=(0,8500000), ylim=(0,8500000),\n                  joint_kws={'line_kws':{'color':'darkorange'}})\ng.set_axis_labels(xlabel='Actual Price', ylabel='Predicted Price')","8895707a":"<h2>Train Model:<\/h2>","407e0808":"<h2>Data Exploration, Cleaning and Transformation:<\/h2>","a64a4066":"<h2>Import Libraries:<\/h2>","e5f4ed00":"<h2>Extract Data:<\/h2>","e1617983":"<h2>Cross Validate: <\/h2>","1fc7e6db":"<ul>\n    <li><b>{ ' Rooms ', ' Bedroom2 ', ' Bathroom ', ' Car ' }<\/b> are <b>positively correlated<\/b> to Price attribute.\n    <li><b>{ ' Type ', ' Distance ', ' YearBuilt ' }<\/b> are <b>negetively correlated<\/b> to Price attribute.\n<\/ul>","0a22c243":"<h1>HOUSE PRICE PREDICTION<\/h1>","f9f5b805":"<ul>\n    <li><b>Bedroom2<\/b> and <b>Room<\/b> are strongly correlated to each other. Hence, a wise choice will be to remove Bedroom2 from analysis.\n<\/ul>"}}