{"cell_type":{"bc57b84d":"code","77e3184f":"code","15a17ee8":"code","f54c9e6c":"code","160e2bb2":"code","73f0fdba":"code","e8295068":"code","6bac873c":"code","f0b7dba9":"code","7294ea7d":"code","b86206b3":"markdown","141d694b":"markdown","0a7bf12b":"markdown","a2849994":"markdown","18b836cb":"markdown","1485c69b":"markdown","8f4b3402":"markdown"},"source":{"bc57b84d":"import numpy as np\nimport pandas as pd \n\ndf = pd.read_csv(\"..\/input\/spam-text-message-classification\/SPAM text message 20170820 - Data.csv\")\ndf.head(5)","77e3184f":"from sklearn.feature_extraction.text import CountVectorizer\n\ncv = CountVectorizer()\nX = cv.fit_transform(df.Message)","15a17ee8":"# Display one vector constructed with a message\nX.toarray()[0]","f54c9e6c":"# Get the categories\ny = df.Category\ny[:5]","160e2bb2":"# Split arrays or matrices into random train and test subsets\nfrom sklearn.model_selection import train_test_split\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=0)","73f0fdba":"# Find the best hyperparameter with GridSearchCV\nfrom sklearn.naive_bayes import MultinomialNB\nfrom sklearn.model_selection import GridSearchCV\nparameters = {\"alpha\": [0.2,1,2,5,10], \"fit_prior\": [True, False]}\n\ngrid = GridSearchCV(MultinomialNB(), param_grid=parameters)\ngrid.fit(X_train,y_train)\n\n# Create a DataFrame with the best Hyperparameters\npd.DataFrame(grid.cv_results_)[['params','mean_test_score']]\\\n                               .sort_values(by=\"mean_test_score\", ascending=False)","e8295068":"# Display the best hyperparameters\ngrid.best_params_","6bac873c":"# Create the model with the best hyperparameters\nfrom sklearn.naive_bayes import MultinomialNB\nalpha, fit_prior = grid.best_params_['alpha'], grid.best_params_['fit_prior']\nmodel = MultinomialNB(alpha = alpha)\n\nmodel.fit(X_train,y_train)\ny_pred = model.predict(X_test)\n\nfrom sklearn.metrics import classification_report, accuracy_score\nprint(f'Accuracy: {round(accuracy_score(y_test,y_pred),3)}\\n')\nprint(classification_report(y_test,y_pred))","f0b7dba9":"df_spam = df[df['Category'] == 'spam']\ndf_ham = df[df['Category'] == 'ham']","7294ea7d":"def display_result(df, number=1):\n    for i in range(number):\n        msg = df['Message'].iloc[i]\n        label = df[\"Category\"].iloc[i]\n        msg_vec = cv.transform([msg])\n        pred_label = model.predict(msg_vec)\n        print(f\"E-Mail: {msg}\\nReal category: {label}\\nPredicted category:{pred_label[0]}\")\n        print(\"\\n\")\n    \ndf_spam = df[df['Category'] == 'spam']\ndisplay_result(df_spam)\ndisplay_result(df_ham)","b86206b3":"### Convert the messages into a matrix of token counts with CountVectorizer\nMore information about [CountVectorizer](https:\/\/scikit-learn.org\/stable\/modules\/generated\/sklearn.feature_extraction.text.CountVectorizer.html)","141d694b":"# 2. Hyperparameter selection","0a7bf12b":"# 4. Examples","a2849994":"# 3. The MultinomialNB Model","18b836cb":"# Simple Spam-Filter with MultinomialDB (>98% acc.)","1485c69b":"![Spam](https:\/\/i.imgur.com\/TCU4qIa.png)\n\n","8f4b3402":"# 1. Load the Dataset & Preprocessing"}}