{"cell_type":{"9d9afb05":"code","11c0e832":"code","830588df":"code","35f29952":"code","7e7bbad0":"code","33b29fa8":"code","3c2b4716":"code","7fa8f04f":"code","1b3013dc":"code","c655393a":"code","821b9117":"code","58dfa1c0":"code","ee4efe58":"code","0d3b61da":"code","181b20bc":"code","831f386f":"code","6b70aef5":"code","b1e7d058":"code","a17b5a4c":"code","10f8a2d2":"code","9f0df17e":"markdown","57c8d272":"markdown","8912b5d8":"markdown","20ae1e1f":"markdown","e3fc5f51":"markdown"},"source":{"9d9afb05":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n        \nimport seaborn as sns\n\n\nimport matplotlib.pyplot as plt\nfrom pandas.plotting import parallel_coordinates\n\nfrom plotly.subplots import make_subplots\nimport plotly.express as px\nimport plotly.graph_objects as go\nimport plotly.express as px\n\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.naive_bayes import GaussianNB\nfrom sklearn.metrics import confusion_matrix\nfrom sklearn.discriminant_analysis import LinearDiscriminantAnalysis\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","11c0e832":"airline = pd.read_csv(\"\/kaggle\/input\/airline-passenger-satisfaction\/train.csv\")\nairline","830588df":"print(airline.isnull().sum())","35f29952":"airline = airline.dropna()\nsns.heatmap(airline.isnull(), cbar=False);","7e7bbad0":"fig = px.scatter(\n    x=airline[\"Customer Type\"], \n    y=airline[\"Flight Distance\"], \n    color=airline[\"satisfaction\"],\n)\nfig.show()","33b29fa8":"fig = px.scatter(\n    x=airline[\"Age\"], \n    y=airline[\"Flight Distance\"], \n    color=airline[\"satisfaction\"],\n)\nfig.show()","3c2b4716":"airline.info()","7fa8f04f":"airline[\"satisfaction\"].unique()","1b3013dc":"airline[\"Gender\"] = (airline[\"Gender\"].astype('category')).cat.codes # 1 Male \/ 0 Female \nairline[\"Customer Type\"] = (airline[\"Customer Type\"].astype('category')).cat.codes #0 Loyal \/ 1 Disloyal\nairline[\"Type of Travel\"] = (airline[\"Type of Travel\"].astype('category')).cat.codes # 1 Personal \/ 0 Business\nairline[\"Class\"] = (airline[\"Class\"].astype('category')).cat.codes # 2 Eco Plus \/ 0 Business \/ 1 Eco\nairline[\"satisfaction\"] = (airline[\"satisfaction\"].astype('category')).cat.codes #0 neutral or dissatisfied \/ 1 satisfied\nairline","c655393a":"#parallel_coordinates(airline,'satisfaction', color=('#556270', '#4ECDC4', '#C7F464', '#e69509','#f72f8c','#d681f7'))\n#plt.show()","821b9117":"corr = airline.corr()\ncorr.style.background_gradient(cmap='plasma').set_precision(2)","58dfa1c0":"y = airline['satisfaction']\nairline = airline.drop(['satisfaction', 'Unnamed: 0', 'id'], axis=1)\nX_train, X_test, Y_train, Y_test= train_test_split(airline, y, test_size=0.2, random_state=24)","ee4efe58":"model = GaussianNB()\nmodel.fit(X_train, Y_train)","0d3b61da":"accuracy = model.score(X_train, Y_train)\ntest_accuracy = model.score(X_test, Y_test)\nprint(f\"accuracy: {accuracy}, test_accuracy: {test_accuracy}\")","181b20bc":"predictions = model.predict(X_train)\ncm = confusion_matrix(Y_train, predictions)\nfig = px.imshow(cm, x=['neutral or dissatisfied', 'satisfied'], y=['neutral or dissatisfied', 'satisfied'])\nfig.show()","831f386f":"predictions = model.predict(X_test)\ncm = confusion_matrix(Y_test, predictions)\nfig = px.imshow(cm, x=['neutral or dissatisfied', 'satisfied'], y=['neutral or dissatisfied', 'satisfied'])\nfig.show()","6b70aef5":"fig = make_subplots(rows=1, cols=1)\n\nfig.add_trace(go.Contour(\n    x=airline['Flight Distance'],\n    y=airline['Age'],\n    z=model.predict(X_test),\n    showscale=False,\n    opacity=0.40,\n    colorscale='sunset'\n), row=1, col=1)\n\nfig.add_trace(go.Scatter(\n     x=airline['Flight Distance'],\n    y=airline['Age'],\n    text=Y_test,\n    mode='markers',\n    marker_symbol=Y_test,\n    marker=dict(color=y, colorscale='sunset')\n), row=1, col=1)\n\nfig.update_layout(showlegend=False)\n\nfig.show()","b1e7d058":"airline","a17b5a4c":"lda_model = LinearDiscriminantAnalysis(n_components=1).fit(airline, y)\n\nreduced_X = lda_model.transform(airline).reshape(-1, 1)\n\nreduced_X ","10f8a2d2":"fig = make_subplots(rows=1, cols=1)\n\nfig.add_trace(go.Contour(\n    x=reduced_X.ravel(), \n    y=np.linspace(-10, 10, 150),\n    z=model.predict(reduced_X),\n    showscale=False,\n    opacity=0.40,\n    colorscale='portland'\n), row=1, col=1)\n\nfig.add_trace(go.Scatter(\n    x=reduced_X.ravel(), \n    y=[0 for x in range(len(reduced_X))],\n    text=y,\n    mode='markers',\n    marker_symbol=y,\n    marker=dict(color=y, colorscale='portland')\n), row=1, col=1)\n\nfig.update_layout(yaxis_range=[-0.01,0.01])\n\nfig.show()","9f0df17e":"# Split Data","57c8d272":"# Ajuste de Modelo\n","8912b5d8":"# Analisis de Data","20ae1e1f":"# Matriz de confusion ","e3fc5f51":"# Contornos y LDA"}}