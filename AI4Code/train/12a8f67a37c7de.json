{"cell_type":{"a3b99853":"code","bbcb48c6":"code","f7b13934":"code","588943fb":"code","0d2ff4b7":"code","163dee28":"code","32d40e32":"code","3e46d7cf":"markdown","e7aff983":"markdown","558ec748":"markdown"},"source":{"a3b99853":"!pip install kaggle","bbcb48c6":"import re\nimport json\nimport os\n\nimport six","f7b13934":"# Un-comment if you want to read the credentials from a file\n# with open(os.path.expanduser(\"~\/.kaggle\/kaggle.json\"), \"rb\") as f:\n#     creds = json.load(f)\n# os.environ[\"KAGGLE_USERNAME\"] = creds[\"username\"]\n# os.environ[\"KAGGLE_KEY\"] = creds[\"key\"]\n\n# For this notebook I will use fake values\nos.environ[\"KAGGLE_USERNAME\"] = \"username\"\nos.environ[\"KAGGLE_KEY\"] = \"key\"","588943fb":"from kaggle.api.kaggle_api_extended import KaggleApi","0d2ff4b7":"class CustomApiClient(KaggleApi):\n    def competitions_data_download_file_with_http_info(self, id, file_name, **kwargs):  # noqa: E501\n        \"\"\"Download competition data file  # noqa: E501\n        This method makes a synchronous HTTP request by default. To make an\n        asynchronous HTTP request, please pass async_req=True\n        >>> thread = api.competitions_data_download_file_with_http_info(id, file_name, async_req=True)\n        >>> result = thread.get()\n        :param async_req bool\n        :param str id: Competition name (required)\n        :param str file_name: Competition name (required)\n        :return: Result\n                 If the method is called asynchronously,\n                 returns the request thread.\n        \"\"\"\n\n        all_params = ['id', 'file_name']  # noqa: E501\n        all_params.append('async_req')\n        all_params.append('_return_http_data_only')\n        all_params.append('_preload_content')\n        all_params.append('_request_timeout')\n\n        params = locals()\n        for key, val in six.iteritems(params['kwargs']):\n            if key not in all_params:\n                raise TypeError(\n                    \"Got an unexpected keyword argument '%s'\"\n                    \" to method competitions_data_download_file\" % key\n                )\n            params[key] = val\n        del params['kwargs']\n        # verify the required parameter 'id' is set\n        if ('id' not in params or\n                params['id'] is None):\n            raise ValueError(\"Missing the required parameter `id` when calling `competitions_data_download_file`\")  # noqa: E501\n        # verify the required parameter 'file_name' is set\n        if ('file_name' not in params or\n                params['file_name'] is None):\n            raise ValueError(\"Missing the required parameter `file_name` when calling `competitions_data_download_file`\")  # noqa: E501\n\n        collection_formats = {}\n\n        path_params = {}\n        if 'id' in params:\n            path_params['id'] = params['id']  # noqa: E501\n        if 'file_name' in params:\n            path_params['fileName'] = params['file_name']  # noqa: E501\n\n        query_params = []\n\n        header_params = {}\n\n        form_params = []\n        local_var_files = {}\n\n        body_params = None\n        # Authentication setting\n        auth_settings = ['basicAuth']  # noqa: E501\n        \n        return self.api_client.call_api(\n        '\/c\/{id}\/datadownload\/{fileName}', 'GET',\n        path_params,\n        query_params,\n        header_params,\n        body=body_params,\n        post_params=form_params,\n        files=local_var_files,\n        response_type='Result',  # noqa: E501\n        auth_settings=auth_settings,\n        async_req=params.get('async_req'),\n        _return_http_data_only=params.get('_return_http_data_only'),\n        _preload_content=params.get('_preload_content', True),\n        _request_timeout=params.get('_request_timeout'),\n        collection_formats=collection_formats)","163dee28":"api = CustomApiClient()\napi.authenticate()","32d40e32":"filenames = [f\"dfdc_train_part_{i:02}.zip\" for i in range(50)]\n# api.competition_download_file(competition=\"deepfake-detection-challenge\", file_name=\"dfdc_train_part_00.zip\")\n# api.competition_download_file(competition=\"deepfake-detection-challenge\", file_name=filenames[0])","3e46d7cf":"Un-comment any of the lines below to download the required, the filenames list contains all the available filenames.","e7aff983":"# Download DFDC files from notebook (kernel, Colab, Jupyter...)\n\nThis kernels shows how you can download the multiple files of the dataset of this competition from any notebook.\n\nKudos for [lytic](https:\/\/www.kaggle.com\/sorokin) for the idea of patching the kaggle client: [wget train files](https:\/\/www.kaggle.com\/c\/deepfake-detection-challenge\/discussion\/121194#695299)","558ec748":"## Credentials\nTo get the Kaggle API credentials, go to the 'Account' tab of your user profile (`https:\/\/www.kaggle.com\/<username>\/account`) and select 'Create API Token'. This will trigger the download of `kaggle.json`, a file containing your API credentials. Once you have these, you need to set them as environment variables, the easiest way is to directly read this file but you can also hardcode the credentials in the notebook (not very secure). If you want to use it in Colab for example, you can upload the file to your Goggle Drive and then mount and read it."}}