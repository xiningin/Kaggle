{"cell_type":{"cd578700":"code","19ceb557":"code","9cc7c7af":"code","1c2d5d6f":"code","f58bbc45":"code","ab4aa02d":"code","ae20da2a":"code","724a3c08":"code","56f8e684":"code","ee11e88c":"code","be2894af":"code","0f78943d":"code","39e40d44":"code","75667841":"code","77a8cfcf":"markdown","f5817a11":"markdown","e518378f":"markdown","0ac06f0a":"markdown","f558ac27":"markdown","de7328fa":"markdown","2cc25379":"markdown","8c6dccc7":"markdown","2e10fbb0":"markdown","b628ae61":"markdown","fa0b8852":"markdown","a40cf04f":"markdown","da0a5299":"markdown"},"source":{"cd578700":"from tensorflow.keras import datasets # boston_housing, cifar10, cifar100, fashion_mnist, imdb, mnist, reuters\n(x_train, y_train), (x_test, y_test) = datasets.mnist.load_data()","19ceb557":"# show image of training data\nimport numpy as np\nimport matplotlib.pyplot as plt\n\nplt.figure(figsize = (10, 10)) # set size of figure 10x10\nrand_indexes = np.random.randint(0, x_train.shape[0], 8) # select 8 digits(0~9) randomly \nprint(rand_indexes)\n\nfor index,im_index in enumerate(rand_indexes):\n    plt.subplot(4, 4, index+1)\n    plt.imshow(x_train[im_index], cmap = 'gray', interpolation = 'none')\n    plt.title('Class %d' % y_train[im_index])\nplt.tight_layout()","9cc7c7af":"# data converted from integer to float\nx_train = x_train \/ 255.0\nx_test = x_test \/ 255.0\n\nprint(x_train.shape)\nprint(x_test.shape)","1c2d5d6f":"# reshape to add color channel into data\nx_train = x_train.reshape(-1,28,28,1)\nx_test = x_test.reshape(-1,28,28,1)\n\nprint(x_train.shape)\nprint(x_test.shape)","f58bbc45":"from tensorflow.keras import utils\ny_train = utils.to_categorical(y_train)\ny_test = utils.to_categorical(y_test)\n\nprint(y_train.shape)\nprint(y_test.shape)","ab4aa02d":"input_shape = (28,28,1) # img_rows, img_colums, color_channels\nnum_classes = y_train.shape[1] # digit = 0~9 ","ae20da2a":"# Build Model\nfrom tensorflow.keras import models, layers\n\ninputs = layers.Input(shape=input_shape)\nx = layers.Conv2D(64, kernel_size = (3, 3), activation = 'relu', padding = 'same')(inputs)\nx = layers.MaxPool2D(pool_size = (2, 2))(x)\n# 2nd Conv layer        \nx = layers.Conv2D(64, kernel_size = (3, 3), activation = 'relu', padding = 'same')(x)\nx = layers.MaxPool2D(pool_size = (2, 2))(x)\n# Fully Connected layer        \nx = layers.Flatten()(x)\nx = layers.Dense(128)(x)\noutputs = layers.Dense(num_classes, activation=\"softmax\")(x)\n\nmodel = models.Model(inputs=inputs, outputs=outputs)\n\nmodel.summary()","724a3c08":"# Compile Model\nmodel.compile(loss = 'categorical_crossentropy', optimizer = 'adam' , metrics = ['accuracy'])","56f8e684":"# Train Model\nhistory = model.fit(x_train, y_train, batch_size=128, epochs=20, validation_data=(x_test, y_test))","ee11e88c":"models.save_model(model, 'mnist_cnn.hdf5')\n# You can download this file to PC","be2894af":"# If you are loading this file on PC, then be sure it is the same version of Tensrflow use on Kaggle.\nmodel = models.load_model('mnist_cnn.hdf5')","0f78943d":"preds = model.predict(x_test[0].reshape(-1,28,28,1))\nprint(int(np.argmax(preds)))","39e40d44":"# Evaluate Model\nscore = model.evaluate(x_test, y_test)\nprint('Test loss: ', score[0])\nprint('Test accuracy: ', score[1])","75667841":"# Show Train History\nkeys=history.history.keys()\nprint(keys)\n\ndef show_train_history(hisData,train,test): \n    plt.plot(hisData.history[train])\n    plt.plot(hisData.history[test])\n    plt.title('Training History')\n    plt.ylabel(train)\n    plt.xlabel('Epoch')\n    plt.legend(['train', 'test'], loc='upper left')\n    plt.show()\n\nshow_train_history(history, 'loss', 'val_loss')\nshow_train_history(history, 'accuracy', 'val_accuracy')","77a8cfcf":"## Save Model","f5817a11":"# Handwritten Digit Recognizer\n\n##  Dataset: MNIST (handwritten single digit 28x28)","e518378f":"### show image of training data","0ac06f0a":"## Architecture\n![image.png](attachment:image.png)","f558ac27":"## Evaluate Model","de7328fa":"### normalized image data","2cc25379":"## Load Model ","8c6dccc7":"## Train Model","2e10fbb0":"### show training history","b628ae61":"### encoding label data","fa0b8852":"## Build Model","a40cf04f":"## Load Dataset","da0a5299":"## Test Model"}}