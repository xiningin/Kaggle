{"cell_type":{"44048580":"code","8bdcfe8b":"code","109b22e5":"code","fb5f8675":"code","7c844912":"code","c8f5421e":"code","ef69e5c8":"code","b73ac851":"code","aae8b54f":"code","e5e72814":"code","1abdc67a":"code","cc5727c1":"code","e22faa77":"code","5f52e28d":"code","264ecdf7":"code","59b497d3":"code","3bb2f550":"code","7ce21cc2":"code","4eae8c82":"code","ce9274a4":"code","44bccc29":"code","710eae0e":"code","1b4e9100":"code","dd749d0e":"code","0821eabb":"code","fe36a635":"code","3eaab277":"code","3628661b":"code","7d36229d":"code","e14fe1fd":"code","77b3690e":"code","e75ecb5b":"code","24ca5127":"code","0873bb45":"code","9106ec14":"code","6b14f234":"code","5fbcf5a8":"code","66f9fb0b":"code","b6d0ccda":"code","0438090e":"code","907112c2":"code","27e903ac":"code","e0092fe0":"code","a4386290":"code","7e18cc09":"code","b7864143":"code","3a660bda":"code","f07085b2":"code","63a6b7ff":"code","82cd6f46":"code","4f0c67ed":"code","e002e2db":"code","38c97f35":"code","9a5794ba":"code","bcd94e8c":"code","176799e6":"code","22f7de33":"code","cbb6fdde":"code","66fdebe5":"code","0ec02742":"markdown","93902ce5":"markdown"},"source":{"44048580":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","8bdcfe8b":"df = pd.read_csv('..\/input\/melbourne-housing-snapshot\/melb_data.csv')\ndf","109b22e5":"df.columns","fb5f8675":"df.isnull()","7c844912":"# search about Missing Values In All Columns For This Data \"df\"\n# Search In All Values In Column\n# If Exist One Missing Value At Least In This Column ,, Will Return True becide name of Column   \ndf.isnull().any()","c8f5421e":"# If all values In This Column Is Mising Value \"NaN\" ,, Will Return True becide name of Column \ndf.isnull().all()","ef69e5c8":"df.YearBuilt\n# Here Will Notice : Exist Missing Value \"NaN\" In This Column ","b73ac851":"# Decide In Every Value In Column If It Missing Value or Not\n# Here It Search About Missing Value In Specific Column \"One Ccolumn\" \"\"YearBuilt\"\"\ndf.YearBuilt.isnull()","aae8b54f":"# Here Sreach In All Values In Column ,,, If Exist At Least One Mmissing Value ,, Will Return True\ndf.YearBuilt.isnull().any()","e5e72814":"# I Can Use \"0 , 1\" Instead \"True, False\" ,,,, Will return The Ooutput as Tuple\nany([True ,True, True]) , any([True ,False, True]) , any([False ,False ,False])","1abdc67a":"all([True ,True, True]) , all([True ,False, True]) , all([False ,False ,False])","cc5727c1":"# Here Search In All Ccolumns In Data Then Find Sum \ndf.isnull().any().sum()\n# The Output Mean : There 4 Columns In This Data Contain Missing Value","e22faa77":" df.YearBuilt.isnull().any().sum()","5f52e28d":"df.YearBuilt.isnull().sum()","264ecdf7":"# Will Return Sum Of Missing Value In Every Column In Data Set\ndf.isnull().sum()","59b497d3":"# To Know How Many Columns and Rows In Data :-\n# \"The_Name_of_Data.shape()\"\ndf.shape","3bb2f550":"for col in df.columns :\n    if df[col].isnull().any() :\n        print(col ,df[col].isnull().sum())","7ce21cc2":"for col in df.columns :\n    if df[col].dtypes == 'object':\n        print(col)","4eae8c82":"for col in df.columns :\n    if df[col].dtypes == 'int64':\n        print(col)","ce9274a4":"for col in df.columns :\n    if df[col].dtypes == 'int64' or df[col].dtypes == 'float':\n        print(col , '=' , df[col].dtypes )","44bccc29":"s = (df.dtypes == 'object')\nobject_cols = list(s[s].index) # s[s].index => That Means :I Want The Part From The Element \"s[s]\" Which Contain \"The Name Of Column (index)\"\nprint(\"Categorical variables:\")\nprint(object_cols)","710eae0e":"# If  I Want Data Which Contain Only Categorical Variables :-\nCategori_columns = s[s].index\ndf_Cat = df[Categori_columns]\ndf_Cat","1b4e9100":"# Another Way :-\n# That Mean: Make New  Data Contain All dtypes expect\"\u0628\u0627\u0633\u062a\u062b\u0646\u0627\u0621\" dtypes = int64 , dtypes = float \ndf_object = df.select_dtypes(exclude=['int64', 'float64'])\ndf_object","dd749d0e":"df_object","0821eabb":"df_object.columns","fe36a635":"df_object = df.select_dtypes(exclude=['int64', 'float64'] )# and 'float')\nfor col in df_object.columns :\n    print(col , \"=\" , df_object[col].dtypes)","3eaab277":"df_object = df.select_dtypes(exclude='object')\nfor col in df_object.columns :\n    print(col , \"=\" , df_object[col].dtypes)","3628661b":"df.columns\nfor col in df.columns :\n    print(col , \"=\" , df[col].dtypes)","7d36229d":"df.columns","e14fe1fd":"X = df.drop(columns = 'Price', axis= 1 , inplace=False)\ny = df.Price","77b3690e":"from sklearn.model_selection  import train_test_split\nX_test , X_train , y_test , y_train = train_test_split(X ,y ,random_state= 1 ,shuffle=False)","e75ecb5b":"cpied_X_train  = X_train.copy()\ncpied_y_train  = y_train.copy()","24ca5127":"for col in X_train.columns :\n    print(col, \"=\" , X_train[col].index)\n\n","0873bb45":"X_test.columns ","9106ec14":"df_num_dtypes = pd.DataFrame(data={})\ndf_cat_dtypes = pd.DataFrame(data={})\nremain_data = pd.DataFrame(data={})\nfor col in df.columns :\n    if df[col].dtypes == \"float64\" or df[col].dtypes == \"int64\" :\n        if df[col].isnull().any() :\n            df_num_dtypes[col] = df[col]\n        else:\n            remain_data[col] = df[col]\n    if df[col].dtypes == \"object\" :\n        if df[col].isnull().any() :\n            df_cat_dtypes[col] = df[col]\n        else :\n            remain_data[col] = df[col]\nprint(\"Done!\")","6b14f234":"df_num_dtypes","5fbcf5a8":"for col in df_num_dtypes.columns :\n    print(col , \"=\" ,df_num_dtypes[col].dtypes )","66f9fb0b":"df_cat_dtypes","b6d0ccda":"for col in df_cat_dtypes :\n    print(col , \"=\" ,df_cat_dtypes[col].dtypes )","0438090e":"remain_data","907112c2":"for col in remain_data.columns :\n    print(col, \"=\" ,remain_data[col].dtypes)","27e903ac":"# Try To Contact 3 Data Todether \"(df_num_dtypes , df_cat_dtypes , remain_data)\" To Know If I Do Right\nfinal_data_test = pd.concat([df_num_dtypes , df_cat_dtypes , remain_data] , axis= 1)","e0092fe0":"final_data_test","a4386290":"for col in final_data_test.columns :\n    print(col, \"=\" ,final_data_test[col].dtypes)","7e18cc09":"# Imputation For int and float dtypes Data \nfrom sklearn.impute import SimpleImputer\nmy_imputer = SimpleImputer()\nimputed_df_num_dtypes = pd.DataFrame(my_imputer.fit_transform(df_num_dtypes))","b7864143":"# Drop For object dtypes Data\ncols_with_missing = [col for col in df_cat_dtypes.columns\n                     if df_cat_dtypes[col].isnull().any()]\nreduced_df_cat_data = df_cat_dtypes.drop(cols_with_missing, axis=1)","3a660bda":"# Try To Contact 3 Data Todether \"([imputed_df_num_dtypes , reduced_df_cat_data , remain_data])\"\n#  To Know If I Do Right\n# Before Encoding\nfinal_data = pd.concat([imputed_df_num_dtypes , reduced_df_cat_data , remain_data] , axis= 1)","f07085b2":"final_data","63a6b7ff":"for col in final_data.columns :\n    print(col, \"=\" ,final_data[col].dtypes)","82cd6f46":"# To Make Sure If Git Rid of Missing Data Or Not\nfor col in reduced_df_cat_data.columns :\n    if reduced_df_cat_data[col].isnull().any() :\n        print(col)\nprint(\"Successfully ^_^\")","4f0c67ed":"# To Make Sure If Git Rid of Missing Data Or Not\nfor col in imputed_df_num_dtypes.columns :\n    if imputed_df_num_dtypes[col].isnull().any() :\n        print(col)\nprint(\"Successfully ^_^\")","e002e2db":"for col in final_data.columns :\n    if final_data[col].isnull().any() :\n        print(col ,final_data[col].dtypes)\nprint(\"Successfully ^_^\")","38c97f35":"# I finsheddddddddddddddddddddddddd ohhhhhhhhhhhhhhhhhhhhhhhhhh","9a5794ba":"# I Finish Handle With Missing Values ^_^\n# Specific X , y\n# Now I split the Data \n# Start Encoding For Category Columns\n# Creat Model \"(Because THe Model It Just Handle With Numbers So Do Eencoding Then Create Model)\"","bcd94e8c":"# Specific X , y\nX = final_data.drop(columns= 'Price' , axis= 1)\ny = final_data.Price","176799e6":"# Now I split the Data\nfrom sklearn.model_selection import train_test_split\ntrain_X, val_X, train_y, val_y = train_test_split(X, y, random_state = 0)\nprint(\"Done!\")","22f7de33":"# Specific object Columns To Start Encoding\ns = (train_X.dtypes == 'object')\nobject_cols = list(s[s].index)\nprint(\"Done!\")","cbb6fdde":"# Start Encoding For Category Columns\nfrom sklearn.preprocessing import OneHotEncoder\nOH_encoder = OneHotEncoder(handle_unknown='ignore', sparse=False)\nOH_cols_train = pd.DataFrame(OH_encoder.fit_transform(train_X[object_cols]))\nOH_cols_valid = pd.DataFrame(OH_encoder.transform(val_X[object_cols]))\nOH_cols_train.index = train_X.index\nOH_cols_valid.index = val_X.index\nnum_train_X = train_X.drop(object_cols, axis=1)\nnum_val_X = val_X.drop(object_cols, axis=1)\nOH_train_X = pd.concat([num_train_X, OH_cols_train], axis=1)\nOH_val_X = pd.concat([num_val_X, OH_cols_valid], axis=1)\nprint(\"Done!\") ","66fdebe5":"# Creat Model \nfrom sklearn.tree import DecisionTreeRegressor\nfrom sklearn.metrics import mean_absolute_error\nmod_price = DecisionTreeRegressor(random_state= 1) \ntraining_mod = mod_price.fit(OH_train_X , train_y)\nprediction_target = mod_price.predict(OH_val_X)\nQ_error = mean_absolute_error(prediction_target ,val_y)\nprint(Q_error) ","0ec02742":"#### Important Notice : If I Want To Change On My Data ,, Must Get Copy For This Data","93902ce5":"#### If I Want To Know The Number Of Missing Values : Use sum() ,, Because Every Mmissing Value It Take True = 1"}}