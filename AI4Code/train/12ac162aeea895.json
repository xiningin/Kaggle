{"cell_type":{"cdc99292":"code","d48d5817":"code","051f87a8":"code","46b5e677":"code","601cd478":"code","777e2f40":"code","d5461219":"code","e20dc6e0":"code","463c99cb":"code","3e34edce":"code","036c28a4":"code","8952c023":"code","db2ec010":"code","f525fd9c":"code","d9b8f220":"code","c9a0cb8d":"code","9494c9a3":"code","225dcbd7":"code","c0de0fc6":"code","dd7fff80":"code","dfa53639":"code","9620b50c":"code","99f05af6":"code","581a10dc":"code","00353830":"code","18a11cf1":"code","5b23a7a0":"code","d9ccf888":"code","40ed5692":"code","2c7eeddf":"code","cadc2b73":"code","780e9c42":"code","50a331a6":"code","71f88ec7":"code","01931fcf":"code","e63e6c01":"code","98e01e91":"code","fc3f77dd":"code","9944cf81":"code","1f83f882":"code","503be502":"code","1e9764b4":"code","6e983ef3":"code","12cdd9e8":"code","55e97314":"code","e4d651aa":"code","d34e48c2":"markdown","7814d56e":"markdown","6a8f54eb":"markdown","8cd7d42d":"markdown","6af41af7":"markdown","344eeee2":"markdown","79aa8b04":"markdown","e0c0ae75":"markdown"},"source":{"cdc99292":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport plotly.express as px\nimport plotly.graph_objects as go\nfrom plotly.subplots import make_subplots","d48d5817":"path = \"https:\/\/raw.githubusercontent.com\/VandhanaV\/Dataset\/master\/07-12-2020.csv\"\npath1 = \"https:\/\/raw.githubusercontent.com\/VandhanaV\/Dataset\/master\/csse_daily.csv\"\npath2 = \"https:\/\/raw.githubusercontent.com\/VandhanaV\/Dataset\/master\/time_series_covid19_confirmed_global.csv\"\npath3 = \"https:\/\/raw.githubusercontent.com\/VandhanaV\/Dataset\/master\/time_series_covid19_deaths_global.csv\"\npath4 = \"https:\/\/raw.githubusercontent.com\/VandhanaV\/Dataset\/master\/time_series_covid19_recovered_global.csv\"\n","051f87a8":"df_7 = pd.read_csv(path)\ndf_7.head(3)","46b5e677":"df_csse = pd.read_csv(path1)\ndf_csse.head(3)","601cd478":"df_confirm = pd.read_csv(path2)\ndf_confirm.head(3)","777e2f40":"df_dead = pd.read_csv(path3)\ndf_dead.head(3)","d5461219":"df_recover = pd.read_csv(path4)\ndf_recover.head(3)","e20dc6e0":"def null_check(df):\n  print(\"Displaying the null columns\")\n  for column in df.columns:\n    if(df[column].isna().sum()!=0):\n      print(\"Percentage of missing values in '{}' type {} is: {:.2f}%\".format(column,df[column].dtype, (df[column].isna().sum()*100)\/len(df)))\n","463c99cb":"#Combine the confirm, death & recovered data in single table\ndf_confirm_t = df_confirm.melt(id_vars=['Province\/State', 'Country\/Region', 'Lat', 'Long'],var_name='Dates',value_name='Confirmed')\ndf_death_t = df_dead.melt(id_vars=['Province\/State', 'Country\/Region', 'Lat', 'Long'],var_name='Dates',value_name='Deaths')\ndf_recover_t = df_recover.melt(id_vars=['Province\/State', 'Country\/Region', 'Lat', 'Long'],var_name='Dates',value_name='Recovered')\n\nprint(df_confirm_t.shape)\nprint(df_death_t.shape)\nprint(df_recover_t.shape)\n","3e34edce":"full_data = pd.merge(left=df_confirm_t, right=df_death_t, how='left',on=['Province\/State', 'Country\/Region', 'Dates', 'Lat', 'Long'])\nfull_data = pd.merge(left=full_data, right=df_recover_t, how='left',on=['Province\/State', 'Country\/Region', 'Dates', 'Lat', 'Long'])\n\n# Convert to proper date format\nfull_data['Dates'] = pd.to_datetime(full_data['Dates'])","036c28a4":"full_data.info()","8952c023":"['Province\/State', 'Country\/Region', 'Lat', 'Long', 'Dates', 'Confirmed',\n       'Deaths', 'Recovered']","db2ec010":"full_data = full_data.drop(columns = ['Lat', 'Long','Province\/State'])\nnull_check(full_data)","f525fd9c":"full_data['Recovered'] = full_data['Recovered'].fillna(0)\n\nfull_data = pd.DataFrame(full_data.groupby(['Country\/Region', 'Dates'])[['Confirmed','Deaths', 'Recovered']].agg(np.sum))\nfull_data['Recovered'] = full_data['Recovered'].astype(int)\nfull_data['Active'] = full_data['Confirmed'] - full_data['Deaths'] - full_data['Recovered']","d9b8f220":"def add_col_increase(column):\n  full_data['temp'] = full_data[column].shift(1, fill_value=0)\n  full_data['New_'+column] =  full_data[column] - full_data['temp']\n  full_data.drop(columns = 'temp', inplace=True)","c9a0cb8d":"full_data.columns","9494c9a3":"\nadd_col_increase('Confirmed')\nadd_col_increase('Deaths')\nadd_col_increase('Recovered')\nadd_col_increase('Active')\nfull_data.reset_index(inplace=True)","225dcbd7":"full_data['New_Confirmed'] = full_data['New_Confirmed'].apply(lambda x:0 if x < 0 else x)\nfull_data['New_Deaths'] = full_data['New_Deaths'].apply(lambda x:0 if x < 0 else x)\nfull_data['New_Recovered'] = full_data['New_Recovered'].apply(lambda x:0 if x < 0 else x)\nfull_data['New_Active'] = full_data['New_Active'].apply(lambda x:0 if x < 0 else x)\n","c0de0fc6":"  df_day_wise = pd.DataFrame(full_data.groupby('Dates')[['Confirmed', 'Deaths', 'Recovered', 'Active',\n       'New_Confirmed', 'New_Deaths', 'New_Recovered', 'New_Active']].agg(np.sum)).reset_index()\n  df_day_wise ","dd7fff80":"full_data.columns","dfa53639":"# Line chart showing case values over time\ndef draw_line(column):\n  df = pd.DataFrame(full_data.groupby('Dates')[column].agg(np.sum))\n  df = df.reset_index()\n  fig = go.Figure()\n  fig.add_trace(go.Scatter(x=df['Dates'], y=df[column],\n                    mode='lines+markers',\n                    name='lines+markers'))\n  #fig = px.line(df, x=\"Dates\", y=column)\n  fig.update_layout(title=column+' cases count', xaxis_title='Dates', yaxis_title='Count')\n  fig.show()","9620b50c":"draw_line('Confirmed')","99f05af6":"draw_line('Recovered')","581a10dc":"draw_line('Deaths')","00353830":"draw_line('Active')","18a11cf1":"# Line chart showing case values over time\ndef draw_bar(df,column):\n  fig = px.line(df, x=\"Dates\", y=column)\n  fig.update_layout(title=column+' cases increasing trend', xaxis_title='Dates', yaxis_title='Count')\n  fig.show()","5b23a7a0":"print('Cases increasing trend',)\n\nfor col in ['New_Active','New_Confirmed', 'New_Deaths', 'New_Recovered']:\n  fig = px.line(df_day_wise, x=\"Dates\", y=col)\n  fig.update_layout(height=300, width=1200, xaxis_title='Dates', yaxis_title=col)\n  fig.show()","d9ccf888":"#cat_cols=df_csse.select_dtypes(include='object').columns.tolist()\ndf_csse_t = df_csse.drop(columns=['FIPS', 'Admin2','Combined_Key'])","40ed5692":"null_check(df_csse_t)","2c7eeddf":"df_csse_t.dropna(inplace=True)","cadc2b73":"len(df_csse_t)","780e9c42":"#Grouping based on country\n\ndf_csse_t = pd.DataFrame(df_csse_t.groupby(['Country_Region', 'Last_Update'])[ 'Confirmed', 'Deaths', 'Recovered', 'Active','Incidence_Rate', 'Case-Fatality_Ratio'].agg(np.sum))\ndf_csse_t = df_csse_t.reset_index()","50a331a6":"df_csse_t['Incidence_Rate'] = round(df_csse_t['Incidence_Rate'],2)\ndf_csse_t['Case-Fatality_Ratio'] = round(df_csse_t['Case-Fatality_Ratio'],2)","71f88ec7":"def plot_map(df, col, pal):\n    #df = df[df_csse_t[col]>0]\n    fig = px.choropleth(df, locations=\"Country_Region\", locationmode='country names', \n                  color=col, hover_name=\"Country_Region\", \n                  title=col, hover_data=[col], color_continuous_scale=pal)\n#     fig.update_layout(coloraxis_showscale=False)\n    fig.show()","01931fcf":"plot_map(df_csse_t, 'Confirmed', 'matter')","e63e6c01":"plot_map(df_csse_t, 'Deaths', 'matter')","98e01e91":"plot_map(df_csse_t, 'Recovered', 'matter')","fc3f77dd":"plot_map(df_csse_t, 'Active', 'matter')","9944cf81":"def plot_bar(df, col):\n    fig = px.bar(df.sort_values(col).tail(20), \n                 x=col, y=\"Country_Region\",text=col, orientation='h'\n                 #,color_discrete_sequence = px.colors.qualitative.Dark2\n                 )\n    fig.update_layout(title=col, xaxis_title=\"\", yaxis_title=\"\", \n                      yaxis_categoryorder = 'total ascending')\n    fig.show()","1f83f882":"plot_bar(df_csse_t,'Incidence_Rate')","503be502":"plot_bar(df_csse_t,'Case-Fatality_Ratio')","1e9764b4":"df_csse_t.sort_values('Confirmed').plot(kind='bar',x='Country_Region',y='Confirmed')","6e983ef3":"df_csse_t.sort_values('Deaths').plot(kind='bar',x='Country_Region',y='Deaths')","12cdd9e8":"df_csse_t.sort_values('Recovered').plot(kind='bar',x='Country_Region',y='Recovered')","55e97314":"df_csse_t.sort_values('Active').plot(kind='bar',x='Country_Region',y='Active')","e4d651aa":"df_all_case = df_csse_t.melt(value_vars=['Deaths', 'Recovered','Active'],value_name='Count',var_name='Case')\nsns.barplot(x='Case', y=\"Count\", data=df_all_case, palette='pastel')","d34e48c2":"### Importing libraries","7814d56e":"This notebook displays a basic data analysis of [COVID-19 Data Repository by the Center for Systems Science and Engineering (CSSE) at Johns Hopkins University](https:\/\/github.com\/CSSEGISandData\/COVID-19#covid-19-data-repository-by-the-center-for-systems-science-and-engineering-csse-at-johns-hopkins-university) using Plotly, Seaborn & Matplotlib","6a8f54eb":"### Data","8cd7d42d":"### Load the datasets","6af41af7":"### World Daily Increases in confirmed cases, confirmed deaths, confirmed recoveries & Active cases","344eeee2":"### Distribution of case count","79aa8b04":"### Log of cases over time","e0c0ae75":"### Country specific graphs"}}