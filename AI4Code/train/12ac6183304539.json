{"cell_type":{"6d66a158":"code","22c3ee06":"code","e93ff8c0":"code","609bfdc4":"code","9c7a37ce":"code","ce536ce1":"code","ccd22703":"code","d27cbdde":"code","662b3b41":"code","ad91363e":"code","1ccd1f55":"code","b0afbebc":"code","647f0ea3":"code","ccad9b9b":"code","4fe4eff3":"code","5ad84257":"code","6ee20915":"code","0a65bc43":"code","5cca9dd0":"code","fc415035":"code","6fc5d6fb":"code","628a7f68":"markdown","b4c2b165":"markdown","bfa453c2":"markdown"},"source":{"6d66a158":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nfrom statistics import mean\nimport gc\n\n\nfrom sklearn.preprocessing import StandardScaler,OneHotEncoder\n\nimport os\nfrom tqdm import tqdm\nimport random\n\nimport warnings\nwarnings.filterwarnings('ignore')\n","22c3ee06":"from keras import backend as K\nK.tensorflow_backend._get_available_gpus()","e93ff8c0":"from keras.models import Sequential\nfrom keras.layers import Dense, Dropout, Conv1D, MaxPooling1D, GlobalAveragePooling1D, Input, CuDNNLSTM, Flatten\nfrom keras.optimizers import Adam\nfrom keras.losses import mean_squared_error\nfrom keras.callbacks import History","609bfdc4":"train_data = pd.read_csv('..\/input\/train.csv',dtype = {'acoustic_data':np.float32,'time_to_failure':np.float32})\n\n\n","9c7a37ce":"rows = 150000\nsegments = int(np.floor(train_data.shape[0] \/ rows))\n\nX_train = np.zeros((segments,150000))\ny_train = pd.DataFrame(index = range(segments),dtype = np.float32,columns = ['time_to_failure'])\n\nfor segment in tqdm(range(segments)):\n    x = train_data.iloc[segment*rows:segment*rows+rows]\n    y = x['time_to_failure'].values[-1]\n    x = x['acoustic_data'].values\n    y_train.loc[segment,'time_to_failure'] = y\n    X_train[segment] = x\ndel train_data","ce536ce1":"gc.collect()","ccd22703":"X_train.shape\ny_train['time_to_failure'] = round(y_train['time_to_failure'])","d27cbdde":"y_train['time_to_failure'] = y_train['time_to_failure'].astype(np.int32)","662b3b41":"ohe = OneHotEncoder()\ny_train = ohe.fit_transform(np.array(y_train['time_to_failure']).reshape(-1,1))","ad91363e":"y_train.shape","1ccd1f55":"model = Sequential()\nmodel.add(Conv1D(filters=40, kernel_size=20, strides=2, activation='relu', input_shape=(150000,1)))\nmodel.add(MaxPooling1D(3))\nmodel.add(Conv1D(filters=40, kernel_size=20, strides=1, activation='relu'))\nmodel.add(MaxPooling1D(3))\nmodel.add(Conv1D(filters=40, kernel_size=20, strides=1, activation='relu'))\nmodel.add(MaxPooling1D(3))\nmodel.add(CuDNNLSTM(8,return_sequences=True))\nmodel.add(CuDNNLSTM(8,return_sequences=True))\n#model.add(Flatten())\nmodel.add(Conv1D(filters=40, kernel_size=10, strides=1, activation='relu'))\nmodel.add(GlobalAveragePooling1D())\nmodel.add(Dropout(rate=0.1))\nmodel.add(Dense(17,activation = 'softmax'))\nprint(model.summary())","b0afbebc":"model.compile(loss='categorical_crossentropy',optimizer='adam')","647f0ea3":"model.fit(X_train.reshape(-1,150000,1),y_train,epochs = 100, validation_split = 0.1,batch_size = 16)","ccad9b9b":"def predictSubmission(seg_id):\n    test_df = pd.read_csv('..\/input\/test\/' + seg_id + '.csv')\n    #y = model.predict(prepareAd(test_df.acoustic_data.values).reshape(1,150000,1))*16\n    #x = sc.fit_transform(test_df.acoustic_data.values.reshape(-1,1))\n    x = test_df.acoustic_data.values\n    y = model.predict(x.reshape(1,150000,1))\n    return np.argmax(y)","4fe4eff3":"submission = pd.read_csv('..\/input\/sample_submission.csv')\nsubmission['time_to_failure']=submission['seg_id'].apply(predictSubmission)\nsubmission.to_csv('submission_8.csv',index=False)","5ad84257":"submission.head()","6ee20915":"import matplotlib.pyplot as plt\nplt.hist(submission['time_to_failure'])\n","0a65bc43":"submission.to_csv('l.csv',index = False)","5cca9dd0":"from IPython.display import HTML\n\ndef create_download_link(title = \"Download CSV file\", filename = \"data.csv\"):  \n    html = '<a href={filename}>{title}<\/a>'\n    html = html.format(title=title,filename=filename)\n    return HTML(html)\n\n# create a link to download the dataframe which was saved with .to_csv method\ncreate_download_link(filename='l.csv')","fc415035":"from IPython.display import HTML\nhtml = '<a href = \"l.csv\">d<\/a>'\nHTML(html)","6fc5d6fb":"def testInfo(seg_id):\n    test_df = pd.read_csv('..\/input\/test\/' + seg_id + '.csv')\n    return(test_df.acoustic_data.max())\n#submission = pd.read_csv('..\/input\/sample_submission.csv')\n#submission['time_to_failure']=submission['seg_id'].apply(testInfo)","628a7f68":"def getTrainBatch(dfl,nrows,batch_size):\n    x = np.empty([batch_size,15000,1])\n    y = np.empty([batch_size,15000])\n    for i,rn in enumerate(np.random.randint(nrows-15000, size=batch_size)):\n        df = dfl.loc[rn:rn+14999,:]\n        x[i,:,0] = df.acoustic_data.values\n        y[i,:] = df.time_to_failure.values\n    return x,y","b4c2b165":"random.seed(42)\nhistory = History()\nstep = 150000000\nstop = 600000000\n#sc = StandardScaler()\nfor i in range(0, stop, step):\n    print('Reading file chunk :',i)\n    train_df = pd.read_csv(\"..\/input\/train.csv\",\n                           skiprows = i,\n                           nrows = step,\n                           dtype={'acoustic_data': np.int16, 'time_to_failure': np.float32}\n                          )\n    train_df.columns = ['acoustic_data','time_to_failure']\n    #train_df.acoustic_data =prepareAd(train_df.acoustic_data.values)\n    #train_df.time_to_failure = train_df.time_to_failure\/16\n    \n    loss = []\n    val_loss = []\n    mae = []\n    for j in range(20):\n        #print('Generating training batch :',j)\n        x_train,y_train = getTrainBatch(train_df,step,batch_size=1024)\n        history = model.fit(x_train,\n                            y_train,\n                            batch_size=16,\n                            epochs=10,\n                            validation_split=0.1,\n                            verbose=0)\n        loss = loss + history.history['loss']\n        val_loss = val_loss + history.history['val_loss']\n        #mae = mae + history.history['mean_absolute_error']\n        if (j%5==0):\n            print('loss :',mean(loss[-10:]),' val_loss :',mean(val_loss[-10:])) #, ' val_mae :',mean(mae[-10:])*16)\n        del x_train, y_train\n        gc.collect()\n    del train_df\n    gc.collect()","bfa453c2":"def prepareAd(x):\n    x = np.sign(x)*np.log(1 + np.sqrt(np.abs(x)))\/4.4\n    return x"}}