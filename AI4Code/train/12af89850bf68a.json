{"cell_type":{"4a37960a":"code","5183f111":"code","6e0ff8be":"code","d88dd4f4":"code","051f2170":"code","62c0bc11":"code","60034d6e":"code","94465124":"code","dfa9e7e0":"code","01e67ea4":"code","07e28f54":"code","8c07c441":"code","ece00af4":"code","7a9c7cd2":"code","bbd7db0d":"code","de4771cc":"code","22a5ec76":"code","11fec026":"code","8c4ffbde":"code","39a7caee":"code","439db6c2":"code","0d00c8f9":"code","1b268689":"markdown","55c89035":"markdown","9b63d7a4":"markdown","11018845":"markdown","51498128":"markdown","68a575a9":"markdown","6db2b5d4":"markdown","613a650b":"markdown","4c13436b":"markdown","eefd66b8":"markdown","95c6e831":"markdown","92310a08":"markdown","9b517147":"markdown","fd6335aa":"markdown","82920862":"markdown","747a2624":"markdown","5d1d8024":"markdown","69b5477a":"markdown","0448670d":"markdown","af0b8f8c":"markdown","665894f6":"markdown","4f232dc6":"markdown","bb7916cc":"markdown"},"source":{"4a37960a":"import numpy as np \nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nimport re\nimport matplotlib.style as style\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))","5183f111":"books = pd.read_csv(\"\/kaggle\/input\/goodbooks-10k\/books.csv\")\nbook_tags = pd.read_csv(\"\/kaggle\/input\/goodbooks-10k\/book_tags.csv\")\ntags = pd.read_csv(\"\/kaggle\/input\/goodbooks-10k\/tags.csv\")\nratings = pd.read_csv(\"\/kaggle\/input\/goodbooks-10k\/ratings.csv\")","6e0ff8be":"tags.head()","d88dd4f4":"book_tags.head()","051f2170":"#Left join between book_tags and tags dataframe\nbook_tags = pd.merge(book_tags,tags,on='tag_id',how='left')","62c0bc11":"book_tags.drop(book_tags[book_tags.duplicated()].index, inplace = True)","60034d6e":"book_tags","94465124":"books.head()","dfa9e7e0":"#Drop unnecessary columns\nbooks.drop(columns=['id', 'best_book_id', 'work_id', 'isbn', 'isbn13', 'title','work_ratings_count','ratings_count','work_text_reviews_count', 'ratings_1', 'ratings_2', 'ratings_3','ratings_4', 'ratings_5', 'image_url','small_image_url'], inplace= True)\n\n#Rename columns\nbooks.rename(columns={'original_publication_year':'pub_year', 'original_title':'title', 'language_code':'language', 'average_rating':'rating'}, inplace=True)","01e67ea4":"books.isnull().sum()","07e28f54":"#Dropping the null values\nbooks.dropna(inplace= True)","8c07c441":"#Using python's split string function to create a list of authors\nbooks['authors'] = books.authors.str.split(',')","ece00af4":"books","7a9c7cd2":"book_authors = books.copy()\n\n#For every row in the dataframe, iterate through the list of authors and place a 1 into the corresponding column\nfor index, row in books.iterrows():\n    for author in row['authors']:\n        book_authors.at[index, author] = 1\n        \n#Filling in the NaN values with 0 to show that a book isn't written by that author\nbook_authors = book_authors.fillna(0)\nbook_authors.head()","bbd7db0d":"#Generalising the format of author names for simplicity in future\nbook_authors.columns = [c.lower().strip().replace(' ', '_') for c in book_authors.columns]\n\n#Setting book_id as index of the dataframe \nbook_authors = book_authors.set_index(book_authors['book_id'])\n\n#Dropping unnecessary columns\nbook_authors.drop(columns= {'book_id','pub_year','title','rating','books_count', 'authors','language'}, inplace=True)","de4771cc":"book_authors.head()","22a5ec76":"user_1 = pd.DataFrame([{'book_id':2767052, 'rating':5.0},{'book_id':3, 'rating':4.0}, {'book_id':41865, 'rating':4.5},{'book_id':15613, 'rating':3.0},{'book_id':2657, 'rating':2.5}])\nuser_1","11fec026":"user_authors = book_authors[book_authors.index.isin(user_1['book_id'].tolist())].reset_index(drop=True)\nuser_authors","8c4ffbde":"user_1.rating","39a7caee":"#Dot product to get weights\nuserProfile = user_authors.transpose().dot(user_1['rating'])\n#The user profile\nuserProfile","439db6c2":"recommendation = (((book_authors*userProfile).sum(axis=1))\/(userProfile.sum())).sort_values(ascending=False)\n#Top 20 recommendations\nrecommendation.head(20)","0d00c8f9":"#The final recommendation table\nbooks.loc[books['book_id'].isin(recommendation.head(20).keys())].reset_index()","1b268689":"Checking for nulls, if any.","55c89035":"### Advantages of Content-Based Recommendation System\n\n***Advantages***\n* Learns user's preferences\n* Highly personalized for the user","9b63d7a4":"<h1 align=center><font size = 5>BOOK RECOMMENDATION SYSTEM<\/font><\/h1>","11018845":"<a id=\"ref2\"><\/a>\n# Content-based Recommendation System","51498128":"Removing duplicated rows, if any.","68a575a9":"Removing columns that aren't needed for a content-based recommendation system and renaming some of them for better understanding.","6db2b5d4":"Both of these can be merged as one using the column ***'tag_id'***","613a650b":"Creating an input user to recommend books to:","4c13436b":"1. Since keeping authors in a list format isn't optimal for the content-based recommendation system technique, we will use the ***One Hot Encoding technique*** to convert it into to a vector where each column corresponds to one possible value of the feature. This encoding is needed for feeding categorical data. \n\n2. Store every different author in columns that contain either 1 or 0. 1 shows that the book is written by that author and 0 shows that it isn't.","eefd66b8":"Splitting the values in the ***authors*** column into a ***list of authors*** to simplify future use.","95c6e831":"**FINAL *books*:**","92310a08":"**FINAL *book_authors*:**","9b517147":"### Table of contents\n\n<a href=\"#ref1\">1. Preprocessing data<\/a>\n\n<a href=\"#ref2\">2. Content-based Recommendation System<\/a>\n\n<a href=\"#ref3\">3. The final recommendation table<\/a>","fd6335aa":"Turning the authors into weights by using the user's ratings and multiplying them into the user's author table (*user_authors*) and then summing up the resulting table by column.\nThis operation is a result of dot product between a matrix and a vector that can be accomplished by Pandas's \"dot\" function.","82920862":"<a id=\"ref1\"><\/a>\n# Preprocessing Data","747a2624":"*userProfile* contains the weights of the user's preferences. \nUsing this, we can recommend books that satisfy the user's preferences.","5d1d8024":"Reviewing the data in ***tags*** and ***book_tags***","69b5477a":"With the *userProfile* and the *book_authors* , we take the **weighted average** of every book based on the user's profile and recommend the top twenty books written by same authors.","0448670d":"<a id=\"ref3\"><\/a>\n# The final recommendation table:","af0b8f8c":"Reviewing the data in ***books***","665894f6":"A **Content-Based** or **Item-Item recommendation system** attempts to figure out what a user's favourite aspects of an item is, and then recommends items that present those aspects. \n\nIn this case, I'm going to figure out recommendations for a user based on the authors of the books they've read and ratings given.","4f232dc6":"To learn user's preferences, we get the subset of authors that the user has already read from the dataframe (*book_authors*) containing authors of books with binary values.\n","bb7916cc":"**FINAL *book_tags*:**"}}