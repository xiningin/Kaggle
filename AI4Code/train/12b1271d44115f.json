{"cell_type":{"c96387cc":"code","6ff9e30e":"code","516b900a":"code","514305db":"code","c4334d87":"code","a654a60b":"code","2c4296f6":"code","ffbfdbf3":"code","5a75561f":"code","58b66ceb":"code","35180c82":"code","d65e177a":"code","d3fa70bc":"code","f3685686":"code","b147c11d":"code","62f87c98":"code","6adddad4":"code","8200707b":"code","a5302c57":"code","b73d5d6a":"code","033574ce":"code","685d9c0a":"code","e42dfed7":"code","6c5d097e":"code","fa240f73":"code","f0c5133c":"code","68cf332d":"markdown","61cecb62":"markdown","687acda9":"markdown","3547a3ef":"markdown","f03ee93c":"markdown","75b52517":"markdown","8bc9b151":"markdown","47fe61af":"markdown","3583d53a":"markdown","c6d93bfe":"markdown","7ec7ffbb":"markdown","a0148eb7":"markdown","5e5bad96":"markdown","3ab2c525":"markdown","ca9d4264":"markdown"},"source":{"c96387cc":"import tensorflow as tf    \nimport keras\nfrom keras.utils import to_categorical\nfrom keras import layers, models, callbacks\nfrom keras.preprocessing.image import ImageDataGenerator\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import confusion_matrix\nimport pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport itertools\n\nSEED = 1\nnp.random.seed(SEED)\nsns.set(style=\"white\", context=\"notebook\", palette=\"deep\")","6ff9e30e":"train = pd.read_csv(\"..\/input\/digit-recognizer\/train.csv\")\ntest = pd.read_csv(\"..\/input\/digit-recognizer\/test.csv\")","516b900a":"y_train = train[\"label\"]\nX_train = train.drop(labels=[\"label\"], axis=1)\n\nsns.countplot(y_train)","514305db":"print(X_train.isnull().any().any(), y_train.isnull().any().any(), test.isnull().any().any())","c4334d87":"X_train \/= 255","a654a60b":"test \/= 255","2c4296f6":"X_train = X_train.to_numpy().reshape(-1, 28, 28, 1)\ntest = test.to_numpy().reshape(-1, 28, 28, 1)","ffbfdbf3":"print(X_train.shape, test.shape)","5a75561f":"y_train = to_categorical(y_train)","58b66ceb":"X_train, X_valid, y_train, y_valid = train_test_split(X_train, y_train, random_state=SEED, train_size=0.9)","35180c82":"print(X_train.shape, X_valid.shape)","d65e177a":"plt.figure(figsize=(10, 6))\nfor i in range(15):\n    plt.subplot(3, 5, i + 1)\n    plt.imshow(X_train[i,:,:,0])\n    plt.xticks([])\n    plt.yticks([])","d3fa70bc":"model = models.Sequential()\nmodel.add(layers.Conv2D(filters=32, kernel_size=(5, 5), activation=\"relu\", padding=\"same\", input_shape=(28, 28, 1)))\nmodel.add(layers.Conv2D(filters=32, kernel_size=(5, 5), activation=\"relu\", padding=\"same\"))\nmodel.add(layers.MaxPooling2D(pool_size=(2, 2)))\nmodel.add(layers.Dropout(0.25))\nmodel.add(layers.Conv2D(filters=64, kernel_size=(5, 5), activation=\"relu\", padding=\"same\"))\nmodel.add(layers.Conv2D(filters=64, kernel_size=(5, 5), activation=\"relu\", padding=\"same\"))\nmodel.add(layers.MaxPooling2D(pool_size=(2, 2), strides=(2, 2)))\nmodel.add(layers.Dropout(0.25))\nmodel.add(layers.Flatten())\nmodel.add(layers.Dense(256, activation=\"relu\"))\nmodel.add(layers.Dropout(0.5))\nmodel.add(layers.Dense(10, activation=\"softmax\"))","f3685686":"model.compile(loss=\"categorical_crossentropy\", optimizer=\"rmsprop\", metrics=[\"acc\"])","b147c11d":"learning_rate_reduction = callbacks.ReduceLROnPlateau(monitor='val_acc', patience=3, verbose=1, factor=0.5, min_lr=0.00001)","62f87c98":"# model_checkpoints = callbacks.ModelCheckpoint(\".\/checkpoints\/weights{epoch:03d}.h5\", save_weights_only=True)","6adddad4":"epochs = 20\nbatch_size = 86","8200707b":"datagen = ImageDataGenerator(rotation_range=10, width_shift_range=0.1, height_shift_range=0.1, zoom_range=0.1)","a5302c57":"history = model.fit_generator(datagen.flow(X_train, y_train, batch_size=batch_size), \n                             epochs=epochs,\n                             validation_data=(X_valid, y_valid),\n                             steps_per_epoch=len(X_train) \/\/ batch_size,\n                             callbacks=[learning_rate_reduction])","b73d5d6a":"plt.subplots(figsize=(10, 12))\n\nplt.subplot(211)\nplt.title(\"Loss\")\nloss = history.history[\"loss\"]\nplt.plot(range(1, len(loss) + 1), loss, \"bo-\", label=\"Training Loss\")\nloss = history.history[\"val_loss\"]\nplt.plot(range(1, len(loss) + 1), loss, \"ro-\", label=\"Validation Loss\")\nplt.xticks(range(1, len(loss) + 1))\nplt.grid(True)\nplt.legend()\n\nplt.subplot(212)\nplt.title(\"Accuracy\")\nacc = history.history[\"acc\"]\nplt.plot(range(1, len(loss) + 1), acc, \"bo-\", label=\"Training Acc\")\nacc = history.history[\"val_acc\"]\nplt.plot(range(1, len(loss) + 1), acc, \"ro-\", label=\"Validation Acc\")\nplt.xticks(range(1, len(loss) + 1))\nplt.grid(True)\nplt.legend()","033574ce":"pred = model.predict(X_valid)\npred_classes = np.argmax(pred, axis=1)\npred_true = np.argmax(y_valid, axis=1)","685d9c0a":"confusion_mtx = confusion_matrix(pred_true, pred_classes)\nsns.heatmap(confusion_mtx, annot=True, fmt='d', cmap=plt.cm.Blues)","e42dfed7":"results = model.predict(test)\nresults = np.argmax(results, axis=1)","6c5d097e":"results = pd.concat([pd.Series(range(1, 28001), name=\"ImageId\"),\n                     pd.Series(results, name=\"Label\")],\n                    axis=1)","fa240f73":"results.shape","f0c5133c":"results.to_csv(\"out.csv\", index=False)","68cf332d":"### Compiling","61cecb62":"### Loading Data","687acda9":"### CNN","3547a3ef":"### Null check","f03ee93c":"### To One-Hot","75b52517":"### Augmentation","8bc9b151":"### Previewing","47fe61af":"### Confusion matrix","3583d53a":"### Evaluating","c6d93bfe":"### Results","7ec7ffbb":"### Validation data","a0148eb7":"### Normalization","5e5bad96":"### Reshape","3ab2c525":"### Training","ca9d4264":"# MNIST CNN"}}