{"cell_type":{"3197a2ea":"code","2f5a94f5":"code","d66e6153":"code","5ce768cc":"code","c1197ab3":"code","e0b1ef8c":"code","7ee75fd7":"code","0b00ad5c":"code","2efc4685":"code","5309487a":"code","323a35c0":"code","74a9bf69":"code","50abf8eb":"code","29d62e97":"code","c766b98c":"code","fc468dd2":"code","5e30b7a0":"code","7026d3cb":"code","7b84e565":"code","5b5ac3f7":"code","c586f13c":"code","6cf5d0b7":"code","377a2dd9":"code","e63832b0":"code","19d05664":"code","12ce40bf":"code","1b29610c":"code","5518254d":"code","1dd4bd85":"code","184fac10":"code","6ca43f42":"markdown"},"source":{"3197a2ea":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport tensorflow as tf\nfrom keras.preprocessing.image import ImageDataGenerator\nfrom keras.preprocessing import image\nfrom keras.layers.normalization import BatchNormalization\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nsns.set_style('whitegrid')\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","2f5a94f5":"train=pd.read_csv('..\/input\/digit-recognizer\/train.csv')\nTest=pd.read_csv('..\/input\/digit-recognizer\/test.csv')\nsub=pd.read_csv('..\/input\/digit-recognizer\/sample_submission.csv')","d66e6153":"train.head()","5ce768cc":"x=train.drop('label',axis=1).values\ny=train['label'].values\ntest=Test.values","c1197ab3":"x=x\/255\ntest=test\/255","e0b1ef8c":"y=pd.get_dummies(y)","7ee75fd7":"y=y.values","0b00ad5c":"y.shape","2efc4685":"x.shape","5309487a":"test.shape","323a35c0":"from sklearn.model_selection import train_test_split\nx_train,x_test,y_train,y_test=train_test_split(x,y,test_size=0.1,random_state=9)","74a9bf69":"x_train.shape,x_test.shape,y_train.shape,y_test.shape","50abf8eb":"x_train=x_train.reshape(-1,28,28,1)\nx_test=x_test.reshape(-1,28,28,1)\ntest=test.reshape(-1,28,28,1)","29d62e97":"x_train_plot=x_train.reshape(x_train.shape[0],28,28)\nplt.imshow(x_train_plot[5],cmap='binary')\ndigit=np.argmax(y_train[5])\nplt.title(f'The Value in image is {digit}')","c766b98c":"x_train_plot=x_train.reshape(x_train.shape[0],28,28)\nplt.imshow(x_train_plot[568],cmap='binary')\ndigit=np.argmax(y_train[568])\nplt.title(f'The Value in image is {digit}')","fc468dd2":"#Data augmentation to prevent overfitting\ndatagen = ImageDataGenerator(\n        featurewise_center=False,  # set input mean to 0 over the dataset\n        samplewise_center=False,  # set each sample mean to 0\n        featurewise_std_normalization=False,  # divide inputs by std of the dataset\n        samplewise_std_normalization=False,  # divide each input by its std\n        zca_whitening=False,  # apply ZCA whitening\n        rotation_range=10,  # randomly rotate images in the range (degrees, 0 to 180)\n        zoom_range = 0.1, # Randomly zoom image \n        width_shift_range=0.1,  # randomly shift images horizontally (fraction of total width)\n        height_shift_range=0.1,  # randomly shift images vertically (fraction of total height)\n        horizontal_flip=False,  # randomly flip images\n        vertical_flip=False)  # randomly flip images\n\n#datagen.fit(X_train)\ntrain_data=datagen.flow(x_train, y_train, batch_size=32)\ntest_data=datagen.flow(x_test, y_test, batch_size=32)","5e30b7a0":"cnn=tf.keras.models.Sequential()","7026d3cb":"cnn.add(tf.keras.layers.Conv2D(input_shape=[28,28,1],filters=32,kernel_size=(3,3),activation='relu'))\ncnn.add(tf.keras.layers.MaxPool2D(strides=2,pool_size=2))\ncnn.add(BatchNormalization())","7b84e565":"cnn.add(tf.keras.layers.Conv2D(input_shape=[28,28,1],filters=32,kernel_size=(3,3),activation='relu'))\ncnn.add(tf.keras.layers.MaxPool2D(strides=2,pool_size=2))\ncnn.add(BatchNormalization())","5b5ac3f7":"cnn.add(tf.keras.layers.Flatten())","c586f13c":"cnn.add(tf.keras.layers.Dense(units=784,activation='relu'))","6cf5d0b7":"cnn.add(tf.keras.layers.Dense(units=10,activation='softmax'))","377a2dd9":"cnn.compile(optimizer='adam',loss='categorical_crossentropy',metrics=['accuracy'])","e63832b0":"cnn.fit(x=train_data,validation_data=test_data,epochs=10)","19d05664":"from keras.utils.vis_utils import plot_model\nplot_model(cnn, to_file='model_plot.png', show_shapes=True, show_layer_names=True)","12ce40bf":"pred_y=cnn.predict_classes(x_test)\nY_test=np.argmax(y_test,1)\nfrom sklearn.metrics import confusion_matrix\ncm=confusion_matrix(pred_y,Y_test)\nsns.heatmap(cm,annot=True)","1b29610c":"predictions=cnn.predict_classes(test)","5518254d":"test_plot=test.reshape(test.shape[0],28,28)\nplt.imshow(test_plot[5],cmap='binary')\nplt.title(f'The Value in image is {predictions[5]}')","1dd4bd85":"sub['Label']=predictions\nsub.to_csv(\"MNIST_Kaggle.csv\", index=False)\nsub.head()","184fac10":"sub","6ca43f42":"The prediction is absolutely correct."}}