{"cell_type":{"babd550f":"code","0dd135c9":"code","e6cd5a09":"code","b5db61a0":"code","23b25410":"code","3c1d56a0":"code","ab547e98":"code","3040ce6a":"code","21792bd8":"code","c6a86b6f":"code","81cd498c":"code","4a676884":"code","bd70d0b7":"code","38d76529":"code","3d2cb79f":"code","4297ca2a":"code","a73025b9":"code","aab22674":"code","6c396faa":"code","b70a6fc8":"code","46ce3608":"code","4d137018":"code","0105463c":"code","ebcd755b":"code","925eb3f7":"code","f3ef05ae":"code","526baa8d":"code","c6ec904d":"code","c9c97d42":"code","dc56f13d":"code","3a79b0a1":"code","50d418a6":"code","fd403fb5":"code","ea8f3cb1":"code","8721f0e7":"code","081db2e0":"code","a6775f11":"code","7237027d":"code","eb263c18":"code","4894e1fc":"code","229de5be":"code","eb9f8692":"code","e0081d1e":"code","48c8f044":"code","75f4c4e0":"code","ab8f88aa":"code","11e4adee":"code","d592189b":"code","896d9530":"code","2d8dae49":"code","e71036f0":"code","3fe1b27e":"code","6841167a":"code","d5bdeeab":"code","d10dc87e":"code","3648b20e":"code","b752bdeb":"code","e350aaa6":"code","bafd7283":"code","55f74560":"code","2c9ba3cf":"code","7e1ba381":"code","7aefc294":"code","73a14e41":"code","ddc1bff2":"code","9bf52910":"code","45119678":"code","d6a49608":"code","7a218624":"code","2ccb0cf4":"code","37b6701f":"code","50ff2ffe":"code","aed56fc7":"code","c3beb52c":"code","053ac2b9":"code","75709f4e":"code","503f664a":"code","beb729d1":"code","1ed7c8eb":"code","23c54bf3":"code","79a70aba":"code","6f046c21":"code","27c99be1":"code","837d26f3":"code","3c4d559e":"code","c991ac7b":"code","c7b90090":"markdown","073c4c0f":"markdown","96ee1779":"markdown","065f62a0":"markdown","6d15102e":"markdown","d1fa548a":"markdown","2d25df41":"markdown","1307b506":"markdown","038e1316":"markdown","5f020889":"markdown","7951592a":"markdown","6d767fae":"markdown","1ff27266":"markdown","b2993ecd":"markdown","9c1a27f6":"markdown","2440b5d0":"markdown","76294c09":"markdown","b6ee94a1":"markdown","127e5c09":"markdown","9957c146":"markdown","7fe1b2b2":"markdown","c0cd73a9":"markdown","5dc4b820":"markdown","0e7baf18":"markdown","783015e0":"markdown","9ff42560":"markdown","9e45c106":"markdown","83c61c88":"markdown","8a2d9384":"markdown","391fac3b":"markdown","3c8b3375":"markdown","d257d3ed":"markdown","9b48e5db":"markdown","e69d0e88":"markdown","e122b629":"markdown","ab316a94":"markdown","dcc2054c":"markdown","1aed3ee2":"markdown","a7e8b049":"markdown","3e4dfe2e":"markdown","4b8fc4b4":"markdown","787e118f":"markdown","b2c8efbb":"markdown","f77024b6":"markdown","307a2ced":"markdown","b6456471":"markdown","36c41051":"markdown","36aaa5e7":"markdown","daf91fab":"markdown"},"source":{"babd550f":"# import os\n# print(os.listdir(\"..\/input\"))\n\nimport warnings\nwarnings.filterwarnings(\"ignore\")","0dd135c9":"%%html\n<img src=\"https:\/\/www.edmtunes.com\/wp-content\/uploads\/2018\/04\/spotify-logo-computer-wallpaper-62369-64312-hd-wallpapers.jpg\" width=\"600\"\/>\n\nphoto provided by: <a href=\"https:\/\/www.edmtunes.com\/2018\/05\/spotify-chris-brown\/\">https:\/\/www.edmtunes.com\/2018\/05\/spotify-chris-brown\/<\/a>","e6cd5a09":"# Load libraries\n%matplotlib inline\n\nimport matplotlib.pyplot as plt\nimport pandas as pd\nimport numpy as np\nimport seaborn as sns","b5db61a0":"# Read data\nraw = pd.read_csv(\"..\/input\/data.csv\", encoding='latin1')\n# Create a copy of the raw data\ndf = raw.copy()","23b25410":"print(format(df.shape[0], ','), \"Rows by\", df.shape[1], \"columns\")\nprint('\\n', 100*'*')\ndisplay(df.head())\ndisplay(df.tail())\nprint('\\n', 100*'*')\ndisplay(df.info())\nprint('\\n', 100*'*')\n\n# format Sci-Notation to \"1E4\" to \"1,000\" for display \npd.options.display.float_format = '{:,.2f}'.format\n\n# Get summary statistics\ndisplay(df['Streams'].describe())\n","3c1d56a0":"df['Track Name'].isna().value_counts()\/df.shape[0] * 100","ab547e98":"# Parse the Date\ndf['Date'] = pd.to_datetime(df['Date'])","3040ce6a":"df['Date'].max() - df['Date'].min()","21792bd8":"print('First Day:', df['Date'].min().strftime('%B %d, %Y'), \n      '\\n Last Day:', df['Date'].max().strftime('%B %d, %Y'), \n      \"\\nTotal Duration:\", \n      df['Date'].max() - df['Date'].min())","c6a86b6f":"# reformat \"1000\" to \"1E4\"\npd.options.display.float_format = '{:.2E}'.format\n\nplt.style.use('seaborn')\nfig, ax = plt.subplots(1, 1, figsize=(10,3), dpi=100)\n# figure background color\nfig.patch.set_facecolor('white')\n\n# Grid Color\nax.tick_params(colors='black',\n               grid_color='#e0dbd1', grid_alpha=0.5)\nax.grid(which='major', axis='both', linestyle='--')\n\n# axis foreground color\nax.set_facecolor('black')\nx = np.log10(df.loc[:,'Streams'])\nsns.distplot(x, hist=False, kde_kws={\"shade\": True, \"color\": \"#6AE368\"})\nplt.title('Stream Distribution')\nplt.xlabel('Log Base 10 Streams')\nplt.ylabel('%')\nplt.show()","81cd498c":"y_2017 = df[df['Date'] < '2018']['Streams']\ny_2018 = df[df['Date'] >='2018']['Streams']","4a676884":"y_2017.sum()\/df.Streams.sum(), y_2018.sum()\/df.Streams.sum()","bd70d0b7":"# # Make a copy of date with dates parsed\n# df1 = df.copy()\n\n# # Take subset of data prior to 2018 overlap\n# df = df[df['Date'] < '2018']","38d76529":"# create variables for day and month\ndf['day_of_week'] = df['Date'].dt.dayofweek\ndf['month'] = df['Date'].dt.month_name()","3d2cb79f":"sns.set_style()\n\nfig, ax = plt.subplots(1, 1, figsize=(6,3), dpi=100)\nfig.suptitle('2017 Global Streams by Day of the Week', fontsize=14, ha='center')\n\n\nsums = df.groupby('day_of_week')['Streams'].agg(np.sum)\nax = sns.barplot(x=sums.index, y=sums.values, palette=\"plasma\", alpha=.7)\nplt.yticks(np.arange(10**10,(4.5*10**10), (10**10)), ['1 Billion', '2 Billion', '3 Billion'], rotation=0, fontsize=12)\nplt.xticks(np.arange(7), ['M','T','W','Th','F','S','Su'], rotation=0, fontsize=12)\nplt.xlabel('')\nplt.show()","4297ca2a":"fri = df[df['day_of_week'] == 4]\nsat = df[df['day_of_week'] == 5]\nweekday = df[~df['day_of_week'].isin([4,5])]\nweekend = df[df['day_of_week'].isin([4,5])]\n\nfor day, value in [['Friday', fri], ['Saturday', sat], ['weekday', weekday], ['weekend', weekend]]:\n    print('\\n '+ day +' Stats\\n') \n    display(value['Streams'].describe())\n","a73025b9":"plt.figure(figsize=(12,6), dpi=100)\nplt.title('Percent Distribution of Streams', fontsize=14)\nnp.log10(fri['Streams']).hist(alpha=0.25, density=True, bins=500)\nnp.log10(sat['Streams']).hist(alpha=0.25, density=True, bins=500)\n# np.log10(weekday['Streams']).hist(alpha=0.25, density=True, bins=500)\n# np.log10(weekend['Streams']).hist(alpha=0.25, density=True, bins=500)\nplt.legend(['Fri', 'Sat', 'weekday', 'weekend'])\nplt.xlabel('Log Base 10 of Streams', fontsize=14)\nplt.ylabel('%', rotation=0, fontsize=14)\nplt.show()","aab22674":"from scipy.stats import ttest_ind, ttest_1samp\n\n# Do a 1 sample ttest to compare friday, and saturday to the population mean\nprint('\\nMean Fri and mean Sat vs all')\nprint(100*'*')\nprint('Friday:', ttest_1samp(fri['Streams'], df.Streams.mean()))\nprint('Saturday:', ttest_1samp(sat['Streams'], df.Streams.mean()))\nprint()\nprint('\\nMean weekend and mean weekday vs all')\nprint(100*'*')\nprint('Weekend:', ttest_1samp(weekend['Streams'], df.Streams.mean()))\nprint('Weekday:', ttest_1samp(weekday['Streams'], df.Streams.mean()))\nprint()\n\n# Do a 2-sided ttest to compare dri and sat to weekends\nprint('\\nMean Fri and mean Sat vs weekend')\nprint(100*'*')\nprint('Friday:', ttest_ind(fri['Streams'], weekend.Streams))\nprint('Saturday:', ttest_ind(sat['Streams'], weekend.Streams))\nprint()\n\n# Do a 2-sided ttest to compare dri and sat to weekdays\nprint('\\nMean Fri and mean Sat vs weekday')\nprint(100*'*')\nprint('Friday:',ttest_ind(fri['Streams'], weekday.Streams))\nprint('Saturday:', ttest_ind(sat['Streams'], weekday.Streams))\nprint()\n\n# Do a 2-sided ttest to compare dri and sat to weekend\nprint('\\nMean fri vs saturday')\nprint(100*'*')\ndisplay(ttest_ind(fri['Streams'], sat['Streams']))\nprint()\n\n#Finally compare weekend and weekday\nprint('\\nMean weekend vs weekday')\nprint(100*'*')\ndisplay(ttest_ind(weekend['Streams'], weekday['Streams']))\n","6c396faa":"%%html\n\n<img src=\"https:\/\/drive.google.com\/uc?export=download&id=14rx25xgx_kEDWmbH-ghpoWDmLI86MQ7k\"\/>","b70a6fc8":"# import matplotlib as mpl\n\n# # Set font params through mpl\n# mpl.rcParams['font.fantasy'] = \"xkcd\"\n# mpl.rcParams['font.weight'] = 'bold'\n\n# # Use plt style \n# plt.style.use('fivethirtyeight')\n\n# # Create figure object, and plot axes on top \n# fig, ax = plt.subplots(1, 1, figsize=(6,3), dpi=100)\n# fig.suptitle('2017 Spotify Monthly Global Stream Totals', fontsize=16, ha='center', color='black', fontweight='bold')\n\n# # Aggregate sums of streams by month\n# sums = df[df['Date'] < '2018-01-01'].groupby(['month'])['Streams'].agg(np.sum)\n\n# # Set axes object equal to a seaborn line plot of the sums\n# ax = sns.lineplot(data=sums, color=\"#e0dbd1\",dashes=True)\n\n# # Create a list of values and labels and add Styles for x and y ticks\n# plt.yticks(np.arange(1.2*10**10,(1.8*10**10), .2*10**10), ['1.2B', '1.4B', '1.6B'], fontsize=12)\n# plt.xticks(np.arange(12), ['Jan','Feb','Mar','Apr','May','Jun','Jul','Aug', 'Sep', 'Oct', 'Nov', 'Dec'], fontsize=11)\n\n# # Set tick params for both axes\n# ax.tick_params(colors='black', rotation=0, \n#                grid_color='#e0dbd1', grid_alpha=0.5)\n# ax.grid(which='major', axis='both', linestyle='--')\n\n# # figure background color\n# fig.patch.set_facecolor('#6AE368')\n\n# # axis foreground color\n# ax.set_facecolor('#080034')\n\n# # axis Border color\n# spine_color = 'sienna'\n# for pos in ['top', 'bottom', 'left', 'right']:\n#     ax.spines[pos].set_color(spine_color)\n\n# plt.show()\n\n# # Reset matplotlib params\n# mpl.rcParams.update(mpl.rcParamsDefault)","46ce3608":"df.Artist.isna().value_counts()","4d137018":"# Validate all artists and track names are the same missing\n(df['Artist'].isna() == df['Track Name'].isna()).all()","0105463c":"# drop null rows\ndf = df.dropna(axis=0)\n\n# Use 2017 data\n# df = df[df['Date']< '2018']","ebcd755b":"print(format(len(df.URL.unique()), ','), \"Unique URLs\")","925eb3f7":"print(format(len(df['Artist'].str.cat(others=df['Track Name'], sep=' - ').unique()), ','), \"unique track names\")","f3ef05ae":"print(format(len(df.Artist.unique()), ','), \"Unique Artists\")","526baa8d":"print(len(df.Region.unique()), \"Regions\")","c6ec904d":"# Create a series with the track string\ndf['title'] = df['Artist'].str.cat(others=df['Track Name'], sep=' - ')","c9c97d42":"df.Region.value_counts()[df.Region.value_counts()==df.Region.value_counts().loc['us']]","dc56f13d":"print(df.Region.value_counts().loc[:'global'].value_counts().sum(),\n      \"countries have close to 72,000\")","3a79b0a1":"plt.style.use('fivethirtyeight')\nfig, ax = plt.subplots(1, 1, figsize=(6,8), dpi=100)\nax = df.Region.value_counts().loc['global':].plot.barh()\nax.xaxis.set_tick_params(labeltop=True)\n\nfig.suptitle('Streaming count by Region', fontsize=18, ha='center')\nplt.show()","50d418a6":"df1 = df.copy()","fd403fb5":"df = df[df.Region=='us']","ea8f3cb1":"plt.style.use('dark_background')\nfig, ax = plt.subplots(1, 1, figsize=(5,6), dpi=100)\nax = df[df.Position==1].title.value_counts()[:15].plot(kind='barh', colormap='Pastel2')\nfig.suptitle('Frequency of Number 1 Appearances on Spotify\\'s 2017 U.S. top 200 Streaming', fontsize=18, ha='center')\nax.tick_params(direction='out', length=6, width=2, colors='lightgreen',\n               grid_color='lightgreen', grid_alpha=0.5)\n# Grid Color\nax.tick_params(colors='lightgreen',\n               grid_color='lightgreen', grid_alpha=0.5)\nax.grid(which='major', axis='both', linestyle='--')\n\n# plt.savefig('..\/Desktop\/spotty2.png', bbox_inches='tight')\nplt.show()","8721f0e7":"df[(df.title=='Post Malone - rockstar')]['Date'].min()","081db2e0":"df[(df.title=='Post Malone - rockstar')&(df.Date == '2017-09-15')]","a6775f11":"display(df[(df.title=='Post Malone - rockstar')].sort_values(by='Streams', ascending=False).head(1))\ndisplay(df[(df.title=='Post Malone - rockstar')].sort_values(by='Streams', ascending=True).head(1))","7237027d":"df[(df.title=='Post Malone - rockstar')]['Position'].value_counts()","eb263c18":"df[(df.title=='Post Malone - rockstar') & (df['Position'] > 1)]","4894e1fc":"# reformat \"1000\" to \"1E4\"\n# pd.options.display.float_format = '{:.2E}'.format","229de5be":"# format Sci-Notation to \"1E4\" to \"1,000\" for display \npd.options.display.float_format = '{:,.0f}'.format\n\ngrouped = df[df.Artist=='Post Malone'].groupby(['Track Name'])\n\ngrouped['Streams'].describe().sort_values(by='mean', ascending=False)","eb9f8692":"plt.style.use('dark_background')\npd.options.display.float_format = '{:,.0f}'.format\ncolors = ['#191970','#001CF0','#0038E2','#0055D4','#0071C6','#008DB8','#00AAAA','#00C69C','#00E28E','#00FF80',]\nexplode = [0.7,0.5,0.3,0,0,0,0,0,.25]\n\nplt.title('Post Malone\\'s Top Songs by Total Streams from 2017', fontsize=18)\ndf[df['Artist'] == 'Post Malone'].groupby('Track Name').agg(np.sum)['Streams'].sort_values().plot(kind='pie', colors=colors,\n                explode=explode,\n                  figsize=(6, 6),\n                  autopct='%0.0f%%',\n                  shadow=False)\nplt.ylabel('')\nplt.show()\n","e0081d1e":"df[(df.Artist=='Post Malone')&(df['Track Name'].isin(['Congratulations', 'rockstar']))].groupby('Track Name')['Streams'].agg([np.sum, np.mean, np.median])","48c8f044":"df[(df.Artist=='Post Malone')&(df['Track Name'].str.contains(r'Congratulations'))].groupby('Track Name')['Streams'].describe()","75f4c4e0":"df[(df.Artist=='Post Malone')&(df['Track Name'].isin(['Congratulations', 'rockstar', 'Congratulations - Remix']))].groupby('Track Name')['Streams'].agg([np.sum, np.mean, np.median])","ab8f88aa":"# set congratuations, rockstar, and all Post Malone songs\ncon = df[(df.Artist=='Post Malone')&(df['Track Name'].str.contains(r'Congratulations'))]\nroc = df[(df.Artist=='Post Malone')&(df['Track Name']=='rockstar')]\npos = df[(df.Artist=='Post Malone')]\n\ncon_roc = df[(df.Artist=='Post Malone')&((df['Track Name'].str.contains(r'Congratulations'))|(df['Track Name']=='rockstar'))]\nno_cr = df[(df.Artist=='Post Malone')&~((df['Track Name'].str.contains(r'Congratulations'))|(df['Track Name']=='rockstar'))]","11e4adee":"print('Congratulations Stats', '\\n'+100*'*')\ndisplay(con.Streams.describe())\nprint('rockstar Stats', '\\n'+100*'*')\ndisplay(roc.Streams.describe())\nprint('Congrats or rockstar', '\\n'+100*'*')\ndisplay(con_roc.Streams.describe())\nprint('not congrats or rockstar', '\\n'+100*'*')\ndisplay(no_cr.Streams.describe())\nprint('Post Malone Stats', '\\n'+100*'*')\ndisplay(pos.Streams.describe())","d592189b":"plt.style.use('seaborn')\nplt.figure(figsize=(7,5))\nplt.style.use('seaborn')\nsns.boxplot(data=df[df.Artist=='Post Malone'], x='Streams', y='Track Name', palette='Oranges')\nplt.xticks(np.arange(10**6, 4*10**6, 10**6), ['1 Million', '2 Million', '3 Million'])\nplt.title('Distribution of Post Malone Songs')\nplt.show()","896d9530":"from scipy.stats import norm\n\nfig = plt.figure(figsize=(12,6), dpi=100)\nfig.suptitle('Normalized Stream Distribution')\n\nax = plt.subplot(211)\nax = sns.distplot(roc.loc[:,'Streams'], bins=30, kde=False)\nax = sns.distplot(con.loc[:,'Streams'], bins=30, kde=False)\nax = plt.legend(['rockstar', 'congratulations'])\n\nax1 = plt.subplot(212)\nax1 = sns.distplot(np.log10(con_roc.loc[:,'Streams']), bins=20, kde=True)\nax1 = sns.distplot(np.log10(no_cr.loc[:,'Streams']), bins=20, kde=True)\nax1 = plt.legend(['rockstar & congratulations', 'not rock or cong'])\nax1 = plt.xlabel('Log Base-10 Streams')\nplt.show()","2d8dae49":"from scipy.stats import ttest_ind, ttest_1samp\n\n# Do a 1 sample ttest to compare rockstar, and congratulations to the population mean\nprint('\\nMean rockstar and congrats vs all')\nprint(100*'-')\nprint('rockstar:', ttest_1samp(roc['Streams'], pos.Streams.mean()))\nprint('Congratulations:', ttest_1samp(con['Streams'], pos.Streams.mean()))\nprint()\nprint('\\nMean rockstar and congrats vs all')\nprint(100*'-')\nprint('conroc:', ttest_1samp(con_roc['Streams'], pos.Streams.mean()))\nprint('no_cr:', ttest_1samp(no_cr['Streams'], pos.Streams.mean()))\nprint()\n\nprint('\\nMean Rockstar vs Congratulations')\nprint(100*'-')\ndisplay(ttest_ind(roc['Streams'], con['Streams'], equal_var=False))\nprint()\n\nprint('\\nMean con_roc vs no_cr')\nprint(100*'-')\ndisplay(ttest_ind(con_roc['Streams'], no_cr['Streams'], equal_var=False))\n","e71036f0":"plt.title('Sqrt Distribution of positions for Post Malone')\nplt.style.use('seaborn')\nnp.sqrt(df[df.Artist=='Post Malone'].Position).plot.hist(density=True)\nplt.show()","3fe1b27e":"print(\"highest positions on top 200 by track appearance\")\ndisplay(df[(df.Artist=='Post Malone')].groupby('Track Name').agg(np.min).sort_values(by='Streams', ascending=False))\nprint(\"lowest positions on top 200 by track appearance\")\ndisplay(df[(df.Artist=='Post Malone')].groupby('Track Name').agg(np.max).sort_values(by='Streams', ascending=False))\nprint(\"lowest positions on top 200 by track appearance\")\ndisplay(df[(df.Artist=='Post Malone')].groupby('Track Name').agg(np.median).sort_values(by='Streams', ascending=False))\nprint(\"summary stats of positions on top 200 by track appearance\")\ndisplay(df[(df.Artist=='Post Malone')].groupby('Track Name')['Position'].describe())","6841167a":"%%html\n\n<img src=\"https:\/\/drive.google.com\/uc?export=download&id=15m0ccOm_Xz15BMUsllNFVTkdrDaJ_0CJ\"\/>","d5bdeeab":"# plt.style.use('seaborn-whitegrid')\n# fig = plt.figure(figsize=(15,15), dpi=100)\n# ax = plt.subplot(211)\n# # ax = sns.lineplot(x='Date', y='Streams', hue='Track Name', data=df[df.Artist=='Post Malone'], palette=\"Paired\")\n\n# # ax1 = plt.subplot(212)\n\n# ax = sns.lineplot(x='Date', y='Position', hue='Track Name', data=df[(df.Artist=='Post Malone')], palette=\"Paired\", legend='brief',)\n# ax = plt.gca().invert_yaxis()\n\n\n# # Place a legend to the right of this smaller subplot.\n# plt.legend(bbox_to_anchor=(1.05, 1), loc=2, borderaxespad=0.)\n\n# plt.show()\n","d10dc87e":"sns.set_style('darkgrid')\nax = df[(df['Track Name']=='White Iverson')].plot(x='Date', y='Position', figsize=(15,6))\nax = plt.gca().invert_yaxis()\nplt.title(\"Distribution of position for Post Malone White Iverson\")\nplt.show()","3648b20e":"df.Artist.value_counts().head(20).plot(kind='barh')\nplt.title('2017 Spotify Top 200 List Appearance Frequency')\nplt.show()","b752bdeb":"from scipy.stats import mode\n\nax = df.groupby(['Date']).agg(np.mean)['Streams'].plot(x='Date', y='Streams', figsize=(15,6))\nax = df.groupby(['Date']).agg(np.median)['Streams'].plot(x='Date', y='Streams', figsize=(15,6))\nplt.legend(['Mean', 'Median'])\nplt.title('Average Streams by Date')\nplt.show()","e350aaa6":"print(format(df.shape[0], ','), \"Song-Days\")","bafd7283":"print(format(len(df.Artist.unique()), ','), \"Unique-artists\")","55f74560":"print(len(df.Region.unique()), \"Unique Regions\")","2c9ba3cf":"streams_sum = df.groupby('Artist').agg(np.sum).sort_values(by='Streams', ascending=False)","7e1ba381":"import seaborn as sns\nstm = streams_sum.head(15)\n\nplt.style.use('dark_background')\nfig, ax = plt.subplots(1, 1, figsize=(6,9), dpi=100)\nfig.suptitle('Spotify\\'s Top 15 Most Streamed Artists\\n in the U.S. in 2017', fontsize=24, color='#6ae890', ha='center')\nx = stm.Streams\ny = stm.index\nax = sns.barplot(y=y, x=x, orient='h', palette=\"Greens\", alpha=0.8)\nplt.ylabel('')\nplt.xlabel('')\nax.tick_params(axis='x', direction='out', length=6, width=2, colors='#6ae890',\n               grid_color='lightgreen', grid_alpha=0.5)\n\nplt.xticks(np.arange((5*10**8),(1.2*10**9), (5*10**8)), ['500 Million', '1 Billion'], rotation=0, fontsize=18)\nax.tick_params(axis='y', colors='white')\nfor spine in ['top', 'bottom', 'left', 'right']:\n    ax.spines[spine].set_color('#6ae890')\n\nax.set_yticklabels(y, fontsize=18)\n\n\n# plt.savefig('..\/Desktop\/top_artists.png', bbox_inches='tight')\nplt.show()","7aefc294":"import matplotlib\n\nstm = df.groupby(['title']).sum().sort_values(by='Streams', ascending=False).head(10)\n\nplt.style.use('dark_background')\nfig, ax = plt.subplots(1, 1, figsize=(4,6), dpi=100)\nfig.suptitle('Spotify\\'s 2017\\n Top 10 Most Streamed Songs in the U.S.', fontsize=18, color='#6ae890', ha='center')\nx = stm.Streams\ny = stm.index\nax = sns.barplot(y=y, x=x, orient='h', palette=\"Greens\", alpha=0.8)\nplt.ylabel('')\nplt.xlabel('')\nax.tick_params(axis='x', direction='out', length=6, width=2, colors='#6ae890',\n               grid_color='lightgreen', grid_alpha=0.5)\n\nplt.xticks(np.arange(10**8,(5*10**8), (10**8)), ['100M', '200M', '300M', '400M'], rotation=0, fontsize=14)\nax.tick_params(axis='y', colors='white')\nfor spine in ['top', 'bottom', 'left', 'right']:\n    ax.spines[spine].set_color('#6ae890')\n\nax.set_yticklabels(y, fontsize=14)\n\n\n# plt.savefig('..\/Desktop\/top_songs.png', bbox_inches='tight')\nplt.show()\n","73a14e41":"s = df.groupby('Artist').agg(np.sum)['Streams'].sort_values(ascending=False).head(5).values.tolist()\nn = df.groupby('Artist').agg(np.sum)['Streams'].sort_values(ascending=False).head(5).keys().tolist()\n\ns1 = df1.groupby('Artist').agg(np.sum)['Streams'].sort_values(ascending=False).head(5).values.tolist()\nn1 = df1.groupby('Artist').agg(np.sum)['Streams'].sort_values(ascending=False).head(5).keys().tolist()","ddc1bff2":"# import plotly.plotly as py\n# import plotly.graph_objs as go\n\n# fig = {\n#   \"data\": [\n#     {\n#       \"values\": s,\n#       \"labels\": n,\n#       \"domain\": {\"x\": [0, .48]},\n#       \"name\": \"\",\n#       \"hoverinfo\":\"label+percent+name\",\n#       \"hole\": .4,\n#       \"type\": \"pie\"\n#     },\n#     {\n#       \"values\": s1,\n#       \"labels\": n1,\n# #       \"text\":[\"Streams\"],\n#       \"textposition\":\"inside\",\n#       \"domain\": {\"x\": [.52, 1]},\n#       \"name\": \"\",\n#       \"hoverinfo\":\"label+percent+name\",\n#       \"hole\": .4,\n#       \"type\": \"pie\"\n#     }],\n#   \"layout\": {\n#         \"title\":\"U.S. vs. Global Stream Share\",\n#         \"annotations\": [\n#             {\n#                 \"font\": {\n#                     \"size\": 20\n#                 },\n#                 \"showarrow\": False,\n#                 \"text\": \"U.S.\",\n#                 \"x\": 0.20,\n#                 \"y\": 0.5\n#             },\n#             {\n#                 \"font\": {\n#                     \"size\": 20\n#                 },\n#                 \"showarrow\": False,\n#                 \"text\": \"Global\",\n#                 \"x\": 0.8,\n#                 \"y\": 0.5\n#             }\n#         ]\n#     }\n# }\n# py.iplot(fig, filename='donut')","9bf52910":"%%html\n<div>\n    <a href=\"https:\/\/plot.ly\/~Majic\/15\/?share_key=0tbizWclrnJUFv9uA7jzXS\" target=\"_blank\" title=\"donut\" style=\"display: block; text-align: center;\"><img src=\"https:\/\/plot.ly\/~Majic\/15.png?share_key=0tbizWclrnJUFv9uA7jzXS\" alt=\"donut\" style=\"max-width: 100%;width: 600px;\"  width=\"600\" onerror=\"this.onerror=null;this.src='https:\/\/plot.ly\/404.png';\" \/><\/a>\n    <script data-plotly=\"Majic:15\" sharekey-plotly=\"0tbizWclrnJUFv9uA7jzXS\" src=\"https:\/\/plot.ly\/embed.js\" async><\/script>\n<\/div>\n","45119678":"# df.title = df.title.str.replace(r'$', '\\$')\n# df.Artist = df.Artist.str.replace(r'$', '\\$')\n# plt.style.use('default')\n# plt.figure(dpi=150)\n# df.groupby('title').agg(np.sum)['Streams'].sort_values(ascending=False)[:500].plot(kind='barh', figsize=(5, 100))\n# ax.xaxis.set_tick_params(labeltop=True)\n# plt.title('2017 Spotify U.S. Top 1,000 Artists by Streams')\n# plt.show()","d6a49608":"# plt.style.use('default')\n# plt.figure(dpi=150)\n# df.groupby('Artist').agg(np.sum)['Streams'].sort_values()[:1000].plot(kind='barh', figsize=(5, 100))\n# ax.xaxis.set_tick_params(labeltop=True)\n# plt.title('2017 Spotify U.S. Top 1,000 Artists by Streams')\n# plt.show()","7a218624":"# plt.style.use('default')\n# plt.figure(dpi=100)\n# df.Artist.value_counts()[:100].plot(kind='bar', figsize=(20, 10))\n\n# plt.title('Top 100 U.S. Spotify Streaming Appearances by Artist')\n# plt.show()","2ccb0cf4":"# plt.style.use('fivethirtyeight')\n# plt.figure(dpi=100)\n# df1.groupby('Artist')['Streams'].sum().sort_values(ascending=False)[:100].plot(kind='bar', figsize=(20, 10))\n\n# plt.title('Top 100 Global Spotify Streaming Appearances by Artist')\n# plt.show()","37b6701f":"# df[df.Artist.isin(df.Artist.value_counts()[:5].keys())].groupby(['Date', 'Artist', 'Position']).median()","50ff2ffe":"# def printTracks(artist):\n#     print(\"\\n\"+artist+\" had\", len(df[df['Artist']==artist]['Track Name'].unique()), \"unique songs:\")\n#     print(\"\\n\",df[df['Artist']==artist]['Track Name'].unique())\n#     print(\"\\ntotal streams:\", format(df[df['Artist']==artist]['Streams'].sum(), \",\"))\n#     print(\"*\"*100)\n\n# for artist in df.Artist.value_counts()[:10].keys().tolist():\n#     printTracks(artist)","aed56fc7":"plt.style.use(\"seaborn\")\ndf.groupby('Artist').agg([np.mean, np.median, np.std])['Position'].sort_values(by=['std'], ascending=False)[:20].plot(kind='barh')\nplt.title('Top 20 Streaming artists sorted by Positional Variance')\nplt.show()","c3beb52c":"fig = plt.figure(figsize=(10,10))\nfig = plt.suptitle('2017 Spotify Daily Songs Distribution', fontsize=18)\nax = plt.subplot(211)\ndata = df[df.title.isin(df.groupby('title').agg([np.sum])['Streams'].sort_values(by='sum', ascending=False).head(10).index.tolist())]\nax = sns.boxplot(x='Streams', y='title', data=data, palette='Pastel2')\nax = plt.title('Sorted by Total Streams')\nax = plt.ylabel(''), plt.xlabel('')\nax = plt.xticks(np.arange(0,5*10**6,10**6), ['0', '1 Million', '2 Million', '3 Million', '4 Million'])\n\n\nplt.subplot(212)\ndata = df[df.title.isin(df.groupby('title').agg([np.median])['Position'].sort_values(by='median').head(10).index.tolist())]\nax2 = sns.boxplot(x='Position', y='title', data=data, palette='Pastel1')\nax2 = plt.title('Sorted by Median Position')\nax2 = plt.gca().invert_yaxis()\nax2 = plt.ylabel('')\n# plt.subplot(313)\n# data = df[df.Artist.isin(df.groupby('Artist').agg([np.std])['Position'].sort_values(by='std', ascending=True).head(10).index.tolist())]\n# ax3 = sns.boxplot(x='Artist', y='Position', data=data, palette='cividis')\nplt.show()","053ac2b9":"df[df.title=='Lil Pump - Gucci Gang'].mean()","75709f4e":"df[df.title=='Kendrick Lamar - HUMBLE.'].mean()","503f664a":"print(df[df.title=='Lil Pump - Gucci Gang'].std())\nprint()\nprint(df[df.title=='Kendrick Lamar - HUMBLE.'].std())","beb729d1":"plt.figure(figsize=(4,4))\nsns.distplot(np.log(df['Streams'][df.title=='Kendrick Lamar - HUMBLE.']), kde=True, color='orange')\nsns.distplot(np.log(df['Streams'][df.title=='Lil Pump - Gucci Gang']), kde=True, color='black')\n\nplt.xlabel('Log Streams')\nplt.legend(['HUMBLE.', 'Gucci Gang'])\n\nplt.show()","1ed7c8eb":"ttest_ind(df['Streams'][df.title=='Lil Pump - Gucci Gang'],\n         df['Streams'][df.title=='Kendrick Lamar - HUMBLE.'], equal_var=False)","23c54bf3":"def artist_box(artists):\n    my_count = 0;\n    for artist in artists:\n        plt.figure(figsize=(10,len(df[df.Artist==artist]['Track Name'].unique())\/3))\n#         my_count += 1\n#         plt.subplot(2,1,my_count)\n        ax = sns.boxplot(data=df[df.Artist==artist], y='Track Name', x='Streams', palette='Pastel1')\n        ax = plt.xticks(np.arange(0,3*10**6,10**6), ['0', '1 Million', '2 Million'])\n        plt.title('Distribution of '+artist+' Songs')\n    plt.show()\n    \n\n\nartist_box(['Ed Sheeran', 'Future'])\n","79a70aba":"from scipy.stats import ttest_ind, ttest_1samp\n\ndef make_stats(titles, metric='Streams', df=df):\n    sample1 = df[df.title==titles[0]][metric]\n    sample2 = df[df.title==titles[1]][metric]\n    sample3 = df[df.title.isin(titles)][metric]\n    sample4 = df[~df.title.isin(titles)][metric]\n    \n    print(titles[0], ': stats', '\\n'+100*'*')\n    display(sample1.describe())\n    print(titles[1], ': stats', '\\n'+100*'*')\n    display(sample2.describe())\n    print(titles[0], 'and', titles[1], ': stats', '\\n'+100*'*')\n    display(sample3.describe())\n    print('not', titles[0], 'or', titles[1], ': stats', '\\n'+100*'*')\n    display(sample4.describe())\n    \n    artist1 = titles[0].partition(' - ')[0]\n    artist2 = titles[1].partition(' - ')[0]\n    \n    print(artist1, 'stats', '\\n'+100*'*')\n    display(df[df.Artist==artist1][metric].describe())\n    print(artist2, 'stats', '\\n'+100*'*')\n    display(df[df.Artist==artist2][metric].describe())\n    \n\n    # Do a 1 sample ttest to compare friday, and saturday to the population mean\n    print('\\nMean', titles[0], 'vs all')\n    print(100*'-')\n    print(titles[0], ttest_1samp(sample1, df[metric].mean()))\n    \n    print('\\nMean', titles[1], 'vs all')\n    print(100*'-')\n    print(titles[1], ttest_1samp(sample2, df[metric].mean()))\n    print()\n    \n    print('\\nMean', titles[0], 'and', titles[1], 'vs all')\n    print(100*'-')\n    print(ttest_1samp(sample3, df[metric].mean()))\n    \n    print('\\nMean', 'not', titles[0], 'and', titles[1], 'vs all')\n    print(ttest_1samp(sample4, df[metric].mean()))\n    print()\n\n    if np.abs((sample1.std() - sample2.std())\/(sample1.max() - sample2.max())) > .1:\n        equal_var=False\n    else:\n        equal_var=True\n        \n    print('\\nMean', titles[0], 'vs', titles[1])\n    print(100*'-')\n    display(ttest_ind(sample1, sample2, equal_var=equal_var))\n    print()\n    \n    if np.abs((sample3.std() - sample4.std())\/(sample1.max() - sample2.max())) > .1:\n        equal_var=False\n    else:\n        equal_var=True\n        \n    print('\\nMean both vs none')\n    print(100*'-')\n    display(ttest_ind(sample3, sample4, equal_var=equal_var))","6f046c21":"titles = ['Ed Sheeran - Shape of You', 'Future - Mask Off']\nmake_stats(titles, metric='Streams')","27c99be1":"fig = plt.figure(figsize=(15,10))\nfig = plt.suptitle('2017 Spotify Top 10 Artist Streams Distribution', fontsize=18)\n\nax = plt.subplot(211)\ndata = df[df.Artist.isin(df.groupby('Artist').agg([np.sum])['Streams'].sort_values(by='sum', ascending=False).head(10).index.tolist())]\n\nax = sns.boxplot(x='Streams', y='Artist', data=data, palette='Pastel2'),\nplt.title('Sorted by Total Streams'),\nplt.ylabel(''), \nplt.xlabel(''), \nplt.xticks(np.arange(0,5*10**6,10**6), ['0', '1 Million', '2 Million', '3 Million', '4 Million'])\n\n\nplt.subplot(212)\ndata = df[df.Artist.isin(df.groupby('Artist').agg([np.median])['Position'].sort_values(by='median', ascending=True).head(10).index.tolist())]\n\nax2 = sns.boxplot(x='Position', y='Artist', data=data, palette='Pastel1'),\nplt.title('Sorted by Median Position'),\nplt.gca().invert_yaxis(),\nax2 = plt.ylabel('')\n\nplt.show()","837d26f3":"print('Largest Variance', '*'*100)\ndisplay(df.groupby('Artist').agg([np.mean, np.median, np.std])['Streams'].sort_values(by=['std'], ascending=False).head(1))\nprint('\\n', 'Smallest Variance', '*'*100)\ndisplay(df.groupby('Artist').agg([np.mean, np.median, np.std])['Streams'].sort_values(by=['std'], ascending=False).tail(1))","3c4d559e":"print('Largest Variance', '*'*100)\ndisplay(df.groupby('Artist').agg([np.mean, np.median, np.std])['Position'].sort_values(by=['std'], ascending=False).head(1))\nprint('Smallest Variance', '*'*100)\ndisplay(df.groupby('Artist').agg([np.mean, np.median, np.std])['Position'].sort_values(by=['std'], ascending=False).tail(1))","c991ac7b":"#Future work","c7b90090":"Drake and Kendrick both hit over 1 Billion Streams in the U.S.","073c4c0f":"## Gucci Gang has significantly lower mean streams than HUMBLE.","96ee1779":"## Look at the mean Streams of Ed Sheeran - Shape of Love and Future - Mask Off","065f62a0":"## Cult Classics seem to dominate in terms of variance, followed by new artists","6d15102e":"# Spotify's Worldwide Daily Song Ranking\n### The 200 daily most streamed songs in 53 countries\ndataset can be found here:\n    https:\/\/www.kaggle.com\/edumucelli\/spotifys-worldwide-daily-song-ranking\n\n","d1fa548a":"## David Guetta has both the highest median position and the 2nd largest distribution\n### Mariah Carey has the largest distribution of Position among the top 10 artists.\n\nPositional distribution appears fairly consistent across the top 10 median artists","2d25df41":"## rockstar's worst days were Christmas Eve and Christmas Day, followed by it's debut on Sept 15, 2017","1307b506":"# Post Malone - rockstar was released on Friday, September 15, 2017\n    It debuted at number 2 with 1,551,995 Streams","038e1316":"## Look at sum of streams for each artist","5f020889":"A group of regions that includes the ```'us'``` contain ```72,384``` tracks","7951592a":"## Blue \u00d6yster Cult has the largest Position variance\nmansionz appears to have both the smallest positional variance and smallest stream variance which is n\/a as it only took one position, 196.","6d767fae":"Which artist has the smallest and largest stream and Position variance?","1ff27266":"## What day of the week, and what months experience the most streams?","b2993ecd":"include congratulations remix in analysis","9c1a27f6":"## Kendrick Lamar has the largest Stream variance.","2440b5d0":"## Look at the time series plot of the total streams","76294c09":"## It appears that nearly all regions with the exception of ```\"cz\":\"lu\"``` have the nearly the same number of songs\n    Let's take a look at the us region","b6ee94a1":"## Post Malone - Rockstar has highest mean streams\nbut Kendrick Lamar - HUMBLE. has the widest distribution of streams","127e5c09":"## Which days, and what position did rockstar take on the days it was not number 1?","9957c146":"## Get the sum of streams for each artist\nTake a look at mean vs median for each artist","7fe1b2b2":"## Which artists have the most appearances?","c0cd73a9":"## Which days did rockstar get the most streams while at number 1?\n    and which was rockstar's worst day at number 1?","5dc4b820":"## The remaining stream count by region is below","0e7baf18":"## ~99.98% of the data contains no null track names\n* (or otherwise contains a null Artist or Track Name)\n* Approximately 657 rows will be pulled from the data as there is no reasonable way to impute this text","783015e0":"## Friday mean streams have 3.5 standard errors (SE) difference from Saturday mean\n    and 13 SE difference from the weekday mean\n## Saturday has 5.5 SE differnce from the average day's mean\n    and 8.5 SE difference from the weekday mean\n    \n### Weekend mean is 14 SE different from the weekday\n\n- So Weekends stream more than weekdays\n- Fridays stream more than Saturdays","9ff42560":"## What is the artist share of streams in the U.S. and Globally","9e45c106":"### Data was collected over the course of 373 days\n    so there is some overlap for the month of January","83c61c88":"## Furthermore, ~97.6% of the streams sum is actually from 2017\nThe overlap comprising about 2.5%","8a2d9384":"## Which tracks have the most number 1's?","391fac3b":"## What are the highest and lowest positions for each Post Malone Song?","3c8b3375":"## which has more mean streams congratulations or rockstar?","d257d3ed":"rockstar spent 114\/117 days at number 1 between Friday September 29, and Sunday January 7","9b48e5db":"## Look at mean stream and position distribution of Ed Sheeran and Future","e69d0e88":"## How many unique tracks and artists are on this list?\n- try counting unique URLs\n- Try concatenating artist and track name","e122b629":"## The mean is always higher, which suggests that median might be a better measure of central tendency\n    The median streams apear to be lowest at the beginning of the year, and highest around Christmas","ab316a94":"## From these pie charts we can see that the share of hiphop is larger in the U.S.\n### and the share of electronic dance music is larger globally.\n","dcc2054c":"# Future work.\nget genre data, predict positions of genres, predict a genre dominance at a particular time","1aed3ee2":"### Each row represents a Position ```(1-200)```, Track Name, Artist, Stream Count, URL, Date, and Region","a7e8b049":"## Compare variance for Gucci Gang and HUMBLE.","3e4dfe2e":"## what are the top 10 songs by stream count?","4b8fc4b4":"### Totals appear pretty consistent throughout the week\n## What's a bigger party night, Friday? or Saturday?","787e118f":"# Is Kendrick Lamar the most viral artist of 2017?\n\nShort answer is yes.\n","b2c8efbb":"## Shape of You and Mask Off are not significantly different\n\n### The mean songs containing future or ed sheeran were an average 22 SE in Streams higher than the average song\n\nAlthough Ed sheeran has significantly higher total, mean, and median streams,  his and Future's average streams are not significantly different.","f77024b6":"## Which songs have the most Positional variance?","307a2ced":"## Means and medians appear similar","b6456471":"## rockstar and Congratulations had the greatest difference of 30 SE\n    So Rockstar was significantly hotter in terms of mean streams","36c41051":"## Drop 657 tracks that have no Artist or Track Name","36aaa5e7":"## Look at monthly totals for the year","daf91fab":"## Which artists accumulated over 1 Billion Streams in the U.S. in 2017?"}}