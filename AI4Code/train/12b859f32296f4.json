{"cell_type":{"fd0592ea":"code","d0b6ba38":"code","d5443f96":"code","01159d05":"code","b97b877d":"code","f5ae5524":"code","2425a753":"code","3768e80c":"code","95cccc9a":"code","79648465":"code","3afc7a21":"code","b123a3c8":"code","f08ee616":"code","442b4131":"code","47d99bc7":"code","606566e7":"code","049a2021":"code","4385e135":"code","891dd8a9":"code","08e0ff10":"code","479ee607":"code","13066359":"code","726069f0":"code","8234b295":"code","087c9441":"code","7c7755e6":"code","13a31a31":"code","d5d87a2b":"code","51b2fde6":"code","ea6b734b":"code","a18a2825":"code","9ec711ab":"code","c4eb79fb":"code","88d4c050":"code","2a265ee6":"code","0c59b168":"code","ff83f884":"code","77b22802":"code","11852638":"code","70266fba":"code","8f8db908":"code","ee11c542":"code","498a5578":"code","7d46dca0":"code","57027412":"code","cc4a3d61":"code","50329111":"code","b111fc29":"code","1745993f":"code","880d1bf2":"code","fa0b268a":"code","0f29b4af":"code","526f1307":"code","0020c7fc":"code","f13a181a":"code","a1ed9722":"code","c2b847d8":"code","e3590090":"code","b2bcf052":"code","faf6e8c0":"code","0e3a49c1":"code","6ae4add0":"code","af421375":"code","0a40708d":"code","ac78f905":"code","e6e7674f":"code","cbb40e13":"code","c8cf0d76":"code","007009fa":"code","c3613785":"code","f5d17413":"code","faff5879":"code","66c5ba25":"code","a6d42817":"code","c33e0d04":"code","325e285f":"code","c6d730ae":"code","22e04101":"code","bf684b35":"code","e2ab9cf7":"code","80add7c7":"code","14e11cc0":"code","0ad52fae":"code","394ae7b4":"code","22661ecf":"code","46807fe2":"code","4d920daa":"code","2af44c36":"code","5742a1c8":"code","4fe468af":"code","3f06ecfc":"code","6a6c1cdd":"code","b8113b6d":"code","01f22835":"code","619de83a":"code","ee149b53":"code","177035f2":"code","34c7187f":"code","973affb8":"code","9d84bff0":"code","ebb55626":"code","96215c89":"code","bf43f342":"code","a5e3fb3d":"code","d1fdae21":"code","60dbd490":"code","87830852":"code","17a9907c":"code","bd8a0d0f":"code","ab5bbd88":"code","ad40dbfd":"code","66229008":"code","97a5ea28":"code","1c6c0ffe":"code","a7bd86b2":"code","2e081bc5":"code","e44304c4":"code","35d73963":"code","6cdf3483":"code","122f7d5b":"code","00495e2c":"code","5f3bb9fb":"code","be750000":"code","3909960c":"code","4cc1144f":"code","28e52d05":"code","12600f57":"code","bc21b61a":"code","39712fa3":"code","820c8158":"code","319caa57":"markdown","b94d2ea5":"markdown","7a66e55c":"markdown","aa3a1b8f":"markdown","b7b4da45":"markdown","f71f7dd3":"markdown","a92fcca3":"markdown","2543bf3b":"markdown","7c0498aa":"markdown","6b255315":"markdown","923af289":"markdown","f3d77d6e":"markdown","82783873":"markdown","3b4e0d9f":"markdown","f55ee94c":"markdown","db9f5337":"markdown","e7abbe3f":"markdown","5b092f6e":"markdown","29263100":"markdown","06b5920e":"markdown","90a7638e":"markdown","8b2462b7":"markdown","d914d7dd":"markdown","a6b010ad":"markdown","bfd35b01":"markdown","835ef391":"markdown","5c5046db":"markdown","7295e297":"markdown","69a615b4":"markdown","04ca0b91":"markdown","117ef1f0":"markdown","4b11ff0e":"markdown","f4248561":"markdown","6fb1b6be":"markdown","8c749430":"markdown","08d708ce":"markdown","a070fdd2":"markdown","09d6b319":"markdown","a1998cc0":"markdown","d1574144":"markdown","63bc725f":"markdown","2809cff9":"markdown","5933ff22":"markdown","db21b921":"markdown","41fb6970":"markdown","abe89f99":"markdown","bfd598f8":"markdown","1f219674":"markdown","a9ca2d76":"markdown","f6e993d8":"markdown","02ae74a8":"markdown","162281b6":"markdown","2cd25d9f":"markdown"},"source":{"fd0592ea":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\n# import numpy as np # linear algebra\n# import pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\n# import os\n# for dirname, _, filenames in os.walk('\/kaggle\/input'):\n#     for filename in filenames:\n#         print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","d0b6ba38":"#!pip install pyforest\n\n# 1-Import Libraies\nimport numpy as np\nimport pandas as pd \nimport seaborn as sns\nimport matplotlib.pyplot as plt\nimport scipy.stats as stats\n%matplotlib inline\nimport statsmodels.api as sm\nimport statsmodels.formula.api as smf\nimport missingno as msno \n\nfrom sklearn.compose import make_column_transformer\n\n#Scaling\nfrom sklearn.preprocessing import scale \nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.preprocessing import PolynomialFeatures \nfrom sklearn.preprocessing import OneHotEncoder\nfrom sklearn.preprocessing import PowerTransformer \nfrom sklearn.preprocessing import MinMaxScaler\nfrom sklearn.preprocessing import RobustScaler\nfrom sklearn.model_selection import train_test_split\n\n\n#Importing plotly and cufflinks in offline mode\nimport cufflinks as cf\nimport plotly.io as pio\nimport plotly.express as px\nimport plotly.graph_objects as go\nimport plotly.figure_factory as ff\nimport plotly.offline\ncf.go_offline()\ncf.set_config_file(offline=False, world_readable=True)\n\n#Ignore Warnings\nimport warnings\nwarnings.filterwarnings(\"ignore\")\nwarnings.warn(\"this will not show\")\n\n#Figure&Display options\nplt.rcParams[\"figure.figsize\"] = (10,6)\npd.set_option('max_colwidth',200)\npd.set_option('display.max_rows', 1000)\npd.set_option('display.max_columns', 200)\npd.set_option('display.float_format', lambda x: '%.3f' % x)\n\n#!pip install termcolor\nimport colorama\nfrom colorama import Fore, Style  # maakes strings colored\nfrom termcolor import colored\n\nimport ipywidgets\nfrom ipywidgets import interact","d5443f96":"# To view summary information about the column\n\ndef first_looking(col):\n    print(\"column name    : \", col)\n    print(\"--------------------------------\")\n    print(\"per_of_nulls   : \", \"%\", round(df[col].isnull().sum()\/df.shape[0]*100, 2))\n    print(\"num_of_nulls   : \", df[col].isnull().sum())\n    print(\"num_of_uniques : \", df[col].nunique())\n    print(df[col].value_counts(dropna = False))","01159d05":"# Function for determining the number and percentages of missing values\n\ndef missing (df):\n    missing_number = df.isnull().sum().sort_values(ascending=False)\n    missing_percent = (df.isnull().sum()\/df.isnull().count()).sort_values(ascending=False)\n    missing_values = pd.concat([missing_number, missing_percent], axis=1, keys=['Missing_Number', 'Missing_Percent'])\n    return missing_values","b97b877d":"df = pd.read_csv(\"..\/input\/churn-modelling\/Churn_Modelling.csv\")","f5ae5524":"# df = pd.read_csv(\"Churn_Modelling.csv\")","2425a753":"df.head()","3768e80c":"df.tail()","95cccc9a":"df.sample(5)","79648465":"df.info()","3afc7a21":"df.shape","b123a3c8":"print(\"There is\", df.shape[0], \"observation and\", df.shape[1], \"columns in the dataset.\")","f08ee616":"df.duplicated().sum()","442b4131":"print(\"There is\", df.duplicated().sum(), \"duplicated observations in the dataset.\")","47d99bc7":"df.isna().sum().any()","606566e7":"missing(df)","049a2021":"df.nunique()","4385e135":"# to find how many unique values numerical features have\n\nfor col in df.select_dtypes(include=[np.number]).columns:\n  print(colored(f\"{col}\", 'green', attrs=['bold']), f\"feature has\", colored(f\"{df[col].nunique()}\", 'green', attrs=['bold']), f\"unique values.\")","891dd8a9":"# to find how many unique values object features have\n\nfor col in df.select_dtypes(include=\"object\").columns:\n  print(colored(f\"{col}\", 'green', attrs=['bold']), f\"feature has\", colored(f\"{df[col].nunique()}\", 'green', attrs=['bold']), f\"unique values.\")","08e0ff10":"df.describe().T","479ee607":"df.describe(include=object).T","13066359":"drop_columns = [\"RowNumber\", \"CustomerId\", \"Surname\"]\n\ndf.drop(drop_columns, axis = 1, inplace = True)","726069f0":"df.shape","8234b295":"first_looking(\"Exited\")","087c9441":"df[\"Exited\"].value_counts()\n\nsns.countplot(x = df[\"Exited\"], data = df)\nfor index,value in enumerate(df[\"Exited\"].value_counts()):\n     plt.text(index, value, f\"{value}\", ha=\"center\", va=\"bottom\", fontsize = 13)\n        \n","7c7755e6":"print(df[\"Exited\"].value_counts())\ndf[\"Exited\"].value_counts().plot(kind=\"pie\", autopct='%1.1f%%', figsize=(10,10));","13a31a31":"y = df['Exited']\nprint(f'Percentage of Exited-1: % {round(y.value_counts(normalize=True)[1]*100,2)} --> \\\n({y.value_counts()[1]} observations for Exited-1)\\nPercentage of Exited-0: % {round(y.value_counts(normalize=True)[0]*100,2)} --> ({y.value_counts()[0]} observations for Exited-0)')","d5d87a2b":"df['Exited'].describe()","51b2fde6":"df[df['Exited']==0].describe().T.style.background_gradient(subset=['mean','std','50%','count'], cmap='RdPu')","ea6b734b":"df[df['Exited']==1].describe().T.style.background_gradient(subset=['mean','std','50%','count'], cmap='RdPu')","a18a2825":"numerical= df.drop(['Exited'], axis=1).select_dtypes('number').columns\n\ncategorical = df.select_dtypes('object').columns\n\nprint(f'Numerical Columns:  {df[numerical].columns}')\nprint('\\n')\nprint(f'Categorical Columns: {df[categorical].columns}')","9ec711ab":"df[numerical].head().T","c4eb79fb":"df[numerical].describe().T.style.background_gradient(subset=['mean','std','50%','count'], cmap='RdPu')","88d4c050":"df[numerical].iplot(kind='histogram', subplots=True,bins=50)","2a265ee6":"for i in numerical:\n    df[i].iplot(kind=\"box\", title=i, boxpoints=\"all\", color='lightseagreen')","0c59b168":"sns.pairplot(df, hue=\"Exited\", corner=True);","ff83f884":"plt.figure(figsize=(12, 8))\nsns.heatmap (df.corr(), annot=True, fmt= '.2f', vmin=-1, vmax=1)\nplt.xticks(rotation=45);","77b22802":"df.corr()[\"Exited\"].sort_values().drop(\"Exited\").iplot(kind = \"barh\");","11852638":"df_temp = df.corr()\n\ncount = \"Done\"\nfeature =[]\ncollinear=[]\nfor col in df_temp.columns:\n    for i in df_temp.index:\n        if (df_temp[col][i]> .9 and df_temp[col][i] < 1) or (df_temp[col][i]< -.9 and df_temp[col][i] > -1) :\n                feature.append(col)\n                collinear.append(i)\n                print(Fore.RED + f\"\\033[1mmulticolinearity alert in between\\033[0m {col} - {i}\")\n        else:\n            print(f\"For {col} and {i}, there is NO multicollinearity problem\") \n\nprint(\"\\033[1mThe number of strong corelated features:\\033[0m\", count) ","70266fba":"px.histogram(df, x=df.CreditScore, color=\"Exited\", marginal=\"box\", hover_data=df.columns)","8f8db908":"px.scatter(df, x = \"CreditScore\", y = \"Age\", color = \"Exited\")","ee11c542":"px.histogram(df, x=df.Tenure, color=\"Exited\", marginal=\"box\", hover_data=df.columns)","498a5578":"px.scatter(df, x = \"Tenure\", y = \"Age\", color = \"Exited\")","7d46dca0":"px.histogram(df, x=df.Balance, color=\"Exited\", marginal=\"box\", hover_data=df.columns)","57027412":"px.scatter(df, x = \"Balance\", y = \"Age\", color = \"Exited\")","cc4a3d61":"pd.crosstab(df[\"NumOfProducts\"], df[\"Exited\"])","50329111":"px.histogram(df, x=df.NumOfProducts, color=\"Exited\", marginal=\"box\", hover_data=df.columns)","b111fc29":"px.scatter(df, x = \"NumOfProducts\", y = \"Age\", color = \"Exited\")","1745993f":"pd.crosstab(df[\"HasCrCard\"], df[\"Exited\"])","880d1bf2":"px.histogram(df, x=df.HasCrCard, color=\"Exited\", hover_data=df.columns)","fa0b268a":"pd.crosstab(df[\"IsActiveMember\"], df[\"Exited\"])","0f29b4af":"px.histogram(df, x=df.IsActiveMember, color=\"Exited\", hover_data=df.columns)","526f1307":"px.histogram(df, x=df.EstimatedSalary, color=\"Exited\", hover_data=df.columns)","0020c7fc":"px.scatter(df, x = \"EstimatedSalary\", y = \"Age\", color = \"Exited\")","f13a181a":"df[categorical].head().T","a1ed9722":"df[categorical].describe()","c2b847d8":"df[categorical].iplot(kind='histogram', subplots=True,bins=50)","e3590090":"first_looking(\"Geography\")","b2bcf052":"px.histogram(df, x=df.Geography, color=\"Exited\")","faf6e8c0":"pd.crosstab(df[\"Geography\"], df[\"Exited\"])","0e3a49c1":"sns.swarmplot(y=\"Age\", x=\"Geography\", hue=\"Exited\", data=df);","6ae4add0":"first_looking(\"Gender\")","af421375":"px.histogram(df, x=df.Gender, color=\"Exited\")","0a40708d":"pd.crosstab(df[\"Gender\"], df[\"Exited\"])","ac78f905":"sns.swarmplot(y=\"Age\", x=\"Gender\", hue=\"Exited\", data=df);","e6e7674f":"df = pd.get_dummies(df)","cbb40e13":"df.head(1)","c8cf0d76":"df1 = df.copy()","007009fa":"X = df1.drop('Exited', axis = 1)\ny = df1['Exited']","c3613785":"X_train, X_test, y_train, y_test = train_test_split(X, y, stratify = y, test_size = 0.1, random_state = 99)","f5d17413":"scaler = MinMaxScaler()","faff5879":"X.head()","66c5ba25":"y","a6d42817":"X_train = scaler.fit_transform(X_train)\nX_test = scaler.transform(X_test)","c33e0d04":"from tensorflow.keras.models import Sequential\nfrom tensorflow.keras.layers import Dense, Activation\nfrom tensorflow.keras.callbacks import EarlyStopping\nfrom tensorflow.keras.optimizers import Adam, SGD, Adamax, RMSprop,Adadelta\nfrom tensorflow.keras.layers import Dropout\nfrom sklearn.utils import class_weight\nfrom tensorflow.keras.wrappers.scikit_learn import KerasClassifier\nfrom sklearn.metrics import classification_report, confusion_matrix\nfrom sklearn.metrics import plot_roc_curve, roc_auc_score, roc_curve, average_precision_score\nfrom sklearn.model_selection import cross_val_score, cross_validate\nfrom sklearn.model_selection import GridSearchCV","325e285f":"X_train.shape","c6d730ae":"X_test.shape","22e04101":"model = Sequential()\n\nmodel.add(Dense(32, activation = \"relu\"))\nmodel.add(Dropout(0.25))\nmodel.add(Dense(16, activation = \"relu\"))\nmodel.add(Dropout(0.25))\nmodel.add(Dense(1, activation = \"sigmoid\"))\n\nopt = Adam(lr = 0.001)\nmodel.compile(optimizer = opt, loss = \"binary_crossentropy\", metrics = [\"Recall\"])","bf684b35":"early_stop = EarlyStopping(monitor = \"val_loss\", mode = \"auto\", verbose = 1, patience = 20)","e2ab9cf7":"model.fit(x = X_train, y = y_train, validation_split = 0.1, batch_size = 64, epochs = 500, verbose=1,\n          callbacks = [early_stop])","80add7c7":"model.summary()","14e11cc0":"loss_df = pd.DataFrame(model.history.history)\nloss_df.head()","0ad52fae":"loss_df = pd.DataFrame(model.history.history)\nloss_df.tail()","394ae7b4":"loss_df.plot();","22661ecf":"model.evaluate(X_test, y_test, verbose=0)","46807fe2":"loss, recall = model.evaluate(X_test, y_test, verbose=0)\nprint(\"loss : \", loss)\nprint(\"recall : \", recall)","4d920daa":"y_pred = (model.predict(X_test) > 0.5).astype(\"int32\")\nprint(confusion_matrix(y_test, y_pred))\nprint(classification_report(y_test, y_pred))","2af44c36":"y_pred_proba = model.predict(X_test)\nfpr, tpr, thresholds = roc_curve(y_test, y_pred_proba)\nplt.plot([0,1],[0,1],'k--')\nplt.plot(fpr,tpr, label='ANN')\nplt.xlabel('False Positive Rate')\nplt.ylabel('True Positive Rate')\nplt.title('ROC Curve for Keras Model')\nplt.show()","5742a1c8":"roc_auc_score(y_test, y_pred_proba)","4fe468af":"average_precision_score(y_test, y_pred_proba)","3f06ecfc":"model_weighted = Sequential()\n\nmodel_weighted.add(Dense(32, activation = \"relu\"))\nmodel_weighted.add(Dropout(0.25))\nmodel_weighted.add(Dense(16, activation = \"relu\"))\nmodel_weighted.add(Dropout(0.25))\nmodel_weighted.add(Dense(1, activation = \"sigmoid\"))\n                                             \nopt = Adam(lr = 0.001)\nmodel_weighted.compile(optimizer = opt, loss = \"binary_crossentropy\", metrics = [\"Recall\"])","6a6c1cdd":"px.histogram(df, x=df.Exited)","b8113b6d":"from sklearn.utils import class_weight\nclass_weights = class_weight.compute_class_weight('balanced',\n                                                 np.unique(y_train),\n                                                 y_train)","01f22835":"class_weight = {0: class_weights[0], 1:class_weights[1]}","619de83a":"class_weight","ee149b53":"early_stop = EarlyStopping(monitor = \"val_loss\", mode = \"auto\", verbose = 1, patience = 20)","177035f2":"model_weighted.fit(x = X_train, y = y_train, validation_split = 0.1, batch_size = 64, epochs = 500, verbose=1,\n          callbacks = [early_stop], class_weight=class_weight)","34c7187f":"model_weighted.summary()","973affb8":"loss_df = pd.DataFrame(model_weighted.history.history)\nloss_df.head()","9d84bff0":"loss_df = pd.DataFrame(model_weighted.history.history)\nloss_df.tail()","ebb55626":"loss_df.plot();","96215c89":"model_weighted.evaluate(X_test, y_test, verbose=0)","bf43f342":"loss, recall = model_weighted.evaluate(X_test, y_test, verbose=0)\nprint(\"loss : \", loss)\nprint(\"recall : \", recall)","a5e3fb3d":"y_pred = (model_weighted.predict(X_test) > 0.5).astype(\"int32\")\n#y_pred = model.predict_classes(X_test)\nprint(confusion_matrix(y_test, y_pred))\nprint(classification_report(y_test, y_pred))","d1fdae21":"y_pred_proba = model_weighted.predict(X_test)\nfpr, tpr, thresholds = roc_curve(y_test, y_pred_proba)\nplt.plot([0,1],[0,1],'k--')\nplt.plot(fpr,tpr, label='ANN')\nplt.xlabel('False Positive Rate')\nplt.ylabel('True Positive Rate')\nplt.title('ROC Curve for Keras Model_Weighted')\nplt.show()","60dbd490":"roc_auc_score(y_test, y_pred_proba)","87830852":"average_precision_score(y_test, y_pred_proba)","17a9907c":"def build_classifier(optimizer):\n    classifier = Sequential()\n    classifier.add(Dense(units = 32, activation = 'relu'))\n    classifier.add(Dropout(0.25))\n    classifier.add(Dense(units = 16, activation = 'relu'))\n    classifier.add(Dropout(0.25))\n    classifier.add(Dense(units = 1, activation = 'sigmoid'))\n    classifier.compile(optimizer = optimizer, loss = 'binary_crossentropy', metrics = [\"Recall\"])\n    return classifier","bd8a0d0f":"early_stop = EarlyStopping(monitor = \"loss\", mode = \"auto\", verbose = 1, patience = 20)","ab5bbd88":"class_weight = {0: class_weights[0], 1:class_weights[1]}","ad40dbfd":"class_weight","66229008":"classifier = KerasClassifier(build_fn = build_classifier, epochs = 200)\nparameters = {'batch_size': [32, 64],\n              'optimizer': ['adam', 'rmsprop', \"SGD\", \"adagrad\", \"adadelta\"]}\ngrid_model = GridSearchCV(estimator = classifier,\n                          param_grid = parameters,\n                          scoring = 'recall',\n                          cv = 10,\n                          n_jobs = -1,\n                          verbose = 1)\ngrid_model.fit(X_train, y_train, callbacks = [early_stop], class_weight = class_weight)","97a5ea28":"grid_model.best_score_","1c6c0ffe":"grid_model.best_params_","a7bd86b2":"y_test_pred = (grid_model.predict(X_test) > 0.5).astype(\"int32\")\nprint(confusion_matrix(y_test, y_test_pred))\nprint(classification_report(y_test, y_test_pred))","2e081bc5":"y_pred_proba = grid_model.predict_proba(X_test)[:,1]\nfpr, tpr, thresholds = roc_curve(y_test, y_pred_proba)\nplt.plot([0,1],[0,1],'k--')\nplt.plot(fpr,tpr, label='ANN')\nplt.xlabel('False Positive Rate')\nplt.ylabel('True Positive Rate')\nplt.title('ROC Curve for Grid Model')\nplt.show()","e44304c4":"roc_auc_score(y_test, y_pred_proba)","35d73963":"average_precision_score(y_test, y_pred_proba)","6cdf3483":"import pickle\npickle.dump(scaler, open(\"scaler_exited\", 'wb'))","122f7d5b":"final_model = Sequential()\n\nfinal_model.add(Dense(32, activation = \"relu\"))\nfinal_model.add(Dropout(0.25))\nfinal_model.add(Dense(16, activation = \"relu\"))\nfinal_model.add(Dropout(0.25))\nfinal_model.add(Dense(1, activation = \"sigmoid\"))\n                                           \nopt = Adam(lr = 0.001)\n\nfinal_model.compile(optimizer = opt, loss = \"binary_crossentropy\", metrics = [\"Recall\"])\n\nearly_stop = EarlyStopping(monitor = \"val_loss\", mode = \"auto\", verbose = 1, patience = 20)\n\nclass_weight = {0: 0.62787777, 1: 2.45499182}\n\nfinal_model.fit(x=X_train,\n                y=y_train,\n                validation_data=(X_test, y_test),\n                callbacks=[early_stop],\n                batch_size=64,\n                epochs=500,\n                verbose=1,\n                class_weight=class_weight)","00495e2c":"loss_df = pd.DataFrame(final_model.history.history)\nloss_df.plot()","5f3bb9fb":"y_pred = (final_model.predict(X_test) > 0.5).astype(\"int32\")\nprint(confusion_matrix(y_test, y_pred))\nprint(classification_report(y_test, y_pred))","be750000":"model.save('model_exited.h5')","3909960c":"from tensorflow.keras.models import load_model","4cc1144f":"model_exited = load_model('model_exited.h5')\nscaler_exited = pickle.load(open(\"scaler_exited\", \"rb\"))","28e52d05":"first_ten_customer = df.drop('Exited', axis = 1).iloc[0:10, :]\nfirst_ten_customer","12600f57":"first_ten_customer = scaler_exited.transform(first_ten_customer)\nfirst_ten_customer","bc21b61a":"(model_exited.predict(first_ten_customer) > 0.5).astype(\"int32\")","39712fa3":"# rm -rf .nv\/","820c8158":"df[\"Exited\"].iloc[0:10]","319caa57":"***Let's go on with the examination of numerical and categorical columns.***","b94d2ea5":"- All the values in \"RowNumber\" and \"CustomerId\" are unique. The values contained in these columns need to be dropped as they will not help the prediction.\n- In addition, the \"Surname\" column also should be dropped as it does not contain information to help prediction. ","7a66e55c":"## Preprocessing of Data","aa3a1b8f":"## Conclusion","b7b4da45":"### The Examination of Target Variable","f71f7dd3":"### with class_weigth","a92fcca3":"- https:\/\/towardsdatascience.com\/handling-imbalanced-datasets-in-deep-learning-f48407a0e758\n- https:\/\/keras.rstudio.com\/reference\/fit.html","2543bf3b":"#### Evaluate","7c0498aa":"In the above study, we;\n- Implemented basic steps to see how data looks like,\n- Checked for missing values,\n- Dropped the features that not suitable for modelling,\n- Implemented basic visualization steps such as histogram, countplot, heatmap,\n- Converted categorical variables to dummy variables,\n- Created models with Keras,\n- Chose final model and deployed it,\n- And finally made prediction with final model.","6b255315":"***Geography and Exited***","923af289":"***Based on the examinations made above,***\n\n- There is no multicollinearity problem among the features.\n- We have weak level correlation between the numerical features and the target column.\n- Also there is weak level correlation between the columns.\n- Target variable demonstrates a slight negative correlation with the variables of \"creditscore\", \"tenure\", \"numberofproducts\" 'hascrcard' and 'isactivemember', \n- Target variable demonstrates slight positive correlation with the variables of 'age', 'balance' and 'estimatedsalary\".\n- Age has more influence on the decision to leave the bank than the other columns.\n- It is noteworthy that those who left the bank are in the 45-65 age group. \n- The increase in the number of products negatively affects the decision to continue with the bank.\n- Another remarkable situation is the concentration of leaving the bank in the group where the number of products is 3 and 4. ","f3d77d6e":"***According to the basic examinations on the dataset;***\n\n- We have a classification problem.\n- We are going to make classification on the target variable \"Exited\".\n- And we will build a model to get the best classification on the \"Exited\" column.\n- Because of that we are going to look at the balance of \"Exited\" column.\n- \"RowNumber\", \"CustomerId\" and \"Surname\" columns will not help the prediction. So we will drop them.","82783873":"- The aim should be to accurately predict those who leave the bank and develop measures to minimize these livings. \n- We have an imbalanced data. It is therefore necessary to predict as much as possible to the Exited 1 class truely. \n- To predict Class Exited 1 data as accurately as possible, we need to use the class_weight parameter.\n- Below shown how to find the weights of the classes in the target column. ","3b4e0d9f":"## Improt Libraries","f55ee94c":"## GridSearchCV","db9f5337":"***Balance and Exited***","e7abbe3f":"### ROC (Receiver Operating Curve) and AUC (Area Under Curve) for keras_model_weighted","5b092f6e":"## Modelling & Model Performance","29263100":"***HasCrCard and Exited***","06b5920e":"- As mentioned above, we can clearly see that leaving the bank is concentrated in the 45-65 age group.","90a7638e":"# Churn Prediction For Bank Customer","8b2462b7":"#### Evaluate","d914d7dd":"- There is no missing value in the dataset.","a6b010ad":"## Ingest Data","bfd35b01":"***Below shown how to calculate the weights of the classes.***","835ef391":"#### Evaluate","5c5046db":"### Numerical Columns","7295e297":"- We have an imbalanced data based on the target variable as seen above.\n- 20.37 % of the customers didn't continue with the bank and left (Exited-1).\n- 2037 customer left the bank.\n- 79.63 % of the customers continue with the bank and didn't leave (Exited-0).\n- 7963 customer didn't leave.","69a615b4":"- The dataset has 14 columns and 10000 observations.\n\n- 11 columns contain numerical data and 3 columns contain categorical values. \n\n- There seems to be no missing value. ","04ca0b91":"## Exploratory Data Analysis and Visualization","117ef1f0":"***NumOfProducts and Exited***","4b11ff0e":"### Prediction","f4248561":"### without class_weigth","6fb1b6be":"***CreditScore and Exited***","8c749430":"- We have an imbalanced data based on the target variable.\n- 20.37 % of the customers didn't continue with the bank and left (Exited-1).\n- 2037 customer left the bank.\n- 79.63 % of the customers continue with the bank and didn't leave (Exited-0).\n- 7963 customer didn't leave.","08d708ce":"1. Implement basic steps to see how is your data looks like\n2. Check for missing values\n3. Drop the features that not suitable for modelling\n4. Implement basic visualization steps such as histogram, countplot, heatmap\n5. Convert categorical variables to dummy variables","a070fdd2":"***The features in the given dataset are:***\n\n- Rownumber: Row Numbers from 1 to 10000\n- Customerid: A unique ID that identifies each customer.\n- Surname: The customer\u2019s surname.\n- Creditscore: A credit score is a number between 300\u2013850 that depicts a consumer's creditworthiness.\n- Geography: The country from which the customer belongs to.\n- Gender: The customer\u2019s gender: Male, Female\n- Age: The customer\u2019s current age, in years, at the time of being customer.\n- Tenure: The number of years for which the customer has been with the bank.\n- Balance: Bank balance of the customer.\n- Numofproducts: the number of bank products the customer is utilising.\n- Hascrcard: The number of credit cards given to the customer by the bank.\n- Isactivemember: Binary Flag for indicating if the client is active or not with the bank before the moment where the client exits the company (recorded in the variable \"exited\")\n- Exited: Binary flag 1 if the customer closed account with bank and 0 if the customer is retained.","09d6b319":"***Train | Test Split, Scalling***","a1998cc0":"***IsActiveMember and Exited***","d1574144":"### Creating Model","63bc725f":"***EstimatedSalary and Exited***","2809cff9":"***Gender and Exited***","5933ff22":"***Before constructing our model, we should convert categorical features into dummies.***","db21b921":"- As I mentioned above, \"RowNumber\", \"CustomerId\" and \"Surname\" columns will not help the prediction.\n- \"Tenure\", \"NumOfProducts\", \"Geography\" columns have multi-class type values.\n- \"HasCrCard\", \"IsActiveMember\", \"Exited\", \"Gender\" columns have binary type values.","41fb6970":"### ROC (Receiver Operating Curve) and AUC (Area Under Curve) for keras_model","abe89f99":"### Import related libraries","bfd598f8":"## User Defined Functions","1f219674":"### ROC (Receiver Operating Curve) and AUC (Area Under Curve) for grid_model","a9ca2d76":"### Loading Model and Scaler","f6e993d8":"***Tenure and Exited***","02ae74a8":"### Categorical Columns","162281b6":"We have a dataset in which there are details of a bank's customers and the target variable is a binary variable reflecting the fact whether the customer left the bank (closed his account) or he continues to be a customer.","2cd25d9f":"## Final Model and Model Deployment"}}