{"cell_type":{"60b83106":"code","369072fe":"code","10d4700f":"code","f91e886f":"code","c7857017":"code","28ede15a":"code","67c4300d":"code","1f6ef1c8":"code","08e63b9b":"code","9114b1eb":"code","febc8ad0":"code","b57ebe82":"code","fff8defc":"code","26310703":"code","c27e385a":"code","99fe2666":"code","941617f5":"code","347fad85":"code","a837dd60":"code","e07ddb30":"code","7297a903":"code","2bc9a886":"code","9f0a7e3d":"code","ece93ae2":"code","d2e5e0a9":"code","9def1e16":"code","fe5442df":"code","d2d7352b":"code","20997f28":"code","799d7f6e":"code","11e0dffb":"code","45849759":"code","d7ad1a51":"code","1beb6941":"code","c8bacd53":"code","8d50d853":"code","b146d7f5":"code","4731fdb8":"code","687e6150":"code","2de5fec6":"code","200aef85":"code","90098a23":"code","786bab78":"code","e304169c":"code","2bc16f52":"code","8642598b":"code","11fe76ea":"code","6d6940e5":"code","ec46b006":"code","d3b6a58d":"code","c0da46bd":"code","80258cbd":"code","8fba81c6":"code","7a4f06df":"code","9ec9ba62":"code","9ca15e9c":"code","4a3cae5a":"code","0b7626fa":"code","d110adc6":"code","68106384":"code","4b8fe6e2":"code","f43f7e9d":"code","fc1b7f89":"code","689a8293":"markdown","89069415":"markdown","a58b5ab2":"markdown","b06234b7":"markdown","4259d163":"markdown","ec6b0a27":"markdown","1c4d0960":"markdown","a833a944":"markdown","b61cb062":"markdown","da0171a3":"markdown","bd9fcd10":"markdown","c64a56ba":"markdown","b174ad71":"markdown","f24e698a":"markdown","74c3456e":"markdown","e09228aa":"markdown","e8ae79bd":"markdown"},"source":{"60b83106":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n%matplotlib inline\nimport matplotlib.pyplot as plt\nfrom sklearn.datasets import make_classification\nfrom sklearn.metrics import accuracy_score, classification_report\nfrom sklearn.linear_model import LogisticRegression\nfrom mlxtend.plotting import plot_decision_regions\n\n\n#let's import the warning before running any sophisticated methods\nimport warnings\nfrom sklearn.exceptions import DataConversionWarning\nwarnings.filterwarnings(action='ignore', category=DataConversionWarning)\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory\n\nimport os\nprint(os.listdir(\"..\/input\"))\n\n# Any results you write to the current directory are saved as output.","369072fe":"df_train_features = pd.read_csv('..\/input\/train_features.csv')\ndf_train_labels = pd.read_csv(\"..\/input\/train_labels.csv\")\ndf_test_features = pd.read_csv(\"..\/input\/test_features.csv\")\nsample_submission = pd.read_csv(\"..\/input\/sample_submission.csv\")","10d4700f":"df_train_features.shape, df_test_features.shape, df_train_labels.shape","f91e886f":"df_train_features.head()","c7857017":"df_train_labels.status_group.value_counts()","28ede15a":"df_train_labels.status_group.value_counts(normalize=True)","67c4300d":"import seaborn as sns\nplt.figure(figsize=(14,7))\nplt.title(\"Water Pumps by Functionality\",fontsize=16, fontweight='bold')\nsns.countplot(x=df_train_labels['status_group'], data=df_train_labels, palette=\"Greens_d\");","1f6ef1c8":"df_pivot = pd.concat([df_train_features, df_train_labels], axis=1)\npiv_df= df_pivot[['basin','status_group','construction_year']]\npiv_table = piv_df.pivot_table(index='basin',\n                           columns='status_group', aggfunc='count')\npiv_table","08e63b9b":"df_pivot = pd.concat([df_train_features, df_train_labels], axis=1)\npiv_df= df_pivot[['water_quality','status_group','basin']]\npiv_table = piv_df.pivot_table(index='water_quality',\n                           columns='status_group', aggfunc='count')\npiv_table","9114b1eb":"#Let's merge train and test\nfull_df = pd.concat([df_train_features, df_test_features])","febc8ad0":"full_df.shape","b57ebe82":"59400 + 14358","fff8defc":"full_df.head()","26310703":"full_df['date_recorded_months'] = [(pd.to_datetime(date)-pd.to_datetime('2000-01-01')).days\/30 for date in full_df['date_recorded']]","c27e385a":"full_df['scheme_name_duplicate'] = full_df['scheme_name']","99fe2666":"full_df = full_df.apply(lambda x: x.mask(x.map(x.value_counts())<250, 'NaN') if x.name=='scheme_name_duplicate' else x)","941617f5":"full_df.scheme_name_duplicate.value_counts()","347fad85":"sum(full_df.gps_height.value_counts()>50)","a837dd60":"full_df = full_df.apply(lambda x: x.mask(x.map(x.value_counts())<250, 'NaN') if x.name=='funder' else x)","e07ddb30":"full_df = full_df.apply(lambda x: x.mask(x.map(x.value_counts())<250, 'NaN') if x.name=='installer' else x)","7297a903":"full_df = full_df.apply(lambda x: x.mask(x.map(x.value_counts())<150, 'NaN') if x.name=='subvillage' else x)","2bc9a886":"full_df['public_meeting_missing'] = full_df['public_meeting'].isna()","9f0a7e3d":"full_df['public_meeting'] = full_df['public_meeting'].fillna(full_df['public_meeting'].mode()[0])","ece93ae2":"full_df['scheme_management_missing'] = full_df['scheme_management'].isna()","d2e5e0a9":"full_df['scheme_management'] = full_df['scheme_management'].fillna(full_df['scheme_management'].mode()[0])","9def1e16":"full_df['permit_missing'] = full_df['permit'].isna()","fe5442df":"full_df['permit'] = full_df['permit'].fillna(full_df['permit'].mode()[0])","d2d7352b":"full_df = full_df.replace('none', np.NaN)","20997f28":"full_df = full_df.apply(lambda x: x.mask(x.map(x.value_counts())<100, 'NaN') if x.name=='wpt_name' else x)","799d7f6e":"full_df = full_df.replace('0', np.NaN)","11e0dffb":"full_df = full_df.apply(lambda x: x.mask(x.map(x.value_counts())<150, 'NaN') if x.name=='ward' else x)","45849759":"full_df['construction_year_missing'] = (full_df['construction_year'] ==0)*1","d7ad1a51":"#before filling the null, let's keep track of them\n\n#to fill missing dates, we can use: mean, median or the oldest\nmean_year = full_df[full_df['construction_year']>0]['construction_year'].mean()\nfull_df.loc[full_df['construction_year']==0, 'construction_year'] = int(mean_year)\n","1beb6941":"full_df['gps_height_missing'] = full_df['gps_height'].isna()","c8bacd53":"mean_gps_height = full_df[full_df['gps_height']>0]['gps_height'].mean()\nfull_df.loc[full_df['gps_height']==0, 'gps_height'] = int(mean_gps_height)","8d50d853":"full_df['num_private_missing'] = full_df['num_private'].isna()","b146d7f5":"mean_num_private = full_df[full_df['num_private']>0]['num_private'].mean()\nfull_df.loc[full_df['num_private']==0, 'num_private'] = int(mean_num_private)","4731fdb8":"full_df['population_missing'] = full_df['population'].isna()","687e6150":"mean_population = full_df[full_df['population']>0]['population'].mean()\nfull_df.loc[full_df['population']==0, 'population'] = int(mean_population)","2de5fec6":"full_df['amount_tsh_missing'] = full_df['amount_tsh'].isna()","200aef85":"mean_amount = full_df[full_df['amount_tsh']>0]['amount_tsh'].mean()\nfull_df.loc[full_df['amount_tsh']==0, 'amount_tsh'] = int(mean_amount)","90098a23":"full_df_selected_columns = full_df.drop(columns=['scheme_name','date_recorded','lga','recorded_by', 'waterpoint_type_group','source', 'quality_group',\n                                                'payment_type', 'management_group', 'extraction_type',\n                                                'extraction_type_group', \n                                                 ]) ","786bab78":"full_df_selected_columns.head()","e304169c":"#full_df_selected_columns['average_amount'] = full_df_selected_columns['amount_tsh']\/ full_df_selected_columns['population']\n","2bc16f52":"import pandas as pd\ndf_main = pd.get_dummies(full_df_selected_columns)\n#pd.set_option('display.max_columns', None)","8642598b":"df_main.head()","11fe76ea":"df_main.shape","6d6940e5":"#split the data back\nX_cleaned = df_main[:-14358]\nX_test_main_cleaned = df_main[-14358:]\ny = df_train_labels['status_group']","ec46b006":"X_cleaned.shape, X_test_main_cleaned.shape, y.shape\n","d3b6a58d":"from sklearn.model_selection import train_test_split\nX_train, X_test, y_train, y_test = train_test_split(X_cleaned, y, test_size=0.25, random_state=42, shuffle=True)","c0da46bd":"X_train.shape, X_test.shape, y_train.shape, y_test.shape","80258cbd":"X_train.head()","8fba81c6":"from sklearn import tree\n\nclf = tree.DecisionTreeClassifier()\nclf.fit(X=X_train, y=y_train)\nclf.feature_importances_ \nclf.score(X=X_test, y=y_test) # 1.0","7a4f06df":"from sklearn.ensemble import RandomForestClassifier\nfrom sklearn.metrics import accuracy_score\nfrom scipy.cluster import hierarchy as hc","9ec9ba62":"m = RandomForestClassifier(n_estimators=200,min_samples_leaf=3 ,n_jobs=-1,max_features=0.25)\n%time m.fit(X_train, y_train)\ny_pred= m.predict(X_test)\naccuracy_score(y_test, y_pred)","9ca15e9c":"%matplotlib inline\nimport matplotlib\nimport matplotlib.pyplot as plt\nplt.rcParams['axes.labelsize'] = 14\nplt.rcParams['xtick.labelsize'] = 12\nplt.rcParams['ytick.labelsize'] = 12\nfrom statsmodels.graphics.mosaicplot import mosaic","4a3cae5a":"df_viz = pd.concat([df_train_features, df_train_labels['status_group']], axis=1)","0b7626fa":"df_viz.shape","d110adc6":"df_viz[df_viz['longitude']>0] [df_viz['latitude']<0][df_viz['construction_year']>0].plot\\\n(kind='scatter', x=\"longitude\", y=\"latitude\", alpha=0.4,\ns=df_viz[\"population\"]\/10, label=\"population\", figsize=(14,10),\n\nc=\"construction_year\", cmap=plt.get_cmap(\"jet\"), colorbar=True,\nsharex=False);\nplt.title(\"Population Size, Construction Years, & Locations of Waterpumps in Tanzania\", \n         fontsize =16, fontweight='bold')\nplt.legend;","68106384":"plt.figure(figsize=(14, 7))\nsns.distplot(df_viz['construction_year'][df_viz['construction_year']>0]);\nplt.title(\"Water Pump Construction by Years\", fontsize=16, fontweight='bold')","4b8fe6e2":"corr_table = df_viz.corr()\nplt.figure(figsize=(14,13))\nsns.heatmap(corr_table, square=True, annot=True, cbar=False);","f43f7e9d":"plt.figure(figsize=(16,14))\nsns.set(style='ticks')\nsns.pairplot(df_viz[['population', 'num_private', 'amount_tsh', 'status_group']],\\\n            hue='status_group', diag_kind='kde');","fc1b7f89":"sns.set(style='ticks')\nsns.pairplot(df_viz[['longitude', 'latitude', 'gps_height', 'status_group']],\\\n            hue='status_group', diag_kind='kde');","689a8293":"**First Try Decision Tree**","89069415":"**Hot Encoding the categorical features**","a58b5ab2":"The date recorded columns might indicate some inforamtion, however it's not usable in this format. It's a good idea to convert it into a column representing months. ","b06234b7":"For the following numerical columns, before filling them with averages, I created the boolean columns to keep track of the NaNs. ","4259d163":"The code below is taking only the categories whose frequency\/occurance is more than 250 times in the column. Anything category with less than  250 frequency will be treated as NaN. That we I ensured we have only limited\/managable ~10-30 categories in comparision to thousands.","ec6b0a27":"**Finally, let's plot more plots!**","1c4d0960":"There are some misisng values coded diferently in the dataset like the one below:","a833a944":" **Merge Train and Test sets**\nit's the same formula, just don't mention axis=1\nThe last row of our df_train_features dataset is 59394","b61cb062":"**Let's visualize the target variable**","da0171a3":"**Splitting train set into train and test for model training and predictions**","bd9fcd10":"**Tanzania's Faulty Water Pumps Predictions using Random Forest and Plots**\n\nThis is an interesting dataset. The target variable consisted of three classes of water pumps: Functional, Non-function, and the ones that require repair work. This is a classic classification problem of how to accurately predict the classes. The challenge was if we can predict which pumps are functional.\nThe dataset is decent size but requires some serious cleaning. Except for a few numerical variables, most of the features are categorical. The numeric features aren't very helpful given the number of missing values they have. However, they are important enough not to be thrown away. On the other hand, categorical variables don't have many missing values in comparison to numerical features, but almost each of them represents at least hundreds of categories. For example: the feature 'wpt_name' has 45600 types of names.In this notebook you will see:\n1.Manual cleaning because I wanted to hand pick the number of categories which represented the most information (also to prevent my laptop from crashing).\n2. pandas dummy encoding of categorical variables\n3. Logistic Regression\n4. Decision tree model\n5. Random forests model\n6. Cool visualizations!\n","c64a56ba":"I duplicated scheme_name feature to experiment with it. ","b174ad71":"I repeated the process for the following additional categorical columns after checking the value counts for eachof them. ","f24e698a":"**Random Forest**","74c3456e":"There are also NaNs coded as zeros ","e09228aa":"**Splitting the data back into the shape it was originally**","e8ae79bd":"The above plot is Tanzania's actaul map. Up North, West, and South West have three major rivers (googel maps). Seems like that waterpumps were not installed near lakes. May be the idea was to make water more accessible to the areas with less water. "}}