{"cell_type":{"6a681575":"code","117eb2c0":"code","fe6a231f":"code","29bc1f38":"code","859be835":"code","d0bcd76f":"code","fbd62539":"code","354b6649":"code","c76c6b29":"markdown","e63ab752":"markdown","5a3ec07b":"markdown"},"source":{"6a681575":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nfrom mlxtend.plotting import plot_decision_regions\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","117eb2c0":"#load data and map species to numeric\niris_data = pd.read_csv('\/kaggle\/input\/iris\/Iris.csv')\nX = iris_data[['PetalLengthCm','SepalLengthCm','PetalWidthCm','SepalWidthCm']]\ny = iris_data['Species'].map({'Iris-setosa':1, 'Iris-versicolor':2, 'Iris-virginica':3})","fe6a231f":"from sklearn.model_selection import ____","29bc1f38":"# use train_test_split to split the data - make sure to keep the seed the same to have reproducable results\nX_train, X_test, y_train, y_test = __________(X, y, train_size = 0.8, random_state = 64)","859be835":"#quick fit\nfrom sklearn.neighbors import KNeighborsClassifier\n\nknn = ____(n_neighbors=3)\n\nknn.fit(X_train,y_train) \n","d0bcd76f":"from sklearn.metrics import accuracy_score, precision_score, recall_score","fbd62539":"# calculate the prediction for each of the test set observations\n____ = knn.predict(____)","354b6649":"# Because the problem is not binary we need to average the precision somehow - try googling it \nprint(accuracy_score(____, y_test))\nprint(precision_score(____, y_test, average = ____))\nprint(recall_score(____, y_test, average = ____))","c76c6b29":"# Bonus\n1. What are the metrics like for the train set?\n2. What happens when you reseed the data?\n3. What happens if you take a smaller training sample?","e63ab752":"# Create Train and Test sets\n\nuse the function train_test_split to split the data into the samples\n","5a3ec07b":"# Measuring Performance"}}