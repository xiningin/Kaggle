{"cell_type":{"1e2cb6fb":"code","1ae98c34":"code","7bf9b375":"code","196c0031":"code","92eb6786":"code","813762c4":"code","f6085645":"code","fdbc9d45":"code","3b81406b":"code","5617b0fc":"code","c3a3fe9d":"code","9148df94":"code","ff5442ae":"code","44daaf9d":"code","427aafea":"code","8091983a":"markdown","32f5fcb0":"markdown"},"source":{"1e2cb6fb":"%reload_ext autoreload\n%autoreload 2\n%matplotlib inline\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\n\nfrom fastai.vision import *\nfrom fastai.tabular import *\nimport re\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))","1ae98c34":"path = '\/kaggle\/input\/Kannada-MNIST\/'\ntrain = pd.read_csv(path+'train.csv')\ntrain.head()","7bf9b375":"test = pd.read_csv(path+'test.csv')\ntest.head()","196c0031":"class NumpyImageList(ImageList):\n    def open(self, fn):\n        img = fn.reshape(28,28,1)\n        return Image(pil2tensor(img, dtype=np.float32))\n    \n    @classmethod\n    def from_csv(cls, path:PathOrStr, csv:str, **kwargs)->'ItemList': \n        df = pd.read_csv(Path(path)\/csv, header='infer')\n        res = super().from_df(df, path=path, cols=0, **kwargs)\n\n        if 'label' in df.columns:\n            df = df.drop('label', axis=1)\n        if 'id' in df.columns:\n            df = df.drop('id', axis=1)\n        df = np.array(df)\/255.\n        res.items = (df-df.mean())\/df.std()\n\n        return res\n    \ndefaults.cmap='binary'","92eb6786":"test = NumpyImageList.from_csv(path, 'test.csv')\ntest","813762c4":"train = NumpyImageList.from_csv(path, 'train.csv')\ntrain","f6085645":"tfms = get_transforms(do_flip=False)\ndata = (NumpyImageList.from_csv(path, 'train.csv')\n        .split_by_rand_pct(.1)\n        .label_from_df(cols='label')\n        .add_test(test, label=0)\n        .transform(tfms)\n        .databunch(bs=128, num_workers=0)\n        .normalize(imagenet_stats))\ndata","fdbc9d45":"data.show_batch(rows=5, figsize=(10,10))","3b81406b":"xb,yb = data.one_batch()\nxb.shape,yb.shape","5617b0fc":"def conv(ni,nf): return nn.Conv2d(ni, nf, kernel_size=3, stride=2, padding=1)\n\nmodel = nn.Sequential(\n    conv(3, 8), # 14   ## Why not 1 ??\n    nn.BatchNorm2d(8),\n    nn.ReLU(),\n    conv(8, 16), # 7\n    nn.BatchNorm2d(16),\n    nn.ReLU(),\n    conv(16, 32), # 4\n    nn.BatchNorm2d(32),\n    nn.ReLU(),\n    conv(32, 16), # 2\n    nn.BatchNorm2d(16),\n    nn.ReLU(),\n    conv(16, 10), # 1\n    nn.BatchNorm2d(10),\n    Flatten()     # remove (1,1) grid\n)\n\nif torch.cuda.is_available():\n    model = model.cuda()\nlearn = Learner(data, model, metrics=accuracy, model_dir='\/kaggle\/working\/models')\nlearn.summary()","c3a3fe9d":"learn.lr_find()\nlearn.recorder.plot()","9148df94":"learn.fit_one_cycle(3, max_lr=slice(1e+0))","ff5442ae":"predictions, *_ = learn.get_preds(DatasetType.Test)\nlabels = np.argmax(predictions, 1)\n# output to a file\nsubmission_df = pd.DataFrame({'id': list(range(0,len(labels))), 'label': labels})\nsubmission_df.head()","44daaf9d":"## Check format of sample submission\nsample_submission = pd.read_csv(path+'sample_submission.csv')\nsample_submission.head()","427aafea":"## Our submission files matches the required format, so we can submit it\nsubmission_df.to_csv('submission.csv', index=False)","8091983a":"Thanks to Hans Lee for sharing this custom method to load image data as pixels from a csv : https:\/\/www.kaggle.com\/hanslee01\/digit-recognizer-with-cnn-fastai","32f5fcb0":"In this kernel, I will be exploring some of the techniques presented in the Fast.ai's deep learning course. [Link](https:\/\/github.com\/fastai\/course-v3\/blob\/master\/nbs\/dl1\/lesson7-resnet-mnist.ipynb)"}}