{"cell_type":{"d4a8f127":"code","c175f848":"code","154d6628":"code","a1ba7e5b":"code","ebcf2e0b":"code","8f85182a":"code","09337705":"code","076c76c9":"code","45f5b313":"code","e9d7af52":"code","a237aa6f":"code","da7c5823":"code","4614d69a":"code","89488b70":"code","69c32020":"code","7d6aff2e":"code","0ebc3075":"code","15230a15":"code","5c450fba":"markdown","056de508":"markdown","bf3907a6":"markdown","8b23fbd1":"markdown","078e78f9":"markdown","3851c7f2":"markdown","9159dce7":"markdown","544e1a80":"markdown","445044e0":"markdown","f928ec63":"markdown","f86ba772":"markdown","7135f2d0":"markdown","045e539f":"markdown","48a27f9d":"markdown"},"source":{"d4a8f127":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","c175f848":"pd.set_option('display.max_columns', 100)\nimport matplotlib.pyplot as plt\n%matplotlib inline\nimport seaborn as sns","154d6628":"\ndf=pd.read_csv(\"\/kaggle\/input\/dataco-smart-supply-chain-for-big-data-analysis\/DataCoSupplyChainDataset.csv\")\ndf.head()\n","a1ba7e5b":"df_info=pd.read_csv(\"\/kaggle\/input\/dataco-smart-supply-chain-for-big-data-analysis\/DescriptionDataCoSupplyChain.csv\")\ndf_info","ebcf2e0b":"df.shape","8f85182a":"df.columns","09337705":"df.info()","076c76c9":"sns.heatmap(df.isnull(),yticklabels=False,cmap=\"viridis\")","45f5b313":"df.isnull().sum()","e9d7af52":"df['Customer Full Name'] = df['Customer Fname'].astype(str)+df['Customer Lname'].astype(str)\ndf.drop('Customer Lname',axis=1,inplace=True)\ndf.drop('Product Description',axis=1,inplace=True)\ndf['Customer Zipcode']=df['Customer Zipcode'].fillna(0)\ndf.drop('Order Zipcode',axis=1,inplace=True)","a237aa6f":"sns.heatmap(df.isnull(),yticklabels=False,cmap=\"viridis\")","da7c5823":"data=df[(df['Order Country']=='India') & (df['Order Status']=='PENDING')]\nprint(\"Number of Cities in India where order status in pending\",data[['Order City','Order Country','Order Status']].shape[0])\nprint(\"The cities in India where order status is Pending\")\ndata1=data[['Order City','Order Country','Order Status']]\ndata1.head()\n","4614d69a":"data1=data1['Order City'].value_counts().plot.bar(figsize=(20,8), title=\"Cities with Pending Status\")","89488b70":"data2=df[df['Order Status']=='SUSPECTED_FRAUD']\ndata2=data2['Order Country'].value_counts().nlargest(10).plot.bar(figsize=(20,8), title=\"Countries with highest Fraud\")\n","69c32020":"max_discount = df['Order Item Discount'].max()\ndata3=df[df['Order Item Discount']==max_discount]\ndata3[['Product Name','Order Item Discount']]","7d6aff2e":"def fun(row):\n    if(row.startswith('Nike')):\n        return 'Nike'\n    else:\n        return row\ndf['Product Name'] =df['Product Name'].apply(fun)\n\ndf['shipping date (DateOrders)'] = pd.to_datetime(df['shipping date (DateOrders)'], format='%m\/%d\/%Y %H:%M')\ndf['Year'] = pd.DatetimeIndex(df['shipping date (DateOrders)']).year\ndata5 = df[df['Product Name']=='Nike']\nsns.countplot(x ='Product Name', data = data5,hue='Year').set(title='Yearly Sales', xlabel='', ylabel='Sales')","0ebc3075":"df['Order Status'].unique()","15230a15":"data4=df[(df[\"Days for shipping (real)\"] > df[\"Days for shipment (scheduled)\"]) & (df['Order Status']=='COMPLETE')|(df['Order Status']=='CLOSED')]\ndata4.shape[0]","5c450fba":"<strong>Importing the dependencies<strong>","056de508":"<center><strong>The product with the highest discount: SOLE E35 Elliptical<\/strong><\/center>","bf3907a6":"<strong>Data Cleaning<strong>","8b23fbd1":"<strong>Which country has the most suspected fraud ?<\/strong>","078e78f9":"<strong>List all the cities and the respective number of pending orders in India.<\/strong>","3851c7f2":"<strong>Reading the Data<\/strong>","9159dce7":"<center><strong>In the year 2017 minimum Nike Prodcts were sold<\/strong><\/center>","544e1a80":"<strong>Advanced EDA<\/strong>","445044e0":"<strong>Which year had the minimum sales of the \"Nike\" Products ?<\/strong>","f928ec63":"<center><strong>The number of successfully processed Days for shipping(real) is greater than Days for shipment(scheduled)  is 103400<\/strong><\/center>","f86ba772":"<center><strong>The country with the highest fraund: Estados Unidos<\/strong><\/center> **","7135f2d0":"<strong>Basic EDA<\/strong>","045e539f":"<strong>Which product(s) has\/have the maximum discount ?<\/strong>","48a27f9d":"<strong>How may successfully processed orders have days for shipping real(Real)>Days for shipment(Scheduled) ?<\/strong>"}}