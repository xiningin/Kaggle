{"cell_type":{"9df7d347":"code","1ba1fe60":"code","363dc719":"code","e44c0c46":"code","61dacf4f":"code","aab1af8b":"code","c85f1a66":"code","477119dd":"code","1dd1dbfe":"code","d2fc1f7c":"markdown","b74c3232":"markdown","e3c9ec1d":"markdown","377d9669":"markdown","3991bea5":"markdown","d6039a31":"markdown"},"source":{"9df7d347":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","1ba1fe60":"from keras.datasets import reuters\n\n(train_data, train_label), (test_data, test_label) = reuters.load_data(num_words=10000)\n\nprint('Training set has {} entries of data'.format(len(train_data)))\nprint('Test set has {} entries of data'.format(len(test_data)))","363dc719":"def vectorize_sequences(sequences, dimension=10000):\n    result = np.zeros((len(sequences), dimension))\n    for i, sequence in enumerate(sequences):\n        result[i, sequence] = 1\n    return result\n\nX_train = vectorize_sequences(train_data)\nX_test = vectorize_sequences(test_data)\n\nprint(train_data[0])\nprint(X_train[0])","e44c0c46":"def to_one_hot(labels, dimension=46):\n    result = np.zeros((len(labels), dimension))\n    for i, label in enumerate(labels):\n        result[i, label] = 1\n    return result\n\ny_train = to_one_hot(train_label)\ny_test = to_one_hot(test_label)\n\nprint(train_label[0])\nprint(y_train[0])\n\n# Or the code below\n# from keras.utils.np_utils import to_categorical\n# y_train = to_categorical(train_label)\n# y_test = to_categorical(test_label)","61dacf4f":"from keras.models import Sequential\nfrom keras.layers import Dense\n\nmodel = Sequential()\nmodel.add(Dense(64, activation='relu', input_shape=(10000,)))\nmodel.add(Dense(64, activation='relu'))\nmodel.add(Dense(46, activation='softmax'))\n\nmodel.compile(optimizer='rmsprop', loss='categorical_crossentropy', metrics=['accuracy'])","aab1af8b":"X_val = X_train[:1000]\npartial_X_train = X_train[1000:]\n\ny_val = y_train[:1000]\npartial_y_train = y_train[1000:]\n\nhistory = model.fit(partial_X_train, partial_y_train, epochs=20, batch_size=512, validation_data=(X_val, y_val))","c85f1a66":"import matplotlib.pyplot as plt\n%matplotlib inline\n\nloss = history.history['loss']\nval_loss = history.history['val_loss']\n\nacc = history.history['accuracy']\nval_acc = history.history['val_accuracy']\n\nepochs = [i for i in range(1, 21)]\n\nplt.plot(epochs, loss, 'bo',label='Training loss')\nplt.plot(epochs, val_loss, 'ro',label='Validation loss')\nplt.title('Training and Validation Loss')\nplt.xlabel('Epochs')\nplt.ylabel('Loss')\nplt.legend()\nplt.show()\n\nplt.plot(epochs, acc, 'bo',label='Training Acc')\nplt.plot(epochs, val_acc, 'ro',label='Validation Acc')\nplt.title('Training and Validation Accuracy')\nplt.xlabel('Epochs')\nplt.ylabel('Accuracy')\nplt.legend()\nplt.show()","477119dd":"model = Sequential()\nmodel.add(Dense(64, activation='relu', input_shape=(10000,)))\nmodel.add(Dense(64, activation='relu'))\nmodel.add(Dense(46, activation='softmax'))\n\nmodel.compile(optimizer='rmsprop', loss='categorical_crossentropy', metrics=['accuracy'])\nmodel.fit(partial_X_train, partial_y_train, epochs=10, batch_size=512, validation_data=(X_val, y_val))\nresult = model.evaluate(X_test, y_test)\n\nprint(result)","1dd1dbfe":"model = Sequential()\n# 3 hidden layers\nmodel.add(Dense(64, activation='relu', input_shape=(10000,)))\nmodel.add(Dense(64, activation='relu'))\nmodel.add(Dense(64, activation='relu'))\nmodel.add(Dense(46, activation='softmax'))\n\nmodel.compile(optimizer='rmsprop', loss='categorical_crossentropy', metrics=['accuracy'])\nmodel.fit(partial_X_train, partial_y_train, epochs=10, batch_size=512, validation_data=(X_val, y_val))\nresult = model.evaluate(X_test, y_test)\n\nprint(result)","d2fc1f7c":"In this multiclass classification project I will build a neural network model to predict the topic based on the words in article. The data has been preprocessed from words to integer so I will be mainly focused on the process of building a model.\n\nAll the codes are originally from \"Deep Learning With Python\" by Fran\u00e7ois Chollet. This notebook is more like a note to keep my study progress of the book.","b74c3232":"The gap between training and validation set becomes larger and shows the sign of overfitting at around epoch 10. Therefore, we should stop our model right there to maintain its accuracy on unseen data.","e3c9ec1d":"# Key Takeaway\n\nWhen handling multiclass labels such as this exercise, make sure the units in each hidden layer are always more than the number of classes. If not, necessary information is likely lost because it is too compressed in limited number of units.","377d9669":"# Visualizing the Result","3991bea5":"# Different Try","d6039a31":"# Building Model\n\nSince there are 46 different classes, the units of each layer have to be rather more so that important information would not be lost during training."}}