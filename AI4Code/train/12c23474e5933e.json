{"cell_type":{"515286bf":"code","68ec09ef":"code","f707f23a":"code","d3864f3a":"code","fe62bc3d":"code","3c331563":"code","7e869682":"code","765c29bf":"code","89b5b790":"code","b9126569":"code","3a2f9652":"code","1fe8f929":"code","749cdb08":"code","c638670e":"code","be2c6ad2":"code","6f765a35":"code","f928a1b5":"code","ac78fcdf":"code","7da102e3":"code","7cb4a5f7":"code","0556ee08":"code","acf4e4f0":"code","676a443e":"code","60e1e9b1":"code","dbd0b9e1":"code","c8189b32":"code","557fd158":"markdown","3e54bdf9":"markdown","a8c35a5e":"markdown","9b29702b":"markdown","8e1b3fae":"markdown","4b7706b2":"markdown","f569d1ba":"markdown","7ac0e91e":"markdown"},"source":{"515286bf":"# declara\u00e7\u00f5es\nimport pandas as pd\nimport numpy as np\n#import chart_studio.plotly as py\nfrom plotly.offline import init_notebook_mode,iplot\ninit_notebook_mode(connected=True)\nimport plotly.graph_objects as go\nfrom plotly import tools\nimport datashader as ds\nfrom datashader import transfer_functions as tf","68ec09ef":"# carregando dataset\ndados = pd.read_csv('..\/input\/leagueoflegends\/LeagueofLegends.csv')","f707f23a":"dados.shape","d3864f3a":"dados.describe()","fe62bc3d":"dados.info()","3c331563":"dados.isnull().sum()","7e869682":"# Substituindo nomes dos times nulos por 'SemTag'\ndados.update(dados[['blueTeamTag','redTeamTag']].fillna('SemTag'))","765c29bf":"# Substituindo nomes dos jogadores nulos por 'SemNome'\ndados.update(dados[['blueTop','blueJungle','blueMiddle','blueADC','blueSupport','redTop','redJungle','redMiddle','redADC','redSupport']].fillna('SemNome'))","89b5b790":"# Por alguma raz\u00e3o alguns jogaores estavam com '=' no nome, foi substituido por 'SemNome'\ndados.update(dados[['blueJungle','redJungle']].replace('=','SemNome'))","b9126569":"# Visualizando dados\n##dados.loc[dados['blueTeamTag']=='SemTag'][['League','Type','blueTeamTag','redTeamTag','blueTop','blueJungle','blueMiddle','blueADC','blueSupport','redTop','redJungle','redMiddle','redADC','redSupport']]","3a2f9652":"dados[['Year', 'bResult', 'rResult']].groupby('Year', as_index=False).sum()","1fe8f929":"# excluindo dados que n\u00e3o ser\u00e3o utilizados\ndados.drop(dados[dados.Year == 2014].index, inplace=True)\ndados.drop(dados[dados.Year == 2018].index, inplace=True)","749cdb08":"#filtrando colunas para analise\ndf_lol = dados[['Year','bResult','rResult','gamelength','goldblue','bKills','bTowers','bInhibs','bDragons','bBarons','bHeralds','goldred','rKills','rTowers','rInhibs','rDragons','rBarons','rHeralds','Address']]","c638670e":"temp = df_lol[['Year', 'bResult', 'rResult']].groupby('Year', as_index=False).sum()\ntemp['total'] = temp[['bResult', 'rResult']].sum(axis=1)\ntemp['bPercent'] = (temp['bResult'] * 100)\/ temp['total']\ntemp['rPercent'] = (temp['rResult'] * 100)\/ temp['total']\n\nfig = go.Figure(data=[\n    go.Bar(name='Blue team', x=temp['Year'], y=temp['bPercent'], text=temp['bPercent'], textposition='auto'),\n    go.Bar(name='Red team', x=temp['Year'], y=temp['rPercent'], text=temp['rPercent'], textposition='auto')\n])\nfig.update_layout(barmode='stack')\nfig.show()","be2c6ad2":"first_team = df_lol.loc[df_lol['bResult'] == 1]\nsecond_team = df_lol.loc[df_lol['rResult'] == 1]","6f765a35":"'goldblue','bKills','bTowers','bInhibs','bDragons','bBarons','bHeralds'\ntrace1 = go.Histogram(x=first_team['bKills'], text=['0-None', '1- First Team', '2- Second Team'],histnorm='probability',marker=dict(color=\"crimson\",line=dict(color='black', width=2)),opacity=0.75)\n\ntrace2 = go.Histogram(x=second_team['rKills'],text=['0-None', '1- First Team', '2- Second Team'],histnorm='probability',marker=dict(color=\"blue\",line=dict(color='black', width=2)),opacity=0.75)\n\ntrace3 = go.Histogram(x=first_team['bTowers'],text=['0-None', '1- First Team', '2- Second Team'],histnorm='probability',marker=dict(color=\"grey\",line=dict(color='black', width=2)),opacity=0.75)\n\ntrace4 = go.Histogram(x=second_team['rTowers'],text=['0-None', '1- First Team', '2- Second Team'],histnorm='probability',marker=dict(color=\"yellow\",line=dict(color='black', width=2)),opacity=0.75)\n\ntrace5 = go.Histogram(x=first_team['bBarons'],text=['0-None', '1- First Team', '2- Second Team'],histnorm='probability',marker=dict(color=\"pink\",line=dict(color='black', width=2)),opacity=0.75)\n\ntrace6 = go.Histogram(x=second_team['rBarons'],text=['0-None', '1- First Team', '2- Second Team'],histnorm='probability',marker=dict(color=\"green\",line=dict(color='black', width=2)),opacity=0.7)\n\ntrace7 = go.Histogram(x=first_team['bInhibs'],text=['0-None', '1- First Team', '2- Second Team'],histnorm='probability',marker=dict(color=\"purple\",line=dict(color='black', width=2)),opacity=0.75)\n\ntrace8 = go.Histogram(x=second_team['rInhibs'],text=['0-None', '1- First Team', '2- Second Team'],histnorm='probability',marker=dict(color=\"slateblue\",line=dict(color='black', width=2)),opacity=0.7)\n\ntrace9 = go.Histogram(x=first_team['bDragons'],text=['0-None', '1- First Team', '2- Second Team'],histnorm='probability',marker=dict(color=\"brown\",line=dict(color='black', width=2)),opacity=0.75)                                \n\ntrace10 = go.Histogram(x=second_team['rDragons'],text=['0-None', '1- First Team', '2- Second Team'],histnorm='probability',marker=dict(color=\"red\",line=dict(color='black', width=2)),opacity=0.7)\n\ntrace11 = go.Histogram(x=first_team['bHeralds'],text=['0-None', '1- First Team', '2- Second Team'],histnorm='probability',marker=dict(color=\"orange\",line=dict(color='black', width=2)),opacity=0.75)                                \n\ntrace12 = go.Histogram(x=second_team['rHeralds'],text=['0-None', '1- First Team', '2- Second Team'],histnorm='probability',marker=dict(color=\"yellowgreen\",line=dict(color='black', width=2)),opacity=0.7)\n\nfig = tools.make_subplots(rows=6, cols=2,vertical_spacing=0.1,print_grid=False )\n \nfig.append_trace(trace1, 1, 1)\nfig.append_trace(trace2, 1, 2)\nfig.append_trace(trace3, 2, 1)\nfig.append_trace(trace4, 2, 2)\nfig.append_trace(trace5, 3, 1)\nfig.append_trace(trace6, 3, 2)\nfig.append_trace(trace7, 4, 1)\nfig.append_trace(trace8, 4, 2)\nfig.append_trace(trace9, 5, 1)\nfig.append_trace(trace10, 5, 2)\nfig.append_trace(trace11, 6, 1)\nfig.append_trace(trace12, 6, 2)\nfig['layout'].update( annotations=[dict(showarrow=False,text=\"Teams\",x=0.5,y=-0.1,xref=\"paper\",yref=\"paper\",font=dict(size=15)),dict(showarrow=False, text='Probabilites',x=-0.08,y=0.5,xref=\"paper\",yref=\"paper\",textangle=270,font=dict(size=15)),\n                                  dict(showarrow=False,text=\"Kills When Blue Team wins\",x=0.13,y=1.03,xref=\"paper\",yref=\"paper\",font=dict(size=10)),\n                                  dict(showarrow=False,text=\"Kills When Red Team wins\",x=0.88,y=1.03,xref=\"paper\",yref=\"paper\",font=dict(size=10)),\n                                   dict(showarrow=False,text=\"Towers When Blue Team wins\",x=0.13,y=0.85,xref=\"paper\",yref=\"paper\",font=dict(size=10)),\n                                  dict(showarrow=False,text=\"Towers When Red Team wins\",x=0.88,y=0.85,xref=\"paper\",yref=\"paper\",font=dict(size=10)),\n                                  dict(showarrow=False,text=\"Barons When Blue Team wins\",x=0.13,y=0.65,xref=\"paper\",yref=\"paper\",font=dict(size=10)),\n                                  dict(showarrow=False,text=\"Barons When Red Team wins\",x=0.88,y=0.65,xref=\"paper\",yref=\"paper\",font=dict(size=10)),\n                                  dict(showarrow=False,text=\"Inhibitors When Blue Team wins\",x=0.13,y=0.46,xref=\"paper\",yref=\"paper\",font=dict(size=10)),\n                                  dict(showarrow=False,text=\"Inhibitors When Red Team wins\",x=0.88,y=0.46,xref=\"paper\",yref=\"paper\",font=dict(size=10)),\n                                  dict(showarrow=False,text=\"Dragons When Blue Team wins\",x=0.13,y=0.28,xref=\"paper\",yref=\"paper\",font=dict(size=10)),\n                                  dict(showarrow=False,text=\"Dragons When Red Team wins\",x=0.88,y=0.28,xref=\"paper\",yref=\"paper\",font=dict(size=10)),\n                                  dict(showarrow=False,text=\"Rift Heralds When Blue Team wins\",x=0.13,y=0.10,xref=\"paper\",yref=\"paper\",font=dict(size=10)),\n                                  dict(showarrow=False,text=\"Rift Heralds When Red Team wins\",x=0.90,y=0.10,xref=\"paper\",yref=\"paper\",font=dict(size=10))],                     \n            \n                     height=800,font=dict(family=\"Franklin Gothic\", size=10),showlegend=False, bargap=0.4,title=\"Probabilities of When a Team Wins\",plot_bgcolor=\"snow\" ,bargroupgap=0.1, paper_bgcolor='rgb(243, 243, 243)')\n\niplot(fig)\n","f928a1b5":"df = pd.read_csv('\/kaggle\/input\/leagueoflegends\/kills.csv')","ac78fcdf":"df = df.drop(['Address', 'Team', 'Victim', 'Killer', 'Assist_1', 'Assist_2', 'Assist_3', 'Assist_4'], axis=1)\ndf = df.rename(columns={'Time': 'time'})\ndf = df.loc[df.x_pos != 'TooEarly']\ndf = df.loc[df.x_pos.notnull()]\ndf.x_pos = df.x_pos.apply(lambda x: int(x))\ndf.y_pos = df.y_pos.apply(lambda y: int(y))","7da102e3":"def create_phase_category(df):\n    conditions = [\n        (df.time<17),\n        (17<df.time) & (df.time<32),\n        (32<df.time)]\n\n    choices = ['early', 'mid', 'late']\n    df['phase'] = np.select(conditions, choices, default='very_early')\n    df['phase'] = df['phase'].astype('category')\n    \n    return(df)","7cb4a5f7":"df.head()","0556ee08":"kill_df = create_phase_category(df)","acf4e4f0":"kill_df.groupby(['phase'], as_index=False).count().sort_values(by='phase')","676a443e":"def visualise_with_datashader(df):\n    color_key = {'very_early': 'black', 'early': 'lightyellow', 'mid': 'tomato', 'late': 'firebrick'}\n    \n    cvs = ds.Canvas()\n    agg = cvs.points(df, 'x_pos', 'y_pos', ds.count_cat('phase'))\n    \n    img = tf.shade(agg, color_key=color_key, how='eq_hist')\n    img = tf.set_background(img, 'black')\n    \n    return(img)","60e1e9b1":"print(f'Total points : {kill_df.shape[0]}')\n\nimg = visualise_with_datashader(kill_df)","dbd0b9e1":"img","c8189b32":"## Trabalhos","557fd158":"### Trabalhos Futuros\n\n**Fica como trabalho futuro usar o algoritmo de Regress\u00e3o Linear para fazer predi\u00e7\u00e3o das vit\u00f3rias**","3e54bdf9":"## Codifica\u00e7\u00e3o","a8c35a5e":"### Estudo:  \n\n#### Defini\u00e7\u00f5es:  \n#### Fases de uma partida de League of Legends:\n**early game**: 0 - 15 min   \n**mid game**: 16 - 30 min  \n**late game**: 30 min em diante  \n\n*obs: essa defini\u00e7\u00e3o \u00e9 s\u00f3 para efeito de estudos, pois a defini\u00e7\u00e3o das fases da partida s\u00e3o complexas e podem variar em cada partida.*  \n\n#### Rotas do mapa em League of Legends:\n**top lane**: rota de cima   \n**mid lane**: rota do meio  \n**bot lane**: rota de baixo  \n**jungle**: selva\n\n\n#### Dataset:  \n\nO dataset reuniu dados de partidas competitivas das principais ligas e competi\u00e7\u00f5es internacionais e da liga nacional (CBLoL), entre os anos de 2015 e 2017. Representados pelas colunas, temos atributos como: vit\u00f3ria do time azul ou vermelho, dura\u00e7\u00e3o da partida, campe\u00f5es utilizados por rota, nomes dos jogadores e etc.  \n\n#### Objetivo:\n\nO foco desse estudo \u00e9 levantar fortes indicadores de vit\u00f3ria, ou seja, quais atributos contribuem para a vit\u00f3ria de uma equipe.\n\n### Quest\u00f5es  \n\n1. Qual lado tem maior taxa de vit\u00f3rias?\n2. Quais atributos tem maior probabilidade de vitoria?\n3. Mapa de Kills","9b29702b":"# League of Legends","8e1b3fae":"#### Tratamento de dados faltantes","4b7706b2":"## Introdu\u00e7\u00e3o  \n\n\n![LeagueOfLegends](https:\/\/lolstatic-a.akamaihd.net\/frontpage\/apps\/prod\/harbinger-l10-website\/pt-br\/production\/pt-br\/static\/logo-800-47024e2aeaaa8651c172ba883264dd43.png)  \nFonte: [League Of Legends Br](https:\/\/br.leagueoflegends.com\/pt-br\/)\n\n### O que \u00e9 League of Legends: \n>League of Legends \u00e9 um jogo de estrat\u00e9gia em que duas equipes de cinco poderosos Campe\u00f5es se enfrentam para destruir a base uma da outra. Escolha entre mais de 140 Campe\u00f5es para realizar jogadas \u00e9picas, assegurar abates e destruir torres conforme voc\u00ea luta at\u00e9 a vit\u00f3ria.  \n\n#### Destrua a base\n>O Nexus \u00e9 o cora\u00e7\u00e3o da base de uma equipe. Destrua o Nexus inimigo primeiro para vencer a partida.\n\n![nexus](https:\/\/images.contentstack.io\/v3\/assets\/blt731acb42bb3d1659\/bltdc49f39e7bd3fa4c\/5e21837f1449ef10ab093f10\/New-player-guide.jpg)  \nFonte: [League Of Legends Br](https:\/\/br.leagueoflegends.com\/pt-br\/)\n","f569d1ba":"#### Informa\u00e7\u00f5es \u00fateis","7ac0e91e":"#### MOBA\nSegundo o site [Wikip\u00e9dia](https:\/\/pt.wikipedia.org\/wiki\/Multiplayer_online_battle_arena):  \n>Multiplayer online battle arena (MOBA, \"arena de batalha multijogador online\"), tamb\u00e9m conhecido como action real-time strategy (ARTS, \"estrat\u00e9gia de a\u00e7\u00e3o em tempo real\"), \u00e9 um g\u00eanero de jogos eletr\u00f4nicos onde o jogador controla um personagem em uma batalha entre dois times cujo objetivo \u00e9 derrotar a base principal inimiga\\[...].  \n\nLeague of Legends, ou **LOL**, como tamb\u00e9m e chamado, \u00e9 um jogo estilo MOBA, em que uma partida \u00e9 composta por 10 jogadores, dividos em duas equipes, azul e vermelho, sendo 5 contra 5 (5x5). O principal objetivo do jogo, o que tem como consequ\u00eancia a vit\u00f3ria de uma equipe, \u00e9 destruir a base da equipe inimiga, isso aliado a micros objetivos do mapa e suas estrat\u00e9gias.   \n\n![mapa](https:\/\/upload.wikimedia.org\/wikipedia\/commons\/thumb\/d\/dc\/Map_of_MOBA.svg\/250px-Map_of_MOBA.svg.png)\n>Representa\u00e7\u00e3o esquem\u00e1tica de um mapa de um MOBA:em amarelo est\u00e3o as tr\u00eas faixas; em verde, a selva; em azul, a base e as torres da equipe 1; em vermelho, a base e as torres da equipe 2.  \n\n#### Temporadas\nAt\u00e9 2018, as temporadas, ou *seasons* em ingl\u00eas, do jogo eram feitas por ano e duravam quase o ano todo, por exemplo, em 2017 tivemos a *season 7*, em 2018 a *season 8*, e assim por diante. Durante as seasons os jogadores, ou _**players**_, como \u00e9 chamado no mundo dos games, jogam partidas competitivas que os classific\u00e3o em um ranking. O que determina o ranking de um *player* s\u00e3o sua taxa de vit\u00f3ria e desempenho nas partidas. Players bastante competitivos e que jogam muitas horas por dia, est\u00e3o no topo do ranking, geralmente s\u00e3o jogadores profissionais, ou que ganham renda de alguma forma com o jogo, por exemplo, *streamears*. \n\n#### O Metagame \nUm artigo no [Techtudo](https:\/\/www.techtudo.com.br\/noticias\/2020\/04\/o-que-significa-metagame-entenda-termo-do-lol-dota-e-jogos-competitivos-esports.ghtml) diz:\n\n>\"Metagame\", ou apenas meta, \u00e9 um dos termos mais falados em jogos competitivos tais como como League of Legends (LoL), \\[...]. A palavra se refere a itens, armas, personagens, cartas, estrat\u00e9gias, t\u00e9cnicas e aborgagens que est\u00e3o mais dominantes ou populares em um jogo. \\[...] entender o meta de jogos competitivos \u00e9 muito importante. Assim, o jogador saber\u00e1 o melhor caminho para vencer ou se defender de um advers\u00e1rio. \\[...] Um meta din\u00e2mico impede que o jogo se torne estagnado e previs\u00edvel, o mantendo sempre competitivo. Para isso, as desenvolvedoras podem enfraquecer (nerfar) itens, personagens e armas muito populares ou poderosas (*overpowered*), para que estes \"saiam do meta\". Ou pelo contr\u00e1rio, eles podem receber melhorias (buffs), tornando uso vi\u00e1vel, colocando os mesmos no meta. \\[...]\n\nO **LOL** \u00e9 um jogo constantemente atualizado por sua desenvolvedora **Riot Games** , e essas atualiza\u00e7\u00f5es podem mudar a forma como \u00e9 jogado uma partida, culminando em mudan\u00e7as de estrat\u00e9gias, ou seja, o meta. Em cada temporada s\u00e3o lan\u00e7adas grandes atualiza\u00e7\u00f5es, sendo ainda mais significativas. \n\n#### P\u00fablico e Cen\u00e1rio competitivo\n\nSegundo o site [Wikip\u00e9dia](https:\/\/pt.wikipedia.org\/wiki\/League_of_Legends): \n\n>League of Legends foi bem recebido desde o seu lan\u00e7amento e sua popularidade cresceu ao decorrer dos anos. Em julho de 2012, foi o jogo para computador mais jogado na Am\u00e9rica do Norte e Europa em termos de n\u00famero de horas jogadas. At\u00e9 janeiro de 2014, mais de 67 milh\u00f5es de pessoas jogavam League of Legends por m\u00eas, 27 milh\u00f5es por dia e mais de 7,5 milh\u00f5es durante o hor\u00e1rio de pico.  \n\n>League of Legends tem um cen\u00e1rio competitivo grande e ativo. Na Am\u00e9rica do Norte e Europa, a Riot Games organiza o League of Legends Championship Series (tamb\u00e9m conhecido como \"LCS\"), que consiste em 10 times profissionais de cada continente. Competi\u00e7\u00f5es regionais semelhantes existem na China, Coreia, Taiwan e Sudeste da \u00c1sia, Brasil, Am\u00e9rica Latina, Turquia, CEI (Comunidade dos Estados Independentes - antiga Uni\u00e3o Sovi\u00e9tica) e Jap\u00e3o. Essas competi\u00e7\u00f5es regionais levam os melhores times ao League of Legends World Championship, um campeonato mundial que ocorre anualmente. Em 2013, o pr\u00eamio do torneio foi de $1 milh\u00e3o e teve 32 milh\u00f5es de espectadores onlines. O torneio de 2014 teve o quinto maior pr\u00eamio da hist\u00f3ria de eSports, dando 2,3 milh\u00f5es de d\u00f3lares ao time vencedor.  \n"}}