{"cell_type":{"5ca6a99d":"code","d9c22897":"code","96b445a0":"code","3399b5a4":"code","7ea32c80":"code","207c7e0a":"code","60cd7130":"code","1e1c97cb":"code","b62487f2":"code","808c9383":"code","57ad3fe5":"code","b1969a59":"code","f17299cd":"code","57e31f27":"code","83cff786":"code","92f8a0a4":"code","deb25b1c":"code","1939f916":"code","c439da28":"code","431afc96":"code","8ea1696f":"code","042c9aaa":"code","c485cfa5":"code","d647d154":"code","6036dfa2":"code","81244128":"code","c0607299":"code","82e41f79":"code","1de712a0":"code","9ea7af03":"code","8d3fddcf":"code","c32d6f80":"code","eadc3128":"code","c4811da0":"markdown","dd2e52bc":"markdown","ea83e41c":"markdown","697c99cd":"markdown","95ec76fe":"markdown","db2c60ad":"markdown"},"source":{"5ca6a99d":"import pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport numpy as np\n\nimport warnings\nwarnings.filterwarnings('ignore')\n\nfrom sklearn.preprocessing import LabelEncoder\nfrom sklearn.preprocessing import  OneHotEncoder as ohe\nfrom sklearn.preprocessing import StandardScaler as ss\nfrom sklearn.compose import ColumnTransformer as ct\nfrom sklearn.impute import SimpleImputer\nfrom imblearn.over_sampling import SMOTE, ADASYN\nfrom sklearn.decomposition import PCA\nfrom sklearn.pipeline import Pipeline\nfrom sklearn.pipeline import make_pipeline\nfrom sklearn.model_selection import train_test_split\n\nfrom sklearn.ensemble import RandomForestClassifier as rf\nfrom sklearn.ensemble import ExtraTreesClassifier\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.ensemble import GradientBoostingClassifier as gbm\nfrom xgboost.sklearn import XGBClassifier\nimport lightgbm as lgb\n\n\nfrom sklearn.metrics import accuracy_score\nfrom sklearn.metrics import auc, roc_curve\nfrom sklearn.metrics import f1_score\nfrom sklearn.metrics import average_precision_score\nimport sklearn.metrics as metrics\nfrom xgboost import plot_importance\nfrom sklearn.model_selection import cross_val_score\nfrom sklearn.metrics import confusion_matrix\n\n\nfrom bayes_opt import BayesianOptimization\nfrom skopt import BayesSearchCV\nfrom eli5.sklearn import PermutationImportance\n\n\n%matplotlib inline","d9c22897":"# Read in data\ntrain = pd.read_csv('..\/input\/train.csv')\ntest = pd.read_csv('..\/input\/test.csv')","96b445a0":"train.head()","3399b5a4":"train.shape, test.shape","7ea32c80":"train.isnull().values.any()","207c7e0a":"test.isnull().values.any()","60cd7130":"train.info()\ntrain.isnull().values.sum(axis=0)","1e1c97cb":"train_describe = train.describe()\ntrain_describe","b62487f2":"test_describe = test.describe()\ntest_describe","808c9383":"test.isnull().values.sum(axis=0)","57ad3fe5":"plt.figure(figsize=(12, 5))\nplt.hist(train.Target.values, bins=4)\nplt.title('Histogram - target counts')\nplt.xlabel('Count')\nplt.ylabel('Target')\nplt.show()","b1969a59":"plt.title(\"Distribution of Target\")\nsns.distplot(train['Target'].dropna(),color='blue', kde=True,bins=100)\nplt.show()","f17299cd":"sns.set_style(\"whitegrid\")\nax = sns.violinplot(x=train.Target.values)\nplt.show()","57e31f27":"plt.title(\"Distribution of log(target)\")\nsns.distplot(np.log1p(train['Target']).dropna(),color='blue', kde=True,bins=100)\nplt.show()","83cff786":"sns.set_style(\"whitegrid\")\nax = sns.violinplot(x=np.log(1+train.Target.values))\nplt.show()","92f8a0a4":"yes_no_map = {'no':0,'yes':1}\ntrain['dependency'] = train['dependency'].replace(yes_no_map).astype(np.float32)\ntrain['edjefe'] = train['edjefe'].replace(yes_no_map).astype(np.float32)\ntrain['edjefa'] = train['edjefa'].replace(yes_no_map).astype(np.float32)","deb25b1c":"train.drop(['Id','idhogar',\"dependency\",\"edjefe\",\"edjefa\"], inplace = True, axis =1)\n\ntest.drop(['Id','idhogar',\"dependency\",\"edjefe\",\"edjefa\"], inplace = True, axis =1)\n","1939f916":"y = train.iloc[:,137]\ny.unique()","c439da28":"X = train.iloc[:,1:138]\nX.shape","431afc96":"my_imputer = SimpleImputer()\nX = my_imputer.fit_transform(X)\nscale = ss()\nX = scale.fit_transform(X)\npca = PCA(0.95)\nX = pca.fit_transform(X)","8ea1696f":"X_train, X_test, y_train, y_test = train_test_split(\n                                                    X,\n                                                    y,\n                                                    test_size = 0.2)","042c9aaa":"modelrf = rf()","c485cfa5":"import time\nstart = time.time()\nmodelrf = modelrf.fit(X_train, y_train)\nend = time.time()\n(end-start)\/60","d647d154":"classes = modelrf.predict(X_test)","6036dfa2":"(classes == y_test).sum()\/y_test.size ","81244128":"KNeighborsClassifier","c0607299":"modelneigh = KNeighborsClassifier(n_neighbors=4)\nstart = time.time()\nmodelneigh = modelneigh.fit(X_train, y_train)\nend = time.time()\n(end-start)\/60","82e41f79":"classes = modelneigh.predict(X_test)\n\nclasses\n(classes == y_test).sum()\/y_test.size ","1de712a0":"modelgbm=gbm()\nstart = time.time()\nmodelgbm = modelgbm.fit(X_train, y_train)\nend = time.time()\n(end-start)\/60","9ea7af03":"classes = modelgbm.predict(X_test)\n\nclasses\n(classes == y_test).sum()\/y_test.size ","8d3fddcf":"modellgb = lgb.LGBMClassifier(max_depth=-1, learning_rate=0.1, objective='multiclass',\n                             random_state=None, silent=True, metric='None', \n                             n_jobs=4, n_estimators=5000, class_weight='balanced',\n                             colsample_bytree =  0.93, min_child_samples = 95, num_leaves = 14, subsample = 0.96)","c32d6f80":"start = time.time()\nmodellgb = modellgb.fit(X_train, y_train)\nend = time.time()\n(end-start)\/60","eadc3128":"classes = modellgb.predict(X_test)\n\nclasses\n(classes == y_test).sum()\/y_test.size ","c4811da0":"Modelling with Light Gradient Booster","dd2e52bc":"Splitting the data into train & test","ea83e41c":"Distribution of Target Variable","697c99cd":"Random Forest","95ec76fe":"> Missing Values","db2c60ad":"GradientBoostingClassifier"}}