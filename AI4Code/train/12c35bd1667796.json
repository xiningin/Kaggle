{"cell_type":{"1b46d004":"code","d949e1a7":"code","c6da5f5d":"code","e2f5647a":"code","25cb57f9":"code","707b4c12":"code","caf8bea4":"code","4bc78e11":"code","096dd3c1":"code","23287cc1":"code","ae51ec94":"code","c69ed4d5":"code","3674608c":"code","faf7bb4c":"code","ba8f9ebb":"code","8542d752":"code","985f8d8b":"code","d4a974c0":"code","b915e01d":"code","d76cfb14":"code","075085aa":"code","db96e8e3":"code","feb15eb1":"code","b1633abf":"code","2dc14f2a":"code","5abc587b":"code","c6072dbf":"code","81b8bede":"code","42cb3c9e":"code","ef1cd636":"code","6019aa1f":"code","4a42814d":"code","c8add310":"code","36a608e8":"code","39a8e38e":"code","eaafb51f":"markdown","6c768c90":"markdown","8548ddca":"markdown","f44bd0be":"markdown","cc836f20":"markdown","9ce312f2":"markdown","efbc2e96":"markdown","a32483a7":"markdown","33782f38":"markdown","bad139e9":"markdown","38102680":"markdown","85c6654b":"markdown","e737d54c":"markdown","bf92b984":"markdown","23956721":"markdown","be4dc39a":"markdown","332c354e":"markdown","ab221d41":"markdown","53f0a2c4":"markdown","4616bbf0":"markdown","24fc5928":"markdown","06361a18":"markdown","17de6127":"markdown","670eb387":"markdown","81f4399d":"markdown","225bd501":"markdown","ee21c015":"markdown","fc97de96":"markdown","4d0d4c5a":"markdown","68dd3867":"markdown","d9142078":"markdown","7d902e6a":"markdown","8d3778f7":"markdown","67afa1ab":"markdown","56236907":"markdown","9770b5aa":"markdown","ceaf6dae":"markdown","a546cdb2":"markdown","479fc544":"markdown","59f29deb":"markdown","63bdbee7":"markdown","ed26edb4":"markdown","ff615c46":"markdown","86d56eb6":"markdown","6554ae90":"markdown","b50e34e7":"markdown","a84ef221":"markdown","48a9e145":"markdown","4eafa34d":"markdown","c7daa0dc":"markdown","a50fc7d3":"markdown","9e8c1517":"markdown","e3f2c033":"markdown","2924668d":"markdown","ecb275aa":"markdown","8463a9f5":"markdown","dd1763d5":"markdown","bc506346":"markdown"},"source":{"1b46d004":"!nvidia-smi","d949e1a7":"import os\nimport io\nimport re\nfrom tqdm import tqdm\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n%matplotlib inline","c6da5f5d":"\"\"\"# Download data\nimport requests\nrequest = requests.get(\"https:\/\/drive.google.com\/uc?export=download&id=1wHt8PsMLsfX5yNSqrt2fSTcb8LEiclcf\")\nwith open(\"data.zip\", \"wb\") as file:\n    file.write(request.content)\n\n# Unzip data\nimport zipfile\nwith zipfile.ZipFile('data.zip') as zip:\n    zip.extractall('data') \"\"\"","e2f5647a":"#from google.colab import files\n\n#uploaded = files.upload()","25cb57f9":" # Load data and set labels\ndata = pd.read_excel('..\/input\/tunisian-texts\/Naim_Mhedhbi_Tunisian_Corpus.xlsx')\ndata['texts'] =data['texts'].astype(str)\n# Display 5 random samples\ndata.sample(20)\ndata['data_labels'].value_counts()","707b4c12":"data.shape","caf8bea4":"test_data = data.sample(frac=0.3,random_state=200)\ntest_data.shape\ndata=data.drop(test_data.index)\ndata.shape,test_data.shape","4bc78e11":"from sklearn.model_selection import train_test_split\n\nX = data.texts.values\ny = data.data_labels.values\n\nX_train, X_val, y_train, y_val =\\\n    train_test_split(X, y, test_size=0.1, random_state=2020)","096dd3c1":"# Load test data\n#test_data = pd.read_csv('data\/test_data.csv')\n\n# Keep important columns\n#test_data = test_data[['id', 'tweet']]\n\n# Display 5 samples from the test data\n#test_data.sample(5)","23287cc1":"import torch\n\nif torch.cuda.is_available():       \n    device = torch.device(\"cuda\")\n    print(f'There are {torch.cuda.device_count()} GPU(s) available.')\n    print('Device name:', torch.cuda.get_device_name(0))\n\nelse:\n    print('No GPU available, using the CPU instead.')\n    device = torch.device(\"cpu\")","ae51ec94":"import nltk\n# Uncomment to download \"stopwords\"\nnltk.download(\"stopwords\")\nfrom nltk.corpus import stopwords\n\ndef text_preprocessing(s):\n    \"\"\"\n    - Lowercase the sentence\n    - Change \"'t\" to \"not\"\n    - Remove \"@name\"\n    - Isolate and remove punctuations except \"?\"\n    - Remove other special characters\n    - Remove stop words except \"not\" and \"can\"\n    - Remove trailing whitespace\n    \"\"\"\n    s = s.lower()\n    # Change 't to 'not'\n    s = re.sub(r\"\\'t\", \" not\", s)\n    # Remove @name\n    s = re.sub(r'(@.*?)[\\s]', ' ', s)\n    # Isolate and remove punctuations except '?'\n    s = re.sub(r'([\\'\\\"\\.\\(\\)\\!\\?\\\\\\\/\\,])', r' \\1 ', s)\n    s = re.sub(r'[^\\w\\s\\?]', ' ', s)\n    # Remove some special characters\n    s = re.sub(r'([\\;\\:\\|\u2022\u00ab\\n])', ' ', s)\n    # Remove stopwords except 'not' and 'can'\n    s = \" \".join([word for word in s.split()\n                  if word not in stopwords.words('english')\n                  or word in ['not', 'can']])\n    # Remove trailing whitespace\n    s = re.sub(r'\\s+', ' ', s).strip()\n    \n    return s","c69ed4d5":"%%time\nfrom sklearn.feature_extraction.text import TfidfVectorizer\n\n# Preprocess text\nX_train_preprocessed = np.array([text_preprocessing(text) for text in X_train])\nX_val_preprocessed = np.array([text_preprocessing(text) for text in X_val])\n\n# Calculate TF-IDF\ntf_idf = TfidfVectorizer(ngram_range=(1, 3),\n                         binary=True,\n                         smooth_idf=False)\nX_train_tfidf = tf_idf.fit_transform(X_train_preprocessed)\nX_val_tfidf = tf_idf.transform(X_val_preprocessed)","3674608c":"from sklearn.model_selection import StratifiedKFold, cross_val_score\n\ndef get_auc_CV(model):\n    \"\"\"\n    Return the average AUC score from cross-validation.\n    \"\"\"\n    # Set KFold to shuffle data before the split\n    kf = StratifiedKFold(5, shuffle=True, random_state=1)\n\n    # Get AUC scores\n    auc = cross_val_score(\n        model, X_train_tfidf, y_train, scoring=\"roc_auc\", cv=kf)\n\n    return auc.mean()","faf7bb4c":"from sklearn.naive_bayes import MultinomialNB\n\nres = pd.Series([get_auc_CV(MultinomialNB(i))\n                 for i in np.arange(1, 10, 0.1)],\n                index=np.arange(1, 10, 0.1))\n\nbest_alpha = np.round(res.idxmax(), 2)\nprint('Best alpha: ', best_alpha)\n\nplt.plot(res)\nplt.title('AUC vs. Alpha')\nplt.xlabel('Alpha')\nplt.ylabel('AUC')\nplt.show()","ba8f9ebb":"from sklearn.metrics import accuracy_score, roc_curve, auc\n\ndef evaluate_roc(probs, y_true):\n    \"\"\"\n    - Print AUC and accuracy on the test set\n    - Plot ROC\n    @params    probs (np.array): an array of predicted probabilities with shape (len(y_true), 2)\n    @params    y_true (np.array): an array of the true values with shape (len(y_true),)\n    \"\"\"\n    preds = probs[:, 1]\n    fpr, tpr, threshold = roc_curve(y_true, preds)\n    roc_auc = auc(fpr, tpr)\n    print(f'AUC: {roc_auc:.4f}')\n       \n    # Get accuracy over the test set\n    y_pred = np.where(preds >= 0.5, 1, 0)\n    accuracy = accuracy_score(y_true, y_pred)\n    print(f'Accuracy: {accuracy*100:.2f}%')\n    \n    # Plot ROC AUC\n    plt.title('Receiver Operating Characteristic')\n    plt.plot(fpr, tpr, 'b', label = 'AUC = %0.2f' % roc_auc)\n    plt.legend(loc = 'lower right')\n    plt.plot([0, 1], [0, 1],'r--')\n    plt.xlim([0, 1])\n    plt.ylim([0, 1])\n    plt.ylabel('True Positive Rate')\n    plt.xlabel('False Positive Rate')\n    plt.show()","8542d752":"# Compute predicted probabilities\nnb_model = MultinomialNB(alpha=1.8)\nnb_model.fit(X_train_tfidf, y_train)\nprobs = nb_model.predict_proba(X_val_tfidf)\n\n# Evaluate the classifier\nevaluate_roc(probs, y_val)","985f8d8b":"\n!pip install transformers==2.8.0","d4a974c0":"def text_preprocessing(text):\n    \"\"\"\n    - Remove entity mentions (eg. '@united')\n    - Correct errors (eg. '&amp;' to '&')\n    @param    text (str): a string to be processed.\n    @return   text (Str): the processed string.\n    \"\"\"\n    # Remove '@name'\n    text = re.sub(r'(@.*?)[\\s]', ' ', text)\n\n    # Replace '&amp;' with '&'\n    text = re.sub(r'&amp;', '&', text)\n\n    # Remove trailing whitespace\n    text = re.sub(r'\\s+', ' ', text).strip()\n\n    return text","b915e01d":"# Print sentence 0\nprint('Original: ', X[150])\nprint('Processed: ', text_preprocessing(X[150]))","d76cfb14":"from transformers import BertTokenizer\n\n# Load the BERT tokenizer\ntokenizer = BertTokenizer.from_pretrained('bert-base-uncased', do_lower_case=True)\n\n# Create a function to tokenize a set of texts\ndef preprocessing_for_bert(data):\n    \"\"\"Perform required preprocessing steps for pretrained BERT.\n    @param    data (np.array): Array of texts to be processed.\n    @return   input_ids (torch.Tensor): Tensor of token ids to be fed to a model.\n    @return   attention_masks (torch.Tensor): Tensor of indices specifying which\n                  tokens should be attended to by the model.\n    \"\"\"\n    # Create empty lists to store outputs\n    input_ids = []\n    attention_masks = []\n\n    # For every sentence...\n    for sent in data:\n        # `encode_plus` will:\n        #    (1) Tokenize the sentence\n        #    (2) Add the `[CLS]` and `[SEP]` token to the start and end\n        #    (3) Truncate\/Pad sentence to max length\n        #    (4) Map tokens to their IDs\n        #    (5) Create attention mask\n        #    (6) Return a dictionary of outputs\n        encoded_sent = tokenizer.encode_plus(\n            text=text_preprocessing(sent),  # Preprocess sentence\n            add_special_tokens=True,        # Add `[CLS]` and `[SEP]`\n            max_length=MAX_LEN,                  # Max length to truncate\/pad\n            pad_to_max_length=True,         # Pad sentence to max length\n            #return_tensors='pt',           # Return PyTorch tensor\n            return_attention_mask=True      # Return attention mask\n            )\n        \n        # Add the outputs to the lists\n        input_ids.append(encoded_sent.get('input_ids'))\n        attention_masks.append(encoded_sent.get('attention_mask'))\n\n    # Convert lists to tensors\n    input_ids = torch.tensor(input_ids)\n    attention_masks = torch.tensor(attention_masks)\n\n    return input_ids, attention_masks","075085aa":"max_len = 512","db96e8e3":"# Concatenate train data and test data\nall_tweets = np.concatenate([data.texts.values, test_data.texts.values])\n\n# Encode our concatenated data\nencoded_tweets = [tokenizer.encode(sent, add_special_tokens=True) for sent in all_tweets]\n\n# Find the maximum length\nmax_len = max([len(sent) for sent in encoded_tweets])\nprint('Max length: ', max_len)","feb15eb1":"# Specify `MAX_LEN`\nMAX_LEN = 64\n\n# Print sentence 0 and its encoded token ids\ntoken_ids = list(preprocessing_for_bert([X[0]])[0].squeeze().numpy())\nprint('Original: ', X[0])\nprint('Token IDs: ', token_ids)\n\n# Run function `preprocessing_for_bert` on the train set and the validation set\nprint('Tokenizing data...')\ntrain_inputs, train_masks = preprocessing_for_bert(X_train)\nval_inputs, val_masks = preprocessing_for_bert(X_val)","b1633abf":"from torch.utils.data import TensorDataset, DataLoader, RandomSampler, SequentialSampler\n\n# Convert other data types to torch.Tensor\ntrain_labels = torch.tensor(y_train)\nval_labels = torch.tensor(y_val)\n\n# For fine-tuning BERT, the authors recommend a batch size of 16 or 32.\nbatch_size = 32\n\n# Create the DataLoader for our training set\ntrain_data = TensorDataset(train_inputs, train_masks, train_labels)\ntrain_sampler = RandomSampler(train_data)\ntrain_dataloader = DataLoader(train_data, sampler=train_sampler, batch_size=batch_size)\n\n# Create the DataLoader for our validation set\nval_data = TensorDataset(val_inputs, val_masks, val_labels)\nval_sampler = SequentialSampler(val_data)\nval_dataloader = DataLoader(val_data, sampler=val_sampler, batch_size=batch_size)","2dc14f2a":"%%time\nimport torch\nimport torch.nn as nn\nfrom transformers import BertModel\n\n# Create the BertClassfier class\nclass BertClassifier(nn.Module):\n    \"\"\"Bert Model for Classification Tasks.\n    \"\"\"\n    def __init__(self, freeze_bert=False):\n        \"\"\"\n        @param    bert: a BertModel object\n        @param    classifier: a torch.nn.Module classifier\n        @param    freeze_bert (bool): Set `False` to fine-tune the BERT model\n        \"\"\"\n        super(BertClassifier, self).__init__()\n        # Specify hidden size of BERT, hidden size of our classifier, and number of labels\n        D_in, H, D_out = 768, 50, 2\n\n        # Instantiate BERT model\n        self.bert = BertModel.from_pretrained('bert-base-uncased')\n\n        # Instantiate an one-layer feed-forward classifier\n        self.classifier = nn.Sequential(\n            nn.Linear(D_in, H),\n            nn.ReLU(),\n            #nn.Dropout(0.5),\n            nn.Linear(H, D_out)\n        )\n\n        # Freeze the BERT model\n        if freeze_bert:\n            for param in self.bert.parameters():\n                param.requires_grad = False\n        \n    def forward(self, input_ids, attention_mask):\n        \"\"\"\n        Feed input to BERT and the classifier to compute logits.\n        @param    input_ids (torch.Tensor): an input tensor with shape (batch_size,\n                      max_length)\n        @param    attention_mask (torch.Tensor): a tensor that hold attention mask\n                      information with shape (batch_size, max_length)\n        @return   logits (torch.Tensor): an output tensor with shape (batch_size,\n                      num_labels)\n        \"\"\"\n        # Feed input to BERT\n        outputs = self.bert(input_ids=input_ids,\n                            attention_mask=attention_mask)\n        \n        # Extract the last hidden state of the token `[CLS]` for classification task\n        last_hidden_state_cls = outputs[0][:, 0, :]\n\n        # Feed input to classifier to compute logits\n        logits = self.classifier(last_hidden_state_cls)\n\n        return logits","5abc587b":"from transformers import AdamW, get_linear_schedule_with_warmup\n\ndef initialize_model(epochs=4):\n    \"\"\"Initialize the Bert Classifier, the optimizer and the learning rate scheduler.\n    \"\"\"\n    # Instantiate Bert Classifier\n    bert_classifier = BertClassifier(freeze_bert=False)\n\n    # Tell PyTorch to run the model on GPU\n    bert_classifier.to(device)\n\n    # Create the optimizer\n    optimizer = AdamW(bert_classifier.parameters(),\n                      lr=5e-5,    # Default learning rate\n                      eps=1e-8    # Default epsilon value\n                      )\n\n    # Total number of training steps\n    total_steps = len(train_dataloader) * epochs\n\n    # Set up the learning rate scheduler\n    scheduler = get_linear_schedule_with_warmup(optimizer,\n                                                num_warmup_steps=0, # Default value\n                                                num_training_steps=total_steps)\n    return bert_classifier, optimizer, scheduler","c6072dbf":"import random\nimport time\n\n# Specify loss function\nloss_fn = nn.CrossEntropyLoss()\n\ndef set_seed(seed_value=42):\n    \"\"\"Set seed for reproducibility.\n    \"\"\"\n    random.seed(seed_value)\n    np.random.seed(seed_value)\n    torch.manual_seed(seed_value)\n    torch.cuda.manual_seed_all(seed_value)\n\ndef train(model, train_dataloader, val_dataloader=None, epochs=4, evaluation=False):\n    \"\"\"Train the BertClassifier model.\n    \"\"\"\n    # Start training loop\n    print(\"Start training...\\n\")\n    for epoch_i in range(epochs):\n        # =======================================\n        #               Training\n        # =======================================\n        # Print the header of the result table\n        print(f\"{'Epoch':^7} | {'Batch':^7} | {'Train Loss':^12} | {'Val Loss':^10} | {'Val Acc':^9} | {'Elapsed':^9}\")\n        print(\"-\"*70)\n\n        # Measure the elapsed time of each epoch\n        t0_epoch, t0_batch = time.time(), time.time()\n\n        # Reset tracking variables at the beginning of each epoch\n        total_loss, batch_loss, batch_counts = 0, 0, 0\n\n        # Put the model into the training mode\n        model.train()\n\n        # For each batch of training data...\n        for step, batch in enumerate(train_dataloader):\n            batch_counts +=1\n            # Load batch to GPU\n            b_input_ids, b_attn_mask, b_labels = tuple(t.to(device) for t in batch)\n\n            # Zero out any previously calculated gradients\n            model.zero_grad()\n\n            # Perform a forward pass. This will return logits.\n            logits = model(b_input_ids, b_attn_mask)\n\n            # Compute loss and accumulate the loss values\n            loss = loss_fn(logits, b_labels)\n            batch_loss += loss.item()\n            total_loss += loss.item()\n\n            # Perform a backward pass to calculate gradients\n            loss.backward()\n\n            # Clip the norm of the gradients to 1.0 to prevent \"exploding gradients\"\n            torch.nn.utils.clip_grad_norm_(model.parameters(), 1.0)\n\n            # Update parameters and the learning rate\n            optimizer.step()\n            scheduler.step()\n\n            # Print the loss values and time elapsed for every 20 batches\n            if (step % 20 == 0 and step != 0) or (step == len(train_dataloader) - 1):\n                # Calculate time elapsed for 20 batches\n                time_elapsed = time.time() - t0_batch\n\n                # Print training results\n                print(f\"{epoch_i + 1:^7} | {step:^7} | {batch_loss \/ batch_counts:^12.6f} | {'-':^10} | {'-':^9} | {time_elapsed:^9.2f}\")\n\n                # Reset batch tracking variables\n                batch_loss, batch_counts = 0, 0\n                t0_batch = time.time()\n\n        # Calculate the average loss over the entire training data\n        avg_train_loss = total_loss \/ len(train_dataloader)\n\n        print(\"-\"*70)\n        # =======================================\n        #               Evaluation\n        # =======================================\n        if evaluation == True:\n            # After the completion of each training epoch, measure the model's performance\n            # on our validation set.\n            val_loss, val_accuracy = evaluate(model, val_dataloader)\n\n            # Print performance over the entire training data\n            time_elapsed = time.time() - t0_epoch\n            \n            print(f\"{epoch_i + 1:^7} | {'-':^7} | {avg_train_loss:^12.6f} | {val_loss:^10.6f} | {val_accuracy:^9.2f} | {time_elapsed:^9.2f}\")\n            print(\"-\"*70)\n        print(\"\\n\")\n    \n    print(\"Training complete!\")\n\n\ndef evaluate(model, val_dataloader):\n    \"\"\"After the completion of each training epoch, measure the model's performance\n    on our validation set.\n    \"\"\"\n    # Put the model into the evaluation mode. The dropout layers are disabled during\n    # the test time.\n    model.eval()\n\n    # Tracking variables\n    val_accuracy = []\n    val_loss = []\n\n    # For each batch in our validation set...\n    for batch in val_dataloader:\n        # Load batch to GPU\n        b_input_ids, b_attn_mask, b_labels = tuple(t.to(device) for t in batch)\n\n        # Compute logits\n        with torch.no_grad():\n            logits = model(b_input_ids, b_attn_mask)\n\n        # Compute loss\n        loss = loss_fn(logits, b_labels)\n        val_loss.append(loss.item())\n\n        # Get the predictions\n        preds = torch.argmax(logits, dim=1).flatten()\n\n        # Calculate the accuracy rate\n        accuracy = (preds == b_labels).cpu().numpy().mean() * 100\n        val_accuracy.append(accuracy)\n\n    # Compute the average accuracy and loss over the validation set.\n    val_loss = np.mean(val_loss)\n    val_accuracy = np.mean(val_accuracy)\n\n    return val_loss, val_accuracy","81b8bede":"set_seed(42)    # Set seed for reproducibility\nbert_classifier, optimizer, scheduler = initialize_model(epochs=4)\ntrain(bert_classifier, train_dataloader, val_dataloader, epochs=4, evaluation=True)","42cb3c9e":"import torch.nn.functional as F\n\ndef bert_predict(model, test_dataloader):\n    \"\"\"Perform a forward pass on the trained BERT model to predict probabilities\n    on the test set.\n    \"\"\"\n    # Put the model into the evaluation mode. The dropout layers are disabled during\n    # the test time.\n    model.eval()\n\n    all_logits = []\n\n    # For each batch in our test set...\n    for batch in test_dataloader:\n        # Load batch to GPU\n        b_input_ids, b_attn_mask = tuple(t.to(device) for t in batch)[:2]\n\n        # Compute logits\n        with torch.no_grad():\n            logits = model(b_input_ids, b_attn_mask)\n        all_logits.append(logits)\n    \n    # Concatenate logits from each batch\n    all_logits = torch.cat(all_logits, dim=0)\n\n    # Apply softmax to calculate probabilities\n    probs = F.softmax(all_logits, dim=1).cpu().numpy()\n\n    return probs","ef1cd636":"# Compute predicted probabilities on the test set\nprobs = bert_predict(bert_classifier, val_dataloader)\n\n# Evaluate the Bert classifier\nevaluate_roc(probs, y_val)","6019aa1f":"# Concatenate the train set and the validation set\nfull_train_data = torch.utils.data.ConcatDataset([train_data, val_data])\nfull_train_sampler = RandomSampler(full_train_data)\nfull_train_dataloader = DataLoader(full_train_data, sampler=full_train_sampler, batch_size=32)\n\n# Train the Bert Classifier on the entire training data\nset_seed(42)\nbert_classifier, optimizer, scheduler = initialize_model(epochs=4)\ntrain(bert_classifier, full_train_dataloader, epochs=4)","4a42814d":"test_data.sample(5)","c8add310":"# Run `preprocessing_for_bert` on the test set\nprint('Tokenizing data...')\ntest_inputs, test_masks = preprocessing_for_bert(test_data.texts)\n\n# Create the DataLoader for our test set\ntest_dataset = TensorDataset(test_inputs, test_masks)\ntest_sampler = SequentialSampler(test_dataset)\ntest_dataloader = DataLoader(test_dataset, sampler=test_sampler, batch_size=32)","36a608e8":"# Compute predicted probabilities on the test set\nprobs = bert_predict(bert_classifier, test_dataloader)\n\n# Get predictions from the probabilities\nthreshold = 0.9\npreds = np.where(probs[:, 1] > threshold, 1, 0)\n\n# Number of tweets predicted non-negative\nprint(\"Number of tweets predicted non-negative: \", preds.sum())","39a8e38e":"output = test_data[preds==1]\nlist(output.sample(20).texts)","eaafb51f":"BERT-base consists of 12 transformer layers, each transformer layer takes in a list of token embeddings, and produces the same number of embeddings with the same hidden size (or dimensions) on the output. The output of the final transformer layer of the `[CLS]` token is used as the features of the sequence to feed a classifier.\n\nThe `transformers` library has the [`BertForSequenceClassification`](https:\/\/huggingface.co\/transformers\/v2.2.0\/model_doc\/bert.html#bertforsequenceclassification) class which is designed for classification tasks. However, we will create a new class so we can specify our own choice of classifiers.\n\nBelow we will create a BertClassifier class with a BERT model to extract the last hidden layer of the `[CLS]` token and a single-hidden-layer feed-forward neural network as our classifier.","6c768c90":"To evaluate the performance of our model, we will calculate the accuracy rate and the AUC score of our model on the validation set.","8548ddca":"To fine-tune our Bert Classifier, we need to create an optimizer. The authors recommend following hyper-parameters:\n\n- Batch size: 16 or 32\n- Learning rate (Adam): 5e-5, 3e-5 or 2e-5\n- Number of epochs: 2, 3, 4\n\nHuggingface provided the [run_glue.py](https:\/\/github.com\/huggingface\/transformers\/blob\/5bfcd0485ece086ebcbed2d008813037968a9e58\/examples\/run_glue.py#L109) script, an examples of implementing the `transformers` library. In the script, the AdamW optimizer is used.","f44bd0be":"Before tokenizing, we need to specify the maximum length of our sentences.","cc836f20":"### 4.1. Data Preparation","9ce312f2":"# B - Setup","efbc2e96":"### 1.2. TF-IDF Vectorizer","a32483a7":"By adding a simple one-hidden-layer neural network classifier on top of BERT and fine-tuning BERT, we can achieve near state-of-the-art performance, which is 10 points better than the baseline method although we only have 3,400 data points.\n\nIn addition, although BERT is very large, complicated, and have millions of parameters, we only need to fine-tune it in only 2-4 epochs. That result can be achieved because BERT was trained on the huge amount and already encode a lot of information about our language. An impresive performance achieved in a short amount of time, with a small amount of data has shown why BERT is one of the most powerful NLP models available at the moment. ","33782f38":"## 3. Train Our Model","bad139e9":"### 1.1. Preprocessing","38102680":"### 2.1. Download Dataset","85c6654b":"In the bag-of-words model, a text is represented as the bag of its words, disregarding grammar and word order. Therefore, we will want to remove stop words, punctuations and characters that don't contribute much to the sentence's meaning.","e737d54c":"We will use cross-validation and AUC score to tune hyperparameters of our model. The function `get_auc_CV` will return the average AUC score from cross-validation.","bf92b984":"## 1. Load Essential Libraries","23956721":"In this baseline approach, first we will use TF-IDF to vectorize our text data. Then we will use the Naive Bayes model as our classifier.\n\nWhy Naive Bayse? I have experiemented different machine learning algorithms including Random Forest, Support Vectors Machine, XGBoost and observed that Naive Bayes yields the best performance. In [Scikit-learn's guide](https:\/\/scikit-learn.org\/stable\/tutorial\/machine_learning_map\/index.html) to choose the right estimator, it is also suggested that Naive Bayes should be used for text data. I also tried using SVD to reduce dimensionality; however, it did not yield a better performance.","be4dc39a":"### 2.1. BERT Tokenizer","332c354e":"The Bert Classifer achieves 0.90 AUC score and 82.65% accuracy rate on the validation set. This result is 10 points better than the baseline method. ","ab221d41":"### 2.3. Load Test Data\nThe test data contains 4555 examples with no label. About 300 examples are non-complaining tweets. Our task is to identify their `id` and examine manually whether our results are correct.","53f0a2c4":"## 2. Dataset","4616bbf0":"Now let's tokenize our data.","24fc5928":"In order to apply the pre-trained BERT, we must use the tokenizer provided by the library. This is because (1) the model has a specific, fixed vocabulary and (2) the BERT tokenizer has a particular way of handling out-of-vocabulary words.\n\nIn addition, we are required to add special tokens to the start and end of each sentence, pad & truncate all sentences to a single constant length, and explicitly specify what are padding tokens with the \"attention mask\".\n\nThe `encode_plus` method of BERT tokenizer will:\n\n(1) split our text into tokens,\n\n(2) add the special `[CLS]` and `[SEP]` tokens, and\n\n(3) convert these tokens into indexes of the tokenizer vocabulary,\n\n(4) pad or truncate sentences to max length, and\n\n(5) create attention mask.\n\n\n\n\n","06361a18":"### 3.3. Training Loop","17de6127":"### 4.2. Predictions","670eb387":"# E - Conclusion","81f4399d":"By combining TF-IDF and the Naive Bayes algorithm, we achieve the accuracy rate of **72.65%** on the validation set. This value is the baseline performance and will be used to evaluate the performance of our fine-tune BERT model. ","225bd501":"We will create an iterator for our dataset using the torch DataLoader class. This will help save on memory during training and boost the training speed.","ee21c015":"The transformer library of Hugging Face contains PyTorch implementation of state-of-the-art NLP models including BERT (from Google), GPT (from OpenAI) ... and pre-trained model weights.","fc97de96":"In recent years the NLP community has seen many breakthoughs in Natural Language Processing, especially the shift to transfer learning. Models like ELMo, fast.ai's ULMFiT, Transformer and OpenAI's GPT have allowed researchers to achieves state-of-the-art results on multiple benchmarks and provided the community with large pre-trained models with high performance. This shift in NLP is seen as NLP's ImageNet moment, a shift in computer vision a few year ago when lower layers of deep learning networks with million of parameters trained on a specific task can be reused and fine-tuned for other tasks, rather than training new networks from scratch.\n\nOne of the most biggest milestones in the evolution of NLP recently is the release of Google's BERT, which is described as the beginning of a new era in NLP. In this notebook I'll use the HuggingFace's `transformers` library to fine-tune pretrained BERT model for a classification task. Then I will compare the BERT's performance  with a baseline model, in which I use a TF-IDF vectorizer and a Naive Bayes classifier. The `transformers` library help us quickly and efficiently fine-tune the state-of-the-art BERT model and yield an accuracy rate **10%** higher than the baseline model.\n\n**Reference**:\n\nTo understand **Transformer** (the architecture which BERT is built on) and learn how to implement BERT, I highly recommend reading the following sources:\n\n- [The Illustrated BERT, ELMo, and co.](http:\/\/jalammar.github.io\/illustrated-bert\/): A very clear and well-written guide to understand BERT.\n- [The documentation of the `transformers` library](https:\/\/huggingface.co\/transformers\/v2.2.0\/index.html)\n- [BERT Fine-Tuning Tutorial with PyTorch](http:\/\/mccormickml.com\/2019\/07\/22\/BERT-fine-tuning\/) by [Chris McCormick](http:\/\/mccormickml.com\/): A very detailed tutorial showing how to use BERT with the HuggingFace PyTorch library.\n\n","4d0d4c5a":"Now we will examine 20 random tweets from our predictions. 17 of them are correct, showing that the BERT Classifier acquires about 0.85 precision rate.","68dd3867":"### 3.2. Optimizer & Learning Rate Scheduler","d9142078":"## 1. Install the Hugging Face Library","7d902e6a":"### 3.4. Evaluation on Validation Set","8d3778f7":"Before making predictions on the test set, we need to redo processing and encoding steps done on the training data. Fortunately, we have written the `preprocessing_for_bert` function to do that for us.","67afa1ab":"There are about 300 non-negative tweets in our test set. Therefore, we will keep adjusting the decision threshold until we have about 300 non-negative tweets.\n\nThe threshold we will use is 0.992, meaning that tweets with a predicted probability greater than 99.2% will be predicted positive. This value is very high compared to the default 0.5 threshold.\n\nAfter manually examining the test set, I find that the sentiment classification task here is even difficult for human. Therefore, a high threshold will give us safe predictions.","56236907":"# A - Introduction","9770b5aa":"# D - Fine-tuning BERT","ceaf6dae":"Now, let's start training our BertClassifier!","a546cdb2":"In information retrieval, **TF-IDF**, short for **term frequency\u2013inverse document frequency**, is a numerical statistic that is intended to reflect how important a word is to a document in a collection or corpus. We will use TF-IDF to vectorize our text data before feeding them to machine learning algorithms.","479fc544":"The `MultinominalNB` class only have one hypterparameter - **alpha**. The code below will help us find the alpha value that gives us the highest CV AUC score.","59f29deb":"Let's revisit out test set shortly.","63bdbee7":"### 2.2. Create PyTorch DataLoader","ed26edb4":"### 2.2. Evaluation on Validation Set","ff615c46":"Before tokenizing our text, we will perform some slight processing on our text including removing entity mentions (eg. @united) and some special character. The level of processing here is much less than in previous approachs because BERT was trained with the entire sentences.","86d56eb6":"## 2. Train Naive Bayes Classifier","6554ae90":"# C - Baseline: TF-IDF + Naive Bayes Classifier","b50e34e7":"The prediction step is similar to the evaluation step that we did in the training loop, but simpler. We will perform a forward pass to compute logits and apply softmax to calculate probabilities.","a84ef221":"## 1. Data Preparation","48a9e145":"### 2.1. Hyperparameter Tuning","4eafa34d":"We will train our Bert Classifier for 4 epochs. In each epoch, we will train our model and evaluate its performance on the validation set. In more details, we will:\n\nTraining:\n- Unpack our data from the dataloader and load the data onto the GPU\n- Zero out gradients calculated in the previous pass\n- Perform a forward pass to compute logits and loss\n- Perform a backward pass to compute gradients (`loss.backward()`)\n- Clip the norm of the gradients to 1.0 to prevent \"exploding gradients\"\n- Update the model's parameters (`optimizer.step()`)\n- Update the learning rate (`scheduler.step()`)\n\nEvaluation:\n- Unpack our data and load onto the GPU\n- Forward pass\n- Compute loss and accuracy rate over the validation set\n\nThe script below is commented with the details of our training and evaluation loop. ","c7daa0dc":"## 2. Tokenization and Input Formatting","a50fc7d3":"## 4. Predictions on Test Set","9e8c1517":"### 3.5. Train Our Model on the Entire Training Data","e3f2c033":"## 3. Set up GPU for training","2924668d":"We will randomly split the entire training data into two sets: a train set with 90% of the data and a validation set with 10% of the data. We will perform hyperparameter tuning using cross-validation on the train set and use the validation set to compare models.","ecb275aa":"### 2.2. Load Train Data\nThe train data has 2 files, each containing 1700 complaining\/non-complaining tweets. Every tweets in the data contains at least a hashtag of an airline.\n\nWe will load the train data and label it. Because we use only the text data to classify, we will drop unimportant columns and only keep `id`, `tweet` and `label` columns.","8463a9f5":"### 3.1. Create BertClassifier","dd1763d5":"# Fine-tuning BERT for Sentiment Analysis\n[![Portfolio](https:\/\/img.shields.io\/badge\/Portfolio-chriskhanhtran.github.io-blue?logo=GitHub)](https:\/\/chriskhanhtran.github.io\/)","bc506346":"Google Colab offers free GPUs and TPUs. Since we'll be training a large neural network it's best to utilize these features.\n\nA GPU can be added by going to the menu and selecting:\n\n`Runtime -> Change runtime type -> Hardware accelerator: GPU`\n\nThen we need to run the following cell to specify the GPU as the device."}}