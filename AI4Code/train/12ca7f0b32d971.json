{"cell_type":{"01b10b93":"code","2ffc966c":"code","5ebc5973":"code","fb2fe334":"code","d42ff938":"code","eb4f9cfd":"code","8aa2414a":"code","c3cee195":"code","08ec638a":"code","f34df177":"code","28a2ff81":"code","7aa05b4b":"code","17e572f2":"code","ceedc43e":"code","7f85dc15":"code","c02935e0":"code","cdaee2dc":"code","6e6f13d2":"code","272b4f33":"code","8b0ec192":"code","a0a0f3e2":"code","16a05569":"code","f82eb4bc":"code","3bb49d82":"code","28d25eb2":"markdown","eeed7248":"markdown","40839c59":"markdown","0abef9ed":"markdown","8e84b96c":"markdown","806f7443":"markdown","6b3953b7":"markdown","c709d3ce":"markdown","3af285f5":"markdown","2b71a10c":"markdown","64605cfe":"markdown","a613f37e":"markdown","793398ec":"markdown","1b113eff":"markdown","08c3bddd":"markdown","a913dda6":"markdown","78742dc4":"markdown","e1dcd108":"markdown","f1c79c0b":"markdown","372b1f82":"markdown","b62c0600":"markdown","312d847b":"markdown","6243de03":"markdown","523bb18a":"markdown","b5b6393e":"markdown"},"source":{"01b10b93":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport sys\nimport time as t\nimport matplotlib.pyplot as plt\n\n# Input data files are available in the \"..\/input\/\" directory.\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.\ndef ln(length=20):\n    print('- ' * length)\n    \ndef arange2d(x,y,*r):\n    r = list(r)\n    if len(r) == 1:\n        r.append(r[0])\n        r[0] = 0\n        r.append(1)\n    elif len(r) == 2:\n        r.append(1)\n    elif len(r) == 3:\n        pass\n    else:\n        return 'please make sure you check the refrence'\n    arr = np.arange(r[0],r[1],r[2]).reshape((x,y))\n    return arr\n    \ndef arange3d(x,y,z,*r):\n    r = list(r)\n    if len(r) == 1:\n        r.append(r[0])\n        r[0] = 0\n        r.append(1)\n    elif len(r) == 2:\n        r.append(1)\n    elif len(r) == 3:\n        pass\n    else:\n        return 'please make sure you check the refrence'\n    arr = np.arange(r[0],r[1],r[2]).reshape((x,y,z))\n    return arr","2ffc966c":"array = np.arange(1,31)\narray = np.reshape(array, (6,5))\nprint(array)\n# a = np.arange(1,31).reshape((6, 5))\n# print(a)\n# a[2:4, 0:2]   \n# a[[0,1,2,3], [1,2,3,4]]        \n# a[[0,4,5], 3:]  ","5ebc5973":"#numpy accepts tuples and lists as parameters\nar1 = np.array([[1,2,3],[1,2,3]])\nar2 = np.array([(1,2,3),(1,2,3)])\n\nprint(ar1)\nln()\nprint(ar2)","fb2fe334":"#less memeory\nlisty = range(1000000)\narray = np.arange(1000000)\n\nlisty_size = sys.getsizeof(1) * len(listy) \/ 1000_000\narray_size = array.size * array.itemsize \/ 1000_000\n\nprint('size of listy = ' + str(listy_size) + ' MegaBytes')\nprint('size of array = ' + str(array_size) + ' MegaBytes')\nln()\nprint('You saved: ' + str(listy_size - array_size) + ' MegaBytes')","d42ff938":"#faster\nsize = 1000000\n\nl1 = range(size)\nl2 = range(size)\n\na1 = np.arange(size)\na2 = np.arange(size)\n\n#computing time for lists\nstart = t.time()\nresult = [(x,y) for x,y in zip(l1,l2)]\nprint(round((t.time() - start), 2) * 1000, ' milliseconds')\nln()\n\n#computing time for np.arrays\nstart = t.time()\nresult = a1 + a1 # as you can see arrays are more convenient than lists\nprint(round((t.time() - start), 2) * 1000, ' milliseconds')\n","eb4f9cfd":"a = np.array([\n    [1,2,3,4],\n    [5,6,7,8]\n])\n\nb = np.array((1,2,3))\n\nprint(a.ndim)\nln()\nprint(b.ndim)","8aa2414a":"a = np.array([1,2,3])\nprint(a.itemsize, ' bytes')","c3cee195":"a = np.array([1,2,3])\nprint(a.dtype)","08ec638a":"a = np.arange(1,31)\nprint('number of elements of a: ', a.size)\nln()\n\nb = np.arange(1,31).reshape(3,10)\nprint('number of elements of b: ', b.size)","f34df177":"a = arange2d(2,3, 1,7)\nprint(a.shape)\nprint(a)","28a2ff81":"a = arange2d(3,4 ,12)\nprint(a)\nln()\nb = a.reshape(4,3)\nprint(b)","7aa05b4b":"a = arange3d(2,3,3, 2*3*3)\nprint(a)\nln()\nprint(a[1,0,1]) #wanna print 10","17e572f2":"b = arange2d(3,4, 1,13)\nprint(b)\nln()\n#printing 4 8\nprint(b[:2, -1])","ceedc43e":"a = np.linspace(1,9,3, dtype='int8')\nprint(a)","7f85dc15":"a = np.random.randint(1,11, (5,3))\nprint(a)\nprint(a.max())\nprint(a.min())","c02935e0":"a = np.random.randint(1,11, (3,6))\nprint(a)\nprint(a.sum())","cdaee2dc":"#sum of rows \na = arange2d(3,6, 18)\nprint(a.sum(axis=1))\nln()\n\n#sum of columns\nprint(a.sum(axis=0))","6e6f13d2":"#square root\na = arange2d(2,3, 6)\n\nprint(a)\nln()\n\nprint(np.sqrt(a))\nln()\n\n#standard deviation\nprint(np.std(a))","272b4f33":"a = arange2d(2,3, 1,7)\nb = arange2d(2,3, 1,7)\n\nprint(a+b)\nln()\nprint(a-b)\nln()\nprint(a*b)\nln()\nprint(a\/b)\nln()","8b0ec192":"a = arange2d(2,3, 1,7)\nb = arange2d(2,3, 1,7)\n\nprint(np.vstack((a,b)))\nln()\nprint(np.hstack((a,b)))","a0a0f3e2":"a = arange2d(3,3, 1,10)\n\nprint(a.ravel())","16a05569":"a = np.arange(0,3*np.pi, 0.1)\n\n#sine \nsin = np.sin(a)\n\n#cosine\ncos = np.cos(a)\n\n#tan\ntan = np.tan(a)\n\nplt.plot(a,sin)\nplt.plot(a,cos)\nplt.plot(a,tan)","f82eb4bc":"a = np.arange(1,60)\n\n#expo fun.\nexpo = np.exp(a)\n\n#log fun.\nloge = np.log(a) #log base e\nlog10 = np.log10(a) #log base 10\n\n#plt.plot(a,expo)\nplt.plot(a,log)","3bb49d82":"#arange\nar = arange2d(2,5,1,11)\nar3d = arange3d(1,5,3,1,16)\nar3d2 = np.repeat(ar3d, 2, axis=0)\n\nprint(ar)\nln()\nprint(ar3d)\nln()\nprint(ar3d2)","28d25eb2":"# Numpy Special Functions","eeed7248":"### Speed","40839c59":"### linespacing (values equally spaced between other two values)","0abef9ed":"### sum","8e84b96c":"### datatype of an array","806f7443":"### mathimatical like-wise operations","6b3953b7":"### max and min","c709d3ce":"### slicing an array","3af285f5":"# Intro\n\n### What is numpy used for?\n     random algebra, fourier transform and random numbers cababilities\n### Advantages of numpy over lists?\n- less memory\n- fast\n- convenient\n\n### Numpy Operations\n- find the dimensions of an array (ndim)\n- find the byte size of each element (itemsize)\n- find the data types of the elements (dtype)\n- find the size of the array (all number of elements in the array[1d,2d,...nd])\n- find the shape of an array (the dimentions[total number of rows and columns] of the array[1d,2d,...nd]\n- reshaping an array (changing number of rows and columns)\n- slicing an array (accessing elements)\n- linespacing (values equally spaced between other two values)\n- min,max, and sum\n- axis (rows: called axis 1 and columns: called axis 0) \n[image of axis](https:\/\/drive.google.com\/open?id=1Uo3WiTolakUKmNwTHcZSZQSKN40N_-Sb)\n- other mathematical functions (square root, standard deviation)\n- element wise mathematical operations(addition, subtraction, divsion, multiplication)\n- concatenation (vertical, horizontal)\n- convert any shape into one row\n\n### Numpy Special Functions\n- $sin$,$cos$,$tan$...etc\n- exponential ($e$), logrethmic ($log$)","2b71a10c":"# Important","64605cfe":"### Memory","a613f37e":"### size of an array (total number of elements)","793398ec":"### mathematical operations","1b113eff":"### Dimensions","08c3bddd":"### shape of an array (number of columns and rows)","a913dda6":"### $e$ and $log$","78742dc4":"### Axis","e1dcd108":"# Basics","f1c79c0b":"### $sin$,$cos$,$tan$...etc","372b1f82":"### Byte size of each element","b62c0600":"# Numpy Operations","312d847b":"### Concatenation (vertical, horizontal)","6243de03":"### Reshaping an array","523bb18a":"# Lists vs numpy","b5b6393e":"### convert any shape into one row"}}