{"cell_type":{"6f5eaa05":"code","03dc30b2":"code","cdd5148a":"code","b7464914":"code","7b7e3cc0":"code","ba467b80":"code","d5d673a9":"code","9eb37d74":"code","97433308":"code","cd6d0860":"code","d96d9fd3":"code","2d4662f8":"code","2882ef8a":"code","29c7c00f":"code","57ea8b8f":"code","301ec60e":"code","0f9ed9a2":"code","2f7627ed":"code","0a78af71":"code","0cafdc29":"code","c5856f03":"code","337c2648":"code","2c2577a7":"code","e66fb423":"code","8e12b8fe":"code","4fe8d289":"code","d343372c":"code","24e3e8c9":"code","5083e75d":"code","1a0a6ff0":"code","23d46fb2":"code","25db254a":"markdown","68c1b956":"markdown","3ae7cb83":"markdown","27cdcf21":"markdown"},"source":{"6f5eaa05":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport plotly.express as ex","03dc30b2":"df = pd.read_csv(\"..\/input\/credit-card-customers\/BankChurners.csv\")","cdd5148a":"df.shape","b7464914":"df.info()","7b7e3cc0":"# drop last 2 colu,ms\ndf = df.drop(df.columns[-2:], axis=1)","ba467b80":"df.shape","d5d673a9":"df.info()","9eb37d74":"df.head()","97433308":"ex.pie(df, names='Attrition_Flag', title='Proportion of Existing vs Attrited Customers')","cd6d0860":"#Distribution of Independent Variables\nfig, ax = plt.subplots(19,1, figsize = (8,85))\nsns.boxplot(df['Customer_Age'], ax=ax[0])\nsns.countplot(df['Gender'], ax=ax[1])\nsns.countplot(df['Dependent_count'], ax=ax[2])\nsns.countplot(df['Education_Level'], ax=ax[3])\nsns.countplot(df['Marital_Status'], ax=ax[4])\nsns.countplot(df['Income_Category'], ax=ax[5])\nsns.countplot(df['Card_Category'], ax=ax[6])\nsns.boxplot(df['Months_on_book'], ax=ax[7])\nsns.boxplot(df['Total_Relationship_Count'], ax=ax[8])\nsns.boxplot(df['Months_Inactive_12_mon'], ax=ax[9])\nsns.boxplot(df['Contacts_Count_12_mon'], ax=ax[10])\nsns.boxplot(df['Credit_Limit'], ax=ax[11])\nsns.boxplot(df['Total_Revolving_Bal'], ax=ax[12])\nsns.boxplot(df['Avg_Open_To_Buy'], ax=ax[13])\nsns.boxplot(df['Total_Amt_Chng_Q4_Q1'], ax=ax[14])\nsns.boxplot(df['Total_Trans_Amt'], ax=ax[15])\nsns.boxplot(df['Total_Trans_Ct'], ax=ax[16])\nsns.boxplot(df['Total_Ct_Chng_Q4_Q1'], ax=ax[17])\nsns.boxplot(df['Avg_Utilization_Ratio'], ax=ax[18])","d96d9fd3":"# Distribution of Variables, Attrited vs Existing Customer\nfig, ax = plt.subplots(19,1, figsize = (11,90))\nsns.boxplot(data=df, x='Attrition_Flag', y='Customer_Age', ax=ax[0])\nsns.countplot(df['Gender'], ax=ax[1], hue=df['Attrition_Flag'])\nsns.countplot(df['Dependent_count'], ax=ax[2], hue=df['Attrition_Flag'])\nsns.countplot(df['Education_Level'], ax=ax[3], hue=df['Attrition_Flag'])\nsns.countplot(df['Marital_Status'], ax=ax[4], hue=df['Attrition_Flag'])\nsns.countplot(df['Income_Category'], ax=ax[5], hue=df['Attrition_Flag'])\nsns.countplot(df['Card_Category'], ax=ax[6], hue=df['Attrition_Flag'])\nsns.boxplot(data=df, y='Months_on_book', ax=ax[7], x='Attrition_Flag')\nsns.boxplot(data=df, y='Total_Relationship_Count', ax=ax[8], x='Attrition_Flag')\nsns.boxplot(data=df, y='Months_Inactive_12_mon', ax=ax[9], x='Attrition_Flag')\nsns.boxplot(data=df, y='Contacts_Count_12_mon', ax=ax[10], x='Attrition_Flag')\nsns.boxplot(data=df, y='Credit_Limit', ax=ax[11], x='Attrition_Flag')\nsns.boxplot(data=df, y='Total_Revolving_Bal', ax=ax[12], x='Attrition_Flag')\nsns.boxplot(data=df, y='Avg_Open_To_Buy', ax=ax[13], x='Attrition_Flag')\nsns.boxplot(data=df, y='Total_Amt_Chng_Q4_Q1', ax=ax[14], x='Attrition_Flag')\nsns.boxplot(data=df, y='Total_Trans_Amt', ax=ax[15], x='Attrition_Flag')\nsns.boxplot(data=df, y='Total_Trans_Ct', ax=ax[16], x='Attrition_Flag')\nsns.boxplot(data=df, y='Total_Ct_Chng_Q4_Q1', ax=ax[17], x='Attrition_Flag')\nsns.boxplot(data=df, y='Avg_Utilization_Ratio', ax=ax[18], x='Attrition_Flag')","2d4662f8":"# One Hot Encoding of Categorical Variables","2882ef8a":"df3 = df\ndf3.head()","29c7c00f":"# One hot encoding categorical variables\ndf3['Attrition_Flag'] = df3['Attrition_Flag'].replace({'Attrited Customer':1, 'Existing Customer':0})\ndf3['Gender'] = df3['Gender'].replace({'F':1, 'M':0})\n# Custom coding for Income Category\ndf3['Income_Category'] = df3['Income_Category'].replace({'Less than $40K':1, '$40K - $60K':2, '$60K - $80K':3, '$80K - $120K':4\n                                                        ,'$120K +':5, 'Unknown':1})\ndf3 = pd.concat([df3, pd.get_dummies(df3['Education_Level']).drop(columns = ['Unknown'])], axis = 1)\ndf3 = pd.concat([df3, pd.get_dummies(df3['Marital_Status']).drop(columns = ['Unknown'])], axis = 1)\ndf3 = pd.concat([df3, pd.get_dummies(df3['Card_Category'])], axis = 1)\ndf3 = df3.drop(['Education_Level', 'Marital_Status', 'Card_Category'], axis = 1)\n","57ea8b8f":"# Client Number not useful, dropping column\ndf3 = df3.drop(['CLIENTNUM'], axis = 1)","301ec60e":"df3.head()","0f9ed9a2":"# Viewing Income Category after Custom Encoding\ndf3.Income_Category.value_counts()","2f7627ed":"fig, ax = plt.subplots(figsize = (15,15))\nsns.heatmap(df3.corr('pearson'),annot=False)\nplt.title(\"Correlation Heatmap\")","0a78af71":"# Importing libraries for building model and metrics\nfrom sklearn.model_selection import train_test_split, RandomizedSearchCV\nfrom sklearn.pipeline import Pipeline\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.metrics import accuracy_score, confusion_matrix","0cafdc29":"# Assigning X,y variables\nX = df3.drop(['Attrition_Flag'], axis=1)\ny = df3['Attrition_Flag']","c5856f03":"scaler = StandardScaler()","337c2648":"X_train, X_test, y_train, y_test = train_test_split(X,y, test_size = .2, random_state=9)","2c2577a7":"# create model and pipeline with gridsearch","e66fb423":"from sklearn.ensemble import RandomForestClassifier\nrf = RandomForestClassifier()\nrf_pipe = Pipeline([('scaler',scaler), ('rf', rf)])\nrf_param = {'rf__n_estimators': [100,200,300,500,700,1000],\n           'rf__max_features': [2,3,5,7,9]}","8e12b8fe":"rf_grid = RandomizedSearchCV(rf_pipe, rf_param, cv=7, scoring = \"accuracy\", n_iter=10, random_state=9)\nrf_grid.fit(X_train, y_train)","4fe8d289":"rf_grid_results = pd.DataFrame(rf_grid.cv_results_)","d343372c":"rf_grid_results","24e3e8c9":"print('RF Best Score:', rf_grid.best_score_)","5083e75d":"print('RF Best Parameters:', rf_grid.best_params_)","1a0a6ff0":"rf_pred = rf_grid.predict(X_test)\nrf_acc = accuracy_score(y_test, rf_pred)\nprint('Accuracy Score: ',rf_acc)","23d46fb2":"rf_conf = confusion_matrix(y_test, rf_pred)\nrf_conf = pd.DataFrame(data=rf_conf, columns=[['Predicted:Existing', 'Predicted:Churned']], index=[['Actual: Existing', 'Actual: Churned']])\nfig, ax = plt.subplots(figsize = (9,9))\nsns.heatmap(rf_conf, annot=True, fmt='g')","25db254a":"# Load and View the Data","68c1b956":"# Random Forest Classifier","3ae7cb83":"# Preprocessing","27cdcf21":"# Exploratory Data Analysis"}}