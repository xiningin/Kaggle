{"cell_type":{"abc6259f":"code","3b9d6a23":"code","9ef82c0b":"code","59b0f79b":"code","5a198ffb":"code","3b868e13":"code","ae70c032":"code","65603d9b":"code","2f13b2e4":"code","06dbb2c5":"code","249d0a85":"code","093f95ec":"code","049b45a4":"code","d180a142":"code","3e9fddea":"code","9e212b54":"code","2659a4c4":"code","63113840":"code","00399161":"code","ab7c0611":"code","2106cfc7":"code","7c592906":"code","70aa1b7f":"code","5ab926b8":"code","177c5dee":"code","a372a316":"code","7a6a63c3":"code","845ce1e7":"code","ad5194dc":"code","05874096":"code","125b6ca2":"code","739a828e":"code","a68503eb":"code","51273d65":"code","9316006e":"code","27488ec7":"code","96b5dff5":"code","08cde7f3":"code","83361d53":"code","c842928d":"code","54bcc55b":"code","d25b1d09":"code","d3fc7b60":"code","b34f40c7":"code","283e95c3":"code","3d4cc3de":"code","6dd1e1ce":"code","a7ed4c36":"code","36b87927":"code","d423905e":"markdown","d1522f52":"markdown","1dc4322c":"markdown","374328ce":"markdown","07c90433":"markdown","5c57394e":"markdown","f6d463d7":"markdown","6f781878":"markdown","b7d5bb92":"markdown","ca888b14":"markdown","76656f63":"markdown","b69b9e6b":"markdown","bb34be31":"markdown","b8f8d503":"markdown","c27f6b25":"markdown","56379c46":"markdown","1e22a2a2":"markdown","28ba6a00":"markdown","d6973a00":"markdown","079f44e2":"markdown","92a7c68e":"markdown","0e60744f":"markdown","c2e4d0bf":"markdown","a18d189f":"markdown","3c6a3f1e":"markdown","84912283":"markdown","d8601cd5":"markdown","012275dc":"markdown","b93b217e":"markdown","f51d0d6a":"markdown","9a089834":"markdown","0e735da9":"markdown","c52c2d06":"markdown","c07dddbe":"markdown","b22a7540":"markdown","8eff7f50":"markdown","7a318e9b":"markdown","c3b7b836":"markdown"},"source":{"abc6259f":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory\n\nimport os\nprint(os.listdir(\"..\/input\"))\n\n\n# Any results you write to the current directory are saved as output.","3b9d6a23":"import matplotlib.pyplot as plt\nimport seaborn as sns\nimport sqlite3","9ef82c0b":"database = (\"..\/input\/database.sqlite\")\nconn = sqlite3.connect(database)","59b0f79b":"\n\ntables = pd.read_sql(\"\"\"SELECT *\n                        FROM sqlite_master\n                        WHERE type='table';\"\"\", conn)\ntables","5a198ffb":"year=pd.read_sql(\"\"\"SELECT DISTINCT BusinessYear FROM Rate;\"\"\", conn)\nyear","3b868e13":"table_servicearea = pd.read_sql(\"\"\"SELECT *\n                        FROM servicearea\n                        LIMIT 100;\"\"\", conn)\ntable_servicearea","ae70c032":"state_in_area=pd.read_sql(\"\"\"SELECT DISTINCT statecode from servicearea order by statecode;\"\"\", conn)\nstate_in_area","65603d9b":"servicearea_issuerid=pd.read_sql(\"\"\"select statecode, count(distinct(issuerid)) as num_issuer\n                                    , count(distinct(serviceareaid)) as num_service\n                                    , count(distinct (serviceareaname)) as num_servicename\n                                    from servicearea\n                                    group by statecode\n                                    order by statecode;\"\"\", conn)\nservicearea_issuerid","2f13b2e4":"source_type=pd.read_sql(\"\"\"SELECT distinct(SourceName)\n                        from ServiceArea \n                        ; \"\"\", conn)\nsource_type","06dbb2c5":"# see how the popuar of each source in states\nsource_popularity=pd.read_sql(\"\"\"select sourcename, count(distinct(statecode)) \n                            from servicearea group by sourcename; \"\"\", conn)\nsource_popularity","249d0a85":"# see how many services of each source in states\nsource_count=pd.read_sql(\"\"\"select sourcename, count(statecode) as service_number\n                            from servicearea group by sourcename order by sourcename; \"\"\", conn)\nsource_count","093f95ec":"source_state=pd.read_sql(\"\"\"SELECT StateCode, SourceName, COUNT(SourceName) as num_source \n                        from ServiceArea \n                        group by StateCode, SourceName \n                        order by num_source desc; \"\"\", conn)\nsource_state","049b45a4":"table_rate = pd.read_sql(\"\"\"SELECT *\n                        FROM Rate\n                        LIMIT 30;\"\"\", conn)\ntable_rate","d180a142":"rate_state=pd.read_sql(\"\"\"select businessyear, statecode, avg(individualrate) as rate_ave\n                        from rate \n                        group by businessyear, statecode\n                        order by rate_ave desc;\"\"\", conn)\nrate_state","3e9fddea":"rate_wy_TOP=pd.read_sql(\"\"\"select individualrate \n                        from rate \n                        where statecode='WY' and businessyear=2014\n                        ORDER BY INDIVIDUALRATE DESC\n                        limit 1000;\"\"\", conn)\nrate_wy_TOP","9e212b54":"rate_AK_TOP=pd.read_sql(\"\"\"select individualrate \n                        from rate \n                        where statecode='AK' and businessyear=2014\n                        ORDER BY INDIVIDUALRATE DESC\n                        LIMIT 550;\"\"\", conn)\nrate_AK_TOP","2659a4c4":"rate_wy_TOP_2016=pd.read_sql(\"\"\"select individualrate \n                        from rate \n                        where statecode='WY' and businessyear=2016\n                        ORDER BY INDIVIDUALRATE DESC\n                        LIMIT 1000;\"\"\", conn)\nrate_wy_TOP_2016","63113840":"rate_PLAN_WY=pd.read_sql(\"\"\"select DISTINCT(PLANID)\n                                from rate \n                                WHERE STATECODE='WY' AND INDIVIDUALRATE=999999\n                                ;\"\"\", conn)\nrate_PLAN_WY","00399161":"rate_PLANS_2014_WY=pd.read_sql(\"\"\"select DISTINCT(PLANID)\n                                from rate \n                                WHERE BUSINESSYEAR=2014 AND STATECODE='WY'\n                                ;\"\"\", conn)\nrate_PLANS_2014_WY","ab7c0611":"rate_PLANS_2014_EXP=pd.read_sql(\"\"\"select  STATECODE, PLANID\n                                    from rate \n                                    WHERE BUSINESSYEAR=2014 AND INDIVIDUALRATE=999999\n                                    GROUP BY PLANID\n                                    ORDER BY STATECODE;\"\"\", conn)\nrate_PLANS_2014_EXP","2106cfc7":"rate_PLANS_2016_2014EXP=pd.read_sql(\"\"\"SELECT STATECODE, PLANID\n                                    FROM RATE\n                                    WHERE BUSINESSYEAR=2016 AND \n                                    PLANID IN\n                                    (select PLANID\n                                    from rate \n                                    WHERE BUSINESSYEAR=2014 AND INDIVIDUALRATE=999999\n                                    )\n                                     ;\"\"\", conn)\nrate_PLANS_2016_2014EXP","7c592906":"rate_PLANS_2016=pd.read_sql(\"\"\"SELECT STATECODE, PLANID\n                                    FROM RATE\n                                    WHERE BUSINESSYEAR=2016 AND \n                                    PLANID = '74819AK0010001'\n                                     ;\"\"\", conn)\nrate_PLANS_2016","70aa1b7f":"rate_PLANS_2016WY=pd.read_sql(\"\"\"SELECT DISTINCT(PLANID)\n                                    FROM RATE\n                                    WHERE BUSINESSYEAR=2016 AND \n                                    STATECODE = 'WY' \n                                    AND PLANID NOT IN ( '47731WY0030002', '47731WY0030001','47731WY0020002', '47731WY0020001' ) \n                                     ;\"\"\", conn)\nrate_PLANS_2016WY","5ab926b8":"PLANTYPE=pd.read_sql(\"\"\"SELECT PLANID, PLANTYPE, BenefitPackageId\n                        FROM PLANATTRIBUTES\n                        WHERE PLANID IN\n                                    (select PLANID\n                                    from rate \n                                    WHERE BUSINESSYEAR=2014 AND INDIVIDUALRATE=999999)\n                        ;\"\"\", conn)\nPLANTYPE","177c5dee":"PLANTYPE1=pd.read_sql(\"\"\"SELECT PLANID, PLANTYPE, BenefitPackageId\n                        FROM PLANATTRIBUTES\n                        WHERE PLANID IN\n                                    (SELECT DISTINCT(PLANID)\n                                    FROM RATE\n                                    WHERE BUSINESSYEAR=2014 AND \n                                    STATECODE = 'WY' \n                                    AND PLANID NOT IN ( '47731WY0030002', '47731WY0030001','47731WY0020002', '47731WY0020001'))\n                        ;\"\"\", conn)\nPLANTYPE1","a372a316":"PLANID_IN_ATTRI=pd.read_sql(\"\"\"SELECT DISTINCT (PLANID)\n                                FROM planattributes\n                                where statecode='WY' AND BUSINESSYEAR=2014;\"\"\", conn)\nPLANID_IN_ATTRI","7a6a63c3":"PLANTYPE_MODIFY=pd.read_sql(\"\"\"SELECT planid, PLANTYPE, BenefitPackageId, PlanMarketingName, ISSUERID\n                                FROM PLANATTRIBUTES\n                                WHERE SUBSTR(PLANATTRIBUTES.PLANID,1, 14) IN\n                                (select PLANID\n                                from rate \n                                WHERE BUSINESSYEAR=2014 AND INDIVIDUALRATE=999999)\n                                ;\"\"\", conn)\nPLANTYPE_MODIFY","845ce1e7":"PLANTYPE_MODIFY=pd.read_sql(\"\"\"SELECT PLANTYPE, PlanMarketingName\n                                FROM PLANATTRIBUTES\n                                WHERE SUBSTR(PLANATTRIBUTES.PLANID,1, 14) IN\n                                (select PLANID\n                                from rate \n                                WHERE BUSINESSYEAR=2014 AND INDIVIDUALRATE=999999)\n                                GROUP BY PLANMARKETINGNAME\n                                ;\"\"\", conn)\nPLANTYPE_MODIFY","ad5194dc":"rate_state_reg=pd.read_sql(\"\"\"select businessyear, statecode, avg(individualrate) as rate_ave\n                        from rate \n                        WHERE INDIVIDUALRATE != 999999\n                        group by businessyear, statecode\n                        order by STATECODE;\"\"\", conn)\nrate_state_reg","05874096":"rate_state_pivot1=pd.read_sql(\"\"\"select  statecode, businessyear,avg(individualrate) as rate_ave\n                                        from rate \n                                        WHERE businessyear in (2014, 2015, 2016) and INDIVIDUALRATE != 999999\n                                        group by businessyear, statecode\n                                        ;\"\"\", conn)\nrate_state_pivot1","125b6ca2":"rate_state_pivot=pd.read_sql(\"\"\"select statecode,\n                                        SUM(CASE WHEN BusinessYear = 2014 THEN rate_ave END) AS '2014',\n                                         SUM(CASE WHEN BusinessYear = 2015 THEN rate_ave  END) AS '2015',\n                                         SUM(CASE WHEN BusinessYear = 2016 THEN rate_ave  END) AS '2016'\n                                from (select  statecode, businessyear,avg(individualrate) as rate_ave\n                                        from rate \n                                        WHERE INDIVIDUALRATE != 999999\n                                        group by businessyear, statecode\n                                        )\n                                group by statecode;\"\"\", conn)\nrate_state_pivot","739a828e":"dental_plan=pd.read_sql(\"\"\"select statecode, businessyear, count(distinct(planid)) as num_dental\n                                from planattributes\n                                where dentalonlyplan = 'Yes'\n                                group by statecode, businessyear\n                                order by statecode;\"\"\", conn)\ndental_plan","a68503eb":"total_plan=pd.read_sql(\"\"\"select statecode, businessyear, count (distinct (planid)) as total_plan\n                                from planattributes\n                                group by statecode, businessyear\n                                order by statecode;\"\"\", conn)\ntotal_plan","51273d65":"dental_total_plan=dental_plan.merge(total_plan)\ndental_total_plan","9316006e":"medical_rate=pd.read_sql(\"\"\"select rate.statecode, rate.businessyear, avg(rate.individualrate) as medical_rate\n                            from rate\n                            inner join planattributes on rate.planid=substr(planattributes.planid, 1,14)\n                            where planattributes.dentalonlyplan='No' \n                            group by rate.statecode, rate.businessyear\n                            order by rate.statecode;\"\"\", conn)\nmedical_rate","27488ec7":"dental_rate=pd.read_sql(\"\"\"select rate.statecode, rate.businessyear, avg(rate.individualrate) as medicine_rate\n                            from rate\n                            inner join planattributes on rate.planid=substr(planattributes.planid, 1,14)\n                            where planattributes.dentalonlyplan='Yes' \n                            group by rate.statecode, rate.businessyear\n                            order by rate.statecode;\"\"\", conn)\ndental_rate","96b5dff5":"dental_realrate=pd.read_sql(\"\"\"select rate.statecode, rate.businessyear, avg(rate.individualrate) as dental_rate\n                            from rate\n                            inner join planattributes on rate.planid=substr(planattributes.planid, 1,14)\n                            where planattributes.dentalonlyplan='Yes' and rate.individualrate !=999999 \n                            group by rate.statecode, rate.businessyear\n                            order by rate.statecode;\"\"\", conn)\ndental_realrate","08cde7f3":"medical_dental_rate=medical_rate.merge(dental_realrate)\nmedical_dental_rate","83361d53":"age_rate=pd.read_sql(\"\"\"select distinct (age) from rate;\"\"\", conn)\nage_rate","c842928d":"rate_age=pd.read_sql(\"\"\"select avg(individualrate) as rate, age\n                        from rate\n                        where individualrate !=999999\n                        group by age\n                        ;\"\"\", conn)\nrate_age","54bcc55b":"fig, ax=plt.subplots(figsize=[20, 5])\nsns.barplot(x='Age', y='rate', data=rate_age)","d25b1d09":"medical_rate_age=pd.read_sql(\"\"\"select rate.statecode, avg(rate.individualrate) as medical_rate, rate.age\n                            from rate\n                            inner join planattributes on rate.planid=substr(planattributes.planid, 1,14)\n                            where planattributes.dentalonlyplan='No' \n                            group by rate.statecode, rate.age\n                            order by rate.statecode;\"\"\", conn)\nmedical_rate_age","d3fc7b60":"medical_rate_age=medical_rate_age.pivot(index= 'StateCode', columns= 'Age', values='medical_rate')\nmedical_rate_age.head()","b34f40c7":"fig, ax=plt.subplots(figsize=[20,10])\nsns.heatmap(medical_rate_age)","283e95c3":"dental_realrate_age=pd.read_sql(\"\"\"select rate.statecode,  avg(rate.individualrate) as dental_rate, rate.age\n                            from rate\n                            inner join planattributes on rate.planid=substr(planattributes.planid, 1,14)\n                            where planattributes.dentalonlyplan='Yes' and rate.individualrate !=999999 \n                            group by rate.statecode, rate.age\n                            order by rate.statecode;\"\"\", conn)\ndental_realrate_age","3d4cc3de":"dental_realrate_age=dental_realrate_age.pivot(index= 'StateCode', columns= 'Age', values='dental_rate')\ndental_realrate_age.head()","6dd1e1ce":"fig, (axes1, axes2)=plt.subplots(2,1,figsize=[20,20])\nsns.heatmap(medical_rate_age, ax=axes1)\nsns.heatmap(dental_realrate_age, ax=axes2)","a7ed4c36":"dental_UT=pd.read_sql(\"\"\"select rate.planid, rate.individualrate as dental_rate\n                            from rate\n                            inner join planattributes on rate.planid=substr(planattributes.planid, 1,14)\n                            where planattributes.statecode= 'UT' and planattributes.dentalonlyplan='Yes'\n                            group by rate.planid\n                            order by dental_rate desc;\"\"\", conn)\ndental_UT","36b87927":"dental_wy=pd.read_sql(\"\"\"select rate.planid, rate.individualrate as dental_rate\n                            from rate\n                            inner join planattributes on rate.planid=substr(planattributes.planid, 1,14)\n                            where planattributes.statecode= 'WY' and planattributes.dentalonlyplan='Yes'\n                            group by rate.planid\n                            ORDER BY dental_rate desc;\"\"\", conn)\ndental_wy","d423905e":"So definitely there are other plans in WY that charged less.\n\nLets get all those million dollar plans in all states in 2014.","d1522f52":"It seems for medical insurance, the rate is positively related with age. especially in some states like AK, WY, NJ and NC, the medical rate is higher than other states.","1dc4322c":"Forgot to exclude the million dollar plans...","374328ce":"from the results, it seems serviceareaid and serviceareaname are two different definitions. the number of service area id is less than that of service area name. I am not sure if that means certain plan providers offer service in several areas (with name), and multiple service areas (with name) share one service area id.","07c90433":"Unbelievable! The same feature in different  tables has different data format! If you notice the last several plan ids, they are the million dollar plans. But in this table, these plan ids have extra \"-xx\" part!!!\n\nThen we need try again with the function to extract the part in \"rate\" table.","5c57394e":"So now we know all those million dollar plans in 2014 are all dental PPO plans. for future analysis, probably we need separate dental plan from other insurance plans to make comparison among states.","f6d463d7":"Now let's take a look at how many sources across the country.","6f781878":"Although OPM serves 27 states while SERFF's service was in only 20 states, SERFF has the most data input counts but OPM has the least.\n\nLet's see the distributions in different states.","b7d5bb92":"No record???!!! check WY state since we know them so well.","ca888b14":"First take a look at the average rate from the states.","76656f63":"Very surprisingly, average rate in 2014 is very very high in most states. in some top states the number even reached 5 digits... since WY is the top 1, let's look at it more closely.","b69b9e6b":"This time, the numbers look reasonable. Let's make it to pivot table","bb34be31":"Now we got all of them. It seems they are all PPO plans, and are all dental plans? Check it!","b8f8d503":"Surprisingly dental insurance rate has no relationship with age... And some states have super high level, like UT\nLet's take a look at dental plans in UT","c27f6b25":"The average rate definietly goes up with age. Is it true for both medical and dental rate?","56379c46":"Three sources through which data was collected. ","1e22a2a2":"How many total plan numbers are there?","28ba6a00":"Total 8 tables. First check how many years of the information.","d6973a00":"A little surprise. the data is from 40, not 50 states of the country. \nLet's look at how many different  issuers(plan provider?), service area across the country.","079f44e2":"one million??? is that a real number or something like system bug? let's take a look at other states.","92a7c68e":"So now, we are pretty sure that those million dollar plans were canceled in 2016.\n\nThen next question is what are those plans, instead of just plan id? now we need another table plan attributes.","0e60744f":"How many plans are dental plans?","c2e4d0bf":"Look at medical insurance rate and dental insurance rate separately.","a18d189f":"OPM is the most popular source that was used in 27 states.","3c6a3f1e":"So in AK, it seems the same thing, and the next level is $ 1900.\n\nAlso it seems the average in 2016 is much lower, so how about the rate in 2016 in WY?","84912283":"seems the plans were canceled in 2016. To assure it, try several examples.","d8601cd5":"-----------------------------------------------------------------\nNow let's take a look at table 'rate'.","012275dc":"These plans have common features: 1) statecode is embedded in the middle of the id. 2) they all end with 0001 or 0002.\n\nWe noticed the high rate disappeared in 2016. So is that because the rate decreased or the plan was canceled?","b93b217e":"first let's look at how many states have been included in this dataset.","f51d0d6a":"Only four plan ids are responsible for the million dollar rate. How many plan ids are there in WY?","9a089834":"Keep updating!","0e735da9":"Does the rate has any relationship with age? First look at how many age groups are there?","c52c2d06":"Three years of information available. The following part is about the sources that provide service across the country, from SourceArea table.","c07dddbe":"So besides millions dollar plans, UT has 10,000 dollar dental plans...","b22a7540":"So WY state has only million dollar super dental plan. There is no 10,000 dollar dental rate. That's why the average dental rate is so low in WY.","8eff7f50":"First, what does the average rate look like in each state?","7a318e9b":"Still no record???!!! need look at the new table carefully","c3b7b836":"The million level disappeared. The highest level in 2016 is in the similar range as 2014 secondary level, which is less than $2000.\n\nThen let's see what planid is associated with the million dollar rate."}}