{"cell_type":{"399455cb":"code","c204825f":"code","12b6215f":"code","8f0ee397":"code","433b8c1a":"code","32dcdfce":"code","3ae0b8d1":"code","4085aeed":"code","8d832325":"code","c220f35b":"code","01b38070":"code","e1295a14":"code","4c678d37":"code","51cfd6b3":"code","4791e32c":"code","d36ac4c7":"code","ed9c51c8":"code","6e985477":"code","186c03e9":"code","a6035872":"code","20857d47":"code","423ed152":"code","6339c0f6":"code","c127cab9":"code","31ce8c0b":"code","d109d5d4":"code","cebc14ba":"code","1eb6738a":"code","06885690":"code","6bd4dd5e":"code","f1a93dca":"code","bd828f79":"code","ac1aecc8":"code","66bcbfcb":"code","d9b390a7":"code","c969ec10":"code","5c19e6b0":"code","8b526be8":"code","947fb6da":"code","9cb3d2fa":"code","e81023b3":"code","da5f9338":"code","c30ea20a":"code","abf7cdde":"code","ec30d4ca":"code","ae15c00c":"code","c4166124":"code","c278f2a9":"code","c2b36812":"code","d39fc065":"code","6e30ff5e":"code","d343ba17":"code","a73ac3dd":"code","e415c097":"code","d59c3a14":"code","4bc2132b":"code","7874c384":"code","b5477c47":"code","742cc57e":"code","0ed17a45":"code","37dd3d58":"code","68171bca":"code","8b4d39b3":"code","e3d7084a":"code","f2b8efcb":"code","0d1983ba":"code","eba4921a":"code","193bfc34":"code","ad81252b":"code","438334a1":"code","9c93abaf":"code","28f8a807":"code","29bfc535":"code","81338ea6":"code","8593f45c":"code","eed90048":"code","c21367f8":"markdown","24e76bb8":"markdown","baee0e66":"markdown","60a340cd":"markdown","1ababa4c":"markdown","97a4c095":"markdown","705cb9dc":"markdown","efdbce4a":"markdown","5bc319fe":"markdown","c74479dd":"markdown"},"source":{"399455cb":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory\n\nimport os\nprint(os.listdir(\"..\/input\"))\n\n# Any results you write to the current directory are saved as output.","c204825f":"health_df=pd.read_csv(\"..\/input\/Big_Cities_Health_Data_Inventory.csv\")\nhealth_df.shape","12b6215f":"health_df.describe()","8f0ee397":"health_df.info()","433b8c1a":"sum_value=health_df.isna().sum()\nprint(\"=========Null Value========\")\nprint(sum_value)\nprint(\"=========Null Percentage=======\")\nprint((sum_value)\/len(health_df)*100)","32dcdfce":"health_df[health_df.duplicated()]","3ae0b8d1":"health_df.columns","4085aeed":"import matplotlib.pyplot as plt\nimport seaborn as sns\n%matplotlib inline","8d832325":"health_df.head(20)","c220f35b":"health_df.nunique()","01b38070":"num_var=['Year','Value']\ncat_var=[]\nfor i in health_df.columns:\n    if i not in num_var:\n        cat_var.append(i)\ncat_var","e1295a14":"categorical=['Indicator Category','Gender','Race\/ Ethnicity','Year']\nfig, ax = plt.subplots(2, 2, figsize=(30, 40))\nfor variable, subplot in zip(categorical, ax.flatten()):\n    cp=sns.countplot(health_df[variable], ax=subplot,order = health_df[variable].value_counts().index)\n    cp.set_title(variable,fontsize=40)\n    for label in subplot.get_xticklabels():\n        label.set_rotation(90)\n        label.set_fontsize(36)                \n    for label in subplot.get_yticklabels():\n        label.set_fontsize(36)        \n        cp.set_ylabel('Count',fontsize=40)    \nplt.tight_layout()","4c678d37":"plt.figure(figsize=(25,12))\ncp=sns.countplot(x=health_df['Place'],data=health_df,order = health_df['Place'].value_counts().index)\ncp.set_xticklabels(cp.get_xticklabels(),rotation=90,fontsize=18)\ncp.set_xlabel('Year',fontsize=15)\ncp.set_ylabel('Count',fontsize=18)","51cfd6b3":"#health_df['Place'].value_counts()\nhealth_df['State']=health_df['Place'].apply(lambda x: x.split(\",\")).str[1]\n\n","4791e32c":"plt.figure(figsize=(25,12))\ncp=sns.countplot(x=health_df['State'],data=health_df,order = health_df['State'].value_counts().index)\ncp.set_xticklabels(cp.get_xticklabels(),rotation=90,fontsize=18)\ncp.set_xlabel('State',fontsize=15)\ncp.set_ylabel('Count',fontsize=18)","d36ac4c7":"plt.figure(figsize=(25,12))\ncp=sns.countplot(x=health_df['Year'],data=health_df)\ncp.set_xticklabels(cp.get_xticklabels(),rotation=90,fontsize=18)\ncp.set_xlabel('Year',fontsize=15)\ncp.set_ylabel('Count',fontsize=18)","ed9c51c8":"plt.figure(figsize=(25,12))\ncp=sns.countplot(x=health_df['Indicator Category'],data=health_df,hue=health_df['Gender'],order = health_df['Indicator Category'].value_counts().index)\ncp.set_xticklabels(cp.get_xticklabels(),rotation=90,fontsize=18)\ncp.set_xlabel('Year',fontsize=15)\ncp.set_ylabel('Count',fontsize=18)","6e985477":"plt.figure(figsize=(20, 10))\nsns.boxplot(data=health_df)","186c03e9":"# Importing necessary package for creating model\nfrom sklearn.linear_model import LinearRegression\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import mean_absolute_error, mean_squared_error,r2_score","a6035872":"cat_col=['Indicator Category','Gender','State','Race\/ Ethnicity','Year']\nnum_col=['Value']\nnum_col","20857d47":"print(health_df.shape)\nhealth_df_nona=health_df[(health_df['Value'].isna()==False) & (health_df['Value']!=0)]\nhealth_df_nona.shape","423ed152":"# one-hot encoding\n\none_hot=pd.get_dummies(health_df_nona[cat_col])\nhealth_procsd_df=pd.concat([health_df_nona[num_col],one_hot],axis=1)\nhealth_procsd_df.head(10)","6339c0f6":"health_procsd_df.isna().sum()","c127cab9":"#using one hot encoding\nX=health_procsd_df.drop(columns=['Value'])\ny=health_procsd_df[['Value']]","31ce8c0b":"train_X, test_X, train_y, test_y = train_test_split(X,y,test_size=0.3,random_state=1234)","d109d5d4":"model = LinearRegression()\n\nmodel.fit(train_X,train_y)","cebc14ba":"# Print Model intercept and co-efficent\nprint(\"Model intercept\",model.intercept_,\"Model co-efficent\",model.coef_)\n","1eb6738a":"cdf = pd.DataFrame(data=model.coef_.T, index=X.columns, columns=[\"Coefficients\"])\ncdf","06885690":"# Print various metrics\nfrom sklearn.metrics import mean_absolute_error, mean_squared_error,r2_score\n\nprint(\"Predicting the train data\")\ntrain_predict = model.predict(train_X)\nprint(\"Predicting the test data\")\ntest_predict = model.predict(test_X)\nprint(\"MAE\")\nprint(\"Train : \",mean_absolute_error(train_y,train_predict))\nprint(\"Test  : \",mean_absolute_error(test_y,test_predict))\nprint(\"====================================\")\nprint(\"MSE\")\nprint(\"Train : \",mean_squared_error(train_y,train_predict))\nprint(\"Test  : \",mean_squared_error(test_y,test_predict))\nprint(\"====================================\")\nimport numpy as np\nprint(\"RMSE\")\nprint(\"Train : \",np.sqrt(mean_squared_error(train_y,train_predict)))\nprint(\"Test  : \",np.sqrt(mean_squared_error(test_y,test_predict)))\nprint(\"====================================\")\nprint(\"R^2\")\nprint(\"Train : \",r2_score(train_y,train_predict))\nprint(\"Test  : \",r2_score(test_y,test_predict))\nprint(\"MAPE\")\nprint(\"Train : \",np.mean(np.abs((train_y - train_predict) \/ train_y)) * 100)\nprint(\"Test  : \",np.mean(np.abs((test_y - test_predict) \/ test_y)) * 100)","6bd4dd5e":"#Plot actual vs predicted value\nplt.figure(figsize=(10,7))\nplt.title(\"Actual vs. predicted expenses\",fontsize=25)\nplt.xlabel(\"Actual Value\",fontsize=18)\nplt.ylabel(\"Predicted Value\", fontsize=18)\nplt.scatter(x=test_y,y=test_predict)","f1a93dca":"len(train_predict[train_predict==0])","bd828f79":"test_predict","ac1aecc8":"#cat_var_main=['Indicator Category','Gender','Race\/ Ethnicity','Place']\n#fig, ax = plt.subplots(3, 4, figsize=(20, 10))\n#for variable, subplot in zip(cat_var, ax.flatten()):\n    #sns.countplot(health_df[variable], ax=subplot)\n    #for label in subplot.get_xticklabels():\n        #label.set_rotation(90)","66bcbfcb":"#sns.countplot(data=health_df,y=health_df[\"Value\"])\n#health_df.groupby(\"Indicator Category\").agg('mean','median','mode')\n#agg_funcs = dict(Size='size', Sum='sum', Mean='mean', Std='std', Median='median')\n#health_df.set_index(['Indicator Category','State']).stack().shape\nagg_func=dict(Count='count',Avg='mean',Median='median',Deviation='std',Min='min',Max='max')\nhealth_df.groupby(\"Indicator Category\").agg({\n        'Value': agg_func,\n    }).sort_values(('Value', 'Count'))","d9b390a7":"plt.figure(figsize=(30, 20))\nsns.boxplot(data=health_df,x=health_df[\"Indicator Category\"],y=health_df[\"Value\"])\n","c969ec10":"plt.figure(figsize=(30, 20))\ncp=sns.boxplot(data=health_df,x=health_df[\"Indicator Category\"],y=health_df[\"Value\"],showfliers=False)\ncp.set_xticklabels(cp.get_xticklabels(),rotation=90,fontsize=18)\n#cp.set_yticklabels(cp.get_yticklabels(),fontsize=18)\ncp.set_xlabel(\"Race\/ Ethnicity\",fontsize=15)\ncp.set_ylabel('Value',fontsize=18)","5c19e6b0":"agg_func=dict(Count='count',Avg='mean',Median='median',Deviation='std',Min='min',Max='max')\nhealth_df.groupby(\"State\").agg({\n        'Value': agg_func,\n    }).sort_values(('Value', 'Count'))","8b526be8":"plt.figure(figsize=(30, 20))\nsns.boxplot(data=health_df,x=health_df[\"State\"],y=health_df[\"Value\"])","947fb6da":"plt.figure(figsize=(30, 20))\ncp=sns.boxplot(data=health_df,x=health_df[\"State\"],y=health_df[\"Value\"],showfliers=False)\ncp.set_xticklabels(cp.get_xticklabels(),rotation=90,fontsize=18)\n#cp.set_yticklabels(cp.get_yticklabels(),fontsize=18)\ncp.set_xlabel(\"Race\/ Ethnicity\",fontsize=15)\ncp.set_ylabel('Value',fontsize=18)","9cb3d2fa":"agg_func=dict(Count='count',Avg='mean',Median='median',Deviation='std',Min='min',Max='max')\nhealth_df.groupby(\"Gender\").agg({\n        'Value': agg_func,\n    }).sort_values(('Value', 'Count'))","e81023b3":"plt.figure(figsize=(30, 20))\nsns.boxplot(data=health_df,x=health_df[\"Gender\"],y=health_df[\"Value\"])","da5f9338":"plt.figure(figsize=(30, 20))\ncp=sns.boxplot(data=health_df,x=health_df[\"Gender\"],y=health_df[\"Value\"],showfliers=False)\ncp.set_xticklabels(cp.get_xticklabels(),rotation=90,fontsize=18)\n#cp.set_yticklabels(cp.get_yticklabels(),fontsize=18)\ncp.set_xlabel(\"Race\/ Ethnicity\",fontsize=15)\ncp.set_ylabel('Value',fontsize=18)","c30ea20a":"agg_func=dict(Count='count',Avg='mean',Median='median',Deviation='std',Min='min',Max='max')\nhealth_df.groupby(\"Race\/ Ethnicity\").agg({\n        'Value': agg_func,\n    }).sort_values(('Value', 'Count'))","abf7cdde":"plt.figure(figsize=(30, 20))\nsns.boxplot(data=health_df,x=health_df[\"Race\/ Ethnicity\"],y=health_df[\"Value\"])","ec30d4ca":"plt.figure(figsize=(30, 20))\ncp=sns.boxplot(data=health_df,x=health_df[\"Race\/ Ethnicity\"],y=health_df[\"Value\"],showfliers=False)\ncp.set_xticklabels(cp.get_xticklabels(),rotation=90,fontsize=18)\n#cp.set_yticklabels(cp.get_yticklabels(),fontsize=18)\ncp.set_xlabel(\"Race\/ Ethnicity\",fontsize=15)\ncp.set_ylabel('Value',fontsize=18)","ae15c00c":"agg_func=dict(Count='count',Avg='mean',Median='median',Deviation='std',Min='min',Max='max')\nhealth_df.groupby(\"Year\").agg({\n        'Value': agg_func,\n    }).sort_values(('Value', 'Count'))","c4166124":"len(health_procsd_df[health_procsd_df.Value==0])","c278f2a9":"health_df.head(10)","c2b36812":"pd.crosstab(health_df[\"State\"],health_df[\"Indicator Category\"], values=health_df.Value, aggfunc=['mean'],dropna=False,margins=True,margins_name=\"Total Mean\")","d39fc065":"pd.crosstab(health_df[\"State\"],health_df[\"Indicator Category\"], values=health_df.Value, aggfunc='median',dropna=False,margins=True,margins_name=\"Total Mean\")","6e30ff5e":"pd.crosstab(health_df[\"Race\/ Ethnicity\"],health_df[\"Indicator Category\"], values=health_df.Value, aggfunc='mean',dropna=False,margins=True,margins_name=\"Total Mean\")","d343ba17":"pd.crosstab(health_df[\"Race\/ Ethnicity\"],health_df[\"Indicator Category\"], values=health_df.Value, aggfunc='median',dropna=False,margins=True,margins_name=\"Total Mean\")","a73ac3dd":"table=pd.crosstab(health_df[\"Gender\"],health_df[\"Indicator Category\"], values=health_df.Value, aggfunc='mean',dropna=False,margins=True,margins_name=\"Total Mean\")\ntable","e415c097":"pd.crosstab(health_df[\"Gender\"],health_df[\"Indicator Category\"], values=health_df.Value, aggfunc='median',dropna=False,margins=True,margins_name=\"Total Mean\")\n","d59c3a14":"health_df[health_df.duplicated()==True]","4bc2132b":"lower_bnd = lambda x: x.quantile(0.25) - 1.5 * ( x.quantile(0.75) - x.quantile(0.25) )\nupper_bnd = lambda x: x.quantile(0.75) + 1.5 * ( x.quantile(0.75) - x.quantile(0.25) )\n","7874c384":"health_df.shape","b5477c47":"health_df_clean = health_df[(health_df[\"Value\"] >= lower_bnd(health_df[\"Value\"])) & (health_df[\"Value\"] <= upper_bnd(health_df[\"Value\"])) ] ","742cc57e":"health_df_clean.shape","0ed17a45":"print(health_df_clean.shape)\nhealth_df_clean_nona=health_df_clean[(health_df_clean['Value'].isna()==False) & (health_df_clean['Value']!=0)]\nhealth_df_clean_nona.shape","37dd3d58":"# one-hot encoding\n\none_hot=pd.get_dummies(health_df_clean_nona[cat_col])\nhealth_procsd_df=pd.concat([health_df_clean_nona[num_col],one_hot],axis=1)\nhealth_procsd_df.head(10)","68171bca":"#using one hot encoding\nX=health_procsd_df.drop(columns=['Value'])\ny=health_procsd_df[['Value']]","8b4d39b3":"train_X, test_X, train_y, test_y = train_test_split(X,y,test_size=0.3,random_state=1234)","e3d7084a":"model = LinearRegression()\n\nmodel.fit(train_X,train_y)","f2b8efcb":"# Print Model intercept and co-efficent\nprint(\"Model intercept\",model.intercept_,\"Model co-efficent\",model.coef_)\n","0d1983ba":"# Print various metrics\nfrom sklearn.metrics import mean_absolute_error, mean_squared_error,r2_score\n\nprint(\"Predicting the train data\")\ntrain_predict = model.predict(train_X)\nprint(\"Predicting the test data\")\ntest_predict = model.predict(test_X)\nprint(\"MAE\")\nprint(\"Train : \",mean_absolute_error(train_y,train_predict))\nprint(\"Test  : \",mean_absolute_error(test_y,test_predict))\nprint(\"====================================\")\nprint(\"MSE\")\nprint(\"Train : \",mean_squared_error(train_y,train_predict))\nprint(\"Test  : \",mean_squared_error(test_y,test_predict))\nprint(\"====================================\")\nimport numpy as np\nprint(\"RMSE\")\nprint(\"Train : \",np.sqrt(mean_squared_error(train_y,train_predict)))\nprint(\"Test  : \",np.sqrt(mean_squared_error(test_y,test_predict)))\nprint(\"====================================\")\nprint(\"R^2\")\nprint(\"Train : \",r2_score(train_y,train_predict))\nprint(\"Test  : \",r2_score(test_y,test_predict))\nprint(\"MAPE\")\nprint(\"Train : \",np.mean(np.abs((train_y - train_predict) \/ train_y)) * 100)\nprint(\"Test  : \",np.mean(np.abs((test_y - test_predict) \/ test_y)) * 100)","eba4921a":"#Plot actual vs predicted value\nplt.figure(figsize=(10,7))\nplt.title(\"Actual vs. predicted expenses\",fontsize=25)\nplt.xlabel(\"Actual Value\",fontsize=18)\nplt.ylabel(\"Predicted Value\", fontsize=18)\nplt.scatter(x=test_y,y=test_predict)","193bfc34":"chk_val=pd.DataFrame(pd.np.column_stack([test_y,test_predict]))\nchk_val[2]=(chk_val[0]-chk_val[1])\nchk_val","ad81252b":"agg_func=dict(Count='count',Avg='mean',Median='median',Deviation='std',Min='min',Max='max')\nhealth_df.groupby([\"Indicator Category\",\"Race\/ Ethnicity\"]).agg({\n        'Value': agg_func,\n    }).sort_values(('Value', 'Count'))","438334a1":"from sklearn.neighbors import KNeighborsRegressor\nfrom sklearn.metrics import accuracy_score","9c93abaf":"X_train, X_test, y_train, y_test = train_test_split(\nX, y, test_size = 0.3, random_state = 100)\ny_train=np.ravel(y_train)\ny_test=np.ravel(y_test)","28f8a807":"k = 5\n#Train Model and Predict  \nneigh = KNeighborsRegressor(n_neighbors = k).fit(X_train,y_train)\nneigh\n","29bfc535":"### Predicting\n#we can use the model to predict the test set:\n\nyhat = neigh.predict(X_test)\nyhat[0:5]","81338ea6":"mean_squared_error(y_test,yhat)","8593f45c":"yhat_train = neigh.predict(X_train)\nyhat_train[0:5]","eed90048":"mean_squared_error(y_train,yhat_train)","c21367f8":"**Above subplot was created inspired by Reference \"https:\/\/towardsdatascience.com\/how-to-perform-exploratory-data-analysis-with-seaborn-97e3413e841d\".\n\nObservation:\n\nFrom Dataset we draw subplot, we get to know distribution count of categorical variables \n\n1) with indicator category , we see following order\n\n    1) HIV\/AIDS\n    2) Injury & violence\n    3) Nutrition,Physical activity & obesity\n    4) Infectious Disease\n    5) Cancer\n    6) Maternal and child health\n    7) Behavioural health \/ abuse\n    8) Food safety\n    9) Life Expectancy\n    10) Demographics \n    11) Tobacco\n2) with Gender category, we see distribution is more on both, followed by female and male\n\n3) with Race category , we see distribution falls in below order\n\n    1) All\n    2) White\n    3) Black\n    4) Hispanic\n    5) Asian\n    6) Other\n    7) Native American\n    8) Multiracial\n    9) American indian\n    \n4) with respect to year category , we see more death in 2012 followed by 2013,2011,2010 & 2014    \n\n**","24e76bb8":"**CA state has more death followed by TX,AZ,FL,NY....**","baee0e66":"**Now we can compare value against two categorical variable. Crosstab gives good way to compare two categorical value with Target value. Various usage of crosstab was inspired by below link**\n\nhttps:\/\/pbpython.com\/pandas-crosstab.html","60a340cd":"**Above graph shows that there is no relationship between gender and Indicator. however for some value like Cancer, we see more female prone to it than male. Sameway for maternal health it has only female value which is obvious here**","1ababa4c":"**Model is not predicting value correctly inspite of cleaned outlier (value=0 or nan). After removing nan or value=0 able to correct MAPE value which gives Infinity one. Need to futher pre-process data to achieve better result**","97a4c095":"**Since outlier spoils visualization, we can show it filtering outliers using showfliers=False**","705cb9dc":"**Clearly we see outliers there when we do comparison between mean and median values**","efdbce4a":"we see more data in place category. From the data , We see that we can extract new feature state and see distribution for state variable","5bc319fe":"**We will try to implement knn for this Linear regression to see how accuracy calculated**","c74479dd":"**I Tried increase K value from 3 to 11 and found that k-value lower for K=5 . will try to validate same in elbow curve**"}}