{"cell_type":{"21be960b":"code","36886769":"code","418f6dc5":"code","0a0e7df4":"code","a132542e":"code","c0fe2dea":"code","6d55d0da":"code","0ea14841":"code","4366ee82":"code","d6a6748c":"code","36455e42":"code","6488f88d":"code","048cf4a5":"code","6404795d":"code","6b558863":"code","8c0ae8bd":"code","7215978f":"code","5f2608c1":"code","abaa37c4":"code","140580b0":"code","bde4620a":"code","eacac053":"code","44283524":"code","64e2e4e6":"code","2dca9cff":"code","ce1b1062":"code","6053c5ef":"code","dd1cee8a":"code","6fad3659":"code","61bb3327":"code","c95770d0":"code","098822eb":"markdown","ccd0db83":"markdown","e353cf74":"markdown","949ee22b":"markdown","13296a7b":"markdown","405a7c56":"markdown","836c5e55":"markdown","a0527285":"markdown","0343f2ae":"markdown","14c41a42":"markdown","f6cfe4ba":"markdown","9e2999ec":"markdown","8bcca5ec":"markdown","24448d28":"markdown","bd7e23c0":"markdown","6cde251a":"markdown","af1682e3":"markdown","18ae8724":"markdown","d35625c5":"markdown","1a759e35":"markdown","a644c5e4":"markdown","c9fe071e":"markdown","0f69ac80":"markdown","51d18e15":"markdown","ba280da7":"markdown","baa6ebb5":"markdown"},"source":{"21be960b":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","36886769":"data = pd.read_csv('\/kaggle\/input\/heart-disease-uci\/heart.csv')","418f6dc5":"data.head()","0a0e7df4":"data.isnull().sum()","a132542e":"data.info()","c0fe2dea":"data.describe()","6d55d0da":"data.shape","0ea14841":"corr_mat = data.corr()\ntop_corr_features = corr_mat.index","4366ee82":"plt.figure(figsize=(20,20))\nsns.heatmap(data[top_corr_features].corr(), annot=True, cmap='RdYlGn')","d6a6748c":"sns.set_style('whitegrid')\nsns.countplot(x='target', data=data, palette='RdBu_r')","36455e42":"data.head()","6488f88d":"from sklearn.preprocessing import StandardScaler\nstandard_scaler = StandardScaler()\ncolumns_to_scale = ['age','trestbps','chol','thalach','oldpeak']\ndata[columns_to_scale] = standard_scaler.fit_transform(data[columns_to_scale])","048cf4a5":"data.head()","6404795d":"data = pd.get_dummies(data, columns=['sex', 'cp', 'fbs', 'restecg', 'exang', 'slope','ca', 'thal'])","6b558863":"data.head()","8c0ae8bd":"X = data.drop(['target'], axis=1).values\ny = data['target'].values","7215978f":"from sklearn.model_selection import train_test_split\n\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.30, random_state=42)","5f2608c1":"import torch\nimport torch.nn as nn\nimport torch.nn.functional as F","abaa37c4":"X_train = torch.FloatTensor(X_train)\nX_test = torch.FloatTensor(X_test)\ny_train = torch.LongTensor(y_train) ## LongTensor dosent converts it into floating point \ny_test = torch.LongTensor(y_test)","140580b0":"class Net(nn.Module):\n    def __init__(self, in_count, output_count):\n        super(Net, self).__init__()\n        self.fc1 = nn.Linear(in_count, 50)\n        self.fc2 = nn.Linear(50, 25)\n        self.fc3 = nn.Linear(25, output_count)\n        self.softmax = nn.Softmax()\n        \n        \n    def forward(self, x):\n        x = F.relu(self.fc1(x))\n        x = self.fc2(x)\n        x = self.fc3(x)\n        return self.softmax(x)","bde4620a":"model = Net(X.shape[1], 2) ","eacac053":"criterion = nn.CrossEntropyLoss()\noptimizer = torch.optim.Adam(model.parameters(), lr=0.01)","44283524":"final_losses = []\nfor epochs in range(5000):\n    optimizer.zero_grad()\n    out = model(X_train)\n    loss = criterion(out, y_train)\n    final_losses.append(loss)\n    loss.backward()\n    optimizer.step()\n    print(f\"Epoch {epochs+1}, loss: {loss.item()}\")\n","64e2e4e6":"plt.plot(range(5000), final_losses)\nplt.ylabel('loss')","2dca9cff":"from sklearn.metrics import accuracy_score\n\npred = model(X_test)\n_, predict_classes = torch.max(pred,1)\n\ncorrect = accuracy_score(y_test, predict_classes)\nprint(f\"Accurcay :   {correct}\")","ce1b1062":"predictions = []\n\nwith torch.no_grad():\n    for i, data in enumerate(X_test):\n        y_pred = model(data)\n        predictions.append(y_pred.argmax().item())\n        print(y_pred.argmax().item())","6053c5ef":"torch.save(model, 'heart-disease.pt')","dd1cee8a":"from sklearn.metrics import confusion_matrix\ncm = confusion_matrix(y_test, predictions)\ncm","6fad3659":"sns.heatmap(cm, annot=True)\nplt.xlabel('Actual Values')\nplt.ylabel('Predicted Values')","61bb3327":"from sklearn.metrics import precision_score\n\npre = precision_score(y_test, predictions)\npre","c95770d0":"from sklearn.metrics import recall_score\n\nrc = recall_score(y_test, predictions)\nrc","098822eb":"### Saving the model","ccd0db83":"### Plotting a Correlation Matrix","e353cf74":"# What is PyTorch ?\n\n* PyTorch is an open source machine learning library based on the Torch library, used for applications such as computer vision and natural language processing, primarily developed by Facebook's AI Research lab","949ee22b":"### Plotting our losses","13296a7b":"# If you like it please consider upvoting it Thank You :)\n# Code link\n\n* GitHUb : https:\/\/github.com\/akhiilkasare\/Heart-Disease-Prediction-Using-Pytorch","405a7c56":"\n### As age, trestbps, chol, thalach, oldpeak has higher values we need to scale down the values.","836c5e55":"### Defining the criterion and Optimizer","a0527285":"### Passing the data to our Neural Network","0343f2ae":"### Checking for Recall","14c41a42":"### Evaluating the accuracy","f6cfe4ba":"Plotting the target variable","9e2999ec":"![](https:\/\/miro.medium.com\/max\/1200\/1*r2eKvfvYPQuizKLOh9q7Hw.jpeg)","8bcca5ec":"### One Hot Encoding the categorical Columns","24448d28":"### Creating our Neural Network using Torch","bd7e23c0":"### Training our Neural Network","6cde251a":"### Converting our data into tensors(very inportant)\n\n* All your inputs and outputs ie. your independent and dependent features should be converted into tensors.\n* Your independent features needs to be converted into float tensor its very important\n* With respect to your dependent features its not that important","af1682e3":"* We can see from the graph is that the losses have decreased significantly.","18ae8724":"### Checking Precision","d35625c5":"### Checking for Null values.","1a759e35":"### Checking the shape of the dataset","a644c5e4":"# Advantages of Pytorch.\n\n*  PyTorch is Pythonic\n* Easy to learn\n* Higher developer productivity\n* Easy debugging\n* Data Parallelism\n* Dynamic Computational Graph Support\n* Fast model training ","c9fe071e":"### Making predictions on the x_test","0f69ac80":"### Before feeding our data to our Neural Network are values should be scaled ","51d18e15":"### Importing out torch deep learning library","ba280da7":"### Splitting the data into training and validation set.","baa6ebb5":"\n### Plotting the confusion matrix"}}