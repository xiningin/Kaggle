{"cell_type":{"3a379ada":"code","c358f6d0":"code","3bbbf5b0":"code","7870de3f":"code","19a73c6a":"code","2eba8fca":"code","64aab706":"code","93688885":"code","e70b1eac":"code","83e26c83":"code","f3e83cb8":"code","9532a442":"code","f6f5b463":"code","08446a88":"code","08fef6cb":"code","1963cbe6":"code","abff5428":"code","b7c6749b":"code","1ede1748":"code","dd229a0a":"code","1492fa9d":"code","a29ace65":"code","5f626641":"code","0cc49a49":"code","aba9780f":"code","df3959bf":"code","18914311":"code","b47fdeb8":"code","87442f45":"code","70788aa2":"code","ee6b98ff":"markdown","49c49430":"markdown"},"source":{"3a379ada":"# Import relevant libraries\nimport numpy as np \nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nsns.set()\n%matplotlib inline","c358f6d0":"# Load data\ndf = pd.read_csv('..\/input\/advertising\/advertising.csv')\ndf.head()","3bbbf5b0":"# Data contains a list of users on a particular website. Data tracks if the potential customer clicked on an ad or not and contains various features of these potential customers.\n# Features include daily time spent on site, age, income, sex, country, time of usage, etc.\n# Goal is to use this data to predict if a potential user on this website will click an ad or not.\n# While other models such as SVM, random forest, XGBoost, etc. can be used for this classification problem, linear regression was used for demonstration.","7870de3f":"df.info()","19a73c6a":"df.describe()","2eba8fca":"# Check for missing values\ndf.isnull().sum()","64aab706":"sns.distplot(df['Age'], kde=False, bins=30)\nplt.show()","93688885":"sns.jointplot(x='Age', y='Area Income', data=df)\nplt.show()","e70b1eac":"sns.jointplot(x='Age', y='Daily Time Spent on Site', data=df, kind='kde')\nplt.show()","83e26c83":"sns.jointplot(x='Daily Time Spent on Site', y='Daily Internet Usage', data=df)\nplt.show()","f3e83cb8":"sns.pairplot(df, hue='Clicked on Ad')\nplt.show()","9532a442":"df.columns","f6f5b463":"df.shape","08446a88":"# Convert values under 'Timestamp' from str to datetime\ndf['Timestamp'] = pd.to_datetime(df['Timestamp'])","08fef6cb":"df['Timestamp'][0]","1963cbe6":"# Creating new columns for 'Month', 'Day of Week', and 'Hour' from information in 'Timestamp' after converting to a datetime\ndf['Month'] = df['Timestamp'].apply(lambda t:t.month)\ndf['Day of Week'] = df['Timestamp'].apply(lambda t:t.dayofweek)\ndf['Hour'] = df['Timestamp'].apply(lambda t:t.hour)","abff5428":"df.head()","b7c6749b":"# Will convert to dummy variables\nprint(df['Country'].nunique())\n\n# Nearly all rows in this column are unique. Best to drop entire column prior to fitting the model.\nprint(df['City'].nunique())\n\n# Each row in this column is unique. Best to drop entire column prior to fitting the model.\nprint(df['Ad Topic Line'].nunique())\n\n# Each row in this column is unique. Best to drop entire column prior to fitting the model.\nprint(df['Ad Topic Line'].nunique())","1ede1748":"# Dropping colunms that will be excluded\ndf.drop(['Ad Topic Line', 'City', 'Timestamp'], axis=1, inplace=True)","dd229a0a":"df.head()","1492fa9d":"# Further exploratory data analysis with respect to time\n\nsns.countplot(x='Day of Week', hue='Clicked on Ad', data=df)\nplt.legend(bbox_to_anchor=(1.05,1), loc=2, borderaxespad=0)\nplt.show()","a29ace65":"sns.countplot(x='Month', hue='Clicked on Ad', data=df)\nplt.legend(bbox_to_anchor=(1.05,1), loc=2, borderaxespad=0)\nplt.show()","5f626641":"plt.figure(figsize=(16,4))\nsns.countplot(x='Hour', hue='Clicked on Ad', data=df)\nplt.legend(bbox_to_anchor=(1.05,1), loc=2, borderaxespad=0)\nplt.show()","0cc49a49":"# Converting countries into dummy variables and dropping the first column. One Hot Encoding is also viable.\ncountry = pd.get_dummies(df['Country'], drop_first=True)\ncountry.shape","aba9780f":"X = pd.concat([df, country], axis=1)\nX.drop(['Country', 'Clicked on Ad'], axis=1, inplace=True)\ny = df['Clicked on Ad']","df3959bf":"# Generating training and testing datasets\nfrom sklearn.model_selection import train_test_split\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=0)","18914311":"print(X_train.shape)\nprint(X_test.shape)","b47fdeb8":"# Importing model from sci-kit learn and fitting model with training data\nfrom sklearn.linear_model import LogisticRegression\nlogmodel = LogisticRegression(solver='liblinear')\nlogmodel.fit(X_train, y_train)","87442f45":"# Predicitions based on model\ny_pred = logmodel.predict(X_test)","70788aa2":"# Model performance evaluation\nfrom sklearn.metrics import confusion_matrix\nprint(confusion_matrix(y_test, y_pred))\nfrom sklearn.metrics import classification_report\nprint(classification_report(y_test, y_pred))","ee6b98ff":"## Exploratory Data Analysis","49c49430":"## Feature Selection"}}