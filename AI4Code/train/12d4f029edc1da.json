{"cell_type":{"6a8b264b":"code","ffa77362":"code","e59b310e":"code","fdef206f":"code","7485deef":"code","96c0f1fe":"code","139d7498":"code","abd5f8f8":"code","7f9bc6ae":"code","ec89e571":"code","8b9493b8":"code","a5d73048":"code","125d20b9":"code","45b57cc1":"code","3cb119e4":"code","5206be79":"code","6fe2e631":"code","1b4f82da":"code","1a8e0c8c":"code","dbefe032":"code","f129b8bb":"code","bb61b979":"code","c6036049":"code","51cb6ad8":"code","e58f6d87":"code","dc19cb19":"markdown","e5d99557":"markdown","412097bb":"markdown"},"source":{"6a8b264b":"import numpy as np \nimport pandas as pd \nimport seaborn as sns \nimport matplotlib.pyplot as plt \n%matplotlib inline","ffa77362":"initial_df = pd.read_csv('..\/input\/factors-affecting-campus-placement\/Placement_Data_Full_Class.csv')","e59b310e":"initial_df.head()","fdef206f":"print(initial_df.isnull().sum())","7485deef":"initial_df['salary'].fillna(0, inplace = True)","96c0f1fe":"ax = sns.catplot(data= initial_df, x='gender' ,  kind='count', hue='status')","139d7498":"ax = sns.catplot(data= initial_df, x='degree_t' ,  kind='count', hue='status')","abd5f8f8":"ax = sns.catplot(data= initial_df, x='hsc_s' ,  kind='count', hue='status')\n","7f9bc6ae":"ax = sns.catplot(data= initial_df, x='hsc_b' ,  kind='count', hue='status')\n","ec89e571":"ax = sns.catplot(data= initial_df, x='status' ,  y = 'degree_p', kind='swarm', )","8b9493b8":"ax = sns.catplot(data= initial_df, x='status' ,  y = 'hsc_p', kind='swarm')","a5d73048":"ax = sns.catplot(data= initial_df, x='status' ,  y = 'ssc_p', kind='swarm')","125d20b9":"ax = sns.catplot(data= initial_df, x='gender' ,  y = 'degree_p', kind='violin',hue = 'status' )","45b57cc1":"initial_df.drop('sl_no', axis=1,inplace=True)\nfrom sklearn.preprocessing import OrdinalEncoder\nordinal_encoder = OrdinalEncoder()\ngender_encoded = ordinal_encoder.fit_transform(initial_df[['gender']])\ninitial_df['gender'] = gender_encoded \nssc_encoded = ordinal_encoder.fit_transform(initial_df[['ssc_b']])\ninitial_df['ssc_b'] = ssc_encoded\nhsc_encoded = ordinal_encoder.fit_transform(initial_df[['hsc_b']])\ninitial_df['hsc_b'] = hsc_encoded\nhsc_s_encoded = ordinal_encoder.fit_transform(initial_df[['hsc_s']])\ninitial_df['hsc_s'] = hsc_s_encoded\ndegree_t_encoded = ordinal_encoder.fit_transform(initial_df[['degree_t']])\ninitial_df['degree_t'] = degree_t_encoded\nworkex_encoded = ordinal_encoder.fit_transform(initial_df[['workex']])\ninitial_df['workex'] = workex_encoded\nspecialisation_encoded = ordinal_encoder.fit_transform(initial_df[['specialisation']])\ninitial_df['specialisation'] = specialisation_encoded\nstatus_encoded = ordinal_encoder.fit_transform(initial_df[['status']])\ninitial_df['status'] = status_encoded\ninitial_df.head()","3cb119e4":"# Scaling data\nfrom sklearn.preprocessing import StandardScaler\nscaler = StandardScaler()\nscaled_data = scaler.fit_transform(initial_df)\n\n# Splitting train test. Although should have been done before EDA, due to small dataset, has been done now \nfrom sklearn.model_selection import train_test_split\ntrain_set, test_set = train_test_split(pd.DataFrame(scaled_data), test_size=0.2, random_state=42)\nplacement_status_trained = train_set[12]\nplacement_status_test = test_set[12]\ntrain_set.drop([12,13],axis=1,inplace=True)\ntest_set.drop([12,13],axis=1,inplace=True)","5206be79":"from sklearn.pipeline import Pipeline\nnum_pipeline = Pipeline([\n    ('scale', StandardScaler())\n])","6fe2e631":"from sklearn.linear_model import LinearRegression\nlin_reg = LinearRegression()\nlin_reg.fit(train_set,placement_status_trained)","1b4f82da":"# Testing Linear Regression\nsome_data = initial_df.drop(['status','salary'],axis = 1)[:5]\nsame_values = initial_df['status'][:5]\nsome_data = num_pipeline.fit_transform(some_data)\nprint (lin_reg.predict(some_data))\nprint (same_values)\n# Works! ","1a8e0c8c":"from sklearn.metrics import mean_squared_error\nplacement_status_predict = lin_reg.predict(test_set)\nlin_mse = mean_squared_error(placement_status_test, placement_status_predict)\nlin_rmse = np.sqrt(lin_mse)\nlin_rmse","dbefe032":"from sklearn.metrics import mean_absolute_error\n\nlin_mae = mean_absolute_error(placement_status_test, placement_status_predict)\nlin_mae","f129b8bb":"# Cross validating\nscores = cross_val_score(tree_reg, housing_prepared, housing_labels,\n                         scoring=\"neg_mean_squared_error\", cv=10)","bb61b979":"# Linear is a terrible model, Do no select, Moving to logistic  ","c6036049":"from sklearn.model_selection import cross_val_score\n# scores = cross_val_score(kernel='linear',train_set,placement_status_trained,\n#                          scoring=\"neg_mean_squared_error\", cv=10)\nscores = cross_val_score(lin_reg,train_set, placement_status_trained,\n                         scoring=\"neg_mean_squared_error\", cv=10 )\n","51cb6ad8":"scores\n# Data fit is incorrect. Probably for the small nature of data","e58f6d87":"# This was a walkalong of the HOM C-2. Although model does not fit, will continue with these concepts in C-3\n","dc19cb19":"### Only linear test","e5d99557":"## EDA Observations:\n\n1. All features seem relevant, no manual cleaning required. Moving on to preprocessing, model selection and training. \n\n\n### Preprocessing:","412097bb":"### Data looks loaded correctly, onto EDA! \nInitial observations:\n1. SL NO looks like a redundat field, our index does a fine job, drop pehaps or replace the index with the serial num column\n2. Salary has null values for not placed, filled it with 0"}}