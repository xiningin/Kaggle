{"cell_type":{"b30fffff":"code","1ec3187a":"code","0005f974":"code","170fc3d8":"code","b8155462":"code","49f7f7b7":"code","3d23a496":"code","fd1a8cc6":"code","702a7cee":"code","cc84f27e":"code","322b1e01":"code","f1e788c5":"code","12a7dcbb":"code","eaf8b012":"code","77e56ebd":"code","50513fd8":"markdown","3ed93dad":"markdown","45d51127":"markdown","55ba5d06":"markdown","e81e7094":"markdown","369611c3":"markdown","03ac549a":"markdown","f206d19b":"markdown","b0c1e700":"markdown","4d33abc7":"markdown","9d2c8be0":"markdown","8bb94b74":"markdown"},"source":{"b30fffff":"import os\nimport pprint\nimport operator\nimport numpy as np\nimport pandas as pd\nfrom os import listdir\nfrom sklearn.metrics.pairwise import pairwise_distances ","1ec3187a":"#Information about the data\ninfo = pd.read_csv(\"..\/input\/movielens-100k-dataset\/ml-100k\/u.info\", sep=\" \", header=None)\ninfo.columns=['Counts', 'Type']\ninfo","0005f974":"#Types of genres\ngenre = pd.read_csv('..\/input\/movielens-100k-dataset\/ml-100k\/u.genre', sep=\"|\", encoding='latin-1', header=None)\ngenre.drop(genre.columns[1], axis=1, inplace=True)\ngenre.columns = ['Genres']\ngenre_list = list(genre['Genres'])\ngenre_list","170fc3d8":"#Types of occupations\noccupation = pd.read_csv('..\/input\/movielens-100k-dataset\/ml-100k\/u.occupation', sep=\"|\", encoding='latin-1', header=None)\noccupation.columns = ['Occupations']\noccupation_list = list(occupation['Occupations'])\noccupation_list","b8155462":"#Load the Ratings data\ndata = pd.read_csv('..\/input\/movielens-100k-dataset\/ml-100k\/u.data', sep=\"\\t\", header=None)\ndata.columns = ['user id', 'movie id', 'rating', 'timestamp']\ndata.head()","49f7f7b7":"#Load the Movies data\nitem = pd.read_csv('..\/input\/movielens-100k-dataset\/ml-100k\/u.item', sep=\"|\", encoding='latin-1', header=None)\nitem.columns = ['movie id', 'movie title' ,'release date','video release date', 'IMDb URL', 'unknown', 'Action', \n                'Adventure', 'Animation', 'Children\\'s', 'Comedy', 'Crime', 'Documentary', 'Drama', 'Fantasy', 'Film-Noir', \n                'Horror', 'Musical', 'Mystery', 'Romance', 'Sci-Fi', 'Thriller', 'War', 'Western']\nitem.head()","3d23a496":"#Load the User data\nuser = pd.read_csv('..\/input\/movielens-100k-dataset\/ml-100k\/u.user', sep=\"|\", encoding='latin-1', header=None)\nuser.columns = ['user id', 'age', 'gender', 'occupation', 'zip code']\nuser.head()","fd1a8cc6":"#merge the 'data' table with 'user' table\ndata_user = pd.merge(data[['user id', 'movie id', 'rating']], user[['user id', 'occupation']], on='user id')\ndata_user.drop(columns = ['user id'], inplace=True)\n\n#merge the 'Data_User' dataframe with 'Item' dataframe to get each rating, occupation of user and movie title\ndata_user_item = pd.merge(data_user[['movie id', 'rating', 'occupation']], item[['movie id', 'movie title']], on='movie id')\ndata_user_item.drop(columns = ['movie id'], inplace=True)\n\n#group the data by occupation and movie title and sort with decreasing average ratings\ndata_user_item_sorted = data_user_item.groupby(['occupation', 'movie title'], as_index=False)['rating'].mean().sort_values('rating', ascending=False)\n\n#group data by occupation, movie title and select top 3 movies for each occupation\ntop_3_occ = data_user_item_sorted.groupby(['occupation']).head(3).sort_values(['occupation', 'movie title'], ascending=[True, True]).reset_index()\ntop_3_occ.drop(['index'], axis=1, inplace=True)\n\ntop_3_occ","702a7cee":"#merge the 'data' table with the 'item' table\ndata_item = pd.merge(data[['user id', 'movie id', 'rating']], item, on='movie id')\ndata_item.drop(columns = ['user id', 'movie id', 'release date', 'video release date', 'IMDb URL'], inplace=True)\n\n#For each genre get the top 3 movies by average rating\ntop_3_genre = pd.DataFrame()\nfor gen in genre_list:\n    g_r = data_item[data_item[gen] == 1]\n    new_gen = pd.DataFrame(g_r.groupby(['movie title'], as_index=False)['rating'].mean().sort_values(['rating', 'movie title'], ascending=[False, True]).head(3))\n    new_gen.insert(0, 'genre', gen)\n    top_3_genre = top_3_genre.append(new_gen, ignore_index=True)\n\ntop_3_genre","cc84f27e":"#merge the 'data' table with 'user' table\ndata_user_og = pd.merge(data[['user id', 'movie id', 'rating']], user[['user id', 'occupation']], on='user id')\ndata_user_og.drop(columns = ['user id'], inplace=True)\n\n#merge the 'data_user_og' dataframe with 'Item' dataframe to get each rating, occupation of user and movie title\ndata_user_item_og = pd.merge(data_user_og[['movie id', 'rating', 'occupation']], item, on='movie id')\ndata_user_item_og.drop(columns = ['movie id'], inplace=True)\n\n#find the top 3 movies in each genre for each occupation\ntop_3_occ_genre = pd.DataFrame()\nfor occ in list(occupation['Occupations']):\n    occ_table = data_user_item_og[data_user_item_og['occupation']==occ]\n    for gen in genre_list:\n        g_o_r = occ_table[occ_table[gen] == 1]\n        new_occ_gen = pd.DataFrame(g_o_r.groupby(['movie title'], as_index=False)['rating'].mean().sort_values(['rating', 'movie title'], ascending=[False, True]).head(3))\n        new_occ_gen.insert(0, 'genre', gen)\n        new_occ_gen.insert(0, 'occupation', occ)\n        top_3_occ_genre = top_3_occ_genre.append(new_occ_gen, ignore_index=True)\n        \ntop_3_occ_genre","322b1e01":"#create a column of age group in the users dataframe\nbins= [0,6,12,18,30,50,200]\nlabels = ['<=6','<=12','<=18','<=30','<=50', '50+']\nuser['age group'] = pd.cut(user['age'], bins=bins, labels=labels, right=True)\n\n#merge the 'data' table with the 'user' table\ndata_user_age = pd.merge(data[['user id', 'movie id', 'rating']], user[['user id', 'age group']], on='user id')\ndata_user_age.drop(columns = ['user id'], inplace=True)\n\n#merge the 'data_user_age' table with the 'item' table to get each rating, age group of user and movie title\ndata_user_item_age = pd.merge(data_user_age[['movie id', 'rating', 'age group']], item[['movie id', 'movie title']], on='movie id')\ndata_user_item_age.drop(columns = ['movie id'], inplace=True)\ndata_user_item_age['age group'] = data_user_item_age['age group'].astype('category')\n\n#group the data by age group and movie title and sort with decreasing average ratings\ndata_user_item_age_sorted = data_user_item_age.groupby(['age group', 'movie title'], as_index=False)['rating'].mean().sort_values('rating', ascending=False)\n\n#group data by occupation, movie title and select top 3 movies for each occupation\ntop_3_age = data_user_item_age_sorted.groupby(['age group']).head(3).sort_values(['age group', 'movie title'], ascending=[True, True]).reset_index()\ntop_3_age.drop(['index'], axis=1, inplace=True)\n\ntop_3_age","f1e788c5":"#merge 'data' table with 'item' table and count movies by genre\ndata_item_gen = pd.merge(data[['user id', 'movie id', 'rating']], item, on='movie id')\ndata_item_gen['release date 2'] = pd.to_datetime(data_item_gen['release date'])\ndata_item_gen['release month'] = data_item_gen['release date 2'].dt.month\ndata_item_gen_summer = data_item_gen[(data_item_gen['release month']>=5) & (data_item_gen['release month']<=7)]\n\ncount_gen = {}\nfor gen in genre_list:\n    count_gen[gen] = sum(data_item[gen])\n\nsorted_count_gen = sorted(count_gen.items(), key=operator.itemgetter(1), reverse=True)\nsorted_count_gen[:3]","12a7dcbb":"top_3_genre_summer = pd.DataFrame(columns = ['genre', 'average rating'])\nfor gen in genre_list:\n    genre_this = data_item_gen_summer[data_item_gen_summer[gen] == 1]\n    row = [gen, genre_this['rating'].mean()]\n    top_3_genre_summer.loc[len(top_3_genre_summer)] = row\n    \ntop_3_genre_summer_res = top_3_genre_summer.sort_values('average rating', ascending=False).head(3)\n# top_3_genre_summer_res.to_csv('Top3GenresSummer.csv', index=False, sep=',')\ntop_3_genre_summer_res","eaf8b012":"#merge the 'data' table with the 'item' table\ndata_item_gen_co = pd.merge(data[['user id', 'movie id', 'rating']], item, on='movie id')\n\n#for each genre, calculate the top 2 co-occurring genres and store results in a dictionary\ntop2gens = {}\nfor gen1 in genre_list:\n    t = {}\n    for gen2 in genre_list:\n        if gen1 != gen2:\n            t[gen2] = data_item_gen_co[(data_item_gen_co[gen1]==1) & (data_item_gen_co[gen2]==1)].shape[0]\n    sorted_t = sorted(t.items(), key=operator.itemgetter(1), reverse=True)\n    top2gens[gen1] = sorted_t[:2]\n\ntop2gens","77e56ebd":"#create a user-rating matrix\ndata_matrix = np.zeros((info['Counts'][0], info['Counts'][1]))\nfor line in data.itertuples():\n    data_matrix[line[1]-1, line[2]-1] = line[3]\n\n#calculate user similarity matrix based on cosine similarity of ratings\nuser_similarity = pairwise_distances(data_matrix, metric='cosine')\n\n#create dictionary of each user and user with most simiar preferances\nsim_user= {}\nfor i in range(943):\n    sim_user[i+1] = [np.argmax(user_similarity[i])+1]\n\n#The dictionary sim_user contains the most similar user to every user in the data.","50513fd8":"Note here that some occupations have multiple movies that are top rated (5 stars). In that case the movies have been sorted by the titles and the top 3 are obtained.","3ed93dad":"**WHAT ARE THE TOP 2 CO-OCCURRING GENRES FOR EACH GENRE?**","45d51127":"**WHICH ARE THE TOP 3 MOVIES IN EACH GENRE?**","55ba5d06":"We observe here that no movie has been rated in the age group having ages less than 6, hence we have the movie titles sorted by titles for this group in the results. For the other age groups, we have the top 3 moveis having the highest average rating in that age group sorted by movie titles.","e81e7094":"**WHICH ARE THE TOP 3 MOVIES BY OCCUPATIO & GENRE?**","369611c3":"To look at the top 3 genres released during the months of summer, we will get the top 3 genres based on the number of movies as well as the average ratings for movies having these genres.\n\n1) By the count","03ac549a":"**WHAT ARE THE TOP 3 MOIVES FOR EACH OCCUPATION?**","f206d19b":"**WHICH ARE THE TOP 3 MOVIES BY AGE?**","b0c1e700":"2) By average rating","4d33abc7":"**MovieLens 100K Dataset Description:**\n\nThe data used in the following analysis is the MovieLens data of 100K movie ratings. The data was collected through the MovieLens website (movielens.umn.edu) during the seven-month period from September 19th, 1997 to April 22nd, 1998. This data set consists of 100,000 ratings (1-5) from 943 users on 1682 movies. The data has been filtered such that each user has rated at least 20 movies.\n\nWe want to answer a few questions:\n\n1) What are the Top 3 movies by Occupation of users?\n\n2) What are the Top 3 movies in each Genre of movies?\n\n3) What are the Top 3 by Occupation, Genre?\n\n4) What are the Top 3 movies for each Age Group of users?\n\n5) What are the Top 3 genres released in Summer (May \u2013 July)?\n\n6) For each genre, what are the top 2 co-occurring genres?\n\n7) For each user, can we find another one with a similar preference?","9d2c8be0":"**FOR EACH USER, CAN WE FIND ANOTHER ONE WITH THE MOST SIMILAR PREFREANCES?**","8bb94b74":"**WHICH ARE THE TOP 3 GENRES RELEASED IN SUMMER [MAY-JULY]?**"}}