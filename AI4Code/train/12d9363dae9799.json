{"cell_type":{"5952c2dd":"code","d6edd4c7":"code","6147e02d":"code","11cad98b":"code","59dce151":"code","f5a521dc":"code","b95441cb":"code","7f23bfd0":"code","01bf955d":"code","444a489b":"code","f970fd63":"code","e4f8b996":"code","4e49438c":"code","84b1c510":"code","67bce2e1":"code","8c9a1a61":"code","78675d0c":"code","79643eb1":"code","fa56eda0":"code","4b20421c":"code","d0db11d0":"code","f9774e7b":"code","7e1a1581":"code","3d0a30ab":"code","9af8b254":"code","777cd305":"code","ed681809":"code","9c3e03d9":"code","2310cceb":"code","6f2b773f":"code","64232758":"code","a5330eb4":"code","e725d4a1":"code","f9a90234":"code","f2a589f5":"code","3353486f":"code","3da3cd6b":"code","8cb7abf0":"code","cdd74a37":"code","da5c52e6":"code","a21867ab":"code","818eb3de":"code","9c4cf24b":"code","b1ef3fe2":"code","64d17007":"code","f026131a":"code","9c104cd5":"code","5863beef":"code","65541e8b":"code","3ef12aaa":"code","c5cede45":"code","a28a572c":"code","f8352a29":"code","3c1313ec":"code","c3cb66a0":"code","25befabd":"code","66fef4f0":"markdown","0d75d719":"markdown","9d8a56d5":"markdown","c1ef48f3":"markdown"},"source":{"5952c2dd":"pip install pygal","d6edd4c7":"import numpy as np \nimport pandas as pd\nimport seaborn as sns\nimport matplotlib.pyplot as plt \nimport plotly as plot\nimport pygal as py\nimport squarify as sq\nimport missingno as msg\nimport sklearn\nimport warnings\nwarnings.filterwarnings(\"ignore\")\n%matplotlib inline ","6147e02d":"df=pd.read_csv(\"..\/input\/internet-service-churn\/internet_service_churn.csv\",engine=\"python\",encoding=\"utf-8 \")","11cad98b":"df","59dce151":"df.head(10)","f5a521dc":"df.shape","b95441cb":"df.dtypes","7f23bfd0":"df[\"churn\"].dtype","01bf955d":"df_cols=df.columns.tolist()\nfor i in df.columns.tolist():\n    print(i)","444a489b":"df.describe().transpose()","f970fd63":"df.isnull().sum()","e4f8b996":"df.info()","4e49438c":"msg.heatmap(df);plt.show()","84b1c510":"df.drop('id',axis='columns', inplace=True)","67bce2e1":"df","8c9a1a61":"list_sub1=df[[\"is_tv_subscriber\",\"is_movie_package_subscriber\"]].sum()\nlist_sub1","78675d0c":"print (\"How many are not tv subscriber :\" , df[df[\"is_tv_subscriber\"]==0].count()[\"churn\"])\nprint (\"How many are not movie_package_subscriber :\" , df[df[\"is_movie_package_subscriber\"]==0].count()[\"churn\"])","79643eb1":"list_sub1.plot.bar()","fa56eda0":"# create data\nx = [\"is_tv_subscriber\",\"is_movie_package_subscriber\"]\ny1 = [df[df[\"is_tv_subscriber\"]==1].count()[\"is_tv_subscriber\"],df[df[\"is_tv_subscriber\"]==0].count()[\"is_tv_subscriber\"]]\ny2 = [df[df[\"is_movie_package_subscriber\"]==1].count()[\"is_movie_package_subscriber\"],df[df[\"is_movie_package_subscriber\"]==0].count()[\"is_movie_package_subscriber\"]]\n  \nplt.bar(x, y1, color='g')\nplt.bar(x, y2, bottom=y1, color='b')\nplt.legend([\"subscriber\",\"not a subscriber\"])\nplt.title(\"subscribers both for tv and mobile\")\nplt.show()","4b20421c":"sns.boxplot(x=\"churn\",y=\"subscription_age\",data=df);plt.show() ","d0db11d0":"df[\"is_tv_subscriber\"].count()","f9774e7b":"subscribers=[\"is_tv_subscriber\",\"is_movie_package_subscriber\"]\nfor i in subscribers:\n    sns.categorical.boxenplot(x=\"churn\",y=\"bill_avg\",data=df,hue=i);plt.title(\"avg bill of \"+ i)\n    plt.show()","7e1a1581":"df.loc[:,[\"subscription_age\",\"bill_avg\"]]\nlist2=list(df.loc[:,[\"subscription_age\",\"bill_avg\"]].columns)\nfor i in list2:\n    df[i].plot.hist(bins=20,title= str(i)+ \" historgram\")\n    plt.show()","3d0a30ab":"correlation=df.corr();correlation","9af8b254":"sns.set_palette(\"Accent\")\nplt.figure(figsize=(15,8))\nsns.heatmap(correlation,vmin=-1,vmax=1,annot=True);plt.show()","777cd305":"df2=df.loc[:,[\"subscription_age\",\"bill_avg\",\"reamining_contract\",\"service_failure_count\",\"download_avg\",\"upload_avg\"]]\nfor i in df2.columns.tolist():\n    df[i].plot.box(patch_artist = True,notch ='True')\n    plt.title(\"boxplot for \"+ str(i))\n    plt.show()\n    print([df[i].quantile(0.25),df[i].quantile(0.5),df[i].quantile(0.75),df[i].quantile(1)])","ed681809":"sns.set_style(\"darkgrid\")\nsns.countplot(x=\"download_over_limit\",hue=\"churn\",data=df);plt.show()","9c3e03d9":"df=df.dropna()\nsns.pairplot(df,hue=\"churn\");plt.show() ","2310cceb":"from sklearn.feature_selection import SelectKBest\nfrom sklearn.feature_selection import chi2","6f2b773f":"df[\"subscription_age\"]=[abs(i) for i in df[\"subscription_age\"]]\ny=df[\"churn\"]\nx=df.loc[:,[\"is_tv_subscriber\",\"is_movie_package_subscriber\",\"subscription_age\",\"bill_avg\",\"reamining_contract\",\"service_failure_count\",\"download_avg\",\"upload_avg\",\"download_over_limit\"]]\nbestcolumns=SelectKBest(score_func=chi2,k=\"all\")\nfit=bestcolumns.fit(x,y)\ndf_scores=pd.DataFrame(fit.scores_)\ndfcolumns=pd.DataFrame(x.columns)\nfeatureScores=pd.concat([dfcolumns,df_scores],axis=1)\nfeatureScores.columns=[\"Features\",\"scores\"]\nfeatureScores","64232758":"X_kbest = bestcolumns.fit_transform(x, y)\nprint('Original number of features:', x.shape[1])\nprint('Reduced number of features:', X_kbest.shape[1])","a5330eb4":"featureScores.plot.bar(x=\"Features\",y=\"scores\") #using chi method for feature selection\nplt.show()\n#result doesn't show well . so,we used another method","e725d4a1":"from sklearn.feature_selection import mutual_info_classif\nimportant_features =mutual_info_classif(x,y)\nfeat_importances=pd.Series(important_features,df.columns[0:len(df.columns)-1])\nfeat_importances","f9a90234":"feat_importances.plot.barh(color=\"teal\");plt.show()","f2a589f5":"# Import libraries\nfrom sklearn import preprocessing\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.model_selection import train_test_split\nfrom sklearn import tree\nfrom sklearn.ensemble import RandomForestClassifier","3353486f":"# Normalize feature vector\nX2 = StandardScaler().fit_transform(x)","3da3cd6b":"x_train, x_test, y_train, y_test = train_test_split(X2, y, test_size = 0.30, random_state = 0)","8cb7abf0":"clf = RandomForestClassifier(n_estimators=100, random_state=0)\nclf.fit(x_train, y_train)","cdd74a37":"y_pred = clf.predict(x_test)\ny_pred","da5c52e6":"\nplt.figure(num=None, figsize=(10,8), dpi=80, facecolor='firebrick', edgecolor='pink')\n\nfeat_importances = pd.Series(clf.feature_importances_, index= x.columns)\n\nfeat_importances.nlargest(10).plot(kind='barh')","a21867ab":"df.reset_index()","818eb3de":"from sklearn.tree import DecisionTreeClassifier\ndf2=df.loc[:,[\"subscription_age\",\"bill_avg\",\"reamining_contract\",\"download_avg\",\"upload_avg\",\"churn\"]]\ndf2=df2.reset_index();df2","9c4cf24b":"a=df2.loc[:,[\"subscription_age\",\"bill_avg\",\"reamining_contract\",\"download_avg\",\"upload_avg\"]]\ny=df2[\"churn\"]\n#Using the train_test_split to create train and test sets.\na_train, a_test, y_train, y_test = train_test_split(a, y, random_state = 50, test_size = 0.25)","b1ef3fe2":"a","64d17007":"clf = DecisionTreeClassifier(criterion = 'entropy')","f026131a":"#Training the decision tree classifier. \nclf.fit(a_train, y_train)","9c104cd5":"y_pred=clf.predict(a_train)\ny_pred","5863beef":"from sklearn.metrics import accuracy_score\nprint('Accuracy Score on train data: ', accuracy_score(y_true=y_train, y_pred=clf.predict(a_train)))\nprint('Accuracy Score on test data: ', accuracy_score(y_true=y_test, y_pred=clf.predict(a_test)))","65541e8b":"clf.predict([[11.94,32,1.38,69.4,4.0]])","3ef12aaa":"# Creating some predictions.\nfrom sklearn.model_selection import cross_val_predict","c5cede45":"y_train_pred = cross_val_predict(clf, a_train, y_train, cv=3)\n\n\n# Constructing the confusion matrix.\nfrom sklearn.metrics import confusion_matrix\nmatrix=confusion_matrix(y_train, y_train_pred)\nmatrix","a28a572c":"confusion_matrix(y_test,clf.predict(a_test))","f8352a29":"sns.heatmap(confusion_matrix(y_train, y_train_pred),annot=True);\nplt.title(\"Confusion matrix for train data\");plt.show()","3c1313ec":"print(\"accuracy using confusion matrix for train data =\" , (matrix[0,0]+matrix[1,1])*100\/(matrix[0,0]+matrix[1,1]+matrix[0,1]+matrix[1,0]))\nmatrix2=confusion_matrix(y_test,clf.predict(a_test))\n\nprint(\"accuracy using confusion matrix for test data =\" , (matrix2[0,0]+matrix2[1,1])*100\/(matrix2[0,0]+matrix2[1,1]+matrix2[0,1]+matrix2[1,0]))","c3cb66a0":"pip install pydotplus","25befabd":"#create tree for decision tree classifier\nfrom io import StringIO  \nfrom IPython.display import Image as image  \nfrom sklearn.tree import export_graphviz\nimport pydotplus\ndot_data = StringIO()\nexport_graphviz(clf, out_file=dot_data,  \n                filled=True, rounded=True,\n                special_characters=True)\ngraph = pydotplus.graph_from_dot_data(dot_data.getvalue())  \nimage(graph.create_png())","66fef4f0":"# Filter method for the feature selection using information gain","0d75d719":"Most important features or columns are:\"subscription_age\",\"bill_avg\",\"reamining_contract\",\"download_avg\",\"upload_avg\"","9d8a56d5":"# univariate selection","c1ef48f3":"# Feature Selection"}}