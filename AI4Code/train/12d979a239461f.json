{"cell_type":{"dddac42c":"code","7c978f08":"code","244cfb81":"code","008b8ffe":"code","b4f21c5f":"code","c3751d7b":"code","fd318537":"code","65a36db1":"code","6a47b5a1":"code","09e175cf":"code","5c4c57ff":"code","5c29a529":"code","d7fc6abe":"code","d0dc96cb":"code","3513193a":"code","47ad08fb":"code","0afd1f5c":"code","44b1886e":"code","6799511c":"code","c8318a29":"code","5a4d5135":"code","9dffd72a":"code","1e823ea0":"code","4d913365":"code","313da2d5":"code","f8e5c51e":"code","36ea2dd9":"code","4f86fc42":"markdown","1da7275c":"markdown","4a9252ec":"markdown","e157391d":"markdown","fcc95e5e":"markdown","963397c3":"markdown","3a73b718":"markdown","5584469c":"markdown","eece4c3f":"markdown","9b8c1c57":"markdown","1315918b":"markdown","9717d1a8":"markdown","61b18a62":"markdown","75ecbc27":"markdown","1940fae3":"markdown","f01ae9bd":"markdown","9dcfc15a":"markdown","6806b9f5":"markdown","4b0fb721":"markdown","d4e74db9":"markdown","1a5e85d8":"markdown","87e2d326":"markdown","cf1231ad":"markdown","ad2b0f60":"markdown"},"source":{"dddac42c":"# Importing numpy, pandas, matplotlib and seaborn:\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n# Imports for plotly:\nimport plotly.graph_objs as go\nimport plotly.express as px\nimport plotly.figure_factory as ff\nfrom plotly.subplots import make_subplots\n\nimport random","7c978f08":"# Explore what's in world-happiness folder:\nimport os\n\nprint(os.listdir('..\/input\/world-happiness\/'))","244cfb81":"# Load data for 2015 - 2019 and add year column to each dataset:\ndf_15 = pd.read_csv('..\/input\/world-happiness\/2015.csv')\ndf_15['Year'] = 2015\n\ndf_16 = pd.read_csv('..\/input\/world-happiness\/2016.csv')\ndf_16['Year'] = 2016\n\ndf_17 = pd.read_csv('..\/input\/world-happiness\/2017.csv')\ndf_17['Year'] = 2017\n\ndf_18 = pd.read_csv('..\/input\/world-happiness\/2018.csv')\ndf_18['Year'] = 2018\n\ndf_19 = pd.read_csv('..\/input\/world-happiness\/2019.csv')\ndf_19['Year'] = 2019","008b8ffe":"# Function to describe variables:\ndef desc(df):\n    d = pd.DataFrame(df.dtypes,columns=['Data_Types'])\n    d = d.reset_index()\n    d['Columns'] = d['index']\n    d = d[['Columns','Data_Types']]\n    d['Missing'] = df.isnull().sum().values    \n    d['Uniques'] = df.nunique().values\n    return d\n\n# Apply desc to df:\ntab = ff.create_table(desc(df_19))\ntab.show()","b4f21c5f":"# We want to concatenate dataframes, but because columns are named differently we will be renaming them:\ndf_17.rename(columns={'Happiness.Rank': 'Happiness Rank', 'Happiness.Score': 'Happiness Score', 'Economy..GDP.per.Capita.':'Economy (GDP per Capita)'\n                      , 'Health..Life.Expectancy.':'Health (Life Expectancy)', 'Trust..Government.Corruption.':'Trust (Government Corruption)'\n                      , 'Dystopia.Residual':'Dystopia Residual' }, inplace=True)\n\ndf_18.rename(columns={'Overall rank':'Happiness Rank', 'Country or region':'Country','Score':'Happiness Score', 'GDP per capita':'Economy (GDP per Capita)'\n                      ,'Social support':'Family', 'Healthy life expectancy':'Health (Life Expectancy)','Freedom to make life choices':'Freedom'\n                      ,'Perceptions of corruption':'Trust (Government Corruption)' }, inplace=True)\n\ndf_19.rename(columns={'Overall rank':'Happiness Rank', 'Country or region':'Country', 'Score':'Happiness Score', 'GDP per capita':'Economy (GDP per Capita)'\n                      ,'Social support':'Family', 'Healthy life expectancy':'Health (Life Expectancy)','Freedom to make life choices':'Freedom'\n                      ,'Perceptions of corruption':'Trust (Government Corruption)' }, inplace=True)\n","c3751d7b":"# Concatenate dataframe for word-hapiness:\nframes = [df_15, df_16, df_17, df_18, df_19]\ndf = pd.concat(frames)\n\n# Drop columns that are not populated for all dataframes:\ndf = df.drop(['Region','Standard Error', 'Dystopia Residual', 'Lower Confidence Interval', 'Upper Confidence Interval', 'Whisker.high', 'Whisker.low'],axis = 1)\n\n# Rename columns, so it's easier to read them:\ndf.rename(columns = {'Economy (GDP per Capita)':'GDP per Capita', 'Family':'Social Support', 'Health (Life Expectancy)':'Life Expectancy'\n                     , 'Trust (Government Corruption)':'Corruption'}, inplace=True)\n\n# Let's have a look at our dataframe:\ndf.head()","fd318537":"# Match region from df_15 to countries from our df by using merge:\ndf_reg = df_15[['Country', 'Region']]\ndf = df.merge(df_reg)","65a36db1":"!pip install pycountry_convert","6a47b5a1":"# Create a function to assign continent to country:\n\nimport pycountry_convert as pc\n\ndef country_2_continent(country_name):\n    try:\n        if country_name in ['Holy See', 'Kosovo']:\n            return 'Europe'\n        if country_name in ['North Cyprus','East Timor','Timor-Leste','West Bank and Gaza','Palestinian Territories','Taiwan Province of China','Hong Kong S.A.R., China']:\n            return 'Asia'\n        if country_name in ['Congo (Brazzaville)','Congo (Kinshasa)','Somaliland region', 'Somaliland Region']:\n            return 'Africa'\n        if country_name in ['Trinidad & Tobago']:\n            return 'South America'\n        else:\n            country_alpha2 = pc.country_name_to_country_alpha2(country_name)\n            country_continent_code = pc.country_alpha2_to_continent_code(country_alpha2)\n            country_continent_name = pc.convert_continent_code_to_continent_name(country_continent_code)\n            return country_continent_name\n    \n    except:\n         return 'Other'    ","09e175cf":"# Create a Continent column: \ndf['Continent'] = df['Country'].apply(country_2_continent)","5c4c57ff":"# Create data-frame for year 2019:\ndf_19 = df[df.Year == 2019]\n\n# Numerical columns of df_19 which we want to display:\ncols_dd = ['Happiness Score', 'GDP per Capita','Social Support', 'Life Expectancy', 'Freedom', 'Corruption','Generosity']\n# Define which trade will be visible:\nvisible = np.array(cols_dd)\n\n# Define traces and buttons:\ntraces = []\nbuttons = []\nfor value in cols_dd:\n    traces.append(go.Choropleth(locations=df_19['Country']\n                                , locationmode='country names'\n                                , z=df_19[value].astype(float)\n                                , colorbar_title=value\n                                , visible= True if value==cols_dd[0] else False\n                                , colorscale='Bluered'\n                                , reversescale=True\n                               )\n                 )\n\n    buttons.append(dict(label=value\n                        , method='update'\n                        , args=[{'visible':list(visible==value)}\n                        , {'title':f\"<b>{value}<\/b>\"}]))\n\nupdatemenus = [{'active':0\n                ,'buttons':buttons\n               }]\n\n\n# Show figure\nfig = go.Figure(data=traces,\n                layout=dict(updatemenus=updatemenus))\n# This is in order to get the first title displayed correctly\nfirst_title = cols_dd[0]\nfig.update_layout(title=f\"<b>{first_title} (2019)<\/b>\")\nfig.show()","5c29a529":"# Correlation matrix for Happiness dataset features:\n\ncorr = df[['Happiness Score', 'GDP per Capita','Social Support', 'Life Expectancy', 'Freedom', 'Corruption','Generosity']].astype(float).corr()\nl = list(corr.columns)\n\nfig = ff.create_annotated_heatmap(np.array(round(corr,4)), x=l, y=l, colorscale = 'Bluered', reversescale=True )\nfig.update_layout(title='')\n\nfig.show()","d7fc6abe":"q1, q2, q3 = df['Happiness Score'].quantile([0.25,0.5,0.75])\n\ndef category(value):\n    if value < q1:\n        return 'low'\n    if value > q3:\n        return 'high'\n    else:\n        return 'medium'\n    \ndf['Category'] = df['Happiness Score'].apply(category)    ","d0dc96cb":"# Overwrite data-frame for year 2019:\ndf_19 = df[df.Year == 2019]\n\n# Boxplot with dropdown menu for main features:\n\nfig = go.Figure()\n\n# Add Traces\n\nfig.add_trace(go.Box(x=df_19['Category'], y=df_19['GDP per Capita']))\nfig.add_trace(go.Box(x=df_19['Category'], y=df_19['Social Support'], visible=False))  \nfig.add_trace(go.Box(x=df_19['Category'], y=df_19['Life Expectancy'], visible=False))  \nfig.add_trace(go.Box(x=df_19['Category'], y=df_19['Freedom'], visible=False))  \nfig.add_trace(go.Box(x=df_19['Category'], y=df_19['Corruption'], visible=False))  \nfig.add_trace(go.Box(x=df_19['Category'], y=df_19['Generosity'], visible=False))  \n \n\n# Add Buttons\n\nfig.update_layout(\n    updatemenus=[\n        dict(\n            active=1,\n            buttons=list([ \n                \n                dict(label='GDP',\n                     method='update',\n                     args=[{'visible': [True, False,False, False, False, False]},\n                           {'title': 'Boxplot for GDP per Capita (Happiness Category split)'}]),\n                \n                dict(label='Social Support',\n                     method='update',\n                     args=[{'visible': [False, True, False, False, False, False]},\n                           {'title': 'Boxplot for Social Support (Happiness Category split)'}]),\n                \n                dict(label='Life Expectancy',\n                     method='update',\n                     args=[{'visible': [False,  False, True, False, False, False]},\n                           {'title': 'Boxplot for Health (Happiness Category split)'}]),\n                \n                dict(label='Freedom',\n                     method='update',\n                     args=[{'visible': [False, False, False, True,  False, False]},\n                           {'title': 'Boxplot for Freedom (Happiness Category split)'}]),\n                \n                dict(label='Corruption',\n                     method='update',\n                     args=[{'visible': [False, False, False, False, True, False]},\n                           {'title': 'Boxplot for Corruption (Happiness Category split)'}]),\n                \n                dict(label='Generosity',\n                     method='update',\n                     args=[{'visible': [False, False, False, False, False,True]},\n                           {'title': 'Boxplot for Generosity (Happiness Category split)'}]),\n                \n               \n            ]),\n        )\n    ])\n\n# Set title\nfig.update_layout(title_text='Boxplot for Happiness Score Categories (2019)')\n\nfig.show()","3513193a":"df_top = df[df['Happiness Rank']<=10]\ndf_top = df_top.sort_values(by = ['Year', 'Happiness Rank'])","47ad08fb":"# Create functions for running bar chart (source: https:\/\/towardsdatascience.com\/bar-chart-race-with-plotly-f36f3a5df4f1)\n\ndef name_to_color(names, r_min=0, r_max=255, g_min=0, g_max=255, b_min=0, b_max=255):\n    \n    \"\"\"Mapping of countries to random rgb colors.\n    Parameters:\n    df (Series): Pandas Series containing countries.\n    r_min (int): Mininum intensity of the red channel (default 0).\n    r_max (int): Maximum intensity of the red channel (default 255).\n    g_min (int): Mininum intensity of the green channel (default 0).\n    g_max (int): Maximum intensity of the green channel (default 255).\n    b_min (int): Mininum intensity of the blue channel (default 0).\n    b_max (int): Maximum intensity of the blue channel (default 255).\n    Returns:\n    dictionary: Mapping of countries (keys) to random rgb colors (values)\n    \"\"\"    \n    mapping_colors = dict()\n    \n    for name in names.unique():\n        red = random.randint(r_min, r_max)\n        green = random.randint(g_min, g_max)\n        blue = random.randint(b_min, b_max)\n        rgb_string = 'rgb({}, {}, {})'.format(red, green, blue)\n    \n        mapping_colors[name] = rgb_string\n    \n    return mapping_colors\n\n\n# Map colors to df_top Country column:\nmapping_colors = name_to_color(df_top.Country)\ndf_top['Color'] = df_top['Country'].map(mapping_colors)\n\ndef frames_animation(df, title):\n    \n    \"\"\"Creation of a sequence of frames.\n    Parameters:\n    df (DataFrame): Pandas data frame containing the categorical variable ['Country'],\n    the score ['Happiness Score'], the year ['Year'], and the color['Color'] (separated columns).\n    title (string): Title of each frame.\n    Returns:\n    list_of_frames (list): List of frames. Each frame contains a bar plot of a year.\n    \"\"\"  \n    \n    list_of_frames = []\n    initial_year = df['Year'].min()\n    final_year = df['Year'].max()\n\n    for year in range(initial_year, final_year +1):\n            fdata = df[df['Year'] == year]\n            list_of_frames.append(go.Frame(data=[go.Bar(x=fdata['Country']\n                                                        , y=fdata['Happiness Score']\n                                                        , marker_color=fdata['Color']\n                                                        , hoverinfo='none'\n                                                        , textposition='outside'\n                                                        , texttemplate='%{x}<br>%{y}'\n                                                        , cliponaxis=False\n                                                       )\n                                                ],\n                                           layout=go.Layout(font={'size': 10}\n                                                            , plot_bgcolor = '#FFFFFF'\n                                                            , xaxis={'showline': False, 'visible': False}\n                                                            , yaxis={'showline': False, 'visible': False}\n                                                            , bargap=0.15\n                                                            , title=title + str(year)\n                                                           )\n                                          )\n                                 )\n    return list_of_frames \n\n\ndef bar_race_plot (df, title, list_of_frames):\n    \n    \"\"\"Creation of the bar chart race figure.\n    Parameters:\n    df (DataFrame): Pandas data frame containing the categorical variable ['Name'],\n    the count ['Number'], the year ['Year'], and the color ['Color'] (separated columns).\n    title (string): Title of the initial bar plot.\n    list_of_frames (list): List of frames. Each frame contains a bar plot of a year.\n    Returns:\n    fig (figure instance): Bar chart race\n    \"\"\"\n    \n    # initial year - countries (categorical variable), happiness score (numerical variable), and color\n    initial_year = df['Year'].min()\n    initial_names = df['Country'][df['Year'] == initial_year]\n    initial_numbers = df['Happiness Score'][df['Year'] == initial_year]\n    initial_color = df['Color'][df['Year'] == initial_year]\n    range_max = df['Happiness Score'].max()\n    \n    fig = go.Figure(\n        data=[go.Bar(x=initial_names\n                     , y=initial_numbers\n                     , marker_color=initial_color\n                     , hoverinfo='none',textposition='outside'\n                     , texttemplate='%{x}<br>%{y}'\n                     ,cliponaxis=False\n                    )\n             ],\n        layout=go.Layout(font={'size': 10}\n                         , plot_bgcolor = '#FFFFFF'\n                         , xaxis={'showline': False, 'visible': False}\n                         , yaxis={'showline': False, 'visible': False, 'range': (0, range_max)}\n                         , bargap=0.15\n                         , title=title + str(initial_year)\n                         ,updatemenus=[dict(type=\"buttons\"\n                                            ,buttons=[dict(label=\"Play\"\n                                                           , method=\"animate\"\n                                                           ,args=[None,{\"frame\": {\"duration\": 2000, \"redraw\": True}, \"fromcurrent\": True}]),\n                                                      dict(label=\"Stop\"\n                                                           ,method=\"animate\"\n                                                           ,args=[[None],{\"frame\": {\"duration\": 0, \"redraw\": False}, \"mode\": \"immediate\",\"transition\": {\"duration\": 0}}])])]),\n        frames=list(list_of_frames))\n    \n    return fig ","0afd1f5c":"# Animated bar-chart for Happpiness Score: \ntitle = 'Top 10 Happiest Countries '\nlist_of_frames = frames_animation(df_top, title)\nfig = bar_race_plot(df_top, title, list_of_frames)\nfig.show()","44b1886e":"# Create region dataset with mean happiness scores:\n\ndf_reg = df.groupby(['Region', 'Year'],as_index=False).agg({'Happiness Score':np.mean, 'Happiness Rank':np.mean})\ndf_reg[df_reg.Year == 2019].sort_values(by=['Happiness Score'], ascending=False).reset_index(inplace = True)\ndf_reg = df_reg.sort_values(['Year', 'Happiness Rank'])","6799511c":"# Map region to a random colors by using name_to_color function:\nmapping_colors = name_to_color(df_reg.Region, 0, 185, 0, 185, 125, 255)\ndf_reg['Color'] = df_reg['Region'].map(mapping_colors)\n\ndef frames_animation(df, title):\n    \n    \"\"\"Creation of a sequence of frames.\n    Parameters:\n    df (DataFrame): Pandas data frame containing the categorical variable ['Region'],\n    the score ['Happiness Score'], the year ['Year'], and the color['Color'] (separated columns).\n    title (string): Title of each frame.\n    Returns:\n    list_of_frames (list): List of frames. Each frame contains a bar plot of a year.\n    \"\"\"\n    \n    list_of_frames = []\n    initial_year = df['Year'].min()\n    final_year = df['Year'].max()\n\n    for year in range(initial_year, final_year +1):\n            fdata = df[df['Year'] == year]\n            list_of_frames.append(go.Frame(data=[go.Bar(x=fdata['Region']\n                                                        , y=fdata['Happiness Score']\n                                                        , marker_color=fdata['Color']\n                                                        , hoverinfo='none'\n                                                        , textposition='outside'\n                                                        , texttemplate='%{x}<br>%{y}'\n                                                        , cliponaxis=False\n                                                       )\n                                                ],\n                                           layout=go.Layout(font={'size': 10}\n                                                            , plot_bgcolor = '#FFFFFF'\n                                                            , xaxis={'showline': False, 'visible': False}\n                                                            , yaxis={'showline': False, 'visible': False}\n                                                            , bargap=0.15\n                                                            , title=title + str(year)\n                                                           )\n                                          )\n                                 )\n    return list_of_frames \n\n\ndef bar_race_plot (df, title, list_of_frames):\n    \"\"\"Creation of the bar chart race figure.\n    Parameters:\n    df (DataFrame): Pandas data frame containing the categorical variable ['Region'],\n    the score ['Happiness Score'], the year ['Year'], and the color ['Color'] (separated columns).\n    title (string): Title of the initial bar plot.\n    list_of_frames (list): List of frames. Each frame contains a bar plot of a year.\n    Returns:\n    fig (figure instance): Bar chart race\n    \"\"\"\n    \n    # initial year - names (categorical variable), number of babies (numerical variable), and color\n    initial_year = df['Year'].min()\n    initial_names = df['Region'][df['Year'] == initial_year]\n    initial_numbers = df['Happiness Score'][df['Year'] == initial_year]\n    initial_color = df['Color'][df['Year'] == initial_year]\n    range_max = df['Happiness Score'].max()\n    \n    fig = go.Figure(\n        data=[go.Bar(x=initial_names\n                     , y=initial_numbers\n                     , marker_color=initial_color\n                     , hoverinfo='none'\n                     , textposition='outside'\n                     , texttemplate='%{x}<br>%{y}'\n                     , cliponaxis=False\n                    )\n             ],\n        layout=go.Layout(font={'size': 10}\n                         , plot_bgcolor = '#FFFFFF'\n                         , xaxis={'showline': False, 'visible': False}\n                         , yaxis={'showline': False, 'visible': False, 'range': (0, range_max)}\n                         , bargap=0.15, title=title + str(initial_year)\n                         , updatemenus=[dict(type=\"buttons\"\n                                             ,buttons=[dict(label=\"Play\"\n                                                            , method=\"animate\"\n                                                            , args=[None,{\"frame\": {\"duration\": 2000, \"redraw\": True}, \"fromcurrent\": True}]),\n                                                       dict(label=\"Stop\"\n                                                            , method=\"animate\"\n                                                            , args=[[None],{\"frame\": {\"duration\": 0, \"redraw\": False}, \"mode\": \"immediate\",\"transition\": {\"duration\": 0}}])])]),\n        frames=list(list_of_frames))\n    \n    return fig","c8318a29":"# Animated bar-chart for Happpiness Score: \ntitle = 'Happiness Score for Regions '\nlist_of_frames = frames_animation(df_reg, title)\nfig = bar_race_plot(df_reg, title, list_of_frames)\nfig.show()","5a4d5135":"round((max(df['GDP per Capita']))+0.5,2)","9dffd72a":"# Split Happiness data according to continent:\n\nfig = px.scatter(df\n                 , x =\"GDP per Capita\"\n                 , y =\"Happiness Score\"\n                 , animation_frame =\"Year\"\n                 , animation_group =\"Country\"\n                 , size =\"GDP per Capita\"\n                 , color =\"Continent\"\n                 , hover_name =\"Country\"\n                 #, facet_col =\"Continent\"\n                 , size_max = 10\n                ) \n\n\nfig.update_layout(title_text='Happines vs GDP per Capita (sized by GDP per Capita)')\nfig.update_yaxes(range=[2,8])\nfig.update_xaxes(range=[-0.01,round((max(df['GDP per Capita']))+0.1,2)])\n\nfig.show()","1e823ea0":"# Split Happiness data according to continent:\n\nfig = px.scatter(df\n                 , x =\"Social Support\"\n                 , y =\"Happiness Score\"\n                 , animation_frame =\"Year\"\n                 , animation_group =\"Country\"\n                 , size =\"GDP per Capita\"\n                 , color =\"Continent\"\n                 , hover_name =\"Country\"\n                 #, facet_col =\"Continent\"\n                 , size_max = 10\n                ) \n\n\nfig.update_layout(title_text='Happines vs Social Support (sized by GDP per Capita)')\nfig.update_yaxes(range=[2,8])\nfig.update_xaxes(range=[-0.01,round((max(df['Social Support']))+0.1,2)])\n\nfig.show()","4d913365":"df.columns","313da2d5":"# Split Happiness data according to continent:\n\nfig = px.scatter(df\n                 , x =\"Life Expectancy\"\n                 , y =\"Happiness Score\"\n                 , animation_frame =\"Year\"\n                 , animation_group =\"Country\"\n                 , size =\"GDP per Capita\"\n                 , color =\"Continent\"\n                 , hover_name =\"Country\"\n                 #, facet_col =\"Continent\"\n                 , size_max = 10\n                ) \n\n\nfig.update_layout(title_text='Happines vs Life Expectancy (sized by GDP per Capita)')\nfig.update_yaxes(range=[2,8])\nfig.update_xaxes(range=[-0.01,round((max(df['Life Expectancy']))+0.1,2)])\n\nfig.show()","f8e5c51e":"# Split Happiness data according to continent:\n\nfig = px.scatter(df\n                 , x =\"Freedom\"\n                 , y =\"Happiness Score\"\n                 , animation_frame =\"Year\"\n                 , animation_group =\"Country\"\n                 , size =\"GDP per Capita\"\n                 , color =\"Continent\"\n                 , hover_name =\"Country\"\n                 #, facet_col =\"Continent\"\n                 , size_max = 10\n                ) \n\n\nfig.update_layout(title_text='Happines vs Freedom (sized by GDP per Capita)')\nfig.update_yaxes(range=[2,8])\nfig.update_xaxes(range=[-0.01,round((max(df['Freedom']))+0.1,2)])\n\nfig.show()","36ea2dd9":"# Split Happiness data according to continent:\n\nfig = px.scatter(df\n                 , x =\"Generosity\"\n                 , y =\"Happiness Score\"\n                 , animation_frame =\"Year\"\n                 , animation_group =\"Country\"\n                 , size =\"GDP per Capita\"\n                 , color =\"Continent\"\n                 , hover_name =\"Country\"\n                 #, facet_col =\"Continent\"\n                 , size_max = 10\n                ) \n\n\nfig.update_layout(title_text='Happines vs Generosity (sized by GDP per Capita)')\nfig.update_yaxes(range=[2,8])\nfig.update_xaxes(range=[-0.01,round((max(df['Generosity']))+0.1,2)])\n\nfig.show()","4f86fc42":"### Happiness by Continent","1da7275c":"![happy](https:\/\/www.uncsa.edu\/mysa\/img\/announcements\/2018\/yellow-happy-blue-sad-balls.jpg)","4a9252ec":"## Import Libraries","e157391d":"### Load and Explore Data","fcc95e5e":"Box-plots above just confirm our main findings derived from heatmap for features correlation. \n\nPerhaps most interesting feature here is Generosity. Countries with low happiness score are on average more generous than countries with medium score. \n2 out of 3 most generous counties have low happiness score.","963397c3":"### Region and Continent","3a73b718":"Please note that the following statistics is based on average happiness score across the regions per given year. ","5584469c":"As a next step we would like to add a continent column, for this purpose we need to run !pip install pycountry_convert. We have couple of territories, which are not matching with country names, so we create a function country_2_continent which will fix this problem. ","eece4c3f":"### The Happiest Region","9b8c1c57":"## Exploratory Data Analysis (EDA)","1315918b":"Maps above give us overview what countries have highes Happiness Score, GDP per Capita... Just pick a feature you are interested in by making a selection in the dropdown menu (top left corner).","9717d1a8":"Happiness Score has strong positive correlation with GDP per Captita (0.7973), Health (Life Expectancy) (0.7477), Social Support (0.6506) followed by Freedom (0.5501). \n\nThis means that the population on rich countries with higher life expectancy, social support and freedom tends to be happier. \n","61b18a62":"### Top 10 Happiest Countries","75ecbc27":"The datasets for 2015 - 2019 do not follow the same naming convention, so we will need to rename copule of columns to make it easier to combine them together. ","1940fae3":"First at all, we have to split happiness score into 3 categories low, medium and high. We will be working with quartiles here, where low happiness score is below q1, medium is between q1 and q3 and anything above q3 value is classified as high.\n\nWe will create boxplots for each of the features split by those 3 categories.","f01ae9bd":"Combine all available datasets together by using pandas concat function. We will drop columns which we won't use such as Standard Error, Whisker.high... Final step is renaming columns.","9dcfc15a":"### Correlation for Features","6806b9f5":"### Data Manipulations","4b0fb721":"# World Happiness (EDA)","d4e74db9":"### Low, Medium & High Happiness Score","1a5e85d8":"### Map for Happiness and Other Features in 2019\n\nMaps below show values of Happiness Score, GDP per Capita, Social Support, Health (Life Expectancy), Freedom, Corruption and Generosity for countries.","87e2d326":"In this section we would like to add Region and Continet columns. We will use Regions from df_15 and merge function on our dataframe df. For assigning a Continent we use pycountry_convert library. So let's do this :)","cf1231ad":"Let's the fun get started! This is the exciting part of data insight, as we can explore the data further, spot patterns and gain further understanding. ","ad2b0f60":"What are top 10 happiest countries in the world? The following bar chart answers this question for years 2015 - 2019."}}