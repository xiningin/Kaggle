{"cell_type":{"942ad4c8":"code","b5e12a74":"code","c536ab64":"code","41a85ade":"code","21e7851c":"code","df91bcd1":"code","5309cc66":"code","aaa7c1c4":"code","438a5a85":"code","1841a2e4":"code","f8bce1e4":"code","212192a1":"code","a49e0cbd":"code","41028ff7":"code","940fa26e":"code","6a747074":"code","1186b74f":"code","d724b030":"code","f1ee4da8":"code","2935bc9c":"code","fa4459a5":"code","9f52f79c":"code","7d03de81":"code","f3c02a62":"code","23c470a0":"code","19f4c29a":"code","de6394a0":"code","f81332f7":"code","9c002047":"code","c6ae37a9":"code","c71a51e0":"code","32e13ac4":"code","86b0baa4":"code","df182aac":"code","258c4d5f":"code","d7ffce70":"code","93c3d4f8":"code","c3661e4b":"code","2675fcd1":"code","65eaf752":"markdown","9b19d01a":"markdown","5cc52144":"markdown","91c045be":"markdown","2a42588c":"markdown","905dd9db":"markdown"},"source":{"942ad4c8":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","b5e12a74":"sample_submission= pd.read_csv(\"..\/input\/dogs-vs-cats\/sampleSubmission.csv\")\nsample_submission","c536ab64":"import os\nimport zipfile","41a85ade":"local_zip = '..\/input\/dogs-vs-cats\/train.zip'\n\nzip_ref = zipfile.ZipFile(local_zip, 'r')\n\nzip_ref.extractall('\/kaggle\/working\/')\nzip_ref.close()","21e7851c":"base_dir = '\/kaggle\/working\/'\ntrain_dir = os.path.join(base_dir, 'train')\ntrain_img_names = os.listdir(train_dir)","df91bcd1":"train_img_names[:10]","5309cc66":"print('total training images :', len(train_img_names ))","aaa7c1c4":"categories= list()\nfor image in train_img_names:\n    category = image.split(\".\")[0]\n    if category == \"dog\":\n        categories.append(\"dog\")\n    else:\n        categories.append(\"cat\")\ndf= pd.DataFrame({\"Image\":train_img_names, \"Category\": categories})\n    ","438a5a85":"df.head()","1841a2e4":"import matplotlib.pyplot as plt\nimport seaborn as sns\nimport random","f8bce1e4":"plt.figure(figsize=(12,10))\nsns.countplot(data=df, x=\"Category\",palette=\"magma\")","212192a1":"sample = random.choice(train_img_names)\nplt.imshow(plt.imread((\"\/kaggle\/working\/train\/\"+sample)))\n","a49e0cbd":"sample = random.choice(train_img_names)\nplt.imshow(plt.imread((\"\/kaggle\/working\/train\/\"+sample)))\n","41028ff7":"from sklearn.model_selection import train_test_split\ntrain,validation= train_test_split(df, test_size=0.1)\ntrain = train.reset_index(drop=True)\nvalidation = validation.reset_index(drop=True)\n\n","940fa26e":"train","6a747074":"validation","1186b74f":"plt.figure(figsize=(13,10))\nsns.countplot(data=train, x=\"Category\",palette=\"viridis\")","d724b030":"plt.figure(figsize=(13,10))\nsns.countplot(data=validation, x=\"Category\",palette=\"plasma\")","f1ee4da8":"from tensorflow.keras.preprocessing.image import ImageDataGenerator\n\n# All images will be rescaled by 1.\/255.\ntrain_datagen = ImageDataGenerator( rescale = 1.0\/255. )\n\n\n# --------------------\n# Flow training images in batches of 20 using train_datagen generator\n# --------------------\ntrain_generator = train_datagen.flow_from_dataframe(train,\n                                                    directory=\".\/train\",\n                                                    x_col='Image',\n                                                    y_col='Category',\n                                                    batch_size=20,\n                                                    class_mode='binary',\n                                                    target_size=(150, 150))    \n\n","2935bc9c":"validation_datagen  = ImageDataGenerator( rescale = 1.0\/255.)\nvalidation_generator =  validation_datagen.flow_from_dataframe(validation,\n                                                            directory=\".\/train\",\n                                                              x_col='Image',\n                                                             y_col='Category',\n                                                              batch_size=20,\n                                                              class_mode  = 'binary',\n                                                              target_size = (150, 150))","fa4459a5":"import tensorflow\nfrom tensorflow.keras.models import Sequential\nfrom tensorflow.keras.layers import Conv2D\nfrom tensorflow.keras.layers import MaxPool2D\nfrom tensorflow.keras.layers import Flatten\nfrom tensorflow.keras.layers import Dense, Dropout\nfrom tensorflow.keras.callbacks import EarlyStopping\n","9f52f79c":"model = Sequential()\nmodel.add(Conv2D(filters=32, kernel_size=3,activation=\"relu\", input_shape=(150,150,3)))\nmodel.add(MaxPool2D(pool_size=2, strides=2))\nmodel.add(Dropout(0.2))\nmodel.add(Conv2D(filters=64, kernel_size=3,activation=\"relu\"))\nmodel.add(MaxPool2D(pool_size=2, strides=2))\nmodel.add(Dropout(0.2))\nmodel.add(Conv2D(filters=128, kernel_size=3, activation=\"relu\"))\nmodel.add(MaxPool2D(pool_size=2, strides=2))\nmodel.add(Dropout(0.2))\nmodel.add(Flatten())\nmodel.add(Dense(units=512, activation=\"relu\"))\nmodel.add(Dense(units=1, activation=\"sigmoid\"))\n","7d03de81":"model.summary()","f3c02a62":"model.compile(optimizer=\"adam\", loss=\"binary_crossentropy\", metrics=[\"accuracy\"])","23c470a0":"callback=EarlyStopping(monitor=\"val_loss\", patience=4)\nhistory=model.fit(train_generator, validation_data=validation_generator, epochs=15,callbacks=[callback])","19f4c29a":"pd.DataFrame(model.history.history)","de6394a0":"sns.set_style(\"darkgrid\")\npd.DataFrame(model.history.history).plot(figsize=(15,10))","f81332f7":"# Extracting the zip file\n\ntest_zip = '\/kaggle\/input\/dogs-vs-cats\/test1.zip'\nzip_ref = zipfile.ZipFile(test_zip, 'r')\nzip_ref.extractall('\/kaggle\/working')\nzip_ref.close()\n\ntest_dir = '\/kaggle\/working\/test1\/'\ntest_images = os.listdir(os.path.join(test_dir))\ntest_images[:10]\n\n","9c002047":"test_df = pd.DataFrame({'Image': test_images})\ntest_df.head()","c6ae37a9":"test_datagen = ImageDataGenerator(rescale=1.\/255)\ntest_generator = test_datagen.flow_from_dataframe(test_df,\n                                                  directory=\"\/kaggle\/working\/test1\",\n                                                 x_col=\"Image\",\n                                                 y_col=None,\n                                                  class_mode  = None,\n                                                 target_size=(150,150),\n                                                shuffle = True,\n                                                batch_size=20)\n    \n","c71a51e0":"predictions = model.predict(test_generator,steps = np.ceil(12500\/20))\npredictions","32e13ac4":"test_df[\"category\"]=pd.DataFrame(predictions, columns=[\"category\"])\ntest_df","86b0baa4":"def labelizor(prediction):\n    if prediction > 0.5:\n        return 1\n    else:\n        return 0","df182aac":"\ntest_df[\"category\"] = test_df[\"category\"].apply(labelizor)\ntest_df","258c4d5f":"plt.figure(figsize=(13,10))\nsns.countplot(data=test_df, x=\"category\",palette=\"magma\")","d7ffce70":"test_df=test_df.reset_index()\ntest_df","93c3d4f8":"test_df=test_df.rename(columns={\"index\": \"id\"})\ntest_df","c3661e4b":"submission_df=test_df.copy()\nsubmission_df.drop(\"Image\", axis=1, inplace=True)\nsubmission_df","2675fcd1":"\nsubmission_df.to_csv('submission.csv', index=False)","65eaf752":"## 2. Building a Small Model from Scratch ","9b19d01a":"Let's define each of these directories:","5cc52144":"## 3. Performance Evaluation of the Training","91c045be":"## 4. Preparing Test Data and Submission","2a42588c":"\n## 1. Exploratory Data Analysis\n<font color = \"blue\">","905dd9db":"The following python code will use the OS library to use Operating System libraries, giving you access to the file system, and the zipfile library allowing you to unzip the data."}}