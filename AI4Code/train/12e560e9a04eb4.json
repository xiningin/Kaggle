{"cell_type":{"29d1ef09":"code","05dea004":"code","48bf2a98":"code","0d2deb34":"code","e13d9af6":"code","70c436b3":"code","1d90af1c":"code","67adce19":"code","a54c0075":"code","e3b1a983":"code","7fb21ccf":"code","c8798825":"code","72d05f27":"code","ef500d32":"code","8968330e":"code","abd2e216":"code","bd05eb2f":"code","3f9ec0f3":"code","3a94b0ca":"code","c21b28b0":"code","42710fcc":"code","83aa1d94":"code","c67835a5":"code","9b0482e7":"code","37b4e33b":"code","da5e3a2e":"code","beac8d63":"code","014b1af3":"code","8b993846":"code","9733c641":"code","4f265e34":"code","823f2516":"code","be21e137":"code","88fcc6cb":"code","4a29a3ce":"code","f0da56d4":"code","df4099b1":"code","e43023b4":"code","53a01b45":"code","2f13db32":"code","4b6e9c7e":"code","4f273e54":"code","605121e2":"code","bf054843":"code","55f3ee41":"code","4fcc4766":"code","70d64952":"code","a157aeaa":"code","3895ab5a":"markdown","203e272b":"markdown","6aca2e90":"markdown","8b92c49b":"markdown"},"source":{"29d1ef09":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","05dea004":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom scipy import stats\nfrom sklearn.linear_model import LinearRegression\nfrom sklearn.tree import DecisionTreeRegressor\nfrom sklearn.ensemble import RandomForestRegressor\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import r2_score,mean_squared_error,mean_absolute_error\nimport math","48bf2a98":"df = pd.read_csv(\"\/kaggle\/input\/chennai-house-price\/clean_data.csv\")","0d2deb34":"# No of records in dataset\ndf.shape","e13d9af6":"# Null records\ndf.isnull().sum()","70c436b3":"df.info()","1d90af1c":"df.describe().T","67adce19":"df[df.age.isnull()]","a54c0075":"df.age.fillna(0,inplace=True)","e3b1a983":"#bathrooms\nprint(f\"Bathrooms : {df.bathroom.unique()}\")\nprint(f\"BHK : {df.bhk.unique()}\")","7fb21ccf":"# fill NaN with -1 for bathrooms\ndf.bathroom.fillna(-1,inplace=True)","c8798825":"def find_bathroom(x,y):\n    if y == -1:\n        if x > 4:\n            return x+1\n        else:\n            return x\n    else:\n        return y","72d05f27":"df['bathroom'] = df.apply(lambda x: find_bathroom(x['bhk'],x['bathroom']),axis=1)","ef500d32":"df.isnull().sum()","8968330e":"# for numeric coluns\n#[feat for feat in df.columns if df[feat].dtypes != 'O']\nnumeric_cols = [feat for feat in df.select_dtypes(include=np.number)]","abd2e216":"i,j=0,0\nPLOTS_PER_ROW =2\nfig, ax = plt.subplots(math.ceil(len(numeric_cols)\/PLOTS_PER_ROW),PLOTS_PER_ROW, figsize=(18,20))\nfor feat in numeric_cols:\n    ax[i][j].hist(df[feat],bins=30)\n    ax[i][j].set_xlabel(feat)\n    ax[i][j].set_ylabel(\"Counts\")\n    j+=1\n    if j%PLOTS_PER_ROW ==0:\n        i+=1\n        j=0\nplt.show()\n","bd05eb2f":"# QQ plot\ni,j=0,0\nPLOTS_PER_ROW = 2\nfig, ax = plt.subplots(math.ceil(len(numeric_cols)\/PLOTS_PER_ROW),PLOTS_PER_ROW,figsize=(18,20))\nfor feat in numeric_cols:\n    stats.probplot(df[feat],plot = ax[i][j] )\n    ax[i][j].set_ylabel(feat)\n    j += 1\n    if j%PLOTS_PER_ROW == 0:\n        j=0\n        i+=1\nplt.show()","3f9ec0f3":"# area\/bhk\narea_per_bhk = df['area']\/df['bhk']\nprice_per_sqft = df['price']\/df['area']\n\nfig,ax = plt.subplots(1,2, figsize=(18,6))\nax[0].hist(area_per_bhk,bins=30)\nax[0].set_xlabel(\"area per bhk\")\nax[1].hist(price_per_sqft,bins=30)\nax[1].set_xlabel(\"price per sqft\")\nplt.show()","3a94b0ca":"df['area_per_bhk'] = df['area']\/df['bhk']\ndf['price_per_sqft'] = df['price']\/df['area']","c21b28b0":"df['price_per_sqft'] = df['price_per_sqft']*100000","42710fcc":"df.describe().T","83aa1d94":"# make a copy of df as df_main\ndf_main = df.copy()","c67835a5":"# Let's draw scatter plot again price with each feature\ni,j=0,0\nPLOTS_PER_ROW =2\nfig,ax = plt.subplots(math.ceil(len(numeric_cols)\/PLOTS_PER_ROW),PLOTS_PER_ROW,figsize = (18,20))\nfor feat in numeric_cols:\n    ax[i,j].scatter(df[feat],df['price'])\n    ax[i,j].set_ylabel(\"Price\")\n    ax[i,j].set_xlabel(feat)\n    j+=1\n    if j%PLOTS_PER_ROW==0:\n        i+=1\n        j=0\nplt.show()\n","9b0482e7":"# categorical features\nloc_list = []\nprice_list = []\nfor key,subdf in df.groupby(\"location\"):\n    loc_list.append(key)\n    price_list.append(subdf['price'].mean())\n","37b4e33b":"df_loc_price = pd.DataFrame({'location':loc_list, 'price':price_list})","da5e3a2e":"plt.figure(figsize=(18,6))\nplt.scatter(df_loc_price['location'],df_loc_price['price'])\nplt.xlabel = \"location\"\nplt.ylabel = \"price\"\nplt.xticks(rotation=90)\nplt.show()","beac8d63":"def remove_outliers_price_sqft(df_local):\n    df_out = pd.DataFrame()\n    for key, subdf in df_local.groupby('location'):\n        s = np.std(subdf['price_per_sqft'])#.std()\n        m = np.mean(subdf['price_per_sqft'].mean())\n        reduce_df = subdf[(subdf['price_per_sqft'] > ( m - s) ) & (subdf['price_per_sqft'] <= ( m + s)) ]\n        df_out = pd.concat([df_out, reduce_df],ignore_index=True)\n    return df_out\n\ndf1 = remove_outliers_price_sqft(df)\n","014b1af3":"#df1\ndf_feat=df1","8b993846":"df_feat.shape","9733c641":"# let's handle categorical feature\n#df['builder'].unique()\nbuilder_stats = df_feat['builder'].value_counts(ascending=False)\nbuilder_stats","4f265e34":"builder_stats_less_then_10 = builder_stats[builder_stats <=10]\nbuilder_stats_less_then_10","823f2516":"df_feat['builder'] = df_feat['builder'].apply(lambda x: 'other' if x in builder_stats_less_then_10 else x)","be21e137":"df_feat['builder']","88fcc6cb":"#df['location'].unique()\nlocation_stats = df_feat['location'].value_counts(ascending=False)\nlocation_stats","4a29a3ce":"location_stats_less_then_10 = location_stats[location_stats <= 10]\nlocation_stats_less_then_10","f0da56d4":"df_feat['location'] = df_feat['location'].apply(lambda x: 'other' if x in location_stats_less_then_10 else x)","df4099b1":"df['status'].unique()","e43023b4":"#drop additional columns\ndf_new = df_feat.drop(['area_per_bhk','price_per_sqft'],axis=1)","53a01b45":"df_final = pd.get_dummies(df_new,columns=['status','location','builder'])","2f13db32":"Y = df_final['price']\nX = df_final.drop(['price'],axis=1)","4b6e9c7e":"Y","4f273e54":"X_train,X_test,y_train,y_test = train_test_split(X,Y,test_size=0.2,random_state=0)","605121e2":"X_train.shape,X_test.shape","bf054843":"y_train.shape,y_test.shape","55f3ee41":"# simple regression\nlr = LinearRegression()\nlr.fit(X_train,y_train)","4fcc4766":"y_pred = lr.predict(X_test)","70d64952":"r2_score(y_test,y_pred)","a157aeaa":"lr.coef_","3895ab5a":"# Feature Engineering","203e272b":"## Let's start with Univariate analysis","6aca2e90":"# Split the dataset into train and test datasets","8b92c49b":"## Outliers detection process"}}