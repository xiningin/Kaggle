{"cell_type":{"627b7365":"code","b7d31a46":"code","fa6c7396":"code","8e5f469c":"code","e30a0fe6":"code","b3adaa72":"code","cd448fcf":"code","be6019c5":"code","9b3cb35f":"code","4e3b2154":"code","a8d52fc0":"code","8d0384c4":"code","4b127dc4":"code","4231a2a0":"code","c0643cf4":"code","85b434a6":"code","94de162e":"code","f62eb4d7":"code","6dc293f0":"code","c7f56fb0":"code","1eebdcac":"code","02583dd6":"code","9ca0197c":"code","10ac6a92":"code","d0e503e7":"code","b7706bc3":"code","02bfdc01":"code","80a22c2c":"code","a3fcef19":"code","dbe77ddf":"code","8c4f554e":"code","6173da15":"code","a5f96aa5":"markdown"},"source":{"627b7365":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","b7d31a46":"import keras\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport pandas as pd\nimport numpy as np \nimport cv2\nimport os\n%matplotlib inline  ","fa6c7396":"base_directory='..\/input\/chest-xray-pneumonia\/'\ntrain_pneumonia=os.listdir('..\/input\/chest-xray-pneumonia\/chest_xray\/train\/PNEUMONIA\/')\ntrain_normal=os.listdir('..\/input\/chest-xray-pneumonia\/chest_xray\/train\/NORMAL\/')\nval_dir_normal=os.listdir('..\/input\/chest-xray-pneumonia\/chest_xray\/val\/PNEUMONIA\/')\ntest_dir_normal=os.listdir('..\/input\/chest-xray-pneumonia\/chest_xray\/test\/NORMAL\/')\nval_dir_pneumonia=os.listdir('..\/input\/chest-xray-pneumonia\/chest_xray\/val\/PNEUMONIA\/')\ntest_dir_pneumonia=os.listdir('..\/input\/chest-xray-pneumonia\/chest_xray\/test\/NORMAL\/')","8e5f469c":"from keras.preprocessing.image import ImageDataGenerator, load_img\nplt.suptitle('Normal Lungs')\nfor i in range(0,10):\n    img = train_normal[i]\n    img = load_img('..\/input\/chest-xray-pneumonia\/chest_xray\/train\/NORMAL\/' + img)\n    plt.imshow(img)\n    plt.show()","e30a0fe6":"from keras.preprocessing.image import ImageDataGenerator, load_img\nplt.suptitle('Pneumonia Affected Lungs')\nfor i in range(0,10):\n    img = train_pneumonia[i]\n    img = load_img('..\/input\/chest-xray-pneumonia\/chest_xray\/train\/PNEUMONIA\/' + img)\n    plt.imshow(img)\n    plt.show()","b3adaa72":"sns.barplot(x=['Normal','Pneumonia'],y=[len(train_normal),len(train_pneumonia)])","cd448fcf":"sns.barplot(x=['Normal','Pneumonia'],y=[len(val_dir_normal),len(val_dir_pneumonia)])","be6019c5":"sns.barplot(x=['Normal','Pneumonia'],y=[len(test_dir_normal),len(test_dir_pneumonia)])","9b3cb35f":"y_train_temp=[]\nfor i in range(len(train_normal)):\n    y_train_temp.append(0)\nfor i in range(len(train_pneumonia)):\n    y_train_temp.append(1)\nfrom sklearn.utils import class_weight\nclass_weights = class_weight.compute_class_weight('balanced', np.unique(y_train_temp), y_train_temp)","4e3b2154":"print(class_weights)","a8d52fc0":"from keras.preprocessing.image import ImageDataGenerator\ntrain_datagen=ImageDataGenerator(\n    rescale=1\/255.0,\n    rotation_range=7,\n    width_shift_range=0.5,\n    height_shift_range=0.45,\n    shear_range=0.2,\n    zoom_range=0.45,\n    horizontal_flip=True\n    \n)\ntest_datagen=ImageDataGenerator(\n    rescale=1\/255.0\n)","8d0384c4":" train_set=train_datagen.flow_from_directory('..\/input\/chest-xray-pneumonia\/chest_xray\/train\/',\n                                                 target_size=(224, 224),\n                                                 batch_size=32,\n                                                 shuffle=True,\n                                                 class_mode='binary')","4b127dc4":"val_set=test_datagen.flow_from_directory('..\/input\/chest-xray-pneumonia\/chest_xray\/val\/',\n                                         target_size=(224,224),\n                                         batch_size=32,\n                                         class_mode='binary'\n                                        )","4231a2a0":"test_set=test_datagen.flow_from_directory('..\/input\/chest-xray-pneumonia\/chest_xray\/test\/',\n                                          target_size=(224,224),\n                                          batch_size=1,\n                                          class_mode='binary',\n                                          shuffle=False\n)","c0643cf4":"import tensorflow as tf\nx=tf.keras.applications.Xception(include_top=False,input_shape=(224,224,3),weights='imagenet')\n#pretrain_model_path = '\/content\/drive\/My Drive\/v3.h5'\nmobile=x\n#x.load_weights(pretrain_model_path)\ninput_image=tf.keras.layers.Input((224,224,3))\nx=x (input_image)\nx=tf.keras.layers.Flatten()(x)\nx=tf.keras.layers.Dense(units=1024,activation='relu')(x)\nx=tf.keras.layers.Dense(units=512,activation='relu')(x)\nx=tf.keras.layers.Dense(1)(x)\nout=tf.keras.layers.Activation(activation='sigmoid')(x)\n\nmodel=tf.keras.Model(inputs=input_image,outputs=out)\n\nmodel.compile(optimizer=tf.keras.optimizers.RMSprop(lr=0.0001),loss='binary_crossentropy',metrics=['accuracy','mae'])","85b434a6":"print(model.summary())","94de162e":"class MyThresholdCallback(tf.keras.callbacks.Callback):\n    def __init__(self, threshold):\n        super(MyThresholdCallback, self).__init__()\n        self.threshold = threshold\n\n    def on_epoch_end(self, epoch, logs=None): \n        val_acc = logs[\"val_accuracy\"]\n        if val_acc >= self.threshold:\n            self.model.stop_training = True\n","f62eb4d7":"my_callback = MyThresholdCallback(threshold=0.94)\nhistory = model.fit_generator(train_set,\n                    epochs=30,\n                    validation_data=test_set,\n                    callbacks=[my_callback]\n                    )","6dc293f0":"predict=model.evaluate(test_set)","c7f56fb0":"print(predict)","1eebdcac":"\npredicted=model.predict_generator(test_set,steps=624)\nresult=np.array(predicted>0.5,dtype='int32')\nresult","02583dd6":"x_test=test_set.classes\ntester1=x_test.reshape((624,1))\ntester1","9ca0197c":"from sklearn.metrics import confusion_matrix\nmetrics=confusion_matrix(test_set.classes,result)\nprint(metrics)","10ac6a92":"test_set[1][1]","d0e503e7":"from sklearn.metrics import auc,roc_curve,roc_auc_score\nfpr, tpr, thresholds = roc_curve(x_test,predicted)\nauc = roc_auc_score(x_test, predicted)","b7706bc3":"print(auc)","02bfdc01":"import matplotlib.pyplot as plt\nplt.figure()\nplt.plot(fpr, tpr,label='ROC curve (area = %0.2f)' % auc)\nplt.plot([0, 1], [0, 1], 'k--')\nplt.xlim([-0.1, 1.0])\nplt.ylim([0.0, 1.05])\nplt.xlabel('False Positive Rate')\nplt.ylabel('True Positive Rate')\nplt.title('Receiver operating characteristic for Breast Cancer Classification')\nplt.legend(loc=\"lower right\")\nplt.show()","80a22c2c":"import seaborn as sns\nsns.heatmap(metrics, annot=True, fmt=\"d\",)","a3fcef19":"import matplotlib.pyplot as plt\nacc=history.history['accuracy']\nval_acc=history.history['val_accuracy']\nloss=history.history['mae']\nval_loss=history.history['val_mae']\n\nepochs=range(len(acc))\n\nplt.plot(epochs,acc,'r',label=\"Training Accuracy\")\nplt.plot(epochs,val_acc,'b',label=\"Validation Accuracy\")\nplt.ylim((0.760,1.00))\nplt.xlim([0,15])\nplt.title(\"Training and validation Accuracy\")\nplt.xlabel(\"Epochs\")\nplt.ylabel(\"Accuracy\")\nplt.legend(loc=\"lower right\")\nplt.figure()","dbe77ddf":"plt.plot(epochs,loss,'r')\nplt.plot(epochs,val_loss,'b')\nplt.title(\"Training and validation Loss\")\nplt.figure()","8c4f554e":"from sklearn.metrics import precision_recall_fscore_support\nprecision=precision_recall_fscore_support(x_test,result,average='binary')","6173da15":"precision","a5f96aa5":"# Please give an upvote if you like****"}}