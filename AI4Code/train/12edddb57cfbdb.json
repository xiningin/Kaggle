{"cell_type":{"95de51f5":"code","0f21c542":"code","3c5f8133":"code","a032b24e":"code","e6a4d334":"code","77c2e184":"code","a5447658":"code","000e0f2e":"code","e3798fb6":"code","bfd62415":"code","b8e2b530":"code","7942b275":"code","09a7361d":"code","f7935df0":"code","42d9bda8":"code","298b38c0":"code","7a4dbd4d":"code","89330f7e":"code","48a72bb7":"code","68c7a1bc":"code","7ab3e116":"code","2e205c95":"code","5ae1d211":"code","10cef307":"code","05fc74b9":"code","f5d8c45a":"code","d2112b7a":"code","24715031":"code","0f4ea57b":"code","9cfee089":"code","7351b63a":"code","167dd522":"code","c9152e22":"code","77fe7fcb":"code","805da153":"code","0233fd5b":"code","6d97f6eb":"code","82920857":"code","0db80ea1":"code","9ffbba5b":"code","2031be0a":"code","1cdfbe7d":"code","33999157":"code","1baf546e":"code","b358b0f1":"code","8379638e":"code","a7a89934":"code","2a1287ef":"code","339c4e3e":"code","620b62d4":"markdown","5755b369":"markdown","6c6ece28":"markdown","2f828f00":"markdown","b2945d24":"markdown","bc7f7899":"markdown","f09b86db":"markdown","ac14ee0c":"markdown","97432eb1":"markdown","e87212b0":"markdown","b498c84e":"markdown","37da61b2":"markdown","dc05a356":"markdown","67133be3":"markdown"},"source":{"95de51f5":"import seaborn as sns\nimport matplotlib.pyplot as plt\nfrom imblearn.over_sampling import RandomOverSampler \nimport numpy as np\nimport pandas as pd\nfrom sklearn.model_selection import train_test_split\nimport os, cv2\nimport tensorflow as tf\nfrom tensorflow.keras.models import Sequential\nfrom tensorflow.keras.layers import Conv2D, Flatten, Dense, MaxPool2D\nfrom sklearn.metrics import confusion_matrix , classification_report\nfrom keras.utils import to_categorical\nfrom PIL import Image","0f21c542":"data = pd.read_csv('\/kaggle\/input\/skin-cancer-mnist-ham10000\/hmnist_28_28_RGB.csv')\ndata.head()","3c5f8133":"#I realize the last column being the label\ny = data['label']\nx = data.drop(columns = ['label'])\n#get x_train ,y_train\nx.shape","a032b24e":"other = pd.read_csv('\/kaggle\/input\/skin-cancer-mnist-ham10000\/HAM10000_metadata.csv')\nother.head()","e6a4d334":"#After review infomations of the data, I knew 'dx' column being diseases's name.\nclasses = {4: ('nv', ' melanocytic nevi'), \n           6: ('mel', 'melanoma'), \n           2 :('bkl', 'benign keratosis-like lesions'), \n           1:('bcc' , ' basal cell carcinoma'), \n           5: ('vasc', ' pyogenic granulomas and hemorrhage'), \n           0: ('akiec', 'Actinic keratoses and intraepithelial carcinomae'),  \n           3: ('df', 'dermatofibroma')}","77c2e184":"sns.countplot(x = 'dx', data = other)\nplt.xlabel('Disease', size=20)\nplt.ylabel('Frequency', size=20)\nplt.title('Frequency Distribution of Classes', size=20)","a5447658":"#I realize unbalance d\u00edtributed data","000e0f2e":"k = y.map(classes.get) \nk.value_counts() < 1000, k.value_counts() > 5000,k.value_counts()","e3798fb6":"bar, ax = plt.subplots(figsize = (10,10))\nplt.pie(other['sex'].value_counts(), \n        labels = other['sex'].value_counts().index, \n        autopct=\"%.1f%%\")\nplt.title('Gender of Patient', size=20)","bfd62415":"#maybe balance","b8e2b530":"Image.open('..\/input\/skin-cancer-mnist-ham10000\/HAM10000_images_part_1\/ISIC_0027419.jpg')","7942b275":"bar, ax = plt.subplots(figsize=(10,10))\nsns.histplot(other['age'])\nplt.title('Histogram of Age of Patients', size=20)","09a7361d":"#maybe balance","f7935df0":"value = other[['localization', 'sex']].value_counts().to_frame()\nvalue.reset_index(level=[1,0 ], inplace=True)\ntemp = value.rename(columns = {'localization':'location', 0: 'count'})\n\nbar, ax = plt.subplots(figsize = (12, 12))\nsns.barplot(x = 'location',  y='count', hue = 'sex', data = temp)\nplt.title('Location of disease over Gender', size = 16)\nplt.xlabel('Disease', size=12)\nplt.ylabel('Frequency\/Count', size=12)\nplt.xticks(rotation = 90)","42d9bda8":"oversample = RandomOverSampler()\nx,y  = oversample.fit_resample(x,y)\nx = np.array(x).reshape(-1,28,28,3)\nprint('Shape of Data :',x.shape)","298b38c0":"plt.figure(figsize = (10,10))\nsns.countplot(y)","7a4dbd4d":"f , ax = plt.subplots(2,5)\nf.set_size_inches(10, 10)\nk = 0 \nfor i in range(2):\n    for j in range(5):\n        ax[i,j].imshow(x[k].reshape(28,28,3))\n        k = k + 1\n    plt.tight_layout()","89330f7e":"x = (x-np.mean(x))\/np.std(x)","48a72bb7":"X_train, X_test, Y_train, Y_test = train_test_split(x,y, test_size=0.2, random_state=42)","68c7a1bc":"f , ax = plt.subplots(2,5)\nf.set_size_inches(10, 10)\nk = 0 \nfor i in range(2):\n    for j in range(5):\n        ax[i,j].imshow(X_train[k].reshape(28,28,3))\n        k = k + 1\n    plt.tight_layout()","7ab3e116":"# # Load pre-trained model\n# #base_model = ResNet50(weights='imagenet', include_top=False, input_shape=train_input_shape)\n# # input_tensor = Input(shape=(50,50,3))\n# base_model = Xception(include_top = False , input_shape = train_input_shape)\n\n\n# for layer in base_model.layers:\n#     layer.trainable = True\n# # Add layers at the end\n# model = base_model.output\n# model = Flatten()(model)\n\n# model = Dense(512, kernel_initializer='he_uniform')(model)\n# model = Dropout(0.2)(model)\n# model = BatchNormalization()(model)\n# model = Activation('relu')(model)\n\n# model = Dense(128, kernel_initializer='he_uniform')(model)\n# model = Dropout(0.2)(model)\n# model = BatchNormalization()(model)\n# model = Activation('relu')(model)\n\n# model = Dense(52, kernel_initializer='he_uniform')(model)\n# model = Dropout(0.2)(model)\n# model = BatchNormalization()(model)\n# model = Activation('relu')(model)\n\n# model = Dense(16, kernel_initializer='he_uniform')(model)\n# model = Dropout(0.2)(model)\n# model = BatchNormalization()(model)\n# model = Activation('relu')(model)\n\n# output = Dense(n_classes, activation='softmax')(model)\n\n# model = Model(inputs=base_model.input, outputs=output)","2e205c95":"# inputs = tf.keras.Input(shape=(28, 28, 1), name='input')\n\n# conv1 = tf.keras.layers.Conv2D(filters=16, kernel_size=3, name='conv1')(inputs)\n# maxpool1 = tf.keras.layers.MaxPooling2D(name='maxpool1')(conv1)\n\n# conv2 = tf.keras.layers.Conv2D(filters=32, kernel_size=3, name='conv2')(maxpool1)\n# maxpool2 = tf.keras.layers.MaxPooling2D(name='maxpool2')(conv2)\n\n# conv3 = tf.keras.layers.Conv2D(filters=64, kernel_size=3, name='conv3')(maxpool2)\n# maxpool3 = tf.keras.layers.MaxPooling2D(name='maxpool3')(conv3)\n\n# avgpool = tf.keras.layers.GlobalAveragePooling2D(name='avgpool')(maxpool3)\n\n# outputs = tf.keras.layers.Dense(7, activation='softmax', name='output')(avgpool)\n\n\n# model = tf.keras.Model(inputs=inputs, outputs=outputs)\n\n# print(model.summary())","5ae1d211":"# model = Sequential()\n# model.add(Conv2D(16, kernel_size = (3,3), input_shape = input_shape, activation = 'relu', padding = 'same'))\n# model.add(Conv2D(32, kernel_size = (3,3), activation = 'relu'))\n# model.add(MaxPool2D(pool_size = (2,2)))\n\n# model.add(Conv2D(32, kernel_size = (3,3), activation = 'relu', padding = 'same'))\n# model.add(Conv2D(64, kernel_size = (3,3), activation = 'relu'))\n# model.add(MaxPool2D(pool_size = (2,2), padding = 'same'))\n\n# model.add(Conv2D(64, kernel_size = (3,3), activation = 'relu'))\n# model.add(Conv2D(64, kernel_size = (3,3), activation = 'relu', padding = 'same'))\n# model.add(MaxPool2D(pool_size = (2,2), padding = 'same'))\n\n# model.add(Flatten())\n\n# model.add(Dense(64, activation = 'relu'))\n# model.add(Dense(64, activation='relu'))\n# model.add(Dense(32, activation='relu'))\n# model.add(Dense(32, activation='relu'))\n# model.add(Dense(7, activation='softmax'))","10cef307":"# num_classes = 7\n\n# model = Sequential()\n# model.add(Conv2D(256, (3, 3), activation=\"relu\", input_shape=(SIZE, SIZE, 3)))\n# #model.add(BatchNormalization())\n# model.add(MaxPool2D(pool_size=(2, 2)))  \n# model.add(Dropout(0.3))\n\n# model.add(Conv2D(128, (3, 3),activation='relu'))\n# #model.add(BatchNormalization())\n# model.add(MaxPool2D(pool_size=(2, 2)))  \n# model.add(Dropout(0.3))\n\n# model.add(Conv2D(64, (3, 3),activation='relu'))\n# #model.add(BatchNormalization())\n# model.add(MaxPool2D(pool_size=(2, 2)))  \n# model.add(Dropout(0.3))\n# model.add(Flatten())\n\n# model.add(Dense(32))\n# model.add(Dense(7, activation='softmax'))\n# model.summary()","05fc74b9":"# def create_model():\n#     model = Sequential()\n#     model.add(Conv2D(16, kernel_size = (3,3), input_shape = (28, 28, 3), activation = 'relu', padding = 'same'))\n#     model.add(MaxPool2D(pool_size = (2,2)))\n\n#     model.add(Conv2D(32, kernel_size = (3,3), activation = 'relu', padding = 'same'))\n#     model.add(MaxPool2D(pool_size = (2,2), padding = 'same'))\n\n#     model.add(Conv2D(64, kernel_size = (3,3), activation = 'relu', padding = 'same'))\n#     model.add(MaxPool2D(pool_size = (2,2), padding = 'same'))\n#     model.add(Conv2D(128, kernel_size = (3,3), activation = 'relu', padding = 'same'))\n#     model.add(MaxPool2D(pool_size = (2,2), padding = 'same'))\n\n#     model.add(Flatten())\n#     model.add(Dense(64, activation = 'relu'))\n#     model.add(Dense(32, activation='relu'))\n#     model.add(Dense(7, activation='softmax'))","f5d8c45a":"# model = Sequential()\n# model.add(Conv2D(128,(2,2),input_shape = (28,28,3),activation = 'relu'))\n# model.add(Conv2D(128,(2,2),activation = 'relu'))\n# model.add(MaxPooling2D(pool_size=(2,2)))\n# model.add(Flatten())\n# model.add(Dropout(0.2))\n# model.add(Dense(128,activation='relu'))\n# model.add(Dense(64, activation='relu'))\n# model.add(Dense(7, activation='softmax'))","d2112b7a":"#model_1, Because Input shape just have 28x28, so we need simple model\nmodel = Sequential()\nmodel.add(Conv2D(16, kernel_size = (3,3), input_shape = (28, 28, 3), activation = 'relu', padding = 'same'))\nmodel.add(Conv2D(32, kernel_size = (3,3), activation = 'relu'))\nmodel.add(MaxPool2D(pool_size = (2,2)))\nmodel.add(Conv2D(32, kernel_size = (3,3), activation = 'relu', padding = 'same'))\nmodel.add(Conv2D(64, kernel_size = (3,3), activation = 'relu'))\nmodel.add(MaxPool2D(pool_size = (2,2), padding = 'same'))\nmodel.add(Flatten())\nmodel.add(Dense(64, activation='relu'))\nmodel.add(Dense(32, activation='relu'))\nmodel.add(Dense(7, activation='softmax'))\nmodel.summary()","24715031":"tf.keras.utils.plot_model(model, show_shapes = True, show_dtype = True, show_layer_names = True, rankdir=\"TB\", expand_nested = True, dpi = 100) # ,to_file='model.png')","0f4ea57b":"Checkpoint = tf.keras.callbacks.ModelCheckpoint(filepath='best_model.h5',\n                                                  monitor='val_loss', mode='max',\n                                                 verbose=0)\nFile = 'SkinDiseases'\ncallback = [Checkpoint, \n             tf.keras.callbacks.EarlyStopping(patience = 5, monitor= \"val_acc\",verbose=1),\n             tf.keras.callbacks.TensorBoard(log_dir = \"logs\/{}\".format(File))]","9cfee089":"model.compile(loss = 'sparse_categorical_crossentropy',\n             optimizer = 'adam',\n              metrics = ['accuracy'])\nhistory = model.fit(X_train,\n                    Y_train,\n                    validation_split=0.2,\n                    batch_size = 128,\n                    epochs = 50,\n                    callbacks=[callback])","7351b63a":"plt.plot(history.history[\"accuracy\"] , 'ro-' , label = \"Training Accuracy\")\nplt.plot(history.history[\"val_accuracy\"] , 'go-' , label = \"Testing Accuracy\")\nplt.legend()\nplt.show()","167dd522":"plt.plot(history.history[\"loss\"] , 'ro-' , label = \"Training Loss\")\nplt.plot(history.history[\"val_loss\"] , 'go-' , label = \"Testing Loss\")\nplt.legend()\nplt.show()","c9152e22":"#You can see from 35th epoch to 50th epoch, it have overfitting","77fe7fcb":"#convert to one-hot\nY_train_1hot = to_categorical(Y_train)\nY_test_1hot = to_categorical(Y_test)","805da153":"Y_pred  = model.predict(X_test).round()\n","0233fd5b":"target_names = [f\"{classes[i]}\" for i in range(7)]\nprint(classification_report(Y_test_1hot , Y_pred , target_names =target_names ))","6d97f6eb":"cm = confusion_matrix(Y_test_1hot.argmax(axis = 1) , Y_pred.argmax(axis = 1))\ncm = pd.DataFrame(cm , index = [i for i in range(7)] , columns = [i for i in range(7)])\nplt.figure(figsize = (10,10))\nsns.heatmap(cm,cmap= \"Blues\", linecolor = 'black' , linewidth = 1 , annot = True, fmt='')","82920857":"fpr = dict()\ntpr = dict()\nroc_auc = dict()\nfrom sklearn.metrics import roc_curve, auc","0db80ea1":"for i in range(7):\n    fpr[i], tpr[i], _ = roc_curve(Y_test_1hot[:, i], Y_pred[:, i])\n    roc_auc[i] = auc(fpr[i], tpr[i])","9ffbba5b":"fpr[\"micro\"], tpr[\"micro\"], _ = roc_curve(Y_test_1hot.ravel(), Y_pred.ravel())\nroc_auc[\"micro\"] = auc(fpr[\"micro\"], tpr[\"micro\"])","2031be0a":"plt.figure()\nlw = 2\nplt.plot(fpr[2], tpr[2], color='darkorange',\n         lw=lw, label='ROC curve (area = %0.3f)' % roc_auc[2])\nplt.plot([0, 1], [0, 1], color='navy', lw=lw, linestyle='--')\nplt.xlim([0.0, 1.0])\nplt.ylim([0.0, 1.05])\nplt.xlabel('False Positive Rate')\nplt.ylabel('True Positive Rate')\nplt.title('SkinClasicify characteristic')\nplt.legend(loc=\"lower right\")\nplt.show()","1cdfbe7d":"from scipy import interp\nfrom itertools import cycle\n# First aggregate all false positive rates\nall_fpr = np.unique(np.concatenate([fpr[i] for i in range(7)]))\n\n# Then interpolate all ROC curves at this points\nmean_tpr = np.zeros_like(all_fpr)\nfor i in range(7):\n    mean_tpr += interp(all_fpr, fpr[i], tpr[i])\n\n# Finally average it and compute AUC\nmean_tpr \/= 7\n\nfpr[\"macro\"] = all_fpr\ntpr[\"macro\"] = mean_tpr\nroc_auc[\"macro\"] = auc(fpr[\"macro\"], tpr[\"macro\"])\n\n# Plot all ROC curves\nplt.figure(figsize = (20,20))\nplt.plot(fpr[\"micro\"], tpr[\"micro\"],\n         label='micro-average ROC curve (area = {0:0.5f})'\n               ''.format(roc_auc[\"micro\"]),\n         color='deeppink', linestyle=':', linewidth=4)\n\nplt.plot(fpr[\"macro\"], tpr[\"macro\"],\n         label='macro-average ROC curve (area = {0:0.5f})'\n               ''.format(roc_auc[\"macro\"]),\n         color='navy', linestyle=':', linewidth=4)\n\ncolors = cycle(['aqua', 'darkorange', 'cornflowerblue'])\nfor i, color in zip(range(7), colors):\n    plt.plot(fpr[i], tpr[i], color=color, lw=lw,\n             label='ROC curve of class {0} (area = {1:0.5f})'\n             ''.format(i, roc_auc[i]))\nplt.plot([0, 1], [0, 1], 'k--', lw=lw)\nplt.xlim([0.0, 1.0])\nplt.ylim([0.0, 1.05])\nplt.xlabel('False Positive Rate')\nplt.ylabel('True Positive Rate')\nplt.title('Some extension of Receiver operating characteristic to multi-class')\nplt.legend(loc=\"lower right\")\nplt.show()","33999157":"model.load_weights('best_model.h5')","1baf546e":"loss, acc = model.evaluate(X_test, Y_test, verbose=2)","b358b0f1":"!pip install google.colab\nfrom google.colab.patches import cv2_imshow\nsrcdir = '\/kaggle\/input\/skin-cancer-mnist-ham10000\/HAM10000_images_part_1'\ncount=0\nfor temp in os.listdir(srcdir):\n    img = cv2.imread(os.path.join(srcdir, temp))\n    cv2.imwrite(temp, img)\n    cv2_imshow(img)\n    img = cv2.resize(img, (28, 28))\n    result = model.predict(img.reshape(1, 28, 28, 3))\n    max_prob = max(result[0])\n    class_ind = list(result[0]).index(max_prob)\n    class_name = classes[class_ind]\n    print(class_name)\n    count+=1\n    if count>10:\n        break","8379638e":"!pip install visualkeras\nimport visualkeras","a7a89934":"# visualkeras.layered_view(model).show() # display using your system viewer\n# visualkeras.layered_view(model, to_file='output.png') # write to disk\n# visualkeras.layered_view(model, to_file='output.png').show() # write and show\n# visualkeras.layered_view(model)","2a1287ef":"from PIL import ImageFont\nfont = ImageFont.load_default()\nvisualkeras.layered_view(model, legend=True, font=font,to_file='output.png')  # font is optional!","339c4e3e":"# visualkeras.layered_view(model, draw_volume=False)","620b62d4":"# **Location of disease over Gende**","5755b369":"# **MODEL**","6c6ece28":"# **IMPORT LIBRARIES**","2f828f00":"# **Standardization and Splitting Data**","b2945d24":"# **Model Testing**","bc7f7899":"As you see the data is imbalanced , so let's make it balanced","f09b86db":"# **Oversampling**","ac14ee0c":"# **Model Inference**","97432eb1":"# **IMPORT DATA (HAM10000)**","e87212b0":"# **Distribution of Disease over Gender**","b498c84e":"# **FREQUENCY DISTRIBUTION OF DATA**","37da61b2":"# **Plot Accuracy and Loss**","dc05a356":"# **Histogram of Age of Patients**","67133be3":"# **OTHER DATA**"}}