{"cell_type":{"a07513ea":"code","90247aba":"code","58704bd9":"code","4efb3a5b":"code","d0a9ecd3":"code","0d4520fa":"code","82f02e15":"code","fdc66284":"code","7450c8b8":"code","1836aa6f":"code","e1a71c7d":"code","f8b1a2a7":"code","fd951ee9":"code","211cbc03":"code","298d2fec":"code","0c43be0d":"code","392dbf04":"code","251d743e":"code","7fa5dfd3":"code","8575838d":"code","38d0071e":"code","2744d158":"code","04fa8439":"code","9ce3ba41":"code","94e8d526":"code","c88b7501":"code","68426459":"code","acf15845":"code","7ade9d20":"code","51556555":"markdown","531aa254":"markdown","37a4836d":"markdown","a06a94b1":"markdown","c12121b2":"markdown","a2945501":"markdown","0d7fede6":"markdown","b55e3dfd":"markdown","123101d5":"markdown","abaa6464":"markdown","e5370298":"markdown","45a05f9d":"markdown","efb33e6b":"markdown","ab88854a":"markdown","26727cab":"markdown","06187b66":"markdown","e30e3b90":"markdown","4e6aac8a":"markdown","e3b0db60":"markdown","29b69982":"markdown","637cd2f6":"markdown","208d4751":"markdown","cf2ecfae":"markdown","d6416d77":"markdown","19c6cd61":"markdown","7612f9b7":"markdown","b53e7865":"markdown","e2209674":"markdown"},"source":{"a07513ea":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib as mpl\nfrom matplotlib import pyplot as plt\nfrom matplotlib import cm\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.ensemble import RandomForestClassifier,ExtraTreesClassifier\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.metrics import mean_absolute_error\nfrom sklearn.feature_selection import VarianceThreshold\nfrom sklearn.metrics import accuracy_score\nfrom sklearn.discriminant_analysis import LinearDiscriminantAnalysis\nfrom sklearn.decomposition import PCA\nfrom sklearn.model_selection import cross_val_score, KFold, StratifiedKFold\nfrom sklearn.cluster import KMeans\nfrom sklearn.preprocessing import MinMaxScaler\nfrom sklearn import svm\nfrom bokeh.core.properties import value\nfrom bokeh.plotting import figure\nfrom bokeh.io import show, output_notebook\nfrom bokeh.models import ColumnDataSource\nfrom bokeh.transform import jitter\nimport matplotlib.image as mpimg\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.\n\noutput_notebook()","90247aba":"train_file_path = '..\/input\/learn-together\/train.csv'\ntest_file_path = '..\/input\/learn-together\/test.csv'\n\ntrain_df = pd.read_csv(train_file_path)\ntest_df = pd.read_csv(test_file_path)","58704bd9":"y = train_df.Cover_Type","4efb3a5b":"train_df.describe()","d0a9ecd3":"cols_list = train_df.columns.values.tolist()","0d4520fa":"soilType_features = cols_list[15:-1]\n\n#for feature in soilType_features:\n#    print(feature+' : '+str(train_df[feature].unique()))\n       \ntrain_df_T = train_df[soilType_features].apply(pd.value_counts).fillna(0).transpose().astype(int)\n\ntrain_df_T.columns = ['absence','presence']\n\ntrain_df_T","82f02e15":"ax = train_df_T[['absence','presence']].plot(kind='bar', title =\"Soil Types Absence\/Presence\", figsize=(20, 10), legend=True, fontsize=12, width=0.5)\nax.set_xlabel(\"SoilTypes\", fontsize=12)\nax.set_ylabel(\"Counts\", fontsize=12)\nplt.show(ax)","fdc66284":"max_ct = max(pd.Series(train_df['Cover_Type']).tolist())\nelevation_df = train_df[['Elevation', 'Cover_Type']]\n\nx_val = pd.Series(elevation_df['Elevation']).tolist()\ny_val = pd.Series(elevation_df['Cover_Type']).tolist()\n    \nsource = ColumnDataSource(data=dict(x=x_val,y=y_val))\n\np1 = figure(plot_width=800, plot_height=800, y_range=(0,max_ct+1),\n           title=\"Does elevation effect forest cover types?\")\n\np1.circle(x='x', y=jitter('y', width=0.5, range=p1.y_range),  source=source, alpha=0.3)\n\np1.x_range.range_padding = 0\np1.ygrid.grid_line_color = None\n\nshow(p1)","7450c8b8":"max_ct = max(pd.Series(train_df['Cover_Type']).tolist())\naspect_df = train_df[['Aspect', 'Cover_Type']]\n\nx_val = pd.Series(aspect_df['Aspect']).tolist()\ny_val = pd.Series(aspect_df['Cover_Type']).tolist()\n    \nsource = ColumnDataSource(data=dict(x=x_val,y=y_val))\n\np_at = figure(plot_width=800, plot_height=800, y_range=(0,max_ct+1),\n           title=\"Does aspect effect forest cover types?\")\n\np_at.circle(x='x', y=jitter('y', width=0.5, range=p_at.y_range),  source=source, alpha=0.3)\n\np_at.x_range.range_padding = 0\np_at.ygrid.grid_line_color = None\n\nshow(p_at)","1836aa6f":"slope_df = train_df[['Slope', 'Cover_Type']]\n\nx_val = pd.Series(slope_df['Slope']).tolist()\ny_val = pd.Series(slope_df['Cover_Type']).tolist()\n    \nsource = ColumnDataSource(data=dict(x=x_val,y=y_val))\n\np_sl = figure(plot_width=800, plot_height=800, y_range=(0,max_ct+1),\n           title=\"Does slope effect forest cover types?\")\n\np_sl.circle(x='x', y=jitter('y', width=0.5, range=p_sl.y_range),  source=source, alpha=0.3)\n\np_sl.x_range.range_padding = 0\np_sl.ygrid.grid_line_color = None\n\nshow(p_sl)","e1a71c7d":"hdth_df = train_df[['Horizontal_Distance_To_Hydrology', 'Cover_Type']]\n\nx_val = pd.Series(hdth_df['Horizontal_Distance_To_Hydrology']).tolist()\ny_val = pd.Series(hdth_df['Cover_Type']).tolist()\n    \nsource = ColumnDataSource(data=dict(x=x_val,y=y_val))\n\np_hdth = figure(plot_width=800, plot_height=800, y_range=(0,max_ct+1),\n           title=\"Does horizontal distance to hydrology affect forest cover types?\")\n\np_hdth.circle(x='x', y=jitter('y', width=0.5, range=p_hdth.y_range),  source=source, alpha=0.3)\n\np_hdth.x_range.range_padding = 0\np_hdth.ygrid.grid_line_color = None\n\nshow(p_hdth)","f8b1a2a7":"vdth_df = train_df[['Vertical_Distance_To_Hydrology', 'Cover_Type']]\n\nx_val = pd.Series(vdth_df['Vertical_Distance_To_Hydrology']).tolist()\ny_val = pd.Series(vdth_df['Cover_Type']).tolist()\n    \nsource = ColumnDataSource(data=dict(x=x_val,y=y_val))\n\np_vdth = figure(plot_width=800, plot_height=800, y_range=(0,max_ct+1),\n           title=\"Does vertical distance to hydrology affect forest cover types?\")\n\np_vdth.circle(x='x', y=jitter('y', width=0.5, range=p_vdth.y_range),  source=source, alpha=0.3)\n\np_vdth.x_range.range_padding = 0\np_vdth.ygrid.grid_line_color = None\n\nshow(p_vdth)","fd951ee9":"hdtr_df = train_df[['Horizontal_Distance_To_Roadways', 'Cover_Type']]\n\nx_val = pd.Series(hdtr_df['Horizontal_Distance_To_Roadways']).tolist()\ny_val = pd.Series(hdtr_df['Cover_Type']).tolist()\n    \nsource = ColumnDataSource(data=dict(x=x_val,y=y_val))\n\np_hdtr = figure(plot_width=800, plot_height=800, y_range=(0,max_ct+1),\n           title=\"Does horizontal distance to roadways affect forest cover types?\")\n\np_hdtr.circle(x='x', y=jitter('y', width=0.5, range=p_hdtr.y_range),  source=source, alpha=0.3)\n\np_hdtr.x_range.range_padding = 0\np_hdtr.ygrid.grid_line_color = None\n\nshow(p_hdtr)","211cbc03":"\nhdtf_df = train_df[['Horizontal_Distance_To_Fire_Points', 'Cover_Type']]\n\nx_val = pd.Series(hdtf_df['Horizontal_Distance_To_Fire_Points']).tolist()\ny_val = pd.Series(hdtf_df['Cover_Type']).tolist()\n    \nsource = ColumnDataSource(data=dict(x=x_val,y=y_val))\n\np_hdtf = figure(plot_width=800, plot_height=800, y_range=(0,max_ct+1),\n           title=\"Does horizontal distance to firepoints affect forest cover types?\")\n\np_hdtf.circle(x='x', y=jitter('y', width=0.5, range=p_hdtf.y_range),  source=source, alpha=0.3)\n\np_hdtf.x_range.range_padding = 0\np_hdtf.ygrid.grid_line_color = None\n\nshow(p_hdtf)","298d2fec":"wa_features = ['Wilderness_Area1',\n'Wilderness_Area2',\n'Wilderness_Area3',\n'Wilderness_Area4']\n\nwa_df_T = train_df[wa_features].apply(pd.value_counts).fillna(0).transpose().astype(int)\n\nwa_df_T.columns = ['absence','presence']\n\nwa_df_T\n\n#train_df['Wilderness_Area1'].isnull().values.any(), train_df['Wilderness_Area2'].isnull().values.any(),test_df['Wilderness_Area3'].isnull().values.any(),test_df['Wilderness_Area4'].isnull().values.any()","0c43be0d":"# finding common features between training and test dataframes\n\nmatching_cols = train_df.columns.intersection(test_df.columns)\nmatching_cols_list = matching_cols.tolist()\n\n# Features that will be removed from the training and test dataframes\n\ncols_remove = ['Id','Hillshade_9am','Hillshade_Noon','Hillshade_3pm','Soil_Type7','Soil_Type15']\n\nfor col in cols_remove:\n    matching_cols_list.remove(col)","392dbf04":"X = train_df[matching_cols_list]\n\n# Checking for any NA values\n\nX.isna().sum()","251d743e":"# Transforming the test dataframe\n\ntest_X = test_df[matching_cols_list]","7fa5dfd3":"def knc(train_X, train_y):\n    clf = KNeighborsClassifier(n_neighbors=10)\n    scores = cross_val_score(clf, train_X, train_y, cv=2)\n    return scores.mean()","8575838d":"def rfc(train_X, train_y):\n    clf = RandomForestClassifier(random_state=0, n_estimators=200,min_samples_split=2,max_depth=None)\n    scores = cross_val_score(clf, train_X, train_y, cv=5)\n    return scores.mean()","38d0071e":"def dtc(train_X, train_y):\n    clf = DecisionTreeClassifier(max_depth=None, min_samples_split=2,random_state=0)\n    scores = cross_val_score(clf, train_X, train_y, cv=5)\n    return scores.mean()","2744d158":"def etc(train_X, train_y):\n    clf = ExtraTreesClassifier(n_estimators=200, max_depth=None, min_samples_split=2, random_state=0)\n    scores = cross_val_score(clf, train_X, train_y, cv=5)\n    return scores.mean()","04fa8439":"kf = KFold(n_splits=3, random_state=0, shuffle=False)\n\nX_kf = train_df[matching_cols_list]\n\nscaler = MinMaxScaler(feature_range=(0, 1), copy=True)\nscaler.fit(X_kf)\nX_kf=scaler.transform(X_kf)\n\nlen(X_kf)","9ce3ba41":"test_kf_X = test_df[matching_cols_list]\nscaler.fit(test_kf_X)\ntest_kf_X=scaler.transform(test_kf_X)\n\nlen(test_kf_X)","94e8d526":"for train_index, test_index in kf.split(X_kf):\n    #print(\"TRAIN:\", train_index, \"TEST:\", test_index)\n    train_kf_X, val_kf_X = X_kf[train_index], X_kf[test_index]\n    train_kf_y, val_kf_y = y[train_index], y[test_index]\n    knc_kf_scores = knc(train_kf_X, train_kf_y)\n    rfc_kf_scores = rfc(train_kf_X, train_kf_y)\n    dtc_kf_scores = dtc(train_kf_X, train_kf_y)\n    etc_kf_scores = etc(train_kf_X, train_kf_y)\n    print(knc_kf_scores, rfc_kf_scores, dtc_kf_scores, etc_kf_scores)","c88b7501":"X_sk = train_df[matching_cols_list]\ny_sk = y\n\nskf = StratifiedKFold(n_splits=3)\n\nscaler_sk = MinMaxScaler(feature_range=(0, 1), copy=True)\nscaler_sk.fit(X_sk)\nX_sk = scaler_sk.transform(X_sk)\n\nlen(X_sk)","68426459":"test_sk_X = test_X\nscaler_sk.fit(test_sk_X)\ntest_sk_X=scaler_sk.transform(test_sk_X)\n\nlen(test_sk_X)","acf15845":"for train_index, test_index in skf.split(X_sk, y_sk):\n    train_X_sk, test_X_sk = X.loc[train_index], X.loc[test_index]\n    train_y_sk, test_y_sk = y_sk[train_index], y_sk[test_index]\n    knc_sk_scores = knc(train_X_sk, train_y_sk)\n    rfc_sk_scores = rfc(train_X_sk, train_y_sk)\n    dtc_sk_scores = dtc(train_X_sk, train_y_sk)\n    etc_sk_scores = etc(train_X_sk, train_y_sk)\n    print(knc_sk_scores, rfc_sk_scores, dtc_sk_scores, etc_sk_scores)","7ade9d20":"clf = ExtraTreesClassifier(random_state=0, n_estimators=200,min_samples_split=2,max_depth=None)\n\nclf.fit(X_sk, y_sk)\ntest_preds = clf.predict(test_sk_X)\n\noutput = pd.DataFrame({'Id': test_df.Id, 'Cover_Type': test_preds})\n\noutput.to_csv('submission_vs.csv', index=False)","51556555":"# Project Summary\n\nThe objective of this project is to predict forest cover type in the 4 wilderness areas within Roosevelt National Forest of northern colorado. Each observation is based on 30m x 30m patch. The training set contains features and the Cover_Type. The test set contains only features and the objective is to predict Cover_Type.","531aa254":"## Does horizontal distance to firepoints impact covertype\n\nLets plot Horizontal_Distance_To_Fire_Points and CoverType and see if there is any prominent pattern.","37a4836d":"## Defining Classification Models","a06a94b1":"## K-Fold Cross-Validation","c12121b2":"# Predicting target\n\nThe Stratified K-Fold ExtraTreesClassifier model produced the highest cross validation score. So we will be using ExtraTreesClassifier model for predicting the target.","a2945501":"## Does Aspect impact forest cover type\n\nWikipedia article on Aspect <https:\/\/en.wikipedia.org\/wiki\/Aspect_(geography)> clearly states the impact **aspect** has on vegetation.","0d7fede6":"# Loading training and test datasets","b55e3dfd":"## Does slope impact forest cover types","123101d5":"# Feature and Model selection\n\nIn the following sections we will look into the steps listed below\n\n* finding interesection of columns between training and test dataframes\n* removing some columns as previous runs revealed they do not improve the model performance in any way\n* using K-Fold and Stratified K-Fold cross validation techniques along with MinMaxScaler feature scaler","abaa6464":"## Does horizontal distance to roadways impact covertype","e5370298":"# Exploratory Data Analysis","45a05f9d":"### KNeighboursClassifier","efb33e6b":"### DecisionTreeClassifier","ab88854a":"The predictors for this dataset are cover types. \n\n1. Spruce\/Fir\n2. Lodgepole Pine\n3. Ponderosa Pine\n4. Cottonwood\/Willow\n5. Aspen\n6. Douglas-fir\n7. Krummholz","26727cab":"# Seperating the target from the training dataframe","06187b66":"The scatter plot reveals that forest covers change with elevation. Some observations based on the output\n\n* Krummholz cover type approximately starts at an altitude of 2800 meters\n* Aspen cover type is restricted to 2500 and 3000 meters\n* Cottonwood\/Willow cover type is restricted to 2000 and 2500 meters","e30e3b90":"## Stratified K-Fold Cross-Validation","4e6aac8a":"As you can see from the Viz, as the horizontal distance to nearest surface water body increases forest cover is impacted.","e3b0db60":"## Does vertical distance to hydrology impact covertype","29b69982":"## Does horizontal distance to hydrology impact covertype","637cd2f6":"# Cross-Validation","208d4751":"## Evaluating Soil Types","cf2ecfae":"## Does Elevation impact forest cover type","d6416d77":"### RandomForestClassifier","19c6cd61":"The Viz reveals that\n\n* Spruce\/Fir (1) and Lodgepole Pine (2) cover types get sparse at Slope > 40 degrees\n* Douglas-fir (6) cover type does not exist at Slope values greater than 42 degrees\n* Almost all cover types get sparse from 40 degrees","7612f9b7":"### ExtraTreesClassifier","b53e7865":"## Evaluating wilderness areas","e2209674":"The distribution of values for the soil types mentioned below is lopsided\n\n* SoilType7\n* SoilType15\n\nSo I am going to eliminate these features from the training and test dataset that we are going to use in modeling and predicting.Now lets determine how some of the other features other than soil types impact forest cover types."}}