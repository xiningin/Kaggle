{"cell_type":{"7a4c6ea8":"code","24dff0a4":"code","74d1f040":"code","12d67ba1":"code","9a1f5079":"code","7ecb3a71":"code","7e0de873":"code","dd3ccfb4":"code","06afb236":"code","9cc3f2bb":"code","04830097":"code","d1dd09be":"code","889c6c27":"code","c328c2f8":"code","e3f1d8a9":"code","5c20fe05":"code","2a7dab5b":"code","e9c3cc6c":"code","9b1fd2e3":"code","fa4e37ab":"code","b67b501b":"code","b47336d5":"code","73776bf9":"code","c2e45893":"code","b3849fed":"code","fb79c5cd":"code","24be5bf4":"code","87820396":"code","c9ff2840":"code","0311fd90":"code","54f74e57":"code","ec18c4d7":"code","3880f009":"code","eb28387d":"code","e1eded69":"code","2a198908":"code","455b2df0":"code","e8b748e9":"code","64b60518":"code","d7c33868":"code","dea6c87c":"code","4a378f74":"code","cabf8fba":"code","b6ab02b0":"code","b4bf9bf2":"code","c765e4e1":"code","8d816444":"code","c878c4a9":"code","d87e24ba":"code","ed908925":"code","818d65b1":"code","b7ca6af1":"code","b267eeff":"code","4faa1f3b":"code","4ef1ca95":"code","4efe3746":"markdown","dfa09626":"markdown","364d6522":"markdown","04e248e9":"markdown","f801dcf2":"markdown","d0f30d23":"markdown","349a2c75":"markdown","2af04e9a":"markdown","8e065060":"markdown","bf0e716b":"markdown","5ad06deb":"markdown","c0406eba":"markdown","cc360422":"markdown","5cbda590":"markdown","52be8ba7":"markdown","8e447a0e":"markdown","40707b8b":"markdown","3ab1c5a4":"markdown"},"source":{"7a4c6ea8":"import warnings\nwarnings.filterwarnings('ignore')\n\n\nimport itertools\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nfrom matplotlib.ticker import NullFormatter\nimport seaborn as sns\n%matplotlib inline\n\nplt.style.use('fivethirtyeight')\nsns.set_style('darkgrid')","24dff0a4":"from sklearn.preprocessing import StandardScaler\nfrom sklearn.linear_model import LogisticRegression,Perceptron,SGDClassifier\nfrom sklearn.svm import SVC\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.naive_bayes import GaussianNB\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.neighbors import KNeighborsClassifier","74d1f040":"train=pd.read_csv('..\/input\/train-data\/loan_train.csv')\ntrain.head()","12d67ba1":"train.tail()","9a1f5079":"train.info()","7ecb3a71":"train.corr()","7e0de873":"plt.figure(figsize=(20,5))\nplt.subplot(1,3,1)\nsns.distplot(train['Unnamed: 0.1'])\nplt.subplot(1,3,2)\nsns.distplot(train['Unnamed: 0'])","dd3ccfb4":"train=train.drop('Unnamed: 0.1',axis=1)","06afb236":"cat_var=['loan_status','Principal','terms','education','Gender']","9cc3f2bb":"def value_counts(cat_var):\n    each_cols=train[cat_var]\n    for i in each_cols:\n        print(\"Number of unique_value in column {} of lenth {} are {}\".format(i.upper(),\n                                            len(dict(each_cols[i].value_counts())),\n                                            dict(each_cols[i].value_counts())))\nvalue_counts(cat_var)","04830097":"import missingno as mn\nmn.matrix(train)","d1dd09be":"pd.set_option('display.float_format',lambda x:'%.3f' %x)\ntrain.describe()","889c6c27":"#distribution of categorical features\ntrain.describe(include=[\"O\"])","c328c2f8":"bins=np.linspace(train.Principal.min(),train.Principal.max(),10)\ng=sns.FacetGrid(train,col='Gender',hue='loan_status',palette='Set1',col_wrap=2)\ng.map(plt.hist,'Principal',bins=bins,ec='k')\ng.axes[-1].legend()","e3f1d8a9":"bins=np.linspace(train.age.min(),train.age.max(),10)\ng=sns.FacetGrid(train,col='Gender',hue='loan_status',palette='Set1',col_wrap=2)\ng.map(plt.hist,'age',bins=bins,ec='k')\ng.axes[-1].legend()","5c20fe05":"train['due_date'] = pd.to_datetime(train['due_date'])\ntrain['effective_date'] = pd.to_datetime(train['effective_date'])","2a7dab5b":"train['dayofweek']=train['effective_date'].dt.dayofweek\nbins = np.linspace(train.dayofweek.min(), train.dayofweek.max(), 10)\ng = sns.FacetGrid(train, col=\"Gender\", hue=\"loan_status\", palette=\"Set1\", col_wrap=2)\ng.map(plt.hist, 'dayofweek', bins=bins, ec=\"k\")\ng.axes[-1].legend()\nplt.show()\n","e9c3cc6c":"train['weekend']=train['dayofweek'].apply(lambda x:1 if (x>3) else 0)\ntrain.head()","9b1fd2e3":"train['loan_status']=train['loan_status'].map({'PAIDOFF':1,'COLLECTION':0}).astype(int)","fa4e37ab":"train[['education','loan_status']].groupby(['education'],as_index=False).mean().sort_values(by='loan_status',ascending=False)","b67b501b":"train[['Gender','loan_status']].groupby(['Gender'],as_index=False).mean().sort_values(by='loan_status',ascending=False)","b47336d5":"#Gender feature\ntrain['Gender'].value_counts()","73776bf9":"train['Gender']=train['Gender'].map({'male':1,'female':0}).astype(int)","c2e45893":"train.Gender.unique()","b3849fed":"#education\ntrain['education'].value_counts()","fb79c5cd":"x=train.groupby(['education'])['loan_status'].mean().sort_values().index","24be5bf4":"train['education']=train['education'].map({k:i for i,k in enumerate(x,0)})","87820396":"train.education.unique()","c9ff2840":"train.head()","0311fd90":"import scipy.stats as stats","54f74e57":"#diagnostic of age\n\nplt.figure(figsize=(16,6))\n\nplt.subplot(1,3,1)\nsns.boxplot(train.age)\nplt.plot('boxplot')\n\nplt.subplot(1,3,2)\nstats.probplot(train.age,dist='norm',plot=plt)\nplt.title('Q-Q')\n\nplt.subplot(1,3,3)\nplt.hist(train.age,bins=20)\nplt.title('Histogram')","ec18c4d7":"lower_bound=0.065\nupper_bound=0.95\n\nlower=train['age'].quantile(lower_bound)\nupper=train['age'].quantile(upper_bound)","3880f009":"train['age']=np.where(train['age']<lower,lower,np.where(train['age']>upper,upper,train['age']))","eb28387d":"sns.boxplot(train.age)","e1eded69":"#diagnostic of age\n\nplt.figure(figsize=(16,6))\n\nplt.subplot(1,3,1)\nsns.boxplot(train.age)\nplt.plot('boxplot')\n\nplt.subplot(1,3,2)\nstats.probplot(train.age,dist='norm',plot=plt)\nplt.title('Q-Q')\n\nplt.subplot(1,3,3)\nplt.hist(train.age,bins=20)\nplt.title('Histogram')","2a198908":"train.columns","455b2df0":"train=train[['Principal','terms','age','Gender','education','weekend','loan_status']]","e8b748e9":"X=train.drop('loan_status',axis=1).values\ny=train.loan_status.values","64b60518":"from sklearn.preprocessing import StandardScaler\nsc=StandardScaler()\nX=sc.fit_transform(X)","d7c33868":"from sklearn.model_selection import train_test_split\nX_train,X_test,y_train,y_test=train_test_split(X,y,test_size=0.3,random_state=0)","dea6c87c":"from sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.svm import SVC\nfrom sklearn.metrics import mean_squared_error,accuracy_score","4a378f74":"ks=10\nmean_acc=np.zeros((ks-1))\nstd_acc=np.zeros((ks-1))\nfor n in range(1,ks):\n    neigh=KNeighborsClassifier(n_neighbors=n).fit(X_train,y_train)\n    yhat=neigh.predict(X_test)\n    mean_acc[n-1]=accuracy_score(y_test,yhat)\n    std_acc[n-1]=np.std(y_test==yhat)\/\/np.sqrt(yhat.shape[0])\n    \nmean_acc","cabf8fba":"mean_acc.argmax()+1","b6ab02b0":"print(\"the best accuracy was with\",mean_acc.max(),\"with k=\",mean_acc.argmax()+1)","b4bf9bf2":"neigh=KNeighborsClassifier(n_neighbors=3).fit(X_train,y_train)\nypred_knn=neigh.predict(X_test)","c765e4e1":"accuracy_score(y_test,ypred_knn)","8d816444":"svc=SVC(kernel='rbf')\nsvc.fit(X_train,y_train)\nypred_svc=svc.predict(X_test)\naccuracy_score(y_test,ypred_svc)","c878c4a9":"from sklearn.pipeline import make_pipeline\nfrom sklearn.ensemble import BaggingClassifier","d87e24ba":"pipeline=make_pipeline(DecisionTreeClassifier(criterion='entropy',max_depth=4))\npipeline.fit(X_train,y_train)\npipeline.score(X_train,y_train)","ed908925":"pipeline.score(X_test,y_test)","818d65b1":"bgclf=BaggingClassifier(base_estimator=pipeline,n_estimators=100,max_samples=10,random_state=1,n_jobs=5)\nbgclf.fit(X_train,y_train)","b7ca6af1":"bgclf.score(X_train,y_train)","b267eeff":"bgclf.score(X_test,y_test)","4faa1f3b":"y_pred=bgclf.predict(X_test)","4ef1ca95":"accuracy_score(y_pred,y_test)","4efe3746":"<a id=\"1\"><\/a> <br>\n# Getting started with data","dfa09626":"# Prediction of loan_status\n    \n\n* [Getting started with data](#1)\n* [Data_Visualization_and_Preprocessing](#2)\n* [Feature_Engineering](#3)\n* [Modeling](#4)","364d6522":"We see that people who get the loan at the end of the week dont pay it off, so lets use Feature binarization to set a threshold values less then day 4 ","04e248e9":"## Converting Categorical features into numerical","f801dcf2":"<a id=\"3\"><\/a> <br>\n# Feature Engineering","d0f30d23":"Since,both are depending on each other, those are correlated with each other.<br>\nHence,we can drop any of them","349a2c75":"### Treating outliers\n\nherer we have only **age** feature as continuous variable","2af04e9a":"We can see that **Unnamed: 0** and **Unnamed: 0.1** are highly correlated.","8e065060":"**Categorical :** loan_status,education,Gender and **DateTimeFormat :** effective_date,due_date\n\n**Continuous :** age and **discrete :** Principal,terms","bf0e716b":"## Decision Tree Classifier","5ad06deb":"## Analyzing Features","c0406eba":"<a id=\"4\"><\/a><br>\n# Modeling","cc360422":"## SVC","5cbda590":"### pivoting features of categorical","52be8ba7":"###  Features Selection","8e447a0e":"## KNeighborsClassifier","40707b8b":"We can decide our model as Decision Tree Classifier","3ab1c5a4":"<a id=\"2\"><\/a><\/br>\n# Date Visualization and Preprocessing"}}