{"cell_type":{"0c07d4cd":"code","4130f523":"code","4004c8d3":"code","5721e43e":"code","8e4a424d":"code","e32522dd":"code","949ad7ce":"code","70856da6":"code","73abdba9":"code","a0a450cb":"code","9d08f3dc":"code","f0ec2eae":"code","1890c124":"code","97110317":"code","5ceb767c":"code","671e7b85":"code","4f9ae4bc":"code","c9a092c0":"code","b709cc3b":"code","86e788bc":"code","1354da77":"code","80251284":"code","03fc3abb":"code","69ef1908":"code","3ee94394":"code","227b6088":"code","4d82eb32":"code","ffeccea4":"code","63fb1fef":"code","8c545d92":"code","83a88c92":"markdown","25b13f39":"markdown","2c3f890d":"markdown","77f21b34":"markdown","621728ab":"markdown","3b2846bc":"markdown","56af9a5d":"markdown","6a0ce6e1":"markdown"},"source":{"0c07d4cd":"import torch\nimport torchvision\nimport torch.nn as nn\nfrom tqdm.notebook import tqdm\nimport torch.nn.functional as F\nimport matplotlib.pyplot as plt\nimport torchvision.models as models\nfrom torch.utils.data import DataLoader\nfrom torchvision.utils import make_grid\nfrom torch.utils.data import random_split\nimport torchvision.transforms as transforms\n%matplotlib inline","4130f523":"labels = {\n    0: \"buildings\",\n    1: \"forest\",\n    2: \"glacier\",\n    3: \"mountain\",\n    4: \"sea\",\n    5: \"street\"\n}","4004c8d3":"def encode_label(label):\n    target = torch.zeros(6)\n    for l in str(label).split(\" \"):\n        target[int(l)] = 1.\n    return target\n    \ndef decode_target(target, text_labels=False, threshold=0.5):\n    result = []\n    for i, x in enumerate(target):\n        if (x >=threshold):\n            if text_labels:\n                result.append(labels[i] + \"(\" + str(i) + \")\")\n            else:\n                result.append(str(i))\n    return \" \".join(result)","5721e43e":"def show_sample(img, target, invert=True):\n    if invert:\n        plt.imshow(1 - img.permute((1, 2, 0)))\n    else:\n        plt.imshow(img.permute(1, 2, 0))\n    print('Labels:', decode_target(target, text_labels=True))\n    \nshow_sample(*train_ds[200])","8e4a424d":"transform_ds= transforms.Compose([\n    transforms.Resize((150, 150)),\n    transforms.RandomCrop(32, padding=4),\n    transforms.RandomHorizontalFlip(),\n    transforms.ToTensor(),\n    #transforms.Normalize((.5, .5, .5), (.5, .5, .5))\n])\n\ntransform_dt= transforms.Compose([\n    transforms.ToTensor(),\n    transforms.Normalize([.5, .5, .5], [.5, .5, .5])\n])\n\nds = torchvision.datasets.ImageFolder(root= \"..\/input\/intel-image-classification\/seg_train\/seg_train\", \n                                      transform=transform_ds)\n\ntest_ds = torchvision.datasets.ImageFolder(root= \"..\/input\/intel-image-classification\/seg_test\/seg_test\", \n                                           transform=transform_dt)","e32522dd":"train_ds_size = 12631\nval_ds_size = 1403\ntrain_ds, val_ds = random_split(ds, [train_ds_size, val_ds_size])","949ad7ce":"batch_size = 128\ntrain_dl = DataLoader(ds, batch_size, shuffle=True, num_workers=3, pin_memory=True)\nval_dl = DataLoader(val_ds, batch_size*2, num_workers=3, pin_memory=True)","70856da6":"def show_batch(train_dl):\n    for images, labels in train_dl:\n        fig, ax = plt.subplots(figsize=(12,12))\n        ax.set_xticks([]); ax.set_yticks([])\n        ax.imshow(make_grid(images[:64], nrow=8).permute(1,2,0))\n        break","73abdba9":"show_batch(train_dl)","a0a450cb":"def accuracy(out, labels):\n    _, preds = torch.max(out, dim=1)\n    return torch.tensor(torch.sum(preds == labels).item() \/ len(preds))\n\n\nclass ImageClassificationBase(nn.Module):\n    \n    def training_step(self, batch):\n        images, labels = batch\n        out = self(images)\n        loss = F.cross_entropy(out, labels)\n        return loss\n    \n    def validation_step(self, batch):\n        images, labels = batch\n        out = self(images)\n        loss = F.cross_entropy(out, labels)\n        acc = accuracy(out, labels)\n        return {\"val_loss\": loss.detach(), \"val_acc\": acc}\n    \n    def validation_epoch_end(self, outputs):\n        batch_loss = [x[\"val_loss\"] for x in outputs]\n        epoch_loss = torch.stack(batch_loss).mean()\n        batch_acc = [x[\"val_acc\"] for x in outputs]\n        epoch_acc = torch.stack(batch_acc).mean()\n        return {\"val_loss\": epoch_loss.item(), \"val_acc\": epoch_acc.item()}\n    \n    def epoch_end(self, epoch, result):\n            print(\"Epoch: [{}], last_lr: {:.8f}, train_loss: {:.4f}, val_loss: {:.4f}, val_acc: {:.4f}\".format(\n                epoch, result[\"lrs\"][-1], result[\"train_loss\"], result[\"val_loss\"], result[\"val_acc\"]))","9d08f3dc":"class IntelResnet(ImageClassificationBase):\n    def __init__(self):\n        super().__init__()\n        self.network = models.resnet34(pretrained=True)\n        number_of_features = self.network.fc.in_features\n        self.network.fc = nn.Linear(number_of_features, 10)\n        \n    def forward(self, xb):\n        return self.network(xb)\n        \n    def freeze(self):\n        for param in self.network.parameters():\n            param.require_grad = False\n        for param in self. network.fc.parameters():\n            param.require_grad = True\n            \n    def unfreeze(self):\n        for param in self.network.parameters():\n            param.require_grad = True","f0ec2eae":"class IntelModel(ImageClassificationBase):\n    \n    def __init__(self):\n        super().__init__()\n        self.cnn = nn.Sequential(\n        nn.Conv2d(3, 16, kernel_size=3, padding=1),\n        nn.ReLU(),\n        nn.MaxPool2d(2,2),\n        \n        nn.Conv2d(16, 64, kernel_size=3, padding=1),\n        nn.ReLU(),\n        nn.MaxPool2d(2,2),\n        \n        nn.Conv2d(64, 128, kernel_size=3, padding=1),\n        nn.ReLU(),\n        nn.MaxPool2d(2,2),\n        \n        nn.Conv2d(128, 256, kernel_size=3, padding=1),\n        nn.ReLU(),\n        nn.MaxPool2d(2,2),\n        \n        nn.Flatten(),\n        nn.Linear(256*2*2, 512),\n        nn.ReLU(),\n        nn.Linear(512, 128),\n        nn.ReLU(),\n        nn.Linear(128, 10))\n        \n    def forward(self, xb):\n        return self.cnn(xb)\n    \nmodel = IntelModel()\nmodel","1890c124":"def get_default_device():\n    if torch.cuda.is_available():\n        return torch.device(\"cuda\")\n    else:\n        return torch.device(\"cpu\")\n    \ndef to_device(data, device):\n    if isinstance(data, (list,tuple)):\n        return [to_device(x, device) for x in data]\n    return data.to(device, non_blocking=True)\n\nclass DeviceDataLoader():\n    def __init__(self, dl, device):\n        self.dl = dl\n        self.device = device\n        \n    def __iter__(self):\n        for x in self.dl:\n            yield to_device(x, self.device)\n            \n    def __len__(self):\n        return len(self.dl)\n","97110317":"device = get_default_device()\ndevice","5ceb767c":"train_dl = DeviceDataLoader(train_dl, device)\nval_dl = DeviceDataLoader(val_dl, device)","671e7b85":"@torch.no_grad()\ndef evaluate(model, val_dl):\n    model.eval()\n    outputs = [model.validation_step(batch) for batch in val_dl]\n    return model.validation_epoch_end(outputs)\n\ndef get_lr(optimizer):\n    for param_group in optimizer.param_groups:\n        return param_group[\"lr\"]\n\n\ndef fit_one_cycle(epochs, max_lr, model, train_dl, val_dl, \n                  weight_decay=0, grad_clip=None, opt_func=torch.optim.Adam):\n    torch.cuda.empty_cache()\n    history = []\n    optimizer = opt_func(model.parameters(), max_lr, weight_decay=weight_decay)\n    sched = torch.optim.lr_scheduler.OneCycleLR(optimizer, max_lr, epochs=epochs, \n                                                steps_per_epoch=len(train_dl))\n    \n    for epoch in range(epochs):\n        model.train()\n        train_losses = []\n        lrs = []\n        for batch in tqdm(train_dl):\n            loss = model.training_step(batch)\n            train_losses.append(loss)\n            loss.backward()\n            \n            if grad_clip:\n                nn.utils.clip_grad_value_(model.parameters(), grad_clip)\n                \n            optimizer.step()\n            optimizer.zero_grad()\n            \n            lrs.append(get_lr(optimizer))\n            sched.step()\n            \n        result = evaluate(model, val_dl)\n        result[\"train_loss\"] = torch.stack(train_losses).mean().item()\n        result[\"lrs\"] = lrs\n        model.epoch_end(epoch, result)\n        history.append(result)\n    return history","4f9ae4bc":"#model_resnet18 = to_device(IntelResnet(), device)\nmodel_resnet34 = to_device(IntelResnet(), device)","c9a092c0":"history = [evaluate(model_resnet18, val_dl)]\nhistory","b709cc3b":"history = [evaluate(model_resnet34, val_dl)]\nhistory","86e788bc":"model_resnet34.freeze()","1354da77":"epochs = 5\nmax_lr = 10e-4\ngrad_clip = 0.1\nweight_decay = 1e-3\nopt_func = torch.optim.Adam","80251284":"history += fit_one_cycle(epochs, max_lr, model_resnet34, train_dl, val_dl,\n             grad_clip=grad_clip, weight_decay=weight_decay,\n             opt_func=opt_func)\nhistory","03fc3abb":"model.unfreeze()","69ef1908":"epochs = 10\nmax_lr = 10e-5\ngrad_clip = 0.1\nweight_decay = 1e-4\nopt_func = torch.optim.Adam","3ee94394":"history = fit_one_cycle(epochs, max_lr, model, train_dl, val_dl,\n             grad_clip=grad_clip, weight_decay=weight_decay,\n             opt_func=opt_func)\nhistory","227b6088":"def plot_accuracy(history):\n    scores = [x[\"val_acc\"] for x in history]\n    plt.plot(scores, \"-x\")\n    plt.xlabel(\"epoch\")\n    plt.ylabel(\"val_acc\")\n    plt.title(\"Accuracy vs. number of epochs\")\n\nplot_accuracy(history)","4d82eb32":"def plot_loss(history):\n    loss = [x[\"val_loss\"] for x in history]\n    plt.plot(loss, \"-x\")\n    plt.xlabel(\"epochs\")\n    plt.ylabel(\"Loss\")\n    plt.title(\"Loss vs. number of epochs\")\n    \nplot_loss(history)","ffeccea4":"def prediction(images, model):\n    xb = to_device(images.unsqueeze(0), device)\n    out = model(xb)\n    _, preds = torch.max(out, dim=1)\n    prediction = preds[0].item()\n    return prediction","63fb1fef":"images, labels = test_ds[16]\nprint(\"Label: \", labels, \"Prediction:\", prediction(images, model))\nplt.imshow(images.permute(1,2,0))","8c545d92":"images, labels = test_ds[400]\nprint(\"Label: \", labels, prediction(images, model))\nplt.imshow(images.permute(1,2,0))","83a88c92":"# Intel-Image-classification","25b13f39":"## Moving the model","2c3f890d":"## Evaluating","77f21b34":"## Preparing the data","621728ab":"## Let's have a look at the performance of the model","3b2846bc":"## Let's make some predictions","56af9a5d":"## Defining the model","6a0ce6e1":"## Importing the modules"}}