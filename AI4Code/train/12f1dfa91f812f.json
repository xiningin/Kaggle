{"cell_type":{"95bf630b":"code","c14188f2":"code","dfd6c8a0":"code","a11d0c53":"code","ca4fc94d":"code","148316b0":"code","a7860d28":"code","08a8148b":"code","5e557fa5":"code","db2f046f":"code","2c059ad0":"code","380dd044":"markdown","52337200":"markdown","c48eeaa6":"markdown","53626c7f":"markdown","33a72ccc":"markdown","defacf8c":"markdown","923d6760":"markdown","2fa66d88":"markdown"},"source":{"95bf630b":"import numpy as np\nimport keras\nimport pandas as pd\nfrom keras.models import Sequential\nfrom keras.layers import Dense, Conv2D, BatchNormalization, Dropout, MaxPool2D, Input, Softmax, Activation, Flatten\nfrom keras.models import Model\nfrom keras import optimizers\nfrom keras.utils.np_utils import to_categorical\nfrom keras.layers import concatenate,AveragePooling2D\nfrom keras.callbacks import ModelCheckpoint, CSVLogger, LearningRateScheduler, ReduceLROnPlateau\nfrom keras.regularizers import l2\nfrom keras.applications.inception_v3 import InceptionV3\nfrom keras.applications.inception_v3 import preprocess_input, decode_predictions\nfrom keras.preprocessing import image\nfrom keras.preprocessing.image import ImageDataGenerator,load_img, img_to_array\nfrom keras.layers import Input\nimport os\nimport cv2\nimport scipy\nimport skimage\nfrom keras.callbacks import ModelCheckpoint\nfrom keras.utils.vis_utils import plot_model\nimport matplotlib.pyplot as plt\nfrom glob import glob","c14188f2":"from pathlib import Path\nimport random\n\ntrain_path = '..\/input\/blood-cells\/dataset2-master\/dataset2-master\/images\/TRAIN\/'\ntest_path = '..\/input\/blood-cells\/dataset2-master\/dataset2-master\/images\/TEST\/'\n\nclasses = []\nfor cell in os.listdir(train_path):\n    classes.append(cell)\nclass_to_ind = dict(zip(classes, range(len(classes))))\nind_to_class = dict(zip(range(len(classes)), classes))\n    \ndef load_sample_imgs(path):\n    rows = 10\n    cols = 5\n    sorted_dirs = sorted(os.listdir(path))\n    fig, axes = plt.subplots(rows,cols, figsize=(30,10))\n    class_arr = ['MONOCYTE', \"EOSINOPHIL\", 'NEUTROPHIL','LYMPHOCYTE' ]\n    for i in range(rows):\n        for j in range(cols):\n            cell = random.choice(class_arr)\n            all_files = os.listdir(path + '\/' + cell)\n            rand_img = random.choice(all_files)\n            img = plt.imread(path + '\/' + cell + '\/' + rand_img)\n            axes[i][j].imshow(img)\n            ec = (0, .6, .1)\n            fc = (0, .7, .2)\n            axes[i][j].text(0, -20, cell, size=10, rotation=0,\n                ha=\"left\", va=\"top\", \n                bbox=dict(boxstyle=\"round\", ec=ec, fc=fc))\n    plt.setp(axes, xticks=[], yticks=[])\n    plt.tight_layout(rect=[0, 0.03, 1, 0.95])\n    \nload_sample_imgs(train_path)\n\n\n    \n","dfd6c8a0":"print(class_to_ind)\nprint(ind_to_class)","a11d0c53":"def get_data(path):\n    X = []\n    y = []\n    for cell in class_to_ind:\n        for image_name in os.listdir(path + '\/' + cell):\n            img_file = cv2.imread(path + '\/' + cell + '\/' + image_name)\n            if img_file is not None: \n                img_file = cv2.resize(img_file, (60,80))\n                img = np.asarray(img_file)\n                X.append(img)\n                y.append(class_to_ind[cell])\n    X = np.asarray(X)\n    y = np.asarray(y)\n    return X, y\n                \nX_train, y_train = get_data(train_path)\nX_test, y_test = get_data(test_path)\nprint('done loading data')\nprint(X_train.shape)","ca4fc94d":"y_train_cat = to_categorical(y_train, num_classes=4)\ny_test_cat = to_categorical(y_test, num_classes=4)\n\nprint(y_train_cat.shape)\nprint(y_test_cat.shape)","148316b0":"train_datagen = ImageDataGenerator(\n    featurewise_center=False,  # set input mean to 0 over the dataset\n    samplewise_center=False,  # set each sample mean to 0\n    featurewise_std_normalization=False,  # divide inputs by std of the dataset\n    samplewise_std_normalization=False,  # divide each input by its std\n    zca_whitening=False,  # apply ZCA whitening\n    rotation_range=0,  # randomly rotate images in the range (degrees, 0 to 180)\n    width_shift_range=0.2,  # randomly shift images horizontally (fraction of total width)\n    height_shift_range=0.2,  # randomly shift images vertically (fraction of total height)\n    horizontal_flip=True,  # randomly flip images\n    vertical_flip=False, # randomly flip images\"\n    zoom_range=[.8, 1],\n    channel_shift_range=30,\n    fill_mode='reflect')\n\ntrain_generator = train_datagen.flow(X_train, y_train_cat, batch_size=32)\n\ntest_datagen = ImageDataGenerator()\ntest_generator = test_datagen.flow(X_test, y_test_cat, batch_size=32)","a7860d28":"inp = Input(shape=(80,60,3))\nk = BatchNormalization()(inp)\nk = Conv2D(32, (7,7), padding=\"same\",activation=\"relu\",strides=(2,2))(k)\nk = MaxPool2D(pool_size=(3, 3), padding=\"same\",strides=(2,2))(k) \nk = Conv2D(32, (3,3), padding=\"same\",activation=\"relu\",strides=(1,1))(k)\nk = MaxPool2D(pool_size=(3, 3), padding=\"same\",strides=(2,2))(k)\nfor j in range(1,4+1):\n    out_conv = []\n    for i in [(1,1),(3,3),(5,5),(0,0)]:\n        p = k\n        if i == (1,1):\n            p = Conv2D(32, (1,1), padding=\"same\",activation=\"relu\")(p)\n            out_conv.append(Conv2D(32, (1,1), padding=\"same\",activation=\"relu\")(p))\n        elif i == (0,0):\n            p = MaxPool2D(pool_size=(2, 2), padding=\"same\",strides=(1,1))(p)\n            out_conv.append(Conv2D(32, (1,1), padding=\"same\",activation=\"relu\")(p))\n        else:\n            p = Conv2D(32, (1,1), padding=\"same\",activation=\"relu\")(p)\n            p = Conv2D(32, i, padding=\"same\",activation=\"relu\")(p)\n            out_conv.append(Conv2D(32, i, padding=\"same\",activation=\"relu\")(p))\n    x = concatenate(out_conv, axis = -1)\n    #if j%2 == 0:\n    #    x = MaxPool2D(pool_size=(3, 3), padding=\"same\",strides=(2,2))(x)\n    #x = BatchNormalization(axis=-1)(x)\n    k = x\n# x = Dropout(0.5)(k)\nx = MaxPool2D(pool_size=(7, 7), padding=\"same\",strides=(2,2))(x)\nx = Flatten()(x)\n#x = Dense(1024,activation=\"relu\")(x)\n#x = BatchNormalization()(x)\n#x = Dropout(0.5)(x)\ny = Dense(4,activation=\"softmax\")(x)\n#    z = Dense(2,activation=\"softmax\")(x)\nmodel = Model(inp, y)\nopt = optimizers.Adam(lr=0.01,decay=0.0001)\nmodel.compile(loss='categorical_crossentropy',\n              optimizer=\"adam\",\n              metrics=['accuracy'])\nprint(model.summary())","08a8148b":"history = model.fit(X_train,\n                    y_train_cat,\n                    batch_size = 32,\n                    epochs=5,\n                    validation_data = (X_test, y_test_cat))","5e557fa5":"y_test_pred = model.evaluate(X_test, y_test_cat, verbose=1)","db2f046f":"print(y_test_pred)","2c059ad0":"for cell in class_to_ind:\n    for i in range(5):\n        image_arr = os.listdir(test_path + '\/' + cell)\n        random_img = random.choice(image_arr)\n        img_file = cv2.imread(test_path + '\/' + cell + '\/' + random_img)\n        if img_file is not None:\n            img_file = cv2.resize(img_file, (60,80))\n            img = np.asarray(img_file)\n            X = []\n            X.append(img)\n            X = np.asarray(X)\n            cell_pred = model.predict(X)\n            cell_top_pred = np.argmax(cell_pred, axis=1)\n            print('Current cell: ' + cell)\n            print('Current Prediction: ' + ind_to_class[cell_top_pred[0]])\n            ","380dd044":"# Train Model","52337200":"# Load Test and Train Data","c48eeaa6":"# Make Some Predictions","53626c7f":"# Encode values to one-hot vectors","33a72ccc":"# Create Model","defacf8c":"# Prediction Loss and Accuracy","923d6760":"# Augment Data ","2fa66d88":"# Display Some Example Images"}}