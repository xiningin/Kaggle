{"cell_type":{"bebc3bd3":"code","601d5def":"code","0d048012":"code","34b566c5":"code","631e2d19":"code","7b48b60a":"code","8d3cb2b7":"code","cf3d5a76":"code","98c69ead":"code","3034a5d1":"markdown","a73cd03c":"markdown","42e80a31":"markdown","b97fc49a":"markdown","6a497228":"markdown","2892cdbf":"markdown","576e0918":"markdown"},"source":{"bebc3bd3":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","601d5def":"from matplotlib.pyplot import show\nfrom seaborn import countplot\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.pipeline import Pipeline\nfrom sklearn.preprocessing import StandardScaler, LabelEncoder\nfrom sklearn.ensemble import RandomForestClassifier\nfrom imblearn.over_sampling import SMOTE\n\nimport warnings\nwarnings.filterwarnings(action='ignore')","0d048012":"df = pd.read_csv('\/kaggle\/input\/video-games-rating-by-esrb\/Video_games_esrb_rating.csv')\ndf.head()","34b566c5":"countplot(df['esrb_rating'])\nshow()","631e2d19":"X = df.drop(['title', 'esrb_rating'], axis = 1)\ny = df['esrb_rating']","7b48b60a":"y.unique()","8d3cb2b7":"label_map = {\n    'E' : 0,\n    'ET' : 1,\n    'M' : 2,\n    'T' : 3\n}\n\ny = y.map(label_map)\n\ny.head()","cf3d5a76":"oversample = SMOTE()\nX, y = oversample.fit_resample(X, y)","98c69ead":"steps = [('scaler', StandardScaler()),\n        ('Random Forest', RandomForestClassifier())]\n\npipeline = Pipeline(steps)\n\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.2)\n\nmodel = pipeline.fit(X_train, y_train)\n\nprint(\"Train Score Accuracy :\", model.score(X_train, y_train))\nprint(\"Test Score Accuracy :\", model.score(X_test, y_test))","3034a5d1":"## Importing Necessary Modules","a73cd03c":"## Splitting Data","42e80a31":"## Changing Target Variables Into Numerical","b97fc49a":"## Modelling with Pipeline","6a497228":"\nit seems the target variable almost balance","2892cdbf":"## Make Data Balance with SMOTE","576e0918":"## See Target Variables"}}