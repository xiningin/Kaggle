{"cell_type":{"1eda0510":"code","1bd6e427":"code","40f02894":"code","d67deabd":"code","fd640fc2":"code","359aaf73":"code","a4d794c7":"code","c50bd27b":"code","130f2eee":"code","ab4eb67d":"code","6b529234":"code","a2a300fb":"code","d9ef4e68":"code","300b5c3c":"code","bae156a7":"code","55ac78bb":"code","090eea9f":"code","eeed80ad":"code","bb3122d1":"code","e2076998":"code","83d52a68":"code","af965c6e":"code","e4335ef3":"code","88fb0ea5":"markdown","e8f78d5a":"markdown","cdabba47":"markdown"},"source":{"1eda0510":"import os\nimport glob\nfrom joblib import Parallel, delayed\nimport pandas as pd\nimport numpy as np\nimport scipy as sc\nfrom sklearn.model_selection import KFold\nimport lightgbm as lgb\nimport warnings\nwarnings.filterwarnings('ignore')\npd.set_option('max_columns', 300)\nimport pickle\nimport matplotlib.pyplot as plt\nimport seaborn as sns","1bd6e427":"import torch\nimport torch.nn as nn\nimport torch.optim as optim\nfrom torch.optim.lr_scheduler import ReduceLROnPlateau\nimport torch.nn.functional as F\n\nimport random","40f02894":"SEED = 42\n\ndef random_seed(SEED):\n    \n    random.seed(SEED)\n    os.environ['PYTHONHASHSEED'] = str(SEED)\n    np.random.seed(SEED)\n    torch.manual_seed(SEED)\n    \n    if torch.cuda.is_available():\n        torch.cuda.manual_seed(SEED)\n        torch.cuda.manual_seed_all(SEED)\n        torch.backends.cudnn.deterministic = True\n        torch.backends.cudnn.benchmark = False\n\nrandom_seed(SEED)","d67deabd":"!pip install ..\/input\/pytorchtabnet\/pytorch_tabnet-3.1.1-py3-none-any.whl","fd640fc2":"from pytorch_tabnet.pretraining import TabNetPretrainer\nfrom pytorch_tabnet.tab_model import TabNetRegressor\nfrom pytorch_tabnet.metrics import Metric\nimport torch\nfrom sklearn.preprocessing import LabelEncoder\nfrom sklearn.metrics import mean_squared_error\n\nimport pandas as pd\nimport numpy as np\nnp.random.seed(0)\n\nimport os\nfrom pathlib import Path","359aaf73":"# data directory\ndata_dir = '..\/input\/optiver-realized-volatility-prediction\/'\n\n# Function to calculate first WAP\ndef calc_wap1(df):\n    wap = (df['bid_price1'] * df['ask_size1'] + df['ask_price1'] * df['bid_size1']) \/ (df['bid_size1'] + df['ask_size1'])\n    return wap\n\n# Function to calculate second WAP\ndef calc_wap2(df):\n    wap = (df['bid_price2'] * df['ask_size2'] + df['ask_price2'] * df['bid_size2']) \/ (df['bid_size2'] + df['ask_size2'])\n    return wap\n\n# Function to calculate the log of the return\n# Remember that logb(x \/ y) = logb(x) - logb(y)\ndef log_return(series):\n    return np.log(series).diff()\n\n# Calculate the realized volatility\ndef realized_volatility(series):\n    return np.sqrt(np.sum(series**2))\n\n# Function to count unique elements of a series\ndef count_unique(series):\n    return len(np.unique(series))\n\n# Function to read our base train and test set\ndef read_train_test():\n    train = pd.read_csv('..\/input\/optiver-realized-volatility-prediction\/train.csv')\n    test = pd.read_csv('..\/input\/optiver-realized-volatility-prediction\/test.csv')\n    # Create a key to merge with book and trade data\n    train['row_id'] = train['stock_id'].astype(str) + '-' + train['time_id'].astype(str)\n    test['row_id'] = test['stock_id'].astype(str) + '-' + test['time_id'].astype(str)\n    print(f'Our training set has {train.shape[0]} rows')\n    return train, test\n\n# Function to preprocess book data (for each stock id)\ndef book_preprocessor(file_path):\n    df = pd.read_parquet(file_path)\n    # Calculate Wap\n    df['wap1'] = calc_wap1(df)\n    df['wap2'] = calc_wap2(df)\n    # Calculate log returns\n    df['log_return1'] = df.groupby(['time_id'])['wap1'].apply(log_return)\n    df['log_return2'] = df.groupby(['time_id'])['wap2'].apply(log_return)\n    # Calculate wap balance\n    df['wap_balance'] = abs(df['wap1'] - df['wap2'])\n    # Calculate spread\n    df['price_spread'] = (df['ask_price1'] - df['bid_price1']) \/ ((df['ask_price1'] + df['bid_price1']) \/ 2)\n    df['bid_spread'] = df['bid_price1'] - df['bid_price2']\n    df['ask_spread'] = df['ask_price1'] - df['ask_price2']\n    df['total_volume'] = (df['ask_size1'] + df['ask_size2']) + (df['bid_size1'] + df['bid_size2'])\n    df['volume_imbalance'] = abs((df['ask_size1'] + df['ask_size2']) - (df['bid_size1'] + df['bid_size2']))\n    \n    # Dict for aggregations\n    create_feature_dict = {\n        'wap1': [np.sum, np.mean, np.std],\n        'wap2': [np.sum, np.mean, np.std],\n        'log_return1': [np.sum, realized_volatility, np.mean, np.std],\n        'log_return2': [np.sum, realized_volatility, np.mean, np.std],\n        'wap_balance': [np.sum, np.mean, np.std],\n        'price_spread':[np.sum, np.mean, np.std],\n        'bid_spread':[np.sum, np.mean, np.std],\n        'ask_spread':[np.sum, np.mean, np.std],\n        'total_volume':[np.sum, np.mean, np.std],\n        'volume_imbalance':[np.sum, np.mean, np.std]\n    }\n    \n    # Function to get group stats for different windows (seconds in bucket)\n    def get_stats_window(seconds_in_bucket, add_suffix = False):\n        # Group by the window\n        df_feature = df[df['seconds_in_bucket'] >= seconds_in_bucket].groupby(['time_id']).agg(create_feature_dict).reset_index()\n        # Rename columns joining suffix\n        df_feature.columns = ['_'.join(col) for col in df_feature.columns]\n        # Add a suffix to differentiate windows\n        if add_suffix:\n            df_feature = df_feature.add_suffix('_' + str(seconds_in_bucket))\n        return df_feature\n    \n    # Get the stats for different windows\n    df_feature = get_stats_window(seconds_in_bucket = 0, add_suffix = False)\n    df_feature_450 = get_stats_window(seconds_in_bucket = 450, add_suffix = True)\n    df_feature_300 = get_stats_window(seconds_in_bucket = 300, add_suffix = True)\n    df_feature_150 = get_stats_window(seconds_in_bucket = 150, add_suffix = True)\n    \n    # Merge all\n    df_feature = df_feature.merge(df_feature_450, how = 'left', left_on = 'time_id_', right_on = 'time_id__450')\n    df_feature = df_feature.merge(df_feature_300, how = 'left', left_on = 'time_id_', right_on = 'time_id__300')\n    df_feature = df_feature.merge(df_feature_150, how = 'left', left_on = 'time_id_', right_on = 'time_id__150')\n    # Drop unnecesary time_ids\n    df_feature.drop(['time_id__450', 'time_id__300', 'time_id__150'], axis = 1, inplace = True)\n    \n    # Create row_id so we can merge\n    stock_id = file_path.split('=')[1]\n    df_feature['row_id'] = df_feature['time_id_'].apply(lambda x: f'{stock_id}-{x}')\n    df_feature.drop(['time_id_'], axis = 1, inplace = True)\n    return df_feature\n\n# Function to preprocess trade data (for each stock id)\ndef trade_preprocessor(file_path):\n    df = pd.read_parquet(file_path)\n    df['log_return'] = df.groupby('time_id')['price'].apply(log_return)\n    \n    # Dict for aggregations\n    create_feature_dict = {\n        'log_return':[realized_volatility],\n        'seconds_in_bucket':[count_unique],\n        'size':[np.sum],\n        'order_count':[np.mean],\n    }\n    \n    # Function to get group stats for different windows (seconds in bucket)\n    def get_stats_window(seconds_in_bucket, add_suffix = False):\n        # Group by the window\n        df_feature = df[df['seconds_in_bucket'] >= seconds_in_bucket].groupby(['time_id']).agg(create_feature_dict).reset_index()\n        # Rename columns joining suffix\n        df_feature.columns = ['_'.join(col) for col in df_feature.columns]\n        # Add a suffix to differentiate windows\n        if add_suffix:\n            df_feature = df_feature.add_suffix('_' + str(seconds_in_bucket))\n        return df_feature\n    \n    # Get the stats for different windows\n    df_feature = get_stats_window(seconds_in_bucket = 0, add_suffix = False)\n    df_feature_450 = get_stats_window(seconds_in_bucket = 450, add_suffix = True)\n    df_feature_300 = get_stats_window(seconds_in_bucket = 300, add_suffix = True)\n    df_feature_150 = get_stats_window(seconds_in_bucket = 150, add_suffix = True)\n\n    # Merge all\n    df_feature = df_feature.merge(df_feature_450, how = 'left', left_on = 'time_id_', right_on = 'time_id__450')\n    df_feature = df_feature.merge(df_feature_300, how = 'left', left_on = 'time_id_', right_on = 'time_id__300')\n    df_feature = df_feature.merge(df_feature_150, how = 'left', left_on = 'time_id_', right_on = 'time_id__150')\n    # Drop unnecesary time_ids\n    df_feature.drop(['time_id__450', 'time_id__300', 'time_id__150'], axis = 1, inplace = True)\n    \n    df_feature = df_feature.add_prefix('trade_')\n    stock_id = file_path.split('=')[1]\n    df_feature['row_id'] = df_feature['trade_time_id_'].apply(lambda x:f'{stock_id}-{x}')\n    df_feature.drop(['trade_time_id_'], axis = 1, inplace = True)\n    return df_feature\n\n# Function to get group stats for the stock_id and time_id\ndef get_time_stock(df):\n    # Get realized volatility columns\n    vol_cols = ['log_return1_realized_volatility', 'log_return2_realized_volatility', 'log_return1_realized_volatility_450', 'log_return2_realized_volatility_450', \n                'log_return1_realized_volatility_300', 'log_return2_realized_volatility_300', 'log_return1_realized_volatility_150', 'log_return2_realized_volatility_150', \n                'trade_log_return_realized_volatility', 'trade_log_return_realized_volatility_450', 'trade_log_return_realized_volatility_300', 'trade_log_return_realized_volatility_150']\n\n    # Group by the stock id\n    df_stock_id = df.groupby(['stock_id'])[vol_cols].agg(['mean', 'std', 'max', 'min', ]).reset_index()\n    # Rename columns joining suffix\n    df_stock_id.columns = ['_'.join(col) for col in df_stock_id.columns]\n    df_stock_id = df_stock_id.add_suffix('_' + 'stock')\n\n    # Group by the stock id\n    df_time_id = df.groupby(['time_id'])[vol_cols].agg(['mean', 'std', 'max', 'min', ]).reset_index()\n    # Rename columns joining suffix\n    df_time_id.columns = ['_'.join(col) for col in df_time_id.columns]\n    df_time_id = df_time_id.add_suffix('_' + 'time')\n    \n    # Merge with original dataframe\n    df = df.merge(df_stock_id, how = 'left', left_on = ['stock_id'], right_on = ['stock_id__stock'])\n    df = df.merge(df_time_id, how = 'left', left_on = ['time_id'], right_on = ['time_id__time'])\n    df.drop(['stock_id__stock', 'time_id__time'], axis = 1, inplace = True)\n    return df\n    \n# Funtion to make preprocessing function in parallel (for each stock id)\ndef preprocessor(list_stock_ids, is_train = True):\n    \n    # Parrallel for loop\n    def for_joblib(stock_id):\n        # Train\n        if is_train:\n            file_path_book = data_dir + \"book_train.parquet\/stock_id=\" + str(stock_id)\n            file_path_trade = data_dir + \"trade_train.parquet\/stock_id=\" + str(stock_id)\n        # Test\n        else:\n            file_path_book = data_dir + \"book_test.parquet\/stock_id=\" + str(stock_id)\n            file_path_trade = data_dir + \"trade_test.parquet\/stock_id=\" + str(stock_id)\n    \n        # Preprocess book and trade data and merge them\n        df_tmp = pd.merge(book_preprocessor(file_path_book), trade_preprocessor(file_path_trade), on = 'row_id', how = 'left')\n        \n        # Return the merge dataframe\n        return df_tmp\n    \n    # Use parallel api to call paralle for loop\n    df = Parallel(n_jobs = -1, verbose = 1)(delayed(for_joblib)(stock_id) for stock_id in list_stock_ids)\n    # Concatenate all the dataframes that return from Parallel\n    df = pd.concat(df, ignore_index = True)\n    return df","a4d794c7":"for fold in range(5):\n    !cp -r ..\/input\/optiver-tabnet-50\/tabnet_model_test_{str(fold)}\/* .\n    !zip tabnet_model_test_{str(fold)}.zip model_params.json network.pt\n    \nmodelpath = [os.path.join(\".\/\",s) for s in os.listdir(\".\/\") if (\"zip\" in s)]    ","c50bd27b":"train = pd.read_pickle(\"..\/input\/optiver-lgbm-model\/lgbm_train.pkl\")  \n\nfor col in train.columns.to_list()[4:]:\n    train[col] = train[col].fillna(train[col].mean())\n    \nscales = train.drop(['row_id', 'target', 'time_id',\"stock_id\"], axis = 1).columns.to_list()    \n\nfrom sklearn.preprocessing import StandardScaler\nscaler = StandardScaler()\nscaler.fit(train[scales])\n\nle=LabelEncoder()\nle.fit(train[\"stock_id\"])","130f2eee":"# Read train and test\n_, test = read_train_test()\n\n# Get unique stock ids \ntest_stock_ids = test['stock_id'].unique()\n\n# Preprocess them using Parallel and our single stock id functions\ntest_ = preprocessor(test_stock_ids, is_train = False)\ntest = test.merge(test_, on = ['row_id'], how = 'left')\n\n# Get group stats of time_id and stock_id\ntest = get_time_stock(test)\n\n## fillna for test data ##\nfor col in train.columns.to_list()[4:]:\n    test[col] = test[col].fillna(train[col].mean())\n\nx_test = test.drop(['row_id', 'time_id',\"stock_id\"], axis = 1).values\n\n# Transform stock id to a numeric value\nx_test = scaler.transform(x_test)\nX_testdf = pd.DataFrame(x_test)\n\nX_testdf[\"stock_id\"]=test[\"stock_id\"]\n\n# Label encoding\nX_testdf[\"stock_id\"] = le.transform(X_testdf[\"stock_id\"])\n\nx_test = X_testdf.values","ab4eb67d":"tabnet_params = dict(\n    n_d = 32,\n    n_a = 32,\n    n_steps = 3,\n    gamma = 1.3,\n    lambda_sparse = 0,\n    optimizer_fn = optim.Adam,\n    optimizer_params = dict(lr = 1e-2, weight_decay = 1e-5),\n    mask_type = \"entmax\",\n    scheduler_params = dict(\n        mode = \"min\", patience = 5, min_lr = 1e-5, factor = 0.9),\n    scheduler_fn = ReduceLROnPlateau,\n    seed = 42,\n    #verbose = 5,\n    cat_dims=[len(le.classes_)], cat_emb_dim=[10], cat_idxs=[-1] # define categorical features\n)\n\nclf = TabNetRegressor(**tabnet_params)","6b529234":"preds=[]\nfor path in modelpath:\n    \n    clf.load_model(path)\n    preds.append(clf.predict(x_test).squeeze(-1))\n    \nmodel1_predictions = np.mean(preds,axis=0)","a2a300fb":"import gc\nimport joblib","d9ef4e68":"MODEL_DIR = '..\/input\/optiver-lgbm-model\/'\n\ntrain = pd.read_pickle(MODEL_DIR + 'lgbm_train.pkl')\n\ntrain.shape","300b5c3c":"# Function to read our base train and test set\ndef read_test():\n    test = pd.read_csv('..\/input\/optiver-realized-volatility-prediction\/test.csv')\n    \n    # Create a key to merge with book and trade data\n    test['row_id'] = test['stock_id'].astype(str) + '-' + test['time_id'].astype(str)\n    \n    return test\n\n# Read test\ntest = read_test()\n\n# Get unique stock ids \ntest_stock_ids = test['stock_id'].unique()\n\n# Preprocess them using Parallel and our single stock id functions\ntest_ = preprocessor(test_stock_ids, is_train = False)\ntest = test.merge(test_, on = ['row_id'], how = 'left')\ntest = get_time_stock(test)","bae156a7":"# Function to calculate the root mean squared percentage error\ndef rmspe(y_true, y_pred):\n    return np.sqrt(np.mean(np.square((y_true - y_pred) \/ y_true)))\n\ndef evaluate(train, test):\n    \n    # Split features and target\n    x = train.drop(['row_id', 'target', 'time_id'], axis = 1)\n    y = train['target']\n    x_test = test.drop(['row_id', 'time_id'], axis = 1)\n    \n    # Transform stock id to a numeric value\n    x['stock_id'] = x['stock_id'].astype(int)\n    x_test['stock_id'] = x_test['stock_id'].astype(int)\n    \n    # Create out of folds array\n    oof_predictions = np.zeros(x.shape[0])\n    \n    # Create test array to store predictions\n    test_predictions = np.zeros(x_test.shape[0])\n    \n    SEEDS = [42, 66]\n    \n    TEST_PREDICTIONS = np.zeros(x_test.shape[0])\n    \n    for seed in SEEDS:\n        \n        # Create out of folds array\n        oof_predictions = np.zeros(x.shape[0])\n\n        # Create test array to store predictions\n        test_predictions = np.zeros(x_test.shape[0])  \n        \n        num_folds = 5\n        \n        # Create a KFold object\n        kfold = KFold(n_splits = num_folds, random_state = 66, shuffle = True)\n    \n        # Iterate through each fold\n        for fold, (trn_ind, val_ind) in enumerate(kfold.split(x)):\n            \n            print(f'Evaluating_seed_{seed}_fold_{fold + 1}')\n            \n            x_train, x_val = x.iloc[trn_ind], x.iloc[val_ind]\n            y_train, y_val = y.iloc[trn_ind], y.iloc[val_ind]\n\n            model = joblib.load(MODEL_DIR + f'lgbm_seed_{seed}_model_{fold+1}.pkl')\n\n            # Add predictions to the out of folds array\n            oof_predictions[val_ind] = model.predict(x_val)\n\n            # Predict the test set\n            test_predictions += model.predict(x_test) \/ num_folds\n\n            del model\n            gc.collect()\n\n        rmspe_score = rmspe(y, oof_predictions)\n        print(f'\\nOur out of folds RMSPE for seed {seed} is {rmspe_score}\\n')\n        \n        TEST_PREDICTIONS += test_predictions \/ len(SEEDS)\n        \n    # Return test predictions\n    return TEST_PREDICTIONS","55ac78bb":"# Traing and evaluate\nmodel2_predictions = evaluate(train, test)","090eea9f":"import pandas as pd\nfrom catboost import Pool, CatBoostRegressor","eeed80ad":"DATA_DIR = '..\/input\/optiver-lgbm-model\/'\nMODEL_DIR = '..\/input\/optiver-cb\/'\n\ntrain = pd.read_pickle(DATA_DIR + 'lgbm_train.pkl')\n\n# Function to read our base train and test set\ndef read_test():\n    test = pd.read_csv('..\/input\/optiver-realized-volatility-prediction\/test.csv')\n    \n    # Create a key to merge with book and trade data\n    test['row_id'] = test['stock_id'].astype(str) + '-' + test['time_id'].astype(str)\n    \n    return test\n\n# Read test\ntest = read_test()\n\n# Get unique stock ids \ntest_stock_ids = test['stock_id'].unique()\n\n# Preprocess them using Parallel and our single stock id functions\ntest_ = preprocessor(test_stock_ids, is_train = False)\ntest = test.merge(test_, on = ['row_id'], how = 'left')\ntest = get_time_stock(test)","bb3122d1":"# Function to calculate the root mean squared percentage error\ndef rmspe(y_true, y_pred):\n    return np.sqrt(np.mean(np.square((y_true - y_pred) \/ y_true)))\n\ndef evaluate(train, test):\n    \n    # Split features and target\n    x = train.drop(['row_id', 'target', 'time_id'], axis = 1)\n    y = train['target']\n    x_test = test.drop(['row_id', 'time_id'], axis = 1)\n    \n    # Transform stock id to a numeric value\n    x['stock_id'] = x['stock_id'].astype(int)\n    x_test['stock_id'] = x_test['stock_id'].astype(int)\n    \n    # Create out of folds array\n    oof_predictions = np.zeros(x.shape[0])\n    \n    # Create test array to store predictions\n    test_predictions = np.zeros(x_test.shape[0])\n    \n    SEEDS = [42]\n    \n    TEST_PREDICTIONS = np.zeros(x_test.shape[0])\n    \n    for seed in SEEDS:\n        \n        # Create out of folds array\n        oof_predictions = np.zeros(x.shape[0])\n\n        # Create test array to store predictions\n        test_predictions = np.zeros(x_test.shape[0])  \n        \n        num_folds = 5\n        \n        # Create a KFold object\n        kfold = KFold(n_splits = num_folds, random_state = 66, shuffle = True)\n    \n        # Iterate through each fold\n        for fold, (trn_ind, val_ind) in enumerate(kfold.split(x)):\n            \n            print(f'Evaluating_seed_{seed}_fold_{fold + 1}')\n            \n            x_train, x_val = x.iloc[trn_ind], x.iloc[val_ind]\n            y_train, y_val = y.iloc[trn_ind], y.iloc[val_ind]\n            \n            # Root mean squared percentage error weights\n            train_pool = Pool(x_train, y_train)\n            val_pool = Pool(x_val, y_val)\n            test_pool = Pool(x_test) \n\n            model = joblib.load(MODEL_DIR + f'cb_model_{fold+1}.pkl')\n\n            # Add predictions to the out of folds array\n            oof_predictions[val_ind] = model.predict(val_pool)\n\n            # Predict the test set\n            test_predictions += model.predict(test_pool) \/ num_folds\n\n            del model\n            gc.collect()\n\n        rmspe_score = rmspe(y, oof_predictions)\n        print(f'\\nOur out of folds RMSPE for seed {seed} is {rmspe_score}\\n')\n        \n        TEST_PREDICTIONS += test_predictions \/ len(SEEDS)\n        \n    # Return test predictions\n    return TEST_PREDICTIONS","e2076998":"# Traing and evaluate\nmodel3_predictions = evaluate(train, test)","83d52a68":"pd.DataFrame(np.vstack((model1_predictions, model2_predictions, model3_predictions)).transpose(), columns=['model1','model2','model3'])","af965c6e":"final_predictions = model1_predictions * 0.5 + model2_predictions * 0.3 + model3_predictions * 0.2\nsubmit = pd.read_csv('..\/input\/optiver-realized-volatility-prediction\/sample_submission.csv')\n\nsubmit.target = final_predictions\nsubmit","e4335ef3":"submit.to_csv('submission.csv',index = False)","88fb0ea5":"## Model 3: Catboost","e8f78d5a":"## Model 2: LGBM","cdabba47":"## Model 1: TabNet"}}