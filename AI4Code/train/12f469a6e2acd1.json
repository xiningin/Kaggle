{"cell_type":{"3095f77a":"code","2f474c78":"code","cc594fa8":"code","e2160ebd":"code","661d312e":"code","a9d3d0ad":"code","b99c1472":"code","a831fd98":"code","6d015aeb":"code","3ed31a0c":"code","87e5c594":"code","292ba3e1":"code","7eb2597d":"code","b0d2a378":"code","f69ff5cf":"code","36d76814":"code","86334ab0":"code","915fe1a6":"code","2f5b8f80":"code","1ea22f76":"code","af3b12de":"code","e0d2fd92":"code","ffbe34cf":"markdown","f2d74693":"markdown","57e9839c":"markdown","dc1d9f83":"markdown"},"source":{"3095f77a":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","2f474c78":"train = pd.read_csv('..\/input\/covid19-global-forecasting-week-5\/train.csv').fillna('-')\ntempTrain = pd.read_csv('..\/input\/covid19-global-forecasting-week-5\/train.csv').fillna('-')\ntempTest = pd.read_csv('..\/input\/covid19-global-forecasting-week-5\/test.csv').fillna('-')\nsubmission = pd.read_csv('..\/input\/covid19-global-forecasting-week-5\/submission.csv').fillna('-')","cc594fa8":"import seaborn as sns\nfrom scipy import stats\nimport matplotlib.pyplot as plt\nimport plotly.express as px # install plotly\nfrom datetime import datetime\n%matplotlib inline","e2160ebd":"# change matplotlib.pyplot to plotly.express because text overlap can't read\ndef drawPie(dataFrame, indexValue, label, title=\"Default\"):\n    fig = px.pie(train, values=indexValue, names=label, title=title)\n    fig.update_traces(textposition='inside')\n    fig.show()","661d312e":"# Get Top 15 Country \ngetTopList = 15\ngrouped_multiple = train.groupby(['Country_Region'], as_index=False)['TargetValue'].sum()\ncountryTop = grouped_multiple.nlargest(getTopList, 'TargetValue')['Country_Region']\nnewList = train[train['Country_Region'].isin(countryTop.values)]\nline = newList.groupby(['Date', 'Country_Region'], as_index=False)['TargetValue'].sum()\nline = line[line['TargetValue'] >= 0]","a9d3d0ad":"line.pivot(index=\"Date\", columns=\"Country_Region\", values=\"TargetValue\").plot(figsize=(10,5))\nplt.grid(zorder=0)\nplt.title('Top ' + str(getTopList) +' ConfirmedCases & Fatalities', fontsize=18, pad=10)\nplt.ylabel('People')\nplt.xlabel('Date')\nplt.legend(loc='center left', bbox_to_anchor=(1.0, 0.5))\nplt.show()","b99c1472":"drawPie(train, 'TargetValue', 'Target', 'Summary ConfirmedCases & Fatalities')","a831fd98":"drawPie(train, 'TargetValue', 'Country_Region', 'Percent Target ConfirmedCases & Fatalities')","6d015aeb":"# Check Relationships\nsns.pairplot(train)","3ed31a0c":"# Convert string to Date\nredate = pd.to_datetime(tempTrain['Date'], errors='coerce')\ntempTrain['Date']= redate.dt.strftime(\"%Y%m%d\").astype(int)","87e5c594":"targets = train['Target'].unique()\nfor index in range(0, len(targets)):\n    tempTrain['Target'].replace(targets[index], index, inplace=True)","292ba3e1":"# Get features\nfeature_cols = ['Population', 'Weight', 'Date', 'Target']\nX = tempTrain[feature_cols] # Features\ny = tempTrain['TargetValue'] # Target variable","7eb2597d":"from sklearn.ensemble import RandomForestRegressor\nfrom sklearn.model_selection import train_test_split\n\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=5)\n\n# Change n_estimators = 50 because give score > .9\nmodel = RandomForestRegressor(n_jobs=-1, n_estimators = 50)\n# Fit on training data\nmodel.fit(X_train, y_train)","b0d2a378":"# Score\nscore = model.score(X_test, y_test)\nprint(\"Score: \"+ str(score))","f69ff5cf":"# Convert string to Date\nredate = pd.to_datetime(tempTest['Date'], errors='coerce')\ntempTest['Date']= redate.dt.strftime(\"%Y%m%d\").astype(int)","36d76814":"for index in range(0, len(targets)):\n    tempTest['Target'].replace(targets[index], index, inplace=True)","86334ab0":"# Get features\nfeatureCols = ['Population', 'Weight', 'Date', 'Target']\ntestData = tempTest[featureCols]","915fe1a6":"# predictions\npredic = model.predict(testData)","2f5b8f80":"# Set Format\nlistPrediction = [int(x) for x in predic]\nnewDF = pd.DataFrame({'number': testData.index, 'Population': testData['Population'], 'val': listPrediction})","1ea22f76":"Q05 = newDF.groupby('number')['val'].quantile(q=0.05).reset_index()\nQ50 = newDF.groupby('number')['val'].quantile(q=0.5).reset_index()\nQ95 = newDF.groupby('number')['val'].quantile(q=0.95).reset_index()\n\nQ05.columns=['number','0.05']\nQ50.columns=['number','0.5']\nQ95.columns=['number','0.95']","af3b12de":"concatDF = pd.concat([Q05,Q50['0.5'],Q95['0.95']],1)\nconcatDF['number'] = concatDF['number'] + 1\nconcatDF.head(10)","e0d2fd92":"sub = pd.melt(concatDF, id_vars=['number'], value_vars=['0.05','0.5','0.95'])\nsub['ForecastId_Quantile']=sub['number'].astype(str)+'_'+sub['variable']\nsub['TargetValue']=sub['value']\nsub=sub[['ForecastId_Quantile','TargetValue']]\nsub.reset_index(drop=True,inplace=True)\nsub.to_csv(\"submission.csv\",index=False)\nsub.head(10)","ffbe34cf":"# Prediction\n","f2d74693":"# Create Model RandomForestRegressor","57e9839c":"# LoadData","dc1d9f83":"# import Lib"}}