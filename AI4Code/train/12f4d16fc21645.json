{"cell_type":{"de6c8b42":"code","62fc3b59":"code","df18ec8c":"code","604c6a09":"code","ad438358":"code","c54097e4":"code","f055228a":"code","e07d289b":"code","a9431e16":"code","836ec349":"code","00e427fc":"code","cfa4f24c":"code","8a1e679e":"code","81c2e924":"code","1e41c056":"code","de449b9a":"code","fa346c68":"code","3110bda3":"code","0545b2ed":"code","01453ed7":"code","c5093f09":"code","7c88197e":"code","7cc58bfe":"code","a082ef78":"code","50637dfb":"code","5fe51b30":"code","37069ea7":"code","f00baaed":"markdown","d3a7fb07":"markdown","8006e23b":"markdown","af79a9d9":"markdown","98908b22":"markdown","d3227318":"markdown","b0fe1b49":"markdown","1b4b252b":"markdown","a598989d":"markdown","f58aa94d":"markdown","05f35476":"markdown","da3e97b8":"markdown","ae2a8b7e":"markdown","cd934209":"markdown","91bfe818":"markdown","1b8d4bdd":"markdown","26e94af0":"markdown","a230ff1c":"markdown","745f35e8":"markdown","54f08c63":"markdown","1161ac7a":"markdown","b36c8c42":"markdown"},"source":{"de6c8b42":"import pandas as pd\nimport numpy as np\nimport random\n\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\nimport plotly.graph_objects as go\nimport plotly.express as px\nfrom plotly.subplots import make_subplots\n\ncolorarr = ['#0592D0','#Cd7f32', '#E97451', '#Bdb76b', '#954535', '#C2b280', '#808000','#C2b280', '#E4d008', '#9acd32', '#Eedc82', '#E4d96f',\n           '#32cd32','#39ff14','#00ff7f', '#008080', '#36454f', '#F88379', '#Ff4500', '#Ffb347', '#A94064', '#E75480', '#Ffb6c1', '#E5e4e2',\n           '#Faf0e6', '#8c92ac', '#Dbd7d2','#A7a6ba', '#B38b6d']","62fc3b59":"cropdf = pd.read_csv(\"..\/input\/crop-recommendation-dataset\/Crop_recommendation.csv\")\ncropdf.head()","df18ec8c":"cropdf.shape","604c6a09":"cropdf.columns","ad438358":"cropdf.isnull().any()","c54097e4":"print(\"Number of various crops: \", len(cropdf['label'].unique()))\nprint(\"List of crops: \", cropdf['label'].unique())","f055228a":"cropdf['label'].value_counts()","e07d289b":"crop_summary = pd.pivot_table(cropdf,index=['label'],aggfunc='mean')\ncrop_summary.head()","a9431e16":"crop_summary_N = crop_summary.sort_values(by='N', ascending=False)\n  \nfig = make_subplots(rows=1, cols=2)\n\ntop = {\n    'y' : crop_summary_N['N'][0:10].sort_values().index,\n    'x' : crop_summary_N['N'][0:10].sort_values()\n}\n\nlast = {\n    'y' : crop_summary_N['N'][-10:].index,\n    'x' : crop_summary_N['N'][-10:]\n}\n\nfig.add_trace(\n    go.Bar(top,\n           name=\"Most nitrogen required\",\n           marker_color=random.choice(colorarr),\n           orientation='h',\n          text=top['x']),\n    \n    row=1, col=1\n)\n\nfig.add_trace(\n    go.Bar(last,\n           name=\"Least nitrogen required\",\n           marker_color=random.choice(colorarr),\n           orientation='h',\n          text=last['x']),\n    row=1, col=2\n)\nfig.update_traces(texttemplate='%{text}', textposition='inside')\nfig.update_layout(title_text=\"Nitrogen (N)\",\n                  plot_bgcolor='white',\n                  font_size=12, \n                  font_color='black',\n                 height=500)\n\nfig.update_xaxes(showgrid=False)\nfig.update_yaxes(showgrid=False)\nfig.show()\n","836ec349":"crop_summary_P = crop_summary.sort_values(by='P', ascending=False)\n  \nfig = make_subplots(rows=1, cols=2)\n\ntop = {\n    'y' : crop_summary_P['P'][0:10].sort_values().index,\n    'x' : crop_summary_P['P'][0:10].sort_values()\n}\n\nlast = {\n    'y' : crop_summary_P['P'][-10:].index,\n    'x' : crop_summary_P['P'][-10:]\n}\n\nfig.add_trace(\n    go.Bar(top,\n           name=\"Most phosphorus required\",\n           marker_color=random.choice(colorarr),\n           orientation='h',\n          text=top['x']),\n    \n    row=1, col=1\n)\n\nfig.add_trace(\n    go.Bar(last,\n           name=\"Least phosphorus required\",\n           marker_color=random.choice(colorarr),\n           orientation='h',\n          text=last['x']),\n    row=1, col=2\n)\nfig.update_traces(texttemplate='%{text}', textposition='inside')\nfig.update_layout(title_text=\"Phosphorus (P)\",\n                  plot_bgcolor='white',\n                  font_size=12, \n                  font_color='black',\n                 height=500)\n\nfig.update_xaxes(showgrid=False)\nfig.update_yaxes(showgrid=False)\nfig.show()\n","00e427fc":"crop_summary_K = crop_summary.sort_values(by='K', ascending=False)\n  \nfig = make_subplots(rows=1, cols=2)\n\ntop = {\n    'y' : crop_summary_K['K'][0:10].sort_values().index,\n    'x' : crop_summary_K['K'][0:10].sort_values()\n}\n\nlast = {\n    'y' : crop_summary_K['K'][-10:].index,\n    'x' : crop_summary_K['K'][-10:]\n}\n\nfig.add_trace(\n    go.Bar(top,\n           name=\"Most potassium required\",\n           marker_color=random.choice(colorarr),\n           orientation='h',\n          text=top['x']),\n    \n    row=1, col=1\n)\n\nfig.add_trace(\n    go.Bar(last,\n           name=\"Least potassium required\",\n           marker_color=random.choice(colorarr),\n           orientation='h',\n          text=last['x']),\n    row=1, col=2\n)\nfig.update_traces(texttemplate='%{text}', textposition='inside')\nfig.update_layout(title_text=\"Potassium (K)\",\n                  plot_bgcolor='white',\n                  font_size=12, \n                  font_color='black',\n                 height=500)\n\nfig.update_xaxes(showgrid=False)\nfig.update_yaxes(showgrid=False)\nfig.show()\n","cfa4f24c":"fig = go.Figure()\nfig.add_trace(go.Bar(\n    x=crop_summary.index,\n    y=crop_summary['N'],\n    name='Nitrogen',\n    marker_color='indianred'\n))\nfig.add_trace(go.Bar(\n    x=crop_summary.index,\n    y=crop_summary['P'],\n    name='Phosphorous',\n    marker_color='lightsalmon'\n))\nfig.add_trace(go.Bar(\n    x=crop_summary.index,\n    y=crop_summary['K'],\n    name='Potash',\n    marker_color='crimson'\n))\n\nfig.update_layout(title=\"N, P, K values comparision between crops\",\n                  plot_bgcolor='white',\n                  barmode='group',\n                  xaxis_tickangle=-45)\n\nfig.show()","8a1e679e":"labels = ['Nitrogen(N)','Phosphorous(P)','Potash(K)']\nfig = make_subplots(rows=1, cols=5, specs=[[{'type':'domain'}, {'type':'domain'},\n                                            {'type':'domain'}, {'type':'domain'}, \n                                            {'type':'domain'}]])\n\nrice_npk = crop_summary[crop_summary.index=='rice']\nvalues = [rice_npk['N'][0], rice_npk['P'][0], rice_npk['K'][0]]\nfig.add_trace(go.Pie(labels=labels, values=values,name=\"Rice\"),1, 1)\n\ncotton_npk = crop_summary[crop_summary.index=='cotton']\nvalues = [cotton_npk['N'][0], cotton_npk['P'][0], cotton_npk['K'][0]]\nfig.add_trace(go.Pie(labels=labels, values=values,name=\"Cotton\"),1, 2)\n\njute_npk = crop_summary[crop_summary.index=='jute']\nvalues = [jute_npk['N'][0], jute_npk['P'][0], jute_npk['K'][0]]\nfig.add_trace(go.Pie(labels=labels, values=values,name=\"Jute\"),1, 3)\n\nmaize_npk = crop_summary[crop_summary.index=='maize']\nvalues = [maize_npk['N'][0], maize_npk['P'][0], maize_npk['K'][0]]\nfig.add_trace(go.Pie(labels=labels, values=values,name=\"Maize\"),1, 4)\n\nlentil_npk = crop_summary[crop_summary.index=='lentil']\nvalues = [lentil_npk['N'][0], lentil_npk['P'][0], lentil_npk['K'][0]]\nfig.add_trace(go.Pie(labels=labels, values=values,name=\"Lentil\"),1, 5)\n\nfig.update_traces(hole=.4, hoverinfo=\"label+percent+name\")\nfig.update_layout(\n    title_text=\"NPK ratio for rice, cotton, jute, maize, lentil\",\n    annotations=[dict(text='Rice',x=0.06,y=0.8, font_size=15, showarrow=False),\n                 dict(text='Cotton',x=0.26,y=0.8, font_size=15, showarrow=False),\n                 dict(text='Jute',x=0.50,y=0.8, font_size=15, showarrow=False),\n                 dict(text='Maize',x=0.74,y=0.8, font_size=15, showarrow=False),\n                dict(text='Lentil',x=0.94,y=0.8, font_size=15, showarrow=False)])\nfig.show()\n","81c2e924":"labels = ['Nitrogen(N)','Phosphorous(P)','Potash(K)']\nspecs = [[{'type':'domain'}, {'type':'domain'}, {'type':'domain'}, {'type':'domain'}, {'type':'domain'}],[\n         {'type':'domain'}, {'type':'domain'}, {'type':'domain'}, {'type':'domain'}, {'type':'domain'}]]\nfig = make_subplots(rows=2, cols=5, specs=specs)\ncafe_colors =  ['rgb(255, 128, 0)', 'rgb(0, 153, 204)', 'rgb(173, 173, 133)']\n\napple_npk = crop_summary[crop_summary.index=='apple']\nvalues = [apple_npk['N'][0], apple_npk['P'][0], apple_npk['K'][0]]\nfig.add_trace(go.Pie(labels=labels, values=values,name=\"Apple\", marker_colors=cafe_colors),1, 1)\n\nbanana_npk = crop_summary[crop_summary.index=='banana']\nvalues = [banana_npk['N'][0], banana_npk['P'][0], banana_npk['K'][0]]\nfig.add_trace(go.Pie(labels=labels, values=values,name=\"Banana\", marker_colors=cafe_colors),1, 2)\n\ngrapes_npk = crop_summary[crop_summary.index=='grapes']\nvalues = [grapes_npk['N'][0], grapes_npk['P'][0], grapes_npk['K'][0]]\nfig.add_trace(go.Pie(labels=labels, values=values,name=\"Grapes\", marker_colors=cafe_colors),1, 3)\n\norange_npk = crop_summary[crop_summary.index=='orange']\nvalues = [orange_npk['N'][0], orange_npk['P'][0], orange_npk['K'][0]]\nfig.add_trace(go.Pie(labels=labels, values=values,name=\"Orange\", marker_colors=cafe_colors),1, 4)\n\nmango_npk = crop_summary[crop_summary.index=='mango']\nvalues = [mango_npk['N'][0], mango_npk['P'][0], mango_npk['K'][0]]\nfig.add_trace(go.Pie(labels=labels, values=values,name=\"Mango\", marker_colors=cafe_colors),1, 5)\n\ncoconut_npk = crop_summary[crop_summary.index=='coconut']\nvalues = [coconut_npk['N'][0], coconut_npk['P'][0], coconut_npk['K'][0]]\nfig.add_trace(go.Pie(labels=labels, values=values,name=\"Coconut\", marker_colors=cafe_colors),2, 1)\n\npapaya_npk = crop_summary[crop_summary.index=='papaya']\nvalues = [papaya_npk['N'][0], papaya_npk['P'][0], papaya_npk['K'][0]]\nfig.add_trace(go.Pie(labels=labels, values=values,name=\"Papaya\", marker_colors=cafe_colors),2, 2)\n\npomegranate_npk = crop_summary[crop_summary.index=='pomegranate']\nvalues = [pomegranate_npk['N'][0], pomegranate_npk['P'][0], pomegranate_npk['K'][0]]\nfig.add_trace(go.Pie(labels=labels, values=values,name=\"Pomegranate\", marker_colors=cafe_colors),2, 3)\n\nwatermelon_npk = crop_summary[crop_summary.index=='watermelon']\nvalues = [watermelon_npk['N'][0], watermelon_npk['P'][0], watermelon_npk['K'][0]]\nfig.add_trace(go.Pie(labels=labels, values=values,name=\"Watermelon\", marker_colors=cafe_colors),2, 4)\n\nmuskmelon_npk = crop_summary[crop_summary.index=='muskmelon']\nvalues = [muskmelon_npk['N'][0], muskmelon_npk['P'][0], muskmelon_npk['K'][0]]\nfig.add_trace(go.Pie(labels=labels, values=values,name=\"Muskmelon\", marker_colors=cafe_colors),2, 5)\n\nfig.update_layout(\n    title_text=\"NPK ratio for fruits\",\n    annotations=[dict(text='Apple',x=0.06,y=1.08, font_size=15, showarrow=False),\n                 dict(text='Banana',x=0.26,y=1.08, font_size=15, showarrow=False),\n                 dict(text='Grapes',x=0.50,y=1.08, font_size=15, showarrow=False),\n                 dict(text='Orange',x=0.74,y=1.08, font_size=15, showarrow=False),\n                dict(text='Mango',x=0.94,y=1.08, font_size=15, showarrow=False),\n                dict(text='Coconut',x=0.06,y=0.46, font_size=15, showarrow=False),\n                 dict(text='Papaya',x=0.26,y=0.46, font_size=15, showarrow=False),\n                 dict(text='Pomegranate',x=0.50,y=0.46, font_size=15, showarrow=False),\n                 dict(text='Watermelon',x=0.74,y=0.46, font_size=15, showarrow=False),\n                dict(text='Muskmelon',x=0.94,y=0.46, font_size=15, showarrow=False)])\nfig.show()\n","1e41c056":"crop_scatter = cropdf[(cropdf['label']=='rice') | \n                      (cropdf['label']=='jute') | \n                      (cropdf['label']=='cotton') |\n                     (cropdf['label']=='maize') |\n                     (cropdf['label']=='lentil')]\n\nfig = px.scatter(crop_scatter, x=\"temperature\", y=\"humidity\", color=\"label\", symbol=\"label\")\nfig.update_layout(plot_bgcolor='white')\nfig.update_xaxes(showgrid=False)\nfig.update_yaxes(showgrid=False)\n\nfig.show()","de449b9a":"fig = px.bar(crop_summary, x=crop_summary.index, y=[\"rainfall\", \"temperature\", \"humidity\"])\nfig.update_layout(title_text=\"Comparision between rainfall, temerature and humidity\",\n                  plot_bgcolor='white',\n                 height=500)\n\nfig.update_xaxes(showgrid=False)\nfig.update_yaxes(showgrid=False)\nfig.show()","fa346c68":"fig, ax = plt.subplots(1, 1, figsize=(15, 9))\nsns.heatmap(cropdf.corr(), annot=True,cmap='Wistia' )\nax.set(xlabel='features')\nax.set(ylabel='features')\n\nplt.title('Correlation between different features', fontsize = 15, c='black')\nplt.show()","3110bda3":"X = cropdf.drop('label', axis=1)\ny = cropdf['label']","0545b2ed":"from sklearn.model_selection import train_test_split\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.3,\n                                                    shuffle = True, random_state = 0)","01453ed7":"# build the lightgbm model\nimport lightgbm as lgb\n\nmodel = lgb.LGBMClassifier()\nmodel.fit(X_train, y_train)","c5093f09":"# predict the results\ny_pred=model.predict(X_test)","7c88197e":"# view accuracy\nfrom sklearn.metrics import accuracy_score\n\naccuracy=accuracy_score(y_pred, y_test)\nprint('LightGBM Model accuracy score: {0:0.4f}'.format(accuracy_score(y_test, y_pred)))","7cc58bfe":"y_pred_train = model.predict(X_train)\nprint('Training-set accuracy score: {0:0.4f}'. format(accuracy_score(y_train, y_pred_train)))","a082ef78":"# print the scores on training and test set\n\nprint('Training set score: {:.4f}'.format(model.score(X_train, y_train)))\nprint('Test set score: {:.4f}'.format(model.score(X_test, y_test)))","50637dfb":"# view confusion-matrix\n# Print the Confusion Matrix and slice it into four pieces\n\nfrom sklearn.metrics import confusion_matrix\ncm = confusion_matrix(y_test, y_pred)\n\nplt.figure(figsize=(15,15))\nsns.heatmap(cm, annot=True, fmt=\".0f\", linewidths=.5, square = True, cmap = 'Blues');\nplt.ylabel('Actual label');\nplt.xlabel('Predicted label');\nall_sample_title = 'Confusion Matrix - score:'+str(accuracy_score(y_test,y_pred))\nplt.title(all_sample_title, size = 15);\nplt.show()","5fe51b30":"from sklearn.metrics import classification_report\nprint(classification_report(y_test, y_pred))","37069ea7":"newdata=model.predict([[90, 42, 43, 20.879744, 75, 5.5,220]])\nnewdata","f00baaed":"<h1 style='color:blue'>Import dataset<\/h1>","d3a7fb07":"<h1 style='color:blue'>LightGBM Model Building and Training<\/h1>","8006e23b":"<h1 style='color:blue'>Declare independent and target variables<\/h1>","af79a9d9":"<h1 style='color:blue'>Confusion-matrix<\/h1>","98908b22":"<h1 style='color:blue'>View Accuracy<\/h1>","d3227318":"<h1 style='color:blue'>Import libraries<\/h1>","b0fe1b49":"<h1 style='color:blue'>Classification Metrices<\/h1>","1b4b252b":"<h1 style='color:blue'>Check Null and NA values<\/h1>","a598989d":"<h1 style='color:blue'>Model Prediction<\/h1>","f58aa94d":"<h1 style='color:blue'>Split dataset into training and test set<\/h1>","05f35476":"<h1 style='color:blue'>List of various crops<\/h1>","da3e97b8":"<h3 style='color:Red'>NPK ratio for fruits<\/h3>","ae2a8b7e":"<h3 style='color:Red'>NPK ratio for rice, cotton, jute, maize, lentil <\/h3>","cd934209":"<h3 style='color:red'>Phosphorus Analysis<\/h3>","91bfe818":"### Data fields\n\nN - ratio of Nitrogen content in soil -  kg\/ha<br>\nP - ratio of Phosphorous content in soil - kg\/ha  <br>\nK - ratio of Potassium content in soil - kg\/ha  <br>\ntemperature - temperature in degree Celsius <br>\nhumidity - relative humidity in % <br>\nph - ph value of the soil <br>\nrainfall - rainfall in mm <br>","1b8d4bdd":"<h3 style='color:Red'>Correlation between different features <\/h3>","26e94af0":"<h3 style='color:red'>Nitrogen Analysis<\/h3>","a230ff1c":"<h3 style='color:Red'>N, P, K values comparision between crops<\/h3>","745f35e8":"<h1 style='color:blue'>Compare train and test set accuracy<\/h1>","54f08c63":"<h1 style='color:blue'>Check for Overfitting<\/h1>","1161ac7a":"<h1 style='color:blue'>Data Visualization and analysis<\/h1>","b36c8c42":"<h3 style='color:Red'>Potassium analysis<\/h3>"}}