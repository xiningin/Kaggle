{"cell_type":{"a000f299":"code","5778c8de":"code","f540d552":"code","031c6a8c":"code","7598756c":"code","81d544a6":"code","d1c4f03a":"code","0b6dd642":"code","858a6d24":"code","f3c8c0e6":"code","08518262":"code","00eaf890":"code","af6f272d":"code","bdc047b1":"code","49056dba":"code","c5188120":"code","ee52a27d":"code","e971b1c9":"code","68958f49":"code","640f9289":"code","0ed738a3":"code","7ba4e8b5":"code","8ad5e2b8":"code","dec74531":"code","3c44d629":"code","5e57e9c7":"code","32ad18ff":"code","99c3f054":"code","4f77ca2b":"code","41751120":"code","e31a4924":"code","1f3f1239":"code","9d08e268":"code","8e3f2232":"code","333c60c9":"code","cf9e6d1c":"code","3f7f6972":"code","b9c75399":"code","4fe63593":"code","918c772e":"code","cdb648fc":"code","7bc584e4":"code","1c2d0504":"code","c1ae37ce":"code","5f4c9b2b":"code","2c39f12a":"code","a93ad2e0":"code","865daded":"code","7cbac620":"code","0d086f4d":"code","a8470c5d":"code","8c2dc752":"code","88e2c07a":"code","827b82c2":"code","5dd26bcd":"code","96c02d9e":"code","5f47049c":"code","a63e57a8":"code","e0087a4b":"code","9d15f998":"code","840a8b48":"code","6ccb926a":"code","f05c1bcb":"code","cf577cd5":"code","459fd835":"code","3ad588a1":"code","127e4494":"code","77295901":"code","5d3c3246":"code","8ed0c3ee":"code","e287fbe1":"code","6ca09fa4":"code","315b4910":"code","ad96457b":"code","3ab840b9":"code","f4780473":"code","56683286":"code","c1dc1c09":"code","faebc4d2":"code","2065f7c3":"code","7cb4cc1a":"code","94684a17":"code","c0125d10":"code","0209f128":"code","dccb8740":"code","544ad773":"code","1357d8ee":"code","c6644cc4":"code","edb1d6aa":"markdown","e182ccfa":"markdown","ab25dbc2":"markdown","7f52c7e4":"markdown","6a4936e0":"markdown","bb42bde2":"markdown","cc8865db":"markdown","0bf4adc3":"markdown","3171177a":"markdown","63cde7bd":"markdown","628f0a95":"markdown","32150c91":"markdown","08dafb37":"markdown","08dddfa6":"markdown","3999bfbc":"markdown","fe2d896d":"markdown","793e0af0":"markdown","950b72be":"markdown","227f7785":"markdown","32322bb4":"markdown","048edec3":"markdown","19930c7a":"markdown","c29d4acc":"markdown","e65c19fa":"markdown","a1bcf64c":"markdown","e030a220":"markdown","542bf9d7":"markdown","b5976b5a":"markdown","074fd5dc":"markdown","87bb2fff":"markdown","0fa5e846":"markdown","29a60fc9":"markdown","7a5eebca":"markdown","254ee089":"markdown","61d270d3":"markdown","7db145a8":"markdown","4ced7eea":"markdown","e7ab64fb":"markdown","cefad290":"markdown","c33f1c07":"markdown"},"source":{"a000f299":"# import the basic libraries we will use in this kernel\nimport os\nimport numpy as np\nimport pandas as pd\nimport pickle\n\nimport time\nimport datetime\nfrom datetime import datetime\nimport calendar\n\nfrom sklearn import metrics\nfrom math import sqrt\nimport gc\n\nimport matplotlib\nimport matplotlib.pyplot as plt\n%matplotlib inline\n\nfrom xgboost import XGBRegressor\nfrom xgboost import plot_importance\n\nfrom sklearn.preprocessing import LabelEncoder\n\nimport itertools\nimport warnings\nimport statsmodels.api as sm\nfrom statsmodels.tsa.stattools import adfuller\nfrom statsmodels.graphics.tsaplots import plot_acf, plot_pacf\nfrom statsmodels.tsa.seasonal import seasonal_decompose\n\nwarnings.filterwarnings(\"ignore\") # specify to ignore warning messages","5778c8de":"# Resample the sales by this parameter\nPERIOD = \"M\"\n\nSHOPS = [8, 14, 37, 41, 59]\n\n# this is help us change faster between Kaggle and local machine\nLOCAL = False\n\nif LOCAL:\n    PATH = os.getcwd()\n    FULL_DF_PATH = PATH\n    GB_DF_PATH = PATH\n    OUTPUT_PATH = PATH\nelse:\n    PATH = '..\/input\/competitive-data-science-predict-future-sales\/'\n    FULL_DF_PATH = \"..\/input\/full-df-only-test-all-features\/\"\n    GB_DF_PATH = \"..\/input\/group-by-df\/\"","f540d552":"# load all the df we have\nshops_df = pd.read_csv(os.path.join(PATH, \"shops.csv\"))\nitems_df = pd.read_csv(os.path.join(PATH, \"items.csv\"))\nitems_category_df = pd.read_csv(os.path.join(PATH, \"item_categories.csv\"))\nsales_df = pd.read_csv(os.path.join(PATH, \"sales_train.csv\"))\ntest_df = pd.read_csv(os.path.join(PATH, \"test.csv\"))","031c6a8c":"# we have seen in our EDA that we have some duplicate shops, let's correct them.\nshops_df.loc[shops_df.shop_name == '\u0421\u0435\u0440\u0433\u0438\u0435\u0432 \u041f\u043e\u0441\u0430\u0434 \u0422\u0426 \"7\u042f\"', 'shop_name'] = '\u0421\u0435\u0440\u0433\u0438\u0435\u0432\u041f\u043e\u0441\u0430\u0434 \u0422\u0426 \"7\u042f\"'\nshops_df['city'] = shops_df['shop_name'].str.split(' ').map(lambda x: x[0])\nshops_df.loc[shops_df.city == '!\u042f\u043a\u0443\u0442\u0441\u043a', 'city'] = '\u042f\u043a\u0443\u0442\u0441\u043a'\nshops_df['city_code'] = LabelEncoder().fit_transform(shops_df['city'])\nshops_df.head()","7598756c":"shops_df[shops_df[\"shop_id\"].isin([0, 57])]","81d544a6":"# \u042f\u043a\u0443\u0442\u0441\u043a \u041e\u0440\u0434\u0436\u043e\u043d\u0438\u043a\u0438\u0434\u0437\u0435, 56\nsales_df.loc[sales_df.shop_id == 0, 'shop_id'] = 57\ntest_df.loc[test_df.shop_id == 0, 'shop_id'] = 57\n\n# \u042f\u043a\u0443\u0442\u0441\u043a \u0422\u0426 \"\u0426\u0435\u043d\u0442\u0440\u0430\u043b\u044c\u043d\u044b\u0439\"\nsales_df.loc[sales_df.shop_id == 1, 'shop_id'] = 58\ntest_df.loc[test_df.shop_id == 1, 'shop_id'] = 58\n\n# \u0416\u0443\u043a\u043e\u0432\u0441\u043a\u0438\u0439 \u0443\u043b. \u0427\u043a\u0430\u043b\u043e\u0432\u0430 39\u043c\u00b2\nsales_df.loc[sales_df.shop_id == 10, 'shop_id'] = 11\ntest_df.loc[test_df.shop_id == 10, 'shop_id'] = 11","d1c4f03a":"items_category_df['split'] = items_category_df['item_category_name'].str.split('-')\nitems_category_df['type'] = items_category_df['split'].map(lambda x: x[0].strip())\nitems_category_df['type_code'] = LabelEncoder().fit_transform(items_category_df['type'])\n\n# if subtype is nan then type\nitems_category_df['subtype'] = items_category_df['split'].map(lambda x: x[1].strip() if len(x) > 1 else x[0].strip())\nitems_category_df['subtype_code'] = LabelEncoder().fit_transform(items_category_df['subtype'])\n\nitems_category_df.head()","0b6dd642":"sales_df.head()","858a6d24":"# we have negative prices and some outlier\n# let's replace the data with the mean value and also filter all the outliers\nmean = sales_df[(sales_df[\"shop_id\"] == 32) & (sales_df[\"item_id\"] == 2973) & (sales_df[\"date_block_num\"] == 4) & (sales_df[\"item_price\"] > 0)][\"item_price\"].mean()\nsales_df.loc[sales_df.item_price < 0, 'item_price'] = mean\n\nsales_df = sales_df[sales_df[\"item_price\"] < np.percentile(sales_df[\"item_price\"], q = 100)]\nsales_df = sales_df[sales_df[\"item_cnt_day\"] < np.percentile(sales_df[\"item_cnt_day\"], q = 100)]","f3c8c0e6":"sales_df.info()","08518262":"type(sales_df[\"date\"].iloc[0])","00eaf890":"# convert to datetime the date column\n# specify the format since otherwise it might give some problems\nsales_df[\"date\"] = pd.to_datetime(sales_df[\"date\"], format = \"%d.%m.%Y\")","af6f272d":"# max date in sales is 31.10.2015.\n# In the Kaggle competition we are asked to predict the sales for the next month\n# this means the sales of November\nmin_date = sales_df[\"date\"].min()\nmax_date_sales = sales_df[\"date\"].max()","bdc047b1":"max_date_sales","49056dba":"# how to createa a new date\nmax_date_test = datetime(2015, 11, 30)","c5188120":"# create a date range that beggins with the first sale and ends with the last day from our max_date_test\n# Notice however, that we will train our model only a selection of shops and will test our data on october data.\ndate_range = pd.date_range(min_date, max_date_sales, freq = \"D\")\ndate_range","ee52a27d":"len(date_range)","e971b1c9":"shops = sorted(list(shops_df[\"shop_id\"].unique()))\n\n# only items present in test\nitems = sorted(list(items_df[\"item_id\"].unique()))\n\ncartesian_product = pd.MultiIndex.from_product([date_range, shops, items], names = [\"date\", \"shop_id\", \"item_id\"])\nlen(cartesian_product)","68958f49":"date_range = pd.date_range(min_date, max_date_sales, freq = PERIOD)\nprint(\"We have a total of {} months\".format(len(date_range)))\ndate_range","640f9289":"# only items present in test\nitems = sorted(list(test_df[\"item_id\"].unique()))\n\ncartesian_product = pd.MultiIndex.from_product([date_range, SHOPS, items], names = [\"date\", \"shop_id\", \"item_id\"])\nlen(cartesian_product)","0ed738a3":"'''\nst = time.time()\n\n# # set index\nsales_df[\"revenue\"] = sales_df[\"item_cnt_day\"]*sales_df[\"item_price\"]\ngb_df = sales_df.set_index(\"date\")\n\n# # groupby shop_id and item_id\ngb_df = gb_df.groupby([\"shop_id\", \"item_id\"])\n\n# # resample the sales to a weekly basis\ngb_df = gb_df.resample(PERIOD).agg({'item_cnt_day': np.sum, \"item_price\": np.mean, \"revenue\":np.sum})\n\n# # convert to dataframe and save the full dataframe\ngb_df.reset_index(inplace = True)\n\n# # save the groupby dataframe\ngb_df.to_pickle(\"GROUP_BY_DF.pkl\")\n\net = time.time()\n\nprint(\"Total time in minutes to preprocess took {}\".format((et - st)\/60))\n'''\n","7ba4e8b5":"# read the groupby dataframe\ngb_df = pd.read_pickle(os.path.join(GB_DF_PATH, \"GROUP_BY_DF.pkl\"))\n# gb_df = pd.read_pickle(\"GROUP_BY_DF.pkl\")","8ad5e2b8":"gb_df.head()","dec74531":"gb_df.fillna(0, inplace = True)","3c44d629":"full_df = pd.DataFrame(index = cartesian_product).reset_index()\n\nfull_df = pd.merge(full_df, gb_df, on = ['date','shop_id', \"item_id\"], how = 'left')","5e57e9c7":"full_df.shape","32ad18ff":"full_df.head()","99c3f054":"# add shops_df information\nfull_df = pd.merge(full_df, shops_df, on = \"shop_id\")\nfull_df.head()","4f77ca2b":"# add items_df information\nfull_df = pd.merge(full_df, items_df, on = \"item_id\")\nfull_df.head()","41751120":"# add items_category_df information\nfull_df = pd.merge(full_df, items_category_df, on = \"item_category_id\")\nfull_df.head()","e31a4924":"full_df.fillna(0, inplace = True)","1f3f1239":"# We will clip the value in this line.\n# This means that the values greater than 20, will become 20 and lesser than 20\nfull_df[\"item_cnt_day\"] = np.clip(full_df[\"item_cnt_day\"], 0, 20)","9d08e268":"class FeatureGenerator(object):\n    \n    '''\n    This is a helper class that takes a df and a list of features and creates sum, mean, \n    lag features and variation (change over month) features.\n    \n    '''\n    \n    def __init__(self, full_df,  gb_list):\n        \n        '''\n        Constructor of the class.\n        gb_list is a list of columns that must be in full_df.\n        '''\n        \n        self.full_df = full_df\n        self.gb_list = gb_list\n        # joins the gb_list, this way we can dinamically create new columns\n        # [\"date, \"shop_id] --> date_shop_id\n        self.objective_column_name = \"_\".join(gb_list)\n            \n    def generate_gb_df(self):\n        \n        '''\n        This function thakes the full_df and creates a groupby df based on the gb_list.\n        It creates 2 columns: \n            1. A sum column for every date and gb_list\n            2. Mean columns for every_date and gb_list\n            \n        The resulting df (gb_df_) is assigned back to the FeatureGenerator class as an attribute.\n        '''\n\n        def my_agg(full_df_, args):\n            \n            '''\n            This function is used to perform multiple operations over a groupby df and returns a df\n            without multiindex.\n            '''\n            \n            names = {\n                # you can put here as many columns as you want \n                '{}_sum'.format(args):  full_df_['item_cnt_day'].sum()\n            }\n\n            return pd.Series(names, index = [key for key in names.keys()])\n        \n        # the args is used to pass additional argument to the apply function\n        gb_df_ = self.full_df.groupby(self.gb_list).apply(my_agg, args = (self.objective_column_name)).reset_index()\n\n        self.gb_df_ = gb_df_\n\n        \n    def return_gb_df(self):  \n        \n        '''\n        This function takes the gb_df_ created in the previous step (generate_gb_df) and creates additional features.\n        We create 3 lag features (values from the past).\n        And 6 variation features: 3 with absolute values and 3 with porcentual change.\n        '''\n        \n        def generate_shift_features(self, suffix):\n            \n            '''\n            This function is a helper function that takes the gb_df_ and a suffix (sum or mean) and creates the\n            additional features.\n            '''\n\n            # dinamically creates the features\n            # date_shop_id --> date_shop_id_sum if suffix is sum\n            # date_shop_id --> date_shop_id_mean if suffix is mean\n            name_ = self.objective_column_name + \"_\" + suffix\n\n            self.gb_df_['{}_shift_1'.format(name_)] =\\\n            self.gb_df_.groupby(self.gb_list[1:])[name_].transform(lambda x: x.shift(1))\n            \n            self.gb_df_['{}_shift_2'.format(name_)] =\\\n            self.gb_df_.groupby(self.gb_list[1:])[name_].transform(lambda x: x.shift(2))\n            \n            self.gb_df_['{}_shift_3'.format(name_)] =\\\n            self.gb_df_.groupby(self.gb_list[1:])[name_].transform(lambda x: x.shift(3))\n\n            self.gb_df_['{}_var_pct_1'.format(name_)] =\\\n            self.gb_df_.groupby(self.gb_list[1:])[name_].transform(lambda x: (x.shift(1) - x.shift(2))\/x.shift(2))\n            \n            self.gb_df_['{}_var_pct_2'.format(name_)] =\\\n            self.gb_df_.groupby(self.gb_list[1:])[name_].transform(lambda x: (x.shift(1) - x.shift(3))\/x.shift(3))\n            \n            self.gb_df_['{}_var_pct_3'.format(name_)] =\\\n            self.gb_df_.groupby(self.gb_list[1:])[name_].transform(lambda x: (x.shift(1) - x.shift(4))\/x.shift(4))\n            \n            self.gb_df_.fillna(-1, inplace = True)\n\n            self.gb_df_.replace([np.inf, -np.inf], -1, inplace = True)\n        \n        # call the generate_shift_featues function with different suffix (sum and mean)\n        generate_shift_features(self, suffix = \"sum\")\n    \n        return self.gb_df_\n        ","8e3f2232":"st = time.time()\n\ngb_list = [\"date\", \"shop_id\", \"city\"]\n\nfe_generator = FeatureGenerator(full_df = full_df, gb_list = gb_list)\n\nfe_generator.generate_gb_df()\n\nshop_sales_features = fe_generator.return_gb_df()\n\n# to avoid city_x and city_y\n\nshop_sales_features.drop(\"city\", axis = 1, inplace = True)\net = time.time()\n\n(et - st)\/60","333c60c9":"shop_sales_features.shape","cf9e6d1c":"shop_sales_features[shop_sales_features[\"shop_id\"] == 8].head(5)","3f7f6972":"def generate_gb_df(full_df_, gb_list):\n\n    '''\n    This function thakes the full_df and creates a groupby df based on the gb_list.\n    It creates 2 columns: \n        1. A sum column for every date and gb_list\n        2. Mean columns for every_date and gb_list\n\n    The resulting df (gb_df_) is assigned back to the FeatureGenerator class as an attribute.\n    '''\n    objective_column_name = \"_\".join(gb_list)\n    \n    def my_agg(full_df_, args):\n\n        '''\n        This function is used to perform multiple operations over a groupby df and returns a df\n        without multiindex.\n        '''\n\n        names = {\n            # you can put here as many columns as you want \n            '{}_sum'.format(args):  full_df_['item_cnt_day'].sum()\n        }\n\n        return pd.Series(names, index = [key for key in names.keys()])\n\n    # the args is used to pass additional argument to the apply function\n    gb_df_ = full_df_.groupby(gb_list).apply(my_agg, args = (objective_column_name)).reset_index()\n\n    return gb_df_\n\ndef return_gb_df(gb_df_, gb_list, suffix = \"sum\"):  \n\n    # dinamically creates the features\n    # date_shop_id --> date_shop_id_sum if suffix is sum\n    # date_shop_id --> date_shop_id_mean if suffix is mean\n    \n    objective_column_name = \"_\".join(gb_list)\n    name_ = objective_column_name + \"_\" + suffix\n\n    gb_df_['{}_shift_1'.format(name_)] =\\\n    gb_df_.groupby(gb_list[1:])[name_].transform(lambda x: x.shift(1))\n    \n    gb_df_['{}_shift_2'.format(name_)] =\\\n    gb_df_.groupby(gb_list[1:])[name_].transform(lambda x: x.shift(2))\n\n    gb_df_['{}_shift_3'.format(name_)] =\\\n    gb_df_.groupby(gb_list[1:])[name_].transform(lambda x: x.shift(3))\n\n    gb_df_['{}_var_pct_1'.format(name_)] =\\\n    gb_df_.groupby(gb_list[1:])[name_].transform(lambda x: (x.shift(1) - x.shift(2))\/x.shift(2))\n\n    gb_df_['{}_var_pct_2'.format(name_)] =\\\n    gb_df_.groupby(gb_list[1:])[name_].transform(lambda x: (x.shift(1) - x.shift(3))\/x.shift(3))\n\n    gb_df_['{}_var_pct_3'.format(name_)] =\\\n    gb_df_.groupby(gb_list[1:])[name_].transform(lambda x: (x.shift(1) - x.shift(4))\/x.shift(4))\n\n    gb_df_.fillna(-1, inplace = True)\n\n    gb_df_.replace([np.inf, -np.inf], -1, inplace = True)\n        \n    return gb_df_\n\ngb_list = [\"date\", \"shop_id\", \"city\"]\n\ngb_df_ = generate_gb_df(full_df_ = full_df, gb_list = gb_list)\ngb_df_features_ = return_gb_df(gb_df_ = gb_df_, gb_list = gb_list)\ngb_df_features_.drop(\"city\", axis = 1, inplace = True)\n\ngb_df_features_.head()","b9c75399":"gb_df_features_.sum()","4fe63593":"shop_sales_features.sum()","918c772e":"# compare 2 dataframes to see if they are equal\nshop_sales_features.equals(gb_df_features_)","cdb648fc":"st = time.time()\n\ngb_list = [\"date\", \"item_id\"]\n\nfe_generator = FeatureGenerator(full_df = full_df, gb_list = gb_list)\n\nfe_generator.generate_gb_df()\n\nitem_sales_features = fe_generator.return_gb_df()\n\net = time.time()\n\n(et - st)\/60","7bc584e4":"item_sales_features.shape","1c2d0504":"item_sales_features[item_sales_features[\"item_id\"] == 30].head(3)","c1ae37ce":"st = time.time()\n\ngb_list = [\"date\", \"item_category_id\"]\n\nfe_generator = FeatureGenerator(full_df = full_df, gb_list = gb_list)\n\nfe_generator.generate_gb_df()\n\nmonth_item_category_features = fe_generator.return_gb_df()\n\net = time.time()\n\n(et - st)\/60","5f4c9b2b":"month_item_category_features.shape","2c39f12a":"month_item_category_features[month_item_category_features[\"item_category_id\"] == 2].head(3)","a93ad2e0":"full_df[\"year\"] = full_df[\"date\"].dt.year\nfull_df[\"month\"] = full_df[\"date\"].dt.month\nfull_df[\"days_in_month\"] = full_df[\"date\"].dt.days_in_month","865daded":"holidays_next_month = {\n    12:8,\n    1:1,\n    2:1,\n    3:0,\n    4:2,\n    5:1,\n    6:0,\n    7:0,\n    8:0,\n    9:0,\n    10:1,\n    11:0\n}\n\nholidays_this_month = {\n    1:8,\n    2:1,\n    3:1,\n    4:0,\n    5:2,\n    6:1,\n    7:0,\n    8:0,\n    9:0,\n    10:0,\n    11:1,\n    12:0\n}\n\nfull_df[\"holidays_next_month\"] = full_df[\"month\"].map(holidays_next_month)\nfull_df[\"holidays_this_month\"] = full_df[\"month\"].map(holidays_this_month)","7cbac620":"def extract_number_weekends(test_month):\n    '''\n    Extracts the number of weekend days in a month.\n    '''\n    saturdays = len([1 for i in calendar.monthcalendar(test_month.year, test_month.month) if i[5] != 0])\n    sundays = len([1 for i in calendar.monthcalendar(test_month.year, test_month.month) if i[6] != 0])\n    \n    return saturdays + sundays\n\nfull_df[\"total_weekend_days\"] = full_df[\"date\"].apply(extract_number_weekends)\n\n# how much time has passed since the last sale?\ndate_diff_df = full_df[full_df[\"item_cnt_day\"] > 0][[\"shop_id\", \"item_id\", \"date\", \"item_cnt_day\"]].groupby([\"shop_id\", \"item_id\"])\\\n[\"date\"].diff().apply(lambda timedelta_: timedelta_.days).to_frame()\ndate_diff_df.columns = [\"date_diff_sales\"]\n\nfull_df = pd.merge(full_df, date_diff_df, how = \"left\", left_index=True, right_index=True)\nfull_df.fillna(-1, inplace = True)","0d086f4d":"full_df.head()","a8470c5d":"city_population = {\\\n'\u042f\u043a\u0443\u0442\u0441\u043a':307911, \n'\u0410\u0434\u044b\u0433\u0435\u044f':141970,\n'\u0411\u0430\u043b\u0430\u0448\u0438\u0445\u0430':450771, \n'\u0412\u043e\u043b\u0436\u0441\u043a\u0438\u0439':326055, \n'\u0412\u043e\u043b\u043e\u0433\u0434\u0430':313012, \n'\u0412\u043e\u0440\u043e\u043d\u0435\u0436':1047549,\n'\u0412\u044b\u0435\u0437\u0434\u043d\u0430\u044f':1228680, \n'\u0416\u0443\u043a\u043e\u0432\u0441\u043a\u0438\u0439':107560, \n'\u0418\u043d\u0442\u0435\u0440\u043d\u0435\u0442-\u043c\u0430\u0433\u0430\u0437\u0438\u043d':1228680, \n'\u041a\u0430\u0437\u0430\u043d\u044c':1257391, \n'\u041a\u0430\u043b\u0443\u0433\u0430':341892,\n'\u041a\u043e\u043b\u043e\u043c\u043d\u0430':140129,\n'\u041a\u0440\u0430\u0441\u043d\u043e\u044f\u0440\u0441\u043a':1083865, \n'\u041a\u0443\u0440\u0441\u043a':452976, \n'\u041c\u043e\u0441\u043a\u0432\u0430':12678079,\n'\u041c\u044b\u0442\u0438\u0449\u0438':205397, \n'\u041d.\u041d\u043e\u0432\u0433\u043e\u0440\u043e\u0434':1252236,\n'\u041d\u043e\u0432\u043e\u0441\u0438\u0431\u0438\u0440\u0441\u043a':1602915 , \n'\u041e\u043c\u0441\u043a':1178391, \n'\u0420\u043e\u0441\u0442\u043e\u0432\u041d\u0430\u0414\u043e\u043d\u0443':1125299, \n'\u0421\u041f\u0431':5398064, \n'\u0421\u0430\u043c\u0430\u0440\u0430':1156659,\n'\u0421\u0435\u0440\u0433\u0438\u0435\u0432\u041f\u043e\u0441\u0430\u0434':104579, \n'\u0421\u0443\u0440\u0433\u0443\u0442':373940, \n'\u0422\u043e\u043c\u0441\u043a':572740, \n'\u0422\u044e\u043c\u0435\u043d\u044c':744554, \n'\u0423\u0444\u0430':1115560, \n'\u0425\u0438\u043c\u043a\u0438':244668,\n'\u0426\u0438\u0444\u0440\u043e\u0432\u043e\u0439':1228680, \n'\u0427\u0435\u0445\u043e\u0432':70548, \n'\u042f\u0440\u043e\u0441\u043b\u0430\u0432\u043b\u044c':608353\n}\n\ncity_income = {\\\n'\u042f\u043a\u0443\u0442\u0441\u043a':70969, \n'\u0410\u0434\u044b\u0433\u0435\u044f':28842,\n'\u0411\u0430\u043b\u0430\u0448\u0438\u0445\u0430':54122, \n'\u0412\u043e\u043b\u0436\u0441\u043a\u0438\u0439':31666, \n'\u0412\u043e\u043b\u043e\u0433\u0434\u0430':38201, \n'\u0412\u043e\u0440\u043e\u043d\u0435\u0436':32504,\n'\u0412\u044b\u0435\u0437\u0434\u043d\u0430\u044f':46158, \n'\u0416\u0443\u043a\u043e\u0432\u0441\u043a\u0438\u0439':54122, \n'\u0418\u043d\u0442\u0435\u0440\u043d\u0435\u0442-\u043c\u0430\u0433\u0430\u0437\u0438\u043d':46158, \n'\u041a\u0430\u0437\u0430\u043d\u044c':36139, \n'\u041a\u0430\u043b\u0443\u0433\u0430':39776,\n'\u041a\u043e\u043b\u043e\u043c\u043d\u0430':54122,\n'\u041a\u0440\u0430\u0441\u043d\u043e\u044f\u0440\u0441\u043a':48831, \n'\u041a\u0443\u0440\u0441\u043a':31391, \n'\u041c\u043e\u0441\u043a\u0432\u0430':91368,\n'\u041c\u044b\u0442\u0438\u0449\u0438':54122, \n'\u041d.\u041d\u043e\u0432\u0433\u043e\u0440\u043e\u0434':31210,\n'\u041d\u043e\u0432\u043e\u0441\u0438\u0431\u0438\u0440\u0441\u043a':37014 , \n'\u041e\u043c\u0441\u043a':34294, \n'\u0420\u043e\u0441\u0442\u043e\u0432\u041d\u0430\u0414\u043e\u043d\u0443':32067, \n'\u0421\u041f\u0431':61536, \n'\u0421\u0430\u043c\u0430\u0440\u0430':35218,\n'\u0421\u0435\u0440\u0433\u0438\u0435\u0432\u041f\u043e\u0441\u0430\u0434':54122, \n'\u0421\u0443\u0440\u0433\u0443\u0442':73780, \n'\u0422\u043e\u043c\u0441\u043a':43235, \n'\u0422\u044e\u043c\u0435\u043d\u044c':72227, \n'\u0423\u0444\u0430':35257, \n'\u0425\u0438\u043c\u043a\u0438':54122,\n'\u0426\u0438\u0444\u0440\u043e\u0432\u043e\u0439':46158, \n'\u0427\u0435\u0445\u043e\u0432':54122, \n'\u042f\u0440\u043e\u0441\u043b\u0430\u0432\u043b\u044c':34675\n}\n\nfull_df[\"city_population\"] = full_df[\"city\"].map(city_population)\nfull_df[\"city_income\"] = full_df[\"city\"].map(city_income)\nfull_df[\"price_over_income\"] = full_df[\"item_price\"]\/full_df[\"city_income\"]","8c2dc752":"full_df_1 = full_df","88e2c07a":"print(\"Shape before merge is {}\".format(full_df.shape))\n\nfull_df = pd.merge(full_df, shop_sales_features, on = [\"date\", \"shop_id\"], how = \"left\")\nfull_df = pd.merge(full_df, item_sales_features, on = [\"date\", \"item_id\"], how = \"left\")\nfull_df = pd.merge(full_df, month_item_category_features, on = [\"date\", \"item_category_id\"], how = \"left\")\nfull_df.rename(columns = {\"item_cnt_day\":\"sales\"}, inplace = True)\n\nprint(\"Shape after merge is {}\".format(full_df.shape))","827b82c2":"# save the file\n\nst = time.time()\n\nfull_df.to_pickle(\"FULL_DF_ONLY_TEST_ALL_FEATURES.pkl\")\n\net = time.time()\n(et - st)\/60","5dd26bcd":"# load the preprocessed data\nfull_df = pd.read_pickle(\"FULL_DF_ONLY_TEST_ALL_FEATURES.pkl\")\n\n# select only a few shops\nfull_df = full_df[full_df[\"shop_id\"].isin(SHOPS)]\n\n# delete all the columns where lags features are - 1 (shift(6))\nfull_df = full_df[full_df[\"date\"] > np.datetime64(\"2013-03-31\")]\n\ncols_to_drop = [\n\n'revenue',\n'shop_name',\n\"city\",\n'item_name',\n'item_category_name',\n'split',\n'type',\n'subtype',\n\n'date_item_id_sum',\n\"date_shop_id_city_sum\",\n\"date_item_category_id_sum\",\n    \n]\n\nfull_df.drop(cols_to_drop, inplace = True, axis = 1)","96c02d9e":"# ------------------------------------------------------\n# separate the dates for train, validation and test\n\ntrain_index = sorted(list(full_df[\"date\"].unique()))[:-2]\n\nvalida_index = [sorted(list(full_df[\"date\"].unique()))[-2]]\n\ntest_index = [sorted(list(full_df[\"date\"].unique()))[-1]]\n\n# ------------------------------------------------------\n# split the data into train, validation and test dataset\n# we \"simulate\" the test dataset to be the Kaggle test dataset\n\nX_train = full_df[full_df[\"date\"].isin(train_index)].drop(['sales', \"date\"], axis=1)\nY_train = full_df[full_df[\"date\"].isin(train_index)]['sales']\n\nX_valida = full_df[full_df[\"date\"].isin(valida_index)].drop(['sales', \"date\"], axis=1)\nY_valida = full_df[full_df[\"date\"].isin(valida_index)]['sales']\n\nX_test = full_df[full_df[\"date\"].isin(test_index)].drop(['sales', \"date\"], axis = 1)\nY_test = full_df[full_df[\"date\"].isin(test_index)]['sales']","5f47049c":"st = time.time()\n\nmodel = XGBRegressor(seed = 175)\n\nmodel_name = str(model).split(\"(\")[0]\n\nday = str(datetime.now()).split()[0].replace(\"-\", \"_\")\nhour = str(datetime.now()).split()[1].replace(\":\", \"_\").split(\".\")[0]\nt = str(day) + \"_\" + str(hour)\n\nmodel.fit(X_train, Y_train, eval_metric = \"rmse\", \n    eval_set = [(X_train, Y_train), (X_valida, Y_valida)], \n    verbose = True, \n    early_stopping_rounds = 10)\n\net = time.time()\n\nprint(\"Training took {} minutes!\".format((et - st)\/60))","a63e57a8":"pickle.dump(model, open(\"{}_{}.dat\".format(model_name, t), \"wb\"))","e0087a4b":"print(\"{}_{}.dat\".format(model_name, t))","9d15f998":"model = pickle.load(open(\"{}_{}.dat\".format(model_name, t), \"rb\"))","840a8b48":"importance = model.get_booster().get_score(importance_type = \"gain\")\n\nimportance = {k: v for k, v in sorted(importance.items(), key = lambda item: item[1])}","6ccb926a":"fig, ax = plt.subplots(figsize = (10, 15))\nplot_importance(model, importance_type = \"gain\", ax = ax);","f05c1bcb":"Y_valida_pred = model.predict(X_valida)\n\nrmse_valida = sqrt(metrics.mean_squared_error(Y_valida, Y_valida_pred))\nrmse_valida","cf577cd5":"Y_test_predict = model.predict(X_test)\n\nrmse_test = sqrt(metrics.mean_squared_error(Y_test, Y_test_predict))\nrmse_test","459fd835":"full_df_1.head(50).T","3ad588a1":"st = time.time()\n\ngb_list = [\"date\", \"item_category_id\", \"revenue\"]\n\nfe_generator = FeatureGenerator(full_df = full_df_1, gb_list = gb_list)\n\nfe_generator.generate_gb_df()\n\nrevenue_item_category_id_features = fe_generator.return_gb_df()\n\net = time.time()\n\n(et - st)\/60","127e4494":"revenue_item_category_id_features.shape","77295901":"revenue_item_category_id_features.head(5)","5d3c3246":"revenue_item_category_id_features[revenue_item_category_id_features[\"item_category_id\"] == 2].head(10)","8ed0c3ee":"st = time.time()\n\ngb_list = [\"date\", \"city_code\", \"revenue\"]\n\nfe_generator = FeatureGenerator(full_df = full_df_1, gb_list = gb_list)\n\nfe_generator.generate_gb_df()\n\nrevenue_city_code_features = fe_generator.return_gb_df()\n\net = time.time()\n\n(et - st)\/60","e287fbe1":"revenue_city_code_features.shape","6ca09fa4":"revenue_city_code_features[revenue_city_code_features[\"city_code\"] == 4].head(10)","315b4910":"st = time.time()\n\ngb_list = [\"date\", \"holidays_this_month\", \"revenue\"]\n\nfe_generator = FeatureGenerator(full_df = full_df_1, gb_list = gb_list)\n\nfe_generator.generate_gb_df()\n\nrevenue_holidays_this_month_features = fe_generator.return_gb_df()\n\net = time.time()\n\n(et - st)\/60","ad96457b":"revenue_holidays_this_month_features.shape","3ab840b9":"revenue_holidays_this_month_features.head(10)","f4780473":"print(\"Shape before merge is {}\".format(full_df_1.shape))\n\nfull_df_1 = pd.merge(full_df_1, shop_sales_features, on = [\"date\", \"shop_id\"], how = \"left\")\nfull_df_1 = pd.merge(full_df_1, item_sales_features, on = [\"date\", \"item_id\"], how = \"left\")\nfull_df_1 = pd.merge(full_df_1, month_item_category_features, on = [\"date\", \"item_category_id\"], how = \"left\")\nfull_df_1 = pd.merge(full_df_1, revenue_item_category_id_features, on = [\"date\", \"item_category_id\", \"revenue\"], how = \"left\")\nfull_df_1 = pd.merge(full_df_1, revenue_city_code_features, on = [\"date\", \"city_code\", \"revenue\"], how = \"left\")\nfull_df_1 = pd.merge(full_df_1, revenue_holidays_this_month_features, on = [\"date\", \"holidays_this_month\", \"revenue\"], how = \"left\")\nfull_df_1.rename(columns = {\"item_cnt_day\":\"sales\"}, inplace = True)\n\nprint(\"Shape after merge is {}\".format(full_df_1.shape))","56683286":"full_df_1.head(10)","c1dc1c09":"st = time.time()\n\nfull_df_1.to_pickle(\"FULL_DF_ONLY_TEST_ALL_FEATURES.pkl\")\n\net = time.time()\n(et - st)\/60","faebc4d2":"# load the preprocessed data\nfull_df_1 = pd.read_pickle(\"FULL_DF_ONLY_TEST_ALL_FEATURES.pkl\")\n\n# select only a few shops\nfull_df_1 = full_df_1[full_df_1[\"shop_id\"].isin(SHOPS)]\n\n# delete all the columns where lags features are - 1 (shift(6))\nfull_df_1 = full_df_1[full_df_1[\"date\"] > np.datetime64(\"2013-03-31\")]\n\ncols_to_drop = [\n\n'revenue',\n'shop_name',\n\"city\",\n'item_name',\n'item_category_name',\n'split',\n'type',\n'subtype',\n\n'date_item_id_sum',\n\"date_shop_id_city_sum\",\n\"date_item_category_id_sum\",\n\"date_item_category_id_revenue_sum\",\n\"date_city_code_revenue_sum\",\n\"date_holidays_this_month_revenue_sum\"\n    \n]\n\nfull_df_1.drop(cols_to_drop, inplace = True, axis = 1)","2065f7c3":"# ------------------------------------------------------\n# separate the dates for train, validation and test\n\ntrain_index = sorted(list(full_df_1[\"date\"].unique()))[:-2]\n\nvalida_index = [sorted(list(full_df_1[\"date\"].unique()))[-2]]\n\ntest_index = [sorted(list(full_df_1[\"date\"].unique()))[-1]]\n\n# ------------------------------------------------------\n# split the data into train, validation and test dataset\n# we \"simulate\" the test dataset to be the Kaggle test dataset\n\nX_train = full_df_1[full_df_1[\"date\"].isin(train_index)].drop(['sales', \"date\"], axis=1)\nY_train = full_df_1[full_df_1[\"date\"].isin(train_index)]['sales']\n\nX_valida = full_df_1[full_df_1[\"date\"].isin(valida_index)].drop(['sales', \"date\"], axis=1)\nY_valida = full_df_1[full_df_1[\"date\"].isin(valida_index)]['sales']\n\nX_test = full_df_1[full_df_1[\"date\"].isin(test_index)].drop(['sales', \"date\"], axis = 1)\nY_test = full_df_1[full_df_1[\"date\"].isin(test_index)]['sales']","7cb4cc1a":"st = time.time()\n\nmodel = XGBRegressor(seed = 175)\n\nmodel_name = str(model).split(\"(\")[0]\n\nday = str(datetime.now()).split()[0].replace(\"-\", \"_\")\nhour = str(datetime.now()).split()[1].replace(\":\", \"_\").split(\".\")[0]\nt = str(day) + \"_\" + str(hour)\n\nmodel.fit(X_train, Y_train, eval_metric = \"rmse\", \n    eval_set = [(X_train, Y_train), (X_valida, Y_valida)], \n    verbose = True, \n    early_stopping_rounds = 10)\n\net = time.time()\n\nprint(\"Training took {} minutes!\".format((et - st)\/60))","94684a17":"pickle.dump(model, open(\"{}_{}.dat\".format(model_name, t), \"wb\"))","c0125d10":"print(\"{}_{}.dat\".format(model_name, t))","0209f128":"model = pickle.load(open(\"{}_{}.dat\".format(model_name, t), \"rb\"))","dccb8740":"importance = model.get_booster().get_score(importance_type = \"gain\")\n\nimportance = {k: v for k, v in sorted(importance.items(), key = lambda item: item[1])}","544ad773":"fig, ax = plt.subplots(figsize = (10, 15))\nplot_importance(model, importance_type = \"gain\", ax = ax);","1357d8ee":"Y_valida_pred = model.predict(X_valida)\n\nrmse_valida = sqrt(metrics.mean_squared_error(Y_valida, Y_valida_pred))\nrmse_valida","c6644cc4":"Y_test_predict = model.predict(X_test)\n\nrmse_test = sqrt(metrics.mean_squared_error(Y_test, Y_test_predict))\nrmse_test","edb1d6aa":"<a id = \"new_feature_3\"><\/a>\n# Additional feature 3 (revenue_holidays_this_month_features)\n[Go back to the table of contents](#table_of_contents)","e182ccfa":"<a id = \"generate_gb_df\"><\/a>\n# Create a groupby df with all the sales for shop_id and item_id grouped by months\n[Go back to the table of contents](#table_of_contents)","ab25dbc2":"<a id = \"feature_2\"><\/a>\n## Date and item_id features\n[Go back to the table of contents](#table_of_contents)","7f52c7e4":"<a id = \"global_variables\"><\/a>\n# Global variables\n[Go back to the table of contents](#table_of_contents)","6a4936e0":"<a id = \"remove_outliers\"><\/a>\n## Remove the huge price and item sales outliers\n[Go back to the table of contents](#table_of_contents)","bb42bde2":"<a id = \"only_functions\"><\/a>\n## Achieving the same result without clases\n[Go back to the table of contents](#table_of_contents)","cc8865db":"In order to replicate the Kaggle competition, we will create a smaller DataFrame with only selected shops and train the model on a Monthly basis.\n\n\nWe will use only 5 shops since generating a lot of features will consume a lot of memory and we won't be able to train on Kaggle. If you have a more powerful machine, you can run the script with all shops.","0bf4adc3":"<a id = \"feature_importance_1\"><\/a>\n# Feature importance\n[Go back to the table of contents](#table_of_contents)","3171177a":"<a id = \"correct_shop_names_id\"><\/a>\n## Correct the shop names and id\n[Go back to the table of contents](#table_of_contents)","63cde7bd":"<a id = \"generate_item_category_features\"><\/a>\n## Generate item_category_features\n[Go back to the table of contents](#table_of_contents)","628f0a95":"Methods of a class can be viewed as functions but attached to a class (hence the self parameter).\n\nIf we extact the methods from FeatureGenerator and eliminame all the ***self*** parameter and add a ***return*** clase, we can easily convert the above methods to functions and use them as usually.","32150c91":"<a id = \"join_dfs\"><\/a>\n# Join the full_df with gb_df\n[Go back to the table of contents](#table_of_contents)","08dafb37":"Our model will benefit a lot if we can train it with the highest granularity (daily sales).\n\nHowever, as we can see doing this on a local machine is almost impossible since we have more than 1.4 BILLION rows.\nIf we add 10 featrues (columns) this means that our total DataFrame will have more than 10.4 BILLIONS instances.","08dddfa6":"<a id = \"preprocessing_before_fe\"><\/a>\n# Preprocessing before features generation\n[Go back to the table of contents](#table_of_contents)","3999bfbc":"<a id = \"feature_importance_2\"><\/a>\n# Feature importance of new model\n[Go back to the table of contents](#table_of_contents)","fe2d896d":"0.87 million rows, we CAN work with this on a local machine.\n\nWe have created monthly date_range, if we want to join this with our sales data, we must \"resample\" our data to a monthly date_range aswell.","793e0af0":"As we can see, we have some duplicate shop names, let's manually clean them.","950b72be":"<a id = \"feature_3\"><\/a>\n## Date and item_category features\n[Go back to the table of contents](#table_of_contents)","227f7785":"<a id = \"imports\"><\/a>\n# Import of libraries\n[Go back to the table of contents](#table_of_contents)","32322bb4":"<a id = \"new_feature_2\"><\/a>\n# Additional feature 2 (revenue_city_code_features)\n[Go back to the table of contents](#table_of_contents)","048edec3":"<a id = \"join_dfs_with_new_features\"><\/a>\n# Join df's with new features\n[Go back to the table of contents](#table_of_contents)","19930c7a":"<a id = \"feature_6\"><\/a>\n## Adding holiday and number of weekends data\n[Go back to the table of contents](#table_of_contents)","c29d4acc":"<a id = \"new_feature_1\"><\/a>\n# Additional feature 1 (revenue_item_category_id_features)\n[Go back to the table of contents](#table_of_contents)","e65c19fa":"<a id = \"generate_full_df_with_all_records\"><\/a>\n# Generate a full df with all data and records\n[Go back to the table of contents](#table_of_contents)","a1bcf64c":"<a id = \"basic_model\"><\/a>\n# Basic model train\n[Go back to the table of contents](#table_of_contents)","e030a220":"We will be working with a DataFrame resampled by Months. We must resample the sales_df.","542bf9d7":"<a id = \"predict_and_model_evaluation_2\"><\/a>\n# Predict and model evaluation of new model\n[Go back to the table of contents](#table_of_contents)","b5976b5a":"<a id = \"table_of_contents\"><\/a>\n# Table of contents\n\n[Import of libraries](#imports)\n\n[Global variables](#global_variables)\n\n[Preprocessing before features generation](#preprocessing_before_fe)\n\n-->[Correct the shop names and id](#correct_shop_names_id)\n\n-->[Generate item_category_features](#generate_item_category_features)\n\n-->[Remove the huge price and item sales outliers](#remove_outliers)\n\n[Generate a full df with all data and records](#generate_full_df_with_all_records)\n\n[Create a groupby df with all the sales for shop_id and item_id grouped by months](#generate_gb_df)\n\n[Join the full_df with gb_df](#join_dfs)\n\n[Add additional features to our full sales df](#add_new_csvs)\n\n[FeatureGenerator class](#fe_generator_class)\n\n[Generate additional features as, mean and total sales for shop_id , item_id, city ... for every month](#create_new_features)\n\n-->[Date and shop_id features](#feature_1)\n\n--->[Achieving the same result without clases](#only_functions)\n\n-->[Date and item_id features](#feature_2)\n\n-->[Date and item_category features](#feature_3)\n\n-->[Datetime features](#feature_5)\n\n-->[Adding holiday and number of weekends data](#feature_6)\n\n-->[City population and mean_income per city](#feature_7)\n\n[Join full sales df with all the features generated](#join_dfs_with_features)\n\n[Basic model train](#basic_model)\n\n[Feature importance](#feature_importance_1)\n\n[Predict and model evaluation](#predict_and_model_evaluation_1)\n\n[To do](#to_do)\n\n-->[Additional feature 1](#new_feature_1)\n\n-->[Additional feature 2](#new_feature_2)\n\n-->[Additional feature 3](#new_feature_3)\n\n-->[Join df's with new features](#join_dfs_with_new_features)\n\n-->[Model training](#new_model)\n\n-->[Feature importance of new model](#feature_importance_2)\n\n-->[Predict and model evaluation of new model](#predict_and_model_evaluation_2)","074fd5dc":"<a id = \"new_model\"><\/a>\n# Model training\n[Go back to the table of contents](#table_of_contents)","87bb2fff":"Now that we have the sales_df resampled by months, and we have created a cartesian product (all possible combinations of months, shop_id and item_id), let's merge the df.","0fa5e846":"<a id = \"add_new_csvs\"><\/a>\n# Add additional features to our full sales df\n[Go back to the table of contents](#table_of_contents)","29a60fc9":"The idea of this section is very simple. We have seen in our EDA part that there are a lot of missing values.\nOur model will benefit a lot if we can supply it a training data, with the missing values being zero. This way, it can learn from more amount of data.\n\nIn order to do so, we must perform a cartesian operation over dates x shops x items_id to generate all the possible combinations of months x shops and x items sales.\n\nIn this kernel we will only generate this type of features for the items that are present in TEST only.\n\nThis will reduce the amount of calculations required. If you have enough memory, we can do this for all possible combinations.","7a5eebca":"<a id = \"to_do\"><\/a>\n# To do\n[Go back to the table of contents](#table_of_contents)","254ee089":"<a id = \"join_dfs_with_features\"><\/a>\n# Join full sales df with all the features generated\n[Go back to the table of contents](#table_of_contents)","61d270d3":"<a id = \"create_new_features\"><\/a>\n# Generate additional features as, mean and total sales for shop_id , item_id, city ... for every month\n[Go back to the table of contents](#table_of_contents)","7db145a8":"<a id = \"fe_generator_class\"><\/a>\n# FeatureGenerator class\n[Go back to the table of contents](#table_of_contents)","4ced7eea":"<a id = \"predict_and_model_evaluation_1\"><\/a>\n# Predict and model evaluation\n[Go back to the table of contents](#table_of_contents)","e7ab64fb":"<a id = \"feature_5\"><\/a>\n## Datetime features\n[Go back to the table of contents](#table_of_contents)","cefad290":"<a id = \"feature_1\"><\/a>\n## Date and shop_id features\n[Go back to the table of contents](#table_of_contents)","c33f1c07":"<a id = \"feature_7\"><\/a>\n## City population and mean_income per city\n[Go back to the table of contents](#table_of_contents)"}}