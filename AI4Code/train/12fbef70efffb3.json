{"cell_type":{"e252fb41":"code","a55ee4c0":"code","8b145b3e":"code","13f541b7":"code","2d66b187":"code","c547dfc8":"code","fc442f12":"code","32526247":"code","2c4cf9f1":"code","c61c68e5":"code","00983faa":"code","9520791b":"code","199626aa":"code","35138116":"code","31ae2929":"code","4695831f":"code","5b313f80":"code","4a4fc9e2":"code","d6f9adfd":"code","f66f3faf":"code","fc0b23b1":"code","d746aff1":"code","7bd4eddf":"code","ed9f4dcf":"code","baa823bf":"code","b3a27de8":"code","4905580c":"code","eeadd3e5":"code","bf98d74f":"code","767b798d":"code","ffa4be7f":"code","2ebcd36f":"code","288f9cad":"code","2ac8b94b":"code","b84cba81":"code","5526db39":"code","265a2ae1":"code","a6523f95":"code","d847eded":"code","ce600561":"code","b4c5095e":"code","ede1fd93":"code","f7d5bd25":"code","ef18d55b":"code","594f7e12":"code","0f437ba6":"code","7ee76548":"code","4be73724":"code","c8726be1":"markdown","65b1f3f0":"markdown","0ddb303c":"markdown","df8125d6":"markdown","c49e9cc1":"markdown","73d02ee2":"markdown","35d17a91":"markdown","043fd6a8":"markdown","3cb266e0":"markdown","441322c5":"markdown","94d188c6":"markdown","bea09968":"markdown","17d83489":"markdown","695c7800":"markdown","a0d200b1":"markdown","2b450ea3":"markdown","28dcc3e2":"markdown","8e9be9b1":"markdown","3606789f":"markdown","a16812ce":"markdown","5e7f8ac8":"markdown","3993a2c4":"markdown","a0e41923":"markdown","b1f2ac98":"markdown","45d72976":"markdown","3f6c6ee6":"markdown","01bb1bcf":"markdown","f715e5f5":"markdown","d30b7920":"markdown","a6c86314":"markdown","77e65b51":"markdown","0e68644c":"markdown","dd452b92":"markdown","c6fd7fc0":"markdown","c390533f":"markdown","95db83d3":"markdown","99e6479e":"markdown","78af0934":"markdown","197bce7e":"markdown","1fa66368":"markdown","71a8e760":"markdown","333a202e":"markdown"},"source":{"e252fb41":"import numpy as np\nimport pandas as pd\nimport seaborn as sns\n\nimport datetime\nimport lightgbm as lgb\nfrom scipy import stats\nfrom scipy.sparse import hstack, csr_matrix\nfrom sklearn.model_selection import train_test_split, StratifiedKFold\nfrom wordcloud import WordCloud\nfrom collections import Counter\nfrom nltk.corpus import stopwords\nfrom nltk.util import ngrams\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.preprocessing import LabelEncoder\nle = LabelEncoder()\nimport os\nimport xgboost as xgb\nimport lightgbm as lgb\n\nimport os\nimport matplotlib.pyplot as plt\n%matplotlib inline\npd.set_option('max_columns', 150)","a55ee4c0":"folder = '..\/input\/'\napplication_train = pd.read_csv(os.path.join(folder, 'application_train.csv'))\napplication_test = pd.read_csv(os.path.join(folder, 'application_test.csv'))\nbureau = pd.read_csv(os.path.join(folder, 'bureau.csv'))\nbureau_balance = pd.read_csv(os.path.join(folder, 'bureau_balance.csv'))\nPOS_CASH_balance = pd.read_csv(os.path.join(folder, 'POS_CASH_balance.csv'))\ncredit_card_balance = pd.read_csv(os.path.join(folder, 'credit_card_balance.csv'))\nprevious_application = pd.read_csv(os.path.join(folder, 'previous_application.csv'))\ninstallments_payments = pd.read_csv(os.path.join(folder, 'installments_payments.csv'))\nsample_submission = pd.read_csv(os.path.join(folder, 'sample_submission.csv'))","8b145b3e":"application_train.head()","13f541b7":"application_train.TARGET.value_counts(normalize=True)","2d66b187":"pd.crosstab(application_train.TARGET, application_train.NAME_CONTRACT_TYPE, dropna=False, normalize='all')","c547dfc8":"pd.crosstab(application_train.TARGET, application_train.CODE_GENDER, dropna=False)","fc442f12":"print('There are {0} people with realty. {1}% of them repay loans.'.format(application_train[application_train.FLAG_OWN_REALTY == 'Y'].shape[0], np.round(application_train[application_train.FLAG_OWN_REALTY == 'Y'].TARGET.value_counts(normalize=True).values[1], 3) * 100))\nprint('There are {0} people with cars. {1}% of them repay loans.'.format(application_train[application_train.FLAG_OWN_CAR == 'Y'].shape[0], np.round(application_train[application_train.FLAG_OWN_CAR == 'Y'].TARGET.value_counts(normalize=True).values[1], 4) * 100))\nprint('Average age of the car is {:.2f} years.'.format(application_train.groupby(['FLAG_OWN_CAR'])['OWN_CAR_AGE'].mean().values[1]))","32526247":"pd.crosstab(application_train.CNT_CHILDREN, application_train.NAME_FAMILY_STATUS, dropna=False)","2c4cf9f1":"pd.crosstab(application_train.CNT_CHILDREN, application_train.CNT_FAM_MEMBERS, dropna=False)","c61c68e5":"application_train['NAME_TYPE_SUITE'].value_counts(dropna=False)","00983faa":"pd.crosstab(application_train.NAME_TYPE_SUITE, application_train.NAME_FAMILY_STATUS, dropna=False)","9520791b":"application_train.groupby(['NAME_INCOME_TYPE']).agg({'AMT_INCOME_TOTAL': ['mean', 'median', 'count']})","199626aa":"application_train[application_train['NAME_INCOME_TYPE'] == 'Maternity leave']['CODE_GENDER'].value_counts()\n","35138116":"s = pd.crosstab(application_train.NAME_INCOME_TYPE, application_train.OCCUPATION_TYPE, dropna=False).style.background_gradient(cmap='viridis', low=.5, high=0).highlight_null('red')\ns","31ae2929":"print('{0} zero values.'.format(application_train[application_train['AMT_GOODS_PRICE'].isnull()].shape[0]))","4695831f":"non_zero_good_price = application_train[application_train['AMT_GOODS_PRICE'].isnull() == False]\ncredit_to_good_price = non_zero_good_price['AMT_CREDIT'] \/ non_zero_good_price['AMT_GOODS_PRICE']\nplt.boxplot(credit_to_good_price);\nplt.title('Credit amount to goods price.');","5b313f80":"sns.countplot(application_train['NAME_HOUSING_TYPE']);\nplt.xticks(rotation=45);\nplt.title('Counts of housing type')","4a4fc9e2":"application_train['contact_info'] = application_train['FLAG_MOBIL'] + application_train['FLAG_EMP_PHONE'] + application_train['FLAG_WORK_PHONE'] + application_train['FLAG_CONT_MOBILE'] + application_train['FLAG_PHONE'] + application_train['FLAG_EMAIL']\nsns.countplot(application_train['contact_info']);\nplt.title('Count of ways to contact client');","d6f9adfd":"application_train.loc[application_train['OBS_30_CNT_SOCIAL_CIRCLE'] > 1, 'OBS_30_CNT_SOCIAL_CIRCLE'] = '1+'\napplication_train.loc[application_train['DEF_30_CNT_SOCIAL_CIRCLE'] > 1, 'DEF_30_CNT_SOCIAL_CIRCLE'] = '1+'\napplication_train.loc[application_train['OBS_60_CNT_SOCIAL_CIRCLE'] > 1, 'OBS_60_CNT_SOCIAL_CIRCLE'] = '1+'\napplication_train.loc[application_train['DEF_60_CNT_SOCIAL_CIRCLE'] > 1, 'DEF_60_CNT_SOCIAL_CIRCLE'] = '1+'\n","f66f3faf":"fig, ax = plt.subplots(figsize = (30, 8))\nplt.subplot(1, 4, 1)\nsns.countplot(application_train['OBS_30_CNT_SOCIAL_CIRCLE']);\nplt.subplot(1, 4, 2)\nsns.countplot(application_train['DEF_30_CNT_SOCIAL_CIRCLE']);\nplt.subplot(1, 4, 3)\nsns.countplot(application_train['OBS_60_CNT_SOCIAL_CIRCLE']);\nplt.subplot(1, 4, 4)\nsns.countplot(application_train['DEF_60_CNT_SOCIAL_CIRCLE']);","fc0b23b1":"sns.boxplot(application_train['AMT_INCOME_TOTAL']);\nplt.title('AMT_INCOME_TOTAL boxplot');","d746aff1":"sns.boxplot(application_train[application_train['AMT_INCOME_TOTAL'] < np.percentile(application_train['AMT_INCOME_TOTAL'], 90)]['AMT_INCOME_TOTAL']);\nplt.title('AMT_INCOME_TOTAL boxplot on data within 90 percentile');","7bd4eddf":"application_train.groupby('TARGET').agg({'AMT_INCOME_TOTAL': ['mean', 'median', 'count']})","ed9f4dcf":"plt.hist(application_train['AMT_INCOME_TOTAL']);\nplt.title('AMT_INCOME_TOTAL histogram');","baa823bf":"plt.hist(application_train[application_train['AMT_INCOME_TOTAL'] < np.percentile(application_train['AMT_INCOME_TOTAL'], 90)]['AMT_INCOME_TOTAL']);\nplt.title('AMT_INCOME_TOTAL histogram on data within 90 percentile');","b3a27de8":"plt.hist(np.log1p(application_train['AMT_INCOME_TOTAL']));\nplt.title('AMT_INCOME_TOTAL histogram on data with log1p transformation');","4905580c":"sns.boxplot(application_train['AMT_CREDIT'], orient='v');\nplt.title('AMT_CREDIT boxplot');","eeadd3e5":"sns.boxplot(application_train[application_train['AMT_CREDIT'] < np.percentile(application_train['AMT_CREDIT'], 95)]['AMT_CREDIT'], orient='v');\nplt.title('AMT_CREDIT boxplot on data within 90 percentile');","bf98d74f":"application_train.groupby('TARGET').agg({'AMT_CREDIT': ['mean', 'median', 'count']})","767b798d":"plt.hist(application_train['AMT_CREDIT']);\nplt.title('AMT_CREDIT histogram');","ffa4be7f":"plt.hist(application_train[application_train['AMT_CREDIT'] < np.percentile(application_train['AMT_CREDIT'], 90)]['AMT_CREDIT']);\nplt.title('AMT_INCOME_TOTAL histogram on data within 90 percentile');","2ebcd36f":"plt.hist(np.log1p(application_train['AMT_CREDIT']));\nplt.title('AMT_CREDIT histogram on data with log1p transformation');","288f9cad":"application_train['age'] = application_train['DAYS_BIRTH'] \/ -365\nplt.hist(application_train['age']);\nplt.title('Histogram of age in years.');","2ac8b94b":"application_train.loc[application_train['DAYS_EMPLOYED'] == 365243, 'DAYS_EMPLOYED'] = 0\napplication_train['years_employed'] = application_train['DAYS_EMPLOYED'] \/ -365\nplt.hist(application_train['years_employed']);\nplt.title('Length of working at current workplace in years.');","b84cba81":"application_train.groupby(['NAME_INCOME_TYPE']).agg({'years_employed': ['mean', 'median', 'count', 'max'], 'age': ['median']})","5526db39":"application_train.groupby(['NAME_EDUCATION_TYPE', 'NAME_INCOME_TYPE']).agg({'AMT_INCOME_TOTAL': ['mean', 'median', 'count', 'max']})","265a2ae1":"application_train['AMT_INCOME_TOTAL'] = np.log1p(application_train['AMT_INCOME_TOTAL'])\napplication_train['AMT_CREDIT'] = np.log1p(application_train['AMT_CREDIT'])\napplication_train['OWN_CAR_AGE'] = application_train['OWN_CAR_AGE'].fillna(0)\napplication_train['app AMT_CREDIT \/ AMT_ANNUITY'] = application_train['AMT_CREDIT'] \/ application_train['AMT_ANNUITY']\napplication_train['app EXT_SOURCE mean'] = application_train[['EXT_SOURCE_1', 'EXT_SOURCE_2', 'EXT_SOURCE_3']].mean(axis = 1)\napplication_train['app EXT_SOURCE_1 \/ DAYS_BIRTH'] = application_train['EXT_SOURCE_1'] \/ application_train['DAYS_BIRTH']\napplication_train['app AMT_INCOME_TOTAL \/ 12 - AMT_ANNUITY'] = application_train['AMT_INCOME_TOTAL'] \/ 12. - application_train['AMT_ANNUITY']\napplication_train['app AMT_INCOME_TOTAL \/ AMT_ANNUITY'] = application_train['AMT_INCOME_TOTAL'] \/ application_train['AMT_ANNUITY']\napplication_train['app AMT_INCOME_TOTAL - AMT_GOODS_PRICE'] = application_train['AMT_INCOME_TOTAL'] - application_train['AMT_GOODS_PRICE']","a6523f95":"application_test.loc[application_test['OBS_30_CNT_SOCIAL_CIRCLE'] > 1, 'OBS_30_CNT_SOCIAL_CIRCLE'] = '1+'\napplication_test.loc[application_test['DEF_30_CNT_SOCIAL_CIRCLE'] > 1, 'DEF_30_CNT_SOCIAL_CIRCLE'] = '1+'\napplication_test.loc[application_test['OBS_60_CNT_SOCIAL_CIRCLE'] > 1, 'OBS_60_CNT_SOCIAL_CIRCLE'] = '1+'\napplication_test.loc[application_test['DEF_60_CNT_SOCIAL_CIRCLE'] > 1, 'DEF_60_CNT_SOCIAL_CIRCLE'] = '1+'\nnp.log1p(application_test['AMT_INCOME_TOTAL'])\nnp.log1p(application_test['AMT_CREDIT'])\napplication_test['age'] = application_test['DAYS_BIRTH'] \/ -365\napplication_test.loc[application_test['DAYS_EMPLOYED'] == 365243, 'DAYS_EMPLOYED'] = 0\napplication_test['years_employed'] = application_test['DAYS_EMPLOYED'] \/ -365\napplication_test['AMT_INCOME_TOTAL'] = np.log1p(application_test['AMT_INCOME_TOTAL'])\napplication_test['AMT_CREDIT'] = np.log1p(application_test['AMT_CREDIT'])\napplication_test['OWN_CAR_AGE'] = application_test['OWN_CAR_AGE'].fillna(0)\napplication_test['app AMT_CREDIT \/ AMT_ANNUITY'] = application_test['AMT_CREDIT'] \/ application_test['AMT_ANNUITY']\napplication_test['app EXT_SOURCE mean'] = application_test[['EXT_SOURCE_1', 'EXT_SOURCE_2', 'EXT_SOURCE_3']].mean(axis = 1)\napplication_test['app EXT_SOURCE_1 \/ DAYS_BIRTH'] = application_test['EXT_SOURCE_1'] \/ application_test['DAYS_BIRTH']\napplication_test['app AMT_INCOME_TOTAL \/ 12 - AMT_ANNUITY'] = application_test['AMT_INCOME_TOTAL'] \/ 12. - application_test['AMT_ANNUITY']\napplication_test['app AMT_INCOME_TOTAL \/ AMT_ANNUITY'] = application_test['AMT_INCOME_TOTAL'] \/ application_test['AMT_ANNUITY']\napplication_test['app AMT_INCOME_TOTAL - AMT_GOODS_PRICE'] = application_test['AMT_INCOME_TOTAL'] - application_test['AMT_GOODS_PRICE']","d847eded":"for col in ['FONDKAPREMONT_MODE', 'HOUSETYPE_MODE', 'WALLSMATERIAL_MODE', 'EMERGENCYSTATE_MODE', 'OBS_30_CNT_SOCIAL_CIRCLE', 'DEF_30_CNT_SOCIAL_CIRCLE', 'OBS_60_CNT_SOCIAL_CIRCLE', 'DEF_60_CNT_SOCIAL_CIRCLE',\n           'NAME_CONTRACT_TYPE', 'CODE_GENDER', 'FLAG_OWN_CAR', 'FLAG_OWN_REALTY', 'NAME_TYPE_SUITE', 'NAME_INCOME_TYPE', 'NAME_EDUCATION_TYPE', 'NAME_FAMILY_STATUS', 'NAME_HOUSING_TYPE', 'OCCUPATION_TYPE',\n            'WEEKDAY_APPR_PROCESS_START', 'ORGANIZATION_TYPE', 'WEEKDAY_APPR_PROCESS_START']:\n    unique_values = list(set(list(application_train[col].astype(str).unique()) + list(application_test[col].astype(str).unique())))\n    le.fit(unique_values)\n    application_train[col] = le.transform(application_train[col].astype(str))\n    application_test[col] = le.transform(application_test[col].astype(str))","ce600561":"train = application_train","b4c5095e":"train.head()","ede1fd93":"test = application_test","f7d5bd25":"train = train.fillna(0)\ntest = test.fillna(0)","ef18d55b":"X = train.drop(['SK_ID_CURR','contact_info', 'TARGET'], axis=1)\ny = train['TARGET']\nX_test = test.drop(['SK_ID_CURR'], axis=1)","594f7e12":"X_train, X_valid, y_train, y_valid = train_test_split(X, y, test_size=0.20, random_state=42)\nparams = {\n    'boosting': 'dart',\n    'application': 'binary',\n    'learning_rate': 0.01,\n    'num_leaves': 34,\n    'max_depth': 5,\n    'feature_fraction': 0.9,\n    'scale_pos_weight': 2,\n    'reg_alpha': 0.05,\n    'reg_lambda': 0.1}\nmodel = lgb.train(params, lgb.Dataset(X_train, y_train), 1000, [lgb.Dataset(X_train, y_train), lgb.Dataset(X_valid, y_valid)], verbose_eval=10, early_stopping_rounds=20)","0f437ba6":"lgb.plot_importance(model, max_num_features=30, figsize=(24, 18))","7ee76548":"folds = StratifiedKFold(n_splits=10, shuffle=True, random_state=42)\nparams={'colsample_bytree': 0.8,\n 'learning_rate': 0.01,\n 'num_leaves': 34,\n 'subsample': 0.97,\n 'max_depth': 8,\n 'reg_alpha': 0.03,\n 'reg_lambda': 0.07,\n 'min_split_gain': 0.01,\n #'min_child_weight': 38\n       }\nprediction = np.zeros(X_test.shape[0])\nfor n_fold, (train_idx, valid_idx) in enumerate(folds.split(X, y)):\n        train_x, train_y = X.iloc[train_idx], y.iloc[train_idx]\n        valid_x, valid_y = X.iloc[valid_idx], y.iloc[valid_idx]\n        clf = lgb.LGBMClassifier(**params)\n        clf.fit(train_x, train_y, \n                eval_set = [(train_x, train_y), (valid_x, valid_y)], eval_metric = 'auc', \n                verbose = 100, early_stopping_rounds = 50)\n        prediction += clf.predict(X_test)","4be73724":"sub = test[['SK_ID_CURR']].copy()\nsub['TARGET'] = prediction \/ 10\nsub.to_csv('sub.csv', index= False)","c8726be1":"# deliquencies\n\nIt is very important to see how many times clients was late with payments or defaulted his loans. I suppose info about his social circle is also important. I'll divide values into 2 groups: 0, 1 and more than 1.","65b1f3f0":"We can see that there are 4 categories with little amount of people in them: several high-income businessmen, 4 women and 1 man on maternity leave, and some unemployed\/students. It is quite interesting that unemployed\/students have quite a high income.\nAnd of course, most of the people work.","0ddb303c":"##### NAME_HOUSING_TYPE","df8125d6":"##### CODE_GENDER","c49e9cc1":"We can see following things from the information above:\n- income feature has some huge outliers. This could be due to rich individuals or due to errors in data;\n- average income is almost similar for those who repay the loans and those who don't;\n- if we leave only data within 90 percentile, it is almost normally distributed;\n- log transformation also helps;","73d02ee2":"We can see that age distribution is almost normal and most of the people are between 30 and 40 years.","35d17a91":"#### Continuous variables","043fd6a8":"##### DAYS_EMPLOYED","3cb266e0":"##### FLAG_OWN_CAR and FLAG_OWN_REALTY","441322c5":"It is interesting to see that these two variables sometimes contradict each other. For example, separated, single or widowed applicants were sometimes accompanied by their partner. I suppose this means unofficial relationships? Also sometimes children accompanied the applicant. Maybe these were adult childred?","94d188c6":"We have 122 columns in just main file! Let's take a look on some of them.","bea09968":"This was EDA and basic feature engineering. I know that feature engineering and modelling could be much better, but decided to make EDA the main focus of this kernel. I'll do better feature engineering and modelling in the next one.","17d83489":"Ther was a strange value - 365243, it could mean empty values or some errors, so I replace it with zero.\nA lot of people don't work, but let's look deeper into this.","695c7800":"##### Target","a0d200b1":"# Home Credit Default Risk\n\nThis kernel will contain EDA, visualization, feature engineering and some modelling. Work currently in progress.","2b450ea3":"### application_train and application_test\nThese are main files with data and technically we can use only them to make predictions. Obviously using additional data is necessary to improve score.","28dcc3e2":"We can see that most of the loans are taken by working people with secondary education.","8e9be9b1":"##### NAME_CONTRACT_TYPE","3606789f":"Well, it seems that a lot of non-working people are pensioners, which is normal. As for working people - they seem to work for several years at one place.","a16812ce":"Ther are so many features and so many possible angles from which we can analyze them. Let's see this for example:","5e7f8ac8":"There are several files with data, let's go through them step by step.","3993a2c4":"##### DAYS_BIRTH","a0e41923":"It isn't surprising that there are a lot of families consisting of two or one adults. Also there are families with two adults and 1-2 children.","b1f2ac98":"##### NAME_TYPE_SUITE\nThis feature shows who was accompanying client when he was applying for the loan.","45d72976":"## Transforming and merging data","3f6c6ee6":"#### Categorical features","01bb1bcf":"We can see that women take more loans and higher percentage of them repays the loans. And there are 4 people with unindentified gender, who repayed their loans :)","f715e5f5":"So this means that only 278 loans have some other type. Let's fo deeper.","d30b7920":"We can see that most of the loans have the amount which is similar to the goods price, but there are some outliers.","a6c86314":"##### AMT_INCOME_TOTAL","77e65b51":"This feature shows the amount of the loan in question.\nWe can see following things from the information above:\n- income feature has some outliers. Maybe mortgage?;\n- average credit amoint is almost similar for those who repay the loans and those who don't;\n- if we leave only data within 95 percentile, it is almost normally distributed;\n- log transformation also helps;","0e68644c":"##### Contact information\nThere are 6 features showing that client provided some contact information, let's see how many ways of contact clients usually provide.","dd452b92":"We can see that there are two types of contract - cash loans and revolving loans. Most of the loans are cash loans which are defaulted.","c6fd7fc0":"##### AMT_GOODS_PRICE\nFor consumer loans it is the price of the goods for which the loan is given","c390533f":"## Basic modelling, LGB","95db83d3":"##### CNT_CHILDREN and NAME_FAMILY_STATUS","99e6479e":"We can see that most of the people are married and have zero children. In face we can divide people into two group based on their family status - living together with their partner or single.","78af0934":"##### AMT_CREDIT","197bce7e":"We have disbalanced target, though disbalance isn't really serious.","1fa66368":"##### NAME_INCOME_TYPE","71a8e760":"## Data Exploration","333a202e":"Most clients provide 3 ways to contact them and usually minimus is 2, if we don't consider several people who left only 1."}}