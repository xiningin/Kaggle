{"cell_type":{"ab333133":"code","e889f578":"code","96ecc0db":"code","fde3a5b5":"code","13e81eb7":"code","2d1e54fb":"code","8ba3182b":"code","70e5bfe2":"code","cab1d761":"code","f8ab2c1a":"code","783cc95f":"code","d7de7659":"code","20c2446c":"code","eb58df08":"code","09227946":"code","7a456684":"code","5d2daf09":"code","167dae04":"code","7ac7d282":"code","09788d03":"code","a5fc553c":"code","f231dafb":"code","367fb676":"markdown","ed2ce519":"markdown","265c6d12":"markdown","1b1b5381":"markdown","1223c3f6":"markdown","e04419d1":"markdown","2134d880":"markdown","400ab3a4":"markdown","09b764ff":"markdown","5866e30d":"markdown","00a17f50":"markdown","08ba6c08":"markdown","0bb51fcd":"markdown","ab9d33ed":"markdown","bc6d9363":"markdown","7679750d":"markdown","1c51d182":"markdown","992941b7":"markdown","4eb61b3b":"markdown","7a13f31e":"markdown"},"source":{"ab333133":"import pandas as pd\nimport numpy as np\nfrom keras.utils import to_categorical\nimport os\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.model_selection import train_test_split\n\nfrom keras.layers import Input, Dense, BatchNormalization, Add, GaussianNoise, Dropout\nfrom keras.models import Model\nfrom keras import regularizers\nfrom keras import optimizers\nimport re\n\nimport matplotlib.pyplot as plt\nfrom sklearn.metrics import roc_auc_score","e889f578":"precisiones_globales=[]\ndef graf_model(train_history):\n    f = plt.figure(figsize=(15,10))\n    ax = f.add_subplot(121)\n    ax2 = f.add_subplot(122)\n    # summarize history for accuracy\n    ax.plot(train_history.history['binary_accuracy'])\n    ax.plot(train_history.history['val_binary_accuracy'])\n    ax.set_title('model accuracy')\n    ax.set_ylabel('accuracy')\n    ax.set_xlabel('epoch')\n    ax.legend(['train', 'test'], loc='upper left')\n    # summarize history for loss\n    ax2.plot(train_history.history['loss'])\n    ax2.plot(train_history.history['val_loss'])\n    ax2.set_title('model loss')\n    ax2.set_ylabel('loss')\n    ax2.set_xlabel('epoch')\n    ax2.legend(['train', 'test'], loc='upper left')\n    plt.show()\ndef precision(model, registrar=False):\n    y_pred = model.predict(train_dfX)\n    train_auc = roc_auc_score(train_dfY, y_pred)\n    y_pred = model.predict(val_dfX)\n    val_auc = roc_auc_score(val_dfY, y_pred)\n    print('Train AUC: ', train_auc)\n    print('Vali AUC: ', val_auc)\n    if registrar:\n        precisiones_globales.append([train_auc,val_auc])","96ecc0db":"train_df = pd.read_csv('..\/input\/titanic\/train.csv')\ntest_df = pd.read_csv(\"..\/input\/titanic\/test.csv\")\ntrain_dfX = train_df.drop(['PassengerId', 'Survived','Ticket'], axis=1)\ntrain_dfY = train_df['Survived']\nsubmission = test_df[['PassengerId']].copy()\ntest_df = test_df.drop(['PassengerId','Ticket'], axis=1)\nprint(\"Train shape : \",train_dfX.shape)\nprint(\"Test shape : \",test_df.shape)","fde3a5b5":"train_dfX.Embarked[train_dfX.Embarked == 'S'] = 1\ntrain_dfX.Embarked[train_dfX.Embarked == 'Q'] = 2\ntrain_dfX.Embarked[train_dfX.Embarked == 'C'] = 3\n\ntest_df.Embarked[test_df.Embarked == 'S'] = 1\ntest_df.Embarked[test_df.Embarked == 'Q'] = 2\ntest_df.Embarked[test_df.Embarked == 'C'] = 3\n\ntrain_dfX.Sex[train_dfX.Sex == 'male'] = 0\ntrain_dfX.Sex[train_dfX.Sex == 'female'] = 1\n\ntest_df.Sex[test_df.Sex == 'male'] = 0\ntest_df.Sex[test_df.Sex == 'female'] = 1","13e81eb7":"array_test=test_df.values\narray_trainx=train_dfX.values","2d1e54fb":"for i in range(891):\n    if pd.isnull(array_trainx[i][7]):\n        array_trainx[i][7]=0\n    elif (not pd.isnull(array_trainx[i][7])) and array_trainx[i][7][:1]=='A':\n        array_trainx[i][7]=1\n    elif (not pd.isnull(array_trainx[i][7])) and array_trainx[i][7][:1]=='B':\n        array_trainx[i][7]=2\n    elif (not pd.isnull(array_trainx[i][7])) and array_trainx[i][7][:1]=='C':\n        array_trainx[i][7]=3\n    elif (not pd.isnull(array_trainx[i][7])) and array_trainx[i][7][:1]=='D':\n        array_trainx[i][7]=4\n    elif (not pd.isnull(array_trainx[i][7])) and array_trainx[i][7][:1]=='E':\n        array_trainx[i][7]=5\n    elif (not pd.isnull(array_trainx[i][7])) and array_trainx[i][7][:1]=='F':\n        array_trainx[i][7]=6\n    elif (not pd.isnull(array_trainx[i][7])) and array_trainx[i][7][:1]=='G':\n        array_trainx[i][7]=7\n    else:\n        array_trainx[i][7]=8\n ","8ba3182b":"for i in range(418):\n    if pd.isnull(array_test[i][7]):\n        array_test[i][7]=0\n    elif (not pd.isnull(array_test[i][7])) and array_test[i][7][:1]=='A':\n        array_test[i][7]=1\n    elif (not pd.isnull(array_test[i][7])) and array_test[i][7][:1]=='B':\n        array_test[i][7]=2\n    elif (not pd.isnull(array_test[i][7])) and array_test[i][7][:1]=='C':\n        array_test[i][7]=3\n    elif (not pd.isnull(array_test[i][7])) and array_test[i][7][:1]=='D':\n        array_test[i][7]=4\n    elif (not pd.isnull(array_test[i][7])) and array_test[i][7][:1]=='E':\n        array_test[i][7]=5\n    elif (not pd.isnull(array_test[i][7])) and array_test[i][7][:1]=='F':\n        array_test[i][7]=6\n    elif (not pd.isnull(array_test[i][7])) and array_test[i][7][:1]=='G':\n        array_test[i][7]=7\n    else:\n        array_test[i][7]=0","70e5bfe2":"traincabin=np.zeros((1,891))\ncont1=0\nfor x in range(891):\n    traincabin[0][x]=array_trainx[x][7]\n\n\none_hot_cabin=to_categorical(traincabin)\nprint(one_hot_cabin.shape)\none_hot_cabin=np.reshape(one_hot_cabin,(891,9))\none_hot_cabin=one_hot_cabin[:,[0,1,2,3,4,5,6,7]]\nprint(one_hot_cabin.shape)","cab1d761":"testcabin=np.zeros((1,418))\ncont1=0\nfor x in range(418):\n    testcabin[0][x]=array_test[x][7]\n\n\none_hot_cabintest=to_categorical(testcabin)\nprint(one_hot_cabintest.shape)\none_hot_cabintest=np.reshape(one_hot_cabintest,(418,8))","f8ab2c1a":"\n\n\nfor i in range(891):\n    \n    m = re.search(', (.+?) ', array_trainx[i][1])\n    if m:\n        found = m.group(1)\n    #print(m.group(1))\n    \nfor ii in range(418):\n    \n    mm = re.search(', (.+?) ', array_test[ii][1])\n    if mm:\n        found = mm.group(1)\n        #print(m.group(1))\n\na = 'Mr.'    \nb = 'Mrs.'\nc = 'Miss.'\nd = 'Ms.'\ne = 'Master.'\nf = 'Don.'\ng = 'Rev.'\nh = 'Dr.'\ni = 'Mme.'\nj = 'Major.'\nk = 'Lady.'\nl = 'Sir.'\nz = 'Mlle.'\nn = 'Col.'\no = 'Capt.'\np = 'Jonkheer.'\nq = 'the'\n\nauxnametrain=np.zeros((891,1))\nfor x in range(891):\n    m = re.search(', (.+?) ', array_trainx[x][1])\n    m=m.group(1)\n    if (m==a):\n        auxnametrain[x][0]=1\n    elif (m==b):\n        auxnametrain[x][0]=2\n    elif (m==c):\n        auxnametrain[x][0]=3\n    elif (m==d):\n        auxnametrain[x][0]=4\n    elif (m==e):\n        auxnametrain[x][0]=5\n    else :\n        auxnametrain[x][0]=6\n        \n        \nauxnametest=np.zeros((418,1))\nfor xx in range(418):\n    mm = re.search(', (.+?) ', array_test[xx][1])\n    mm=mm.group(1)\n    if (mm==a):\n        auxnametest[xx][0]=1\n    elif (mm==b):\n        auxnametest[xx][0]=2\n    elif (mm==c):\n        auxnametest[xx][0]=3\n    elif (mm==d):\n        auxnametest[xx][0]=4\n    elif (mm==e):\n        auxnametest[xx][0]=5\n    else :\n        auxnametest[xx][0]=6\n    '''\n    elif (m==g):\n        aux[x][0]=7\n    elif (m==h):\n        aux[x][0]=8\n    elif (m==i):\n        aux[x][0]=9\n    elif (m==j):\n        aux[x][0]=10\n    elif (m==k):\n        aux[x][0]=11\n    elif (m==l):\n        aux[x][0]=12\n    elif (m==z):\n        aux[x][0]=13\n    elif (m==n):\n        aux[x][0]=14\n    elif (m==o):\n        aux[x][0]=15\n    elif (m==p):\n        aux[x][0]=16\n    elif (m==q):\n        aux[x][0]=17 '''\n","783cc95f":"auxnametrain=auxnametrain.T\n\none_hot_name=to_categorical(auxnametrain)\n\none_hot_name=np.reshape(one_hot_name,(891,7))\none_hot_name= np.delete(one_hot_name, 0, 1)\n#print(one_hot_name.shape)\n#print(one_hot_name)\n\nauxnametest=auxnametest.T\n\none_hot_nametest=to_categorical(auxnametest)\n\none_hot_nametest=np.reshape(one_hot_nametest,(418,7))\none_hot_nametest= np.delete(one_hot_nametest, 0, 1)\n#print(one_hot_nametest.shape)\n#print(one_hot_name)\n","d7de7659":"\nsumaMR=0\ncontMR=0\nsumaMRs=0\ncontMRs=0\nsumaMiss=0\ncontMiss=0\nsumaMs=0\ncontMs=0\nsumaMaster=0\ncontMaster=0\nsumaotros=0\ncontotros=0\nfor x in range(891):\n    if (not np.isnan(array_trainx[x][3])) and auxnametrain[0][x]==1:\n        sumaMR=sumaMR+array_trainx[x][3]\n        contMR=contMR+1\n        \n    elif (not np.isnan(array_trainx[x][3])) and auxnametrain[0][x]==2 :\n        sumaMRs=sumaMRs+array_trainx[x][3]\n        contMRs=contMRs+1\n   \n    elif (not np.isnan(array_trainx[x][3])) and auxnametrain[0][x]==3 :\n        sumaMiss=sumaMiss+array_trainx[x][3]\n        contMiss=contMiss+1\n    \n    elif (not np.isnan(array_trainx[x][3])) and auxnametrain[0][x]==4 :\n        sumaMs=sumaMs+array_trainx[x][3]\n        contMs=contMs+1\n        \n    elif (not np.isnan(array_trainx[x][3])) and auxnametrain[0][x]==5 :\n        sumaMaster=sumaMaster+array_trainx[x][3]\n        contMaster=contMaster+1\n        \n    elif (not np.isnan(array_trainx[x][3])) and auxnametrain[0][x]==6 :\n        sumaotros=sumaotros+array_trainx[x][3]\n        contotros=contotros+1\n\n        \n        \n        \n        \npromMR=sumaMR\/contMR\npromMRs=sumaMRs\/contMRs\npromMiss=sumaMiss\/contMiss\npromMs=sumaMs\/contMs\npromMaster=sumaMaster\/contMaster\npromotros=sumaotros\/contotros\n\nprint(\"el promdedio de edad en el training set de los MR es: \" + str(promMR))\nprint(\"el promdedio de edad en el training set de los MRs es: \" + str(promMRs))\nprint(\"el promdedio de edad en el training set de las Miss es: \" + str(promMiss))\nprint(\"el promdedio de edad en el training set de los Ms es: \" + str(promMs))\nprint(\"el promdedio de edad en el training set de los Master es: \" + str(promMaster))\nprint(\"el promdedio de edad en el training set de otros es: \" + str(promotros))\n\n\n\nsumaMRtest=0\ncontMRtest=0\nsumaMRstest=0\ncontMRstest=0\nsumaMisstest=0\ncontMisstest=0\nsumaMstest=0\ncontMstest=0\nsumaMastertest=0\ncontMastertest=0\nsumaotrostest=0\ncontotrostest=0\n\nfor x in range(418):\n         \n    if (not np.isnan(array_test[x][3])) and auxnametest[0][x]==1:\n        sumaMRtest=sumaMRtest+array_test[x][3]\n        contMRtest=contMRtest+1\n        \n    elif (not np.isnan(array_test[x][3])) and auxnametest[0][x]==2 :\n        sumaMRstest=sumaMRstest+array_test[x][3]\n        contMRstest=contMRstest+1\n   \n    elif (not np.isnan(array_test[x][3])) and auxnametest[0][x]==3 :\n        sumaMisstest=sumaMisstest+array_test[x][3]\n        contMisstest=contMisstest+1\n    \n    elif (not np.isnan(array_test[x][3])) and auxnametest[0][x]==4 :\n        sumaMstest=sumaMstest+array_test[x][3]\n        contMstest=contMstest+1\n        \n    elif (not np.isnan(array_test[x][3])) and auxnametest[0][x]==5 :\n        sumaMastertest=sumaMastertest+array_test[x][3]\n        contMastertest=contMastertest+1\n        \n    elif (not np.isnan(array_test[x][3])) and auxnametest[0][x]==6 :\n        sumaotrostest=sumaotrostest+array_test[x][3]\n        contotrostest=contotrostest+1\n        \npromMRtest=sumaMRtest\/contMRtest\npromMRstest=sumaMRstest\/contMRstest\npromMisstest=sumaMisstest\/contMisstest\n#promMstest=sumaMstest\/contMstest\npromMastertest=sumaMastertest\/contMastertest\npromotrostest=sumaotrostest\/contotrostest\n\nprint(\"el promdedio de edad en el test set de los MR es: \" + str(promMRtest))\nprint(\"el promdedio de edad en el test set de los MRs es: \" + str(promMRstest))\nprint(\"el promdedio de edad en el test set de las Miss es: \" + str(promMisstest))\n#print(\"el promdedio de edad en el test set de los Ms es: \" + str(promMstest))\nprint(\"el promdedio de edad en el test set de los Master es: \" + str(promMastertest))\nprint(\"el promdedio de edad en el test set de otros es: \" + str(promotrostest))\n","20c2446c":"for x in range(891):\n    if  np.isnan(array_trainx[x][3]) and auxnametrain[0][x]==1 :\n        array_trainx[x][3]=promMR\n    elif np.isnan(array_trainx[x][3]) and auxnametrain[0][x]==2 :\n        array_trainx[x][3]=promMRs\n    elif np.isnan(array_trainx[x][3]) and auxnametrain[0][x]==3 :\n        array_trainx[x][3]=promMiss\n    elif np.isnan(array_trainx[x][3]) and auxnametrain[0][x]==4 :\n        array_trainx[x][3]=promMs\n    elif np.isnan(array_trainx[x][3]) and auxnametrain[0][x]==5 :\n        array_trainx[x][3]=promMaster\n    elif np.isnan(array_trainx[x][3]) and auxnametrain[0][x]==6:\n        array_trainx[x][3]=promotros\n        \n\nfor xx in range(418):\n   \n    if  np.isnan(array_test[xx][3]) and auxnametest[0][xx]==1 :\n        array_test[xx][3]=promMRtest\n    elif np.isnan(array_test[xx][3]) and auxnametest[0][xx]==2 :\n        array_test[xx][3]=promMRstest\n    elif np.isnan(array_test[xx][3]) and auxnametest[0][xx]==3 :\n        array_test[xx][3]=promMisstest\n    elif np.isnan(array_test[xx][3]) and auxnametest[0][xx]==4 :\n        array_test[xx][3]=promotrostest\n    elif np.isnan(array_test[xx][3]) and auxnametest[0][xx]==5 :\n        array_test[xx][3]=promMastertest\n    elif np.isnan(array_test[xx][3]) and auxnametest[0][xx]==6:\n        array_test[xx][3]=promotrostest\n        \n","eb58df08":"aux=np.zeros((1,891))\nauxtest=np.zeros((1,418))\n\nfor x in range(891):\n    \n    if not np.isnan(array_trainx[x][8]):\n        aux[0][x]=array_trainx[x][8]\n    else:\n        aux[0][x]=0\n\n\nfor xx in range(418):\n    \n    if not np.isnan(array_test[xx][8]):\n        auxtest[0][xx]=array_test[xx][8]\n    else:\n        auxtest[0][xx]=0\none_hot_embarked=to_categorical(aux)\n#print(one_hot_embarked.shape)\none_hot_embarked=np.reshape(one_hot_embarked,(891,4))\n#print(one_hot_embarked.shape)\n#print(one_hot_embarked)\n\none_hot_embarkedtest=to_categorical(auxtest)\none_hot_embarkedtest=np.reshape(one_hot_embarkedtest,(418,4))","09227946":"aux2=np.zeros((1,891))\ncont1=0\nfor x in range(891):\n    \n    if not np.isnan(array_trainx[x][0]):\n        aux2[0][x]=array_trainx[x][0]\n        \n    else:\n        aux2[0][x]=0\n\n\none_hot_pclass=to_categorical(aux2)\none_hot_pclass=np.reshape(one_hot_pclass,(891,4))\none_hot_pclass= np.delete(one_hot_pclass, 0, 1)\n\n\nauxtest2=np.zeros((1,418))\ncont3=0\nfor xx in range(418):\n    \n    if not np.isnan(array_test[xx][0]):\n        auxtest2[0][xx]=array_test[xx][0]\n        \n    else:\n        auxtest2[0][xx]=0\n\n\none_hot_pclasstest=to_categorical(auxtest2)\none_hot_pclasstest=np.reshape(one_hot_pclasstest,(418,4))\none_hot_pclasstest= np.delete(one_hot_pclasstest, 0, 1)","7a456684":"trainx=np.zeros((891,26))#no ticket aun\nfor x in range(891):\n    trainx[x][0]=one_hot_pclass[x][0] #class 1\n    trainx[x][1]=one_hot_pclass[x][1] #class 2\n    trainx[x][2]=one_hot_pclass[x][2] #class 3\n    trainx[x][3]=array_trainx[x][2] #sex\n    trainx[x][4]=array_trainx[x][3] #age\n    trainx[x][5]=array_trainx[x][4] #sib\n    trainx[x][6]=array_trainx[x][5] #parch\n    trainx[x][7]=array_trainx[x][6] #fare\n    trainx[x][8]=one_hot_embarked[x][0]\n    trainx[x][9]=one_hot_embarked[x][1]\n    trainx[x][10]=one_hot_embarked[x][2]\n    trainx[x][11]=one_hot_embarked[x][3]\n    trainx[x][12]=one_hot_name[x][0] #name\n    trainx[x][13]=one_hot_name[x][1] #name\n    trainx[x][14]=one_hot_name[x][2] #name\n    trainx[x][15]=one_hot_name[x][3] #name\n    trainx[x][16]=one_hot_name[x][4] #name\n    trainx[x][17]=one_hot_name[x][5] #name\n    trainx[x][18]=one_hot_cabin[x][0] #cabin\n    trainx[x][19]=one_hot_cabin[x][1] #cabin\n    trainx[x][20]=one_hot_cabin[x][2] #cabin\n    trainx[x][21]=one_hot_cabin[x][3] #cabin\n    trainx[x][22]=one_hot_cabin[x][4] #cabin\n    trainx[x][23]=one_hot_cabin[x][5] #cabin\n    trainx[x][24]=one_hot_cabin[x][6] #cabin\n    trainx[x][25]=one_hot_cabin[x][7] #cabin\n    \n\nprint(trainx.shape)\n\ntestarray=np.zeros((418,26))#sin nombre  ni ticket aun\nfor xx in range(418):\n    testarray[xx][0]=one_hot_pclasstest[xx][0] #class 1\n    testarray[xx][1]=one_hot_pclasstest[xx][1] #class 2\n    testarray[xx][2]=one_hot_pclasstest[xx][2] #class 3\n    testarray[xx][3]=array_test[xx][2] #sex\n    testarray[xx][4]=array_test[xx][3] #age\n    testarray[xx][5]=array_test[xx][4] #sib\n    testarray[xx][6]=array_test[xx][5] #parch\n    testarray[xx][7]=array_test[xx][6] #fare\n    testarray[xx][8]=one_hot_embarkedtest[xx][0]\n    testarray[xx][9]=one_hot_embarkedtest[xx][1]\n    testarray[xx][10]=one_hot_embarkedtest[xx][2]\n    testarray[xx][11]=one_hot_embarkedtest[xx][3]\n    testarray[xx][12]=one_hot_nametest[xx][0] #name\n    testarray[xx][13]=one_hot_nametest[xx][1] #name\n    testarray[xx][14]=one_hot_nametest[xx][2] #name\n    testarray[xx][15]=one_hot_nametest[xx][3] #name\n    testarray[xx][16]=one_hot_nametest[xx][4] #name\n    testarray[xx][17]=one_hot_nametest[xx][5] #name\n    testarray[xx][18]=one_hot_cabintest[xx][0] #cabin\n    testarray[xx][19]=one_hot_cabintest[xx][1] #cabin\n    testarray[xx][20]=one_hot_cabintest[xx][2] #cabin\n    testarray[xx][21]=one_hot_cabintest[xx][3] #cabin\n    testarray[xx][22]=one_hot_cabintest[xx][4] #cabin\n    testarray[xx][23]=one_hot_cabintest[xx][5] #cabin\n    testarray[xx][24]=one_hot_cabintest[xx][6] #cabin\n    testarray[xx][25]=one_hot_cabintest[xx][7] #cabin","5d2daf09":"sc = StandardScaler()\ntrainx = sc.fit_transform(trainx)\ntest = sc.fit_transform(testarray)","167dae04":"train_dfX,val_dfX,train_dfY, val_dfY = train_test_split(trainx,train_dfY , test_size=0.1, stratify=train_dfY)\nprint(\"Entrnamiento: \",train_dfX.shape)\nprint(\"Validacion : \",val_dfX.shape)","7ac7d282":"def func_model():   \n    inp = Input(shape=(26,)) \n    x=Dense(90, activation=\"relu\", kernel_initializer='glorot_normal', bias_initializer='zeros',kernel_regularizer=regularizers.l2(0.01))(inp)\n    #x=Dropout(0.6)(x)\n    x=Dense(72, activation=\"relu\", kernel_initializer='glorot_normal', bias_initializer='zeros',kernel_regularizer=regularizers.l2(0.01))(x)\n    x=Dropout(0.6)(x)\n    x=Dense(54, activation=\"relu\", kernel_initializer='glorot_normal', bias_initializer='zeros',kernel_regularizer=regularizers.l2(0.01))(x)\n    x=Dropout(0.5)(x)\n    x=Dense(36, activation=\"relu\", kernel_initializer='glorot_normal', bias_initializer='zeros',kernel_regularizer=regularizers.l2(0.01))(x)\n    x=Dropout(0.4)(x)\n    x=Dense(18, activation=\"relu\", kernel_initializer='glorot_normal', bias_initializer='zeros',kernel_regularizer=regularizers.l2(0.01))(x)\n    #x=Dropout(0.25)(x)\n    x=Dense(9, activation=\"relu\", kernel_initializer='glorot_normal', bias_initializer='zeros',kernel_regularizer=regularizers.l2(0.01))(x) \n    x=Dropout(0.1)(x)\n    x=Dense(4, activation=\"relu\", kernel_initializer='glorot_normal', bias_initializer='zeros',kernel_regularizer=regularizers.l2(0.01))(x) \n    x=Dense(1, activation=\"sigmoid\", kernel_initializer='glorot_normal', bias_initializer='zeros')(x)\n    model = Model(inputs=inp, outputs=x)\n    #sgd = optimizers.SGD(lr=0.0001, clipnorm=1.)\n    sgd = optimizers.SGD(lr=0.001, decay=0.001)\n    model.compile(loss='binary_crossentropy', optimizer='sgd', metrics=['binary_accuracy'])\n    return model\nmodel = func_model()\nprint(model.summary())","09788d03":"train_history = model.fit(train_dfX, train_dfY, epochs=150, validation_data=(val_dfX, val_dfY))","a5fc553c":"graf_model(train_history)\nprecision(model, True)","f231dafb":"\ny_test = model.predict(test)\nfor i in range(0, 418):\n    if y_test[i]<=0.5:\n        y_test[i]=0\n    else:\n        y_test[i]=1\nsubmission['Survived'] = y_test.astype(int)\nprint(submission)\nsubmission.to_csv('submission.csv', index=False)","367fb676":"leyendo la data","ed2ce519":"modelo","265c6d12":"asignando valores numericos a cada titulo, los primeros 5 que mas aparecen y los que quedan agrupados en la misma clase numerica","1b1b5381":"asignando valores numericos a la data de cabin dependiendo de la letra","1223c3f6":"Grafico y AUC","e04419d1":"asignar edades promedio dependiendo del titulo a auqellos pasajeros sin edad ","2134d880":"creando one hot de los titulos","400ab3a4":"importando librer\u00edas","09b764ff":"haciendo one hot p class","5866e30d":"ejecutando el modelo","00a17f50":"volviendo la data arreglos","08ba6c08":"haciendo one hot de los datos de cabin","0bb51fcd":"separando en validacion y train","ab9d33ed":"agrupando toda la data en un arreglo","bc6d9363":"sacar promedios de edad por titulo\n","7679750d":"funciones de grafico y auc score","1c51d182":"haciendo one hot de embarked","992941b7":"normalizando","4eb61b3b":"predecir test\n","7a13f31e":"cambiando a clases numerica los siguientes datos\n"}}