{"cell_type":{"2b0eb893":"code","905cf7ac":"code","add7b60c":"code","ff31d4d3":"code","611f68a8":"code","2d893998":"code","0718aa7f":"code","ec24840b":"code","e5ada0c5":"code","7e938d0d":"code","2a3202fc":"code","0b0bfc16":"code","2cf921e9":"code","2942fead":"code","ae1e4a65":"code","21c4394f":"code","ae0ccb78":"code","242bd45b":"code","2bd13d88":"code","9d7085de":"code","654c3600":"code","43965ec3":"markdown","19665e80":"markdown","3b74511d":"markdown","59a07ebf":"markdown","8df756af":"markdown","d505fe91":"markdown","ff19b8d1":"markdown","cad4f3c0":"markdown","07b62856":"markdown","ee92bedf":"markdown","c9a2c9a2":"markdown","f8d6e44d":"markdown","0adf7d2f":"markdown","7fff3321":"markdown","4a9ac805":"markdown","f48f51d9":"markdown","5faabc97":"markdown","85c40f76":"markdown","684dfda6":"markdown","f5a4fa38":"markdown","2f59ac62":"markdown","b1e2aead":"markdown","1f7f7140":"markdown","a4929194":"markdown","59d28237":"markdown","51d4cff1":"markdown","60e7cc1f":"markdown"},"source":{"2b0eb893":"# Loading all the required libraries:\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport plotly.express as px\nimport plotly.graph_objects as go\nimport plotly.offline as py\nimport plotly.express as px\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n","905cf7ac":"df = pd.read_csv('..\/input\/500-greatest-songs-of-all-time\/Top 500 Songs.csv', encoding='ISO-8859-2')\ndf.head()","add7b60c":"df.shape","ff31d4d3":"categorical_nan = [feature for feature in df.columns if df[feature].isna().sum()>0 and df[feature].dtypes=='O']\nprint(categorical_nan)","611f68a8":"for feature in categorical_nan:\n    df[feature] = df[feature].fillna('Empty')","2d893998":"df[categorical_nan].isna().sum()","0718aa7f":"color = plt.cm.RdPu(np.linspace(0,1,20))\ndf[\"title\"].value_counts().sort_values(ascending=True).head(20).plot.pie(y=\"artist\",colors=color,autopct=\"%0.1f%%\")\nplt.title(\"Greatest Songs Ever\")\nplt.axis(\"off\")\nplt.show()","ec24840b":"color = plt.cm.YlGnBu(np.linspace(0,1,20))\ndf[\"artist\"].value_counts().sort_values(ascending=True).head(20).plot.pie(y=\"streak\",colors=color,autopct=\"%0.1f%%\")\nplt.title(\"Greatest Artists Ever\")\nplt.axis(\"off\")\nplt.show()","e5ada0c5":"color = plt.cm.RdGy(np.linspace(0,1,20))\ndf[\"writers\"].value_counts().sort_values(ascending=True).head(20).plot.pie(y=\"released\",colors=color,autopct=\"%0.1f%%\")\nplt.title(\"Greatest Song Writers Ever\")\nplt.axis(\"off\")\nplt.show()","7e938d0d":"color = plt.cm.RdYlBu(np.linspace(0,1,20))\ndf[\"streak\"].value_counts().sort_values(ascending=True).head(20).plot.pie(y=\"writer\",colors=color,autopct=\"%0.1f%%\")\nplt.title(\"Greatest Streak\")\nplt.axis(\"off\")\nplt.show()","2a3202fc":"color = plt.cm.OrRd(np.linspace(0,1,20))\ndf[\"producer\"].value_counts().sort_values(ascending=True).head(20).plot.pie(y=\"description\",colors=color,autopct=\"%0.1f%%\")\nplt.title(\"Greatest Song Producer\")\nplt.axis(\"off\")\nplt.show()","0b0bfc16":"color = plt.cm.BuGn(np.linspace(0,1,20))\ndf[\"released\"].value_counts().sort_values(ascending=True).head(20).plot.pie(y=\"title\",colors=color,autopct=\"%0.1f%%\")\nplt.title(\"Greatest songs of their period\")\nplt.axis(\"off\")\nplt.show()","2cf921e9":"text_cols = ['title', 'artist', 'writers', 'producer']\n\nfrom wordcloud import WordCloud, STOPWORDS\n\nwc = WordCloud(stopwords = set(list(STOPWORDS) + ['|']), random_state = 42)\nfig, axes = plt.subplots(2, 2, figsize=(20, 12))\naxes = [ax for axes_row in axes for ax in axes_row]\n\nfor i, c in enumerate(text_cols):\n  op = wc.generate(str(df[c]))\n  _ = axes[i].imshow(op)\n  _ = axes[i].set_title(c.upper(), fontsize=24)\n  _ = axes[i].axis('off')","2942fead":"from wordcloud import WordCloud, ImageColorGenerator\ntext = \" \".join(str(each) for each in df.artist)\n# Create and generate a word cloud image:\nwordcloud = WordCloud(max_words=200,colormap='GnBu', background_color=\"black\").generate(text)\nplt.figure(figsize=(10,6))\nplt.figure(figsize=(15,10))\n# Display the generated image:\nplt.imshow(wordcloud, interpolation='Bilinear')\nplt.axis(\"off\")\nplt.figure(1,figsize=(12, 12))\nplt.show()","ae1e4a65":"elton = df[(df['artist']=='Elton John')].reset_index(drop=True)\nelton.head(20)","21c4394f":"jimi = df[(df['artist']=='The Jimi Hendrix Experience')].reset_index(drop=True)\njimi.head(20)","ae0ccb78":"elvis = df[(df['artist']=='Elvis Presley')].reset_index(drop=True)\nelvis.head(20)","242bd45b":"from wordcloud import WordCloud, ImageColorGenerator\ntext = \" \".join(str(each) for each in df.writers)\n# Create and generate a word cloud image:\nwordcloud = WordCloud(max_words=200,colormap='GnBu', background_color=\"black\").generate(text)\nplt.figure(figsize=(10,6))\nplt.figure(figsize=(15,10))\n# Display the generated image:\nplt.imshow(wordcloud, interpolation='Bilinear')\nplt.axis(\"off\")\nplt.figure(1,figsize=(12, 12))\nplt.show()","2bd13d88":"from wordcloud import WordCloud, ImageColorGenerator\ntext = \" \".join(str(each) for each in df.artist)\n# Create and generate a word cloud image:\nwordcloud = WordCloud(max_words=200,colormap='Set3', background_color=\"black\").generate(text)\nplt.figure(figsize=(10,6))\nplt.figure(figsize=(15,10))\n# Display the generated image:\nplt.imshow(wordcloud, interpolation='Bilinear')\nplt.axis(\"off\")\nplt.figure(1,figsize=(12, 12))\nplt.show()","9d7085de":"from wordcloud import WordCloud, ImageColorGenerator\ntext = \" \".join(str(each) for each in df.released)\n# Create and generate a word cloud image:\nwordcloud = WordCloud(max_words=200,colormap='GnBu', background_color=\"black\").generate(text)\nplt.figure(figsize=(10,6))\nplt.figure(figsize=(15,10))\n# Display the generated image:\nplt.imshow(wordcloud, interpolation='Bilinear')\nplt.axis(\"off\")\nplt.figure(1,figsize=(12, 12))\nplt.show()","654c3600":"longest = df[(df['streak']=='30 weeks; No. 1')].reset_index(drop=True)\nlongest.head(10)","43965ec3":"This looks good! Now I'll see what words are **most common**** in the **artists**** list using WordCloud:","19665e80":"By date released:","3b74511d":"I want to check Elton John's popularity, through the charts:","59a07ebf":"# Data Exploration: \n\nThis dataset looks very interesting. I'll try to explore it as much as I can:","8df756af":"So here we have data for the best songs of all time. The dataset contains 8 columns. All the columns are having categorical data. And by the name of the dataset I believe it must be having 500 rows. Still, let me confirm it:","d505fe91":"Now, I'll collect the data in '**title**', '**artist**', '**writers**' & '**producer**' variables\/columns in separate boxes:","ff19b8d1":"Finally, let me check Elvis Presley's popularity before moving forward:","cad4f3c0":"# Data Cleaning:\n\nI'll first check which variables are having missing values:","07b62856":"Now, before exploring I'll check if there's any missing value in the dataset:","ee92bedf":"So Elton John came 17 times on the streak. Now I'd like to check Jimi Hendrix's popularity too:","c9a2c9a2":"So, as I've got a lot of interesting information from this dataset I think I should stop here now. Thank you for your time. Regards.\n* Rachit Shukla","f8d6e44d":"Okay now I'm good to explore the dataset:","0adf7d2f":"Awesome! Dr Dre is my favorite producer :D","7fff3321":"But before moving forward, I need to verify if the missing values got filled or not:","4a9ac805":"Greatest writers:","f48f51d9":"Now let me check the \"**most common\nwriters****\" in the dataset:","5faabc97":"So All Shook Up by Elvis and In Da Club by 50 cent were loved for really long time. ( For 30 weeks these 2 songs remained Number 1). Now that's something!","85c40f76":"Greatest streaks in the dataset:","684dfda6":"Now I'll see when & where were the songs released:","f5a4fa38":"Similarly, the greatest artists:","2f59ac62":"Likewise, the **most common artists**** on the list are:","b1e2aead":"Let me check the longest streak ever:","1f7f7140":"Okay so only the 'streak' column is having missing values. I'm filling these missing values with \"Empty\":","a4929194":"Greatest producers of all time:","59d28237":"I'll start with what this dataset is about. Plotting a pie-chart for the \"greatest songs\" using the \"**title**\" column:","51d4cff1":"Woah! Elvis was 11 times on the streak and not only that, he was 9 times No. 1 on the charts! He was\/is truly the greatest!","60e7cc1f":"Reading the dataset and viewing top five rows:"}}