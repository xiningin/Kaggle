{"cell_type":{"b1606067":"code","45bcfbb4":"code","b0acc874":"code","865a1d7e":"code","54d99f6a":"code","72126e52":"code","65b9dd39":"code","7e5191b1":"code","8977c2b2":"code","eaa6dfc3":"code","3df626e6":"code","4e051ea3":"code","455e6ff6":"code","46a2a014":"code","64e870bc":"code","7951fb72":"code","9243d8d7":"code","d21e9e82":"code","76f3ad77":"code","5c891941":"markdown","c8f92553":"markdown","95f1993f":"markdown","85f63e5b":"markdown","f8c2811b":"markdown","1cb4c4e4":"markdown","18820d95":"markdown","d7991ffa":"markdown","28450336":"markdown","09ffbed3":"markdown","2f7cfa3c":"markdown","10e6c396":"markdown","9d9b108a":"markdown","f49386ad":"markdown"},"source":{"b1606067":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\n%matplotlib inline\n\nimport unicodedata\nimport re\n\n\nfrom nltk.corpus import stopwords\nfrom nltk.tokenize import word_tokenize\n\nstop_words = set(stopwords.words('english'))\n\nplt.rcParams[\"figure.figsize\"] = (10, 10)\n\npd.set_option('display.max_colwidth', None)\n\ndf = pd.read_csv('..\/input\/medium-2021-data-science-articles-dataset\/medium-data-science-articles-2021.csv')\ndf.head()","45bcfbb4":"print(f' We have {df.url.duplicated().sum()} duplicated values in url colum')\ndf[df.url.duplicated(keep=False)]","b0acc874":"# I analysed the values and conclude that the correct duplicated values \n#is aways the first! So let's keep it.\n\ndf = df.drop_duplicates(subset=['url'], keep='first')\nprint(f' We have {df.url.duplicated().sum()} duplicated values in url column')\ndf.shape","865a1d7e":"df.title[:10]","54d99f6a":"def normalize_title(title):\n    title = unicodedata.normalize(\"NFKD\", title) # normalize data\n    title = re.sub('<[^>]+>', '', title) # remove anything beteween <> (html noise)\n    title = title.lower() # put title in lower case\n    title = re.sub(\"\\d\", 'X', title) # replace numbers by X\n    \n    title = re.sub(r'[^\\w\\s]','',title) # Remove ponctuation\n    title = re.sub(' +', ' ', title) #Remove double spaces\n    \n    #Remove stop words\n    #title = word_tokenize(title) #remove stop words\n    #title = [word for word in title if not word in stop_words]\n    #title = (\" \").join(title)\n    \n    return title \n    \ndf.title = df.title.apply(normalize_title)\ndf.title[:10]","72126e52":"#Build a python dict of dicts, that contains raw infos about words combinations\n\ndict_word_combinations = {}\n\nfor title, claps, responses in zip(df.title, df.claps, df.responses):\n    splited_title = title.split(' ')\n    \n    if len(splited_title) > 2:\n        for i in range((len(splited_title) - 2)):\n            word_combination = f'{splited_title[i]} {splited_title[i+1]} {splited_title[i+2]}' # Get sets of 3 words\n            if word_combination in dict_word_combinations.keys(): \n                dict_word_combinations[word_combination]['frequency'] += 1\n                dict_word_combinations[word_combination]['total_claps'] += claps\n                dict_word_combinations[word_combination]['total_responses'] += responses\n            else: #If it's new\n                dict_word_combinations[word_combination] = {'word_combination': word_combination,\n                                                            'frequency' : 1, \n                                                            'total_claps': claps,\n                                                            'total_responses': responses,\n                                                            'first_words': 0,\n                                                            'first_words_total_claps' : 0,\n                                                            'last_words': 0,\n                                                            'last_words_total_claps' : 0,\n                                                           }\n                                                            \n            if i == 0: # If it the headline start\n                dict_word_combinations[word_combination]['first_words'] += 1\n                dict_word_combinations[word_combination]['first_words_total_claps'] += claps\n            if i == len(splited_title) - 3:  # If it the headline finish\n                dict_word_combinations[word_combination]['last_words'] += 1\n                dict_word_combinations[word_combination]['last_words_total_claps'] += claps","65b9dd39":"df_word_combination = pd.DataFrame([dict_word_combinations[x] for x in dict_word_combinations.keys()])\ndf_word_combination ","7e5191b1":"df_word_combination.sort_values('frequency',ascending=False)[:10].plot.barh(x='word_combination', y='frequency').invert_yaxis()\nplt.grid(True, axis='x')\nplt.title('Word combination popularity.')\nplt.xlabel('Apparitions')\nplt.ylabel('Word Combniation')\nplt.show()","8977c2b2":"from wordcloud import WordCloud\nweights = {x: dict_word_combinations[x]['frequency'] for x in dict_word_combinations}\n","eaa6dfc3":"wc = WordCloud(background_color='white', contour_width=1000)\nwc.generate_from_frequencies(weights)\nplt.imshow(wc, interpolation='bilinear')\nplt.axis(\"off\")\nplt.show()","3df626e6":"#list_word_combination","4e051ea3":"#Extract mean values for claps and trashold for freqency to remove outliers.\n\nX = 50\ndf_word_combination['claps_mean'] = df_word_combination.apply(lambda row: \n                                                              row.total_claps \/ row.frequency \n                                                              if row.frequency >= X \n                                                              else None , axis=1)\n\nY = 25\ndf_word_combination['last_words_claps_mean'] = df_word_combination.apply(lambda row: \n                                                              row.last_words_total_claps \/ row.last_words \n                                                              if row.last_words >= Y\n                                                              else None , axis=1)\n\nZ = 25\ndf_word_combination['first_words_claps_mean'] = df_word_combination.apply(lambda row: \n                                                              row.first_words_total_claps \/ row.first_words \n                                                              if row.first_words >= Z\n                                                              else None , axis=1)\n\ndf_word_combination.head()","455e6ff6":"print(f' There are {df_word_combination.claps_mean.notna().sum()} set of words that appear more than {X} times')\nprint(f' There are {df_word_combination.last_words_claps_mean.notna().sum()} set of words as last words that appear more than {Y} times')\nprint(f' There are {df_word_combination.first_words_claps_mean.notna().sum()} set of words as first words that appear more than {Z} times')","46a2a014":"df_word_combination.sort_values('claps_mean',ascending=False)[:10].plot.barh(x='word_combination', y='claps_mean').invert_yaxis()\nplt.grid(True, axis='x')\nplt.title('Most attractive words combinations')\nplt.xlabel('Claps Means')\nplt.ylabel('Word combinations')\nplt.show()","64e870bc":"df_word_combination.sort_values('last_words_claps_mean',ascending=False)[:10].plot.barh(x='word_combination', y='last_words_claps_mean').invert_yaxis()\nplt.grid(True, axis='x')\nplt.title('Most attractive last words combinations')\nplt.xlabel('Clap Means')\nplt.ylabel('Word Combniation')\nplt.show()","7951fb72":"df_word_combination.sort_values('first_words_claps_mean',ascending=False)[:10].plot.barh(x='word_combination', y='first_words_claps_mean').invert_yaxis()\nplt.grid(True, axis='x')\nplt.title('Most attractive first words combinations')\nplt.xlabel('Claps Means')\nplt.ylabel('Word combinations')\nplt.show()","9243d8d7":"df_word_combination.sort_values('claps_mean',ascending=True)[:40].plot.barh(x='word_combination', y='claps_mean')\n\nplt.title('Less atractive word combinations')\nplt.xlabel('Claps Means')\nplt.ylabel('Set of words')\nplt.show()","d21e9e82":"df_word_combination.sort_values('last_words_claps_mean',ascending=True)[:20].plot.barh(x='word_combination', y='last_words_claps_mean')\nplt.title('Less attractive last words combinations')\nplt.xlabel('Claps Means')\nplt.ylabel('Word combinations')\nplt.show()","76f3ad77":"df_word_combination.sort_values('first_words_claps_mean',ascending=True)[:20].plot.barh(x='word_combination', y='first_words_claps_mean')\nplt.title('Less attractive first words combinations')\nplt.xlabel('Claps Means')\nplt.ylabel('Word combinations')\nplt.show()","5c891941":"## Analysing Best words combinations","c8f92553":"## What is the most popular set of words?","95f1993f":"Much Better!!\n\nAs you can see, i commented the stop word treatment, i did it because it was overshadowing my analisys.","85f63e5b":"## Modeling Data","f8c2811b":"## Get data insights\n### Extracting word combinations data from headline","1cb4c4e4":"## WordCloud for words combination popularity","18820d95":"# Preparing data\n\n## Find url duplicateds values and drop it\n\nAs same Url means same articles, let's remove it.","d7991ffa":"### Data understanding\n\nLet's take a look on df titles","28450336":"To get started, let's read in the necessary libraries we will need to wrangle our data: pandas and numpy. If we decided to build some basic plots, matplotlib might prove useful as well. We also need unicodedat, re and nltk normalize text data.","09ffbed3":"# Questions\n\n- [X] What words combinations get the most Engagement?\n- [X] What words combinations get less engagement?\n- [X] What words combinations get more engagement in the start of headline?\n- [X] What words combinations get more engagement in the end of headline?\n\n\n## Next steps\n\n- [ ] Use Plotly","2f7cfa3c":"## Analysing Worses words combinations","10e6c396":"## What cobination of words in headlines atract more claps?","9d9b108a":"To make our analisys easy, lets transform the dict in a panda DataFrame","f49386ad":"### Cleaning the data\n\nAs you can see, it has some confusing character, lots of ponctuation, and HTML infos, so we need to normalize the data."}}