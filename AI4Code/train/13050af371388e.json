{"cell_type":{"e7661e55":"code","ad80f5f2":"code","b1ccade1":"code","cb4b469c":"code","b9796d65":"code","9bebc23d":"code","b0363775":"code","23dca1bf":"code","5bb1dc78":"code","ffbe923b":"code","e632470c":"code","898a3c63":"markdown","8af3fb75":"markdown","8d975930":"markdown","9c6818c5":"markdown","45f6169b":"markdown","a924b939":"markdown","4cf9c256":"markdown","5d3c80f9":"markdown","1519fbd0":"markdown","f443e044":"markdown","80f7a998":"markdown","18fbbf9d":"markdown","b2fb476d":"markdown","da6801a7":"markdown","700094da":"markdown"},"source":{"e7661e55":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport sys\nimport nltk\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","ad80f5f2":"# Convert all lyrics to token of words\nimport json \nLYRIC_FILE = '..\/input\/katalagu-lirik-lagu-indonesia-2000an\/katalagu-indonesia-2000an.json' # Indonesia 2000an\n\nraw_json = {}\n\nwith open(LYRIC_FILE, 'r') as f:\n    raw_json = json.load(f)\n    \nraw_json.get(\"lyrics\", [{}])[0]\nraw_lyrics = raw_json.get('lyrics', [])\nall_lyrics = list(map(lambda x: x.get('lyric', ''), raw_lyrics))\n\nall_lyrics[0]","b1ccade1":"SAMPLE = 5\n\nsanitized_lyrics = []\n\nfor lyr in all_lyrics:\n    lyr = lyr.lower()\n    lyrs = lyr.split('\\n') # Split by newline\n    lyrs = [l for l in lyrs if len(l) > 0 and l[0] != '[' and l[-1] != ']'] # Avoid [chorus] [verse-1] etc\n    sanitized_lyrics.extend(lyrs)\n    \nsanitized_lyrics[:SAMPLE]","cb4b469c":"words = []\n\nfor lyric in sanitized_lyrics:\n    words.extend(lyric.split())\n    \n# Remove trailing dot or comma\ndef stripnonalpha(w):    \n    st, en = -1, -1\n    \n    for i, c in enumerate(w):\n        if c.isalpha():\n            if st == -1:\n                st = i\n            en = i\n    \n    if st == -1 or en == -1:\n        # No nonalpha\n        return ''\n        \n    return w[st:en+1]\n\nwords = [stripnonalpha(w) for w in words]\n\n# Filter 'unusable' word\nunusable = set(['', 'reff'])\n\nwords = [w for w in words if w not in unusable]\n    ","b9796d65":"# Helper function that helps the data processing or data visualization\ndef as_table(word_freqs):\n    word_list, count_list = [], []\n    for w, c in word_freqs:\n        word_list.append(w)\n        count_list.append(c)\n\n    return pd.DataFrame.from_dict({\"words\": word_list, \"count\": count_list})\n    \ndef freq_word_order(w):\n    # (word, freq)\n    # order by freq DESC, if freq same, sort by word ASC\n    return -w[1], w[0]\n\nfrom collections import defaultdict","9bebc23d":"# Check for contracted words ex: s'mua, s'gala\ncontracted = defaultdict(int)\n\nfor w in words:\n    if \"'\" in w or \"`\" in w:\n        contracted[w] += 1\n        \ncontracted_tp = sorted(contracted.items(), key=freq_word_order)\n\ndf = as_table(contracted_tp)\n\ndf","b0363775":"# Check for repeated words\nreps = defaultdict(int)\n\nfor w in words:\n    if \"-\" in w:\n        reps[w] += 1\n        \nreps_tp = sorted(reps.items(), key=freq_word_order)\n\ndf = as_table(reps_tp)\n\ndf[:10]","23dca1bf":"wholes = defaultdict(int)\n\nfor word in words:\n    if word in contracted or word in reps:\n        continue\n        \n    if all([c.isalpha() for c in word]):\n        wholes[word] += 1\n    \nwholes_tp = sorted(wholes.items(), key=freq_word_order)\n\ndf = as_table(wholes_tp)\ndf[:10]","5bb1dc78":"def is_pertama(w):\n    pertama_set = set(['aku', 'ku', 'saya', 'daku', 'diriku', 'kita', 'kami'])\n    return (w in pertama_set) or (len(w) > 2 and w[-2:] == 'ku')\n\ndef is_kedua(w):\n    kedua_set = set(['kamu', 'engkau', 'anda', 'kau', 'dirimu', 'kalian'])\n    return (w in kedua_set) or (len(w) > 2 and w[-2:] == 'mu')\n\ndef is_ketiga(w):\n    ketiga_set = set(['ia', 'dia', 'dirinya', 'beliau', 'mereka'])\n    return (w in ketiga_set) or (len(w) > 3 and w[-3:] == 'nya')\n\nsudut_pandangs = defaultdict(int)\n\nfor w, c in wholes_tp:\n    if is_pertama(w):\n        sudut_pandangs[\"pertama\"] += c\n    if is_kedua(w):\n        sudut_pandangs[\"kedua\"] += c\n    if is_ketiga(w):\n        sudut_pandangs[\"ketiga\"] += c\n        \nsudut_pandangs_tp = sorted(sudut_pandangs.items(), key=freq_word_order)\n\ndf = as_table(sudut_pandangs_tp)\ndf","ffbe923b":"nltk.download('stopwords')","e632470c":"from nltk.corpus import stopwords\nstops = set(stopwords.words('indonesian'))\n\ndef is_sudut_pandang(w):\n    return is_pertama(w) or is_kedua(w) or is_ketiga(w)\n\ncores = defaultdict(int)\nfor w, c in wholes_tp:\n    if w in stops or is_sudut_pandang(w):\n        continue\n        \n    cores[w] += c\n    \ncores_tp = sorted(cores.items(), key=freq_word_order)\ndf = as_table(cores_tp)\ndf[:20]","898a3c63":"Wah, ternyata hipotesis saya kurang tepat. Ternyata, **sudut pandang orang pertama** lebih dominan untuk digunakan.","8af3fb75":"### Indonesia 2000an Simple EDA\n\nPada notebook ini, saya akan mengeksplorasi lagu-lagu tenar di Indonesia periode 2000-an berdasarkan kata-kata pada liriknya. \n\nPertama-tama, saya butuh meng-install dan mempersiapkan pustaka tambahan yang saya butuhkan untuk mengolah data ini.","8d975930":"Hmm, sepertinya tidak banyak yang bisa saya simpulkan sih. dosa-dosaku sering muncul pada lirik lagu `Andai Ku Tahu` dari `Ungu`.\n\nOh iya, ini membuat saya ingat bahwa data lirik ini sendiri bisa jadi tidak valid karena adanya perbedaan format dalam penulisan lirik. Ada lagu yang menuliskan gamblang lirik yang diulang berkali-kali dan adapula yang menuliskan dengan menggunakan format semacam `(x 2)` atau `back to reff`.","9c6818c5":"## Pemendekan Kata\nPada saat saya membersihkan data, saya menemukan banyak kata yang ditulis dengan pemendakan sebagai panduan pengucapan pada lagu. Contohnya adalah penggunaan kata `s'gala` untuk kata segala karena dalam menyanyikan lagu tersebut, huruf `e` tidak gamblang diucapkan.\n\nSaya ingin melihat kata-kata apa saja yang lazim dibuat menjadi bentuk pendeknya (catatan: saya tidak tahu istilah baku untuk bentuk ini).","45f6169b":"## Eksplorasi Data\nPada bagian ini, saya akan mencoba menjawab beberapa hipotesis\/pertanyaan saya seputar kata-kata pada lagu tenar.","a924b939":"## Lalu?\nItu saja yang bisa saya ulik dari data lirik lagu tenar di Indonesia. Memang tidak ada actionable items sih dari eksplorasinya, hehe.\n\nHmm, kira-kita hal apa lagi ya yang bisa kita ulik dari data lirik lagu?","4cf9c256":"## Kata Dominan\n\nSaya penasaran, kata apa sih yang paling sering muncul di lirik lagu-lagu tenar ini? Hipotesis saya, kata yang akan dominan adalah kata `cinta` karena topik banyak berkutat tentang `cinta`.","5d3c80f9":"## Kata Ulang\nSalah satu guna kata ulang adalah untuk menunjukkan nominal banyak. Kata ulang apa yang sering digunakan pada lagu tenar di Indonesia?","1519fbd0":"Hmmm, di luar kata-kata dalam Bahasa Inggris, ada pola menarik yang saya temukan:\n\n- Huruf yang paling sering di-abai-kan adalah huruf `e`. Contohnya pada kata `s'gala`, `t'lah`, `kar'na`.\n- Huruf awal yang sering mengikuti huruf `e` tersebut adalah huruf `s`.\n\nAda penjelasan ilmiahnya dalam tata bahasa Indonesia tidak ya? Hipotesis saya sih, mungkin karena huruf `e` adalah salah satu huruf yang punya banyak pengucapan berbeda, misal pada kata `meja` dan `teduh`. Sepertinya sih pemendekan ini lazim terjadi untul lafal `e` pada `teduh`.","f443e044":"Yeay, kali ini, hipotesis saya benar! Kata yang berkaitan dengan cinta dan perasaan seperti `cinta`, `hati`, `sayang`, dan `love` memang menjadi kata yang dominan muncul pada lirik lagu Indonesia.\n\nBeberapa temuan menarik:\n\n- Kata senandung `oh` dan `ah` juga ternyata sering digunakan walaupun tidak memiliki arti tertentu.\n- `Hidup` dan `mati` memiliki frekuensi yang cukup mirip. Bisa jadi kedua kata ini sering digunakan bersamaan.","80f7a998":"Ah, saya benar, kata `cinta` menjadi salah satu kata yang muncul paling sering dari lirik lagu.\n\nTapi, ternyata kata yang justru paling dominan adalah kata ganti orang seperti `aku`, `ku`, dan `kau`. Hal ini bisa jadi terjadi karena lagu Indonesia sering menjadi lagu yang dinyanyikan kepada orang lain sehingga akan muncul banyak kata ganti orang.","18fbbf9d":"## Pembersihan Kata\nLirik pada dataset ini masih berupa lirik yang memiliki format tampilan (misal baris baru atau anotasi untuk bagian lagu seperti verse atau chorus).\n\nSaya akan membersihkan datanya terlebih dahulu. Proses pembersihan yang saya lakukan:\n\n- Membuat semua huruf dalam bentuk huruf kecil untuk mempermudah pemrosesan\n- Memisahkan setiap lirik berdasarkan baris baru. Ini perlu saya lakukan karena saya lihat anotasi bagian lagu biasanya ada pada baris sendiri\n- Membuang anotasi bagian lagu seperti `[verse]` atau `[chorus]`\n- Memisahkan setiap kata dengan spasi\n- Membersihkan setiap kata dari tanda baca yang tertinggal pada awal dan akhir kata, misalkan pada kata \"aku...\", tiga titik terakhir akan dihapus dari kata tersebut. Tanda baca ini digunakan sebagai panduan intonasi pada lirik lagu asli (misal memberi efek sendu, penekanan, atau pemisahan)","b2fb476d":"*Note: This is a modified version of previous notebook* [here](https:\/\/github.com\/muzavan\/katalagu\/blob\/main\/showcase\/indonesia_2000an.ipynb)","da6801a7":"\n## Kata Inti Dominan\nDari kumpulan kata dominan, kita melihat ada banyak kata ganti orang dan juga `stopwords`. `Stopwords` bisa diartikan sebagai kata yang tidak memberikan makna tambahan dari sebuah kalimat, misalkan `yang`, `dan`, dsb.\n\nSekarang, saya ingin fokus pada kata-kata inti saja.","700094da":"## Sudut Pandang Lagu Dominan\n\nSaya jadi penasaran, kalau kita mengelompokkan kata-kata berdasarkan jenis kata ganti nya, kira-kira pihak mana yang paling dominan diceritakan pada lagu ya?\n\nKata ganti akan saya kelompokan menjadi tiga (sumber: [dosenbahasa](https:\/\/dosenbahasa.com\/jenis-jenis-kata-ganti), dengan tambahan):\n\n- **Pertama**: `aku`, `saya`, `daku`, `diriku`, `kita`, `kami`, atau kata yang berakhiran `-ku` (seharusnya saya juga memeriksa apakah kata tersebut kata kerja transitif, tapi saya menyederhanakan permasalahan di sini)\n- **Kedua**:` kamu`, `anda`, `kau`, `dirimu`, `kalian`, atau kata yang berakhiran `-mu`\n- **Ketiga**: `ia`, `dia`, `dirinya`, `beliau`, `mereka`, atau kata yang berakhiran `-nya`\n\nHipotesis saya, lagu akan dominan dari sudut pandang orang kedua dengan alasan banyak lagu di Indonesia yang dinyanyikan 'seolah-olah' sedang berbicara dengan orang lain (misal: minta maaf, menyatakan cinta, dll)."}}