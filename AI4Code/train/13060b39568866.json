{"cell_type":{"80b9fd10":"code","163a35a8":"code","45d696ca":"code","51ebeb4e":"code","f9bba361":"code","b9413653":"code","0c184afd":"code","504dbeb9":"code","949b6e8e":"code","858d33a0":"code","64caa10c":"markdown","a34fad14":"markdown","36705158":"markdown","9a01999e":"markdown","b00a9ae5":"markdown","3bb10765":"markdown"},"source":{"80b9fd10":"import numpy as np\n\nimport torch\nfrom torchvision import datasets\nfrom torchvision.transforms import ToTensor\n\nimport sklearn\nfrom sklearn import svm, tree, neighbors\nfrom sklearn.metrics import accuracy_score\n\nimport matplotlib.pyplot as plt\n\nprint('sklearn: ', sklearn.__version__)\nprint('torch: ', torch.__version__)","163a35a8":"training_data = datasets.MNIST(root='data', train=True, download=True, transform=ToTensor())\ntest_data = datasets.MNIST(root='data', train=False, download=True, transform=ToTensor())","45d696ca":"fig, axs = plt.subplots(3, 3)\nfor i, ax in zip(range(9), axs.flatten()):\n    sample_index = np.random.randint(len(training_data))\n    img, label = training_data[sample_index]\n    ax.imshow(img.squeeze(), cmap='gray')\n    ax.set_title(str(label))\n    ax.axis('off')\nplt.subplots_adjust(hspace=0.5)","51ebeb4e":"def convert_data(data):\n    x, y = [], []\n    for _ in data:\n        img, label = _\n        x.append(img.view(1, 1, -1).squeeze().tolist())\n        y.append(label)\n    return np.array(x), np.array(y)\n\nx_train, y_train = convert_data(training_data)\nx_test, y_test = convert_data(test_data)","f9bba361":"svc_clf = svm.SVC()\nsvc_clf.fit(x_train, y_train)\ny_pred = svc_clf.predict(x_test)\naccuracy = accuracy_score(y_test, y_pred)\nprint('accuracy: ', accuracy)","b9413653":"svc_clf = svm.SVC()\nsvc_clf.fit(x_train, y_train)\ny_pred = svc_clf.predict(x_test)\naccuracy = accuracy_score(y_test, y_pred)\nprint('accuracy: ', accuracy)","0c184afd":"linearsvc_clf = svm.LinearSVC()\nlinearsvc_clf.fit(x_train, y_train)\ny_pred = linearsvc_clf.predict(x_test)\naccuracy = accuracy_score(y_test, y_pred)\nprint('accuracy: ', accuracy)","504dbeb9":"tree_clf = tree.DecisionTreeClassifier()\ntree_clf.fit(x_train, y_train)\ny_pred = tree_clf.predict(x_test)\naccuracy = accuracy_score(y_test, y_pred)\nprint('accuracy: ', accuracy)","949b6e8e":"neigh_clf = neighbors.KNeighborsClassifier()\nneigh_clf.fit(x_train, y_train)\ny_pred = neigh_clf.predict(x_test)\naccuracy = accuracy_score(y_test, y_pred)\nprint('accuracy: ', accuracy)","858d33a0":"pip list","64caa10c":"## \u90bb\u8fd1\u7b97\u6cd5","a34fad14":"## \u90e8\u5206\u624b\u5199\u6570\u5b57\u53ef\u89c6\u5316","36705158":"# \u4f7f\u7528\u4e0d\u540c\u7b97\u6cd5\u8bc6\u522b\u6570\u5b57\n## \u652f\u6301\u5411\u91cf\u673a\n### \u9ed8\u8ba4\u53c2\u6570","9a01999e":"## \u5206\u79bb\u7279\u5f81\u548c\u6807\u7b7e","b00a9ae5":"## \u51b3\u7b56\u6811","3bb10765":"# \u901a\u8fc7torch\u52a0\u8f7dMNIST\u6570\u636e\u96c6"}}