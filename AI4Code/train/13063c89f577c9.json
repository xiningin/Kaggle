{"cell_type":{"e91adf04":"code","7da40a78":"code","8555340e":"code","27954193":"code","2a7881b6":"code","6a9c417d":"code","f9228e07":"code","526bbf39":"code","b4744ba1":"code","976c7408":"code","8b8f114a":"code","91fd94bc":"code","6f37be03":"markdown","e9cbdd02":"markdown"},"source":{"e91adf04":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport seaborn as sns\nfrom lightgbm import LGBMClassifier\nimport matplotlib.pyplot as plt\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import accuracy_score\nfrom sklearn.metrics import f1_score\nfrom sklearn.metrics import confusion_matrix\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","7da40a78":"\n\ndata = pd.read_csv(r'\/kaggle\/input\/credit-card-customers\/BankChurners.csv')\n","8555340e":"data = data.drop(['Naive_Bayes_Classifier_Attrition_Flag_Card_Category_Contacts_Count_12_mon_Dependent_count_Education_Level_Months_Inactive_12_mon_1',\n       'Naive_Bayes_Classifier_Attrition_Flag_Card_Category_Contacts_Count_12_mon_Dependent_count_Education_Level_Months_Inactive_12_mon_2','CLIENTNUM'], axis = 1)\n","27954193":"print((data['Attrition_Flag']=='Existing Customer').sum())\nprint((data['Attrition_Flag']!='Existing Customer').sum())\n","2a7881b6":"data.columns","6a9c417d":"data.shape","f9228e07":"\nX = data.drop(\"Attrition_Flag\", axis = 1)\n\ny = data['Attrition_Flag']","526bbf39":"X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.1)","b4744ba1":"s = (X_train.dtypes == 'object')\nobject_cols = list(s[s].index)\n\nprint(\"Categorical variables:\")\nprint(object_cols)","976c7408":"label_encoder = LabelEncoder()\nfor col in object_cols:\n    X_train[col] = label_encoder.fit_transform(X_train[col])\n    X_test[col] = label_encoder.transform(X_test[col])\n","8b8f114a":"from xgboost import XGBClassifier","91fd94bc":"model =LGBMClassifier(n_estimators= 125, objective = 'binary')\nmodel.fit(X_train,y_train)\n\nprint('accuracy:',accuracy_score(y_test, model.predict(X_test)))\nprint( 'fscore:', f1_score(y_test,model.predict(X_test),pos_label= 'Existing Customer'))\nprint(confusion_matrix(y_test, model.predict(X_test)))","6f37be03":"# Predicting Attrition Flag! :)\n\n\n","e9cbdd02":"The last two columns are sources of leakage therefore they should be dropped"}}