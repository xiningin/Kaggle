{"cell_type":{"829c8825":"code","c1b2999f":"code","6192d05d":"code","f4136a3d":"code","fb2dcda6":"code","b8eb6c90":"code","da066cf1":"code","3a105e91":"code","fc5652d2":"code","977ae83d":"code","cd20acea":"code","88493577":"code","8c9937d1":"code","6a5ac00f":"code","9eda4c35":"code","ca8dac95":"code","46239868":"code","4c49fe77":"code","4f5d91d2":"code","9c5efe4c":"code","6e5a9e8f":"code","f3d6115b":"code","8016e07b":"code","889bcbf5":"code","2dbb30f3":"code","95121635":"code","60792aec":"code","b25c555f":"code","d79eb211":"code","c440d63a":"code","f7b6cfa7":"code","c8dabb18":"code","71c44009":"code","9ff0bb53":"code","da5a8c9f":"code","d48dd0aa":"code","7a3e0c53":"code","94b60bcc":"code","1c106b0d":"code","a23fc58c":"markdown","06aca0c7":"markdown","425ce0b4":"markdown","acf2aaa2":"markdown","ec33d878":"markdown","05b63697":"markdown","ac7d9223":"markdown","bb6746ee":"markdown","ab0ec789":"markdown","821bd03c":"markdown","103666a6":"markdown","54744182":"markdown","ddfed026":"markdown","fc4bdb67":"markdown"},"source":{"829c8825":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","c1b2999f":"#more import\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport matplotlib as mpl\nimport seaborn as sns\n\nfrom pathlib import Path\nfrom sklearn import svm, preprocessing \nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.neighbors import KNeighborsRegressor\nfrom sklearn.metrics import mean_squared_error, r2_score\nfrom sklearn.model_selection import GridSearchCV","6192d05d":"path = Path('\/kaggle\/input\/diamonds\/diamonds.csv')\ndf = pd.read_csv(path)","f4136a3d":"df.head()","fb2dcda6":"df.info()","b8eb6c90":"df.drop(['Unnamed: 0'],axis=1,inplace=True)","da066cf1":"df.isnull().sum(),df.isna().sum()","3a105e91":"df.clarity = df.clarity.astype('category')\nd1 = dict(enumerate(df.clarity.cat.categories))\nd1","fc5652d2":"df.cut = df.cut.astype('category')\nd2 = dict(enumerate(df.cut.cat.categories))\nd2","977ae83d":"df.color = df.color.astype('category')\nd3 = dict(enumerate(df.color.cat.categories))\nd3","cd20acea":"df.clarity.cat.reorder_categories(['I1','SI2','SI1','VS2','VS1','VVS2','VVS1','IF'],inplace=True)\ndf.cut.cat.reorder_categories(['Fair','Good','Very Good','Premium','Ideal'],inplace=True)\ndf.color.cat.reorder_categories(['J','I','H','G','F','E','D'],inplace=True)","88493577":"df.clarity = df.clarity.cat.codes\ndf.cut = df.cut.cat.codes\ndf.color = df.color.cat.codes","8c9937d1":"correlation = df.corr()\nplt.figure(1,figsize=(10,10))\nsns.heatmap(correlation,annot=True)    ","6a5ac00f":"sns.distplot(df['carat'] , bins = 20)","9eda4c35":"fig = plt.figure(1, figsize = (15,10))\nax = fig.add_subplot(111)\nscatter = ax.scatter(df['price'],df['carat'],c=df.clarity)\nax.set_title('price\/carat')\nax.set_xlabel('price')\nax.set_ylabel('carat')\nplt.colorbar(scatter)","ca8dac95":"fig = plt.figure(1, figsize = (15,10))\nax = fig.add_subplot(111)\nscatter = ax.scatter(df['price'],df['carat'],c=df.color)\nax.set_title('price\/carat')\nax.set_xlabel('price')\nax.set_ylabel('carat')\nplt.colorbar(scatter)","46239868":"fig = plt.figure(1, figsize = (15,10))\nax = fig.add_subplot(111)\nscatter = ax.scatter(df['price'],df['carat'],c=df.cut)\nax.set_title('price\/carat')\nax.set_xlabel('price')\nax.set_ylabel('carat')\nplt.colorbar(scatter)","4c49fe77":"sns.countplot(x='clarity',data=df,palette=\"magma\")","4f5d91d2":"sns.countplot(x='color',data=df,palette=\"rocket\")","9c5efe4c":"sns.countplot(x='cut',data=df,palette=\"cubehelix\")","6e5a9e8f":"scaler = StandardScaler()","f3d6115b":"X = scaler.fit_transform(df.drop(['price'],axis=1))\ny = scaler.fit_transform(df[['price']])","8016e07b":"df.shape,X.shape,y.shape","889bcbf5":"X_train,X_test,y_train,y_test = train_test_split(X,y,test_size=0.2,random_state=0)\nX_train.shape,X_test.shape,y_train.shape,y_test.shape","2dbb30f3":"model = KNeighborsRegressor()\nmodel.fit(X_train,y_train)","95121635":"pred = model.predict(X_test)","60792aec":"mse = mean_squared_error(pred,y_test)\nrmse = np.sqrt(mean_squared_error(pred,y_test))\nmse,rmse","b25c555f":"ITpred = scaler.inverse_transform(pred)\nITpred.shape","d79eb211":"ITytest = scaler.inverse_transform(y_test)\nITytest.shape","c440d63a":"ITmse = mean_squared_error(ITpred,ITytest)\nITrmse = np.sqrt(mean_squared_error(ITpred,ITytest))\nITmse,ITrmse","f7b6cfa7":"model.score(X_test,y_test)","c8dabb18":"ptmodel = KNeighborsRegressor()\nptrange = np.arange(1,11)\nptparams = ({'n_neighbors': ptrange})\ngridsearch = GridSearchCV(ptmodel,ptparams,cv=10)","71c44009":"gridsearch.fit(X_train,y_train)\ngridsearch.best_params_","9ff0bb53":"GSmodel = KNeighborsRegressor(n_neighbors=8)\nGSmodel.fit(X_train,y_train)","da5a8c9f":"GSpred = GSmodel.predict(X_test)\nGSmse = mean_squared_error(GSpred,y_test)\nGSrmse = np.sqrt(mean_squared_error(GSpred,y_test))\nGSmse,GSrmse","d48dd0aa":"GSITpred = scaler.inverse_transform(GSpred)\nGSITpred.shape","7a3e0c53":"GSITytest = scaler.inverse_transform(y_test)\nGSITytest.shape","94b60bcc":"GSITmse = mean_squared_error(GSITpred,GSITytest)\nGSITrmse = np.sqrt(mean_squared_error(GSITpred,GSITytest))\nGSITmse,GSITrmse","1c106b0d":"GSmodel.score(X_test,y_test)","a23fc58c":"Now all columns are numerical and we can visualize the data","06aca0c7":"re-creating model with best params","425ce0b4":"Lets check head of the DataFrame","acf2aaa2":"**PARAMETER TUNING**","ec33d878":"numbers are normalized , to get the idea about price deviation we need unfold price back","05b63697":"all object Dtypes should be converted into numerical or categorical data type. cut, color and clarity are categorical and index column is useless(Unnamed: 0) in this case . And we should check for the null,NaN values first.","ac7d9223":"Huge diamons are almost never have high clarity, and high clarity still makes huge impact on the price. Same goes with the color. Cut quality also affects the price , making price\/carat relationship non-linear.","bb6746ee":"**creating model** with default settings first . we need metrics as well","ab0ec789":"we've got a bit better results . so, final score\n\nMSE:502017.1463\n\nRMSE:708.5316","821bd03c":"high clarity diamons are very rare. Good quality cut and color are common","103666a6":"**FEATURE SCALING**","54744182":"clarity, from top to bottom tier\n\nIF -> VVS1 -> VVS2 -> VS1 -> VS2 -> SI1 -> SI2 -> I1\n\ndiamond color tier list\n\nD -> E -> F -> G -> H -> I -> J\n\ndiamond cut tier\n\nIdeal -> Premium -> Very Good -> Good -> Fair","ddfed026":"train \\ test set split","fc4bdb67":"Price is highly dependent on it's mass(carat) and size(X,Y,Z) ,so let's check first how this parameters are distributed"}}