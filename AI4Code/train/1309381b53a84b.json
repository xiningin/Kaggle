{"cell_type":{"9caaa5ea":"code","b4db41a8":"code","80e4dbb4":"code","d1b35784":"code","a0b6a7b7":"code","007cf03d":"code","12b97271":"code","c6f4d273":"code","2207035f":"code","423289be":"code","c8b878e7":"code","e2562065":"code","6e972f45":"code","47d602c7":"code","ba9d70b4":"code","b01ee20e":"markdown","62045c8d":"markdown","94d8cc27":"markdown","3e7d1e2d":"markdown","1d706e19":"markdown","7fad8106":"markdown","1b19c407":"markdown","a084dbe5":"markdown"},"source":{"9caaa5ea":"import tensorflow as tf\nimport os\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\nfrom random import shuffle\nfrom tensorflow.keras.layers import Conv2D, Flatten, MaxPooling2D, Dense, Dropout\nfrom tensorflow.keras.models import Sequential\nfrom tensorflow.keras.preprocessing.image import ImageDataGenerator\nfrom tensorflow.keras.utils import to_categorical\n\n\nimport cv2\n\nfrom sklearn.model_selection import train_test_split\nimport plotly.express as px\nfrom plotly import offline\noffline.init_notebook_mode(connected = True)","b4db41a8":"BASE_DIR = '..\/input\/four-shapes\/shapes'\nshapes = os.listdir(BASE_DIR)\nshapes","80e4dbb4":"data = []\ntarget = []\nfor i, shape in enumerate(shapes):\n    path = os.path.join(BASE_DIR, shape)\n    for filename in os.listdir(path):\n        image = cv2.imread(os.path.join(path , filename),0)\n        image = image.reshape(200,200,1)\n        data.append(image)\n        target.append(i)","d1b35784":"data = np.array(data)\ntarget = np.array(target)\ntarget = to_categorical(target)","a0b6a7b7":"data.shape, target.shape","007cf03d":"X_full, X_test, y_full, y_test = train_test_split(data, target, stratify=target, random_state= 42, test_size = 0.25)\nX_train, X_val, y_train, y_val = train_test_split(X_full, y_full, stratify=y_full, random_state= 42, test_size = 0.15)","12b97271":"def show_images(count, X, y):\n    fig, axes =plt.subplots(count\/\/4,4, figsize = (16, count))\n    for i, ind in enumerate(np.random.randint(0, X.shape[0] , count)):\n        ax = axes[i\/\/4][i%4] \n        ax.imshow(X[ind],cmap = 'gray')\n        ax.title.set_text(shapes[np.argmax(y[ind])])\n        ax.set_xticks([]) \n        ax.set_yticks([])\nshow_images(8, X_train, y_train)","c6f4d273":"show_images(8, X_val, y_val)","2207035f":"# train_datagen = ImageDataGenerator(\n\n#     rotation_range=180,\n#     width_shift_range=0.2,\n#     height_shift_range=0.2,\n#     rescale = 1.0\/255,\n#     horizontal_flip=True,\n#     vertical_flip=True)\n\n# val_datagen = ImageDataGenerator(rescale = 1.0\/255)","423289be":"# train_generator = train_datagen.flow(X_train, y_train)\n# val_generator = val_datagen.flow(X_val, y_val)\nX_test = X_test\/255.0\nX_train = X_train\/255.0\nX_val = X_val\/255.0","c8b878e7":"model = Sequential([\n    Conv2D(32, (3,3),strides = 2 ,input_shape = (200,200,1), activation = 'relu'),\n    MaxPooling2D(),\n    Conv2D(32, (3,3), activation = 'relu'),\n    MaxPooling2D(),\n    Conv2D(32, (3,3), activation = 'relu'),\n    MaxPooling2D(),\n    Conv2D(32, (3,3), activation = 'relu'),\n    MaxPooling2D(),\n    Flatten(),\n    Dropout(0.5),\n    Dense(128, activation = 'relu'),\n    Dropout(0.5),\n    Dense(64, activation = 'relu'),\n    Dropout(0.5),\n    Dense(4, activation = 'softmax')\n])\nmodel.summary()","e2562065":"model.compile(loss='categorical_crossentropy', optimizer = 'adam', metrics = ['accuracy'])\n\nhistory = model.fit(X_train, y_train, epochs = 5, validation_data = (X_val, y_val))","6e972f45":"metrics = pd.DataFrame(history.history)\npx.line(metrics)","47d602c7":"loss, accuracy = model.evaluate(X_test, y_test)\nprint('Accuracy is {}%'.format(accuracy*100))","ba9d70b4":"preds = model.predict(X_test)\nshow_images(8,X_test, preds)","b01ee20e":"# Modelling","62045c8d":"There are only 4 classes and samples are easily distinguishable, so, model which has been trained for only 5 epochs can get 100% accuracy. Let's check images and see if everything is OK. ","94d8cc27":"# Reading data","3e7d1e2d":"# Preprocessing","1d706e19":"# Import libraries","7fad8106":"That is it for this notebook. If you liked my work, please upvote","1b19c407":"Let's check some images to see if everything is alright","a084dbe5":"Everything looks ok. ~~Let's do some image augmentation~~. It turned out that, there is no need for it"}}