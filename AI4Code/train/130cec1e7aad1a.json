{"cell_type":{"a91ee4cd":"code","1513dc96":"code","c55b45b2":"code","09cbd8f5":"code","5bae94f9":"code","d7bdc628":"code","e5f31b40":"code","7e9a7892":"code","2919483b":"code","01f74ab4":"code","c442482e":"code","26cfb941":"code","f685277d":"code","4d9be8c2":"code","c4405e47":"code","d64e99cf":"code","466e8955":"code","b58f6014":"code","c6e61ec9":"code","9a0b346c":"code","bb816f5b":"markdown","c067d975":"markdown","c94414ec":"markdown","b38308ae":"markdown","0dad318c":"markdown","3a871cfc":"markdown","ceb0d64e":"markdown","331de248":"markdown","98cf445d":"markdown","42ef5c2a":"markdown","dd43b859":"markdown","8af48b23":"markdown","02a6b3df":"markdown","68cbc73a":"markdown","a23ef003":"markdown","eebecd40":"markdown","3386ea88":"markdown","f043a602":"markdown","da00d360":"markdown","8716300c":"markdown","857bc1e9":"markdown","26f34fb3":"markdown","67627a56":"markdown","abff6125":"markdown","9df1127c":"markdown","be055a34":"markdown"},"source":{"a91ee4cd":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport re","1513dc96":"df_jobs_struct = pd.read_csv('..\/input\/2-raw-job-bulletins-to-structured-csv\/jobs.csv')\ndf_jobs_struct.head(10)","c55b45b2":"feminine_coded_words = [\n    \"agree\",\"affectionate\",\"child\",\"cheer\",\"collab\",\"commit\",\"communal\",\n    \"compassion\",\"connect\",\"considerate\",\"cooperat\",\"co-operat\",\n    \"depend\",\"emotiona\",\"empath\",\"feel\",\"flatterable\",\"gentle\",\n    \"honest\",\"interpersonal\",\"interdependen\",\"interpersona\",\"inter-personal\",\n    \"inter-dependen\",\"inter-persona\",\"kind\",\"kinship\",\"loyal\",\"modesty\",\n    \"nag\",\"nurtur\",\"pleasant\",\"polite\",\"quiet\",\"respon\",\"sensitiv\",\n    \"submissive\",\"support\",\"sympath\",\"tender\",\"together\",\"trust\",\"understand\",\n    \"warm\",\"whin\",\"enthusias\",\"inclusive\",\"yield\",\"share\",\"sharin\"\n]\n\nmasculine_coded_words = [\n    \"active\",\"adventurous\",\"aggress\",\"ambitio\",\n    \"analy\",\"assert\",\"athlet\",\"autonom\",\"battle\",\"boast\",\"challeng\",\n    \"champion\",\"compet\",\"confident\",\"courag\",\"decid\",\"decision\",\"decisive\",\n    \"defend\",\"determin\",\"domina\",\"dominant\",\"driven\",\"fearless\",\"fight\",\n    \"force\",\"greedy\",\"head-strong\",\"headstrong\",\"hierarch\",\"hostil\",\n    \"impulsive\",\"independen\",\"individual\",\"intellect\",\"lead\",\"logic\",\n    \"objective\",\"opinion\",\"outspoken\",\"persist\",\"principle\",\"reckless\",\n    \"self-confiden\",\"self-relian\",\"self-sufficien\",\"selfconfiden\",\n    \"selfrelian\",\"selfsufficien\",\"stubborn\",\"superior\",\"unreasonab\"\n]\n\nhyphenated_coded_words = [\n    \"co-operat\",\"inter-personal\",\"inter-dependen\",\"inter-persona\",\n    \"self-confiden\",\"self-relian\",\"self-sufficien\"\n]\n\npossible_codings = (\n    \"strongly feminine-coded\",\"feminine-coded\",\"neutral\",\n    \"masculine-coded\",\"strongly masculine-coded\"\n)","09cbd8f5":"class JobAd():\n\n    def __init__(self, ad_text):\n        self.ad_text = ad_text\n        self.analyse()\n        \n    def gender_decode(self):\n        return self.coding, self.masculine_coded_words, self.feminine_coded_words\n        \n\n\n    def analyse(self):\n        word_list = self.clean_up_word_list()\n        self.extract_coded_words(word_list)\n        self.assess_coding()\n        \n\n    def clean_up_word_list(self):\n        cleaner_text = ''.join([i if ord(i) < 128 else ' '\n            for i in self.ad_text])\n        cleaner_text = re.sub(\"[\\\\s]\", \" \", cleaner_text, 0, 0)\n        cleaned_word_list = re.sub(u\"[\\.\\t\\,\u201c\u201d\u2018\u2019<>\\*\\?\\!\\\"\\[\\]\\@\\':;\\(\\)\\.\/&]\",\n            \" \", cleaner_text, 0, 0).split(\" \")\n        word_list = [word.lower() for word in cleaned_word_list if word != \"\"]\n        return self.de_hyphen_non_coded_words(word_list)\n\n    def de_hyphen_non_coded_words(self, word_list):\n        for word in word_list:\n            if word.find(\"-\"):\n                is_coded_word = False\n                for coded_word in hyphenated_coded_words:\n                    if word.startswith(coded_word):\n                        is_coded_word = True\n                if not is_coded_word:\n                    word_index = word_list.index(word)\n                    word_list.remove(word)\n                    split_words = word.split(\"-\")\n                    word_list = (word_list[:word_index] + split_words +\n                        word_list[word_index:])\n        return word_list\n\n    def extract_coded_words(self, advert_word_list):\n        words, count = self.find_and_count_coded_words(advert_word_list,\n            masculine_coded_words)\n        self.masculine_coded_words, self.masculine_word_count = words, count\n        words, count = self.find_and_count_coded_words(advert_word_list,\n            feminine_coded_words)\n        self.feminine_coded_words, self.feminine_word_count = words, count\n\n    def find_and_count_coded_words(self, advert_word_list, gendered_word_list):\n        gender_coded_words = list(filter(lambda x: x.lower().startswith(tuple(gendered_word_list)), advert_word_list))\n        return (\",\").join(gender_coded_words), len(gender_coded_words)\n\n    def assess_coding(self):\n        coding_score = self.feminine_word_count - self.masculine_word_count\n        if coding_score == 0:\n            if self.feminine_word_count:\n                self.coding = \"neutral\"\n            else:\n                self.coding = \"empty\"\n        elif coding_score > 3:\n            self.coding = \"strongly feminine-coded\"\n        elif coding_score > 0:\n            self.coding = \"feminine-coded\"\n        elif coding_score < -3:\n            self.coding = \"strongly masculine-coded\"\n        else:\n            self.coding = \"masculine-coded\"\n\n    def list_words(self):\n        if self.masculine_coded_words == \"\":\n            masculine_coded_words = []\n        else:\n            masculine_coded_words = self.masculine_coded_words.split(\",\")\n        if self.feminine_coded_words == \"\":\n            feminine_coded_words = []\n        else:\n            feminine_coded_words = self.feminine_coded_words.split(\",\")\n        masculine_coded_words = self.handle_duplicates(masculine_coded_words)\n        feminine_coded_words = self.handle_duplicates(feminine_coded_words)\n        return masculine_coded_words, feminine_coded_words\n\n    def handle_duplicates(self, word_list):\n        d = {}\n        l = []\n        for item in word_list:\n            if item not in d.keys():\n                d[item] = 1\n            else:\n                d[item] += 1\n        for key, value in d.items():\n            if value == 1:\n                l.append(key)\n            else:\n                l.append(\"{0} ({1} times)\".format(key, value))\n        return l\n","5bae94f9":"df_jobs_struct['DUTY_REQ'] = df_jobs_struct['JOB_DUTIES'] + df_jobs_struct['REQUIREMENTS']\ndf_jobs_struct['DUTY_REQ'] = df_jobs_struct['DUTY_REQ'].fillna('No text found')","d7bdc628":"# apply the class to every of our pandas dataframe\ndf_jobs_struct['coding'], df_jobs_struct['masculine_words'], df_jobs_struct['feminine_words'] = \\\nzip(*df_jobs_struct['DUTY_REQ'].apply(lambda x: JobAd(x).gender_decode()))\n\n# finally print extracted coding for each job rows\ndf_jobs_struct[['JOB_CLASS_TITLE', 'coding', 'masculine_words', 'feminine_words']].head(25)","e5f31b40":"# save the dataframe for future use\ndf_jobs_struct.to_csv('.\/df_jobs_with_gender_coded.csv', index=False)","7e9a7892":"def _process_salary(salary):\n    if salary is np.nan:\n        salary = str(0)\n    if \"-\" not in salary:\n        return int(salary.replace(',', ''))\n    else:\n        sal_list = salary.split('-')\n        med_salary = (int(sal_list[0].replace(',', '')) + int(sal_list[1].replace(',', ''))) \/ 2\n        return med_salary","2919483b":"####### Import demographics of applicants ##############\ndf_la_ethn = \\\npd.read_csv(\n    '..\/input\/la-applicants-gender-and-ethnicity\/rows.csv')\n\n# see what we have got # \ndf_la_ethn.head()","01f74ab4":"\n###### Do Some processing and cleaning ##################\ndf_jobs_struct['JOB_CLASS_NO'] = pd.to_numeric(\n    df_jobs_struct['JOB_CLASS_NO'])\ndf_la_ethn['Job Number'] = df_la_ethn['Job Number'].str.extract('(\\d+)')\ndf_la_ethn['Job Number'] = pd.to_numeric(df_la_ethn['Job Number'])\n\n\ndf_jobs_struct['ENTRY_SALARY_GEN'] = \\\ndf_jobs_struct['ENTRY_SALARY_GEN'].replace({'\\$':''}, regex = True)\n\ndf_jobs_struct['ENTRY_SALARY_GEN'] = \\\ndf_jobs_struct['ENTRY_SALARY_GEN'].replace({'\\(flat-rated\\)':''}, regex = True)\n\ndf_jobs_struct['ENTRY_SALARY_GEN'] = \\\ndf_jobs_struct['ENTRY_SALARY_GEN'].replace({'nan':''}, regex = True)\n\n\ndf_jobs_struct['ENTRY_SALARY_GEN_MED'] = \\\ndf_jobs_struct['ENTRY_SALARY_GEN'].apply(lambda x: _process_salary(x))\n\n\n###### Bins the salary for our machine learning model ###########\nbins = [0, 50000, 75000, 90000, 100000, 120000, 150000, 200000]\ndf_jobs_struct['ENTRY_SALARY_GEN_MED_BIN'] = pd.cut(\n    df_jobs_struct['ENTRY_SALARY_GEN_MED'], bins)\n\n###############################\n# Finally merge our two dataset on job class number\n##############################\ndf_jobs_struct_merge = df_jobs_struct.merge(\n    df_la_ethn, left_on='JOB_CLASS_NO', right_on='Job Number')\ndf_jobs_struct_merge.head()","c442482e":"import eli5\nimport numpy as np\nimport pandas as pd\nfrom sklearn.model_selection import KFold\nfrom sklearn.linear_model import Ridge\nfrom sklearn.pipeline import FeatureUnion\nfrom sklearn.feature_extraction.text import CountVectorizer, TfidfVectorizer\nfrom sklearn.metrics import mean_squared_log_error\nfrom sklearn.preprocessing import OneHotEncoder\nfrom sklearn.preprocessing import LabelEncoder\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import accuracy_score\n\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.ensemble import GradientBoostingClassifier","26cfb941":"df_jobs_struct_merge['female_perc'] = (df_jobs_struct_merge['Female'] \/ df_jobs_struct_merge['Apps Received']) *100\ndf_jobs_struct_merge['male_perc'] = (df_jobs_struct_merge['Male'] \/ df_jobs_struct_merge['Apps Received']) *100\n\nconditions = [\n    (df_jobs_struct_merge['female_perc'] >= 50),\n    (df_jobs_struct_merge['male_perc'] >= 50)]\nchoices = [0, 1]\ndf_jobs_struct_merge['gender_code'] = np.select(conditions, choices, default=1)","f685277d":"# drop unnecessary columns\n\nDROP_COLUMNS = ['raw_job_text', 'JOB_CLASS_TITLE', 'JOB_CLASS_NO', 'OPEN_DATE',\n                'TEMP_EXAM_TYPE', 'TEMP_SALARY', 'TEMP_REQUIREMENTS', 'WHERE_TO_APPLY',\n                'DEADLINE', 'SELECTION_PROCESS', 'raw_clean_job_text', 'REQUIREMENTS_PROCESS',\n                'req_list', 'temp_entity', 'Fiscal Year', 'Job Number', 'Job Description',\n                'Apps Received', 'Female', 'Male', 'Unknown_Gender', 'ENTRY_SALARY_GEN',\n                'ENTRY_SALARY_DWP', 'REQUIREMENT_SET_ID',\n                'Black', 'Hispanic', 'Asian', 'Caucasian', 'American Indian\/ Alaskan Native',\n                'Filipino', 'Unknown_Ethnicity', 'ENTRY_SALARY_GEN_MED']\n\n# y_only = df_jobs_struct_merge[['Female', 'Male']]\n\nX_only = df_jobs_struct_merge\n\n\n# replae nan values\nX_only['JOB_DUTIES'] = X_only['JOB_DUTIES'].fillna('Not Found')\nX_only['DRIVERS_LICENSE_REQ'] = X_only['DRIVERS_LICENSE_REQ'].fillna('Not Found')\nX_only['REQUIREMENTS'] = X_only['REQUIREMENTS'].fillna('Not Found')\nX_only['EDUCATION_MAJOR'] = X_only['EDUCATION_MAJOR'].fillna('Not Found')\nX_only['EXP_JOB_CLASS_FUNCTION'] = X_only['EXP_JOB_CLASS_FUNCTION'].fillna('Not Found')\nX_only['EXP_JOB_CLASS_TITLE'] = X_only['EXP_JOB_CLASS_TITLE'].fillna('Not Found')","4d9be8c2":"# we need a custom pre-processor to extract correct field,\n# but want to also use default scikit-learn preprocessing (e.g. lowercasing)\ndefault_preprocessor = CountVectorizer().build_preprocessor()\ndef build_preprocessor(field):\n    field_idx = list(X_only.columns).index(field)\n    return lambda x: default_preprocessor(x[field_idx])\n\nvectorizer = FeatureUnion([\n    ('JOB_DUTIES', TfidfVectorizer(\n        stop_words='english',\n        preprocessor=build_preprocessor('JOB_DUTIES'))),\n    ('REQUIREMENTS', TfidfVectorizer(\n        stop_words='english',\n        preprocessor=build_preprocessor('REQUIREMENTS'))),\n    ('EXP_JOB_CLASS_FUNCTION', TfidfVectorizer(\n        preprocessor=build_preprocessor('EXP_JOB_CLASS_FUNCTION')))\n])\nX_train = vectorizer.fit_transform(X_only.values)\n\ndf_jobs_struct_merge['gender_code'] = df_jobs_struct_merge['gender_code'].fillna(1)\n\ny_train = df_jobs_struct_merge['gender_code']\nX_train","c4405e47":"# spilt our training dataset into training and test set\ntrain_x, test_x, train_y, test_y = train_test_split(\n    X_train, y_train,test_size=0.1, random_state = 2019)\n\n# declare our model\nmodel = GradientBoostingClassifier(random_state = 20199, n_estimators = 200)\n\n# train our model\nmodel.fit(train_x, train_y)\n\n# evaluate our model performance\ny_pred_valid = model.predict(test_x)\nacc = accuracy_score(test_y, y_pred_valid)\nprint(f'valid acc: {acc:.5f}')","d64e99cf":"eli5.show_weights(model, vec=vectorizer)","466e8955":"eli5.show_prediction(model, doc=X_only.values[67], vec=vectorizer)","b58f6014":"y_train.values[67]","c6e61ec9":"eli5.show_prediction(model, doc=X_only.values[1], vec=vectorizer)","9a0b346c":"y_train.values[15]","bb816f5b":"Hah! Look very good. Now we have our dataframe ready, let's move on to our next steps. ","c067d975":"The part before the double underscore is the vectorizer name\/column name, and the feature name goes after that. The darker the green, the important feature it is.\n\n    - We are seeing that ```preparing, personnel``` in REQUIREMENTS AND JOB DUTIES columns are very important features.","c94414ec":"> ### <font color=\"#5831bc\" face=\"Comic Sans MS\">Model building and training<\/font>\nWe are going to build a binary classification model. We will be using a ```GradientBoostingClassifier```. There is no specific reason to use this classifier. Also, we are going split our training dataset into train and test set for evaluation. ","b38308ae":"> ### <font color=\"#5831bc\" face=\"Comic Sans MS\">Create a class for identify above words in job description<\/font>\nThe words defined above are stemmed so that we can identify different forms of that word. Also, Job descriptions are messy has a lot of punctuation, useless text, stopwords. We have to process them all. So we created a class to tackle all that once.","0dad318c":"> ### <font color=\"#5831bc\" face=\"Comic Sans MS\">Import dataset and library<\/font>\nWe already pre-processed and made a structured CSV version of all job bulletins in the second part of the solution. In this notebook, we will be using that CSV file for doing our analysis on language biases. I also keep a column in that CSV for a clean version of the whole raw job description for each job bulletins, so that we can use that in further analysis. That will also help us a lot. ","3a871cfc":"> ### <font color=\"#5831bc\" face=\"Comic Sans MS\">Finally, extract gender bias from job description<\/font>\nWe build our class, now let's apply that class in pandas each row and extract gender coding for each job descripton. Also, we store them as a seperate columns. \n\n**Also, we don't want search the entire job description of each job bulletins, because there are some section that is reduntant or unnecessary. We are specially interested in job ```DUTIES``` and ```REQUIREMENTS``` section. Because these two field candidates looks often.**","ceb0d64e":"Hah! We can see our applicant's demographic data. It's will be very useful. We will now merge this dataset with our structured CSV by Job class number and do some preprocessing. Please read the comment with the code for understanding what is going on in each part of the code. ","331de248":"Wow! We can see ```collection\/media``` is highly positive. Meaning that ```collection\/media``` is biased towards female. Also, from the first plot, we can see that ```personnel,responsibile, fine, arts``` are positively affecting the prediction. That's means these words are female dominated. ","98cf445d":"Nice! We are seeing feminine and masculine coded words. Also, there are some list for different types of gender that we will be using. At the last, there are explanations for each gender coding. At the last, we see an array named ```possible codings```. We will use these words to describe our job descriptions. Let's see what this coding means:\n\n    - \"feminine-coded\": \"This job ad uses more words that \"\n                            \"are subtly coded as feminine than words that are \"\n                            \"subtly coded as masculine (according to the \"\n                            \"research). Fortunately, the research suggests \"\n                            \"this will have only a slight effect on how appealing \"\n                            \"the job is to men, and will encourage women applicants.\"\n                            \n                            \n    - \"masculine-coded\": \"This job ad uses more words that \"\n                        \"are subtly coded as masculine than words that are \"\n                        \"subtly coded as feminine (according to the research). \"\n                        \"It risks putting women off applying, but will probably \"\n                        \"encourage men to apply.\n                        \n                        \n    - \"strongly feminine-coded\": \"This job ad uses more words that \"\n                        \"are subtly coded as feminine than words that are \"\n                        \"subtly coded as masculine (according to the \"\n                        \"research). Fortunately, the research suggests this \"\n                        \"will have only a slight effect on how appealing the \"\n                        \"job is to men, and will encourage women applicants.\n                        \n                        \n    _ \"strongly masculine-coded\": \"This job ad uses more words that \"\n                        \"are subtly coded as masculine than words that are subtly \"\n                        \"coded as feminine (according to the research). It risks \"\n                        \"putting women off applying, but will probably encourage \"\n                        \"men to apply.\n                        \n                        \n    _ \"empty\": This job ad doesn't use any words \"\n              \"that are subtly coded as masculine or feminine (according to \"\n              \"the research). It probably won't be off-putting to men or \"\n              \"women applicants.\n              \n              \n    _ \"neutral\": This job ad uses an equal number \"\n              \"of words that are subtly coded as masculine and feminine \"\n              \"(according to the research). It probably won't be off-putting \"\n              \"to men or women applicants.","42ef5c2a":"> ### <font color=\"#5831bc\" face=\"Comic Sans MS\">Import pre-defined bias word<\/font>\nIn this section, we will import masculine and feminine-coded words from http:\/\/gender-decoder.katmatfield.com. The words are stored as python arrays. These words are written as the stem to make it easier to match all variants. In other words, the suffix is intentionally left out.","dd43b859":"Okay! That looks good. We have successfully build a model that predicts gender dominance if we give them a job description. But put a side note that this model is not a state of the art. We can definitely and of course improve our model, this is just a demo model. Now let's deep dive into the model and see what our model learned, what we can get! ","8af48b23":"We successfully merge our structured CSV dataset with applicants demographics dataset. Feel free to scroll to the right to see each applicants demographics also. In the next, section we will be building our model. ","02a6b3df":"Another handy feature is analyzing individual predictions. Let's check some predictions from the validation set. You see a summary of various words contribution at the top, and then below you can see features highlighed in text.","68cbc73a":"# <font color=\"#5831bc\" face=\"Comic Sans MS\">2. Identify biases by machine learning model<\/font> \nPreviously, we found biased words by finding hardcoded words in the job description. Now we want to deep dive. We want to dig into the job description with a machine learning model.\n\nWe found a dataset for City of LA job applicants demographics for 187 jobs. So we will use this data in model building. We will build a machine learning model for predicting the gender of job applicants in each job. Then we will dig dive into the model and try to found hidden language that can be biased to a certain group. Without further do let's get started! ","a23ef003":"Awesome! We successfully identified words that are biased to a certain gender. We are seeing that some jobs are **masculine** and some are **feminine** coded. Also, some jobs don't have any biased language in their ```DUTIES and REQUIREMENTS``` sections. We will not do any analysis on this topic in this kernel, we will do that in the next kernel. Because this kernel goal is to only identify those languages that negatively bias certain group of applicants. ","eebecd40":"> ### <font color=\"#5831bc\" face=\"Comic Sans MS\">First, ready our dataset<\/font>\nIn this section, we will import our newly found data and we will do some preprocessing of our structured CSV and new dataset for working with our machine learning model. We provided extensive documentation for each code part. The dataset is from [here](https:\/\/data.lacity.org\/A-Prosperous-City\/Job-Applicants-by-Gender-and-Ethnicity\/mkf9-fagf).","3386ea88":"> ### <font color=\"#5831bc\" face=\"Comic Sans MS\">Build our ML model<\/font>\nNow we will be building our ML model. We are going to using a binary classification algorithm using SkLearn. But in order to train our model, we have to feed the right data to our model. So we have to create the right training dataset for our model. \n\n    Since we are identifying the biased language, so we are going to use those columns that are pure text. We are going to use these columns ```JOB_DUTIES```, ```REQUIREMENTS```, ```EXP_JOB_CLASS_FUNCTION```. **```These columns are pure text, we are going to use these columns to predict whether job applicants majority is female or male```**. Then we are going to explore the model for understanding biased language. ","f043a602":"> ### <font color=\"#5831bc\" face=\"Comic Sans MS\">Create training dataset<\/font>\nFirst, we will create a new column and store whether a job applicants pool is female\/male dominate. We will do that by using the external data we merge with our CSV file. If more than 50% of applicants are certain gender than we will identify them as that gender coded. ```Female coded jobs identified as 0 and male-coded jobs are identified as 1.  ```","da00d360":"# <font color=\"#5831bc\" face=\"Comic Sans MS\">Notebook Overview<\/font>\nThis notebook successfully identifies the language in City of LA job description that can negatively bias group of applicants. We do this by identifying\/finding predefined biased words and using machine learning model in the job description. \n\n\nWe used multiple techniques for identifying language that is biased. Each technique gave us interesting and different kinds of results. This notebook has the main section for each technique and its results.\n\nHere are the short contents:\n* **Identify biases by pre-defined word**\n* **Identify biases by machine learning model**\n\n\nWe will use structured versions of job bulletins created in part 2 of our solutions. We will import that data in this notebook by directly. Because in Kaggle you can add kernel output as a dataset. We will use that feature. So without further talking let's get started!","8716300c":"# <font color=\"#5831bc\" face=\"Comic Sans MS\">1. Identify biases by pre-defined word<\/font> \nEmployers often use words that are biased to certain group mostly male\/female that can negatively bias them. http:\/\/gender-decoder.katmatfield.com\/ has a very good list of these words. We can find a good list of male and female-coded words there. Like ```defend``` is masculine coded and ```commit``` is feminine-coded. The words come from a very good **research paper written by Danielle Gaucher, Justin Friesen, and Aaron C. Kay, called ```Evidence That Gendered Wording in Job Advertisements Exists and Sustains Gender Inequality```**.\n\nIn this section, we will be using those words for identifying biased words in job descriptions. Without further do let's begin.","857bc1e9":"Now we are going to show which text feature our model thinks important using a library called eli5 which makes to easy to describe model insights. ","26f34fb3":"<h1 align=\"center\"><font color=\"#5831bc\" face=\"Comic Sans MS\">Identify Biased Language in City of LA job descriptions<\/font><\/h1> ","67627a56":"# <font color=\"#5831bc\" face=\"Comic Sans MS\">Conclusion<\/font>\nWe finally identified languages that negatively bias certain group of job applicants. First, we saw a hard-coded method to find those languages. And secondly, we saw how we can use a machine learning model to identify biases in job descriptions. \n<br\/>\n\n<div class=\"alert alert-block alert-info\">\n<b>Recommendations:<\/b><br\/>\n<br\/>\n    \u2022 <b>Improve the machine learning model:<\/b> Currently, we are using a normal classifier without any modification of parameters and others dependent. It can easily turn into a good machine learning model that can identify biases more accurately.<br\/>\n    <br\/>\n    \u2022 <b>Gather more gender and ethnicity data:<\/b> The data we are using in our machine learning model is very small. It contains only 150+ jobs ethnicity and gender data. The City of LA can easily gather new data on this topic and improve model performance. If the model gets more data to train, the model could identify deep language biases and that will exlusively for City of LA job descriptions, because the model is trained using City of LA jobs data. <br\/>\n<p\/>\n<\/div>\n\n\nIn the next part the solutions, we will make EDA on the structured CSV and try to find some interesting insights. Thanks for reading. See you in the next part of the solutions! ","abff6125":"> ### <font color=\"#5831bc\" face=\"Comic Sans MS\">Find biased languages by analyzing our trained model<\/font>\nNow we are going to use some ```model explainability``` technique to extract gender biases in job descriptions. Before we do that let's spent some time on model explainability. \n\n<div class=\"alert alert-block alert-info\">\n<p\/>\n<b>Model explainability:<\/b><br\/>\n    So we have trained our model. So, if we can find what our model learned for predicting female\/male dominance in job description we can identify bias language. Also, if we discover why our model predicts certain jobs female\/male dominance we can easily find those text features that cause that result. And that how model explainability works. Now we are going to use that. \n<p\/>\n<\/div>","9df1127c":"***\nThis notebook is a part of the solution for DSG: City of LA competition. The solution splited into 5 parts. Here is the list of notebook in correct order. The part of solution you are currently reading is highlighted in bold.\n\n[1. Introduction to the solution of DSG: City of LA](https:\/\/www.kaggle.com\/niyamatalmass\/1-introduction-to-the-solution-of-dsg-city-of-la)\n\n[2. Raw Job Postings to structured CSV](https:\/\/www.kaggle.com\/niyamatalmass\/2-raw-job-bulletins-to-structured-csv)\n\n[**3. Identify biased language**](https:\/\/www.kaggle.com\/niyamatalmass\/3-identify-biased-language)\n\n[4. Improve the diversity and quality](https:\/\/www.kaggle.com\/niyamatalmass\/4-improve-the-diversity-and-quality)\n\n[5. Jobs Promotional Pathway](https:\/\/www.kaggle.com\/niyamatalmass\/5-jobs-promotional-pathway)\n***","be055a34":"Awesome! Let's take some time what we have got here. \n\n    - We gave our model job description data for which position is 67. And we saw that this job is dominated by male candidates (y_train[67 is 1 and it means male dominated]). Then we use our model to predict dominance. After that, we use model explainability technique to identify why our model thinks that given JOB_DUTIES and REQUIREMENTS are female dominance. \n\n    - After visualizing the results, we can see that job duties has words ```administration``` that is highlighted with a strong green colour. It indicates that these words are responsible for model prediction. Which means these words are biased towards men. \n    \n    \nNow let's see for women how our model thinks which language are biased. Let's check for 4th postion data, it is male dominated. Lets what we got! "}}