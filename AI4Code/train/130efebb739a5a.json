{"cell_type":{"c2219e44":"code","0d0c29e9":"code","b9de8e5c":"code","5b516596":"code","9f9eb49e":"code","f82eaba1":"code","dd74ad74":"code","1cc99090":"code","8991ee9b":"code","d04eb51d":"code","255a6450":"code","8dcb0053":"code","f8175ea5":"code","24b7b975":"code","ca917ef3":"code","09a8cb5f":"code","5d54b9e7":"code","bdeaa510":"code","d17f0773":"code","02e919ef":"code","7b822f4a":"code","f2cb64e9":"code","af7128f8":"code","676599e3":"code","10394a2b":"code","cf7f229c":"code","a4de28a3":"code","7054aa96":"code","fc429f84":"code","2e70aafb":"code","521c267c":"code","e150affb":"code","1ba741ab":"code","f5155336":"code","164c2ab8":"code","d98fe44f":"code","d47cd1c8":"markdown","ad3f0f2a":"markdown","5174d58f":"markdown","30245243":"markdown","5e30974d":"markdown","bcb20fc3":"markdown","d36fef4b":"markdown","39cdf325":"markdown","8b457610":"markdown","5e4a3a11":"markdown","b394ef2c":"markdown","c821420e":"markdown","73c481d1":"markdown","01975685":"markdown","3ed3e6fd":"markdown","dfc5bdba":"markdown","c5aa2c89":"markdown","393308e8":"markdown","6d04b7e3":"markdown","9db30ca5":"markdown","83acd8cd":"markdown","6e1dbc5b":"markdown","50292e5e":"markdown","a9c7c3db":"markdown","b2cb2fe7":"markdown","9a6c259f":"markdown","07722024":"markdown","0c33e0bd":"markdown","8f278380":"markdown","dc19258f":"markdown"},"source":{"c2219e44":"# --- CSS STYLE ---\nfrom IPython.core.display import HTML\ndef css_styling():\n    styles = open(\"..\/input\/kaggle-data-science-survey-20172021\/style.css\", \"r\").read()\n    return HTML(\"<style>\"+styles+\"<\/style>\")\ncss_styling()","0d0c29e9":"import os\nimport pandas as pd\nimport numpy as np\nimport imageio\nimport wandb\nfrom PIL import Image\nfrom IPython.core.display import display, HTML, Javascript\nimport IPython.display as py_display\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\nimport warnings\nwarnings.filterwarnings(\"ignore\")\n\nos.environ[\"WANDB_SILENT\"] = \"true\"\nCONFIG = {'competition': 'kaggle-survey-2021', '_wandb_kernel': 'aot'}\n\n# Secrets\nfrom kaggle_secrets import UserSecretsClient\nuser_secrets = UserSecretsClient()\nsecret_value_0 = user_secrets.get_secret(\"wandb\")\n\n# Log in W&B personal API\n! wandb login $secret_value_0","b9de8e5c":"# =============== FUNCTIONS ===============\ndef save_dataset_artifact(run_name, artifact_name, path):\n    '''Saves dataset to W&B Artifactory.\n    run_name: name of the experiment\n    artifact_name: under what name should the dataset be stored\n    path: path to the dataset'''\n    \n    run = wandb.init(project='kaggle-survey-2021', \n                     name=run_name, \n                     config=CONFIG, anonymous=\"allow\")\n    artifact = wandb.Artifact(name=artifact_name, \n                              type='dataset')\n    artifact.add_file(path)\n\n    wandb.log_artifact(artifact)\n    wandb.finish()\n    \n    \ndef create_wandb_plot(x_data=None, y_data=None, x_name=None, y_name=None, \n                      title=None, log=None, plot=\"line\"):\n    '''Create and save lineplot\/barplot in W&B Environment.\n    x_data & y_data: Pandas Series containing x & y data\n    x_name & y_name: strings containing axis names\n    title: title of the graph\n    log: string containing name of log'''\n    \n    data = [[label, val] for (label, val) in zip(x_data, y_data)]\n    table = wandb.Table(data=data, columns = [x_name, y_name])\n    \n    if plot == \"line\":\n        wandb.log({log : wandb.plot.line(table, x_name, y_name, title=title)})\n    elif plot == \"bar\":\n        wandb.log({log : wandb.plot.bar(table, x_name, y_name, title=title)})\n    elif plot == \"scatter\":\n        wandb.log({log : wandb.plot.scatter(table, x_name, y_name, title=title)})\n        \n        \ndef create_wandb_hist(x_data=None, x_name=None, title=None, log=None):\n    '''Create and save histogram in W&B Environment.\n    x_data: Pandas Series containing x values\n    x_name: strings containing axis name\n    title: title of the graph\n    log: string containing name of log'''\n    \n    data = [[x] for x in x_data]\n    table = wandb.Table(data=data, columns=[x_name])\n    wandb.log({log : wandb.plot.histogram(table, x_name, title=title)})\n    \n    \ndef wb_prep_data(df):\n    # First 2 columns: Year and Gender\n    # The rest: Categories\n\n    df = df[df[\"Year\"]==2021]\n\n    df = df.melt(id_vars=[\"Year\", \"Gender\"],\n                 value_vars=list(df.columns[2:]),\n                 value_name=\"Count\")\n    df.columns = [\"Year\", \"Gender\", \"Category\", \"Count\"]\n    man = df[df[\"Gender\"] == \"Man\"]\n    woman = df[df[\"Gender\"] == \"Woman\"]\n    return man, woman\n\n\ndef get_data_multiple_answers(cols, new_names):\n    '''Select and prep data for the columns mentiones.\n    It contains year & gender data as well.\n    \n    cols: must be ar array of valid names from 1 question\n    new_names: the new names these coluns should have\n    return: new prepped data (in percentages per year & gender)'''\n    \n    cols.extend([\"Year\", \"What is your gender? - Selected Choice\"])\n    new_names.extend([\"Year\", \"Gender\"])\n\n    data = df[cols]\n    data.columns = new_names\n    data = data[data[\"Gender\"].isin([\"Man\", \"Woman\"])]\n\n    data = data.groupby([\"Year\", \"Gender\"]).count().reset_index()\n    data = pd.merge(data, total, on=[\"Year\", \"Gender\"])\n\n    cols_perc = list(data.columns[2:-1])\n    for c in cols_perc:\n        data[c] = data[c]\/data[\"Count\"] * 100\n        data[c] = data[c].apply(lambda x: round(x, 1))\n    data.drop(columns=\"Count\", inplace=True)\n    \n    return data\n    \n    \ndef adjust_amount(data, amount_column):\n    '''Takes in dataset and calculates the adjusted Amount (in dollars) per country.\n    data: a dataframe containing Year, Gender, Country and Amount column\n    amount_column: name of the column to be adjusted (e.g.: 1,000-9,000)'''\n    \n    data = data[data[\"Country\"]!='Other'].reset_index(drop=True)\n\n    # Compute Middle Pay\n    data['lower'] = data[amount_column].apply(lambda x: int(x.split('-')[0].replace(',', '')))\n    data['upper'] = data[amount_column].apply(lambda x: int(x.split('-')[1].replace(',', '')) \n                                        if x.split('-')[0] != '500,000' \n                                        else 1000000)\n    data['middle'] = -(-(data['upper'] + data['lower']) \/\/ 2)\n\n    # Get Cost of Living data\n    cost_living = pd.read_csv(\"..\/input\/2020-cost-of-living\/cost of living 2020.csv\")\n    cost_living = cost_living[cost_living[\"McMeal($)\"]>0]\n\n    # Merge the info\n    data = data.replace({'United States of America':'United States',\n                         'Viet Nam':'Vietnam',\n                         'United Kingdom of Great Britain and Northern Ireland' : 'United Kingdom',\n                         'Iran, Islamic Republic of...' : 'Iran',\n                         'Republic of Korea' : 'South Korea'})\n\n    data = pd.merge(left=data, right=cost_living[['Country', 'McMeal($)']], how='inner', on='Country')\n\n    # Compute Adjusted Amount\n    data[\"Amount\"] = -(-data['middle'] \/\/ data['McMeal($)']).astype(int)\n\n    data = data.drop(columns=[\"lower\", \"upper\", \"middle\", \"McMeal($)\", \"Country\"])\n    \n    return data\n\n    \n# =============== PREP ===============\n# Read in the dataframe\ndf = pd.read_csv(\"..\/input\/kaggle-data-science-survey-20172021\/kaggle_survey_2017_2021.csv\",\n                 skiprows=1)\n\n# Clean gender column\ncol = \"What is your gender? - Selected Choice\"\ndf[col] = df[col].replace([\"Male\", \"Female\", \"Prefer to self-describe\", \"Prefer not to say\", \"A different identity\", \n                         \"Non-binary, genderqueer, or gender non-conforming\"], \n                        [\"Man\", \"Woman\", \"Unspecified\", \"Unspecified\", \"Unspecified\", \"Nonbinary\"])\n\n# Total\ntotal = df[[\"Year\", \"What is your gender? - Selected Choice\"]].value_counts().reset_index()\ntotal.columns = [\"Year\", \"Gender\", \"Count\"]\n\n# save_dataset_artifact(run_name=\"save_full_data\", \n#                       artifact_name=\"kaggle_survey_2017_2021\", \n#                       path=\"..\/input\/kaggle-data-science-survey-20172021\/kaggle_survey_2017_2021.csv\")\n# wandb.finish()\n\n# # Save to W&B\n# run = wandb.init(project='kaggle-survey-2021', name='numbers_eda', \n#                  config=CONFIG, anonymous=\"allow\")\n# wandb.log({\"2017-2021 rows\" : int(df.shape[0]),\n#            \"2017-2021 cols\" : int(df.shape[1])})\n# wandb.finish()","5b516596":"col = \"What is your gender? - Selected Choice\"\n\ngender = df[df[col].isin([\"Man\", \"Woman\"])][[\"Year\", col]]\ngender.columns = [\"Year\", \"Gender\"]\n\n# Gender and Years\ngender1 = gender.value_counts().reset_index()\ngender1 = pd.pivot(data=gender1, index=\"Year\", columns=\"Gender\", values=0).reset_index()\n\n# Just Gender\ngender2 = gender[\"Gender\"].value_counts().reset_index()\ngender2.columns = [\"Gender\", \"Count\"]\ngender2[\"Gender\"] = gender2[\"Gender\"].replace([\"Man\", \"Woman\"],\n                                              [\"Gentlemen\", \"Ladies\"])\n\ngender1.to_csv(\"gender1.csv\", index=False)\ngender2.to_csv(\"gender2.csv\", index=False)\n\n# Save PNGs\nim = imageio.imread('..\/input\/kaggle-data-science-survey-20172021\/images\/man.png')\nImage.fromarray(im).save(\"man.png\")\n\nim = imageio.imread('..\/input\/kaggle-data-science-survey-20172021\/images\/lady.png')\nImage.fromarray(im).save(\"lady.png\")\n\nim = imageio.imread('..\/input\/kaggle-data-science-survey-20172021\/images\/bkg.jpg')\nImage.fromarray(im).save(\"bkg.jpg\")\n\n\nhtmlt = '''\n<!-- Bootstrap -->\n<link rel=\"stylesheet\" href=\"https:\/\/stackpath.bootstrapcdn.com\/bootstrap\/4.4.1\/css\/bootstrap.min.css\" integrity=\"sha384-Vkoo8x4CGsO3+Hhxv8T\/Q5PaXtkKtu6ug5TOeNV6gBiFeWPGFN9MuhOf23Q9Ifjh\" crossorigin=\"anonymous\">\n<!-- Style -->\n<style>\n\t.all {\n\t\tfont-family: \"Times New Roman\", Times, serif;\n\t\toverflow-x: hidden;\n\t\twidth: 98%;\n\t\tbackground-color:#e0c9a6;\n\t\t\/* background-image : url(\"bkg.jpg\"); *\/\n\t}\n\t.svg-container {\n\t\tdisplay: inline-block;\n\t\tposition: relative;\n\t\twidth: 100%;\n\t\tpadding-bottom: 100%;\n\t\tvertical-align: top;\n\t\toverflow: hidden;\n\t}\n\t.svg-content {\n\t\tdisplay: inline-block;\n\t\tposition: absolute;\n\t\ttop: 0;\n\t\tleft: 0;\n\t}\n\n\t.axisHidden path{\n\tstroke: #e0c9a6;\n\t}\n\n\t.axisHidden line{\n\tstroke: #e0c9a6;\n\t}\n\n\t.annotation.red text {\n\t\tfill: #7D262F;\n\t}\n\t.annotation.blue text {\n\t\tfill: #184E8B;\n\t}\n\n\t@font-face {\n\t\tfont-family: parklane;\n\t\tsrc: url(https:\/\/h4ks.net\/ParkLaneNF.otf);\n\t\t}\n\n\tdiv.tooltip-donut {\n\t\tposition: absolute;\n\t\ttext-align: center;\n\t\tpadding: .3rem;\n\t\tbackground: #FFFFFF;\n\t\tcolor: #000000;\n\t\tborder: 1px solid #000000;\n\t\tborder-radius: 8px;\n\t\tpointer-events: none;\n\t\tfont-size: 2rem;\n\t\tz-index: 99999;\n\t}\n\n\t\/* Hackity Hack *\/\n\tbody {\n\t\tposition: relative;\n\t\t\/* background: url(\".\/bkg.jpg\") !important; *\/\n\t}\n\n\t.cell.text_cell, \n\t.jp-Cell.jp-MarkdownCell {\n\t\tbackground: rgba(255, 255, 255, 0.2);\n\t}\n\n\t.cell.text_cell > .inner_cell {\n\t\tpadding-right: 12.5ex;\n\t}\n    \n\t@media (max-width: 540px) {\n\t\t.cell.text_cell > .inner_cell {\n\t\t\tpadding-right: 0;\n\t\t}\n\t}\n\n\t#notebook-container, \n\t.jp-Notebook,\n\t.lm-DockPanel-widget {\n\t\tbackground: transparent;\n\t}\n\n\t[class*=CellVisibilityToggle_Wrapper] > div {\n\t\tbackground: transparent;\n\t}\n\n\tdiv.inner_cell > div.text_cell_render { \n\t\tbackground: transparent;\n\t}\n\n\tdiv[class*=all] {\n\t\tbackground: transparent !important;\n\t}\n\n<\/style>\n\n<img id=\"baseimg\" src=\"man.png\" style=\"display:none\" \/>\n<div class=\"all\">\n\t<center><h1 style=\"font-family: parklane\">How many ladies & gentlemen?<\/h1><\/center>\n\t<div class=\"row\">\n\t\t<div id=\"map1\" class=\"svg-container\"><\/div>\n\t<\/div>\n<\/div>\n'''\n\njs_t = '''\nrequire.config({\n  paths: {\n    d3src: \"https:\/\/d3js.org\/\",\n  },\n  map: {\n    '*': {\n      'd3v6': 'd3src\/d3.v6.min',\n      'd3-selection': 'd3src\/d3-selection.v1.min',\n      'd3-drag': 'd3src\/d3-drag.v1.min',\n      'd3-shape': 'd3src\/d3-shape.v1.min',\n      'd3-path': 'd3src\/d3-path.v1.min',\n      'd3-dispatch': 'd3src\/d3-dispatch.v1.min',\n      'd3-annotation': 'https:\/\/cdnjs.cloudflare.com\/ajax\/libs\/d3-annotation\/2.5.1\/d3-annotation.min.js',\n    }\n  }\n});\n\nrequire([\"d3v6\", \"d3-annotation\"], function(d3, d3Annotation) {\n\n\/\/ Inject d3Annotation methods to d3\nfor (var key in d3Annotation) {\n  d3[key] = d3Annotation[key];\n}\n\n\/\/ Get Assets URL set by Kaggle\nconst baseAssetsUrl = document.getElementById('baseimg').src.replace(\/man.png.*$\/, '');\n\nconst $body = document.querySelector('body');\n$body.style.background = `url(\"${baseAssetsUrl}bkg.jpg\")`;\n\nconst $all = document.getElementsByClassName('all')[0];\n$all.style.backgroundImage = `url(\"${baseAssetsUrl}bkg.jpg\")`;\n\n\/\/ Set the SVG area\nconst margin = { LEFT: 30, RIGHT: 30, TOP: 10, BOTTOM: 30 }\nconst width = 950 - margin.LEFT - margin.RIGHT\nconst height = 900 - margin.TOP - margin.BOTTOM\n\nconst svg = d3.select(\"#map1\").append(\"svg\")\n  \/\/ .attr(\"style\", \"outline: thin solid red;\")\n  .attr(\"preserveAspectRatio\", \"xMinYMin meet\")\n  .attr(\"viewBox\", \"0 0 950 900\")\n  .classed(\"svg-content\", true)\n  .attr(\"transform\",\n   `translate(${margin.LEFT}, ${margin.TOP})`)\n\n\n\/\/ Gentleman\nsvg.append(\"image\")\n.attr(\"xlink:href\", baseAssetsUrl+\"man.png\")\n    .attr(\"x\", \"11%\")\n    .attr(\"y\", \"-1%\")\n    .attr(\"width\", 370)\n    .attr(\"height\", 220)\n    .style(\"opacity\", 1)\n\n\/\/ Lady\nsvg.append(\"image\")\n.attr(\"xlink:href\", baseAssetsUrl+\"lady.png\")\n    .attr(\"x\", \"33%\")\n    .attr(\"y\", \"13%\")\n    .attr(\"width\", 370)\n    .attr(\"height\", 210)\n    .style(\"opacity\", 1)\n\n\/\/ === Gender overall ===\nd3.csv(baseAssetsUrl + \"gender2.csv\").then(function(data){ \n\n  const x_global = 150\n  var color = d3.scaleOrdinal([\"#0F3157\", \"#7D262F\"]);\n  \n\n  data.forEach(d => {\n    d.Count = Number(d.Count)\n  })\n\n  \/\/ Scales\n  const x = d3.scaleBand()\n    .range([0, width\/1.7])\n    .domain(data.map(d => d.Gender))\n    .paddingInner(0.3)\n    .paddingOuter(0.2)\n\n  const y = d3.scaleLinear()\n    .range([height\/5, 0])\n    .domain([0, d3.max(data, d => d.Count)])\n\n  const xAxisGroup = svg.append(\"g\")\n    .attr(\"class\", \"x axis\")\n    .attr(\"transform\", `translate(${x_global}, ${height\/2.3})`)\n\n  const yAxisGroup = svg.append(\"g\")\n    .attr(\"class\", \"axisHidden\")\n    .attr(\"transform\", `translate(${x_global}, ${width\/4.6})`)\n\n  \/\/ Axis\n  const xAxisCall = d3.axisBottom(x)\n  xAxisGroup.call(xAxisCall)\n    .selectAll(\"text\")\n      .attr(\"y\", \"10\")\n      .attr(\"x\", \"0\")\n      .attr(\"font-size\", \"18px\")\n      .attr(\"font-weight\", 600)\n      .attr(\"text-anchor\", \"middle\")\n\n  const yAxisCall = d3.axisLeft(y)\n    .ticks(0)\n  yAxisGroup.call(yAxisCall)\n\n  \/\/ Bar Chart\n  const rects = svg.selectAll()\n    .data(data)\n    .enter().append('g')\n    .append(\"rect\")\n    .attr(\"transform\", `translate(${x_global}, ${width\/4.6})`)\n    .attr(\"y\", d => y(d.Count))\n    .attr(\"x\", d => x(d.Gender))\n    .attr('rx', 10)\n    .attr('ry', 10)\n    .attr(\"width\", x.bandwidth)\n    .attr(\"height\", d => height\/5 - y(d.Count))\n    .style('fill', function(d, i) {return color(i);})\n    .style(\"stroke-width\", \"1px\")\n\n  \/\/ Interactive\n  var div = d3.select(\"body\").append(\"div\")\n  .attr(\"class\", \"tooltip-donut\")\n  .style(\"opacity\", 0);\n\n    rects\n    .on('mouseenter', function (event, dt) {\n    \/\/ MOUSE ON\n    d3.selectAll('.value')\n          .attr('opacity', 0)\n\n    d3.select(this)\n        .transition()\n        .duration(100)\n        .attr('opacity', 0.3)\n        .attr('x', (a) => x(a.Gender) - 2.5)\n        .attr('width', x.bandwidth() + 5)\n\n\n    \/\/ Makes the new div appear\n    div.transition()\n        .duration(50)\n        .style(\"opacity\", 1);\n    let num = dt.Count;\n    div.html(num)\n        .style(\"left\", (event.pageX) + \"px\")\n        .style(\"top\", (event.pageY-30) + \"px\");\n\n\n  })\n    \/\/ MOUSE LEAVE\n    .on('mouseleave', function () {\n      d3.selectAll('.value')\n          .attr('opacity', 1)\n\n      d3.select(this)\n      .transition()\n      .duration(100)\n      .attr('opacity', 1)\n      .attr('x', (a) => x(a.Gender))\n      .attr('width', x.bandwidth())\n\n      \/\/ New div dissapears\n      div.transition()\n          .duration('50')\n          .style(\"opacity\", 0);\n      svg.selectAll('.divergence').remove()\n    })\n  \n});\n\n\n\/\/ === Gender Years ===\nd3.csv(baseAssetsUrl + \"gender1.csv\").then(function(data){ \n\n  const x_global = 50\n  \/\/ List of subgroups = header of the csv files = soil condition here\n  const subgroups = data.columns.slice(1)\n\n  \/\/ List of groups = species here = value of the first column called group -> I show them on the X axis\n  const groups = data.map(d => d.Year)\n\n  \/\/ Add X axis\n  const x = d3.scaleBand()\n      .domain(groups)\n      .range([0, width\/1.1])\n      .padding([0.2])\n  svg.append(\"g\")\n    .attr(\"transform\", `translate(${x_global}, ${height\/1})`)\n    .call(d3.axisBottom(x).tickSizeOuter(0))\n    .selectAll(\"text\")\n      .attr(\"y\", \"10\")\n      .attr(\"x\", \"0\")\n      .attr(\"font-size\", \"15px\")\n      .attr(\"font-weight\", 300)\n      .attr(\"text-anchor\", \"middle\")\n\n  \/\/ Add Y axis\n  const y = d3.scaleLinear()\n    .domain([0, 25000])\n    .range([ height\/3.2, 0]);\n  svg.append(\"g\")\n  .attr(\"transform\", `translate(${x_global}, ${height\/1.5})`)\n    .call(d3.axisLeft(y).ticks(6))\n    .selectAll(\"text\")\n      .attr(\"font-size\", \"11px\")\n      .attr(\"font-weight\", 300);\n\n  \/\/ color palette = one color per subgroup\n  const color = d3.scaleOrdinal()\n    .domain(subgroups)\n    .range([\"#0F3157\", \"#7D262F\"]);\n\n  \/\/stack the data? --> stack per subgroup\n  const stackedData = d3.stack()\n    .keys(subgroups)\n    (data)\n\n  \/\/ Show the bars\n  const bars = svg.append(\"g\")\n    .selectAll(\"g\")\n    .data(stackedData)\n    .join(\"g\")\n    .attr(\"transform\", `translate(${x_global}, ${height\/1.5})`)\n      .attr(\"fill\", d => color(d.key))\n      .attr(\"class\", d => \"myRect \" + d.key ) \n      .selectAll(\"rect\")\n      .data(d => d)\n      .join(\"rect\")\n        .attr(\"x\", d => x(d.data.Year))\n        .attr(\"y\", d => y(d[1]))\n        .attr(\"height\", d => y(d[0]) - y(d[1]))\n        .attr(\"width\",x.bandwidth())\n\n  \/\/ Interactive\n  var div = d3.select(\"body\").append(\"div\")\n  .attr(\"class\", \"tooltip-donut\")\n  .style(\"opacity\", 0);\n\n  bars\n    .on('mouseenter', function (event, dt) {\n    \/\/ MOUSE ON\n    const subGroupName = d3.select(this.parentNode).datum().key \n          \n    d3.selectAll(\".myRect\").style(\"opacity\", 0.2)  \n          \n    d3.selectAll(\".\"+subGroupName).style(\"opacity\",1)\n\n\n    \/\/ Makes the new div appear\n    div.transition()\n        .duration(50)\n        .style(\"opacity\", 1);\n\n    const subgroupName = d3.select(this.parentNode).datum().key;\n    const subgroupValue = dt.data[subgroupName];\n\n    div.html(\"Gender: \" + subgroupName + \"<br>\" + \"Frequency: \" + subgroupValue)\n        .style(\"left\", (event.pageX) + \"px\")\n        .style(\"top\", (event.pageY-30) + \"px\");\n\n\n  })\n    \/\/ MOUSE LEAVE\n    .on('mouseleave', function () {\n      d3.selectAll(\".myRect\")\n          .style(\"opacity\",1) \n\n      \/\/ New div dissapears\n      div.transition()\n          .duration('50')\n          .style(\"opacity\", 0);\n      svg.selectAll('.divergence').remove()\n    })\n\n\n  svg.append(\"text\")\n  .attr(\"y\", \"60%\")\n  .attr(\"x\", \"45%\")\n  .attr(\"font-size\", \"25px\")\n  .attr(\"text-anchor\", \"middle\")\n  .attr(\"font-weight\", 600)\n  .text(\"Gender Evolution\")\n  \n});\n\n\n\n\/\/ Legend\nconst annot1 = [\n  {\n  note: { \n    label: \"Out of all respondents in 5 years, 20% of them are women and the rest 80% are men.\",\n    title: \"20:80 Percentage\",\n    wrap: 200, \n    padding: 0, \n  },\n  className: \"red\",\n  connector: { end: \"arrow\" },\n  color: [\"#ffffff\"],\n  x: 630,\n  y: 320,\n  dy: -30,\n  dx: 40\n},\n{\n  note: { \n    label: \"Keep in mind that some respondents might have answered multiple years.\",\n    title: \"Non Unique\",\n    wrap: 150, \n    padding: 0,  \n  },\n  className: \"blue\",\n  connector: { end: \"arrow\" },\n  color: [\"#ffffff\"],\n  x: 190,\n  y: 190,\n  dy: -30,\n  dx: -40\n},\n{\n  note: { \n    label: \"Between 2017 and 2021, the % of women that responded the survey was raughly between 17% and 20%.\",\n    title: \"% mantained\",\n    wrap: 250, \n    padding: 0,  \n  },\n  className: \"red\",\n  connector: { end: \"arrow\" },\n  color: [\"#ffffff\"],\n  x: 290,\n  y: 570,\n  dy: -30,\n  dx: -10\n}]\n\nsvg.append(\"g\")\n  .style('font-size', 17)\n  .call(d3.annotation()\n          .annotations(annot1))\n\n});\n'''\n\n\nh = display(HTML(htmlt))\nj = py_display.Javascript(js_t)\npy_display.display_javascript(j)","9f9eb49e":"# # Save to W&B\n# run = wandb.init(project='kaggle-survey-2021', name='basics_eda', \n#                  config=CONFIG, anonymous=\"allow\")\n# create_wandb_plot(x_data=gender2[\"Gender\"], y_data=gender2[\"Count\"],\n#                   x_name=\"Gender\", y_name=\"Frequency\", \n#                   title=\"Total Respondents\", log=\"gender1\", plot=\"bar\")\n# wandb.finish()","f82eaba1":"cols = [\"Year\", \"What is your age (# years)?\", \n        \"What is your gender? - Selected Choice\"]\n\nage = df[cols].value_counts().reset_index()\nage.columns = [\"Year\", \"Age\", \"Gender\", \"Count\"]\nage = age[age[\"Gender\"].isin([\"Man\", \"Woman\"])]\n\nage = pd.pivot(data=age, index=[\"Year\", \"Age\"], \n               columns=\"Gender\", values=\"Count\").reset_index()\n\nage.columns = [\"year\", \"age\", \"male\", \"female\"]\nage[\"total\"] = age[\"male\"] + age[\"female\"]\n\nage.to_csv(\"age.csv\", index=False)\n\nim = imageio.imread('..\/input\/kaggle-data-science-survey-20172021\/images\/man2.png')\nImage.fromarray(im).save(\"man2.png\")\n\nim = imageio.imread('..\/input\/kaggle-data-science-survey-20172021\/images\/lady2.png')\nImage.fromarray(im).save(\"lady2.png\")\n\n\n\nhtmlt = '''\n<!-- Bootstrap -->\n<link rel=\"stylesheet\" href=\"https:\/\/stackpath.bootstrapcdn.com\/bootstrap\/4.4.1\/css\/bootstrap.min.css\" integrity=\"sha384-Vkoo8x4CGsO3+Hhxv8T\/Q5PaXtkKtu6ug5TOeNV6gBiFeWPGFN9MuhOf23Q9Ifjh\" crossorigin=\"anonymous\">\n<!-- Style -->\n<style>\n\t.all2 {\n\t\tfont-family: \"Times New Roman\", Times, serif;\n\t\toverflow-x: hidden;\n\t\twidth: 98%;\n\t\tbackground-color:#e0c9a6;\n\t\t\/* background-image : url(\"bkg.jpg\"); changed via js *\/\n\t}\n\t.svg-container {\n\t\tdisplay: inline-block;\n\t\tposition: relative;\n\t\twidth: 100%;\n\t\tpadding-bottom: 100%;\n\t\tvertical-align: top;\n\t\toverflow: hidden;\n\t}\n\t.svg-content {\n\t\tdisplay: inline-block;\n\t\tposition: absolute;\n\t\ttop: 0;\n\t\tleft: 0;\n\t}\n\n\t.axisHidden path{\n\t\tstroke: #e0c9a6;\n\t}\n\n\t.axisHidden line{\n\t\tstroke: #e0c9a6;\n\t}\n\n\t.annotation.color text {\n\t\tfill: #000000;\n\t}\n\n\t@font-face {\n\t\tfont-family: parklane;\n\t\tsrc: url(https:\/\/h4ks.net\/ParkLaneNF.otf);\n\t\t}\n\n\tdiv.tooltip-donut {\n\t\tposition: absolute;\n\t\ttext-align: center;\n\t\tpadding: .3rem;\n\t\tbackground: #FFFFFF;\n\t\tcolor: #000000;\n\t\tborder: 1px solid #000000;\n\t\tborder-radius: 8px;\n\t\tpointer-events: none;\n\t\tfont-size: 2rem;\n\t\tz-index: 99999;\n\t}\n\n<\/style>\n\n<img id=\"baseimg\" src=\"man.png\" style=\"display:none\" \/>\n<div class=\"all2\">\n\t<center><h1 style=\"font-family: parklane\">Age is just a formality<\/h1><\/center>\n\t<label for=\"filter2\" style=\"font-size: 25px\">Select Year Here:<\/label>\n\t<select id=\"filter2\" style=\"font-size: 20px\">\n\t\t<option value=\"2021\">2021<\/option>\n\t\t<option value=\"2020\">2020<\/option>\n\t\t<option value=\"2019\">2019<\/option>\n\t\t<option value=\"2018\">2018<\/option>\n\t\t<option value=\"2017\">2017<\/option>\n\t  <\/select>\n\t<div class=\"row\">\n\t\t<div id=\"map2\" class=\"svg-container\"><\/div>\n\t<\/div>\n<\/div>\n'''\n\njs_t = '''\nrequire.config({\n  paths: {\n    d3src: \"https:\/\/d3js.org\/\",\n  },\n  map: {\n    '*': {\n      'd3v6': 'd3src\/d3.v6.min',\n      'd3-selection': 'd3src\/d3-selection.v1.min',\n      'd3-drag': 'd3src\/d3-drag.v1.min',\n      'd3-shape': 'd3src\/d3-shape.v1.min',\n      'd3-path': 'd3src\/d3-path.v1.min',\n      'd3-dispatch': 'd3src\/d3-dispatch.v1.min',\n      'd3-annotation': 'https:\/\/cdnjs.cloudflare.com\/ajax\/libs\/d3-annotation\/2.5.1\/d3-annotation.min.js',\n    }\n  }\n});\n\nrequire([\"d3v6\", \"d3-annotation\"], function(d3, d3Annotation) {\n\n\/\/ Inject d3Annotation methods to d3\nfor (var key in d3Annotation) {\n  d3[key] = d3Annotation[key];\n}\n\n\/\/ Get Assets URL set by Kaggle\nconst baseAssetsUrl = document.getElementById('baseimg').src.replace(\/man.png.*$\/, '');\n\nconst $all2 = document.getElementsByClassName('all2')[0];\n$all2.style.backgroundImage = `url(\"${baseAssetsUrl}bkg.jpg\")`;\n\n\/\/ Set the SVG area\nconst margin = { LEFT: 20, RIGHT: 40, TOP: 15, BOTTOM: 0 }\nconst width = 950 - margin.LEFT - margin.RIGHT\nconst height = 900 - margin.TOP - margin.BOTTOM\nconst centreSpacing = 45\n\nconst svg = d3.select(\"#map2\").append(\"svg\")\n  .attr(\"preserveAspectRatio\", \"xMinYMin meet\")\n  .attr(\"viewBox\", \"0 0 950 900\")\n  .classed(\"svg-content\", true)\n  .attr(\"transform\",\n   `translate(${margin.LEFT}, ${margin.TOP})`)\n\n\n\/\/ Gentleman\nsvg.append(\"image\")\n.attr(\"xlink:href\", baseAssetsUrl+\"man2.png\")\n    .attr(\"x\", \"-17%\")\n    .attr(\"y\", \"-5%\")\n    .attr(\"width\", 600)\n    .attr(\"height\", 600)\n    .style(\"opacity\", 1)\n\n\/\/ Lady\nsvg.append(\"image\")\n.attr(\"xlink:href\", baseAssetsUrl+\"lady2.png\")\n    .attr(\"x\", \"55%\")\n    .attr(\"y\", \"0%\")\n    .attr(\"width\", 550)\n    .attr(\"height\", 550)\n    .style(\"opacity\", 1)\n\n\/\/ Gradient\nconst defs = svg.append('defs');\n\nconst bgGradient1 = defs\n  .append('linearGradient')\n  .attr('id', 'bg-gradient1')\n\nbgGradient1\n  .append('stop')\n  .attr('stop-color', '#79A988')\n  .attr('offset', '0%');\nbgGradient1\n  .append('stop')\n  .attr('stop-color', '#487054')\n  .attr('offset', '100%');\n\nconst bgGradient2 = defs\n  .append('linearGradient')\n  .attr('id', 'bg-gradient2')\n\nbgGradient2\n  .append('stop')\n  .attr('stop-color', '#D05257')\n  .attr('offset', '0%');\nbgGradient2\n  .append('stop')\n  .attr('stop-color', '#D67A83')\n  .attr('offset', '100%');\n\n\/\/ ------ DEFAULTS ------\n\/\/ Initialize scales\nconst y = d3.scaleBand()\n.range([height\/1.03, 0])\n.padding(0.1)\n\nconst x = d3.scaleLinear()\n.range([0, (width - centreSpacing) \/ 2])\nconst xAxis = svg.append(\"g\")\n  .attr('transform', 'translate(20,' + (height-15) + ')')\n\nconst xReverse = d3.scaleLinear()\n.range([0, (width - centreSpacing) \/ 2])\nconst xAxisReverse = svg.append(\"g\")\n  .attr('transform', 'translate(490,' + (height-15) + ')')\n\n\n\/\/ Male + Female + Labels objects\nvar gM = svg.append(\"g\")\n  .attr(\"transform\", \n  \"translate(\" + margin.LEFT + \",\" + margin.TOP + \")\");\n\nvar gF = svg.append(\"g\")\n  .attr('transform',\n    'translate(' +\n      (margin.LEFT + (width - centreSpacing) \/ 2 + centreSpacing) +\n      \",\" +\n      margin.TOP +\n      \")\");\n\nvar gLabels = svg\n.append('g')\n.attr(\n  'transform',\n  'translate(' +\n    (margin.LEFT + (width - centreSpacing) \/ 2 + \n    ',' + margin.TOP + ')'));\n\n\n\/\/ === UPDATE ===\nfunction update(data) {\n\n  data.forEach(d => {\n    d.total = Number(d.total)\n    d.female = Number(d.female)\n    d.male = Number(d.male)\n  })\n\n  \/\/ Scales\n  y.domain(data.map(d => d.age))\n\n  const maxVal = d3.max(data, d => d3.max([d.male, d.female]))\n\n  x.domain([0, maxVal])\n  xReverse.domain([0, maxVal])\n\n  \n\n  \/\/ Male\n  gM.selectAll('rect')\n    .data(data)\n    .join('rect')\n    .transition()\n    .duration(1000)\n    .attr('x', d => (width - centreSpacing) \/ 2 - x(d.male))\n    .attr('y', d => y(d.age))\n    .attr('rx', 10)\n    .attr('ry', 10)\n    .attr('height', y.bandwidth())\n    .attr('width', d => x(d.male))\n    .style('fill', 'url(#bg-gradient1)');\n\n\n  \/\/ Female\n  gF.selectAll('rect')\n    .data(data)\n    .join('rect')\n    .transition()\n    .duration(1000)\n    .attr('x', 0)\n    .attr('y', d => y(d.age))\n    .attr('rx', 10)\n    .attr('ry', 10)\n    .attr('height', y.bandwidth())\n    .attr('width', d => x(d.female))\n    .style('fill', 'url(#bg-gradient2)');\n  \n\n  \/\/Labels\n  gLabels.selectAll('text')\n    .data(data)\n    .join('text')\n    .attr('x', centreSpacing \/ 2-18)\n    .attr('y', d => y(d.age) + y.bandwidth() \/ 2+5)\n    .style('font-weight', 600)\n    .text((d, i) => d.age);\n\n  gLabels\n    .append('text')\n    .text('Age')\n    .attr('x', centreSpacing \/ 2-18)\n    .attr('y', -0)\n    .style('font-size', '20px')\n    .style('font-weight', 600);\n\n\n  \/\/ Axis Update\n  xAxis\n    .transition()\n    .duration(1000)\n    .call(d3.axisBottom(x).ticks(5))\n    .selectAll(\"text\")\n      .attr(\"font-size\", \"15px\");\n\n  xAxisReverse\n    .transition()\n    .duration(1000)\n    .call(d3.axisBottom(xReverse).ticks(5))\n    .selectAll(\"text\")\n      .attr(\"font-size\", \"15px\");\n}\n\n\n\/\/ === Age ===\nd3.csv(baseAssetsUrl + \"age.csv\").then(function(dataload){\n\n  \/\/ default view\n  var data = dataload.filter(function(d) { \n    var sq = d3.select(\"#filter2\").property(\"value\");\n    return d.year === sq;\n  });\n\n  update(data)\n\n\n  \/\/ on change\n  d3.select(\"#filter2\").on(\"change\", function() {\n\n    var data = dataload.filter(function(d) { \n      var sq = d3.select(\"#filter2\").property(\"value\");\n      return d.year === sq;\n    });\n\n    update(data);\n  });\n\n\n\/\/ Annot\nconst annot1 = [\n  {\n  note: { \n    label: \"Notice that for both genders the percentage of young responders (aged 18 to 24) increased steadily between 2017 and 2021.\",\n    title: \"Youth Increase\",\n    wrap: 200, \n    padding: 0, \n  },\n  className: \"color\",\n  connector: { end: \"arrow\" },\n  color: [\"#ffffff\"],\n  x: 650,\n  y: 750,\n  dy: -30,\n  dx: 30\n}]\n\nsvg.append(\"g\")\n  .style('font-size', 17)\n  .call(d3.annotation()\n          .annotations(annot1))\n\n});\n\n});\n'''\n\n\nh = display(HTML(htmlt))\nj = py_display.Javascript(js_t)\npy_display.display_javascript(j)","dd74ad74":"# # Save to W&B\n# run = wandb.init(project='kaggle-survey-2021', name='age_eda', \n#                  config=CONFIG, anonymous=\"allow\")\n# create_wandb_plot(x_data=age[age.year==2021][\"age\"], \n#                   y_data=age[age.year==2021][\"male\"],\n#                   x_name=\"Age\", y_name=\"Cont\", \n#                   title=\"Male Age Frequencies\", log=\"age1\", plot=\"bar\")\n# create_wandb_plot(x_data=age[age.year==2021][\"age\"], \n#                   y_data=age[age.year==2021][\"female\"],\n#                   x_name=\"Age\", y_name=\"Cont\", \n#                   title=\"Female Age Frequencies\", log=\"age2\", plot=\"bar\")\n# wandb.finish()","1cc99090":"cols = [\"Year\", \"What is your gender? - Selected Choice\",\n        \"In which country do you currently reside?\"]\n\ncountry = df[cols]\ncountry = country[cols].value_counts().reset_index()\ncountry.columns = [\"Year\", \"Gender\", \"Country\", \"Count\"]\ncountry = country[country[\"Gender\"].isin([\"Man\", \"Woman\"])].reset_index(drop=True)\n\ncountry[\"Country\"] = country[\"Country\"].replace([\"United States of America\",\n                            \"United Kingdom of Great Britain and Northern Ireland\",\n                            \"I do not wish to disclose my location\",\n                            \"Iran, Islamic Republic of...\", \"Hong Kong (S.A.R.)\"],\n                           [\"USA\", \"United Kingdom\", \"Undisclosed\", \"Iran\",\n                            \"Hong Kong\"])\n\ncountry = country[country[\"Year\"] == 2021]\ncountry_man = country[country[\"Gender\"] == \"Man\"]\ncountry_woman = country[country[\"Gender\"] == \"Woman\"]\n\ncountry_man.to_csv(\"country_man.csv\", index=False)\ncountry_woman.to_csv(\"country_woman.csv\", index=False)\n\n# Save usa.png img as well\nim = imageio.imread('..\/input\/kaggle-data-science-survey-20172021\/images\/men.png')\nImage.fromarray(im).save(\"men.png\")\n\nim = imageio.imread('..\/input\/kaggle-data-science-survey-20172021\/images\/ladies.png')\nImage.fromarray(im).save(\"ladies.png\")\n\nhtmlt = '''\n<!-- Bootstrap -->\n<link rel=\"stylesheet\" href=\"https:\/\/stackpath.bootstrapcdn.com\/bootstrap\/4.4.1\/css\/bootstrap.min.css\" integrity=\"sha384-Vkoo8x4CGsO3+Hhxv8T\/Q5PaXtkKtu6ug5TOeNV6gBiFeWPGFN9MuhOf23Q9Ifjh\" crossorigin=\"anonymous\">\n<!-- Style -->\n<style>\n\t.all3 {\n\t\tfont-family: \"Times New Roman\", Times, serif;\n\t\toverflow-x: hidden;\n\t\twidth: 98%;\n\t\tbackground-color:#e0c9a6;\n\t\t\/* background-image : url(\"bkg.jpg\"); changed via js *\/\n\t}\n\t.svg-container {\n\t\tdisplay: inline-block;\n\t\tposition: relative;\n\t\twidth: 100%;\n\t\tpadding-bottom: 100%;\n\t\tvertical-align: top;\n\t\toverflow: hidden;\n\t}\n\t.svg-content {\n\t\tdisplay: inline-block;\n\t\tposition: absolute;\n\t\ttop: 0;\n\t\tleft: 0;\n\t}\n\n\t.axisHidden path{\n\t\tstroke: #e0c9a6;\n\t}\n\n\t.axisHidden line{\n\t\tstroke: #e0c9a6;\n\t}\n\n\t.annotation.color text {\n\t\tfill: #000000;\n\t}\n\n\t@font-face {\n\t\tfont-family: parklane;\n\t\tsrc: url(https:\/\/h4ks.net\/ParkLaneNF.otf);\n\t\t}\n\n\tdiv.tooltip-donut {\n\t\tposition: absolute;\n\t\ttext-align: center;\n\t\tpadding: .3rem;\n\t\tbackground: #FFFFFF;\n\t\tcolor: #000000;\n\t\tborder: 1px solid #000000;\n\t\tborder-radius: 8px;\n\t\tpointer-events: none;\n\t\tfont-size: 1.3rem;\n\t\tz-index: 99999;\n\t}\n\n<\/style>\n\n<img id=\"baseimg\" src=\"man.png\" style=\"display:none\" \/>\n<div class=\"all3\">\n\t<center><h1 style=\"font-family: parklane\">Demographics<\/h1><\/center>\n\t<center><h2>2021: Frequency of Respondents on Countries<\/h2><\/center>\n\t<div class=\"row\">\n\t\t<div id=\"map3\" class=\"svg-container\"><\/div>\n\t<\/div>\n<\/div>\n'''\n\njs_t = '''\nrequire.config({\n  paths: {\n    d3src: \"https:\/\/d3js.org\/\",\n  },\n  map: {\n    '*': {\n      'd3v6': 'd3src\/d3.v6.min',\n      'd3-selection': 'd3src\/d3-selection.v1.min',\n      'd3-drag': 'd3src\/d3-drag.v1.min',\n      'd3-shape': 'd3src\/d3-shape.v1.min',\n      'd3-path': 'd3src\/d3-path.v1.min',\n      'd3-dispatch': 'd3src\/d3-dispatch.v1.min',\n      'd3-annotation': 'https:\/\/cdnjs.cloudflare.com\/ajax\/libs\/d3-annotation\/2.5.1\/d3-annotation.min.js',\n    }\n  }\n});\n\nrequire([\"d3v6\", \"d3-annotation\"], function(d3, d3Annotation) {\n\n\/\/ Inject d3Annotation methods to d3\nfor (var key in d3Annotation) {\n  d3[key] = d3Annotation[key];\n}\n\n\/\/ Get Assets URL set by Kaggle\nconst baseAssetsUrl = document.getElementById('baseimg').src.replace(\/man.png.*$\/, '');\n\nconst $all3 = document.getElementsByClassName('all3')[0];\n$all3.style.backgroundImage = `url(\"${baseAssetsUrl}bkg.jpg\")`;\n\n\/\/ Set the SVG area\nconst margin = { LEFT: 10, RIGHT: 10, TOP: 10, BOTTOM: 0 }\nconst width = 950 - margin.LEFT - margin.RIGHT\nconst height = 900 - margin.TOP - margin.BOTTOM\nconst innerRadius = 120\nconst outerRadius = Math.min(width, height) \/ 2\n\nconst svg = d3.select(\"#map3\").append(\"svg\")\n  .attr(\"preserveAspectRatio\", \"xMinYMin meet\")\n  .attr(\"viewBox\", \"0 0 950 900\")\n  .classed(\"svg-content\", true)\n  .attr(\"transform\",\n   `translate(${margin.LEFT}, ${margin.TOP})`)\n\n\n\/\/ Men\nsvg.append(\"image\")\n.attr(\"xlink:href\", baseAssetsUrl+\"men.png\")\n    .attr(\"x\", \"4.5%\")\n    .attr(\"y\", \"56.5%\")\n    .attr(\"width\", 370)\n    .attr(\"height\", 330)\n    .style(\"opacity\", 1)\n\n\n\/\/ Women\nsvg.append(\"image\")\n.attr(\"xlink:href\", baseAssetsUrl+\"ladies.png\")\n    .attr(\"x\", \"54%\")\n    .attr(\"y\", \"57%\")\n    .attr(\"width\", 370)\n    .attr(\"height\", 300)\n    .style(\"opacity\", 1)\n\nsvg.append('line')\n.style(\"stroke\", \"black\")\n.style(\"stroke-width\", 1)\n    .attr(\"x1\", 470)\n    .attr(\"y1\", 60)\n    .attr(\"x2\", 470)\n    .attr(\"y2\", 900)\n\n\n\/\/ === Men ===\nd3.csv(baseAssetsUrl + \"country_man.csv\").then(function(data){\n\n  const x_global = 230\n\n  svg.append(\"text\")\n  .attr(\"transform\", `translate(${x_global}, ${width\/3-200})`)\n  .attr(\"font-size\", \"28px\")\n  .attr(\"text-anchor\", \"middle\")\n  .attr(\"font-weight\", 600)\n  .text(\"Gentlemen\")\n\n  data.forEach(d => {\n    d.Count = Number(d.Count)\n  })\n\n  \/\/ Color\n  var myColor = d3.scaleLinear().domain([1,66])\n                  .range([\"#507C5E\", \"#C1D7C8\"])\n\n  \/\/ Scales\n  const x = d3.scaleBand()\n      .range([0, 2 * Math.PI]) \n      .align(0)        \n      .domain(data.map(d => d.Country));\n  const y = d3.scaleRadial()\n      .range([innerRadius, outerRadius])  \n      .domain([0, d3.max(data, d => d.Count)]); \n\n  \/\/ Add the bars\n  svg.append(\"g\")\n    .selectAll(\"path\")\n    .data(data)\n    .join(\"path\")\n    .attr(\"transform\", `translate(${x_global}, ${width\/1.5})`)\n    .attr(\"fill\", (d, i) => myColor(i))\n      .attr(\"d\", d3.arc()   \n          .innerRadius(innerRadius)\n          .outerRadius(d => y(d['Count']))\n          .startAngle(d => x(d.Country))\n          .endAngle(d => x(d.Country) + x.bandwidth())\n          .padAngle(0.01)\n          .padRadius(innerRadius))\n\n  \/\/ Add the labels\n  svg.append(\"g\")\n  .attr(\"transform\", `translate(${x_global}, ${width\/1.5})`)\n      .selectAll(\"g\")\n      .data(data)\n      .join(\"g\")\n        .attr(\"text-anchor\", function(d) { return (x(d.Country) + x.bandwidth() \/ 2 + Math.PI) % (2 * Math.PI) < Math.PI ? \"end\" : \"start\"; })\n        .attr(\"transform\", function(d) { return \"rotate(\" + ((x(d.Country) + x.bandwidth() \/ 2) * 180 \/ Math.PI - 90) + \")\"+\"translate(\" + (y(d['Count'])+10) + \",0)\"; })\n      .append(\"text\")\n        .text(function(d){return(d.Country)})\n        .attr(\"transform\", function(d) { return (x(d.Country) + x.bandwidth() \/ 2 + Math.PI) % (2 * Math.PI) < Math.PI ? \"rotate(180)\" : \"rotate(0)\"; })\n        .style(\"font-size\", \"13px\")\n        .attr(\"font-weight\", 600)\n        .attr(\"alignment-baseline\", \"middle\")\n\n  });\n\n\/\/ === Women ===\nd3.csv(baseAssetsUrl + \"country_woman.csv\").then(function(data){\n\n  const x_global = 695\n\n  svg.append(\"text\")\n  .attr(\"transform\", `translate(${x_global}, ${width\/3-200})`)\n  .attr(\"font-size\", \"28px\")\n  .attr(\"text-anchor\", \"middle\")\n  .attr(\"font-weight\", 600)\n  .text(\"Ladies\")\n\n  data.forEach(d => {\n    d.Count = Number(d.Count)\n  })\n\n  \/\/ Color\n  var myColor = d3.scaleLinear().domain([1,66])\n                  .range([\"#AC3541\", \"#DD929A\"])\n\n  \/\/ Scales\n  const x = d3.scaleBand()\n      .range([0, 2 * Math.PI]) \n      .align(0)        \n      .domain(data.map(d => d.Country));\n  const y = d3.scaleRadial()\n      .range([innerRadius, outerRadius])  \n      .domain([0, d3.max(data, d => d.Count)]); \n\n  \/\/ Add the bars\n  svg.append(\"g\")\n    .selectAll(\"path\")\n    .data(data)\n    .join(\"path\")\n    .attr(\"transform\", `translate(${x_global}, ${width\/1.5})`)\n    .attr(\"fill\", (d, i) => myColor(i))\n      .attr(\"d\", d3.arc()   \n          .innerRadius(innerRadius)\n          .outerRadius(d => y(d['Count']))\n          .startAngle(d => x(d.Country))\n          .endAngle(d => x(d.Country) + x.bandwidth())\n          .padAngle(0.01)\n          .padRadius(innerRadius))\n\n  \/\/ Add the labels\n  svg.append(\"g\")\n  .attr(\"transform\", `translate(${x_global}, ${width\/1.5})`)\n      .selectAll(\"g\")\n      .data(data)\n      .join(\"g\")\n        .attr(\"text-anchor\", function(d) { return (x(d.Country) + x.bandwidth() \/ 2 + Math.PI) % (2 * Math.PI) < Math.PI ? \"end\" : \"start\"; })\n        .attr(\"transform\", function(d) { return \"rotate(\" + ((x(d.Country) + x.bandwidth() \/ 2) * 180 \/ Math.PI - 90) + \")\"+\"translate(\" + (y(d['Count'])+10) + \",0)\"; })\n      .append(\"text\")\n        .text(function(d){return(d.Country)})\n        .attr(\"transform\", function(d) { return (x(d.Country) + x.bandwidth() \/ 2 + Math.PI) % (2 * Math.PI) < Math.PI ? \"rotate(180)\" : \"rotate(0)\"; })\n        .style(\"font-size\", \"13px\")\n        .attr(\"font-weight\", 600)\n        .attr(\"alignment-baseline\", \"middle\")\n\n  });\n\n});\n'''\n\n\nh = display(HTML(htmlt))\nj = py_display.Javascript(js_t)\npy_display.display_javascript(j)","8991ee9b":"# # Save to W&B\n# run = wandb.init(project='kaggle-survey-2021', name='countries_eda', \n#                  config=CONFIG, anonymous=\"allow\")\n# create_wandb_plot(x_data=country_man[\"Country\"].head(15), \n#                   y_data=country_man[\"Count\"].head(15),\n#                   x_name=\"Country\", y_name=\"Count\", \n#                   title=\"Male Country Top 15\", log=\"country1\", plot=\"bar\")\n# create_wandb_plot(x_data=country_woman[\"Country\"].head(15), \n#                   y_data=country_woman[\"Count\"].head(15),\n#                   x_name=\"Country\", y_name=\"Count\", \n#                   title=\"Female Country Top 15\", log=\"country2\", plot=\"bar\")\n# wandb.finish()","d04eb51d":"cols = [\"Year\", \"What is your gender? - Selected Choice\",\n        \"In which country do you currently reside?\"]\n\ncountry = df[cols]\ncountry = country[cols].value_counts().reset_index()\ncountry.columns = [\"Year\", \"Gender\", \"Country\", \"Count\"]\ncountry = country[country[\"Gender\"].isin([\"Man\", \"Woman\"])].reset_index(drop=True)\n\ncountry[\"Country\"] = country[\"Country\"].replace([\"United States of America\",\n                            \"United Kingdom of Great Britain and Northern Ireland\",\n                            \"I do not wish to disclose my location\",\n                            \"Iran, Islamic Republic of...\", \"Hong Kong (S.A.R.)\",\n                            \"United States\", \"People 's Republic of China\"],\n                           [\"USA\", \"United Kingdom\", \"Undisclosed\", \"Iran\",\n                            \"Hong Kong\", \"USA\", \"China\"])\n\nman_c = ['India', 'USA', 'Other', 'Japan', 'China', 'Brazil', 'Russia',\n         'Nigeria', 'Pakistan', 'United Kingdom']\ncountry2_man = country[country[\"Gender\"]==\"Man\"]\ncountry2_man = country2_man.sort_values([\"Year\", \"Count\"], ascending=False).reset_index(drop=True)\ncountry2_man = country2_man.groupby('Year').head(40).reset_index()\ncountry2_man[\"Rank\"] = country2_man.groupby('Year')['Count'].rank(ascending=False, method=\"first\")\ncountry2_man = country2_man[country2_man[\"Country\"].isin(man_c)]\n\nwoman_c = ['India', 'USA', 'Other', 'Egypt', 'United Kingdom', 'Nigeria',\n           'China', 'Russia', 'Indonesia', 'Taiwan']\ncountry2_woman = country[country[\"Gender\"]==\"Woman\"]\ncountry2_woman = country2_woman.sort_values([\"Year\", \"Count\"], ascending=False).reset_index(drop=True)\ncountry2_woman = country2_woman.groupby('Year').head(40).reset_index()\ncountry2_woman[\"Rank\"] = country2_woman.groupby('Year')['Count'].rank(ascending=False, method=\"first\")\ncountry2_woman = country2_woman[country2_woman[\"Country\"].isin(woman_c)]\n\ncountry2_man.to_csv(\"country2_man.csv\", index=False)\ncountry2_woman.to_csv(\"country2_woman.csv\", index=False)\n\n# Save usa.png img as well\nim = imageio.imread('..\/input\/kaggle-data-science-survey-20172021\/images\/man4.png')\nImage.fromarray(im).save(\"man4.png\")\n\nim = imageio.imread('..\/input\/kaggle-data-science-survey-20172021\/images\/lady4.png')\nImage.fromarray(im).save(\"lady4.png\")\n\nhtmlt = '''\n<!-- Bootstrap -->\n<link rel=\"stylesheet\" href=\"https:\/\/stackpath.bootstrapcdn.com\/bootstrap\/4.4.1\/css\/bootstrap.min.css\" integrity=\"sha384-Vkoo8x4CGsO3+Hhxv8T\/Q5PaXtkKtu6ug5TOeNV6gBiFeWPGFN9MuhOf23Q9Ifjh\" crossorigin=\"anonymous\">\n<!-- Style -->\n<style>\n\t.all4 {\n\t\tfont-family: \"Times New Roman\", Times, serif;\n\t\toverflow-x: hidden;\n\t\twidth: 98%;\n\t\tbackground-color:#e0c9a6;\n\t\t\/* background-image : url(\"bkg.jpg\"); changed via js *\/\n\t}\n\t.svg-container {\n\t\tdisplay: inline-block;\n\t\tposition: relative;\n\t\twidth: 100%;\n\t\tpadding-bottom: 100%;\n\t\tvertical-align: top;\n\t\toverflow: hidden;\n\t}\n\t.svg-content {\n\t\tdisplay: inline-block;\n\t\tposition: absolute;\n\t\ttop: 0;\n\t\tleft: 0;\n\t}\n\n\t.axisHidden path{\n\t\tstroke: #e0c9a6;\n\t}\n\n\t.axisHidden line{\n\t\tstroke: #e0c9a6;\n\t}\n\n\t.annotation.color text {\n\t\tfill: #000000;\n\t}\n\n\t@font-face {\n\t\tfont-family: parklane;\n\t\tsrc: url(https:\/\/h4ks.net\/ParkLaneNF.otf);\n\t\t}\n\n\tdiv.tooltip-donut {\n\t\tposition: absolute;\n\t\ttext-align: center;\n\t\tpadding: .3rem;\n\t\tbackground: #FFFFFF;\n\t\tcolor: #000000;\n\t\tborder: 1px solid #000000;\n\t\tborder-radius: 8px;\n\t\tpointer-events: none;\n\t\tfont-size: 1.3rem;\n\t\tz-index: 99999;\n\t}\n\n<\/style>\n\n<img id=\"baseimg\" src=\"man.png\" style=\"display:none\" \/>\n<div class=\"all4\">\n\t<center><h1 style=\"font-family: parklane\">Evolution of the top 10 countries in 2021<\/h1><\/center>\n\t<div class=\"row\">\n\t\t<div id=\"map4\" class=\"svg-container\"><\/div>\n\t<\/div>\n<\/div>\n'''\n\njs_t = '''\nrequire.config({\n  paths: {\n    d3src: \"https:\/\/d3js.org\/\",\n  },\n  map: {\n    '*': {\n      'd3v6': 'd3src\/d3.v6.min',\n      'd3-selection': 'd3src\/d3-selection.v1.min',\n      'd3-drag': 'd3src\/d3-drag.v1.min',\n      'd3-shape': 'd3src\/d3-shape.v1.min',\n      'd3-path': 'd3src\/d3-path.v1.min',\n      'd3-dispatch': 'd3src\/d3-dispatch.v1.min',\n      'd3-annotation': 'https:\/\/cdnjs.cloudflare.com\/ajax\/libs\/d3-annotation\/2.5.1\/d3-annotation.min.js',\n    }\n  }\n});\n\nrequire([\"d3v6\", \"d3-annotation\"], function(d3, d3Annotation) {\n\n\/\/ Inject d3Annotation methods to d3\nfor (var key in d3Annotation) {\n  d3[key] = d3Annotation[key];\n}\n\n\/\/ Get Assets URL set by Kaggle\nconst baseAssetsUrl = document.getElementById('baseimg').src.replace(\/man.png.*$\/, '');\n\nconst $all4 = document.getElementsByClassName('all4')[0];\n$all4.style.backgroundImage = `url(\"${baseAssetsUrl}bkg.jpg\")`;\n\n\/\/ Set the SVG area\nconst margin = { LEFT: 10, RIGHT: 10, TOP: 10, BOTTOM: 0 }\nconst width = 950 - margin.LEFT - margin.RIGHT\nconst height = 900 - margin.TOP - margin.BOTTOM\nconst x_global = 150\n\nconst svg = d3.select(\"#map4\").append(\"svg\")\n  .attr(\"preserveAspectRatio\", \"xMinYMin meet\")\n  .attr(\"viewBox\", \"0 0 950 900\")\n  .classed(\"svg-content\", true)\n  .append(\"g\")\n  .attr(\"transform\",\n   `translate(${margin.LEFT}, ${margin.TOP})`)\n\n\/\/ Gentleman\nsvg.append(\"image\")\n.attr(\"xlink:href\", baseAssetsUrl+\"man4.png\")\n    .attr(\"x\", \"-12%\")\n    .attr(\"y\", \"5%\")\n    .attr(\"width\", 370)\n    .attr(\"height\", 370)\n    .style(\"opacity\", 1)\n\n\/\/ Lady\nsvg.append(\"image\")\n.attr(\"xlink:href\", baseAssetsUrl+\"lady4.png\")\n  .attr(\"x\", \"-17%\")\n  .attr(\"y\", \"45%\")\n  .attr(\"width\", 540)\n  .attr(\"height\", 540)\n  .style(\"opacity\", 1)\n\n\n\/\/ === MEN ===\nd3.csv(baseAssetsUrl + \"country2_man.csv\").then( function(data) {\n\n  data.forEach(d => {\n    d.Year = Number(d.Year)\n    d.Count = Number(d.Count)\n  })\n\n  \/\/ Title\n  svg.append(\"text\")\n  .attr(\"transform\", `translate(${x_global+300}, ${height\/2-410})`)\n  .attr(\"font-size\", \"25px\")\n  .attr(\"text-anchor\", \"middle\")\n  .attr(\"font-weight\", 600)\n  .text(\"Gentlemen Ranking\")\n\n\n  \/\/ Color\n  const color = d3.scaleOrdinal()\n  .range(['#D67A83','#D05257','#D87F58','#CE8E27','#79A988',\n  '#12A6B6','#74A5D2','#226BBF','#9C3175', '#6D2251'])\n\n  \/\/ Group Lines by Country\n  const sumstat = d3.group(data, d => d.Country);\n\n  \/\/ Add X axis\n  const x = d3.scaleLinear()\n    .domain(d3.extent(data, d => d.Year))\n    .range([ 0, width\/1.5]);\n  svg.append(\"g\")\n    .attr(\"transform\", `translate(${x_global}, ${height\/2-30})`)\n    .call(d3.axisBottom(x).ticks(5).tickFormat(d3.format(\"d\")))\n    .selectAll(\"text\")\n      .attr(\"font-size\", \"15px\")\n      .attr(\"font-weight\", 600);\n\n  \/\/ Add Y axis\n  const y = d3.scaleLinear()\n    .domain([37, 1])\n    .range([ height\/2-90, 0 ]);\n  svg.append(\"g\")\n  \/\/ .attr(\"class\", \"axisHidden\")\n  .attr(\"transform\", `translate(${x_global}, ${height\/2-390})`)\n    .call(d3.axisLeft(y).ticks(20))\n    .selectAll(\"text\")\n      .attr(\"font-size\", \"15px\")\n      .attr(\"font-weight\", 600);\n\n  \/\/ Draw the lines\n  const graph = svg.selectAll(\".line\")\n      .data(sumstat)\n      .join(\"path\")\n      .attr(\"transform\", `translate(${x_global}, ${height\/2-390})`)\n        .attr(\"fill\", \"none\")\n        .attr(\"stroke\", d => color(d[0]) )\n        .attr(\"stroke-width\", 5)\n        .attr('opacity', 0.8)\n        .attr(\"d\", function(d){\n          return d3.line()\n            .x(d => x(d.Year))\n            .y(d => y(d.Rank))\n            (d[1])\n        })\n\n  \/\/ Interactive\n  graph\n  .on('mouseenter', function (event, dt) {\n  \/\/ MOUSE ON\n  d3.selectAll('.value')\n        .attr('opacity', 0)\n\n  d3.select(this)\n    .transition()\n    .duration(100)\n    .attr('opacity', 1)\n    .attr(\"stroke-width\", 10)\n\n})\n  \/\/ MOUSE LEAVE\n  .on('mouseleave', function () {\n    d3.selectAll('.value')\n        .attr('opacity', 1)\n\n    d3.select(this)\n      .transition()\n      .duration(100)\n      .attr('opacity', 0.8)\n      .attr(\"stroke-width\", 5)\n  })\n\n   \/\/ Legend\n  const keys = ['India', 'USA', 'Other', 'Japan', 'China', 'Brazil', \n  'Russia', 'Nigeria', 'Pakistan', 'United Kingdom']\n\n  var legend = svg.selectAll(\"graph\")\n  .data(keys)\n  .join(\"g\")\n  .attr(\"transform\", `translate(${x_global+540}, ${height\/2-490})`)\n\n  legend\n  .append(\"circle\")\n    .attr(\"cx\", 100)\n    .attr(\"cy\", function(d,i){ return 100 + i*38}) \n    .attr(\"r\", 7)\n    .style(\"fill\", function(d){ return color(d)})\n\n  legend\n    .append(\"text\")\n      .attr(\"x\", 120)\n      .attr(\"y\", function(d,i){ return 100 + i*38}) \n      .style(\"fill\", function(d){ return color(d)})\n      .text(function(d){ return d})\n      .attr(\"text-anchor\", \"left\")\n      .attr(\"font-weight\", 600)\n      .style(\"alignment-baseline\", \"middle\")\n})\n\n\n\/\/ === LADIES ===\nd3.csv(baseAssetsUrl + \"country2_woman.csv\").then( function(data) {\n\n  data.forEach(d => {\n    d.Year = Number(d.Year)\n    d.Count = Number(d.Count)\n  })\n\n  \/\/ Title\n  svg.append(\"text\")\n  .attr(\"transform\", `translate(${x_global+300}, ${height\/2+40})`)\n  .attr(\"font-size\", \"25px\")\n  .attr(\"text-anchor\", \"middle\")\n  .attr(\"font-weight\", 600)\n  .text(\"Ladies Ranking\")\n\n  \/\/ Color\n  const color = d3.scaleOrdinal()\n  .range(['#D67A83','#D05257','#D87F58','#CE8E27','#79A988',\n  '#12A6B6','#74A5D2','#226BBF','#9C3175', '#6D2251'])\n\n  const sumstat = d3.group(data, d => d.Country);\n\n  \/\/ Add X axis\n  const x = d3.scaleLinear()\n    .domain(d3.extent(data, d => d.Year))\n    .range([ 0, width\/1.5]);\n  svg.append(\"g\")\n    .attr(\"transform\", `translate(${x_global}, ${height\/2+420})`)\n    .call(d3.axisBottom(x).ticks(5).tickFormat(d3.format(\"d\")))\n    .selectAll(\"text\")\n      .attr(\"font-size\", \"15px\")\n      .attr(\"font-weight\", 600);\n\n  \/\/ Add Y axis\n  const y = d3.scaleLinear()\n    .domain([33, 1])\n    .range([ height\/2-90, 0 ]);\n  svg.append(\"g\")\n  \/\/ .attr(\"class\", \"axisHidden\")\n  .attr(\"transform\", `translate(${x_global}, ${height\/1.78})`)\n    .call(d3.axisLeft(y).ticks(20))\n    .selectAll(\"text\")\n      .attr(\"font-size\", \"15px\")\n      .attr(\"font-weight\", 600);\n\n  \/\/ Draw the lines\n  const graph = svg.selectAll(\".line\")\n      .data(sumstat)\n      .join(\"path\")\n      .attr(\"transform\", `translate(${x_global}, ${height\/1.78})`)\n        .attr(\"fill\", \"none\")\n        .attr(\"stroke\", d => color(d[0]) )\n        .attr(\"stroke-width\", 5)\n        .attr('opacity', 0.8)\n        .attr(\"d\", function(d){\n          return d3.line()\n            .x(d => x(d.Year))\n            .y(d => y(d.Rank))\n            (d[1])\n        })\n\n  \/\/ Interactive\n  graph\n  .on('mouseenter', function (event, dt) {\n  \/\/ MOUSE ON\n  d3.selectAll('.value')\n        .attr('opacity', 0)\n\n  d3.select(this)\n    .transition()\n    .duration(100)\n    .attr('opacity', 1)\n    .attr(\"stroke-width\", 10)\n\n})\n  \/\/ MOUSE LEAVE\n  .on('mouseleave', function () {\n    d3.selectAll('.value')\n        .attr('opacity', 1)\n\n    d3.select(this)\n      .transition()\n      .duration(100)\n      .attr('opacity', 0.8)\n      .attr(\"stroke-width\", 5)\n  })\n\n\n  \/\/ Legend\n  const keys = ['India', 'USA', 'Other', 'Egypt', 'United Kingdom', 'Nigeria',\n  'China', 'Russia', 'Indonesia', 'Taiwan']\n\n  var legend = svg.selectAll(\"graph\")\n  .data(keys)\n  .join(\"g\")\n  .attr(\"transform\", `translate(${x_global+540}, ${height\/2-40})`)\n\n  legend\n  .append(\"circle\")\n    .attr(\"cx\", 100)\n    .attr(\"cy\", function(d,i){ return 100 + i*38}) \n    .attr(\"r\", 7)\n    .style(\"fill\", function(d){ return color(d)})\n\n  legend\n    .append(\"text\")\n      .attr(\"x\", 120)\n      .attr(\"y\", function(d,i){ return 100 + i*38}) \n      .style(\"fill\", function(d){ return color(d)})\n      .text(function(d){ return d})\n      .attr(\"text-anchor\", \"left\")\n      .attr(\"font-weight\", 600)\n      .style(\"alignment-baseline\", \"middle\")\n})\n\n});\n'''\n\n\nh = display(HTML(htmlt))\nj = py_display.Javascript(js_t)\npy_display.display_javascript(j)","255a6450":"# Education\ncols = [\"What is the highest level of formal education that you have attained or plan to attain within the next 2 years?\",\n        \"Year\",\n        \"What is your gender? - Selected Choice\"]\n\neducation = df[cols].value_counts().reset_index()\neducation.columns = [\"Degree\", \"Year\", \"Gender\", \"Count\"]\neducation = education[education[\"Gender\"].isin([\"Man\", \"Woman\"])]\\\n                    .reset_index(drop=True)\n\neducation[\"Degree\"] = education[\"Degree\"].replace(['Master\u00e2\u20ac\u2122s degree', 'Bachelor\u00e2\u20ac\u2122s degree',\n                             'Some college\/university study without earning a bachelor\u00e2\u20ac\u2122s degree',\n                             \"Some college\/university study without earning a bachelor's degree\",\n                             'No formal education past high school',\n                             'I did not complete any formal education past high school'],\n                            \n                            [\"Master's degree\", \"Bachelor's degree\",\n                             'Professional degree', 'Professional degree',\n                             \"High School degree\", \"High School degree\"])\neducation = education.groupby([\"Degree\", \"Year\", \"Gender\"]).sum().reset_index()\neducation = education[education[\"Degree\"]!=\"Professional doctorate\"]\n\ndegree = [\"Bachelor's degree\", 'Doctoral degree', 'High School degree',\n       'I prefer not to answer', \"Master's degree\", 'Professional degree']\nnew_degree = [\"3. Bachelor's degree\", '1. Doctoral degree', '5. High School degree',\n       '6. I prefer not to answer', \"2. Master's degree\", '4. Professional degree']\neducation[\"Degree\"] = education[\"Degree\"].replace(degree, new_degree)\n\neducation = pd.merge(education, total, on=[\"Year\", \"Gender\"])\neducation[\"Perc\"] = education[\"Count_x\"]\/education[\"Count_y\"]\neducation = education.drop(columns=[\"Count_x\", \"Count_y\"])\n# education = pd.pivot(data=education, index=[\"Degree\", \"Gender\"], \n#                          columns=\"Year\", values=\"Perc\").reset_index()\n\neducation_man = education[education[\"Gender\"]==\"Man\"].sort_values([\"Year\", \"Degree\"])\neducation_woman = education[education[\"Gender\"]==\"Woman\"].sort_values([\"Year\", \"Degree\"])\n\neducation_man.to_csv(\"education_man.csv\", index=False)\neducation_woman.to_csv(\"education_woman.csv\", index=False)\n\n# Save usa.png img as well\nim = imageio.imread('..\/input\/kaggle-data-science-survey-20172021\/images\/man5.png')\nImage.fromarray(im).save(\"man5.png\")\n\nim = imageio.imread('..\/input\/kaggle-data-science-survey-20172021\/images\/lady5.png')\nImage.fromarray(im).save(\"lady5.png\")\n\n\nhtmlt = '''\n<!-- Bootstrap -->\n<link rel=\"stylesheet\" href=\"https:\/\/stackpath.bootstrapcdn.com\/bootstrap\/4.4.1\/css\/bootstrap.min.css\" integrity=\"sha384-Vkoo8x4CGsO3+Hhxv8T\/Q5PaXtkKtu6ug5TOeNV6gBiFeWPGFN9MuhOf23Q9Ifjh\" crossorigin=\"anonymous\">\n<!-- Style -->\n<style>\n\t.all5 {\n\t\tfont-family: \"Times New Roman\", Times, serif;\n\t\toverflow-x: hidden;\n\t\twidth: 98%;\n\t\tbackground-color:#e0c9a6;\n\t\t\/* background-image : url(\"bkg.jpg\"); changed via js *\/\n\t}\n\t.svg-container {\n\t\tdisplay: inline-block;\n\t\tposition: relative;\n\t\twidth: 100%;\n\t\tpadding-bottom: 100%;\n\t\tvertical-align: top;\n\t\toverflow: hidden;\n\t}\n\t.svg-content {\n\t\tdisplay: inline-block;\n\t\tposition: absolute;\n\t\ttop: 0;\n\t\tleft: 0;\n\t}\n\n\t.axisHidden path{\n\t\tstroke: #e0c9a6;\n\t}\n\n\t.axisHidden line{\n\t\tstroke: #e0c9a6;\n\t}\n\n\t.annotation.color text {\n\t\tfill: #000000;\n\t}\n\n\t@font-face {\n\t\tfont-family: parklane;\n\t\tsrc: url(https:\/\/h4ks.net\/ParkLaneNF.otf);\n\t\t}\n\n\tdiv.tooltip-donut {\n\t\tposition: absolute;\n\t\ttext-align: center;\n\t\tpadding: .3rem;\n\t\tbackground: #FFFFFF;\n\t\tcolor: #000000;\n\t\tborder: 1px solid #000000;\n\t\tborder-radius: 8px;\n\t\tpointer-events: none;\n\t\tfont-size: 1.3rem;\n\t\tz-index: 99999;\n\t}\n\n<\/style>\n\n<img id=\"baseimg\" src=\"man.png\" style=\"display:none\" \/>\n<div class=\"all5\">\n\t<center><h1 style=\"font-family: parklane\">Education of the respondents<\/h1><\/center>\n\t<div class=\"row\">\n\t\t<div id=\"map5\" class=\"svg-container\"><\/div>\n\t<\/div>\n<\/div>\n'''\n\njs_t = '''\nrequire.config({\n  paths: {\n    d3src: \"https:\/\/d3js.org\/\",\n  },\n  map: {\n    '*': {\n      'd3v6': 'd3src\/d3.v6.min',\n      'd3-selection': 'd3src\/d3-selection.v1.min',\n      'd3-drag': 'd3src\/d3-drag.v1.min',\n      'd3-shape': 'd3src\/d3-shape.v1.min',\n      'd3-path': 'd3src\/d3-path.v1.min',\n      'd3-dispatch': 'd3src\/d3-dispatch.v1.min',\n      'd3-annotation': 'https:\/\/cdnjs.cloudflare.com\/ajax\/libs\/d3-annotation\/2.5.1\/d3-annotation.min.js',\n    }\n  }\n});\n\nrequire([\"d3v6\", \"d3-annotation\"], function(d3, d3Annotation) {\n\n\/\/ Inject d3Annotation methods to d3\nfor (var key in d3Annotation) {\n  d3[key] = d3Annotation[key];\n}\n\n\/\/ Get Assets URL set by Kaggle\nconst baseAssetsUrl = document.getElementById('baseimg').src.replace(\/man.png.*$\/, '');\n\nconst $all5 = document.getElementsByClassName('all5')[0];\n$all5.style.backgroundImage = `url(\"${baseAssetsUrl}bkg.jpg\")`;\n\n\/\/ Set the SVG area\nconst margin = { LEFT: 10, RIGHT: 10, TOP: 10, BOTTOM: 0 }\nconst width = 950 - margin.LEFT - margin.RIGHT\nconst height = 900 - margin.TOP - margin.BOTTOM\nconst x_global = 150\n\nconst svg = d3.select(\"#map5\").append(\"svg\")\n  .attr(\"preserveAspectRatio\", \"xMinYMin meet\")\n  .attr(\"viewBox\", \"0 0 950 900\")\n  .classed(\"svg-content\", true)\n  .append(\"g\")\n  .attr(\"transform\",\n   `translate(${margin.LEFT}, ${margin.TOP})`)\n   \n\n\/\/ Gentleman\nsvg.append(\"image\")\n.attr(\"xlink:href\", baseAssetsUrl+\"man5.png\")\n    .attr(\"x\", \"-10%\")\n    .attr(\"y\", \"6%\")\n    .attr(\"width\", 330)\n    .attr(\"height\", 330)\n    .style(\"opacity\", 1)\n\n\/\/ Lady\nsvg.append(\"image\")\n.attr(\"xlink:href\", baseAssetsUrl+\"lady5.png\")\n  .attr(\"x\", \"-28%\")\n  .attr(\"y\", \"60%\")\n  .attr(\"width\", 500)\n  .attr(\"height\", 500)\n  .style(\"opacity\", 1)\n\n\n\/\/ Color\nconst color = d3.scaleOrdinal()\n.range(['#D67A83','#D05257','#D87F58','#CE8E27','#79A988',\n'#12A6B6','#74A5D2','#226BBF','#9C3175', '#6D2251'])\n\n\n\/\/ Legend\nconst keys = ['1. Doctoral degree', \"2. Master's degree\", \"3. Bachelor's degree\",\n'4. Professional degree', '5. High School degree',\n'6. I prefer not to answer']\n\nvar legend = svg.selectAll(\"graph\")\n.data(keys)\n.join(\"g\")\n.attr(\"transform\", `translate(${x_global-170}, ${height\/2-110})`)\n\nlegend\n.append(\"circle\")\n  .attr(\"cx\", (d, i) => (i < 2 ? 100 : (i < 4 ? 400 : 700)))\n  .attr(\"cy\", (d, i) => (i%2 === 0 ? 100 : 140)) \n  .attr(\"r\", 9)\n  .style(\"fill\", function(d){ return color(d)})\n\nlegend\n  .append(\"text\")\n    .attr(\"x\", (d, i) => (i < 2 ? 115 : (i < 4 ? 415 : 715)))\n    .attr(\"y\", (d, i) => (i%2 === 0 ? 100 : 140)) \n    .attr(\"font-size\", \"19px\")\n    .style(\"fill\", function(d){ return color(d)})\n    .text(function(d){ return d})\n    .attr(\"text-anchor\", \"left\")\n    .attr(\"font-weight\", 700)\n    .style(\"alignment-baseline\", \"middle\")\n\n\n\/\/ === MEN ===\nd3.csv(baseAssetsUrl + \"education_man.csv\").then( function(data) {\n\n  data.forEach(d => {\n    d.Year = Number(d.Year)\n    d.Perc = Number(d.Perc)\n  })\n\n  \/\/ Title\n  svg.append(\"text\")\n  .attr(\"transform\", `translate(${x_global+300}, ${height\/2-410})`)\n  .attr(\"font-size\", \"25px\")\n  .attr(\"text-anchor\", \"middle\")\n  .attr(\"font-weight\", 600)\n  .text(\"Gentlemen\")\n\n  \/\/ Group Lines by Country\n  const sumstat = d3.group(data, d => d.Degree);\n\n  \/\/ Add X axis\n  const x = d3.scaleLinear()\n    .domain(d3.extent(data, d => d.Year))\n    .range([ 0, width\/1.5]);\n  svg.append(\"g\")\n    .attr(\"transform\", `translate(${x_global}, ${height\/2-70})`)\n    .call(d3.axisBottom(x).ticks(5).tickFormat(d3.format(\"d\")))\n    .selectAll(\"text\")\n      .attr(\"font-size\", \"15px\")\n      .attr(\"font-weight\", 600);\n\n  \/\/ Add Y axis\n  const y = d3.scaleLinear()\n    .domain([0, d3.max(data, d => d.Perc)])\n    .range([ height\/2-130, 0 ]);\n  svg.append(\"g\")\n  \/\/ .attr(\"class\", \"axisHidden\")\n  .attr(\"transform\", `translate(${x_global}, ${height\/2-390})`)\n    .call(d3.axisLeft(y).ticks(13).tickFormat(d3.format(\".0%\")))\n    .selectAll(\"text\")\n      .attr(\"font-size\", \"15px\")\n      .attr(\"font-weight\", 600);\n\n  \/\/ Draw the lines\n  const graph = svg.selectAll(\".line\")\n      .data(sumstat)\n      .join(\"path\")\n      .attr(\"transform\", `translate(${x_global}, ${height\/2-390})`)\n        .attr(\"fill\", \"none\")\n        .attr(\"stroke\", d => color(d[0]) )\n        .attr(\"stroke-width\", 5)\n        .attr('opacity', 0.8)\n        .attr(\"d\", function(d){\n          return d3.line()\n            .x(d => x(d.Year))\n            .y(d => y(d.Perc))\n            (d[1])\n        })\n\n  \/\/ Interactive\n  graph\n    .on('mouseenter', function (event, dt) {\n    \/\/ MOUSE ON\n    d3.selectAll('.value')\n          .attr('opacity', 0)\n\n    d3.select(this)\n      .transition()\n      .duration(100)\n      .attr('opacity', 1)\n      .attr(\"stroke-width\", 10)\n\n  })\n    \/\/ MOUSE LEAVE\n    .on('mouseleave', function () {\n      d3.selectAll('.value')\n          .attr('opacity', 1)\n\n      d3.select(this)\n        .transition()\n        .duration(100)\n        .attr('opacity', 0.8)\n        .attr(\"stroke-width\", 5)\n   })  \n  \n})\n\n\/\/ === WOMEN ===\nd3.csv(baseAssetsUrl + \"education_woman.csv\").then( function(data) {\n\n  data.forEach(d => {\n    d.Year = Number(d.Year)\n    d.Perc = Number(d.Perc)\n  })\n\n  \/\/ Title\n  svg.append(\"text\")\n  .attr(\"transform\", `translate(${x_global+300}, ${height\/2+90})`)\n  .attr(\"font-size\", \"25px\")\n  .attr(\"text-anchor\", \"middle\")\n  .attr(\"font-weight\", 600)\n  .text(\"Ladies\")\n\n  \/\/ Group Lines by Country\n  const sumstat = d3.group(data, d => d.Degree);\n\n  \/\/ Add X axis\n  const x = d3.scaleLinear()\n    .domain(d3.extent(data, d => d.Year))\n    .range([ 0, width\/1.5]);\n  svg.append(\"g\")\n    .attr(\"transform\", `translate(${x_global}, ${height\/1.03})`)\n    .call(d3.axisBottom(x).ticks(5).tickFormat(d3.format(\"d\")))\n    .selectAll(\"text\")\n      .attr(\"font-size\", \"15px\")\n      .attr(\"font-weight\", 600);\n\n  \/\/ Add Y axis\n  const y = d3.scaleLinear()\n    .domain([0, d3.max(data, d => d.Perc)])\n    .range([ height\/2-130, 0 ]);\n  svg.append(\"g\")\n  \/\/ .attr(\"class\", \"axisHidden\")\n  .attr(\"transform\", `translate(${x_global}, ${height\/2+100})`)\n    .call(d3.axisLeft(y).ticks(15).tickFormat(d3.format(\".0%\")))\n    .selectAll(\"text\")\n      .attr(\"font-size\", \"15px\")\n      .attr(\"font-weight\", 600);\n\n  \/\/ Draw the lines\n  const graph = svg.selectAll(\".line\")\n      .data(sumstat)\n      .join(\"path\")\n      .attr(\"transform\", `translate(${x_global}, ${height\/2+100})`)\n        .attr(\"fill\", \"none\")\n        .attr(\"stroke\", d => color(d[0]) )\n        .attr(\"stroke-width\", 5)\n        .attr('opacity', 0.8)\n        .attr(\"d\", function(d){\n          return d3.line()\n            .x(d => x(d.Year))\n            .y(d => y(d.Perc))\n            (d[1])\n        })\n\n    \/\/ Interactive\n    graph\n    .on('mouseenter', function (event, dt) {\n    \/\/ MOUSE ON\n    d3.selectAll('.value')\n          .attr('opacity', 0)\n\n    d3.select(this)\n      .transition()\n      .duration(100)\n      .attr('opacity', 1)\n      .attr(\"stroke-width\", 10)\n\n  })\n    \/\/ MOUSE LEAVE\n    .on('mouseleave', function () {\n      d3.selectAll('.value')\n          .attr('opacity', 1)\n\n      d3.select(this)\n        .transition()\n        .duration(100)\n        .attr('opacity', 0.8)\n        .attr(\"stroke-width\", 5)\n   })   \n  \n})\n\n\/\/ Annot\nconst annot1 = [\n  {\n  note: { \n    label: \"Increase in Bsc & decrease in Msc due to a bigger pool of respondents between 18 and 24 yo.\",\n    title: \"Bsc vs Msc\",\n    wrap: 100, \n    padding: 5, \n  },\n  className: \"color\",\n  connector: { end: \"arrow\" },\n  color: [\"#ffffff\"],\n  x: 780,\n  y: 95,\n  dy: +10,\n  dx: 30\n},\n{\n  note: { \n    label: \"We see the same trend for women as well.\",\n    title: \"Bsc vs Msc\",\n    wrap: 100, \n    padding: 5, \n  },\n  className: \"color\",\n  connector: { end: \"arrow\" },\n  color: [\"#ffffff\"],\n  x: 780,\n  y: 620,\n  dy: +10,\n  dx: 30\n}]\n\nsvg.append(\"g\")\n  .style('font-size', 17)\n  .call(d3.annotation()\n          .annotations(annot1))\n\n});\n'''\n\n\nh = display(HTML(htmlt))\nj = py_display.Javascript(js_t)\npy_display.display_javascript(j)","8dcb0053":"cols = [\"Year\", \"What is your gender? - Selected Choice\",\n        \"Select the title most similar to your current role (or most recent title if retired): - Selected Choice\"]\n\nrole = df[cols]\nrole.columns = [\"Year\", \"Gender\", \"Role\"]\nrole = role[role[\"Gender\"].isin([\"Man\", \"Woman\"])]\n\nold_role = ['Currently not employed', 'Product Manager',\n            'DBA\/Database Engineer', 'Product\/Project Manager',\n            'Not employed', 'Manager', \n            'Software Developer\/Software Engineer', 'Scientist\/Researcher',\n            'Research Assistant', 'Predictive Modeler', 'Data Miner',\n            'Programmer', 'Operations Research Practitioner', 'Developer Advocate',\n            'Machine Learning Engineer', 'Researcher', 'Program\/Project Manager']\nnew_role = ['Unemployed', 'Project Manager',\n            'DBA\/Database Engineer', 'Project Manager',\n            'Unemployed', 'Project Manager',\n            'Software Engineer', 'Research Scientist',\n            'Research Scientist', 'Data Scientist', 'Data Engineer',\n            'Computer Scientist', 'Research Scientist', 'Software Engineer',\n            'Data Scientist', 'Research Scientist', 'Project Manager']\nrole[\"Role\"] = role[\"Role\"].replace(old_role, new_role)\nrole = role.value_counts().reset_index()\n\nto_erase = list(role[\"Role\"].value_counts().index[12:])\nrole = role[~role[\"Role\"].isin(to_erase)]\nrole.columns = [\"Year\", \"Gender\", \"Role\", \"Count\"]\n\nrole = role[role[\"Year\"]==2021]\nrole_man = role[role[\"Gender\"]==\"Man\"]\nrole_woman = role[role[\"Gender\"]==\"Woman\"]\n\nrole_man.to_csv(\"role_man.csv\", index=False)\nrole_woman.to_csv(\"role_woman.csv\", index=False)\n\n# Save usa.png img as well\nim = imageio.imread('..\/input\/kaggle-data-science-survey-20172021\/images\/gents6.png')\nImage.fromarray(im).save(\"gents6.png\")\n\nim = imageio.imread('..\/input\/kaggle-data-science-survey-20172021\/images\/ladies6.png')\nImage.fromarray(im).save(\"ladies6.png\")\n\nhtmlt = '''\n<!-- Bootstrap -->\n<link rel=\"stylesheet\" href=\"https:\/\/stackpath.bootstrapcdn.com\/bootstrap\/4.4.1\/css\/bootstrap.min.css\" integrity=\"sha384-Vkoo8x4CGsO3+Hhxv8T\/Q5PaXtkKtu6ug5TOeNV6gBiFeWPGFN9MuhOf23Q9Ifjh\" crossorigin=\"anonymous\">\n<!-- Style -->\n<style>\n\t.all6 {\n\t\tfont-family: \"Times New Roman\", Times, serif;\n\t\toverflow-x: hidden;\n\t\twidth: 98%;\n\t\tbackground-color:#e0c9a6;\n\t\t\/* background-image : url(\"bkg.jpg\"); changed via js *\/\n\t}\n\t.svg-container {\n\t\tdisplay: inline-block;\n\t\tposition: relative;\n\t\twidth: 100%;\n\t\tpadding-bottom: 100%;\n\t\tvertical-align: top;\n\t\toverflow: hidden;\n\t}\n\t.svg-content {\n\t\tdisplay: inline-block;\n\t\tposition: absolute;\n\t\ttop: 0;\n\t\tleft: 0;\n\t}\n\n\t.axisHidden path{\n\t\tstroke: #e0c9a6;\n\t}\n\n\t.axisHidden line{\n\t\tstroke: #e0c9a6;\n\t}\n\n\t.annotation.gents text {\n\t\tfill: #A54D27;\n\t}\n\n\t.annotation.ladies text {\n\t\tfill: #6D2251;\n\t}\n\n\t@font-face {\n\t\tfont-family: parklane;\n\t\tsrc: url(https:\/\/h4ks.net\/ParkLaneNF.otf);\n\t\t}\n\n\tdiv.tooltip-donut {\n\t\tposition: absolute;\n\t\ttext-align: center;\n\t\tpadding: .3rem;\n\t\tbackground: #FFFFFF;\n\t\tcolor: #000000;\n\t\tborder: 1px solid #000000;\n\t\tborder-radius: 8px;\n\t\tpointer-events: none;\n\t\tfont-size: 1.3rem;\n\t\tz-index: 99999;\n\t}\n\n<\/style>\n\n<img id=\"baseimg\" src=\"man.png\" style=\"display:none\" \/>\n<div class=\"all6\">\n\t<center><h1 style=\"font-family: parklane\">Occupation<\/h1><\/center>\n\t<center><h2>2021: Frequency of Respondents on Roles<\/h2><\/center>\n\t<div class=\"row\">\n\t\t<div id=\"map6\" class=\"svg-container\"><\/div>\n\t<\/div>\n<\/div>\n'''\n\njs_t = '''\nrequire.config({\n  paths: {\n    d3src: \"https:\/\/d3js.org\/\",\n  },\n  map: {\n    '*': {\n      'd3v6': 'd3src\/d3.v6.min',\n      'd3-selection': 'd3src\/d3-selection.v1.min',\n      'd3-drag': 'd3src\/d3-drag.v1.min',\n      'd3-shape': 'd3src\/d3-shape.v1.min',\n      'd3-path': 'd3src\/d3-path.v1.min',\n      'd3-dispatch': 'd3src\/d3-dispatch.v1.min',\n      'd3-annotation': 'https:\/\/cdnjs.cloudflare.com\/ajax\/libs\/d3-annotation\/2.5.1\/d3-annotation.min.js',\n    }\n  }\n});\n\nrequire([\"d3v6\", \"d3-annotation\"], function(d3, d3Annotation) {\n\n\/\/ Inject d3Annotation methods to d3\nfor (var key in d3Annotation) {\n  d3[key] = d3Annotation[key];\n}\n\n\/\/ Get Assets URL set by Kaggle\nconst baseAssetsUrl = document.getElementById('baseimg').src.replace(\/man.png.*$\/, '');\n\nconst $all6 = document.getElementsByClassName('all6')[0];\n$all6.style.backgroundImage = `url(\"${baseAssetsUrl}bkg.jpg\")`;\n\n\/\/ Set the SVG area\nconst margin = { LEFT: 10, RIGHT: 10, TOP: 10, BOTTOM: 0 }\nconst width = 950 - margin.LEFT - margin.RIGHT\nconst height = 900 - margin.TOP - margin.BOTTOM\nconst innerRadius = 100\nconst outerRadius = Math.min(width, height) \/ 5\n\nconst svg = d3.select(\"#map6\").append(\"svg\")\n  .attr(\"preserveAspectRatio\", \"xMinYMin meet\")\n  .attr(\"viewBox\", \"0 0 950 900\")\n  .classed(\"svg-content\", true)\n  .attr(\"transform\",\n   `translate(${margin.LEFT}, ${margin.TOP})`)\n\n\n\/\/ Men\nsvg.append(\"image\")\n.attr(\"xlink:href\", baseAssetsUrl+\"gents6.png\")\n    .attr(\"x\", \"6.3%\")\n    .attr(\"y\", \"47%\")\n    .attr(\"width\", 340)\n    .attr(\"height\", 340)\n    .style(\"opacity\", 1)\n\n\/\/ Women\nsvg.append(\"image\")\n.attr(\"xlink:href\", baseAssetsUrl+\"ladies6.png\")\n    .attr(\"x\", \"59.5%\")\n    .attr(\"y\", \"47%\")\n    .attr(\"width\", 260)\n    .attr(\"height\", 260)\n    .style(\"opacity\", 1)\n\nsvg.append('line')\n.style(\"stroke\", \"black\")\n.style(\"stroke-width\", 1)\n    .attr(\"x1\", 480)\n    .attr(\"y1\", 60)\n    .attr(\"x2\", 480)\n    .attr(\"y2\", 900)\n\n\n\/\/ === Men ===\nd3.csv(baseAssetsUrl + \"role_man.csv\").then(function(data){\n\n  const x_global = 230\n\n  svg.append(\"text\")\n  .attr(\"transform\", `translate(${x_global}, ${width\/3-200})`)\n  .attr(\"font-size\", \"28px\")\n  .attr(\"text-anchor\", \"middle\")\n  .attr(\"font-weight\", 600)\n  .text(\"Gentlemen\")\n\n  data.forEach(d => {\n    d.Count = Number(d.Count)\n  })\n\n  \/\/ Color\n  var myColor = d3.scaleLinear().domain([1,12])\n                  .range([\"#A54D27\", \"#E4A68B\"])\n\n  \/\/ Scales\n  const x = d3.scaleBand()\n      .range([0, 2 * Math.PI]) \n      .align(0)        \n      .domain(data.map(d => d.Role));\n  const y = d3.scaleRadial()\n      .range([innerRadius, outerRadius])  \n      .domain([0, d3.max(data, d => d.Count)]); \n\n  \/\/ Add the bars\n  svg.append(\"g\")\n    .selectAll(\"path\")\n    .data(data)\n    .join(\"path\")\n    .attr(\"transform\", `translate(${x_global}, ${width\/1.8})`)\n      .attr(\"fill\", (d, i) => myColor(i))\n      .attr(\"d\", d3.arc()   \n          .innerRadius(innerRadius)\n          .outerRadius(d => y(d['Count']))\n          .startAngle(d => x(d.Role))\n          .endAngle(d => x(d.Role) + x.bandwidth())\n          .padAngle(0.01)\n          .padRadius(innerRadius))\n\n  \/\/ Add the labels\n  svg.append(\"g\")\n  .attr(\"transform\", `translate(${x_global}, ${width\/1.8})`)\n      .selectAll(\"g\")\n      .data(data)\n      .join(\"g\")\n        .attr(\"text-anchor\", function(d) { return (x(d.Role) + x.bandwidth() \/ 2 + Math.PI) % (2 * Math.PI) < Math.PI ? \"end\" : \"start\"; })\n        .attr(\"transform\", function(d) { return \"rotate(\" + ((x(d.Role) + x.bandwidth() \/ 2) * 180 \/ Math.PI - 90) + \")\"+\"translate(\" + (y(d['Count'])+10) + \",0)\"; })\n      .append(\"text\")\n        .text(function(d){return(d.Role)})\n        .attr(\"transform\", function(d) { return (x(d.Role) + x.bandwidth() \/ 2 + Math.PI) % (2 * Math.PI) < Math.PI ? \"rotate(180)\" : \"rotate(0)\"; })\n        .style(\"font-size\", \"14px\")\n        .attr(\"font-weight\", 600)\n        .attr(\"alignment-baseline\", \"middle\")\n\n  });\n\n\/\/ === Women ===\nd3.csv(baseAssetsUrl + \"role_woman.csv\").then(function(data){\n\n  const x_global = 695\n\n  svg.append(\"text\")\n  .attr(\"transform\", `translate(${x_global}, ${width\/3-200})`)\n  .attr(\"font-size\", \"28px\")\n  .attr(\"text-anchor\", \"middle\")\n  .attr(\"font-weight\", 600)\n  .text(\"Ladies\")\n\n  data.forEach(d => {\n    d.Count = Number(d.Count)\n  })\n\n  \/\/ Color\n  var myColor = d3.scaleLinear().domain([1,12])\n                  .range([\"#6D2251\", \"#E2A2CA\"])\n\n  \/\/ Scales\n  const x = d3.scaleBand()\n      .range([0, 2 * Math.PI]) \n      .align(0)        \n      .domain(data.map(d => d.Role));\n  const y = d3.scaleRadial()\n      .range([innerRadius, outerRadius])  \n      .domain([0, d3.max(data, d => d.Count)]); \n\n  \/\/ Add the bars\n  svg.append(\"g\")\n    .selectAll(\"path\")\n    .data(data)\n    .join(\"path\")\n    .attr(\"transform\", `translate(${x_global}, ${width\/1.8})`)\n    .attr(\"fill\", (d, i) => myColor(i))\n      .attr(\"d\", d3.arc()   \n          .innerRadius(innerRadius)\n          .outerRadius(d => y(d['Count']))\n          .startAngle(d => x(d.Role))\n          .endAngle(d => x(d.Role) + x.bandwidth())\n          .padAngle(0.01)\n          .padRadius(innerRadius))\n\n  \/\/ Add the labels\n  svg.append(\"g\")\n  .attr(\"transform\", `translate(${x_global}, ${width\/1.8})`)\n      .selectAll(\"g\")\n      .data(data)\n      .join(\"g\")\n        .attr(\"text-anchor\", function(d) { return (x(d.Role) + x.bandwidth() \/ 2 + Math.PI) % (2 * Math.PI) < Math.PI ? \"end\" : \"start\"; })\n        .attr(\"transform\", function(d) { return \"rotate(\" + ((x(d.Role) + x.bandwidth() \/ 2) * 180 \/ Math.PI - 90) + \")\"+\"translate(\" + (y(d['Count'])+10) + \",0)\"; })\n      .append(\"text\")\n        .text(function(d){return(d.Role)})\n        .attr(\"transform\", function(d) { return (x(d.Role) + x.bandwidth() \/ 2 + Math.PI) % (2 * Math.PI) < Math.PI ? \"rotate(180)\" : \"rotate(0)\"; })\n        .style(\"font-size\", \"14px\")\n        .attr(\"font-weight\", 600)\n        .attr(\"alignment-baseline\", \"middle\")\n\n  });\n\n\n\/\/ Annot\nconst annot1 = [\n  {\n  note: { \n    label: \"The majority of respondents are either in univ or DS-ists (for both men and women).\",\n    title: \"Students & Data Scientists\",\n    wrap: 300, \n    padding: 5, \n  },\n  className: \"gents\",\n  connector: { end: \"arrow\" },\n  color: [\"#ffffff\"],\n  x: 330,\n  y: 360,\n  dy: -100,\n  dx: -1\n},\n{\n  note: { \n    label: \"3rd most preferred role for women is Data Analyst, compared to SE for men.\",\n    title: \"Data Analyst vs Engineer\",\n    wrap: 300, \n    padding: 5, \n  },\n  className: \"ladies\",\n  connector: { end: \"arrow\" },\n  color: [\"#ffffff\"],\n  x: 870,\n  y: 500,\n  dy: +290,\n  dx: -1\n}]\n\nsvg.append(\"g\")\n  .style('font-size', 19)\n  .call(d3.annotation()\n          .annotations(annot1))\n\n});\n'''\n\n\nh = display(HTML(htmlt))\nj = py_display.Javascript(js_t)\npy_display.display_javascript(j)","f8175ea5":"# # Save to W&B\n# run = wandb.init(project='kaggle-survey-2021', name='role_eda', \n#                  config=CONFIG, anonymous=\"allow\")\n# create_wandb_plot(x_data=role_man[\"Role\"], \n#                   y_data=role_man[\"Count\"],\n#                   x_name=\"Role\", y_name=\"Count\", \n#                   title=\"Male Role Count\", log=\"role1\", plot=\"bar\")\n# create_wandb_plot(x_data=role_woman[\"Role\"], \n#                   y_data=role_woman[\"Count\"],\n#                   x_name=\"Role\", y_name=\"Count\", \n#                   title=\"Female Role Count\", log=\"role2\", plot=\"bar\")\n# wandb.finish()","24b7b975":"# ========== Years coding ==========\ncols = [\"Year\", \"What is your gender? - Selected Choice\",\n        \"For how many years have you been writing code and\/or programming?\"]\nprogram = df[cols]\nprogram.columns = [\"Year\", \"Gender\", \"Years_Programming\"]\nprogram = program[program[\"Gender\"].isin([\"Man\", \"Woman\"])]\n\nold_code = ['5-10 years', '20+ years', '1-3 years', '< 1 years', '3-5 years',\n       '10-20 years', 'I have never written code', '1-2 years',\n       'I have never written code but I want to learn', '< 1 year',\n       '20-30 years', '30-40 years',\n       'I have never written code and I do not want to learn',\n       '40+ years', 'Less than a year', '3 to 5 years',\n       'More than 10 years', '6 to 10 years', '1 to 2 years',\n       \"I don't write code to analyze data\"]\nnew_code = ['5. 5-10 years', '7. 20+ years', '3. 1-3 years', '2. <1 years', '4. 3-5 years',\n       '6. 10-20 years', '1. Never', '3. 1-3 years',\n       '1. Never', '2. <1 years',\n       '7. 20+ years', '7. 20+ years',\n       '1. Never',\n       '7. 20+ years', '2. <1 years', '4. 3-5 years',\n       '6. 10-20 years', '5. 5-10 years', '3. 1-3 years',\n       \"1. Never\"]\nprogram[\"Years_Programming\"] = program[\"Years_Programming\"].replace(old_code,\n                                                                    new_code)\n\nprogram = program.value_counts().reset_index()\nprogram = pd.pivot(data=program, index=[\"Year\", \"Years_Programming\"],\n                   columns=\"Gender\", values=0).reset_index()\n\nprogram.columns = [\"year\", \"program\", \"male\", \"female\"]\nprogram.to_csv(\"program.csv\", index=False)\n\n# ========== Preferences ==========\ncols2 = [\"Year\", \"What is your gender? - Selected Choice\",\n         \"What programming language would you recommend an aspiring data scientist to learn first? - Selected Choice\"]\npref = df[cols2]\npref.columns = [\"Year\", \"Gender\", \"Preference\"]\npref = pref[pref[\"Gender\"].isin([\"Man\", \"Woman\"])]\n\nto_keep = list(pref[\"Preference\"].value_counts().index[:3])\npref = pref[pref[\"Preference\"].isin(to_keep)]\npref = pref.value_counts().reset_index()\n\npref = pd.merge(pref, total, on=[\"Year\", \"Gender\"])\npref[\"0\"] = pref[0] \/ pref[\"Count\"]\npref[\"0\"] = pref[\"0\"].apply(lambda x: round(x*100, 1))\npref.drop(columns=[0, \"Count\"], inplace=True)\n\npref = pd.pivot(data=pref, index=[\"Year\", \"Gender\"],\n                columns=[\"Preference\"], values=\"0\").reset_index()\npref = pref[[\"Year\", \"Gender\", \"Python\", \"R\", \"SQL\"]]\n\npref_man = pref[pref[\"Gender\"] == \"Man\"].drop(columns=[\"Gender\"])\npref_woman = pref[pref[\"Gender\"] == \"Woman\"].drop(columns=[\"Gender\"])\n\npref_man.to_csv(\"pref_man.csv\", index=False)\npref_woman.to_csv(\"pref_woman.csv\", index=False)\n\n# Save usa.png img as well\nim = imageio.imread('..\/input\/kaggle-data-science-survey-20172021\/images\/man7.png')\nImage.fromarray(im).save(\"man7.png\")\nim = imageio.imread('..\/input\/kaggle-data-science-survey-20172021\/images\/lady7.png')\nImage.fromarray(im).save(\"lady7.png\")\n\nhtmlt = '''\n<!-- Bootstrap -->\n<link rel=\"stylesheet\" href=\"https:\/\/stackpath.bootstrapcdn.com\/bootstrap\/4.4.1\/css\/bootstrap.min.css\" integrity=\"sha384-Vkoo8x4CGsO3+Hhxv8T\/Q5PaXtkKtu6ug5TOeNV6gBiFeWPGFN9MuhOf23Q9Ifjh\" crossorigin=\"anonymous\">\n<!-- Style -->\n<style>\n\t.all7 {\n\t\tfont-family: \"Times New Roman\", Times, serif;\n\t\toverflow-x: hidden;\n\t\twidth: 98%;\n\t\tbackground-color:#e0c9a6;\n\t\t\/* background-image : url(\"bkg.jpg\"); changed via js *\/\n\t}\n\t.svg-container {\n\t\tdisplay: inline-block;\n\t\tposition: relative;\n\t\twidth: 100%;\n\t\tpadding-bottom: 100%;\n\t\tvertical-align: top;\n\t\toverflow: hidden;\n\t}\n\t.svg-content {\n\t\tdisplay: inline-block;\n\t\tposition: absolute;\n\t\ttop: 0;\n\t\tleft: 0;\n\t}\n\n\t.axisHidden path{\n\t\tstroke: #e0c9a6;\n\t}\n\n\t.axisHidden line{\n\t\tstroke: #e0c9a6;\n\t}\n\n\t.annotation.color text {\n\t\tfill: #000000;\n\t}\n\n\t@font-face {\n\t\tfont-family: parklane;\n\t\tsrc: url(https:\/\/h4ks.net\/ParkLaneNF.otf);\n\t\t}\n\n\tdiv.tooltip-donut {\n\t\tposition: absolute;\n\t\ttext-align: center;\n\t\tpadding: .3rem;\n\t\tbackground: #FFFFFF;\n\t\tcolor: #000000;\n\t\tborder: 1px solid #000000;\n\t\tborder-radius: 8px;\n\t\tpointer-events: none;\n\t\tfont-size: 2rem;\n\t\tz-index: 99999;\n\t}\n\n<\/style>\n\n<img id=\"baseimg\" src=\"man.png\" style=\"display:none\" \/>\n<div class=\"all7\">\n\t<center><h1 style=\"font-family: parklane\">For how many years have we been programming?<\/h1><\/center>\n\t<label for=\"filter7\" style=\"font-size: 25px\">Select Year Here:<\/label>\n\t<select id=\"filter7\" style=\"font-size: 20px\">\n\t\t<option value=\"2021\">2021<\/option>\n\t\t<option value=\"2020\">2020<\/option>\n\t\t<option value=\"2019\">2019<\/option>\n\t\t<option value=\"2018\">2018<\/option>\n\t\t<option value=\"2017\">2017<\/option>\n\t  <\/select>\n\t<div class=\"row\">\n\t\t<div id=\"map7\" class=\"svg-container\"><\/div>\n\t<\/div>\n<\/div>\n'''\n\njs_t = '''\nrequire.config({\n  paths: {\n    d3src: \"https:\/\/d3js.org\/\",\n  },\n  map: {\n    '*': {\n      'd3v6': 'd3src\/d3.v6.min',\n      'd3-selection': 'd3src\/d3-selection.v1.min',\n      'd3-drag': 'd3src\/d3-drag.v1.min',\n      'd3-shape': 'd3src\/d3-shape.v1.min',\n      'd3-path': 'd3src\/d3-path.v1.min',\n      'd3-dispatch': 'd3src\/d3-dispatch.v1.min',\n      'd3-annotation': 'https:\/\/cdnjs.cloudflare.com\/ajax\/libs\/d3-annotation\/2.5.1\/d3-annotation.min.js',\n    }\n  }\n});\n\nrequire([\"d3v6\", \"d3-annotation\"], function(d3, d3Annotation) {\n\n\/\/ Inject d3Annotation methods to d3\nfor (var key in d3Annotation) {\n  d3[key] = d3Annotation[key];\n}\n\n\/\/ Get Assets URL set by Kaggle\nconst baseAssetsUrl = document.getElementById('baseimg').src.replace(\/man.png.*$\/, '');\n\nconst $all7 = document.getElementsByClassName('all7')[0];\n$all7.style.backgroundImage = `url(\"${baseAssetsUrl}bkg.jpg\")`;\n\n\/\/ Set the SVG area\nconst margin = { LEFT: 20, RIGHT: 40, TOP: 15, BOTTOM: 0 }\nconst width = 950 - margin.LEFT - margin.RIGHT\nconst height = 900 - margin.TOP - margin.BOTTOM\nconst centreSpacing = 100\n\nconst svg = d3.select(\"#map7\").append(\"svg\")\n  .attr(\"preserveAspectRatio\", \"xMinYMin meet\")\n  .attr(\"viewBox\", \"0 0 950 900\")\n  .classed(\"svg-content\", true)\n  .attr(\"transform\",\n   `translate(${margin.LEFT}, ${margin.TOP})`)\n\n\/\/ Gentleman\nsvg.append(\"image\")\n.attr(\"xlink:href\", baseAssetsUrl+\"man7.png\")\n    .attr(\"x\", \"-13%\")\n    .attr(\"y\", \"0%\")\n    .attr(\"width\", 420)\n    .attr(\"height\", 420)\n    .style(\"opacity\", 1)\n\n\/\/ Lady\nsvg.append(\"image\")\n.attr(\"xlink:href\", baseAssetsUrl+\"lady7.png\")\n.attr(\"x\", \"73%\")\n.attr(\"y\", \"2%\")\n.attr(\"width\", 360)\n.attr(\"height\", 360)\n.style(\"opacity\", 1)\n\n\/\/ Gradient\nconst defs = svg.append('defs');\n\nconst bgGradient1 = defs\n  .append('linearGradient')\n  .attr('id', 'bg-gradient1')\n\nbgGradient1\n  .append('stop')\n  .attr('stop-color', '#79A988')\n  .attr('offset', '0%');\nbgGradient1\n  .append('stop')\n  .attr('stop-color', '#487054')\n  .attr('offset', '100%');\n\nconst bgGradient2 = defs\n  .append('linearGradient')\n  .attr('id', 'bg-gradient3')\n\nbgGradient2\n  .append('stop')\n  .attr('stop-color', '#CE8E27')\n  .attr('offset', '0%');\nbgGradient2\n  .append('stop')\n  .attr('stop-color', '#DEA954')\n  .attr('offset', '100%');\n\n\/\/ ------ DEFAULTS ------\n\/\/ Initialize scales\nconst y = d3.scaleBand()\n.range([height\/2.7, 0])\n.padding(0.1)\n\nconst x = d3.scaleLinear()\n.range([0, (width - centreSpacing) \/ 2-150])\nconst xAxis = svg.append(\"g\")\n  .attr('transform', 'translate(165,' + (height-530) + ')')\n\nconst xReverse = d3.scaleLinear()\n.range([0, (width - centreSpacing) \/ 2-150])\nconst xAxisReverse = svg.append(\"g\")\n  .attr('transform', 'translate(515,' + (height-530) + ')')\n\n\n\/\/ Male + Female + Labels objects\nvar gM = svg.append(\"g\")\n  .attr(\"transform\", \n  \"translate(\" + 20 + \",\" + margin.TOP + \")\");\n\nvar gF = svg.append(\"g\")\n  .attr('transform',\n    'translate(' +\n      (margin.LEFT + (width - centreSpacing) \/ 2 + centreSpacing) +\n      \",\" +\n      margin.TOP +\n      \")\");\n\nvar gLabels = svg\n.append('g')\n.attr(\n  'transform',\n  'translate(' +\n    (margin.LEFT + (width - centreSpacing) \/ 2 + \n    ',' + margin.TOP + ')'));\n\n\n\/\/ === UPDATE ===\nfunction update(data) {\n\n  data.forEach(d => {\n    d.female = Number(d.female)\n    d.male = Number(d.male)\n  })\n\n  \/\/ Scales\n  y.domain(data.map(d => d.program))\n\n  const maxVal = d3.max(data, d => d3.max([d.male, d.female]))\n\n  x.domain([0, maxVal])\n  xReverse.domain([0, maxVal])\n\n  \n\n  \/\/ Male\n  gM.selectAll('rect')\n    .data(data)\n    .join('rect')\n    .transition()\n    .duration(1000)\n    .attr('x', d => (width - centreSpacing) \/ 2 - x(d.male))\n    .attr('y', d => y(d.program))\n    .attr('rx', 10)\n    .attr('ry', 10)\n    .attr('height', y.bandwidth())\n    .attr('width', d => x(d.male))\n    .style('fill', 'url(#bg-gradient1)');\n\n\n  \/\/ Female\n  gF.selectAll('rect')\n    .data(data)\n    .join('rect')\n    .transition()\n    .duration(1000)\n    .attr('x', 0)\n    .attr('y', d => y(d.program))\n    .attr('rx', 10)\n    .attr('ry', 10)\n    .attr('height', y.bandwidth())\n    .attr('width', d => x(d.female))\n    .style('fill', 'url(#bg-gradient3)');\n  \n\n  \/\/Labels\n  gLabels.selectAll('text')\n    .data(data)\n    .join('text')\n    .attr('x', centreSpacing \/ 2-45)\n    .attr('y', d => y(d.program) + y.bandwidth() \/ 2+5)\n    .style('font-weight', 600)\n    .text((d, i) => d.program);\n\n  gLabels\n    .append('text')\n    .text('Years programming')\n    .attr('x', centreSpacing \/ 2-90)\n    .attr('y', -0)\n    .style('font-size', '20px')\n    .style('font-weight', 600);\n\n\n  \/\/ Axis Update\n  xAxis\n    .transition()\n    .duration(1000)\n    .call(d3.axisBottom(x).ticks(3))\n    .selectAll(\"text\")\n      .attr(\"font-size\", \"15px\");\n\n  xAxisReverse\n    .transition()\n    .duration(1000)\n    .call(d3.axisBottom(xReverse).ticks(3))\n    .selectAll(\"text\")\n      .attr(\"font-size\", \"15px\");\n}\n\n\n\/\/ === Years Programming ===\nd3.csv(baseAssetsUrl + \"program.csv\").then(function(dataload){\n\n  \/\/ default view\n  var data = dataload.filter(function(d) { \n    var sq = d3.select(\"#filter7\").property(\"value\");\n    return d.year === sq;\n  });\n\n  update(data)\n\n\n  \/\/ on change\n  d3.select(\"#filter7\").on(\"change\", function() {\n\n    var data = dataload.filter(function(d) { \n      var sq = d3.select(\"#filter7\").property(\"value\");\n      return d.year === sq;\n    });\n\n    update(data);\n  });\n\n});\n\n\nfunction create_stacked_bar(data, subgroups, x_global, y_range, color) {\n\n  const groups = data.map(d => d.Year)\n\n  \/\/ Add X axis\n  const x = d3.scaleBand()\n      .domain(groups)\n      .range([0, width\/2.5])\n      .padding([0.2])\n  svg.append(\"g\")\n    .attr(\"transform\", `translate(${x_global}, ${height\/1.01})`)\n    .call(d3.axisBottom(x).tickSizeOuter(0))\n    .selectAll(\"text\")\n      .attr(\"y\", \"10\")\n      .attr(\"x\", \"0\")\n      .attr(\"font-size\", \"15px\")\n      .attr(\"font-weight\", 300)\n      .attr(\"text-anchor\", \"middle\")\n\n  \/\/ Add Y axis\n  const y = d3.scaleLinear()\n    .domain([0, y_range])\n    .range([ height\/2.3, 0]);\n  svg.append(\"g\")\n  .attr(\"class\", \"axisHidden\")\n  .attr(\"transform\", `translate(${x_global}, ${height\/1.85})`)\n    .call(d3.axisLeft(y).ticks(0))\n    .selectAll(\"text\")\n      .attr(\"font-size\", \"11px\")\n      .attr(\"font-weight\", 300);\n\n  \/\/s Stack data\n  const stackedData = d3.stack()\n    .keys(subgroups)\n    (data)\n\n  \/\/ Show the bars\n  const bars = svg.append(\"g\")\n    .selectAll(\"g\")\n    .data(stackedData)\n    .join(\"g\")\n    .attr(\"transform\", `translate(${x_global}, ${height\/1.85})`)\n      .attr(\"fill\", d => color(d.key))\n      .attr(\"stroke\", \"black\")\n      .attr(\"stroke-width\", 0.2)\n      .attr(\"class\", d => \"myRect \" + d.key ) \n      .selectAll(\"rect\")\n      .data(d => d)\n      .join(\"rect\")\n        .attr(\"x\", d => x(d.data.Year))\n        .attr(\"y\", d => y(d[1]))\n        .attr(\"height\", d => y(d[0]) - y(d[1]))\n        .attr(\"width\",x.bandwidth())\n\n  \/\/ Interactive\n  var div = d3.select(\"body\").append(\"div\")\n  .attr(\"class\", \"tooltip-donut\")\n  .style(\"opacity\", 0);\n\n  bars\n    .on('mouseenter', function (event, dt) {\n    \/\/ MOUSE ON\n    const subGroupName = d3.select(this.parentNode).datum().key \n          \n    d3.selectAll(\".myRect\").style(\"opacity\", 0.2)  \n          \n    d3.selectAll(\".\"+subGroupName).style(\"opacity\",1)\n\n\n    \/\/ Makes the new div appear\n    div.transition()\n        .duration(50)\n        .style(\"opacity\", 1);\n\n    const subgroupName = d3.select(this.parentNode).datum().key;\n    const subgroupValue = dt.data[subgroupName];\n\n    div.html(\"Language: \" + subgroupName + \"<br>\" + \"Perc: \" + subgroupValue +\"%\")\n        .style(\"left\", (event.pageX) + \"px\")\n        .style(\"top\", (event.pageY-30) + \"px\");\n\n\n  })\n    \/\/ MOUSE LEAVE\n    .on('mouseleave', function () {\n      d3.selectAll(\".myRect\")\n          .style(\"opacity\",1) \n\n      \/\/ New div dissapears\n      div.transition()\n          .duration('50')\n          .style(\"opacity\", 0);\n      svg.selectAll('.divergence').remove()\n    })\n\n}\n\n\n\/\/ === Preferences ===\nd3.csv(baseAssetsUrl + \"pref_man.csv\").then(function(data){\n\n  const x_global = 50\n  const y_range = 100\n  const subgroups = data.columns.slice(1)\n  const color = d3.scaleOrdinal()\n    .domain(subgroups)\n    .range([\"#385742\", \"#5F9571\", \"#9BBFA7\"]);\n\n  svg.append(\"text\")\n  .attr(\"y\", \"55%\")\n  .attr(\"x\", \"25%\")\n  .attr(\"font-size\", \"22px\")\n  .attr(\"text-anchor\", \"middle\")\n  .attr(\"font-weight\", 600)\n  .text(\"Gentlemen Recommendation\")\n\n  create_stacked_bar(data, subgroups, x_global, y_range, color)\n  \n});\n\nd3.csv(baseAssetsUrl + \"pref_woman.csv\").then(function(data){\n\n  const x_global = 500\n  const y_range = 100\n  const subgroups = data.columns.slice(1)\n  const color = d3.scaleOrdinal()\n    .domain(subgroups)\n    .range([\"#CE8E27\", \"#DEA954\", \"#E8C387\"]);\n\n  svg.append(\"text\")\n  .attr(\"y\", \"55%\")\n  .attr(\"x\", \"70%\")\n  .attr(\"font-size\", \"22px\")\n  .attr(\"text-anchor\", \"middle\")\n  .attr(\"font-weight\", 600)\n  .text(\"Ladies Recommendation\")\n\n  create_stacked_bar(data, subgroups, x_global, y_range, color)\n  \n});\n\n});\n'''\n\n\nh = display(HTML(htmlt))\nj = py_display.Javascript(js_t)\npy_display.display_javascript(j)","ca917ef3":"# # Save to W&B\n# run = wandb.init(project='kaggle-survey-2021', name='lang_eda', \n#                  config=CONFIG, anonymous=\"allow\")\n# man, woman = wb_prep_data(pref)\n# create_wandb_plot(x_data=man[\"Category\"], \n#                   y_data=man[\"Count\"],\n#                   x_name=\"Language Pref\", y_name=\"Count\", \n#                   title=\"Gentlemen: Language Preferences\", log=\"pref1\", plot=\"bar\")\n# create_wandb_plot(x_data=woman[\"Category\"], \n#                   y_data=woman[\"Count\"],\n#                   x_name=\"Language Pref\", y_name=\"Count\", \n#                   title=\"Ladies: Language Preferences\", log=\"pref2\", plot=\"bar\")\n# wandb.finish()","09a8cb5f":"cols = list(df.columns[8:19])\ncols.extend([\"Year\", \"What is your gender? - Selected Choice\"])\n\nlangs = df[cols]\nlangs.columns = [\"Python\", \"R\", \"SQL\", \"C\", \"C++\", \"Java\",\n                 \"Javascript\", \"Julia\", \"Swift\", \"Bash\", \"MATLAB\",\n                 \"Year\", \"Gender\"]\nlangs = langs[langs[\"Gender\"].isin([\"Man\", \"Woman\"])]\nlangs = langs[langs[\"Year\"]!=2017]\n\nlangs = langs.groupby([\"Year\", \"Gender\"]).count().reset_index()\nlangs = pd.merge(langs, total, on=[\"Year\", \"Gender\"])\n\ncols_perc = list(langs.columns[2:-1])\nfor c in cols_perc:\n    langs[c] = langs[c]\/langs[\"Count\"] * 100\n    langs[c] = langs[c].apply(lambda x: round(x, 1))\nlangs.drop(columns=\"Count\", inplace=True)\n\nlangs_man = langs[langs[\"Gender\"] == \"Man\"].drop(columns=[\"Gender\", \"Julia\", \"Swift\"])\nlangs_woman = langs[langs[\"Gender\"] == \"Woman\"].drop(columns=[\"Gender\", \"Julia\", \"Swift\"])\n\nlangs_man.to_csv(\"langs_man.csv\", index=False)\nlangs_woman.to_csv(\"langs_woman.csv\", index=False)\n\n# Save usa.png img as well\nim = imageio.imread('..\/input\/kaggle-data-science-survey-20172021\/images\/man8.png')\nImage.fromarray(im).save(\"man8.png\")\n\nim = imageio.imread('..\/input\/kaggle-data-science-survey-20172021\/images\/lady8.png')\nImage.fromarray(im).save(\"lady8.png\")\n\nhtmlt = '''\n<!-- Bootstrap -->\n<link rel=\"stylesheet\" href=\"https:\/\/stackpath.bootstrapcdn.com\/bootstrap\/4.4.1\/css\/bootstrap.min.css\" integrity=\"sha384-Vkoo8x4CGsO3+Hhxv8T\/Q5PaXtkKtu6ug5TOeNV6gBiFeWPGFN9MuhOf23Q9Ifjh\" crossorigin=\"anonymous\">\n<!-- Style -->\n<style>\n\t.all8 {\n\t\tfont-family: \"Times New Roman\", Times, serif;\n\t\toverflow-x: hidden;\n\t\twidth: 98%;\n\t\tbackground-color:#e0c9a6;\n\t\t\/* background-image : url(\"bkg.jpg\"); changed via js *\/\n\t}\n\t.all8 .svg-container {\n\t\tdisplay: inline-block;\n\t\tposition: relative;\n\t\twidth: 100%;\n\t\tpadding-bottom: 54%;\n\t\tvertical-align: top;\n\t\toverflow: hidden;\n\t}\n\t.svg-content {\n\t\tdisplay: inline-block;\n\t\tposition: absolute;\n\t\ttop: 0;\n\t\tleft: 0;\n\t}\n\n\t.axisHidden path{\n\t\tstroke: #e0c9a6;\n\t}\n\n\t.axisHidden line{\n\t\tstroke: #e0c9a6;\n\t}\n\n\t.annotation.color text {\n\t\tfill: #000000;\n\t}\n\n\t@font-face {\n\t\tfont-family: parklane;\n\t\tsrc: url(https:\/\/h4ks.net\/ParkLaneNF.otf);\n\t\t}\n\n\tdiv.tooltip-donut {\n\t\tposition: absolute;\n\t\ttext-align: center;\n\t\tpadding: .3rem;\n\t\tbackground: #FFFFFF;\n\t\tcolor: #000000;\n\t\tborder: 1px solid #000000;\n\t\tborder-radius: 8px;\n\t\tpointer-events: none;\n\t\tfont-size: 2rem;\n\t\tz-index: 99999;\n\t}\n\n<\/style>\n\n<img id=\"baseimg\" src=\"man.png\" style=\"display:none\" \/>\n<div class=\"all8\">\n\t<center><h1 style=\"font-family: parklane\">Evolution of language<\/h1><\/center>\n\t<center><h3><i>- What are the most used programming languages? -<\/i><\/h3><\/center>\n\t<div class=\"row\">\n\t\t<div id=\"map8-gents\" class=\"svg-container\"><\/div>\n\t<\/div>\n\n\t<div class=\"row\">\n\t\t<div id=\"map8-ladies\" class=\"svg-container\"><\/div>\n\t<\/div>\n<\/div>\n'''\n\njs_t = '''\nrequire.config({\n  paths: {\n    d3src: \"https:\/\/d3js.org\/\",\n  },\n  map: {\n    '*': {\n      'd3v6': 'd3src\/d3.v6.min',\n      'd3-selection': 'd3src\/d3-selection.v1.min',\n      'd3-drag': 'd3src\/d3-drag.v1.min',\n      'd3-shape': 'd3src\/d3-shape.v1.min',\n      'd3-path': 'd3src\/d3-path.v1.min',\n      'd3-dispatch': 'd3src\/d3-dispatch.v1.min',\n      'd3-annotation': 'https:\/\/cdnjs.cloudflare.com\/ajax\/libs\/d3-annotation\/2.5.1\/d3-annotation.min.js',\n    }\n  }\n});\n\nrequire([\"d3v6\", \"d3-annotation\"], function(d3, d3Annotation) {\n\n\/\/ Inject d3Annotation methods to d3\nfor (var key in d3Annotation) {\n  d3[key] = d3Annotation[key];\n}\n\n\/\/ Get Assets URL set by Kaggle\nconst baseAssetsUrl = document.getElementById('baseimg').src.replace(\/man.png.*$\/, '');\n\nconst $all8 = document.getElementsByClassName('all8')[0];\n$all8.style.backgroundImage = `url(\"${baseAssetsUrl}bkg.jpg\")`;\n\n\/\/ Set the SVG area\nconst margin = { LEFT: 20, RIGHT: 40, TOP: 15, BOTTOM: 0 }\nconst width = 950 - margin.LEFT - margin.RIGHT\nconst height = 500 - margin.TOP - margin.BOTTOM\nconst chart_size = 150\nconst x_global = 150\n\nfunction create_graph(data, svg, name){\n\n  const XY_axis = height\/2-200\n\n  svg.append(\"text\")\n  .attr(\"transform\", `translate(${x_global-60}, ${XY_axis-10})`)\n  .attr(\"font-size\", \"24px\")\n  .attr(\"text-anchor\", \"middle\")\n  .attr(\"font-weight\", 600)\n  .text(name)\n\n  data.forEach(d => {\n    d.Year = Number(d.Year)\n  })\n\n  \/\/ List of groups\n  var keys = data.columns.slice(1)\n\n  \/\/ Stacking\n  var series = d3.stack()\n    .keys(keys)\n    .offset(d3.stackOffsetSilhouette)\n    (data)\n\n  \/\/ X Axis\n  var x = d3.scaleLinear()\n    .domain(d3.extent(data, d => d.Year))\n    .range([0, width\/1.5])\n\n  var xAxis = g => g\n    .attr(\"transform\", `translate(${x_global}, ${XY_axis})`)\n    .call(d3.axisBottom(x)\n            .tickSize(height\/1.2).ticks(4).tickFormat(d3.format(\"d\")))\n    .call(g => g.select(\".domain\").remove())\n    .call(g => g.selectAll(\".tick line\")\n                .attr(\"stroke\", \"#3A3A3A\")\n                .attr('stroke-dasharray', '5 5'))\n    .call(g => g.selectAll(\".tick\")\n                .select('text')\n                .attr('fill', \"#3A3A3A\")\n                .style(\"font-size\", 15))\n\n  \/\/ Y Axis\n  var y = d3.scaleLinear()\n  .domain([-chart_size, chart_size])\n  .range([height\/1.2, 0])\n  svg.append(\"g\")\n  .attr(\"class\", \"axisHidden\")\n  .attr(\"transform\", `translate(${x_global}, ${XY_axis})`)\n    .call(d3.axisLeft(y).ticks(0))\n\n  \/\/ Area Chart\n  var area = d3.area()\n  .x(d => x(d.data.Year))\n  .y0(d => y(d[0]))\n  .y1(d => y(d[1]))\n\n  \/\/ Color\n  const color = d3.scaleOrdinal()\n    .domain(keys)\n    .range([\"#D67A83\", \"#D05257\", \"#D87F58\", \"#CE8E27\",\n     \"#5F9571\", \"#12A6B6\", \"#74A5D2\", \"#226BBF\", \"#5D1D46\"])\n\n  \/\/ Show\n  const path = svg.append(\"g\")\n    .selectAll(\"path\")\n    .data(series)\n    .join(\"path\")\n    .attr(\"transform\", `translate(${x_global}, ${XY_axis})`)\n      .attr(\"data-label\", d => d.key)\n      .attr(\"fill\", ({key}) => color(key))\n      .attr(\"stroke\", \"black\")\n      .attr(\"stroke-width\", 0.3)\n      .attr(\"d\", area)\n      .attr(\"opacity\", 0.8)\n\n  svg.append(\"g\")\n      .call(xAxis)\n\n  \/\/ ==== Interactive ====\n  const hover = (svg, path) => {\n  \n    const line = svg.append(\"g\")\n         .attr(\"display\", \"none\");\n  \n    line.append(\"g\")\n        .selectAll(\"line\")\n        .data(series)\n        .join(\"line\")\n        .attr(\"class\", \"cursor-line\")\n        .attr(\"fill\", \"#fff\")\n        .attr(\"stroke-width\", 0.8)\n        .attr(\"x1\", 10)\n        .attr(\"y1\", height)\n        .attr(\"x2\", 10)\n        .attr(\"y2\", 10);\n\n    line.append(\"text\")\n      .attr(\"class\", \"text-year\")\n      .attr(\"font-size\", 14)\n      .attr(\"x\", 0)\n      .attr(\"y\", 26)\n      .attr(\"transform\", \"rotate(-90 20 20) translate(0, -20)\");\n    \n    line.append(\"g\")\n        .selectAll(\"text\")\n        .data(series)\n        .join(\"text\")\n        .attr(\"class\", \"text-label\")\n        .attr(\"font-weight\", 900)\n        .attr(\"font-size\", 17)\n        .attr(\"y\", height-10)\n        .attr(\"x\", -8)\n        .attr(\"transform\", \n        \"rotate(-90 10 460)\");\n\n    line.append(\"g\")\n        .selectAll(\"text\")\n        .data(data)\n        .join(\"text\")\n        .attr(\"class\", \"text-value\")\n        .attr(\"font-weight\", 700)\n        .attr(\"font-size\", 14)\n        .attr(\"y\", height-(height*0.94))\n        .attr(\"x\", 14);\n\n    const mousemove = (event) => {\n  \n      event?.preventDefault();\n      const pointer = d3.pointer(event);\n\n      const xm = x.invert(pointer[0]);\n      const label = d3.select(event.target).attr(\"data-label\");\n  \n      line.attr(\"transform\", `translate(${pointer[0]}, 0)`)\n          .style(\"visibility\", \"inherit\");\n    \n          line.select(\".text-year\")\n          .text(parseInt(xm));\n      \n      line.selectAll(\".text-value\")\n        .text(d => d.Year === parseInt(xm) ? d[label]+\"%\" : \"\");\n\n      line.selectAll(\".text-label\")\n        .style(\"visibility\", \"hidden\")\n        .filter(d => d.key === label)\n        .style(\"visibility\", \"inherit\")\n        .attr(\"fill\", d => d.key === label ? color(d.key) : \"#000\")\n        .text(label);\n      \n      line.selectAll(\".cursor-line\")\n        .attr(\"stroke\", \"fff0\")\n        .filter(d => d.key === label)\n        .attr(\"stroke\", d => d.key === label ? color(d.key) : \"#fff0\")\n      \n      path.attr(\"opacity\", d => d.key === label ? 0.8 : 0.3);\n      \n      if (label === null) {\n        path.attr(\"opacity\", 0.8);\n        line.style(\"visibility\", \"hidden\");\n      }\n    }\n\n    const mouseenter = () => {\n      line.attr(\"display\", null);\n    }\n  \n    const mouseleave = () => {\n      line.attr(\"display\", \"none\");\n    }\n\n    svg\n        .on(\"mousemove\", mousemove)\n        .on(\"mouseenter\", mouseenter)\n        .on(\"mouseleave\", mouseleave)\n\n  }\n\n  svg.call(hover, path);\n}\n\n\/\/ ===== MEN =====\nconst svg1 = d3.select(\"#map8-gents\").append(\"svg\")\n\/\/ .attr(\"style\", \"outline: thin solid red;\")\n  .attr(\"preserveAspectRatio\", \"xMinYMin meet\")\n  .attr(\"viewBox\", \"0 0 950 500\")\n  .classed(\"svg-content\", true)\n  .attr(\"transform\",\n   `translate(${margin.LEFT}, ${margin.TOP})`)\n\n\/\/ Gentleman\nsvg1.append(\"image\")\n.attr(\"xlink:href\", baseAssetsUrl+\"man8.png\")\n    .attr(\"x\", \"-12%\")\n    .attr(\"y\", \"13%\")\n    .attr(\"width\", 370)\n    .attr(\"height\", 370)\n    .style(\"opacity\", 1)\n\n\/\/ Comment\nconst annot1 = [\n  {\n  note: { \n    label: \"Have been increasing in popularity (for both men and women).\",\n    title: \"C & C++\",\n    wrap: 100, \n    padding: 5, \n  },\n  className: \"color\",\n  connector: { end: \"arrow\" },\n  color: [\"#ffffff\"],\n  x: 755,\n  y: 190,\n  dy: +35,\n  dx: +30\n}]\n\nsvg1.append(\"g\")\n  .style('font-size', 17)\n  .call(d3.annotation()\n          .annotations(annot1))\n\nd3.csv(baseAssetsUrl + \"langs_man.csv\").then(function(data){\n\n  const name = \"Gentlemen\"\n  create_graph(data, svg1, name)\n\n});\n\n\/\/ ===== WOMEN =====\nconst svg2 = d3.select(\"#map8-ladies\").append(\"svg\")\n\/\/ .attr(\"style\", \"outline: thin solid red;\")\n.attr(\"preserveAspectRatio\", \"xMinYMin meet\")\n.attr(\"viewBox\", \"0 0 950 500\")\n.classed(\"svg-content\", true)\n.attr(\"transform\",\n  `translate(${margin.LEFT}, ${margin.TOP})`)\n\n\/\/ Lady\nsvg2.append(\"image\")\n.attr(\"xlink:href\", baseAssetsUrl+\"lady8.png\")\n.attr(\"x\", \"-17%\")\n.attr(\"y\", \"2%\")\n.attr(\"width\", 510)\n.attr(\"height\", 510)\n.style(\"opacity\", 1)\n\n\/\/ Comment\nconst annot2 = [\n  {\n  note: { \n    label: \"Has been decreasing in popularity (for both genders).\",\n    title: \"R\",\n    wrap: 100, \n    padding: 5, \n  },\n  className: \"color\",\n  connector: { end: \"arrow\" },\n  color: [\"#ffffff\"],\n  x: 755,\n  y: 280,\n  dy: -35,\n  dx: +30\n}]\n\nsvg2.append(\"g\")\n  .style('font-size', 17)\n  .call(d3.annotation()\n          .annotations(annot2))\n\nd3.csv(baseAssetsUrl + \"langs_woman.csv\").then(function(data){\n\n  const name = \"Ladies\"\n  create_graph(data, svg2, name)\n\n});\n\n});\n'''\n\n\nh = display(HTML(htmlt))\nj = py_display.Javascript(js_t)\npy_display.display_javascript(j)","5d54b9e7":"cols = list(df.columns[22:31])\nnew_names = [\"Jupyter\", \"RStudio\", \"Visual Studio\", \"PyCharm\",\n             \"Spyder\", \"Notepad++\", \"Sublime Text\", \"Vim\/Emacs\",\n             \"MATLAB\"]\n\nide = get_data_multiple_answers(cols, new_names)\nide = ide[ide[\"Year\"]!=2017]\n\nide_man = ide[ide[\"Gender\"] == \"Man\"].drop(columns=[\"Gender\"])\nide_woman = ide[ide[\"Gender\"] == \"Woman\"].drop(columns=[\"Gender\"])\n\nide_man.to_csv(\"ide_man.csv\", index=False)\nide_woman.to_csv(\"ide_woman.csv\", index=False)\n\n# Save usa.png img as well\nim = imageio.imread('..\/input\/kaggle-data-science-survey-20172021\/images\/man9.png')\nImage.fromarray(im).save(\"man9.png\")\n\nim = imageio.imread('..\/input\/kaggle-data-science-survey-20172021\/images\/lady9.png')\nImage.fromarray(im).save(\"lady9.png\")\n\nhtmlt = '''\n<!-- Bootstrap -->\n<link rel=\"stylesheet\" href=\"https:\/\/stackpath.bootstrapcdn.com\/bootstrap\/4.4.1\/css\/bootstrap.min.css\" integrity=\"sha384-Vkoo8x4CGsO3+Hhxv8T\/Q5PaXtkKtu6ug5TOeNV6gBiFeWPGFN9MuhOf23Q9Ifjh\" crossorigin=\"anonymous\">\n<!-- Style -->\n<style>\n\t.all9 {\n\t\tfont-family: \"Times New Roman\", Times, serif;\n\t\toverflow-x: hidden;\n\t\twidth: 98%;\n\t\tbackground-color:#e0c9a6;\n\t\t\/* background-image : url(\"bkg.jpg\"); changed via js *\/\n\t}\n\t.all9 .svg-container {\n\t\tdisplay: inline-block;\n\t\tposition: relative;\n\t\twidth: 100%;\n\t\tpadding-bottom: 54%;\n\t\tvertical-align: top;\n\t\toverflow: hidden;\n\t}\n\t.svg-content {\n\t\tdisplay: inline-block;\n\t\tposition: absolute;\n\t\ttop: 0;\n\t\tleft: 0;\n\t}\n\n\t.axisHidden path{\n\t\tstroke: #e0c9a6;\n\t}\n\n\t.axisHidden line{\n\t\tstroke: #e0c9a6;\n\t}\n\n\t.annotation.color text {\n\t\tfill: #000000;\n\t}\n\n\t@font-face {\n\t\tfont-family: parklane;\n\t\tsrc: url(https:\/\/h4ks.net\/ParkLaneNF.otf);\n\t\t}\n\n\tdiv.tooltip-donut {\n\t\tposition: absolute;\n\t\ttext-align: center;\n\t\tpadding: .3rem;\n\t\tbackground: #FFFFFF;\n\t\tcolor: #000000;\n\t\tborder: 1px solid #000000;\n\t\tborder-radius: 8px;\n\t\tpointer-events: none;\n\t\tfont-size: 2rem;\n\t\tz-index: 99999;\n\t}\n\n<\/style>\n\n<img id=\"baseimg\" src=\"man.png\" style=\"display:none\" \/>\n<div class=\"all9\">\n\t<center><h1 style=\"font-family: parklane\">Evolution of the Environment<\/h1><\/center>\n\t<center><h3><i>- What's the best Data Science set-up? -<\/i><\/h3><\/center>\n\t<div class=\"row\">\n\t\t<div id=\"map9-gents\" class=\"svg-container\"><\/div>\n\t<\/div>\n\n\t<div class=\"row\">\n\t\t<div id=\"map9-ladies\" class=\"svg-container\"><\/div>\n\t<\/div>\n<\/div>\n'''\n\njs_t = '''\nrequire.config({\n  paths: {\n    d3src: \"https:\/\/d3js.org\/\",\n  },\n  map: {\n    '*': {\n      'd3v6': 'd3src\/d3.v6.min',\n      'd3-selection': 'd3src\/d3-selection.v1.min',\n      'd3-drag': 'd3src\/d3-drag.v1.min',\n      'd3-shape': 'd3src\/d3-shape.v1.min',\n      'd3-path': 'd3src\/d3-path.v1.min',\n      'd3-dispatch': 'd3src\/d3-dispatch.v1.min',\n      'd3-annotation': 'https:\/\/cdnjs.cloudflare.com\/ajax\/libs\/d3-annotation\/2.5.1\/d3-annotation.min.js',\n    }\n  }\n});\n\nrequire([\"d3v6\", \"d3-annotation\"], function(d3, d3Annotation) {\n\n\/\/ Inject d3Annotation methods to d3\nfor (var key in d3Annotation) {\n  d3[key] = d3Annotation[key];\n}\n\n\/\/ Get Assets URL set by Kaggle\nconst baseAssetsUrl = document.getElementById('baseimg').src.replace(\/man.png.*$\/, '');\n\nconst $all9 = document.getElementsByClassName('all9')[0];\n$all9.style.backgroundImage = `url(\"${baseAssetsUrl}bkg.jpg\")`;\n\n\/\/ Set the SVG area\nconst margin = { LEFT: 20, RIGHT: 40, TOP: 15, BOTTOM: 0 }\nconst width = 950 - margin.LEFT - margin.RIGHT\nconst height = 500 - margin.TOP - margin.BOTTOM\nconst chart_size = 150\nconst x_global = 150\n\nfunction create_graph(data, svg, name){\n\n  const XY_axis = height\/2-200\n\n  svg.append(\"text\")\n  .attr(\"transform\", `translate(${x_global-60}, ${XY_axis-10})`)\n  .attr(\"font-size\", \"24px\")\n  .attr(\"text-anchor\", \"middle\")\n  .attr(\"font-weight\", 600)\n  .text(name)\n\n  data.forEach(d => {\n    d.Year = Number(d.Year)\n  })\n\n  \/\/ List of groups\n  var keys = data.columns.slice(1)\n\n  \/\/ Stacking\n  var series = d3.stack()\n    .keys(keys)\n    .offset(d3.stackOffsetSilhouette)\n    (data)\n\n  \/\/ X Axis\n  var x = d3.scaleLinear()\n    .domain(d3.extent(data, d => d.Year))\n    .range([0, width\/1.5])\n\n  var xAxis = g => g\n    .attr(\"transform\", `translate(${x_global}, ${XY_axis})`)\n    .call(d3.axisBottom(x)\n            .tickSize(height\/1.2).ticks(4).tickFormat(d3.format(\"d\")))\n    .call(g => g.select(\".domain\").remove())\n    .call(g => g.selectAll(\".tick line\")\n                .attr(\"stroke\", \"#3A3A3A\")\n                .attr('stroke-dasharray', '5 5'))\n    .call(g => g.selectAll(\".tick\")\n                .select('text')\n                .attr('fill', \"#3A3A3A\")\n                .style(\"font-size\", 15))\n\n  \/\/ Y Axis\n  var y = d3.scaleLinear()\n  .domain([-chart_size, chart_size])\n  .range([height\/1.2, 0])\n  svg.append(\"g\")\n  .attr(\"class\", \"axisHidden\")\n  .attr(\"transform\", `translate(${x_global}, ${XY_axis})`)\n    .call(d3.axisLeft(y).ticks(0))\n\n  \/\/ Area Chart\n  var area = d3.area()\n  .x(d => x(d.data.Year))\n  .y0(d => y(d[0]))\n  .y1(d => y(d[1]))\n\n  \/\/ Color\n  const color = d3.scaleOrdinal()\n    .domain(keys)\n    .range([\"#D67A83\", \"#D05257\", \"#D87F58\", \"#CE8E27\",\n     \"#5F9571\", \"#12A6B6\", \"#74A5D2\", \"#226BBF\", \"#5D1D46\"])\n\n  \/\/ Show\n  const path = svg.append(\"g\")\n    .selectAll(\"path\")\n    .data(series)\n    .join(\"path\")\n    .attr(\"transform\", `translate(${x_global}, ${XY_axis})`)\n      .attr(\"data-label\", d => d.key)\n      .attr(\"fill\", ({key}) => color(key))\n      .attr(\"stroke\", \"black\")\n      .attr(\"stroke-width\", 0.2)\n      .attr(\"d\", area)\n      .attr(\"opacity\", 0.8)\n\n  svg.append(\"g\")\n      .call(xAxis)\n\n  \/\/ ==== Interactive ====\n  const hover = (svg, path) => {\n  \n    const line = svg.append(\"g\")\n         .attr(\"display\", \"none\");\n  \n    line.append(\"g\")\n        .selectAll(\"line\")\n        .data(series)\n        .join(\"line\")\n        .attr(\"class\", \"cursor-line\")\n        .attr(\"fill\", \"#fff\")\n        .attr(\"stroke-width\", 0.8)\n        .attr(\"x1\", 10)\n        .attr(\"y1\", height)\n        .attr(\"x2\", 10)\n        .attr(\"y2\", 10);\n\n    line.append(\"text\")\n      .attr(\"class\", \"text-year\")\n      .attr(\"font-size\", 14)\n      .attr(\"x\", 0)\n      .attr(\"y\", 26)\n      .attr(\"transform\", \"rotate(-90 20 20) translate(0, -20)\");\n    \n    line.append(\"g\")\n        .selectAll(\"text\")\n        .data(series)\n        .join(\"text\")\n        .attr(\"class\", \"text-label\")\n        .attr(\"font-weight\", 900)\n        .attr(\"font-size\", 17)\n        .attr(\"y\", height-10)\n        .attr(\"x\", -8)\n        .attr(\"transform\", \n        \"rotate(-90 10 460)\");\n\n    line.append(\"g\")\n        .selectAll(\"text\")\n        .data(data)\n        .join(\"text\")\n        .attr(\"class\", \"text-value\")\n        .attr(\"font-weight\", 700)\n        .attr(\"font-size\", 14)\n        .attr(\"y\", height-(height*0.94))\n        .attr(\"x\", 14);\n\n    const mousemove = (event) => {\n  \n      event?.preventDefault();\n      const pointer = d3.pointer(event);\n\n      const xm = x.invert(pointer[0]);\n      const label = d3.select(event.target).attr(\"data-label\");\n  \n      line.attr(\"transform\", `translate(${pointer[0]}, 0)`)\n          .style(\"visibility\", \"inherit\");\n    \n          line.select(\".text-year\")\n          .text(parseInt(xm));\n      \n      line.selectAll(\".text-value\")\n        .text(d => d.Year === parseInt(xm) ? d[label]+\"%\" : \"\");\n\n      line.selectAll(\".text-label\")\n        .style(\"visibility\", \"hidden\")\n        .filter(d => d.key === label)\n        .style(\"visibility\", \"inherit\")\n        .attr(\"fill\", d => d.key === label ? color(d.key) : \"#000\")\n        .text(label);\n      \n      line.selectAll(\".cursor-line\")\n        .attr(\"stroke\", \"fff0\")\n        .filter(d => d.key === label)\n        .attr(\"stroke\", d => d.key === label ? color(d.key) : \"#fff0\")\n      \n      path.attr(\"opacity\", d => d.key === label ? 0.8 : 0.3);\n      \n      if (label === null) {\n        path.attr(\"opacity\", 0.8);\n        line.style(\"visibility\", \"hidden\");\n      }\n    }\n\n    const mouseenter = () => {\n      line.attr(\"display\", null);\n    }\n  \n    const mouseleave = () => {\n      line.attr(\"display\", \"none\");\n    }\n\n    svg\n        .on(\"mousemove\", mousemove)\n        .on(\"mouseenter\", mouseenter)\n        .on(\"mouseleave\", mouseleave)\n\n  }\n\n  svg.call(hover, path);\n}\n\n\/\/ ===== MEN =====\nconst svg1 = d3.select(\"#map9-gents\").append(\"svg\")\n\/\/ .attr(\"style\", \"outline: thin solid red;\")\n  .attr(\"preserveAspectRatio\", \"xMinYMin meet\")\n  .attr(\"viewBox\", \"0 0 950 500\")\n  .classed(\"svg-content\", true)\n  .attr(\"transform\",\n   `translate(${margin.LEFT}, ${margin.TOP})`)\n\n\/\/ Gentleman\nsvg1.append(\"image\")\n.attr(\"xlink:href\", baseAssetsUrl+\"man9.png\")\n    .attr(\"x\", \"-17%\")\n    .attr(\"y\", \"12%\")\n    .attr(\"width\", 450)\n    .attr(\"height\", 450)\n    .style(\"opacity\", 1)\n\n\/\/ Comment\nconst annot1 = [\n  {\n  note: { \n    label: \"Got discovered by Data Scientists and increased in popularity significantly in 2021.\",\n    title: \"Visual Studio\",\n    wrap: 100, \n    padding: 5, \n  },\n  className: \"color\",\n  connector: { end: \"arrow\" },\n  color: [\"#ffffff\"],\n  x: 755,\n  y: 270,\n  dy: -35,\n  dx: +30\n}]\n\nsvg1.append(\"g\")\n  .style('font-size', 17)\n  .call(d3.annotation()\n          .annotations(annot1))\n\nd3.csv(baseAssetsUrl + \"ide_man.csv\").then(function(data){\n\n  const name = \"Gentlemen\"\n  create_graph(data, svg1, name)\n\n});\n\n\/\/ ===== WOMEN =====\nconst svg2 = d3.select(\"#map9-ladies\").append(\"svg\")\n\/\/ .attr(\"style\", \"outline: thin solid red;\")\n.attr(\"preserveAspectRatio\", \"xMinYMin meet\")\n.attr(\"viewBox\", \"0 0 950 500\")\n.classed(\"svg-content\", true)\n.attr(\"transform\",\n  `translate(${margin.LEFT}, ${margin.TOP})`)\n\n\/\/ Lady\nsvg2.append(\"image\")\n.attr(\"xlink:href\", baseAssetsUrl+\"lady9.png\")\n.attr(\"x\", \"-15%\")\n.attr(\"y\", \"8%\")\n.attr(\"width\", 450)\n.attr(\"height\", 430)\n.style(\"opacity\", 450)\n\n\/\/ Comment\nconst annot2 = [\n  {\n  note: { \n    label: \"In comparison, Jupyter has been losing it's traction and in 2021 decreased in popularity for both genders.\",\n    title: \"Jupyter\",\n    wrap: 100, \n    padding: 5, \n  },\n  className: \"color\",\n  connector: { end: \"arrow\" },\n  color: [\"#ffffff\"],\n  x: 755,\n  y: 330,\n  dy: -35,\n  dx: +30\n}]\n\nsvg2.append(\"g\")\n  .style('font-size', 17)\n  .call(d3.annotation()\n          .annotations(annot2))\n\nd3.csv(baseAssetsUrl + \"ide_woman.csv\").then(function(data){\n\n  const name = \"Ladies\"\n  create_graph(data, svg2, name)\n\n});\n\n});\n'''\n\n\nh = display(HTML(htmlt))\nj = py_display.Javascript(js_t)\npy_display.display_javascript(j)","bdeaa510":"cols = list(df.columns[[33, 34, 35, 36, 37, 45]])\nnew_names = [\"Kaggle\", \"Colab\", \"Azure\", \"Paperspace\/Gradient\",\n             \"Binder\/ Jupyter Hub\", \"None\"]\n\nhosted = get_data_multiple_answers(cols, new_names)\nhosted = hosted[hosted[\"Year\"]!=2017]\n\nhosted_man = hosted[hosted[\"Gender\"] == \"Man\"].drop(columns=[\"Gender\"])\nhosted_woman = hosted[hosted[\"Gender\"] == \"Woman\"].drop(columns=[\"Gender\"])\n\nhosted_man = hosted_man.sort_values(hosted_man.last_valid_index(), axis=1,\n                    ascending=False)\nhosted_woman = hosted_woman.sort_values(hosted_woman.last_valid_index(), axis=1,\n                    ascending=False)\n\nhosted_man.to_csv(\"hosted_man.csv\", index=False)\nhosted_woman.to_csv(\"hosted_woman.csv\", index=False)\n\n# Save usa.png img as well\nim = imageio.imread('..\/input\/kaggle-data-science-survey-20172021\/images\/man10.png')\nImage.fromarray(im).save(\"man10.png\")\n\nim = imageio.imread('..\/input\/kaggle-data-science-survey-20172021\/images\/lady10.png')\nImage.fromarray(im).save(\"lady10.png\")\n\nhtmlt = '''\n<!-- Bootstrap -->\n<link rel=\"stylesheet\" href=\"https:\/\/stackpath.bootstrapcdn.com\/bootstrap\/4.4.1\/css\/bootstrap.min.css\" integrity=\"sha384-Vkoo8x4CGsO3+Hhxv8T\/Q5PaXtkKtu6ug5TOeNV6gBiFeWPGFN9MuhOf23Q9Ifjh\" crossorigin=\"anonymous\">\n<!-- Style -->\n<style>\n\t.all10 {\n\t\tfont-family: \"Times New Roman\", Times, serif;\n\t\toverflow-x: hidden;\n\t\twidth: 98%;\n\t\tbackground-color:#e0c9a6;\n\t\t\/* background-image : url(\"bkg.jpg\"); changed via js *\/\n\t}\n\t.all10 .svg-container {\n\t\tdisplay: inline-block;\n\t\tposition: relative;\n\t\twidth: 100%;\n\t\tpadding-bottom: 54%;\n\t\tvertical-align: top;\n\t\toverflow: hidden;\n\t}\n\t.svg-content {\n\t\tdisplay: inline-block;\n\t\tposition: absolute;\n\t\ttop: 0;\n\t\tleft: 0;\n\t}\n\n\t.axisHidden path{\n\t\tstroke: #e0c9a6;\n\t}\n\n\t.axisHidden line{\n\t\tstroke: #e0c9a6;\n\t}\n\n\t.annotation.color text {\n\t\tfill: #000000;\n\t}\n\n\t@font-face {\n\t\tfont-family: parklane;\n\t\tsrc: url(https:\/\/h4ks.net\/ParkLaneNF.otf);\n\t\t}\n\n\tdiv.tooltip-donut {\n\t\tposition: absolute;\n\t\ttext-align: center;\n\t\tpadding: .3rem;\n\t\tbackground: #FFFFFF;\n\t\tcolor: #000000;\n\t\tborder: 1px solid #000000;\n\t\tborder-radius: 8px;\n\t\tpointer-events: none;\n\t\tfont-size: 2rem;\n\t\tz-index: 99999;\n\t}\n\n<\/style>\n\n<img id=\"baseimg\" src=\"man.png\" style=\"display:none\" \/>\n<div class=\"all10\">\n\t<center><h1 style=\"font-family: parklane\">Evolution of the Surroundings<\/h1><\/center>\n\t<center><h3><i>- What hosted notebooks do you use? -<\/i><\/h3><\/center>\n\t<div class=\"row\">\n\t\t<div id=\"map10-gents\" class=\"svg-container\"><\/div>\n\t<\/div>\n\n\t<div class=\"row\">\n\t\t<div id=\"map10-ladies\" class=\"svg-container\"><\/div>\n\t<\/div>\n<\/div>\n'''\n\njs_t = '''\nrequire.config({\n  paths: {\n    d3src: \"https:\/\/d3js.org\/\",\n  },\n  map: {\n    '*': {\n      'd3v6': 'd3src\/d3.v6.min',\n      'd3-selection': 'd3src\/d3-selection.v1.min',\n      'd3-drag': 'd3src\/d3-drag.v1.min',\n      'd3-shape': 'd3src\/d3-shape.v1.min',\n      'd3-path': 'd3src\/d3-path.v1.min',\n      'd3-dispatch': 'd3src\/d3-dispatch.v1.min',\n      'd3-annotation': 'https:\/\/cdnjs.cloudflare.com\/ajax\/libs\/d3-annotation\/2.5.1\/d3-annotation.min.js',\n    }\n  }\n});\n\nrequire([\"d3v6\", \"d3-annotation\"], function(d3, d3Annotation) {\n\n\/\/ Inject d3Annotation methods to d3\nfor (var key in d3Annotation) {\n  d3[key] = d3Annotation[key];\n}\n\n\/\/ Get Assets URL set by Kaggle\nconst baseAssetsUrl = document.getElementById('baseimg').src.replace(\/man.png.*$\/, '');\n\nconst $all10 = document.getElementsByClassName('all10')[0];\n$all10.style.backgroundImage = `url(\"${baseAssetsUrl}bkg.jpg\")`;\n\n\/\/ Set the SVG area\nconst margin = { LEFT: 20, RIGHT: 40, TOP: 15, BOTTOM: 0 }\nconst width = 950 - margin.LEFT - margin.RIGHT\nconst height = 500 - margin.TOP - margin.BOTTOM\nconst chart_size = 70\nconst x_global = 150\n\nfunction create_graph(data, svg, name){\n\n  const XY_axis = height\/2-200\n\n  svg.append(\"text\")\n  .attr(\"transform\", `translate(${x_global-60}, ${XY_axis-10})`)\n  .attr(\"font-size\", \"24px\")\n  .attr(\"text-anchor\", \"middle\")\n  .attr(\"font-weight\", 600)\n  .text(name)\n\n  data.forEach(d => {\n    d.Year = Number(d.Year)\n  })\n\n  \/\/ List of groups\n  var keys = data.columns.slice(1)\n\n  \/\/ Stacking\n  var series = d3.stack()\n    .keys(keys)\n    .offset(d3.stackOffsetSilhouette)\n    (data)\n\n  \/\/ X Axis\n  var x = d3.scaleLinear()\n    .domain(d3.extent(data, d => d.Year))\n    .range([0, width\/1.5])\n\n  var xAxis = g => g\n    .attr(\"transform\", `translate(${x_global}, ${XY_axis})`)\n    .call(d3.axisBottom(x)\n            .tickSize(height\/1.2).ticks(4).tickFormat(d3.format(\"d\")))\n    .call(g => g.select(\".domain\").remove())\n    .call(g => g.selectAll(\".tick line\")\n                .attr(\"stroke\", \"#3A3A3A\")\n                .attr('stroke-dasharray', '5 5'))\n    .call(g => g.selectAll(\".tick\")\n                .select('text')\n                .attr('fill', \"#3A3A3A\")\n                .style(\"font-size\", 15))\n\n  \/\/ Y Axis\n  var y = d3.scaleLinear()\n  .domain([-chart_size, chart_size])\n  .range([height\/1.2, 0])\n  svg.append(\"g\")\n  .attr(\"class\", \"axisHidden\")\n  .attr(\"transform\", `translate(${x_global}, ${XY_axis})`)\n    .call(d3.axisLeft(y).ticks(0))\n\n  \/\/ Area Chart\n  var area = d3.area()\n  .x(d => x(d.data.Year))\n  .y0(d => y(d[0]))\n  .y1(d => y(d[1]))\n\n  \/\/ Color\n  const color = d3.scaleOrdinal()\n    .domain(keys)\n    .range([\"#D67A83\", \"#D05257\", \"#D87F58\", \"#CE8E27\",\n     \"#5F9571\", \"#12A6B6\", \"#74A5D2\", \"#226BBF\", \"#5D1D46\"])\n\n  \/\/ Show\n  const path = svg.append(\"g\")\n    .selectAll(\"path\")\n    .data(series)\n    .join(\"path\")\n    .attr(\"transform\", `translate(${x_global}, ${XY_axis})`)\n      .attr(\"data-label\", d => d.key)\n      .attr(\"fill\", ({key}) => color(key))\n      .attr(\"stroke\", \"black\")\n      .attr(\"stroke-width\", 0.2)\n      .attr(\"d\", area)\n      .attr(\"opacity\", 0.8)\n\n  svg.append(\"g\")\n      .call(xAxis)\n\n  \/\/ ==== Interactive ====\n  const hover = (svg, path) => {\n  \n    const line = svg.append(\"g\")\n         .attr(\"display\", \"none\");\n  \n    line.append(\"g\")\n        .selectAll(\"line\")\n        .data(series)\n        .join(\"line\")\n        .attr(\"class\", \"cursor-line\")\n        .attr(\"fill\", \"#fff\")\n        .attr(\"stroke-width\", 0.8)\n        .attr(\"x1\", 10)\n        .attr(\"y1\", height)\n        .attr(\"x2\", 10)\n        .attr(\"y2\", 10);\n\n    line.append(\"text\")\n      .attr(\"class\", \"text-year\")\n      .attr(\"font-size\", 14)\n      .attr(\"x\", 0)\n      .attr(\"y\", 26)\n      .attr(\"transform\", \"rotate(-90 20 20) translate(0, -20)\");\n    \n    line.append(\"g\")\n        .selectAll(\"text\")\n        .data(series)\n        .join(\"text\")\n        .attr(\"class\", \"text-label\")\n        .attr(\"font-weight\", 900)\n        .attr(\"font-size\", 17)\n        .attr(\"y\", height-10)\n        .attr(\"x\", -8)\n        .attr(\"transform\", \n        \"rotate(-90 10 460)\");\n\n    line.append(\"g\")\n        .selectAll(\"text\")\n        .data(data)\n        .join(\"text\")\n        .attr(\"class\", \"text-value\")\n        .attr(\"font-weight\", 700)\n        .attr(\"font-size\", 14)\n        .attr(\"y\", height-(height*0.94))\n        .attr(\"x\", 14);\n\n    const mousemove = (event) => {\n  \n      event?.preventDefault();\n      const pointer = d3.pointer(event);\n\n      const xm = x.invert(pointer[0]);\n      const label = d3.select(event.target).attr(\"data-label\");\n  \n      line.attr(\"transform\", `translate(${pointer[0]}, 0)`)\n          .style(\"visibility\", \"inherit\");\n    \n          line.select(\".text-year\")\n          .text(parseInt(xm));\n      \n      line.selectAll(\".text-value\")\n        .text(d => d.Year === parseInt(xm) ? d[label]+\"%\" : \"\");\n\n      line.selectAll(\".text-label\")\n        .style(\"visibility\", \"hidden\")\n        .filter(d => d.key === label)\n        .style(\"visibility\", \"inherit\")\n        .attr(\"fill\", d => d.key === label ? color(d.key) : \"#000\")\n        .text(label);\n      \n      line.selectAll(\".cursor-line\")\n        .attr(\"stroke\", \"fff0\")\n        .filter(d => d.key === label)\n        .attr(\"stroke\", d => d.key === label ? color(d.key) : \"#fff0\")\n      \n      path.attr(\"opacity\", d => d.key === label ? 0.8 : 0.3);\n      \n      if (label === null) {\n        path.attr(\"opacity\", 0.8);\n        line.style(\"visibility\", \"hidden\");\n      }\n    }\n\n    const mouseenter = () => {\n      line.attr(\"display\", null);\n    }\n  \n    const mouseleave = () => {\n      line.attr(\"display\", \"none\");\n    }\n\n    svg\n        .on(\"mousemove\", mousemove)\n        .on(\"mouseenter\", mouseenter)\n        .on(\"mouseleave\", mouseleave)\n\n  }\n\n  svg.call(hover, path);\n}\n\n\/\/ ===== MEN =====\nconst svg1 = d3.select(\"#map10-gents\").append(\"svg\")\n\/\/ .attr(\"style\", \"outline: thin solid red;\")\n  .attr(\"preserveAspectRatio\", \"xMinYMin meet\")\n  .attr(\"viewBox\", \"0 0 950 500\")\n  .classed(\"svg-content\", true)\n  .attr(\"transform\",\n   `translate(${margin.LEFT}, ${margin.TOP})`)\n\n\/\/ Gentleman\nsvg1.append(\"image\")\n.attr(\"xlink:href\", baseAssetsUrl+\"man10.png\")\n    .attr(\"x\", \"-6%\")\n    .attr(\"y\", \"13%\")\n    .attr(\"width\", 380)\n    .attr(\"height\", 380)\n    .style(\"opacity\", 1)\n\n\/\/ Comment\nconst annot1 = [\n  {\n  note: { \n    label: \"Quite a lot of respondents don't use any hosted notebooks platforms.\",\n    title: \"None\",\n    wrap: 100, \n    padding: 5, \n  },\n  className: \"color\",\n  connector: { end: \"arrow\" },\n  color: [\"#ffffff\"],\n  x: 755,\n  y: 150,\n  dy: +35,\n  dx: +30\n}]\n\nsvg1.append(\"g\")\n  .style('font-size', 17)\n  .call(d3.annotation()\n          .annotations(annot1))\n\nd3.csv(baseAssetsUrl + \"hosted_man.csv\").then(function(data){\n\n  const name = \"Gentlemen\"\n  create_graph(data, svg1, name)\n\n});\n\n\/\/ ===== WOMEN =====\nconst svg2 = d3.select(\"#map10-ladies\").append(\"svg\")\n\/\/ .attr(\"style\", \"outline: thin solid red;\")\n.attr(\"preserveAspectRatio\", \"xMinYMin meet\")\n.attr(\"viewBox\", \"0 0 950 500\")\n.classed(\"svg-content\", true)\n.attr(\"transform\",\n  `translate(${margin.LEFT}, ${margin.TOP})`)\n\n\/\/ Lady\nsvg2.append(\"image\")\n.attr(\"xlink:href\", baseAssetsUrl+\"lady10.png\")\n.attr(\"x\", \"-12%\")\n.attr(\"y\", \"14%\")\n.attr(\"width\", 430)\n.attr(\"height\", 430)\n.style(\"opacity\", 1)\n\n\/\/ Comment\nconst annot2 = [\n  {\n  note: { \n    label: \"Both are increasing in popularity for both genders.\",\n    title: \"Colab & Kaggle\",\n    wrap: 100, \n    padding: 5, \n  },\n  className: \"color\",\n  connector: { end: \"arrow\" },\n  color: [\"#ffffff\"],\n  x: 755,\n  y: 300,\n  dy: -35,\n  dx: +30\n}]\n\nsvg2.append(\"g\")\n  .style('font-size', 17)\n  .call(d3.annotation()\n          .annotations(annot2))\n\nd3.csv(baseAssetsUrl + \"hosted_woman.csv\").then(function(data){\n\n  const name = \"Ladies\"\n  create_graph(data, svg2, name)\n\n});\n\n});\n'''\n\n\nh = display(HTML(htmlt))\nj = py_display.Javascript(js_t)\npy_display.display_javascript(j)","d17f0773":"cols = [\"Year\", \"What is your gender? - Selected Choice\",\n        df.columns[47]]\ncomp = df[cols]\n\ncomp.columns = [\"Year\", \"Gender\", \"CompPlatform\"]\ncomp = comp[comp[\"Gender\"].isin([\"Man\", \"Woman\"])]\n\nold_list = ['A laptop',\n            'A cloud computing platform (AWS, Azure, GCP, hosted notebooks, etc)',\n            'A personal computer \/ desktop',\n            'A deep learning workstation (NVIDIA GTX, LambdaLabs, etc)', \n            'A personal computer or laptop']\nnew_list = [\"Personal Laptop\", \"Cloud Platform\", \"Personal Laptop\",\n            \"Workstation\", \"Personal Laptop\"]\n\ncomp[\"CompPlatform\"] = comp[\"CompPlatform\"].replace(old_list, new_list)\n\ncomp = comp.value_counts().reset_index()\ncomp = pd.merge(comp, total, on=[\"Year\", \"Gender\"])\ncomp[\"perc\"] = comp[0]\/comp[\"Count\"]\ncomp[\"perc\"] = comp[\"perc\"].apply(lambda x: round(x, 2))\ncomp.drop(columns=[0, \"Count\"], axis=1, inplace=True)\ncomp = comp[~comp[\"CompPlatform\"].isin([\"None\", \"Other\"])]\n\ncomp_man = comp[comp[\"Gender\"] == \"Man\"].drop(columns=[\"Gender\"])\ncomp_man = pd.pivot(data=comp_man, index=\"CompPlatform\",\n                    columns=\"Year\", values=\"perc\").reset_index()\ncomp_man.columns = [\"group\", \"value1\", \"value2\"]\n\ncomp_woman = comp[comp[\"Gender\"] == \"Woman\"].drop(columns=[\"Gender\"])\ncomp_woman = pd.pivot(data=comp_woman, index=\"CompPlatform\",\n                    columns=\"Year\", values=\"perc\").reset_index()\ncomp_woman.columns = [\"group\", \"value1\", \"value2\"]\n\ncomp_man.to_csv(\"comp_man.csv\", index=False)\ncomp_woman.to_csv(\"comp_woman.csv\", index=False)\n\n# Save usa.png img as well\nim = imageio.imread('..\/input\/kaggle-data-science-survey-20172021\/images\/man12.png')\nImage.fromarray(im).save(\"man12.png\")\n\nim = imageio.imread('..\/input\/kaggle-data-science-survey-20172021\/images\/lady12.png')\nImage.fromarray(im).save(\"lady12.png\")\n\nhtmlt = '''\n<!-- Bootstrap -->\n<link rel=\"stylesheet\" href=\"https:\/\/stackpath.bootstrapcdn.com\/bootstrap\/4.4.1\/css\/bootstrap.min.css\" integrity=\"sha384-Vkoo8x4CGsO3+Hhxv8T\/Q5PaXtkKtu6ug5TOeNV6gBiFeWPGFN9MuhOf23Q9Ifjh\" crossorigin=\"anonymous\">\n<!-- Style -->\n<style>\n\t.all12 {\n\t\tfont-family: \"Times New Roman\", Times, serif;\n\t\toverflow-x: hidden;\n\t\twidth: 98%;\n\t\tbackground-color:#e0c9a6;\n\t\t\/* background-image : url(\"bkg.jpg\"); changed via js *\/\n\t}\n\t.svg-container {\n\t\tdisplay: inline-block;\n\t\tposition: relative;\n\t\twidth: 100%;\n\t\tpadding-bottom: 100%;\n\t\tvertical-align: top;\n\t\toverflow: hidden;\n\t}\n\t.svg-content {\n\t\tdisplay: inline-block;\n\t\tposition: absolute;\n\t\ttop: 0;\n\t\tleft: 0;\n\t}\n\n\t.all12 .axisGents path{\n\t\tstroke: #184E8B;\n\t}\n\n\t.all12 .axisGents line{\n\t\tstroke: #184E8B;\n\t}\n\n\t.all12 .axisGents text{\n\t\tstroke: #184E8B;\n\t}\n\n\t.all12 .annotation.gents text {\n\t\tfill: #184E8B;\n\t}\n\n\t.all12 .axisLadies path{\n\t\tstroke: #A81F40;\n\t}\n\n\t.all12 .axisLadies line{\n\t\tstroke: #A81F40;\n\t}\n\n\t.all12 .axisLadies text{\n\t\tstroke: #A81F40;\n\t}\n\n\t.all12 .annotation.ladies text {\n\t\tfill: #A81F40 ;\n\t}\n\n\t@font-face {\n\t\tfont-family: parklane;\n\t\tsrc: url(https:\/\/h4ks.net\/ParkLaneNF.otf);\n\t\t}\n\n\tdiv.tooltip-donut {\n\t\tposition: absolute;\n\t\ttext-align: center;\n\t\tpadding: .3rem;\n\t\tbackground: #FFFFFF;\n\t\tcolor: #000000;\n\t\tborder: 1px solid #000000;\n\t\tborder-radius: 8px;\n\t\tpointer-events: none;\n\t\tfont-size: 1.3rem;\n\t\tz-index: 99999;\n\t}\n\n<\/style>\n\n<img id=\"baseimg\" src=\"man.png\" style=\"display:none\" \/>\n<div class=\"all12\">\n\t<center><h1 style=\"font-family: parklane\">Special Sauce: The Hardware<\/h1><\/center>\n\t<center><h3><i>- What Computing Platforms do you like to use? -<\/i><\/h3><\/center>\n\t<div class=\"row\">\n\t\t<div id=\"map12\" class=\"svg-container\"><\/div>\n\t<\/div>\n<\/div>\n'''\n\njs_t = '''\nrequire.config({\n  paths: {\n    d3src: \"https:\/\/d3js.org\/\",\n  },\n  map: {\n    '*': {\n      'd3v6': 'd3src\/d3.v6.min',\n      'd3-selection': 'd3src\/d3-selection.v1.min',\n      'd3-drag': 'd3src\/d3-drag.v1.min',\n      'd3-shape': 'd3src\/d3-shape.v1.min',\n      'd3-path': 'd3src\/d3-path.v1.min',\n      'd3-dispatch': 'd3src\/d3-dispatch.v1.min',\n      'd3-annotation': 'https:\/\/cdnjs.cloudflare.com\/ajax\/libs\/d3-annotation\/2.5.1\/d3-annotation.min.js',\n    }\n  }\n});\n\nrequire([\"d3v6\", \"d3-annotation\"], function(d3, d3Annotation) {\n\n\/\/ Inject d3Annotation methods to d3\nfor (var key in d3Annotation) {\n  d3[key] = d3Annotation[key];\n}\n\n\/\/ Get Assets URL set by Kaggle\nconst baseAssetsUrl = document.getElementById('baseimg').src.replace(\/man.png.*$\/, '');\n\nconst $all12 = document.getElementsByClassName('all12')[0];\n$all12.style.backgroundImage = `url(\"${baseAssetsUrl}bkg.jpg\")`;\n\n\/\/ Set the SVG area\nconst margin = { LEFT: 10, RIGHT: 10, TOP: 10, BOTTOM: 0 }\nconst width = 950 - margin.LEFT - margin.RIGHT\nconst height = 900 - margin.TOP - margin.BOTTOM\nconst color_2021 = \"#D05257\"\nconst color_2020 = \"#226BBF\"\n\nconst svg = d3.select(\"#map12\").append(\"svg\")\n  .attr(\"preserveAspectRatio\", \"xMinYMin meet\")\n  .attr(\"viewBox\", \"0 0 950 900\")\n  .classed(\"svg-content\", true)\n  .attr(\"transform\",\n   `translate(${margin.LEFT}, ${margin.TOP})`)\n\nfunction wrap(text, width) {\ntext.each(function() {\n  var text = d3.select(this),\n      words = text.text().split(\/\\s+\/).reverse(),\n      word,\n      line = [],\n      lineNumber = 0,\n      lineHeight = 0.5, \/\/ ems\n      y = text.attr(\"y\"),\n      dy = parseFloat(text.attr(\"dy\")),\n      tspan = text.text(null).append(\"tspan\").attr(\"x\", 0).attr(\"y\", y).attr(\"dy\", dy + \"em\")\n  while (word = words.pop()) {\n    line.push(word)\n    tspan.text(line.join(\" \"))\n    if (tspan.node().getComputedTextLength() > width) {\n      line.pop()\n      tspan.text(line.join(\" \"))\n      line = [word]\n      tspan = text.append(\"tspan\").attr(\"x\", 0).attr(\"y\", y).attr(\"dy\", `${++lineNumber * lineHeight + dy}em`).text(word)\n    }\n  }\n})\n}\n\n\nsvg.append('line')\n.style(\"stroke\", \"black\")\n.style(\"stroke-width\", 1)\n    .attr(\"x1\", 480)\n    .attr(\"y1\", 150)\n    .attr(\"x2\", 480)\n    .attr(\"y2\", 900)\n\n\/\/ LEGEND\n\n\/\/ Legend\nconst keys = [\"2020\", \"2021\"]\nconst color = d3.scaleOrdinal()\n.range([color_2020, color_2021])\n\nconst opacity = 0.7\nconst stroke_width = 3\nconst r = 30\n\nvar legend = svg.selectAll(\"graph\")\n.data(keys)\n.join(\"g\")\n.attr(\"transform\", `translate(${300}, ${height-height*0.9})`)\n\nlegend\n.append(\"circle\")\n  .attr(\"cx\", (d, i) => (i%2 === 0 ? 110 : 250))\n  .attr(\"cy\", -40) \n  .attr(\"r\", r)\n  .attr(\"opacity\", opacity)\n  .style(\"stroke\", \"black\")\n  .style(\"stroke-width\", stroke_width)\n  .style(\"fill\", function(d){ return color(d)})\n\nlegend\n  .append(\"text\")\n    .attr(\"x\", (d, i) => (i%2 === 0 ? 150 : 290))\n    .attr(\"y\", -40) \n    .attr(\"font-size\", \"21px\")\n    .style(\"fill\", function(d){ return color(d)})\n    .text(function(d){ return d})\n    .attr(\"text-anchor\", \"left\")\n    .attr(\"font-weight\", 700)\n    .style(\"alignment-baseline\", \"middle\")\n\n\n\/\/ Global Y axis\nconst y = d3.scaleBand()\n.range([ 0, height\/1.3 ])\n.domain([\"Cloud Platform\", \"Personal Laptop\", \"Workstation\"])\n.padding(1);\nsvg.append(\"g\")\n.attr(\"transform\", `translate(${110}, ${height\/3-140})`)\n.call(d3.axisLeft(y).tickSize(0))\n.selectAll(\"text\")\n.call(wrap, y.bandwidth())\n.attr(\"y\", -10)\n.attr(\"font-size\", \"16px\")\n.attr(\"font-weight\", 600)\n\n\/\/ LOLIPOP FUNCTION\nfunction create_lolipop(data, x_global, y_global, \n  color_2020, color_2021, limit1, limit2, axisClass){\n  \/\/ Add X axis\n  const x = d3.scaleLinear()\n    .domain([limit1, limit2])\n    .range([ 0, width\/2.7]);\n  svg.append(\"g\")\n  .attr(\"class\", axisClass)\n    .attr(\"transform\", `translate(${x_global}, ${height\/1.02})`)\n    .call(d3.axisBottom(x).tickFormat(d3.format(\".0%\")))\n    .selectAll(\"text\")\n    .attr(\"font-size\", \"16px\")\n    .attr(\"font-weight\", 300)\n\n  \/\/ Lines\n  svg.selectAll(\"myline\")\n    .data(data)\n    .join(\"line\")\n    .attr(\"transform\", `translate(${x_global}, ${y_global})`)\n      .attr(\"x1\", function(d) { return x(d.value1); })\n      .attr(\"x2\", function(d) { return x(d.value2); })\n      .attr(\"y1\", function(d) { return y(d.group); })\n      .attr(\"y2\", function(d) { return y(d.group); })\n      .attr(\"stroke\", \"grey\")\n      .attr(\"stroke-width\", \"1px\")\n\n  \/\/ Circles of variable 1\n  svg.selectAll(\"mycircle\")\n    .data(data)\n    .join(\"circle\")\n    .attr(\"transform\", `translate(${x_global}, ${y_global})`)\n      .attr(\"cx\", function(d) { return x(d.value1); })\n      .attr(\"cy\", function(d) { return y(d.group); })\n      .attr(\"r\", r)\n      .attr(\"opacity\", opacity)\n      .style(\"fill\", color_2020)\n      .style(\"stroke\", \"black\")\n      .style(\"stroke-width\", stroke_width)\n\n  \/\/ Circles of variable 2\n  svg.selectAll(\"mycircle\")\n    .data(data)\n    .join(\"circle\")\n    .attr(\"transform\", `translate(${x_global}, ${y_global})`)\n      .attr(\"cx\", function(d) { return x(d.value2); })\n      .attr(\"cy\", function(d) { return y(d.group); })\n      .attr(\"r\", r)\n      .attr(\"opacity\", opacity)\n      .style(\"fill\", color_2021)\n      .style(\"stroke\", \"black\")\n      .style(\"stroke-width\", stroke_width)\n}\n\n\n\/\/ === Men ===\nd3.csv(baseAssetsUrl + \"comp_man.csv\").then(function(data){\n\n  const x_global = 110\n  const y_global = height\/3-140\n  const limit1 = 0.03\n  const limit2 = 0.83\n  const axisClass = \"axisGents\"\n\n  svg.append(\"text\")\n  .attr(\"transform\", `translate(${x_global+180}, ${y_global+50})`)\n  .attr(\"font-size\", \"30px\")\n  .attr(\"text-anchor\", \"middle\")\n  .attr(\"font-weight\", 600)\n  .text(\"Gentlemen\")\n\n  \/\/ Men\n  svg.append(\"image\")\n  .attr(\"xlink:href\", baseAssetsUrl+\"man12.png\")\n      .attr(\"x\", x_global+50)\n      .attr(\"y\", y_global-70)\n      .attr(\"width\", 250)\n      .attr(\"height\", 250)\n      .style(\"opacity\", 1)\n\n  create_lolipop(data, x_global, y_global, color_2020, \n    color_2021, limit1, limit2, axisClass)\n\n  });\n\n\/\/ === Women ===\nd3.csv(baseAssetsUrl + \"comp_woman.csv\").then(function(data){\n\n  const x_global = 520\n  const y_global = height\/3-140\n  const limit1 = 0.02\n  const limit2 = 0.83\n  const axisClass = \"axisLadies\"\n\n  svg.append(\"text\")\n  .attr(\"transform\", `translate(${x_global+180}, ${y_global+50})`)\n  .attr(\"font-size\", \"30px\")\n  .attr(\"text-anchor\", \"middle\")\n  .attr(\"font-weight\", 600)\n  .text(\"Ladies\")\n\n  \/\/ Women\n  svg.append(\"image\")\n  .attr(\"xlink:href\", baseAssetsUrl+\"lady12.png\")\n      .attr(\"x\", x_global-135)\n      .attr(\"y\", y_global-520)\n      .attr(\"width\", 600)\n      .attr(\"height\", 600)\n      .style(\"opacity\", 1)\n\n  create_lolipop(data, x_global, y_global, color_2020, \n    color_2021, limit1, limit2, axisClass)\n\n  });\n\n\n\/\/ Annot\nconst annot = [\n  {\n    note: { \n      label: \"Have been decreasing in popularity in 2021.\",\n      title: \"Cloud Platforms & Workstations\",\n      wrap: 180, \n      padding: 5, \n    },\n    className: \"gents\",\n    connector: { end: \"arrow\" },\n    color: [\"#ffffff\"],\n    x: 150,\n    y: 370,\n    dy: 20,\n    dx: 20\n  },\n  {\n  note: { \n    label: \"More and more respondents are using personal laptops (this change is affected by the shift in respondent's age).\",\n    title: \"Personal Laptop\",\n    wrap: 180, \n    padding: 5, \n  },\n  className: \"ladies\",\n  connector: { end: \"arrow\" },\n  color: [\"#ffffff\"],\n  x: 830,\n  y: 530,\n  dy: 20,\n  dx: -20\n}]\n\nsvg.append(\"g\")\n  .style('font-size', 19)\n  .call(d3.annotation()\n          .annotations(annot))\n\n});\n'''\n\n\nh = display(HTML(htmlt))\nj = py_display.Javascript(js_t)\npy_display.display_javascript(j)","02e919ef":"# === Specialized Hardware ===\ncols = list(df.columns[48:53])\nnew_names = [\"CPU\", \"GPU\", \"TPU\", \"None\", \"Other\"]\n\nhardware = get_data_multiple_answers(cols, new_names)\nhardware.drop(columns=[\"CPU\", \"Other\"], axis=1, inplace=True)\nhardware = hardware[(hardware[\"Year\"]!=2017) & (hardware[\"Year\"]!=2018)]\n\nhardware_man = hardware[hardware[\"Gender\"]==\"Man\"].drop(columns=[\"Gender\"])\nhardware_man = hardware_man.sort_values(hardware_man.last_valid_index(), axis=1,\n                    ascending=False)\nhardware_woman = hardware[hardware[\"Gender\"]==\"Woman\"].drop(columns=[\"Gender\"])\nhardware_woman = hardware_woman.sort_values(hardware_woman.last_valid_index(), axis=1,\n                    ascending=False)\n\nhardware_man.to_csv(\"hardware_man.csv\", index=False)\nhardware_woman.to_csv(\"hardware_woman.csv\", index=False)\n\n# === TPU Usage ===\ncols = [\"Year\", \"What is your gender? - Selected Choice\",\n        df.columns[53]]\ntpu = df[cols]\n\ntpu.columns = [\"Year\", \"Gender\", \"TPU\"]\ntpu = tpu[tpu[\"Gender\"].isin([\"Man\", \"Woman\"])]\n\nold_list = ['2-5 times', 'Never', 'More than 25 times', \n            'Once', '6-25 times', '6-24 times', '> 25 times']\nnew_list = ['3. 2-5 times', '1. Never', '5. > 25 times', \n            '2. Once', '4. 6-25 times', '4. 6-25 times', '5. > 25 times']\n\ntpu[\"TPU\"] = tpu[\"TPU\"].replace(old_list, new_list)\ntpu = tpu.value_counts().reset_index()\n\ntpu = pd.pivot(tpu, index=[\"Year\", \"TPU\"],\n               columns=\"Gender\", values=0).reset_index()\ntpu.columns = [\"year\", \"tpu\", \"male\", \"female\"]\n\ntpu.to_csv(\"tpu.csv\", index=False)\n\n# Save usa.png img as well\nim = imageio.imread('..\/input\/kaggle-data-science-survey-20172021\/images\/man11.png')\nImage.fromarray(im).save(\"man11.png\")\n\nim = imageio.imread('..\/input\/kaggle-data-science-survey-20172021\/images\/lady11.png')\nImage.fromarray(im).save(\"lady11.png\")\n\nhtmlt = '''\n<!-- Bootstrap -->\n<link rel=\"stylesheet\" href=\"https:\/\/stackpath.bootstrapcdn.com\/bootstrap\/4.4.1\/css\/bootstrap.min.css\" integrity=\"sha384-Vkoo8x4CGsO3+Hhxv8T\/Q5PaXtkKtu6ug5TOeNV6gBiFeWPGFN9MuhOf23Q9Ifjh\" crossorigin=\"anonymous\">\n<!-- Style -->\n<style>\n\t.all11 {\n\t\tfont-family: \"Times New Roman\", Times, serif;\n\t\toverflow-x: hidden;\n\t\twidth: 98%;\n\t\tbackground-color:#e0c9a6;\n\t\t\/* background-image : url(\"bkg.jpg\"); changed via js *\/\n\t}\n\t.svg-container {\n\t\tdisplay: inline-block;\n\t\tposition: relative;\n\t\twidth: 100%;\n\t\tpadding-bottom: 100%;\n\t\tvertical-align: top;\n\t\toverflow: hidden;\n\t}\n\t.svg-content {\n\t\tdisplay: inline-block;\n\t\tposition: absolute;\n\t\ttop: 0;\n\t\tleft: 0;\n\t}\n\n\t.axisHidden path{\n\t\tstroke: #e0c9a6;\n\t}\n\n\t.axisHidden line{\n\t\tstroke: #e0c9a6;\n\t}\n\n\t.annotation.color text {\n\t\tfill: #000000;\n\t}\n\n\t@font-face {\n\t\tfont-family: parklane;\n\t\tsrc: url(https:\/\/h4ks.net\/ParkLaneNF.otf);\n\t\t}\n\n\tdiv.tooltip-donut {\n\t\tposition: absolute;\n\t\ttext-align: center;\n\t\tpadding: .3rem;\n\t\tbackground: #FFFFFF;\n\t\tcolor: #000000;\n\t\tborder: 1px solid #000000;\n\t\tborder-radius: 8px;\n\t\tpointer-events: none;\n\t\tfont-size: 2rem;\n\t\tz-index: 99999;\n\t}\n\n<\/style>\n\n<img id=\"baseimg\" src=\"man.png\" style=\"display:none\" \/>\n<div class=\"all11\">\n\t<center><h1 style=\"font-family: parklane\">Special Sauce: The Power<\/h1><\/center>\n\t<center><h3><i>- What Special Hardware do you like to use? -<\/i><\/h3><\/center>\n\t<label for=\"filter11\" style=\"font-size: 25px\">Select Year Here:<\/label>\n\t<select id=\"filter11\" style=\"font-size: 20px\">\n\t\t<option value=\"2021\">2021<\/option>\n\t\t<option value=\"2020\">2020<\/option>\n\t\t<option value=\"2019\">2019<\/option>\n\t  <\/select>\n\t<div class=\"row\">\n\t\t<div id=\"map11\" class=\"svg-container\"><\/div>\n\t<\/div>\n<\/div>\n'''\n\njs_t = '''\nrequire.config({\n  paths: {\n    d3src: \"https:\/\/d3js.org\/\",\n  },\n  map: {\n    '*': {\n      'd3v6': 'd3src\/d3.v6.min',\n      'd3-selection': 'd3src\/d3-selection.v1.min',\n      'd3-drag': 'd3src\/d3-drag.v1.min',\n      'd3-shape': 'd3src\/d3-shape.v1.min',\n      'd3-path': 'd3src\/d3-path.v1.min',\n      'd3-dispatch': 'd3src\/d3-dispatch.v1.min',\n      'd3-annotation': 'https:\/\/cdnjs.cloudflare.com\/ajax\/libs\/d3-annotation\/2.5.1\/d3-annotation.min.js',\n    }\n  }\n});\n\nrequire([\"d3v6\", \"d3-annotation\"], function(d3, d3Annotation) {\n\n\/\/ Inject d3Annotation methods to d3\nfor (var key in d3Annotation) {\n  d3[key] = d3Annotation[key];\n}\n\n\/\/ Get Assets URL set by Kaggle\nconst baseAssetsUrl = document.getElementById('baseimg').src.replace(\/man.png.*$\/, '');\n\nconst $all11 = document.getElementsByClassName('all11')[0];\n$all11.style.backgroundImage = `url(\"${baseAssetsUrl}bkg.jpg\")`;\n\n\/\/ Set the SVG area\nconst margin = { LEFT: 20, RIGHT: 40, TOP: 15, BOTTOM: 0 }\nconst width = 950 - margin.LEFT - margin.RIGHT\nconst height = 900 - margin.TOP - margin.BOTTOM\nconst centreSpacing = 100\n\nconst svg = d3.select(\"#map11\").append(\"svg\")\n  .attr(\"preserveAspectRatio\", \"xMinYMin meet\")\n  .attr(\"viewBox\", \"0 0 950 900\")\n  .classed(\"svg-content\", true)\n  .attr(\"transform\",\n   `translate(${margin.LEFT}, ${margin.TOP})`)\n\n\/\/ Gentleman\nsvg.append(\"image\")\n.attr(\"xlink:href\", baseAssetsUrl+\"man11.png\")\n    .attr(\"x\", \"-8%\")\n    .attr(\"y\", \"53%\")\n    .attr(\"width\", 380)\n    .attr(\"height\", 380)\n    .style(\"opacity\", 1)\n\n\/\/ Lady\nsvg.append(\"image\")\n.attr(\"xlink:href\", baseAssetsUrl+\"lady11.png\")\n.attr(\"x\", \"63%\")\n.attr(\"y\", \"53%\")\n.attr(\"width\", 420)\n.attr(\"height\", 420)\n.style(\"opacity\", 1)\n\n\/\/ Gradient\nconst defs = svg.append('defs');\n\nconst bgGradient1 = defs\n  .append('linearGradient')\n  .attr('id', 'bg-gradient4')\n\nbgGradient1\n  .append('stop')\n  .attr('stop-color', '#AB6130')\n  .attr('offset', '0%');\nbgGradient1\n  .append('stop')\n  .attr('stop-color', '#873D0B')\n  .attr('offset', '100%');\n\nconst bgGradient2 = defs\n  .append('linearGradient')\n  .attr('id', 'bg-gradient5')\n\nbgGradient2\n  .append('stop')\n  .attr('stop-color', '#5B8CB5')\n  .attr('offset', '0%');\nbgGradient2\n  .append('stop')\n  .attr('stop-color', '#87afcf')\n  .attr('offset', '100%');\n\n\/\/ ------ DEFAULTS ------\n\/\/ Initialize scales\nconst y = d3.scaleBand()\n.range([height\/2.7, 0])\n.padding(0.1)\n\nconst x = d3.scaleLinear()\n.range([0, (width - centreSpacing) \/ 2-150])\nconst xAxis = svg.append(\"g\")\n  .attr('transform', 'translate(165,' + (height-10) + ')')\n\nconst xReverse = d3.scaleLinear()\n.range([0, (width - centreSpacing) \/ 2-150])\nconst xAxisReverse = svg.append(\"g\")\n  .attr('transform', 'translate(515,' + (height-10) + ')')\n\n\n\/\/ Male + Female + Labels objects\nvar gM = svg.append(\"g\")\n  .attr(\"transform\", \n  \"translate(\" + 20 + \",\" + height\/1.65 + \")\");\n\nvar gF = svg.append(\"g\")\n  .attr('transform',\n    'translate(' +\n      (margin.LEFT + (width - centreSpacing) \/ 2 + centreSpacing) +\n      \",\" +\n      height\/1.65 +\n      \")\");\n\nvar gLabels = svg\n.append('g')\n.attr(\n  'transform',\n  'translate(' +\n    (margin.LEFT + (width - centreSpacing) \/ 2 + \n    ',' + margin.TOP + ')'));\n\n\n\/\/ === UPDATE ===\nfunction update(data) {\n\n  data.forEach(d => {\n    d.female = Number(d.female)\n    d.male = Number(d.male)\n  })\n\n  \/\/ Scales\n  y.domain(data.map(d => d.tpu))\n\n  const maxVal = d3.max(data, d => d3.max([d.male, d.female]))\n\n  x.domain([0, maxVal])\n  xReverse.domain([0, maxVal])\n\n  \/\/ Male\n  gM.selectAll('rect')\n    .data(data)\n    .join('rect')\n    .transition()\n    .duration(1000)\n    .attr('x', d => (width - centreSpacing) \/ 2 - x(d.male))\n    .attr('y', d => y(d.tpu))\n    .attr('rx', 10)\n    .attr('ry', 10)\n    .attr('height', y.bandwidth())\n    .attr('width', d => x(d.male))\n    .style('fill', 'url(#bg-gradient4)');\n\n\n  \/\/ Female\n  gF.selectAll('rect')\n    .data(data)\n    .join('rect')\n    .transition()\n    .duration(1000)\n    .attr('x', 0)\n    .attr('y', d => y(d.tpu))\n    .attr('rx', 10)\n    .attr('ry', 10)\n    .attr('height', y.bandwidth())\n    .attr('width', d => x(d.female))\n    .style('fill', 'url(#bg-gradient5)');\n  \n\n  \/\/Labels\n  gLabels.selectAll('text')\n    .data(data)\n    .join('text')\n    .attr('x', centreSpacing \/ 2-45)\n    .attr('y', d => y(d.tpu) + y.bandwidth() +500)\n    .style('font-weight', 600)\n    .text((d, i) => d.tpu);\n\n  gLabels\n    .append('text')\n    .text('Times you used TPU')\n    .attr('x', centreSpacing \/ 2-90)\n    .attr('y', height\/2+40)\n    .style('font-size', '22px')\n    .style('font-weight', 600);\n\n\n  \/\/ Axis Update\n  xAxis\n    .transition()\n    .duration(1000)\n    .call(d3.axisBottom(x).ticks(3))\n    .selectAll(\"text\")\n      .attr(\"font-size\", \"15px\");\n\n  xAxisReverse\n    .transition()\n    .duration(1000)\n    .call(d3.axisBottom(xReverse).ticks(3))\n    .selectAll(\"text\")\n      .attr(\"font-size\", \"15px\");\n}\n\n\n\/\/ === Years Programming ===\nd3.csv(baseAssetsUrl + \"tpu.csv\").then(function(dataload){\n\n  \/\/ default view\n  var data = dataload.filter(function(d) { \n    var sq = d3.select(\"#filter11\").property(\"value\");\n    return d.year === sq;\n  });\n\n  update(data)\n\n\n  \/\/ on change\n  d3.select(\"#filter11\").on(\"change\", function() {\n\n    var data = dataload.filter(function(d) { \n      var sq = d3.select(\"#filter11\").property(\"value\");\n      return d.year === sq;\n    });\n\n    update(data);\n  });\n\n});\n\n\nfunction create_stacked_bar(data, subgroups, x_global, y_range, color) {\n\n  const groups = data.map(d => d.Year)\n\n  \/\/ Add X axis\n  const x = d3.scaleBand()\n      .domain(groups)\n      .range([0, width\/2.5])\n      .padding([0.2])\n  svg.append(\"g\")\n    .attr(\"transform\", `translate(${x_global}, ${height\/2.2})`)\n    .call(d3.axisBottom(x).tickSizeOuter(0))\n    .selectAll(\"text\")\n      .attr(\"y\", \"10\")\n      .attr(\"x\", \"0\")\n      .attr(\"font-size\", \"15px\")\n      .attr(\"font-weight\", 300)\n      .attr(\"text-anchor\", \"middle\")\n\n  \/\/ Add Y axis\n  const y = d3.scaleLinear()\n    .domain([0, y_range])\n    .range([ height\/2.3, 0]);\n  svg.append(\"g\")\n  .attr(\"class\", \"axisHidden\")\n  .attr(\"transform\", `translate(${x_global}, ${height\/2.5-350})`)\n    .call(d3.axisLeft(y).ticks(0))\n    .selectAll(\"text\")\n      .attr(\"font-size\", \"11px\")\n      .attr(\"font-weight\", 300);\n\n  \/\/s Stack data\n  const stackedData = d3.stack()\n    .keys(subgroups)\n    (data)\n\n  \/\/ Show the bars\n  const bars = svg.append(\"g\")\n    .selectAll(\"g\")\n    .data(stackedData)\n    .join(\"g\")\n    .attr(\"transform\", `translate(${x_global}, ${height\/2.5-350})`)\n      .attr(\"fill\", d => color(d.key))\n      .attr(\"stroke\", \"black\")\n      .attr(\"stroke-width\", 0.2)\n      .attr(\"class\", d => \"myRect \" + d.key ) \n      .selectAll(\"rect\")\n      .data(d => d)\n      .join(\"rect\")\n        .attr(\"x\", d => x(d.data.Year))\n        .attr(\"y\", d => y(d[1]))\n        .attr(\"height\", d => y(d[0]) - y(d[1]))\n        .attr(\"width\",x.bandwidth())\n\n  \/\/ Interactive\n  var div = d3.select(\"body\").append(\"div\")\n  .attr(\"class\", \"tooltip-donut\")\n  .style(\"opacity\", 0);\n\n  bars\n    .on('mouseenter', function (event, dt) {\n    \/\/ MOUSE ON\n    const subGroupName = d3.select(this.parentNode).datum().key \n          \n    d3.selectAll(\".myRect\").style(\"opacity\", 0.2)  \n          \n    d3.selectAll(\".\"+subGroupName).style(\"opacity\",1)\n\n\n    \/\/ Makes the new div appear\n    div.transition()\n        .duration(50)\n        .style(\"opacity\", 1);\n\n    const subgroupName = d3.select(this.parentNode).datum().key;\n    const subgroupValue = dt.data[subgroupName];\n\n    div.html(\"Hardware: \" + subgroupName + \"<br>\" + \"Perc: \" + subgroupValue + \"%\")\n        .style(\"left\", (event.pageX) + \"px\")\n        .style(\"top\", (event.pageY-30) + \"px\");\n\n\n  })\n    \/\/ MOUSE LEAVE\n    .on('mouseleave', function () {\n      d3.selectAll(\".myRect\")\n          .style(\"opacity\",1) \n\n      \/\/ New div dissapears\n      div.transition()\n          .duration('50')\n          .style(\"opacity\", 0);\n      svg.selectAll('.divergence').remove()\n    })\n\n}\n\n\n\/\/ === Preferences ===\nd3.csv(baseAssetsUrl + \"hardware_man.csv\").then(function(data){\n\n  const x_global = 50\n  const y_range = 120\n  const subgroups = data.columns.slice(1)\n  const color = d3.scaleOrdinal()\n    .domain(subgroups)\n    .range([\"#873D0B\", \"#AB6130\", \"#B78A6E\"]);\n\n  svg.append(\"text\")\n  .attr(\"y\", \"4%\")\n  .attr(\"x\", \"25%\")\n  .attr(\"font-size\", \"23px\")\n  .attr(\"text-anchor\", \"middle\")\n  .attr(\"font-weight\", 600)\n  .text(\"Gentlemen Preferences\")\n\n  create_stacked_bar(data, subgroups, x_global, y_range, color)\n  \n});\n\nd3.csv(baseAssetsUrl + \"hardware_woman.csv\").then(function(data){\n\n  const x_global = 500\n  const y_range = 120\n  const subgroups = data.columns.slice(1)\n  const color = d3.scaleOrdinal()\n    .domain(subgroups)\n    .range([\"#4984BB\", \"#87AFCF\", \"#AABED2\"]);\n\n  svg.append(\"text\")\n  .attr(\"y\", \"4%\")\n  .attr(\"x\", \"70%\")\n  .attr(\"font-size\", \"23px\")\n  .attr(\"text-anchor\", \"middle\")\n  .attr(\"font-weight\", 600)\n  .text(\"Ladies Preferences\")\n\n  create_stacked_bar(data, subgroups, x_global, y_range, color)\n  \n});\n\n});\n'''\n\n\nh = display(HTML(htmlt))\nj = py_display.Javascript(js_t)\npy_display.display_javascript(j)","7b822f4a":"# # Save to W&B\n# run = wandb.init(project='kaggle-survey-2021', name='power_eda', \n#                  config=CONFIG, anonymous=\"allow\")\n# man, woman = wb_prep_data(hardware)\n# create_wandb_plot(x_data=man[\"Category\"], \n#                   y_data=man[\"Count\"],\n#                   x_name=\"Special Hardware Pref\", y_name=\"Count\", \n#                   title=\"Gentlemen: Special Hardware Preferences\", log=\"hardw1\", plot=\"bar\")\n# create_wandb_plot(x_data=woman[\"Category\"], \n#                   y_data=woman[\"Count\"],\n#                   x_name=\"Special Hardware Pref\", y_name=\"Count\",\n#                   title=\"Ladies: Special Hardware Preferences\", log=\"hard2\", plot=\"bar\")\n# wandb.finish()","f2cb64e9":"cols = list(df.columns[[54, 55, 56, 57, 58, 59, 61, 62, 63]])\nnew_names = [\"Matplotlib\", \"Seaborn\", \"Plotly\", \"Ggplot\", \n             \"Shiny\", \"D3 js\", \"Bokeh\", \"Geoplotlib\",\n             \"Leaflet\/Folium\"]\n\nviz = get_data_multiple_answers(cols, new_names)\nviz = viz[viz[\"Year\"]!=2017]\n\nviz_man = viz[viz[\"Gender\"] == \"Man\"].drop(columns=[\"Gender\"])\nviz_woman = viz[viz[\"Gender\"] == \"Woman\"].drop(columns=[\"Gender\"])\n\nviz_man.to_csv(\"viz_man.csv\", index=False)\nviz_woman.to_csv(\"viz_woman.csv\", index=False)\n\n# Save usa.png img as well\nim = imageio.imread('..\/input\/kaggle-data-science-survey-20172021\/images\/man13.png')\nImage.fromarray(im).save(\"man13.png\")\n\nim = imageio.imread('..\/input\/kaggle-data-science-survey-20172021\/images\/lady13.png')\nImage.fromarray(im).save(\"lady13.png\")\n\nhtmlt = '''\n<!-- Bootstrap -->\n<link rel=\"stylesheet\" href=\"https:\/\/stackpath.bootstrapcdn.com\/bootstrap\/4.4.1\/css\/bootstrap.min.css\" integrity=\"sha384-Vkoo8x4CGsO3+Hhxv8T\/Q5PaXtkKtu6ug5TOeNV6gBiFeWPGFN9MuhOf23Q9Ifjh\" crossorigin=\"anonymous\">\n<!-- Style -->\n<style>\n\t.all13 {\n\t\tfont-family: \"Times New Roman\", Times, serif;\n\t\toverflow-x: hidden;\n\t\twidth: 98%;\n\t\tbackground-color:#e0c9a6;\n\t\t\/* background-image : url(\"bkg.jpg\"); changed via js *\/\n\t}\n\t.all13 .svg-container {\n\t\tdisplay: inline-block;\n\t\tposition: relative;\n\t\twidth: 100%;\n\t\tpadding-bottom: 54%;\n\t\tvertical-align: top;\n\t\toverflow: hidden;\n\t}\n\t.svg-content {\n\t\tdisplay: inline-block;\n\t\tposition: absolute;\n\t\ttop: 0;\n\t\tleft: 0;\n\t}\n\n\t.axisHidden path{\n\t\tstroke: #e0c9a6;\n\t}\n\n\t.axisHidden line{\n\t\tstroke: #e0c9a6;\n\t}\n\n\t.annotation.color text {\n\t\tfill: #000000;\n\t}\n\n\t@font-face {\n\t\tfont-family: parklane;\n\t\tsrc: url(https:\/\/h4ks.net\/ParkLaneNF.otf);\n\t\t}\n\n\tdiv.tooltip-donut {\n\t\tposition: absolute;\n\t\ttext-align: center;\n\t\tpadding: .3rem;\n\t\tbackground: #FFFFFF;\n\t\tcolor: #000000;\n\t\tborder: 1px solid #000000;\n\t\tborder-radius: 8px;\n\t\tpointer-events: none;\n\t\tfont-size: 2rem;\n\t\tz-index: 99999;\n\t}\n\n<\/style>\n\n<img id=\"baseimg\" src=\"man.png\" style=\"display:none\" \/>\n<div class=\"all13\">\n\t<center><h1 style=\"font-family: parklane\">Jazzy Visualizations<\/h1><\/center>\n\t<center><h3><i>- Visualization Frameworks -<\/i><\/h3><\/center>\n\t<div class=\"row\">\n\t\t<div id=\"map13-gents\" class=\"svg-container\"><\/div>\n\t<\/div>\n\n\t<div class=\"row\">\n\t\t<div id=\"map13-ladies\" class=\"svg-container\"><\/div>\n\t<\/div>\n<\/div>\n'''\n\njs_t = '''\nrequire.config({\n  paths: {\n    d3src: \"https:\/\/d3js.org\/\",\n  },\n  map: {\n    '*': {\n      'd3v6': 'd3src\/d3.v6.min',\n      'd3-selection': 'd3src\/d3-selection.v1.min',\n      'd3-drag': 'd3src\/d3-drag.v1.min',\n      'd3-shape': 'd3src\/d3-shape.v1.min',\n      'd3-path': 'd3src\/d3-path.v1.min',\n      'd3-dispatch': 'd3src\/d3-dispatch.v1.min',\n      'd3-annotation': 'https:\/\/cdnjs.cloudflare.com\/ajax\/libs\/d3-annotation\/2.5.1\/d3-annotation.min.js',\n    }\n  }\n});\n\nrequire([\"d3v6\", \"d3-annotation\"], function(d3, d3Annotation) {\n\n\/\/ Inject d3Annotation methods to d3\nfor (var key in d3Annotation) {\n  d3[key] = d3Annotation[key];\n}\n\n\/\/ Get Assets URL set by Kaggle\nconst baseAssetsUrl = document.getElementById('baseimg').src.replace(\/man.png.*$\/, '');\n\nconst $all13 = document.getElementsByClassName('all13')[0];\n$all13.style.backgroundImage = `url(\"${baseAssetsUrl}bkg.jpg\")`;\n\n\/\/ Set the SVG area\nconst margin = { LEFT: 20, RIGHT: 40, TOP: 15, BOTTOM: 0 }\nconst width = 950 - margin.LEFT - margin.RIGHT\nconst height = 500 - margin.TOP - margin.BOTTOM\nconst chart_size = 120\nconst x_global = 150\n\nfunction create_graph(data, svg, name){\n\n  const XY_axis = height\/2-200\n\n  svg.append(\"text\")\n  .attr(\"transform\", `translate(${x_global-60}, ${XY_axis-10})`)\n  .attr(\"font-size\", \"24px\")\n  .attr(\"text-anchor\", \"middle\")\n  .attr(\"font-weight\", 600)\n  .text(name)\n\n  data.forEach(d => {\n    d.Year = Number(d.Year)\n  })\n\n  \/\/ List of groups\n  var keys = data.columns.slice(1)\n\n  \/\/ Stacking\n  var series = d3.stack()\n    .keys(keys)\n    .offset(d3.stackOffsetSilhouette)\n    (data)\n\n  \/\/ X Axis\n  var x = d3.scaleLinear()\n    .domain(d3.extent(data, d => d.Year))\n    .range([0, width\/1.5])\n\n  var xAxis = g => g\n    .attr(\"transform\", `translate(${x_global}, ${XY_axis})`)\n    .call(d3.axisBottom(x)\n            .tickSize(height\/1.2).ticks(4).tickFormat(d3.format(\"d\")))\n    .call(g => g.select(\".domain\").remove())\n    .call(g => g.selectAll(\".tick line\")\n                .attr(\"stroke\", \"#3A3A3A\")\n                .attr('stroke-dasharray', '5 5'))\n    .call(g => g.selectAll(\".tick\")\n                .select('text')\n                .attr('fill', \"#3A3A3A\")\n                .style(\"font-size\", 15))\n\n  \/\/ Y Axis\n  var y = d3.scaleLinear()\n  .domain([-chart_size, chart_size])\n  .range([height\/1.2, 0])\n  svg.append(\"g\")\n  .attr(\"class\", \"axisHidden\")\n  .attr(\"transform\", `translate(${x_global}, ${XY_axis})`)\n    .call(d3.axisLeft(y).ticks(0))\n\n  \/\/ Area Chart\n  var area = d3.area()\n  .x(d => x(d.data.Year))\n  .y0(d => y(d[0]))\n  .y1(d => y(d[1]))\n\n  \/\/ Color\n  const color = d3.scaleOrdinal()\n    .domain(keys)\n    .range([\"#D67A83\", \"#D05257\", \"#D87F58\", \"#CE8E27\",\n     \"#5F9571\", \"#12A6B6\", \"#74A5D2\", \"#226BBF\", \"#5D1D46\"])\n     .range([\"#5D1D46\", \"#226BBF\", \"#74A5D2\",\"#12A6B6\",\n     \"#5F9571\", \"#CE8E27\", \"#D87F58\", \"#D05257\", \"#D67A83\"])\n\n  \/\/ Show\n  const path = svg.append(\"g\")\n    .selectAll(\"path\")\n    .data(series)\n    .join(\"path\")\n    .attr(\"transform\", `translate(${x_global}, ${XY_axis})`)\n      .attr(\"data-label\", d => d.key)\n      .attr(\"fill\", ({key}) => color(key))\n      .attr(\"stroke\", \"black\")\n      .attr(\"stroke-width\", 0.2)\n      .attr(\"d\", area)\n      .attr(\"opacity\", 0.8)\n\n  svg.append(\"g\")\n      .call(xAxis)\n\n  \/\/ ==== Interactive ====\n  const hover = (svg, path) => {\n  \n    const line = svg.append(\"g\")\n         .attr(\"display\", \"none\");\n  \n    line.append(\"g\")\n        .selectAll(\"line\")\n        .data(series)\n        .join(\"line\")\n        .attr(\"class\", \"cursor-line\")\n        .attr(\"fill\", \"#fff\")\n        .attr(\"stroke-width\", 0.8)\n        .attr(\"x1\", 10)\n        .attr(\"y1\", height)\n        .attr(\"x2\", 10)\n        .attr(\"y2\", 10);\n\n    line.append(\"text\")\n      .attr(\"class\", \"text-year\")\n      .attr(\"font-size\", 14)\n      .attr(\"x\", 0)\n      .attr(\"y\", 26)\n      .attr(\"transform\", \"rotate(-90 20 20) translate(0, -20)\");\n    \n    line.append(\"g\")\n        .selectAll(\"text\")\n        .data(series)\n        .join(\"text\")\n        .attr(\"class\", \"text-label\")\n        .attr(\"font-weight\", 900)\n        .attr(\"font-size\", 17)\n        .attr(\"y\", height-10)\n        .attr(\"x\", -8)\n        .attr(\"transform\", \n        \"rotate(-90 10 460)\");\n\n    line.append(\"g\")\n        .selectAll(\"text\")\n        .data(data)\n        .join(\"text\")\n        .attr(\"class\", \"text-value\")\n        .attr(\"font-weight\", 700)\n        .attr(\"font-size\", 14)\n        .attr(\"y\", height-(height*0.94))\n        .attr(\"x\", 14);\n\n    const mousemove = (event) => {\n  \n      event?.preventDefault();\n      const pointer = d3.pointer(event);\n\n      const xm = x.invert(pointer[0]);\n      const label = d3.select(event.target).attr(\"data-label\");\n  \n      line.attr(\"transform\", `translate(${pointer[0]}, 0)`)\n          .style(\"visibility\", \"inherit\");\n    \n          line.select(\".text-year\")\n          .text(parseInt(xm));\n      \n      line.selectAll(\".text-value\")\n        .text(d => d.Year === parseInt(xm) ? d[label]+\"%\" : \"\");\n\n      line.selectAll(\".text-label\")\n        .style(\"visibility\", \"hidden\")\n        .filter(d => d.key === label)\n        .style(\"visibility\", \"inherit\")\n        .attr(\"fill\", d => d.key === label ? color(d.key) : \"#000\")\n        .text(label);\n      \n      line.selectAll(\".cursor-line\")\n        .attr(\"stroke\", \"fff0\")\n        .filter(d => d.key === label)\n        .attr(\"stroke\", d => d.key === label ? color(d.key) : \"#fff0\")\n      \n      path.attr(\"opacity\", d => d.key === label ? 0.8 : 0.3);\n      \n      if (label === null) {\n        path.attr(\"opacity\", 0.8);\n        line.style(\"visibility\", \"hidden\");\n      }\n    }\n\n    const mouseenter = () => {\n      line.attr(\"display\", null);\n    }\n  \n    const mouseleave = () => {\n      line.attr(\"display\", \"none\");\n    }\n\n    svg\n        .on(\"mousemove\", mousemove)\n        .on(\"mouseenter\", mouseenter)\n        .on(\"mouseleave\", mouseleave)\n\n  }\n\n  svg.call(hover, path);\n}\n\n\/\/ ===== MEN =====\nconst svg1 = d3.select(\"#map13-gents\").append(\"svg\")\n\/\/ .attr(\"style\", \"outline: thin solid red;\")\n  .attr(\"preserveAspectRatio\", \"xMinYMin meet\")\n  .attr(\"viewBox\", \"0 0 950 500\")\n  .classed(\"svg-content\", true)\n  .attr(\"transform\",\n   `translate(${margin.LEFT}, ${margin.TOP})`)\n\n\/\/ Gentleman\nsvg1.append(\"image\")\n.attr(\"xlink:href\", baseAssetsUrl+\"man13.png\")\n    .attr(\"x\", \"-6%\")\n    .attr(\"y\", \"13%\")\n    .attr(\"width\", 380)\n    .attr(\"height\", 380)\n    .style(\"opacity\", 1)\n\n\/\/ Comment\nconst annot1 = [\n  {\n  note: { \n    label: \"Remain the most popular libraries out of all, with trend increase from 2018 to present.\",\n    title: \"Matplotlib\/ Seaborn\/ Plotly\",\n    wrap: 100, \n    padding: 5, \n  },\n  className: \"color\",\n  connector: { end: \"arrow\" },\n  color: [\"#ffffff\"],\n  x: 755,\n  y: 300,\n  dy: -35,\n  dx: +30\n}]\n\nsvg1.append(\"g\")\n  .style('font-size', 17)\n  .call(d3.annotation()\n          .annotations(annot1))\n\nd3.csv(baseAssetsUrl + \"viz_man.csv\").then(function(data){\n\n  const name = \"Gentlemen\"\n  create_graph(data, svg1, name)\n\n});\n\n\/\/ ===== WOMEN =====\nconst svg2 = d3.select(\"#map13-ladies\").append(\"svg\")\n\/\/ .attr(\"style\", \"outline: thin solid red;\")\n.attr(\"preserveAspectRatio\", \"xMinYMin meet\")\n.attr(\"viewBox\", \"0 0 950 500\")\n.classed(\"svg-content\", true)\n.attr(\"transform\",\n  `translate(${margin.LEFT}, ${margin.TOP})`)\n\n\/\/ Lady\nsvg2.append(\"image\")\n.attr(\"xlink:href\", baseAssetsUrl+\"lady13.png\")\n.attr(\"x\", \"-22%\")\n.attr(\"y\", \"9%\")\n.attr(\"width\", 460)\n.attr(\"height\", 460)\n.style(\"opacity\", 1)\n\n\/\/ Comment\nconst annot2 = [\n  {\n  note: { \n    label: \"All these libraries remain yet to be discovered (lack of interest or lack of awareness?).\",\n    title: \"Shiny\/ D3\/ Bokeh\/ Geo\",\n    wrap: 100, \n    padding: 5, \n  },\n  className: \"color\",\n  connector: { end: \"arrow\" },\n  color: [\"#ffffff\"],\n  x: 755,\n  y: 130,\n  dy: +35,\n  dx: +30\n}]\n\nsvg2.append(\"g\")\n  .style('font-size', 17)\n  .call(d3.annotation()\n          .annotations(annot2))\n\nd3.csv(baseAssetsUrl + \"viz_woman.csv\").then(function(data){\n\n  const name = \"Ladies\"\n  create_graph(data, svg2, name)\n\n});\n\n});\n'''\n\n\nh = display(HTML(htmlt))\nj = py_display.Javascript(js_t)\npy_display.display_javascript(j)","af7128f8":"# ===== Years been doing ML =====\ncols = [\"Year\", \"What is your gender? - Selected Choice\",\n        df.columns[66]]\nml_yrs = df[cols]\n\nml_yrs.columns = [\"Year\", \"Gender\", \"MachineLearning\"]\nml_yrs = ml_yrs[ml_yrs[\"Gender\"].isin([\"Man\", \"Woman\"])]\n\nold_list = ['5-10 years', 'Under 1 year',\n       'I do not use machine learning methods', '10-20 years',\n       '2-3 years', '1-2 years', '4-5 years', '3-4 years',\n       '20 or more years', '< 1 years', '10-15 years', '20+ years',\n       'I have never studied machine learning but plan to learn in the future',\n       '< 1 year',\n       'I have never studied machine learning and I do not plan to']\n\nnew_list = [\"7. 5-10 years\", \"2. <1 year\",\n            \"1. Never\", \"8. 10+ years\", \n            \"4. 2-3 years\", \"3. 1-2 years\", \"6. 4-5 years\", \"5. 3-4 years\",\n            \"8. 10+ years\", \"2. <1 year\", \"8. 10+ years\", \"8. 10+ years\",\n            \"1. Never\",\n            \"2. <1 year\",\n            \"1. Never\"]\n\nml_yrs[\"MachineLearning\"] = ml_yrs[\"MachineLearning\"].replace(old_list, new_list)\nml_yrs = ml_yrs.value_counts().reset_index()\n\nml_yrs = pd.merge(ml_yrs, total, on=[\"Year\", \"Gender\"])\nml_yrs[\"perc\"] = ml_yrs[0] \/ ml_yrs[\"Count\"]\nml_yrs.drop(columns=[0, \"Count\"], inplace=True)\n\nml_yrs = pd.pivot(ml_yrs, index=[\"Year\", \"MachineLearning\"],\n               columns=\"Gender\", values=\"perc\").reset_index()\nml_yrs.columns = [\"year\", \"ml\", \"male\", \"female\"]\n\nml_yrs.to_csv(\"ml_yrs.csv\", index=False)\n\n# ===== ML algorithms =====\ncols = list(df.columns[84:93])\nnew_names = [\"TreesOrForests\", \"GradientBoostingMachines\", \"BayesianApproaches\", \n             \"EvolutionaryApproaches\", \"DenseNeuralNets\", \"CNNs\",\n             \"GANs\", \"RNNs\", \"Transformers\"]\n\nalgorithm = get_data_multiple_answers(cols, new_names)\nalgorithm = algorithm[(algorithm[\"Year\"]!=2017) & (algorithm[\"Year\"]!=2018)]\n\nalgorithm_man = algorithm[algorithm[\"Gender\"] == \"Man\"].drop(columns=[\"Gender\"])\nalgorithm_man = algorithm_man.sort_values(algorithm_man.last_valid_index(), axis=1,\n                    ascending=False)\nalgorithm_woman = algorithm[algorithm[\"Gender\"] == \"Woman\"].drop(columns=[\"Gender\"])\nalgorithm_woman = algorithm_woman.sort_values(algorithm_woman.last_valid_index(), axis=1,\n                    ascending=False)\n\nalgorithm_man.to_csv(\"algorithm_man.csv\", index=False)\nalgorithm_woman.to_csv(\"algorithm_woman.csv\", index=False)\n\n# Save usa.png img as well\nim = imageio.imread('..\/input\/kaggle-data-science-survey-20172021\/images\/man14.png')\nImage.fromarray(im).save(\"man14.png\")\n\nim = imageio.imread('..\/input\/kaggle-data-science-survey-20172021\/images\/lady14.png')\nImage.fromarray(im).save(\"lady14.png\")\n\nhtmlt = '''\n<!-- Bootstrap -->\n<link rel=\"stylesheet\" href=\"https:\/\/stackpath.bootstrapcdn.com\/bootstrap\/4.4.1\/css\/bootstrap.min.css\" integrity=\"sha384-Vkoo8x4CGsO3+Hhxv8T\/Q5PaXtkKtu6ug5TOeNV6gBiFeWPGFN9MuhOf23Q9Ifjh\" crossorigin=\"anonymous\">\n<!-- Style -->\n<style>\n\t.all14 {\n\t\tfont-family: \"Times New Roman\", Times, serif;\n\t\toverflow-x: hidden;\n\t\twidth: 98%;\n\t\tbackground-color:#e0c9a6;\n\t\t\/* background-image : url(\"bkg.jpg\"); changed via js *\/\n\t}\n\t.svg-container {\n\t\tdisplay: inline-block;\n\t\tposition: relative;\n\t\twidth: 100%;\n\t\tpadding-bottom: 100%;\n\t\tvertical-align: top;\n\t\toverflow: hidden;\n\t}\n\t.svg-content {\n\t\tdisplay: inline-block;\n\t\tposition: absolute;\n\t\ttop: 0;\n\t\tleft: 0;\n\t}\n\n\t.axisHidden path{\n\t\tstroke: #e0c9a6;\n\t}\n\n\t.axisHidden line{\n\t\tstroke: #e0c9a6;\n\t}\n\n\t.annotation.color text {\n\t\tfill: #000000;\n\t}\n\n\t@font-face {\n\t\tfont-family: parklane;\n\t\tsrc: url(https:\/\/h4ks.net\/ParkLaneNF.otf);\n\t\t}\n\n\tdiv.tooltip-donut {\n\t\tposition: absolute;\n\t\ttext-align: center;\n\t\tpadding: .3rem;\n\t\tbackground: #FFFFFF;\n\t\tcolor: #000000;\n\t\tborder: 1px solid #000000;\n\t\tborder-radius: 8px;\n\t\tpointer-events: none;\n\t\tfont-size: 2rem;\n\t\tz-index: 99999;\n\t}\n\n<\/style>\n\n<img id=\"baseimg\" src=\"man.png\" style=\"display:none\" \/>\n<div class=\"all14\">\n\t<center><h1 style=\"font-family: parklane\">Machine Learning: Hystoric<\/h1><\/center>\n\t<label for=\"filter14\" style=\"font-size: 25px\">Select Year Here:<\/label>\n\t<select id=\"filter14\" style=\"font-size: 20px\">\n\t\t<option value=\"2021\">2021<\/option>\n\t\t<option value=\"2020\">2020<\/option>\n\t\t<option value=\"2019\">2019<\/option>\n\t\t<option value=\"2018\">2018<\/option>\n\t  <\/select>\n\t<div class=\"row\">\n\t\t<div id=\"map14\" class=\"svg-container\"><\/div>\n\t<\/div>\n<\/div>\n'''\n\njs_t = '''\nrequire.config({\n  paths: {\n    d3src: \"https:\/\/d3js.org\/\",\n  },\n  map: {\n    '*': {\n      'd3v6': 'd3src\/d3.v6.min',\n      'd3-selection': 'd3src\/d3-selection.v1.min',\n      'd3-drag': 'd3src\/d3-drag.v1.min',\n      'd3-shape': 'd3src\/d3-shape.v1.min',\n      'd3-path': 'd3src\/d3-path.v1.min',\n      'd3-dispatch': 'd3src\/d3-dispatch.v1.min',\n      'd3-annotation': 'https:\/\/cdnjs.cloudflare.com\/ajax\/libs\/d3-annotation\/2.5.1\/d3-annotation.min.js',\n    }\n  }\n});\n\nrequire([\"d3v6\", \"d3-annotation\"], function(d3, d3Annotation) {\n\n\/\/ Inject d3Annotation methods to d3\nfor (var key in d3Annotation) {\n  d3[key] = d3Annotation[key];\n}\n\n\/\/ Get Assets URL set by Kaggle\nconst baseAssetsUrl = document.getElementById('baseimg').src.replace(\/man.png.*$\/, '');\n\nconst $all14 = document.getElementsByClassName('all14')[0];\n$all14.style.backgroundImage = `url(\"${baseAssetsUrl}bkg.jpg\")`;\n\n\/\/ Set the SVG area\nconst margin = { LEFT: 20, RIGHT: 40, TOP: 15, BOTTOM: 0 }\nconst width = 950 - margin.LEFT - margin.RIGHT\nconst height = 900 - margin.TOP - margin.BOTTOM\nconst centreSpacing = 100\n\nconst svg = d3.select(\"#map14\").append(\"svg\")\n  .attr(\"preserveAspectRatio\", \"xMinYMin meet\")\n  .attr(\"viewBox\", \"0 0 950 900\")\n  .classed(\"svg-content\", true)\n  .attr(\"transform\",\n   `translate(${margin.LEFT}, ${margin.TOP})`)\n\n\/\/ Gentleman\nsvg.append(\"image\")\n.attr(\"xlink:href\", baseAssetsUrl+\"man14.png\")\n    .attr(\"x\", \"-12%\")\n    .attr(\"y\", \"-3%\")\n    .attr(\"width\", 440)\n    .attr(\"height\", 440)\n    .style(\"opacity\", 1)\n\n\/\/ Lady\nsvg.append(\"image\")\n.attr(\"xlink:href\", baseAssetsUrl+\"lady14.png\")\n.attr(\"x\", \"74%\")\n.attr(\"y\", \"1%\")\n.attr(\"width\", 440)\n.attr(\"height\", 440)\n.style(\"opacity\", 1)\n\n\/\/ Gradient\nconst defs = svg.append('defs');\n\nconst bgGradient1 = defs\n  .append('linearGradient')\n  .attr('id', 'bg-gradient14')\n\nbgGradient1\n  .append('stop')\n  .attr('stop-color', '#927366')\n  .attr('offset', '0%');\nbgGradient1\n  .append('stop')\n  .attr('stop-color', '#633725')\n  .attr('offset', '100%');\n\nconst bgGradient2 = defs\n  .append('linearGradient')\n  .attr('id', 'bg-gradient15')\n\nbgGradient2\n  .append('stop')\n  .attr('stop-color', '#728551')\n  .attr('offset', '0%');\nbgGradient2\n  .append('stop')\n  .attr('stop-color', '#aab697')\n  .attr('offset', '100%');\n\n\/\/ ------ DEFAULTS ------\n\/\/ Initialize scales\nconst y = d3.scaleBand()\n.range([height\/2.7, 0])\n.padding(0.1)\n\nconst x = d3.scaleLinear()\n.range([0, (width - centreSpacing) \/ 2-150])\nconst xAxis = svg.append(\"g\")\n  .attr('transform', 'translate(165,' + (height-530) + ')')\n\nconst xReverse = d3.scaleLinear()\n.range([0, (width - centreSpacing) \/ 2-150])\nconst xAxisReverse = svg.append(\"g\")\n  .attr('transform', 'translate(515,' + (height-530) + ')')\n\n\n\/\/ Male + Female + Labels objects\nvar gM = svg.append(\"g\")\n  .attr(\"transform\", \n  \"translate(\" + 20 + \",\" + margin.TOP + \")\");\n\nvar gF = svg.append(\"g\")\n  .attr('transform',\n    'translate(' +\n      (margin.LEFT + (width - centreSpacing) \/ 2 + centreSpacing) +\n      \",\" +\n      margin.TOP +\n      \")\");\n\nvar gLabels = svg\n.append('g')\n.attr(\n  'transform',\n  'translate(' +\n    (margin.LEFT + (width - centreSpacing) \/ 2 + \n    ',' + margin.TOP + ')'));\n\n\n\/\/ === UPDATE ===\nfunction update(data) {\n\n  data.forEach(d => {\n    d.female = Number(d.female)\n    d.male = Number(d.male)\n  })\n\n  \/\/ Scales\n  y.domain(data.map(d => d.ml))\n\n  const maxVal = d3.max(data, d => d3.max([d.male, d.female]))\n\n  x.domain([0, maxVal])\n  xReverse.domain([0, maxVal])\n\n  \n\n  \/\/ Male\n  gM.selectAll('rect')\n    .data(data)\n    .join('rect')\n    .transition()\n    .duration(1000)\n    .attr('x', d => (width - centreSpacing) \/ 2 - x(d.male))\n    .attr('y', d => y(d.ml))\n    .attr('rx', 10)\n    .attr('ry', 10)\n    .attr('height', y.bandwidth())\n    .attr('width', d => x(d.male))\n    .style('fill', 'url(#bg-gradient14)');\n\n\n  \/\/ Female\n  gF.selectAll('rect')\n    .data(data)\n    .join('rect')\n    .transition()\n    .duration(1000)\n    .attr('x', 0)\n    .attr('y', d => y(d.ml))\n    .attr('rx', 10)\n    .attr('ry', 10)\n    .attr('height', y.bandwidth())\n    .attr('width', d => x(d.female))\n    .style('fill', 'url(#bg-gradient15)');\n  \n\n  \/\/Labels\n  gLabels.selectAll('text')\n    .data(data)\n    .join('text')\n    .attr('x', centreSpacing \/ 2-45)\n    .attr('y', d => y(d.ml) + y.bandwidth() \/ 2+5)\n    .style('font-weight', 600)\n    .text((d, i) => d.ml);\n\n  gLabels\n    .append('text')\n    .text('Years doing Machine Learning')\n    .attr('x', centreSpacing \/ 2-135)\n    .attr('y', -1)\n    .style('font-size', '20px')\n    .style('font-weight', 600);\n\n\n  \/\/ Axis Update\n  xAxis\n    .transition()\n    .duration(1000)\n    .call(d3.axisBottom(x).ticks(3).tickFormat(d3.format(\".0%\")))\n    .selectAll(\"text\")\n      .attr(\"font-size\", \"15px\");\n\n  xAxisReverse\n    .transition()\n    .duration(1000)\n    .call(d3.axisBottom(xReverse).ticks(3).tickFormat(d3.format(\".0%\")))\n    .selectAll(\"text\")\n      .attr(\"font-size\", \"15px\");\n}\n\n\n\/\/ === Years Programming ===\nd3.csv(baseAssetsUrl + \"ml_yrs.csv\").then(function(dataload){\n\n  \/\/ default view\n  var data = dataload.filter(function(d) { \n    var sq = d3.select(\"#filter14\").property(\"value\");\n    return d.year === sq;\n  });\n\n  update(data)\n\n\n  \/\/ on change\n  d3.select(\"#filter14\").on(\"change\", function() {\n\n    var data = dataload.filter(function(d) { \n      var sq = d3.select(\"#filter14\").property(\"value\");\n      return d.year === sq;\n    });\n\n    update(data);\n  });\n\n});\n\n\nfunction create_stacked_bar(data, subgroups, x_global, y_range, color) {\n\n  const groups = data.map(d => d.Year)\n\n  \/\/ Add X axis\n  const x = d3.scaleBand()\n      .domain(groups)\n      .range([0, width\/2.5])\n      .padding([0.2])\n  svg.append(\"g\")\n    .attr(\"transform\", `translate(${x_global}, ${height\/1.01})`)\n    .call(d3.axisBottom(x).tickSizeOuter(0))\n    .selectAll(\"text\")\n      .attr(\"y\", \"10\")\n      .attr(\"x\", \"0\")\n      .attr(\"font-size\", \"15px\")\n      .attr(\"font-weight\", 300)\n      .attr(\"text-anchor\", \"middle\")\n\n  \/\/ Add Y axis\n  const y = d3.scaleLinear()\n    .domain([0, y_range])\n    .range([ height\/2.3, 0]);\n  svg.append(\"g\")\n  .attr(\"class\", \"axisHidden\")\n  .attr(\"transform\", `translate(${x_global}, ${height\/1.85})`)\n    .call(d3.axisLeft(y).ticks(0))\n    .selectAll(\"text\")\n      .attr(\"font-size\", \"11px\")\n      .attr(\"font-weight\", 300);\n\n  \/\/s Stack data\n  const stackedData = d3.stack()\n    .keys(subgroups)\n    (data)\n\n  \/\/ Show the bars\n  const bars = svg.append(\"g\")\n    .selectAll(\"g\")\n    .data(stackedData)\n    .join(\"g\")\n    .attr(\"transform\", `translate(${x_global}, ${height\/1.85})`)\n      .attr(\"fill\", d => color(d.key))\n      .attr(\"stroke\", \"black\")\n      .attr(\"stroke-width\", 0.2)\n      .attr(\"class\", d => \"myRect \" + d.key ) \n      .selectAll(\"rect\")\n      .data(d => d)\n      .join(\"rect\")\n        .attr(\"x\", d => x(d.data.Year))\n        .attr(\"y\", d => y(d[1]))\n        .attr(\"height\", d => y(d[0]) - y(d[1]))\n        .attr(\"width\",x.bandwidth())\n\n  \/\/ Interactive\n  var div = d3.select(\"body\").append(\"div\")\n  .attr(\"class\", \"tooltip-donut\")\n  .style(\"opacity\", 0);\n\n  bars\n    .on('mouseenter', function (event, dt) {\n    \/\/ MOUSE ON\n    const subGroupName = d3.select(this.parentNode).datum().key \n          \n    d3.selectAll(\".myRect\").style(\"opacity\", 0.2)  \n          \n    d3.selectAll(\".\"+subGroupName).style(\"opacity\",1)\n\n\n    \/\/ Makes the new div appear\n    div.transition()\n        .duration(50)\n        .style(\"opacity\", 1);\n\n    const subgroupName = d3.select(this.parentNode).datum().key;\n    const subgroupValue = dt.data[subgroupName];\n\n    div.html(\"Alg: \" + subgroupName + \"<br>\" + \"Perc: \" + subgroupValue +'%')\n        .style(\"left\", (event.pageX) + \"px\")\n        .style(\"top\", (event.pageY-30) + \"px\");\n\n\n  })\n    \/\/ MOUSE LEAVE\n    .on('mouseleave', function () {\n      d3.selectAll(\".myRect\")\n          .style(\"opacity\",1) \n\n      \/\/ New div dissapears\n      div.transition()\n          .duration('50')\n          .style(\"opacity\", 0);\n      svg.selectAll('.divergence').remove()\n    })\n\n}\n\n\n\/\/ === Preferences ===\nd3.csv(baseAssetsUrl + \"algorithm_man.csv\").then(function(data){\n\n  const x_global = 50\n  const y_range = 230\n  const subgroups = data.columns.slice(1)\n  const color = d3.scaleOrdinal()\n    .domain(subgroups)\n    .range([\"#633725\", \"#734b3b\", \"#825f51\",\n            \"#927366\", \"#a1877c\", \"#b19b92\",\n            \"#c1afa8\", \"#d0c3be\", \"#e0d7d3\"]);\n\n  svg.append(\"text\")\n  .attr(\"y\", \"55%\")\n  .attr(\"x\", \"25%\")\n  .attr(\"font-size\", \"22px\")\n  .attr(\"text-anchor\", \"middle\")\n  .attr(\"font-weight\", 600)\n  .text(\"Gentlemen: ML Algorithms Preferences\")\n\n  create_stacked_bar(data, subgroups, x_global, y_range, color)\n  \n});\n\nd3.csv(baseAssetsUrl + \"algorithm_woman.csv\").then(function(data){\n\n  const x_global = 500\n  const y_range = 230\n  const subgroups = data.columns.slice(1)\n  const color = d3.scaleOrdinal()\n    .domain(subgroups)\n    .range([\"#728551\", \"#809162\", \"#8e9d74\",\n            \"#9caa85\", \"#aab697\", \"#b9c2a8\",\n            \"#c7ceb9\", \"#d5dacb\", \"#e3e7dc\"]);\n\n  svg.append(\"text\")\n  .attr(\"y\", \"55%\")\n  .attr(\"x\", \"70%\")\n  .attr(\"font-size\", \"22px\")\n  .attr(\"text-anchor\", \"middle\")\n  .attr(\"font-weight\", 600)\n  .text(\"Ladies: ML Algorithms Preferences\")\n\n  create_stacked_bar(data, subgroups, x_global, y_range, color)\n  \n});\n\n});\n'''\n\n\nh = display(HTML(htmlt))\nj = py_display.Javascript(js_t)\npy_display.display_javascript(j)","676599e3":"cols = list(df.columns[67:79])\nnew_names = [\"Scikit-learn\", \"TensorFlow\", \"Keras\", \"PyTorch\", \"Fast.ai\",\n             \"MXNet\", \"XGBoost\", \"LightGBM\", \"CatBoost\", \"Prophet\", \"H2O\",\n             \"Caret\"]\n\nml = get_data_multiple_answers(cols, new_names)\nml = ml[ml[\"Year\"]!=2017]\n\nml_man = ml[ml[\"Gender\"] == \"Man\"].drop(columns=[\"Gender\"])\nml_woman = ml[ml[\"Gender\"] == \"Woman\"].drop(columns=[\"Gender\"])\n\nml_man.to_csv(\"ml_man.csv\", index=False)\nml_woman.to_csv(\"ml_woman.csv\", index=False)\n\n# Save usa.png img as well\nim = imageio.imread('..\/input\/kaggle-data-science-survey-20172021\/images\/man15.png')\nImage.fromarray(im).save(\"man15.png\")\n\nim = imageio.imread('..\/input\/kaggle-data-science-survey-20172021\/images\/lady15.png')\nImage.fromarray(im).save(\"lady15.png\")\n\nhtmlt = '''\n<!-- Bootstrap -->\n<link rel=\"stylesheet\" href=\"https:\/\/stackpath.bootstrapcdn.com\/bootstrap\/4.4.1\/css\/bootstrap.min.css\" integrity=\"sha384-Vkoo8x4CGsO3+Hhxv8T\/Q5PaXtkKtu6ug5TOeNV6gBiFeWPGFN9MuhOf23Q9Ifjh\" crossorigin=\"anonymous\">\n<!-- Style -->\n<style>\n\t.all15 {\n\t\tfont-family: \"Times New Roman\", Times, serif;\n\t\toverflow-x: hidden;\n\t\twidth: 98%;\n\t\tbackground-color:#e0c9a6;\n\t\t\/* background-image : url(\"bkg.jpg\"); changed via js *\/\n\t}\n\t.all15 .svg-container {\n\t\tdisplay: inline-block;\n\t\tposition: relative;\n\t\twidth: 100%;\n\t\tpadding-bottom: 54%;\n\t\tvertical-align: top;\n\t\toverflow: hidden;\n\t}\n\t.svg-content {\n\t\tdisplay: inline-block;\n\t\tposition: absolute;\n\t\ttop: 0;\n\t\tleft: 0;\n\t}\n\n\t.axisHidden path{\n\t\tstroke: #e0c9a6;\n\t}\n\n\t.axisHidden line{\n\t\tstroke: #e0c9a6;\n\t}\n\n\t.annotation.color text {\n\t\tfill: #000000;\n\t}\n\n\t@font-face {\n\t\tfont-family: parklane;\n\t\tsrc: url(https:\/\/h4ks.net\/ParkLaneNF.otf);\n\t\t}\n\n\tdiv.tooltip-donut {\n\t\tposition: absolute;\n\t\ttext-align: center;\n\t\tpadding: .3rem;\n\t\tbackground: #FFFFFF;\n\t\tcolor: #000000;\n\t\tborder: 1px solid #000000;\n\t\tborder-radius: 8px;\n\t\tpointer-events: none;\n\t\tfont-size: 2rem;\n\t\tz-index: 99999;\n\t}\n\n<\/style>\n\n<img id=\"baseimg\" src=\"man.png\" style=\"display:none\" \/>\n<div class=\"all15\">\n\t<center><h1 style=\"font-family: parklane\">Machine Learning Blues<\/h1><\/center>\n\t<center><h3><i>- ML Frameworks -<\/i><\/h3><\/center>\n\t<div class=\"row\">\n\t\t<div id=\"map15-gents\" class=\"svg-container\"><\/div>\n\t<\/div>\n\n\t<div class=\"row\">\n\t\t<div id=\"map15-ladies\" class=\"svg-container\"><\/div>\n\t<\/div>\n<\/div>\n'''\n\njs_t = '''\nrequire.config({\n  paths: {\n    d3src: \"https:\/\/d3js.org\/\",\n  },\n  map: {\n    '*': {\n      'd3v6': 'd3src\/d3.v6.min',\n      'd3-selection': 'd3src\/d3-selection.v1.min',\n      'd3-drag': 'd3src\/d3-drag.v1.min',\n      'd3-shape': 'd3src\/d3-shape.v1.min',\n      'd3-path': 'd3src\/d3-path.v1.min',\n      'd3-dispatch': 'd3src\/d3-dispatch.v1.min',\n      'd3-annotation': 'https:\/\/cdnjs.cloudflare.com\/ajax\/libs\/d3-annotation\/2.5.1\/d3-annotation.min.js',\n    }\n  }\n});\n\nrequire([\"d3v6\", \"d3-annotation\"], function(d3, d3Annotation) {\n\n\/\/ Inject d3Annotation methods to d3\nfor (var key in d3Annotation) {\n  d3[key] = d3Annotation[key];\n}\n\n\/\/ Get Assets URL set by Kaggle\nconst baseAssetsUrl = document.getElementById('baseimg').src.replace(\/man.png.*$\/, '');\n\nconst $all15 = document.getElementsByClassName('all15')[0];\n$all15.style.backgroundImage = `url(\"${baseAssetsUrl}bkg.jpg\")`;\n\n\/\/ Set the SVG area\nconst margin = { LEFT: 20, RIGHT: 40, TOP: 15, BOTTOM: 0 }\nconst width = 950 - margin.LEFT - margin.RIGHT\nconst height = 500 - margin.TOP - margin.BOTTOM\nconst chart_size = 120\nconst x_global = 150\n\nfunction create_graph(data, svg, name){\n\n  const XY_axis = height\/2-200\n\n  svg.append(\"text\")\n  .attr(\"transform\", `translate(${x_global-60}, ${XY_axis-10})`)\n  .attr(\"font-size\", \"24px\")\n  .attr(\"text-anchor\", \"middle\")\n  .attr(\"font-weight\", 600)\n  .text(name)\n\n  data.forEach(d => {\n    d.Year = Number(d.Year)\n  })\n\n  \/\/ List of groups\n  var keys = data.columns.slice(1)\n\n  \/\/ Stacking\n  var series = d3.stack()\n    .keys(keys)\n    .offset(d3.stackOffsetSilhouette)\n    (data)\n\n  \/\/ X Axis\n  var x = d3.scaleLinear()\n    .domain(d3.extent(data, d => d.Year))\n    .range([0, width\/1.5])\n\n  var xAxis = g => g\n    .attr(\"transform\", `translate(${x_global}, ${XY_axis})`)\n    .call(d3.axisBottom(x)\n            .tickSize(height\/1.2).ticks(4).tickFormat(d3.format(\"d\")))\n    .call(g => g.select(\".domain\").remove())\n    .call(g => g.selectAll(\".tick line\")\n                .attr(\"stroke\", \"#3A3A3A\")\n                .attr('stroke-dasharray', '5 5'))\n    .call(g => g.selectAll(\".tick\")\n                .select('text')\n                .attr('fill', \"#3A3A3A\")\n                .style(\"font-size\", 15))\n\n  \/\/ Y Axis\n  var y = d3.scaleLinear()\n  .domain([-chart_size, chart_size])\n  .range([height\/1.2, 0])\n  svg.append(\"g\")\n  .attr(\"class\", \"axisHidden\")\n  .attr(\"transform\", `translate(${x_global}, ${XY_axis})`)\n    .call(d3.axisLeft(y).ticks(0))\n\n  \/\/ Area Chart\n  var area = d3.area()\n  .x(d => x(d.data.Year))\n  .y0(d => y(d[0]))\n  .y1(d => y(d[1]))\n\n  \/\/ Color\n  const color = d3.scaleOrdinal()\n    .domain(keys)\n     .range([\"#D67A83\", \"#D05257\", \"#D87F58\",\"#CE8E27\",\n     \"#8FB79C\", \"#83AF92\", \"#588968\", \"#0B656F\", \"#74A5D2\",\n      \"#226BBF\", \"#184E8B\", \"#BA3B8B\"])\n\n  \/\/ Show\n  const path = svg.append(\"g\")\n    .selectAll(\"path\")\n    .data(series)\n    .join(\"path\")\n    .attr(\"transform\", `translate(${x_global}, ${XY_axis})`)\n      .attr(\"data-label\", d => d.key)\n      .attr(\"fill\", ({key}) => color(key))\n      .attr(\"stroke\", \"black\")\n      .attr(\"stroke-width\", 0.2)\n      .attr(\"d\", area)\n      .attr(\"opacity\", 0.8)\n\n  svg.append(\"g\")\n      .call(xAxis)\n\n  \/\/ ==== Interactive ====\n  const hover = (svg, path) => {\n  \n    const line = svg.append(\"g\")\n         .attr(\"display\", \"none\");\n  \n    line.append(\"g\")\n        .selectAll(\"line\")\n        .data(series)\n        .join(\"line\")\n        .attr(\"class\", \"cursor-line\")\n        .attr(\"fill\", \"#fff\")\n        .attr(\"stroke-width\", 0.8)\n        .attr(\"x1\", 10)\n        .attr(\"y1\", height)\n        .attr(\"x2\", 10)\n        .attr(\"y2\", 10);\n\n    line.append(\"text\")\n      .attr(\"class\", \"text-year\")\n      .attr(\"font-size\", 14)\n      .attr(\"x\", 0)\n      .attr(\"y\", 26)\n      .attr(\"transform\", \"rotate(-90 20 20) translate(0, -20)\");\n    \n    line.append(\"g\")\n        .selectAll(\"text\")\n        .data(series)\n        .join(\"text\")\n        .attr(\"class\", \"text-label\")\n        .attr(\"font-weight\", 900)\n        .attr(\"font-size\", 17)\n        .attr(\"y\", height-10)\n        .attr(\"x\", -8)\n        .attr(\"transform\", \n        \"rotate(-90 10 460)\");\n\n    line.append(\"g\")\n        .selectAll(\"text\")\n        .data(data)\n        .join(\"text\")\n        .attr(\"class\", \"text-value\")\n        .attr(\"font-weight\", 700)\n        .attr(\"font-size\", 14)\n        .attr(\"y\", height-(height*0.94))\n        .attr(\"x\", 14);\n\n    const mousemove = (event) => {\n  \n      event?.preventDefault();\n      const pointer = d3.pointer(event);\n\n      const xm = x.invert(pointer[0]);\n      const label = d3.select(event.target).attr(\"data-label\");\n  \n      line.attr(\"transform\", `translate(${pointer[0]}, 0)`)\n          .style(\"visibility\", \"inherit\");\n    \n          line.select(\".text-year\")\n          .text(parseInt(xm));\n      \n      line.selectAll(\".text-value\")\n        .text(d => d.Year === parseInt(xm) ? d[label]+\"%\" : \"\");\n\n      line.selectAll(\".text-label\")\n        .style(\"visibility\", \"hidden\")\n        .filter(d => d.key === label)\n        .style(\"visibility\", \"inherit\")\n        .attr(\"fill\", d => d.key === label ? color(d.key) : \"#000\")\n        .text(label);\n      \n      line.selectAll(\".cursor-line\")\n        .attr(\"stroke\", \"fff0\")\n        .filter(d => d.key === label)\n        .attr(\"stroke\", d => d.key === label ? color(d.key) : \"#fff0\")\n      \n      path.attr(\"opacity\", d => d.key === label ? 0.8 : 0.3);\n      \n      if (label === null) {\n        path.attr(\"opacity\", 0.8);\n        line.style(\"visibility\", \"hidden\");\n      }\n    }\n\n    const mouseenter = () => {\n      line.attr(\"display\", null);\n    }\n  \n    const mouseleave = () => {\n      line.attr(\"display\", \"none\");\n    }\n\n    svg\n        .on(\"mousemove\", mousemove)\n        .on(\"mouseenter\", mouseenter)\n        .on(\"mouseleave\", mouseleave)\n\n  }\n\n  svg.call(hover, path);\n}\n\n\/\/ ===== MEN =====\nconst svg1 = d3.select(\"#map15-gents\").append(\"svg\")\n\/\/ .attr(\"style\", \"outline: thin solid red;\")\n  .attr(\"preserveAspectRatio\", \"xMinYMin meet\")\n  .attr(\"viewBox\", \"0 0 950 500\")\n  .classed(\"svg-content\", true)\n  .attr(\"transform\",\n   `translate(${margin.LEFT}, ${margin.TOP})`)\n\n\/\/ Gentleman\nsvg1.append(\"image\")\n.attr(\"xlink:href\", baseAssetsUrl+\"man15.png\")\n    .attr(\"x\", \"-20%\")\n    .attr(\"y\", \"13%\")\n    .attr(\"width\", 390)\n    .attr(\"height\", 390)\n    .style(\"opacity\", 1)\n\n\/\/ Comment\nconst annot1 = [\n  {\n  note: { \n    label: \"There is no substantial increase nor decrease in any of the frameworks for both men & women.\",\n    title: \"Steady Trend\",\n    wrap: 100, \n    padding: 5, \n  },\n  className: \"color\",\n  \/\/ connector: { end: \"arrow\" },\n  color: [\"#ffffff\"],\n  x: 780,\n  y: 350,\n  dy: -1,\n  dx: +1\n}]\n\nsvg1.append(\"g\")\n  .style('font-size', 17)\n  .call(d3.annotation()\n          .annotations(annot1))\n\nd3.csv(baseAssetsUrl + \"ml_man.csv\").then(function(data){\n\n  const name = \"Gentlemen\"\n  create_graph(data, svg1, name)\n\n});\n\n\/\/ ===== WOMEN =====\nconst svg2 = d3.select(\"#map15-ladies\").append(\"svg\")\n\/\/ .attr(\"style\", \"outline: thin solid red;\")\n.attr(\"preserveAspectRatio\", \"xMinYMin meet\")\n.attr(\"viewBox\", \"0 0 950 500\")\n.classed(\"svg-content\", true)\n.attr(\"transform\",\n  `translate(${margin.LEFT}, ${margin.TOP})`)\n\n\/\/ Lady\nsvg2.append(\"image\")\n.attr(\"xlink:href\", baseAssetsUrl+\"lady15.png\")\n.attr(\"x\", \"-17%\")\n.attr(\"y\", \"12%\")\n.attr(\"width\", 450)\n.attr(\"height\", 450)\n.style(\"opacity\", 1)\n\n\/\/ Comment\nconst annot2 = [\n  {\n  note: { \n    label: \"Overall, ladies have smaller interest for ml frameworks than the gents do.\",\n    title: \"Less Usage\",\n    wrap: 100, \n    padding: 5, \n  },\n  className: \"color\",\n  \/\/ connector: { end: \"arrow\" },\n  color: [\"#ffffff\"],\n  x: 780,\n  y: 350,\n  dy: -1,\n  dx: +1\n}]\n\nsvg2.append(\"g\")\n  .style('font-size', 17)\n  .call(d3.annotation()\n          .annotations(annot2))\n\nd3.csv(baseAssetsUrl + \"ml_woman.csv\").then(function(data){\n\n  const name = \"Ladies\"\n  create_graph(data, svg2, name)\n\n});\n\n});\n'''\n\n\nh = display(HTML(htmlt))\nj = py_display.Javascript(js_t)\npy_display.display_javascript(j)","10394a2b":"# ===== Computer Vision =====\ncols = list(df.columns[96:100])\nnew_names = [\"Image segmentation (U-Net)\", \"Object detection (RetinaNet)\", \"Image classification (ResNet)\",\n             \"Generative Networks (GAN)\"]\n\ncv = get_data_multiple_answers(cols, new_names)\ncv = cv[(cv[\"Year\"]!=2017) & (cv[\"Year\"]!=2018)]\ncv.columns = ['Year', 'Gender', 'ImageSegmentation', 'ObjectDetection',\n              'ImageClassification', 'GenerativeNetworks']\n\ncv_man = cv[cv[\"Gender\"] == \"Man\"].drop(columns=[\"Gender\"])\ncv_man = cv_man.sort_values(cv_man.last_valid_index(), axis=1,\n                    ascending=False)\ncv_woman = cv[cv[\"Gender\"] == \"Woman\"].drop(columns=[\"Gender\"])\ncv_woman = cv_woman.sort_values(cv_woman.last_valid_index(), axis=1,\n                    ascending=False)\n\ncv_man.to_csv(\"cv_man.csv\", index=False)\ncv_woman.to_csv(\"cv_woman.csv\", index=False)\n\n# ===== NLP =====\ncols = list(df.columns[103:106])\nnew_names = [\"Encoder-Decorder models (seq2seq)\", \"Contextualized embeddings (ELMo)\",\n             \"Transformer Language Models (BERT)\"]\n\nnlp = get_data_multiple_answers(cols, new_names)\nnlp = nlp[(nlp[\"Year\"]!=2017) & (nlp[\"Year\"]!=2018)]\nnlp.columns = ['Year', 'Gender', 'EncoderDecorderModels',\n               'ContextualizedEmbeddings', 'TransformerLanguageModels']\n\nnlp_man = nlp[nlp[\"Gender\"] == \"Man\"].drop(columns=[\"Gender\"])\nnlp_man = nlp_man.sort_values(nlp_man.last_valid_index(), axis=1,\n                    ascending=False)\nnlp_woman = nlp[nlp[\"Gender\"] == \"Woman\"].drop(columns=[\"Gender\"])\nnlp_woman = nlp_woman.sort_values(nlp_woman.last_valid_index(), axis=1,\n                    ascending=False)\n\nnlp_man.to_csv(\"nlp_man.csv\", index=False)\nnlp_woman.to_csv(\"nlp_woman.csv\", index=False)\n\n# Save usa.png img as well\nim = imageio.imread('..\/input\/kaggle-data-science-survey-20172021\/images\/man16.png')\nImage.fromarray(im).save(\"man16.png\")\n\nim = imageio.imread('..\/input\/kaggle-data-science-survey-20172021\/images\/lady16.png')\nImage.fromarray(im).save(\"lady16.png\")\n\nhtmlt = '''\n<!-- Bootstrap -->\n<link rel=\"stylesheet\" href=\"https:\/\/stackpath.bootstrapcdn.com\/bootstrap\/4.4.1\/css\/bootstrap.min.css\" integrity=\"sha384-Vkoo8x4CGsO3+Hhxv8T\/Q5PaXtkKtu6ug5TOeNV6gBiFeWPGFN9MuhOf23Q9Ifjh\" crossorigin=\"anonymous\">\n<!-- Style -->\n<style>\n\t.all16 {\n\t\tfont-family: \"Times New Roman\", Times, serif;\n\t\toverflow-x: hidden;\n\t\twidth: 98%;\n\t\tbackground-color:#e0c9a6;\n\t\t\/* background-image : url(\"bkg.jpg\"); changed via js *\/\n\t}\n\t.all16 .svg-container {\n\t\tdisplay: inline-block;\n\t\tposition: relative;\n\t\twidth: 100%;\n\t\tpadding-bottom: 54%;\n\t\tvertical-align: top;\n\t\toverflow: hidden;\n\t}\n\t.svg-content {\n\t\tdisplay: inline-block;\n\t\tposition: absolute;\n\t\ttop: 0;\n\t\tleft: 0;\n\t}\n\n\t.axisHidden path{\n\t\tstroke: #e0c9a6;\n\t}\n\n\t.axisHidden line{\n\t\tstroke: #e0c9a6;\n\t}\n\n\t.annotation.color text {\n\t\tfill: #000000;\n\t}\n\n\t@font-face {\n\t\tfont-family: parklane;\n\t\tsrc: url(https:\/\/h4ks.net\/ParkLaneNF.otf);\n\t\t}\n\n\tdiv.tooltip-donut {\n\t\tposition: absolute;\n\t\ttext-align: center;\n\t\tpadding: .3rem;\n\t\tbackground: #FFFFFF;\n\t\tcolor: #000000;\n\t\tborder: 1px solid #000000;\n\t\tborder-radius: 8px;\n\t\tpointer-events: none;\n\t\tfont-size: 2rem;\n\t\tz-index: 99999;\n\t}\n\n<\/style>\n\n<img id=\"baseimg\" src=\"man.png\" style=\"display:none\" \/>\n<div class=\"all16\">\n\t<center><h1 style=\"font-family: parklane\">DL: The Visual & The Talk<\/h1><\/center>\n\t<center><h3><i>- Computer Vision & NLP Frameworks -<\/i><\/h3><\/center>\n\t<div class=\"row\">\n\t\t<div id=\"map16-cv\" class=\"svg-container\"><\/div>\n\t<\/div>\n\n\t<div class=\"row\">\n\t\t<div id=\"map16-nlp\" class=\"svg-container\"><\/div>\n\t<\/div>\n<\/div>\n'''\n\njs_t = '''\nrequire.config({\n  paths: {\n    d3src: \"https:\/\/d3js.org\/\",\n  },\n  map: {\n    '*': {\n      'd3v6': 'd3src\/d3.v6.min',\n      'd3-selection': 'd3src\/d3-selection.v1.min',\n      'd3-drag': 'd3src\/d3-drag.v1.min',\n      'd3-shape': 'd3src\/d3-shape.v1.min',\n      'd3-path': 'd3src\/d3-path.v1.min',\n      'd3-dispatch': 'd3src\/d3-dispatch.v1.min',\n      'd3-annotation': 'https:\/\/cdnjs.cloudflare.com\/ajax\/libs\/d3-annotation\/2.5.1\/d3-annotation.min.js',\n    }\n  }\n});\n\nrequire([\"d3v6\", \"d3-annotation\"], function(d3, d3Annotation) {\n\n\/\/ Inject d3Annotation methods to d3\nfor (var key in d3Annotation) {\n  d3[key] = d3Annotation[key];\n}\n\n\/\/ Get Assets URL set by Kaggle\nconst baseAssetsUrl = document.getElementById('baseimg').src.replace(\/man.png.*$\/, '');\n\nconst $all16 = document.getElementsByClassName('all16')[0];\n$all16.style.backgroundImage = `url(\"${baseAssetsUrl}bkg.jpg\")`;\n\n\/\/ Set the SVG area\nconst margin = { LEFT: 20, RIGHT: 40, TOP: 15, BOTTOM: 0 }\nconst width = 950 - margin.LEFT - margin.RIGHT\nconst height = 500 - margin.TOP - margin.BOTTOM\n\n\n\/\/ STACKED CHART\nfunction create_stacked_bar(svg, data, subgroups, x_global,\n   y_range, color, flag) {\n\n  const groups = data.map(d => d.Year)\n\n  \/\/ Add X axis\n  const x = d3.scaleBand()\n      .domain(groups)\n      .range([0, width\/2.3])\n      .padding([0.2])\n  svg.append(\"g\")\n    .attr(\"transform\", `translate(${x_global}, ${height\/1.05})`)\n    .call(d3.axisBottom(x).tickSizeOuter(0))\n    .selectAll(\"text\")\n      .attr(\"y\", \"10\")\n      .attr(\"x\", \"0\")\n      .attr(\"font-size\", \"15px\")\n      .attr(\"font-weight\", 300)\n      .attr(\"text-anchor\", \"middle\")\n\n  \/\/ Add Y axis\n  const y = d3.scaleLinear()\n    .domain([0, y_range])\n    .range([ height\/1.05, 0]);\n  svg.append(\"g\")\n  .attr(\"class\", \"axisHidden\")\n  .attr(\"transform\", `translate(${x_global}, ${height-500})`)\n    .call(d3.axisLeft(y).ticks(0))\n    .selectAll(\"text\")\n      .attr(\"font-size\", \"11px\")\n      .attr(\"font-weight\", 300);\n\n  \/\/s Stack data\n  const stackedData = d3.stack()\n    .keys(subgroups)\n    (data)\n\n  \/\/ Show the bars\n  const bars = svg.append(\"g\")\n    .selectAll(\"g\")\n    .data(stackedData)\n    .join(\"g\")\n    .attr(\"transform\", `translate(${x_global}, ${height-500})`)\n      .attr(\"fill\", d => color(d.key))\n      .attr(\"stroke\", \"black\")\n      .attr(\"stroke-width\", 0.2)\n      .attr(\"class\", d => \"myRect \" + d.key ) \n      .selectAll(\"rect\")\n      .data(d => d)\n      .join(\"rect\")\n        .attr(\"x\", d => x(d.data.Year))\n        .attr(\"y\", d => y(d[1]))\n        .attr(\"height\", d => y(d[0]) - y(d[1]))\n        .attr(\"width\",x.bandwidth())\n\n  \/\/ Interactive\n  var div = d3.select(\"body\").append(\"div\")\n  .attr(\"class\", \"tooltip-donut\")\n  .style(\"opacity\", 0);\n\n  bars\n    .on('mouseenter', function (event, dt) {\n    \/\/ MOUSE ON\n    const subGroupName = d3.select(this.parentNode).datum().key \n          \n    d3.selectAll(\".myRect\").style(\"opacity\", 0.2)  \n          \n    d3.selectAll(\".\"+subGroupName).style(\"opacity\",1)\n\n\n    \/\/ Makes the new div appear\n    div.transition()\n        .duration(50)\n        .style(\"opacity\", 1);\n\n    const subgroupName = d3.select(this.parentNode).datum().key;\n    const subgroupValue = dt.data[subgroupName];\n\n    div.html(flag + \": \" + subgroupName + \"<br>\" + \"Perc: \" + subgroupValue +'%')\n        .style(\"left\", (event.pageX) + \"px\")\n        .style(\"top\", (event.pageY-30) + \"px\");\n\n\n  })\n    \/\/ MOUSE LEAVE\n    .on('mouseleave', function () {\n      d3.selectAll(\".myRect\")\n          .style(\"opacity\",1) \n\n      \/\/ New div dissapears\n      div.transition()\n          .duration('50')\n          .style(\"opacity\", 0);\n      svg.selectAll('.divergence').remove()\n    })\n\n}\n\n\/\/ ===== Computer Vision =====\nconst svg1 = d3.select(\"#map16-cv\").append(\"svg\")\n\/\/ .attr(\"style\", \"outline: thin solid red;\")\n  .attr(\"preserveAspectRatio\", \"xMinYMin meet\")\n  .attr(\"viewBox\", \"0 0 950 500\")\n  .classed(\"svg-content\", true)\n  .attr(\"transform\",\n   `translate(${margin.LEFT}, ${margin.TOP})`)\n\nsvg1.append(\"text\")\n.attr(\"y\", \"8%\")\n.attr(\"x\", \"-27%\")\n.attr(\"font-size\", \"30px\")\n.attr(\"text-anchor\", \"middle\")\n.attr(\"transform\", \"rotate(-90)\")\n.attr(\"font-family\", \"parklane\")\n.text(\"Computer Vision\")\n\n\/\/ Ladies\nsvg1.append(\"image\")\n.attr(\"xlink:href\", baseAssetsUrl+\"lady16.png\")\n    .attr(\"x\", \"68%\")\n    .attr(\"y\", \"13%\")\n    .attr(\"width\", 210)\n    .attr(\"height\", 210)\n    .style(\"opacity\", 1)\n\n\nd3.csv(baseAssetsUrl + \"cv_man.csv\").then(function(data){\n\n  const x_global = 80\n  const y_range = 80\n  const subgroups = data.columns.slice(1)\n  const color = d3.scaleOrdinal()\n    .domain(subgroups)\n    .range([\"#284a5d\", \"#5f7384\", \"#90a6b3\",\n            \"#595052\"]);\n  const flag = \"CV\"\n\n  svg1.append(\"text\")\n  .attr(\"y\", \"10%\")\n  .attr(\"x\", \"28%\")\n  .attr(\"font-size\", \"22px\")\n  .attr(\"text-anchor\", \"middle\")\n  .attr(\"font-weight\", 600)\n  .text(\"Gentlemen\")\n\n  create_stacked_bar(svg1, data, subgroups,\n     x_global, y_range, color, flag)\n\n});\n\nd3.csv(baseAssetsUrl + \"cv_woman.csv\").then(function(data){\n\n  const x_global = 500\n  const y_range = 80\n  const subgroups = data.columns.slice(1)\n  const color = d3.scaleOrdinal()\n    .domain(subgroups)\n    .range([\"#8a3223\", \"#aa5549\", \"#bf897a\",\n            \"#c26e4c\"]);\n  const flag = \"CV\"\n\n  svg1.append(\"text\")\n  .attr(\"y\", \"10%\")\n  .attr(\"x\", \"73%\")\n  .attr(\"font-size\", \"22px\")\n  .attr(\"text-anchor\", \"middle\")\n  .attr(\"font-weight\", 600)\n  .text(\"Ladies\")\n\n  create_stacked_bar(svg1, data, subgroups,\n     x_global, y_range, color, flag)\n\n});\n\n\n\n\/\/ ===== NLP =====\nconst svg2 = d3.select(\"#map16-nlp\").append(\"svg\")\n\/\/ .attr(\"style\", \"outline: thin solid red;\")\n.attr(\"preserveAspectRatio\", \"xMinYMin meet\")\n.attr(\"viewBox\", \"0 0 950 500\")\n.classed(\"svg-content\", true)\n.attr(\"transform\",\n  `translate(${margin.LEFT}, ${margin.TOP})`)\n\n\/\/ Gents\nsvg2.append(\"image\")\n.attr(\"xlink:href\", baseAssetsUrl+\"man16.png\")\n.attr(\"x\", \"6%\")\n.attr(\"y\", \"12%\")\n.attr(\"width\", 220)\n.attr(\"height\", 220)\n.style(\"opacity\", 1)\n\nsvg2.append(\"text\")\n.attr(\"y\", \"8%\")\n.attr(\"x\", \"-27%\")\n.attr(\"font-size\", \"30px\")\n.attr(\"text-anchor\", \"middle\")\n.attr(\"transform\", \"rotate(-90)\")\n.attr(\"font-family\", \"parklane\")\n.text(\"Natural Lang. Processing\")\n\nd3.csv(baseAssetsUrl + \"nlp_man.csv\").then(function(data){\n\n  const x_global = 80\n  const y_range = 50\n  const subgroups = data.columns.slice(1)\n  const color = d3.scaleOrdinal()\n    .domain(subgroups)\n    .range([\"#284a5d\", \"#5f7384\", \"#90a6b3\"]);\n  const flag = \"NLP\"\n\n  svg2.append(\"text\")\n  .attr(\"y\", \"10%\")\n  .attr(\"x\", \"28%\")\n  .attr(\"font-size\", \"22px\")\n  .attr(\"text-anchor\", \"middle\")\n  .attr(\"font-weight\", 600)\n  .text(\"Gentlemen\")\n\n  create_stacked_bar(svg2, data, subgroups,\n     x_global, y_range, color, flag)\n\n});\n\nd3.csv(baseAssetsUrl + \"nlp_woman.csv\").then(function(data){\n\n  const x_global = 500\n  const y_range = 50\n  const subgroups = data.columns.slice(1)\n  const color = d3.scaleOrdinal()\n    .domain(subgroups)\n    .range([\"#8a3223\", \"#aa5549\", \"#bf897a\"]);\n  const flag = \"NLP\"\n\n  svg2.append(\"text\")\n  .attr(\"y\", \"10%\")\n  .attr(\"x\", \"73%\")\n  .attr(\"font-size\", \"22px\")\n  .attr(\"text-anchor\", \"middle\")\n  .attr(\"font-weight\", 600)\n  .text(\"Ladies\")\n\n  create_stacked_bar(svg2, data, subgroups,\n     x_global, y_range, color, flag)\n\n});\n\n});\n'''\n\n\nh = display(HTML(htmlt))\nj = py_display.Javascript(js_t)\npy_display.display_javascript(j)","cf7f229c":"cols = list(df.columns[183:192])\nnew_names = [\"NeptuneAi\", \"WeightsAndBiases\", \"CometMl\",\n             \"SacredAndOmniboard\", \"TensorBoard\", \"GuildAi\",\n             \"Polyaxon\", \"DominoModelMonitor\", \"None\"]\n\nexp = get_data_multiple_answers(cols, new_names)\nexp = exp[(exp[\"Year\"]==2020) | (exp[\"Year\"]==2021)]\n\nexp_man = exp[exp[\"Gender\"] == \"Man\"].drop(columns=[\"Gender\"])\nexp_man = exp_man.sort_values(exp_man.last_valid_index(), axis=1,\n                    ascending=False)\nexp_woman = exp[exp[\"Gender\"] == \"Woman\"].drop(columns=[\"Gender\"])\nexp_woman = exp_woman.sort_values(exp_woman.last_valid_index(), axis=1,\n                    ascending=False)\n\nexp_man.to_csv(\"exp_man.csv\", index=False)\nexp_woman.to_csv(\"exp_woman.csv\", index=False)\n\n# Save usa.png img as well\nim = imageio.imread('..\/input\/kaggle-data-science-survey-20172021\/images\/man17.png')\nImage.fromarray(im).save(\"man17.png\")\n\nim = imageio.imread('..\/input\/kaggle-data-science-survey-20172021\/images\/lady17.png')\nImage.fromarray(im).save(\"lady17.png\")\n\nhtmlt = '''\n<!-- Bootstrap -->\n<link rel=\"stylesheet\" href=\"https:\/\/stackpath.bootstrapcdn.com\/bootstrap\/4.4.1\/css\/bootstrap.min.css\" integrity=\"sha384-Vkoo8x4CGsO3+Hhxv8T\/Q5PaXtkKtu6ug5TOeNV6gBiFeWPGFN9MuhOf23Q9Ifjh\" crossorigin=\"anonymous\">\n<!-- Style -->\n<style>\n\t.all17 {\n\t\tfont-family: \"Times New Roman\", Times, serif;\n\t\toverflow-x: hidden;\n\t\twidth: 98%;\n\t\tbackground-color:#e0c9a6;\n\t\t\/* background-image : url(\"bkg.jpg\"); changed via js *\/\n\t}\n\t.all17 .svg-container {\n\t\tdisplay: inline-block;\n\t\tposition: relative;\n\t\twidth: 100%;\n\t\tpadding-bottom: 80%;\n\t\tvertical-align: top;\n\t\toverflow: hidden;\n\t}\n\t.svg-content {\n\t\tdisplay: inline-block;\n\t\tposition: absolute;\n\t\ttop: 0;\n\t\tleft: 0;\n\t}\n\n\t.axisHidden path{\n\t\tstroke: #e0c9a6;\n\t}\n\n\t.axisHidden line{\n\t\tstroke: #e0c9a6;\n\t}\n\n\t.annotation.color text {\n\t\tfill: #000000;\n\t}\n\n\t@font-face {\n\t\tfont-family: parklane;\n\t\tsrc: url(https:\/\/h4ks.net\/ParkLaneNF.otf);\n\t\t}\n\n\tdiv.tooltip-donut {\n\t\tposition: absolute;\n\t\ttext-align: center;\n\t\tpadding: .3rem;\n\t\tbackground: #FFFFFF;\n\t\tcolor: #000000;\n\t\tborder: 1px solid #000000;\n\t\tborder-radius: 8px;\n\t\tpointer-events: none;\n\t\tfont-size: 2rem;\n\t\tz-index: 99999;\n\t}\n\n<\/style>\n\n<img id=\"baseimg\" src=\"man.png\" style=\"display:none\" \/>\n<div class=\"all17\">\n\t<center><h1 style=\"font-family: parklane\">Excuse me, do you experiment?<\/h1><\/center>\n\t<center><h3><i>- Tools used for ML Experiment Tracking -<\/i><\/h3><\/center>\n\t<div class=\"row\">\n\t\t<div id=\"map17\" class=\"svg-container\"><\/div>\n\t<\/div>\n<\/div>\n'''\n\njs_t = '''\nrequire.config({\n  paths: {\n    d3src: \"https:\/\/d3js.org\/\",\n  },\n  map: {\n    '*': {\n      'd3v6': 'd3src\/d3.v6.min',\n      'd3-selection': 'd3src\/d3-selection.v1.min',\n      'd3-drag': 'd3src\/d3-drag.v1.min',\n      'd3-shape': 'd3src\/d3-shape.v1.min',\n      'd3-path': 'd3src\/d3-path.v1.min',\n      'd3-dispatch': 'd3src\/d3-dispatch.v1.min',\n      'd3-annotation': 'https:\/\/cdnjs.cloudflare.com\/ajax\/libs\/d3-annotation\/2.5.1\/d3-annotation.min.js',\n    }\n  }\n});\n\nrequire([\"d3v6\", \"d3-annotation\"], function(d3, d3Annotation) {\n\n\/\/ Inject d3Annotation methods to d3\nfor (var key in d3Annotation) {\n  d3[key] = d3Annotation[key];\n}\n\n\/\/ Get Assets URL set by Kaggle\nconst baseAssetsUrl = document.getElementById('baseimg').src.replace(\/man.png.*$\/, '');\n\nconst $all17 = document.getElementsByClassName('all17')[0];\n$all17.style.backgroundImage = `url(\"${baseAssetsUrl}bkg.jpg\")`;\n\n\n\/\/ Set the SVG area\nconst margin = { LEFT: 20, RIGHT: 40, TOP: 15, BOTTOM: 0 }\nconst width = 950 - margin.LEFT - margin.RIGHT\nconst height = 700 - margin.TOP - margin.BOTTOM\nconst centreSpacing = 100\n\nconst svg = d3.select(\"#map17\").append(\"svg\")\n\/\/ .attr(\"style\", \"outline: thin solid red;\")\n  .attr(\"preserveAspectRatio\", \"xMinYMin meet\")\n  .attr(\"viewBox\", \"0 0 950 700\")\n  .classed(\"svg-content\", true)\n  .attr(\"transform\",\n   `translate(${margin.LEFT}, ${margin.TOP})`)\n\n\/\/ Gentleman\nsvg.append(\"image\")\n.attr(\"xlink:href\", baseAssetsUrl+\"man17.png\")\n    .attr(\"x\", \"23%\")\n    .attr(\"y\", \"7%\")\n    .attr(\"width\", 230)\n    .attr(\"height\", 230)\n    .style(\"opacity\", 1)\n\n\/\/ Lady\nsvg.append(\"image\")\n.attr(\"xlink:href\", baseAssetsUrl+\"lady17.png\")\n.attr(\"x\", \"52%\")\n.attr(\"y\", \"18%\")\n.attr(\"width\", 270)\n.attr(\"height\", 270)\n.style(\"opacity\", 1)\n\n\nfunction create_stacked_bar(data, subgroups, x_global, y_range, color) {\n\n  const groups = data.map(d => d.Year)\n\n  \/\/ Add X axis\n  const x = d3.scaleBand()\n      .domain(groups)\n      .range([0, width\/2.5])\n      .padding([0.2])\n  svg.append(\"g\")\n    .attr(\"transform\", `translate(${x_global}, ${height\/1.25})`)\n    .call(d3.axisBottom(x).tickSizeOuter(0))\n    .selectAll(\"text\")\n      .attr(\"y\", \"10\")\n      .attr(\"x\", \"0\")\n      .attr(\"font-size\", \"15px\")\n      .attr(\"font-weight\", 300)\n      .attr(\"text-anchor\", \"middle\")\n\n  \/\/ Add Y axis\n  const y = d3.scaleLinear()\n    .domain([0, y_range])\n    .range([ height\/2.3, 0]);\n  svg.append(\"g\")\n  .attr(\"class\", \"axisHidden\")\n  .attr(\"transform\", `translate(${x_global}, ${height\/2-100})`)\n    .call(d3.axisLeft(y).ticks(0))\n    .selectAll(\"text\")\n      .attr(\"font-size\", \"11px\")\n      .attr(\"font-weight\", 300);\n\n  \/\/s Stack data\n  const stackedData = d3.stack()\n    .keys(subgroups)\n    (data)\n\n  \/\/ Show the bars\n  const bars = svg.append(\"g\")\n    .selectAll(\"g\")\n    .data(stackedData)\n    .join(\"g\")\n    .attr(\"transform\", `translate(${x_global}, ${height\/2-100})`)\n      .attr(\"fill\", d => color(d.key))\n      .attr(\"stroke\", \"black\")\n      .attr(\"stroke-width\", 0.2)\n      .attr(\"class\", d => \"myRect \" + d.key ) \n      .selectAll(\"rect\")\n      .data(d => d)\n      .join(\"rect\")\n        .attr(\"x\", d => x(d.data.Year))\n        .attr(\"y\", d => y(d[1]))\n        .attr(\"height\", d => y(d[0]) - y(d[1]))\n        .attr(\"width\",x.bandwidth())\n\n  \/\/ Interactive\n  var div = d3.select(\"body\").append(\"div\")\n  .attr(\"class\", \"tooltip-donut\")\n  .style(\"opacity\", 0);\n\n  bars\n    .on('mouseenter', function (event, dt) {\n    \/\/ MOUSE ON\n    const subGroupName = d3.select(this.parentNode).datum().key \n          \n    d3.selectAll(\".myRect\").style(\"opacity\", 0.2)  \n          \n    d3.selectAll(\".\"+subGroupName).style(\"opacity\",1)\n\n\n    \/\/ Makes the new div appear\n    div.transition()\n        .duration(50)\n        .style(\"opacity\", 1);\n\n    const subgroupName = d3.select(this.parentNode).datum().key;\n    const subgroupValue = dt.data[subgroupName];\n\n    div.html(\"Exp: \" + subgroupName + \"<br>\" + \"Perc: \" + subgroupValue +'%')\n        .style(\"left\", (event.pageX) + \"px\")\n        .style(\"top\", (event.pageY-30) + \"px\");\n\n\n  })\n    \/\/ MOUSE LEAVE\n    .on('mouseleave', function () {\n      d3.selectAll(\".myRect\")\n          .style(\"opacity\",1) \n\n      \/\/ New div dissapears\n      div.transition()\n          .duration('50')\n          .style(\"opacity\", 0);\n      svg.selectAll('.divergence').remove()\n    })\n\n}\n\n\n\/\/ === Preferences ===\nd3.csv(baseAssetsUrl + \"exp_man.csv\").then(function(data){\n\n  const x_global = 50\n  const y_range = 42\n  const subgroups = data.columns.slice(1)\n  const color = d3.scaleOrdinal()\n    .domain(subgroups)\n    .range([\"#233345\", \"#394758\", \"#4f5c6a\",\n            \"#65707d\", \"#7b858f\", \"#9199a2\",\n            \"#a7adb5\", \"#bdc2c7\", \"#d3d6da\"]);\n\n  svg.append(\"text\")\n  .attr(\"y\", \"5%\")\n  .attr(\"x\", \"25%\")\n  .attr(\"font-size\", \"25px\")\n  .attr(\"text-anchor\", \"middle\")\n  .attr(\"font-weight\", 600)\n  .text(\"Gentlemen: Experiment Tracking\")\n\n  create_stacked_bar(data, subgroups, x_global, y_range, color)\n  \n});\n\nd3.csv(baseAssetsUrl + \"exp_woman.csv\").then(function(data){\n\n  const x_global = 500\n  const y_range = 42\n  const subgroups = data.columns.slice(1)\n  const color = d3.scaleOrdinal()\n    .domain(subgroups)\n    .range([\"#8c2c69\", \"#984178\", \"#a35687\",\n            \"#af6b96\", \"#ba80a5\", \"#c696b4\",\n            \"#d1abc3\", \"#ddc0d2\", \"#e8d5e1\"]);\n\n  svg.append(\"text\")\n  .attr(\"y\", \"5%\")\n  .attr(\"x\", \"70%\")\n  .attr(\"font-size\", \"25px\")\n  .attr(\"text-anchor\", \"middle\")\n  .attr(\"font-weight\", 600)\n  .text(\"Ladies: Experiment Tracking\")\n\n  create_stacked_bar(data, subgroups, x_global, y_range, color)\n  \n});\n\nconst annot2 = [\n  {\n  note: { \n    label: \"Most respondents choose to use no tools for ML Experiment Tracking.\",\n    title: \"Overall No Usage\",\n    wrap: 270, \n    padding: 5, \n  },\n  className: \"color\",\n  \/\/ connector: { end: \"arrow\" },\n  color: [\"#ffffff\"],\n  x: 100,\n  y: 610,\n  dy: +0,\n  dx: +0\n},\n{\n  note: { \n    label: \"There is no substantial change for any tool between 2020 and 2021 for any of the genders.\",\n    title: \"General Constant Evolution\",\n    wrap: 270, \n    padding: 5, \n  },\n  className: \"color\",\n  \/\/ connector: { end: \"arrow\" },\n  color: [\"#ffffff\"],\n  x: 550,\n  y: 610,\n  dy: +0,\n  dx: +0\n}]\n\nsvg.append(\"g\")\n  .style('font-size', 18)\n  .call(d3.annotation()\n          .annotations(annot2))\n\n\n});\n'''\n\n\nh = display(HTML(htmlt))\nj = py_display.Javascript(js_t)\npy_display.display_javascript(j)","a4de28a3":"cols = [\"Year\", \"What is your gender? - Selected Choice\",\n       df.columns[108]]\n\nindustry = df[cols]\nindustry.columns = [\"Year\", \"Gender\", \"Industry\"]\nindustry = industry[industry[\"Gender\"].isin([\"Man\", \"Woman\"])]\n\nold_list = ['Computers\/Technology', 'Academics\/Education',\n       'Accounting\/Finance', 'Other', 'Manufacturing\/Fabrication',\n       'Medical\/Pharmaceutical', 'Government\/Public Service',\n       'Energy\/Mining', 'Online Service\/Internet-based Services',\n       'Retail\/Sales', 'Insurance\/Risk Assessment', 'Marketing\/CRM',\n       'Broadcasting\/Communications', 'Shipping\/Transportation',\n       'Non-profit\/Service', 'Online Business\/Internet-based Sales',\n       'Military\/Security\/Defense', 'Hospitality\/Entertainment\/Sports']\n\nnew_list = [\"Technology\", \"Academics\", \n            \"Finance\", \"Other\", \"Manufacturing\",\n            \"Medical\", \"Government\", \n            \"Energy\", \"Internet Service\",\n            \"Sales\", \"Insurance\", \"Marketing\",\n            \"Communications\", \"Shipping\", \n            \"Non-profit\", \"Internet Service\", \n            \"Security\", \"Entertainment\"]\n\nindustry[\"Industry\"] = industry[\"Industry\"].replace(old_list, new_list)\nindustry = industry.value_counts().reset_index()\nindustry.columns = [\"Year\", \"Gender\", \"Industry\", \"Count\"]\nindustry = industry[industry[\"Year\"]==2021]   ### YEAR 2021\n\nindustry_man = industry[industry[\"Gender\"]==\"Man\"]\nindustry_woman = industry[industry[\"Gender\"]==\"Woman\"]\n\nindustry_man.to_csv(\"industry_man.csv\", index=False)\nindustry_woman.to_csv(\"industry_woman.csv\", index=False)\n\n# Save usa.png img as well\nim = imageio.imread('..\/input\/kaggle-data-science-survey-20172021\/images\/man18.png')\nImage.fromarray(im).save(\"man18.png\")\n\nim = imageio.imread('..\/input\/kaggle-data-science-survey-20172021\/images\/lady18.png')\nImage.fromarray(im).save(\"lady18.png\")\n\nhtmlt = '''\n<!-- Bootstrap -->\n<link rel=\"stylesheet\" href=\"https:\/\/stackpath.bootstrapcdn.com\/bootstrap\/4.4.1\/css\/bootstrap.min.css\" integrity=\"sha384-Vkoo8x4CGsO3+Hhxv8T\/Q5PaXtkKtu6ug5TOeNV6gBiFeWPGFN9MuhOf23Q9Ifjh\" crossorigin=\"anonymous\">\n<!-- Style -->\n<style>\n\t.all18 {\n\t\tfont-family: \"Times New Roman\", Times, serif;\n\t\toverflow-x: hidden;\n\t\twidth: 98%;\n\t\tbackground-color:#e0c9a6;\n\t\t\/* background-image : url(\"bkg.jpg\"); changed via js *\/\n\t}\n\t.svg-container {\n\t\tdisplay: inline-block;\n\t\tposition: relative;\n\t\twidth: 100%;\n\t\tpadding-bottom: 100%;\n\t\tvertical-align: top;\n\t\toverflow: hidden;\n\t}\n\t.svg-content {\n\t\tdisplay: inline-block;\n\t\tposition: absolute;\n\t\ttop: 0;\n\t\tleft: 0;\n\t}\n\n\t.axisHidden path{\n\t\tstroke: #e0c9a6;\n\t}\n\n\t.axisHidden line{\n\t\tstroke: #e0c9a6;\n\t}\n\n\t.all18 .annotation.gents text {\n\t\tfill: #374e5c;\n\t}\n\n\t.all18 .annotation.ladies text {\n\t\tfill: #af3021;\n\t}\n\n\t@font-face {\n\t\tfont-family: parklane;\n\t\tsrc: url(https:\/\/h4ks.net\/ParkLaneNF.otf);\n\t\t}\n\n\tdiv.tooltip-donut {\n\t\tposition: absolute;\n\t\ttext-align: center;\n\t\tpadding: .3rem;\n\t\tbackground: #FFFFFF;\n\t\tcolor: #000000;\n\t\tborder: 1px solid #000000;\n\t\tborder-radius: 8px;\n\t\tpointer-events: none;\n\t\tfont-size: 1.3rem;\n\t\tz-index: 99999;\n\t}\n\n<\/style>\n\n<img id=\"baseimg\" src=\"man.png\" style=\"display:none\" \/>\n<div class=\"all18\">\n\t<center><h1 style=\"font-family: parklane\">Estate's Industry<\/h1><\/center>\n\t<center><h2>2021: In which industry do the respondents work?<\/h2><\/center>\n\t<div class=\"row\">\n\t\t<div id=\"map18\" class=\"svg-container\"><\/div>\n\t<\/div>\n<\/div>\n'''\n\njs_t = '''\nrequire.config({\n  paths: {\n    d3src: \"https:\/\/d3js.org\/\",\n  },\n  map: {\n    '*': {\n      'd3v6': 'd3src\/d3.v6.min',\n      'd3-selection': 'd3src\/d3-selection.v1.min',\n      'd3-drag': 'd3src\/d3-drag.v1.min',\n      'd3-shape': 'd3src\/d3-shape.v1.min',\n      'd3-path': 'd3src\/d3-path.v1.min',\n      'd3-dispatch': 'd3src\/d3-dispatch.v1.min',\n      'd3-annotation': 'https:\/\/cdnjs.cloudflare.com\/ajax\/libs\/d3-annotation\/2.5.1\/d3-annotation.min.js',\n    }\n  }\n});\n\nrequire([\"d3v6\", \"d3-annotation\"], function(d3, d3Annotation) {\n\n\/\/ Inject d3Annotation methods to d3\nfor (var key in d3Annotation) {\n  d3[key] = d3Annotation[key];\n}\n\n\/\/ Get Assets URL set by Kaggle\nconst baseAssetsUrl = document.getElementById('baseimg').src.replace(\/man.png.*$\/, '');\n\nconst $all18 = document.getElementsByClassName('all18')[0];\n$all18.style.backgroundImage = `url(\"${baseAssetsUrl}bkg.jpg\")`;\n\n\/\/ Set the SVG area\nconst margin = { LEFT: 10, RIGHT: 10, TOP: 10, BOTTOM: 0 }\nconst width = 950 - margin.LEFT - margin.RIGHT\nconst height = 900 - margin.TOP - margin.BOTTOM\nconst innerRadius = 100\nconst outerRadius = Math.min(width, height) \/ 5\n\nconst svg = d3.select(\"#map18\").append(\"svg\")\n  .attr(\"preserveAspectRatio\", \"xMinYMin meet\")\n  .attr(\"viewBox\", \"0 0 950 900\")\n  .classed(\"svg-content\", true)\n  .attr(\"transform\",\n   `translate(${margin.LEFT}, ${margin.TOP})`)\n\n\n\/\/ Men\nsvg.append(\"image\")\n.attr(\"xlink:href\", baseAssetsUrl+\"man18.png\")\n    .attr(\"x\", \"9.5%\")\n    .attr(\"y\", \"47%\")\n    .attr(\"width\", 280)\n    .attr(\"height\", 280)\n    .style(\"opacity\", 1)\n\n\/\/ Women\nsvg.append(\"image\")\n.attr(\"xlink:href\", baseAssetsUrl+\"lady18.png\")\n    .attr(\"x\", \"59%\")\n    .attr(\"y\", \"47%\")\n    .attr(\"width\", 270)\n    .attr(\"height\", 270)\n    .style(\"opacity\", 1)\n\nsvg.append('line')\n.style(\"stroke\", \"black\")\n.style(\"stroke-width\", 1)\n    .attr(\"x1\", 480)\n    .attr(\"y1\", 60)\n    .attr(\"x2\", 480)\n    .attr(\"y2\", 900)\n\n\n\/\/ === Men ===\nd3.csv(baseAssetsUrl + \"industry_man.csv\").then(function(data){\n\n  const x_global = 230\n\n  svg.append(\"text\")\n  .attr(\"transform\", `translate(${x_global}, ${width\/3-200})`)\n  .attr(\"font-size\", \"28px\")\n  .attr(\"text-anchor\", \"middle\")\n  .attr(\"font-weight\", 600)\n  .text(\"Gentlemen\")\n\n  data.forEach(d => {\n    d.Count = Number(d.Count)\n  })\n\n  \/\/ Color\n  var myColor = d3.scaleLinear().domain([1,18])\n                  .range([\"#374e5c\", \"#c3cace\"])\n\n  \/\/ Scales\n  const x = d3.scaleBand()\n      .range([0, 2 * Math.PI]) \n      .align(0)        \n      .domain(data.map(d => d.Industry));\n  const y = d3.scaleRadial()\n      .range([innerRadius, outerRadius])  \n      .domain([0, d3.max(data, d => d.Count)]); \n\n  \/\/ Add the bars\n  svg.append(\"g\")\n    .selectAll(\"path\")\n    .data(data)\n    .join(\"path\")\n    .attr(\"transform\", `translate(${x_global}, ${width\/1.8})`)\n      .attr(\"fill\", (d, i) => myColor(i))\n      .attr(\"d\", d3.arc()   \n          .innerRadius(innerRadius)\n          .outerRadius(d => y(d['Count']))\n          .startAngle(d => x(d.Industry))\n          .endAngle(d => x(d.Industry) + x.bandwidth())\n          .padAngle(0.01)\n          .padRadius(innerRadius))\n\n  \/\/ Add the labels\n  svg.append(\"g\")\n  .attr(\"transform\", `translate(${x_global}, ${width\/1.8})`)\n      .selectAll(\"g\")\n      .data(data)\n      .join(\"g\")\n        .attr(\"text-anchor\", function(d) { return (x(d.Industry) + x.bandwidth() \/ 2 + Math.PI) % (2 * Math.PI) < Math.PI ? \"end\" : \"start\"; })\n        .attr(\"transform\", function(d) { return \"rotate(\" + ((x(d.Industry) + x.bandwidth() \/ 2) * 180 \/ Math.PI - 90) + \")\"+\"translate(\" + (y(d['Count'])+10) + \",0)\"; })\n      .append(\"text\")\n        .text(function(d){return(d.Industry)})\n        .attr(\"transform\", function(d) { return (x(d.Industry) + x.bandwidth() \/ 2 + Math.PI) % (2 * Math.PI) < Math.PI ? \"rotate(180)\" : \"rotate(0)\"; })\n        .style(\"font-size\", \"14px\")\n        .attr(\"font-weight\", 600)\n        .attr(\"alignment-baseline\", \"middle\")\n\n  });\n\n\/\/ === Women ===\nd3.csv(baseAssetsUrl + \"industry_woman.csv\").then(function(data){\n\n  const x_global = 695\n\n  svg.append(\"text\")\n  .attr(\"transform\", `translate(${x_global}, ${width\/3-200})`)\n  .attr(\"font-size\", \"28px\")\n  .attr(\"text-anchor\", \"middle\")\n  .attr(\"font-weight\", 600)\n  .text(\"Ladies\")\n\n  data.forEach(d => {\n    d.Count = Number(d.Count)\n  })\n\n  \/\/ Color\n  var myColor = d3.scaleLinear().domain([1,18])\n                  .range([\"#af3021\", \"#e7c1bc\"])\n\n  \/\/ Scales\n  const x = d3.scaleBand()\n      .range([0, 2 * Math.PI]) \n      .align(0)        \n      .domain(data.map(d => d.Industry));\n  const y = d3.scaleRadial()\n      .range([innerRadius, outerRadius])  \n      .domain([0, d3.max(data, d => d.Count)]); \n\n  \/\/ Add the bars\n  svg.append(\"g\")\n    .selectAll(\"path\")\n    .data(data)\n    .join(\"path\")\n    .attr(\"transform\", `translate(${x_global}, ${width\/1.8})`)\n    .attr(\"fill\", (d, i) => myColor(i))\n      .attr(\"d\", d3.arc()   \n          .innerRadius(innerRadius)\n          .outerRadius(d => y(d['Count']))\n          .startAngle(d => x(d.Industry))\n          .endAngle(d => x(d.Industry) + x.bandwidth())\n          .padAngle(0.01)\n          .padRadius(innerRadius))\n\n  \/\/ Add the labels\n  svg.append(\"g\")\n  .attr(\"transform\", `translate(${x_global}, ${width\/1.8})`)\n      .selectAll(\"g\")\n      .data(data)\n      .join(\"g\")\n        .attr(\"text-anchor\", function(d) { return (x(d.Industry) + x.bandwidth() \/ 2 + Math.PI) % (2 * Math.PI) < Math.PI ? \"end\" : \"start\"; })\n        .attr(\"transform\", function(d) { return \"rotate(\" + ((x(d.Industry) + x.bandwidth() \/ 2) * 180 \/ Math.PI - 90) + \")\"+\"translate(\" + (y(d['Count'])+10) + \",0)\"; })\n      .append(\"text\")\n        .text(function(d){return(d.Industry)})\n        .attr(\"transform\", function(d) { return (x(d.Industry) + x.bandwidth() \/ 2 + Math.PI) % (2 * Math.PI) < Math.PI ? \"rotate(180)\" : \"rotate(0)\"; })\n        .style(\"font-size\", \"14px\")\n        .attr(\"font-weight\", 600)\n        .attr(\"alignment-baseline\", \"middle\")\n\n  });\n\n\n\/\/ Annot\nconst annot1 = [\n  {\n  note: { \n    label: \"These are top 3 most frequent industries for both genders, with a slight difference in order.\",\n    title: \"Tech\/Academics\/Finance\",\n    wrap: 300, \n    padding: 5, \n  },\n  className: \"gents\",\n  connector: { end: \"arrow\" },\n  color: [\"#ffffff\"],\n  x: 310,\n  y: 350,\n  dy: -100,\n  dx: -1\n},\n{\n  note: { \n    label: \"In top 6 places we see that the Medical\/Pharmaceutical fields are more common for ladies vs the Manufacturing\/Fabrication fields for gents.\",\n    title: \"Medical vs Manufacturing\",\n    wrap: 340, \n    padding: 5, \n  },\n  className: \"ladies\",\n  connector: { end: \"arrow\" },\n  color: [\"#ffffff\"],\n  x: 845,\n  y: 610,\n  dy: +150,\n  dx: -1\n}]\n\nsvg.append(\"g\")\n  .style('font-size', 19)\n  .call(d3.annotation()\n          .annotations(annot1))\n\n});\n'''\n\n\nh = display(HTML(htmlt))\nj = py_display.Javascript(js_t)\npy_display.display_javascript(j)","7054aa96":"cols = [\"Year\", \"What is your gender? - Selected Choice\",\n       df.columns[109]]\n\nsize = df[cols]\nsize.columns = [\"Year\", \"Gender\", \"Size\"]\nsize = size[size[\"Gender\"].isin([\"Man\", \"Woman\"])]\n\nold_list = ['0-49 employees', '> 10,000 employees', '1000-9,999 employees',\n            '50-249 employees', '250-999 employees', '10,000 or more employees']\nnew_list = ['1. 0-49 employees', '5. >10,000 employees', '4. 1000-9,999 employees',\n            '2. 50-249 employees', '3. 250-999 employees', '5. >10,000 employees']\n\nsize[\"Size\"] = size[\"Size\"].replace(old_list, new_list)\nsize = size.value_counts().reset_index()\nsize = pd.merge(size, total, on=[\"Year\", \"Gender\"])\n\nsize[\"Perc\"] = size[0]\/size[\"Count\"]*100\nsize[\"Perc\"] = size[\"Perc\"].apply(lambda x: round(x, 1))\nsize.drop(columns=[0, \"Count\"], axis=1, inplace=True)\nsize = pd.pivot(size, index=[\"Year\", \"Gender\"], columns=\"Size\",\n                values=\"Perc\").reset_index()\n\nsize_man = size[size[\"Gender\"] == \"Man\"].drop(columns=[\"Gender\"])\nsize_woman = size[size[\"Gender\"] == \"Woman\"].drop(columns=[\"Gender\"])\n\nsize_man.to_csv(\"size_man.csv\", index=False)\nsize_woman.to_csv(\"size_woman.csv\", index=False)\n\n# Save usa.png img as well\nim = imageio.imread('..\/input\/kaggle-data-science-survey-20172021\/images\/man19.png')\nImage.fromarray(im).save(\"man19.png\")\n\nim = imageio.imread('..\/input\/kaggle-data-science-survey-20172021\/images\/lady19.png')\nImage.fromarray(im).save(\"lady19.png\")\n\nhtmlt = '''\n<!-- Bootstrap -->\n<link rel=\"stylesheet\" href=\"https:\/\/stackpath.bootstrapcdn.com\/bootstrap\/4.4.1\/css\/bootstrap.min.css\" integrity=\"sha384-Vkoo8x4CGsO3+Hhxv8T\/Q5PaXtkKtu6ug5TOeNV6gBiFeWPGFN9MuhOf23Q9Ifjh\" crossorigin=\"anonymous\">\n<!-- Style -->\n<style>\n\t.all19 {\n\t\tfont-family: \"Times New Roman\", Times, serif;\n\t\toverflow-x: hidden;\n\t\twidth: 98%;\n\t\tbackground-color:#e0c9a6;\n\t\t\/* background-image : url(\"bkg.jpg\"); changed via js *\/\n\t}\n\t.all19 .svg-container {\n\t\tdisplay: inline-block;\n\t\tposition: relative;\n\t\twidth: 100%;\n\t\tpadding-bottom: 54%;\n\t\tvertical-align: top;\n\t\toverflow: hidden;\n\t}\n\t.svg-content {\n\t\tdisplay: inline-block;\n\t\tposition: absolute;\n\t\ttop: 0;\n\t\tleft: 0;\n\t}\n\n\t.axisHidden path{\n\t\tstroke: #e0c9a6;\n\t}\n\n\t.axisHidden line{\n\t\tstroke: #e0c9a6;\n\t}\n\n\t.annotation.color text {\n\t\tfill: #000000;\n\t}\n\n\t@font-face {\n\t\tfont-family: parklane;\n\t\tsrc: url(https:\/\/h4ks.net\/ParkLaneNF.otf);\n\t\t}\n\n\tdiv.tooltip-donut {\n\t\tposition: absolute;\n\t\ttext-align: center;\n\t\tpadding: .3rem;\n\t\tbackground: #FFFFFF;\n\t\tcolor: #000000;\n\t\tborder: 1px solid #000000;\n\t\tborder-radius: 8px;\n\t\tpointer-events: none;\n\t\tfont-size: 2rem;\n\t\tz-index: 99999;\n\t}\n\n<\/style>\n\n<img id=\"baseimg\" src=\"man.png\" style=\"display:none\" \/>\n<div class=\"all19\">\n\t<center><h1 style=\"font-family: parklane\">Estate's Size<\/h1><\/center>\n\t<center><h3><i>- Percent of respondents on company size -<\/i><\/h3><\/center>\n\t<div class=\"row\">\n\t\t<div id=\"map19-gents\" class=\"svg-container\"><\/div>\n\t<\/div>\n\n\t<div class=\"row\">\n\t\t<div id=\"map19-ladies\" class=\"svg-container\"><\/div>\n\t<\/div>\n<\/div>\n'''\n\njs_t = '''\nrequire.config({\n  paths: {\n    d3src: \"https:\/\/d3js.org\/\",\n  },\n  map: {\n    '*': {\n      'd3v6': 'd3src\/d3.v6.min',\n      'd3-selection': 'd3src\/d3-selection.v1.min',\n      'd3-drag': 'd3src\/d3-drag.v1.min',\n      'd3-shape': 'd3src\/d3-shape.v1.min',\n      'd3-path': 'd3src\/d3-path.v1.min',\n      'd3-dispatch': 'd3src\/d3-dispatch.v1.min',\n      'd3-annotation': 'https:\/\/cdnjs.cloudflare.com\/ajax\/libs\/d3-annotation\/2.5.1\/d3-annotation.min.js',\n    }\n  }\n});\n\nrequire([\"d3v6\", \"d3-annotation\"], function(d3, d3Annotation) {\n\n\/\/ Inject d3Annotation methods to d3\nfor (var key in d3Annotation) {\n  d3[key] = d3Annotation[key];\n}\n\n\/\/ Get Assets URL set by Kaggle\nconst baseAssetsUrl = document.getElementById('baseimg').src.replace(\/man.png.*$\/, '');\n\nconst $all19 = document.getElementsByClassName('all19')[0];\n$all19.style.backgroundImage = `url(\"${baseAssetsUrl}bkg.jpg\")`;\n\n\/\/ Set the SVG area\nconst margin = { LEFT: 20, RIGHT: 40, TOP: 15, BOTTOM: 0 }\nconst width = 950 - margin.LEFT - margin.RIGHT\nconst height = 500 - margin.TOP - margin.BOTTOM\nconst chart_size = 40\nconst x_global = 150\n\n\/\/ STREAMGRAPH\nfunction create_graph(data, svg, name){\n\n  const XY_axis = height\/2-200\n\n  svg.append(\"text\")\n  .attr(\"transform\", `translate(${x_global-60}, ${XY_axis-10})`)\n  .attr(\"font-size\", \"24px\")\n  .attr(\"text-anchor\", \"middle\")\n  .attr(\"font-weight\", 600)\n  .text(name)\n\n  data.forEach(d => {\n    d.Year = Number(d.Year)\n  })\n\n  \/\/ List of groups\n  var keys = data.columns.slice(1)\n\n  \/\/ Stacking\n  var series = d3.stack()\n    .keys(keys)\n    .offset(d3.stackOffsetSilhouette)\n    (data)\n\n  \/\/ X Axis\n  var x = d3.scaleLinear()\n    .domain(d3.extent(data, d => d.Year))\n    .range([0, width\/1.5])\n\n  var xAxis = g => g\n    .attr(\"transform\", `translate(${x_global}, ${XY_axis})`)\n    .call(d3.axisBottom(x)\n            .tickSize(height\/1.2).ticks(2).tickFormat(d3.format(\"d\")))\n    .call(g => g.select(\".domain\").remove())\n    .call(g => g.selectAll(\".tick line\")\n                .attr(\"stroke\", \"#3A3A3A\")\n                .attr('stroke-dasharray', '5 5'))\n    .call(g => g.selectAll(\".tick\")\n                .select('text')\n                .attr('fill', \"#3A3A3A\")\n                .style(\"font-size\", 15))\n\n  \/\/ Y Axis\n  var y = d3.scaleLinear()\n  .domain([-chart_size, chart_size])\n  .range([height\/1.2, 0])\n  svg.append(\"g\")\n  .attr(\"class\", \"axisHidden\")\n  .attr(\"transform\", `translate(${x_global}, ${XY_axis})`)\n    .call(d3.axisLeft(y).ticks(0))\n\n  \/\/ Area Chart\n  var area = d3.area()\n  .x(d => x(d.data.Year))\n  .y0(d => y(d[0]))\n  .y1(d => y(d[1]))\n\n  \/\/ Color\n  const color = d3.scaleOrdinal()\n    .domain(keys)\n     .range([\"#D05257\", \"#D87F58\", \"#CE8E27\",\"#79A988\",\n     \"#507C5D\"])\n\n  \/\/ Show\n  const path = svg.append(\"g\")\n    .selectAll(\"path\")\n    .data(series)\n    .join(\"path\")\n    .attr(\"transform\", `translate(${x_global}, ${XY_axis})`)\n      .attr(\"data-label\", d => d.key)\n      .attr(\"fill\", ({key}) => color(key))\n      .attr(\"stroke\", \"black\")\n      .attr(\"stroke-width\", 0.2)\n      .attr(\"d\", area)\n      .attr(\"opacity\", 0.8)\n\n  svg.append(\"g\")\n      .call(xAxis)\n\n  \/\/ ==== Interactive ====\n  const hover = (svg, path) => {\n  \n    const line = svg.append(\"g\")\n         .attr(\"display\", \"none\");\n  \n    line.append(\"g\")\n        .selectAll(\"line\")\n        .data(series)\n        .join(\"line\")\n        .attr(\"class\", \"cursor-line\")\n        .attr(\"fill\", \"#fff\")\n        .attr(\"stroke-width\", 0.8)\n        .attr(\"x1\", 10)\n        .attr(\"y1\", height)\n        .attr(\"x2\", 10)\n        .attr(\"y2\", 10);\n\n    line.append(\"text\")\n      .attr(\"class\", \"text-year\")\n      .attr(\"font-size\", 14)\n      .attr(\"x\", 0)\n      .attr(\"y\", 26)\n      .attr(\"transform\", \"rotate(-90 20 20) translate(0, -20)\");\n    \n    line.append(\"g\")\n        .selectAll(\"text\")\n        .data(series)\n        .join(\"text\")\n        .attr(\"class\", \"text-label\")\n        .attr(\"font-weight\", 900)\n        .attr(\"font-size\", 17)\n        .attr(\"y\", height-10)\n        .attr(\"x\", -8)\n        .attr(\"transform\", \n        \"rotate(-90 10 460)\");\n\n    line.append(\"g\")\n        .selectAll(\"text\")\n        .data(data)\n        .join(\"text\")\n        .attr(\"class\", \"text-value\")\n        .attr(\"font-weight\", 700)\n        .attr(\"font-size\", 14)\n        .attr(\"y\", height-(height*0.94))\n        .attr(\"x\", 14);\n\n    const mousemove = (event) => {\n  \n      event?.preventDefault();\n      const pointer = d3.pointer(event);\n\n      const xm = x.invert(pointer[0]);\n      const label = d3.select(event.target).attr(\"data-label\");\n  \n      line.attr(\"transform\", `translate(${pointer[0]}, 0)`)\n          .style(\"visibility\", \"inherit\");\n    \n          line.select(\".text-year\")\n          .text(parseInt(xm));\n      \n      line.selectAll(\".text-value\")\n        .text(d => d.Year === parseInt(xm) ? d[label]+\"%\" : \"\");\n\n      line.selectAll(\".text-label\")\n        .style(\"visibility\", \"hidden\")\n        .filter(d => d.key === label)\n        .style(\"visibility\", \"inherit\")\n        .attr(\"fill\", d => d.key === label ? color(d.key) : \"#000\")\n        .text(label);\n      \n      line.selectAll(\".cursor-line\")\n        .attr(\"stroke\", \"fff0\")\n        .filter(d => d.key === label)\n        .attr(\"stroke\", d => d.key === label ? color(d.key) : \"#fff0\")\n      \n      path.attr(\"opacity\", d => d.key === label ? 0.8 : 0.3);\n      \n      if (label === null) {\n        path.attr(\"opacity\", 0.8);\n        line.style(\"visibility\", \"hidden\");\n      }\n    }\n\n    const mouseenter = () => {\n      line.attr(\"display\", null);\n    }\n  \n    const mouseleave = () => {\n      line.attr(\"display\", \"none\");\n    }\n\n    svg\n        .on(\"mousemove\", mousemove)\n        .on(\"mouseenter\", mouseenter)\n        .on(\"mouseleave\", mouseleave)\n\n  }\n\n  svg.call(hover, path);\n}\n\n\/\/ ===== MEN =====\nconst svg1 = d3.select(\"#map19-gents\").append(\"svg\")\n\/\/ .attr(\"style\", \"outline: thin solid red;\")\n  .attr(\"preserveAspectRatio\", \"xMinYMin meet\")\n  .attr(\"viewBox\", \"0 0 950 500\")\n  .classed(\"svg-content\", true)\n  .attr(\"transform\",\n   `translate(${margin.LEFT}, ${margin.TOP})`)\n\n\/\/ Gentleman\nsvg1.append(\"image\")\n.attr(\"xlink:href\", baseAssetsUrl+\"man19.png\")\n    .attr(\"x\", \"-13%\")\n    .attr(\"y\", \"11%\")\n    .attr(\"width\", 430)\n    .attr(\"height\", 430)\n    .style(\"opacity\", 1)\n\n\/\/ Comment\nconst annot1 = [\n  {\n  note: { \n    label: \"~20% of respondents (men & women) say that they work in small companies (0-49 employees).\",\n    title: \"Small Companies\",\n    wrap: 100, \n    padding: 5, \n  },\n  className: \"color\",\n  connector: { end: \"arrow\" },\n  color: [\"#ffffff\"],\n  x: 755,\n  y: 350,\n  dy: -35,\n  dx: +30\n}]\n\nsvg1.append(\"g\")\n  .style('font-size', 17)\n  .call(d3.annotation()\n          .annotations(annot1))\n\nd3.csv(baseAssetsUrl + \"size_man.csv\").then(function(data){\n\n  const name = \"Gentlemen\"\n  create_graph(data, svg1, name)\n\n});\n\n\/\/ ===== WOMEN =====\nconst svg2 = d3.select(\"#map19-ladies\").append(\"svg\")\n\/\/ .attr(\"style\", \"outline: thin solid red;\")\n.attr(\"preserveAspectRatio\", \"xMinYMin meet\")\n.attr(\"viewBox\", \"0 0 950 500\")\n.classed(\"svg-content\", true)\n.attr(\"transform\",\n  `translate(${margin.LEFT}, ${margin.TOP})`)\n\n\/\/ Lady\nsvg2.append(\"image\")\n.attr(\"xlink:href\", baseAssetsUrl+\"lady19.png\")\n.attr(\"x\", \"-19%\")\n.attr(\"y\", \"8%\")\n.attr(\"width\", 490)\n.attr(\"height\", 490)\n.style(\"opacity\", 1)\n\n\/\/ Comment\nconst annot2 = [\n  {\n  note: { \n    label: \"At the other end of the spectrum, another ~20%-25% of respondents (both genders) confirm that they work in large companies (1k+ employees).\",\n    title: \"Large Companies\",\n    wrap: 120, \n    padding: 5, \n  },\n  className: \"color\",\n  connector: { end: \"arrow\" },\n  color: [\"#ffffff\"],\n  x: 755,\n  y: 170,\n  dy: +35,\n  dx: +30\n}]\n\nsvg2.append(\"g\")\n  .style('font-size', 17)\n  .call(d3.annotation()\n          .annotations(annot2))\n\nd3.csv(baseAssetsUrl + \"size_woman.csv\").then(function(data){\n\n  const name = \"Ladies\"\n  create_graph(data, svg2, name)\n\n});\n\n});\n'''\n\n\nh = display(HTML(htmlt))\nj = py_display.Javascript(js_t)\npy_display.display_javascript(j)","fc429f84":"# Combine salary with job title\ncols = [\"Year\", \"What is your gender? - Selected Choice\",\n        \"In which country do you currently reside?\",\n       df.columns[120]]\n\nsalary = df[cols]\nsalary.columns = [\"Year\", \"Gender\", \"Country\", \"Salary\"]\nsalary = salary[salary[\"Gender\"].isin([\"Man\", \"Woman\"])]\n\nold_list = ['25,000-29,999', '60,000-69,999', '$0-999', '30,000-39,999',\n       '15,000-19,999', '70,000-79,999', '2,000-2,999', '10,000-14,999',\n       '5,000-7,499', '20,000-24,999', '1,000-1,999', '100,000-124,999',\n       '7,500-9,999', '4,000-4,999', '40,000-49,999', '50,000-59,999',\n       '3,000-3,999', '300,000-499,999', '200,000-249,999',\n       '125,000-149,999', '250,000-299,999', '80,000-89,999',\n       '90,000-99,999', '150,000-199,999', '>$1,000,000',\n       '$500,000-999,999', '> $500,000', '300,000-500,000', '10-20,000',\n       '0-10,000',\n       'I do not wish to disclose my approximate yearly compensation',\n       '20-30,000', '125-150,000', '30-40,000', '50-60,000',\n       '100-125,000', '90-100,000', '70-80,000', '80-90,000', '60-70,000',\n       '400-500,000', '40-50,000', '150-200,000', '300-400,000',\n       '200-250,000', '500,000+', '250-300,000']\nnew_list = ['25,000-29,999', '60,000-69,999', '0-999', '30,000-39,999',\n       '15,000-19,999', '70,000-79,999', '2,000-2,999', '10,000-14,999',\n       '5,000-7,499', '20,000-24,999', '1,000-1,999', '100,000-124,999',\n       '7,500-9,999', '4,000-4,999', '40,000-49,999', '50,000-59,999',\n       '3,000-3,999', '300,000-499,999', '200,000-249,999',\n       '125,000-149,999', '250,000-299,999', '80,000-89,999',\n       '90,000-99,999', '150,000-199,999', '500,000',\n       '500,000', '500,000', '300,000-499,999', '10,000-19,999',\n       '0-9,999',\n       'Undisclosed',\n       '20,000-29,999', '125,000-149,999', '30,000-39,999', '50,000-59,999',\n       '100,000-124,999', '90,000-99,999', '70,000-79,999', '80,000-89,999', '60,000-69,999',\n       '400,000-499,999', '40,000-49,999', '150,000-199,999', '300,000-399,999',\n       '200,000-249,999', '500,000', '250-299,999']\n\nsalary[\"Salary\"] = salary[\"Salary\"].replace(old_list, new_list)\nsalary = salary[salary[\"Salary\"]!=\"Undisclosed\"].dropna().reset_index(drop=True)\n\n# Adjust Salary\nsalary = adjust_amount(data=salary, amount_column=\"Salary\")\n\n# Sepparate genders\nsalary_man = salary[salary[\"Gender\"]==\"Man\"].drop(columns=\"Gender\", axis=1)\nsalary_woman = salary[salary[\"Gender\"]==\"Woman\"].drop(columns=\"Gender\", axis=1)\n\nsalary_man.to_csv(\"salary_man.csv\", index=False)\nsalary_woman.to_csv(\"salary_woman.csv\", index=False)\n\n# Save usa.png img as well\nim = imageio.imread('..\/input\/kaggle-data-science-survey-20172021\/images\/man20.png')\nImage.fromarray(im).save(\"man20.png\")\n\nim = imageio.imread('..\/input\/kaggle-data-science-survey-20172021\/images\/lady20.png')\nImage.fromarray(im).save(\"lady20.png\")\n\nhtmlt = '''\n<!-- Bootstrap -->\n<link rel=\"stylesheet\" href=\"https:\/\/stackpath.bootstrapcdn.com\/bootstrap\/4.4.1\/css\/bootstrap.min.css\" integrity=\"sha384-Vkoo8x4CGsO3+Hhxv8T\/Q5PaXtkKtu6ug5TOeNV6gBiFeWPGFN9MuhOf23Q9Ifjh\" crossorigin=\"anonymous\">\n<!-- Style -->\n<style>\n\t.all20 {\n\t\tfont-family: \"Times New Roman\", Times, serif;\n\t\toverflow-x: hidden;\n\t\twidth: 98%;\n\t\tbackground-color:#e0c9a6;\n\t\t\/* background-image : url(\"bkg.jpg\"); changed via js *\/\n\t}\n\t.all20 .svg-container {\n\t\tdisplay: inline-block;\n\t\tposition: relative;\n\t\twidth: 100%;\n\t\tpadding-bottom: 54%;\n\t\tvertical-align: top;\n\t\toverflow: hidden;\n\t}\n\t.svg-content {\n\t\tdisplay: inline-block;\n\t\tposition: absolute;\n\t\ttop: 0;\n\t\tleft: 0;\n\t}\n\n\t.all20 .axisHidden path{\n\t\tstroke-opacity: 0;\n\t}\n\n\t.all20 .axisHidden line{\n\t\tstroke-opacity: 0;\n\t}\n\n\t.all20 .annotation.gents text {\n\t\tfill: #33555e;\n\t}\n\n\t.all20 .annotation.ladies text {\n\t\tfill: #9C4254;\n\t}\n\n\t.all20 .annotation.neutral text {\n\t\tfill: #000000;\n\t}\n\n\t@font-face {\n\t\tfont-family: parklane;\n\t\tsrc: url(https:\/\/h4ks.net\/ParkLaneNF.otf);\n\t\t}\n\n\tdiv.tooltip-donut {\n\t\tposition: absolute;\n\t\ttext-align: center;\n\t\tpadding: .3rem;\n\t\tbackground: #FFFFFF;\n\t\tcolor: #000000;\n\t\tborder: 1px solid #000000;\n\t\tborder-radius: 8px;\n\t\tpointer-events: none;\n\t\tfont-size: 2rem;\n\t\tz-index: 99999;\n\t}\n\n<\/style>\n\n<img id=\"baseimg\" src=\"man.png\" style=\"display:none\" \/>\n<div class=\"all20\">\n\t<center><h1 style=\"font-family: parklane\">Respondent's Payment<\/h1><\/center>\n\t<center><h3><i>- Salary was adjusted on respondent's rezidence -<\/i><\/h3><\/center>\n\t<div class=\"row\">\n\t\t<div id=\"map20-gents\" class=\"svg-container\"><\/div>\n\t<\/div>\n\n\t<div class=\"row\">\n\t\t<div id=\"map20-ladies\" class=\"svg-container\"><\/div>\n\t<\/div>\n<\/div>\n'''\n\njs_t = '''\nrequire.config({\n  paths: {\n    d3src: \"https:\/\/d3js.org\/\",\n  },\n  map: {\n    '*': {\n      'd3v4': 'd3src\/d3.v4.min',\n      'd3-selection': 'd3src\/d3-selection.v1.min',\n      'd3-drag': 'd3src\/d3-drag.v1.min',\n      'd3-shape': 'd3src\/d3-shape.v1.min',\n      'd3-path': 'd3src\/d3-path.v1.min',\n      'd3-dispatch': 'd3src\/d3-dispatch.v1.min',\n      'd3-annotation': 'https:\/\/cdnjs.cloudflare.com\/ajax\/libs\/d3-annotation\/2.5.1\/d3-annotation.min.js',\n      }\n  }\n});\n\nrequire([\"d3v4\", \"d3-annotation\"], function(d3, d3Annotation) {\n\n\/\/ Inject d3Annotation methods to d3\nfor (var key in d3Annotation) {\n  d3[key] = d3Annotation[key];\n}\n\n\/\/ Get Assets URL set by Kaggle\nconst baseAssetsUrl = document.getElementById('baseimg').src.replace(\/man.png.*$\/, '');\n\nconst $all20 = document.getElementsByClassName('all20')[0];\n$all20.style.backgroundImage = `url(\"${baseAssetsUrl}bkg.jpg\")`;\n\n\/\/ Set the SVG area\nconst margin = { LEFT: 20, RIGHT: 40, TOP: 15, BOTTOM: 0 }\nconst width = 950 - margin.LEFT - margin.RIGHT\nconst height = 500 - margin.TOP - margin.BOTTOM\nconst x_global = 180\n\n\/\/ VIOLIN\nfunction create_violin(data, svg, name, color1, color2,\n              grad_name, data2){\n  \/\/ Title\n  svg.append(\"text\")\n  .attr(\"transform\", `translate(${x_global-110}, ${height-450})`)\n  .attr(\"font-size\", \"24px\")\n  .attr(\"text-anchor\", \"middle\")\n  .attr(\"font-weight\", 600)\n  .text(name)\n\n  \/\/ small - high\n  svg.append(\"text\")\n  .attr(\"transform\", `translate(${x_global+30}, ${height-450})`)\n  .attr(\"font-size\", \"15px\")\n  .attr(\"text-anchor\", \"middle\")\n  .attr(\"font-weight\", 600)\n  .text(\"Highest\")\n\n  svg.append(\"text\")\n  .attr(\"transform\", `translate(${x_global-25}, ${height-30})`)\n  .attr(\"font-size\", \"15px\")\n  .attr(\"text-anchor\", \"middle\")\n  .attr(\"font-weight\", 600)\n  .text(\"Lowest\")\n\n  \/\/ Y Scale\n  var y = d3.scaleLinear()\n    .domain([d3.min(data, d => d.Amount),\n             d3.max(data, d => d.Amount)])          \n    .range([height\/1.2, 0])\n  svg.append(\"g\")\n  .attr(\"transform\", `translate(${x_global}, ${height-450})`)\n  .call(d3.axisLeft(y).ticks(7))\n  .selectAll(\"text\")\n      .attr(\"font-size\", \"13px\")\n      .attr(\"font-weight\", 300)\n\n  \/\/ X Scale\n  var x = d3.scaleBand()\n    .range([ width\/1.5, 0 ])\n    .domain(data.map(d => d.Year))\n    .padding(0.05)     \n  svg.append(\"g\")\n  .attr(\"transform\", `translate(${x_global}, ${height-35})`)\n    .call(d3.axisBottom(x))\n    .selectAll(\"text\")\n      .attr(\"font-size\", \"15px\")\n      .attr(\"font-weight\", 300)\n\n  \/\/ Violin (set thresh)\n  var histogram = d3.histogram()\n        .domain(y.domain())\n        .thresholds(y.ticks(20))\n        .value(d => d)\n\n  \/\/ Compute the binning for each group of the dataset\n  var sumstat = d3.nest()  \n    .key(function(d) { return d.Year;})\n    .rollup(function(d) { \n      var input = d.map(function(g) { return g.Amount;}) \n      var bins = histogram(input)\n      return(bins)\n    })\n    .entries(data)\n\n  \/\/ Biggest value in a bin\n  var maxNum = 0\n  for ( var i in sumstat ){\n    var allBins = sumstat[i].value\n    var lengths = allBins.map(function(a){return a.length;})\n    var longuest = d3.max(lengths)\n    if (longuest > maxNum) { maxNum = longuest }\n  }\n\n  \/\/ Violin Max Length\n  var xNum = d3.scaleLinear()\n    .range([0, x.bandwidth()])\n    .domain([-maxNum,maxNum])\n\n  \/\/ Gradient\n  const defs = svg.append('defs');\n\n  const bgGradient = defs\n    .append('linearGradient')\n    .attr('id', grad_name)\n    .attr('gradientTransform', 'rotate(90)');\n  bgGradient\n    .append('stop')\n    .attr('stop-color', color1)\n    .attr('offset', '0%');\n  bgGradient\n    .append('stop')\n    .attr('stop-color', color2)\n    .attr('offset', '100%');\n\n  \/\/ Add the shape to this svg!\n  svg\n    .selectAll(\"myViolin\")\n    .data(sumstat)\n    .enter()      \n    .append(\"g\")\n      .attr(\"transform\", function(d){ return(\"translate(\" + x(d.key) +\" ,0)\") } )\n    .append(\"path\")\n    .attr(\"transform\", `translate(${x_global}, ${height-450})`)\n        .datum(function(d){ return(d.value)}) \n        .style(\"stroke\", `url(#${grad_name})`)\n        .style(\"stroke-width\", 12)\n        .style(\"fill\", `url(#${grad_name})`)\n        .attr(\"d\", d3.area()\n            .x0(function(d){ return(xNum(-d.length)) } )\n            .x1(function(d){ return(xNum(d.length)) } )\n            .y(function(d){ return(y(d.x0)) } )\n            .curve(d3.curveCatmullRom)\n        )\n\n  \/\/ === POINTS ===\n  \n  var x2 = d3.scaleTime()\n      .domain(d3.extent(data2, function(d) { return d.Year; }))\n      .range([ 0, width\/1.5 ]);\n    svg.append(\"g\")\n      .attr(\"transform\", `translate(${x_global}, ${height-35})`)\n      .call(d3.axisBottom(x2).tickValues([]));\n\n  \/\/ Add Y axis\n  var y2 = d3.scaleLinear()\n    .domain([d3.min(data2, d => d.Amount),\n      d3.max(data2, d => d.Amount)])\n    .range([ height\/1.2, 0 ]);\n  svg.append(\"g\")\n    .attr(\"class\", \"axisHidden\")\n    .attr(\"transform\", `translate(${x_global+70}, ${height-450})`)\n    .call(d3.axisLeft(y2).tickValues([]));\n\n  \/\/ Add the line\n  svg.append(\"path\")\n    .datum(data2)\n    .attr(\"fill\", \"none\")\n    .attr(\"stroke\", \"#a46400\")\n    .attr(\"stroke-width\", 2)\n    .style(\"stroke-dasharray\", (\"10, 5\"))\n    .attr(\"transform\", `translate(${x_global+70}, ${height-450})`)\n    .attr(\"d\", d3.line()\n      .x(function(d) { return x(d.Year) })\n      .y(function(d) { return y(d.Amount) })\n      )\n\n  \/\/ Add the points\n  svg\n    .append(\"g\")\n    .selectAll(\"dot\")\n    .data(data2)\n    .enter()\n    .append(\"circle\")\n    .attr(\"transform\", `translate(${x_global+70}, ${height-450})`)\n      .attr(\"cx\", function(d) { return x(d.Year) } )\n      .attr(\"cy\", function(d) { return y(d.Amount) } )\n      .attr(\"r\", 10)\n      .attr(\"stroke\", \"black\")\n      .attr(\"stroke-width\", 0.5)\n      .attr(\"fill\", \"#Deaf5a\")\n}\n\n\n\/\/ ===== MEN =====\nconst svg1 = d3.select(\"#map20-gents\").append(\"svg\")\n\/\/ .attr(\"style\", \"outline: thin solid red;\")\n  .attr(\"preserveAspectRatio\", \"xMinYMin meet\")\n  .attr(\"viewBox\", \"0 0 950 500\")\n  .classed(\"svg-content\", true)\n  .attr(\"transform\",\n   `translate(${margin.LEFT}, ${margin.TOP})`)\n\n\/\/ Gentleman\nsvg1.append(\"image\")\n.attr(\"xlink:href\", baseAssetsUrl+\"man20.png\")\n    .attr(\"x\", \"-35%\")\n    .attr(\"y\", \"-10%\")\n    .attr(\"width\", 540)\n    .attr(\"height\", 540)\n    .style(\"opacity\", 1)\n\n\n\/\/ Comment\nconst annot1 = [\n  {\n  note: { \n    label: \"There has been a decrease in higher salaries (amounts) in 2021 vs 2018 (seen in both genders).\",\n    title: \"2021 vs 2018\",\n    wrap: 100, \n    padding: 5, \n  },\n  className: \"gents\",\n  connector: { end: \"arrow\" },\n  color: [\"#ffffff\"],\n  x: 720,\n  y: 100,\n  dy: +20,\n  dx: +60\n}]\n\nsvg1.append(\"g\")\n  .style('font-size', 17)\n  .call(d3.annotation()\n          .annotations(annot1))\n\nd3.csv(baseAssetsUrl + \"salary_man.csv\", function(data){\n\n  const data2 = [{\"Year\": 2018, \"Amount\":\t7549},\n  {\"Year\": 2019, \"Amount\":\t8349},\n  {\"Year\": 2020, \"Amount\":\t7281},\n  {\"Year\": 2021, \"Amount\":\t6999}]\n\n   const name = \"Gentlemen\"\n   const color1 = \"#657d83\"\n   const color2 = \"#33555e\"\n   const grad_name = 'bg-gradient20'\n\n   create_violin(data, svg1, name, color1, color2, grad_name,\n     data2)\n  \n});\n\n\n\/\/ ===== WOMEN =====\nconst svg2 = d3.select(\"#map20-ladies\").append(\"svg\")\n\/\/ .attr(\"style\", \"outline: thin solid red;\")\n.attr(\"preserveAspectRatio\", \"xMinYMin meet\")\n.attr(\"viewBox\", \"0 0 950 500\")\n.classed(\"svg-content\", true)\n.attr(\"transform\",\n  `translate(${margin.LEFT}, ${margin.TOP})`)\n\n\/\/ Lady\nsvg2.append(\"image\")\n.attr(\"xlink:href\", baseAssetsUrl+\"lady20.png\")\n.attr(\"x\", \"-23%\")\n.attr(\"y\", \"4%\")\n.attr(\"width\", 490)\n.attr(\"height\", 490)\n.style(\"opacity\", 1)\n\n\/\/ Comment\nconst annot2 = [\n  {\n  note: { \n    label: \"Both genders have in 2021 vs 2018 a bigger pool of respondents with much lower income (<1k units).\",\n    title: \"Low income\",\n    wrap: 100, \n    padding: 5, \n  },\n  className: \"ladies\",\n  connector: { end: \"arrow\" },\n  color: [\"#ffffff\"],\n  x: 720,\n  y: 415,\n  dy: -20,\n  dx: +60\n}]\n\nsvg2.append(\"g\")\n  .style('font-size', 17)\n  .call(d3.annotation()\n          .annotations(annot2))\n\n\nd3.csv(baseAssetsUrl + \"salary_woman.csv\", function(data){\n\n  const data2 = [{\"Year\": 2018, \"Amount\":\t6572},\n  {\"Year\": 2019, \"Amount\":\t6168},\n  {\"Year\": 2020, \"Amount\":\t4867},\n  {\"Year\": 2021, \"Amount\":\t4808}]\n\n  const name = \"Ladies\"\n  const color1 = \"#9C4254\"\n  const color2 = \"#B5838d\"\n  const grad_name = 'bg-gradient21'\n\n  create_violin(data, svg2, name, color2, color1, grad_name,\n      data2)\n\n});\n\n\/\/ Comment\nconst annot3 = [\n  {\n  note: { \n    label: \"\",\n    title: \"Average Income\",\n    wrap: 100, \n    padding: 2, \n  },\n  className: \"neutral\",\n  connector: { end: \"arrow\" },\n  color: [\"#ffffff\"],\n  x: 420,\n  y: 185,\n  dy: -15,\n  dx: +15\n}]\n\nsvg2.append(\"g\")\n  .style('font-size', 13)\n  .call(d3.annotation()\n          .annotations(annot3))\n\n});\n'''\n\n\nh = display(HTML(htmlt))\nj = py_display.Javascript(js_t)\npy_display.display_javascript(j)","2e70aafb":"# Combine salary with job title\ncols = [\"Year\", \"What is your gender? - Selected Choice\",\n        \"In which country do you currently reside?\",\n        \"Select the title most similar to your current role (or most recent title if retired): - Selected Choice\",\n       df.columns[120]]\n\nsalary2 = df[cols]\nsalary2.columns = [\"Year\", \"Gender\", \"Country\", \"Role\", \"Salary\"]\nsalary2 = salary2[salary2[\"Gender\"].isin([\"Man\", \"Woman\"])]\n\nold_list = ['25,000-29,999', '60,000-69,999', '$0-999', '30,000-39,999',\n       '15,000-19,999', '70,000-79,999', '2,000-2,999', '10,000-14,999',\n       '5,000-7,499', '20,000-24,999', '1,000-1,999', '100,000-124,999',\n       '7,500-9,999', '4,000-4,999', '40,000-49,999', '50,000-59,999',\n       '3,000-3,999', '300,000-499,999', '200,000-249,999',\n       '125,000-149,999', '250,000-299,999', '80,000-89,999',\n       '90,000-99,999', '150,000-199,999', '>$1,000,000',\n       '$500,000-999,999', '> $500,000', '300,000-500,000', '10-20,000',\n       '0-10,000',\n       'I do not wish to disclose my approximate yearly compensation',\n       '20-30,000', '125-150,000', '30-40,000', '50-60,000',\n       '100-125,000', '90-100,000', '70-80,000', '80-90,000', '60-70,000',\n       '400-500,000', '40-50,000', '150-200,000', '300-400,000',\n       '200-250,000', '500,000+', '250-300,000']\nnew_list = ['25,000-29,999', '60,000-69,999', '0-999', '30,000-39,999',\n       '15,000-19,999', '70,000-79,999', '2,000-2,999', '10,000-14,999',\n       '5,000-7,499', '20,000-24,999', '1,000-1,999', '100,000-124,999',\n       '7,500-9,999', '4,000-4,999', '40,000-49,999', '50,000-59,999',\n       '3,000-3,999', '300,000-499,999', '200,000-249,999',\n       '125,000-149,999', '250,000-299,999', '80,000-89,999',\n       '90,000-99,999', '150,000-199,999', '500,000',\n       '500,000', '500,000', '300,000-499,999', '10,000-19,999',\n       '0-9,999',\n       'Undisclosed',\n       '20,000-29,999', '125,000-149,999', '30,000-39,999', '50,000-59,999',\n       '100,000-124,999', '90,000-99,999', '70,000-79,999', '80,000-89,999', '60,000-69,999',\n       '400,000-499,999', '40,000-49,999', '150,000-199,999', '300,000-399,999',\n       '200,000-249,999', '500,000', '250-299,999']\n\nsalary2[\"Salary\"] = salary2[\"Salary\"].replace(old_list, new_list)\nsalary2 = salary2[salary2[\"Salary\"]!=\"Undisclosed\"].dropna().reset_index(drop=True)\n\nold_role = ['Currently not employed', 'Product Manager',\n            'DBA\/Database Engineer', 'Product\/Project Manager',\n            'Not employed', 'Manager', \n            'Software Developer\/Software Engineer', 'Scientist\/Researcher',\n            'Research Assistant', 'Predictive Modeler', 'Data Miner',\n            'Programmer', 'Operations Research Practitioner', 'Developer Advocate',\n            'Machine Learning Engineer', 'Researcher', 'Program\/Project Manager']\nnew_role = ['Unemployed', 'Project Manager',\n            'DBA\/Database Engineer', 'Project Manager',\n            'Unemployed', 'Project Manager',\n            'Software Engineer', 'Research Scientist',\n            'Research Scientist', 'Data Scientist', 'Data Engineer',\n            'Computer Scientist', 'Research Scientist', 'Software Engineer',\n            'Data Scientist', 'Research Scientist', 'Project Manager']\nsalary2[\"Role\"] = salary2[\"Role\"].replace(old_role, new_role)\n\n# Adjust Salary\nsalary2 = adjust_amount(data=salary2, amount_column=\"Salary\")\n\nkeep = [\"Data Scientist\", \"Data Analyst\", \"Software Engineer\", \n        \"Research Scientist\", \"Business Analyst\", \"Project Manager\"]\nsalary2 = salary2.groupby([\"Year\", \"Gender\", \"Role\"])[\"Amount\"]\\\n            .mean().reset_index()\nsalary2 = salary2[salary2[\"Role\"].isin(keep)]\nsalary2[\"Amount\"] = salary2[\"Amount\"].apply(lambda x: round(x))\n\nsalary2 = salary2.pivot(index=[\"Year\", \"Gender\"], \n                        columns=\"Role\", values=\"Amount\").reset_index()\nsalary2.columns = [\"Year\", \"Gender\", \"BusinessAnalyst\", \"DataAnalyst\",\n                   \"DataScientist\", \"ProjectManager\", \"ResearchScientist\",\n                   \"SoftwareEngineer\"]\n\n# Sepparate genders\nsalary2_man = salary2[salary2[\"Gender\"]==\"Man\"].drop(columns=\"Gender\")\nsalary2_man = salary2_man.sort_values(salary2_man.last_valid_index(),\n                                      axis=1, ascending=False)\ncols = list(salary2_man.columns)\ncols = [cols[-1]] + cols[:-1]\nsalary2_man = salary2_man[cols]\n\n\nsalary2_woman = salary2[salary2[\"Gender\"]==\"Woman\"].drop(columns=\"Gender\")\nsalary2_woman = salary2_woman.sort_values(salary2_woman.last_valid_index(), axis=1,\n                    ascending=False)\ncols = list(salary2_woman.columns)\ncols = [cols[-1]] + cols[:-1]\nsalary2_woman = salary2_woman[cols]\n\nsalary2_man.to_csv(\"salary2_man.csv\", index=False)\nsalary2_woman.to_csv(\"salary2_woman.csv\", index=False)\n\n# Save usa.png img as well\nim = imageio.imread('..\/input\/kaggle-data-science-survey-20172021\/images\/man22.png')\nImage.fromarray(im).save(\"man22.png\")\n\nim = imageio.imread('..\/input\/kaggle-data-science-survey-20172021\/images\/lady22.png')\nImage.fromarray(im).save(\"lady22.png\")\n\nhtmlt = '''\n<!-- Bootstrap -->\n<link rel=\"stylesheet\" href=\"https:\/\/stackpath.bootstrapcdn.com\/bootstrap\/4.4.1\/css\/bootstrap.min.css\" integrity=\"sha384-Vkoo8x4CGsO3+Hhxv8T\/Q5PaXtkKtu6ug5TOeNV6gBiFeWPGFN9MuhOf23Q9Ifjh\" crossorigin=\"anonymous\">\n<!-- Style -->\n<style>\n\t.all22 {\n\t\tfont-family: \"Times New Roman\", Times, serif;\n\t\toverflow-x: hidden;\n\t\twidth: 98%;\n\t\tbackground-color:#e0c9a6;\n\t\t\/* background-image : url(\"bkg.jpg\"); changed via js *\/\n\t}\n\t.all22 .svg-container {\n\t\tdisplay: inline-block;\n\t\tposition: relative;\n\t\twidth: 100%;\n\t\tpadding-bottom: 80%;\n\t\tvertical-align: top;\n\t\toverflow: hidden;\n\t}\n\t.svg-content {\n\t\tdisplay: inline-block;\n\t\tposition: absolute;\n\t\ttop: 0;\n\t\tleft: 0;\n\t}\n\n\t.axisHidden path{\n\t\tstroke: #e0c9a6;\n\t}\n\n\t.axisHidden line{\n\t\tstroke: #e0c9a6;\n\t}\n\n\t.annotation.color text {\n\t\tfill: #000000;\n\t}\n\n\t@font-face {\n\t\tfont-family: parklane;\n\t\tsrc: url(https:\/\/h4ks.net\/ParkLaneNF.otf);\n\t\t}\n\n\tdiv.tooltip-donut {\n\t\tposition: absolute;\n\t\ttext-align: center;\n\t\tpadding: .3rem;\n\t\tbackground: #FFFFFF;\n\t\tcolor: #000000;\n\t\tborder: 1px solid #000000;\n\t\tborder-radius: 8px;\n\t\tpointer-events: none;\n\t\tfont-size: 2rem;\n\t\tz-index: 99999;\n\t}\n\n<\/style>\n\n<img id=\"baseimg\" src=\"man.png\" style=\"display:none\" \/>\n<div class=\"all22\">\n\t<center><h1 style=\"font-family: parklane\">Bonus: Average Salaries on Role & Gender<\/h1><\/center>\n\t<center><h3><i>- Salary was adjusted on respondent's rezidence -<\/i><\/h3><\/center>\n\t<div class=\"row\">\n\t\t<div id=\"map22\" class=\"svg-container\"><\/div>\n\t<\/div>\n<\/div>\n'''\n\njs_t = '''\nrequire.config({\n  paths: {\n    d3src: \"https:\/\/d3js.org\/\",\n  },\n  map: {\n    '*': {\n      'd3v6': 'd3src\/d3.v6.min',\n      'd3-selection': 'd3src\/d3-selection.v1.min',\n      'd3-drag': 'd3src\/d3-drag.v1.min',\n      'd3-shape': 'd3src\/d3-shape.v1.min',\n      'd3-path': 'd3src\/d3-path.v1.min',\n      'd3-dispatch': 'd3src\/d3-dispatch.v1.min',\n      'd3-annotation': 'https:\/\/cdnjs.cloudflare.com\/ajax\/libs\/d3-annotation\/2.5.1\/d3-annotation.min.js',\n    }\n  }\n});\n\nrequire([\"d3v6\", \"d3-annotation\"], function(d3, d3Annotation) {\n\n\/\/ Inject d3Annotation methods to d3\nfor (var key in d3Annotation) {\n  d3[key] = d3Annotation[key];\n}\n\n\/\/ Get Assets URL set by Kaggle\nconst baseAssetsUrl = document.getElementById('baseimg').src.replace(\/man.png.*$\/, '');\n\nconst $all22 = document.getElementsByClassName('all22')[0];\n$all22.style.backgroundImage = `url(\"${baseAssetsUrl}bkg.jpg\")`;\n\n\n\/\/ Set the SVG area\nconst margin = { LEFT: 20, RIGHT: 40, TOP: 15, BOTTOM: 0 }\nconst width = 950 - margin.LEFT - margin.RIGHT\nconst height = 700 - margin.TOP - margin.BOTTOM\nconst centreSpacing = 100\n\nconst svg = d3.select(\"#map22\").append(\"svg\")\n\/\/ .attr(\"style\", \"outline: thin solid red;\")\n  .attr(\"preserveAspectRatio\", \"xMinYMin meet\")\n  .attr(\"viewBox\", \"0 0 950 700\")\n  .classed(\"svg-content\", true)\n  .attr(\"transform\",\n   `translate(${margin.LEFT}, ${margin.TOP})`)\n\n\/\/ Gentleman\nsvg.append(\"image\")\n.attr(\"xlink:href\", baseAssetsUrl+\"man22.png\")\n    .attr(\"x\", \"21%\")\n    .attr(\"y\", \"8.5%\")\n    .attr(\"width\", 230)\n    .attr(\"height\", 230)\n    .style(\"opacity\", 1)\n\n\/\/ Lady\nsvg.append(\"image\")\n.attr(\"xlink:href\", baseAssetsUrl+\"lady22.png\")\n.attr(\"x\", \"65%\")\n.attr(\"y\", \"18%\")\n.attr(\"width\", 260)\n.attr(\"height\", 260)\n.style(\"opacity\", 1)\n\n\nfunction create_stacked_bar(data, subgroups, x_global, y_range, color) {\n\n  const groups = data.map(d => d.Year)\n\n  \/\/ Add X axis\n  const x = d3.scaleBand()\n      .domain(groups)\n      .range([0, width\/2.5])\n      .padding([0.2])\n  svg.append(\"g\")\n    .attr(\"transform\", `translate(${x_global}, ${height\/1.15})`)\n    .call(d3.axisBottom(x).tickSizeOuter(0))\n    .selectAll(\"text\")\n      .attr(\"y\", \"10\")\n      .attr(\"x\", \"0\")\n      .attr(\"font-size\", \"15px\")\n      .attr(\"font-weight\", 300)\n      .attr(\"text-anchor\", \"middle\")\n\n  \/\/ Add Y axis\n  const y = d3.scaleLinear()\n    .domain([0, y_range])\n    .range([ height\/2.3, 0]);\n  svg.append(\"g\")\n  .attr(\"class\", \"axisHidden\")\n  .attr(\"transform\", `translate(${x_global}, ${height\/2-50})`)\n    .call(d3.axisLeft(y).ticks(0))\n    .selectAll(\"text\")\n      .attr(\"font-size\", \"11px\")\n      .attr(\"font-weight\", 300);\n\n  \/\/s Stack data\n  const stackedData = d3.stack()\n    .keys(subgroups)\n    (data)\n\n  \/\/ Show the bars\n  const bars = svg.append(\"g\")\n    .selectAll(\"g\")\n    .data(stackedData)\n    .join(\"g\")\n    .attr(\"transform\", `translate(${x_global}, ${height\/2-50})`)\n      .attr(\"fill\", d => color(d.key))\n      .attr(\"stroke\", \"black\")\n      .attr(\"stroke-width\", 0.2)\n      .attr(\"class\", d => \"myRect \" + d.key ) \n      .selectAll(\"rect\")\n      .data(d => d)\n      .join(\"rect\")\n        .attr(\"x\", d => x(d.data.Year))\n        .attr(\"y\", d => y(d[1]))\n        .attr(\"height\", d => y(d[0]) - y(d[1]))\n        .attr(\"width\",x.bandwidth())\n\n  \/\/ Interactive\n  var div = d3.select(\"body\").append(\"div\")\n  .attr(\"class\", \"tooltip-donut\")\n  .style(\"opacity\", 0);\n\n  bars\n    .on('mouseenter', function (event, dt) {\n    \/\/ MOUSE ON\n    const subGroupName = d3.select(this.parentNode).datum().key \n          \n    d3.selectAll(\".myRect\").style(\"opacity\", 0.2)  \n          \n    d3.selectAll(\".\"+subGroupName).style(\"opacity\",1)\n\n\n    \/\/ Makes the new div appear\n    div.transition()\n        .duration(50)\n        .style(\"opacity\", 1);\n\n    const subgroupName = d3.select(this.parentNode).datum().key;\n    const subgroupValue = dt.data[subgroupName];\n\n    div.html(subgroupName + \"<br>\" + \"Avg: \" + subgroupValue)\n        .style(\"left\", (event.pageX) + \"px\")\n        .style(\"top\", (event.pageY-30) + \"px\");\n\n\n  })\n    \/\/ MOUSE LEAVE\n    .on('mouseleave', function () {\n      d3.selectAll(\".myRect\")\n          .style(\"opacity\",1) \n\n      \/\/ New div dissapears\n      div.transition()\n          .duration('50')\n          .style(\"opacity\", 0);\n      svg.selectAll('.divergence').remove()\n    })\n\n}\n\n\n\/\/ === Preferences ===\nd3.csv(baseAssetsUrl + \"salary2_man.csv\").then(function(data){\n\n  const x_global = 50\n  const y_range = 40000\n  const subgroups = ['ProjectManager', 'DataScientist', \n  'SoftwareEngineer', 'ResearchScientist', 'BusinessAnalyst',\n   'DataAnalyst']\n  const color = d3.scaleOrdinal()\n    .domain(subgroups)\n    .range([\"#6AA07B\", \"#1198A7\", \"#5691C8\",\n    \"#226BBF\", \"#184E8B\", \"#593d96\"]);\n\n  svg.append(\"text\")\n  .attr(\"y\", \"5%\")\n  .attr(\"x\", \"25%\")\n  .attr(\"font-size\", \"25px\")\n  .attr(\"text-anchor\", \"middle\")\n  .attr(\"font-weight\", 600)\n  .text(\"Gentlemen: Avg. Amount on Roles\")\n\n  create_stacked_bar(data, subgroups, x_global, y_range, color)\n  \n});\n\nd3.csv(baseAssetsUrl + \"salary2_woman.csv\").then(function(data){\n\n  const x_global = 500\n  const y_range = 40000\n  const subgroups = ['ProjectManager', 'DataScientist', \n  'BusinessAnalyst', 'DataAnalyst', 'SoftwareEngineer',\n   'ResearchScientist']\n  const color = d3.scaleOrdinal()\n    .domain(subgroups)\n    .range([\"#6AA07B\", \"#1198A7\", \"#184E8B\",\n    \"#593d96\", \"#5691C8\", \"#226BBF\"]);\n\n  svg.append(\"text\")\n  .attr(\"y\", \"5%\")\n  .attr(\"x\", \"70%\")\n  .attr(\"font-size\", \"25px\")\n  .attr(\"text-anchor\", \"middle\")\n  .attr(\"font-weight\", 600)\n  .text(\"Ladies: Avg. Amount on Roles\")\n\n  create_stacked_bar(data, subgroups, x_global, y_range, color)\n  \n});\n\nconst annot2 = [\n  {\n  note: { \n    label: \"Best paid salaries are PM and DS, followed by Software Eng. (which decreased in avg since 2018).\",\n    title: \"Gents\",\n    wrap: 400, \n    padding: 5, \n  },\n  className: \"color\",\n  \/\/ connector: { end: \"arrow\" },\n  color: [\"#ffffff\"],\n  x: 50,\n  y: 630,\n  dy: +0,\n  dx: +0\n},\n{\n  note: { \n    label: \"Top 2 coincide with gents (PM & DS), however the 3rd best paid is Business Analyst.\",\n    title: \"Ladies\",\n    wrap: 400, \n    padding: 5, \n  },\n  className: \"color\",\n  \/\/ connector: { end: \"arrow\" },\n  color: [\"#ffffff\"],\n  x: 500,\n  y: 630,\n  dy: +0,\n  dx: +0\n}]\n\nsvg.append(\"g\")\n  .style('font-size', 18)\n  .call(d3.annotation()\n          .annotations(annot2))\n\n\n});\n'''\n\n\nh = display(HTML(htmlt))\nj = py_display.Javascript(js_t)\npy_display.display_javascript(j)","521c267c":"cols = [\"Year\", \"What is your gender? - Selected Choice\",\n       df.columns[111]]\n\nincorp = df[cols]\nincorp.columns = [\"Year\", \"Gender\", \"Incorporate_ML\"]\nincorp = incorp[incorp[\"Gender\"].isin([\"Man\", \"Woman\"])]\n\nold_list = ['No (we do not use ML methods)',\n       'We are exploring ML methods (and may one day put a model into production)',\n       'I do not know',\n       'We use ML methods for generating insights (but do not put working models into production)',\n       'We have well established ML methods (i.e., models in production for more than 2 years)',\n       'We recently started using ML methods (i.e., models in production for less than 2 years)']\nnew_list = ['2. Never',\n       '3. Exploring Possibility',\n       '1. No Idea',\n       '5. Somehow Yes',\n       '6. Definitely Yes',\n       '4. Recently']\n\nincorp[\"Incorporate_ML\"] = incorp[\"Incorporate_ML\"].replace(old_list, new_list)\nincorp = incorp.value_counts().reset_index()\nincorp = pd.merge(incorp, total, on=[\"Year\", \"Gender\"])\n\nincorp[\"Perc\"] = incorp[0]\/incorp[\"Count\"]*100\nincorp[\"Perc\"] = incorp[\"Perc\"].apply(lambda x: round(x, 1))\nincorp.drop(columns=[0, \"Count\"], axis=1, inplace=True)\nincorp = pd.pivot(incorp, index=[\"Year\", \"Gender\"], columns=\"Incorporate_ML\",\n                   values=\"Perc\").reset_index()\n\nincorp_man = incorp[incorp[\"Gender\"] == \"Man\"].drop(columns=[\"Gender\"])\nincorp_woman = incorp[incorp[\"Gender\"] == \"Woman\"].drop(columns=[\"Gender\"])\n\nincorp_man.to_csv(\"incorp_man.csv\", index=False)\nincorp_woman.to_csv(\"incorp_woman.csv\", index=False)\n\n# Save usa.png img as well\nim = imageio.imread('..\/input\/kaggle-data-science-survey-20172021\/images\/man23.png')\nImage.fromarray(im).save(\"man23.png\")\n\nim = imageio.imread('..\/input\/kaggle-data-science-survey-20172021\/images\/lady23.png')\nImage.fromarray(im).save(\"lady23.png\")\n\nhtmlt = '''\n<!-- Bootstrap -->\n<link rel=\"stylesheet\" href=\"https:\/\/stackpath.bootstrapcdn.com\/bootstrap\/4.4.1\/css\/bootstrap.min.css\" integrity=\"sha384-Vkoo8x4CGsO3+Hhxv8T\/Q5PaXtkKtu6ug5TOeNV6gBiFeWPGFN9MuhOf23Q9Ifjh\" crossorigin=\"anonymous\">\n<!-- Style -->\n<style>\n\t.all23 {\n\t\tfont-family: \"Times New Roman\", Times, serif;\n\t\toverflow-x: hidden;\n\t\twidth: 98%;\n\t\tbackground-color:#e0c9a6;\n\t\t\/* background-image : url(\"bkg.jpg\"); changed via js *\/\n\t}\n\t.all23 .svg-container {\n\t\tdisplay: inline-block;\n\t\tposition: relative;\n\t\twidth: 100%;\n\t\tpadding-bottom: 54%;\n\t\tvertical-align: top;\n\t\toverflow: hidden;\n\t}\n\t.svg-content {\n\t\tdisplay: inline-block;\n\t\tposition: absolute;\n\t\ttop: 0;\n\t\tleft: 0;\n\t}\n\n\t.axisHidden path{\n\t\tstroke: #e0c9a6;\n\t}\n\n\t.axisHidden line{\n\t\tstroke: #e0c9a6;\n\t}\n\n\t.annotation.color text {\n\t\tfill: #000000;\n\t}\n\n\t@font-face {\n\t\tfont-family: parklane;\n\t\tsrc: url(https:\/\/h4ks.net\/ParkLaneNF.otf);\n\t\t}\n\n\tdiv.tooltip-donut {\n\t\tposition: absolute;\n\t\ttext-align: center;\n\t\tpadding: .3rem;\n\t\tbackground: #FFFFFF;\n\t\tcolor: #000000;\n\t\tborder: 1px solid #000000;\n\t\tborder-radius: 8px;\n\t\tpointer-events: none;\n\t\tfont-size: 2rem;\n\t\tz-index: 99999;\n\t}\n\n<\/style>\n\n<img id=\"baseimg\" src=\"man.png\" style=\"display:none\" \/>\n<div class=\"all23\">\n\t<center><h1 style=\"font-family: parklane\">Is your company using ML Techniques?<\/h1><\/center>\n\t<center><h3><i>- Are companies incorporating more ML into their business? -<\/i><\/h3><\/center>\n\t<div class=\"row\">\n\t\t<div id=\"map23-gents\" class=\"svg-container\"><\/div>\n\t<\/div>\n\n\t<div class=\"row\">\n\t\t<div id=\"map23-ladies\" class=\"svg-container\"><\/div>\n\t<\/div>\n<\/div>\n'''\n\njs_t = '''\nrequire.config({\n  paths: {\n    d3src: \"https:\/\/d3js.org\/\",\n  },\n  map: {\n    '*': {\n      'd3v6': 'd3src\/d3.v6.min',\n      'd3-selection': 'd3src\/d3-selection.v1.min',\n      'd3-drag': 'd3src\/d3-drag.v1.min',\n      'd3-shape': 'd3src\/d3-shape.v1.min',\n      'd3-path': 'd3src\/d3-path.v1.min',\n      'd3-dispatch': 'd3src\/d3-dispatch.v1.min',\n      'd3-annotation': 'https:\/\/cdnjs.cloudflare.com\/ajax\/libs\/d3-annotation\/2.5.1\/d3-annotation.min.js',\n    }\n  }\n});\n\nrequire([\"d3v6\", \"d3-annotation\"], function(d3, d3Annotation) {\n\n\/\/ Inject d3Annotation methods to d3\nfor (var key in d3Annotation) {\n  d3[key] = d3Annotation[key];\n}\n\n\/\/ Get Assets URL set by Kaggle\nconst baseAssetsUrl = document.getElementById('baseimg').src.replace(\/man.png.*$\/, '');\n\nconst $all23 = document.getElementsByClassName('all23')[0];\n$all23.style.backgroundImage = `url(\"${baseAssetsUrl}bkg.jpg\")`;\n\n\/\/ Set the SVG area\nconst margin = { LEFT: 20, RIGHT: 40, TOP: 15, BOTTOM: 0 }\nconst width = 950 - margin.LEFT - margin.RIGHT\nconst height = 500 - margin.TOP - margin.BOTTOM\nconst chart_size = 50\nconst x_global = 150\n\nfunction create_graph(data, svg, name){\n\n  const XY_axis = height\/2-200\n\n  svg.append(\"text\")\n  .attr(\"transform\", `translate(${x_global-60}, ${XY_axis-10})`)\n  .attr(\"font-size\", \"24px\")\n  .attr(\"text-anchor\", \"middle\")\n  .attr(\"font-weight\", 600)\n  .text(name)\n\n  data.forEach(d => {\n    d.Year = Number(d.Year)\n  })\n\n  \/\/ List of groups\n  var keys = data.columns.slice(1)\n\n  \/\/ Stacking\n  var series = d3.stack()\n    .keys(keys)\n    .offset(d3.stackOffsetSilhouette)\n    (data)\n\n  \/\/ X Axis\n  var x = d3.scaleLinear()\n    .domain(d3.extent(data, d => d.Year))\n    .range([0, width\/1.5])\n\n  var xAxis = g => g\n    .attr(\"transform\", `translate(${x_global}, ${XY_axis})`)\n    .call(d3.axisBottom(x)\n            .tickSize(height\/1.2).ticks(4).tickFormat(d3.format(\"d\")))\n    .call(g => g.select(\".domain\").remove())\n    .call(g => g.selectAll(\".tick line\")\n                .attr(\"stroke\", \"#3A3A3A\")\n                .attr('stroke-dasharray', '5 5'))\n    .call(g => g.selectAll(\".tick\")\n                .select('text')\n                .attr('fill', \"#3A3A3A\")\n                .style(\"font-size\", 15))\n\n  \/\/ Y Axis\n  var y = d3.scaleLinear()\n  .domain([-chart_size, chart_size])\n  .range([height\/1.2, 0])\n  svg.append(\"g\")\n  .attr(\"class\", \"axisHidden\")\n  .attr(\"transform\", `translate(${x_global}, ${XY_axis})`)\n    .call(d3.axisLeft(y).ticks(0))\n\n  \/\/ Area Chart\n  var area = d3.area()\n  .x(d => x(d.data.Year))\n  .y0(d => y(d[0]))\n  .y1(d => y(d[1]))\n\n  \/\/ Color\n  const color = d3.scaleOrdinal()\n    .domain(keys)\n     .range([\"#6AA07B\", \"#12A6B6\", \"#4687C3\",\n     \"#1F61AD\", \"#AB3680\", \"#8C2C69\"])\n\n  \/\/ Show\n  const path = svg.append(\"g\")\n    .selectAll(\"path\")\n    .data(series)\n    .join(\"path\")\n    .attr(\"transform\", `translate(${x_global}, ${XY_axis})`)\n      .attr(\"data-label\", d => d.key)\n      .attr(\"fill\", ({key}) => color(key))\n      .attr(\"stroke\", \"black\")\n      .attr(\"stroke-width\", 0.2)\n      .attr(\"d\", area)\n      .attr(\"opacity\", 0.8)\n\n  svg.append(\"g\")\n      .call(xAxis)\n\n  \/\/ ==== Interactive ====\n  const hover = (svg, path) => {\n  \n    const line = svg.append(\"g\")\n         .attr(\"display\", \"none\");\n  \n    line.append(\"g\")\n        .selectAll(\"line\")\n        .data(series)\n        .join(\"line\")\n        .attr(\"class\", \"cursor-line\")\n        .attr(\"fill\", \"#fff\")\n        .attr(\"stroke-width\", 0.8)\n        .attr(\"x1\", 10)\n        .attr(\"y1\", height)\n        .attr(\"x2\", 10)\n        .attr(\"y2\", 10);\n\n    line.append(\"text\")\n      .attr(\"class\", \"text-year\")\n      .attr(\"font-size\", 14)\n      .attr(\"x\", 0)\n      .attr(\"y\", 26)\n      .attr(\"transform\", \"rotate(-90 20 20) translate(0, -20)\");\n    \n    line.append(\"g\")\n        .selectAll(\"text\")\n        .data(series)\n        .join(\"text\")\n        .attr(\"class\", \"text-label\")\n        .attr(\"font-weight\", 900)\n        .attr(\"font-size\", 17)\n        .attr(\"y\", height-10)\n        .attr(\"x\", -8)\n        .attr(\"transform\", \n        \"rotate(-90 10 460)\");\n\n    line.append(\"g\")\n        .selectAll(\"text\")\n        .data(data)\n        .join(\"text\")\n        .attr(\"class\", \"text-value\")\n        .attr(\"font-weight\", 700)\n        .attr(\"font-size\", 14)\n        .attr(\"y\", height-(height*0.94))\n        .attr(\"x\", 14);\n\n    const mousemove = (event) => {\n  \n      event?.preventDefault();\n      const pointer = d3.pointer(event);\n\n      const xm = x.invert(pointer[0]);\n      const label = d3.select(event.target).attr(\"data-label\");\n  \n      line.attr(\"transform\", `translate(${pointer[0]}, 0)`)\n          .style(\"visibility\", \"inherit\");\n    \n          line.select(\".text-year\")\n          .text(parseInt(xm));\n      \n      line.selectAll(\".text-value\")\n        .text(d => d.Year === parseInt(xm) ? d[label]+\"%\" : \"\");\n\n      line.selectAll(\".text-label\")\n        .style(\"visibility\", \"hidden\")\n        .filter(d => d.key === label)\n        .style(\"visibility\", \"inherit\")\n        .attr(\"fill\", d => d.key === label ? color(d.key) : \"#000\")\n        .text(label);\n      \n      line.selectAll(\".cursor-line\")\n        .attr(\"stroke\", \"fff0\")\n        .filter(d => d.key === label)\n        .attr(\"stroke\", d => d.key === label ? color(d.key) : \"#fff0\")\n      \n      path.attr(\"opacity\", d => d.key === label ? 0.8 : 0.3);\n      \n      if (label === null) {\n        path.attr(\"opacity\", 0.8);\n        line.style(\"visibility\", \"hidden\");\n      }\n    }\n\n    const mouseenter = () => {\n      line.attr(\"display\", null);\n    }\n  \n    const mouseleave = () => {\n      line.attr(\"display\", \"none\");\n    }\n\n    svg\n        .on(\"mousemove\", mousemove)\n        .on(\"mouseenter\", mouseenter)\n        .on(\"mouseleave\", mouseleave)\n\n  }\n\n  svg.call(hover, path);\n}\n\n\/\/ ===== MEN =====\nconst svg1 = d3.select(\"#map23-gents\").append(\"svg\")\n\/\/ .attr(\"style\", \"outline: thin solid red;\")\n  .attr(\"preserveAspectRatio\", \"xMinYMin meet\")\n  .attr(\"viewBox\", \"0 0 950 500\")\n  .classed(\"svg-content\", true)\n  .attr(\"transform\",\n   `translate(${margin.LEFT}, ${margin.TOP})`)\n\n\/\/ Gentleman\nsvg1.append(\"image\")\n.attr(\"xlink:href\", baseAssetsUrl+\"man23.png\")\n    .attr(\"x\", \"-6%\")\n    .attr(\"y\", \"-11%\")\n    .attr(\"width\", 530)\n    .attr(\"height\", 530)\n    .style(\"opacity\", 1)\n\n\/\/ Comment\nconst annot1 = [\n  {\n  note: { \n    label: \"The no. of respondents that say that their company is exploring the possibility\/ have recently implemented ML has decreased since 2018.\",\n    title: \"Decrease in ML Interest\",\n    wrap: 120, \n    padding: 5, \n  },\n  className: \"color\",\n  connector: { end: \"arrow\" },\n  color: [\"#ffffff\"],\n  x: 750,\n  y: 210,\n  dy: +20,\n  dx: +25\n}]\n\nsvg1.append(\"g\")\n  .style('font-size', 17)\n  .call(d3.annotation()\n          .annotations(annot1))\n\nd3.csv(baseAssetsUrl + \"incorp_man.csv\").then(function(data){\n\n  const name = \"Gentlemen\"\n  create_graph(data, svg1, name)\n\n});\n\n\/\/ ===== WOMEN =====\nconst svg2 = d3.select(\"#map23-ladies\").append(\"svg\")\n\/\/ .attr(\"style\", \"outline: thin solid red;\")\n.attr(\"preserveAspectRatio\", \"xMinYMin meet\")\n.attr(\"viewBox\", \"0 0 950 500\")\n.classed(\"svg-content\", true)\n.attr(\"transform\",\n  `translate(${margin.LEFT}, ${margin.TOP})`)\n\n\/\/ Lady\nsvg2.append(\"image\")\n.attr(\"xlink:href\", baseAssetsUrl+\"lady23.png\")\n.attr(\"x\", \"-19%\")\n.attr(\"y\", \"10%\")\n.attr(\"width\", 420)\n.attr(\"height\", 420)\n.style(\"opacity\", 1)\n\n\/\/ Comment\nconst annot2 = [\n  {\n  note: { \n    label: \"There is a much smaller percentage or people that answered this question in 2021 vs 2018 (for both genders).\",\n    title: \"Overall decrease\",\n    wrap: 120, \n    padding: 5, \n  },\n  className: \"color\",\n  \/\/ connector: { end: \"arrow\" },\n  color: [\"#ffffff\"],\n  x: 770,\n  y: 350,\n  dy: -1,\n  dx: +1\n}]\n\nsvg2.append(\"g\")\n  .style('font-size', 17)\n  .call(d3.annotation()\n          .annotations(annot2))\n\nd3.csv(baseAssetsUrl + \"incorp_woman.csv\").then(function(data){\n\n  const name = \"Ladies\"\n  create_graph(data, svg2, name)\n\n});\n\n});\n'''\n\n\nh = display(HTML(htmlt))\nj = py_display.Javascript(js_t)\npy_display.display_javascript(j)","e150affb":"cols = [\"Year\", \"What is your gender? - Selected Choice\",\n       df.columns[121]]\n\ninvestm = df[cols]\ninvestm.columns = [\"Year\", \"Gender\", \"Investment\"]\ninvestm = investm[investm[\"Gender\"].isin([\"Man\", \"Woman\"])]\n\nold_list = ['$100-$999', '$0 ($USD)', '$1000-$9,999', '$1-$99',\n       '$100,000 or more ($USD)', '$10,000-$99,999', '$0 (USD)',\n       '> $100,000 ($USD)']\nnew_list = ['3. $100-$999', '1. $0', '4. $1000-$9,999', '2. $1-$99',\n       '6. > $100,000', '5. $10,000-$99,999', '1. $0',\n       '6. > $100,000']\n\ninvestm[\"Investment\"] = investm[\"Investment\"].replace(old_list, new_list)\ninvestm = investm.value_counts().reset_index()\ninvestm = pd.merge(investm, total, on=[\"Year\", \"Gender\"])\n\ninvestm[\"Perc\"] = investm[0]\/investm[\"Count\"]*100\ninvestm[\"Perc\"] = investm[\"Perc\"].apply(lambda x: round(x, 1))\ninvestm.drop(columns=[0, \"Count\"], axis=1, inplace=True)\ninvestm = pd.pivot(investm, index=[\"Year\", \"Gender\"], columns=\"Investment\",\n                   values=\"Perc\").reset_index()\n\ninvestm_man = investm[investm[\"Gender\"] == \"Man\"].drop(columns=[\"Gender\"])\ninvestm_woman = investm[investm[\"Gender\"] == \"Woman\"].drop(columns=[\"Gender\"])\n\ninvestm_man.to_csv(\"investm_man.csv\", index=False)\ninvestm_woman.to_csv(\"investm_woman.csv\", index=False)\n\n# Save usa.png img as well\nim = imageio.imread('..\/input\/kaggle-data-science-survey-20172021\/images\/man21.png')\nImage.fromarray(im).save(\"man21.png\")\n\nim = imageio.imread('..\/input\/kaggle-data-science-survey-20172021\/images\/lady21.png')\nImage.fromarray(im).save(\"lady21.png\")\n\nhtmlt = '''\n<!-- Bootstrap -->\n<link rel=\"stylesheet\" href=\"https:\/\/stackpath.bootstrapcdn.com\/bootstrap\/4.4.1\/css\/bootstrap.min.css\" integrity=\"sha384-Vkoo8x4CGsO3+Hhxv8T\/Q5PaXtkKtu6ug5TOeNV6gBiFeWPGFN9MuhOf23Q9Ifjh\" crossorigin=\"anonymous\">\n<!-- Style -->\n<style>\n\t.all21 {\n\t\tfont-family: \"Times New Roman\", Times, serif;\n\t\toverflow-x: hidden;\n\t\twidth: 98%;\n\t\tbackground-color:#e0c9a6;\n\t\t\/* background-image : url(\"bkg.jpg\"); changed via js *\/\n\t}\n\t.all21 .svg-container {\n\t\tdisplay: inline-block;\n\t\tposition: relative;\n\t\twidth: 100%;\n\t\tpadding-bottom: 54%;\n\t\tvertical-align: top;\n\t\toverflow: hidden;\n\t}\n\t.svg-content {\n\t\tdisplay: inline-block;\n\t\tposition: absolute;\n\t\ttop: 0;\n\t\tleft: 0;\n\t}\n\n\t.axisHidden path{\n\t\tstroke: #e0c9a6;\n\t}\n\n\t.axisHidden line{\n\t\tstroke: #e0c9a6;\n\t}\n\n\t.annotation.color text {\n\t\tfill: #000000;\n\t}\n\n\t@font-face {\n\t\tfont-family: parklane;\n\t\tsrc: url(https:\/\/h4ks.net\/ParkLaneNF.otf);\n\t\t}\n\n\tdiv.tooltip-donut {\n\t\tposition: absolute;\n\t\ttext-align: center;\n\t\tpadding: .3rem;\n\t\tbackground: #FFFFFF;\n\t\tcolor: #000000;\n\t\tborder: 1px solid #000000;\n\t\tborder-radius: 8px;\n\t\tpointer-events: none;\n\t\tfont-size: 2rem;\n\t\tz-index: 99999;\n\t}\n\n<\/style>\n\n<img id=\"baseimg\" src=\"man.png\" style=\"display:none\" \/>\n<div class=\"all21\">\n\t<center><h1 style=\"font-family: parklane\">Machine Learning Investment<\/h1><\/center>\n\t<center><h3><i>- How much do companies invest in Data Science? -<\/i><\/h3><\/center>\n\t<div class=\"row\">\n\t\t<div id=\"map21-gents\" class=\"svg-container\"><\/div>\n\t<\/div>\n\n\t<div class=\"row\">\n\t\t<div id=\"map21-ladies\" class=\"svg-container\"><\/div>\n\t<\/div>\n<\/div>\n'''\n\njs_t = '''\nrequire.config({\n  paths: {\n    d3src: \"https:\/\/d3js.org\/\",\n  },\n  map: {\n    '*': {\n      'd3v6': 'd3src\/d3.v6.min',\n      'd3-selection': 'd3src\/d3-selection.v1.min',\n      'd3-drag': 'd3src\/d3-drag.v1.min',\n      'd3-shape': 'd3src\/d3-shape.v1.min',\n      'd3-path': 'd3src\/d3-path.v1.min',\n      'd3-dispatch': 'd3src\/d3-dispatch.v1.min',\n      'd3-annotation': 'https:\/\/cdnjs.cloudflare.com\/ajax\/libs\/d3-annotation\/2.5.1\/d3-annotation.min.js',\n    }\n  }\n});\n\nrequire([\"d3v6\", \"d3-annotation\"], function(d3, d3Annotation) {\n\n\/\/ Inject d3Annotation methods to d3\nfor (var key in d3Annotation) {\n  d3[key] = d3Annotation[key];\n}\n\n\/\/ Get Assets URL set by Kaggle\nconst baseAssetsUrl = document.getElementById('baseimg').src.replace(\/man.png.*$\/, '');\n\nconst $all21 = document.getElementsByClassName('all21')[0];\n$all21.style.backgroundImage = `url(\"${baseAssetsUrl}bkg.jpg\")`;\n\n\/\/ Set the SVG area\nconst margin = { LEFT: 20, RIGHT: 40, TOP: 15, BOTTOM: 0 }\nconst width = 950 - margin.LEFT - margin.RIGHT\nconst height = 500 - margin.TOP - margin.BOTTOM\nconst chart_size = 40\nconst x_global = 150\n\n\/\/ STREAMGRAPH\nfunction create_graph(data, svg, name){\n\n  const XY_axis = height\/2-200\n\n  svg.append(\"text\")\n  .attr(\"transform\", `translate(${x_global-60}, ${XY_axis-10})`)\n  .attr(\"font-size\", \"24px\")\n  .attr(\"text-anchor\", \"middle\")\n  .attr(\"font-weight\", 600)\n  .text(name)\n\n  data.forEach(d => {\n    d.Year = Number(d.Year)\n  })\n\n  \/\/ List of groups\n  var keys = data.columns.slice(1)\n\n  \/\/ Stacking\n  var series = d3.stack()\n    .keys(keys)\n    .offset(d3.stackOffsetSilhouette)\n    (data)\n\n  \/\/ X Axis\n  var x = d3.scaleLinear()\n    .domain(d3.extent(data, d => d.Year))\n    .range([0, width\/1.5])\n\n  var xAxis = g => g\n    .attr(\"transform\", `translate(${x_global}, ${XY_axis})`)\n    .call(d3.axisBottom(x)\n            .tickSize(height\/1.2).ticks(2).tickFormat(d3.format(\"d\")))\n    .call(g => g.select(\".domain\").remove())\n    .call(g => g.selectAll(\".tick line\")\n                .attr(\"stroke\", \"#3A3A3A\")\n                .attr('stroke-dasharray', '5 5'))\n    .call(g => g.selectAll(\".tick\")\n                .select('text')\n                .attr('fill', \"#3A3A3A\")\n                .style(\"font-size\", 15))\n\n  \/\/ Y Axis\n  var y = d3.scaleLinear()\n  .domain([-chart_size, chart_size])\n  .range([height\/1.2, 0])\n  svg.append(\"g\")\n  .attr(\"class\", \"axisHidden\")\n  .attr(\"transform\", `translate(${x_global}, ${XY_axis})`)\n    .call(d3.axisLeft(y).ticks(0))\n\n  \/\/ Area Chart\n  var area = d3.area()\n  .x(d => x(d.data.Year))\n  .y0(d => y(d[0]))\n  .y1(d => y(d[1]))\n\n  \/\/ Color\n  const color = d3.scaleOrdinal()\n    .domain(keys)\n     .range([\"#DFAC59\", \"#79A988\", \"#12A6B6\",\"#5993C9\",\n     \"#236EC5\", \"#9C3175\"])\n\n  \/\/ Show\n  const path = svg.append(\"g\")\n    .selectAll(\"path\")\n    .data(series)\n    .join(\"path\")\n    .attr(\"transform\", `translate(${x_global}, ${XY_axis})`)\n      .attr(\"data-label\", d => d.key)\n      .attr(\"fill\", ({key}) => color(key))\n      .attr(\"stroke\", \"black\")\n      .attr(\"stroke-width\", 0.2)\n      .attr(\"d\", area)\n      .attr(\"opacity\", 0.8)\n\n  svg.append(\"g\")\n      .call(xAxis)\n\n  \/\/ ==== Interactive ====\n  const hover = (svg, path) => {\n  \n    const line = svg.append(\"g\")\n         .attr(\"display\", \"none\");\n  \n    line.append(\"g\")\n        .selectAll(\"line\")\n        .data(series)\n        .join(\"line\")\n        .attr(\"class\", \"cursor-line\")\n        .attr(\"fill\", \"#fff\")\n        .attr(\"stroke-width\", 0.8)\n        .attr(\"x1\", 10)\n        .attr(\"y1\", height)\n        .attr(\"x2\", 10)\n        .attr(\"y2\", 10);\n\n    line.append(\"text\")\n      .attr(\"class\", \"text-year\")\n      .attr(\"font-size\", 14)\n      .attr(\"x\", 0)\n      .attr(\"y\", 26)\n      .attr(\"transform\", \"rotate(-90 20 20) translate(0, -20)\");\n    \n    line.append(\"g\")\n        .selectAll(\"text\")\n        .data(series)\n        .join(\"text\")\n        .attr(\"class\", \"text-label\")\n        .attr(\"font-weight\", 900)\n        .attr(\"font-size\", 17)\n        .attr(\"y\", height-10)\n        .attr(\"x\", -8)\n        .attr(\"transform\", \n        \"rotate(-90 10 460)\");\n\n    line.append(\"g\")\n        .selectAll(\"text\")\n        .data(data)\n        .join(\"text\")\n        .attr(\"class\", \"text-value\")\n        .attr(\"font-weight\", 700)\n        .attr(\"font-size\", 14)\n        .attr(\"y\", height-(height*0.94))\n        .attr(\"x\", 14);\n\n    const mousemove = (event) => {\n  \n      event?.preventDefault();\n      const pointer = d3.pointer(event);\n\n      const xm = x.invert(pointer[0]);\n      const label = d3.select(event.target).attr(\"data-label\");\n  \n      line.attr(\"transform\", `translate(${pointer[0]}, 0)`)\n          .style(\"visibility\", \"inherit\");\n    \n          line.select(\".text-year\")\n          .text(parseInt(xm));\n      \n      line.selectAll(\".text-value\")\n        .text(d => d.Year === parseInt(xm) ? d[label]+\"%\" : \"\");\n\n      line.selectAll(\".text-label\")\n        .style(\"visibility\", \"hidden\")\n        .filter(d => d.key === label)\n        .style(\"visibility\", \"inherit\")\n        .attr(\"fill\", d => d.key === label ? color(d.key) : \"#000\")\n        .text(label);\n      \n      line.selectAll(\".cursor-line\")\n        .attr(\"stroke\", \"fff0\")\n        .filter(d => d.key === label)\n        .attr(\"stroke\", d => d.key === label ? color(d.key) : \"#fff0\")\n      \n      path.attr(\"opacity\", d => d.key === label ? 0.8 : 0.3);\n      \n      if (label === null) {\n        path.attr(\"opacity\", 0.8);\n        line.style(\"visibility\", \"hidden\");\n      }\n    }\n\n    const mouseenter = () => {\n      line.attr(\"display\", null);\n    }\n  \n    const mouseleave = () => {\n      line.attr(\"display\", \"none\");\n    }\n\n    svg\n        .on(\"mousemove\", mousemove)\n        .on(\"mouseenter\", mouseenter)\n        .on(\"mouseleave\", mouseleave)\n\n  }\n\n  svg.call(hover, path);\n}\n\n\/\/ ===== MEN =====\nconst svg1 = d3.select(\"#map21-gents\").append(\"svg\")\n\/\/ .attr(\"style\", \"outline: thin solid red;\")\n  .attr(\"preserveAspectRatio\", \"xMinYMin meet\")\n  .attr(\"viewBox\", \"0 0 950 500\")\n  .classed(\"svg-content\", true)\n  .attr(\"transform\",\n   `translate(${margin.LEFT}, ${margin.TOP})`)\n\n\/\/ Gentleman\nsvg1.append(\"image\")\n.attr(\"xlink:href\", baseAssetsUrl+\"man21.png\")\n    .attr(\"x\", \"-12%\")\n    .attr(\"y\", \"15%\")\n    .attr(\"width\", 370)\n    .attr(\"height\", 370)\n    .style(\"opacity\", 1)\n\n\/\/ Comment\nconst annot1 = [\n  {\n  note: { \n    label: \"~20% of respondents (men & women) say that their company doesn't invest in ML at all (no investment or not aware?).\",\n    title: \"No Investment\",\n    wrap: 100, \n    padding: 5, \n  },\n  className: \"color\",\n  connector: { end: \"arrow\" },\n  color: [\"#ffffff\"],\n  x: 755,\n  y: 350,\n  dy: -35,\n  dx: +30\n}]\n\nsvg1.append(\"g\")\n  .style('font-size', 17)\n  .call(d3.annotation()\n          .annotations(annot1))\n\nd3.csv(baseAssetsUrl + \"investm_man.csv\").then(function(data){\n\n  const name = \"Gentlemen\"\n  create_graph(data, svg1, name)\n\n});\n\n\/\/ ===== WOMEN =====\nconst svg2 = d3.select(\"#map21-ladies\").append(\"svg\")\n\/\/ .attr(\"style\", \"outline: thin solid red;\")\n.attr(\"preserveAspectRatio\", \"xMinYMin meet\")\n.attr(\"viewBox\", \"0 0 950 500\")\n.classed(\"svg-content\", true)\n.attr(\"transform\",\n  `translate(${margin.LEFT}, ${margin.TOP})`)\n\n\/\/ Lady\nsvg2.append(\"image\")\n.attr(\"xlink:href\", baseAssetsUrl+\"lady21.png\")\n.attr(\"x\", \"-18%\")\n.attr(\"y\", \"5%\")\n.attr(\"width\", 520)\n.attr(\"height\", 520)\n.style(\"opacity\", 1)\n\n\/\/ Comment\nconst annot2 = [\n  {\n  note: { \n    label: \"Very few respondents confirm that their company invests more than $10k in Machine Learning.\",\n    title: \"10k+ Investment\",\n    wrap: 120, \n    padding: 5, \n  },\n  className: \"color\",\n  connector: { end: \"arrow\" },\n  color: [\"#ffffff\"],\n  x: 755,\n  y: 140,\n  dy: +35,\n  dx: +30\n}]\n\nsvg2.append(\"g\")\n  .style('font-size', 17)\n  .call(d3.annotation()\n          .annotations(annot2))\n\nd3.csv(baseAssetsUrl + \"investm_woman.csv\").then(function(data){\n\n  const name = \"Ladies\"\n  create_graph(data, svg2, name)\n\n});\n\n});\n'''\n\n\nh = display(HTML(htmlt))\nj = py_display.Javascript(js_t)\npy_display.display_javascript(j)","1ba741ab":"# Activities that make up your job\n# Just mention within comments\ncols = list(df.columns[113:120])\nnew_names = [\"Build\/Run Data Infrastructure\",\n             \"Build prototypes to apply ML\",\n             \"Build\/Run a ML service\",\n             \"Experimentationto improve ML models\",\n             \"Research that advances the ML state of art\",\n             \"None\", \"Other\"]\n\nactivities = get_data_multiple_answers(cols, new_names)\nactivities = activities[activities[\"Year\"]!=2017]\n\nactivities_man = activities[activities[\"Gender\"] == \"Man\"].drop(columns=[\"Gender\"])\nactivities_woman = activities[activities[\"Gender\"] == \"Woman\"].drop(columns=[\"Gender\"])\n\nactivities_man.to_csv(\"activities_man.csv\", index=False)\nactivities_woman.to_csv(\"activities_woman.csv\", index=False)\n\n\n# Individuals at work\ncols = [\"Year\", \"What is your gender? - Selected Choice\",\n       df.columns[110]]\n\nteamsize = df[cols]\nteamsize.columns = [\"Year\", \"Gender\", \"TeamSize\"]\nteamsize = teamsize[teamsize[\"Gender\"].isin([\"Man\", \"Woman\"])]\n\nold_list = ['4-Mar', '2-Jan', '0', '9-May', '14-Oct', '20+', '15-19']\nnew_list = ['3. 3-4 individuals', '2. 1-2 individuals', '1. 0 individuals',\n            '4. 5-9 individuals', '5. 10-14 individuals',\n            '7. 20+ individuals', '6. 15-19 individuals']\nteamsize[\"TeamSize\"] = teamsize[\"TeamSize\"].replace(old_list, new_list)\nteamsize = teamsize.value_counts().reset_index()\nteamsize = pd.merge(teamsize, total, on=[\"Year\", \"Gender\"])\n\nteamsize[\"Perc\"] = teamsize[0]\/teamsize[\"Count\"]*100\nteamsize[\"Perc\"] = teamsize[\"Perc\"].apply(lambda x: round(x, 1))\nteamsize.drop(columns=[0, \"Count\"], axis=1, inplace=True)\nteamsize = pd.pivot(teamsize, index=[\"Year\", \"Gender\"], columns=\"TeamSize\",\n                    values=\"Perc\").reset_index()\n\nteamsize_man = teamsize[teamsize[\"Gender\"] == \"Man\"].drop(columns=[\"Gender\"])\nteamsize_woman = teamsize[teamsize[\"Gender\"] == \"Woman\"].drop(columns=[\"Gender\"])\n\nteamsize_man.to_csv(\"teamsize_man.csv\", index=False)\nteamsize_woman.to_csv(\"teamsize_woman.csv\", index=False)\n\n# Save usa.png img as well\nim = imageio.imread('..\/input\/kaggle-data-science-survey-20172021\/images\/man24.png')\nImage.fromarray(im).save(\"man24.png\")\n\nim = imageio.imread('..\/input\/kaggle-data-science-survey-20172021\/images\/lady24.png')\nImage.fromarray(im).save(\"lady24.png\")\n\nhtmlt = '''\n<!-- Bootstrap -->\n<link rel=\"stylesheet\" href=\"https:\/\/stackpath.bootstrapcdn.com\/bootstrap\/4.4.1\/css\/bootstrap.min.css\" integrity=\"sha384-Vkoo8x4CGsO3+Hhxv8T\/Q5PaXtkKtu6ug5TOeNV6gBiFeWPGFN9MuhOf23Q9Ifjh\" crossorigin=\"anonymous\">\n<!-- Style -->\n<style>\n\t.all24 {\n\t\tfont-family: \"Times New Roman\", Times, serif;\n\t\toverflow-x: hidden;\n\t\twidth: 98%;\n\t\tbackground-color:#e0c9a6;\n\t\t\/* background-image : url(\"bkg.jpg\"); changed via js *\/\n\t}\n\t.all24 .svg-container {\n\t\tdisplay: inline-block;\n\t\tposition: relative;\n\t\twidth: 100%;\n\t\tpadding-bottom: 54%;\n\t\tvertical-align: top;\n\t\toverflow: hidden;\n\t}\n\t.svg-content {\n\t\tdisplay: inline-block;\n\t\tposition: absolute;\n\t\ttop: 0;\n\t\tleft: 0;\n\t}\n\n\t.axisHidden path{\n\t\tstroke: #e0c9a6;\n\t}\n\n\t.axisHidden line{\n\t\tstroke: #e0c9a6;\n\t}\n\n\t.annotation.color text {\n\t\tfill: #000000;\n\t}\n\n\t@font-face {\n\t\tfont-family: parklane;\n\t\tsrc: url(https:\/\/h4ks.net\/ParkLaneNF.otf);\n\t\t}\n\n\tdiv.tooltip-donut {\n\t\tposition: absolute;\n\t\ttext-align: center;\n\t\tpadding: .3rem;\n\t\tbackground: #FFFFFF;\n\t\tcolor: #000000;\n\t\tborder: 1px solid #000000;\n\t\tborder-radius: 8px;\n\t\tpointer-events: none;\n\t\tfont-size: 2rem;\n\t\tz-index: 99999;\n\t}\n\n<\/style>\n\n<img id=\"baseimg\" src=\"man.png\" style=\"display:none\" \/>\n<div class=\"all24\">\n\t<center><h1 style=\"font-family: parklane\">Data Science Teamsize<\/h1><\/center>\n\t<center><h3><i>- How many individuals are responsible for data science work? -<\/i><\/h3><\/center>\n\t<div class=\"row\">\n\t\t<div id=\"map24-gents\" class=\"svg-container\"><\/div>\n\t<\/div>\n\n\t<div class=\"row\">\n\t\t<div id=\"map24-ladies\" class=\"svg-container\"><\/div>\n\t<\/div>\n<\/div>\n\n'''\n\njs_t = '''\nrequire.config({\n  paths: {\n    d3src: \"https:\/\/d3js.org\/\",\n  },\n  map: {\n    '*': {\n      'd3v6': 'd3src\/d3.v6.min',\n      'd3-selection': 'd3src\/d3-selection.v1.min',\n      'd3-drag': 'd3src\/d3-drag.v1.min',\n      'd3-shape': 'd3src\/d3-shape.v1.min',\n      'd3-path': 'd3src\/d3-path.v1.min',\n      'd3-dispatch': 'd3src\/d3-dispatch.v1.min',\n      'd3-annotation': 'https:\/\/cdnjs.cloudflare.com\/ajax\/libs\/d3-annotation\/2.5.1\/d3-annotation.min.js',\n    }\n  }\n});\n\nrequire([\"d3v6\", \"d3-annotation\"], function(d3, d3Annotation) {\n\n\/\/ Inject d3Annotation methods to d3\nfor (var key in d3Annotation) {\n  d3[key] = d3Annotation[key];\n}\n\n\/\/ Get Assets URL set by Kaggle\nconst baseAssetsUrl = document.getElementById('baseimg').src.replace(\/man.png.*$\/, '');\n\nconst $all24 = document.getElementsByClassName('all24')[0];\n$all24.style.backgroundImage = `url(\"${baseAssetsUrl}bkg.jpg\")`;\n\n\/\/ Set the SVG area\nconst margin = { LEFT: 20, RIGHT: 40, TOP: 15, BOTTOM: 0 }\nconst width = 950 - margin.LEFT - margin.RIGHT\nconst height = 500 - margin.TOP - margin.BOTTOM\nconst chart_size = 40\nconst x_global = 150\n\n\/\/ STREAMGRAPH\nfunction create_graph(data, svg, name){\n\n  const XY_axis = height\/2-200\n\n  svg.append(\"text\")\n  .attr(\"transform\", `translate(${x_global-60}, ${XY_axis-10})`)\n  .attr(\"font-size\", \"24px\")\n  .attr(\"text-anchor\", \"middle\")\n  .attr(\"font-weight\", 600)\n  .text(name)\n\n  data.forEach(d => {\n    d.Year = Number(d.Year)\n  })\n\n  \/\/ List of groups\n  var keys = data.columns.slice(1)\n\n  \/\/ Stacking\n  var series = d3.stack()\n    .keys(keys)\n    .offset(d3.stackOffsetSilhouette)\n    (data)\n\n  \/\/ X Axis\n  var x = d3.scaleLinear()\n    .domain(d3.extent(data, d => d.Year))\n    .range([0, width\/1.5])\n\n  var xAxis = g => g\n    .attr(\"transform\", `translate(${x_global}, ${XY_axis})`)\n    .call(d3.axisBottom(x)\n            .tickSize(height\/1.2).ticks(2).tickFormat(d3.format(\"d\")))\n    .call(g => g.select(\".domain\").remove())\n    .call(g => g.selectAll(\".tick line\")\n                .attr(\"stroke\", \"#3A3A3A\")\n                .attr('stroke-dasharray', '5 5'))\n    .call(g => g.selectAll(\".tick\")\n                .select('text')\n                .attr('fill', \"#3A3A3A\")\n                .style(\"font-size\", 15))\n\n  \/\/ Y Axis\n  var y = d3.scaleLinear()\n  .domain([-chart_size, chart_size])\n  .range([height\/1.2, 0])\n  svg.append(\"g\")\n  .attr(\"class\", \"axisHidden\")\n  .attr(\"transform\", `translate(${x_global}, ${XY_axis})`)\n    .call(d3.axisLeft(y).ticks(0))\n\n  \/\/ Area Chart\n  var area = d3.area()\n  .x(d => x(d.data.Year))\n  .y0(d => y(d[0]))\n  .y1(d => y(d[1]))\n\n  \/\/ Color\n  const color = d3.scaleOrdinal()\n    .domain(keys)\n     .range([\"#CB6E77\", \"#B4414C\", \"#993336\",\n     \"#CC7550\", \"#BE5F37\", \"#CE963B\",\n     \"#5B8668\"])\n\n  \/\/ Show\n  const path = svg.append(\"g\")\n    .selectAll(\"path\")\n    .data(series)\n    .join(\"path\")\n    .attr(\"transform\", `translate(${x_global}, ${XY_axis})`)\n      .attr(\"data-label\", d => d.key)\n      .attr(\"fill\", ({key}) => color(key))\n      .attr(\"stroke\", \"black\")\n      .attr(\"stroke-width\", 0.2)\n      .attr(\"d\", area)\n      .attr(\"opacity\", 0.8)\n\n  svg.append(\"g\")\n      .call(xAxis)\n\n  \/\/ ==== Interactive ====\n  const hover = (svg, path) => {\n  \n    const line = svg.append(\"g\")\n         .attr(\"display\", \"none\");\n  \n    line.append(\"g\")\n        .selectAll(\"line\")\n        .data(series)\n        .join(\"line\")\n        .attr(\"class\", \"cursor-line\")\n        .attr(\"fill\", \"#fff\")\n        .attr(\"stroke-width\", 0.8)\n        .attr(\"x1\", 10)\n        .attr(\"y1\", height)\n        .attr(\"x2\", 10)\n        .attr(\"y2\", 10);\n\n    line.append(\"text\")\n      .attr(\"class\", \"text-year\")\n      .attr(\"font-size\", 14)\n      .attr(\"x\", 0)\n      .attr(\"y\", 26)\n      .attr(\"transform\", \"rotate(-90 20 20) translate(0, -20)\");\n    \n    line.append(\"g\")\n        .selectAll(\"text\")\n        .data(series)\n        .join(\"text\")\n        .attr(\"class\", \"text-label\")\n        .attr(\"font-weight\", 900)\n        .attr(\"font-size\", 17)\n        .attr(\"y\", height-10)\n        .attr(\"x\", -8)\n        .attr(\"transform\", \n        \"rotate(-90 10 460)\");\n\n    line.append(\"g\")\n        .selectAll(\"text\")\n        .data(data)\n        .join(\"text\")\n        .attr(\"class\", \"text-value\")\n        .attr(\"font-weight\", 700)\n        .attr(\"font-size\", 14)\n        .attr(\"y\", height-(height*0.94))\n        .attr(\"x\", 14);\n\n    const mousemove = (event) => {\n  \n      event?.preventDefault();\n      const pointer = d3.pointer(event);\n\n      const xm = x.invert(pointer[0]);\n      const label = d3.select(event.target).attr(\"data-label\");\n  \n      line.attr(\"transform\", `translate(${pointer[0]}, 0)`)\n          .style(\"visibility\", \"inherit\");\n    \n          line.select(\".text-year\")\n          .text(parseInt(xm));\n      \n      line.selectAll(\".text-value\")\n        .text(d => d.Year === parseInt(xm) ? d[label]+\"%\" : \"\");\n\n      line.selectAll(\".text-label\")\n        .style(\"visibility\", \"hidden\")\n        .filter(d => d.key === label)\n        .style(\"visibility\", \"inherit\")\n        .attr(\"fill\", d => d.key === label ? color(d.key) : \"#000\")\n        .text(label);\n      \n      line.selectAll(\".cursor-line\")\n        .attr(\"stroke\", \"fff0\")\n        .filter(d => d.key === label)\n        .attr(\"stroke\", d => d.key === label ? color(d.key) : \"#fff0\")\n      \n      path.attr(\"opacity\", d => d.key === label ? 0.8 : 0.3);\n      \n      if (label === null) {\n        path.attr(\"opacity\", 0.8);\n        line.style(\"visibility\", \"hidden\");\n      }\n    }\n\n    const mouseenter = () => {\n      line.attr(\"display\", null);\n    }\n  \n    const mouseleave = () => {\n      line.attr(\"display\", \"none\");\n    }\n\n    svg\n        .on(\"mousemove\", mousemove)\n        .on(\"mouseenter\", mouseenter)\n        .on(\"mouseleave\", mouseleave)\n\n  }\n\n  svg.call(hover, path);\n}\n\n\/\/ ===== MEN =====\nconst svg1 = d3.select(\"#map24-gents\").append(\"svg\")\n\/\/ .attr(\"style\", \"outline: thin solid red;\")\n  .attr(\"preserveAspectRatio\", \"xMinYMin meet\")\n  .attr(\"viewBox\", \"0 0 950 500\")\n  .classed(\"svg-content\", true)\n  .attr(\"transform\",\n   `translate(${margin.LEFT}, ${margin.TOP})`)\n\n\/\/ Gentleman\nsvg1.append(\"image\")\n.attr(\"xlink:href\", baseAssetsUrl+\"man24.png\")\n    .attr(\"x\", \"-6%\")\n    .attr(\"y\", \"13%\")\n    .attr(\"width\", 380)\n    .attr(\"height\", 380)\n    .style(\"opacity\", 1)\n\n\/\/ Comment\nconst annot1 = [\n  {\n  note: { \n    label: \"~35% of respondents say that the size of the DS team is small (1-4 individuals) - correlated with business size.\",\n    title: \"Small Teams\",\n    wrap: 100, \n    padding: 5, \n  },\n  className: \"color\",\n  connector: { end: \"arrow\" },\n  color: [\"#ffffff\"],\n  x: 755,\n  y: 300,\n  dy: -35,\n  dx: +30\n}]\n\nsvg1.append(\"g\")\n  .style('font-size', 17)\n  .call(d3.annotation()\n          .annotations(annot1))\n\nd3.csv(baseAssetsUrl + \"teamsize_man.csv\").then(function(data){\n\n  const name = \"Gentlemen\"\n  create_graph(data, svg1, name)\n\n});\n\n\/\/ ===== WOMEN =====\nconst svg2 = d3.select(\"#map24-ladies\").append(\"svg\")\n\/\/ .attr(\"style\", \"outline: thin solid red;\")\n.attr(\"preserveAspectRatio\", \"xMinYMin meet\")\n.attr(\"viewBox\", \"0 0 950 500\")\n.classed(\"svg-content\", true)\n.attr(\"transform\",\n  `translate(${margin.LEFT}, ${margin.TOP})`)\n\n\/\/ Lady\nsvg2.append(\"image\")\n.attr(\"xlink:href\", baseAssetsUrl+\"lady24.png\")\n.attr(\"x\", \"-22%\")\n.attr(\"y\", \"3%\")\n.attr(\"width\", 510)\n.attr(\"height\", 510)\n.style(\"opacity\", 1)\n\n\/\/ Comment\nconst annot2 = [\n  {\n  note: { \n    label: \"Only ~12% of respondents affirm that the size of the DS team is larger than 20 individuals.\",\n    title: \"Large Teams\",\n    wrap: 120, \n    padding: 5, \n  },\n  className: \"color\",\n  connector: { end: \"arrow\" },\n  color: [\"#ffffff\"],\n  x: 755,\n  y: 140,\n  dy: +35,\n  dx: +30\n}]\n\nsvg2.append(\"g\")\n  .style('font-size', 17)\n  .call(d3.annotation()\n          .annotations(annot2))\n\nd3.csv(baseAssetsUrl + \"teamsize_woman.csv\").then(function(data){\n\n  const name = \"Ladies\"\n  create_graph(data, svg2, name)\n\n});\n\n});\n'''\n\n\nh = display(HTML(htmlt))\nj = py_display.Javascript(js_t)\npy_display.display_javascript(j)","f5155336":"# DS Courses\ncols = list(df.columns[203:213])\nnew_names = [\"Coursera\", \"edX\", \"Kaggle Learn\", \"DataCamp\",\n             \"Fast.ai\", \"Udacity\", \"Udemy\", \"LinkedIn Learning\",\n             \"Cloud Certifications\", \"University\"]\n\ncourses = get_data_multiple_answers(cols, new_names)\ncourses = courses[courses[\"Year\"]!=2017]\n\ncourses_man = courses[courses[\"Gender\"] == \"Man\"].drop(columns=[\"Gender\"])\ncourses_woman = courses[courses[\"Gender\"] == \"Woman\"].drop(columns=[\"Gender\"])\n\ncourses_man.to_csv(\"courses_man.csv\", index=False)\ncourses_woman.to_csv(\"courses_woman.csv\", index=False)\n\n# Save usa.png img as well\nim = imageio.imread('..\/input\/kaggle-data-science-survey-20172021\/images\/man25.png')\nImage.fromarray(im).save(\"man25.png\")\n\nim = imageio.imread('..\/input\/kaggle-data-science-survey-20172021\/images\/lady25.png')\nImage.fromarray(im).save(\"lady25.png\")\n\nhtmlt = '''\n<!-- Bootstrap -->\n<link rel=\"stylesheet\" href=\"https:\/\/stackpath.bootstrapcdn.com\/bootstrap\/4.4.1\/css\/bootstrap.min.css\" integrity=\"sha384-Vkoo8x4CGsO3+Hhxv8T\/Q5PaXtkKtu6ug5TOeNV6gBiFeWPGFN9MuhOf23Q9Ifjh\" crossorigin=\"anonymous\">\n<!-- Style -->\n<style>\n\t.all25 {\n\t\tfont-family: \"Times New Roman\", Times, serif;\n\t\toverflow-x: hidden;\n\t\twidth: 98%;\n\t\tbackground-color:#e0c9a6;\n\t\t\/* background-image : url(\"bkg.jpg\"); changed via js *\/\n\t}\n\t.all25 .svg-container {\n\t\tdisplay: inline-block;\n\t\tposition: relative;\n\t\twidth: 100%;\n\t\tpadding-bottom: 54%;\n\t\tvertical-align: top;\n\t\toverflow: hidden;\n\t}\n\t.svg-content {\n\t\tdisplay: inline-block;\n\t\tposition: absolute;\n\t\ttop: 0;\n\t\tleft: 0;\n\t}\n\n\t.axisHidden path{\n\t\tstroke: #e0c9a6;\n\t}\n\n\t.axisHidden line{\n\t\tstroke: #e0c9a6;\n\t}\n\n\t.annotation.color text {\n\t\tfill: #000000;\n\t}\n\n\t@font-face {\n\t\tfont-family: parklane;\n\t\tsrc: url(https:\/\/h4ks.net\/ParkLaneNF.otf);\n\t\t}\n\n\tdiv.tooltip-donut {\n\t\tposition: absolute;\n\t\ttext-align: center;\n\t\tpadding: .3rem;\n\t\tbackground: #FFFFFF;\n\t\tcolor: #000000;\n\t\tborder: 1px solid #000000;\n\t\tborder-radius: 8px;\n\t\tpointer-events: none;\n\t\tfont-size: 2rem;\n\t\tz-index: 99999;\n\t}\n\n<\/style>\n\n<img id=\"baseimg\" src=\"man.png\" style=\"display:none\" \/>\n<div class=\"all25\">\n\t<center><h1 style=\"font-family: parklane\">Acquiring Knowledge<\/h1><\/center>\n\t<center><h3><i>- What are the most used platforms for learning? -<\/i><\/h3><\/center>\n\t<div class=\"row\">\n\t\t<div id=\"map25-gents\" class=\"svg-container\"><\/div>\n\t<\/div>\n\n\t<div class=\"row\">\n\t\t<div id=\"map25-ladies\" class=\"svg-container\"><\/div>\n\t<\/div>\n<\/div>\n'''\n\njs_t = '''\nrequire.config({\n  paths: {\n    d3src: \"https:\/\/d3js.org\/\",\n  },\n  map: {\n    '*': {\n      'd3v6': 'd3src\/d3.v6.min',\n      'd3-selection': 'd3src\/d3-selection.v1.min',\n      'd3-drag': 'd3src\/d3-drag.v1.min',\n      'd3-shape': 'd3src\/d3-shape.v1.min',\n      'd3-path': 'd3src\/d3-path.v1.min',\n      'd3-dispatch': 'd3src\/d3-dispatch.v1.min',\n      'd3-annotation': 'https:\/\/cdnjs.cloudflare.com\/ajax\/libs\/d3-annotation\/2.5.1\/d3-annotation.min.js',\n    }\n  }\n});\n\nrequire([\"d3v6\", \"d3-annotation\"], function(d3, d3Annotation) {\n\n\/\/ Inject d3Annotation methods to d3\nfor (var key in d3Annotation) {\n  d3[key] = d3Annotation[key];\n}\n\n\/\/ Get Assets URL set by Kaggle\nconst baseAssetsUrl = document.getElementById('baseimg').src.replace(\/man.png.*$\/, '');\n\nconst $all25 = document.getElementsByClassName('all25')[0];\n$all25.style.backgroundImage = `url(\"${baseAssetsUrl}bkg.jpg\")`;\n\n\/\/ Set the SVG area\nconst margin = { LEFT: 20, RIGHT: 40, TOP: 15, BOTTOM: 0 }\nconst width = 950 - margin.LEFT - margin.RIGHT\nconst height = 500 - margin.TOP - margin.BOTTOM\nconst chart_size = 130\nconst x_global = 150\n\nfunction create_graph(data, svg, name){\n\n  const XY_axis = height\/2-200\n\n  svg.append(\"text\")\n  .attr(\"transform\", `translate(${x_global-60}, ${XY_axis-10})`)\n  .attr(\"font-size\", \"24px\")\n  .attr(\"text-anchor\", \"middle\")\n  .attr(\"font-weight\", 600)\n  .text(name)\n\n  data.forEach(d => {\n    d.Year = Number(d.Year)\n  })\n\n  \/\/ List of groups\n  var keys = data.columns.slice(1)\n\n  \/\/ Stacking\n  var series = d3.stack()\n    .keys(keys)\n    .offset(d3.stackOffsetSilhouette)\n    (data)\n\n  \/\/ X Axis\n  var x = d3.scaleLinear()\n    .domain(d3.extent(data, d => d.Year))\n    .range([0, width\/1.5])\n\n  var xAxis = g => g\n    .attr(\"transform\", `translate(${x_global}, ${XY_axis})`)\n    .call(d3.axisBottom(x)\n            .tickSize(height\/1.2).ticks(4).tickFormat(d3.format(\"d\")))\n    .call(g => g.select(\".domain\").remove())\n    .call(g => g.selectAll(\".tick line\")\n                .attr(\"stroke\", \"#3A3A3A\")\n                .attr('stroke-dasharray', '5 5'))\n    .call(g => g.selectAll(\".tick\")\n                .select('text')\n                .attr('fill', \"#3A3A3A\")\n                .style(\"font-size\", 15))\n\n  \/\/ Y Axis\n  var y = d3.scaleLinear()\n  .domain([-chart_size, chart_size])\n  .range([height\/1.2, 0])\n  svg.append(\"g\")\n  .attr(\"class\", \"axisHidden\")\n  .attr(\"transform\", `translate(${x_global}, ${XY_axis})`)\n    .call(d3.axisLeft(y).ticks(0))\n\n  \/\/ Area Chart\n  var area = d3.area()\n  .x(d => x(d.data.Year))\n  .y0(d => y(d[0]))\n  .y1(d => y(d[1]))\n\n  \/\/ Color\n  const color = d3.scaleOrdinal()\n    .domain(keys)\n     .range([\"#C77C90\", \"#BD5A6E\", \"#C66E60\",\n              \"#CB905F\", \"#799E7F\", \"#249B93\",\n              \"#609CB7\", \"#357DA7\", \"#B14E9D\",\n              \"#803871\"])\n\n  \/\/ Show\n  const path = svg.append(\"g\")\n    .selectAll(\"path\")\n    .data(series)\n    .join(\"path\")\n    .attr(\"transform\", `translate(${x_global}, ${XY_axis})`)\n      .attr(\"data-label\", d => d.key)\n      .attr(\"fill\", ({key}) => color(key))\n      .attr(\"stroke\", \"black\")\n      .attr(\"stroke-width\", 0.2)\n      .attr(\"d\", area)\n      .attr(\"opacity\", 0.8)\n\n  svg.append(\"g\")\n      .call(xAxis)\n\n  \/\/ ==== Interactive ====\n  const hover = (svg, path) => {\n  \n    const line = svg.append(\"g\")\n         .attr(\"display\", \"none\");\n  \n    line.append(\"g\")\n        .selectAll(\"line\")\n        .data(series)\n        .join(\"line\")\n        .attr(\"class\", \"cursor-line\")\n        .attr(\"fill\", \"#fff\")\n        .attr(\"stroke-width\", 0.8)\n        .attr(\"x1\", 10)\n        .attr(\"y1\", height)\n        .attr(\"x2\", 10)\n        .attr(\"y2\", 10);\n\n    line.append(\"text\")\n      .attr(\"class\", \"text-year\")\n      .attr(\"font-size\", 14)\n      .attr(\"x\", 0)\n      .attr(\"y\", 26)\n      .attr(\"transform\", \"rotate(-90 20 20) translate(0, -20)\");\n    \n    line.append(\"g\")\n        .selectAll(\"text\")\n        .data(series)\n        .join(\"text\")\n        .attr(\"class\", \"text-label\")\n        .attr(\"font-weight\", 900)\n        .attr(\"font-size\", 17)\n        .attr(\"y\", height-10)\n        .attr(\"x\", -8)\n        .attr(\"transform\", \n        \"rotate(-90 10 460)\");\n\n    line.append(\"g\")\n        .selectAll(\"text\")\n        .data(data)\n        .join(\"text\")\n        .attr(\"class\", \"text-value\")\n        .attr(\"font-weight\", 700)\n        .attr(\"font-size\", 14)\n        .attr(\"y\", height-(height*0.94))\n        .attr(\"x\", 14);\n\n    const mousemove = (event) => {\n  \n      event?.preventDefault();\n      const pointer = d3.pointer(event);\n\n      const xm = x.invert(pointer[0]);\n      const label = d3.select(event.target).attr(\"data-label\");\n  \n      line.attr(\"transform\", `translate(${pointer[0]}, 0)`)\n          .style(\"visibility\", \"inherit\");\n    \n          line.select(\".text-year\")\n          .text(parseInt(xm));\n      \n      line.selectAll(\".text-value\")\n        .text(d => d.Year === parseInt(xm) ? d[label]+\"%\" : \"\");\n\n      line.selectAll(\".text-label\")\n        .style(\"visibility\", \"hidden\")\n        .filter(d => d.key === label)\n        .style(\"visibility\", \"inherit\")\n        .attr(\"fill\", d => d.key === label ? color(d.key) : \"#000\")\n        .text(label);\n      \n      line.selectAll(\".cursor-line\")\n        .attr(\"stroke\", \"fff0\")\n        .filter(d => d.key === label)\n        .attr(\"stroke\", d => d.key === label ? color(d.key) : \"#fff0\")\n      \n      path.attr(\"opacity\", d => d.key === label ? 0.8 : 0.3);\n      \n      if (label === null) {\n        path.attr(\"opacity\", 0.8);\n        line.style(\"visibility\", \"hidden\");\n      }\n    }\n\n    const mouseenter = () => {\n      line.attr(\"display\", null);\n    }\n  \n    const mouseleave = () => {\n      line.attr(\"display\", \"none\");\n    }\n\n    svg\n        .on(\"mousemove\", mousemove)\n        .on(\"mouseenter\", mouseenter)\n        .on(\"mouseleave\", mouseleave)\n\n  }\n\n  svg.call(hover, path);\n}\n\n\/\/ ===== MEN =====\nconst svg1 = d3.select(\"#map25-gents\").append(\"svg\")\n\/\/ .attr(\"style\", \"outline: thin solid red;\")\n  .attr(\"preserveAspectRatio\", \"xMinYMin meet\")\n  .attr(\"viewBox\", \"0 0 950 500\")\n  .classed(\"svg-content\", true)\n  .attr(\"transform\",\n   `translate(${margin.LEFT}, ${margin.TOP})`)\n\n\/\/ Gentleman\nsvg1.append(\"image\")\n.attr(\"xlink:href\", baseAssetsUrl+\"man25.png\")\n    .attr(\"x\", \"-11%\")\n    .attr(\"y\", \"12%\")\n    .attr(\"width\", 380)\n    .attr(\"height\", 380)\n    .style(\"opacity\", 1)\n\n\/\/ Comment\nconst annot1 = [\n  {\n  note: { \n    label: \"Has gradually increased in popularity, from 17% usage in 2018 to ~34% in 2021.\",\n    title: \"Kaggle Learn\",\n    wrap: 120, \n    padding: 5, \n  },\n  className: \"color\",\n  connector: { end: \"arrow\" },\n  color: [\"#ffffff\"],\n  x: 750,\n  y: 280,\n  dy: -20,\n  dx: +25\n}]\n\nsvg1.append(\"g\")\n  .style('font-size', 17)\n  .call(d3.annotation()\n          .annotations(annot1))\n\nd3.csv(baseAssetsUrl + \"courses_man.csv\").then(function(data){\n\n  const name = \"Gentlemen\"\n  create_graph(data, svg1, name)\n\n});\n\n\/\/ ===== WOMEN =====\nconst svg2 = d3.select(\"#map25-ladies\").append(\"svg\")\n\/\/ .attr(\"style\", \"outline: thin solid red;\")\n.attr(\"preserveAspectRatio\", \"xMinYMin meet\")\n.attr(\"viewBox\", \"0 0 950 500\")\n.classed(\"svg-content\", true)\n.attr(\"transform\",\n  `translate(${margin.LEFT}, ${margin.TOP})`)\n\n\/\/ Lady\nsvg2.append(\"image\")\n.attr(\"xlink:href\", baseAssetsUrl+\"lady25.png\")\n.attr(\"x\", \"-16%\")\n.attr(\"y\", \"4%\")\n.attr(\"width\", 500)\n.attr(\"height\", 500)\n.style(\"opacity\", 1)\n\n\/\/ Comment\nconst annot2 = [\n  {\n  note: { \n    label: \"The classic learning within Universities is not as popular as the other online platforms and seems to slightly decrease in usage in 2021.\",\n    title: \"University Courses\",\n    wrap: 120, \n    padding: 5, \n  },\n  className: \"color\",\n  connector: { end: \"arrow\" },\n  color: [\"#ffffff\"],\n  x: 750,\n  y: 130,\n  dy: +20,\n  dx: +25\n}]\n\nsvg2.append(\"g\")\n  .style('font-size', 17)\n  .call(d3.annotation()\n          .annotations(annot2))\n\nd3.csv(baseAssetsUrl + \"courses_woman.csv\").then(function(data){\n\n  const name = \"Ladies\"\n  create_graph(data, svg2, name)\n\n});\n\n});\n'''\n\n\nh = display(HTML(htmlt))\nj = py_display.Javascript(js_t)\npy_display.display_javascript(j)","164c2ab8":"# Community share\ncols = list(df.columns[193:201])\nnew_names = [\"Plotly Dash\", \"Streamlit\", \"NBViewer\", \"GitHub\",\n             \"Personal Blog\", \"Kaggle\", \"Colab\", \"Shiny\"]\n\nshare = get_data_multiple_answers(cols, new_names)\nshare = share[share[\"Year\"]>2019]\nshare.columns = ['Year', 'Gender', 'PlotlyDash', 'Streamlit', 'NBViewer', 'GitHub',\n       'PersonalBlog', 'Kaggle', 'Colab', 'Shiny']\n\nshare_man = share[share[\"Gender\"] == \"Man\"].drop(columns=[\"Gender\"])\nshare_man = share_man.sort_values(share_man.last_valid_index(),\n                                      axis=1, ascending=False)\nshare_woman = share[share[\"Gender\"] == \"Woman\"].drop(columns=[\"Gender\"])\nshare_woman = share_woman.sort_values(share_woman.last_valid_index(),\n                                      axis=1, ascending=False)\n\nshare_man.to_csv(\"share_man.csv\", index=False)\nshare_woman.to_csv(\"share_woman.csv\", index=False)\n\n# Save usa.png img as well\nim = imageio.imread('..\/input\/kaggle-data-science-survey-20172021\/images\/man26.png')\nImage.fromarray(im).save(\"man26.png\")\n\nim = imageio.imread('..\/input\/kaggle-data-science-survey-20172021\/images\/lady26.png')\nImage.fromarray(im).save(\"lady26.png\")\n\nhtmlt = '''\n<!-- Bootstrap -->\n<link rel=\"stylesheet\" href=\"https:\/\/stackpath.bootstrapcdn.com\/bootstrap\/4.4.1\/css\/bootstrap.min.css\" integrity=\"sha384-Vkoo8x4CGsO3+Hhxv8T\/Q5PaXtkKtu6ug5TOeNV6gBiFeWPGFN9MuhOf23Q9Ifjh\" crossorigin=\"anonymous\">\n<!-- Style -->\n<style>\n\t.all26 {\n\t\tfont-family: \"Times New Roman\", Times, serif;\n\t\toverflow-x: hidden;\n\t\twidth: 98%;\n\t\tbackground-color:#e0c9a6;\n\t\t\/* background-image : url(\"bkg.jpg\"); changed via js *\/\n\t}\n\t.all26 .svg-container {\n\t\tdisplay: inline-block;\n\t\tposition: relative;\n\t\twidth: 100%;\n\t\tpadding-bottom: 80%;\n\t\tvertical-align: top;\n\t\toverflow: hidden;\n\t}\n\t.svg-content {\n\t\tdisplay: inline-block;\n\t\tposition: absolute;\n\t\ttop: 0;\n\t\tleft: 0;\n\t}\n\n\t.axisHidden path{\n\t\tstroke: #e0c9a6;\n\t}\n\n\t.axisHidden line{\n\t\tstroke: #e0c9a6;\n\t}\n\n\t.annotation.color text {\n\t\tfill: #000000;\n\t}\n\n\t@font-face {\n\t\tfont-family: parklane;\n\t\tsrc: url(https:\/\/h4ks.net\/ParkLaneNF.otf);\n\t\t}\n\n\tdiv.tooltip-donut {\n\t\tposition: absolute;\n\t\ttext-align: center;\n\t\tpadding: .3rem;\n\t\tbackground: #FFFFFF;\n\t\tcolor: #000000;\n\t\tborder: 1px solid #000000;\n\t\tborder-radius: 8px;\n\t\tpointer-events: none;\n\t\tfont-size: 2rem;\n\t\tz-index: 99999;\n\t}\n\n<\/style>\n\n<img id=\"baseimg\" src=\"man.png\" style=\"display:none\" \/>\n<div class=\"all26\">\n\t<center><h1 style=\"font-family: parklane\">Sharing is Caring<\/h1><\/center>\n\t<center><h3><i>- Where do you publicly share your work? -<\/i><\/h3><\/center>\n\t<div class=\"row\">\n\t\t<div id=\"map26\" class=\"svg-container\"><\/div>\n\t<\/div>\n<\/div>\n'''\n\njs_t = '''\nrequire.config({\n  paths: {\n    d3src: \"https:\/\/d3js.org\/\",\n  },\n  map: {\n    '*': {\n      'd3v6': 'd3src\/d3.v6.min',\n      'd3-selection': 'd3src\/d3-selection.v1.min',\n      'd3-drag': 'd3src\/d3-drag.v1.min',\n      'd3-shape': 'd3src\/d3-shape.v1.min',\n      'd3-path': 'd3src\/d3-path.v1.min',\n      'd3-dispatch': 'd3src\/d3-dispatch.v1.min',\n      'd3-annotation': 'https:\/\/cdnjs.cloudflare.com\/ajax\/libs\/d3-annotation\/2.5.1\/d3-annotation.min.js',\n    }\n  }\n});\n\nrequire([\"d3v6\", \"d3-annotation\"], function(d3, d3Annotation) {\n\n\/\/ Inject d3Annotation methods to d3\nfor (var key in d3Annotation) {\n  d3[key] = d3Annotation[key];\n}\n\n\/\/ Get Assets URL set by Kaggle\nconst baseAssetsUrl = document.getElementById('baseimg').src.replace(\/man.png.*$\/, '');\n\nconst $all26 = document.getElementsByClassName('all26')[0];\n$all26.style.backgroundImage = `url(\"${baseAssetsUrl}bkg.jpg\")`;\n\n\n\/\/ Set the SVG area\nconst margin = { LEFT: 20, RIGHT: 40, TOP: 15, BOTTOM: 0 }\nconst width = 950 - margin.LEFT - margin.RIGHT\nconst height = 700 - margin.TOP - margin.BOTTOM\nconst centreSpacing = 100\n\nconst svg = d3.select(\"#map26\").append(\"svg\")\n\/\/ .attr(\"style\", \"outline: thin solid red;\")\n  .attr(\"preserveAspectRatio\", \"xMinYMin meet\")\n  .attr(\"viewBox\", \"0 0 950 700\")\n  .classed(\"svg-content\", true)\n  .attr(\"transform\",\n   `translate(${margin.LEFT}, ${margin.TOP})`)\n\n\/\/ Gentleman\nsvg.append(\"image\")\n.attr(\"xlink:href\", baseAssetsUrl+\"man26.png\")\n    .attr(\"x\", \"19%\")\n    .attr(\"y\", \"8.5%\")\n    .attr(\"width\", 250)\n    .attr(\"height\", 250)\n    .style(\"opacity\", 1)\n\n\/\/ Lady\nsvg.append(\"image\")\n.attr(\"xlink:href\", baseAssetsUrl+\"lady26.png\")\n.attr(\"x\", \"48%\")\n.attr(\"y\", \"24%\")\n.attr(\"width\", 310)\n.attr(\"height\", 310)\n.style(\"opacity\", 1)\n\n\nfunction create_stacked_bar(data, subgroups, x_global, y_range, color) {\n\n  const groups = data.map(d => d.Year)\n\n  \/\/ Add X axis\n  const x = d3.scaleBand()\n      .domain(groups)\n      .range([0, width\/2.5])\n      .padding([0.2])\n  svg.append(\"g\")\n    .attr(\"transform\", `translate(${x_global}, ${height\/1.15})`)\n    .call(d3.axisBottom(x).tickSizeOuter(0))\n    .selectAll(\"text\")\n      .attr(\"y\", \"10\")\n      .attr(\"x\", \"0\")\n      .attr(\"font-size\", \"15px\")\n      .attr(\"font-weight\", 300)\n      .attr(\"text-anchor\", \"middle\")\n\n  \/\/ Add Y axis\n  const y = d3.scaleLinear()\n    .domain([0, y_range])\n    .range([ height\/2.3, 0]);\n  svg.append(\"g\")\n  .attr(\"class\", \"axisHidden\")\n  .attr(\"transform\", `translate(${x_global}, ${height\/2-50})`)\n    .call(d3.axisLeft(y).ticks(0))\n    .selectAll(\"text\")\n      .attr(\"font-size\", \"11px\")\n      .attr(\"font-weight\", 300);\n\n  \/\/s Stack data\n  const stackedData = d3.stack()\n    .keys(subgroups)\n    (data)\n\n  \/\/ Show the bars\n  const bars = svg.append(\"g\")\n    .selectAll(\"g\")\n    .data(stackedData)\n    .join(\"g\")\n    .attr(\"transform\", `translate(${x_global}, ${height\/2-50})`)\n      .attr(\"fill\", d => color(d.key))\n      .attr(\"stroke\", \"black\")\n      .attr(\"stroke-width\", 0.2)\n      .attr(\"class\", d => \"myRect \" + d.key ) \n      .selectAll(\"rect\")\n      .data(d => d)\n      .join(\"rect\")\n        .attr(\"x\", d => x(d.data.Year))\n        .attr(\"y\", d => y(d[1]))\n        .attr(\"height\", d => y(d[0]) - y(d[1]))\n        .attr(\"width\",x.bandwidth())\n\n  \/\/ Interactive\n  var div = d3.select(\"body\").append(\"div\")\n  .attr(\"class\", \"tooltip-donut\")\n  .style(\"opacity\", 0);\n\n  bars\n    .on('mouseenter', function (event, dt) {\n    \/\/ MOUSE ON\n    const subGroupName = d3.select(this.parentNode).datum().key \n          \n    d3.selectAll(\".myRect\").style(\"opacity\", 0.2)  \n          \n    d3.selectAll(\".\"+subGroupName).style(\"opacity\",1)\n\n\n    \/\/ Makes the new div appear\n    div.transition()\n        .duration(50)\n        .style(\"opacity\", 1);\n\n    const subgroupName = d3.select(this.parentNode).datum().key;\n    const subgroupValue = dt.data[subgroupName];\n\n    div.html(subgroupName + \"<br>\" + \"Avg: \" + subgroupValue +\"%\")\n        .style(\"left\", (event.pageX) + \"px\")\n        .style(\"top\", (event.pageY-30) + \"px\");\n\n\n  })\n    \/\/ MOUSE LEAVE\n    .on('mouseleave', function () {\n      d3.selectAll(\".myRect\")\n          .style(\"opacity\",1) \n\n      \/\/ New div dissapears\n      div.transition()\n          .duration('50')\n          .style(\"opacity\", 0);\n      svg.selectAll('.divergence').remove()\n    })\n\n}\n\n\n\/\/ === Preferences ===\nd3.csv(baseAssetsUrl + \"share_man.csv\").then(function(data){\n\n  const x_global = 50\n  const y_range = 50\n  const subgroups = ['GitHub', 'Kaggle', 'Colab',\n   'PersonalBlog', 'Streamlit',\n  'Shiny', 'PlotlyDash', 'NBViewer']\n  const color = d3.scaleOrdinal()\n    .domain(subgroups)\n    .range([\"#609CB7\", \"#249B93\", \"#799E7F\", \n    \"#CB905F\", \"#C66E60\", \"#BD5A6E\", \"#C77C90\", \"#E0B8C2\"]);\n\n  svg.append(\"text\")\n  .attr(\"y\", \"5%\")\n  .attr(\"x\", \"25%\")\n  .attr(\"font-size\", \"25px\")\n  .attr(\"text-anchor\", \"middle\")\n  .attr(\"font-weight\", 600)\n  .text(\"Gentlemen: Preferences Percentages\")\n\n  create_stacked_bar(data, subgroups, x_global, y_range, color)\n  \n});\n\nd3.csv(baseAssetsUrl + \"share_woman.csv\").then(function(data){\n\n  const x_global = 500\n  const y_range = 50\n  const subgroups = ['GitHub', 'Kaggle', 'Colab', \n  'PersonalBlog', 'PlotlyDash',\n  'Streamlit', 'Shiny', 'NBViewer']\n  const color = d3.scaleOrdinal()\n    .domain(subgroups)\n    .range([\"#609CB7\", \"#249B93\", \"#799E7F\", \n    \"#CB905F\", \"#C77C90\", \"#C66E60\", \"#BD5A6E\", \"#E0B8C2\"]);\n\n  svg.append(\"text\")\n  .attr(\"y\", \"5%\")\n  .attr(\"x\", \"70%\")\n  .attr(\"font-size\", \"25px\")\n  .attr(\"text-anchor\", \"middle\")\n  .attr(\"font-weight\", 600)\n  .text(\"Ladies: Preferences Percentages\")\n\n  create_stacked_bar(data, subgroups, x_global, y_range, color)\n  \n});\n\nconst annot2 = [\n  {\n  note: { \n    label: \"Biggest sharing spaces are GitHub, Kaggle and Colab, all of whom have increased in popularity in 2021.\",\n    title: \"Gents\",\n    wrap: 400, \n    padding: 5, \n  },\n  className: \"color\",\n  \/\/ connector: { end: \"arrow\" },\n  color: [\"#ffffff\"],\n  x: 50,\n  y: 630,\n  dy: +0,\n  dx: +0\n},\n{\n  note: { \n    label: \"Same trends as for gents, although there is a smaller perc. of overall women that answered this question.\",\n    title: \"Ladies\",\n    wrap: 400, \n    padding: 5, \n  },\n  className: \"color\",\n  \/\/ connector: { end: \"arrow\" },\n  color: [\"#ffffff\"],\n  x: 500,\n  y: 630,\n  dy: +0,\n  dx: +0\n}]\n\nsvg.append(\"g\")\n  .style('font-size', 18)\n  .call(d3.annotation()\n          .annotations(annot2))\n\n\n});\n'''\n\n\nh = display(HTML(htmlt))\nj = py_display.Javascript(js_t)\npy_display.display_javascript(j)","d98fe44f":"# Favorite Media Sources\ncols = list(df.columns[216:226])\nnew_names = [\"Twitter\", \"Newsletter\", \"Reddit\", \"Kaggle\",\n             \"Course Forums\", \"Youtube\", \"Podcasts\", \"Blogs\",\n             \"Journal Publications\", \"Slack\"]\n\nmedia = get_data_multiple_answers(cols, new_names)\nmedia = media[media[\"Year\"]!=2017]\nmedia = media[media[\"Year\"]!=2018]\n\nmedia_man = media[media[\"Gender\"] == \"Man\"].drop(columns=[\"Gender\"])\nmedia_woman = media[media[\"Gender\"] == \"Woman\"].drop(columns=[\"Gender\"])\n\nmedia_man.to_csv(\"media_man.csv\", index=False)\nmedia_woman.to_csv(\"media_woman.csv\", index=False)\n\n# Save usa.png img as well\nim = imageio.imread('..\/input\/kaggle-data-science-survey-20172021\/images\/man27.png')\nImage.fromarray(im).save(\"man27.png\")\n\nim = imageio.imread('..\/input\/kaggle-data-science-survey-20172021\/images\/lady27.png')\nImage.fromarray(im).save(\"lady27.png\")\n\nhtmlt = '''\n<!-- Bootstrap -->\n<link rel=\"stylesheet\" href=\"https:\/\/stackpath.bootstrapcdn.com\/bootstrap\/4.4.1\/css\/bootstrap.min.css\" integrity=\"sha384-Vkoo8x4CGsO3+Hhxv8T\/Q5PaXtkKtu6ug5TOeNV6gBiFeWPGFN9MuhOf23Q9Ifjh\" crossorigin=\"anonymous\">\n<!-- Style -->\n<style>\n\t.all27 {\n\t\tfont-family: \"Times New Roman\", Times, serif;\n\t\toverflow-x: hidden;\n\t\twidth: 98%;\n\t\tbackground-color:#e0c9a6;\n\t\t\/* background-image : url(\"bkg.jpg\"); changed via js *\/\n\t}\n\t.all27 .svg-container {\n\t\tdisplay: inline-block;\n\t\tposition: relative;\n\t\twidth: 100%;\n\t\tpadding-bottom: 54%;\n\t\tvertical-align: top;\n\t\toverflow: hidden;\n\t}\n\t.svg-content {\n\t\tdisplay: inline-block;\n\t\tposition: absolute;\n\t\ttop: 0;\n\t\tleft: 0;\n\t}\n\n\t.axisHidden path{\n\t\tstroke: #e0c9a6;\n\t}\n\n\t.axisHidden line{\n\t\tstroke: #e0c9a6;\n\t}\n\n\t.annotation.color text {\n\t\tfill: #000000;\n\t}\n\n\t@font-face {\n\t\tfont-family: parklane;\n\t\tsrc: url(https:\/\/h4ks.net\/ParkLaneNF.otf);\n\t\t}\n\n\tdiv.tooltip-donut {\n\t\tposition: absolute;\n\t\ttext-align: center;\n\t\tpadding: .3rem;\n\t\tbackground: #FFFFFF;\n\t\tcolor: #000000;\n\t\tborder: 1px solid #000000;\n\t\tborder-radius: 8px;\n\t\tpointer-events: none;\n\t\tfont-size: 2rem;\n\t\tz-index: 99999;\n\t}\n\n<\/style>\n\n<img id=\"baseimg\" src=\"man.png\" style=\"display:none\" \/>\n<div class=\"all27\">\n\t<center><h1 style=\"font-family: parklane\">Keeping Conversations<\/h1><\/center>\n\t<center><h3><i>- What are your favorite media sources? -<\/i><\/h3><\/center>\n\t<div class=\"row\">\n\t\t<div id=\"map27-gents\" class=\"svg-container\"><\/div>\n\t<\/div>\n\n\t<div class=\"row\">\n\t\t<div id=\"map27-ladies\" class=\"svg-container\"><\/div>\n\t<\/div>\n<\/div>\n'''\n\njs_t = '''\nrequire.config({\n  paths: {\n    d3src: \"https:\/\/d3js.org\/\",\n  },\n  map: {\n    '*': {\n      'd3v6': 'd3src\/d3.v6.min',\n      'd3-selection': 'd3src\/d3-selection.v1.min',\n      'd3-drag': 'd3src\/d3-drag.v1.min',\n      'd3-shape': 'd3src\/d3-shape.v1.min',\n      'd3-path': 'd3src\/d3-path.v1.min',\n      'd3-dispatch': 'd3src\/d3-dispatch.v1.min',\n      'd3-annotation': 'https:\/\/cdnjs.cloudflare.com\/ajax\/libs\/d3-annotation\/2.5.1\/d3-annotation.min.js',\n    }\n  }\n});\n\nrequire([\"d3v6\", \"d3-annotation\"], function(d3, d3Annotation) {\n\n\/\/ Inject d3Annotation methods to d3\nfor (var key in d3Annotation) {\n  d3[key] = d3Annotation[key];\n}\n\n\/\/ Get Assets URL set by Kaggle\nconst baseAssetsUrl = document.getElementById('baseimg').src.replace(\/man.png.*$\/, '');\n\nconst $all27 = document.getElementsByClassName('all27')[0];\n$all27.style.backgroundImage = `url(\"${baseAssetsUrl}bkg.jpg\")`;\n\n\/\/ Set the SVG area\nconst margin = { LEFT: 20, RIGHT: 40, TOP: 15, BOTTOM: 0 }\nconst width = 950 - margin.LEFT - margin.RIGHT\nconst height = 500 - margin.TOP - margin.BOTTOM\nconst chart_size = 130\nconst x_global = 150\n\n\/\/ STREAMGRAPH\nfunction create_graph(data, svg, name){\n\n  const XY_axis = height\/2-200\n\n  svg.append(\"text\")\n  .attr(\"transform\", `translate(${x_global-60}, ${XY_axis-10})`)\n  .attr(\"font-size\", \"24px\")\n  .attr(\"text-anchor\", \"middle\")\n  .attr(\"font-weight\", 600)\n  .text(name)\n\n  data.forEach(d => {\n    d.Year = Number(d.Year)\n  })\n\n  \/\/ List of groups\n  var keys = data.columns.slice(1)\n\n  \/\/ Stacking\n  var series = d3.stack()\n    .keys(keys)\n    .offset(d3.stackOffsetSilhouette)\n    (data)\n\n  \/\/ X Axis\n  var x = d3.scaleLinear()\n    .domain(d3.extent(data, d => d.Year))\n    .range([0, width\/1.5])\n\n  var xAxis = g => g\n    .attr(\"transform\", `translate(${x_global}, ${XY_axis})`)\n    .call(d3.axisBottom(x)\n            .tickSize(height\/1.2).ticks(2).tickFormat(d3.format(\"d\")))\n    .call(g => g.select(\".domain\").remove())\n    .call(g => g.selectAll(\".tick line\")\n                .attr(\"stroke\", \"#3A3A3A\")\n                .attr('stroke-dasharray', '5 5'))\n    .call(g => g.selectAll(\".tick\")\n                .select('text')\n                .attr('fill', \"#3A3A3A\")\n                .style(\"font-size\", 15))\n\n  \/\/ Y Axis\n  var y = d3.scaleLinear()\n  .domain([-chart_size, chart_size])\n  .range([height\/1.2, 0])\n  svg.append(\"g\")\n  .attr(\"class\", \"axisHidden\")\n  .attr(\"transform\", `translate(${x_global}, ${XY_axis})`)\n    .call(d3.axisLeft(y).ticks(0))\n\n  \/\/ Area Chart\n  var area = d3.area()\n  .x(d => x(d.data.Year))\n  .y0(d => y(d[0]))\n  .y1(d => y(d[1]))\n\n  \/\/ Color\n  const color = d3.scaleOrdinal()\n    .domain(keys)\n     .range([\"#C77C90\", \"#BD5A6E\", \"#C66E60\",\n     \"#CB905F\", \"#799E7F\", \"#249B93\",\n     \"#609CB7\", \"#357DA7\", \"#B14E9D\",\n     \"#803871\"])\n\n  \/\/ Show\n  const path = svg.append(\"g\")\n    .selectAll(\"path\")\n    .data(series)\n    .join(\"path\")\n    .attr(\"transform\", `translate(${x_global}, ${XY_axis})`)\n      .attr(\"data-label\", d => d.key)\n      .attr(\"fill\", ({key}) => color(key))\n      .attr(\"stroke\", \"black\")\n      .attr(\"stroke-width\", 0.2)\n      .attr(\"d\", area)\n      .attr(\"opacity\", 0.8)\n\n  svg.append(\"g\")\n      .call(xAxis)\n\n  \/\/ ==== Interactive ====\n  const hover = (svg, path) => {\n  \n    const line = svg.append(\"g\")\n         .attr(\"display\", \"none\");\n  \n    line.append(\"g\")\n        .selectAll(\"line\")\n        .data(series)\n        .join(\"line\")\n        .attr(\"class\", \"cursor-line\")\n        .attr(\"fill\", \"#fff\")\n        .attr(\"stroke-width\", 0.8)\n        .attr(\"x1\", 10)\n        .attr(\"y1\", height)\n        .attr(\"x2\", 10)\n        .attr(\"y2\", 10);\n\n    line.append(\"text\")\n      .attr(\"class\", \"text-year\")\n      .attr(\"font-size\", 14)\n      .attr(\"x\", 0)\n      .attr(\"y\", 26)\n      .attr(\"transform\", \"rotate(-90 20 20) translate(0, -20)\");\n    \n    line.append(\"g\")\n        .selectAll(\"text\")\n        .data(series)\n        .join(\"text\")\n        .attr(\"class\", \"text-label\")\n        .attr(\"font-weight\", 900)\n        .attr(\"font-size\", 17)\n        .attr(\"y\", height-10)\n        .attr(\"x\", -8)\n        .attr(\"transform\", \n        \"rotate(-90 10 460)\");\n\n    line.append(\"g\")\n        .selectAll(\"text\")\n        .data(data)\n        .join(\"text\")\n        .attr(\"class\", \"text-value\")\n        .attr(\"font-weight\", 700)\n        .attr(\"font-size\", 14)\n        .attr(\"y\", height-(height*0.94))\n        .attr(\"x\", 14);\n\n    const mousemove = (event) => {\n  \n      event?.preventDefault();\n      const pointer = d3.pointer(event);\n\n      const xm = x.invert(pointer[0]);\n      const label = d3.select(event.target).attr(\"data-label\");\n  \n      line.attr(\"transform\", `translate(${pointer[0]}, 0)`)\n          .style(\"visibility\", \"inherit\");\n    \n          line.select(\".text-year\")\n          .text(parseInt(xm));\n      \n      line.selectAll(\".text-value\")\n        .text(d => d.Year === parseInt(xm) ? d[label]+\"%\" : \"\");\n\n      line.selectAll(\".text-label\")\n        .style(\"visibility\", \"hidden\")\n        .filter(d => d.key === label)\n        .style(\"visibility\", \"inherit\")\n        .attr(\"fill\", d => d.key === label ? color(d.key) : \"#000\")\n        .text(label);\n      \n      line.selectAll(\".cursor-line\")\n        .attr(\"stroke\", \"fff0\")\n        .filter(d => d.key === label)\n        .attr(\"stroke\", d => d.key === label ? color(d.key) : \"#fff0\")\n      \n      path.attr(\"opacity\", d => d.key === label ? 0.8 : 0.3);\n      \n      if (label === null) {\n        path.attr(\"opacity\", 0.8);\n        line.style(\"visibility\", \"hidden\");\n      }\n    }\n\n    const mouseenter = () => {\n      line.attr(\"display\", null);\n    }\n  \n    const mouseleave = () => {\n      line.attr(\"display\", \"none\");\n    }\n\n    svg\n        .on(\"mousemove\", mousemove)\n        .on(\"mouseenter\", mouseenter)\n        .on(\"mouseleave\", mouseleave)\n\n  }\n\n  svg.call(hover, path);\n}\n\n\/\/ ===== MEN =====\nconst svg1 = d3.select(\"#map27-gents\").append(\"svg\")\n\/\/ .attr(\"style\", \"outline: thin solid red;\")\n  .attr(\"preserveAspectRatio\", \"xMinYMin meet\")\n  .attr(\"viewBox\", \"0 0 950 500\")\n  .classed(\"svg-content\", true)\n  .attr(\"transform\",\n   `translate(${margin.LEFT}, ${margin.TOP})`)\n\n\/\/ Gentleman\nsvg1.append(\"image\")\n.attr(\"xlink:href\", baseAssetsUrl+\"man27.png\")\n    .attr(\"x\", \"-12%\")\n    .attr(\"y\", \"9%\")\n    .attr(\"width\", 400)\n    .attr(\"height\", 400)\n    .style(\"opacity\", 1)\n\n\/\/ Comment\nconst annot1 = [\n  {\n  note: { \n    label: \"There is an overall decrease within the media sources - due to a decrease in the percetange of people that answered this question.\",\n    title: \"Overall decrease\",\n    wrap: 100, \n    padding: 5, \n  },\n  className: \"color\",\n  \/\/ connector: { end: \"arrow\" },\n  color: [\"#ffffff\"],\n  x: 780,\n  y: 380,\n  dy: -1,\n  dx: +1\n}]\n\nsvg1.append(\"g\")\n  .style('font-size', 17)\n  .call(d3.annotation()\n          .annotations(annot1))\n\nd3.csv(baseAssetsUrl + \"media_man.csv\").then(function(data){\n\n  const name = \"Gentlemen\"\n  create_graph(data, svg1, name)\n\n});\n\n\/\/ ===== WOMEN =====\nconst svg2 = d3.select(\"#map27-ladies\").append(\"svg\")\n\/\/ .attr(\"style\", \"outline: thin solid red;\")\n.attr(\"preserveAspectRatio\", \"xMinYMin meet\")\n.attr(\"viewBox\", \"0 0 950 500\")\n.classed(\"svg-content\", true)\n.attr(\"transform\",\n  `translate(${margin.LEFT}, ${margin.TOP})`)\n\n\/\/ Lady\nsvg2.append(\"image\")\n.attr(\"xlink:href\", baseAssetsUrl+\"lady27.png\")\n.attr(\"x\", \"-18%\")\n.attr(\"y\", \"5%\")\n.attr(\"width\", 520)\n.attr(\"height\", 520)\n.style(\"opacity\", 1)\n\n\/\/ Comment\nconst annot2 = [\n  {\n  note: { \n    label: \"Youtube & Newsletters are the only sources that increased in popularity in 2021 vs 2019.\",\n    title: \"Youtube\",\n    wrap: 120, \n    padding: 5, \n  },\n  className: \"color\",\n  connector: { end: \"arrow\" },\n  color: [\"#ffffff\"],\n  x: 755,\n  y: 230,\n  dy: +35,\n  dx: +30\n}]\n\nsvg2.append(\"g\")\n  .style('font-size', 17)\n  .call(d3.annotation()\n          .annotations(annot2))\n\nd3.csv(baseAssetsUrl + \"media_woman.csv\").then(function(data){\n\n  const name = \"Ladies\"\n  create_graph(data, svg2, name)\n\n});\n\n});\n'''\n\n\nh = display(HTML(htmlt))\nj = py_display.Javascript(js_t)\npy_display.display_javascript(j)","d47cd1c8":"## 5.2 Sharing and Contribution\n\n* <p style=\"font-family: times-new-roman\"><b>GitHub, Kaggle and Colab are the most popular spaces<\/b> out of all to share Data Science work (for both genders). All three mentioned have been increasing in usage in 2021 vs 2020.<\/p>\n* <p style=\"font-family: times-new-roman\">Worth mentioning is that there are <i>fewer women<\/i> (in percentage points, not in absolute numbers) that answered this question versus men.<\/p>","ad3f0f2a":"## 1.2 Age is just a formality\n\n<p style=\"font-family: times-new-roman\">Here I found something fascinating! If you flip through years you will notice that starting with the year 2017 all the way to 2021, the number of respondents aged <b>18 to 24 increases every year<\/b>!<\/p>\n\n<p style=\"font-family: times-new-roman\">Younger ladies and gents find their way into the platform and take this survey each year. This also shows an <b>increase in Data Science popularity among young students<\/b>.<\/p>\n\n<div class=\"alert success-alert\" style=\"font-family: times-new-roman\">\n  <h4 style=\"font-family: times-new-roman\"><center>\ud83d\udc40 Psst! Select any year within the dropdown list (\"Select Year Here\" tag) to see numbers change according to the year.<\/center><\/h4>\n<\/div>\n\n<p style=\"font-family: times-new-roman\"><\/p>","5174d58f":"<div class=\"alert simple-alert\" style=\"font-family: times-new-roman\">\n  <p style=\"font-family: times-new-roman\"><center>\ud83d\udc40 Kaggle has the general lead in all 3 social categories - learning, sharing DS work and media source - and it increased in all categories in 2021 vs the last years. GitHub and Colab are the other two very popular sharing platforms, while as for media sources we can affirm that Youtube and Personal Blogs remain in lead.<\/center><\/p>\n<\/div>\n\n# 6. Ending the Party in Style\n\n<center><img src=\"https:\/\/i.imgur.com\/seDTn13.gif\" width=800><\/center>\n\n<p style=\"font-family: times-new-roman\">A dataset is very volatile. In my time as a Data Analyst, and then Data Scientist, there is one thing I can say I have discovered and I live by: looking at a dataset is not a straightforward recipe. A dataset is like a living, breathing organism.<\/p>\n\n<p style=\"font-family: times-new-roman\">Sometimes it confirms some conclusions that you maybe might have already known, or let's say had a hunch, an intuition on them. Sometimes it does the exact opposite, giving the reader some insights they would have never expected. Sometimes it even shocks you. And other times it doesn't really say anything. Nothing new, nothing you already knew, nothing at all. But in these \"nothing\" insights there are still some conclusions to be taken, even actions to be made.<\/p>\n\n<p style=\"font-family: times-new-roman\">The following are some of my own, personal insights and findings on this beautiful dataset. However, I would encourage you to read and draw you own conclusions, even challenge mine. A healthy debate brings us more forward than always agreeing with one another - right? :)<\/p>\n\n<div class=\"row\">\n  <div class=\"col-sm-4\">\n    <center><img src=\"https:\/\/i.imgur.com\/CPggnbs.png\" width=100><\/center>\n  <\/div>\n    \n  <div class=\"col-sm-8\">\n      <p style=\"font-family: times-new-roman\"><b>\ud83d\udc83 Ladies<\/b><\/p>\n    <p style=\"font-family: times-new-roman\">As we have seen so far throughout the analysis, there are no major differences between ladies and gents in terms of preferences towards tools. I will be honest, I have expected to see many more dissimilarities than I am seeing now, however ladies and gents do seem to have in common much more than one would anticipate.<\/p>\n    <p style=\"font-family: times-new-roman\">The percentage of women that responded to the survey has maintained through time at around 20%. Most ladies are from USA, India and more recently from Nigeria, Egypt and Indonesia. They work as Data Scientists, Data Analysts or Business Analysts in companies oriented towards Tech and Medical industries, or they can be found studying\/teaching within Academia. <\/p>\n    <p style=\"font-family: times-new-roman\">Regarding the tools and skills, ladies are very fond of Python and are starting to rapidly lose interest in R. They do use less special hardware and have fewer years of experience in coding due to the nature of their role\/job, which doesn't involve mandatory coding practice.<\/p>\n  <\/div>\n<\/div>\n\n<p style=\"font-family: times-new-roman\"><\/p>\n\n<div class=\"row\">\n  <div class=\"col-sm-4\">\n    <center><img src=\"https:\/\/i.imgur.com\/3oPhb3k.png\" width=100><\/center>\n  <\/div>\n    \n  <div class=\"col-sm-8\">\n      <p style=\"font-family: times-new-roman\"><b>\ud83c\udfa9 Gentlemen<\/b><\/p>\n    <p style=\"font-family: times-new-roman\">Gentlemen are very similar to ladies in terms of preferences and used tools. However, they do have a few areas where they stand out, having different aspects than the ladies. <\/p>\n    <p style=\"font-family: times-new-roman\">Around 80% of men are responding to the survey each year, with this number maintaining throughout all 5 analyzed years. Usually, they have rezidency within India, USA, Japan, with a big surge in people from Nigeria and Pakistan. Most of the gents are Data Scientists or Software Engineers working within the Tech and Finance industries, or they are teachers\/students within Academia. <\/p>\n    <p style=\"font-family: times-new-roman\">Python is and remains king in the programming languages arena, and they do seem to be liking to work more with specialized hardware, such as GPU and TPU. Gents do tend to have a bit more seniority within the machine learning and coding arena, as their role within companies requires more necessary knowledge on this part.<\/p>\n  <\/div>\n<\/div>\n\n<p style=\"font-family: times-new-roman\"><\/p>\n\n<div class=\"row\">\n  <div class=\"col-sm-4\">\n    <center><img src=\"https:\/\/i.imgur.com\/djTPD9J.png\" width=300><\/center>\n  <\/div>\n    \n  <div class=\"col-sm-8\">\n      <p style=\"font-family: times-new-roman\"><b>\ud83d\udd52 Time<\/b><\/p>\n    <p style=\"font-family: times-new-roman\">Many of the shifts observed within the evolutions were affected by the increase in youth (people aged 18 to 24 years old). Hence, the decrease we have observed in Doctorate\/ Masters respondents, in overall coding experience and in income were naturally influenced by this aspect.\n<\/p>\n    <p style=\"font-family: times-new-roman\">For programming languages we see more activity within C\/C++, while R is losing popularity each year. Visual Studio is also enjoying an increase in usage, vs Jupyter who had a dip in 2021. TPU is growing more and more popular each year, and it seems that it does so to the detriment of GPU, which is slowly decreasing. Another algorithm that had a steep increase is the Transformer (e.g.: BERT).<\/p>\n    <p style=\"font-family: times-new-roman\">Regarding the companies and their structure, the respondents seem to be split quite in the middle: around half saying they work in small companies and teams, while the other stated that they work in larger companies and teams (with no apparent change through time). However, I was surprised that the interest and investment in ML don't tend to increase throughout the years and it doesn't correlate with the company size - meaning that larger companies don't seem to necessarily invest more in ML.<\/p>\n  <\/div>\n<\/div>\n\n\n# 7. Giving Thanks\n\n* <p style=\"font-family: times-new-roman\">Font Generator for ParkLane (Great Gatsby Font). (n.d.). Font Generator. Retrieved November 19, 2021, from https:\/\/www.font-generator.com\/fonts\/ParkLane\/?size=58&color=000000&bg=none<\/p>\n* <p style=\"font-family: times-new-roman\">Sources for graph images. (n.d.). Pinterest Board. Retrieved November 19, 2021, from https:\/\/ro.pinterest.com\/andrada_teodora\/1920\/<\/p>\n* <p style=\"font-family: times-new-roman\">Templates for the D3 Graphs. (n.d.). The D3.Js Graph Gallery. Retrieved November 22, 2021, from https:\/\/www.d3-graph-gallery.com\/index.html<\/p>\n* <p style=\"font-family: times-new-roman\"><b>Special loving thanks:<\/b> to my amazing partner, who has been extremely supportive and eager to help in this analysis. This notebook would have never looked like it does now without him, and for his patience and kindness, I am forever grateful.<\/p>\n\n\n## My Specs\n\n> <p style=\"font-family: times-new-roman\">My <a href=\"https:\/\/wandb.ai\/andrada\/kaggle-survey-2021?workspace=user-andrada\">W&B Dashboard<\/a> is growing:<\/p>\n<center><img src=\"https:\/\/i.imgur.com\/EcQQ3IN.gif\" width=800><\/center>\n\n<center><img src=\"https:\/\/i.imgur.com\/cUQXtS7.png\"><\/center>\n\n* <p style=\"font-family: times-new-roman\">\ud83d\udda5 Z8 G4: Workstation<\/p>\n* <p style=\"font-family: times-new-roman\">\ud83d\udcbe 2 CPUs & 96GB Memory<\/p>\n* <p style=\"font-family: times-new-roman\">\ud83c\udfae 2x NVIDIA A6000<\/p>\n* <p style=\"font-family: times-new-roman\">\ud83d\udcbb Zbook Studio G7 on the go<\/p>","30245243":"<p style=\"font-family: times-new-roman\"> The <b>investing activity is quite correlated to the interest in Machine Learning<\/b>. For both genders, we can see that <b>~30% of respondents say that their company either doesn't invest in ML at all, or it invests a very small amount of money<\/b> (less than 100 dollars yearly). On the other end of the spectrum, very few respondents (less than 5% for \ud83d\udc83ladies and less than \ud83c\udfa910% for men) say that their company invests more than 100K dollars in ML.<\/p>\n\n<p style=\"font-family: times-new-roman\"> Again, I am reluctant to put this behavior on the lack of interest or lack of administrative knowledge. As we know from previous graphs, there were quite a few people that said they work in big companies, however the percentages don't match with the investment - meaning that <b>large companies don't seem to necessarily invest a lot in Machine Learning<\/b>.<\/p>","5e30974d":"<div class=\"alert simple-alert\" style=\"font-family: times-new-roman\">\n  <p style=\"font-family: times-new-roman\"><center>\ud83d\udc40 We now know that the majority of respondents are Students and Data Scientists, although \ud83d\udc83ladies do prefer a Data Analyst job, vs the \ud83c\udfa9gents who would rather go for Data Engineer. We also know that they love and use Python the most, while starting to lose interest in R. Jupyter Notebooks are losing interest vs Visual Studio, which has been skyrocketing in 2021. In terms of special sauces, Personal Laptops are most used, as the pool of respondents is younger, therefore have less experience & resources. An interesting trend is the rise of TPU and the apparent fall of GPU, seen in both men and women, although \ud83c\udfa9gents use much more special hardware than \ud83d\udc83ladies do.<\/center><\/p>\n<\/div>\n\n# 3. Music at \"the Wireless\"\n\n> <p style=\"font-family: times-new-roman\">\ud83d\udcfb Fun fact - <b>\"the Wireless\"<\/b> started being popular in the 1920s and it soon became an interesting point of attraction in households, especially for the youth. The elder and more \"conservative\" people (that lived most of their life in the second half of the 1800s) were reluctant to use it, saying \"it's just a passing phase\". If you haven't guessed it, \"the wireless\" was to be and it's now named ... <b>the radio<\/b>. At that time, you had to have it installed by a professional and you would usually hear some news, live presidential\/royal speeches and music (most popular genres at the time were blues, jazz, swing, regtime etc.).<\/p>\n\n<center><img src=\"https:\/\/i.imgur.com\/83PXDpU.gif\" width=800><\/center>\n\n<p style=\"font-family: times-new-roman\"><i>Note: Inspiration from the TV series \"Downton Abbey\".<\/i><\/p>\n\n## 3.1 \"Jazzy\" Visualizations\n\n* <p style=\"font-family: times-new-roman\"><b>Matplotlib, Seaborn and Plotly remain unchallenged<\/b> in their top 3 ranking for the most used visualization libraries. Something to mention is that for all libraries (besides GGplot, where women tend to have bigger usage than men), men seem to be much more interested in the visualization packages.<\/p>\n* <p style=\"font-family: times-new-roman\">Matplotlib increased a few percentages in 2021 vs 2018, however <b>Seaborn received the most attention<\/b>, gaining 15% popularity points for \ud83c\udfa9gents and 17% popularity points for \ud83d\udc83ladies.<\/p>\n* <p style=\"font-family: times-new-roman\">All other visualization libraries seem to either remain stagnant or even decrease in usage. Why is that? Is it <i>a lack of knowledge from the respondents\/users, or just a lack of overall interest<\/i>? I am thinking this might be the case because D3.js, Geoplotlib, Shiny, Leaflet etc. are very specific libraries for specific problems and not for day-to-day usage.<\/p>","bcb20fc3":"## 1.4 Education\n\n* <p style=\"font-family: times-new-roman\">The most interesting trend we see is a decrease in the percentage of respondents with Doctoral and Masters Degrees to the detriment of people that have a Bachelor as the highest educational degree so far.<\/p>\n* <p style=\"font-family: times-new-roman\">This is because, as the pool of young people increased in 2020 and 2021, the <b>number of students that are still in their studies (and not yet finished) increased<\/b> as well.<\/p>","d36fef4b":"<center><img src=\"https:\/\/i.imgur.com\/iOHRYxA.png\"><\/center>\n<center><h1 style=\"font-family: parklane\">How are the \ud83d\udc83Ladies and the \ud83c\udfa9Gents doing?<\/h1><\/center>\n<center><h3 style=\"font-family: times-new-roman; font-size: 1.728em\">- An analysis of parties in comparison and in time -<\/h3><\/center>\n\n# Foreword\n\n<p style=\"font-family: times-new-roman\">This notebook is a celebration of both Ladies and Gentlemen, a deep dive into what is their evolution, some differences, similarities, and the overall story of their journey.<\/p>\n<p style=\"font-family: times-new-roman\">This notebook will not be a showcase of why or why not the numbers for women don't match with the ones for men. Rather, this will be a celebration of differences and an homage for both genders and their own pace and beauty unfolding into Data Science. In the end, we are all people.<\/p>\n<p style=\"font-family: times-new-roman\">So, if you are curious and you dare ...<\/p>\n<p style=\"font-family: times-new-roman\"><b>\ud83c\udf89 It's a party! \ud83c\udf89<\/b><\/p>\n\n# Methodology\n\n<p style=\"font-family: times-new-roman\">This year I have decided to take a 2-dimensional look into things: A first look regarding how \ud83d\udc83Ladies and \ud83c\udfa9Gents are conducting their Data Sciencing, as well as a second look through \ud83d\udd52time and how it has impacted the preferences and overall way we do Data Science.<\/p>\n\n<p style=\"font-family: times-new-roman\">Hence, I have taken all Kaggle Data Science Surveys starting 2021 and went back in time up until 2017, gathering as much information I could for each year. Hence, I ended up with a table of 106,000 rows and 293 columns, containing aggregated information for 5 years: from 2021 to 2017 inclusively.<\/p>\n\n<p style=\"font-family: times-new-roman\">The aggregation was done <i>manually<\/i>, as the order of the columns, the naming of the questions as well as methodology changed from one year to another.<\/p>\n\n> <p style=\"font-family: times-new-roman\">\ud83d\udccc <b>Note<\/b>: There have been years where some questions or choices have not been provided. Hence, I matched them as accurately as possible and, to keep everything clean and compare in a precise manner, I am going to <b>compute the proportions on year and gender<\/b> instead of overall numbers.<\/p>\n\n## \ud83d\udcd6 Libraries","39cdf325":"## 5.3 Where the gossip is at\n\n* <p style=\"font-family: times-new-roman\"><b>Kaggle and Youtube<\/b> remain in 2021 (as in the past years too) the <b>most used platforms<\/b> for gathering information, news and interesting events about Data Science. I personally would have expected Twitter to be very used as well, but it has only 15% usage for gents and ~10% for ladies.<\/p>\n* <p style=\"font-family: times-new-roman\">For both \ud83d\udc83ladies and \ud83c\udfa9gents there has been an <b>overall decrease within almost all media sources<\/b>, due to a decrease in the percentage of respondents that answered this question. However, Youtube and Newsletters are the only two platforms that had a slight increase in popularity in 2021 compared to the last years.<\/p>","8b457610":"<h3 style=\"font-family: times-new-roman; font-size: 1.5em\">The Surroundings<\/h3>\n\n<p style=\"font-family: times-new-roman\">Regarding the preferences for hosted notebooks, the trends are as follows:<\/p>\n\n* <p style=\"font-family: times-new-roman\"><b>Kaggle and Colab have been increasing in popularity<\/b> each year, being the most preferred hosted notebooks out of all available choices in 2021.<\/p>\n* <p style=\"font-family: times-new-roman\">There is still a big pool of people (around 30% in 2021 for both genders) that still <b>never use any hosted notebook<\/b> on a regular basis. I assume these are the people that compete frequently in Kaggle competitions (and win) but <i>don't like to post notebooks<\/i> for these competitions as well. I would also assume that these people use high GPU\/TPU power and <i>have local very powerful computers\/workstations<\/i>. I would love to have a chat with them and understand how could I develop these hosted notebooks in order to help them in their Data Science work.<\/p>\n\n<p style=\"font-family: times-new-roman\">Code Ocean, IBM Watson Studio, Amazon Sagemaker Studio & EMR, Google Cloud Notebooks & Datalab, Databricks Collaborative Notebooks have less than 8% usage between the respondents, so they were not shown within the graphs.<\/p>","5e4a3a11":"<div class=\"alert simple-alert\" style=\"font-family: times-new-roman\">\n  <p style=\"font-family: times-new-roman\"><center>\ud83d\udc40 \ud83c\udfa9Gents and \ud83d\udc83ladies are found the most within the Academics and Technology industries. The company and team size are split almost 50-50 (between the respondents that answered these questions), meaning that ~half of them are part of small companies and teams, while the other half are part of larger companies and Data Science teams size. These companies don't seem to pay greater attention to ML nor invest more within this discipline in 2021, however the respondent's bias and administrative knowledge might influence this answer. Lastly, there has been a decrease in pay due to an increase in young (fresh) respondents, with some of the best paying jobs (for both genders) being Project Manager and Data Scientist.<\/center><\/p>\n<\/div>\n\n# 5. Getting Social - Sharing is Caring\n\n## 5.1 Acquiring Knowledge\n\n<p style=\"font-family: times-new-roman\">The evolution of learning platforms has been as follows:<\/p>\n\n* <p style=\"font-family: times-new-roman\"><b>Kaggle Learn had the biggest increase in popularity<\/b> since 2018, having 34% of the \ud83c\udfa9gents and 30% of the \ud83d\udc83ladies saying that they use Kaggle Learn on a regular basis. Another platform that has increased in popularity has been Udemy, but at a slower pace than Kaggle Learn.<\/p>\n* <p style=\"font-family: times-new-roman\">Besides these two, <b>all the other learning platforms have been decreasing<\/b> in usage in the last 4 years.<\/p>","b394ef2c":"<h3 style=\"font-family: times-new-roman; font-size: 1.5em\">II. Second Special Sauce: The Power<\/h3>\n\n<p style=\"font-family: times-new-roman\">Regarding the power, we can observe that:<\/p>\n\n* <p style=\"font-family: times-new-roman\">After an increase in 2020, <b>GPU is losing popularity<\/b> in 2021 for both genders, while <b>the rise of TPU<\/b> is more and more visible. The number of respondents that say that they've <b>used TPU more than once increased<\/b> in 2021 vs. 2019, so we should start being used to hearing more about TPU in the future!<\/p>\n* <p style=\"font-family: times-new-roman\">\ud83c\udfa9Men are more fond of TPU than \ud83d\udc83women are.<\/p>\n* <p style=\"font-family: times-new-roman\">Interestingly enough, the None category increased in popularity as well - as people on the platform affirm they never used neither GPU nor TPU. In 2021, there are more \ud83d\udc83ladies (58%) than \ud83c\udfa9gents (~50%) that prefer to not use any special hardware. This trend might also be linked to the increased youth within the platform.<\/p>","c821420e":"## 3.3 Deep Learning \"Swing\"\n\n* <p style=\"font-family: times-new-roman\">In regards to Computer Vision, <b>Image Classification (e.g.: ResNet, EffNet etc.) is the most used method for both genders<\/b>. However, the second most used method differs for the 2: for \ud83c\udfa9gents is Object Detection (e.g.: RetinaNet), while for the \ud83d\udc83Ladies is Image Segmentation (e.g.: U-Net), although the 2 are very close in terms of popularity from one to another.<\/p>\n* <p style=\"font-family: times-new-roman\">In terms of NLP (Natural Language Processing), we can see a <b>very strong increase in popularity for Transformer Language Models (e.g.: BERT)<\/b> for both genders. It even surpassed in popularity of the EncoderDecorderModels (e.g.: seq2seq), which were much more popular in 2019.<\/p>","73c481d1":"<div class=\"alert simple-alert\" style=\"font-family: times-new-roman\">\n  <p style=\"font-family: times-new-roman\"><center>\ud83d\udc40 So far, we know that we're looking at a 20:80 ratio between \ud83d\udc83ladies and \ud83c\udfa9gents. We know that Data Science is getting much more traction among the youth in 2021 and more and more people are drawn towards the Kaggle platform, especially students. We know that, although the vast majority of respondents are from India and the US, people from Nigeria, Pakistan, Egypt and Indonesia are increasing in numbers fast, so it's possible that we will see more diversity in the years to come.<\/center><\/p>\n<\/div>\n\n# 2. Getting up close and personal\n\n## 2.1 Occupation\n\n<p style=\"font-family: times-new-roman\">For both genders, the majority of respondents are either <b>Students<\/b> or have a profession within <b>Data Science<\/b>. However, some interesting differences happen within 3rd most common position:<\/p>\n\n* <p style=\"font-family: times-new-roman\">\ud83c\udfa9 3rd most common position for gents is <b>Software Engineer<\/b>.<\/p>\n* <p style=\"font-family: times-new-roman\">\ud83d\udc83 3rd most common position for ladies is <b>Data Analyst<\/b>.<\/p>\n\n<p style=\"font-family: times-new-roman\">Throughout the years, there are no significant changes between these rankings.<\/p>","01975685":"## 3.2 Machine Learning on the \"Blues\"\n\n<h3 style=\"font-family: times-new-roman; font-size: 1.5em\">I. The Algorithms<\/h3>\n\n* <p style=\"font-family: times-new-roman\">If you shift through years, there is an <b>apparent decrease in specialized respondents<\/b> (that have more than 2 years of experience in doing ML). This links very well with the fact that we know that there are more youngsters on the platform, that are using their personal computers in order to navigate and learn Machine Learning. Nevertheless, <i>these youngsters will increase the percentage of experienced coders, usage of specialized hardware and overall \"heavy-duty\" tools and libraries in the years to come<\/i>. Just wait for it! \ud83e\uddd0<\/p>\n* <p style=\"font-family: times-new-roman\">\ud83c\udfa9<b>Gents tend to have more numbers within the 3+ years of ML Experience<\/b> than \ud83d\udc83ladies do. This is linked to the fact that more men come from an Engineering background (which requires coding aptitudes) vs. women that come more from Data\/Business Analytics (which requires less or even no coding).<\/p>\n* <p style=\"font-family: times-new-roman\">The most used algorithms for both genders are <b>Trees Ensembles and Random Forests, Gradient Boosting Algorithms and CNNs<\/b> (Convolutional Neural Networks). This matches quite well the overall scheme of competitions we have been having on Kaggle, which tends to be either tabular or requires Computer Vision (of course, there have been many more other types, forecasting and NLP to name a few - however most competitions do require in most of the cases at least one of the above-mentioned algorithms).<\/p>","3ed3e6fd":"## 2.4 Special Sauces\n\n<h3 style=\"font-family: times-new-roman; font-size: 1.5em\">I. First Special Sauce: The Hardware<\/h3>\n\n<p style=\"font-family: times-new-roman\">There is a <b>smaller percentage of users for Workstations and Cloud Platforms<\/b> and an <b>increase in Personal Laptop's popularity<\/b>. <\/p>\n\n<p style=\"font-family: times-new-roman\">I believe this is the case because, as the overall percentage of respondents in 2021 consists of many more young adults (aged 18 to 24), they do not yet have the necessary budget and experience to work with heavy-duty equipment, like specialized workstations and Cloud Platforms with online GPU or TPU.<\/p>","dfc5bdba":"<div class=\"alert simple-alert\" style=\"font-family: times-new-roman\">\n  <p style=\"font-family: times-new-roman\"><center>\ud83d\udc40 We know that Matplotlib, Seaborn and Plotly are the overall \"rulers\" in terms of data visualization, with Seaborn increasing in popularity in 2021. We know that there is a decrease in specialized ML coders due to youngsters and that \ud83c\udfa9gents tend to have more experience than the \ud83d\udc83ladies do in this department. Scikit-learn, Tensorflow and Keras remain the most used frameworks, with PyTorch catching up each year. We know that Trees, Ensembles, CNNs and Image Classification are and remain very popular, with a surge in the Transformer Language Models department. And we can say that the Experiment Tracking tools are starting to gain more interest, however there is room to grow and shine in the coming years.<\/center><\/p>\n<\/div>\n\n# 4. Can I give you a ride over the estate?\n\n> <p style=\"font-family: times-new-roman\">\ud83c\udfdb\ufe0f Historically, an estate comprises the houses, outbuildings, supporting farmland, and woods that surround the gardens and grounds of a very large property, such as a country house or mansion. It is an \"estate\" because the profits from its produce and rents are sufficient to support the household in the house at its center, formerly known as the manor house (like in the image below). Thus, \"the estate\" may refer to all other cottages and villages in the same ownership as the mansion itself, covering more than one former manor (many similarities to ... a business). (<a href=\"https:\/\/en.wikipedia.org\/wiki\/Estate_(land)\">source can be found here<\/a>)<\/p>\n\n<center><img src=\"https:\/\/i.imgur.com\/yM2X6Xx.gif\" width=800><\/center>\n\n## 4.1 Estate's Industry & Size\n\n<h3 style=\"font-family: times-new-roman; font-size: 1.5em\">I. The Industry of the Business<\/h3>\n\n* <p style=\"font-family: times-new-roman\">\ud83c\udfa9 In 2021, <b>gents can be found the most within the Technology Industry<\/b> (I am thinking Engineering, as many of them have this job position) <b>and within Academics<\/b> (teachers\/students). They also prefer the <i>Manufacturing<\/i> Industry slightly better than ladies do.<\/p>\n* <p style=\"font-family: times-new-roman\">\ud83d\udc83 As for <b>ladies, they can be found the most within Academia and Technology Industries<\/b> (reversed order vs men), although the percentages are extremely close to each other. Ladies also better prefer the <i>Medical\/Pharmaceutical<\/i> Industry.<\/p>\n\n> <p style=\"font-family: times-new-roman\">\ud83d\udccc Note: this question has data available only for the years 2018 and 2021. Hence, I could not show a reliable ranking evolution through time, but I can say that there are no significant changes between 2018 and 2021.<\/p>\n\n<p style=\"font-family: times-new-roman\">Full Legend of Industries below:<\/p>\n\n\n<center>\n<table>\n<thead>\n<tr>\n<th>Mapping<\/th>\n<th>Full Name<\/th>\n<\/tr>\n<\/thead>\n<tbody><tr>\n<td>Technology<\/td>\n<td>Computers\/Technology<\/td>\n<\/tr>\n<tr>\n<td>Academics<\/td>\n<td>Academics\/Education<\/td>\n<\/tr>\n<tr>\n<td>Finance<\/td>\n<td>Accounting\/Finance<\/td>\n<\/tr>\n<tr>\n<td>Manufacturing<\/td>\n<td>Manufacturing\/Fabrication<\/td>\n<\/tr>\n<tr>\n<td>Medical<\/td>\n<td>Medical\/Pharmaceutical<\/td>\n<\/tr>\n<tr>\n<td>Government<\/td>\n<td>Government\/Public Service<\/td>\n<\/tr>\n<tr>\n<td>Energy<\/td>\n<td>Energy\/Mining<\/td>\n<\/tr>\n<tr>\n<td>Internet Service<\/td>\n<td>Online Service\/Internet-based Services<\/td>\n<\/tr>\n<tr>\n<td>Sales<\/td>\n<td>Retail\/Sales<\/td>\n<\/tr>\n<tr>\n<td>Insurance<\/td>\n<td>Insurance\/Risk Assessment<\/td>\n<\/tr>\n<tr>\n<td>Marketing<\/td>\n<td>Marketing\/CRM<\/td>\n<\/tr>\n<tr>\n<td>Communications<\/td>\n<td>Broadcasting\/Communications<\/td>\n<\/tr>\n<tr>\n<td>Shipping<\/td>\n<td>Shipping\/Transportation<\/td>\n<\/tr>\n<tr>\n<td>Non-profit<\/td>\n<td>Non-profit\/Service<\/td>\n<\/tr>\n<tr>\n<td>Security<\/td>\n<td>Military\/Security\/Defense<\/td>\n<\/tr>\n<tr>\n<td>Entertainment<\/td>\n<td>Hospitality\/Entertainment\/Sports<\/td>\n<\/tr>\n<\/tbody><\/table>\n<\/center>","c5aa2c89":"## 3.4 Excuse me, do you experiment?\n\n<p style=\"font-family: times-new-roman\">Machine Learning experiment tracking tools have been a new area within the Data Science discipline. I know I have discovered and started using ML tracking this year, and we can see it is a new concept from the fact that a question regarding this area has appeared in the Data Science Survey only last year. However, it looks like it is starting to gain a little bit more popularity within our community.<\/p>\n\n* <p style=\"font-family: times-new-roman\">25% of \ud83c\udfa9men say they use no Experiment Tracking - however the percentage of \ud83d\udc83women that affirm they don't use any of these tools increased ~3% to around 20% in 2021.<\/p>\n* <p style=\"font-family: times-new-roman\"><b>Tensorboard and Weights&Biases<\/b> are the most used tools within experiment tracking.<\/p>","393308e8":"## 2.3 Environment & Surroundings\n\n<h3 style=\"font-family: times-new-roman; font-size: 1.5em\">The Environment<\/h3>\n\n<p style=\"font-family: times-new-roman\">Regarding the Data Science setup and what the genders use most often within their Data Science environment, we can see that:<\/p>\n\n* <p style=\"font-family: times-new-roman\"><b>Visual Studio increased in popularity<\/b> significantly in 2021, after a slight dip in 2020. \ud83c\udfa9Gents use it more often (49% in 2021) than \ud83d\udc83ladies do (39% in 2021).<\/p>\n* <p style=\"font-family: times-new-roman\">After many years in which <b>Jupyter<\/b> has been having the majority of the usage (half of the respondents said they use Jupyter frequently), it <b>has lost its popularity<\/b> suddenly in 2021, with only ~20% of users still saying that they use it on a regular basis.<\/p>","6d04b7e3":"## 4.2 Estate's Profitability\n\n<h3 style=\"font-family: times-new-roman; font-size: 1.5em\">I. The Salary<\/h3>\n\n> <p style=\"font-family: times-new-roman\"> \ud83d\udccc Note: The salaries were adjusted on respondent's country, meaning that the pay (in US dollars) was balanced to be showing the power of purchase within the place of residence, rather than just the overall brute amount. The adjustment was done as I did last year, meaning that I have converted the salary to \"number of McMeal units a person can buy in their country\". The more units, the bigger the purchasing power. <i>Unfortunately, I could not adjust the pay on years too as I could not find data for all 4 years - hence there might be some inflation bias within the numbers.<\/i><\/p>\n\n* <p style=\"font-family: times-new-roman\"> \ud83c\udfa9 For gentlemen, the most prominent change between 2018 and 2021 is that there are many <b>more respondents that have lower salaries<\/b>. This is also evident in the general mean of the amount, which increased in 2019 but dropped at the lowest in 2021.<\/p>\n* <p style=\"font-family: times-new-roman\"> \ud83d\udc83 This trend is the <b>exact same for ladies<\/b> too. In general, there are many more respondents with lower income in 2021 vs 2018. The average pay dropped suddenly for women in 2020 vs 2019 and remained at the same value in 2021. <\/p>\n* <p style=\"font-family: times-new-roman\"> I strongly believe this decrease in overall pay is <i>not due to general lower income within the Data Science\/ Machine Learning Industry<\/i>. These industries actually have some of the biggest pays around the world. I would rather think this trend shows because <b>there are many more young people that took the survey, hence they naturally have lower income vs somebody with 5+ years of experience<\/b>. I am confident we will see a surge in higher pays in the following years.<\/p>","9db30ca5":"## \ud83d\udcd6 Functions & Helpers","83acd8cd":"<h3 style=\"font-family: times-new-roman; font-size: 1.5em\">II. The Size of the Business<\/h3>\n\n* <p style=\"font-family: times-new-roman\"> Around <b>20% of respondents<\/b> (same pattern in both genders) say that they are <b>employed in very small companies<\/b> (between 1 and 49 employees). This trend remained quite constant from 2019 through 2021.<\/p>\n* <p style=\"font-family: times-new-roman\"> Another <b>20%-25% of respondents<\/b> are at the other end of the spectrum, saying that they <b>work within large and very large companies<\/b> of more than 1,000 employees (shown for both ladies and gents).<\/p>\n* <p style=\"font-family: times-new-roman\"> There was a <i>smaller percentage of respondents that answered this question<\/i> (be aware, not in absolute numbers - but in percentage on year and gender) in 2020 vs 2019. In 2021 it stabilized a little, but I am wondering if the decrease in 2020 was marked by some elderly more <i>experienced people on the platform that preferred to keep these pieces of information private<\/i>.<\/p>","6e1dbc5b":"<h3 style=\"font-family: times-new-roman; font-size: 1.5em\">Curiosity Bonus: Top 20 Countries in 2021 Ranking Evolution<\/h3>\n\n<p style=\"font-family: times-new-roman\">Let's look at the top 10 countries in 2021 and their evolution:<\/p>\n\n* <p style=\"font-family: times-new-roman\">\ud83c\udfa9 For the gentlemen, there have been many more responders from <b>Nigeria and Pakistan<\/b>, ending up in the top 10 in 2021 from rankings below 20 in 2017.<\/p>\n* <p style=\"font-family: times-new-roman\">\ud83d\udc83 For the ladies, there has been a huge surge in respondents from <b>Egipt, Indonesia and Nigeria<\/b>, these countries ending up in the top 10 most responders in 2021.<\/p>\n\n<p style=\"font-family: times-new-roman\">It's beautiful to see that more and more people join our community from more diverse backgrounds and countries.<\/p>","50292e5e":"## 1.3 Do demographics party differently?\n\n<p style=\"font-family: times-new-roman\">Yes and No.<\/p>\n\n<p style=\"font-family: times-new-roman\">The main takeaway is that women have almost the same Country Distribution as men, with the majority coming from <b>India and USA<\/b>. To be noted however that the ranks 4, 5, and 6 for \ud83d\udc83women are countries like Egypt, UK and Nigeria, compared to \ud83c\udfa9men where Japan, China and Brazil hold these places.<\/p>","a9c7c3db":"<h3 style=\"font-family: times-new-roman; font-size: 1.5em\">II. The Frameworks<\/h3>\n\n* <p style=\"font-family: times-new-roman\"><b>Scikit-learn, Tensorflow and Keras<\/b> are the most used ML frameworks for both genders. However, \ud83d\udc83<b>ladies do tend to have less interest<\/b> within them than \ud83c\udfa9men do, as it shows within the smaller numbers of usage for each framework.<\/p>\n* <p style=\"font-family: times-new-roman\">Most frameworks have a steady trend of usage, with no apparent substantial increase or decrease in popularity. I believe that <b>the most \"apparent\" improvement in the last 4 years was for PyTorch<\/b>, which increased 8% popularity points for \ud83c\udfa9gents and 6% popularity points for \ud83d\udc83ladies in 2021 vs 2018.<\/p>\n\n<p style=\"font-family: times-new-roman\">Note: As the number of respondents that answered they used Other Frameworks or None at all was very small (less than 3% for both genders), I excluded them from the graphs.<\/p>","b2cb2fe7":"<h3 style=\"font-family: times-new-roman; font-size: 1.5em\">II. The (Machine Learning) Investment<\/h3>\n\n<p style=\"font-family: times-new-roman\">Are companies interested in ML? How much are they willing to pay for it?<\/p>\n\n<p style=\"font-family: times-new-roman\">Something that I found rather odd is that there is some sort of <b>decrease in Machine Learning interest from companies<\/b>, at least from the respondent's perspective. I would have actually expected an increase in companies that have started using ML or have been implementing it for a while. However, not only the percentage of interest decrease but also <b>the overall number of respondents that answered this question decreased too<\/b>. I would put a part of this decrease on the lack of administrative knowledge from respondents (if they don't know for sure they might choose to hold back from answering).<\/p>","9a6c259f":"## 4.3 Manpower within the Estate\n\n<p style=\"font-family: times-new-roman\">A first note here would be that I have explored the <i>activities that make up an important role for a respondent and there are no major changes<\/i> throughout the years. The most frequent activities remain \"building and running Machine Learning services\", while the least frequent activity is \"performing research to advance the state of the art of Machine Learning\".<\/p>\n\n<p style=\"font-family: times-new-roman\">In regards to the number of people that make up the Data Science teams we can observe the following:<\/p>\n\n* <p style=\"font-family: times-new-roman\">For both \ud83c\udfa9men and \ud83d\udc83women the <b>team size correlates with the size of the company<\/b>. There are around 35% of respondents that affirm that the DS team within the company is quite small (less than 4 people).<\/p>\n* <p style=\"font-family: times-new-roman\">On the opposite side there are ~16% (\ud83d\udc83ladies) to almost 20% (\ud83c\udfa9gents) that state they are working in teams equal or greater than 10 members.<\/p>\n* <p style=\"font-family: times-new-roman\">There is <i>no significant shift within the percentages of categories<\/i> throughout the years.<\/p>","07722024":"<h3 style=\"font-family: times-new-roman; font-size: 1.5em\">Curiosity Bonus: Salaries & Roles<\/h3>\n\n<p style=\"font-family: times-new-roman\">I know pay is a taboo subject, but I could not help myself to also look within the top 6 most frequent Roles and what is the average salary for each of them. I have come up with an extremely informative graph:<\/p>\n\n* <p style=\"font-family: times-new-roman\">For \ud83c\udfa9gents, the highest paying jobs are <b>Project Manager<\/b> (1st place) and <b>Data Scientist<\/b> (2nd place). Coming next, the 3rd best-paying salary is for <b>Software Engineering<\/b> - and we know men love this job, as it is also the 3rd most frequent role found within our respondents.<\/p>\n* <p style=\"font-family: times-new-roman\">For \ud83d\udc83ladies, the first 2 most high-paying roles are <b>Project Manager<\/b> (1st place) and <b>Data Scientist<\/b> (2nd place) as well! What I find the most interesting is that for them, on the 3rd place on the list of the best paying jobs is <b>Business Analyst<\/b> (very close to Data Analyst I might add), which are also extremely popular roles for women (as we saw in the chart in Chapter 2.1).<\/p>\n* <p style=\"font-family: times-new-roman\">What I find interesting is that <b>each gender has in the top 4 best paying jobs roles that they are really good at<\/b>. For women there is Data Science, Data Analysis and Business Analysis, while for men is Data Science, Software Engineering and Research.<\/p>","0c33e0bd":"## 2.2 What language are we speaking?\n\n<p style=\"font-family: times-new-roman\">The first idea to be noticed is that the pool of respondents in <b>2021 is less experienced than in previous years<\/b>. Between 2017 and 2020, the majority have been programming between 1 and 5 years. However, in 2021 the vast majority of respondents have been programming for only 1-3 years.<\/p>\n\n<p style=\"font-family: times-new-roman\">In regards to what language the genders would recommend, it seems that <b>Python has the overwhelming vote<\/b> and has been increasing in popularity each year. On the opposite corner there is <b>R, which is losing engagement fast<\/b>, while SQL has a slight increase of ~3% popularity points.<\/p>\n\n<div class=\"alert success-alert\" style=\"font-family: times-new-roman\">\n  <h4 style=\"font-family: times-new-roman\"><center>\ud83d\udc40 Psst! Don't forget to hover the mouse over the stacked bar charts to see more details!<\/center><\/h4>\n<\/div>\n\n<p style=\"font-family: times-new-roman\"><\/p>","8f278380":"<h3 style=\"font-family: times-new-roman; font-size: 1.5em\">Most used programming languages within Data Science<\/h3>\n\n<p style=\"font-family: times-new-roman\">Both genders look the same in terms of the distribution of languages and what they use more often in their projects.<\/p>\n\n<p style=\"font-family: times-new-roman\">A few trends to mention:<\/p>\n\n* <p style=\"font-family: times-new-roman\"><b>C & C++ have been increasing a few percentage points<\/b>, meaning that there are a few more respondents that use these 2 languages than in previous years.<\/p>\n* <p style=\"font-family: times-new-roman\"><b>R has been decreasing in popularity<\/b>, as we can also see in respondents' recommendations. Still, \ud83d\udc83<b>women tend to use it more<\/b> (23.4% in 2021) than \ud83c\udfa9men so (19.8% in 2021).<\/p>\n\n<div class=\"alert success-alert\" style=\"font-family: times-new-roman\">\n  <h4 style=\"font-family: times-new-roman\"><center>\ud83d\udc40 Psst! Hover your mouse over the streamgraphs to see the legend and more information!<\/center><\/h4>\n<\/div>\n\n<p style=\"font-family: times-new-roman\"><\/p>","dc19258f":"<div class=\"alert success-alert\" style=\"font-family: times-new-roman\">\n  <h4 style=\"font-family: times-new-roman\"><center>\ud83d\udc40 Don't forget to <b>hover<\/b> your mouse over the charts and <b>interact<\/b> with them!<\/center><\/h4>\n<\/div>\n\n# 1. Ladies & Gentlemen, the floor is open!\n\n> <p style=\"font-family: times-new-roman\"> \ud83c\udfb7 Did you know? 1920s in North America are frequently referred to as the \"Roaring Twenties\" or the \"Jazz Age\", while in Europe the period is sometimes referred to as the \"Golden Twenties\" because of the economic boom following World War I. French speakers refer to the period as the \"Ann\u00e9es folles\" (\"Crazy Years\"), emphasizing the era's social, artistic, and cultural dynamism (<a href=\"https:\/\/en.wikipedia.org\/wiki\/1920s\">source here<\/a>).<\/p>\n\n<center><img src=\"https:\/\/i.imgur.com\/nGNgeJw.png\" width=800><\/center>\n\n## 1.1 How many came to the party?\n\n<p style=\"font-family: times-new-roman\">The golden ratio, 80:20.<\/p>\n\n<p style=\"font-family: times-new-roman\">Throughout the years, no matter the number of overall respondents answering the survey, the percentage of women to men was kept almost the same. Hence, we are looking at a pool of around <b>80% \ud83c\udfa9men and almost 20% \ud83d\udc83women<\/b>.<\/p>\n\n<p style=\"font-family: times-new-roman\">We also see that we had the most answers in 2021! Not only is Kaggle becoming more and more popular, but the survey is too!<\/p>"}}