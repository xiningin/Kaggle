{"cell_type":{"67a78718":"code","308869cb":"code","73751d5f":"code","91b94ea8":"code","f3571e34":"code","f2292606":"code","5e0228b0":"code","b5a19164":"code","2d673f9d":"code","996b426c":"code","93ab27d4":"code","2849c5ac":"markdown"},"source":{"67a78718":"import json\nimport numpy as np \nimport pandas as pd \n\n!mkdir -p data","308869cb":"train_df = pd.read_csv('\/kaggle\/input\/tweet-sentiment-extraction\/train.csv')\ntest_df = pd.read_csv('\/kaggle\/input\/tweet-sentiment-extraction\/test.csv')\nsub_df = pd.read_csv('\/kaggle\/input\/tweet-sentiment-extraction\/sample_submission.csv')\n\ntrain_df.head()","73751d5f":"# Utility functions for preparing training and test data\n\n# Adpated from https:\/\/www.kaggle.com\/cheongwoongkang\/roberta-baseline-starter-simple-postprocessing\ndef find_all(input_str,search_str):\n    l1 = []\n    length = len(input_str)\n    index = 0\n    while index < length:\n        i = input_str.find(search_str, index)\n        if i == -1:\n            return l1\n        l1.append(i)\n        index = i + 1\n    return l1\n\ndef do_qa_train(train):\n\n    output = []\n    for line in train:\n        context = line[1]\n        qas = []\n        question = line[-1]\n        qid = line[0]\n        answers = []\n        answer = line[2]\n        if type(answer) != str or type(context) != str or type(question) != str:\n            continue\n        answer_starts = find_all(context, answer)\n        for answer_start in answer_starts:\n            answers.append({'answer_start': answer_start, 'text': answer.lower()})\n            break\n        qas.append({'question': question, 'id': qid, 'is_impossible': False, 'answers': answers})\n        output.append({'context': context.lower(), 'qas': qas})\n        \n    return output\n\n#Prepare testing data in QA-compatible format\n\ndef do_qa_test(test):\n    output = []\n    for line in test:\n        context = line[1]\n        qas = []\n        question = line[-1]\n        qid = line[0]\n        if type(context) != str or type(question) != str:\n            continue\n        answers = []\n        answers.append({'answer_start': 1000000, 'text': '__None__'})\n        qas.append({'question': question, 'id': qid, 'is_impossible': False, 'answers': answers})\n        output.append({'context': context.lower(), 'qas': qas})\n    return output","91b94ea8":"train = np.array(train_df)\nqa_train = do_qa_train(train)\n\nwith open('data\/train.json', 'w') as outfile:\n    json.dump(qa_train, outfile)","f3571e34":"test = np.array(test_df)\nqa_test = do_qa_test(test)\n\nwith open('data\/test.json', 'w') as outfile:\n    json.dump(qa_test, outfile)","f2292606":"qa_train[0]","5e0228b0":"qa_test[0]","b5a19164":"# install simple transformers\n!pip install '\/kaggle\/input\/simple-transformers-pypi\/seqeval-0.0.12-py3-none-any.whl' -q\n!pip install '\/kaggle\/input\/simple-transformers-pypi\/simpletransformers-0.22.1-py3-none-any.whl' -q","2d673f9d":"%%time\nfrom simpletransformers.question_answering import QuestionAnsweringModel\nMODEL_PATH = '\/kaggle\/input\/transformers-pretrained-distilbert\/distilbert-base-uncased-distilled-squad\/'\n\n# Create the QuestionAnsweringModel\nmodel = QuestionAnsweringModel('distilbert', \n                               MODEL_PATH, \n                               args={'reprocess_input_data': True,\n                                     'overwrite_output_dir': True,\n                                     'learning_rate': 5e-5,\n                                     'num_train_epochs': 3,\n                                     'max_seq_length': 192,\n                                     'doc_stride': 64,\n                                     'fp16': False,},\n                              use_cuda=True)\n\nmodel.train_model('data\/train.json')","996b426c":"%%time\n\npred = model.predict(qa_test)\ndf_pred = pd.DataFrame.from_dict(pred)","93ab27d4":"df_pred.head()","2849c5ac":"### Prepare data in QA format\n\nExample-format:\n\n```\ntrain_data = [\n    {\n        'context': \"This tweet sentiment extraction challenge is great\",\n        'qas': [\n            {\n                'id': \"00001\",\n                'question': \"positive\",\n                'answers': [\n                    {\n                        'text': \"is great\",\n                        'answer_start': 43\n                    }\n                ]\n            }\n        ]\n    }\n    ]\n```"}}