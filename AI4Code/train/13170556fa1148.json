{"cell_type":{"348c478d":"code","999ce0ec":"code","85f0473b":"code","32a3be7e":"code","0fea69dd":"code","68012f80":"code","f7697b11":"code","b838c8a6":"code","1d2a5b77":"code","948dbc00":"code","16b4ee68":"code","39613dc4":"code","0adada7e":"code","be879edd":"markdown"},"source":{"348c478d":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","999ce0ec":"#install mlxtend package by opening cmd and\n#pip install mlxtend\n\nimport pandas as pd\nfrom mlxtend.frequent_patterns import apriori\nfrom mlxtend.frequent_patterns import association_rules","85f0473b":"df = pd.read_csv('\/kaggle\/input\/market-basket-analysis\/france_data.csv')\ndf.head()","32a3be7e":"df.shape","0fea69dd":"#number of unique transactions\nlen(df.groupby(['InvoiceNo'])['Quantity'].count())","68012f80":"#highest billed customer#\nmax_buy = pd.DataFrame(df.groupby(['CustomerID'])['UnitPrice'].sum().reset_index())\nmax_buy = max_buy.sort_values(by='UnitPrice', ascending=False)\nmax_buy.head()","f7697b11":"#taking a look at the purchases made by customer\nhighest_cust = df[df['CustomerID']==12536]\nhighest_cust = highest_cust.sort_values(by='UnitPrice', ascending=False)\nhighest_cust.head()\n#it is seen that there are two products whose Description is Manual and there price is high\n#lesson: look at the data carefully before believing it","b838c8a6":"#second highest billed customer\nsec_cust = df[df['CustomerID']==12681]\nsec_cust = sec_cust.sort_values(by='UnitPrice', ascending = False)\nsec_cust.head()","1d2a5b77":"#creating a user*product matrix\nbasket = pd.pivot_table(df,index='InvoiceNo', columns='Description',values='Quantity', fill_value=0)\nbasket.shape","948dbc00":"#function to replace natural number with 1\ndef encode_units(x):\n    if x <= 0:\n        return 0\n    if x >= 1:\n        return 1\n\nbasket_sets = basket.applymap(encode_units)\nbasket_sets.drop('POSTAGE', inplace=True, axis=1) #dropping off the records which have been posted\n","16b4ee68":"#applying apriori algorithm to generate rules which have support more than 0.05\nfrequent_itemsets = apriori(basket_sets, min_support=0.05, use_colnames=True)\nfrequent_itemsets.head()","39613dc4":"#calculating confidence and lift for the genrated rules\nrules = association_rules(frequent_itemsets, metric=\"lift\", min_threshold=1)\nrules.head()","0adada7e":"#selecting only the rules which have lift >6 and confidence >0.8\nrules[ (rules['lift'] >= 6) &\n       (rules['confidence'] >= 0.8) ]","be879edd":"By looking at the rules, it seems that the **green and red alarm clocks are purchased together and the red paper cups, napkins and plates are purchased together** in a manner that is higher than the overall probability would\u00a0suggest.\nAt this point, you may want to look at how much opportunity there is to use the popularity of one product to drive sales of another. For instance, we can see that we sell 340 Green Alarm clocks but only 316 Red Alarm Clocks so maybe we can drive more Red Alarm Clock sales through recommendations?"}}