{"cell_type":{"2c02eef3":"code","3160f640":"code","ed4197ca":"code","dd444441":"code","0b2d3e25":"code","e3d9410d":"code","b5017408":"code","1e822106":"code","e029fbd6":"code","41af8e9e":"code","d98e867c":"code","02ec200f":"code","480ad76f":"code","3a6663e9":"markdown","003adbdc":"markdown","3ed8015d":"markdown"},"source":{"2c02eef3":"from preprocess import SiamesePairs\nfrom contrastive_utils import *\n\nimport os\nos.environ['TF_CPP_MIN_LOG_LEVEL'] = '2'\nimport time\nimport numpy as np\n\nimport tensorflow as tf\nimport keras.backend as K\nfrom keras.optimizers import Adam, RMSprop\nfrom keras.callbacks import EarlyStopping\n\nfrom sklearn.metrics import roc_curve, roc_auc_score\n\n# plotting\nimport wandb\nfrom wandb.keras import WandbCallback\nfrom tensorflow.keras.utils import plot_model\nimport matplotlib.pyplot as plt\n%matplotlib inline","3160f640":"if not os.path.exists('.\/weights'):\n    os.makedirs('.\/weights')\n    print(\"Weights directory created\")\nelse:\n    print(\"Weights directory exists\")","ed4197ca":"def data_shapes(data):\n    print(\"\\nNumber of classes   : \", data.train_images.shape[0])\n    print(\"Original signatures : \", len(data.train_images[0][0]))\n    print(\"Forged signatures   : \", len(data.train_images[0][1]))\n    print(\"Image shape         : \", data.train_images[0][0][0].shape)\n    print()","dd444441":"def plot_pairs(data):\n    id1 = 0\n    id2 = 0\n\n    fig, ax = plt.subplots(2, 2, sharex=True, sharey=True, figsize=(8,8))\n    for i in range(2):\n        if i == 1:\n            id2 += 21\n        ax[i,0].imshow(data.pairs[0][id1])\n        ax[i,1].imshow(data.pairs[1][id2])\n\n        # subplot titles\n        ax[i,0].set_title('Anchor image')\n        ax[i,1].set_title('Target: {0}'.format(data.targets[id2]))\n\n    fig.tight_layout()\n    plt.show()","0b2d3e25":"DATA_PATH = \"..\/input\/handwritten-signature-datasets\/CEDAR\/CEDAR\"  # path to dataset (kaggle)\nSAVE_PATH = \".\/\"                                                   # path to save pickle files (kaggle)\n\nCLASSES = len(os.listdir(DATA_PATH))  # number of classes\nNAME = \"CEDAR\"\n\n# size of images\nSIZE = 224\nCHANNELS = 1\nINPUT_SHAPE = (SIZE, SIZE, CHANNELS)\n\n# evaluation\nALL_HISTORY = []\nACCURACIES = []\nTHRESHOLDS = []\nPLOTS = []\n\nTO_RESET = False","e3d9410d":"IS_TPU = True\n\nif IS_TPU:\n    # detect and init the TPU\n    tpu = tf.distribute.cluster_resolver.TPUClusterResolver.connect()\n\n    # instantiate a distribution strategy\n    tpu_strategy = tf.distribute.experimental.TPUStrategy(tpu)","b5017408":"# loading dataset\ndataset = SiamesePairs(name=NAME,\n                       data_path=DATA_PATH,\n                       save_path=SAVE_PATH,\n                       channels=CHANNELS,\n                       size=SIZE,\n                       reset=TO_RESET)","1e822106":"data_shapes(dataset)    # seeing dataset\nplot_pairs(dataset)     # plotting dataset","e029fbd6":"projectName = \"CEDAR_contrastive_loss\"\n\n# wandb config\nwandb.init(project=projectName)\nwandb.config.batch_size = batch_size\nwandb.config.learningrate = K.eval(optimizer.lr)","41af8e9e":"# Hyper parameters\nepochs = 10000\nbatch_size = 128\n\n# optimizer = RMSprop(lr=1e-4, rho=0.9, epsilon=1e-08)\noptimizer = Adam(lr = 0.00001)","d98e867c":"with tpu_strategy.scope():\n    # defining the embedding and network\n    embedding = embedding_net(INPUT_SHAPE)\n    siamese_network2 = build_contrastive_model(INPUT_SHAPE)\n    siamese_network2.compile(loss=contrastive_loss, optimizer=optimizer)\n\nsiamese_network2.summary()\nplot_model(siamese_network2, show_shapes=True, show_layer_names=True, to_file='CONTRASTIVEmodel.png')","02ec200f":"print(\"Starting training process!\")\nprint(\"-------------------------------------\")\n\n# callbacks\ncallbacks = [EarlyStopping(monitor='loss', patience=3, verbose=1)]\n\nsiamese_network2.fit(\n    [dataset.pairs[0], dataset.pairs[1]],\n    dataset.targets,\n    batch_size=batch_size,\n    epochs=epochs,\n    verbose=1,\n    callbacks=callbacks,\n    validation_split=0.2\n)\n\nsiamese_network2.save_weights('.\/weights\/{0}_1x_1.h5'.format(NAME))\nprint(\"saved successfully!\")","480ad76f":"!zip -r '.\/weights.zip' '.\/weights\/CEDAR_1x_1.h5'","3a6663e9":"## Setting up datasets","003adbdc":"## Everything put together","3ed8015d":"# Siamese Convolutional Neural Network<br>(Contrastive Loss)"}}