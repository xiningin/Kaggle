{"cell_type":{"c0dc40a5":"code","12d5979a":"code","d9027374":"code","9f609de7":"code","1e3ab30e":"code","eba865fa":"code","c3ed40d5":"code","ecefa7a0":"code","5967f45f":"code","ffa8b82b":"code","8626fbc4":"code","838364c2":"code","43f573d6":"code","eab07491":"code","6ef990f8":"code","33b0bbed":"code","a8f54b7b":"code","7978774a":"code","89d4e368":"code","234acb01":"code","cf671935":"code","a55d3baf":"code","7aa74a1f":"code","73175d2b":"code","829e3bb1":"code","b5da80f9":"code","d3c04714":"code","b14b2949":"code","4655f115":"code","be649cbc":"markdown","c5640a4d":"markdown","6405b7b8":"markdown","c3ac6bb1":"markdown","7bd77fef":"markdown","a26bb1f1":"markdown","ca6f58ce":"markdown","a0c25243":"markdown","75b92c62":"markdown","944b58bb":"markdown","13b96b29":"markdown","3baed5eb":"markdown","ed00ffed":"markdown","840c0609":"markdown","cb7f67e0":"markdown","9c253006":"markdown","5e534736":"markdown","6a523c90":"markdown","8bb9b951":"markdown","b648d223":"markdown","6eb05782":"markdown","f9363955":"markdown","4e26a46f":"markdown","4bd34011":"markdown","e1992f28":"markdown","689afbe0":"markdown","f8181ddd":"markdown","7f5f0775":"markdown","c337fa96":"markdown"},"source":{"c0dc40a5":"!pip install -U tensorflow_datasets","12d5979a":"import tensorflow as tf","d9027374":"# Import TensorFlow Datasets\nimport tensorflow_datasets as tfds\ntfds.disable_progress_bar()\n\n# Helper libraries\nimport math\nimport numpy as np\nimport matplotlib.pyplot as plt","9f609de7":"import logging\nlogger = tf.get_logger()\nlogger.setLevel(logging.ERROR)","1e3ab30e":"dataset, metadata = tfds.load('fashion_mnist', as_supervised=True, with_info=True)\ntrain_dataset, test_dataset = dataset['train'], dataset['test']","eba865fa":"class_names = metadata.features['label'].names\nprint(\"Class names: {}\".format(class_names))","c3ed40d5":"num_train_examples = metadata.splits['train'].num_examples\nnum_test_examples = metadata.splits['test'].num_examples\nprint(\"Number of training examples: {}\".format(num_train_examples))\nprint(\"Number of test examples:     {}\".format(num_test_examples))","ecefa7a0":"def normalize(images, labels):\n    images = tf.cast(images, tf.float32)\n    images \/= 255\n    return images, labels\n\n# The map function applies the normalize function to each element in the train\n# and test datasets\ntrain_dataset =  train_dataset.map(normalize)\ntest_dataset  =  test_dataset.map(normalize)\n\n# The first time you use the dataset, the images will be loaded from disk\n# Caching will keep them in memory, making training faster\ntrain_dataset =  train_dataset.cache()\ntest_dataset  =  test_dataset.cache()","5967f45f":"# Take a single image, and remove the color dimension by reshaping\nfor image, label in test_dataset.take(1):\n    break\nimage = image.numpy().reshape((28,28))\n\n# Plot the image - voila a piece of fashion clothing\nplt.figure()\nplt.imshow(image, cmap=plt.cm.binary)\nplt.colorbar()\nplt.grid(False)\nplt.show()","ffa8b82b":"plt.figure(figsize=(10,10))\nfor i, (image, label) in enumerate(train_dataset.take(25)):\n    image = image.numpy().reshape((28,28))\n    plt.subplot(5,5,i+1)\n    plt.xticks([])\n    plt.yticks([])\n    plt.grid(False)\n    plt.imshow(image, cmap=plt.cm.binary)\n    plt.xlabel(class_names[label])\nplt.show()","8626fbc4":"model = tf.keras.Sequential([\n    tf.keras.layers.Flatten(input_shape=(28, 28, 1)),\n    tf.keras.layers.Dense(128, activation=tf.nn.relu),\n    tf.keras.layers.Dense(10, activation=tf.nn.softmax)\n])","838364c2":"model.compile(optimizer='adam',\n              loss=tf.keras.losses.SparseCategoricalCrossentropy(),\n              metrics=['accuracy'])","43f573d6":"BATCH_SIZE = 32\ntrain_dataset = train_dataset.cache().repeat().shuffle(num_train_examples).batch(BATCH_SIZE)\ntest_dataset = test_dataset.cache().batch(BATCH_SIZE)","eab07491":"model.fit(train_dataset, epochs=5, steps_per_epoch=math.ceil(num_train_examples\/BATCH_SIZE))","6ef990f8":"test_loss, test_accuracy = model.evaluate(test_dataset, steps=math.ceil(num_test_examples\/32))\nprint('Accuracy on test dataset:', test_accuracy)","33b0bbed":"for test_images, test_labels in test_dataset.take(1):\n    test_images = test_images.numpy()\n    test_labels = test_labels.numpy()\n    predictions = model.predict(test_images)","a8f54b7b":"predictions.shape\n","7978774a":"predictions[0]","89d4e368":"np.argmax(predictions[0])","234acb01":"test_labels[0]","cf671935":"def plot_image(i, predictions_array, true_labels, images):\n  predictions_array, true_label, img = predictions_array[i], true_labels[i], images[i]\n  plt.grid(False)\n  plt.xticks([])\n  plt.yticks([])\n  \n  plt.imshow(img[...,0], cmap=plt.cm.binary)\n\n  predicted_label = np.argmax(predictions_array)\n  if predicted_label == true_label:\n    color = 'blue'\n  else:\n    color = 'red'\n  \n  plt.xlabel(\"{} {:2.0f}% ({})\".format(class_names[predicted_label],\n                                100*np.max(predictions_array),\n                                class_names[true_label]),\n                                color=color)\n\ndef plot_value_array(i, predictions_array, true_label):\n  predictions_array, true_label = predictions_array[i], true_label[i]\n  plt.grid(False)\n  plt.xticks([])\n  plt.yticks([])\n  thisplot = plt.bar(range(10), predictions_array, color=\"#777777\")\n  plt.ylim([0, 1]) \n  predicted_label = np.argmax(predictions_array)\n  \n  thisplot[predicted_label].set_color('red')\n  thisplot[true_label].set_color('blue')","a55d3baf":"i = 0\nplt.figure(figsize=(6,3))\nplt.subplot(1,2,1)\nplot_image(i, predictions, test_labels, test_images)\nplt.subplot(1,2,2)\nplot_value_array(i, predictions, test_labels)","7aa74a1f":"i = 12\nplt.figure(figsize=(6,3))\nplt.subplot(1,2,1)\nplot_image(i, predictions, test_labels, test_images)\nplt.subplot(1,2,2)\nplot_value_array(i, predictions, test_labels)","73175d2b":"# Plot the first X test images, their predicted label, and the true label\n# Color correct predictions in blue, incorrect predictions in red\nnum_rows = 5\nnum_cols = 3\nnum_images = num_rows*num_cols\nplt.figure(figsize=(2*2*num_cols, 2*num_rows))\nfor i in range(num_images):\n  plt.subplot(num_rows, 2*num_cols, 2*i+1)\n  plot_image(i, predictions, test_labels, test_images)\n  plt.subplot(num_rows, 2*num_cols, 2*i+2)\n  plot_value_array(i, predictions, test_labels)\n","829e3bb1":"# Grab an image from the test dataset\nimg = test_images[0]\n\nprint(img.shape)","b5da80f9":"# Add the image to a batch where it's the only member.\nimg = np.array([img])\n\nprint(img.shape)","d3c04714":"predictions_single = model.predict(img)\n\nprint(predictions_single)","b14b2949":"plot_value_array(0, predictions_single, test_labels)\n_ = plt.xticks(range(10), class_names, rotation=45)","4655f115":"np.argmax(predictions_single[0])","be649cbc":"## Preprocess the data\n\nThe value of each pixel in the image data is an integer in the range `[0,255]`. For the model to work properly, these values need to be normalized to the range `[0,1]`. So here we create a normalization function, and then apply it to each image in the test and train datasets.","c5640a4d":"## Install and import dependencies\n\nWe'll need [TensorFlow Datasets](https:\/\/www.tensorflow.org\/datasets\/), an API that simplifies downloading and accessing datasets, and provides several sample datasets to work with. We're also using a few helper libraries.","6405b7b8":"Here, the model has predicted the label for each image in the testing set. Let's take a look at the first prediction:","c3ac6bb1":"Finally, use the trained model to make a prediction about a single image. ","7bd77fef":"Loading the dataset returns metadata as well as a *training dataset* and *test dataset*.\n\n* The model is trained using `train_dataset`.\n* The model is tested against `test_dataset`.\n\nThe images are 28 $\\times$ 28 arrays, with pixel values in the range `[0, 255]`. The *labels* are an array of integers, in the range `[0, 9]`. These correspond to the *class* of clothing the image represents:\n\n<table>\n  <tr>\n    <th>Label<\/th>\n    <th>Class<\/th>\n  <\/tr>\n  <tr>\n    <td>0<\/td>\n    <td>T-shirt\/top<\/td>\n  <\/tr>\n  <tr>\n    <td>1<\/td>\n    <td>Trouser<\/td>\n  <\/tr>\n    <tr>\n    <td>2<\/td>\n    <td>Pullover<\/td>\n  <\/tr>\n    <tr>\n    <td>3<\/td>\n    <td>Dress<\/td>\n  <\/tr>\n    <tr>\n    <td>4<\/td>\n    <td>Coat<\/td>\n  <\/tr>\n    <tr>\n    <td>5<\/td>\n    <td>Sandal<\/td>\n  <\/tr>\n    <tr>\n    <td>6<\/td>\n    <td>Shirt<\/td>\n  <\/tr>\n    <tr>\n    <td>7<\/td>\n    <td>Sneaker<\/td>\n  <\/tr>\n    <tr>\n    <td>8<\/td>\n    <td>Bag<\/td>\n  <\/tr>\n    <tr>\n    <td>9<\/td>\n    <td>Ankle boot<\/td>\n  <\/tr>\n<\/table>\n\nEach image is mapped to a single label. Since the *class names* are not included with the dataset, store them here to use later when plotting the images:","a26bb1f1":"### Explore the processed data\n\nLet's plot an image to see what it looks like.","ca6f58ce":"And, as before, the model predicts a label of 6 (shirt).","a0c25243":"This guide uses the [Fashion MNIST](https:\/\/github.com\/zalandoresearch\/fashion-mnist) dataset, which contains 70,000 grayscale images in 10 categories. The images show individual articles of clothing at low resolution (28 $\\times$ 28 pixels), as seen here:\n\n<table>\n  <tr><td>\n    <img src=\"https:\/\/tensorflow.org\/images\/fashion-mnist-sprite.png\"\n         alt=\"Fashion MNIST sprite\" width=\"600\">\n  <\/td><\/tr>\n  <tr><td align=\"center\">\n    <b>Figure 1.<\/b> <a href=\"https:\/\/github.com\/zalandoresearch\/fashion-mnist\">Fashion-MNIST samples<\/a> (by Zalando, MIT License).<br\/>&nbsp;\n  <\/td><\/tr>\n<\/table>\n\nFashion MNIST is intended as a drop-in replacement for the classic [MNIST](http:\/\/yann.lecun.com\/exdb\/mnist\/) dataset\u2014often used as the \"Hello, World\" of machine learning programs for computer vision. The MNIST dataset contains images of handwritten digits (0, 1, 2, etc) in an identical format to the articles of clothing we'll use here.\n\nThis guide uses Fashion MNIST for variety, and because it's a slightly more challenging problem than regular MNIST. Both datasets are relatively small and are used to verify that an algorithm works as expected. They're good starting points to test and debug code.\n\nWe will use 60,000 images to train the network and 10,000 images to evaluate how accurately the network learned to classify images. You can access the Fashion MNIST directly from TensorFlow, using the [Datasets](https:\/\/www.tensorflow.org\/datasets) API:","75b92c62":"We can graph this to look at the full set of 10 class predictions","944b58bb":"## Import the Fashion MNIST dataset","13b96b29":"## Build the model\n\nBuilding the neural network requires configuring the layers of the model, then compiling the model.","3baed5eb":"This network has three layers:\n\n* **input** `tf.keras.layers.Flatten` \u2014 This layer transforms the images from a 2d-array of 28 $\\times$ 28 pixels, to a 1d-array of 784 pixels (28\\*28). Think of this layer as unstacking rows of pixels in the image and lining them up. This layer has no parameters to learn, as it only reformats the data.\n\n* **\"hidden\"** `tf.keras.layers.Dense`\u2014 A densely connected layer of 128 neurons. Each neuron (or node) takes input from all 784 nodes in the previous layer, weighting that input according to hidden parameters which will be learned during training, and outputs a single value to the next layer.\n\n* **output**  `tf.keras.layers.Dense` \u2014 A 128-neuron, followed by 10-node *softmax* layer. Each node represents a class of clothing. As in the previous layer, the final layer takes input from the 128 nodes in the layer before it, and outputs a value in the range `[0, 1]`, representing the probability that the image belongs to that class. The sum of all 10 node values is 1.\n\n> Note: Using `softmax` activation and `SparseCategoricalCrossentropy()` has issues and which are patched by the `tf.keras` model. A safer approach, in general, is to use a linear output (no activation function) with `SparseCategoricalCrossentropy(from_logits=True)`.\n\n\n### Compile the model\n\nBefore the model is ready for training, it needs a few more settings. These are added during the model's *compile* step:\n\n\n* *Loss function* \u2014 An algorithm for measuring how far the model's outputs are from the desired output. The goal of training is this measures loss.\n* *Optimizer* \u2014An algorithm for adjusting the inner parameters of the model in order to minimize loss.\n* *Metrics* \u2014Used to monitor the training and testing steps. The following example uses *accuracy*, the fraction of the images that are correctly classified.","ed00ffed":"## Evaluate accuracy\n\nNext, compare how the model performs on the test dataset. Use all examples we have in the test dataset to assess accuracy.","840c0609":"A prediction is an array of 10 numbers. These describe the \"confidence\" of the model that the image corresponds to each of the 10 different articles of clothing. We can see which label has the highest confidence value:","cb7f67e0":"Let's plot several images with their predictions. Correct prediction labels are blue and incorrect prediction labels are red. The number gives the percent (out of 100) for the predicted label. Note that it can be wrong even when very confident. ","9c253006":"## Thanks for visting please upvote and share comment what are you learn.","5e534736":"## Train the model\n\nFirst, we define the iteration behavior for the train dataset:\n1. Repeat forever by specifying `dataset.repeat()` (the `epochs` parameter described below limits how long we perform training).\n2. The `dataset.shuffle(60000)` randomizes the order so our model cannot learn anything from the order of the examples.\n3. And `dataset.batch(32)` tells `model.fit` to use batches of 32 images and labels when updating the model variables.\n\nTraining is performed by calling the `model.fit` method:\n1. Feed the training data to the model using `train_dataset`.\n2. The model learns to associate images and labels.\n3. The `epochs=5` parameter limits training to 5 full iterations of the training dataset, so a total of 5 * 60000 = 300000 examples.\n\n(Don't worry about `steps_per_epoch`, the requirement to have this flag will soon be removed.)","6a523c90":"# Classifying Images of Clothing","8bb9b951":"## Make predictions and explore\n\nWith the model trained, we can use it to make predictions about some images.","b648d223":"As it turns out, the accuracy on the test dataset is smaller than the accuracy on the training dataset. This is completely normal, since the model was trained on the `train_dataset`. When the model sees images it has never seen during training, (that is, from the `test_dataset`), we can expect performance to go down. ","6eb05782":"Display the first 25 images from the *training set* and display the class name below each image. Verify that the data is in the correct format and we're ready to build and train the network.","f9363955":"`model.predict` returns a list of lists, one for each image in the batch of data. Grab the predictions for our (only) image in the batch:","4e26a46f":"Let's look at the 0th image, predictions, and prediction array. ","4bd34011":"`tf.keras` models are optimized to make predictions on a *batch*, or collection, of examples at once. So even though we're using a single image, we need to add it to a list:","e1992f28":"### Explore the data\n\nLet's explore the format of the dataset before training the model. The following shows there are 60,000 images in the training set, and 10000 images in the test set:","689afbe0":"As the model trains, the loss and accuracy metrics are displayed. This model reaches an accuracy of about 0.88 (or 88%) on the training data.","f8181ddd":"Now predict the image:","7f5f0775":"### Setup the layers\n\nThe basic building block of a neural network is the *layer*. A layer extracts a representation from the data fed into it. Hopefully, a series of connected layers results in a representation that is meaningful for the problem at hand.\n\nMuch of deep learning consists of chaining together simple layers. Most layers, like `tf.keras.layers.Dense`, have internal parameters which are adjusted (\"learned\") during training.","c337fa96":"So the model is most confident that this image is a shirt, or `class_names[6]`. And we can check the test label to see this is correct:"}}