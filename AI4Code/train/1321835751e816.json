{"cell_type":{"6588d8ef":"code","a9e2279f":"code","26438b21":"code","0abca487":"code","a2aa396d":"code","2727e2c3":"code","e0cf397f":"code","90bdc018":"code","9925af66":"code","8606c9ec":"code","38a35684":"code","d9b56c79":"code","5e59565b":"code","6c118c70":"code","0dd0669e":"code","250a9d4c":"code","582797d2":"code","9aa70628":"code","a742150a":"code","ac77d2ec":"code","d9e4533c":"code","e35f4660":"code","748a5844":"code","1a8d7140":"code","9652a707":"code","5eb9ab69":"code","7a4b525e":"code","4e000521":"code","77591420":"code","532c4a83":"code","1d76c1bb":"code","00bea94b":"code","855a9ded":"code","bd9869ff":"code","54a925e7":"code","bd7395c6":"code","ca197fda":"code","36846329":"code","11b3bedb":"code","1a5abef2":"code","f6509620":"code","2f3e58a3":"code","13741687":"code","07037bc0":"code","eb780005":"code","0ae6cf56":"code","2d986df9":"code","7d5d0946":"code","d2a22aea":"code","e10da44c":"code","d8d5238a":"code","3f5d7463":"code","e311109d":"code","595aea68":"code","ca43a254":"code","c03c8966":"code","c8d6b9ff":"markdown","58b9cdd2":"markdown","5f3fc3b5":"markdown","b8c4d369":"markdown","fc564171":"markdown","ff0fa450":"markdown","e4f8139d":"markdown","788d23d6":"markdown","c9efa71c":"markdown","599ffd75":"markdown","fa723f2e":"markdown"},"source":{"6588d8ef":"## Importing the required libraries\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\nimport seaborn as sns","a9e2279f":"## Importing the data\ndf = pd.read_csv(\"..\/input\/quality-prediction-in-a-mining-process\/MiningProcess_Flotation_Plant_Database.csv\",decimal=\",\",parse_dates=[\"date\"],infer_datetime_format=True).drop_duplicates()","26438b21":"df.describe()","0abca487":"df.head()","a2aa396d":"## Checking null values in the data\ndf.isna().sum()","2727e2c3":"## Checking the corelation of all the inputs\nplt.figure(figsize=(20, 15))\np = sns.heatmap(df.corr(), annot=True)","e0cf397f":"## Important parameters as described in the intro\nimp = df.iloc[:,3:8]","90bdc018":"# air flow and level is important but not that much\nair_flow = df.iloc[:,8:15]\nlevel    = df.iloc[:,15:22]","9925af66":"## Y is the output \n#  Dropping the % iron ore as it is more correalated to % silion\ny = df.iloc[:,23:24]\ny.describe()","8606c9ec":"imp.info()","38a35684":"imp.describe()","d9b56c79":"plt.figure(figsize=(15, 8))\np = sns.heatmap(imp.corr(), annot=True)","5e59565b":"## Checking parameter graph\nplt.figure(figsize=(10, 7))\n#plt.hist(imp[\"Starch Flow\"], alpha = 0.5, bins = 50, edgecolor = \"Black\", label = \"01\")\n#plt.hist(imp[\"Amina Flow\"], alpha = 0.5, bins = 50, edgecolor = \"Black\", label = \"02\")\n#plt.hist(imp[\"Ore Pulp Flow\"], alpha = 0.5, bins = 50, edgecolor = \"Black\", label = \"03\")\n#plt.hist(imp[\"Ore Pulp pH\"], alpha = 0.5, bins = 50, edgecolor = \"Black\", label = \"04\")\nplt.hist(imp[\"Ore Pulp Density\"], alpha = 0.5, bins = 50, edgecolor = \"Black\", label = \"05\")\nplt.legend(loc = 'upper right')\nplt.title(\"Histogram Of IMP\")\nplt.xlabel(\"\")\nplt.ylabel(\"Number of Occurence\")\nplt.show() ","6c118c70":"air_flow.describe()","0dd0669e":"## Checking the corelation of air_flow\nplt.figure(figsize=(15, 8))\np = sns.heatmap(air_flow.corr(), annot=True)","250a9d4c":"## Checking 2 parameter with each other\nplt.figure(figsize=(10, 7))\n#plt.hist(air_flow[\"Flotation Column 03 Air Flow\"], alpha = 0.5, bins = 25, edgecolor = \"Black\", label = \"03\")\nplt.hist(air_flow[\"Flotation Column 04 Air Flow\"], alpha = 0.5, bins = 25, edgecolor = \"Black\", label = \"04\")\nplt.hist(air_flow[\"Flotation Column 05 Air Flow\"], alpha = 0.5, bins = 25, edgecolor = \"Black\", label = \"05\")\n#plt.hist(air_flow[\"Flotation Column 06 Air Flow\"], alpha = 0.5, bins = 25, edgecolor = \"Black\", label = \"06\")\nplt.legend(loc = 'upper right')\nplt.title(\"Histogram\")\nplt.xlabel(\"Cubic Meter Per Hour\")\nplt.ylabel(\"Number of Occurence\")\nplt.show() ","582797d2":"plt.figure(figsize=(15, 8))\np = sns.heatmap(level.corr(), annot=True)","9aa70628":"plt.figure(figsize=(10, 7))\nplt.hist(level[\"Flotation Column 01 Level\"], alpha = 0.5, bins = 25, edgecolor = \"Black\", label = \"03\")\nplt.hist(level[\"Flotation Column 02 Level\"], alpha = 0.5, bins = 25, edgecolor = \"Black\", label = \"04\")\n#plt.hist(level[\"Flotation Column 03 Level\"], alpha = 0.5, bins = 25, edgecolor = \"Black\", label = \"05\")\n#plt.hist(level[\"Flotation Column 04 Level\"], alpha = 0.5, bins = 25, edgecolor = \"Black\", label = \"06\")\nplt.legend(loc = 'upper right')\nplt.title(\"Histogram\")\nplt.xlabel(\"Nm\u00b3\/h\")\nplt.ylabel(\"Number of Occurence\")\nplt.show() ","a742150a":"from sklearn.decomposition import PCA\nfrom sklearn.preprocessing import scale","ac77d2ec":"air_flow_scaled_1 = scale(air_flow.iloc[:,0:3])\nair_flow_scaled_2 = scale(air_flow.iloc[:,3:5])\nair_flow_scaled_3 = scale(air_flow.iloc[:,5:])","d9e4533c":"print(air_flow_scaled_1.shape)\nprint(air_flow_scaled_2.shape)\nprint(air_flow_scaled_3.shape)","e35f4660":"## Only giving n_components as 1\npca = PCA(n_components=1)","748a5844":"## Storing the PCA\npca_air_flow_1 = pca.fit_transform(air_flow_scaled_1)\npca_air_flow_2 = pca.fit_transform(air_flow_scaled_2)\npca_air_flow_3 = pca.fit_transform(air_flow_scaled_3)","1a8d7140":"## Checking the variance\nvar_1 = pca.explained_variance_ratio_","9652a707":"## The variance is around 93% which is okay\nvar_1","5eb9ab69":"pca_air_flow_1","7a4b525e":"## Storing the PCA in a dataframe\npca_air_flow = pd.DataFrame(data = pca_air_flow_1,columns = [\"PCA_air_1\"])\npca_air_flow['PCA_air_2'] = pca_air_flow_2\npca_air_flow['PCA_air_3'] = pca_air_flow_3","4e000521":"## Checking the PCA relationship\nplt.figure(figsize=(15, 8))\np = sns.heatmap(pca_air_flow.corr(), annot=True)","77591420":"## Sorting the level according to their corelation\nlevel_scaled_1 = scale(level.iloc[:,0:3])\nlevel_scaled_2 = scale(level.iloc[:,3:])","532c4a83":"## Taking the n_components = 2 as 1 is giving 72%\npca2 = PCA(n_components=2)","1d76c1bb":"## Applying the PCA\npca_level_1 = pca2.fit_transform(level_scaled_1)\npca_level_2 = pca2.fit_transform(level_scaled_2)","00bea94b":"## Checking the variance\nvar_2 = pca2.explained_variance_ratio_","855a9ded":"var_2","bd9869ff":"## Storing the PCA in a dataframe\npca_level = pd.DataFrame(data = pca_level_1,columns = [\"PCA_level_1_1\",\"PCA_level_1_2\"])","54a925e7":"pca_level.shape","bd7395c6":"pca_level.isna().sum()","ca197fda":"pca_level_pd_2 = pd.DataFrame(data = pca_level_2,columns = [\"PCA_level_2_1\",\"PCA_level_2_2\"])\npca_level_pd_2.shape","36846329":"pca_level_pd_2.isna().sum()","11b3bedb":"pca_level[\"PCA_level_2_1\"] = pca_level_pd_2[\"PCA_level_2_1\"]\npca_level[\"PCA_level_2_2\"] = pca_level_pd_2[\"PCA_level_2_2\"]\npca_level.shape","1a5abef2":"pca_level.isna().sum()","f6509620":"## Checking the corelation\nplt.figure(figsize=(15, 8))\np = sns.heatmap(pca_level.corr(), annot=True)","2f3e58a3":"pca_air_level = pd.DataFrame(pca_air_flow)","13741687":"pca_air_level[\"PCA_level_1_1\"] = pca_level[\"PCA_level_1_1\"]\npca_air_level[\"PCA_level_1_2\"] = pca_level[\"PCA_level_1_2\"]\npca_air_level[\"PCA_level_2_1\"] = pca_level[\"PCA_level_2_2\"]\npca_air_level[\"PCA_level_2_2\"] = pca_level[\"PCA_level_2_2\"]","07037bc0":"pca_air_level.isna().sum()","eb780005":"pca_air_level.shape","0ae6cf56":"## Checking the overall corealtion\nplt.figure(figsize=(15, 8))\np = sns.heatmap(pca_air_level.corr(), annot=True)","2d986df9":"## Checking the shape of different parameter\nprint(imp.shape)\nprint(pca_air_level.shape)\nprint(y.shape)","7d5d0946":"## Checking the null values\nprint(imp.isna().sum())\nprint(pca_air_level.isna().sum())\nprint(y.isna().sum())\n# no null values","d2a22aea":"new_df = pd.DataFrame(y)","e10da44c":"# addition of air_flow pca\nnew_df['PCA_air_1'] = pca_air_flow_1\nnew_df['PCA_air_2'] = pca_air_flow_2\nnew_df['PCA_air_3'] = pca_air_flow_3\n\n# addition of level pca\nnew_df[\"PCA_level_1_1\"] = pca_level[\"PCA_level_1_1\"]\nnew_df[\"PCA_level_1_2\"] = pca_level[\"PCA_level_1_2\"]\nnew_df[\"PCA_level_2_1\"] = pca_level[\"PCA_level_2_1\"]\nnew_df[\"PCA_level_2_2\"] = pca_level[\"PCA_level_2_2\"]","d8d5238a":"new_df.shape","3f5d7463":"new_df.isna().sum()","e311109d":"new_df","595aea68":"plt.figure(figsize=(15, 8))\np = sns.heatmap(new_df.corr(), annot=True)","ca43a254":"from sklearn.model_selection import train_test_split","c03c8966":"train,test = train_test_split(df,test_size = 0.2)","c8d6b9ff":"### Checking the important parameter","58b9cdd2":"### Checking the level parameter","5f3fc3b5":"## Applying Decision Tree on original data","b8c4d369":"### Checking the air_flow parameter","fc564171":"## Applying PCA to Level","ff0fa450":"# Why the data is having NULL values","e4f8139d":"## Applying PCA to Air flow\n### As we can see there is corelation between the different parameter so applying PCA to different parameter and reducing the number of column ","788d23d6":"### Creating the new dataframe","c9efa71c":"## Dividing the data","599ffd75":"## Storing the all PCA in a single dataframe","fa723f2e":"### Applying PCA to air flow"}}