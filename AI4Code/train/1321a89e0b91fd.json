{"cell_type":{"6b1a7627":"code","dfe7e5de":"code","ff14939a":"code","e73f215f":"code","43ad0a67":"code","fdeef7e7":"code","03b7cf90":"code","93970e7c":"code","96d2187b":"code","304feeed":"code","c65385a4":"code","3ee67ca4":"code","d94bd98e":"code","e5eecad7":"code","cc9647cf":"code","d4105279":"code","1e8f22d3":"code","64227fa9":"code","6b38f59b":"code","6f7f0892":"code","6653aef2":"code","d1e61208":"code","a482a4ae":"code","516c5107":"code","2cec8b21":"code","7de88dc6":"code","36f83392":"code","b31611d0":"code","339e56eb":"code","5d899dd2":"code","ce2d7ddb":"code","db8cbc6f":"code","61715c59":"code","112f2eee":"code","273f7ab4":"code","3c0b3d6d":"code","c2d78c2a":"code","7dcb137a":"code","fb850973":"code","e1e583a5":"code","bfe48f0d":"code","b941f584":"code","2dc6a305":"code","f40b0865":"code","21d90ef9":"code","2c080316":"code","c8aaf1df":"code","1e2aba89":"code","50901a40":"code","faefa9db":"code","d82c52fb":"code","a09dbe46":"code","e1ad780f":"code","a6b6ec1e":"code","9d063065":"code","e75626d2":"code","7e2e6b66":"code","4cdda56a":"code","6e3f9f70":"code","21529946":"code","cc75e226":"code","b63956f0":"code","07692340":"code","d3ef9028":"code","01c6e02f":"code","e57ec9d7":"markdown","004e417a":"markdown","c6699dde":"markdown","c6a3a0da":"markdown","040e8867":"markdown","9dcb4438":"markdown","ec245b61":"markdown"},"source":{"6b1a7627":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns","dfe7e5de":"df = pd.read_csv(\"\/kaggle\/input\/factors-affecting-campus-placement\/Placement_Data_Full_Class.csv\")\ndf.head(n=5)","ff14939a":"df.info()","e73f215f":"df.shape","43ad0a67":"df.describe()","fdeef7e7":"df.isnull().sum()","03b7cf90":"df['status'].value_counts()","93970e7c":"df = df.drop('sl_no',axis=1)\ndf['salary'] = df['salary'].fillna(0)","96d2187b":"df.head(n=5)","304feeed":"plt.style.use('ggplot')\nplt.figure(figsize=(20,25))\nplt.subplot(4,2,1)\ndf['gender'].value_counts().plot(kind='bar',title='gender')\nplt.subplot(4,2,2)\ndf['ssc_b'].value_counts().plot(kind='bar',title='ssc_b')\nplt.subplot(4,2,3)\ndf['hsc_b'].value_counts().plot(kind='bar',title='hsc_b')\nplt.subplot(4,2,4)\ndf['hsc_s'].value_counts().plot(kind='bar',title='hsc_s')\nplt.subplot(4,2,5)\ndf['degree_t'].value_counts().plot(kind='bar',title='degree_t')\nplt.subplot(4,2,6)\ndf['workex'].value_counts().plot(kind='bar',title='workex')\nplt.subplot(4,2,7)\ndf['specialisation'].value_counts().plot(kind='bar',title='specialisation')\nplt.subplot(4,2,8)\ndf['status'].value_counts().plot(kind='bar',title='status')\nplt.show()","c65385a4":"plt.figure(figsize=(20,15))\nplt.subplot(3,2,1)\ndf['ssc_p'].value_counts().plot(kind='hist',title='ssc_p')\nplt.subplot(3,2,2)\ndf['hsc_p'].value_counts().plot(kind='hist',title='hsc_p')\nplt.subplot(3,2,3)\ndf['etest_p'].value_counts().plot(kind='hist',title='etest_p')\nplt.subplot(3,2,4)\ndf['mba_p'].value_counts().plot(kind='hist',title='mba_p')\nplt.subplot(3,2,5)\ndf['salary'].value_counts().plot(kind='hist',title='salary')\nplt.show()","3ee67ca4":"plt.figure(figsize=(20,20))\nplt.subplot(5,2,1)\nsns.scatterplot(data=df, x=\"ssc_p\", y=\"salary\", hue=\"gender\")\nplt.subplot(5,2,2)\nsns.scatterplot(data=df, x=\"ssc_p\", y=\"salary\", hue=\"degree_t\")\nplt.subplot(5,2,3)\nsns.scatterplot(data=df, x=\"hsc_p\", y=\"salary\", hue=\"gender\")\nplt.subplot(5,2,4)\nsns.scatterplot(data=df, x=\"hsc_p\", y=\"salary\", hue=\"degree_t\")\nplt.subplot(5,2,5)\nsns.scatterplot(data=df, x=\"degree_p\", y=\"salary\", hue=\"gender\")\nplt.subplot(5,2,6)\nsns.scatterplot(data=df, x=\"degree_p\", y=\"salary\", hue=\"degree_t\")\nplt.subplot(5,2,7)\nsns.scatterplot(data=df, x=\"etest_p\", y=\"salary\", hue=\"gender\")\nplt.subplot(5,2,8)\nsns.scatterplot(data=df, x=\"mba_p\", y=\"salary\", hue=\"degree_t\")\nplt.subplot(5,2,9)\nsns.scatterplot(data=df, x=\"mba_p\", y=\"salary\", hue=\"gender\")\nplt.subplot(5,2,10)\nsns.scatterplot(data=df, x=\"etest_p\", y=\"salary\", hue=\"degree_t\")\nplt.show()","d94bd98e":"sns.pairplot(df, hue=\"degree_t\")\nplt.show()","e5eecad7":"from sklearn.preprocessing import LabelEncoder\ncols = ['gender','ssc_b','hsc_b','hsc_s','degree_t','workex','specialisation','status']\ndf[cols] = df[cols].apply(LabelEncoder().fit_transform)\ndf.head(n=5)","cc9647cf":"plt.figure(figsize=(10,8))\nsns.heatmap(df.corr(),annot=True,cmap='coolwarm')\nplt.show()","d4105279":"plt.figure(figsize=(20,25))\nfor i,col in enumerate(df.columns,1):\n    plt.subplot(7,2,i)\n    sns.boxplot(data=df,x=col, orient=\"h\")\nplt.show()","1e8f22d3":"plt.figure(figsize=(20,25))\nfor i,col in enumerate(df.columns,1):\n    plt.subplot(7,2,i)\n    sns.violinplot(data=df,x=df[col],orient='h')\nplt.show()","64227fa9":"df.head(n=5)","6b38f59b":"x = df.drop('status',axis=1)\ny = df['status']","6f7f0892":"x=x.values\ny=y.values","6653aef2":"split = int(0.9*x.shape[0])\nprint(split)\n\nx_train = x[:split,:]\ny_train = y[:split]\n\nx_test = x[split:,:]\ny_test = y[split:]\n\nprint(x_train.shape,y_train.shape)\nprint(x_test.shape,y_test.shape)","d1e61208":"x_mean = x_train.mean(axis=0)\nx_std = x_train.std(axis=0)\n\nx_train = (x_train-x_mean)\/x_std\n\nx_test = (x_test-x_mean)\/x_std","a482a4ae":"from sklearn.linear_model import LogisticRegression\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.svm import SVC\nfrom sklearn.naive_bayes import GaussianNB\nfrom sklearn.ensemble import BaggingClassifier\nfrom sklearn.ensemble import GradientBoostingClassifier\nfrom xgboost import XGBClassifier\nfrom sklearn.metrics import accuracy_score,confusion_matrix","516c5107":"log_reg = LogisticRegression()\nlog_reg.fit(x_train,y_train)\n\nlog_acc=accuracy_score(y_test,log_reg.predict(x_test))\n\nprint(\"Train Set Accuracy:\"+str(accuracy_score(y_train,log_reg.predict(x_train))*100))\nprint(\"Test Set Accuracy:\"+str(accuracy_score(y_test,log_reg.predict(x_test))*100))","2cec8b21":"plt.figure(figsize=(6,4))\ndf_ = pd.DataFrame(confusion_matrix(y_test, log_reg.predict(x_test)), range(2),range(2))\nsns.set(font_scale=1.4)#for label size\nsns.heatmap(df_, annot=True,annot_kws={\"size\": 16}, fmt='g')\nplt.xlabel('Predicted Class')\nplt.ylabel('Original Class')\nplt.show()","7de88dc6":"y_pred= log_reg.predict(x_test).ravel()\n\nfrom sklearn.metrics import roc_curve\nfpr_keras, tpr_keras, thresholds_keras = roc_curve(y_test, y_pred)\n\nfrom sklearn.metrics import auc\nauc_keras = auc(fpr_keras, tpr_keras)\n\nplt.figure(figsize=(8,6))\nplt.plot([0, 1], [0, 1], 'k--')\nplt.plot(fpr_keras, tpr_keras, label='Logistic (area = {:.3f})'.format(auc_keras))\nplt.xlabel('False positive rate')\nplt.ylabel('True positive rate')\nplt.title('ROC curve')\nplt.legend(loc='best')\nplt.show()","36f83392":"d_tree = DecisionTreeClassifier()\nd_tree.fit(x_train,y_train)\n\nd_acc=accuracy_score(y_test,d_tree.predict(x_test))\n\nprint(\"Train Set Accuracy:\"+str(accuracy_score(y_train,d_tree.predict(x_train))*100))\nprint(\"Test Set Accuracy:\"+str(accuracy_score(y_test,d_tree.predict(x_test))*100))","b31611d0":"plt.figure(figsize=(6,4))\ndf_ = pd.DataFrame(confusion_matrix(y_test, d_tree.predict(x_test)), range(2),range(2))\nsns.set(font_scale=1.4)#for label size\nsns.heatmap(df_, annot=True,annot_kws={\"size\": 16}, fmt='g')\nplt.xlabel('Predicted Class')\nplt.ylabel('Original Class')\nplt.show()","339e56eb":"y_pred= d_tree.predict(x_test).ravel()\n\nfrom sklearn.metrics import roc_curve\nfpr_keras, tpr_keras, thresholds_keras = roc_curve(y_test, y_pred)\n\nfrom sklearn.metrics import auc\nauc_keras = auc(fpr_keras, tpr_keras)\n\nplt.figure(figsize=(8,6))\nplt.plot([0, 1], [0, 1], 'k--')\nplt.plot(fpr_keras, tpr_keras, label='Decision (area = {:.3f})'.format(auc_keras))\nplt.xlabel('False positive rate')\nplt.ylabel('True positive rate')\nplt.title('ROC curve')\nplt.legend(loc='best')\nplt.show()","5d899dd2":"r_for = RandomForestClassifier()\nr_for.fit(x_train,y_train)\n\nr_acc=accuracy_score(y_test,r_for.predict(x_test))\n\nprint(\"Train Set Accuracy:\"+str(accuracy_score(y_train,r_for.predict(x_train))*100))\nprint(\"Test Set Accuracy:\"+str(accuracy_score(y_test,r_for.predict(x_test))*100))","ce2d7ddb":"plt.figure(figsize=(6,4))\ndf_ = pd.DataFrame(confusion_matrix(y_test, r_for.predict(x_test)), range(2),range(2))\nsns.set(font_scale=1.4)#for label size\nsns.heatmap(df_, annot=True,annot_kws={\"size\": 16}, fmt='g')\nplt.xlabel('Predicted Class')\nplt.ylabel('Original Class')\nplt.show()","db8cbc6f":"y_pred= r_for.predict(x_test).ravel()\n\nfrom sklearn.metrics import roc_curve\nfpr_keras, tpr_keras, thresholds_keras = roc_curve(y_test, y_pred)\n\nfrom sklearn.metrics import auc\nauc_keras = auc(fpr_keras, tpr_keras)\n\nplt.figure(figsize=(8,6))\nplt.plot([0, 1], [0, 1], 'k--')\nplt.plot(fpr_keras, tpr_keras, label='Random forest (area = {:.3f})'.format(auc_keras))\nplt.xlabel('False positive rate')\nplt.ylabel('True positive rate')\nplt.title('ROC curve')\nplt.legend(loc='best')\nplt.show()","61715c59":"k_nei = KNeighborsClassifier()\nk_nei.fit(x_train,y_train)\n\nk_acc = accuracy_score(y_test,k_nei.predict(x_test))\n\nprint(\"Train set Accuracy:\"+str(accuracy_score(y_train,k_nei.predict(x_train))*100))\nprint(\"Test Set Accuracy:\"+str(accuracy_score(y_test,k_nei.predict(x_test))*100))","112f2eee":"plt.figure(figsize=(6,4))\ndf_ = pd.DataFrame(confusion_matrix(y_test, k_nei.predict(x_test)), range(2),range(2))\nsns.set(font_scale=1.4)#for label size\nsns.heatmap(df_, annot=True,annot_kws={\"size\": 16}, fmt='g')\nplt.xlabel('Predicted Class')\nplt.ylabel('Original Class')\nplt.show()","273f7ab4":"y_pred= k_nei.predict(x_test).ravel()\n\nfrom sklearn.metrics import roc_curve\nfpr_keras, tpr_keras, thresholds_keras = roc_curve(y_test, y_pred)\n\nfrom sklearn.metrics import auc\nauc_keras = auc(fpr_keras, tpr_keras)\n\nplt.figure(figsize=(8,6))\nplt.plot([0, 1], [0, 1], 'k--')\nplt.plot(fpr_keras, tpr_keras, label='K_nei (area = {:.3f})'.format(auc_keras))\nplt.xlabel('False positive rate')\nplt.ylabel('True positive rate')\nplt.title('ROC curve')\nplt.legend(loc='best')\nplt.show()","3c0b3d6d":"s_vec = SVC()\ns_vec.fit(x_train,y_train)\n\ns_acc = accuracy_score(y_test,s_vec.predict(x_test))\n\nprint(\"Train set Accuracy:\"+str(accuracy_score(y_train,s_vec.predict(x_train))*100))\nprint(\"Test Set Accuracy:\"+str(accuracy_score(y_test,s_vec.predict(x_test))*100))","c2d78c2a":"plt.figure(figsize=(6,4))\ndf_ = pd.DataFrame(confusion_matrix(y_test, s_vec.predict(x_test)), range(2),range(2))\nsns.set(font_scale=1.4)#for label size\nsns.heatmap(df_, annot=True,annot_kws={\"size\": 16}, fmt='g')\nplt.xlabel('Predicted Class')\nplt.ylabel('Original Class')\nplt.show()","7dcb137a":"y_pred= s_vec.predict(x_test).ravel()\n\nfrom sklearn.metrics import roc_curve\nfpr_keras, tpr_keras, thresholds_keras = roc_curve(y_test, y_pred)\n\nfrom sklearn.metrics import auc\nauc_keras = auc(fpr_keras, tpr_keras)\n\nplt.figure(figsize=(8,6))\nplt.plot([0, 1], [0, 1], 'k--')\nplt.plot(fpr_keras, tpr_keras, label='SVC (area = {:.3f})'.format(auc_keras))\nplt.xlabel('False positive rate')\nplt.ylabel('True positive rate')\nplt.title('ROC curve')\nplt.legend(loc='best')\nplt.show()","fb850973":"g_clf = GaussianNB()\ng_clf.fit(x_train,y_train)\n\ng_acc = accuracy_score(y_test,g_clf.predict(x_test))\n\nprint(\"Train set Accuracy:\"+str(accuracy_score(y_train,g_clf.predict(x_train))*100))\nprint(\"Test Set Accuracy:\"+str(accuracy_score(y_test,g_clf.predict(x_test))*100))","e1e583a5":"plt.figure(figsize=(6,4))\ndf_ = pd.DataFrame(confusion_matrix(y_test, g_clf.predict(x_test)), range(2),range(2))\nsns.set(font_scale=1.4)#for label size\nsns.heatmap(df_, annot=True,annot_kws={\"size\": 16}, fmt='g')\nplt.xlabel('Predicted Class')\nplt.ylabel('Original Class')\nplt.show()","bfe48f0d":"y_pred= g_clf.predict(x_test).ravel()\n\nfrom sklearn.metrics import roc_curve\nfpr_keras, tpr_keras, thresholds_keras = roc_curve(y_test, y_pred)\n\nfrom sklearn.metrics import auc\nauc_keras = auc(fpr_keras, tpr_keras)\n\nplt.figure(figsize=(8,6))\nplt.plot([0, 1], [0, 1], 'k--')\nplt.plot(fpr_keras, tpr_keras, label='gaussian (area = {:.3f})'.format(auc_keras))\nplt.xlabel('False positive rate')\nplt.ylabel('True positive rate')\nplt.title('ROC curve')\nplt.legend(loc='best')\nplt.show()","b941f584":"models = pd.DataFrame({\n    'Model': ['Logistic','KNN', 'SVC',  'Decision Tree Classifier',\n             'Random Forest Classifier',  'Gaussian'],\n    'Score': [ log_acc,k_acc, s_acc, d_acc, r_acc, g_acc]\n})\n\nmodels.sort_values(by = 'Score', ascending = False)","2dc6a305":"plt.figure(figsize=(10,6))\nsns.barplot(x='Model',y='Score',data=models)\nplt.show()","f40b0865":"x1 = df.drop('salary',axis=1)\ny1 = df['salary']","21d90ef9":"x1 = x1.values\ny1 = y1.values","2c080316":"split = int(0.9*x1.shape[0])\nprint(split)\n\nx_train1 = x1[:split,:]\ny_train1 = y1[:split]\n\nx_test1 = x1[split:,:]\ny_test1 = y1[split:]\n\nprint(x_train1.shape,y_train1.shape)\nprint(x_test1.shape,y_test1.shape)","c8aaf1df":"x_mean1 = x_train1.mean(axis=0)\nx_std1 = x_train1.std(axis=0)\n\nx_train1 = (x_train1-x_mean1)\/x_std1\n\nx_test1 = (x_test1-x_mean1)\/x_std1","1e2aba89":"from sklearn.linear_model import LinearRegression\nfrom sklearn.tree import DecisionTreeRegressor\nfrom sklearn.ensemble import RandomForestRegressor\nfrom sklearn.neighbors import KNeighborsRegressor\nfrom xgboost import XGBRegressor\nfrom sklearn.metrics import r2_score","50901a40":"k_reg = KNeighborsRegressor()\nk_reg.fit(x_train1,y_train1)\n\nk_acc = r2_score(y_test1,k_reg.predict(x_test1))\n\nprint(\"Train accuracy:\", (k_reg.score(x_train1,y_train1))*100)\nprint(\"Test accuracy:\", (k_reg.score(x_test1,y_test1))*100)","faefa9db":"calculation = pd.DataFrame(np.c_[y_test1,k_reg.predict(x_test1)], columns = [\"Original Salary\",\"PredictSalary\"])\ncalculation.head(5)","d82c52fb":"plt.figure(figsize=(10,5))\nsns.histplot(y_test1, color=\"red\", kde=True, stat=\"density\", linewidth=0)\nsns.histplot(k_reg.predict(x_test1), color=\"blue\", kde=True, stat=\"density\", linewidth=0)\nplt.show()","a09dbe46":"l_reg = LinearRegression()\nl_reg.fit(x_train1,y_train1)\n\nl_acc = r2_score(y_test1,l_reg.predict(x_test1))\n\nprint(\"Train accuracy:\", (l_reg.score(x_train1,y_train1))*100)\nprint(\"Test accuracy:\", (l_reg.score(x_test1,y_test1))*100)","e1ad780f":"calculation = pd.DataFrame(np.c_[y_test1,l_reg.predict(x_test1)], columns = [\"Original Salary\",\"PredictSalary\"])\ncalculation.head(5)","a6b6ec1e":"plt.figure(figsize=(10,5))\nsns.histplot(y_test1, color=\"red\", kde=True, stat=\"density\", linewidth=0)\nsns.histplot(l_reg.predict(x_test1), color=\"blue\", kde=True, stat=\"density\", linewidth=0)\nplt.show()","9d063065":"d_reg = DecisionTreeRegressor()\nd_reg.fit(x_train1,y_train1)\n\nd_acc = r2_score(y_test1,d_reg.predict(x_test1))\n\nprint(\"Train accuracy:\", (d_reg.score(x_train1,y_train1))*100)\nprint(\"Test accuracy:\", (d_reg.score(x_test1,y_test1))*100)","e75626d2":"calculation = pd.DataFrame(np.c_[y_test1,d_reg.predict(x_test1)], columns = [\"Original Salary\",\"PredictSalary\"])\ncalculation.head(5)","7e2e6b66":"plt.figure(figsize=(10,5))\nsns.histplot(y_test1, color=\"red\", kde=True, stat=\"density\", linewidth=0)\nsns.histplot(d_reg.predict(x_test1), color=\"blue\", kde=True, stat=\"density\", linewidth=0)\nplt.show()","4cdda56a":"r_reg = RandomForestRegressor()\nr_reg.fit(x_train1,y_train1)\n\nr_acc = r2_score(y_test1,r_reg.predict(x_test1))\n\nprint(\"Training accuracy:\",(r_reg.score(x_train1,y_train1))*100)\nprint(\"Test accuracy:\",(r_reg.score(x_test1,y_test1))*100)","6e3f9f70":"calculation = pd.DataFrame(np.c_[y_test1,r_reg.predict(x_test1)], columns = [\"Original Salary\",\"PredictSalary\"])\ncalculation.head(5)","21529946":"plt.figure(figsize=(10,5))\nsns.histplot(y_test1, color=\"red\", kde=True, stat=\"density\", linewidth=0)\nsns.histplot(r_reg.predict(x_test1), color=\"blue\", kde=True, stat=\"density\", linewidth=0)\nplt.show()","cc75e226":"x_reg = XGBRegressor()\nx_reg.fit(x_train1,y_train1)\n\nx_acc = r2_score(y_test1,x_reg.predict(x_test1))\n\nprint(\"Training accuracy:\",(x_reg.score(x_train1,y_train1))*100)\nprint(\"Test accuracy:\",(x_reg.score(x_test1,y_test1))*100)","b63956f0":"calculation = pd.DataFrame(np.c_[y_test1,x_reg.predict(x_test1)], columns = [\"Original Salary\",\"PredictSalary\"])\ncalculation.head(5)","07692340":"plt.figure(figsize=(10,5))\nsns.histplot(y_test1, color=\"red\", kde=True, stat=\"density\", linewidth=0)\nsns.histplot(x_reg.predict(x_test1), color=\"blue\", kde=True, stat=\"density\", linewidth=0)\nplt.show()","d3ef9028":"models = pd.DataFrame({\n    'Models': ['Knn','Linear','DecisionTree','RandomForest','XGB'],\n    'Scores': [k_acc,l_acc,d_acc,r_acc,x_acc]\n\n})\n\nmodels.sort_values(by = 'Scores',ascending = False)","01c6e02f":"plt.figure(figsize=(10,6))\nsns.barplot(x='Models',y='Scores',data=models)\nplt.show()","e57ec9d7":"# Data Visualization","004e417a":"# Descriptive Statistics","c6699dde":"# <center> <div class=\"alert alert-block alert-info\">  <span style=\"color:crimson;\"> Data Description <\/center>\n    \n* **sl_no:** Serial Number\n* **gender:** Gender- Male='M',Female='F'\n* **ssc_p:** Secondary Education percentage- 10th Grade\n* **ssc_b:** Board of Education- Central\/ Others\n* **hsc_p:** Higher Secondary Education percentage- 12th Grade\n* **hsc_b:** Board of Education- Central\/ Others\n* **hsc_s:** Specialization in Higher Secondary Education\n* **degree_p:** Degree Percentage\n* **degree_t:** Under Graduation(Degree type)- Field of degree education\n* **workex:** Work Experience\n* **etest_p:** Employability test percentage ( conducted by college)\n* **specialisation:** Post Graduation(MBA)- Specialization\n* **mba_p:** MBA percentage\n* **status:** Status of placement- Placed\/Not placed\n* **salary:** Salary offered by corporate to candidates","c6a3a0da":"# <center> <div class=\"alert alert-block alert-info\">  <span style=\"color:crimson;\"> Campus Recruitment <\/center>\n    \n![image.png](attachment:ee70d0d8-42dd-43f2-bc30-612cd9936133.png)","040e8867":"# <center> <div class=\"alert alert-block alert-info\">  <span style=\"color:crimson;\"> Models <\/center>","9dcb4438":"# Load Packages","ec245b61":"# <center> <div class=\"alert alert-block alert-info\">  <span style=\"color:crimson;\"> Data Preprocessing <\/center>"}}