{"cell_type":{"9ca80f35":"code","8546a1c5":"code","9cc0e675":"code","d04479c5":"code","5a7ff13b":"code","49f6214a":"code","f0ae901f":"code","505ff193":"code","dc39acd6":"code","811ca417":"code","4d96e6f5":"code","3d449ce1":"code","782d6f8d":"code","b9903186":"code","6d50beba":"code","9bdd833c":"code","c5f4c6f0":"code","5d9a8ba4":"code","06297cd0":"code","5e770eb5":"code","1928fac9":"code","09e47dc9":"code","2df68d93":"code","a4ec9e88":"code","6ba9ebbb":"code","a1bd366e":"code","469ee279":"code","28559841":"code","0117c130":"code","aa173c0e":"code","f59b69cb":"code","ad93ac43":"code","52b2c298":"code","a6adfe93":"code","55757acc":"code","4ea272e4":"code","86d7a0a7":"code","6d859f8f":"code","397a0020":"code","7b1047c1":"code","d9217ea8":"code","999923a1":"code","8f312c54":"code","1b4f29fd":"code","cdcba5ce":"markdown","258ececc":"markdown","2fd162c6":"markdown","02eded9c":"markdown","b7423b39":"markdown","542404a5":"markdown","fe9156ac":"markdown","16bef0b9":"markdown","89bbbbaa":"markdown","063db0f2":"markdown","7b8fce10":"markdown","358b5a54":"markdown","6877a715":"markdown","9f873e81":"markdown","5151bd44":"markdown","023ec67f":"markdown","116495cc":"markdown","0c5000b6":"markdown","935d33d1":"markdown","782f0dbb":"markdown","5365a0bc":"markdown","898e7117":"markdown","f6032879":"markdown","5f7c3f4b":"markdown","802b8b14":"markdown","bbbf346e":"markdown","43ddaad9":"markdown","4e8709b2":"markdown","a5513c84":"markdown","8c5235fb":"markdown","1990d6e8":"markdown","e44e12ec":"markdown","3a5dca35":"markdown","f970edab":"markdown","e4f1ac73":"markdown","5cef48c6":"markdown","ea383bc5":"markdown","a5a558a6":"markdown","2e475939":"markdown","0a61eab8":"markdown","1eed4710":"markdown","4e7a7003":"markdown"},"source":{"9ca80f35":"import os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\nimport scipy as sp\nimport statistics \nfrom pandas import DataFrame, Series\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\nplt.style.use('ggplot')\n%matplotlib inline\n\nfrom sklearn.metrics import roc_auc_score\nfrom sklearn.model_selection import StratifiedKFold\nfrom sklearn.feature_extraction.text import TfidfVectorizer\nfrom category_encoders import OrdinalEncoder, OneHotEncoder, TargetEncoder\nfrom tqdm import tqdm_notebook as tqdm\nfrom sklearn.preprocessing import quantile_transform\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.preprocessing import LabelBinarizer\nfrom sklearn.preprocessing import LabelEncoder \nfrom datetime import datetime\n\nfrom sklearn.tree import ExtraTreeClassifier\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.ensemble.weight_boosting import AdaBoostClassifier\nfrom sklearn.ensemble.gradient_boosting import GradientBoostingClassifier\nfrom sklearn.ensemble.bagging import BaggingClassifier\nfrom sklearn.ensemble.forest import ExtraTreesClassifier\nfrom sklearn.ensemble.forest import RandomForestClassifier\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.linear_model.stochastic_gradient import SGDClassifier\nimport lightgbm as lgb\nfrom lightgbm import LGBMClassifier\n\nimport seaborn as sns\nfrom sklearn.decomposition import TruncatedSVD\n\nimport category_encoders as ce\nfrom sklearn.metrics import accuracy_score, precision_score, recall_score, confusion_matrix, precision_recall_curve\n\nfrom scipy.sparse import csr_matrix, csc_matrix, coo_matrix, lil_matrix","8546a1c5":"df_train = pd.read_csv('\/kaggle\/input\/homework-for-students3\/train.csv', index_col=0, parse_dates=['issue_d'])\ndf_test =pd.read_csv('\/kaggle\/input\/homework-for-students3\/test.csv', index_col=0, parse_dates=['issue_d'])\n\nyear = df_train.issue_d.dt.year\ndf_train  = df_train[year >= 2014]\ncolumns = df_train.columns\n\ny_train = df_train.loan_condition\nX_train = df_train.drop(['loan_condition'], axis = 1)\nX_test  = df_test\n\ndel df_train\ndel df_test","9cc0e675":"drop_col = ['issue_d','earliest_cr_line']\nX_train = X_train.drop(columns=drop_col)\nX_test  = X_test.drop(columns=drop_col)","d04479c5":"def capping(series, min_threshold, max_threshold):\n    series_filtered = series.copy()\n    index_outlier_up = [series_filtered  >= max_threshold]\n    index_outlier_low = [series_filtered <= min_threshold]\n    series_filtered.iloc[index_outlier_up] = max_threshold\n    series_filtered.iloc[index_outlier_low] = min_threshold\n    return series_filtered","5a7ff13b":"X_all = pd.concat([X_train,X_test],axis =0)\n\nX_all['Asset'] = X_all['tot_cur_bal'] + X_all['annual_inc']*2\n\nX_train = X_all.iloc[:X_train.shape[0],:]\nX_test = X_all.iloc[X_train.shape[0]:,:]","49f6214a":"col = 'loan_amnt'\n# cap\nmax_threshold = 40000\nX_train[col] = capping(X_train[col],0, max_threshold)\nX_test[col]= capping(X_test[col],0, max_threshold)\n\n# check histgram\nplt.figure(figsize=[7,7])\nX_train[col].hist(density=True, alpha=0.5, bins=20)\nX_test[col].hist(density=True, alpha=0.5, bins=20)\nplt.xlabel(col)\nplt.ylabel('density')\nplt.show()","f0ae901f":"col = 'installment'\n# cap\nmax_threshold = 1600\nX_train[col] = capping(X_train[col],0, max_threshold)\nX_test[col]= capping(X_test[col],0, max_threshold)\n\n# apply log\nX_train[col] = X_train[col].apply(np.log1p)\nX_test[col] = X_test[col].apply(np.log1p)\n\n# check histgram\nplt.figure(figsize=[7,7])\nX_train[col].hist(density=True, alpha=0.5, bins=20)\nX_test[col].hist(density=True, alpha=0.5, bins=20)\nplt.xlabel(col)\nplt.ylabel('density')\nplt.show()","505ff193":"col = 'grade'\nmapping_dict = {\n    \"grade\": {\n        \"A\": 0,\"B\": 1,\"C\": 2,\"D\": 3,\"E\": 4,\"F\": 5,\"G\": 6\n        }\n}\n\nX_train = X_train.replace(mapping_dict)\nX_test = X_test.replace(mapping_dict)\nmapping_col = ['grade']\nX_train[mapping_col] = X_train[mapping_col].fillna(-1)\nX_test[mapping_col] = X_test[mapping_col].fillna(-1)\nX_train[mapping_col] = X_train[mapping_col].astype(int)\nX_test[mapping_col] = X_test[mapping_col].astype(int)\n\n\n# check histgram\nplt.figure(figsize=[7,7])\nX_train[col].hist(density=True, alpha=0.5, bins=20)\nX_test[col].hist(density=True, alpha=0.5, bins=20)\nplt.xlabel(col)\nplt.ylabel('density')\nplt.show()","dc39acd6":"col = 'sub_grade'\n\nmapping_dict = {\n    \"sub_grade\": {\n        \"A1\": 0,\"A2\": 1,\"A3\": 2,\"A4\": 3,\"A5\": 4,\n        \"B1\": 5,\"B2\": 6,\"B3\": 7,\"B4\": 8,\"B5\": 9,\n        \"C1\": 10,\"C2\": 11,\"C3\": 12,\"C4\": 13,\"C5\": 14,\n        \"D1\": 15,\"D2\": 16,\"D3\": 17,\"D4\": 18,\"D5\": 19,\n        \"E1\": 20,\"E2\": 21,\"E3\": 22,\"E4\": 23,\"E5\": 24,\n        \"F1\": 25,\"F2\": 26,\"F3\": 27,\"F4\": 28,\"F5\": 29,\n        \"G1\": 30,\"G2\": 31,\"G3\": 32,\"G4\": 33,\"G5\": 34\n        }\n}\nX_train = X_train.replace(mapping_dict)\nX_test = X_test.replace(mapping_dict)\nmapping_col = ['sub_grade']\nX_train[mapping_col] = X_train[mapping_col].fillna(-1)\nX_test[mapping_col] = X_test[mapping_col].fillna(-1)\nX_train[mapping_col] = X_train[mapping_col].astype(int)\nX_test[mapping_col] = X_test[mapping_col].astype(int)\n\n# check histgram\nplt.figure(figsize=[7,7])\nX_train[col].hist(density=True, alpha=0.5, bins=20)\nX_test[col].hist(density=True, alpha=0.5, bins=20)\nplt.xlabel(col)\nplt.ylabel('density')\nplt.show()\n","811ca417":"\ncol    = 'emp_length'\ntarget = 'loan_condition'\n\nX_temp = pd.concat([X_train, y_train], axis=1)\n# X_test\u306fX_train\u3067\u30a8\u30f3\u30b3\u30fc\u30c7\u30a3\u30f3\u30b0\u3059\u308b\nsummary = X_temp.groupby([col])[target].mean()\nX_test[col] = X_test[col].map(summary) \n    \nenc_train = Series(np.zeros(len(X_train)), index=X_train.index)\n    \nskf = StratifiedKFold(n_splits=5, random_state=71, shuffle=True)\nfor i, (train_ix, val_ix) in enumerate((skf.split(X_train, y_train))):\n    X_train_, _ = X_temp.iloc[train_ix], y_train.iloc[train_ix]\n    X_val, _ = X_temp.iloc[val_ix], y_train.iloc[val_ix]\n\n    summary = X_train_.groupby([col])[target].mean()\n    enc_train.iloc[val_ix] = X_val[col].map(summary)\n\nX_train[col] = enc_train\n\n# check histgram\nplt.figure(figsize=[7,7])\nX_train[col].hist(density=True, alpha=0.5, bins=20)\nX_test[col].hist(density=True, alpha=0.5, bins=20)\nplt.xlabel(col)\nplt.ylabel('density')\nplt.show()","4d96e6f5":"col    = 'home_ownership'\ntarget = 'loan_condition'\n\nX_temp = pd.concat([X_train, y_train], axis=1)\n# X_test\u306fX_train\u3067\u30a8\u30f3\u30b3\u30fc\u30c7\u30a3\u30f3\u30b0\u3059\u308b\nsummary = X_temp.groupby([col])[target].mean()\nX_test[col] = X_test[col].map(summary) \n    \nenc_train = Series(np.zeros(len(X_train)), index=X_train.index)\n    \nskf = StratifiedKFold(n_splits=5, random_state=71, shuffle=True)\nfor i, (train_ix, val_ix) in enumerate((skf.split(X_train, y_train))):\n    X_train_, _ = X_temp.iloc[train_ix], y_train.iloc[train_ix]\n    X_val, _ = X_temp.iloc[val_ix], y_train.iloc[val_ix]\n\n    summary = X_train_.groupby([col])[target].mean()\n    enc_train.iloc[val_ix] = X_val[col].map(summary)\n\nX_train[col] = enc_train\n\n# check histgram\nplt.figure(figsize=[7,7])\nX_train[col].hist(density=True, alpha=0.5, bins=20)\nX_test[col].hist(density=True, alpha=0.5, bins=20)\nplt.xlabel(col)\nplt.ylabel('density')\nplt.show()","3d449ce1":"col = 'annual_inc'\n# cap\nmax_threshold = 250000\nX_train[col] = capping(X_train[col],0, max_threshold)\nX_test[col]= capping(X_test[col],0, max_threshold)\n\n# apply log\nX_train[col] = X_train[col].apply(np.log1p)\nX_test[col] = X_test[col].apply(np.log1p)\n\n# check histgram\nplt.figure(figsize=[7,7])\nX_train[col].hist(density=True, alpha=0.5, bins=20)\nX_test[col].hist(density=True, alpha=0.5, bins=20)\nplt.xlabel(col)\nplt.ylabel('density')\nplt.show()","782d6f8d":"col    = 'purpose'\ntarget = 'loan_condition'\n\nX_temp = pd.concat([X_train, y_train], axis=1)\n# X_test\u306fX_train\u3067\u30a8\u30f3\u30b3\u30fc\u30c7\u30a3\u30f3\u30b0\u3059\u308b\nsummary = X_temp.groupby([col])[target].mean()\nX_test[col] = X_test[col].map(summary) \n    \nenc_train = Series(np.zeros(len(X_train)), index=X_train.index)\n    \nskf = StratifiedKFold(n_splits=5, random_state=71, shuffle=True)\nfor i, (train_ix, val_ix) in enumerate((skf.split(X_train, y_train))):\n    X_train_, _ = X_temp.iloc[train_ix], y_train.iloc[train_ix]\n    X_val, _ = X_temp.iloc[val_ix], y_train.iloc[val_ix]\n\n    summary = X_train_.groupby([col])[target].mean()\n    enc_train.iloc[val_ix] = X_val[col].map(summary)\n\nX_train[col] = enc_train\n\n# check histgram\nplt.figure(figsize=[7,7])\nX_train[col].hist(density=True, alpha=0.5, bins=20)\nX_test[col].hist(density=True, alpha=0.5, bins=20)\nplt.xlabel(col)\nplt.ylabel('density')\nplt.show()","b9903186":"col    = 'title'\ntarget = 'loan_condition'\n\nX_temp = pd.concat([X_train, y_train], axis=1)\n# X_test\u306fX_train\u3067\u30a8\u30f3\u30b3\u30fc\u30c7\u30a3\u30f3\u30b0\u3059\u308b\nsummary = X_temp.groupby([col])[target].mean()\nX_test[col] = X_test[col].map(summary) \n    \nenc_train = Series(np.zeros(len(X_train)), index=X_train.index)\n    \nskf = StratifiedKFold(n_splits=5, random_state=71, shuffle=True)\nfor i, (train_ix, val_ix) in enumerate((skf.split(X_train, y_train))):\n    X_train_, _ = X_temp.iloc[train_ix], y_train.iloc[train_ix]\n    X_val, _ = X_temp.iloc[val_ix], y_train.iloc[val_ix]\n\n    summary = X_train_.groupby([col])[target].mean()\n    enc_train.iloc[val_ix] = X_val[col].map(summary)\n\nX_train[col] = enc_train\n\n# check histgram\nplt.figure(figsize=[7,7])\nX_train[col].hist(density=True, alpha=0.5, bins=20)\nX_test[col].hist(density=True, alpha=0.5, bins=20)\nplt.xlabel(col)\nplt.ylabel('density')\nplt.show()","6d50beba":"col    = 'zip_code'\ntarget = 'loan_condition'\n\nX_train[col] = X_train[col].str[0:2]\nX_test[col] = X_test[col].str[0:2]\n\nX_temp = pd.concat([X_train, y_train], axis=1)\n# X_test\u306fX_train\u3067\u30a8\u30f3\u30b3\u30fc\u30c7\u30a3\u30f3\u30b0\u3059\u308b\nsummary = X_temp.groupby([col])[target].mean()\nX_test[col] = X_test[col].map(summary) \n    \nenc_train = Series(np.zeros(len(X_train)), index=X_train.index)\n    \nskf = StratifiedKFold(n_splits=5, random_state=71, shuffle=True)\nfor i, (train_ix, val_ix) in enumerate((skf.split(X_train, y_train))):\n    X_train_, _ = X_temp.iloc[train_ix], y_train.iloc[train_ix]\n    X_val, _ = X_temp.iloc[val_ix], y_train.iloc[val_ix]\n\n    summary = X_train_.groupby([col])[target].mean()\n    enc_train.iloc[val_ix] = X_val[col].map(summary)\n\nX_train[col] = enc_train\n\n# cap\nmax_threshold = 0.3\nmin_threshold = 0.1\nX_train[col] = capping(X_train[col], min_threshold , max_threshold)\nX_test[col]= capping(X_test[col], min_threshold , max_threshold)\n\n\n# check histgram\nplt.figure(figsize=[7,7])\nX_train[col].hist(density=True, alpha=0.5, bins=20)\nX_test[col].hist(density=True, alpha=0.5, bins=20)\nplt.xlabel(col)\nplt.ylabel('density')\nplt.show()\n","9bdd833c":"col    = 'addr_state'\ntarget = 'loan_condition'\n\nX_temp = pd.concat([X_train, y_train], axis=1)\n# X_test\u306fX_train\u3067\u30a8\u30f3\u30b3\u30fc\u30c7\u30a3\u30f3\u30b0\u3059\u308b\nsummary = X_temp.groupby([col])[target].mean()\nX_test[col] = X_test[col].map(summary) \n    \nenc_train = Series(np.zeros(len(X_train)), index=X_train.index)\n    \nskf = StratifiedKFold(n_splits=5, random_state=71, shuffle=True)\nfor i, (train_ix, val_ix) in enumerate((skf.split(X_train, y_train))):\n    X_train_, _ = X_temp.iloc[train_ix], y_train.iloc[train_ix]\n    X_val, _ = X_temp.iloc[val_ix], y_train.iloc[val_ix]\n\n    summary = X_train_.groupby([col])[target].mean()\n    enc_train.iloc[val_ix] = X_val[col].map(summary)\n\nX_train[col] = enc_train\n\n# cap\nmax_threshold = 0.25\nmin_threshold = 0.12\nX_train[col] = capping(X_train[col], min_threshold , max_threshold)\nX_test[col]= capping(X_test[col], min_threshold , max_threshold)\n\n# check histgram\nplt.figure(figsize=[7,7])\nX_train[col].hist(density=True, alpha=0.5, bins=20)\nX_test[col].hist(density=True, alpha=0.5, bins=20)\nplt.xlabel(col)\nplt.ylabel('density')\nplt.show()","c5f4c6f0":"col = 'dti'\n# cap\nmax_threshold = 40\nX_train[col] = capping(X_train[col],0, max_threshold)\nX_test[col]= capping(X_test[col],0, max_threshold)\n\n# apply log\n#X_train[col] = X_train[col].apply(np.log1p)\n#X_test[col] = X_test[col].apply(np.log1p)\n\n# check histgram\nplt.figure(figsize=[7,7])\nX_train[col].hist(density=True, alpha=0.5, bins=20)\nX_test[col].hist(density=True, alpha=0.5, bins=20)\nplt.xlabel(col)\nplt.ylabel('density')\nplt.show()","5d9a8ba4":"col = 'delinq_2yrs'\n# cap\nmax_threshold = 3\nX_train[col] = capping(X_train[col],0, max_threshold)\nX_test[col]= capping(X_test[col],0, max_threshold)\n\n\n\n# check histgram\nplt.figure(figsize=[7,7])\nX_train[col].hist(density=True, alpha=0.5, bins=20)\nX_test[col].hist(density=True, alpha=0.5, bins=20)\nplt.xlabel(col)\nplt.ylabel('density')\nplt.show()","06297cd0":"col = 'inq_last_6mths'\n# cap\nmax_threshold = 6\nX_train[col] = capping(X_train[col],0, max_threshold)\nX_test[col]= capping(X_test[col],0, max_threshold)\n\n# apply log\n#X_train[col] = X_train[col].apply(np.log1p)\n#X_test[col] = X_test[col].apply(np.log1p)\n\n# check histgram\nplt.figure(figsize=[7,7])\nX_train[col].hist(density=True, alpha=0.5, bins=20)\nX_test[col].hist(density=True, alpha=0.5, bins=20)\nplt.xlabel(col)\nplt.ylabel('density')\nplt.show()\n\n#1\u3064\u3060\u3051\u3042\u308btest\u306emissing\u30920\u3067\u88dc\u5b8c\nX_test[col].fillna(0, inplace=True)","5e770eb5":"col = 'mths_since_last_delinq'\n# cap\nmax_threshold = 80\nX_train[col] = capping(X_train[col],0, max_threshold)\nX_test[col]= capping(X_test[col],0, max_threshold)\n\n# check histgram\nplt.figure(figsize=[7,7])\nX_train[col].hist(density=True, alpha=0.5, bins=20)\nX_test[col].hist(density=True, alpha=0.5, bins=20)\nplt.xlabel(col)\nplt.ylabel('density')\nplt.show()","1928fac9":"col = 'mths_since_last_record'\n# cap\nmax_threshold = 130\nX_train[col] = capping(X_train[col],0, max_threshold)\nX_test[col]= capping(X_test[col],0, max_threshold)\n\n# apply log\n#X_train[col] = X_train[col].apply(np.log1p)\n#X_test[col] = X_test[col].apply(np.log1p)\n\n# check histgram\nplt.figure(figsize=[7,7])\nX_train[col].hist(density=True, alpha=0.5, bins=20)\nX_test[col].hist(density=True, alpha=0.5, bins=20)\nplt.xlabel(col)\nplt.ylabel('density')\nplt.show()","09e47dc9":"col = 'open_acc'\n# cap\nmax_threshold = 40\nX_train[col] = capping(X_train[col],0, max_threshold)\nX_test[col]= capping(X_test[col],0, max_threshold)\n\n# apply log\nX_train[col] = X_train[col].apply(np.log1p)\nX_test[col] = X_test[col].apply(np.log1p)\n\n# check histgram\nplt.figure(figsize=[7,7])\nX_train[col].hist(density=True, alpha=0.5, bins=20)\nX_test[col].hist(density=True, alpha=0.5, bins=20)\nplt.xlabel(col)\nplt.ylabel('density')\nplt.show()","2df68d93":"col = 'pub_rec'\n# cap\nmax_threshold = 1\nX_train[col] = capping(X_train[col],0, max_threshold)\nX_test[col]= capping(X_test[col],0, max_threshold)\n\n# check histgram\nplt.figure(figsize=[7,7])\nX_train[col].hist(density=True, alpha=0.5, bins=20)\nX_test[col].hist(density=True, alpha=0.5, bins=20)\nplt.xlabel(col)\nplt.ylabel('density')\nplt.show()","a4ec9e88":"col = 'revol_bal'\n# cap\nmax_threshold = 60000\nX_train[col] = capping(X_train[col],0, max_threshold)\nX_test[col]= capping(X_test[col],0, max_threshold)\n\n# apply log\nX_train[col] = X_train[col].apply(np.log1p)\nX_test[col] = X_test[col].apply(np.log1p)\n\n# check histgram\nplt.figure(figsize=[7,7])\nX_train[col].hist(density=True, alpha=0.5, bins=20)\nX_test[col].hist(density=True, alpha=0.5, bins=20)\nplt.xlabel(col)\nplt.ylabel('density')\nplt.show()","6ba9ebbb":"col = 'revol_util'\n# cap\nmax_threshold = 100\nX_train[col] = capping(X_train[col],0, max_threshold)\nX_test[col]= capping(X_test[col],0, max_threshold)\n\n# check histgram\nplt.figure(figsize=[7,7])\nX_train[col].hist(density=True, alpha=0.5, bins=20)\nX_test[col].hist(density=True, alpha=0.5, bins=20)\nplt.xlabel(col)\nplt.ylabel('density')\nplt.show()","a1bd366e":"col = 'total_acc'\n# cap\nmax_threshold = 75\nX_train[col] = capping(X_train[col],0, max_threshold)\nX_test[col]= capping(X_test[col],0, max_threshold)\n\n# apply log\nX_train[col] = X_train[col].apply(np.log1p)\nX_test[col] = X_test[col].apply(np.log1p)\n\n# check histgram\nplt.figure(figsize=[7,7])\nX_train[col].hist(density=True, alpha=0.5, bins=20)\nX_test[col].hist(density=True, alpha=0.5, bins=20)\nplt.xlabel(col)\nplt.ylabel('density')\nplt.show()","469ee279":"col = 'initial_list_status'\n\nordinalcat_feature = ['initial_list_status']\noe = OrdinalEncoder(cols=ordinalcat_feature)\n\nX_train = oe.fit_transform(X_train)\nX_test = oe.transform(X_test)\n\n# check histgram\nplt.figure(figsize=[7,7])\nX_train[col].hist(density=True, alpha=0.5, bins=20)\nX_test[col].hist(density=True, alpha=0.5, bins=20)\nplt.xlabel(col)\nplt.ylabel('density')\nplt.show()","28559841":"col = 'collections_12_mths_ex_med'\n# cap\nmax_threshold = 1\nX_train[col] = capping(X_train[col],0, max_threshold)\nX_test[col]= capping(X_test[col],0, max_threshold)\n\n# apply log\n#X_train[col] = X_train[col].apply(np.log1p)\n#X_test[col] = X_test[col].apply(np.log1p)\n\n# check histgram\nplt.figure(figsize=[7,7])\nX_train[col].hist(density=True, alpha=0.5, bins=20)\nX_test[col].hist(density=True, alpha=0.5, bins=20)\nplt.xlabel(col)\nplt.ylabel('density')\nplt.show()","0117c130":"col = 'mths_since_last_major_derog'\n# cap\nmax_threshold = 100\nX_train[col] = capping(X_train[col],0, max_threshold)\nX_test[col]= capping(X_test[col],0, max_threshold)\n\n# check histgram\nplt.figure(figsize=[7,7])\nX_train[col].hist(density=True, alpha=0.5, bins=20)\nX_test[col].hist(density=True, alpha=0.5, bins=20)\nplt.xlabel(col)\nplt.ylabel('density')\nplt.show()","aa173c0e":"col = 'application_type'\n\nordinalcat_feature = ['application_type']\noe = OrdinalEncoder(cols=ordinalcat_feature)\n\nX_train = oe.fit_transform(X_train)\nX_test = oe.transform(X_test)\n\n# check histgram\nplt.figure(figsize=[7,7])\nX_train[col].hist(density=True, alpha=0.5, bins=20)\nX_test[col].hist(density=True, alpha=0.5, bins=20)\nplt.xlabel(col)\nplt.ylabel('density')\nplt.show()","f59b69cb":"# delete later\ncol = acc_now_delinq\n\n# check histgram\nplt.figure(figsize=[7,7])\nX_train[col].hist(density=True, alpha=0.5, bins=20)\nX_test[col].hist(density=True, alpha=0.5, bins=20)\nplt.xlabel(col)\nplt.ylabel('density')\nplt.show()","ad93ac43":"col = 'tot_coll_amt'\n# cap\nmax_threshold = 1\nX_train[col] = capping(X_train[col],0, max_threshold)\nX_test[col]= capping(X_test[col],0, max_threshold)\n\n# apply log\n#X_train[col] = X_train[col].apply(np.log1p)\n#X_test[col] = X_test[col].apply(np.log1p)\n\n# check histgram\nplt.figure(figsize=[7,7])\nX_train[col].hist(density=True, alpha=0.5, bins=20)\nX_test[col].hist(density=True, alpha=0.5, bins=20)\nplt.xlabel(col)\nplt.ylabel('density')\nplt.show()","52b2c298":"col = 'tot_cur_bal'\n# cap\nmax_threshold = 800000\nX_train[col] = capping(X_train[col],0, max_threshold)\nX_test[col]= capping(X_test[col],0, max_threshold)\n\n# apply log\nX_train[col] = X_train[col].apply(np.log1p)\nX_test[col] = X_test[col].apply(np.log1p)\n\n# check histgram\nplt.figure(figsize=[7,7])\nX_train[col].hist(density=True, alpha=0.5, bins=20)\nX_test[col].hist(density=True, alpha=0.5, bins=20)\nplt.xlabel(col)\nplt.ylabel('density')\nplt.show()","a6adfe93":"col = 'Asset'\n# cap\nmax_threshold = 1000000\nX_train[col] = capping(X_train[col],0, max_threshold)\nX_test[col]= capping(X_test[col],0, max_threshold)\n\n# apply log\nX_train[col] = X_train[col].apply(np.log1p)\nX_test[col] = X_test[col].apply(np.log1p)\n\n# check histgram\nplt.figure(figsize=[7,7])\nX_train[col].hist(density=True, alpha=0.5, bins=20)\nX_test[col].hist(density=True, alpha=0.5, bins=20)\nplt.xlabel(col)\nplt.ylabel('density')\nplt.show()","55757acc":"col    = 'emp_title'\ncol4   = 'emp_title4'\ntarget = 'loan_condition'\n\nX_train[col4] = X_train[col].str[0:4]\nX_test[col4] = X_test[col].str[0:4]\n\nX_temp = pd.concat([X_train, y_train], axis=1)\n# X_test\u306fX_train\u3067\u30a8\u30f3\u30b3\u30fc\u30c7\u30a3\u30f3\u30b0\u3059\u308b\nsummary = X_temp.groupby([col4])[target].mean()\nX_test[col4] = X_test[col4].map(summary) \n    \nenc_train = Series(np.zeros(len(X_train)), index=X_train.index)\n    \nskf = StratifiedKFold(n_splits=5, random_state=71, shuffle=True)\nfor i, (train_ix, val_ix) in enumerate((skf.split(X_train, y_train))):\n    X_train_, _ = X_temp.iloc[train_ix], y_train.iloc[train_ix]\n    X_val, _ = X_temp.iloc[val_ix], y_train.iloc[val_ix]\n\n    summary = X_train_.groupby([col4])[target].mean()\n    enc_train.iloc[val_ix] = X_val[col4].map(summary)\n\nX_train[col4] = enc_train\n\n# cap\nmax_threshold = 0.5\nmin_threshold = 0\nX_train[col4] = capping(X_train[col4],min_threshold, max_threshold)\nX_test[col4]= capping(X_test[col4],min_threshold, max_threshold)\n\n# check histgram\nplt.figure(figsize=[7,7])\nX_train[col4].hist(density=True, alpha=0.5, bins=20)\nX_test[col4].hist(density=True, alpha=0.5, bins=20)\nplt.xlabel(col4)\nplt.ylabel('density')\nplt.show()\n\n#-------------------------------------------------------------\ncol    = 'emp_title'\ntarget = 'loan_condition'\n\nX_temp = pd.concat([X_train, y_train], axis=1)\n# X_test\u306fX_train\u3067\u30a8\u30f3\u30b3\u30fc\u30c7\u30a3\u30f3\u30b0\u3059\u308b\nsummary = X_temp.groupby([col])[target].mean()\nX_test[col] = X_test[col].map(summary) \n    \nenc_train = Series(np.zeros(len(X_train)), index=X_train.index)\n    \nskf = StratifiedKFold(n_splits=5, random_state=71, shuffle=True)\nfor i, (train_ix, val_ix) in enumerate((skf.split(X_train, y_train))):\n    X_train_, _ = X_temp.iloc[train_ix], y_train.iloc[train_ix]\n    X_val, _ = X_temp.iloc[val_ix], y_train.iloc[val_ix]\n\n    summary = X_train_.groupby([col])[target].mean()\n    enc_train.iloc[val_ix] = X_val[col].map(summary)\n\nX_train[col] = enc_train\n\n# cap\nmax_threshold = 0.5\nmin_threshold = 0\nX_train[col] = capping(X_train[col],min_threshold, max_threshold)\nX_test[col]= capping(X_test[col],min_threshold, max_threshold)\n\n# check histgram\nplt.figure(figsize=[7,7])\nX_train[col].hist(density=True, alpha=0.5, bins=20)\nX_test[col].hist(density=True, alpha=0.5, bins=20)\nplt.xlabel(col)\nplt.ylabel('density')\nplt.show()","4ea272e4":"drop_col = ['title','acc_now_delinq','grade','installment']\nX_train = X_train.drop(columns=drop_col)\nX_test  = X_test.drop(columns=drop_col)","86d7a0a7":"X_train1 = X_train\nX_train2 = X_train\nX_train3 = X_train\nX_test1  = X_test\nX_test2  = X_test\nX_test3  = X_test","6d859f8f":"drop_col = ['emp_title']\nX_train1 = X_train1.drop(columns=drop_col)\nX_test1  = X_test1.drop(columns=drop_col)","397a0020":"drop_col = ['emp_title']\nX_train2 = X_train2.drop(columns=drop_col)\nX_test2  = X_test2.drop(columns=drop_col)","7b1047c1":"ratio_PCA = 0.95\nfrom sklearn.decomposition import PCA\n\nsequence_col = ['sub_grade'\n,'loan_amnt'\n,'annual_inc'\n,'dti'\n,'Asset']\n\nX_train_sequence = X_train2[sequence_col]\nX_test_sequence = X_test2[sequence_col]\n\nscaler = StandardScaler()\nscaler.fit(X_train_sequence)\nX_train_sequence[sequence_col] = scaler.transform(X_train_sequence[sequence_col])\nX_test_sequence[sequence_col] = scaler.transform(X_test_sequence[sequence_col])\n\nX_train_sequence.fillna(X_train_sequence.median(), inplace=True)\nX_test_sequence.fillna(X_test_sequence.median(), inplace=True)\n\npca = PCA(n_components=X_train_sequence.shape[1])\n#\u30e2\u30c7\u30eb\u306e\u30d1\u30e9\u30e1\u30fc\u30bf\u3092fit\u3057\u3066\u53d6\u5f97\u3057PCA\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3078\u683c\u7d0d\npca.fit(X_train_sequence)\nsorted_variance = sorted(pca.explained_variance_ratio_,reverse=True)\ncum_sum = np.cumsum(sorted_variance)\nratio = cum_sum \/ np.sum(sorted_variance)\ncol_num = len(ratio) - len(ratio[ratio>ratio_PCA]) +1\nif col_num >= X_train_sequence.shape[1]:\n    col_num = X_train_sequence.shape[1]-1\nsorted_variance = sorted(pca.explained_variance_ratio_,reverse=True)\n # \u7d2f\u7a4d\u5bc4\u4e0e\u7387\u304c90%\u4ee5\u4e0a\u306b\u306a\u308b\u3088\u3046\u306b\n\nnp.set_printoptions(suppress=True)\n# SVD\nsvd = TruncatedSVD(n_components=col_num, n_iter=7, random_state=42)\nsvd.fit(X_train_sequence)\n\nX_train_sequence = svd.transform(X_train_sequence)\nX_test_sequence  = svd.transform(X_test_sequence)\n\ncolumn_name = []\nfor c in range(0,col_num):\n    column_name.append('PCA' + str(c))\n\nX_train_sequence = pd.DataFrame(X_train_sequence,columns = column_name)\nX_test_sequence = pd.DataFrame(X_test_sequence,columns = column_name)\nX_train_sequence.index = X_train.index\nX_test_sequence.index = X_test.index\n\ndrop_col = sequence_col\nX_train2 = X_train2.drop(columns=drop_col)\nX_test2  = X_test2.drop(columns=drop_col)\n\nX_train2 = pd.concat([X_train2, X_train_sequence], axis=1)\nX_test2 = pd.concat([X_test2, X_test_sequence], axis=1)","d9217ea8":"drop_col = ['emp_title4']\nX_train3 = X_train3.drop(columns=drop_col)\nX_test3  = X_test3.drop(columns=drop_col)","999923a1":"# create model and prediction \nclf = LGBMClassifier(boosting_type = 'gbdt',class_weight='balanced')\nclf.fit(X_train1, y_train, eval_metric='auc')\ny_pred1 = clf.predict_proba(X_test1)[:,1]\n\nclf = LGBMClassifier(boosting_type = 'gbdt',class_weight='balanced')\nclf.fit(X_train2, y_train, eval_metric='auc')\ny_pred2 = clf.predict_proba(X_test2)[:,1]\n\nclf = LGBMClassifier(boosting_type = 'gbdt',class_weight='balanced')\nclf.fit(X_train3, y_train, eval_metric='auc')\ny_pred3 = clf.predict_proba(X_test3)[:,1]\n\ny_pred  = (y_pred1+y_pred2+y_pred3)\/3 ","8f312c54":"Y_predAll = pd.DataFrame()\nY_predAll['y_pred1'] = y_pred1\nY_predAll['y_pred2'] = y_pred2\nY_predAll['y_pred3'] = y_pred3\n\nmask = np.zeros_like(Y_predAll.corr(method ='spearman'))\nmask[np.triu_indices_from(mask)] = True\nwith sns.axes_style(\"white\"):\n    f, ax = plt.subplots(figsize=(15, 10))\n    ax = sns.heatmap(Y_predAll.corr(method ='spearman'), mask=mask, vmax=1, vmin=0.8, square=True,linewidths=.5,xticklabels=1, yticklabels=1)\n# memo: \u7d50\u69cb\u76f8\u95a2\u9ad8\u3044\u306e\u304c\u4e0d\u5b89...","1b4f29fd":"submission = pd.read_csv('\/kaggle\/input\/homework-for-students3\/sample_submission.csv', index_col=0)\nsubmission.loan_condition = y_pred\nsubmission.to_csv('submission.csv')","cdcba5ce":"## mths_since_last_delinq","258ececc":"# Fuction","2fd162c6":"## initial_list_status","02eded9c":"## addr_state","b7423b39":"## emp_title","542404a5":"## grade","fe9156ac":"## pub_rec","16bef0b9":"## Loan_amnt","89bbbbaa":"## mths_since_last_record","063db0f2":"# Check correlation","7b8fce10":"## total_acc","358b5a54":"# Submission","6877a715":"## Dataset1","9f873e81":"## revol_bal","5151bd44":"# Data import and extract data after 2015","023ec67f":"## Dataset3","116495cc":"## revol_util","0c5000b6":"## Dataset2","935d33d1":"# Prepare each dataset","782f0dbb":"## purpose","5365a0bc":"# Create derived features","898e7117":"## tot_cur_bal","f6032879":"## mths_since_last_major_derog","5f7c3f4b":"## application_type","802b8b14":"## zip_code","bbbf346e":"## Asset","43ddaad9":"## title","4e8709b2":"## emp_length","a5513c84":"## annual_inc","8c5235fb":"## collections_12_mths_ex_med","1990d6e8":"## tot_coll_amt","e44e12ec":"## inq_last_6mths","3a5dca35":"# Drop totally unnecessary variables","f970edab":"## dti","e4f1ac73":"# Preprocessing","5cef48c6":"## open_acc","ea383bc5":"## sub_grade","a5a558a6":"# Create model","2e475939":"## delinq_2yrs","0a61eab8":"## installment","1eed4710":"## home_ownership","4e7a7003":"## acc_now_delinq"}}