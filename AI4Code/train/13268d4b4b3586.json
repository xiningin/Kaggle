{"cell_type":{"587026af":"code","95d9a03a":"code","1f12746f":"code","ffe82855":"code","53fc4f6a":"code","202833eb":"code","0e32c3db":"code","bb98fcbe":"code","ca705669":"code","4d5fc7ec":"code","061bca4a":"code","62453f18":"code","7a459930":"code","db0d7603":"code","32a0ee58":"code","8427d73d":"code","7690146b":"code","19627201":"code","5d5d62d1":"code","055d93f2":"code","9c8eb5af":"code","cd09a3c3":"code","dafa32a9":"code","81cf17f8":"code","37b6e303":"code","5bb529e4":"code","a7f9d819":"code","fbf01e32":"code","b6f3d3e0":"code","805592b2":"code","299723fc":"code","315b74e5":"code","dba30654":"code","24488e03":"code","1302f0cc":"code","0a13c538":"code","869cb36e":"code","25f4dd42":"code","52a81ba5":"code","ae608bc0":"code","d7b435fe":"code","578959db":"code","9f304f7d":"code","40670e45":"code","39909d9c":"code","6480558f":"code","fb3794b7":"code","654ba90a":"code","78684e18":"code","ada06ac7":"code","f196aca8":"code","bd2c3ec7":"code","00c2a00b":"code","707dc2a7":"code","1a42433c":"code","66b914a0":"code","51b2ab47":"code","217b00b8":"code","d9151a40":"code","a751da84":"code","206ac4dc":"code","30ec4069":"code","8244ce60":"code","0add4b53":"code","68e6ef59":"code","5ff62e8c":"code","361145a7":"code","28151365":"code","e88d7889":"code","ea29b1b4":"code","e9151c91":"code","bb785edd":"code","50ef0e3c":"code","826436d0":"code","6a000b99":"code","06e15ff8":"code","bac87aef":"code","ac14f049":"code","f987ac73":"code","b11c7ac6":"code","ee08f9ab":"code","abbc370f":"code","696ba8f6":"code","0af73199":"code","9b7a33b4":"code","0abc6031":"code","ef379ff1":"code","5c5b1f61":"code","fd447941":"code","42d1d309":"code","864d5041":"code","afbc9503":"code","d6d09afa":"code","482586c8":"code","22a938d6":"code","a18c93fe":"code","3d92f55d":"code","5b22fcdb":"code","b6abf9c3":"code","5f3d822f":"code","73f1f566":"code","c0b4eea7":"code","f534c9d6":"code","9b58750a":"code","cb2d54b9":"code","94d1040e":"code","90433ff9":"code","5701bfe1":"code","770f3e46":"code","ac379a9b":"code","80c3128e":"code","7afd8818":"code","f75dd707":"code","4c6b79f8":"code","015e4df1":"code","a320b12a":"code","da963807":"code","18b6f436":"code","d26962bb":"code","5311fbbe":"code","866e8ebb":"code","471307dc":"code","e75dce91":"code","5d69f914":"code","d7a55380":"code","94dc8fe0":"code","8bd964e2":"code","340609d7":"code","56abd77e":"code","6c5804b8":"code","895621e8":"code","6295dc09":"code","0e727335":"code","b5520668":"code","3cbaa8e1":"code","c43baedb":"code","03c87c6f":"code","0b7b4853":"code","356bbfbd":"code","43fa5209":"code","62b0b3a0":"code","9e84e316":"code","3b757928":"code","b20c1d62":"code","1386a738":"code","693ecf35":"code","bbee9673":"code","57eaa26c":"code","88205ac6":"code","0fd3780c":"code","fa79f643":"code","2681312c":"code","d7e0bc1d":"code","8c9ab572":"code","e6306299":"code","7527a1e3":"code","d52f726b":"code","5044f899":"code","918f3a39":"code","beda9eda":"code","697e32a5":"code","93994714":"code","e9ac31fe":"code","5e1575ba":"code","f5480f97":"code","caed19be":"code","d67e54cf":"code","8d4f959d":"code","653c0811":"code","94e5bf41":"code","39b63ba6":"code","754286c0":"code","acf48183":"code","c0b11c3f":"code","24dcb3ef":"code","96c6ad53":"code","775068db":"code","344ba618":"code","316cec54":"code","7bafa57a":"code","5304b106":"code","dd578d23":"code","5b8a75db":"code","f392b186":"code","4725ebdc":"code","0b14b884":"code","aec4cd05":"code","2d8c622a":"code","819adb54":"code","cd352e4d":"code","3b403be3":"code","514f668d":"code","a817cddd":"code","a26730fa":"code","48a78d00":"code","a5cbad17":"code","e7caff60":"code","8e4c9fa3":"code","0bf3fe22":"code","6f376d0d":"code","eb087053":"code","551c9f4e":"code","b91684e1":"code","8b0ff37d":"code","0ae86199":"markdown","1b101249":"markdown","7d8d3d0c":"markdown","fea5a728":"markdown","b9fd71fc":"markdown","dc7b96f2":"markdown","7fcc3180":"markdown","b99b2492":"markdown","d07a43ae":"markdown","4cd4d1c4":"markdown","bf0a1b00":"markdown","bebcab13":"markdown","4555a5c9":"markdown","b956d7fc":"markdown","a435ce89":"markdown","307c1810":"markdown","a3ba5a95":"markdown","a558ca51":"markdown","7e553533":"markdown","a2c9c351":"markdown","d7581ae3":"markdown","1e0611ee":"markdown","114cb84a":"markdown","76f99f8a":"markdown","e23bb573":"markdown","bc9945ae":"markdown","e22a3aea":"markdown","e088a2a7":"markdown","9aa62b26":"markdown","5c188d96":"markdown","3cb59448":"markdown","7ee9ad49":"markdown","e06bc64e":"markdown","e4f79681":"markdown","2de0ab89":"markdown"},"source":{"587026af":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session\n","95d9a03a":"# This homework write by hadi sarvari For Course \"advance machin learning with python\"\nimport seaborn as sb\nimport matplotlib.pyplot as plt\nfrom sklearn.preprocessing import StandardScaler,RobustScaler,LabelEncoder,PowerTransformer\nfrom sklearn.neighbors import KNeighborsRegressor\nfrom sklearn.decomposition import PCA\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.preprocessing import LabelEncoder\n","1f12746f":"import warnings\nwarnings.filterwarnings(\"ignore\")","ffe82855":"df_sample_sub = pd.read_csv(\"..\/input\/house-prices-advanced-regression-techniques\/sample_submission.csv\")\ndf_test = pd.read_csv(\"..\/input\/house-prices-advanced-regression-techniques\/test.csv\")\ndf_train = pd.read_csv(\"..\/input\/house-prices-advanced-regression-techniques\/train.csv\")\n#Creating a copy of the train and test datasets","53fc4f6a":"df_test.head()","202833eb":"df_train.head()","0e32c3db":"#descriptive statistics summary\ndf_train['SalePrice'].describe()","bb98fcbe":"\n#histogram\nsb.distplot(df_train['SalePrice']);\n","ca705669":"#----------------------------Evaluate relationship with SalePrice and GrLivArea------------------------------------","4d5fc7ec":"#scatter plot grlivarea\/saleprice\nvar = 'GrLivArea'\ndata = pd.concat([df_train['SalePrice'], df_train[var]], axis=1)\ndata.plot.scatter(x=var, y='SalePrice', ylim=(0,800000));","061bca4a":"#---------------------------Evaluate relationship with SalePrice and TotalBsmtSF-----------------------------","62453f18":"#scatter plot totalbsmtsf\/saleprice\nvar = 'TotalBsmtSF'\ndata = pd.concat([df_train['SalePrice'], df_train[var]], axis=1)\ndata.plot.scatter(x=var, y='SalePrice', ylim=(0,800000));","7a459930":"#----------------------------Evaluate relationship with SalePrice and LotArea------------------------------------","db0d7603":"#scatter plot LotArea\/saleprice\nvar = 'LotArea'\ndata = pd.concat([df_train['SalePrice'], df_train[var]], axis=1)\ndata.plot.scatter(x=var, y='SalePrice', ylim=(0,800000));","32a0ee58":"# It seems that 'LotArea' and 'TotalBsmtSF' haven't a strong  relationship","8427d73d":"#---------------------------Evaluate relationship with SalePrice and OverallQual-----------------------------","7690146b":"#box plot overallqual\/saleprice\nvar = 'OverallQual'\ndata = pd.concat([df_train['SalePrice'], df_train[var]], axis=1)\nf, ax = plt.subplots(figsize=(8, 6))\nfig = sb.boxplot(x=var, y=\"SalePrice\", data=data)\nfig.axis(ymin=0, ymax=800000);","19627201":"#box plot overallqual\/saleprice\nvar = 'YearBuilt'\ndata = pd.concat([df_train['SalePrice'], df_train[var]], axis=1)\nf, ax = plt.subplots(figsize=(20, 16))\nfig = sb.boxplot(x=var, y=\"SalePrice\", data=data)\nfig.axis(ymin=0, ymax=800000);\nsb.swarmplot(x='YearBuilt', y=\"SalePrice\", data=df_train, color=\".25\")\nplt.xticks(weight='bold',rotation=90)","5d5d62d1":"#---------------------------Evaluate relationship with SalePrice and OverallQual-----------------------------","055d93f2":"#box plot MSZoning\/saleprice\nvar = 'MSZoning'\ndata = pd.concat([df_train['SalePrice'], df_train[var]], axis=1)\ndata=data.sort_values(by='SalePrice', ascending=True)\nf, ax = plt.subplots(figsize=(8, 6))\nfig = sb.boxplot(x=var, y=\"SalePrice\", data=data)\nfig.axis(ymin=0, ymax=800000);","9c8eb5af":"#---------------------------Evaluate relationship with SalePrice and OverallQual-----------------------------","cd09a3c3":"#box plot Neighborhood\/saleprice\nvar = 'Neighborhood'\ndata = pd.concat([df_train['SalePrice'], df_train[var]], axis=1)\ndata=data.sort_values(by='SalePrice', ascending=True)\nf, ax = plt.subplots(figsize=(8, 6))\nfig = sb.boxplot(x=var, y=\"SalePrice\", data=data)\nfig.axis(ymin=0, ymax=800000);\nplt.xticks(weight='bold',rotation=90)","dafa32a9":"#In my opinion, this heatmap is the best way to get a quick overview of  columns relationships","81cf17f8":"correlation_train=df_train.corr()\nsb.set(font_scale=2)\nplt.figure(figsize = (45,70))\nax = sb.heatmap(correlation_train, annot=True,annot_kws={\"size\": 25},fmt='.1f',cmap='PiYG', linewidths=.5)","37b6e303":"corr_dict=correlation_train['SalePrice'].sort_values(ascending=False).to_dict()\nimportant_columns=[]\nfor key,value in corr_dict.items():\n    if ((value>=0.5) & (value<0.999)) | ((value<=-0.5)& (value>-0.999)):\n        important_columns.append(key)\nimportant_columns    ","5bb529e4":"#scatterplot\nsb.set()\nsb.set(font_scale=2)\ncols = ['SalePrice', 'OverallQual', 'GrLivArea', 'GarageCars', 'TotalBsmtSF','1stFlrSF', 'FullBath','TotRmsAbvGrd', 'YearBuilt','YearRemodAdd']\nsb.pairplot(df_train[cols], size = 3.5)\nplt.show()","a7f9d819":"#------------------------------combine train and test------------------------------------------\n#combine train and test datasets.Because This processes are must be carried out together.\n","fbf01e32":"pd.set_option('display.max_rows', 5000)\npd.set_option('display.max_columns', 81)\ntrain_test=pd.concat([df_train,df_test],axis=0,sort=False)\ntrain_test.head()","b6f3d3e0":"#missing data\ntotal = train_test.isnull().sum().sort_values(ascending=False)\npercent = (train_test.isnull().sum()\/train_test.isnull().count()).sort_values(ascending=False)\nmissing_data = pd.concat([total, percent], axis=1, keys=['Total', 'Percent'])\nmissing_data[missing_data['Total']>0]","805592b2":"train_test.PoolQC.unique()","299723fc":"PoolArea=pd.DataFrame(train_test['PoolArea'],columns=['PoolArea'])\nPoolQC=pd.DataFrame(train_test['PoolQC'],columns=['PoolQC'])\nDf_Pool=pd.concat([PoolArea,PoolQC],axis=1)\nDf_Pool[(Df_Pool['PoolArea'] !=0) & (Df_Pool['PoolArea'].isna())]","315b74e5":"Df_Pool[(Df_Pool['PoolQC'].isna())].shape\n","dba30654":"Df_Pool[(Df_Pool['PoolArea']==0)].shape","24488e03":"#we haven't any recorde for pair (PoolArea,PoolQC) that PoolArea>0 and PoolQC is null, \n#and number of recorde with ['PoolArea']==0 is equal with number of record with 'PoolQC' ==null \n#so in we replace recordes  PoolQC==null with PoolQC==NA\n\n#note :data description says NA means \"No Pool\". That make sense, given the huge ratio of missing value (100%) \n#and majority of houses have no Pool at all in general.","1302f0cc":"train_test[\"PoolQC\"] = train_test[\"PoolQC\"].fillna(\"NA\")","0a13c538":"#--------------------------------------------MiscFeature------------------------------------------------------","869cb36e":"train_test[(train_test['MiscFeature'].isna())].shape","25f4dd42":"train_test[\"MiscFeature\"] = train_test[\"MiscFeature\"].fillna(\"NA\")","52a81ba5":"#--------------------------------------------Alley------------------------------------------------------","ae608bc0":"train_test[(train_test['Alley'].isna())].shape","d7b435fe":"train_test[\"Alley\"] = train_test[\"Alley\"].fillna(\"NA\")","578959db":"#--------------------------------------------Fence------------------------------------------------------","9f304f7d":"train_test[(train_test['Fence'].isna())].shape","40670e45":"train_test[\"Fence\"] = train_test[\"Fence\"].fillna(\"NA\")","39909d9c":"#--------------------------------------------Fence------------------------------------------------------","6480558f":"train_test.FireplaceQu.unique()","fb3794b7":"#FireplaceQu      Fireplaces\nFireplaceQu=pd.DataFrame(train_test['FireplaceQu'],columns=['FireplaceQu'])\nFireplaces=pd.DataFrame(train_test['Fireplaces'],columns=['Fireplaces'])\nDf_Fireplace=pd.concat([FireplaceQu,Fireplaces],axis=1)\nDf_Fireplace[(Df_Fireplace['Fireplaces'] !=0) & (Df_Fireplace['FireplaceQu'].isna())]","654ba90a":"Df_Fireplace[(Df_Fireplace['FireplaceQu'].isna())].shape","78684e18":"Df_Fireplace[(Df_Fireplace['Fireplaces']==0)].shape","ada06ac7":"train_test['FireplaceQu'][(Df_Fireplace['FireplaceQu'].isna())]=train_test['FireplaceQu'][(Df_Fireplace['FireplaceQu'].isna())].fillna('NA')","f196aca8":"#we haven't any recorde for pair (Fireplaces,FireplaceQu) that PoolArea>0 and FireplaceQu is null, \n#and number of recorde with ['Fireplaces']==0 is equal with number of record with 'FireplaceQu' ==null \n#so in we replace recordes  FireplaceQu==null with FireplaceQu==NA\n\n#note :data description says NA means \"No Fireplace\". That make sense, given the huge ratio of missing value (100%) \n#and majority of houses have no Fireplace at all in general.","bd2c3ec7":"#--------------------------------------------LotFrontage------------------------------------------------------","00c2a00b":"train_test.LotFrontage.unique()","707dc2a7":"train_test['LotFrontage'][(train_test.LotFrontage=='NA')]=0\n","1a42433c":"#Street  LotFrontage\npd.set_option('display.max_rows', 5000)           \nidD=pd.DataFrame(train_test['Id'],columns=['Id'])\nLotArea=pd.DataFrame(train_test['LotArea'],columns=['LotArea'])\nLotFrontage=pd.DataFrame(train_test['LotFrontage'],columns=['LotFrontage'])\nNeighborhood=pd.DataFrame(train_test['Neighborhood'],columns=['Neighborhood'])\nDf_LotFrontage=pd.concat([LotArea,LotFrontage,Neighborhood,idD],axis=1)\nDf_LotFrontage.head()\n\n#KNN form k=7 ","66b914a0":"#for name,group in Df_LotFrontage.groupby('Neighborhood'):\n#    for index,row in group[group[\"LotFrontage\"].isna()].iterrows():\n#            print(index,row)\n#            print('-------------------------------------------')\n#    print('*******************************************')","51b2ab47":"KNN = KNeighborsRegressor(n_neighbors=3)","217b00b8":" \nfor name,group in Df_LotFrontage.groupby('Neighborhood'):\n    \n       if group[group[\"LotFrontage\"].isna()& (group['LotFrontage']!=0)].shape[0] >=3 :\n            DF_LotFrontage_train=group[(group['LotFrontage'].notna()) & (group['LotFrontage']!=0)]\n            X = DF_LotFrontage_train.drop(['LotFrontage','Id'], axis=1)\n            Y = DF_LotFrontage_train['LotFrontage']\n            X['Neighborhood']=5000000\n            KNN.fit(X, Y)\n            for index,row in group[group[\"LotFrontage\"].isna()].iterrows():\n                DF_One_LotArea=pd.DataFrame([row['LotArea']],columns=['LotArea'])\n                DF_One_Neighborhood=pd.DataFrame([5000000],columns=['Neighborhood'])\n                D_test=pd.concat([DF_One_LotArea,DF_One_Neighborhood],axis=1)\n                pred=KNN.predict(D_test)\n                train_test[\"LotFrontage\"][train_test.Id==row['Id']]=round(pred[0], 0)\n                ","d9151a40":" #pred=KNN.predict(D_test)","a751da84":"train_test[(train_test['LotFrontage'].isna())].shape","206ac4dc":"train_test['LotFrontage'] = train_test['LotFrontage'].fillna(train_test.groupby('1stFlrSF')['LotFrontage'].transform('mean'))","30ec4069":"#----------------------------------Garage-------------------------------------------","8244ce60":"GarageFinish=pd.DataFrame(train_test['GarageFinish'],columns=['GarageFinish'])\nGarageCars=pd.DataFrame(train_test['GarageCars'],columns=['GarageCars'])\nGarageArea=pd.DataFrame(train_test['GarageArea'],columns=['GarageArea'])\nGarageQual=pd.DataFrame(train_test['GarageQual'],columns=['GarageQual'])\nGarageCond=pd.DataFrame(train_test['GarageCond'],columns=['GarageCond'])\nGarageType=pd.DataFrame(train_test['GarageType'],columns=['GarageType'])\nGarageYrBlt=pd.DataFrame(train_test['GarageYrBlt'],columns=['GarageYrBlt'])\nDf_Garage=pd.concat([GarageFinish,GarageCars,GarageArea,GarageQual,GarageCond,GarageType,GarageYrBlt],axis=1)\nDF_Garage_Cond=Df_Garage[(Df_Garage['GarageType'].isna()) | (Df_Garage['GarageCond'].isna()) | (Df_Garage['GarageQual'].isna())\n                        | (Df_Garage['GarageFinish'].isna())]\nDF_Garage_Cond.head()","0add4b53":"DF_Garage_Cond.shape","68e6ef59":"train_test.GarageFinish.unique()","5ff62e8c":"train_test['GarageFinish'][train_test['GarageFinish'].isna()].shape\n","361145a7":"train_test['GarageFinish'][(train_test['GarageFinish'].isna()) & ((train_test['GarageCars']==0) | (train_test['GarageArea']==0))]=train_test['GarageFinish'][(train_test['GarageFinish'].isna()) & ((train_test['GarageCars']==0) | (train_test['GarageArea']==0))].fillna('NA')","28151365":"train_test.GarageQual.unique()","e88d7889":"train_test['GarageQual'][train_test['GarageQual'].isna()].shape","ea29b1b4":"train_test['GarageQual'][(train_test['GarageQual'].isna()) & ((train_test['GarageCars']==0) | (train_test['GarageArea']==0))]=train_test['GarageQual'][(train_test['GarageQual'].isna()) & ((train_test['GarageCars']==0) | (train_test['GarageArea']==0))].fillna('NA')","e9151c91":"train_test.GarageCond.unique()","bb785edd":"train_test['GarageCond'][train_test['GarageCond'].isna()].shape","50ef0e3c":"train_test['GarageCond'][(train_test['GarageCond'].isna()) & ((train_test['GarageCars']==0) | (train_test['GarageArea']==0))]=train_test['GarageCond'][(train_test['GarageCond'].isna()) & ((train_test['GarageCars']==0) | (train_test['GarageArea']==0))].fillna('NA')","826436d0":"train_test.GarageType.unique()","6a000b99":"train_test['GarageType'][train_test['GarageType'].isna()].shape","06e15ff8":"train_test['GarageType'][(train_test['GarageType'].isna()) & ((train_test['GarageCars']==0) | (train_test['GarageArea']==0))]=train_test['GarageType'][(train_test['GarageType'].isna()) & ((train_test['GarageCars']==0) | (train_test['GarageArea']==0))].fillna('NA')","bac87aef":"train_test.GarageYrBlt.unique()","ac14f049":"train_test['GarageYrBlt'][train_test['GarageYrBlt'].isna()].shape","f987ac73":"train_test['GarageYrBlt'][(train_test['GarageYrBlt'].isna()) & ((train_test['GarageCars']==0) | (train_test['GarageArea']==0))]=train_test['GarageYrBlt'][(train_test['GarageYrBlt'].isna()) & ((train_test['GarageCars']==0) | (train_test['GarageArea']==0))].fillna(0)","b11c7ac6":"GarageFinish=pd.DataFrame(train_test['GarageFinish'],columns=['GarageFinish'])\nGarageCars=pd.DataFrame(train_test['GarageCars'],columns=['GarageCars'])\nGarageArea=pd.DataFrame(train_test['GarageArea'],columns=['GarageArea'])\nGarageQual=pd.DataFrame(train_test['GarageQual'],columns=['GarageQual'])\nGarageCond=pd.DataFrame(train_test['GarageCond'],columns=['GarageCond'])\nGarageType=pd.DataFrame(train_test['GarageType'],columns=['GarageType'])\nGarageYrBlt=pd.DataFrame(train_test['GarageYrBlt'],columns=['GarageYrBlt'])\nDf_Garage=pd.concat([GarageFinish,GarageCars,GarageArea,GarageQual,GarageCond,GarageType,GarageYrBlt],axis=1)\nDF_Garage_Cond=Df_Garage[(Df_Garage['GarageType'].isna()) | (Df_Garage['GarageCond'].isna()) | (Df_Garage['GarageQual'].isna())\n                        | (Df_Garage['GarageFinish'].isna())]\nDF_Garage_Cond.head()","ee08f9ab":"#BsmtFinSF2,TotalBsmtSF\nBsmtExposure=pd.DataFrame(train_test['BsmtExposure'],columns=['BsmtExposure'])\nBsmtCond=pd.DataFrame(train_test['BsmtCond'],columns=['BsmtCond'])\nBsmtQual=pd.DataFrame(train_test['BsmtQual'],columns=['BsmtQual'])\nBsmtFinType2=pd.DataFrame(train_test['BsmtFinType2'],columns=['BsmtFinType2'])\nBsmtFinType1=pd.DataFrame(train_test['BsmtFinType1'],columns=['BsmtFinType1'])\nBsmtFinSF2=pd.DataFrame(train_test['BsmtFinSF2'],columns=['BsmtFinSF2'])\nTotalBsmtSF=pd.DataFrame(train_test['TotalBsmtSF'],columns=['TotalBsmtSF'])\nBsmtUnfSF=pd.DataFrame(train_test['BsmtUnfSF'],columns=['BsmtUnfSF'])\nDf_Bsmt=pd.concat([BsmtExposure,BsmtCond,BsmtQual,BsmtFinType2,BsmtFinType1,BsmtFinSF2,BsmtUnfSF,TotalBsmtSF],axis=1)\nDF_Bsmt_Cond=Df_Bsmt[(Df_Bsmt['BsmtExposure'].isna()) | (Df_Bsmt['BsmtCond'].isna()) | (Df_Bsmt['BsmtQual'].isna())\n                        | (Df_Bsmt['BsmtFinType2'].isna())| (Df_Bsmt['BsmtFinType1'].isna())| (Df_Bsmt['BsmtFinSF2'].isna())\n                        | (Df_Bsmt['BsmtUnfSF'].isna())| (Df_Bsmt['TotalBsmtSF'].isna())]\nDF_Bsmt_Cond.head()\n\n\n","abbc370f":"train_test['BsmtQual'][(train_test['BsmtQual'].isna()) & ((train_test['TotalBsmtSF']==0) )]=train_test['BsmtQual'][(train_test['BsmtQual'].isna()) & ((train_test['TotalBsmtSF']==0) )].fillna('NA')","696ba8f6":"train_test['BsmtCond'][(train_test['BsmtCond'].isna()) & ((train_test['TotalBsmtSF']==0) )]=train_test['BsmtCond'][(train_test['BsmtCond'].isna()) & ((train_test['TotalBsmtSF']==0) )].fillna('NA')","0af73199":"train_test['BsmtFinType1'][(train_test['BsmtFinType1'].isna()) & ((train_test['TotalBsmtSF']==0) )]=train_test['BsmtFinType1'][(train_test['BsmtFinType1'].isna()) & ((train_test['TotalBsmtSF']==0) )].fillna('NA')","9b7a33b4":"train_test['BsmtExposure'][(train_test['BsmtExposure'].isna()) & ((train_test['TotalBsmtSF']==0) )]=train_test['BsmtExposure'][(train_test['BsmtExposure'].isna()) & ((train_test['TotalBsmtSF']==0) )].fillna('NA')","0abc6031":"train_test['BsmtFinType2'][(train_test['BsmtFinType2'].isna()) & ((train_test['TotalBsmtSF']==0) )]=train_test['BsmtFinType2'][(train_test['BsmtFinType2'].isna()) & ((train_test['TotalBsmtSF']==0) )].fillna('NA')","ef379ff1":"#--------------------------------------------------------------","5c5b1f61":"#BsmtFinSF2,TotalBsmtSF\nBsmtExposure=pd.DataFrame(train_test['BsmtExposure'],columns=['BsmtExposure'])\nBsmtCond=pd.DataFrame(train_test['BsmtCond'],columns=['BsmtCond'])\nBsmtQual=pd.DataFrame(train_test['BsmtQual'],columns=['BsmtQual'])\nBsmtFinType2=pd.DataFrame(train_test['BsmtFinType2'],columns=['BsmtFinType2'])\nBsmtFinType1=pd.DataFrame(train_test['BsmtFinType1'],columns=['BsmtFinType1'])\nBsmtFinSF2=pd.DataFrame(train_test['BsmtFinSF2'],columns=['BsmtFinSF2'])\nTotalBsmtSF=pd.DataFrame(train_test['TotalBsmtSF'],columns=['TotalBsmtSF'])\nBsmtUnfSF=pd.DataFrame(train_test['BsmtUnfSF'],columns=['BsmtUnfSF'])\nDf_Bsmt=pd.concat([BsmtExposure,BsmtCond,BsmtQual,BsmtFinType2,BsmtFinType1,BsmtFinSF2,BsmtUnfSF,TotalBsmtSF],axis=1)\nDF_Bsmt_Cond=Df_Bsmt[(Df_Bsmt['BsmtExposure'].isna()) | (Df_Bsmt['BsmtCond'].isna()) | (Df_Bsmt['BsmtQual'].isna())\n                        | (Df_Bsmt['BsmtFinType2'].isna())| (Df_Bsmt['BsmtFinType1'].isna())| (Df_Bsmt['BsmtFinSF2'].isna())\n                        | (Df_Bsmt['BsmtUnfSF'].isna())| (Df_Bsmt['TotalBsmtSF'].isna())]\nDF_Bsmt_Cond.head()\n","fd447941":"Df_Bsmt[Df_Bsmt['BsmtCond']=='TA'].groupby('BsmtExposure').agg({ 'BsmtExposure':np.size})","42d1d309":"#mode for  'BsmtCond'=='TA'   equal No","864d5041":"train_test['BsmtExposure'][(train_test['BsmtExposure'].isna()) & (train_test['BsmtCond']=='TA' )]=train_test['BsmtExposure'][(train_test['BsmtExposure'].isna()) & (train_test['BsmtCond']=='TA') ].fillna('No')","afbc9503":"#-------------------------------------------","d6d09afa":"Df_Bsmt[Df_Bsmt['BsmtCond']=='TA'].groupby('BsmtQual').agg({ 'BsmtQual':np.size})","482586c8":"#So mode for 'BsmtQual' when 'BsmtCond']=='TA' equal 'TA'","22a938d6":"train_test['BsmtQual'][(train_test['BsmtQual'].isna()) & (train_test['BsmtCond']=='TA' )]=train_test['BsmtQual'][(train_test['BsmtQual'].isna()) & (train_test['BsmtCond']=='TA') ].fillna('TA')","a18c93fe":"Df_Bsmt[Df_Bsmt['BsmtCond']=='Fa'].groupby('BsmtQual').agg({ 'BsmtQual':np.size})","3d92f55d":"#So mode for 'BsmtQual' when 'BsmtCond']=='Fa' equal 'TA'","5b22fcdb":"train_test['BsmtQual'][(train_test['BsmtQual'].isna()) & (train_test['BsmtCond']=='Fa' )]=train_test['BsmtQual'][(train_test['BsmtQual'].isna()) & (train_test['BsmtCond']=='Fa') ].fillna('TA')","b6abf9c3":"#-----------------------------------------------------------","5f3d822f":"Df_Bsmt[(Df_Bsmt['BsmtCond']=='TA') & (Df_Bsmt['BsmtFinType1']=='GLQ') & (Df_Bsmt['BsmtQual']=='Gd')].groupby('BsmtFinType2').agg({ 'BsmtFinType2':np.size})","73f1f566":"# because  BsmtUnfSF=not null  so ","c0b4eea7":"train_test['BsmtFinType2'][(train_test['BsmtFinType2'].isna()) &(Df_Bsmt['BsmtCond']=='TA') & (Df_Bsmt['BsmtFinType1']=='GLQ') & (Df_Bsmt['BsmtQual']=='Gd')]=train_test['BsmtFinType2'][(train_test['BsmtFinType2'].isna()) & (Df_Bsmt['BsmtCond']=='TA') & (Df_Bsmt['BsmtFinType1']=='GLQ') & (Df_Bsmt['BsmtQual']=='Gd') ].fillna('Unf')","f534c9d6":"#BsmtFinSF2,TotalBsmtSF\nBsmtExposure=pd.DataFrame(train_test['BsmtExposure'],columns=['BsmtExposure'])\nBsmtCond=pd.DataFrame(train_test['BsmtCond'],columns=['BsmtCond'])\nBsmtQual=pd.DataFrame(train_test['BsmtQual'],columns=['BsmtQual'])\nBsmtFinType2=pd.DataFrame(train_test['BsmtFinType2'],columns=['BsmtFinType2'])\nBsmtFinType1=pd.DataFrame(train_test['BsmtFinType1'],columns=['BsmtFinType1'])\nBsmtFinSF2=pd.DataFrame(train_test['BsmtFinSF2'],columns=['BsmtFinSF2'])\nTotalBsmtSF=pd.DataFrame(train_test['TotalBsmtSF'],columns=['TotalBsmtSF'])\nBsmtUnfSF=pd.DataFrame(train_test['BsmtUnfSF'],columns=['BsmtUnfSF'])\nDf_Bsmt=pd.concat([BsmtExposure,BsmtCond,BsmtQual,BsmtFinType2,BsmtFinType1,BsmtFinSF2,BsmtUnfSF,TotalBsmtSF],axis=1)\nDF_Bsmt_Cond=Df_Bsmt[(Df_Bsmt['BsmtExposure'].isna()) | (Df_Bsmt['BsmtCond'].isna()) | (Df_Bsmt['BsmtQual'].isna())\n                        | (Df_Bsmt['BsmtFinType2'].isna())| (Df_Bsmt['BsmtFinType1'].isna())| (Df_Bsmt['BsmtFinSF2'].isna())\n                        | (Df_Bsmt['BsmtUnfSF'].isna())| (Df_Bsmt['TotalBsmtSF'].isna())]\nDF_Bsmt_Cond.head()\n\n","9b58750a":"Df_Bsmt[(Df_Bsmt['BsmtQual']=='Gd') & (Df_Bsmt['BsmtFinType1']=='GLQ') & (Df_Bsmt['BsmtFinType2']=='Rec') & (Df_Bsmt['BsmtExposure']=='Mn')].groupby('BsmtCond').agg({ 'BsmtCond':np.size})","cb2d54b9":"train_test['BsmtCond'][(train_test['BsmtCond'].isna()) &  (Df_Bsmt['BsmtQual']=='Gd') & (Df_Bsmt['BsmtFinType1']=='GLQ') & (Df_Bsmt['BsmtFinType2']=='Rec') & (Df_Bsmt['BsmtExposure']=='Mn')]=train_test['BsmtCond'][(train_test['BsmtCond'].isna()) & (Df_Bsmt['BsmtQual']=='Gd') & (Df_Bsmt['BsmtFinType1']=='GLQ') & (Df_Bsmt['BsmtFinType2']=='Rec') & (Df_Bsmt['BsmtExposure']=='Mn') ].fillna('TA')","94d1040e":"#------------------------------------------------------","90433ff9":"Df_Bsmt[(Df_Bsmt['BsmtQual']=='TA') & (Df_Bsmt['BsmtFinType1']=='BLQ') & (Df_Bsmt['BsmtFinType2']=='Unf') & (Df_Bsmt['BsmtExposure']=='No')].groupby('BsmtCond').agg({ 'BsmtCond':np.size})","5701bfe1":"train_test['BsmtCond'][(train_test['BsmtCond'].isna()) &  (train_test['BsmtQual']=='TA') & (train_test['BsmtFinType1']=='BLQ') & (train_test['BsmtFinType2']=='Unf') & (train_test['BsmtExposure']=='No')]=train_test['BsmtCond'][(train_test['BsmtCond'].isna()) & (train_test['BsmtQual']=='TA') & (train_test['BsmtFinType1']=='BLQ') & (train_test['BsmtFinType2']=='Unf') & (Df_Bsmt['BsmtExposure']=='No') ].fillna('TA')","770f3e46":"#-------------------------------------------","ac379a9b":"Df_Bsmt[(Df_Bsmt['BsmtQual']=='TA') & (train_test['BsmtFinType1']=='ALQ') & (train_test['BsmtFinType2']=='Unf') & (train_test['BsmtExposure']=='Av')].groupby('BsmtCond').agg({ 'BsmtCond':np.size})","80c3128e":"train_test['BsmtCond'][(train_test['BsmtCond'].isna()) &  (train_test['BsmtQual']=='TA') & (train_test['BsmtFinType1']=='ALQ') & (train_test['BsmtFinType2']=='Unf') & (train_test['BsmtExposure']=='Av')]=train_test['BsmtCond'][(train_test['BsmtCond'].isna()) & (train_test['BsmtQual']=='TA') & (train_test['BsmtFinType1']=='ALQ') & (train_test['BsmtFinType2']=='Unf') & (train_test['BsmtExposure']=='Av') ].fillna('TA')","7afd8818":"#--------------------------MasVnrType      MasVnrArea","f75dd707":"#MasVnrType      MasVnrArea\nMasVnrArea=pd.DataFrame(train_test['MasVnrArea'],columns=['MasVnrArea'])\nMasVnrType=pd.DataFrame(train_test['MasVnrType'],columns=['MasVnrType'])\nMasVnr=pd.concat([MasVnrType,MasVnrArea],axis=1)\nDf_MasVnr=MasVnr[(MasVnr['MasVnrType'].isna()) & (MasVnr['MasVnrArea'].isna())]\nDf_MasVnr.shape\n#23 samilar 1 difernce \n#None replace MasVnrType\n#0 replace in MasVnrArea","4c6b79f8":"MasVnr=pd.concat([MasVnrType,MasVnrArea],axis=1)\nMasVnr[(MasVnr['MasVnrType'].isna())]","015e4df1":"train_test['MasVnrArea'][(train_test['MasVnrArea'].isna()) &  (train_test['MasVnrType'].isna()) ]=train_test['MasVnrArea'][(train_test['MasVnrArea'].isna()) &  (train_test['MasVnrType'].isna()) ].fillna(0)","a320b12a":"train_test['MasVnrType'][(train_test['MasVnrArea']==0) &  (train_test['MasVnrType'].isna()) ]=train_test['MasVnrType'][(train_test['MasVnrArea']==0) &  (train_test['MasVnrType'].isna()) ].fillna('None')","da963807":"train_test['MasVnrType'][ train_test['MasVnrType'].isna() ]=train_test['MasVnrType'][(train_test['MasVnrType'].isna()) ].fillna('None')","18b6f436":"train_test[train_test.index==1150]","d26962bb":"train_test.groupby('MasVnrType').agg({'MasVnrType':np.size})\n","5311fbbe":"#train_test['MasVnrType'][(train_test['MasVnrArea']>0) &  (train_test['MasVnrType'].isna()) ]=train_test['MasVnrType'][(train_test['MasVnrArea']>0) &  (train_test['MasVnrType'].isna()) ].fillna('None')","866e8ebb":"train_test[train_test['MSZoning'].isna()].head()","471307dc":"train_test[train_test['LotArea']>14000].groupby('MSZoning').agg({'MSZoning':np.size})","e75dce91":"train_test.groupby('MSZoning').agg({'MSZoning':np.size})","5d69f914":"train_test['MSZoning'][ (train_test['MSZoning'].isna()) ]=train_test['MSZoning'][ (train_test['MSZoning'].isna()) ].fillna('RL')","d7a55380":"\ntrain_test[(train_test['MasVnrType'].isna())].head()","94dc8fe0":"total = train_test.isnull().sum().sort_values(ascending=False)\npercent = (train_test.isnull().sum()\/train_test.isnull().count()).sort_values(ascending=False)\nmissing_data = pd.concat([total, percent], axis=1, keys=['Total', 'Percent'])\nmissing_data[missing_data['Total']>0]","8bd964e2":"train_test.FireplaceQu.unique()","340609d7":"#FireplaceQu      Fireplaces\nFireplaceQu=pd.DataFrame(train_test['FireplaceQu'],columns=['FireplaceQu'])\nFireplaces=pd.DataFrame(train_test['Fireplaces'],columns=['Fireplaces'])\nDf_Fireplace=pd.concat([FireplaceQu,Fireplaces],axis=1)\nDf_Fireplace[(Df_Fireplace['Fireplaces'] !=0) & (Df_Fireplace['FireplaceQu'].isna())]\n#\u0628\u0646\u0627\u0628\u0631\u0627\u06cc\u0646 \u062c\u0627\u06cc\u06af\u0632\u06cc\u0646\u06cc \n#nan  with NA","56abd77e":"train_test['FireplaceQu'][ (train_test['FireplaceQu'].isna()) ]=train_test['FireplaceQu'][ (train_test['FireplaceQu'].isna()) ].fillna('NA')","6c5804b8":"#-------------------------------------------------------------------------","895621e8":"\n#Utilities\nDf_Utilities_Non=train_test[(train_test['Utilities'].isna())  ].head()\n\nDf_Utilities_Non.head()","6295dc09":"train_test.groupby('Utilities').agg({'Utilities':np.size})","0e727335":"train_test['Utilities'][ (train_test['Utilities'].isna()) ]=train_test['Utilities'][ (train_test['Utilities'].isna()) ].fillna('AllPub')","b5520668":"#BsmtFullBath\n#BsmtHalfBath\n\nBsmtFullBath=pd.DataFrame(train_test['BsmtFullBath'],columns=['BsmtFullBath'])\nBsmtHalfBath=pd.DataFrame(train_test['BsmtHalfBath'],columns=['BsmtHalfBath'])\nFullBath=pd.DataFrame(train_test['FullBath'],columns=['FullBath'])\nHalfBath=pd.DataFrame(train_test['HalfBath'],columns=['HalfBath'])\nDf_Bath=pd.concat([BsmtFullBath,BsmtHalfBath,FullBath,HalfBath],axis=1)\nDF_Bath_All=Df_Bath[(Df_Bath['BsmtFullBath'].isna()) & (Df_Bath['BsmtHalfBath'].isna())  ]\nDF_BathF_All=Df_Bath[(Df_Bath['BsmtFullBath'].isna())]\nDF_BathH_All=Df_Bath[(Df_Bath['BsmtHalfBath'].isna())]\nprint(DF_BathF_All.shape)\nprint(DF_BathH_All.shape)\n#DF_BathH_All\nDF_Bath_All.head()","3cbaa8e1":"train_test.groupby('BsmtHalfBath').agg({'BsmtHalfBath':np.size})","c43baedb":"train_test.groupby('BsmtFullBath').agg({'BsmtFullBath':np.size})","03c87c6f":"train_test['BsmtFullBath'][ (train_test['BsmtFullBath'].isna()) ]=train_test['BsmtFullBath'][ (train_test['BsmtFullBath'].isna()) ].fillna('0')","0b7b4853":"train_test['BsmtHalfBath'][ (train_test['BsmtHalfBath'].isna()) ]=train_test['BsmtHalfBath'][ (train_test['BsmtHalfBath'].isna()) ].fillna('0')","356bbfbd":"#-------------------------------------------------------------------------","43fa5209":"train_test[train_test['Functional'].isna()].head()","62b0b3a0":"train_test[ (train_test['OverallQual']==4)].groupby('Functional').agg({'Functional':np.size})","9e84e316":"train_test['Functional'][ (train_test['Functional'].isna()) & (train_test['OverallQual']==4) ]=train_test['Functional'][ (train_test['Functional'].isna()) & (train_test['OverallQual']==4) ].fillna('Typ')","3b757928":"train_test[ (train_test['OverallQual']==1)].groupby('Functional').agg({'Functional':np.size})","b20c1d62":"train_test['Functional'][ (train_test['Functional'].isna()) & (train_test['OverallQual']==1) ]=train_test['Functional'][ (train_test['Functional'].isna()) & (train_test['OverallQual']==1) ].fillna('Mod')","1386a738":"total = train_test.isnull().sum().sort_values(ascending=False)\npercent = (train_test.isnull().sum()\/train_test.isnull().count()).sort_values(ascending=False)\nmissing_data = pd.concat([total, percent], axis=1, keys=['Total', 'Percent'])\nmissing_data[missing_data['Total']>0]","693ecf35":"train_test[train_test['Exterior1st'].isna()].head()","bbee9673":"train_test[(train_test['YearBuilt']>1935) & (train_test['YearBuilt'] < 1945)].groupby('Exterior1st').agg({'Exterior1st':np.size})","57eaa26c":"#Wd Sdng","88205ac6":"total = train_test.isnull().sum().sort_values(ascending=False)\npercent = (train_test.isnull().sum()\/train_test.isnull().count()).sort_values(ascending=False)\nmissing_data = pd.concat([total, percent], axis=1, keys=['Total', 'Percent'])\nmissing_data[missing_data['Total']>0]","0fd3780c":"train_test['Exterior1st'][ (train_test['Exterior1st'].isna())  ]=train_test['Exterior1st'][ (train_test['Exterior1st'].isna()) ].fillna('Wd Sdng')","fa79f643":"train_test[train_test['Exterior2nd'].isna()].head()","2681312c":"train_test[(train_test['YearBuilt']>1935) & (train_test['YearBuilt'] < 1945)].groupby('Exterior2nd').agg({'Exterior2nd':np.size})","d7e0bc1d":"train_test['Exterior2nd'][ (train_test['Exterior2nd'].isna())  ]=train_test['Exterior2nd'][ (train_test['Exterior2nd'].isna()) ].fillna('Wd Sdng')","8c9ab572":"#------------------------------------","e6306299":"train_test[(train_test['KitchenQual'].isna())].head()","7527a1e3":"train_test['KitchenQual'][(train_test['KitchenQual'].isna())]=train_test['KitchenQual'][(train_test['KitchenQual'].isna())].fillna('TA')","d52f726b":"#GarageArea\ntrain_test['GarageArea'][(train_test['GarageArea'].isna())]=train_test['GarageArea'][(train_test['GarageArea'].isna())].fillna(0)\ntrain_test['GarageCars'][(train_test['GarageCars'].isna())]=train_test['GarageCars'][(train_test['GarageCars'].isna())].fillna(0)\n#Electrical\ntrain_test['Electrical'][(train_test['Electrical'].isna())]=train_test['Electrical'][(train_test['Electrical'].isna())].fillna('SBrkr')","5044f899":"train_test[train_test.isna().any(axis=1)].head()","918f3a39":"#SaleType\ntrain_test.groupby('SaleType').agg({'SaleType':np.size})","beda9eda":"train_test['SaleType'][(train_test['SaleType'].isna())]=train_test['SaleType'][(train_test['SaleType'].isna())].fillna('WD')","697e32a5":"train_test.head(5)","93994714":"\ntrain_test['GarageCond'][(train_test['GarageCond'].isna())]=train_test['GarageCond'][(train_test['GarageCond'].isna())].fillna('NA')\ntrain_test['BsmtFinSF2'][(train_test['BsmtFinSF2'].isna())]=train_test['BsmtFinSF2'][(train_test['BsmtFinSF2'].isna())].fillna(0)\ntrain_test['BsmtFinType2'][(train_test['BsmtFinType2'].isna())]=train_test['BsmtFinType2'][(train_test['BsmtFinType2'].isna())].fillna('NA')\ntrain_test['BsmtFinSF1'][(train_test['BsmtFinSF1'].isna())]=train_test['BsmtFinSF1'][(train_test['BsmtFinSF1'].isna())].fillna(0)\ntrain_test['BsmtFinType1'][(train_test['BsmtFinType1'].isna())]=train_test['BsmtFinType1'][(train_test['BsmtFinType1'].isna())].fillna('NA')\ntrain_test['BsmtExposure'][(train_test['BsmtExposure'].isna())]=train_test['BsmtExposure'][(train_test['BsmtExposure'].isna())].fillna('NA')\ntrain_test['BsmtCond'][(train_test['BsmtCond'].isna())]=train_test['BsmtCond'][(train_test['BsmtCond'].isna())].fillna('NA')\ntrain_test['BsmtQual'][(train_test['BsmtQual'].isna())]=train_test['BsmtQual'][(train_test['BsmtQual'].isna())].fillna('NA')\ntrain_test['BsmtUnfSF'][(train_test['BsmtUnfSF'].isna())]=train_test['BsmtUnfSF'][(train_test['BsmtUnfSF'].isna())].fillna(0)\ntrain_test['GarageFinish'][(train_test['GarageFinish'].isna())]=train_test['GarageFinish'][(train_test['GarageFinish'].isna())].fillna('NA')\ntrain_test['GarageQual'][(train_test['GarageQual'].isna())]=train_test['GarageQual'][(train_test['GarageQual'].isna())].fillna('NA')\ntrain_test['GarageYrBlt'][(train_test['GarageYrBlt'].isna())]=train_test['GarageYrBlt'][(train_test['GarageYrBlt'].isna())].fillna(0)\ntrain_test['TotalBsmtSF'][(train_test['TotalBsmtSF'].isna())]=train_test['TotalBsmtSF'][(train_test['TotalBsmtSF'].isna())].fillna(0)\n","e9ac31fe":"total = train_test.isnull().sum().sort_values(ascending=False)\npercent = (train_test.isnull().sum()\/train_test.isnull().count()).sort_values(ascending=False)\nmissing_data = pd.concat([total, percent], axis=1, keys=['Total', 'Percent'])\nmissing_data[missing_data['Total']>0]","5e1575ba":"total = train_test.isnull().sum().sort_values(ascending=False)\npercent = (train_test.isnull().sum()\/train_test.isnull().count()).sort_values(ascending=False)\nmissing_data = pd.concat([total, percent], axis=1, keys=['Total', 'Percent'])\nmissing_data[missing_data['Total']>0]\n","f5480f97":"#ADD a column   Age_House","caed19be":"\ntrain_test['Age_House']=train_test['YrSold']-train_test['YearBuilt']\ntrain_test[train_test['Age_House']<0]","d67e54cf":"#year is not suit so change with \"what year ago?\"","8d4f959d":"train_test['YrSold']=2010-train_test['YrSold']\ntrain_test['YearBuilt']=2010-train_test['YearBuilt']\ntrain_test['YearRemodAdd']=2010-train_test['YearRemodAdd']\ntrain_test['GarageYrBlt']=2010-train_test['GarageYrBlt']","653c0811":"# what is suit?(label encoding or onehot encoding or replace )\n#I choose replace for following feature","94e5bf41":"bin_map_Street  = {'Grvl':2,'Pave':1}\ntrain_test['Street'] = train_test['Street'].replace(bin_map_Street)\n\nbin_map_Alley  = {'Grvl':2,'Pave':1,'NA':0}\ntrain_test['Alley'] = train_test['Alley'].replace(bin_map_Alley)\n\nbin_map_LotShape  = {'Reg':4,'IR1':3,'IR2':2,'IR3':1}\ntrain_test['LotShape'] = train_test['LotShape'].replace(bin_map_LotShape)\n\nbin_map_Utilities  = {'AllPub':4,'NoSewr':3,'NoSeWa':2,'ELO':1}\ntrain_test['Utilities'] = train_test['Utilities'].replace(bin_map_Utilities)\n\nbin_map_Exter  = {'Ex':5,'Gd':4, 'TA':3,'Fa':2,'Po':1 ,'NA':0}\ntrain_test['ExterQual'] = train_test['ExterQual'].replace(bin_map_Exter)\ntrain_test['ExterCond'] = train_test['ExterCond'].replace(bin_map_Exter)\ntrain_test['HeatingQC'] = train_test['HeatingQC'].replace(bin_map_Exter)\ntrain_test['KitchenQual'] = train_test['KitchenQual'].replace(bin_map_Exter)\ntrain_test['FireplaceQu'] = train_test['FireplaceQu'].replace(bin_map_Exter)\ntrain_test['GarageQual'] = train_test['GarageQual'].replace(bin_map_Exter )\ntrain_test['GarageCond'] = train_test['GarageCond'].replace(bin_map_Exter)\ntrain_test['PoolQC'] = train_test['PoolQC'].replace(bin_map_Exter)\n\nbin_map_Bsmt  = {'Ex':5,'Gd':4, 'TA':3,'Fa':2,'Po':1 ,'NA':0}\ntrain_test['BsmtCond'] = train_test['BsmtCond'].replace(bin_map_Bsmt)\ntrain_test['BsmtQual'] = train_test['BsmtQual'].replace(bin_map_Bsmt)\n\n\nbin_map_BsmtExposure  = {'Gd':4,'Av':3, 'Mn':2,'No':1,'NA':0}\ntrain_test['BsmtExposure'] = train_test['BsmtExposure'].replace(bin_map_BsmtExposure )\n\nbin_map_BsmtFin = {'GLQ':6,'ALQ':5,'BLQ':4,'Rec':3, 'LwQ':2,'Unf':1,'NA':0}\ntrain_test['BsmtFinType1'] = train_test['BsmtFinType1'].replace(bin_map_BsmtFin )\ntrain_test['BsmtFinType2'] = train_test['BsmtFinType2'].replace(bin_map_BsmtFin )\n\nbin_map_CentralAir  = { 'Y':1,'N':0}\ntrain_test['CentralAir'] = train_test['CentralAir'].replace(bin_map_CentralAir)\n","39b63ba6":"#----------------------------------------------------------------------------------------------------------\n#LotFrontage, MasVnrArea, BsmtFinSF1, BsmtFinSF2, BsmtUnfSF, TotalBsmtSF, BsmtFullBath, BsmtHalfBath, GarageYrBlt, GarageCars, GarageArea\nbin_map_NA  = {'NA':0}\ntrain_test['MasVnrArea'][train_test['MasVnrArea']=='NA'] = train_test['MasVnrArea'][train_test['MasVnrArea']=='NA'].replace(bin_map_NA)\ntrain_test['BsmtFinSF1'][train_test['BsmtFinSF1']=='NA'] = train_test['BsmtFinSF1'][train_test['BsmtFinSF1']=='NA'].replace(bin_map_NA)\ntrain_test['BsmtFinSF2'][train_test['BsmtFinSF2']=='NA'] = train_test['BsmtFinSF2'][train_test['BsmtFinSF2']=='NA'].replace(bin_map_NA)\ntrain_test['BsmtUnfSF'][train_test['BsmtUnfSF']=='NA'] = train_test['BsmtUnfSF'][train_test['BsmtUnfSF']=='NA'].replace(bin_map_NA)\ntrain_test['TotalBsmtSF'][train_test['TotalBsmtSF']=='NA'] = train_test['TotalBsmtSF'][train_test['TotalBsmtSF']=='NA'].replace(bin_map_NA)\ntrain_test['BsmtFullBath'][train_test['BsmtFullBath']=='NA'] = train_test['BsmtFullBath'][train_test['BsmtFullBath']=='NA'].replace(bin_map_NA)\ntrain_test['BsmtHalfBath'][train_test['BsmtHalfBath']=='NA'] = train_test['BsmtHalfBath'][train_test['BsmtHalfBath']=='NA'].replace(bin_map_NA)\ntrain_test['GarageYrBlt'][train_test['GarageYrBlt']=='NA'] = train_test['GarageYrBlt'][train_test['GarageYrBlt']=='NA'].replace(bin_map_NA)\ntrain_test['GarageCars'][train_test['GarageCars']=='NA'] = train_test['GarageCars'][train_test['GarageCars']=='NA'].replace(bin_map_NA)\ntrain_test['GarageArea'][train_test['GarageArea']=='NA'] = train_test['GarageArea'][train_test['GarageArea']=='NA'].replace(bin_map_NA)","754286c0":"#transfer with  labelencoder for following feature","acf48183":"# import labelencoder\nfrom sklearn.preprocessing import LabelEncoder\n# instantiate labelencoder object\nle = LabelEncoder()\ncategorical_cols=['MSZoning','LandSlope','LandContour','LotConfig','Neighborhood','Condition1','Condition2','BldgType','HouseStyle','RoofStyle','RoofMatl','Exterior1st','Exterior2nd','MasVnrType','Foundation','Heating','Electrical','Functional','GarageType','GarageFinish','PavedDrive','Fence','MiscFeature','SaleType','SaleCondition']\n#categorical_cols=[]\n# apply le on categorical feature columns\ntrain_test[categorical_cols] =train_test[categorical_cols].apply(lambda col: le.fit_transform(col))\n","c0b11c3f":"# ADD 3 column ","24dcb3ef":"train_test['TotalArea'] = train_test['TotalBsmtSF'] + train_test['1stFlrSF'] + train_test['2ndFlrSF'] + train_test['GrLivArea'] +train_test['GarageArea']\n\ntrain_test['Bathrooms'] = train_test['FullBath'] + train_test['HalfBath']*0.5 \n\ntrain_test['Year average']= (train_test['YearRemodAdd']+train_test['YearBuilt'])\/2","96c6ad53":"#change type of collumnes for Memory and ... ","775068db":"for col in train_test:\n    if col !='SalePrice':\n        train_test[col]=train_test[col].astype('int32')","344ba618":"#Outleir Detection base on two factors  1- corolation matrix 2-Test Data","316cec54":"a=train_test[0:1460]","7bafa57a":"import math\ncolors=['yellowgreen','red','deepskyblue','deepskyblue','gold','orchid','tan']\nNum=0\nNumCol=len(a.columns)\nRowNum=int(math.floor((NumCol\/2))+1)\n\n\n\nfor col in a.columns:\n    #ax1 = plt.subplot2grid((RowNum, 2),(math.floor((Num\/2)),Num%2))\n    fig = plt.figure(figsize=(5,5))\n    plt.scatter(x=a[col], y=a['SalePrice'], color=(colors[Num%7]),alpha=0.9)\n    Num=Num+1\n    #plt.axvline(x=13, color='r', linestyle='-')\n    plt.title(col+' - Price scatter plot', fontsize=15, weight='bold' )\n    plt.show()","5304b106":"sb.set(font_scale=1)\nfig = plt.figure(figsize=(15,15))\nax1 = plt.subplot2grid((5,2),(0,0))\nplt.scatter(x=a['GrLivArea'], y=a['SalePrice'], color=('yellowgreen'), alpha=0.5)\nplt.axvline(x=3600, color='r', linestyle='-')\nplt.title('Ground living Area- Price scatter plot', fontsize=10, weight='bold' )\n\nax1 = plt.subplot2grid((5,2),(0,1))\nplt.scatter(x=a['TotalBsmtSF'], y=a['SalePrice'], color=('red'),alpha=0.5)\nplt.axvline(x=3000, color='r', linestyle='-')\nplt.title('Basement Area - Price scatter plot', fontsize=10, weight='bold' )\n\nax1 = plt.subplot2grid((5,2),(1,0))\nplt.scatter(x=a['1stFlrSF'], y=a['SalePrice'], color=('deepskyblue'),alpha=0.5)\nplt.axvline(x=2800, color='r', linestyle='-')\nplt.title('First floor Area - Price scatter plot', fontsize=10, weight='bold' )\n\nax1 = plt.subplot2grid((5,2),(1,1))\nplt.scatter(x=a['TotalArea'], y=a['SalePrice'], color=('gold'),alpha=0.9)\nplt.axvline(x=10000, color='r', linestyle='-')\nplt.title('TotalArea - Price scatter plot', fontsize=10, weight='bold' )\n\n\n\nax1 = plt.subplot2grid((5,2),(2,0))\nplt.scatter(x=a['LotFrontage'], y=a['SalePrice'], color=('orchid'),alpha=0.5)\nplt.axvline(x=230, color='r', linestyle='-')\nplt.title('LotFrontage - Price scatter plot', fontsize=10, weight='bold' )\n\nax1 = plt.subplot2grid((5,2),(2,1))\nplt.scatter(x=a['BsmtFinSF2'], y=a['SalePrice'], color=('tan'),alpha=0.9)\nplt.axvline(x=1400, color='r', linestyle='-')\nplt.title('BsmtFinSF2 - Price scatter plot', fontsize=10, weight='bold' )\n\n\nax1 = plt.subplot2grid((5,2),(3,0))\nplt.scatter(x=a['BsmtFinSF1'], y=a['SalePrice'], color=('gold'),alpha=0.9)\nplt.axvline(x=2100, color='r', linestyle='-')\nplt.title('BsmtFinSF1 - Price scatter plot', fontsize=10, weight='bold' )\n\nax1 = plt.subplot2grid((5,2),(3,1))\nplt.scatter(x=a['LotArea'], y=a['LotArea'], color=('tan'),alpha=0.9)\nplt.axvline(x=100000, color='r', linestyle='-')\nplt.title('LotArea - Price scatter plot', fontsize=10, weight='bold' )\n#MasVnrArea\n\nax1 = plt.subplot2grid((5,2),(4,0))\nplt.scatter(x=a['MasVnrArea'], y=a['MasVnrArea'], color=('red'),alpha=0.9)\nplt.axvline(x=1300, color='r', linestyle='-')\nplt.title('MasVnrArea - Price scatter plot', fontsize=10, weight='bold' )\nplt.show()","dd578d23":"from sklearn.model_selection import train_test_split\ntrain=train_test[0:1460]\n\nTest=train_test[1460:2919]\n\nprint(Test.shape)","5b8a75db":"Train=train.copy()\ntrain=train[(train['LotFrontage'] < 230) ] #--209=>  get value from max in \"Test['LotFrontage'].describe()\" \ntrain=train[(train['BsmtFinSF1'] < 2100)] #-----1972 => get value from max in \"Test['BsmtFinSF1'].describe()\" \ntrain=train[(train['BsmtFinSF2'] < 1400)] #-----1393 =>...\ntrain=train[(train['TotalBsmtSF'] < 3000)] #----2846\ntrain=train[(train['1stFlrSF'] < 2800) ] #--2696\ntrain=train[(train['GrLivArea'] < 3600)] #---3500\ntrain=train[(train['TotalArea'] < 10000)] #----9692\ntrain=train[(train['LotArea'] < 100000)] #---57000\ntrain=train[(train['MasVnrArea'] < 1300)] #---1290\n\nprint(f'We removed {Train.shape[0]- train.shape[0]} outliers')","f392b186":"Test['LotFrontage'].describe()","4725ebdc":"#histogram and normal probability plot\nfrom scipy.stats import norm\nfrom scipy import stats\nsb.distplot(train['SalePrice'], fit=norm);\nfig = plt.figure()\nres = stats.probplot(train['SalePrice'], plot=plt)","0b14b884":"train['SalePrice'] = np.log1p(train['SalePrice'])\ny= train['SalePrice']\nx = train.drop(['SalePrice','Id'],axis=1)\n\n","aec4cd05":"#----------------------------------------Split Data","2d8c622a":"x_train, x_test, y_train, y_test = train_test_split(x, y,test_size = .3, random_state=2019)\n","819adb54":"#----------------------------------------prepar Final Test Data","cd352e4d":"X_test = Test.drop(['SalePrice','Id'],axis=1)","3b403be3":"#-------------------------------------------------------------------------------------------------","514f668d":"from sklearn.metrics import fbeta_score, make_scorer,mean_squared_error\ndef scorer(y,yhat):\n    return np.sqrt(mean_squared_error(y,yhat))","a817cddd":"my_score=make_scorer(scorer, greater_is_better=False)","a26730fa":"def score(y_pred):\n    return str(np.sqrt(mean_squared_error(y_test, y_pred)))","48a78d00":"import xgboost as xgb\nimport lightgbm as lgb","a5cbad17":"model_xgb = xgb.XGBRegressor(colsample_bytree=0.55, gamma=0.0468, \n                             learning_rate=0.05, max_depth=4, \n                             min_child_weight=1.73, n_estimators=2200,\n                             reg_alpha=0.4640, reg_lambda=0.6,\n                             subsample=0.5, silent=1,\n                             random_state =7, nthread = -1)","e7caff60":"#from sklearn.model_selection import GridSearchCV\n#par = {'gamma':[0.0450,0.0500,0.0550],\n#       'colsample_bytree':[0.4,0.45,0.5,0.55,0.6],\n#       'learning_rate':[0.008,0.01,0.03,0.05],\n#        'min_child_weight':[1.3,1.5,1.7,1.8],\n#       'n_estimators':[1000,1200,1500,2000]\n#      }\n#GS = GridSearchCV(model_xgb, param_grid=par, cv=5, scoring='neg_mean_squared_error')\n#GS.fit(x,y)","8e4c9fa3":"#GS.best_params_","0bf3fe22":"#GS.best_score_","6f376d0d":"model_xgb.fit(x_train,y_train)\ny_xgb_train = model_xgb.predict(x_train)\ny_xgb_test = model_xgb.predict(x_test)\n\nprint(f'Root Mean Square Error train  {str(np.sqrt(mean_squared_error(y_train, y_xgb_train)))}')\nprint(f'Root Mean Square Error test  {score(y_xgb_test)}')\n#xgb_pred = np.expm1(model_xgb.predict(test))\n#print(rmsle(y_train, xgb_train_pred))","eb087053":"model_lgb = lgb.LGBMRegressor(objective='regression',num_leaves=5,\n                              learning_rate=0.05, n_estimators=1000,\n                              max_bin = 55, bagging_fraction = 0.70,\n                              bagging_freq = 5, feature_fraction = 0.2319,\n                              feature_fraction_seed=9, bagging_seed=9,\n                              min_data_in_leaf =6, min_sum_hessian_in_leaf = 9)","551c9f4e":"model_lgb.fit(x_train,y_train)\ny_lgb_train = model_lgb.predict(x_train)\ny_lgb_test = model_lgb.predict(x_test)\nprint(f'Root Mean Square Error train  {str(np.sqrt(mean_squared_error(y_train, y_lgb_train)))}')\nprint(f'Root Mean Square Error test  {score(y_lgb_test)}')","b91684e1":"Pro=0.54\nprint(f'Root Mean Square Error train  {str(np.sqrt(mean_squared_error(y_train, (y_lgb_train*Pro + y_xgb_train*(1-Pro)))))}')\nprint(f'Root Mean Square Error test  {str(np.sqrt(mean_squared_error(y_test, (y_lgb_test*Pro + y_xgb_test*(1-Pro)))))}')","8b0ff37d":"model_lgb.fit(x,y)\ny_lgb_F = model_lgb.predict(X_test)\n#-------------------------------------------------------\nmodel_xgb.fit(x,y)\ny_xgb_F = model_xgb.predict(X_test)\n#-------------------------------------------------------\nensemble=np.expm1(y_xgb_F*(1-Pro)+ y_lgb_F*Pro)\n#-------------------------------------------------------\nsub = pd.DataFrame()\nsub['Id'] = Test[\"Id\"]\nsub['SalePrice'] = ensemble\nsub.to_csv('submission_F.csv',index=False)\n","0ae86199":"----------------------BsmtExposure,BsmtCond,BsmtQual,BsmtFinType2,BsmtFinType1-----------------------------------------\n'BsmtQual',  ==>Evaluates the height of the basement   \u0627\u0631\u062a\u0641\u0627\u0639 \u0627\u0632 \u067e\u06cc\n                   Ex    Excellent (100+ inches)    \n                   Gd    Good (90-99 inches)\n                   TA    Typical (80-89 inches)\n                   Fa    Fair (70-79 inches)\n                   Po    Poor (<70 inches\n                   \n                   NA    No Basement\n   --------------------------------------------------------------------------------------------------------------------     \n   'BsmtCond',==>Evaluates the general condition of the basement   \u0627\u0631\u0632\u06cc\u0627\u0628\u06cc \u0634\u0631\u0627\u06cc\u0637 \u0632\u06cc\u0631 \u0632\u0645\u06cc\u0646(\u067e\u06cc)\n\n                   Ex    Excellent\n                   Gd    Good\n                   TA    Typical - slight dampness allowed   \u0645\u0639\u0645\u0648\u0644\u06cc\n                   Fa    Fair - dampness or some cracking or settling\n                   Po    Poor - Severe cracking, settling, or wetness\n                   NA    No Basement\n   --------------------------------------------------------------------------------------------------------------------\n   'BsmtExposure',==> Refers to walkout or garden level walls   \u0633\u0637\u062d \u062f\u06cc\u0648\u0627\u0631 \u062d\u06cc\u0627\u0637 \u06cc\u0627 \u0628\u0627\u063a\u0686\u0647\n\n                       Gd    Good Exposure\n                       Av    Average Exposure (split levels or foyers typically score average or above)    \n                       Mn    Mimimum Exposure\n                       No    No Exposure\n                       NA    No Basement\n   --------------------------------------------------------------------------------------------------------------------\n   'BsmtFinType1', ==> Rating of basement finished area   \u0631\u0646\u06a9 \u0645\u062d\u06cc\u0637 \u062f\u0627\u062e\u0644 \u0648 \u0633\u0627\u0644\u0646\n                       GLQ    Good Living Quarters  \u0632\u0646\u062f\u06af\u06cc \u062e\u0648\u0628\n                       ALQ    Average Living Quarters \u0632\u0646\u062f\u06af\u06cc \u0645\u062a\u0648\u0633\u0637\n                       BLQ    Below Average Living Quarters    \n                       Rec    Average Rec Room\n                       LwQ    Low Quality\n                       Unf    Unfinshed\n                       \n                       NA    No Basement\n   --------------------------------------------------------------------------------------------------------------------\n   \n   \n   'BsmtFinSF1', ==Type 1 finished square feet\n   \n   --------------------------------------------------------------------------------------------------------------------\n   'BsmtFinType2',==>BsmtFinType2: Rating of basement finished area (if multiple types)\n                       GLQ    Good Living Quarters  \u0632\u0646\u062f\u06af\u06cc \u062e\u0648\u0628\n                       ALQ    Average Living Quarters \u0632\u0646\u062f\u06af\u06cc \u0645\u062a\u0648\u0633\u0637\n                       BLQ    Below Average Living Quarters    \n                       Rec    Average Rec Room\n                       LwQ    Low Quality\n                       Unf    Unfinshed\n                       NA    No Basement\n\n   --------------------------------------------------------------------------------------------------------------------\n   'BsmtFinSF2', ==>Type 2 finished square feet\n   \n   --------------------------------------------------------------------------------------------------------------------\n   'BsmtUnfSF',  ==>Unfinished square feet of basement area\n\n----------------------\n 'TotalBsmtSF',==>Total square feet of basement area","1b101249":"# Analysing 'SalePrice'","7d8d3d0c":"      GarageQual,GarageYrBlt,GarageFinish,GarageCond,GarageType\n    \n      GarageQual,GarageYrBlt,GarageFinish,GarageCond,GarageType : Replacing missing data with NA (Since No garage = no cars in such garage.)","fea5a728":"#### we evalute 'SalePrice' Relationship with numerical variables\n\n","b9fd71fc":"            'Alley',==>Alley: Type of alley access to property\n\n                       Grvl\tGravel =\u0634\u0646 \u06cc\u0627 \u0633\u0646\u06af \u0631\u06cc\u0632\u0647\n                       Pave\tPaved= \u0633\u0646\u06af\u0641\u0631\u0634 \u06cc\u0627 \u0622\u0633\u0641\u0627\u0644\u062a\n                       NA \tNo alley access","dc7b96f2":"#-----------------------------------------------------MSZoning------\n        'MSZoning', ==>MSZoning: Identifies the general zoning classification of the sale.(\u0637\u0628\u0642\u0647 \u0628\u0646\u062f\u06cc \u0641\u0631\u0648\u0634)\n\t\t\n                       A\tAgriculture=\u06a9\u0634\u0627\u0648\u0631\u0632\u06cc\n                       C\tCommercial=\u062a\u062c\u0627\u0631\u06cc\n                       FV\tFloating Village Residential=\u062f\u0647\u06a9\u062f\u0647\u0647\u0627\u06cc \u0645\u0633\u06a9\u0648\u0646\u06cc\n                       I\tIndustrial=\u0635\u0646\u0639\u062a\u06cc\n                       RH\tResidential High Density=\u0645\u0633\u06a9\u0648\u0646\u06cc \u062a\u0631\u0627\u06a9\u0645 \u0628\u0627\u0644\u0627\n                       RL\tResidential Low Density=\u0645\u0633\u06a9\u0648\u0646\u06cc \u062a\u0631\u0627\u06a9\u0645 \u06a9\u0645\n                       RP\tResidential Low Density Park =\n                       RM\tResidential Medium Density=","7fcc3180":" It seems that 'SalePrice' and 'TotalBsmtSF' have a linear relationship","b99b2492":"------\nFireplaceQu: Fireplace quality\n\n       Ex\tExcellent - Exceptional Masonry Fireplace\n       Gd\tGood - Masonry Fireplace in main level\n       TA\tAverage - Prefabricated Fireplace in main living area or Masonry Fireplace in basement\n       Fa\tFair - Prefabricated Fireplace in basement\n       Po\tPoor - Ben Franklin Stove\n       NA\tNo Fireplace","d07a43ae":"----------------------GarageYrBlt---------------------------------------------------------------------\nYear garage was built","4cd4d1c4":"#-----BsmtFullBath--------------------------BsmtHalfBath------------------------------------------\nBsmtFullBath: Basement full bathrooms\n\nBsmtHalfBath: Basement half bathrooms","bf0a1b00":"        -----------------------Missing value in MiscFeature--------------------------   \n\n        MiscFeature: Miscellaneous feature not covered in other categories\n\n               Elev\tElevator\n               Gar2\t2nd Garage (if not described in garage section)\n               Othr\tOther\n               Shed\tShed (over 100 SF)\n               TenC\tTennis Court\n               NA\tNone","bebcab13":" It seems that 'SalePrice' and 'GrLivArea' have a linear relationship","4555a5c9":"It seems  that important feature are:\n\n        A.OverallQual\n        B.YearBuilt.\n        C.TotalBsmtSF.\n        D.GrLivArea.\n        E.LotArea.\n        F.MSZoning\n        G.Neighborhood\n\n    Note:in description of Data,One thing was wrong.\"KitchenAbvGr\" was't in \"data_description.txt\" file and \"Kitchen\" wasn't in   \n    train.csv and test.csv files.\n","b956d7fc":"     'GarageType', ==>Garage location\n\n                   2Types    More than one type of garage\n                   Attchd    Attached to home\n                   Basment    Basement Garage  \u06a9\u0627\u0631\u0627\u0698 \u062f\u0631 \u0632\u06cc\u0631 \u0632\u0645\u06cc\u0646\n                   BuiltIn    Built-In (Garage part of house - typically has room above garage)\n                   CarPort    Car Port  \u067e\u0627\u0631\u06a9\u06cc\u0646\u06af \u062f\u0631 \u0641\u0636\u0627\u06cc \u0628\u0627\u0632 \u0628\u062a \u0633\u0642\u0641 \u067e\u0644\u06cc\u062a\u06cc\n                   Detchd    Detached from home\n                   NA    No Garage\n   --------------------------------------------------------------------------------------------------------------------\n   \n       'GarageYrBlt', ==>Year garage was built\n   --------------------------------------------------------------------------------------------------------------------\n   \n       'GarageFinish',==>Interior finish of the garage\n                      Fin\tFinished\n                       RFn\tRough Finished\t\n                       Unf\tUnfinished\n                       NA\tNo Garage\n   --------------------------------------------------------------------------------------------------------------------\n   \n       'GarageCars',  ==>Size of garage in car capacity\n   --------------------------------------------------------------------------------------------------------------------\n   \n       'GarageArea',  ==>Size of garage in square feet\n   --------------------------------------------------------------------------------------------------------------------\n       'GarageQual',  ==>Garage quality\n\n                   Ex    Excellent\n                   Gd    Good\n                   TA    Typical\/Average\n                   Fa    Fair\n                   Po    Poor\n                   NA    No Garage\n   --------------------------------------------------------------------------------------------------------------------\n       'GarageCond', ==>Garage condition\n\n                   Ex    Excellent\n                   Gd    Good\n                   TA    Typical\/Average\n                   Fa    Fair\n                   Po    Poor\n                   NA    No Garage\n                   \n                   \n                   \n                   \n               \n                   ","a435ce89":"        LotFrontage : Since the area of each street connected to the house property most likely have a similar area to other   houses in its neighborhood , we can fill in missing values by the median LotFrontage of the neighborhood.","307c1810":"#---------------------------Evaluate relationship with SalePrice and YearBuilt-----------------------------","a3ba5a95":"It seems that 'SalePrice' and '1stFlrSF' have a linear relationship\nand between 1stFlrSF and 'TotalBsmtSF', 'GrLivArea' have a linear relationship","a558ca51":"In the search for normality","7e553533":"# 3. Missing data\nImportant questions when thinking about missing data:\n\n    How prevalent is the missing data?\n    Is missing data random or does it have a pattern?\nThe answer to these questions is important for practical reasons because missing data can imply a reduction of the sample size. This can prevent us from proceeding with the analysis.","a2c9c351":"            Alley : data description says NA means \"no alley access\"","d7581ae3":"            Fence : data description says NA means \"no fence\"","1e0611ee":"            -------------------------------------------------------------------------------------------\n            'FireplaceQu',==>Fireplace quality\n\n                       Ex\tExcellent - Exceptional Masonry Fireplace\n                       Gd\tGood - Masonry Fireplace in main level\n                       TA\tAverage - Prefabricated Fireplace in main living area or Masonry Fireplace in basement\n                       Fa\tFair - Prefabricated Fireplace in basement\n                       Po\tPoor - Ben Franklin Stove\n                       NA\tNo Fireplace","114cb84a":"#------------------------------------GarageCond---------------------------------------------------------------\n         'GarageCond', ==>Garage condition\n\n                   Ex    Excellent\n                   Gd    Good\n                   TA    Typical\/Average\n                   Fa    Fair\n                   Po    Poor\n                   NA    No Garage","76f99f8a":"-     --------------------------------GarageQual---------------------------------------------------------------------------\n       'GarageQual',  ==>Garage quality\n\n                   Ex    Excellent\n                   Gd    Good\n                   TA    Typical\/Average\n                   Fa    Fair\n                   Po    Poor\n                   NA    No Garage","e23bb573":"Utilities: Type of utilities available\n\t\t\n       AllPub\tAll public Utilities (E,G,W,& S)\t\n       NoSewr\tElectricity, Gas, and Water (Septic Tank)\n       NoSeWa\tElectricity and Gas Only\n       ELO\tElectricity only\t","bc9945ae":"       -----------------------Missing value in PoolQC----------------------------------------------\n       'PoolQC', Pool quality\n\n                       Ex\tExcellent\n                       Gd\tGood\n                       TA\tAverage\/Typical\n                       Fa\tFair\n                       NA\tNo Pool","e22a3aea":" \n----------------------GarageType---------------------------------------------------------------------\n'GarageType', ==>Garage location\n\n                   2Types    More than one type of garage\n                   Attchd    Attached to home\n                   Basment    Basement Garage  \u06a9\u0627\u0631\u0627\u0698 \u062f\u0631 \u0632\u06cc\u0631 \u0632\u0645\u06cc\u0646\n                   BuiltIn    Built-In (Garage part of house - typically has room above garage)\n                   CarPort    Car Port  \u067e\u0627\u0631\u06a9\u06cc\u0646\u06af \u062f\u0631 \u0641\u0636\u0627\u06cc \u0628\u0627\u0632 \u0628\u062a \u0633\u0642\u0641 \u067e\u0644\u06cc\u062a\u06cc\n                   Detchd    Detached from home\n                   NA    No Garage","e088a2a7":"      --------------------------------------------------------------------------------------------------------------------\n       'Fence',  Fence quality\n\t\t\n                       GdPrv\tGood Privacy\n                       MnPrv\tMinimum Privacy\n                       GdWo\tGood Wood\n                       MnWw\tMinimum Wood\/Wire\n                       NA\tNo Fence","9aa62b26":"   --------------------------------------------------------------------------------------------------------------------\n   \n       'GarageFinish',==>Interior finish of the garage\n                      Fin\tFinished\n                       RFn\tRough Finished\t\n                       Unf\tUnfinished\n                       NA\tNo Garage","5c188d96":"----------BsmtExposure,BsmtCond,BsmtQual,BsmtFinType1-------------------------------------------------","3cb59448":"####","7ee9ad49":"        #MiscFeature : data description says NA means \"no misc feature\"","e06bc64e":"#### we evalute 'SalePrice' Relationship with numerical variables","e4f79681":"       'LotFrontage', ==>Linear feet of street connected to property","2de0ab89":"    'Functional', ==> Home functionality (Assume typical unless deductions are warranted)\n                       \u0648\u0636\u0639\u06cc\u062a \u062e\u0627\u0646\u0647 (\u0645\u0639\u0645\u0648\u0644\u0627\u064b \u0641\u0631\u0636 \u06a9\u0646\u06cc\u062f \u0645\u06af\u0631 \u0627\u06cc\u0646\u06a9\u0647 \u06a9\u0633\u0631 \u062a\u062e\u0641\u06cc\u0641 \u062f\u0627\u062f\u0647 \u0634\u0648\u062f)\n\n                   Typ    Typical Functionality  \u0645\u0639\u0645\u0648\u0644\u06cc\n                   Min1    Minor Deductions 1  \u06a9\u0627\u0633\u062a\u06cc \u062c\u0632\u06cc\n                   Min2    Minor Deductions 2\n                   Mod    Moderate Deductions\n                   Maj1    Major Deductions 1\n                   Maj2    Major Deductions 2\n                   Sev    Severely Damaged   \u0628\u0647 \u0634\u062f\u062a \u0622\u0633\u06cc\u0628 \u062f\u06cc\u062f\u0647\n                   Sal    Salvage only"}}