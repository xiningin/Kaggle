{"cell_type":{"fb6a9200":"code","0bee651f":"code","1236e92d":"code","c58b4950":"code","e1275836":"code","f9af336c":"code","7a783c47":"code","a2d7dfd8":"code","dccdc797":"code","ff9de65a":"code","8907f1bf":"code","600a8620":"code","51e8abeb":"code","c503d1f3":"code","b48b78ec":"code","2b72d6ea":"code","4c2b2a75":"markdown","90a49532":"markdown","3bbf0da2":"markdown","61c7f337":"markdown","aac5f02f":"markdown","4c3ef1d0":"markdown","171971e9":"markdown"},"source":{"fb6a9200":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","0bee651f":"from plotly.offline import download_plotlyjs, init_notebook_mode, plot, iplot\nimport plotly\nimport plotly.graph_objs as go\ninit_notebook_mode(connected=True)\nimport seaborn as sns\nsns.set()\nfrom scipy.stats import chi2_contingency\n%matplotlib inline\nimport matplotlib.pyplot as plt\n\n# Graphics in retina format are more sharp and legible\n%config InlineBackend.figure_format = 'retina'","1236e92d":"data = pd.read_stata('\/kaggle\/input\/appstore\/AppleStore.dta')\ndata.head()","c58b4950":"s = data.prime_genre.value_counts().index[:5]\ndef categ(x):\n    if x in s:\n        return x\n    else : \n        return \"Others\"\n\ndata['broad_genre'] = data.prime_genre.apply(lambda x : categ(x))","e1275836":"data['broad_genre'].value_counts()","f9af336c":"contingency = pd.crosstab(data['user_rating'], data['broad_genre'], margins=True, margins_name=\"Total\")\ncontingency","7a783c47":"chi2, p, dof, expected = chi2_contingency(contingency)\nprint(f'p-value {p}')\nprint(f'degrees of freedom {dof}')\nprint(f'test statistics for chi-square distribution {chi2}')","a2d7dfd8":"dataset = []\n\nfor genre in data.broad_genre.unique():\n    dataset.append(\n        go.Box(y=data[data.broad_genre == genre].user_rating, name=genre)\n    )\n    \niplot(dataset, show_link=False)","dccdc797":"youtube_data = pd.read_stata('\/kaggle\/input\/youtube-data\/Youtube_data.dta')\nyoutube_data.head()","ff9de65a":"plt.scatter(youtube_data['likes'],youtube_data['views'],  c = 'blue', edgecolor = 'black', marker = '^')\nplt.xlabel('Likes')\nplt.ylabel('Views')\nplt.title('Correlation between Likes and Views')\nplt.show()","8907f1bf":"print('correlation:', youtube_data['likes'].corr(youtube_data['views'], method = 'pearson'))","600a8620":"ax = sns.distplot(youtube_data['likes'], hist=True, kde=True, \n             bins= 50, color = 'darkblue', \n             hist_kws={'edgecolor':'black'},\n             kde_kws={'linewidth': 2})\nax.set(xlabel='likes', ylabel='density')\n\nplt.show()","51e8abeb":"from scipy.stats import kurtosis, skew\nprint('kurtosis of distribution: {}'.format(kurtosis(youtube_data['likes'])))\nprint('skewness of distribution : {}'.format(skew(youtube_data['likes'])))","c503d1f3":"from scipy.stats import norm, kstest\nloc, scale = norm.fit(youtube_data['likes'])\n# create a normal distribution with loc and scale\nn = norm(loc=loc, scale=scale)\nkstest(youtube_data['likes'], n.cdf)","b48b78ec":"youtube_data['comment_count'].corr(youtube_data['views'], method = 'pearson')","2b72d6ea":"features1=['comment_count','views','likes']\nyoutube_data[features1].corr()[-1:]","4c2b2a75":"## YOUTUBE Data","90a49532":"### Task 3","3bbf0da2":"### Task 5","61c7f337":"## Task 2","aac5f02f":"# Task 1","4c3ef1d0":"### Distribution of categories by genre","171971e9":"### Take only 5 most important categories instead of all"}}