{"cell_type":{"35e222d3":"code","4dbdc0e7":"code","5fd94df5":"code","5bfd4352":"code","b6e9c64b":"code","b7804800":"code","2db3bbc2":"code","7f957519":"code","306ab811":"code","00fc40a5":"code","0d6c8917":"code","ca785027":"code","7a20fc59":"code","55aa9604":"code","93137c1f":"code","2e1241fe":"code","46b68002":"code","a778abc5":"code","5f2f4171":"code","923517e8":"code","903c7168":"code","2825a8ef":"code","bb10170d":"code","3713710b":"code","d26f4222":"code","3ac25314":"code","28d66a64":"code","5e5780e1":"code","0350207e":"code","9d457642":"code","5a4e8691":"code","de3822f3":"code","32747db1":"code","920f83a3":"code","f23c1c4c":"code","267f6d70":"code","00646933":"code","97c9237d":"code","200fec3e":"code","a3d3417e":"code","10126a7d":"code","c198bedd":"code","2e675900":"code","e7f68a4d":"code","57245d0e":"code","1262cda6":"code","58f9008e":"code","8c7ebf16":"code","d6c1ff79":"code","0b21cd6e":"code","8748304d":"code","492868da":"code","8636fae5":"code","0696a458":"markdown","8d072567":"markdown","fc80e043":"markdown","c0e75f1d":"markdown","c75b9adc":"markdown","fb466662":"markdown","9334706a":"markdown","a106984f":"markdown","44a062f1":"markdown","93460824":"markdown","f3756c31":"markdown","902917aa":"markdown","22677ab9":"markdown","c97171bb":"markdown","9588c0d5":"markdown","d03e6cc7":"markdown","13f0c9e8":"markdown","050b9bef":"markdown","209d1a88":"markdown","a3ecb9b6":"markdown","c21934a2":"markdown","3d64a24d":"markdown","0289d481":"markdown","1d7ddad2":"markdown","e0fa7ea5":"markdown","95c4e7a6":"markdown","735da204":"markdown","9f71095c":"markdown","8ba93b6d":"markdown","c973a4fc":"markdown","1348584d":"markdown","d95b45bf":"markdown","90d9a58e":"markdown","44d9a6a8":"markdown","51dfba0b":"markdown","475c431c":"markdown","9e70c79d":"markdown","574cea47":"markdown","20d2dc40":"markdown","970a67be":"markdown","6a72dbb9":"markdown","09cce92e":"markdown","d7369834":"markdown","d670ec2f":"markdown","6d17a83a":"markdown","c007dece":"markdown","7e579ffe":"markdown","f7a0027a":"markdown","b36f1bb2":"markdown","3c2fa1e1":"markdown","b11f6a4f":"markdown"},"source":{"35e222d3":"# linear algebra\nimport numpy as np \n\n# data processing\nimport pandas as pd \n\n# data visualization\nimport seaborn as sns\n%matplotlib inline\nfrom matplotlib import pyplot as plt\nfrom matplotlib import style\n\n# Algorithms\nfrom sklearn import linear_model\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.linear_model import Perceptron\nfrom sklearn.linear_model import SGDClassifier\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.svm import SVC, LinearSVC\nfrom sklearn.naive_bayes import GaussianNB","4dbdc0e7":"test_df = pd.read_csv(\"..\/input\/titanic\/test.csv\")\ntrain_df = pd.read_csv(\"..\/input\/titanic\/train.csv\")","5fd94df5":"train_df.info()","5bfd4352":"train_df.describe()","b6e9c64b":"train_df.head(10)","b7804800":"total = train_df.isnull().sum().sort_values(ascending=False)\npercent_1 = train_df.isnull().sum()\/train_df.isnull().count()*100\npercent_2 = (round(percent_1, 1)).sort_values(ascending=False)\nmissing_data = pd.concat([total, percent_2], axis=1, keys=['Total', '%'])\nmissing_data.head(10)","2db3bbc2":"train_df.columns.values","7f957519":"survived = 'survived'\nnot_survived = 'not survived'\nfig, axes = plt.subplots(nrows=1, ncols=2,figsize=(10, 4))\nwomen = train_df[train_df['Sex']=='female']\nmen = train_df[train_df['Sex']=='male']\nax = sns.distplot(women[women['Survived']==1].Age.dropna(), bins=18, label = survived, ax = axes[0], kde =False)\nax = sns.distplot(women[women['Survived']==0].Age.dropna(), bins=40, label = not_survived, ax = axes[0], kde =False)\nax.legend()\nax.set_title('Female')\nax = sns.distplot(men[men['Survived']==1].Age.dropna(), bins=18, label = survived, ax = axes[1], kde = False)\nax = sns.distplot(men[men['Survived']==0].Age.dropna(), bins=40, label = not_survived, ax = axes[1], kde = False)\nax.legend()\n_ = ax.set_title('Male')","306ab811":"FacetGrid = sns.FacetGrid(train_df, row='Embarked', size=4.5, aspect=1.6)\nFacetGrid.map(sns.pointplot, 'Pclass', 'Survived', 'Sex', palette=None,  order=None, hue_order=None )\nFacetGrid.add_legend()","00fc40a5":"sns.barplot(x='Pclass', y='Survived', data=train_df)","0d6c8917":"grid = sns.FacetGrid(train_df, col='Survived', row='Pclass', size=2.2, aspect=1.6)\ngrid.map(plt.hist, 'Age', alpha=.5, bins=20)\ngrid.add_legend();","ca785027":"data = [train_df, test_df]\nfor dataset in data:\n    dataset['relatives'] = dataset['SibSp'] + dataset['Parch']\n    dataset.loc[dataset['relatives'] > 0, 'not_alone'] = 0\n    dataset.loc[dataset['relatives'] == 0, 'not_alone'] = 1\n    dataset['not_alone'] = dataset['not_alone'].astype(int)\n    train_df['not_alone'].value_counts()","7a20fc59":"axes = sns.factorplot('relatives','Survived', \n                      data=train_df, aspect = 2.5, )","55aa9604":"train_df = train_df.drop(['PassengerId'], axis=1)","93137c1f":"import re\ndeck = {\"A\": 1, \"B\": 2, \"C\": 3, \"D\": 4, \"E\": 5, \"F\": 6, \"G\": 7, \"U\": 8}\ndata = [train_df, test_df]\n\nfor dataset in data:\n    dataset['Cabin'] = dataset['Cabin'].fillna(\"U0\")\n    dataset['Deck'] = dataset['Cabin'].map(lambda x: re.compile(\"([a-zA-Z]+)\").search(x).group())\n    dataset['Deck'] = dataset['Deck'].map(deck)\n    dataset['Deck'] = dataset['Deck'].fillna(0)\n    dataset['Deck'] = dataset['Deck'].astype(int)# we can now drop the cabin feature\ntrain_df = train_df.drop(['Cabin'], axis=1)\ntest_df = test_df.drop(['Cabin'], axis=1)","2e1241fe":"data = [train_df, test_df]\n\nfor dataset in data:\n    mean = train_df[\"Age\"].mean()\n    std = test_df[\"Age\"].std()\n    is_null = dataset[\"Age\"].isnull().sum()\n    # compute random numbers between the mean, std and is_null\n    rand_age = np.random.randint(mean - std, mean + std, size = is_null)\n    # fill NaN values in Age column with random values generated\n    age_slice = dataset[\"Age\"].copy()\n    age_slice[np.isnan(age_slice)] = rand_age\n    dataset[\"Age\"] = age_slice\n    dataset[\"Age\"] = train_df[\"Age\"].astype(int)\n    train_df[\"Age\"].isnull().sum()","46b68002":"train_df['Embarked'].describe()","a778abc5":"common_value = 'S'\ndata = [train_df, test_df]\n\nfor dataset in data:\n    dataset['Embarked'] = dataset['Embarked'].fillna(common_value)","5f2f4171":"train_df.info()","923517e8":"data = [train_df, test_df]\n\nfor dataset in data:\n    dataset['Fare'] = dataset['Fare'].fillna(0)\n    dataset['Fare'] = dataset['Fare'].astype(int)","903c7168":"data = [train_df, test_df]\ntitles = {\"Mr\": 1, \"Miss\": 2, \"Mrs\": 3, \"Master\": 4, \"Rare\": 5}\n\nfor dataset in data:\n    # extract titles\n    dataset['Title'] = dataset.Name.str.extract(' ([A-Za-z]+)\\.', expand=False)\n    # replace titles with a more common title or as Rare\n    dataset['Title'] = dataset['Title'].replace(['Lady', 'Countess','Capt', 'Col','Don', 'Dr',\\\n                                            'Major', 'Rev', 'Sir', 'Jonkheer', 'Dona'], 'Rare')\n    dataset['Title'] = dataset['Title'].replace('Mlle', 'Miss')\n    dataset['Title'] = dataset['Title'].replace('Ms', 'Miss')\n    dataset['Title'] = dataset['Title'].replace('Mme', 'Mrs')\n    # convert titles into numbers\n    dataset['Title'] = dataset['Title'].map(titles)\n    # filling NaN with 0, to get safe\n    dataset['Title'] = dataset['Title'].fillna(0)\ntrain_df = train_df.drop(['Name'], axis=1)\ntest_df = test_df.drop(['Name'], axis=1)","2825a8ef":"genders = {\"male\": 0, \"female\": 1}\ndata = [train_df, test_df]\n\nfor dataset in data:\n    dataset['Sex'] = dataset['Sex'].map(genders)","bb10170d":"train_df['Ticket'].describe()","3713710b":"train_df = train_df.drop(['Ticket'], axis=1)\ntest_df = test_df.drop(['Ticket'], axis=1)","d26f4222":"ports = {\"S\": 0, \"C\": 1, \"Q\": 2}\ndata = [train_df, test_df]\n\nfor dataset in data:\n    dataset['Embarked'] = dataset['Embarked'].map(ports)","3ac25314":"data = [train_df, test_df]\nfor dataset in data:\n    dataset['Age'] = dataset['Age'].astype(int)\n    dataset.loc[ dataset['Age'] <= 11, 'Age'] = 0\n    dataset.loc[(dataset['Age'] > 11) & (dataset['Age'] <= 18), 'Age'] = 1\n    dataset.loc[(dataset['Age'] > 18) & (dataset['Age'] <= 22), 'Age'] = 2\n    dataset.loc[(dataset['Age'] > 22) & (dataset['Age'] <= 27), 'Age'] = 3\n    dataset.loc[(dataset['Age'] > 27) & (dataset['Age'] <= 33), 'Age'] = 4\n    dataset.loc[(dataset['Age'] > 33) & (dataset['Age'] <= 40), 'Age'] = 5\n    dataset.loc[(dataset['Age'] > 40) & (dataset['Age'] <= 66), 'Age'] = 6\n    dataset.loc[ dataset['Age'] > 66, 'Age'] = 6\n\n# let's see how it's distributed train_df['Age'].value_counts()","28d66a64":"data = [train_df, test_df]\n\nfor dataset in data:\n    dataset.loc[ dataset['Fare'] <= 7.91, 'Fare'] = 0\n    dataset.loc[(dataset['Fare'] > 7.91) & (dataset['Fare'] <= 14.454), 'Fare'] = 1\n    dataset.loc[(dataset['Fare'] > 14.454) & (dataset['Fare'] <= 31), 'Fare']   = 2\n    dataset.loc[(dataset['Fare'] > 31) & (dataset['Fare'] <= 99), 'Fare']   = 3\n    dataset.loc[(dataset['Fare'] > 99) & (dataset['Fare'] <= 250), 'Fare']   = 4\n    dataset.loc[ dataset['Fare'] > 250, 'Fare'] = 5\n    dataset['Fare'] = dataset['Fare'].astype(int)","5e5780e1":"data = [train_df, test_df]\nfor dataset in data:\n    dataset['Age_Class']= dataset['Age']* dataset['Pclass']","0350207e":"for dataset in data:\n    dataset['Fare_Per_Person'] = dataset['Fare']\/(dataset['relatives']+1)\n    dataset['Fare_Per_Person'] = dataset['Fare_Per_Person'].astype(int)# Let's take a last look at the training set, before we start training the models.\ntrain_df.head(10)","9d457642":"X_train = train_df.drop(\"Survived\", axis=1)\nY_train = train_df[\"Survived\"]\nX_test  = test_df.drop(\"PassengerId\", axis=1).copy()","5a4e8691":"sgd = linear_model.SGDClassifier(max_iter=5, tol=None)\nsgd.fit(X_train, Y_train)\nY_pred = sgd.predict(X_test)\n\nsgd.score(X_train, Y_train)\n\nacc_sgd = round(sgd.score(X_train, Y_train) * 100, 2)","de3822f3":"random_forest = RandomForestClassifier(n_estimators=100)\nrandom_forest.fit(X_train, Y_train)\n\nY_prediction = random_forest.predict(X_test)\n\nrandom_forest.score(X_train, Y_train)\nacc_random_forest = round(random_forest.score(X_train, Y_train) * 100, 2)","32747db1":"logreg = LogisticRegression()\nlogreg.fit(X_train, Y_train)\n\nY_pred = logreg.predict(X_test)\n\nacc_log = round(logreg.score(X_train, Y_train) * 100, 2)","920f83a3":"gaussian = GaussianNB() \ngaussian.fit(X_train, Y_train)  \nY_pred = gaussian.predict(X_test)  \nacc_gaussian = round(gaussian.score(X_train, Y_train) * 100, 2)","f23c1c4c":"perceptron = Perceptron(max_iter=5)\nperceptron.fit(X_train, Y_train)\n\nY_pred = perceptron.predict(X_test)\n\nacc_perceptron = round(perceptron.score(X_train, Y_train) * 100, 2)","267f6d70":"linear_svc = LinearSVC()\nlinear_svc.fit(X_train, Y_train)\n\nY_pred = linear_svc.predict(X_test)\n\nacc_linear_svc = round(linear_svc.score(X_train, Y_train) * 100, 2)","00646933":"decision_tree = DecisionTreeClassifier() \ndecision_tree.fit(X_train, Y_train)  \nY_pred = decision_tree.predict(X_test)  \nacc_decision_tree = round(decision_tree.score(X_train, Y_train) * 100, 2)","97c9237d":"import tensorflow as tf\n\nclass myCallback(tf.keras.callbacks.Callback):\n        def on_epoch_end(self, epoch, logs={}):\n            try:\n                if(logs.get('acc') > 0.901):\n                    print(\"\/n Reached 90.1% accuracy so cancelling training!\")\n                    self.model.stop_training = True\n            except Exception:\n                pass\n                \ncallbacks = myCallback()\nmodel = tf.keras.models.Sequential([\n            # YOUR CODE STARTS HERE\n        \n        tf.keras.layers.Flatten(input_shape=(13, )),\n        tf.keras.layers.Dense(128, activation='relu'),\n        tf.keras.layers.Dense(128, activation='relu'),\n        tf.keras.layers.Dense(128, activation='relu'),\n        tf.keras.layers.Dense(256, activation = 'relu'),\n        tf.keras.layers.Dense(1, activation='sigmoid')\n            # YOUR CODE ENDS HERE\n    ])\n\nmodel.compile(optimizer='rmsprop', loss='binary_crossentropy', metrics=['accuracy'])","200fec3e":"history = model.fit(# YOUR CODE SHOULD START HERE\n        X_train,\n        Y_train,\n        epochs=488,\n        callbacks=[callbacks],\n        validation_data = (X_test, Y_pred)\n              # YOUR CODE SHOULD END HERE\n    )","a3d3417e":"acc_dnn = history.history['val_accuracy'][-1] * 100","10126a7d":"results = pd.DataFrame({\n    'Model': ['Support Vector Machines', 'Logistic Regression', \n              'Random Forest', 'Naive Bayes', 'Perceptron', \n              'Stochastic Gradient Decent', \n              'Decision Tree', 'DNN'],\n    'Score': [acc_linear_svc,  acc_log, \n              acc_random_forest, acc_gaussian, acc_perceptron, \n              acc_sgd, acc_decision_tree, acc_dnn]})\nresult_df = results.sort_values(by='Score', ascending=False)\nresult_df = result_df.set_index('Score')\nresult_df.head(8)","c198bedd":"from sklearn.model_selection import cross_val_score\nrf = RandomForestClassifier(n_estimators=100)\nscores = cross_val_score(rf, X_train, Y_train, cv=10, scoring = \"accuracy\")\nprint(\"Scores:\", scores)\nprint(\"Mean:\", scores.mean())\nprint(\"Standard Deviation:\", scores.std())","2e675900":"importances = pd.DataFrame({'feature':X_train.columns,'importance':np.round(random_forest.feature_importances_,3)})\nimportances = importances.sort_values('importance',ascending=False).set_index('feature')\nimportances.head(15)","e7f68a4d":"importances.plot.bar()","57245d0e":"train_df  = train_df.drop(\"not_alone\", axis=1)\ntest_df  = test_df.drop(\"not_alone\", axis=1)\n\ntrain_df  = train_df.drop(\"Parch\", axis=1)\ntest_df  = test_df.drop(\"Parch\", axis=1)","1262cda6":"# Random Forest\n\nrandom_forest = RandomForestClassifier(n_estimators=200, oob_score = True)\nrandom_forest.fit(X_train, Y_train)\nY_prediction = random_forest.predict(X_test)\n\nrandom_forest.score(X_train, Y_train)\n\nacc_random_forest = round(random_forest.score(X_train, Y_train) * 100, 2)\nprint(round(acc_random_forest,2,), \"%\")","58f9008e":"from sklearn.model_selection import cross_val_predict\nfrom sklearn.metrics import confusion_matrix\npredictions = cross_val_predict(random_forest, X_train, Y_train, cv=3)\nconfusion_matrix(Y_train, predictions)","8c7ebf16":"from sklearn.metrics import precision_score, recall_score\n\nprint(\"Precision:\", precision_score(Y_train, predictions))\nprint(\"Recall:\",recall_score(Y_train, predictions))","d6c1ff79":"X_train","0b21cd6e":"test_df","8748304d":"predic = random_forest.predict(X_test)","492868da":"submission = pd.DataFrame({'PassengerId':test_df['PassengerId'],'Survived':predic})\nsubmission.head(5)","8636fae5":"filename = 'Titanic Predictions 1.csv'\n\nsubmission.to_csv(filename,index=False)\n\nprint('Saved file: ' + filename)","0696a458":"### SibSp and Parch:","8d072567":"We will experiment with various different algorithms and then select the best one","fc80e043":"Age:\nNow we can tackle the issue with the age features missing values. I will create an array that contains random numbers, which are computed based on the mean age value in regards to the standard deviation and is_null.","c0e75f1d":"Now we are done with preprocessing :)","c75b9adc":"## Data Exploration\/Analysis","fb466662":"### Missing Data:","9334706a":"### ticket:","a106984f":"## Get the data","44a062f1":"## Categories","93460824":"You can see that men have a high probability of survival when they are between 18 and 30 years old, which is also a little bit true for women but not fully. For women the survival chances are higher between 14 and 40.\n\nFor men the probability of survival is very low between the age of 5 and 18, but that isn\u2019t true for women. Another thing to note is that infants also have a little bit higher probability of survival.\n\nSince there seem to be certain ages, which have increased odds of survival and because I want every feature to be roughly on the same scale, I will create age groups later on.","f3756c31":"The plot above confirms our assumption about pclass 1, but we can also spot a high probability that a person in pclass 3 will not survive.","902917aa":"### Sex:\n","22677ab9":"Above you can see the 11 features + the target variable (survived). What features could contribute to a high survival rate ?\n\nTo me it would make sense if everything except \u2018PassengerId\u2019, \u2018Ticket\u2019 and \u2018Name\u2019 would be correlated with a high survival rate.","c97171bb":"### Pclass","9588c0d5":"## Submitting output file","d03e6cc7":"* Perceptron","13f0c9e8":"* Decision trees","050b9bef":"The training-set has 891 examples and 11 features + the target variable (survived). 2 of the features are floats, 5 are integers and 5 are objects. Below I have listed the features with a short description:\n\n```\nsurvival:    Survival \nPassengerId: Unique Id of a passenger. \npclass:    Ticket class     \nsex:    Sex     \nAge:    Age in years     \nsibsp:    # of siblings \/ spouses aboard the Titanic     \nparch:    # of parents \/ children aboard the Titanic     \nticket:    Ticket number     \nfare:    Passenger fare     \ncabin:    Cabin number     \nembarked:    Port of Embarkation\n```","209d1a88":"What we do here is make 2 columns one with passengerId taken from `test_df` and then our predictions","a3ecb9b6":"Above you can see that \u2018Fare\u2019 is a float and we have to deal with 4 categorical features: Name, Sex, Ticket and Embarked. Lets investigate and transfrom one after another.\n\nFare:\nConverting \u201cFare\u201d from float to int64, using the \u201castype()\u201d function pandas provides:","c21934a2":"* Logistic Regression","3d64a24d":"Embarked seems to be correlated with survival, depending on the gender.\n\nWomen on port Q and on port S have a higher chance of survival. The inverse is true, if they are at port C. Men have a high survival probability if they are on port C, but a low probability if they are on port Q or S.\n\nPclass also seems to be correlated with survival. We will generate another plot of it below.","0289d481":"### Embarked, Pclass and Sex:","1d7ddad2":"This is our X_train","e0fa7ea5":"Now we had earlier made a X_test for us lets predict values with that","95c4e7a6":"Usually this is the one that saves us :)","735da204":"* Gaussian Naive Bayes","9f71095c":"Name:\nWe will use the Name feature to extract the Titles from the Name, so that we can build a new feature out of that.","8ba93b6d":"Here we see clearly, that Pclass is contributing to a persons chance of survival, especially if this person is in class 1. We will create another pclass plot below.","c973a4fc":"Cabin:\nAs a reminder, we have to deal with Cabin (687), Embarked (2) and Age (177). First I thought, we have to delete the \u2018Cabin\u2019 variable but then I found something interesting. A cabin number looks like \u2018C123\u2019 and the letter refers to the deck. Therefore we\u2019re going to extract these and create a new feature, that contains a persons deck. Afterwords we will convert the feature into a numeric variable. The missing values will be converted to zero. In the picture below you can see the actual decks of the titanic, ranging from A to G.","1348584d":"The Embarked feature has only 2 missing values, which can easily be filled. It will be much more tricky, to deal with the \u2018Age\u2019 feature, which has 177 missing values. The \u2018Cabin\u2019 feature needs further investigation, but it looks like that we might want to drop it from the dataset, since 77 % of it are missing.","d95b45bf":"From the table above, we can note a few things. First of all, that we need to convert a lot of features into numeric ones later on, so that the machine learning algorithms can process them. Furthermore, we can see that the features have widely different ranges, that we will need to convert into roughly the same scale. We can also spot some more features, that contain missing values (NaN = not a number), that wee need to deal with.","90d9a58e":"## Converting features","44d9a6a8":"## ML models","51dfba0b":"Embarked:\n\nSince the Embarked feature has only 2 missing values, we will just fill these with the most common one.\n","475c431c":"### Let\u2019s take a more detailed look at what data is actually missing:","9e70c79d":"* linear Support Vecctor classifier","574cea47":"Above we can see that 38% out of the training-set survived the Titanic. We can also see that the passenger ages range from 0.4 to 80. On top of that we can already detect some features, that contain missing values, like the \u2018Age\u2019 feature.","20d2dc40":"# [Rishit Dagli](rishitdagli.ml)","970a67be":"### Age and sex","6a72dbb9":"## Importing the Libraries","09cce92e":"## Data preprocessing","d7369834":"Embarked:\nConvert \u2018Embarked\u2019 feature into numeric.","d670ec2f":"* Schocastic gradient descent","6d17a83a":"SibSp and Parch would make more sense as a combined feature, that shows the total number of relatives, a person has on the Titanic. I will create it below and also a feature that sows if someone is not alone.","c007dece":"## K-fold cross validation","7e579ffe":"## Choose best model","f7a0027a":"## Create new features","b36f1bb2":"## Confusion matrix","3c2fa1e1":"* Random Forest","b11f6a4f":"Here we will now make a new `DataFrame` which we will convert to csv for uploading in the competition"}}