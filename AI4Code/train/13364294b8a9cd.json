{"cell_type":{"923bc124":"code","d2aa5b7d":"code","3d3d1dad":"code","45a54949":"code","d9a8f7c4":"code","82608981":"code","3c45b9ed":"code","b6e062be":"code","36312ab6":"code","cb33ff82":"markdown","6f882acf":"markdown","5ba562fe":"markdown"},"source":{"923bc124":"!pip install kaggle-environments -U","d2aa5b7d":"from kaggle_environments import make\nimport json","3d3d1dad":"# create the environment. You can also specify configurations for seed and loglevel as shown below. If not specified, a random seed is chosen. \n# loglevel default is 0. \n# 1 is for errors, 2 is for match warnings such as units colliding, invalid commands (recommended)\n# 3 for info level, and 4 for everything (not recommended)\n# set annotations True so annotation commands are drawn on visualizer\n# set debug to True so print statements get shown\nenv = make(\"lux_ai_2021\", configuration={\"seed\": 562124210, \"loglevel\": 2, \"annotations\": True}, debug=True)\n# run a match between two agents, simple_agent is a default one\nsteps = env.run([\"simple_agent\", \"simple_agent\"])","45a54949":"# you can also render the replay inline as so. we recommend for best viewing experience to set width and height as large possible\n# if you are viewing this outside of the interactive jupyter notebook \/ kaggle notebooks mode, this may look cutoff\n# you may also want to close the output of this render cell or else the notebook might get laggy\n#env.render(mode=\"ipython\", width=500, height=500)\n","d9a8f7c4":"# run this if using kaggle notebooks\n!cp -r ..\/input\/lux-ai-2021\/* .\n# if working locally, download the `simple\/lux` folder from here https:\/\/github.com\/Lux-AI-Challenge\/Lux-Design-2021\/tree\/master\/kits\/python\n# and we recommend following instructions in there for local development with python bots","82608981":"%%writefile agent.py\n# we add this above so you can write this main agent code into a file for submission later\n\n# for kaggle-environments\nfrom lux.game import Game\nfrom lux.game_map import Cell, RESOURCE_TYPES\nfrom lux.constants import Constants\nfrom lux.game_constants import GAME_CONSTANTS\nfrom lux import annotate\nimport numpy as np\nimport math\nimport random\nimport copy\n\ndef get_random_step():\n    return np.random.choice(['s','n','w','e'])\n\n### Define helper functions\n# this snippet finds all resources stored on the map and puts them into a list so we can search over them\ndef find_resources(game_state):\n    resource_tiles: list[Cell] = []\n    width, height = game_state.map_width, game_state.map_height\n    for y in range(height):\n        for x in range(width):\n            cell = game_state.map.get_cell(x, y)\n            if cell.has_resource():\n                resource_tiles.append(cell)\n    return resource_tiles\n\n# the next snippet finds the closest resources that we can mine given position on a map\ndef find_closest_resources(pos, player, resource_tiles):\n    closest_dist = math.inf\n    closest_resource_tile = None\n    for resource_tile in resource_tiles:\n        # we skip over resources that we can't mine due to not having researched them\n        if resource_tile.resource.type == Constants.RESOURCE_TYPES.COAL and not player.researched_coal(): continue\n        if resource_tile.resource.type == Constants.RESOURCE_TYPES.URANIUM and not player.researched_uranium(): continue\n        dist = resource_tile.pos.distance_to(pos)\n        if dist < closest_dist:\n            closest_dist = dist\n            closest_resource_tile = resource_tile\n    return closest_resource_tile, closest_dist\n\n#Finds the closest city tile to a particular player\ndef find_closest_city_tile(pos, player):\n    closest_city_tile = None\n    closest_dist = math.inf\n    if len(player.cities) > 0:        \n        for k, city in player.cities.items():\n            for city_tile in city.citytiles:\n                dist = city_tile.pos.distance_to(pos)\n                if dist < closest_dist:\n                    closest_dist = dist\n                    closest_city_tile = city_tile\n    return closest_city_tile, closest_dist\n\ndef find_player_city(player,unit,player_tile_mapping):\n    closest_city_tile = None\n    destination_city=player_tile_mapping[unit.id]\n    closest_dist = math.inf\n    pos=unit.pos\n    if len(player.cities) > 0:\n        for k,city in player.cities.items():\n            print(city)\n            if city.cityid==destination_city:\n                 for city_tile in city.citytiles:\n                    dist = city_tile.pos.distance_to(pos)\n                    if dist < closest_dist:\n                        closest_dist = dist\n                        closest_city_tile = city_tile\n                        print(unit.id,'moving to city',city.cityid)\n                \n    return closest_city_tile\n\n#Find the total number of city tiles created by the player\ndef find_total_city_tiles(player):\n    total_tiles=0\n    for k, city in player.cities.items():\n            for city_tile in city.citytiles:\n                total_tiles+=1            \n    return total_tiles\n\n#Collision Handling logic. Checks if the proposed move is valid or not\ndef check_move_validity(unit,moved_pos_coord,directions):\n    direction=None\n  #  print('Unit',unit.id,'Proposed move',moved_pos_coord)\n  #  print('Collision list',collision_list)\n    moved_pos_tile=None\n    \n    if moved_pos_coord not in collision_list:\n        direction=directions\n#        collision_list.append([moved_pos_coord[0],moved_pos_coord[1]])\n        moved_pos_tile=moved_pos_coord\n        print(\"Updated\")        \n    else : \n        i=0\n#        print('Checking rando')\n        for i in range(4):\n            directions=get_random_step()\n            moved_pos=unit.pos.translate(directions,1)\n            moved_pos_coord=[moved_pos.x,moved_pos.y]\n            if moved_pos_coord not in collision_list:\n                moved_pos_tile=moved_pos_coord\n                print('Potential Collision detected, assigning random direction ',directions)\n                break\n    print('Unit',unit.id,'Accepted move',moved_pos_coord)\n    return directions,moved_pos_tile\n\n#If a move has been approved, updates the list of occupied tiles for all units of the player\ndef update_collision_list(unit,moved_pos_tile):\n    print('updating collision list',moved_pos_tile)\n    collision_list.append([moved_pos_tile[0],moved_pos_tile[1]]) \n    try:\n        collision_list.remove([unit.pos.x,unit.pos.y])\n    except :\n        print('Collision list removal exception occured',unit.pos.x,unit.pos.y)\n\n#Finds the adjacent tiles to all the citytiles to find new potential positions for citytiles\ndef find_adjacent_citytiles(player):\n    x=0\n    y=0\n    pos_empty_pos=[]\n    for k, city in player.cities.items():\n        for city_tile in city.citytiles:\n            x=city_tile.pos.x\n            y=city_tile.pos.y\n         #   print('City tile looking at ',x,y)\n            try:\n                dirs=[(1,0),(-1,0),(0,1),(0,-1)]\n                for d in dirs:                        \n                    possible_empty_tile = game_state.map.get_cell(x+d[0], y+d[1])       \n                  #  print(\"Possible empty tile\",possible_empty_tile.pos)\n                    if possible_empty_tile.has_resource() or possible_empty_tile.citytile is not None:\n                        continue\n                    else :\n                    #    print('Being appended',possible_empty_tile.pos)\n                        pos_empty_pos.append(possible_empty_tile.pos)\n                           #     action = unit.move(unit.pos.direction_to(pos_empty_pos))\n                           #     actions.append(action)\n                      #  print(\"Empty position found\",possible_empty_tile.pos)\n                        posFound=True\n            except Exception as e:\n                #print('Exception occured')\n                k=0\n         #   print(posFound,' posFound')    \n    return pos_empty_pos\n\n#Sorts the list of all potential empty tiles to find the tile closest to a unit. \ndef sort_tiles(unit,pos_empty_pos):\n    unit_pos=unit.pos\n    dist_list=[]\n    for pos in pos_empty_pos:\n       # print('Print looking at tile',pos.x,pos.y)\n        tile_pos=pos      \n        dist = tile_pos.distance_to(unit_pos)\n        dist_list.append(dist)\n    #print('Dist list',dist_list)    \n   # pos_empty_pos_sorted=[x for _, x in sorted(zip(dist_list, pos_empty_pos))]\n    dic=dict(zip(dist_list,pos_empty_pos))\n    dic=dict(sorted(dic.items()))\n#    print(dic)\n    pos_empty_pos_sorted=dic.values()\n  #  print('sorted list is ',pos_empty_pos_sorted)\n    return pos_empty_pos_sorted\n        \n\n#Identifies all the clusters of available resources on the map and then sorts them in a descending order based on size\ndef cluster_identification(player,game_state):\n    resource_tiles=find_resources(game_state)\n    cluster_size=0\n    cluster_size_mapping={}\n    dirs=[(1,0),(-1,0),(0,1),(0,-1),(2,0),(-2,0),(0,2),(0,-2)]\n    pos_list=[]\n    for tile in taken_tiles:\n        pos_list.append(tile.pos)\n    \n    for tile in resource_tiles:\n        if tile.pos in pos_list:\n            continue\n        \n        x,y=tile.pos.x,tile.pos.y\n        cluster_size=0\n        for d in dirs:     \n            try:\n                possible_resource_tile = game_state.map.get_cell(x+d[0], y+d[1])   \n\n            except Exception as e:\n                continue\n#                print('Tile overrun')\n            if possible_resource_tile.has_resource():\n                if possible_resource_tile.resource.type == Constants.RESOURCE_TYPES.COAL and not player.researched_coal(): continue\n                if possible_resource_tile.resource.type == Constants.RESOURCE_TYPES.URANIUM and not player.researched_uranium(): continue\n                cluster_size=cluster_size+1\n      #  print('Evaluating',tile.pos,cluster_size)\n        cluster_size_mapping[tile]=cluster_size\n    #    print('tile pos & cluster_size',x,y,cluster_size)    \n    cluster_size_mapping=sorted(cluster_size_mapping.items(), key=lambda x: x[1], reverse=True)\n    return cluster_size_mapping\n   # print(cluster_size_mapping)\n    \n#Provides the direction a unit needs to take to move closer to a particular cluster\ndef move_towards_cluster(unit):\n    big_tile=cluster_size_mapping[0][0]\n    print('Big tile',big_tile.pos,' resources ',cluster_size_mapping[0][1])\n    pos=big_tile.pos\n    moved_pos=unit.pos.translate(unit.pos.direction_to(pos),1)\n    moved_pos_coord=[moved_pos.x,moved_pos.y]\n    directions,moved_pos_tile=check_move_validity(unit,moved_pos_coord,unit.pos.direction_to(pos))\n    action = unit.move(directions)\n    print('Moving towards cluster',moved_pos)\n    moved=True\n    return action,big_tile\n\n# this snippet finds the number of coal and wood resources on the map\ndef find_resource_size(game_state):\n    coal=0\n    wood=0\n    width, height = game_state.map_width, game_state.map_height\n    for y in range(height):\n        for x in range(width):\n            cell = game_state.map.get_cell(x, y)\n            if cell.has_resource():\n                if cell.resource.type == Constants.RESOURCE_TYPES.COAL:\n                    coal=coal+1\n                if cell.resource.type == Constants.RESOURCE_TYPES.WOOD:\n                    wood=wood+1\n    return wood,coal\n\n#Maps the players to the cities. Cities with lowest fuel get mapped first. \ndef player_city_mapping(player):\n    x=0\n    y=0\n    pos_empty_pos=[]\n    city_fuel_mapping={}\n    city_player_mapping={}\n    units=copy.deepcopy(player.units)\n\n    for k, city in player.cities.items():\n        fuel=city.fuel\n        upkeep=city.get_light_upkeep()\n        steps=int(fuel\/upkeep)\n        print(city.cityid,'city id fuel',fuel,upkeep,steps)\n        city_fuel_mapping[city]=steps\n        \n    city_fuel_mapping=sorted(city_fuel_mapping.items(), key=lambda item: item[1])\n    city_fuel_mapping=[i[0] for i in city_fuel_mapping]\n    \n    dis=0\n#    print(city_fuel_mapping)\n    for city in city_fuel_mapping:\n        city_tile=city.citytiles[0]\n        tile_pos = city_tile.pos\n        min_dis=math.inf\n        min_unit=None\n        if len(units)>0:\n            for unit in units:\n                dis=tile_pos.distance_to(unit.pos)\n                if dis<=min_dis:\n                    min_dis=dis\n                    min_unit=unit\n            city_player_mapping[min_unit.id]=city\n            units.remove(min_unit)\n   # print('City unit mapping',city_player_mapping)\n    return city_player_mapping\n        \n\n# we declare this global game_state object so that state persists across turns so we do not need to reinitialize it all the time\ngame_state = None\ngame_state = None\nposFound=False\npos_empty_pos=[]\ncluster_unit=None\nbig_tile=None\n# this is the basic agent definition. At the moment this agent does nothing (and actually will survive for a bit before getting consumed by darkness)\ndef agent(observation, configuration):\n      \n    global game_state\n    global game_map\n    global taken_tiles\n    global posFound\n    global pos_empty_pos\n    global collision_list\n    global cluster_size_mapping\n    global cluster_unit\n    global big_tile\n    ### Do not edit ###\n    if observation[\"step\"] == 0:\n        game_state = Game()\n        game_state._initialize(observation[\"updates\"])\n        game_state._update(observation[\"updates\"][2:])\n        game_state.id = observation.player\n        game_map=game_state.map\n    else:\n        game_state._update(observation[\"updates\"])\n    \n    actions = []\n    action=None\n    moved=False\n    taken_tiles=[]\n    #PlayerCityMapping\n    player_tile_mapping={}\n    \n    #Cluster Size Mapping\n    \n    ### AI Code goes down here! ### \n    player = game_state.players[observation.player]\n    opponent = game_state.players[(observation.player + 1) % 2]\n    turn=game_state.turn\n    width, height = game_state.map.width, game_state.map.height\n    resource_tiles=find_resources(game_state)\n    night=game_state.turn % 40\n    isnight = 1 if night > 30 else 0\n    approaching_night= 1 if night > 25 else 0\n    total_city_tiles=find_total_city_tiles(player)\n\n    cities = list(player.cities.values())\n    cityfuel=0\n    growth_threshold=800\n    for city in cities:\n        cityfuel+=city.fuel\n#    print('cityfuel is'+ str(cityfuel))\n    print('GAME TURN '+str(game_state.turn))    \n    print('Unit volume',len(player.units))\n\n    #Adjust growth threshold based on size of the map    \n    try:\n        width=game_map.width\n        if width==12:\n            growth_threshold=800\n        elif width==16 :\n            growth_threshold=1000\n            \n    except Exception as e:\n        print('Thresholds are none')\n        \n    #Calculates clusters on a map every 10 turns to account for depleting resources\n    if game_state.turn%10==0:\n        cluster_size_mapping=cluster_identification(player,game_state)\n      #  print(cluster_size_mapping)\n#     for ele in cluster_size_mapping:\n#         print(ele[0].pos,ele[1])\n   #     raise Exception\n    collision_list=[]\n    for unit in player.units:\n        collision_list.append([unit.pos.x,unit.pos.y])\n       \n    #Player City Mapping being created\n    i=0\n    cluster_move_flag=False\n    city_player_mapping=player_city_mapping(player)\n\n    print('City Player mapping')\n    for k,v in city_player_mapping.items():\n        print(k,v.cityid)\n    \n    for unit in player.units:\n        if len(cities)>0:\n            i=i%len(cities)\n            player_tile_mapping[unit.id]=cities[i].cityid\n            i=i+1\n#    print('Player City Mapping',player_tile_mapping)\n    print('Approaching night',approaching_night)\n #   print('Collision List',collision_list)   \n    l=0\n    id_list=[]\n    for unit in player.units:\n        id_list.append(unit.id)\n    \n    for unit in player.units:\n        l=l+1\n        print('UNIT',unit.id)\n        pos_empty_pos=find_adjacent_citytiles(player)\n        moved=False\n        moved_pos_tile=None\n        print('Unit acting status ',unit.can_act())\n        if unit.can_act():\n            closest_city_tile, closest_dist=find_closest_city_tile(unit.pos,player) \n            closest_resource_tile, closest_resource_dist = find_closest_resources(unit.pos, player, resource_tiles)\n            if closest_resource_tile is None:\n                continue\n            \n            #Moving to another cluster\n            units  = len(player.units)\n            \n            if big_tile is not None:\n                if unit.pos==big_tile.pos:\n                    taken_tiles.append(big_tile)\n                    cluster_unit=None\n                    cluster_size_mapping=cluster_identification(player,game_state)\n                \n            \n            if cluster_unit is not None :\n                if cluster_unit.id==unit.id:\n                    print('Cluster Action')\n                    action,big_tile=move_towards_cluster(unit)\n                    actions.append(action)\n                    cluster_move_flag=True\n    #                print('Moving_towards cl')\n                    continue\n                \n            if units>=3 and (l==units) and cluster_move_flag==False :\n                if cluster_unit is None or cluster_unit.id not in id_list :                    \n                    print(\"Assigning a new cluster unit\")\n                    cluster_unit=unit\n                    action,big_tile=move_towards_cluster(unit)\n                    actions.append(action)\n                    cluster_move_flag=True\n                    continue\n                    \n            print(str(unit.id) + ' Unit has resources '+str(unit.cargo.wood))\n            \n    #        print(unit,' can build ',unit.can_build(game_map))\n            print('unit cooldown',unit.cooldown)\n            if unit.can_build(game_map):\n                print('can build')\n                player_tile= game_state.map.get_cell(unit.pos.x, unit.pos.y)\n\n                if (closest_dist<=1 or closest_resource_dist==1 ): \n                    action = unit.build_city()\n                    actions.append(action)\n                    posFound=False\n                    continue                    \n            else :\n                closest_resource_tile, closest_resource_dist = find_closest_resources(unit.pos, player, resource_tiles)\n               # print('total city tiles'+str(total_city_tiles))\n                \n                if closest_dist==0 and closest_resource_dist==1 and total_city_tiles>=5:\n                    continue\n                    \n                resource_pos=closest_resource_tile.pos\n                directions = unit.pos.direction_to(resource_pos)\n                \n                print('closest_resource_dist is '+str(closest_resource_dist))\n                if closest_resource_dist!=0:\n                    print(str(unit.id) +'Unit moving to resources')\n                    moved_pos=unit.pos.translate(directions,1)\n                    moved_pos_coord=[moved_pos.x,moved_pos.y]\n                    directions,moved_pos_tile=check_move_validity(unit,moved_pos_coord,directions)\n                    print(\"Check\",directions,moved_pos_tile)\n                    action=unit.move(directions)  \n                    \n               #If a growth threshold has been captured then look to grow city beyond a single tile\n                if cityfuel>=growth_threshold and approaching_night==False:\n                    #Find all empty city tiles \n                   # pos_empty_pos=find_adjacent_citytiles(player)\n                    if len(pos_empty_pos) >0 and (unit.cargo.wood+unit.cargo.coal + unit.cargo.uranium>=100):  \n                        dirs_considered=[]\n                      #  print('Possible Empty Tiles list',len(pos_empty_pos))\n                     #   print('Possible Empty tile',pos_empty_pos[0])\n                        \n                        #Sort possible empty tiles list in order of distance from the unit\n                        pos_empty_pos=sort_tiles(unit,pos_empty_pos)\n                        #loop through all empty position tiles to see if unit can move to an empty tile for construction\n                        for pos in pos_empty_pos:\n                            #Unit should move to closest adjacent position\n                            moved=False\n                            dir=unit.pos.direction_to(pos)\n                            dirs_considered.append(dir)\n                            possible_empty_pos=unit.pos.translate(dir,1)\n                            possible_empty_tile = game_state.map.get_cell(possible_empty_pos.x,possible_empty_pos.y)                                \n                            print('Moving tile & potential tile',pos.x,pos.y,possible_empty_pos.x,possible_empty_pos.y)\n                       #     print(possible_empty_tile.citytile)\n                            if  (possible_empty_tile.citytile is not None):\n                                print('move will lead to an occupied tile')\n                                continue\n                            else :\n                                moved_pos=unit.pos.translate(unit.pos.direction_to(pos),1)\n                                moved_pos_coord=[moved_pos.x,moved_pos.y]\n                                directions,moved_pos_tile=check_move_validity(unit,moved_pos_coord,unit.pos.direction_to(pos))\n                                action = unit.move(directions)\n                                \n                       #         collision_list.append([moved_pos.x,moved_pos.y])\n                                print('moving unit to an empty tile for construction')\n                                posFound=False\n                                moved=True\n                                pos_empty_pos=[]\n                                player_tile_mapping[unit.id]=[pos.x,pos.y]\n                             #   print(player_tile_mapping[unit.id])\n                                break\n                    \n                        print('Moved ',moved)\n                        #If a unit hasn't moved to an empty tile for construction then move to a random position\n                        if moved==False:\n                            print('Moving to a random position to find a way out')\n                            directions=get_random_step()\n                            moved_pos=unit.pos.translate(directions,1)\n                            moved_pos_coord=[moved_pos.x,moved_pos.y]\n                            directions,moved_pos_tile=check_move_validity(unit,moved_pos_coord,directions)\n                            action =unit.move(directions)\n                            actions.append(action)\n                            continue\n                            \n                     #   continue               \n             #   if posFound==False: \n                #If a unit has collected 100 resources or if night is approaching then move towards city\n                print('moved is',moved)\n                if ((unit.cargo.wood + unit.cargo.coal + unit.cargo.uranium >=100) or approaching_night==1) and moved==False:\n#                    closest_city_tile, closest_dist=find_closest_city_tile(unit.pos,player)\n                    #closest_city_tile=find_player_city(player,unit,player_tile_mapping)\n    \n                    #Tryin new approach by mappin city to closest resources. Cities are mapped in order of lowest resrouces available\n                   # print('City player mapping',city_player_mapping)\n                    if unit.id in city_player_mapping:\n                     #   print('matched')\n                        city=city_player_mapping[unit.id]\n                        closest_city_tile=city.citytiles[0]\n                    else:\n                        closest_city_tile,closest_dist=find_closest_city_tile(unit.pos,player)\n                    \n                  #  print('CLosest city tile',closest_city_tile)\n                    city_pos=closest_city_tile.pos\n                    directions = unit.pos.direction_to(city_pos)\n                    moved_pos=unit.pos.translate(directions,1)\n                    moved_pos_coord=[moved_pos.x,moved_pos.y]\n                    directions,moved_pos_tile=check_move_validity(unit,moved_pos_coord,directions)\n                    print('before moving back to city',directions,moved_pos_tile)\n                    action=unit.move(directions)        \n                    print(str(unit.id) + 'moving back to city',player_tile_mapping[unit.id],'distance',unit.pos.distance_to(city_pos))\n\n               # pos_empty_pos = list(set(pos_empty_pos))\n                print('ACTION',action)\n                if action is not None:\n                    if moved_pos_tile is not None:\n                        update_collision_list(unit,moved_pos_tile)\n                    actions.append(action)              \n                    \n  # max number of units available\n    units_cap = sum([len(x.citytiles) for x in player.cities.values()])\n    # current number of units\n    units  = len(player.units)\n    created_worker=None         \n    cities = list(player.cities.values())\n #   print('Wood Coal',wood,coal)\n    if len(cities) > 0:\n    #    city = cities[0]\n        if units<=5:\n            created_worker = (units >= units_cap)\n        else :\n            created_worker = (units >= int(0.7*units_cap))\n\n        for k, city in player.cities.items():\n            for city_tile in city.citytiles:\n                if city_tile.can_act():\n                    if created_worker==True and player.research_points<=200:\n                        # let's do research\n                        action = city_tile.research()\n                        print('City doing research')\n                        actions.append(action)\n                    else:\n                        # let's create one more unit in the last created city tile if we can\n                        action = city_tile.build_worker()\n                        print('City creating worker')\n                        actions.append(action)                    \n                        created_worker = True\n                #directions = []\n    actions = list(set(actions))\n    print('Actions ',actions)\n\n    return actions","3c45b9ed":"# run another match but with our empty agent\n#77935795\nenv = make(\"lux_ai_2021\", configuration={\"seed\": 163572896, \"loglevel\": 2}, debug=True)\nsteps = env.run(['simple_agent',\".\/agent.py\"])\nenv.render(mode=\"ipython\", width=800, height=900)","b6e062be":"# save the replay as a file. if working locally this should appear in your current directory, otherwise you can download\n# from this kaggle notebook by opening the output section of the data panel on the right\nreplay = env.toJSON()\nwith open(\"replay.json\", \"w\") as f:\n    json.dump(replay, f)\n# this replay can then be watched here https:\/\/2021vis.lux-ai.org\/","36312ab6":"!tar -czf submission.tar.gz *","cb33ff82":"## Kaggle Lux AI Competition\n\nThis is my first ever Simulation competition on Kaggle. I actually was quite lost when I started, but then I picked up the starter [notebook](https:\/\/www.kaggle.com\/ilialar\/lux-ai-risk-averse-baseline) from Ilia Larchenko to try and understand what was happening and then began writing my own code from scratch. After spending several days between writing code and debugging, I have a somewhat intelligent rule based agent that's currently scoring 600+ points on leaderboard. \n\nThese were some of the strategies deployed on my bot - \n* **Deferring City Growth** - As a defensive tactic, I deferred growth of cities until sufficient fuel was collected. I defined different thresholds for fuel collection based on the size of the map. Until the threshold was hit I didn't add a second tile on the map. This was done to ensure that the first city has enough fuel to survive rest of the game before further tiles and cities are added. This was done primarily to ensure that in the case all resources and units on the maps are exhausted, there is atleast one city surviving the game\n* **Identifying tiles for City growth** - The amount of fuel required per city tile is inversely related to the number of adjacent city tiles. Therefore in order to give our cities better chance of survival, it is important to ensure that new tiles are either added closer to resources or adjacent to already existing citytiles. For every unit, I try to find the nearest adjacent city tile and move the unit towards it for constructing a new city tile. \n* **Collision Handling** - In my initial bots, lots of moves were getting cancelled because units ended up colliding with each other. I had to write a collision handling logic where I maintain a list with tiles occupied by all units and before moving a particular unit, I run a check to see if the tile where a unit is looking to move is unoccupied. This list keeps getting updated after every turn to ensure the latest position of all tiles is getting captured. \n* **Surviving the night** - If the cities & units don't have enough fuel before the onset of night, then there is a good chance that they may end up dying. Therefore its very important to ensure that all units & cities are stocked with enough fuel to survive the night. I applied checks on game turns to see if a night was approaching and ensured that units started moving back to cities before the onset of the night. Cities were sorted in the order of lowest volume of fuel and units were then assigned to cities. When night started approaching, every unit started moving back to the city assigned to it\n* **Cluster Identification** - An important aspect of this game is to ensure that the bot is able to identify big cluster of resources away from the starting point and starts growing cities there. This strategy kicks in if there are sufficient number of resources on the map. The last unit starts moving towards the biggest available cluster and starts growing the city there.\n* **Research** - Lots of maps available on the game environment have plenty of coal and uranium resources available. A city tile on any given turn has the option to either produce a worker or conduct research. The idea in initial turns is to focus more on research so that all the coal resources become accessible. Research is stopped when the uranium research is complete and thereafter the focus is only on producing more workers. \n* **Exception Handling** - I noticed a lot of matches were lost by my initial bots due to exception conditions like all resources getting exhausted on the maps or all city tiles dying. I added several try catch blocks to ensure I don't end up losing the match midway through the game. \n\n\nThis is the simple strategy deployed on my bot so far - \n1. At the beginning of the game, start moving towards resource tiles & collect resources\n2. Until a particular growth threshold has been reached, continue depositing the resources to the initial city tile\n3. Once the growth threshold has been reached, identify empty tiles adjacent to the citytile and start moving there to construct a new city tile\n4. If a night is approaching, ensure the unit moves back to the city assigned to it\n5. Once there are enough number of units on the map, ensure that the last unit is always looking to move towards the biggest cluster on the map. Once it gets there it should start growing a city on that cluster","6f882acf":"## Create a submission\nNow we need to create a .tar.gz file with main.py (and agent.py) at the top level. We can then upload this!","5ba562fe":"## Learnings and Next Steps\n\n* **Python for Software Engineering** - As a data analyst, my usage for python so far was largely restricted to using pandas, numpy, ML packages & visualization libraries like Plotly & Seaborn. I hadn't really ever used python for a software engineering task. This competition has been a great learning for me so far where I have had to focus a lot on software engineering & debugging side of things while extensively using inbuilt data structures\n* **Rapid City Growth** - More successful bots in the 1000+ range are able to completely dominate the map and grow very rapidly to 20+tiles & workers. I need to figure out a way to emulate that as well\n* **Optimizing City Shape** - Cities with tiles in straight lines tend to burn more energy than cities in a polygon shape. So far my bot has a huge weakness that its developing small cities with 2-3 tiles and I am in no way optimizing for shape. Would like to do that soon.\n* **Usage of Carts** - I have come up against lots of opponents using carts & roads. Its worth a try since carts can hold up a lot of fuel and move much faster than workers. \n* **Observing Opponent Behavior** - So far my bot has only been focused on its own actions and strategy for growing on the map. It hasn't been observing what an opponent is doing and changing its strategy to best deal with it. I am not yet sure how to go about this, but I feel this change would be critical to ensure I move up on the leaderboard. \n* **Reinforcement Learning** - I have been learning the RL specialization on Coursera for a month now and the primary motivation for picking up this problem was to be able to use RL for a simulation competition. I wanted to get started with a basic rule based agent to get familiar with the problem statement and the API. Now that I have been able to achieve that, the idea is to be able to hopefully create a half decent RL agent by the end of this competition. \n\n\nI will be making lots of updates to this notebook in the coming days and weeks. Please suggest improvements or provide feedback in the comments. "}}