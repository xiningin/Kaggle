{"cell_type":{"e297e1c6":"code","61211092":"code","3ff080f0":"code","44c70b9a":"code","dca91ea2":"code","fbf2f67f":"code","a73381a4":"code","16e23731":"code","ddb1f218":"markdown","108e0206":"markdown","0210ad5a":"markdown","224007aa":"markdown"},"source":{"e297e1c6":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","61211092":"from datetime import datetime\n\nraw_data = pd.read_csv(\"\/kaggle\/input\/us-preferred-stocks\/preferred.csv\")\n\ncolumns = [\"Issuer\", \"Ticker\", \"Current Price\", \"Current Yield\", \"Yield to Worst\", \"Quarterly Int\/Div\", \"1st Call\"]\nrel_data = raw_data[columns]","3ff080f0":"rel_data.head()","44c70b9a":"rel_data = rel_data[rel_data[\"Ticker\"].notna()]\nrel_data = rel_data[rel_data[\"Current Yield\"] != \"#VALUE!\"]\nrel_data = rel_data[rel_data[\"Yield to Worst\"] != \"#VALUE!\"]\nrel_data = rel_data[rel_data[\"Yield to Worst\"] != \"Susp\"]\nrel_data = rel_data[(rel_data[\"1st Call\"] != \"None\") & (rel_data[\"1st Call\"] != \"Anytime\") & (rel_data[\"1st Call\"] != \"Non-Call\") & (rel_data[\"1st Call\"] != \"Never\") & (rel_data[\"1st Call\"] != \"NONE\")]\nrel_data[\"1st Call\"][160] = '5\/31\/2019'","dca91ea2":"rel_data[\"Current Price\"] = [str(x).replace(\"$\", \"\") for x in rel_data[\"Current Price\"]]\nrel_data[\"Current Price\"] = [float(x) for x in rel_data[\"Current Price\"]]\nrel_data[\"Current Yield\"] = [str(x).replace(\"%\", \"\") for x in rel_data[\"Current Yield\"]]\nrel_data[\"Current Yield\"] = [float(x) for x in rel_data[\"Current Yield\"]]\nrel_data[\"Yield to Worst\"] = [str(x).replace(\"%\", \"\") for x in rel_data[\"Yield to Worst\"]]\nrel_data[\"Yield to Worst\"] = [float(x) for x in rel_data[\"Yield to Worst\"]]\nrel_data[\"Quarterly Int\/Div\"] = [str(x).replace(\"$\", \"\") for x in rel_data[\"Quarterly Int\/Div\"]]\nrel_data[\"Quarterly Int\/Div\"] = [float(x) for x in rel_data[\"Quarterly Int\/Div\"]]","fbf2f67f":"rel_data[\"Price Diff\"] = [25 - x for x in rel_data[\"Current Price\"]]\n\ndatetime_version = [datetime.strptime(x, \"%m\/%d\/%Y\") for x in rel_data[\"1st Call\"]]\nrel_data[\"1st Call\"] = datetime_version\n\nrel_data[\"remaining_dividends\"] = [(x - datetime.today()).days \/\/ 90 for x in rel_data[\"1st Call\"]]\nrel_data.loc[rel_data.remaining_dividends < 0, \"remaining_dividends\"] = 0\n\nrel_data[\"fair_price\"] = 25 + rel_data[\"Quarterly Int\/Div\"] * rel_data[\"remaining_dividends\"]\nrel_data[\"price_premium\"] = rel_data[\"Current Price\"] - rel_data[\"fair_price\"]","a73381a4":"rel_data.head()","16e23731":"print(rel_data[[\"Ticker\", \"Current Price\", \"fair_price\", \"price_premium\", \"1st Call\"]].sort_values(by=\"price_premium\", ascending=False).head(50))","ddb1f218":"\n## Import Data, Libraries & Filter Columns","108e0206":"### By sorting these values from high to low, we can spot some anomalies in pricing where short trading opportunities may arise.","0210ad5a":"## Clean Data","224007aa":"## Create New Features"}}