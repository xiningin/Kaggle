{"cell_type":{"da475d24":"code","35c2b961":"code","f9c2eb47":"code","dadd4e3b":"code","e58bb4ce":"code","dfbd4fa1":"code","0b83f704":"code","30d043ec":"code","22e051dd":"code","88c25389":"code","7d30797e":"code","00c79736":"code","c8fe4bea":"code","c9b38926":"code","de23a228":"code","eddcd0cc":"code","39227f08":"code","93284dad":"code","f01712d5":"code","c1c08e1a":"code","f31d9329":"code","92ebae57":"code","84ce7ab4":"code","49944e98":"code","32d9f507":"code","78ce2633":"code","9521ab68":"code","dc0420d4":"code","f15d253f":"code","34e145a1":"code","56d9aaa2":"code","a396e478":"code","7a392a69":"code","161cd851":"code","18e6e8f9":"code","a95dd838":"code","fff9f496":"code","a785eac2":"code","bcb89a83":"code","74fd9381":"code","fe0af42e":"code","24424844":"code","32e77a28":"code","3e08b217":"code","86a50af0":"code","a8c042e9":"code","d123a040":"code","197712dd":"code","6016d27e":"code","346617d3":"code","3c2ba731":"code","6f6d0d00":"code","35540d07":"code","2029303e":"code","53bc950e":"code","7d578f0f":"code","d5418028":"code","0f3a7c15":"code","07abe4e6":"code","380b70e0":"code","69131620":"code","c3200289":"code","bf900d83":"code","35a28bb2":"code","50d7fa27":"code","0a6ca423":"code","408bb375":"code","13d9a7b0":"code","0cb3ccfa":"code","2adcddd7":"code","912338f4":"code","ef5c2a4f":"code","c4a578c5":"code","75488462":"code","52f61eb8":"code","994027d1":"code","e1ec3c83":"code","0fa505e2":"code","700ca722":"code","025e3687":"code","86318146":"code","3dc51b3e":"code","05893dd6":"code","84b1021c":"code","67ec3f5e":"code","8128a9c2":"code","a889f02f":"code","5a63baea":"code","72d07ff4":"code","5bf1f3ce":"code","99c618d2":"code","93e76484":"code","523cab4e":"code","0726b396":"code","cbeb9a36":"code","43953450":"code","0d2a25dc":"code","1b621049":"code","6cc40da7":"code","fff53967":"code","c3a1e3a6":"code","14afc366":"code","d1371ca6":"code","b16e89c0":"code","fb3d304a":"code","ba3b9a94":"code","a1020c26":"code","116c853d":"code","835ac8bd":"code","1dfcf854":"code","c884d0cc":"code","da7ed70f":"code","98e43beb":"code","c5288346":"code","d1914e69":"code","9615da52":"code","32f25853":"code","4ab37799":"code","a781bcdc":"code","4dfa827c":"code","ac1d668c":"code","8d2fb597":"code","f3b0ee9e":"code","ad8ebae5":"code","9aa86fec":"code","f1a4d291":"code","ed9daf7f":"code","416c5609":"markdown","e690d977":"markdown","82bd5db6":"markdown","5f7ad06d":"markdown","da4d122b":"markdown","c02e6498":"markdown","c117593e":"markdown","28542bb9":"markdown","ef020ab9":"markdown","9967c4a2":"markdown","a25886d1":"markdown","1476f672":"markdown","712459c9":"markdown","98f56576":"markdown","632c299a":"markdown","ca8a3687":"markdown","28659952":"markdown","601da277":"markdown","5342e8fc":"markdown","37fb5607":"markdown","e0f97f3e":"markdown","eea917fe":"markdown","087f7aed":"markdown","f7d975f3":"markdown","26b00505":"markdown","54e5df79":"markdown","e7229329":"markdown","86d5e9e5":"markdown","fac9c8d4":"markdown","92b309a8":"markdown","7cc7cee0":"markdown","2e0ff6ec":"markdown","00879f8f":"markdown","65489f13":"markdown","571bf805":"markdown","71add93f":"markdown","02d7af23":"markdown","a2c27a03":"markdown","ae7abca4":"markdown","ec237531":"markdown","a693948a":"markdown","2667a114":"markdown","0884ad7a":"markdown","9f4ba7f0":"markdown","dd761a65":"markdown"},"source":{"da475d24":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","35c2b961":"#LOADING THE PUBG DATASET\ndata=pd.read_csv('..\/input\/pubg-dataset\/pubg_data.csv')\ndata.head()","f9c2eb47":"data.info()","dadd4e3b":"data.isnull().sum()","e58bb4ce":"data.shape","dfbd4fa1":"data.drop_duplicates(inplace=True)","0b83f704":"data.shape","30d043ec":"data.describe()","22e051dd":"#for checking the dataset is balanced or not\ndata.winPlacePerc.value_counts()","88c25389":"#visulizaing the LABEL\nimport seaborn as sns\nsns.countplot(x='winPlacePerc',data=data)","7d30797e":"mino_class=len(data[data['winPlacePerc']==1])\nprint(mino_class)","00c79736":"majo_class_index=data[data['winPlacePerc']== 0].index\nprint(majo_class_index)","c8fe4bea":"mino_class_index=data[data['winPlacePerc']== 1].index","c9b38926":"random_majority_indices=np.random.choice(majo_class_index,mino_class,replace=False)\nlen(random_majority_indices)","de23a228":"under_sample_indices=np.concatenate([mino_class_index,random_majority_indices])\nlen(under_sample_indices)","eddcd0cc":"df=data.loc[under_sample_indices]","39227f08":"df.winPlacePerc.value_counts()","93284dad":"#DROPPING THE NOT IMPORTANT FEATURE\nn_data=df.drop(['Unnamed: 0','Id','groupId','matchId'],axis=1)\nn_data.head()","f01712d5":"#CONVERTING CATEGORICAL VARIABLE IN TO NUMERICAL\nfrom sklearn.preprocessing import LabelEncoder\nlabel_model=LabelEncoder()\nn_data['n_matchType']=label_model.fit_transform(n_data['matchType'])","c1c08e1a":"#DROPPING THE CATEGORICAL COLUMN\nn_data.drop('matchType',axis=1,inplace=True)","f31d9329":"n_data.head()","92ebae57":"#CHECKING UNIQUE VALUE FOR THE ASSIST FEATURE\nn_data.assists.unique()","84ce7ab4":"#CHECKING DISTRIBUTION OF THE ASSIST FEATURE\nimport matplotlib.pyplot as plt\nplt.figure(figsize=(15,10))\nsns.countplot(x='assists',data=n_data)","49944e98":"#CHECKING UNIQUE VALUE FOR THE BOOSTS FEATURE\nn_data.boosts.unique()","32d9f507":"#CHECKING DISTRIBUTION OF THE BOOSTS FEATURE\nplt.figure(figsize=(15,10))\nsns.countplot(x='boosts',data=n_data)","78ce2633":"n_data.damageDealt.unique()","9521ab68":"#CHECKING DISTRIBUTION OF THE DAMAGEDEALT FEATURE\nplt.figure(figsize=(15,10))\nsns.histplot(x='damageDealt',data=n_data,bins=50)","dc0420d4":"n_data.DBNOs.unique()","f15d253f":"#CHECKING DISTRIBUTION OF THE DBNOs FEATURE\nplt.figure(figsize=(15,10))\nsns.countplot(x='DBNOs',data=n_data)","34e145a1":"n_data.headshotKills.unique()","56d9aaa2":"#CHECKING DISTRIBUTION OF THE headshotKills FEATURE\nplt.figure(figsize=(15,10))\nsns.countplot(x='headshotKills',data=n_data)","a396e478":"n_data.heals.unique()","7a392a69":"#CHECKING DISTRIBUTION OF THE heals FEATURE\nplt.figure(figsize=(15,10))\nsns.countplot(x='heals',data=n_data)","161cd851":"n_data.killPlace.unique()","18e6e8f9":"#CHECKING DISTRIBUTION OF THE killPlace FEATURE\nplt.figure(figsize=(15,10))\nsns.histplot(x='killPlace',data=n_data)","a95dd838":"n_data.killPoints.unique()","fff9f496":"#CHECKING DISTRIBUTION OF THE killPoints FEATURE\nplt.figure(figsize=(15,10))\nsns.histplot(x='killPoints',data=n_data,bins=30)","a785eac2":"n_data.kills.unique()","bcb89a83":"#CHECKING DISTRIBUTION OF THE kills FEATURE\nplt.figure(figsize=(15,10))\nsns.countplot(x='kills',data=n_data)","74fd9381":"n_data.killStreaks.unique()","fe0af42e":"#CHECKING DISTRIBUTION OF THE killStreaks FEATURE\nplt.figure(figsize=(15,10))\nsns.countplot(x='killStreaks',data=n_data)","24424844":"n_data.longestKill.unique()","32e77a28":"#CHECKING DISTRIBUTION OF THE longestKill FEATURE\nplt.figure(figsize=(15,10))\nsns.histplot(x='longestKill',data=n_data,bins=30)","3e08b217":"sns.boxplot(x='winPlacePerc',y='longestKill',data=n_data)","86a50af0":"n_data.matchDuration.unique()","a8c042e9":"#CHECKING DISTRIBUTION OF THE matchDuration FEATURE\nplt.figure(figsize=(15,10))\nsns.histplot(x='matchDuration',data=n_data,bins=30)","d123a040":"n_data.maxPlace.unique()","197712dd":"#CHECKING DISTRIBUTION OF THE maxPlace FEATURE\nplt.figure(figsize=(15,10))\nsns.histplot(x='maxPlace',data=n_data)","6016d27e":"n_data.numGroups.unique()","346617d3":"#CHECKING DISTRIBUTION OF THE numGroups FEATURE\nplt.figure(figsize=(15,10))\nsns.histplot(x='numGroups',data=n_data)","3c2ba731":"n_data.rankPoints.unique()","6f6d0d00":"#CHECKING DISTRIBUTION OF THE rankPoints FEATURE\nplt.figure(figsize=(15,10))\nsns.histplot(x='rankPoints',data=n_data,bins=30)","35540d07":"n_data.revives.unique()","2029303e":"#CHECKING DISTRIBUTION OF THE revives FEATURE\nplt.figure(figsize=(15,10))\nsns.countplot(x='revives',data=n_data)","53bc950e":"n_data.rideDistance.unique()","7d578f0f":"#CHECKING DISTRIBUTION OF THE rideDistance FEATURE\nplt.figure(figsize=(15,10))\nsns.histplot(x='rideDistance',data=n_data,bins=30)","d5418028":"n_data.roadKills.unique()","0f3a7c15":"#CHECKING DISTRIBUTION OF THE roadKills FEATURE\nplt.figure(figsize=(15,10))\nsns.countplot(x='roadKills',data=n_data)","07abe4e6":"n_data.swimDistance.unique()","380b70e0":"#CHECKING DISTRIBUTION OF THE swimDistance FEATURE\nplt.figure(figsize=(15,10))\nsns.histplot(x='swimDistance',data=n_data,bins=20)","69131620":"n_data.teamKills.unique()","c3200289":"#CHECKING DISTRIBUTION OF THE teamKills FEATURE\nplt.figure(figsize=(15,10))\nsns.countplot(x='teamKills',data=n_data)","bf900d83":"n_data.vehicleDestroys.unique()","35a28bb2":"#CHECKING DISTRIBUTION OF THE vehicleDestroys FEATURE\nplt.figure(figsize=(15,10))\nsns.countplot(x='vehicleDestroys',data=n_data)","50d7fa27":"n_data.walkDistance.unique()","0a6ca423":"#CHECKING DISTRIBUTION OF THE walkDistance FEATURE\nplt.figure(figsize=(15,10))\nsns.histplot(x='walkDistance',data=n_data,bins=30)","408bb375":"n_data.weaponsAcquired.unique()","13d9a7b0":"#CHECKING DISTRIBUTION OF THE weaponsAcquired FEATURE\nplt.figure(figsize=(15,10))\nsns.histplot(x='weaponsAcquired',data=n_data)","0cb3ccfa":"n_data.winPoints.unique()","2adcddd7":"#CHECKING DISTRIBUTION OF THE  winPoints FEATURE\nplt.figure(figsize=(15,10))\nsns.histplot(x='winPoints',data=n_data,bins=30)","912338f4":"n_data.winPlacePerc.value_counts()","ef5c2a4f":"import matplotlib.pyplot as plt\nplt.figure(figsize=(25,25))\nsns.heatmap(n_data.corr(),annot=True)","c4a578c5":"f,ax1 = plt.subplots(figsize =(20,10))\nsns.pointplot(x='heals',y='winPlacePerc',data=data,color='lime',alpha=0.8)\nsns.pointplot(x='boosts',y='winPlacePerc',data=data,color='blue',alpha=0.8)\nplt.text(4,0.6,'Heals',color='lime',fontsize = 17,style = 'italic')\nplt.text(4,0.55,'Boosts',color='blue',fontsize = 17,style = 'italic')\nplt.xlabel('Number of heal\/boost items',fontsize = 15,color='blue')\nplt.ylabel('Win Percentage',fontsize = 15,color='blue')\nplt.title('Heals vs Boosts',fontsize = 20,color='blue')\nplt.grid()\nplt.show()","75488462":"solos = n_data[n_data['numGroups']>50]\nduos = n_data[(n_data['numGroups']>25) & (n_data['numGroups']<=50)]\nsquads = n_data[n_data['numGroups']<=25]","52f61eb8":"f,ax1 = plt.subplots(figsize =(20,10))\nsns.pointplot(x='kills',y='winPlacePerc',data=solos,color='black',alpha=0.8)\nsns.pointplot(x='kills',y='winPlacePerc',data=duos,color='#CC0000',alpha=0.8)\nsns.pointplot(x='kills',y='winPlacePerc',data=squads,color='#3399FF',alpha=0.8)\nplt.text(37,0.6,'Solos',color='black',fontsize = 17,style = 'italic')\nplt.text(37,0.55,'Duos',color='#CC0000',fontsize = 17,style = 'italic')\nplt.text(37,0.5,'Squads',color='#3399FF',fontsize = 17,style = 'italic')\nplt.xlabel('Number of kills',fontsize = 15,color='blue')\nplt.ylabel('Win Percentage',fontsize = 15,color='blue')\nplt.title('Solo vs Duo vs Squad Kills',fontsize = 20,color='blue')\nplt.grid()\nplt.show()","994027d1":"f,ax1 = plt.subplots(figsize =(20,10))\nsns.pointplot(x='DBNOs',y='winPlacePerc',data=duos,color='#CC0000',alpha=0.8)\nsns.pointplot(x='DBNOs',y='winPlacePerc',data=squads,color='#3399FF',alpha=0.8)\nsns.pointplot(x='assists',y='winPlacePerc',data=duos,color='#FF6666',alpha=0.8)\nsns.pointplot(x='assists',y='winPlacePerc',data=squads,color='#CCE5FF',alpha=0.8)\nsns.pointplot(x='revives',y='winPlacePerc',data=duos,color='#660000',alpha=0.8)\nsns.pointplot(x='revives',y='winPlacePerc',data=squads,color='#000066',alpha=0.8)\nplt.text(14,0.5,'Duos - Assists',color='#FF6666',fontsize = 17,style = 'italic')\nplt.text(14,0.45,'Duos - DBNOs',color='#CC0000',fontsize = 17,style = 'italic')\nplt.text(14,0.4,'Duos - Revives',color='#660000',fontsize = 17,style = 'italic')\nplt.text(14,0.35,'Squads - Assists',color='#CCE5FF',fontsize = 17,style = 'italic')\nplt.text(14,0.3,'Squads - DBNOs',color='#3399FF',fontsize = 17,style = 'italic')\nplt.text(14,0.25,'Squads - Revives',color='#000066',fontsize = 17,style = 'italic')\nplt.xlabel('Number of DBNOs\/Assits\/Revives',fontsize = 15,color='blue')\nplt.ylabel('Win Percentage',fontsize = 15,color='blue')\nplt.title('Duo vs Squad DBNOs, Assists, and Revives',fontsize = 20,color='blue')\nplt.grid()\nplt.show()","e1ec3c83":"#cols = ['assists','boosts','damageDealt','DBNOs','headshotKills','heals','kills','killStreaks','longestKill','revives','rideDistance','swimDistance','walkDistance','weaponsAcquired','winPlacePerc']\n#sns.pairplot(n_data[cols], height = 2.5)\n#plt.show()","0fa505e2":"features=n_data.drop(['killPlace','killPoints','matchDuration','maxPlace','numGroups','n_matchType','rankPoints','roadKills','teamKills','vehicleDestroys','winPoints','winPlacePerc'],axis=1).values\nfeatures","700ca722":"label=n_data['winPlacePerc'].values\nlabel","025e3687":"from sklearn.model_selection import train_test_split\n(X_train,X_test,y_train,y_test)=train_test_split(features,label,test_size=0.3)","86318146":"from sklearn.preprocessing import StandardScaler\nstd_model=StandardScaler()\nX_train_std_features=std_model.fit_transform(X_train)\nX_test_std_features=std_model.transform(X_test)","3dc51b3e":"X_train.shape","05893dd6":"X_test.shape","84b1021c":"y_train.shape","67ec3f5e":"from sklearn import svm\nSVM_model = svm.SVC()","8128a9c2":"SVM_model.fit(X_train_std_features,y_train)","a889f02f":"y_predicted_SVM = SVM_model.predict(X_test_std_features)","5a63baea":"SVM_model.score(X_test_std_features,y_test)","72d07ff4":"print(\"Precision:\",metrics.precision_score(y_test, y_predicted_SVM))\nprint(\"Recall:\",metrics.recall_score(y_test, y_predicted_SVM))","5bf1f3ce":"from sklearn.linear_model import LogisticRegression\nlogistic_model=LogisticRegression()","99c618d2":"logistic_model.fit(X_train_std_features,y_train)","93e76484":"y_predicted_Logistic = logistic_model.predict(X_test_std_features)","523cab4e":"logistic_model.score(X_test_std_features,y_test)","0726b396":"from sklearn import metrics\nprint(\"Accuracy:\",metrics.accuracy_score(y_test, y_predicted_Logistic))\nprint(\"Precision:\",metrics.precision_score(y_test, y_predicted_Logistic))\nprint(\"Recall:\",metrics.recall_score(y_test, y_predicted_Logistic))","cbeb9a36":"from sklearn.neighbors import KNeighborsClassifier\nKNN_model = KNeighborsClassifier(n_neighbors = 5)\nKNN_model.fit(X_train_std_features, y_train)","43953450":"y_predicted_KNN = KNN_model.predict(X_test_std_features) ","0d2a25dc":"KNN_model.score(X_test_std_features,y_test)","1b621049":"print(\"Precision:\",metrics.precision_score(y_test,y_predicted_KNN ))\nprint(\"Recall:\",metrics.recall_score(y_test, y_predicted_KNN))","6cc40da7":"from sklearn.naive_bayes import GaussianNB\nnaive_bayes_model= GaussianNB()\nnaive_bayes_model.fit(X_train_std_features, y_train)","fff53967":"y_predicted_naive = naive_bayes_model.predict(X_test_std_features)","c3a1e3a6":"naive_bayes_model.score(X_test_std_features,y_test)","14afc366":"print(\"Accuracy:\",metrics.accuracy_score(y_test, y_predicted_naive))\nprint(\"Precision:\",metrics.precision_score(y_test, y_predicted_naive))\nprint(\"Recall:\",metrics.recall_score(y_test, y_predicted_naive))","d1371ca6":"from sklearn.tree import DecisionTreeClassifier\ndeseciontree_model=DecisionTreeClassifier()\ndeseciontree_model.fit(X_train_std_features, y_train)","b16e89c0":"y_predicted_deseciontree = deseciontree_model.predict(X_test_std_features)","fb3d304a":"deseciontree_model.score(X_test_std_features,y_test)","ba3b9a94":"print(\"Accuracy:\",metrics.accuracy_score(y_test, y_predicted_deseciontree))\nprint(\"Precision:\",metrics.precision_score(y_test, y_predicted_deseciontree))\nprint(\"Recall:\",metrics.recall_score(y_test, y_predicted_deseciontree))","a1020c26":"from sklearn.ensemble import RandomForestClassifier\nrandomforest_model= RandomForestClassifier(n_estimators = 10, criterion = 'entropy')\nrandomforest_model.fit(X_train_std_features, y_train)","116c853d":"y_predicted_randomforest = randomforest_model.predict(X_test_std_features)","835ac8bd":"randomforest_model.score(X_test_std_features,y_test)","1dfcf854":"print(\"Accuracy:\",metrics.accuracy_score(y_test, y_predicted_randomforest))\nprint(\"Precision:\",metrics.precision_score(y_test, y_predicted_randomforest))\nprint(\"Recall:\",metrics.recall_score(y_test, y_predicted_randomforest))","c884d0cc":"from sklearn.ensemble import AdaBoostClassifier\nAdaBoostClassifier_model= AdaBoostClassifier(n_estimators=100, random_state=0)","da7ed70f":"AdaBoostClassifier_model.fit(X_train_std_features,y_train )","98e43beb":"y_predicted_AdaBoostClassifier_model=AdaBoostClassifier_model.predict(X_test_std_features)","c5288346":"AdaBoostClassifier_model.score(X_test_std_features,y_test)","d1914e69":"print(\"Accuracy:\",metrics.accuracy_score(y_test, y_predicted_AdaBoostClassifier_model))\nprint(\"Precision:\",metrics.precision_score(y_test, y_predicted_AdaBoostClassifier_model))\nprint(\"Recall:\",metrics.recall_score(y_test, y_predicted_AdaBoostClassifier_model))","9615da52":"from sklearn.ensemble import GradientBoostingClassifier\nGradientBoostingClassifier_model=GradientBoostingClassifier(n_estimators=100,learning_rate=1.0)","32f25853":"GradientBoostingClassifier_model.fit(X_train_std_features,y_train)","4ab37799":"y_predicted_GradientBoostingClassifier_model=GradientBoostingClassifier_model.predict(X_test_std_features)","a781bcdc":"GradientBoostingClassifier_model.score(X_test_std_features,y_test)","4dfa827c":"print(\"Accuracy:\",metrics.accuracy_score(y_test,y_predicted_GradientBoostingClassifier_model ))\nprint(\"Precision:\",metrics.precision_score(y_test, y_predicted_GradientBoostingClassifier_model))\nprint(\"Recall:\",metrics.recall_score(y_test, y_predicted_GradientBoostingClassifier_model))","ac1d668c":"df1 = pd.DataFrame()\ndf1['Names'] = ['SVM','LogisticRegression','KNeighborsClassifier','GaussianNB','DecisionTreeClassifier','RandomForestClassifier','AdaBoostClassifier','GradientBoostingClassifier']\ndf1['Score'] = [0.889253051703759,0.8874887990878884,0.8757073572123414,0.8247113912840343,0.8354398602544568,0.8725310051707246,0.8884824986837838,0.8892495650385103]\ndf1['presecion']=[0.898326219707712,0.9071354886854985,0.8810610019632491,0.881912263177717,0.8400386724345992,0.8830845236816669,0.8951651745240253,0.8933200118204973]\ndf1['recall']=[0.8781466363902317,0.8636445955170444,0.869007982391374,0.7502821002187148,0.8291378181463578,0.8590891993926139,0.8803128874524608,0.884359806639455]\ndf1\n","8d2fb597":"sns.set_theme()\nCM =sns.color_palette(\"light:b\", as_cmap=True)\ndf1.style.background_gradient(cmap=CM)","f3b0ee9e":"plt.figure(figsize=(20,5))\nsns.set(style=\"whitegrid\")\nax = sns.barplot(x='Names',y = 'Score',data = df1)","ad8ebae5":"from sklearn.metrics import classification_report,roc_auc_score,roc_curve,auc\nreport_SVM = classification_report(y_test,y_predicted_SVM)\nprint(report_SVM)","9aa86fec":"roc_auc_score(y_test,y_predicted_SVM)","f1a4d291":"fpr,tpr,threshold =roc_curve(y_test,y_predicted_SVM)\nauc = auc(fpr,tpr)","ed9daf7f":"plt.figure(figsize=(5,5),dpi=100)\nplt.plot(fpr,tpr,linestyle='-',label = \"(auc = %0.3f)\" % auc)\nplt.xlabel('False Positive Rate')\nplt.ylabel('True Positive Rate')\nplt.legend()\nplt.show()","416c5609":"## DBNOs","e690d977":"## RANKPOINTS","82bd5db6":"## DATA PREPROCESSING:- FEATURE EXTRACTION","5f7ad06d":"## RIDEDISTANCE","da4d122b":"## TEAMKILLS","c02e6498":"# PROBLEM STATEMENT\n**PUBG win Prediction:- Process of the predection that team will win or not  so it will be decided by the feature like          assits,heals,boosts,damagedealt,revieve,walking distance,swimdistance,headshot,matchtype,teamkills,etc.**","c117593e":"## WEAPONSACQUIRED","28542bb9":"# MODEL BUILDING: LOGISTIC","ef020ab9":"## NUMGROUPS","9967c4a2":"# CORRELATION MATRIX\n\n\n**FINDING THE CORELATION BETWEEN FEATURES AND LABEL**","a25886d1":"# IMPORTANT FEATURES\n> **1.ASSITS(0.24)**\n\n> **2.Boosts(0.55)**\n\n> **3.DamageDealt(0.36)**\n\n> **4.DBNOs(0.22)**\n\n> **5.headshotkills(0.22)**\n\n> **6.Heals(0.38)**\n\n> **7.Kills(0.34)**\n\n> **8.Killstreak(0.31)**\n\n> **9.Longestkill(0.34)**\n\n>  **10.Revievs(0.2)**\n\n> **11.Ridedistance(0.33)**\n\n> **12.Swimdistance(0.14)**\n\n> **13.Walkdistance(0.74)**\n\n> **14.Weponacquired(0.51)**\n\n","1476f672":"## DAMAGEDEALT","712459c9":"## DATA LOADING","98f56576":"# MODEL BUILDING: GaussianNB","632c299a":"## PERFORMING UNDERSAMPLING","ca8a3687":"#  MODEL BUILDING: AdaBoostClassifier","28659952":"## LONGESTKILL","601da277":"## MATCHDURATION","5342e8fc":"## HEADSHOTKILL","37fb5607":"## ASSIST","e0f97f3e":"## KILLPLACE","eea917fe":"# STANDARSCALAR","087f7aed":"# INFO ABOUT DATASET\n**groupId - Integer ID to identify a group within a match. If the same group of players plays in different matches, they will have a different groupId each time.**\n\n\n\n**matchId - Integer ID to identify match. There are no matches that are in both the training and testing set.**\n\n\n**assists - Number of enemy players this player damaged that were killed by teammates.**\n\n\n****boosts - Number of boost items used.**\n\n\n**damageDealt - Total damage dealt. Note: Self inflicted damage is subtracted.**\n\n\n**DBNOs - Number of enemy players knocked.**\n\n\n**headshotKills - Number of enemy players killed with headshots.**\n\n\n**heals - Number of healing items used.**\n\n\n**killPlace - Ranking in match of number of enemy players killed.**\n\n\n**killPoints - Kills-based external ranking of player. (Think of this as an Elo ranking where only kills matter.)**\n\n\n**kills - Number of enemy players killed.**\n\n**\n**killStreaks - Max number of enemy players killed in a short amount of time.****\n\n\n**longestKill - Longest distance between player and player killed at time of death. This may be misleading, as downing a - player and driving away may lead to a large longestKill stat.**\n\n\n**maxPlace - Worst placement we have data for in the match. This may not match with numGroups, as sometimes the data skips over placements.**\n\n\n**numGroups - Number of groups we have data for in the match.**\n\n\n**revives - Number of times this player revived teammates.**\n\n\n**rideDistance - Total distance traveled in vehicles measured in meters**.\n\n\n**roadKills - Number of kills while in a vehicle.**\n\n\n**swimDistance - Total distance traveled by swimming measured in meters**.\n\n\n**teamKills - Number of times this player killed a teammate.**\n\n\n**vehicleDestroys - Number of vehicles destroyed.**\n\n\n**walkDistance - Total distance traveled on foot measured in meters.**\n\n\n**weaponsAcquired - Number of weapons picked up.**\n\n\n**winPoints - Win-based external ranking of player. (Think of this as an Elo ranking where only winning matters.)******\n","f7d975f3":"# TRAIN_TEST_SPLIT","26b00505":"# MODEL BUILDING: SVM","54e5df79":"# DATA VISULIZATION","e7229329":"## WINPOINTS","86d5e9e5":"## SWIMDISTANCE","fac9c8d4":"## ROADKILLS","92b309a8":"## DATA PREPROCESSING:- LABEL ENCODING","7cc7cee0":"## HEALS","2e0ff6ec":"## MAXPLACE","00879f8f":"## KILLS","65489f13":"## REVIVES","571bf805":"# MODEL BUILDING: DecisionTreeClassifier","71add93f":"# FINAL REPORT","02d7af23":"## VEHICLEDESTROYS","a2c27a03":"## KILLPOINTS","ae7abca4":"# EDA","ec237531":"#  MODEL BUILDING: RandomForestClassifier","a693948a":"## WALKDISTANCE","2667a114":"## KILLSTREAK","0884ad7a":"## BOOSTS","9f4ba7f0":"# MODEL BUILDING: KNeighborsClassifier","dd761a65":"#  MODEL BUILDING: GradientBoostingClassifier"}}