{"cell_type":{"0f9943de":"code","580eac7f":"code","64ba1f96":"code","2091bdf4":"code","7a384823":"code","3c842645":"code","e0401f14":"code","6bdaf881":"code","7b882a4d":"code","e42b50e5":"code","d135f1ca":"code","0ab96f27":"code","c23716ae":"code","213460ae":"code","b75ca4e4":"code","e8a50bfe":"code","4daf1293":"code","11baede8":"code","8dddfb4b":"code","20a82c79":"markdown","9f4413e2":"markdown","90dcd3a6":"markdown","eaf20a63":"markdown","ccc8ab6e":"markdown","8ecaf8be":"markdown","7bde8e74":"markdown","87a5bc39":"markdown","e69eab16":"markdown","1a22a515":"markdown","5d6f74c2":"markdown","3686650d":"markdown","1de2e0a0":"markdown","c7dd8909":"markdown","d0e3f07f":"markdown"},"source":{"0f9943de":"import calendar\nimport pandas as pd\nimport plotly.express as px\nfrom pathlib import Path\nfrom IPython.display import display\nimport plotly.io as pio\nimport numpy as np\nfrom collections import Counter\n\npio.templates.default = \"ggplot2\"","580eac7f":"FILEPATH = Path(\"..\/input\/friends-tv-show-all-seasons-and-episodes-data\/friends_info.csv\")","64ba1f96":"# Load data\ndf = pd.read_csv(FILEPATH)\nprint(df.shape)\ndisplay(df.sample(6))","2091bdf4":"# Clean Episodes column\ndf['Season-Episode'] = df['Episode']\ncleaned_column = []\nfor i, val in enumerate(df.Episode):\n    if '\\n' in val:\n        val1, val2 = val.split('\\n')\n        val = f\"{val1}{val2.split('-')[1]}\"\n    cleaned_column.append(val)\ndf.Episode = cleaned_column\n\n# Separate Month, Day, and Year from Date column\ntimedf = pd.DataFrame(\n    data=list(map(lambda x: list(map(int, x.split(\"\/\"))), df.Date)), \n    columns=[\"Month\", \"Day\", \"Year\"]\n)\n# df.Date = pd.to_datetime(popdf.Date) # convert string to date format\n\n# Make new columns with season number and episode number\ndf.Episode = df.Episode.replace({\"Special\": \"10-100\"}) # Some cleaning\nsedf = pd.DataFrame(list(map(lambda x: x.split(\"-\"), df.Episode)), columns=[\"Season\", \"Episode\"])\ndf = df.drop('Episode', axis=1)\ndf = pd.concat((timedf, df, sedf), axis=1)\n\n# Remove million from the count\ndf[\"U.S. viewers\"] = df[\"U.S. viewers\"].apply(lambda x: float(x.replace(' million', '')))\ndf = df.rename(columns={\"U.S. viewers\": \"U.S. viewers (in million)\"})","7a384823":"df[df['U.S. viewers (in million)'] == df['U.S. viewers (in million)'].max()].T","3c842645":"df[df['U.S. viewers (in million)'] == 52.46].T","e0401f14":"px.line(df, x='Date', y='U.S. viewers (in million)', title='U.S. Viewers trend over years',\n        hover_data=['Title', 'Season-Episode'])","6bdaf881":"df[\"Rating\"] = df[\"Rating\/Share\"].apply(lambda x: float(x.split(\"\/\")[0]))\npx.line(df, y=\"Rating\", x=\"Date\", title='Rating trend over years', hover_data=['Title', 'Season-Episode'])","7b882a4d":"df[\"Share\"] = df[\"Rating\/Share\"].apply(lambda x: float(x.split(\"\/\")[1]))\npx.line(df, y=\"Share\", x=\"Date\", title='Share trend over years', hover_data=['Title', 'Season-Episode'])","e42b50e5":"episodes_count = pd.Series(sorted(df.Month))\nepisodes_count = episodes_count.apply(lambda x: calendar.month_name[x])\npx.histogram(\n    x=episodes_count,\n    labels={'x':\"Months\", 'y': \"Number of Episodes\"},\n    title=\"Number of episodes per month\",\n)","d135f1ca":"epdf = df.copy().dropna().reset_index(drop=True)\npx.scatter(epdf.dropna(), x='Episode', y='Duration',size=\"Duration\", color='Duration',\n           color_continuous_scale=px.colors.sequential.RdBu, hover_data=['Title', 'Season-Episode'])","0ab96f27":"def writer_process(x):\n    if x == 'nan': \n        return ['NONE']\n    if x.startswith('Story'):\n        x = x.split(\":\")[1].split(\"\\n\")[0]\n        x = x.split(\"&\")\n        if isinstance(x, str):\n            return [x.strip()]\n        x = [v.strip() for v in x]\n        return x\n    else:\n        x = x.split(\"&\")\n        if isinstance(x, str):\n            return [x.strip()]\n        x = [v.strip() for v in x]\n        return x\nwriters_list = df[\"Written by\"].astype(str).apply(writer_process)\nwriters_list = [w for writers in writers_list for w in writers]","c23716ae":"unclean_list = ['Michael BorkowStory by : Jill Condon',\n'Amy Toomin\\nTeleplay by : Shana Goldberg-Meehan',\n'Andrew ReichGregory S. Malins',\n'Scott SilveriAndrew Reich',\n'Gregory S. MalinsMarta Kauffman',\n'Scott SilveriMarta Kauffman',\n'Scott SilveriMarta Kauffman',\n'Mike SikowitzMichael Borkow'\n]\nfor unclean in unclean_list:\n    writers_list.remove(unclean)\n\n# Now add the cleaned names\nwriters_list += [\n    'Michael Borkow', 'Jill Condon',\n    'Amy Toomin', 'Shana Goldberg-Meehan', \n    'Andrew Reich', 'Gregory S. Malins',\n    'Gregory S. Malins', 'Marta Kauffman',\n    'Scott Silveri', 'Marta Kauffman',\n    'Scott Silveri', 'Marta Kauffman',\n    'Mike Sikowitz', 'Michael Borkow'\n]\nnum_episodes_per_writer = Counter(writers_list)","213460ae":"px.histogram(y=writers_list, labels={'x': \"Number of Episodes\", 'y': 'Writer'}, height=800, title=\"Who wrote how many?\")","b75ca4e4":"# Get number of views for each writter\nunique_writers_names = list(set(writers_list))\nviews_per_writer = {name:[] for name in unique_writers_names}\nfor i, row in enumerate(df[\"Written by\"].astype(str).values):\n    for name in unique_writers_names:\n        if name in row:\n            views_per_writer[name].append(df[\"U.S. viewers (in million)\"][i])\n\n# Sum the number of views\nviews_per_writer = {name:round(sum(views), 3) for name, views in views_per_writer.items()}","e8a50bfe":"px.bar(x=views_per_writer.values(), y=views_per_writer.keys(),\n       height=800,\n       title=\"Total views (in million) each writter get in the entire series\",\n       labels={'x': 'Total Views (in million)', 'y': \"Writer's name\"},\n      )","4daf1293":"max(views_per_writer, key=views_per_writer.get)","11baede8":"print(f\"Ted Cohen's total number of view = {views_per_writer['Ted Cohen']} million\")\nprint(f\"Andrew Reich's total number of view = {views_per_writer['Andrew Reich']} million\")","8dddfb4b":"print(f\"Ted Cohen's total episodes = {num_episodes_per_writer['Ted Cohen']}\")\nprint(f\"Andrew Reich's total episodes = {num_episodes_per_writer['Andrew Reich']}\")","20a82c79":"# That's it \u270c\ud83c\udffc\n\n## Liked it? Upvote it \ud83d\ude01","9f4413e2":"# \u270d\ud83c\udffd Who is a good writer?","90dcd3a6":"#### So, how many episodes each of two writers wrote?","eaf20a63":"well... `Andrew Reich` wrote 20 episodes and has same number of views as `Ted Cohen` with 21 episodes. Therefore... ","ccc8ab6e":"According to the data, the writer's name who has maximum number of views is:","8ecaf8be":"# THE ONE we love the most \ud83d\udc47\ud83d\ude0d\n![Poster](https:\/\/www.gbposters.com\/media\/catalog\/product\/cache\/1\/image\/9df78eab33525d08d6e5fb8d27136e95\/f\/r\/friends-milkshake-maxi-poster-1.16.jpg)","7bde8e74":"### The answer to the question `Who is a good writer?` is **Andrew Reich**","87a5bc39":"# \ud83d\udcc8 Popularity Trends\n\n#### `Views`, `Rating`, and `Share` are highly correlated. They all look similar \ud83d\ude32\n#### The most popular and second most popular episodes have high peaks.","e69eab16":"# \ud83d\udcc6 Number of Episodes each Month","1a22a515":"# \ud83d\udcbe Load Data ","5d6f74c2":"# \ud83d\udc4f <span style=\"color:red\">The Most Popular Episode<\/span>\n\n![Super](https:\/\/storage.googleapis.com\/kagglesdsdata\/datasets\/1371292\/2276776\/processed.png?X-Goog-Algorithm=GOOG4-RSA-SHA256&X-Goog-Credential=databundle-worker-v2%40kaggle-161607.iam.gserviceaccount.com%2F20210527%2Fauto%2Fstorage%2Fgoog4_request&X-Goog-Date=20210527T144157Z&X-Goog-Expires=345599&X-Goog-SignedHeaders=host&X-Goog-Signature=87233d54d0835d7038bf0f0df3d300e31dc6fdb493a6e4a8a98cb388d2e17eeaf1d687253653955f98efc4f76acc80ff4dc96bc4fc2ac357bfe2ffa8369ad93e06217256cab5db9af6e605239ff236aaa656f65715218d79451087b67ca836472a8c8b0b13094aeb7722ebadc4ad03a6e1245b119674e69b246fddbc2c56289fbb5056f8451d6174aeeb1ed0f8890042ee81d9109946ebd56fce5fc4ee21b423b95b4fd0745a62f76cd70dbe743bd0771ed6b5629e1b5c227a08db73344cf37ab5052e9d951183766f2252b301a8b45900ba9243798996911a522b649208f7a228f72c690da76ca383bd4c32347641586298b660786cb5abd2d76d64d1d5690b)\n[Note on image] I took screenshots from episodes and stiched these images using [this open-source automatic webapp](https:\/\/jsvirk47.pythonanywhere.com\/). \ud83e\udd29 Look supercool!\n\n### **The One After the Super Bowl**: Ross goes to visit Marcel whilst on a trip to California and discovers he is working in commercials. Joey receives a fan letter from an attractive but unstable woman. Phoebe is asked to sing for children at a library.\n\n### Season - 2\n### Episode - 12\/13\n### Viewers - 52.9 Million","3686650d":"But, looking at the bar plot we can see that there is one other writer with the same number of views - `Andrew Reich`","1de2e0a0":"# \u23f1 Episode Duration\nSome episodes are longer. In column `Episode`, I labeled episodes, converted `\"24\/25\"` episode number to `2425`, just to plot the integer values. Hover over the bubbles in the scatter plot below to see the original name of episode under the field `Season-Episode`. I also included the title of the episode in hover fields.\n\nSo, Longer episodes are the ones with two parts. I think the data represents two parts as one episode.","c7dd8909":"# \ud83e\uddd0 Data Cleaning","d0e3f07f":"# \ud83d\udc4b <span style=\"color:orange\">The Last One<\/span>\n### Final Episode. This is the **second most popular episode** with 52.46 Million views.\n![Last One](https:\/\/storage.googleapis.com\/kagglesdsdata\/datasets\/1371292\/2276836\/processed%20%281%29.png?X-Goog-Algorithm=GOOG4-RSA-SHA256&X-Goog-Credential=databundle-worker-v2%40kaggle-161607.iam.gserviceaccount.com%2F20210527%2Fauto%2Fstorage%2Fgoog4_request&X-Goog-Date=20210527T145420Z&X-Goog-Expires=345599&X-Goog-SignedHeaders=host&X-Goog-Signature=336a04181d3eb8d474f02ad18a8c4cd952329326b5ccd3b940e4f66e1bdb2495cd035c9d2c19617fe99b68db419c4f5da802e6f2f4e614a046a457fdec04972eb1354ae0a8dc4e7118536def847b9b7255c953be3d075f8263c30ed5404ba8a2dd20faa69975296379527bea9931e49af2d982c92b76f8f1abcc9082f67901b684c908ab8d8db6ca98f65c0602e72407a401296ad589ea88f15d5723c5088732796665b41b0f25b5e5a1427609bf7001dbf8d86864e4a43f020a6d73b239b3302faf331c7a3ec59da6700327c46f12a7dacad64692875088fbc262ec139596871d049c30509bf320c76e509287969943738f53cd88ef2edc45f0b68da864b2aa)\n[Note on image] I took screenshots from episodes and stiched these images using [this open-source automatic webapp](https:\/\/jsvirk47.pythonanywhere.com\/). \ud83e\udd29 Look supercool!"}}