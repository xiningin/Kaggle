{"cell_type":{"26a81ae6":"code","53b2491f":"code","1d6f1d4c":"code","ec232bfe":"code","2646d631":"code","26e98b1b":"code","765e94ba":"code","7a14817c":"code","06af684c":"code","5da2f079":"code","911c49ab":"code","2250bd97":"code","97a1068b":"code","cd821b90":"markdown","18cca0b3":"markdown","b0bb0cf3":"markdown","39f5307c":"markdown","4e27416b":"markdown","8a26e1da":"markdown","0a7295a6":"markdown","9196523c":"markdown","646df474":"markdown","558c722e":"markdown","b98608af":"markdown","9e73c1f9":"markdown"},"source":{"26a81ae6":"#load the library and check its version\nimport numpy as np\nnp.__version__","53b2491f":"#Using List\nkaggle_list = [1,2,3,5,25,50]\nnp.array(kaggle_list)\n# array([ 1,  2,  3,  5, 25, 50])\n\nprint(\"np.array(kaggle_list) - \",np.array(kaggle_list))\n\n","1d6f1d4c":"#using in-built functions like arnage, random, zeros, ones, linspace\n\n#using arange(any_number) - which generates number from 0 to 10 range\nnp.arange(10) \n# [0 1 2 3 4 5 6 7 8 9]\n\n## using arange(start,end,step)  NOTE: end value will not be included \nnp.arange(10,50,5)\n# [10 15 20 25 30 35 40 45]\n\n#using random which generates randomly given n number\nnp.random.rand(5)\n#[0.17274775 0.82368477 0.11113462 0.89180089 0.070426  ]\n\n#To generate random integers where size = number of elements to return \nnp.random.randint(5)\n#[9 3 5 5 9 4]\n\n#creates array with zero's\nnp.zeros(10)\n# [0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]\n\n#creates array with one's\nnp.ones(10)\n# [1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]\n\n\n#creates array with  even space between the given range of values\nnp.linspace(0, 10, 5)\n# [ 0.   2.5  5.   7.5 10. ]\n\nprint(\"np.arange(10) - \",np.arange(10))\nprint(\"np.arange(10,50,5) - \",np.arange(10,50,5))\nprint(\"np.random.rand(5) - \",np.random.rand(5))\nprint(\"np.random.randint(10,size=6) - \",np.random.randint(10,size=6))\nprint(\"np.zeros(10) - \",np.zeros(10))\nprint(\"np.ones(10) - \",np.ones(10))\nprint(\"np.linspace(0, 10, 5) - \",np.linspace(0, 10, 5))","ec232bfe":"\nnp.random.randint(10, size=(3,4)) \n\n#dtype - denotes datatype\nnp.zeros((3,3), dtype='int')\n# array([[0, 0, 0],\n#        [0, 0, 0],\n#        [0, 0, 0]])\n\nnp.ones((3,3), dtype=float)\n# array([[1., 1., 1.],\n#        [1., 1., 1.],\n#        [1., 1., 1.]])\n\n#create an identity matrix\nnp.eye(3)\n# array([[ 1.,  0.,  0.],\n#       [ 0.,  1.,  0.],\n#       [ 0.,  0.,  1.]])\n\n#creating a matrix with a predefined value\nnp.full((3,5),1.23)\n# array([[ 1.23,  1.23,  1.23,  1.23,  1.23],\n#       [ 1.23,  1.23,  1.23,  1.23,  1.23],\n#       [ 1.23,  1.23,  1.23,  1.23,  1.23]])\n\n\n\nprint(\"np.random.randint(10, size=(3,4)) - \\n\",np.random.randint(10, size=(3,4)))\nprint(\"np.zeros((3,3), dtype='int') - \\n\",np.zeros((3,3), dtype='int'))\nprint(\"np.ones((3,3), dtype=float) - \\n\",np.ones((3,3), dtype=float))\nprint(\"np.eye(3) - \\n\",np.eye(3))\nprint(\"np.full((3,5),1.23) - \\n\",np.full((3,5),1.23))\n","2646d631":"Kaggle = np.arange(1,100,5)\n\n\n#To know the shape of the array\nKaggle.shape\n# (20,) \n\n#To know the shape of the array\nnew_kaggle = Kaggle.reshape((4,5))\n\n\n# To know the n dimentional array\nnew_kaggle.ndim\n# (4,5)\n\n\n\n# To know the total elements in array\nnew_kaggle.size\n# 20\n\n#To calculate min max and mean\nnew_kaggle.min(),new_kaggle.max(),new_kaggle.mean()\n# 1 96 48.5\n\nprint(\"New kaggle ndim:\", new_kaggle.ndim,\"\\nNew Kaggle shape:\", new_kaggle.shape,\"\\nNew Kaggle size: \", new_kaggle.size,\"\\nNew kaggle min:\", new_kaggle.min(),\"\\nNew Kaggle max:\", new_kaggle.max(),\"\\nNew Kaggle mean: \", new_kaggle.mean())\n\n","26e98b1b":"import pandas as pd\n\n#Reprseting with list\nkaggle_list =[10,20,30]  \npd.Series(data=kaggle_list, index=['a','b','c'])\n# a    10\n# b    20\n# c    30\n# dtype: int64\n\n\n#Represting with dictonary\nkaggle_dict = {'one':1,'two':2}\npd.Series(data=kaggle_dict)\n# one    1\n# two    2\n# dtype: int64\n\nprint(pd.Series(data=kaggle_list, index=['a','b','c']))\nprint(pd.Series(data=kaggle_dict))","765e94ba":"kaggle_array = np.random.rand(5,4)\ndf = pd.DataFrame(kaggle_array,[1,2,3,4,5],['w','x','y','z'])\n\n#info -complete information about the data set |  describe -computes summary of statistics integer \/ double variables\nprint(\"DataFrame is {} \\nDataFrame info is \\n{} \\nDataFrame Describe is \\n{}\".format(df,df.info(),df.describe()))","7a14817c":"#Let's sort the data frame by colomn \n#NOTE: inplace = True will make changes to the data\ndf.sort_values(by=['w'],ascending=True,inplace=False)","06af684c":"# Retrus number of rows and number of colomns\ndf.shape[0],df.shape[1]\n# (5, 4)\n\n\n# Adding a colomn to DataFrame\ndf['new_col'] = ['one',2,'3',4.4,5]\n\n\n# Adding a row to DataFrame\n# df.loc[index]=value\ndf.loc[df.shape[0]] = ['one','two',3,4.4,7]\n\n\n\n\n#replace exsiting value with new values\ndf.replace(2, \"second\",inplace=True)\ndf\n","5da2f079":"# df.drop('col_name',axis='colomns')\ndf.drop('y',axis='columns',inplace=True)\ndf","911c49ab":"#Copy dataframe\ndf2 = df.copy()\ndf2","2250bd97":"#conditions\ndf2[df2['z']>1]","97a1068b":"#list all columns where A is greater than C\ndf2.query('w >x')","cd821b90":"NOTE: ****Handling with [data-manipulation-visualisation-on-kaggle-datasets](https:\/\/www.kaggle.com\/trinath003\/data-manipulation-visualisation-on-kaggle-datasets)","18cca0b3":" **Pandas - DataFrame **  ","b0bb0cf3":"**# NOTE: This are comman numpy day to day used stuff, there is lot yet to know [http:\/\/www.numpy.org\/](http:\/\/)**","39f5307c":"# Working on  Pandas","4e27416b":"**creating a Multi-Dimentional Array**  ","8a26e1da":"**Pandas - Series **  ","0a7295a6":"**creating a 1-D Array**","9196523c":"##There are n number of features in pandas explore more at [https:\/\/pandas.pydata.org\/](http:\/\/)","646df474":"**# Pandas is a open source library on top of numpy**\n\n**# It allows for fast analysis, data cleaning and preparation**\n","558c722e":"# Starting with Numpy","b98608af":"**Numpy Additional Stuff **  ","9e73c1f9":"# I saw a lot of post on how to start career in data manipulation and where to get started?\n\n**#Sharing of knowledge is fun**\n\n**#Putting all together**\n\n**This is for people who know the basics of python, No further knowledge is expected.**\n"}}