{"cell_type":{"967ddb6a":"code","c4a6bf6e":"code","0b3715fd":"code","7ae2fe8e":"code","586ef3be":"code","514837ae":"code","35fa7bb8":"code","c779e8c2":"code","dd14e067":"code","ab2433ce":"code","a96c743e":"code","8b82652a":"code","17da7f79":"code","edecdf1d":"code","499c7750":"code","127edc4f":"code","6ef37c2e":"code","931e4378":"code","baf6b5f7":"code","7a081673":"code","59d829fd":"code","3f81eb63":"code","6c372cdb":"code","c59d6de7":"code","bf8e9b72":"code","02e827c2":"code","e3544c43":"code","05bfe395":"code","6c7b3553":"code","c5539f73":"code","9e743ecc":"code","cbccf113":"code","4cad70d6":"code","41df13c5":"code","fb0ed55e":"code","64ea1c42":"code","d9b813d7":"code","38a9fc17":"code","2940c34a":"code","b7cee4dd":"code","0be16d39":"code","64348387":"code","c0f0683a":"code","cb825dea":"code","486ef4cb":"code","aed5d574":"code","352ad0d8":"code","2791c9ca":"code","9dedf433":"code","f6cdf2b7":"code","fc9100f5":"code","dd47c2fb":"code","39c98e97":"code","c51030dd":"markdown","ba60f39e":"markdown","10902a5a":"markdown","5c7e9198":"markdown","a59f43d7":"markdown","cd9d276c":"markdown","de66e988":"markdown","fe4cfaa0":"markdown","4b6b8639":"markdown","01c10f5a":"markdown","a8a0ea49":"markdown","68061a26":"markdown","555c087f":"markdown","7344d848":"markdown","06df59f8":"markdown"},"source":{"967ddb6a":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","c4a6bf6e":"## Data Analysis Phase\n## MAin aim is to understand more about the data\n\nimport pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\n%matplotlib inline\nimport seaborn as sns\n## Display all the columns of the dataframe\n\npd.pandas.set_option('display.max_columns',None)","0b3715fd":"dataset=pd.read_csv('\/kaggle\/input\/house-prices-advanced-regression-techniques\/train.csv')\n\n## print shape of dataset with rows and columns\nprint(dataset.shape)","7ae2fe8e":"## print the top5 records\ndataset.head()","586ef3be":"## Here we will check the percentage of nan values present in each feature\n## 1 -step make the list of features which has missing values\nfeatures_with_na=[features for features in dataset.columns if dataset[features].isnull().sum()>1]\n## 2- step print the feature name and the percentage of missing values\n\nfor feature in features_with_na:\n    print(feature, np.round(dataset[feature].isnull().mean(), 4),  ' % missing values')","514837ae":"for feature in features_with_na:\n    data = dataset.copy()\n    \n    # let's make a variable that indicates 1 if the observation was missing or zero otherwise\n    data[feature] = np.where(data[feature].isnull(), 1, 0)\n    \n    # let's calculate the mean SalePrice where the information is missing or present\n    data.groupby(feature)['SalePrice'].median().plot.bar()\n    plt.title(feature)\n    plt.show()","35fa7bb8":"print(\"Id of Houses {}\".format(len(dataset.Id)))","c779e8c2":"# list of numerical variables\nnumerical_features = [feature for feature in dataset.columns if dataset[feature].dtypes != 'O']\n\nprint('Number of numerical variables: ', len(numerical_features))\n\n# visualise the numerical variables\ndataset[numerical_features].head()","dd14e067":"# list of variables that contain year information\nyear_feature = [feature for feature in numerical_features if 'Yr' in feature or 'Year' in feature]\n\nyear_feature","ab2433ce":"# let's explore the content of these year variables\nfor feature in year_feature:\n    print(feature, dataset[feature].unique())","a96c743e":"## Lets analyze the Temporal Datetime Variables\n## We will check whether there is a relation between year the house is sold and the sales price\n\ndataset.groupby('YrSold')['SalePrice'].median().plot()\nplt.xlabel('Year Sold')\nplt.ylabel('Median House Price')\nplt.title(\"House Price vs YearSold\")\n","8b82652a":"year_feature","17da7f79":"## Here we will compare the difference between All years feature with SalePrice\n\nfor feature in year_feature:\n    if feature!='YrSold':\n        data=dataset.copy()\n        ## We will capture the difference between year variable and year the house was sold for\n        data[feature]=data['YrSold']-data[feature]\n\n        plt.scatter(data[feature],data['SalePrice'])\n        plt.xlabel(feature)\n        plt.ylabel('SalePrice')\n        plt.show()","edecdf1d":"## Numerical variables are usually of 2 type\n## 1. Continous variable and Discrete Variables\n\ndiscrete_feature=[feature for feature in numerical_features if len(dataset[feature].unique())<25 and feature not in year_feature+['Id']]\nprint(\"Discrete Variables Count: {}\".format(len(discrete_feature)))","499c7750":"discrete_feature","127edc4f":"dataset[discrete_feature].head()","6ef37c2e":"## Lets Find the realtionship between them and Sale PRice\n\nfor feature in discrete_feature:\n    data=dataset.copy()\n    data.groupby(feature)['SalePrice'].median().plot.bar()\n    plt.xlabel(feature)\n    plt.ylabel('SalePrice')\n    plt.title(feature)\n    plt.show()","931e4378":"continuous_feature=[feature for feature in numerical_features if feature not in discrete_feature+year_feature+['Id']]\nprint(\"Continuous feature Count {}\".format(len(continuous_feature)))","baf6b5f7":"## Lets analyse the continuous values by creating histograms to understand the distribution\n\nfor feature in continuous_feature:\n    data=dataset.copy()\n    data[feature].hist(bins=25)\n    plt.xlabel(feature)\n    plt.ylabel(\"Count\")\n    plt.title(feature)\n    plt.show()","7a081673":"## We will be using logarithmic transformation\n\n\nfor feature in continuous_feature:\n    data=dataset.copy()\n    if 0 in data[feature].unique():\n        pass\n    else:\n        data[feature]=np.log(data[feature])\n        data['SalePrice']=np.log(data['SalePrice'])\n        plt.scatter(data[feature],data['SalePrice'])\n        plt.xlabel(feature)\n        plt.ylabel('SalesPrice')\n        plt.title(feature)\n        plt.show()\n","59d829fd":"for feature in continuous_feature:\n    data=dataset.copy()\n    if 0 in data[feature].unique():\n        pass\n    else:\n        data[feature]=np.log(data[feature])\n        data.boxplot(column=feature)\n        plt.ylabel(feature)\n        plt.title(feature)\n        plt.show()","3f81eb63":"categorical_features=[feature for feature in dataset.columns if data[feature].dtypes=='O']\ncategorical_features","6c372cdb":"dataset[categorical_features].head()","c59d6de7":"for feature in categorical_features:\n    print('The feature is {} and number of categories are {}'.format(feature,len(dataset[feature].unique())))","bf8e9b72":"for feature in categorical_features:\n    data=dataset.copy()\n    data.groupby(feature)['SalePrice'].median().plot.bar()\n    plt.xlabel(feature)\n    plt.ylabel('SalePrice')\n    plt.title(feature)\n    plt.show()","02e827c2":"## Always remember there way always be a chance of data leakage so we need to split the data first and then apply feature\n## Engineering\nfrom sklearn.model_selection import train_test_split\nX_train,X_test,y_train,y_test=train_test_split(dataset,dataset['SalePrice'],test_size=0.1,random_state=0)","e3544c43":"X_train.shape, X_test.shape","05bfe395":"## Let us capture all the nan values\n## First lets handle Categorical features which are missing\nfeatures_nan=[feature for feature in dataset.columns if dataset[feature].isnull().sum()>1 and dataset[feature].dtypes=='O']\n\nfor feature in features_nan:\n    print(\"{}: {}% missing values\".format(feature,np.round(dataset[feature].isnull().mean(),4)))","6c7b3553":"## Replace missing value with a new label\ndef replace_cat_feature(dataset,features_nan):\n    data=dataset.copy()\n    data[features_nan]=data[features_nan].fillna('Missing')\n    return data\n\ndataset=replace_cat_feature(dataset,features_nan)\n\ndataset[features_nan].isnull().sum()","c5539f73":"dataset.head()","9e743ecc":"## Now lets check for numerical variables the contains missing values\nnumerical_with_nan=[feature for feature in dataset.columns if dataset[feature].isnull().sum()>1 and dataset[feature].dtypes!='O']\n\n## We will print the numerical nan variables and percentage of missing values\n\nfor feature in numerical_with_nan:\n    print(\"{}: {}% missing value\".format(feature,np.around(dataset[feature].isnull().mean(),4)))","cbccf113":"## Replacing the numerical Missing Values\n\nfor feature in numerical_with_nan:\n    ## We will replace by using median since there are outliers\n    median_value=dataset[feature].median()\n    \n    ## create a new feature to capture nan values\n    dataset[feature+'nan']=np.where(dataset[feature].isnull(),1,0)\n    dataset[feature].fillna(median_value,inplace=True)\n    \ndataset[numerical_with_nan].isnull().sum()","4cad70d6":"dataset.head(50)","41df13c5":"## Temporal Variables (Date Time Variables)\n\nfor feature in ['YearBuilt','YearRemodAdd','GarageYrBlt']:\n       \n    dataset[feature]=dataset['YrSold']-dataset[feature]","fb0ed55e":"dataset.head()","64ea1c42":"dataset[['YearBuilt','YearRemodAdd','GarageYrBlt']].head()","d9b813d7":"dataset.head()","38a9fc17":"import numpy as np\nnum_features=['LotFrontage', 'LotArea', '1stFlrSF', 'GrLivArea', 'SalePrice']\n\nfor feature in num_features:\n    dataset[feature]=np.log(dataset[feature])","2940c34a":"dataset.head()","b7cee4dd":"categorical_features=[feature for feature in dataset.columns if dataset[feature].dtype=='O']\n","0be16d39":"categorical_features","64348387":"for feature in categorical_features:\n    temp=dataset.groupby(feature)['SalePrice'].count()\/len(dataset)\n    temp_df=temp[temp>0.01].index\n    dataset[feature]=np.where(dataset[feature].isin(temp_df),dataset[feature],'Rare_var')","c0f0683a":"dataset.head(50)","cb825dea":"for feature in categorical_features:\n    labels_ordered=dataset.groupby([feature])['SalePrice'].mean().sort_values().index\n    labels_ordered={k:i for i,k in enumerate(labels_ordered,0)}\n    dataset[feature]=dataset[feature].map(labels_ordered)","486ef4cb":"dataset.head(10)","aed5d574":"scaling_feature=[feature for feature in dataset.columns if feature not in ['Id','SalePerice'] ]\nlen(scaling_feature)","352ad0d8":"scaling_feature","2791c9ca":"dataset.head()","9dedf433":"feature_scale=[feature for feature in dataset.columns if feature not in ['Id','SalePrice']]\n\nfrom sklearn.preprocessing import MinMaxScaler\nscaler=MinMaxScaler()\nscaler.fit(dataset[feature_scale])","f6cdf2b7":"scaler.transform(dataset[feature_scale])","fc9100f5":"# transform the train and test set, and add on the Id and SalePrice variables\ndata = pd.concat([dataset[['Id', 'SalePrice']].reset_index(drop=True),\n                    pd.DataFrame(scaler.transform(dataset[feature_scale]), columns=feature_scale)],\n                    axis=1)","dd47c2fb":"data.head()","39c98e97":"data.to_csv('X_train.csv',index=False)","c51030dd":"**Categorical Variables**","ba60f39e":"**Outliers**","10902a5a":"**Temporal Variables(Eg: Datetime Variables)**\n\nFrom the Dataset we have 4 year variables. We have extract information from the datetime variables like no of years or no of days. One example in this specific scenario can be difference in years between the year the house was built and the year the house was sold. We will be performing this analysis in the Feature Engineering which is the next video.","5c7e9198":"**Handling Rare Categorical Feature**\n\nWe will remove categorical variables that are present less than 1% of the observations","a59f43d7":"Since they are many missing values, we need to find the relationship between missing values and Sales Price","cd9d276c":"**Exploratory Data Analysis Part 2**","de66e988":"**Continuous Variable**","fe4cfaa0":"**Numerical Variables**\n\nSince the numerical variables are skewed we will perform log normal distribution","4b6b8639":"**Missing Values**","01c10f5a":"Here With the relation between the missing values and the dependent variable is clearly visible.So We need to replace these nan values with something meaningful which we will do in the Feature Engineering section\n\nFrom the above dataset some of the features like Id is not required","a8a0ea49":"**Feature Scaling**","68061a26":"**Numerical Variables**","555c087f":"**Feature Engineering**","7344d848":"**Find out the relationship between categorical variable and dependent feature SalesPrice\n**","06df59f8":"In Data Analysis We will Analyze To Find out the below stuff\n\n* Missing Values\n* All The Numerical Variables\n* Distribution of the Numerical Variables\n* Categorical Variables\n* Cardinality of Categorical Variables\n* Outliers\n* Relationship between independent and dependent feature(SalePrice)"}}