{"cell_type":{"fa704133":"code","c0d7bf6c":"code","f4722e55":"code","81d621c9":"code","ed6bae1f":"code","67b914bc":"code","3ec46e99":"code","1cd11f1e":"code","b28f156e":"code","502dca3c":"code","5356aa08":"code","087daeb2":"code","f39fffbe":"code","2e6fdde6":"code","c4040646":"markdown","7af545e7":"markdown","09417695":"markdown"},"source":{"fa704133":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\nimport riiideducation\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session\n\nimport plotly.express as px\nfrom collections import Counter as count\n\nimport tensorflow as tf\nimport tensorflow.keras.backend as K\nfrom tensorflow.keras.layers import Input, Dense\nfrom sklearn.model_selection import KFold\n\n\ndebug = True","c0d7bf6c":"\nif debug:\n    read_num = 10**6\nelse:\n    read_num = 10**7\n\ntrain = pd.read_csv('\/kaggle\/input\/riiid-test-answer-prediction\/train.csv', low_memory=False, nrows=read_num, \n                       dtype={'row_id': 'int64', 'timestamp': 'int64', 'user_id': 'int32', 'content_id': 'int16', 'content_type_id': 'int8',\n                              'task_container_id': 'int16', 'user_answer': 'int8', 'answered_correctly': 'int8', 'prior_question_elapsed_time': 'float32', \n                             'prior_question_had_explanation': 'boolean',\n                             }\n                      )\ntest = pd.read_csv('..\/input\/riiid-test-answer-prediction\/example_test.csv')\nsubmit = pd.read_csv('..\/input\/riiid-test-answer-prediction\/example_sample_submission.csv')\n\nprint('Train shapes: ', train.shape)\nprint('Test shapes: ', test.shape)","f4722e55":"train.head(10)","81d621c9":"test.head(10)","ed6bae1f":"submit","67b914bc":"fig = px.histogram(\n    train, \n    \"task_container_id\", \n    nbins=25, \n    title='task_container_id column distribution', \n    width=700,\n    height=500\n)\nfig.show()\n\n","3ec46e99":"fig = px.histogram(\n    train, \n    \"timestamp\", \n    nbins=25, \n    title='timestamp column distribution', \n    width=700,\n    height=500\n)\nfig.show()","1cd11f1e":"fig = px.histogram(\n    train, \n    \"prior_question_elapsed_time\", \n    nbins=25, \n    title='prior_question_elapsed_time column distribution', \n    width=700,\n    height=500\n)\nfig.show()\n\n","b28f156e":"ds = train['answered_correctly'].value_counts().reset_index()\nds.columns = ['answered_correctly', 'count']\nfig = px.pie(\n    ds, \n    values='count', \n    names=\"answered_correctly\", \n    title='answered_correctly bar chart', \n    width=500, \n    height=500\n)\nfig.show()","502dca3c":"ds = train['prior_question_had_explanation'].value_counts().reset_index()\nds.columns = ['prior_question_had_explanation', 'count']\nfig = px.pie(\n    ds, \n    values='count', \n    names=\"prior_question_had_explanation\", \n    title='prior_question_had_explanation bar chart', \n    width=500, \n    height=500\n)\nfig.show()","5356aa08":"\nds = train['user_answer'].value_counts().reset_index()\nds.columns = ['user_answer', 'count']\nfig = px.pie(\n    ds, \n    values='count', \n    names=\"user_answer\", \n    title='user_answer bar chart', \n    width=500, \n    height=500\n)\nfig.show()","087daeb2":"\nds = train['content_type_id'].value_counts().reset_index()\nds.columns = ['content_type_id', 'count']\nfig = px.pie(\n    ds, \n    values='count', \n    names=\"content_type_id\", \n    title='content_type_id bar chart', \n    width=500, \n    height=500\n)\nfig.show()","f39fffbe":"env = riiideducation.make_env()","2e6fdde6":"\ncontent_acc = train.query('answered_correctly != -1').groupby('content_id')['answered_correctly'].mean().to_dict()\niter_test = env.iter_test()\ndef add_content_acc(x):\n    if x in content_acc.keys():\n        return content_acc[x]\n    else:\n        return 0.5\n\n\nfor (test, sample_prediction_df) in iter_test:\n    test['answered_correctly'] = test['content_id'].apply(add_content_acc).values\n    env.predict(test.loc[test['content_type_id'] == 0, ['row_id', 'answered_correctly']])","c4040646":"Make prediction Fork from https:\/\/www.kaggle.com\/sishihara\/riiid-answered-correctly-benchmark","7af545e7":"Fork form https:\/\/www.kaggle.com\/isaienkov\/openvaccine-eda-feature-engineering-modeling","09417695":"Fork from  https:\/\/www.kaggle.com\/piantic\/riiid-answer-correctness-prediction-basic-eda"}}