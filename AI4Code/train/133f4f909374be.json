{"cell_type":{"22e86de0":"code","142c7a12":"code","e93fe429":"code","ba726f3d":"code","972d91d2":"code","e7d5ba68":"code","f9100cdc":"code","e36d7ced":"code","3e4ae6cb":"code","c8ec7fdc":"code","969baffc":"code","ca9a2832":"code","633276be":"code","9e06194e":"code","b574a176":"code","f79c8cac":"code","55eb0c44":"code","2bea5738":"code","0f4b0984":"code","56ac4f2b":"code","178ac534":"code","c00b8717":"code","9a80e11d":"code","38dcd043":"code","ac2b2710":"code","b027d192":"code","69f0e388":"code","053ee7e8":"code","4e857c53":"code","89589d3f":"code","2e018c65":"code","a22fc33a":"code","e7e682f8":"code","3d9292a2":"code","a2b85642":"code","254a1461":"code","0eb452ca":"code","7b2dfea3":"code","bd5b86ba":"code","bd18bf29":"code","a3aeb133":"code","e710aaa9":"code","06d9d0e9":"code","ece6d851":"code","70bd8cf6":"code","0865de96":"code","6cea13cf":"code","b12bc6cd":"code","4e23241e":"code","b899265d":"code","dc3f8225":"code","32f13dc2":"code","cd1c2c98":"code","9a4bb314":"code","52d119c8":"code","ddba1546":"code","43ecb412":"code","a579fcee":"code","e225e6e8":"code","e22bb54c":"code","a911188e":"code","f1566e18":"code","4f9c06a5":"code","f779f401":"code","5c6fec1e":"code","77911ec8":"code","9d6f442a":"code","09e9392a":"code","55c504ee":"code","709decc1":"code","ea6e796b":"code","72b5832f":"code","6edf911c":"code","641f07e3":"code","513f8161":"code","396155fb":"code","3891da2d":"code","b6cb89be":"code","65ee6e6b":"code","a5cdad9d":"code","97d25a9a":"code","67100087":"code","7a7a3f89":"code","efdf6a0a":"code","52f074b6":"code","66225de5":"markdown","9ca8c17d":"markdown","d886f3cb":"markdown","f03154d4":"markdown"},"source":{"22e86de0":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n%matplotlib inline\nsns.set_style('whitegrid')","142c7a12":"#importing the dataset\ndataset = pd.read_csv('..\/input\/imdb-5000-movie-dataset\/movie_metadata.csv')\ndataset.head()","e93fe429":"dataset.columns","ba726f3d":"dataset.info()","972d91d2":"dataset.isnull().sum()","e7d5ba68":"dataset.shape","f9100cdc":"dataset.drop_duplicates(inplace=True)\ndataset.shape","e36d7ced":"numerical_cols = [col for col in dataset.columns if dataset[col].dtype != 'object']\ncategorical_cols = [col for col in dataset.columns if dataset[col].dtype == 'object']","3e4ae6cb":"dataset.describe().T","c8ec7fdc":"color_mode = dataset['color'].mode().iloc[0]\ndataset.color.fillna(color_mode, inplace = True)\ndataset.color.isnull().sum()","969baffc":"dataset = dataset.dropna(axis = 0, subset = ['director_name'] )\n","ca9a2832":"dataset.num_critic_for_reviews.min(), dataset.num_critic_for_reviews.max(), dataset.num_critic_for_reviews.median()","633276be":"num_critic_for_reviews_median = dataset['num_critic_for_reviews'].median()\ndataset.num_critic_for_reviews.fillna(num_critic_for_reviews_median, inplace = True)\ndataset.num_critic_for_reviews.isnull().sum()","9e06194e":"duration_median = dataset.duration.median()\ndataset.duration.fillna(duration_median, inplace=True)\ndataset.duration.isnull().sum()","b574a176":"director_facebook_likes_mean = dataset.director_facebook_likes.mean()\ndataset.director_facebook_likes.fillna(director_facebook_likes_mean, inplace = True)\ndataset.director_facebook_likes.isnull().sum()","f79c8cac":"dataset.actor_3_facebook_likes.min(), dataset.actor_3_facebook_likes.max(), dataset.actor_3_facebook_likes.median(),dataset.actor_3_facebook_likes.mean()","55eb0c44":"actor_3_facebook_likes_mean = dataset.actor_3_facebook_likes.mean()\ndataset.actor_3_facebook_likes.fillna(actor_3_facebook_likes_mean, inplace = True)\ndataset.actor_3_facebook_likes.isnull().sum()","2bea5738":"dataset = dataset.dropna(axis = 0, subset = ['actor_2_name'])\ndataset.actor_2_name.isnull().sum()","0f4b0984":"actor_1_facebook_likes_mean = dataset.actor_1_facebook_likes.mean()\ndataset.actor_1_facebook_likes.fillna(actor_1_facebook_likes_mean, inplace = True)\ndataset.actor_1_facebook_likes.isnull().sum()","56ac4f2b":"dataset = dataset.dropna(axis = 0, subset = ['gross'])\ndataset.gross.isnull().sum()","178ac534":"dataset.shape\ndataset.isnull().sum()","c00b8717":"dataset = dataset.dropna(axis = 0, subset = ['budget'])\ndataset.budget.isnull().sum()","9a80e11d":"dataset = dataset.dropna(axis = 0, subset = ['actor_3_name'])\ndataset.actor_3_name.isnull().sum()","38dcd043":"facenumber_in_poster_median = dataset.facenumber_in_poster.median()\ndataset.facenumber_in_poster.fillna(facenumber_in_poster_median, inplace = True)\ndataset.facenumber_in_poster.isnull().sum()","ac2b2710":"language_mode = dataset.language.mode().iloc[0]\ndataset.language.fillna(language_mode, inplace = True)\ndataset.language.isnull().sum()","b027d192":"dataset = dataset.dropna(axis = 0, subset = ['plot_keywords'])\ndataset.plot_keywords.isnull().sum()","69f0e388":"dataset.content_rating.unique()","053ee7e8":"dataset.content_rating.fillna('Not Rated', inplace = True)","4e857c53":"dataset.aspect_ratio.unique()","89589d3f":"aspect_ratio_mode = dataset.aspect_ratio.mode().iloc[0]\ndataset.aspect_ratio.fillna(aspect_ratio_mode, inplace = True)  ","2e018c65":"dataset.isnull().sum()","a22fc33a":"dataset.color.unique(), dataset.color.nunique()","e7e682f8":"dataset['color'] = dataset.color.map({'Color' : 1 , ' Black and White' : 0})","3d9292a2":"dataset.director_name.unique(), dataset.director_name.nunique()","a2b85642":"director_name_value_counts = dataset.director_name.value_counts()\ndirector_name_value_counts  = pd.DataFrame(director_name_value_counts).reset_index().rename(columns = {'index': 'director_name', 'director_name':'director_name_value_counts'})","254a1461":"dataset = pd.merge(dataset, director_name_value_counts,left_on = 'director_name', right_on = 'director_name', how = 'left')","0eb452ca":"dataset = dataset.drop(columns = 'director_name')","7b2dfea3":"actor_2_name_value_counts = dataset.actor_2_name.value_counts()\nactor_2_name_value_counts  = pd.DataFrame(actor_2_name_value_counts).reset_index().rename(columns = {'index': 'actor_2_name', 'actor_2_name':'actor_2_name_value_counts'})","bd5b86ba":"dataset = pd.merge(dataset, actor_2_name_value_counts,left_on = 'actor_2_name', right_on = 'actor_2_name', how = 'left')","bd18bf29":"dataset = dataset.drop(columns = 'actor_2_name')","a3aeb133":"dataset.genres.unique(), dataset.genres.nunique()","e710aaa9":"dataset['main_genre'] = dataset.genres.str.split('|').str[0]","06d9d0e9":"from sklearn.preprocessing import LabelEncoder\nle = LabelEncoder()\ndataset['main_genre'] = le.fit_transform(dataset.main_genre)","ece6d851":"genres_value_counts = dataset.genres.value_counts()","70bd8cf6":"genres_value_counts  = pd.DataFrame(genres_value_counts).reset_index().rename(columns = {'index' : 'genres', 'genres' : 'genres_value_counts'})","0865de96":"dataset = pd.merge(dataset, genres_value_counts,left_on = 'genres', right_on = 'genres', how = 'left')","6cea13cf":"dataset = dataset.drop(columns = 'genres')","b12bc6cd":"dataset.actor_1_name.unique(), dataset.actor_1_name.nunique()","4e23241e":"actor_1_name_value_counts = dataset.actor_1_name.value_counts()","b899265d":"actor_1_name_value_counts = pd.DataFrame(actor_1_name_value_counts).reset_index().rename(columns = {'index' : 'actor_1_name', 'actor_1_name' : 'actor_1_name_value_counts'})","dc3f8225":"dataset = pd.merge(dataset, actor_1_name_value_counts,left_on = 'actor_1_name', right_on = 'actor_1_name', how = 'left')","32f13dc2":"dataset = dataset.drop(columns = 'actor_1_name')","cd1c2c98":"dataset = dataset.drop(columns = 'movie_title')","9a4bb314":"actor_3_name_value_counts = dataset.actor_3_name.value_counts()","52d119c8":"actor_3_name_value_counts = pd.DataFrame(actor_3_name_value_counts).reset_index().rename(columns = {'index' : 'actor_3_name', 'actor_3_name' : 'actor_3_name_value_counts'})","ddba1546":"dataset= pd.merge(dataset, actor_3_name_value_counts,left_on = 'actor_3_name', right_on = 'actor_3_name', how = 'left')","43ecb412":"dataset = dataset.drop(columns = 'actor_3_name')","a579fcee":"dataset['main_plot_keyword'] = dataset.plot_keywords.str.split('|').str[0]\n","e225e6e8":"dataset = dataset.drop(columns = 'plot_keywords')","e22bb54c":"main_plot_keyword_value_counts = dataset.main_plot_keyword.value_counts()\nmain_plot_keyword_value_counts = pd.DataFrame(main_plot_keyword_value_counts).reset_index().rename(columns = {'index' : 'main_plot_keyword', 'main_plot_keyword' : 'main_plot_keyword_value_counts'})","a911188e":"dataset = pd.merge(dataset, main_plot_keyword_value_counts, left_on = 'main_plot_keyword', right_on = 'main_plot_keyword', how = 'left')\ndataset = dataset.drop(columns = 'main_plot_keyword')","f1566e18":"dataset = dataset.drop(columns = 'movie_imdb_link')\n","4f9c06a5":"from sklearn.preprocessing import LabelEncoder\nle1 = LabelEncoder()\ndataset['language'] = le1.fit_transform(dataset.language)","f779f401":"from sklearn.preprocessing import LabelEncoder\nle2 = LabelEncoder()\ndataset['country'] = le2.fit_transform(dataset.country)","5c6fec1e":"from sklearn.preprocessing import LabelEncoder\nle3 = LabelEncoder()\ndataset['content_rating'] = le3.fit_transform(dataset.content_rating)","77911ec8":"dataset.head().T","9d6f442a":"datasetR = dataset.copy() #lets keep our original dataset for reference. Here datasetR is for Regression model\ndatasetC = dataset.copy() #Here datasetC is for classification model","09e9392a":"from sklearn.model_selection import train_test_split\ny = datasetR.pop('imdb_score')\nX = datasetR\nX_train, X_test, y_train, y_test = train_test_split(X, y, train_size = 0.8, test_size = 0.2, random_state = 42)","55c504ee":"from sklearn.preprocessing import MinMaxScaler\nscaler = MinMaxScaler()\nX_train = pd.DataFrame(scaler.fit_transform(X_train.values), columns=X_train.columns, index=X_train.index)","709decc1":"X_test = pd.DataFrame(scaler.transform(X_test.values), columns = X_train.columns, index = X_test.index)","ea6e796b":"def correlation(dataset, threshold):\n    col_corr = set() # Set of all the names of deleted columns\n    corr_matrix = dataset.corr()\n    for i in range(len(corr_matrix.columns)):\n        for j in range(i):\n            if (corr_matrix.iloc[i, j] >= threshold) and (corr_matrix.columns[j] not in col_corr):\n                colname = corr_matrix.columns[i] # getting the name of column\n                col_corr.add(colname)\n                if colname in dataset.columns:\n                    del dataset[colname] # deleting the column from the dataset\ncorrelation(X_train,0.90)\n","72b5832f":"#importing the required libraries\nfrom sklearn.feature_selection import RFE\nfrom sklearn.linear_model import LinearRegression","6edf911c":"# Running RFE with the output number of the variable equal to 15\nlm = LinearRegression()\nlm.fit(X_train, y_train)\n\nrfe = RFE(lm, 15)            # running RFE\nrfe = rfe.fit(X_train, y_train)","641f07e3":"col_rfe = X_train.columns[rfe.support_]\ncol_rfe","513f8161":"#Creating a X_train dataframe with rfe varianles\nX_train_rfe = X_train[col_rfe]","396155fb":"# Adding a constant variable for using the stats model\nimport statsmodels.api as sm\nX_train_rfe_constant = sm.add_constant(X_train_rfe)","3891da2d":"lm = sm.OLS(y_train,X_train_rfe_constant).fit()   # Running the linear model\n#Let's see the summary of our linear model\nprint(lm.summary())","b6cb89be":"X_test_rfe = X_test[col_rfe]\nX_test_rfe_constant = sm.add_constant(X_test_rfe)\ny_pred_linear = lm.predict(X_test_rfe_constant)\ny_pred_linear.values","65ee6e6b":"y_pred_linear.min(), y_pred_linear.max()","a5cdad9d":"from sklearn.metrics import mean_squared_error\nmean_squared_error(y_pred_linear, y_test)","97d25a9a":"from sklearn.svm import SVR\nsvr_rbf = SVR(kernel='rbf', gamma=0.1)\nsvr_lin = SVR(kernel='linear', gamma='auto')\nsvr_poly = SVR(kernel='poly', gamma='auto', degree=3)\nsvr_rbf.fit(X_train_rfe, y_train)\ny_pred_svm_rbf = svr_rbf.predict(X_test_rfe)\ny_pred_svm_rbf","67100087":"y_pred_svm_rbf.min(), y_pred_svm_rbf.max()","7a7a3f89":"mean_squared_error(y_pred_svm_rbf, y_test)","efdf6a0a":"mean_squared_error(y_pred_svm_rbf, y_test)","52f074b6":"svr_lin.fit(X_train_rfe, y_train)\ny_pred_svm_lin = svr_lin.predict(X_test_rfe)","66225de5":"I have copied this code from \"Statistical Approach for Predicting IMDB\"\n\nLink: https:\/\/www.kaggle.com\/bharathraja\/statistical-approach-for-predicting-imdb\n\nThe author has explained everything very syestematically","9ca8c17d":"# About the dataset\n\nLet us start the project by understanding our data.\n\nThe dataset is from Kaggle website. It contains 28 variables for 5043 movies, spanning across 100 years in 66 countries. There are 2399 unique director names, and thousands of actors\/actresses. \u201cimdb_score\u201d is the response variable while the other 27 variables are possible predictors.","d886f3cb":"# Problem Statement\n\nBased on the massive movie information, it would be interesting to understand what are the important factors that make a movie more successful than others. So, we would like to analyze what kind of movies are more successful, in other words, get higher IMDB score. We also want to show the results of this analysis in an intuitive way by visualizing outcome using Python.\n\nIn this project, we take IMDB scores as response variable and focus on operating predictions by analyzing the rest of variables in the IMDB 5000 movie data. The results can help film companies to understand the secret of generating a commercial success movie.\n\n\n\n","f03154d4":"Now let us start by filling in the NA values wherever we can!"}}