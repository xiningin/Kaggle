{"cell_type":{"be6c8373":"code","0348e711":"code","1aeba661":"code","1aee733d":"code","4f782470":"code","70c7e483":"code","1668e7f0":"code","9ef52e64":"code","21828f02":"code","87e1f5b9":"code","cb063c05":"code","22a9b13a":"code","6f6eb4f3":"code","6e9e5912":"code","3612893e":"code","c7b9f688":"code","08143a03":"code","f04ff297":"code","c6a1c20f":"code","8518d0bc":"code","8a15c8df":"code","02aba798":"code","04804ec1":"markdown","725b9f49":"markdown","ef86a038":"markdown","7976c447":"markdown","e05a7e60":"markdown","5e1ac844":"markdown","90497465":"markdown","f17d8c9c":"markdown","122f94dc":"markdown","02d12c89":"markdown"},"source":{"be6c8373":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nimport squarify \n\n#Import TfIdfVectorizer from scikit-learn\nfrom sklearn.feature_extraction.text import TfidfVectorizer\n\n# Import linear_kernel\nfrom sklearn.metrics.pairwise import linear_kernel\n\n# Import CountVectorizer and create the count matrix\nfrom sklearn.feature_extraction.text import CountVectorizer\n\n# Compute the Cosine Similarity matrix based on the count_matrix\nfrom sklearn.metrics.pairwise import cosine_similarity\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n","0348e711":"# Import the data\nmovie_df = pd.read_csv('..\/input\/d\/shivamb\/netflix-shows\/netflix_titles.csv')\nmovie_df.head()","1aeba661":"#Let's begin by looking at the structure of the data\nmovie_df.info()","1aee733d":"titles_by_country= movie_df.groupby('country')[['title']].sum()\ntitles_by_country_label= movie_df.groupby('country')[['title']].sum().index.get_level_values(0)","4f782470":"print(titles_by_country_label)","70c7e483":"#squarify.plot(sizes=titles_by_country, label= titles_by_country_label, alpha=.8)\n#plt.axis('off')\n#plt.show()","1668e7f0":"#Replace NaN with an empty string\nmovie_df['cast'] = movie_df['cast'].fillna('')\nmovie_df['director'] = movie_df['director'].fillna('')","9ef52e64":"#Define a TF-IDF Vectorizer Object. Remove all english stop words such as 'the', 'a'\ntfidf = TfidfVectorizer(stop_words='english')","21828f02":"#Construct the required TF-IDF matrix by fitting and transforming the data\ntfidf_matrix = tfidf.fit_transform(movie_df['listed_in'])\n\n#Output the shape of tfidf_matrix\ntfidf_matrix.shape","87e1f5b9":"#Array mapping from feature integer indices to feature name.\ntfidf.get_feature_names()[40:44]","cb063c05":"# Compute the cosine similarity matrix\ncosine_sim = linear_kernel(tfidf_matrix, tfidf_matrix)\ncosine_sim.shape","22a9b13a":"cosine_sim[1]","6f6eb4f3":"#Construct a reverse map of indices and movie titles\nindices = pd.Series(movie_df.index, index=movie_df['title']).drop_duplicates()\nindices[:10]","6e9e5912":"# Function that takes in movie title as input and outputs most similar movies\ndef get_recommendations(title, cosine_sim=cosine_sim):\n    # Get the index of the movie that matches the title\n    idx = indices[title]\n\n    # Get the pairwsie similarity scores of all movies with that movie\n    sim_scores = list(enumerate(cosine_sim[idx]))\n\n    # Sort the movies based on the similarity scores\n    sim_scores = sorted(sim_scores, key=lambda x: x[1], reverse=True)\n\n    # Get the scores of the 10 most similar movies\n    sim_scores = sim_scores[1:10]\n\n    # Get the movie indices\n    movie_indices = [i[0] for i in sim_scores]\n\n    # Return the top 10 most similar movies\n    return movie_df['title'].iloc[movie_indices]","3612893e":"get_recommendations(\"Community\")","c7b9f688":"# Function to convert all strings to lower case and strip names of spaces\ndef clean_data(x):\n    if isinstance(x, list):\n        return [str.lower(i.replace(\" \", \"\")) for i in x]\n    else:\n        #Check if director exists. If not, return empty string\n        if isinstance(x, str):\n            return str.lower(x.replace(\" \", \"\"))\n        else:\n            return ''\n        \n# Apply clean_data function to your features.\nfeatures = ['cast', 'director', 'listed_in']\n\nfor feature in features:\n    movie_df[feature] = movie_df[feature].apply(clean_data)","08143a03":"#Define a function to create a soup feature\ndef create_soup(x):\n    return  ''.join(x['cast']) + ',' + ''.join(x['director'])  + ',' + ''.join(x['listed_in']) \n\n# Create a new soup feature\nmovie_df['soup'] = movie_df.apply(create_soup, axis=1)\nmovie_df['soup']","f04ff297":"#Define a Count Vectorizer Object. Remove all english stop words such as 'the', 'a'\ncount = CountVectorizer(stop_words='english')\n","c6a1c20f":"count_matrix = count.fit_transform(movie_df['soup'])\ncount_matrix.shape","8518d0bc":"cosine_sim2 = cosine_similarity(count_matrix, count_matrix)","8a15c8df":"# Reset index of your main DataFrame and construct reverse mapping as before\nmovie_df = movie_df.reset_index()\nindices = pd.Series(movie_df.index, index=movie_df['title'])","02aba798":"get_recommendations(\"Community\", cosine_sim2 )","04804ec1":"Now, we will use Cosine Similarity to find the similarity between two movies.","725b9f49":"Let's try to explore the data and answer these interesting questions:\n1. Understanding what content is available in different countries\n2. Identifying similar content by matching text-based features\n3. Network analysis of Actors \/ Directors and find interesting insights\n4. Is Netflix has increasingly focusing on TV rather than movies in recent years?\n","ef86a038":"Out of all the features that are mentioned above, we will only look at a few that we want to use for this analysis.\nThere are about 7787 Titles, and we see a lot of features have data missing. The features that we want to utilize for this project are- director, cast and listed_in","7976c447":"This time around we got some different recommendations. We do see that the recommendations include the cast\/director of the title we provided.","e05a7e60":"This system has given us some good recommendations based on the genre associated with the title but let us try to make it better. There is a high possibility that we would like a recommendation for a movie\/series by the same actor or director or of similar genres. For the next model let's try to combine all of these features to make our recommendation algorithm better.\n\nTo combine these features together, we need to concatenate them together and create a soup feature. To do that we need to clean the data. Since we are considering the name of Actors and Directors, we need to make sure that actors with same names should not be considered the same. For example, John Travolta and John Krasinski are two separate actors, to resolve that we need to remove the space between them.","5e1ac844":"\nFirst we want to try a simple Content Based Recommendor System which will recommend us movies\/series which are similar to each other. To achieve this, we will compute pairwise cosine similarity scores for all movies\/series based on their genre which is given by the listed_in feature and recommend movies\/series based on that similarity score threshold.\n\nSince the data in question is in Natural Language, we will have to compute the word vectors for the data and find the similarity between each vector. We will be using a built-in class called as Term Frequency-Inverse Document Frequency (TF-IDF) vectors for each document. The TF-IDF score gives us the frequency of words occuring in a document which helps us evaluating the similarity between two documents.","90497465":"Now that the function is written, let's try to get recommendations for a similar movie\/series title.","f17d8c9c":"In the previous model, we used the TF-IDF, for this model we will use the CountVectorizer(). The difference between both these objects the inverse document factor(IDF). We do not want to down-weight any features that we are using for this analysis.  ","122f94dc":"Next, we will use the cosine_similarity to measure the distance between the embeddings.","02d12c89":"Let's try to get recommendations for a similar movie\/series title using this model."}}