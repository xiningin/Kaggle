{"cell_type":{"ad44e810":"code","a7c744a7":"code","d6ff89c0":"code","63039856":"code","cc7c889b":"code","4c062b16":"code","629e844f":"code","ebf16815":"code","5303f6ae":"code","3071b686":"code","f425cb73":"code","6881649f":"code","771d4d40":"code","43152721":"code","218f2bdc":"code","c3c3c51c":"code","0d45bc3c":"markdown","9ad1386e":"markdown","7d975d16":"markdown","5e7d8d22":"markdown"},"source":{"ad44e810":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","a7c744a7":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\nfrom sklearn.ensemble import RandomForestRegressor","d6ff89c0":"df= pd.read_csv(\"..\/input\/student-performance\/student-mat.csv\", delimiter=\";\")\ndf.head()","63039856":"df.describe().T","cc7c889b":"df.info()","4c062b16":"df.isna().sum()","629e844f":"df.corr()","ebf16815":"plt.figure(figsize=(14,7), dpi=100)\nsns.heatmap(df.corr(), cmap='plasma', annot=True)","5303f6ae":"for labels, content in df.items():\n    if pd.api.types.is_string_dtype(content):\n        df[labels] = content.astype(\"category\").cat.as_ordered()","3071b686":"for labels, content in df.items():\n    if not pd.api.types.is_numeric_dtype(content):\n        df[labels] = pd.Categorical(content).codes","f425cb73":"df.head()","6881649f":"# Splitting data into X, y\n\nX = df.drop(['G1','G2','G3'], axis=1)\ny = df['G3']","771d4d40":"X","43152721":"y","218f2bdc":"rf = RandomForestRegressor()\nrf.fit(X, y)","c3c3c51c":"rf.score(X, y)","0d45bc3c":"### Let's change object into categorical features","9ad1386e":"### Now Change categorical values into numeric values","7d975d16":"> As G1 And G2 is Highly Co-related with G3 our Target Feature so We Will Drop G1 & G2 for training","5e7d8d22":"### Importing DataSet and libraries"}}