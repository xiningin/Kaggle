{"cell_type":{"f8bfef63":"code","4928c16e":"code","379296c8":"code","86dbc81f":"code","2f0a6171":"code","0d904f74":"code","6217e349":"markdown"},"source":{"f8bfef63":"import numpy as np\nimport pandas as pd \n\nimport utils_data_prepping as udp\nimport utils_clf_models as clf\nimport sklearn.metrics as skm\n\nimport seaborn as sns\nsns.set(rc={'figure.figsize':(12,10)})\nimport matplotlib.pyplot as plt\n%matplotlib inline\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))","4928c16e":"train_df = udp.loading('\/kaggle\/input\/otto-group-product-classification-challenge\/train.csv')\ntest_df = udp.loading('\/kaggle\/input\/otto-group-product-classification-challenge\/test.csv')","379296c8":"sns.histplot(train_df['target'])\nplt.show()","86dbc81f":"# Training dataframe\nX, y = udp.pre_processing(train_df, 'target')\nclf1 = clf.Classifier(X, y, 'knn')\nclf1.preprocess_split(1\/3, 1)\nclf1.fit_predict()\nprint('For the training set:')\nclf1.metrics(printing=True)\n\n# Testing Dataset\nnew_test = test_df.to_numpy()[:y.shape[0]]\nclf2 = clf.Classifier(new_test, y, 'knn')\nclf2.preprocess_split(1\/3, 8)\nclf2.fit_predict()\nprint('For the testing set:')\nclf2.metrics(printing=True)","2f0a6171":"# Training dataframe\nX, y = udp.pre_processing(train_df, 'target')\nclf1 = clf.Classifier(X, y, 'log_reg')\nclf1.preprocess_split(1\/3, 1)\nclf1.fit_predict({'multi_class': 'ovr'})\nprint('For the training set:')\nclf1.metrics(printing=True)\n\n# Testing Dataset\nnew_test = test_df.to_numpy()[:y.shape[0]]\nclf2 = clf.Classifier(new_test, y, 'log_reg')\nclf2.preprocess_split(1\/3, 8)\nclf2.fit_predict({'multi_class': 'ovr'})\nprint('For the testing set:')\nclf2.metrics(printing=True)","0d904f74":"# Training dataframe\nX, y = udp.pre_processing(train_df, 'target')\nclf1 = clf.Classifier(X, y, 'tree')\nclf1.preprocess_split(1\/3, 1)\nclf1.fit_predict({'multi_class': 'ovr'})\nprint('For the training set:')\nclf1.metrics(printing=True)\n\n# Testing Dataset\nnew_test = test_df.to_numpy()[:y.shape[0]]\nclf2 = clf.Classifier(new_test, y, 'tree')\nclf2.preprocess_split(1\/3, 8)\nclf2.fit_predict({'multi_class': 'ovr'})\nprint('For the testing set:')\nclf2.metrics(printing=True)","6217e349":"# Modeling Plans\n* 3 single Models: Log Reg, Tree, K-NN\n* 2 Ensemble Models: Random Forest & XGBoost\n* Compare model results \n* Hyperparamter Tuning"}}