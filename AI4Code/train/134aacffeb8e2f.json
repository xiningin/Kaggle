{"cell_type":{"e0c84b72":"code","c85a76ea":"code","6c26a141":"code","9e71e3c4":"code","901e4350":"code","443949a3":"code","2a7a8b4d":"code","6f4c54b6":"code","486abcac":"code","d2413787":"code","c2533785":"code","fc7c3178":"code","fca680bf":"code","b6b7795d":"code","d3bf1beb":"code","8ee231ff":"code","46b06ece":"code","f85eea30":"code","4d617c77":"code","d14c8396":"code","f19dcc1f":"code","71992f9c":"code","43b163eb":"code","8a27cbc5":"code","203508cf":"code","6a5dc44a":"code","a68e700b":"code","6ffd89a5":"code","8dcc349f":"code","a60a1004":"markdown","59bd7d16":"markdown","282c03ff":"markdown","e53f5939":"markdown","576ecced":"markdown","dd57658a":"markdown","648dbbcd":"markdown","2e14b890":"markdown","b99aee02":"markdown","058c1bc4":"markdown","0ea6def7":"markdown","40943ef8":"markdown","244a76e1":"markdown"},"source":{"e0c84b72":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nfrom tqdm import tqdm\nimport base64\nimport os\nimport re\nimport math\nimport plotly.express as px\nimport plotly.graph_objects as go\nfrom matplotlib.offsetbox import OffsetImage, AnnotationBbox\nimport matplotlib as mpl\nimport matplotlib.pyplot as plt\nimport matplotlib.patches as patches\nimport seaborn as sns\nfrom ipywidgets import widgets, interactive, interact, interact_manual\n! pip install mplcyberpunk\nimport mplcyberpunk\nplt.style.use(\"cyberpunk\")\nimport warnings\nwarnings.filterwarnings('ignore')","c85a76ea":"plays = pd.read_csv('..\/input\/nfl-big-data-bowl-2021\/plays.csv')\ngames = pd.read_csv('..\/input\/nfl-big-data-bowl-2021\/games.csv')\nplayers = pd.read_csv('..\/input\/nfl-big-data-bowl-2021\/players.csv')","6c26a141":"dataDir = \"\/kaggle\/input\/nfl-big-data-bowl-2021\/\"\nweeks = pd.DataFrame(columns=['time', 'x', 'y', 's', 'a', 'dis', 'o', 'dir', 'event', 'nflId',\n       'displayName', 'jerseyNumber', 'position', 'frameId', 'team', 'gameId',\n       'playId', 'playDirection', 'route'])\nfor i in range(1,18):\n    weeks = pd.concat([weeks, pd.read_csv(dataDir+\"week{}.csv\".format(i))], ignore_index=True)","9e71e3c4":"def getImage(path):\n    return OffsetImage(plt.imread(path), zoom=0.5)\n\n## credit to https:\/\/www.kaggle.com\/hungnguyen95\/nfl-big-data-bowl-2021-plotting-player-heatmap\ndef create_football_field(ax=None,\n                          linenumbers=True,\n                          endzones=True,\n                          highlight_line=False,\n                          highlight_line_number=50,\n                          highlighted_name='Line of Scrimmage',\n                          fifty_is_los=False,\n                          facecolor='darkgreen'):\n    \"\"\"\n    Function that plots the football field for viewing plays.\n    Allows for showing or hiding endzones.\n    \"\"\"\n    rect = patches.Rectangle((0, 0), 120, 53.3, linewidth=0.1,\n                             edgecolor='r', facecolor=facecolor, zorder=0)\n\n    if ax is None:\n        ax = plt.gca()\n        \n    ax.add_patch(rect)\n\n    plt.plot([10, 10, 10, 20, 20, 30, 30, 40, 40, 50, 50, 60, 60, 70, 70, 80,\n              80, 90, 90, 100, 100, 110, 110, 120, 0, 0, 120, 120],\n             [0, 0, 53.3, 53.3, 0, 0, 53.3, 53.3, 0, 0, 53.3, 53.3, 0, 0, 53.3,\n              53.3, 0, 0, 53.3, 53.3, 0, 0, 53.3, 53.3, 53.3, 0, 0, 53.3],\n             color='black')\n    if fifty_is_los:\n        plt.plot([60, 60], [0, 53.3], color='gold')\n        plt.text(62, 50, '<- Player Yardline at Snap', color='gold')\n    # Endzones\n    if endzones:\n        ez1 = patches.Rectangle((0, 0), 10, 53.3,\n                                linewidth=0.1,\n                                edgecolor='r',\n                                facecolor='blue',\n                                alpha=0.2,\n                                zorder=0)\n        ez2 = patches.Rectangle((110, 0), 120, 53.3,\n                                linewidth=0.1,\n                                edgecolor='r',\n                                facecolor='blue',\n                                alpha=0.2,\n                                zorder=0)\n        ax.add_patch(ez1)\n        ax.add_patch(ez2)\n    plt.xlim(0, 120)\n    plt.ylim(-5, 58.3)\n    plt.axis('off')\n    if linenumbers:\n        for x in range(20, 110, 10):\n            numb = x\n            if x > 50:\n                numb = 120 - x\n            plt.text(x, 5, str(numb - 10),\n                     horizontalalignment='center',\n                     fontsize=20,  # fontname='Arial',\n                     color='black')\n            plt.text(x - 0.95, 53.3 - 5, str(numb - 10),\n                     horizontalalignment='center',\n                     fontsize=20,  # fontname='Arial',\n                     color='black', rotation=180)\n    if endzones:\n        hash_range = range(11, 110)\n    else:\n        hash_range = range(1, 120)\n\n    for x in hash_range:\n        ax.plot([x, x], [0.4, 0.7], color='black')\n        ax.plot([x, x], [53.0, 52.5], color='black')\n        ax.plot([x, x], [22.91, 23.57], color='black')\n        ax.plot([x, x], [29.73, 30.39], color='black')\n\n    if highlight_line:\n        hl = highlight_line_number + 10\n        plt.plot([hl, hl], [0, 53.3], color='yellow')\n        plt.text(hl + 2, 50, '<- {}'.format(highlighted_name),\n                 color='yellow')\n    return ax\n\n## credit to https:\/\/medium.com\/kenlok\/how-to-create-sankey-diagrams-from-dataframes-in-python-e221c1b4d6b0\ndef genSankey(df,cat_cols=[],value_cols='',title='Sankey Diagram'):\n    # maximum of 6 value cols -> 6 colors\n    colorPalette = ['#4B8BBE','#306998','#FFE873','#FFD43B','#646464']\n    labelList = []\n    colorNumList = []\n    for catCol in cat_cols:\n        labelListTemp =  list(set(df[catCol].values))\n        colorNumList.append(len(labelListTemp))\n        labelList = labelList + labelListTemp\n        \n    # remove duplicates from labelList\n    labelList = list(dict.fromkeys(labelList))\n    \n    # define colors based on number of levels\n    colorList = []\n    for idx, colorNum in enumerate(colorNumList):\n        colorList = colorList + [colorPalette[idx]]*colorNum\n        \n    # transform df into a source-target pair\n    for i in range(len(cat_cols)-1):\n        if i==0:\n            sourceTargetDf = df[[cat_cols[i],cat_cols[i+1],value_cols]]\n            sourceTargetDf.columns = ['source','target','count']\n        else:\n            tempDf = df[[cat_cols[i],cat_cols[i+1],value_cols]]\n            tempDf.columns = ['source','target','count']\n            sourceTargetDf = pd.concat([sourceTargetDf,tempDf])\n        sourceTargetDf = sourceTargetDf.groupby(['source','target']).agg({'count':'sum'}).reset_index()\n        \n    # add index for source-target pair\n    sourceTargetDf['sourceID'] = sourceTargetDf['source'].apply(lambda x: labelList.index(x))\n    sourceTargetDf['targetID'] = sourceTargetDf['target'].apply(lambda x: labelList.index(x))\n    \n    # creating the sankey diagram\n    data = dict(\n        type='sankey',\n        node = dict(\n          pad = 15,\n          thickness = 20,\n          line = dict(\n            color = \"black\",\n            width = 0.5\n          ),\n          label = labelList,\n          color = colorList\n        ),\n        link = dict(\n          source = sourceTargetDf['sourceID'],\n          target = sourceTargetDf['targetID'],\n          value = sourceTargetDf['count']\n        )\n      )\n    \n    layout =  dict(\n        title = title,\n        font = dict(\n          size = 10\n        )\n    )\n       \n    fig = dict(data=[data], layout=layout)\n    return fig","901e4350":"play_result_teams = pd.merge(plays[['possessionTeam', 'gameId', 'playResult', 'offensePlayResult', 'epa']], games[['homeTeamAbbr', 'visitorTeamAbbr', 'gameId']], on='gameId')\nplay_result_teams['defensiveTeam'] = None\nplay_result_teams['defensiveTeam'].loc[play_result_teams['homeTeamAbbr'] == play_result_teams['possessionTeam']] = play_result_teams['visitorTeamAbbr']\nplay_result_teams['defensiveTeam'].loc[play_result_teams['visitorTeamAbbr'] == play_result_teams['possessionTeam']] = play_result_teams['homeTeamAbbr']\nplay_result_teams = pd.merge(play_result_teams, games[['gameId', 'week']], on='gameId')","443949a3":"measure = widgets.Dropdown(\n    options=['playResult', 'offensePlayResult', 'epa'],\n    value='playResult',\n    description='Measure',\n)\nweek = widgets.Dropdown(\n    options=['Overall', 'Week 1', 'Week 2', 'Week 3', 'Week 4', 'Week 5', 'Week 6', 'Week 7', 'Week 8',\n             'Week 9', 'Week 10', 'Week 11', 'Week 12', 'Week 13', 'Week 14', 'Week 15', 'Week 16', 'Week 17'],\n    value='Overall',\n    description='Period',\n)\n\ndef barit(week, measure):\n    \"\"\"\n    Filters and plot the dataframe as a bar plot of teams' defence performance\n\n    Args:\n    -----\n        * week (str): the period to filter on, or \"Overall\" to display the entire season\n        * measure (str): the option of measurement\n\n    Returns:\n    --------\n        A matplotlib bar plot\n\n    \"\"\"\n    plot = play_result_teams.copy()\n    if week != 'Overall':\n        week_num = int(week.split(' ')[1])\n        plot = plot[plot.week == week_num]\n        \n    if measure == 'playResult':\n        defence = plot.groupby('defensiveTeam').agg({'playResult': 'mean'})\n        defence.rename(columns = {'playResult': 'mean'}, inplace=True)\n    elif measure == 'offensePlayResult':\n        defence = plot.groupby('defensiveTeam').agg({'offensePlayResult': 'mean'})\n        defence.rename(columns = {'offensePlayResult': 'mean'}, inplace=True)\n    elif measure == 'epa':\n        defence = plot.groupby('defensiveTeam').agg({'epa': 'mean'})\n        defence.rename(columns = {'epa': 'mean'}, inplace=True)\n        \n    # Plot it (only if there's data to plot)\n    if len(plot) > 0:\n        fig, ax = plt.subplots(figsize=(15, 15))\n        ax.barh([i+1 for i in range(defence.shape[0])], defence['mean'].tolist())\n        ax.set_xlabel('Opponent\\'s Average Gain', size=15)\n        ax.set_yticklabels([])\n        ax.set_title('Team Defence Performance', size=15)\n        for x0, y0, path in zip([i+1 for i in range(defence.shape[0])], defence['mean'].tolist(), \n                               ['..\/input\/nfl-team-logos\/' + file for file in sorted(os.listdir('..\/input\/nfl-team-logos'))]):\n            ab = AnnotationBbox(getImage(path), (y0, x0), xybox=(-25, 0), frameon=False, \n                                xycoords='data', boxcoords=\"offset points\", pad=0)\n            ax.add_artist(ab)\n    else:\n        print(\"No data to show for current selection\")\n        \ninteract(barit, week=week, measure=measure)","2a7a8b4d":"fig = go.Figure()\nfor column in ['playResult', 'offensePlayResult', 'epa']:\n    defence = play_result_teams.groupby('defensiveTeam').agg({column: 'mean'})\n    fig.add_trace(\n        go.Bar(\n            x = [i+1 for i in range(defence.shape[0])],\n            y = defence[column],\n            name = 'Overall {}'.format(column)\n        )\n    )\n    fig.update_xaxes(tickvals=['' for i in range(defence.shape[0])])\n#     if column != 'epa':\n#         fig.update_layout(yaxis_range=[-1,8])\n#     else:\n#         fig.update_layout(yaxis_range=[-.5, .5])\n\n# add images\nfor i,src in zip(range(defence.shape[0]), sorted(os.listdir('..\/input\/nfl-team-logos'))):\n    logo = base64.b64encode(open('..\/input\/nfl-team-logos\/'+src, 'rb').read())\n    fig.add_layout_image(\n        source='data:image\/png;base64,{}'.format(logo.decode()),\n        xref=\"x\",\n        yref=\"y\",\n        x=i+1,\n        y=0,\n        xanchor=\"center\",\n        yanchor=\"middle\",\n        sizex=1,\n        sizey=1,\n    )\n    \nfig.update_layout(\n    template='plotly_dark',\n    updatemenus=[{\n        \"active\": 1,\n        \"showactive\": True,\n        \"buttons\": list(\n            [\n             dict(label = 'playResult',\n                  method = 'update',\n                  args = [{'visible': [True, False, False]}, # the index of True aligns with the indices of plot traces\n                          {'title': 'Overall Play Result',\n                           'showlegend': True}]),\n             dict(label = 'offensePlayResult',\n                  method = 'update',\n                  args = [{'visible': [False, True, False]},\n                          {'title': 'Offense Play Result',\n                           'showlegend': True}]),\n             dict(label = 'epa',\n                  method = 'update',\n                  args = [{'visible': [False, False, True]},\n                          {'title': 'EPA',\n                           'showlegend':True}])\n            ]\n        )\n    }\n    ],\n     title=\"Team Defence Performance\",\n     xaxis_title=\"\",\n     yaxis_title=\"Opponent's Average Gain\",\n     legend_title=\"Measure\"\n)\n\nfig.show()","6f4c54b6":"opposite_offence_teams = pd.merge(plays[['possessionTeam', 'gameId', 'playType']], games[['homeTeamAbbr', 'visitorTeamAbbr', 'gameId']], on='gameId')\nopposite_offence_teams['defensiveTeam'] = None\nopposite_offence_teams['defensiveTeam'].loc[opposite_offence_teams['homeTeamAbbr'] == opposite_offence_teams['possessionTeam']] = opposite_offence_teams['visitorTeamAbbr']\nopposite_offence_teams['defensiveTeam'].loc[opposite_offence_teams['visitorTeamAbbr'] == opposite_offence_teams['possessionTeam']] = opposite_offence_teams['homeTeamAbbr']\nopposite_offence_teams = pd.merge(opposite_offence_teams, games[['gameId', 'week']], on='gameId')","486abcac":"def stackit(week):\n    \"\"\"\n    Filters and plot the dataframe as a stack plot of teams' defence performance\n\n    Args:\n    -----\n        * week (str): the period to filter on, or \"Overall\" to display the entire season\n\n    Returns:\n    --------\n        A matplotlib stack plot\n\n    \"\"\"\n    plot = opposite_offence_teams.copy()\n    if week != 'Overall':\n        week_num = int(week.split(' ')[1])\n        plot = plot[plot.week == week_num]\n        \n    defence = plot.groupby(['defensiveTeam', 'playType']).agg({'possessionTeam': 'count'})\n        \n    # Plot it (only if there's data to plot)\n    if len(plot) > 0:\n        fig, ax = plt.subplots(figsize=(15, 15))\n        defence['possessionTeam'].unstack().plot(kind='bar', stacked=True, ax=ax)\n#         ax.barh([i+1 for i in range(defence.shape[0])], defence['possessionTeam'].tolist())\n        ax.set_xlabel('Faced Play Types', size=15)\n        ax.set_xticklabels([])\n        ax.set_title('Team Defence Performance', size=15)\n        for x0, y0, path in zip([i+.8 for i in range(32)], \n                                defence['possessionTeam'].unstack()['play_type_pass'].tolist(), \n                               ['..\/input\/nfl-team-logos\/' + file for file in sorted(os.listdir('..\/input\/nfl-team-logos'))]):\n            ab = AnnotationBbox(getImage(path), (x0, y0), xybox=(-25, 0), frameon=False, \n                                xycoords='data', boxcoords=\"offset points\", pad=0)\n            ax.add_artist(ab)\n#         plt.show()\n    else:\n        print(\"No data to show for current selection\")\n        \ninteractive(stackit, week=week)","d2413787":"fig = go.Figure()\ndefence = opposite_offence_teams.groupby(['defensiveTeam', 'playType']).agg({'possessionTeam': 'count'})\ndefence = defence.reset_index()\nfig.add_trace(\n    go.Bar(\n        x = [i+1 for i in range(defence.shape[0])],\n        y = defence['possessionTeam'].loc[defence['playType'] == 'play_type_pass'],\n        marker_color='rgb(55, 83, 109)',\n        name='play_type_pass'\n    )\n)\nfig.add_trace(\n    go.Bar(\n        x = [i+1 for i in range(defence.shape[0])],\n        y = defence['possessionTeam'].loc[defence['playType'] == 'play_type_sack'],\n        marker_color='rgb(26, 118, 255)',\n        name='play_type_sack'\n    )\n)\nfig.add_trace(\n    go.Bar(\n        x = [i+1 for i in range(defence.shape[0])],\n        y = defence['possessionTeam'].loc[defence['playType'] == 'play_type_unknown'],\n        marker_color='rgb(35, 63, 19)',\n        name='play_type_unknown'\n    )\n)\n\nfig.update_xaxes(tickvals=['' for i in range(defence.shape[0])])\nfig.update_layout(yaxis_range=[-50,700],\n                 title=\"Team Defence Performance\",\n                 xaxis_title=\"Faced Play Types\",\n                 yaxis_title=\"Amount\",\n                 legend_title=\"Play Type\")\n\n# add images\nfor i,src, yy in zip(range(defence.shape[0]), sorted(os.listdir('..\/input\/nfl-team-logos')), defence['possessionTeam'].tolist()):\n    logo = base64.b64encode(open('..\/input\/nfl-team-logos\/'+src, 'rb').read())\n    fig.add_layout_image(\n        source='data:image\/png;base64,{}'.format(logo.decode()),\n        xref=\"x\",\n        yref=\"y\",\n        x=i+1,\n        y=0,\n        xanchor=\"center\",\n        yanchor=\"middle\",\n        sizex=50,\n        sizey=50,\n    )\n    \nfig.update_layout(\n    template='plotly_dark',\n    barmode='stack'\n)\n\nfig.show()","c2533785":"plot = plays.groupby(['personnelO', 'playType', 'personnelD']).count()['gameId']\nplot = plot.reset_index()\ngo.Figure(genSankey(plot, ['personnelO', 'playType', 'personnelD'], 'gameId', 'Distribution of Offensive Personnel vs. Defensive Personnel'))","fc7c3178":"play_teams = pd.merge(plays[['possessionTeam', 'gameId', 'passResult']], games[['homeTeamAbbr', 'visitorTeamAbbr', 'gameId']], on='gameId')\nplay_teams['defensiveTeam'] = None\nplay_teams['defensiveTeam'].loc[play_teams['homeTeamAbbr'] == play_teams['possessionTeam']] = play_teams['visitorTeamAbbr']\nplay_teams['defensiveTeam'].loc[play_teams['visitorTeamAbbr'] == play_teams['possessionTeam']] = play_teams['homeTeamAbbr']\nplay_teams = pd.merge(play_teams, games[['gameId', 'week']], on='gameId')","fca680bf":"def scatterit(week):\n    \"\"\"\n    Filters and plot the dataframe as a scatter plot of teams' defence performance\n\n    Args:\n    -----\n        * week (str): the period to filter on, or \"Overall\" to display the entire season\n\n    Returns:\n    --------\n        A matplotlib scatter plot\n\n    \"\"\"\n    plot = play_teams.copy()\n    if week != 'Overall':\n        week_num = int(week.split(' ')[1])\n        plot = plot[plot.week == week_num]\n        \n    defence = plot[plot['passResult'] != 'C'].groupby('defensiveTeam').agg({'passResult': 'count'}) \/ plot.groupby('defensiveTeam').agg({'passResult': 'count'})\n        \n    # Plot it (only if there's data to plot)\n    if len(plot) > 0:\n        fig, ax = plt.subplots(figsize=(15, 15))\n        ax.scatter([i+1 for i in range(defence.shape[0])], defence['passResult'].tolist())\n        ax.set_ylabel('Unallowed Passes %', size=15)\n        ax.set_xticklabels([])\n        ax.set_title('Team Defence Performance', size=15)\n        for x0, y0, path in zip([i+1 for i in range(defence.shape[0])], defence['passResult'].tolist(), \n                               ['..\/input\/nfl-team-logos\/' + file for file in sorted(os.listdir('..\/input\/nfl-team-logos'))]):\n            ab = AnnotationBbox(getImage(path), (x0, y0), frameon=False)\n            ax.add_artist(ab)\n    else:\n        print(\"No data to show for current selection\")\n        \ninteractive(scatterit, week=week)","b6b7795d":"defence = play_teams[play_teams['passResult'] != 'C'].groupby('defensiveTeam').agg({'passResult': 'count'}) \/ play_teams.groupby('defensiveTeam').agg({'passResult': 'count'})\nfig = px.scatter(x=[i+1 for i in range(defence.shape[0])], \n                 y=defence['passResult'].tolist(), \n                 template='plotly_dark',\n                 labels=dict(x=\"\", y=\"Unallowed Passes %\"))\n\nfig.update_xaxes(tickvals=['' for i in range(defence.shape[0])])\nfig.update_layout(\n                 title=\"Team Defence Performance\",\n                 xaxis_title=\"Faced Play Types\",\n                 yaxis_title=\"Unallowed Passes %\"\n                )\n\n# add images\nfor i,src,yy in zip(range(defence.shape[0]), sorted(os.listdir('..\/input\/nfl-team-logos')), defence['passResult'].tolist()):\n    logo = base64.b64encode(open('..\/input\/nfl-team-logos\/'+src, 'rb').read())\n    fig.add_layout_image(\n        source='data:image\/png;base64,{}'.format(logo.decode()),\n        xref=\"x\",\n        yref=\"y\",\n        x=i+1,\n        y=yy,\n        xanchor=\"center\",\n        yanchor=\"middle\",\n        sizex=1,\n        sizey=1,\n    )\n\nfig.show() ","d3bf1beb":"# to store the weekly data in a list can increase the efficiency\nws = []\nfor i in range(1,18):\n    ws.append(pd.read_csv(dataDir+\"week{}.csv\".format(i)))\n    \ndef get_week_df(gameID, playID):\n    wk = games.query(\"gameId=={}\".format(gameID)).iloc[0].week\n    week_df = ws[wk-1]\n    information = week_df[(week_df.playId==playID)&(week_df.gameId==gameID)]\n    return information, wk\n\ninitial_re = \" (to|for) [A-Z]{1}[a-z]*\\.\\s?[A-Z]{1}[-\\'a-zA-Z]+[\\s\\.$]+\"\nname_re =              \"[A-Z]{1}[a-z]*\\.\\s?[A-Z]{1}[-\\'a-zA-Z]+[\\s\\.$]+\"\nfilt = plays.playDescription.str.contains(initial_re, regex=True)\nfull_names = []\nfor i in tqdm(range(len(filt))):\n    full_name = \"-\"\n    if \"E.St. Brown\" in plays.iloc[i].playDescription:\n        full_name = \"Equanimeous St. Brown\"\n    elif filt.iloc[i]:\n        shit = re.search(initial_re, plays.iloc[i].playDescription).group(0)\n        target = re.search(name_re, shit).group(0).split(\".\")\n        \n        if target[-1] == '':\n            target.pop(-1)\n        \n        # Get the appropriate week\\d.csv\n        result, wk = get_week_df(plays.iloc[i].gameId, plays.iloc[i].playId)\n        \n        # filter by the qb's team, if there is a qb on the field\n        something = result.query(\"position=='QB'\")\n        if len(something) > 0:\n            qb_team = something.team.iloc[0]\n            result = result[result.team==qb_team]\n        \n        # filter for names that match\n        spec_name_re = \"^{}[-\\'\\.a-zA-Z]+ {}$\".format(target[0].strip(), target[1].strip())\n        result = result[result.displayName.str.contains(spec_name_re, regex=True)].displayName.unique().tolist()\n        if len(result) == 0:\n            players_result = players[players.displayName.str.contains(spec_name_re, regex=True)]\n            if len(players_result) > 1:\n                # we see if other plays with the matching name, use that name\n                potential = pd.Series(ws[wk-1][ws[wk-1].gameId==plays.iloc[i].gameId].displayName.unique().tolist())\n                potential = potential[potential.str.contains(spec_name_re, regex=True)]\n                if len(potential) != 1:\n                    print(target)\n                    print(potential)\n                    print(wk, plays.iloc[i].gameId, plays.iloc[i].playId)\n                    print(plays.iloc[i].playDescription)\n                    print(\"UNCAUGHT ERROR 11111111111111111111111111111111111111111111111111111111111\")\n                else:\n                    full_name = potential.iloc[0]\n            elif len(players_result) == 1:\n                full_name = players_result.iloc[0].displayName\n            # When len(players_result)==0, it means that the targeted player is not a usually targeted player (LB and etc)\n            # so we ignore this case\n            \n        else:\n            full_name = result[0]\n        # there aren't any cases where len(result) > 1. I've checked already\n    full_names.append(full_name)\nplays = plays.assign(target=full_names)","8ee231ff":"pass_dest = pd.merge(plays[['possessionTeam', 'gameId', 'target', 'playId', 'quarter']], games[['homeTeamAbbr', 'visitorTeamAbbr', 'gameId', 'week']], on='gameId')\npass_dest['defensiveTeam'] = None\npass_dest['defensiveTeam'].loc[pass_dest['homeTeamAbbr'] == pass_dest['possessionTeam']] = pass_dest['visitorTeamAbbr']\npass_dest['defensiveTeam'].loc[pass_dest['visitorTeamAbbr'] == pass_dest['possessionTeam']] = pass_dest['homeTeamAbbr']","46b06ece":"truncated_plays = pass_dest[['gameId', 'playId', 'target', 'defensiveTeam', 'quarter']].loc[plays.target != '-']","f85eea30":"truncated_weeks = weeks[['x', 'y', 'event', 'displayName', 'gameId', 'playId', 'nflId']]\ntruncated_weeks = truncated_weeks[truncated_weeks.event.isin(['pass_forward', 'pass_shovel', 'pass_lateral', 'snap_direct', 'qb_spike'])]","4d617c77":"location = pd.merge(truncated_plays, truncated_weeks, left_on=['target', 'gameId', 'playId'], right_on = ['displayName', 'gameId', 'playId'])[['x', 'y', 'defensiveTeam', 'quarter']]","d14c8396":"# assume the offensing side always starts from the left to the right\nlocation['x'].loc[location['quarter'].isin([2, 3, 5])] = 120 - location['x']\nlocation['y'].loc[location['quarter'].isin([2, 3, 5])] = 53.3 - location['y']","f19dcc1f":"team = widgets.Dropdown(\n    options=['All'] + [item.split('.')[0] for item in sorted(os.listdir('..\/input\/nfl-team-logos'))],\n    value='All',\n    description='Team',\n)\n\ndef heatit(team):\n    \"\"\"\n    Filters and plot the dataframe as a heatmap of teams' defence performance\n\n    Args:\n    -----\n        * team (str): the team to filter on, or \"Overall\" to display the entire league\n\n    Returns:\n    --------\n        A seaborn heat map\n\n    \"\"\"\n    plot = location.copy()\n    if team != 'All':\n        plot = plot[plot.defensiveTeam == team]\n        \n    # Plot it (only if there's data to plot)\n    if len(plot) > 0:\n        fig = plt.figure(figsize=(20, 11))\n        ax = create_football_field()\n        ax.set_title('Passes Faced by {}'.format(team), size=15)\n        sns.kdeplot(plot.x, plot.y, shade = True, color='green',\n                    shade_lowest=False, n_levels=100, ax=ax)\n    else:\n        print(\"No data to show for current selection\")\n        \ninteractive(heatit, team=team)","71992f9c":"player_loc = pd.merge(plays[['gameId', 'playId', 'target']], weeks[['gameId', 'playId', 'event', 'team', 'x', 'y', 'displayName']], left_on=['gameId', 'playId'], right_on = ['gameId', 'playId'])\nplayer_loc = player_loc[player_loc.event.isin(['pass_forward', 'pass_shovel', 'pass_lateral', 'snap_direct', 'qb_spike'])]","43b163eb":"closest_players = player_loc[['gameId', 'playId']].drop_duplicates()\nclosest_players['playerName'] = None\nfor item in tqdm(player_loc[['gameId', 'playId']].drop_duplicates().values.tolist()):\n    tmp = player_loc.groupby(['gameId', 'playId']).get_group((item[0], item[1]))\n    if tmp['target'].head(1).values[0] != '-':\n        try:\n            team = tmp['team'].loc[tmp['target'] == tmp['displayName']].values[0]\n            loc = tmp[['x', 'y']].loc[tmp['target'] == tmp['displayName']]\n            tmp = tmp[(tmp.team != team) & (tmp.team != 'football')]\n            index = np.argmin(np.sqrt((tmp.x-loc.x.values[0])**2 + (tmp.y-loc.y.values[0])**2))\n            closest_players['playerName'].loc[(closest_players.gameId == item[0]) & (closest_players.playId == item[1])] = tmp.reset_index().iloc[index]['displayName']\n        except:\n            continue","8a27cbc5":"closest_players = pd.merge(closest_players, plays[['gameId', 'playId', 'passResult', 'quarter']], left_on=['gameId', 'playId'], right_on=['gameId', 'playId'])","203508cf":"unallowed_pass_rate = closest_players[closest_players['passResult'] != 'C'].groupby('playerName').agg({'passResult': 'count'}) \/ closest_players.groupby('playerName').agg({'passResult': 'count'})\nunallowed_pass_rate['num'] = closest_players.groupby('playerName').count()['passResult']","6a5dc44a":"plot = unallowed_pass_rate[unallowed_pass_rate['num'] > 30].reset_index().sort_values('passResult', ascending=False).head(10)\nplot['passResult'] = plot['passResult'] * 10000\nfig, ax = plt.subplots(figsize=(15, 15))\nplot.reset_index().plot(kind='scatter', x='index', y='num', s='passResult', ax=ax)\nax.set_xticklabels([])\nax.set_ylabel('Entries')\nax.set_xlabel('')\nax.set_title('Players with Highest Unallowing Pass Rate')\nfor line in plot.reset_index().iterrows():\n     ax.text(line[1]['index'], line[1]['num'], '{}\\n{:.2f}%'.format(line[1]['playerName'], line[1]['passResult']\/100), \n             horizontalalignment='center', size='medium', color='black', weight='semibold')","a68e700b":"location = pd.merge(plot, weeks[['x', 'y', 'displayName', 'gameId', 'playId']], left_on='playerName', right_on='displayName')[['x', 'y', 'displayName', 'gameId', 'playId']]","6ffd89a5":"location = pd.merge(location, plays[['gameId', 'playId', 'quarter']], left_on=['gameId', 'playId'], right_on=['gameId', 'playId'])\nlocation['x'].loc[location['quarter'].isin([2, 3, 5])] = 120 - location['x']\nlocation['y'].loc[location['quarter'].isin([2, 3, 5])] = 53.3 - location['y']","8dcc349f":"fig, ax = plt.subplots(5, 2, figsize=(20, 25))\n\nfor i in range(5):\n    for j in range(2):\n        plot = location[location['displayName'] == location['displayName'].unique()[2*i+j]]\n        ax[i][j].set_title('{}\\'s location'.format(location['displayName'].unique()[2*i+j]), size=15)\n        sns.kdeplot(plot.x, plot.y, shade = True, color='green',\n                    shade_lowest=False, n_levels=100, ax=ax[i][j])\n        ax[i][j] = create_football_field(ax[i][j])","a60a1004":"**Helper functions:**","59bd7d16":"## Matplotlib version","282c03ff":"> # Reference\n* https:\/\/www.kaggle.com\/hungnguyen95\/nfl-big-data-bowl-2021-plotting-player-heatmap\n* https:\/\/www.kaggle.com\/beomjunbae\/parsing-targets\n* https:\/\/medium.com\/kenlok\/how-to-create-sankey-diagrams-from-dataframes-in-python-e221c1b4d6b0","e53f5939":"# How do teams usually play the games?","576ecced":"## Matplotlib version","dd57658a":"# Team Unallowed Pass Completion Percentage\n---\nSince the most offence that an NFL team would face is passing, let's have a look at who is the most effective one to deal with. It turns out that Baltimore outperforms all its opponents this season. That seems to prove that whoever is good at stopping passes is good at defence.","648dbbcd":"# Where did the passes go?\n---\nThanks to [this notebook](https:\/\/www.kaggle.com\/beomjunbae\/parsing-targets), I managed to discover the potential target player's location. My idea is that assuming the receiver was determined when the ball was thrown by the passer (usually the quarterbacks), the location of the target player can be considered as the destination of the ball.\nAccording to my visualization, most passes clustered within the two 20-yardlines.","2e14b890":"## Plotly version","b99aee02":"# Offence Options\n----\nIn this league, most offensive sides would choose to attack by passing the ball.","058c1bc4":"## Plotly version","0ea6def7":"# General Defence Performance\n---\nI compared all the teams' defence result in the league, which is respectively measured by EPA, offense play result and play result. Generally speaking, Baltimore Ravens is the most outstanding one.","40943ef8":"In this notebook, I demonstrate some interesting insights using visualization. Mostly I will focus on NFL teams and individuals' defence performance. As for the team logo images that I used in this notebook, please feel free to refer to my dataset: https:\/\/www.kaggle.com\/anzhemeng\/nfl-team-logos.\n\n**NOTE**: there are some images that were created using ipywidgets' interactive module while are unavailable in the stable kaggle notebook. Please copy and edit this notebook if you are interested in them.","244a76e1":"# Player Efficiency\n---\nSimilar to teams' evaluation, I checked how many pass attempts were stopped by defensive players. Here is the list of top ten players who managed to achieve more than 50% unallowed pass rate with at least 50 potential passes around them."}}