{"cell_type":{"4beebf3b":"code","6db0cea9":"code","13f22ff5":"code","7a3af6d8":"code","a10240b1":"code","6988d3c5":"code","4396f621":"code","beac69df":"code","b2e349c6":"code","de1af3af":"code","bff8690f":"code","027f738f":"code","a3e4bbfd":"code","27ccbd52":"code","b908aad5":"code","5a306194":"code","a8244b60":"code","d0101133":"code","efb6a919":"markdown","904ceb02":"markdown","15fc7acf":"markdown","bcaba1e9":"markdown","1ad11825":"markdown","d422c3a4":"markdown","3e41cd69":"markdown","20b940db":"markdown","29ae2165":"markdown","dfc0278d":"markdown","76e969cb":"markdown","d3d11871":"markdown","87f0f7ff":"markdown","bbe75276":"markdown","d69e58ad":"markdown","7854fb9e":"markdown","bac6eabb":"markdown","70e9d5c2":"markdown","6e591eca":"markdown","03820448":"markdown","1b985691":"markdown","d5c6501d":"markdown","b0c2e4b3":"markdown","7614a342":"markdown","117dd3bf":"markdown","0e92f13b":"markdown","8a476884":"markdown","8e106384":"markdown","577537b6":"markdown","2eeec982":"markdown","0a7177fe":"markdown","f310356d":"markdown","0ec8a59b":"markdown","d26a1932":"markdown","1dd759d1":"markdown"},"source":{"4beebf3b":"from pathlib import Path        # file paths\nfrom typing import Union        # type hints","6db0cea9":"import numpy as np              # linear algebra\nimport pandas as pd             # dataframes\nimport matplotlib.pyplot as plt # visualisations\nimport seaborn as sns           # visualisations\nfrom scipy import stats         # statistics","13f22ff5":"ROOT_DIRECTORY = Path('..\/input\/ken-jee-youtube-data\/')\n\nMETRICS_FILE = 'Aggregated_Metrics_By_Video.csv'\nCOMMENTS_FILE = 'All_Comments_Final.csv'\nPERFORMANCE_FILE = 'Video_Performance_Over_Time.csv'","7a3af6d8":"METRICS_SCHEMA = {\n    \"Video\": {\n        \"name\": \"video_id\",\n        \"data_type\": str\n    },\n    \"Video title\": {\n        \"name\": \"title\",\n        \"data_type\": str\n    },\n    \"Video pub\u00adlish time\": {\n        \"name\": \"date\",\n        \"data_type\": \"datetime\"\n    },\n    \"Com\u00adments ad\u00added\": {\n        \"name\": \"comment_count\",\n        \"data_type\": int\n    },\n    \"Shares\": {\n        \"name\": \"share_count\",\n        \"data_type\": int\n    },\n    \"Likes\": {\n        \"name\": \"like_count\",\n        \"data_type\": int\n    },\n    \"Dis\u00adlikes\": {\n        \"name\": \"dislike_count\",\n        \"data_type\": int\n    },\n    \"Sub\u00adscribers gained\": {\n        \"name\": \"subscribers_gained\",\n        \"data_type\": int\n    },\n    \"Sub\u00adscribers lost\": {\n        \"name\": \"subscribers_lost\",\n        \"data_type\": int\n    },\n    \"Sub\u00adscribers\": {\n        \"name\": \"net_subscribers\",\n        \"data_type\": int\n    },\n    \"Views\": {\n        \"name\": \"view_count\",\n        \"data_type\": int\n    },\n    \"Av\u00ader\u00adage per\u00adcent\u00adage viewed (%)\": {\n        \"name\": \"average_view_ratio\",\n        \"data_type\": float\n    },\n    \"Av\u00ader\u00adage view dur\u00ada\u00adtion\": {\n        \"name\": \"average_watch_time\",\n        \"data_type\": \"timedelta\"\n    },\n    \"Watch time (hours)\": {\n        \"name\": \"total_watch_time\",\n        \"data_type\": float\n    },\n    \"Im\u00adpres\u00adsions\": {\n        \"name\": \"impression_count\",\n        \"data_type\": int\n    },\n    \"Im\u00adpres\u00adsions click-through rate (%)\": {\n        \"name\": \"click_through_rate\",\n        \"data_type\": float\n    },\n    \"RPM (USD)\": {\n        \"name\": \"rpm\",\n        \"data_type\": float\n    },\n    \"CPM (USD)\": {\n        \"name\": \"cpm\",\n        \"data_type\": float\n    },\n    \"Your es\u00adtim\u00adated rev\u00aden\u00adue (USD)\": {\n        \"name\": \"estimated_revenue\",\n        \"data_type\": float\n    }\n}\n\nCOMMENTS_SCHEMA = {\n    \"Comment_ID\": {\n        \"name\": \"comment_id\",\n        \"data_type\": str\n    },\n    \"Date\": {\n        \"name\": \"date\",\n        \"data_type\": \"datetime\"\n    },\n    \"VidId\": {\n        \"name\": \"video_id\",\n        \"data_type\": str\n    },\n    \"user_ID\": {\n        \"name\": \"user_id\",\n        \"data_type\": str\n    },\n    \"Comments\": {\n        \"name\": \"comment_text\",\n        \"data_type\": str\n    },\n    \"Reply_Count\": {\n        \"name\": \"reply_count\",\n        \"data_type\": int\n    },\n    \"Like_Count\": {\n        \"name\": \"like_count\",\n        \"data_type\": int\n    }\n}\n\nPERFORMANCE_SCHEMA = {\n    \"Date\": {\n        \"name\": \"date\",\n        \"data_type\": \"datetime\"\n    },\n    \"Video Title\": {\n        \"name\": \"title\",\n        \"data_type\": str\n    },\n    \"External Video ID\": {\n        \"name\": \"video_id\",\n        \"data_type\": str\n    },\n    \"Video Length\": {\n        \"name\": \"length\",\n        \"data_type\": int\n    },\n    \"Thumbnail link\": {\n        \"name\": \"thumbnail\",\n        \"data_type\": str\n    },\n    \"Views\": {\n        \"name\": \"view_count\",\n        \"data_type\": int\n    },\n    \"Video Likes Added\": {\n        \"name\": \"likes_added\",\n        \"data_type\": int\n    },\n    \"Video Dislikes Added\": {\n        \"name\": \"dislikes_added\",\n        \"data_type\": int\n    },\n    \"Video Likes Removed\": {\n        \"name\": \"likes_removed\",\n        \"data_type\": int\n    },\n    \"User Subscriptions Added\": {\n        \"name\": \"subscribers_gained\",\n        \"data_type\": int\n    },\n    \"User Subscriptions Removed\": {\n        \"name\": \"subscribers_lost\",\n        \"data_type\": int\n    },\n    \"Average View Percentage\": {\n        \"name\": \"average_view_ratio\",\n        \"data_type\": float\n    },\n    \"Average Watch Time\": {\n        \"name\": \"average_watch_time\",\n        \"data_type\": float\n    },\n    \"User Comments Added\": {\n        \"name\": \"comments_added\",\n        \"data_type\": int\n    }\n}","a10240b1":"def typecast_column(column: pd.Series, data_type: Union[type, str]):\n    if data_type == 'datetime':\n        result = pd.to_datetime(column)\n    elif data_type == 'timedelta':\n        result = column.apply(lambda row: np.int32(pd.Timedelta(row).seconds))\n    elif data_type == int:\n        result = column.astype(np.int32)\n    elif data_type == float:\n        result = column.astype(np.float32)\n    else:\n        result = column.astype(data_type)\n    return result","6988d3c5":"metrics = pd.read_csv(\n    ROOT_DIRECTORY \/ METRICS_FILE,\n    sep=',',\n    encoding='utf-8'\n)\n\ncomments = pd.read_csv(\n    ROOT_DIRECTORY \/ COMMENTS_FILE,\n    sep=',',\n    encoding='utf-8'\n)\n\nperformance = pd.read_csv(\n    ROOT_DIRECTORY \/ PERFORMANCE_FILE,\n    sep=',',\n    encoding='utf-8'\n)","4396f621":"print('\\t\\t Rows\\t\\t', 'Columns')\nprint('Metrics\\t\\t', metrics.shape[0], '\\t\\t', metrics.shape[1])\nprint('Comments\\t', comments.shape[0], '\\t\\t', comments.shape[1])\nprint('Performance\\t', performance.shape[0], '\\t', performance.shape[1])","beac69df":"print('Metrics:')\nprint(metrics.dtypes)\nprint()\nprint('Comments:')\nprint(comments.dtypes)\nprint()\nprint('Performance:')\nprint(performance.dtypes)","b2e349c6":"initial_total_memory = metrics.memory_usage().sum() \\\n    + comments.memory_usage().sum() \\\n    + performance.memory_usage().sum()\n    \nprint('Initial memory consumption:', round(initial_total_memory\/1000000, 3), 'MB')","de1af3af":"for column in metrics.columns:\n    metrics[column] = typecast_column(\n        metrics[column],\n        METRICS_SCHEMA[column][\"data_type\"]\n    )\n    \nfor column in comments.columns:\n    comments[column] = typecast_column(\n        comments[column],\n        COMMENTS_SCHEMA[column][\"data_type\"]\n    )\n    \nfor column in performance.columns:\n    performance[column] = typecast_column(\n        performance[column],\n        PERFORMANCE_SCHEMA[column][\"data_type\"]\n    )","bff8690f":"print('Metrics:')\nprint(metrics.dtypes)\nprint()\nprint('Comments:')\nprint(comments.dtypes)\nprint()\nprint('Performance:')\nprint(performance.dtypes)","027f738f":"total_memory = metrics.memory_usage().sum() \\\n    + comments.memory_usage().sum() \\\n    + performance.memory_usage().sum()\n    \nprint('Memory consumption:\\t', round(total_memory\/1000000, 3), 'MB')\nprint('Improvement:\\t\\t', round(100*(initial_total_memory-total_memory)\/initial_total_memory, 1), \"%\")","a3e4bbfd":"metrics_column_map = {\n    column: METRICS_SCHEMA[column][\"name\"]\n    for column\n    in METRICS_SCHEMA.keys()\n}\n\ncomments_column_map = {\n    column: COMMENTS_SCHEMA[column][\"name\"]\n    for column\n    in COMMENTS_SCHEMA.keys()\n}\n\nperformance_column_map = {\n    column: PERFORMANCE_SCHEMA[column][\"name\"]\n    for column\n    in PERFORMANCE_SCHEMA.keys()\n}","27ccbd52":"metrics.rename(columns=metrics_column_map, inplace=True)\ncomments.rename(columns=comments_column_map, inplace=True)\nperformance.rename(columns=performance_column_map, inplace=True)","b908aad5":"metrics.sort_values(by=\"date\", inplace=True)\ncomments.sort_values(by=\"date\", inplace=True)\nperformance.sort_values(by=\"date\", inplace=True)","5a306194":"metrics.sample(3)","a8244b60":"comments.sample(3)","d0101133":"performance.sample(3)","efb6a919":"### 3.2 Renaming<a id=\"3.2\"><\/a>","904ceb02":"Import **standard library** packages","15fc7acf":"### 4.2 Next steps<a id=\"4.2\"><\/a>","bcaba1e9":"### 2.1 Packages<a id=\"2.1\"><\/a>","1ad11825":"**Rename** columns using column name maps","d422c3a4":"Import **PyPI** packages","3e41cd69":"Typecast a column using limited precision with a data type argument","20b940db":"* 3 of the 4 given datasets will be considered:\n    * Aggregated metrics by video: contains **summary metrics** of videos.\n    * All comments: contains **comments** posted on videos.\n    * Video performance over time: contains **time-series performance metrics** of videos.","29ae2165":"Randomly **sample** 3 rows from each cleaned table","dfc0278d":"### 1.1 Problem definition<a id=\"1.1\"><\/a>","76e969cb":"**Read** CSV files into in-memory dataframes","d3d11871":"### 2.2 Parameters<a id=\"2.2\"><\/a>","87f0f7ff":"### 3.1 Typecasting<a id=\"3.1\"><\/a>","bbe75276":"## 4 Conclusion<a id=\"4\"><\/a>","d69e58ad":"**1&nbsp;&nbsp;[Introduction](#1)**  \n&nbsp;&nbsp;&nbsp;&nbsp;1.1&nbsp;&nbsp;[Problem definition](#1.1)  \n&nbsp;&nbsp;&nbsp;&nbsp;1.2&nbsp;&nbsp;[Datasets](#1.2)  \n**2&nbsp;&nbsp;[Environment](#2)**  \n&nbsp;&nbsp;&nbsp;&nbsp;2.1&nbsp;&nbsp;[Packages](#2.1)  \n&nbsp;&nbsp;&nbsp;&nbsp;2.2&nbsp;&nbsp;[Parameters](#2.2)  \n&nbsp;&nbsp;&nbsp;&nbsp;2.3&nbsp;&nbsp;[Functions](#2.3)  \n&nbsp;&nbsp;&nbsp;&nbsp;2.4&nbsp;&nbsp;[Data](#2.4)  \n**3&nbsp;&nbsp;[Wrangling](#3)**  \n&nbsp;&nbsp;&nbsp;&nbsp;3.1&nbsp;&nbsp;[Typecasting](#3.1)  \n&nbsp;&nbsp;&nbsp;&nbsp;3.2&nbsp;&nbsp;[Renaming](#3.2)  \n&nbsp;&nbsp;&nbsp;&nbsp;3.3&nbsp;&nbsp;[Sorting](#3.3)  \n**4&nbsp;&nbsp;[Conclusion](#4)**  \n&nbsp;&nbsp;&nbsp;&nbsp;4.1&nbsp;&nbsp;[Results](#4.1)  \n&nbsp;&nbsp;&nbsp;&nbsp;4.2&nbsp;&nbsp;[Next steps](#4.2)","7854fb9e":"## 2 Environment<a id=\"2\"><\/a>","bac6eabb":"**Typecast** columns to appropriate data types","70e9d5c2":"## 3 Wrangling<a id=\"3\"><\/a>","6e591eca":"### 2.3 Functions<a id=\"2.3\"><\/a>","03820448":"### 1.2 Datasets<a id=\"1.2\"><\/a>","1b985691":"Check improvements in **memory consumption**","d5c6501d":"### 2.4 Data<a id=\"2.4\"><\/a>","b0c2e4b3":"* The pipeline has transformed raw YouTube datasets into a format suitable for **exploratory data analysis**, **further validations** and **inference\/prediction models**.\n* Identified **data quality issues**:\n  * Aggregated metrics by video: **encoding issue in column names** (rendered as unknown characters in Kaggle notebook) - resolved with column renaming.\n  * Aggregated metrics by video: **first row contains aggregated summary statistics** - should be omitted if further aggregations are performed (to avoid double counting).\n  * **Missing and infinite values** detected: motivates identifying mechanism of missingness, imputation or omission strategies and division by zero calculations.","7614a342":"Define **global constants**","117dd3bf":"### 4.1 Results<a id=\"4.1\"><\/a>","0e92f13b":"Check **inferred data types**","8a476884":"Check **initial memory consumption**","8e106384":"**Sort** tables by dates","577537b6":"Check dataframe **shapes**","2eeec982":"Confirm **updated data types**","0a7177fe":"**Schema design**: these dictionaries of dictionaries contain mappings between raw columns and their target names and data types.","f310356d":"Generate **column name maps**","0ec8a59b":"* This notebook will demonstrate a simple **data engineering pipeline** to transform the raw YouTube datasets into cleaned tables for downstream analytics and modelling tasks.\n* The problem can be framed as a sequence of data transformations: **loading**, **typecasting**, **renaming** and **sorting**.","d26a1932":"### 3.3 Sorting<a id=\"3.3\"><\/a>","1dd759d1":"## 1 Introduction<a id=\"1\"><\/a>"}}