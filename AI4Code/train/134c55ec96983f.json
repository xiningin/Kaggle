{"cell_type":{"a6b4862f":"code","d1bc780c":"code","c6c72fa9":"code","9c11e394":"code","7e73870d":"code","372f86fc":"code","34136377":"code","fbf54dda":"code","06130363":"code","274f002f":"code","cda3a65e":"code","4fff3f07":"markdown","f3f0910f":"markdown","d7baaef5":"markdown","1c99d1a8":"markdown","0f5ba58e":"markdown","e35af5b5":"markdown","eb25f560":"markdown","d643d46b":"markdown","eaae6a05":"markdown","efac19d7":"markdown","d4331e1d":"markdown","5aead10c":"markdown"},"source":{"a6b4862f":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.model_selection import train_test_split\nfrom sklearn import metrics","d1bc780c":"df = pd.read_csv(\"..\/input\/diabetes\/diabetes.csv\")\ndf.head()","c6c72fa9":"df.describe()","9c11e394":"featrue_cols = ['Pregnancies', 'Insulin', 'BMI', 'Age', 'Glucose', 'BloodPressure',\n                'DiabetesPedigreeFunction']\nX = df[featrue_cols] #features\ny = df['Outcome'] #Target varible\ndata = X.join(y) #\u0633\u0627\u062e\u062a \u062f\u06cc\u062a\u0627\u0633\u062a \u062c\u062f\u06cc\u062f \u0628\u0627 \u0633\u062a\u0648\u0646 \u0647\u0627\u06cc \u062f\u0644\u062e\u0648\u0627\u0647\ndata","7e73870d":"X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=42)","372f86fc":"from sklearn.preprocessing import StandardScaler\nsc = StandardScaler()\nX_train = sc.fit_transform(X_train)\nX_test = sc.transform(X_test)","34136377":"#\u0628\u0627 \u0627\u0633\u062a\u0641\u0627\u062f\u0647 \u0627\u0632 \u0642\u0637\u0639\u0647 \u06a9\u062f \u0632\u06cc\u0631 \u0648 \u0631\u0633\u0645 \u0646\u0645\u0648\u062f\u0627\u0631\u060c  \"\u0645\u0639\u06cc\u0627\u0631\"  \u0648  \"\u0639\u0645\u0642\"  \u0645\u0646\u0627\u0633\u0628 \u0628\u0631\u0627\u06cc \u0627\u0644\u06af\u0648\u0631\u06cc\u062a\u0645 \u062f\u0631\u062e\u062a \u062a\u0635\u0645\u06cc\u0645 \u0628\u062f\u0633\u062a \u0645\u06cc\u0627\u0648\u0631\u06cc\u0645\n\nfrom sklearn.metrics import accuracy_score\n\nmax_depth = []\nacc_gini = []\nacc_entropy = []\n\nfor i in range(1,21):\n    dtree = DecisionTreeClassifier(criterion = \"gini\", max_depth = i)\n    dtree.fit(X_train, y_train)\n    pred = dtree.predict(X_test)\n    acc_gini.append(accuracy_score(y_test, pred))\n    \n    dtree = DecisionTreeClassifier(criterion = \"entropy\", max_depth = i)\n    dtree.fit(X_train, y_train)\n    pred = dtree.predict(X_test)\n    acc_entropy.append(accuracy_score(y_test, pred))\n    max_depth.append(i)\n    \nd = pd.DataFrame({\"acc_gini\" : pd.Series(acc_gini),\n                  \"acc_entropy\" : pd.Series(acc_entropy),\n                  \"max_depth\" : pd.Series(max_depth)})\n\nplt.plot(\"max_depth\", \"acc_gini\", data = d, label = \"gini\")\nplt.plot(\"max_depth\", \"acc_entropy\", data = d, label = \"entropy\")\nplt.xlabel(\"Max_depth\")\nplt.ylabel(\"Accuracy\")\nplt.xticks([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20])\nplt.legend()\nplt.show()","fbf54dda":"classifier = DecisionTreeClassifier(criterion = \"entropy\", max_depth = 12)\nclassifier.fit(X_train, y_train)","06130363":"y_pred = classifier.predict(X_test)","274f002f":"from sklearn.metrics import confusion_matrix\ncm = confusion_matrix(y_test, y_pred)\ncm","cda3a65e":"print(\"Accuracy:\",metrics.accuracy_score(y_test, y_pred))","4fff3f07":"# Splitting Data\n\u0628\u062e\u0634 \u0628\u0646\u062f\u06cc \u06a9\u0631\u062f\u0646 \u062f\u0627\u062f\u0647 \u0647\u0627","f3f0910f":"\u0631\u0648\u0634\u06cc \u0627\u0633\u062a \u0628\u0631\u0627\u06cc \u0639\u0627\u062f\u06cc \u0633\u0627\u0632\u06cc \u0648 \u0646\u0631\u0645\u0627\u0644\u0633\u0627\u0632\u06cc \u062f\u0627\u062f\u0647 \u0647\u0627 \u06a9\u0647 \u0645\u0639\u0645\u0648\u0644\u0627 \u062f\u0631 \u0645\u0631\u062d\u0644\u0647 \u067e\u06cc\u0634 \u067e\u0631\u062f\u0627\u0632\u0634 \u062f\u0627\u062f\u0647 \u0647\u0627 \u0627\u0646\u062c\u0627\u0645 \u062f\u0627\u062f\u0647 \u0645\u06cc\u0634\u0648\u062f","d7baaef5":"\u062f\u0642\u062a \u067e\u06cc\u0634 \u0628\u06cc\u0646\u06cc \u0628\u0647 \u062f\u0633\u062a \u0622\u0645\u062f\u0647 \u062d\u062f\u0648\u062f 96% \u0627\u0633\u062a \u06a9\u0647 \u0628\u0627 \u067e\u06cc\u0634 \u067e\u0631\u062f\u0627\u0632\u0634 \u0628\u0647\u062a\u0631 \u062f\u0627\u062f\u0647 \u0647\u0627 \u0648 \u062d\u0630\u0641 \u062f\u0627\u062f\u0647 \u0647\u0627\u06cc \u067e\u0631\u062a \u0627\u0632 \u0647\u0631 \u0648\u06cc\u0698\u06af\u06cc\u060c \u0645\u06cc\u062a\u0648\u0627\u0646 \u0627\u06cc\u0646 \u062f\u0642\u062a \u0631\u0627 \u0627\u0641\u0632\u0627\u06cc\u0634 \u0646\u06cc\u0632 \u062f\u0627\u062f","1c99d1a8":"\u0647\u0645\u0627\u0646\u0637\u0648\u0631 \u06a9\u0647 \u062f\u0631 \u0646\u0645\u0648\u062f\u0627\u0631 \u0628\u0627\u0644\u0627 \u0642\u0627\u0628\u0644 \u0645\u0634\u0627\u0647\u062f\u0647 \u0627\u0633\u062a\u060c \u062f\u0631 \u0639\u0645\u0642 12 \u0634\u0627\u062e\u0635 \u0646\u0627\u0631\u0646\u062c\u06cc \u0631\u0646\u06af \u0628\u0627\u0644\u0627\u062a\u0631\u06cc\u0646 \u062f\u0642\u062a \u067e\u06cc\u0634 \u0628\u06cc\u0646\u06cc \u0631\u0627 \u062f\u0627\u0631\u062f\n\n\u0634\u0627\u062e\u0635 \u0646\u0627\u0631\u0646\u062c\u06cc: criterion = \"entropy\"\n\n\u0639\u0645\u0642 \u0645\u0646\u0627\u0633\u0628: max_depth = 12\n","0f5ba58e":"# Load dataset# ","e35af5b5":"## Making Confusion Matrix and Accuracy # ","eb25f560":"# Load Libraries# ","d643d46b":"# Feature selection\n\u0627\u0646\u062a\u062e\u0627\u0628 \u0648\u06cc\u0698\u06af\u06cc \u0647\u0627 \u0648 \u062a\u0642\u0633\u06cc\u0645 \u0628\u0646\u062f\u06cc \u0622\u0646 \u0647\u0627 \u0628\u0635\u0648\u0631\u062a \u062a\u062c\u0631\u0628\u06cc","eaae6a05":"# Training Algorithms on the Training set # \n# Decision Tree # \n**Validate *Criterion* and *Depth* for Decision Tree Algorithm**","efac19d7":"\u0645\u0627\u062a\u0631\u06cc\u0633 \u0628\u0627\u0644\u0627 \u0628\u0647 \u0645\u0627 \u0646\u0634\u0627\u0646 \u0645\u06cc\u062f\u0647\u062f \u06a9\u0647 \u062f\u0631 \u0645\u0642\u0627\u06cc\u0633\u0647 \u0628\u06cc\u0646 \u062f\u0627\u062f\u0647 \u0647\u0627\u06cc \u062f\u0631\u0646\u0638\u0631 \u06af\u0631\u0641\u062a\u0647 \u0634\u062f\u0647 \u0628\u0647 \u0639\u0646\u0648\u0627\u0646 \u062a\u0633\u062a \u0648 \u062f\u0627\u062f\u0647 \u0647\u0627\u06cc \u067e\u06cc\u0634 \u0628\u06cc\u0646\u06cc \u0634\u062f\u0647 \u062a\u0648\u0633\u0637 \u0627\u0644\u06af\u0648\u0631\u06cc\u062a\u0645\u060c 372 \u0646\u0641\u0631 \u06a9\u0647 \u062f\u06cc\u0627\u0628\u062a \u0646\u062f\u0627\u0634\u062a\u0646\u062f \u0628\u0647 \u062f\u0631\u0633\u062a\u06cc \u0627\u0644\u06af\u0648\u0631\u06cc\u062a\u0645 \u062a\u0634\u062e\u06cc\u0635 \u062f\u0627\u062f\u0647 \u06a9\u0647 \u062f\u06cc\u0627\u0628\u062a \u0646\u062f\u0627\u0631\u0646\u062f \u0648 \u062a\u0639\u062f\u0627\u062f 201 \u0646\u0641\u0631 \u06a9\u0647 \u062f\u06cc\u0627\u0628\u062a \u062f\u0627\u0634\u062a \u0627\u0646\u062f \u0631\u0627 \u0647\u0645 \u0646\u06cc\u0632 \u062f\u0631\u0633\u062a \u062a\u0634\u062e\u06cc\u0635 \u062f\u0627\u062f\u0647 \u06a9\u0647 \u062f\u06cc\u0627\u0628\u062a \u062f\u0627\u0631\u0646\u062f! \u0645\u06cc\u0632\u0627\u0646 \u062e\u0637\u0627\u0647\u0627 \u0647\u0645 \u062f\u0627\u062e\u0644 \u062c\u062f\u0648\u0644 \u0645\u0634\u062e\u0635 \u0634\u062f\u0647 \u0627\u0633\u062a\n\n\u062f\u0631 \u062a\u0635\u0648\u06cc\u0631 \u0632\u06cc\u0631 \u0628\u0647 \u062e\u0648\u0628\u06cc \u06a9\u0627\u0646\u0641\u06cc\u0648\u0698\u0646 \u0645\u0627\u062a\u0631\u06cc\u0633 \u0648 \u0686\u0647\u0627\u0631 \u0628\u062e\u0634 \u0622\u0646 \u062a\u0648\u0636\u06cc\u062d \u062f\u0627\u062f\u0647 \u0634\u062f\u0647 \u0627\u0633\u062a\n\n![](https:\/\/blog.faradars.org\/wp-content\/uploads\/2019\/06\/Confusion-Matrix.png)","d4331e1d":"## Feature Scaling # ","5aead10c":"## Predict the Test results # "}}