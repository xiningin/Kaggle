{"cell_type":{"bfc5128b":"code","8d0aa939":"code","b49d1887":"code","6b51cd10":"code","b883a69d":"code","28d7a21b":"code","3049df78":"code","15744296":"code","0867327f":"code","02ff170a":"code","422d0f95":"code","c683c0f4":"code","82da9f49":"code","9bde1e6c":"code","12d88552":"code","b7a52892":"code","d506aaf8":"code","131bedc3":"code","664ac88d":"code","1a045f1a":"code","f4bd61a3":"code","620ac1f0":"code","428c541b":"code","6aace1b6":"code","3c782b00":"code","5983d77f":"code","714ff0e6":"code","2d68ed63":"code","6c471da7":"code","9d01d3c5":"code","63b1bcab":"code","ce085a16":"code","273736f7":"code","2662e162":"code","34cf1adc":"code","da4748f4":"code","82ef4cee":"code","bcdfdf69":"code","99a19645":"code","02aabd8c":"code","35ce57dd":"code","d7cb3352":"code","38f5a7c1":"code","6ea18a56":"code","16975e45":"code","43af37e6":"code","39920b9c":"code","c7022851":"code","3862e0ab":"code","3b14c12f":"code","5dceb38a":"code","a15941f6":"code","c175293c":"code","69128782":"code","e4bc05de":"code","99c6043b":"code","41601b1b":"code","c9418f92":"code","5233d22c":"code","74ec12c2":"code","3d8ef81d":"code","f4f722a4":"code","674babdd":"code","32636739":"code","35117cc8":"code","32fd9683":"code","62ba594e":"code","61a2b09d":"code","40552423":"code","da403f0b":"markdown","38547ad8":"markdown","cc94828f":"markdown","7279460e":"markdown","5d714657":"markdown","d5a8f173":"markdown","8a5e3dfe":"markdown","b18a01fa":"markdown","24161717":"markdown","b9d0ea21":"markdown","1b1d6563":"markdown","3d01ee6d":"markdown","59656748":"markdown","484b05e9":"markdown","0f6a9a14":"markdown","bb019f1e":"markdown","a7fd9c19":"markdown","d1cef0ca":"markdown","b5512a89":"markdown","67cf471a":"markdown","87a3d3be":"markdown","686cf3a2":"markdown","843ad048":"markdown","75fcf5a5":"markdown","18b7b135":"markdown","b944a10b":"markdown"},"source":{"bfc5128b":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","8d0aa939":"import numpy as np\nimport pandas as pd\nimport statsmodels.api as sm\nimport matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\nimport seaborn as sns\nsns.set()","b49d1887":"raw_data = pd.read_csv('..\/input\/online-shoppers-purchasing-intention-dataset\/online_shoppers_intention.csv')\nraw_data.head()","6b51cd10":"raw_data.describe(include='all')","b883a69d":"raw_data.columns","28d7a21b":"raw_data.isnull().sum()","3049df78":"num_features = ['Administrative', 'Administrative_Duration', 'Informational', 'Informational_Duration', 'ProductRelated', 'ProductRelated_Duration', 'BounceRates', 'ExitRates', 'PageValues', 'SpecialDay']","15744296":"cat_features = ['Month' ,'OperatingSystems', 'Browser', 'Region', 'TrafficType', 'VisitorType', 'Weekend', 'Revenue']","0867327f":"raw_data['VisitorType'].value_counts()","02ff170a":"raw_data['Weekend'].value_counts()","422d0f95":"raw_data['Month'].value_counts()","c683c0f4":"raw_data['Region'].value_counts()","82da9f49":"raw_data['Browser'].value_counts()","9bde1e6c":"raw_data['TrafficType'].value_counts()","12d88552":"print(raw_data['OperatingSystems'].value_counts())","b7a52892":"print(raw_data['Revenue'].value_counts())","d506aaf8":"for col in num_features :\n    sns.displot(raw_data[col])","131bedc3":"from scipy.stats import zscore\nz_scores = zscore(raw_data[num_features])\nabs_z_scores = np.abs(z_scores)\nfiltered_entries = (abs_z_scores < 3).all(axis=1)\ndf_no_outlier = raw_data[filtered_entries]","664ac88d":"for col in num_features :\n    sns.displot(df_no_outlier[col])","1a045f1a":"fig, axs = plt.subplots(2, 3, sharey=True ,figsize=(20,10)) # sharey ->ProductRelated_Duration as y\naxs[0,0].scatter(df_no_outlier['ExitRates'], df_no_outlier['ProductRelated_Duration'])\naxs[0,0].set_title(\"Exit Rates and ProductRelated_Duration\")\naxs[0,1].scatter(df_no_outlier['Administrative_Duration'], df_no_outlier['ProductRelated_Duration'])\naxs[0,1].set_title(\"Administrative_Duration and ProductRelated_Duration\")\naxs[0,2].scatter(df_no_outlier['BounceRates'], df_no_outlier['ProductRelated_Duration'])\naxs[0,2].set_title(\"BounceRates and ProductRelated_Duration\")\n\naxs[1,0].scatter(df_no_outlier['Informational_Duration'], df_no_outlier['ProductRelated_Duration'])\naxs[1,0].set_title(\"Informational_Duration and ProductRelated_Duration\")\n\naxs[1,1].scatter(df_no_outlier['ProductRelated'], df_no_outlier['ProductRelated_Duration'])\naxs[1,1].set_title(\"ProductRelated and ProductRelated_Duration\")\n\naxs[1,2].scatter(df_no_outlier['PageValues'], df_no_outlier['ProductRelated_Duration'])\naxs[1,2].set_title(\"PageValues and ProductRelated_Duration\")","f4bd61a3":"df_no_outlier['ProductRelated_Duration'].max()","620ac1f0":"from sklearn.preprocessing import PowerTransformer\n\npt = PowerTransformer(method='yeo-johnson', standardize=False)\ntransformed_bounce_rate = pt.fit_transform(df_no_outlier['ProductRelated_Duration'].values.reshape(-1,1))\ntransformed_bounce_rate\n","428c541b":"df_no_outlier['pt_ProductRelated_Duration'] = transformed_bounce_rate\n# df_no_outlier['pt_ProductRelated_Duration'] = np.sqrt(df_no_outlier['ProductRelated_Duration'])","6aace1b6":"sns.distplot(df_no_outlier['pt_ProductRelated_Duration'])","3c782b00":"df_no_outlier['pt_ProductRelated_Duration'].describe()","5983d77f":"# from sklearn.preprocessing import MinMaxScaler\n\n# pt = MinMaxScaler()\n# transformed_bounce_rate = pt.fit_transform(df_no_outlier['ProductRelated_Duration'].values.reshape(-1,1))\n\n# df_no_outlier['tf_ProductRelatedDuration'] = transformed_bounce_rate","714ff0e6":"# sns.distplot(df_no_outlier['tf_ProductRelatedDuration'])","2d68ed63":"#Log Transformation\n# log_bounce_rate = np.log(df_no_outlier['ProductRelated_Duration'])\n# df_no_outlier['log_ProductRelated_Duration'] = log_bounce_rate","6c471da7":"fig, axs = plt.subplots(2, 3, sharey=True ,figsize=(20,10)) # sharey ->pt_ProductRelated_Duration as y\naxs[0,0].scatter(df_no_outlier['ExitRates'], df_no_outlier['pt_ProductRelated_Duration'])\naxs[0,0].set_title(\"Exit Rates and ProductRelated_Duration\")\naxs[0,1].scatter(df_no_outlier['Administrative_Duration'], df_no_outlier['pt_ProductRelated_Duration'])\naxs[0,1].set_title(\"Administrative_Duration and ProductRelated_Duration\")\naxs[0,2].scatter(df_no_outlier['BounceRates'], df_no_outlier['pt_ProductRelated_Duration'])\naxs[0,2].set_title(\"BounceRates and ProductRelated_Duration\")\n\naxs[1,0].scatter(df_no_outlier['Informational_Duration'], df_no_outlier['pt_ProductRelated_Duration'])\naxs[1,0].set_title(\"Informational_Duration and ProductRelated_Duration\")\n\naxs[1,1].scatter(df_no_outlier['ProductRelated'], df_no_outlier['pt_ProductRelated_Duration'])\naxs[1,1].set_title(\"ProductRelated and ProductRelated_Duration\")\n\naxs[1,2].scatter(df_no_outlier['PageValues'], df_no_outlier['pt_ProductRelated_Duration'])\naxs[1,2].set_title(\"PageValues and ProductRelated_Duration\")","9d01d3c5":"# Create the correlation matrix\ncorr = df_no_outlier[num_features].corr()\n\n# Generate a mask for the upper triangle\nmask = np.triu(np.ones_like(corr, dtype=bool))\n\nplt.figure(figsize=(16, 8))\nsns.heatmap(corr, mask=mask,  center=0, linewidths=1, annot=True, fmt=\".2f\")\n\nplt.show()","63b1bcab":"from statsmodels.stats.outliers_influence import variance_inflation_factor\nvariables = df_no_outlier[num_features]\nvif=pd.DataFrame()\nvif['VIF'] = [variance_inflation_factor(variables.values, i) for i in range(variables.shape[1])]\nvif['Features'] = variables.columns","ce085a16":"vif","273736f7":"df_dummies = pd.get_dummies(df_no_outlier,columns=cat_features ,drop_first=True, prefix_sep='_DM_')","2662e162":"df_dummies.head()","34cf1adc":"df_dummies.columns.values","da4748f4":"cols = [ 'pt_ProductRelated_Duration',  'Informational_Duration','Administrative', 'Administrative_Duration', 'Informational',\n       'ProductRelated',\n       'ProductRelated_Duration', 'BounceRates', 'ExitRates',\n       'PageValues', 'SpecialDay',\n       'Month_DM_Dec', 'Month_DM_Feb', 'Month_DM_Jul', 'Month_DM_June',\n       'Month_DM_Mar', 'Month_DM_May', 'Month_DM_Nov', 'Month_DM_Oct',\n       'Month_DM_Sep', 'OperatingSystems_DM_2', 'OperatingSystems_DM_3',\n       'OperatingSystems_DM_4', 'OperatingSystems_DM_5',\n       'OperatingSystems_DM_6', 'OperatingSystems_DM_7',\n       'OperatingSystems_DM_8', 'Browser_DM_2', 'Browser_DM_3',\n       'Browser_DM_4', 'Browser_DM_5', 'Browser_DM_6', 'Browser_DM_7',\n       'Browser_DM_8', 'Browser_DM_9', 'Browser_DM_10', 'Browser_DM_11',\n       'Browser_DM_12', 'Browser_DM_13', 'Region_DM_2', 'Region_DM_3',\n       'Region_DM_4', 'Region_DM_5', 'Region_DM_6', 'Region_DM_7',\n       'Region_DM_8', 'Region_DM_9', 'TrafficType_DM_2',\n       'TrafficType_DM_3', 'TrafficType_DM_4', 'TrafficType_DM_5',\n       'TrafficType_DM_6', 'TrafficType_DM_7', 'TrafficType_DM_8',\n       'TrafficType_DM_9', 'TrafficType_DM_10', 'TrafficType_DM_11',\n       'TrafficType_DM_12', 'TrafficType_DM_13', 'TrafficType_DM_14',\n       'TrafficType_DM_15', 'TrafficType_DM_16', 'TrafficType_DM_18',\n       'TrafficType_DM_19', 'TrafficType_DM_20', 'VisitorType_DM_Other',\n       'VisitorType_DM_Returning_Visitor', 'Weekend_DM_True',\n       'Revenue_DM_True']","82ef4cee":"data_preprocessed=df_dummies[cols]","bcdfdf69":"data_preprocessed.head()","99a19645":"data_selected = data_preprocessed.drop(['ProductRelated_Duration', 'Administrative', 'Informational', 'ProductRelated'], axis=1)","02aabd8c":"X=  data_preprocessed.drop(['pt_ProductRelated_Duration'], axis=1)\ny = data_preprocessed['pt_ProductRelated_Duration']","35ce57dd":"X.head()","d7cb3352":"y.head()","38f5a7c1":"from sklearn.preprocessing import StandardScaler\n\nscaler = StandardScaler()\nX_scaled = scaler.fit_transform(X)","6ea18a56":"from sklearn.model_selection import train_test_split\n\nX_train, X_test, y_train, y_test = train_test_split(X_scaled, y, test_size=0.02, random_state=42 )","16975e45":"reg = LinearRegression()\nreg.fit(X_train, y_train)","43af37e6":"y_hat = reg.predict(X_train)","39920b9c":"plt.scatter(y_train, y_hat)\nplt.xlabel('Targets (y_train)', size=18)\nplt.ylabel('Prediction (y_hat)',   size=18) \nplt.show()","c7022851":"sns.distplot(y_train -  y_hat)\nplt.title(\"Residual PDF\", size=18)","3862e0ab":"reg.score(X_train, y_train)","3b14c12f":"reg.intercept_","5dceb38a":"reg.coef_","a15941f6":"reg_summary = pd.DataFrame(X.columns.values, columns=['Features'])\nreg_summary['Weights'] = reg.coef_\nreg_summary.sort_values(by='Weights',ascending=False)","c175293c":"pd.DataFrame(X_train).describe()","69128782":"pd.DataFrame(X_test).describe()","e4bc05de":"y_hat_test = reg.predict(X_test)","99c6043b":"y.describe()","41601b1b":"pd.DataFrame(y_hat_test).describe()","c9418f92":"print(y_hat_test.min())\nprint(y_hat_test.max())","5233d22c":"print(y_test.min())\nprint(y_test.max())","74ec12c2":"plt.scatter(y_test, y_hat_test, alpha=0.2)\nplt.xlabel('Targets (y_test)', size=18)\nplt.ylabel('Prediction (y_hat_test)', size=18)\nsns.regplot(y_test, y_hat_test)","3d8ef81d":"df_perform = pd.DataFrame(y_hat_test, columns=['Prediction'])\ndf_perform.head()","f4f722a4":"df_perform['Target'] = pd.DataFrame(y_test).reset_index(drop=True)\ndf_perform.head()","674babdd":"df_perform['Residual'] = df_perform['Target'] - df_perform['Prediction']\ndf_perform.head()","32636739":"df_perform['divider'] = df_perform['Target'].replace(0, 1)","35117cc8":"df_perform['Differences'] = np.absolute(df_perform['Residual'] \/ df_perform['divider'] * 100)\ndf_perform.head()","32fd9683":"pd.options.display.max_rows=999\npd.set_option('display.float_format', lambda x: '%.2f' % x)\ndf_perform.sort_values(by='Differences').head()","62ba594e":"df_perform.describe()","61a2b09d":"df_perform['Differences'].max()","40552423":"reg.score(X_test, y_test)","da403f0b":"## Examining Assumptions","38547ad8":"## Determine numerical features and categorical features","cc94828f":"### Scale the data","7279460e":"### Create the Regression","5d714657":"VIF = 1. No Multicolinearity\n2 < VIF < 6 = there is a multicolinearity but still acceptable\n6 < VIF = Multicolinearity. No acceptable\n\nThere are no VIF more than 6 so features still acceptable","d5a8f173":"### Exploring the probability distribution functions (PDFs)","8a5e3dfe":"### Dealing with Missing Values","b18a01fa":"### Dealing with outliers","24161717":"### Finding the Weights and bias","b9d0ea21":"### Multicollinearity","1b1d6563":"# Feature Selection","3d01ee6d":"# Regression Model","59656748":"### Train Test Split","484b05e9":"### Column Description","0f6a9a14":"### Declare the inputs and the targets","bb019f1e":"There are no missing values","a7fd9c19":"### Relaxing the assumption","d1cef0ca":"# Import Library","b5512a89":"### Rearrange the columns","67cf471a":"### Check Linearity with scatterplot","87a3d3be":"# Testing","686cf3a2":"### Exploring the categorical variable values","843ad048":"### Determine Unnecessary Variable","75fcf5a5":"# Data Preprocessing","18b7b135":"# Load Data","b944a10b":"### Exploring the descriptive statistics"}}