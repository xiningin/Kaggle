{"cell_type":{"1aa54c2e":"code","cccf9373":"code","181831e6":"code","71ac5ee1":"code","ceb05e3d":"code","fb689459":"code","c4a0d3d6":"code","e1eb8c08":"code","3292956b":"code","e95d686f":"markdown","78b41375":"markdown","06a20421":"markdown","9ae49328":"markdown","6e4a6dde":"markdown","9883d8c6":"markdown","b95b9dc9":"markdown","66ff0080":"markdown","c3a6dfee":"markdown","d39a1454":"markdown","346e4b49":"markdown","21f3b88f":"markdown"},"source":{"1aa54c2e":"condition = False\nif condition:\n    x = 1\nelse:\n    x = 0\nprint(x)","cccf9373":"condition = False\nx = 1 if condition else 0\nprint(x)","181831e6":"num1 = 1_000_000_000     # 1 billion\nnum2 = 10_000_000        # 10 million\n\ntotal = num1 + num2\n\nprint(f'{total:,}')      # To separate the output digits by comma","71ac5ee1":"uname = input('Enter Username: ')\npwd = input('Enter password: ')\n\nprint('Logging In....')","ceb05e3d":"from getpass import getpass\n\nuname = input('Enter Username: ')\npwd = getpass('Enter password: ')\n\nprint('Logging In....')","fb689459":"calc = {\n    'add': lambda x, y: x + y,\n    'subtract': lambda x, y: x - y,\n    'mul': lambda x, y: x * y,\n    'div': lambda x, y: x \/ y \n}\n\na, b = 10, 2\nprint(f\"Addition of {a} and {b}: {calc['add'](a, b)}\")\nprint(f\"Subtraction of {a} and {b}: {calc['subtract'](a, b)}\")\nprint(f\"Multiplication of {a} and {b}: {calc['mul'](a, b)}\")\nprint(f\"Division of {a} and {b}: {calc['div'](a, b)}\")","c4a0d3d6":"import sys\nsquares_list = [i*i for i in range(10_000)]\n# To print the size of a variable \nprint(sys.getsizeof(squares_list, \"bytes\"))   ","e1eb8c08":"squares_gen = (i*i for i in range(10_000))\n# To print the size of a variable \nprint(sys.getsizeof(squares_gen, \"bytes\"))  ","3292956b":"from tqdm import tqdm\n\nfor _ in tqdm(range(int(9e6))):\n    pass","e95d686f":"The above code works correctly but do you think it is pythonic? It\u2019s ain\u2019t. So, to make your code pythonic, we can come up with something like the following.","78b41375":"Please consider upvoting this kernel if you liked the tips mentioned. That really encourage me to do more.","06a20421":"So, this is a perfect example where we can use generators. Similar to the list comprehensions, we can use generator comprehensions where we have parentheses instead of square braces. A Generator computes our elements lazily. So, it produces only one item at a time and only when asked for it. The following program computes the square of each number up to 10000 using generator comprehensions.","9ae49328":"But anyone can see that password, and that breaches the security. So to make it more secure, we would be using the `getpass` module.","6e4a6dde":"That\u2019s a quite noticeable difference in memory usage.","9883d8c6":"## 1. Ternary Conditionals\nLet us take a situation where you are assigning a value to the variable based on some condition. You would probably write something like the following.","b95b9dc9":"## Introduction\nIn this Kernel, I am going to share 6 Python Tips for begineers to write a shorter and better code. I have also written an article on this which you can find [here](https:\/\/www.analyticsvidhya.com\/blog\/2021\/07\/5-python-tips-you-must-know-to-write-better-and-shorter-code\/) \n\n**Note:** *Shorter doesn\u2019t always mean better. Your code should be easy to read and understand.*\n\nWe will be focusing on writing shorter and more readable code in this kernel. Specifically, we will learn:\n\n- How to make large numbers more readable in code and output (10000000 to 10,000,000)?\n- How to take a password as an input from a user without actually displaying it?\n- How to use Dictionaries to implement Switch Cases?\n- How to save memory using Generators?\n- How to track the programms by using Progress Bars?\n\nLet's get started!","66ff0080":"## 5. Use Generators to Save Memory\nLet\u2019s say we have a very large list and 10,000 elements in the list. Let's say we want to compute the square of each element. We can do that with the list comprehensions with the code which looks like the following.","c3a6dfee":"## 6. Progress Bars in For Loop\nIf you are looping through the large numbers and want to track the progress of the program, `tqdm` library can help you do so. \n\nYou need to install it if you haven't already by `pip install tqdm`. \n\nFollowing program demonstrates the use case of `tqdm`.","d39a1454":"## 4. Use Dictionary to Replicate Switch Case\nRefer the following cell which demonstrate the switch case implementation using dictionary.","346e4b49":"## 2. Working with Large Numbers\n`1000000000` or `1,000,000,000`; Which is more readable? The second one, right? But if we try to do that in Python like `num1=1,000,000,000`, we would get an error.\n\nBut there\u2019s another method to do the same. We can use `_` to separate the digits which do not affect our program. We can write the following code.","21f3b88f":"## 3. Inputting Secret Information\nLet\u2019s say you are taking a username and password as input from the user. You would surely go with the following approach."}}