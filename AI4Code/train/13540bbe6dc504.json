{"cell_type":{"447801d9":"code","a442f864":"code","ca8f4b9e":"code","d6a8bf7a":"code","4ee75cf3":"code","06d5bee5":"code","a9d90249":"code","34e16c86":"code","cf79ec66":"code","e18c869a":"code","5ce21f2f":"code","a82c6da7":"code","2a290dd9":"code","5750fb8d":"code","910d7e22":"code","d1e442ae":"code","4f622cb8":"code","2858ec57":"code","9eb08178":"code","d58908f3":"code","4a5a5ac7":"code","e6dac379":"markdown","a1703fc9":"markdown","87d5f48b":"markdown","107d6095":"markdown"},"source":{"447801d9":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n%matplotlib inline\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","a442f864":"data=pd.read_csv(\"\/kaggle\/input\/creditcardfraud\/creditcard.csv\")","ca8f4b9e":"data.head()","d6a8bf7a":"LABELS = [\"Normal\", \"Fraud\"]\ncount_classes = pd.value_counts(data['Class'], sort = True)\ncount_classes.plot(kind = 'bar', rot=0)\nplt.title(\"Transaction class distribution\")\nplt.xticks(range(2), LABELS)\nplt.xlabel(\"Class\")\nplt.ylabel(\"Frequency\");","4ee75cf3":"x = data.iloc[: , 1:30].values\ny = data.iloc[:, 30].values","06d5bee5":"print(\"Input Shape : \", x.shape)\nprint(\"Output Shape : \", y.shape)","a9d90249":"print (\"Labels : \\n\", y)","34e16c86":"from sklearn.model_selection import train_test_split\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.preprocessing import Imputer","cf79ec66":"imputer = Imputer(missing_values=\"NaN\", strategy=\"mean\", axis=0)\nimputer = imputer.fit(x[:, 1:30])\nx[:, 1:30] = imputer.fit_transform(x[:, 1:30])","e18c869a":"xtrain, xtest, ytrain, ytest = train_test_split(x, y, test_size=0.25, random_state = 0)","5ce21f2f":"print(\"xtrain.shape : \", xtrain.shape)\nprint(\"xtest.shape  : \", xtest.shape)\nprint(\"ytrain.shape : \", ytrain.shape)\nprint(\"xtest.shape  : \", xtest.shape)","a82c6da7":"scale_x = StandardScaler()\nxtrain = scale_x.fit_transform(xtrain)\nxtest = scale_x.transform(xtest)\n","2a290dd9":"print(\"Standardised Training Set : \\n\", xtrain[0])","5750fb8d":"from keras.models import Sequential\nfrom keras.layers import Dense","910d7e22":"model = Sequential()\nmodel.add(Dense(12, input_dim=29, activation='relu'))\nmodel.add(Dense(8, activation='relu'))\nmodel.add(Dense(1, activation='sigmoid'))","d1e442ae":"from keras import backend as K\n\ndef recall_m(y_true, y_pred):\n        true_positives = K.sum(K.round(K.clip(y_true * y_pred, 0, 1)))\n        possible_positives = K.sum(K.round(K.clip(y_true, 0, 1)))\n        recall = true_positives \/ (possible_positives + K.epsilon())\n        return recall\n\ndef precision_m(y_true, y_pred):\n        true_positives = K.sum(K.round(K.clip(y_true * y_pred, 0, 1)))\n        predicted_positives = K.sum(K.round(K.clip(y_pred, 0, 1)))\n        precision = true_positives \/ (predicted_positives + K.epsilon())\n        return precision\n\ndef f1_m(y_true, y_pred):\n    precision = precision_m(y_true, y_pred)\n    recall = recall_m(y_true, y_pred)\n    return 2*((precision*recall)\/(precision+recall+K.epsilon()))\n","4f622cb8":"\n# compile the model\nmodel.compile(optimizer='adam', loss='binary_crossentropy', metrics=['acc',f1_m,precision_m, recall_m])\n\n# fit the model\nhistory = model.fit(xtrain, ytrain, validation_split=0.3, epochs=10, verbose=0)\n\n# evaluate the model\nloss, accuracy, f1_score, precision, recall = model.evaluate(xtest, ytest, verbose=0)","2858ec57":"model.summary()","9eb08178":"y_pred = model.predict(xtest)\ny_pred = (y_pred > 0.5)\nscore = model.evaluate(xtest, ytest)\nscore","d58908f3":"from sklearn.metrics import classification_report,confusion_matrix,accuracy_score\nprint(classification_report(ytest,y_pred))","4a5a5ac7":"cf=confusion_matrix(ytest,y_pred)\ndf=pd.DataFrame(cf,index=(0,1),columns=(0,1))\nplt.figure(figsize=(10,7))\nsns.set(font_scale=1.4)\nsns.heatmap(df,annot=True,fmt='g')\nprint(\"Test Data Accuracy:%0.4f\"%accuracy_score(ytest,y_pred))","e6dac379":"#CREATION TEST AND TRANING DATASET\n","a1703fc9":"#MISSING VALUE TREATEMENT","87d5f48b":"**Confusion Matrix**","107d6095":"**FEATURE SCALING **"}}