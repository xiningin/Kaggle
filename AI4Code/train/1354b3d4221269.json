{"cell_type":{"330373e2":"code","67ef3788":"code","72a057fc":"code","ce79a0a9":"code","6a1ecd70":"code","9529865a":"code","49f104be":"code","7f883acf":"code","533bca8f":"code","145d3c49":"code","ed6715a2":"code","5c4547bb":"code","8c37432f":"code","df84f85c":"code","ba60e0b5":"code","a0bedd7a":"code","b83e6633":"code","f0e2b310":"code","547fe4d2":"code","7b58898f":"code","4fb8928e":"code","ddbf60c8":"code","5f26e193":"code","60f0f6fb":"code","b41a461c":"code","f3f7873c":"code","354db2ea":"code","e433d61e":"code","95984fa9":"code","2c9e9304":"code","0e9e2d24":"code","f1aa0bd8":"code","a8cbd464":"code","8fc6aca8":"markdown","cbe008f2":"markdown","2c9c354f":"markdown","68969aaa":"markdown","fdfbbe7c":"markdown","90cbea3e":"markdown","d9ede47d":"markdown","2fbb0332":"markdown","9bc2d21e":"markdown","cd410739":"markdown","3af9aece":"markdown","e3b455bd":"markdown","ebe5a178":"markdown","a9dc6f37":"markdown","3bbda62b":"markdown","aae85cd0":"markdown","9649a40b":"markdown","fbaf3429":"markdown","826b9491":"markdown","9a3f776a":"markdown","03b8e98b":"markdown","a5218dbb":"markdown","dae20b18":"markdown","2de406ad":"markdown","26cca2e4":"markdown","c6056587":"markdown","6623edfe":"markdown","39247e73":"markdown","cbd851e4":"markdown","e159eed3":"markdown","cfe71890":"markdown","383928a7":"markdown","a2299a12":"markdown","43720442":"markdown","ae35bb0e":"markdown","52ded59a":"markdown"},"source":{"330373e2":"import numpy as np\nimport pandas as pd\nimport holoviews as hv\nfrom holoviews import opts\nhv.extension('bokeh')\nfrom matplotlib import pyplot as plt\nimport seaborn as sns\nimport os\nimport scipy.stats as stats\nfrom sklearn.svm import OneClassSVM\nfrom sklearn.ensemble import IsolationForest\nfrom sklearn.neighbors import LocalOutlierFactor\n!pip install changefinder\nimport changefinder\nfrom sklearn.metrics import f1_score\nimport shap\nshap.initjs()\nfrom tabulate import tabulate\nfrom IPython.display import HTML, display","67ef3788":"for dirname, _, filenames in os.walk('\/kaggle\/input\/nab\/realKnownCause\/realKnownCause'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))","72a057fc":"df = pd.read_csv(\"\/kaggle\/input\/nab\/realKnownCause\/realKnownCause\/machine_temperature_system_failure.csv\",low_memory=False)\nprint(f'machine_temperature_system_failure.csv : {df.shape}')\ndf.head()","ce79a0a9":"df.info()","6a1ecd70":"df.describe()","9529865a":"import matplotlib.pyplot as plt\nplt.plot(pd.to_datetime(df['timestamp']),df['value'],label='Temperature')\nplt.axhline(y = df['value'].mean(), color = 'r', linestyle = '-',label='Mean Temperature')\nplt.axhline(y = df['value'].max(), color = 'g', linestyle = 'dotted',label='Max Temperature')\nplt.axhline(y = df['value'].min(), color = 'g', linestyle = 'dotted',label='Min Temperature')\nplt.xlabel('DATETIME')\nplt.ylabel('TEMPERATURE(F)')\nplt.legend()\nplt.title('Temperature vs. Time Visualization')\n#plt.show()","49f104be":"anomaly_points = [\n        [\"2013-12-10 06:25:00.000000\",\"2013-12-12 05:35:00.000000\"],\n        [\"2013-12-15 17:50:00.000000\",\"2013-12-17 17:00:00.000000\"],\n        [\"2014-01-27 14:20:00.000000\",\"2014-01-29 13:30:00.000000\"],\n        [\"2014-02-07 14:55:00.000000\",\"2014-02-09 14:05:00.000000\"]\n]\nprint(anomaly_points)","7f883acf":"df['timestamp'] = pd.to_datetime(df['timestamp'])\n#is anomaly? : True => 1, False => 0\ndf['anomaly'] = 0\nfor start, end in anomaly_points:\n    df.loc[((df['timestamp'] >= start) & (df['timestamp'] <= end)), 'anomaly'] = 1\ndf.head()","533bca8f":"df['year'] = df['timestamp'].apply(lambda x : x.year)\ndf['month'] = df['timestamp'].apply(lambda x : x.month)\ndf['day'] = df['timestamp'].apply(lambda x : x.day)\ndf['hour'] = df['timestamp'].apply(lambda x : x.hour)\ndf['minute'] = df['timestamp'].apply(lambda x : x.minute)\ndf.head()","145d3c49":"df.index = df['timestamp']\ndf.drop(['timestamp'], axis=1, inplace=True)\ndf.head()","ed6715a2":"count = hv.Bars(df.groupby(['year','month'])['value'].count()).opts(ylabel=\"Count\", title='Year\/Month Count')\nmean = hv.Bars(df.groupby(['year','month']).agg({'value': ['mean']})['value']).opts(ylabel=\"Temperature\", title='Year\/Month Mean Temperature')\n(count + mean).opts(opts.Bars(width=380, height=300,tools=['hover'],show_grid=True, stacked=True, legend_position='bottom'))","5c4547bb":"year_maxmin = df.groupby(['year','month']).agg({'value': ['min', 'max']})\n(hv.Bars(year_maxmin['value']['max']).opts(ylabel=\"Temperature\", title='Year\/Month Max Temperature') \\\n+ hv.Bars(year_maxmin['value']['min']).opts(ylabel=\"Temperature\", title='Year\/Month Min Temperature'))\\\n    .opts(opts.Bars(width=380, height=300,tools=['hover'],show_grid=True, stacked=True, legend_position='bottom'))","8c37432f":"hv.Distribution(df['value']).opts(opts.Distribution(title=\"Temperature Distribution\", xlabel=\"Temperature\", ylabel=\"Density\", width=700, height=300,tools=['hover'],show_grid=True))","df84f85c":"((hv.Distribution(df.loc[df['year']==2013,'value'], label='2013') * hv.Distribution(df.loc[df['year']==2014,'value'], label='2014')).opts(title=\"Temperature by Year Distribution\", legend_position='bottom') + \\\n(hv.Distribution(df.loc[df['month']==12,'value'], label='12') * hv.Distribution(df.loc[df['month']==1,'value'], label='1') \\\n     * hv.Distribution(df.loc[df['month']==2,'value'], label='2')).opts(title=\"Temperature by Month Distribution\", legend_position='bottom')) \\\n     .opts(opts.Distribution(xlabel=\"Temperature\", ylabel=\"Density\", width=380, height=300,tools=['hover'],show_grid=True))","ba60e0b5":"anomalies = [[ind, value] for ind, value in zip(df[df['anomaly']==1].index, df.loc[df['anomaly']==1,'value'])]\n(hv.Curve(df['value'], label=\"Temperature\") * hv.Points(anomalies, label=\"Anomaly Points\").opts(color='red', legend_position='bottom', size=2, title=\"Temperature & Given Anomaly Points\"))\\\n    .opts(opts.Curve(xlabel=\"Time\", ylabel=\"Temperature\", width=700, height=400,tools=['hover'],show_grid=True))","a0bedd7a":"hv.Curve(df['value'].resample('D').mean()).opts(opts.Curve(title=\"Temperature Mean by Day\", xlabel=\"Time\", ylabel=\"Temperature\", width=700, height=300,tools=['hover'],show_grid=True))","b83e6633":"hotelling_df = pd.DataFrame()\nhotelling_df['value'] = df['value']\nmean = hotelling_df['value'].mean()\nstd = hotelling_df['value'].std()\nhotelling_df['anomaly_score'] = [((x - mean)\/std) ** 2 for x in hotelling_df['value']]\nhotelling_df['anomaly_threshold'] = stats.chi2.ppf(q=0.95, df=1)\nhotelling_df['anomaly']  = hotelling_df.apply(lambda x : 1 if x['anomaly_score'] > x['anomaly_threshold'] else 0, axis=1)","f0e2b310":"(hv.Curve(hotelling_df['anomaly_score'], label='Anomaly Score') * hv.Curve(hotelling_df['anomaly_threshold'], label='Threshold').opts(color='red', line_dash=\"dotdash\")) \\\n  .opts(title=\"Hotelling's T2 - Anomaly Score & Threshold\", xlabel=\"Time\", ylabel=\"Anomaly Score\", legend_position='bottom').opts(opts.Curve(width=700, height=400, show_grid=True, tools=['hover']))","547fe4d2":"anomalies = [[ind, value] for ind, value in zip(hotelling_df[hotelling_df['anomaly']==1].index, hotelling_df.loc[hotelling_df['anomaly']==1,'value'])]\n(hv.Curve(hotelling_df['value'], label=\"Temperature\") * hv.Points(anomalies, label=\"Detected Points\").opts(color='red', legend_position='bottom', size=2, title=\"Hotelling's T2 - Detected Points\"))\\\n    .opts(opts.Curve(xlabel=\"Time\", ylabel=\"Temperature\", width=700, height=400,tools=['hover'],show_grid=True))","7b58898f":"hotelling_f1 = f1_score(df['anomaly'], hotelling_df['anomaly'])\nprint(f'Hotelling\\'s T2 F1 Score : {hotelling_f1}')","4fb8928e":"ocsvm_model = OneClassSVM(nu=0.2, gamma=0.001, kernel='rbf')\nocsvm_ret = ocsvm_model.fit_predict(df['value'].values.reshape(-1, 1))\nocsvm_df = pd.DataFrame()\nocsvm_df['value'] = df['value']\nocsvm_df['anomaly']  = [1 if i==-1 else 0 for i in ocsvm_ret] # \u00c7\u0131kt\u0131 -1 ise anomaly var di\u011fer t\u00fcrl\u00fc yok","ddbf60c8":"anomalies = [[ind, value] for ind, value in zip(ocsvm_df[ocsvm_df['anomaly']==1].index, ocsvm_df.loc[ocsvm_df['anomaly']==1,'value'])]\n(hv.Curve(ocsvm_df['value'], label=\"Temperature\") * hv.Points(anomalies, label=\"Detected Points\").opts(color='red', legend_position='bottom', size=2, title=\"One-Class SVM - Detected Points\"))\\\n    .opts(opts.Curve(xlabel=\"Time\", ylabel=\"Temperature\", width=700, height=400,tools=['hover'],show_grid=True))","5f26e193":"ocsvm_f1 = f1_score(df['anomaly'], ocsvm_df['anomaly'])\nprint(f'One-Class SVM F1 Score : {ocsvm_f1}')","60f0f6fb":"iforest_model = IsolationForest(n_estimators=300, contamination=0.1, max_samples=700)\niforest_ret = iforest_model.fit_predict(df['value'].values.reshape(-1, 1))\niforest_df = pd.DataFrame()\niforest_df['value'] = df['value']\niforest_df['anomaly']  = [1 if i==-1 else 0 for i in iforest_ret] # \u00c7\u0131kt\u0131 -1 ise anomaly var di\u011fer t\u00fcrl\u00fc yok","b41a461c":"anomalies = [[ind, value] for ind, value in zip(iforest_df[iforest_df['anomaly']==1].index, iforest_df.loc[iforest_df['anomaly']==1,'value'])]\n(hv.Curve(iforest_df['value'], label=\"Temperature\") * hv.Points(anomalies, label=\"Detected Points\").opts(color='red', legend_position='bottom', size=2, title=\"Isolation Forest - Detected Points\"))\\\n    .opts(opts.Curve(xlabel=\"Time\", ylabel=\"Temperature\", width=700, height=400,tools=['hover'],show_grid=True))","f3f7873c":"iforest_f1 = f1_score(df['anomaly'], iforest_df['anomaly'])\nprint(f'Isolation Forest F1 Score : {iforest_f1}')","354db2ea":"lof_model = LocalOutlierFactor(n_neighbors=500, contamination=0.07)\nlof_ret = lof_model.fit_predict(df['value'].values.reshape(-1, 1))\nlof_df = pd.DataFrame()\nlof_df['value'] = df['value']\nlof_df['anomaly']  = [1 if i==-1 else 0 for i in lof_ret]","e433d61e":"anomalies = [[ind, value] for ind, value in zip(lof_df[lof_df['anomaly']==1].index, lof_df.loc[lof_df['anomaly']==1,'value'])]\n(hv.Curve(lof_df['value'], label=\"Temperature\") * hv.Points(anomalies, label=\"Detected Points\").opts(color='red', legend_position='bottom', size=2, title=\"LOF - Detected Points\"))\\\n    .opts(opts.Curve(xlabel=\"Time\", ylabel=\"Temperature\", width=700, height=400,tools=['hover'],show_grid=True))","95984fa9":"lof_f1 = f1_score(df['anomaly'], lof_df['anomaly'])\nprint(f'LOF F1 Score : {lof_f1}')","2c9e9304":"sigma_df = pd.DataFrame()\nsigma_df['value'] = df['value']\nstd = sigma_df['value'].std()\nsigma_df['anomaly_threshold_3r'] = mean + 1.5*std\nsigma_df['anomaly_threshold_3l'] = mean - 1.5*std\nsigma_df['anomaly']  = sigma_df.apply(lambda x : 1 if (x['value'] > x['anomaly_threshold_3r']) or (x['value'] < x['anomaly_threshold_3l']) else 0, axis=1)","0e9e2d24":"anomalies = [[ind, value] for ind, value in zip(sigma_df[sigma_df['anomaly']==1].index, sigma_df.loc[sigma_df['anomaly']==1,'value'])]\n(hv.Curve(sigma_df['value'], label=\"Temperature\") * hv.Points(anomalies, label=\"Detected Points\").opts(color='red', legend_position='bottom', size=2, title=\"Variance Based Method - Detected Points\"))\\\n    .opts(opts.Curve(xlabel=\"Time\", ylabel=\"Temperature\", width=700, height=400,tools=['hover'],show_grid=True))","f1aa0bd8":"sigma_f1 = f1_score(df['anomaly'], sigma_df['anomaly'])\nprint(f'Variance Based Method F1 Score : {sigma_f1}')","a8cbd464":"display(HTML('<h3>F1 Score Kar\u015f\u0131la\u015ft\u0131rmas\u0131<\/h3>'+tabulate([['F1 Score', hotelling_f1, ocsvm_f1, iforest_f1, lof_f1, sigma_f1]],\\\n                      [\"\", \"Hotelling's T2\", \"One-Class SVM\", 'Isolation Forest', 'LOF', 'Variance Based Method'], tablefmt=\"html\")))","8fc6aca8":"# 1. Veri Okuma \n>Veriye ait \u00f6zellikler: \n>* End\u00fcstriyel bir makineye ait s\u0131cakl\u0131k verileri zamana ba\u011fl\u0131 olarak i\u00e7ermektedir.\n>* \u0130lk anomali durumunda makinenin kapanmas\u0131 istenmektedir. \n>* \u0130kinci anomali durumunda, \u00fc\u00e7\u00fcnc\u00fc anomali de tetiklenmektedir. Ayr\u0131ca bu durumda ciddi bir felakete yol a\u00e7abilmektedir.","cbe008f2":"## Peki hangi b\u00f6lgeler anomaliye ait? Bu sorunun cevab\u0131n\u0131 g\u00f6rselle\u015ftirerek g\u00f6relim. K\u0131rm\u0131z\u0131 noktalar anomali, mavi \u00e7izgi ise normal duruma ait g\u00f6sterilmi\u015ftir.","2c9c354f":"## Verimizde toplamda 22695 sat\u0131r, 2 s\u00fctun bulunmaktad\u0131r. ","68969aaa":"# S\u0131cakl\u0131k de\u011ferlerinin yo\u011funlu\u011funu g\u00f6steren bir grafik. 80-100F aras\u0131nda yo\u011funluk oldu\u011fu g\u00f6zlenmi\u015ftir. Veriyi okudu\u011fumuzda \"df.describe()\" methodunu kullan\u0131p veriye istatistiksel olarak bakm\u0131\u015ft\u0131k. Ayn\u0131 sonucu o tablodan da g\u00f6zlemleyebiliriz. Tabloya g\u00f6re verinin %50'si 89F, %75'i 94F derecesinde oldu\u011fu g\u00f6zlenmektedir.","fdfbbe7c":"## G\u00fcnl\u00fck ortalama s\u0131cakl\u0131k de\u011ferleri grafi\u011fi","90cbea3e":"## One-class SVM'e ait normal ve anomali grafi\u011fi g\u00f6sterilmi\u015ftir.","d9ede47d":"## LOF \u00e7\u0131kt\u0131s\u0131 ve veriseti sa\u011flay\u0131c\u0131lar\u0131n\u0131n sundu\u011fu anomali durumlar\u0131n\u0131n kar\u015f\u0131la\u015ft\u0131rma skoru","2fbb0332":"# 3. EDA & Veri G\u00f6rselle\u015ftirme","9bc2d21e":"## Model 1 - Hotelling's T-Squared Method\n>* \u00d6ncelikle veriye ait standart sapma ve ortalama de\u011ferler hesaplan\u0131r.\n>* Verideki her bir de\u011fer'den ortalama \u00e7\u0131kart\u0131l\u0131p standart sapma'ya b\u00f6l\u00fcn\u00fcr. Daha sonra karesi al\u0131n\u0131r. Anomali i\u00e7in belirli bir threshold belirlenir.\n>* Anomali de\u011feri, threshold(e\u015fik) de\u011ferinden b\u00fcy\u00fck oldu\u011funda 1, olmad\u0131\u011f\u0131nda 0 olarak etikelenmi\u015ftir.","cd410739":"# Yine veriye ait minimum ve maksimum de\u011ferler y\u0131l\/ay grafi\u011fi \u015feklinde g\u00f6sterilmektedir.","3af9aece":"## LOF'a sonu\u00e7lar\u0131na ait anomali ve normal durum veri grafi\u011fi","e3b455bd":"## Y\u0131llara g\u00f6re ve aylara g\u00f6re s\u0131cakl\u0131k yo\u011funlu\u011fu grafi\u011fi.","ebe5a178":"## Izolasyon orman\u0131'na ait anomali ve normal durum g\u00f6rselle\u015ftirmesi","a9dc6f37":"## Model 4 - Yerel Ayk\u0131r\u0131 Fakt\u00f6r (Local Outlier Factor)\n>* Scikit learn taraf\u0131ndan sa\u011flanan LocalOutlier Factor g\u00f6zetimsiz \u00f6\u011frenme modeli kullan\u0131lm\u0131t\u0131r.","3bbda62b":"## Model 5 - Varyans Bazl\u0131 Model\n>* Verinin varyans\u0131 hesaplanarak modellenir.\n>* Alt ve \u00fcst de\u011fer olacak \u015fekilde iki farkl\u0131 e\u015fik de\u011feri hesaplan\u0131r.\n>* E\u015fik de\u011ferleri aras\u0131nda olmayanlar anomali olarak tan\u0131mlan\u0131r.","aae85cd0":"# 5 - Model kar\u015f\u0131la\u015ft\u0131rmas\u0131\n## A\u015fa\u011f\u0131daki tabloda g\u00f6r\u00fcld\u00fc\u011f\u00fc gibi en iyi sonuca \"Variance Based Method\" ula\u015fm\u0131\u015ft\u0131r. Fakat yine de ula\u015f\u0131lan sonu\u00e7lar tatmin edici de\u011fildir. Modeller \u00fczerinde herhangi bir optimizasyon i\u015flemi yap\u0131lmam\u0131\u015ft\u0131r. Optimizasyon i\u015flemleri sonucu modeller arasndaki ba\u015far\u0131m oranlar\u0131 de\u011fi\u015febilmektedir.","9649a40b":"## Varyans modeline ait anomali ve normal durum grafi\u011fi","fbaf3429":"## Modelimizi olu\u015fturduk. Model ile istatiksel k\u00fcmelememizi yapt\u0131k fakat modelimizin ne kadar do\u011fru bir k\u00fcmeleme yapt\u0131\u011f\u0131n\u0131 bilmiyoruz. Bunun i\u00e7in modelimizin anomali durumlar\u0131 ile veriseti sa\u011flay\u0131c\u0131lar\u0131n\u0131n anomali durumlar\u0131n\u0131 kar\u015f\u0131la\u015ft\u0131raca\u011f\u0131z. Ben kar\u015f\u0131la\u015ft\u0131rma metri\u011fi olarak \"F1 Score\" se\u00e7tim. Farkl\u0131 se\u00e7imler de yap\u0131labilir.","826b9491":"## Veriyi zaman damgalar\u0131na g\u00f6re indexliyoruz. Art\u0131k verimiz g\u00f6rselle\u015ftirme ve analiz i\u00e7in haz\u0131r diyebiliriz.","9a3f776a":"## \u00d6ncelikle veriye ait ortalama s\u0131cakl\u0131k de\u011ferlerini ve toplamlar\u0131 ay\/y\u0131l grafi\u011finde bar \u015feklinde g\u00f6sterelim.","03b8e98b":"## Verideki \u00f6znitelikleri inceledi\u011fimizde herhangi bir bo\u015fluk(null,na) olmad\u0131\u011f\u0131 g\u00f6r\u00fclmektedir. S\u0131cakl\u0131k de\u011ferleri \"float64\" bi\u00e7iminde kaydedilmi\u015ftir. Bo\u015fluk olmas\u0131 durumunda, bo\u015f yerler mant\u0131kl\u0131 ortalama de\u011ferlerle doldurulabilir veya bo\u015f yerler veriden \u00e7\u0131kart\u0131labilir.","a5218dbb":"# 4. Modelleme[](http:\/\/)\n>Bu b\u00f6l\u00fcmde \u00e7e\u015fitli modeller haz\u0131rlay\u0131p, testler yapaca\u011f\u0131z.","dae20b18":"## Modelin \u00fcretti\u011fi anomali durumlar\u0131 ve normal durumlar g\u00f6rselle\u015ftirilmi\u015ftir.","2de406ad":"## Veriye istatiksel olarak bakt\u0131\u011f\u0131m\u0131zda en d\u00fc\u015f\u00fck 2.084F, en y\u00fcksek is 108.5F derece s\u0131cakl\u0131klara ula\u015f\u0131ld\u0131\u011f\u0131n\u0131 g\u00f6r\u00fcyoruz. Ortalama s\u0131cakl\u0131k de\u011feri ise 85.9F olarak g\u00f6r\u00fclmektedir.","26cca2e4":"# 2. Veri \u00d6ni\u015fleme\n## Anomali Durumlar\u0131\n>Veriye ait anomali durumlar\u0131 veri sa\u011flay\u0131c\u0131lar\u0131 taraf\u0131ndan tan\u0131mlanm\u0131\u015ft\u0131r. Belirli zaman aral\u0131klar\u0131 i\u00e7in anomali durumu oldu\u011fu verilmi\u015ftir. [Link](https:\/\/github.com\/numenta\/NAB\/blob\/master\/labels\/combined_windows.json)\n>\u00d6rnek olarak 10-12 Aral\u0131k 2013 tarihleri aras\u0131ndaki veri anomali durumuna aittir.","c6056587":"## Elimizde anomali durumuna ait aral\u0131klar var. Veriye \"anomaly\" isminde bir s\u00fctun ekleyelim. Bu s\u00fctun anomali aral\u0131klar\u0131ndaki zaman damgalar\u0131nda \"1\" di\u011fer zaman damgalar\u0131nda \"0\" olarak etiketlensin. B\u00f6ylece verimizin hangi durumlarda anomali oldu\u011funu ba\u015fka bir s\u00fctunda tutmu\u015f oluruz.","6623edfe":"# One-class SVM ve veriseti sa\u011flay\u0131c\u0131lar\u0131 taraf\u0131ndan sunulan anomali durumlar\u0131 kar\u015f\u0131la\u015ft\u0131r\u0131lm\u0131\u015ft\u0131r.","39247e73":"## Farkl\u0131 veri g\u00f6rselle\u015ftirmeleri ve \u00f6znitelikler i\u00e7in veriye yeni s\u00fctunlar ekleyelim. Bu s\u00fctunlar zaman damgalar\u0131n\u0131n ayr\u0131\u015ft\u0131r\u0131lm\u0131\u015f halidir. G\u00fcn, ay, y\u0131l, saat, dakika olarak ayr\u0131\u015ft\u0131r\u0131lm\u0131\u015ft\u0131r.","cbd851e4":"## Model 3 - \u0130zolasyon Orman\u0131 (Isolation Forest)\n>* Scikit learn k\u00fct\u00fcphanesinin sa\u011flad\u0131\u011f\u0131, topluluk \u00f6\u011frenme y\u00f6ntemi olan \u0130zolasyon Orman\u0131 y\u00f6ntemi kullan\u0131lm\u0131\u015ft\u0131r.\n>* Estimator say\u0131s\u0131 300 olarak belirlenmi\u015ftir.","e159eed3":"## Model 2 - Tek S\u0131n\u0131fl\u0131 Destek Vekt\u00f6r Makineleri(One-Class SVM)\n>* Scikit learn k\u00fct\u00fcphanesinin sundu\u011fu, bir g\u00f6zetimsiz \u00f6\u011frenme y\u00f6ntemi olan One-Class SVM modeli kullan\u0131lm\u0131\u015ft\u0131r.\n>* Hiperparametreler olan nu de\u011feri 0.2, gamma de\u011feri 0.001 olarak modele verilmi\u015ftir.","cfe71890":"## Halihaz\u0131rda verinin \"timestamp\" s\u00fctunu(zaman belirten \u00f6znitelik) \"object\" olarak g\u00f6r\u00fclmektedir. Bunu pandas datetime objesine d\u00f6n\u00fc\u015ft\u00fcrerek hem rahatl\u0131kla ayr\u0131\u015ft\u0131rabiliriz hem de modellere girdi olarak verebiliriz.","383928a7":"## K\u00fc\u00e7\u00fck bir g\u00f6rselle\u015ftirme yapal\u0131m. Zamana ba\u011fl\u0131 s\u0131cakl\u0131k grafi\u011fini \u00e7izdirelim. Ortalama de\u011fer k\u0131rm\u0131z\u0131, maksimum ve minimum de\u011ferler ye\u015fil \u00e7izgiler ile g\u00f6sterilmi\u015ftir.","a2299a12":"# Anomali de\u011ferleri ve e\u015fik de\u011feri a\u015fa\u011f\u0131daki tabloda g\u00f6rselle\u015ftirilmi\u015ftir.","43720442":"## Varyans modeline ait \u00e7\u0131kt\u0131lar ve veriseti sa\u011flay\u0131c\u0131lar\u0131n\u0131n sundu\u011fu anomalilerin kar\u015f\u0131la\u015ft\u0131r\u0131lmas\u0131","ae35bb0e":"# K\u00fcmeleme Y\u00f6ntemleri Kullan\u0131larak Zaman Serileri Analizi (in Turkish)\n### Bu \u00e7al\u0131\u015fmada end\u00fcstriyel bir makineye ait s\u0131cakl\u0131k verileri ile anomali tespiti \u00fczerine \u00e7al\u0131\u015fma yap\u0131lm\u0131\u015ft\u0131r. K\u00fcmeleme(g\u00f6zetimsiz \u00f6\u011frenme) y\u00f6ntemleri kullan\u0131lm\u0131\u015ft\u0131r. Ham veri, zaman(datetime) ve s\u0131cakl\u0131k de\u011feri(birim:Fahrenheit) i\u00e7ermektedir. \u00d6ncelikle gerekli k\u00fct\u00fcphaneleri \u00e7a\u011f\u0131rarak ba\u015fl\u0131yoruz.","52ded59a":"# 6 - \u00d6zet\n## Bu \u00e7al\u0131\u015fmada end\u00fcstriyel makineye ait zaman-s\u0131cakl\u0131k anomali testpiti yap\u0131lm\u0131\u015ft\u0131r. G\u00f6zetimsiz \u00f6\u011frenme modelleri kullan\u0131lm\u0131\u015ft\u0131r. Bu modeller ile tespit edilen anomaliler veriseti sa\u011flay\u0131c\u0131lar\u0131n\u0131n sunduklar\u0131 ile kar\u015f\u0131la\u015ft\u0131r\u0131lm\u0131\u015ft\u0131r. En y\u00fcksek %58 de\u011ferine \"Variance Based Method\" ile ula\u015f\u0131lm\u0131\u015ft\u0131r. Hi\u00e7bir modelde optimizasyon yap\u0131lmam\u0131\u015ft\u0131r.\n### [Notebook Link For Kaggle](https:\/\/www.kaggle.com\/dasmehdixtr\/machine-temperature-anomaly-detection-timeseries\/)"}}