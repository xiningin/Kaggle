{"cell_type":{"72cec2c3":"code","eb7fa78a":"code","291d9c34":"code","46985a8f":"code","bfdf3fe1":"code","0e8cf916":"code","572e541a":"code","a9de3ad5":"code","df13bdc8":"code","f9382020":"code","7383f60e":"code","91c6b9b4":"code","e8898207":"code","524fd433":"code","7b8205a8":"code","8cf52572":"code","57dd4ea0":"code","77871b4a":"code","62c94c2a":"code","0ef5144f":"code","90ff3b9a":"code","0db538ef":"code","1548c120":"code","d81f5025":"code","61eb35fc":"code","252fff9a":"code","74c24c24":"code","5b0c8277":"code","b981d9bd":"code","d3ef00f6":"code","ebf628e6":"code","5d0f0eae":"code","47353f49":"code","40734233":"code","71bcec95":"markdown","52f50cc4":"markdown","f1db519c":"markdown","6bd856aa":"markdown","5e68ddef":"markdown","36e313ba":"markdown","96262ebe":"markdown","a378fd9e":"markdown","7db23cf7":"markdown","fccfa8c1":"markdown","0c5a40ab":"markdown","ce4a046b":"markdown","16a739df":"markdown","fbaf3422":"markdown"},"source":{"72cec2c3":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nfrom sklearn.manifold import TSNE\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory\n\nimport os\nprint(os.listdir(\"..\/input\"))\n\n# Any results you write to the current directory are saved as output.","eb7fa78a":"from sklearn.decomposition import PCA\nfrom itertools import chain\nimport plotly as py\nimport plotly.figure_factory as ff\nimport plotly.graph_objs as go\nfrom plotly.offline import download_plotlyjs, init_notebook_mode, plot, iplot\ninit_notebook_mode(connected=True)","291d9c34":"train = pd.read_json('..\/input\/train.json')\ntest = pd.read_json('..\/input\/test.json')","46985a8f":"train.shape,test.shape","bfdf3fe1":"train.head().T","0e8cf916":"train.isnull().values.any(),test.isnull().values.any()","572e541a":"train.vid_id.nunique(),test.vid_id.nunique()","a9de3ad5":"hist_data = [train['start_time_seconds_youtube_clip'].values]\ngroup_labels = ['distplot']\n\nfig = ff.create_distplot(hist_data, group_labels,bin_size=20)\npy.offline.iplot(fig, filename='Distplot of start time')","df13bdc8":"hist_data = [train['end_time_seconds_youtube_clip'].values]\ngroup_labels = ['distplot']\n\nfig = ff.create_distplot(hist_data, group_labels, bin_size=20)\npy.offline.iplot(fig, filename='Distplot of end time')","f9382020":"train['length_audio']=pd.DataFrame(train['end_time_seconds_youtube_clip']-train['start_time_seconds_youtube_clip'])","7383f60e":"train['length_audio'].value_counts()","91c6b9b4":"train.loc[train.length_audio<10]['is_turkey'].value_counts()","e8898207":"train['is_turkey'].value_counts().keys()","524fd433":"data = [go.Bar(\n            x=train['is_turkey'].value_counts().keys(),\n            y=train['is_turkey'].value_counts().values\n    )]\nlayout=go.Layout(title='Distribution of target variable')\n\nfig = go.Figure(data=data, layout=layout)\npy.offline.iplot(data, filename='Distribution of target variable')","7b8205a8":"embeddings=train.audio_embedding","8cf52572":"embeddings=embeddings.apply(lambda x:list(chain.from_iterable(x)))","57dd4ea0":"embeddings_df=pd.DataFrame(list(embeddings))","77871b4a":"embeddings_df.head()","62c94c2a":"embeddings_df=embeddings_df.fillna(-1)","0ef5144f":"pca = PCA(n_components=50)\npca_result = pca.fit_transform(embeddings_df.values)","90ff3b9a":"var_exp=pca.explained_variance_ratio_\ncum_var_exp=np.cumsum(pca.explained_variance_ratio_)\ntrace1 = go.Bar(\n        x=['PC %s' %i for i in range(1,20)],\n        y=var_exp,\n        showlegend=False)\n\ntrace2 = go.Scatter(\n        x=['PC %s' %i for i in range(1,20)], \n        y=cum_var_exp,\n        name='cumulative explained variance')\n\ndata = [trace1, trace2]\n\nlayout=go.Layout(\n        yaxis=go.layout.YAxis(title='Explained variance in percent'),\n        title='Explained variance by different principal components')\n\nfig = go.Figure(data=data, layout=layout)\npy.offline.iplot(fig)","0db538ef":"trace = go.Scatter(\n    x = pca_result[:,0],\n    y = pca_result[:,1],\n    mode = 'markers',\n    marker = dict(\n        size = 8,\n        color = train.is_turkey.values,\n        showscale = False,\n        line = dict(\n            width = 2,\n            color = 'rgb(255, 255, 255)'\n        ),\n    )\n)\ndata = [trace]\n\nlayout = go.Layout(title = 'PCA (Principal Component Analysis)',\n              hovermode= 'closest',\n              yaxis=go.layout.YAxis(title='Principal Component 2',zeroline=False),\n              xaxis=go.layout.XAxis(title='Principal Component 1',zeroline=False),\n              showlegend= True\n             )\n\nfig = go.Figure(data=data, layout=layout)\npy.offline.iplot(fig, filename='PCA')","1548c120":"tsne = TSNE()\ntsne_results = tsne.fit_transform(embeddings_df.values) ","d81f5025":"trace = go.Scatter(\n    x = tsne_results[:,0],\n    y = tsne_results[:,1],\n    mode = 'markers',\n    marker = dict(\n        size = 8,\n        color = train.is_turkey.values,\n        showscale = False,\n        line = dict(\n            width = 2,\n            color = 'rgb(255, 255, 255)'\n        ),\n    )\n)\ndata = [trace]\n\nlayout = go.Layout(title = 'TSNE (T-Distributed Stochastic Neighbour Embedding)',\n              hovermode= 'closest',\n              yaxis = dict(zeroline = False),\n              xaxis = dict(zeroline = False),\n              showlegend= True\n             )\n\nfig = go.Figure(data=data, layout=layout)\npy.offline.iplot(fig, filename='TSNE')","61eb35fc":"import lightgbm as lgb\nlgb_params = {\n    'learning_rate': 0.01,\n    'max_depth': 7,\n    'num_leaves': 40, \n    'objective': 'binary',\n    'num_class':1,\n    'tree_learner':'voting',\n    'metric':'auc',\n    'feature_fraction': 0.75,\n    'bagging_fraction': 0.75,\n    'max_bin': 100\n}\ndtrain_lgb = lgb.Dataset(embeddings_df, label=train.is_turkey)\ncv_result_lgb = lgb.cv(lgb_params, \n                       dtrain_lgb, \n                       num_boost_round=3000, \n                       nfold=5, \n                       stratified=True, \n                       early_stopping_rounds=50, \n                       verbose_eval=100, \n                       show_stdv=True)","252fff9a":"num_boosting_round=len(list(cv_result_lgb.values())[0])","74c24c24":"model_lgb = lgb.train(lgb_params, dtrain_lgb, num_boost_round=num_boosting_round)","5b0c8277":"test_embeddings=test.audio_embedding.apply(lambda x:list(chain.from_iterable(x)))","b981d9bd":"test_embeddings_df=pd.DataFrame(list(test_embeddings))","d3ef00f6":"test_embeddings_df=test_embeddings_df.fillna(-1)","ebf628e6":"test_preds=model_lgb.predict(test_embeddings_df)","5d0f0eae":"sub=pd.read_csv('..\/input\/sample_submission.csv')","47353f49":"sub.is_turkey=test_preds","40734233":"sub.to_csv('submission.csv',index=False)","71bcec95":"**Labels are highly correlated with the first two principal components**","52f50cc4":"**Most of the audios start time is around 0-30**","f1db519c":"### LGBM","6bd856aa":"**Most of the audios end time is around 10-40**","5e68ddef":"**Most of the audio size is 10**","36e313ba":"**Not a class imbalance problem**","96262ebe":"**No change in distribution for the audio clips of shorter duration**","a378fd9e":"### Rolling up all seconds","7db23cf7":"**With 20 variables(principal components we are almost reaching 40% variance**","fccfa8c1":"### Principal Component Analysis","0c5a40ab":"**Target Varaible: is_turkey**","ce4a046b":"**No missing values**","16a739df":"### Happy Thanksgiving day to all, what's on the menu tonight?\n\n\n\n\n\nThis kernel is just a baseline for LGB model. \n\nNo Deep Learning innvolved, LB(0.984) without parameter tuning, **No LSTM, No Attention and finally no time factor.**\n\nI hope this kernel will help you in understanding the data and how easily we can separate the data...\n\n\n**Library Used: **\n\n-- I used plotly and LGBM the two packages which are widely used in kaggle and it is better to start with this.\n\nExploration includes **PCA, TSNE**\n\nOnce again Happy Thanksgiving, Feel free to post your feedback, comments I will take it constructively..\n\n","fbaf3422":"**Data is easily seperable even in lower dimension space even after rolling up**"}}