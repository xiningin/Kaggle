{"cell_type":{"12609f6d":"code","ce82a928":"code","96ce6397":"code","7e8c0d98":"code","e793f379":"code","acc97114":"code","76ab4d3f":"code","351912c7":"code","7b9dfd26":"code","0fbe68fb":"code","7ce61b6c":"code","10b741ee":"code","59835cdf":"markdown","5ae092b0":"markdown","66d61527":"markdown","112aa677":"markdown","4a792090":"markdown","ad3c405c":"markdown","c00503be":"markdown","11136a9d":"markdown","147196cb":"markdown","17dba1de":"markdown","39e4a194":"markdown","edd04030":"markdown","32e72dda":"markdown"},"source":{"12609f6d":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","ce82a928":"import tensorflow as tf\nfrom tensorflow.keras.datasets import fashion_mnist","96ce6397":"(X_train, y_train), (X_test, y_test) = fashion_mnist.load_data()","7e8c0d98":"X_train = X_train\/255.0\nX_test = X_test\/255.0","e793f379":"X_train = X_train.reshape(-1, 28*28)\nX_test = X_test.reshape(-1, 28*28)","acc97114":"model = tf.keras.models.Sequential()","76ab4d3f":"model.add(tf.keras.layers.Dense(units = 128, activation = 'relu', input_shape = (784,)))","351912c7":"model.add(tf.keras.layers.Dropout(0.2))","7b9dfd26":"model.add(tf.keras.layers.Dense(units = 10, activation = 'softmax'))","0fbe68fb":"model.compile(optimizer = 'adam', loss = 'sparse_categorical_crossentropy', metrics = ['sparse_categorical_accuracy'])","7ce61b6c":"model.fit(X_train, y_train, epochs =5)","10b741ee":"test_loss, test_accuracy = model.evaluate(X_test, y_test)","59835cdf":"**Reshaping the Image**","5ae092b0":"**Evaluating the model**","66d61527":"**Training the model**","112aa677":"**Importing the Libraries**","4a792090":"**Compiling the model**","ad3c405c":"**Load & Split the Dataset**","c00503be":"**Adding a Fully Connected Layer**","11136a9d":"**1. Building the Baseline\/Heuristic Model**","147196cb":"# Building Simple ANN Using TensorFlow","17dba1de":"**Adding DropOut Layer to prevent overfitting**","39e4a194":"**Normalization**","edd04030":"**Building ANN**","32e72dda":"**Adding Output layer**"}}