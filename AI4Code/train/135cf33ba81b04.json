{"cell_type":{"f9e0311a":"code","66dc51f1":"code","69fc66a5":"code","41fbf3aa":"code","0d2a835b":"code","b2128468":"code","bf89fb3a":"code","a2df62a7":"code","988917cd":"code","7bd23f32":"code","a3de026d":"code","fcc779cc":"code","8c03417c":"code","5c350cd5":"code","6c35502a":"code","f1f44198":"code","a51d34b0":"code","acb55596":"code","4a38e04f":"code","2f51437c":"code","89af28cb":"code","91699b1d":"code","a5e0a802":"code","6217dca3":"code","df919a01":"code","4ca77be4":"code","5fca7934":"code","f15c4964":"code","7e56489b":"code","f918b81d":"code","07fd68b4":"code","7a0345d2":"code","9b11a304":"code","2b051acd":"code","7bab5fdb":"code","2f64e089":"code","3a48a232":"code","0ff62603":"code","178d0038":"code","a0467857":"code","7d33c916":"markdown","48a7e040":"markdown","92b8aae7":"markdown","68dc3c99":"markdown","8cc89a49":"markdown","490121a6":"markdown","0e7a468f":"markdown","35f26c07":"markdown","18b85c8e":"markdown","f35a500d":"markdown","c376e7ae":"markdown","ea3fe349":"markdown","0692bf3b":"markdown","c740d644":"markdown","36c82e36":"markdown"},"source":{"f9e0311a":"import gc\nimport os\nfrom pathlib import Path\nimport random\nimport sys\n\nfrom tqdm import tqdm_notebook as tqdm\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\nfrom IPython.core.display import display, HTML\n\n# --- plotly ---\nfrom plotly import tools, subplots\nimport plotly.offline as py\npy.init_notebook_mode(connected=True)\nimport plotly.graph_objs as go\nimport plotly.express as px\nimport plotly.figure_factory as ff\n\n# --- models ---\nfrom sklearn import preprocessing\nfrom sklearn.model_selection import KFold\nimport lightgbm as lgb\nimport xgboost as xgb\nimport catboost as cb\n\nfrom sklearn.metrics import mean_squared_error","66dc51f1":"\n# Original code from https:\/\/www.kaggle.com\/gemartin\/load-data-reduce-memory-usage by @gemartin\n# Modified to support timestamp type, categorical type\n# Modified to add option to use float16 or not. feather format does not support float16.\nfrom pandas.api.types import is_datetime64_any_dtype as is_datetime\nfrom pandas.api.types import is_categorical_dtype\n\ndef reduce_mem_usage(df, use_float16=False):\n    \"\"\" iterate through all the columns of a dataframe and modify the data type\n        to reduce memory usage.        \n    \"\"\"\n    start_mem = df.memory_usage().sum() \/ 1024**2\n    print('Memory usage of dataframe is {:.2f} MB'.format(start_mem))\n    \n    for col in df.columns:\n        if is_datetime(df[col]) or is_categorical_dtype(df[col]):\n            # skip datetime type or categorical type\n            continue\n        col_type = df[col].dtype\n        \n        if col_type != object:\n            c_min = df[col].min()\n            c_max = df[col].max()\n            if str(col_type)[:3] == 'int':\n                if c_min > np.iinfo(np.int8).min and c_max < np.iinfo(np.int8).max:\n                    df[col] = df[col].astype(np.int8)\n                elif c_min > np.iinfo(np.int16).min and c_max < np.iinfo(np.int16).max:\n                    df[col] = df[col].astype(np.int16)\n                elif c_min > np.iinfo(np.int32).min and c_max < np.iinfo(np.int32).max:\n                    df[col] = df[col].astype(np.int32)\n                elif c_min > np.iinfo(np.int64).min and c_max < np.iinfo(np.int64).max:\n                    df[col] = df[col].astype(np.int64)  \n            else:\n                if use_float16 and c_min > np.finfo(np.float16).min and c_max < np.finfo(np.float16).max:\n                    df[col] = df[col].astype(np.float16)\n                elif c_min > np.finfo(np.float32).min and c_max < np.finfo(np.float32).max:\n                    df[col] = df[col].astype(np.float32)\n                else:\n                    df[col] = df[col].astype(np.float64)\n        else:\n            df[col] = df[col].astype('category')\n\n    end_mem = df.memory_usage().sum() \/ 1024**2\n    print('Memory usage after optimization is: {:.2f} MB'.format(end_mem))\n    print('Decreased by {:.1f}%'.format(100 * (start_mem - end_mem) \/ start_mem))\n    \n    return df","69fc66a5":"%%time\nroot = Path('..\/input\/ashrae-feather-format-for-fast-loading')\n\ntrain_df = pd.read_feather(root\/'train.feather')\ntest_df = pd.read_feather(root\/'test.feather')\n#weather_train_df = pd.read_feather(root\/'weather_train.feather')\n#weather_test_df = pd.read_feather(root\/'weather_test.feather')\nbuilding_meta_df = pd.read_feather(root\/'building_metadata.feather')","41fbf3aa":"# i'm now using my leak data station kernel to shortcut.\nleak_df = pd.read_feather('..\/input\/ashrae-leak-data-station\/leak.feather')\n\nleak_df.fillna(0, inplace=True)\nleak_df = leak_df[(leak_df.timestamp.dt.year > 2016) & (leak_df.timestamp.dt.year < 2019)]\nleak_df.loc[leak_df.meter_reading < 0, 'meter_reading'] = 0 # remove large negative values\nleak_df = leak_df[leak_df.building_id!=245]","0d2a835b":"leak_df.meter.value_counts()","b2128468":"print (leak_df.duplicated().sum())","bf89fb3a":"print (len(leak_df) \/ len(train_df))","a2df62a7":"! ls ..\/input","988917cd":"del train_df\ngc.collect()","7bd23f32":"sample_submission1 = pd.read_csv('..\/input\/ashrae-kfold-lightgbm-without-leak-1-08\/submission.csv', index_col=0)\nsample_submission2 = pd.read_csv('..\/input\/ashrae-half-and-half\/submission.csv', index_col=0)\nsample_submission3 = pd.read_csv('..\/input\/ashrae-highway-kernel-route4\/submission.csv', index_col=0)","a3de026d":"test_df['pred1'] = sample_submission1.meter_reading\ntest_df['pred2'] = sample_submission2.meter_reading\ntest_df['pred3'] = sample_submission3.meter_reading\n\ntest_df.loc[test_df.pred3<0, 'pred3'] = 0 \n\ndel  sample_submission1,  sample_submission2,  sample_submission3\ngc.collect()\n\ntest_df = reduce_mem_usage(test_df)\nleak_df = reduce_mem_usage(leak_df)","fcc779cc":"leak_df = leak_df.merge(test_df[['building_id', 'meter', 'timestamp', 'pred1', 'pred2', 'pred3', 'row_id']], left_on = ['building_id', 'meter', 'timestamp'], right_on = ['building_id', 'meter', 'timestamp'], how = \"left\")\nleak_df = leak_df.merge(building_meta_df[['building_id', 'site_id']], on='building_id', how='left')","8c03417c":"leak_df['pred1_l1p'] = np.log1p(leak_df.pred1)\nleak_df['pred2_l1p'] = np.log1p(leak_df.pred2)\nleak_df['pred3_l1p'] = np.log1p(leak_df.pred3)\nleak_df['meter_reading_l1p'] = np.log1p(leak_df.meter_reading)","5c350cd5":"leak_df.head()","6c35502a":"leak_df[leak_df.pred1_l1p.isnull()]","f1f44198":"#ashrae-kfold-lightgbm-without-leak-1-08\nsns.distplot(leak_df.pred1_l1p)\nsns.distplot(leak_df.meter_reading_l1p)\n\nleak_score = np.sqrt(mean_squared_error(leak_df.pred1_l1p, leak_df.meter_reading_l1p))\nprint ('score1=', leak_score)","a51d34b0":"#ashrae-half-and-half\nsns.distplot(leak_df.pred2_l1p)\nsns.distplot(leak_df.meter_reading_l1p)\n\nleak_score = np.sqrt(mean_squared_error(leak_df.pred2_l1p, leak_df.meter_reading_l1p))\nprint ('score2=', leak_score)","acb55596":"# meter split based\nsns.distplot(leak_df.pred3_l1p)\nsns.distplot(leak_df.meter_reading_l1p)\n\nleak_score = np.sqrt(mean_squared_error(leak_df.pred3_l1p, leak_df.meter_reading_l1p))\nprint ('score3=', leak_score)","4a38e04f":"# ashrae-kfold-lightgbm-without-leak-1-08 looks best","2f51437c":"leak_df['mean_pred'] = np.mean(leak_df[['pred1', 'pred2', 'pred3']].values, axis=1)\nleak_df['mean_pred_l1p'] = np.log1p(leak_df.mean_pred)\nleak_score = np.sqrt(mean_squared_error(leak_df.mean_pred_l1p, leak_df.meter_reading_l1p))\n\n\nsns.distplot(leak_df.mean_pred_l1p)\nsns.distplot(leak_df.meter_reading_l1p)\n\nprint ('mean score=', leak_score)","89af28cb":"leak_df['median_pred'] = np.median(leak_df[['pred1', 'pred2', 'pred3']].values, axis=1)\nleak_df['median_pred_l1p'] = np.log1p(leak_df.median_pred)\nleak_score = np.sqrt(mean_squared_error(leak_df.median_pred_l1p, leak_df.meter_reading_l1p))\n\nsns.distplot(leak_df.median_pred_l1p)\nsns.distplot(leak_df.meter_reading_l1p)\n\nprint ('meadian score=', leak_score)","91699b1d":"N = 10\nscores = np.zeros(N,)\nfor i in range(N):\n    p = i * 1.\/N\n    v = p * leak_df['pred1'].values + (1.-p) * leak_df ['pred3'].values\n    vl1p = np.log1p(v)\n    scores[i] = np.sqrt(mean_squared_error(vl1p, leak_df.meter_reading_l1p))","a5e0a802":"plt.plot(scores)","6217dca3":"best_weight = np.argmin(scores) *  1.\/N\nprint (scores.min(), best_weight)","df919a01":"# and more\nscores = np.zeros(N,)\nfor i in range(N):\n    p = i * 1.\/N\n    v =  p * (best_weight * leak_df['pred1'].values + (1.-best_weight) * leak_df ['pred3'].values) + (1.-p) * leak_df ['pred2'].values\n    vl1p = np.log1p(v)\n    scores[i] = np.sqrt(mean_squared_error(vl1p, leak_df.meter_reading_l1p))","4ca77be4":"plt.plot(scores)","5fca7934":"best_weight2 = np.argmin(scores) *  1.\/N\nprint (scores.min(), best_weight2)\n# its seams better than simple mean 0.92079717","f15c4964":"all_combinations = list(np.linspace(0.2,0.5,31))\nall_combinations","7e56489b":"import itertools","f918b81d":"l = [all_combinations, all_combinations, all_combinations]\n# remember to do the reverse!\nall_l = list(itertools.product(*l)) + list(itertools.product(*reversed(l)))","07fd68b4":"filtered_combis = [l for l in all_l if l[0] + l[1] + l[2] > 0.95 and l[0] + l[1] + l[2] < 1.05]","7a0345d2":"print(len(filtered_combis))","9b11a304":"best_combi = [] # of the form (i, score)\nfor i, combi in enumerate(filtered_combis):\n    #print(\"Now at: \" + str(i) + \" out of \" + str(len(filtered_combis))) # uncomment to view iterations\n    score1 = combi[0]\n    score2 = combi[1]\n    score3 = combi[2]\n    v = score1 * leak_df['pred1'].values + score2 * leak_df['pred3'].values + score3 * leak_df['pred2'].values\n    vl1p = np.log1p(v)\n    curr_score = np.sqrt(mean_squared_error(vl1p, leak_df.meter_reading_l1p))\n    \n    if best_combi:\n        prev_score = best_combi[0][1]\n        if curr_score < prev_score:\n            best_combi[:] = []\n            best_combi += [(i, curr_score)]\n    else:\n        best_combi += [(i, curr_score)]\n            \nscore = best_combi[0][1]\nprint(score)","2b051acd":"sample_submission = pd.read_feather(os.path.join(root, 'sample_submission.feather'))\n\n# extract best combination\nfinal_combi = filtered_combis[best_combi[0][0]]\nw1 = final_combi[0]\nw2 = final_combi[1]\nw3 = final_combi[2]\nprint(\"The weights are: w1=\" + str(w1) + \", w2=\" + str(w2) + \", w3=\" + str(w3))\n\nsample_submission['meter_reading'] = w1 * test_df.pred1 +  w2 * test_df.pred3  + w3 * test_df.pred2\nsample_submission.loc[sample_submission.meter_reading < 0, 'meter_reading'] = 0","7bab5fdb":"sample_submission.head()","2f64e089":"sns.distplot(np.log1p(sample_submission.meter_reading))","3a48a232":"leak_df = leak_df[['meter_reading', 'row_id']].set_index('row_id').dropna()\nsample_submission.loc[leak_df.index, 'meter_reading'] = leak_df['meter_reading']","0ff62603":"sns.distplot(np.log1p(sample_submission.meter_reading))","178d0038":"sample_submission.head()","a0467857":"sample_submission.to_csv('submission.csv', index=False, float_format='%.4f')","7d33c916":"### Create List of All Possible Combinations of Three Lists","48a7e040":"A one idea how we can use LV usefull is blending. We probably can find best blending method without LB probing and it's means we can save our submission.","92b8aae7":"# All we need is Leak Validation(LV) ?\n\n* **if you like this kernel, please upvote original kernels.**\n* update site-4 and site-15","68dc3c99":"# Find Best Weight","8cc89a49":"# Heuristic way","490121a6":"this kernel is still work in progress, but i hope you can find something usefull from this.","0e7a468f":"# Submit","35f26c07":"Ummm... it looks mean blending is beter than median blending","18b85c8e":"# Acknowledgements\n\nOriginal Kernel: https:\/\/www.kaggle.com\/yamsam\/ashrae-leak-validation-and-more\/notebook#Leak-Validation-for-public-kernels(not-used-leak-data)\n\nAdditions: Added a search method to find combination of weights with best score","f35a500d":"### Create List of Possible Combinations","c376e7ae":"# Leak Validation for Blending","ea3fe349":"# Leak Validation for public kernels(not used leak data)","0692bf3b":"### Filter Combinations to Have Those With Sum of Weights > 0.95 \n\nReason being weight sum of 0.96 led to LB score of 0.99","c740d644":"# Future Work\n\n- Increase the range of weights\n- Vary tolerance for sum of weights (currently tol = 0.95)","36c82e36":"## Begin the Search For Combination With Lowest Score!"}}