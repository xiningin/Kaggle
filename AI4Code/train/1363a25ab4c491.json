{"cell_type":{"61da0574":"code","3eefcc8d":"code","b1ec995c":"code","36897610":"code","a727c851":"code","64e14c89":"code","6a040b1c":"code","0a3f333e":"code","b46f8334":"code","e9349389":"code","d544ea0c":"code","8d4fe69d":"markdown","986d225f":"markdown","ca130bf0":"markdown","f88c6e33":"markdown","8fbc4782":"markdown","663f88ce":"markdown","c9af0aa9":"markdown","7f6bd18f":"markdown","d4187a49":"markdown"},"source":{"61da0574":"from mpl_toolkits.mplot3d import Axes3D\nimport matplotlib.pyplot as plt # plotting\nimport numpy as np # linear algebra\nimport os # accessing directory structure\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nfrom sklearn.linear_model import LinearRegression","3eefcc8d":"df = pd.read_csv('\/kaggle\/input\/final.csv', delimiter=',', nrows = None)\ndf.dataframeName = 'final.csv'\n\ndf.date = pd.to_datetime(df.date)\ndf = df[(df.min_price > 0) & (df.max_price > 0) & (df.min_square > 0) & (df.max_square > 0)]\n\ndf['mean_price'] = df[['min_price', 'max_price']].mean(axis=1)\ndf['mean_square'] = df[['min_square', 'max_square']].mean(axis=1)\ndf['mean_flat_price'] = df['mean_price'] * df['mean_square']\n\ndf.info()","b1ec995c":"df.head()","36897610":"def apply_regression(data, show_plot=False):\n    X = data.iloc[:, 0].values.reshape(-1, 1)  # values converts it into a numpy array\n    Y = data.iloc[:, 1].values.reshape(-1, 1)  # -1 means that calculate the dimension of rows, but have 1 column\n    linear_regressor = LinearRegression()  # create object for the class\n    \n    res = linear_regressor.fit(X, Y)  # perform linear regression\n\n    if show_plot:\n        Y_pred = linear_regressor.predict(X)\n        plt.scatter(X, Y)\n        plt.plot(X, Y_pred, color='red')\n        plt.show()\n    \n    return (res, res.score(X, Y))\n\ndef get_df_with_scores(main_df, origin_urls, show_plot=False):\n    groups = main_df.sort_values(by=['origin_url', 'date'], ascending=False).loc[main_df['origin_url'].isin(origin_urls)].groupby(by='origin_url')\n        \n    df_with_scores = pd.DataFrame(columns=['type_building', 'trimming', 'origin_url', 'coef', 'score', 'address', \n                                           'developer', 'min_price', 'class_building', 'parking', 'flat_count', \n                                           'geo_lat', 'geo_lon', 'point_count'])\n    \n    for name, group in groups:\n                \n        _df = pd.DataFrame(group, columns=['date', 'min_price', 'origin_url'])\n        \n        _df = _df.drop_duplicates(subset=['date'])\n        \n        _df['date'] = _df['date'].view('int64')\/\/(1000000*1000*60*60*24*365) # \u043a\u043e\u043b-\u0432\u043e \u0434\u043d\u0435\u0439 \u043e\u0442 1 \u044f\u043d\u0432\u0430\u0440\u044f 1970\n\n        if len(_df) < 2:\n            continue\n\n        res, score = apply_regression(_df, show_plot)\n    \n        if show_plot:\n            print(name, res.coef_[0][0], score)\n                                    \n        df_with_scores = df_with_scores.append({\n            'origin_url': name,\n            'coef': res.coef_[0][0],\n            'score': score,\n            'address': group['address'].iloc[0],\n            'developer': group['developer'].iloc[0],\n            'class_building': group['class_building'].iloc[0],\n            'parking': group['parking'].iloc[0],\n            'flat_count': group['flat_count'].iloc[0],\n            'trimming': group['trimming'].iloc[0],\n            'type_building': group['type_building'].iloc[0],\n            'min_price': group['min_price'].iloc[0],\n            'point_count': len(group)\n        }, ignore_index=True)\n    \n    return df_with_scores\n","a727c851":"df_with_scores = get_df_with_scores(df, df['origin_url'].values)\n\ndf_with_scores = df_with_scores.sort_values(by=['score', 'coef'], ascending=False)\n\ndf_with_scores.info()","64e14c89":"df_with_scores.head()","6a040b1c":"def format_df_values(df, name_column, mapping):\n    for key, values in mapping.items():\n        for val in values:\n            df[name_column] = df[name_column].str.replace(val, key, regex=False)\n\ntype_building = {\n    '\u0422\u0430\u0443\u043d\u0445\u0430\u0443\u0441': ['\u0422\u0430\u0443\u043d\u0445\u0430\u0443\u0441\u044b'],\n    '\u041c\u043e\u043d\u043e\u043b\u0438\u0442': ['\u041c\u043e\u043d\u043e\u043b\u0438\u0442-\u043a\u0430\u0440\u043a\u0430\u0441', '\u041c\u043e\u043d\u043e\u043b\u0438\u0442\u043d\u044b\u0439'],\n    '\u041c\u043e\u043d\u043e\u043b\u0438\u0442-\u043f\u0430\u043d\u0435\u043b\u044c': ['\u041c\u043e\u043d\u043e\u043b\u0438\u0442-\u043f\u0430\u043d\u0435\u043b\u044c'],\n    '\u0411\u043b\u043e\u0447\u043d\u044b\u0439': ['\u0411\u043b\u043e\u0447\u043d\u044b\u0439'],\n    '\u041a\u0438\u0440\u043f\u0438\u0447\u043d\u044b\u0439': ['\u041a\u0438\u0440\u043f\u0438\u0447\u043d\u044b\u0439'],\n    '\u041a\u0438\u0440\u043f\u0438\u0447-\u043c\u043e\u043d\u043e\u043b\u0438\u0442': ['\u041a\u0438\u0440\u043f\u0438\u0447\u043d\u043e-\u043c\u043e\u043d\u043e\u043b\u0438\u0442\u043d\u044b\u0439', '-1'],\n    '\u041f\u0430\u043d\u0435\u043b\u044c\u043d\u044b\u0439': ['\u041f\u0430\u043d\u0435\u043b\u044c\u043d\u044b\u0439'],\n}\n\nclass_building = {\n    '\u0411\u0438\u0437\u043d\u0435\u0441-\u043a\u043b\u0430\u0441\u0441': ['\u0411\u0438\u0437\u043d\u0435\u0441-\u043a\u043b\u0430\u0441\u0441'],\n    '\u041a\u043e\u043c\u0444\u043e\u0440\u0442-\u043a\u043b\u0430\u0441\u0441': ['\u041a\u043e\u043c\u0444\u043e\u0440\u0442-\u043a\u043b\u0430\u0441\u0441'],\n    '\u042d\u043a\u043e\u043d\u043e\u043c-\u043a\u043b\u0430\u0441\u0441': ['\u042d\u043a\u043e\u043d\u043e\u043c \u043a\u043b\u0430\u0441\u0441'],\n    '\u042d\u043b\u0438\u0442-\u043a\u043b\u0430\u0441\u0441': ['\u042d\u043b\u0438\u0442-\u043a\u043b\u0430\u0441\u0441'],\n}\n\nformat_df_values(df_with_scores, 'type_building', type_building)\nformat_df_values(df_with_scores, 'class_building', class_building)\n\ndf_with_scores['new_flat_count'] = df_with_scores.flat_count.str.extract(r'(\\d+)')\ndf_with_scores['new_flat_count'] = df_with_scores.flat_count.str.replace('-1', '')\ndf_with_scores['new_flat_count'] = pd.to_numeric(df_with_scores['new_flat_count'])\ndf_with_scores['new_flat_count'].fillna((df_with_scores['new_flat_count'].mean()), inplace=True)\n\n\ndf_with_scores.info()","0a3f333e":"score = 0.6 # \u0447\u0435\u043c \u0431\u043e\u043b\u044c\u0448\u0435 \u044d\u0442\u043e \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435 \u0442\u0435\u043c \u0437\u0430\u0432\u0438\u0441\u0438\u043c\u043e\u0441\u0442\u044c \u043c\u0435\u0436\u0434\u0443 \u0446\u0435\u043d\u043e\u0439 \u0438 \u0432\u0440\u0435\u043c\u0435\u043d\u0435\u043c \u0431\u043e\u043b\u0435\u0435 \u043f\u0440\u044f\u043c\u043e\u043b\u0438\u043d\u0435\u0439\u043d\u0430\nprice = 20000 # \u0441\u043a\u043e\u0440\u043e\u0441\u0442\u044c \u0438\u0437\u043c\u0435\u043d\u0435\u043d\u0438\u044f \u0446\u0435\u043d\u044b \u0437\u0430 \u043a\u0432 \u0432 \u0433\u043e\u0434\ndf_with_scores = df_with_scores[(df_with_scores['score'] > score)]\n\nplt.figure(figsize=(12, 12))\nhist_data = plt.hist(df_with_scores['type_building'].values, bins=10)\nplt.show()\n\nhist_data = plt.hist(df_with_scores['class_building'].values, bins=10)\nplt.show()\n\nhist_data = plt.hist(df_with_scores['coef'].values, bins=24)\nplt.show()\n\nhist_data = plt.hist(df_with_scores['score'].values, bins=10)\nplt.show()\n\ndf_with_scores.head()\nprint(df_with_scores['min_price'].mean())\n\ndf_with_scores.sort_values(by=['coef'], ascending=True)","b46f8334":"# from dadata import Dadata\n# import time\n\n# token = \"\"\n# secret = \"\"\n\n# dadata = Dadata(token, secret)\n\n# count = 0\n# for index, row in df_with_scores.iterrows():\n    \n#     time.sleep(0.2)\n    \n#     res = dadata.clean(\"address\", '\u0421\u0430\u043d\u043a\u0442-\u041f\u0435\u0442\u0435\u0440\u0431\u0443\u0440\u0433, ' + row['address'].replace(r'.*\u0440\u0430\u0439\u043e\u043d.', ''))\n\n#     row['geo_lat'] = res['geo_lat']\n#     row['geo_lon'] = res['geo_lon']\n    \n#     df_with_scores.loc[index] = row\n\n#     count += 1\n    \n# df_with_scores['geo_lat'] = pd.to_numeric(df_with_scores['geo_lat']) * 10**5\n# df_with_scores['geo_lon'] = pd.to_numeric(df_with_scores['geo_lon']) * 10**5\n# df_with_scores.head()","e9349389":"from catboost import Pool, CatBoostRegressor\n\n# initialize data\ntrain_data = df_with_scores[[\"class_building\", \"parking\", \"type_building\", \"new_flat_count\"]]\n\ntrain_label = df_with_scores[\"coef\"]\n\ncat_features=[0,1,2]\n\n# specify the training parameters \nmodel = CatBoostRegressor(iterations=300, \n                          depth=5,\n                          learning_rate=0.1, \n                          loss_function='RMSE')\n\n#train the model\nmodel.fit(train_data, train_label, cat_features=cat_features, verbose=False)","d544ea0c":"test_data = pd.DataFrame(data={\n    'class_building': ['\u042d\u043b\u0438\u0442-\u043a\u043b\u0430\u0441\u0441', '\u042d\u043b\u0438\u0442-\u043a\u043b\u0430\u0441\u0441', '\u0411\u0438\u0437\u043d\u0435\u0441-\u043a\u043b\u0430\u0441\u0441', '\u042d\u043b\u0438\u0442-\u043a\u043b\u0430\u0441\u0441'],\n    'parking': [True, True, True, True],\n    'type_building': ['\u041a\u0438\u0440\u043f\u0438\u0447\u043d\u044b\u0439', '\u0422\u0430\u0443\u043d\u0445\u0430\u0443\u0441', '\u041a\u0438\u0440\u043f\u0438\u0447-\u043c\u043e\u043d\u043e\u043b\u0438\u0442', '\u0422\u0430\u0443\u043d\u0445\u0430\u0443\u0441'],\n    'new_flat_count': [50, 4, 200, 3000],\n})\n\ntest_pool = Pool(test_data, cat_features=cat_features)\n\n# make the prediction using the resulting model\npreds = model.predict(test_pool)\nprint(preds)","8d4fe69d":"\u0413\u0435\u043e\u043a\u043e\u0434\u0438\u043d\u0433 \u0430\u0434\u0440\u0435\u0441\u0430 \u0432 \u043a\u043e\u0440\u0440\u0434\u0438\u043d\u0430\u0442\u044b","986d225f":"\u0412\u0441\u043f\u043e\u043c\u043e\u0433\u0430\u0442\u0435\u043b\u044c\u043d\u044b\u0435 \u0444\u0443\u043d\u043a\u0446\u0438\u0438 \u0434\u043b\u044f \u043f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u044f \u043a\u043e\u044d\u0444\u0444\u0438\u0446\u0438\u0435\u043d\u0442\u0430 \u0440\u043e\u0441\u0442\u0430 \u0446\u0435\u043d\u044b","ca130bf0":"\u0424\u043e\u0440\u043c\u0430\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 \u0434\u0430\u043d\u043d\u044b\u0445","f88c6e33":"\u041f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u0435 df \u0441 \u043a\u043e\u044d\u0444\u0438\u0446\u0438\u044d\u043d\u0442\u043e\u043c \u0440\u043e\u0441\u0442\u0430 \u0446\u0435\u043d\u044b \u043a\u0432 \u043c\u0435\u0442\u0440\u0430","8fbc4782":"\u041f\u0435\u0440\u0432\u0438\u0447\u043d\u0430\u044f \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0430 \u0434\u0430\u043d\u043d\u044b\u0445","663f88ce":"\u041f\u0440\u0435\u0434\u0441\u043a\u0430\u0437\u0430\u043d\u0435 \u043d\u0430 \u043e\u0441\u043d\u043e\u0432\u0435 \u0442\u0435\u0441\u0442\u043e\u0432\u044b\u0445 \u0434\u0430\u043d\u043d\u044b\u0445","c9af0aa9":"\u0421\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u043c\u043e\u0434\u0435\u043b\u0438 \u043c\u0430\u0448\u043c\u043d\u043d\u043e\u0433\u043e \u043e\u0431\u0443\u0447\u0435\u043d\u0438\u044f \u043d\u0430 \u043e\u0441\u043d\u043e\u0432\u0435 \u0440\u0435\u0433\u0440\u0435\u0441\u0438\u0438 \u0434\u043b\u044f \u043f\u0440\u0435\u0434\u0441\u043a\u0430\u0437\u0430\u043d\u0438\u044f \u0441\u043a\u043e\u0440\u043e\u0441\u0442\u0438 \u0440\u043e\u0441\u0442\u0430 \u0446\u0435\u043d\u044b \u0437\u0430 \u043a\u0432 \u043c\u0435\u0442\u0440","7f6bd18f":"\u0413\u0438\u0441\u0442\u043e\u0433\u0440\u0430\u043c\u043c\u044b \u0434\u043b\u044f \u0430\u043d\u0430\u043b\u0438\u0437\u0430 \u0434\u0430\u043d\u043d\u044b\u0445","d4187a49":"\u0418\u043c\u043f\u043e\u0440\u0442 \u0437\u0430\u0432\u0438\u0441\u0438\u043c\u043e\u0441\u0442\u0435\u0439"}}