{"cell_type":{"59edcdfa":"code","5ffa2569":"code","5bbaf420":"code","a050a6ea":"code","5ec186b1":"code","218143a8":"code","0e6f7bdd":"code","c0593eed":"code","222569be":"code","5bd2d6d1":"code","d40c8c64":"code","b534e002":"code","61799874":"code","1d2ae20c":"code","49ab5770":"code","f00aea47":"code","84654112":"code","dc1639e7":"code","4c673ecd":"code","4510bc14":"code","53a8ce04":"code","34ddfe7e":"code","8d78a2da":"code","4a9a2e7c":"markdown","b55e7794":"markdown","30b71a48":"markdown","bca6a104":"markdown","c30e09a9":"markdown","9c3677ef":"markdown","ecbddf11":"markdown","4fb868ef":"markdown","e86b32ed":"markdown","823294af":"markdown"},"source":{"59edcdfa":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# From Plotting and Visualization\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport plotly.graph_objs as go\nfrom plotly.offline import iplot\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","5ffa2569":"# Data Loading ...\ndf = pd.read_csv(\"\/kaggle\/input\/pakistans-top-100-tiktokers\/Pakistan Top 100 TikTokers .csv\")\nprint(\"Data Shape: \", df.shape)","5bbaf420":"df","a050a6ea":"# Provided Data Splits and Expand in Columns\ndf = df['UserId,Name,Videos,Fans,Views,Account'].str.split(\",\", expand=True)\ndf","5ec186b1":"# Verfiy the In-Consistency of Selected Data Rows\nprint('In-Consistency of Data in Number of Rows: ',len( df[df[7].isna()] ) )\ndf[df[7].isna()]","218143a8":"# Processing for Data Consistency\ncolName = [7,6,5,4,3]\nfor x in colName:\n    xPrev = x-1\n    xNext = x+1\n    \n    if(x >= 7):\n        df[x] = np.where(df[x].isna(), df[xPrev].values, df[x].values)\n    elif(x < 7):\n        df[x] = np.where(df[x] == df[xNext], df[xPrev].values, df[x].values)\n    if(x == 3):\n        df[x] = np.where(df[x] == df[xPrev], 0, df[x].values)\n        \ndf","0e6f7bdd":"df.info()","c0593eed":"df[2] = df[2].astype(str) + df[3].astype(str)\ndf = df.drop(3, axis=1)","222569be":"#UserId,Name,Videos,Fans,Views,Account\ndf = df.rename(columns = {0 : 'user_id', 1 : 'name', 2 : 'videos', 4 : 'fans', 5 : 'views', 6 : 'country', 7 : 'date'})\ndf","5bd2d6d1":"# Split the UserIDs from Full URL\ndf['user_id'] = df['user_id'].str.split('@', expand = True)[1]\ndf","d40c8c64":"# Remove Unwanted data from dataset\ndf['name'] = df['name'].str.findall(r'[a-zA-Z ]+').apply(lambda x: ''.join(x)).astype(str)\ndf['country'] = df['country'].str.findall(r'[a-zA-Z]+').apply(lambda x: ''.join(x)).astype(str)\ndf['videos'] = df['videos'].str.findall(r'[0-9]+').apply(lambda x: ''.join(x)).astype(int)\ndf['fans'].str.findall(r'[0-9.M]+').apply(lambda x: ''.join(x))\ndf['views'].str.findall(r'[0-9.M]+').apply(lambda x: ''.join(x)).str.strip()\ndf['date'] = df['date'].str.findall(r'[0-9-]+').apply(lambda x: ''.join(x))\n\ndf","b534e002":"df.info()","61799874":"df.isna().sum()","1d2ae20c":"# Units used in views, fans columns\n# K = thousands, M = Millions, B = Billions\n\nunit = {'K':1000, 'M':1000000, 'B':1000000000}\nfor keys, values in unit.items():\n    print(keys, values)","49ab5770":"# Function to replace the K, M & B from data\n# and multiple the remaing data with their respective values\n# for getting actual numbers\n\ndef val_calculate(columnName):\n    df['multiplier'] = \"\"\n    for keys, values in unit.items():\n        for i, iRow in df.iterrows():\n            if(keys in iRow[columnName]):\n                getSplit = iRow[columnName].split(keys)\n                df.at[i, columnName] = getSplit[0]\n                df.at[i, 'multiplier'] = values\n    df[columnName] = df[columnName].astype(float)\n    df['multiplier'] = df['multiplier'].astype(int)\n    df[columnName] = round(df[columnName] * df['multiplier'], 2)   ","f00aea47":"# Call Functions for Calculation\n# Columns Names are [fans and views]\nval_calculate('fans')\nval_calculate('views')\ndf = df.drop('multiplier', axis=1)\ndf","84654112":"df.info()","dc1639e7":"print(\"Max Fans: \", df['fans'].max(), \"\\nMin Fans: \", df['fans'].min())\nprint(\"----------------------------------------------------------------\")\nprint(\"Max Views: \", df['views'].max(), \"\\nMin Views: \", df['views'].min())\nprint(\"----------------------------------------------------------------\")\nprint(\"Max Videos: \", df['videos'].max(), \"\\nMin Videos: \", df['videos'].min())","4c673ecd":"# Selected Features for Plotting Graphs\ncolFeatures = ['videos', 'fans', 'views']\ncolFeatures","4510bc14":"# Function to Plotting bar chart for Top 20 Accounts (userIDs)\ndef snsPlots(xdf, xColName, xTitle, ylbl):\n    fig, ax = plt.subplots(figsize=(12,10))\n    sns.barplot(x=xColName, y='user_id', data=xdf.nlargest(20, xColName))\n    plt.xlabel(ylbl)\n    plt.ylabel('User-IDs')\n    plt.title(xTitle)\n    plt.show()","53a8ce04":"data = df.copy() # Copy the Dataset\nfor x in colFeatures:\n    if (x == 'fans'):\n        getTitle = \"Top Subscribed Accounts\"\n        ylbl = \"Subscibers\"\n    if (x == 'views'):\n        getTitle = \"Top Viewed Accounts\"\n        ylbl = \"Viwers\"\n    if (x == 'videos'):\n        getTitle = \"Top Videos Uploaded Accounts\"\n        ylbl = \"Number of Videos\"\n        \n    data = data.sort_values([x], ascending=False)\n    snsPlots(data, x, getTitle.upper(), ylbl )","34ddfe7e":"# Function to Plotting Other Bar Chart for Top 20 Accounts (userIDs)\ndef plotData(xdf, yColName, xTitle, ylbl):\n    figKill = [go.Bar(y = xdf[yColName].head(20),\n                      x = xdf['user_id'],\n                      text = xdf[yColName],\n                      textposition = 'outside',\n                      width = [0.7, 0.7],\n                      marker = dict(color = 'cornflowerblue', #'lightblue',\n                                    line_color = 'black',\n                                    line_width = 1.5))]\n    \n    layout = go.Layout(title= xTitle,\n                       xaxis = dict(title = 'User-IDs'),\n                       yaxis = dict(title = ylbl),\n                       width = 1100,\n                       height = 600,\n                       template = 'plotly_white')\n\n    myfig = go.Figure(data = figKill, layout = layout)\n    \n    return myfig","8d78a2da":"xdata = df.copy() # Copy the Dataset\nfor y in colFeatures:\n    if (y == 'fans'):\n        getTitle = \"Top 20 Subscribed Accounts\"\n        ylbl = \"Subscibers\"\n    if (y == 'views'):\n        getTitle = \"Top 20 Viewed Accounts\"\n        ylbl = \"Viwers\"\n    if (y == 'videos'):\n        getTitle = \"Top 20 Videos Uploaded Accounts\"\n        ylbl = \"Number of Videos\"\n        \n    xdata = xdata.sort_values([y], ascending=False)\n    plotfig = plotData(xdata, y, getTitle.upper(), ylbl )\n    iplot(plotfig)","4a9a2e7c":"### **Data Loading ...**","b55e7794":"##### **Clearup Data from Special\/unwanted Characters**","30b71a48":"### **Thanks for your time to visit. Please upvote and comments**\n* Clean and make consistency of the dataset\n* Analyze top 20 tiktioker with respect of following features\n1. Most Videos Uploader\n2. Most Followers (Fans)\n3. Most Viewers (Views)\n* please do not forget to leave an upvote and comments ....","bca6a104":"### **Data Explorations and Cleaning**","c30e09a9":"##### **Follwing will make Data Consistence**","9c3677ef":"# **Visualization**","ecbddf11":"##### **Concatination of Column-#[2 & 3] and Save Result in Column-# 2**","4fb868ef":"##### **Rename the Columns Name and Verify Dataset**","e86b32ed":"##### **Split the UserID from Full URL**","823294af":"#### **Remove\/Replace the Units with their values**"}}