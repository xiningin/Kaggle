{"cell_type":{"62f51e51":"code","3630210e":"code","3195f028":"code","d6f5ed42":"code","b6e087d1":"code","950eda79":"code","6a281f5b":"code","9684518d":"code","2c04202b":"code","becfa678":"code","87007343":"code","8f385096":"code","5f8c570f":"code","8fd75315":"code","ca150f0a":"code","f93f21af":"code","c440a66a":"code","c0f77e6a":"code","e2db2283":"code","754c0aee":"code","d6b4449d":"code","70294505":"code","c8493f6f":"code","7a79b633":"code","09d6a796":"code","af9c8fdb":"code","fcc9f630":"code","8ddfcde6":"code","6f32e1b8":"code","bd84a7b6":"code","f119b2a7":"code","a6f03040":"code","f8aea5a2":"code","e0293dbc":"code","bd77227a":"code","2f49c257":"code","f880dc63":"code","2686a22d":"code","805fa0ea":"code","4a24546d":"code","45952da1":"code","2f0c43f6":"code","250c6e9d":"code","f6b51f32":"code","3173e5f4":"code","968f9a56":"code","e15f7ec8":"code","1c83018d":"code","99ca7071":"code","4b04cc9a":"code","7c52bb81":"code","82f38462":"code","bae107f0":"code","3b8b625d":"code","75bafb30":"code","ba0436f6":"code","e3a9cd43":"code","3b87bca7":"code","f903298d":"code","e7dd45a6":"code","24134c34":"code","730718d9":"code","263089ce":"code","5bbb8ba9":"code","e8cdefed":"code","20c049ba":"code","e0198732":"code","4c104665":"code","a03a0180":"code","35986df5":"code","db355a9f":"code","2d33bcbf":"code","05280e05":"code","26874fef":"code","e7d2046d":"code","40208239":"code","f1d1cce3":"code","4d894dc6":"code","500bbe2b":"code","0414469c":"code","962bfcb7":"code","b058af79":"code","000de6f9":"code","2b7ea6a1":"code","cec0e7ae":"code","90d89239":"code","d53264ad":"code","57e4ca2e":"code","0ba57175":"code","01f453aa":"code","c7faa9d1":"code","db447df9":"code","b3f97df1":"code","82614d19":"code","c499d67e":"code","33e75a41":"code","8b0bcc45":"code","ff9cd713":"code","e2d98567":"code","d25bd3f0":"code","908fa61b":"code","88a0b031":"code","4890d7a9":"code","51d48c30":"markdown","b9418767":"markdown","452296cd":"markdown"},"source":{"62f51e51":"import pandas as pd\nfrom pandas import Series, DataFrame\nimport numpy as np\nimport matplotlib.pyplot as plt\n%matplotlib inline","3630210e":"data=pd.read_excel(\"..\/input\/Student.xlsx\")","3195f028":"data.head()","d6f5ed42":"pd.set_option('display.max_columns', None)","b6e087d1":"data.isna().sum()","950eda79":"# %age of missing values\n((data.isnull().sum()\/data.shape[0])*100).round(2)","6a281f5b":"#Student Background\ndata['STDNT_BACKGROUND'].unique()","9684518d":"data['STDNT_MAJOR'].unique()","2c04202b":"data['STDNT_MINOR'].unique()","becfa678":"data['STDNT_TEST_ENTRANCE_COMB'].describe()","87007343":"data['STDNT_TEST_ENTRANCE_COMB'].hist(bins=25,color='red')\nplt.title(\"Student_Entrance_Combination\",size=20, color='red')","8f385096":"data.boxplot(column='STDNT_TEST_ENTRANCE_COMB')","5f8c570f":"data['STDNT_TEST_ENTRANCE_COMB'].mode()","8fd75315":"#Missing values are replaced by mode value, as it is normally distributed\ndata['STDNT_TEST_ENTRANCE_COMB']=data['STDNT_TEST_ENTRANCE_COMB'].fillna(950.0)","ca150f0a":"data['FIRST_TERM'].value_counts()","f93f21af":"data['SECOND_TERM'].value_counts()","c440a66a":"data['FIRST_TERM']=data['FIRST_TERM'].replace({200508:2005, 200608:2006, 200708:2007, 200808:2008, 200908:2009, 201008:2010})","c0f77e6a":"data['SECOND_TERM']=data['SECOND_TERM'].replace({200602:2006, 200702:2007, 200802:2008, 200902:2009, 201002:2010, 201102:2011})","e2db2283":"data['HOUSING_STS'].unique()","754c0aee":"data['RETURNED_2ND_YR'].value_counts()","d6b4449d":"data['DISTANCE_FROM_HOME'].describe()","70294505":"data['DISTANCE_FROM_HOME'].isnull().sum()","c8493f6f":"#Replacing missing values for DISTANCE_FROM_HOME by grouping HIGH_SCHL_NAME\ndata['DISTANCE_FROM_HOME'] = data['DISTANCE_FROM_HOME'].fillna(data.groupby('HIGH_SCHL_NAME')['DISTANCE_FROM_HOME'].transform('mean'))","7a79b633":"#Still 2 rows contain NaN values, replacing them by total mean\ndata['DISTANCE_FROM_HOME'] = data['DISTANCE_FROM_HOME'].fillna(data['DISTANCE_FROM_HOME'].mean())","09d6a796":"data['HIGH_SCHL_GPA'].isnull().sum()","af9c8fdb":"data.boxplot(column='HIGH_SCHL_GPA')","fcc9f630":"data['HIGH_SCHL_GPA'].describe()","8ddfcde6":"#Replacing HIGH_SCHL_GPA with mean values\ndata['HIGH_SCHL_GPA']=data['HIGH_SCHL_GPA'].fillna(data['HIGH_SCHL_GPA'].mean())","6f32e1b8":"#HIGH_SCHL_NAME contains 1 row with NaN value, hence removing the record\ndata[data['HIGH_SCHL_NAME'].isnull()]","bd84a7b6":"data = data[pd.notnull(data['HIGH_SCHL_NAME'])]","f119b2a7":"data['FATHER_HI_EDU_CD'].value_counts()","a6f03040":"data['MOTHER_HI_EDU_CD'].value_counts()","f8aea5a2":"data['FATHER_HI_EDU_DESC'].value_counts(dropna=False)","e0293dbc":"data['MOTHER_HI_EDU_DESC'].value_counts()","bd77227a":"data['FATHER_HI_EDU_CD'].isnull().sum()","2f49c257":"data['MOTHER_HI_EDU_CD'].isnull().sum()","f880dc63":"#Replacing all of them with a new value 0.0 as they dont provide any info\ndata['FATHER_HI_EDU_CD']=data['FATHER_HI_EDU_CD'].fillna(0.0)\ndata['MOTHER_HI_EDU_CD']=data['MOTHER_HI_EDU_CD'].fillna(0.0)","2686a22d":"data['DEGREE_GROUP_CD'].value_counts()","805fa0ea":"data['DEGREE_GROUP_DESC'].value_counts()","4a24546d":"data['FIRST_TERM_PERF']=data['FIRST_TERM_EARNED_HRS']\/data['FIRST_TERM_ATTEMPT_HRS']\ndata['SECOND_TERM_PERF']=data['SECOND_TERM_EARNED_HRS']\/data['SECOND_TERM_ATTEMPT_HRS']","45952da1":"data['FIRST_TERM_PERF'].describe()","2f0c43f6":"data['SECOND_TERM_PERF'].describe()","250c6e9d":"data['FIRST_TERM_PERF'].isnull().sum()","f6b51f32":"data['SECOND_TERM_PERF'].isnull().sum()","3173e5f4":"data['SECOND_TERM_PERF'].hist(bins=15,color='red')\nplt.title(\"Second_term Preferred\",size=20, color='red')","968f9a56":"data[\"SECOND_TERM_PERF\"].mode()","e15f7ec8":"#Substituting NaN with mode value\ndata['SECOND_TERM_PERF']=data['SECOND_TERM_PERF'].fillna(1.0)","1c83018d":"#Substituting values that exceeds 1.0 with 1.0\ndata['FIRST_TERM_PERF'] = data['FIRST_TERM_PERF'].apply(lambda x: 1.0 if x > 1.0 else x)\ndata['SECOND_TERM_PERF'] = data['SECOND_TERM_PERF'].apply(lambda x: 1.0 if x > 1.0 else x)","99ca7071":"#It is in numeric and all the values seems to be fine\ndata['GROSS_FIN_NEED'].describe()","4b04cc9a":"#It is in numeric and all the values seems to be fine\ndata['COST_OF_ATTEND'].describe()","7c52bb81":"#It is in numeric and all the values seems to be fine\ndata['EST_FAM_CONTRIBUTION'].describe()","82f38462":"data['UNMET_NEED'].describe()","bae107f0":"#As financial needs cannot be in negative, hence imputing those to 0\ndata['UNMET_NEED'] = data['UNMET_NEED'].apply(lambda x: 0.0 if x <0 else x)","3b8b625d":"#Deriving DV from RETURNED_2ND_YR column\ndata['RETURNED_2ND_YR'].value_counts()","75bafb30":"data['STDNT_ATT']=data['RETURNED_2ND_YR'].map(lambda x:1 if x==0 else 0)","ba0436f6":"data['CORE_COURSE_GRADE_1_F'].unique()","e3a9cd43":"data[['CORE_COURSE_GRADE_2_F','CORE_COURSE_GRADE_3_F','CORE_COURSE_GRADE_1_S','CORE_COURSE_GRADE_2_S','CORE_COURSE_GRADE_3_S']]=data[['CORE_COURSE_GRADE_2_F','CORE_COURSE_GRADE_3_F','CORE_COURSE_GRADE_1_S','CORE_COURSE_GRADE_2_S','CORE_COURSE_GRADE_3_S']].fillna(value=\"NG\")","3b87bca7":"data[['CORE_COURSE_NAME_2_F','CORE_COURSE_NAME_3_F','CORE_COURSE_NAME_1_S','CORE_COURSE_NAME_2_S','CORE_COURSE_NAME_3_S']]=data[['CORE_COURSE_NAME_2_F','CORE_COURSE_NAME_3_F','CORE_COURSE_NAME_1_S','CORE_COURSE_NAME_2_S','CORE_COURSE_NAME_3_S']].fillna(value=\"NC\")","f903298d":"data['CORE_COURSE_NAME_1_F']=data['CORE_COURSE_NAME_1_F'].str.slice(0,4)\ndata['CORE_COURSE_NAME_2_F']=data['CORE_COURSE_NAME_2_F'].str.slice(0,4)\ndata['CORE_COURSE_NAME_3_F']=data['CORE_COURSE_NAME_3_F'].str.slice(0,4)\n\ndata['CORE_COURSE_NAME_1_S']=data['CORE_COURSE_NAME_1_S'].str.slice(0,4)\ndata['CORE_COURSE_NAME_2_S']=data['CORE_COURSE_NAME_2_S'].str.slice(0,4)\ndata['CORE_COURSE_NAME_3_S']=data['CORE_COURSE_NAME_3_S'].str.slice(0,4)","e7dd45a6":"data.describe()","24134c34":"#It is already in numeric, hence not converting it\n#data['UNMET_NEED']=pd.to_numeric(data['UNMET_NEED'],errors='coerce')","730718d9":"#Changeing to categorical variable\ndata['FIRST_TERM']=pd.Categorical(data['FIRST_TERM'])\ndata['SECOND_TERM']=pd.Categorical(data['SECOND_TERM'])\ndata['FATHER_HI_EDU_CD']=pd.Categorical(data['FATHER_HI_EDU_CD'])\ndata['MOTHER_HI_EDU_CD']=pd.Categorical(data['MOTHER_HI_EDU_CD'])\ndata['STDNT_ATT']=pd.Categorical(data['STDNT_ATT'])","263089ce":"X=data.drop(['STDNT_ATT','STUDENT IDENTIFIER','CORE_COURSE_NAME_4_F','CORE_COURSE_GRADE_4_F',\n             'CORE_COURSE_NAME_5_F','CORE_COURSE_GRADE_5_F','CORE_COURSE_NAME_6_F','CORE_COURSE_GRADE_6_F',\n             'CORE_COURSE_NAME_4_S','CORE_COURSE_GRADE_4_S','CORE_COURSE_GRADE_5_S','CORE_COURSE_NAME_5_S',\n             'CORE_COURSE_GRADE_6_S','CORE_COURSE_NAME_6_S','RETURNED_2ND_YR','FIRST_TERM_ATTEMPT_HRS',\n             'FIRST_TERM_EARNED_HRS','SECOND_TERM_ATTEMPT_HRS','SECOND_TERM_EARNED_HRS','STDNT_TEST_ENTRANCE1',\n             'STDNT_TEST_ENTRANCE2','FATHER_HI_EDU_CD','MOTHER_HI_EDU_CD','DEGREE_GROUP_CD'],axis=1)","5bbb8ba9":"y=data['STDNT_ATT']","e8cdefed":"X=pd.get_dummies(X)","20c049ba":"X.head()","e0198732":"import sklearn.model_selection as model_selection\nX_train,X_test, y_train, y_test=model_selection.train_test_split(X,y, test_size=0.3, random_state=400)","4c104665":"from sklearn.ensemble import RandomForestClassifier","a03a0180":"clf=RandomForestClassifier(n_estimators=100,oob_score=True,n_jobs=-1,random_state=200)","35986df5":"clf.fit(X_train,y_train)","db355a9f":"clf.oob_score_","2d33bcbf":"for w in range(30,500,25):\n    clf=RandomForestClassifier(n_estimators=w,oob_score=True,n_jobs=-1,random_state=200)\n    clf.fit(X_train,y_train)\n    oob=clf.oob_score_\n    print('For n_estimators = '+str(w))\n    print('OOB score is '+str(oob))\n    print('************************')","05280e05":"for w in range(170,200,2):\n    clf=RandomForestClassifier(n_estimators=w,oob_score=True,n_jobs=-1,random_state=200)\n    clf.fit(X_train,y_train)\n    oob=clf.oob_score_\n    print('For n_estimators = '+str(w))\n    print('OOB score is '+str(oob))\n    print('************************')","26874fef":"#Taking n_estimators as 174\nclf=RandomForestClassifier(n_estimators=174,oob_score=True,n_jobs=-1,random_state=200)","e7d2046d":"clf.fit(X_train,y_train)","40208239":"clf.oob_score_","f1d1cce3":"clf.feature_importances_","4d894dc6":"imp_feat=pd.Series(clf.feature_importances_,index=X.columns.tolist())","500bbe2b":"imp_feat.sort_values(ascending=False).head(30)","0414469c":"imp_feat.sort_values(ascending=False).head(10).plot(kind='bar')","962bfcb7":"import sklearn.metrics as metrics\nmod2=clf.predict(X_test)","b058af79":"clf.score(X_test,y_test)","000de6f9":"metrics.accuracy_score(y_test, clf.predict(X_test))","2b7ea6a1":"from sklearn.ensemble import GradientBoostingClassifier","cec0e7ae":"gbc=GradientBoostingClassifier(n_estimators=40,random_state=200, max_depth=4)\ngbc.fit(X_train,y_train)","90d89239":"#Getting the n_estimators\nfrom sklearn.model_selection import GridSearchCV\nmod=GridSearchCV(gbc,param_grid={'n_estimators':[40,60,80,100,120,140]})\nmod.fit(X_train,y_train)","d53264ad":"mod.best_estimator_","57e4ca2e":"mod.best_params_","0ba57175":"#For depth\nmod=GridSearchCV(gbc,param_grid={'max_depth':[2,3,4,5,6,7,8]})","01f453aa":"mod.fit(X_train,y_train)","c7faa9d1":"mod.best_estimator_","db447df9":"model=clf.predict(X_test)","b3f97df1":"metrics.accuracy_score(y_test,model)","82614d19":"#Since, the accuracy score is 82.64%, this is a good model","c499d67e":"from sklearn.linear_model import LogisticRegression\nfrom sklearn.metrics import classification_report\nfrom sklearn.metrics import confusion_matrix,accuracy_score","33e75a41":"logreg = LogisticRegression()","8b0bcc45":"logreg.fit(X_train,y_train)","ff9cd713":"y_pred=logreg.predict(X_test)","e2d98567":"X_test['y_pred']=logreg.predict(X_test)","d25bd3f0":"#Confusion Matrix\nfrom sklearn import metrics\ncnf_matrix = metrics.confusion_matrix(y_test, y_pred)\ncnf_matrix","908fa61b":"#Confusion matrix heatmap\nimport seaborn as sns\nsns.heatmap(pd.DataFrame(metrics.confusion_matrix(y_test,y_pred)))\nplt.show()","88a0b031":"#Confusion Matrix Evaluation Metrics\nprint(\"Accuracy:\",metrics.accuracy_score(y_test, y_pred)) \nprint(\"Precision:\",metrics.precision_score(y_test, y_pred)) \nprint(\"Recall:\",metrics.recall_score(y_test, y_pred))\nprint(metrics.classification_report(y_test,y_pred))","4890d7a9":"#ROC Curve\nfpr, tpr, _ = metrics.roc_curve(y_test,y_pred) \nauc = metrics.roc_auc_score(y_test,y_pred) \nplt.plot(fpr,tpr,label=\"data, auc=\"+str(auc)) \nplt.legend(loc=4) \nplt.show()","51d48c30":"#### Gradient Boosting Classifier","b9418767":"#### Random Forest Classification","452296cd":"#### Logistic Regression"}}