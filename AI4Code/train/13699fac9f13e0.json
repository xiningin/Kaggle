{"cell_type":{"16ac65d3":"code","f0583ac0":"code","74da535c":"code","46181062":"code","8f1342e5":"code","2a3b032d":"code","355fb54d":"code","855289a5":"code","312e6f4d":"markdown"},"source":{"16ac65d3":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","f0583ac0":"import os, time\n\nimport pandas as pd\nimport numpy as np\n\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.decomposition import PCA\nfrom sklearn.feature_selection import VarianceThreshold\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.multioutput import MultiOutputClassifier\nfrom sklearn.metrics import log_loss\nfrom sklearn.model_selection import KFold\nfrom sklearn.ensemble import StackingClassifier\nfrom sklearn.ensemble import AdaBoostClassifier\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn import svm\nfrom sklearn.metrics import make_scorer\n\nimport matplotlib.pyplot as plt\n","74da535c":"data_root = \"\/kaggle\/input\/lish-moa\/\"\ntrain_X = pd.read_csv(data_root + 'train_features.csv')\ntrain_Y = pd.read_csv(data_root + 'train_targets_scored.csv')\ntest_X = pd.read_csv(data_root + 'test_features.csv')\nsample_submission = pd.read_csv(data_root + 'sample_submission.csv')","46181062":"# change cp_time columns to string\ntrain_X['cp_time'] = train_X['cp_time'].apply(lambda x:str(x))\ntest_X['cp_time'] = test_X['cp_time'].apply(lambda x:str(x))\n\n# pd.get_dummies gets one-hot encoding for categorical columns\n# we also the remove the original categorical columns\ntrain_X = train_X.join(pd.get_dummies(train_X[['cp_time','cp_type','cp_dose']])).drop(['cp_time','cp_type','cp_dose'],axis=1)\ntest_X = test_X.join(pd.get_dummies(test_X[['cp_time','cp_type','cp_dose']])).drop(['cp_time','cp_type','cp_dose'],axis=1)\n\n# get the ids from the test\/training data and then remove those columns\ntest_ids = test_X['sig_id']\ntest_X.drop(['sig_id'],axis=1,inplace=True)\n\ntrain_ids = train_X['sig_id']\ntrain_X.drop(['sig_id'],axis=1,inplace=True)\ntrain_Y.drop(['sig_id'],axis=1,inplace=True)\n\nprint(train_X, test_X)\nprint(train_X.columns, test_X.columns)\nprint(train_X.shape, train_Y.shape, test_X.shape)\n","8f1342e5":"# we only scale the real-valued features and not the categorical ones\ng_cols = [col for col in train_X.columns if col.startswith('g-')]\nc_cols = [col for col in train_X.columns if col.startswith('c-')]\ntransform_feature_list = g_cols + c_cols\n\n\ndef scale_and_PCA(pca_num_components, train, test, cols_to_transform, transformed_col_name):\n    # create data by stacking rows from both train and test, for the required columns\n    data = pd.concat([train[cols_to_transform], test[cols_to_transform]], axis=0).reset_index(drop=True)\n    n = train.shape[0]\n    \n    # scale\n    scaler = StandardScaler()\n    scaled_data = scaler.fit_transform(data)\n\n    # PCA\n    pca = PCA(pca_num_components)\n    pca_data = pca.fit_transform(scaled_data)\n\n    train_trans = pca_data[:n, :]\n    test_trans = pca_data[n:, :]\n\n    return train_trans, test_trans\n\n# first scale and PCA on \"g-\" features\n# we use top 10 \"g-\" features after PCA\ntrain_X_g, test_X_g = scale_and_PCA(10, train_X, test_X, g_cols, 'g_pca')\n\n# next, scale and tranform the \"c-\" features\n# we use top 5 \"c-\" features after PCA\ntrain_X_c, test_X_c = scale_and_PCA(5, train_X, test_X, c_cols, 'c_pca')\n\n# concatenate the \"g-\" and \"c-\" columns\ndata_train = np.concatenate((train_X_g, train_X_c), axis=1)\ndata_test = np.concatenate((test_X_g, test_X_c), axis=1)\n\n# now concatenate train and test rows\nn = data_train.shape[0]\ndata = np.concatenate((data_train, data_test), axis=0)\n\n# categorical columns are the last 7 columns of train\/test data (after the preprocessing that we did earlier)\ncat_data = np.concatenate((train_X.iloc[:, -7:].to_numpy(), test_X.iloc[:, -7:].to_numpy()), axis=0)\n\n# add back the 7 categorical columns in front of the real-valued columns\ntransformed_data = np.concatenate((cat_data, data), axis=1)\n\n# seaparate the train\/test data\ntransformed_train_data = transformed_data[:n, :]\ntransformed_test_data = transformed_data[n:, :]\n\nprint(transformed_train_data.shape, transformed_test_data.shape)","2a3b032d":"def average_log_loss (y_true, y_pred):\n    print(y_true.shape, y_pred.shape)\n    num_samples, num_outputs = y_true.shape\n    loss = 0.00\n    for i in range(num_outputs):\n        loss += log_loss(y_true[:, i], y_pred[:, i])\n    loss \/= num_outputs\n    return loss\n\n\nscorer = make_scorer(average_log_loss, greater_is_better=False)\n","355fb54d":"transformed_train_targets = train_Y.values","855289a5":"# create a list of class weights\nclass_weights = []\nfor i in range(transformed_train_targets.shape[1]):\n    class_weights.append({0: 0.4, 1:0.6})\n\nclf = RandomForestClassifier(n_estimators=250, max_depth=10, max_features='log2', class_weight=class_weights)\n\nstart = time.time()\nclf.fit(transformed_train_data, transformed_train_targets)\nstop = time.time()\nprint(\"Time taken to fit StackingClassifier: \", stop-start, \" seconds\")\n\nprobs = clf.predict(transformed_test_data)\n\n# the first index is the probability of output 1 for a feature\nprint(probs, probs.shape)\npreds = np.array(probs) #[:, :, 1]\nsample_submission[sample_submission.columns.to_list()[1:]] = preds\nsample_submission.to_csv('submission.csv',index=False)","312e6f4d":"# **Define the average column-wise log-loss function**"}}