{"cell_type":{"15fb1c85":"code","f7f75378":"code","a926eb42":"code","18663fc5":"code","3882cefe":"code","50da9d31":"code","9e5fd4f1":"code","10ddd4a1":"code","eb462259":"code","9be70245":"code","12107812":"code","adc5ad89":"code","9fd14bd7":"code","c076322e":"code","74e78159":"code","45c02e48":"code","bcd36872":"code","256f9d2d":"code","ad3f5588":"code","26213cc3":"markdown","f52c8e3d":"markdown","d1c09e32":"markdown","3c141df7":"markdown","a6e9a5b7":"markdown","9613e65f":"markdown","75f309b9":"markdown","0551937a":"markdown","5344abe0":"markdown"},"source":{"15fb1c85":"import numpy as np\nimport pandas as pd\nimport cv2\nimport re\nfrom tqdm.notebook import tqdm\nfrom PIL import Image\nimport hashlib\nimport plotly.graph_objects as go\nfrom plotly.subplots import make_subplots\n\nimport matplotlib.pyplot as plt\n%matplotlib inline\n\nimport seaborn as sns\nsns.set()\n\nDIR_INPUT = '..\/Wheat'\nDIR_TRAIN_IMAGES = f'{DIR_INPUT}\/train'","f7f75378":"train_df = pd.read_csv(f'{DIR_INPUT}\/train.csv')\ntrain_df.shape","a926eb42":"train_df.head()","18663fc5":"train_df['image_id'].nunique()","3882cefe":"train_df['height'].value_counts(), train_df['width'].value_counts()","50da9d31":"def calculate_hash(im):\n    md5 = hashlib.md5()\n    md5.update(np.array(im).tostring())\n    \n    return md5.hexdigest()\n    \ndef get_image_meta(image_id, image_src, dataset='train'):\n    im = Image.open(image_src)\n    extrema = im.getextrema()\n    \n    meta = {\n        'image_id': image_id,\n        'dataset': dataset,\n        'hash': calculate_hash(im),\n        'r_min': extrema[0][0],\n        'r_max': extrema[0][1],\n        'g_min': extrema[1][0],\n        'g_max': extrema[1][1],\n        'b_min': extrema[2][0],\n        'b_max': extrema[2][1],\n        'height': im.size[0],\n        'width': im.size[1],\n        'format': im.format,\n        'mode': im.mode\n    }\n    return meta","9e5fd4f1":"data = []\n\nfor i, image_id in enumerate(tqdm(train_df['image_id'].unique(), total=train_df['image_id'].unique().shape[0])):\n    data.append(get_image_meta(image_id, DIR_TRAIN_IMAGES + '\/{}.jpg'.format(image_id)))","10ddd4a1":"meta_df = pd.DataFrame(data)\nmeta_df.head()","eb462259":"duplicates = meta_df.groupby(by='hash')[['image_id']].count().reset_index()\nduplicates = duplicates[duplicates['image_id'] > 1]\nduplicates.reset_index(drop=True, inplace=True)\n\nduplicates = duplicates.merge(meta_df[['image_id', 'hash']], on='hash')\n\nduplicates.head(20)","9be70245":"train_df['x'] = -1\ntrain_df['y'] = -1\ntrain_df['w'] = -1\ntrain_df['h'] = -1\n\ndef expand_bbox(x):\n    r = np.array(re.findall(\"([0-9]+[.]?[0-9]*)\", x))\n    if len(r) == 0:\n        r = [-1, -1, -1, -1]\n    return r\n\ntrain_df[['x', 'y', 'w', 'h']] = np.stack(train_df['bbox'].apply(lambda x: expand_bbox(x)))\ntrain_df.drop(columns=['bbox'], inplace=True)\ntrain_df['x'] = train_df['x'].astype(np.float)\ntrain_df['y'] = train_df['y'].astype(np.float)\ntrain_df['w'] = train_df['w'].astype(np.float)\ntrain_df['h'] = train_df['h'].astype(np.float)","12107812":"train_df","adc5ad89":"train_df.groupby(by='image_id')['source'].count().agg(['min', 'max', 'mean'])","9fd14bd7":"source = train_df['source'].value_counts()\nsource","c076322e":"fig = go.Figure(data=[go.Pie(labels=source.index, values=source.values)])\n\nfig.update_layout(title='Source distribution')\nfig.show()","74e78159":"def show_images(image_ids):\n    \n    col = 5\n    row = min(len(image_ids) \/\/ col, 5)\n    \n    fig, ax = plt.subplots(row, col, figsize=(16, 8))\n    ax = ax.flatten()\n\n    for i, image_id in enumerate(image_ids):\n        image = cv2.imread(DIR_TRAIN_IMAGES + '\/{}.jpg'.format(image_id))\n        image = cv2.cvtColor(image, cv2.COLOR_BGR2RGB)\n\n        ax[i].set_axis_off()\n        ax[i].imshow(image)\n        ax[i].set_title(image_id)\n        \ndef show_image_bb(image_data):\n    \n    fig, ax = plt.subplots(1, 1, figsize=(16, 8))\n    \n    image = cv2.imread(DIR_TRAIN_IMAGES + '\/{}.jpg'.format(image_data.iloc[0]['image_id']))\n    image = cv2.cvtColor(image, cv2.COLOR_BGR2RGB)\n\n    for i, row in image_data.iterrows():\n        \n        cv2.rectangle(image,\n                      (int(row['x']), int(row['y'])),\n                      (int(row['x']) + int(row['w']), int(row['y']) + int(row['h'])),\n                      (220, 0, 0), 3)\n\n    ax.set_axis_off()\n    ax.imshow(image)\n    ax.set_title(image_id)","45c02e48":"show_images(train_df.sample(n=15)['image_id'].values)","bcd36872":"show_image_bb(train_df[train_df['image_id'] == '5e0747034'])","256f9d2d":"show_image_bb(train_df[train_df['image_id'] == '5b13b8160'])","ad3f5588":"show_image_bb(train_df[train_df['image_id'] == '1f2b1a759'])","26213cc3":"![image.png](attachment:image.png)","f52c8e3d":"\uc608\ub97c \ub4e4\uc5b4 ((1, 255), (0, 255), (0, 255))\ub97c \ubcf4\uba74\n* r\uc758 \uac12 \ubc94\uc704\ub294 1~255\n* g\uc758 \uac12 \ubc94\uc704\ub294 0~255\n* b\uc758 \uac12 \ubc94\uc704\ub294 0~255\ub85c \ud45c\ud604\ub428","d1c09e32":"* \uc911\ubcf5\ub418\ub294 \uc774\ubbf8\uc9c0 \uc5c6\uc74c","3c141df7":"\ub370\uc774\ud130\uc758 \ucd9c\ucc98\ub97c \uc2dc\uac01\ud654","a6e9a5b7":"bbox \ucd5c\uc18c \uac1c\uc218 1, \ucd5c\ub300 \uac1c\uc218 116, \ud3c9\uade0 43","9613e65f":"\uac01 train \uc774\ubbf8\uc9c0\uc758 RGB \ucd5c\uc19f\uac12\uacfc \ucd5c\ub313\uac12","75f309b9":"![ee.PNG](attachment:ee.PNG)","0551937a":"https:\/\/www.kaggle.com\/pestipeti\/global-wheat-detection-eda","5344abe0":"<\uc815\ub9ac>\n* extrema\ub97c \uc774\uc6a9\ud558\uc5ec \ubc00\uc758 \uc774\ubbf8\uc9c0\ub97c rgb\uc758 \ucd5c\uc19f\uac12\uacfc \ucd5c\ub313\uac12\uc73c\ub85c \ud45c\ud604 \uac00\ub2a5\ud568\uc744 \uc54c \uc218 \uc788\uc5c8\uc74c\n* \uc544\ub798\ub294 \ud568\uc218 extrema\ub97c \uc0ac\uc6a9\ud55c \uc608\uc2dc\ub85c ((73, 255), (0, 255), (0, 255))\ub97c rgb\uc778 (73, 0, 0)\uc73c\ub85c \ucc0d\uc5b4\ubcf4\uba74 \uc67c\ucabd \uadf8\ub9bc\uc5d0\uc11c r\uc758 \uac00\uc7a5 \uc5b4\ub450\uc6b4 \ubd80\ubd84\uc784\n* \uc774\ub97c \ud1b5\ud574 r\uc758 \uac00\uc7a5 \ub0ae\uc740 \uac12\uc740 73\uc774\uace0 r\uc758 \ubc94\uc704\ub294 73\ubd80\ud130 255\ub77c\ub294 \uac83\uc744 \uc54c\uac8c \ub428"}}