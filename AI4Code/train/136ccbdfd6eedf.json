{"cell_type":{"f03b1ad4":"code","13728803":"code","21b56333":"code","43c39741":"code","ec2c50e0":"code","bc1ea5ff":"code","6dde8299":"code","829b70ce":"code","78eb98b5":"code","528b17de":"code","ed5d06ae":"code","21db9939":"code","2c0cb6cb":"code","081a1052":"code","8f0afa8b":"code","f8ec110f":"code","3f7156bb":"code","f041de4f":"code","c924d5f3":"code","04513dca":"code","bc942be0":"code","1beacda7":"code","9730e924":"code","4ba1e45c":"code","ca1886d6":"markdown","45038a3a":"markdown","91d69c3a":"markdown","3dc9615f":"markdown","2f46f2f8":"markdown","1117dd6b":"markdown","0a446b11":"markdown","97bd7eb8":"markdown","473ca8f7":"markdown","7be99a19":"markdown","46e4cc83":"markdown","cab84644":"markdown","40fd398a":"markdown","0ee8c05b":"markdown"},"source":{"f03b1ad4":"import numpy as np","13728803":"ages = [10,50,21,78,85,98,52,45,36,25,11,8,5,79]\nprint(ages)\ntype(ages) #just to show you that this is a list :)","21b56333":"ages_array = np.array(ages)\nprint(ages_array)\ntype(ages_array) #just to show you that this is now a numpy array!","43c39741":"size = ages_array.size\nshape = ages_array.shape\nprint(f'Size = {size} \\nType of the above output = {type(size)} \\nShape = {shape} \\nType of the above output = {type(shape)} ')","ec2c50e0":"# size can also be found with 'len' method which gives output in integer\nsize_len = len(ages_array)\nprint(size_len)","bc1ea5ff":"ages1 = [10,50,21,78,85,98,52,45,36,25,11,8,5,79]\nages2 = [10,50,21,78,85,98,52,45,36,25,11,8,5,79]\nboth = ages1 + ages2\nboth = np.array(both) \nreshaped = both.reshape((2,14))\nprint(reshaped) # now the array is 2D with each dimension having 14 elements","6dde8299":"# indexing in the normal numpy array\nprint(f'The normal numpy array we created = {ages_array}')\nprint(f'Normal numpy array 5th index = {ages_array[4]}')","829b70ce":"# indexing in the reshaped numpy array\nprint(f'The normal numpy array we created = {reshaped}')\nprint(f'Normal numpy array 5th index = {reshaped[1,4]}')","78eb98b5":"# general form of the syntax : arr[start:stop:step]\nprint(f'The array we are working on : \\n{reshaped}')\nprint(f'The first three elements from the first row = {reshaped[0,0:3]}')\n# alternative of the above code\nprint(f'The first three elements from the first row [alternative] = {reshaped[0,:3]}') #since we are starting from index 0 itself, we can omit the 0\nprint(f'The entire fourth column of the 2D array = {reshaped[:,3]}')","528b17de":"test = reshaped\nprint(f'The array initially: \\n{test}')\nprint(f'Initial Value of 1st array 4th column {test[0,3]}')\ntest[0,3] = 1234\nprint(f'New Value of 1st array 4th column {test[0,3]}')\nprint(f'The array now: \\n{test}')","ed5d06ae":"print(f'The array initially: \\n{test}')\n#here is the fun part!\ntest[0,:] = 5678\nprint(f'The array now: \\n{test}')","21db9939":"print(f'The array initially: \\n{test}')\ntest[:5, :5] = 1010\nprint(f'The array now: \\n{test}')","2c0cb6cb":"#Join a sequence of arrays along a new axis.\na = np.array([1, 2, 3])\nb = np.array([2, 3, 4])\nprint(f'Basic Stacking : \\n {np.stack((a, b))}')\nprint(f'Axis = -1 : \\n {np.stack((a, b), axis = -1)}')\nprint(f'Axis = -2 : \\n {np.stack((a, b), axis = -2)}')\nprint(f'Axis = -3 : \\nGives error : axis -3 is out of bounds for array of dimension 2')","081a1052":"#hstack = Stack arrays in sequence horizontally (column wise).\na = np.array((1,2,3))\nb = np.array((2,3,4))\nprint (f'hstack for arrays {a} and {b} is \\n{np.hstack((a,b))}')\na = np.array([[1],[2],[3]])\nb = np.array([[2],[3],[4]])\nprint (f'\\nhstack for arrays {a} and {b} is \\n{np.hstack((a,b))}')","8f0afa8b":"#vstack Stack arrays in sequence vertically (row wise)\na = np.array((1,2,3))\nb = np.array((2,3,4))\nprint (f'vstack for arrays {a} and {b} is \\n{np.vstack((a,b))}')\na = np.array([[1],[2],[3]])\nb = np.array([[2],[3],[4]])\nprint (f'\\nvstack for arrays {a} and {b} is \\n{np.vstack((a,b))}')","f8ec110f":"# dstack Stack arrays in sequence depth wise (along third axis).\na = np.array((1,2,3))\nb = np.array((2,3,4))\nprint (f'dstack for arrays {a} and {b} is \\n{np.dstack((a,b))}')\na = np.array([[1],[2],[3]])\nb = np.array([[2],[3],[4]])\nprint (f'\\ndstack for arrays {a} and {b} is \\n{np.dstack((a,b))}')","3f7156bb":"#Join a sequence of arrays along an existing axis.\na = np.array([[1, 2], [3, 4]])\nb = np.array([[5, 6]])\nc = np.concatenate((a, b), axis=0)\nprint(f'Array a = {a}\\nArray b = {b}\\nConcatenated Array c = \\n{c}')","f041de4f":"# Same as above, this time axis = none\na = np.array([[1, 2], [3, 4]])\nb = np.array([[5, 6]])\nc = np.concatenate((a, b), axis=None)\nprint(f'Array a = {a}\\nArray b = {b}\\nConcatenated Array c = \\n{c}')","c924d5f3":"# This one looks cool! axis = 1\na = np.array([[1, 2], [3, 4]])\nb = np.array([[5, 6]])\nc = np.concatenate((a, b.T), axis=1)\nprint(f'Array a = {a}\\nArray b = {b}\\nConcatenated Array c = \\n{c}')","04513dca":"a = np.array((1,2,3))\nprint (f'Adding 2 to each array element : {a+2}')\nprint (f'multipying each array element with 2 : {a*2}')\n# and they lived happily ever after (I mean we can go on like this!)","bc942be0":"# sum of all elements in the array\na = np.array((1,2,3))\nprint(f'Sum of all elements in the array {a} is {a.sum()}')","1beacda7":"# minimum vaule\na = np.array((1,2,3))\nprint(f'Minimum of all elements in the array {a} is {a.min()}')","9730e924":"# maximum vaule\na = np.array((1,2,3))\nprint(f'Maximum of all elements in the array {a} is {a.max()}')","4ba1e45c":"# mean of all elements in an array\na = np.array((1,2,3,2,4,70005,6))\nprint(f'Mean of all elements in the array {a} is {a.mean()}')","ca1886d6":"**Stacking arrays** <br>\n[documentation](https:\/\/numpy.org\/doc\/stable\/reference\/generated\/numpy.hstack.html)","45038a3a":"**Assigning values to subset to the array**","91d69c3a":"**Assign single value to one whole array**","3dc9615f":"**Carrying out mathematical operations using numpy**","2f46f2f8":"**let us create a normal list of numbers**","1117dd6b":"**Value assignment** <br>\n[click here for more](https:\/\/numpy.org\/doc\/stable\/reference\/arrays.indexing.html)","0a446b11":"**Reshaping the array**","97bd7eb8":"**chnaging the list to numpy array - the fun begins!**","473ca8f7":"**Concatenate arrays**<br>\n[documentation](https:\/\/numpy.org\/doc\/stable\/reference\/generated\/numpy.concatenate.html#numpy.concatenate)","7be99a19":"**Slicing numpy arrays**\n","46e4cc83":"**Indexing in numpy arrays** <br>\n[Check out this website!](https:\/\/numpy.org\/doc\/stable\/reference\/arrays.indexing.html)\n","cab84644":"# Working with numpy","40fd398a":"**ndarray means n dimensional array.** <br>\n**we can see the size and shape of the array too.**<br>\n**size = number of elements (ages in this case)** <br>\n**shape = dimension of the array** <br>\n\n*once an array is created in numpy, its size cannot be changed* ","0ee8c05b":"**First things first, we need to import the numpy library.**"}}