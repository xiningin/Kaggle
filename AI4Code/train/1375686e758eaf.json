{"cell_type":{"0b02c7b2":"code","c6405984":"code","805613e5":"code","e0ac21f9":"code","854959dc":"code","67a94a12":"code","dcea0a40":"code","2200a632":"code","b6dd9bfb":"code","3d3700fd":"code","800398d3":"code","868e916e":"code","6e364ff2":"code","ec034259":"code","e30650fb":"code","f59840b6":"code","a8c656ca":"code","9e407a23":"code","0abca1a1":"markdown","bdb74372":"markdown","596e4f13":"markdown","f7adfcd4":"markdown","ef9051aa":"markdown","7d11be65":"markdown","a1ef07eb":"markdown","6620cd0d":"markdown","435da966":"markdown","a21e4f6e":"markdown","ecf33abc":"markdown","dd3ee588":"markdown","8201315f":"markdown","c4a4a89b":"markdown","39dde059":"markdown","5fbcfecc":"markdown","2a42dff9":"markdown","25797399":"markdown","2ef4afee":"markdown"},"source":{"0b02c7b2":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","c6405984":"# Python version\nimport sys\nprint('Python: {}'.format(sys.version))\n# scipy\nimport scipy\nprint('scipy: {}'.format(scipy.__version__))\n# numpy\nimport numpy\nprint('numpy: {}'.format(numpy.__version__))\n# matplotlib\nimport matplotlib\nprint('matplotlib: {}'.format(matplotlib.__version__))\n# pandas\nimport pandas\nprint('pandas: {}'.format(pandas.__version__))\n# scikit-learn\nimport sklearn\nprint('sklearn: {}'.format(sklearn.__version__))","805613e5":"# Load libraries\nfrom pandas import read_csv\nfrom pandas.plotting import scatter_matrix\nfrom matplotlib import pyplot\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.model_selection import cross_val_score\nfrom sklearn.model_selection import StratifiedKFold\nfrom sklearn.metrics import classification_report\nfrom sklearn.metrics import confusion_matrix\nfrom sklearn.metrics import accuracy_score\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.discriminant_analysis import LinearDiscriminantAnalysis\nfrom sklearn.naive_bayes import GaussianNB\nfrom sklearn.svm import SVC","e0ac21f9":"dataset = pd.read_csv('..\/input\/heart-failure-clinical-data\/heart_failure_clinical_records_dataset.csv')","854959dc":"print(dataset.shape)           #we will see 299 instances and 13 attributes","67a94a12":"print(dataset.head(20))              #we will see first 20 rows of the data","dcea0a40":"print(dataset.describe())      #This gives summary of each attribute consists of the count, mean, the min and max values as well as some percentiles","2200a632":"print(dataset.groupby('sex').size())","b6dd9bfb":"dataset.isnull().sum()                   #as we have 0 null values we can proceed","3d3700fd":"# box and whisker plots\ndataset.plot(kind='box', subplots=True, layout=(5,5), sharex=False, sharey=False)\npyplot.show()                                                                      #plots of each individual variable.","800398d3":"dataset.hist()\npyplot.show()                                  #we create a histogram of each input variable to get an idea of the distribution","868e916e":"scatter_matrix(dataset)\npyplot.show()                                             #This can be helpful to spot structured relationships between input variables.","6e364ff2":"array = dataset.values\nX = array[:,0:9]\ny = array[:,10]\nX_train, X_validation, Y_train, Y_validation = train_test_split(X, y, test_size=0.20, random_state=1)\nX_train\n","ec034259":"models = []\nmodels.append(('LR', LogisticRegression(solver='liblinear', multi_class='ovr')))\nmodels.append(('LDA', LinearDiscriminantAnalysis()))\nmodels.append(('KNN', KNeighborsClassifier()))\nmodels.append(('CART', DecisionTreeClassifier()))\nmodels.append(('NB', GaussianNB()))\nmodels.append(('SVM', SVC(gamma='auto')))\n","e30650fb":"results = []\nnames = []\nfor name, model in models:\n    kfold = StratifiedKFold(n_splits=5, random_state=1, shuffle=True)\n    cv_results = cross_val_score(model, X_train, Y_train, cv=kfold, scoring='accuracy')\n    results.append(cv_results)\n    names.append(name)\n    print('%s: %f (%f)' % (name, cv_results.mean(), cv_results.std()))","f59840b6":"pyplot.boxplot(results, labels=names)\npyplot.title('Algorithm Comparison')\npyplot.show()","a8c656ca":"# Make predictions on validation dataset\nmodel = SVC(gamma='auto')\nmodel.fit(X_train, Y_train)\npredictions = model.predict(X_validation)","9e407a23":"# Evaluate predictions\nprint(accuracy_score(Y_validation, predictions))\nprint(confusion_matrix(Y_validation, predictions))\nprint(classification_report(Y_validation, predictions))","0abca1a1":"# Histogram","bdb74372":"Finally, the classification report provides a breakdown of each class by precision, recall, f1-score and support showing excellent results","596e4f13":"# Select Best Model","f7adfcd4":"# Create a Validation Dataset","ef9051aa":"# Start phython and Check the versions of libraries","7d11be65":"# Multivariate Plots","a1ef07eb":"# Load Dataset \nheart-failure-clinical-data taken from kaggle ","6620cd0d":"# Import Libraries","435da966":"# Build Models","a21e4f6e":"# Checking for null values","ecf33abc":"# Evaluate Predictions ","dd3ee588":"We can see the accuracy is 0.6 or 60%.","8201315f":"# Statistical Summary","c4a4a89b":"# Peek at the Data","39dde059":"# Make Predictions","5fbcfecc":"# Boxplot","2a42dff9":"# Univariate Plots","25797399":"# Class Distribution","2ef4afee":"# Dimensions of Dataset"}}