{"cell_type":{"b07e302b":"code","aa452cec":"code","6a934d09":"code","fcc01716":"code","b65a3142":"code","3e3c2050":"code","edb229c2":"code","89a514c4":"code","bcf7092a":"code","ad3817b3":"code","9c3ca44c":"code","bb1de7d5":"code","56eefb86":"code","13f911e0":"code","f461b48f":"code","6925672c":"code","16ee5568":"code","ae64f30b":"code","6979c7e6":"code","e1459729":"code","3d724f06":"code","b40ec968":"code","41d6dc3d":"code","280fe73b":"code","df8ff562":"code","2942eaf9":"code","a6cc5ce8":"markdown","0822454a":"markdown","36e87040":"markdown","85b3a1f6":"markdown","3c3e97bb":"markdown","6b0ce177":"markdown","06d5dd56":"markdown"},"source":{"b07e302b":"import matplotlib.pyplot as plt\nimport pandas as pd\nimport numpy as np\nimport seaborn as sns\nimport math\nimport warnings\nwarnings.filterwarnings('ignore') # Hides warning\nwarnings.filterwarnings(\"ignore\", category=DeprecationWarning)\nwarnings.filterwarnings(\"ignore\",category=UserWarning)\nsns.set_style(\"whitegrid\") # Plotting style\nnp.random.seed(42) # seeding random number generator\n\ndf = pd.read_csv('..\/input\/amazon-product-reviews\/amazon.csv')\ndf.head()","aa452cec":"data = df.copy()\ndata.describe()","6a934d09":"data.info()","fcc01716":"data[\"asins\"].unique()","b65a3142":"asins_unique = len(data[\"asins\"].unique())\nprint(\"Number of Unique ASINs: \" + str(asins_unique))","3e3c2050":"data[\"reviews.numHelpful\"].hist(figsize=(20,5))\nplt.show()","edb229c2":"data[\"reviews.id\"].hist( figsize=(20,5))\nplt.show()","89a514c4":"plt.figure(figsize=(20,5))\nax1=sns.countplot(x=\"reviews.rating\", data=data)\nfor p in ax1.patches:\n    ax1.annotate(str(p.get_height()), (p.get_x() * 1.01 , p.get_height() * 1.01))\nplt.show()\n","bcf7092a":"from sklearn.model_selection import StratifiedShuffleSplit\nprint(\"Before : {}\".format(len(data)))\ndataAfter = data.dropna(subset=[\"reviews.rating\"])\n# Removes all NAN in reviews.rating\nprint(\"After  : {}\".format(len(dataAfter)))\ndataAfter[\"reviews.rating\"] = dataAfter[\"reviews.rating\"].astype(int)\n\nsplit = StratifiedShuffleSplit(n_splits=10, test_size=0.2)\nfor train_index, test_index in split.split(dataAfter,\n                                           dataAfter[\"reviews.rating\"]):\n    strat_train = dataAfter.reindex(train_index)\n    strat_test = dataAfter.reindex(test_index)","ad3817b3":"print(len(strat_train))\nprint(len(strat_test))\nround((strat_test[\"reviews.rating\"].value_counts()* 100\/len(strat_test)),2)","9c3ca44c":"reviews = strat_train.copy()\nreviews.head()","bb1de7d5":"len(reviews[\"name\"].unique())","56eefb86":"len(reviews[\"asins\"].unique())","13f911e0":"reviews.info()","f461b48f":"reviews.groupby(\"asins\")[\"name\"].unique()","6925672c":"different_names = reviews[reviews[\"asins\"] ==\n                          \"B00L9EPT8O,B01E6AO69U\"][\"name\"].unique()\nfor name in different_names:\n    print(name)\n","16ee5568":"reviews[reviews[\"asins\"] == \"B00L9EPT8O,B01E6AO69U\"][\"name\"].value_counts()","ae64f30b":"fig = plt.figure(figsize=(16,10))\nax1 = plt.subplot(211)\nax2 = plt.subplot(212, sharex = ax1)\nreviews[\"asins\"].value_counts().plot(kind=\"bar\", ax=ax1, title=\"ASIN Frequency\")\nnp.log10(reviews[\"asins\"].value_counts()).plot(kind=\"bar\", ax=ax2,\n                                               title=\"ASIN Frequency (Log10 Adjusted)\")\nfor p in ax1.patches:\n    ax1.annotate(str(p.get_height()), (p.get_x() * 1.01 , p.get_height() * 1.01))\nfor p in ax2.patches:\n    ax2.annotate(str(round((p.get_height()),2)), (p.get_x() * 1.01 , p.get_height() * 1.01))\nplt.show()","6979c7e6":"reviews[\"reviews.rating\"].mean()","e1459729":"asins_count_ix = reviews[\"asins\"].value_counts().index\nfig = plt.figure(figsize=(16,5))\nax=reviews[\"asins\"].value_counts().plot(kind=\"bar\", title=\"ASIN Frequency\")\nfor p in ax.patches:\n    ax.annotate(str(p.get_height()), (p.get_x() * 1.01 , p.get_height() * 1.01))\nplt.xticks(rotation=90)\nplt.show()","3d724f06":"fig = plt.figure(figsize=(16,5))\nsns.pointplot(x=\"asins\", y=\"reviews.rating\", order=asins_count_ix, data=reviews)\nplt.xticks(rotation=90)\nplt.show()","b40ec968":"def sentiments(rating):\n    if (rating == 5) or (rating == 4):\n        return \"Positive\"\n    elif rating == 3:\n        return \"Neutral\"\n    elif (rating == 2) or (rating == 1):\n        return \"Negative\"\n# Add sentiments to the data\nstrat_train[\"Sentiment\"] = strat_train[\"reviews.rating\"].apply(sentiments)\nstrat_test[\"Sentiment\"] = strat_test[\"reviews.rating\"].apply(sentiments)\nprint(strat_train[\"Sentiment\"][:15])","41d6dc3d":"round((strat_train[\"Sentiment\"].value_counts()*100\/len(strat_train)),2)","280fe73b":"fig = plt.figure(figsize=(16,5))\nax=strat_train[\"Sentiment\"].value_counts().plot(kind=\"bar\", title=\"Train Data Sentimental Data\")\nfor p in ax.patches:\n    ax.annotate(str(p.get_height()), (p.get_x() * 1.01 , p.get_height() * 1.01))\nplt.show()","df8ff562":"round((strat_test[\"Sentiment\"].value_counts()*100\/len(strat_test)),2)","2942eaf9":"fig = plt.figure(figsize=(16,5))\nax=strat_test[\"Sentiment\"].value_counts().plot(kind=\"bar\", title=\"Test Data Sentimental Data\")\nfor p in ax.patches:\n    ax.annotate(str(p.get_height()), (p.get_x() * 1.01 , p.get_height() * 1.01))\nplt.show()","a6cc5ce8":"# Sentiment Analysis","0822454a":"# Entire training dataset average rating","36e87040":"Product reviews are becoming more important with the evolution of traditional brick and mortar retail stores to online shopping.\n\nConsumers are posting reviews directly on product pages in real time. With the vast amount of consumer reviews, this creates an opportunity to see how the market reacts to a specific product.","85b3a1f6":"# Data Exploration","3c3e97bb":"# Visualizing the distributions of numerical variables:","6b0ce177":"# Split the data into Train and Test","06d5dd56":"# Describing the Dataset"}}