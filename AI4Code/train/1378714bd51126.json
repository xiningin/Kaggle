{"cell_type":{"f8ca5035":"code","9e87f58d":"code","2e2d559b":"code","cc4c82f2":"code","a5ff23cd":"code","aaa3c615":"code","158e9dae":"code","379e26f8":"code","322e0807":"code","100a10f1":"code","7eb40676":"code","ef07c1cf":"code","e0c97dcd":"markdown","a340c228":"markdown","ce17d71f":"markdown","e3e10f0a":"markdown","9339095f":"markdown","7334f110":"markdown","1a562803":"markdown","2fbfb2a7":"markdown","f8db4c2b":"markdown","9392a12f":"markdown","6fed6769":"markdown","9351c2af":"markdown"},"source":{"f8ca5035":"\n# importing Libraries:\nimport pandas as pd\nfrom sklearn.model_selection import train_test_split\nimport numpy as np\nfrom sklearn.linear_model import LinearRegression\nfrom sklearn.tree import DecisionTreeRegressor\nfrom sklearn.metrics import mean_squared_error\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nfrom sklearn import tree\nfrom sklearn.ensemble import RandomForestRegressor\n\n","9e87f58d":"# importing dataset:\ndataset = pd.read_csv(\"..\/input\/car-price-prediction\/CarPrice_Assignment.csv\")\n\n# PreProcessing:\nprint(dataset.head())","2e2d559b":"dataset.info()","cc4c82f2":"print(dataset.describe())","a5ff23cd":"#Replacing Qualitative Values with ((Relevant)) Quantitatives:\ndataset = dataset.replace({'two': 2, 'three': 3, 'four': 4, 'five': 5, 'six': 6, 'eight': 8, 'twelve': 12})\ndataset[\"CarName\"] = dataset[\"CarName\"].astype('category').cat.codes\ndataset[\"fueltype\"] = dataset[\"fueltype\"].astype('category').cat.codes\ndataset[\"aspiration\"] = dataset[\"aspiration\"].astype('category').cat.codes\ndataset[\"carbody\"] = dataset[\"carbody\"].astype('category').cat.codes\ndataset[\"drivewheel\"] = dataset[\"drivewheel\"].astype('category').cat.codes\ndataset[\"enginelocation\"] = dataset[\"enginelocation\"].astype('category').cat.codes\ndataset[\"enginetype\"] = dataset[\"enginetype\"].astype('category').cat.codes\ndataset[\"fuelsystem\"] = dataset[\"fuelsystem\"].astype('category').cat.codes","aaa3c615":"# Randomly Splitting Dataset to the Train and Test.\ntrain, test = train_test_split(dataset, test_size=30, random_state=0)\n","158e9dae":"# check if conditions for using Linear Regression are met?\ncorr=train.corr()\nsns.heatmap(corr)\nplt.show()","379e26f8":"# check if conditions for using Linear Regression are met?(Linear Relation between Variables)\nsns.pairplot(train, vars=[\"CarName\",\"price\"])\nplt.show()","322e0807":"# Splitting Train and Test data to Dependent and independent Vars.\ntrain=train.to_numpy()\ntest=test.to_numpy()\ntrain_x=train[:,1:25]\ntest_x=test[:,1:25]\ntrain_y=train[:,25]\ntest_y=test[:,25]\n","100a10f1":"#Modelling- Model1:Linear Regression:\nlr=LinearRegression().fit(train_x,train_y)\npredict_y=lr.predict(test_x)\nprint(\"Mean Squared Error of Linear Model is:\",mean_squared_error(predict_y,test_y, multioutput='uniform_average'))\nprint('----------------------------------------------------')","7eb40676":"#Modelling- Model2:Regression Tree:\nDTR=DecisionTreeRegressor(max_depth=7,random_state=33).fit(train_x,train_y)\nprint('DecisionTreeRegressor Train Score is: ',DTR.score(train_x,train_y))\npredict_y=DTR.predict(test_x)\nprint('DecisionTreeRegressor Test Score is: ',DTR.score(test_x,test_y))\nprint(\"Mean Squared Error of Regression Tree is:\",mean_squared_error(predict_y,test_y, multioutput='uniform_average'))\ntree.plot_tree(DTR)\nplt.show()\nprint('----------------------------------------------------')\n","ef07c1cf":"#Modelling- Model3:Random Forest:\nrfregressor=RandomForestRegressor(n_estimators=100,max_depth=11, random_state=33).fit(train_x,train_y)\npredict_y=rfregressor.predict(test_x)\nprint('Random Forest Regressor Train Score is : ' , rfregressor.score(train_x, train_y))\nprint('Random Forest Regressor Test Score is : ' , rfregressor.score(test_x,test_y))\nprint(\"Mean Squared Error of Random Forest is:\",mean_squared_error(predict_y,test_y, multioutput='uniform_average'))","e0c97dcd":"Modelling- Model1:Linear Regression:Mean Squared Error of Model is: 6352642.563437659","a340c228":"To display first 5 Rows of dataset.","ce17d71f":"Splitting Train and Test data to Dependent and independent Vars.\n*first column is number of rows and have not valuable variable.","e3e10f0a":"Check if conditions for using Linear Regression are met? \nfor this Purpose, the Correlation between every Variables(Features) must be low (max 0.6).\n","9339095f":"Modelling- Model2:Regression Tree:Mean Squared Error of Model is: 13387251.653846823\n\nDecisionTreeRegressor Train Score is:  0.9922383730708331\nDecisionTreeRegressor Test Score is:  0.6061529791909461\n","7334f110":"Randomly Splitting Dataset to the Train and the Test.\n","1a562803":"Replacing Qualitative Values with ((Relevant)) Quantitatives.","2fbfb2a7":"Present mean,std,min,max,Quartiles and count of each column records.","f8db4c2b":"Show null or non-null values in columns and format of each column values. there isn't any null value in this dataset.","9392a12f":"Check if conditions for using Linear Regression are met?(Linear Relation between Variables)\n","6fed6769":"Modelling- Model3:Randon Forest:Mean Squared Error of Model is: 3564328.746276573\n\nDecisionTreeRegressor Train Score is:  0.9897625506273222\nDecisionTreeRegressor Test Score is:  0.8951390252306405\n\nthats Geat! 89.5% Correct Prediction.","9351c2af":"Imporing Required Libraries."}}