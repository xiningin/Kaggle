{"cell_type":{"91f31433":"code","744aa377":"code","4d7050d6":"code","3da3b09f":"code","b76a9e46":"code","a8392d40":"markdown","716df1e2":"markdown","d9745cd8":"markdown","439cba6a":"markdown","288e18b9":"markdown","3015d815":"markdown","ed3aa2b1":"markdown","0f6d0efb":"markdown"},"source":{"91f31433":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nfrom scipy.optimize import curve_fit\n\nfrom statsmodels.tsa.statespace.sarimax import SARIMAX\nfrom statsmodels.tsa.arima_model import ARIMA\nfrom random import random","744aa377":"df=pd.read_csv(\"\/kaggle\/input\/covid19-global-forecasting-week-1\/train.csv\",usecols=['Lat','Province\/State','Country\/Region','Date','ConfirmedCases','Fatalities'])\ndf.fillna(' ',inplace=True)\ndf['Lat']=df['Province\/State']+df['Country\/Region']\ndf.drop('Province\/State',axis=1,inplace=True)\ndf.drop('Country\/Region',axis=1,inplace=True)\ncountries_list=df.Lat.unique()\ndf1=[]\nfor i in countries_list:\n    df1.append(df[df['Lat']==i])\nprint(\"we have \"+ str(len(df1))+\" regions in our dataset\")","4d7050d6":"submit_confirmed=[]\nsubmit_fatal=[]\nfor i in df1:\n    # contrived dataset\n    data = i.ConfirmedCases.astype('int32').tolist()\n    # fit model\n    try:\n        model = SARIMAX(data, order=(2,1,0), seasonal_order=(1,1,0,12))#seasonal_order=(1, 1, 1, 1))\n        #model = ARIMA(data, order=(3,1,2))\n        model_fit = model.fit(disp=False)\n        # make prediction\n        predicted = model_fit.predict(len(data), len(data)+34)\n        new=np.concatenate((np.array(data),np.array([int(num) for num in predicted])),axis=0)\n        submit_confirmed.extend(list(new[-43:]))\n    except:\n        submit_confirmed.extend(list(data[-10:-1]))\n        for j in range(34):\n            submit_confirmed.append(data[-1]*2)\n    \n    # contrived dataset\n    data = i.Fatalities.astype('int32').tolist()\n    # fit model\n    try:\n        model = SARIMAX(data, order=(2,1,0), seasonal_order=(1,1,0,12))#seasonal_order=(1, 1, 1, 1))\n        #model = ARIMA(data, order=(3,1,2))\n        model_fit = model.fit(disp=False)\n        # make prediction\n        predicted = model_fit.predict(len(data), len(data)+34)\n        new=np.concatenate((np.array(data),np.array([int(num) for num in predicted])),axis=0)\n        submit_fatal.extend(list(new[-43:]))\n    except:\n        submit_fatal.extend(list(data[-10:-1]))\n        for j in range(34):\n            submit_fatal.append(data[-1]*2)\n\ndf_submit=pd.concat([pd.Series(np.arange(1,1+len(submit_confirmed))),pd.Series(submit_confirmed),pd.Series(submit_fatal)],axis=1)","3da3b09f":"#df_submit.interpolate(method='pad', xis=0, inplace=True)\ndf_submit=df_submit.fillna(method='pad').astype(int)\ndf_submit.to_csv('submission.csv',header=['ForecastId','ConfirmedCases','Fatalities'],index=False)","b76a9e46":"# contrived dataset\nn=213 # select country\ndata = df1[n].ConfirmedCases.astype('int32').tolist()\n# fit model\nnew=submit_confirmed[9159:9201]\nplt.plot(new)\nplt.axvline(x=9,color='r')\nplt.title(\"Confirmed Case Plot: \"+str(df1[n].iloc[0,0]))\nplt.xlabel('Days')\nplt.ylabel('Confirmed Cases')\nplt.show()\n\n\n# contrived dataset\ndata = df1[n].Fatalities.astype('int32').tolist()\nnew=submit_fatal[9159:9201]\nplt.plot(new)\nplt.axvline(x=9,color='r')\nplt.title(\"Fatalities Plot\")\nplt.xlabel('Days')\nplt.ylabel('Fatalities')\nplt.show()","a8392d40":"# Visualisation of Predictions","716df1e2":"### Data Visualization\n\n","d9745cd8":"# Imports","439cba6a":"To-do","288e18b9":"# Prediction\/Forecasting","3015d815":"# Submission","ed3aa2b1":"# Data","0f6d0efb":"### Seasonal Autoregressive Integrated Moving-Average with Exogenous Regressors\n\nIn statistics and econometrics, and in particular in time series analysis, an autoregressive integrated moving average (ARIMA) model is a generalization of an autoregressive moving average (ARMA) model. Both of these models are fitted to time series data either to better understand the data or to predict future points in the series (forecasting). ARIMA models are applied in some cases where data show evidence of non-stationarity, where an initial differencing step (corresponding to the \"integrated\" part of the model) can be applied one or more times to eliminate the non-stationarity.\n\nThis class allows two different underlying representations of ARMA models as state space models: that of Hamilton and that of Harvey. Both are equivalent in the sense that they are analytical representations of the ARMA model, but the state vectors of each have different meanings. For this reason, maximum likelihood does not result in identical parameter estimates and even the same set of parameters will result in different loglikelihoods.\n\nThe Harvey representation is convenient because it allows integrating differencing into the state vector to allow using all observations for estimation.\n\nIn this implementation of differenced models, the Hamilton representation is not able to accommodate differencing in the state vector, so simple_differencing (which performs differencing prior to estimation so that the first d + sD observations are lost) must be used.\n\n##### References\n* [wiki](https:\/\/en.wikipedia.org\/wiki\/Autoregressive_integrated_moving_average)\n* [statsmodels](https:\/\/www.statsmodels.org\/dev\/generated\/statsmodels.tsa.statespace.sarimax.SARIMAX.html)"}}