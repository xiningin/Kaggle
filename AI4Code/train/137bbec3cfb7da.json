{"cell_type":{"d415bd2a":"code","1c9bb83d":"code","871a0cec":"code","08d96e6e":"code","f142d614":"code","d275533d":"code","355a0d9d":"code","470723c4":"code","78b32d97":"code","a5423708":"code","757c9729":"code","ef2be812":"code","edd8af55":"code","b56d8900":"code","168f3584":"code","28ff2b01":"code","a1e68454":"code","c600dde3":"code","83eccbea":"code","562f900c":"code","6b14ed90":"code","720c3042":"code","be8342d8":"code","92a1d3bb":"code","91267665":"markdown"},"source":{"d415bd2a":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","1c9bb83d":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.metrics import confusion_matrix\nfrom sklearn.metrics import classification_report\nfrom sklearn.metrics import roc_curve\nfrom sklearn.metrics import roc_auc_score\n%matplotlib inline ","871a0cec":"data = pd.read_csv(\"..\/input\/diabetes-classification\/diabetes.csv\")","08d96e6e":"data.head()","f142d614":"data.describe()","d275533d":"data.isnull().sum()","355a0d9d":"#Convert zeros to NaN values \ndata_copy = data.copy(deep=True)\ndata_copy[['Glucose','BloodPressure','SkinThickness','Insulin','BMI']] = data_copy[['Glucose','BloodPressure','SkinThickness','Insulin','BMI']].replace(0,np.NaN)\ndata_copy.isnull().sum()","470723c4":"#hitogram plot before converting the values \nhistchart = data.hist(figsize=(6,6))","78b32d97":"#converting the values by statical method (Mean) to vanish misleading\ndata_copy[\"Glucose\"].fillna(data_copy[\"Glucose\"].mean(),inplace=True)\ndata_copy[\"BloodPressure\"].fillna(data_copy[\"BloodPressure\"].mean(),inplace=True)\ndata_copy[\"SkinThickness\"].fillna(data_copy[\"SkinThickness\"].mean(),inplace=True)\ndata_copy[\"Insulin\"].fillna(data_copy[\"Insulin\"].mean(),inplace=True)\ndata_copy[\"BMI\"].fillna(data_copy[\"BMI\"].mean(),inplace=True)","a5423708":"data_copy.isnull().sum()","757c9729":"#hitogram plot after converting the values \nhistchart = data_copy.hist(figsize=(6,6))","ef2be812":"sns.countplot(data[\"Outcome\"])","edd8af55":"sns.pairplot(data_copy,hue=\"Outcome\")  ","b56d8900":"corrmat = data.corr()\nfig = plt.figure(figsize=(6,6))\nsns.heatmap(corrmat)","168f3584":"#scaling of the data\nfrom sklearn.preprocessing import StandardScaler\nst = StandardScaler()\nX_data = pd.DataFrame(st.fit_transform(data_copy.drop([\"Outcome\"],axis=1)),columns=['Pregnancies', 'Glucose', 'BloodPressure', 'SkinThickness', 'Insulin',\n       'BMI', 'DiabetesPedigreeFunction', 'Age'])\nX_data","28ff2b01":"y_data = pd.DataFrame(data_copy[\"Outcome\"],columns=[\"Outcome\"])\ny_data.head()","a1e68454":"X_train, X_test, y_train, y_test = train_test_split(X_data,y_data,test_size=0.33,random_state=40)","c600dde3":"knn = KNeighborsClassifier()\nknn.fit(X_train,y_train)\ntrain_score = knn.score(X_train,y_train)\ntest_score = knn.score(X_test,y_test)\nprint(\"TrainScore = \",train_score*100)\nprint(\"TestScore = \",test_score*100)","83eccbea":"y_pred = knn.predict(X_test)\ny_pred = pd.DataFrame(y_pred,columns=[\"Predictable value\"])\ny_pred.head(2)","562f900c":"#confusion_matrix\ncm = confusion_matrix(y_test,y_pred)\ncm","6b14ed90":"#Classification_report\nprint(classification_report(y_test,y_pred))","720c3042":"#roc\ny_pred_proba = knn.predict_proba(X_test)[:,1]\nfpr, tpr, thresholds = roc_curve(y_test, y_pred_proba)","be8342d8":"plt.plot([0,1],[0,1],\"--\")\nplt.plot(fpr,tpr,label='Knn')\nplt.xlabel(\"fpr\")\nplt.ylabel(\"tpr\")","92a1d3bb":"#roc_auc_score\n#area under the curve \na = roc_auc_score(y_test,y_pred_proba)\nprint(\"The area under the curve\",a)","91267665":"performance of the model \n1- Confusion Matrix\n2- Classification Report\n3- ROC-AUC report\n"}}