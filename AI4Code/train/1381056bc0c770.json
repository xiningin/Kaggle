{"cell_type":{"46760407":"code","1195c57a":"code","1902bf79":"code","8c0e7171":"code","46fff50e":"code","86963cfe":"code","ede74869":"code","5f91ed9e":"code","561101ce":"code","a7517152":"code","fa02430e":"code","d3c32386":"code","1daa5164":"code","bd720893":"code","92068299":"code","6274aced":"code","45b525fc":"markdown","597ceff1":"markdown"},"source":{"46760407":"import numpy as np \nimport pandas as pd \nimport os\nfrom os.path import join\nfrom tensorflow.keras.preprocessing.image import ImageDataGenerator\nfrom tensorflow.keras.models import Sequential\nfrom tensorflow.keras.layers import Conv2D, Dropout, BatchNormalization, MaxPooling2D, Flatten, Dense, MaxPool2D\nfrom tensorflow.keras.preprocessing.image import load_img, img_to_array\nfrom tensorflow.keras.applications.resnet50 import preprocess_input\nimport matplotlib.pyplot as plt\nfrom tensorflow.keras.utils import to_categorical\nfrom tensorflow.keras.optimizers import Adam\nfrom tensorflow.keras.losses import categorical_crossentropy\nfrom tensorflow.keras.callbacks import EarlyStopping","1195c57a":"# Loading training data\n\ndog_folderpath = '..\/input\/cat-and-dog\/training_set\/training_set\/dogs'\ncat_folderpath = '..\/input\/cat-and-dog\/training_set\/training_set\/cats'\n\ndog_imgpaths = [join(dog_folderpath, file) for file in os.listdir(dog_folderpath) if 'jpg' in file]\ncat_imgpaths = [join(cat_folderpath, file) for file in os.listdir(cat_folderpath) if 'jpg' in file]\n\n# Loading Testing data\n\ndog_test_path = '..\/input\/cat-and-dog\/test_set\/test_set\/dogs'\ncat_test_path = '..\/input\/cat-and-dog\/test_set\/test_set\/cats'\n\ndog_test_img_paths = [join(dog_test_path, file) for file in os.listdir(dog_test_path) if 'jpg' in file]\ncat_test_img_paths = [join(cat_test_path, file) for file in os.listdir(cat_test_path) if 'jpg' in file]","1902bf79":"def data_prep(img_paths, img_rows, img_cols):\n    imgs = [load_img(path, target_size=(img_rows, img_cols)) for path in img_paths]\n    img_array = np.array([img_to_array(img) for img in imgs])\n    output = img_array\/255\n    return output","8c0e7171":"# Declaring constant variables\n\nimg_rows, img_cols = 100, 100\nnum_classes = 2","46fff50e":"# Training Data Preprocessing\ndog_data = data_prep(dog_imgpaths, img_rows, img_cols)\ncat_data = data_prep(cat_imgpaths, img_rows, img_cols)\n\n# Testing Data Preprocessing\ndog_test_img = data_prep(dog_test_img_paths, img_rows, img_cols)\ncat_test_img = data_prep(cat_test_img_paths, img_rows, img_cols)","86963cfe":"fig, ax = plt.subplots(1, 2, figsize=(10,10))\nax[0].set_title('Dog')\nax[0].imshow(dog_data[0])\nax[1].set_title('Cat')\nax[1].imshow(cat_data[0])","ede74869":"# Preparing labels and features\ndog_label = np.ones(4005)\ncat_label = np.zeros(4000)\ny = np.concatenate((dog_label, cat_label))\nX = np.concatenate((dog_data, cat_data))\ny = to_categorical(y, num_classes)\n\ndog_test_label = np.ones(1012)\ncat_test_label = np.zeros(1011)\ny_test = np.concatenate((dog_test_label, cat_test_label))\nX_test = np.concatenate((dog_test_img, cat_test_img))\ny_test = to_categorical(y_test, num_classes)\n\nclass_list = ['cat' , 'dog']","5f91ed9e":"# Adding Layers to the model\nmodel = Sequential()\n\nmodel.add(Conv2D(50, kernel_size =(3,3), input_shape=(img_rows,img_cols,3), padding='same', activation='relu'))\nmodel.add(MaxPool2D(2,2))\nmodel.add(BatchNormalization())\n\n\nmodel.add(Conv2D(50, kernel_size =(3,3),padding='same', activation='relu'))\nmodel.add(MaxPool2D(2,2))\nmodel.add(BatchNormalization())\n\n\n\nmodel.add(Conv2D(60, kernel_size =(3,3),padding='same', activation='relu'))\nmodel.add(MaxPool2D(2,2))\nmodel.add(BatchNormalization())\n\n\nmodel.add(Conv2D(80, kernel_size =(3,3),padding='same', activation='relu'))\nmodel.add(MaxPool2D(2,2))\nmodel.add(BatchNormalization())\nmodel.add(Dropout(0.25))\n\nmodel.add(Conv2D(80, kernel_size =(3,3),padding='same', activation='relu'))\nmodel.add(MaxPool2D(2,2))\nmodel.add(BatchNormalization())\nmodel.add(Dropout(0.25))\n\nmodel.add(Flatten())\nmodel.add(Dense(256, activation='relu'))\n\nmodel.add(Dropout(0.50))\nmodel.add(Dense(2, activation='softmax'))","561101ce":"model.summary()","a7517152":"model.compile(loss=categorical_crossentropy, optimizer=Adam(0.001), metrics=['accuracy'])","fa02430e":"# Instantiate stopper for model training\nstopper = EarlyStopping(monitor='val_loss', patience=2, mode='auto')","d3c32386":"history = model.fit(X, y, epochs=30, callbacks=[stopper], validation_data=(X_test, y_test))","1daa5164":"model.evaluate(X_test, y_test)","bd720893":"preds = model.predict(X_test)","92068299":"predicted_class = [np.argmax(pred) for pred in preds]","6274aced":"plt.title('Predicted: {}'.format(class_list[predicted_class[1013]]))\nplt.imshow(X_test[1013])","45b525fc":"Now let's look at the data","597ceff1":"# **MY FIRST TRY ON IMAGE CLASSIFICATION USING CNN**\n* > Classifying an image whether it's a cat or a  dog\n* > I would really appreciate your feedback"}}