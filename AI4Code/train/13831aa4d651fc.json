{"cell_type":{"023c9144":"code","bde935b1":"code","f57c5609":"code","9a83a2d9":"code","f621bd08":"code","a3528495":"code","37b40129":"code","22556fcb":"code","754deed9":"code","634bc0d9":"code","982cbd12":"code","c879ef67":"code","25f10aca":"markdown","583bea3f":"markdown","d76f905c":"markdown"},"source":{"023c9144":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n        \n# \/kaggle\/input\/google-smartphone-decimeter-challenge\/train\/2020-06-04-US-MTV-1\/\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","bde935b1":"import plotly.express as px","f57c5609":"train = pd.read_csv(\"\/kaggle\/input\/google-smartphone-decimeter-challenge\/baseline_locations_train.csv\")\ntrain.shape","9a83a2d9":"train.head()","f621bd08":"print(f\"Unique number of collections : {train.collectionName.nunique()}\")\ncoll_name = train.groupby(\"collectionName\")['collectionName'].count().reset_index(name = 'counts')\nfig = px.bar(coll_name, x='collectionName', y='counts', title = 'Data collection names')\nfig.show()","a3528495":"print(f\"Unique number of Phone names : {train.phoneName.nunique()}\")\nphone_count = train.groupby('phoneName')['phoneName'].count().reset_index(name = 'counts')\nfig = px.pie(phone_count, values='counts', names='phoneName', title='Phones used in data collection')\nfig.show()","37b40129":"print(f\"Data collected using {train.phone.nunique()} phones\")\nph_cnt = train.groupby('phone')['phone'].count().reset_index(name = 'counts')\nph_cnt","22556fcb":"latlon_trn = train[['latDeg','lngDeg']].round(3)\nlatlon_trn['counts'] = 1\nlatlon_trn = latlon_trn.groupby(['latDeg','lngDeg']).sum().reset_index()\nlatlon_trn","754deed9":"for dirname, _, filenames in os.walk('..\/input\/google-smartphone-decimeter-challenge\/train\/2020-06-04-US-MTV-1\/Pixel4XL\/'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))","634bc0d9":"def gnss_log_to_dataframes(path):\n    print('Loading ' + path, flush=True)\n    gnss_section_names = {'Raw','UncalAccel', 'UncalGyro', 'UncalMag', 'Fix', 'Status', 'OrientationDeg'}\n    with open(path) as f_open:\n        datalines = f_open.readlines()\n\n    datas = {k: [] for k in gnss_section_names}\n    gnss_map = {k: [] for k in gnss_section_names}\n    for dataline in datalines:\n        is_header = dataline.startswith('#')\n        dataline = dataline.strip('#').strip().split(',')\n        # skip over notes, version numbers, etc\n        if is_header and dataline[0] in gnss_section_names:\n            gnss_map[dataline[0]] = dataline[1:]\n        elif not is_header:\n            datas[dataline[0]].append(dataline[1:])\n\n    results = dict()\n    for k, v in datas.items():\n        results[k] = pd.DataFrame(v, columns=gnss_map[k])\n    # pandas doesn't properly infer types from these lists by default\n    for k, df in results.items():\n        for col in df.columns:\n            if col == 'CodeType':\n                continue\n            results[k][col] = pd.to_numeric(results[k][col])\n\n    return results\n","982cbd12":"pd.set_option('display.max_rows', 500)\npd.set_option('display.max_columns', 500)\npd.set_option('display.width', 1000)\ndfs = gnss_log_to_dataframes('..\/input\/google-smartphone-decimeter-challenge\/train\/2020-06-04-US-MTV-1\/Pixel4XL\/Pixel4XL_GnssLog.txt')\ndfs['Raw'].head(5)","c879ef67":"dfs['UncalAccel'].head(5)","25f10aca":"## Phone data Exploration","583bea3f":"<font color = 'red'> <h1>Work in Progress <\/font>","d76f905c":"## Training data Exploration"}}