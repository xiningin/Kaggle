{"cell_type":{"5f7b7c53":"code","208c7003":"code","ec10a06e":"code","035d37e4":"code","eb97b39e":"code","3b0e7b8c":"markdown","0d756d50":"markdown","4b3aac74":"markdown","520f47ea":"markdown","c0bc7abf":"markdown","bf20a679":"markdown","a74b1331":"markdown"},"source":{"5f7b7c53":"import pandas as pd\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nimport matplotlib.font_manager as fm\nimport numpy as np\n\n\nfont = fm.FontProperties(fname='..\/input\/myfont\/210 Black.ttf')\nnasdaq = pd.read_csv('..\/input\/nasdaq-kospi-compare\/nasdaq.csv')\nkospi = pd.read_csv('..\/input\/nasdaq-kospi-compare\/kospi.csv')\n\ndef make_time(time):\n  return time.replace('\ub144', '-').replace('\uc6d4','').replace(' ','')\n\nnasdaq['\ub0a0\uc9dc'] = nasdaq['\ub0a0\uc9dc'].apply(make_time)\nkospi['\ub0a0\uc9dc'] = kospi['\ub0a0\uc9dc'].apply(make_time)\nnasdaq['\ub0a0\uc9dc'] = pd.to_datetime(nasdaq['\ub0a0\uc9dc'])\nkospi['\ub0a0\uc9dc'] = pd.to_datetime(kospi['\ub0a0\uc9dc'])\ndef make_price(price):\n  return price.replace(',', '')\n\nkospi['\uc885\uac00'] = kospi['\uc885\uac00'].apply(make_price)\nnasdaq['\uc885\uac00'] = nasdaq['\uc885\uac00'].apply(make_price)\nkospi['\uc885\uac00'] = pd.to_numeric(kospi['\uc885\uac00'])\nnasdaq['\uc885\uac00'] = pd.to_numeric(nasdaq['\uc885\uac00'])\nkospi['\uc885\uac00'] = kospi['\uc885\uac00'] \/ kospi.loc[120,'\uc885\uac00']\nnasdaq['\uc885\uac00'] = nasdaq['\uc885\uac00'] \/ nasdaq.loc[120,'\uc885\uac00']\n\nfig = plt.figure(figsize=(22,12))\nax = plt.axes()\nplt.plot(kospi['\ub0a0\uc9dc'], kospi['\uc885\uac00'],lw=4)\nplt.plot(nasdaq['\ub0a0\uc9dc'], nasdaq['\uc885\uac00'],lw=4)\nplt.scatter(x=kospi['\ub0a0\uc9dc'][0],y = kospi['\uc885\uac00'][0],s=150)\nplt.scatter(x=nasdaq['\ub0a0\uc9dc'][0],y = nasdaq['\uc885\uac00'][0],s=150)\nplt.text(s='475%',x=nasdaq['\ub0a0\uc9dc'][0],y = nasdaq['\uc885\uac00'][0]-0.2,font=font, fontsize=22)\nplt.text(s='147%',x=kospi['\ub0a0\uc9dc'][0],y = kospi['\uc885\uac00'][0]-0.2,font=font, fontsize=22)\nplt.grid(axis=\"y\",alpha=0.5)\nplt.gca().spines['right'].set_visible(False)\nplt.gca().spines['top'].set_visible(False)\nplt.xticks(font=font, fontsize=18)\nplt.yticks(font=font, fontsize=18)\nplt.title(\"NASDAQ vs KOSPI ( Korean Stock Price Index )\",font=font, fontsize=22)\nplt.text(s='NASDAQ', x=18100, y=4,font = font, fontsize=18)\nplt.text(s='KOSPI', x=18100, y=1.3,font = font, fontsize=18)\nax.set(facecolor = \"whitesmoke\")\nplt.show()","208c7003":"data =pd.read_csv(\"..\/input\/bitcoin-historical-data\/bitstampUSD_1-min_data_2012-01-01_to_2021-03-31.csv\")\ndata = data[['Timestamp','Close','Volume_(BTC)']]\ndata['Timestamp'] = pd.to_datetime(data['Timestamp'],unit='s')\ndata = data.dropna()\ndata = data.set_index('Timestamp')\ndata = data.resample('MS').mean()\n\nfig, ax = plt.subplots(figsize=(22,12), facecolor=\"w\")\n\nax.plot(data['Close'], color = 'black', lw=5)\nax.scatter(x=data.tail(1).index,y = data.tail(1)['Close'],s=300,color='black')\n\nfor s in [\"left\", \"right\", \"top\"]:\n    ax.spines[s].set_visible(False)\n\nyticks = list(np.linspace(0, 60000, 6))\nax.set_yticks(yticks)\nplt.yticks(fontsize=25)\n\nax.set_yticklabels([f\"{int(y)} dollar\" if y > 0 else \"0\" for y in yticks])\n\nax.grid(axis=\"y\")\n\nax.set_title(\"Bitcoin Price\", fontsize=24, fontweight=\"bold\", pad=32)\n\nfont_textyear = {\"fontsize\": 18, \"ha\":\"center\"}\n\nax.axvspan(15300, 16050, fc=\"gainsboro\", alpha=0.2)\nax.text(15650, 5000, \"First rise\", font = font, fontsize=20, color=\"k\")\nax.axvspan(15300, 17200, fc=\"lightgrey\", alpha=0.2)\nax.text(16500, 5000, \"the dark ages\", font = font, fontsize=20, color=\"k\")\nax.axvspan(17200, 17500, fc=\"silver\", alpha=0.2)\nax.text(16950, 15000, \"Second Big rise\", font = font, fontsize=20, color=\"k\")\nax.axvspan(17500, 17900, fc=\"darkgrey\", alpha=0.2)\nax.text(17650, 12000, \"Big Short\", font = font, fontsize=20, color=\"k\")\nax.axvspan(17900, 18750, fc=\"grey\", alpha=0.2)\nax.text(18000, 48000, \"Amazing Rise Now\", font = font, fontsize=20, color=\"k\")\n    \nfig.tight_layout()","ec10a06e":"fontsize=20\nplt.rc('font', size=20)\nN = 5\nind = np.arange(N)\nwidth = 0.27\n\nfig = plt.figure(figsize=(22,10))\nax = fig.add_subplot(111)\n\ntflite = [26.6, 15.3, 12.2, 89.7, 79.3]\nint8 = [7.09, 0, 3.44, 23.3, 21.2]\nfloat16 = [13.4, 7.74, 6.13, 44.9, 39.7]\n\n# yvals = [4, 9, 2]\nrects1 = ax.bar(ind, tflite, width, color='grey')\n# zvals = [1,2,3]\nrects2 = ax.bar(ind+width, float16, width, color='silver')\n# kvals = [11,12,13]\nrects3 = ax.bar(ind+width*2, int8, width, color='lightgrey')\n\n# ax.set_ylabel('Scores')\nax.set_ylabel('1',fontsize=18)\nax.set_xticks(ind+width)\n\nplt.gca().spines['right'].set_visible(False)\nplt.gca().spines['top'].set_visible(False)\n\nax.set_xticklabels( ('1', '2', '3', '4', '5') )\nax.legend( (rects1[0], rects2[0], rects3[0]), ('1', '2', '3') ,fontsize=15,edgecolor ='white')\n\n\ndef autolabel(rects):\n    for rect in rects:\n        h = rect.get_height()\n        ax.text(rect.get_x()+rect.get_width()\/2., h, '%d'%int(h),\n                ha='center', va='bottom',fontsize=15)\n# plt.gca().set_facecolor('lavender')\nax.grid(axis=\"y\",alpha=0.5)\n        \nautolabel(rects1)\nautolabel(rects2)\nautolabel(rects3)\n\nplt.show()","035d37e4":"fontsize=20\nx_label = ['bottle','cable' ,'capsule', 'carpet' ,'grid' ,'hazelnut' ,'leather' ,'metal_nut' ,'pill' ,'screw' ,'tile' ,'transistor' ,'wood' ,'zipper']\ndiffence = [0.32,0.16,0.25,-0.22,0.72,0.39,0.18,-0.09,0.29,0.42,0.17,0.37,0.35,0.13]\nplt.rc('font', size=20)\nfig = plt.figure(figsize=(22,10))\ncolor_mode = ['grey','grey','grey','green','grey','grey','grey','green','grey','grey','grey','grey','grey','grey']\nplt.bar(x_label, diffence, color=color_mode)\nplt.ylabel('OCSVM - Reconstruction')\nplt.xticks(rotation=45)\nplt.gca().spines['right'].set_visible(False)\nplt.gca().spines['top'].set_visible(False)\nplt.grid(axis=\"y\",alpha=0.5)\nfor i in range(len(x_label)):\n    score_value = round(diffence[i],2)\n    if score_value > 0:\n        plt.text(s=f'{score_value}', x=i-0.26, y=diffence[i]+0.03,fontsize=20)\n    else:\n        plt.text(s=f'{score_value}', x=i-0.35, y=diffence[i]-0.05,fontsize=20)\n        \nplt.ylim(-0.35,0.8)\nplt.show()","eb97b39e":"data = pd.read_csv(\"..\/input\/world-happiness-report-2021\/world-happiness-report-2021.csv\")\ndata = data[['Country name','Ladder score','Logged GDP per capita']]\ndata = data[:50]\nx = np.array(data['Ladder score'])\nfor i in range(len(x)):\n    fit = -0.0747281 *x*x*x + 1.05045076*x*x -3.16337971*x +7.10682006\nbound_country = ['Kuwait','Guatemala','Jamaica','Costa Rica','Kosovo','Brazil','El Salvador','Uzbekistan','United Arab Emirates','Singapore','Ireland','Luxembourg']\nplt.figure(figsize=(20,13))\nsns.scatterplot(data= data, x='Ladder score',y='Logged GDP per capita',s=100)\nplt.title('Life Satisfication vs GDP per Captia',fontsize=30,color = 'dimgray')\nplt.axis('off')\n\nplt.plot(x,fit,lw=8,alpha=0.3)\nfor i in range(len(data)):\n    if data.loc[i,'Country name'] in bound_country:\n        plt.text(s =data.loc[i,'Country name'], x=data.loc[i,'Ladder score']+0.01,y=data.loc[i,'Logged GDP per capita']+0.01, fontsize=10,color='lightgrey')\n        plt.scatter(x=data.loc[i,'Ladder score'],y=data.loc[i,'Logged GDP per capita'],color ='lightgrey',s=100)\n    else:\n        plt.text(s =data.loc[i,'Country name'], x=data.loc[i,'Ladder score']+0.01,y=data.loc[i,'Logged GDP per capita']+0.01, fontsize=10)\n\nplt.text(s='x: Life Satisfication',x=7.3,y=9.4,fontsize=20)\nplt.text(s='y: GDP per Captia',x=7.3,y=9.3,fontsize=20)\n        \nplt.show()","3b0e7b8c":"# Lineplot - [Bitcoin Price](https:\/\/www.kaggle.com\/jeongbinpark\/make-simple-plot)","0d756d50":"# Barplot - [Just BarChart](https:\/\/www.kaggle.com\/jeongbinpark\/practice-barchart)","4b3aac74":"# Barplot - MVTEC AD visualization ","520f47ea":"<div style=\"color:white;\n           display:fill;\n           border-radius:5px;\n           background-color:blue;\n           font-size:110%;\n           font-family:Verdana;\n           letter-spacing:0.5px\">\n<h1 style=\"text-align: center;\n           padding: 10px;\n              color:white\">\nThis work brings together my simple visualizations.\n<\/h1>\n<\/div>","c0bc7abf":"# Lineplot - [Compare Nasdaq and Kospi](https:\/\/www.kaggle.com\/jeongbinpark\/make-lineplot)","bf20a679":"### It's my favorite !","a74b1331":"# Scatterplot - [The relationship between happiness and GDP](https:\/\/www.kaggle.com\/jeongbinpark\/how-to-make-meaningful-visualization)"}}