{"cell_type":{"1b87b0ae":"code","135e8f12":"code","d93a00ca":"code","01c36378":"code","3acc8fc1":"code","70f3ff1c":"code","90bda85a":"code","55c92731":"code","21870636":"code","b546a334":"code","d9ed672e":"code","7c6d3f67":"code","40bada6e":"code","d0ccd948":"code","de48fa2a":"markdown","3bcaa209":"markdown","2b4501ef":"markdown","a2b09026":"markdown","50d38532":"markdown","f02bddba":"markdown","6b2c92d2":"markdown","c475bb41":"markdown"},"source":{"1b87b0ae":"import os\nimport keras \nfrom keras.models import Sequential\nfrom keras.layers import Conv2D, MaxPooling2D, Flatten, Dense, Dropout, BatchNormalization\nfrom PIL import Image\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nplt.style.use('dark_background')\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.preprocessing import OneHotEncoder ","135e8f12":"encoder = OneHotEncoder()\nencoder.fit([[0], [1]]) \n\n# 0 - Tumor\n# 1 - Normal","d93a00ca":"# This cell updates result list for images with tumor\n\ndata = []\npaths = []\nresult = []\n\nfor r, d, f in os.walk(r'..\/input\/brain-mri-images-for-brain-tumor-detection\/yes'):\n    for file in f:\n        if '.jpg' in file:\n            paths.append(os.path.join(r, file))\n\nfor path in paths:\n    img = Image.open(path)\n    img = img.resize((128,128))\n    img = np.array(img)\n    if(img.shape == (128,128,3)):\n        data.append(np.array(img))\n        result.append(encoder.transform([[0]]).toarray())","01c36378":"# This cell updates result list for images without tumor\n\npaths = []\nfor r, d, f in os.walk(r\"..\/input\/brain-mri-images-for-brain-tumor-detection\/no\"):\n    for file in f:\n        if '.jpg' in file:\n            paths.append(os.path.join(r, file))\n\nfor path in paths:\n    img = Image.open(path)\n    img = img.resize((128,128))\n    img = np.array(img)\n    if(img.shape == (128,128,3)):\n        data.append(np.array(img))\n        result.append(encoder.transform([[1]]).toarray())","3acc8fc1":"data = np.array(data)\ndata.shape","70f3ff1c":"result = np.array(result)\nresult = result.reshape(139,2)","90bda85a":"x_train,x_test,y_train,y_test = train_test_split(data, result, test_size=0.2, shuffle=True, random_state=0)","55c92731":"model = Sequential()\n\nmodel.add(Conv2D(32, kernel_size=(2, 2), input_shape=(128, 128, 3), padding = 'Same'))\nmodel.add(Conv2D(32, kernel_size=(2, 2),  activation ='relu', padding = 'Same'))\n\n\nmodel.add(BatchNormalization())\nmodel.add(MaxPooling2D(pool_size=(2, 2)))\nmodel.add(Dropout(0.25))\n\nmodel.add(Conv2D(64, kernel_size = (2,2), activation ='relu', padding = 'Same'))\nmodel.add(Conv2D(64, kernel_size = (2,2), activation ='relu', padding = 'Same'))\n\nmodel.add(BatchNormalization())\nmodel.add(MaxPooling2D(pool_size=(2,2), strides=(2,2)))\nmodel.add(Dropout(0.25))\n\nmodel.add(Flatten())\n\nmodel.add(Dense(512, activation='relu'))\nmodel.add(Dropout(0.5))\nmodel.add(Dense(2, activation='softmax'))\n\nmodel.compile(loss = \"categorical_crossentropy\", optimizer='Adamax')\nprint(model.summary())","21870636":"y_train.shape","b546a334":"history = model.fit(x_train, y_train, epochs = 30, batch_size = 40, verbose = 1,validation_data = (x_test, y_test))","d9ed672e":"plt.plot(history.history['loss'])\nplt.plot(history.history['val_loss'])\nplt.title('Model Loss')\nplt.ylabel('Loss')\nplt.xlabel('Epoch')\nplt.legend(['Test', 'Validation'], loc='upper right')\nplt.show()","7c6d3f67":"def names(number):\n    if number==0:\n        return 'Its a Tumor'\n    else:\n        return 'No, Its not a tumor'","40bada6e":"from matplotlib.pyplot import imshow\nimg = Image.open(r\"..\/input\/brain-mri-images-for-brain-tumor-detection\/no\/N16.jpg\")\nx = np.array(img.resize((128,128)))\nx = x.reshape(1,128,128,3)\nres = model.predict_on_batch(x)\nclassification = np.where(res == np.amax(res))[1][0]\nimshow(img)\nprint(str(res[0][classification]*100) + '% Confidence This Is ' + names(classification))","d0ccd948":"from matplotlib.pyplot import imshow\nimg = Image.open(r\"..\/input\/brain-mri-images-for-brain-tumor-detection\/yes\/Y3.jpg\")\nx = np.array(img.resize((128,128)))\nx = x.reshape(1,128,128,3)\nres = model.predict_on_batch(x)\nclassification = np.where(res == np.amax(res))[1][0]\nimshow(img)\nprint(str(res[0][classification]*100) + '% Confidence This Is A ' + names(classification))","de48fa2a":"# Plotting Losses","3bcaa209":"# Model Building","2b4501ef":"# One Hot Encoding the Target Classes","a2b09026":"# Thank You","50d38532":"# Splitting the Data into Training & Testing","f02bddba":"# Creating 3 Important Lists --\n1. data list for storing image data in numpy array form\n2. paths list for storing paths of all images\n3. result list for storing one hot encoded form of target class whether normal or tumor","6b2c92d2":"#  Importing Datasets","c475bb41":"# Just Checking the Model"}}