{"cell_type":{"8500c78b":"code","c5a96394":"code","cf0c2da1":"code","d55c83d5":"code","e6385a19":"code","430be6c8":"code","9bed5fe7":"code","ba39d226":"code","a00c39cf":"code","50b71576":"code","5d9600af":"code","597ac679":"code","b22c957c":"code","481dc38a":"code","25f61c35":"markdown","17c8ea76":"markdown","8ffe0235":"markdown","36cf1305":"markdown","4c5b0ab3":"markdown","b73fdc1d":"markdown","565b2203":"markdown","d32dedde":"markdown","eacffd3d":"markdown","7f4ffec0":"markdown","7e78f523":"markdown","19d8e75f":"markdown","5431ae96":"markdown","cce789da":"markdown"},"source":{"8500c78b":"import numpy as np\nimport pandas as pd\nfrom sklearn.datasets import load_breast_cancer\n\ncancer = load_breast_cancer()\n\nprint(cancer.DESCR) # Print the data set description","c5a96394":"cancer.keys()","cf0c2da1":"# You should write your whole answer within the function provided. The autograder will call\n# this function and compare the return value against the correct solution value\ndef answer_zero():\n    # This function returns the number of features of the breast cancer dataset, which is an integer. \n    # The assignment question description will tell you the general format the autograder is expecting\n    return len(cancer['feature_names'])\n\n# You can examine what your function returns by calling it in the cell. If you have questions\n# about the assignment formats, check out the discussion forums for any FAQs\nanswer_zero() ","d55c83d5":"def answer_one():\n    columns= np.append(cancer.feature_names,'target')\n    index=pd.RangeIndex(start=0,stop=569)\n    data=np.column_stack((cancer.data,cancer.target))\n    df=pd.DataFrame(data=data,index=index,columns=columns)\n    return df\n\n\nanswer_one()","e6385a19":" answer_one()['target'].value_counts()","430be6c8":"def answer_two():\n    cancerdf = answer_one()\n    \n    n= cancerdf['target'].value_counts() \n    series=pd.Series([212,357],index=['malignant','benign'])\n    return series\n\n\nanswer_two()","9bed5fe7":"def answer_three():\n    cancerdf = answer_one()\n    X=cancerdf[['mean radius', 'mean texture', 'mean perimeter', 'mean area',\n                'mean smoothness', 'mean compactness', 'mean concavity',\n                'mean concave points', 'mean symmetry', 'mean fractal dimension',\n                'radius error', 'texture error', 'perimeter error', 'area error',\n                'smoothness error', 'compactness error', 'concavity error',\n                'concave points error', 'symmetry error', 'fractal dimension error',\n                'worst radius', 'worst texture', 'worst perimeter', 'worst area',\n                'worst smoothness', 'worst compactness', 'worst concavity',\n                'worst concave points', 'worst symmetry', 'worst fractal dimension']]\n    y=cancerdf['target']\n    \n    return X, y\n\nanswer_three()","ba39d226":"from sklearn.model_selection import train_test_split\n\ndef answer_four():\n    X, y = answer_three()\n    X_train, X_test, y_train, y_test= train_test_split(X,y,random_state=0)\n    \n    \n    \n    return X_train, X_test, y_train, y_test\n\nanswer_four()\n","a00c39cf":"from sklearn.neighbors import KNeighborsClassifier\n\ndef answer_five():\n    X_train, X_test, y_train, y_test = answer_four()\n    knn = KNeighborsClassifier(n_neighbors = 1)\n    fit= knn.fit(X_train, y_train)\n    \n    return fit\n\nanswer_five()","50b71576":"def answer_six():\n    cancerdf = answer_one()\n    means = cancerdf.mean()[:-1].values.reshape(1, -1)\n    knn=answer_five()\n    \n    # Your code here\n    \n    return knn.predict(means)\nanswer_six()","5d9600af":"def answer_seven():\n    X_train, X_test, y_train, y_test = answer_four()\n    knn = answer_five()\n    \n    \n    \n    return knn.predict(X_test)\n\nanswer_seven()","597ac679":"def answer_eight():\n    X_train, X_test, y_train, y_test = answer_four()\n    knn = answer_five()\n    \n    \n    # Your code here\n    \n    return knn.score(X_test,y_test)\nanswer_eight()","b22c957c":"def accuracy_plot():\n    import matplotlib.pyplot as plt\n\n    %matplotlib inline\n\n    X_train, X_test, y_train, y_test = answer_four()\n\n    # Find the training and testing accuracies by target value (i.e. malignant, benign)\n    mal_train_X = X_train[y_train==0]\n    mal_train_y = y_train[y_train==0]\n    ben_train_X = X_train[y_train==1]\n    ben_train_y = y_train[y_train==1]\n\n    mal_test_X = X_test[y_test==0]\n    mal_test_y = y_test[y_test==0]\n    ben_test_X = X_test[y_test==1]\n    ben_test_y = y_test[y_test==1]\n\n    knn = answer_five()\n\n    scores = [knn.score(mal_train_X, mal_train_y), knn.score(ben_train_X, ben_train_y), \n              knn.score(mal_test_X, mal_test_y), knn.score(ben_test_X, ben_test_y)]\n\n\n    plt.figure()\n\n    # Plot the scores as a bar chart\n    bars = plt.bar(np.arange(4), scores, color=['#4c72b0','#4c72b0','#55a868','#55a868'])\n\n    # directly label the score onto the bars\n    for bar in bars:\n        height = bar.get_height()\n        plt.gca().text(bar.get_x() + bar.get_width()\/2, height*.90, '{0:.{1}f}'.format(height, 2), \n                     ha='center', color='w', fontsize=11)\n\n    # remove all the ticks (both axes), and tick labels on the Y axis\n    plt.tick_params(top='off', bottom='off', left='off', right='off', labelleft='off', labelbottom='on')\n\n    # remove the frame of the chart\n    for spine in plt.gca().spines.values():\n        spine.set_visible(False)\n\n    plt.xticks([0,1,2,3], ['Malignant\\nTraining', 'Benign\\nTraining', 'Malignant\\nTest', 'Benign\\nTest'], alpha=0.8);\n    plt.title('Training and Test Accuracies for Malignant and Benign Cells', alpha=0.8)\n    \n    \n    \n    ","481dc38a":"accuracy_plot()","25f61c35":"---\n\n_You are currently looking at **version 1.3** of this notebook. To download notebooks and datafiles, as well as get help on Jupyter notebooks in the Coursera platform, visit the [Jupyter Notebook FAQ](https:\/\/www.coursera.org\/learn\/python-machine-learning\/resources\/bANLa) course resource._\n\n---","17c8ea76":"### Question 4\nUsing `train_test_split`, split `X` and `y` into training and test sets `(X_train, X_test, y_train, and y_test)`.\n\n**Set the random number generator state to 0 using `random_state=0` to make sure your results match the autograder!**\n\n*This function should return a tuple of length 4:* `(X_train, X_test, y_train, y_test)`*, where* \n* `X_train` *has shape* `(426, 30)`\n* `X_test` *has shape* `(143, 30)`\n\n* `y_train` *has shape* `(426,)`\n* `y_test` *has shape* `(143,)`","8ffe0235":"For this assignment, you will be using the Breast Cancer Wisconsin (Diagnostic) Database to create a classifier that can help diagnose patients. First, read through the description of the dataset (below).","36cf1305":"### Question 6\nUsing your knn classifier, predict the class label using the mean value for each feature.\n\nHint: You can use `cancerdf.mean()[:-1].values.reshape(1, -1)` which gets the mean value for each feature, ignores the target column, and reshapes the data from 1 dimension to 2 (necessary for the precict method of KNeighborsClassifier).\n\n*This function should return a numpy array either `array([ 0.])` or `array([ 1.])`*","4c5b0ab3":"### Question 0 (Example)\n\nHow many features does the breast cancer dataset have?\n\n*This function should return an integer.*","b73fdc1d":"# Assignment 1 - Introduction to Machine Learning","565b2203":"### Optional plot\n\nTry using the plotting function below to visualize the differet predicition scores between training and test sets, as well as malignant and benign cells.","d32dedde":"### Question 3\nSplit the DataFrame into `X` (the data) and `y` (the labels).\n\n*This function should return a tuple of length 2:* `(X, y)`*, where* \n* `X`*, a pandas DataFrame, has shape* `(569, 30)`\n* `y`*, a pandas Series, has shape* `(569,)`.","eacffd3d":"### Question 7\nUsing your knn classifier, predict the class labels for the test set `X_test`.\n\n*This function should return a numpy array with shape `(143,)` and values either `0.0` or `1.0`.*","7f4ffec0":"### Question 8\nFind the score (mean accuracy) of your knn classifier using `X_test` and `y_test`.\n\n*This function should return a float between 0 and 1*","7e78f523":"The object returned by `load_breast_cancer()` is a scikit-learn Bunch object, which is similar to a dictionary.","19d8e75f":"### Question 5\nUsing KNeighborsClassifier, fit a k-nearest neighbors (knn) classifier with `X_train`, `y_train` and using one nearest neighbor (`n_neighbors = 1`).\n\n*This function should return a * `sklearn.neighbors.classification.KNeighborsClassifier`.","5431ae96":"### Question 1\n\nScikit-learn works with lists, numpy arrays, scipy-sparse matrices, and pandas DataFrames, so converting the dataset to a DataFrame is not necessary for training this model. Using a DataFrame does however help make many things easier such as munging data, so let's practice creating a classifier with a pandas DataFrame. \n\n\n\nConvert the sklearn.dataset `cancer` to a DataFrame. \n\n*This function should return a `(569, 31)` DataFrame with * \n\n*columns = *\n\n    ['mean radius', 'mean texture', 'mean perimeter', 'mean area',\n    'mean smoothness', 'mean compactness', 'mean concavity',\n    'mean concave points', 'mean symmetry', 'mean fractal dimension',\n    'radius error', 'texture error', 'perimeter error', 'area error',\n    'smoothness error', 'compactness error', 'concavity error',\n    'concave points error', 'symmetry error', 'fractal dimension error',\n    'worst radius', 'worst texture', 'worst perimeter', 'worst area',\n    'worst smoothness', 'worst compactness', 'worst concavity',\n    'worst concave points', 'worst symmetry', 'worst fractal dimension',\n    'target']\n\n*and index = *\n\n    RangeIndex(start=0, stop=569, step=1)","cce789da":"### Question 2\nWhat is the class distribution? (i.e. how many instances of `malignant` (encoded 0) and how many `benign` (encoded 1)?)\n\n*This function should return a Series named `target` of length 2 with integer values and index =* `['malignant', 'benign']`"}}