{"cell_type":{"62f7ecb8":"code","3396d24f":"code","2a8c8d9f":"code","0a606514":"code","92c2cf78":"code","1094d2cb":"code","329e96a1":"code","a42e735c":"code","92a2f07a":"code","bfd46576":"code","e9ac9769":"code","79312ce1":"markdown","d5580139":"markdown","d17d1fca":"markdown","643b57c3":"markdown"},"source":{"62f7ecb8":"from pathlib import Path\nimport os\n\ndata_path = Path('\/kaggle\/input\/abstraction-and-reasoning-challenge\/')\ntraining_path = data_path \/ 'training'\nevaluation_path = data_path \/ 'evaluation'\ntest_path = data_path \/ 'test'\n\ntraining_tasks = list(training_path.glob('*'))\nevaluation_tasks = list(evaluation_path.glob('*'))\ntest_tasks = list(test_path.glob('*'))","3396d24f":"import numpy as np\n\ndef get_color_set(img):\n    return set(np.array(img).flatten())\n\ndef get_task_color_set(task):\n    s = set()\n\n    for problems in task.values():\n        for problem in problems:\n            try:\n                in_, out_ = problem.values()\n                \n                s.update(get_color_set(in_))\n                s.update(get_color_set(out_))\n            except ValueError:\n                in_, = problem.values()\n                \n                s.update(get_color_set(in_))\n                \n    return s","2a8c8d9f":"import json\nfrom tqdm import tqdm\n\ntask_files = training_tasks\n\ncolor_set = set()\nfor task_files in [training_tasks, evaluation_tasks, test_tasks]:\n    for task_file in tqdm(task_files):\n        with open(task_file, 'r') as f:\n            task = json.load(f)\n\n        color_set.update(get_task_color_set(task))\n    \n        \n","0a606514":"print(f'Total color labels used: {len(color_set)}.')\nprint(f'Color set: {color_set}')","92c2cf78":"def has_color_difference(task):\n    s_in, s_out = set(), set()\n    \n    for problems in task.values():\n        for problem in problems:\n                in_, out_ = problem.values()\n                \n                s_in.update(get_color_set(in_))\n                s_out.update(get_color_set(out_))\n                \n                if len(s_in.difference(s_out)) > 0:\n                    return True\n        \n    return False\n                \n","1094d2cb":"diff_vector = []\nfor task_files in [training_tasks, evaluation_tasks]:\n    for task_file in tqdm(task_files):\n        with open(task_file, 'r') as f:\n            task = json.load(f)\n\n        diff_vector.append(has_color_difference(task))\n\ndiff_vector = np.array(diff_vector)","329e96a1":"print(f'{diff_vector.mean() * 100} % of tasks have different colors in the output from the ones in the input.')","a42e735c":"def get_color_count(task):\n    s = get_task_color_set(task)\n\n    color_counts = np.zeros(10)\n    \n    for c in s:\n        color_counts[c] += 1\n\n    return color_counts","92a2f07a":"count_vector = np.zeros(10)\nfor task_files in [training_tasks, evaluation_tasks, test_tasks]:\n    for task_file in tqdm(task_files):\n        with open(task_file, 'r') as f:\n            task = json.load(f)\n\n        count_vector += get_color_count(task)","bfd46576":"color_dist = count_vector \/ count_vector.max() # Max as zero appears everywhere.","e9ac9769":"import seaborn as sns\n\nsns.barplot(np.arange(10), color_dist)","79312ce1":"### What is the distribution of the colors across all tasks?","d5580139":"### How many colors are there?","d17d1fca":"### How frequently are the output colors not the same as input colors across tasks?","643b57c3":"It seems there are only 10 colors overall. This means they can be potentially treated as classification targets."}}