{"cell_type":{"fcbd3c71":"code","ddc639d1":"code","069e9e68":"code","2aa18734":"code","9c17bff1":"code","3efe4f6c":"code","7ab6879b":"code","a94fa19f":"code","bea20190":"code","eff15444":"code","c47d1fb5":"code","09f83acc":"code","4c14c6d3":"code","91604706":"code","ba031aaf":"code","e4ac4859":"code","684f0661":"code","ec6b9ad0":"code","bc6f18bb":"code","afce4888":"code","49a1b732":"markdown","6477a674":"markdown","a81b44fe":"markdown","c5b03390":"markdown","b1ae9b2f":"markdown","ca55badd":"markdown","12435f4f":"markdown","7cfe21d8":"markdown","2afd4d65":"markdown","150f3bdd":"markdown","b65d233b":"markdown","e5716205":"markdown","2235c6e1":"markdown","aaee85a9":"markdown","21b4a86f":"markdown","16c0d21e":"markdown"},"source":{"fcbd3c71":"import numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport tensorflow as tf\n\nfrom keras.preprocessing import image\nfrom tensorflow.keras.preprocessing.image import ImageDataGenerator\nfrom tensorflow.keras.layers import Dense, Flatten, Conv2D, MaxPooling2D, Dropout","ddc639d1":"cifar10 = tf.keras.datasets.cifar10\n(X_train, Y_train), (X_test,Y_test) = cifar10.load_data()","069e9e68":"classes=['airplane','automobile','bird','cat','deer','dog','frog','horse','ship','truck']","2aa18734":"plt.figure(figsize=(12,12))\nfor i in range(100):\n  plt.subplot(10,10,1+i)\n  plt.axis('off')\n  plt.imshow(X_train[i],cmap='gray')","9c17bff1":"from sklearn.model_selection import train_test_split\nx_train,x_val,y_train,y_val=train_test_split(X_train, Y_train,test_size=0.2)","3efe4f6c":"from keras.utils.np_utils import to_categorical\ny_train=to_categorical(y_train,num_classes=10)\ny_val=to_categorical(y_val,num_classes=10)\ny_test=to_categorical(Y_test,num_classes=10)","7ab6879b":"x_train = x_train\/255.0\nx_val = x_val\/255.0\nX_test = X_test\/255.0","a94fa19f":"print(x_train.shape,x_val.shape,X_test.shape)\nprint(y_train.shape,y_val.shape,y_test.shape)","bea20190":"train_datagen = ImageDataGenerator( \n        rotation_range=10,  \n        zoom_range = 0.1, \n        width_shift_range=0.1,  \n        height_shift_range=0.1,\n        shear_range = 0.1,\n        horizontal_flip=True,  \n        vertical_flip=False\n        )\ntrain_datagen.fit(x_train)","eff15444":"from keras.callbacks import ReduceLROnPlateau\nlearning_rate_reduction = ReduceLROnPlateau(monitor='val_accuracy', \n                                            patience=3, \n                                            verbose=1, \n                                            factor=0.6, \n                                            min_lr=0.00001)","c47d1fb5":"vgg_model = tf.keras.applications.VGG19(\n    include_top=False,\n    weights='imagenet',\n    input_shape=(32,32,3)\n)","09f83acc":"vgg_model.summary()","4c14c6d3":"model=tf.keras.models.Sequential()\nmodel.add(vgg_model)\nmodel.add(Flatten())\nmodel.add(Dense(1024,activation = 'relu'))\nmodel.add(Dropout(.25))\nmodel.add(Dense(1024,activation = 'relu'))\nmodel.add(Dropout(.25))\nmodel.add(Dense(256,activation = 'relu'))\nmodel.add(Dense(10,activation = 'softmax'))\n\nmodel.summary()\n","91604706":"optimizer = tf.keras.optimizers.SGD(learning_rate=0.001,momentum=0.9)","ba031aaf":"model.compile(\n    optimizer = optimizer,\n    loss='categorical_crossentropy',\n    metrics=['accuracy']\n)","e4ac4859":"result=model.fit(\n    train_datagen.flow(x_train, y_train, batch_size = 64),\n    validation_data = (x_val, y_val),\n    epochs = 30,\n    verbose = 1,\n    callbacks = [learning_rate_reduction]\n)","684f0661":"acc = result.history['accuracy']\nval_acc = result.history['val_accuracy']\nloss = result.history['loss']\nval_loss = result.history['val_loss']\n\nplt.figure(figsize=(20, 10))\nplt.subplot(1, 2, 1)\nplt.title(\"Training and Validation Accuracy\")\nplt.plot(acc,color = 'green',label = 'Training Acuracy')\nplt.plot(val_acc,color = 'red',label = 'Validation Accuracy')\nplt.legend(loc='lower right')\nplt.ylabel('accuracy')\nplt.xlabel('epoch')\nplt.subplot(1, 2, 2)\nplt.title('Training and Validation Loss')\nplt.plot(loss,color = 'blue',label = 'Training Loss')\nplt.plot(val_loss,color = 'purple',label = 'Validation Loss')\nplt.ylabel('loss')\nplt.xlabel('epoch')\nplt.legend(loc='upper right')\nplt.show()","ec6b9ad0":"y_pred = model.predict_classes(X_test)\ny_true = Y_test.ravel()\nprint(y_pred.shape)\nprint(y_true.shape)","bc6f18bb":"from sklearn.metrics import confusion_matrix, accuracy_score\nprint(\"Testing Accuracy: \", accuracy_score(y_true,y_pred))","afce4888":"cm = confusion_matrix(y_true,y_pred)\ncm","49a1b732":"### Load Dataset","6477a674":"### Predictions","a81b44fe":"### Using the VGG19 Model","c5b03390":"### Accuracy","b1ae9b2f":"### Plotting the Accuracy and Loss","ca55badd":"### Categorical_crossentropy: Used as a loss function for multi-class classification model where there are two or more output labels","12435f4f":"### Image Augmentation","7cfe21d8":"### ReduceLROnPlateau - Reduce learning rate when a metric has stopped improving","2afd4d65":"### Importing Libraries","150f3bdd":"### Viewing some Images","b65d233b":"### Defining Classes","e5716205":"### Confusion Matrix","2235c6e1":"# Transfer Learning - Using VGG19 for Cifar 10","aaee85a9":"### Modify the poutput layer to suit with the dataset","21b4a86f":"### Splitting the dataset so that we can validate and finally predict on the Test dataset","16c0d21e":"###  Defining Optimizer - SGD - Stochastic Gradient descent (with momentum) optimizer"}}