{"cell_type":{"5dfc5995":"code","e344d5bc":"code","4ef8a946":"code","44ed91c1":"code","da71f752":"code","1f544bf6":"code","c0804d74":"code","00529edd":"code","2cbb1196":"code","d2dc5504":"code","e3afe27d":"code","d6b0dad9":"code","cafc318b":"code","2be7d907":"code","eda31baf":"code","0b4a45b9":"code","7f79f64a":"code","8376f31b":"code","1145a364":"code","feee4f31":"markdown","26088871":"markdown","9238ad99":"markdown","8faad0d3":"markdown","dd75dfc7":"markdown","2c44f41f":"markdown","f6fccef4":"markdown","d3f26d0b":"markdown","052d2095":"markdown","256d616f":"markdown","2b39a312":"markdown","7f78601c":"markdown"},"source":{"5dfc5995":"import tensorflow as tf\nfrom tensorflow.keras.layers import Input, Lambda, Dense, Flatten\nfrom tensorflow.keras.models import Model\nfrom tensorflow.keras.applications.xception import Xception\nfrom tensorflow.keras.preprocessing import image\nfrom tensorflow.keras.preprocessing.image import ImageDataGenerator,load_img\nfrom keras.optimizers import RMSprop\nfrom tensorflow.keras.models import Sequential\nfrom tensorflow.keras.callbacks import EarlyStopping\nfrom tensorflow.keras.models import load_model\nimport numpy as np\nimport matplotlib.pyplot as plt\nfrom glob import glob","e344d5bc":"IMAGE_SIZE = [224, 224]\n\ntrain_path = '..\/input\/tomato\/null'\nvalid_path = '..\/input\/tomato\/null'","4ef8a946":"xception = Xception(input_shape=IMAGE_SIZE + [3], weights='imagenet', include_top=False)","44ed91c1":"for layer in xception.layers:\n    layer.trainable = False","da71f752":"folders = glob('..\/input\/tomato\/New Plant Diseases Dataset(Augmented)\/train\/*')","1f544bf6":"folders","c0804d74":"# our layers - you can add more if you want\nx = Flatten()(xception.output)","00529edd":"len(folders)","2cbb1196":"prediction = Dense(len(folders), activation='softmax')(x)\n\n# create a model object\nmodel = Model(inputs=xception.input, outputs=prediction)","d2dc5504":"model.summary()","e3afe27d":"optimizer = RMSprop(0.001) #learning rate = 0.001\n\nmodel.compile(\n  loss = 'categorical_crossentropy',\n  optimizer = optimizer,\n  metrics = ['accuracy']\n)","d6b0dad9":"train_datagen = ImageDataGenerator(rescale = 1.\/255,\n                                   shear_range = 0.2,\n                                   zoom_range = 0.2,\n                                   horizontal_flip = True)\n\ntest_datagen = ImageDataGenerator(rescale = 1.\/255)","cafc318b":"# Make sure you provide the same target size as initialied for the image size\ntraining_set = train_datagen.flow_from_directory('..\/input\/tomato\/New Plant Diseases Dataset(Augmented)\/train',\n                                                 target_size = (224, 224),\n                                                 batch_size = 32,\n                                                 class_mode = 'categorical')\n\ntest_set = test_datagen.flow_from_directory('..\/input\/tomato\/New Plant Diseases Dataset(Augmented)\/valid',\n                                            target_size = (224, 224),\n                                            batch_size = 32,\n                                            class_mode = 'categorical')","2be7d907":"# fit the model\nes = EarlyStopping(patience=20, restore_best_weights=True)\n\nr = model.fit_generator(\n  training_set,\n  validation_data=test_set,\n  epochs=30,\n  steps_per_epoch=len(training_set),\n  validation_steps=len(test_set),\n  callbacks=es\n) ","eda31baf":"valid_loss, valid_acc = model.evaluate_generator(test_set, steps=len(test_set))\nprint(f\"Final validation accuracy: {valid_acc*100:.2f}%\")","0b4a45b9":"# plot the loss\nplt.plot(r.history['loss'], label='train loss')\nplt.plot(r.history['val_loss'], label='val loss')\nplt.legend()\nplt.show()\nplt.savefig('LossVal_loss')\n\n# plot the accuracy\nplt.plot(r.history['accuracy'], label='train acc')\nplt.plot(r.history['val_accuracy'], label='val acc')\nplt.legend()\nplt.show()\nplt.savefig('Acc-Val_acc')","7f79f64a":"model.save('model_xception.h5')\nprint(\"Model saved successfully...\")","8376f31b":"y_pred = model.predict(test_set)","1145a364":"y_pred = np.argmax(y_pred, axis=1)\ny_pred","feee4f31":"# Fitting the Model","26088871":"# VGG19 Model","9238ad99":"# Model Summary","8faad0d3":"We don't want to train all layers so keeping that parameter equal to \"False\" except the last layer.","dd75dfc7":"# Validation Accuracy","2c44f41f":"# The End","f6fccef4":"Adding last layer with 10 outputs and using softmax as an activation. ","d3f26d0b":"Create data generator for training and testing set. Augmentation process is only done for training dataset.","052d2095":"# Importing Libraries","256d616f":"# Reading Dataset","2b39a312":"Using RMSProp as an optimizer with learning rate as 0.001. Keeping learning rate constant throughout.","7f78601c":"# Prediction"}}