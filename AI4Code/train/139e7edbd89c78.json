{"cell_type":{"bf0076f3":"code","667ff06b":"code","712270e1":"code","3c965ad1":"code","a1408290":"code","1cc9bb50":"code","0fffb7d2":"code","bacb3c32":"code","18e8521b":"code","dd428fab":"code","e9f80983":"code","95fa2908":"code","c60ce524":"code","1720e8d6":"code","8e7caae9":"code","abd5fb35":"code","f1980086":"code","1fefe8cd":"code","173e99a4":"code","f7eae0ee":"code","22ea3592":"code","503ca588":"code","1055ad70":"code","487df62c":"code","32abb30e":"code","458c370b":"code","d2821a7a":"code","051e49e9":"code","b09b2da5":"code","ecfcbddf":"code","78293e73":"code","3ba4c564":"code","f51701ef":"code","d380a261":"code","129839d1":"code","a1370aa5":"code","2310e32a":"code","45087bd1":"code","1289dc85":"code","5727ba99":"code","cac97833":"code","66a10460":"code","f8edfba7":"code","d5018a41":"code","370916ae":"code","c4f33f67":"code","9420ced5":"code","4df5166c":"code","e662d15b":"markdown","e6251c1f":"markdown","6891ef48":"markdown","2a4e1657":"markdown","af1ec2bb":"markdown","0d0150a1":"markdown","7ecb32db":"markdown","8403c242":"markdown","03514b07":"markdown","be25da6a":"markdown","901db4a7":"markdown","8308e9f1":"markdown","3c352ad9":"markdown","fbad3455":"markdown","cf0d90cf":"markdown","e4cac659":"markdown","63d1c8d7":"markdown","290434c3":"markdown","3e400c45":"markdown","658a8573":"markdown","d6928c71":"markdown","4494ba8f":"markdown"},"source":{"bf0076f3":"from IPython.display import Image\nImage(url=\"data:image\/jpeg;base64,\/9j\/4AAQSkZJRgABAQAAAQABAAD\/2wCEAAkGBxMSEhUQExIVFRUXFRcVFRgVFhcVFRUYFxUXFxUVGBcYHiggGB0lGxgXITEhJSkrLi4uGCAzODMtNygtLisBCgoKDg0OGxAQGC0lHyAtLS0tLSstLS0tLi0tLS0tLS8tLS0tLS0tLS0tLS0tLSstLS0tLS0tLS0wLS0tLS0tL\/\/AABEIALEBHQMBIgACEQEDEQH\/xAAbAAACAwEBAQAAAAAAAAAAAAAAAgEDBAUGB\/\/EAEAQAAIBAwIEAwYCBwgBBQEAAAECEQADIRIxBAVBURMiYQYyUnGBkaGxQnKCwdHw8QcUIzNDYqLhsiRTksLSFf\/EABkBAQEBAQEBAAAAAAAAAAAAAAABAgMEBf\/EACcRAQEAAgICAgAFBQAAAAAAAAABAhEhMQMSQVEiYdHw8QRxgZGh\/9oADAMBAAIRAxEAPwD4bUxUVIoAMe9N4h7n71AjO\/p\/3S0D+K3xH7mjxm+I\/c0tRQP4zfEfuakXG+I\/c1WKk0DeK3xH7mpF1viP3NV02oxEmJmOk94oG8VviP3NBuN8R+5qupoLDcbMM0DufpUeI0TqP3M0gooHF1viP3NT4jfEfuaStNkUFBuN8R+5qPGb4j9zWw2xFK1sZYeXMqBMb7TMiB1ycfWgy+M3xH7mjxm+I\/c0pqKB\/Gb4j9zR4rfEfuajH4fjUE0DeK3xH7mjxW+I\/c0aRpmczEQdo3nakoH8VviP3NHit8R+5pKkUD+I3xH71Hit8R+5qVSoYUB4rfEfuaPFb4j9zSVNA\/it8R+5qPFb4j9zSg12vZr2cu8YXFuBotu51ED3VJxO9Njj+K3xH7mjxW+I\/c1FxYJHrUA0DeI3c\/c1dwxJnJ6VQDiK0cCN\/p++gy1JNAFRQSTQDUlag0EqP6+tRUUUEsIxUVIqKCRThaFA+vzxHaI3+tXhaCkrSFavIoYYoM4oAoNSI9SKAWtiDp\/3WIVptPQayuKpmrkMiqblBjujNQqiDkCNhnOdhA+ue1SWIMikoCiimVd8gR885AgfnntQLRRRQFW2rdWW0mSY\/L7AVLsBQJcaKpJqWNLQSKttWmcwoJ6nt8z0rs+zPKna9afK+cFcCZEEYP8A39N69Tb9jbwAAhUgt7nvAELOXE5+tB5LheSCdLuNXwghekyXbAEV0eB4dUUXUVtLak1K5z5ZIEnOD8q9Hwfsc2oqLyap0Nm2GBPU+cxGROwmKwe0HK38RNLa\/GBuEyIGokHAHl+Xy71LKvDyXNuWeGBdWSjHTn3g0SQe\/XPoe1c2fwr2PtTotcMtkZJYRO+PMzR9fxrx1as12zLsGtPBHf6fvrMau4domoqiiiigYt0mlqaigKKKKAoqQaBQNbNaNVZg3T61atBbp61PShTUigy3Eikmr+L6VnoGFOO\/9arpmEdQdjjpjag3cO9V8Q1FiYmKq4k0FBqKBRQSRUU2cH8emOn5UtAVIqKlRNA4u0uTS1p4Hg7l1ilq2ztBaFBYgKJY42AA3oM4UnEZr0\/J+XWrdu696PEVA1uT5Q2uCvZjGfpjvWz+z32dPFeLdJgJCqTk4BZwM9FA+4HU17rjuXreu2eWolsRb1llEFRkCT3Zj1PWaurpN8vn3D8xZLiuoXHnGpWhtOQIBBAn9LBzjetg54Qt1nuuLmkeEQdz4nmAiJ8pbfAr1t3+zzVEMkkGJLDaQThsYB+1LyfgtN27wKWrD+Hpd3YMSWue4mQeh\/OpMavtK8La427d8hLeZtR8zEkAjf65+dd1SlhDcczAzqkzBiJkEdQI\/fIublycKzaiDpIJYz5l+cdiflJjNeL9ouateYKJCLsD1Pc\/z1rpjj6zdYuXtdRh5lxzXnLt8gOwGwrKKiiudu2zEb52\/GoDVFFAUUUUBUigURQANRUipViMgx8qBakioooJq62elUVbbFBoUVZFVo1XMkKT6UHPutJpKmigitHBAas1SRQhgzVg7t9BoMCuFXUTigRjPpVnBcgu3Fe4RACsyjq0AkY7Y\/L50zsiYyuNFRTVEVFMzDMSB6mT67RS0RRFAAUAVcLThWYBtE6GI90mQdJIwcgH7UJwjnTCMdRIXB8xG4HeKCP7s+jxdJ0atGqMaonTPePyPaut7P8ACsri4bjW5DCFJDOIhlPZTsZrocp5bbs5veZsMVA1BIB+jNB22\/OvS8t5SeIYtaViCToe55QzDMgLMgSB8x61Pyh+dUJzi5Y4fwba27YOsIVnWJ3YdjA39KxWebXhcuXfEYO5QMYzCHUo9B6dZA2qznXA3OHYNd0FiDGkkgRG5MRAmubZtli7kgAe9t2wP67Vn8W2uHTfmvEuS7XNTCYICqFGls4Ag5MEZ27Vq4L2hvedkFtdTHxrpWSxXInVIxqIgACslm+PDX3RbQuPMoOqQBq2ycYmcgGK4nHcUXhVGm2Nl7+p711xxvdYys6h+fc5fiHJZpWflqjqQNvlXnOKbzRXTK1x2M5q51MYAakdP56\/hS0VhowaDI\/EA\/gaWpFRQTQw+tNFTpoEAqSP+6sUUaauhWBRFXi3UFKaRTFSFp9NMq99usbxTQrC1ZboIoimhotCtHFN5M52A+mBWFSRVl25IAn+tXQzaakJTxRFNCvTXQ5DwyXL6W7gkPKjMeaPLt64+tY4qyxeZGVl3Vg4+akEflUs3Fnb6FwPs\/ZDCEAkkfjiuqbQS6E2jb0P6Q+W\/wCNShDIt1NjDr8mhh+BpuYHU4buB9xj+FeL2uU1Xr1JeHy3nnL\/AAOJu2TgK5iMwreZY\/ZIrCuOgPz+c\/MbdK9j\/aLw03LPER76FG\/Wt\/xVh9FrySrJyQo7kGBj0Fevx32xlebOaysIqFjCrJOwUE\/Yb16Plnsu0LcvIxn3LS4d8iAxwEGe8\/KqeW2zavtaTzQmokgDKgPqB\/RUjy5P6XrFe+ucWRMFQqHAEscBYx0\/R77it6c9reTezBvQLmlbaxFtYCjquqPe2nECQcmTWj2stK9hRw0SrAalEsQ1rUAABIxpwB1rfc5zbt6gCdQuFk1CAiwbbSZlydDMNX\/uJ2x5zi+YlL1wMzGDc17nU7KysBONOQQvpBmBWblJxO1kt5rzvCcL4barii8ATKeILZY6iIJgkL72AK9UfbgpaIHDLaZQAgW4GQAbYCrGAYx0rJwvL0UJxPET4Z9xQYe6FIlRGUBBMGOnTBLvy+2sm94iM4127VtUJUGSmu4w6htgCY9a6Y8TXyzlzzenjuYcUXPiONbdW6vgDMYHzAHrV9jhgi+I7HSf0ernHQ\/KujzG2nCgq6wxhtOJbUAyn5QQa5Z1MTcuyCJCqQIDK0FCrbkHTK9nk7AMmEnNuy576TxDG4NbEBc6FExgx0HXP26CJ59ytzuXx9pIwO5OJMADUegHYVz71arMVk1h4qyBkda2vVPFpIxmMn0mubtrUYdGCZG4EZkzOdogQOvUb5hStWRUEVNMqiKinNLUVaBTRUgU7Ge2ABgAbd4GT6nNaQqrV6gCZE4xmIMjPricetVCnJqgWmZKVFq0jFBlimI9en8ipNRQRFC5MDNMKThn0PHrQaLvCELNZbTTXXuNqUj0ri28NFLwkXUUxJ\/dUUEUVNFFfUP7OrovcKLZ3ts1v6El1\/8AIj9munzbhSoDdjP8fwrxn9mHMPD4lrROLqY\/Wtyw\/wCJuV9G51dXT9f+\/wB9fO8m8fN\/d7ML7YR5T2n5f4\/DRIXSyvJmABIYwN\/Kxx\/CvJcDy21dItradjPvajmehAO+NhO\/1r23BseKRrFpSSQEJIhQGkZJ7Lv866Ifh+WqyW1W5xUBLYCFmJlioA3VZOW3Ig5kCvV4ZlJy4eay3h5H2n4N+EZbZlC9pCe7YNvzttICRE4JPU1y149gFZpMgFVM6SuobQZIJUZ\/2iNq63tE7KTc4p9fFXASqggeGNTFXYjqCYHTEDAxjs8ufinDjVdc27ZwCSSlpA59cqTPqK6WW1zlki7irrPdMCBoQj\/aHthoncnzHfNejVV4dhxF0re4hx4iWwQVRg7amvDEAEjA3kgQfMMN7hrCotm0fFusZ1pqCoASNAUiWLTPfbbauhy3l4slECK99oKKxRrWh7THU5n3xghTtjBkVvHGdzr9\/wDGMsvtj5fbuW3LNbLXolSymVhgwYKdxpB37k9KTmXNBwblBD8SSAp1grbYsrK+o4aRIM\/F6GcHM+dut1hYvG5cBJN5iQEBbTqYnIywXsJrhNcW1rVlLXJKsGBAcagQbkNqAKEg2xBVkUk7iumVk4jMlvaWdcXbhF12AIBmIIYEdMAEicFWQFZHmqm0CYk9FExsAAomBsBFVDUxLuxJOWZjLNkAnJ8xrSpGBsBOTuTHoOsYHSd+tZi0zDE\/zMZrLHWr7rztWXiLgGPvTKtYT5UmWJq2BoZdQDEDPcDp+FZnuEmKpczmsNWqyKiKalNEIaQ05pYqDTFFO29LWhJUgA99vpioWiKBRGi2lF2ns7Ut6ispoBqTUUQUhtMT5VJPoCfyp66vsxdC8QgOzgp9Tlf+QWpldTbWPNZ+F4W8\/lCEfMRGYr0PKPZVV\/zMswK+iyCP3716fhbIDAx1z9c\/vq\/jl0XvTB+lebLy3KcO+PjkvL5LctlSVbBUlT8wYP40td\/254LwuLYj3birdX9oQ3\/JSfrXAr0Y5e0lcMpq6FApkQsdIBJ7ASfsK7HEcsW3YtXxdtuLi3ARubRC+Wf2mn+la2i7l3L7lhrd4IxuqwcLBCgAwVJ6k+nQmvZcv4G\/eQXOJci25VPLpDGSB+l+sAW+013bvFcMyJAttqQ3CxK6hER5dOoghbnX9HY9OFzSxdvsdTPa4aADrMO4lm92cZMAEAwBPas5YTe7CZ3qNd\/nnhP\/AHPgEQsRoZyQLdsqZOThjAee3rtXl+N4tOGlbJNy83+ZfYSZ6hZ3x\/OK08XeRVFq0ukaRMRqds+ZiN8k4MjOKXguUMbdziHZEW2A8uYB1Np0oP0iTI+YjepLvn4WyRVyjlFziCpfCqADcfVpWWe5qutmDqZvoBOxNdblvE3Sw4bhPLrJtMwI13cgYYxoXy4HSTnJrHwguOBbDMFZl8uoqpOyyCYGWOTWqzfNq1cUPptuPOSsAlDq8OYxBPcdJrrMNznr99\/o55ZaW8LcSwlvwZ8YIHa5lTZYYZEgw26+b598eb5vzPxPJZMLqVWumSSzEkQFknIIlQfxqriuON\/yKClkT7vvuNJY5jZVUt5uitGTFci5xbBfDBECQSuFIgo2mAIVl06pksVBJ6DVz+Ikx+accQbepAMSfK51m28aHkQEZiJUypEHuJCC2Y1sfe8wnLPJcavUa0IJJnPWk8I22hlBI3RtQ3XBOkjoQRB6Zxg2kmdb5JznOo+Uw0MGUFTv12HUjDRrW2SYHT17DtPeKc3SekdgPmT8zmd6qGcn0Aj0gflVtpOtXazHaLjaRJrnoSzfWm4y\/qONht6+tV2DmstW\/EOo94\/P84qphViNgj0qs0RXFBFNRFBURTWl3pitW8Mu\/wBP31BDVBqTUVpEUUVE1Bos3KLz1Q6sBMUqPIoqSaZxFGnareJGaIopkuFSGUwVII9CDI\/GpuCkig+xcGq3UW6vuuiuPkwmPpMfSquYmSrdRg1n\/sz4oXOG8MnNpmT9lpuKfvrH7NbObppP1r5kuvJcHu3vGZPM+33C6rFq8P8ATYof1XEj7Moj9avGcFwhuGAQBIBJ6ajAEdSYOK+m8x4XxeGu2viQlZ+JfMv\/ACAri+x3LFtOS5Vi6YUgGQNMsvUQW07iZIiM17P6e7x19PP55q7HIOWg29IUtLABMliw1nMR5YUHTKg4ndo93ybkZtab1wIphgFQKlufIXB0gC40gRIxJy2TUci4nh7IvsihgNKyq6TquaQvyUMw3xBmuH7X+1iMEZGPia\/FKj3bZZdmA3YHSYyPLntXbrmuPfEeQ5wLtvibltWcAXHRQrMJBuMQgAOcnbqTW7mPLeIsrb8RvO+ptLMWZAsBS0nczt0zVfJuPueI18qrOxnXcmQepEER9Ix6Yrr884W7ae27urPcHiQrSyQcKQdvywakxmt1bedQnLuX2ratc4liGgFbQBFy5qAKk\/AuRvkx0waqZXuyzmAFG+EBVSUBgQCQpgAAT6bV8Fw\/mm42kke+QWGFhdsxqGmRtnGIq3mPE6OHHjDQz2giW7epLt3Wpa25hdLgEgdCcfOu0w1zf4crlvpdf4y3a8zFxaIXXkKzjBZRgg+dTGDsMTXmuLuNeUu8KirqVDKjOnQ9zTmWkQOupWkqGNczmnM7nENrc4zpUQFWSSdIGBknYdapta3K2wdyqiSFWSdK6mMARMamOAYkCpllvpccdLLvGuym2uFJyoz1VtAAwqBw7KoAjW2TvRbcWxqB\/wASQwYe6gi26spBBFwMGUyCB0zkKLwVIQZMMXKw4MKdK5OkAhvMILBjPQBrloKIJlpzBBVRHcSGmRkHEEGZxmRoeAbcFgAwPuGCRpJBDruhkRpYAkGdqN8kycDvgCBnsBAA7DpFK1sznfqDMj5zV9pKbamOzWrdZuLv\/oLsN\/4U\/F8THlXfqe3pWICo1b8QhqUMUEVEUYPSUwFLQFMv3qKkUERVlgb0tW8ON\/pRVZFLFWxUFaqKiKXgHAOauK1kfyvP1qVXX4vKGK4\/DnMVvXiZEASewzWjl\/IXYF28uCUHUkg6Z7CazllJzTGWs1tZFPxNvIo4cZrddsE6YBJ2gCSSegHWto51xcGqYro8XwrWyyOpVgYIO4wCPwqrheHDnTMGDpEe82k6VnpJgZ700PQf2bcw8LijbJxdWP2k8w\/46x9a977SEBdRPSZ\/fXzXlfLHV0f3Xw6YmIiCBsW+f4nb3LcDcuANcO2fMADBUnzSRE6cD5Dc15PL4Pbye0\/y74eWY46rObtxlNtF8xHl\/I46R3OM0vEW\/At2EJAuYHiRsVHmXu2qfd6kbiK9FwPEcNwy7ydGpiwxB1Aj1MQQBEfWvH8x4y5cY3UH+HbZmLtJVyQAEjBOwwANzOTXbCTHiOeWVy7ci3zi4NaLccWmAAUhNTDy4OkYiJ36DNNyjk9y\/dGldzMbBRJGpjsFEjzVs5JyTxXZmIt2lOprlz3LSmTDHYtg46mNproHmLECzwupFOCw9+8TsHAkGJIAA61uY889\/X6sW\/TpX7lvgrRsIAeLOLjgqy2lIygGRMEiN5g9gOUbYGu9dJLsZaMXCXTUjwRlNszt9JjgwiANGpwwOll1I6wSSTM\/1mcVk5rzk8OGRfPeEJqkstkFXU22BGkkiYjbTIrvMfXm9uVu+I08w5meGK22Ae6MWrZMG27OCCekSJgyPMfWvL8ZxHma5dOu40kFTCgEn3cBrL27qdvMJHumXx2+Lw0jUzSGJkhlYZVhMYYKykRBGZwAMhb\/ABLrNkYLS1x\/K4RhqI1JqTQWk6exiK55Zbbk0quFn1XDnKqSAAoJU6RCgASEP\/xNXM2o+HaDaTKgCddxdZdPEAMMwEbCPKO00Q11lVRgErbUsIRWuFghuNAjU8amPWos3tI8ohs+acgShXSIlGBU+YGSHI+cUOFC6QAzEAlpJAkSAsR0MNIOVwe6LRFOtLWscdnRaS\/xEYG\/5Uly52qnTUatV0xpitBWqwQ1FOVo00ERS1YBQVoEipAptNGmgiKttdaWKkUCi+vf8D\/Cjx17\/gf4VkqQKm1avHTv+B\/hXT5Bwti+7K41ELqX3hgEA9p3FcQW66HIrnh30Y+6Tpb0VhBP0mfpWct2aJdPQ\/3FLQJRQNsxWqzkT1x+dWcXZI1IdxI+1ZeEYiPn++vBnvbtjZZtwuaItu6w9dQwdjkfnXuvZ7h+HucPC6hfHmaQfNbkSFnywQdJBzma8t7T8J\/l3AN5Q\/mPzP2rd7L8YU4iwse8Gtn9pGj\/AJBa93iz9sY45zW272mtF1scYbbWw6+GQ6kNbuMWNlmxlCdpjaeoFcrlfBC0y3dydGksD5QygPjoQWj6Gt\/KSE4jiLd5zct33IaTqAGom1ckz5l8ufQdq1cTwptko+6YMdZzqXqZAn5Vc89dGOP2t5VzQrabVpW4g8rEHOCUJ2nEY7R61zOfe0xvMIHk0kEsD1BU+UHCgQB2zWtLDXyAMBYLM3uqBkSNiR0+VcTh+IL3A0KxtuQpYSpUSBqzkriPn6CpjcrFskrRx1++4VnTSrrpVdmXBZLgByBPfuR1Brv8q5Pev2S966EtWkNwFhoVhb97QAIMRBbpOxrJzO1eteHxF9NStMK0jIGtAU6Kd46wQetZ7\/GcRxJKNcJ8jBU1BUCqpbSq4UYGFG8Adq6Sc8f7Yt45auc8yS4fD4dNFnT5lAkYZSDO+wWSeuoiNUVl4C4wDBEk6Q0gHVb0MG1qR7vYnbPyp1KhVNvUq513W8sB7Wm5ZYjysMEjYkE47cHj+YtcI4axmWIBAAa4TAgE5gwME9TtJnrNYxzu8nQ53zlk1+CwZtbauIUsmrxAQVVTEjDgkLjVB3FecXiQEgDJ1LcBko4j\/DuGW\/zFLPmIEKRnVMcPxj6PCUmGMCJ1QwKtbGfdeRKxkqvaouWQgKsPOexINsq7o6XEK+8dIODgEbyQOdu+25NJ\/u4UTckallVEhyGRjbuSVK6NQE51bxG4Ia4xPlGWPRLaTqfSv6KCdULjJgUcLw2qTIVBGpiMCZMDYM5CsQsgtpParbl6R4dsEL2HvXIzL6QNcGSJHlBiTuYqlLpC6RiZkiQzBtHkYz5llAQDsZNBMYB75GxG2JAI670pI+vUzj0gRioFS1rHFIoa4BuYqm9ejA3rPMmo3a2G6vxCg3U+IVjoNXbDWbq\/EKjxV+IVlalpsbDdT4hR4ifEKyE1FNjZ4qfEKPEXuKx0U2Nute4qPFX4hWOimzTZ4q\/EKPFX4hWOimzSQK28HYDGMn5CT9qw1ZbeKhXcTgVBUaLnXcQTjpvXf5GlpGYvYe4CpUAgYJBE7iftXkLPExW23xLHv96zXPVe+4fii\/8AoITABNwMJgRMhtzE5rYrWRYKNYtC5IIdXgAAGcNMV4W1fciJwOk4qbvMiv6X765bxvwayny9nxPE22TQ4ETMKViR6m3H41l4ThLIYOtvSyupEXEYEAzIVAAAD0mcbV5Ec7uT70\/Mn+NP\/wD2GO8fdv8A9V0k0z+Lb03M+TJcc3Ve+ggkBeGZlQjBkhgAfpPWsnEcquFjHjMPL\/pwzEZxLdu9cxeYqf0EPfNzPzhx+FF7jAx1FVG2BIGPrP40rUuTp80tsVFkMLNse8Dgt08x656Ck4G6vD+dFV3XzKchU6zpK5Mic4xtWReMUf6donuQD+ZihuN7osf7EUH7qPzq+yarTx3HPxjh3dFjCoAwS2ufdAHUk95mk4PlbsY1KR6SJ7b\/AMK3cNcsafMGEiJ1BCJ6jUN6vcW512oOQTnVMYmJ09BsAN6e9k4X1324\/NeVXSpRXVV38MMSCV8s7yYmNsTWO57PXNGhIllPiYclgDbeGwVUBhIiCZMzFeo4\/mJI0+FaKr5Gi1amCfMciYzk0y8aSDkiMxqC7gjbr+VPa1rWnnF9mLiW9S3BqYMHOlxpUqytbHQhg2SRI0rpIzPPHs5cM+YYjoevUYzFess3f8OHKuDqkXCCCCRMjY9oH2pE5pbh202tRxkNIEjA6DrtNT2yjWo85xfJb9xpS35J0qqK0KoLFdWJJGo+ZiTmJOKou8ouKsHSokaupJBeDtKwGiOsT2jt\/wB8BBSbYXZcMcCMRAjrse1ZeO5gD1+0gRGxB3p7VdRwF4M6gCcSJYCYHUxue8Cuu\/IrY0\/+qs+suox3ImR0xHU9s43cHr3x0md4neqiQBGPnH\/dXbSrj+DtWyVtxdjJckhOpgCRP3+9c0r1IA9AQAPuSa2uw7D6j\/us7NB91T8\/61U00W+UO8NbRiI1QQfdjcEhQw9RVFu2skFlU9iASCCMHUYGxq9eecQq6FuuqCIVWIAgyADvg7dqxXL4bpn88zJzVZWPaHmbXbBmQDBLSegWQO\/Sl4Xhg8ywWASPKzSe3lGKqdgQMRHbr65mp\/vDTIOn9Xyj7CgVljrUEes1GqpViNjQBUjEUtP4p7n70eJ3ANAlFSa28s8L\/EFwgE2yFJXUFOpcgblokCI3JnFQYakqexyJHqO4rtcDx9mx4nhy7G2AGuKQjMLusjQpmCAkSRlM7xXK4rinuNqcyc9AN2LHb\/czH60FNSKiiqNPD7127fuL9fzoorlmLTtXK4jeiis4dl6VVNRRXZhp4WtlFFZqoO38+lKaKKikf3a6nId6KKvwO1d3+tUjdv1f\/stFFYx7by6V\/B+qf\/I1x36fL95oorqxFbVmu0UVlpmtbfz3pmooqrGW5VZooqqqekooqs0UUUUQUUUUBRRRQFFFFAUUUUH\/2Q==\")","667ff06b":"import pandas as pd\ntrain=pd.read_csv(\"..\/input\/train.csv\")\ntest=pd.read_csv(\"..\/input\/test.csv\")","712270e1":"train.head()","3c965ad1":"test.head()","a1408290":"train.shape","1cc9bb50":"test.shape","0fffb7d2":"train.info()","bacb3c32":"test.info()","18e8521b":"train.isnull().sum()","dd428fab":"test.isnull().sum()","e9f80983":"import matplotlib.pyplot as plt\n%matplotlib inline","95fa2908":"def bar_chart(feature):\n    survived=train[train[\"Survived\"]==1][feature].value_counts()\n    dead=train[train[\"Survived\"]==0][feature].value_counts()\n    frame=pd.DataFrame([survived,dead])\n    frame.index=['Survived','Dead']\n    frame.plot(kind='bar',stacked=True,figsize=(10,5))","c60ce524":"bar_chart(\"Sex\")","1720e8d6":"bar_chart(\"Pclass\")","8e7caae9":"bar_chart(\"SibSp\")","abd5fb35":"bar_chart(\"Parch\")","f1980086":"bar_chart(\"Embarked\")","1fefe8cd":"train_test=[train,test]","173e99a4":"for dataset in train_test:\n    dataset['Title']=dataset['Name'].str.extract(' ([A-Za-z]+)\\.',expand=True)","f7eae0ee":"train.Title.value_counts()","22ea3592":"test['Title'].value_counts()","503ca588":"title_map={\"Mr\":0, \"Miss\":1,\"Mrs\":2, \"Master\":3,}","1055ad70":"train['Title']=train[\"Title\"].map(title_map)\ntest['Title']=test[\"Title\"].map(title_map)","487df62c":"train.Title.isnull().sum()","32abb30e":"train[\"Title\"].fillna(4,inplace=True)","458c370b":"train.Title.isnull().sum()","d2821a7a":"test.Title.isnull().sum()","051e49e9":"test[\"Title\"].fillna(4,inplace=True)","b09b2da5":"test.Title.isnull().sum()","ecfcbddf":"train.head(50)","78293e73":"bar_chart(\"Title\")","3ba4c564":"sex_map={\"male\":0,\"female\":1}\nfor dataset in train_test:\n    dataset[\"Sex\"]=dataset[\"Sex\"].map(sex_map)","f51701ef":"bar_chart(\"Sex\")","d380a261":"train[\"Age\"].fillna(train.groupby('Title')[\"Age\"].transform(\"median\"),inplace=True)\ntest[\"Age\"].fillna(train.groupby('Title')[\"Age\"].transform(\"median\"),inplace=True)","129839d1":"train.Age.isnull().sum()","a1370aa5":"test.Age.isnull().sum()","2310e32a":"train['Age'].value_counts()","45087bd1":"for dataset in train_test:\n    dataset.loc[dataset['Age']<=16, \"Age\"]= 0\n    dataset.loc[(dataset['Age'] > 16) & (dataset['Age'] <= 26), 'Age'] = 1\n    dataset.loc[(dataset['Age'] > 26) & (dataset['Age'] <= 36), 'Age'] = 2\n    dataset.loc[(dataset['Age'] > 36) & (dataset['Age'] <= 60), 'Age'] = 3\n    dataset.loc[dataset['Age'] > 60, 'Age'] = 4","1289dc85":"train.head()","5727ba99":"test.head()","cac97833":"bar_chart(\"Age\")","66a10460":"Pclass1=train[train['Pclass']==1]['Embarked'].value_counts()\nPclass2=train[train['Pclass']==2]['Embarked'].value_counts()\nPclass3=train[train['Pclass']==3]['Embarked'].value_counts()","f8edfba7":"df=pd.DataFrame([Pclass1, Pclass2, Pclass3])\ndf.index=[\"1st Class\",\"2nd Class\", \"3rd Class\"]\ndf.plot(kind='bar', stacked=True, figsize=(10,5))","d5018a41":"for dataset in train_test:\n    dataset['Embarked'] = dataset['Embarked'].fillna('S')","370916ae":"embarked_mapping = {\"S\": 0, \"C\": 1, \"Q\": 2}\nfor dataset in train_test:\n    dataset['Embarked'] = dataset['Embarked'].map(embarked_mapping)","c4f33f67":"train[\"Fare\"].fillna(train.groupby(\"Pclass\")[\"Fare\"].transform(\"median\"), inplace=True)\ntest[\"Fare\"].fillna(train.groupby(\"Pclass\")[\"Fare\"].transform(\"median\"), inplace=True)","9420ced5":"train.Fare.value_counts()","4df5166c":"train.head()","e662d15b":"We can see Age,Cabin and Fare has missing value in test dataset.","e6251c1f":"## Defining Problem Statement\n**Analysing what sort of people are likely to survive using feature engineering and various tools of machine learning**","6891ef48":"### Fare","2a4e1657":"Categorical Data:\n-  Pclass\n-  Sex\n-  SibSp\n-  Parch\n-  Cabin\n-  Embarked","af1ec2bb":"Age has 177 missing values, Cabin has 687 missing values and Embarked has 2 missing values in the training dataset.","0d0150a1":"#### Binning the Age\n-  Child:0 :0 to 16\n-  Young:1 :16 to 26\n-  Adult:2 :26 to 36\n-  Mid-Age:3 :36 to 60\n-  Senior:4 :60 and above","7ecb32db":"### Visualizing Data for Explotary Analysis","8403c242":"We can see Age,Cabin and Embarked has missing value in training dataset.","03514b07":"## Predict Survival on the Titanic","be25da6a":"-  Defining Problem Statement\n-  Collecting Data\n-  Explotary Data Analysis\n-  Feature Engineering\n-  Modelling\n-  Testing\n-  Generating Submission File","901db4a7":"## Feature Engineering:","8308e9f1":"# Titanic : Machine Learning From Disaster","3c352ad9":"-  This Chart confirms that there are more class 1 survivor and class 3 are more likely to die.","fbad3455":"## Collecting Data\n-  Data set is available on kaggle platform and can be downloaded.","cf0d90cf":"### AGE","e4cac659":"\n### Bar Chart For Categorical Data","63d1c8d7":"-  It is observed that there are more female survivor than male","290434c3":"All the 3 class people are majority S embarked.","3e400c45":"\n### Data Discovery\n-  Survived: 0 = No, 1 = Yes\n-  pclass: Ticket class 1 = 1st, 2 = 2nd, 3 = 3rd\n-  sibsp: # of siblings \/ spouses aboard the Titanic\n-  parch: # of parents \/ children aboard the Titanic\n-  ticket: Ticket number\n-  cabin: Cabin number\n-  embarked: Port of Embarkation C = Cherbourg, Q = Queenstown, S = Southampton\n\n**Total rows and columns :**\nWe can see that there are 891 rows and 12 columns in our training dataset and 418 rows and 11 column in our testing dataset.\n","658a8573":"Age has 86 missing values ,Fare has 1 missing values and Cabin has 327 missing values in test dataset.","d6928c71":"### Embarked","4494ba8f":"## Explotary Data Analysis"}}