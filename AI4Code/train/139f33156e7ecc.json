{"cell_type":{"6d7dcaa5":"code","a005a4df":"code","f92f06d4":"code","bcab27b1":"code","739f7838":"code","e1f0cbb5":"code","7ed363c2":"code","c7f1618e":"code","66630d64":"code","0b48cf32":"code","98f7a081":"code","95da15d5":"code","297311e1":"code","30017d3e":"code","59b50471":"code","3dcbcb2e":"code","c4146b46":"code","f6a8c7b5":"code","54975aa9":"code","52701bc2":"code","f5747c99":"code","9c92c235":"code","757b41c7":"code","75afdaba":"code","a37800ee":"code","ca6311ca":"code","5bdbc7b9":"code","0df9b392":"code","2bdba41c":"code","d95db178":"code","4a4000de":"code","e92b1de4":"code","5ce914e6":"code","d488bb1a":"code","a8afe1d3":"code","3d40e53e":"code","f427087f":"code","470a10fb":"code","11b9c561":"code","e74e277d":"code","d4a57ff1":"code","e5fd8197":"code","8d36aa7b":"markdown","664dd740":"markdown","7487133a":"markdown","352e09e2":"markdown","c8bca6fe":"markdown","b24119c9":"markdown","e6f2898b":"markdown","ba36defb":"markdown","22bcd5c9":"markdown","5a1b23a1":"markdown","583f493e":"markdown","32d4267c":"markdown","da6352b4":"markdown","a1e6ff44":"markdown","2d743216":"markdown","a3041cef":"markdown","45d0217d":"markdown","f2fc04ed":"markdown","a8ddbda8":"markdown","d8250659":"markdown","9c59e7ea":"markdown","85b0471e":"markdown","e9869ad4":"markdown","301be0fe":"markdown","084a16e9":"markdown","65f37179":"markdown","701c87b0":"markdown","6660f6c7":"markdown","f655faa0":"markdown","bd1668cc":"markdown","224383a1":"markdown","2dd71664":"markdown","3201a90a":"markdown","0ed6cd58":"markdown","9d770960":"markdown","43215cdf":"markdown","785803ad":"markdown","ce3aeb33":"markdown","0adbbf51":"markdown","4482a8f7":"markdown"},"source":{"6d7dcaa5":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\npd.set_option('display.width', 1000)\n\n# Plotting Tools\nimport matplotlib.pyplot as plt\nplt.style.use('ggplot')\nimport seaborn as sns\n\n# Import Sci-Kit Learn\nfrom sklearn.preprocessing import LabelEncoder\nfrom sklearn.preprocessing import Normalizer\nfrom sklearn.linear_model import LinearRegression, Lasso\nfrom sklearn.svm import SVR\nfrom sklearn.ensemble import RandomForestRegressor, AdaBoostRegressor, GradientBoostingRegressor, BaggingRegressor\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import r2_score, mean_squared_error\nfrom sklearn.model_selection import RandomizedSearchCV, cross_val_score, StratifiedKFold, learning_curve, KFold\n\n# Ensemble Models\nfrom xgboost import XGBRegressor\nfrom lightgbm import LGBMRegressor\n\n# Package for stacking models\nfrom vecstack import stacking\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory\nimport os\nprint(os.listdir(\"..\/input\"))\n\nfrom IPython.display import display, HTML\ndisplay(HTML(\"\"\"\n<style>\n.output_png {\n    display: table-cell;\n    text-align: center;\n    vertical-align: middle;\n}\n<\/style>\n\"\"\"))","a005a4df":"def show_all(df):\n    #This fuction lets us view the full dataframe\n    with pd.option_context('display.max_rows', 100, 'display.max_columns', 100):\n        display(df)","f92f06d4":"# Bring training data into the environment\ntrain = pd.read_csv('..\/input\/house-prices-advanced-regression-techniques\/train.csv', index_col='Id')\n\n# Bring test data into the environment\ntest = pd.read_csv('..\/input\/house-prices-advanced-regression-techniques\/test.csv', index_col='Id')\n\nshow_all(train.head())","bcab27b1":"train.info()","739f7838":"train.describe()","e1f0cbb5":"# Plot missing values \ndef plot_missing(df):\n    # Find columns having missing values and count\n    missing = df.isnull().sum()\n    missing = missing[missing > 0]\n    #missing.sort_values(inplace=True)\n    \n    # Plot missing values by count \n    missing.plot.bar(figsize=(12,8))\n    plt.xlabel('Columns with missing values')\n    plt.ylabel('Count')\n    \n    # search for missing data\n    import missingno as msno\n    msno.matrix(df=df, figsize=(16,8), color=(0,0.2,1))\n    \nplot_missing(train)","7ed363c2":"# # IMPUTING MISSING VALUES\ndef fill_missing_values(df):\n    ''' This function imputes missing values with median for numeric columns \n        and most frequent value for categorical columns'''\n    missing = df.isnull().sum()\n    missing = missing[missing > 0]\n    for column in list(missing.index):\n        if df[column].dtype == 'object':\n            df[column].fillna(df[column].value_counts().index[0], inplace=True)\n        elif df[column].dtype == 'int64' or 'float64' or 'int16' or 'float16':\n            df[column].fillna(df[column].median(), inplace=True)","c7f1618e":"fill_missing_values(train)\ntrain.isnull().sum().max()","66630d64":"# Using the function written above to visualize missing values\nplot_missing(test)","0b48cf32":"fill_missing_values(test)\ntest.isnull().sum().max()","98f7a081":"def impute_cats(df):\n    '''This function converts categorical and non-numeric \n       columns into numeric columns to feed into a ML algorithm'''\n    # Find the columns of object type along with their column index\n    object_cols = list(df.select_dtypes(exclude=[np.number]).columns)\n    object_cols_ind = []\n    for col in object_cols:\n        object_cols_ind.append(df.columns.get_loc(col))\n\n    # Encode the categorical columns with numbers    \n    label_enc = LabelEncoder()\n    for i in object_cols_ind:\n        df.iloc[:,i] = label_enc.fit_transform(df.iloc[:,i])","95da15d5":"# Impute the missing values\nimpute_cats(train)\nimpute_cats(test)\nprint(\"Train Dtype counts: \\n{}\".format(train.dtypes.value_counts()))\nprint(\"Test Dtype counts: \\n{}\".format(test.dtypes.value_counts()))","297311e1":"corr_mat = train[[\"SalePrice\",\"MSSubClass\",\"MSZoning\",\"LotFrontage\",\"LotArea\", \"BldgType\",\n                       \"OverallQual\", \"OverallCond\",\"YearBuilt\", \"BedroomAbvGr\", \"PoolArea\", \"GarageArea\",\n                       \"SaleType\", \"MoSold\"]].corr()\n# corr_mat = train.corr()\nf, ax = plt.subplots(figsize=(16, 8))\nsns.heatmap(corr_mat, vmax=1 , square=True)","30017d3e":"f, ax = plt.subplots(figsize=(16, 8))\nsns.lineplot(x='YearBuilt', y='SalePrice', data=train)","59b50471":"f, ax = plt.subplots(figsize=(12, 8))\nsns.lineplot(x='OverallQual', y='SalePrice', color='green',data=train)","3dcbcb2e":"f, ax = plt.subplots(figsize=(12, 6))\nsns.distplot(train['SalePrice'])","c4146b46":"sns.catplot(x='SaleType', y='SalePrice', data=train, kind='bar', palette='muted')","f6a8c7b5":"X = train.drop('SalePrice', axis=1)\ny = np.ravel(np.array(train[['SalePrice']]))\nprint(y.shape)","54975aa9":"# Use train_test_split from sci-kit learn to segment our data into train and a local testset\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2)","52701bc2":"def rmse(y, y_pred):\n    return np.sqrt(mean_squared_error(np.log(y), np.log(y_pred)))","f5747c99":"# Initialize the model\nrandom_forest = RandomForestRegressor(n_estimators=1200,\n                                      max_depth=15,\n                                      min_samples_split=5,\n                                      min_samples_leaf=5,\n                                      max_features=None,\n                                      random_state=42,\n                                      oob_score=True\n                                     )\n\n# Perform cross-validation to see how well our model does \nkf = KFold(n_splits=5)\ny_pred = cross_val_score(random_forest, X, y, cv=kf, n_jobs=-1)\ny_pred.mean()","9c92c235":"# Fit the model to our data\nrandom_forest.fit(X, y)","757b41c7":"# Make predictions on test data\nrf_pred = random_forest.predict(test)","75afdaba":"# Initialize our model\nxg_boost = XGBRegressor( learning_rate=0.01,\n                         n_estimators=6000,\n                         max_depth=4, min_child_weight=1,\n                         gamma=0.6, subsample=0.7,\n                         colsample_bytree=0.2,\n                         objective='reg:linear', nthread=-1,\n                         scale_pos_weight=1, seed=27,\n                         reg_alpha=0.00006\n                       )\n\n# Perform cross-validation to see how well our model does \nkf = KFold(n_splits=5)\ny_pred = cross_val_score(xg_boost, X, y, cv=kf, n_jobs=-1)\ny_pred.mean()","a37800ee":"# Fit our model to the training data\nxg_boost.fit(X,y)","ca6311ca":"# Make predictions on the test data\nxgb_pred = xg_boost.predict(test)","5bdbc7b9":"# Initialize our model\ng_boost = GradientBoostingRegressor( n_estimators=6000, learning_rate=0.01,\n                                     max_depth=5, max_features='sqrt',\n                                     min_samples_leaf=15, min_samples_split=10,\n                                     loss='ls', random_state =42\n                                   )\n\n# Perform cross-validation to see how well our model does \nkf = KFold(n_splits=5)\ny_pred = cross_val_score(g_boost, X, y, cv=kf, n_jobs=-1)\ny_pred.mean()","0df9b392":"# Fit our model to the training data\ng_boost.fit(X,y)","2bdba41c":"# Make predictions on test data\ngbm_pred = g_boost.predict(test)","d95db178":"# Initialize our model\nlightgbm = LGBMRegressor(objective='regression', \n                                       num_leaves=6,\n                                       learning_rate=0.01, \n                                       n_estimators=6400,\n                                       verbose=-1,\n                                       bagging_fraction=0.80,\n                                       bagging_freq=4, \n                                       bagging_seed=6,\n                                       feature_fraction=0.2,\n                                       feature_fraction_seed=7,\n                                    )\n\n# Perform cross-validation to see how well our model does\nkf = KFold(n_splits=5)\ny_pred = cross_val_score(lightgbm, X, y, cv=kf)\nprint(y_pred.mean())","4a4000de":"# Fit our model to the training data\nlightgbm.fit(X,y)","e92b1de4":"# Make predictions on test data\nlgb_pred = lightgbm.predict(test)","5ce914e6":"# List of the models to be stacked\nmodels = [g_boost, xg_boost, lightgbm, random_forest]","d488bb1a":"# Perform Stacking\nS_train, S_test = stacking(models,\n                           X_train, y_train, X_test,\n                           regression=True,\n                           mode='oof_pred_bag',\n                           metric=rmse,\n                           n_folds=5,\n                           random_state=25,\n                           verbose=2\n                          )","a8afe1d3":"# Initialize 2nd level model\nxgb_lev2 = XGBRegressor(learning_rate=0.1, \n                        n_estimators=500,\n                        max_depth=3,\n                        n_jobs=-1,\n                        random_state=17\n                       )\n\n# Fit the 2nd level model on the output of level 1\nxgb_lev2.fit(S_train, y_train)","3d40e53e":"# Make predictions on the localized test set\nstacked_pred = xgb_lev2.predict(S_test)\nprint(\"RMSE of Stacked Model: {}\".format(rmse(y_test,stacked_pred)))","f427087f":"y1_pred_L1 = models[0].predict(test)\ny2_pred_L1 = models[1].predict(test)\ny3_pred_L1 = models[2].predict(test)\ny4_pred_L1 = models[3].predict(test)\nS_test_L1 = np.c_[y1_pred_L1, y2_pred_L1, y3_pred_L1, y4_pred_L1]","470a10fb":"test_stacked_pred = xgb_lev2.predict(S_test_L1)","11b9c561":"# Save the predictions in form of a dataframe\nsubmission = pd.DataFrame()\n\nsubmission['Id'] = np.array(test.index)\nsubmission['SalePrice'] = test_stacked_pred","e74e277d":"top_public = pd.read_csv('..\/input\/top-submissions\/submission (9).csv')","d4a57ff1":"final_blend = (0.8*top_public.SalePrice.values + 0.2*test_stacked_pred)\n\nblended_submission = pd.DataFrame()\n\nblended_submission['Id'] = np.array(test.index)\nblended_submission['SalePrice'] = final_blend","e5fd8197":"submission.to_csv('submission.csv', index=False)\nblended_submission.to_csv('blended_submission.csv', index=False) # Best LB Score","8d36aa7b":"## Import all the necessary packages","664dd740":"## Model Stacking","7487133a":"#### Lets make a plot to intuitively understand what's missing in our data and where it is missing.","352e09e2":"Oh looks like there are a ton of columns(features).","c8bca6fe":"Stacking (also called meta ensembling) is a model ensembling technique used to combine information from multiple predictive models to generate a new model which usually performs better.\nIn this project we use python package called **vecstack** that helps us stack our models which we have imported earlier. It's actually very easy to use, you can have a look at the [documentation](https:\/\/github.com\/vecxoz\/vecstack) for more information.  ","b24119c9":"i hope that was helpful. Thanks for being here, if you like this kernel **please upvote**. If you have any suggestions drop them down below. \n\nUntil next time, Happy Kaggling! :)","e6f2898b":"Note: I found that our standalone XGBoost model in itself gives a good score. I suggest you to check it out.","ba36defb":"Submissions are evaluated on Root-Mean-Squared-Error (RMSE) between the logarithm of the predicted value and the logarithm of the observed sales price. (Taking logs means that errors in predicting expensive houses and cheap houses will affect the result equally.)\n\n![RMSE formula](https:\/\/gisgeography.com\/wp-content\/uploads\/2014\/07\/rmse-formula1-300x96.png)\n \nWe will write a function named rmse to perform this task.","22bcd5c9":"#### Fixing the missing data","5a1b23a1":"## Modelling","583f493e":"It is clear that the selling prices for Sale types 2 and 6 are significantly higher than the others.","32d4267c":"#### Visualizing the relationship between SalePrice and SaleType","da6352b4":"#### Fixing missing data in test set","a1e6ff44":"### XG Boost","2d743216":"Now it is finally time to make predictions on the real world test data. The approach here might look strange to you. You can visit this [link](https:\/\/github.com\/vecxoz\/vecstack\/issues\/4) to understand how it is done. ","a3041cef":"## Data Exploration, Engineering and Cleaning ","45d0217d":"We'll start by building standalone models, validating their performance and picking the right ones. Later we will stack all our models into an ensemble for better accuracy.\n\nI just played with a number of models and ended up picking the following models which gave me best results personally. If you find a better way please let me know :)\n\nI tuned the hyperparameters by manually experimenting a lot based on previous experiences, saving you a bunch of time hopefully. Anyways if you find a set of parameters that can work even better let me know in the comments down below. ","f2fc04ed":"#### Now the test set also needs attention","a8ddbda8":"#### Visulaizing the relationship between SalePrice and YearBuilt","d8250659":"## Importing Data","9c59e7ea":"#### Final Prediction","85b0471e":"### Gradient Boost Regressor(GBM)","e9869ad4":"We can see that the SalePrices increase rapidly with houses with better overall quality which is pretty reasonable.","301be0fe":"## Define Evaluation Metric","084a16e9":"### Preparing the Data to do Machine Learning","65f37179":"### Imputing Categorical variables\nAs we have quite a lot of columns with textual and categorical data we have to impute them with numerics because ML models can only work with numbers.","701c87b0":" ### LightGBM","6660f6c7":"### Random Forest","f655faa0":"### Understanding our data","bd1668cc":"#### Visulizing the Distribution of SalePrice","224383a1":"## Introduction \n![featured image](https:\/\/storage.googleapis.com\/idx-acnt-gs.ihouseprd.com\/AR658975\/file_manager\/increase.jpg)\nThis Kernel is meant to solve the Housing Prices Challenge in a simple way, very much understandable for beginners at the same time being able to produce a great LB score.  \n\nPredicting Housing Prices is one of the very first things you must be able to do as at the start of your Data Science career. Our goal here is to build a machine learning model that can predict housing prices with good accuracy provided a great set of features which we'll extract from the training data for this competition. The performance of our model is evaluated based on a metric called Root-Mean-Squared-Error(RMSE). If you haven't yet read the competition desciption I strongly suggest you to go out and read it first up [here](http:\/\/https:\/\/www.kaggle.com\/c\/house-prices-advanced-regression-techniques\/overview\/description). One of primary objectives of this kernel is to make things look simple enough code-wise for beginners so that they can understand, replicate and reproduce better models in the future. Without further ado, let's jump right in. \n\n**And by the way if you like this Kernel please give it an upvote.**","2dd71664":"## Prediction","3201a90a":"We can see that the features OverallQual, GarageArea and YearBuilt are closely correlated with the sale price. That means these features play an important role in determining the SalePrice of a house. \nSimilarly a lot of inferences can be made just by looking at the heatmap but we're not going to go through each one of them. If you don't know what a heatmap is and wish to learn, I strongly recommend checking out [this video](https:\/\/www.youtube.com\/watch?v=oMtDyOn2TCc).","0ed6cd58":"You might have noticed a significant increase in SalePrices just after the start of the 21st century, which is pretty interesting. What's even more surprising is the late 1800s saw phenomenal increase in SalePrices but dropping way below even before the end of that century.","9d770960":"#### Prediction on Stacked Layer 1","43215cdf":"It's clear that most of the houses, about 80% are sold for a price in the region on 100,000 and 200,000 dollars. Looks like there are a lot of houses sold in the mid 100,000s which makes up most of the data.","785803ad":"We can see that there are a lot of missing values in a number of columns. I'll come on to fixing that soon. The target variable for us is the SalePrice. ","ce3aeb33":"#### Blending with top kernels","0adbbf51":"#### Visualizing the relationship between Sale prices and Overall Quality ","4482a8f7":"### Create Submission Files"}}