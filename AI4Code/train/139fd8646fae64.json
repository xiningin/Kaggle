{"cell_type":{"16d2b44b":"code","98741c6a":"code","1cab6a32":"code","ed3a79f6":"code","6d1630c1":"code","492cfc84":"code","ce879ce6":"code","04f44159":"code","e4a49524":"code","1c67ad35":"code","2d5771c2":"code","db17d095":"code","fb23499d":"code","1a940e43":"code","d06b839d":"code","beea7138":"code","9479e261":"code","dc60d9a5":"code","13874951":"code","6f1c98cb":"code","60e05bb4":"code","335987b7":"code","205229bf":"code","9a938d35":"code","14ca45d3":"code","b9e44d88":"code","cac28fda":"code","f6195a47":"code","a6c29451":"code","d562f047":"code","9e93f10c":"code","cb9c984a":"markdown","3ed58079":"markdown","a47988da":"markdown","3915f833":"markdown","eff986d0":"markdown","812b609e":"markdown","33ac50a5":"markdown","b5381c00":"markdown","22b4b92d":"markdown","3b473479":"markdown","f323e8a2":"markdown","70e1f3d3":"markdown","1a3e578e":"markdown","a07ffae0":"markdown","b9e94269":"markdown","6f7bfa81":"markdown","9cf84568":"markdown","a6ee4856":"markdown","abd9c7cf":"markdown","1a8f92bd":"markdown","fd9dfaa8":"markdown","0b040b36":"markdown","d08e263b":"markdown","0c4dcf94":"markdown","fe7ce6a9":"markdown","3fa8d262":"markdown","d983909c":"markdown","cb2ad149":"markdown"},"source":{"16d2b44b":"import pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\nimport seaborn as sns","98741c6a":"def visualizer(x, y, plot_type, title, xlabel, ylabel, rotation=False, rotation_value=60, figsize=(15,8)):\n    plt.figure(figsize=figsize)\n    \n    if plot_type == \"bar\":  \n        sns.barplot(x=x, y=y)\n    elif plot_type == \"count\":  \n        sns.countplot(x)\n    elif plot_type == \"reg\":  \n        sns.regplot(x=x,y=y)\n    plt.title(title, fontsize=20)\n    plt.xlabel(xlabel, fontsize=18)\n    plt.ylabel(ylabel, fontsize=18)\n    plt.yticks(fontsize=13)\n    if rotation == True:\n        plt.xticks(fontsize=13,rotation=rotation_value)\n    plt.show()","1cab6a32":"store_data = pd.read_csv('..\/input\/AppleStore.csv')\napp_desc = pd.read_csv('..\/input\/appleStore_description.csv')","ed3a79f6":"store_data.head()","6d1630c1":"store_data.info()","492cfc84":"app_desc.head()","ce879ce6":"store_data_sorted = store_data.sort_values('rating_count_tot', ascending=False)\nsubset_store_data_sorted = store_data_sorted[:10]\n\nvisualizer(subset_store_data_sorted.track_name, subset_store_data_sorted.rating_count_tot, \"bar\", \"TOP 10 APPS ON THE BASIS OF TOTAL RATINGS\",\n          \"APP NAME\", \"RATING COUNT (TOTAL)\", True, -60)","04f44159":"store_data_download = store_data.sort_values('size_bytes', ascending=False)\nstore_data_download.size_bytes \/= 1024*1024 #Conversion from Bytes to MegaBytes\nsubset_store_data_download = store_data_download[:10]\n\nvisualizer(subset_store_data_download.track_name, subset_store_data_download.size_bytes, \"bar\", \"TOP 10 APPS ON THE BASIS OF DOWNLOAD SIZE\",\n          \"APP NAME\", \"DOWNLOAD SIZE (in MB)\", True, -60)","e4a49524":"store_data.currency.unique()","1c67ad35":"store_data_price = store_data.sort_values('price', ascending=False)\nsubset_store_data_price = store_data_price[:10]\n\nvisualizer(subset_store_data_price.price, subset_store_data_price.track_name, \"bar\", \"TOP 10 APPS ON THE BASIS OF PRICE\",\n          \"Price (in USD)\", \"APP NAME\")","2d5771c2":"corr_store_data = store_data.corr()\ncorr_store_data[\"rating_count_tot\"].sort_values(ascending=False)","db17d095":"plt.figure(figsize=(15,15))\nplt.title(\"CORRELATION OF FEATURES\", fontsize=20)\nsns.heatmap(corr_store_data)\nplt.xticks(rotation=(-60), fontsize=15)\nplt.yticks(fontsize=15)\nplt.show()","fb23499d":"visualizer(store_data[\"lang.num\"], store_data.rating_count_tot, \"reg\", \n          \"CORRELATION OF NUMBER OF LANGUAGES AND RATING COUNT\", \"NUMBER OF LANGAUGES\",\n          \"RATING COUNT (TOTAL)\", False)","1a940e43":"store_data['revenue'] = store_data.rating_count_tot * store_data.price\nstore_data_business = store_data.sort_values(\"revenue\", ascending=False)\nsubset_store_data_business = store_data_business[:10]\n\nvisualizer(subset_store_data_business.track_name, subset_store_data_business['revenue'], \"bar\", \"BEST IN BUSINESS\",\n         \"APP NAME\", \"REVENUE\", True, -60)","d06b839d":"visualizer(store_data.user_rating, None, \"count\",\"RATINGS ON APP STORE\",\n         \"RAITNGS\", \"NUMBER OF APPS RATED\")","beea7138":"store_data[\"favourites_tot\"] = store_data[\"rating_count_tot\"] * store_data[\"user_rating\"]\nstore_data[\"favourites_ver\"] = store_data[\"rating_count_ver\"] * store_data[\"user_rating_ver\"]","9479e261":"favourite_app = store_data.sort_values(\"favourites_tot\", ascending=False)\nfavourite_app_subset = favourite_app[:10]\n\nvisualizer(favourite_app_subset.track_name, favourite_app_subset.rating_count_tot, \"bar\", \"FAVOURITES (ALL TIME)\",\n         \"APP NAME\",  \"RATING COUNT(TOTAL)\", True, -60)","dc60d9a5":"favourite_app_ver = store_data.sort_values(\"favourites_ver\", ascending=False)\nfavourite_app_ver_subset = favourite_app_ver[:10]\n\nvisualizer(favourite_app_ver_subset.rating_count_ver,favourite_app_ver_subset.track_name,\n           \"bar\", \"FAVOURITES (CURRENT VERSION)\",\"RATING COUNT(CURRENT VERSION)\",\"APP NAME\", False)\n","13874951":"visualizer(store_data.cont_rating, None, \"count\", \"COTNENT RAITNG\", \"NUMBER OF APP RATED\",\n           \"DISTRIBUTION OF APPS ON THE BASIS OF CONTENT RATING\", False)","6f1c98cb":"app_desc[\"desc_len\"] = app_desc[\"app_desc\"].apply(lambda x: len(x))\nstore_data[\"desc_len\"] = app_desc[\"desc_len\"]\nstore_data.head()","60e05bb4":"from sklearn.model_selection import train_test_split\nstore_train, store_test = train_test_split(store_data, test_size=0.2)\n\nstore_data = store_train\nstore_data.info()","335987b7":"from sklearn.base import BaseEstimator, TransformerMixin\n\n#Drops unncessary columns\nclass dropper(BaseEstimator, TransformerMixin):\n    def __init__(self):\n        pass\n    def fit(self, X, y=None):\n        return self\n    def transform(self, X, y=None):\n        pass\n    def fit_transform(self, X, y=None):\n        X = pd.DataFrame(X)\n        return X.drop([\"currency\", \"rating_count_tot\", \"rating_count_ver\",\"track_name\",\n                                       \"Unnamed: 0\", \"vpp_lic\", \"revenue\", \n                                      \"favourites_tot\", \"favourites_ver\"], axis=1)\n\n#Trims version number and changes to int   \ndef ver_cleaner(data):\n    try:\n        if \"V3\" in data: #To handle a single exception\n                return str(3)\n        else:   \n             return int(data.split(\".\")[0])\n    except:\n        return int(0)\n\nclass version_trimmer(BaseEstimator, TransformerMixin):\n    def __init__(self):\n        pass\n    def fit(self, X, y=None):\n        return self\n    def transform(self, X, y=None):\n        pass\n    def fit_transform(self, X, y=None):\n        X[\"ver\"] = X[\"ver\"].apply(ver_cleaner)\n        return X\n\n#Helps with dataframes (from hands on ML)\nclass DataFrameSelector(BaseEstimator, TransformerMixin):\n    def __init__(self, attribute_names):\n        self.attribute_names = attribute_names\n    def fit(self, X, y=None):\n        return self\n    def transform(self, X):\n        return X[self.attribute_names]\n\n#Dual label encoder\nclass dual_encoder(BaseEstimator, TransformerMixin):\n    def __init__(self):\n        pass\n    def fit(self):\n        return self\n    def transform(self):\n        pass\n    def fit_transform(self, X, y=None):\n        self.encoder_cont = LabelEncoder()\n        cont_encoded = self.encoder_cont.fit_transform(X['cont_rating'])\n        \n        self.encoder_prime_genre = LabelEncoder()\n        genre_encoded = self.encoder_prime_genre.fit_transform(X['prime_genre'])\n        \n        X[\"cont_encoded\"] = cont_encoded\n        X[\"genre_encoded\"] = genre_encoded\n        \n        return X.drop([\"cont_rating\", \"prime_genre\"], axis=1)\n    ","205229bf":"from sklearn.pipeline import Pipeline, FeatureUnion\nfrom sklearn.preprocessing import LabelEncoder, StandardScaler\n\ncategory_attributes = [\"cont_rating\",\"prime_genre\"]\nnumerical_attributes = store_data.drop([\"cont_rating\",\"prime_genre\"], axis=1).columns\n\nnumline = Pipeline([(\"dataframe\", DataFrameSelector(numerical_attributes)),\n                    (\"dropper\", dropper()),\n                    (\"version-trimmer\", version_trimmer()),\n                   (\"scaling\",StandardScaler())])\n\nencoder = dual_encoder()\n\ncatline = Pipeline([(\"dataframe\", DataFrameSelector(category_attributes)),\n                    (\"cat-encoder\", encoder)])\n\nfull_pipeline = FeatureUnion(transformer_list=[(\"num_pipeline\", numline),\n                                               (\"cat_pipeline\", catline)])\n\nstore_data_prepared = full_pipeline.fit_transform(store_data)\n\nstore_data_prepared    ","9a938d35":"#Encoders\ncont_codes = encoder.encoder_cont.classes_\ngenre_codes = encoder.encoder_prime_genre.classes_","14ca45d3":"store_data_prepared.shape","b9e44d88":"y = np.c_[store_data[\"rating_count_tot\"]] #labels\nX = store_data_prepared #Attributes","cac28fda":"from sklearn.model_selection import cross_val_score\n\n#Scoring ML model(Using Negative root mean squared error) made easy\ndef model_scoring(model_name, model, X, y):\n    \n    #Cross Validation\n    scores = cross_val_score(model, X, y, scoring=\"neg_mean_squared_error\", cv=10)\n    \n    #Scores\n    rmse = np.sqrt(-scores)\n    mean = rmse.mean()\n    std = rmse.std()\n    print(model_name)\n    print()\n    print(\"RMSE: {}\".format(rmse))\n    print(\"MEAN: {}\".format(mean))\n    print(\"STD: {}\".format(std))","f6195a47":"# Model\nfrom sklearn.linear_model import LinearRegression\n\nlin_reg = LinearRegression()\n\nlin_reg = lin_reg.fit(X, y)\n\n# Scores\nmodel_scoring(\"Linear Regression\", lin_reg, X, y)","a6c29451":"from sklearn.preprocessing import PolynomialFeatures\n\npoly_features = PolynomialFeatures(degree=2, include_bias=False)\n\nx_poly = poly_features.fit_transform(X)\n\npoly_reg = LinearRegression()\n\npoly_reg = poly_reg.fit(x_poly, y)\n\n# Scores\nmodel_scoring(\"Polynomial Regression\", poly_reg, x_poly, y)","d562f047":"from sklearn.svm import SVR\n\nsvr = SVR(kernel=\"linear\")\n\ny_ravel = y.ravel()\n\nsvr = svr.fit(X, y_ravel)\n\n# Scores\nmodel_scoring(\"Support Vector Regression\", svr, X, y_ravel)","9e93f10c":"# Model\nfrom sklearn.tree import DecisionTreeRegressor\n\ndec_tree = DecisionTreeRegressor()\n\ndec_tree = dec_tree.fit(X, y)\n\n# Scores\nmodel_scoring(\"Decision Tree Regression\", dec_tree, X, y)","cb9c984a":"## Adding length of app description as a column","3ed58079":"## Pipelines","a47988da":"## Decision Tree Regression","3915f833":"# FEATURE ENGINEERING AND PREPARATION OF DATA","eff986d0":"## Top 10 apps on the basis of price","812b609e":"### Linear Correlation of Features","33ac50a5":"### Dropper\n\nDrops columns that are unnecessary for analysis or won't help much in prediction of total rating count.  \n\n**Currency: **Has consistent value (USD) throughout the dataset  \n**Rating Count Total, Rating Count Version: **Target variables  \n**Unnamed 0, vpp_lic: **Index, not useful for prediction  \n**Revenue, Favourites Total, Favourites Version: **Derived variables from target variable  \n\n### Version Trimmer\n\nTrims version to just one digit.   \nFor example: Version 3.1.4 will be trimmed to version 3, because 3.1.4 is not a valid float value\n\n### Dataframe Selector\n\nHelps scikit-learn to work with dataframes, it selects the values from only the columns passed as arguments.  \nI have taken it directly from** Hands on Machine Learning with Scikit-learn and Tensorflow by Aur\u00e9lien G\u00e9ron**.\n\n### Dual Encoder \n\nEncodes **cont_rating** and **prime_genre** and also has a data member for containing encoders such that we can reference to them in future.  \nI could've just used Label Encoder, but this step helps me encode two columns in one go.","b5381c00":"## User Ratings on the App Store\nHere is the count plot of the user ratings on Apple App store we see lots of apps are rated 0","22b4b92d":"**lang.num** (number of languages app support) shows the highest correlation with the **rating_count_tot**(total rating count). ","3b473479":"## Top 10 apps on the basis of download size","f323e8a2":"## Inspecting linear correlation of Number of languages and Rating Count (Total)","70e1f3d3":"# EDA","1a3e578e":"## App Distribution by content rating\nThese are bar graphs representing distribution of apps according to content rating.\nA major share of apps are rated 4+.","a07ffae0":"Hey there, this is my first full analysis with machine learning.   \nI found inpiration for this from** Hands on Machine Learning with Scikit-learn and Tensorflow by Aur\u00e9lien G\u00e9ron**.   \nSome postive criticism will be nice in comments.","b9e94269":"### Importing necessary libraries","6f7bfa81":"## Polynomial Regression","9cf84568":"Taking assumption **if developer explains about the app in a detailed way then it is more likely to hit more user count**, so I added length of app description as a possible indicator for number of downloads","a6ee4856":"### Function for visualizaiton","abd9c7cf":"## Linear Regression","1a8f92bd":"## Best in Business\nHere are the apps that have best tentative revenue.","fd9dfaa8":"## Support Vector Regression","0b040b36":"## Top 10 apps on the basis of total rating\n**total rating** is a rough indicator of **number of downloads** so we will treat total rating count as a target variable in place of number of downloads. As, more number of rating suggests more users.","d08e263b":"### Importing files as DataFrames","0c4dcf94":"# TRYING MACHINE LEARNING ALGORITHMS","fe7ce6a9":"## Splitting Training and Testing Set","3fa8d262":"App store only features app in USD currency (in this dataset)","d983909c":"## User favourites\n**rating_count_tot * user_rating** can tell user favourites and **rating_count_ver * user_rating_ver** will tell us the favourites in current version","cb2ad149":"## Custom Transformations"}}