{"cell_type":{"26af567f":"code","70e52eea":"code","c6c49995":"code","b7709176":"code","962ecf94":"code","20e4327e":"code","e5483574":"code","433b4f6e":"code","6e4cc835":"code","b980918b":"code","f8ac47c1":"code","14b68d88":"code","499d6dc1":"code","2d81b219":"code","6e48092a":"code","1c4d0e59":"code","8aaa2669":"code","86d377f0":"code","31f429e1":"code","d84e1411":"code","a7a51c40":"code","4c0b2421":"code","55588b36":"markdown","181e8b8f":"markdown","8f0b5d2d":"markdown","9be4ab3b":"markdown","0dbd8831":"markdown","42c68660":"markdown","99b4f642":"markdown","affca49b":"markdown","e4901439":"markdown","06edf07f":"markdown","31b7509c":"markdown","8fa0c034":"markdown","1bce06b8":"markdown","674bcaf4":"markdown","360f4a50":"markdown"},"source":{"26af567f":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom catboost import CatBoostRegressor\nfrom sklearn.model_selection import train_test_split\nfrom hyperopt import fmin, hp, tpe, Trials, space_eval, STATUS_OK","70e52eea":"# import the training and test sets\ntrain_set = pd.read_csv('..\/input\/petfinder-pawpularity-score\/train.csv')\ntest_set = pd.read_csv('..\/input\/petfinder-pawpularity-score\/test.csv')","c6c49995":"print(train_set.shape)\nprint(test_set.shape)","b7709176":"train_set.info()","962ecf94":"# set the columns we need for training\ncols = [col for col in train_set.columns if col not in ['Id', 'Pawpularity']]","20e4327e":"# check for any null entries\nprint(train_set.isnull().sum().sum())","e5483574":"# plot a correlation heat map\nplt.figure(figsize=(16, 6))\nsns.set(font_scale=1.1)\nheatmap = sns.heatmap(train_set.corr(), vmin=-1, vmax=1, annot=True, cmap=\"YlGnBu\")\nheatmap.set_title('Correlation Matrix Heatmap', fontdict={'fontsize':22}, pad=14);","433b4f6e":"# correlation just for pawpularity\nplt.figure(figsize=(8, 8))\nheatmap = sns.heatmap(train_set.corr()[['Pawpularity']].sort_values(by='Pawpularity', ascending=False), vmin=-1, vmax=1, annot=True, cmap=\"YlGnBu\")\nheatmap.set_title('Features Correlating with Pawpularity', fontdict={'fontsize':18}, pad=16);","6e4cc835":"# distribution of pawpularity scores\nplt.figure(figsize=(10,6))\nax = train_set['Pawpularity'].hist(bins=100)\nax.set_xlabel('Pawpularity Score')\nax.set_ylabel('Count')\nplt.show()","b980918b":"train_set = train_set.loc[train_set['Pawpularity'] > 3]","f8ac47c1":"# split the current training set into a validation set for cross-validation during training\nx_train, x_valid, y_train, y_valid = train_test_split(train_set[cols],\n                                                      train_set['Pawpularity'],\n                                                      test_size=0.3)","14b68d88":"# define the objective function which for this model is the RMSE\ndef objective(search_space):\n    model = CatBoostRegressor(**search_space,\n                              loss_function='RMSE',\n                              eval_metric='RMSE',\n                              early_stopping_rounds=100,\n                              random_seed=42)\n    \n    model.fit(X = x_train, y = y_train, eval_set=(x_valid,y_valid), verbose=False)\n    return {'loss': model.get_best_score()['validation']['RMSE'], 'status': STATUS_OK}","499d6dc1":"# define the search space for the hyperparameters\nsearch_space = {'learning_rate': hp.uniform('learning_rate', 0.1, 0.5),\n                'iterations': hp.randint('iterations',100,1000),\n                'l2_leaf_reg': hp.randint('l2_leaf_reg',1,10),\n                'depth': hp.randint('depth',4,10),\n                'bootstrap_type' : hp.choice('bootstrap_type', ['Bayesian', 'Bernoulli'])}","2d81b219":"# bayesian algorithm\nalgorithm=tpe.suggest","6e48092a":"# search for best parameters\nbest_params = fmin(\n  fn=objective,\n  space=search_space,\n  algo=algorithm,\n  max_evals=1000)","1c4d0e59":"# dict of the best params\nhyperparams = space_eval(search_space, best_params)","8aaa2669":"params = {'learning_rate' : hyperparams['learning_rate'],\n          'iterations' : hyperparams['iterations'],\n          'depth' : hyperparams['depth'],\n          'loss_function' : 'RMSE',\n          'l2_leaf_reg' : hyperparams['l2_leaf_reg'],\n          'eval_metric' : 'RMSE',\n          'early_stopping_rounds': 100,\n          'bootstrap_type' : hyperparams['bootstrap_type']}","86d377f0":"model = CatBoostRegressor(**params, random_seed=42)\nmodel.fit(X = x_train, y = y_train, eval_set=(x_valid,y_valid),verbose=250)","31f429e1":"print('best RMSE', model.get_best_score()['validation']['RMSE'])","d84e1411":"preds = model.predict(test_set[cols])","a7a51c40":"submission=pd.DataFrame()\nsubmission['Id'] = test_set['Id']\nsubmission['Pawpularity'] = preds\nsubmission","4c0b2421":"submission.to_csv('submission.csv', index=False)","55588b36":"A quick EDA on our data to see if we have any nulls or odd features.","181e8b8f":"Create predictions and write them to the submission file.","8f0b5d2d":"We will use the Hyperopt package to tune our hyperparameters. This is a novel package that uses a Bayesian approach which is shown to be better than random or grid search.","9be4ab3b":"# Model Training","0dbd8831":"# Import Packages","42c68660":"There is extreme values at 100 and around the 1,2 and 3 mark. Lets remove these as they can have a significant impact during training.","99b4f642":"# Predictions","affca49b":"# Hyperparameter Tuning With Hyperopt","e4901439":"This data is very clean!","06edf07f":"We can clearly see that the meta-data does not have much contribution to the Pawpularity. Eitherway, we will use the meta data in this analysis. An alternative method would be to use a CNN or some transfer learning model which are the current best implementations according to the leaderboard.","31b7509c":"# **Introduction**","8fa0c034":"# EDA","1bce06b8":"Fit our final model with the best found hyperparameters.","674bcaf4":"The aim of this competition is predict Pawpularity scores for various photos of cats and dogs. In this notebook, I use the CatBoost algorithm with the hyperparamter tuning Hyperopt to create predictions exclusively on the meta-data given.","360f4a50":"# Load Data"}}