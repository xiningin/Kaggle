{"cell_type":{"da0dd734":"code","755b3f8e":"code","1bd4772b":"code","ad5edeb8":"code","74af8a0e":"code","a6560b35":"code","5b58f7fc":"code","a3fa3327":"code","9cdf3f66":"code","d0ee76e3":"code","8e760915":"code","66af7217":"code","64706ede":"code","6647b099":"code","316be82b":"code","ff0a464f":"code","bd2c4203":"code","d8ac1bf0":"code","d4f669b3":"code","0b7413a2":"code","e2d11ac4":"code","821f944a":"code","fc0e30a9":"code","218896b5":"code","60365a45":"code","72216b73":"code","31781b73":"code","b84d2370":"markdown","24843d6d":"markdown","9277ffd8":"markdown","d43fd7ea":"markdown","bca1b127":"markdown","d8abe9c4":"markdown","cdb90bd8":"markdown","9a522d69":"markdown","c2f08c78":"markdown"},"source":{"da0dd734":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns \nimport plotly.graph_objects as go\nimport plotly.express as px\n\nimport warnings\nwarnings.filterwarnings(\"ignore\")\n\nimport os \nprint(os.listdir('..\/input\/ashrae-energy-prediction\/'))","755b3f8e":"weather_train = pd.read_csv('..\/input\/ashrae-energy-prediction\/weather_train.csv')\nweather_test = pd.read_csv('..\/input\/ashrae-energy-prediction\/weather_test.csv')\n\nbuilding_metadata = pd.read_csv('..\/input\/ashrae-energy-prediction\/building_metadata.csv')","1bd4772b":"weather_train.head()","ad5edeb8":"weather_train.shape","74af8a0e":"import missingno as msno\nmsno.matrix(weather_train)","a6560b35":"msno.matrix(weather_test)","5b58f7fc":"features = ['cloud_coverage', 'precip_depth_1_hr', 'wind_direction', 'wind_speed']\nweather_train[features] = weather_train[features].fillna(0)\nweather_test[features] = weather_test[features].fillna(0)\nweather_train.head()\n","a3fa3327":"mean_value = weather_train['sea_level_pressure'].dropna().sum()\/weather_train['sea_level_pressure'].dropna().shape[0]\nprint(mean_value)\nweather_train['sea_level_pressure'] = weather_train['sea_level_pressure'].fillna(mean_value)","9cdf3f66":"msno.matrix(building_metadata)","d0ee76e3":"building_metadata.info()","8e760915":"building_metadata['site_id'].value_counts()","66af7217":"fig, ax = plt.subplots(1,1,figsize=(12, 5))\nsns.countplot(building_metadata['site_id'])","64706ede":"fig, ax = plt.subplots(1,1,figsize=(12, 5))\nsns.countplot(y = building_metadata['primary_use'])","6647b099":"%%time\ndata = list()\nfor i in building_metadata['primary_use'].unique():\n    data.append(go.Bar(name=i, x=building_metadata['site_id'].unique(), y= building_metadata[building_metadata['primary_use']==i]['site_id'].value_counts().sort_index()))\n\nfig = go.Figure(data=data)\nfig.update_layout(barmode='stack')\nfig.show()","316be82b":"def building_pie_chart(df, siteid):\n    data = df['primary_use'].value_counts()\n    fig = go.Figure(data=[go.Pie(values=data, labels=data.index)])\n    fig.update_layout(template='plotly_dark', title_text=\"Building in Site: {}\".format(siteid))\n    fig.show()\n\nbuilding_pie_chart(building_metadata[building_metadata['site_id']==0],0)","ff0a464f":"fig, ax = plt.subplots(1,2, figsize=(17, 5))\nsns.distplot(weather_train['wind_direction'], ax=ax[0])\nsns.distplot(weather_train['wind_speed'], ax=ax[1])\nplt.show()","bd2c4203":"\n\ndef angle_range(st, ed, x):\n    if st < ed: ed += 360\n    return st <= x.values < ed\n\ndef wind_news(df):\n    df = df[df['wind_direction'] > 0]\n    df['wind_direction'][ df['wind_direction'] < 11.25 ] = df['wind_direction'][ df['wind_direction'] < 11.25 ].apply(lambda x : x+360)\n    \n    wind_df = pd.DataFrame(columns=['direction', 'speed', 'frequency'])\n    angle = [ (i * 22.5 - 11.25 + 360) % 360.0 for i in range(16) ]\n    direction = ['N', 'NNE', 'NE', 'ENE', 'E', 'ESE', 'SE', 'SSE', 'S', 'SSW', 'SW', 'WSW', 'W', 'WMW', 'NW', 'NNW']\n    speed = [i*2.5 for i in range(1, 9)]\n    tot = 0\n    for ang, d  in zip(angle, direction):\n        for s in speed:\n            cnt = df[(ang <= df['wind_direction'] ) & ( df['wind_direction'] < ang+22.5 )&  (s-2.5 <= df['wind_speed']) & (df['wind_speed'] < s) ].shape[0]\n            tot += cnt\n            wind_df = wind_df.append({'direction': d, 'speed':s, 'frequency': cnt }, ignore_index=True)\n    return wind_df ","d8ac1bf0":"def wind_direction_plot(df, title):\n    wind = wind_news(df)\n    fig = px.bar_polar(wind, r=\"frequency\", theta=\"direction\",\n                       color=\"speed\", template=\"plotly_dark\",\n                       color_discrete_sequence= px.colors.sequential.Plasma[-2::-1])\n    fig.update_layout(title_text='Site ID {}'.format(title))\n    fig.show()","d4f669b3":"wind_direction_plot(weather_train[weather_train['site_id'] == 0], str(0))","0b7413a2":"\ndef temperature_graph(df):\n    df = df.sort_values('timestamp')\n    fig = go.Figure()\n    fig.add_trace(go.Scatter(x=df['timestamp'], y=df['air_temperature'], name=\"Air Temperature\", line_color='deepskyblue', opacity=0.7))\n    fig.add_trace(go.Scatter(x=df['timestamp'], y=df['dew_temperature'], name=\"Dew Temperature\", line_color='mediumseagreen', opacity=0.7))\n    fig.update_layout(template='plotly_dark', title_text='Time Series with Temperature', xaxis_rangeslider_visible=True)\n    fig.show()","e2d11ac4":"temperature_graph(weather_train[weather_train['site_id'] == 0])","821f944a":"def cloud_graph(df):\n    df = df.sort_values('timestamp')\n    fig = go.Figure()\n    fig.add_trace(go.Scatter(x=df['timestamp'], y=df['cloud_coverage'], name=\"Cloud Coverage\", line_color='lightskyblue', opacity=0.7))\n    fig.update_layout(template='plotly_dark',title_text='Cloud', xaxis_rangeslider_visible=True)\n    fig.show()","fc0e30a9":"cloud_graph(weather_train[weather_train['site_id'] == 0])","218896b5":"def pressure_graph(df):\n    df = df.sort_values('timestamp')\n    fig = go.Figure()\n    fig.add_trace(go.Scatter(x=df['timestamp'], y=df['sea_level_pressure'], name=\"Sea Level Pressure\", line_color='royalblue', opacity=0.7))\n    fig.update_layout(template='plotly_dark',title_text='Sea Level Pressure', xaxis_rangeslider_visible=True)\n    fig.show()\n","60365a45":"pressure_graph(weather_train[weather_train['site_id'] == 0])","72216b73":"def total_plot(siteid):\n    building_pie_chart(building_metadata[building_metadata['site_id']==siteid],str(siteid))\n    wind_direction_plot(weather_train[weather_train['site_id'] == siteid], str(siteid))\n    temperature_graph(weather_train[weather_train['site_id'] == siteid])\n    cloud_graph(weather_train[weather_train['site_id'] == siteid])\n    pressure_graph(weather_train[weather_train['site_id'] == siteid])","31781b73":"total_plot(3)","b84d2370":"## Simple Preprocessing","24843d6d":"### Weather","9277ffd8":"## Wind Direction and Wind Speed ","d43fd7ea":"## Temperature","bca1b127":"## Building","d8abe9c4":"Fill Null Data as 0\n\n- cloud_coverage\n- previp_depth_1_hr\n- wind_direction\n- wind_speed\n\nFill Null Data as Mean Value\n\n- sea_level_pressure","cdb90bd8":"## Introduction\n\nThis notebook focuses only on weather & Building data.\nI am trying to make dashboard style eda by using plotly.\n\nThis is my results.\n\n![dashboard](https:\/\/i.imgur.com\/8BdGI8I.png)\n\n- Building Primary Use Pie chart\n- wind direction & speed bar polar chart\n- other weather line charts\n\n**If you find it helpful or if you like it, please upvote it.**","9a522d69":"## Site Id & Primary Use","c2f08c78":"## Cloud and Pressure"}}