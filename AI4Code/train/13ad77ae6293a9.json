{"cell_type":{"fa90ea39":"code","cf3ec6ed":"code","e66cdfb3":"code","a1c76e1d":"code","b7346c02":"code","fbbb76aa":"code","73142e78":"code","1901639b":"code","bf72dbc1":"code","647b09c4":"code","de6daae5":"code","452a5f15":"code","578f1041":"code","e7a869c2":"code","d655cce3":"code","76c5b431":"code","a1c3a4cf":"code","7e1fe4b0":"code","11990351":"code","4cfa2f55":"code","975c6965":"code","bac52426":"code","997f4706":"code","bbd95e4c":"code","29580c93":"code","c217e16b":"code","f1fdf5f4":"code","7116347f":"code","106bf677":"code","4100dc44":"code","506e317a":"code","f4d80c54":"code","9cb86d5b":"code","d783150c":"code","4383cf2e":"code","8c0cc4af":"code","6cfc2080":"code","165f3557":"code","c1efaae9":"code","17d41547":"code","b7069044":"code","b382cec7":"code","f5106a56":"code","fa9ab59d":"markdown","b73a78b4":"markdown","872f3a5d":"markdown","d78b62b5":"markdown","49af0ad5":"markdown","0d0ab136":"markdown","60c3fb56":"markdown","56e3bc3e":"markdown","f0d079fa":"markdown","ba6c0d04":"markdown","422633e9":"markdown","5ef171af":"markdown","88e2b447":"markdown","17fe21a4":"markdown","b4a3db92":"markdown","892ff9ed":"markdown","9c0557bc":"markdown","c7441c39":"markdown","d2185c27":"markdown","b15ec71d":"markdown","40c47032":"markdown","d459965f":"markdown","a97b5056":"markdown","8d0a3fa8":"markdown","886866f4":"markdown","59dd8543":"markdown","7b9b3964":"markdown","00710cc0":"markdown","6287144b":"markdown","75f99f37":"markdown","733c018e":"markdown","003fb421":"markdown","d021c8f6":"markdown","9a0a0826":"markdown"},"source":{"fa90ea39":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\n%matplotlib inline \n!pip install mpld3\nimport mpld3\nmpld3.enable_notebook()","cf3ec6ed":"train = pd.read_csv('..\/input\/covid19-global-forecasting-week-2\/train.csv')\ntest = pd.read_csv('..\/input\/covid19-global-forecasting-week-2\/test.csv')\nsubmission = pd.read_csv('..\/input\/covid19-global-forecasting-week-2\/submission.csv')","e66cdfb3":"train","a1c76e1d":"train[\"Country_Region\"] = [country_name.replace(\"'\",\"\") for country_name in train[\"Country_Region\"]]","b7346c02":"LAST_DATE = train.iloc[-1][\"Date\"]","fbbb76aa":"train[train[\"Country_Region\"]==\"Italy\"][[\"ConfirmedCases\", \"Fatalities\", \"Date\"]].plot(x=\"Date\", figsize=(8, 4), title=\"Covid-19 cases and fatalities in Italy\");","73142e78":"train.groupby(\"Date\").sum()[[\"ConfirmedCases\", \"Fatalities\"]].plot(figsize=(8, 4), title=\"Covid-19 total cases and fatalities (world)\");","1901639b":"print(\"Countries with no fatalities as of \" + LAST_DATE)\nprint(*train.groupby(\"Country_Region\").sum()[train.groupby(\"Country_Region\").sum()[\"Fatalities\"] == 0].index.tolist(), sep=\", \")","bf72dbc1":"train[train[\"Date\"] == LAST_DATE].sort_values(\"Fatalities\", ascending=False)[[\"Country_Region\", \"ConfirmedCases\", \"Fatalities\"]].head(10)","647b09c4":"tmp = train[train[\"Date\"] == LAST_DATE].copy()\ntmp[\"CaseFatalityRate\"] = tmp[\"Fatalities\"] \/ tmp[\"ConfirmedCases\"] * 100  # CFR here is Fatalities\/ConfirmedCases * 100 (so that it's in percent)\nprint(\"Mean CFR (%):\", tmp[\"CaseFatalityRate\"].mean())\n\nheights = tmp[tmp[\"Fatalities\"] >= 100].sort_values(\"CaseFatalityRate\", ascending=False)[\"CaseFatalityRate\"].values\nbars = tmp[tmp[\"Fatalities\"] >= 100].sort_values(\"CaseFatalityRate\", ascending=False)[\"Country_Region\"].values\ny_pos = np.arange(len(bars))\n\nplt.figure(figsize=(11,4))\nplt.bar(y_pos, heights, width=0.5)\n \nplt.xticks(y_pos, bars, size=\"small\")\nplt.yticks(np.arange(0.0, 11.0, 1.0))\nplt.title(\"Preliminary Case Fatality Rate in Percent by Country\")\n\nplt.show();","de6daae5":"from scipy.integrate import odeint # a lot of the code for SIR from https:\/\/scipython.com\/book\/chapter-8-scipy\/additional-examples\/the-sir-epidemic-model\/","452a5f15":"# The SIR model differential equations.\ndef deriv(y, t, N, beta, gamma):\n    S, I, R = y\n    dSdt = -beta * S * I \/ N\n    dIdt = beta * S * I \/ N - gamma * I\n    dRdt = gamma * I\n    return dSdt, dIdt, dRdt","578f1041":"def SIR_model(N, D, R_0, CaseFatalityRate, max_days):\n    '''\n    N: total population\n    D, R_0, CaseFatalityRate: see texts above\n    '''\n    I0, R0 = 1, 0  # Initial number of infected and recovered individuals (1 infected, 0 recovered) [this R0 has nothing to do with the basic reproduction number R0]\n    S0 = N - I0 - R0 # Initial number of susceptible (everyone else)\n\n    gamma = 1.0 \/ D  # see texts above\n    beta = R_0 * gamma  # see texts above\n    alpha = CaseFatalityRate\n\n    t = np.linspace(0, max_days, max_days) # Grid of time points (in days)\n\n    # Initial conditions vector\n    y0 = S0, I0, R0\n    # Integrate the SIR equations over the time grid, t.\n    ret = odeint(deriv, y0, t, args=(N, beta, gamma))\n    S, I, R = ret.T\n\n    # Adding deaths (see text above)\n    X = np.zeros(max_days)\n    for day in range(13, max_days):\n        X[day] = sum(I[:day-13])\n    X = alpha * beta * X\n\n\n    # Plot the data on three separate curves for S(t), I(t) and R(t)\n    f, ax = plt.subplots(1,1,figsize=(10,4))\n    ax.plot(t, S, 'b', alpha=0.7, linewidth=2, label='Susceptible')\n    ax.plot(t, I, 'y', alpha=0.7, linewidth=2, label='Infected')\n    ax.plot(t, X, 'r', alpha=0.7, linewidth=2, label='Dead')\n    ax.plot(t, R, 'g', alpha=0.7, linewidth=2, label='Recovered')\n\n    ax.set_xlabel('Time (days)')\n    ax.title.set_text('SIR-Model. Total Population: ' + str(N) + \", Days Infectious: \" + str(D) + \", R_0: \" + str(R_0) + \", CFR: \" + str(CaseFatalityRate*100) + \"%\")\n    # ax.set_ylabel('Number (1000s)')\n    # ax.set_ylim(0,1.2)\n    ax.yaxis.set_tick_params(length=0)\n    ax.xaxis.set_tick_params(length=0)\n    ax.grid(b=True, which='major', c='w', lw=2, ls='-')\n    legend = ax.legend()\n    legend.get_frame().set_alpha(0.5)\n    for spine in ('top', 'right', 'bottom', 'left'):\n        ax.spines[spine].set_visible(False)\n    plt.show();","e7a869c2":"SIR_model(N=1_000_000, D=14.0, R_0=2.0, CaseFatalityRate=0.05, max_days=360)","d655cce3":"def SIR_model_with_lockdown(N, D, R_0, CaseFatalityRate, max_days, L, R_0_2):\n    '''\n    N: total population\n    D, R_0, CaseFatalityRate, ...: see texts above\n    '''\n    # BEFORE LOCKDOWN (same code as first model)\n    I0, R0 = 1, 0  # Initial number of infected and recovered individuals (1 infected, 0 recovered) [this R0 has nothing to do with the basic reproduction number R0]\n    S0 = N - I0 - R0 # Initial number of susceptible (everyone else)\n\n    gamma = 1.0 \/ D  # see texts above\n    beta = R_0 * gamma  # see texts above\n    alpha = CaseFatalityRate\n\n    t = np.linspace(0, L, L)  # Grid of time points (in days)\n    \n    # Initial conditions vector\n    y0 = S0, I0, R0\n    # Integrate the SIR equations over the time grid, t.\n    ret = odeint(deriv, y0, t, args=(N, beta, gamma))\n    S, I, R = ret.T\n    \n    \n    # AFTER LOCKDOWN\n    I0_2, R0_2, S0_2 = I[-1], R[-1], S[-1]  # beginning of lockdown -> starting Infected\/Susceptible\/Recovered numbers are the numbers at the end of no-lockdown period\n\n    gamma = 1.0 \/ D  # same after lockdown\n    beta_2 = R_0_2 * gamma\n    alpha = CaseFatalityRate  # same after lockdown\n\n    t_2 = np.linspace(0, max_days - L + 1, max_days - L + 1)\n    \n    # Initial conditions vector\n    y0_2 = S0_2, I0_2, R0_2\n    # Integrate the SIR equations over the time grid, t.\n    ret_2 = odeint(deriv, y0_2, t_2, args=(N, beta_2, gamma))\n    S_2, I_2, R_2 = ret_2.T\n\n    \n    # COMBINING PERIODS\n    S_full = np.concatenate((S, S_2[1:]))\n    I_full = np.concatenate((I, I_2[1:]))\n    R_full = np.concatenate((R, R_2[1:]))\n    t_full = np.linspace(0, max_days, max_days)\n    \n    # Adding deaths\n    X = np.zeros(max_days)\n    for day in range(13, max_days):\n        for valid_day in range(day-13):\n            if valid_day < L:\n                X[day] += alpha * beta * I_full[valid_day]\n            else:\n                X[day] += alpha * beta_2 * I_full[valid_day]\n\n    \n\n    # Plot the data on three separate curves for S(t), I(t) and R(t)\n    f, ax = plt.subplots(1,1,figsize=(10,4))\n    ax.plot(t_full, S_full, 'b', alpha=0.7, linewidth=2, label='Susceptible')\n    ax.plot(t_full, I_full, 'y', alpha=0.7, linewidth=2, label='Infected')\n    ax.plot(t_full, X, 'r', alpha=0.7, linewidth=2, label='Dead')\n    ax.plot(t_full, R_full, 'g', alpha=0.7, linewidth=2, label='Recovered')\n\n    ax.set_xlabel('Time (days)')\n    ax.title.set_text('SIR-Model with Lockdown. Total Population: ' + str(N) + \n                      \", Days Infectious: \" + str(D) + \", R_0: \" + str(R_0) + \n                      \", CFR: \" + str(CaseFatalityRate*100) + \" R_0_2: \" + str(R_0_2) + \n                      \", L: \" + str(L) + \" days\")\n    # ax.set_ylabel('Number (1000s)')\n    # ax.set_ylim(0,1.2)\n    plt.text(L,N\/20,'Lockdown')\n    plt.plot(L, 0, marker='o', markersize=6, color=\"red\")\n    ax.yaxis.set_tick_params(length=0)\n    ax.xaxis.set_tick_params(length=0)\n    ax.grid(b=True, which='major', c='w', lw=2, ls='-')\n    legend = ax.legend()\n    legend.get_frame().set_alpha(0.5)\n    for spine in ('top', 'right', 'bottom', 'left'):\n        ax.spines[spine].set_visible(False)\n    plt.show();","76c5b431":"SIR_model(N=1_000_000, D=4, R_0=3.0, CaseFatalityRate=0.05, max_days=60)","a1c3a4cf":"SIR_model_with_lockdown(N=1_000_000, D=4, R_0=3.0, CaseFatalityRate=0.05, max_days=60, L=30, R_0_2=0.9)","7e1fe4b0":"SIR_model_with_lockdown(N=1_000_000, D=4, R_0=3.0, CaseFatalityRate=0.05, max_days=60, L=22, R_0_2=0.9)","11990351":"SIR_model_with_lockdown(N=1_000_000, D=4, R_0=3.0, CaseFatalityRate=0.05, max_days=60, L=15, R_0_2=0.9)","4cfa2f55":"# SIR-Model's Fatality Curve (no plotting etc.):\ndef SIR_model_with_lockdown_deaths(x, N, D, R_0, CaseFatalityRate, max_days, L, R_0_2):\n    # BEFORE LOCKDOWN (same code as first model)\n    I0, R0 = 1, 0  # Initial number of infected and recovered individuals (1 infected, 0 recovered) [this R0 has nothing to do with the basic reproduction number R0]\n    S0 = N - I0 - R0 # Initial number of susceptible (everyone else)\n\n    gamma = 1.0 \/ D  # see texts above\n    beta = R_0 * gamma  # see texts above\n    alpha = CaseFatalityRate\n\n    t = np.linspace(0, L, L)  # Grid of time points (in days)\n    \n    # Initial conditions vector\n    y0 = S0, I0, R0\n    # Integrate the SIR equations over the time grid, t.\n    ret = odeint(deriv, y0, t, args=(N, beta, gamma))\n    S, I, R = ret.T\n    \n    \n    # AFTER LOCKDOWN\n    I0_2, R0_2, S0_2 = I[-1], R[-1], S[-1]  # beginning of lockdown -> starting Infected\/Susceptible\/Recovered numbers are the numbers at the end of no-lockdown period\n\n    gamma = 1.0 \/ D  # same after lockdown\n    beta_2 = R_0_2 * gamma\n    alpha = CaseFatalityRate  # same after lockdown\n\n    t_2 = np.linspace(0, max_days - L + 1, max_days - L + 1)\n    \n    # Initial conditions vector\n    y0_2 = S0_2, I0_2, R0_2\n    # Integrate the SIR equations over the time grid, t.\n    ret_2 = odeint(deriv, y0_2, t_2, args=(N, beta_2, gamma))\n    S_2, I_2, R_2 = ret_2.T\n\n    \n    # COMBINING PERIODS\n    S_full = np.concatenate((S, S_2[1:]))\n    I_full = np.concatenate((I, I_2[1:]))\n    R_full = np.concatenate((R, R_2[1:]))\n    t_full = np.linspace(0, max_days, max_days)\n    \n    # Adding deaths\n    X = np.zeros(max_days)\n    for day in range(13, max_days):\n        for valid_day in range(day-13):\n            if valid_day < L:\n                X[day] += alpha * beta * I_full[valid_day]\n            else:\n                X[day] += alpha * beta_2 * I_full[valid_day]\n    return X[x]","975c6965":"!pip install lmfit\nfrom lmfit import Model","bac52426":"# Load countries data file (from https:\/\/www.kaggle.com\/saga21\/covid-global-forecast-sir-model-ml-regressions)\nworld_population = pd.read_csv(\"\/kaggle\/input\/population-by-country-2020\/population_by_country_2020.csv\")\n\n# Select desired columns and rename some of them\nworld_population = world_population[['Country (or dependency)', 'Population (2020)', 'Density (P\/Km\u00b2)', 'Land Area (Km\u00b2)', 'Med. Age', 'Urban Pop %']]\nworld_population.columns = ['Country (or dependency)', 'Population (2020)', 'Density', 'Land Area', 'Med Age', 'Urban Pop']\n\n# Replace United States by US\nworld_population.loc[world_population['Country (or dependency)']=='United States', 'Country (or dependency)'] = 'US'\n\n# Remove the % character from Urban Pop values\nworld_population['Urban Pop'] = world_population['Urban Pop'].str.rstrip('%')\n\n# Replace Urban Pop and Med Age \"N.A\" by their respective modes, then transform to int\nworld_population.loc[world_population['Urban Pop']=='N.A.', 'Urban Pop'] = int(world_population.loc[world_population['Urban Pop']!='N.A.', 'Urban Pop'].mode()[0])\nworld_population['Urban Pop'] = world_population['Urban Pop'].astype('int16')\nworld_population.loc[world_population['Med Age']=='N.A.', 'Med Age'] = int(world_population.loc[world_population['Med Age']!='N.A.', 'Med Age'].mode()[0])\nworld_population['Med Age'] = world_population['Med Age'].astype('int16')","997f4706":"lockdown_dates = {\"Italy\": \"2020-03-10\", \"Spain\": \"2020-03-15\", \"Germany\": \"2020-03-23\"}\n\ndef fit_SIR(country_name, lockdown_date=None, region_name=None):\n    \"\"\"\n    y_data: the fatalities data of one country\/region (array)\n    population: total population of country\n    lockdown_date: format YYYY-MM-DD\n    \"\"\"\n    if lockdown_date is None:\n        lockdown_date = lockdown_dates[country_name]\n\n    if region_name:\n        y_data = train[(train[\"Country_Region\"] == country_name) & (train[\"Region\"] == region_name)].Fatalities.values\n    else:\n        if len(train[\"Country_Region\"] == country_name) > len(train[\"Country_Region\"] == \"Germany\"):  # country with several regions and no region provided\n            y_data = train[(train[\"Country_Region\"] == country_name) & (train[\"Region\"].isnull())].Fatalities.values\n        else:\n            y_data = train[train[\"Country_Region\"] == country_name].Fatalities.values\n        \n    max_days = len(train.groupby(\"Date\").sum().index) # constant for all countries\n\n    # country specific values\n    N = world_population.loc[world_population['Country (or dependency)'] == country_name][\"Population (2020)\"].values[0]\n    L = train.groupby(\"Date\").sum().index.tolist().index(lockdown_date)  # index of the lockdown date\n\n    # x_data is just [0, 1, ..., max_days] array\n    x_data = np.linspace(0, max_days - 1, max_days, dtype=int)\n    \n    # curve fitting from here\n    mod = Model(SIR_model_with_lockdown_deaths)\n\n    # initial values and bounds\n    mod.set_param_hint('N', value=N)\n    mod.set_param_hint('max_days', value=max_days)\n    mod.set_param_hint('L', value=L)\n    mod.set_param_hint('D', value=10, min=4, max=25)\n    mod.set_param_hint('CaseFatalityRate', value=0.01, min=0.0001, max=0.1)\n    mod.set_param_hint('R_0', value=2.0, min=0.1, max=5.0)\n    mod.set_param_hint('R_0_2', value=2.0, min=0.1, max=5.0)\n\n    params = mod.make_params()\n\n    # fixing constant parameters\n    params['N'].vary = False\n    params['max_days'].vary = False\n    params['L'].vary = False\n\n    result = mod.fit(y_data, params, x=x_data, method=\"least_squares\")\n    \n    return result, country_name\n\ndef fitted_plot(result, country_name, region_name=None):\n    if region_name:\n        y_data = train[(train[\"Country_Region\"] == country_name) & (train[\"Region\"] == region_name)].Fatalities.values\n    else:\n        if len(train[\"Country_Region\"] == country_name) > len(train[\"Country_Region\"] == \"Germany\"):  # country with several regions and no region provided\n            y_data = train[(train[\"Country_Region\"] == country_name) & (train[\"Region\"].isnull())].Fatalities.values\n        else:\n            y_data = train[train[\"Country_Region\"] == country_name].Fatalities.values\n\n    max_days = len(train.groupby(\"Date\").sum().index)\n    x_data = np.linspace(0, max_days - 1, max_days, dtype=int)\n    x_ticks = train[train[\"Country_Region\"] == \"Germany\"].Date.values  # same for all countries\n    \n    plt.figure(figsize=(10,5))\n    \n    real_data, = plt.plot(x_data, y_data, 'bo', label=\"real data\")\n    SIR_fit = plt.plot(x_data, result.best_fit, 'r-', label=\"SIR model\")\n    \n    plt.xlabel(\"Day\")\n    plt.xticks(x_data[::10], x_ticks[::10])\n    plt.ylabel(\"Fatalities\")\n    plt.title(\"Real Data vs SIR-Model in \" + country_name)\n    plt.legend(numpoints=1, loc=2, frameon=None)\n    plt.show()","bbd95e4c":"result, _ = fit_SIR(\"Italy\")\nprint(result.fit_report())\nfitted_plot(result, \"Italy\")","29580c93":"result, _ = fit_SIR(\"Spain\")\nprint(result.fit_report())\nfitted_plot(result, \"Spain\")","c217e16b":"result, _ = fit_SIR(\"Germany\")\nprint(result.fit_report())\nfitted_plot(result, \"Germany\")","f1fdf5f4":"# extended SIR model differential equations. Beta is now a function.\ndef extended_deriv(y, t, N, beta, gamma):\n    S, I, R = y\n    dSdt = -beta(t) * S * I \/ N\n    dIdt = beta(t) * S * I \/ N - gamma * I\n    dRdt = gamma * I\n    return dSdt, dIdt, dRdt","7116347f":"def extended_SIR(N, D, max_days, CFR_OPT, CFR_scaling_factor, R_0, **R_0_kwargs):\n    '''\n    R_0: callable\n    '''\n    I0, R0 = 1, 0  # Initial number of infected and recovered individuals (1 infected, 0 recovered) [this R0 has nothing to do with the basic reproduction number R0]\n    S0 = N - I0 - R0 # Initial number of susceptible (everyone else)\n\n    gamma = 1.0 \/ D  # see texts above\n\n    def beta(t):\n        return R_0(t, **R_0_kwargs) * gamma\n\n    t = np.linspace(0, max_days, max_days)  # Grid of time points (in days)\n    \n    # Initial conditions vector\n    y0 = S0, I0, R0\n    # Integrate the SIR equations over the time grid, t.\n    ret = odeint(extended_deriv, y0, t, args=(N, beta, gamma))\n    S, I, R = ret.T\n\n    def CFR(t):\n        return CFR_OPT + CFR_scaling_factor * (I[t] \/ N)\n\n    # Adding deaths\n    X = np.zeros(max_days)\n    for day in range(13, max_days):\n        for valid_day in range(day-13):\n            X[day] += CFR(valid_day) * beta(valid_day) * I[valid_day]\n\n    return t, S, I, R, X, [R_0(t, **R_0_kwargs) for t in range(max_days)], N, [CFR(t) for t in range(max_days)]","106bf677":"def plot_extended_SIR(t, S, I, R, X, R_0, N, CFR):\n    # Plot the data on three separate curves for S(t), I(t) and R(t)\n    f, ax = plt.subplots(1,1,figsize=(10,4))\n    ax.plot(t, S, 'b', alpha=0.7, linewidth=2, label='Susceptible')\n    ax.plot(t, I, 'y', alpha=0.7, linewidth=2, label='Infected')\n    ax.plot(t, X, 'r', alpha=0.7, linewidth=2, label='Dead')\n    ax.plot(t, R, 'g', alpha=0.7, linewidth=2, label='Recovered')\n\n    ax.set_xlabel('Time (days)')\n    ax.title.set_text('SIR-Model with varying R_0 and CFR')\n    # ax.set_ylabel('Number (1000s)')\n    # ax.set_ylim(0,1.2)\n    ax.yaxis.set_tick_params(length=0)\n    ax.xaxis.set_tick_params(length=0)\n    ax.grid(b=True, which='major', c='w', lw=2, ls='-')\n    legend = ax.legend()\n    legend.get_frame().set_alpha(0.5)\n    for spine in ('top', 'right', 'bottom', 'left'):\n        ax.spines[spine].set_visible(False)\n    plt.show();\n    \n    \n    # plt.figure(figsize=(10,4))\n    \n    f = plt.figure(figsize=(10,4))\n    \n    # sp1\n    ax1 = f.add_subplot(121)\n    ax1.plot(t, R_0, 'b--', alpha=0.7, linewidth=2, label='R_0')\n    \n    ax1.set_xlabel('Time (days)')\n    ax1.title.set_text('R_0 over time')\n    # ax.set_ylabel('Number (1000s)')\n    # ax.set_ylim(0,1.2)\n    ax1.yaxis.set_tick_params(length=0)\n    ax1.xaxis.set_tick_params(length=0)\n    ax1.grid(b=True, which='major', c='w', lw=2, ls='-')\n    legend = ax1.legend()\n    legend.get_frame().set_alpha(0.5)\n    for spine in ('top', 'right', 'bottom', 'left'):\n        ax.spines[spine].set_visible(False)\n\n    # sp2\n    ax2 = f.add_subplot(122)\n    ax2.plot(t, CFR, 'r--', alpha=0.7, linewidth=2, label='CFR')\n    \n    ax2.set_xlabel('Time (days)')\n    ax2.title.set_text('CFR over time')\n    # ax.set_ylabel('Number (1000s)')\n    # ax.set_ylim(0,1.2)\n    ax2.yaxis.set_tick_params(length=0)\n    ax2.xaxis.set_tick_params(length=0)\n    ax2.grid(b=True, which='major', c='w', lw=2, ls='-')\n    legend = ax2.legend()\n    legend.get_frame().set_alpha(0.5)\n    for spine in ('top', 'right', 'bottom', 'left'):\n        ax.spines[spine].set_visible(False)\n\n    plt.show();","4100dc44":"N = 1_000\nD = 4\nmax_days = 100\n\nI0, R0 = 1, 0\nS0 = N - I0 - R0\ns = CFR_scaling_factor = 0.1\nCFR_OPT = 0.02  # noone in hospital -> only 2% die\n\ndef new_R0(t, a, b, c):\n    return a \/ (1 + (t\/c)**b)\n\n\nplot_extended_SIR(*extended_SIR(N, D, max_days, CFR_OPT, CFR_scaling_factor, new_R0, a=3.0, b=1.5, c=50))","506e317a":"def fit_extended_SIR(country_name, R_0_function, region_name=None, fit_method=\"least_squares\", **R_0_kwargs):\n\n    if region_name:\n        y_data = train[(train[\"Country_Region\"] == country_name) & (train[\"Region\"] == region_name)].Fatalities.values\n    else:\n        if len(train[\"Country_Region\"] == country_name) > len(train[\"Country_Region\"] == \"Germany\"):  # country with several regions and no region provided\n            y_data = train[(train[\"Country_Region\"] == country_name) & (train[\"Region\"].isnull())].Fatalities.values\n        else:\n            y_data = train[train[\"Country_Region\"] == country_name].Fatalities.values\n        \n    max_days = len(train.groupby(\"Date\").sum().index) # constant for all countries\n \n    # country specific values\n    N = world_population.loc[world_population['Country (or dependency)'] == country_name][\"Population (2020)\"].values[0]\n\n    # x_data is just [0, 1, ..., max_days] array\n    x_data = np.linspace(0, max_days - 1, max_days, dtype=int)\n\n    # curve fitting from here\n    def extended_SIR_deaths(x, N, D, max_days, CFR_OPT, CFR_scaling_factor, **R_0_kwargs):\n        t_, S_, I_, R_, X, R_0_, N_, CFR_ = extended_SIR(N, D, max_days, CFR_OPT, CFR_scaling_factor, R_0=R_0_function, **R_0_kwargs)\n        return X[x]\n\n    mod = Model(extended_SIR_deaths)\n\n    # initial values and bounds\n    mod.set_param_hint('N', value=N, vary=False)\n    mod.set_param_hint('max_days', value=max_days, vary=False)\n\n    mod.set_param_hint('D', value=10, min=4, max=25)\n    mod.set_param_hint('CFR_OPT', value=0.01, min=0.0001, max=0.1)\n    mod.set_param_hint('CFR_scaling_factor', value=0.1, min=0.0001, max=1.0)\n    if R_0_kwargs:\n        for arg in R_0_kwargs:\n            mod.set_param_hint(arg, value=R_0_kwargs[arg])\n\n    params = mod.make_params()\n    # print(params)\n    result = mod.fit(y_data, params, method=fit_method, x=x_data)\n    \n    # fetch some result parameters\n    CFR_OPT = result.params[\"CFR_OPT\"].value\n    CFR_scaling_factor = result.params[\"CFR_scaling_factor\"].value\n    R_0_result_params = {}\n    for val in R_0_kwargs:\n        R_0_result_params[val] = result.params[val].value\n\n    \n    # return result, country_name\n    return result, country_name, N, D, max_days, CFR_OPT, CFR_scaling_factor, R_0_function, R_0_result_params\n\ndef fitted_plot(result, country_name, region_name=None):\n    if region_name:\n        y_data = train[(train[\"Country_Region\"] == country_name) & (train[\"Region\"] == region_name)].Fatalities.values\n    else:\n        if len(train[\"Country_Region\"] == country_name) > len(train[\"Country_Region\"] == \"Germany\"):  # country with several regions and no region provided\n            y_data = train[(train[\"Country_Region\"] == country_name) & (train[\"Region\"].isnull())].Fatalities.values\n        else:\n            y_data = train[train[\"Country_Region\"] == country_name].Fatalities.values\n\n    max_days = len(train.groupby(\"Date\").sum().index)\n    x_data = np.linspace(0, max_days - 1, max_days, dtype=int)\n    x_ticks = train[train[\"Country_Region\"] == \"Germany\"].Date.values  # same for all countries\n    \n    plt.figure(figsize=(10,5))\n    \n    real_data, = plt.plot(x_data, y_data, 'bo', label=\"real data\")\n    SIR_fit = plt.plot(x_data, result.best_fit, 'r-', label=\"SIR model\")\n    \n    plt.xlabel(\"Day\")\n    plt.xticks(x_data[::10], x_ticks[::10])\n    plt.ylabel(\"Fatalities\")\n    plt.title(\"Real Data vs SIR-Model in \" + country_name)\n    plt.legend(numpoints=1, loc=2, frameon=None)\n    plt.show()","f4d80c54":"def new_R0(t, a, b, c):\n    return a \/ (1 + (t\/c)**b)\n\nresult, country_name, N, D, max_days, CFR_OPT, CFR_scaling_factor, R_0_function, R_0_result_params = fit_extended_SIR(\"Italy\", new_R0, region_name=None, fit_method=\"least_squares\", a=3.0, b=1.5, c=50)\nprint(result.fit_report())\nfitted_plot(result, \"Italy\");\nplot_extended_SIR(*extended_SIR(N, D, max_days, CFR_OPT, CFR_scaling_factor, R_0_function, **R_0_result_params))","9cb86d5b":"def logistic_R_0(t, R_0_start, k, x0, R_0_end):\n    return (R_0_start-R_0_end) \/ (1 + np.exp(-k*(-t+x0))) + R_0_end","d783150c":"x = np.linspace(0, 100, 100)\nplt.title(\"logistic R_0: initial R_0 2.0, final R_0 1.4, x0=50, varying k-values\")\nplt.plot(x, logistic_R_0(x, R_0_start=2, k=1.0, x0=50, R_0_end=1.4), label=\"k=1.0\")\nplt.plot(x, logistic_R_0(x, R_0_start=2, k=0.5, x0=50, R_0_end=1.4), label=\"k=0.5\")\nplt.plot(x, logistic_R_0(x, R_0_start=2, k=0.1, x0=50, R_0_end=1.4), label=\"k=0.1\")\nplt.legend()\nplt.show();","4383cf2e":"def extended_deriv_SEIR(y, t, N, beta, gamma, sigma):\n    S, E, I, R = y\n    dSdt = -beta(t) * S * I \/ N  # same as before\n    dEdt = beta(t) * S * I \/ N - sigma * E  # changed\n    dIdt = sigma * E - gamma * I  # changed\n    dRdt = gamma * I  # same as before\n    return dSdt, dEdt, dIdt, dRdt","8c0cc4af":"def extended_SEIR(N, D, max_days, CFR_OPT, CFR_scaling_factor, R_0, **R_0_kwargs):\n    '''\n    R_0: callable\n    '''\n    I0, R0, E0 = 0, 0, 1  # changed: one exposed at the beginning\n    S0 = N - I0 - R0 - E0\n\n    gamma = 1.0 \/ D\n    sigma = 1.0 \/ 3.0  # changed: 3 days until infectious\n\n    def beta(t):\n        return R_0(t, **R_0_kwargs) * gamma\n\n    t = np.linspace(0, max_days, max_days)\n\n    # Initial conditions vector\n    y0 = S0, E0, I0, R0\n    # Integrate the SIR equations over the time grid, t.\n    ret = odeint(extended_deriv_SEIR, y0, t, args=(N, beta, gamma, sigma))\n    S, E, I, R = ret.T\n\n    def CFR(t):\n        if t < 7:\n            return CFR_OPT\n        else:\n            return CFR_OPT + CFR_scaling_factor * (I[t - 7] \/ N)  # changed: implemented 7-day shift until patients get to hospital\n\n    # Adding deaths\n    X = np.zeros(max_days)\n    for day in range(16, max_days):  # changed: changed to 19 days until death minus 3 for the three \"exposed days\"\n        for valid_day in range(day-16):\n            X[day] += CFR(valid_day) * beta(valid_day) * I[valid_day]\n\n    return t, S, E, I, R, X, [R_0(t, **R_0_kwargs) for t in range(max_days)], N, [CFR(t) for t in range(max_days)]","6cfc2080":"def plot_extended_SEIR(t, S, E, I, R, X, R_0, N, CFR, x_ticks=None):\n    # Plot the data on three separate curves for S(t), I(t) and R(t)\n    f, ax = plt.subplots(1,1,figsize=(10,4))\n    ax.plot(t, S, 'b', alpha=0.7, linewidth=2, label='Susceptible')\n    ax.plot(t, E, 'y--', alpha=0.7, linewidth=2, label='Exposed')\n    ax.plot(t, I, 'y', alpha=0.7, linewidth=2, label='Infected')\n    ax.plot(t, X, 'r', alpha=0.7, linewidth=2, label='Dead')\n    ax.plot(t, R, 'g', alpha=0.7, linewidth=2, label='Recovered')\n\n    ax.set_xlabel('Time (days)')\n    ax.title.set_text('SEIR-Model with varying R_0 and CFR')\n    # ax.set_ylabel('Number (1000s)')\n    # ax.set_ylim(0,1.2)\n    ax.yaxis.set_tick_params(length=0)\n    ax.xaxis.set_tick_params(length=0)\n\n    if x_ticks is not None:\n        ax.set_xticks(t[::21])\n        ax.set_xticklabels(x_ticks[::21])    \n\n    ax.grid(b=True, which='major', c='w', lw=2, ls='-')\n    legend = ax.legend()\n    legend.get_frame().set_alpha(0.5)\n    for spine in ('top', 'right', 'bottom', 'left'):\n        ax.spines[spine].set_visible(False)\n    plt.show();\n    \n    f = plt.figure(figsize=(10,4))\n    # sp1\n    ax1 = f.add_subplot(121)\n    ax1.plot(t, R_0, 'b--', alpha=0.7, linewidth=2, label='R_0')\n \n    ax1.set_xlabel('Time (days)')\n    ax1.title.set_text('R_0 over time')\n    # ax.set_ylabel('Number (1000s)')\n    # ax.set_ylim(0,1.2)\n    ax1.yaxis.set_tick_params(length=0)\n    ax1.xaxis.set_tick_params(length=0)\n    if x_ticks is not None:\n        ax1.set_xticks(t[::35])\n        ax1.set_xticklabels(x_ticks[::35])    \n    ax1.grid(b=True, which='major', c='w', lw=2, ls='-')\n    legend = ax1.legend()\n    legend.get_frame().set_alpha(0.5)\n    for spine in ('top', 'right', 'bottom', 'left'):\n        ax.spines[spine].set_visible(False)\n\n    # sp2\n    ax2 = f.add_subplot(122)\n    ax2.plot(t, CFR, 'r--', alpha=0.7, linewidth=2, label='CFR')\n    \n    ax2.set_xlabel('Time (days)')\n    ax2.title.set_text('CFR over time')\n    # ax.set_ylabel('Number (1000s)')\n    # ax.set_ylim(0,1.2)\n    ax2.yaxis.set_tick_params(length=0)\n    ax2.xaxis.set_tick_params(length=0)\n    if x_ticks is not None:\n        ax2.set_xticks(t[::70])\n        ax2.set_xticklabels(x_ticks[::70])\n    ax2.grid(b=True, which='major', c='w', lw=2, ls='-')\n    legend = ax2.legend()\n    legend.get_frame().set_alpha(0.5)\n    for spine in ('top', 'right', 'bottom', 'left'):\n        ax.spines[spine].set_visible(False)\n\n    plt.show();","165f3557":"N = 80_000_000\nD = 9\nmax_days = 400\n\ns = CFR_scaling_factor = 0.1  # everyone infected at same time -> 12% instead of 2% die\nCFR_OPT = 0.02  # noone in hospital -> only 2% die","c1efaae9":"plot_extended_SEIR(*extended_SEIR(N, D, max_days, CFR_OPT, CFR_scaling_factor, logistic_R_0, R_0_start=2.5, k=0.3, x0=200, R_0_end=1.9))","17d41547":"plot_extended_SEIR(*extended_SEIR(N, D, max_days, CFR_OPT, CFR_scaling_factor, logistic_R_0, R_0_start=2.5, k=0.3, x0=170, R_0_end=0.2))","b7069044":"def fit_extended_SEIR(country_name, missing_days=0, region_name=None, fit_method=\"least_squares\", **R_0_kwargs):\n\n    if region_name is not None:\n        y_data = train[(train[\"Country_Region\"] == country_name) & (train[\"Province_State\"] == region_name)].Fatalities.values\n    else:\n        if len(train[\"Country_Region\"] == country_name) > len(train[\"Country_Region\"] == \"Germany\"):  # country with several regions and no region provided\n            # print(\"ok\")\n            y_data = train[(train[\"Country_Region\"] == country_name) & (train[\"Province_State\"].isnull())].Fatalities.values\n        else:\n            y_data = train[train[\"Country_Region\"] == country_name].Fatalities.values\n        \n    max_days = len(train.groupby(\"Date\").sum().index) + missing_days # constant for all countries\n    y_data = np.concatenate((np.zeros(missing_days), y_data))\n    # country specific values\n    N = world_population.loc[world_population['Country (or dependency)'] == country_name][\"Population (2020)\"].values[0]\n\n    # x_data is just [0, 1, ..., max_days] array\n    x_data = np.linspace(0, max_days - 1, max_days, dtype=int)\n\n    # curve fitting from here\n    def extended_SEIR_deaths(x, N, D, CFR_OPT, CFR_scaling_factor, R_0_delta, **R_0_kwargs):\n        # print(x)\n        t_, S_, E_, I_, R_, X, R_0_, N_, CFR_ = extended_SEIR(N, D, max_days, CFR_OPT, CFR_scaling_factor, R_0=logistic_R_0, **R_0_kwargs)\n        # return np.concatenate((np.zeros(int(outbreak)), X))\n        return X[x]\n\n    mod = Model(extended_SEIR_deaths)\n\n    # initial values and bounds\n    mod.set_param_hint('N', value=N, vary=False)\n    # mod.set_param_hint('max_days', value=max_days, vary=False)\n    mod.set_param_hint('D', value=9, vary=False)\n\n    mod.set_param_hint('CFR_OPT', value=0.01, min=0.0001, max=0.1)\n    mod.set_param_hint('CFR_scaling_factor', value=0.1, min=0.0001, max=1.0)\n    \n    mod.set_param_hint('R_0_start', value=2.5, min=1.0, max=5.0)\n    mod.set_param_hint('R_0_end', value=0.7, min=0.01, max=5.0)\n    # mod.set_param_hint('outbreak', value=20, min=0, max=150)\n    mod.set_param_hint('x0', value=30.0, min=0.0, max=float(max_days))\n    mod.set_param_hint('k', value=0.1, min=0.01, max=5.0)\n    '''\n    if R_0_kwargs:\n        for arg in R_0_kwargs:\n            mod.set_param_hint(arg, value=R_0_kwargs[arg])\n    '''\n\n    params = mod.make_params()\n    params.add('R_0_delta', value=1.0, min=0.0, expr=\"R_0_start - R_0_end\")  # add constraint R_0_start >= R_0_end\n    # print(params)\n    result = mod.fit(y_data, params, method=fit_method, x=x_data)\n\n    # fetch some result parameters\n    CFR_OPT = result.params[\"CFR_OPT\"].value\n    CFR_scaling_factor = result.params[\"CFR_scaling_factor\"].value\n    R_0_result_params = {}\n    for val in R_0_kwargs:\n        R_0_result_params[val] = result.params[val].value\n\n    return result, country_name, y_data, N, D, max_days, CFR_OPT, CFR_scaling_factor, R_0_result_params\n\n\ndef extended_SEIR_fitted_plot(result, country_name, y_data):\n#    max_days = len(train.groupby(\"Date\").sum().index)\n#   x_data = np.linspace(0, max_days - 1, max_days, dtype=int)\n#    x_ticks = train[train[\"Country_Region\"] == \"Germany\"].Date.values  # same for all countries\n    np.datetime64(LAST_DATE)\n\n    # x_ticks = pd.date_range(end=LAST_DATE, periods=len(y_data))\n    x_ticks = np.arange(np.datetime64(LAST_DATE) - np.timedelta64(len(y_data),'D'), np.datetime64(LAST_DATE), step=np.timedelta64(1,'D'))\n    x_ticks = [np.datetime_as_string(t, unit='D') for t in x_ticks]\n\n    plt.figure(figsize=(10,5))\n    x_data = np.linspace(0, len(y_data), len(y_data))\n    real_data, = plt.plot(x_data, y_data, 'bo', label=\"real data\")\n    SIR_fit = plt.plot(x_data, result.best_fit, 'r-', label=\"SIR model\")\n    \n    plt.xlabel(\"Day\")\n    plt.xticks(x_data[::30], x_ticks[::30])\n    # print(x_ticks)\n    plt.ylabel(\"Fatalities\")\n    plt.title(\"Real Data vs SIR-Model in \" + country_name)\n    plt.legend(numpoints=1, loc=2, frameon=None)\n    plt.show()","b382cec7":"result, country_name, y_data, N, D, max_days, CFR_OPT, CFR_scaling_factor, R_0_result_params = fit_extended_SEIR(\"Italy\", missing_days=30, fit_method=\"least_squares\", \n                                                                                                                 R_0_start=2.5, k=0.3, x0=170, R_0_end=0.2)\n\nprint(result.fit_report())\nextended_SEIR_fitted_plot(result, \"Italy\", y_data);\n\nfuture = 100\nx_ticks = np.arange(np.datetime64(LAST_DATE) - np.timedelta64(len(y_data),'D'), np.datetime64(LAST_DATE) + np.timedelta64(future, 'D'), step=np.timedelta64(1,'D'))\nx_ticks = [pd.to_datetime(str(t)).strftime(\"%m\/%d\") for t in x_ticks]\nplot_extended_SEIR(*extended_SEIR(N, D, max_days + future, CFR_OPT, CFR_scaling_factor, logistic_R_0, **R_0_result_params), x_ticks=x_ticks)","f5106a56":"y_data = train[(train[\"Country_Region\"] == \"Italy\") & (train[\"Province_State\"].isnull())].Fatalities.values\n\nx_orig = np.linspace(100, len(y_data)+100, len(y_data))\n# print(x_orig.shape)\nplt.plot(x_orig, y_data)\n\nzero_part = np.zeros(100)\ny_2 = np.concatenate((zero_part, y_data))\nnoise = np.random.normal(0,1,y_2.shape)\nplt.plot(y_2 + noise)\n# 0 is the mean of the normal distribution you are choosing from\n# 1 is the standard deviation of the normal distribution\n# 100 is the number of elements you get in array noise\n\n\nplt.show();","fa9ab59d":"We now want to add *cumulative* Deaths $X$ to the model: $X(t) = \\textit{number of deaths from day 0 to day t}$ for $t\\geq 14$, else $0$. \n\nRecursively, the number of cumulative deaths on day $t$ is equal to the number of cumulative deaths on day $t-1$ (that's $=X(t-1)$) plus the number of newly infected 13 days prior multiplied with the case fatality rate $\\alpha$ (alpha) (I chose 13 days as that is reported as the average time from infection until death in [this study](https:\/\/wwwnc.cdc.gov\/eid\/article\/26\/6\/20-0320_article)).\n\nNow, the number of newly infected 13 days prior (that's the people who can die on day $t$) is equal to the number of infected 14 days prior multiplied with the expected amount of people an infected person infects per day (that's $\\beta$). So the number of newly infected 13 days prior is $\\beta \\cdot I(t-14)$.\n\nPutting it all together: $X(t) = X(t-1) + \\alpha \\cdot \\beta \\cdot I(t-14)$.\n\nThis is equal to the closed form formula $X(t) = \\alpha \\cdot \\beta \\cdot \\displaystyle \\sum_{i=0}^{t-14} I(i)$\n\nProof: induction over $t$ for $t\\geq 13$ (both are $0$ for $t<14$).\n\nBase Case: $X(14) = X(13) + \\alpha \\cdot \\beta \\cdot I(14-14) = 0 + \\alpha \\cdot \\beta \\cdot I(0) = \\alpha \\cdot \\beta \\cdot \\displaystyle \\sum_{i=0}^{0} I(i)$.\n\nAssume $X(t) = X(t-1) + \\alpha \\cdot \\beta \\cdot I(t-14) = \\alpha \\cdot \\beta \\cdot \\displaystyle \\sum_{i=0}^{t-14} I(i) $ holds for some $t\\geq 14$. Then:\n\n$X(t+1) = X(t+1-1) + \\alpha \\cdot \\beta \\cdot I(t+1-14) = X(t) + \\alpha \\cdot \\beta \\cdot I(t-13) \\stackrel{inductive\\, assumption}{=} \\alpha \\cdot \\beta \\cdot \\displaystyle \\sum_{i=0}^{t-14} I(i) + \\alpha \\cdot \\beta \\cdot I(t-13) = \\alpha \\cdot \\beta \\cdot \\displaystyle \\sum_{i=0}^{t-13} I(i) = \\alpha \\cdot \\beta \\cdot \\displaystyle \\sum_{i=0}^{(t+1)-14} I(i)$\n\nwhich was to be shown.\n","b73a78b4":"Lockdown after 30 Days:\n\nFatalities around 85k. The lockdown is too late to stop the spread, but still has significant impact. However, at the time of the lockdown, there are only about 500 fatalities; as the R_0 is so high, the virus spreads incredibly fast and a lockdown would have to come into effect very soon.","872f3a5d":"Progression for the whole world (i.e. all countries summed up)","d78b62b5":"Okay, we now have all we need to fit the curves. Let's define the curve fitting methods as before:","49af0ad5":"## 1.1 Development","0d0ab136":"Now with an almost complete lockdown after 170 days:","60c3fb56":"## 2.4 SIR with time-dependent R_0 and CFR\nWhile the prior models are able to capture some of the aspects of the virus quite well, it's not that hard to fit the curves to the outbreak period as they all look quite similar. To make better predictions, we now treat R_0 and CFR as functions. For example, there is no determined \"Lockdown\" date anymore at which R_0 jumps to a different value; it can now change continuously. Also, the CFR was until now treated as constant, however, with more people infected, treatment becomes less available and the case fatality rate increases. Now, CFR is treated as a function of the ratio $\\frac{I(t)}{N}$ (the fraction of infected of the total population):\n\n$CFR(t) = s \\cdot \\frac{I(t)}{N} + \\alpha_{OPT}$, with $s$ being some arbitrary but fixed scaling factor and $\\alpha_{OPT}$ being the CFR with optimal treatment available.\n\n$R_{0}$ will be fitted to one of several different possible distributions we'll look at.","56e3bc3e":"As you can see, with highly contagious viruses, each day counts. Let's impose even more drastic measures: a complete lockdown after 15 days that reduces R_0 to 0.1 reduces fatalities to around 600 people only!","f0d079fa":"# Overview\nThis notebook consists of two main parts:\n1. Data Analysis (Development, Fatality Rate, ...) (finished)\n2. Modelling and Prediction (SIR, ML approaches, ...) (not fully finished)","ba6c0d04":"### We now want to find suitable parameters (Days infectious, R_0, CFR) for the SIR model\n\nAs I said before, the number of confirmed cases is likely far off from the real number (as not the whole population is getting tested) and thus is not very useful to fit our data to a SIR-Model.\n\nSo, we'll mainly use the number of deceased from the dataset to find parameters for the SIR model. What's important to note is that many countries implemented a *lockdown* that greatly reduces the basic reproduction number R_0; thus, we first tweak the model to allow for a second R_0_2 to come into effect on day L (for lockdown).","422633e9":"Countries with the most fatalities","5ef171af":"# 1. Data Analysis (Development, Fatality Rate, ...)","88e2b447":"## 1.2 Fatalities and Case Fatality Rates","17fe21a4":"## 2.1 SIR Model","b4a3db92":"No Lockdown:\n\nAbout 130k Fatalities at the end.","892ff9ed":"# 2. Modelling and Prediction","9c0557bc":"Example of a SIR Model","c7441c39":"Countries with no fatalities yet","d2185c27":"Exemplary development in one country","b15ec71d":"We now define \n1. `fit_SIR`: this function takes a country name, lockdown data (and opt. region name) and first gathers the data (fatalities progression, population, etc.) and then fits the `SIR_model_with_lockdown_deaths`-function from above with fixed N (population), max_days (however many dates are supplied), L (lockdown date) and varying D, R_0, R_0_2, CFR. The function returns the lmfit-module's result object and the country name. The result object contains all we want to know about the curve fitting.\n2. `fitted_plot`: this function takes a lmfit-result-object and country name and plots the fitted SIR-model against the real curve.","40c47032":"First with only a slight and late reduction of R_0 from 2.5 towards 1.9 around day 200.","d459965f":"Lockdown after 22 days:\n\nThe lockdown is able to break the chain of infection early on! Fatalities are around 12k.","a97b5056":"Example: \nNow we can **really** see the flatten-the-curve-patterns: Population of 80 million, 9 days infectious (days 3-12 after exposed), CFR of 2% when hospitals are empty.","8d0a3fa8":"### (fictitious) Case Study: No Lockdown vs Lockdown\nWe model a highly infectious virus with an R_0 of 3.0 and 4 days infectious spreading in a population of 1 million. The CFR is set to 5%.\nWe look at the development without a lockdown and with a lockdown after 22 and 30 days that reduces R_0 to 0.9.","886866f4":"Comparing countries' [case fatality rate](https:\/\/en.wikipedia.org\/wiki\/Case_fatality_rate) (\"death rate\"). **Careful here, Fatalities\/ConfirmedCases is not necessarily the real CFR; this can only be calculated ex post**. Thus, a higher CFR as calculated *here* does not necessarily mean that one country's CFR really is higher, it could very well be because of less\/more prevalent testing (example: Country A only tests patients that are already in critical condition, Country B tests the whole population -> Country A's Fatalities\/ConfirmedCases - ratio will be much higher).\n\nOnly countries with at least 100 fatalities are considered.","59dd8543":"## 2.2 SIR-Model with Lockdown","7b9b3964":"Note: the number of confirmed cases is strongly dependent on the number of Covid-19-tests that are performed over time. Many countries are still ramping up their testing efforts and they do so at different speeds. Thus, I will mostly exclude the number of confirmed cases from these analyses; The number of fatalities is much less error-prone, so I will focus on that instead. (I will still predict the number of confirmed cases as that's necessary for the submission file).","00710cc0":"The [SIR](https:\/\/en.wikipedia.org\/wiki\/Compartmental_models_in_epidemiology#The_SIR_model) Model tries to model infectious disease developments, with the population split up into three groups (\"compartments\"):\n- **S**usceptible: They can still be infected (healthy)\n- **I**nfected: Currently infected\n- **R**ecovered: They are presumed immune (cannot contract the virus again)\n\n\"$\\cdot$\" is \"multiplied with\".\n\nLet $\\beta$ (beta) be the **probability of transmission from infected to healthy $\\cdot$ the number of people a person is in contact with per day**. Thus, it can be thought of as the **expected amount of people an infected person infects per day** (or any other timestep, I'll use days here). Example: Let the probability of an infected person to infect a healthy\/susceptible person be $5 \\%$ and the average number of people a person is in contact with per day be $6$. Then, $\\beta = 0.05 \\cdot 6 = 0.3$, that is, an infected person infects $0.3$ people per day on average.\n\n\nNow one can see that the **number of days than an infected person can spread the disease** is extremely important. Let $D$ be that number. Then, the number of people an infected person infects on average is $=$ **expected amount of people an infected person infects per day $\\cdot $ number of days the person can spread the disease**, and that's exactly $\\beta \\cdot D$. This is the [basic reproduction number](https:\/\/en.wikipedia.org\/wiki\/Basic_reproduction_number) $R_{0}$. Continuing the example from above: let $D = 10$, then $R_{0} = \\beta \\cdot D = 0.3 \\cdot 10 = 3$. That means that on average, each infected person infects $3$ others.\n\nNow the model below does not use $D$ but $\\gamma$, and that's just $= \\frac{1}{D}$ (Thus, $R_{0} = \\beta \\cdot D = \\frac{\\beta}{\\gamma}$ and $\\beta = R_{0} \\cdot \\gamma$)","6287144b":"## 2.6 Final Model (extended SEIR)\nWe are now going to make some final changes to the model (and then finally get to the predictions):\n1. Switch to SEIR instead of SIR: as Covid-19 appears to take on avg. 3 days ($=\\sigma^{-1}$) until it starts being infectious, we'll add an \"Exposed\"-compartment of people that have the virus and will be infectious 3 days later\n2. change the number of days until death to 19 as reported more recently\n3. shift the CFR-curve to be calculated with the number of infected 7 days prior as that's the average time (3 days incubation + 7 days with symptoms) until patients get to the E.R. (and thus reducing capacity)\n4. use a logistic curve $\\displaystyle\\frac{R_{0_{start}} - R_{0_{end}}}{1 + e^{-k(-x+x_{0})}} + R_{0_{end}}$ as template for the R_0-curve (R_0_start and R_0_end are the beginning and end values of R_0; x_0 is the x-value of the inflection point (i.e. where the steepest decline in R_0 is, this could be thought of as the main \"lockdown\" date); k lets us vary how quickly R_0 declines)\n5. add an `outbreak`-parameter that sets the day the outbreak occurred; this is important as currently, day 0 of the given data (2020-01-22) is treated as outbreak date by default.","75f99f37":"## 2.3 Fitting SIR with Lockdown to real-world data\n\nWe now try to fit the SIR-Model's Dead Curve to real data by tweaking the variables. Some of them are constant:\n- max_days is set to `len(train.groupby(\"Date\").sum().index)` so that we can compare against all available data\n- N is fixed for each country, that's just the total population\n- L is fixed for each country (the date it went into lockdown)\n- D is set to vary from 5 to 20 (according to [this study](https:\/\/www.ncbi.nlm.nih.gov\/pubmed\/32150748), it takes on avg. 5 days to show symptoms, at most 14; according to [this source (German)](https:\/\/www.rki.de\/DE\/Content\/InfAZ\/N\/Neuartiges_Coronavirus\/Steckbrief.html#doc13776792bodyText5), people are infectious up to 5 days after onset of symptoms).\n- CFR set to vary from $0.1\\% - 10\\%$ (according to [this study](https:\/\/wwwnc.cdc.gov\/eid\/article\/26\/6\/20-0320_article))\n- R_0 and R_0_2 are set to vary from 0.1 to 3.5","733c018e":"## 2.5 Fitting extended SIR to data","003fb421":"The (hidden as it's almost the same as before) code above defines a function with signature\n\n`SIR_model_with_lockdown_deaths(x, N, D, R_0, CaseFatalityRate, max_days, L, R_0_2)`\n\nthat takes as input the same variables as before and an x and returns the number of fatalities on day x. This function will be used to find suited parameters D, CFR, R_0 and R_0_2 for the model.","d021c8f6":"Example: ","9a0a0826":"# \/\/TODO: \n1. use fitted SIR-Models to predict for all countries\n2. use ML to predict"}}