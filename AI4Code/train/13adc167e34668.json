{"cell_type":{"d3c62165":"code","1bb5735c":"code","2849b39b":"code","cf0f7c38":"code","3a91e434":"code","06b78362":"code","3cf1da32":"code","f05b5205":"code","cf31db5c":"code","a0557bdc":"code","43fabb90":"code","e7e6b07b":"code","f7554e6b":"code","32f24ba6":"code","41dfbb56":"code","b287b48e":"code","702e4b72":"code","7437c434":"code","0325c41f":"code","576820d6":"code","ca55043a":"code","6bfd176a":"code","57bc8524":"code","208c031f":"code","01310a74":"code","4e9ef2d6":"code","abb63226":"code","c311b78a":"code","71474fad":"code","ec88b3b0":"code","4031a46a":"code","160ae2f8":"code","a618311e":"code","493bf93d":"code","988da069":"code","123f76b3":"code","40589a73":"code","bc14f1ac":"code","5f7f4d64":"code","2cc5f1c7":"code","19512b18":"markdown","801fc82e":"markdown","77f19836":"markdown","db5b2f83":"markdown","cc23a943":"markdown","8b11f9c7":"markdown","6b02f50a":"markdown","c11516d2":"markdown","5e400966":"markdown","f0e49f03":"markdown","08bcedf2":"markdown","c278f7a8":"markdown","2de9cbd6":"markdown"},"source":{"d3c62165":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","1bb5735c":"sell_prices = pd.read_csv('\/kaggle\/input\/m5-forecasting-accuracy\/sell_prices.csv')\nsample_submission = pd.read_csv('\/kaggle\/input\/m5-forecasting-accuracy\/sample_submission.csv')\ncalendar = pd.read_csv('\/kaggle\/input\/m5-forecasting-accuracy\/calendar.csv')\nsales_train_validation = pd.read_csv('\/kaggle\/input\/m5-forecasting-accuracy\/sales_train_validation.csv')\n","2849b39b":"#Aggregate by the store level for now\nstore_level = sales_train_validation.groupby(sales_train_validation['store_id']).sum()\nstore_level['d'] = store_level.index\nstore_levelt = store_level.transpose() \nstore_levelt['d'] = store_levelt.index\nstore_levelt","cf0f7c38":"#Merge this with the calendar data set to look at trends\nstore_level_final = store_levelt.merge(calendar, on='d')\nfrom datetime import datetime\nstore_level_final['date'] = store_level_final['date'].apply(lambda t: datetime.strptime(t, '%Y-%m-%d'))\nstore_level_final","3a91e434":"plt.plot(store_level_final['date'][0:49], store_level_final['CA_1'][0:49])\nplt.xticks(rotation=45)","06b78362":"plt.plot(store_level_final['weekday'][0:7], store_level_final['CA_1'][0:7])\nplt.xticks(rotation=45)","3cf1da32":"from statsmodels.tsa.stattools import adfuller\ndef test_stationarity(timeseries):\n\n    #Determing rolling statistics\n    rolmean = timeseries.rolling(7).mean()\n    rolstd = timeseries.rolling(7).std()\n\n    #Plot rolling statistics:\n    fig = plt.figure(figsize=(12, 8))\n    orig = plt.plot(timeseries[0:100], color='blue',label='Original')\n    mean = plt.plot(rolmean[0:100], color='red', label='Rolling Mean')\n    std = plt.plot(rolstd[0:100], color='black', label = 'Rolling Std')\n    plt.legend(loc='best')\n    plt.title('Rolling Mean & Standard Deviation')\n    plt.show()\n    \n    #Perform Dickey-Fuller test:\n    print('Results of Dickey-Fuller Test:')\n    dftest = adfuller(timeseries, autolag='AIC')\n    dfoutput = pd.Series(dftest[0:4], index=['Test Statistic','p-value','#Lags Used','Number of Observations Used'])\n    for key,value in dftest[4].items():\n        dfoutput['Critical Value (%s)'%key] = value\n    print(dfoutput)","f05b5205":"test_stationarity(store_level_final['CA_1'][0:100])","cf31db5c":"\nstore_level_final['first_difference'] = store_level_final['CA_1'] - store_level_final['CA_1'].shift(1)\ntest_stationarity(store_level_final['first_difference'].dropna())","a0557bdc":"store_level_final['seasonal_difference'] = store_level_final['CA_1'] - store_level_final['CA_1'].shift(7)\ntest_stationarity(store_level_final['seasonal_difference'].dropna())","43fabb90":"store_level_final['seasonal_first_difference'] = store_level_final['CA_1'] - store_level_final['CA_1'].shift(1) - store_level_final['CA_1'].shift(7) + store_level_final['CA_1'].shift(8)\ntest_stationarity(store_level_final['seasonal_first_difference'].dropna())\n","e7e6b07b":"from pandas.plotting import autocorrelation_plot","f7554e6b":"autocorrelation_plot(store_level_final['CA_1'][0:100])\n","32f24ba6":"autocorrelation_plot(store_level_final['seasonal_first_difference'][8:100])\n","41dfbb56":"from statsmodels.graphics.tsaplots import plot_pacf\nfrom statsmodels.graphics.tsaplots import plot_acf\n","b287b48e":"plot_acf(store_level_final['seasonal_difference'][0:100].dropna(), lags=10)\n","702e4b72":"plot_pacf(store_level_final['seasonal_difference'][0:100].dropna(), lags=10)\n","7437c434":"plot_acf(store_level_final['seasonal_first_difference'][0:100].dropna(), lags=10)\n","0325c41f":"plot_pacf(store_level_final['seasonal_first_difference'][0:100].dropna(), lags=10)\n","576820d6":"from sklearn.model_selection import train_test_split\nX_train, X_test = train_test_split(store_level_final['CA_1'])","ca55043a":"train = np.asarray(store_level_final['CA_1'][0:1880].astype(float))\ntest = np.asarray(store_level_final['CA_1'][1880:-1].astype(float))","6bfd176a":"import statsmodels.api as sm\n\nmod = sm.tsa.statespace.SARIMAX(train, order=(0,1,1), seasonal_order=(0,1,1,7))\nresults=mod.fit()\nprint(results.summary())","57bc8524":"plt.plot(results.predict(start = 1800, end = 1880), label = 'Predicted')\nplt.plot(train[1800:1880], label = 'Train')\nplt.legend(loc = \"upper left\")","208c031f":"plt.plot(results.predict(start = len(train), end = len(store_level_final['CA_1'])), label = 'Predicted')\nplt.plot(test, label = 'Test')\nplt.legend(loc = 'upper left')","01310a74":"from sklearn.metrics import mean_squared_error\nimport math\nmean_squared_error(results.predict(start = 1880, end = 1911), test)","4e9ef2d6":"train2 = np.asarray(store_level_final['CA_1'][1500:1880].astype(float))\ntest2 = np.asarray(store_level_final['CA_1'][1880:-1].astype(float))","abb63226":"import statsmodels.api as sm\n\nmod2 = sm.tsa.statespace.SARIMAX(train2, order=(0,1,1), seasonal_order=(0,1,1,7))\nresults2=mod2.fit()\nprint(results2.summary())","c311b78a":"plt.plot(results2.predict(start = 100, end = 200), label = 'Predicted')\nplt.plot(train2[100:200], label = 'Train')\nplt.legend(loc = \"upper left\")","71474fad":"plt.plot(results2.predict(start = 380, end = 411), label = 'Predicted')\nplt.plot(test2, label = 'Test')\nplt.legend(loc = \"upper left\")","ec88b3b0":"mean_squared_error(results2.predict(start = 380, end = 411), test2)","4031a46a":"store_level","160ae2f8":"category_sales = sales_train_validation.groupby(sales_train_validation['cat_id']).sum()\ncategory_salest = category_sales.transpose()\ncategory_salest['d'] = category_salest.index","a618311e":"#Merge this with the calendar data set to look at trends\ncategory_level_final = category_salest.merge(calendar, on='d')\ncategory_level_final['date'] = category_level_final['date'].apply(lambda t: datetime.strptime(t, '%Y-%m-%d'))\ncategory_level_final","493bf93d":"category_level_model = category_level_final\ncategory_level_model['FOODS'].loc[category_level_model['event_name_1'] == 'Christmas'] = category_level_final['FOODS'].mean()\ncategory_level_model['HOBBIES'].loc[category_level_model['event_name_1'] == 'Christmas'] = category_level_final['HOBBIES'].mean()\ncategory_level_model['HOUSEHOLD'].loc[category_level_model['event_name_1'] == 'Christmas'] = category_level_final['HOUSEHOLD'].mean()","988da069":"train_food = np.asarray(category_level_model['FOODS'][0:1883].astype(float))\ntest_food = np.asarray(category_level_model['FOODS'][1883:-1].astype(float))\nmod_food = sm.tsa.statespace.SARIMAX(train_food, order=(0,1,1), seasonal_order=(0,1,1,7))\nresults_food=mod_food.fit()\nplt.plot(results_food.predict(start = len(train_food), end = 1911), label = 'Predicted')\nplt.plot(test_food, label = 'Test')\nplt.legend(loc = 'upper left')\nrmse = math.sqrt(mean_squared_error(results_food.predict(start = 1883, end = 1911), test_food))\nplt.title(\"Food: SARIMA Model Prediction vs. Test with RMSE = \" + \"{:.0f}\".format(rmse))\n","123f76b3":"rmse \/ np.std(train_food)","40589a73":"plt.plot(results_food.predict(start = 1800, end = 2200), label = 'Predicted')\n","bc14f1ac":"train_hobbies = np.asarray(category_level_model['HOBBIES'][0:1883].astype(float))\ntest_hobbies = np.asarray(category_level_model['HOBBIES'][1883:-1].astype(float))\nmod_hobbies = sm.tsa.statespace.SARIMAX(train_hobbies, order=(0,1,1), seasonal_order=(0,1,1,7))\nresults_hobbies = mod_hobbies.fit() \nplt.plot(results_hobbies.predict(start = len(train_hobbies), end = 1911), label = 'Predicted')\nplt.plot(test_hobbies, label = 'Test')\nplt.legend(loc = 'upper left')\nrmse = math.sqrt(mean_squared_error(results_hobbies.predict(start = 1883, end = 1911), test_hobbies))\nplt.title(\"Hobbies: SARIMA Model Prediction vs. Test with RMSE = \" + \"{:.0f}\".format(rmse))","5f7f4d64":"train_household = np.asarray(category_level_final['HOUSEHOLD'][0:1883].astype(float))\ntest_household = np.asarray(category_level_final['HOUSEHOLD'][1883:-1].astype(float))\nmod_household = sm.tsa.statespace.SARIMAX(train_household, order=(0,1,1), seasonal_order=(0,1,1,7))\nresults_household = mod_household.fit()\nplt.plot(results_household.predict(start = len(train_household), end = 1911), label = 'Predicted')\nplt.plot(test_household, label = 'Test')\nplt.legend(loc = 'upper left')\nrmse = math.sqrt(mean_squared_error(results_household.predict(start = 1883, end = 1911), test_household))\nplt.title(\"Household: SARIMA Model Prediction vs. Test with RMSE = \" + \"{:.0f}\".format(rmse))","2cc5f1c7":"train_order = np.asarray(store_level_final['CA_1'][0:1000].astype(float))\ntest_order = np.asarray(store_level_final['CA_1'][1000:-1].astype(float))","19512b18":"# In this notebook, we use an ARIMA model to establish a baseline for forecasting Walmart sales. \n# First, we do some pre-processing and exploration of the data.","801fc82e":"# Now we implement the model!","77f19836":"We check whether this series is stationary.","db5b2f83":"There are clear seasonal trends, particularly within the week. Saturday and Sunday see much higher volumes.","cc23a943":"At this point, I think we will use the third time series because it makes the most sense. But let us set the parameters, which will give further insight.","8b11f9c7":"# Second, we look at the time series through a time series perspective, with an eye towards choosing the right ARIMA model.","6b02f50a":"We reject the null hypothesis that the time series has a unit root. What this means is that the time series is non-stationary.","c11516d2":"We take a look at differencing the time series.\n\nMuch better! We do not reject the null hypothesis. This is a good candidate to work with the ARIMA model.","5e400966":"[](http:\/\/)","f0e49f03":"Based on the spikes at 1 for all the graphs above, as well as the spike at 7, we use a ARIMA model of (0, 1, 1)(0, 1, 1)7.","08bcedf2":"From previous analysis, it is clear that people shop more on the weekend. What if we difference to account for the weekly seasonality?","c278f7a8":"We also fail to reject the null hypothesis here. Let's combine the two.\n","2de9cbd6":"The fit is pretty good..."}}