{"cell_type":{"9f9502b2":"code","a88f51c9":"code","916d9414":"code","0e159677":"code","34970f75":"code","94c10a7c":"code","fc3454cc":"code","155e7e20":"code","4668bafc":"code","4856b2b5":"code","c2296e66":"code","a7afa8b4":"code","2141825c":"code","21d3cf76":"code","657ec33d":"code","deba40da":"code","37d4c4db":"code","38054f83":"code","5da1faf1":"code","3e25b7d5":"code","021a39b9":"code","fc852e2d":"code","2b772577":"code","18f129d9":"code","30d06df7":"code","99ef24f9":"code","b049d18d":"code","9a8d9c88":"code","8e31fcba":"code","39239714":"code","93ab2be6":"code","95635679":"code","ead1a66c":"code","21ff9266":"code","61dc7e59":"code","27715423":"markdown","f77b3d63":"markdown","91e08bca":"markdown","c7a51f82":"markdown","16abc235":"markdown","d0409040":"markdown","756a4a53":"markdown","b4d86a27":"markdown","a47cf04a":"markdown","0a6b9a07":"markdown"},"source":{"9f9502b2":"import pandas as pd\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n\nfrom sklearn.metrics import accuracy_score\nfrom sklearn.metrics import confusion_matrix\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.svm import SVC\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.ensemble import GradientBoostingClassifier\nfrom sklearn.ensemble import AdaBoostClassifier\n\n\nfrom sklearn.preprocessing import LabelEncoder","a88f51c9":"df = pd.read_csv('..\/input\/loan-prediction-based-on-customer-behavior\/Training Data.csv')","916d9414":"df.head()","0e159677":"df.info()","34970f75":"df = df.drop('Id',axis = 'columns')","94c10a7c":"df.isnull().sum()","fc3454cc":"df.head()","155e7e20":"df = df.rename(columns = {'Married\/Single':'marriage_status', 'CITY':'City', 'STATE':'State'})","4668bafc":"sns.set_style('whitegrid')\nsns.countplot(x='Risk_Flag' , data = df , hue = 'House_Ownership')","4856b2b5":"sns.set_style('whitegrid')\nsns.countplot(x='Risk_Flag' ,data = df , hue = 'marriage_status')","c2296e66":"sns.set_style('whitegrid')\nsns.countplot(x='marriage_status' ,data = df , hue = 'House_Ownership')","a7afa8b4":"df.City.head(7)","2141825c":"for i in range(len(df.City)):\n    for j in df.City[i]:\n        if j == '[':   \n            df.at[i,'City'] = df.City[i].split('[')[0]","21d3cf76":"df.City.head(7)","657ec33d":"le = LabelEncoder()","deba40da":"columns_df = [df.marriage_status,df.House_Ownership,df.Car_Ownership,df.Profession,df.State,df.City]\nfor k in columns_df:\n    k = le.fit_transform(k)","37d4c4db":"df.marriage_status = le.fit_transform(df.marriage_status)\ndf.House_Ownership = le.fit_transform(df.House_Ownership)\ndf.Car_Ownership = le.fit_transform(df.Car_Ownership)\ndf.Profession = le.fit_transform(df.Profession)\ndf.State = le.fit_transform(df.State)\ndf.City = le.fit_transform(df.City)","38054f83":"df","5da1faf1":"corr = df.corr()\nplt.figure(figsize=(20,20))\nsns.heatmap(df.corr(), cmap='YlGnBu', annot = True)\nplt.title(\"Correlation Map\", fontweight = \"bold\", fontsize=16)","3e25b7d5":"sns.boxplot(y = 'Age', data = df) ###  NO OUTLIERS FOUND","021a39b9":"sns.boxplot(y = 'Income', data = df) ### NO OUTLIERS FOUND","fc852e2d":"X = df.drop(['Risk_Flag'], axis = 'columns')\ny = df.Risk_Flag","2b772577":"from sklearn.model_selection import train_test_split\n\nX_train,X_test,y_train,y_test = train_test_split(X,y,test_size=0.25)","18f129d9":"scaler = StandardScaler()\nX_train=scaler.fit_transform(X_train)\nX_test=scaler.transform(X_test)\n","30d06df7":"from sklearn.model_selection import cross_val_score\ndtc = DecisionTreeClassifier()\nlr = LogisticRegression()\nsvm = SVC()\nknc = KNeighborsClassifier()\nrfc = RandomForestClassifier()\ngbc = GradientBoostingClassifier()\nabc = AdaBoostClassifier()","99ef24f9":"keys = ['DecisionTreeClassifier','LogisticRegression','KNeighborsClassifier','RandomForestClassifier','GradientBoostingClassifier','AdaBoostClassifier']\nvalues = [DecisionTreeClassifier(), LogisticRegression(), KNeighborsClassifier(), RandomForestClassifier(), GradientBoostingClassifier(), AdaBoostClassifier()]","b049d18d":"scores = []\nfor value in values:\n    model=value\n    model.fit(X_train,y_train)\n    predict = model.predict(X_test)\n    acc = accuracy_score(y_test, predict)\n    scores.append(acc)","9a8d9c88":"X_train.shape","8e31fcba":"X_test.shape","39239714":"import tensorflow as tf\nfrom tensorflow import keras\n\n\nmodel = keras.Sequential([\n    keras.layers.Dense(5, input_shape=(11,), activation='relu'),\n    keras.layers.Dense(3, activation='relu'),\n    keras.layers.Dense(1, activation='sigmoid')\n])\n\n\nmodel.compile(optimizer='adam',\n              loss='binary_crossentropy',\n              metrics=['accuracy'])\n\nmodel.fit(X_train, y_train, epochs=20)","93ab2be6":"loss , accuracy_ann = model.evaluate(X_test, y_test)","95635679":"scores.append(accuracy_ann)\nkeys.append('ANN')","ead1a66c":"accuracy_ann","21ff9266":"from sklearn.metrics import confusion_matrix , classification_report\n\nprint(classification_report(y_test,predict))","61dc7e59":"plt.figure(figsize = (10,5))\nsns.barplot(x = scores, y = keys, palette='muted')\nplt.title(\"Model Scores\", fontsize=16, fontweight=\"bold\")","27715423":"<h3>Creating ANN<\/h3>","f77b3d63":"<h3>Plotting the scores<\/h3>\n\nComparing scores with ANN -","91e08bca":"<h3>Looks like there are some erroneous values in our City column which follow a similar trend.<\/h3>\n\n<h4>Eg:- Tiruchirappalli[10]<\/h4>","c7a51f82":"<h2>Loan Prediction Based on Customer Behavior<\/h2>","16abc235":"Income - Income of the user\n<br>\nAge\t- Age of the user\t\n<br>\nExperience - Professional experience of the user in years\n<br>\nProfession - Profession\n<br>\nMarried - \tWhether married or single\n<br>\nHouse_ownership - Owned or rented or neither\n<br>\nCar_ownership -\tDoes the person own a car\t\n<br>\nRisk_flag -\tIf defaulted on a loan\t\n<br>\nCurrent job years - Years of experience in the current job\t\n<br>\nCurrent house years -\tNumber of years in the current residence\n<br>\nCity - City of residence\t\n<br>\nState - State of residence\t","d0409040":"<h3>Checking for Outliers<\/h3>","756a4a53":"<h3>Random Forest Classifier outperformed ANN which is contrary to what I expected.<\/h3>\n<h3>Perhaps ANN can perform better if, hyperparameters are tuned.<\/h3>\n<h2>Let me know what you think!<\/h2>","b4d86a27":"<h3>Scaling the dataset and fitting the model<\/h3>","a47cf04a":"<h3>Encoding the categorical variables<\/h3>","0a6b9a07":"<h2>Data Preprocessing done.<\/h2>\n<h3>Spilitting the dataset into training and testing samples<\/h3>"}}