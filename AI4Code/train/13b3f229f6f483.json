{"cell_type":{"1d4ad2d2":"code","714e74be":"code","657c0c16":"code","f6a0e14f":"code","923af452":"code","b397f6a4":"code","678fb923":"code","eaf60ac4":"markdown","7045eade":"markdown","a98847ef":"markdown","aa7f232e":"markdown","94be3524":"markdown"},"source":{"1d4ad2d2":"#Download ctrNet-tool \n#You can find the code in https:\/\/github.com\/guoday\/ctrNet-tool\n!git clone https:\/\/github.com\/guoday\/ctrNet-tool.git\n!cp -r ctrNet-tool\/* .\/\n!rm -r ctrNet-tool data .git\n!ls -all","714e74be":"import ctrNet\nimport pandas as pd\nimport numpy as np\nimport tensorflow as tf\nfrom sklearn.model_selection import train_test_split\nfrom src import misc_utils as utils\nimport os\nimport gc\nimport random","657c0c16":"dtypes = {\n        'MachineIdentifier':                                    'category',\n        'ProductName':                                          'category',\n        'EngineVersion':                                        'category',\n        'AppVersion':                                           'category',\n        'AvSigVersion':                                         'category',\n        'IsBeta':                                               'int8',\n        'RtpStateBitfield':                                     'float16',\n        'IsSxsPassiveMode':                                     'int8',\n        'DefaultBrowsersIdentifier':                            'float16',\n        'AVProductStatesIdentifier':                            'float32',\n        'AVProductsInstalled':                                  'float16',\n        'AVProductsEnabled':                                    'float16',\n        'HasTpm':                                               'int8',\n        'CountryIdentifier':                                    'int16',\n        'CityIdentifier':                                       'float32',\n        'OrganizationIdentifier':                               'float16',\n        'GeoNameIdentifier':                                    'float16',\n        'LocaleEnglishNameIdentifier':                          'int8',\n        'Platform':                                             'category',\n        'Processor':                                            'category',\n        'OsVer':                                                'category',\n        'OsBuild':                                              'int16',\n        'OsSuite':                                              'int16',\n        'OsPlatformSubRelease':                                 'category',\n        'OsBuildLab':                                           'category',\n        'SkuEdition':                                           'category',\n        'IsProtected':                                          'float16',\n        'AutoSampleOptIn':                                      'int8',\n        'PuaMode':                                              'category',\n        'SMode':                                                'float16',\n        'IeVerIdentifier':                                      'float16',\n        'SmartScreen':                                          'category',\n        'Firewall':                                             'float16',\n        'UacLuaenable':                                         'float32',\n        'Census_MDC2FormFactor':                                'category',\n        'Census_DeviceFamily':                                  'category',\n        'Census_OEMNameIdentifier':                             'float16',\n        'Census_OEMModelIdentifier':                            'float32',\n        'Census_ProcessorCoreCount':                            'float16',\n        'Census_ProcessorManufacturerIdentifier':               'float16',\n        'Census_ProcessorModelIdentifier':                      'float16',\n        'Census_ProcessorClass':                                'category',\n        'Census_PrimaryDiskTotalCapacity':                      'float32',\n        'Census_PrimaryDiskTypeName':                           'category',\n        'Census_SystemVolumeTotalCapacity':                     'float32',\n        'Census_HasOpticalDiskDrive':                           'int8',\n        'Census_TotalPhysicalRAM':                              'float32',\n        'Census_ChassisTypeName':                               'category',\n        'Census_InternalPrimaryDiagonalDisplaySizeInInches':    'float16',\n        'Census_InternalPrimaryDisplayResolutionHorizontal':    'float16',\n        'Census_InternalPrimaryDisplayResolutionVertical':      'float16',\n        'Census_PowerPlatformRoleName':                         'category',\n        'Census_InternalBatteryType':                           'category',\n        'Census_InternalBatteryNumberOfCharges':                'float32',\n        'Census_OSVersion':                                     'category',\n        'Census_OSArchitecture':                                'category',\n        'Census_OSBranch':                                      'category',\n        'Census_OSBuildNumber':                                 'int16',\n        'Census_OSBuildRevision':                               'int32',\n        'Census_OSEdition':                                     'category',\n        'Census_OSSkuName':                                     'category',\n        'Census_OSInstallTypeName':                             'category',\n        'Census_OSInstallLanguageIdentifier':                   'float16',\n        'Census_OSUILocaleIdentifier':                          'int16',\n        'Census_OSWUAutoUpdateOptionsName':                     'category',\n        'Census_IsPortableOperatingSystem':                     'int8',\n        'Census_GenuineStateName':                              'category',\n        'Census_ActivationChannel':                             'category',\n        'Census_IsFlightingInternal':                           'float16',\n        'Census_IsFlightsDisabled':                             'float16',\n        'Census_FlightRing':                                    'category',\n        'Census_ThresholdOptIn':                                'float16',\n        'Census_FirmwareManufacturerIdentifier':                'float16',\n        'Census_FirmwareVersionIdentifier':                     'float32',\n        'Census_IsSecureBootEnabled':                           'int8',\n        'Census_IsWIMBootEnabled':                              'float16',\n        'Census_IsVirtualDevice':                               'float16',\n        'Census_IsTouchEnabled':                                'int8',\n        'Census_IsPenCapable':                                  'int8',\n        'Census_IsAlwaysOnAlwaysConnectedCapable':              'float16',\n        'Wdft_IsGamer':                                         'float16',\n        'Wdft_RegionIdentifier':                                'float16',\n        'HasDetections':                                        'int8'\n        }\nprint('Loading Train and Test Data.\\n')\ntrain = pd.read_csv('..\/input\/train.csv', dtype=dtypes, low_memory=True)\ntrain['MachineIdentifier'] = train.index.astype('uint32')\ntest  = pd.read_csv('..\/input\/test.csv',  dtype=dtypes, low_memory=True)\ntest['MachineIdentifier']  = test.index.astype('uint32')\ntest['HasDetections']=[0]*len(test)","f6a0e14f":"def make_bucket(data,num=10):\n    data.sort()\n    bins=[]\n    for i in range(num):\n        bins.append(data[int(len(data)*(i+1)\/\/num)-1])\n    return bins\nfloat_features=['Census_SystemVolumeTotalCapacity','Census_PrimaryDiskTotalCapacity']\nfor f in float_features:\n    train[f]=train[f].fillna(1e10)\n    test[f]=test[f].fillna(1e10)\n    data=list(train[f])+list(test[f])\n    bins=make_bucket(data,num=50)\n    train[f]=np.digitize(train[f],bins=bins)\n    test[f]=np.digitize(test[f],bins=bins)\n    \ntrain, dev,_,_ = train_test_split(train,train['HasDetections'],test_size=0.02, random_state=2019)\nfeatures=train.columns.tolist()[1:-1]","923af452":"hparam=tf.contrib.training.HParams(\n            model='xdeepfm',\n            norm=True,\n            batch_norm_decay=0.9,\n            hidden_size=[128,128],\n            cross_layer_sizes=[128,128,128],\n            k=8,\n            hash_ids=int(2e5),\n            batch_size=1024,\n            optimizer=\"adam\",\n            learning_rate=0.001,\n            num_display_steps=1000,\n            num_eval_steps=1000,\n            epoch=1,\n            metric='auc',\n            activation=['relu','relu','relu'],\n            cross_activation='identity',\n            init_method='uniform',\n            init_value=0.1,\n            feature_nums=len(features),\n            kfold=5)\nutils.print_hparams(hparam)","b397f6a4":"index=set(range(train.shape[0]))\nK_fold=[]\nfor i in range(hparam.kfold):\n    if i == hparam.kfold-1:\n        tmp=index\n    else:\n        tmp=random.sample(index,int(1.0\/hparam.kfold*train.shape[0]))\n    index=index-set(tmp)\n    print(\"Number:\",len(tmp))\n    K_fold.append(tmp)\n    \n\nfor i in range(hparam.kfold):\n    print(\"Fold\",i)\n    dev_index=K_fold[i]\n    dev_index=random.sample(dev_index,int(0.1*len(dev_index)))\n    train_index=[]\n    for j in range(hparam.kfold):\n        if j!=i:\n            train_index+=K_fold[j]\n    model=ctrNet.build_model(hparam)\n    model.train(train_data=(train.iloc[train_index][features],train.iloc[train_index]['HasDetections']),\\\n                dev_data=(train.iloc[dev_index][features],train.iloc[dev_index]['HasDetections']))\n    print(\"Training Done! Inference...\")\n    if i==0:\n        preds=model.infer(dev_data=(test[features],test['HasDetections']))\/hparam.kfold\n    else:\n        preds+=model.infer(dev_data=(test[features],test['HasDetections']))\/hparam.kfold","678fb923":"submission = pd.read_csv('..\/input\/sample_submission.csv')\nsubmission['HasDetections'] = preds\nprint(submission['HasDetections'].head())\nsubmission.to_csv('nffm_submission.csv', index=False)","eaf60ac4":"# Inference","7045eade":"# Creating hparams","a98847ef":"# Training model","aa7f232e":"# Download repo from https:\/\/github.com\/guoday\/ctrNet-tool","94be3524":"# Loading Dataset"}}