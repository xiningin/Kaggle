{"cell_type":{"40be7c91":"code","d89889bc":"code","73c8e306":"code","cb1e7e78":"code","0b5d76dc":"code","02b917c9":"code","731f683e":"markdown","5e3da4a9":"markdown","6b61622f":"markdown","66ca0f81":"markdown","92d7cb9d":"markdown","1a587d75":"markdown"},"source":{"40be7c91":"import numpy as np\nfrom keras import layers\nfrom keras.layers import Input, Add, Dense, Activation, ZeroPadding2D, BatchNormalization, Flatten, Conv2D, \\\n    AveragePooling2D, MaxPooling2D, GlobalMaxPooling2D\nimport tensorflow as tf\nfrom keras.initializers import glorot_uniform\nfrom keras.models import Model, load_model\nimport keras.backend as K\n\nK.set_image_data_format('channels_last')\nK.set_learning_phase(1)\n\n\ndef conv_block(input_tensor, kernel_size, filters, stage, block, strides=(2, 2)):\n    \"\"\"\n    \u5b9e\u73b0\u53c2\u5dee\u7f51\u7edc\u7684\u5377\u79ef\u5757\uff08convolutional block\uff09\n\n    \u53c2\u6570:\n    input_tensor -- \u8f93\u5165\u5f20\u91cf\uff0c\u7ef4\u5ea6(m, n_H_prev, n_W_prev, n_C_prev)\n    kernel_size -- \u4e3b\u8def\u5f84\u4e2d\u95f4\u5355\u5143\u5377\u79ef\u7a97\u53e3\u7684\u7ef4\u5ea6\n    filters -- python\u6574\u6570\u5217\u8868\uff0c\u5b9a\u4e49\u4e3b\u8def\u5f84\u4e0a\u5377\u79ef\u5c42\u7684\u5377\u79ef\u6838\u6570\u91cf\n    stage -- \u6574\u6570\uff0c\u53ef\u4ee5\u770b\u505a\u9636\u6bb5\u7684\u540d\u79f0\uff0c\u7528\u6765\u533a\u5206\u5404\u9636\u6bb5\n    block -- \u5b57\u7b26\u4e32\/\u5b57\u7b26\uff0c\u53ef\u4ee5\u770b\u505a\u662f\u5c42\u7684\u540d\u79f0\uff0c\u7528\u6765\u533a\u5206\u9636\u6bb5\u5185\u5404\u5c42\n    strides -- \u7b2c\u4e00\u5377\u79ef\u5c42\u7684\u5377\u79ef\u6b65\u957f\n\n    \u8fd4\u56de:\n    X -- \u7b49\u7ef4\u5757\u7684\u8f93\u51fa\uff0c\u7ef4\u5ea6\u4e3a(n_H, n_W, n_C)\u7684\u5f20\u91cf\n    \"\"\"\n\n    # \u8f93\u51fa\u5377\u79ef\u5c42\u3001\u6b63\u89c4\u5316\u4fa7\u57fa\u7840\u540d\u79f0\n    conv_name_base = 'res' + str(stage) + block + '_branch'\n    bn_name_base = 'bn' + str(stage) + block + '_branch'\n\n    # \u63d0\u53d6\u5377\u79ef\u6838\u6570\u91cf\n    F1, F2, F3 = filters\n    \n    if K.image_data_format() == 'channels_last':\n        bn_axis = 3\n    else:\n        bn_axis = 1\n\n    # \u4e3b\u8def\u5f84\u53c2\u5dee\u7f51\u7edc\u7b49\u7ef4\u5757\u7684\u7b2c\u4e00\u4e2a\u7ec4\u4ef6\n    X = Conv2D(filters=F1, \n               kernel_size=(1, 1),\n               strides=strides,\n               padding='valid',\n               kernel_initializer='he_normal',\n               name=conv_name_base + '2a')(input_tensor)\n    X = BatchNormalization(axis=bn_axis, name=bn_name_base + '2a')(X)\n    X = Activation('relu')(X)\n\n    # \u4e3b\u8def\u5f84\u53c2\u5dee\u7f51\u7edc\u7b49\u7ef4\u5757\u7684\u7b2c\u4e8c\u4e2a\u7ec4\u4ef6\n    X = Conv2D(filters=F2, \n               kernel_size=kernel_size,\n               strides=(1, 1),\n               padding='same',\n               kernel_initializer='he_normal',\n               name=conv_name_base + '2b')(X)\n    X = BatchNormalization(axis=bn_axis, name=bn_name_base + '2b')(X)\n    X = Activation('relu')(X)\n\n    # \u4e3b\u8def\u5f84\u53c2\u5dee\u7f51\u7edc\u7b49\u7ef4\u5757\u7684\u7b2c\u4e09\u4e2a\u7ec4\u4ef6\n    X = Conv2D(filters=F3, \n               kernel_size=(1, 1), \n               strides=(1, 1), \n               padding='valid', \n               kernel_initializer='he_normal',\n               name=conv_name_base + '2c')(X)\n    X = BatchNormalization(axis=bn_axis, name=bn_name_base + '2c')(X)\n\n    # \u5feb\u6377\u8def\u5f84 (\u22482 lines)\n    shortcut = Conv2D(filters=F3, \n                      kernel_size=(1, 1), \n                      strides=strides, \n                      padding='valid', \n                      kernel_initializer='he_normal',\n                      name=conv_name_base + '1')(input_tensor)\n    shortcut = BatchNormalization(axis=bn_axis, name=bn_name_base + '1')(shortcut)\n\n    # \u6700\u540e\u4e00\u6b65\uff1a\u5c06\u96f6\u65f6\u4fdd\u5b58\u8f93\u5165\u5f20\u91cf\uff08shortcut value\uff09\u5377\u79ef\u540e\u7684\u503c\u52a0\u56de\u4e3b\u8def\u5f84\uff0c\u5e76\u8fdb\u884c\u7ebf\u6027\u6574\u6d41(\u22482 lines)\n    X = Add()([X, shortcut])\n    X = Activation('relu')(X)\n\n    # ****** \u5728\u6b64\u7ed3\u675f\u7f16\u7801 ****** #\n\n    return X","d89889bc":"import numpy as np\nfrom keras import layers\nfrom keras.layers import Input, Add, Dense, Activation, ZeroPadding2D, BatchNormalization, Flatten, Conv2D, \\\n    AveragePooling2D, MaxPooling2D, GlobalMaxPooling2D\nimport tensorflow as tf\nfrom keras.initializers import glorot_uniform\nfrom keras.models import Model, load_model\nimport keras.backend as K\nK.set_image_data_format('channels_last')\nK.set_learning_phase(1)\n\n\ndef identity_block(input_tensor, kernel_size, filters, stage, block):\n    \"\"\"\n    \u5b9e\u73b0\u53c2\u5dee\u7f51\u7edc\u7684\u7b49\u7ef4\u5757\uff08identity block\uff09\n\n    \u53c2\u6570:\n    input_tensor -- \u8f93\u5165\u5f20\u91cf\uff0c\u7ef4\u5ea6(m, n_H_prev, n_W_prev, n_C_prev)\n    kernel_size -- \u6574\u6570\uff0c\u4e3b\u8def\u5f84\u4e2d\u95f4\u5355\u5143\u5377\u79ef\u7a97\u53e3\u7684\u7ef4\u5ea6\n    filters -- python\u6574\u6570\u5217\u8868\uff0c\u5b9a\u4e49\u4e3b\u8def\u5f84\u4e0a\u5377\u79ef\u5c42\u7684\u5377\u79ef\u6838\u6570\u91cf\n    stage -- \u6574\u6570\uff0c\u53ef\u4ee5\u770b\u505a\u662f\u5c42\u7684\u540d\u79f0\uff0c\u7528\u6765\u533a\u5206\u5404\u5c42\n    block -- \u5b57\u7b26\u4e32\/\u5b57\u7b26\uff0c\u53ef\u4ee5\u770b\u505a\u662f\u5c42\u7684\u540d\u79f0\uff0c\u7528\u6765\u533a\u5206\u5404\u5c42\n\n    \u8fd4\u56de:\n    X -- \u7b49\u7ef4\u5757\u7684\u8f93\u51fa\uff0c\u7ef4\u5ea6\u4e3a(m, n_H, n_W, n_C)\u7684\u5f20\u91cf\n    \"\"\"\n\n    # \u8f93\u51fa\u5377\u79ef\u5c42\u3001\u6b63\u89c4\u5316\u4fa7\u57fa\u7840\u540d\u79f0\n    conv_name_base = 'res' + str(stage) + block + '_branch'\n    bn_name_base = 'bn' + str(stage) + block + '_branch'\n\n    # \u63d0\u53d6\u5377\u79ef\u6838\u6570\u91cf\n    F1, F2, F3 = filters\n    \n    if K.image_data_format() == 'channels_last':\n        bn_axis = 3\n    else:\n        bn_axis = 1\n\n    # \u4e3b\u8def\u5f84\u53c2\u5dee\u7f51\u7edc\u7b49\u7ef4\u5757\u7684\u7b2c\u4e00\u4e2a\u7ec4\u4ef6\n    X = Conv2D(filters=F1, \n               kernel_size=(1, 1), \n               strides=(1, 1),\n               kernel_initializer='he_normal',\n               name=conv_name_base + '2a',\n               )(input_tensor)\n    X = BatchNormalization(axis=bn_axis, name=bn_name_base + '2a')(X)\n    X = Activation('relu')(X)\n\n    # ****** \u5728\u6b64\u5f00\u59cb\u7f16\u7801 ****** #\n\n    # \u4e3b\u8def\u5f84\u53c2\u5dee\u7f51\u7edc\u7b49\u7ef4\u5757\u7684\u7b2c\u4e8c\u4e2a\u7ec4\u4ef6\n    X = Conv2D(filters=F2, \n               kernel_size=kernel_size, \n               strides=(1, 1),\n               padding='same', \n               kernel_initializer='he_normal',\n               name=conv_name_base + '2b')(X)\n    X = BatchNormalization(axis=bn_axis, name=bn_name_base + '2b')(X)\n    X = Activation('relu')(X)\n\n    # \u4e3b\u8def\u5f84\u53c2\u5dee\u7f51\u7edc\u7b49\u7ef4\u5757\u7684\u7b2c\u4e09\u4e2a\u7ec4\u4ef6\n    X = Conv2D(filters=F3,\n               kernel_size=(1, 1),\n               strides=(1, 1), \n               padding='valid', \n               kernel_initializer='he_normal',\n               name=conv_name_base + '2c')(X)\n    X = BatchNormalization(axis=bn_axis, name=bn_name_base + '2c')(X)\n\n    # \u6700\u540e\u4e00\u6b65\uff1a\u5c06\u96f6\u65f6\u4fdd\u5b58\u8f93\u5165\u5f20\u91cf\uff08shortcut value\uff09\u52a0\u56de\u4e3b\u8def\u5f84\uff0c\u5e76\u8fdb\u884c\u7ebf\u6027\u6574\u6d41\n    X = Add()([X, input_tensor])\n    X = Activation('relu')(X)\n\n    # ****** \u5728\u6b64\u7ed3\u675f\u7f16\u7801 ****** #\n\n    return X","73c8e306":"from keras.layers import Input, Add, Dense, Activation, ZeroPadding2D, BatchNormalization, Flatten, Conv2D, \\\n    AveragePooling2D, MaxPooling2D, GlobalMaxPooling2D, Dropout, GlobalAveragePooling2D\nfrom keras.initializers import glorot_uniform\nfrom keras.models import Model\nfrom keras.losses import categorical_crossentropy\nfrom keras.optimizers import Adadelta, Adam\n\ndef ResNet50(input_shape=(224, 224, 3), classes=2):\n    \"\"\"\n    \u5b9e\u73b0\u6d41\u884c\u7684ResNet50\u6df1\u5ea6\u5377\u79ef\u795e\u7ecf\u7f51\u7edc\uff0c\u7f51\u7edc\u7ed3\u6784\u5982\u4e0b\uff1a\n    CONV2D -> BATCHNORM -> RELU -> MAXPOOL -> CONVBLOCK -> IDBLOCK*2 -> CONVBLOCK -> IDBLOCK*3\n    -> CONVBLOCK -> IDBLOCK*5 -> CONVBLOCK -> IDBLOCK*2 -> AVGPOOL -> TOPLAYER\n\n    \u53c2\u6570:\n    input_shape -- \u6570\u636e\u96c6\u56fe\u50cf\u7684\u7ef4\u5ea6\n    classes -- \u6574\u6570\uff0c\u5206\u7c7b\u6570\u91cf\n\n    \u8fd4\u56de:\n    model -- \u4e00\u4e2aKeras\u7684Model\u5b9e\u4f8b\n    \"\"\"\n\n    # \u8f93\u5165\u8bbe\u7f6e\u4e3a\u4e00\u4e2a\u5f20\u91cf\uff0c\u7ef4\u5ea6\u4e3ainput_shape\n    X_input = Input(input_shape)\n\n    if K.image_data_format() == 'channels_last':\n        bn_axis = 3\n    else:\n        bn_axis = 1\n        \n    # \u96f6\u586b\u5145\n    X = ZeroPadding2D((3, 3))(X_input)\n\n    # \u7b2c1\u9636\u6bb5\n    X = Conv2D(64, (7, 7), \n               strides=(2, 2), \n               padding='valid',\n               kernel_initializer='he_normal',\n               name='conv1')(X)\n    X = BatchNormalization(axis=bn_axis, name='bn_conv1')(X)\n    X = Activation('relu')(X)\n    X = ZeroPadding2D(padding=(1, 1), name='pool1_pad')(X)\n    X = MaxPooling2D((3, 3), strides=(2, 2))(X)\n\n    # \u7b2c2\u9636\u6bb5\n    X = conv_block(X, 3, filters=[64, 64, 256], stage=2, block='a', strides=(1, 1))\n    X = identity_block(X, 3, filters=[64, 64, 256], stage=2, block='b')\n    X = identity_block(X, 3, filters=[64, 64, 256], stage=2, block='c')\n\n    # \u7b2c3\u9636\u6bb5\n    X = conv_block(X, 3, filters=[128, 128, 512], stage=3, block='a', strides=(2, 2))\n    X = identity_block(X, 3, filters=[128, 128, 512], stage=3, block='b')\n    X = identity_block(X, 3, filters=[128, 128, 512], stage=3, block='c')\n    X = identity_block(X, 3, filters=[128, 128, 512], stage=3, block='d')\n\n\n    # \u7b2c4\u9636\u6bb5\n    X = conv_block(X, 3, filters=[256, 256, 1024], stage=4, block='a', strides=(2, 2))\n    X = identity_block(X, 3, filters=[256, 256, 1024], stage=4, block='b')\n    X = identity_block(X, 3, filters=[256, 256, 1024], stage=4, block='c')\n    X = identity_block(X, 3, filters=[256, 256, 1024], stage=4, block='d')\n    X = identity_block(X, 3, filters=[256, 256, 1024], stage=4, block='e')\n    X = identity_block(X, 3, filters=[256, 256, 1024], stage=4, block='f')\n\n    # \u7b2c5\u9636\u6bb5\n    X = conv_block(X, 3, filters=[512, 512, 2048], stage=5, block='a', strides=(2, 2))\n    X = identity_block(X, 3, filters=[512, 512, 2048], stage=5, block='b')\n    X = identity_block(X, 3, filters=[512, 512, 2048], stage=5, block='c')\n\n    # \u5e73\u5747\u6c60\u5316 (\u22481 line). \u8bf7\u4f7f\u7528\"X = AveragePooling2D(...)(X)\"\n    X = GlobalAveragePooling2D(name='avg_pool')(X)\n    X = Dense(classes, activation='softmax', name='fc' + str(classes))(X)\n\n    # Create model\n    model = Model(inputs=X_input, outputs=X, name='ResNet50')\n\n    return model","cb1e7e78":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# \u6570\u636e\u6587\u4ef6\u4f4d\u4e8e\"\/kaggle\/input\/\"\u76ee\u5f55\n# \u4e0b\u9762\u7684\u4ee3\u7801\u53ef\u4ee5\u67e5\u770b\/kaggle\/input\u76ee\u5f55\u4e0b\u7684\u5176\u5b83\u5b50\u76ee\u5f55\u548c\u6587\u4ef6\n'''\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n'''\n# \u6837\u672c\u56fe\u50cf\u6587\u4ef6\u76ee\u5f55\nimage_base_path = '\/kaggle\/input\/the-oxfordiiit-pet-dataset\/images\/images'\n'''\n\u6837\u672c\u6587\u4ef6\u5217\u8868\n\u6587\u4ef6\u540d               \u5206\u7c7b\u7f16\u53f7\uff081-37\uff09    \u732b\u72d7\u7f16\u53f7\uff081\uff1a\u732b\uff0c2\uff1a\u72d7\uff09    \u79cd\u5185\u5206\u7c7b\u7f16\u53f7\uff08\u732b\uff1a1-12\uff0c\u72d7\uff1a1-25\uff09\nAbyssinian_100      1                 1                       1\nyorkshire_terrier_9 37                2                       25\n'''\nsample_files = '\/kaggle\/input\/the-oxfordiiit-pet-dataset\/annotations\/annotations\/list.txt'\n# \u8bad\u7ec3\u6587\u4ef6\u5217\u8868\ntrain_files = '\/kaggle\/input\/the-oxfordiiit-pet-dataset\/annotations\/annotations\/trainval.txt'\n# \u6d4b\u8bd5\u6587\u4ef6\u5217\u8868\ntest_files = '\/kaggle\/input\/the-oxfordiiit-pet-dataset\/annotations\/annotations\/test.txt'\n\nread_for = open(sample_files)\nsample_files = []\nsample_labels = []\nfor txt_line in read_for:\n    if txt_line[0] == '#':\n        continue\n    file_name, class_id, cat_dog_id, sub_class_id = txt_line.split(' ')\n    sample_files.append(file_name + '.jpg')\n    sample_labels.append(cat_dog_id)\nread_for.close()\n\nsample_data_frame = pd.DataFrame({'filename': sample_files, 'label': sample_labels})\n","0b5d76dc":"from tensorflow.keras.preprocessing.image import ImageDataGenerator\nfrom tensorflow.keras.optimizers import SGD\n\nBATCH_SIZE = 128\nEPOCHS = 80\nLEARN_RATE = 0.01\nCLASSES = 2\n\n# \u6784\u9020\u7528\u4e8e\u6570\u636e\u589e\u5f3a\u7684\u8bad\u7ec3\u6570\u636e\u751f\u6210\u5668\ndata_gen = ImageDataGenerator(rescale=1. \/ 255.,\n                              rotation_range=20,\n                              zoom_range=0.15,\n                              width_shift_range=0.2,\n                              height_shift_range=0.2,\n                              shear_range=0.15,\n                              horizontal_flip=True,\n                              validation_split=0.05,\n                              fill_mode=\"nearest\"\n                              )\n\n# \u521d\u59cb\u5316\u8bad\u7ec3\u6570\u636e\u96c6\u751f\u6210\u5668\ntrainGen = data_gen.flow_from_dataframe(dataframe=sample_data_frame,\n                                        directory=image_base_path,\n                                        x_col='filename',\n                                        y_col='label',\n                                        target_size=(224, 224),\n                                        class_mode='categorical',\n                                        batch_size=BATCH_SIZE,\n                                        subset='training',\n                                        shuffle=True,\n                                        seed=42)\n\n# \u6784\u9020\u7528\u4e8e\u6570\u636e\u589e\u5f3a\u7684\u6821\u9a8c\u6570\u636e\u751f\u6210\u5668\nval_gen = ImageDataGenerator(rescale=1. \/ 255.,\n                              validation_split=0.05\n                              )\n# \u521d\u59cb\u5316\u6821\u9a8c\u6570\u636e\u96c6\u751f\u6210\u5668\nvalGen = val_gen.flow_from_dataframe(dataframe=sample_data_frame,\n                                      directory=image_base_path,\n                                      x_col='filename',\n                                      y_col='label',\n                                      target_size=(224, 224),\n                                      class_mode='categorical',\n                                      batch_size=BATCH_SIZE,\n                                      subset='validation',\n                                      shuffle=True,\n                                      seed=42)\n\nopt = SGD(lr=LEARN_RATE, momentum=0.9, nesterov=False)\n# model = ResNet.res_net50(CLASSES)\nmodel = ResNet50(input_shape=(224, 224, 3), classes=CLASSES)\nmodel.compile(loss=\"categorical_crossentropy\",\n              optimizer=opt,\n              metrics=[\"accuracy\"])\n\n# \u8bad\u7ec3\u7f51\u7edc\nhistory = model.fit_generator(trainGen,\n                    steps_per_epoch=trainGen.n \/\/ BATCH_SIZE,\n                    validation_data=valGen,\n                    validation_steps=valGen.n \/\/ BATCH_SIZE,\n                    epochs=EPOCHS,\n                    max_queue_size=50,\n                    shuffle=True,\n                    verbose=1)\n\n# \u5c06\u8bad\u7ec3\u5f97\u5230\u7684\u6a21\u578b\u4fdd\u5b58\u5230\u6587\u4ef6\nprint(\"[\u4fe1\u606f] \u4fdd\u5b58\u6a21\u578b...\")\nmodel.save(\"ResNet50.h5\", overwrite=True)","02b917c9":"import numpy as np\nimport matplotlib.pyplot as plt\n\n\n# \u8bad\u7ec3\u65e5\u5fd7\u7ed8\u56fe\u7c7b\nclass HistoryGraph:\n    def __init__(self, history, epochs, title, file_path):\n        # \u8bad\u7ec3\u65e5\u5fd7\n        self.history = history\n        # \u8bad\u7ec3\u8d9f\u6570\n        self.epochs = epochs\n        # \u56fe\u6807\u9898\n        self.title = title\n        # \u56fe\u50cf\u5b58\u76d8\u6587\u4ef6\u8def\u5f84\u540d\n        self.file_path = file_path\n\n    def draw(self):\n        figure, (ax1, ax2) = plt.subplots(1, 2, figsize=(12, 4))\n        figure.suptitle(self.title, fontsize=12)\n        figure.subplots_adjust(top=0.85, wspace=0.3)\n\n        epoch_list = list(range(1, self.epochs + 1))\n        ax1.plot(epoch_list,\n                 self.history.history['accuracy'],\n                 label='Train Accuracy')\n        ax1.plot(epoch_list,\n                 self.history.history['val_accuracy'],\n                 label='Validation Accuracy')\n        ax1.set_xticks(np.arange(0, self.epochs + 1, 5))\n        ax1.set_ylabel('Accuracy Value')\n        ax1.set_xlabel('Epoch #')\n        ax1.set_title('Accuracy')\n        ax1.legend(loc=\"best\")\n\n        ax2.plot(epoch_list, self.history.history['loss'], label='Train Loss')\n        ax2.plot(epoch_list,\n                 self.history.history['val_loss'],\n                 label='Validation Loss')\n        ax2.set_xticks(np.arange(0, self.epochs + 1, 5))\n        ax2.set_ylabel('Loss Value')\n        ax2.set_xlabel('Epoch #')\n        ax2.set_title('Loss')\n        ax2.legend(loc=\"best\")\n        plt.show()\n        figure.savefig(self.file_path)\n        plt.close()\n        \ntitle = \"Cat vs. Dog ResNet50 Training Performance\"\ngraph_file = \"ResNet50_Training_Performance.pdf\"\nHistoryGraph(history, EPOCHS, title, graph_file).draw()","731f683e":"\u540e\u6fc0\u52b1\u5377\u79ef\u6b8b\u5dee\u6a21\u5757\n![image.png](attachment:image.png)","5e3da4a9":"\u7ed8\u5236\u8bad\u7ec3\u6027\u80fd\u56fe","6b61622f":"\u540e\u6fc0\u52b1\u7b49\u7ef4\u6b8b\u5dee\u6a21\u5757\n![image.png](attachment:image.png)","66ca0f81":"\u4eceOxford-IIIT Pet Dataset\u7684list.txt\u751f\u6210DataFrame\uff0c\u4e8c\u5206\u7c7b\uff081\uff1a\u732b\uff0c2\uff1a\u72d7\uff09","92d7cb9d":"ResNet50\u5b9a\u4e49","1a587d75":"\u8bad\u7ec3\u6a21\u578b\n"}}