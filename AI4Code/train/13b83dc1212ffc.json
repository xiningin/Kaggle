{"cell_type":{"cd84df22":"code","1da8cb1c":"code","116d5945":"code","2568faeb":"code","3fd4ce26":"code","2e3ed01a":"code","4d4eb606":"code","5edbb86e":"code","20f88286":"code","d7b2f110":"code","c3549783":"code","6be69d0a":"code","cf37570c":"code","06217d54":"code","bfd9192b":"code","ea521f4d":"markdown","92c257a9":"markdown","8a8ca19a":"markdown","72558a94":"markdown","1a1ab536":"markdown","2c67a6ac":"markdown","9893f27b":"markdown"},"source":{"cd84df22":"import numpy as np\nimport pandas as pd\nfrom datetime import date,datetime, timedelta\ntry:\n    import yfinance as yf\nexcept:\n    !pip install yfinance\n    import yfinance as yf","1da8cb1c":"#df = pd.read_csv(\"..\/input\/axpdataset\/dow_30_2009_2020.csv\")\n#df = df.groupby('tic')\n#df.size()","116d5945":"def cut_file(csv_path):\n    acoes = 1\n    df = pd.read_csv(\"..\/input\/axpdataset\/dow_30_2009_2020.csv\")\n    df = df[:2926*acoes]\n    return df","2568faeb":"def cut_dataframe(df, acoes):\n    df = df[2926*(acoes-1):2926*acoes]\n    return df","3fd4ce26":"def generate_cripto_inputs_per_minute():\n    # as moedas comentadas n\u00e3o existem no dataset\n    markets = [\n    'BTC-USD','ETH-USD',\n    #'USDT-USD'\n    #'DOT2-USD',\n    #'DOT1-USD',\n    'XRP-USD','ADA-USD',\n    'LINK-USD','LTC-USD','BCH-USD','BNB-USD','XLM-USD','USDC-USD',\n    #'BSV-USD',\n    'EOS-USD',\n    'XMR-USD','THETA-USD','XTZ-USD','TRX-USD','XEM-USD','VET-USD',\n    #'CCXX-USD','NEO-USD',\n    #'ATOM1-USD',\n    #'CEL-USD',\n    #'ATOM2-USD',\n    'DOGE-USD',\n    #'MIOTA-USD',\n    'DASH-USD','ETC-USD',\n    'ZIL-USD','ZEC-USD','DCR-USD',\n    # Adicionei essas \u00faltimas porque o algoritmo precisa de 30 moedas diferentes\n    'ARPA-USD','BUSD-USD','DOT-USD','SOL-USD','FTM-USD','USDC-USD','FIL-USD'\n    ]\n\n    file_paths = []\n    for market in markets:\n        file_paths.append('..\/input\/binance-full-history\/'+ market+'T'+'.parquet')\n    \n    item_number = 2926 # n\u00famero de registo (linha) para cada moeda\n    \n    file_path = file_paths[0]\n    file_paths = file_paths[1:]\n    df_cripto = pd.read_parquet(file_path, engine='pyarrow')\n    df_cripto = df_cripto[df_cripto.shape[0]-item_number:]\n    data = df_cripto.to_numpy()\n        \n    for file_path in file_paths:\n        df_cripto = pd.read_parquet(file_path, engine='pyarrow')\n        \n        # pegando as \u00faltimas linhas de dados\n        df_cripto = df_cripto[df_cripto.shape[0]-item_number:]\n        #print(df_cripto.shape)\n        #print(len(data))\n        data = np.append(data, df_cripto.to_numpy(), axis=0) \n    #print(len(data))\n    #open\thigh\tlow\tclose\tvolume\tquote_asset_volume\tnumber_of_trades\ttaker_buy_base_asset_volume\ttaker_buy_quote_asset_volume\n    #'open':'prcod', 'high':'prchd', 'low':'prcld', 'close':'prccd', 'volume':'cshtrd'}\n    df_cripto = pd.DataFrame(data, columns = ['prcod', 'prchd', 'prcld', 'prccd', 'cshtrd','a','b','c','d'])\n\n    df_alg = pd.read_csv(\"..\/input\/axpdataset\/dow_30_2009_2020.csv\")\n    #print(df_alg.shape)\n    df_alg = df_alg[:df_cripto.shape[0]]\n    #print(df_alg.shape)\n    df_alg = df_alg.drop(columns=['prcod', 'prchd','prcld','prccd','cshtrd','tic'])\n    df_alg = df_alg.join(df_cripto['prcod'])\n    df_alg = df_alg.join(df_cripto['prchd'])\n    df_alg = df_alg.join(df_cripto['prcld'])\n    df_alg = df_alg.join(df_cripto['prccd'])\n    df_alg = df_alg.join(df_cripto['cshtrd'])\n    \n    df_tic = pd.DataFrame(index=range(0,30*2926), columns = ['tic'])\n    last_position = 0\n    for index, market in enumerate(markets):\n        #print(index,market)\n        for i in range(last_position, (index+1)*2926):\n            df_tic.at[i,'tic'] = market\n        last_position = (index+1)*2926\n    df_alg = df_alg.join(df_tic['tic'])\n    return df_alg","2e3ed01a":"def generate_cripto_input_daily_from_cryptocurrencypricehistory(file_path):\n    file_path = \"..\/input\/cryptocurrencypricehistory\/coin_Bitcoin.csv\"\n    item_number = 2926 # n\u00famero de registo (linha) para cada moeda\n        \n    df_cripto = pd.read_csv(file_path)\n    \n    df_cripto = df_cripto[df_cripto.shape[0]-item_number:]\n    df_alg = pd.read_csv(\"..\/input\/axpdataset\/dow_30_2009_2020.csv\")\n    df_alg = df_alg[:item_number]\n    \n    print(df_alg.shape)\n    print(df_cripto.shape)\n    df_cripto = df_cripto.rename(columns={'Date':'datadate','Open':'prcod', 'High':'prchd', 'Low':'prcld', 'Close':'prccd', 'Volume':'cshtrd', 'Symbol':'tic'})\n    df_cripto = df_cripto.drop(columns=['SNo','Name','Marketcap'])\n    df_cripto = df_cripto.join(df_alg['ajexdi'])\n    #df_alg = df_alg.drop(columns=['prcod', 'prchd','prcld','prccd','cshtrd','tic','datadate'])\n    #df_alg = df_alg.join(df_cripto['prcod'])\n    #df_alg = df_alg.join(df_cripto['prchd'])\n    #df_alg = df_alg.join(df_cripto['prcld'])\n    #df_alg = df_alg.join(df_cripto['prccd'])\n    #df_alg = df_alg.join(df_cripto['cshtrd'])\n    #df_alg = df_alg.join(df_cripto['tic'])\n    \n    for i, _ in df_cripto.iterrows():\n        date_time_string = df_cripto.at[i,'datadate']\n        date = datetime.strptime(date_time_string, \"%Y-%m-%d %H:%M:%S\")\n        date_string = date.strftime(\"%Y%m%d\")\n        df_cripto.at[i,'datadate'] = date_string\n        \n    #df_alg = df_alg.join(df_cripto['datadate'])\n    #df_cripto.to_csv(\"dow_30_2009_2020.csv\")\n    #print(df_cripto.head())\n    return df_cripto","4d4eb606":"# Dados do yfinance di\u00e1rios\ndef yfinance_daily(ticker='BTC-USD'):\n    ticker_ids = [\n    #     'BTC-USD'\n    #   # , 'ETH-USD'\n    #   # , 'USDT-USD'\n    #   # , 'DOT2-USD'\n    #   # , 'DOT1-USD'\n    #   # , 'XRP-USD'\n    #   # , 'ADA-USD'\n    #   # , 'LINK-USD'\n    #   # , 'LTC-USD'\n    #   # , 'BCH-USD'\n    #   # , 'BNB-USD'\n    #   # , 'XLM-USD'\n    #   # , 'USDC-USD'\n    #   # , 'BSV-USD'\n    #   # , 'EOS-USD'\n    #   # , 'XMR-USD'\n    #   # , 'THETA-USD'\n    #   # , 'XTZ-USD'\n    #   # , 'TRX-USD'\n    #   # , 'XEM-USD'\n    #   # , 'VET-USD'\n    #   # , 'CCXX-USD'\n    #   # , 'NEO-USD'\n    #   # , 'ATOM1-USD'\n    #   # , 'CEL-USD'\n    #   # # , 'ATOM2-USD'\n    #   # , 'DOGE-USD'\n    #   # , 'MIOTA-USD'\n    #   # , 'DASH-USD'\n    #   # , 'ETC-USD'\n    #   # , 'ZIL-USD'\n    #   # , 'ZEC-USD'\n    #   # , 'DCR-USD'\n    \n    'BTC-USD'\n    #    ,'AXP',\n    #   , 'AAPL'\n    #   , 'VZ'\n    #   # , 'BA'\n    #   , 'CAT'\n    #   , 'JPM'\n    #   , 'CVX'\n    #   , 'KO'\n    #   , 'DIS'\n    #   , 'DD'\n    #   , 'XOM'\n    #   , 'HD'\n    #   , 'INTC'\n    #   , 'IBM'\n    #   , 'JNJ'\n    #   , 'MCD'\n    #   , 'MRK'\n    #   , 'MMM'\n    #   , 'NKE'\n    #   , 'PFE'\n    #   , 'PG'\n    #   , 'UNH'\n    #   , 'RTX'\n    #   , 'WMT'\n    #   , 'WBA'\n    #   , 'MSFT'\n    #   , 'CSCO'\n    #   , 'TRV'\n    #   , 'GS'\n    #   , 'V'\n     ]\n    \n    fdf = pd.DataFrame()\n    \n    print(fdf.head())\n    \n    for ticker_id in ticker_ids:\n         ticker = yf.Ticker(ticker_id)\n         \n         df = ticker.history(\n             start='2009-01-02',\n             end='2021-10-26',\n             interval=\"1d\",\n             auto_adjust=False,\n             prepost=False\n         )\n         \n         df.reset_index(level=df.index.names, inplace=True)\n    \n         df.drop(columns=['Dividends', 'Stock Splits', 'Adj Close'], inplace=True)\n         df.rename(columns={\n             \"Date\": \"datadate\",\n             \"Open\": \"prcod\",\n             \"High\": \"prchd\",\n             \"Low\": \"prcld\",\n             \"Close\": \"prccd\",\n             \"Volume\": \"cshtrd\"\n         }, inplace=True)\n         df['tic'] = ticker.ticker\n         df['ajexdi'] = 1\n         df['datadate'] = df['datadate'].dt.strftime('%Y%m%d')\n         df = df[['datadate', 'tic', 'prccd', 'ajexdi', 'prcod', 'prchd', 'prcld', 'cshtrd']]\n         print(df.head(5))\n    \n         fdf = pd.concat([fdf, df])\n    \n    fdf.sort_values(by=['tic', 'datadate'], inplace=True)\n    fdf[''] = range(0, fdf.shape[0])\n    \n    print(fdf.head())\n    \n    df_alg = pd.read_csv(\"..\/input\/axpdataset\/dow_30_2009_2020.csv\")\n    df_alg = df_alg[:fdf.shape[0]]\n    df_alg = df_alg.reset_index(inplace=False)\n    print(df_alg.head())\n    \n    print(type(fdf))\n    fdf = fdf.drop(columns=['datadate'])\n    fdf = fdf.join(df_alg['datadate'])\n    print(df_alg.shape[0],'==',fdf.shape[0])\n    print(fdf.head())\n    #item_number = 2926\n    #start = fdf.shape[0]-item_number\n    #if start < 0:\n    #    start = 0\n    #fdf = fdf[start:]\n    #fdf.to_csv('dow_30_2009_2020.csv', index=True)\n    return fdf","5edbb86e":"#yfinance hora em hora convertido em v\u00e1rios tempos\n# rows_number \u00e9 a quantidade de linhas que ser\u00e3o agrupados em uma linha\ndef yfinance_hour_to_others_times(rows_number = 5):\n    ticker_ids = ['BTC-USD']\n    \n    today = date.today()\n    end = today\n    start = today - timedelta(days=729) # pesquisa nos \u00faltimos 730 dias (yfinance exige isso)\n    \n    fdf = pd.DataFrame()\n    \n    for ticker_id in ticker_ids:\n        ticker = yf.Ticker(ticker_id)\n        \n        df = ticker.history(\n            start=start,\n            end=end,\n            interval=\"1h\",\n            auto_adjust=False,\n            prepost=False\n        )\n         \n        df.reset_index(level=df.index.names, inplace=True)\n        \n        df.drop(columns=['Adj Close'], inplace=True)\n        df.rename(columns={\n            \"index\": \"datadate\",\n            \"Open\": \"prcod\",\n            \"High\": \"prchd\",\n            \"Low\": \"prcld\",\n            \"Close\": \"prccd\",\n            \"Volume\": \"cshtrd\"\n        }, inplace=True)\n        df['tic'] = ticker.ticker\n        df['ajexdi'] = 1\n        print(df.head())\n        \n        df['datadate'] = df['datadate'].dt.strftime('%Y%m%d')\n        df = df[['datadate', 'tic', 'prccd', 'ajexdi', 'prcod', 'prchd', 'prcld', 'cshtrd']]\n        #print(df.head(5))\n    \n        fdf = pd.concat([fdf, df])\n    \n    fdf.sort_values(by=['tic', 'datadate'], inplace=True)\n    fdf[''] = range(0, fdf.shape[0])\n    #print(fdf.head(40))\n    \n    \n    # Criando os outros tempos gr\u00e1ficos n\u00e3o dispon\u00edveis\n    data = [] # o novo dataframe ser\u00e1 criado apartir desta lista\n    open_value = 0\n    close_value = 0\n    high_value = 0\n    low_value = 0\n    volume = 0\n    primeiro_loop = True\n    for i, _ in fdf.iterrows():\n        if i % rows_number == 0: # primeira linha\n            if not primeiro_loop: # pula a primeira inser\u00e7\u00e3o de [0,0,0,0,0]\n                # prcod,prchd,prcld,prccd,cshtrd\n                # open, high, low, close, volume\n                data.append([open_value, high_value, low_value, close_value, volume, fdf.at[i,'tic'], fdf.at[i,'ajexdi']])\n            primeiro_loop = False\n            open_value = 0\n            close_value = 0\n            high_value = 0\n            low_value = 0\n            volume = 0\n            \n            open_value = fdf.at[i,'prcod']\n            close_value = fdf.at[i,'prccd']\n            volume = fdf.at[i,'cshtrd']\n            high_value = fdf.at[i,'prchd']\n            low_value = fdf.at[i,'prcld']\n        else:\n            volume += fdf.at[i,'cshtrd']\n            close_value = fdf.at[i,'prccd']\n            if fdf.at[i,'prchd'] > high_value:\n                high_value = fdf.at[i,'prchd']\n            if fdf.at[i,'prcld'] < low_value:\n                low_value = fdf.at[i,'prcld']\n                \n    df_created = pd.DataFrame(data, columns=['prcod', 'prchd', 'prcld', 'prccd', 'cshtrd','tic','ajexdi'])\n    #fdf.to_csv(\"antes.csv\")\n    #df_created.to_csv(\"depois.csv\")\n    #print(df_created.head())\n    #print(df_created.shape)\n    df_alg = pd.read_csv(\"..\/input\/axpdataset\/dow_30_2009_2020.csv\")\n    df_alg = df_alg.reset_index(inplace=False)\n    #print(df_alg.head())\n    \n    #fdf = fdf.drop(columns=['datadate'])\n    #fdf = fdf.join(df_alg['datadate'])\n    \n    \n    #print(fdf.head())\n    item_number = 2926\n    start = df_created.shape[0]-item_number\n    if start < 0:\n        start = 0\n    df_created = df_created[start:]\n    df_created = df_created.reset_index(inplace=False,drop=True)\n    df_alg = df_alg[:item_number]\n    \n    print(\"======================================\")\n    print(df_alg.head())\n    print(df_created.head())\n    print(\"======================================\")\n    print(df_alg.shape[0],'==',df_created.shape[0])\n    df_created = df_created.join(df_alg['datadate'])\n    df_created['datadate'] = df_created['datadate'].astype('str')\n    \n    print(\"======================================\")\n    print(df_alg.head())\n    print(df_created.head())\n    print(\"======================================\")\n    \n    #df_created.to_csv('dow_30_2009_2020.csv', index=True)\n    return df_created","20f88286":"def yfinance_hour(ticker_id):\n    today = date.today()\n    end = today\n    start = today - timedelta(days=729) # pesquisa nos \u00faltimos 730 dias (yfinance exige isso)\n    \n    fdf = pd.DataFrame()\n    \n    ticker = yf.Ticker(ticker_id)\n        \n    df = ticker.history(\n        start=start,\n        end=end,\n        interval=\"1h\",\n        auto_adjust=False,\n        prepost=False\n    )\n         \n    df.reset_index(level=df.index.names, inplace=True)\n        \n    df.drop(columns=['Adj Close'], inplace=True)\n    df.rename(columns={\n        \"index\": \"datadate\",\n        \"Open\": \"prcod\",\n        \"High\": \"prchd\",\n        \"Low\": \"prcld\",\n        \"Close\": \"prccd\",\n        \"Volume\": \"cshtrd\"\n    }, inplace=True)\n    df['tic'] = ticker.ticker\n    df['ajexdi'] = 1\n    \n        \n    df['datadate'] = df['datadate'].dt.strftime('%Y%m%d')\n    df = df[['datadate', 'tic', 'prccd', 'ajexdi', 'prcod', 'prchd', 'prcld', 'cshtrd']]\n    print(df.head())\n    \n    fdf = pd.concat([fdf, df])\n    \n    fdf.sort_values(by=['tic', 'datadate'], inplace=True)\n    fdf[''] = range(0, fdf.shape[0])\n    #print(fdf.head(40))\n    \n    df_alg = pd.read_csv(\"..\/input\/axpdataset\/dow_30_2009_2020.csv\")\n    df_alg = df_alg.reset_index(inplace=False,drop=True)\n    #print(df_alg.head())\n    \n    #fdf = fdf.drop(columns=['datadate'])\n    #fdf = fdf.join(df_alg['datadate'])\n    \n    \n    print(fdf.head())\n    item_number = 2926\n    start = fdf.shape[0]-item_number\n    if start < 0:\n        start = 0\n    fdf = fdf[start:]\n    fdf = fdf.reset_index(inplace=False,drop=True)\n    df_alg = df_alg[:item_number]\n    \n    print(df_alg.shape[0],'==',fdf.shape[0])\n    fdf.drop(columns=['datadate'], inplace=True)\n    fdf = fdf.join(df_alg['datadate'])\n    \n    #df_alg = df_alg.drop(columns=['tic', 'prccd', 'ajexdi', 'prcod', 'prchd', 'prcld', 'cshtrd'], inplace=True)\n    #df_alg = df_alg.join(fdf['prcod'])\n    #df_alg = df_alg.join(fdf['prchd'])\n    #df_alg = df_alg.join(fdf['prcld'])\n    #df_alg = df_alg.join(fdf['prccd'])\n    #df_alg = df_alg.join(fdf['cshtrd'])\n    #df_alg = df_alg.join(fdf['tic'])\n    #df_alg = df_alg.join(fdf['ajexdi'])\n    print(fdf.head())\n    #return df_alg\n    return fdf","d7b2f110":"#stock_path = \"..\/input\/axpdataset\/dow_30_2009_2020.csv\"\n#df_stock = cut_file(stock_path)\n#df_stock.to_csv(\"dow_30_2009_2020.csv\")\n\n#df_cripto = generate_cripto_inputs_per_minute()\n# este n\u00famero abaixo \u00e9 referente ao \u00edndice item da lista de moedas que queremos extrair (1 = 'BTC-USDT')\n#df_cripto = cut_dataframe(df_cripto, 1)\n#df_cripto.to_csv(\"dow_30_2009_2020.csv\")\n\n#file_path = \"..\/input\/cryptocurrencypricehistory\/coin_Bitcoin.csv\"\n#df_btc = generate_cripto_input_per_day(file_path)\n#df_btc.to_csv(\"dow_30_2009_2020.csv\")\n\n#file_path = \"..\/input\/cryptocurrencypricehistory\/coin_Bitcoin.csv\"\n#df_cripto = generate_cripto_input_daily_from_cryptocurrencypricehistory(file_path)\n#df_cripto.to_csv(\"dow_30_2009_2020.csv\")\n\n#df_yfinance = yfinance_daily('BTC-USD')\n#df_yfinance.to_csv(\"dow_30_2009_2020.csv\")\n\ndf_yfinance = yfinance_hour('BTC-USD')\ndf_yfinance.to_csv(\"dow_30_2009_2020.csv\")\n\n#df_created = yfinance_hour_to_others_times(5)\n#df_created.to_csv(\"dow_30_2009_2020.csv\")","c3549783":"def transform_input2(file_path):\n    #2926 itens\n    df_alg = pd.read_csv(\"..\/input\/axpdataset\/dow_30_2009_2020.csv\")\n    size = df_alg.shape[0]\n    df_cripto = pd.read_parquet('..\/input\/binance-full-history\/ETH-BTC.parquet', engine='pyarrow')\n    \n    df_cripto = df_cripto[df_cripto.shape[0]-size+1:]\n    \n    df_cripto = df_cripto.rename(columns={'open':'prcod', 'high':'prchd', 'low':'prcld', 'close':'prccd', 'volume':'cshtrd'})\n    df_cripto.reset_index(drop=True, inplace=True)\n    \n    df_alg = df_alg.drop(columns=['prcod', 'prchd','prcld','prccd','cshtrd'])\n    \n    df_alg = df_alg.join(df_cripto['prcod'])\n    df_alg = df_alg.join(df_cripto['prchd'])\n    df_alg = df_alg.join(df_cripto['prcld'])\n    df_alg = df_alg.join(df_cripto['prccd'])\n    df_alg = df_alg.join(df_cripto['cshtrd'])\n    return df_alg","6be69d0a":"def transform_input(file_path, coin_name):\n    df = pd.read_parquet(file_path, engine='pyarrow')\n    datadate = df.index.array.astype(str)\n    df.insert(0, \"datadate\", datadate)\n    df.head()\n    \n    df = df.rename(columns={'open':'prcod', 'high':'prchd', 'low':'prcld', 'close':'prccd', 'volume':'cshtrd'})\n    df.insert(1,'tic', coin_name)\n    \n    date = datetime(2009,1,1)\n    for i, _ in df.iterrows():\n        #data = df.at[i,'datadate']\n        #data = data.replace(\"-\",\"\")\n        #data = data.replace(\":\",\"\")\n        #data = data.replace(\" \",\"\")\n        #df['datadate'][i] = data\n        #df.at[i,'datadate'] = data\n        df.at[i,'datadate'] = str(date.year)+\"{:02}\".format(date.month)+\"{:02}\".format(date.day)\n        date += timedelta(days=1)\n    \n    \n    n = df.shape[0]\n    df.insert(0, \"number\", np.arange(n))\n    df = df.set_index('number')\n    df.index.names = [None]\n    df.insert(0,'ajexdi', 1.0)\n    df.head()\n    \n    data = [df['datadate'], df['tic'], df['prccd'], df['ajexdi'], df['prcod'], df['prchd'], df['prcld'], df['cshtrd']]\n    headers = ['datadate','tic','prccd','ajexdi','prcod','prchd','prcld','cshtrd']\n    df = pd.concat(data, axis=1, keys=headers)\n    return df\n","cf37570c":"from datetime import datetime\n\nfmt = '%Y-%m-%d %H:%M:%S'\ntstamp1 = datetime.strptime('2017-08-17 04:00:00', fmt)\ntstamp2 = datetime.strptime('2021-08-06 23:59:00', fmt)\n\nif tstamp1 > tstamp2:\n    td = tstamp1 - tstamp2\nelse:\n    td = tstamp2 - tstamp1\ntd_mins = int(round(td.total_seconds() \/ 60))\n\nprint('The difference is approx. %s minutes' % td_mins)","06217d54":"# c\u00f3digo n\u00e3o usado\ndef generate_cripto_input_per_day(file_path):\n    item_number = 2926 # n\u00famero de registo (linha) para cada moeda\n    \n    df_cripto = pd.read_csv(file_path)\n    df_cripto = df_cripto[df_cripto.shape[0]-item_number:]\n    df_cripto.head()\n    df_alg = pd.read_csv(\"..\/input\/axpdataset\/dow_30_2009_2020.csv\")\n    df_alg = df_alg[df_alg.shape[0]-item_number:]\n    #print(df_alg.shape)\n    #print(df_cripto.shape)\n    df_cripto = df_cripto.rename(columns={'Open':'prcod', 'High':'prchd', 'Low':'prcld', 'Close':'prccd', 'Volume':'cshtrd', 'Symbol':'tic'})\n    df_alg = df_alg.drop(columns=['prcod', 'prchd','prcld','prccd','cshtrd','tic'])\n    df_alg = df_alg.join(df_cripto['prcod'])\n    df_alg = df_alg.join(df_cripto['prchd'])\n    df_alg = df_alg.join(df_cripto['prcld'])\n    df_alg = df_alg.join(df_cripto['prccd'])\n    df_alg = df_alg.join(df_cripto['cshtrd'])\n    df_alg = df_alg.join(df_cripto['tic'])\n    \n    #df_tic = pd.DataFrame(index=range(0,1*2926), columns = ['tic'])\n    #last_position = 0\n    #for i, _ in df_tic.iterrows():\n    #    df_tic.at[i,'tic'] = market\n    #last_position = (index+1)*2926\n    #df_alg = df_alg.join(df_tic['tic'])\n    return df_alg","bfd9192b":"from datetime import date\n\ntoday = date.today()\nprint(\"Today's date:\", today.strftime(\"%Y-%m-%d\"))\ntoday -= timedelta(days=730)\nprint(\"Today's date:\", today.strftime(\"%Y-%m-%d\"))\n","ea521f4d":"# Fun\u00e7\u00f5es","92c257a9":"## Dataset: cryptocurrencypricehistory","8a8ca19a":"## Dataset: binance-full-history","72558a94":"# Imports","1a1ab536":"## Dataset: yfinance","2c67a6ac":"# Codigos n\u00e3o usados","9893f27b":"# Executando"}}