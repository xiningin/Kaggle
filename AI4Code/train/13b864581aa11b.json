{"cell_type":{"ca16777e":"code","bfe3dc96":"code","51ee3d10":"code","3a1101a7":"code","ed265204":"code","6b2ab981":"code","03d90d79":"code","f24ceb35":"code","325bfba3":"code","100635b6":"code","c08a961f":"code","c76b339a":"code","03bd32dc":"code","888dbadb":"code","b859bb00":"code","67d66fc5":"code","375cfd43":"code","7f283ee2":"code","e387c8c6":"code","bd55ea59":"code","80f3b48b":"code","96e6fbd1":"code","a50f229f":"code","4d3a2879":"code","771eed95":"markdown","e64eac51":"markdown","a583a7ee":"markdown","9dc0f616":"markdown","c6ca5a91":"markdown","4a11c6a6":"markdown","9f7e6521":"markdown","bd1f7e30":"markdown","ca61a788":"markdown","f4e3ddec":"markdown","2ed1dd6a":"markdown","3bfe23e0":"markdown","19b5bb83":"markdown","84570216":"markdown","e65e436a":"markdown","ccc33941":"markdown","9d47bfa1":"markdown"},"source":{"ca16777e":"%config Completer.use_jedi = False\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport pandas_profiling\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\nimport sklearn\nfrom sklearn.compose import ColumnTransformer\nfrom sklearn.pipeline import Pipeline\nfrom sklearn.impute import SimpleImputer\nfrom sklearn.preprocessing import StandardScaler, OneHotEncoder\nfrom sklearn.linear_model import LinearRegression, SGDClassifier\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.model_selection import train_test_split, GridSearchCV, RandomizedSearchCV\n\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","bfe3dc96":"train_data = pd.read_csv(\"\/kaggle\/input\/titanic\/train.csv\")","51ee3d10":"test_data = pd.read_csv(\"\/kaggle\/input\/titanic\/test.csv\")","3a1101a7":"train_data.describe()","ed265204":"print(train_data.info())\ntrain_data.head()","6b2ab981":"plt.figure(figsize=(10, 8))\nsns.heatmap(train_data.corr(), annot=True, cmap='RdYlBu')","03d90d79":"sns.countplot(data=train_data, x='Pclass', hue='Survived')","f24ceb35":"train_data[['Pclass', 'Survived']].groupby(['Pclass'], as_index=False)\\\n                                        .mean().sort_values(by='Survived', ascending=False)","325bfba3":"train_data[[\"Sex\", \"Survived\"]].groupby(['Sex'], as_index=False)\\\n                                        .mean().sort_values(by='Survived', ascending=False)","100635b6":"sns.catplot(data=train_data, x='Sex', y='Survived', kind='violin', height=5, aspect=1.3)","c08a961f":"sns.catplot(x='Embarked',y='Survived',data=train_data, kind='point', palette='Accent');","c76b339a":"# Auto EDA with Pandas Profiling\n#train_data.profile_report()","03bd32dc":"X = train_data.drop(['Survived'], axis = 1)\ny = train_data['Survived']\n\nX.drop(['Cabin', 'Name', 'Ticket'], axis = 1, inplace = True)\ntest_data.drop(['Cabin', 'Name', 'Ticket'], axis = 1, inplace = True)","888dbadb":"numeric_features = ['Age', 'Fare', 'Pclass']\nnumeric_transformer = Pipeline(steps=[\n    ('imputer', SimpleImputer( strategy='median')),\n    ('scaler', StandardScaler())])\n\ncategorical_features = ['Embarked', 'Sex']\ncategorical_transformer = Pipeline(steps=[\n    ('imputer', SimpleImputer(strategy='most_frequent')),\n    ('onehot', OneHotEncoder(handle_unknown='ignore'))])\n\npreprocessor = ColumnTransformer(\n    transformers=[\n        ('num', numeric_transformer, numeric_features),\n        ('cat', categorical_transformer, categorical_features)])","b859bb00":"# Append classifier to preprocessing pipeline.\nclf_lin = Pipeline(steps=[('preprocessor', preprocessor),\n                      ('classifier', LinearRegression())])\n\nparam_grid = {\n    'preprocessor__num__imputer__strategy': ['mean', 'median'],\n    'classifier__fit_intercept':[True,False], \n    'classifier__normalize':[True,False], \n    'classifier__copy_X':[True, False],\n}\n\ngrid_search_lin = GridSearchCV(clf_lin, param_grid, cv=10)","67d66fc5":"# Append classifier to preprocessing pipeline.\nclf_knn = Pipeline(steps=[('preprocessor', preprocessor),\n                      ('classifier', KNeighborsClassifier())])\n\nparam_grid = {\n    'preprocessor__num__imputer__strategy': ['mean', 'median'],\n    'classifier__n_neighbors': range(4,20,4),\n    'classifier__weights':['uniform','distance'], \n    'classifier__algorithm':['ball_tree', 'kd_tree', 'brute'], \n    'classifier__leaf_size': range(25,40,5), \n    'classifier__metric':['euclidean','manhattan'], \n    'classifier__n_jobs': [-1]\n}\n# 'classifier__n_neighbors': range(1,20,2),\n# 'classifier__leaf_size': range(1,40,5),\n# classifier__algorithm':['auto','ball_tree', 'kd_tree', 'brute'], \n# 'classifier__p': [2, 4], \n\ngrid_search_knn = GridSearchCV(clf_knn, param_grid, cv=10, verbose = 1)","375cfd43":"# Append classifier to preprocessing pipeline.\nclf_dect = Pipeline(steps=[('preprocessor', preprocessor),\n                      ('classifier', DecisionTreeClassifier())])\n\nparam_grid = {\n    'preprocessor__num__imputer__strategy': ['mean', 'median'],\n    'classifier__criterion' : ['gini', 'entropy'],\n    'classifier__splitter' : ['best', 'random'],\n    'classifier__max_depth' : range(5,20,5),\n    'classifier__min_weight_fraction_leaf' : np.arange(0,0.5,.1),\n    'classifier__max_features' : ['auto', 'log2'],\n    'classifier__min_samples_split' : range(4,16,2),\n}\n #'classifier__min_samples_leaf' : range(1,20,2),\n#    'classifier__min_samples_split' : range(10,500,20),\n\n # 'preprocessor__num__imputer__strategy': ['mean', 'median'],\n  #  'classifier__criterion' : ['gini', 'entropy'],\n   # 'classifier__splitter' : ['best', 'random'],\n    #'classifier__max_depth' : range(1,20,2),\n   # 'classifier__min_samples_split' : range(10,500,20),\n   # 'classifier__min_samples_leaf' : range(1,20,2),\n   # 'classifier__min_weight_fraction_leaf' : np.arange(0,0.5,.1),\n   # 'classifier__max_features' : ['auto', 'log2'],\n\ngrid_search_dect = GridSearchCV(clf_dect, param_grid, cv=10, verbose = 1)\ngrid_search_dect_rand = RandomizedSearchCV(clf_dect, param_grid, cv=10, n_iter=30)","7f283ee2":"# Append classifier to preprocessing pipeline.\nclf_sgd = Pipeline(steps=[('preprocessor', preprocessor),\n                      ('classifier', SGDClassifier())])\nparam_grid = {\n    'preprocessor__num__imputer__strategy': ['mean', 'median'],\n    'classifier__alpha': [1e-4, 1e-3, 1e-2, 1e-1, 1e0, 1e1, 1e2, 1e3], # learning rate\n    'classifier__max_iter': [1000], # number of epochs\n    'classifier__loss': ['log'], # logistic regression,\n    'classifier__penalty': [\"none\", \"l1\", \"l2\"],\n    'classifier__n_jobs': [-1]\n}\n\ngrid_search_sgd = GridSearchCV(clf_sgd, param_grid, cv=10)","e387c8c6":"X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2,\n                                                    random_state=0)","bd55ea59":"# Grid Search Linear Regression\ngrid_search_lin.fit(X_train, y_train)\nprint(f\"LIN Internal CV score: {grid_search_lin.best_score_:.3f}\")\nprint((\"best LINEAR regression from grid search: %.3f\"  % grid_search_lin.score(X_test, y_test)))\nprint('\\n' *2)","80f3b48b":"# Grid Search KNearestNeighbors\ngrid_search_knn.fit(X_train, y_train)\nprint(f\"KNN Internal CV score: {grid_search_knn.best_score_:.3f}\")\nprint((\"best KNN from grid search: %.3f\"  % grid_search_knn.score(X_test, y_test)))\nprint('\\n' *2)","96e6fbd1":"# Grid Search SGDClassifier\n#grid_search_sgd.fit(X_train, y_train)\n#print(f\"SGD Internal CV score: {grid_search_sgd.best_score_:.3f}\")\n#print((\"best SGD from grid search: %.3f\"  % grid_search_sgd.score(X_test, y_test)))\n#print('\\n' *2)","a50f229f":"# Grid Search DecisionTree\n#grid_search_dect.fit(X_train, y_train)\n#print(f\"DECT Internal CV score: {grid_search_dect.best_score_:.3f}\")\n#print((\"best DECT from grid search: %.3f\"  % grid_search_dect.score(X_test, y_test)))\n#print('\\n' *2)\n#8.2   8.21\n\n#grid_search_dect_half.fit(X_train, y_train)\n#print(f\"DECT Internal CV score: {grid_search_dect_half.best_score_:.3f}\")\n#print((\"best DECT from grid search: %.3f\"  % grid_search_dect_half.score(X_test, y_test)))\n#print('\\n' *2)\n\n#test_data = preprocessor.fit_transform(test_data)","4d3a2879":"predictions = grid_search_knn.predict(test_data)\n\noutput = pd.DataFrame({'PassengerId': test_data.PassengerId, 'Survived': predictions})\noutput.to_csv('submission.csv', index=False)\nprint(\"Your submission was successfully saved!\")","771eed95":"**Observation:**\n\nMore females survived than males","e64eac51":"# **Import Python Libraries**\n","a583a7ee":"**Pipeline Preprocessor**","9dc0f616":"**Decision Trees**","c6ca5a91":"**Missing Values**\n* Cabin, Age, Embarked","4a11c6a6":"# **Load Data**","9f7e6521":"**Nearest Neighbors**","bd1f7e30":"**Features**\n* Categorical\n    *   Survived, Sex, Pclass (Ticket class), Embarked (Port of embarkation)\n* Numerical\n    *   Age, Fare, SibSp (# of siblings\/spouses), Parch (# of parents\/children)","ca61a788":"# **Build Models**","f4e3ddec":"**Observation:**\n\nPclass of 1(Upper) had more survivors than Pclass of 3(Lower), as expected","2ed1dd6a":"**SGDClassifier**","3bfe23e0":"# **Clean and Prepare Data**\n* Categorical\n    *   Survived, Sex, Pclass (Ticket class), Embarked (Port of embarkation)\n* Numerical\n    *   Age, Fare, SibSp (# of siblings\/spouses), Parch (# of parents\/children)\n* Missing Values\n    *   Cabin, Age, Embarked","19b5bb83":"**Observation:**\n\nMore people who embarked from C survived","84570216":"# **Evaluate Models**","e65e436a":"# **Exploratory Data Analysis**","ccc33941":"# **Generate Submission Data**","9d47bfa1":"**Linear Regression**"}}