{"cell_type":{"9a33ed0b":"code","eeee6128":"code","5b6ef985":"code","b97d4820":"code","f045e7ee":"code","33c8e568":"code","a4c3d1e9":"code","034ef5f7":"code","4f4c926f":"code","492bbdb8":"code","d74695b7":"code","2c8bb7a8":"code","43990261":"code","6e17383e":"code","b5359399":"code","5b14ce3c":"code","d9cd1303":"code","8158d997":"code","8f2a902b":"code","f8d526c6":"code","8e9f31da":"code","60fe861d":"code","a9d43769":"code","6597ee66":"code","ab325ec5":"code","33957f96":"code","1ed2f4ae":"code","b6fd1fb6":"code","3b8e8034":"code","ac105a89":"code","414a477e":"code","1d44fd0d":"code","c61f460f":"code","0866acda":"code","75b45aef":"markdown","c2205762":"markdown","c16f9df6":"markdown","2f7c270f":"markdown","4aa797f9":"markdown","d870ae5e":"markdown","35b83814":"markdown","8a5c3086":"markdown","f23f3ea7":"markdown","7bdc29c3":"markdown"},"source":{"9a33ed0b":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","eeee6128":"import pandas as pd\n","5b6ef985":"df = pd.read_csv(\"..\/input\/electric-power-consumption-data-set\/household_power_consumption.txt\",sep=\";\")","b97d4820":"df.head()","f045e7ee":"df[\"datetime\"] = df[\"Date\"] + \" \" + df[\"Time\"]","33c8e568":"df.head()","a4c3d1e9":"df[\"Date\"] = pd.to_datetime(df[\"Date\"])","034ef5f7":"df.head()","4f4c926f":"df_ = df[df[\"Date\"]>\"2006-12-16\"]","492bbdb8":"len(df_)","d74695b7":"df_.head()","2c8bb7a8":"df_[\"datetime\"] = pd.to_datetime(df_[\"datetime\"])","43990261":"df_.head()","6e17383e":"df_new = df_[[\"Global_active_power\",\"datetime\"]]","b5359399":"df_new.rename(columns = {'Global_active_power':'power'}, inplace = True)","5b14ce3c":"\ndf_new['power'] = pd.to_numeric(df_new['power'],errors = 'coerce')","d9cd1303":"df_new.head()","8158d997":"df = df_new.resample('D', on='datetime').power.sum()","8f2a902b":"df=df.reset_index()","f8d526c6":"df","8e9f31da":"df.set_index('datetime',inplace=True)","60fe861d":"df.head()","a9d43769":"import matplotlib.pyplot as plt\ndf.plot(figsize=(10, 7))\nplt.ylabel(\"power consumption\")\nplt.title(\"Power consumption of household\", fontsize=16)\nplt.legend(fontsize=14);","6597ee66":"#Importing testing Library\nfrom statsmodels.tsa.stattools import adfuller\n\n#Apply Augumented Dickey-Fuller Test\nresult = adfuller(df[\"power\"])\n\nprint(result)","ab325ec5":"#to help you, we added the names of every power\nresults_dict=dict(zip(['adf', 'ppower', 'usedlag', 'nobs', 'critical' 'powers', 'icbest'],result))","33957f96":"for key in (results_dict):\n    print(key , results_dict[key])","1ed2f4ae":"df['Seasonal_Difference']=df['power']-df['power'].shift(365)\nax=df['Seasonal_Difference'].plot()","b6fd1fb6":"result=adfuller((df['Seasonal_Difference']).dropna())\ndict(zip(['adf', 'ppower', 'usedlag', 'nobs', 'critical' 'powers', 'icbest'],result))","3b8e8034":"from statsmodels.graphics.tsaplots import plot_acf, plot_pacf\nfig1=plot_acf(df['power'].dropna())\nfig2=plot_pacf(df['power'].dropna())","ac105a89":"plt.figure(figsize=(8,6))\nfrom statsmodels.graphics.tsaplots import plot_acf, plot_pacf\nfig1=plot_acf(df['power'].diff().dropna())\nfig2=plot_pacf(df['power'].diff().dropna())","414a477e":"from statsmodels.tsa.statespace.sarimax import SARIMAX\nmodel=SARIMAX(df['power'],order=(1,0,1),seasonal_order=(1, 0, 0, 365))\nresult=model.fit()","1d44fd0d":"result.resid.plot(kind='kde')","c61f460f":"from pandas.tseries.offsets import DateOffset\nnew_dates=[df.index[-1]+DateOffset(datetime=x) for x in range(1,24)]\ndf_pred=pd.DataFrame(index=new_dates,columns =df.columns)\ndf_pred.head()","0866acda":"df2=pd.concat([df,df_pred])\ndf2['predictions']=result.predict(start=1455,end=1479)\ndf2[['power','predictions']].plot()","75b45aef":"Our data are seasonal so we need to estimate also the D power which is the same as the d power but for Seasonal Difference. The seasonal difference can be computed by shifting the data by the number of rows per season (in our example 365 days per year) and subtracting them from the previous season. This is not the first seasonal difference. If we get that the seasonal difference is stationary then the D power will be 0. If not then we will compute the seasonal first difference.","c2205762":"The p-power is less than 0.05 thus it\u2019s stationary and we don\u2019t have to use differencing. That suggests using 0 for the D power.","c16f9df6":"## We will work with date from 17 December 2006","2f7c270f":"The last step before the ARIMA model is to create the Autocorrelation and Partial Autocorrelation Plots to help us estimate the p,q, P, and Q parameters.\nThere are some very useful rules for ARIMA and Seasonal ARIMA models that we are using to help us estimate the parameters by looking at the Autocorrelation and Partial Autocorrelation Plots. We will create the plots for the power and the seasonal difference of our time series because these are the stationary series we end up using in ARIMA (d=0, D=0).\nFirst, let\u2019s plot ACF and PACF for the second difference.","4aa797f9":"* The **seasonality** of a time-series data frame is number of samples per year.","d870ae5e":"* ARIMA models can be applied only in stationary data. That means that we don\u2019t want to have a trend in time. If the time series has a trend, then it\u2019s non-stationary and we need to apply differencing to transform it into stationary.\n\n* We can use also the Augmented Dickey-Fuller test to help us conclude if the series is stationary or not. The null hypothesis of the test is that there is a unit root with the alternative that there is no unit root. In other words, If the p-power is below 0.05 (or any critical size you will use), our Series is Stationary.\n\n","35b83814":"# Time series Fundamentals","8a5c3086":"Note:\n* https:\/\/en.wikipedia.org\/wiki\/Augmented_Dickey%E2%80%93Fuller_test\n* The Null hypothesis is passed.\n* The time-series is stationary. ","f23f3ea7":"# Model-1 ARIMA","7bdc29c3":"To be sure we will use an Augmented Dickey-Fuller test."}}