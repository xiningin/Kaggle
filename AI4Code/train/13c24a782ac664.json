{"cell_type":{"bd673373":"code","80962b4f":"code","4a9d080a":"code","2de04375":"code","45315fe1":"code","28ba01e7":"code","bcef4446":"code","4af2bf7c":"code","9cb4a5ab":"code","6aff681a":"code","34bbd9f6":"code","d65e07bd":"code","8e6907e6":"code","e1d86956":"code","3d2e4acb":"code","f6a217c1":"code","5186d13b":"code","eccf3fa6":"code","83c35bb2":"code","855a9cdf":"code","c7b82c62":"code","630a57fc":"code","b2de6659":"code","213f2bb9":"code","59f78e86":"markdown","bb326b95":"markdown"},"source":{"bd673373":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nfrom numpy.linalg import norm\nimport pickle\nfrom tqdm import tqdm_notebook\nimport os\nimport time\n\nimport tensorflow as tf\nimport random\n\nfrom sklearn.neighbors import NearestNeighbors\nimport matplotlib.pyplot as plt\nimport matplotlib.image as mpimg\n\nfrom tensorflow.keras.preprocessing import image\nfrom tensorflow.keras.applications.resnet50 import ResNet50,preprocess_input\n\nfrom sklearn.manifold import TSNE\nfrom sklearn.decomposition import PCA\n\nfrom PIL import Image\nfrom matplotlib.offsetbox import OffsetImage, AnnotationBbox\nfrom matplotlib.cbook import get_sample_data","80962b4f":"def fearure_extraction(img,model):\n    img = image.load_img(img,target_size=(224,224))\n    img_array = image.img_to_array(img)\n    img_batch = np.expand_dims(img_array,axis=0)\n    img_processed = preprocess_input(img_batch)\n    features = model.predict(img_processed)\n    features_flatten = features.flatten()\n    normalized_features = features_flatten \/ norm(features_flatten)\n    return normalized_features\n    ","4a9d080a":"sample_images = 5000","2de04375":"model = ResNet50(include_top=False,input_shape=(224,224,3),weights='imagenet')","45315fe1":"img_path = '..\/input\/flickr-image-dataset\/flickr30k_images\/flickr30k_images\/1000344755.jpg'\nfeatures = fearure_extraction(img_path,model)\nprint(len(features))","28ba01e7":"for root,directories,filenames in os.walk('..\/input\/flickr-image-dataset\/flickr30k_images\/flickr30k_images'):\n    print(root)","bcef4446":"root","4af2bf7c":"def get_files(root_dir):\n    file_list = []\n    counter = 1\n    for root,directories,filenames in os.walk(root_dir):\n        for filename in filenames[:sample_images]:\n            file_list.append(os.path.join(root,filename))\n            counter += 1\n        break\n    return file_list   \n        ","9cb4a5ab":"root_dir = '..\/input\/flickr-image-dataset\/flickr30k_images\/flickr30k_images\/'\nfile_names = get_files(root_dir)","6aff681a":"len(file_names)","34bbd9f6":"feature_list = []\nfor file_name in tqdm_notebook(file_names,total=len(file_names)):\n    feature_list.append(fearure_extraction(file_name,model))","d65e07bd":"neighbors = NearestNeighbors(n_neighbors=5, algorithm='brute',metric='euclidean').fit(feature_list)\ndistances, indices = neighbors.kneighbors([feature_list[0]])\n\nplt.imshow(mpimg.imread(file_names[0]))","8e6907e6":"indices[0]","e1d86956":"plt.imshow(mpimg.imread(file_names[indices[0][0]]))","3d2e4acb":"plt.imshow(mpimg.imread(file_names[indices[0][1]]))","f6a217c1":"indices[0]","5186d13b":"def plot_similar_images(image_paths,distances):\n    og_image_path = mpimg.imread(image_paths[0])\n    similar_images = []    \n    similar_images.append(og_image_path)\n    for path in image_paths[1]:\n        similar_images.append(mpimg.imread(path))\n    plt.figure(figsize=(20,10))\n    columns = 5\n    for i , image in enumerate(similar_images):\n        ax = plt.subplot(1,columns,i+1)\n        if i==0:\n            ax.set_title('Original Image')\n        else:\n            ax.set_title(f'Similar Image : {i} Distance : {distances[i]:.2f}')\n        plt.imshow(image)","eccf3fa6":"for i in range(6):\n    random_image_index = random.randint(0,sample_images)\n    distances, indices = neighbors.kneighbors([feature_list[random_image_index]])\n    image_paths = (file_names[random_image_index],[file_names[indices[0][j]] for j in range(1,5)])\n    plot_similar_images(image_paths,distances[0])\n    ","83c35bb2":"\nnum_feature_dimensions=100\n\npca = PCA(n_components = num_feature_dimensions)\npca.fit(feature_list[:300])\n\nfeature_list_compressed = pca.transform(feature_list[:300])\n\nselected_features = feature_list_compressed\nselected_filenames = file_names[:300]\n\ntsne_results = TSNE(n_components=2,verbose=1,metric='euclidean').fit_transform(selected_features)","855a9cdf":"def plot_images_in_2d(x, y, image_paths, axis=None, zoom=1):\n    x, y = np.atleast_1d(x, y)\n    for x0, y0, image_path in zip(x, y, image_paths):\n        image = Image.open(image_path)\n        image.thumbnail((100, 100), Image.ANTIALIAS)\n        img = OffsetImage(image, zoom=zoom)\n        anno_box = AnnotationBbox(img, (x0, y0),\n                                  xycoords='data',\n                                  frameon=False)\n        axis.add_artist(anno_box)\n    axis.update_datalim(np.column_stack([x, y]))\n    axis.autoscale()","c7b82c62":"def show_tsne(x, y, selected_filenames):\n    fig, axis = plt.subplots()\n    fig.set_size_inches(22, 22, forward=True)\n    plot_images_in_2d(x, y, selected_filenames, zoom=0.3, axis=axis)\n    plt.show()","630a57fc":"show_tsne(tsne_results[:, 0], tsne_results[:, 1], selected_filenames)","b2de6659":"def tsne_to_grid_plotter_manual(x, y, selected_filenames):\n    S = 2000\n    s = 100\n    x = (x - min(x)) \/ (max(x) - min(x))\n    y = (y - min(y)) \/ (max(y) - min(y))\n    x_values = []\n    y_values = []\n    filename_plot = []\n    x_y_dict = {}\n    for i, image_path in enumerate(selected_filenames):\n        a = np.ceil(x[i] * (S - s))\n        b = np.ceil(y[i] * (S - s))\n        a = int(a - np.mod(a, s))\n        b = int(b - np.mod(b, s))\n        if str(a) + \"|\" + str(b) in x_y_dict:\n            continue\n        x_y_dict[str(a) + \"|\" + str(b)] = 1\n        x_values.append(a)\n        y_values.append(b)\n        filename_plot.append(image_path)\n    fig, axis = plt.subplots()\n    fig.set_size_inches(22, 22, forward=True)\n    plot_images_in_2d(x_values, y_values, filename_plot, zoom=.58, axis=axis)\n    plt.show()","213f2bb9":"tsne_to_grid_plotter_manual(tsne_results[:, 0], tsne_results[:, 1],\n                            selected_filenames)","59f78e86":"Basically always the nearest image is original image itself,Let's check second closest image","bb326b95":"T-sne to visualize clusters"}}