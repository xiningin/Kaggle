{"cell_type":{"f76a140d":"code","1721140d":"code","f7034d2b":"code","efaf06e2":"code","479280e7":"code","f1d9ec95":"code","b90970a9":"code","df9d4638":"code","fd2dcf46":"code","2e0c90e9":"code","47b46ae2":"code","cf6d1509":"code","76a63eb0":"code","726c1898":"code","c2d80610":"code","7b553d0c":"code","7e9bf231":"code","f6014f89":"code","e46dd74f":"code","00ce9553":"code","ccd28f2b":"code","1efbe847":"code","2daad3b6":"code","d6862cce":"code","aeebf6c0":"code","0e396227":"code","d722fb05":"code","986c3b55":"code","d42a124f":"code","a4f68077":"code","2969a358":"code","2187a411":"code","1e63d415":"code","81e19785":"code","b28f8dae":"markdown","29205350":"markdown","004c90f1":"markdown","a9d5289e":"markdown"},"source":{"f76a140d":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\nimport pylab as pl\nimport seaborn as sns\n\n%matplotlib inline\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","1721140d":"df = pd.read_csv(\"\/kaggle\/input\/fuelconsumption\/FuelConsumptionCo2.csv\")\n\n# take a look at the dataset\ndf.head()\n","f7034d2b":"# summarize the data\ndf.describe()","efaf06e2":"cdf = df[['ENGINESIZE', 'CYLINDERS','TRANSMISSION', 'FUELTYPE', 'CO2EMISSIONS']]\ncdf.head(9)","479280e7":"sns.relplot(x=\"ENGINESIZE\", y=\"CO2EMISSIONS\", data=cdf);","f1d9ec95":" sns.relplot(x=\"ENGINESIZE\", y=\"CO2EMISSIONS\", kind=\"line\", ci=\"sd\", data=cdf);","b90970a9":"sns.jointplot(x=cdf['ENGINESIZE'], y=cdf['CO2EMISSIONS'], kind=\"hex\");","df9d4638":"sns.relplot(x=\"CYLINDERS\", y=\"CO2EMISSIONS\", data=cdf);","fd2dcf46":"sns.relplot(x=\"CYLINDERS\", y=\"CO2EMISSIONS\", kind=\"line\", ci=\"sd\", data=cdf);","2e0c90e9":" sns.jointplot(x=cdf['CYLINDERS'], y=cdf['CO2EMISSIONS'], kind=\"hex\");","47b46ae2":"fig, ax =plt.subplots(1,2, figsize = (19, 7))\nsns.countplot(x=\"TRANSMISSION\", data=cdf, ax=ax[0])\nsns.catplot(y=\"TRANSMISSION\", x=\"CO2EMISSIONS\", data=cdf, ax=ax[1]);\nfig.show()","cf6d1509":"fig, ax =plt.subplots(1,2, figsize = (19, 7))\nsns.countplot(x=\"FUELTYPE\", data=cdf, ax=ax[0])\nsns.catplot(y=\"FUELTYPE\", x=\"CO2EMISSIONS\", data=cdf, ax=ax[1]);\nfig.show()","76a63eb0":"data_train_x = ['FUELTYPE','TRANSMISSION', 'CYLINDERS', 'ENGINESIZE']\n\ndata_train = pd.get_dummies(cdf[data_train_x])","726c1898":"cols_in_train = data_train.columns.tolist()\nlen(cols_in_train)","c2d80610":"data_train.sample(5)","7b553d0c":"#setting the matrixes\nX = data_train.iloc[:].values","7e9bf231":"type(X)","f6014f89":"noOfTrainEx = X.shape[0] # no of training examples\nprint(\"noOfTrainEx: \",noOfTrainEx)\nnoOfWeights = X.shape[1]+1 # no of features+1 => weights\nprint(\"noOfWeights: \", noOfWeights)","e46dd74f":"ones = np.ones([noOfTrainEx, 1]) # create a array containing only ones \nX = np.concatenate([ones, X],1) # cocatenate the ones to X matrix\ntheta = np.ones((1, noOfWeights)) #np.array([[1.0, 1.0]])","00ce9553":"y = cdf['CO2EMISSIONS'].values.reshape(-1,1) # create the y matrix","ccd28f2b":"print(X.shape)\nprint(theta.shape)\nprint(y.shape)\n","1efbe847":"#set hyper parameters\nalpha = 0.01\niters = 1000","2daad3b6":"## Creating cost function\ndef computeCost(X, y, theta):\n    h = X @ theta.T\n    error = h-y\n    loss = np.power(error, 2) \n    J = np.sum(loss)\/(2*noOfTrainEx)\n    return J","d6862cce":"computeCost(X, y, theta) #Computing cost now produces very high cost","aeebf6c0":"## Gradient Descent funtion\ndef gradientDescent(X, y, theta, alpha, iters):\n    cost = np.zeros(iters)\n    for i in range(iters):\n        theta = theta - (alpha\/len(X)) * np.sum((X @ theta.T - y) * X, axis=0)\n        cost[i] = computeCost(X, y, theta)\n        if i % 100 == 0: # just look at cost every ten loops for debugging\n            print(i, 'iteration, cost:', cost[i])\n    return (theta, cost)","0e396227":"g, cost = gradientDescent(X, y, theta, alpha, iters)  \n","d722fb05":"print(g)","986c3b55":"print(cost)","d42a124f":"#plot the cost\nfig, ax = plt.subplots()  \nax.plot(np.arange(iters), cost, 'r')  \nax.set_xlabel('Iterations')  \nax.set_ylabel('Cost')  \nax.set_title('Error vs. Training Epoch')","a4f68077":"axes = sns.scatterplot(x = \"ENGINESIZE\", y = \"CO2EMISSIONS\", data = cdf, ci = False)\nx_vals = np.array(axes.get_xlim()) \ny_vals = g[0][0] + g[0][1]* x_vals #the line equation\nplt.plot(x_vals, y_vals, '--')","2969a358":"axes = sns.scatterplot(x = \"CYLINDERS\", y = \"CO2EMISSIONS\", data = cdf, ci = False)\nx_vals = np.array(axes.get_xlim()) \ny_vals = g[0][0] + g[0][1]* x_vals #the line equation\nplt.plot(x_vals, y_vals, '--')","2187a411":"data_train.columns.to_list()","1e63d415":"from sklearn import linear_model\nregr = linear_model.LinearRegression()\nx = np.asanyarray(data_train[data_train.columns.to_list()])\ny = np.asanyarray(cdf[['CO2EMISSIONS']])\nregr.fit (x, y)\n# The coefficients\nprint ('Intercept: ',regr.intercept_)\nprint ('Coefficients: ', regr.coef_)","81e19785":"from sklearn.metrics import r2_score\n\ntest_x = np.asanyarray(data_train[data_train.columns.to_list()])\ntest_y = np.asanyarray(cdf[['CO2EMISSIONS']])\ntest_y_hat = regr.predict(test_x)\n\nprint(\"Mean absolute error: %.2f\" % np.mean(np.absolute(test_y_hat - test_y)))\nprint(\"Residual sum of squares (MSE): %.2f\" % np.mean((test_y_hat - test_y) ** 2))\nprint(\"R2-score: %.2f\" % r2_score(test_y_hat , test_y) )","b28f8dae":"## Using sklearn","29205350":"### Evaluation","004c90f1":"## FuelConsumption.csv:\nWe have downloaded a fuel consumption dataset, **`FuelConsumption.csv`**, which contains model-specific fuel consumption ratings and estimated carbon dioxide emissions for new light-duty vehicles for retail sale in Canada. [Dataset source](http:\/\/open.canada.ca\/data\/en\/dataset\/98f1a129-f628-4ce4-b24d-6f16bf24dd64)\n\n- **MODELYEAR** e.g. 2014\n- **MAKE** e.g. Acura\n- **MODEL** e.g. ILX\n- **VEHICLE CLASS** e.g. SUV\n- **ENGINE SIZE** e.g. 4.7\n- **CYLINDERS** e.g 6\n- **TRANSMISSION** e.g. A6\n- **FUEL CONSUMPTION in CITY(L\/100 km)** e.g. 9.9\n- **FUEL CONSUMPTION in HWY (L\/100 km)** e.g. 8.9\n- **FUEL CONSUMPTION COMB (L\/100 km)** e.g. 9.2\n- **CO2 EMISSIONS (g\/km)** e.g. 182   --> low --> 0\n","a9d5289e":"We are not normalizing because the values do matter.\nhttps:\/\/stats.stackexchange.com\/questions\/189652\/is-it-a-good-practice-to-always-scale-normalize-data-for-machine-learning\n"}}