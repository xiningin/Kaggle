{"cell_type":{"085b4de1":"code","23dc186b":"code","5aca74f0":"code","4eef7680":"code","55c11081":"code","54566aac":"code","74444c50":"code","027e9093":"code","563dc8aa":"code","082841ff":"code","be72d76c":"code","1176c9e1":"code","29f935e7":"code","5d014cad":"markdown","a2538861":"markdown","df030ed1":"markdown"},"source":{"085b4de1":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport pandas_profiling \nimport tensorflow as tf\nfrom matplotlib import pyplot\nimport matplotlib as mpl\n\n%matplotlib inline\n\n\n# Any results you write to the current directory are saved as output.\n\nfrom keras import models\nfrom keras import layers\nfrom keras.utils import to_categorical\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory\n\nimport os\nprint(os.listdir(\"..\/input\"))\n\n# Any results you write to the current directory are saved as output.","23dc186b":"train_file = '..\/input\/fashion-mnist_train.csv'\ntest_file = '..\/input\/fashion-mnist_test.csv'","5aca74f0":"def read_dataset(data_file):\n    df = pd.read_csv(data_file)\n    label_column = 'label'\n    y = df[label_column].values\n    X = df.drop(label_column, axis=1).values\n    return (X, y)","4eef7680":"(train_X, train_y) = read_dataset(train_file)\n(test_X, test_y) = read_dataset(test_file)","55c11081":"def draw_articles(articles, labels):\n    fig, axs = plt.subplots(1, len(articles), figsize=(30,30))\n    for i in range(len(articles)):\n        axs[i].set_title(labels[i])\n        axs[i].imshow(articles[i].reshape((28,28)), cmap=plt.cm.binary)\n    plt.show()","54566aac":"def ImageDisplay(list_data, label, one_hot=False):\n    fig = pyplot.figure()\n    axis = fig.add_subplot(1,1,1)\n    list_data=np.reshape(list_data, (28,28))\n    plot_img = axis.imshow(list_data, cmap=mpl.cm.Greys)\n    plot_img.set_interpolation('none')\n    if one_hot :\n        ShowLabelName (label)\n    else:\n        print (\"Label : \"+str(CLASSES[str(label)]))","74444c50":"label_map = {0: 'T-Shirt\/Top', 1: 'Trouser', 2: 'Pullover', 3: 'Dress', 4: 'Coat', 5: 'Sandal', 6: 'Shirt', 7: 'Sneaker', 8: 'Bag', 9: 'Ankle boot'}\nexamples = []\nlabels = []\n\nfor i in label_map:\n    k = np.where(train_y==i)[0][0]\n    examples.append(train_X[k])\n    labels.append(label_map[i])\ndraw_articles(examples, labels)","027e9093":"train_X = train_X.astype('float32') \/ 255\ntrain_y = to_categorical(train_y)\n\ntest_X = test_X.astype('float32') \/ 255\ntest_y = to_categorical(test_y)","563dc8aa":"val_X = train_X[:10000]\ntrain_X = train_X[10000:]\n\nval_y = train_y[:10000]\ntrain_y = train_y[10000:]","082841ff":"network = models.Sequential()\nnetwork.add(layers.Dense(256, activation='relu', input_shape=(784,)))\nnetwork.add(layers.Dense(128, activation='relu', input_shape=(784,)))\nnetwork.add(layers.Dense(10, activation='softmax'))","be72d76c":"network.compile(optimizer='rmsprop',\n               loss='categorical_crossentropy',\n               metrics=['accuracy'])","1176c9e1":"network.fit(train_X, train_y, epochs=10, batch_size=128, validation_data=(val_X, val_y))","29f935e7":"test_loss, test_acc = network.evaluate(test_X, test_y)\nprint('test_loss=', test_loss)\nprint('test_accuracy=', test_acc)","5d014cad":"* Con 10 Epochs y BatchSize 128 los resultados fueron:\ntest_loss= 0.321983628821373 - test_accuracy= 0.8903\n\n* Con 5 Epochs y BatchSize 128 los resultados fueron:\ntest_loss= 0.41479156762361524 - test_accuracy= 0.8817\n\nDespu\u00e9s de variar el n\u00famero de iteraciones se confirma que con 10 es m\u00e1s que suficiente para superar el 89% de accuracy.\n\n\n\n**Fuente C\u00f3digo Python:** https:\/\/www.kaggle.com\/vladminzatu\/simple-nn-starter-using-keras","a2538861":"**Predictor - base de imagenes mediante Redes Neuronales**","df030ed1":"Se cargan los datos de entrenamiento y prueba."}}