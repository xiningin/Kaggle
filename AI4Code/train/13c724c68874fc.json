{"cell_type":{"650dc2c1":"code","45f60f6b":"code","a011cc66":"code","ce497f24":"code","1ed518c6":"code","1379583b":"code","4f9d1352":"code","34acba94":"code","62c30af7":"code","753d6cd0":"code","9fc3e905":"code","c165124e":"code","6c831440":"code","505642b7":"code","478a05dc":"code","0fd172a6":"code","2017fb4c":"code","94ee9cb0":"code","53b818cf":"code","eb132437":"code","e6d680f3":"code","70b3720e":"code","dc161f82":"code","87632427":"code","de768cc2":"code","1916282d":"code","16393272":"code","2eb8493e":"code","04b0575a":"code","45f5f19f":"code","2aebc218":"code","97fd6348":"code","5a0fe171":"code","041840c8":"code","41a4d607":"code","3520388e":"code","ac960daf":"code","e46e5ade":"code","70db9e91":"code","5d3bbe38":"code","25383360":"code","dc71c138":"code","1f845872":"code","de3ff23f":"code","3c93ac1e":"code","aa25ff9f":"code","1fbf9376":"code","7b079665":"code","5121e3a4":"code","3eacedf1":"code","f4f9280a":"code","e363786e":"code","e62db71a":"code","8a083672":"code","8250029c":"code","81cc1f84":"code","1de9f093":"code","80f82f2f":"code","b634314c":"code","e9c48dec":"code","b9057971":"code","e7134aa0":"code","38fce369":"code","ad20d919":"code","c0372ab6":"code","c6233081":"code","8d7cf5a6":"code","ab48e727":"code","bb11c46c":"code","76fae9ff":"code","efc97e03":"code","e55762e9":"code","cff5ac36":"code","ac567adc":"code","a0702c9b":"code","220c6192":"code","c1ebb784":"code","eaa69c66":"code","f642d80a":"code","65433056":"code","b1d62adf":"code","00b7e47c":"code","839d2426":"code","f3a28f44":"code","4a133375":"code","b6dd9fb1":"code","9a7b0c19":"code","95c33c26":"code","093d221e":"code","ea7b12d7":"code","012ecec5":"code","1023cd26":"code","62c5d8c9":"code","1cb7e57a":"code","81844892":"code","e4a4d9aa":"code","a1c5169a":"code","51e42520":"code","5815db05":"code","7ed43ea1":"code","0e3a592b":"markdown","68c00d39":"markdown","ef51d1f4":"markdown","6748a6eb":"markdown","ba6cf052":"markdown","12072cde":"markdown","e347d18c":"markdown","19bde133":"markdown","99fed5e4":"markdown","e5cbad95":"markdown","d3411a1f":"markdown","a6955627":"markdown","70f39d10":"markdown","31e22f7a":"markdown","e0050793":"markdown","4e8759e8":"markdown","fc1b76f0":"markdown","6f30d0f7":"markdown","2ce77275":"markdown","13c62233":"markdown","ab6e9014":"markdown","d72df72a":"markdown","c6e0f34b":"markdown","9ffbe9bb":"markdown","c7068286":"markdown","91c8ef5f":"markdown","ce8bbeb6":"markdown","d2a93a26":"markdown","fe2ce852":"markdown","8ca0218e":"markdown","199bffbf":"markdown","94e1d5c1":"markdown","acda2def":"markdown","4768d9d7":"markdown","f6e61bb9":"markdown","92d23304":"markdown","43f81aaf":"markdown","55ae8383":"markdown","6d5805a2":"markdown","383510ab":"markdown","9afd4ac0":"markdown","d0eba5b4":"markdown","a0017ae0":"markdown","fed82466":"markdown","06377d22":"markdown","c8bc4c7d":"markdown","43ebef7d":"markdown","4b1acd10":"markdown","4d921eec":"markdown","82f445c4":"markdown","59bad6c2":"markdown","0b281bf3":"markdown","3a6eb8f5":"markdown","df5ab918":"markdown","017272c9":"markdown","f1863af3":"markdown","cfb5a16f":"markdown","991a209e":"markdown","c9fe8531":"markdown","b58952d5":"markdown","98912ffd":"markdown","1d69d58a":"markdown","617adcc3":"markdown","f4f2a268":"markdown","d44c08f1":"markdown","9dd81b15":"markdown","fcb745a1":"markdown","89f55a4a":"markdown","efc84771":"markdown","f8bbe59f":"markdown","d253a05c":"markdown","b6a3ec47":"markdown","ec63340c":"markdown","21ea2d0d":"markdown","5f0997b7":"markdown","986fc924":"markdown","3728772f":"markdown"},"source":{"650dc2c1":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport json\nimport scipy\nfrom outlier_tools import outlier_aware_hist","45f60f6b":"import os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))","a011cc66":"with open('\/kaggle\/input\/fuel-data\/ice_trips.json') as f:\n    trips = pd.DataFrame(json.load(f))","ce497f24":"trips = trips.drop(['speed_risk_distance'], axis=1)","1ed518c6":"trips.shape","1379583b":"trips.info()","4f9d1352":"pd.set_option('display.max_columns', None)\ntrips.iloc[:, 4:].describe()","34acba94":"with open('\/kaggle\/input\/fuel-data\/cars.json') as f:\n    cars = pd.DataFrame(json.load(f))","62c30af7":"cars.shape","753d6cd0":"cars.info()","9fc3e905":"cars.iloc[:, 8:].describe()","c165124e":"active_cars = cars[cars.id.isin(trips.car.unique())]\nactive_cars.info()","6c831440":"null_cars = active_cars[active_cars.isnull().any(axis=1)]\nnull_cars","505642b7":"print(\"Total trips by car 11:\", trips[trips.car==11].shape[0])\nprint(\"ID numbers of cars with CNG engine and at least 1 recorded trip:\", trips[trips.car.isin(cars.loc[cars.type=='CNG', 'id'].unique())].car.unique().tolist())","478a05dc":"trips.loc[trips.car==140, 'fuel'].describe()","0fd172a6":"trips.loc[trips.car==105, 'fuel'].describe()","2017fb4c":"trips = trips.drop(trips[trips.car.isin([11, 105, 140, 162])].index)\ntrips.shape","94ee9cb0":"with open('\/kaggle\/input\/fuel-data\/cars_nomissing.json') as f:\n    cars_complete = pd.DataFrame(json.load(f))\n\nactive_cars_complete = cars_complete[cars_complete.id.isin(trips.car.unique())]\nactive_cars_complete.info()","53b818cf":"data = pd.merge(trips, active_cars_complete, left_on='car', right_on='id', suffixes=('_trip', '_car'))\ndata.shape","eb132437":"data.info()","e6d680f3":"norm_fuel_trips = data.loc[data.original_fuel.isnull() == False, ['fuel', 'original_fuel', 'norm_fuel', 'distance', 'car', 'driver', 'date']].copy().sort_values('date')\nnorm_fuel_trips","70b3720e":"norm_fuel_trips.original_fuel.describe()  # Even some negative measures!","dc161f82":"fuel_ratio = norm_fuel_trips['original_fuel'] \/ norm_fuel_trips['norm_fuel']\nfuel_ratio.describe()","87632427":"fuel_cat = pd.cut(fuel_ratio, [fuel_ratio.min(), 0, 0.667, 1.6, 2.5, 5, fuel_ratio.max()])\nax = fuel_cat.value_counts(sort=False, normalize=True).mul(100).plot.bar(\n    rot=0, figsize=(10, 6), title = \"Fuel Ratio (Original \/ Normalized) Distribution in replaced measuraments\"\n)\nlabels = [\"<= 0\", \"0 to 0.667\", \"0.667 to 1.6\", \"1.6 to 2.5\", \"2.5 to 5\", \"> 5\"]\nax.set_xticklabels(labels)\nplt.ylabel(\"%\");","de768cc2":"print(\"{}% of normalized fuel trips consist of an original fuel recording equal to zero.\".format(round(100 * (fuel_ratio==0).sum() \/ fuel_ratio.shape[0], 2)))","1916282d":"orig_fuel_trips = data.loc[data.original_fuel.isnull()].copy()\norig_fuel_trips.shape","16393272":"orig_fuel_trips['fuel_per_100_km'] = orig_fuel_trips.fuel \/ orig_fuel_trips.distance * 100","2eb8493e":"orig_fuel_trips.fuel_per_100_km.hist(bins='fd', figsize=(10, 6), grid=False)\nplt.xlabel(\"Consumed Fuel [L \/ 100 Km]\")\nplt.show()","04b0575a":"orig_fuel_trips[['fuel_per_100_km']].describe()","45f5f19f":"orig_fuel_trips['norm_fuel_per_100_km'] = (orig_fuel_trips.norm_fuel \/ orig_fuel_trips.distance) * 100\n\nfig, ax = plt.subplots(figsize=(10, 6))\nplt.hist(orig_fuel_trips.fuel_per_100_km, bins='fd', label=\"Recorded Fuel\", alpha=0.5)\nplt.hist(orig_fuel_trips.norm_fuel_per_100_km, bins='fd', label=\"Normalized Fuel\", alpha=0.5)\nplt.legend(loc='best')\nax.set_xlabel('Consumed Fuel [L \/ 100 Km]')\nplt.show()","2aebc218":"fig, ax = plt.subplots(figsize=(10, 6))\nplt.boxplot(\n    orig_fuel_trips[['fuel_per_100_km', 'norm_fuel_per_100_km']], labels=[\"Recorded Fuel\", \"Normalized Fuel\"], \n    vert=False, widths=[.3, .3], flierprops=dict(marker='.', alpha=.2),\n)\nax.set_xlabel('Consumed Fuel [L \/ 100 Km]')\nplt.show()","97fd6348":"summary = orig_fuel_trips[['fuel_per_100_km', 'norm_fuel_per_100_km']].describe()\nsummary.columns = ['Recorded Fuel per 100 km', 'Normalized Fuel per 100 km']\nsummary","5a0fe171":"from sklearn.model_selection import train_test_split\n\ntrain, test = train_test_split(orig_fuel_trips, test_size=0.2, random_state=123)\n\nprint(\"Train Set: {} observations\".format(train.shape[0]))\nprint(\"Test Set: {} observations\".format(test.shape[0]))","041840c8":"y_train = train['fuel_per_100_km']\nX_train = train.drop('fuel_per_100_km', axis=1)\n\nX_train.info()","41a4d607":"trips = train.copy()  # copy of the data to avoid damaging the original set","3520388e":"pd.set_option('display.max_columns', None)\npd.set_option('display.max_rows', None)","ac960daf":"trips_numeric = trips.select_dtypes('number').drop(['id_trip', 'driver', 'car', 'id_car', 'fleet'], axis=1)\nprint(trips_numeric.shape[1], \"Numerical Variables\")","e46e5ade":"trips_numeric.describe()","70db9e91":"trips_numeric = trips_numeric.drop(['original_fuel', 'braking_duration', 'driving_time'], axis=1)","5d3bbe38":"corr_matrix = trips_numeric.corr()\ncorr_matrix[\"fuel_per_100_km\"][abs(corr_matrix[\"fuel_per_100_km\"]) > 0.15].sort_values(key=abs, ascending=False)","25383360":"trips_numeric.plot(\n    kind=\"scatter\", x=\"norm_fuel_per_100_km\", y=\"fuel_per_100_km\", alpha=0.1, figsize=(10, 6), \n    xlabel=\"Normalized (Expected) Fuel [L \/ 100 km]\", ylabel=\"Original (Recorded) Fuel [L \/ 100 km]\",\n    title=\"Recorded Fuel vs Expected Fuel\"\n)\nslope, intercept, r_value, p_value, std_err = scipy.stats.linregress(trips_numeric.norm_fuel_per_100_km, trips_numeric.fuel_per_100_km)\nplt.plot(trips_numeric.norm_fuel_per_100_km, intercept + trips_numeric.norm_fuel_per_100_km * slope, color=\"red\", ls='-')\nplt.annotate(\"R squared: {:.3f}\".format(r_value**2), (.05, .95), xycoords='axes fraction', size=12);","dc71c138":"trips_numeric.plot(\n    kind=\"scatter\", x=\"max_speed_trip\", y=\"fuel_per_100_km\", alpha=0.1, figsize=(10, 6), \n    xlabel=\"Max Trip Speed [km \/ h]\", ylabel=\"Original (Recorded) Fuel [L \/ 100 km]\",\n    title=\"Recorded Fuel vs Max Trip Speed\"\n)\nslope, intercept, r_value, p_value, std_err = scipy.stats.linregress(trips_numeric.max_speed_trip, trips_numeric.fuel_per_100_km)\nplt.plot(trips_numeric.max_speed_trip, intercept + trips_numeric.max_speed_trip * slope, color=\"red\", ls='-')\nplt.annotate(\"R squared: {:.3f}\".format(r_value**2), (.05, .95), xycoords='axes fraction', size=12);","1f845872":"import seaborn as sns\nplt.figure(figsize=(20, 20))\nsns.heatmap(corr_matrix, annot=False, cmap=\"vlag\")\nplt.xticks(rotation=45, ha=\"right\");","de3ff23f":"trips_cat = trips.select_dtypes('object')\nprint(trips_cat.shape[1], \"Categorical Variables\")","3c93ac1e":"trips_cat.info()","aa25ff9f":"trips_cat = trips_cat.drop(['date'], axis=1)\ntrips_cat.describe()","1fbf9376":"trips_cat = trips_cat.drop(['car_type'], axis=1)","7b079665":"for i, cat in enumerate(trips_cat.columns):\n    fig, ax = plt.subplots(figsize=(10, 6))\n    ax.bar(\n        x=range(len(trips_cat[cat].value_counts().values)),\n        height=trips_cat[cat].value_counts().values, \n        tick_label=trips_cat[cat].value_counts().index\n    )\n    if len(trips_cat[cat].value_counts().values) > 7:\n        plt.xticks(rotation=45, ha='right')\n    ax.set_title(cat)\n    plt.show()","5121e3a4":"pd.reset_option('max_columns')\npd.reset_option('max_rows')","3eacedf1":"trips = trips.drop(['id_trip', 'driver', 'id_car', 'fleet', 'original_fuel', 'braking_duration', 'driving_time', 'date', 'car_type'], axis=1)\ntrips.shape","f4f9280a":"trips.iloc[42][['fuel_consumption_mixed', 'fuel_tank', 'range_mixed']]","e363786e":"tot_ov = trips.overspeeding_10_30 + trips.overspeeding_30_50 + trips.overspeeding_50\nprint(\"Correlation: {:.3f}\".format(np.corrcoef(tot_ov, trips.overspeeding_distance)[0, 1]))\nn_no_diff = sum(tot_ov == trips.overspeeding_distance)  # number of trips where the difference is null\nprint(\"{} trips with sum = total ({:.2f}%)\".format(n_no_diff, 100 * n_no_diff \/ trips.shape[0]))\nn_sig_diff = sum(abs(tot_ov - trips.overspeeding_distance) > 0.001)  # number of trips where the difference between total and sum is > 1 meter\nprint(\"{} trips with difference > 1 meter ({:.2f}%)\".format(n_sig_diff, 100 * n_sig_diff \/ trips.shape[0]))","e62db71a":"tot_types = trips.highway + trips.urban + trips.rural\nprint(\"Correlation: {:.3f}\".format(np.corrcoef(tot_types, trips.distance)[0, 1]))\nn_no_diff = sum(tot_types == trips.distance)  # number of trips where the difference is null\nprint(\"{} trips with sum = total ({:.2f}%)\".format(n_no_diff, 100 * n_no_diff \/ trips.shape[0]))\nn_sig_diff = sum(abs(tot_types - trips.distance) > 0.001)  # number of trips where the difference between total and sum is > 1 meter\nprint(\"{} trips with difference > 1 meter ({:.2f}%)\".format(n_sig_diff, 100 * n_sig_diff \/ trips.shape[0]))\nn_sig_diff_1km = sum(abs(tot_types - trips.distance) > 1)\nprint(\"{} trips with difference > 1 km ({:.2f}%)\".format(n_sig_diff_1km, 100 * n_sig_diff_1km \/ trips.shape[0]))\nn_sig_diff_10km = sum(abs(tot_types - trips.distance) > 10)\nprint(\"{} trips with difference > 10 km ({:.2f}%)\".format(n_sig_diff_10km, 100 * n_sig_diff_10km \/ trips.shape[0]))","8a083672":"fig, ax = plt.subplots(figsize=(10, 6))\noutlier_aware_hist(trips.distance - tot_types, bins='fd')\nax.set_xlabel('Total Distance - (Urban + Rural + Highway) [km]')\nax.set_title(\"Distribution of difference between Total and Sum - Road Types\")\nplt.show()","8250029c":"fig, ax = plt.subplots(figsize=(10, 6))\nplt.scatter(trips.distance, tot_types, alpha=0.1)\nax.set_xlabel(\"Distance [km]\")\nax.set_ylabel(\"Sum of distances within different road types [km]\")\nslope, intercept, r_value, p_value, std_err = scipy.stats.linregress(trips.distance, tot_types)\nplt.plot(trips.distance, intercept + trips.distance * slope, color=\"red\", ls='-')\nplt.annotate(\"R squared: {:.3f}\".format(r_value**2), (.05, .95), xycoords='axes fraction', size=12);","81cc1f84":"tot_known = trips.known_roads + trips.unknown_roads\nprint(\"Correlation: {:.3f}\".format(np.corrcoef(tot_known, trips.distance)[0, 1]))\nn_no_diff = sum(tot_known == trips.distance)  # number of trips where the difference is null\nprint(\"{} trips with sum = total ({:.2f}%)\".format(n_no_diff, 100 * n_no_diff \/ trips.shape[0]))\nn_sig_diff = sum(abs(tot_known - trips.distance) > 0.001)  # number of trips where the difference between total and sum is > 1 meter\nprint(\"{} trips with difference > 1 meter ({:.2f}%)\".format(n_sig_diff, 100 * n_sig_diff \/ trips.shape[0]))\nn_diff_100m = sum(abs(tot_known - trips.distance) > 0.1)  # number of trips where the difference between total and sum is > 1 meter","1de9f093":"tot_time = trips.time_span_7_10 + trips.time_span_10_15 + trips.time_span_15_19 + trips.time_span_19_7\nprint(\"Correlation: {:.3f}\".format(np.corrcoef(tot_time, trips.distance)[0, 1]))\nn_no_diff = sum(tot_time == trips.distance)  # number of trips where the difference is null\nprint(\"{} trips with sum = total ({:.2f}%)\".format(n_no_diff, 100 * n_no_diff \/ trips.shape[0]))\nn_sig_diff = sum(abs(tot_time - trips.distance) > 0.001)  # number of trips where the difference between total and sum is > 1 meter\nprint(\"{} trips with difference > 1 meter ({:.2f}%)\".format(n_sig_diff, 100 * n_sig_diff \/ trips.shape[0]))","80f82f2f":"tot_weat = trips.weather_cloudy + trips.weather_sunny + trips.weather_rainy + trips.weather_snowy\nprint(\"Correlation: {:.3f}\".format(np.corrcoef(tot_weat, trips.distance)[0, 1]))\nn_no_diff = sum(tot_weat == trips.distance)  # number of trips where the difference is null\nprint(\"{} trips with sum = total ({:.2f}%)\".format(n_no_diff, 100 * n_no_diff \/ trips.shape[0]))\nn_sig_diff = sum(abs(tot_weat - trips.distance) > 0.001)  # number of trips where the difference between total and sum is > 1 meter\nprint(\"{} trips with difference > 1 meter ({:.2f}%)\".format(n_sig_diff, 100 * n_sig_diff \/ trips.shape[0]))\nn_sig_diff_1km = sum(abs(tot_weat - trips.distance) > 1)\nprint(\"{} trips with difference > 1 km ({:.2f}%)\".format(n_sig_diff_1km, 100 * n_sig_diff_1km \/ trips.shape[0]))\nn_sig_diff_10km = sum(abs(tot_weat - trips.distance) > 10)\nprint(\"{} trips with difference > 10 km ({:.2f}%)\".format(n_sig_diff_10km, 100 * n_sig_diff_10km \/ trips.shape[0]))","b634314c":"fig, ax = plt.subplots(figsize=(10, 6))\nplt.scatter(trips.distance, tot_weat, alpha=0.25)\nax.set_xlabel(\"Distance [km]\")\nax.set_ylabel(\"Sum of distances within weather classes [km]\")\nslope, intercept, r_value, p_value, std_err = scipy.stats.linregress(trips.distance, tot_weat)\nplt.plot(trips.distance, intercept + trips.distance * slope, color=\"red\", ls='-')\nplt.annotate(\"R squared: {:.3f}\".format(r_value**2), (.05, .95), xycoords='axes fraction', size=12);","e9c48dec":"tot_temp = trips.temp_minus_10 + trips.temp_minus_10_0 + trips.temp_0_10 + trips.temp_10\nprint(\"Correlation: {:.3f}\".format(np.corrcoef(tot_temp, trips.distance)[0, 1]))\nn_no_diff = sum(tot_temp == trips.distance)  # number of trips where the difference is null\nprint(\"{} trips with sum = total ({:.2f}%)\".format(n_no_diff, 100 * n_no_diff \/ trips.shape[0]))\nn_sig_diff = sum(abs(tot_temp - trips.distance) > 0.001)  # number of trips where the difference between total and sum is > 1 meter\nprint(\"{} trips with difference > 1 meter ({:.2f}%)\".format(n_sig_diff, 100 * n_sig_diff \/ trips.shape[0]))\nn_sig_diff_1km = sum(abs(tot_temp - trips.distance) > 1)\nprint(\"{} trips with difference > 1 km ({:.2f}%)\".format(n_sig_diff_1km, 100 * n_sig_diff_1km \/ trips.shape[0]))\nn_sig_diff_10km = sum(abs(tot_temp - trips.distance) > 10)\nprint(\"{} trips with difference > 10 km ({:.2f}%)\".format(n_sig_diff_10km, 100 * n_sig_diff_10km \/ trips.shape[0]))","b9057971":"fig, ax = plt.subplots(figsize=(10, 6))\nplt.scatter(trips.distance, tot_temp, alpha=0.25)\nax.set_xlabel(\"Distance [km]\")\nax.set_ylabel(\"Distance within temperature classes [km]\")\nslope, intercept, r_value, p_value, std_err = scipy.stats.linregress(trips.distance, tot_temp)\nplt.plot(trips.distance, intercept + trips.distance * slope, color=\"red\", ls='-')\nplt.annotate(\"R squared: {:.3f}\".format(r_value**2), (.05, .95), xycoords='axes fraction', size=12);","e7134aa0":"trips = trips.drop(['fuel', 'norm_fuel'], axis=1)","38fce369":"corr_matrix = trips.corr()\ncorr_matrix[\"distance\"][abs(corr_matrix[\"distance\"]) > 0.15].sort_values(key=abs, ascending=False)","ad20d919":"trips['overspeeding_10_30_ratio'] = trips.overspeeding_10_30 \/ trips.distance\ntrips['overspeeding_30_50_ratio'] = trips. overspeeding_30_50 \/ trips.distance\ntrips['overspeeding_50_ratio'] = trips. overspeeding_50 \/ trips.distance\n\ntrips['speed_risk_per_100_km'] = trips.speed_risk \/ trips.distance * 100\ntrips['acceleration_risk_per_100_km'] = trips.acceleration_risk \/ trips.distance * 100\ntrips['braking_risk_per_100_km'] = trips.braking_risk \/ trips.distance * 100\ntrips['duration_per_100_km'] = trips.duration \/ trips.distance * 100\n\ntot_types = trips.highway + trips.urban + trips.rural\ntrips['highway_ratio'] = trips.highway \/ tot_types\ntrips['urban_ratio'] = trips.urban \/ tot_types\ntrips['rural_ratio'] = trips.rural \/ tot_types\n\ntot_time = trips.time_span_7_10 + trips.time_span_10_15 + trips.time_span_15_19 + trips.time_span_19_7\ntrips['time_7_10_ratio'] = trips.time_span_7_10 \/ tot_time\ntrips['time_10_15_ratio'] = trips.time_span_10_15 \/ tot_time\ntrips['time_15_19_ratio'] = trips.time_span_15_19 \/ tot_time\ntrips['time_19_7_ratio'] = trips.time_span_19_7 \/ tot_time\n\ntrips['weekend_ratio'] = trips.weekend_distance \/ trips.distance\ntrips['off_hours_ratio'] = trips.off_hours_distance \/ trips.distance\n\ntrips['known_roads_ratio'] = trips.known_roads \/ (trips.known_roads + trips.unknown_roads)\n\ntrips['aggressive_turns_per_100_km'] = trips.aggressive_turns \/ trips.distance * 100\ntrips['aggressive_braking_per_100_km'] = trips.aggressive_braking \/ trips.distance * 100\ntrips['aggressive_acceleration_per_100_km'] = trips.aggressive_acceleration \/ trips.distance * 100\ntrips['overspeeding_events_per_100_km'] = trips.overspeeding_events \/ trips.distance * 100\ntrips['critical_overspeeding_events_per_100_km'] = trips.critical_overspeeding_events \/ trips.distance * 100\ntrips['over_90_ratio'] = trips.over_90_distance \/ trips.distance\n\ntot_weather = trips.weather_sunny + trips.weather_cloudy + trips.weather_snowy + trips.weather_rainy\ntrips['weather_sunny_ratio'] = trips.weather_sunny \/ tot_weather\ntrips['weather_cloudy_ratio'] = trips.weather_cloudy \/ tot_weather\ntrips['weather_rainy_ratio'] = trips.weather_rainy \/ tot_weather\ntrips['weather_snowy_ratio'] = trips.weather_snowy \/ tot_weather\n\ntot_temp = trips.temp_minus_10 + trips.temp_minus_10_0 + trips.temp_0_10 + trips.temp_10\ntrips['temp_minus_10_ratio'] = trips.temp_minus_10 \/ tot_temp\ntrips['temp_minus_10_0_ratio'] = trips.temp_minus_10_0 \/ tot_temp\ntrips['temp_0_10_ratio'] = trips.temp_0_10 \/ tot_temp\ntrips['temp_10_ratio'] = trips.temp_10 \/ tot_temp","c0372ab6":"trips = trips.drop(\n    [\n        'overspeeding_distance', 'overspeeding_10_30', 'overspeeding_30_50', 'overspeeding_50',\n        'speed_risk', 'acceleration_risk', 'braking_risk', 'duration',\n        'highway', 'urban', 'rural', 'time_span_7_10', 'time_span_10_15', 'time_span_15_19',\n        'time_span_19_7', 'weekend_distance', 'off_hours_distance', 'known_roads', 'unknown_roads',\n        'aggressive_turns', 'aggressive_braking', 'aggressive_acceleration', 'overspeeding_events',\n        'critical_overspeeding_events', 'over_90_distance', 'weather_sunny', 'weather_cloudy', \n        'weather_rainy', 'weather_snowy', 'temp_minus_10', 'temp_minus_10_0', 'temp_0_10', 'temp_10'\n    ],\n    axis=1\n)","c6233081":"pd.set_option('display.max_columns', None)","8d7cf5a6":"print(\"We now have\", trips[trips.isnull().any(axis=1)].shape[0], \"trips with at least one null value.\")","ab48e727":"print(\"Null values count:\")\ntrips.isnull().sum()[trips.isnull().sum() > 0]","bb11c46c":"avg_ratios_by_car = trips[trips.isnull().any(axis=1) == False].groupby('car')[['highway_ratio', 'urban_ratio', 'rural_ratio']].mean()\navg_ratios_by_car.head()","76fae9ff":"to_replace = trips[trips[['highway_ratio', 'urban_ratio', 'rural_ratio']].isnull().any(axis=1)]\nto_replace[['car','highway_ratio', 'urban_ratio', 'rural_ratio']].head()","efc97e03":"for car in to_replace.car.unique():\n    for variable in 'highway_ratio', 'urban_ratio', 'rural_ratio':\n        trips.loc[(trips[variable].isnull()) & (trips.car==car), variable] = avg_ratios_by_car.loc[car, variable]  # Replace the missing value with the car-specific avg","e55762e9":"print(\"Null values count:\")\ntrips.isnull().sum()[trips.isnull().sum() > 0]","cff5ac36":"trips = trips.dropna(axis=0)","ac567adc":"print(\"Null values count:\")\ntrips.isnull().sum()[trips.isnull().sum() > 0]","a0702c9b":"trips = trips.drop(['car'], axis=1)","220c6192":"trips.shape","c1ebb784":"corr_matrix_new = trips.select_dtypes('number').corr()\nplt.figure(figsize=(20, 20))\nsns.heatmap(corr_matrix_new, annot=False, cmap=\"vlag\")\nplt.xticks(rotation=45, ha=\"right\");","eaa69c66":"print(\"Original data - Variables most correlated with distance:\")\ncorr_matrix[\"distance\"][abs(corr_matrix[\"distance\"]) > 0.15].sort_values(key=abs, ascending=False)","f642d80a":"print(\"New Data - Variables most correlated with distance:\")\ncorr_matrix_new[\"distance\"][abs(corr_matrix_new[\"distance\"]) > 0.15].sort_values(key=abs, ascending=False)","65433056":"print(\"New Data - Variables most correlated with outcome:\")\ncorr_matrix[\"fuel_per_100_km\"][abs(corr_matrix[\"fuel_per_100_km\"]) > 0.15].sort_values(key=abs, ascending=False)","b1d62adf":"pd.set_option('display.max_columns', None)\ntrips.select_dtypes('number').describe().loc[['min', 'max', 'std']]","00b7e47c":"fig, ax = plt.subplots(figsize=(10, 6))\noutlier_aware_hist(trips.speed_risk_per_100_km)","839d2426":"trips.sort_values('speed_risk_per_100_km', ascending=False)[['speed_risk_per_100_km', 'max_speed_trip', 'max_speed_car', 'brand', 'model']].head(10)","f3a28f44":"print(\"In total,\", trips.loc[trips.max_speed_trip \/ trips.max_speed_car > 1.05].shape[0],\n      \"trips have a recorded max speed at least 5% greater than the car max speed.\")","4a133375":"trips.sort_values('speed_risk_per_100_km', ascending=False)[\n    ['speed_risk_per_100_km', 'max_speed_trip', 'max_speed_car', \n     'overspeeding_10_30_ratio', 'overspeeding_30_50_ratio', 'overspeeding_50_ratio',\n    'overspeeding_events_per_100_km', 'critical_overspeeding_events_per_100_km']\n].iloc[4:].head(10)","b6dd9fb1":"trips[['speed_risk_per_100_km', 'overspeeding_10_30_ratio', 'overspeeding_30_50_ratio', 'overspeeding_50_ratio',\n    'overspeeding_events_per_100_km', 'critical_overspeeding_events_per_100_km']].describe().loc[['mean', '50%', '75%']]","9a7b0c19":"trips_cat = trips.select_dtypes('object')\nprint(trips_cat.shape[1], \"Categorical Variables\")\ntrips_cat.info()","95c33c26":"trips.brand.value_counts()","093d221e":"trips.loc[trips.brand=='VOLVO', 'brand'] = 'Volvo'","ea7b12d7":"trips.model.value_counts()","012ecec5":"trips.loc[trips.model.isin(['FOCUS', 'FOCUS III', 'FOCUS IV', 'Focus']), 'model'] = 'FOCUS'\ntrips.loc[trips.model.isin(['Transit Connect', 'TRANSIT CONNECT', 'TRANSIT COURIER', 'TRANSIT L3', 'Transit Tourneo']), 'model'] = 'TRANSIT'\ntrips.loc[trips.model.isin(['X60', 'XC60']), 'model'] = 'XC60'","1023cd26":"trips.body_type.value_counts()","62c5d8c9":"trips.loc[trips.body_type=='Hatchback', 'body_type'] = 'HATCHBACK'\ntrips.loc[trips.body_type=='Kombi', 'body_type'] = 'KOMBI'\ntrips.loc[trips.body_type=='Sedan', 'body_type'] = 'SEDAN'\ntrips.loc[trips.body_type=='mini van', 'body_type'] = 'VAN'\ntrips.loc[trips.body_type.isin(['Stationwagen', 'Stationwagon AC', 'Wagon']), 'body_type'] = 'Stationwagon'","1cb7e57a":"trips.emission_standard.value_counts()","81844892":"trips.loc[trips.emission_standard.isin(['EURO VI', 'Euro 6,2', 'Euro 6.2']), 'emission_standard'] = 'Euro 6'\ntrips.loc[trips.emission_standard=='EURO V', 'emission_standard'] = 'Euro 5'","e4a4d9aa":"trips.emission_standard.value_counts()","a1c5169a":"from sklearn.preprocessing import OneHotEncoder\ncat_encoder = OneHotEncoder()\ncat_encoder_dropfirst = OneHotEncoder(drop='first') #To avoid collinearity, we might want to drop the first category of the created dummies\n\ntrips_cat = trips.select_dtypes('object')\ntrips_cat_1hot = cat_encoder.fit_transform(trips_cat)\ntrips_cat_1hot_dropfirst = cat_encoder_dropfirst.fit_transform(trips_cat)","51e42520":"print(\"Without encoding:\", trips_cat.shape[1], \"categorical variables\")\nprint(\"With encoding:\", trips_cat_1hot.toarray().shape[1], \"dummy variables\")\nprint(\"With encoding (and no first category):\", trips_cat_1hot_dropfirst.toarray().shape[1], \"dummy variables\")","5815db05":"cat_encoder.categories_","7ed43ea1":"trips_cat_dummies = pd.get_dummies(trips_cat) # here, we can set the drop_first argument to True to avoid perfect multicollinearity\ntrips_cat_dummies","0e3a592b":"In these 42529 trips, the initially observed fuel measurament (saved as the *original_fuel* variable) has been swapped with the normalized version (*norm_fuel*) because the ratio of the two was deemed too large or too small.","68c00d39":"### Correlations","ef51d1f4":"#### Time Spans","6748a6eb":"A description of the considered variables can be found [here](https:\/\/docs.google.com\/document\/d\/1vf7ctzSzqWtjt4nmAvZPJlLemVS63gLYpF_MPmvkjgs\/edit?usp=sharing#heading=h.re7r90p586ri).","ba6cf052":"Some high correlations among attributes: indeed, we have some *redundant* data we'll get rid of in the next section.","12072cde":"The merged dataset contains 69 variables among car technical specs and trip-specific data. In our model, the goal is predicting fuel consumption within a given trip. However, the amount of liter of fuel consumed will be almost completely determined by the trip distance. Let us then create the outcome variable as **fuel consumed (in liters) within the trip per 100 km of distance**:","e347d18c":"Aside from the first trip (where the data concerning overspeeding distance is apparently missing), all of these have a quite high % of distance driven way above the speed limit, and a large number of overspeeding \/ critical overspeeding events justifying the generated risk (just compare the values to the median and 3rd quartile of the distributions, displayed below).","19bde133":"## 7. <a name=\"7\">Feature Engineering<\/a>\n### Creating New Variables\nAs previously shown by the correlation heatmap, most of the trip-specific features are highly correlated among themselves. However, one of the main reasons is that most variables are strictly dependent from the trip distance:","99fed5e4":"Aside from the variable *original fuel*, we have no missing values left in our dataset.","e5cbad95":"# Fuel Consumption Prediction for Internal Combustion Engines Vehichles\n# Preliminary Analisys and Data Exploration","d3411a1f":"The final goal of the analysis is to train a statistical model able to accurately predict fuel consumption within a trip for an *ICE* (Internal Combustion Engine) car.  \nThis first part is aimed at data exploration and preparation, and will follow this structure:  \n\n1. [Data Structure](#1)\n2. [Handling Car specs *retrievable* missing values](#2)\n3. [Original Fuel and Normalized Fuel](#3)\n4. [Train - Test split](#4)\n5. [Data Exploration](#5)\n6. [Preliminary Feature Selection](#6)\n7. [Feature Engineering](#7)\n8. [Data Cleaning](#8)\n\n\nThe analyzed dataset contains all *ICE* (including diesel, gasoline and natural gases engines) trips monitored by VivaDrive's DigitalFleet service from July 1st 2020 to June 30th 2021, along with car technical specifications. \nA description of the considered variables can be found [here](https:\/\/docs.google.com\/document\/d\/1vf7ctzSzqWtjt4nmAvZPJlLemVS63gLYpF_MPmvkjgs\/edit?usp=sharing). An initial variable selection has been already performed, removing all those items which are unequivocally irrelevant with respect to fuel consumption.","a6955627":"This is because, by using the sum of the category-based distances as a denominator, we operated some divisions by zero which Pandas saved as NaNs. In other words:\n- 1195 of the observed trips had **0 total distance** driven within any of the **road type** classes (urban, rural, highway)\n- 45 of the observed trips had **0 total distance** driven within any of the **weather** (sunny, rainy, cloudy, snowy) and **temperature** (<-10, -10 to 0, 0 to 10 and >10 \u00b0C) classes.\n\nHow can we solve this?  \nAbout the road types, we could replace the missing ratios with the average ratios for all cars; or, even better with the average ratios of the speficic cars which are missing the values.  \nAbout weather and temperature, instead, we could use the date, time and location to get a rough estimate of the weather conditions. However, given that it's just 45 trips, we could avoid the hustle and simply dicard these from the training set.","70f39d10":"#### Road Types","31e22f7a":"Here, the proportion of missing values is much reduced (the variables with more missing values are the last 3: *range_mixed*, *range_highway*, *range_city*, with 23\/88 missing = 26%).  \nLet's diplay the cars for which we have missing data, and which attributes we are actually missing:","e0050793":"Two other cars we can think about discarding are those with ID 140 and 105, which contain some erroneous information in the model name and no other data.\nMoreover, all the trips completed by these cars have a fuel recording equal to zero:","4e8759e8":"### Summary of findings\n#### Can be removed:\n- id_trip\n- driver\n- car (keep for now: useful for future analysis)\n- id_car\n- fleet\n- original_fuel\n- braking_duration\n- driving_time\n- date\n- car_type\n  \n#### Need investigation:\n- Highly correlated attributes (check for repeated \/ redundant variables)\n  \n#### Need recoding:\n- brand\n- model\n- body_type\n- emission_standard","fc1b76f0":"#### Weather Conditions","6f30d0f7":"#### Brand","2ce77275":"A description of the considered variables can be found [here](https:\/\/docs.google.com\/document\/d\/1vf7ctzSzqWtjt4nmAvZPJlLemVS63gLYpF_MPmvkjgs\/edit?usp=sharing).","13c62233":"In particular, the speed risk might contain some high leverage points: the max values is 1.32x10^18!","ab6e9014":"## 2. <a name=\"2\">Handling Car data retrievable missing values<\/a>\nThe car dataset contains a considerable number of missing values regarding some technical details. Let's start by considering only those cars for which we have trips available (active cars):","d72df72a":"All the other missing information above have been looked up and filled in using online resources and databases (such as [Auto Data](https:\/\/www.auto-data.net\/), [Cars Data](https:\/\/www.cars-data.com\/) and [Autocentrum](https:\/\/www.autocentrum.pl\/)), giving the final (**complete**) car database:","c6e0f34b":"## 5. <a name=\"5\">Data Exploration<\/a>","9ffbe9bb":"In most trips, the difference between the total distance and the sum of the distances driven within each road type is significant. This is probably because we do not have road type information available for each visited road.   \nStill, the two are very highly correlated, as shown by the scatterplot above.","c7068286":"For what concerns weather conditions, the data is a bit noisier: this is probably due to the lack of weather informations for some trips. However, the linear relation is still very strong, as depicted by the scatterplot above.","91c8ef5f":"Now that the data has been analyzed, cleaned, improved and prepared for being fit into models, these are the next steps:\n\n- Automate all the steps described by writing some functions, allowing certain parameters to be edited (e.g.: inclusion \/ exclusion of some variables, encoding of categorical features into dummies, variable scaling...) to allow for a future selection of the best options using cross-validation.\n- Start fitting some basic regression models on the training set, testing performace using K-fold cross validation (keep same folds across different models)\n- Find the most promising models\n- Tune the hyperparamters (where necessary) using cross-validation and grid-search\n- Try different variable selection methods\n- Try some more advanced models based on the findings of the previuous steps\n- Test the best models on the test set and find the optimal solution.","ce8bbeb6":"Finally, the vehicle with ID 162 is a truck and is missing all other information. We can also discard this from the analysis.","d2a93a26":"## 6. <a name=\"6\">Preliminary Feature Selection<\/a>\n### Unnecessary \/ Empty Data","fe2ce852":"What about the other trips? The max speed value seems reasonable, however the generated speed risk is still very high. Keep in mind that the speed risk depends on the difference between recorded speed and speed limit: hence, these high risks could have been due to driving very fast on low-speed limit roads.\n","8ca0218e":"The first car listed does not have any information (we don't even know the model). Moreover, it's a CNG (natural gas combustion engine) car, and it's the only one of this kind with trips in the observed dataset. Finally, it only recorded 49 trips. For these reasons, it's probably better to discard it.","199bffbf":"Even though we don't have a perfect match for all trips, the difference of the 2 quantities is **always** within 1m and the Pearson correlation value is equal to 1.","94e1d5c1":"- Scores, risks and events are all strictly related among any considered category: the *dynamics* score is a function of the risk generated from aggressive acceleration and braking, whereas the *speed* score takes into account overspeeding events. We might consider excluding some of this information.\n\n- Some categorical variable might be expressed as linear combinations of others, which is not ideal. The potential candidates for multicollinearity are:\n    - overspeeding_distance = overspeeding_10_30 + overspeeding_30_50 + overspeeding_50\n    - distance = urban + rural + highway\n    - distance = known + unknown\n    - distance = time_span_7_10 + time_span_10_15 + time_span_15_19 + time_span_19_7\n    - distance = weather_sunny + weather_cloudy + weather_rainy + weather_snowy\n    - distance = temp_minus_10 + temp_minus_10_0 + temp_0_10 + temp_10\n    \nLet's analyze these cases individually to see if we must intervene in any of them.","acda2def":"We now have missing values only for the weather-related categories. We'll simply remove these 45 trips from the dataset.","4768d9d7":"### Encoding Categorical Variables","f6e61bb9":"- Euro 6; Euro 6,2; Euro 6.2; EURO VI -> Euro 6\n- Euro 5; Euro V -> Euro 5","92d23304":"We obtain the same result using Pandas' method get_dummies():","43f81aaf":"Just by analyzing the descriptive statistics of the numerical variables, we can see that 3 can be discarded:\n\n- **Original Fuel**: since we are analyzing trips were the fuel was not normalized, this is all NaNs\n- **Braking Duration**: all 0 (usually measured just for Electrical Vehicles, now we are analyzing just ICE cars)\n- **Driving Time**: all 0 (same reason as braking duration)","55ae8383":"The feature engineering operation of creating the *ratio* variables from the original distance-based ones added some NaNs in our dataframe:","6d5805a2":"In fact, we can express most of these variables in terms of trip distance, as we already did for the outcome variable (*fuel per 100 km*) and for the normalized fuel.  \nThese are all the variables which need to be *normalized*, along with their final transformation:\n  \n- overspeeding_10_30 -> overspeeding_10_30_ratio (overspeeding_10_30 \/ distance)\n- overspeeding_30_50 -> overspeeding_30_50_ratio (overspeeding_30_50 \/ distance)\n- overspeeding_50 -> overspeeding_50_ratio (overspeeding_50 \/ distance) \n\n\n- speed_risk -> speed_risk_per_100_km (speed_risk \/ distance * 100)\n- acceleration_risk -> acceleration_risk_per_100_km (acceleration_risk \/ distance * 100)\n- braking_risk -> braking_risk_per_100_km (braking_risk \/ distance * 100)\n \n \n- duration -> duration_per_100_km (duration \/ distance * 100)\n \n  \n- highway -> highway_ratio (highway \/ distance)\n- urban -> urban_ratio (urban \/ distance)\n- rural -> rural_ratio (rural \/ distance)\n  \n  \n- time_span_7_10 -> time_span_7_10_ratio (time_span_7_10 \/ distance)\n- time_span_10_15 -> time_span_10_15_ratio (time_span_10_15 \/ distance)\n- time_span_15_19 -> time_span_15_19_ratio (time_span_15_19 \/ distance)\n- time_span_19_7 -> time_span_19_7_ratio (time_span_19_7 \/ distance)\n  \n  \n- weekend_distance -> weekend_ratio (weekend_distance \/ distance)\n- off_hours_distance -> off_hours_ratio (off_hours_distance \/ distance)\n  \n  \n- known_roads -> known_ratio (known_distance \/ distance)\n- unknown_roads -> unknown_ratio (unknown_distance \/ distance)\n  \n  \n- aggressive_turns -> aggressive_turns_per_100_km (aggressive_turns \/ distance * 100)\n- aggressive_braking -> aggressive_braking_per_100_km (aggressive_braking \/ distance * 100)\n- aggressive_acceleration -> aggressive_acceleration_per_100_km (aggressive_acceleration \/ distance * 100)\n- overspeeding_events -> overspeeding_events_per_100_km (overspeeding_events \/ distance * 100)\n- critical_overspeeding_events -> critical_overspeeding_events_per_100_km (critical_overspeeding_events \/ distance * 100)\n- over_90_distance -> over_90_distance_ratio (over_90_distance \/ distance)\n  \n  \n- weather_sunny -> weather_sunny_ratio (weather_sunny \/ distance)\n- weather_cloudy -> weather_cloudy_ratio (weather_cloudy \/ distance)\n- weather_rainy -> weather_rainy_ratio (weather_rainy \/ distance)\n- weather snowy -> weather_snowy_ratio (weather_snowy \/ distance)\n  \n  \n- temp_minus_10 -> temp_minus_10_ratio (temp_minus_10 \/ distance)\n- temp_minus_10_0 -> temp_minus_10_0_ratio (temp_minus_10_0 \/ distance)\n- temp_0_10 -> temp_0_10_ratio (temp_10 \/ distance)\n- temp_10 -> temp_10_ratio (temp_10 \/ distance)","383510ab":"#### Overspeeding Distance","9afd4ac0":"As previously discussed, **brand**, **model**, **body type** and **transmission type** need to be recoded before proceeding.\nIndeed, for all these variables we have many different labels for the same values. ","d0eba5b4":"We won't consider here *id_trip*, *driver*, *car*, *id_car* and *fleet* (all ID numbers).","a0017ae0":"The variables which are most correlated with the outcome (fuel per 100km) appear to be car specifics (**normalized (expected) fuel**, **co2 emissions**, **engine_power**, **fuel tank capacity**, **acceleration**).  \nAbout the normalized fuel, keep in mind that we expect this to be highly correlated to the real fuel, not only for logical reasons but mainly because we are analyzing just a subset of trips where the ratio between real fuel and normalized fuel was not too extreme!  \n\nAmong the trip data, we can see that **max recorded speed**, **total distance**, **distance within known\/unknown roads**, **distance within temperature\/weather classes** appear to be the most correlated with the dependent variable.","fed82466":"## 4. <a name=\"4\">Train - Test split<\/a>","06377d22":"#### Temperature classes","c8bc4c7d":"### Numerical Variables","43ebef7d":"The *car_type* variable can also be removed (contains all empty values, as it's used to differentiate between cars and trucks).","4b1acd10":"#### Average Ratios per car","4d921eec":"#### Known and Unknwon Roads","82f445c4":"In the first 4 trips with highest generated speed risk, the maximum recorded speed is above the actual maximum speed recorded by the car, suggesting that this might be due to some technical faults in the recording machines (it's difficult to believe a car would be capable of exceeding the maximum \"advertised\" speed by almost 60 km\/h).\nWe might think about discarding these trips entirely.","59bad6c2":"### Summary of Findings\n- Some data is clearly redundant and can be removed: **fuel** (replaced by fuel per 100 km) and **norm_fuel** (equivalently, replaced by norm fuel per 100 km).\n- Other variables need further investigation, and their inclusion \/ exclusion can be decided using cross validation in the future prediction-oriented round of feature selection: **scores**, **risks**, **events**, **ranges**. \n- Finally, some variables are clearly linear combinations of others. We might think about removing the sum; however, all of these variables are distance-related, and will be \"normalized\" in the next step of feature engineering. Hence, the decision about these is also postponed.","0b281bf3":"As for known roads, the sum of distances within different time spans is basically equal to the total distance.","3a6eb8f5":"### Repeated data\n- *fuel* and *norm_fuel* can be removed, has they have been replaced by *fuel_per_100_km* and *norm_fuel_per_100_km*.\n- *range_mixed*, *range_city* and *range_highway* are simply computed as a combination of *fuel_tank* and different *fuel_consumption* values. For instance, if the average *fuel_consumption_mixed* for a car is of 6.3 liters \/ 100 km and the *fuel_tank* capacity is of 60 liters, than the *range_mixed* will be equal to (60 \/ 6.3) * 100 = 952 km. We could hence consider removing either one of the two series of attributes.","df5ab918":"The vast majority of the trips in the dataset have been completed by Ford cars, Gasoline-fueled (Pb) cars (with respect to diesel, ON) and manual-transmission engine. There appears to be a wide variety of models and emission standards.  \nIf we look closer into the categories, we can see that many are repeated due to encoding mistakes: e.g.:\n- *VOLVO* and *Volvo* in the car brand\n- *FOCUS*, *FOCUS III*, *Focus* and *FOCUS IV*; *Transit Connect* and *TRANSIT CONNECT* in the car model\n- *HATCHBACK* and *Hatchback*; *KOMBI* and *Kombi*, *Wagon*, *Stationwagen AC* and *Stationwagon*; *SEDAN* and *Sedan* in the body type\n- *EURO VI*, *Euro 6*, *Euro 6,2* and *Euro 6.2*; *EURO V* and *Euro 5* in the emission standard\n\nAlthough encoded differently, all of these values imply the same observation, and will need some recoding.","017272c9":"- HATCHBACK, Hatchback -> HATCHBACK\n- KOMBI, Kombi -> KOMBI\n- SEDAN, Sedan -> SEDAN\n- Stationwagen, Stationwagon AC, Wagon -> Stationwagon\n- VAN, mini van -> VAN","f1863af3":"## Final Considerations & Next Steps","cfb5a16f":"Let us join the two datasets by matching the car id:","991a209e":"With respect to the correlation heatmap shown before (built on the original variables) the trip data appears way less correlated once distance has been taken into account (keep in mind that the new variables have been moved to the end of the df - the cluster of highly correlated variables we can see in the heatmap is about car technical details, and was previously located at the bottom right of the plot).","c9fe8531":"## 1. <a name=\"1\">Data Structure<\/a>\n### Trips\nWe have information about 89099 trips within the considered time-span.","b58952d5":"Let's remove the original attributes, which we don't need anymore:","98912ffd":"For now, let us simply remove fuel and norm_fuel.","1d69d58a":"Here, different models can be definitely grouped together:\n- FOCUS, FOCUS III, Focus and FOCUS IV -> FOCUS\n- Transit Connect, TRANSIT CONNECT, TRANSIT COURIER, TRANSIT L3, Transit Tourneo -> TRANSIT\n- X60 and XC60 (Volvo X60 actually does not exist: it's probably a typing mistake) -> XC60","617adcc3":"The total distance can be almost perfectly expressed as a linear combination of known + unknown roads.","f4f2a268":"## 8. <a name=\"8\">Data Cleaning<\/a>\n### Handling Missing Values","d44c08f1":"### Recorded Fuel vs Normalized Fuel distributions\nEven when the recorded fuel is within the considered interval-ratio with respect to the expected fuel, we can see that the distributions of the two recordings are quite different.","9dd81b15":"In total, 217 trips were removed, leaving us with 88882 observations.","fcb745a1":"VOLVO and Volvo should be under the same category.","89f55a4a":"### Categorical Variables","efc84771":"A very frequent case in which original fuel is replaced with normalized fuel appears to be when fuel consumption is equal to zero. Another common case is when the original is between 1.6 and 2.5 times the expected, whereas more extreme cases are less frequently observed.  \nThe main question is: **how to deal with these normalized recordings with respect to fuel prediction?**  \nNormalized fuel should probably not be considered as the dependent variable in the analysis, as it is simply based on the expected fuel (technical) consumption of the car model and hence non-informative. On the other hand, bad fuel recordings should also be discarded, as they are generated by technical faults in the methods used for monitoring trips. So, the question becomes: **when do we consider a fuel recording as bad?** Should we just use the given boundaries for the ratio (meaning, a fuel recording is considered bad when it's less than 2\/3 or above 1.6 times the expected measure)? Or should we maybe widen them?  \n  \nFor now, let's just include those trips where it was not necessary to use normalized fuel (given the described boundaries) into our final dataset.","f8bbe59f":"Given the previous analysis about multicollinearity, which highlighted that not in all cases the sum of the distances driven within the given sub-classes (eg: weather, temperature, road types...) was equal to the total distance, it's probably better to consider as a denominator the sum itself rather than the distance.  \nThis means, for instance, that the ratio of distance driven with sunny weather will be computed as:  \n  \nweather_sunny_ratio = weather_sunny \/ (weather_sunny + weather_cloudy + weather_rainy + weather_snowy)\n  \nRather than:\n\nweather_sunny_ratio = weather_sunny \/ distance\n\n\nLet us proceed with the creation of the new variables.","d253a05c":"Whenever a trip is built into the system, the algorithm checks the fuel recorded measurament against the *expected* fuel consumption. The latter is given by the car mixed \/ urban \/ highway average consumption (expressed in liters per km) times the distance driven (km) within each road class. If the ratio of the two measures (**recorded fuel** \/ **expected fuel**) is outside some pre-determined boundaries (generally, above 1.6 or below 0.667), then the expected (i.e. *normalized*) fuel is considered as the final measurament. This is done to avoid extreme fuel recordings due to, for instance, malfunctioning of the technical instruments.  \nAs shown below, this is a quite common procedure, as it happens in almost half of the analyzed trips (42529 out of 89099). ","b6a3ec47":"Now that all erroneous labels have been corrected, we might want to proceed to encode them, turning them into numerical attributes. We can do this using Scikit-Learn's One Hot Encoder, which creates a dummy variable for each class of a categorical attribute.","ec63340c":"### Cars","21ea2d0d":"## 3. <a name=\"3\">Original Fuel and Normalized Fuel<\/a>","5f0997b7":"We can presumably remove the trip date, as conditions which could be depending on the time of the year (weather and temperature) are already taken into account. Alternatively, we could categorize it into months or seasons.","986fc924":"### Outliers, scaling & other transformations\n\nThe scales of the numerical variables are quite different: we might want to consider scaling.","3728772f":"We now have no missing values left. We can remove the car ID from the dataframe, as it's no longer necessary:"}}