{"cell_type":{"fa17dd99":"code","de0166ca":"code","6c902cee":"code","29c646a6":"code","2b03e099":"code","1a2be08f":"code","fe98c47b":"code","f166d462":"markdown"},"source":{"fa17dd99":"!git clone https:\/\/github.com\/google\/automl.git\nimport sys\nsys.path.insert(0,'\/kaggle\/working\/automl\/efficientnetv2')","de0166ca":"from kaggle_datasets import KaggleDatasets\nimport tensorflow as tf\nimport effnetv2_model","6c902cee":"# CKPT_PATH = KaggleDatasets().get_gcs_path('efficientnetv2-pretrained-models')\ndef get_model(net_input, load_weights=True):\n    if load_weights:\n        net = effnetv2_model.get_model('efficientnetv2-l', include_top=True,\n                                       weights='imagenet21k-ft1k')\n    else:\n        net = effnetv2_model.get_model('efficientnetv2-l', include_top=True,\n                                       weights=False)\n    net.__setattr__('build', net.call)\n    return net\n","29c646a6":"image_size = 480\ninput_x = tf.keras.layers.Input(shape=(image_size, image_size, 3))\neffnet = get_model(input_x)\n\nmodel = tf.keras.Sequential([\n            input_x,\n            effnet])\neffnet.build(input_x, True)\n\n# blocks_59\nbranch_x = effnet.get_layer('blocks_59').output\n\nbranch_x = tf.keras.layers.GlobalAveragePooling2D()(branch_x)\nbranch_x = tf.keras.layers.Dense(1000, activation='sigmoid',\n                                 kernel_regularizer=tf.keras.regularizers.L2(1e-5), dtype=tf.float32)(branch_x)\n\nmodel = tf.keras.Model(inputs=model.input, outputs=[model.output, branch_x])","2b03e099":"model.summary()","1a2be08f":"labels_map = '\/tmp\/labels_map.txt'\nimage_file = '\/tmp\/panda.jpg'\ntf.keras.utils.get_file(image_file, 'https:\/\/upload.wikimedia.org\/wikipedia\/commons\/f\/fe\/Giant_Panda_in_Beijing_Zoo_1.JPG')\ntf.keras.utils.get_file(labels_map, 'https:\/\/storage.googleapis.com\/cloud-tpu-checkpoints\/efficientnet\/eval_data\/labels_map.txt')\nimage = tf.keras.preprocessing.image.load_img(image_file, target_size=(image_size, image_size))\nimage = tf.keras.preprocessing.image.img_to_array(image)\nimage = (image - 128.) \/ 128.","fe98c47b":"@tf.function\ndef predict(img):\n    logits = model(tf.expand_dims(img, 0), False)[0]\n    return logits\n\nlogdir='.\/logs'\nwriter = tf.summary.create_file_writer(logdir)\ntf.summary.trace_on(graph=True, profiler=True)\nlogits = predict(image)\n# Output classes and probability\npred = tf.keras.layers.Softmax()(logits)\nidx = tf.argsort(logits[0])[::-1][:5].numpy()\nimport ast\nclasses = ast.literal_eval(open(labels_map, \"r\").read())\nfor i, id in enumerate(idx):\n    print(f'top {i+1} ({pred[0][id]*100:.1f}%):  {classes[id]} ')","f166d462":"# Create EfficientNetV2"}}