{"cell_type":{"a8cfc2dc":"code","98db39a1":"code","99942ae5":"code","e3f81a64":"code","ec325e12":"code","ef8fd47f":"code","ae3526d1":"code","2651abbc":"code","1a5a1965":"code","d4484491":"code","3e78c04a":"code","eb5a8a90":"code","e91c3cc5":"code","94662e54":"code","29a60614":"code","77891d81":"code","5dd55509":"code","ee24ff1b":"code","640111c4":"code","c63bd570":"code","fc2736f2":"code","37b188b1":"code","63425e29":"code","54281c69":"code","8ff5a458":"code","b7e2a3ed":"code","c0213a41":"code","9dfd30ad":"code","c0d7745a":"markdown","011b175a":"markdown"},"source":{"a8cfc2dc":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","98db39a1":"import time,os,json\nimport numpy as np\nimport pandas as pd\nimport seaborn as sns\nfrom tqdm import tqdm_notebook as tqdm\nimport matplotlib.pyplot as plt\n\n%matplotlib inline\n%config InlineBackend.figure_format = 'retina'\nplt.style.use('ggplot') # random state\nSEED=100\ntime_start_notebook = time.time()\nhome = os.path.expanduser('~')\n[(x.__name__,x.__version__) for x in [np,pd,sns]]","99942ae5":"test=pd.read_csv('\/kaggle\/input\/widsdatathon2021\/UnlabeledWiDS2021.csv')\ndf=pd.read_csv('\/kaggle\/input\/cleaned-train-and-test-data-set-for-analysis\/cleaned_train.csv')","e3f81a64":"test_copy=test.copy()","ec325e12":"\ndf.columns","ef8fd47f":"from sklearn.model_selection import train_test_split\n\ntarget = 'diabetes_mellitus'\n\ndf_Xtrain, df_Xtest, ser_ytrain, ser_ytest = train_test_split(\n    df.drop(target,axis=1), df[target],\n    test_size=0.2, random_state=SEED, stratify=df[target])\n\nytrain = ser_ytrain.to_numpy().ravel()\nytest = ser_ytest.to_numpy().ravel()\n\nfeatures_train = df_Xtrain.columns.to_list()\nfeatures_train","ae3526d1":"df.hist(figsize=(20,30)) ","2651abbc":"corr= df.corr()\nsns.heatmap(corr)","1a5a1965":"import xgboost as xgb\nfrom xgboost import XGBClassifier\nclf_xgb = XGBClassifier(objective= 'binary:logistic', random_state=SEED,n_jobs=-1)\nclf_xgb","d4484491":"clf_xgb.fit(df_Xtrain, ser_ytrain)","3e78c04a":"ypreds = clf_xgb.predict(df_Xtest)","eb5a8a90":"# feature importance\nfig,ax = plt.subplots(figsize=(12,8))\nxgb.plot_importance(clf_xgb,ax=ax,max_num_features=30,importance_type='gain')\nplt.show()","e91c3cc5":"df_imp = pd.DataFrame({'feature': features_train,\n                      'importance': clf_xgb.feature_importances_})\n\ndf_imp.sort_values('importance', ascending=False)\\\n  .head(20).style.background_gradient(subset=['importance'])","94662e54":"df_imp.sort_values('importance', ascending=False)\\\n  .head(20).style.bar(subset=['importance'],align='mid',color='pink')","29a60614":"    !pip install -U watermark\n    !pip install -U xgboost\n    !pip install -U eli5\n    !pip install -U shap\n    !pip install -U pdpbox\n    !pip install -U yellowbrick\n    !pip install -U lime\n    !pip install -U explainerdashboard","77891d81":"from yellowbrick.model_selection import FeatureImportances\nplt.figure(figsize=(8,24))\nviz = FeatureImportances(clf_xgb,colormap='hot_r')\nviz.fit(df_Xtrain, ytrain)\nviz.show()","5dd55509":"import eli5\nfrom eli5.sklearn import PermutationImportance\nperm = PermutationImportance(clf_xgb).fit(df_Xtest, ser_ytest)\neli5.show_weights(perm, feature_names = df_Xtrain.columns.tolist(), top=50)","ee24ff1b":"eli5.explain_weights_df(perm, feature_names=features_train)\\\n  .head(10).style.background_gradient(subset=['weight'])","640111c4":"eli5.show_prediction(clf_xgb, df_Xtest.iloc[0,:],show_feature_values=True)","c63bd570":"import shap","fc2736f2":"explainer = shap.TreeExplainer(clf_xgb)\nshap_values = explainer.shap_values(df_Xtest)\nshap.summary_plot(shap_values,df_Xtest)\nshap.summary_plot(shap_values,df_Xtest, plot_type='bar')","37b188b1":"shap.initjs()\nidx = 0\nshap.force_plot(explainer.expected_value,\n                shap_values[idx,:],\n                df_Xtest.iloc[idx,:],\n                matplotlib=False,\n                text_rotation=90)\n","63425e29":"shap.initjs()\nNUM = 100\nshap.force_plot(explainer.expected_value, shap_values[:NUM,:],\n                df_Xtest.iloc[:NUM,:],matplotlib=False)","54281c69":"import pprint\nmax_display = 30\ndf_shap = pd.DataFrame(shap_values, columns = df_Xtrain.columns)\ndf_fimp = df_shap.abs().mean(axis = 0).sort_values(ascending = False)\n\nprint(df_fimp.head(max_display))","8ff5a458":"dict_shap = (df_fimp.round(3).iloc[:max_display].to_dict())\n\nnum_subplots = len(dict_shap)\nfor i,v in enumerate(dict_shap):\n    plt.figure(num=None, figsize=(8, 3*num_subplots),\n               dpi=80, facecolor='w', edgecolor='k');\n    ax1 = plt.subplot(num_subplots,1,i+1);\n    \n    title = f\"Dependency Plot for {v.title()}\"\n    title += f\" Abs mean Shapeley value = {dict_shap[v]:.2f}\"\n    \n    ax1.set_title(title);\n    shap.dependence_plot(v, shap_values, df_Xtest, ax = ax1)\n\n    plt.tight_layout()\n    plt.show()","b7e2a3ed":"N = 10\ndf_top_ytrain = ser_ytrain.reset_index().sort_values('diabetes_mellitus',ascending=False)\\\n                           .head(N).reset_index(drop=True)\ndf_top_ytrain","c0213a41":"\nshap.initjs()\nfor i,v in df_top_ytrain.iterrows():\n    case, result = v.to_numpy()\n    print(\"CASE {} - Test for Diabetes \".format(case))\n    \n    # plot force plot\n    display(shap.force_plot(explainer.expected_value,\n                        shap_values[i,:],\n                        df_Xtest.iloc[i,:]))","9dfd30ad":"x_test=test.values\n\ny_pred=clf_xgb.predict_proba(df_Xtest)\n\ny_pred","c0d7745a":"## References :- \n\nhttps:\/\/github.com\/slundberg\/shap\n\nhttps:\/\/eli5.readthedocs.io\/en\/latest\/overview.html\n\nhttps:\/\/www.scikit-yb.org\/en\/latest\/","011b175a":"## The dataset is cleaned and uploaded from the local by removing missing value for the diabetes prediction "}}