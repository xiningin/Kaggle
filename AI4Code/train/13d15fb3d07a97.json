{"cell_type":{"b7616598":"code","10ef8a19":"code","009abf51":"code","bc466f17":"code","d623ed88":"code","9667e15b":"code","f766b88e":"code","5cf93a1e":"code","cd585503":"code","267e9766":"code","25f28b70":"code","f7ea5671":"code","fae78bc5":"code","97ca2e23":"code","ed1d9604":"code","0bb17257":"code","da28c809":"code","b69d6a3e":"code","8110a189":"code","6cfd901c":"code","37c00866":"code","f4b4f557":"code","46b6e8c0":"code","e8131c76":"code","ce17d997":"code","4e14aa1d":"code","d641b855":"code","a7b45340":"code","df0c6efb":"code","98f1e6c0":"code","92f19b29":"code","2c6d1387":"code","7e63915e":"code","7f4c7a2a":"code","191557fc":"code","2416b821":"code","a725eed2":"code","7be252bb":"code","b9490099":"code","a1ea0381":"code","1cb701da":"code","8e70470a":"code","4d1f1002":"code","7d2029f1":"code","03594f40":"code","2291428d":"code","d075a5e6":"code","aab4f660":"code","f4e64489":"code","9a2dec4e":"code","fa138c01":"code","7497188f":"code","194b41fa":"code","a30db10c":"code","8ba993b3":"code","c83aeae9":"code","98e59cea":"code","b89d43ed":"code","2ab3b30e":"code","fc15d9b9":"code","768fc5e7":"markdown","e497a444":"markdown","3696ebe7":"markdown","41c83074":"markdown","a20916f3":"markdown","cf40411f":"markdown","4a89cc8e":"markdown","3452fb70":"markdown","1122b690":"markdown","9bfbf2b7":"markdown","ecbc41e0":"markdown","08011c81":"markdown","c04a3ae8":"markdown","fee702cb":"markdown","abc30432":"markdown","b5203bd3":"markdown","c7c35ea4":"markdown","7d20f29f":"markdown","a7a7fd88":"markdown","fae324d4":"markdown","e4a9a00a":"markdown","4ae428e5":"markdown","3505a68a":"markdown","a2fb1de1":"markdown","ee347c10":"markdown","ed16cc5b":"markdown","4eb76abb":"markdown"},"source":{"b7616598":"import os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))","10ef8a19":"#Importing Libararies\nimport pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns","009abf51":"#Reading data into Pandas Dataframe\ndata = pd.read_csv(\"\/kaggle\/input\/company-bankruptcy-prediction\/data.csv\")","bc466f17":"pd.options.display.max_columns=100\npd.options.display.max_rows=100\npd.set_option('display.float_format','{:.2f}'.format)","d623ed88":"data.head()","9667e15b":"data.info()","f766b88e":"data.describe().T","5cf93a1e":"#Check for Missing Values\nplt.figure(figsize=(16,12))\nsns.heatmap(data.isnull(), cmap = 'magma')","cd585503":"#Check if there are any duplicate rows\ndata.duplicated(keep=False).sum()","267e9766":"df_col = []\nfor i in range(len(data.columns)):\n    df_col.append(str(data.columns[i]).strip())  \n\ndata.columns = df_col","25f28b70":"data['Net Income Flag'].value_counts()","f7ea5671":"data.drop(['Net Income Flag'], axis = 1, inplace = True)","fae78bc5":"#Check if the data is balanced\ndata['Bankrupt?'].value_counts()","97ca2e23":"corr_mat = data.corr()","ed1d9604":"corr_mat = corr_mat.iloc[1:,1:]","0bb17257":"drop_list = []\nfor i in range(len(corr_mat.columns)):\n    for j in range(i):\n        if(corr_mat.iloc[i,j] >= 0.95 or corr_mat.iloc[i,j] <= -0.95):\n            if corr_mat.columns[j] not in drop_list:\n                drop_list.append(corr_mat.columns[j])            ","da28c809":"len(drop_list)","b69d6a3e":"data = data.drop(drop_list, axis = 1)","8110a189":"len(data.columns)","6cfd901c":"#Data Preparation\ny = data['Bankrupt?']\nX = data.drop(['Bankrupt?'], axis = 1)","37c00866":"#Importing Libraries\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.svm import SVC\nfrom sklearn.metrics import classification_report, confusion_matrix","f4b4f557":"from imblearn.over_sampling import SMOTE","46b6e8c0":"smote = SMOTE(sampling_strategy='minority')\nX_sm, y_sm = smote.fit_resample(X,y)\ny_sm.value_counts()","e8131c76":"X_train, X_test, y_train, y_test = train_test_split(X_sm, y_sm, test_size=0.2, random_state = 101, stratify = y_sm)","ce17d997":"#Data Normalization\nscaler = StandardScaler()\nX_train = scaler.fit_transform(X_train)\nX_test = scaler.transform(X_test)","4e14aa1d":"from sklearn.model_selection import GridSearchCV","d641b855":"model_params = {\n    'svm': {\n        'model': SVC(gamma='auto',probability=True),\n        'params' : {\n            'C': [1,10,20],\n            'kernel': ['rbf','linear','sigmoid']\n        }  \n    },\n    'random_forest': {\n        'model': RandomForestClassifier(),\n        'params' : {\n            'n_estimators': [1,5,10,20,30,50],\n            'criterion':['gini','entropy']\n        }\n    },\n    'logistic_regression' : {\n        'model': LogisticRegression(multi_class='auto'),\n        'params': {\n            'C': [1,5,10],\n            'solver':['lbfgs','liblinear']\n        }\n    },\n   'KNN': {\n        'model':KNeighborsClassifier(),\n        'params':{\n            'n_neighbors' : [1,3,5,7],\n            'algorithm':['auto','kd_tree']\n        }\n    }\n}","a7b45340":"scaler = StandardScaler()\nX_scaled = scaler.fit_transform(X_sm)","df0c6efb":"scores = []\n\nfor model_name, mp in model_params.items():\n    clf =  GridSearchCV(mp['model'], mp['params'], cv=3, verbose=3, n_jobs=-1, scoring = 'recall', return_train_score=False)\n    clf.fit(X_scaled, y_sm)\n    scores.append({\n        'model': model_name,\n        'best_score': clf.best_score_,\n        'best_params': clf.best_params_\n    })\n    \ndf = pd.DataFrame(scores,columns=['model','best_score','best_params'])\ndf","98f1e6c0":"model_svm = SVC(gamma='auto',C=20, kernel='rbf', probability=True )\nmodel_svm.fit(X_train,y_train)\nsvm_predictions = model_svm.predict(X_test)","92f19b29":"#Printing Confusion Matrix\npd.DataFrame(confusion_matrix(y_test,svm_predictions))\n","2c6d1387":"print(classification_report(y_test,svm_predictions))","7e63915e":"rfc = RandomForestClassifier(n_estimators=50, criterion='entropy' )\nrfc.fit(X_train, y_train)\nrfc_pred = rfc.predict(X_test)","7f4c7a2a":"#Printing Confusion Matrix\npd.DataFrame(confusion_matrix(y_test,rfc_pred))\n","191557fc":"print(classification_report(y_test,rfc_pred))","2416b821":"logmodel = LogisticRegression(solver='liblinear',multi_class='auto', C = 5)\nlogmodel.fit(X_train,y_train)\nlog_predictions = logmodel.predict(X_test)","a725eed2":"# Printing Confusion Matrix\npd.DataFrame(confusion_matrix(y_test,log_predictions))","7be252bb":"#Printing Classification Report\nprint(classification_report(y_test,log_predictions))\n","b9490099":"knn = KNeighborsClassifier(n_neighbors=3,algorithm = 'auto')\nknn.fit(X_train,y_train)\nknn_pred = knn.predict(X_test)","a1ea0381":"# Printing Confusion Matrix\npd.DataFrame(confusion_matrix(y_test,knn_pred))","1cb701da":"print(classification_report(y_test,knn_pred))","8e70470a":"from sklearn.metrics import roc_curve, auc","4d1f1002":"y_pred_logistic = logmodel.predict_proba(X_test)[:,1]\nlogistic_fpr, logistic_tpr, threshold = roc_curve(y_test, y_pred_logistic)\nauc_logistic = auc(logistic_fpr, logistic_tpr)","7d2029f1":"y_pred_rfc = rfc.predict_proba(X_test)[:,1]\nrfc_fpr, rfc_tpr, threshold = roc_curve(y_test, y_pred_rfc)\nauc_rfc = auc(rfc_fpr, rfc_tpr)","03594f40":"y_pred_svm = model_svm.predict_proba(X_test)[:,1]\nsvm_fpr, svm_tpr, threshold = roc_curve(y_test, y_pred_svm)\nauc_svm = auc(svm_fpr, svm_tpr)","2291428d":"y_pred_knn = knn.predict_proba(X_test)[:,1]\nknn_fpr, knn_tpr, threshold = roc_curve(y_test, y_pred_knn)\nauc_knn = auc(knn_fpr, knn_tpr)","d075a5e6":"plt.figure(figsize=(5, 5), dpi=100)\nplt.plot([0, 1], [0, 1], 'k--')\nplt.plot(rfc_fpr, rfc_tpr, linestyle='-', label='RFC (auc = %0.3f)' % auc_rfc)\nplt.plot(logistic_fpr, logistic_tpr, marker='.', label='Logistic (auc = %0.3f)' % auc_logistic)\nplt.plot(svm_fpr, svm_tpr, marker='+', label='SVM (auc = %0.3f)' % auc_svm)\nplt.plot(knn_fpr, knn_tpr, linestyle='-', label='KNN (auc = %0.3f)' % auc_knn)\n\n\nplt.xlabel('False Positive Rate')\nplt.ylabel('True Positive Rate')\n\nplt.legend(loc='best')","aab4f660":"#Importing Libraries\nimport tensorflow as tf\nfrom tensorflow.keras.models import Sequential\nfrom tensorflow.keras.layers import Dense, Activation,Dropout\nfrom tensorflow.keras.callbacks import EarlyStopping","f4e64489":"#Converting to numpy array\ny_train = y_train.values\ny_test = y_test.values","9a2dec4e":"\nmodel = Sequential()\n\nmodel.add(Dense(units=77,activation='relu'))\nmodel.add(Dropout(0.3))\n\nmodel.add(Dense(units=77,activation='relu'))\nmodel.add(Dropout(0.3))\n\nmodel.add(Dense(units=1,activation='sigmoid'))\n\nmodel.compile(loss='binary_crossentropy', optimizer='adam')","fa138c01":"early_stop = EarlyStopping(monitor='val_loss', mode='min', verbose=1, patience=50)","7497188f":"model.fit(x=X_train, \n          y=y_train, \n          epochs=600,\n          validation_data=(X_test, y_test), verbose=1,\n          callbacks=[early_stop]\n          )","194b41fa":"model_loss = pd.DataFrame(model.history.history)","a30db10c":"model_loss.plot()","8ba993b3":"ann_predictions = model.predict_classes(X_test)","c83aeae9":"#Printing Confusion Matrix\npd.DataFrame(confusion_matrix(y_test,ann_predictions))","98e59cea":"#Printing Classification Report\nprint(classification_report(y_test,ann_predictions))","b89d43ed":"model.predict_proba(X_test)[:,0]","2ab3b30e":"y_pred_dl = model.predict_proba(X_test)\ndl_fpr, dl_tpr, threshold = roc_curve(y_test, y_pred_dl)\nauc_dl = auc(dl_fpr, dl_tpr)","fc15d9b9":"plt.figure(figsize=(5, 5), dpi=100)\nplt.plot([0, 1], [0, 1], 'k--')\nplt.plot(rfc_fpr, rfc_tpr, linestyle='-', label='RFC (auc = %0.3f)' % auc_rfc)\nplt.plot(logistic_fpr, logistic_tpr, marker='.', label='Logistic (auc = %0.3f)' % auc_logistic)\nplt.plot(svm_fpr, svm_tpr, marker='+', label='SVM (auc = %0.3f)' % auc_svm)\nplt.plot(knn_fpr, knn_tpr, linestyle='-', label='KNN (auc = %0.3f)' % auc_knn)\nplt.plot(dl_fpr, dl_tpr, linestyle='-', label='Deep Learning (auc = %0.3f)' % auc_dl)\n\n\nplt.xlabel('False Positive Rate')\nplt.ylabel('True Positive Rate')\n\nplt.legend(loc='best')","768fc5e7":"# > Logistic Regression********","e497a444":"The above table provides us with the tuned parameters for each of the models. Now let's implement eatch of the models and explore their accuracy and recall","3696ebe7":"# > Balancing Data - SMOTE****","41c83074":"# > **Conclusion**\n\nPerformance of Deep learning model performance is at parwith Random Forest. We may emply Deep Learning model or Random Forest or SVM model to make decisions.","a20916f3":"**Now let's remove spaces from the begining and end of the column names**","cf40411f":"# > **Hyper Parameter Tuning - Grid Search CV**","4a89cc8e":"# Data Normalization****","3452fb70":"We will remove the column Net Income Flag since it has only single value.****","1122b690":"# Random Forest has accuracy of 98% and is able to identify accounts which can go brankrupt with alomost 100% accuracy.****","9bfbf2b7":"**ROC - SVM**","ecbc41e0":"**Implementing Grid Search CV for 4 models(SVM,Random Forest, Logistic Regression & K Nearest Neighbours)**","08011c81":"# **Multicollinearity-Check**\n\nCheck if there is perfect correlation between any of the columns. If the correlation is more than 0.95 or less than -0.95 then we would remove one of the columns to avoid multicollinearity in the data-set","c04a3ae8":"There are no missing values in the data","fee702cb":"> # ROC Curve and Area Under the Curve****","abc30432":"**ROC - Random Forest**","b5203bd3":"**ROC - KNN**","c7c35ea4":"**ROC - Plotting Graph**","7d20f29f":"**Accuracy of deep learning model is 99% while the recall is of almost 100%.**","a7a7fd88":"# > **ROC(With Deep Learning Results)**","fae324d4":"# > **Conclusion**\n\nPerforamnce of Random Forest Classifier and SVM is better than rest of the models. Hence we can rely on the outcome of the 2 models for making decision.","e4a9a00a":"There are no duplicate rows","4ae428e5":"# > Random Forest Classifier****","3505a68a":"**Data is highly imbalanced. We will be using SMOTE to use balanced data.**","a2fb1de1":"# > **SVM**","ee347c10":"# **SVM has high accuracy rate of 98%. Specifically, the model is able to predict the companies which can go bankcrupt with almost 100% accuracy.**","ed16cc5b":"> # Deep Learning****","4eb76abb":"**ROC - Logistic**"}}