{"cell_type":{"2512f13c":"code","7c0ef4f8":"code","b7093ef7":"code","93153f44":"code","59958b3c":"code","c17f1f97":"code","e8f79d48":"code","64d0aa71":"code","543ed127":"code","c85434fc":"code","197fdd13":"code","892d382b":"code","07f5e220":"code","326ee2b3":"code","880d97dc":"code","6941eee5":"code","20b21298":"code","4ba2d4d4":"code","16d679eb":"code","bb9558d6":"code","db25f1ae":"code","ba5101e5":"code","ff799da7":"code","0f249267":"code","be2e0b48":"markdown","9a3ee038":"markdown","499226c2":"markdown","4dd08e21":"markdown","1e448af2":"markdown"},"source":{"2512f13c":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport warnings\nwarnings.simplefilter(action='ignore', category=FutureWarning)\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))","7c0ef4f8":"### Importing Libraries or Packages that are needed throughout the Program ###\nimport numpy as np\nimport pandas as pd\nimport xgboost as xgb\nimport random\nimport datetime\nimport gc\nimport seaborn as sns \ncolor = sns.color_palette()\n\nimport sys\npd.options.display.max_columns = None\npd.options.mode.chained_assignment = None\npd.options.display.float_format\n\nfrom sklearn.model_selection import train_test_split\nimport matplotlib as mpl\nimport matplotlib.pyplot as plt\nimport matplotlib.pylab as pylab\n%matplotlib inline","b7093ef7":"train2016_df = pd.read_csv('\/kaggle\/input\/zillow-prize-1\/train_2016_v2.csv' , parse_dates=[\"transactiondate\"])\ntrain2017_df = pd.read_csv('\/kaggle\/input\/zillow-prize-1\/train_2017.csv' , parse_dates=[\"transactiondate\"])\n\nprop2016_df = pd.read_csv('\/kaggle\/input\/eda-v22-zillow\/properties_2016_proc.csv', index_col=0)\nprop2017_df = pd.read_csv('\/kaggle\/input\/eda-v22-zillow\/properties_2017_proc.csv', index_col=0)\ntest = pd.read_csv('\/kaggle\/input\/zillow-prize-1\/sample_submission.csv')\nprint(\"Training 2016 transaction: \" + str(train2016_df.shape))\nprint(\"Training 2017 transaction: \" + str(train2016_df.shape))\nprint(\"Number of Property 2016: \" + str(prop2016_df.shape))\nprint(\"Number of Property 2017: \" + str(prop2017_df.shape))\nprint(\"Sample Size: \" + str(test.shape))","93153f44":"prop2016_df.head()","59958b3c":"df_imp=prop2016_df[['latitude','longitude']]\nfrom sklearn import preprocessing\n\nx = df_imp #returns a numpy array\nmin_max_scaler = preprocessing.MinMaxScaler()\nx_scaled = min_max_scaler.fit_transform(x)\ndf = pd.DataFrame(x_scaled)","c17f1f97":"df.head()","e8f79d48":"# Choosing the optimal k\nfrom scipy.spatial.distance import cdist, pdist\nfrom sklearn.cluster import KMeans\n\nk_range = range(1,10)\n# Try clustering the data for k values ranging 1 to 10\nk_means_var = [KMeans(n_clusters = k).fit(df) for k in k_range]\ncentroids = [X.cluster_centers_ for X in k_means_var]\n\nk_euclid = [cdist(df, cent, 'euclidean') for cent in centroids]\ndist = [np.min(ke, axis=1) for ke in k_euclid]\n\n# Calculate within-cluster sum of squares\nwcss = [sum(d**2) for d in dist]\n\n# Visualize the elbow method for determining k\nimport matplotlib.pyplot as plt\nplt.plot(k_range, wcss)\nplt.xlabel('Range of k')\nplt.ylabel('RSS within cluster')\nplt.title('plot of Lattitude V\/S Longtitude')\nplt.show()","64d0aa71":"kmeans = KMeans(n_clusters=4, random_state=0).fit(df)\nlabels = kmeans.labels_\n#Glue back to originaal data\ndf['clusters'] = labels\ndf2 = df.rename(columns = {0 : 'Lattitude', 1: 'Longtitude'})\n#Add the column into our list","543ed127":"sns.lmplot('Lattitude', 'Longtitude', data = df2, fit_reg=False,hue=\"clusters\",  scatter_kws={\"marker\": \"D\", \"s\": 100})\nplt.title('Lattitude v\/s Longtitude')\nplt.xlabel('Lattitude')\nplt.ylabel('Longtitude')\nplt.show()","c85434fc":"del kmeans, df, df2, wcss, dist\ngc.collect()\nprint('Memory usage reduction\u2026')","197fdd13":"train_2016 = train2016_df.merge(prop2016_df, how='left', on='parcelid')\ntrain_2017 = train2016_df.merge(prop2017_df, how='left', on='parcelid')\ntrain = pd.concat([train_2016, train_2017], axis=0, ignore_index=True)","892d382b":"catvars = ['airconditioningtypeid','buildingqualitytypeid',\n           'decktypeid','fips','hashottuborspa', 'fireplaceflag','heatingorsystemtypeid','yearbuilt',\n           'taxdelinquencyflag', 'assessmentyear']\n\n#numvars = [i for i in prop2016_df.columns if i not in catvars]\n#print (\"C\u00f3 {} numeric v\u00e0 {} categorical columns\".format(len(numvars),len(catvars)))\n\n# Some variables take on very many categorical values. \n# For the sake of this exercise, we'll drop them.\ncols_to_drop = [\n    'location_1', 'location_2', 'location_3', 'location_4',\n    'rawcensustractandblock',\n    'propertycountylandusecode',\n    'propertylandusetypeid',\n    'propertyzoningdesc',\n    'regionidzip',\n]\n\n# Dropping selected columns\ndf_known = train.drop(cols_to_drop, axis=1)\n\n# Re-encoding categorical variables\ndf_known_cat = pd.get_dummies(df_known, columns=catvars)\n\ndf_known_cat = df_known_cat.drop('transactiondate', axis=1)","07f5e220":"dtype_df = df_known_cat.dtypes.reset_index()\ndtype_df.columns = ['Count', 'Column type']\ndtype_df.groupby('Column type').aggregate('count').reset_index()","326ee2b3":"from scipy.cluster import hierarchy as hc\nimport scipy\ncorr = np.round(scipy.stats.spearmanr(df_known).correlation, 4)\ncorr_condensed = hc.distance.squareform(1-corr)\nz = hc.linkage(corr_condensed, method='average')\nfig = plt.figure(figsize=(16,8))\ndendrogram = hc.dendrogram(z, labels=df_known.columns, orientation='left', leaf_font_size=16)\nplt.show()","880d97dc":"df_known_cat.head()","6941eee5":"# Creating our variables and targets\nX = df_known_cat.drop([\"logerror\", \"parcelid\"], axis=1)\ny = df_known_cat[\"logerror\"]\n\n# Randomly splitting into a training and a validation set\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.33, random_state=0)","20b21298":"#del properties, train,test\ngc.collect()\nprint('Memory usage reduction\u2026')","4ba2d4d4":"from sklearn.preprocessing import LabelEncoder\nlbl = LabelEncoder()\n\n# Dropping selected columns\nprop_2016_known = prop2016_df.drop(cols_to_drop, axis=1)\n# Re-encoding categorical variables\nprop_2016_known_cat = pd.get_dummies(prop_2016_known, columns=catvars)\n\n# Dropping selected columns\nprop_2017_known = prop2017_df.drop(cols_to_drop, axis=1)\n# Re-encoding categorical variables\nprop_2017_known_cat = pd.get_dummies(prop_2017_known, columns=catvars)","16d679eb":"dtype_df = prop_2016_known_cat.dtypes.reset_index()\ndtype_df.columns = ['Count', 'Column type']\ndtype_df.groupby('Column type').aggregate('count').reset_index()","bb9558d6":"prop_2017_known_cat.head()","db25f1ae":"# Grid search\nfrom sklearn.model_selection import GridSearchCV\nfrom sklearn.metrics import r2_score\nfrom xgboost import XGBRegressor\n\nparams = {\n    'min_child_weight':[4,5],\n    'max_depth': range (2, 10, 1),\n    'n_estimators': range(60, 220, 40),\n    'learning_rate': [0.1, 0.01, 0.05],\n    'objective': ['reg:linear'],\n    'eval_metric': ['mae'],\n}\n\nX = df_known_cat.drop([\"parcelid\", \"logerror\"], axis=1)\nY = df_known_cat[\"logerror\"]\nX, X_Val, Y, Y_Val = train_test_split(X, Y)\n\n# Initialize XGB and GridSearch\nxgb = XGBRegressor(nthread=-1) \n\ngrid = GridSearchCV(xgb, params, cv = 3)\ngrid.fit(X, Y)\nbest_params = grid.best_params_\n\n# Print the r2 score\nprint(r2_score(Y_Val, grid.best_estimator_.predict(X_Val))) \nprint(\"\\n========================================================\")\nprint(\" Results from Grid Search \" )\nprint(\"========================================================\")    \nprint(\"\\n The best estimator across ALL searched params:\\n\", grid.best_estimator_)\nprint(\"\\n The best score across ALL searched params:\\n\", grid.best_score_)\nprint(\"\\n The best parameters across ALL searched params:\\n\", grid.best_params_)","ba5101e5":"%%time\n\n# Maximum number of trees we will collect\nnum_rounds = 300\n\n# Transforming our data into XGBoost's internal DMatrix structure\ndtrain = xgb.DMatrix(X_train, y_train)\ndvalid = xgb.DMatrix(X_test, y_test)\n\n# Training\nxgb_params = {\n    'min_child_weight':best_params['min_child_weight'],\n    'max_depth': best_params['max_depth'],\n    'n_estimators': best_params['n_estimators'],\n    'learning_rate': best_params['learning_rate'],\n    'objective': 'reg:linear',\n    'eval_metric': 'mae',\n}\n\n#xgb = XGBRegressor(nthread=-1)\nmodel = XGBRegressor(xgb_params,   # Training parameters\n                     num_rounds    # Max number of trees\n                    )\nmodel.fit(X_train,y_train)\n\n# Best score obtained\nprint(\"Best score: \", model.best_score)\nprint(\"Number iteration: \",model.best_iteration)\n\n\n# plot the important features #\nfig, ax = plt.subplots(figsize=(12,18))\nxgb.plot_importance(model, max_num_features=50, height=0.8, ax=ax)\nplt.show()","ff799da7":"def transform_test_features(features_2016, features_2017):\n    return features_2016.drop(['parcelid'], axis=1), features_2017.drop(['parcelid'], axis=1)\n\ndef predict_and_export(models, features_2016, features_2017, file_name):\n    # Construct DataFrame for prediction results\n    submission_2016 = pd.DataFrame()\n    submission_2017 = pd.DataFrame()\n    submission_2016['ParcelId'] = features_2016.parcelid\n    submission_2017['ParcelId'] = features_2017.parcelid\n    \n    test_features_2016, test_features_2017 = transform_test_features(features_2016, features_2017)\n    \n    pred_2016, pred_2017 = [], []\n    for i, model in enumerate(models):\n        print(\"Start model {} (2016)\".format(i))\n        pred_2016.append(model.predict(test_features_2016))\n        print(\"Start model {} (2017)\".format(i))\n        pred_2017.append(model.predict(test_features_2017))\n    \n    # Take average across all models\n    mean_pred_2016 = np.mean(pred_2016, axis=0)\n    mean_pred_2017 = np.mean(pred_2017, axis=0)\n    \n    submission_2016['201610'] = [float(format(x, '.4f')) for x in mean_pred_2016]\n    submission_2016['201611'] = submission_2016['201610']\n    submission_2016['201612'] = submission_2016['201610']\n\n    submission_2017['201710'] = [float(format(x, '.4f')) for x in mean_pred_2017]\n    submission_2017['201711'] = submission_2017['201710']\n    submission_2017['201712'] = submission_2017['201710']\n    \n    submission = submission_2016.merge(how='inner', right=submission_2017, on='ParcelId')\n    \n    print(\"Length of submission DataFrame: {}\".format(len(submission)))\n    print(\"Submission header:\")\n    print(submission.head())\n    submission.to_csv(file_name, index=False)\n    return submission, pred_2016, pred_2017 ","0f249267":"file_name = 'v8_xgboost_single.csv'\nsubmission, pred_2016, pred_2017 = predict_and_export([model], prop_2016_known_cat, prop_2017_known_cat, file_name)","be2e0b48":"# Load dataset","9a3ee038":"# Feature Engineering","499226c2":"Predicting the results","4dd08e21":"# To run Clustering of different features","1e448af2":"# Implement the Xgboost"}}