{"cell_type":{"cc6251b3":"code","0775bbc8":"code","dce379f7":"code","1ce8459e":"code","0f1daffb":"code","a33b1447":"code","0e089549":"code","2ffb99a6":"code","223453ee":"code","8fac573b":"code","4cb8287c":"code","d90c2d67":"code","1946cfbd":"code","94814808":"code","0b6f4cbc":"code","a79ce8d8":"code","763bb924":"code","b66b8cfd":"code","1f56ae16":"code","f299bfb9":"code","9021c135":"code","4976e3fb":"code","73708b9c":"code","b9197103":"code","a608fb01":"code","ece4f915":"code","0c0258f3":"code","d45096e5":"code","865090b8":"code","b1bb0b04":"code","f184bd37":"code","923d025c":"code","2437bb7d":"code","1010e104":"code","6d476d2f":"code","a7a8f74e":"code","74523a93":"code","0edf4d68":"code","9895fa06":"code","8fa072fd":"code","fa9eeba6":"code","8095fe36":"code","0600b2f2":"code","1fc2d1b6":"code","8752cff3":"code","5c081723":"code","65f2a3dc":"code","51686563":"code","e2fd265d":"code","0c9bf875":"code","716457ac":"code","85e8d924":"code","34d000e4":"code","48a5f0ef":"code","5349c90e":"code","7951025b":"code","8eaa6ec0":"code","de72d7a0":"code","09708ba0":"code","42bd9fa8":"code","cc6cd2c5":"code","53a53cce":"code","a8587374":"code","f964db6a":"code","19cb5c49":"code","215e248f":"code","73b33a9f":"code","469f27f4":"code","9eb405a2":"code","ec2dd254":"code","5353ef49":"code","93a88c18":"code","17082913":"code","b7254498":"code","8a7182b2":"code","c8e70974":"code","ef85e9b4":"code","da7ddeda":"code","a4cc0c8c":"code","1e7bde38":"code","709b5316":"code","93016c8c":"code","874d8aba":"code","83b89089":"code","44a5024e":"code","7896fcbf":"code","10748d35":"code","bde22ed9":"code","d88a3e46":"code","3cd37f13":"code","7bb922c0":"code","6b0e138a":"code","0e150710":"code","c3c8b643":"code","0360af7e":"code","dfc38992":"code","9c99d197":"code","9cec11a1":"code","b264787e":"code","f75b4b68":"code","2cfe6f16":"code","0456e075":"code","335e97c6":"code","abcdcdda":"code","7e381272":"code","c9a0ab8c":"code","be1a87cd":"code","c0d6cc24":"code","a66298c3":"code","a3779392":"code","85e492de":"code","bf1302e5":"code","906b321c":"code","b1fd6929":"code","59d6fb08":"code","66509818":"code","25a7f027":"code","2a69bd1f":"code","1938e947":"code","ae42ad37":"code","5fcc8b29":"code","f46be353":"code","97db87d2":"code","b4b9c5ff":"code","f710a104":"code","712bac99":"code","334f22d1":"code","5ec6e628":"markdown","d01c9a26":"markdown","4431d7d4":"markdown","f2101782":"markdown","55227b63":"markdown","4f683974":"markdown","6e869b78":"markdown","2815e0d1":"markdown","0e58dabe":"markdown","e02a9235":"markdown","48f2bbef":"markdown","e3e5b4f9":"markdown","99aad783":"markdown","dbffe194":"markdown","055c8fac":"markdown","9a8ffab8":"markdown","a321774a":"markdown","079d0e94":"markdown","bd7e2c0f":"markdown","d16fbf2f":"markdown","3f3f4f27":"markdown","5b6b99b5":"markdown","037a7d9c":"markdown","da4c3f35":"markdown","7a50138d":"markdown","b1ab1772":"markdown","2fbe2851":"markdown","9907f5ca":"markdown","b7fd898e":"markdown","4e5c5aad":"markdown","58160d69":"markdown","e5ba9aaf":"markdown","8bed3a49":"markdown","8f7a5174":"markdown","901bda60":"markdown","63b13c9e":"markdown","da73b209":"markdown","3335aaea":"markdown","1372e52d":"markdown","31a6849b":"markdown","a9518f9a":"markdown","dbce6ecc":"markdown","b03aacdf":"markdown","294942ec":"markdown","788d3e5d":"markdown","e6b93d02":"markdown","8ce7b5ba":"markdown","0332b3a4":"markdown","f309a411":"markdown","9b6f66fb":"markdown","efcf5743":"markdown","fa8c39bd":"markdown","bf71c71b":"markdown","ee3fce9b":"markdown","98002ca8":"markdown","6c57f70d":"markdown","8749014f":"markdown","23803086":"markdown","8b661663":"markdown","7fa9332c":"markdown","f7fb9faf":"markdown","bfd1941e":"markdown","f166cd2d":"markdown","94ff3b3d":"markdown","c0b46285":"markdown","cf65be19":"markdown","2df3f170":"markdown","4cb53a01":"markdown","2a3e05bb":"markdown","8f1a1057":"markdown","19a22c4c":"markdown","83cb4748":"markdown","be2dfcc6":"markdown","801c74a4":"markdown","77344921":"markdown","bdaaac34":"markdown","2c33515b":"markdown"},"source":{"cc6251b3":"import os\nimport numpy as np\nimport pandas as pd","0775bbc8":"# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session\n\n#\u042d\u0442\u043e\u0442 \u0431\u043b\u043e\u043a \u043d\u0443\u0436\u0435\u043d \u0442\u043e\u043b\u044c\u043a\u043e \u043d\u0430 Kaggle\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# #\u042d\u0442\u043e\u0442 \u0431\u043b\u043e\u043a \u043d\u0443\u0436\u0435\u043d \u0442\u043e\u043b\u044c\u043a\u043e \u043d\u0430 \u043b\u043e\u043a\u0430\u043b\u044c\u043d\u043e\u0439 \u043c\u0430\u0448\u0438\u043d\u0435\n# print(os.listdir('.\/data'))\n# PATH_to_file = '.\/data\/'","dce379f7":"import sys\nimport time\nfrom sklearn.model_selection import KFold\nfrom tqdm.notebook import tqdm\nfrom catboost import CatBoostRegressor","1ce8459e":"import matplotlib.pyplot as plt\nimport seaborn as sns\n\nfrom sklearn.feature_selection import f_regression, mutual_info_regression, f_classif, mutual_info_classif\nfrom sklearn.preprocessing import LabelEncoder, OneHotEncoder, StandardScaler, PolynomialFeatures\n\nfrom sklearn.model_selection import train_test_split, RandomizedSearchCV, GridSearchCV\nfrom sklearn.linear_model import LogisticRegression\nfrom pandas import Series\n\nfrom sklearn.metrics import mean_absolute_error, mean_squared_error \nfrom math import sqrt\n\nfrom sklearn.base import clone\nimport datetime\nfrom datetime import datetime, timedelta\nimport math\n\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.ensemble import BaggingRegressor\nfrom sklearn.tree import DecisionTreeRegressor\nfrom sklearn.ensemble import RandomForestRegressor, ExtraTreesRegressor\nfrom sklearn.ensemble import GradientBoostingRegressor, AdaBoostRegressor\nfrom pprint import pprint","0f1daffb":"#import ipython_exit\n#import helper_v31102020 as utils","a33b1447":"pd.set_option('display.max_columns', 50)\npd.set_option('max_colwidth', 200)","0e089549":"# \u0437\u0430\u0444\u0438\u043a\u0441\u0438\u0440\u0443\u0435\u043c \u0432\u0435\u0440\u0441\u0438\u044e \u043f\u0430\u043a\u0435\u0442\u043e\u0432, \u0447\u0442\u043e\u0431\u044b \u044d\u043a\u0441\u043f\u0435\u0440\u0438\u043c\u0435\u043d\u0442\u044b \u0431\u044b\u043b\u0438 \u0432\u043e\u0441\u043f\u0440\u043e\u0438\u0437\u0432\u043e\u0434\u0438\u043c\u044b:\n!pip freeze > requirements.txt","2ffb99a6":"RANDOM_SEED = 42","223453ee":"def mape(y_true, y_pred):\n    return np.mean(np.abs((y_pred-y_true)\/y_true))","8fac573b":"#\u042d\u0442\u043e\u0442 \u0431\u043b\u043e\u043a \u043d\u0443\u0436\u0435\u043d \u0442\u043e\u043b\u044c\u043a\u043e \u043d\u0430 Kaggle\nDIR_TEST = '..\/input\/sf-dst-car-price-prediction\/'\ntest = pd.read_csv(DIR_TEST + 'test.csv')\nsample_submission = pd.read_csv(DIR_TEST + 'sample_submission.csv')","4cb8287c":"# #\u042d\u0442\u043e\u0442 \u0431\u043b\u043e\u043a \u043d\u0443\u0436\u0435\u043d \u0442\u043e\u043b\u044c\u043a\u043e \u043d\u0430 \u043b\u043e\u043a\u0430\u043b\u044c\u043d\u043e\u0439 \u043c\u0430\u0448\u0438\u043d\u0435\n# test = pd.read_csv(PATH_to_file + 'test.csv')\n# sample_submission = pd.read_csv(PATH_to_file + 'sample_submission.csv')","d90c2d67":"test.sample(3)","1946cfbd":"test.info()","94814808":"for col in test.columns:\n    if col not in ['complectation_dict', 'equipment_dict', '\u0412\u043b\u0430\u0434\u0435\u043d\u0438\u0435', 'car_url', 'image']:\n        print(f'Column: {col}','\\n', test[col].value_counts()[:10], '\\n')","0b6f4cbc":"#\u042d\u0442\u043e\u0442 \u0431\u043b\u043e\u043a \u043d\u0443\u0436\u0435\u043d \u0442\u043e\u043b\u044c\u043a\u043e \u043d\u0430 Kaggle\nDIR_TRAIN = '..\/input\/car-price-prediction-train\/'\ntrain = pd.read_csv(DIR_TRAIN + 'train.csv')","a79ce8d8":"# # \u042d\u0442\u043e\u0442 \u0431\u043b\u043e\u043a \u043d\u0443\u0436\u0435\u043d \u043d\u0430 \u043b\u043e\u043a\u0430\u043b\u044c\u043d\u043e\u0439 \u043c\u0430\u0448\u0438\u043d\u0435\n# train = pd.read_csv(PATH_to_file + 'train.csv')","763bb924":"train.shape","b66b8cfd":"train.sample(3)","1f56ae16":"train.drop(['page'], axis=1, inplace=True)","f299bfb9":"train.info()","9021c135":"train['mileage'] = train['mileage'].apply(lambda x: int(x.replace(' ', '').replace('\u043a\u043c', '')))","4976e3fb":"num_fields = ['modelDate', 'productionDate', 'numberOfDoors', 'mileage']\nfor col in num_fields:\n    train[col] = train[col].astype('int64')","73708b9c":"train.info()","b9197103":"test_columns_to_drop = ['car_url', 'complectation_dict', 'description', 'image', 'model_info', 'super_gen',\n                        '\u0412\u043b\u0430\u0434\u0435\u043b\u044c\u0446\u044b', '\u0412\u043b\u0430\u0434\u0435\u043d\u0438\u0435', '\u041f\u0422\u0421', '\u041f\u0440\u0438\u0432\u043e\u0434', '\u0420\u0443\u043b\u044c', '\u0421\u043e\u0441\u0442\u043e\u044f\u043d\u0438\u0435', '\u0422\u0430\u043c\u043e\u0436\u043d\u044f', 'equipment_dict',\n                        'parsing_unixtime', 'priceCurrency', 'sell_id']\ndisplay(train.sample(3))\ndisplay(test.drop(test_columns_to_drop, axis=1).sample(3))","a608fb01":"display(test[test.brand=='BMW'].model_name.value_counts()[:10], train[train.brand=='BMW'].model_name.value_counts()[:10]) ","ece4f915":"# \u0412\u044b\u0440\u0435\u0437\u0430\u0435\u043c brand \u0432 train \u0438 \u043c\u0435\u043d\u044f\u0435\u043c \u043f\u0440\u043e\u043f\u0438\u0441\u043d\u044b\u0435 \u0431\u0443\u043a\u0432\u044b \u043d\u0430 \u0437\u0430\u0433\u043b\u0430\u0432\u043d\u044b\u0435 \ntrain['model_name'] = train['model_name'].apply(lambda x: (x.split(' ')[1]).upper())","0c0258f3":"# \u0411\u0435\u0440\u0435\u043c \u043f\u0435\u0440\u0432\u0443\u044e \u0447\u0430\u0441\u0442\u044c \u0434\u0432\u043e\u0439\u043d\u044b\u0445 \u043d\u0430\u0437\u0432\u0430\u043d\u0438\u0439\ntrain['model_name'] = train['model_name'].apply(lambda x: x.split('-')[0])\ntest['model_name'] = test['model_name'].apply(lambda x: x.split('_')[0])","d45096e5":"# \u0415\u0441\u043b\u0438 \u043c\u043e\u0434\u0435\u043b\u044c \u043d\u0430\u0447\u0438\u043d\u0430\u0435\u0442\u0441\u044f \u0441 \u0446\u0438\u0444\u0440\u044b, \u0431\u0435\u0440\u0435\u043c \u0442\u043e\u043b\u044c\u043a\u043e \u044d\u0442\u0443 \u0446\u0438\u0444\u0440\u0443 (\u0430\u043a\u0442\u0443\u0430\u043b\u044c\u043d\u043e \u0434\u043b\u044f BMW)\ntrain['model_name'] = train['model_name'].apply(lambda x: x[0] if str.isdigit(x[0]) else x)\ntest['model_name'] = test['model_name'].apply(lambda x: x[0] if str.isdigit(x[0]) else x)","865090b8":"# \u0423\u0431\u0438\u0440\u0430\u0435\u043c \u0434\u0440\u0443\u0433\u0438\u0435 \"\u043d\u0435\u0441\u0442\u0430\u043d\u0434\u0430\u0440\u0442\u043d\u044b\u0435\" \u0441\u0438\u043c\u0432\u043e\u043b\u044b\ntrain['model_name'] = train['model_name'].apply(lambda x: x.split('+')[0])\ntest['model_name'] = test['model_name'].apply(lambda x: x.split('+')[0])","b1bb0b04":"display(np.sort(test[test.brand == 'AUDI'].model_name.unique()),\n        np.sort(train[train.brand == 'AUDI'].model_name.unique()))","f184bd37":"euro = ['BMW', 'VOLKSWAGEN', 'MERCEDES', 'AUDI', 'SKODA', 'VOLVO']\ntrain['vendor'] = train['brand'].apply(lambda x: 'EUROPEAN' if x in euro else 'JAPANESE')","923d025c":"columns = ['bodyType', 'brand', 'color', 'fuelType', 'modelDate', 'model_name', 'numberOfDoors',\n           'productionDate', 'vehicleConfiguration', 'vehicleTransmission', 'engineDisplacement',\n           'enginePower', 'mileage', 'vendor']\ncars_train = train[columns].copy()\ncars_test = test[columns].copy()","2437bb7d":"cars_train.loc[:, 'sample'] = 1\ncars_test.loc[:, 'sample'] = 0\ncars = cars_train.append(cars_test, ignore_index=True, sort=False)","1010e104":"# \u0426\u0435\u043b\u0435\u0432\u0430\u044f \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u0430\u044f\ny = train['price']","6d476d2f":"cars.info()","a7a8f74e":"cars.sample(5)","74523a93":"# \u041a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0443\u043d\u0438\u043a\u0430\u043b\u044c\u043d\u044b\u0445 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0439 \u0443 \u044d\u0442\u0438\u0445 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u043e\u0432\nprint(cars['enginePower'].nunique(), cars['engineDisplacement'].nunique())","0edf4d68":"cars.engineDisplacement.unique()","9895fa06":"cars.engineDisplacement.value_counts()[:1]","8fa072fd":"# \u041d\u0435\u043f\u043e\u043b\u043d\u044b\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f \u0432 \"engineDisplacement\" \u0437\u0430\u043c\u0435\u043d\u0438\u043c \u041c\u041e\u0414\u041e\u0419 (2.0 LTR):\ncars['engineDisplacement'] = cars['engineDisplacement'].apply(lambda x: '2.0 LTR' if x == ' LTR' else x)","fa9eeba6":"# \u041f\u0440\u0435\u043e\u0431\u0440\u0430\u0437\u0443\u0435\u043c \u0432 \u0447\u0438\u0441\u043b\u043e\u0432\u043e\u0439:\ncars['engineDisplacement'] = cars['engineDisplacement'].apply \\\n                             (lambda x: int(x.split(' ')[0].replace('.', '')))","8095fe36":"cars.enginePower.unique()[:50]","0600b2f2":"cars['enginePower'] = cars['enginePower'].apply(lambda x: int(x.split(' ')[0]))","1fc2d1b6":"cars.info()","8752cff3":"# \u0421\u043f\u0438\u0441\u043a\u0438 \u0447\u0438\u0441\u043b\u043e\u0432\u044b\u0445 \u0438 \u043a\u0430\u0442\u0435\u0433\u043e\u0440\u0438\u0430\u043b\u044c\u043d\u044b\u0445 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u043e\u0432 \u0432 cars\nnum_f = ['modelDate', 'productionDate', 'mileage', 'enginePower', 'engineDisplacement']\ncat_f = ['bodyType', 'brand', 'color', 'fuelType', 'model_name', 'numberOfDoors', 'vehicleConfiguration',\n         'vehicleTransmission', 'vendor']","5c081723":"def analyse_numeric(df, column, bns=30):\n    '''\u0412\u0438\u0437\u0443\u0430\u043b\u0438\u0437\u0438\u0440\u0443\u0435\u0442 \u0440\u0430\u0441\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0438\u044f \u0447\u0438\u0441\u043b\u043e\u0432\u044b\u0445 \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u044b\u0445.\n       \u041f\u0440\u0438\u043d\u0438\u043c\u0430\u0435\u0442 \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u043e\u043c \u0441\u0442\u0440\u043e\u043a\u043e\u0432\u043e\u0435 \u043d\u0430\u0437\u0432\u0430\u043d\u0438\u0435 \u0441\u0442\u043e\u043b\u0431\u0446\u0430\n       \u041f\u0435\u0447\u0430\u0442\u0430\u0435\u0442 \u0440\u0430\u0437\u043b\u0438\u0447\u043d\u044b\u0435 \u0441\u0442\u0430\u0442\u0438\u0441\u0442\u0438\u0447\u0435\u0441\u043a\u0438\u0435 \u043f\u043e\u043a\u0430\u0437\u0430\u0442\u0435\u043b\u0438 \u0438 \u0441\u0442\u0440\u043e\u0438\u0442 \u0433\u0438\u0441\u0442\u043e\u0433\u0440\u0430\u043c\u043c\u0443'''\n    count = df[column].count()\n    mean = df[column].mean()\n    std = df[column].std()\n    median = df[column].median()\n    perc25 = df[column].quantile(0.25)\n    perc75 = df[column].quantile(0.75)\n    IQR = perc75 - perc25\n    range_min = df[column].min()\n    range_max = df[column].max()\n    margin = (range_max - range_min)\/10\n    range_start = range_min - margin\n    range_stop = range_max + margin\n    range_ = (range_start, range_stop)\n    outliers = df[column].loc[(df[column] < perc25 - 1.5*IQR) | (df[column] > perc75 + 1.5*IQR)]\n\n    print('\u041a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e: {}, \u0421\u0440\u0435\u0434\u043d\u0435\u0435: {:.3f}, \u0421\u0442\u0430\u043d\u0434\u0430\u0440\u0442\u043d\u043e\u0435 \u043e\u0442\u043a\u043b\u043e\u043d\u0435\u043d\u0438\u0435: {:.3f}.'.format(count, mean, std))\n    print('\u041c\u0438\u043d\u0438\u043c\u0443\u043c: {}, 25-\u0439 \u043f\u0435\u0440\u0446\u0435\u043d\u0442\u0438\u043b\u044c: {}, \u041c\u0435\u0434\u0438\u0430\u043d\u0430: {}, 75-\u0439 \u043f\u0435\u0440\u0446\u0435\u043d\u0442\u0438\u043b\u044c: {}, \u041c\u0430\u043a\u0441\u0438\u043c\u0443\u043c: {}, IQR: {}.'\n          .format(range_min, perc25, median, perc75, range_max, IQR))\n    print('\u041a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043f\u0440\u043e\u043f\u0443\u0441\u043a\u043e\u0432 \u0432 \u0441\u0442\u043e\u043b\u0431\u0446\u0435: ', pd.isnull(df[column]).sum())\n    print('\u0413\u0440\u0430\u043d\u0438\u0446\u044b \u0432\u044b\u0431\u0440\u043e\u0441\u043e\u0432: [{f}, {l}].'.format(f=perc25 - 1.5*IQR, l=perc75 + 1.5*IQR)\n          , '\u041a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0432\u044b\u0431\u0440\u043e\u0441\u043e\u0432: ', len(outliers))\n\n    fig = plt.figure()\n    fig.suptitle(column, fontsize=15)    \n    \n    df[column].loc[df[column].between(perc25 - 1.5*IQR, perc75 + 1.5*IQR)] \\\n                    .hist(bins = bns, range = range_, label = '\u0412 \u0433\u0440\u0430\u043d\u0438\u0446\u0430\u0445 \u0432\u044b\u0431\u0440\u043e\u0441\u043e\u0432')\n    outliers.hist(bins = bns, range = range_, label = '\u0412\u044b\u0431\u0440\u043e\u0441\u044b')\n    plt.legend()","65f2a3dc":"analyse_numeric(cars, 'modelDate')","51686563":"analyse_numeric(cars, 'productionDate')","e2fd265d":"analyse_numeric(cars, 'mileage')","0c9bf875":"analyse_numeric(cars, 'enginePower')","716457ac":"analyse_numeric(cars, 'engineDisplacement')","85e8d924":"# \u041f\u043e\u0441\u043c\u043e\u0442\u0440\u0438\u043c \u043a\u043e\u0440\u0440\u0435\u043b\u044f\u0446\u0438\u044e \u0447\u0438\u0441\u043b\u043e\u0432\u044b\u0445 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u043e\u0432\ncorrelation = cars[num_f].corr()\nplt.figure(figsize=(10, 6))\nsns.heatmap(correlation, annot=True, cmap='coolwarm')","34d000e4":"for col in cat_f:\n    print(col, cars[col].nunique(), '\\n', cars[col].value_counts()[:3], '\\n')","48a5f0ef":"cars['allroad'] = cars['vehicleConfiguration'].apply(lambda x: 1 if x.split('_')[0] == 'ALLROAD' else 0)\ncat_f.append('allroad')","5349c90e":"cars['luxury'] = cars['brand'].apply(lambda x: 1 if x in ['BMW','MERCEDES','LEXUS','INFINITI'] else 0)\ncat_f.append('luxury')","7951025b":"cars['model_age'] = cars['productionDate'] - cars['modelDate']\ncars['model_age'] = cars['model_age'].apply(lambda x: 0 if x < 0 else x)\ncars['km_per_year'] = (cars['mileage']\/(2021 - cars['productionDate'])).astype('int64')\nnum_f.append('model_age')\nnum_f.append('km_per_year')","8eaa6ec0":"analyse_numeric(cars, 'model_age')","de72d7a0":"analyse_numeric(cars, 'km_per_year')","09708ba0":"# \u0421\u043d\u043e\u0432\u0430 \u043f\u043e\u0441\u0442\u0440\u043e\u0438\u043c heatmap. \u0412\u0438\u0434\u0438\u043c, \u0447\u0442\u043e \u043d\u043e\u0432\u044b\u0435 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0438 \u043d\u0435 \u0438\u043c\u0435\u044e\u0442 \u0441\u0438\u043b\u044c\u043d\u044b\u0445 \u043a\u043e\u0440\u0440\u0435\u043b\u044f\u0446\u0438\u0439\ncorrelation = cars[num_f].corr()\nplt.figure(figsize=(10, 6))\nsns.heatmap(correlation, annot=True, cmap='coolwarm')","42bd9fa8":"# \u043f\u043e f_regression:\nimp_num = Series(f_regression(cars[cars['sample'] == 1][num_f], y)[0], index = num_f)\nimp_num.sort_values(inplace = True)\nimp_num.plot(kind = 'barh')","cc6cd2c5":"# \u043f\u043e f_classif:\nimp_num = Series(f_classif(cars[cars['sample'] == 1][num_f], y)[0], index = num_f)\nimp_num.sort_values(inplace = True)\nimp_num.plot(kind = 'barh')","53a53cce":"pf = PolynomialFeatures(3)\npoly_features = pf.fit_transform(cars[[ 'productionDate', 'enginePower']])\npoly = pd.DataFrame(poly_features).drop([0,1,2,3,4,6,8], axis = 1)\npoly.columns = ['date_power5', 'date_power7', 'date_power9']\n\nfor col in list(poly.columns):\n    col_max = poly[col].max()    \n    poly[col] = poly[col].apply(lambda x: int(round(100000*x\/col_max, 0)))\n    \ncars = pd.concat([cars, poly], axis=1)\nnum_f = num_f + list(poly.columns)","a8587374":"cars.sample(3)","f964db6a":"imp_num = Series(f_regression(cars[cars['sample'] == 1][num_f], y)[0], index = num_f)\nimp_num.sort_values(inplace = True)\nimp_num.plot(kind = 'barh')","19cb5c49":"imp_num = Series(f_classif(cars[cars['sample'] == 1][num_f], y)[0], index = num_f)\nimp_num.sort_values(inplace = True)\nimp_num.plot(kind = 'barh')","215e248f":"correlation = cars[num_f].corr()\nplt.figure(figsize=(10, 6))\nsns.heatmap(correlation, annot=True, cmap='coolwarm')","73b33a9f":"f_candidates_to_drop = ['modelDate', 'engineDisplacement', 'date_power5', 'date_power7', 'date_power9']\nnum_f_temp = [item for item in num_f if item not in f_candidates_to_drop]\nnum_f_temp","469f27f4":"correlation = cars.drop(f_candidates_to_drop, axis = 1)[num_f_temp].corr()\nplt.figure(figsize=(10, 6))\nsns.heatmap(correlation, annot=True, cmap='coolwarm')","9eb405a2":"cars.info()","ec2dd254":"# \u041a\u043e\u0434\u0438\u0440\u0443\u0435\u043c \u043a\u0430\u0442\u0435\u0433\u043e\u0440\u0438\u0430\u043b\u044c\u043d\u044b\u0435 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0438\nfor col in cat_f:\n    cars[col] = cars[col].astype('category').cat.codes","5353ef49":"X_train_test = cars.copy()\nX_train_test.head(3)","93a88c18":"# \u0420\u0430\u0437\u0434\u0435\u043b\u044f\u0435\u043c \u043e\u0431\u0440\u0430\u0442\u043d\u043e train \u0438 test\ntrain = X_train_test.query('sample == 1').drop(['sample'], axis=1)\ntest = X_train_test.query('sample == 0').drop(['sample'], axis=1)","17082913":"# \u0414\u0435\u043b\u0438\u043c train \u0434\u043b\u044f \u043e\u0431\u0443\u0447\u0435\u043d\u0438\u044f \u0438 \u043f\u0440\u043e\u0432\u0435\u0440\u043a\u0438 \u043c\u043e\u0434\u0435\u043b\u0435\u0439\nX_train, X_test, y_train, y_test = train_test_split(train, y, test_size=0.2, shuffle=True, random_state=RANDOM_SEED)","b7254498":"#\u041e\u043f\u0440\u0435\u0434\u0435\u043b\u0438\u043c \u0444\u0443\u043d\u043a\u0446\u0438\u044e \u0434\u043b\u044f \u0432\u044b\u0432\u043e\u0434\u0430 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0439 \u043c\u0435\u0442\u0440\u0438\u043a\ndef print_metrics(tst, prd):\n    print('MAPE: ', 100*mape(tst, prd), '%')\n    print('MAE:', mean_absolute_error(tst, prd))\n    print('MSE:', mean_squared_error(tst, prd))\n    print('RMSE:', sqrt(mean_squared_error(tst, prd)))","8a7182b2":"tmp_train = X_train.copy()\ntmp_train['price'] = y_train","c8e70974":"# \u041d\u0430\u0445\u043e\u0434\u0438\u043c median \u043f\u043e \u044d\u043a\u0437\u0435\u043c\u043f\u043b\u044f\u0440\u0430\u043c enginePower \u0432 \u0442\u0440\u0435\u0439\u043d\u0435 \u0438 \u0440\u0430\u0437\u043c\u0435\u0447\u0430\u0435\u043c \u0442\u0435\u0441\u0442\npredict = X_test['enginePower'].map(tmp_train.groupby('enginePower')['price'].median())\n\n#\u043e\u0446\u0435\u043d\u0438\u0432\u0430\u0435\u043c \u0442\u043e\u0447\u043d\u043e\u0441\u0442\u044c\nprint(f\"\u0422\u043e\u0447\u043d\u043e\u0441\u0442\u044c \u043d\u0430\u0438\u0432\u043d\u043e\u0439 \u043c\u043e\u0434\u0435\u043b\u0438 \u043f\u043e \u043c\u0435\u0442\u0440\u0438\u043a\u0435 MAPE: {(mape(y_test, predict.values))*100:0.2f}%\")","ef85e9b4":"rf = RandomForestRegressor(random_state=RANDOM_SEED)\n\nrf.fit(X_train, y_train)\npredict = rf.predict(X_test)\nprint_metrics(y_test, predict)","da7ddeda":"sample_submission.head(3)","a4cc0c8c":"test.head()","1e7bde38":"predict_submission = rf.predict(test)\nsample_submission['price'] = predict_submission\nsample_submission.to_csv('submission.csv', index=False)\nsample_submission.head(3)","709b5316":"rf_full = RandomForestRegressor(random_state=RANDOM_SEED)\n\nrf_full.fit(train, y)\npredict_submission = rf_full.predict(test)\nsample_submission['price'] = predict_submission\nsample_submission.to_csv('submission.csv', index=False)\nsample_submission.head(3)","93016c8c":"# !\u041b\u043e\u0433\u0430\u0440\u0438\u0444\u043c\u0438\u0440\u043e\u0432\u0430\u0440\u0438\u0435 \u0446\u0435\u043b\u0435\u0432\u043e\u0439 \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u043e\u0439 \u0443\u043b\u0443\u0447\u0448\u0430\u0435\u0442 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442 \u043d\u0430 20%!\ny_train = y_train.apply(lambda x: math.log(x))\n# y_test = y_test.apply(lambda x: math.log(x))\n# X_pred = test.values","874d8aba":"rf_log = RandomForestRegressor(random_state=RANDOM_SEED)\n\nrf_log.fit(X_train, y_train)\npredict = rf_log.predict(X_test)\npredict = np.exp(predict)\nprint_metrics(y_test, predict)","83b89089":"y_log = y.apply(lambda x: math.log(x)).values","44a5024e":"rf_log_full = RandomForestRegressor(random_state=RANDOM_SEED)\n\nrf_log_full.fit(train, y_log)\npredict_submission = rf_log_full.predict(test)\npredict_submission = np.exp(predict_submission)\nsample_submission['price'] = predict_submission\nsample_submission.to_csv('submission.csv', index=False)\nsample_submission.head(3)","7896fcbf":"print('\u041f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u044b \u043f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e:\\n')\npprint(rf_log.get_params())","10748d35":"# n_estimators = [int(x) for x in np.linspace(start = 200, stop = 2000, num = 10)]\n# max_features = ['auto', 'sqrt']\n# max_depth = [int(x) for x in np.linspace(10, 110, num = 11)]\n# max_depth.append(None)\n# min_samples_split = [2, 5, 10]\n# min_samples_leaf = [1, 2, 4]\n# bootstrap = [True, False]\n# random_grid = {'n_estimators': n_estimators,\n#                'max_features': max_features,\n#                'max_depth': max_depth,\n#                'min_samples_split': min_samples_split,\n#                'min_samples_leaf': min_samples_leaf,\n#                'bootstrap': bootstrap}","bde22ed9":"# rf = RandomForestRegressor()\n# rf_random = RandomizedSearchCV(estimator = rf, param_distributions = random_grid, n_iter = 100, cv = 3, verbose=2, random_state=RANDOM_SEED, n_jobs = -1)\n# rf_random.fit(X_train, y_train)","d88a3e46":"# rf_random.best_params_","3cd37f13":"rf_optim = RandomForestRegressor(random_state=RANDOM_SEED,\n                                 n_estimators=1800,#600\n                                 min_samples_split=10,\n                                 min_samples_leaf=1,\n                                 max_features='sqrt',\n                                 max_depth=30,#40\n                                 bootstrap=False)\nrf_optim.fit(X_train, y_train)\npredict = rf_optim.predict(X_test)\npredict = np.exp(predict)\nprint_metrics(y_test, predict)","7bb922c0":"predict_submission = rf_optim.predict(test)\npredict_submission = np.exp(predict_submission)\nsample_submission['price'] = predict_submission\nsample_submission.to_csv('submission.csv', index=False)\nsample_submission.head(3)","6b0e138a":"rf_optim_full = RandomForestRegressor(random_state=RANDOM_SEED,\n                                      n_estimators=1800,#600,\n                                      min_samples_split=10,\n                                      min_samples_leaf=1,\n                                      max_features='sqrt',\n                                      max_depth=30,#40\n                                      bootstrap=False)\n\nrf_optim_full.fit(train, y_log)\npredict_submission = rf_optim_full.predict(test)\npredict_submission = np.exp(predict_submission)\nsample_submission['price'] = predict_submission\nsample_submission.to_csv('submission.csv', index=False)\nsample_submission.head(3)","0e150710":"X = train.values\nX_pred = test.values","c3c8b643":"def rf_model(X_train, y_train):#(y_train, X_train, X_test, y_test)\n    model = RandomForestRegressor(random_state=RANDOM_SEED,\n                                  n_estimators=600,\n                                  min_samples_split=10,\n                                  min_samples_leaf=1,\n                                  max_features='sqrt',\n                                  max_depth=40,\n                                  bootstrap=False)\n    model.fit(X_train, y_train)\n    return(model)\n\nN_FOLDS = 5\nsubmissions = pd.DataFrame(0, columns=[\"sub_1\"], index=sample_submission.index) # \u043a\u0443\u0434\u0430 \u043f\u0438\u0448\u0435\u043c \u043f\u0440\u0435\u0434\u0438\u043a\u0442\u044b\nscore_ls = []\nsplits = list(KFold(n_splits=N_FOLDS, shuffle=True, random_state=RANDOM_SEED).split(X,y))\n\nfor idx, (train_idx, test_idx) in tqdm(enumerate(splits), total=N_FOLDS,):\n    # use the indexes to extract the folds in the train and validation data\n    Xf_train, yf_train, Xf_test, yf_test = X[train_idx], y[train_idx], X[test_idx], y[test_idx]\n    # model for this fold\n    yf_train = yf_train.apply(lambda x: math.log(x))\n    model = rf_model(Xf_train, yf_train)\n    # score model on test\n    test_predict = model.predict(Xf_test)\n    test_predict = np.exp(test_predict)\n    test_score = mape(yf_test, test_predict)\n    score_ls.append(test_score)\n    print(f\"{idx+1} Fold Test MAPE: {mape(yf_test, test_predict)*100:0.4f}%\")\n    # submissions\n    submissions[f'sub_{idx+1}'] = model.predict(test.values)\n#    model.save_model(f'catboost_fold_{idx+1}.model')\n    \nprint(f'Mean Score: {np.mean(score_ls)*100:0.5f}%')\nprint(f'Std Score: {np.std(score_ls)*100:0.5f}%')\nprint(f'Max Score: {np.max(score_ls)*100:0.5f}%')\nprint(f'Min Score: {np.min(score_ls)*100:0.5f}%')","0360af7e":"ITERATIONS = 20000\nLR         = 0.15\nmodel = CatBoostRegressor(iterations = ITERATIONS,\n                          learning_rate = LR,\n                          depth = 8,\n                          random_seed = RANDOM_SEED,\n                          eval_metric='MAPE',\n                          custom_metric=['RMSE'])\ny_test_log = y_test.apply(lambda x: math.log(x))\nmodel.fit(X_train, y_train,\n#         cat_features=cat_f,\n         eval_set=(X_test, y_test_log),\n         verbose_eval=500,\n         use_best_model=True,\n         plot=True)","dfc38992":"predict = model.predict(X_test)\npredict = np.exp(predict)\n# \u043e\u0446\u0435\u043d\u0438\u0432\u0430\u0435\u043c \u0442\u043e\u0447\u043d\u043e\u0441\u0442\u044c\nprint(f\"\u0422\u043e\u0447\u043d\u043e\u0441\u0442\u044c \u043c\u043e\u0434\u0435\u043b\u0438 \u043f\u043e \u043c\u0435\u0442\u0440\u0438\u043a\u0435 MAPE: {(mape(y_test, predict))*100:0.5f}%\")","9c99d197":"model_full = CatBoostRegressor(iterations = 20000,\n                               learning_rate = 0.15,\n                               depth = 8,\n                               random_seed = RANDOM_SEED,\n                               eval_metric='MAPE',\n                               custom_metric=['RMSE'])\n\nmodel_full.fit(train, y_log,\n               #cat_features=cat_f,\n               eval_set=(X_test, y_test_log),\n               verbose=False,\n               use_best_model=True,\n               plot=False)\n\npredict_submission = model_full.predict(test)\npredict_submission = np.exp(predict_submission)\nsample_submission['price'] = predict_submission\nsample_submission.to_csv('submission.csv', index=False)\nsample_submission.head(3)","9cec11a1":"def cat_model(X_train, y_train, X_test, y_test):\n    model = CatBoostRegressor(iterations = 20000,\n                              learning_rate = 0.15,\n                              depth = 8,\n                              random_seed = RANDOM_SEED,\n                              eval_metric='MAPE',\n                              custom_metric=['RMSE','MAPE'],)\n    y_test_log = y_test.apply(lambda x: math.log(x))    \n    model.fit(X_train, y_train,\n              #cat_features=cat_features_ids,\n              eval_set=(X_test, y_test_log),\n              verbose=False,\n              use_best_model=True,\n              plot=False)\n    \n    return(model)","b264787e":"N_FOLDS = 5\nsubmissions = pd.DataFrame(0,columns=[\"sub_1\"], index=sample_submission.index) # \u043a\u0443\u0434\u0430 \u043f\u0438\u0448\u0435\u043c \u043f\u0440\u0435\u0434\u0438\u043a\u0442\u044b\nscore_ls = []\nsplits = list(KFold(n_splits=N_FOLDS, shuffle=True, random_state=RANDOM_SEED).split(X,y))\n\nfor idx, (train_idx, test_idx) in tqdm(enumerate(splits), total=N_FOLDS,):\n    # use the indexes to extract the folds in the train and validation data\n    Xf_train, yf_train, Xf_test, yf_test = X[train_idx], y[train_idx], X[test_idx], y[test_idx]\n    # model for this fold\n    yf_train = yf_train.apply(lambda x: math.log(x))\n    model = cat_model(Xf_train, yf_train, Xf_test, yf_test)\n    # score model on test\n    test_predict = model.predict(Xf_test)\n    test_predict = np.exp(test_predict)\n    test_score = mape(yf_test, test_predict)\n    score_ls.append(test_score)\n    print(f\"{idx+1} Fold Test MAPE: {mape(yf_test, test_predict)*100:0.5f}%\")\n    # submissions\n    submissions[f'sub_{idx+1}'] = model.predict(test.values)\n    model.save_model(f'catboost_fold_{idx+1}.model')\n    \nprint(f'Mean Score: {np.mean(score_ls)*100:0.5f}%')\nprint(f'Std Score: {np.std(score_ls)*100:0.5f}%')\nprint(f'Max Score: {np.max(score_ls)*100:0.5f}%')\nprint(f'Min Score: {np.min(score_ls)*100:0.5f}%')","f75b4b68":"submissions['blend'] = (submissions.sum(axis=1))\/len(submissions.columns)\nsample_submission['price'] = np.round(submissions['blend'].apply(lambda x: math.exp(x)).values, 0)\nsample_submission.to_csv('submission.csv', index=False)\nsample_submission.head(3)","2cfe6f16":"tree = DecisionTreeRegressor(max_features=int(X_train.shape[1]\/3), max_depth=77)\ntree.fit(X_train, y_train)\ntest_predict = tree.predict(X_test)\ntest_predict = np.exp(test_predict)\nprint(f\"DecisionTreeRegressor Test MAPE: {mape(y_test, test_predict)*100:0.5f}%\")","0456e075":"bagging_trees = BaggingRegressor(tree)\nbagging_trees.fit(X_train, y_train)\ntest_predict = bagging_trees.predict(X_test)\ntest_predict = np.exp(test_predict)\nprint(f\"BaggingRegressor(DecisionTrees) Test MAPE: {mape(y_test, test_predict)*100:0.5f}%\")","335e97c6":"# \u041e\u0441\u0442\u0430\u0432\u043b\u044f\u0435\u043c \u0442\u043e\u043b\u044c\u043a\u043e \u0447\u0438\u0441\u043b\u043e\u0432\u044b\u0435 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0438 \u0438 \u0441\u0440\u0430\u0437\u0443 \u043d\u043e\u0440\u043c\u0438\u0440\u0443\u0435\u043c \u0438\u0445 \u0434\u043b\u044f \u0443\u0434\u043e\u0431\u0441\u0442\u0432\u0430\nnum_train = train.drop(cat_f, axis=1)\nscaler = StandardScaler()\nnum_train = pd.DataFrame(data=scaler.fit_transform(num_train), columns=num_train.columns)\nXn_train, Xn_test, yn_train, yn_test = train_test_split(num_train, y, test_size=0.2, shuffle=True, random_state=RANDOM_SEED)\nyn_train = yn_train.apply(lambda x: math.log(x))","abcdcdda":"gb = GradientBoostingRegressor(max_depth=7, n_estimators=1500, learning_rate=0.1, random_state=RANDOM_SEED)\ngb.fit(Xn_train, yn_train)\ntest_predict = gb.predict(Xn_test)\ntest_predict = np.exp(test_predict)\nprint(f\"GradientBoostingRegressor Test MAPE: {mape(yn_test, test_predict)*100:0.5f}%\")","7e381272":"gb = GradientBoostingRegressor(max_depth=7, n_estimators=1500, learning_rate=0.1, random_state=RANDOM_SEED)\ngb.fit(X_train, y_train)\ntest_predict = gb.predict(X_test)\ntest_predict = np.exp(test_predict)\nprint(f\"GradientBoostingRegressor Test MAPE: {mape(y_test, test_predict)*100:0.5f}%\")","c9a0ab8c":"gb_full = GradientBoostingRegressor(max_depth=7, n_estimators=1500, learning_rate=0.1, random_state=RANDOM_SEED)\ngb_full.fit(train, y_log)\npredict_submission = gb_full.predict(test)\npredict_submission = np.exp(predict_submission)\nsample_submission['price'] = predict_submission\nsample_submission.to_csv('submission.csv', index=False)\nsample_submission.head(3)","be1a87cd":"# param_grid = {'learning_rate':[0.00001, 0.0001, 0.001, 0.01, 0.1, 1], \n#               'n_estimators':[100, 250, 500, 750, 1000, 1250, 1500, 1750]}","c0d6cc24":"# gb = GradientBoostingRegressor(random_state=RANDOM_SEED)","a66298c3":"print('\u041f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u044b \u043f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e:\\n')\npprint(gb.get_params())","a3779392":"# gridsearch = GridSearchCV(gb, param_grid, scoring='neg_mean_absolute_error', n_jobs=-1, cv=5)","85e492de":"# gridsearch.fit(X_train, y_train)\n# gb_opt = gridsearch.best_estimator_\n# ##\u043f\u0435\u0447\u0430\u0442\u0430\u0435\u043c \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u044b\n# best_parameters = gb_opt.get_params()\n# for param_name in sorted(best_parameters.keys()):\n#     print('\\t%s: %r' % (param_name, best_parameters[param_name]))","bf1302e5":"# param_grid = {'max_depth':list(range(3, 16))}","906b321c":"# gridsearch = GridSearchCV(gb_opt, param_grid, scoring='neg_mean_absolute_error', n_jobs=-1, cv=5)","b1fd6929":"# gridsearch.fit(X_train, y_train)\n# gb_opt1 = gridsearch.best_estimator_\n# ##\u043f\u0435\u0447\u0430\u0442\u0430\u0435\u043c \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u044b\n# best_parameters = gb_opt1.get_params()\n# for param_name in sorted(best_parameters.keys()):\n#     print('\\t%s: %r' % (param_name, best_parameters[param_name]))","59d6fb08":"# gb_opt1.fit(X_train, y_train)\n# test_predict = gb_opt1.predict(X_test)\n# test_predict = np.exp(test_predict)\n# print(f\"GradientBoostingRegressor Test MAPE: {mape(y_test, test_predict)*100:0.5f}%\")","66509818":"gb_opt1_full = GradientBoostingRegressor(max_depth=4, n_estimators=1750, learning_rate=0.1, random_state=RANDOM_SEED)\ngb_opt1_full.fit(train, y_log)\npredict_submission = gb_opt1_full.predict(test)\npredict_submission = np.exp(predict_submission)\nsample_submission['price'] = predict_submission\nsample_submission.to_csv('submission.csv', index=False)\nsample_submission.head(3)","25a7f027":"X_train = X_train.values\nX_test = X_test.values\ny_train = y_train.values\ny_test = y_test.values","2a69bd1f":"cv = KFold(n_splits=5, shuffle=True, random_state=RANDOM_SEED)\n\ndef compute_metric(regr, X_train=X_train, y_train=y_train, X_test=X_test, y_test=y_test):\n    regr.fit(X_train, y_train)\n    y_test_pred = regr.predict(X_test)\n    y_test_pred = np.exp(y_test_pred)\n    return np.round(mape(y_test, y_test_pred)*100, 5)","1938e947":"def compute_meta_feature(regr, X_train, X_test, y_train, cv):    \n    \n    X_meta_train = np.zeros_like(y_train, dtype=np.float32)    \n\n    splits = cv.split(X_train)\n    for train_fold_index, predict_fold_index in splits:\n        X_fold_train, X_fold_predict = X_train[train_fold_index], X_train[predict_fold_index]\n        y_fold_train = y_train[train_fold_index]\n        \n        folded_regr = clone(regr)\n        folded_regr.fit(X_fold_train, y_fold_train)\n        \n        X_meta_train[predict_fold_index] = folded_regr.predict(X_fold_predict)\n        \n    \n    meta_regr = clone(regr)\n    meta_regr.fit(X_train, y_train)\n    \n    X_meta_test = meta_regr.predict(X_test)\n        \n    return X_meta_train, X_meta_test","ae42ad37":"def generate_meta_features(regr_s, X_train, X_test, y_train, cv):\n   \n    features = [compute_meta_feature(regr, X_train, X_test, y_train, cv) for regr in tqdm(regr_s)]    \n    stacked_features_train = np.vstack([features_train for features_train, features_test in features]).T\n    stacked_features_test = np.vstack([features_test for features_train, features_test in features]).T\n    return stacked_features_train, stacked_features_test","5fcc8b29":"stacked_features_train, stacked_features_test = generate_meta_features([\n    RandomForestRegressor(n_estimators=1800, min_samples_split=10, min_samples_leaf=1, \n                          max_features='sqrt', max_depth=40, bootstrap=False, random_state=RANDOM_SEED),\n    AdaBoostRegressor(random_state=RANDOM_SEED),\n    ExtraTreesRegressor(random_state=RANDOM_SEED),\n    GradientBoostingRegressor(max_depth=4, n_estimators=1750, learning_rate=0.1, random_state=RANDOM_SEED)],\n    X_train, X_test, y_train, cv)","f46be353":"regr = RandomForestRegressor(\n n_estimators=300,\n min_samples_split=2,\n min_samples_leaf=1,\n max_features='sqrt',\n max_depth=77,\n bootstrap=True, \n random_state=RANDOM_SEED)","97db87d2":"print(f'Stacking MAPE = {compute_metric(regr, X_train=stacked_features_train, y_train=y_train, X_test=stacked_features_test, y_test=y_test)}%')","b4b9c5ff":"regr = RandomForestRegressor(\n n_estimators=1800,\n min_samples_split=10,\n min_samples_leaf=1,\n max_features='sqrt',\n max_depth=40,\n bootstrap=False,\n random_state=RANDOM_SEED)","f710a104":"print(f'Stacking MAPE = {compute_metric(regr, X_train=stacked_features_train, y_train=y_train, X_test=stacked_features_test, y_test=y_test)}%')","712bac99":"regr = CatBoostRegressor(iterations = 20000,\n                         learning_rate = 0.15,\n                         depth = 8,\n                         random_seed = RANDOM_SEED,\n                         eval_metric='MAPE',\n                         custom_metric=['RMSE'])","334f22d1":"print(f'Stacking MAPE = {compute_metric(regr, X_train=stacked_features_train, y_train=y_train, X_test=stacked_features_test, y_test=y_test)}%')","5ec6e628":"Submission \u043d\u0430 \u043f\u043e\u043b\u043d\u043e\u043c \u043d\u0430\u0431\u043e\u0440\u0435 \u0434\u0430\u043d\u043d\u044b\u0445 \u043f\u0440\u0438 \u043f\u043e\u0434\u043e\u0431\u0440\u0430\u043d\u043d\u044b\u0445 \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u0430\u0445","d01c9a26":"\u0412\u044b\u0432\u043e\u0434\u044b \u043f\u043e \u0440\u0430\u0441\u0441\u043c\u043e\u0442\u0440\u0435\u043d\u0438\u044e \u043a\u043e\u0440\u0440\u0435\u043b\u044f\u0446\u0438\u0438 \u0447\u0438\u0441\u043b\u043e\u0432\u044b\u0445 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u043e\u0432:  \n  +0.98 \u043c\u0435\u0436\u0434\u0443 \u0433\u043e\u0434\u043e\u043c \u0432\u044b\u043f\u0443\u0441\u043a\u0430 \u0438 \u0433\u043e\u0434\u043e\u043c \u043c\u043e\u0434\u0435\u043b\u0438, \u0432\u0438\u0434\u0438\u043c\u043e, \u0438\u043c\u0435\u0435\u0442 \u0441\u043c\u044b\u0441\u043b \u043e\u0434\u0438\u043d \u0438\u0437 \u044d\u0442\u0438\u0445  \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u043e\u0432 \u0443\u0431\u0440\u0430\u0442\u044c \u0438\u043b\u0438 \u0437\u0430\u043c\u0435\u043d\u0438\u0442\u044c \u043d\u0430 \u0438\u0445 \u0440\u0430\u0437\u043d\u043e\u0441\u0442\u044c  \n  +0.84 \u043c\u0435\u0436\u0434\u0443 \u043c\u043e\u0449\u043d\u043e\u0441\u0442\u044c\u044e \u0438 \u043e\u0431\u044a\u0435\u043c\u043e\u043c \u0434\u0432\u0438\u0433\u0430\u0442\u0435\u043b\u044f  \n  -0.67 \u043c\u0435\u0436\u0434\u0443 \u043f\u0440\u043e\u0431\u0435\u0433\u043e\u043c \u0438 \u0433\u043e\u0434\u043e\u043c \u043f\u0440\u043e\u0438\u0437\u0432\u043e\u0434\u0441\u0442\u0432\u0430, \u0437\u0434\u0435\u0441\u044c \u0442\u043e\u0436\u0435 \u043c\u043e\u0436\u043d\u043e \u0441\u043e\u0437\u0434\u0430\u0442\u044c \u043d\u043e\u0432\u044b\u0439 \u043f\u0440\u0438\u0437\u043d\u0430\u043a \u0442\u0438\u043f\u0430 \u043f\u0440\u043e\u0431\u0435\u0433\/\u0432\u043e\u0437\u0440\u0430\u0441\u0442","4431d7d4":"\u0420\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u044b \u043f\u043e \u043c\u0435\u0442\u0440\u0438\u043a\u0435 MAPE \u043f\u043e\u043b\u0443\u0447\u0430\u044e\u0442\u0441\u044f \u0445\u0443\u0436\u0435, \u0447\u0435\u043c \u0443 \u043e\u0434\u0438\u043d\u043e\u0447\u043d\u043e\u0433\u043e CatBoost \u0440\u0435\u0433\u0440\u0435\u0441\u0441\u043e\u0440\u0430","f2101782":"\u0420\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442 \u043d\u0430 Kaggle: 15.20885","55227b63":"Submission","4f683974":"\u041f\u043e\u043f\u0440\u043e\u0431\u0443\u0435\u043c \u043e\u0431\u0443\u0447\u0438\u0442\u044c Random Forest \u043d\u0430 \u0432\u0441\u0435\u043c \u0442\u0440\u0435\u043d\u0438\u0440\u043e\u0432\u043e\u0447\u043d\u043e\u043c \u0434\u0430\u0442\u0430\u0441\u0435\u0442\u0435 train (\u043d\u0435 \u043d\u0430 X_train) \u0438 \u0441\u0434\u0435\u043b\u0430\u0442\u044c submission","6e869b78":"\u0422\u0435\u043f\u0435\u0440\u044c \u043e\u0431\u0435\u0440\u043d\u0435\u043c \u0434\u0435\u0440\u0435\u0432\u044c\u044f \u0432 BaggingRegressor","2815e0d1":"\u041f\u043e\u0441\u0442\u0440\u043e\u0438\u043c \u0438\u0445 \u0433\u0438\u0441\u0442\u043e\u0433\u0440\u0430\u043c\u043c\u044b","0e58dabe":"\u0420\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442 \u043d\u0430 Kaggle: 14.64058","e02a9235":"Bagging \u0441\u0443\u0449\u0435\u0441\u0442\u0432\u0435\u043d\u043d\u043e \u0443\u043b\u0443\u0447\u0448\u0430\u0435\u0442 \u043a\u0430\u0447\u0435\u0441\u0442\u0432\u043e \u043c\u043e\u0434\u0435\u043b\u0438 \u0438 \u0434\u0430\u0435\u0442 \u043b\u0443\u0447\u0448\u0443\u044e \u043c\u0435\u0442\u0440\u0438\u043a\u0443 MAPE = 15.26732%","48f2bbef":"\u0417\u0430\u043c\u0435\u0442\u0438\u043c, \u0447\u0442\u043e \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0438 'model_name' \u0438  'vehicleConfiguration' \u0438\u043c\u0435\u044e\u0442 \u043e\u0447\u0435\u043d\u044c \u0431\u043e\u043b\u044c\u0448\u043e\u0439 \u0441\u043f\u0435\u043a\u0442\u0440 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0439(451 \u0438 676)   \n\u041e\u0441\u0442\u0430\u043b\u044c\u043d\u044b\u0435 7 \u043a\u0430\u0442\u0435\u0433\u043e\u0440\u0438\u0430\u043b\u044c\u043d\u044b\u0445 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u043e\u0432 \u0438\u043c\u0435\u044e\u0442 \u043d\u0435\u0431\u043e\u043b\u044c\u0448\u0438\u0435 \u0441\u043f\u0435\u043a\u0442\u0440\u044b \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0439.","e3e5b4f9":"\u041f\u0430\u0440\u0441\u0438\u043d\u0433 \u043f\u0440\u043e\u0432\u043e\u0434\u0438\u043b\u0441\u044f \u043d\u0430 \u043b\u043e\u043a\u0430\u043b\u044c\u043d\u043e\u0439 \u043c\u0430\u0448\u0438\u043d\u0435. \u0412 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u0435 \u043f\u043e\u043b\u0443\u0447\u043b\u0441\u044f \u0442\u0440\u0435\u043d\u0438\u0440\u043e\u0432\u043e\u0447\u043d\u044b\u0439 \u0434\u0430\u0442\u0430\u0441\u0435\u0442 train.csv \u0441 26957 \u0437\u0430\u043f\u0438\u0441\u0435\u0439. \u041c\u044b \u043c\u043e\u0436\u0435\u043c \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c \u0435\u0433\u043e \u0434\u043b\u044f \u043e\u0431\u0443\u0447\u0435\u043d\u0438\u044f.\n\u041a\u043e\u0434 \u0434\u043b\u044f \u043f\u0430\u0440\u0441\u0438\u043d\u0433\u0430 \u043f\u0440\u0438\u0432\u043e\u0434\u0438\u0442\u0441\u044f \u0432 \u0444\u0430\u0439\u043b\u0435 **grigoriyk-car-price-prediction_parsing**","99aad783":"\u041f\u043e\u0441\u043c\u043e\u0442\u0440\u0438\u043c \u043d\u0430 \u043a\u043e\u0440\u0440\u0435\u043b\u044f\u0446\u0438\u043e\u043d\u043d\u0443\u044e \u043c\u0430\u0442\u0440\u0438\u0446\u0443","dbffe194":"Random Forest \u0441 \u043a\u0440\u043e\u0441\u0441-\u0432\u0430\u043b\u0438\u0434\u0430\u0446\u0438\u0435\u0439","055c8fac":"\u041f\u0440\u043e\u0432\u0435\u0440\u0438\u043c \u0437\u043d\u0430\u0447\u0438\u043c\u043e\u0441\u0442\u044c \u0447\u0438\u0441\u043b\u043e\u0432\u044b\u0445 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u043e\u0432, \u0432\u043a\u043b\u044e\u0447\u0430\u044f \u043f\u043e\u043b\u0438\u043d\u043e\u043c\u0438\u0430\u043b\u044c\u043d\u044b\u0435","9a8ffab8":"### \u041a\u0430\u0442\u0435\u0433\u043e\u0440\u0438\u0430\u043b\u044c\u043d\u044b\u0435 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0438","a321774a":"\u041f\u0440\u0438\u043c\u0435\u043d\u0438\u043c \u043a\u0440\u043e\u0441\u0441-\u0432\u0430\u043b\u0438\u0434\u0430\u0446\u0438\u044e \u0441 5 \u0444\u043e\u043b\u0434\u0430\u043c\u0438.","079d0e94":"GradientBoostingRegressor Test MAPE: 13.88704%","bd7e2c0f":"Submission","d16fbf2f":"### \u0427\u0438\u0441\u043b\u043e\u0432\u044b\u0435 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0438","3f3f4f27":"## \u042d\u0442\u0430\u043f IV. \u041f\u043e\u0441\u0442\u0440\u043e\u0435\u043d\u0438\u0435 \u043c\u043e\u0434\u0435\u043b\u0435\u0439.","5b6b99b5":"\u041e\u0441\u0442\u0430\u0435\u0442\u0441\u044f 13 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u043e\u0432 \u0438 \u0446\u0435\u043b\u0435\u0432\u0430\u044f \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u0430\u044f 'price'  ","037a7d9c":"\u041f\u043e\u043f\u0440\u043e\u0431\u0443\u0435\u043c \u043f\u043e\u0434\u043e\u0431\u0440\u0430\u0442\u044c \u0433\u0438\u043f\u0435\u0440\u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u044b","da4c3f35":"\u0418\u043c\u0435\u0435\u043c 14 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u043e\u0432, \u043d\u0435 \u0441\u0447\u0438\u0442\u0430\u044f \"sample\", \u0438\u0437 \u043d\u0438\u0445 3 - \u0447\u0438\u0441\u043b\u043e\u0432\u044b\u0435 (\u043f\u0440\u0438\u0437\u043d\u0430\u043a numberOfDoors \u043f\u043e \u0441\u0443\u0442\u0438 \u043a\u0430\u0442\u0435\u0433\u043e\u0440\u0438\u0430\u043b\u044c\u043d\u044b\u0439).  \n\u041f\u0440\u0438 \u044d\u0442\u043e\u043c \u0434\u0432\u0430 \u043a\u0430\u0442\u0435\u0433\u043e\u0440\u0438\u0430\u043b\u044c\u043d\u044b\u0445 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0430: \"enginePower\" \u0438 \"engineDisplacement\" \u043e\u0431\u043e\u0437\u043d\u0430\u0447\u0430\u044e\u0442 \u043e\u0431\u044a\u0435\u043c \u0438 \u043c\u043e\u0449\u044c\u043d\u043e\u0441\u0442\u044c \u0434\u0432\u0438\u0433\u0430\u0442\u0435\u043b\u044f \u0438 \u0438\u0445 \u043d\u0443\u0436\u043d\u043e \u043f\u0440\u0435\u043e\u0431\u0440\u0430\u0437\u043e\u0432\u0430\u0442\u044c \u0432 \u0447\u0438\u0441\u043b\u043e\u0432\u044b\u0435. ","7a50138d":"\u0420\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442 \u043d\u0430 Kaggle: 14.56589 (\u043d\u0435\u0441\u043a\u043e\u043b\u044c\u043a\u043e \u0445\u0443\u0436\u0435, \u0447\u0435\u043c \u043f\u0440\u0435\u0434\u044b\u0434\u0443\u0449\u0438\u0439.)","b1ab1772":"**\u0422\u0430\u043a\u043e\u0439 \u043f\u043e\u0434\u0445\u043e\u0434 \u043f\u043e\u043a\u0430\u0437\u0430\u043b \u043d\u0435\u0441\u043a\u043e\u043b\u044c\u043a\u043e \u043b\u0443\u0447\u0448\u0438\u0439 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442 \u043d\u0430 kaggle: 16.84706 \u0432\u043c\u0435\u0441\u0442\u043e 17.65129**","2fbe2851":"\u0421\u043e\u0437\u0434\u0430\u0434\u0438\u043c \u0431\u0438\u043d\u0430\u0440\u043d\u044b\u0439 \u043a\u0430\u0442\u0435\u0433\u043e\u0440\u0438\u0430\u043b\u044c\u043d\u044b\u0439 \u043f\u0440\u0438\u0437\u043d\u0430\u043a \"allroad\" - \u043d\u0430\u043b\u0438\u0447\u0438\u0435 \u043f\u043e\u043b\u043d\u043e\u0433\u043e \u043f\u0440\u0438\u0432\u043e\u0434\u0430:","9907f5ca":"\u0423\u0434\u0430\u043b\u0438\u043c \u0441\u0442\u043e\u043b\u0431\u0435\u0446 page, \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043b\u0441\u044f \u043f\u0440\u0438 \u043f\u0430\u0440\u0441\u0438\u043d\u0433\u0435 \u0434\u043b\u044f \u0430\u043d\u0430\u043b\u0438\u0437\u0430 \u0440\u0430\u0441\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0438\u044f \u043e\u0431\u044a\u044f\u0432\u043b\u0435\u043d\u0438\u0439 \u043f\u043e \u0441\u0442\u0440\u0430\u043d\u0438\u0446\u0430\u043c","b7fd898e":"\u041d\u0430 \u0442\u043e\u043c \u0436\u0435 \u0440\u0430\u0437\u0431\u0438\u0435\u043d\u0438\u0438 \u0442\u043e\u0447\u043d\u043e\u0441\u0442\u044c \u043d\u0435\u043c\u043d\u043e\u0433\u043e \u0432\u044b\u0448\u0435, \u0447\u0435\u043c \u0443 Random Forest, 13.66424% \u0432\u043c\u0435\u0441\u0442\u043e 14.03633%","4e5c5aad":"## \u042d\u0442\u0430\u043f I. \u0422\u0435\u0441\u0442\u043e\u0432\u044b\u0439 \u0434\u0430\u0442\u0430\u0441\u0435\u0442\n\u0418\u0441\u0441\u043b\u0435\u0434\u0443\u0435\u043c \u0442\u0435\u0441\u0442\u043e\u0432\u044b\u0439 \u0434\u0430\u0442\u0430\u0441\u0435\u0442, \u0447\u0442\u043e\u0431\u044b \u043f\u043e\u043d\u044f\u0442\u044c, \u043a\u0430\u043a\u0438\u0435 \u0434\u0430\u043d\u043d\u044b\u0435 \u043d\u0430\u043c \u043d\u0443\u0436\u043d\u044b \u0432 \u0442\u0440\u0435\u043d\u0438\u0440\u043e\u0432\u043e\u0447\u043d\u043e\u043c \u0434\u0430\u0442\u0430\u0441\u0435\u0442\u0435","58160d69":"\u0421\u043e\u0437\u0434\u0430\u0434\u0438\u043c \u043f\u043e\u043b\u0438\u043d\u043e\u043c\u0438\u0430\u043b\u044c\u043d\u044b\u0435 \u043d\u043e\u0432\u044b\u0435 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0438 \u043d\u0430 \u043e\u0441\u043d\u043e\u0432\u0435 \u0434\u0432\u0443\u0445 \u0447\u0438\u0441\u043b\u043e\u0432\u044b\u0445 'productionDate' \u0438 'enginePower' \u0438 \u043d\u043e\u0440\u043c\u0438\u0440\u0443\u0435\u043c \u0438\u0445","e5ba9aaf":"MAPE \u0441\u0442\u0430\u043b\u0430 \u043b\u0443\u0447\u0448\u0435: 14.03633 \u0432\u043c\u0435\u0441\u0442\u043e 14.55663","8bed3a49":"Submission","8f7a5174":"## \u042d\u0442\u0430\u043f III. \u041f\u0440\u0435\u0434\u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0430 \u0434\u0430\u043d\u043d\u044b\u0445.","901bda60":"\u041d\u0430 \u043f\u043e\u043b\u043d\u043e\u043c \u043d\u0430\u0431\u043e\u0440\u0435 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u043e\u0432:","63b13c9e":"### \u0427\u0430\u0441\u0442\u044c 1. \u041f\u0440\u0438\u0432\u0435\u0434\u0435\u043d\u0438\u0435 train \u0438 test \u043a \u0441\u043e\u043e\u0442\u0432\u0435\u0442\u0441\u0442\u0432\u0438\u044e \u043f\u043e \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0430\u043c.","da73b209":"### \u0427\u0430\u0441\u0442\u044c 2. \u041e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0430 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u043e\u0432.","3335aaea":"\u041d\u0430\u043c \u0443\u0434\u0430\u0435\u0442\u0441\u044f \u0434\u043e\u0431\u0438\u0442\u044c\u0441\u044f \u0445\u043e\u0440\u043e\u0448\u0435\u0433\u043e \u0441\u043e\u043e\u0442\u0432\u0435\u0442\u0441\u0442\u0432\u0438\u044f \u043c\u043e\u0434\u0435\u043b\u0435\u0439:","1372e52d":"# \u041f\u0440\u043e\u0435\u043a\u0442 \"Car price prediction\".","31a6849b":"\u0423 \u043d\u0430\u0441 32 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0430, 6 \u0438\u0437 \u043d\u0438\u0445 - \u0447\u0438\u0441\u043b\u043e\u0432\u044b\u0435.  \n\n\u041f\u043e\u0441\u043c\u043e\u0442\u0440\u0438\u043c \u043d\u0430 \u0442\u0438\u043f\u0438\u0447\u043d\u044b\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f \u0432 \u0440\u0430\u0437\u043d\u044b\u0445 \u043a\u043e\u043b\u043e\u043d\u043a\u0430\u0445 \u0442\u0435\u0441\u0442\u043e\u0432\u043e\u0433\u043e \u0434\u0430\u0442\u0430\u0441\u0435\u0442\u0430, \u0438\u0441\u043a\u043b\u044e\u0447\u0438\u0432 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0438, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u043d\u0435 \u0431\u0443\u0434\u0435\u043c \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c:","a9518f9a":"### Model 5. Stacking.","dbce6ecc":"### Model 0. \"\u041d\u0430\u0438\u0432\u043d\u0430\u044f\".\n\u041f\u043e\u0441\u0442\u0440\u043e\u0438\u043c \u043c\u043e\u0434\u0435\u043b\u044c \u043f\u043e \u043e\u0434\u043d\u043e\u043c\u0443 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0443 enginePower.","b03aacdf":"\u0412\u044b\u0434\u0435\u043b\u0438\u043c \u0446\u0435\u043b\u0435\u0432\u0443\u044e \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u0443\u044e:","294942ec":" \u041f\u043e\u043c\u0435\u0447\u0430\u0435\u043c \u0442\u0440\u0435\u043d\u0438\u0440\u043e\u0432\u043e\u0447\u043d\u044b\u0439 \u0434\u0430\u0442\u0430\u0441\u0435\u0442 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u043e\u043c 'sample'= 1 \u0438 \u043e\u0431\u044a\u0435\u0434\u0438\u043d\u0447\u0435\u043c \u043e\u0431\u0430 \u0434\u0430\u0442\u0430\u0441\u0435\u0442\u0430 \u0432 \u043e\u0431\u0449\u0438\u0439, cars:","788d3e5d":"\u041f\u043e\u0441\u043c\u043e\u0442\u0440\u0438\u043c \u0441\u043d\u0430\u0447\u0430\u043b\u0430 \u043d\u0430 \u0442\u043e\u0447\u043d\u043e\u0441\u0442\u044c \u043e\u0434\u043d\u043e\u0433\u043e \u0434\u0435\u0440\u0435\u0432\u0430","e6b93d02":"\u041f\u0440\u043e\u0431\u0443\u0435\u043c \u043e\u0431\u0443\u0447\u0435\u043d\u0438\u0435 \u043d\u0430 \u0432\u0441\u0435\u043c \u0442\u0440\u0435\u043d\u0438\u0440\u043e\u0432\u043e\u0447\u043d\u043e\u043c \u0434\u0430\u0442\u0430\u0441\u0435\u0442\u0435:","8ce7b5ba":"## \u042d\u0442\u0430\u043f II. \u041f\u0430\u0440\u0441\u0438\u043d\u0433.","0332b3a4":"### \u0427\u0430\u0441\u0442\u044c 3. Feature Engineering (\u0433\u0435\u043d\u0435\u0440\u0430\u0446\u0438\u044f \u043d\u043e\u0432\u044b\u0445 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u043e\u0432)","f309a411":"\u041c\u0435\u043d\u044f\u0435\u043c \u0442\u0438\u043f \u0447\u0438\u0441\u043b\u043e\u0432\u044b\u0445 \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u044b\u0445 \u043d\u0430 int64 \u0432 train","9b6f66fb":"**\u0420\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442 \u043d\u0430 Kaggle: 14.10630. \u042d\u0442\u043e \u043f\u043e\u043a\u0430 \u043b\u0443\u0447\u0448\u0438\u0439 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442.**","efcf5743":"### Model 4. GradientBoosting.","fa8c39bd":"Random Forest \u0441 \u043f\u043e\u0434\u043e\u0431\u0440\u0430\u043d\u043d\u044b\u043c\u0438 \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u0430\u043c\u0438:","bf71c71b":"\u0418\u0437 \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u043e\u0432 CatBoost \u0443\u0434\u0430\u043b\u043e\u0441\u044c \u043f\u043e\u0434\u043e\u0431\u0440\u0430\u0442\u044c \u043e\u043f\u0442\u0438\u043c\u0430\u043b\u044c\u043d\u044b\u0439 learning_rate=0.15 \u043f\u0440\u0438 \u043a\u043e\u043b-\u0432\u0435 \u0438\u0442\u0435\u0440\u0430\u0446\u0438\u0439 20000.\nbagging_temperature \u0438 random_strength \u043d\u0430 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442 \u043d\u0435 \u043f\u043e\u0432\u043b\u0438\u044f\u043b\u0438.\n\u041e\u0431\u044a\u044f\u0432\u043b\u0435\u043d\u0438\u0435 \u043a\u0430\u0442\u0435\u0433\u043e\u0440\u0438\u0430\u043b\u044c\u043d\u044b\u0445 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u043e\u0432(\u043d\u0435\u043e\u0446\u0438\u0444\u0440\u043e\u0432\u0430\u043d\u043d\u044b\u0445) \u0432 \u043f\u0430\u0440-\u0440 cat_features \u0442\u043e\u0436\u0435 \u043d\u0435 \u0443\u043b\u0443\u0447\u0448\u0438\u043b\u043e \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442","ee3fce9b":"\u041f\u0440\u043e\u0431\u0443\u0435\u043c Submission","98002ca8":"\u041f\u043e\u0441\u043c\u043e\u0442\u0440\u0438\u043c \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435 \u043c\u0435\u0442\u0440\u0438\u043a\u0438 \u043d\u0430 \"\u043e\u043f\u0442\u0438\u043c\u0430\u043b\u044c\u043d\u043e\u043c\" \u0440\u0435\u0433\u0440\u0435\u0441\u0441\u043e\u0440\u0435","6c57f70d":"### Model 3. Bagging.","8749014f":"\u0413\u043b\u044f\u0434\u044f \u043d\u0430 \u043f\u0440\u0438\u0437\u043d\u0430\u043a **model_name** \u0432\u0438\u0434\u0438\u043c, \u0447\u0442\u043e \u043d\u0430 test \u043e\u043d \u043a\u043e\u0440\u043e\u0447\u0435. \u041f\u043e\u043f\u0440\u043e\u0431\u0443\u0435\u043c \u0432\u044b\u0434\u0435\u043b\u0438\u0442\u044c \u043a\u043e\u0440\u043e\u0442\u043a\u043e\u0435 \u043d\u0430\u0437\u0432\u0430\u043d\u0438\u0435 \u043c\u043e\u0434\u0435\u043b\u0438 \u043d\u0430 train","23803086":"\u041f\u043e\u043b\u0438\u043d\u043e\u043c\u0438\u0430\u043b\u044c\u043d\u044b\u0435 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0438 \u043f\u043e\u043a\u0430\u0437\u044b\u0432\u0430\u044e\u0442 \u0432\u044b\u0441\u043e\u043a\u0443\u044e \u0437\u043d\u0430\u0447\u0438\u043c\u043e\u0441\u0442\u044c \u0434\u043b\u044f \u0446\u0435\u043b\u0435\u0432\u043e\u0439 \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u043e\u0439, \u043d\u043e  \n\u043e\u043d\u0438 \u043e\u0447\u0435\u043d\u044c \u0441\u0438\u043b\u044c\u043d\u043e \u0441\u043a\u043e\u0440\u0440\u0435\u043b\u0438\u0440\u043e\u0432\u0430\u043d\u043d\u044b \u0441\u043e \u0441\u0432\u043e\u0438\u043c\u0438 \u043f\u0440\u0435\u0434\u0448\u0435\u0441\u0442\u0432\u0435\u043d\u043d\u0438\u043a\u0430\u043c\u0438.\n\u041f\u043e\u043f\u0440\u043e\u0431\u0443\u0435\u043c \u0432 \u0434\u0430\u043b\u044c\u043d\u0435\u0439\u0448\u0435\u043c \u0437\u0430\u043f\u0443\u0441\u043a\u0430\u0442\u044c \u043c\u043e\u0434\u0435\u043b\u0438 \u0441 \u043d\u0438\u043c\u0438 \u0438 \u0431\u0435\u0437 \u043d\u0438\u0445","8b661663":"Submission \u043d\u0430 \u043f\u043e\u043b\u043d\u043e\u043c \u043d\u0430\u0431\u043e\u0440\u0435 \u0434\u0430\u043d\u043d\u044b\u0445","7fa9332c":"### \u0427\u0430\u0441\u0442\u044c 4. \"\u0417\u0430\u043a\u043e\u0434\u0438\u0440\u0443\u0435\u043c\" \u043a\u0430\u0442\u0435\u0433\u043e\u0440\u0438\u0430\u043b\u044c\u043d\u044b\u0435 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0438 (Label Encoding)","f7fb9faf":"\u0412\u0438\u0434\u0438\u043c, \u0447\u0442\u043e \u0435\u0441\u0442\u044c \u043d\u0435\u043a\u043e\u0442\u043e\u0440\u043e\u0435 \u0441\u043e\u043e\u0442\u0432\u0435\u0442\u0441\u0442\u0432\u0438\u0435 \u043c\u0435\u0436\u0434\u0443 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0430\u043c\u0438 **model_name** \u043d\u0430 test \u0438 train","bfd1941e":"\u0412\u044b\u0431\u0438\u0440\u0430\u0435\u043c \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0438 \u0434\u043b\u044f \u0434\u0430\u043b\u044c\u043d\u0435\u0439\u0448\u0435\u0439 \u0440\u0430\u0431\u043e\u0442\u044b  ","f166cd2d":"\u0420\u0430\u0441\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0438\u044f \u0443 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u043e\u0432 \u0432 \u043a\u0430\u043a\u043e\u043c-\u0442\u043e \u043f\u0440\u0438\u0431\u043b\u0438\u0436\u0435\u043d\u0438\u0438 \u0431\u043b\u0438\u0437\u043a\u0438 \u043a \u043d\u043e\u0440\u043c\u0430\u043b\u044c\u043d\u044b\u043c, \u0441\u043f\u0440\u0430\u0432\u0430 \u0438\u043b\u0438 \u0441\u043b\u0435\u0432\u0430 \u0438\u043c\u0435\u044e\u0442\u0441\u044f \u0434\u043b\u0438\u043d\u043d\u044b\u0435 \u0445\u0432\u043e\u0441\u0442\u044b.  \n\u041e\u0447\u0435\u043d\u044c \u043c\u043d\u043e\u0433\u043e \u0442\u0435\u0445\u043d\u0438\u0447\u0435\u0441\u043a\u0438\u0445 \u0432\u044b\u0431\u0440\u043e\u0441\u043e\u0432, \u043d\u043e \u0432\u0432\u0435\u0434\u0435\u043d\u0438\u0435 \u0434\u0430\u0436\u0435 \u043b\u043e\u0433\u0438\u0447\u0435\u0441\u043a\u0438\u0445 \u0433\u0440\u0430\u043d\u0438\u0446 \u0443\u0445\u0443\u0434\u0448\u0430\u043b\u043e \u043e\u0446\u0435\u043d\u043a\u0443 \u0438 \u043d\u0430 Kaggle \u043d\u0435 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043b\u043e\u0441\u044c.","94ff3b3d":"\u0420\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442 \u043d\u0430 Kaggle: 14.18828. \u0421\u0442\u043e\u0438\u0442 \u043f\u043e\u043f\u0440\u043e\u0431\u043e\u0432\u0430\u0442\u044c \u043f\u043e\u0434\u043e\u0431\u0440\u0430\u0442\u044c \u0433\u0438\u043f\u0435\u0440\u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u044b.","c0b46285":"### \u0412\u044b\u0432\u043e\u0434\u044b \u043f\u043e \u042d\u0442\u0430\u043f\u0443 III. \u041f\u0440\u0435\u0434\u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0430 \u0434\u0430\u043d\u043d\u044b\u0445:\n\u0412 \u043f\u0440\u043e\u0446\u0435\u0441\u0441\u0435 \u043f\u0440\u0435\u0434\u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0438 \u0434\u0430\u043d\u043d\u044b\u0445 \u0434\u043e\u0431\u0430\u0432\u043b\u0435\u043d\u044b:  \n  - 1 \u043d\u043e\u0432\u044b\u0439 \u0431\u0438\u043d\u0430\u0440\u043d\u044b\u0439 \u043a\u0430\u0442\u0435\u0433\u043e\u0440\u0438\u0430\u043b\u044c\u043d\u044b\u0439 \u043f\u0440\u0438\u0437\u043d\u0430\u043a **\"allroad\"** \n  - 5 \u043d\u043e\u0432\u044b\u0445 \u0447\u0438\u0441\u043b\u043e\u0432\u044b\u0445 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u043e\u0432: **\"model_age\", \"km_per_year\", \"date_power5\", \"date_power7\", \"date_power9\"**, 3 \u0438\u0437 \u043a\u043e\u0442\u043e\u0440\u044b\u0445 - \u043f\u043e\u043b\u0438\u043d\u043e\u043c\u0438\u0430\u043b\u044c\u043d\u044b\u0435  \n  - 2 \u043d\u043e\u0432\u044b\u0445 \u0447\u0438\u0441\u043b\u043e\u0432\u044b\u0445 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0430, \u043f\u0435\u0440\u0435\u0434\u0435\u043b\u0430\u043d\u043d\u044b\u0445 \u0438\u0437 \u043a\u0430\u0442\u0435\u0433\u043e\u0440\u0438\u0430\u043b\u044c\u043d\u044b\u0445: **\"enginePower\" \u0438 \"engineDisplacement\"**\n  \n\u0412\u044b\u0431\u0440\u043e\u0441\u044b \u043d\u0435 \u0443\u0434\u0430\u043b\u044f\u043b\u0438\u0441\u044c\n  \n\u0414\u0430\u0442\u0430\u0441\u0435\u0442 \u0441\u043e\u0434\u0435\u0440\u0436\u0438\u0442 10 \u0447\u0438\u0441\u043b\u043e\u0432\u044b\u0445 \u0438 10 \u043a\u0430\u0442\u0435\u0433\u043e\u0440\u0438\u0430\u043b\u044c\u043d\u044b\u0445 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u043e\u0432  \n\n\u041f\u043e\u043a\u0430 \u0441\u043e\u0445\u0440\u0430\u043d\u0435\u043d\u044b \u0432\u0441\u0435 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0438, \u0432\u043a\u043b\u044e\u0447\u0430\u044f \u0441\u0438\u043b\u044c\u043d\u043e \u0441\u043a\u043e\u0440\u0440\u0435\u043b\u0438\u0440\u043e\u0432\u0430\u043d\u043d\u044b\u0435 \u0438 \u043e\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u044b \u043a\u0430\u043d\u0434\u0438\u0434\u0430\u0442\u044b \u043d\u0430 \u0443\u0434\u0430\u043b\u0435\u043d\u0438\u0435:\n**\"modelDate\", \"engineDisplacement\", \"date_power5\", \"date_power7\", \"date_power9\"**","cf65be19":"\u0418\u0437 \u0447\u0438\u0441\u043b\u043e\u0432\u044b\u0445, \u043a\u0430\u043a \u0438 \u043f\u043b\u0430\u043d\u0438\u0440\u043e\u0432\u0430\u043b\u0438 \u0432\u044b\u0448\u0435, \u0441\u0434\u0435\u043b\u0430\u0435\u043c:  \n    'model_age' - \u043d\u043e\u0432\u0438\u0437\u043d\u0430 \u043c\u043e\u0434\u0435\u043b\u0438 \u043d\u0430 \u043c\u043e\u043c\u0435\u043d\u0442 \u043f\u0440\u043e\u0438\u0437\u0432\u043e\u0434\u0441\u0442\u0432\u0430  \n    'km_per_year' - \u0438\u043d\u0442\u0435\u043d\u0441\u0438\u0432\u043d\u043e\u0441\u0442\u044c \u044d\u043a\u0441\u043f\u043b\u0443\u0430\u0442\u0430\u0446\u0438\u0438(\u043f\u0440\u043e\u0431\u0435\u0433\/\u0433\u043e\u0434)","2df3f170":"\u0421\u0440\u0430\u0432\u043d\u0438\u0432\u0430\u0435\u043c train \u0438 test","4cb53a01":"\u041f\u0435\u0440\u0435\u0434\u0430\u0435\u043c \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u044b \u0440\u0430\u0431\u043e\u0442\u044b \u043d\u0430\u0431\u043e\u0440\u0430 \u0438\u0437 \u0447\u0435\u0442\u044b\u0440\u0435\u0445 \u0440\u0435\u0433\u0440\u0435\u0441\u0441\u043e\u0440\u043e\u0432 \u043d\u0430 5-\u0442\u0438 \u0444\u043e\u043b\u0434\u0430\u0445 \u043a\u0430\u0436\u0434\u044b\u0439 \u0432 \u043c\u0435\u0442\u0430-\u0440\u0435\u0433\u0440\u0435\u0441\u0441\u043e\u0440","2a3e05bb":"\u041f\u043e\u0441\u043c\u043e\u0442\u0440\u0438\u043c \u043d\u0430 \u0437\u043d\u0430\u0447\u0438\u043c\u043e\u0441\u0442\u044c \u0447\u0438\u0441\u043b\u043e\u0432\u044b\u0445 \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u044b\u0445","8f1a1057":"\u041e\u0434\u043d\u0430\u043a\u043e \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442 submission \u043d\u0430 kaggle \u0443\u0445\u0443\u0434\u0448\u0438\u043b\u0441\u044f: 14.96282","19a22c4c":"\u041f\u0440\u043e\u0431\u0443\u0435\u043c \u043b\u043e\u0433\u0430\u0440\u0438\u0444\u043c\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 \u0446\u0435\u043b\u0435\u0432\u043e\u0439 \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u043e\u0439","83cb4748":"### \u0422\u0435\u043f\u0435\u0440\u044c \u043f\u0440\u0438\u0432\u043e\u0434\u0438\u043c \u0441\u0442\u043e\u043b\u0431\u0446\u044b \u0432 train \u0432 \u0441\u043e\u043e\u0442\u0432\u0435\u0442\u0441\u0442\u0432\u0438\u0435 \u0441\u043e \u0441\u0442\u043e\u043b\u0431\u0446\u0430\u043c\u0438 \u0432 test","be2dfcc6":"### Model 2. CatBoost","801c74a4":"\u041f\u043e \u0430\u043d\u0430\u043b\u043e\u0433\u0438\u0438 \u0441 test \u0434\u043e\u0431\u0430\u0432\u0438\u043c \u0432 train \u043f\u0440\u0438\u0437\u043d\u0430\u043a 'vendor'","77344921":"### Model 1. Random Forest.\n\u0421 \u044d\u0442\u043e\u0439 \u043c\u043e\u0434\u0435\u043b\u044c\u044e \u0431\u0443\u0434\u0435\u043c \u0441\u0440\u0430\u0432\u043d\u0438\u0432\u0430\u0442\u044c \u0434\u0440\u0443\u0433\u0438\u0435.","bdaaac34":"**\u0420\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442 submission: 14.72006**","2c33515b":"**\u0412\u0438\u0434\u0438\u043c \u0437\u043d\u0430\u0447\u0438\u0442\u0435\u043b\u044c\u043d\u043e\u0435 \u0443\u043b\u0443\u0447\u0448\u0435\u043d\u0438\u0435 \u043c\u0435\u0442\u0440\u0438\u043a\u0438 MAPE: 14.55663 \u0432\u043c\u0435\u0441\u0442\u043e 16.37839**\n\u041f\u043e\u043f\u0440\u043e\u0431\u0443\u0435\u043c \u0442\u0435\u043f\u0435\u0440\u044c \u043e\u0431\u0443\u0447\u0438\u0442\u044c Random Forest \u043d\u0430 \u0432\u0441\u0435\u043c \u0442\u0440\u0435\u043d\u0438\u0440\u043e\u0432\u043e\u0447\u043d\u043e\u043c \u0434\u0430\u0442\u0430\u0441\u0435\u0442\u0435 train (\u043d\u0435 \u043d\u0430 X_train) \u0441 \u043b\u043e\u0433\u0430\u0440\u0438\u0444\u043c\u0438\u0447\u0435\u0441\u043a\u0438 \u043f\u0440\u0435\u043e\u0431\u0440\u0430\u0437\u043e\u0432\u0430\u043d\u043d\u043e\u0439 \u0446\u0435\u043b\u0435\u0432\u043e\u0439 \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u043e\u0439 \u0438 \u0441\u0434\u0435\u043b\u0430\u0442\u044c submission"}}