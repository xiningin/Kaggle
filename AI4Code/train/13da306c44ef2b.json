{"cell_type":{"178fa36d":"code","9550ad12":"code","aa4e24da":"code","5535aa77":"code","c6ca7204":"code","37e733a0":"code","7546ca76":"code","7250a781":"code","27cac58a":"code","b7d89461":"code","5e0b4774":"code","1f94471f":"code","728ce4f6":"code","44d5acea":"code","f517aa0a":"code","580f01de":"code","5b0e15e1":"code","8bc998aa":"code","4be8dfe4":"code","b82cc518":"code","559f9044":"code","492f760e":"code","b5b88228":"code","6e9d7807":"code","9760989f":"code","7559e461":"code","54dce9df":"code","86213e8b":"code","aa4b5f3c":"code","34201b9c":"markdown","7d0486c5":"markdown","4c25180f":"markdown","e1830ba2":"markdown","087b014a":"markdown","b7c03d5a":"markdown","15a80257":"markdown","4b5f63c1":"markdown","79e84318":"markdown","6be9353a":"markdown","609f3839":"markdown","9f93f644":"markdown","13217e20":"markdown","89c34253":"markdown","404bfe74":"markdown","b89d39f4":"markdown","3847f519":"markdown","463f31b8":"markdown","9827e7e8":"markdown","a8999e5d":"markdown"},"source":{"178fa36d":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n%matplotlib inline","9550ad12":"vids = pd.read_csv('..\/input\/youtube-new\/INvideos.csv')\ncategories = pd.read_json('..\/input\/youtube-new\/IN_category_id.json')","aa4e24da":"vids.head(3)","5535aa77":"# Handling datatime data\nvids[\"trending_date\"] = pd.to_datetime(vids[\"trending_date\"] , format=\"%y.%d.%m\").dt.date\npublish_time = pd.to_datetime(vids['publish_time'], format='%Y-%m-%dT%H:%M:%S.%fZ')\nvids['publish_date'] = publish_time.dt.date\nvids['publish_time'] = publish_time.dt.time\nvids['publish_hour'] = publish_time.dt.hour\n\nvids.head()","c6ca7204":"categories.head()","37e733a0":"categories[\"items\"][0]","7546ca76":"categories.shape , vids.shape","7250a781":"# Using dictionary compresension to map categories\ncats ={int(cat[\"id\"]):cat[\"snippet\"][\"title\"] for cat in categories[\"items\"]}\n\nvids[\"categories\"] = vids[\"category_id\"].map(cats)","27cac58a":"vids.head()","b7d89461":"# Number of word in title\n\nvids[\"title_length\"] = vids[\"title\"].apply(lambda x : len(x.replace(\" \" , \"\")))\n\n# Number of external links in description\n# We have heard youtube tends to favor videos with min external links, lets see if it effects trending\ndef ext_link_cnt(text):\n    import re\n    urls = re.findall('http[s]?:\/\/(?:[a-zA-Z]|[0-9]|[$-_@.&+]|[!*\\(\\),]|(?:%[0-9a-fA-F][0-9a-fA-F]))+', text)\n    return len(urls)\n\nvids[\"ext_links\"] = vids[\"description\"].fillna(\" \").apply(ext_link_cnt)","5e0b4774":"l_d_ratio = (vids[\"likes\"]\/vids[\"dislikes\"]).dropna().median()\nvids['dislike_percentage'] = (vids['dislikes']+1) \/ (vids['dislikes'] + vids['likes'] + l_d_ratio + 1)\nvids['dislike_percentage'].head()","1f94471f":"# Fixing skewness\nvids['likes_log'] = np.log(vids['likes'] + 1)\nvids['views_log'] = np.log(vids['views'] + 1)\nvids['dislikes_log'] = np.log(vids['dislikes'] + 1)\nvids['comment_log'] = np.log(vids['comment_count'] + 1)\n\n\n# Views, Comments, Likes and Dislikes Visulization\nplt.figure(figsize = (12,6))\n\nplt.subplot(221)\ng1 = sns.distplot(vids['views_log'])\ng1.set_title(\"VIEWS LOG DISTRIBUITION\", fontsize=16)\n\nplt.subplot(224)\ng2 = sns.distplot(vids['likes_log'],color='green')\ng2.set_title('LIKES LOG DISTRIBUITION', fontsize=16)\n\nplt.subplot(223)\ng3 = sns.distplot(vids['dislikes_log'], color='r')\ng3.set_title(\"DISLIKES LOG DISTRIBUITION\", fontsize=16)\n\nplt.subplot(222)\ng4 = sns.distplot(vids['comment_log'])\ng4.set_title(\"COMMENTS LOG DISTRIBUITION\", fontsize=16)\n\nplt.subplots_adjust(wspace = 0.2, hspace = 0.4,top = 0.9)\nplt.savefig(\"firstvisual.png\" , bbox_inches=\"tight\")\nplt.show()","728ce4f6":"# Now several videos have been treading for many times, lets get rid of these for the purpose of our analysis\n# to avoid duplicates\n\nvids_last = vids.drop_duplicates(subset=['video_id'], keep='last', inplace=False)\nvids_first = vids.drop_duplicates(subset=['video_id'], keep='first', inplace=False)\nvids_first.head(3)","44d5acea":"# Missing Values\nvids.isnull().sum()","f517aa0a":"null_data = vids[vids[\"categories\"].isnull()]\nnull_data.head()","580f01de":"vids[\"categories\"].fillna(\"Activism & Random\", inplace = True) \nvids[vids[\"category_id\"]  == 29]\nvids[vids[\"category_id\"]  == 29].tail(2)","5b0e15e1":"vids[\"days_before_trend\"] = (vids.trending_date - vids.publish_date) \/ np.timedelta64(1, 'D')\nvids[\"days_before_trend\"] = vids[\"days_before_trend\"].astype(int)","8bc998aa":"vids.loc[(vids['days_before_trend'] < 1), 'days_before_trend'] = 1\nvids[\"views_per_day\"] = vids[\"views\"] \/ vids[\"days_before_trend\"]\nvids[\"views_per_day\"] = vids[\"views_per_day\"]\n\nvids.head()","4be8dfe4":"vids.drop([\"title\", \"description\"] , axis = 1 , inplace=True)\nvids.to_csv(\"preprocessed_vids.csv\" , index=False)","b82cc518":"plt.style.use(\"ggplot\")","559f9044":"plt.figure(figsize=(10,8))\n\nsns.barplot(vids_first[\"publish_hour\"].value_counts().index , vids_first[\"publish_hour\"].value_counts().values)\n\nplt.title(\"Trending v\/s Time published\" , fontsize=25 , fontweight=\"bold\")\nplt.xlabel(\"Time published in 24 hr format\" , fontsize=18)\nplt.ylabel(\"Amount of videos that made it to trending\" , fontsize=18)\n\nplt.savefig(\"trendingvtime.png\" , bbox_inches=\"tight\")\nplt.show()","492f760e":"fig = plt.figure(figsize=(12,12))\nax = fig.add_subplot(111)\n\nnumerical_columns = [col for col in vids if vids[col].dtype in [\"int64\",\"float64\"]]\nsns.heatmap(vids[numerical_columns].corr(\"spearman\"), annot=True, cmap=\"YlGnBu\", ax=ax , cbar=False)\n\nplt.savefig(\"featurecorr.png\" , bbox_inches=\"tight\")\nplt.show()","b5b88228":"fig = plt.figure(figsize=(10,8))\n\nplt.plot(vids[\"title_length\"].value_counts().sort_index().index, \n         vids[\"title_length\"].value_counts().sort_index().values)\n\nplt.title(\"Title Word Count v\/s Trending\" , fontsize=22 , fontweight=\"bold\")\nplt.xlabel(\"Title Word Count\" , fontsize=18)\nplt.ylabel(\"Number of videos treading\", fontsize=18)\n\nplt.savefig(\"titleword.png\" , bbox_inches=\"tight\")\nplt.show()","6e9d7807":"fig = plt.figure(figsize=(10,8))\n\nplt.plot(vids[\"ext_links\"].value_counts().sort_index().index,\n         vids[\"ext_links\"].value_counts().sort_index().values)\n\nplt.title(\"External Links in Video Discription v\/s Trending\" , fontsize=22 , fontweight=\"bold\")\nplt.xlabel(\"Number of External Links\" , fontsize=18)\nplt.ylabel(\"Number of Videos Treading\", fontsize=18)\n\nplt.savefig(\"ext_links.png\" , bbox_inches=\"tight\")\nplt.show()","9760989f":"fig = plt.figure(figsize=(10,10))\n\nch_names = vids.groupby(\"channel_title\")[\"video_id\"].count().sort_values(ascending=False).index[:20]\ncnts = vids.groupby(\"channel_title\")[\"video_id\"].count().sort_values(ascending=False).values[:20]\n\nplt.barh(ch_names[::-1] , cnts[::-1])\nplt.title(\"Most Trending Channels\" , fontsize=24 , fontweight=\"bold\")\n\nplt.savefig(\"trending_channels.png\" , bbox_inches=\"tight\")\nplt.show()","7559e461":"fig = plt.figure(figsize=(10,10))\n\ntopic_names = vids.groupby(\"categories\")[\"video_id\"].count().sort_values(ascending=False).index[:10]\ncnts = vids.groupby(\"categories\")[\"video_id\"].count().sort_values(ascending=False).values[:10]\n\nplt.barh(topic_names[::-1] , cnts[::-1])\nplt.title(\"Most Trending Topics\" , fontsize=24 , fontweight=\"bold\")\n\nplt.savefig(\"trending_topics.png\" , bbox_inches=\"tight\")\nplt.show()","54dce9df":"fig = plt.figure(figsize=(10,8))\n\nplt.plot(vids[\"days_before_trend\"].value_counts().sort_index().index,\n        np.log(vids[\"days_before_trend\"].value_counts().sort_index().values))\n\nplt.xlabel(\"Days Befores Trending\")\nplt.ylabel(\"log(Number of Videos)\" , fontstyle=\"italic\")\nplt.title(\"Days Taken to Trend\" , fontsize=20 , fontweight=\"bold\")\n\nplt.savefig(\"days_taken.png\" , bbox_inches=\"tight\")\nplt.show()","86213e8b":"disliked_vids = vids.copy().sort_values(by=\"dislike_percentage\" , ascending=False)[:20]\ndisliked_vids.sort_values(by=\"dislikes\" , ascending=False , inplace=True)\n\nfig = plt.figure(figsize=(10,8))\nax = fig.add_subplot(111)\n\nsns.barplot(np.arange(0,20) , disliked_vids[\"dislikes\"] , ax=ax , color=\"r\")\nsns.barplot(np.arange(0,20) , disliked_vids[\"likes\"] , ax=ax , color=\"b\")\n\nplt.ylabel(\"Likes & Dislikes\")\nplt.xlabel(\"Videos\")\nplt.title(\"Videos with hightest dislike to like ratio\")\nplt.xticks([])\n\nplt.savefig(\"hated.png\" , bbox_inches=\"tight\")\nplt.show()","aa4b5f3c":"from wordcloud import WordCloud, STOPWORDS\nfrom PIL import Image\nimport urllib\nimport requests\n\n\nmask = np.array(Image.open(requests.get('http:\/\/www.clker.com\/cliparts\/O\/i\/x\/Y\/q\/P\/yellow-house-hi.png', stream=True).raw))\n\n# This function takes in your text and your mask and generates a wordcloud. \ndef generate_wordcloud(mask):\n    word_cloud = WordCloud(width = 512, height = 512, background_color='white', stopwords=STOPWORDS, mask=mask).generate(str(vids[\"tags\"]))\n    plt.figure(figsize=(10,8),facecolor = 'white', edgecolor='blue')\n    plt.imshow(word_cloud)\n    plt.axis('off')\n    plt.tight_layout(pad=0)\n    plt.savefig(\"wordcloud.png\" , bbox_inches=\"tight\")\n    plt.show()\n    \ngenerate_wordcloud(mask)","34201b9c":"### Dislike percentage\n#### Ratio of dislikes to total assessments i.e likes + dislikes and how they flare on trending.\n#### We handle videos that have zero likes and dislikes by implementing weighted laplance moving.","7d0486c5":"### External Links in Video Discription v\/s Trending","4c25180f":"### Views Per Day","e1830ba2":"### Visulazing likes, dislikes, comments & views","087b014a":"### Days before trending","b7c03d5a":"### Most trending channels\n#### Channels with the high videos on trending","15a80257":"> # Data Preprocessing","4b5f63c1":"### Title Word Count v\/s Trending","79e84318":"### Any publicity is good publicity \/ Most Hated Videos\n#### In this section we look at the most hated videos i.e. that got trending by dislikes.","6be9353a":"### Corelation between features ","609f3839":"> # **Data Visualization**","9f93f644":"### Tags that help Vidoes reach Trending\n#### Lets create a workcloud to a picture of most popular tags.","13217e20":"#### They all have cateory id of 29, lets assign a suitable category to this id","89c34253":"### Handling missing values","404bfe74":"### Best time to publish videos","b89d39f4":"### Most trending topics\n#### Topics which occupy most space on trending","3847f519":"> #### We see a sharp dip from 0 to 2 and then a rise again.\n> #### This maybe happing because music vidoes easily to trending and include more links to their other social media whereas channels include 2-4 links.","463f31b8":"#### Partly inspired from - [Rohit's work](https:\/\/www.kaggle.com\/iamrohitsingh\/youtube-india-trending-data-exploration)","9827e7e8":"### Days before trending\n#### Distribution of how many days on average it takes for a video to make it to trending.","a8999e5d":"#### Now lets finalize our modifications and save the dataframe"}}