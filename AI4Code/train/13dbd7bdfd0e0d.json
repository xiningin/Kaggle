{"cell_type":{"1450e20b":"code","d690a31b":"code","8ef4f56f":"code","7260a08f":"code","17d67c35":"code","ae6581f7":"code","d66a6fc3":"code","e8dd8159":"code","6ff6f675":"code","e3491538":"code","1a28a35a":"code","d8bd11cc":"markdown","789c0bf4":"markdown","15be878e":"markdown","35579350":"markdown","086d433c":"markdown","a038c5e8":"markdown"},"source":{"1450e20b":"article = \"In an attempt to build an AI-ready workforce, Microsoft announced Intelligent Cloud Hub which has been launched to empower the next generation of students with AI-ready skills. Envisioned as a three-year collaborative program, Intelligent Cloud Hub will support around 100 institutions with AI infrastructure, course content and curriculum, developer support, development tools and give students access to cloud and AI services. As part of the program, the Redmond giant which wants to expand its reach and is planning to build a strong developer ecosystem in India with the program will set up the core AI infrastructure and IoT Hub for the selected campuses. The company will provide AI development tools and Azure AI services such as Microsoft Cognitive Services, Bot Services and Azure Machine Learning.According to Manish Prakash, Country General Manager-PS, Health and Education, Microsoft India, said, 'With AI being the defining technology of our time, it is transforming lives and industry and the jobs of tomorrow will require a different skillset. This will require more collaborations and training and working with AI. That\u2019s why it has become more critical than ever for educational institutions to integrate new cloud and AI technologies. The program is an attempt to ramp up the institutional set-up and build capabilities among the educators to educate the workforce of tomorrow.' The program aims to build up the cognitive skills and in-depth understanding of developing intelligent cloud connected solutions for applications across industry. Earlier in April this year, the company announced Microsoft Professional Program In AI as a learning track open to the public. The program was developed to provide job ready skills to programmers who wanted to hone their skills in AI and data science with a series of online courses which featured hands-on labs and expert instructors as well. This program also included developer-focused AI school that provided a bunch of assets to help build AI skills.\"\nprint(article)","d690a31b":"# - Libraries -\nfrom nltk.corpus import stopwords\nfrom nltk.cluster.util import cosine_distance\nimport numpy as np\nimport networkx as nx\nimport gc","8ef4f56f":"# Custom Function: Split Sentences\ndef sentence_split(txt):\n    prg = txt.split(\". \")\n    sentences = []\n    \n    for sentence in prg:\n        sentences.append(sentence.replace(\"[^a-zA-Z]\", \" \").split(\" \"))\n    sentences.pop()\n    \n    return sentences\n    \n# Custom Function: Check Sentence Similarity\ndef sentence_similarity(sent1, sent2, stopwords=None):\n    if stopwords is None:\n        stopwords = []\n    \n    sent1 = [w.lower for w in sent1]\n    sent2 = [w.lower for w in sent2]\n    \n    all_words = list(set(sent1 + sent2))\n    \n    vector1 = [0] * len(all_words)\n    vector2 = [0] * len(all_words)    \n    \n    # Vector for the Sentence#1\n    for w in sent1:\n        if w in stopwords:\n            continue\n        vector1[all_words.index(w)] += 1\n \n    # Vector for the Sentence#2\n    for w in sent2:\n        if w in stopwords:\n            continue\n        vector2[all_words.index(w)] += 1\n \n    return 1 - cosine_distance(vector1, vector2)\n    \n# Custom Function: Similarity Matrix\ndef build_similarity_matrix(sentences, stop_words):\n    # Empty Matrix\n    similarity_matrix = np.zeros((len(sentences), len(sentences)))\n \n    for idx1 in range(len(sentences)):\n        for idx2 in range(len(sentences)):\n            if idx1 == idx2: #ignore if both are same sentences\n                continue \n            similarity_matrix[idx1][idx2] = sentence_similarity(sentences[idx1], sentences[idx2], stop_words)\n\n    return similarity_matrix\n","7260a08f":"\"\"\" -- Combine all the above function into one -- \"\"\"\n# Custom Function: Generate Summary\ndef generate_summary(txt, top_n=5):\n    \n    stop_words = stopwords.words('english')\n    summarize_text = []\n    \n    sentences = sentence_split(txt)  #Custom Function: Split Sentences\n    \n    sentence_similarity_martix = build_similarity_matrix(sentences, stop_words)    #Custom Function: Check Sentence Similarity\n    \n    sentence_similarity_graph = nx.from_numpy_array(sentence_similarity_martix)     #Rank Sentences in Similarity Matrix\n    scores = nx.pagerank(sentence_similarity_graph)\n    \n    ranked_sentence = sorted(((scores[i],s) for i,s in enumerate(sentences)), reverse=True)  #Sort Rank & pick top sentences\n    #print(\"Indexes of top ranked_sentence order are \", ranked_sentence)     \n\n    for i in range(top_n):\n        summarize_text.append(\" \".join(ranked_sentence[i][1]))\n\n    print(\"Summarize Text: \\n\", \". \".join(summarize_text))       #Output Summarized Text    ","17d67c35":"# Generate Text Summary\ngenerate_summary(article, 2)","ae6581f7":"# -Libraries -\nfrom transformers import TFAutoModelWithLMHead, AutoTokenizer","d66a6fc3":"model = TFAutoModelWithLMHead.from_pretrained(\"t5-base\")\ntokenizer = AutoTokenizer.from_pretrained(\"t5-base\")","e8dd8159":"# Define Input\ninput = tokenizer.encode(\"summarize: \" + article, return_tensors=\"tf\", max_length=512)\noutput = model.generate(input, max_length=150, min_length=40, length_penalty=2.0, num_beams=4,early_stopping=True)\nprint(\"Summarize Text: \\n\", tokenizer.decode(output[0], skip_special_tokens=True))","6ff6f675":"# -Library-\nfrom transformers import pipeline","e3491538":"# Define Pipeline\nsummarizer = pipeline(\"summarization\")","1a28a35a":"# Generate Summary\nprint(summarizer(article, max_length=150, min_length=40, do_sample=False))","d8bd11cc":"# 1. Using NLTK","789c0bf4":"# 3. Using Transformer (pipeline)\n","15be878e":"# Article Text\n\nThe article\/text that needs to be summarized","35579350":"# 2. Using Transformer (pre-trained model)\n\nNote: pretrained T5-base Transformer","086d433c":"# Different Ways to Perform Text Summarization\n\nIn this notebook, we're going to look at different ways to perform text summarization.  \n\n**Definition**: Summarization can be defined as a task of producing a concise and fluent summary while preserving key information and overall meaning. There are two types of summarization, abstractive and extractive summarization\n\n1. Abstractive Summarization  (Input document > understand context > semantics > create own summary)\n2. Extractive Summarization (Input document > sentences similarity > weight sentences > select sentences with higher rank)\n\nFor the scope of this notebook, we're going to focus on the **Extractive Summarization** technique. So lets get started !!\n\n\nPlease consider it to **UPVOTE** if you find it helpful :-).","a038c5e8":"As we can observe, The Transformer provided by HuggingFace makes it quite easy for performing the Text Summarization Task. The only downside to this is that the pre-trained models are size heavy (~ 1GB) & downloading these is dependent on the network bandwith and can significantly affect the task at hand."}}