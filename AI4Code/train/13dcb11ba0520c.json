{"cell_type":{"b3c7fcc0":"code","3a8b498d":"code","669f5df9":"code","80b83d24":"code","7cf4b9d6":"code","fd5513e9":"code","c46b73fa":"code","1e541d4e":"code","8df37ab2":"code","8f11803f":"code","fe2dc7d3":"code","9d0f6262":"code","bedba6fb":"code","b31940d8":"code","af0e7e55":"code","296c181c":"code","792b3092":"code","fa2a8c2c":"code","a244dfe9":"code","9aabf0ec":"code","ed169ec2":"code","f5101bb6":"code","97507b53":"code","14d81c4f":"code","f8c01b6b":"code","b8d2d15e":"code","46a9dda6":"code","155cd52a":"code","94cabbbc":"code","363bfbc8":"code","7575a5ee":"code","71cb443e":"code","6baca0b5":"code","297f9525":"code","0059a8c8":"code","5a26845e":"code","4b02c719":"code","d3151484":"code","80ef735d":"code","5e95bcd1":"code","34a8a4c9":"code","c2288866":"code","f1e63568":"code","7985c0b9":"code","4a114444":"code","7c581426":"code","beb1a467":"code","1b6b15e6":"code","efc466b0":"code","4a3e1264":"code","35c4013d":"code","6e31d8dd":"code","c49f3d3c":"code","f2f2c876":"code","52a8f711":"code","4a43cdc6":"code","77a8f3b4":"code","f52cdd78":"code","c9827704":"code","a763d1e7":"code","528e616b":"code","5a67bc0f":"code","6936a6b8":"code","157b47f8":"code","8c227e49":"code","bec2b273":"code","58db8f4e":"code","67e7c88c":"code","249cdc35":"code","93cf7932":"code","c147fd4b":"code","d61beed0":"code","a1579bd0":"markdown","30066c63":"markdown","4a3265f9":"markdown","7f23d118":"markdown","493c2205":"markdown","53b8a4bc":"markdown","b2f36f23":"markdown","d30fa937":"markdown","a9853ad0":"markdown","ba987820":"markdown","402c3aff":"markdown","02129f9b":"markdown","f17c4f3d":"markdown","d46fbfa6":"markdown","8b077994":"markdown","fc686e8e":"markdown","91cc42cf":"markdown","c9033946":"markdown","835d8d3f":"markdown","8b00d89b":"markdown","a6566cf2":"markdown","7f4f2821":"markdown","037ad1ac":"markdown","105f7b26":"markdown","0425df68":"markdown","856ffed1":"markdown","12d5238d":"markdown","42d9cf08":"markdown","f198b7d9":"markdown","cbe2b961":"markdown","9a4630b2":"markdown","48201d08":"markdown","53703825":"markdown","de1eac03":"markdown","49f6e2d5":"markdown","dda894f4":"markdown","4dbcea47":"markdown"},"source":{"b3c7fcc0":"# \ubd84\uc11d\nimport numpy as np\nimport pandas as pd\n\n# \uc2dc\uac01\ud654\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nplt.style.use('fivethirtyeight')\nplt.rcParams[\"figure.figsize\"] = (8, 6)\n\n\n# \ubaa8\ub378\ub9c1\nfrom sklearn.ensemble import RandomForestClassifier\nfrom lightgbm import LGBMClassifier\nfrom catboost import CatBoostClassifier\nfrom sklearn.linear_model import LogisticRegression\n\n# \uc804\ucc98\ub9ac\nfrom sklearn.preprocessing import LabelEncoder\nfrom sklearn.preprocessing import MinMaxScaler\n\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.model_selection import GridSearchCV\n\n# \uc2a4\ucf54\uc5b4\ub9c1\nfrom sklearn.metrics import f1_score\nfrom sklearn.metrics import *\n\n\nimport warnings\nwarnings.filterwarnings('ignore')\n\n# random_state\nseed = 3","3a8b498d":"train = pd.read_csv(\"..\/input\/kakr-4th-competition\/train.csv\")\ntest = pd.read_csv(\"..\/input\/kakr-4th-competition\/test.csv\")\nsubmission = pd.read_csv(\"..\/input\/kakr-4th-competition\/sample_submission.csv\")\n\nprint('train shape: ', train.shape)\nprint('test shape: ', test.shape)\nprint('submission shape: ', submission.shape)","669f5df9":"train.head()","80b83d24":"# EDA\uc640 Feature Engineering\uc744 \uc704\ud574\uc11c\ub294 \ubcf5\uc0ac\ud55c \ub370\uc774\ud130\ub97c \uc0ac\uc6a9\ud558\ub294 \uac83\uc774 \uc88b\ub2e4.\ntmp_train = train.copy()","7cf4b9d6":"# \ub300\ub7b5\uc801\uc778 \ub370\uc774\ud130 \uc0b4\ud3b4\ubcf4\uae30\ntmp_train.info()","fd5513e9":"# \ubcc0\uc218\uba85 \ucc98\ub9ac\ntmp_train['income'] = tmp_train['income'].map(lambda x: 1 if x=='>50K' else 0)","c46b73fa":"tmp_train['income'].value_counts()","1e541d4e":"sns.countplot('income', data=tmp_train);","8df37ab2":"plt.figure(figsize=(12, 8))\n\ntmp_train.loc[tmp_train['income'] == 0, 'fnlwgt'].plot(kind='kde', alpha=0.5, label='income == 0')\ntmp_train.loc[tmp_train['income'] == 1, 'fnlwgt'].plot(kind='kde', alpha=0.5, label='income == 1')\n\nplt.legend()\nplt.show()","8f11803f":"print('\ucd5c\uc18c \uc5f0\ub839: ', tmp_train['age'].min())\nprint('\ucd5c\uace0 \uc5f0\ub839: ', tmp_train['age'].max())\nprint('\ud3c9\uade0 \uc5f0\ub839: {:.2f}'.format(tmp_train['age'].mean()))","fe2dc7d3":"# \uc18c\ub4dd\uc5d0 \ub530\ub978 \uc5f0\ub839 \uad6c\ubd84\n\nplt.figure(figsize=(12, 8))\n\ntmp_train.loc[tmp_train['income'] == 0, 'age'].plot(kind='kde', label='income == 0')\ntmp_train.loc[tmp_train['income'] == 1, 'age'].plot(kind='kde', label='income == 1')\n\nplt.title('Distribution of ages \\nby income')\nplt.xticks(range(0, 100, 5))\nplt.legend()\nplt.show()","9d0f6262":"def make_age_band(df):\n    df['age_band'] = 0\n    df.loc[df['age'] < 20, 'age_band'] = 10\n    df.loc[(df['age'] >= 20) & (df['age'] < 30), 'age_band'] = 20\n    df.loc[(df['age'] >= 30) & (df['age'] < 40), 'age_band'] = 30\n    df.loc[(df['age'] >= 40) & (df['age'] < 50), 'age_band'] = 40\n    df.loc[(df['age'] >= 50) & (df['age'] < 60), 'age_band'] = 50\n    df.loc[(df['age'] >= 60) & (df['age'] < 70), 'age_band'] = 60\n    df.loc[(df['age'] >= 70) & (df['age'] < 80), 'age_band'] = 70\n    df.loc[(df['age'] >= 80) & (df['age'] < 90), 'age_band'] = 80\n    df.loc[(df['age'] >= 90), 'age_band'] = 90\n    \n    return df\n\ntmp_train = make_age_band(tmp_train)","bedba6fb":"# \uacb0\uacfc \ud655\uc778\ntmp_train['age_band'].value_counts().sort_index()","b31940d8":"fig, ax = plt.subplots(1, 2, figsize=(16, 8))\n\nsns.distplot(tmp_train['capital_gain'],kde=False, ax=ax[0])\nsns.distplot(tmp_train['capital_loss'],kde=False, ax=ax[1])\n\nplt.show()","af0e7e55":"# capital_gain\uacfc capital_loss \uac12\uc774 0\uc774 \uc544\ub2cc \ub370\uc774\ud130 \ud655\uc778\n\ncapital_gain_value = tmp_train.loc[tmp_train['capital_gain'] != 0, 'capital_gain']\ncapital_loss_value = tmp_train.loc[tmp_train['capital_loss'] != 0, 'capital_loss']\n\nprint('capital_gain: {}\\t{:.2f}%'.format(len(capital_gain_value), len(capital_gain_value) \/ len(tmp_train) * 100))\nprint('capital_loss: {}\\t{:.2f}%'.format(len(capital_gain_value), len(capital_loss_value) \/ len(tmp_train) * 100))","296c181c":"# 0\uc774 \uc544\ub2cc \uac12\uc5d0 \ub300\ud55c \ubd84\ud3ec \ud655\uc778\n\nfig, ax = plt.subplots(1, 2, figsize=(16, 8))\nplt.suptitle('capital with not 0')\n\ntmp_train.loc[tmp_train['capital_gain'] != 0, 'capital_gain'].plot(kind='hist', ax=ax[0])\nax[0].set_xlabel('capital_gain'); ax[0].set_ylabel('')\n\ntmp_train.loc[tmp_train['capital_loss'] != 0, 'capital_loss'].plot(kind='hist', ax=ax[1])\nax[1].set_xlabel('capital_loss'); ax[1].set_ylabel('')\n\n3plt.show()","792b3092":"# 0\uc774 \uc544\ub2cc \ub370\uc774\ud130\uc5d0 \ub300\ud558\uc5ec \ud0c0\uac9f\uc5d0 \ub530\ub978 \ubd84\ud3ec \ud655\uc778\n\nfig, ax = plt.subplots(1, 2, figsize=(24, 8))\n\n# capital_gain\uc774 0\uc774 \uc544\ub2cc \ub370\uc774\ud130\uc5d0 \ub300\ud55c income \ube44\uad50\ntmp_train.loc[(tmp_train['capital_gain'] != 0) & (tmp_train['income'] == 0), 'capital_gain'].plot(kind='kde', label='capital_gain with income == 0', ax=ax[0])\ntmp_train.loc[(tmp_train['capital_gain'] != 0) & (tmp_train['income'] == 1), 'capital_gain'].plot(kind='kde', label='capital_gain with income == 1', ax=ax[0])\n\nax[0].set_title('Distribution of income \\nwith capital_gain != 0')\nax[0].set_ylabel('')\nax[0].legend()\n\n\n# capital_loss\uac00 0\uc774 \uc544\ub2cc \ub370\uc774\ud130\uc5d0 \ub300\ud55c income \ube44\uad50\ntmp_train.loc[(tmp_train['capital_loss'] != 0) & (tmp_train['income'] == 0), 'capital_loss'].plot(kind='kde', label='capital_loss with income == 0', ax=ax[1])\ntmp_train.loc[(tmp_train['capital_loss'] != 0) & (tmp_train['income'] == 1), 'capital_loss'].plot(kind='kde', label='capital_loss with income == 1', ax=ax[1])\n\nax[1].set_title('Distribution of income \\nwith capital_loss != 0')\nax[1].set_ylabel('')\nax[1].legend()\n\nplt.show()","fa2a8c2c":"# 0\uc774 \uc544\ub2cc \uac12\uc5d0 \ub300\ud558\uc5ec \ub370\uc774\ud130\uac00 capital_gain\uacfc capital_loss\uac00 \ud55c\ucabd\uc5d0\ub9cc \uc874\uc7ac\ud558\ub294\uc9c0 \ud655\uc778\ntmp_train[(tmp_train['capital_gain'] != 0) & (tmp_train['capital_loss'] != 0)]","a244dfe9":"# \ub370\uc774\ud130 \ubcc0\ud658\n\n# \uac01 \ubcc0\uc218\uc758 \ub85c\uadf8 \ubcc0\uc218 \uc0dd\uc131\ntmp_train['capital_gain_log'] = 0\ntmp_train['capital_loss_log'] = 0\n\n# log\uac12 \uad6c\ud558\uae30\ntmp_train['capital_gain_log'] = tmp_train['capital_gain'].map(lambda x: np.log1p(x))\ntmp_train['capital_loss_log'] = tmp_train['capital_loss'].map(lambda x: (-1) * np.log1p(x)) # loss\ub294 \uc74c\uc218\ub85c \ucc98\ub9ac\n\n\n# capital_log \ubcc0\uc218 \uc0dd\uc131\ntmp_train['capital_log'] = 0\n\n# capital_loss_log\uc5d0\ub294 \uc74c\uc218 \uac12\uc73c\ub85c \uc801\uc6a9\ud574\uc900\ub2e4\ntmp_train['capital_log'] = tmp_train['capital_gain_log'] + tmp_train['capital_loss_log']","9aabf0ec":"# \ubd84\ud3ec \ud655\uc778\nsns.distplot(tmp_train['capital_log'], kde=False);","ed169ec2":"# log \ub370\uc774\ud130 \uc0ad\uc81c\ntmp_train = tmp_train.drop(columns=['capital_gain_log', 'capital_loss_log'])","f5101bb6":"tmp_train[['education', 'education_num']].value_counts()","97507b53":"# education_num \uc0ad\uc81c\ntmp_train = tmp_train.drop('education_num', axis=1)","14d81c4f":"# education \ubd84\ud3ec \ud655\uc778\nfig, ax = plt.subplots(1, 2, figsize=(24, 6))\n\ntmp_train['education'].value_counts().plot(kind='bar', ax=ax[0])\n\n# \ud0c0\uac9f\uc5d0 \ub530\ub978 \ubd84\ud3ec \ud655\uc778\nsns.countplot(x='education', hue='income', data=tmp_train, ax=ax[1])\nax[1].tick_params(axis='x', labelrotation=90)\nax[1].legend(loc='upper right')\nax[1].set_ylabel('')\n\nplt.show()","f8c01b6b":"train['marital_status'].value_counts()","b8d2d15e":"train['relationship'].value_counts()","46a9dda6":"fig, ax = plt.subplots(1, 2, figsize=(24, 6))\n\nsns.countplot(x='marital_status', hue='income', data=tmp_train, ax=ax[0])\nax[0].tick_params(axis='x', labelrotation=45)\nax[0].legend()\nax[0].set_ylabel('')\n\nsns.countplot(x='relationship', hue='income', data=tmp_train, ax=ax[1])\nax[1].tick_params(axis='x', labelrotation=45)\nax[1].legend()\nax[1].set_ylabel('')\n\nplt.show()","155cd52a":"tmp_train['race'].value_counts()","94cabbbc":"tmp_train['native_country'].value_counts()","363bfbc8":"fig, ax = plt.subplots(1, 2, figsize=(24, 6))\n\nsns.countplot(x='race', hue='income', data=tmp_train, ax=ax[0])\nax[0].tick_params(axis='x', labelrotation=45)\nax[0].legend()\nax[0].set_ylabel('')\n\nsns.countplot(x='native_country', hue='income', data=tmp_train, ax=ax[1])\nax[1].tick_params(axis='x', labelrotation=45)\nax[1].legend()\nax[1].set_ylabel('')\n\nplt.show()","7575a5ee":"# native_country\uc5d0\uc11c United-States\uac00 \uc544\ub2cc \uad6d\uac00 \ud655\uc778\n# \uac12\uc774 \ub108\ubb34 \uc791\ub2e4\nsns.countplot(x='native_country', hue='income', data=tmp_train[tmp_train['native_country'] != 'United-States']);","71cb443e":"# native_country \uac12 \ubcc0\uacbd\ntmp_train['native_country_bin'] = tmp_train['native_country'].map(lambda x: 1 if x == 'United-States' else 0)","6baca0b5":"tmp_train['native_country_bin'].value_counts()","297f9525":"tmp_train['workclass'].value_counts()","0059a8c8":"tmp_train['occupation'].value_counts()","5a26845e":"# workclass\uc640 occupation \ub370\uc774\ud130 \ubd84\ud3ec \ud655\uc778\n\nfig, ax = plt.subplots(1, 2, figsize=(24, 8))\n\nsns.countplot('workclass', hue='income', data=tmp_train, ax=ax[0])\nax[0].tick_params(axis='x', labelrotation=60)\nax[0].set_ylabel('')\nax[0].legend(loc='upper right')\n\nsns.countplot('occupation', hue='income', data=tmp_train, ax=ax[1])\nax[1].tick_params(axis='x', labelrotation=60)\nax[1].set_ylabel('')\nax[1].legend(loc='upper right')\n\nplt.show()","4b02c719":"# \ub450 \ubcc0\uc218 \ubaa8\ub450 '?' \uac12\uc774 \uc788\ub294\ub370 `occupation`\uc5d0 6\uac1c\uac00 \ub354 \ub9ce\ub2e4.\n# workclass \uc640 occupation\uc758 '?'\uac12\uc744 \uac00\uc9c0\ub294 \ub370\uc774\ud130\uac00 \uac19\uc740\uc9c0 \ud655\uc778 => \uac19\ub2e4.\ntrain[(train['workclass'] == '?') & (train['occupation'] == '?')].shape[0] == train[train['workclass'] == '?'].shape[0]","d3151484":"# workclass\ub294 '?'\uac00 \uc544\ub2c8\uc9c0\ub9cc occupation\ub9cc '?'\ub97c \uac00\uc9c0\ub294 \ub370\uc774\ud130 \ud655\uc778\ntrain[(train['workclass'] != '?') & (train['occupation'] == '?')][['workclass', 'occupation']]","80ef735d":"sns.distplot(tmp_train['hours_per_week'], kde=False);","5e95bcd1":"# \uc218\uc785(\ud0c0\uac9f)\uc5d0 \ub530\ub978 \ubd84\ud3ec \ud655\uc778\n\nplt.figure(figsize=(12, 8))\n\ntmp_train[tmp_train['income'] == 0]['hours_per_week'].plot(kind='kde', alpha=0.5, color='red', label='income==0')\ntmp_train[tmp_train['income'] == 1]['hours_per_week'].plot(kind='kde', alpha=0.5, color='blue', label='income==1')\n\nplt.title('Distribution of hours_per_week \\nwith income')\nplt.legend()\nplt.show()","34a8a4c9":"# workclass \ubc0f occupation\uacfc\uc758 \uad00\uacc4\ub97c \ubcf4\uae30 \uc704\ud574 \uadf8\ub824\ubd04\n\nfig, ax = plt.subplots(1, 2, figsize=(24, 8))\n\nsns.boxplot(x='workclass', y='hours_per_week', data=tmp_train, ax=ax[0])\nax[0].tick_params(axis='x', labelrotation=60)\n\nsns.boxplot(x='occupation', y='hours_per_week', data=tmp_train, ax=ax[1])\nax[1].tick_params(axis='x', labelrotation=60)\n\nplt.show()","c2288866":"fig, ax = plt.subplots(1, 2, figsize=(24, 8))\n\nsns.violinplot(x='workclass', y='hours_per_week', hue='sex', data=tmp_train, split=True, ax=ax[0])\nax[0].tick_params(axis='x', labelrotation=60)\n\nsns.violinplot(x='occupation', y='hours_per_week', hue='sex', data=tmp_train, split=True, ax=ax[1])\nax[1].tick_params(axis='x', labelrotation=60)\n\nplt.show()","f1e63568":"# test set '?' \ud655\uc778\nfor col in test.columns:\n    if '?' in test[col].values:\n        print(col)","7985c0b9":"tmp_train['sex'].value_counts()","4a114444":"sns.countplot(x='sex', hue='income', data=tmp_train);","7c581426":"# Feature Engineering \uc774\ud6c4 \ubd84\ub9ac\ud560 \uc778\ub371\uc2a4\nidx = len(train)\n\n# train\uacfc test set \ud569\uccd0\uc11c \ud55c\ubc88\uc5d0 \uc9c4\ud589\ndf = pd.concat([train, test])","beb1a467":"df = make_age_band(df)","1b6b15e6":"# test\ub3c4 train\uc5d0\uc11c \ucc98\ub7fc capital_gain\uacfc capital_loss \uac12\uc744 \ub3d9\uc2dc\uc5d0 \uac00\uc9c0\ub294 \ub370\uc774\ud130\uac00 \uc5c6\ub294\uc9c0 \ud655\uc778 -> \uc5c6\uc73c\ub2c8 \uadf8\ub300\ub85c \uc9c4\ud589\ntest[(test.capital_gain != 0) & (test.capital_loss != 0)]","efc466b0":"# log\uac12 \uad6c\ud558\uae30\ndf['capital_gain_log'] = df['capital_gain'].map(lambda x: np.log1p(x))\ndf['capital_loss_log'] = df['capital_loss'].map(lambda x: (-1) * np.log1p(x)) # loss\ub294 \uc74c\uc218\ub85c \ucc98\ub9ac\n\n# capital_loss_log\uc5d0\ub294 \uc74c\uc218 \uac12\uc73c\ub85c \uc801\uc6a9\ud574\uc900\ub2e4\ndf['capital_log'] = df['capital_gain_log'] + df['capital_loss_log']","4a3e1264":"# native_country\ndf['native_country_bin'] = df['native_country'].map(lambda x: 1 if x == 'United-States' else 0)","35c4013d":"null_col = [col for col in df.columns if '?' in df[col].values]\nprint(null_col)","6e31d8dd":"for col in null_col:\n    print(f\"{col}: {len(df[df[col] == '?'][col])}\")","c49f3d3c":"# workclass\ub294 '?'\uac00 \uc544\ub2c8\uc9c0\ub9cc occupation\uc740 '?'\uc778 \uac12\uc5d0 \ub300\ud574\uc11c \uac19\uc740 \uac12\uc73c\ub85c \ubcc0\uacbd\ud574\uc900\ub2e4.\ndf[(df['workclass'] != '?') & (df['occupation'] == '?')]['occupation'] = 'Never-worked'","f2f2c876":"# \ud604\uc7ac columns \ud655\uc778\ndf.columns","52a8f711":"drop_col = ['id', 'age', 'education_num', 'capital_gain', 'capital_loss', 'native_country', 'capital_gain_log', 'capital_loss_log']\n\ndf = df.drop(columns=drop_col)","4a43cdc6":"label_col = [col for col in df.columns if df[col].dtypes == 'object' and col != 'income']\nlabel_col.append('age_band')","77a8f3b4":"from sklearn.preprocessing import LabelEncoder\n\nle = LabelEncoder()\n\nfor col in label_col:\n    df[col] = le.fit_transform(df[col])","f52cdd78":"df.head()","c9827704":"from sklearn.preprocessing import MinMaxScaler\n\nscaler = MinMaxScaler()\ndf['fnlwgt_scale'] = scaler.fit_transform(df['fnlwgt'].to_numpy().reshape(-1, 1))","a763d1e7":"df = df.drop('fnlwgt', axis=1)","528e616b":"train_fe = df.iloc[:idx, :]\ntest_fe = df.iloc[idx:, :].drop('income', axis=1)","5a67bc0f":"train_fe['income'] = train_fe['income'].map(lambda x: 1 if x == '>50K' else 0)","6936a6b8":"from sklearn.model_selection import train_test_split\n\nX = train_fe.drop('income', axis=1)\ny = train_fe['income']\n\nX_train, X_valid, y_train, y_valid = train_test_split(X, y, random_state=seed)","157b47f8":"# \uc2a4\ucf54\uc5b4 \ud655\uc778 \ud568\uc218\n# python ML Guide \ucc38\uace0\n\ndef get_clf_eval(y_test, pred=None, pred_proba=None):\n    confusion = confusion_matrix(y_test, pred)\n    accuracy = accuracy_score(y_test, pred)\n    precision = precision_score(y_test, pred)\n    recall = recall_score(y_test, pred)\n    f1 = f1_score(y_test, pred)\n    roc_auc = roc_auc_score(y_test, pred_proba)\n\n    print('\uc624\ucc28 \ud589\ub82c')\n    print(confusion)\n    print(f'\uc815\ud655\ub3c4: {accuracy:.4f}, \uc815\ubc00\ub3c4: {precision:.4f}, \uc7ac\ud604\uc728: {recall:.4f}, F1: {f1:.4f}, AUC: {roc_auc:.4f}')","8c227e49":"rf = RandomForestClassifier(n_jobs=-1, random_state=seed)\n\nrf.fit(X_train, y_train)\ny_pred = rf.predict(X_valid)\ny_pred_proba = rf.predict_proba(X_valid)\n\nrf_score = f1_score(y_valid, y_pred)\nprint(\"RF \uae30\ubcf8 \uc131\ub2a5 \ud655\uc778 \uc2a4\ucf54\uc5b4: {:.4f}\".format(rf_score))","bec2b273":"get_clf_eval(y_valid, y_pred, y_pred_proba[:, 1])","58db8f4e":"lgbm = LGBMClassifier(n_jobs=-1, random_state=seed)\n\nlgbm.fit(X_train, y_train)\ny_pred_lgbm = lgbm.predict(X_valid)\ny_pred_proba_lgbm = lgbm.predict_proba(X_valid)[:, 1]\n\nget_clf_eval(y_valid, y_pred_lgbm, y_pred_proba_lgbm)","67e7c88c":"cb = CatBoostClassifier(random_seed=seed, verbose=0)\n\ncb.fit(X_train, y_train)\ny_pred_cb = cb.predict(X_valid)\ny_pred_proba_cb = cb.predict_proba(X_valid)[:, 1]\n\nget_clf_eval(y_valid, y_pred_cb, y_pred_proba_cb)","249cdc35":"lgbm = LGBMClassifier(random_state=seed)\n\nparams = {\n    'boosting_type': ['gbdt', 'dart'], # defalt 'gbdt'\n    'num_leaves': [20, 31, 50, 70], # default 31\n    'max_depth': [-1, 5, 7, 10, 15, 20, 30], # default -1. \ub05d\uae4c\uc9c0 \ub9cc\ub4dc\ub294 \uac83\n    'learning_rate': [0.001, 0.01, 0.05, 0.1], # defaut 0.1\n}\n\nlgbm_grid_cv = GridSearchCV(lgbm, param_grid=params, scoring='f1', n_jobs=-1, cv=5, verbose=1)\nlgbm_grid_cv.fit(X, y)","93cf7932":"print('GridSearchCV \ucd5c\uace0 \ud3c9\uade0 \uc815\ud655\ub3c4 \uc218\uce58: {:.4f}'.format(lgbm_grid_cv.best_score_))\nprint('GridSearchCv \ucd5c\uc801 \ud558\uc774\ud37c \ud30c\ub77c\ubbf8\ud130: ', lgbm_grid_cv.best_params_)","c147fd4b":"best_lgbm = lgbm_grid_cv.best_estimator_\nlgbm_pred = best_lgbm.predict(test_fe)\n\nsubmission_lgbm = submission.copy()\nsubmission_lgbm['prediction'] = lgbm_pred\n\nsubmission_lgbm.to_csv('.\/lgbm_gridCV.csv', index=False)","d61beed0":"ftr_importances_values = best_lgbm.feature_importances_\n\n# Top \uc911\uc694\ub3c4\ub85c \uc815\ub82c\uc744 \uc27d\uac8c \ud558\uace0, Seaborn\uc758 \ub9c9\ub300\uadf8\ub798\ud504\ub85c \uc27d\uac8c \ud45c\ud604\ud558\uae30 \uc704\ud574 Series \ubcc0\ud658\nftr_importances = pd.Series(ftr_importances_values, index=X.columns)\n\n# \uc911\uc694\ub3c4 \uac12 \uc21c\uc73c\ub85c Series\ub97c \uc815\ub82c\nftr_top = ftr_importances.sort_values(ascending=False)\n\nplt.figure(figsize=(8, 6))\nsns.barplot(x=ftr_top, y=ftr_top.index, orient='h')\nplt.title('Feature importances')\nplt.show()","a1579bd0":"## Random Forest & LightGBM\n\n* default hyperparameters\ub85c \ud559\uc2b5 \ud6c4 score \uce21\uc815\n* \ub354 \ub098\uc740 \ubaa8\ub378\uc5d0 \ub300\ud55c GridSearchCV \uc801\uc6a9\n* \ud6c4\uc5d0 Stacking \uc801\uc6a9","30066c63":"# \ub9c8\ubb34\ub9ac\ud55c \ud6c4 \ub290\ub080\uc810\n\n* \ucc98\uc74c\ubd80\ud130 \ub05d\uae4c\uc9c0 EDA \uc9c4\ud589\ud558\uace0, Feature Engineering, Modeling\uae4c\uc9c0 \uc9c4\ud589\ud574\uc11c `\ucd5c\uc885 \uacb0\uacfc\ub97c \ub0b8 \uccab \ub300\ud68c`\uc600\ub2e4.\n* \ud551\uacc4\ub300\uba70 \ubbf8\ub8e8\uc9c0 \uc54a\uc558\uc73c\uba74 \ub354 \ub9ce\uc774 \uacf5\ubd80\ud560 \uc218 \uc788\uc5c8\uc744 \uac83 \uac19\ub2e4. (\ubbf8\ub8e8\uc9c0\ub9d0\uc790..)\n* null\uac12('?') \ucc98\ub9ac\uc5d0 \ub300\ud55c \ubd80\ubd84\uc744 \ub9ce\uc774 \uc0dd\uac01\ud558\uc9c0 \ubabb\ud588\ub2e4. (\uc774 \ubd80\ubd84\uc744 \uc798 \ud574\uacb0\ud588\ub2e4\uba74 \uc2a4\ucf54\uc5b4\uac00 \uc62c\ub790\uc744 \uac83\uc774\ub77c\uace0 \uc0dd\uac01\ud568. \ub354 \uc0dd\uac01\ud588\uc73c\uba74 \uc544\uc774\ub514\uc5b4\uac00 \ub098\uc654\uaca0\uc9c0?)\n* \ubaa8\ub378\ub9c1 \ubd80\ubd84\uc5d0\uc11c \ud558\uc774\ud37c \ud30c\ub77c\ubbf8\ud130 \ud29c\ub2dd \uc801\uc6a9\uc744 \ud574\ubd24\uace0, \ub05d\ubb34\ub835\uc5d0\ub098 \ud574\uc11c \uc81c\ub300\ub85c\ub294 \ubabb\ud574\ubd24\ub2e4.\n* Stacking\uc744 \uc0ac\uc6a9\ud574\ubcf4\uace0 \uc2f6\uc5c8\ub294\ub370 \uac1c\ub150\uc5d0 \ub300\ud55c \uc774\ud574\uac00 \ubd80\uc871\ud588\uace0, \uadf8 \uacb0\uacfc \ucf54\ub4dc\ub85c \uc801\uc6a9\uc744 \ubabb\ud588\ub2e4.\n\n---\n\n<\uc55e\uc73c\ub85c \uacf5\ubd80\ud560 \ubd80\ubd84>\n\n1. \ubaa8\ub378\ub9c1(Stacking\ubd80\ud130 \ub2e4\ub978 \uae30\ubc95\ub4e4)\n2. EDA \ubc0f Engineering - \ub2e4\ub978 \ub300\ud68c \uacbd\ud5d8\ud558\uba74\uc11c \uacf5\ubd80\ud558\uae30\n3. \ub300\ud68c \uacc4\uc18d \ucc38\uc5ec\ud558\uba74\uc11c \uacbd\ud5d8\uc313\uace0 \uacf5\ubd80\ud558\uae30","4a3265f9":"* `id`, `age`, `fnlwgt`, `education_num`, `capital_gain`, `capital_loss`, `hour_per_week`\uac00 int\uac12\uc774\uba70 \ub2e4\ub978 \ubcc0\uc218\ub294 object \uc989, string \ud615\ud0dc\uc774\ub2e4.\n* \ub370\uc774\ud130\uc5d0 null \uac12\uc774 \uc5c6\ub2e4\uace0 \ub098\uc640\uc788\uc9c0\ub9cc, eda\ub97c \uc9c4\ud589\ud558\ub2e4\ubcf4\uba74 `workclass`, `occupation`, `native_country`\uc5d0\ub294 '?'\ub77c\uace0 \ud558\ub294 \uacb0\uce21\uce58\uac00 \uc788\ub2e4.","7f23d118":"\ub370\uc774\ud130\uac00 \uad49\uc7a5\ud788 Unbalance \ud560 \uacbd\uc6b0\uc5d0 Oversampling\/Undersampling\uc744 \uace0\ub824\ud574\uc57c \ud558\ub294\ub370 \uc774 \ub300\ud68c\uc758 \uacbd\uc6b0 25% \uc815\ub3c4\uc758 \ub370\uc774\ud130\ub97c \uac00\uc9c0\uace0 \uc788\uae30 \ub54c\ubb38\uc5d0 \uadf8\ub7f0 \ubb38\uc81c\uc5d0 \ub300\ud574\uc11c\ub294 \uace0\ub824\ud558\uc9c0 \uc54a\uc544\ub3c4 \ub41c\ub2e4.","493c2205":"### workclass & occupation\n\n* '?'\ub77c\uace0 \ud558\ub294 \uacb0\uce21\uce58\ub85c \ubcf4\uc774\ub294 \uac12\uc774 \uc874\uc7ac\ud588\uace0, \uc774 \ubcc0\uc218\ub97c \ucc98\ub9ac\ud558\ub294 \uac83\uc774 \uac00\uc7a5 \ud070 \ubb38\uc81c\uc600\ub2e4. (\uacb0\uad6d\uc740 \uc81c\ub300\ub85c \ucc98\ub9ac\ud558\uc9c0 \ubabb\ud588\ub2e4.)\n* `occupation`\uc774 `workclass`\ubcf4\ub2e4 '?' \uac12\uc774 6\uac1c\uac00 \ub354 \ub9ce\uc558\uace0, \ud574\ub2f9 \uac12\uc744 \ud655\uc778\ud574\ubcf8 \uacb0\uacfc `workclass`\uc758 Never-worked \uac12\uacfc \uc77c\uce58\ub418\uc5c8\uae30 \ub54c\ubb38\uc5d0 \ud574\ub2f9 \uac12\uc73c\ub85c \ucc98\ub9ac\ub97c \ud558\uc600\ub2e4.\n* \ub0a8\uc740 '?' \uac12\uc5d0 \ub300\ud574\uc11c\ub294 \ub2e4\ub978 \ucc98\ub9ac\ub97c \uc9c4\ud589\ud558\uc9c0 \uc54a\uace0 \uadf8\ub300\ub85c \uc0ac\uc6a9\ud588\ub2e4.\n* \ucd5c\ube48\uac12 \ucc98\ub9ac, box-plot(`hours_per_week`) \uc5d0\uc11c \uc720\uc0ac\ud55c \ud615\ud0dc\ub97c \ubcf4\uc774\ub294 \uac12\uc73c\ub85c \uc218\uc815\ub3c4 \ud574\ubd24\uc9c0\ub9cc \uc815\ud655\ud55c \uadfc\uac70\uac00 \uc5c6\uc774 \ucd94\uce21\uc774\uc5c8\uace0, \uaf64 \ub9ce\uc740 '?' \uac12\uc744 \ud574\ub2f9 \uac12\uc73c\ub85c \ubc14\uafbc \uac83\uc774\uae30 \ub54c\ubb38\uc5d0 \uacb0\uacfc\ub294 \ub354\uc6b1 \uc548\uc88b\uc544\uc84c\ub2e4.","53b8a4bc":"## \ubcc0\uc218 \uac12 \uc801\uc6a9","b2f36f23":"### race & native_country\n\n* `race`\ub294 \uc2e0\uacbd\uc744 \uc548\uc368\ub3c4 \ub418\uc9c0\ub9cc, `native_country`\ub294 \ubcc0\uc218\uac00 \ub108\ubb34 \ub9ce\uace0 United-States`\uc5d0 \ud3b8\uc911\ub418\uc5b4 \uc788\uc5b4 0\uacfc 1\ub85c \ub098\ub220\uc11c \uc801\uc6a9\ud588\ub2e4. (`native_country`\uc758 \uacbd\uc6b0 \uadf8\ub300\ub85c \uc0ac\uc6a9\ud558\uac70\ub098 0,1\ub85c \ubcc0\ud658\ud574\uc11c \uc0ac\uc6a9\ud588\uc744 \ub54c \ubaa8\ub450 Feature Imortance\uac00 \uac00\uc7a5 \ub0ae\uac8c \ub098\uc654\ub2e4.)","d30fa937":"# Modeling","a9853ad0":"### capital_log","ba987820":"\uac12\uc758 \ubd84\ud3ec\uac00 \ub9e4\uc6b0 \ucee4\ubcf4\uc5ec 0\uc778 \ub370\uc774\ud130\uc640 \uc544\ub2cc \ub370\uc774\ud130\ub85c \ud655\uc778\uc744 \uc9c4\ud589\ud588\ub2e4.","402c3aff":"### marital_status & relationship\n\n* \ub458 \ub2e4 \uacb0\ud63c\uc5d0 \uad00\ud55c \ub370\uc774\ud130\ub97c \uc758\ubbf8\ud55c\ub2e4.\n* \ube44\uc2b7\ud55c \uc758\ubbf8\ub97c \uac00\uc9c0\ub2c8 \uc544\uc608 \ud569\uccd0\uc11c \uc0ac\uc6a9\ud558\uc790 -> \ub450 \uac1c\uc758 \ubcc0\uc218\ub97c \uc0ad\uc81c\ud558\uace0 \uc784\uc758\ub85c \ud558\ub098\uc758 \ubcc0\uc218\ub97c \ub9cc\ub4e0 \uacb0\uacfc \ubaa8\ub378 \uc131\ub2a5\uc774 \ub354 \uc548\uc88b\uc544\uc84c\ub2e4. (\uc798 \ubaa8\ub974\uaca0\ub294 \uacbd\uc6b0 \uc6ec\ub9cc\ud558\uba74 \ub370\uc774\ud130\ub97c \uadf8\ub300\ub85c \uc0ac\uc6a9\ud558\ub294 \uac83\uc774 \uc88b\uc740 \uacb0\uacfc\uac00 \ub098\uc628\ub2e4.)","02129f9b":"### education & education_num\n\n* (\uc740\uc131) `education` \uacfc `education_num`\uc740 \uac19\uc740 \uc758\ubbf8\ub97c \uac00\uc9c4\ub2e4. -> \ud558\ub098\uc758 \ubcc0\uc218\ub9cc \ub0a8\uae40\n* `education_num`\uc744 \ub0a0\ub9ac\uace0 `education`\uc740 \ub0a8\uaca8\ub480\ub2e4. (\ud6c4\uc5d0 LabelEncoding\uc744 \uc801\uc6a9\ud558\ub354\ub77c\uace0 EDA\uc2dc \ub2e4\ub978 \ubcc0\uc218\uc640\uc758 \uc758\ubbf8\ub97c \ud655\uc778\ud558\uae30 \uc704\ud568)\n* Feature Engineering\uc744 \uc801\uc6a9\ud574\uc57c \ud560 \uadfc\uac70\ub97c \ucc3e\uc9c0 \ubabb\ud568 -> **\uadf8\ub300\ub85c \uc0ac\uc6a9**","f17c4f3d":"## Target Check","d46fbfa6":"## train test \ud569\uce58\uae30\n\n* \ud6a8\uc728\uc801\uc778 Feature Engineering\uc744 \uc704\ud568","8b077994":"### '?' \uac12 \ucc98\ub9ac","fc686e8e":"### CatBoost\n\n* Categorical variable\uc774 \ub9ce\uc744 \ub54c \uc88b\ub2e4\uace0 \ud558\uc5ec \uc0ac\uc6a9\ud574\ubd24\ub2e4.","91cc42cf":"## train income \ubcc0\ud658","c9033946":"### LightGBM","835d8d3f":"# Feature Engineering\n\n\n<\uc801\uc6a9 \uc0ac\ud56d>\n* `income`\n* `age_band` \ubcc0\uc218\n* `education_num` \uc0ad\uc81c\n* `capital_log` \ubcc0\uc218\n* `native_country_bin` \ubcc0\uc218\n\n\n* LabelEncoding (Ordinal Encoding \uc774\ub77c\ub294 \uac1c\ub150\uc774 \uc788\uc5c8\ub294\ub370 \ub2e4\uc74c\ubc88\uc5d0 \uc801\uc6a9\ud574\ubcfc\ub9cc \ud560 \uac83 \uac19\ub2e4.) - `workclass`, `education`, `marital_status`, `occupation`, `relationship`, `race`\n\n\n* Scaling - `fnlwgt`\n\n\n* '?' \uac12 - `workclass`\uc640 `occupation`\uc758 6\uac1c\uc758 \uac12\uc744 \uc81c\uc678\ud558\uace0\ub294 \uadf8\ub300\ub85c \uc0ac\uc6a9\ud588\ub2e4.","8b00d89b":"# Import Libraries","a6566cf2":"### hours_per_week\n\n* '?' \uac12\uacfc \uad00\ub828\uc9c0\uc5b4\ubd24\ub2e4.","7f4f2821":"### age\n\n* \ub0ae\uc740 \uc5f0\ub839\ub300\uc5d0\uc11c\ub294 Target\uc774 0, \ub192\uc740 \uc5f0\ub839\ub300\uc5d0\uc11c\ub294 Target\uc774 1\uc778 \uacbd\ud5a5\uc744 \ubcf4\uc778\ub2e4.\n* Titanic \ub300\ud68c\ucc98\ub7fc `age_band` \ubcc0\uc218\ub97c \ub9cc\ub4e4\uc5b4 \uc5f0\ub839\ub300 \ubc94\uc704\ub97c \ub098\ub220\uc11c \uc801\uc6a9\ud574\ubd24\uc9c0\ub9cc \uadf8\ub300\ub85c \uc0ac\uc6a9\ud560 \ub54c Feature Importance\uac00 \ub192\uac8c \ub098\uc654\ub2e4. \ubaa8\ub378 \uc2a4\ucf54\uc5b4\uc5d0 \ub300\ud55c \uacb0\uacfc\ub294 \uae09\ud558\uac8c \uc801\uc6a9\ud558\ub290\ub77c \uc81c\ub300\ub85c \ud655\uc778\uc744 \ubabb\ud588\ub2e4.","037ad1ac":"## Drop columns","105f7b26":"## train\/test \ubd84\ub9ac","0425df68":"* `id`\n* `age`: \ub098\uc774\n* `workclass`: \uace0\uc6a9 \ud615\ud0dc\n* `fnlwgt`: \uc0ac\ub78c \ub300\ud45c\uc131\uc744 \ub098\ud0c0\ub0b4\ub294 \uac00\uc911\uce58 (final weight\uc758 \uc57d\uc790)\n* `education`: \uad50\uc721 \uc218\uc900\n* `education_num`: \uad50\uc721 \uc218\uc900 \uc218\uce58\n* `marital_status`: \uacb0\ud63c \uc0c1\ud0dc\n* `occupation`: \uc5c5\uc885\n* `relationship`: \uac00\uc871 \uad00\uacc4\n* `race`: \uc778\uc885\n* `sex`: \uc131\ubcc4\n* `capital_gain`: \uc591\ub3c4 \uc18c\ub4dd\n* `capital_loss`: \uc591\ub3c4 \uc190\uc2e4\n* `hours_per_week`: \uc8fc\ub2f9 \uadfc\ubb34 \uc2dc\uac04\n* `native_country`: \uad6d\uc801\n* `income`: \uc218\uc775 (\uc608\uce21\ud574\uc57c \ud558\ub294 \uac12)\n    * `>50K`: 1\n    * `<=50K`: 0","856ffed1":"### fnlwgt\n\n* \ubcc0\uc218\uc5d0 \ub300\ud55c \uc124\uba85 - (https:\/\/www.kaggle.com\/c\/kakr-4th-competition\/discussion\/191173)\n* \uc804\uccb4 \ubcc0\uc218\uc5d0 \ub530\ub978 \uac00\uc911\uce58\ub77c\uace0 \ud55c\ub2e4. (e.g., \ub300\uc878\uc774\uace0, \uacb0\ud63c\ud588\uace0,,... \uc774\ub7ec\uba74 fnlwgt\uac00 \ub192\uc74c)\n* Target\uc5d0 \ub530\ub77c \ud070 \ucc28\uc774\uac00 \uc5c6\uc74c -> Feature Engineering \uc5c6\uc774 \uadf8\ub300\ub85c \uc0ac\uc6a9\n\n* (\uacb0\uacfc) \uc131\ubcc4, \uad50\uc721 \uc218\uc900 \ub4f1\uc774 \ubc18\uc601\ud55c \ubcc0\uc218\uae30 \ub54c\ubb38\uc5d0 Feature Importance\ub294 \ub192\uac8c \ub098\uc654\ub2e4.","12d5238d":"## Label Encoding","42d9cf08":"### Random Forest","f198b7d9":"### sex\n\n* \ubcc4 \ub2e4\ub978 \uc0ac\ud56d\uc774 \uc5c6\uc5b4 \uadf8\ub300\ub85c \uc0ac\uc6a9\ud588\ub2e4.","cbe2b961":"## Scaling","9a4630b2":"### capital_gain & capital_los (\uc591\ub3c4 \uc18c\ub4dd, \uc591\ub3c4 \uc190\uc2e4)\n\n\ubd84\ud3ec\uac00 \ud2b9\uc774\ud574\ubcf4\uc778\ub2e4.\n\n* **capital_gain**(\uc591\ub3c4 \uc18c\ub4dd)\uc774\ub780\n    * \uac1c\uc778\uc774 \ud1a0\uc9c0, \uac74\ubb3c \ub4f1 \ubd80\ub3d9\uc0b0\uc774\ub098 \uc8fc\uc2dd \ub4f1\uacfc \ud30c\uc0dd\uc0c1\ud488\uc758 \uc591\ub3c4 \ub610\ub294 \ubd84\uc591\uad8c\uacfc \uac19\uc740 \ubd80\ub3d9\uc0b0\uc5d0 \uad00\ud55c \uad8c\ub9ac\ub97c \uc591\ub3c4\ud568\uc73c\ub85c \uc778\ud558\uc5ec \ubc1c\uc0dd\ud558\ub294 \uc774\uc775(\uc18c\ub4dd)\uc744 \uacfc\uc138\ub300\uc0c1\uc73c\ub85c \ud558\uc5ec \ubd80\uacfc\ud558\ub294 \uc138\uae08\n    \n* **capital_loss**(\uc591\ub3c4 \uc190\uc2e4)\n    * \ud22c\uc790 \ub610\ub294 \ubd80\ub3d9\uc0b0\uacfc \uac19\uc740 \uc790\ubcf8 \uc790\uc0b0\uc758 \uac00\uce58\uac00 \uac10\uc18c\ud560 \ub54c \ubc1c\uc0dd\ud558\ub294 \uc190\uc2e4\n    \n* \uc591\ub3c4 \uc18c\ub4dd, \uc190\uc2e4\uc774 \uc788\uace0, \uc5c6\uace0\ub85c \uad6c\ubd84\ud574\uc11c(0, 1) \ubaa8\ub378\uc744 \uc138\uc6cc\ubd24\uc9c0\ub9cc \uacb0\uacfc\uac00 \uc548\uc88b\uc558\ub2e4. (\ub370\uc774\ud130\ub97c \ub2e8\uc21c\ud654 \uc2dc\ucf1c\uc11c \uadf8\ub7f0\ub4ef\ud568)\n\n* (\ubcd1\ud604) capital \uac12\uc774 \uc788\ub294 \uc0ac\ub78c\uc758 \uacbd\uc6b0 `capital_gain` \ub610\ub294 `capital_loss`\uc5d0\ub9cc \uac12\uc774 \uc788\uc5c8\ub2e4. -> \ud655\uc778\n\n* `capital_log` \ubcc0\uc218\ub97c \ub9cc\ub4e4\uc5b4 \uac01 \ubcc0\uc218\uc758 \ub85c\uadf8 \uac12\uc5d0 gain\/loss\uc5d0 \ub530\ub77c \ubd80\ud638\ub97c \ucde8\ud568\n\n\n* **\ucd5c\uc885\uc801\uc73c\ub85c\ub294 `capital_log`\ub77c\ub294 \ubcc0\uc218\ub97c \ub9cc\ub4e4\uc5c8\ub2e4. \ub450 \ubcc0\uc218\ub97c \ub85c\uadf8 \ubcc0\ud658 \uc2dc\ud0a8 \ub4a4 `capital_loss`\ub294 \uc74c\uc218\ucc98\ub9ac\ub97c \ud558\uc5ec \ud569\ucce4\ub2e4.**","48201d08":"# Load Data & Check","53703825":"### native_country","de1eac03":"# EDA (Exploratory Data Analysis)","49f6e2d5":"###  LGBM \ud558\uc774\ud37c \ud30c\ub77c\ubbf8\ud130 \ud29c\ub2dd - GridSearchCV (0.87353)\nhttps:\/\/lightgbm.readthedocs.io\/en\/latest\/Parameters-Tuning.html (\uacf5\uc2dd \ubb38\uc11c \ucc38\uc870)\n\n* `num_leaves`: \uac00\uc7a5 \uba54\uc778 \ud30c\ub77c\ubbf8\ud130 (\uc77c\ubc18\uc801\uc73c\ub85c `num_leaves` = 2^(`max_depth`)\ub85c \uae4a\uc774\ubcc4 \ud2b8\ub9ac\uc640 \ub3d9\uc77c\ud55c \uc218\uc758 \uc78e\uc744 \uc5bb\uc744 \uc218 \uc788\ub2e4. \uc2e4\uc81c\ub85c\ub294 `num_leaves` < 2^(`max_depth`) \uc774\ub807\uac8c \ub450\uc5b4\uc57c\ud568. leaf-wise tree \uc774\uae30 \ub54c\ubb38)\n* `min_data_in_leaf`: overfitting \ubc29\uc9c0 \ub9e4\uac1c\ubcc0\uc218. \ucd5c\uc801\uac12\uc740 \ud6c8\ub828 \uc0d8\ud50c \uc218\uc640 num_leaves\uc5d0 \ub530\ub77c \ub2e4\ub978\ub370, \ub300\uaddc\ubaa8 \ub370\uc774\ud130\uc5d0\uc11c \uc218\ubc31 ~ \uc218\ucc9c\uc73c\ub85c \ub450\uba74 \ucda9\ubd84\ud558\ub2e4.\n* `max_depth`: \ud2b8\ub9ac \uae4a\uc774 \uc870\uc808\n\n\n<\uc815\ud655\ub3c4\ub97c \uc704\ud55c \ubcc0\uc218>\n\n* `max_bin`: \ud06c\uac8c \uc801\uc6a9(\uc18d\ub3c4\ub294 \ub290\ub824\uc9c4\ub2e4.)\n* \uc791\uc740 `learning_rate`, \ud070 `num_iterations`\n* \ud070 `num_leaves` (overfitting\uc774 \uc77c\uc5b4\ub0a0 \uc218 \uc788\ub2e4.)\n* \ub370\uc774\ud130 \uc138\ud2b8 \ub298\ub9ac\uae30\n* `boosting_type` \uc744 dart(Dropouts meet Multiple Additive Regression Trees)\ub85c \uc801\uc6a9 (defalt: 'gbdt'(gradient boosting decision tree))","dda894f4":"### age_band","4dbcea47":"## train valid split\n\n* \uacb0\uacfc\uc801\uc73c\ub860 GridSearch\ub85c \uc0ac\uc6a9.."}}