{"cell_type":{"4d726a6f":"code","d57b4396":"code","19795f1a":"code","1b6b19bd":"code","c4f13a4c":"code","ed43dfb2":"code","a6b64741":"code","19e34dea":"code","d5bc672f":"code","8125e931":"code","9e7c6f02":"code","2da58012":"code","413fff07":"code","329328e3":"code","86cf058a":"code","bafde595":"code","e4e46ec7":"code","f17aac38":"code","72a32c3f":"code","fa877e91":"code","1047db5c":"code","297eddc6":"code","d3be6de8":"code","8e1ad364":"code","18f1f085":"code","6e51d277":"code","aaa78200":"code","a5030a61":"code","80458d81":"code","0eb5b84c":"code","997f139d":"code","faa37d52":"code","7d4b7626":"code","3cfe1c00":"code","ae8cd8e4":"code","4f217a15":"code","1b46e0b2":"code","8d3ad5b5":"code","0146efbd":"code","efecc4ea":"code","a2538ea1":"code","6e068cfa":"code","00342820":"code","2acc23a8":"code","9487d25b":"code","5564017c":"code","e01bdf8a":"code","917fb457":"code","0e294f76":"markdown","3f0411a7":"markdown","34f73e33":"markdown","21b87970":"markdown","d4e1141e":"markdown","b8ca58e7":"markdown","3f4e107b":"markdown","929a1661":"markdown","66a1d350":"markdown","2667c944":"markdown","984695b4":"markdown","46e564b5":"markdown","dbe1af48":"markdown","07a4c83d":"markdown","aabe93d1":"markdown","c63fd121":"markdown","d5d0250d":"markdown","0c39a2bf":"markdown","a9f18d0f":"markdown","0165f226":"markdown"},"source":{"4d726a6f":"import matplotlib.pyplot as plt\nimport pandas as pd\nimport seaborn as sns\nfrom pathlib import Path\n\nsns.set_context(\"talk\", font_scale=1.4)\nsns.set_style(\"whitegrid\")","d57b4396":"! tree \/kaggle\/input\/ -L 2","19795f1a":"! ls \/kaggle\/input\/rsna-miccai-brain-tumor-radiogenomic-classification\/train | head -n 5","1b6b19bd":"! ls \/kaggle\/input\/rsna-miccai-brain-tumor-radiogenomic-classification\/train\/00000","c4f13a4c":"! ls \/kaggle\/input\/rsna-miccai-brain-tumor-radiogenomic-classification\/train\/00000\/FLAIR | head -n 5","ed43dfb2":"! ls \/kaggle\/input\/rsna-miccai-brain-tumor-radiogenomic-classification\/test","a6b64741":"! ls \/kaggle\/input\/rsna-miccai-brain-tumor-radiogenomic-classification\/train | wc -l","19e34dea":"! ls \/kaggle\/input\/rsna-miccai-brain-tumor-radiogenomic-classification\/test | wc -l","d5bc672f":"data_path = Path(\"..\/input\/rsna-miccai-brain-tumor-radiogenomic-classification\")","8125e931":"labels = pd.read_csv(data_path\/\"train_labels.csv\")\nlabels.shape","9e7c6f02":"labels.head()","2da58012":"labels.sample(10, random_state=42)","413fff07":"labels.info()","329328e3":"labels.isna().sum()","86cf058a":"labels.duplicated().sum()","bafde595":"folder_struct = []\nfor path in (data_path).rglob('*.dcm'):\n    folder_struct.append(str(path).split(\"\/\")[3:]+[str(path)])","e4e46ec7":"image_meta = pd.DataFrame(folder_struct, columns=[\"type\", \"id\", \"mri\", \"file\", \"path\"])\nimage_meta.head()","f17aac38":"image_meta['img_num'] = image_meta['file'].str.extract(r'Image-(\\d+).dcm').astype(int)","72a32c3f":"image_meta.shape","fa877e91":"image_file_counts =image_meta.groupby([\"type\",\"id\", \"mri\"]).count()['file'].reset_index().rename(columns={\"file\": \"counts\"})\nimage_file_counts.head(20)","1047db5c":"fig, ax = plt.subplots(figsize=(16,4))\nsns.histplot(data=image_file_counts, x=\"counts\", stat=\"count\", hue='mri', ax=ax)\nax.set_xlabel(\"# of .dcm files per person\")","297eddc6":"image_file_counts['counts'].describe()","d3be6de8":"image_file_counts.groupby(\"type\")['id'].nunique(), image_file_counts['id'].shape","8e1ad364":"image_meta_miss = image_meta[['type', 'id', 'mri', 'path']].pivot_table(index=['type', 'id'], columns=[\"mri\"], values=['path'], aggfunc=\n                                                                        lambda x: len(x) if len(x)>0 else np.nan)\nimage_meta_miss.head()","18f1f085":"image_meta_miss.isna().sum()","6e51d277":"labels['id'] = labels[\"BraTS21ID\"].apply(lambda num: f\"{num:05d}\")\nlabels['label'] = labels['MGMT_value']\nlabels.drop(columns=[\"BraTS21ID\", 'MGMT_value'], inplace=True)\nimage_meta = pd.merge(image_meta, labels, on = \"id\", how=\"left\")","aaa78200":"image_meta.head()","a5030a61":"image_meta[image_meta['type'] == \"train\"].isna().sum()","80458d81":"! pip install pydicom","0eb5b84c":"from pydicom import dcmread\nfrom pydicom.data import get_testdata_file\nfrom pydicom import filereader\nimport matplotlib.pyplot as plt","997f139d":"sample_person = image_meta.query(\"id=='00688'\")\nsample_person.head()","faa37d52":"dcmread(sample_person.at[51473, 'path'])","7d4b7626":"dataset = filereader.dcmread(sample_person.at[51473, 'path'])\nimg = dataset.pixel_array","3cfe1c00":"img.shape, img.dtype","ae8cd8e4":"fig, ax = plt.subplots()\nax.imshow(img, cmap='gray')\nax.set_axis_off()\nplt.show()\n","4f217a15":"first_imgs = sample_person.sort_values(['mri', 'img_num']).groupby(\"mri\").first()\nfirst_imgs","1b46e0b2":"def get_img_array(image_path):\n    dataset = filereader.dcmread(image_path)\n    return dataset.pixel_array","8d3ad5b5":"\nfig,axes = plt.subplots(nrows=2, ncols=2)\naxes= axes.flatten()\nfor i,ax in enumerate(axes):\n    ax.imshow(get_img_array(first_imgs.iloc[i]['path']), cmap='gray')\n    ax.set_axis_off()\n    ax.set_title(first_imgs.index[i])\n    #plt.show()","0146efbd":"sample_person.sort_values(['mri', 'img_num']).groupby(\"mri\")['img_num'].apply(lambda lst: lst.to_list())","efecc4ea":"def compare_img_types(img_num):\n    select_img = sample_person[sample_person['img_num'] == img_num]\n    print(select_img['mri'])\n    \n    fig,axes = plt.subplots(nrows=2, ncols=2, figsize=(16,16))\n    axes= axes.flatten()\n    for i,ax in enumerate(axes):\n        ax.imshow(get_img_array(select_img.iloc[i]['path']), cmap='gray')\n        ax.set_axis_off()\n        ax.set_title(first_imgs.index[i])","a2538ea1":"compare_img_types(150)","6e068cfa":"last_imgs = sample_person.sort_values(['mri', 'img_num']).groupby(\"mri\").last()\nlast_imgs","00342820":"\nfig,axes = plt.subplots(nrows=2, ncols=2)\naxes= axes.flatten()\nfor i,ax in enumerate(axes):\n    ax.imshow(get_img_array(last_imgs.iloc[i]['path']), cmap='gray')\n    ax.set_axis_off()\n    ax.set_title(first_imgs.index[i])\n    #plt.show()","2acc23a8":"def compare_img_mri(mri_type, interval=10):\n    \n    select_img = sample_person[sample_person['mri'] == \"FLAIR\"].sort_values('img_num').reset_index()\n    \n    \n    interval_imgs = select_img[::interval]\n    \n    #print(select_img['mri'])\n    \n    fig,axes = plt.subplots(nrows=len(interval_imgs), ncols=6, figsize=(16,26))\n    axes= axes.flatten()\n    for i,ax in enumerate(axes):\n        ax.imshow(get_img_array(select_img.iloc[i]['path']), cmap='gray', aspect='auto')\n        ax.set_axis_off()\n        #ax.set_title(select_img.at[i, 'img_num'])","9487d25b":"compare_img_mri(mri_type=\"FLAIR\", interval=10)","5564017c":"compare_img_mri(mri_type=\"T1w\", interval=10)","e01bdf8a":"compare_img_mri(mri_type=\"T1wCE\", interval=10)","917fb457":"compare_img_mri(mri_type=\"T2\", interval=10)","0e294f76":"### Look at Specific Person in Detail","3f0411a7":"# Step 1: Goal\n\nTo predict the genetics of the cancer through imaging (i.e., radiogenomics) to minimize the number of surgeries and refine the type of therapy required for patients. Specifically, predict the genetic subtype of glioblastoma using MRI (magnetic resonance imaging) scans to train and test your model to detect for the presence of MGMT promoter methylation. This problem can be treated as a binary classification problem to predict a probability for the target MGMT_value.\n\n* The training data should generalize to the test data but that depends on how the split was done? Each data point is one patient. Does the data represent the whole population, all patients in the world or just NA?\n    * multiple institutions, variety of instruments (paper)\n* Is each entry independent (five-digit number per unique patient) or do we have duplicates, e.g. same patient different time?\n* How was the negative set created? Imagery of random selected people?\n* ***Submission rules***:\n    * According to the submission (button) extra explanation: \"In this competition, we will privately re-run your selected Notebook Version with a hidden test set substituted into the competition dataset. We then extract your chosen Output File from the re-run and use that to determine your score.\"\n        * this means the submitted notebook needs to work with the raw dicom files (additionally provided with private testset)\n    * Notebook has to be without internet access.\n\n\n## Metric\n\n* The metric to optimize is the AUC ROC curve.\n* AUC Still prone to class imbalance to some degree.\n* based on MGMT_value=1\/0\n","34f73e33":"> No missing values for label in train data.","21b87970":"# Step 3: Extract the Data\n\nOrganizers suggest to exclude the following training data: [00109, 00123, 00709]","d4e1141e":"Are there missing labels for some persons?","b8ca58e7":"> At maximum we have 514 images per MRI type.","3f4e107b":"## Time-series Analyis of Single Person\nCross-setional analysis of brain","929a1661":"> Train and Test Data all have all MRI types.","66a1d350":"### Missing Values 2\n\nAre there persons which have a MRI type missing?","2667c944":"# EDA 1 for Brain Tumor Classification\n\n","984695b4":"### Duplication","46e564b5":"> * types of scans similar between mri types, scan in multiple cross sectional layers\n> * Do we need all layers for predictions or is one shot in the middle enough?\n> * Which image has been used for predictions of the class?\n","dbe1af48":"Different RMI imagery:\n\n* Fluid Attenuated Inversion Recovery (FLAIR)\n* T1-weighted pre-contrast (T1w)\n* T1-weighted post-contrast (T1Gd)\n* T2-weighted (T2)","07a4c83d":"## Image Metadata\n\n","aabe93d1":"> Number of .dcm files not consistent,maybe due to different methdos in hospitals?","c63fd121":"# Step 4: Meet and Greet the data\n\nTrain - Test Split: 87% train, rest test\n","d5d0250d":"### Missing Values","0c39a2bf":"# Step 2: Gather the data.\n\n* The data was already provided by Kaggle and split in training and test set. How was the split done? Was ensured that same distribution of data in train and test?\n* Is there alternative open data which could help to improve performance?\n* Data Described in paper: https:\/\/arxiv.org\/pdf\/2107.02314.pdf\n","a9f18d0f":"> * Small test set!\n> * IDs seem unique, also between training and test set","0165f226":"# Step 5: Data Distribution\n\n\n"}}