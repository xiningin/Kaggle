{"cell_type":{"a916f4c8":"code","eaaf60c8":"code","e39f37ce":"code","0866056a":"code","f210499f":"code","6d4113c7":"code","5293538f":"code","fe639bb1":"code","85943a24":"code","394d8333":"code","cd531bb2":"code","7662c050":"code","e413efdc":"code","fa93bb0f":"code","3ea24c09":"code","85cfb721":"code","3c97854f":"code","2191b28c":"code","2892458e":"code","a5a1c869":"code","ad6ab84b":"code","11cb66fc":"code","a3911562":"code","dd4270ca":"code","838df433":"code","3a314b8c":"code","b814ae2a":"code","f11f8a7c":"code","aacfe51f":"code","50397d9d":"code","73207d0b":"code","0c83fe8b":"code","fa40d2ad":"code","03a912c2":"code","d4e8fd53":"code","5132e07c":"code","d88fc7c4":"code","28fd4c04":"code","4cdca0fd":"code","dbea64af":"code","02214a0b":"code","e0cc6f75":"code","dbe14e57":"code","7326cc24":"code","b5ca50a5":"code","574042bc":"code","a1013861":"code","b54384d2":"code","20f193a5":"code","68ca05f2":"code","e8ea1588":"code","e4da1180":"code","b236c37b":"code","44a37717":"code","fe28578b":"code","01d552c2":"code","6f0050ff":"code","272ee974":"code","70a744a0":"code","4cdac408":"code","deae4e0c":"code","a5c85f0e":"code","9d94a7c9":"code","5e1e7ad0":"code","80dcb98c":"code","45540b19":"code","93ac7287":"code","45cba127":"code","dc9e2e1d":"code","d3e851cb":"code","16fcbd76":"code","8881453d":"markdown","3d23fa0e":"markdown","68061011":"markdown","1727a15d":"markdown","85aca35b":"markdown","8bf57770":"markdown","4dd28e28":"markdown","deed6b96":"markdown","30916e6e":"markdown","4a94add7":"markdown","e34d6bdb":"markdown","b3515e98":"markdown","09e3f094":"markdown","e026174a":"markdown","b76ebe69":"markdown","5d945011":"markdown","829515b8":"markdown","69abba1b":"markdown","2010c0e3":"markdown","e320a4bd":"markdown","a93a143b":"markdown","49ee3b02":"markdown","93456b75":"markdown","40ac1e90":"markdown","d34fc1e1":"markdown","78381b89":"markdown","851dfb1a":"markdown","582587f9":"markdown","436fcb92":"markdown","e50fd4a4":"markdown"},"source":{"a916f4c8":"## This Python 3 environment comes with many helpful analytics libraries installed\n## It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n## For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n## Input data files are available in the \"..\/input\/\" directory.\n## For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory\n\nimport os\nprint(os.listdir(\"..\/input\"))\n\n## Any results you write to the current directory are saved as output.","eaaf60c8":"data=pd.read_csv('..\/input\/train.csv')","e39f37ce":"data.info()","0866056a":"data.columns[data.dtypes==object]","f210499f":"data['dependency'].unique()","6d4113c7":"data[(data['dependency']=='no') & (data['SQBdependency']!=0)]","5293538f":"data[(data['dependency']=='yes') & (data['SQBdependency']!=1)]","fe639bb1":"data[(data['dependency']=='3') & (data['SQBdependency']!=9)]","85943a24":"data['dependency']=np.sqrt(data['SQBdependency'])","394d8333":"data['edjefe'].unique()","cd531bb2":"data['edjefa'].unique()","7662c050":"data['SQBedjefe'].unique()","e413efdc":"data[['edjefe', 'edjefa', 'SQBedjefe']][:20]","fa93bb0f":"data[['edjefe', 'edjefa', 'SQBedjefe']][data['edjefe']=='yes']","3ea24c09":"data[(data['edjefe']=='yes') & (data['edjefa']!='no')]","85cfb721":"data[(data['edjefa']=='yes') & (data['parentesco1']==1)][['edjefe', 'edjefa', 'parentesco1', 'escolari']]","3c97854f":"data[data['edjefe']=='yes'][['edjefe', 'edjefa','age', 'escolari', 'parentesco1','male', 'female', 'idhogar']]","2191b28c":"data[(data['edjefe']=='no') & (data['edjefa']=='no')][['edjefe', 'edjefa', 'age', 'escolari', 'female', 'male', 'Id', 'parentesco1', 'idhogar']]","2892458e":"data[(data['edjefe']=='yes') & data['parentesco1']==1][['escolari']]","a5a1c869":"conditions = [\n    (data['edjefe']=='no') & (data['edjefa']=='no'), #both no\n    (data['edjefe']=='yes') & (data['edjefa']=='no'), # yes and no\n    (data['edjefe']=='no') & (data['edjefa']=='yes'), #no and yes \n    (data['edjefe']!='no') & (data['edjefe']!='yes') & (data['edjefa']=='no'), # number and no\n    (data['edjefe']=='no') & (data['edjefa']!='no') # no and number\n]\nchoices = [0, 1, 1, data['edjefe'], data['edjefa']]\ndata['edjefx']=np.select(conditions, choices)\ndata['edjefx']=data['edjefx'].astype(int)\ndata[['edjefe', 'edjefa', 'edjefx']][:15]","ad6ab84b":"data.describe()","11cb66fc":"data.columns[data.isna().sum()!=0]","a3911562":"data[data['meaneduc'].isnull()]","dd4270ca":"data[data['meaneduc'].isnull()][['Id','idhogar','edjefe','edjefa', 'hogar_adul', 'hogar_mayor', 'hogar_nin', 'age', 'escolari']]","838df433":"print(len(data[data['idhogar']==data.iloc[1291]['idhogar']]))\nprint(len(data[data['idhogar']==data.iloc[1840]['idhogar']]))\nprint(len(data[data['idhogar']==data.iloc[2049]['idhogar']]))","3a314b8c":"meaneduc_nan=data[data['meaneduc'].isnull()][['Id','idhogar','escolari']]","b814ae2a":"me=meaneduc_nan.groupby('idhogar')['escolari'].mean().reset_index()","f11f8a7c":"me","aacfe51f":"for row in meaneduc_nan.iterrows():\n    idx=row[0]\n    idhogar=row[1]['idhogar']\n    m=me[me['idhogar']==idhogar]['escolari'].tolist()[0]\n    data.at[idx, 'meaneduc']=m\n    data.at[idx, 'SQBmeaned']=m*m\n    ","50397d9d":"data['v2a1'].isnull().sum()","73207d0b":"norent=data[data['v2a1'].isnull()]\nprint(\"Owns his house:\", norent[norent['tipovivi1']==1]['Id'].count())\nprint(\"Owns his house paying installments\", norent[norent['tipovivi2']==1]['Id'].count())\nprint(\"Rented \", norent[norent['tipovivi3']==1]['Id'].count())\nprint(\"Precarious \", norent[norent['tipovivi4']==1]['Id'].count())\nprint(\"Other \", norent[norent['tipovivi5']==1]['Id'].count())\nprint(\"Total \", 6860)","0c83fe8b":"data['v2a1']=data['v2a1'].fillna(0)","fa40d2ad":"data['v18q1'].isna().sum()","03a912c2":"tabletnan=data[data['v18q1'].isnull()]\ntabletnan[tabletnan['v18q']==0]['Id'].count()","d4e8fd53":"data['v18q1'].unique()","5132e07c":"data['v18q1']=data['v18q1'].fillna(0)","d88fc7c4":"data['rez_esc'].isnull().sum()","28fd4c04":"data['rez_esc'].describe()","4cdca0fd":"data['rez_esc'].unique()","dbea64af":"data[data['rez_esc']>1][['age', 'escolari', 'rez_esc']][:20]","02214a0b":"rez_esc_nan=data[data['rez_esc'].isnull()]\nrez_esc_nan[(rez_esc_nan['age']<18) & rez_esc_nan['escolari']>0][['age', 'escolari']]","e0cc6f75":"data['rez_esc']=data['rez_esc'].fillna(0)","dbe14e57":"d={}\nweird=[]\nfor row in data.iterrows():\n    idhogar=row[1]['idhogar']\n    target=row[1]['Target']\n    if idhogar in d:\n        if d[idhogar]!=target:\n            weird.append(idhogar)\n    else:\n        d[idhogar]=target","7326cc24":"len(set(weird))","b5ca50a5":"data[data['idhogar']==weird[2]][['idhogar','parentesco1', 'Target']]","574042bc":"for i in set(weird):\n    hhold=data[data['idhogar']==i][['idhogar', 'parentesco1', 'Target']]\n    target=hhold[hhold['parentesco1']==1]['Target'].tolist()[0]\n    for row in hhold.iterrows():\n        idx=row[0]\n        if row[1]['parentesco1']!=1:\n            data.at[idx, 'Target']=target\n    ","a1013861":"data[data['idhogar']==weird[1]][['idhogar','parentesco1', 'Target']]","b54384d2":"def data_cleaning(data):\n    data['dependency']=np.sqrt(data['SQBdependency'])\n    data['rez_esc']=data['rez_esc'].fillna(0)\n    data['v18q1']=data['v18q1'].fillna(0)\n    data['v2a1']=data['v2a1'].fillna(0)\n    \n    conditions = [\n    (data['edjefe']=='no') & (data['edjefa']=='no'), #both no\n    (data['edjefe']=='yes') & (data['edjefa']=='no'), # yes and no\n    (data['edjefe']=='no') & (data['edjefa']=='yes'), #no and yes \n    (data['edjefe']!='no') & (data['edjefe']!='yes') & (data['edjefa']=='no'), # number and no\n    (data['edjefe']=='no') & (data['edjefa']!='no') # no and number\n    ]\n    choices = [0, 1, 1, data['edjefe'], data['edjefa']]\n    data['edjefx']=np.select(conditions, choices)\n    data['edjefx']=data['edjefx'].astype(int)\n    data.drop(['edjefe', 'edjefa'], axis=1, inplace=True)\n    \n    meaneduc_nan=data[data['meaneduc'].isnull()][['Id','idhogar','escolari']]\n    me=meaneduc_nan.groupby('idhogar')['escolari'].mean().reset_index()\n    for row in meaneduc_nan.iterrows():\n        idx=row[0]\n        idhogar=row[1]['idhogar']\n        m=me[me['idhogar']==idhogar]['escolari'].tolist()[0]\n        data.at[idx, 'meaneduc']=m\n        data.at[idx, 'SQBmeaned']=m*m\n        \n    return data","20f193a5":"import matplotlib.pyplot as plt\n%matplotlib inline\nimport seaborn as sns","68ca05f2":"data['Target'].hist()","e8ea1588":"data_undersampled=data.drop(data.query('Target == 4').sample(frac=.75).index)","e4da1180":"data_undersampled['Target'].hist()","b236c37b":"X=data_undersampled.drop(['Id', 'idhogar', 'Target', 'edjefe', 'edjefa'], axis=1)\ny=data_undersampled['Target']","44a37717":"from sklearn.model_selection import train_test_split\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2)","fe28578b":"X_train.shape","01d552c2":"y_train.shape","6f0050ff":"from sklearn.ensemble import RandomForestClassifier\nfrom sklearn.model_selection import GridSearchCV","272ee974":"clf = RandomForestClassifier()\nparams={'n_estimators': list(range(40,61, 1))}\ngs = GridSearchCV(clf, params, cv=5)","70a744a0":"gs.fit(X_train, y_train)","4cdac408":"preds=gs.predict(X_test)","deae4e0c":"from sklearn.metrics import classification_report\nprint(classification_report(y_test, preds))","a5c85f0e":"from sklearn.metrics import confusion_matrix\nprint(confusion_matrix(y_test, preds))","9d94a7c9":"print(gs.best_params_)\nprint(gs.best_score_)\nprint(gs.best_estimator_)","5e1e7ad0":"cvres = gs.cv_results_\nfor mean_score, params in zip(cvres[\"mean_test_score\"], cvres[\"params\"]):\n    print(np.sqrt(mean_score), params)","80dcb98c":"test_data=pd.read_csv('..\/input\/test.csv')","45540b19":"test_data=data_cleaning(test_data)","93ac7287":"ids=test_data['Id']\ntest_data.drop(['Id', 'idhogar'], axis=1, inplace=True)","45cba127":"test_predictions=gs.predict(test_data)","dc9e2e1d":"test_predictions[:5]","d3e851cb":"submit=pd.DataFrame({'Id': ids, 'Target': test_predictions})","16fcbd76":"submit.to_csv('submit.csv', index=False)","8881453d":"The data have 9557 entries, each entry has 143 columns.\n\nMost of the data are floats and integers, a few objects. Let's take a look at the objects.","3d23fa0e":"Not a lot of rows","68061011":"'meaneduc' and 'SQBmeaned' are related, let's start with those.","1727a15d":"So all the nans here are either adults or children before school age. We can input  0 again.","85aca35b":"Basically:\n* 'edjefe' and 'edjefa' are both 'no' when the head of the household had 0 years of school\n* there's 'edjefe'= 'yes' and 'edjefa'='no' in some cases, all these cases the head of the household had 1 year of school\n* there's 'edjefe'= 'no' and 'edjefa'='yes' in some cases, all these cases the head of the household had 1 year of school\n* most of the time either 'edjefe' or 'edjefa' is a number while the other is a 'no'\n\nLet's merge the jefe and jefa education into one, undependent of gender","8bf57770":"Seems like we can just derive the dependency from the SQBdependency.","4dd28e28":"Let's look at the dependency rate.","deed6b96":"Next, let's look at 'v2a1', the monthly rent payment, that also has missing values.","30916e6e":"### Ploting","4a94add7":"Again, numbers, 'yes' and 'no'. Here there's also 'SQBedjefe', yay!","e34d6bdb":"So, the 5 rows with Nan for 'meaneduc' is just 3 households, where 18-19 year-olds live.  No other people live in these households. Then we can just take the education levels of these kids ('escolari') and put them into 'meaneduc' and 'SQBmeaned'.","b3515e98":"Now let's  look at the jefe\/jefa education.","09e3f094":"Hmmm, these are all schoolchildren...","e026174a":"Let's figure out if there are missing values.","b76ebe69":"So the \"square\" of no is 0.","5d945011":"Next up is 'rez_esc', which indicates if a person is behind in school.","829515b8":"* Id,  idhogar - no problem, they are just identifications \n* dependency - dependency rate \n* edjefe, edjefa - years of education of head of household","69abba1b":"That's also a crazy lot of rows..","2010c0e3":"That's a lot of missing values.\n\nBut maybe they own their houses. We can look what type of housing these people with missing values live..","e320a4bd":"Now, let's look at 'v18q1', which indicates how many tablets the household owns.","a93a143b":"There are 85 households like that.","49ee3b02":"Hmmm, 'SQBedjefe is just the square of 'edjefe', it's 0 if the head of the household is a woman.","93456b75":"Lots of numbers as string, plus 'yes' and 'no'. However, we have a column containing the square values if the dependency, 'SQBdependency'. Maybe that can help us.","40ac1e90":"Columns with nans:\n* v2a1 - monthly rent\n* v18q1 - number of tablets\n* rez_esc - years behind school\n* meaneduc - mean education for adults\n* SQBmeaned - square of meaned  ","d34fc1e1":"That's also a lot rows with missing values... However, there's a column, 'v18q', which indicates whether there's a tablet in the household at all, that might help!","78381b89":"That's exactly the number of rows with missing values! There's also no 0 among the values of 'v18q1'. So all the nans in 'v18q1' just means they don't own a tablet! So we can just change them to 0.","851dfb1a":"Someone commented in the discussions that the same household can have different target values. Let's look at it.","582587f9":"In the discussion we were told that the correct target value is the one belonging to the head of the household. So we should set the correct value each time.","436fcb92":"The majority in fact owns their houses, only a few have odd situations. We can probably just assume they don't pay rent, and put 0 in these cases.","e50fd4a4":"### Random forest"}}