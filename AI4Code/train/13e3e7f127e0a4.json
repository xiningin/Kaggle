{"cell_type":{"5d1b015e":"code","7e77ce0a":"code","5f5995b1":"code","4f7f6b34":"code","4e097283":"code","4704a48d":"code","5e98a27b":"code","97386584":"code","87548554":"code","0b52e389":"code","c2c98c11":"code","dfcd8dcd":"code","131174be":"code","5e71d5d3":"code","54ae4b1a":"code","403bd94c":"code","f2ba7942":"code","1ca0ef31":"code","29e0e264":"markdown","93caefab":"markdown","9145a92e":"markdown","8136d797":"markdown","ccdc5188":"markdown","4222e186":"markdown","12e6f3b2":"markdown","fed7950f":"markdown","b22ba300":"markdown","f2bd9f5d":"markdown","be231752":"markdown","eaed9a22":"markdown","b1f24dfb":"markdown","f28dbf93":"markdown","30576e02":"markdown","2e97a0a0":"markdown","31e45dbc":"markdown","7bf89f5b":"markdown","0a1dd1b1":"markdown","adee2582":"markdown","d2e71c01":"markdown","49b57103":"markdown","df1162ad":"markdown"},"source":{"5d1b015e":"import os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n","7e77ce0a":"import numpy as np\nimport matplotlib.pyplot as plt\nimport pandas as pd","5f5995b1":"dataset_train = pd.read_csv('\/kaggle\/input\/google-stock-price\/Google_Stock_Price_Train.csv')\ntraining_set = dataset_train.iloc[:, 1:2].values","4f7f6b34":"from sklearn.preprocessing import MinMaxScaler\nsc = MinMaxScaler(feature_range = (0, 1))\ntraining_set_scaled = sc.fit_transform(training_set)","4e097283":"X_train = []\ny_train = []\nfor i in range(60, 1258):\n    X_train.append(training_set_scaled[i-60:i, 0])\n    y_train.append(training_set_scaled[i, 0])\nX_train, y_train = np.array(X_train), np.array(y_train)","4704a48d":"X_train = np.reshape(X_train, (X_train.shape[0], X_train.shape[1], 1))","5e98a27b":"from keras.models import Sequential\nfrom keras.layers import Dense\nfrom keras.layers import LSTM\nfrom keras.layers import Dropout\nfrom keras.layers import Activation","97386584":"regressor = Sequential()","87548554":"regressor.add(LSTM(units = 50, return_sequences = True, input_shape = (X_train.shape[1], 1)))\nregressor.add(Dropout(0.2))","0b52e389":"regressor.add(LSTM(units = 50, return_sequences = True))\nregressor.add(Dropout(0.2))","c2c98c11":"regressor.add(LSTM(units = 50, return_sequences = True))\nregressor.add(Dropout(0.2))","dfcd8dcd":"regressor.add(LSTM(units = 50))\nregressor.add(Dropout(0.2))","131174be":"regressor.add(Dense(units = 1))","5e71d5d3":"regressor.compile(optimizer = 'adam', loss = 'mean_squared_error')","54ae4b1a":"regressor.fit(X_train, y_train, epochs = 200, batch_size = 32)","403bd94c":"dataset_test = pd.read_csv('\/kaggle\/input\/google-stock-price\/Google_Stock_Price_Test.csv')\nreal_stock_price = dataset_test.iloc[:, 1:2].values","f2ba7942":"dataset_total = pd.concat((dataset_train['Open'], dataset_test['Open']), axis = 0)\ninputs = dataset_total[len(dataset_total) - len(dataset_test) - 60:].values\ninputs = inputs.reshape(-1,1)\ninputs = sc.transform(inputs)\nX_test = []\nfor i in range(60, 80):\n    X_test.append(inputs[i-60:i, 0])\nX_test = np.array(X_test)\nX_test = np.reshape(X_test, (X_test.shape[0], X_test.shape[1], 1))\npredicted_stock_price = regressor.predict(X_test)\npredicted_stock_price = sc.inverse_transform(predicted_stock_price)","1ca0ef31":"plt.plot(real_stock_price, color = 'red', label = 'Real Google Stock Price')\nplt.plot(predicted_stock_price, color = 'blue', label = 'Predicted Google Stock Price')\nplt.title('Google Stock Price Prediction')\nplt.xlabel('Time')\nplt.ylabel('Google Stock Price')\nplt.legend()\nplt.show()","29e0e264":"### Feature Scaling","93caefab":"### Creating a data structure with 60 timesteps and 1 output","9145a92e":"### Importing the training set","8136d797":"### Reshaping","ccdc5188":"### Fitting the RNN to the Training set","4222e186":"### Adding a third LSTM layer and some Dropout regularisation","12e6f3b2":"### Visualising the results","fed7950f":"### Adding a fourth LSTM layer and some Dropout regularisation","b22ba300":"### Getting the real stock price of 2017","f2bd9f5d":"### Compiling the RNN","be231752":"### Adding the output layer","eaed9a22":"## Part 3 - Making the predictions and visualising the results","b1f24dfb":"# Recurrent Neural Network","f28dbf93":"#### This model uses LSTM in RNN and gives fairly accurately result on how the stock price of google varies.","30576e02":"### Getting the predicted stock price of 2017","2e97a0a0":"### Importing the libraries","31e45dbc":"## Part 1 - Data Preprocessing","7bf89f5b":"### Initialising the RNN","0a1dd1b1":"### Adding a second LSTM layer and some Dropout regularisation","adee2582":"### Importing the Keras libraries and packages","d2e71c01":"## Conclusion","49b57103":"## Part 2 - Building and Training the RNN","df1162ad":"### Adding the first LSTM layer and some Dropout regularisation"}}