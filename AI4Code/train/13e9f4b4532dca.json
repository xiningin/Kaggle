{"cell_type":{"52e91289":"code","05c9134c":"markdown","802ab6e6":"markdown","7e2204eb":"markdown","3ae5eba8":"markdown","4563bb2a":"markdown","86acd521":"markdown","cd1231e7":"markdown","9d51ba15":"markdown","200e610d":"markdown"},"source":{"52e91289":"def create_10_rec():\n    import pandas as pd\n    pd.set_option('display.max_columns', 20)\n    movie = pd.read_csv('..\/input\/movielense20m\/movie.csv')\n    rating = pd.read_csv('..\/input\/movielense20m\/rating.csv')\n    df = movie.merge(rating, how=\"left\", on=\"movieId\")\n    comment_counts = pd.DataFrame(df[\"title\"].value_counts())\n    rare_movies = comment_counts[comment_counts[\"title\"] <= 5000].index\n    common_movies = df[~df[\"title\"].isin(rare_movies)]\n    user_movie_df = common_movies.pivot_table(index=[\"userId\"], columns=[\"title\"], values=\"rating\")\n    random_user = int(pd.Series(user_movie_df.index).sample(1, random_state=33).values)\n    random_user_df = user_movie_df[user_movie_df.index == random_user]\n    movies_watched = random_user_df.columns[random_user_df.notna().any()].tolist()\n    movies_watched_df = user_movie_df[movies_watched]\n    user_movie_count = movies_watched_df.T.notnull().sum().reset_index()\n    user_movie_count.columns = [\"userId\", \"movie_count\"]\n    watched_movie_th = (user_movie_count[\"movie_count\"].max()) * 80 \/ 100\n    users_same_movies = user_movie_count[user_movie_count[\"movie_count\"] > watched_movie_th][\"userId\"]\n    final_df = pd.concat([movies_watched_df[movies_watched_df.index.isin(users_same_movies)],random_user_df[movies_watched]])\n    corr_df = final_df.T.corr().unstack().sort_values().drop_duplicates()\n    corr_df = pd.DataFrame(corr_df, columns=[\"corr\"])\n    corr_df.index.names = ['user_id_1', 'user_id_2']\n    corr_df = corr_df.reset_index()\n    top_users = corr_df[(corr_df[\"user_id_1\"] == random_user) & (corr_df[\"corr\"] >= 0.62)][\n        [\"user_id_2\", \"corr\"]].reset_index(drop=True)\n    top_users = top_users.sort_values(by='corr', ascending=False)\n    top_users.rename(columns={\"user_id_2\": \"userId\"}, inplace=True)\n    top_users_ratings = top_users.merge(rating[[\"userId\", \"movieId\", \"rating\"]], how='inner')\n    top_users_ratings = top_users_ratings[top_users_ratings[\"userId\"] != random_user]\n    top_users_ratings['weighted_rating'] = top_users_ratings['corr'] * top_users_ratings['rating']\n    recommendation_df = top_users_ratings.groupby('movieId').agg({\"weighted_rating\": \"mean\"})\n    recommendation_df = recommendation_df.reset_index()\n    movies_to_be_recommend = recommendation_df.sort_values(\"weighted_rating\", ascending=False).head(5)\n    final_recommendation = movies_to_be_recommend.merge(movie[[\"movieId\", \"title\"]])[\"title\"]\n    movie_id = \\\n    rating[(rating[\"userId\"] == random_user) & (rating[\"rating\"] == 5.0)].sort_values(by=\"timestamp\", ascending=False)[\n        \"movieId\"][0:1].values[0]\n    g = [col for col in movie.values if movie_id in col]\n    movie_name = g[0][1]\n    movie_name = user_movie_df[movie_name]\n    movies_from_item_based = user_movie_df.corrwith(movie_name).sort_values(ascending=False).head(6)\n    final_recommendation = final_recommendation.reset_index()\n    movies_from_item_based = movies_from_item_based[1:6]\n    movies_from_item_based = movies_from_item_based.reset_index()\n    top_10_rec = pd.concat([final_recommendation, movies_from_item_based], ignore_index=True, sort=False)[\"title\"]\n    return top_10_rec\n\ncreate_10_rec()","05c9134c":"Finally we\u2019ve got 5 movies with highest weighted_rating to recommend our user.\n\nI\u2019ve got the print below as a result. Enjoy!","802ab6e6":"In this example we have a dataset of movie names, movie id\u2019s, user id\u2019s, rating scores and time of rating by users. With this, we\u2019ll be able to do behavioral analysis of the users on the dataset; how many of them rated with maximum score the movie of \u201cHarry Potter\u201d; how many of users correlate with each other behavior on rating the same movies with the same scores or how many of users show totally the opposite of your taste upon rating movies, etc.\n\nBelow you can find this magic works.\nI will be explaining the necessity of parts below.","7e2204eb":"![TV.jpeg](attachment:1d413097-9b33-4375-9c38-e64e16d32782.jpeg)","3ae5eba8":"**Get your tub of popcorn cause I\u2019m playing your favorite movie!**\n\nUser-Based Movie Recommendation","4563bb2a":"![TV1.png](attachment:43528da0-6c98-4230-a37a-bc7d5b53c17c.png)","86acd521":"Thank you for your reading!","cd1231e7":"It\u2019s very well known now the dilemma we\u2019re in while search for a movie. Someone offers you their preferences, others push for any drama type and some others might be up for a comedy movie. But, what should be your choice? In the meantime you probably aren\u2019t choosing the movie you really want to see, but the movie preferred by the person you love the most; or the movie preferred by anyone who is new to your circle and you want to warm your relationship. However this kind of choice won\u2019t be \u201cscientifically proven as the best movie for your taste\u201d. I know, we won\u2019t be start writing math formulas before a movie night, but rather use the magic of data science to choose within seconds the best movie for you without having the effect of emotions in it.","9d51ba15":"This work has been done with the support of [VBO](https:\/\/www.veribilimiokulu.com\/).","200e610d":"From 0\u201324 we prepared the datasets, found movies that were rated less than 5000 times and eliminated them from our analysis. This been done because we are already focused on popular movies.\n\nFrom 25\u201353 we found our random selected user\u2019s watched movies. Later, to understand with which other users actually our random selected user is having similar behavior (Rating the same movies with close-in scores. That means they have similar tastes), we got the ratings of our random selected user\u2019s \u201cpotential friends\u201d watched movies and their ratings.\n\nFrom 54\u201382 we have created the similarity matrix of these users by correlation of their rates for movies, filtered only them with correlation higher than %62 and sorted them by descending.\n\nFrom 83\u2013100- Because deciding with correlation or rate score would be difficult, we had to multiply ratings with correlation and then getting the mean of weighted_rating by movie to get a more acceptable rating score for the ratings and correlation between users."}}