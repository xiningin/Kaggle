{"cell_type":{"e5238d73":"code","d4743153":"code","64077564":"code","b9d0786d":"code","409f1c4f":"markdown","a770891e":"markdown","5bfbe021":"markdown"},"source":{"e5238d73":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nfrom sklearn.preprocessing import Imputer\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import mean_absolute_error\nfrom xgboost import XGBRegressor\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory\n\nimport os\nprint(os.listdir(\"..\/input\"))\n\n# Any results you write to the currentd directory are saved as output.","d4743153":"train_data = pd.read_csv('..\/input\/train.csv')\ntest_data = pd.read_csv('..\/input\/test.csv')\nprint(train_data.head()) \nprint(test_data.head())\n\nprint(train_data.columns)\nprint(test_data.columns)\n\ndef get_numeric_cols(df):\n    return [col for col in df.columns if df[col].dtype != 'object']\n\nnumeric_cols = get_numeric_cols(train_data)\ntrain_data[numeric_cols] = Imputer().fit_transform(train_data[numeric_cols])\nnumeric_cols_test = get_numeric_cols(test_data)\ntest_data[numeric_cols_test] = Imputer().fit_transform(test_data[numeric_cols_test])\n\ntrain_y = train_data.SalePrice\n# test is meant for predictions and doesn't contain any price data. I need to provide it.\n\ncols_with_missing = [col for col in train_data.columns if train_data[col].isnull().any()]\nprint('Missing:\\n',cols_with_missing)\n\ncand_train_predictors = train_data.drop(['Id', 'SalePrice'] + cols_with_missing, axis=1)\ncand_test_predictors = test_data.drop(['Id'] + cols_with_missing, axis=1)\n\nnumeric_cols = [col for col in cand_train_predictors.columns if train_data[col].dtype != 'object']\n\nlow_cardinality = [col for col in cand_train_predictors if\n                   train_data[col].nunique() < 10 and train_data[col].dtype == 'object']\n\npredictor_columns = numeric_cols + low_cardinality\n\ntrain_X = train_data[predictor_columns]\ntest_X = test_data[predictor_columns]\n\ntrain_X=pd.get_dummies(train_X)\ntest_X = pd.get_dummies(test_X)\ntrain_X, test_X = train_X.align(test_X,join='left', axis=1)\n\nprint('-'*80)\nprint('cols in train which contain nan')\nprint([col for col in train_X.columns if train_X[col].isnull().any()])\nprint('-'*80)\nstill_missing = [col for col in test_X.columns if test_X[col].isnull().any()]\nprint('cols in test which contain nan before fillna')\nprint(still_missing)\nif(len(still_missing) > 0):\n    test_X = test_X.fillna(0)\nprint('-'*80)\nprint('cols in test which contain nan after fillna')\nprint([col for col in test_X.columns if test_X[col].isnull().any()])\nprint('-'*80)\nprint('cols in test but not in train')\nnot_in_train = [col for col in test_X.columns if col not in train_X.columns]\nprint(not_in_train)        \nprint('-'*80)\nprint('cols in train but not in test')\nnot_in_test = [col for col in train_X.columns if col not in test_X.columns]\nprint(not_in_test)        \n","64077564":"train_X, val_X, train_y, val_y = train_test_split(train_X, train_y, test_size=0.25)\n\nmy_imputer = Imputer()\ntrain_X = my_imputer.fit_transform(train_X)\nval_X = my_imputer.fit_transform(val_X)\n\nsteps = np.linspace(0.001, 0.1, 100)\nmaes = []\nfor learning_rate in steps:\n    my_model = XGBRegressor(n_estimators=1000, learning_rate=learning_rate, random_state=1)\n    my_model.fit(train_X, train_y,\n                 early_stopping_rounds=5,\n                 eval_set=[(val_X, val_y)],\n                 verbose=False)\n\n    predictions = my_model.predict(val_X)\n    maes.append(mean_absolute_error(val_y, predictions))\n    print('mae[%f]:[%f] ' % (learning_rate, maes[-1]))\n    \nindex = np.argmin(maes)\nlearning_rate = steps[index]\nprint('optimal learning rate:', learning_rate)","b9d0786d":"test_X = test_X.as_matrix()\n\nmy_model = XGBRegressor(n_estimators=1000, learning_rate=learning_rate, random_state=1)\nmy_model.fit(train_X, train_y,\n             early_stopping_rounds=5,\n             eval_set=[(val_X, val_y)],\n             verbose=False)\n\npredicted_prices = my_model.predict(test_X)\nprint(predicted_prices[:5])\n\n# print(len(predicted_prices))\n# print(len(test_data.Id))\n\nmy_submission = pd.DataFrame({'Id': test_data.Id, 'SalePrice': predicted_prices})\nmy_submission.Id = my_submission.Id.astype(int)\n# print(my_submission.Id)\n# you could use any filename. We choose submission here\nmy_submission.to_csv('submission.csv', index=False)","409f1c4f":"# Model\n\nNow I will fit a model.","a770891e":"# Predicting and submitting\n\nNow it's time to predict from test.","5bfbe021":"# Loading data\n\nLoading data from train and test file. Test file provides only input data and I'll predict the prices via using a model."}}