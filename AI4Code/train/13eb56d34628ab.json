{"cell_type":{"99855c01":"code","4a341ccc":"code","b4b40b35":"code","35695326":"code","ae82dbe9":"code","6c041bb1":"code","4b8ec984":"code","406fcff0":"code","d7ead472":"code","49685203":"code","7158074f":"code","eaa733f1":"code","87207b18":"code","1eeafbc8":"code","b84f3e99":"code","d5ad8342":"code","4427625c":"code","8dc0ea54":"code","25d47534":"code","9e73a7c1":"code","14d729b5":"code","82102797":"code","83fcb209":"code","ec8f927a":"code","c1491c05":"code","a0dcca4d":"code","a08b6d4b":"code","2787c69a":"code","719d5475":"code","9577314c":"code","00ea2bac":"code","510a207f":"code","dd564325":"code","e79affc0":"markdown","1f7b5899":"markdown","61d0e1e3":"markdown","e8e2afa7":"markdown","796dc30c":"markdown","18e32ecf":"markdown","3ac8cb9b":"markdown","f97db7a7":"markdown","0c74d5c7":"markdown","59a5cdde":"markdown","725d1f6e":"markdown","38091397":"markdown","ee2cd7e0":"markdown","6085808f":"markdown","e490d2d7":"markdown","7eb34a4a":"markdown","f8da6714":"markdown"},"source":{"99855c01":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","4a341ccc":"import seaborn as sns\nimport matplotlib.pyplot as plt\nimport datetime as dt","b4b40b35":"data_all_moto = pd.read_csv(\"..\/input\/data-all-11\/data_all (11).csv\", parse_dates=['visit_date'])","35695326":"data_all_moto","ae82dbe9":"data_all_moto = data_all_moto.drop([\"lag70\",\"lag63\"], axis=1)\ndata_all_moto = data_all_moto.drop([\"index\"], axis=1)\ndata_all_moto = data_all_moto.drop([\"lag_mean_7-21\",\"lag_mean_7-28\",\"lag_mean_7-14\"], axis=1)\n# data_all_moto = data_all_moto.loc[(data_all_moto['air_genre_name'] == 13)]","6c041bb1":"data_all_moto.visit_date","4b8ec984":"data_all = data_all_moto","406fcff0":"def set_va():\n    #\u3068\u308a\u3042\u3048\u305a\u5168\u90e8train\u306b\u3059\u308b\n    data_all.loc[(data_all['visit_date'] <= dt.datetime(2017,4,22)), 'set'] = 'train'\n    #validation\u30c7\u30fc\u30bf\u306e\u671f\u9593\u306e\u7d42\u308f\u308a\u3092\u6307\u5b9a\u3059\u308b\n    data_all.loc[(data_all['visit_date'] <= dt.datetime(2017,4,22)), 'set'] = 'va'\n    data_all.loc[(data_all['visit_date'] <= dt.datetime(2017,4,15)), 'set'] = 'train'\n    print(\"set_va done\")","d7ead472":"#2017\/5\/31\u307e\u3067\u5168\u90e8test\u306b\u3057\u305f\u5f8c\u30015\/28\u3088\u308a\u524d\u306fnot-test\u306b\u3059\u308b #\u3010YOU NEED TO CHANGE\u3011\ndata_all.loc[(data_all['visit_date'] <= dt.datetime(2017,4,29)), 'set'] = 'test'\ndata_all.loc[(data_all['visit_date'] < dt.datetime(2017,4,23)), 'set'] = 'not-test'\n\n# \u30d0\u30ea\u30c7\u30fc\u30b7\u30e7\u30f3\u30c7\u30fc\u30bf\u306e\u7bc4\u56f2\u3092\u6307\u5b9a\nset_va()\n\n# visit_data\u306fdrop\ndata_all = data_all.drop(columns=\"visit_date\")\n\n# train\u30c7\u30fc\u30bf\u304b\u3089\u3001visitors(\u76ee\u7684\u5909\u6570)\u3068\u3001id\u3092\u843d\u3068\u3059(\u4e88\u6e2c\u306b\u5bc4\u4e0e\u3057\u306a\u3044)\ncolumns_drop2 = [\"visitors\",\"id\"]\n\n# train,test,va\u306b\u5206\u3051\u308b\ntrain_fit = pd.DataFrame()\ntrain_fit = data_all.loc[data_all.set == \"train\"]\ntrain_fit_y = pd.DataFrame()\ntrain_fit_y[\"visitors\"] = train_fit.visitors\ntrain_fit_x = train_fit.drop(columns=columns_drop2)\ntrain_fit_x = train_fit_x.drop(columns=\"set\")\n\nva_fit = pd.DataFrame()\nva_fit = data_all.loc[data_all.set == \"va\"]\nva_fit_y = pd.DataFrame()\nva_fit_y[\"visitors\"] = va_fit.visitors\nva_fit_x = va_fit.drop(columns=columns_drop2)\nva_fit_x = va_fit_x.drop(columns=\"set\")\n\ntest_fit = pd.DataFrame()\ntest_fit = data_all.loc[data_all.set == \"test\"]\ntest_fit_x = test_fit.drop(columns=\"visitors\")\ntest_fit_x = test_fit_x.drop(columns=\"set\")\n# test\u30c7\u30fc\u30bf\u3067\u8a55\u4fa1\u3057\u306a\u3044\u65e5\u30fb\u5e97\u8217\u306e\u7d44\u307f\u5408\u308f\u305b\u304c\u3042\u308aid=0\u3068\u306a\u3063\u3066\u3057\u307e\u3046\n# id=0\u306e\u884c\u3092\u524a\u9664\u3059\u308b\ntest_fit_x = test_fit_x[test_fit_x['id'] != 0]\n\ntest_id = test_fit_x.id\ntest_fit_x = test_fit_x.drop(columns=\"id\")\n\n","49685203":"%%time\nimport lightgbm as lgb\nfrom sklearn.metrics import mean_squared_log_error\n\n# \u30d1\u30e9\u30e1\u30fc\u30bf\u306e\u8a2d\u5b9a\nparams = {\n    \"objective\" : \"regression\",\n    \"metric\" : \"rmse\",\n    \"num_leaves\" : 40,\n    \"learning_rate\" : 0.01,\n    \"bagging_fraction\" : 0.8,\n    \"feature_fraction\" : 0.4, #\u7279\u5fb4\u91cf\u306e\u3007\uff05\u3060\u3051\u5229\u7528\u3059\u308b\n    \"bagging_frequency\" : 6,\n    \"bagging_seed\" : 42,\n    \"verbosity\" : -1, # \u5b66\u7fd2\u9014\u4e2d\u306e\u7d4c\u904e\u3092\u8868\u793a\u3059\u308b\u304b\u3069\u3046\u304b\n    \"seed\": 42\n}\n\ntrain_lgb = lgb.Dataset(train_fit_x, label=train_fit_y)\nva_lgb = lgb.Dataset(va_fit_x, label=va_fit_y)\n\nevals_result = {}\n\nmodel_lgb1 = lgb.train(params, train_set = train_lgb,\n                  num_boost_round = 10000,\n                  valid_sets=[train_lgb, va_lgb], \n                  early_stopping_rounds=200, \n                  verbose_eval=1000, \n                  evals_result=evals_result)","7158074f":"va_visitors = data_all.loc[(data_all.set == \"va\"),\"visitors\"]\n\npred = model_lgb1.predict(va_fit_x, num_iteration=model_lgb1.best_iteration)\n\ncolumns = [\"pred_visitors\"]\npred_d = pd.DataFrame(data=pred, columns = columns)\n\n# \u30de\u30a4\u30ca\u30b9\u306b\u4e88\u6e2c\u3055\u308c\u308b\u5024\u306f\u7d76\u5bfe\u5024\u3092\u53d6\u5f97\u3059\u308b\npred_d[\"pred_visitors\"] = pred_d[\"pred_visitors\"].abs()\n\n# RSMLE\u30b9\u30b3\u30a2\u306e\u7b97\u51fa\nscore1 = np.sqrt(mean_squared_log_error(va_visitors, pred_d[\"pred_visitors\"]))\nprint(\"---------------RMSLE-score----------------\")\nscore1","eaa733f1":"columns = [\"visitors\"]\nva_fit_d = pd.DataFrame(data=va_visitors, columns = columns)\nva_fit_d = va_fit_d.reset_index(drop=True)\n\nsns.scatterplot(x=va_fit_d['visitors'], y=pred_d['pred_visitors'])\nsns.scatterplot(x=va_fit_d['visitors'], y=va_fit_d['visitors']) #perfect fitting line","87207b18":"# \u30e2\u30c7\u30eb\u3067\u4e88\u6e2c\u3059\u308b\npred = model_lgb1.predict(test_fit_x)\n\n# \u63d0\u51fa\u7528\u30c7\u30fc\u30bf\u3092\u4f5c\u6210\u3059\u308b\ncolumns_ck = [[\"visitors\"]]\nsubmission_ck = pd.DataFrame(data=pred, columns = columns_ck)\ntest_id_df = pd.DataFrame(data=test_id)\ntest_id_df = test_id_df.reset_index(drop=True)\ntest_id_df.columns = [\"id\"]\n\ntest_reindex = test_fit_x.reset_index(drop=True)\n\nsubmission = pd.DataFrame()\nsubmission[\"id\"] = test_id_df.id\nsubmission[\"visitors\"] = submission_ck.visitors\n\n# csv\u30d5\u30a1\u30a4\u30eb\u306b\u66f8\u304d\u51fa\u3059\nsubmission.to_csv(\"submission_week1.csv\", index=False)","1eeafbc8":"# data_all\u3092\u5143\u306b\u623b\u3059\ndata_all = data_all_moto","b84f3e99":"%%time\n#\u7279\u5fb4\u91cf\u3092\u30c9\u30ed\u30c3\u30d7\u3059\u308b\ndrops = [\"lag7\"]                                                              #\u3010YOU NEED TO CHANGE\u3011\ndata_all = data_all.drop(columns = drops)\n\n#2017\/5\/31\u307e\u3067\u5168\u90e8test\u306b\u3057\u305f\u5f8c\u30015\/28\u3088\u308a\u524d\u306fnot-test\u306b\u3059\u308b #\u3010YOU NEED TO CHANGE\u3011\ndata_all.loc[(data_all['visit_date'] <= dt.datetime(2017,5,6)), 'set'] = 'test'\ndata_all.loc[(data_all['visit_date'] < dt.datetime(2017,4,30)), 'set'] = 'not-test'\n\n# \u30d0\u30ea\u30c7\u30fc\u30b7\u30e7\u30f3\u30c7\u30fc\u30bf\u306e\u7bc4\u56f2\u3092\u6307\u5b9a\nset_va()\n\n# visit_data\u306fdrop\ndata_all = data_all.drop(columns=\"visit_date\")\n\n# train\u30c7\u30fc\u30bf\u304b\u3089\u3001visitors(\u76ee\u7684\u5909\u6570)\u3068\u3001id\u3092\u843d\u3068\u3059(\u4e88\u6e2c\u306b\u5bc4\u4e0e\u3057\u306a\u3044)\ncolumns_drop2 = [\"visitors\",\"id\"]\n\n# train,test,va\u306b\u5206\u3051\u308b\ntrain_fit = pd.DataFrame()\ntrain_fit = data_all.loc[data_all.set == \"train\"]\ntrain_fit_y = pd.DataFrame()\ntrain_fit_y[\"visitors\"] = train_fit.visitors\ntrain_fit_x = train_fit.drop(columns=columns_drop2)\ntrain_fit_x = train_fit_x.drop(columns=\"set\")\n\nva_fit = pd.DataFrame()\nva_fit = data_all.loc[data_all.set == \"va\"]\nva_fit_y = pd.DataFrame()\nva_fit_y[\"visitors\"] = va_fit.visitors\nva_fit_x = va_fit.drop(columns=columns_drop2)\nva_fit_x = va_fit_x.drop(columns=\"set\")\n\ntest_fit = pd.DataFrame()\ntest_fit = data_all.loc[data_all.set == \"test\"]\ntest_fit_x = test_fit.drop(columns=\"visitors\")\ntest_fit_x = test_fit_x.drop(columns=\"set\")\n# test\u30c7\u30fc\u30bf\u3067\u8a55\u4fa1\u3057\u306a\u3044\u65e5\u30fb\u5e97\u8217\u306e\u7d44\u307f\u5408\u308f\u305b\u304c\u3042\u308aid=0\u3068\u306a\u3063\u3066\u3057\u307e\u3046\n# id=0\u306e\u884c\u3092\u524a\u9664\u3059\u308b\ntest_fit_x = test_fit_x[test_fit_x['id'] != 0]\n\ntest_id = test_fit_x.id\ntest_fit_x = test_fit_x.drop(columns=\"id\")\n\n# LightGBM\u30e2\u30c7\u30eb\u3067\u5b66\u7fd2\nimport lightgbm as lgb\nfrom sklearn.metrics import mean_squared_log_error\n\n\ntrain_lgb = lgb.Dataset(train_fit_x, label=train_fit_y)\nva_lgb = lgb.Dataset(va_fit_x, label=va_fit_y)\n\nevals_result = {}\n\nmodel_lgb2 = lgb.train(params, train_set = train_lgb,                          #\u3010YOU NEED TO CHANGE\u3011\n                  num_boost_round = 10000,\n                  valid_sets=[train_lgb, va_lgb], \n                  early_stopping_rounds=200, \n                  verbose_eval=1000, \n                  evals_result=evals_result)\n\nva_visitors = data_all.loc[(data_all.set == \"va\"),\"visitors\"]\n\npred = model_lgb2.predict(va_fit_x, num_iteration=model_lgb2.best_iteration)  #\u3010YOU NEED TO CHANGE\u3011*2\n\ncolumns = [\"pred_visitors\"]\npred_d = pd.DataFrame(data=pred, columns = columns)\n\n# \u30de\u30a4\u30ca\u30b9\u306b\u4e88\u6e2c\u3055\u308c\u308b\u5024\u306f\u7d76\u5bfe\u5024\u3092\u53d6\u5f97\u3059\u308b\npred_d[\"pred_visitors\"] = pred_d[\"pred_visitors\"].abs()\n\n# RSMLE\u30b9\u30b3\u30a2\u306e\u7b97\u51fa\nscore2 = np.sqrt(mean_squared_log_error(va_visitors, pred_d[\"pred_visitors\"])) #\u3010YOU NEED TO CHANGE\u3011\nprint(\"---------------RMSLE-score----------------\")\nprint(score2)                                                                #\u3010YOU NEED TO CHANGE\u3011\n\n# \u30e2\u30c7\u30eb\u3067\u4e88\u6e2c\u3059\u308b\npred = model_lgb2.predict(test_fit_x)                                   #\u3010YOU NEED TO CHANGE\u3011\n\n# \u63d0\u51fa\u7528\u30c7\u30fc\u30bf\u3092\u4f5c\u6210\u3059\u308b\ncolumns_ck = [[\"visitors\"]]\nsubmission_ck = pd.DataFrame(data=pred, columns = columns_ck)\ntest_id_df = pd.DataFrame(data=test_id)\ntest_id_df = test_id_df.reset_index(drop=True)\ntest_id_df.columns = [\"id\"]\n\ntest_reindex = test_fit_x.reset_index(drop=True)\n\nsubmission = pd.DataFrame()\nsubmission[\"id\"] = test_id_df.id\nsubmission[\"visitors\"] = submission_ck.visitors\n\n# csv\u30d5\u30a1\u30a4\u30eb\u306b\u66f8\u304d\u51fa\u3059\nsubmission.to_csv(\"submission_week2.csv\", index=False)                #\u3010YOU NEED TO CHANGE\u3011\n\n# data_all\u3092\u5143\u306b\u623b\u3059\ndata_all = data_all_moto","d5ad8342":"data_all = data_all_moto","4427625c":"%%time\n#\u7279\u5fb4\u91cf\u3092\u30c9\u30ed\u30c3\u30d7\u3059\u308b\ndrops = [\"lag7\",\"lag14\"]                                                  #\u3010YOU NEED TO CHANGE\u3011\ndata_all = data_all.drop(columns = drops)\n\n#2017\/5\/31\u307e\u3067\u5168\u90e8test\u306b\u3057\u305f\u5f8c\u30015\/28\u3088\u308a\u524d\u306fnot-test\u306b\u3059\u308b #\u3010YOU NEED TO CHANGE\u3011\ndata_all.loc[(data_all['visit_date'] <= dt.datetime(2017,5,13)), 'set'] = 'test'\ndata_all.loc[(data_all['visit_date'] < dt.datetime(2017,5,7)), 'set'] = 'not-test'\n\n# \u30d0\u30ea\u30c7\u30fc\u30b7\u30e7\u30f3\u30c7\u30fc\u30bf\u306e\u7bc4\u56f2\u3092\u6307\u5b9a\nset_va()\n\n# visit_data\u306fdrop\ndata_all = data_all.drop(columns=\"visit_date\")\n\n# train\u30c7\u30fc\u30bf\u304b\u3089\u3001visitors(\u76ee\u7684\u5909\u6570)\u3068\u3001id\u3092\u843d\u3068\u3059(\u4e88\u6e2c\u306b\u5bc4\u4e0e\u3057\u306a\u3044)\ncolumns_drop2 = [\"visitors\",\"id\"]\n\n# train,test,va\u306b\u5206\u3051\u308b\ntrain_fit = pd.DataFrame()\ntrain_fit = data_all.loc[data_all.set == \"train\"]\ntrain_fit_y = pd.DataFrame()\ntrain_fit_y[\"visitors\"] = train_fit.visitors\ntrain_fit_x = train_fit.drop(columns=columns_drop2)\ntrain_fit_x = train_fit_x.drop(columns=\"set\")\n\nva_fit = pd.DataFrame()\nva_fit = data_all.loc[data_all.set == \"va\"]\nva_fit_y = pd.DataFrame()\nva_fit_y[\"visitors\"] = va_fit.visitors\nva_fit_x = va_fit.drop(columns=columns_drop2)\nva_fit_x = va_fit_x.drop(columns=\"set\")\n\ntest_fit = pd.DataFrame()\ntest_fit = data_all.loc[data_all.set == \"test\"]\ntest_fit_x = test_fit.drop(columns=\"visitors\")\ntest_fit_x = test_fit_x.drop(columns=\"set\")\n# test\u30c7\u30fc\u30bf\u3067\u8a55\u4fa1\u3057\u306a\u3044\u65e5\u30fb\u5e97\u8217\u306e\u7d44\u307f\u5408\u308f\u305b\u304c\u3042\u308aid=0\u3068\u306a\u3063\u3066\u3057\u307e\u3046\n# id=0\u306e\u884c\u3092\u524a\u9664\u3059\u308b\ntest_fit_x = test_fit_x[test_fit_x['id'] != 0]\n\ntest_id = test_fit_x.id\ntest_fit_x = test_fit_x.drop(columns=\"id\")\n\n# LightGBM\u30e2\u30c7\u30eb\u3067\u5b66\u7fd2\nimport lightgbm as lgb\nfrom sklearn.metrics import mean_squared_log_error\n\ntrain_lgb = lgb.Dataset(train_fit_x, label=train_fit_y)\nva_lgb = lgb.Dataset(va_fit_x, label=va_fit_y)\n\nevals_result = {}\n\nmodel_lgb3 = lgb.train(params, train_set = train_lgb,                          #\u3010YOU NEED TO CHANGE\u3011\n                  num_boost_round = 10000,\n                  valid_sets=[train_lgb, va_lgb], \n                  early_stopping_rounds=200, \n                  verbose_eval=1000, \n                  evals_result=evals_result)\n\nva_visitors = data_all.loc[(data_all.set == \"va\"),\"visitors\"]\n\npred = model_lgb3.predict(va_fit_x, num_iteration=model_lgb3.best_iteration)  #\u3010YOU NEED TO CHANGE\u3011*2\n\ncolumns = [\"pred_visitors\"]\npred_d = pd.DataFrame(data=pred, columns = columns)\n\n# \u30de\u30a4\u30ca\u30b9\u306b\u4e88\u6e2c\u3055\u308c\u308b\u5024\u306f\u7d76\u5bfe\u5024\u3092\u53d6\u5f97\u3059\u308b\npred_d[\"pred_visitors\"] = pred_d[\"pred_visitors\"].abs()\n\n# RSMLE\u30b9\u30b3\u30a2\u306e\u7b97\u51fa\nscore3 = np.sqrt(mean_squared_log_error(va_visitors, pred_d[\"pred_visitors\"]))  #\u3010YOU NEED TO CHANGE\u3011\nprint(\"---------------RMSLE-score----------------\")\nprint(score3)                                                                #\u3010YOU NEED TO CHANGE\u3011\nprint()\n\n# \u30e2\u30c7\u30eb\u3067\u4e88\u6e2c\u3059\u308b\npred = model_lgb3.predict(test_fit_x)                                   #\u3010YOU NEED TO CHANGE\u3011\n\n# \u63d0\u51fa\u7528\u30c7\u30fc\u30bf\u3092\u4f5c\u6210\u3059\u308b\ncolumns_ck = [[\"visitors\"]]\nsubmission_ck = pd.DataFrame(data=pred, columns = columns_ck)\ntest_id_df = pd.DataFrame(data=test_id)\ntest_id_df = test_id_df.reset_index(drop=True)\ntest_id_df.columns = [\"id\"]\n\ntest_reindex = test_fit_x.reset_index(drop=True)\n\nsubmission = pd.DataFrame()\nsubmission[\"id\"] = test_id_df.id\nsubmission[\"visitors\"] = submission_ck.visitors\n\n# csv\u30d5\u30a1\u30a4\u30eb\u306b\u66f8\u304d\u51fa\u3059\nsubmission.to_csv(\"submission_week3.csv\", index=False)                #\u3010YOU NEED TO CHANGE\u3011\n\n# data_all\u3092\u5143\u306b\u623b\u3059\ndata_all = data_all_moto","8dc0ea54":"data_all = data_all_moto","25d47534":"%%time\n#\u7279\u5fb4\u91cf\u3092\u30c9\u30ed\u30c3\u30d7\u3059\u308b\ndrops = [\"lag7\",\"lag14\",\"lag21\"]                                 #\u3010YOU NEED TO CHANGE\u3011\ndata_all = data_all.drop(columns = drops)\n\n#2017\/5\/31\u307e\u3067\u5168\u90e8test\u306b\u3057\u305f\u5f8c\u30015\/28\u3088\u308a\u524d\u306fnot-test\u306b\u3059\u308b #\u3010YOU NEED TO CHANGE\u3011\ndata_all.loc[(data_all['visit_date'] <= dt.datetime(2017,5,20)), 'set'] = 'test'\ndata_all.loc[(data_all['visit_date'] < dt.datetime(2017,5,14)), 'set'] = 'not-test'\n\n# \u30d0\u30ea\u30c7\u30fc\u30b7\u30e7\u30f3\u30c7\u30fc\u30bf\u306e\u7bc4\u56f2\u3092\u6307\u5b9a\nset_va()\n\n# visit_data\u306fdrop\ndata_all = data_all.drop(columns=\"visit_date\")\n\n# train\u30c7\u30fc\u30bf\u304b\u3089\u3001visitors(\u76ee\u7684\u5909\u6570)\u3068\u3001id\u3092\u843d\u3068\u3059(\u4e88\u6e2c\u306b\u5bc4\u4e0e\u3057\u306a\u3044)\ncolumns_drop2 = [\"visitors\",\"id\"]\n\n# train,test,va\u306b\u5206\u3051\u308b\ntrain_fit = pd.DataFrame()\ntrain_fit = data_all.loc[data_all.set == \"train\"]\ntrain_fit_y = pd.DataFrame()\ntrain_fit_y[\"visitors\"] = train_fit.visitors\ntrain_fit_x = train_fit.drop(columns=columns_drop2)\ntrain_fit_x = train_fit_x.drop(columns=\"set\")\n\nva_fit = pd.DataFrame()\nva_fit = data_all.loc[data_all.set == \"va\"]\nva_fit_y = pd.DataFrame()\nva_fit_y[\"visitors\"] = va_fit.visitors\nva_fit_x = va_fit.drop(columns=columns_drop2)\nva_fit_x = va_fit_x.drop(columns=\"set\")\n\ntest_fit = pd.DataFrame()\ntest_fit = data_all.loc[data_all.set == \"test\"]\ntest_fit_x = test_fit.drop(columns=\"visitors\")\ntest_fit_x = test_fit_x.drop(columns=\"set\")\n# test\u30c7\u30fc\u30bf\u3067\u8a55\u4fa1\u3057\u306a\u3044\u65e5\u30fb\u5e97\u8217\u306e\u7d44\u307f\u5408\u308f\u305b\u304c\u3042\u308aid=0\u3068\u306a\u3063\u3066\u3057\u307e\u3046\n# id=0\u306e\u884c\u3092\u524a\u9664\u3059\u308b\ntest_fit_x = test_fit_x[test_fit_x['id'] != 0]\n\ntest_id = test_fit_x.id\ntest_fit_x = test_fit_x.drop(columns=\"id\")\n\n# LightGBM\u30e2\u30c7\u30eb\u3067\u5b66\u7fd2\nimport lightgbm as lgb\nfrom sklearn.metrics import mean_squared_log_error\n\ntrain_lgb = lgb.Dataset(train_fit_x, label=train_fit_y)\nva_lgb = lgb.Dataset(va_fit_x, label=va_fit_y)\n\nevals_result = {}\n\nmodel_lgb4 = lgb.train(params, train_set = train_lgb,                          #\u3010YOU NEED TO CHANGE\u3011\n                  num_boost_round = 100000,\n                  valid_sets=[train_lgb, va_lgb], \n                  early_stopping_rounds=200, \n                  verbose_eval=1000, \n                  evals_result=evals_result)\n\nva_visitors = data_all.loc[(data_all.set == \"va\"),\"visitors\"]\n\npred = model_lgb4.predict(va_fit_x, num_iteration=model_lgb4.best_iteration) #\u3010YOU NEED TO CHANGE\u3011*2\n\ncolumns = [\"pred_visitors\"]\npred_d = pd.DataFrame(data=pred, columns = columns)\n\n# \u30de\u30a4\u30ca\u30b9\u306b\u4e88\u6e2c\u3055\u308c\u308b\u5024\u306f\u7d76\u5bfe\u5024\u3092\u53d6\u5f97\u3059\u308b\npred_d[\"pred_visitors\"] = pred_d[\"pred_visitors\"].abs()\n\n# RSMLE\u30b9\u30b3\u30a2\u306e\u7b97\u51fa\nscore4 = np.sqrt(mean_squared_log_error(va_visitors, pred_d[\"pred_visitors\"]))  #\u3010YOU NEED TO CHANGE\u3011\nprint(\"---------------RMSLE-score----------------\")\nprint(score4)                                                                #\u3010YOU NEED TO CHANGE\u3011\n\n# \u30e2\u30c7\u30eb\u3067\u4e88\u6e2c\u3059\u308b\npred = model_lgb4.predict(test_fit_x)                                   #\u3010YOU NEED TO CHANGE\u3011\n\n# \u63d0\u51fa\u7528\u30c7\u30fc\u30bf\u3092\u4f5c\u6210\u3059\u308b\ncolumns_ck = [[\"visitors\"]]\nsubmission_ck = pd.DataFrame(data=pred, columns = columns_ck)\ntest_id_df = pd.DataFrame(data=test_id)\ntest_id_df = test_id_df.reset_index(drop=True)\ntest_id_df.columns = [\"id\"]\n\ntest_reindex = test_fit_x.reset_index(drop=True)\n\nsubmission = pd.DataFrame()\nsubmission[\"id\"] = test_id_df.id\nsubmission[\"visitors\"] = submission_ck.visitors\n\n# csv\u30d5\u30a1\u30a4\u30eb\u306b\u66f8\u304d\u51fa\u3059\nsubmission.to_csv(\"submission_week4.csv\", index=False)                #\u3010YOU NEED TO CHANGE\u3011\n\n# data_all\u3092\u5143\u306b\u623b\u3059\ndata_all = data_all_moto","9e73a7c1":"%%time\n#\u7279\u5fb4\u91cf\u3092\u30c9\u30ed\u30c3\u30d7\u3059\u308b\ndrops = [\"lag7\",\"lag14\",\"lag21\",\"lag28\"]                #\u3010YOU NEED TO CHANGE\u3011\ndata_all = data_all.drop(columns = drops)\n\n#2017\/5\/31\u307e\u3067\u5168\u90e8test\u306b\u3057\u305f\u5f8c\u30015\/28\u3088\u308a\u524d\u306fnot-test\u306b\u3059\u308b #\u3010YOU NEED TO CHANGE\u3011\ndata_all.loc[(data_all['visit_date'] <= dt.datetime(2017,5,27)), 'set'] = 'test'\ndata_all.loc[(data_all['visit_date'] < dt.datetime(2017,5,21)), 'set'] = 'not-test'\n\n# \u30d0\u30ea\u30c7\u30fc\u30b7\u30e7\u30f3\u30c7\u30fc\u30bf\u306e\u7bc4\u56f2\u3092\u6307\u5b9a\nset_va()\n\n# visit_data\u306fdrop\ndata_all = data_all.drop(columns=\"visit_date\")\n\n# train\u30c7\u30fc\u30bf\u304b\u3089\u3001visitors(\u76ee\u7684\u5909\u6570)\u3068\u3001id\u3092\u843d\u3068\u3059(\u4e88\u6e2c\u306b\u5bc4\u4e0e\u3057\u306a\u3044)\ncolumns_drop2 = [\"visitors\",\"id\"]\n\n# train,test,va\u306b\u5206\u3051\u308b\ntrain_fit = pd.DataFrame()\ntrain_fit = data_all.loc[data_all.set == \"train\"]\ntrain_fit_y = pd.DataFrame()\ntrain_fit_y[\"visitors\"] = train_fit.visitors\ntrain_fit_x = train_fit.drop(columns=columns_drop2)\ntrain_fit_x = train_fit_x.drop(columns=\"set\")\n\nva_fit = pd.DataFrame()\nva_fit = data_all.loc[data_all.set == \"va\"]\nva_fit_y = pd.DataFrame()\nva_fit_y[\"visitors\"] = va_fit.visitors\nva_fit_x = va_fit.drop(columns=columns_drop2)\nva_fit_x = va_fit_x.drop(columns=\"set\")\n\ntest_fit = pd.DataFrame()\ntest_fit = data_all.loc[data_all.set == \"test\"]\ntest_fit_x = test_fit.drop(columns=\"visitors\")\ntest_fit_x = test_fit_x.drop(columns=\"set\")\n# test\u30c7\u30fc\u30bf\u3067\u8a55\u4fa1\u3057\u306a\u3044\u65e5\u30fb\u5e97\u8217\u306e\u7d44\u307f\u5408\u308f\u305b\u304c\u3042\u308aid=0\u3068\u306a\u3063\u3066\u3057\u307e\u3046\n# id=0\u306e\u884c\u3092\u524a\u9664\u3059\u308b\ntest_fit_x = test_fit_x[test_fit_x['id'] != 0]\n\ntest_id = test_fit_x.id\ntest_fit_x = test_fit_x.drop(columns=\"id\")\n\n# LightGBM\u30e2\u30c7\u30eb\u3067\u5b66\u7fd2\nimport lightgbm as lgb\nfrom sklearn.metrics import mean_squared_log_error\n\ntrain_lgb = lgb.Dataset(train_fit_x, label=train_fit_y)\nva_lgb = lgb.Dataset(va_fit_x, label=va_fit_y)\n\nevals_result = {}\n\nmodel_lgb5 = lgb.train(params, train_set = train_lgb,                          #\u3010YOU NEED TO CHANGE\u3011\n                  num_boost_round = 100000,\n                  valid_sets=[train_lgb, va_lgb], \n                  early_stopping_rounds=200, \n                  verbose_eval=1000, \n                  evals_result=evals_result)\n\nva_visitors = data_all.loc[(data_all.set == \"va\"),\"visitors\"]\n\npred = model_lgb5.predict(va_fit_x, num_iteration=model_lgb5.best_iteration) #\u3010YOU NEED TO CHANGE\u3011*2\n\ncolumns = [\"pred_visitors\"]\npred_d = pd.DataFrame(data=pred, columns = columns)\n\n# \u30de\u30a4\u30ca\u30b9\u306b\u4e88\u6e2c\u3055\u308c\u308b\u5024\u306f\u7d76\u5bfe\u5024\u3092\u53d6\u5f97\u3059\u308b\npred_d[\"pred_visitors\"] = pred_d[\"pred_visitors\"].abs()\n\n# RSMLE\u30b9\u30b3\u30a2\u306e\u7b97\u51fa\nscore5 = np.sqrt(mean_squared_log_error(va_visitors, pred_d[\"pred_visitors\"]))  #\u3010YOU NEED TO CHANGE\u3011\nprint(\"---------------RMSLE-score----------------\")\nprint(score5)                                                                #\u3010YOU NEED TO CHANGE\u3011\n\n# \u30e2\u30c7\u30eb\u3067\u4e88\u6e2c\u3059\u308b\npred = model_lgb5.predict(test_fit_x)                                   #\u3010YOU NEED TO CHANGE\u3011\n\n# \u63d0\u51fa\u7528\u30c7\u30fc\u30bf\u3092\u4f5c\u6210\u3059\u308b\ncolumns_ck = [[\"visitors\"]]\nsubmission_ck = pd.DataFrame(data=pred, columns = columns_ck)\ntest_id_df = pd.DataFrame(data=test_id)\ntest_id_df = test_id_df.reset_index(drop=True)\ntest_id_df.columns = [\"id\"]\n\ntest_reindex = test_fit_x.reset_index(drop=True)\n\nsubmission = pd.DataFrame()\nsubmission[\"id\"] = test_id_df.id\nsubmission[\"visitors\"] = submission_ck.visitors\n\n# csv\u30d5\u30a1\u30a4\u30eb\u306b\u66f8\u304d\u51fa\u3059\nsubmission.to_csv(\"submission_week5.csv\", index=False)                #\u3010YOU NEED TO CHANGE\u3011\n\n# data_all\u3092\u5143\u306b\u623b\u3059\ndata_all = data_all_moto","14d729b5":"%%time\n#\u7279\u5fb4\u91cf\u3092\u30c9\u30ed\u30c3\u30d7\u3059\u308b\ndrops = [\"lag7\",\"lag14\",\"lag21\",\"lag28\",\"lag35\"]                #\u3010YOU NEED TO CHANGE\u3011\ndata_all = data_all.drop(columns = drops)\n\n#2017\/5\/31\u307e\u3067\u5168\u90e8test\u306b\u3057\u305f\u5f8c\u30015\/28\u3088\u308a\u524d\u306fnot-test\u306b\u3059\u308b #\u3010YOU NEED TO CHANGE\u3011\ndata_all.loc[(data_all['visit_date'] <= dt.datetime(2017,5,31)), 'set'] = 'test'\ndata_all.loc[(data_all['visit_date'] < dt.datetime(2017,5,28)), 'set'] = 'not-test'\n\n# \u30d0\u30ea\u30c7\u30fc\u30b7\u30e7\u30f3\u30c7\u30fc\u30bf\u306e\u7bc4\u56f2\u3092\u6307\u5b9a\nset_va()\n\n# visit_data\u306fdrop\ndata_all = data_all.drop(columns=\"visit_date\")\n\n# train\u30c7\u30fc\u30bf\u304b\u3089\u3001visitors(\u76ee\u7684\u5909\u6570)\u3068\u3001id\u3092\u843d\u3068\u3059(\u4e88\u6e2c\u306b\u5bc4\u4e0e\u3057\u306a\u3044)\ncolumns_drop2 = [\"visitors\",\"id\"]\n\n# train,test,va\u306b\u5206\u3051\u308b\ntrain_fit = pd.DataFrame()\ntrain_fit = data_all.loc[data_all.set == \"train\"]\ntrain_fit_y = pd.DataFrame()\ntrain_fit_y[\"visitors\"] = train_fit.visitors\ntrain_fit_x = train_fit.drop(columns=columns_drop2)\ntrain_fit_x = train_fit_x.drop(columns=\"set\")\n\nva_fit = pd.DataFrame()\nva_fit = data_all.loc[data_all.set == \"va\"]\nva_fit_y = pd.DataFrame()\nva_fit_y[\"visitors\"] = va_fit.visitors\nva_fit_x = va_fit.drop(columns=columns_drop2)\nva_fit_x = va_fit_x.drop(columns=\"set\")\n\ntest_fit = pd.DataFrame()\ntest_fit = data_all.loc[data_all.set == \"test\"]\ntest_fit_x = test_fit.drop(columns=\"visitors\")\ntest_fit_x = test_fit_x.drop(columns=\"set\")\n# test\u30c7\u30fc\u30bf\u3067\u8a55\u4fa1\u3057\u306a\u3044\u65e5\u30fb\u5e97\u8217\u306e\u7d44\u307f\u5408\u308f\u305b\u304c\u3042\u308aid=0\u3068\u306a\u3063\u3066\u3057\u307e\u3046\n# id=0\u306e\u884c\u3092\u524a\u9664\u3059\u308b\ntest_fit_x = test_fit_x[test_fit_x['id'] != 0]\n\ntest_id = test_fit_x.id\ntest_fit_x = test_fit_x.drop(columns=\"id\")\n\n# LightGBM\u30e2\u30c7\u30eb\u3067\u5b66\u7fd2\nimport lightgbm as lgb\nfrom sklearn.metrics import mean_squared_log_error\n\ntrain_lgb = lgb.Dataset(train_fit_x, label=train_fit_y)\nva_lgb = lgb.Dataset(va_fit_x, label=va_fit_y)\n\nevals_result = {}\n\nmodel_lgb6 = lgb.train(params, train_set = train_lgb,                          #\u3010YOU NEED TO CHANGE\u3011\n                  num_boost_round = 100000,\n                  valid_sets=[train_lgb, va_lgb], \n                  early_stopping_rounds=200, \n                  verbose_eval=1000, \n                  evals_result=evals_result)\n\nva_visitors = data_all.loc[(data_all.set == \"va\"),\"visitors\"]\n\npred = model_lgb6.predict(va_fit_x, num_iteration=model_lgb6.best_iteration) #\u3010YOU NEED TO CHANGE\u3011*2\n\ncolumns = [\"pred_visitors\"]\npred_d = pd.DataFrame(data=pred, columns = columns)\n\n# \u30de\u30a4\u30ca\u30b9\u306b\u4e88\u6e2c\u3055\u308c\u308b\u5024\u306f\u7d76\u5bfe\u5024\u3092\u53d6\u5f97\u3059\u308b\npred_d[\"pred_visitors\"] = pred_d[\"pred_visitors\"].abs()\n\n# RSMLE\u30b9\u30b3\u30a2\u306e\u7b97\u51fa\nscore6 = np.sqrt(mean_squared_log_error(va_visitors, pred_d[\"pred_visitors\"]))  #\u3010YOU NEED TO CHANGE\u3011\nprint(\"---------------RMSLE-score----------------\")\nprint(score6)                                                                #\u3010YOU NEED TO CHANGE\u3011\n\n# \u30e2\u30c7\u30eb\u3067\u4e88\u6e2c\u3059\u308b\npred = model_lgb6.predict(test_fit_x)                                   #\u3010YOU NEED TO CHANGE\u3011\n\n# \u63d0\u51fa\u7528\u30c7\u30fc\u30bf\u3092\u4f5c\u6210\u3059\u308b\ncolumns_ck = [[\"visitors\"]]\nsubmission_ck = pd.DataFrame(data=pred, columns = columns_ck)\ntest_id_df = pd.DataFrame(data=test_id)\ntest_id_df = test_id_df.reset_index(drop=True)\ntest_id_df.columns = [\"id\"]\n\ntest_reindex = test_fit_x.reset_index(drop=True)\n\nsubmission = pd.DataFrame()\nsubmission[\"id\"] = test_id_df.id\nsubmission[\"visitors\"] = submission_ck.visitors\n\n# csv\u30d5\u30a1\u30a4\u30eb\u306b\u66f8\u304d\u51fa\u3059\nsubmission.to_csv(\"submission_week6.csv\", index=False)                #\u3010YOU NEED TO CHANGE\u3011\n\n# data_all\u3092\u5143\u306b\u623b\u3059\ndata_all = data_all_moto","82102797":"submission1 = pd.read_csv(\".\/submission_week1.csv\")\nsubmission2 = pd.read_csv(\".\/submission_week2.csv\")\nsubmission3 = pd.read_csv(\".\/submission_week3.csv\")\nsubmission4 = pd.read_csv(\".\/submission_week4.csv\")\nsubmission5 = pd.read_csv(\".\/submission_week5.csv\")\nsubmission6 = pd.read_csv(\".\/submission_week6.csv\")\n\nsubmission_all = pd.concat([submission1, submission2,submission3,submission4,submission5,submission6])\n# submission_all = submission1","83fcb209":"submission_all","ec8f927a":"submission_all.sort_values(by='id', ascending=True).head(315)","c1491c05":"zeros = submission_all.loc[submission_all['id'] == \"0\"]\nsubmission_all = submission_all.loc[submission_all[\"id\"] != \"0\"]\nsubmission_all","a0dcca4d":"zeros.describe()","a08b6d4b":"submission_all.sort_values(by='id', ascending=True).head(315)","2787c69a":"submission_all.duplicated().sum()","719d5475":"submission_all","9577314c":"submission_test = submission_all.sort_values(by='id', ascending=True)\n# \u91cd\u8907\u3057\u305f\u884c\u3092\u524a\u9664\n# submission_test = submission_test[~submission_test.duplicated()]\nsubmission_test = submission_test.drop_duplicates(subset=[\"id\"],keep=\"first\")\nsubmission_test","00ea2bac":"submission_test.to_csv(\"F_submission_week_all.csv\", index=False)","510a207f":"print(score1)\nprint(score2)\nprint(score3)\nprint(score4)\nprint(score5)\nprint(score6)","dd564325":"# \u7279\u5fb4\u91cf\u91cd\u8981\u5ea6\u306e\u7b97\u51fa (\u30c7\u30fc\u30bf\u30d5\u30ec\u30fc\u30e0\u3067\u53d6\u5f97)\n\n# \u7279\u5fb4\u91cf\u540d\u306e\u30ea\u30b9\u30c8(\u76ee\u7684\u5909\u6570CRIM\u4ee5\u5916)\n# \u7279\u5fb4\u91cf\u91cd\u8981\u5ea6\u306e\u7b97\u51fa\u65b9\u6cd5 'gain'(\u63a8\u5968) : \u30c8\u30ec\u30fc\u30cb\u30f3\u30b0\u30c7\u30fc\u30bf\u306e\u640d\u5931\u306e\u6e1b\u5c11\u91cf\u3092\u8a55\u4fa1\ncols = list(train_fit_x.columns)\ncols_df = pd.DataFrame(cols)\n\n# \u7279\u5fb4\u91cf\u91cd\u8981\u5ea6\u306e\u7b97\u51fa \/\/\nf_importance = np.array(model_lgb6.feature_importance(importance_type='gain'))\n# \u6b63\u898f\u5316(\u5fc5\u8981\u306a\u3044\u5834\u5408\u306f\u30b3\u30e1\u30f3\u30c8\u30a2\u30a6\u30c8)\nf_importance = f_importance \/ np.sum(f_importance)\nf_importance_df = pd.DataFrame(f_importance)\ndf_importance = cols_df.join(f_importance_df,lsuffix='_features', rsuffix='_importance')\n# \u964d\u9806\u30bd\u30fc\u30c8\ndf_importance = df_importance.sort_values('0_importance', ascending=False)\ndf_importance","e79affc0":"# ------------------\u3053\u3053\u304b\u3089\u2461\u9031\u76ee-----------------------\n\u5909\u66f4\u7b87\u6240\u306f\u4ee5\u4e0b\u306e\u901a\u308a\u3067\u3001\u3000#\u3010YOU NEED TO CHANGE\u3011\u3067\u6ce8\u8a18\u3042\u308a\n* \u7279\u5fb4\u91cf\u306e\u30c9\u30ed\u30c3\u30d7\n* test_set\u306e\u671f\u9593\u306e\u5909\u66f4\n* lgb1\u30e2\u30c7\u30eb\u306e\u540d\u524d\u3092\u5909\u66f4\n* submission.csv\u306e\u540d\u524d\u3092\u5909\u66f4","1f7b5899":"# \u3010\u91cd\u8981\u3011\u671f\u9593\u3054\u3068\u306btrain\/va\/test\u306b\u5206\u5272\nsubmission\u7528\u306e\u30c7\u30fc\u30bf\u3092\u4f5c\u308b\u6642\u306f\u3001train\u306e\u671f\u9593\u30924\/22\u307e\u3067\u306b\u5909\u66f4\u3059\u308b\n(\u305d\u3046\u3057\u306a\u3044\u3068\u3001\u76f4\u8fd1\u306e\u5b66\u7fd2\u30c7\u30fc\u30bf\u304c\u4e0d\u8db3\u3057\u4e0d\u5229\u306b\u306a\u308b)","61d0e1e3":"# \u7279\u5fb4\u91cf\u306e\u5bc4\u4e0e\u5ea6\u3092\u7b97\u51fa\n\u5404\u30e2\u30c7\u30eb\u3067\u3001\u5f71\u97ff\u306e\u3042\u308b\u7279\u5fb4\u91cf\u3092\u8868\u793a\u3059\u308b\nmodel_lgb\u3007\u306e\u90e8\u5206\u3092\u5909\u3048\u308b\u3068\u3001\u671f\u9593\u3054\u3068\u306b\u305d\u308c\u305e\u308c\u4f5c\u6210\u3057\u305f\u30e2\u30c7\u30eb\u3054\u3068\u306b\u898b\u308c\u308b","e8e2afa7":"# \u30b5\u30d6\u30df\u30c3\u30b7\u30e7\u30f3\u7528\u30c7\u30fc\u30bf\u3092\u8ffd\u52a0","796dc30c":"# ------------------\u3053\u3053\u304b\u3089\u2465\u9031\u76ee-----------------------","18e32ecf":"# test\u30c7\u30fc\u30bf\u306e\u4e88\u6e2c","3ac8cb9b":"# Recruit Restaurant Visitor Forecasting\n\n[\u524d\u51e6\u7406\u306e\u30b3\u30fc\u30c9](https:\/\/www.kaggle.com\/mnthasi\/210516-recruit-pre-japanese)\u3067\u524d\u51e6\u7406\u3057\u305fdata_all_moto\u3092\u30ed\u30fc\u30c9\u3057\u3066\u5b66\u7fd2\u3060\u3051\u884c\u3046<br>\n\u51e6\u7406\u6642\u9593<br>\n\u30e2\u30c7\u30eb\u5b66\u7fd22\u5206\u00d76\n<br>\n\u3010\u30e2\u30c7\u30eb\u5b66\u7fd2\u65b9\u6cd5\u3011\n* \u9031\u3054\u3068\u306b\u30e2\u30c7\u30eb\u3092\u4f5c\u6210\u3059\u308b\n* 2\u9031\u76ee\u306e\u30e2\u30c7\u30eb\u3067\u3042\u308c\u3070\u3001\u524d\u9031\u306e\u6765\u5e97\u8005\u6570\u306e\u60c5\u5831\u306f\u4f7f\u308f\u306a\u3044\u3067\u4e88\u6e2c\u3059\u308b\n* validation\u304c\u3044\u3044\u52a0\u6e1b\u306b\u306a\u3089\u306a\u3044\u3088\u3046\u306b\u3001lag\u7279\u5fb4\u91cf\u3092\u9069\u5b9c\u843d\u3068\u3057\u3066\u3044\u308b\n<br><br>\n\nLoad the preprocessed data_all_moto in [Preprocessing Code] (https:\/\/www.kaggle.com\/mnthasi\/210516-recruit-pre-japanese) and only learn <br>\nProcessing time <br>\nModel learning 2 minutes x 6\n<br> <br>\n[Model learning method] <br>\n* Create a model weekly\n* If it is the second week model, predict without using the information on the number of visitors in the previous week\n* The lag features are reduced as appropriate so that validation is not sloppy.\n\n\u30b3\u30fc\u30c9\u30923\u3064\u306b\u5206\u5272\u3057\u3066\u3044\u307e\u3059<br>\nThe code is divided into three<br>\nhttps:\/\/www.kaggle.com\/mnthasi\/recruit-restaurant-01-pre\nhttps:\/\/www.kaggle.com\/mnthasi\/recruit-restaurant-02-lightgbm-japanese\nhttps:\/\/www.kaggle.com\/mnthasi\/recruit-restaurant-03-ensemble-japanese","f97db7a7":"# \u7279\u5fb4\u91cf\u306edrop","0c74d5c7":"# validation\u30c7\u30fc\u30bf\u306e\u4e88\u6e2c","59a5cdde":"# lightGBM\u306e\u5b66\u7fd2\n\u5168\u30c7\u30fc\u30bf\u3067\u5b66\u7fd2\u3059\u308b\u30681\u5206\u304f\u3089\u3044","725d1f6e":"# ------------------\u3053\u3053\u304b\u3089\u2462\u9031\u76ee-----------------------","38091397":"# ------------------\u3053\u3053\u304b\u3089\u2464\u9031\u76ee-----------------------","ee2cd7e0":"# \u53ef\u8996\u5316","6085808f":"# \u524d\u51e6\u7406\u3057\u305f\u30c7\u30fc\u30bf\u30d5\u30ec\u30fc\u30e0\u306e\u30a4\u30f3\u30dd\u30fc\u30c8\nvisit_date\u306f\u65e5\u4ed8\u60c5\u5831\u304c\u6b8b\u3063\u3066\u3044\u3066\u6b32\u3057\u3044\u306e\u3067\u3001\u8aad\u307f\u8fbc\u307f\u306e\u30aa\u30d7\u30b7\u30e7\u30f3\u3092\u3064\u3051\u3066\u3044\u308b","e490d2d7":"# --------------------\u3053\u3053\u304b\u3089\u2460\u9031\u76ee-------------------\n4\/23-4\/29\u307e\u3067\u3092\u4e88\u6e2c\u3059\u308b\u305f\u3081\u306e\u30e2\u30c7\u30eb\u3092\u4f5c\u308b<br>\n\uff5e4\/1\u307e\u3067\u306etrain\u30c7\u30fc\u30bf\u3092\u5b66\u7fd2\u3055\u305b\u30664\/2-4\/9\u307e\u3067\u3092\u4e88\u6e2c\u3059\u308b\u305f\u3081\u306e\u30e2\u30c7\u30eb\u3092\u4f5c\u308a\u3001<br>\n4\/23-4\/29\u307e\u3067\u3092\u4e88\u6e2c\u3059\u308b\n\n* \u2460\u30004\/23-29 lag\u306edrop\u306a\u3057\n* \u2461\u30004\/30-5\/6\u3000lag7\u3092drop(7\u65e5\u524d\u4ee5\u964d\u306e\u60c5\u5831\u306f\u7121\u3044)\n* \u2462\u30005\/7-5\/13\u3000lag7,14\u3092drop(14\u65e5\u524d\u4ee5\u964d\u306e\u60c5\u5831\u306f\u7121\u3044)\n* \u2463\u30005\/14-5\/20\u3000lag7,14,21\u3092drop(21\u65e5\u524d\u4ee5\u964d\u306e\u60c5\u5831\u306f\u7121\u3044)\n* \u2464\u30005\/21-5\/27\u3000lag7,14,21,28\u3092drop(28\u65e5\u524d\u4ee5\u964d\u306e\u60c5\u5831\u306f\u7121\u3044)\n* \u2465\u30005\/28-5-31\u3000lag7,14,21,28,35\u3092drop(35\u65e5\u524d\u4ee5\u964d\u306e\u60c5\u5831\u306f\u7121\u3044)","7eb34a4a":"# validation\u30c7\u30fc\u30bf\u306e\u7bc4\u56f2\u3092\u6307\u5b9a\u3059\u308b\u95a2\u6570set_va\u306e\u5b9a\u7fa9\n\u671f\u9593\u306e\u9806\u756a\u306b\u6c17\u3092\u4ed8\u3051\u308b\u3053\u3068","f8da6714":"# ------------------\u3053\u3053\u304b\u3089\u2463\u9031\u76ee-----------------------"}}