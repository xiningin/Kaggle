{"cell_type":{"44c383d7":"code","f9e196ad":"code","78cd48eb":"code","2c568ee4":"code","22f6dd7f":"code","f4ed6544":"code","255fff84":"code","6de0ce9a":"code","cd64bd59":"code","0373d168":"code","2d82edd9":"code","6ccec38a":"code","ed01e303":"code","a4ce78c8":"code","69e71591":"code","b80f8dfa":"code","2f00701a":"code","57ca7af6":"code","61eaefcd":"code","ff0e77b4":"code","0c4f7637":"code","2b6f4312":"code","81014bff":"code","d9b8aeb8":"code","d8349099":"code","ab542e4e":"code","59efac41":"code","b9db892b":"code","60b6e72f":"code","74a2da13":"code","769366d4":"code","50402030":"code","c1087759":"code","1812423d":"code","462a80fa":"code","4fa0fe16":"code","fb44aea9":"code","cb60166b":"code","e2af680b":"code","74d234d8":"code","8f805e4f":"code","94197f55":"code","d278fc1b":"code","d114d490":"code","5b09f536":"code","7f97b749":"code","d24fd62f":"code","b48b48fc":"code","0a329b08":"markdown","e21732d0":"markdown"},"source":{"44c383d7":"import os\nimport torch\nimport pandas as pd\nimport numpy as np\nfrom torch.utils.data import Dataset, random_split, DataLoader\nfrom PIL import Image\nimport torchvision.models as models\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom tqdm.notebook import tqdm\nimport torchvision.transforms as transforms\nfrom sklearn.metrics import f1_score\nimport torch.nn.functional as F\nimport torch.nn as nn\nfrom torchvision.utils import make_grid\n%matplotlib inline","f9e196ad":"DATA_DIR = '..\/input\/jovian-pytorch-z2g\/Human protein atlas'\n\nTRAIN_DIR = DATA_DIR + '\/train'                           # Contains training images\nTEST_DIR = DATA_DIR + '\/test'                             # Contains test images\n\nTRAIN_CSV = DATA_DIR + '\/train.csv'                       # Contains real labels for training images\nTEST_CSV = '..\/input\/jovian-pytorch-z2g\/submission.csv'   # Contains dummy labels for test image","78cd48eb":"labels = {\n    0: 'Mitochondria',\n    1: 'Nuclear bodies',\n    2: 'Nucleoli',\n    3: 'Golgi apparatus',\n    4: 'Nucleoplasm',\n    5: 'Nucleoli fibrillar center',\n    6: 'Cytosol',\n    7: 'Plasma membrane',\n    8: 'Centrosome',\n    9: 'Nuclear speckles'\n    \n} ","2c568ee4":"train_df = pd.read_csv(TRAIN_CSV)\ntrain_df.head()","22f6dd7f":"\ntrain_df.isna().sum()","f4ed6544":"\ndef fill_labels(row):\n    row.Label = np.array(row.Label.split(\" \")).astype(np.int)\n    for num in row.Label:\n        name = labels[int(num)]\n        row.loc[name] = 1\n    return row","255fff84":"for key in labels.keys():\n    train_df[labels[key]] = 0","6de0ce9a":"train_df = train_df.apply(fill_labels, axis=1)\ntrain_df.head()","cd64bd59":"# Show the proteins that occur the most in our dataset\nlabel_counts = train_df.drop([\"Image\", \"Label\"],axis=1).sum(axis=0).sort_values(ascending=False)\nplt.figure(figsize=(18,10))\nsns.barplot(y=label_counts.index.values, x=label_counts.values, order=label_counts.index)","0373d168":"# Correlation between our labels\ntrain_df[\"number_labels\"] = train_df.drop([\"Image\", \"Label\"],axis=1).sum(axis=1)\n\nplt.figure(figsize=(18,10))\nsns.heatmap(train_df[train_df.number_labels>1].drop(\n    [\"Image\", \"Label\", \"number_labels\"],axis=1).corr(), vmin=-1, vmax=1)","2d82edd9":"#label encoding --> 5,6 --> [0,0,0,0,0,1,1,0,0,0] \n# label decoding --> [0,0,0,1,0,0,0,0,0,1] --> 3,9\ndef encode_label(label):\n    target = torch.zeros(10)\n    for l in str(label).split(' '):\n        target[int(l)] = 1.\n    return target\n\ndef decode_target(target, text_labels=False, threshold=0.5):\n    result = []\n    for i, x in enumerate(target):\n        if (x >= threshold):\n            if text_labels:\n                result.append(labels[i] + \"(\" + str(i) + \")\")\n            else:\n                result.append(str(i))\n    return ' '.join(result)","6ccec38a":"# Torch dataset\n\n# Creating torch dataset\n\n\nclass HumanProteinDataset(Dataset):\n    def __init__(self, csv_file, root_dir, transform=None):\n        self.df = pd.read_csv(csv_file)\n        self.transform = transform\n        self.root_dir = root_dir\n        \n    def __len__(self):\n        return len(self.df)    \n    \n    def __getitem__(self, idx):\n        row = self.df.loc[idx]\n        img_id, img_label = row['Image'], row['Label']\n        img_fname = self.root_dir + \"\/\" + str(img_id) + \".png\"\n        img = Image.open(img_fname)\n        if self.transform:\n            img = self.transform(img)\n        return img, encode_label(img_label)","ed01e303":"#Showing image and labels\ndef show_sample(img, target, invert=True):\n    if invert:\n        plt.imshow(1 - img.permute((1, 2, 0)))\n    else:\n        plt.imshow(img.permute(1, 2, 0))\n    print('Labels:', decode_target(target, text_labels=True))","a4ce78c8":"transform = transforms.Compose([transforms.ToTensor()])\ndataset = HumanProteinDataset(TRAIN_CSV, TRAIN_DIR, transform=transform)\n","69e71591":"show_sample(*dataset[10])","b80f8dfa":"transform = transforms.Compose([transforms.RandomGrayscale(p=0.9),transforms.ToTensor()])\ndataset1 = HumanProteinDataset(TRAIN_CSV, TRAIN_DIR, transform=transform)\nshow_sample(*dataset1[10])\n","2f00701a":"#training and validation set\ntorch.manual_seed(10)\nval_pct = 0.15\nval_size = int(val_pct * len(dataset))\ntrain_size = len(dataset) - val_size\ntrain_ds, val_ds = random_split(dataset, [train_size, val_size])\nlen(train_ds), len(val_ds)","57ca7af6":"#data loader\nbatch_size = 16\ntrain_dl = DataLoader(train_ds, batch_size, shuffle=True, num_workers=2, pin_memory=True)\nval_dl = DataLoader(val_ds, batch_size*2, num_workers=2, pin_memory=True)","61eaefcd":"# Function to display the first batch\ndef show_batch(dl, invert=True):\n    for images, labels in dl:\n        fig, ax = plt.subplots(figsize=(16, 8))\n        ax.set_xticks([]); ax.set_yticks([])\n        data = 1-images if invert else images\n        ax.imshow(make_grid(data, nrow=16).permute(1, 2, 0))\n        break","ff0e77b4":"show_batch(train_dl)","0c4f7637":"# Function to calculate the metrics\ndef F_score(output, label, threshold=0.5, beta=1):\n    prob = output > threshold\n    label = label > threshold\n\n    TP = (prob & label).sum(1).float()\n    TN = ((~prob) & (~label)).sum(1).float()\n    FP = (prob & (~label)).sum(1).float()\n    FN = ((~prob) & label).sum(1).float()\n\n    precision = torch.mean(TP \/ (TP + FP + 1e-12))\n    recall = torch.mean(TP \/ (TP + FN + 1e-12))\n    F2 = (1 + beta**2) * precision * recall \/ (beta**2 * precision + recall + 1e-12)\n    return F2.mean(0)","2b6f4312":"class MultilabelImageClassificationBase(nn.Module):\n    def training_step(self, batch):\n        images, targets = batch \n        out = self(images)                      \n        loss = F.binary_cross_entropy(out, targets)      \n        return loss\n    \n    def validation_step(self, batch):\n        images, targets = batch \n        out = self(images)                           # Generate predictions\n        loss = F.binary_cross_entropy(out, targets)  # Calculate loss\n        score = F_score(out, targets)\n        return {'val_loss': loss.detach(), 'val_score': score.detach() }\n    \n    def validation_epoch_end(self, outputs):\n        batch_losses = [x['val_loss'] for x in outputs]\n        epoch_loss = torch.stack(batch_losses).mean()   # Combine losses\n        batch_scores = [x['val_score'] for x in outputs]\n        epoch_score = torch.stack(batch_scores).mean()      # Combine accuracies\n        return {'val_loss': epoch_loss.item(), 'val_score': epoch_score.item()}\n    \n    def epoch_end(self, epoch, result):\n        print(\"Epoch [{}], train_loss: {:.4f}, val_loss: {:.4f}, val_score: {:.4f}\".format(\n            epoch, result['train_loss'], result['val_loss'], result['val_score']))","81014bff":"class ProteinCnnModel(MultilabelImageClassificationBase):\n    def __init__(self):\n        super().__init__()\n        self.network = nn.Sequential(\n            nn.Conv2d(3, 32, kernel_size=3, padding=1),\n            nn.ReLU(),\n            nn.MaxPool2d(2, 2),\n            \n            nn.Conv2d(32, 64, kernel_size=3, stride=1, padding=1),\n            nn.ReLU(),\n            nn.MaxPool2d(2, 2),\n            \n            nn.Conv2d(64, 128, kernel_size=3, stride=1, padding=1),\n            nn.ReLU(),\n            nn.MaxPool2d(2, 2),\n            \n            nn.Conv2d(128, 128, kernel_size=3, stride=1, padding=1),\n            nn.ReLU(),\n            nn.MaxPool2d(2, 2),\n\n            nn.Conv2d(128, 256, kernel_size=3, stride=1, padding=1),\n             nn.ReLU(),\n            nn.MaxPool2d(2, 2),\n            \n            nn.Conv2d(256, 256, kernel_size=3, stride=1, padding=1),\n            nn.ReLU(),\n            nn.MaxPool2d(2, 2),\n            \n            nn.Conv2d(256, 512, kernel_size=3, stride=1, padding=1),\n            nn.ReLU(),\n            nn.AdaptiveAvgPool2d(1),\n\n            nn.Flatten(), \n            nn.Linear(512, 256),\n            nn.ReLU(),\n            nn.Linear(256, 128),\n            nn.ReLU(),\n            nn.Linear(128, 64),\n            nn.ReLU(),\n            nn.Linear(64, 10),\n            nn.Sigmoid()\n        )\n        \n    def forward(self, xb):\n        return self.network(xb)","d9b8aeb8":"class ProteinCnnModel2(MultilabelImageClassificationBase):\n    def __init__(self):\n        super().__init__()\n        # Use a pretrained model\n        self.network = models.resnet18(pretrained=True)\n        # Replace last layer\n        num_ftrs = self.network.fc.in_features\n        self.network.fc = nn.Linear(num_ftrs, 10)\n    \n    def forward(self, xb):\n        return torch.sigmoid(self.network(xb))","d8349099":"def get_default_device():\n    \"\"\"Pick GPU if available, else CPU\"\"\"\n    if torch.cuda.is_available():\n        return torch.device('cuda')\n    else:\n        return torch.device('cpu')\n    \ndef to_device(data, device):\n    \"\"\"Move tensor(s) to chosen device\"\"\"\n    if isinstance(data, (list,tuple)):\n        return [to_device(x, device) for x in data]\n    return data.to(device, non_blocking=True)\n\nclass DeviceDataLoader():\n    \"\"\"Wrap a dataloader to move data to a device\"\"\"\n    def __init__(self, dl, device):\n        self.dl = dl\n        self.device = device\n        \n    def __iter__(self):\n        \"\"\"Yield a batch of data after moving it to device\"\"\"\n        for b in self.dl: \n            yield to_device(b, self.device)\n\n    def __len__(self):\n        \"\"\"Number of batches\"\"\"\n        return len(self.dl)","ab542e4e":"device = get_default_device()\ndevice","59efac41":"train_dl = DeviceDataLoader(train_dl, device)\nval_dl = DeviceDataLoader(val_dl, device)","b9db892b":"# Training the model\n@torch.no_grad()\ndef evaluate(model, val_loader):\n    model.eval()\n    outputs = [model.validation_step(batch) for batch in val_loader]\n    return model.validation_epoch_end(outputs)\n\ndef fit(epochs, lr, model, train_loader, val_loader, opt_func=torch.optim.SGD):\n    torch.cuda.empty_cache()\n    history = []\n    optimizer = opt_func(model.parameters(), lr)\n    for epoch in range(epochs):\n        # Training Phase \n        model.train()\n        train_losses = []\n        for batch in tqdm(train_loader):\n            loss = model.training_step(batch)\n            train_losses.append(loss)\n            loss.backward()\n            optimizer.step()\n            optimizer.zero_grad()\n        # Validation phase\n        result = evaluate(model, val_loader)\n        result['train_loss'] = torch.stack(train_losses).mean().item()\n        model.epoch_end(epoch, result)\n        history.append(result)\n    return history","60b6e72f":"model = to_device(ProteinCnnModel2(), device)","74a2da13":"evaluate(model, val_dl)","769366d4":"num_epochs = 10\nopt_func = torch.optim.Adam\nlr = 1e-4","50402030":"history = fit(num_epochs, lr, model, train_dl, val_dl, opt_func)","c1087759":"def plot_score(history):\n    scores = [x['val_score'] for x in history]\n    plt.plot(scores, '-x')\n    plt.xlabel('epoch')\n    plt.ylabel('score')\n    plt.title('F1_score vs. No. of epochs');","1812423d":"plot_score(history)","462a80fa":"def predict_single(image):\n    xb = image.unsqueeze(0)\n    xb = to_device(xb, device)\n    preds = model(xb)\n    prediction = preds[0]\n    print(\"Prediction: \", prediction)\n    show_sample(image, prediction)","4fa0fe16":"test_dataset = HumanProteinDataset(TEST_CSV, TEST_DIR, transform=transform)","fb44aea9":"img, target = test_dataset[0]\nimg.shape","cb60166b":"predict_single(test_dataset[100][0])","e2af680b":"predict_single(test_dataset[74][0])","74d234d8":"# Submission File\ntest_dl = DeviceDataLoader(DataLoader(test_dataset, batch_size, num_workers=2, pin_memory=True), device)","8f805e4f":"@torch.no_grad()\ndef predict_dl(dl, model):\n    torch.cuda.empty_cache()\n    batch_probs = []\n    for xb, _ in tqdm(dl):\n        probs = model(xb)\n        batch_probs.append(probs.cpu().detach())\n    batch_probs = torch.cat(batch_probs)\n    return [decode_target(x) for x in batch_probs]","94197f55":"test_preds = predict_dl(test_dl, model)","d278fc1b":"submission_df = pd.read_csv(TEST_CSV)\nsubmission_df.Label = test_preds\nsubmission_df.head()","d114d490":"sub_fname = 'resnet18_submission.csv'","5b09f536":"submission_df.to_csv(sub_fname, index=False)","7f97b749":"!pip install jovian --upgrade","d24fd62f":"import jovian","b48b48fc":"jovian.commit(project='zerogans-protein-competition')","0a329b08":"# Import Data","e21732d0":"### Making predictions & submission"}}