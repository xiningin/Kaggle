{"cell_type":{"2ebbb8ca":"code","2248b216":"code","f2e64119":"code","76de7275":"code","71635bf6":"code","9c7b8015":"code","f37b066d":"code","34faf3d5":"code","ba61e366":"code","2482062f":"code","9abe6820":"markdown","ccfa0738":"markdown","758be659":"markdown","71ca3420":"markdown","410612d1":"markdown","49771018":"markdown","e9579148":"markdown","377c16f7":"markdown","2c910309":"markdown"},"source":{"2ebbb8ca":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.metrics import classification_report\nfrom sklearn.metrics import plot_confusion_matrix\nimport matplotlib.pyplot as plt\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","2248b216":"df = pd.read_csv(\"..\/input\/diabetes-dataset\/diabetes2.csv\")\ndf.columns","f2e64119":"missing_cols = [col for col in df.columns if df[col].isnull().any()]\nmissing_cols","76de7275":"X = pd.DataFrame(df.iloc[:,0:8])\ny = pd.DataFrame(df.iloc[:,8])","71635bf6":"X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=0)","9c7b8015":"clf = LogisticRegression(max_iter=250)\nclf.fit(X_train, y_train['Outcome'])","f37b066d":"y_test_hat = clf.predict(X_test)\nprint(classification_report(y_test,y_test_hat))","34faf3d5":"plot_confusion_matrix(clf, X_test, y_test, cmap=plt.cm.Blues, display_labels=['Diabetic', 'Non-diabetic'],)","ba61e366":"y_train_hat = clf.predict(X_train)\nprint(classification_report(y_train,y_train_hat))","2482062f":"plot_confusion_matrix(clf, X_train, y_train, cmap=plt.cm.Blues, display_labels=['Diabetic', 'Non-diabetic'],)","9abe6820":"# Confusion matrix for training dataset","ccfa0738":"# Predicting on testing dataset","758be659":"# Modelling","71ca3420":"# Splitting training and testing dataset","410612d1":"# Importing the dataset","49771018":"# Checking for columns which have missing values","e9579148":"# Confusion matrix for testing dataset","377c16f7":"# Predicting on training dataset","2c910309":"# Independent and dependent variables"}}