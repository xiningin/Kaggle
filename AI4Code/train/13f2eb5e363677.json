{"cell_type":{"4caa9bf4":"code","50fac667":"code","1462dd67":"code","dc7e2e63":"code","77fb3f55":"code","d1ebc607":"code","1ac1e6d1":"code","389703af":"code","b709444f":"code","7b49d284":"code","18ce5f47":"code","70132d01":"code","d7ea02e6":"code","b8082f2d":"code","c42929ad":"code","422a1517":"markdown","9e549999":"markdown","164c14c6":"markdown","bc230b83":"markdown","9c628a4a":"markdown","2f8a32d8":"markdown","d5bb1915":"markdown","f7df5986":"markdown","b66583ba":"markdown","6cf91e01":"markdown","d01cb93e":"markdown","a7e6e226":"markdown","5b8dc850":"markdown"},"source":{"4caa9bf4":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport os\nfrom fastai.vision.all import *\nimport albumentations as A # the albumentations library has the transformations we will be using","50fac667":"TEST = True\n\ndef set_seeds():\n    random.seed(42)\n    np.random.seed(12345)\n    torch.manual_seed(1234)\n    torch.backends.cudnn.deterministic = True\n    torch.backends.cudnn.benchmark = False","1462dd67":"path = Path('..\/input\/cassava-leaf-disease-classification')\ntrain_df = pd.read_csv(path\/'train.csv')\ntrain_df['image_id'] = train_df['image_id'].apply(lambda x: f'train_images\/{x}')\n\nif TEST: train_df = train_df[0:100] # use only 100 training examples if TEST is True\n    \ntrain_df.head(), train_df.shape","dc7e2e63":"idx2lbl = {0:\"Cassava Bacterial Blight (CBB)\",\n          1:\"Cassava Brown Streak Disease (CBSD)\",\n          2:\"Cassava Green Mottle (CGM)\",\n          3:\"Cassava Mosaic Disease (CMD)\",\n          4:\"Healthy\"}\n\ntrain_df['label'].replace(idx2lbl, inplace=True)\ntrain_df.head()","77fb3f55":"img = PILImage.create(path\/train_df['image_id'][49])\nimg = img.resize((224,224))\nimg","d1ebc607":"def aug_tfm(img): \n    np_img = np.array(img) # converts image to numpy array\n    aug_img = aug(image=np_img)['image'] # applies transformation (defined outside of function)\n    return PILImage.create(aug_img) #returns and visualizes PILImage","1ac1e6d1":"aug = A.ToGray(p=1)\naug_tfm(img)","389703af":"aug = A.CoarseDropout(p=1, min_holes = 40, max_holes=50)\naug_tfm(img)","b709444f":"aug = A.RandomFog(p=1)\naug_tfm(img)","7b49d284":"aug = A.Compose([\n    A.ToGray(p=1),\n    A.RandomFog(p=1),\n    A.CoarseDropout(p=1, min_holes = 40, max_holes=50),\n])\naug_tfm(img)","18ce5f47":"def get_x(row): return path\/row['image_id']\ndef get_y(row): return row['label']\n\nset_seeds()\ndb = DataBlock(blocks = (ImageBlock, CategoryBlock),\n                 get_x = get_x,\n                 get_y = get_y,\n                 splitter = RandomSplitter(valid_pct=0.2),\n                 item_tfms = [Resize(224)],\n                 batch_tfms = [*aug_transforms(), Normalize.from_stats(*imagenet_stats)])\n\nbs=10 if TEST else 64\ndls = db.dataloaders(train_df, bs=bs)\ndls.show_batch(max_n = 3, figsize=((12,12)))","70132d01":"aug = A.CoarseDropout(p=1, min_holes = 40, max_holes=50)\n\nclass MyTransform(Transform):\n    split_idx=None #runs on training and valid\n    order = 2 # runs after initial resize\n    def __init__(self, aug): self.aug = aug\n    def encodes(self, img: PILImage):\n        aug_img = self.aug(image=np.array(img))['image']\n        return PILImage.create(aug_img)\nset_seeds()\ndb = DataBlock(blocks = (ImageBlock, CategoryBlock),\n                 get_x = get_x,\n                 get_y = get_y,\n                 splitter = RandomSplitter(valid_pct=0.2),\n                 item_tfms = [Resize(224), MyTransform(aug)],\n                 batch_tfms = [*aug_transforms(), Normalize.from_stats(*imagenet_stats)])\n\nbs=10 if TEST else 64\ndls = db.dataloaders(train_df, bs=bs)\ndls.show_batch(max_n = 3, figsize=((12,12)))","d7ea02e6":"set_seeds()\ndls.valid.show_batch(figsize=((12,12)), max_n = 3)","b8082f2d":"class MyTransform(Transform):\n    split_idx=0 #runs on training and valid\n    order = 2 # runs after initial resize\n    def __init__(self, aug): self.aug = aug\n    def encodes(self, img: PILImage):\n        aug_img = self.aug(image=np.array(img))['image']\n        return PILImage.create(aug_img)\nset_seeds()   \ndb = DataBlock(blocks = (ImageBlock, CategoryBlock),\n                 get_x = get_x,\n                 get_y = get_y,\n                 splitter = RandomSplitter(valid_pct=0.2),\n                 item_tfms = [Resize(224), MyTransform(aug)],\n                 batch_tfms = [*aug_transforms(), Normalize.from_stats(*imagenet_stats)])\n\nbs=10 if TEST else 64\ndls = db.dataloaders(train_df, bs=bs)\ndls.valid.show_batch(max_n = 3, figsize=((12,12)))","c42929ad":"aug = A.CoarseDropout(p=1, min_holes = 40, max_holes=50) # or whatever transform from albumentations you want to use\n\nclass MyTransform(Transform):\n    split_idx=None #runs on training and valid (0 for train, 1 for valid)\n    order = 2 # runs after initial resize\n    def __init__(self, aug): self.aug = aug\n    def encodes(self, img: PILImage):\n        aug_img = self.aug(image=np.array(img))['image']\n        return PILImage.create(aug_img)\n\ndb = DataBlock(blocks = (ImageBlock, CategoryBlock),\n                 get_x = get_x,\n                 get_y = get_y,\n                 splitter = RandomSplitter(valid_pct=0.2),\n                 item_tfms = [Resize(224), MyTransform(aug)], # put the defined class here.\n                 batch_tfms = [*aug_transforms(), Normalize.from_stats(*imagenet_stats)])","422a1517":"## Transformations as Simple Functions\nWe will begin by defining some simple functions for transforming the images and visualizing the transformations. At this phase, we won't worry about making them work with the fastai `DataBlock`s.\n\nWe start by defining a generic function that should work for any of the `albumentations` transforms. This package handles the necessary transformations between data types. We have `PILImage` images while the package works on `numpy` images, so we need to convert between types.","9e549999":"## Compositions of Transformations\nMultiple transformations can be combined in a single pipeline.","164c14c6":"Because we specified `idx=None`, this transformation was applied to the validation set as well.","bc230b83":"## Making Labels More Interpretable","9c628a4a":"### Dropout","2f8a32d8":"# Data Setup\n\nNothing new here -- the same process as used previously to set up the data for the Cassava competition. We will use only a small subset of the images for testing purposes.","d5bb1915":"# Making these Transformations Work with Fastai\n\nWe will now make these transformations work with the fastai `DataBlock` API. We will demonstrate using the `CoarseDropout` transformation defined above, as it provides a highly-visible transformation, making it immediately obvious whether the transformation was successfully applied.\n\n## \"Baseline\" `DataBlock`\nFirst we show our datablock without any transformations applied.","f7df5986":"### Fog","b66583ba":"Below, we demonstrate that changing the `split_idx` argument to `0` ensures the transformation is *not* applied to the validation set.","6cf91e01":"## Transformations in the `DataBlock`\n\nNext, we apply our transformations as `item_tfms`. To do this, we need to package our transforms into a class that provides a few extra details to the `DataBlock`.\n- `split_idx`: `0` is for training set; `1` is for validation set; `none` is for both.\n- `order` tells when to run relative to the other transforms. So `order=2` in the example below says to run the transform after the inital resize.\n\nAs with the function we defined above, the class we defined below is very modular. We can try out different definitions of `aug` with the `MyTransform` class.","d01cb93e":"# Introduction\n\nThe goal of this notebook is to succinctly demonstrate the general process of transforming images via the `Albumentations` library for use in `fastai` `DataBlock`s.\n\n## Sources\n* [Albumentations Library](https:\/\/github.com\/albumentations-team\/albumentations)\n* [Tutorial: Custom Transforms | Fastai](https:\/\/docs.fast.ai\/tutorial.albumentations.html)\n* [Transform class documentation](https:\/\/fastcore.fast.ai\/transform#Transform)\n\n## Minimum Working Code Template\nScroll to the bottom if all you're interested in is a minimal working code template for creating a transformation that can be passed to a `fastai` `DataBlock`.\n\n## Global options\n* TEST = True to use only a small subset of images to save time\/resources.","a7e6e226":"# Preparing our Image Transformation(s)\nWe will be using the `albumentations` library, which provides many different image transformation options. Our goal, then, is to make the transformations from that library usable within the `fastai` `DataBlock` API.\n\nFirst, we will look at a single example to make sure we can correctly implement the transformation of interest. Here is the base image we'll be transforming.","5b8dc850":"## A note note on `batch_tfms`\n\nI tried to apply this with `batch_tfms` with no real expectation of it working. The class defined above is clearly defined to work on a single image, not on a batch, so unless there's some magic happening in the background, I wouldn't expect it to work.\n\nThere is an interesting discussion [here](https:\/\/forums.fast.ai\/t\/is-it-possible-to-combine-aug-transforms-with-some-transforms-of-albumentations-for-segmentation\/66666\/13) on the topic for anyone interested, but for our purposes, sticking with `item_tfms` is sufficient.\n\n# Minimal Working Code Template"}}