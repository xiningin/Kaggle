{"cell_type":{"c69d662b":"code","b5e338d4":"code","838dda84":"code","df265a25":"code","04c5c990":"code","87f95ce9":"code","286f5fc7":"code","046627b4":"code","ddffd7b8":"code","ada0c20e":"code","c6bacb7a":"code","7243cee1":"code","c4f9cc47":"code","b3d5a860":"code","00edbc4a":"code","9ecf149c":"code","0299c454":"code","7511bb59":"code","39b956c4":"code","8d25f5fc":"code","61b02671":"code","6b130ea6":"code","d0f7b99b":"code","abcae694":"code","928e9bbd":"code","cb4f9b3e":"code","5d1aaf54":"code","f45036a2":"code","cd774c49":"code","a3c27a0e":"code","334a6bd0":"code","f94d798b":"code","d43c2e3f":"code","b8d35998":"markdown","19f024c9":"markdown","8bf91477":"markdown","a964736f":"markdown","79d3ace1":"markdown","f61f0171":"markdown","a24f0f4c":"markdown","184f6b65":"markdown","fe0082b0":"markdown","3b5a962e":"markdown","5b260e69":"markdown","f6bfa7ab":"markdown","4285567b":"markdown","fb2992d5":"markdown","8821d8e2":"markdown","f4ea55ee":"markdown","99e430c7":"markdown","c11425e5":"markdown","5ac5fe1b":"markdown"},"source":{"c69d662b":"import pandas as pd\nimport numpy as np\nfrom sklearn import linear_model\nfrom sklearn.model_selection import train_test_split\nimport warnings\nwarnings.filterwarnings(\"ignore\")","b5e338d4":"#Load the Boston Housing Data Set from sklearn.datasets \nfrom sklearn.datasets import load_boston\nboston = load_boston()","838dda84":"print(boston.keys())","df265a25":"print(boston.data)","04c5c990":"boston.data.shape","87f95ce9":"boston.target","286f5fc7":"boston.target.shape","046627b4":"boston.feature_names","ddffd7b8":"print(boston.DESCR)","ada0c20e":"import pandas as pd\n\ndata = pd.DataFrame(boston.data)\ndata.columns = boston.feature_names","c6bacb7a":"data.head()","7243cee1":"data['PRICE'] = boston.target","c4f9cc47":"data.describe()","b3d5a860":"data.corr()","00edbc4a":"import matplotlib.pyplot as plt\nimport seaborn as sns\n\nplt.rcParams['figure.figsize'] = (15, 10)\nplt.style.use('ggplot')\n\nsns.heatmap(data.corr(), annot=True)\nplt.title('Correlation Plot', fontsize = 20)\nplt.show()","9ecf149c":"import pandas_profiling as pp \nprofile = pp.ProfileReport(data) \nprofile","0299c454":"data.isnull().sum()","7511bb59":"import seaborn as sns\nsns.pairplot(data)","39b956c4":"X, y = data.iloc[:,:-1],data.iloc[:,-1]","8d25f5fc":"X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.33, random_state=1)\nprint('\\n \\n There are {} samples in the training set and {} samples in the test set'.format(X_train.shape[0], X_test.shape[0]))\nprint('\\n \\n There are {} samples in the training set and {} samples in the test set'.format(y_train.shape[0], y_test.shape[0])) ","61b02671":"from sklearn.linear_model import LinearRegression\nmodel = LinearRegression()\nmodel = model.fit(X_train, y_train)","6b130ea6":"#Print the coefecients\/weights for each feature\/column of our model\nprint(model.coef_)","d0f7b99b":"print(model.intercept_)","abcae694":"#print our price predictions on our test data\ny_pred = model.predict(X_test)\nprint(y_pred)","928e9bbd":"x_ax = range(len(X_test))\nplt.scatter(x_ax, y_test, s=5, color=\"blue\", label=\"original\")\nplt.plot(x_ax, y_pred, lw=0.8, color=\"red\", label=\"predicted\")\nplt.legend()\nplt.show()","cb4f9b3e":"from sklearn.metrics import r2_score\nr2 = r2_score(y_test, y_pred)\nprint(r2)","5d1aaf54":"from sklearn.metrics import mean_absolute_error, mean_squared_error\nprint('Mean Squared Error:', mean_squared_error(y_test, y_pred)) \nprint('Root Mean Squared Error:', np.sqrt(mean_squared_error(y_test, y_pred)))\nprint('Mean Absolute Error:', mean_absolute_error(y_test, y_pred))","f45036a2":"from sklearn.model_selection import GridSearchCV\nfrom sklearn.model_selection import ShuffleSplit\nfrom sklearn.linear_model import LinearRegression\nfrom sklearn.tree import DecisionTreeRegressor\nfrom sklearn.ensemble import RandomForestRegressor\nfrom sklearn.svm import SVR","cd774c49":"def find_best_model(X,Y):\n    models = {\n        'linear_regression' :{\n            'model': LinearRegression(),\n            'parameters':{\n                \n            }\n        },\n        \n        'decison_tree_regressor':{\n            'model': DecisionTreeRegressor(splitter='best'),\n            'parameters' :{\n                'max_depth' :[5,10]\n            }\n        },\n        \n        'random_forest': {\n            'model': RandomForestRegressor(),\n            \n            'parameters' :{\n                'n_estimators': [1,5,10,15,20,30,40,50,60,70,80,90,100]\n            }\n        },\n\n         'svc' : {\n            'model' : SVR(gamma= 'auto'),\n            \n            'parameters': {\n                'kernel' : ['rbf','linear'],\n                'C': [1,10,20]\n            }\n        }\n    }\n    \n    scores = []\n    cv_shuffle = ShuffleSplit(n_splits=5,test_size= 0.33,random_state=0)\n    \n    for model_names,model_params in models.items():\n        gc = GridSearchCV(model_params['model'],model_params['parameters'],cv = cv_shuffle,return_train_score= False)\n        gc.fit(X,Y)\n        scores.append({\n            'model': model_names,\n            'parameters' : gc.best_params_,\n            'score' : gc.best_score_\n        })\n        \n    return pd.DataFrame(scores, columns=['model','best_parameters','score'])\n\nfind_best_model(X_train, y_train)","a3c27a0e":"model = RandomForestRegressor(n_estimators= 1)\nmodel.fit(X_train,y_train)","334a6bd0":"predictions = model.predict(X_test)","f94d798b":"predictions","d43c2e3f":"x_ax = range(len(X_test))\nplt.scatter(x_ax, y_test, s=5, color=\"blue\", label=\"original\")\nplt.plot(x_ax, predictions, lw=0.8, color=\"red\", label=\"predicted\")\nplt.legend()\nplt.show()","b8d35998":"**Maximum Score is in Random Forest Model**","19f024c9":"**Using Seaborn for better Visualization**","8bf91477":"**Calculating Errors**","a964736f":"**EDA with Pandas Profiling**","79d3ace1":"**Plotting a graph between Testing and Prediction Data**","f61f0171":"**Import Libraries**","a24f0f4c":"**Splitting data into Training and Testing data**","184f6b65":"**Correlation Plot for Visualization**","fe0082b0":"**Load Dataset**","3b5a962e":"**Earlier, I have just tried with Linear Regression, Now I am trying to get more accuracy on my model and for this will make a function and try to get model with best accuracy.**","5b260e69":"**Defining dependent and independent Variables**","f6bfa7ab":"**Find Correlation**","4285567b":"**Getting Score for Model**","fb2992d5":"**Convert dataset into Data Frame**","8821d8e2":"**Checking for Null Values**","f4ea55ee":"**Get some Statistical Values**","99e430c7":"**Applying Linear Regression to Training Data**","c11425e5":"**Thanks a lot, Any suggestions are welcome.**\n**If you find this notebook helpful, Please upvote and comment!**","5ac5fe1b":"**Check for whatever the Keys in your Dataset**"}}