{"cell_type":{"9ce38aba":"code","7b67710e":"code","c2529671":"code","85838676":"code","9bb5443a":"code","15bf938c":"code","12dea31f":"code","04adab16":"code","8dbc5d20":"code","6a88acc9":"code","64fb0acd":"markdown","1bb489ba":"markdown","0f29002f":"markdown","5e2c1f83":"markdown","117bc631":"markdown","9e0e2e79":"markdown","8229c6f1":"markdown"},"source":{"9ce38aba":"import os\nimport json\n\nimport numpy as np\nimport pandas as pd\nimport keras\nfrom keras import layers\nfrom keras.applications import DenseNet121\nfrom keras.callbacks import Callback, ModelCheckpoint\nfrom keras.preprocessing.image import ImageDataGenerator\nfrom keras.layers import Dense, Dropout, Activation, Flatten\nfrom keras.layers import Conv2D, MaxPooling2D\nfrom keras.models import Sequential\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import confusion_matrix, f1_score, precision_score, recall_score","7b67710e":"os.listdir('..\/input')","c2529671":"x_train = np.load('..\/input\/reducing-image-sizes-to-32x32\/X_train.npy')\nx_test = np.load('..\/input\/reducing-image-sizes-to-32x32\/X_test.npy')\ny_train = np.load('..\/input\/reducing-image-sizes-to-32x32\/y_train.npy')\n\nprint('x_train shape:', x_train.shape)\nprint(x_train.shape[0], 'train samples')\nprint(x_test.shape[0], 'test samples')\n\nx_train = x_train.astype('float32')\nx_test = x_test.astype('float32')\nx_train \/= 255.\nx_test \/= 255.","85838676":"class Metrics(Callback):\n    def on_train_begin(self, logs={}):\n        self.val_f1s = []\n        self.val_recalls = []\n        self.val_precisions = []\n\n    def on_epoch_end(self, epoch, logs={}):\n        X_val, y_val = self.validation_data[:2]\n        y_pred = self.model.predict(X_val)\n\n        y_pred_cat = keras.utils.to_categorical(\n            y_pred.argmax(axis=1),\n            num_classes=14\n        )\n\n        _val_f1 = f1_score(y_val, y_pred_cat, average='macro')\n        _val_recall = recall_score(y_val, y_pred_cat, average='macro')\n        _val_precision = precision_score(y_val, y_pred_cat, average='macro')\n\n        self.val_f1s.append(_val_f1)\n        self.val_recalls.append(_val_recall)\n        self.val_precisions.append(_val_precision)\n\n        print((f\"val_f1: {_val_f1:.4f}\"\n               f\" \u2014 val_precision: {_val_precision:.4f}\"\n               f\" \u2014 val_recall: {_val_recall:.4f}\"))\n\n        return\n\nf1_metrics = Metrics()","9bb5443a":"densenet = DenseNet121(weights='..\/input\/densenet-keras\/DenseNet-BC-121-32-no-top.h5', include_top=False,\n                       input_shape=(32,32,3))","15bf938c":"model = Sequential()\nmodel.add(densenet)\nmodel.add(layers.GlobalAveragePooling2D())\nmodel.add(layers.Dense(14, activation='softmax'))\n\nmodel.compile(loss='categorical_crossentropy', optimizer='adam', metrics=['accuracy'])\n\nmodel.summary()","12dea31f":"model.compile(loss='categorical_crossentropy', optimizer='adam', metrics=['accuracy'])\n\ncheckpoint = ModelCheckpoint('model.h5', monitor='val_acc', verbose=1, \n                             save_best_only=True, save_weights_only=False, mode='auto')\n\nhistory = model.fit(x=x_train, y=y_train,batch_size=64, epochs=10, \n                    callbacks=[checkpoint, f1_metrics], validation_split=0.1)","04adab16":"with open('history.json', 'w') as f:\n    json.dump(history.history, f)\n\nhistory_df = pd.DataFrame(history.history)\nhistory_df['val_f1'] = f1_metrics.val_f1s\nhistory_df['val_precision'] = f1_metrics.val_precisions\nhistory_df['val_recall'] = f1_metrics.val_recalls\nhistory_df[['loss', 'val_loss']].plot()\nhistory_df[['acc', 'val_acc']].plot()\nhistory_df[['val_f1', 'val_precision', 'val_recall']].plot()","8dbc5d20":"model.load_weights('model.h5')\ny_test = model.predict(x_test)\n\nsubmission_df = pd.read_csv('..\/input\/iwildcam-2019-fgvc6\/sample_submission.csv')\nsubmission_df['Predicted'] = y_test.argmax(axis=1)\n\nprint(submission_df.shape)\nsubmission_df.head()","6a88acc9":"submission_df.to_csv('submission.csv',index=False)","64fb0acd":"# iWildCam 2019 - Pucho Internship Task\n## Using Keras and DenseNet (Transfer Learning)\nThis code is taken from CIFAR 10 CNN (Keras Official Documentation)\n","1bb489ba":"## Loading the dataset","0f29002f":"## Training the model","5e2c1f83":"## Submission","117bc631":"## Transfer Learning using DenseNet121","9e0e2e79":"## Evaluation","8229c6f1":"## Creating the model"}}