{"cell_type":{"cbd73e43":"code","7230f66e":"code","cc85d8cd":"code","ef640fd4":"code","2659dd42":"code","327f6fb1":"code","6d908aeb":"code","fd63ebb1":"code","37e53ba8":"code","781cb811":"code","7083050d":"code","d444e935":"code","b20fde6f":"code","4cd16735":"code","124b7fbc":"code","163aa8ac":"code","ce179a6a":"code","111fff17":"code","59e120a5":"code","87da49d7":"code","7ba504b1":"code","4818ffd2":"code","83021de3":"code","09bfb167":"code","8910990b":"code","86f6b302":"code","af6cf06e":"code","4fa1c35a":"code","1049f253":"code","931f857b":"code","b71c8af1":"code","27b1defa":"code","3c3a9db4":"code","3ff2354c":"code","a030d6c9":"code","0ab3e09e":"code","8f17b0fe":"code","33cdcbe1":"code","fdb8fb0c":"code","d4d54720":"code","088195e2":"code","7d924e84":"code","f338f028":"code","4edffdd8":"code","141db9ef":"code","c83b8f11":"code","513d6321":"code","f9be892c":"code","df996fc4":"code","556da156":"code","edfd898a":"markdown","3f7fc5c4":"markdown","af4f6030":"markdown","c9830472":"markdown","3bf131ab":"markdown","fd4a5586":"markdown","c884ef7b":"markdown","1db94a99":"markdown","9d010ef9":"markdown","13001188":"markdown","b23c5f75":"markdown","84216fa7":"markdown","f3fdff03":"markdown","4f35ed99":"markdown","155f29a1":"markdown","58c72954":"markdown","9f92cf26":"markdown","ce203572":"markdown","edb4bcea":"markdown","3089139d":"markdown"},"source":{"cbd73e43":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","7230f66e":"%matplotlib inline\n\nimport pandas as pd\nimport seaborn as sns\nimport matplotlib.pyplot as plt","cc85d8cd":"train = pd.read_csv('..\/input\/train.csv', index_col = \"PassengerId\")\ntrain.head()\ntest = pd.read_csv('..\/input\/test.csv', index_col = \"PassengerId\")\ntest.head()","ef640fd4":"sns.countplot(data = train, x = 'Sex', hue = 'Survived')","2659dd42":"pd.pivot_table(train, index = 'Sex', values = 'Survived')    ","327f6fb1":"sns.countplot(data = train, x = 'Pclass', hue = 'Survived')","6d908aeb":"pd.pivot_table(train, index = 'Pclass', values = 'Survived')","fd63ebb1":"sns.countplot(data = train, x = 'Embarked', hue = 'Survived')","37e53ba8":"pd.pivot_table(train, index = 'Embarked', values = 'Survived')","781cb811":"sns.lmplot(data = train, x = 'Age',  y='Fare', hue = 'Survived', fit_reg = False)","7083050d":"low_Fare = train[train['Fare'] < 100]","d444e935":"sns.lmplot(data = low_Fare, x = 'Age', y = 'Fare', hue = 'Survived', fit_reg = False)","b20fde6f":"train['FamilySize'] = train['SibSp'] + train['Parch'] + 1\ntest['FamilySize'] = test['SibSp'] + test['Parch'] + 1","4cd16735":"train[['SibSp', 'Parch', 'FamilySize']].head()","124b7fbc":"sns.countplot(data = train, x = 'FamilySize', hue = 'Survived')","163aa8ac":"train.loc[train['FamilySize'] == 1, 'FamilyType'] = 'Single'\ntrain.loc[(train['FamilySize'] > 1) & (train['FamilySize'] < 5), 'FamilyType'] = 'Nuclear'\ntrain.loc[train['FamilySize'] >= 5, 'FamilyType'] = 'Big'\n\ntrain[['FamilySize', 'FamilyType']].head()","ce179a6a":"sns.countplot(data = train, x = 'FamilyType', hue = 'Survived')","111fff17":"pd.pivot_table(train, index = 'FamilyType', values = 'Survived')","59e120a5":"train['Name'].head()","87da49d7":"def get_title(name):\n    return name.split(', ')[1].split('. ')[0]\n\ntrain['Name'].apply(get_title).unique()","7ba504b1":"train.loc[train['Name'].str.contains('Mr'), 'Title'] = 'Mr'\ntrain.loc[train['Name'].str.contains('Mrs'), 'Title'] = 'Mrs'\ntrain.loc[train['Name'].str.contains('Miss'), 'Title'] = 'Miss'\ntrain.loc[train['Name'].str.contains('Master'), 'Title'] = 'Master'\n\ntrain[['Name','Title']].head()","4818ffd2":"sns.countplot(data = train, x = 'Title', hue = 'Survived')","83021de3":"pd.pivot_table(train, index = \"Title\", values = 'Survived')","09bfb167":"train.loc[train['Sex'] == 'female', 'Sex_encode'] = 0 \ntrain.loc[train['Sex'] == 'male', 'Sex_encode'] = 1\ntest.loc[test['Sex'] == 'female', 'Sex_encode'] = 0 \ntest.loc[test['Sex'] == 'male', 'Sex_encode'] = 1","8910990b":"train[['Sex', 'Sex_encode']].head()","86f6b302":"test[['Sex', 'Sex_encode']].head()","af6cf06e":"train[train['Fare'].isnull()]","4fa1c35a":"test[test['Fare'].isnull()]","1049f253":"train['Fillin_Fare'] = train['Fare']","931f857b":"test['Fillin_Fare'] = test['Fare']","b71c8af1":"test.loc[test['Fare'].isnull(), 'Fillin_Fare']= 0\ntest.loc[test['Fare'].isnull(), ['Fare', 'Fillin_Fare']]","27b1defa":"train['Embarked_C'] = train['Embarked'] == 'C'\ntrain['Embarked_Q'] = train['Embarked'] == 'Q'\ntrain['Embarked_S'] = train['Embarked'] == 'S'\n\ntrain[['Embarked','Embarked_S', 'Embarked_Q', 'Embarked_C']].head()","3c3a9db4":"test['Embarked_C'] = test['Embarked'] == 'C'\ntest['Embarked_Q'] = test['Embarked'] == 'Q'\ntest['Embarked_S'] = test['Embarked'] == 'S'\n\ntest[['Embarked','Embarked_S', 'Embarked_Q', 'Embarked_C']].head()","3ff2354c":"train['Child'] = train['Age'] < 15\ntrain[['Age', 'Child']].head()","a030d6c9":"test['Child'] = test['Age'] < 15\ntest[['Age', 'Child']].head()","0ab3e09e":"train['Single'] = train['FamilySize'] == 1\ntrain['Nuclear'] = (train['FamilySize'] > 1)  & (train['FamilySize'] < 5)\ntrain['Big'] = train['FamilySize'] >= 5\n\ntrain[['FamilySize', 'Single', 'Nuclear', 'Big']].head()","8f17b0fe":"test['Single'] = test['FamilySize'] == 1\ntest['Nuclear'] = (test['FamilySize'] > 1)  & (test['FamilySize'] < 5)\ntest['Big'] = test['FamilySize'] >= 5\n\ntest[['FamilySize', 'Single', 'Nuclear', 'Big']].head()","33cdcbe1":"train['Master'] = train['Name'].str.contains('Master')\n\ntrain[['Name', 'Master']].head()","fdb8fb0c":"test['Master'] = test['Name'].str.contains('Master')\n\ntest[['Name', 'Master']].head()","d4d54720":"feature_names = ['Pclass', 'Sex_encode', 'Fillin_Fare', 'Embarked_C','Embarked_Q', 'Embarked_S', 'Child', \"Single\", \"Nuclear\", 'Big', 'Master']\nfeature_names","088195e2":"label_name = 'Survived'","7d924e84":"X_train = train[feature_names]\nX_train.head()","f338f028":"X_test = test[feature_names]\nX_test.head()","4edffdd8":"y_train = train['Survived']\ny_train.head()","141db9ef":"from sklearn.tree import DecisionTreeClassifier\n\nmodel = DecisionTreeClassifier(max_depth = 8, random_state = 0)\nmodel","c83b8f11":"model.fit(X_train, y_train)","513d6321":"import graphviz\nfrom sklearn.tree import export_graphviz\n\ndot_tree = export_graphviz(model, feature_names = feature_names, class_names=[\"Perish\", \"Survived\"], out_file = None)\ngraphviz.Source(dot_tree)","f9be892c":"predictions = model.predict(X_test)\nprint(predictions.shape)\npredictions[0:10]","df996fc4":"submission = pd.read_csv('..\/input\/gender_submission.csv', index_col = 'PassengerId')","556da156":"submission['Survived'] = predictions\nprint(submission.shape)\nsubmission.head()","edfd898a":"### Age","3f7fc5c4":"## Explore","af4f6030":"## Preprocessing","c9830472":"## Submit","3bf131ab":"### Pclass","fd4a5586":"### Fillin in missing Fare","c884ef7b":"## Use Decision Tree","1db94a99":"END... Thank you","9d010ef9":"### Embarked","13001188":"### Age & Fare","b23c5f75":"### Name","84216fa7":"### Family Size","f3fdff03":"### Sex","4f35ed99":"## Load Data","155f29a1":"### Name","58c72954":"### FamilySize","9f92cf26":"### Train","ce203572":"## Visualize","edb4bcea":"## Predict","3089139d":"### Embarked"}}