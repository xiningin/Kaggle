{"cell_type":{"364cb511":"code","e39e20ab":"code","126bbfde":"code","eb242365":"code","83bcfe68":"code","5bceb30c":"code","ffb13d5b":"code","7054e178":"code","c756269a":"code","5d2051cd":"code","6945a757":"code","2b3506a0":"code","3f659c91":"code","c73dd067":"code","1f2fb8be":"code","e5edca17":"code","97c295b1":"code","63cdec79":"code","9bb151e7":"code","1ea73091":"code","15853713":"code","066226fa":"code","1f826f5e":"code","2349878b":"code","87bc3ddd":"code","48f802af":"code","de657e67":"code","8b48d04d":"code","60c70bdc":"code","d8bdf29b":"code","9afc78a5":"code","258b43a1":"markdown","73a6e968":"markdown","b810bb37":"markdown","f7601710":"markdown","d9db6ec8":"markdown"},"source":{"364cb511":"#import library\nimport numpy as np\nimport pandas as pd\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import accuracy_score, log_loss\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.svm import SVC, LinearSVC\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.ensemble import RandomForestClassifier, AdaBoostClassifier, GradientBoostingClassifier\nfrom sklearn.naive_bayes import GaussianNB\nfrom sklearn.discriminant_analysis import LinearDiscriminantAnalysis, QuadraticDiscriminantAnalysis\nfrom xgboost import XGBClassifier\nimport xgboost\nimport math\nfrom sklearn import metrics","e39e20ab":"churn  = pd.read_csv('..\/input\/tour-travels-customer-churn-prediction\/Customertravel.csv')","126bbfde":"churn.shape","eb242365":"churn.head()","83bcfe68":"churn.describe()","5bceb30c":"churn.info()","ffb13d5b":"#heatmap correlation\nplt.figure(figsize = (8,6))\nsns.heatmap(churn.corr(), annot = True, cmap = 'YlOrRd')\nplt.title(\"Pearson Correlation\")\nplt.show()","7054e178":"#transform categorical variable\nchurn['FrequentFlyer'] = churn['FrequentFlyer'].astype('category')\nchurn['AnnualIncomeClass'] = churn['AnnualIncomeClass'].astype('category')\nchurn['AccountSyncedToSocialMedia'] = churn['AccountSyncedToSocialMedia'].astype('category')\nchurn['BookedHotelOrNot'] = churn['BookedHotelOrNot'].astype('category')\nprint(churn.dtypes)","c756269a":"#handling categorical data\ndf = pd.DataFrame(churn)\ndf['FrequentFlyer'] = df['FrequentFlyer'].cat.codes\ndf['AnnualIncomeClass'] = df['AnnualIncomeClass'].cat.codes\ndf['AccountSyncedToSocialMedia'] = df['AccountSyncedToSocialMedia'].cat.codes\ndf['BookedHotelOrNot'] = df['BookedHotelOrNot'].cat.codes\ndf.head()","5d2051cd":"#split data\nX = df.drop('Target', axis = 1)\ny = df['Target']\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.3, random_state = 0)\nprint(X_train.shape)\nprint(y_train.shape)\nprint(X_test.shape)\nprint(y_test.shape)","6945a757":"#prepare models\nclassifiers = [\n    KNeighborsClassifier(n_neighbors = 5),\n    SVC(kernel = 'linear', gamma = 'auto', C = 5, probability = True),\n    LinearSVC(),\n    DecisionTreeClassifier(max_depth = 3),\n    RandomForestClassifier(random_state = 1, max_features = 'sqrt', n_jobs = 1, verbose = 1),\n    XGBClassifier(),\n    AdaBoostClassifier(),\n    GradientBoostingClassifier(),\n    GaussianNB(),\n    LinearDiscriminantAnalysis(),\n    QuadraticDiscriminantAnalysis()]","2b3506a0":"#report models\nlog_cols=[\"Classifier\", \"Accuracy\", \"Log Loss\"]\nlog = pd.DataFrame(columns = log_cols)\n\nfor clf in classifiers:\n    clf.fit(X_train, y_train)\n    name = clf.__class__.__name__\n    print(\"=\" * 30)\n    print(name)\n    print('****Results****')\n    \n    train_predictions = clf.predict(X_test)\n    acc = accuracy_score(y_test, train_predictions)\n    print(\"Accuracy: {:.4%}\".format(acc))\n    \n    train_predictions = clf.predict(X_test)\n    ll = log_loss(y_test, train_predictions)\n    print(\"Log Loss: {}\".format(ll))\n    print(\"\\n\")\n    \n    log_entry = pd.DataFrame([[name, acc * 100, ll]], columns = log_cols)\n    log = log.append(log_entry)\n    \nprint(\"=\" * 30)","3f659c91":"#visualize accuracy models\nplt.figure(figsize = (10,6))\nsns.set_color_codes(\"muted\")\nsns.barplot(x = 'Accuracy', y = 'Classifier', data = log, color = \"red\")\nplt.xlabel('Accuracy %')\nplt.title('Accuracy of Classification Model')\nplt.show()\nsns.set_color_codes(\"muted\")\nplt.show()","c73dd067":"#visualize log loss models\nplt.figure(figsize = (10,6))\nsns.barplot(x = 'Log Loss', y = 'Classifier', data = log, color = \"blue\")\nplt.xlabel('Log Loss')\nplt.title('Log Loss of Classification Model')\nplt.show()","1f2fb8be":"#build model\nxgb = XGBClassifier()\n%time xgb.fit(X_train, y_train)\nxgb.score(X_test, y_test)","e5edca17":"#prediction\ny_pred = xgb.predict(X_test)\nprint(y_pred)","97c295b1":"#report of MSE & RMSE \nmse = metrics.mean_squared_error(y_test, y_pred)\nprint('MSE: '+ str(mse))\nrmse = math.sqrt(metrics.mean_squared_error(y_test, y_pred))\nprint('RMSE: '+ str(rmse))","63cdec79":"#confusion matrix\nmatrix = metrics.confusion_matrix(y_test, y_pred)\nprint(matrix)\n\n#heatmap matrix\nplt.figure(figsize = (8,6))\nsns.heatmap(matrix, annot = True, fmt = \".0f\", cmap = 'viridis')\nplt.title(\"Confusion Matrix\")\nplt.xlabel(\"Prediction\")\nplt.ylabel(\"Actual\")\nplt.show()","9bb151e7":"#classification report\nreport = metrics.classification_report(y_test, y_pred)\nprint(report)","1ea73091":"#transform Frequent Flyer\ndf.FrequentFlyer[df['FrequentFlyer'] == 0] = 'No'\ndf.FrequentFlyer[df['FrequentFlyer'] == 1] = 'Yes'\ndf.FrequentFlyer[df['FrequentFlyer'] == 2] = 'No Record'\n\n#transform Annual Income Class\ndf.AnnualIncomeClass[df['AnnualIncomeClass'] == 0] = 'Low Income'\ndf.AnnualIncomeClass[df['AnnualIncomeClass'] == 1] = 'Middle Income'\ndf.AnnualIncomeClass[df['AnnualIncomeClass'] == 2] = 'High Income'\n\n#transform Account Synced To Social Media\ndf.AccountSyncedToSocialMedia[df['AccountSyncedToSocialMedia'] == 0] = 'No'\ndf.AccountSyncedToSocialMedia[df['AccountSyncedToSocialMedia'] == 1] = 'Yes'\n\n#transform Booked Hotel Or Not\ndf.BookedHotelOrNot[df['BookedHotelOrNot'] == 0] = 'No'\ndf.BookedHotelOrNot[df['BookedHotelOrNot'] == 1] = 'Yes'\n\n#transform target\ndf.Target[df['Target'] == 0] = 'Customer Does Not Churn'\ndf.Target[df['Target'] == 1] = 'Customer Churn'\ndf.head()","15853713":"#visualize target ~ age\nplt.figure(figsize = (8,6))\nsns.boxplot(data = df, x = 'Target', y = 'Age', palette = 'Set1')\nplt.title(\"Target ~ Age\")\nplt.show()","066226fa":"#group frequent flyer & target\nflyer_target = df.groupby(['Target', 'FrequentFlyer']).size().reset_index(name = 'Count')\nprint(flyer_target)","1f826f5e":"#visualize frequent flyer ~ target\nplt.figure(figsize = (8,6))\nsns.barplot(x = 'Target', y = 'Count', hue = 'FrequentFlyer', data = flyer_target)\nplt.title(\"Target ~ Frequent Flyer\")\nplt.show()","2349878b":"#group annual income class & target\nincome_target = df.groupby(['Target', 'AnnualIncomeClass']).size().reset_index(name = 'Count')\nprint(income_target)","87bc3ddd":"#visualize annual income class ~ target\nplt.figure(figsize = (8,6))\nsns.barplot(x = 'Target', y = 'Count', hue = 'AnnualIncomeClass', data = income_target, palette = 'Set1')\nplt.title(\"Target ~ Annual Income Class\")\nplt.show()","48f802af":"#visualize target ~ services opted\nplt.figure(figsize = (8,6))\nsns.boxplot(data = df, x = 'Target', y = 'ServicesOpted', palette = 'Set2')\nplt.title(\"Target ~ Services Opted\")\nplt.show()","de657e67":"#group account synced to social media ~ target\nacc_target = df.groupby(['Target', 'AccountSyncedToSocialMedia']).size().reset_index(name = 'Count')\nprint(acc_target)","8b48d04d":"#visualize account synced to social media ~ target\nplt.figure(figsize = (8,6))\nsns.barplot(x = 'Target', y = 'Count', hue = 'AccountSyncedToSocialMedia', data = acc_target)\nplt.title(\"Target ~ Account Synced To Social Media\")\nplt.show()","60c70bdc":"#group booked hotel or not & target\nbook_target = df.groupby(['Target', 'BookedHotelOrNot']).size().reset_index(name = 'Count')\nprint(book_target)","d8bdf29b":"#visualize booked hotel or not ~ target\nplt.figure(figsize = (8,6))\nsns.barplot(x = 'Target', y = 'Count', hue = 'BookedHotelOrNot', data = book_target, palette = 'Set1')\nplt.title(\"Target ~ Booked Hotel Or Not\")\nplt.show()","9afc78a5":"#visualize Target\nplt.figure(figsize = (8,6))\nx = [np.count_nonzero(df['Target'] == 'Customer Does Not Churn'),\n    np.count_nonzero(df['Target'] == 'Customer Churn')]\nactivities = ['Customer Does Not Churn', 'Customer Churn']\nplt.pie(x, labels = activities, startangle = 50, autopct = '%.1f%%', shadow = True)\nplt.title(\"Target\")\nplt.show()","258b43a1":"### Extreme Gradient Boosting Model is the best score result","73a6e968":"## Visualization","b810bb37":"## Classification Model","f7601710":"# Tour & Travels Customer Churn Prediction","d9db6ec8":"## Data Extraction"}}