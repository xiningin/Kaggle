{"cell_type":{"eb296003":"code","00fb9d6d":"code","20bd071b":"code","2eb00295":"code","6ff7a626":"code","f63e4ba6":"code","c297dd7a":"code","f085a08e":"code","89f4fdbf":"code","37f4de96":"code","860f03af":"code","f832c388":"code","b26f86aa":"code","bc3b9242":"code","5d321d3e":"code","e1bcf924":"code","a268a14e":"code","99ffd926":"code","420057d4":"code","6d302425":"code","604d89c8":"code","3b53e84e":"code","2d49de40":"code","ec4c8c12":"code","606f37a6":"code","62b406dd":"code","8aed2cb3":"markdown","73b8f23c":"markdown","3414c29f":"markdown","982e91cc":"markdown","76873da8":"markdown","97dc76f3":"markdown","214184a1":"markdown","6e946b93":"markdown","75fdcf07":"markdown","6b56eabb":"markdown"},"source":{"eb296003":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","00fb9d6d":"#Import Standard Libraries and Packages\nimport pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nsns.set(style='darkgrid')\n\nimport plotly.express as px\nimport plotly.graph_objects as go\n#from plotly.offline import iplot, init_notebook_mode\n#init_notebook_mode()\n\nfrom warnings import filterwarnings\nfilterwarnings(\"ignore\")","20bd071b":"#Read dataset\naviation1 = pd.read_csv(\"..\/input\/aviation-accident-database-synopses\/AviationData.csv\", encoding='ISO-8859-1')","2eb00295":"#View the dataset\naviation1.head()","6ff7a626":"aviation1.info()","f63e4ba6":"aviation1[['Injury.Severity','Total.Fatal.Injuries','Total.Serious.Injuries','Total.Minor.Injuries','Total.Uninjured']].head(10)","c297dd7a":"aviation1['Broad.phase.of.flight'].unique()","f085a08e":"columns = ['Event.Id' ,'Accident.Number', 'Airport.Code', 'Airport.Name', 'Registration.Number', \n           'Air.carrier', 'Schedule', 'FAR.Description', 'Report.Status', 'Publication.Date', 'Purpose.of.flight']\naviation2 = aviation1.drop(columns, axis=1)\naviation2.head()","89f4fdbf":"aviation2.info()","37f4de96":"aviation2['City'] = aviation2['LOCATION'].str.split(',').str[0]\naviation2['State'] = aviation2['LOCATION'].str.split(',').str[1]","860f03af":"aviation2['InjurySeverityType'] = aviation2['Injury.Severity'].str.split('(').str[0]","f832c388":"aviation2['year'] = [int(i.split('-')[0]) for i in aviation2['Event.Date']]\naviation2['month'] = [int(i.split('-')[1]) for i in aviation2['Event.Date']]\naviation2['day'] = [int(i.split('-')[2]) for i in aviation2['Event.Date']]","b26f86aa":"# then, we drop the original colums\naviation3 = aviation2.drop(['LOCATION','Injury.Severity','Event.Date'],axis=1)","bc3b9242":"# check missing values \nmissing = aviation3.isnull().sum()\nmissing[missing > 0].sort_values(ascending=False)","5d321d3e":"aviation3['Longitude'].fillna(aviation3['Longitude'].mean(), inplace=True)\naviation3['Latitude'].fillna(aviation3['Latitude'].mean(), inplace=True)\naviation3['Total.Uninjured'].fillna(aviation3['Total.Uninjured'].mean(), inplace=True)\naviation3['Total.Minor.Injuries'].fillna(aviation3['Total.Minor.Injuries'].mean(), inplace=True)\naviation3['Total.Serious.Injuries'].fillna(aviation3['Total.Serious.Injuries'].mean(), inplace=True)\naviation3['Total.Fatal.Injuries'].fillna(aviation3['Total.Fatal.Injuries'].mean(), inplace=True)\naviation3['Number.of.Engines'].fillna(aviation3['Number.of.Engines'].mean(), inplace=True)","e1bcf924":"categorical_columns = aviation3.select_dtypes(include=['object']).columns\naviation3[categorical_columns] = aviation3[categorical_columns].fillna(\"UNKNOWN\")\naviation = aviation3.fillna(\"UNKNOWN\")\naviation3.head()","a268a14e":"# check missing values again -- no more\nmissing = aviation3.isnull().sum()\nmissing[missing > 0].sort_values(ascending=False)","99ffd926":"aviation3['Ratio.uninjured'] = aviation3['Total.Uninjured']\/(aviation3['Total.Uninjured']+\n                                             aviation3['Total.Serious.Injuries']+\n                                             aviation3['Total.Minor.Injuries']+\n                                             aviation3['Total.Fatal.Injuries'])","420057d4":"aviation3['Ratio.uninjured'].describe()","6d302425":"aviation3[['Total.Fatal.Injuries','Total.Serious.Injuries','Total.Minor.Injuries','Total.Uninjured','Ratio.uninjured']].head()","604d89c8":"# check missing values \nmissing = aviation3.isnull().sum()\nmissing[missing > 0].sort_values(ascending=False)","3b53e84e":"aviation3['Ratio.uninjured'] = aviation3['Ratio.uninjured'].fillna(0)","2d49de40":"# check missing values again -- no more\nmissing = aviation3.isnull().sum()\nmissing[missing > 0].sort_values(ascending=False)","ec4c8c12":"aviation3.head(-5)","606f37a6":"# Evaluate the Notorious Companies\n\nplt.figure(figsize=(20,15))\naviation3['Make'].str.upper().value_counts().sort_values(ascending=False)[:10].plot(kind='bar', color='Purple')\nplt.xticks(rotation=90)\nplt.xlabel(\"Make\", size=15)\nplt.ylabel(\"Count of Accidents\", size=15)\nplt.title(\"Top 10 Companies Involved in the Accidents\", size=20)\ny=aviation3['Make'].str.upper().value_counts().sort_values(ascending=False)[:10]\nfor i, v in enumerate(y):\n    plt.text(i, v, str(v), fontsize=15, style='oblique', horizontalalignment='center')\nplt.show()","62b406dd":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nsns.set(style='darkgrid')\n\nimport plotly.express as px\nimport plotly.graph_objects as go\n#from plotly.offline import iplot, init_notebook_mode\n#init_notebook_mode()\n\nfrom warnings import filterwarnings\nfilterwarnings(\"ignore\")","8aed2cb3":"### Reformate column 'Location'\nColumn Location contains information about City and State. We'll split this column into two columns for further investigation.","73b8f23c":"## 1.2 data cleaning","3414c29f":"### Missing values","982e91cc":"# 1. Data preprocessing \n## 1.1 load data ","76873da8":"### Reformate column 'Event.Date'\nFor futher analysis, we split the column 'Event.Date' into three sperate columns: year, month and day.","97dc76f3":"### Add column \u2018Ratio.uninjured'\nAs our task is to predict the percantage of uninjured, we calculated the ratio of uninjured for each object as a new column.","214184a1":"### Drop irrelevant columns","6e946b93":"### Reformate column 'Injury.Severity'\nSome entries of the column 'Injury.Severity' contains information about the count of fatalities, which displays in bracket. For example, fatal(2) means the total number of fatal is 2. Since we already have separate columns for that information (i.e. 'Total.Fatal.Injuries'), we'll keep only relevant information in InjurySeverityType field.","75fdcf07":"For missing values in numerical variables, we replace them with mean.","6b56eabb":"These missing values are resulted by zero denominators, so we replace them with zero."}}