{"cell_type":{"bd11d033":"code","42d3dea4":"code","f25bb724":"code","3e71ea59":"code","e26f3c8e":"code","f6b8a503":"code","b226a145":"code","67d034fb":"code","3208ac1d":"code","5c669de0":"code","8a92cb64":"code","4576d952":"code","4f74a88e":"code","036658ba":"code","eb1edd47":"markdown","5bd20402":"markdown","0b26c6f2":"markdown","67a3a6b5":"markdown","3a94586b":"markdown","c347d3a2":"markdown"},"source":{"bd11d033":"from plotly.offline import init_notebook_mode, iplot\ninit_notebook_mode(connected=True)\nimport plotly.graph_objs as go\nimport pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport missingno\nimport seaborn as sns\nplt.style.use('seaborn-whitegrid')\nfrom sklearn.preprocessing import OneHotEncoder, LabelEncoder, label_binarize\nimport catboost\nfrom sklearn.model_selection import train_test_split\nfrom sklearn import model_selection, tree, preprocessing, metrics, linear_model\nfrom sklearn.svm import LinearSVC\nfrom sklearn.ensemble import GradientBoostingClassifier\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.naive_bayes import GaussianNB\nfrom sklearn.linear_model import LinearRegression, LogisticRegression, SGDClassifier\nfrom sklearn.tree import DecisionTreeClassifier\nfrom catboost import CatBoostClassifier, Pool, cv\nimport warnings\nfrom plotly.subplots import make_subplots\n\ndf = pd.read_csv('..\/input\/videogamesales\/vgsales.csv')\ndf.corr()","42d3dea4":"\ndef max_sales(group):\n    _ = group['Global_Sales'].max()\n    group['Max_Sales'] = _\n    return group\n\ndf2= df.groupby('Genre').apply(max_sales)\nsns.barplot(y='Genre',x='Max_Sales',data=df2,orient='h')","f25bb724":"\ngenre = df.groupby('Genre')['Global_Sales'].max()\ngenre = genre.reset_index()\ngenre.sort_values(['Global_Sales'],ascending=False,inplace=True)\nsns.barplot(y='Genre', x='Global_Sales',data=genre)","3e71ea59":"df3 = df.groupby('Genre').agg({'Global_Sales':['max']})\ndf3 = df3.reset_index()\ndf3.columns = ['Genre','Sale_Per_Genre']\ndf3.sort_values(['Sale_Per_Genre'],ascending=False,inplace=True)\nsns.barplot(y='Genre',x='Sale_Per_Genre',data=df3)","e26f3c8e":"#df['min_salary'] = min_hr.apply(lambda x: int(x.split('-')[0]))\n#df['max_salary'] = min_hr.apply(lambda x: int(x.split('-')[1]))\n\n#[0]: Keep elements before split point\n#[1]: Keep elements after splitpoint\n\n#minus_Kd = salary.apply(lambda x: x.replace('K','').replace('$',''))\n","f6b8a503":"df['Popular'] = df['Global_Sales'].apply(lambda x: 'true' if x>30 else 'false')\ndf.head()","b226a145":"df['Global_Sales'] = df.apply(lambda x: x['Global_Sales']\/100 if x['Genre'] !='Sports' else x['Global_Sales'],axis=1)\ndf.head()","67d034fb":"#gender = train.groupby(['Sex','Survived'],as_index=False).size()\n#gender.rename(columns={'size': 'Percentage'},inplace=True)\n#gender['Percentage'] = np.where(gender['Sex']=='female',gender['Percentage']\/314,gender['Percentage']\/577)","3208ac1d":"df.head()\ndf1 = df.loc[df['Year']<=2015]\nheatmapdata = pd.pivot_table(df1,values='Global_Sales',index=['Genre'],columns='Year')\nsns.heatmap(heatmapdata,cmap='YlGnBu')","5c669de0":"sns.countplot(y='Genre',data=df)","8a92cb64":"sns.stripplot(y='Genre',x='Global_Sales',data=df,jitter=True,dodge=True)","4576d952":"g =sns.FacetGrid(df,col='Genre',aspect=1,col_wrap=3)\ng.map(sns.scatterplot,'Year','Global_Sales')","4f74a88e":"sns.relplot(data=df,x='Year',y='Global_Sales',col='Genre',aspect=1,col_wrap=3)","036658ba":"sns.catplot(x='Year',y='Global_Sales',hue='Genre',data=df,aspect=2,height=7)\n","eb1edd47":"# Using Groupby without aggregate","5bd20402":"# Using Groupby with aggregate","0b26c6f2":"# Using Groupby with apply function","67a3a6b5":"# Types of Graphs","3a94586b":"# Lambda","c347d3a2":"# NP.Where"}}