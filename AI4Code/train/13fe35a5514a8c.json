{"cell_type":{"a03c9ba0":"code","a90e5d06":"code","e2874585":"code","6304cc67":"code","52405500":"code","08317dff":"code","ed02e11f":"code","9f016afc":"code","da122789":"code","a5ad1af3":"code","2591d5af":"code","dd6ea0e5":"code","ca32fc8b":"code","1a78c1aa":"code","086ba90d":"code","bc49ab1c":"code","fabd4ef2":"code","808136b6":"code","20149f37":"code","27ba0c38":"code","a01e1595":"code","50ab9ca2":"code","a36637b3":"code","dd9f92cd":"code","a54b7f9e":"code","9b38d66b":"code","23fc4421":"code","95b322aa":"code","e1d3f089":"code","3125f2e8":"code","1254959f":"code","639ab5c3":"code","c9184f68":"code","40f07692":"code","be91bf2e":"code","fe24a498":"code","dca6c26b":"code","f2616839":"code","9c8934b2":"code","ae1cc5df":"code","2f208894":"code","26587d67":"markdown","a8ce57dc":"markdown","bbf208d7":"markdown","7854a990":"markdown","6060fd74":"markdown","06d62fd4":"markdown","6d72030f":"markdown","a1bcd766":"markdown","91f722a8":"markdown","58035f46":"markdown","e8b67dd3":"markdown","3644bd7d":"markdown","a43ce214":"markdown","cb2118f6":"markdown","d07f9c55":"markdown","eee90142":"markdown","d3189478":"markdown","092ca071":"markdown","eb2a5d26":"markdown","bbc91cb6":"markdown","130eb36d":"markdown","e9ad3362":"markdown","59977383":"markdown","d3751b52":"markdown","bcad120a":"markdown","9819d3dd":"markdown","e4b7fb6b":"markdown","edaee666":"markdown","af3eca38":"markdown","2f2b87b7":"markdown","6e5577ee":"markdown","0b287cd8":"markdown","760f0b65":"markdown"},"source":{"a03c9ba0":"import numpy as np \nimport pandas as pd \nimport seaborn as sns\nimport matplotlib.pyplot as plt\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))","a90e5d06":"df = pd.read_csv(\"\/kaggle\/input\/police-killings\/police_killings.csv\",encoding = \"ISO-8859-1\")","e2874585":"df.head()","6304cc67":"df.shape","52405500":"df.dtypes","08317dff":"a = df['gender'].value_counts()\nsns.set_theme(style=\"whitegrid\")\nax = sns.barplot( x = a.index, y = a.values, )","ed02e11f":"a = df['lawenforcementagency'].value_counts()[:20]\nplt.figure(figsize=(8, 8))\nax = sns.barplot(y=a.index, x=a.values, orient = 'h', palette = sns.cubehelix_palette(len(a)))\nplt.title(\"Top-10 Police Departments by Killings\");\nplt.xlabel(\"No. of Killings\");\n# plt.xticks(rotation= 45)\n","9f016afc":"a = df['raceethnicity'].value_counts()[:20]\nplt.figure(figsize=(8, 8))\nax = sns.barplot(y=a.index, x=a.values, orient = 'h', palette = sns.cubehelix_palette(len(a)))\nplt.title(\"Ethinicities ordered by Deaths\");\nplt.xlabel(\"No. of Killings\");\n# plt.xticks(rotation= 45)\n","da122789":"a = df['cause'].value_counts()[:20]\nplt.figure(figsize=(8, 8))\nax = sns.barplot(y=a.index, x=a.values, orient = 'h', palette = sns.cubehelix_palette(len(a)))\nplt.title(\"Top Causes which resulted in Death\");\nplt.xlabel(\"No. of Killings\");\n# plt.xticks(rotation= 45)\n","a5ad1af3":"a = df[['cause', 'raceethnicity']]\nplt.figure(figsize=(8, 8))\nax = sns.countplot(x=\"cause\", data=a, hue=\"raceethnicity\", palette = 'pastel')\nplt.title(\"Top Causes which resulted in Death\");\nplt.xlabel(\"No. of Killings\");","2591d5af":"logic = df['cause'] != \"Gunshot\"\na = df[logic][['cause', 'raceethnicity']]\nplt.figure(figsize=(8, 8))\nax = sns.countplot(x=\"cause\", data=a, hue=\"raceethnicity\", palette='pastel')\nplt.title(\"Top Causes which resulted in Death\");\nplt.xlabel(\"No. of Killings\");","dd6ea0e5":"b = df.groupby(['state', 'city', 'lawenforcementagency'])['pop'].sum()\nb = b.sort_values(ascending=False)[:10]\nb","ca32fc8b":"b = df.groupby(['state', 'city', 'tract_ce'])['tract_ce'].count()\nb = b.sort_values(ascending=False)[:10]\nb","1a78c1aa":"b = df.groupby(['lawenforcementagency', 'tract_ce'])['tract_ce'].count()\nb = b.sort_values(ascending=False)[:10]\nb","086ba90d":"a = df.groupby(['state', 'city', 'lawenforcementagency', 'tract_ce'])['lawenforcementagency'].count()\na = pd.DataFrame(a)\na\n\nb = df.groupby(['state', 'city', 'lawenforcementagency', 'tract_ce'])['pop'].mean()\nb = pd.DataFrame(b)\nb\n\nc = pd.concat([a, b], axis=1, join=\"inner\")\nc.rename(columns = {'lawenforcementagency':'count', 'pop':'popPerDeath'}, inplace=True)\nc.sort_values(['count'], ascending = False)[:10]","bc49ab1c":"a = df['share_white'][0]\ntype(a)","fabd4ef2":"# creating an example dataframe\ndf2 = pd.DataFrame({\"item\": [\"a\", \"b\", \"c\", \"d\", \"e\"],\n                      \"a\": [1,2,3,\"bad\",5],\n                     \"b\":[0.1,0.2,0.3,0.4,0.5]})\n\ndata_columns = ['a', 'b']\ndf2\n\n","808136b6":"df2.drop(data_columns, axis=1)","20149f37":"# applying numeric method on the other copy of the same dataframe\ndf2.apply(pd.to_numeric, errors='coerce')\n\n","27ba0c38":"# inner join between the two dataframes gives numeric values are generates NaN for non-numeric strings\nnum_df = (df2.drop(data_columns, axis=1).join(df2[data_columns].apply(pd.to_numeric, errors='coerce')))\nnum_df","a01e1595":"data_columns = ['share_white', 'share_black', 'share_hispanic', 'p_income']\ndf[data_columns].dtypes","50ab9ca2":"num_df = (df.reset_index().drop(data_columns, axis=1).join(df[data_columns].apply(pd.to_numeric, errors='coerce')))\nnum_df[data_columns].dtypes","a36637b3":"a = num_df.groupby(['state', 'city', 'lawenforcementagency', 'tract_ce'])['lawenforcementagency'].count()\na = a.sort_values(ascending=False)\na = pd.DataFrame(a)\n# a\n\nb = num_df.groupby(['state', 'city', 'lawenforcementagency', 'tract_ce'])['pop'].mean()\nb = pd.DataFrame(b)\nb\n\nc = num_df.groupby(['state', 'city', 'lawenforcementagency', 'tract_ce'])[['share_white']].mean()\nc = pd.DataFrame(c)\nc\n\nd = pd.concat([a, b, c], axis=1, join=\"inner\")\nd.rename(columns = {'lawenforcementagency':'count', 'pop':'popPerDeath'}, inplace=True)\nd.sort_values(['count'], ascending = False)[:10]\nd","dd9f92cd":"# we can filter pop=0 in the previous created dataframe 'd'\nlogic = d['count']>=1\nd[logic].sort_values(by='popPerDeath', ascending=True)[:10]\n","a54b7f9e":"logic = df['pop']==0\ncols = ['state','city','lawenforcementagency','tract_ce']\ndf[logic][cols]","9b38d66b":"logic = df['pop']==0\ncols = [ 'cause', 'armed']\ndf[logic][cols]","23fc4421":"# df['tract_ce'].value_counts()\na = num_df.groupby(['tract_ce'])['tract_ce'].count()\na = pd.DataFrame(a)\n\nb = num_df.groupby(['tract_ce'])['pop'].mean()\nb = b.apply(lambda x: round(x, 1))\nb = pd.DataFrame(b)\n\nc = num_df.groupby(['tract_ce'])['share_white'].mean()\nc = c.apply(lambda x: round(x, 1))\nc = pd.DataFrame(c)\n\nd = num_df.groupby(['tract_ce'])['share_black'].mean()\nd = d.apply(lambda x: round(x, 1))\nd = pd.DataFrame(d)\n\ne = num_df.groupby(['tract_ce'])['share_hispanic'].mean()\ne = e.apply(lambda x: round(x, 1))\ne = pd.DataFrame(e)\n\nf = pd.concat([a, b, c, d, e], axis=1, join=\"inner\")\nf.rename(columns = {'tract_ce':'count'}, inplace=True)\n# e.sort_values(['count'], ascending = False)[:10]\nf","95b322aa":"fig,ax1 = plt.subplots(figsize =(20,10))\nsns.scatterplot(x='pop',y='share_black',data=f,color='blue',alpha=0.6, size='count')\nsns.regplot(data=f, x=\"pop\", y=\"share_black\", scatter=False, ax=ax1)\n\n# sns.pointplot(x='area_list',y='area_highschool_ratio',data=data,color='red',alpha=0.8)\n# plt.text(40,0.6,'Population per death vs share of black population accross Tracts',color='red',fontsize = 17,style = 'italic')\n# plt.text(40,0.55,'poverty ratio',color='lime',fontsize = 18,style = 'italic')\n\nplt.xlabel('Population per Death',fontsize = 15,color='blue')\nplt.ylabel('Share of black population',fontsize = 15,color='blue')\nplt.title('Population per death vs share of black population across Tracts',fontsize = 20,color='blue')\nplt.xlim((0, 16000))\nplt.ylim((-5, 110))","e1d3f089":"fig,ax1 = plt.subplots(figsize =(20,10))\nsns.scatterplot(x='pop',y='share_white',data=f,color='blue',alpha=0.4, size='count')\nsns.regplot(data=f, x=\"pop\", y=\"share_white\", scatter=False, ax=ax1)\n\n# sns.pointplot(x='area_list',y='area_highschool_ratio',data=data,color='red',alpha=0.8)\n# plt.text(40,0.6,'Population per death vs share of black population accross Tracts',color='red',fontsize = 17,style = 'italic')\n# plt.text(40,0.55,'poverty ratio',color='lime',fontsize = 18,style = 'italic')\n\nplt.xlabel('Population per Death',fontsize = 15,color='blue')\nplt.ylabel('Share of white population',fontsize = 15,color='blue')\nplt.title('Population per death vs share of white population across Tracts',fontsize = 20,color='blue')\n# plt.xlim((0, 16000))\n# plt.ylim((-5, 110))","3125f2e8":"fig,ax1 = plt.subplots(figsize =(20,10))\nsns.scatterplot(x='pop',y='share_hispanic',data=f,color='blue',alpha=0.4, size='count')\nsns.regplot(data=f, x=\"pop\", y=\"share_hispanic\", scatter=False, ax=ax1)\n\n# sns.pointplot(x='area_list',y='area_highschool_ratio',data=data,color='red',alpha=0.8)\n# plt.text(40,0.6,'Population per death vs share of black population accross Tracts',color='red',fontsize = 17,style = 'italic')\n# plt.text(40,0.55,'poverty ratio',color='lime',fontsize = 18,style = 'italic')\n\nplt.xlabel('Population per Death',fontsize = 15,color='blue')\nplt.ylabel('Share of hispanic population',fontsize = 15,color='blue')\nplt.title('Population per death vs share of hispanic population across Tracts',fontsize = 20,color='blue')\n# plt.xlim((0, 16000))\n# plt.ylim((-5, 110))","1254959f":"a = df.groupby(['state', 'city', 'lawenforcementagency'])['lawenforcementagency'].count()\na = pd.DataFrame(a)\na\n\nb = df.groupby(['state', 'city', 'lawenforcementagency'])['pop'].mean()\nb = pd.DataFrame(b)\nb\n\nc = pd.concat([a, b], axis=1, join=\"inner\")\nc.rename(columns = {'lawenforcementagency':'count', 'pop':'popPerDeath'}, inplace=True)\nc.sort_values(['count'], ascending = False)[:10]","639ab5c3":"# rough, to verify groupby is doing what I believe it is doing\nlogic  = df['city'] == 'St Augustine'\nprint(df[logic]['pop'])\nprint(df[logic]['pop'].sum())","c9184f68":"df['armed'].value_counts()","40f07692":"df['cause'].value_counts()","be91bf2e":"a = df.groupby(['armed', 'cause'])['cause'].count()\n# type(a)\na.sort_values(ascending=False)\n","fe24a498":"df[['city', 'pop']]","dca6c26b":"df['city'].value_counts()","f2616839":"logic = df['city'] == 'Los Angeles'\ndf[logic]['pop']","9c8934b2":"df.columns","ae1cc5df":"cols = ['name', 'city', 'cause', 'pop']\ndf[cols]\ndf['city'].value_counts()","2f208894":"a = df.groupby(['city', 'tract_ce'])['tract_ce'].count()\na.sort_values(ascending=False)","26587d67":"# **Importing files**","a8ce57dc":"If we check the  'cause', 'armed' variable for this data, we check that one of the 'armed' variables is ","bbf208d7":"How many recorded deaths are in this data source?\n\nWe can quickly see the dimensions of the dataframe using the 'shape' option.","7854a990":"**Quick and dirty analysis**\n\nQuick analysis to see what sort of data we are working on. This will help us create useful insights in later versions of the notebook. After each step, we can write any random idea to explore.","6060fd74":"# **Using Tract in Analysis**","06d62fd4":"If the **popPerDeath value is high**, this means there are ***fewer deaths in a given 'pop' value***. Another way of interpreting this graph is: *if you are either white or hispanic, you are 'safer' in your own communities rather than the black people in their communities.*\n\nUsing data we proved that ***death rate due to police killings is disproportionately distributed between white, hispanic and black communities.***","6d72030f":"Using 'value_counts()' to see the distribution of top-10 law enforecement agencies with highest records for police killing","a1bcd766":"# Death in a tract with no population? Checking data validity","91f722a8":"We see that LA had the most number of deaths followed by Phoenix and Indianopolis. ","58035f46":"# **Basic Visualisation to get a feel of the data**","e8b67dd3":"Zooming in on the smaller parts of the bar plot:","3644bd7d":"* Killings per capita? ( can join an external data soure to see which city performs bad in terms of polic killing\/ population ratio)\n* read meaning of tract - there is internal data reagding population of a region of land\n* Search for correlation between being armed and having shot\/ tasered?\n* boxplot\/ IQR analysis of popPerDeath, this can also give better insights of outliers in the data\n* general stats of armed + causes in a simple visual data will enhance the look of the report","a43ce214":"We see it is the same with law enforcement agencies.","cb2118f6":"This is interesting as we have a recorded police killing but have not pop variable for this data point. We can check this data by filtering for 'pop'=0 in the dataframe.","d07f9c55":"The columns which do not have numeric entries are 'share_white', 'share_black', 'share_hispanic', 'p_income'","eee90142":"Let us quickly have a quick look at the columns","d3189478":"As said before, the single line of code is not very readable. Hence, I created a step-by-step example of the dataframe as it is a good reference for the future","092ca071":"please note: this is a (very) rough draft of the report. I am currently exploring ideas and doing a very quick\/ dirty analysis. I expect to have proper report after 5-6 versions of the file. Till then feel free to suggest ideas for various analysis and do question my approach in the comments. I believe a proper feedback is crucial to develop my analysis skills","eb2a5d26":"# Converting non-numeric to numeric","bbc91cb6":"We need to check if this part of the data is correct, but this is the case for just 2 instances. So probably can put this on a lower priority in our analysis","130eb36d":"There is an encoding issue with the data, we need to specify \"ISO-8859-1\" as an argument for read_csv.","e9ad3362":"We see that 'share_white' is not a numeric field, hence we will convert this into a numeric field. I found the solution over [here](https:\/\/stackoverflow.com\/questions\/15891038\/change-column-type-in-pandas). The basic idea is to apply 'to_numeric()' over series and join on the indices. I found the single line of code quite unreadable, so decided to test it out step by step:","59977383":"The data is too scattered to derive useful information. But we can see that the popPerDeath variable is **negatively correlated** with share of black population accross different tracts. We can take a step back to absorb what this data is trying to tell. \n\nThe popPerDeath is lower for larger values of black populations. popPerDeath is the mean of 'pop' variable. Hence, ***a lower value of poPerDeath indicates more deaths in a given tract population*** (since pop divided by a large number becomes smaller). And this value is quite higher in communities with larger black population share.\n\nThis is **contrasting to the results of white and hispanic populations** which are plotted below:","d3751b52":"Can a city have multiple tracts in it?lawenforcementagency","bcad120a":"We can also use 'value_counts' method to count categorical values inside a Pandas Series object.\n\nThis was we can find the distribution of Male vs Female victims:","9819d3dd":"ideas: correlation between race and chances of being killed by police\n","e4b7fb6b":"**Analysis Ideas for next versions**","edaee666":"# Plotting share of different ethinicities against popPerDeath variable","af3eca38":"But the number of deaths itself will not give us a clearer picture, we need something similar to death per capita from the data. This term can be used as a KPI to understand which city or 'tract' has a bad record of having high number of police killings in comparison to the number of people living there. In this regard, we have the 'pop' variable in the data. This refers to the population in a 'tract'.","2f2b87b7":"We are already getting much more insights than the mere total deaths per city. Using 'count' (number of deaths) and 'popPerDeath', we can say the deadliest regions would be Garland, Phoenix and Ridgefield park.\n\nWe can explore further by filtering for atleast than 1 killing and sorting on the popPerDeath variable.Before we do that, we can see that 'share_white' does not contain numeric values:","6e5577ee":"Contents:\n* [Importing files](#1)\n* [Basic Visualisation](#2)\n* [Using Tract in Analysis](#3)\n* [Converting key columns into numeric data](#4)\n* [Data validity: deaths in tract with no pop](#5)\n* [Scatterplot of different ethinicities](#6)\n\n    ","0b287cd8":" A quick google search for 'tract' led me to this answer: A tract is a geographical term for dividing the area into smaller plots. This is quite useful as we can find average number of deaths per tract.\n \nI achieve this by joining 2 dataframes. The first one (variable a) counts the number of deaths and has 'state', 'city', 'lawenforcementagency', 'tract_ce' as index. \n\nThe second dataframe (variable b) has same indices but calculates the mean value of 'pop'. The mean value of 'pop' can also be read as popPerDeath, as this is the mathematical equivalent of what the numbers are trying to represent.","760f0b65":"we see that a city has **at most 2 tracts**, let us check the same for law enforcement agencies:"}}