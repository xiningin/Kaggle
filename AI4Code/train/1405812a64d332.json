{"cell_type":{"a3dd94d8":"code","8b8d851d":"code","009a2c1e":"code","d3434d46":"code","457c11ad":"code","d23a9e00":"code","fe7b23f7":"code","d86cd679":"code","db9ef8c9":"code","26e52c18":"code","18c958e4":"code","2698890f":"code","0e782027":"code","dcdb51be":"code","d393324d":"code","29a53993":"code","9a0ebab8":"code","ec52c4c8":"code","45a8d804":"markdown","cbc43c88":"markdown","08fb7d0f":"markdown","83d68db4":"markdown","40f3aafa":"markdown","64e26336":"markdown","2de6ea54":"markdown","420636a9":"markdown","50991fcb":"markdown"},"source":{"a3dd94d8":"import numpy as np\nimport matplotlib.pyplot as plt\nimport matplotlib.patches as mpatches\nimport pandas as pd\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.preprocessing import LabelEncoder\nimport csv\nfrom sklearn.metrics import confusion_matrix\nimport seaborn as sns\nfrom sklearn.metrics import precision_recall_curve\nfrom sklearn.metrics import precision_score\nfrom sklearn.metrics import recall_score\nfrom sklearn.metrics import classification_report\n%matplotlib inline","8b8d851d":"data = pd.read_csv('..\/input\/chronic-kidney-disease\/new_model.csv')\ndata.head()","009a2c1e":"data.describe()","d3434d46":"data.info()","457c11ad":"corr=data.corr()\ntop_co=corr.index\nplt.figure(figsize=(20,20))\ng=sns.heatmap(data[top_co].corr(),annot=True,cmap=\"RdYlGn\")","d23a9e00":"x = data.drop(['Class'],axis=1)\ny = data['Class']\nlab_enc=LabelEncoder()\ny=lab_enc.fit_transform(y)","fe7b23f7":"from sklearn.ensemble import RandomForestClassifier\nX_train, X_test, Y_train, Y_test = train_test_split(x, y, test_size=0.3, random_state=1)","d86cd679":"clf=RandomForestClassifier(n_estimators=100)\n\n#Train the model using the training sets\nclf.fit(X_train,Y_train)\n\ny_predi=clf.predict(X_test)","db9ef8c9":"from sklearn.metrics import accuracy_score\nprint(\"Accuracy on training dataset:{:.1f}\".format(clf.score(X_train,Y_train)))\nprint(\"Accuracy on testing dataset:{:.1f}\".format(accuracy_score(Y_test, y_predi)))","26e52c18":"c=pd.DataFrame(\n    confusion_matrix(Y_test, y_predi),columns=['Predicted:0', 'Predicted:1'],\n    index=['Actual:0', 'Actual:1']\n)\nax= plt.subplot()\nsns.heatmap(c, annot=True, ax = ax); #annot=True to annotate cells\n# labels, title and ticks\nax.set_xlabel('Predicted labels');ax.set_ylabel('True labels'); \nax.set_title('Confusion Matrix'); \nax.xaxis.set_ticklabels(['0', '1']); ax.yaxis.set_ticklabels(['0', '1']);","18c958e4":"cr=classification_report(Y_test,y_predi)\nprint(cr)","2698890f":"newdf = pd.DataFrame({'Actual': Y_test, 'Predicted':y_predi})\nnewdf","0e782027":"df1 = newdf\ndf1.plot(kind='bar',figsize=(20,6))\nplt.grid(which='major', linestyle='--', linewidth='1.5', color='green')\nplt.grid(which='minor', linestyle=':', linewidth='0.5', color='black')\nplt.show()","dcdb51be":"rrc=recall_score(Y_test, y_predi)","d393324d":"rps=precision_score(Y_test, y_predi)\nrps","29a53993":"from sklearn.metrics import f1_score\nrfs=f1_score(Y_test,y_predi)\nrfs","9a0ebab8":"from sklearn.metrics import average_precision_score\nfrom inspect import signature","ec52c4c8":"precision, recall, threshold = precision_recall_curve(Y_test, y_predi)\naverage_precision = average_precision_score(Y_test, y_predi)\nstep_kwargs = ({'step': 'post'} if 'step' in signature(plt.fill_between).parameters else {})\nplt.step(recall, precision, color='r', alpha=0.2, where='post')\nplt.fill_between(recall, precision, alpha=0.2, color='r', **step_kwargs)\nplt.xlabel('Recall')\nplt.ylabel('Precision')\nplt.ylim([0.0, 1.0])\nplt.xlim([0.0, 1.0])\nplt.title('2-class Precision-Recall curve: AP={0:0.2f}'.format(average_precision))","45a8d804":"Confusion matrix & Report","cbc43c88":"# RandomForestClassifier","08fb7d0f":"# model Creation","83d68db4":"# training of data","40f3aafa":"# recall, precision, F1-sccore","64e26336":"# creating visuals for actual vs predicted","2de6ea54":"# checking Accuracy","420636a9":"For RealTime View visit this website\n(http:\/\/ckd1.herokuapp.com\/)","50991fcb":"# creating dependent and independent"}}