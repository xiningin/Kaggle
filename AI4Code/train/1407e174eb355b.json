{"cell_type":{"b204c488":"code","131cd2b0":"code","42a2f744":"code","378626ab":"code","39596db0":"code","45800dc4":"code","0b4a2198":"code","14630b2b":"code","7415ab3a":"code","24b2405d":"code","266ed19c":"code","60fde7ec":"code","08d0ff21":"code","ffca4a1a":"code","61611766":"code","a73f9ee4":"code","2c45f679":"code","a6df781d":"code","2451000b":"code","0cff95e5":"code","81df21dd":"code","c64653c1":"code","d9a586b8":"code","321fb251":"code","82b0b8d8":"code","fc38faa2":"code","93355975":"code","14eaa27f":"code","2d6607c0":"code","36ae1ae7":"code","33bea27d":"code","376019c2":"code","ee5619cd":"code","570a2b7d":"code","d884bb58":"code","0761de4b":"code","0a02bb62":"markdown","2ea0ac60":"markdown","fdfe0fee":"markdown","5ceaf1c4":"markdown","e498d726":"markdown","1c5101cc":"markdown","3f4988f7":"markdown","9c4e407a":"markdown"},"source":{"b204c488":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","131cd2b0":"from keras.models import Sequential\nfrom keras.layers import Dense, Dropout\nfrom keras.wrappers.scikit_learn import KerasClassifier\nfrom sklearn.model_selection import cross_val_score\nfrom sklearn.model_selection import StratifiedKFold\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.pipeline import make_pipeline\nfrom sklearn.preprocessing import OneHotEncoder, LabelEncoder\nfrom sklearn.compose import make_column_transformer\nfrom IPython.display import SVG\nfrom keras.utils import model_to_dot\nfrom keras.models import load_model\nimport regex as re","42a2f744":"titanic_train = pd.read_csv('..\/input\/titanic\/train.csv', dtype =  {'Age':np.float64})\ntitanic_test = pd.read_csv('..\/input\/titanic\/test.csv', dtype =  {'Age':np.float64})","378626ab":"titanic_train.head()","39596db0":"titanic_train.shape","45800dc4":"titanic_train.describe()","0b4a2198":"# finding the number of null values in a column. If the number excedes 50% of the total number of entries then drop the column\ntitanic_train.isnull().sum()","14630b2b":"for cols in titanic_train.columns:\n    print(str(cols)+\": \"+str(len(titanic_train[cols].unique())))","7415ab3a":"def find_title(name):\n    word = [w for w in name.split(' ') if w.endswith('.')]\n    return word[0]\ntitanic_train['Name'] = titanic_train['Name'].apply(find_title)   \ntitanic_train.head()","24b2405d":"titanic_train =titanic_train.drop(['Ticket','Cabin'],axis=1)\ntitanic_train","266ed19c":"pd.crosstab(titanic_train['Name'], titanic_train['Sex'])","60fde7ec":"# Since a mjority of the names are denoting Male or Female which is already covered by the 'Sex' colunm in the dataset. Therefore droping the 'Name' column makes sense\ntitanic_train.drop(columns=['Name'], axis=1)","08d0ff21":"def getNumber(str):\n    if str==\"male\":\n        return 0\n    else:\n        return 1\ntitanic_train[\"Sex\"]=titanic_train[\"Sex\"].apply(getNumber)\ntitanic_train","ffca4a1a":"meanS= titanic_train[titanic_train.Survived==1].Age.mean()\nprint(meanS)\n\nmeanNS=titanic_train[titanic_train.Survived==0].Age.mean()\nprint(meanNS)","61611766":"#Replacing all null values in Age with the mean value of the column\ntitanic_train[\"Age\"]=np.where(pd.isnull(titanic_train.Age) & titanic_train[\"Survived\"]==1  ,meanS, titanic_train[\"Age\"])\ntitanic_train.Age.fillna(meanNS,inplace=True)\ntitanic_train.head()","a73f9ee4":"titanic_train.dropna(inplace=True)\ntitanic_train.isnull().sum()","2c45f679":"from sklearn.preprocessing import OneHotEncoder\n\ndata_encoded=titanic_train.copy()\nenc = OneHotEncoder(handle_unknown='error')\nenc_df = pd.DataFrame(enc.fit_transform(data_encoded[['Embarked']]).toarray())\nenc_df","a6df781d":"enc_df.isna().sum()","2451000b":"data_encoded = data_encoded.merge(enc_df, left_index=True, right_index=True, how='inner')\ndata_encoded","0cff95e5":"from sklearn.preprocessing import StandardScaler\nscaler = StandardScaler()\nfeatures = data_encoded[['Fare','Age']]\nfeatures = scaler.fit_transform(features)\nscaled_df_encoded = data_encoded.copy()\nscaled_df_encoded[['Fare','Age']] = features\nscaled_df_encoded","81df21dd":"scaled_df_encoded.isnull().sum()","c64653c1":"target = pd.DataFrame(scaled_df_encoded['Survived'])\nscaled_df_encoded=scaled_df_encoded.drop(columns=['PassengerId','Name','Embarked','Survived'])\nscaled_df_encoded.shape","d9a586b8":"def create_model():\n    model = Sequential()\n    model.add(Dense(100, input_dim=9, activation='relu'))\n    model.add(Dropout(0.2))\n    model.add(Dense(25, activation='relu'))\n    model.add(Dropout(0.2))\n    model.add(Dense(50, activation='relu'))\n    model.add(Dense(1, activation='sigmoid'))\n    model.compile(loss='binary_crossentropy', optimizer='adam', metrics=['accuracy'])\n    return model\n\n\npipe = make_pipeline(KerasClassifier(build_fn=create_model, epochs=1000, batch_size=5, verbose=0))\npipe.fit(scaled_df_encoded, target)","321fb251":"from sklearn.ensemble import RandomForestClassifier\n\nRF_model=RandomForestClassifier(n_estimators=100,random_state=1)\nRF_model.fit(scaled_df_encoded, target)","82b0b8d8":"titanic_test['Name'] = titanic_test['Name'].apply(find_title)   \ntitanic_test.head()","fc38faa2":"test_copy=titanic_test.copy()\ntitanic_test  = titanic_test.drop(columns=['Cabin','PassengerId','Ticket','Name'], axis=1)\ntitanic_test[\"Sex\"]=titanic_test[\"Sex\"].apply(getNumber)\ntitanic_test","93355975":"titanic_enc = pd.DataFrame(enc.transform(data_encoded[['Embarked']]).toarray())\ntitanic_test = titanic_test.join(titanic_enc)\ntitanic_test","14eaa27f":"titanic_test=titanic_test.drop('Embarked', axis=1)","2d6607c0":"features = titanic_test[['Fare','Age']]\nfeatures = scaler.transform(features)\ntitanic_test[['Fare','Age']] = features\ntitanic_test","36ae1ae7":"mean= titanic_test.Age.mean()\ntitanic_test[\"Age\"]=np.where(pd.isnull(titanic_test.Age),mean, titanic_test[\"Age\"])\ntitanic_test.Age.fillna(mean,inplace=True)\nprint(mean)","33bea27d":"titanic_test","376019c2":"mean= titanic_test.Fare.mean()\ntitanic_test['Fare']=np.where(pd.isnull(titanic_test.Fare),mean, titanic_test[\"Fare\"])\ntitanic_test.isna().sum()","ee5619cd":"titanic_test.shape","570a2b7d":"ann_pred = pipe.predict(titanic_test.values)\n# ann_pred","d884bb58":"random_forest_pred = RF_model.predict(titanic_test)\n# print(random_forest_pred)","0761de4b":"pred = pd.DataFrame(random_forest_pred)\nsub_df = pd.read_csv(\"..\/input\/titanic\/gender_submission.csv\")\ndatasets = pd.concat([sub_df['PassengerId'],pred],axis=1)\ndatasets.columns = ['PassengerId','Survived']\ndatasets.to_csv('final.csv',index=False)","0a02bb62":"## Step 1: Data Preprocessing\nIn this section the major aim is to replace any missing values and retain only features with the most information gain.","2ea0ac60":"### Scaling data\nMost of the times, your dataset will contain features highly varying in magnitudes, units and range. But since, most of the machine learning algorithms use Eucledian distance between two data points in their computations, this is a problem.\n\nIf left alone, these algorithms only take in the magnitude of features neglecting the units. The results would vary greatly between different units, 5kg and 5000gms. The features with high magnitudes will weigh in a lot more in the distance calculations than features with low magnitudes.\n\nTo supress this effect, we need to bring all features to the same level of magnitudes. This can be acheived by scaling.","fdfe0fee":"## Step 2: Training the Model","5ceaf1c4":"## Step 3: Predicting Target using Test Data","e498d726":"### One Hot Encoding\n\nThis step converts the categorical data into nominal data.","1c5101cc":"### ANN","3f4988f7":"### Processing Test Data","9c4e407a":"### Random Forest Classifier"}}