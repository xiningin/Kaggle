{"cell_type":{"98f3ef3e":"code","9684c606":"code","0a02238d":"code","f5aff525":"code","32203ea6":"code","92ff2a36":"code","b923bb07":"code","cef78c12":"code","8189b3da":"code","6b87305f":"code","c45124dd":"code","4027edda":"code","60a372fd":"code","c01e929d":"code","ff6847ab":"code","a91f9b7f":"code","cde72fb1":"code","b442419c":"code","6f73cfb9":"code","c0bc35ed":"code","a3b54a08":"code","bb697520":"code","ba23f0e8":"code","27add05f":"code","cc43e8e3":"markdown","484cb730":"markdown","5183258b":"markdown","11fb5065":"markdown","db5017e8":"markdown","5251e124":"markdown"},"source":{"98f3ef3e":"import pandas as pd\nimport matplotlib.pyplot as plt\nimport datetime\nimport requests\nimport io\n\nfrom pylab import rcParams\n\nrcParams['figure.figsize'] = 10,10 #makes our plots bigger!\n","9684c606":"# Reading data from an API\n# Need to read the API documentation for the base url and request parameters\n# Set up some parameters\n\nbase_url = 'http:\/\/uoweb3.ncl.ac.uk\/api\/v1.1\/sensors\/data\/csv\/'\n\nstart_date = datetime.datetime(2020, 10, 25, 0, 0, 0)\nend_date = datetime.datetime(2020, 10, 27, 0, 0, 0)\n\ndt_format = \"%Y%m%d%H%M%S\"\n\nstart_date = start_date.strftime(dt_format)\nend_date = end_date.strftime(dt_format)\n\nparams = {\n            'starttime': (start_date),\n            'endtime': (end_date),\n            'data_variable': 'Sound',\n        }\nprint(base_url)\nprint(params)\nprint(start_date, end_date)\n","0a02238d":"# Read the data from the API\n# Store it in a dataframe\nr = requests.get(base_url,params)   \ndf = pd.read_csv(io.StringIO(r.content.decode('utf-8')))\nprint('done')","f5aff525":"# check the contents of the dataframe\n# Top rows (nb also df.tail(10))\ndisplay(df.head(10))","32203ea6":"#List of columns\n\ndisplay(df.columns)","92ff2a36":"# Rows and columns\ndf.shape","b923bb07":"# Summary statistics\ndisplay(df.describe())","cef78c12":"# Column data types\ndf.info()","8189b3da":"print(df.index.name)","6b87305f":"# set the index to be the timestamp\ndf['Timestamp'] = pd.to_datetime(df['Timestamp'])\ndf = df.set_index(df['Timestamp'])\nprint(df.index.name)","c45124dd":"#min and max of index\nprint(df.index.min(), df.index.max())","4027edda":"# accessing data\ndisplay(df.Value.head(10))","60a372fd":"display(df['Value'].head(10))","c01e929d":"print(df['Value'][0])\nprint(df['Value'][1])\nprint(df['Value'][1237])","ff6847ab":"print(df.columns)","a91f9b7f":"df2 = df.copy()","cde72fb1":"df = df.drop(['Flagged as Suspect Reading'], axis=1) #axis 1 = columns, 0 = rows","b442419c":"df = df.drop(['Location (WKT)', 'Broker Name', 'Raw ID', 'Variable', \n         'Third Party', 'Sensor Height Above Ground'], axis=1)\ndisplay(df.head(5))","6f73cfb9":"df = df.rename(columns={\"Sensor Centroid Longitude\": \"Lon\", \n                   \"Sensor Centroid Latitude\": \"Lat\", \"Ground Height Above Sea Level\" : 'height' })\ndisplay(df.head(5))","c0bc35ed":"df.plot(y='Value') #Plot the Value against the index","a3b54a08":"#Number of readings per sensor\ndisplay(df.groupby('Sensor Name')['Timestamp'].nunique())","bb697520":"#Plotting number of readings per sensor\ndisplay(df.groupby('Sensor Name')['Timestamp'].nunique().describe())\ndf.groupby('Sensor Name')['Timestamp'].nunique().plot(kind='bar')","ba23f0e8":"df.groupby('Sensor Name')['Value'].plot()","27add05f":"#Save the file for later - download it and then we will add as dataset to the next notebook\n\ndf.to_csv('.\/noise.csv', index=False)","cc43e8e3":"# [nunique function explained](https:\/\/pandas.pydata.org\/pandas-docs\/stable\/reference\/api\/pandas.DataFrame.nunique.html)","484cb730":"# Time series data and APIs\n* Pandas\n* Loading data from an API\n  * requests\n  * params\n* Loading data from csv file\n* Dataframe basics\n   * indexes\n   * viewing\n   * columns\n   * stats\n   * accessing data\n   * adding or removing columns\n* Save dataframe to CSV for next time! (end here part 1)\n* Subsets of data, selecting data from dataframe, with conditions\n* Timeslicing\n* Visualising time-series data, plotting\n* plotly interactive plots","5183258b":"Next time we will tidy this data up to show it more clearly and remove outliers etc.","11fb5065":"# Follow on work\n* Download the \"NO2\" data for the same period, examine it, plot it and save it to a file NO2. csv\n* Download the \"Plates In\" data for the same period (ANPR camera data of traffic counts) and save it to ANPR.csv","db5017e8":"# You need to enable internet access to use this notebook - in settings on the right\n\n![image.png](attachment:image.png)\n","5251e124":"# [Urban Observatory API Docs](https:\/\/newcastle.urbanobservatory.ac.uk\/api_docs\/)"}}