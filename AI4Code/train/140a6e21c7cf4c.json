{"cell_type":{"be154092":"code","5bb36fd5":"code","25baa7ca":"code","d3638dad":"code","1e9f3d6b":"code","9f57ab0b":"code","bb391713":"code","84b43470":"code","8b95bbc0":"code","8e7e7db1":"code","e70f93c4":"code","1b8f2cdc":"markdown","a7bb988a":"markdown","23e93cbf":"markdown","f452111b":"markdown","a5787d8f":"markdown","6eeebbb4":"markdown","72d2632a":"markdown","35dc4987":"markdown","63872678":"markdown","871bd911":"markdown","97348d89":"markdown"},"source":{"be154092":"\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","5bb36fd5":"train_data = pd.read_csv(\"\/kaggle\/input\/titanic\/train.csv\")\ntest_data = pd.read_csv(\"\/kaggle\/input\/titanic\/test.csv\")","25baa7ca":"train_data.head()","d3638dad":"test_data.head()","1e9f3d6b":"# This separates the women into their own categories.\nwomen = train_data.loc[train_data.Sex == 'female'][\"Survived\"]\n\n# This divides the surviving women by the total amount to get the percent of who survived.\nrate_women = sum(women)\/len(women)\n\n# This separates the men into their own categories.\nmen = train_data.loc[train_data.Sex == 'male'][\"Survived\"]\n\n# This divides the surviving men by the total amount to get the percent of who survived.\nrate_men = sum(men)\/len(men)\n\n# This prints out both the men and women who survived.\nprint(\"% of women who survived:\", rate_women)\nprint(\"% of men who survived:\", rate_men)","9f57ab0b":"# Check for missing data\nmissingDataTrain = train_data.isna().sum()\nprint(missingDataTrain)","bb391713":"# Adding median values to the 'Age' category.\ntrain_data['Age'].fillna(train_data['Age'].median(), inplace=True)\ntest_data['Age'].fillna(test_data['Age'].median(), inplace=True)\n\n# Adding median values to the 'Fare' category.\ntrain_data['Fare'].fillna(train_data['Fare'].median(), inplace=True)\ntest_data['Fare'].fillna(test_data['Fare'].median(), inplace=True)","84b43470":"# I will add the survived passengers to the y variable.\ny = train_data['Survived']\n\n# I will start with just one feature, which will be the age.\nfeatures = ['Age']\n\n# I will add dummy passengers to the train and test variables.\nX = pd.get_dummies(train_data[features])\nX_test = pd.get_dummies(test_data[features])\n\n\n# 1.)\n# Here is the Linear Regression model....................................\n\n# Importing Linear Regression and assigning it to a variable called reg.\nfrom sklearn.linear_model import LinearRegression\nreg = LinearRegression()\n\n# Fitting (X,y) and scoring the accuracy.\nreg.fit(X,y)\nREG_acc = reg.score(X,y)\n\n#END of Linear Regression.................................................\n\n\n\n# 2.)\n# Here is the Nearest Neighbors model.....................................\n\n# Importing KNN and assiging it to a variable called knn.\nfrom sklearn.neighbors import KNeighborsClassifier\nknn = KNeighborsClassifier(n_neighbors = 6)\n\n# I will start with just trying the Age as a feature.\n\n# Here is where I will fit the KNN data.\nknn.fit(X,y)\n\n# This is the variable that will save the accuracy of the KNN.\nKNN_acc = knn.score(X,y)\n\n#END of Nearest Neighbor..................................................\n\n\n\n# 3.)\n# Here is the Decision Trees model........................................\n\n# Importing the DecisionTreeClassifier to a variable called tree.\nfrom sklearn.tree import DecisionTreeClassifier\ntree = DecisionTreeClassifier()\n\n# Here is where I will fit the DT data.\ntree.fit(X,y)\n\n# This is the variable that will save the accuracy of the DT.\nDT_acc = tree.score(X,y)\n\n# End of Decision Tree model..............................................\n\n\n\n# 4.)\n# Here is the SGD model....................................................\n\n# Importing the SGD to a variable called linear_classifier.\nfrom sklearn.linear_model import SGDClassifier\nlinear_classifier = SGDClassifier()\n\n# Here is where I will fit the SGD data.\nlinear_classifier.fit(X,y)\n\n# This is the variable that will save the accuracy of the SGD.\nSGD_acc = linear_classifier.score(X,y)\n\n#End of SGD model...........................................................","8b95bbc0":"print(\"The accuracy of the Linear Regression model: \", REG_acc)\nprint(\"The accuracy of the KNeighbors model: \", KNN_acc)\nprint(\"The accuracy of the Decision Tree model: \", DT_acc)\nprint(\"The accuracy of the SGDClassifier: \", SGD_acc)","8e7e7db1":"# I have tried a couple of different neighbor values and am determining that a smaller number \n# such as (1 - 3) is most accurate, 1 gets the best result.\nknn = KNeighborsClassifier(n_neighbors = 1)\n\ny = train_data['Survived']\n\n# I will try the AGE categor first................................................................\nfeatures = ['Age'] \nX = pd.get_dummies(train_data[features])\nX_test = pd.get_dummies(test_data[features])\n\n\nknn.fit(X,y)\npredictionKNC = knn.predict(X_test)\n\nKNN_acc_1 = knn.score(X,y)\nprint(\"The accuracy of the KNeighbors model: \", KNN_acc_1)\n\n# Now let's try the Sex category...................................................................\nfea = ['Sex'] \nX = pd.get_dummies(train_data[features])\nX_test = pd.get_dummies(test_data[features])\n\nknn.fit(X,y)\npredictionKNC = knn.predict(X_test)\n\nKNN_acc_2 = knn.score(X,y)\nprint(\"The accuracy of the KNeighbors model: \", KNN_acc_2)\n\n# I will try multiple features now with Age and Sex.................................................\nfeatures = ['Age','Sex'] \nX = pd.get_dummies(train_data[features])\nX_test = pd.get_dummies(test_data[features])\n\nknn.fit(X,y)\npredictionKNC = knn.predict(X_test)\n\nKNN_acc_3 = knn.score(X,y)\nprint(\"The accuracy of the KNeighbors model: \", KNN_acc_3)\n\n# I will add more features, I have tried different combinations, these 3 give me a great accuracy...\nfeatures = ['Pclass','Sex', 'Fare'] \nX = pd.get_dummies(train_data[features])\nX_test = pd.get_dummies(test_data[features])\n\nknn.fit(X,y)\npredictionKNC_Winner = knn.predict(X_test)\n\naccuracyKNN = knn.score(X,y)\nprint(\"The accuracy of the KNeighbors model: \", accuracyKNN)","e70f93c4":"output = pd.DataFrame({'PassengerId': test_data.PassengerId, 'Survived': predictionKNC_Winner})\noutput.to_csv('submission.csv', index=False)\nprint(\"Your submission was successfully saved!\")","1b8f2cdc":"# Here is where I evaluate the models\nI will print out the accuracy from what I have found from the basic trainings of the models.","a7bb988a":"# Now it is time to submit my work.\nI am using the format that was in the tutorial.","23e93cbf":"This code here was provided from the tutorial to retreive the three files relating to the competition.\nThese three files are:\n* gender_submission.csv\n* test.csv\n* train.csv","f452111b":"# Here is where the data is being loaded\n* I added the train.csv file to a variable called train_data.\n* I added the test.csv file to a variable called test_data.","a5787d8f":"# Here is where I will be building all four models.\nI am going to use the one specified, which include:\n* Linear Regression\n* Nearest Neighbors\n* Decision Trees\n* SGDClassifier","6eeebbb4":"It seems like the two more accurate models are KNN and Decision Tree.\n\nI know there is a lot I can add to all these models, especially my horrible Linear Regression model.\n\nI am going to add more to the **KNN** model for this HW 0.\n\n**I will try different combinations of the features to see if my accuracy improves.**","72d2632a":"It seems the features of **Pclass**, **Sex** and **Fare** created the most accuracy.\nI have saved the predictions under predictionKNC_Winner.\nI will submit these results since they are pretty good.","35dc4987":"# Here is where I will be doing some exploratory data analysis\n* I have called train_data.head() to print out the first 5 values of the dataframe.\n* I have also called test_data.head() to print out the first 5 values of the dataframe in a new cell.","63872678":"Ryan Kendrick\n\n9\/21\/2021\n\nCAP 4611\n\n# Titanic - Machine Learning from Disaster HW_0","871bd911":"This code shows the percent of men and women that survived using the **Sex** category. If the passenger's ['sex'] was equal to the female, it would save the passengers in new smaller dataframe labeled women, same for male.\n\nIt finds the rate of survival by dividing the sum, (1 means surived) divided by the total length of the sexes.","97348d89":"\n\nLater in my code, I noticed that the **Age**, **Cabin** and **Embarked** categories had NaN values. \n\nI also noticed I had to do the same to the **Fare** category to avoid errors in the model building.\n\n\nI have filled the Age and Fare categorues with the median() value from their categories.\n"}}