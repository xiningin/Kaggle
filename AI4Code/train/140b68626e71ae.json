{"cell_type":{"66d633b7":"code","dc96ea4d":"code","2599134a":"code","2ea36564":"code","69e9b9a3":"code","7ad076e5":"code","035cbc96":"code","051daa68":"code","ea17a4f0":"code","20b2940d":"code","ecdda474":"code","5e27c10f":"code","49268740":"code","94c9ed12":"code","21686a20":"code","ab6fd99e":"code","d92b45eb":"code","a4e4869b":"code","fa6fbe9c":"code","f6df6976":"code","43c6d5e8":"code","142d5ab9":"code","7b58f008":"code","32e14cc4":"code","504fb511":"code","a486fcfe":"code","8914050a":"code","f1bbb2f0":"code","63d13e26":"code","30252959":"code","92b09655":"code","afc0a088":"code","e2eac3c0":"code","da394cb6":"code","81b34613":"code","10806295":"code","adef80f8":"code","a32499ba":"code","43c5f061":"code","88ccdc86":"markdown","1612be59":"markdown","89aa6cd4":"markdown","dc6978c7":"markdown","5962578f":"markdown","60c8eb0f":"markdown","5986f034":"markdown","e9545191":"markdown","6aedc8da":"markdown","81ca76fe":"markdown","ad6f66eb":"markdown","659ba513":"markdown"},"source":{"66d633b7":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory\n\nfrom fastai.vision import *\nfrom fastai import *\n\n%reload_ext autoreload\n%autoreload 2\n%matplotlib inline\n\nimport os\nimport shutil\nimport torch\n\nrn_seed=1\nnp.random.seed(rn_seed)\n# Any results you write to the current directory are saved as output.","dc96ea4d":"train_path = Path('\/tmp\/train')\ntest_path = Path('\/tmp\/test')","2599134a":"root = Path('..\/input')","2ea36564":"id_lookup = pd.read_csv(root\/'IdLookupTable.csv')\n# try fillna median\n# train_csv = pd.read_csv(root\/'training\/training.csv').dropna(axis=0)\ntrain_csv = pd.read_csv(root\/'training\/training.csv')\ntest_csv = pd.read_csv(root\/'test\/test.csv')","69e9b9a3":"id_lookup.head()","7ad076e5":"for c in train_csv.columns:\n    if(train_csv[c].dtype!='object'):\n        train_csv[c]=train_csv[c].fillna(train_csv[c].median())","035cbc96":"train_csv.head()","051daa68":"train_csv.describe()","ea17a4f0":"test_csv.head()","20b2940d":"def save_str_img(strimg,w,h,flpath):\n    px=255-np.array(strimg.split(),dtype=int)\n    if(len(px)==w*h and len(px)%w==0 and len(px)%h==0):\n        cpx = list(px.reshape(w,h))\n        img = Image(Tensor([cpx,cpx,cpx]))\n        img.save(flpath)\n        return img\n    else:\n        raise Exception(\"Invalid height and width\")","ecdda474":"# make image folders\n# shutil.rmtree(train_path)\ntrain_path.mkdir(exist_ok=True)\ntest_path.mkdir(exist_ok=True)","5e27c10f":"# for each row\nfor index, train_row in train_csv.iterrows():\n    save_str_img(train_row.Image,96,96,train_path\/(str(index)+'.jpg'))","49268740":"# for each row\nfor index, test_row in test_csv.iterrows():\n    save_str_img(test_row.Image,96,96,test_path\/(str(index)+'.jpg'))","94c9ed12":"def get_locs(flname):\n    index = int(flname.name[:-4])\n    plist=[]\n    coords=list(train_csv.loc[index])\n    for i in range(len(coords)\/\/2):\n        plist.append([coords[i*2+1],coords[i*2]])\n    return tensor(plist)\n#     return tensor([coords[1],coords[0]])","21686a20":"# make points image data bunch\n# TODO remove transforms\ndata = (PointsItemList.from_folder(train_path)\n        .split_by_rand_pct(0.05,seed=rn_seed)\n        .label_from_func(get_locs)\n        .transform([],size=(96,96))\n        .databunch(num_workers=0)\n       )","ab6fd99e":"data.show_batch(3,figsize=(6,6))","d92b45eb":"# calculates distance between true and predictions\ndef mloss(y_true, y_pred):\n    y_true=y_true.view(-1,15,2)\n    \n    y_true[:,:,0]=y_true[:,:,0].clone()-y_pred[:,:,0]\n    y_true[:,:,1]=y_true[:,:,1].clone()-y_pred[:,:,1]\n    \n    y_true[:,:,0]=y_true[:,:,0].clone()**2\n    y_true[:,:,1]=y_true[:,:,1].clone()**2\n    \n    return y_true.sum(dim=2).sum(dim=1).sum()","a4e4869b":"learn = cnn_learner(data,models.resnet152,loss_func=mloss)","fa6fbe9c":"learn.fit_one_cycle(10)","f6df6976":"learn.show_results(rows=3,figsize=(6,6))","43c6d5e8":"learn.save('s1')","142d5ab9":"learn.load('s1');","7b58f008":"learn.unfreeze()","32e14cc4":"learn.lr_find()","504fb511":"learn.recorder.plot()","a486fcfe":"learn.fit_one_cycle(30,5e-5)","8914050a":"learn.show_results(rows=3,figsize=(6,6))","f1bbb2f0":"def flp(npa):\n    for i in range(npa.shape[0]):\n        if(i%2==1):\n            tmp=npa[i]\n            npa[i]=npa[i-1]\n            npa[i-1]=tmp\n    return npa","63d13e26":"def get_coords(imgpnts):\n    return ((imgpnts+1)*48).numpy()","30252959":"test_img = open_image(test_path\/'1600.jpg')\npred = learn.predict(test_img)\ntest_img.show(y=pred[0])","92b09655":"test_img = open_image(test_path\/'1600.jpg')\npred = learn.predict(test_img)\ntest_img.show(y=ImagePoints(FlowField(test_img.size,torch.from_numpy(get_coords(pred[1])))))","afc0a088":"a=list(train_csv.columns.values)\na.remove('Image')\na.append('ImageId')","e2eac3c0":"test_preds = pd.DataFrame(columns=a)","da394cb6":"from ipywidgets import IntProgress\nfrom IPython.display import display\n\nf = IntProgress(min=0, max=test_csv.count()[0]) # instantiate the bar\ndisplay(f)\nfor test_index in range(test_csv.count()[0]):\n    timg = open_image(test_path\/(str(test_index)+'.jpg'))\n    pred = learn.predict(timg)\n    a=np.abs(flp(get_coords(pred[1]).reshape(1,-1)[0]))\n    a=np.append(a,test_csv.loc[test_index].ImageId)\n    test_preds.loc[test_index]=a\n    f.value+=1","81b34613":"test_preds.describe()","10806295":"test_preds.ImageId=test_preds.ImageId.astype('int')\ntest_preds.head()","adef80f8":"sub = pd.DataFrame(columns=['RowId','Location'])\nfor index,row in id_lookup.iterrows():\n    fname = row.FeatureName\n    trow=test_preds.loc[test_preds['ImageId']==row.ImageId]\n    sub.loc[index]=[row.RowId,trow.iloc[0][fname]]","a32499ba":"sub.RowId=sub.RowId.astype('int')\nsub.head()","43c5f061":"sub.to_csv(\"sub.csv\",index=False)","88ccdc86":"Save train images","1612be59":"### Image array to images ","89aa6cd4":"# Make predictions","dc6978c7":"# Load Data","5962578f":"Make predictions and save dataframe","60c8eb0f":"Control Variables","5986f034":"Predict and display in one image","e9545191":"Save test images","6aedc8da":"# Train Model","81ca76fe":"# Fine tune model","ad6f66eb":"### Make Data bunch","659ba513":"### Read CSV data"}}