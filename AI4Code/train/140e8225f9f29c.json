{"cell_type":{"889dc459":"code","9fcadae5":"code","f0635b8c":"code","aee21070":"code","81901556":"code","b3921c64":"code","71279b65":"code","e7dca05c":"code","5b750362":"markdown","1b3f6e7a":"markdown","6fe12542":"markdown","94f8dd13":"markdown","239e7fce":"markdown","739f1ab9":"markdown"},"source":{"889dc459":"import numpy as np\nimport pandas as pd\nimport os, json, gc, re, random\nfrom tqdm.notebook import tqdm\nfrom sklearn.model_selection import train_test_split\n\nimport matplotlib.pyplot as plt\n%matplotlib inline\nimport plotly.express as px\nimport seaborn as sns\n\nimport warnings\nwarnings.filterwarnings(\"ignore\")\n\nimport logging\nlogging.basicConfig(level=logging.INFO)\ntransformers_logger = logging.getLogger(\"transformers\")\ntransformers_logger.setLevel(logging.WARNING)","9fcadae5":"!pip uninstall -q torch -y > \/dev\/null\n!pip install -q torch==1.6.0+cu101 -f https:\/\/download.pytorch.org\/whl\/torch_stable.html > \/dev\/null\n!pip install -q -U transformers > \/dev\/null\n!pip install -q -U simpletransformers > \/dev\/null","f0635b8c":"import torch, transformers, tokenizers\ntorch.__version__, transformers.__version__, tokenizers.__version__","aee21070":"df = pd.read_csv('..\/input\/imdb-synopsis-indonesian-movies\/imdb_indonesian_movies_2.csv')\ndf.head()","81901556":"df = df[[\"ringkasan_sinopsis\", \"judul_film\"]]\ndf.columns = ['synopsis', 'title']\ndf","b3921c64":"from simpletransformers import Seq2SeqModel\n\nval = df.sample(frac=0.1)\ntrain = df.drop(val.index)\n\nargs = {\n    \"reprocess_input_data\": True,\n    \"overwrite_output_dir\": True,\n    \"save_model_every_epoch\": False,\n    \"save_eval_checkpoints\": False,\n    \"max_seq_length\": 512,\n    \"train_batch_size\": 8,\n    \"num_train_epochs\": 10,\n}\n\n\nmodel = Seq2SeqModel(encoder_decoder_type=\"bart\",\n                    encoder_decoder_name=\"facebook\/bart-base\",\n                    args=args)","71279b65":"model.train_model(train)\n\n\nresult = model.eval_model(val)\nprint(result)","e7dca05c":"test_df = eval_df.sample(n=100)\n\nfor idx, row in test_df.iterrows():\n\n    synopsis = row['synopsis']\n    true_title = row['title']\n\n    # Predict with trained BART model\n    predicted_title = model.predict([plot])[0]\n\n    print(f'True Title: {true_title}\\n')\n    print(f'Predicted Title: {predicted_title}\\n')\n    print(f'Synopsis: {synopsis}\\n\\n\\n')","5b750362":"### Let's take a look at the data","1b3f6e7a":"### Importing Libraries","6fe12542":"<h1 style=\"text-align:center;background-color:black;color:white\">\ud83c\udfac Indonesian Movie Title Prediction<h1>\n\n\n<h4> This notebook is inspired by <a href=\"https:\/\/www.kaggle.com\/balraj98\/movie-title-prediction-from-plot-using-bart\/comments\">balraj98<\/a> and made possible by IMDB Indonesian Movies Synopsis dataset kindly provided by <a href=\"https:\/\/www.kaggle.com\/antoniuscs\/imdb-synopsis-indonesian-movies\"> antoniuscs<\/a>.<\/h4>\n    \nThis notebook will utilize BART Transformer to generate a movie title based on the synopsis provided in the dataset.\n\n<div style=\"text-align:center\">\n    <img style=\"width:100%;height:100%\" src=\"https:\/\/jadwalnonton.com\/data\/upload\/articles\/2019\/Gundala.jpg\"\/>\n    <h3 style=\"font-size:10px\">Source: JadwalNonton<\/h3>\n<\/div>\n    \n<br><br\/>\n**Disclaimer**<br><br\/>\nThis project is just made for fun. I find it interesting to look at what kind of movie title the model can generate.\n","94f8dd13":"### Modeling","239e7fce":"### Let's Start Predicting","739f1ab9":"### EOF"}}