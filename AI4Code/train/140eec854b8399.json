{"cell_type":{"bfde9dce":"code","f023250f":"code","29648cc5":"code","d6945c10":"code","6cebfc38":"code","b5dc60ba":"code","9fbf1237":"code","a0eff842":"code","010ca836":"code","56b2b5d8":"code","42f69a1f":"code","24526bea":"code","02223d2e":"code","0cd207fb":"code","f90832a1":"code","c7c745ab":"code","6e6621e0":"code","a567ccff":"code","476eb30a":"code","2e4c6d10":"code","db32f1f3":"code","7b32e4f2":"code","a7acb00f":"code","06d286e7":"code","88ae4960":"markdown","a60ec93f":"markdown","07167b4b":"markdown","1882608c":"markdown","4eedce59":"markdown","7a8023ab":"markdown","c0bca473":"markdown","4677f0c1":"markdown","c687df60":"markdown","14577f09":"markdown","1b2a5d62":"markdown","c74c28da":"markdown","eae83126":"markdown","09e075b9":"markdown","e0bad459":"markdown","214c1f39":"markdown","1f0d2488":"markdown","6fafd215":"markdown","ac6ecbd3":"markdown","f0563513":"markdown","fe0877e1":"markdown","2bbd40a2":"markdown","72aef3f7":"markdown","3ff3aad3":"markdown"},"source":{"bfde9dce":"# Les \u00e9l\u00e9ments en commentaire n'affectent pas l'execution du code\n# et n'affichent rien en sortie de cellule\nprint(\"Hello world! Et si on calculait 1+1 ?\")\n1+1","f023250f":"# La r\u00e9ponse s'affiche, c'est top !\n# Maintenant, on enregistre \u00e7a dans une variable *resultat*\nprint(\"Hello world! Et si on calculait 1+1 ?\")\nresultat = 1+1","29648cc5":"# Comme on a enregistr\u00e9 le r\u00e9sultat dans une variable, il ne s'affiche pas.\nprint(\"Hello world! Et si on calculait 1+1 ?\")\nprint(resultat)\n\n# On en profite pour montrer que si le calcul n'est pas pr\u00e9sent\u00e9 en dernier, alors il n'est pas affich\u00e9 :\nprint(\"Hello world! Et si on calculait 2+2 ?\")\n2+2\nprint(\"Ah zut, si je n'\u00e9tais pas si bavard, on aurait pu conna\u00eetre le r\u00e9sultat...\")","d6945c10":"# Je nomme deux listes d'\u00e9l\u00e9ments, on prendra soin de la premi\u00e8re et mal de la seconde :\nlist_1 = ['Hello','World!','Je','suis','triste!']\nlist_2 = ['Hello','World!','Je','suis','triste!']\n\nprint('liste 1 :', ' '.join(list_1))\nprint('liste 2 :', ' '.join(list_2))","6cebfc38":"# Je fais mes manipulations pour rendre mes listes heureuses :\nlist_1[4] = 'heureux!'\nlist_2[4] = 'heureux!'\n\nprint('liste 1 :', ' '.join(list_1))\nprint('liste 2 :', ' '.join(list_2))","b5dc60ba":"# Ici, je ne fais pas de manipulation de mes listes, juste l'affichage :\n# (Par contre, regardez bien le num\u00e9ro du In[xx] de la cellule et des cellules avant et apr\u00e8s...)\nprint('liste 1 :', ' '.join(list_1))\nprint('liste 2 :', ' '.join(list_2))\n\n# Si les cellules ont \u00e9t\u00e9 ex\u00e9cut\u00e9es dans l'ordre, essayez d'appliquer la cellule ci-dessous AVANT d'ex\u00e9cuter cette cellule\n# Vous verrez que l'ordre d'execution importe sur les r\u00e9sultats de la cellule.","9fbf1237":"# Ici, je manipule ma seconde liste :\nlist_2[4] = 'triste!'","a0eff842":"# Python devine le type des valeurs qu'il enregistre en m\u00e9moire :\ntest1 = 15\ntest2 = 15.6\ntest3 = 'Hello World'\n\nprint('test 1 :')\nprint(type(test1))\nprint('\\ntest2 :')\nprint(type(test2))\nprint('\\ntest3 :')\nprint(type(test3))","010ca836":"# Les \u00e9l\u00e9ments simples peuvent prendre \nentier = int(15.6) # Quand une valeur d\u00e9cimale est forc\u00e9e en entier (commande int), alors les d\u00e9cimales sont tronqu\u00e9es.\ndecimal = float(15) # Lorsqu'un entier est forc\u00e9 en d\u00e9cimale (commande float), alors une d\u00e9cimale \u00e0 0 est ajout\u00e9e.\n# Pour passer en d\u00e9cimal, on peut multiplier par un d\u00e9cimal : int(15) * 1.0   donnera le nombre d\u00e9cimal 15.0\nboolean = bool(1) # Identique \u00e0 boolean = True\nchaine_de_caracteres = str('Hello World!')\nmanquant = None\n\nprint('entier :')\nprint(entier)\nprint('\\ndecimal :')\nprint(decimal)\nprint('\\nboolean :')\nprint(boolean)\nprint('\\nchaine_de_caracteres :')\nprint(chaine_de_caracteres)\nprint('\\nmanquant :')\nprint(manquant)\n","56b2b5d8":"# Les collections d'\u00e9l\u00e9ments peuvent prendre des valeurs de types diff\u00e9rets :\nliste = [1,20,'3',40]\nmon_tuple = (1,'100',10,1000)\nensemble = set([10,2,'a',2,5,0]) # L'ensemble que garde que les \u00e9l\u00e9ments distincts et ne garde pas l'ordre d'\u00e9criture des \u00e9l\u00e9ments\ndictionnaire = {'cle1':1, 'cle3':'cle_numero_3', 'cle2':2, 'cle1':2} # Le dictionnaire inscrit chaque \u00e9l\u00e9ment comme un couple cl\u00e9:valeur .\n# Il ne garde pas l'ordre d'\u00e9criture des \u00e9l\u00e9ments. Attention : si la m\u00eame cl\u00e9 appara\u00eet deux fois, la valeur sera \u00e9cras\u00e9e par la derni\u00e8re inscription.\n\nprint('liste :')\nprint(liste)\nprint('\\nmon_tuple :')\nprint(mon_tuple)\nprint('\\nensemble :')\nprint(ensemble)\nprint('\\ndictionnaire :')\nprint(dictionnaire)","42f69a1f":"# on acc\u00e8de au second \u00e9l\u00e9ment de chaque collection :\nprint('liste :')\nprint(liste[1]) # Le comptage des \u00e9l\u00e9ments par index commence \u00e0 0\nprint('\\ntuple :')\nprint(mon_tuple[1])\nprint('\\nensemble :')\nprint(list(ensemble)[1]) # Les ensembles set n'acceptent pas l'acc\u00e8s index\u00e9 \u00e0 un el\u00e9ment. Il faut repasser par un autre type comme la liste.\nprint('\\ndictionnaire :')\nprint(dictionnaire['cle2']) # Pour le dictionnaire, on acc\u00e8de \u00e0 la valeur en nommant la cl\u00e9 ne garde pas l'ordre d'\u00e9criture des \u00e9l\u00e9ments\n\n# Une chaine de caract\u00e8res est aussi consid\u00e9r\u00e9e comme une collection de lettres.\n# En fait, on peut lui appliquer peu ou prou les m\u00eames traitement qu'une liste !\nprint('\\nchaine de caract\u00e8res :')\nprint(chaine_de_caracteres[1]) # On s\u00e9lectionne le deuxi\u00e8me \u00e9l\u00e9ment (la deuxi\u00e8me lettre) de la chaine de caract\u00e8res","24526bea":"# Rretrouver trois \u00e9l\u00e9m\u00e9nts de la collection :\nprint('La cha\u00eene de caract\u00e8res :')\nprint(chaine_de_caracteres)\n\nprint('\\nLes trois premiers \u00e9l\u00e9ments de la cha\u00eene de caract\u00e8res :')\nprint(chaine_de_caracteres[:3])\nprint('\\nLes trois derniers \u00e9l\u00e9ments de la cha\u00eene de caract\u00e8res :')\nprint(chaine_de_caracteres[-3:])\nprint('\\nLes \u00e9l\u00e9ments 6 \u00e0 9 :')\nprint(chaine_de_caracteres[6:9])","02223d2e":"test_numeric = 15 == 15.0\ntest_numeric2 = 18 < 7\ntest_character = 'llo' in 'Hello World' # Une sous-chaine de caract\u00e8res peut \u00eatre test\u00e9e face \u00e0 une chaine de caract\u00e8res compl\u00e8te.\n\nprint('test_numeric :')\nprint(test_numeric)\nprint('\\ntest_numeric2 :')\nprint(test_numeric2)\nprint('\\ntest_character :') \nprint(test_character)","0cd207fb":"print('Test classique :')\nx = 5\n\nif 3*x <12:\n    print('x*3 est inf\u00e9rieur \u00e0 12')\nelif 4*x >32 :\n    print('x*4 est sup\u00e9rieur \u00e0 32')\nelse :\n    print('x est compris entre 4 et 8')","f90832a1":"print('VALEURS NUMERIQUES :')\n# Valeur nulle :\nx = None\nprint(x)\nif x :\n    print(\"x n'est pas vide\\n\")\nelse : print('x est vide\\n')\n\n# Valeur pleine :\nx = 12\nprint(x)\nif x :\n    print(\"x n'est pas vide\\n\")\nelse : print('x est vide\\n')\n\n# X est \u00e9gal \u00e0 0 :\nx = 0\nprint(x)\nif x :\n    print(\"x n'est pas vide\\n\")\nelse : print('x est vide\\n')","c7c745ab":"print('Cha\u00eenes de caract\u00e8res :')\n# Valeur pleine :\nx = 'None'\nprint(x)\nif x :\n    print(\"x n'est pas vide\\n\")\nelse : print('x est vide\\n')\n\n# Cha\u00eene vide :\nx = ''\nprint(x)\nif x :\n    print(\"x n'est pas vide\\n\")\nelse : print('x est vide\\n')","6e6621e0":"print('Ensembles :')\n# Liste pleine :\nx = [1,50,25,100]\nprint(x)\nif x :\n    print(\"x n'est pas vide\\n\")\nelse : print('x est vide\\n')\n\n# Liste vide :\nx = []\nprint(x)\nif x :\n    print(\"x n'est pas vide\\n\")\nelse : print('x est vide\\n')\n    \n# Dictionnaire vide :\nx = {}\nprint(x)\nif x :\n    print(\"x n'est pas vide\\n\")\nelse : print('x est vide\\n')","a567ccff":"for x in range(3):\n    print(x)","476eb30a":"for element in [5,'Hello',12,'World!']:\n    print(element)","2e4c6d10":"ma_liste = [0,0,0,0,0]\nfor i in range(5) :\n    ma_liste[i] = i*10\n    \nma_liste2 = [i*10 for i in range(5)]\n\nma_liste3 = [i*10 for i in range(5) if i%2==0] # On affiche que si i est multiple de 2\n\n\nprint('Liste 1 :')\nprint(ma_liste)\nprint('\\nListe 2 :')\nprint(ma_liste2)\nprint('\\nListe 3 :')\nprint(ma_liste3)","db32f1f3":"print('Exemple avec continue :')\nfor element in [5,'Hello',12,'World!']:\n    if type(element) == str :\n        continue # Si la condition est remplie, on passe \u00e0 l'\u00e9l\u00e9ment suivant sans appliqu\u00e9 le code restant dans la boucle\n    print(element)\n\nprint('\\nExemple avec break :')\nfor element in [5,'Hello',12,'World!']:\n    if type(element) == str :\n        break # Si la condition est remplie, on arr\u00eate compl\u00e8tement la boucle \n    print(element) ","7b32e4f2":"i=0\nwhile i<5 :\n    print(i)\n    i = i+1","a7acb00f":"# Syntaxe de base, commence par def nom_de_fonction(arg1,arg2,...) :\n# Et retourne le contenu de la commande return()\ndef fonction_addition(a,b) :\n    return(a+b)\n\n# La fonction s'arr\u00eate d\u00e8s que le premier return est atteint \ndef fonction_demo(a,b) :\n    c = a\n    return(c)\n    c = a+b\n    return(c)","06d286e7":"print('fonction_addition :')\nprint(fonction_addition(5,10))\nprint('\\nfonction_demo :')\nprint(fonction_demo(5,10))","88ae4960":"**Et c'est tout ?**\n\nC'est d\u00e9j\u00e0 pas mal, mais il reste encore quelques petites choses \u00e0 dire.\n\nVous avez peut-\u00eatre remarqu\u00e9 qu'\u00e0 droite de chaque cellule de code, un petit **In[xx]** est pr\u00e9sent, et qu'une fois la cellule ex\u00e9cut\u00e9e le chiffre se met \u00e0 jour.<br>\nVous l'aurez compris, l'ordre d'execution des cellules de code est important ! Les variables enregistr\u00e9es dans une cellule pourront \u00eatre utilis\u00e9es dans d'autres cellules ... mais aussi \u00eatre r\u00e9\u00e9crites !\n\nIl faut donc faire attention \u00e0 **utiliser des nommages de variables diff\u00e9rents** lorsque l'on veut transformer un jeu de donn\u00e9es par exemple.<br>\nDe m\u00eame, il faut se forcer \u00e0 **garder un d\u00e9roulement lin\u00e9aire dans les \u00e9tapes de son notebook** si l'on ne veut pas \u00eatre perdu.\n\n(Combien de fois j'ai cr\u00e9\u00e9 une cellule en fin de notebook pour corriger quelque chose dans mes donn\u00e9es, l'oublier et ne plus comprendre le lendemain pourquoi je n'arrive plus \u00e0 d\u00e9rouler mon code du d\u00e9but \u00e0 la fin ...)\n\nPar l'exemple, c'est toujours mieux :","a60ec93f":"## Cr\u00e9ation de fonctions :","07167b4b":"```","1882608c":"## Acc\u00e9der \u00e0 un \u00e9lement d'une collection :","4eedce59":"On peut tester des \u00e9galit\u00e9s (avec la commande `==`) ou in\u00e9galit\u00e9s (avec les commandes `<` ou `>` ou `<=` ou `>`).<br>\n(Attention, la commande `=` sert \u00e0 assigner des valeurs \u00e0 un objet ou une variable)<br>\nOn peut aussi tester l'apartenance d'un \u00e9l\u00e9ment \u00e0 un ensemble avec la commande `in`.\n\nUne op\u00e9ration de test reverra syst\u00e9matiquement un boolean.\n\nQuelques exemples :","7a8023ab":"```","c0bca473":"Les boucles peuvent \u00eatre arr\u00eat\u00e9es en cours avec l'instruction `break` ou le bloc en cours peut \u00eatre pass\u00e9 avec l'instruction `continue` :","4677f0c1":"## Raccourcis claviers :\n\nJupyter dispose de plusieurs raccourcis claviers qui, une fois ma\u00eetris\u00e9s, rendent l'utilisation d'un notebook vraiment agr\u00e9able.\n\nIl faut avant tout, savoir qu'il existe des raccourcis qui s'appliquent au sein d'une cellule comme dans un script classique :\n- Ctrl + C : Copier\n- Ctrl + V : Coller\n- Ctrl + Z : Annuler la pr\u00e9c\u00e9dente modification\n- etc...\n\n... Et d'autres qui s'appliquent sur le notebook, hors de la cellule.\n\nTout d'abord, les raccourcis pour entrer et sortir d'une cellule :\n- Enter : Entrer dans une cellule\n- Esc : Sortir d'une cellule et revenir au notebook\n\nLorsque vous \u00eates sur le noteboook :\n- Ctrl + Enter : Executer la cellule\n- Ctrl + Shift : Executer la cellule et passer \u00e0 la suivante\n- M : Changer le type de la cellule en Mardown\n- Y : Changer le type de la cellule en Code\n- R : Changer le type de la cellule en Raw\n- Fl\u00e8ches Haut et Bas : Passer \u00e0 la cellule au-dessus ou en-dessous\n- A : Cr\u00e9er cellule au-dessus\n- B : Cr\u00e9er cellule au-dessous\n- C : Copier\n- V : Coller\n- X : Couper\n- D D (deux fois successives) : Supprimer la cellule\n- S : Enregistrer le notebook\n- Z : Annuler pr\u00e9c\u00e9dente op\u00e9ration\n\n## La magie Jupyter\n\nPour ceux qui voudraient aller plus loin, les notebook Jupyter proposent aussi ce qu'ils appellent \"magic\".\n\nCe sont des fonctionnalit\u00e9s qui sont appel\u00e9 par un ou de % .\n\nPar exemple, pour calculer le temps d'exectution d'une ligne de code, on peut \u00e9crire `%time ma_ligne_de_code`.<br>\nPour calculer le temps d'execution d'une cellule, on peut ecrire\n```\n%%time\nligne_de_code1\nligne_de_code2\n...\n```\n\nPour les plus curieuxd, d'autres instructions existent pour g\u00e9rer les sorties graphiques, recharger automatiquement des scripts \u00e0 chaque appel d'une librairie, etc... [Plus d'infos ici](https:\/\/ipython.readthedocs.io\/en\/stable\/interactive\/magics.html) et une liste assez longue [de commandes \"magic\" existantes](https:\/\/damontallen.github.io\/IPython-quick-ref-sheets\/).","c687df60":"## Les conditions :","14577f09":"```","1b2a5d62":"On peut ensuite prendre des actions en fonction du r\u00e9sultat du test, via la syntaxe *if, elif, else* :\n- Si la valeur est True, alors on applique le contenu de la condition *if*\n- Si la valeur est False, alors on passe \u00e0 la seconde condition *elif*\n- Lorsque toutes les conditions sont *False*, on applique la condition dans *else*\n\nA noter que tester un \u00e9l\u00e9ment nul ou une collection vide est \u00e9quivalent \u00e0 *False*.\n\nQuelques exemples :","c74c28da":"\u00c0 partir d'ici, on commence une nouvelle cellule markdown, que vous pouvez cliquer et tester :\n\n### Titres :\n```\nLes titres s'\u00e9crivent gr\u00e0ce au di\u00e8ses (#) :\n# Titre\n## Sous-titre\n### Sous-sous-titre\n```\n# Titre\n## Sous-titre\n### Sous-sous-titre\n``` On s'arette l\u00e0 pour les titres.```\n\n### Emphase \n```\nLe gras s'\u00e9crit avec deux ast\u00e9rix ou deux underscores : **gras** ou __gras__\nL'italique s'\u00e9crit avec deux ast\u00e9rix ou deux underscores : *italique* ou _italique_\nOn peut mixer les deux : **gras et _italique_**\n\nLe barr\u00e9 s'\u00e9crit avec deux vagues : ~~barr\u00e9~~\n```\nLe gras s'\u00e9crit avec deux ast\u00e9risques ou deux underscores : **gras** ou __gras__ <br>\nL'italique s'\u00e9crit avec un ast\u00e9risque ou un underscore : *italique* ou _italique_<br>\nOn peut mixer les deux : **gras et _italique_**\n\nLe barr\u00e9 s'\u00e9crit avec deux vagues : ~~barr\u00e9~~\n\n### Sauts de ligne, lignes horizontales et blocs de texte\n```\nLe saut de ligne s'obtient avec la balise <br>\nLa ligne horizontale avec au moins trois ast\u00e9risques, underscore ou tirets :\n***\nou\n___\nou\n---\nLes blocs de texte s'obtiennent avec la balise >\n```\nLe saut de ligne s'obtient avec la balise <br>\nLa ligne horizontale avec au moins trois ast\u00e9risques, underscore ou tirets :\n***\nou\n___\nou\n\n---\n\n\n\n### Listes ordonn\u00e9es et non ordonn\u00e9es\n```\n1. Element ordonn\u00e9\n2. Deuxi\u00e8me \u00e9l\u00e9ment ordonn\u00e9\n    * Sous-liste non ordonn\u00e9e\n    + Les \u00e9l\u00e9ments non ordonn\u00e9s commencent par * ou - ou +\n1. Troisi\u00e8me \u00e9l\u00e9ment ordonn\u00e9, le num\u00e9ro indiqu\u00e9 au d\u00e9but n'importe pas\n    1. Sous-liste ordonn\u00e9e\n- Quatri\u00e8me \u00e9l\u00e9ment ordonn\u00e9, m\u00eame si on met une puce non ordonn\u00e9e\n```\n1. Element ordonn\u00e9\n2. Deuxi\u00e8me \u00e9l\u00e9ment ordonn\u00e9\n    * Sous-liste non ordonn\u00e9e\n    + Les \u00e9l\u00e9ments non ordonn\u00e9s commencent par * ou - ou +\n1. Troisi\u00e8me \u00e9l\u00e9ment ordonn\u00e9, le num\u00e9ro indiqu\u00e9 au d\u00e9but n'importe pas\n    1. Sous-liste ordonn\u00e9e\n- Quatri\u00e8me \u00e9l\u00e9ment ordonn\u00e9, m\u00eame si on met une puce non ordonn\u00e9e\n\n### Tableau\nLes | s\u00e9parent les colonnes et il doit y avoir au moins trois tirets entre l'ent\u00eate et le contenu du tableau ( --- ).\n\nLe markdown fonctionne dans le contenu des colonnes : \n```\n| Mon           | premier             | tableau|\n| ------------- | ------------------- | ------ |\n| Touch\u00e9        | Coul\u00e9               | Joconde|\n| Test micro    | Un deux, un deux    | Nymph\u00e9a|\n|Pas besoin|d'aligner|les colonnes|\n| On peut       | mettre **en gras**  | ou ~~autre~~ | \n```\n| Mon           | premier             | tableau|\n| ------------- | ------------------- | ------ |\n| Touch\u00e9        | Coul\u00e9               | Joconde|\n| Test micro    | Un deux, un deux    | Nymph\u00e9a|\n|Pas besoin|d'aligner|les colonnes|\n| On peut       | mettre **en gras**  | ou ~~autre~~ | \n\n### Liens URL et images\nLes URL et images fonctionnent de mani\u00e8re similaire. Il faut pointer vers une URL ou l'URL d'une image.\n```\n[Description de l'URL : site d'Estia](https:\/\/www.groupe-estia.fr\/)\n![Description de l'image : logo d'Estia](http:\/\/www.groupe-estia.fr\/wp-content\/uploads\/2017\/01\/logo-estia-retina.png)\n```\n[Description de l'URL : site d'Estia](https:\/\/www.groupe-estia.fr\/)\n![Description de l'image : logo d'Estia](http:\/\/www.groupe-estia.fr\/wp-content\/uploads\/2017\/01\/logo-estia-retina.png)\n\n### Notation math\u00e9matiques (LaTeX)\n\nEcrire du LaTeX ([plus de d\u00e9tails ici](https:\/\/fr.wikipedia.org\/wiki\/LaTeX)) dans un notebook permet d'\u00e9crire des formules math\u00e9matiques.\n\nLe langage LaTeX est ind\u00e9pendant du Markdown, aussi les int\u00e9ress\u00e9s pourront se r\u00e9f\u00e9rer \u00e0 diff\u00e9rents tutoriels en ligne pour en apprendre le fonctionnement.\n\n```\nExemple de code LaTeX : $(a+b)^2 = a^2+2ab+b^2$\n```\nExemple de code LaTeX : $(a+b)^2 = a^2+2ab+b^2$\n\n### Blocs de texte et blocs de code\nLes blocs de texte et de codes doivent \u00eatre \u00e9crits entre accents graves \\` (Alt Gr+7).\n\nSi le texte ou code tient en une ligne, il faut un accent avant et un accent apr\u00e8s. <br>\nS'il s'agit d'un bloc en plusieurs lignes, il faut encadrer le bloc de groupes de trois accents graves cons\u00e9cutifs.","eae83126":"Pour les blocs de codes, on peut avoir une mise en forme automatique de la syntaxe en indiquant le nom du langage apr\u00e8s les trois accents graves.","09e075b9":"```python","e0bad459":"## Cellules markdown :\n\nLes cellules markdown permettent de mettre en forme du texte de mani\u00e8re automatique en utilisant des commandes ou balises. Entre autres :\n- Titres\n- Emphase (gras, italique, barr\u00e9)\n- Sauts de ligne, lignes horizontales et blocs de texte\n- Listes ordonn\u00e9es et non ordonn\u00e9es\n- Tableau\n- Liens URL et images\n- Blocs de texte et blocs de code\n- Notation math\u00e9matiques (LaTeX)\n\nPour ne pas perdre le contenu, [il existe une cheatsheet](https:\/\/github.com\/adam-p\/markdown-here\/wiki\/Markdown-Cheatsheet). (\u00e0 mettre en favoris)","214c1f39":"```\nExemple de bloc de texte :\nJ'\u00e9cris ici du Markdown sans qu'il soit appliqu\u00e9 : Un peu de **gras** et [un url](https:\/\/encrypted-tbn0.gstatic.com\/images?q=tbn%3AANd9GcSt3NaR5ucu51w8A62daaC0gzJ33F7MWoODj2DF9CCmkQBoIr3k) \n```\n\n``` python\n# Exemple de bloc de code\nma_phrase = \"La syntaxe python est mise en forme\"\nprint ma_phrase\n```","1f0d2488":"## Les boucles :\n\nLes boucles s'\u00e9crivent avec la syntaxe suivante :","6fafd215":"# Tuto N\u00b01 - Prise en main de Jupyter\n\nBienvenue dans cette petite s\u00e9rie de quatre tutoriels pour prendre en main les notebook Jupyter, Python et faire ses premiers pas en Deep Learning !\n\nUn petit rappel du programme des tutoriels :\n- Tutoriel N\u00b01 : prise en main d'un **notebook Jupyter** dans Kaggle et quelques \u00e9l\u00e9ments de **python base**\n- Tutoriel N\u00b02 : manipulation de data frames en **pandas** et de vecteurs et matrices en **numpy**\n- Tutoriel N\u00b03 : suivi \u00e9tape par \u00e9tape d'un exercice de **mod\u00e9lisation avec scikit-learn**\n- Tutoriel N\u00b04 : construction from scratch d'un **r\u00e9seau de neuronnes**\n\n## Sommaire\n\nPour cette semaine :\n- Cr\u00e9ation d'un compte sur Kaggle et acc\u00e8s aux notebook\n- Pr\u00e9sentation de Jupyter et de ses raccourcis claviers\n- Pr\u00e9sentations de quelques \u00e9l\u00e9ments de python base\n\nVous \u00eates \u00e9videmment libres de jouer un peu avec le notebook et de faire vos tests en cours de route :)\n\n## Cr\u00e9ation d'un compte sur Kaggle et acc\u00e8s aux notebook\n\nUn [tutoriel complet sur les notebooks Kaggle](https:\/\/www.kdnuggets.com\/2019\/07\/kaggle-kernels-guide-beginners-tutorial.html) vous permettra d'aller plus loin que ce paragraphe. <br>\nMais si vous voulez aller plus vite, on continue ;)\n\nSi vous ne disposez pas d'un compte Kaggle, vous pouvez en cr\u00e9er un facilement : \n![Connexion ou inscription \u00e0 Kaggle](https:\/\/miro.medium.com\/max\/700\/1*mZSqCdVIDfhWG7V0cwuyCQ.png)\n\nVous pouvez ensuite acc\u00e9der \u00e0 vos notebook existant sur l'onglet \"Your Work\" de [la page d\u00e9di\u00e9e](https:\/\/www.kaggle.com\/kernels), ou d'en cr\u00e9er un nouveau via l'onglet [\"New notebook\"](https:\/\/www.kaggle.com\/kernels\/welcome).<br>\nLes notebook fonctionnent en R ou en Python. Pour activer les GPUs il faudra donner son num\u00e9ro de t\u00e9l\u00e9phone pour obtenir un code de validation.\n\nVous n'avez pas s\u00e9lectionn\u00e9 les bonnes options ? Pas de panique ! Il est possible de changer le langage une fois le notebook cr\u00e9\u00e9. <br>\nAutre point fort sympathique, vous pouvez charger directement des jeux de donn\u00e9es pr\u00e9sents sur Kaggle !\n![Modifs online](attachment:image.png)\n\nJe vous recommande de couper les GPUs tant que vous n'en aurez pas directement besoin, car Kaggle priorise les notebook qui n'utilisent pas cette option et cela peut r\u00e9duire vos temps de chargement.\n\n## Jupyter et ses raccourcis\n\nUtiliser un notebook pour la premi\u00e8re fois peut se montrer d\u00e9routant. N\u00e9anmoins, avec un peu d'habitude, le notebook devient vite un outil diablement efficace pour explorer un jeu de donn\u00e9es ou tester des codes.<br>\nBien que se d\u00e9veloppent des solutions pour faciliter la mise en production de notebook Jupyter, l'utilisation de scripts standard reste vivement conseiller pour le passage \u00e0 l'\u00e9chelle.\n\nLe notebook est aussi un moyen tr\u00e8s efficace de partager les r\u00e9sultats d'une \u00e9tude ou d'une exp\u00e9rimentation. Il est particuli\u00e8rement utile pour :\n- L'int\u00e9raction avec du code. En format notebook (.ipynb), on peut int\u00e9ragir avec une partie du code sans alt\u00e9rer le reste du notebook (et donc les r\u00e9sultats interm\u00e9diaires et images pr\u00e9c\u00e9dentes).\n- L'affichage d'images et de graphes est vraiment simple et efficace.\n- Le partage de codes avec une documentation esth\u00e9tique.\n- Documenter de mani\u00e8re approfondie (codes et images \u00e0 l'appui) une analyse ou une d\u00e9marche.\n\nMaintenant, on va s'int\u00e9resser au fonctionnement du notebook :\n- Le notebook est divis\u00e9 en cellules. Les cellules sont de trois types :\n    - **Cellules de code** : elles permettent l'ex\u00e9cution de bouts de code et - apr\u00e8s ex\u00e9cution - affichent en sortie les \u00e9l\u00e9ments affich\u00e9s par la cellule (fonction print, affichage d'images...) et le contenu de la derni\u00e8re commande s'il n'a pas \u00e9t\u00e9 enregistr\u00e9 dans une variable. <br>\n    Lorsque le notebook est publi\u00e9 (export\u00e9 en format .html ou .pdf ), les cellules de codes disparaissent et seule la partie Out est affich\u00e9e.\n    - **Cellules markdown** : lorsqu'elles sont ex\u00e9cut\u00e9es, elles permettent d'afficher joliement des titres, du texte, etc. entre deux morceaux de code.\n    - **Cellules brutes** : quel que soit le contenu de la cellule, il ne peut pas \u00eatre ex\u00e9cut\u00e9.<br>\n    Ces cellules peuvent \u00eatre pratiques en cours de d\u00e9veloppement pour garder sous la main un morceau de code qu'on ne veut pas ex\u00e9cuter ou dans un notebook final pour pr\u00e9senter au lecteur un morceau de code sp\u00e9cifique qui ne doit pas dispara\u00eetre.\n- Pour entrer dans une cellule execut\u00e9e (code ou markdown), il vous suffit de cliquer dessus avec votre souris.\n- Les cellules peuvent \u00eatre ajout\u00e9es, supprim\u00e9es, d\u00e9plac\u00e9es, coup\u00e9es, coll\u00e9es, chang\u00e9es de type ... soit \u00e0 l'aide des menus (Edit, Insert, Run ...), des actions dans l'angle en haut \u00e0 droite de chaque cellule, soit de raccourcis claviers.\n\nQuelques exemples d'utilisation : (vous \u00eates invit\u00e9s \u00e0 jouer avec les cellules en cliquant dessus pour en tester les fonctionnalit\u00e9s)\n\n### Cellules de code","ac6ecbd3":"mon bloc de texte","f0563513":"Une astuce sympathique, esth\u00e9tique et efficace en temps de calcul est la **compr\u00e9hension de liste** (fonctionne aussi avec les dictionnaires, tuples et ensemble) :\n\nOn peut aussi y ajouter des filtres.","fe0877e1":"On peut acc\u00e9der \u00e0 une sous partie des \u00e9l\u00e9ments (appel\u00e9e *slice*).\n\nOn peut aussi y acc\u00e9der au n-i\u00e8me \u00e9l\u00e9ment en partant de la fin.","2bbd40a2":"mon bloc de code python","72aef3f7":"Il existe \u00e9galement une boucle `while` que je d\u00e9conseille fortment \u00e0 l'utilisation car elle peut provoquer des boucles infinies et que la quasi-totalit\u00e9 des boucles dont vous pouvez avoir besoin peuvent s'\u00e9crire avec une boucle `for`.\n\nEn voici n\u00e9anmoins la syntaxe :","3ff3aad3":"# Instructions de base en python :\n\nRapidement, quelques \u00e9l\u00e9ments de base en python. L'objectif est de manipuler les diff\u00e9rents exemples et faire ses propres tests !\n\nAttention \u00e0 l'indentation, qui est cruciale en python !!!\n\n## Les types les plus courrament utilis\u00e9s :"}}