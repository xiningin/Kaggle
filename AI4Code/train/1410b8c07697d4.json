{"cell_type":{"390aa9bf":"code","dfce0153":"code","2dd89d27":"code","9c1b49ca":"code","b3b45fb1":"code","96e07d9e":"code","e65b8623":"code","277dc48d":"code","45475a11":"code","2b3630a1":"code","aec19584":"markdown","4369263c":"markdown","a46b14a4":"markdown","8b9b6524":"markdown","10e23467":"markdown","dbfaa7c4":"markdown","c67fc013":"markdown","6ed6629f":"markdown"},"source":{"390aa9bf":"import pydicom\nimport os\nimport numpy as np\nimport pandas as pd\nfrom matplotlib import cm\nfrom matplotlib import pyplot as plt\nimport cv2\nimport seaborn as sns\nfrom tqdm import tqdm\nimport sys\nimport SimpleITK as sitk\nimport numpy as np\nimport nibabel as nib\nimport os\nimport itertools\nfrom sklearn.metrics import f1_score\nimport xlwt \nfrom xlwt import Workbook \n","dfce0153":"num_of_slice = 0\nfor file_name in os.listdir('..\/input\/pat02dicomsmask'):\n    file_path = os.path.join('..\/input\/pat02dicomsmask', file_name)\n    num_of_slice += 1\n    wb = Workbook()\ni = 0\nnum_to_plot = num_of_slice  # numero su cui lavorare\ntruth_mask = np.zeros((num_of_slice,630,630))\n\nfor file_name in sorted(os.listdir('..\/input\/pat02dicomsmask')):\n    file_path = os.path.join('..\/input\/pat02dicomsmask', file_name)\n    ds = pydicom.filereader.dcmread(file_path)\n    #print(file_name)\n\n    truth_mask[i] = np.array(ds.pixel_array)\n    i += 1\n\n    if i == num_to_plot:\n        break\n    ","2dd89d27":"print(truth_mask[30])\nprint(truth_mask.shape)\n\nplt.imshow(truth_mask[30])\nplt.show()","9c1b49ca":"num_of_slice = 0\nfor file_name in os.listdir('..\/input\/pat02dicomsmaskr231'):\n    file_path = os.path.join('..\/input\/pat02dicomsmaskr231', file_name)\n    num_of_slice += 1\n\ni = 0\nnum_to_plot =  num_of_slice # numero su cui lavorare\ndnn_mask = np.zeros((num_of_slice,630,630))\n\nfor file_name in sorted(os.listdir('..\/input\/pat02dicomsmaskr231')):\n    file_path = os.path.join('..\/input\/pat02dicomsmaskr231', file_name)\n    ds = pydicom.filereader.dcmread(file_path)\n    #print(file_name)\n\n    dnn_mask[i] = np.array(ds.pixel_array)\n    i += 1\n\n    if i == num_to_plot:\n        break\n        ","b3b45fb1":"for i in range (0, num_of_slice):\n    dnn_mask[i] = np.where(dnn_mask[i] == 2, 1, dnn_mask[i]) \n\nprint(dnn_mask.shape)\nplt.imshow(dnn_mask[30])\nplt.show()\n\n#np.set_printoptions(threshold=sys.maxsize) #stampare matrice completa","96e07d9e":"\nsheet1 = wb.add_sheet('Sheet 1', cell_overwrite_ok=True) \nstyle = xlwt.easyxf('font: bold 1, color red;')\n\nsheet1.write(0, 0, \"R231\", style) \nsheet1.write(1, 0, \"IoU_Pat2\", style) \nsheet1.write(1, 1, \"Dice_Pat2\", style) \n\nfor i in range (0, num_of_slice):\n    \n    '''Intersection over Union (IoU) '''\n    intersection = np.logical_and(truth_mask[i], dnn_mask[i])\n    union = np.logical_or(truth_mask[i], dnn_mask[i])\n    iou_score = np.sum(intersection) \/ np.sum(union)\n    sheet1.write(i+2, 0, iou_score) \n    #print(\"The slice \",i,\" has IoU = \", iou_score)\n    \n    \n    '''DICE Coefficient (F1 Score)'''\n    sheet1.write(i+2, 1, f1_score(truth_mask[i], dnn_mask[i], zero_division=0, average='micro')) \n    #f1_score(truth_mask[30], dnn_mask[30], average='micro')\n    #f1_score(truth_mask[30], dnn_mask[30], average='macro')\n    \nwb.save('model_Pat2.xls')\n\n\n\n\n","e65b8623":"num_of_slice = 0\nfor file_name in os.listdir('..\/input\/pat02dicomsmaskcovidweb'):\n    file_path = os.path.join('..\/input\/pat02dicomsmaskcovidweb', file_name)\n    num_of_slice += 1\n\ni = 0\nnum_to_plot =  num_of_slice # numero su cui lavorare\ndnn_mask = np.zeros((num_of_slice,630,630))\n\nfor file_name in sorted(os.listdir('..\/input\/pat02dicomsmaskcovidweb')):\n    file_path = os.path.join('..\/input\/pat02dicomsmaskcovidweb', file_name)\n    ds = pydicom.filereader.dcmread(file_path)\n    #print(file_name)\n\n    dnn_mask[i] = np.array(ds.pixel_array)\n    i += 1\n\n    if i == num_to_plot:\n        break","277dc48d":"for i in range (0, num_of_slice):\n    dnn_mask[i] = np.where(dnn_mask[i] == 2, 1, dnn_mask[i]) \n\nprint(dnn_mask.shape)\nplt.imshow(dnn_mask[30])\nplt.show()\n\n#np.set_printoptions(threshold=sys.maxsize) #stampare matrice completa","45475a11":"def dice(img1, img2):\n\n    img1 = np.asarray(img1).astype(np.bool)\n    img2 = np.asarray(img2).astype(np.bool)\n    if img1.sum() + img2.sum() == 0: return 1\n    intersection = np.logical_and(img1, img2)\n    return 2. * intersection.sum() \/ (img1.sum() + img2.sum())\n","2b3630a1":"sheet1.write(0, 3, \"CovidWeb\", style) \nsheet1.write(1, 3, \"IoU_Pat2\", style) \nsheet1.write(1, 4, \"Dice_Pat2\", style) \n\nfor i in range (0, num_of_slice):\n    \n    '''Intersection over Union (IoU) '''\n    intersection = np.logical_and(truth_mask[i], dnn_mask[i])\n    union = np.logical_or(truth_mask[i], dnn_mask[i])\n    iou_score = np.sum(intersection) \/ np.sum(union)\n    sheet1.write(i+2, 3, iou_score) \n    #print(\"The slice \",i,\" has IoU = \", iou_score)\n    \n    \n    '''DICE Coefficient (F1 Score)'''\n    sheet1.write(i+2, 4, f1_score(truth_mask[i], dnn_mask[i], zero_division=0, average='micro')) \n    #f1_score(truth_mask[30], dnn_mask[30], average='micro')\n    #f1_score(truth_mask[30], dnn_mask[30], average='macro')\n    sheet1.write(i+2, 7, dice(truth_mask[i], dnn_mask[i]))\nwb.save('model_Pat2.xls')\n\n","aec19584":"* Setting one uniform color on the Mask if necessary","4369263c":"* Loading the original dicom slices in a 3D numpyArray","a46b14a4":"* Compute DICE & IoU for every slice","8b9b6524":"* Dice Function","10e23467":"* Loading the dicom Mask (from Model-R231-CovidWeb) slices in a 3D numpyArray","dbfaa7c4":"* Compute DICE & IoU for every slice of the second Mask","c67fc013":"* Loading the dicom Mask (from Model-R231) slices in a 3D numpyArray","6ed6629f":"* Again, correct the Mask in necessary"}}