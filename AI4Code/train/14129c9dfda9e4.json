{"cell_type":{"8cc2c43a":"code","11c16926":"code","7a8f560a":"code","0e3cb34e":"code","de00ab6a":"code","d0eed197":"code","d17abd61":"code","cf5e185d":"code","f298ac54":"code","6bd8b75e":"code","65bc62aa":"code","b3936b06":"code","0d8a1615":"code","b68d224d":"code","3a5bdbb7":"code","6a81046a":"code","25103106":"code","6b5933fb":"code","d2e55140":"code","ac13cc8b":"code","42152a94":"code","eb0ed688":"code","c9e5d998":"code","925383b0":"code","37b6dad3":"code","a2f22eaa":"code","a57e2cef":"code","801ea118":"code","47212d1b":"code","ac9dbf57":"code","0d29d112":"code","c082e1d9":"code","d0addd7b":"code","3325c849":"code","fa6591ad":"code","94252b85":"markdown","329407a4":"markdown","b9078514":"markdown","160ce297":"markdown","d27db1cd":"markdown","2b2f9835":"markdown","2e18520c":"markdown","53c5ce97":"markdown","e2f2253c":"markdown","94302990":"markdown","6d729150":"markdown","91606ee7":"markdown","07e041f7":"markdown","e9257d91":"markdown","260237de":"markdown","490af0f4":"markdown","cd1de9ba":"markdown","1f07ef81":"markdown","491c9d49":"markdown","2b2ce2ff":"markdown","f5dd740e":"markdown","bb99ee3b":"markdown","7a3ef249":"markdown","00688639":"markdown","dcfb4cc8":"markdown","3ec62fd0":"markdown","11bd2ea4":"markdown","84df9fd2":"markdown","40ae915d":"markdown","89634557":"markdown","73eac6dc":"markdown","2d9d8207":"markdown","57034f1b":"markdown","7da7ab47":"markdown","1348fc88":"markdown","4f187d1b":"markdown","0630e755":"markdown","d610bbc3":"markdown"},"source":{"8cc2c43a":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport os\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.metrics import confusion_matrix, accuracy_score\nfrom sklearn.linear_model import LinearRegression\nfrom sklearn.ensemble import RandomForestRegressor\n\n\n%matplotlib inline\nimport warnings\nwarnings.filterwarnings(\"ignore\")\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))","11c16926":"dataframe = pd.read_csv('..\/input\/factors-affecting-campus-placement\/Placement_Data_Full_Class.csv')\ndataframe.head()","7a8f560a":"from pandas_profiling import ProfileReport\nprofile = ProfileReport(dataframe);","0e3cb34e":"profile.to_widgets()","de00ab6a":"df = pd.DataFrame.drop(dataframe,columns=[\"sl_no\",\"ssc_b\",\"hsc_b\"])\ndf_new = df.groupby(by  = 'status').mean()\ndf_new","d0eed197":"matrix = dataframe.corr()\nplt.figure(figsize=(8,6))\n#plot heat map\ng=sns.heatmap(matrix,annot=True,cmap=\"YlGn_r\")","d17abd61":"plt.figure(figsize=(12,8))\nplt.ylim([200000,450000])\nsns.regplot(x=\"ssc_p\",y=\"salary\",data=dataframe)\nsns.regplot(x=\"hsc_p\",y=\"salary\",data=dataframe)\nsns.regplot(x=\"mba_p\",y=\"salary\",data=dataframe)\nsns.regplot(x=\"etest_p\",y=\"salary\",data=dataframe)\nplt.legend([\"ssc percentage\", \"hsc percentage\", \"MBA\", \"E-test\"])\nplt.ylabel(\"mba percentage\")\nplt.xlabel(\"Percentage %\")\nplt.show()","cf5e185d":"sns.catplot(x=\"ssc_b\",hue=\"gender\",data=dataframe, kind=\"count\",);\nplt.ylabel(\"No. of students\");\nplt.xlabel(\"senior secondary\");\nsns.catplot(x=\"hsc_b\",hue=\"gender\",data=dataframe, kind=\"count\");\nplt.ylabel(\"No. of students\");\nplt.xlabel(\"higher senior secondary\");\nsns.catplot(x=\"hsc_s\",hue=\"gender\",data=dataframe, kind=\"count\");\nplt.ylabel(\"No. of students\");\nplt.xlabel(\"prefered subjects\");","f298ac54":"sns.catplot(x=\"ssc_b\",y=\"ssc_p\",hue=\"gender\",data=dataframe,kind=\"boxen\");\nplt.ylabel(\"percentage\");\nplt.xlabel(\"boards\");","6bd8b75e":"sns.catplot(x=\"workex\",hue=\"degree_t\",data=dataframe, kind=\"count\");\nplt.ylabel(\"No. of students\");\nplt.xlabel(\"work exp in different degrees\");\nsns.catplot(x=\"degree_t\",hue=\"workex\",data=dataframe, kind=\"count\");\nplt.ylabel(\"No. of students\");\nplt.xlabel(\"work exp in different degrees\");","65bc62aa":"sns.catplot(y=\"salary\",x=\"gender\",data=dataframe, kind=\"box\", hue=\"specialisation\" );","b3936b06":"df1 = pd.DataFrame(dataframe['degree_t'].value_counts(normalize=True))\nplot = df1.plot.pie(y='degree_t', autopct='%1.1f%%', figsize=(5, 5))","0d8a1615":"df2 = pd.DataFrame(dataframe['specialisation'].value_counts(normalize=True))\nplot = df2.plot.pie(y='specialisation', autopct='%1.1f%%', figsize=(5, 5))","b68d224d":"df3 = pd.DataFrame(dataframe['status'].value_counts(normalize=True))\nplot = df3.plot.pie(y='status', autopct='%1.1f%%', figsize=(5, 5))","3a5bdbb7":"dataframe.hist(bins = 30, figsize=(10,10), color= 'orange');","6a81046a":"import plotly.express as px\ndfc=pd.DataFrame(dataframe.groupby(['gender','specialisation','status'])['sl_no'].count()).rename(columns={'sl_no': 'no. of students'}).reset_index()\n\nfig = px.sunburst(dfc, path=['gender','status','specialisation'], values='no. of students')\nfig.update_layout(title=\"Placement % of mba in each specialisation by gender \",title_x=0.5)\nfig.show()","25103106":"df[\"degree_t\"] = df[\"degree_t\"].astype('category')\ndf[\"workex\"] = df[\"workex\"].astype('category')\ndf[\"specialisation\"] = df[\"specialisation\"].astype('category')\ndf[\"status\"] = df[\"status\"].astype('category')\ndf[\"gender\"] = df[\"gender\"].astype('category')\ndf[\"hsc_s\"] = df[\"hsc_s\"].astype('category')\ndf.dtypes\ndf[\"workex\"] = df[\"workex\"].cat.codes\ndf[\"gender\"] = df[\"gender\"].cat.codes\ndf[\"degree_t\"] = df[\"degree_t\"].cat.codes\ndf[\"specialisation\"] = df[\"specialisation\"].cat.codes\ndf[\"status\"] = df[\"status\"].cat.codes\ndf[\"hsc_s\"] = df[\"hsc_s\"].cat.codes\ndf.tail()","6b5933fb":"df_class = df.copy()\nX = df_class.iloc[:,0:-2].values\ny = df_class.iloc[:,-2].values","d2e55140":"#Split the dataset for training\n#from sklearn.model_selection import train_test_split\nX_train, X_test, y_train, y_test = train_test_split( X, y, test_size=0.15, random_state=0)","ac13cc8b":"#Train the model\n#from sklearn.linear_model import LogisticRegression\nlg_classifier = LogisticRegression(random_state=0,max_iter=1000)\nlg_classifier.fit(X_train, y_train)\n\n#Predict the test cases\ny_pred_lgclass = lg_classifier.predict(X_test)","42152a94":"#Train the model\n#from sklearn.ensemble import RandomForestClassifier\nrf_classifier = RandomForestClassifier(n_estimators=1000,criterion=\"entropy\")\nrf_classifier.fit(X_train, y_train)\n\n#Predict the test cases\ny_pred_rfclass = rf_classifier.predict(X_test)","eb0ed688":"#from sklearn.metrics import confusion_matrix, accuracy_score\ncm = confusion_matrix(y_test, y_pred_rfclass)\nprint(cm)\nprint(\"random forest accuracy: {:2.2f}%\" .format(accuracy_score(y_test, y_pred_rfclass) * 100) )","c9e5d998":"cm = confusion_matrix(y_test, y_pred_lgclass)\nprint(cm)\nprint(\"Logistic regressor accuracy: {:2.2f}%\" .format(accuracy_score(y_test, y_pred_lgclass)*100) )","925383b0":"df_reg = df.copy()","37b6dad3":"df_reg.dropna(inplace=True)\ndf_reg = df_reg[df_reg[\"salary\"]<350000.0]","a2f22eaa":"#PDF of Salary\nsns.kdeplot(df[\"salary\"])\nplt.legend([\"before\"])\nplt.show()","a57e2cef":"sns.kdeplot(df_reg[\"salary\"])\nplt.legend([\"after\"])","801ea118":"#select the features of regression model\nX = df_reg.iloc[:,:-2].values\ny = df_reg.iloc[:,-1].values\n\n#splitting into training and test set\n#from sklearn.model_selection import train_test_split\nX_train, X_test, y_train, y_test = train_test_split( X, y, test_size=0.2, random_state=0)","47212d1b":"from statsmodels.api import OLS\nsumm=OLS(y_train,X_train).fit()\nsumm.summary()","ac9dbf57":"df_reg = pd.DataFrame.drop(df_reg,columns=[\"degree_p\",\"ssc_p\",\"specialisation\",\"workex\"])\n\n#select the features of regression model\nX = df_reg.iloc[:,:-2].values\ny = df_reg.iloc[:,-1].values\n\n#splitting into training and test set\n#from sklearn.model_selection import train_test_split\nX_train, X_test, y_train, y_test = train_test_split( X, y, test_size=0.2, random_state=0)\n\nsumm=OLS(y_train,X_train).fit()\nsumm.summary()","0d29d112":"#from sklearn.linear_model import LinearRegression\nregressor = LinearRegression()\nregressor.fit(X_train, y_train)\n\n#Predict the salary\ny_pred_m = regressor.predict(X_test)","c082e1d9":"#from sklearn.ensemble import RandomForestRegressor\nrfregressor = RandomForestRegressor(n_estimators = 10, random_state = 0)\nrfregressor.fit(X_train, y_train)\n\n#Predict the salary\ny_pred_r = rfregressor.predict(X_test)","d0addd7b":"from sklearn.metrics import r2_score, accuracy_score\nprint(\"R2 score\")\nprint(\"multiple regressor \" + str(r2_score(y_test, y_pred_m)))\nprint(\"random forest \"+ str(r2_score(y_test, y_pred_r)))","3325c849":"from sklearn.metrics import r2_score, mean_absolute_error, mean_squared_error\nfrom math import sqrt\nprint(\"Mean Absolute error\")\nMAE = mean_absolute_error(y_test, y_pred_m)\nprint(\"Multiple linear regressor \"+str(MAE))\nMAE = mean_absolute_error(y_test, y_pred_r)\nprint(\"Random forest regressor \"+ str(MAE))","fa6591ad":"print(\"regression coeff:\" + str(regressor.coef_))\nprint(\"regression intercept: \" + str(regressor.intercept_))","94252b85":"Higher Senior secondary have a higher correlation with Salary i.e. more likely to get placed","329407a4":"# Import libraries","b9078514":"<a id='T84'><\/a>\n## Estimation by Random forest regressor","160ce297":"<a id='T83'><\/a>\n## Estimation by multiple regressor","d27db1cd":"<a id='T82'><\/a>\n## OLS model summary","2b2f9835":"<a id='T5'><\/a>\n# Data Distribution","2e18520c":"<a id='T45'><\/a>\n**Finding the salary outliers**","53c5ce97":"<a id='T42'><\/a>\n**Which marks matter more for getting placed ?**","e2f2253c":"<a id='T44'><\/a>\n**Higher secondary percentage gender wise**","94302990":"***Averge percentage you require to get placed***","6d729150":"    Average percentage of girls in both boards is higher than boys","91606ee7":"**Skewness of salary plot**","07e041f7":"> This is the best feature combinaion I get, comment the best features combination you get with least mean absolute error.","e9257d91":"<a id='T43'><\/a>\n**Number of students from central, other boards in different class**","260237de":"$$\\textrm{If you like the work please upvote :-), Comments are Welcome}$$","490af0f4":"**Work experience for stdents in different degrees**","cd1de9ba":"<a id='T74'><\/a>\n## Accuracy\/Confusion matrix","1f07ef81":"<a id='T6'><\/a>\n# Encoding the categorical data","491c9d49":"<a id='T7'><\/a>\n# Classification of placement status","2b2ce2ff":"# Data Exploration","f5dd740e":"<a id='T81'><\/a>\n## Pre processing data","bb99ee3b":"<a id='T71'><\/a>\n## Preprocessing the data","7a3ef249":"***percentage of specialisation***","00688639":"<a id='T4'><\/a>\n# Data visualisation","dcfb4cc8":"<a id='T73'><\/a>\n## Train Random Forest Classifier","3ec62fd0":"<a id='T8'><\/a>\n# Build a regression model","11bd2ea4":"density plot is right skewed","84df9fd2":"# Import dataset","40ae915d":"**Drop insignificant features**","89634557":"<a id='T51'><\/a>\n**Placement % of mba in each specialisation by gender**","73eac6dc":"# $$\\textrm{Campus Recruitment}$$\n\n_Academic and Employability Factors influencing placement_","2d9d8207":"<a id='T46'><\/a>\n***which stream is prefered by students the most***","57034f1b":"<a id='T72'><\/a>\n## Train Logistic Regression Model","7da7ab47":"***Students that got placement***","1348fc88":"Therefore, the equation of our multiple linear regression model is:\n\n$$\\textrm{salary} = 13587.74 \\times \\textrm{gender} - 162 \\times \\textrm{hsc_p} - 9251.35 \\times \\textrm{hsc_s} + 7127 \\times \\textrm{degree_t} + 163.43 \\times \\textrm{etest_p} + 77.79 \\times \\textrm{mba_p} + 251890.32$$","4f187d1b":"<a id='T41'><\/a>\n**Correltion between features**","0630e755":"<a id='T85'><\/a>\n## Regression coefficients and intercept","d610bbc3":"# Table of contents\n\n* [Import Libraries](#T1)\n* [Import Dataset](#T2)\n* [Data Exploration](#T3)\n* [Data Visualization](#T4)\n    * [Correlation between features](#T41)\n    * [Lineplot](#T42)\n    * [Barplot: No. of students from different boards](#T43)\n    * [Catplot: Higher secondary % gender wise](#T44)\n    * [Boxplot: Finding salary outliers](#T45)\n    * [piechart: Most prefered stream](#T46)\n* [Data Distribution](#T5)\n* [Encoding categorical data](#T6)\n* [Classification of Placement Status](#T7)\n    * [Preprocessing Data](#T71)\n    * [Logistic Regression Model](#T72)\n    * [Random Forest Classifier](#T73)\n    * [Accuracy\/Confusion Matrix](#T74)\n* [Build a regression model(Salary predictor)](#T8)\n    * [Preprocessing Data](#T81)\n    * [Estimation by Multiple regressor](#T82)\n    * [Estimation by Random Forest regressor](#T83)\n    * [OLS model summery](#T84)\n    * [Regressor coefficient and intercept](#T85)"}}