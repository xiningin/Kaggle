{"cell_type":{"ccac9c2e":"code","61e838d1":"code","7a243d09":"code","f9059c87":"code","8ba5ce01":"code","a865d3ce":"code","590e9ecd":"code","81e1b6e4":"code","96cce1bf":"code","61778952":"code","c45e66dc":"code","f12bccc3":"code","e9898828":"code","92dcd08d":"code","ee02ee1d":"code","9395b029":"code","9be0b9bc":"code","b2b4fd17":"code","7bea6092":"code","918c6924":"code","8048b86a":"code","4ebfd517":"code","6069bb72":"code","9177bdf6":"code","25841e1c":"code","1bb91ff1":"code","62b39d68":"code","31c6de7c":"code","2535b073":"code","716f491e":"code","7a4f7f96":"code","860dfe41":"code","9011728a":"code","bbdc38f2":"code","bb65257f":"code","d14cd110":"code","7e49f5f2":"code","776f88d9":"code","f8096ea2":"code","5d02363d":"code","8f0f13b3":"code","fcea0ccf":"code","eae23160":"code","9227c08a":"code","1f20e3bb":"code","ead2fa9a":"code","4235af7f":"code","50e78423":"code","6a1b1c26":"code","b8eab993":"code","37323a6c":"code","8063d7b9":"code","cca5721b":"code","1ec33026":"code","8b8d2824":"code","05bcc3d4":"code","6b49466f":"code","749ea796":"code","76b04053":"code","3b67aa86":"code","b9e23f24":"code","6bb0e37a":"code","72fed96d":"code","f8d0dd18":"code","de1aa523":"code","4da28243":"code","4f554497":"code","2672f828":"code","ff0298c7":"code","ff8a67fe":"code","9c8d358c":"code","3b2fab2d":"code","6eb74226":"code","8fbadfc1":"code","bb04a187":"code","0ce82dcb":"code","c58606be":"code","1732ef16":"code","610e5c93":"code","51bc60ce":"code","fd611009":"code","35cf3da5":"code","9cced91c":"code","57806ac3":"code","4e325334":"code","f66761d3":"code","fd7ac28a":"markdown"},"source":{"ccac9c2e":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\nplt.style.use('seaborn')\nsns.set(font_scale=2.5)\n\nimport missingno as msno\n\nimport warnings\nwarnings.filterwarnings('ignore')\n\n\n\n","61e838d1":"\ndf_train = pd.read_csv('..\/input\/titanic\/train.csv')\ndf_test = pd.read_csv('..\/input\/titanic\/test.csv')\n\n","7a243d09":"df_train.describe()\ndf_test.describe()\n","f9059c87":"for col in df_train.columns:\n    msg = 'column: {:>10}\\t Percent of NaN value: {:.2f}%'.format(col, 100 * (df_train[col].isnull().sum() \/ df_train[col].shape[0]))\n    print(msg)","8ba5ce01":"for col in df_test.columns:\n    msg = 'column: {:>10}\\t Percent of NaN value: {:.2f}%'.format(col, 100 * (df_test[col].isnull().sum() \/ df_test[col].shape[0]))\n    print(msg)","a865d3ce":"msno.matrix(df=df_train.iloc[:, :], figsize=(8, 8), color=(0.8, 0.5, 0.2))\n\nmsno.bar(df=df_train.iloc[:, :], figsize=(8, 8), color=(0.8, 0.5, 0.2))\n\nmsno.bar(df=df_test.iloc[:, :], figsize=(8, 8), color=(0.8, 0.5, 0.2))\n","590e9ecd":"f, ax = plt.subplots(1, 2, figsize=(18, 8))","81e1b6e4":"df_train['Survived'].value_counts().plot.pie(explode=[0, 0.1], autopct='%1.1f%%', ax=ax[0], shadow=True)\nax[0].set_title('Pie plot - Survived')\nax[0].set_ylabel('')\nsns.countplot('Survived', data=df_train, ax=ax[1])\nax[1].set_title('Count plot - Survived')\n","96cce1bf":"plt.show()","61778952":"df_train[['Pclass', 'Survived']].groupby(['Pclass'], as_index=True).count()","c45e66dc":"df_train[['Pclass', 'Survived']].groupby(['Pclass'], as_index=True).sum()","f12bccc3":"pd.crosstab(df_train['Pclass'], df_train['Survived'], margins=True).style.background_gradient(cmap='summer_r')\n","e9898828":"df_train[['Pclass', 'Survived']].groupby(['Pclass'], as_index=True).mean().sort_values(by='Survived', ascending=False).plot.bar()","92dcd08d":"y_position = 1.02\nf, ax = plt.subplots(1, 2, figsize=(18, 8))\ndf_train['Pclass'].value_counts().plot.bar(color=['#CD7F32','#FFDF00','#D3D3D3'], ax=ax[0])\nax[0].set_title('Number of Passengers By Pclass', y=y_position)\nax[0].set_ylabel('Count')\nsns.countplot('Pclass', hue='Survived', data=df_train, ax=ax[1])\nax[1].set_title('Pclass: Survived vs Dead', y=y_position)\nplt.show()","ee02ee1d":"f, ax = plt.subplots(1, 2, figsize=(18, 8))\ndf_train[['Sex', 'Survived']].groupby(['Sex'], as_index=True).mean().plot.bar(ax=ax[0])\nax[0].set_title('Survived vs Sex')\nsns.countplot('Sex', hue='Survived', data=df_train, ax=ax[1])\nax[1].set_title('Sex: Survived vs Dead')\nplt.show()","9395b029":"df_train[['Sex', 'Survived']].groupby(['Sex'], as_index=False).mean().sort_values(by='Survived', ascending=False)\n","9be0b9bc":"pd.crosstab(df_train['Sex'], df_train['Survived'], margins=True).style.background_gradient(cmap='summer_r')","b2b4fd17":"sns.factorplot('Pclass', 'Survived', hue='Sex', data=df_train, \n               size=6, aspect=1.5)","7bea6092":"sns.factorplot(x='Sex', y='Survived', col='Pclass',\n              data=df_train, satureation=.5,\n               size=9, aspect=1\n              )","918c6924":"print('\uc81c\uc77c \ub098\uc774 \ub9ce\uc740 \ud0d1\uc2b9\uac1d : {:.1f} Years'.format(df_train['Age'].max()))\nprint('\uc81c\uc77c \uc5b4\ub9b0 \ud0d1\uc2b9\uac1d : {:.1f} Years'.format(df_train['Age'].min()))\nprint('\ud0d1\uc2b9\uac1d \ud3c9\uade0 \ub098\uc774 : {:.1f} Years'.format(df_train['Age'].mean()))\n","8048b86a":"fig, ax = plt.subplots(1, 1, figsize=(9, 5))\nsns.kdeplot(df_train[df_train['Survived'] == 1]['Age'], ax=ax)\nsns.kdeplot(df_train[df_train['Survived'] == 0]['Age'], ax=ax)\nplt.legend(['Survived == 1', 'Survived == 0'])","4ebfd517":"plt.show()\n","6069bb72":"f = plt.figure(figsize =(10,10))\nf.ax=plt.subplots(1,1,figsize=(10,10))\nplt.figure(figsize=(10,10))","9177bdf6":"f = plt.figure(figsize=(5,5))\na = np.arange(100)\nb = np.sin(a)\nplt.plot(b)","25841e1c":"# Age distribution withing classes\nplt.figure(figsize=(8, 6))\ndf_train['Age'][df_train['Pclass'] == 1].plot(kind='hist')\ndf_train['Age'][df_train['Pclass'] == 2].plot(kind='hist')\ndf_train['Age'][df_train['Pclass'] == 3].plot(kind='hist')\n","1bb91ff1":"plt.xlabel('Age')\nplt.title('Age Distribution within classes')\nplt.legend(['1st Class', '2nd Class', '3rd Class'])","62b39d68":"fig.ax = plt.subplots(1,1,figsize=(5,5))\na = np.arange(100)\nb = np.sin(a)\n","31c6de7c":"ax.plot(b)\n","2535b073":"fig,ax = plt.subplots(1,1,figsize=(9,5))\nsns.kdeplot(df_train[(df_train['Survived'] == 0)&(df_train['Pclass'] == 1)]['Age'],ax=ax)\nsns.kdeplot(df_train[(df_train['Survived'] == 0)&(df_train['Pclass'] == 1)]['Age'],ax=ax)\nplt.legend(['survived==0', 'survived==1'])\nplt.title('1st Class')\nplt.show()","716f491e":"fig,ax = plt.subplots(1,1,figsize=(9,5))\nsns.kdeplot(df_train[(df_train['Survived'] == 0)&(df_train['Pclass'] == 2)]['Age'],ax=ax)\nsns.kdeplot(df_train[(df_train['Survived'] == 1)&(df_train['Pclass'] == 2)]['Age'],ax=ax)\nplt.legend(['survived==0', 'survived==1'])\nplt.title('2st Class')\nplt.show()\n","7a4f7f96":"plt.figure(figsize=(8,6))\ndf_train['Age'][df_train['Pclass']== 1].plot(kind='hist')\ndf_train['Age'][df_train['Pclass']== 2].plot(kind='hist')\ndf_train['Age'][df_train['Pclass']== 3].plot(kind='hist')\nplt.xlabel('Age')\nplt.title('Age Distribution within classes')\nplt.legend(['1st Class','2nd Class','3rd Class'])\n","860dfe41":"# i\uac00 1\uc0b4\ubd80\ud130 80\uc0b4\uae4c\uc9c0 \ubcc0\ud654\uc2dc\ud0a4\ub294\ub370 x\ucd95 : y\ucd95\uc740 \uc0dd\uc874\ud655\ub960\uc758 \ubcc0\ud654\n# \ub098\uc774\uac00 \uc5b4\ub9b4\uc218\ub85d \uc0dd\uc874\ud655\ub960 \uac81\ub098 \ub192\uc740 \uac83\uc744 \uc54c \uc218 \uc788\uc74c\n# sum \uba38\uc784.. \ncummulate_survival_ratio = []\nfor i in range(1, 80):\n    cummulate_survival_ratio.append(df_train[df_train['Age'] < i]['Survived'].sum() \/ len(df_train[df_train['Age'] < i]['Survived']))\n    \nplt.figure(figsize=(7, 7))\nplt.plot(cummulate_survival_ratio)\nplt.title('Survival rate change depending on range of Age', y=1.02)\nplt.ylabel('Survival rate')\nplt.xlabel('Range of Age(0~x)')\nplt.show()\n\n","9011728a":"#female \uc0dd\uc874 \ud655\ub960\uc774 \ub354 \ub192\ub2e4 \nf,ax = plt.subplots(1,2, figsize =(18,8))\nsns.violinplot(\"Pclass\",\"Age\",hue=\"Survived\",data=df_train,scale='count',split=True,ax=ax[0])\nax[0].set_title('Pclass and Age vs Survived')\nax[0].set_yticks(range(0,110,10))\nsns.violinplot(\"Sex\",\"Age\",hue = \"Survived\",data = df_train, scale='count',split=True,ax=ax[1])\nax[1].set_title('Sex and Age vs Survived')\nax[1].set_yticks(range(0,110,10))\nplt.show()\n","bbdc38f2":"#\nf,ax = plt.subplots(1,1, figsize = (7,7))\ndf_train[['Embarked','Survived']].groupby(['Embarked'],as_index=True).mean().sort_values(by='Survived',ascending=False).plot.bar(ax=ax)\n","bb65257f":"#survived \uc5d0 \ub300\ud574 \uc815\ub82c\ud574\uc8fc\ub294 \uac83\uc744 \ud655\uc778 \uac00\ub2a5!\ndf_train[['Embarked','Survived']].groupby(['Embarked'],as_index=True).mean().sort_values(by='Survived',ascending=True)\n\n","d14cd110":"df_train[['Embarked','Survived']].groupby(['Embarked'],as_index=True).mean().sort_index(by='Survived')","7e49f5f2":"#\uc5ec\uc131\uc774 \ub9ce\uc744\uc218\ub85d \uc0dd\uc874\uc728\uc774 \ub192\ub2e4\n#C,Q\uc5d0\uc11c \uc0dd\uc874\uc728\uc774 \ub192\ub2f9\nf,ax = plt.subplots(2,2, figsize=(20,15))\nsns.countplot('Embarked', data = df_train, ax=ax[0,0])\nax[0,0].set_title('(1) No. Of Passsengers Boarded')\nsns.countplot('Embarked', hue ='Sex', data=df_train, ax=ax[0,1])\nax[0,1].set_title('(2) Male-Female Split for Embarked')\nsns.countplot('Embarked',hue='Survived', data=df_train,ax=ax[1,0])\nax[1,0].set_title('(3) Embarked vs Survived')\nsns.countplot('Embarked', hue = 'Pclass',data=df_train, ax=ax[1,1])\nax[1,1].set_title('(4) Embarked vs Pclass')\nplt.subplots_adjust(wspace =0.2 , hspace =0.5) #plot\uac04\uc758 \uac04\uaca9\uc744 \ub123\uc5b4\uc900\uac70!\nplt.show()\n","776f88d9":"df_train['FamilySize'] = df_train['SibSp']+df_train['Parch']\n+1 #\uc790\uc2e0\uc744 \ud3ec\ud568\ud574\uc57c\ud558\ub2c8 1\uc744 \ub354\ud55c\ub2e4\ndf_test['FamilySize']=df_test['SibSp']+df_test['Parch']+1 #\uc790\uc2e0\uc744 \ud3ec\ud568\ud574\uc57c\ud558\ub2c8 1\uc744 \ub354\ud55c\ub2e4\n","f8096ea2":"print(\"Maximum size of Family: \",df_train['FamilySize'].max())\nprint(\"Minimum size of Family: \", df_train['FamilySize'].min())","5d02363d":"#\ud63c\uc790 \ud0c4 \uc0ac\ub78c\uc740 500\uba85, \uac00\uc871\ub2e8\uc704\ub85c\ub3c4 \ub9ce\uc774 \ud0d0\n#familysize hue\ub85c \uc0c9\uae54 \ub123\uc5b4\uc90c. survived \ud55c \uc0ac\ub78c\ub4e4\nf,ax = plt.subplots(1,3, figsize =(40,10))\nsns.countplot('FamilySize',data=df_train,ax=ax[0])\nax[0].set_title('(1) No.Of Passengers Boarded', y=1.02)\n\nsns.countplot('FamilySize',hue='Survived',data=df_train, ax=ax[1])\nax[1].set_title('(2) Survived countplot dependging on FamilySize', y=1.02)\n\ndf_train[['FamilySize','Survived']].groupby(['FamilySize'],as_index=True).mean().sort_values(by='Survived',ascending=False).plot.bar(ax=ax[2])\nax[2].set_title('(3) Survived rate depending on FamilySize', y=1.02)\n\nplt.subplots_adjust(wspace=0.2, hspace=0.5)\nplt.show()","8f0f13b3":"#\uc774 \ub370\uc774\ud130\uc14b\uc744 \ud3ec\ud568\ud558\ub294 \ub0b4\uc6a9\n# \ud328\ud134 \uc798 \ubabb \ubcf4\uc5ec\uc90c\u3160\nfig,ax = plt.subplots(1,1, figsize=(8,8))\ng = sns.distplot(df_train['Fare'],color = 'b',label ='Skewness : {:.2f}'.format(df_train['Fare'].skew()),ax =ax)\ng = g.legend(loc ='best')\n","fcea0ccf":"#log\ub97c \ucde8\ud574\uc57c \ud55c\ub2e4\ndf_test.loc[df_test.Fare.isnull(), 'Fare']=df_test['Fare'].mean() \n\ndf_train['Fare'] = df_train['Fare'].map(lambda i: np.log(i) if i > 0 else 0)\ndf_test['Fare'] = df_test['Fare'].map(lambda i: np.log(i) if i > 0 else 0)\n","eae23160":"# g\ub85c \ubc18\ud658 log\ub97c \ucde8\ud574\uc11c scareness \uc904\uc5ec\uc8fc\uace0 --> feature engineering\nfig, ax = plt.subplots(1, 1, figsize=(8, 8))\ng = sns.distplot(df_train['Fare'], color='b', label='Skewness : {:.2f}'.format(df_train['Fare'].skew()), ax=ax)\ng = g.legend(loc='best')\n","9227c08a":"\ndf_train['Ticket'].value_counts()\n","1f20e3bb":"\ndf_train['Age'].isnull().sum()\n","ead2fa9a":"df_train.loc[(df_train.Age.isnull())&(df_train.Initial=='Mr'),'Age'] = 33\ndf_train.loc[(df_train.Age.isnull())&(df_train.Initial=='Mrs'),'Age'] = 36\ndf_train.loc[(df_train.Age.isnull())&(df_train.Initial=='Master'),'Age'] = 5\ndf_train.loc[(df_train.Age.isnull())&(df_train.Initial=='Miss'),'Age'] = 22\ndf_train.loc[(df_train.Age.isnull())&(df_train.Initial=='Other'),'Age'] = 46\n\ndf_test.loc[(df_test.Age.isnull())&(df_test.Initial=='Mr'),'Age'] = 33\ndf_test.loc[(df_test.Age.isnull())&(df_test.Initial=='Mrs'),'Age'] = 36\ndf_test.loc[(df_test.Age.isnull())&(df_test.Initial=='Master'),'Age'] = 5\ndf_test.loc[(df_test.Age.isnull())&(df_test.Initial=='Miss'),'Age'] = 22\ndf_test.loc[(df_test.Age.isnull())&(df_test.Initial=='Other'),'Age'] = 46","4235af7f":"df_train['Embarked'].isnull().sum()","50e78423":"df_train['Age_cat']=0","6a1b1c26":"df_train.head()","b8eab993":"df_train['Age_cat'] = 0\ndf_train.loc[df_train['Age'] < 10, 'Age_cat'] = 0\ndf_train.loc[(10 <= df_train['Age']) & (df_train['Age'] < 20), 'Age_cat'] = 1\ndf_train.loc[(20 <= df_train['Age']) & (df_train['Age'] < 30), 'Age_cat'] = 2\ndf_train.loc[(30 <= df_train['Age']) & (df_train['Age'] < 40), 'Age_cat'] = 3\ndf_train.loc[(40 <= df_train['Age']) & (df_train['Age'] < 50), 'Age_cat'] = 4\ndf_train.loc[(50 <= df_train['Age']) & (df_train['Age'] < 60), 'Age_cat'] = 5\ndf_train.loc[(60 <= df_train['Age']) & (df_train['Age'] < 70), 'Age_cat'] = 6\ndf_train.loc[70 <= df_train['Age'], 'Age_cat'] = 7\n\ndf_test['Age_cat'] = 0\ndf_test.loc[df_test['Age'] < 10, 'Age_cat'] = 0\ndf_test.loc[(10 <= df_test['Age']) & (df_test['Age'] < 20), 'Age_cat'] = 1\ndf_test.loc[(20 <= df_test['Age']) & (df_test['Age'] < 30), 'Age_cat'] = 2\ndf_test.loc[(30 <= df_test['Age']) & (df_test['Age'] < 40), 'Age_cat'] = 3\ndf_test.loc[(40 <= df_test['Age']) & (df_test['Age'] < 50), 'Age_cat'] = 4\ndf_test.loc[(50 <= df_test['Age']) & (df_test['Age'] < 60), 'Age_cat'] = 5\ndf_test.loc[(60 <= df_test['Age']) & (df_test['Age'] < 70), 'Age_cat'] = 6\ndf_test.loc[70 <= df_test['Age'], 'Age_cat'] = 7","37323a6c":"df_train.head()","8063d7b9":"def category_age(x):\n    if x < 10:\n        return 0\n    elif x < 20:\n        return 1\n    elif x < 30:\n        return 2\n    elif x < 40:\n        return 3\n    elif x < 50:\n        return 4\n    elif x < 60:\n        return 5\n    elif x < 70:\n        return 6\n    else:\n        return 7   \n    ","cca5721b":"df_train['Age_cat_2']=df_train['Age'].apply(category_age)","1ec33026":"# all \ubaa8\ub4e0\uac8c true\uc77c\ub54c\ub9cc true\n(df_train['Age_cat'] == df_train['Age_cat_2']).all()","8b8d2824":"# \ud558\ub098\ub77c\ub3c4 true\uba74 any\ub294 true! \n(df_train['Age_cat'] == df_train['Age_cat_2']).any()","05bcc3d4":"# axis =1\ub85c \ub450\uba74 \ucd95\uc774 1\ndf_train.drop(['Age','Age_cat_2'],axis=1,inplace= True)\ndf_test.drop(['Age'],axis=1,inplace= True)","6b49466f":"df_train.Initial.unique()","749ea796":"df_train.Initial.unique()","76b04053":"df_train.loc[df_train['Initial']=='Master','Initial']","3b67aa86":"df_train['Initial'] = df_train['Initial'].map({'Master': 0, 'Miss': 1, 'Mr': 2, 'Mrs': 3, 'Other': 4})\ndf_test['Initial'] = df_test['Initial'].map({'Master': 0, 'Miss': 1, 'Mr': 2, 'Mrs': 3, 'Other': 4})","b9e23f24":"#\ud2b9\uc815 \uce7c\ub7fc\uc5d0 \ubb50 \ub4e4\uc5b4\uc788\ub294\uc9c0 \ud655\uc778\ud558\uace0 \uc2f6\uc744 \ub54c \uc0ac\uc6a9\ubc95 2\uac00\uc9c0\ndf_train['Embarked'].unique()","6bb0e37a":"df_train['Embarked'].value_counts()","72fed96d":"# Embarked \uc22b\uc790\ub85c \ubc14\uafc8!\ndf_train['Embarked'] = df_train['Embarked'].map({'C': 0, 'Q': 1, 'S': 2})\ndf_test['Embarked'] = df_test['Embarked'].map({'C': 0, 'Q': 1, 'S': 2})","f8d0dd18":"df_train['Embarked'].isnull().any()","de1aa523":"df_train['Sex']=df_train['Sex'].map({'female':0, 'male':1})\ndf_test['Sex']=df_test['Sex'].map({'female':0, 'male':1})","4da28243":"heatmap_data = df_train[['Survived','Pclass','Sex','Fare','Embarked','FamilySize','Initial','Age_cat']]","4f554497":"# \ubd88\ud544\uc694\ud55c feature\uac00 \uc5c6\ub204!\uc120\ud615\uad00\uacc4\uac00 1\uc774\uba74 \ub458\uc911\uc5d0 \ud558\ub098\ub9cc \uc788\uc5b4\ub3c4 \uc0c1\uad00\uc5c6\ub2e4 \uc774\uc18c\ub9ac,,1 or -1\uc774\uba74 \ub458\uc911\uc5d0 \ud558\ub098\ub294 \ud544\uc694\uc5c6\uc11c\nheatmap_data = df_train[['Survived', 'Pclass', 'Sex', 'Fare', 'Embarked', 'FamilySize', 'Initial', 'Age_cat']] \n\ncolormap = plt.cm.RdBu\nplt.figure(figsize=(12,10))\nplt.title('Pearson Correlation of Features', y=1.05, size=15)\nsns.heatmap(heatmap_data.astype(float).corr(), linewidths=0.1, vmax=1.0,\n           square=True, cmap=colormap, linecolor='white', annot=True, annot_kws={\"size\": 16})\n\ndel heatmap_data\n","2672f828":"# one-hot encoding \ubaa8\ub378\uc758 \uc131\ub2a5\uc744 \ub192\uc774\uae30 \uc704\ud574 \uc6d0\ud56b\uc778\ucf54\ub529 \u314b\u314b \ndf_train = pd.get_dummies(df_train, columns = ['Initial'],prefix = 'Initial')\ndf_test = pd.get_dummies(df_test, columns = ['Initial'],prefix = 'Initial')","ff0298c7":"df_train.head()","ff8a67fe":"df_train = pd.get_dummies(df_train, columns=['Embarked'], prefix='Embarked')\ndf_test = pd.get_dummies(df_test, columns=['Embarked'], prefix='Embarked')","9c8d358c":"df_train.head()","3b2fab2d":"#\ud544\uc694\ud55c columns\ub9cc \ub0a8\uae30\uace0 \ub2e4 \uc9c0\uc6cc\ubc84\ub9ac\uae30\ndf_train.drop(['PassengerId', 'Name', 'SibSp', 'Parch', 'Ticket', 'Cabin'], axis=1, inplace=True)\ndf_test.drop(['PassengerId', 'Name',  'SibSp', 'Parch', 'Ticket', 'Cabin'], axis=1, inplace=True)","6eb74226":"df_train.head()","8fbadfc1":"df_test.head()","bb04a187":"#sklearn\uc740 \uc0ac\uc6a9\ud574 \uba38\uc2e0\ub7ec\ub2dd \ubaa8\ub378 \ub9cc\ub4e4\uae30\n#importing all the required ML packages\nfrom sklearn.ensemble import RandomForestClassifier #\ub79c\ub364\ud3ec\ub808\uc2a4\ud2b8\nfrom sklearn import metrics\nfrom sklearn.model_selection import train_test_split","0ce82dcb":"#\ud559\uc2b5 \ub370\uc774\ud130\uc640 target label\ub97c \ubd84\ub9ac\ud558\uae30 -- drop \uc0ac\uc6a9\ud574\nX_train = df_train.drop('Survived',axis=1).values\ntarget_label = df_train['Survived'].values\nX_test = df_test.values","c58606be":"X_tr, X_vld, y_tr, y_vld = train_test_split(X_train, target_label, test_size=0.3, random_state=2018)","1732ef16":"model = RandomForestClassifier()\nmodel.fit(X_tr, y_tr)\nprediction = model.predict(X_vld)","610e5c93":"#\ubaa8\ub378 \uca4c\ub7ec\nprint('\ucd1d {}\uba85 \uc911 {:.2f}% \uc815\ud655\ub3c4\ub85c \uc0dd\uc874\uc744 \ub9de\ucda4'.format(y_vld.shape[0], 100 * metrics.accuracy_score(prediction, y_vld)))","51bc60ce":"##feature importance \n##\uc5b4\ub5a4 feature\uc5d0 \uc9c0\uae08 \ub9cc\ub4e0 \ubaa8\ub378\uc774 \uac00\uc7a5 \ub9ce\uc774 \uc601\ud5a5\uc744 \ubc1b\uc558\ub294 \uc9c0 \ud655\uc778 \uac00\ub2a5","fd611009":"from pandas import Series\n\nfeature_importance = model.feature_importances_\nSeries_feat_imp = Series(feature_importance, index=df_test.columns)\n","35cf3da5":"plt.figure(figsize = (8,8))\nSeries_feat_imp.sort_values(ascending = True).plot.barh()\nplt.xlabel('Feature importance')\nplt.ylabel('Feature')\nplt.show()","9cced91c":"submission =  pd.read_csv('..\/input\/titanic\/gender_submission.csv')","57806ac3":"submission.head()","4e325334":"prediction = model.predict(X_test)\nsubmission['Survived']=prediction","f66761d3":"submission.to_csv('\/my_first_submission.csv',index=False)","fd7ac28a":"df_tarin.head()"}}