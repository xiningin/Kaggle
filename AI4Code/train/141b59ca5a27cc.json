{"cell_type":{"30c0301f":"code","df56a64d":"code","38f989dd":"code","b26ed9ca":"code","10d92b49":"code","3cf77cae":"code","211ae98b":"code","1e84dd70":"code","93e0b0b3":"code","8a7cd76e":"code","c483a23b":"code","bd199b10":"code","0817e8e3":"code","ef3a52ce":"code","daae251d":"code","c625f34a":"code","76c232f2":"code","62bdc9bc":"code","6ae69f7f":"code","b965f8f0":"code","efcc4f68":"code","6d34f9e2":"code","f75f5f9e":"code","03a7e3de":"code","c7528d93":"code","a72a8bcc":"code","dc98c507":"code","8f90aa04":"code","6534af20":"code","42674a42":"code","64af0d2d":"code","96e91eb8":"code","b0b56010":"markdown","dedc7f18":"markdown","d0f81722":"markdown"},"source":{"30c0301f":"import os\nimport cv2\n\nimport pydicom\nimport pandas as pd\nimport numpy as np\nimport tensorflow as tf\nfrom tensorflow.keras.optimizers.schedules import PiecewiseConstantDecay\n\nimport matplotlib.pyplot as plt\n\nfrom tqdm.notebook import tqdm\n\nprint(tf.__version__)","df56a64d":"# CONSTANTS\nBATCH_SIZE = 32\nassert tf.test.is_gpu_available()\nAUTOTUNE = tf.data.experimental.AUTOTUNE","38f989dd":"train = pd.read_csv('..\/input\/osic-pulmonary-fibrosis-progression\/train.csv') ","b26ed9ca":"train.head()","10d92b49":"train.SmokingStatus.unique()","3cf77cae":"def get_tab(df):\n    vector = [(df.Age.values[0] - 30) \/ 30] \n    \n    if df.Sex.values[0] == 'Male':\n       vector.append(0)\n    else:\n       vector.append(1)\n    \n    if df.SmokingStatus.values[0] == 'Never smoked':\n        vector.extend([0,0])\n    elif df.SmokingStatus.values[0] == 'Ex-smoker':\n        vector.extend([1,1])\n    elif df.SmokingStatus.values[0] == 'Currently smokes':\n        vector.extend([0,1])\n    else:\n        vector.extend([1,0])\n    return np.array(vector) ","211ae98b":"A = {} \nTAB = {} \nP = [] \nfor i, p in tqdm(enumerate(train.Patient.unique())):\n    sub = train.loc[train.Patient == p, :] \n    fvc = sub.FVC.values\n    weeks = sub.Weeks.values\n    c = np.vstack([weeks, np.ones(len(weeks))]).T\n    a, b = np.linalg.lstsq(c, fvc)[0]\n    \n    A[p] = a\n    TAB[p] = get_tab(sub)\n    P.append(p)","1e84dd70":"def get_img(path):\n    d = pydicom.dcmread(path)\n    return cv2.resize((d.pixel_array - d.RescaleIntercept) \/ (d.RescaleSlope * 1000), (512, 512))","93e0b0b3":"# x, y = [], []\n# for p in tqdm(train.Patient.unique()):\n#     try:\n#         ldir = os.listdir(f'..\/input\/osic-pulmonary-fibrosis-progression-lungs-mask\/mask_noise\/mask_noise\/{p}\/')\n#         numb = [float(i[:-4]) for i in ldir]\n#         for i in ldir:\n#             x.append(cv2.imread(f'..\/input\/osic-pulmonary-fibrosis-progression-lungs-mask\/mask_noise\/mask_noise\/{p}\/{i}', 0).mean())\n#             y.append(float(i[:-4]) \/ max(numb))\n#     except:\n#         pass","8a7cd76e":"# plt.figure(figsize=(10,10))\n\n# plt.plot(y, x, '.', alpha=0.25)\n# plt.axvspan(0.17, 0.8, color='red')","c483a23b":"import seaborn as sns\n\nsns.distplot(list(A.values()));","bd199b10":"from tensorflow.keras.utils import Sequence\n\nclass IGenerator(Sequence):\n    BAD_ID = ['ID00011637202177653955184', 'ID00052637202186188008618']\n    def __init__(self, keys, a, tab):\n        self.keys = [k for k in keys if k not in self.BAD_ID]\n        self.a = a\n        self.tab = tab\n        self.batch_size = BATCH_SIZE\n        \n        self.train_data = {}\n        for p in train.Patient.unique():\n            ldir = os.listdir(f'..\/input\/osic-pulmonary-fibrosis-progression\/train\/{p}\/')\n            numb = [float(i[:-4]) for i in ldir]\n            self.train_data[p] = [i for i in os.listdir(f'..\/input\/osic-pulmonary-fibrosis-progression\/train\/{p}\/') \n                                  if int(i[:-4]) \/ len(ldir) < 0.8 and int(i[:-4]) \/ len(ldir) > 0.15]\n    \n    def __len__(self):\n        return 1000\n    \n    def __getitem__(self, idx):\n        x = []\n        a, tab = [], [] \n        keys = np.random.choice(self.keys, size = self.batch_size)\n        for k in keys:\n            try:\n                i = np.random.choice(self.train_data[k], size=1)[0]\n                img = get_img(f'..\/input\/osic-pulmonary-fibrosis-progression\/train\/{k}\/{i}')\n                mask = cv2.resize(cv2.imread(f'..\/input\/osic-pulmonary-fibrosis-progression-lungs-mask\/mask_clear\/mask_clear\/{k}\/{i[:-4]}.jpg', 0), (512, 512))> 0\n                img[~mask] = 0\n                x.append(img)\n                a.append(self.a[k])\n                tab.append(self.tab[k])\n            except:\n                print(k, i)\n       \n        x,a,tab = np.array(x), np.array(a), np.array(tab)\n        x = np.expand_dims(x, axis=-1)\n        return [x, tab] , a","0817e8e3":"from tensorflow.keras.applications import ResNet50","ef3a52ce":"from tensorflow.keras.layers import (\n    Dense, Dropout, Activation, Flatten, Input, BatchNormalization, GlobalAveragePooling2D, Add, Conv2D, AveragePooling2D, \n    LeakyReLU, Concatenate \n)\n\nfrom tensorflow.keras import Model\nfrom tensorflow.keras.optimizers import Nadam\n\ndef get_model(shape=(512, 512, 1)):\n    \n    #base_model = EfficientNetB4(include_top=False, weights=None)\n    base_model = ResNet50(include_top=False, weights=None, input_shape=shape)\n    \n    inp = Input(shape=shape)\n    \n    x = base_model(inp)\n    \n    x = GlobalAveragePooling2D()(x)\n    \n    inp2 = Input(shape=(4,))\n    x2 = tf.keras.layers.GaussianNoise(0.2)(inp2)\n    x = Concatenate()([x, x2]) \n    x = Dropout(0.6)(x) \n    x = Dense(1)(x)\n    #x2 = Dense(1)(x)\n    return Model([inp, inp2] , x)","daae251d":"model = get_model()\nmodel.summary()","c625f34a":"# model.compile(optimizer=tf.keras.optimizers.Adam(learning_rate=0.0003), loss='mae') ","76c232f2":"from sklearn.model_selection import train_test_split \n\ntr_p, vl_p = train_test_split(P, \n                              shuffle=True, \n                              train_size= 0.8) ","62bdc9bc":"train_gen = IGenerator(keys=tr_p, \n               a = A, \n               tab = TAB)\n\nval_gen = IGenerator(keys=vl_p, \n           a = A, \n           tab = TAB)","6ae69f7f":"steps_per_epoch = 100\nnum_epochs = 30\ninitial_lr = 0.001\n\n# lr_fn = PiecewiseConstantDecay(\n#     boundaries=[int(steps_per_epoch * 5),\n#                 int(steps_per_epoch * 10)],\n#     values=[initial_lr, initial_lr * 0.1, initial_lr * 0.01])\n\n\ner = tf.keras.callbacks.EarlyStopping(\n    monitor=\"val_loss\",\n    min_delta=1e-3,\n    patience=10,\n    verbose=0,\n    mode=\"auto\",\n    baseline=None,\n    restore_best_weights=True,\n)\n\nreduce_lr = tf.keras.callbacks.ReduceLROnPlateau(monitor='val_loss', factor=0.2,\n                              patience=5, min_lr=0.0001)","b965f8f0":"optimizer = tf.keras.optimizers.SGD(learning_rate=initial_lr, momentum=0.9)\n\n# optimizer = tf.keras.optimizers.Adam(learning_rate=initial_lr)\n","efcc4f68":"\nmodel.compile(optimizer=optimizer, loss='mae')","6d34f9e2":"model.fit_generator(train_gen,\n                    steps_per_epoch = steps_per_epoch,\n                    validation_data=val_gen,\n                    validation_steps = 20,\n                    callbacks = [er, reduce_lr],\n                    epochs=num_epochs,\n                    workers=4)","f75f5f9e":"def score(fvc_true, fvc_pred, sigma):\n    sigma_clip = np.maximum(sigma, 70)\n    delta = np.abs(fvc_true - fvc_pred)\n    delta = np.minimum(delta, 1000)\n    sq2 = np.sqrt(2)\n    metric = (delta \/ sigma_clip)*sq2 + np.log(sigma_clip* sq2)\n    return np.mean(metric)","03a7e3de":"from tqdm.notebook import tqdm\n\nmetric = []\nfor q in tqdm(range(1, 10)):\n    m = []\n    for p in vl_p:\n        x = [] \n        tab = [] \n        \n        if p in ['ID00011637202177653955184', 'ID00052637202186188008618']:\n            continue\n            \n        ldir = os.listdir(f'..\/input\/osic-pulmonary-fibrosis-progression\/train\/{p}\/')\n        for i in ldir:\n            if int(i[:-4]) \/ len(ldir) < 0.8 and int(i[:-4]) \/ len(ldir) > 0.15:\n                x.append(get_img(f'..\/input\/osic-pulmonary-fibrosis-progression\/train\/{p}\/{i}')) \n                tab.append(get_tab(train.loc[train.Patient == p, :])) \n        if len(x) < 1:\n            continue\n        tab = np.array(tab) \n    \n        x = np.expand_dims(x, axis=-1)\n        _a = model.predict([x, tab])\n        a = np.quantile(_a, q \/ 10)\n        \n        percent_true = train.Percent.values[train.Patient == p]\n        fvc_true = train.FVC.values[train.Patient == p]\n        weeks_true = train.Weeks.values[train.Patient == p]\n        \n        fvc = a * (weeks_true - weeks_true[0]) + fvc_true[0]\n        percent = percent_true[0] - a * abs(weeks_true - weeks_true[0])\n        m.append(score(fvc_true, fvc, percent))\n    print(np.mean(m))\n    metric.append(np.mean(m))","c7528d93":"q = (np.argmin(metric) + 1)\/ 10\nq","a72a8bcc":"sub = pd.read_csv('..\/input\/osic-pulmonary-fibrosis-progression\/sample_submission.csv') \nsub.head() ","dc98c507":"test = pd.read_csv('..\/input\/osic-pulmonary-fibrosis-progression\/test.csv') \ntest.head()","8f90aa04":"A_test, B_test, P_test,W, FVC= {}, {}, {},{},{} \nSTD, WEEK = {}, {} \nfor p in test.Patient.unique():\n    x = [] \n    tab = [] \n    ldir = os.listdir(f'..\/input\/osic-pulmonary-fibrosis-progression\/test\/{p}\/')\n    for i in ldir:\n        if int(i[:-4]) \/ len(ldir) < 0.8 and int(i[:-4]) \/ len(ldir) > 0.15:\n            x.append(get_img(f'..\/input\/osic-pulmonary-fibrosis-progression\/test\/{p}\/{i}')) \n            tab.append(get_tab(test.loc[test.Patient == p, :])) \n    if len(x) <= 1:\n        continue\n    tab = np.array(tab) \n            \n    x = np.expand_dims(x, axis=-1) \n    _a = model.predict([x, tab]) \n    a = np.quantile(_a, q)\n    A_test[p] = a\n    B_test[p] = test.FVC.values[test.Patient == p] - a*test.Weeks.values[test.Patient == p]\n    P_test[p] = test.Percent.values[test.Patient == p] \n    WEEK[p] = test.Weeks.values[test.Patient == p]","6534af20":"for k in sub.Patient_Week.values:\n    p, w = k.split('_')\n    w = int(w) \n    \n    fvc = A_test[p] * w + B_test[p]\n    sub.loc[sub.Patient_Week == k, 'FVC'] = fvc\n    sub.loc[sub.Patient_Week == k, 'Confidence'] = (\n        P_test[p] - A_test[p] * abs(WEEK[p] - w)\n)\n    ","42674a42":"sub.head()","64af0d2d":"sub[[\"Patient_Week\",\"FVC\",\"Confidence\"]].to_csv(\"submission.csv\", index=False)","96e91eb8":"print('success')\nprint('success')","b0b56010":"## Decay theory\nInput for test:\n   * FVC in n week\n   * Percent in n week \n   * Age\n   * Sex\n   * Smoking status\n   * CT in n week\n   \nResult:\n   * FVC in any week\n   * percent in any week\n   \n$FVC = a.quantile(0.75) * (week - week_{test}) + FVC_{test}$\n\n$Confidence = Percent + a.quantile(0.75) * abs(week - week_{test}) $\n\nSo let's try predict coefficient a. ","dedc7f18":"## CNN for coeff prediction","d0f81722":"## Predict"}}