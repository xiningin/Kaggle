{"cell_type":{"72ec325b":"code","cf36b553":"code","4a9bf39b":"code","4d5532ab":"code","9503b266":"code","01e78c60":"code","c96d1c18":"code","e5a38f5a":"code","4a3ec293":"code","6301c4df":"code","5c117fba":"code","2ff719af":"code","25fc7798":"code","c7739183":"code","3a2ebd06":"code","f85a6594":"code","2800a7cf":"code","90f5cff6":"code","be6b939f":"code","59390cfb":"code","8fe91e4f":"code","a7d62c2f":"code","db8fb999":"code","3fe9bf5e":"code","81e24265":"code","3838dae6":"code","4f4de2b9":"code","aa47e8fc":"code","467d2b46":"code","904a5cf8":"code","ca04a654":"code","790c8815":"code","e0d76456":"code","368b892f":"code","b988f42f":"code","35ef5112":"code","8b60975f":"code","c67e824d":"code","bf7d415f":"code","a5122271":"code","40408eca":"code","58d98936":"code","961d66e8":"code","387c1764":"code","3498af5b":"markdown","1fcac912":"markdown","94ba81ea":"markdown","9d15db4f":"markdown","5e1059a7":"markdown","bb151467":"markdown","2be0b97d":"markdown","f106f1fb":"markdown","a6ca0c85":"markdown","deac7449":"markdown","4b731889":"markdown"},"source":{"72ec325b":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns","cf36b553":"train_data = pd.read_csv('..\/input\/house-prices-advanced-regression-techniques\/train.csv')\ntest_data = pd.read_csv('..\/input\/house-prices-advanced-regression-techniques\/test.csv')","4a9bf39b":"train_data.head(10)","4d5532ab":"test_data.head(10)","9503b266":"train_data.info()","01e78c60":"test_data.info()","c96d1c18":"print(train_data.shape)\nprint(test_data.shape)","e5a38f5a":"train_data.describe()","4a3ec293":"pd.options.display.min_rows = 80\ntrain_data.isnull().sum().sort_values(ascending=False)","6301c4df":"train_data.drop(['PoolQC', 'MiscFeature', 'Alley', 'Fence','GarageYrBlt'], axis = 1, inplace = True)\ntest_data.drop(['PoolQC', 'MiscFeature', 'Alley', 'Fence','GarageYrBlt'], axis = 1, inplace = True)","5c117fba":"train_data['FireplaceQu'] = train_data['FireplaceQu'].fillna(train_data['FireplaceQu'].dropna().mode()[0])\ntrain_data['LotFrontage'] = train_data['LotFrontage'].fillna(train_data['LotFrontage'].dropna().mode()[0])\ntrain_data['GarageCond'] = train_data['GarageCond'].fillna(train_data['GarageCond'].dropna().mode()[0])\ntrain_data['GarageType'] = train_data['GarageType'].fillna(train_data['GarageType'].dropna().mode()[0])\ntrain_data['GarageFinish'] = train_data['GarageFinish'].fillna(train_data['GarageFinish'].dropna().mode()[0])\ntrain_data['GarageQual'] = train_data['GarageQual'].fillna(train_data['GarageQual'].dropna().mode()[0])\ntrain_data['BsmtFinType2'] = train_data['BsmtFinType2'].fillna(train_data['BsmtFinType2'].dropna().mode()[0])\ntrain_data['BsmtExposure'] = train_data['BsmtExposure'].fillna(train_data['BsmtExposure'].dropna().mode()[0])\ntrain_data['BsmtQual'] = train_data['BsmtQual'].fillna(train_data['BsmtQual'].dropna().mode()[0])\ntrain_data['BsmtCond'] = train_data['BsmtCond'].fillna(train_data['BsmtCond'].dropna().mode()[0])\ntrain_data['BsmtFinType1'] = train_data['BsmtFinType1'].fillna(train_data['BsmtFinType1'].dropna().mode()[0])\ntrain_data['MasVnrArea'] = train_data['MasVnrArea'].fillna(train_data['MasVnrArea'].dropna().mode()[0])\ntrain_data['MasVnrType'] = train_data['MasVnrType'].fillna(train_data['MasVnrType'].dropna().mode()[0])\ntrain_data['Electrical'] = train_data['Electrical'].fillna(train_data['Electrical'].dropna().mode()[0])","2ff719af":"train_data.isnull().sum().sort_values(ascending=False)","25fc7798":"test_data.isnull().sum().sort_values(ascending=False)","c7739183":"test_data['FireplaceQu'] = test_data['FireplaceQu'].fillna(test_data['FireplaceQu'].dropna().mode()[0])\ntest_data['LotFrontage'] = test_data['LotFrontage'].fillna(test_data['LotFrontage'].dropna().mode()[0])\ntest_data['GarageCond'] = test_data['GarageCond'].fillna(test_data['GarageCond'].dropna().mode()[0])\ntest_data['GarageType'] = test_data['GarageType'].fillna(test_data['GarageType'].dropna().mode()[0])\ntest_data['GarageFinish'] = test_data['GarageFinish'].fillna(test_data['GarageFinish'].dropna().mode()[0])\ntest_data['GarageQual'] = test_data['GarageQual'].fillna(test_data['GarageQual'].dropna().mode()[0])\ntest_data['BsmtFinType2'] = test_data['BsmtFinType2'].fillna(test_data['BsmtFinType2'].dropna().mode()[0])\ntest_data['BsmtExposure'] = test_data['BsmtExposure'].fillna(test_data['BsmtExposure'].dropna().mode()[0])\ntest_data['BsmtQual'] = test_data['BsmtQual'].fillna(test_data['BsmtQual'].dropna().mode()[0])\ntest_data['BsmtCond'] = test_data['BsmtCond'].fillna(test_data['BsmtCond'].dropna().mode()[0])\ntest_data['BsmtFinType1'] = test_data['BsmtFinType1'].fillna(test_data['BsmtFinType1'].dropna().mode()[0])\ntest_data['MasVnrArea'] = test_data['MasVnrArea'].fillna(test_data['MasVnrArea'].dropna().mode()[0])\ntest_data['MasVnrType'] = test_data['MasVnrType'].fillna(test_data['MasVnrType'].dropna().mode()[0])\ntest_data['MSZoning'] = test_data['MSZoning'].fillna(test_data['MSZoning'].dropna().mode()[0])\ntest_data['BsmtHalfBath'] = test_data['BsmtHalfBath'].fillna(test_data['BsmtHalfBath'].dropna().mode()[0])\ntest_data['Functional'] = test_data['Functional'].fillna(test_data['Functional'].dropna().mode()[0])\ntest_data['BsmtFullBath'] = test_data['BsmtFullBath'].fillna(test_data['BsmtFullBath'].dropna().mode()[0])\ntest_data['Utilities'] = test_data['Utilities'].fillna(test_data['Utilities'].dropna().mode()[0])\ntest_data['Exterior1st'] = test_data['Exterior1st'].fillna(test_data['Exterior1st'].dropna().mode()[0])\ntest_data['Exterior2nd'] = test_data['Exterior2nd'].fillna(test_data['Exterior2nd'].dropna().mode()[0])\ntest_data['KitchenQual'] = test_data['KitchenQual'].fillna(test_data['KitchenQual'].dropna().mode()[0])\ntest_data['SaleType'] = test_data['SaleType'].fillna(test_data['SaleType'].dropna().mode()[0])","3a2ebd06":"test_data['BsmtFinSF1'] = test_data['BsmtFinSF1'].fillna(test_data['BsmtFinSF1'].dropna().mean())\ntest_data['BsmtFinSF2'] = test_data['BsmtFinSF2'].fillna(test_data['BsmtFinSF2'].dropna().mean())\ntest_data['BsmtUnfSF'] = test_data['BsmtUnfSF'].fillna(test_data['BsmtUnfSF'].dropna().mean())\ntest_data['TotalBsmtSF'] = test_data['TotalBsmtSF'].fillna(test_data['TotalBsmtSF'].dropna().mean())\ntest_data['GarageCars'] = test_data['GarageCars'].fillna(test_data['GarageCars'].dropna().mean())\ntest_data['GarageArea'] = test_data['GarageArea'].fillna(test_data['GarageArea'].dropna().mean())","f85a6594":"test_data.isnull().sum().sort_values(ascending=False)","2800a7cf":"train_data.info()","90f5cff6":"test_data.info()","be6b939f":"train_data.corr()","59390cfb":"plt.figure(figsize=(35,15))\na = sns.heatmap(train_data.corr(), annot=True, fmt='.1f')\nsns.heatmap(train_data.corr())","8fe91e4f":"final_df = pd.concat([train_data,test_data],axis=0)\nfinal_df","a7d62c2f":"def category(multcolumns):\n    df_final=final_df\n    i=0\n    for fields in multcolumns:\n        \n        print(fields)\n        df1=pd.get_dummies(final_df[fields],drop_first=True)\n        \n        final_df.drop([fields],axis=1,inplace=True)\n        if i==0:\n            df_final=df1.copy()\n        else:\n            \n            df_final=pd.concat([df_final,df1],axis=1)\n        i=i+1\n       \n        \n    df_final=pd.concat([final_df,df_final],axis=1)\n        \n    return df_final","db8fb999":"cat_feature = [feature for feature in train_data.columns if train_data[feature].dtype==\"O\"]\nlen(cat_feature)","3fe9bf5e":"final_df = category(cat_feature)","81e24265":"final_df.shape","3838dae6":"train_df = final_df.iloc[:1460,:]\ntest_df= final_df.iloc[1460:,:]","4f4de2b9":"train_df","aa47e8fc":"test_df","467d2b46":"test_df.drop([\"SalePrice\"],axis=1,inplace=True)","904a5cf8":"tId = test_df[\"Id\"]","ca04a654":"X_train=train_df.drop(['SalePrice'],axis=1)\nY_train=train_df['SalePrice']","790c8815":"from sklearn.preprocessing import StandardScaler\nsc = StandardScaler()\nX_train = sc.fit_transform(X_train)\ntest_df = sc.transform(test_df)","e0d76456":"X_train","368b892f":"test_df ","b988f42f":"from sklearn.linear_model import LinearRegression\nreg = LinearRegression()\nreg.fit(X_train,Y_train)","35ef5112":"reg.coef_","8b60975f":"reg.intercept_","c67e824d":"reg.score(X_train,Y_train)","bf7d415f":"result = reg.predict(X_train)","a5122271":"tst_data = pd.DataFrame()\ntst_data['Actual Values'] = Y_train\ntst_data['Predicted_values'] = result\ntst_data","40408eca":"plt.figure(figsize = (6,4))\nplt.plot(Y_train, 'o', color = 'blue', label = 'Actual Values')\nplt.plot(result, color = 'green', label = 'Predicted Values')\nplt.legend()","58d98936":"Y_pred = reg.predict(test_df)","961d66e8":"lst = tId\nlst2 = list(Y_pred)\ndf = pd.DataFrame(list(zip(lst, lst2)),\n               columns =['Id', 'SalePrice'])","387c1764":"df.to_csv('result.csv',index=False)","3498af5b":"### Scaling the data","1fcac912":"### Reading\/loading the dataset","94ba81ea":"### Using linear regression on the data","9d15db4f":"### Final predictions","5e1059a7":"### Comparing the actual and predicted values from the data","bb151467":"### Dealing with null values in train and test data","2be0b97d":"## Q2. Kaggle Competition","f106f1fb":"### Importing libraries","a6ca0c85":"### Exporting the data into a csv file","deac7449":"# #Task-7.2\n## Name: Aftab Ahmed\n## Registration ID: SIRSS2310","4b731889":"### Concatenating train and test data and doing one hot encoding for categorical data"}}