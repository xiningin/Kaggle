{"cell_type":{"7825ecaa":"code","bee302fa":"code","23699c28":"code","eb4a53e9":"code","046e8657":"code","250168d9":"code","2036147b":"code","4e55fb96":"code","0b721175":"code","d25b0436":"code","37141a8c":"code","20452147":"code","b73509a6":"code","ed6e568a":"code","75b2b8a7":"code","948ff920":"code","fddc5973":"code","ff7ee6a6":"code","573a2d88":"code","a9fec9fd":"code","33665f9f":"code","47ea7c81":"code","4979efd4":"code","437e9b62":"code","db8cbf09":"code","ef6c4e38":"code","676041a7":"markdown"},"source":{"7825ecaa":"# Some Opeartions\nprint(\"6\/2 = \\t\\t{0}\".format(6\/2))  # 6.0\/2.0 = 3.0\nprint(\"6\/\/2 = \\t\\t{0}\".format(6\/\/2)) # 6\/2 = 3\nprint(\"6*2 = \\t\\t{0}\".format(6*2))  # 6.2 = 12\nprint(\"6**2 = \\t\\t{0}\".format(6**2)) # 6^2 = 36\nprint(\"9**(1\/2) = \\t{0}\".format(9**(1\/2))) # 9^(1\/2) = 3.0\nprint(\"3 * 'A': \\t{0}\".format(3 * 'A')) # >>> AAA\n# Backslash is wildcard\nprint(\"\\\"\\\\\") # >>> \"\\","bee302fa":"# Python is case sensitive\nvar = 1\nVar = 2\nprint (var+Var)","23699c28":"#Get Input From Console\n#print(input(\"Your Name: \"))","eb4a53e9":"# PreDefined Buit-in Functions:\n#type(), len(), float(), str(), int(), round(), del(), sum(), del(), max(), min()\nprint(\"float(5): {}\".format(float(5)))\nprint(\"len(\\\"AAA\\\"): {}\".format(len(\"AAA\")))\nprint(\"int(\\\"10\\\"): {}\".format(int(\"10\")))\nprint(\"str(int(\\\"10\\\")): {}\".format(str(int(\"10\"))))\nprint(\"round(10.3): {}\".format(round(10.3)))\nprint(\"type(5): {}\".format(type(5)))\nprint(\"sum([5,4,1]): {}\".format(sum([5,4,1])))\nprint(\"max([5,4,1]): {}\".format(max([5,4,1])))\nprint(\"min([5,4,1]): {}\".format(min([5,4,1])))\nprint(\"del(x): delete x variable\")\n","046e8657":"# Function Defining:\ndef fun_name(var1, var2 = 5):\n    return var1 * var2\nfun_name(2, 3)","250168d9":"# Function Overloading:\ndef fun_name(v1, v2, *args):\n    return (v1+v2+args[0]+args[1]+args[2])\nprint(fun_name(1,1,1,1,1))","2036147b":"# Lambda Functions:\nmy_fun = lambda v1,v2: v1*v2\nprint(my_fun(2,3))","4e55fb96":"# List data type using\nlist = [[0, 1, 2, 3, 4],\n       [10,11,12,13,14],\n       [20,21,22,23,24]] # 5x3 list\n\nlist","0b721175":"print(\"list[0]: \\t{0}\".format(list[0])) # Get first row\nprint(\"list[-1]: \\t{0}\".format(list[-1])) # Get last row\nprint(\"list[-2]: \\t{0}\".format(list[-2])) # Get second to last row\nprint(\"list[0][0]: \\t{0}\".format(list[0][0])) # Get first member in first row\nprint(\"list[0:2]: \\t{0}\".format(list[0:2])) # Get [0->2) members","d25b0436":"# Both str and int typed list can be created\nlist = [\"A\", 1, \"B\"]\nlist","37141a8c":"# Get Buit-in Functions.\nprint(\"dir(): {}\".format(dir()))","20452147":"# list.methods()\nprint(\"dir(list): {}\".format(dir(list)))","b73509a6":"# int.methods()\nprint(\"dir(int): {}\".format(dir(int)))","ed6e568a":"# str.methods()\nprint(\"dir(str): {}\".format(dir(str)))","75b2b8a7":"# bool.methods()\nprint(\"dir(bool): {}\".format(dir(bool)))","948ff920":"# list method example\nlist = [1,3,2,5,4]\nprint(type(list))\nprint(\"list: \\t\\t\\t{}\".format(list))\nlist.append(6)\nprint(\"append(6): \\t\\t{}\".format(list))\nlist.remove(6)\nprint(\"remove(6): \\t\\t{}\".format(list))\nlist.insert(0,0)\nprint(\"insert(0,0): \\t\\t{}\".format(list))\nlist.reverse()\nprint(\"reverse(): \\t\\t{}\".format(list))\nlist.sort()\nprint(\"sort(): \\t\\t{}\".format(list))\nlist.sort(reverse=True)\nprint(\"sort(reverse=True): \\t{}\".format(list))\nlist.extend(\"ZAC\")\nprint(\"extend(\\\"ZAC\\\"): \\t\\t{}\".format(list))\nlist2 = list.copy()\nprint(\"list2 = list.copy(): \\t{}\".format(list2))\nlist.clear()\nprint(\"list.clear(): \\t\\t{}\".format(list))\nprint(\"list2.count(\\\"Z\\\"): \\t{}\".format(list2.count(\"Z\")))\nprint(\"list2.count(\\\"0\\\"): \\t{}\".format(list2.count(\"0\")))\nprint(\"list2: \\t\\t\\t{}\".format(list2))\nprint(\"list2.index(5): \\t{}\".format(list2.index(5)))\nlist2.pop(0)\nprint(\"list2.pop(0): \\t\\t{}\".format(list2))","fddc5973":"# Get help built-in functions\nhelp(list.insert)\nhelp(list.extend)\nhelp(list.pop)","ff7ee6a6":"# Tuple data type:\ntuple = (1,2,3,\"a\",\"b\")\nprint(type(tuple))\n# All build-in functions same as list.\nprint(\"{} \\n\".format(tuple))\nprint(\"dir(tuble): {}\".format(dir(tuple)))","573a2d88":"# Dictionary data type:\ndictionary = {\"A\":1, \"B\":2, \"C\":3}\nprint(type(dictionary))\nprint(dictionary)\nprint(dictionary.keys())\nprint(dictionary.values())\nprint(\"\\ndir(dictionary): {}\".format(dir(dictionary)))","a9fec9fd":"# if statement:\ndef compare(v1, v2):\n    v1 = 1\n    v2 = 2\n    if (v1>v2):\n        return \"v1>v2\"\n    elif (v1==v2):\n        return \"v1==v2\"\n    else:\n        return \"v1<v2\"\n    \nprint(compare(1,2))","33665f9f":"# if - in statements\ndictionary = {\"A\":1, \"B\":2, \"C\":3}\nif \"A\" in dictionary.keys():\n    print(\"dictionary has \\\"A\\\"\")\nelif \"a\" in dictionary:\n    print(\"dictionary has \\\"a\\\"\")\n\n","47ea7c81":"# for loop:\nfor each in range(0,10):\n    print(each, end=' ')","4979efd4":"for each in \"Ali Veli\":\n    print(each, end='\/')","437e9b62":"for each in \"Ali Veli\".split():\n    print(each, end='+')","db8cbf09":"list = [1,2,3]\nsum = 0\nfor each in list:\n    sum += each\nprint(sum)","ef6c4e38":"# while loop:\nvar = 0\nwhile(var < 10):\n    var = var + 1\n    print(var, end=' ')","676041a7":"# <h2>**Python Basics**"}}