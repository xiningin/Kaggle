{"cell_type":{"747cd652":"code","a96f26a1":"code","f19ad8c7":"code","6ffed7cd":"code","53f80f60":"code","409af648":"code","4d5416da":"code","c416107f":"code","cf4d3512":"code","0478fcf8":"code","e12ac39d":"code","4fe11314":"code","6f7fb120":"code","3797fb12":"code","1f7b2c16":"code","2f9c6b62":"markdown","f2938bd3":"markdown","5ef7811a":"markdown","4d73d697":"markdown","8c4c7fa6":"markdown","50c794de":"markdown","8637aaf9":"markdown","e00e0793":"markdown","4df8a442":"markdown","a73f4be2":"markdown","00a7d671":"markdown","9c8cd7d9":"markdown"},"source":{"747cd652":"import numpy as np\nimport pandas as pd\nfrom pandas.plotting import register_matplotlib_converters\nimport matplotlib.pyplot as plt\nfrom matplotlib.dates import DateFormatter\nimport seaborn as sns\nsns.set(style=\"darkgrid\")\nregister_matplotlib_converters()\n# Input data files are available in the \"..\/input\/\" directory.","a96f26a1":"# Import data\ndf = pd.read_csv('\/kaggle\/input\/novel-corona-virus-2019-dataset\/covid_19_data.csv')\n\n\n# Drop unneded columns and parse dates\n# Drop 'Province\/State' data because the purpose is to compare between countries.\ndf = df.drop(columns=['SNo', 'Province\/State', 'Last Update'])\ndf['ObservationDate'] = pd.to_datetime(df['ObservationDate'])","f19ad8c7":"# Group by selected countries: Spain, Italy, China, United Kingdom (UK)\ngb_countries = df.groupby(by='Country\/Region')\ndf_spain = gb_countries.get_group('Spain').reset_index(drop=True)\ndf_italy = gb_countries.get_group('Italy').reset_index(drop=True)\ndf_china = gb_countries.get_group('Mainland China').reset_index(drop=True)\ndf_uk = gb_countries.get_group('UK').reset_index(drop=True)\n\n\n# Flat cases of countries with data per province\/state\n# Among the selected countries, only China and the UK has data by province\/state.\nsum_cases_china = df_china.groupby('ObservationDate').sum()\ndf_china = df_china.drop(columns=['Confirmed', 'Deaths', 'Recovered']).merge(sum_cases_china, on='ObservationDate').drop_duplicates().reset_index(drop=True)\nsum_cases_uk = df_uk.groupby('ObservationDate').sum()\ndf_uk = df_uk.drop(columns=['Confirmed', 'Deaths', 'Recovered']).merge(sum_cases_uk, on='ObservationDate').drop_duplicates().reset_index(drop=True)","6ffed7cd":"# Update last data [1]\n# Recovered cases are published the next day, so added as the number of the previous day temporarily.\n#upd_spain = pd.DataFrame([['2020-03-20', 'Spain', 19980, 1002, 1588]], columns=df_spain.columns)\n#upd_spain['ObservationDate'] = pd.to_datetime(upd_spain['ObservationDate'])\n\n#upd_italy = pd.DataFrame([['2020-03-20', 'Italy', 41035, 3405, 4440]], columns=df_spain.columns)\n#upd_italy['ObservationDate'] = pd.to_datetime(upd_italy['ObservationDate'])\n\n#upd_china = pd.DataFrame([['2020-03-20', 'China', 80967, 3248, 71150]], columns=df_spain.columns)\n#upd_china['ObservationDate'] = pd.to_datetime(upd_china['ObservationDate'])\n\n#upd_uk = pd.DataFrame([['2020-03-20', 'UK', 3269, 144, 65]], columns=df_spain.columns)\n#upd_uk['ObservationDate'] = pd.to_datetime(upd_uk['ObservationDate'])\n\n\n#df_spain = df_spain.append(upd_spain).reset_index(drop=True)\n#df_italy = df_italy.append(upd_italy).reset_index(drop=True)\n#df_china = df_china.append(upd_china).reset_index(drop=True)\n#df_uk = df_uk.append(upd_uk).reset_index(drop=True)","53f80f60":"# Calculate ratios per population [2]\nspain_pop = 46736776\nitaly_pop = 60550075\nchina_pop = 1433783686\nuk_pop = 67530172\n\ndf_spain['Cases per Population Ratio'] = df_spain['Confirmed'] \/ spain_pop\ndf_italy['Cases per Population Ratio'] = df_italy['Confirmed'] \/ italy_pop\ndf_china['Cases per Population Ratio'] = df_china['Confirmed'] \/ china_pop\ndf_uk['Cases per Population Ratio'] = df_uk['Confirmed'] \/ uk_pop\n\ndf_spain['Deaths per Population Ratio'] = df_spain['Deaths'] \/ spain_pop\ndf_italy['Deaths per Population Ratio'] = df_italy['Deaths'] \/ italy_pop\ndf_china['Deaths per Population Ratio'] = df_china['Deaths'] \/ china_pop\ndf_uk['Deaths per Population Ratio'] = df_uk['Deaths'] \/ uk_pop\n\ndf_spain['Actives per Population Ratio'] = (df_spain['Confirmed'] - df_spain['Deaths'] - df_spain['Recovered']) \/ spain_pop\ndf_italy['Actives per Population Ratio'] = (df_italy['Confirmed'] - df_italy['Deaths'] - df_italy['Recovered']) \/ italy_pop\ndf_china['Actives per Population Ratio'] = (df_china['Confirmed'] - df_china['Deaths'] - df_china['Recovered']) \/ china_pop\ndf_uk['Actives per Population Ratio'] = (df_uk['Confirmed'] - df_uk['Deaths'] - df_uk['Recovered']) \/ uk_pop","409af648":"# Add timeline of important events for each selected country\n# This timeline is an **approximation** of what happened. [3][4]\n# At this moment, there is no relevant events in the UK.\n# The purpose is to figure out the pace of the measures rather than have an exact timeline of every detailed event.\nevents_spain = pd.DataFrame(columns=['ObservationDate', 'Event'],\n                            data=np.array([['2020-03-09', 'Area Outbreak Close of schools'],\n                                           ['2020-03-13', 'Close of commercials'],\n                                          ['2020-03-15', 'Country Quarantine']]))\nevents_italy = pd.DataFrame(columns=['ObservationDate', 'Event'],\n                            data=np.array([['2020-03-11', 'Close of commercials'],\n                                          ['2020-03-09', 'Country Quarantine'],\n                                          ['2020-03-08', 'Area Outbreak Quarantine'],\n                                          ['2020-02-23', 'City Outbreak Close of schools']]))\nevents_china = pd.DataFrame(columns=['ObservationDate', 'Event'],\n                            data=np.array([['2020-03-06', 'Travel ban to USA'],\n                                           ['2020-02-16', 'Country Quarantine'],\n                                           ['2020-01-29', 'Airlines start cancel flights'],\n                                           ['2020-01-22', 'City Outbreak Quarantine'],\n                                          ['2020-01-15', 'City Outbreak Close of schools']]))\nevents_uk = pd.DataFrame(columns=['ObservationDate', 'Event'],\n                         data=np.array([['2020-03-20', 'Close of schools'],\n                                       ['2020-03-23', 'Country Quarantine']]))\n\nevents_spain['ObservationDate'] = pd.to_datetime(events_spain['ObservationDate'])\nevents_italy['ObservationDate'] = pd.to_datetime(events_italy['ObservationDate'])\nevents_china['ObservationDate'] = pd.to_datetime(events_china['ObservationDate'])\nevents_uk['ObservationDate'] = pd.to_datetime(events_uk['ObservationDate'])\n\ndf_spain = df_spain.merge(events_spain, on='ObservationDate', how='left')\ndf_italy = df_italy.merge(events_italy, on='ObservationDate', how='left')\ndf_china = df_china.merge(events_china, on='ObservationDate', how='left')\ndf_uk = df_uk.merge(events_uk, on='ObservationDate', how='left')","4d5416da":"def plot_comparison(x='ObservationDate', y='Confirmed', annotations=False):\n    fig = plt.figure(figsize=(20,10))\n    ax = sns.lineplot(x=x, y=y, data=df_spain, color=\"r\", label='Spain')\n    sns.lineplot(x=x, y=y, data=df_italy, ax=ax, color=\"g\", label='Italy')\n    sns.lineplot(x=x, y=y, data=df_china, ax=ax, color=\"y\", label='China')\n    sns.lineplot(x=x, y=y, data=df_uk, ax=ax, color=\"b\", label='UK')\n\n    if annotations:\n        arrowprops = dict(\n            arrowstyle = \"->\",\n            connectionstyle = \"angle,angleA=0,angleB=90,rad=10\",\n            color='black')\n\n        dfs = [(df_spain, 'r'), (df_china, 'y'), (df_italy, 'g'), (df_uk, 'b')]\n        offset_scalar = 50\n        for df, color in dfs:\n            bbox = dict(boxstyle=\"round\", fc=color, ec=color)\n            collapse = 0\n            for row in df.iterrows():\n                if isinstance(row[1][-1], str):\n                    if collapse == 0:\n                        # TODO: Improve annotation locations to not clash between them\n                        ax.annotate(row[1][-1], xy=(df[x].iloc[row[0]], df[y].iloc[row[0]]), xytext=(0, 25 + offset_scalar), textcoords='offset points', bbox=bbox, arrowprops=arrowprops)\n                        collapse += 1\n                    elif collapse == 1:\n                        ax.annotate(row[1][-1], xy=(df[x].iloc[row[0]], df[y].iloc[row[0]]), xytext=(0, 75 + offset_scalar), textcoords='offset points', bbox=bbox, arrowprops=arrowprops)\n                        collapse += 1\n                    else:\n                        ax.annotate(row[1][-1], xy=(df[x].iloc[row[0]], df[y].iloc[row[0]]), xytext=(0, 125 + offset_scalar), textcoords='offset points', bbox=bbox, arrowprops=arrowprops)\n                        collapse = 0\n            offset_scalar += 50\n\n        ax.axvline(np.datetime64('2020-03-13'), color='r', label='USA ban Schengen area')\n\n    date_form = DateFormatter(\"%W\")\n    ax.xaxis.set_major_formatter(date_form)\n    ax.set_xlabel('Week in the year calendar')\n    ax.set_ylabel(y)\n    plt.show()","c416107f":"plot_comparison(y='Confirmed', annotations=False)","cf4d3512":"plot_comparison(y='Deaths', annotations=False)","0478fcf8":"plot_comparison(y='Cases per Population Ratio', annotations=False)","e12ac39d":"plot_comparison(y='Cases per Population Ratio', annotations=True)","4fe11314":"plot_comparison(y='Deaths per Population Ratio', annotations=False)","6f7fb120":"plot_comparison(y='Deaths per Population Ratio', annotations=True)","3797fb12":"plot_comparison(y='Actives per Population Ratio', annotations=False)","1f7b2c16":"plot_comparison(y='Actives per Population Ratio', annotations=True)","2f9c6b62":"### Confirmed number of cases ratio by weeks with events annotations (red vertical line indicates USA's flight ban from Schengen area)","f2938bd3":"### Confirmed number of cases ratio by weeks","5ef7811a":"### Deaths ratio by weeks with events annotations (red vertical line indicates USA's flight ban from Schengen area)","4d73d697":"# Takeaways\n\nThese takeaways are writen at 26\/03\/2020 without considering other factors such as political system, health system or culture of each country.\n\n- The annotations help to visualize the pace of the measures applied by each government and they could be useful to predict the outcome of applying similar measures in other countries.\n- It can be shown that in Spain, Italy and UK the measure \"Country Quarantine\" is taken approximately at the same y value. This fact proves that if a country is following a similar other country's containment strategy, the pace and type of the measures could be predicted.\n- Although countries like Italy and Spain have taken quarantine measures like China, the number of new infections continue to grow and the countries haven't reached the inflection point in the logistic curve of the pandemic yet. It could be due to the data collection procedure, or the compliance and\/or enforcement of the measures by the citizens\/authorities.\n- The pandemic in the UK started later than in the rest of the countries analysed.\n- Statistics from Italy and Spain show the same trend with a delay in Spain.\n- The containment of the epidemy by China is being excellent.\n\n# References\n\n[1] https:\/\/www.worldometers.info\/coronavirus\/\n\n[2] https:\/\/en.wikipedia.org\/wiki\/List_of_countries_by_population_(United_Nations)\n\n[3] https:\/\/en.wikipedia.org\/wiki\/Timeline_of_the_2019%E2%80%9320_coronavirus_pandemic\n\n[4] https:\/\/www.worldometers.info\/coronavirus\/#news","8c4c7fa6":"# Processing the data (expand to see the code)","50c794de":"# Plotting and comparing","8637aaf9":"### Confirmed number of cases by weeks","e00e0793":"### Active cases ratio by weeks","4df8a442":"### Deaths ratio by weeks","a73f4be2":"### Active cases ratio by weeks with events annotations (red vertical line indicates USA's flight ban from Schengen area)","00a7d671":"# Introduction\n\nThis notebook shows a brief comparison with annotations of relevant events of Spain, Italy, China and the UK in terms of:\n- Confirmed cases\n- Deaths\n- Ratio of confirmed cases per population\n- Ratio of deaths per population\n- Ratio of active cases per population\n\n**Note:** The timeline of events is an **approximation** of what happened. [3][4]\n\nPlease, comment any improvement to the code.\n\nDate of notebook's data last update: 06\/04\/2020","9c8cd7d9":"### Deaths by weeks"}}