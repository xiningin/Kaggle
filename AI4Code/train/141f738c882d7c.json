{"cell_type":{"d4b61ea5":"code","51d46fa3":"code","295d3259":"code","79d4aeb3":"code","0fd56522":"code","6228970d":"code","f6bfba77":"code","efa73b3b":"code","69352ba6":"code","dac7fea0":"code","4f9d2766":"code","e90a9a70":"code","9244bc33":"code","c49d6d0f":"code","09a8b1b7":"code","36ecbb79":"code","7d16f77d":"code","9ab1f1a7":"code","47767901":"code","b894fc37":"code","f191fff5":"code","a5c0e89e":"code","f03b0a2c":"code","901ef9ab":"code","f6716f05":"code","aa9ad0f3":"code","16b986e7":"code","6148dca0":"code","d8c16a0b":"code","f809e634":"markdown","084f8c15":"markdown","b44682f1":"markdown","41e8676b":"markdown","d1851a78":"markdown"},"source":{"d4b61ea5":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","51d46fa3":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n%matplotlib inline\n\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import confusion_matrix\n\nimport tensorflow as tf\nfrom tensorflow import keras\nfrom tensorflow.keras import backend as k\nfrom tensorflow.keras.utils import to_categorical\nfrom tensorflow.keras.preprocessing.image import ImageDataGenerator\nfrom tensorflow.keras.callbacks import ReduceLROnPlateau\nfrom tensorflow.keras.applications.vgg16 import VGG16\n\nfrom random import randint\n\nnp.random.seed(0)","295d3259":"train = pd.read_csv(r'\/kaggle\/input\/digit-recognizer\/train.csv')\ntest = pd.read_csv(r'\/kaggle\/input\/digit-recognizer\/test.csv')","79d4aeb3":"train.head()","0fd56522":"print(train.shape)\nprint(test.shape)","6228970d":"Y = train['label']\nX = train.drop('label',axis=1)","f6bfba77":"total = float(len(X))\nplt.figure(figsize=(10,8))\nax = sns.countplot(Y,palette='Set1')\nfor p in ax.patches:\n    height = p.get_height()\n    ax.text(p.get_x() + p.get_width()\/2. ,height + 40,'{0:.3%}'.format((height\/total)),ha=\"center\")\nplt.show()","efa73b3b":"X.isnull().any().describe()","69352ba6":"test.isnull().any().describe()","dac7fea0":"X = X \/ 255.0\ntest = test \/ 255.0","4f9d2766":"X = X.values.reshape(-1,28,28,1)\ntest = test.values.reshape(-1,28,28,1)","e90a9a70":"Y = to_categorical(Y,10)","9244bc33":"X_train,X_test,Y_train,Y_test = train_test_split(X,Y,test_size=0.2)","c49d6d0f":"print(X_train.shape)\nprint(X_test.shape)\nprint(Y_train.shape)\nprint(Y_test.shape)","09a8b1b7":"X_train[0][:,:,0]","36ecbb79":"g = plt.imshow(X_train[8][:,:,0])","7d16f77d":"model = keras.models.Sequential([\n    keras.layers.Conv2D(32,(5,5),input_shape=(28,28,1),activation='relu',padding='same'),\n    keras.layers.BatchNormalization(axis=1), \n    keras.layers.MaxPooling2D(2,2),\n    \n    keras.layers.Conv2D(32,(5,5),activation='relu',padding='same'),\n    keras.layers.BatchNormalization(),\n    keras.layers.MaxPooling2D(2,2),\n    \n    keras.layers.Conv2D(64,(3,3),activation='relu',padding='same'),\n    keras.layers.BatchNormalization(axis=1),  \n    keras.layers.Conv2D(64,(3,3),activation='relu',padding='same'),\n    keras.layers.BatchNormalization(),\n    keras.layers.MaxPooling2D(2,2),\n    \n    keras.layers.Flatten(),\n    keras.layers.Dense(256,activation='relu'),\n    keras.layers.BatchNormalization(),\n    keras.layers.Dropout(0.5),\n    keras.layers.Dense(10,activation='softmax')\n])","9ab1f1a7":"model.summary()","47767901":"model.compile(optimizer='adam',loss='categorical_crossentropy',metrics=['accuracy'])","b894fc37":"learning_rate_reduction = ReduceLROnPlateau(monitor='val_acc', \n                                            patience=3, \n                                            verbose=1, \n                                            factor=0.5, \n                                            min_lr=0.00001)","f191fff5":"datagen = ImageDataGenerator(\n        featurewise_center=False,  # set input mean to 0 over the dataset\n        samplewise_center=False,  # set each sample mean to 0\n        featurewise_std_normalization=False,  # divide inputs by std of the dataset\n        samplewise_std_normalization=False,  # divide each input by its std\n        zca_whitening=False,  # apply ZCA whitening\n        rotation_range=10,  # randomly rotate images in the range (degrees, 0 to 180)\n        zoom_range = 0.1, # Randomly zoom image \n        width_shift_range=0.1,  # randomly shift images horizontally (fraction of total width)\n        height_shift_range=0.1,  # randomly shift images vertically (fraction of total height)\n        horizontal_flip=False,  # randomly flip images\n        vertical_flip=False)  # randomly flip images\n\n\ndatagen.fit(X_train)","a5c0e89e":"epochs = 250\nbatch_size=64\nhistory = model.fit_generator(datagen.flow(X_train,Y_train, batch_size=batch_size),\n                              epochs = epochs, validation_data = (X_test,Y_test),\n                              verbose = 2, steps_per_epoch=X_train.shape[0] \/\/ batch_size\n                              ,callbacks=[learning_rate_reduction])","f03b0a2c":"plt.figure(figsize=(10,8))\nplt.plot(history.history['accuracy'],color='orange')\nplt.plot(history.history['val_accuracy'],color='green')\nplt.legend(loc='best',shadow=True)\nplt.grid()\nplt.show()","901ef9ab":"plt.figure(figsize=(10,8))\nplt.plot(history.history['loss'],color='orange')\nplt.plot(history.history['val_loss'],color='green')\nplt.legend(loc='best',shadow=True)\nplt.grid()\nplt.show()","f6716f05":"def plot_conf_matrix(Y_test,Y_pred):\n    conf = confusion_matrix(Y_test,Y_pred)\n    recall =(((conf.T)\/(conf.sum(axis=1))).T)\n    precision =(conf\/conf.sum(axis=0))\n\n    print(\"Confusion Matrix : \")\n    class_labels = np.unique(Y)\n    plt.figure(figsize=(20,10))\n    sns.heatmap(conf,annot=True,fmt=\".3f\",cmap=\"GnBu\",xticklabels=class_labels,yticklabels=class_labels,linecolor='black',linewidth=1.2)\n    plt.xlabel('Predicted Class')\n    plt.ylabel('Original Class')\n    plt.show()\n\n    print(\"Precision Matrix ; \")\n    plt.figure(figsize=(20,10))\n    sns.heatmap(precision,annot=True,fmt=\".3f\",cmap=\"YlOrBr\",xticklabels=class_labels,yticklabels=class_labels,linecolor='black',linewidth=1.2)\n    plt.xlabel('Predicted Class')\n    plt.ylabel('Original Class')\n    plt.show()\n\n    print(\"Recall Matrix ; \")\n    plt.figure(figsize=(20,10))\n    sns.heatmap(recall,annot=True,fmt=\".3f\",cmap=\"Blues\",xticklabels=class_labels,yticklabels=class_labels,linecolor='black',linewidth=1.2)\n    plt.xlabel('Predicted Class')\n    plt.ylabel('Original Class')\n    plt.show()","aa9ad0f3":"Y_pred = model.predict(X_test)\nY_pred_classes = np.argmax(Y_pred,axis=1)\nY_true = np.argmax(Y_test,axis=1)\nplot_conf_matrix(Y_true,Y_pred_classes)","16b986e7":"errors = (Y_pred_classes - Y_true != 0)\nfig,ax = plt.subplots(5,5,figsize=(20,20))\nfor i in range(5):\n    for j in range(5):\n        l = randint(0,9)\n        ax[i,j].imshow((X_test[errors][l]).reshape(28,28))\n        ax[i,j].set_title(\"Predicted label : {} , True label : {}\".format(Y_pred_classes[errors][l],Y_true[errors][l]))\nplt.tight_layout()","6148dca0":"predictions = model.predict(test)\npredictions = np.argmax(predictions,axis = 1)\npredictions = pd.Series(predictions,name=\"Label\")","d8c16a0b":"submission = pd.concat([pd.Series(range(1,28001),name = \"ImageId\"),predictions],axis = 1)\nsubmission.to_csv(\"submissions_mnist.csv\",index=False)\nprint(\"Your file is saved.\")","f809e634":"# **<h1 style=\"color:violet\">Model :**","084f8c15":"# **<h1 style=\"color:violet\">Predictions :<\/h1>**","b44682f1":"# **<h1 style=\"color:violet\">Train and Validation accuracy :**","41e8676b":"# **<h1 style=\"color:violet\">Loading the dataset :**","d1851a78":"**<h1 style=\"color:green\">In case you like my kernel do <span style=\"color:red\">UPVOTE<\/span> it. Thanks for viewing. :)**\n**<h1 style=\"color:blue\">And have a nice day.**"}}