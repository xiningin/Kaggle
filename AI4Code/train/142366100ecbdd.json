{"cell_type":{"414b9128":"code","d00371bd":"code","072c6902":"code","12fead2e":"code","eadec05c":"code","4142eed2":"code","106fadd5":"code","aaee510a":"code","eb06824c":"code","13903506":"code","2d7878fd":"code","48802247":"code","257d9a58":"code","93360dc7":"code","7887e7d0":"markdown","3ee92116":"markdown","1b0b4752":"markdown","3e5bb04c":"markdown","977ffa11":"markdown","c9b438bf":"markdown","fbb18988":"markdown","52c1076c":"markdown","ce7576d3":"markdown"},"source":{"414b9128":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","d00371bd":"def tuple_ex():\n    \n    t  = (\"str\",1,\"life\", 4)\n    \n    return t\na,b,c,d = tuple_ex()\n\nprint(a,c,d)\nprint(a,b,d)\nprint(a,b,c,d)\n    ","072c6902":"\nx = True\n\ndef f():\n\n    x = False\n    return x\n\n\nprint(x) # global\n\nprint(f()) #local\n","12fead2e":"# global scope \nx = True\n\ndef f():\n    if x == True:\n        return(True)\n    else: \n        print(False)\n\nprint(f())\n# x is in def is global x\n\n\n    \n    \n    ","eadec05c":"# the way to learn builtins\nimport builtins\ndir(builtins)","4142eed2":"# def in def \ndef add_():\n    \n    def values():\n        x = 1\n        y = 2\n        z = x - y \n        t = x + y\n        return z,t\n    \n    return sum(values())\nprint(add_()) ","106fadd5":"# default arguments \n\ndef f(x , y , z = \" \"):\n    answr = x + z + y\n    return answr\nprint(f(\"apple\",\"fruit\"))\nprint(f(\"apple\",\"fruit\",\" is \"))","aaee510a":"# flexible arguments * args\ndef f (*args):\n    counter = 0\n    for i in args:\n        counter += 1\n    return counter\n\nprint(f(1,5,3,4))\nprint(f(0,12,3,4,5))\n# flexible arguments *kwargs (dictionary )\nprint(\" \")\ndef ff(**kwargs):\n    for key, value in kwargs.items():\n        print(key, \" \", value**2 )\n    \nff(a = 1 ,b = 2, c = 4 ,d = 10 )\n        ","eb06824c":"func = lambda x : x + x**2\nprint(func(1))\nprint(\" \")\nfunc2  = lambda x,y,z : x\/\/y + z**x\nprint(func2(1,2,3))","13903506":"# can take multiple arguments\nextra_argument = [\"a\",\"b\",\"c\"]\nfunc = map(lambda x: x, extra_argument)\nprint(func)\nprint(list(func))","2d7878fd":"# object that can iterate an iterable object\nitrble_obj = (\"iterable object\")\nit  =iter(itrble_obj)\nprint(it)\nprint(next(it)) \nprint(*it)","48802247":"a = [1,2,3,4]\nb = ['a','b','c','d']\nz = zip(a,b)\nzlist = list(z)\nprint(z)\nprint(zlist)\nprint(\" \")\n#unzip\nunzip = zip(*zlist) # tuple \nunzip1 ,unzip2= list(unzip) \nprint(unzip1)\nprint(unzip2)\nprint(type(unzip1))\n","257d9a58":"list0 = [1,2,3,4,5,6]\nl_comp = [i**2 for i in list0] # list comprehension\nprint(l_comp)","93360dc7":"# conditionals on iterable\nlist1 = [\"name\",\"surname\",\"class\",\"author\"]\nl1_comp = [i+\": \" +\"long\" if len(i) > 5 else i+\": \"+\"normal\" if len(i) == 5 else i +\": \"+\"short\" for i in list1]\nprint(l1_comp)","7887e7d0":"method **zip()**","3ee92116":"**SCOPE**","1b0b4752":"**NESTED FUNCTION**","3e5bb04c":"**DEFAULT AND FLEXIBLE ARGUMENTS**","977ffa11":"**ITERATORS**","c9b438bf":"**LAMBDA FUNCTION**","fbb18988":"**USER DEFINED FUNCTION**","52c1076c":"**ANONYMOUS FUNCTION**","ce7576d3":"**LIST COMPREHENS\u0130ON**"}}