{"cell_type":{"310daa76":"code","b8079f26":"code","ba2ee363":"code","36be8d66":"code","310e737e":"code","fccb81a9":"code","bd9ee7f7":"code","61b367ad":"code","82c8b6b1":"code","22e97f99":"markdown","fc07d5fc":"markdown","569f34c4":"markdown","b7d40e2b":"markdown","f199e2e6":"markdown","4412773d":"markdown","0d5e1ea0":"markdown"},"source":{"310daa76":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nfrom bokeh.plotting import figure, show, output_notebook, output_file\nfrom bokeh.transform import factor_cmap, factor_mark\nimport dask.dataframe as dd\nfrom IPython.core.display import display, HTML\nimport ipywidgets as widgets\nfrom IPython.display import display,clear_output\nfrom ipywidgets import Output, Button\nfrom bokeh.io import show, output_file\n\noutput_notebook()","b8079f26":"# change data type in order to make the loading faster\ndtypes_dict = {\n    'row_id': 'str',\n    'time_id': 'uint16',\n    'investment_id': 'uint16',\n    'target': 'float32',\n}\nfor i in range(300):\n    dtypes_dict[f'f_{i}'] = 'float32'","ba2ee363":"df = pd.read_csv('..\/input\/ubiquant-market-prediction\/train.csv', \n                 usecols = dtypes_dict.keys(),\n                 dtype = dtypes_dict)","36be8d66":"# get a smaller random sample (1 %) \ndf_sample = df.sample(int(df.shape[0] * 0.01)) ","310e737e":"# draw a scatter plot\np = figure(width=400, height=400, title = \"Scatter plot - time_id vs. f_0\")\n\np.circle(df_sample['time_id'], \n         df_sample['f_0'], \n         size=2, \n         color=\"navy\", \n         alpha=0.5)\np.xaxis.axis_label = \"time_id\"\np.yaxis.axis_label = \"f_1\"\n\n# show the results\nshow(p)","fccb81a9":"investment_ids = df['investment_id'].unique()\n\n# create a function drawing the scatter plot    \ndef draw_scatter(dataset,v1,v2,v3):\n    df = dataset[[v1,v2,'investment_id']]\n    df_invest = df.loc[df['investment_id'] == int(v3)] # select investment id\n    p = figure(width=400, height=400)\n\n    # add a circle renderer with a size, color, and alpha\n    p.circle(df_invest[v1], df_invest[v2], size=2, color=\"navy\", alpha=0.5)\n    p.xaxis.axis_label = v1\n    p.yaxis.axis_label = v2\n\n    # show the results\n    show(p)\n    \n# create two buttons to get input\noutput = Output()\nstart = Button(description=\"Start\")\nv1_widget = widgets.Dropdown(\n    options=list(dtypes_dict),\n    value=list(list(dtypes_dict))[5],\n    description='Column:',\n    disabled=False,\n)\n\nv2_widget = widgets.Dropdown(\n    options=list(dtypes_dict),\n    value=list(list(dtypes_dict))[10],\n    description='Column:',\n    disabled=False,\n)\n\nv3_widget = widgets.Dropdown(\n    options=list(investment_ids),\n    value=list(investment_ids)[0],\n    description='Invest_id:',\n    disabled=False,\n)\n\ndef click_start(b):\n    with output:\n        clear_output()\n\n        draw_scatter(df, \n                     v1_widget.value, \n                     v2_widget.value,\n                     v3_widget.value\n                    )\n\n       \nstart.on_click(click_start)\n\n# once click the start button, the corresponding article will be displayed\ndisplay(v1_widget,\n        v2_widget, \n        v3_widget, \n        start, \n        output)","bd9ee7f7":"# select relevant columns\ndf_time_invest = pd.read_csv('..\/input\/ubiquant-market-prediction\/train.csv', \n                 usecols = ['time_id','investment_id'],\n                 dtype = dtypes_dict)\n\n# get number of time_ids per investment_id\ndf_time_invest_aggr = df_time_invest.groupby(['investment_id']).nunique().reset_index().sort_values(by='time_id', ascending = False)\n\n#draw a histgram showing the distribution of number of time_ids grouped by investment_id\nhist, edges = np.histogram(df_time_invest_aggr['time_id'], density=True, bins=50)\n\np = figure( width = 400, height = 400, title = \"Distribution of number of time_ids by investment_id\")\np.quad(top=hist, \n       bottom=0, \n       left=edges[:-1], \n       right=edges[1:], \n       line_color=\"pink\"\n      )\n\nshow(p)","61b367ad":"# get correlaation data\ncorr_target = df_sample.corr().sort_values(by='target')[['target']]\ncorr_target = corr_target.drop(['target','investment_id','time_id'])\n\n# x, y axis\nx = corr_target['target']\nfactors = list(corr_target.index)\n\n# plot a chart showing correlation between each feature with target\np = figure(width=400, height=2680, y_range=factors, title = \"Correlation between each feature variable and the target\")\n\np.circle(x, factors, size=5, fill_color=\"pink\", line_color=\"blue\", line_width=1)\n\nshow(p)","82c8b6b1":"df_sample = df_sample.drop(['target','investment_id','time_id','row_id'],axis = 1)\ndf_sample_aggr = pd.DataFrame()\ndf_sample_aggr['mean'] = df_sample.mean() # get mean of each feature\ndf_sample_aggr['median'] = df_sample.median() # get median of each feature\ndf_sample_aggr = df_sample_aggr.sort_values(by = 'mean') # sort the variable by mean value\n\n# Plot chart showing mean\/median per feature\nx1 = df_sample_aggr['mean']\nx2 = df_sample_aggr['median']\n\nfactors = list(df_sample_aggr.index)\n\np = figure(width=400, height=2680, y_range=factors, title = \"Mean and Median of each feature variable\")\n\np.circle(x, factors, size=5, fill_color=\"pink\", line_color=\"blue\", line_width=1 , legend_label='mean')\np.circle(x2, factors, size=5, fill_color=\"blue\", line_color=\"black\", line_width=1, legend_label='median')\np.legend.location = \"top_left\"\n\nshow(p)","22e97f99":"# More content is coming\nPlease leave your feedback or anything you hope me to visualize. I'll give it a try :)\n\nStay tuned!","fc07d5fc":"# Select any two variables you're interested\n\nSo what about association between some other any two variables? **For now, you may need to fork the notebook and run it from your end to test it.**\n\nIt might take you a couple of minutes to load the data since it is huge.","569f34c4":"# Introduction\n\nThis notebook aims at creating visualizations for initial comprehension of the train dataset.","b7d40e2b":"# Correlation between target with any feature variable\n\nWhich feature variable has the stronges positive or negative association with target?","f199e2e6":"# Mean and Median of each feature variable\n\nFrom the chart below, we can see that the most of the means are close to 0, while median values vibrate all along the y axis, indicating variable names.","4412773d":"# Time id is not fully available for all the investment_id\nAs the data descrption of this competition states - \n\n> Not all investment have data in all time IDs.\n\nSo how about the distribution of number of time_id per investment_id then?\n\n- The chart below indicates that the distribution is skewed to the right, but some investment_id only have a handful number of time_ids.","0d5e1ea0":"# Load dataset and make a sample chart\nPlot a scatter chart between **time_id** and **f_0**"}}