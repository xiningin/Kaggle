{"cell_type":{"cade4e42":"code","144a40d8":"code","6dadd9fa":"code","d968f2ef":"code","1ff91a7f":"code","c40c91d3":"code","19db9d7c":"code","823dd0a3":"code","761673d0":"code","5b2aa588":"code","0f2bd488":"code","2d0fe73d":"code","079286e3":"code","43b71c25":"code","f7fe4d1e":"code","9ecde684":"code","b5bb4c36":"code","1a4ab784":"code","519d45b1":"code","a56dd3b4":"code","71a083d7":"code","50fab0a3":"code","e0d972f2":"code","6e3c39f4":"code","21b9c6ba":"code","f550653a":"code","09c12d02":"code","79dfd97f":"code","c0e8bb31":"code","f8c5dc21":"code","ab75c7d0":"code","4fbfa655":"code","baed3ed4":"code","31103b20":"code","52eb2689":"code","e0b46f3a":"code","0740c2a0":"code","67a535d6":"code","adc56796":"code","0e7b65dc":"code","9a25a6fe":"code","6b1f60ee":"code","5ab69627":"code","d4be7901":"code","8d7c36d8":"code","d6dad47c":"code","f64ed0b5":"code","06bdcc3a":"code","1840f532":"code","d0ef5b0b":"code","ddf902e0":"code","f0f2cb49":"code","ee980c1c":"code","5ff54265":"code","2198f916":"code","b18fb5bd":"code","90bde4a7":"code","37b0fddf":"code","0a4057d2":"code","48b8c860":"code","0096d2a3":"code","1ff7cf7d":"code","516a3b38":"code","7f32fd26":"code","9ca69183":"code","2e28cf5f":"code","47460f62":"code","76528e0d":"code","3ed44133":"code","d675eed9":"code","c8e1dd97":"code","340e49b2":"code","125140d6":"code","29a43caf":"code","0023b733":"code","b4beafe4":"code","4bebef49":"code","036a0400":"code","c397f0df":"code","2e34382f":"code","e331d599":"code","a306900a":"code","2faed8cb":"code","4ce574c4":"code","592920f0":"code","87d9801c":"code","e9e8f70f":"code","49a83475":"code","47d1c6e2":"code","6402ea36":"code","5bcb3ade":"code","0ef96242":"code","bbd568d6":"code","6f3da8be":"code","62264b25":"code","03ce82c5":"code","9bd91ec2":"code","fc28cfc4":"code","96d78ac3":"code","327b5860":"code","3d23a80a":"code","a5287d8a":"code","d42eeb4d":"code","ba5a92ac":"code","ecda4a95":"code","4bd261db":"code","d4fdc01b":"code","9edf0389":"code","96cc1123":"code","37d663d4":"code","ad130320":"code","b2f65564":"code","4fecea0d":"code","25dfefb3":"code","e140235a":"code","a1543e7f":"code","2751fb89":"code","5af5097a":"code","d4dcf67e":"code","1ae957c1":"code","cdc1449d":"code","321d80f9":"code","fec04c2b":"code","a8b7bec0":"code","afdc4f90":"code","c8812b62":"code","c16b7aed":"code","7b7298ab":"code","24183a0e":"code","5d71ddfe":"code","04f5b9e3":"code","fbc692d0":"code","b1e73d53":"markdown","ff6029cc":"markdown","d997840e":"markdown","57a3ed7b":"markdown","233d5368":"markdown","c577c6dd":"markdown","166b35c8":"markdown","9176c480":"markdown","1465afd7":"markdown","8d3cee81":"markdown","4d8eeaeb":"markdown","aea793e1":"markdown","31563631":"markdown","8e7dfa70":"markdown","d83477da":"markdown"},"source":{"cade4e42":"import pandas as pd\nimport numpy as np\n\nmytrain = pd.read_csv('..\/input\/machine-learning-on-titanic-data-set\/train.csv', index_col=0)     # index: PassengerId\nprint(mytrain.shape)\nmytrain.info()","144a40d8":"mytest  = pd.read_csv('..\/input\/machine-learning-on-titanic-data-set\/test.csv', index_col=0)     # index: PassengerId\n\nprint(mytest.shape)\nmytest.info()","6dadd9fa":"combined = pd.concat([mytrain, mytest], axis=0)\ncombined.info()","d968f2ef":"print(combined.index)","1ff91a7f":"print(combined.columns)\nprint(combined.columns[0])","c40c91d3":"combined.describe(include='all').T","19db9d7c":"combined.describe(include=['O']).T         # duplicates exist in String columns","823dd0a3":"print(combined.head(5))\nprint(combined.tail(5))","761673d0":"combined.isna().sum()","5b2aa588":"combined.isnull().sum()","0f2bd488":"combined[combined['Age'].isna() == True]","2d0fe73d":"combined[combined['Age'].isna() == True].head(5)","079286e3":"combined.iloc[5]","43b71c25":"combined[combined['Cabin'].isna() == True]","f7fe4d1e":"combined[combined['Embarked'].isna() == True]","9ecde684":"combined[combined['Fare'].isna() == True]","b5bb4c36":"combined[(combined['Cabin'].isna() == True) &\n        (combined['Age'].isna() == True)]","1a4ab784":"import seaborn as sns            # Why sns?  It's a reference to The West Wing\nimport matplotlib.pyplot as plt  # seaborn is based on matplotlib\nsns.set(color_codes=True)        # adds a nice background to the graphs\n%matplotlib inline               \n# tells python to actually display the graphs","519d45b1":"pd.value_counts(combined['Survived'])   # 549 of 891 is 61.6% in Train did not survive","a56dd3b4":"sns.catplot(y='Survived', kind='count', aspect=2, data=combined);","71a083d7":"combined['Pclass'].nunique()","50fab0a3":"combined['Pclass'].unique()","e0d972f2":"pd.value_counts(combined['Pclass'])","6e3c39f4":"sns.distplot(combined['Pclass']);","21b9c6ba":"# we can turn the kde off and put a tic mark along the x-axis for every data point with rug\nsns.distplot(combined['Pclass'], kde=False, rug=True);","f550653a":"pd.value_counts(combined['Sex'])     # 843 of 1309 is 64.4% are male in (Train+Test)","09c12d02":"ax=sns.countplot('Sex', data=combined)\nax.set_xticklabels(ax.get_xticklabels(), rotation=40, ha='right');","79dfd97f":"pd.value_counts(combined['Age'])","c0e8bb31":"sns.boxplot(combined['Age']);","f8c5dc21":"#combined['Age'].boxplot(vert=0)","ab75c7d0":"fig_dims = (10,5)\nfig, axs = plt.subplots(nrows=1, ncols=2, figsize=fig_dims)\nsns.distplot(combined['Age'], kde=True, ax=axs[0], rug=True)\nsns.boxplot(combined['Age'], ax=axs[1])\nplt.show();","4fbfa655":"def univariate_float(float_col):\n    print(combined[float_col].mean())\n    sns.boxplot(combined[float_col], palette = 'pastel')\n    plt.show();\n    \ncombined_float = combined.select_dtypes(include = ['float64'])\nlistcols = list(combined_float.columns.values)\nfor x in listcols:\n    univariate_float(x)","baed3ed4":"pd.value_counts(combined['SibSp'])","31103b20":"pd.value_counts(combined['Parch'])","52eb2689":"combined[combined['Fare'] == combined['Fare'].max()]","e0b46f3a":"combined[['Ticket', 'Name']][combined['Fare'] == combined['Fare'].max()]","0740c2a0":"combined[combined['Fare'] == combined['Fare'].max()][['Ticket', 'Name']]","67a535d6":"pd.value_counts(combined['Fare'])","adc56796":"sns.boxplot(combined['Fare']);","0e7b65dc":"pd.value_counts(combined['Embarked'])","9a25a6fe":"combined['NameLength'] = 0\n\nfor i in range(1, len(combined)+1):\n    combined['NameLength'][i] = len(combined.iloc[i-1,2])","6b1f60ee":"pd.crosstab(combined['Survived'], combined['Sex'])      # most females Survived","5ab69627":"combined.pivot_table(index=['Survived'], values=['Fare'], aggfunc='mean').round(0)","d4be7901":"combined[['Survived', 'Fare']].groupby(combined['Survived']).mean()","8d7c36d8":"combined[['Survived', 'Fare']].groupby('Survived').mean()","d6dad47c":"sns.stripplot(combined['Survived'], combined['Fare'], jitter=True);     # more Survivors among higher Fare","f64ed0b5":"sns.swarmplot(combined['Survived'], combined['Fare']);","06bdcc3a":"pd.crosstab(combined['Survived'], combined['Pclass'])      # more Survivors from Class = 1 (or those who were rescued)","1840f532":"sns.stripplot(combined['Pclass'], combined['Fare'], jitter=True);     # highest Fares in Class 1","d0ef5b0b":"sns.boxplot(combined['Pclass'], combined['Fare'], hue=combined['Survived']);","ddf902e0":"sns.catplot(x=\"Survived\",\n               y = \"Fare\",\n               hue=\"Pclass\", \n               col=\"Sex\", \n               data=combined, \n               kind=\"swarm\");","f0f2cb49":"combined.pivot_table(index=['Survived'], values=['Age'], aggfunc='mean')","ee980c1c":"sns.stripplot(combined['Survived'], combined['Age'], jitter=True);       # Age not visibly correlated with Survival","5ff54265":"sns.stripplot(combined['Sex'], combined['Fare'], jitter=True);           # no correlation between Fare and Sex","2198f916":"combined.pivot_table(index=['Pclass'], values=['Fare'], aggfunc='mean' )","b18fb5bd":"sns.stripplot(combined['Pclass'], combined['Fare'], jitter=True);     # higher Fare in Class 1, as expected","90bde4a7":"combined.pivot_table(index=['Embarked'], values=['Fare'], aggfunc='mean' )","37b0fddf":"sns.stripplot(combined['Embarked'], combined['Fare'], jitter=True);    # wealthy passengers boarded from 'C'","0a4057d2":"combined.pivot_table(index=['Pclass'], values=['SibSp'], aggfunc='mean' )     # mean(SibSp) = 0.5","48b8c860":"combined.pivot_table(index=['Pclass'], values=['Parch'], aggfunc='mean' )     # mean(Parch) = 0.39","0096d2a3":"combined.pivot_table(index=['Sex'], values=['SibSp'], aggfunc='mean' )     # mean(SibSp) = 0.5","1ff7cf7d":"combined.pivot_table(index=['Sex'], values=['Parch'], aggfunc='mean' )     # mean(Parch) = 0.39","516a3b38":"combined.pivot_table(index=['Pclass', 'Sex'], values=['Age'], aggfunc='mean' )     # mean(Age) = 29.9","7f32fd26":"pd.crosstab(combined['Survived'], combined['SibSp'])","9ca69183":"pd.crosstab(combined['Survived'], combined['Parch'])","2e28cf5f":"sns.jointplot(combined['Age'], combined['Fare']);         # doesn't appear that an increase in Age goes together with increase in Fare","47460f62":"sns.scatterplot(x='Age', y='Fare', data=combined);","76528e0d":"sns.jointplot(combined['Age'], combined['Fare'], kind=\"hex\");      # shows record concentration as well","3ed44133":"sns.jointplot(combined['Age'], combined['Fare'], kind=\"kde\");       # Kernel Density Estimation is alternative to Hex Bin plot above","d675eed9":"sns.pairplot(combined[['Age', 'Fare']], corner=True);     # Scatterplot + Histogram","c8e1dd97":"sns.stripplot(combined['Survived'], combined['NameLength'], jitter=True);","340e49b2":"#combined['Survived'] = combined['Survived'].astype('category')\n#combined['Pclass']   = combined['Pclass'].astype('category')\ncombined.info()","125140d6":"combined._get_numeric_data()","29a43caf":"from scipy import stats\nstats.normaltest(combined['Age'], nan_policy = 'omit')       # p-value < 0.05; reject H0; not Gaussian","0023b733":"stats.normaltest(combined['Fare'], nan_policy = 'omit')","b4beafe4":"stats.boxcox(combined['Age'])","4bebef49":"from scipy.stats import boxcox\nfrom scipy.special import inv_boxcox\n\nAge_n,fitted_lambda = boxcox(combined['Age'],lmbda=None)\nfitted_lambda\n#Age_n = inv_boxcox(y,fitted_lambda)","036a0400":"stats.normaltest(Age_n, nan_policy = 'omit') ","c397f0df":"# Fare_n,fitted_lambda = boxcox(combined['Fare'],lmbda=None)\n# stats.normaltest(Fare_n, nan_policy = 'omit') ","2e34382f":"from sklearn import preprocessing\n\ncentered_scaled_Age = preprocessing.scale(combined['Age'])\ncentered_scaled_Age\npd.DataFrame(centered_scaled_Age).mean(skipna=True)\n#Age_in = np.array(mytrain['Age']).reshape(-1,1)\n#Age_n = preprocessing.normalize(Age_in)\n#stats.normaltest(Age_n, nan_policy = 'omit') ","e331d599":"from scipy.stats import skew\nskew(combined['Fare'])           # +ve, meaning tilted towards left.\n                                 # this means more records at lower fares. also seen above.","a306900a":"# Chi-square test among categorical variables\nfrom scipy.stats import chisquare\nSurvived_Pclass = pd.crosstab(combined['Survived'], combined['Pclass'])\n\nchisquare(Survived_Pclass, axis = None)   # p-value < 0.05. reject H0. not independent.\n\n# import statsmodels.api as sm\n# from scipy.stats import chi2_contingency\n\n#table = sm.stats.Table.from_data(mytrain[['Survived', 'Pclass']])\n#stat, p, dof, expected = scipy.stats.chi2_contingency(table)","2faed8cb":"Survived_Sex = pd.crosstab(combined['Survived'], combined['Sex'])\n\nchisquare(Survived_Sex, axis = None)      # p-value < 0.05. reject H0. not independent.","4ce574c4":"Survived_Embarked = pd.crosstab(combined['Survived'], combined['Embarked'])\n\nchisquare(Survived_Embarked, axis = None) # p-value < 0.05. reject H0. not independent.","592920f0":"Survived_SibSp = pd.crosstab(combined['Survived'], combined['SibSp'])\n\nchisquare(Survived_SibSp, axis = None) # p-value < 0.05. reject H0. not independent.","87d9801c":"Survived_SibSp","e9e8f70f":"Survived_Parch = pd.crosstab(combined['Survived'], combined['Parch'])\n\nchisquare(Survived_Parch, axis = None) # p-value < 0.05. reject H0. not independent.","49a83475":"Survived_Parch","47d1c6e2":"cor = combined[['Age', 'Fare']].corr()","6402ea36":"plt.figure(figsize=(5,5))\nsns.set(font_scale=1.5)\nsns.heatmap(cor, annot=True, cmap='plasma', vmin=-1, vmax=1)\nplt.show()","5bcb3ade":"plt.figure(figsize=(5,5))\nsns.set(font_scale=1.5)\nsns.heatmap(round(cor,1), annot=True, mask=(np.triu(cor)), vmin=-1, vmax=1)\nplt.show();","0ef96242":"plt.figure(figsize=(5,5))\nsns.set(font_scale=1.5)\nsns.heatmap(round(cor,1), annot=True, mask=(np.triu(cor,+1)), vmin=-1, vmax=1)\nplt.show();","bbd568d6":"combined['SibSp_new'] = 0\n\nfor i in range(1, len(combined)+1):\n    if (combined['SibSp'][i] == 0):\n        combined['SibSp_new'][i] = 0\n    elif (combined['SibSp'][i] == 1):\n        combined['SibSp_new'][i] = 0\n    elif (combined['SibSp'][i] == 2):\n        combined['SibSp_new'][i] = 0\n    else:\n        combined['SibSp_new'][i] = 1\n\npd.value_counts(combined['SibSp_new'])","6f3da8be":"#combined['Parch_new'] = 0\n\n#for i in range(1, len(combined)+1):\n#    if (combined['Parch'][i] == 0):\n#        combined['Parch_new'][i] = 0\n#    elif (combined['Parch'][i] == 1):\n#        combined['Parch_new'][i] = 1\n#    elif (combined['Parch'][i] == 2):\n#        combined['Parch_new'][i] = 1\n#    elif (combined['Parch'][i] == 3):\n#        combined['Parch_new'][i] = 1\n#    else:\n#        combined['Parch_new'][i] = 2\n#\n#pd.value_counts(combined['Parch_new'])\n#pd.crosstab(combined['Survived'], combined['Parch_new'])","62264b25":"Survived_SibSp_new = pd.crosstab(combined['Survived'], combined['SibSp_new'])\n\nchisquare(Survived_SibSp_new, axis = None) # p-value < 0.05. reject H0. not independent.","03ce82c5":"pd.crosstab(combined['Survived'], combined['SibSp_new'])","9bd91ec2":"#Survived_Parch_new = pd.crosstab(combined['Survived'], combined['Parch_new'])\n\n#chisquare(Survived_Parch_new, axis = None) # p-value < 0.05. reject H0. not independent.","fc28cfc4":"#pd.crosstab(combined['Survived'], combined['Parch_new'])","96d78ac3":"combined['Ticket_Len'] = combined['Ticket'].apply(lambda x: len(x))\nprint(combined['Ticket_Len'].value_counts())\npd.crosstab(combined['Survived'], combined['Ticket_Len'])","327b5860":"# skip column not important for classification\n#combined['Ticket_Lett'] = combined['Ticket'].apply(lambda x: str(x)[0])\n#print(combined['Ticket_Lett'].value_counts())\n#pd.crosstab(combined['Survived'], combined['Ticket_Lett'])","3d23a80a":"combined['Embarked'].fillna(method='backfill', inplace=True)\npd.value_counts(combined['Embarked'])                        # filled with 1S, 1C. next available valid value.","a5287d8a":"embarked_mapping = {'S': 0, 'C': 1, 'Q': 2}\ncombined.replace({'Embarked': embarked_mapping}, inplace=True)\nprint(pd.value_counts(combined['Embarked']))","d42eeb4d":"combined['Fare'].fillna(method='backfill', inplace=True)\npd.value_counts(combined['Fare'])                        ","ba5a92ac":"combined['Fare'].mean()","ecda4a95":"combined['Fare'].fillna(combined['Fare'].mean(), inplace=True)","4bd261db":"#combined['FareBand'] = pd.cut(combined['Fare'], 10)\n#pd.crosstab(combined['Survived'], combined['FareBand'])","d4fdc01b":"def remove_outlier(col):\n    sorted(col)\n    Q1, Q3 = np.percentile(col, [25,75])\n    IQR=Q3-Q1\n    lower_range = Q1 - (1.5*IQR)\n    upper_range = Q3 + (1.5*IQR)\n    return lower_range, upper_range\n\nlr, ur = remove_outlier(combined['Fare'])\ncombined['Fare'] = np.where(combined['Fare'] > ur, ur, combined['Fare'])\ncombined['Fare'] = np.where(combined['Fare'] < lr, lr, combined['Fare'])\n\nsns.boxplot(combined['Fare']);","9edf0389":"combined['Title'] = combined['Name'].str.extract('([A-Za-z]+)\\.', expand=True)\nprint(pd.value_counts(combined['Title']))\n\n# combine Titles\nmapping = {'Mlle': 'Miss', 'Major': 'Mr', 'Col': 'Mr', 'Sir': 'Mr',\n           'Don': 'Mr', 'Mme': 'Mrs', 'Jonkheer': 'Mr', 'Lady': 'Mrs',\n           'Capt': 'Mr', 'Countess': 'Mrs', 'Ms': 'Miss', 'Dona': 'Mrs'}\ncombined.replace({'Title': mapping}, inplace=True)\nprint(pd.value_counts(combined['Title']))","96cc1123":"Title_ages = dict(combined.groupby('Title')['Age'].median())\nprint(Title_ages)\n\ncombined['age_med'] = combined['Title'].apply(lambda x: Title_ages[x])\nprint(combined['age_med'].isna().sum())\n\ncombined['Age'].fillna(combined['age_med'], inplace=True)\nprint(combined['Age'].describe())                          # mean still around same (29.9 earlier)\n\ndel combined['age_med']","37d663d4":"#combined['AgeBand'] = pd.cut(combined['Age'], 8)\n#pd.crosstab(combined['Survived'], combined['AgeBand'])","ad130320":"#combined['NameLengthBand'] = pd.cut(combined['NameLength'], 3)\n#pd.crosstab(combined['Survived'], combined['NameLengthBand'])","b2f65564":"combined['Family_Size'] = combined['SibSp'] + combined['Parch']\npd.crosstab(combined['Survived'], combined['Family_Size'])","4fecea0d":"#combined['Is_Alone'] = 0\n\n#for i in range(1, len(combined)+1):\n#    if (combined['Family_Size'][i] == 1):\n#        combined['Is_Alone'][i] = 1","25dfefb3":"combined['Age*Class'] = combined['Age'] * combined['Pclass']\npd.crosstab(combined['Survived'], combined['Age*Class'])","e140235a":"# combined['FareBand'] = pd.qcut(combined['Fare'], 4)\n# combined[['FareBand', 'Survived']].groupby(['FareBand'], as_index=False).mean().sort_values(by='FareBand', ascending=True)","a1543e7f":"#combined.loc[ combined['Fare'] <= 7.9, 'Fare'] = 0\n#combined.loc[(combined['Fare'] > 7.9)    & (combined['Fare'] <= 14.454), 'Fare'] = 1\n#combined.loc[(combined['Fare'] > 14.454) & (combined['Fare'] <= 31), 'Fare']   = 2\n#combined.loc[ combined['Fare'] > 31, 'Fare'] = 3\n\n#combined['Fare'] = combined['Fare'].astype(int)\n#combined['Fare'].describe()\n\n#combined = combined.drop(['FareBand'], axis=1)","2751fb89":"combined['Sex_num'] = 0\n\nfor i in range(1, len(combined)+1):\n    if (combined['Sex'][i] == 'male'):\n        combined['Sex_num'][i] = 1\n\npd.value_counts(combined['Sex_num'])\ndel combined['Sex']","5af5097a":"combined.head(2).T","d4dcf67e":"#cols_1hot = ['Ticket_Lett', 'FareBand', 'Title', 'AgeBand', 'NameLengthBand']\ncols_1hot = ['Title']\n\nfor i in cols_1hot:\n    df_1hot = pd.get_dummies(combined[i], prefix=i, prefix_sep='_')\n    combined = pd.concat([combined, df_1hot], axis=1)\n\ncombined.info()\ncombined.drop(columns=cols_1hot, inplace=True)\ncombined.info()","1ae957c1":"train_new = combined[combined['Survived'].isna() == False]\ntrain_new.drop(columns=['Name', 'Ticket', 'Cabin'], inplace=True)\ntrain_new.info()","cdc1449d":"test_new = combined[combined['Survived'].isna() == True]\ntest_new.drop(columns=['Name', 'Ticket', 'Cabin', 'Survived'], inplace=True)\ntest_new.info()","321d80f9":"test_new.index","fec04c2b":"pd.value_counts(train_new['Survived'])","a8b7bec0":"from sklearn.utils import resample\n\n# Separate majority and minority classes\ndf_majority = train_new[train_new.Survived==0]\ndf_minority = train_new[train_new.Survived==1]\n \n# Upsample minority class\ndf_minority_upsampled = resample(df_minority, \n                                 replace=True,     # sample with replacement\n                                 n_samples=549,    # to match majority class\n                                 random_state=123) # reproducible results\n \n# Combine majority class with upsampled minority class\ndf_upsampled = pd.concat([df_majority, df_minority_upsampled])\n \n# Display new class counts\ndf_upsampled.Survived.value_counts()","afdc4f90":"from sklearn.model_selection import GridSearchCV\nfrom sklearn.ensemble import RandomForestClassifier\n\nrf = RandomForestClassifier(max_features='auto', oob_score=True, random_state=123, n_jobs=-1)\n\nparam_grid = { \"criterion\" : [\"gini\", \"entropy\"], \"min_samples_leaf\" : [2, 3, 4], \"min_samples_split\" : [3, 5, 7, 9], \"n_estimators\": [100]}\n\ngs = GridSearchCV(estimator=rf, param_grid=param_grid, scoring='accuracy', cv=10, n_jobs=-1, verbose=2)\n\ngs = gs.fit(df_upsampled.iloc[:, 1:], df_upsampled.iloc[:, 0])","c8812b62":"print(gs.best_score_)","c16b7aed":"print(gs.best_params_)","7b7298ab":"#print(gs.cv_results_)","24183a0e":"#help(RandomForestClassifier)","5d71ddfe":"from sklearn.ensemble import RandomForestClassifier\n\nrf = RandomForestClassifier(criterion='entropy', \n                             n_estimators=101,                  # number of trees\n                             min_samples_split=3,              # minimum number of samples required to split an internal node\n                             min_samples_leaf=2,                # minimum number of samples required in a leaf node\n                             max_features='auto',\n                             oob_score=True,\n                             max_depth = 20,\n                             random_state=123,\n                             n_jobs=-1)                         # all processors in parallel\nrf.fit(df_upsampled.iloc[:, 1:], df_upsampled.iloc[:, 0])\nprint(\"%.4f\" % rf.oob_score_)","04f5b9e3":"pd.concat((pd.DataFrame(df_upsampled.iloc[:, 1:].columns, columns = ['variable']), \n           pd.DataFrame(rf.feature_importances_, columns = ['importance'])), \n          axis = 1).sort_values(by='importance', ascending = False)[:20]","fbc692d0":"predictions = rf.predict(test_new)\npredictions = pd.DataFrame(predictions, columns=['Survived'])\n\npredictions = pd.concat((pd.DataFrame(test_new.index), predictions.astype('int64')), axis = 1)\npredictions\n\npredictions.to_csv('Titanic_predict.csv', sep=\",\", index = False)","b1e73d53":"### Feature generation","ff6029cc":"### scale data","d997840e":"![Titanic](https:\/\/upload.wikimedia.org\/wikipedia\/en\/9\/9f\/Twitter_bird_logo_2012.svg)","57a3ed7b":"### Hyper-parameter tuning","233d5368":"### Normality check","c577c6dd":"### Univariate","166b35c8":"# read data","9176c480":"### Random Forest","1465afd7":"# Outliers","8d3cee81":"### Correlation","4d8eeaeb":"### Data Balancing","aea793e1":"### Missing Values","31563631":"### Imputation","8e7dfa70":"### Bivariate","d83477da":"### Collinearity (dependence with Y)"}}