{"cell_type":{"0e44cfaa":"code","8af049c5":"code","168a9ab3":"code","8422966a":"code","3b37a427":"code","ab1522af":"code","b1c9e3e0":"code","e9693689":"code","efdf8d65":"code","f03b2a05":"code","20b85ce8":"code","a6a5ecea":"code","693ced7d":"markdown","899ea2c7":"markdown","5baa9da0":"markdown","dd7485b3":"markdown","4c2146c7":"markdown","535e2108":"markdown","c50f2e81":"markdown","58ff964e":"markdown","80678b5b":"markdown","792f5696":"markdown","97609b38":"markdown","3f890bfe":"markdown","21d36324":"markdown"},"source":{"0e44cfaa":"import datetime\nimport os\nimport random\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport matplotlib.ticker as ticker\n\n#<<----------------------------------- GLOBAL Variables\n\n# Resampled every signal to this rate for consistency\nBASIC_SRATE = 128 #Hz\nprint('Basic sampling rate(Hz):',BASIC_SRATE)\n\n# global base directory\nglobal_dir = '\/kaggle\/input\/ecg-lead-2-dataset-physionet-open-access\/db_npy'\nprint('GLOBAL DIR ::',global_dir)\n\nstd_annotations = os.path.join(global_dir,'annotations.txt')\nprint('STD ANN FILE ::',std_annotations)\n\n# ------ load standard labels ------------------------------------------\nstd_ant = np.loadtxt(std_annotations, dtype='str',delimiter=\"\\t\")\n\n# Seperate out stand beat and non-beat annotations using 'annotations.txt'\nbeat_ants = []\nnon_beat_ants = []\nprint('\\nStandard Labels::')\nfor a in std_ant:\n    # a[0] =  # standard label (char)\n    # a[1] =  # type of label\n    # a[2]  = # description (str)\n    print(a[0]+'\\t'+a[1]+'\\t'+a[2])\n    if a[1]=='b': #<<--- is a beat-annotation\n        beat_ants.append(a[0])\n    else:\n        non_beat_ants.append(a[0])\n\nprint('')\nprint('beat-annotation:',len(beat_ants))\nprint('non-beat-annotation:',len(non_beat_ants))\n#-----------------------------------------------------------------------------\n\n\n# data file identifiers \ng_BEAT = '_BEAT.npy'         #<<--- beat annotations\ng_NBEAT = '_NBEAT.npy'       #<<--- non-beat annotations\ng_SIG2 = '_SIG_II.npy'     #<<--- Signal Data (Removed manual gain)\n\n","8af049c5":"# Select a database name from ['mitdb', 'svdb', 'incartdb']\niDatabase = 'mitdb'\nidbPath = os.path.join(global_dir,iDatabase + '_npy' )\nprint('Database@',idbPath)\n\n# Read 'RECORDS' file for list of available records\nrecord_list = np.loadtxt(os.path.join(idbPath,'RECORDS'), dtype='str',delimiter=\"\\n\")\nprint('Total Records =',len(record_list))\nprint(record_list)","168a9ab3":"# Select a Record name\niRecord = '208' # (from database mitdb as selected in above cell)\n\n#<<---------------------------------------------\n# Load Beat-Annotation (Labels)\n#<<---------------------------------------------\nbeat_file = os.path.join(idbPath,iRecord + g_BEAT)\niBeat = np.load(beat_file)\nprint('beats:',iBeat.shape)\n# seperate out R-peaks and Labels (note both are in string format)\niRpeaks = iBeat[:,0].astype('int') #<<-- convert sampling locations to integer\niLabels = iBeat[:,1]               #<<-- labels remain as string\n# print some values....\nprint('R-Peak\\t', iRpeaks[0:5])\nprint('Labels\\t', iLabels[0:5])\nprint('')\n\n#<<---------------------------------------------\n# Load Non-Beat-Annotation\n#<<---------------------------------------------\nnbeat_file = os.path.join(idbPath,iRecord + g_NBEAT)\niNbeat = np.load(nbeat_file)\nprint('non-beats:',iNbeat.shape)\n# seperate out R-peaks and non-beats (note both are in string format)\ninRpeaks = iNbeat[:,0].astype('int') #<<-- convert sampling locations to integer\ninLabels = iNbeat[:,1] #<<-- labels remain as string\n# print some values....\nprint('nR-Peak\\t', inRpeaks[0:5])\nprint('nLabels\\t', inLabels[0:5])\nprint('')\n\n#<<---------------------------------------------\n# Load Signal Data\n#<<---------------------------------------------\nsignal_file = os.path.join(idbPath,iRecord + g_SIG2)\niSignal = np.load(signal_file)\nprint('Signal Length =',iSignal.shape)\nprint('Signal Duration =',len(iSignal)\/BASIC_SRATE, 'sec')","8422966a":"# select duration to be plotted\nplot_from, plot_to = 10, 15 # in sec, plot 5 sec signal\n\n# first convert to samples\npf, pt = int(plot_from*BASIC_SRATE), int(plot_to*BASIC_SRATE)\nsignal_slice = iSignal[pf:pt]\n\nplt.ylim(-2.5,3.5)\n_ = plt.plot(signal_slice)","3b37a427":"# find out total number of beats\nnos_beats = len(iRpeaks)\n\n# randomly select a beat to plot\nrandom_beat_index = random.randint(0,nos_beats-1)\nprint('Selected beat#',random_beat_index,'of',nos_beats)\n\n# find location of R-peak of that beat ( a single point )\nRpeak = iRpeaks[random_beat_index]\nprint('R-Peak Location:',Rpeak)\n\n# select fixed duration of signal to be plotted on either side of the R-peak\nleft_duration = 0.5 # sec\nright_duration = 1 # sec\n\n# convert to duration in sec to samples\nleft_samples = int(left_duration*BASIC_SRATE)\nright_samples = int(right_duration*BASIC_SRATE)\n\n# calculate time interval\npf, pt = Rpeak-left_samples, Rpeak+right_samples # in samples\nsignal_slice = iSignal[pf:pt]\n\n# plot\nplt.figure('beat')\nplt.ylim(-2.5,3.5)\nplt.plot(signal_slice) #<<----- Plot signal slice\nplt.vlines(Rpeak-pf,-2.5,3.5,linewidth=0.4) #<<----- Plot location of R-peak\nprint('Beat-Label:',iLabels[random_beat_index]) #<<----- Print Beat-Label","ab1522af":"plot_from, plot_to = 10, 15 # in sec, plot 5 sec signal\n\n# first convert to samples\npf, pt = int(plot_from*BASIC_SRATE), int(plot_to*BASIC_SRATE)\nsignal_slice = iSignal[pf:pt]\n\nplt.plot(signal_slice)\nplt.ylim(-2.5,3.5)\n\n\nquery_list = np.where((iRpeaks>=pf) & (iRpeaks<pt))[0]\n\nrPeaks = iRpeaks[query_list] - pf\nrLabels = iLabels[query_list]\n\n_ = plt.xticks(rPeaks,rLabels)\nplt.grid(axis='x')\n\n# also calculate the Heart-Rate in beats per minute(BPM) for given duration\n# if there are b beats in a in t sec duration then\n# beats per second = b\/t\n# beats per minute = 60* (b\/t)\n\nb,t = len(rPeaks), plot_to-plot_from\nbpm = 60*b\/t\nprint('Heart-Rate:',round(bpm,2),'bpm')","b1c9e3e0":"#-------------------------------------------------------------------------\n# Find Count of Each Beat-Annotation in the record\nprint('Record:',iDatabase,iRecord)\nbeat_ant_count = {}\nprint('Total\\t',len(iLabels))\n\nbsum = 0\nfor b in beat_ants:\n    beat_ant_count[b]= len(np.where(iLabels==b)[0])\n    print(b,'\\t',beat_ant_count[b])\n    bsum+=beat_ant_count[b]\nprint('Sum\\t',bsum)","e9693689":"# Select the duration\ntime_from, time_to = 10, 100 # in sec\n\n# Select type of label to find\nlable_to_find='F'\n\n# convert to samples\npf,pt = int(time_from*BASIC_SRATE), int(time_to*BASIC_SRATE)\n\n# design query\na_query = (\n          (iRpeaks >= pf) &\n          (iRpeaks < pt) &\n          (iLabels==lable_to_find)\n          )\n\n# retrive indices\na_list = np.where(a_query)[0]\n\nprint('Total',lable_to_find,'type beats in given duration =',len(a_list))\n\n\n# plot a random beat from retrived list\nprint('\\nRandomly select one beat...')\nif len(a_list>0):\n    sel_index = np.random.choice(a_list)\n    \n    \n    # find location of R-peak of that beat ( a single point )\n    Rpeak = iRpeaks[sel_index]\n    print('R-Peak Location:',Rpeak)\n\n    # select fixed duration of signal to be plotted on either side of the R-peak\n    left_duration = 1 # sec\n    right_duration = 1.5 # sec\n\n    # convert to duration in sec to samples\n    left_samples = int(left_duration*BASIC_SRATE)\n    right_samples = int(right_duration*BASIC_SRATE)\n\n    # calculate time interval\n    pf, pt = Rpeak-left_samples, Rpeak+right_samples # in samples\n    signal_slice = iSignal[pf:pt]\n\n    plt.figure('beat')\n    plt.ylim(-2.5,3.5)\n    plt.plot(signal_slice) #<<----- Plot signal slice\n    plt.vlines(Rpeak-pf,-2.5,3.5,linewidth=0.4) #<<----- Plot location of R-peak\n    print('Beat-Label:',iLabels[sel_index]) #<<----- Print Beat-Label","efdf8d65":"# mapping standard labels to AAMI or custom labels : NOTE - only beat-annotations are mapped\n\n# define a mapping dictionary\naami_ants = [ '_N','_S','_V','_F','_Q']\naami_mapping = {\n    \n    'N': '_N',\n    'L': '_N',\n    'R': '_N',\n    'B': '_N',\n    'A': '_S',\n    'a': '_S',\n    'J': '_S',\n    'S': '_S',\n    'V': '_V',\n    'r': '_V',\n    'F': '_F',\n    'e': '_N',\n    'j': '_N',\n    'n': '_N',\n    'E': '_N',\n    'f': '_Q',\n    '\/': '_Q',\n    'Q': '_Q',\n    '?': '_Q',\n                } # <<-- aami labels have been prefixed by _ to avoid confusion\n\n\n# map all iLabels to aamiLabels\naamiLabels = np.zeros(len(iLabels), dtype='U2')  #<<--- U2 since we use 2 chars for aami labels\n\nfor i in range(0,len(iLabels)):\n    aamiLabels[i]=aami_mapping[iLabels[i]]\n\n#----- mapping done------------ \n# this new array can be used similar to iLabels\n\n#-------------------------------------------------------------------------\n# Find Count of Each AAMI Label in the record\nprint('Record:',iDatabase,iRecord)\naami_ant_count = {}\nprint('Total\\t',len(aamiLabels))\n\nbsum = 0\nfor b in aami_ants:\n    aami_ant_count[b]= len(np.where(aamiLabels==b)[0])\n    print(b,'\\t',aami_ant_count[b])\n    bsum+=aami_ant_count[b]\nprint('Sum\\t',bsum)","f03b2a05":"# Select a duration\ntime_from, time_to = 10, 100 # in sec\nlable_to_find='_N'\n\n# convert to samples\npf,pt = int(time_from*BASIC_SRATE), int(time_to*BASIC_SRATE)\n\n# design query\na_query = (\n          (iRpeaks >= pf) &\n          (iRpeaks < pt) &\n          (aamiLabels==lable_to_find)\n          )\n\n# retrive indices\na_list = np.where(a_query)[0]\n\nprint('Total',lable_to_find,'type beats in given duration =',len(a_list))\n\n\n# plot a random beat from retrived list\nprint('\\nRandomly select one beat...')\nif len(a_list>0):\n    sel_index = np.random.choice(a_list)\n    \n    \n    # find location of R-peak of that beat ( a single point )\n    Rpeak = iRpeaks[sel_index]\n    print('R-Peak Location:',Rpeak)\n\n    # select fixed duration of signal to be plotted on either side of the R-peak\n    left_duration = 1 # sec\n    right_duration = 1.5 # sec\n\n    # convert to duration in sec to samples\n    left_samples = int(left_duration*BASIC_SRATE)\n    right_samples = int(right_duration*BASIC_SRATE)\n\n    # calculate time interval\n    pf, pt = Rpeak-left_samples, Rpeak+right_samples # in samples\n    signal_slice = iSignal[pf:pt]\n\n    plt.figure('beat')\n    plt.ylim(-2.5,3.5)\n    plt.plot(signal_slice) #<<----- Plot signal slice\n    plt.vlines(Rpeak-pf,-2.5,3.5,linewidth=0.4)  #<<----- Plot location of R-peak\n    print('Beat-Label:',iLabels[sel_index]) #<<----- Print Beat-Label\n    print('AAMI-Label:',aamiLabels[sel_index]) #<<----- Print Beat-Label","20b85ce8":"# Select time duration\nplot_from, plot_to = 1000, 1020 # in sec, plot 20 sec signal\n\n# first convert to samples\npf, pt = int(plot_from*BASIC_SRATE), int(plot_to*BASIC_SRATE)\nsignal_slice = iSignal[pf:pt]\nplt.figure('fancy',figsize=(20,6))\nplt.plot(signal_slice,linewidth=0.6,color='black')\nplt.ylim(-2.5,3.5)\n\n# display standard labels as ticks\nquery_list = np.where((iRpeaks>=pf) & (iRpeaks<pt))[0]\n\nrPeaks = iRpeaks[query_list] - pf\nrLabels = iLabels[query_list]\n\n_ = plt.xticks(rPeaks,rLabels)\nplt.grid(axis='x')\n\n# display aami labels as scatter\nrLabels = aamiLabels[query_list]\n\n# need a color map for aami labels\naami_color_dict = {'_N':'tab:green','_S':'tab:red','_V':'tab:blue','_F':'tab:purple','_Q':'tab:gray'}\nrLcol = np.zeros(len(rLabels), dtype='U10')\nfor i in range(0,len(rLabels)):\n    rLcol[i]=aami_color_dict[rLabels[i]]\n_ = plt.scatter(rPeaks,np.zeros(len(rPeaks))-2,color=rLcol,marker='s')\n","a6a5ecea":"# Select time duration\nplot_from, plot_to = 1000, 1020 # in sec, plot 20 sec signal\n\n# first convert to samples\npf, pt = int(plot_from*BASIC_SRATE), int(plot_to*BASIC_SRATE)\n\nquery_list = np.where((iRpeaks>=pf) & (iRpeaks<pt))[0]\nif len(query_list)>1 : #proceed only if at least 2 R peaks are present\n    \n    # calculate RR Intervals\n    rpeaks_range = iRpeaks[query_list]\n    rri_intervals = rpeaks_range[1:] - rpeaks_range[0:-1]\n    \n    # convert to seconds\n    rri_intervals=rri_intervals\/BASIC_SRATE\n    \n    # plot\n    plt.plot(rri_intervals)\n    \n    # RR-Interval can also be considered as the duration of 1 beat\n    # to calculate Hear-Rate, find average RR Interval\n    avg_RRI = np.average(rri_intervals)\n    \n    # heart-rate\n    bpm = 60\/avg_RRI\n    print('Heart-Rate:',round(bpm,2),'bpm')\n    \nelse:\n    print('Not enough R-Peaks in the interval')\n        \n        \n\n","693ced7d":"# Creating a custom set of beat labels","899ea2c7":"# Counting labels present in a record","5baa9da0":"# plot RR-Intervals in a given duration\nRR-Interval might be import to determine the regularity of the rhythm. It can also be used to calculate heart rate.","dd7485b3":"# Plot the signal data (fixed duration along with labels)","4c2146c7":"**Access and use ECG Lead 2 Dataset PhysioNet**","535e2108":"# Select a database and list its records","c50f2e81":"# Find all beats of a particular lable in a given duration of the record","58ff964e":"# Plot the signal data (for any beat\/R-peak)","80678b5b":"# Displaying both standard and custom labels in a given duration","792f5696":"# Find all beats of a particular aami or Custom lable in a given duration of the record","97609b38":"# Plot the signal data (fixed duration)","3f890bfe":"# Global Section","21d36324":"# Select a record within a database and read its data"}}