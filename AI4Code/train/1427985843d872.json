{"cell_type":{"96c48672":"code","81514aba":"code","5b4c6177":"code","e9f71f69":"code","088fd63b":"code","fc04a31c":"code","bf724b6e":"code","907c4e87":"code","24ca2d6e":"code","752e4648":"code","7c690b04":"code","a94290f1":"code","474ca17b":"code","1377e891":"code","a3a8435f":"code","c71ce281":"code","d9c27d62":"code","3ddf22a1":"code","2763fede":"code","3e6cb382":"code","ed2d9367":"code","b486fdd8":"code","b52a0e5c":"code","766fff6f":"code","7cffbc37":"code","5d99b6b4":"code","98972251":"code","5fb86c54":"code","28c5e0ea":"code","50e509dd":"code","a6558fe9":"code","aa174ef9":"markdown","31f5aa98":"markdown","99ad58f4":"markdown","32c24600":"markdown","f0ed21e7":"markdown","0e787b23":"markdown","eb56f121":"markdown","073f18f4":"markdown","52c63b34":"markdown","66cdb6b7":"markdown","94c95743":"markdown","962cd04a":"markdown","580630c6":"markdown","dea8ffaa":"markdown","c05a5df5":"markdown","64b56f76":"markdown","f2f90804":"markdown","483f5f94":"markdown","36dadd7f":"markdown","47504c57":"markdown","38b6d2ba":"markdown","b5d82a18":"markdown","de694426":"markdown"},"source":{"96c48672":"# Importing numpy, pandas and Series + DataFrame:\nimport numpy as np\nimport pandas as pd\nfrom pandas import Series, DataFrame\n\n# Imports for plotly:\nimport plotly.graph_objs as go\nimport plotly.express as px\nimport plotly.figure_factory as ff\nfrom plotly.subplots import make_subplots\n\n# Imports for plotting:\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nsns.set_style('whitegrid')\n%matplotlib inline","81514aba":"# Importing breast cancer dataset:\ndf = pd.read_csv('..\/input\/breast-cancer-wisconsin-data\/data.csv')","5b4c6177":"# Check first 5 rows of dataset:\ndf.head()","e9f71f69":"# Function to describe variables\ndef desc(df):\n    d = pd.DataFrame(df.dtypes,columns=['Data_Types'])\n    d = d.reset_index()\n    d['Columns'] = d['index']\n    d = d[['Columns','Data_Types']]\n    d['Missing'] = df.isnull().sum().values    \n    d['Uniques'] = df.nunique().values\n    return d\n\n# Apply function on df:\ndesc(df)","088fd63b":"# Preview of diagnosis :\nprint(df.diagnosis.unique())","fc04a31c":"df['target'] = df.diagnosis.map({'B':0, 'M':1})\ndf = pd.DataFrame(df.drop(['diagnosis', 'id', 'Unnamed: 32'], axis=1))","bf724b6e":"trg_df = pd.DataFrame(df.groupby(['target'])['target'].count())\n\n# Target distribution:\n\n\ndata=go.Bar(x = trg_df.index\n           , y = trg_df.target\n           ,  marker=dict( color=['#3198b7', '#fd6190'])\n           , text=trg_df.target\n           , textposition='auto' \n           )\n\n\n\nlayout = go.Layout(title = 'Target distribution'\n                   , xaxis = dict(title = 'Target')\n                   , yaxis = dict(title = 'Volume')\n                  )\n\nfig = go.Figure(data,layout)\nfig.show()","907c4e87":"# Plotting the features of our dataset (this gives us density graphs and scatter plots): \n\ncols = ['radius', 'texture', 'perimeter', 'area','smoothness', 'compactness', 'concavity','concave points', 'symmetry', 'fractal', 'target']\n\ndf_mean = df[['radius_mean', 'texture_mean', 'perimeter_mean', 'area_mean','smoothness_mean', 'compactness_mean',\n              'concavity_mean', 'concave points_mean', 'symmetry_mean', 'fractal_dimension_mean','target']]\ndf_mean.columns = cols\n\n\nsns.set(style=\"ticks\")\nsns.pairplot(df_mean[cols]\n             , hue='target'\n             , palette=['#3198b7', '#fd6190']\n             , diag_kind = 'kde'\n             #, height = 2\n             , corner = True)\nplt.show()","24ca2d6e":"df['target'] = df.target.astype(str)\n\nfig = px.scatter(df\n                 , x='area_mean'\n                 , y='smoothness_mean'\n                 , color='target'\n                 , size='perimeter_mean'\n                 , color_discrete_sequence=['#fd6190', '#3198b7']\n                 , title='Scatter for Area vs Smoothness (sized by Perimeter)'\n                )\nfig.show()","752e4648":"fig = px.scatter(df\n                 , x='concave points_mean'\n                 , y=  'fractal_dimension_mean'         \n                 , color='target'\n                 , size='concavity_mean'\n                 , color_discrete_sequence=[ '#fd6190', '#3198b7']\n                 , title='Scatter for Concave Points vs Fractal Dimension (sized by Concavity)'\n                )\nfig.show()","7c690b04":"fig = px.scatter(df\n                 , x='concave points_mean'\n                 , y=  'concavity_mean'     \n                 , color='target'\n                 , size='area_mean'\n                 , color_discrete_sequence=[ '#fd6190', '#3198b7']\n                 , title='Scatter for Concave Points vs Concavity (sized by Area)'\n                )\nfig.show()","a94290f1":"# Boxplot with dropdown menu for Mean Features:\n\nfig = go.Figure()\n\n# Add Traces\n\nfig.add_trace(\n    go.Box(x=df.target[df.target=='0'], y=df.radius_mean[df.target=='0'], name='Radius (0)', fillcolor='#3198b7'))\nfig.add_trace(\n    go.Box(x=df.target[df.target=='1'], y=df.radius_mean[df.target=='1'], name='Radius (1)', fillcolor='#fd6190'))  \n\nfig.add_trace(\n    go.Box(x=df.target[df.target=='0'], y=df.texture_mean[df.target=='0'], name='Texture (0)', fillcolor='#3198b7', visible=False))\nfig.add_trace(\n    go.Box( x=df.target[df.target=='1'], y=df.texture_mean[df.target=='1'], name='Texture (1)', fillcolor='#fd6190', visible=False))  \n\nfig.add_trace(\n    go.Box(x=df.target[df.target=='0'], y=df.perimeter_mean[df.target=='0'], name='Perimeter (0)', fillcolor='#3198b7', visible=False))\nfig.add_trace(\n    go.Box( x=df.target[df.target=='1'], y=df.perimeter_mean[df.target=='1'], name='Perimeter (1)', fillcolor='#fd6190', visible=False))  \n\nfig.add_trace(\n    go.Box(x=df.target[df.target=='0'], y=df.area_mean[df.target=='0'], name='Area (0)', fillcolor='#3198b7', visible=False))\nfig.add_trace(\n    go.Box( x=df.target[df.target=='1'], y=df.area_mean[df.target=='1'], name='Area (1)', fillcolor='#fd6190', visible=False))  \n\nfig.add_trace(\n    go.Box(x=df.target[df.target=='0'], y=df.smoothness_mean[df.target=='0'], name='Smoothness (0)', fillcolor='#3198b7', visible=False))\nfig.add_trace(\n    go.Box( x=df.target[df.target=='1'], y=df.smoothness_mean[df.target=='1'], name='Smoothness (1)', fillcolor='#fd6190', visible=False))  \n\nfig.add_trace(\n    go.Box(x=df.target[df.target=='0'], y=df.compactness_mean[df.target=='0'], name='Compactness (0)', fillcolor='#3198b7', visible=False))\nfig.add_trace(\n    go.Box( x=df.target[df.target=='1'], y=df.compactness_mean[df.target=='1'], name='Compactness (1)', fillcolor='#fd6190', visible=False))  \n\nfig.add_trace(\n    go.Box(x=df.target[df.target=='0'], y=df.concavity_mean[df.target=='0'], name='Concavity (0)', fillcolor='#3198b7', visible=False))\nfig.add_trace(\n    go.Box( x=df.target[df.target=='1'], y=df.concavity_mean[df.target=='1'], name='Concavity (1)', fillcolor='#fd6190', visible=False))  \n\nfig.add_trace(\n    go.Box(x=df.target[df.target=='0'], y=df.fractal_dimension_mean[df.target=='0'], name='Fractal Dimention (0)', fillcolor='#3198b7', visible=False))\nfig.add_trace(\n    go.Box( x=df.target[df.target=='1'], y=df.fractal_dimension_mean[df.target=='1'], name='Fractal Dimention (1)', fillcolor='#fd6190', visible=False))  \n\nfig.add_trace(\n    go.Box(x=df.target[df.target=='0'], y=df.symmetry_mean[df.target=='0'], name='Symmetry (0)', fillcolor='#3198b7', visible=False))\nfig.add_trace(\n    go.Box( x=df.target[df.target=='1'], y=df.symmetry_mean[df.target=='1'], name='Symmetry (1)', fillcolor='#fd6190', visible=False))  \n\n\n# Add Buttons\n\nfig.update_layout(\n    updatemenus=[\n        dict(\n            active=0,\n            buttons=list([ \n                \n                dict(label='Radius',\n                     method='update',\n                     args=[{'visible': [True, True, False, False, False, False,False, False, False, False, False, False, False, False,False, False, False, False]},\n                           {'title': \"Boxplot for Malignant & Benign (MEAN Radius)\"}]),\n                \n                dict(label='Texture',\n                     method='update',\n                     args=[{'visible': [False, False, True, True, False, False,False, False, False, False, False, False, False, False,False, False, False, False]},\n                           {'title': \"Boxplot for Malignant & Benign (MEAN Texture)\"}]),\n                \n                dict(label='Perimeter',\n                     method='update',\n                     args=[{'visible': [False, False, False, False, True, True, False, False, False, False, False, False, False, False,False, False, False, False]},\n                           {'title': \"Boxplot for Malignant & Benign (MEAN Perimeter)\"}]),\n                \n                dict(label='Area',\n                     method='update',\n                     args=[{'visible': [False, False, False, False,False, False, True, True, False, False, False, False, False, False,False, False, False, False]},\n                           {'title': \"Boxplot for Malignant & Benign (MEAN Area)\"}]),\n                \n                dict(label='Smoothness',\n                     method='update',\n                     args=[{'visible': [False, False, False, False, False, False, False, False,True, True, False, False, False, False,False, False, False, False]},\n                           {'title': \"Boxplot for Malignant & Benign (MEAN Smoothness)\"}]),\n                \n                dict(label='Compactness',\n                     method='update',\n                     args=[{'visible': [False, False, False, False, False, False, False, False, False, False, True, True, False, False,False, False, False, False]},\n                           {'title': \"Boxplot for Malignant & Benign (MEAN Compactness)\"}]),\n                \n                dict(label=\"Concavity\",\n                     method='update',\n                     args=[{'visible': [False, False, False, False, False, False, False, False ,False, False, False, False, True, True, False, False, False, False]},\n                           {'title': \"Boxplot for Malignant & Benign (MEAN Concavity)\"}]),\n                \n                dict(label='Fractal Dimention',\n                     method='update',\n                     args=[{'visible': [False, False, False, False, False, False, False, False, False, False, False, False,False, False, True, True, False, False]},\n                           {\"title\": \"Boxplot for Malignant & Benign (MEAN Fractal Dimention)\"}]),\n                \n                dict(label='Symmetry',\n                     method='update',\n                     args=[{'visible': [False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, True, True]},\n                           {'title': \"Boxplot for Malignant & Benign (MEAN Symmetry)\"}]),                \n\n            ]),\n        )\n    ])\n\n# Set title\nfig.update_layout(title_text=\"Boxplot for Malignant & Benign (MEAN Features)\")\n\nfig.show()","474ca17b":"# Boxplot with dropdown menu for SE Features:\n\nfig = go.Figure()\n\n# Add Traces\n\nfig.add_trace(\n    go.Box(x=df.target[df.target=='0'], y=df.radius_se[df.target=='0'], name='Radius (0)', fillcolor='#3198b7'))\nfig.add_trace(\n    go.Box(x=df.target[df.target=='1'], y=df.radius_se[df.target=='1'], name='Radius (1)', fillcolor='#fd6190'))  \n\nfig.add_trace(\n    go.Box(x=df.target[df.target=='0'], y=df.texture_se[df.target=='0'], name='Texture (0)', fillcolor='#3198b7', visible=False))\nfig.add_trace(\n    go.Box(x=df.target[df.target=='1'], y=df.texture_se[df.target=='1'], name='Texture (1)', fillcolor='#fd6190', visible=False))  \n\nfig.add_trace(\n    go.Box(x=df.target[df.target=='0'], y=df.perimeter_se[df.target=='0'], name='Perimeter (0)', fillcolor='#3198b7', visible=False))\nfig.add_trace(\n    go.Box(x=df.target[df.target=='1'], y=df.perimeter_se[df.target=='1'], name='Perimeter (1)', fillcolor='#fd6190', visible=False))  \n\nfig.add_trace(\n    go.Box(x=df.target[df.target=='0'], y=df.area_se[df.target=='0'], name='Area (0)', fillcolor='#3198b7', visible=False))\nfig.add_trace(\n    go.Box(x=df.target[df.target=='1'], y=df.area_se[df.target=='1'], name='Area (1)', fillcolor='#fd6190', visible=False))  \n\nfig.add_trace(\n    go.Box(x=df.target[df.target=='0'], y=df.smoothness_se[df.target=='0'], name='Smoothness (0)', fillcolor='#3198b7', visible=False))\nfig.add_trace(\n    go.Box(x=df.target[df.target=='1'], y=df.smoothness_se[df.target=='1'], name='Smoothness (1)', fillcolor='#fd6190', visible=False))  \n\nfig.add_trace(\n    go.Box(x=df.target[df.target=='0'], y=df.compactness_se[df.target=='0'], name='Compactness (0)', fillcolor='#3198b7', visible=False))\nfig.add_trace(\n    go.Box(x=df.target[df.target=='1'], y=df.compactness_se[df.target=='1'], name='Compactness (1)', fillcolor='#fd6190', visible=False))  \n\nfig.add_trace(\n    go.Box(x=df.target[df.target=='0'], y=df.concavity_se[df.target=='0'], name='Concavity (0)', fillcolor='#3198b7', visible=False))\nfig.add_trace(\n    go.Box(x=df.target[df.target=='1'], y=df.concavity_se[df.target=='1'], name='Concavity (1)', fillcolor='#fd6190', visible=False))  \n\nfig.add_trace(\n    go.Box(x=df.target[df.target=='0'], y=df.fractal_dimension_se[df.target=='0'], name='Fractal Dimention (0)', fillcolor='#3198b7', visible=False))\nfig.add_trace(\n    go.Box(x=df.target[df.target=='1'], y=df.fractal_dimension_se[df.target=='1'], name='Fractal Dimention (1)', fillcolor='#fd6190', visible=False))  \n\nfig.add_trace(\n    go.Box(x=df.target[df.target=='0'], y=df.symmetry_se[df.target=='0'], name='Symmetry (0)', fillcolor='#3198b7', visible=False))\nfig.add_trace(\n    go.Box(x=df.target[df.target=='1'], y=df.symmetry_se[df.target=='1'], name='Symmetry (1)', fillcolor='#fd6190', visible=False))  \n\n\n# Add Buttons\n\nfig.update_layout(\n    updatemenus=[\n        dict(\n            active=0,\n            buttons=list([ \n                \n                dict(label='Radius',\n                     method='update',\n                     args=[{'visible': [True, True, False, False, False, False,False, False, False, False, False, False, False, False,False, False, False, False]},\n                           {'title': \"Boxplot for Malignant & Benign (SE Radius)\"}]),\n                \n                dict(label='Texture',\n                     method='update',\n                     args=[{'visible': [False, False, True, True, False, False,False, False, False, False, False, False, False, False,False, False, False, False]},\n                           {'title': \"Boxplot for Malignant & Benign (SE Texture)\"}]),\n                \n                dict(label='Perimeter',\n                     method='update',\n                     args=[{'visible': [False, False, False, False, True, True, False, False, False, False, False, False, False, False,False, False, False, False]},\n                           {'title': \"Boxplot for Malignant & Benign (SE Perimeter)\"}]),\n                \n                dict(label='Area',\n                     method='update',\n                     args=[{'visible': [False, False, False, False,False, False, True, True, False, False, False, False, False, False,False, False, False, False]},\n                           {'title': \"Boxplot for Malignant & Benign (SE Area)\"}]),\n                \n                dict(label='Smoothness',\n                     method='update',\n                     args=[{'visible': [False, False, False, False, False, False, False, False,True, True, False, False, False, False,False, False, False, False]},\n                           {'title': \"Boxplot for Malignant & Benign (SE Smoothness)\"}]),\n                \n                dict(label='Compactness',\n                     method='update',\n                     args=[{'visible': [False, False, False, False, False, False, False, False, False, False, True, True, False, False,False, False, False, False]},\n                           {'title': \"Boxplot for Malignant & Benign (SE Compactness)\"}]),\n                \n                dict(label=\"Concavity\",\n                     method='update',\n                     args=[{'visible': [False, False, False, False, False, False, False, False ,False, False, False, False, True, True, False, False, False, False]},\n                           {'title': \"Boxplot for Malignant & Benign (SE Concavity)\"}]),\n                \n                dict(label='Fractal Dimention',\n                     method='update',\n                     args=[{'visible': [False, False, False, False, False, False, False, False, False, False, False, False,False, False, True, True, False, False]},\n                           {\"title\": \"Boxplot for Malignant & Benign (SE Fractal Dimention)\"}]),\n                \n                dict(label='Symmetry',\n                     method='update',\n                     args=[{'visible': [False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, True, True]},\n                           {'title': \"Boxplot for Malignant & Benign (SE Symmetry)\"}]),\n                \n\n            ]),\n        )\n    ])\n\n# Set title\nfig.update_layout(title_text=\"Boxplot for Malignant & Benign (SE Features)\")\n\nfig.show()","1377e891":"# Boxplot with dropdown menu for WORST Features:\n\nfig = go.Figure()\n\n# Add Traces\n\nfig.add_trace(\n    go.Box(x=df.target[df.target=='0'], y=df.radius_worst[df.target=='0'], name='Radius (0)', fillcolor='#3198b7'))\nfig.add_trace(\n    go.Box(x=df.target[df.target=='1'], y=df.radius_worst[df.target=='1'], name='Radius (1)', fillcolor='#fd6190'))  \n\nfig.add_trace(\n    go.Box(x=df.target[df.target=='0'], y=df.texture_worst[df.target=='0'], name='Texture (0)', fillcolor='#3198b7', visible=False))\nfig.add_trace(\n    go.Box(x=df.target[df.target=='1'], y=df.texture_worst[df.target=='1'], name='Texture (1)', fillcolor='#fd6190', visible=False))  \n\nfig.add_trace(\n    go.Box(x=df.target[df.target=='0'], y=df.perimeter_worst[df.target=='0'], name='Perimeter (0)', fillcolor='#3198b7', visible=False))\nfig.add_trace(\n    go.Box(x=df.target[df.target=='1'], y=df.perimeter_worst[df.target=='1'], name='Perimeter (1)', fillcolor='#fd6190', visible=False))  \n\nfig.add_trace(\n    go.Box(x=df.target[df.target=='0'], y=df.area_worst[df.target=='0'], name='Area (0)', fillcolor='#3198b7', visible=False))\nfig.add_trace(\n    go.Box(x=df.target[df.target=='1'], y=df.area_worst[df.target=='1'], name='Area (1)', fillcolor='#fd6190', visible=False))  \n\nfig.add_trace(\n    go.Box(x=df.target[df.target=='0'], y=df.smoothness_worst[df.target=='0'], name='Smoothness (0)', fillcolor='#3198b7', visible=False))\nfig.add_trace(\n    go.Box(x=df.target[df.target=='1'], y=df.smoothness_worst[df.target=='1'], name='Smoothness (1)', fillcolor='#fd6190', visible=False))  \n\nfig.add_trace(\n    go.Box(x=df.target[df.target=='0'], y=df.compactness_worst[df.target=='0'], name='Compactness (0)', fillcolor='#3198b7', visible=False))\nfig.add_trace(\n    go.Box(x=df.target[df.target=='1'], y=df.compactness_worst[df.target=='1'], name='Compactness (1)', fillcolor='#fd6190', visible=False))  \n\nfig.add_trace(\n    go.Box(x=df.target[df.target=='0'], y=df.concavity_worst[df.target=='0'], name='Concavity (0)', fillcolor='#3198b7', visible=False))\nfig.add_trace(\n    go.Box(x=df.target[df.target=='1'], y=df.concavity_worst[df.target=='1'], name='Concavity (1)', fillcolor='#fd6190', visible=False))  \n\nfig.add_trace(\n    go.Box(x=df.target[df.target=='0'], y=df.fractal_dimension_worst[df.target=='0'], name='Fractal Dimention (0)', fillcolor='#3198b7', visible=False))\nfig.add_trace(\n    go.Box(x=df.target[df.target=='1'], y=df.fractal_dimension_worst[df.target=='1'], name='Fractal Dimention (1)', fillcolor='#fd6190', visible=False))  \n\nfig.add_trace(\n    go.Box(x=df.target[df.target=='0'], y=df.symmetry_worst[df.target=='0'], name='Symmetry (0)', fillcolor='#3198b7', visible=False))\nfig.add_trace(\n    go.Box(x=df.target[df.target=='1'], y=df.symmetry_worst[df.target=='1'], name='Symmetry (1)', fillcolor='#fd6190', visible=False))  \n\n\n# Add Buttons\n\nfig.update_layout(\n    updatemenus=[\n        dict(\n            active=0,\n            buttons=list([ \n                \n                dict(label='Radius',\n                     method='update',\n                     args=[{'visible': [True, True, False, False, False, False,False, False, False, False, False, False, False, False,False, False, False, False]},\n                           {'title': \"Boxplot for Malignant & Benign (WORST Radius)\"}]),\n                \n                dict(label='Texture',\n                     method='update',\n                     args=[{'visible': [False, False, True, True, False, False,False, False, False, False, False, False, False, False,False, False, False, False]},\n                           {'title': \"Boxplot for Malignant & Benign (WORST Texture)\"}]),\n                \n                dict(label='Perimeter',\n                     method='update',\n                     args=[{'visible': [False, False, False, False, True, True, False, False, False, False, False, False, False, False,False, False, False, False]},\n                           {'title': \"Boxplot for Malignant & Benign (WORST Perimeter)\"}]),\n                \n                dict(label='Area',\n                     method='update',\n                     args=[{'visible': [False, False, False, False,False, False, True, True, False, False, False, False, False, False,False, False, False, False]},\n                           {'title': \"Boxplot for Malignant & Benign (WORST Area)\"}]),\n                \n                dict(label='Smoothness',\n                     method='update',\n                     args=[{'visible': [False, False, False, False, False, False, False, False,True, True, False, False, False, False,False, False, False, False]},\n                           {'title': \"Boxplot for Malignant & Benign (WORST Smoothness)\"}]),\n                \n                dict(label='Compactness',\n                     method='update',\n                     args=[{'visible': [False, False, False, False, False, False, False, False, False, False, True, True, False, False,False, False, False, False]},\n                           {'title': \"Boxplot for Malignant & Benign (WORST Compactness)\"}]),\n                \n                dict(label=\"Concavity\",\n                     method='update',\n                     args=[{'visible': [False, False, False, False, False, False, False, False ,False, False, False, False, True, True, False, False, False, False]},\n                           {'title': \"Boxplot for Malignant & Benign (WORST Concavity)\"}]),\n                \n                dict(label='Fractal Dimention',\n                     method='update',\n                     args=[{'visible': [False, False, False, False, False, False, False, False, False, False, False, False,False, False, True, True, False, False]},\n                           {\"title\": \"Boxplot for Malignant & Benign (WORST Fractal Dimention)\"}]),\n                \n                dict(label='Symmetry',\n                     method='update',\n                     args=[{'visible': [False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, True, True]},\n                           {'title': \"Boxplot for Malignant & Benign (WORST Symmetry)\"}]),\n                \n\n            ]),\n        )\n    ])\n\n# Set title\nfig.update_layout(title_text=\"Boxplot for Malignant & Benign (WORST Features)\")\n\nfig.show()","a3a8435f":"# Correlation matrix for Wisconsin dataset features:\ndf['target'] = df.target.astype(int)\n\ncorr = df.corr()\n\nfig = go.Figure(data=go.Heatmap(\n                   z=corr\n                 , x=df.columns\n                 , y=df.columns\n                 , hoverongaps = False\n                 , colorscale= 'Sunsetdark'\n))\n\nfig.update_layout(title='Correlation for Features of Wisconsin Dataset')\n\n\nfig.show()","c71ce281":"# Define input values, or X by dropping the target values:\nX = df.drop(['target'], axis = 1)\n\n# Define output values - this is the target:\ny = df['target']","d9c27d62":"# For splitting data we will be using train_test_split from sklearn:\nfrom sklearn.model_selection import train_test_split","3ddf22a1":"# Splitting the data into test and train, we are testing on 0.2 = 20% of dataset:\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)","2763fede":"# Imports for training data:\nfrom sklearn.svm import SVC\nfrom sklearn.metrics import classification_report, confusion_matrix\n\nmodel = SVC()","3e6cb382":"# Training the model:\nmodel.fit(X_train,y_train)","ed2d9367":"# Precictions for X_test:\ny_predict = model.predict(X_test)","b486fdd8":"print(classification_report(y_test,y_predict))","b52a0e5c":"p = confusion_matrix(y_test,y_predict)\n\nq = ['0', '1']\nr = ['0', '1']\n\n# change each element of z to type string for annotations\nz_text = [[str(r) for r in q] for q in p]\n\n# set up figure \nfig = ff.create_annotated_heatmap(p, x=q, y=r, annotation_text=z_text, colorscale='Portland')\n\n# add title\nfig.update_layout(title_text='<i><b>Confusion matrix<\/b><\/i>',\n                  #xaxis = dict(title='x'),\n                  #yaxis = dict(title='x')\n                 )\n\n# add custom xaxis title\nfig.add_annotation(dict(font=dict(color=\"black\",size=14),\n                        x=0.5,\n                        y=-0.15,\n                        showarrow=False,\n                        text=\"Predicted value\",\n                        xref=\"paper\",\n                        yref=\"paper\"))\n\n# add custom yaxis title\nfig.add_annotation(dict(font=dict(color=\"black\",size=14),\n                        x=-0.35,\n                        y=0.5,\n                        showarrow=False,\n                        text=\"Real value\",\n                        textangle=-90,\n                        xref=\"paper\",\n                        yref=\"paper\"))\n\n# adjust margins to make room for yaxis title\nfig.update_layout(margin=dict(t=50, l=200))\n\n# add colorbar\nfig['data'][0]['showscale'] = True\nfig.show()\n","766fff6f":"# Perform normalisation:\nminx = X.min()\nrangex = (X - minx).max()\nX_scaled = (X - minx)\/rangex","7cffbc37":"# Splitting the data into test and train, we are testing on 0.2 = 20% of dataset:\nX_train_scaled, X_test_scaled, y_train, y_test = train_test_split(X_scaled, y, test_size=0.2, random_state=42)","5d99b6b4":"fig = px.scatter(X_train\n                 , x='area_mean'\n                 , y=  'smoothness_mean'     \n                 , color=y_train.astype(str)\n                 , color_discrete_sequence=[  '#3198b7', '#fd6190']\n                 , title='Training data (Not Normalised)'\n                )\nfig.show()","98972251":"fig = px.scatter(X_train_scaled\n                 , x='area_mean'\n                 , y='smoothness_mean'     \n                 , color=y_train.astype(str)\n                 , color_discrete_sequence=[  '#3198b7', '#fd6190']\n                 , title='Training data (Normalised)'\n                )\nfig.show()","5fb86c54":"# Training the model:\nmodel.fit(X_train_scaled,y_train)","28c5e0ea":"y_predict = model.predict(X_test_scaled)","50e509dd":"print(classification_report(y_test,y_predict))","a6558fe9":"p = confusion_matrix(y_test,y_predict)\n\nq = ['0', '1']\nr = ['0', '1']\n\n# change each element of z to type string for annotations\nz_text = [[str(r) for r in q] for q in p]\n\n# set up figure \nfig = ff.create_annotated_heatmap(p, x=q, y=r, annotation_text=z_text, colorscale='Portland')\n\n# add title\nfig.update_layout(title_text='<i><b>Confusion matrix<\/b><\/i>',\n                  #xaxis = dict(title='x'),\n                  #yaxis = dict(title='x')\n                 )\n\n# add custom xaxis title\nfig.add_annotation(dict(font=dict(color=\"black\",size=14),\n                        x=0.5,\n                        y=-0.15,\n                        showarrow=False,\n                        text=\"Predicted value\",\n                        xref=\"paper\",\n                        yref=\"paper\"))\n\n# add custom yaxis title\nfig.add_annotation(dict(font=dict(color=\"black\",size=14),\n                        x=-0.35,\n                        y=0.5,\n                        showarrow=False,\n                        text=\"Real value\",\n                        textangle=-90,\n                        xref=\"paper\",\n                        yref=\"paper\"))\n\n# adjust margins to make room for yaxis title\nfig.update_layout(margin=dict(t=50, l=200))\n\n# add colorbar\nfig['data'][0]['showscale'] = True\nfig.show()","aa174ef9":"######  A small introduction to the dataset:","31f5aa98":"By normalising the data, we will rescale each of the columns as we can see on our scatterplots below. As we can see on Normalized graph, x and y axis are between 0 and 1.","99ad58f4":"The boxplots below are for features with suffix of MEAN, SE and WORST. You can select a feature from dropdown menu to explore ditributions.","32c24600":"## Model Training and Finding a Problem Solution ","f0ed21e7":"We have 357 benign and 212 malignent samples in our DataSet. ","0e787b23":"Breast cancer is the most common malignancy among women. It occurs as a results of abnormal growth of cells in the breast tissue, commonly referred to as a tumor. A tumor does not mean cancer - tumors can be benign (not cancerous), pre-malignant (pre-cancerous). Tests such as MRI, mammogram, ultrasound and biopsy are commonly used to diagnose breast cancer.\n\nOur dataset was created by Dr. William H. Wolberg, physician at the University Of Wisconsin Hospital at Madison, Wisconsin, USA. To create the dataset Dr. Wolberg used fluid samples, taken from patients with solid breast masses and an easy-to-use graphical computer program called Xcyt, which is capable of perform the analysis of cytological features based on a digital scan. The program uses a curve-fitting algorithm, to compute ten features from each one of the cells in the sample, than it calculates the mean value, extreme value and standard error of each feature for the image, returning a 30 real-valuated vector.","eb56f121":"# Breast Cancer Classification","073f18f4":"### Improving the Model ","52c63b34":"![bcdetection](https:\/\/cytecare.com\/wp-content\/uploads\/2020\/06\/breast-cancer-detection.jpg)","66cdb6b7":"### Correlation Matrix","94c95743":"Here we can see that samples with area_mean over 1000 are all malignant.","962cd04a":"## **If you like my work, please show your appreciation by upvoting. :)**","580630c6":"### Boxplots  ","dea8ffaa":"By performing normalisation we got a model accuracy of ~97%.  To improve further we can also try to optimise C and gamma parameters or train model on more data. In first model, we predicted 6 False Negative women, who's sample was actually malignant. Second model improved slightly, since we predicted False Negative samles at only 2 women. \n\nOur aim would be to predict 0 False Negative, so all women with cancer would get detected and those predicted False Positive would get checked.","c05a5df5":"### Importing Data ","64b56f76":"We will be using a simple SVC (Support Vector Classification) model. ","f2f90804":"We can see that correlation between some features is strong positive such as 0.97, 0.96, 0.94 (highlited by dark red). ","483f5f94":"Our model has predicted 6 False Negative values, this means that 6 women with malignant sample haven't been detected. In this case we would rather prefer 6 False Positive outcomes and 0 False Negative. \n\nThe reason is simple, women with False Positive sample would be detected and would go for further tests, but False Negative have cancer and their desease is not detected.","36dadd7f":"### Evaluating the Model ","47504c57":"### Pairplot and Scatter Plots","38b6d2ba":"###### Splitting the data into a training and testing set: ","b5d82a18":"Our diagnosis column contains B = benign and M = malignant, where malignant is cancerous. We will create a target column with B=0 and M=1. Column Unnamed: 32 contains only NaN values and it can be dropped together with id as it wont't give us any useful information. ","de694426":"## Exploratory Data Analysis (EDA)"}}