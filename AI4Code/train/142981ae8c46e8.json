{"cell_type":{"d39b8381":"code","ca7eeea3":"code","5a554101":"code","d438afdf":"code","ad733f31":"code","c01f024e":"code","f32b6827":"code","26b5fbcc":"code","8251db24":"code","379ead6f":"code","e70d1ae6":"code","45d57490":"code","784b52d5":"code","1ddafb00":"code","68f1396f":"code","789384e8":"code","8fb50866":"code","5d4d4fb7":"code","cdcad72c":"code","c3f51ec9":"code","5337c061":"code","6f8693e5":"code","6e9cdc86":"code","aeee21d9":"code","48b89c1b":"code","987abc9a":"code","d1cfeaa4":"code","18c0e29b":"code","91b62cf4":"code","8a03905b":"code","ff5bb60d":"code","07b686c6":"code","955be4c8":"code","987edffd":"code","72bf4963":"code","01842cc3":"code","e759ac15":"code","c4f6f72b":"code","74898d84":"code","a7f45488":"code","41dfb9a5":"code","511ee67b":"code","83a8cff8":"code","941243b1":"code","87a93d37":"code","bdd79dac":"code","e39be086":"code","6df9096f":"code","1fe6689d":"code","63e1f4db":"code","39de214b":"code","6fced7c1":"code","e858674e":"code","3cbed689":"code","cefb78b2":"code","481c3a15":"code","0ba6beb4":"code","6609880e":"code","5a983bc8":"code","69511b36":"code","fe045064":"code","06227e4f":"code","4153b3f3":"code","cfe35a91":"code","1628b3ca":"code","b9179469":"code","786105cb":"code","4d29e565":"code","e222dad2":"code","ffb1c81d":"code","6505ed7d":"code","6c5bc8c2":"code","5c01c508":"code","9845c574":"code","0badbc04":"code","c5401989":"code","16420c77":"code","364902b6":"code","08e3c8e2":"markdown","ed74ffcd":"markdown","4c6a74f9":"markdown","8fdde49b":"markdown","d3b80d87":"markdown","0cdc7299":"markdown","4c33ab9c":"markdown","3a9956de":"markdown","b9b3f7a1":"markdown","ce251c1e":"markdown","7977a42e":"markdown","c56e9e24":"markdown","40e4089c":"markdown","a8eb6f5e":"markdown","6b3bb420":"markdown","6ed22345":"markdown","aca5239d":"markdown","3db92b7e":"markdown","361a1ebb":"markdown","49d21279":"markdown","fea16107":"markdown","c8ee3b4a":"markdown","5115ca06":"markdown","9d39c878":"markdown","4f5af53c":"markdown","42cc7159":"markdown","ad08696e":"markdown","d196d15f":"markdown","92ee1c63":"markdown","4bd8b72f":"markdown","5ae33e62":"markdown","40ba9fac":"markdown","49c2722b":"markdown","b67607f6":"markdown","c099bde1":"markdown","2554805d":"markdown"},"source":{"d39b8381":"import numpy as np \nimport pandas as pd\nimport cufflinks as cf\nfrom sklearn.linear_model import LogisticRegression\ncf.go_offline()\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))","ca7eeea3":"train = pd.read_csv(\"..\/input\/titanic\/train.csv\",index_col = 'PassengerId')\ntest = pd.read_csv(\"..\/input\/titanic\/test.csv\",index_col = 'PassengerId')","5a554101":"train.info()","d438afdf":"train.head()","ad733f31":"train.describe()","c01f024e":"titanic_dictionary = {'survived':'survived',\n               'Pclass':'Passenger Ticket class',\n               'sex':'Sex',\n               'Age':'Age in years',\n               'Sibsp':'# of siblings \/ spouses aboard the Titanic',\n               'parch':'# of parents \/ children aboard the Titanic',\n               'ticket':'Ticket number',\n               'Fare':'Passenger fare',\n               'cabin':'Cabin number',\n               'Embarked':'Port of Embarkation (C = Cherbourg, Q = Queenstown, S = Southampton)'}","f32b6827":"test.head()","26b5fbcc":"test.describe()","8251db24":"test.info()","379ead6f":"train.isnull().sum()","e70d1ae6":"import matplotlib.pyplot as plt\nplt.figure(figsize=(10,8))\nimport seaborn as sns\nsns.heatmap(train.isnull(),yticklabels = False)\n\nplt.title(\"Train Feature Missing Values\",Fontsize = 20)\nplt.show()","45d57490":"plt.figure(figsize=(10,6))\nsns.set_style('whitegrid')\nsns.countplot(x = 'Survived', data = train)\nplt.title('Survival Statistics', fontsize = 18)\nplt.show()","784b52d5":"plt.figure(figsize= (10,6))\nsns.set_style('whitegrid')\nsns.countplot(x = 'Survived', hue = 'Sex',data = train)\nplt.title(\"Male\/Female survivals\",fontsize = 20)","1ddafb00":"plt.figure(figsize = (10,6))\nsns.countplot(x = \"Survived\", data = train, hue = \"Pclass\")\nplt.show()","68f1396f":"plt.figure(figsize = (10,6))\nsns.distplot(train['Age'].dropna(),bins = 30)","789384e8":"plt.figure(figsize= (10,6))\nplt.hist(train['Fare'],bins = 30)","8fb50866":"train['Fare'].iplot(kind='hist',bins=30,color='blue')","5d4d4fb7":"(train['Age'].isnull().sum()\/(train['Age'].count()+ train['Age'].isnull().sum()))*100","cdcad72c":"plt.figure(figsize = (10,6))\nsns.boxplot(x= 'Pclass' , y = \"Age\" , data = train)\nplt.title(\"Distribution of Age based on Passenger Class\", fontsize =20)\nplt.show()","c3f51ec9":"train.groupby('Pclass').mean()['Age']","5337c061":"def age_imputation(column):\n    Age = column[0]\n    Pclass = column[1]\n    if pd.isnull(Age):\n        if Pclass == 1:\n            return train[train[\"Pclass\"]==1].mean()[\"Age\"].round()\n        elif Pclass == 2:\n            return train[train[\"Pclass\"]==2].mean()[\"Age\"].round()\n        elif Pclass == 3:\n            return train[train[\"Pclass\"]==3].mean()[\"Age\"].round()\n    else:\n        return Age","6f8693e5":"train[\"Age\"] = train[[\"Age\",\"Pclass\"]].apply(age_imputation,axis = 1)","6e9cdc86":"train.isnull().sum()","aeee21d9":"(687\/891)* 100","48b89c1b":"train.drop(\"Cabin\", axis = 1, inplace = True)","987abc9a":"\ntrain.isnull().sum()","d1cfeaa4":"train.dropna(inplace = True)","18c0e29b":"train.isnull().sum()","91b62cf4":"train.head()","8a03905b":"train['Title'] = train.Name.str.extract(r',\\s([a-zA-Z ]+)', expand = False)","ff5bb60d":"train['Title'].value_counts()","07b686c6":"train['Title'] = train['Title'].replace(to_replace = \"Master\", value = 'Mr')","955be4c8":"train['Title'] = train['Title'].replace(to_replace = ['Mlle','Ms','Mme'], value = 'Miss')","987edffd":"train['Title'] = train['Title'].replace(to_replace = ['Dr','Rev','Major','Col','Don','Jonkheer','Lady','the Countess','Capt','Sir'],value = 'Other')","72bf4963":"train[\"Title\"].value_counts()","01842cc3":"plt.figure(figsize = (10,6))\nsns.boxplot( x = 'Title', data = train, y = 'Age' )\n\nplt.title(\"Age vs Title\", Fontsize = 20 )","e759ac15":"plt.figure(figsize = (10,6))\n\nsns.countplot( x= 'Survived', data = train, hue = \"Title\" )","c4f6f72b":"train.head()","74898d84":"d_title = pd.get_dummies(train['Title'],drop_first = True, prefix = \"Title\")","a7f45488":"d_sex = pd.get_dummies(train['Sex'], drop_first = True, prefix = \"Sex\")","41dfb9a5":"d_embarked = pd.get_dummies(train['Embarked'], drop_first = True, prefix = \"Emparked\")","511ee67b":"train = pd.concat([train,d_title,d_sex,d_embarked], axis = 1)","83a8cff8":"train.drop([\"Name\",\"Sex\",\"Ticket\",'Embarked','Title'], axis = 1 , inplace = True)","941243b1":"train.head()","87a93d37":"test.head()","bdd79dac":"test.isnull().sum()","e39be086":"test.groupby('Pclass').mean()['Age']","6df9096f":"def age_imputation_test(column):\n    Age = column[0]\n    Pclass = column[1]\n    if pd.isnull(Age):\n        if Pclass == 1:\n            return test[test[\"Pclass\"]==1].mean()[\"Age\"].round()\n        elif Pclass == 2:\n            return test[test[\"Pclass\"]==2].mean()[\"Age\"].round()\n        elif Pclass == 3:\n            return test[test[\"Pclass\"]==3].mean()[\"Age\"].round()\n    else:\n        return Age","1fe6689d":"test[\"Age\"] = test[[\"Age\",\"Pclass\"]].apply(age_imputation_test,axis = 1)","63e1f4db":"test.isnull().sum()","39de214b":"plt.figure(figsize = (8,6))\n\nsns.boxplot(x = 'Pclass', y = 'Fare',hue = 'Pclass', data = test)","6fced7c1":"test.groupby('Pclass').mean()['Fare']","e858674e":"test.head()","3cbed689":"test[test['Fare'].isnull()]","cefb78b2":"test.fillna(test[test['Pclass']==3].mean()['Fare'],inplace = True)","481c3a15":"test.isnull().sum()","0ba6beb4":"test.head()","6609880e":"test[\"Name_\"] = test.Name.str.extract(r',\\s([a-zA-Z]+)', expand = True)","5a983bc8":"test['Name_'].value_counts()","69511b36":"test['Name_'] = test['Name_'].replace(to_replace = \"Master\", value = \"Mr\")","fe045064":"test[\"Name_\"] = test[\"Name_\"].replace(to_replace = \"Ms\", value = \"Miss\")","06227e4f":"test[\"Name_\"] = test[\"Name_\"].replace(to_replace = [\"Rev\", 'Col','Dona', 'Dr'], value = 'Others')","4153b3f3":"test.head()","cfe35a91":"Dummy_Name = pd.get_dummies(test[\"Name_\"],drop_first = True, prefix = \"Title\")","1628b3ca":"Dummy_Sex = pd.get_dummies(test['Sex'], drop_first = True)","b9179469":"Dummy_Embarked = pd.get_dummies(test['Embarked'], drop_first = True,prefix = 'Embarked')","786105cb":"test = pd.concat([test,Dummy_Name,Dummy_Embarked, Dummy_Sex],axis = 1)","4d29e565":"test.drop(['Name','Sex','Embarked','Name_','Ticket','Cabin'],axis = 1,inplace = True)","e222dad2":"test.head()","ffb1c81d":"train.head()","6505ed7d":"X = train.drop('Survived', axis = 1)\ny = train['Survived']","6c5bc8c2":"from sklearn.model_selection import train_test_split\n\nX_train,X_test,y_train,y_test = train_test_split(X,y, random_state = 1)","5c01c508":"l_model = LogisticRegression()\nl_model.fit(X_train,y_train)","9845c574":"l_model_data = l_model.predict(X_test)","0badbc04":"l_train_model = l_model.predict(X_train)","c5401989":"test_prediction = l_model.predict(test)","16420c77":"results = pd.DataFrame({'PassengerId':test.index,\n                       'Survived':test_prediction})","364902b6":"results.to_csv(\"Submission.csv\", index = False)","08e3c8e2":"# **Training data Overview:** \nGives a general sence of the missing values and null values and overall structure of the data in the dataset. ","ed74ffcd":"As shown above, we can see that Age has 177 missing values as well as Cabin has 687 missing values. Lets create a heatmap for representing the above information.","4c6a74f9":"Lets check the distribution of passengers fare..","8fdde49b":"# Spliting the train data","d3b80d87":"Most of passengers as we checked out earlier were travelling in the third class. As we can see from the plot tickets for the third class were not too expensive. There are some outliers, propably some of passengers in first class bought some extra services. For better understanding of fare distribution let's use a iplot.","0cdc7299":"# **Now lets go ahead and start cleaning the Test Data**","4c33ab9c":"In the above representation, '1' indicates survival rate and '0' indicates Non-survival rate. As we can see more that 350 people survived the disaster and around 500 were not able to make it. ","3a9956de":"# 1: Logistic Regression","b9b3f7a1":"Let us use get_dummies pandas function to convert the categorical functions into dummy ones. ","ce251c1e":"Lets go through the dataset again:","7977a42e":"# **Missing data in the training dataset:**","c56e9e24":"> ##### *Please upvoke and share the kernel if you like the work!! Also, please feel free to copy the kernel and practise the code for urself.*","40e4089c":"Now let's check how it look's when we divide survival of passengers by Ticket class","a8eb6f5e":"Now lets try to convert the Non categorical data into categorical form","6b3bb420":"we can see that name column has Annotations(Mr,Mrs etc) in the middle, lets try and make them categorical","6ed22345":"Now let's check the distribution of passengers age.","aca5239d":"We can see that Cabin has 77% of missing data, so we can ignore and drop the column.","3db92b7e":"We can see that passengers who bought tickets in first class are older than passengers in other classes. We may assume that richer and older passengers are sitting in the first class. So then, let's impute missing values for age depending on ticket class.","361a1ebb":"**Cleaning Training Data**","49d21279":"Assigning Age to null rows(Age Imputation)","fea16107":"Title's such as Ms,Mme etc occur once or twice in the dataset. we can replace these titles with more meaningful and understamdable titles such as Mr,Miss","c8ee3b4a":"One of the Observations from above Countplot is that the number of non survivors are more from Class 3 passengers","5115ca06":"\nLets create a boxplot for new variables verses age.","9d39c878":"After division we can see that more than twice the number of men died in the disaster as compared to women.","4f5af53c":"Now we have only one column with missing values - Embarked. As there are only two observations with missing values we can delete this observations.","42cc7159":"Lets now check the death rate as per the above reframed data. ","ad08696e":"Lets see how it turned out to be.","d196d15f":"# **Exploratory data Analysis on the Training set** :\nNow let us explore the data for our better understanding.","92ee1c63":"Now let us check if there is dependence of Sex\/Gender on the people who survived.","4bd8b72f":"We know that \"Age' column has 177 missing values, and the total number of passengers were: 891. So, the percentage of rows with missing values of Age are: (177\/891)*100","5ae33e62":"# **Data Dictionary:** \nNow let us create a data dictionary based on the Titanic dataset for our better understanding of the Variables and what those variables stand for","40ba9fac":"Lets Create a BoxPlot to check if Age can depend on the Passengers travelling Class. ","49c2722b":"# **Loading Titanic Data:**","b67607f6":"The above CountPlot suggests '1' is survival rate and '0' is non survival rate at the same time, blue is for male and magenta is for female.","c099bde1":"We can see that there are more number of passengers ranging from the age of 20-30","2554805d":"# **Test data overview:**"}}