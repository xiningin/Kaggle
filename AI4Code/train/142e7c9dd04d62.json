{"cell_type":{"e5d7e962":"code","7a9daed8":"code","6195e638":"code","7e377e73":"code","72b3c4b2":"code","a27f8da5":"code","7216d280":"code","1b22018e":"code","c6b3fd79":"code","d7c75770":"code","e4421f12":"code","1c2a25c5":"code","c246efb2":"code","71c100ee":"markdown"},"source":{"e5d7e962":"import numpy as np \nimport pandas as pd\nimport os\nfrom keras.models import Sequential\nfrom keras import layers\nfrom keras.layers import BatchNormalization, Convolution2D , MaxPooling2D\nfrom keras.layers.core import  Reshape , Dense, Flatten, Dropout\nfrom sklearn.model_selection import train_test_split\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))","7a9daed8":"df_train = pd.read_csv('..\/input\/digit-recognizer\/train.csv')\ndf_test = pd.read_csv('..\/input\/digit-recognizer\/test.csv')\ntarget = df_train[[\"label\"]]\nfeature = df_train.drop(columns=[\"label\"])\nx_train,x_test,y_train,y_test = train_test_split(feature,target,test_size=0.25)","6195e638":"y_train = pd.get_dummies(y_train.astype(str))\ny_test = pd.get_dummies(y_test.astype(str))","7e377e73":"net = Sequential()\nnet.add(layers.Dense(510,activation=\"relu\",input_dim=784))\nnet.add(layers.Dense(100,activation='relu'))\nnet.add(layers.Dense(75,activation='relu'))\nnet.add(layers.Dense(60,activation='relu'))\nnet.add(layers.Dense(50,activation='selu'))\nnet.add(layers.Dense(25,activation='relu'))\nnet.add(layers.Dense(20,activation='selu'))\nnet.add(layers.Dense(15,activation='relu'))\nnet.add(layers.Dense(10,activation=\"softmax\"))\nnet.compile(optimizer=\"Adam\",loss=\"categorical_crossentropy\",metrics=[\"accuracy\"])","72b3c4b2":"model_net = net.fit(x_train,y_train,epochs=10,batch_size=64,validation_split=0.1)","a27f8da5":"score= net.evaluate(x_test,y_test,batch_size=64)\nscore","7216d280":"import matplotlib.pyplot as plt\npd.DataFrame(model_net.history).loc[:, [\"loss\", \"val_loss\"]].plot()\nplt.xticks(range(10))\nplt.xlabel(\"Epochs\")\nplt.ylabel(\"Loss\")\nplt.show()","1b22018e":"net.summary()","c6b3fd79":"x_train = x_train.astype(\"float32\")\nx_test = x_test.astype(\"float32\")\nmodel = Sequential([\n    Reshape((28, 28, 1)),\n    Convolution2D(32,(3,3), activation='relu'),\n    Convolution2D(32,(3,3), activation='relu'),\n    MaxPooling2D(),\n    Convolution2D(64,(3,3), activation='relu'),\n    Convolution2D(64,(3,3), activation='relu'),\n    MaxPooling2D(),\n    Flatten(),\n    Dense(512, activation='relu'),\n    Dense(200,activation='relu'),\n    Dense(150,activation='relu'),\n    Dense(100,activation='relu'),\n    Dense(75,activation=\"selu\"),\n    Dense(50,activation='relu'),\n    Dense(25,activation='relu'),\n    Dense(10, activation='softmax')\n])","d7c75770":"model.compile(optimizer=\"Adam\", loss=\"categorical_crossentropy\", metrics=[\"accuracy\"])\ncon_net = model.fit(x=x_train, y=y_train, batch_size=64, validation_split=0.1, epochs=10)","e4421f12":"pd.DataFrame(con_net.history).loc[:, [\"loss\", \"val_loss\"]].plot()\nplt.xticks(range(10))\nplt.xlabel(\"Epochs\")\nplt.ylabel(\"Loss\")\nplt.show()","1c2a25c5":"y_test = y_test.astype(int)\nmodel.evaluate(x=x_test, y=y_test, batch_size=64)","c246efb2":"df_test = df_test.astype(\"float32\")\npredict = np.argmax(model.predict(df_test, verbose=0), axis=1)\nsubmissions=pd.DataFrame({\"ImageId\": list(range(1,len(predict)+1)),\n                         \"Label\": predict})\nsubmissions.to_csv(\"submission.csv\", index=False, header=True)","71c100ee":"# Convolutional"}}