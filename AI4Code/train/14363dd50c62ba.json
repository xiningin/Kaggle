{"cell_type":{"aa232d2e":"code","1bffb81e":"code","1554734e":"code","a0848035":"code","ec67dd69":"code","32efb8c0":"code","ed86a253":"code","d4b27d6e":"code","6f40b2fa":"code","3a08df0a":"code","8c00556c":"code","189a98c4":"code","91aad07c":"code","9243d3f7":"code","52b9dea5":"code","b58c19b8":"code","f6ebacc7":"code","1c471414":"code","e5ac4460":"code","fc8f558c":"code","81f397a2":"code","e91ad628":"code","df5846d7":"code","f29f32ea":"code","5e17a287":"code","d11bc3c9":"code","e0d5c539":"code","98372b32":"code","95b3379a":"code","6670a1ee":"code","4b165c0b":"code","37692998":"code","a4b56777":"code","5e8f8277":"code","c4a5f770":"code","3a260503":"code","c6a42622":"code","ea098046":"code","fd813116":"code","f7afa080":"code","534a9cdc":"code","ab9284f2":"code","53887287":"code","3b5edfb9":"code","a967fe4e":"markdown","1e36e6de":"markdown","d74ca162":"markdown","ab665cf2":"markdown","723be42e":"markdown"},"source":{"aa232d2e":"import os\nimport numpy as np\nimport pandas as pd\nimport random\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom contextlib import contextmanager\nfrom time import time\nfrom tqdm import tqdm\nimport lightgbm as lgbm\nimport category_encoders as ce\nfrom tensorflow.keras.utils import to_categorical\nfrom sklearn.metrics import classification_report, log_loss, accuracy_score\nfrom sklearn.metrics import mean_squared_error\nfrom sklearn.model_selection import KFold\nimport matplotlib.pyplot as plt\nimport plotly.express as px","1bffb81e":"data0 = pd.read_csv('..\/input\/kaggle-notebooks-ranking\/Kaggle Notebooks Ranking.csv', \n                    error_bad_lines = False, encoding = 'latin-1', sep = ';')\ndata0","1554734e":"data0['Total Medals']=data0['Gold Medals']+data0['Silver Medals']+data0['Bronze Medals']\ndata0['Gold\/Silver Medals']=data0['Gold Medals']+data0['Silver Medals']\ndata0['Silver\/Bronze Medals']=data0['Silver Medals']+data0['Bronze Medals']","a0848035":"data0a=data0.sort_values('Gold Medals',ascending=False)\nfig = px.bar(data0a[0:40], x='Username', y='Gold Medals',title=\"Gold Medals Ranking\")\nfig.show()","ec67dd69":"data0b=data0.sort_values('Silver Medals',ascending=False)\nfig = px.bar(data0b[0:40], x='Username', y='Silver Medals',title=\"Silevr Medals Ranking\")\nfig.show()","32efb8c0":"data0c=data0.sort_values('Bronze Medals',ascending=False)\nfig = px.bar(data0c[0:40], x='Username', y='Bronze Medals',title=\"Bronze Medals Ranking\")\nfig.show()","ed86a253":"data0d=data0.sort_values('Total Medals',ascending=False)\nfig = px.bar(data0d[0:40], x='Username', y='Total Medals',title=\"Total Medals Ranking\")\nfig.show()","d4b27d6e":"data0.columns","6f40b2fa":"data0.info()","3a08df0a":"Name=data0['Tier'].unique().tolist()\nN=list(range(3))\nnormal_mapping=dict(zip(Name,N)) \nreverse_mapping=dict(zip(N,Name)) \ndata0['Tier']=data0['Tier'].map(normal_mapping)\nprint(normal_mapping)","8c00556c":"data0.to_csv('notebook.csv',index=False)","189a98c4":"df=data0.copy()\nfrom sklearn.preprocessing import LabelEncoder\nfor c in df.columns:\n    if df[c].dtype=='object': \n        df[c] = df[c].fillna('N')\n        lbl = LabelEncoder()\n        lbl.fit(list(df[c].values))\n        df[c] = lbl.transform(df[c].values)","91aad07c":"data1=df\ndata1[0:2].T","9243d3f7":"data1.columns","52b9dea5":"target=['Points']\ndatay=data1[target[0]]\ndatax=data1.drop([target[0]],axis=1)","b58c19b8":"train=np.array(datax)\ntrainy=np.array(datay)\nprint(train.shape)\nprint(trainy.shape)","f6ebacc7":"df_columns = list(datax.columns)\nprint(df_columns)","1c471414":"train_df=pd.DataFrame(train)\n#test_df=pd.DataFrame(test)\ntrain_df.columns=df_columns\n#test_df.columns=df_columns","e5ac4460":"def create_numeric_feature(input_df):\n    use_columns = df_columns \n    return input_df[use_columns].copy()","fc8f558c":"from contextlib import contextmanager\nfrom time import time\n\nclass Timer:\n    def __init__(self, logger=None, format_str='{:.3f}[s]', prefix=None, suffix=None, sep=' '):\n\n        if prefix: format_str = str(prefix) + sep + format_str\n        if suffix: format_str = format_str + sep + str(suffix)\n        self.format_str = format_str\n        self.logger = logger\n        self.start = None\n        self.end = None\n\n    @property\n    def duration(self):\n        if self.end is None:\n            return 0\n        return self.end - self.start\n\n    def __enter__(self):\n        self.start = time()\n\n    def __exit__(self, exc_type, exc_val, exc_tb):\n        self.end = time()\n        out_str = self.format_str.format(self.duration)\n        if self.logger:\n            self.logger.info(out_str)\n        else:\n            print(out_str)","81f397a2":"from tqdm import tqdm\n\ndef to_feature(input_df):\n\n    processors = [\n        create_numeric_feature,\n    ]\n    \n    out_df = pd.DataFrame()\n    \n    for func in tqdm(processors, total=len(processors)):\n        with Timer(prefix='create' + func.__name__ + ' '):\n            _df = func(input_df)\n\n        assert len(_df) == len(input_df), func.__name__\n        out_df = pd.concat([out_df, _df], axis=1)\n        \n    return out_df","e91ad628":"train_feat_df = to_feature(train_df)\n#test_feat_df = to_feature(test_df)","df5846d7":"import lightgbm as lgbm\nfrom sklearn.metrics import mean_squared_error\n\ndef fit_lgbm(X, y, cv, \n             params: dict=None, \n             verbose: int=50):\n\n    if params is None:\n        params = {}\n\n    models = []\n    oof_pred = np.zeros_like(y, dtype=np.float)\n\n    for i, (idx_train, idx_valid) in enumerate(cv): \n        x_train, y_train = X[idx_train], y[idx_train]\n        x_valid, y_valid = X[idx_valid], y[idx_valid]\n\n        clf = lgbm.LGBMRegressor(**params)\n        \n        with Timer(prefix='fit fold={} '.format(i)):\n            clf.fit(x_train, y_train, \n                    eval_set=[(x_valid, y_valid)],  \n                    early_stopping_rounds=100,\n                    verbose=verbose)\n\n        pred_i = clf.predict(x_valid)\n        oof_pred[idx_valid] = pred_i\n        models.append(clf)\n        print(f'Fold {i} RMSLE: {mean_squared_error(y_valid, pred_i) ** .5:.4f}')\n        print()\n\n    score = mean_squared_error(y, oof_pred) ** .5\n    print('-' * 50)\n    print('FINISHED | Whole RMSLE: {:.4f}'.format(score))\n    return oof_pred, models","f29f32ea":"params = {\n    'objective': 'rmse', \n    'learning_rate': .1,\n    'reg_lambda': 1.,\n    'reg_alpha': .1,\n    'max_depth': 5, \n    'n_estimators': 10000, \n    'colsample_bytree': .5, \n    'min_child_samples': 10,\n    'subsample_freq': 3,\n    'subsample': .9,\n    'importance_type': 'gain', \n    'random_state': 71,\n    'num_leaves': 62\n}","5e17a287":"y = trainy\nydf=pd.DataFrame(y)","d11bc3c9":"from sklearn.model_selection import KFold\n\nfor i in range(1):\n    fold = KFold(n_splits=5, shuffle=True, random_state=71)\n    ydfi=ydf.iloc[:,i]\n    y=np.array(ydfi)\n    cv = list(fold.split(train_feat_df, y))\n    oof, models = fit_lgbm(train_feat_df.values, y, cv, params=params, verbose=500)\n    \n    fig,ax = plt.subplots(figsize=(6,6))\n    ax.set_title(target[i],fontsize=20)\n    ax.set_ylabel('Predicted '+target[0],fontsize=12)\n    ax.set_xlabel('Actual '+target[0],fontsize=12)\n    ax.scatter(oof,y)\n","e0d5c539":"print(target)","98372b32":"def visualize_importance(models, feat_train_df):\n\n    feature_importance_df = pd.DataFrame()\n    for i, model in enumerate(models):\n        _df = pd.DataFrame()\n        _df['feature_importance'] = model.feature_importances_\n        _df['column'] = feat_train_df.columns\n        _df['fold'] = i + 1\n        feature_importance_df = pd.concat([feature_importance_df, _df], \n                                          axis=0, ignore_index=True)\n\n    order = feature_importance_df.groupby('column')\\\n        .sum()[['feature_importance']]\\\n        .sort_values('feature_importance', ascending=False).index[:50]\n\n    fig, ax = plt.subplots(figsize=(8, max(6, len(order) * .25)))\n    sns.boxenplot(data=feature_importance_df, \n                  x='feature_importance', \n                  y='column', \n                  order=order, \n                  ax=ax, \n                  palette='viridis', \n                  orient='h')\n    \n    ax.tick_params(axis='x', rotation=0)\n    #ax.set_title('Importance')\n    ax.grid()\n    fig.tight_layout()\n    \n    return fig,ax\n\n#fig, ax = visualize_importance(models, train_feat_df)","95b3379a":"for i in range(1):\n    fold = KFold(n_splits=5, shuffle=True, random_state=71)\n    ydfi=ydf.iloc[:,i]\n    y=np.array(ydfi)\n    cv = list(fold.split(train_feat_df, y))\n    oof, models = fit_lgbm(train_feat_df.values, y, cv, params=params, verbose=500)\n    fig, ax = visualize_importance(models, train_feat_df)\n    ax.set_title(target[i]+' Imortance',fontsize=20)\n","6670a1ee":"fig,ax = plt.subplots(figsize=(6,6))\nax.set_title('Rank vs Points',fontsize=20)\nax.set_xlabel('Rank',fontsize=12)\nax.set_ylabel('Points',fontsize=12)\nax.scatter(data0['Rank'],data0['Points'])\nplt.show()","4b165c0b":"fig,ax = plt.subplots(figsize=(6,6))\nax.set_title('Tier vs Rank',fontsize=20)\nax.set_xlabel('Tier',fontsize=12)\nax.set_ylabel('Rank',fontsize=12)\nax.scatter(data0['Tier'],data0['Rank'])\nplt.show()","37692998":"fig,ax = plt.subplots(figsize=(6,6))\nax.set_title('Tier vs Total Medals',fontsize=20)\nax.set_xlabel('Tier',fontsize=12)\nax.set_ylabel('Total Medals',fontsize=12)\nax.scatter(data0['Tier'],data0['Total Medals'])\nplt.show()","a4b56777":"fig,ax = plt.subplots(figsize=(6,6))\nax.set_title('Tier vs Gold Medals',fontsize=20)\nax.set_xlabel('Tier',fontsize=12)\nax.set_ylabel('Gold Medals',fontsize=12)\nax.scatter(data0['Tier'],data0['Gold Medals'])\nplt.show()","5e8f8277":"fig,ax = plt.subplots(figsize=(6,6))\nax.set_title('Tier vs Silver Medals',fontsize=20)\nax.set_xlabel('Tier',fontsize=12)\nax.set_ylabel('Silver Medals',fontsize=12)\nax.scatter(data0['Tier'],data0['Silver Medals'])\nplt.show()","c4a5f770":"fig,ax = plt.subplots(figsize=(6,6))\nax.set_title('Tier vs Bronze Medals',fontsize=20)\nax.set_xlabel('Tier',fontsize=12)\nax.set_ylabel('Bronze Medals',fontsize=12)\nax.scatter(data0['Tier'],data0['Bronze Medals'])\nplt.show()","3a260503":"comp=pd.read_csv('..\/input\/kaggle-competition-points-visualize-importance\/competition.csv')\ncomp[0:5]","c6a42622":"dataset=pd.read_csv('..\/input\/kaggle-dataset-points-visualize-importance\/dataset.csv')\ndataset[0:5]","ea098046":"# noteboook(_x)-competition(_y)-dataset\ndata_mg0=data0.merge(comp,how='outer',on='Username')\ndata_mg1=data_mg0.merge(dataset,how='outer',on='Username')\ndata_mg1[0:5]","fd813116":"data_mg1.columns","f7afa080":"# Triple GrandMaster Holders\ndata_mg1[(data_mg1['Tier_x']==0) & (data_mg1['Tier_y']==0) & (data_mg1['Tier']==0)]['Username'].tolist()","534a9cdc":"# Competiton & Noteboook Double GrandMaster Holders\ndata_mg1[(data_mg1['Tier_x']==0) & (data_mg1['Tier_y']==0) & (data_mg1['Tier']!=0)]['Username'].tolist()","ab9284f2":"# Competiton & Dataset Double GrandMaster Holders\ndata_mg1[(data_mg1['Tier_x']!=0) & (data_mg1['Tier_y']==0) & (data_mg1['Tier']==0)]['Username'].tolist()","53887287":"# Notebook & Dataset Double GrandMaster Holders\ndata_mg1[(data_mg1['Tier_x']==0) & (data_mg1['Tier_y']!=0) & (data_mg1['Tier']==0)]['Username'].tolist()","3b5edfb9":"# noteboook(_x)-competition(_y)-dataset\nfig,ax = plt.subplots(figsize=(6,6))\nax.set_title('Notebook Points vs Competition Points',fontsize=20)\nax.set_xlabel('Log Noteboook Points',fontsize=12)\nax.set_ylabel('Log Competition Points',fontsize=12)\nax.scatter(np.log10(data_mg1['Points_x']),np.log10(data_mg1['Points_y']))\nplt.show()","a967fe4e":"# Comparison with Cmpetition Points","1e36e6de":"# Model","d74ca162":"# Target setting","ab665cf2":"# Data preparation","723be42e":"# Visualize Importance"}}