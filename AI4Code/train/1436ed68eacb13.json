{"cell_type":{"c5c740bf":"code","29ee7040":"code","30efa4b1":"code","27473975":"code","1244a4d8":"code","b8dfee82":"code","0bdfdc80":"code","4d7fbf49":"code","f3634326":"code","e8c9147c":"code","742db2cf":"code","ec2ab0e6":"code","e1eb919b":"code","dc83d767":"code","86930ce0":"code","74d36948":"code","4e38e35e":"code","c440ff67":"code","62a2a3ff":"code","ea579485":"code","2353023c":"code","d9a82145":"code","14202e35":"code","7ea30ba4":"code","c6e3b26b":"code","5bf99aa7":"code","3f2dfffc":"code","45a764fc":"markdown","cfa1a33b":"markdown","d278cfbe":"markdown","9c59802e":"markdown","9edfc3a5":"markdown","e5e638eb":"markdown","2264cf17":"markdown"},"source":{"c5c740bf":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","29ee7040":"import matplotlib.pyplot as plt\nimport matplotlib as mpl\nimport seaborn as sns\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.metrics import accuracy_score\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn import preprocessing","30efa4b1":"df = pd.read_csv('..\/input\/multijet-primary-dataset\/MultiJetRun2010B.csv')","27473975":"df.head()","1244a4d8":"df.columns","b8dfee82":"df.info()","0bdfdc80":"df.describe()","4d7fbf49":"sns.set_style('whitegrid')\nfig,ax = plt.subplots(nrows=3,ncols=3,figsize=(15,10))\nax = ax.flatten()\nsns.scatterplot(ax=ax[0],x='MR',y='HT',data=df,hue='nJets')\nsns.scatterplot(ax=ax[1],x='HT',y='MET',data=df,hue='nJets')\nsns.scatterplot(ax=ax[2],x='MR',y='MET',data=df,hue='nJets')\nsns.scatterplot(ax=ax[3],x='E1',y='E2',data=df,hue='nJets')\nsns.scatterplot(ax=ax[4],x='E1',y='HT',data=df,hue='nJets')\nsns.scatterplot(ax=ax[5],x='E2',y='HT',data=df,hue='nJets')\nsns.scatterplot(ax=ax[6],x='E1',y='MR',data=df,hue='nJets')\nsns.scatterplot(ax=ax[7],x='E2',y='MR',data=df,hue='nJets')\nsns.scatterplot(ax=ax[8],x='Rsq',y='HT',data=df,hue='nJets')\nplt.show()","f3634326":"sns.set_style(style='whitegrid')\nplt.figure(figsize=(25,10))\nsns.heatmap(df.corr(),vmin=-1,vmax=1,annot=True,cmap='BuPu')\nplt.show()","e8c9147c":"y = df['nJets']\ndf = df.drop('nJets',axis=1)\ndf = df.drop('Event',axis=1)\ntrain_x,test_x,train_y,test_y = train_test_split(df,y,test_size=0.2,random_state=42)\nrun = test_x['Run'].copy() # will be used as run column of solution data frame\ndrop = ['Run','nBJets','Lumi','MET','Rsq']\ntest_x = test_x.drop(drop,axis=1)\ntrain_x = train_x.drop(drop,axis=1)\ntrain_x","742db2cf":"model = RandomForestClassifier()","ec2ab0e6":"model.fit(train_x,train_y)","e1eb919b":"predict = model.predict(test_x)","dc83d767":"feature_importance = np.array(model.feature_importances_)\nfeature_names = np.array(train_x.columns)\ndata={'feature_names':feature_names,'feature_importance':feature_importance}\ndf_plt = pd.DataFrame(data)\ndf_plt.sort_values(by=['feature_importance'], ascending=False,inplace=True)\nplt.figure(figsize=(10,8))\nsns.barplot(x=df_plt['feature_importance'], y=df_plt['feature_names'])\nplt.xlabel('FEATURE IMPORTANCE')\nplt.ylabel('FEATURE NAMES')\nplt.show()","86930ce0":"score = accuracy_score(test_y,predict)\nprint(score)","74d36948":"import tensorflow as tf\nfrom tensorflow import keras\nimport tensorflow.keras.layers as L","4e38e35e":"input_shape=10","c440ff67":"train_y.unique()","62a2a3ff":"model = keras.Sequential()\nmodel.add(L.Input(shape=input_shape))\nmodel.add(L.Dense(128))\nmodel.add(L.ReLU())\nmodel.add(L.Dense(64))\nmodel.add(L.ReLU())\nmodel.add(L.Dense(8))\nmodel.add(L.Softmax())","ea579485":"model.summary()","2353023c":"model.compile(\n    optimizer=keras.optimizers.RMSprop(),loss=keras.losses.SparseCategoricalCrossentropy(),metrics=keras.metrics.SparseCategoricalAccuracy())","d9a82145":"model.fit(x=train_x,y=train_y,epochs=30)","14202e35":"preds = model.predict(test_x)","7ea30ba4":"prediction = np.argmax(preds,axis=1)","c6e3b26b":"accuracy_score(prediction,test_y)","5bf99aa7":"solution = pd.DataFrame({'Run':run,'nJets':prediction})\nsolution","3f2dfffc":"solution.to_csv('submission.csv',index=False)","45a764fc":"# Data Visualization","cfa1a33b":"# Model Building","d278cfbe":"# Importing Libraries ","9c59802e":"<h1><center>Thank You<\/center><\/h1>","9edfc3a5":"<h3>our data frame doesn't have null values<\/h3>","e5e638eb":"# Exploratory data analysis","2264cf17":"# Prediction of number of jets"}}