{"cell_type":{"f826adb1":"code","6a1aedcf":"code","8363b993":"code","9106d538":"code","435c81b8":"code","74f11a6c":"code","4bbc83c7":"code","1de6ec99":"code","1e8d99bf":"code","e57c1c43":"code","4e60028b":"markdown","97355f4a":"markdown","6d5f8e7d":"markdown","b191bdd6":"markdown","31fb6e4a":"markdown"},"source":{"f826adb1":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n%matplotlib inline\n\nimport warnings\nwarnings.filterwarnings(\"ignore\")\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))","6a1aedcf":"df = pd.read_csv('\/kaggle\/input\/ckdisease\/kidney_disease.csv')\ndf","8363b993":"df.columns","9106d538":"df.info()","435c81b8":"df.isnull().sum()","74f11a6c":"def data_cleaner(data):\n    data.fillna(0, inplace=True)\n    data = pd.get_dummies(data,columns =['htn', 'dm', 'cad', 'pc', 'pcc', 'ba', 'rbc', 'appet', 'pe', 'ane'], dtype = bool, drop_first=True)\n    return data","4bbc83c7":"df = data_cleaner(df)\ndf","1de6ec99":"df.columns","1e8d99bf":"from sklearn.model_selection import KFold, cross_val_score\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.tree import DecisionTreeClassifier\nfrom xgboost.sklearn import XGBClassifier\nfrom sklearn.ensemble import GradientBoostingClassifier\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.model_selection import train_test_split\n\ntarget = ['classification']\nfeatures = ['htn_no', 'dm_\\tno','dm_no', 'cad_\\tno', 'cad_no', 'pc_abnormal', 'pcc_notpresent', 'ba_notpresent', 'sg', 'al', 'su', \n            'age', 'bp', 'bgr', 'bu', 'sc', 'sod', 'pot', 'hemo', 'rbc_abnormal', 'appet_poor', 'pe_no', 'ane_no']\n\nX = df[features]\ny = df[target]\n\n\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.33, random_state=42, shuffle=True)\n\nmodels = []\nmodels.append(('LogisticRegression', LogisticRegression()))\nmodels.append(('DecisionTreeClassifier', DecisionTreeClassifier()))\nmodels.append(('XGBClassifier', XGBClassifier()))\nmodels.append(('GradientBoostingClassifier', GradientBoostingClassifier()))\nmodels.append(('KNeighborsClassifier', KNeighborsClassifier()))\nmodels.append(('RandomForestClassifier', RandomForestClassifier()))\n\nresults = []\nnames = []\nfor name, model in models:\n    kfold = KFold(n_splits=10, random_state=0)\n    cv_results = cross_val_score(model, X, y, cv=kfold, scoring='accuracy')\n    results.append(cv_results)\n    names.append(name)\n    msg = \"%s: %f (%f)\" % (name, cv_results.mean(), cv_results.std())\n    print(msg)","e57c1c43":"model=XGBClassifier(random_state=0)\nmodel.fit(X,y)\ny_pred=model.predict(X_test)\n\nfrom sklearn import metrics\n\ncm = metrics.confusion_matrix(y_test, y_pred)\nplt.figure(figsize=(9,9))\nsns.heatmap(cm, annot=True, fmt=\".3f\", linewidths=.5, square = True, cmap = 'Blues_r');\nplt.ylabel('Actual label');\nplt.xlabel('Predicted label');\nall_sample_title = 'Confusion Matrix - score:'+str(metrics.accuracy_score(y_test,y_pred))\nplt.title(all_sample_title, size = 15);\nplt.show()\nprint(metrics.classification_report(y_test,y_pred))","4e60028b":"# Data description\n\nThe data was taken over a 2-month period in India with 25 features. \n\nThe target is the 'classification', which is either 'ckd' or 'notckd'\n\nWe use 24 + class = 25 ( 11 numeric ,14 nominal)\n\n- Age(numerical) - age in years\n- Blood Pressure(numerical) - bp in mm\/Hg\n- Specific Gravity(nominal) - sg - (1.005,1.010,1.015,1.020,1.025)\n- Albumin(nominal) - al - (0,1,2,3,4,5)\n- Sugar(nominal) - su - (0,1,2,3,4,5)\n- Red Blood Cells(nominal) - rbc - (normal,abnormal)\n- Pus Cell (nominal) - pc - (normal,abnormal)\n- Pus Cell clumps(nominal) - pcc - (present,notpresent)\n- Bacteria(nominal) - ba - (present,notpresent)\n- Blood Glucose Random(numerical) - bgr in mgs\/dl\n- Blood Urea(numerical) -bu in mgs\/dl\n- Serum Creatinine(numerical) - sc in mgs\/dl\n- Sodium(numerical) - sod in mEq\/L\n- Potassium(numerical) - pot in mEq\/L\n- Hemoglobin(numerical) - hemo in gms\n- Packed Cell Volume(numerical)\n- White Blood Cell Count(numerical) - wc in cells\/cumm\n- Red Blood Cell Count(numerical) - rc in millions\/cmm\n- Hypertension(nominal) - htn - (yes,no)\n- Diabetes Mellitus(nominal) - dm - (yes,no)\n- Coronary Artery Disease(nominal) - cad - (yes,no)\n- Appetite(nominal) - appet - (good,poor)\n- Pedal Edema(nominal) - pe - (yes,no)\n- Anemia(nominal) - ane - (yes,no)\n- Class (nominal)- class - (ckd,notckd)\n\nAcknowledgements\n\nhttps:\/\/archive.ics.uci.edu\/ml\/datasets\/Chronic_Kidney_Disease","97355f4a":"# The model","6d5f8e7d":"# Loading the dataset and first look","b191bdd6":"This portion will keep on getting updated.","31fb6e4a":"# Data cleaner"}}