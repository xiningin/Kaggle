{"cell_type":{"00629cf7":"code","4b13e44f":"code","5c0e7d94":"code","3a932b2d":"code","e06630fc":"code","31385708":"code","d7c98573":"code","5e0a1006":"code","6898a784":"code","69bca927":"code","6350b59e":"code","d5c80584":"code","2ee32980":"code","bd3dfec0":"code","2b207a39":"code","99cc29f8":"code","e18ed0c7":"code","6c333d3b":"code","e3a405a3":"code","6b13b9c0":"code","ab085d5c":"code","bb6fd6ce":"code","fce3d314":"code","be98a091":"code","be23be6f":"code","eef30997":"code","0c7d39cd":"code","fd8c0213":"code","f5948f78":"code","576ba19d":"code","dfb5e49d":"code","acb0ff95":"code","64a26be4":"code","ff489d1c":"code","984ff8dd":"code","7553474f":"markdown","0457851d":"markdown","1a2f49ab":"markdown","9b5721f3":"markdown","8512d14b":"markdown","77a63e31":"markdown"},"source":{"00629cf7":"import os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))","4b13e44f":"import pandas as pd\nimport numpy as np\nimport missingno as msno\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\nfrom scipy.stats import norm\nfrom sklearn.preprocessing import StandardScaler\nfrom scipy import stats\nimport warnings\nwarnings.filterwarnings('ignore')\n%matplotlib inline","5c0e7d94":"df_train = pd.read_csv(\"\/kaggle\/input\/train.csv\")\ndf_test = pd.read_csv(\"\/kaggle\/input\/test.csv\")\ndf_sample_submission = pd.read_csv(\"\/kaggle\/input\/submission.csv\")","3a932b2d":"df_sample_submission","e06630fc":"display(\"Train File\",df_train.head(10))\ndisplay(\"Test File\",df_test.head(10))","31385708":"display(\"Train File\",df_train.columns)\ndisplay(\"Test File\",df_test.columns)","d7c98573":"display(\"Train File\",df_train.dtypes)\ndisplay(\"Test File\",df_test.dtypes)","5e0a1006":"print(\"Train File Shape:\",df_train.shape)\nprint(\"Test File Shape:\",df_test.shape)","6898a784":"display(\"Train File\",df_train.isnull().sum())\ndisplay(\"Test File\",df_test.isnull().sum())","69bca927":"display(\"Train File\",msno.bar(df_train))","6350b59e":"display(\"Test File\",msno.bar(df_test))","d5c80584":"def missing_data_percentage(a):\n    total = a.isnull().sum().sort_values(ascending=False)\n    percent = (a.isnull().sum()\/a.isnull().count()).sort_values(ascending=False)\n    percent = percent*100\n    b = pd.concat([total, percent], axis=1, keys=['Total NULL values', 'Percentage'])\n    return b\n\nprint(\"TRAIN FILE\\n\")\ndisplay(missing_data_percentage(df_train))\nprint(\"\\n TEST FILE \\n\")\ndisplay(missing_data_percentage(df_test))","2ee32980":"display(\"Train File\")\na = missing_data_percentage(df_train)\nf, ax = plt.subplots(figsize=(10, 8))\nplt.xticks(rotation='90')\nsns.barplot(x=a.index, y=a['Percentage']*100)\nplt.xlabel('Features', fontsize=1)\nplt.ylabel('Percent of missing values', fontsize=15)\nplt.title('Percent missing data by feature', fontsize=15)","bd3dfec0":"display(\"Test File\")\na = missing_data_percentage(df_test)\nf, ax = plt.subplots(figsize=(10, 8))\nplt.xticks(rotation='90')\nsns.barplot(x=a.index, y=a['Percentage']*100)\nplt.xlabel('Features', fontsize=1)\nplt.ylabel('Percent of missing values', fontsize=15)\nplt.title('Percent missing data by feature', fontsize=15)","2b207a39":"display(\"Train File\",sns.countplot(df_train['Segmentation']))","99cc29f8":"for i in df_train.columns:\n    print(\"\\n\",i,\"\\n\")\n    print(df_train[i].unique())","e18ed0c7":"df_train.drop([\"ID\"], axis = 1)\n\nplt.figure(figsize=(10,6))\nplt.title(\"Ages Frequency\")\nsns.axes_style(\"dark\")\nsns.violinplot(y=df_train[\"Age\"])\nplt.show()","6c333d3b":"genders = df_train.Gender.value_counts()\nsns.set_style(\"darkgrid\")\nplt.figure(figsize=(10,4))\nsns.barplot(x=genders.index, y=genders.values)\nplt.show()","e3a405a3":"age18_25 = df_train.Age[(df_train.Age <= 25) & (df_train.Age >= 18)]\nage26_35 = df_train.Age[(df_train.Age <= 35) & (df_train.Age >= 26)]\nage36_45 = df_train.Age[(df_train.Age <= 45) & (df_train.Age >= 36)]\nage46_55 = df_train.Age[(df_train.Age <= 55) & (df_train.Age >= 46)]\nage55above = df_train.Age[df_train.Age >= 56]\n\nx = [\"18-25\",\"26-35\",\"36-45\",\"46-55\",\"55+\"]\ny = [len(age18_25.values),len(age26_35.values),len(age36_45.values),len(age46_55.values),len(age55above.values)]\n\nplt.figure(figsize=(15,6))\nsns.barplot(x=x, y=y, palette=\"rocket\")\nplt.title(\"Number of Customer and Ages\")\nplt.xlabel(\"Age\")\nplt.ylabel(\"Number of Customer\")\nplt.show()","6b13b9c0":"sns.countplot(df_train['Spending_Score'])","ab085d5c":"for i in df_train.columns:\n    a = df_train[i].value_counts().idxmax()\n    df_train[i] = df_train[i].replace({np.nan : a})","bb6fd6ce":"for i in df_test.columns:\n    a = df_test[i].value_counts().idxmax()\n    df_test[i] = df_test[i].replace({np.nan : a})","fce3d314":"#label encoding for object type columns\nobject_type_columns_train = df_train.select_dtypes(include=['object']).columns\nfrom sklearn.preprocessing import LabelEncoder\nle = LabelEncoder()\nfor i in object_type_columns_train:\n    df_train[i] = le.fit_transform(df_train[i])","be98a091":"corrmat = df_train.corr()\nk = 10\ncols = corrmat.nlargest(k, 'Segmentation')['Segmentation'].index\ncm = np.corrcoef(df_train[cols].values.T)\nsns.set(font_scale=1.25)\nhm = sns.heatmap(cm, cbar=True, annot=True, square=True, fmt='.2f', annot_kws={'size': 10}, yticklabels=cols.values, xticklabels=cols.values)\nplt.show()","be23be6f":"object_type_columns_test = df_test.select_dtypes(include=['object']).columns\nfrom sklearn.preprocessing import LabelEncoder\nle = LabelEncoder()\nfor i in object_type_columns_test:\n    df_test[i] = le.fit_transform(df_test[i])","eef30997":"y_train = df_train['Segmentation']\nX_train = df_train.drop(['ID','Segmentation','Var_1','Graduated','Ever_Married'], axis=1)\nX_test = df_test.drop(['ID','Var_1','Graduated','Ever_Married'],axis=1)\nX_train.shape, y_train.shape, X_test.shape","0c7d39cd":"from sklearn.neural_network import MLPClassifier","fd8c0213":"clf = MLPClassifier(solver='lbfgs', alpha=1e-5)","f5948f78":"clf.fit(X_train, y_train)","576ba19d":"clf.predict(X_test)","dfb5e49d":"y_pred = clf.predict(X_test)","acb0ff95":"clf.score(X_train,y_train)","64a26be4":"y_pred = le.inverse_transform(y_pred)","ff489d1c":"submission = pd.DataFrame(data = { 'ID' : df_test['ID'], 'Segmentation' : y_pred})","984ff8dd":"submission.to_csv('Submission.csv', index=False)","7553474f":"# Model","0457851d":"# Importing Libraries","1a2f49ab":"## `Getting a look of submission file`","9b5721f3":"# EDA","8512d14b":"# Data Preprocessing","77a63e31":"# Loading data"}}