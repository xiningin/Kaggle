{"cell_type":{"b43806d8":"code","5a2b3be5":"code","a789511a":"code","3117e2f6":"code","7ae799bc":"code","a7239fc9":"code","7630213a":"code","dda3141f":"code","4e53007a":"code","dc92aa40":"code","961b1f8a":"code","af7eea53":"code","e86ef7f1":"code","82e6dfcb":"code","4126a688":"code","2c25bf04":"code","2f6dd0fc":"code","cff551ed":"code","5a5a1590":"code","9aae2e56":"code","dc5df08f":"code","5f98cf5e":"code","86ea557d":"code","fb9d865c":"code","7fdd32cc":"code","1bb1fdd5":"code","c7ae93d0":"code","4e66b8ad":"code","386f62a3":"code","fb0e55e5":"code","0e7ecf41":"code","4c215f56":"code","6a659476":"code","d2fea661":"code","aed884f7":"code","ff687eba":"markdown","534e8a77":"markdown","c0e2f060":"markdown","ed546abd":"markdown","19199e00":"markdown","a5160105":"markdown","cfb05b16":"markdown","d54248bb":"markdown","c7602f64":"markdown","4e46e0dc":"markdown","4bb5c4fe":"markdown","2f90723a":"markdown","f949acb8":"markdown","131b3e6b":"markdown","c4ac6d2d":"markdown","c666299e":"markdown","ba541216":"markdown","973994da":"markdown","7e9326f9":"markdown","9fd393f5":"markdown","41f28bb8":"markdown","5b5d9af8":"markdown","504a93c8":"markdown","5ec5a8bf":"markdown","906fce37":"markdown","67b77d43":"markdown","76fe8aa7":"markdown","33f14978":"markdown","e25c82da":"markdown","01692e4e":"markdown","4131f12d":"markdown","aa5ad21f":"markdown","7d0cbf06":"markdown","eeef3736":"markdown"},"source":{"b43806d8":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nfrom matplotlib import pyplot as plt\nimport seaborn as sns\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\ntrain = pd.read_csv(\"\/kaggle\/input\/advanced-dls-spring-2021\/train.csv\", thousands='.')\ntest = pd.read_csv(\"\/kaggle\/input\/advanced-dls-spring-2021\/test.csv\", thousands='.')\nsubmission_sample = pd.read_csv(\"\/kaggle\/input\/advanced-dls-spring-2021\/submission.csv\", thousands='.')\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","5a2b3be5":"display(train.head())\ndisplay(train.shape)\ndisplay(train.dtypes)","a789511a":"display(test.head())\ndisplay(test.shape)\ndisplay(test.dtypes)","3117e2f6":"train.TotalSpent = pd.to_numeric(train.TotalSpent, errors='coerce')\ntest.TotalSpent = pd.to_numeric(train.TotalSpent, errors='coerce')","7ae799bc":"train['TotalSpent'].describe()","a7239fc9":"print(train['TotalSpent'].mean())\nprint(train['TotalSpent'].median())","7630213a":"display(train.dtypes)\ndisplay(test.dtypes)","dda3141f":"# \u0427\u0438\u0441\u043b\u043e\u0432\u044b\u0435 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0438\nnum_cols = [\n    'ClientPeriod',\n    'MonthlySpending',\n    'TotalSpent'\n]\n\n# \u041a\u0430\u0442\u0435\u0433\u043e\u0440\u0438\u0430\u043b\u044c\u043d\u044b\u0435 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0438\ncat_cols = [\n    'Sex',\n    'IsSeniorCitizen',\n    'HasPartner',\n    'HasChild',\n    'HasPhoneService',\n    'HasMultiplePhoneNumbers',\n    'HasInternetService',\n    'HasOnlineSecurityService',\n    'HasOnlineBackup',\n    'HasDeviceProtection',\n    'HasTechSupportAccess',\n    'HasOnlineTV',\n    'HasMovieSubscription',\n    'HasContractPhone',\n    'IsBillingPaperless',\n    'PaymentMethod'\n]\n\nfeature_cols = num_cols + cat_cols\ntarget_col = 'Churn'","4e53007a":"train.isna().mean().sort_values(ascending = False)","dc92aa40":"test.isna().mean().sort_values(ascending = False)","961b1f8a":"train.TotalSpent.fillna(train.TotalSpent.median(), inplace=True)\ntest.TotalSpent.fillna(test.TotalSpent.median(), inplace=True)","af7eea53":"train[num_cols].describe()","e86ef7f1":"train.hist(column=num_cols, figsize=(10, 5))","82e6dfcb":"fig = plt.figure(figsize =(20, 20))\nfor i in range(len(cat_cols)):\n    train_cnts=train[cat_cols[i]].value_counts()\n    plt.subplot(4,4,i+1)\n    plt.pie(train_cnts, labels = train_cnts.index, autopct='%1.1f%%')\n    plt.axis('equal')\n    plt.title(cat_cols[i])\n    plt.legend()","4126a688":"fig = plt.figure(figsize =(20, 20))\nfor i in range(len(cat_cols)):\n    test_cnts=test[cat_cols[i]].value_counts()\n    plt.subplot(4,4,i+1)\n    plt.pie(test_cnts, labels = test_cnts.index, autopct='%1.1f%%')\n    plt.axis('equal')\n    plt.title(cat_cols[i])\n    plt.legend()","2c25bf04":"n_cat = len(cat_cols)\nprint(n_cat)\nfig, axes = plt.subplots(4, 4, figsize=(20, 20), sharey=True)\nfor i in range(len(cat_cols)):\n    sns.countplot(x=cat_cols[i], data=train, ax=axes[i\/\/4, i%4],hue = target_col)","2f6dd0fc":"sns.countplot(x = 'Churn',data = train)","cff551ed":"train.Churn[train.Churn ==0].shape[0]\/train.Churn[train.Churn ==1].shape[0]","5a5a1590":"sns.pairplot(train[num_cols+[\"Churn\"]], \n        hue=\"Churn\", diag_kind=\"kde\")\nNone","9aae2e56":"corrmat = train[num_cols+[\"Churn\"]].corr()\nplt.subplots(figsize=(12,12))\nsns.heatmap(corrmat, annot = True,cmap= 'coolwarm', square=True);","dc5df08f":"from sklearn.linear_model import LogisticRegression, LogisticRegressionCV\nfrom sklearn.model_selection import train_test_split, GridSearchCV,StratifiedKFold,StratifiedShuffleSplit\nfrom sklearn.preprocessing import StandardScaler, RobustScaler, LabelEncoder, OneHotEncoder,MinMaxScaler\nfrom sklearn.pipeline import make_pipeline\nfrom sklearn.metrics import plot_roc_curve, roc_curve\nfrom sklearn.metrics import roc_auc_score\nfrom sklearn.preprocessing import OneHotEncoder\nfrom sklearn.compose import ColumnTransformer\nfrom sklearn.pipeline import Pipeline\nfrom sklearn.metrics import accuracy_score","5f98cf5e":"train_origin = train.loc[:]\ntarget_origin = train[target_col].loc[:]","86ea557d":"column_trans = ColumnTransformer(\n    [('cat_oh', OneHotEncoder(), cat_cols),\n    ('standart_scale', StandardScaler(), num_cols)])\ncolumn_trans.fit_transform(train)\n\ntarget = train.loc[:,target_col]\ntrain_ = train.drop([target_col], axis=1)","fb9d865c":"X_train, X_test, y_train, y_test = train_test_split(train_, target, \n                                                    train_size=0.8,\n                                                    random_state=123,\n                                                   stratify=target,\n                                                   shuffle=True)\n\ncv = StratifiedKFold(n_splits=3, shuffle=True, random_state=123)\n\nCs = np.logspace(2, -3, 6)\n\npipe_lin = make_pipeline(column_trans, \n                       LogisticRegressionCV(\n                           cv=3,\n                           Cs=Cs, \n                           #max_iter = 20000,\n                           scoring=\"roc_auc\"))\nres = pipe_lin.fit(X_train, y_train)\n\nprint('BEST C',res.named_steps[\"logisticregressioncv\"].C_)\nprint('ROC_AUC_test',res.score(X_test, y_test))","7fdd32cc":"from sklearn.metrics import confusion_matrix\n\ncm = confusion_matrix(y_test, res.predict(X_test))\nprint('Confusion matrix\\n\\n', cm)\nprint('\\nTrue Positives(TP) = ', cm[0,0])\nprint('\\nTrue Negatives(TN) = ', cm[1,1])\nprint('\\nFalse Positives(FP) = ', cm[0,1])\nprint('\\nFalse Negatives(FN) = ', cm[1,0])","1bb1fdd5":"pipe_gsc = make_pipeline(column_trans, LogisticRegression())\n\nparams = {'logisticregression__C': Cs,\n          'logisticregression__penalty': ['l1', 'l2', 'elasticnet', 'none'],\n          'logisticregression__solver': ['saga']}\n\n\ngsc = GridSearchCV(pipe_gsc, params, n_jobs=-1, cv=cv, refit=True, scoring='roc_auc')\ngsc.fit(X_train, y_train)\nprint(gsc.best_params_)\nprint(gsc.best_score_)\nprint(gsc.best_estimator_)","c7ae93d0":"cm = confusion_matrix(y_test, gsc.predict(X_test))\nprint('Confusion matrix\\n\\n', cm)\nprint('\\nTrue Positives(TP) = ', cm[0,0])\nprint('\\nTrue Negatives(TN) = ', cm[1,1])\nprint('\\nFalse Positives(FP) = ', cm[0,1])\nprint('\\nFalse Negatives(FN) = ', cm[1,0])","4e66b8ad":"from catboost import CatBoostClassifier","386f62a3":"%%time\nmodel = CatBoostClassifier(cat_features=cat_cols, \n                                            random_seed=13, verbose=False)\n\nGC = {'learning_rate': np.arange(0.01, 0.11, 0.01),\n        'depth': np.arange(2, 7, 1),\n        'l2_leaf_reg': np.arange(1, 12, 2),\n        'iterations' : np.arange(100, 501, 100)}\n\nGC_result = model.grid_search(GC, \n                              X=X_train, \n                              y=y_train, \n                              cv = 3, \n                              plot=False, \n                              refit=True,\n                              stratified = True)","fb0e55e5":"GC_result['params']","0e7ecf41":"best_cat_model = CatBoostClassifier(iterations = 200, learning_rate = 0.1, depth = 4, l2_leaf_reg = 3, cat_features=cat_cols)\nbest_cat_model.fit(X_train, y_train)\ny_test_predicted = best_cat_model.predict_proba(X_test)[:,1]","4c215f56":"print('ROC_AUC_test=', roc_auc_score(y_test, y_test_predicted))\nprint('Best Params:', GC_result['params'])","6a659476":"best_model = best_cat_model","d2fea661":"y_test_predicted = best_model.predict_proba(test)[:, 1]","aed884f7":"submission_sample[target_col] = y_test_predicted\nsubmission_sample.to_csv('sergeev_submission.csv',index=False)","ff687eba":"### BEST LogisticRegressionCV(): \n### ROC_AUC = 0.855\n### Params: C = 100","534e8a77":"### \u041d\u0435\u0441\u043e\u0432\u043f\u0430\u0434\u0430\u044e\u0449\u0438\u0445 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u043e\u0432 \u043d\u0435 \u043e\u0431\u043d\u0430\u0440\u0443\u0436\u0435\u043d\u043e. \u0422\u0430\u043a \u0436\u0435 \u043d\u0435\u0442 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u043e\u0432, \u0430\u043d\u043e\u043c\u0430\u043b\u044c\u043d\u043e \u043a\u043e\u0440\u0440\u0435\u043b\u0438\u0440\u0443\u044e\u0449\u0438\u0445 \u0441 \u0442\u0430\u0440\u0433\u0435\u0442\u043e\u043c.","c0e2f060":"### \u041f\u0440\u0438\u0437\u043d\u0430\u043a\u0438 HasPhoneService, IsSeniorCitizen, HasChild, HasMultiplePhoneNumbers: \u043f\u0440\u0438 \u0440\u0430\u0437\u0434\u0435\u043b\u0435\u043d\u0438\u0438 train \u043d\u0430 \u0442\u0440\u0435\u043d\u0438\u0440\u043e\u0432\u043e\u0447\u043d\u044b\u0439 \u0434\u0430\u043d\u043d\u044b\u0435 \u0438 \u0434\u0430\u043d\u043d\u044b\u0435 \u0434\u043b\u044f \u0432\u0430\u043b\u0438\u0434\u0430\u0446\u0438\u0438 \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u0430 \u043e\u0448\u0438\u0431\u043a\u0430. \u0422\u0430\u043a \u043a\u0430\u043a \u043c\u043e\u0434\u0435\u043b\u044c \u043d\u0435 \u0431\u0443\u0434\u0435\u0442 \u0437\u043d\u0430\u0442\u044c \u043e \u0434\u0440\u0443\u0433\u043e\u043c \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0438 \u043a\u0430\u0442\u0435\u0433\u043e\u0440\u0438\u0430\u043b\u044c\u043d\u043e\u0433\u043e \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0430.","ed546abd":"### 1. \u041c\u0430\u0441\u0448\u0442\u0430\u0431 \u0432\u0435\u0449\u0435\u0441\u0442\u0432\u0435\u043d\u043d\u044b\u0445 \u0438 \u0446\u0435\u043b\u043e\u0447\u0438\u0441\u043b\u0435\u043d\u043d\u044b\u0445 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u043e\u0432 \u043e\u0442\u043b\u0438\u0447\u0430\u0435\u0442\u0441\u044f. ClientPeriod - \u0434\u0435\u0441\u044f\u0442\u043a\u0438, MonthlySpending \u0438 TotalSpent \u0434\u0435\u0441\u044f\u0442\u043a\u0438 \u0442\u044b\u0441\u044f\u0447.\n### 2. \u0420\u0430\u0441\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0438\u0435 \u0434\u0430\u043d\u043d\u044b\u0445 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u043e\u0432 MonthlySpending \u0438 TotalSpent \u0438\u043c\u0435\u0435\u0442 \u0445\u0430\u0440\u0430\u043a\u0442\u0435\u0440\u043d\u044b\u0439 \"\u0445\u0432\u043e\u0441\u0442\". ","19199e00":"# 2)\u041b\u0438\u043d\u0435\u0439\u043d\u0430\u044f \u043c\u043e\u0434\u0435\u043b\u044c","a5160105":"### \u0421\u043e\u0445\u0440\u0430\u043d\u0438\u043c train","cfb05b16":"# 3) CatBoost","d54248bb":"## 1.3) \u0412\u044b\u0432\u0435\u0434\u0435\u043c \u0441\u0442\u0430\u0442\u0438\u0441\u0442\u0438\u043a\u0438 \u0432\u0435\u0449\u0435\u0441\u0442\u0432\u0435\u043d\u043d\u044b\u0445 \u0438 \u0446\u0435\u043b\u043e\u0447\u0438\u0441\u043b\u0435\u043d\u043d\u044b\u0445 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u043e\u0432:","c7602f64":"### \u0418\u0437\u043c\u0435\u043d\u044f\u0435\u043c train. OneHotEncoder \u0440\u0430\u0431\u043e\u0442\u0430\u0435\u0442 \u0441\u0440\u0430\u0437\u0443 \u0441 \u043b\u044e\u0431\u044b\u043c\u0438 \u0434\u0430\u043d\u043d\u044b\u043c\u0438, LabelEncoder \u043d\u0435 \u043d\u0443\u0436\u0435\u043d. StandartScaler \u0434\u043b\u044f \u0443\u043c\u0435\u043d\u044c\u0448\u0435\u043d\u0438\u044f \u0432\u043b\u0438\u044f\u043d\u0438\u044f \u0431\u043e\u043b\u044c\u0448\u0443\u0449\u0438\u0445 \u0447\u0438\u0441\u0435\u043b :) ","4e46e0dc":"### \u0411\u044b\u043b\u043e \u0431\u044b \u043d\u0435\u043f\u043b\u043e\u0445\u043e \u043e\u0442\u043d\u043e\u0440\u043c\u0438\u0440\u043e\u0432\u0430\u0442\u044c \u0434\u0430\u043d\u043d\u044b\u0435, \u043c\u0438\u043d\u0438\u043c\u0430\u043a\u0441 \u0438\u043b\u0438 \u0441\u0442\u0430\u043d\u0434\u0430\u0440\u0442\u043d\u043e\u0435 \u043e\u0442\u043a\u043b\u043e\u043d\u0435\u043d\u0438\u0435. \u0422\u0430\u043a \u0436\u0435 \u043c\u043e\u0436\u043d\u043e \u043f\u043e\u043f\u0440\u043e\u0431\u043e\u0430\u0432\u0430\u0442\u044c \u043f\u0440\u0438\u0432\u0435\u0441\u0442\u0438 \u0432\u0435\u0449\u0435\u0441\u0442\u0432\u0435\u043d\u043d\u044b\u0435 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0438 \u043a \u043d\u043e\u0440\u043c\u0430\u043b\u044c\u043d\u043e\u043c\u0443 \u0440\u0430\u0441\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0438\u044e, \u043d\u0430\u043f\u0440\u0438\u043c\u0435\u0440 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0432 log1p \u0438\u043b\u0438 power_transform.","4bb5c4fe":"### \u0415\u0441\u0442\u044c \u0437\u0430\u0432\u0438\u0441\u0438\u043c\u043e\u0441\u0442\u044c ROC_AUC \u043e\u0442 \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u0430 random_state. \u041c\u043e\u0436\u043d\u043e \u043a\u043e\u043d\u0435\u0447\u043d\u043e \u043f\u043e\u0434\u0448\u0430\u043c\u0430\u043d\u0438\u0442\u044c \u0438 \u0441\u0431\u0430\u043b\u0430\u043d\u0441\u0438\u0440\u043e\u0432\u0430\u0442\u044c \u0432\u0441\u0435 \u043a\u043b\u0430\u0441\u0441\u044b \u0432 \u0434\u0430\u043d\u043d\u044b\u0445 \u0434\u043b\u044f \u043e\u0431\u0443\u0447\u0435\u043d\u0438\u044f \u0438 \u043f\u0440\u043e\u0433\u043d\u043e\u0437\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f, \u043d\u043e \u0441\u043a\u043e\u0440 \u0438 \u0442\u0430\u043a \u043d\u0435\u043f\u043b\u043e\u0445\u043e\u0439.","2f90723a":"## 1.1) \u041e\u043f\u0440\u0435\u0434\u0435\u043b\u0438\u043c \u0447\u0438\u0441\u043b\u043e\u0432\u044b\u0435 \u0438 \u043a\u0430\u0442\u0435\u0433\u043e\u0440\u0438\u0430\u043b\u044c\u043d\u044b\u0435 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0438","f949acb8":"### \u0414\u043b\u044f \u043a\u0430\u0442\u0435\u0433\u043e\u0440\u0438\u0430\u043b\u044c\u043d\u044b\u0445 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u043e\u0432 train \u043f\u043e\u0441\u0442\u0440\u043e\u0438\u043c \u0433\u0440\u0430\u0444\u0438\u043a\u0438 \u0438 \u043f\u043e\u0441\u043c\u043e\u0442\u0440\u0438\u043c \u0440\u0430\u0441\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0438\u0435 \u043e\u0442\u043d\u043e\u0441\u0438\u0442\u0435\u043b\u044c\u043d\u043e \u0442\u0430\u0440\u0433\u0435\u0442\u0430.","131b3e6b":"## 1.2) \u041f\u043e\u0441\u043c\u043e\u0442\u0440\u0438\u043c \u043d\u0430 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043f\u0443\u0441\u0442\u044b\u0445 \u0434\u0430\u043d\u043d\u044b\u0445","c4ac6d2d":"### BEST GridSearchCV(CatBoostClassifier()):\n### ROC_AUC = 0.8586.\u00b6\n### Params: depth: 4, learning_rate: 0.1, 'l2_leaf_reg': 3, 'iterations': 200","c666299e":"### \u041f\u0440\u0438\u0437\u043d\u0430\u043a TotalSpent \u0438\u043c\u0435\u0435\u0442 \u0442\u0438\u043f \u0434\u0430\u043d\u043d\u044b\u0445 object(\u0438\u043c\u0435\u044e\u0442\u0441\u044f \u043d\u0435\u043a\u043e\u0440\u0435\u043a\u0442\u043d\u044b\u0435 \u0434\u043b\u044f \u0442\u0438\u043f\u0430 \u0434\u0430\u043d\u043d\u044b\u0445 float \u0441\u0438\u043c\u0432\u043e\u043b\u044b), \u043f\u0435\u0440\u0435\u0434\u0435\u043b\u0430\u0435\u043c \u0432\u043e float, \u0438\u0433\u043d\u043e\u0440\u0438\u0440\u0443\u044f \u043e\u0448\u0438\u0431\u043a\u0438(\u0437\u0430\u043c\u0435\u043d\u044f\u044f \u043d\u0430 Nan).","ba541216":"### BEST GridSearchCV(LogisticRegression()): \n### ROC_AUC = 0.842. \n### Params: C = 11, penalty = L1, solver = saga","973994da":"### \u041f\u043e\u043f\u0440\u043e\u0431\u0443\u0435\u043c \u0443\u0432\u0435\u043b\u0438\u0447\u0438\u0442\u044c \u0433\u0438\u043f\u0435\u0440 \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440 iterations","7e9326f9":"# 1) \u041f\u043e\u0441\u043c\u043e\u0442\u0440\u0438\u043c \u043d\u0430 \u0434\u0430\u043d\u043d\u044b\u0435","9fd393f5":"## 1.4) \u0412\u044b\u0432\u0435\u0434\u0435\u043c \u0433\u0440\u0430\u0444\u0438\u043a\u0438 \u043a\u0430\u0442\u0435\u0433\u043e\u0440\u0438\u0430\u043b\u044c\u043d\u044b\u0445 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u043e\u0432:","41f28bb8":"### HeatMap \u0432\u0435\u0449\u0435\u0441\u0442\u0432\u0435\u043d\u043d\u044b\u0445 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u043e\u0432","5b5d9af8":"### \u041f\u043e\u043b\u043d\u043e\u0441\u0442\u044c\u044e \u0440\u0430\u0437\u0434\u0435\u043b\u0438\u043c\u044b\u0445 \u043a\u043b\u0430\u0441\u0441\u043e\u0432 \u043d\u0430 \u0433\u0440\u0430\u0444\u0438\u043a\u0435 \u043d\u0435 \u0432\u0438\u0434\u043d\u043e(\u0442\u043e\u043b\u044c\u043a\u043e \u043f\u0440\u0438\u043c\u0435\u0440\u043d\u043e, \u043f\u0440\u0438 \u0432\u0437\u0430\u0438\u043c\u043d\u043e\u043c \u0440\u0430\u0441\u0441\u043c\u043e\u0442\u0440\u0435\u043d\u0438\u0438 2-\u0445 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u043e\u0432). \u0412\u044b\u0431\u0440\u043e\u0441\u044b \u0435\u0434\u0438\u043d\u0438\u0447\u043d\u044b \u0438 \u043d\u0435\u0437\u043d\u0430\u0447\u0438\u0442\u0435\u043b\u044c\u043d\u044b.","504a93c8":"### \u041e\u0447\u0435\u043d\u044c \u043f\u0440\u0438\u044f\u0442\u043d\u043e, \u0447\u0442\u043e \u0440\u0430\u0441\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0438\u044f \u043a\u0430\u0442\u0435\u0433\u043e\u0440\u0438\u0430\u043b\u044c\u043d\u044b\u0445 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u043e\u0432 \u0432 \u0442\u0435\u0441\u0442 \u0438 \u0442\u0440\u0435\u0439\u043d \u043f\u043e\u0445\u043e\u0436\u0438. ","5ec5a8bf":"### \u0412 \u043a\u043b\u0430\u0441\u0441\u0435 0 \u043b\u044e\u0434\u0435\u0439 \u0431\u043e\u043b\u044c\u0448\u0435 \u0447\u0435\u043c \u0432 1 \u0432 2.81 \u0440\u0430\u0437. \u041a\u043b\u0430\u0441\u0441\u044b \u043d\u0435\u0441\u0431\u0430\u043b\u0430\u043d\u0441\u0438\u0440\u043e\u0432\u0430\u043d\u043d\u044b. \u0414\u0430\u043b\u0435\u0435 \u0434\u043b\u044f \u043e\u0431\u0443\u0447\u0435\u043d\u0438\u044f \u0438 \u0432\u0430\u043b\u0438\u0434\u0430\u0446\u0438\u0438 \u043c\u043e\u0434\u0435\u043b\u0438 \u043c\u044b \u0431\u0443\u0434\u0435\u043c \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c \u0430\u043b\u0433\u043e\u0440\u0438\u0442\u043c\u044b \u0441\u0442\u0440\u0430\u0442\u0438\u0444\u0438\u043a\u0430\u0446\u0438\u0438.","906fce37":"### \u041f\u0440\u0438 \u0438\u0437\u043c\u0435\u043d\u0435\u043d\u0438\u0438 \u0442\u0438\u043f\u0430 \u0434\u0430\u043d\u043d\u044b \u0432 TotalSpent \u043f\u043e\u044f\u0432\u0438\u043b\u0438\u0441\u044c Nan \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f(\u0433\u0434\u0435 \u0431\u044b\u043b\u0430 \u043e\u0448\u0438\u0431\u043a\u0430 \u0438\u0437\u043c\u0435\u043d\u0435\u043d\u0438\u044f \u0442\u0438\u043f\u0430 \u0434\u0430\u043d\u043d\u044b\u0445). \u0417\u0430\u043c\u0435\u043d\u0438\u043c \u043d\u0430 \u043c\u0435\u0434\u0438\u0430\u043d\u0443.(\u043c\u043e\u0436\u043d\u043e \u0438 \u043d\u0430 \u0441\u0440\u0435\u0434\u043d\u0435\u0435 \u0438\u043b\u0438 \u043d\u0430 0, \u043d\u043e \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043f\u0443\u0441\u0442\u044b\u0445 \u0434\u0430\u043d\u043d\u044b\u0445 \u043d\u0435 \u0431\u043e\u043b\u0435\u0435 ~0.18% \u0432 train \u0438 \u0442\u0435\u0441\u0442, \u0442\u0430\u043a \u0447\u0442\u043e \u043d\u0435 \u043f\u0430\u0440\u0438\u043c\u0441\u044f)","67b77d43":"### \u0414\u0430\u043d\u043d\u044b\u0435 \u0434\u043b\u044f \u043f\u0440\u043e\u0433\u043d\u043e\u0437\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f","76fe8aa7":"### \u041f\u043e\u043f\u0440\u043e\u0431\u0443\u0435\u043c \u0441 GridSearchCV \u0438 \u0434\u043e\u0431\u0430\u0432\u0438\u043c \u0433\u0438\u043f\u0435\u0440\u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u043e\u0432.","33f14978":"### \u0414\u0430\u043d\u043d\u044b\u0435 \u0434\u043b\u044f \u043e\u0431\u0443\u0447\u0435\u043d\u0438\u044f","e25c82da":"### \u041f\u043e\u043f\u0440\u043e\u0431\u0443\u0435\u043c \u0441 LogisticRegressionCV","01692e4e":"### \u041e\u043e\u043e\u043e\u0447\u0435\u043d\u044c \u0445\u043e\u0440\u043e\u0448\u0438\u0435 \u0434\u0430\u043d\u043d\u044b\u0435, \u0431\u043e\u043b\u044c\u0448\u0438\u043d\u0441\u0442\u0432\u043e, \u0430 \u0442\u043e \u0438 \u0432\u0441\u0435 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0438 \u043c\u043e\u0433\u0443\u0442 \u0431\u044b\u0442\u044c \u0446\u0435\u043b\u0435\u0432\u044b\u043c\u0438.","4131f12d":"## \u041f\u043e\u0441\u043c\u043e\u0442\u0440\u0438\u043c \u043d\u0430 \u0434\u0430\u043d\u043d\u044b\u0435 \u0435\u0449\u0451 \u043f\u0440\u0438\u0441\u0442\u0430\u043b\u044c\u043d\u0435\u0435","aa5ad21f":"# 4) \u041f\u0440\u0435\u0434\u0441\u043a\u0430\u0437\u0430\u043d\u0438\u044f","7d0cbf06":"## 1.5) \u041f\u043e\u0441\u043c\u043e\u0442\u0440\u0438\u043c \u043d\u0430 \u0440\u0430\u0441\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0438\u0435 \u0446\u0435\u043b\u0435\u0432\u043e\u0433\u043e \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0430, \u0447\u0442\u043e\u0431\u044b \u0443\u0437\u043d\u0430\u0442\u044c, \u0441\u0431\u0430\u043b\u0430\u043d\u0441\u0438\u0440\u043e\u0432\u0430\u043d\u044b \u043b\u0438 \u043a\u043b\u0430\u0441\u0441\u044b:","eeef3736":"### \u0412\u0437\u0430\u0438\u043c\u043d\u0430\u044f \u043a\u043e\u0440\u0440\u0435\u043b\u044f\u0446\u0438\u044f + \u0432\u043b\u0438\u044f\u043d\u0438\u0435 \u0442\u0430\u0440\u0433\u0435\u0442\u0430"}}