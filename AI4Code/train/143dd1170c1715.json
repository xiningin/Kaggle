{"cell_type":{"0cbc9416":"code","279f25ce":"code","beda7f85":"code","24ec9933":"code","51444c21":"code","111cf826":"code","76114fec":"code","50571522":"code","a9b91f81":"code","12f88372":"code","7e6aebdd":"code","8a876e83":"code","a1525454":"code","c6922107":"code","23073786":"code","5f62a93d":"markdown","e62f1a73":"markdown","bca6f819":"markdown","b2aa4584":"markdown"},"source":{"0cbc9416":"import pandas as pd\nimport numpy as np\n\nfrom scipy.stats import norm\nfrom scipy import stats\nfrom scipy.stats import skew\nfrom scipy.stats.stats import pearsonr\n\nfrom sklearn.preprocessing import StandardScaler\n\nimport matplotlib\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\nimport warnings\nwarnings.filterwarnings('ignore')\n\n# Load Data\ntrain_df = pd.read_csv('..\/input\/train.csv')\ntest_df = pd.read_csv('..\/input\/test.csv')\n\n#skewness and kurtosis\nprint(\"Skewness: %f\" % train_df['SalePrice'].skew())\nprint(\"Kurtosis: %f\" % train_df['SalePrice'].kurt())\n\n#Save the 'Id' column\ntrain_ID = train_df['Id']\ntest_ID = test_df['Id']\n#Now drop the 'Id' colum since it's unnecessary for  the prediction process.\ntrain_df.drop(\"Id\", axis = 1, inplace = True)\ntest_df.drop(\"Id\", axis = 1, inplace = True)\n\n# preview the data\ntrain_df.head()","279f25ce":"quantitative = train_df.dtypes[train_df.dtypes != \"object\"].index\nqualitative = train_df.dtypes[train_df.dtypes == \"object\"].index\n\n# # pairplot\n# def pairplot(x, y, **kwargs):\n#     ax = plt.gca()\n#     ts = pd.DataFrame({'time': x, 'val': y})\n#     ts = ts.groupby('time').mean()\n#     ts.plot(ax=ax)\n#     plt.xticks(rotation=90)    \n# f = pd.melt(train_df, id_vars=['SalePrice'], value_vars=quantitative)\n# g = sns.FacetGrid(f, col=\"variable\",  col_wrap=2, sharex=False, sharey=False, size=5)\n# g = g.map(pairplot, \"value\", \"SalePrice\")\n\n# # categorical features\n# def boxplot(x, y, **kwargs):\n#     sns.boxplot(x=x, y=y)\n#     x=plt.xticks(rotation=90)\n# f = pd.melt(train_df, id_vars=['SalePrice'], value_vars=qualitative)\n# g = sns.FacetGrid(f, col=\"variable\",  col_wrap=2, sharex=False, sharey=False, size=5)\n# g = g.map(boxplot, \"value\", \"SalePrice\")\n\n# # normal distribution\n# f = pd.melt(train_df, value_vars=quantitative)\n# g = sns.FacetGrid(f, col=\"variable\",  col_wrap=2, sharex=False, sharey=False)\n# g = g.map(sns.distplot, \"value\")\n\n# normal probability plot\nsns.distplot(train_df['SalePrice'], fit=norm);\nfig = plt.figure()\nres = stats.probplot(train_df['SalePrice'], plot=plt)","beda7f85":"#correlation matrix\ncorrmat = train_df.corr()\nf, ax = plt.subplots(figsize=(12, 9))\nsns.heatmap(corrmat, vmax=.8, square=True);\n\n#saleprice correlation matrix\nk = 10 #number of variables for heatmap\ncols = corrmat.nlargest(k, 'SalePrice')['SalePrice'].index\ncm = np.corrcoef(train_df[cols].values.T)\nsns.set(font_scale=1.25)\nsns.heatmap(cm, cbar=True, annot=True, square=True, fmt='.2f', annot_kws={'size': 10}, yticklabels=cols.values, xticklabels=cols.values)\n\n#pairplot\nsns.set()\ncols = ['SalePrice', 'OverallQual', 'GrLivArea', 'GarageCars', 'TotalBsmtSF', 'FullBath', 'YearBuilt']\nsns.pairplot(train_df[cols], size = 2.5)","24ec9933":"#  Expensive houses have pools, better overall qual and condition, open porch and increased importance of MasVnrArea.\nfeatures = quantitative\n\nstandard = train_df[train_df['SalePrice'] < 200000]\npricey = train_df[train_df['SalePrice'] >= 200000]\n\ndiff = pd.DataFrame()\ndiff['feature'] = features\ndiff['difference'] = [(pricey[f].fillna(0.).mean() - standard[f].fillna(0.).mean())\/(standard[f].fillna(0.).mean())\n                      for f in features]\n\nsns.barplot(data=diff, x='feature', y='difference')\nx=plt.xticks(rotation=90)","51444c21":"#standardizing data\nsaleprice_scaled = StandardScaler().fit_transform(train_df['SalePrice'][:,np.newaxis]);\nlow_range = saleprice_scaled[saleprice_scaled[:,0].argsort()][:10]\nhigh_range= saleprice_scaled[saleprice_scaled[:,0].argsort()][-10:]\nprint('outer range (low) of the distribution:')\nprint(low_range)\nprint('\\nouter range (high) of the distribution:')\nprint(high_range)\n\n#bivariate analysis saleprice\/grlivarea: scatterplot\nvar = 'GrLivArea'\ndata = pd.concat([train_df['SalePrice'], train_df[var]], axis=1)\ndata.plot.scatter(x=var, y='SalePrice', ylim=(0,800000));\n\n# Remove outliers\ntrain_df.drop(train_df[(train_df['OverallQual']<5) & (train_df['SalePrice']>200000)].index, inplace=True)\ntrain_df.drop(train_df[(train_df['GrLivArea']>4500) & (train_df['SalePrice']<300000)].index, inplace=True)\ntrain_df.reset_index(drop=True, inplace=True)\n\nntrain = train_df.shape[0]\nntest = test_df.shape[0]\n# combine these datasets to run certain operations on both datasets together\nfull_data = pd.concat((train_df, test_df)).reset_index(drop=True)\nfull_data.drop(['SalePrice'], axis=1, inplace=True)","111cf826":"# missing data\ntotal = full_data.isnull().sum().sort_values(ascending=False)\npercent = (full_data.isnull().sum()\/full_data.isnull().count()).sort_values(ascending=False)\nmissing_data = pd.concat([total, percent], axis=1, keys=['Total', 'Percent'])\nmissing_data.head(20)\n\n#dealing with missing data\n#train_df = train_df.drop((missing_data[missing_data['Total'] > 1]).index,1)\n\nfull_data[\"LotFrontage\"] = full_data.groupby(\"Neighborhood\")[\"LotFrontage\"].transform(lambda x: x.fillna(x.median()))\nfull_data.fillna(full_data.mean(), inplace=True)\nfull_data.fillna(full_data.mode().iloc[0], inplace=True)\n\nfull_data.isnull().sum().max() #just checking that there's no more data missing...","76114fec":"# from sklearn.preprocessing import LabelEncoder\n\n# # transform into a categorical variable\n# full_data['MSSubClass'] = full_data['MSSubClass'].apply(str)\n# full_data['OverallCond'] = full_data['OverallCond'].astype(str)\n# full_data['YrSold'] = full_data['YrSold'].astype(str)\n# full_data['MoSold'] = full_data['MoSold'].astype(str)\n\n# cols = ('FireplaceQu', 'BsmtQual', 'BsmtCond', 'GarageQual', 'GarageCond', \n#         'ExterQual', 'ExterCond','HeatingQC', 'PoolQC', 'KitchenQual', 'BsmtFinType1', \n#         'BsmtFinType2', 'Functional', 'Fence', 'BsmtExposure', 'GarageFinish', 'LandSlope',\n#         'LotShape', 'PavedDrive', 'Street', 'Alley', 'CentralAir', 'MSSubClass', 'OverallCond', \n#         'YrSold', 'MoSold')\n# # process columns, apply LabelEncoder to categorical features\n# for c in cols:\n#     lbl = LabelEncoder() \n#     lbl.fit(list(full_data[c].values)) \n#     full_data[c] = lbl.transform(list(full_data[c].values))\n     \n# print('Shape of full_data: {}'.format(full_data.shape))","50571522":"# Adding total sqfootage feature \nfull_data['TotalSF'] = full_data['TotalBsmtSF'] + full_data['1stFlrSF'] + full_data['2ndFlrSF']\nfull_data = full_data.drop(['TotalBsmtSF', '1stFlrSF', '2ndFlrSF'], axis=1)\nprint('Shape of full_data: {}'.format(full_data.shape))","a9b91f81":"from scipy.special import boxcox1p\nfrom scipy.stats import boxcox_normmax\n\n# normality by applying log transformation\ntrain_df['SalePrice'] = np.log1p(train_df['SalePrice'])\n\n#log transform skewed numeric features\nnumeric_feats = full_data.dtypes[full_data.dtypes != \"object\"].index\nskewed_feats = full_data[numeric_feats].apply(lambda x: skew(x.dropna())) #compute skewness\nskewed_feats = skewed_feats[skewed_feats > 0.75]\nskew_index = skewed_feats.index\nprint(skew_index)\n\n# Normalize skewed features\nfor i in skew_index:\n    full_data[i] = boxcox1p(full_data[i], boxcox_normmax(full_data[i] + 1))","12f88372":"# convert categorical variable into dummy\nfull_data = pd.get_dummies(full_data)\n\nfull_data.head()","7e6aebdd":"from sklearn.linear_model import Ridge, RidgeCV, ElasticNet, ElasticNetCV, Lasso, LassoCV, LassoLarsCV, BayesianRidge, LassoLarsIC\nfrom sklearn.ensemble import RandomForestRegressor,  GradientBoostingRegressor\nfrom sklearn.kernel_ridge import KernelRidge\nfrom sklearn.pipeline import make_pipeline\nfrom sklearn.preprocessing import RobustScaler\nfrom sklearn.base import BaseEstimator, TransformerMixin, RegressorMixin, clone\nfrom sklearn.model_selection import KFold, cross_val_score, train_test_split\nfrom sklearn.metrics import mean_squared_error\nimport xgboost as xgb\nimport lightgbm as lgb\n\n# data matrices for learning\nX_train = full_data[:ntrain]\nX_test = full_data[ntrain:]\ny = train_df.SalePrice.values\n\n# Validation function\nkf = KFold(n_splits=12, random_state=42, shuffle=True)\ndef rmse_cv(model):\n    rmse= np.sqrt(-cross_val_score(model, X_train.values, y, scoring=\"neg_mean_squared_error\", cv = kf))\n    return(rmse)\n\nmodel_ridge = Ridge()\nalphas = [0.05, 0.1, 0.3, 1, 3, 5, 10, 15, 30, 50, 75]\ncv_ridge = [rmse_cv(Ridge(alpha = alpha)).mean() for alpha in alphas]\n\ncv_ridge = pd.Series(cv_ridge, index = alphas)\ncv_ridge.plot(title = \"Validation\")\nplt.xlabel(\"alpha\")\nplt.ylabel(\"rmse\")\n\nprint(cv_ridge.min())\n\nmodel_lasso = LassoCV(alphas = [1, 0.1, 0.001, 0.0005]).fit(X_train, y)\nprint(rmse_cv(model_lasso).mean())\n\n#let's look at the residuals as well:\nmatplotlib.rcParams['figure.figsize'] = (6.0, 6.0)\n\npreds = pd.DataFrame({\"preds\":model_lasso.predict(X_train), \"true\":y})\npreds[\"residuals\"] = preds[\"true\"] - preds[\"preds\"]\npreds.plot(x = \"preds\", y = \"residuals\",kind = \"scatter\")\n\ndtrain = xgb.DMatrix(X_train, label = y)\nparams = {\"max_depth\":2, \"eta\":0.1}\nmodel = xgb.cv(params, dtrain,  num_boost_round=500, early_stopping_rounds=100)\nmodel.loc[30:,[\"test-rmse-mean\", \"train-rmse-mean\"]].plot()\n\n# model_xgb = xgb.XGBRegressor(n_estimators=50, max_depth=2, learning_rate=0.1) #the params were tuned using xgb.cv\n# model_xgb.fit(X_train, y)\n\n# xgb_preds = np.expm1(model_xgb.predict(X_test))\n# lasso_preds = np.expm1(model_lasso.predict(X_test))\n# preds = 0.7*lasso_preds + 0.3*xgb_preds","8a876e83":"from sklearn.ensemble import RandomForestRegressor, AdaBoostRegressor, BaggingRegressor\nfrom sklearn.kernel_ridge import KernelRidge\nfrom sklearn.svm import SVR\nfrom mlxtend.regressor import StackingCVRegressor\nfrom lightgbm import LGBMRegressor\nfrom xgboost import XGBRegressor\n\n# Setup models\nlightgbm = LGBMRegressor(objective='regression', \n                       num_leaves=6,\n                       learning_rate=0.01, \n                       n_estimators=7000,\n                       max_bin=200, \n                       bagging_fraction=0.8,\n                       bagging_freq=4, \n                       bagging_seed=8,\n                       feature_fraction=0.2,\n                       feature_fraction_seed=8,\n                       min_sum_hessian_in_leaf = 11,\n                       verbose=-1,\n                       random_state=42)\n\nxgboost = XGBRegressor(learning_rate=0.01,\n                       n_estimators=6000,\n                       max_depth=4,\n                       min_child_weight=0,\n                       gamma=0.6,\n                       subsample=0.7,\n                       colsample_bytree=0.7,\n                       objective='reg:linear',\n                       nthread=-1,\n                       scale_pos_weight=1,\n                       seed=27,\n                       reg_alpha=0.00006,\n                       random_state=42)\n\n# Ridge Regressor\nridge_alphas = [1e-15, 1e-10, 1e-8, 9e-4, 7e-4, 5e-4, 3e-4, 1e-4, 1e-3, 5e-2, 1e-2, 0.1, 0.3, 1, 3, 5, 10, 15, 18, 20, 30, 50, 75, 100]\nridge = make_pipeline(RobustScaler(), RidgeCV(alphas=ridge_alphas, cv=kf))\n\n# Support Vector Regressor\nsvr = make_pipeline(RobustScaler(), SVR(C= 20, epsilon= 0.008, gamma=0.0003))\n\n# Gradient Boosting Regressor\ngbr = GradientBoostingRegressor(n_estimators=6000,\n                                learning_rate=0.01,\n                                max_depth=4,\n                                max_features='sqrt',\n                                min_samples_leaf=15,\n                                min_samples_split=10,\n                                loss='huber',\n                                random_state=42)  \n\n# Random Forest Regressor\nrf = RandomForestRegressor(n_estimators=1200,\n                          max_depth=15,\n                          min_samples_split=5,\n                          min_samples_leaf=5,\n                          max_features=None,\n                          oob_score=True,\n                          random_state=42)\n\n# Stack up all the models above, optimized using xgboost\nstack_gen = StackingCVRegressor(regressors=(xgboost, lightgbm, svr, ridge, gbr, rf),\n                                meta_regressor=xgboost,\n                                use_features_in_secondary=True)\n\n# Get cross validation scores for each model\nscores = {}\n\nscore = rmse_cv(lightgbm)\nprint(\"lightgbm: {:.4f} ({:.4f})\".format(score.mean(), score.std()))\nscores['lgb'] = (score.mean(), score.std())\n\nscore = rmse_cv(xgboost)\nprint(\"xgboost: {:.4f} ({:.4f})\".format(score.mean(), score.std()))\nscores['xgb'] = (score.mean(), score.std())\n\nscore = rmse_cv(svr)\nprint(\"SVR: {:.4f} ({:.4f})\".format(score.mean(), score.std()))\nscores['svr'] = (score.mean(), score.std())\n\nscore = rmse_cv(ridge)\nprint(\"ridge: {:.4f} ({:.4f})\".format(score.mean(), score.std()))\nscores['ridge'] = (score.mean(), score.std())\n\nscore = rmse_cv(rf)\nprint(\"rf: {:.4f} ({:.4f})\".format(score.mean(), score.std()))\nscores['rf'] = (score.mean(), score.std())\n\nscore = rmse_cv(gbr)\nprint(\"gbr: {:.4f} ({:.4f})\".format(score.mean(), score.std()))\nscores['gbr'] = (score.mean(), score.std())\n\n# Plot the predictions for each model\nsns.set_style(\"white\")\nfig = plt.figure(figsize=(24, 12))\n\nax = sns.pointplot(x=list(scores.keys()), y=[score for score, _ in scores.values()], markers=['o'], linestyles=['-'])\nfor i, score in enumerate(scores.values()):\n    ax.text(i, score[0] + 0.002, '{:.6f}'.format(score[0]), horizontalalignment='left', size='large', color='black', weight='semibold')\n\nplt.ylabel('Score (RMSE)', size=20, labelpad=12.5)\nplt.xlabel('Model', size=20, labelpad=12.5)\nplt.tick_params(axis='x', labelsize=13.5)\nplt.tick_params(axis='y', labelsize=12.5)\n\nplt.title('Scores of Models', size=20)\n\nplt.show()","a1525454":"class StackingAveragedModels(BaseEstimator, RegressorMixin, TransformerMixin):\n    def __init__(self, base_models, meta_model, n_folds=5):\n        self.base_models = base_models\n        self.meta_model = meta_model\n        self.n_folds = n_folds\n   \n    # We again fit the data on clones of the original models\n    def fit(self, X, y):\n        self.base_models_ = [list() for x in self.base_models]\n        self.meta_model_ = clone(self.meta_model)\n        kfold = KFold(n_splits=self.n_folds, shuffle=True, random_state=156)\n        \n        # Train cloned base models then create out-of-fold predictions\n        # that are needed to train the cloned meta-model\n        out_of_fold_predictions = np.zeros((X.shape[0], len(self.base_models)))\n        for i, model in enumerate(self.base_models):\n            for train_index, holdout_index in kfold.split(X, y):\n                instance = clone(model)\n                self.base_models_[i].append(instance)\n                instance.fit(X[train_index], y[train_index])\n                y_pred = instance.predict(X[holdout_index])\n                out_of_fold_predictions[holdout_index, i] = y_pred\n                \n        # Now train the cloned  meta-model using the out-of-fold predictions as new feature\n        self.meta_model_.fit(out_of_fold_predictions, y)\n        return self\n   \n    #Do the predictions of all base models on the test data and use the averaged predictions as \n    #meta-features for the final prediction which is done by the meta-model\n    def predict(self, X):\n        meta_features = np.column_stack([\n            np.column_stack([model.predict(X) for model in base_models]).mean(axis=1)\n            for base_models in self.base_models_ ])\n        return self.meta_model_.predict(meta_features)\n    \n# stacked_averaged_models = StackingAveragedModels(base_models = (ENet, GBoost, KRR),\n#                                                  meta_model = lasso)\n\n# score = rmse_cv(stacked_averaged_models)\n# print(\"Stacking Averaged models score: {:.4f} ({:.4f})\".format(score.mean(), score.std()))","c6922107":"def rmsle(y, y_pred):\n    return np.sqrt(mean_squared_error(y, y_pred))\n\nprint('stack_gen')\nstack_gen_model = stack_gen.fit(np.array(X_train.values), np.array(y))\n\nprint('lightgbm')\nlgb_model_full_data = lightgbm.fit(X_train, y)\n\nprint('xgboost')\nxgb_model_full_data = xgboost.fit(X_train, y)\n\nprint('Svr')\nsvr_model_full_data = svr.fit(X_train, y)\n\nprint('Ridge')\nridge_model_full_data = ridge.fit(X_train, y)\n\nprint('RandomForest')\nrf_model_full_data = rf.fit(X_train, y)\n\nprint('GradientBoosting')\ngbr_model_full_data = gbr.fit(X_train, y)\n\n\ndef blended_predictions(X):\n    return ((0.1 * ridge_model_full_data.predict(X)) + \\\n            (0.2 * svr_model_full_data.predict(X)) + \\\n            (0.1 * gbr_model_full_data.predict(X)) + \\\n            (0.1 * xgb_model_full_data.predict(X)) + \\\n            (0.1 * lgb_model_full_data.predict(X)) + \\\n            (0.05 * rf_model_full_data.predict(X)) + \\\n            (0.35 * stack_gen_model.predict(np.array(X))))\n\n# Get final precitions from the blended model\nblended_score = rmsle(y, blended_predictions(X_train))\nscores['blended'] = (blended_score, 0)\nprint('RMSLE score on train data:')\nprint(blended_score)","23073786":"predictions = blended_predictions(X_test)\n\nsubmission = pd.DataFrame()\nsubmission['Id'] = test_ID\nsubmission['SalePrice'] = np.floor(np.expm1(predictions))\nsubmission.to_csv('submission.csv',index=False)","5f62a93d":"# Final Prediction #\nNow we can use the ensemled prediction for our test data.","e62f1a73":"# Data Analysis and Wrangling\nThis section will talk about cleanup, imputation, outliers detection and transform\/encode of the data. Statistical summaries and visulization plots will be used to help recognizing underlying pattens to exploit in the model.","bca6f819":"# Regression Model Comparison","b2aa4584":"# Introduction #\n\nThis kernel is written for the [House Price Predict Competetion](https:\/\/www.kaggle.com\/c\/house-prices-advanced-regression-techniques). If you Like the notebook and think that it helped you, <font color=\"red\"><b> please upvote<\/b><\/font>.\n\n---\n## Table of Content\n1. Data Analysis and Wrangling\n    * Exploratory Data Analysis (EDA)\n    * Feature Engineering\n2. Modeling\n    * Model Evaluation and Comparison\n    * Ensembling and Stacking Models\n3. Final Prediction & Submission"}}