{"cell_type":{"7508df87":"code","a7549a0c":"code","18dcb641":"code","aad6da1f":"code","109e7aaf":"code","63bae586":"code","7d991800":"code","65c1ebd5":"code","bf558e5c":"code","6d5745ac":"code","10a2a089":"code","1f0615c9":"code","fa095a78":"code","a74a041f":"code","edf6ef7f":"code","e0d4caf8":"code","87801466":"code","3a8a4f45":"code","4c669de0":"markdown"},"source":{"7508df87":"# Check Python Version\nimport sys\nimport scipy\nimport numpy\nimport matplotlib\nimport pandas\nimport sklearn\n\nprint('Python: {}'.format(sys.version))\nprint('scipy: {}'.format(scipy.__version__))\nprint('numpy: {}'.format(numpy.__version__))\nprint('matplotlib: {}'.format(matplotlib.__version__))\nprint('pandas: {}'.format(pandas.__version__))\nprint('sklearn: {}'.format(sklearn.__version__))","a7549a0c":"import pandas as pd\ndata=pd.read_csv('\/kaggle\/input\/breast-cancer-wisconsin (1).data')","18dcb641":"import numpy as np\nfrom sklearn.model_selection import cross_validate\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.svm import SVC\nfrom sklearn import model_selection\nfrom sklearn.metrics import classification_report\nfrom sklearn.metrics import accuracy_score\nfrom pandas.plotting import scatter_matrix\nimport matplotlib.pyplot as plt\nimport pandas as pd","aad6da1f":"# Load Dataset\n\nnames = ['id', 'clump_thickness', 'uniform_cell_size', 'uniform_cell_shape',\n       'marginal_adhesion', 'single_epithelial_size', 'bare_nuclei',\n       'bland_chromatin', 'normal_nucleoli', 'mitoses', 'class']\ndf = pd.read_csv('\/kaggle\/input\/breast-cancer-wisconsin (1).data',names=names)\n","109e7aaf":"import pandas_profiling as pf \nprofile=df.profile_report(style={'full_width':True})","63bae586":"profile","7d991800":"x=profile.get_rejected_variables()\nx.append('id')","65c1ebd5":"df.drop(columns=['id'],inplace=True)","bf558e5c":"# Let explore the dataset and do a few visualizations\nprint(df.loc[10])\n\n# Print the shape of the dataset\nprint(df.shape)","6d5745ac":"# Describe the dataset\nprint(df.head())","10a2a089":"# Plot histograms for each variable\ndf.hist(figsize = (10, 10))\nplt.show()","1f0615c9":"# Create scatter plot matrix\nscatter_matrix(df, figsize = (18,18))\nplt.show()","fa095a78":"df.replace('?',-9999,inplace=True)","a74a041f":"# Create X and Y datasets for training\nfrom sklearn.model_selection import train_test_split\nX = np.array(df.drop(['class'], 1))\ny = np.array(df['class'])\n\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2)","edf6ef7f":"# Testing Options\nseed = 8\nscoring = 'accuracy'","e0d4caf8":"# Define models to train\nmodels = []\nmodels.append(('KNN', KNeighborsClassifier(n_neighbors = 5)))\nmodels.append(('SVM', SVC()))\n\n# evaluate each model in turn\nresults = []\nnames = []\n\nfor name, model in models:\n    kfold = model_selection.KFold(n_splits=10, random_state = seed)\n    cv_results = model_selection.cross_val_score(model, X_train, y_train, cv=kfold, scoring=scoring)\n    results.append(cv_results)\n    names.append(name)\n    msg = \"%s: %f (%f)\" % (name, cv_results.mean(), cv_results.std())\n    print(msg)","87801466":"# Make predictions on validation dataset\n\nfor name, model in models:\n    model.fit(X_train, y_train)\n    predictions = model.predict(X_test)\n    print(name)\n    print(accuracy_score(y_test, predictions))\n    print(classification_report(y_test, predictions))\n    \n# Accuracy - ratio of correctly predicted observation to the total observations. \n# Precision - (false positives) ratio of correctly predicted positive observations to the total predicted positive observations\n# Recall (Sensitivity) - (false negatives) ratio of correctly predicted positive observations to the all observations in actual class - yes.\n# F1 score - F1 Score is the weighted average of Precision and Recall. Therefore, this score takes both false positives and false ","3a8a4f45":"clf = SVC()\n\nclf.fit(X_train, y_train)\naccuracy = clf.score(X_test, y_test)\nprint(accuracy)\n\nexample_measures = np.array([[4,2,1,1,1,2,3,2,1]])\nexample_measures = example_measures.reshape(len(example_measures), -1)\nprediction = clf.predict(example_measures)\nprint(prediction)","4c669de0":"after dropping the rejected column\n"}}