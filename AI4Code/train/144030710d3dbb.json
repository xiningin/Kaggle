{"cell_type":{"be053205":"code","761b4548":"code","245ee99b":"code","c6015c46":"code","551ca05e":"code","3a649e68":"code","db8531d1":"code","3036a9d6":"code","96fc40f2":"code","68224aa8":"code","f2e1011c":"code","fe472dab":"code","baa3db31":"code","86dee37b":"code","8d871cdf":"code","2b896ddb":"code","ad031bca":"code","30f14d81":"code","6b597054":"code","4b1a08e9":"code","51e8f4fa":"code","c27bbb2d":"code","061f7b1b":"code","3d6cec7c":"code","b83fb378":"code","fc088767":"code","69d31c7d":"code","33b59d1a":"code","30d4b205":"code","57315312":"code","05dc3da7":"code","0c49a11e":"code","d06c637a":"code","363d401d":"code","de098c05":"code","a52e778a":"code","87ff071d":"code","edc7e178":"code","dd68e34b":"code","fe3d5f5a":"code","947dd264":"code","9dd2eaee":"markdown","81920f7e":"markdown","cf0bde64":"markdown","f6893323":"markdown","83388579":"markdown","4dc04978":"markdown","25741e81":"markdown","0124de09":"markdown"},"source":{"be053205":"# \uc2dc\ud5d8\ud658\uacbd \uc138\ud305 (\ucf54\ub4dc \ubcc0\uacbd X)\nimport pandas as pd\nimport numpy as np\nfrom sklearn.model_selection import train_test_split\n\ndef exam_data_load(df, target, id_name=\"\", null_name=\"\"):\n    if id_name == \"\":\n        df = df.reset_index().rename(columns={\"index\": \"id\"})\n        id_name = 'id'\n    else:\n        id_name = id_name\n    \n    if null_name != \"\":\n        df[df == null_name] = np.nan\n    \n    X_train, X_test = train_test_split(df, test_size=0.2, shuffle=True, random_state=2021)\n    y_train = X_train[[id_name, target]]\n    X_train = X_train.drop(columns=[id_name, target])\n    y_test = X_test[[id_name, target]]\n    X_test = X_test.drop(columns=[id_name, target])\n    return X_train, X_test, y_train, y_test \n    \ndf = pd.read_csv(\"..\/input\/house-prices-advanced-regression-techniques\/train.csv\")\nX_train, X_test, y_train, y_test = exam_data_load(df, target='SalePrice', id_name='Id')\n\nX_train.shape, X_test.shape, y_train.shape, y_test.shape","761b4548":"import sklearn\nfrom sklearn import *\nfrom sklearn.impute import SimpleImputer\nfrom sklearn.ensemble import AdaBoostRegressor, ExtraTreesRegressor, GradientBoostingRegressor, RandomForestRegressor\nfrom sklearn.linear_model import LinearRegression, Ridge, Lasso, PassiveAggressiveRegressor, SGDRegressor\nfrom sklearn.metrics import mean_squared_error,mean_squared_log_error\nfrom sklearn.model_selection import train_test_split, GridSearchCV\nfrom sklearn.preprocessing import StandardScaler, LabelEncoder\nfrom sklearn.svm import SVR\nfrom sklearn.tree import DecisionTreeRegressor\nimport xgboost as xg\nfrom xgboost import XGBRFRegressor, XGBRegressor","245ee99b":"X_train.head()","c6015c46":"X_test.head()","551ca05e":"X_train.describe()","3a649e68":"X_test.describe()","db8531d1":"X_train.info()","3036a9d6":"X_test.info()","96fc40f2":"X_train.isna().sum().sort_values(ascending=False).iloc[0:20]","68224aa8":"X_test.isna().sum().sort_values(ascending=False).iloc[0:20]","f2e1011c":"X_train.drop(['PoolQC','MiscFeature','Alley','Fence'], axis=1, inplace=True)\nX_test.drop(['PoolQC','MiscFeature','Alley','Fence'], axis=1, inplace=True)","fe472dab":"col_impute = X_train.isna().sum().sort_values(ascending=False).iloc[0:15].index","baa3db31":"X_train[col_impute].info()","86dee37b":"col_impute = ['LotFrontage', 'GarageYrBlt', 'MasVnrArea']\nfor i in range(len(col_impute)):\n\n    X_train[col_impute[i]].fillna(X_train[col_impute[i]].median(), inplace=True)\n    X_test[col_impute[i]].fillna(X_train[col_impute[i]].median(), inplace=True)","8d871cdf":"X_train = X_train.select_dtypes(exclude=['object'])\nX_test = X_test.select_dtypes(exclude=['object'])","2b896ddb":"scaler = StandardScaler()\nscaler.fit(X_train)\nX_train = scaler.transform(X_train)\nX_test = scaler.transform(X_test)","ad031bca":"X_tra, X_val, y_tra, y_val = train_test_split(X_train, y_train, test_size=0.2, random_state=42)","30f14d81":"model_list = [AdaBoostRegressor(random_state=0), ExtraTreesRegressor(random_state=0), GradientBoostingRegressor(random_state=0), \n              RandomForestRegressor(random_state=0), LinearRegression(), Ridge(), Lasso(), PassiveAggressiveRegressor(), SGDRegressor(),\n              DecisionTreeRegressor(random_state=0), SVR(), XGBRFRegressor(random_state=0), XGBRegressor(random_state=0)]\n\nfor i in range(len(model_list)):\n    clf = model_list[i]\n    clf.fit(X_tra, y_tra.iloc[:,1])\n    print(model_list[i],\":\",mean_squared_log_error(y_val.iloc[:,1], clf.predict(X_val)))","6b597054":"parameters = {'n_estimators':[100, 300, 500], 'max_depth':[5, 10, 15]}\nclf = GridSearchCV(ExtraTreesRegressor(random_state=0) , parameters)\nclf.fit(X_train, y_train.iloc[:,1])\nprint(clf.best_score_)\nprint(clf.best_params_)","4b1a08e9":"parameters = {'n_estimators':[100, 300, 500], 'max_depth':[5, 10, 15]}\nclf = GridSearchCV(GradientBoostingRegressor(random_state=0) , parameters)\nclf.fit(X_train, y_train.iloc[:,1])\nprint(clf.best_score_)\nprint(clf.best_params_)","51e8f4fa":"clf = GradientBoostingRegressor(random_state=0, max_depth= 5, n_estimators= 100)\nclf.fit(X_train, y_train.iloc[:,1])\npred = y_test.copy()\npred.iloc[:,1] = clf.predict(X_test)","c27bbb2d":"np.sqrt(mean_squared_error(y_test.iloc[:,1], pred.iloc[:,1]))","061f7b1b":"# \uc2dc\ud5d8\ud658\uacbd \uc138\ud305 (\ucf54\ub4dc \ubcc0\uacbd X)\nimport pandas as pd\nimport numpy as np\nfrom sklearn.model_selection import train_test_split\n\ndef exam_data_load(df, target, id_name=\"\", null_name=\"\"):\n    if id_name == \"\":\n        df = df.reset_index().rename(columns={\"index\": \"id\"})\n        id_name = 'id'\n    else:\n        id_name = id_name\n    \n    if null_name != \"\":\n        df[df == null_name] = np.nan\n    \n    X_train, X_test = train_test_split(df, test_size=0.2, shuffle=True, random_state=2021)\n    y_train = X_train[[id_name, target]]\n    X_train = X_train.drop(columns=[id_name, target])\n    y_test = X_test[[id_name, target]]\n    X_test = X_test.drop(columns=[id_name, target])\n    return X_train, X_test, y_train, y_test \n    \ndf = pd.read_csv(\"..\/input\/house-prices-advanced-regression-techniques\/train.csv\")\nX_train, X_test, y_train, y_test = exam_data_load(df, target='SalePrice', id_name='Id')\n\nX_train.shape, X_test.shape, y_train.shape, y_test.shape","3d6cec7c":"import pandas as pd","b83fb378":"X_train.shape, X_test.shape","fc088767":"pd.set_option(\"display.max_columns\", 100)\ndisplay(X_train.head(3))\ndisplay(X_test.head(3))","69d31c7d":"y_train['SalePrice'].hist()","33b59d1a":"y_test['SalePrice'].hist()","30d4b205":"X_train.isnull().sum().sort_values(ascending=False)[:20]","57315312":"X_test.isnull().sum().sort_values(ascending=False)[:20]","05dc3da7":"X_train.info()","0c49a11e":"X_train = X_train.select_dtypes(exclude=['object'])\nX_test = X_test.select_dtypes(exclude=['object'])\ntarget = y_train['SalePrice']","d06c637a":"from sklearn.impute import SimpleImputer\n\nimp = SimpleImputer()\nX_train = imp.fit_transform(X_train)\nX_test = imp.transform(X_test)","363d401d":"from sklearn.model_selection import train_test_split\nX_tr, X_val, y_tr, y_val = train_test_split(X_train, target, test_size=0.15, random_state=2022)\nX_tr.shape, X_val.shape, y_tr.shape, y_val.shape","de098c05":"from xgboost import XGBRegressor\n\nmodel = XGBRegressor()\nmodel.fit(X_tr, y_tr, verbose=False)\npred = model.predict(X_val)","a52e778a":"from sklearn.metrics import mean_squared_error\n\ndef rmsle(y, y_pred):\n    return np.sqrt(mean_squared_error(y, y_pred))\n\nprint(\"RMSLE : \" + str(rmsle(y_val, pred)))","87ff071d":"X_train, X_test, y_train, y_test = exam_data_load(df, target='SalePrice', id_name='Id')\n\nidx1 = y_train['SalePrice'].quantile(0.005)>y_train['SalePrice']\nidx2 = y_train['SalePrice'].quantile(0.995)<y_train['SalePrice']\n\ny_train = y_train[~(idx1 + idx2)]\nX_train = X_train[~(idx1 + idx2)]\n\nX_train = X_train.select_dtypes(exclude=['object'])\nX_test = X_test.select_dtypes(exclude=['object'])\ntarget = y_train['SalePrice']\n\nimp = SimpleImputer()\nX_train = imp.fit_transform(X_train)\nX_test = imp.transform(X_test)\n\nX_tr, X_val, y_tr, y_val = train_test_split(X_train, target, test_size=0.15, random_state=20222)\n\nmodel = XGBRegressor()\nmodel.fit(X_tr, y_tr)\npred = model.predict(X_val)\n\nprint(\"RMSLE : \" + str(rmsle(y_val, pred)))","edc7e178":"X_train, X_test, y_train, y_test = exam_data_load(df, target='SalePrice', id_name='Id')\n\nidx1 = y_train['SalePrice'].quantile(0.005)>y_train['SalePrice']\nidx2 = y_train['SalePrice'].quantile(0.995)<y_train['SalePrice']\n\ny_train = y_train[~(idx1 + idx2)]\nX_train = X_train[~(idx1 + idx2)]\n\nX_train = X_train.select_dtypes(exclude=['object'])\nX_test = X_test.select_dtypes(exclude=['object'])\ntarget = y_train['SalePrice']\n\nimp = SimpleImputer()\nX_train = imp.fit_transform(X_train)\nX_test = imp.transform(X_test)\n\nX_tr, X_val, y_tr, y_val = train_test_split(X_train, target, test_size=0.15, random_state=20222)\n\nmodel = XGBRegressor(n_estimators=100, max_depth=4, colsample_bytree=0.9)\nmodel.fit(X_tr, y_tr)\npred = model.predict(X_val)\n\nprint(\"RMSLE : \" + str(rmsle(y_val, pred)))","dd68e34b":"pred = model.predict(X_test)\noutput = pd.DataFrame({'Id': y_test['Id'], 'SalePrice': pred})\noutput.head()","fe3d5f5a":"#output.to_csv(\"000000.csv\", index=False)","947dd264":"pred = model.predict(X_test)\nprint(\"RMSLE : \" + str(rmsle(y_test['SalePrice'], pred)))","9dd2eaee":"# Model","81920f7e":"# Data Load & Simple EDA","cf0bde64":"# Predict & to CSV","f6893323":"# \uacb0\uacfc \uccb4\uc810","83388579":"## Simple Tuning","4dc04978":"# Preprocessing","25741e81":"- ExtraTreesRegressor(random_state=0) : 0.019407600369342252\n- GradientBoostingRegressor(random_state=0) : 0.01709699099827311\n\n\uad6c\uccb4\ud654","0124de09":"# Simple Preprocessing"}}