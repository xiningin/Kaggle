{"cell_type":{"f18039ff":"code","85e21f4a":"code","a80e708f":"code","c087f1ff":"code","1cc26d8a":"code","90330e81":"code","1935cf5e":"code","260b266b":"code","c573e231":"code","77f8b23c":"code","75ba3c47":"code","e384b96a":"code","281a0767":"code","c51a84c8":"code","c6fca65d":"code","7ff59a0f":"code","269f4323":"code","fe058a79":"code","3d36cec3":"code","48c0a490":"code","256029b0":"code","94eb12fb":"code","a99e7240":"code","96418b3a":"code","8061fd49":"code","2f75f9ca":"code","6591236e":"code","98da3180":"code","7b9b2ef0":"code","2510e9b8":"code","a8219227":"code","d3f62ddd":"code","3ece537c":"code","ec89dcbe":"code","1be9227e":"code","5426b62f":"code","7f886401":"markdown","5398bdb3":"markdown","84833534":"markdown","2f03c0e1":"markdown","5352f0a9":"markdown","bfe060ea":"markdown","9c138dcb":"markdown","4a722c45":"markdown","ac0ab57d":"markdown","59eaf33b":"markdown","ccb6857f":"markdown","102ca457":"markdown","99a0584b":"markdown","ac2f6fc6":"markdown","21ec636c":"markdown","146cfaf1":"markdown","9ad25131":"markdown","45021adc":"markdown","e25e4174":"markdown","735d88d7":"markdown","0301aa94":"markdown","ede0f168":"markdown","cc9b25bb":"markdown","02229797":"markdown","bc779d18":"markdown"},"source":{"f18039ff":"# for basic operations\nimport numpy as np\nimport pandas as pd\n\n# for basic visualizations\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nplt.style.use('fivethirtyeight')\n\n# for advanced visualizations\nimport plotly.offline as py\nfrom plotly.offline import init_notebook_mode, iplot\nimport plotly.graph_objs as go\nfrom plotly import tools\ninit_notebook_mode(connected = True)\nimport plotly.figure_factory as ff\n\n# for providing the path\nimport os\nprint(os.listdir('..\/input\/'))","85e21f4a":"data = pd.read_csv('..\/input\/amazon_alexa.tsv', delimiter = '\\t', quoting = 3)\n\n# getting the shape of the data\ndata.shape","a80e708f":"data.head()","c087f1ff":"# describing the data set\n\ndata.describe()","1cc26d8a":"# checking if there is any null data or not\n\ndata.isnull().any().any()","90330e81":"# adding a length column for analyzing the length of the reviews\n\ndata['length'] = data['verified_reviews'].apply(len)\n\ndata.groupby('length').describe().sample(10)","1935cf5e":"data.groupby('rating').describe()","260b266b":"data.groupby('feedback').describe()","c573e231":"ratings = data['rating'].value_counts()\n\nlabel_rating = ratings.index\nsize_rating = ratings.values\n\ncolors = ['pink', 'lightblue', 'aqua', 'gold', 'crimson']\n\nrating_piechart = go.Pie(labels = label_rating,\n                         values = size_rating,\n                         marker = dict(colors = colors),\n                         name = 'Alexa', hole = 0.3)\n\ndf = [rating_piechart]\n\nlayout = go.Layout(\n           title = 'Distribution of Ratings for Alexa')\n\nfig = go.Figure(data = df,\n                 layout = layout)\n\npy.iplot(fig)","77f8b23c":"\ncolor = plt.cm.copper(np.linspace(0, 1, 15))\ndata['variation'].value_counts().plot.bar(color = color, figsize = (15, 9))\nplt.title('Distribution of Variations in Alexa', fontsize = 20)\nplt.xlabel('variations')\nplt.ylabel('count')\nplt.show()","75ba3c47":"feedbacks = data['feedback'].value_counts()\n\nlabel_feedback = feedbacks.index\nsize_feedback = feedbacks.values\n\ncolors = ['yellow', 'lightgreen']\n\nfeedback_piechart = go.Pie(labels = label_feedback,\n                         values = size_feedback,\n                         marker = dict(colors = colors),\n                         name = 'Alexa', hole = 0.3)\n\ndf2 = [feedback_piechart]\n\nlayout = go.Layout(\n           title = 'Distribution of Feedbacks for Alexa')\n\nfig = go.Figure(data = df2,\n                 layout = layout)\n\npy.iplot(fig)","e384b96a":"\ndata['length'].value_counts().plot.hist(color = 'skyblue', figsize = (15, 5), bins = 50)\nplt.title('Distribution of Length in Reviews')\nplt.xlabel('lengths')\nplt.ylabel('count')\nplt.show()","281a0767":"data[data['length'] == 1]['verified_reviews'].iloc[0]","c51a84c8":"data[data['length'] == 21]['verified_reviews'].iloc[0]","c6fca65d":"data[data['length'] == 50]['verified_reviews'].iloc[0]","7ff59a0f":"data[data['length'] == 150]['verified_reviews'].iloc[0]","269f4323":"plt.rcParams['figure.figsize'] = (15, 9)\nplt.style.use('fivethirtyeight')\n\nsns.boxenplot(data['variation'], data['rating'], palette = 'spring')\nplt.title(\"Variation vs Ratings\")\nplt.xticks(rotation = 90)\nplt.show()","fe058a79":"plt.rcParams['figure.figsize'] = (15, 9)\nplt.style.use('fivethirtyeight')\n\nsns.swarmplot(data['variation'], data['length'], palette = 'deep')\nplt.title(\"Variation vs Length of Ratings\")\nplt.xticks(rotation = 90)\nplt.show()","3d36cec3":"import warnings\nwarnings.filterwarnings('ignore')\n\nplt.rcParams['figure.figsize'] = (12, 7)\nplt.style.use('fivethirtyeight')\n\nsns.violinplot(data['feedback'], data['rating'], palette = 'cool')\nplt.title(\"feedback wise Mean Ratings\")\nplt.show()","48c0a490":"import warnings\nwarnings.filterwarnings('ignore')\n\nplt.rcParams['figure.figsize'] = (12, 7)\nplt.style.use('fivethirtyeight')\n\nsns.boxplot(data['rating'], data['length'], palette = 'Blues')\nplt.title(\"Length vs Ratings\")\nplt.show()","256029b0":"from sklearn.feature_extraction.text import CountVectorizer\n\n\ncv = CountVectorizer(stop_words = 'english')\nwords = cv.fit_transform(data.verified_reviews)\nsum_words = words.sum(axis=0)\n\n\nwords_freq = [(word, sum_words[0, idx]) for word, idx in cv.vocabulary_.items()]\nwords_freq = sorted(words_freq, key = lambda x: x[1], reverse = True)\nfrequency = pd.DataFrame(words_freq, columns=['word', 'freq'])\n\nplt.style.use('fivethirtyeight')\ncolor = plt.cm.ocean(np.linspace(0, 1, 20))\nfrequency.head(20).plot(x='word', y='freq', kind='bar', figsize=(15, 6), color = color)\nplt.title(\"Most Frequently Occuring Words - Top 20\")\nplt.show()","94eb12fb":"from wordcloud import WordCloud\n\nwordcloud = WordCloud(background_color = 'lightcyan', width = 2000, height = 2000).generate_from_frequencies(dict(words_freq))\n\nplt.style.use('fivethirtyeight')\nplt.figure(figsize=(10, 10))\nplt.axis('off')\nplt.imshow(wordcloud)\nplt.title(\"Vocabulary from Reviews\", fontsize = 20)\nplt.show()","a99e7240":"import warnings\nwarnings.filterwarnings('ignore')\n\nplt.rcParams['figure.figsize'] = (12, 7)\nplt.style.use('fivethirtyeight')\n\nsns.stripplot(data['feedback'], data['length'], palette = 'Reds')\nplt.title(\"Feedback vs Length\")\nplt.show()","96418b3a":"trace = go.Scatter3d(\n    x = data['length'],\n    y = data['rating'],\n    z = data['variation'],\n    name = 'Amazon Alexa',\n    mode='markers',\n    marker=dict(\n        size=10,\n        color = data['rating'],\n        colorscale = 'Viridis',\n    )\n)\ndf = [trace]\n\nlayout = go.Layout(\n    title = 'Length vs Variation vs Ratings',\n    margin=dict(\n        l=0,\n        r=0,\n        b=0,\n        t=0  \n    )\n    \n)\nfig = go.Figure(data = df, layout = \n                layout)\niplot(fig)","8061fd49":"import spacy\nnlp = spacy.load('en')\n\ndef explain_text_entities(text):\n    doc = nlp(text)\n    for ent in doc.ents:\n        print(f'Entity: {ent}, Label: {ent.label_}, {spacy.explain(ent.label_)}')\n        \nfor i in range(15, 50):\n    one_sentence = data['verified_reviews'][i]\n    doc = nlp(one_sentence)\n    spacy.displacy.render(doc, style='ent',jupyter=True)\n","2f75f9ca":"# cleaning the texts\n# importing the libraries for Natural Language Processing\n\nimport re\nimport nltk\nnltk.download('stopwords')\nfrom nltk.corpus import stopwords\nfrom nltk.stem.porter import PorterStemmer\n","6591236e":"\ncorpus = []\n\nfor i in range(0, 3150):\n    review = re.sub('[^a-zA-Z]', ' ', data['verified_reviews'][i])\n    review = review.lower()\n    review = review.split()\n    ps = PorterStemmer()\n    review = [ps.stem(word) for word in review if not word in set(stopwords.words('english'))]\n    review = ' '.join(review)\n    corpus.append(review)\n ","98da3180":"# creating bag of words\n\nfrom sklearn.feature_extraction.text import TfidfVectorizer\n\ncv = CountVectorizer(max_features = 2500)\n\nx = cv.fit_transform(corpus).toarray()\ny = data.iloc[:, 4].values\n\nprint(x.shape)\nprint(y.shape)","7b9b2ef0":"from sklearn.model_selection import train_test_split\n\nx_train, x_test, y_train, y_test = train_test_split(x, y, test_size = 0.3, random_state = 15)\n\nprint(x_train.shape)\nprint(y_train.shape)\nprint(x_test.shape)\nprint(y_test.shape)","2510e9b8":"from sklearn.preprocessing import MinMaxScaler\n\nmm = MinMaxScaler()\n\nx_train = mm.fit_transform(x_train)\nx_test = mm.transform(x_test)\n","a8219227":"from sklearn.ensemble import RandomForestClassifier\nfrom sklearn.metrics import confusion_matrix\n\nmodel = RandomForestClassifier()\nmodel.fit(x_train, y_train)\n\ny_pred = model.predict(x_test)\n\nprint(\"Training Accuracy :\", model.score(x_train, y_train))\nprint(\"Testing Accuracy :\", model.score(x_test, y_test))\n\ncm = confusion_matrix(y_test, y_pred)\nprint(cm)\n","d3f62ddd":"# applying k fold cross validation\n\nfrom sklearn.model_selection import cross_val_score\naccuracies = cross_val_score(estimator = model, X = x_train, y = y_train, cv = 10)\n\nprint(\"Accuracy :\", accuracies.mean())\nprint(\"Standard Variance :\", accuracies.std())","3ece537c":"\nparams = {\n    'bootstrap': [True],\n    'max_depth': [80, 100],\n    'min_samples_split': [8, 12],\n    'n_estimators': [100, 300]\n}\n","ec89dcbe":"# applying grid search with stratified folds\n\nfrom sklearn.model_selection import GridSearchCV\nfrom sklearn.model_selection import StratifiedKFold\n\ncv_object = StratifiedKFold(n_splits = 2)\n\ngrid = GridSearchCV(estimator = model, param_grid = params, cv = cv_object, verbose = 0, return_train_score = True)\ngrid.fit(x_train, y_train.ravel())","1be9227e":"print(\"Best Parameter Combination : {}\".format(grid.best_params_))","5426b62f":"\nprint(\"Mean Cross Validation Accuracy - Train Set : {}\".format(grid.cv_results_['mean_train_score'].mean()*100))\nprint(\"Mean Cross Validation Accuracy - Validation Set : {}\".format(grid.cv_results_['mean_test_score'].mean()*100))\n\nfrom sklearn.metrics import accuracy_score\nprint(\"Accuracy Score for Test Set :\", accuracy_score(y_test, y_pred))","7f886401":"**Reading the data**","5398bdb3":"<img src=\"https:\/\/theintercept.imgix.net\/wp-uploads\/sites\/1\/2018\/11\/Intercept_Echo_v2-3.5MB-2-1542062294.gif\" width=\"500px\">","84833534":"**Describing the data according to the feedback**","2f03c0e1":"## Data Visualizations","5352f0a9":"> The above Bivariate plot shows a plot between Rating and Length, We would like to that how much a user is gonna write if he\/she is going to give a low rating or a high rating to the product.\n>> We can see that most of the people who gave 5 star rating to Alexa wrote a very small review in comparison to the people who did not give alexa a 5 star rating. But, the longest reviews are written for the 5 star ratings only.\n>> The people who gave alexa, a low rating such as 1 or 2 star rating did not consider writing a longer review maybe because they do not like the product.","bfe060ea":"## Reviews Analysis using NLP","9c138dcb":"> Here again we are going to analyze the Pie Chart representing the Distribution of feedback for Amazon Alexa which says that around 92% people gave a positive feedback to Amazon Alexa and only 8% people gave negative feedback to Amazon Alexa. This Suggests that Amazon Alexa is a popular product amongst so many people and only few people did not like it for some unforeseeable factors.","4a722c45":"## Spacy","ac0ab57d":"**Describing the data according to the ratings**","59eaf33b":"**Random Forest**","ccb6857f":"**Let's Check some of the reviews according to thier lengths**","102ca457":"<img src=\"https:\/\/media1.tenor.com\/images\/3501e9f0ed6f785e3de54ba51e606b00\/tenor.gif?itemid=8981276\" width=\"500px\">","99a0584b":"<img src=\"https:\/\/ksassets.timeincuk.net\/wp\/uploads\/sites\/54\/2017\/09\/New_Echo_2-920x470.jpg\" width=\"700px\">","ac2f6fc6":"> The above Bar plot, plots the different Variatios of Amazon Alexa with their popularity or no. of counts. It is quite clear that Black Dot is the most popular variation of Amazon Alexa with more than 500 units out of 3150 samples, which is really good.\n>> Charcoal Fabric and Configuration: Fire TV Stick are also good and very much popular after Black dot.\n>> Whereas Oak Fish and Walnut Finish are very Unpopular with less than 10 entries.","21ec636c":"## Modelling","146cfaf1":"**Describing the data according to the Length of the reviews**","9ad25131":"> The above Distribution Plot, shows a distribution of Length of the Reviews written by the people. This is to show on an average what is the length of the reviews written by the people for amazon alexa. Most of the Reviews are so short that is only One or Two words longer. We can see that most people write reviwes that is 5-20 words longer.\n>> Very few people write longer reviews such as 70-80 words.","45021adc":"**Importing some Basic Libraries**","e25e4174":"> Plotting a wordscloud for the Words to see all the words, The Larger the words the larger is the frequency for that word. ","735d88d7":"### Ratings vs Length vs Variation","0301aa94":"> The above Bi-variate plot, shows a violin plot between Feedback and Rating, We can easily conclude that the Products which have 0 feedback have lower ratings ranging from 1 to 2 (more probably Rating is 1) whereas for the products having a feedback value 1, has ratings ranging from 3 to 5(more probably rating is 5).","ede0f168":">> The above Bivariate plot shows swarmplot between Variation in Amazon Alexa and Length of the Reviews. We would like to see for which of the model variations of Amaozn Alexa people have written the longest reviews.\n>> By looking at the graph, we can easily spot that the longest review was written for Black Plus.\n>> then Black Spot has two long reviews and Black, and Black plus variation also has a very long review.\n>> we might conclude that the longest reviews are all written for the Black-type variations in Amazon Alexa.","cc9b25bb":"> The above Bivariate plot, which plots Variation and ratings to check which of the Variation of Amazon Alexa has been perfoeming best in terms of ratings.\n>> Walnut finish and Oak Finish have very high ratings, the ratings rangee from 4.5 to 5 which is really impressive, These variation are rare and have high reviews.\n>>> White and Black Variations for Amazon Alexa have low ratings also, as it is the most common variation available for the product that is the reason, why it has ratings varying from 0 to 5.","02229797":"> By looking at the above pie chart, we can infer that most of the Ratings are good for alexa. Around 72.6% people have given Alexa 5 Star rating, which is very good. 14.4% people have given Alexa a 4 Star Rating, which is also good. that means 72.6+14.4 = 87% people have given alexa good rating.\n>> 4.38% people have given alexa an average rating of 3 stars.\n>> 3.05% people did not like alexa and chose to give only 2 star ratings to alexa whereas 5.11% people hated alexa and decided to give alexa only 1 Star Rating. This a total of 3.05+5.11 = 8.16% people did not like alexa.","bc779d18":"> The Above Bar plot represents the most frequnt words in the reviews so that we can get a rough idea about the reviews and what people think of the product.\n>> We can see that love is the most frequent word in the word suggesting that most of the people absolutely love alexa. Other frequent words that suggest alexa is doing well are amazing, like, great, works etc.\n"}}