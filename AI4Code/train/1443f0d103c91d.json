{"cell_type":{"baaef8fc":"code","fe7d2be5":"code","34052d05":"code","a16a3a56":"code","361e003c":"code","3ee98e45":"code","249cd712":"code","6b7dec17":"code","9b870a10":"code","b0ef8248":"code","48e3ff12":"code","1fb230ea":"code","db72d6ff":"code","d0da0790":"code","63b2f3aa":"code","83f453f2":"code","7b125029":"code","25bfcb8e":"code","dcf8d2e0":"code","3328e5c1":"code","46b8826e":"code","98d39dd4":"code","9e070b58":"code","98f9433f":"code","6345ad13":"code","b9eaa34c":"code","6c145a4a":"code","1b7ee445":"code","dcd559ba":"code","2d8d87dc":"code","a880c3fa":"code","7d096521":"code","d01a7fc3":"code","e09c6f69":"markdown","ae8f2b59":"markdown","d25cee53":"markdown","86fd63b2":"markdown","50a78f4d":"markdown","46a3f8d5":"markdown","98a1eca2":"markdown","f676b71c":"markdown","a3dd0ba8":"markdown","0f614cb9":"markdown","1dd39757":"markdown","1fdb26ff":"markdown","7f43b5e4":"markdown","a2b7969e":"markdown","28e4caf0":"markdown","db9405bf":"markdown","eb0d2708":"markdown","793d9bb7":"markdown"},"source":{"baaef8fc":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","fe7d2be5":"# Signatur einer Methode\n# ? vor Methode\n?pd.read_csv","34052d05":"help(pd.read_csv)","a16a3a56":"wines = pd.read_csv(\"..\/input\/wine-reviews\/winemag-data-130k-v2.csv\", index_col=0)","361e003c":"wines.shape","3ee98e45":"wines.columns","249cd712":"wines.head()","6b7dec17":"wines.head(2)","9b870a10":"wines['country']","b0ef8248":"wines[['country', 'price']]","48e3ff12":"wines.head(2)","1fb230ea":"country_prices = wines[['country', 'price']]","db72d6ff":"country_prices.head()","d0da0790":"wines['country'].unique()","63b2f3aa":"wines['country'].value_counts()","83f453f2":"wines['country'].value_counts().plot(kind='bar', figsize=(10,7))","7b125029":"?country_counts.plot","25bfcb8e":"wines['price'].max()","dcf8d2e0":"wines['price'].min()","3328e5c1":"wines['price'].mean()","46b8826e":"wines['price'].median()","98d39dd4":"maxprice = wines['price'].max()","9e070b58":"maxprice","98f9433f":"wines[wines['country'] == 'Germany']","6345ad13":"wines['price'].max()","b9eaa34c":"maxprice = wines['price'].max()","6c145a4a":"wines[wines['price']==maxprice]","1b7ee445":"wines[wines['price']==wines['price'].max()]","dcd559ba":"wines.info()","2d8d87dc":"wines['price_string'] = wines['price'].astype('object')","a880c3fa":"wines.info()","7d096521":"wines['points_per_dollar'] =  wines['points'] \/ wines['price']","d01a7fc3":"wines","e09c6f69":"# \u00c4ndern eines Datentyps eine Spalte\n\n* astype","ae8f2b59":"# Spalten ausw\u00e4hlen\n\n## Eine Spalte ausw\u00e4hlen","d25cee53":"# Laden von Daten\n* pd.read_csv(), pd.read_excel(), ..., pd.read_**\n* Pfad zur Datei\n* index_col: Spalter die wir als Index nutzen wollen (optional)","86fd63b2":"## Mehrere Spalten ausw\u00e4hlen","50a78f4d":"# Verschiedene Werte z\u00e4hlen (value_counts)","46a3f8d5":"# Verschiedene Werte (unique)","98a1eca2":"# Erstellen einer neuen Spalte durch Berechnung\n\n* Zuweisen zu neuen Spaltennamen\n* Wird Zeilenweise berechnet","f676b71c":"# Visualisieren\n\n* Method Chaining. Aneinanderreihen von Methoden\n* plot: Diagramm erstellen \n    * kind: Typ des Diagramms","a3dd0ba8":"# Statistiken einer Spalte\n\n* Spalte ausw\u00e4hlen: in eckigen Klammer Spaltenname\n* min, max, sum, ... Methode aufrufen","0f614cb9":"# Informationationen \u00fcber den DataFrame\n\n## Dimension des DataFrame\n\n* shape Attribute (!) ","1dd39757":"## Welcher Wein hatte den h\u00f6chsten Preis?","1fdb26ff":"# Infos \u00fcber das DataFrame\n\n* info(): List von Spalten mit Datentyp","7f43b5e4":"## Spalten\u00fcberschriften\n\n* columns Attribute (!)","a2b7969e":"# Dokumentation zu einer Methode","28e4caf0":"# Zeilen Filtern\n* Vergleich einer Spalte mit einem Wert ==> Ergibt Serie von Wahrheitswerten\n* DataFrame mit eckigen Klammern und Vergleich\n\n`df[df['Spaltenname'] == 'Wert']`","db9405bf":"# Ersten 5 Zeilen ausgeben\n\n* head()","eb0d2708":"Filterung ist nicht permanent","793d9bb7":"Speicherung der Ergebnisse in eine neue Variable"}}