{"cell_type":{"7e4479d6":"code","fdd74f06":"code","6d9fa0b4":"code","b8ea6a16":"code","087da89d":"code","d67746f2":"code","6e3b94c1":"code","ed2a09d7":"code","42f60745":"code","3850fc86":"code","6ffa6d1c":"code","11e138c6":"code","77f7424b":"code","ef227406":"code","794fffdd":"code","a4c8f780":"code","96e3dcd1":"code","c1ab51a2":"markdown","9d085553":"markdown","4457c28a":"markdown","d0a71a34":"markdown","e4b67e8a":"markdown","a2de008e":"markdown"},"source":{"7e4479d6":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nfrom sklearn.cluster import KMeans, AgglomerativeClustering, DBSCAN\n\nfrom sklearn.decomposition import PCA\nimport matplotlib.pyplot as plt\nfrom sklearn.metrics import silhouette_score\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory\n\nimport os\nprint(os.listdir(\"..\/input\"))\n\n# Any results you write to the current directory are saved as output.","fdd74f06":"pokemon = pd.read_csv(\"..\/input\/pokemon_alopez247.csv\")\npokemon.head()","6d9fa0b4":"# Unnecessary columns\n# Number and Name are just identifiers\n# Total is a aggregation of others columns\nclean_pokemon = pokemon.drop(columns=['Number', 'Name', 'Total'])","b8ea6a16":"# missing values\nnull_columns = clean_pokemon.columns[clean_pokemon.isnull().any()]\nnull_columns","087da89d":"# agregate Pr_Male and hasGender by a new column named gender\n# gender = 0 for female, 1 for male and 2 for other\nint2gender = {\n    \"0\": \"Female\",\n    \"1\": \"Male\",\n    \"2\": \"Other\",\n}\ngender = np.zeros(clean_pokemon.shape[0])\ngender[clean_pokemon.Pr_Male.isnull()] = 2\ngender[clean_pokemon.Pr_Male > 0.5] = 1\ngender[clean_pokemon.Pr_Male <= 0.5 ] = 0\nclean_pokemon['Gender'] = gender\npokemon['Gender'] = gender\nprint(clean_pokemon[clean_pokemon.Pr_Male.isnull() & clean_pokemon.hasGender==True].shape[0])\nclean_pokemon.drop(columns=['Pr_Male', 'hasGender'], inplace=True)\n# we drop columns Type_2 and Egg_Group_2 for the moment\nclean_pokemon.drop(columns=[\"Type_2\", \"Egg_Group_2\"], inplace=True)","d67746f2":"for c in clean_pokemon.columns:\n    if str(clean_pokemon[c].dtype).startswith(\"int\") or str(clean_pokemon[c].dtype).startswith(\"float\") :\n        mini, maxi = clean_pokemon[c].min(), clean_pokemon[c].max()\n        clean_pokemon[c] = (clean_pokemon[c] - mini) \/ (maxi - mini)\nclean_pokemon.head()","6e3b94c1":"clean_pokemon_dummies = pd.get_dummies(clean_pokemon, columns=[\"Type_1\", \"isLegendary\", \"Color\", \"Egg_Group_1\", \"hasMegaEvolution\", \"Body_Style\", \"Gender\"])","ed2a09d7":"clean_pokemon.describe()","42f60745":"data = clean_pokemon_dummies.as_matrix()","3850fc86":"pca = PCA(n_components=2).fit(data)\ndata2d = pca.transform(data)","6ffa6d1c":"plt.figure(figsize=(16, 8))\nscores, n_clusters, preds = [], [], []\nfor i in range(2, 10):\n    kmean = KMeans(n_clusters = i).fit(data)\n    scores.append(kmean.score(data))\n    n_clusters.append(i)\n    pred = kmean.predict(data)\n    preds.append(pred)\n    plt.subplot(2, 4, i - 1)\n    plt.title(f\"{i} clusters silhoute={np.round(silhouette_score(data, pred), decimals=5)}\")\n    plt.scatter(data2d[:, 0], data2d[:, 1], c=pred)\n    \n    centroids = kmean.cluster_centers_\n    centroids2d = pca.transform(centroids)\n    plt.plot(centroids2d[:, 0], centroids2d[:, 1], 'b+', markersize=15)","11e138c6":"print(\"<< class 0 >>\")\nprint(clean_pokemon[preds[0] == 0]['isLegendary'].value_counts())\nprint(\"<< class 1 >>\")\nprint(clean_pokemon[preds[0] == 1]['isLegendary'].value_counts(), end=\"\\n\")","77f7424b":"print(\"<< class 0 >>\")\nprint(clean_pokemon[preds[0] == 0]['hasMegaEvolution'].value_counts())\nprint(\"<< class 1 >>\")\nprint(clean_pokemon[preds[0] == 1]['hasMegaEvolution'].value_counts(), end=\"\\n\")","ef227406":"print(int2gender)\nprint(\"<< class 0 >>\")\nprint(pokemon[preds[1] == 0]['Gender'].value_counts())\nprint(\"<< class 1 >>\")\nprint(pokemon[preds[1] == 1]['Gender'].value_counts(), end=\"\\n\")\nprint(\"<< class 2 >>\")\nprint(pokemon[preds[1] == 2]['Gender'].value_counts(), end=\"\\n\")","794fffdd":"plt.plot(n_clusters, -np.array(scores))\nplt.xlabel(\"Number of clusters\")\nplt.ylabel(\"SSE\")","a4c8f780":"plt.figure(figsize=(16, 8))\nscores, n_clusters, preds = [], [], []\nfor i in range(2, 10):\n    agglo = AgglomerativeClustering(n_clusters = i)\n#     scores.append(agglo.score(data))\n    n_clusters.append(i)\n    pred = agglo.fit_predict(data)\n    preds.append(pred)\n    plt.subplot(2, 4, i - 1)\n    plt.title(f\"Agglo - {i} clusters silhoute={np.round(silhouette_score(data, pred), decimals=5)}\")\n    plt.scatter(data2d[:, 0], data2d[:, 1], c=pred)","96e3dcd1":"plt.figure(figsize=(16, 8))\nfor i in range(10, 90, 10):\n    dbscan = DBSCAN(eps=i, min_samples=5)\n    pred = dbscan.fit_predict(data)\n    plt.subplot(2, 4, i\/10)\n    plt.title(f\"DBSCAN - {i} eps\")\n    plt.scatter(data2d[:, 0], data2d[:, 1], c=pred)","c1ab51a2":"- 4h\n- Dataset Pokemon (Pokemon for Data Mining and Machine Learning\n- Choisir trois algo de clustering\n- Analyser les resultats\n- Rapport \u00e0 d\u00e9poser  qvqnt 12h30 (pdf)","9d085553":"Il semble que les pokemon soient group\u00e9s par leur genre. 502 sont de sexe feminin, 117 de sexe masculin et 72 n'ont pas de sexe. Les autres pokemon n'ont pas \u00e9t\u00e9 bien class\u00e9s","4457c28a":"des 46 pokemon legendaires pr\u00e9sents, il y a qu'un seul qui soit dans la classe 0, les autres sont dans la classe 1. Cependant il y a 172 sur 503 pokemon non l\u00e9gendaires qui sont vus comme l\u00e9gendaires. ","d0a71a34":"**Preprocessing**\n\n1 - remove unusefull columns\n\n2 - Handle missing values ","e4b67e8a":"1. **L\u00e9gendaire et non l\u00e9gendaire**","a2de008e":"**Premi\u00e8re Hypoth\u00e8se: deux clusters**\n\nIl pourrait y avoir deux clusters:\n1. L\u00e9gendaire\n1. mega \u00e9volution\n1. sexe"}}