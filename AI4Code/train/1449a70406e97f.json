{"cell_type":{"d5b53c36":"code","1e05d454":"code","25ea5720":"code","170846e0":"code","dd09dd56":"code","d64115fc":"code","ad14b261":"code","fdb73376":"code","f4fec17f":"code","1b81292d":"code","f1a0c692":"code","b576e179":"code","231c9c3b":"markdown","946d0340":"markdown","478bf3b0":"markdown","20379c7c":"markdown"},"source":{"d5b53c36":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","1e05d454":"sam_sub = pd.read_csv('..\/input\/jigsaw-toxic-severity-rating\/sample_submission.csv')\nval_sub = pd.read_csv('..\/input\/jigsaw-toxic-severity-rating\/validation_data.csv')\nscore_file = pd.read_csv('..\/input\/jigsaw-toxic-severity-rating\/comments_to_score.csv')","25ea5720":"print('*'*40)\nprint(\"Sample Submission File\")\nprint('*'*40)\nprint(sam_sub.head())\nprint(sam_sub.describe())\nprint(sam_sub.columns)\nprint(sam_sub.dtypes)\nprint(sam_sub.shape)\n\nprint('*'*40)\nprint(\"Validation Submission File\")\nprint('*'*40)\nprint(val_sub.head())\nprint(val_sub.describe())\nprint(val_sub.columns)\nprint(val_sub.dtypes)\nprint(val_sub.shape)\n\nprint('*'*40)\nprint(\"Score File\")\nprint('*'*40)\nprint(score_file.head())\nprint(score_file.describe())\nprint(score_file.columns)\nprint(score_file.dtypes)\nprint(score_file.shape)\nprint('*'*40)","170846e0":"import nltk\nimport pycountry\nfrom nltk.stem import SnowballStemmer\n\n'''\ndef get_language(text):\n    tc = nltk.classify.textcat.TextCat() \n    guess = tc.guess_language(text)\n    try:\n        guess_name = pycountry.languages.get(alpha_3=guess).name\n    except:\n        guess_name='None'\n    return guess_name\n'''","dd09dd56":"import plotly.express as px\nimport matplotlib.pyplot as plt\nimport matplotlib.patches as patches\n'''\nscore_file[\"lang\"] = score_file[\"text\"].apply(get_language)\n'''","d64115fc":"'''\nlang_list = sorted(list(set(score_file[\"lang\"])))\ncounts = [list(score_file[\"lang\"]).count(cont) for cont in lang_list]\ndf = pd.DataFrame(np.transpose([lang_list, counts]))\ndf.columns = [\"Language\", \"Count\"]\ndf[\"Count\"] = df[\"Count\"].apply(int)\nfig = px.barh(df, y=\"Language\", x=\"Count\", title=\"Language of comments\", color=\"Language\", text=\"Count\")\n'''","ad14b261":"from nltk.sentiment.vader import SentimentIntensityAnalyzer\nfrom nltk.sentiment.util import *\n\nfrom nltk import tokenize\n\ntweets=score_file\n\nsid = SentimentIntensityAnalyzer()\n\ntweets['sentiment_compound_polarity']=tweets.text.apply(lambda x:sid.polarity_scores(x)['compound'])\ntweets['sentiment_neutral']=tweets.text.apply(lambda x:sid.polarity_scores(x)['neu'])\ntweets['sentiment_negative']=tweets.text.apply(lambda x:sid.polarity_scores(x)['neg'])\ntweets['sentiment_pos']=tweets.text.apply(lambda x:sid.polarity_scores(x)['pos'])\ntweets['sentiment_type']=''\ntweets.loc[tweets.sentiment_compound_polarity>0,'sentiment_type']='POSITIVE'\ntweets.loc[tweets.sentiment_compound_polarity==0,'sentiment_type']='NEUTRAL'\ntweets.loc[tweets.sentiment_compound_polarity<0,'sentiment_type']='NEGATIVE'\ntweets.head()","fdb73376":"\ntry:\n    from pywaffle import Waffle\nexcept:\n    !pip install pywaffle\n    from pywaffle import Waffle\n    \nimport random\n\n\nsentiment_type = tweets[\"sentiment_type\"].value_counts()\n\nfig = plt.figure(\n    FigureClass=Waffle,\n    rows=4,\n    columns=25,\n    values=sentiment_type,\n    title={'label': 'Sentiment Type', 'loc': 'center'},\n    labels=[\"{}({})\".format(a, b) for a, b in zip(sentiment_type.index, sentiment_type) ],\n    colors=[\"#feb308\", \"#070d0d\", \"#9b5fc0\"],\n    icons=['sun', 'cloud-showers-heavy', 'snowflake'],\n    legend={'loc': 'lower left', 'bbox_to_anchor': (0, -0.4), 'ncol': len(tweets.groupby(\"sentiment_type\")), 'framealpha': 0.2},\n    font_size=40, \n    figsize=(20, 8),  \n    icon_legend=True\n)\n","f4fec17f":"tweets.sentiment_type.value_counts().plot(kind='bar',title=\"sentiment analysis\")","1b81292d":"sam_sub['score'] = tweets['sentiment_compound_polarity']","f1a0c692":"print('*'*40)\nprint(\"Sample Submission File\")\nprint('*'*40)\nprint(sam_sub.head())\nprint(sam_sub.describe())\nprint(sam_sub.columns)\nprint(sam_sub.dtypes)\nprint(sam_sub.shape)","b576e179":"sam_sub.to_csv('submission.csv', index=False)","231c9c3b":"# **<span style=\"color:#fe46a5;\">Work In Progress... More to come<\/span>**\n","946d0340":"# **<span style=\"color:limegreen;\">Basic Sentiment Analysis Using NLTK<\/span>**\n","478bf3b0":"## **<span style=\"color:crimson;\">Competition Info<\/span>**","20379c7c":"## **<span style=\"color:limegreen;\">Some Basic EDA<\/span>**\n"}}