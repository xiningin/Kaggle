{"cell_type":{"0076f8ea":"code","9a6a2248":"code","5bb0b6f5":"code","d0706f96":"code","d7849668":"code","14315aaf":"code","15f72d0f":"code","ecefec86":"code","820fcd2e":"code","d4d51c0f":"code","e0297d0b":"code","d39a7395":"code","2ea61d73":"markdown","887901e9":"markdown","c28ddd41":"markdown","ba768d72":"markdown","e4358ea0":"markdown","3f100a08":"markdown","8e219d8b":"markdown"},"source":{"0076f8ea":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","9a6a2248":"import pandas as pd\nimport numpy as np\nimport os\n\nimport matplotlib.pyplot as plt  \nimport seaborn as sns  ","5bb0b6f5":"BASE_DIR = '\/kaggle\/input\/riiid-test-answer-prediction\/'\n","d0706f96":"%%time\n\n\ntrain_dtypes_dict = {\n    \"row_id\": \"int64\",\n    \"timestamp\": \"int64\",\n    \"user_id\": \"int32\",\n    \"content_id\": \"int16\",\n    \"content_type_id\": \"int8\",\n    \"task_container_id\": \"int16\",\n    \"user_answer\": \"int8\",\n    \"answered_correctly\": \"int8\",\n    \"prior_question_elapsed_time\": \"float32\", \n    \"prior_question_had_explanation\": \"boolean\"\n}\n\ndata = pd.read_csv(os.path.join(BASE_DIR, \"train.csv\"),\n                         usecols = train_dtypes_dict.keys(),\n                         dtype=train_dtypes_dict,\n                        )\n\nprint(\"Train size:\", data.shape)","d7849668":"data.sample(5)","14315aaf":"questions = pd.read_csv(os.path.join(BASE_DIR, \"questions.csv\"))\nprint(\"Questions size:\", questions.shape)\nquestions.head(5)","15f72d0f":"# how many questions in this bundle_id\nquestions.groupby(['bundle_id']).agg(\"count\")['question_id'].value_counts()","ecefec86":"lectures = pd.read_csv(os.path.join(BASE_DIR, \"lectures.csv\"))\nprint(\"Lectures size:\", lectures.shape)\nlectures","820fcd2e":"lectures.info()","d4d51c0f":"# different part is seperate \ntmp = lectures[['part','tag']].groupby(['part']).groups\n# union number between different part?\nfrom itertools import combinations\nfor a, b in combinations(tmp.keys(), 2):\n    print(\"left key: {}, right key: {}, union number: {}\".format(a,b,len([x for x in tmp[a].tolist() if x in tmp[b].tolist()])) )","e0297d0b":"# Could you link the part to the specific task?\nplt.figure(figsize=(10,6))\nax = sns.countplot(x=\"part\", hue=\"type_of\", data=lectures)\nfor p in ax.patches:\n        ax.annotate('{:.0f}'.format(p.get_height()), (p.get_x()+0.02, p.get_height()+1))\n","d39a7395":"test = pd.read_csv(os.path.join(BASE_DIR, \"example_test.csv\"))\nprint(\"Questions size:\", test.shape)\ntest.head(10)                   ","2ea61d73":"## example_test_rows.csv","887901e9":"## \u6570\u636e\u8bf4\u660e Features in Files\n\n\n\n\n### train.csv\n\n|Name|UniqueOrNot|Notes|ProcessAdvice|\n|:--:|:--:|:--:|:--:|\n|row_id|Unique|Suppose it is the index|ignore|\n|timestamp|Not|the time in **$\\color{red}{milliseconds}$** between this user interaction and the first event completion from that user. \u5bf9\u4e8e\u4e00\u4e2a\u7528\u6237\u6765\u8bf4\u7b2c\u4e00\u4e2a\u5b8c\u6210\u7684\u9898\u76ee\u4e3a0\uff0c\u4ece\u7b2c\u4e00\u4e2a\u9898\u76ee\u5f00\u59cb\u8ba1\u7b97\u5230\u5f53\u524d\u9898\u76ee\u7528\u65f6|sort value & maybe also indicate how hard is this problem|\n|user_id|Not|user id||\n|content_id|Not|[i'm not really understanding it.] ID code for the user interaction||\n|content_type_id|[0, 1]| 0 if the event was a question being posed to the user, 1 if the event was the user watching a lecture. \u8bb2\u5ea70-\u505a\u98981||\n|task_container_id|Not|Id code for the batch of questions or lectures. For example, a user might see three questions in a row before seeing the explanations for any of them. Those three would all share a task_container_id.|\n|user_answer|[-1,0,1,2,3]|the user's answer to the question, if any. Read -1 as null, for lectures. |Indicates whether the answer was guessed|\n|answered_correctly|[-1, 0, 1]|-1 refers lectures|\n|prior_question_elapsed_time||The average time in **$\\color{red}{milliseconds}$** it took a user to answer each question in the previous **$\\color{red}{question bundle}$** , ignoring any lectures in between. Is null for a user's first question bundle or lecture. Note that the time is the average time a user took to solve each question in the previous bundle.\u65f6\u95f4\u662f\u591a\u4e2a\u9898\u76ee(\u5728\u8fd9\u4e2a\u9898\u76ee\u524d\u9762\u7684\u9898\u76ee(\u540c\u4e00\u4e2abundle\u5185\u7684)\u7684\u5e73\u5747\u65f6\u95f4\uff0c\u5982\u679c\u662f\u7b2c\u4e00\u4e2a\u9898\u76ee\uff0c\u65f6\u95f4\u4e3a\u7a7a\uff0c\u7528\u6237\u56de\u7b54\u524d\u4e00\u4e2a\u95ee\u9898\u5305\u4e2d\u7684\u6bcf\u4e2a\u95ee\u9898\u6240\u82b1\u8d39\u7684\u5e73\u5747\u65f6\u95f4(\u4ee5\u6beb\u79d2\u4e3a\u5355\u4f4d)|\n|prior_question_had_explanation|bool| Whether or not the user saw an explanation and the correct response(s) after answering the previous question bundle, ignoring any lectures in between. The value is shared across a single question bundle, and is null for a user's first question bundle or lecture. Typically the first several questions a user sees were part of an onboarding diagnostic test where they did not get any feedback. \u5bf9\u4e00\u4e2a\u7528\u6237\u6765\u8bf4\u4e00\u822c\u524d\u51e0\u4e2a\u4e3a\u7a7a\u56e0\u4e3a\u662f\u6d4b\u8bd5|\n\n\n\n\n\n\n### questions.csv\n\n|Name|UniqueOrNot|Notes|ProcessAdvice|Na_value|\n|:--:|:--:|:--:|:--:|:--:|\n|question_id|Unqiue|foreign key for the train\/test **$\\color{red}{content\\_id}$** column, when the content type is question (0).\u4e0e\u6570\u636e\u96c6\u4e2d\u7684 **$\\color{red}{content\\_id}$** \u5173\u8054\uff08content_id=0\u7684\u65f6\u5019\uff09||0|\n|bundle_id||code for which questions are served together. May connect with questions(like a passage has 3 sub-problems) \u53ef\u80fd\u548c\u9898\u578b\u76f8\u5173|Clues about the question type (people may have different perference to different types of questions): [pao\/This is TOEIC task](https:\/\/www.kaggle.com\/c\/riiid-test-answer-prediction\/discussion\/190191)|0|\n|correct_answer|[0, 1, 2, 3]|the answer to the question. Can be compared with the train **$\\color{red}{user\\_answer}$** column to check if the user was right.||0|\n|part|[1, 2, 3, 4, 5, 6, 7]|the relevant [section of the TOEIC test.](https:\/\/www.iibc-global.org\/english\/toeic\/test\/lr\/about\/format.html)|students' average levels of different part(also related with the format of the TOEIC task)|0|\n|tags|188 unique values|one or more detailed tag codes for the question. The meaning of the tags will not be provided, but these codes are sufficient for clustering the questions together.||**$\\color{red}{1}$**|\n\n\n\n\n\n### lectures.csv\n**Could you link the part to the specific task?**\n\n\n|Name|UniqueOrNot|Notes|ProcessAdvice|Na_value|\n|:--:|:--:|:--:|:--:|:--:|\n|lecture_id|unique|foreign key for the train\/test **$\\color{red}{content\\_id}$** column, when the content type is lecture (1).||0|\n|part|[1, 2, 3, 4, 5, 6, 7]|top level category code for the lecture.|TOEIC has 7 parts. |0|\n|tag|151 unique|one tag codes for the lecture. The meaning of the tags will not be provided, but these codes are sufficient for clustering the lectures together.|It seems that the tag is independent to the part|0|\n|type_of|['concept', 'intention', 'solving question', 'starter']| brief description of the core purpose of the lecture||0|\n\n\n\n\n\n\n\n### example_test_rows.csv\n\n\nprior_group_responses (string) provides all of the entries for previous group in a string representation of a list in the first row of the group. All other rows in each group are null. If you are using Python, you will likely want to call on the non-null rows. Some rows may be null, or empty lists.user_answereval\n\nprior_group_answers_correct (string) provides all the field for previous group, with the same format and caveats as . Some rows may be null, or empty lists.answered_correctlyprior_group_responses\n\n\n\nIt hard to understand, and I will try my best (T_T)\n\n","c28ddd41":"## question.csv","ba768d72":"# read file\nThere are many ways to read a big csv file in a short time, since read a big table is a difficult thing for pandas.\n\nexamples could be seen here [rohanrao\/tutorial-on-reading-large-datasets\/](https:\/\/www.kaggle.com\/rohanrao\/tutorial-on-reading-large-datasets\/)","e4358ea0":"## lectures.csv","3f100a08":"## train.csv","8e219d8b":"# EDA"}}