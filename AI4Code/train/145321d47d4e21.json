{"cell_type":{"1ab8ecd0":"code","0ed1d231":"code","014e2ba5":"code","031f778b":"code","3344803b":"code","9bf289e8":"code","e0873cd7":"code","9ef469f0":"code","64ba1bdd":"code","c5c6c92b":"code","25963a58":"code","dc8b5e3d":"code","18f21e8c":"code","d8fe2e7e":"code","df59e42a":"code","de8da666":"code","89246e9a":"code","fc3329b7":"code","2dd5edb8":"code","0079298b":"code","e2c31b3a":"markdown","a84288ba":"markdown","9aec6ac6":"markdown","62b10051":"markdown","8b69203d":"markdown","7b11f59a":"markdown","dc1ddde4":"markdown","e7ece533":"markdown","da12a1e8":"markdown","be094bd4":"markdown","21635b38":"markdown","40c5f709":"markdown","9c1ab5de":"markdown","f9507ae3":"markdown","38ffe6e7":"markdown"},"source":{"1ab8ecd0":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","0ed1d231":"import os \nimport numpy \n","014e2ba5":"os.mkdir(\".\/train_data\")\nos.mkdir(\".\/train_data\/images\")\nos.mkdir(\".\/train_data\/labels\")\nos.mkdir(\".\/train_data\/images\/train\")\nos.mkdir(\".\/train_data\/images\/val\")\nos.mkdir(\".\/train_data\/labels\/train\")\nos.mkdir(\".\/train_data\/labels\/val\")","031f778b":"import xml.etree.ElementTree as ET\nfrom xml.dom.minidom import parse\n\n\n\npath = \"..\/input\/face-mask-detection\/annotations\"\nclasses = {\"with_mask\":0,\"without_mask\":1,\"mask_weared_incorrect\":2}\n\nfor annotations in os.listdir(path):\n    \n    \n    dom = parse(os.path.join(path,annotations))\n    root = dom.documentElement\n    filename = \".txt\".join(root.getElementsByTagName(\"filename\")[0].childNodes[0].data.split(\".png\"))\n    \n    image_width = root.getElementsByTagName(\"width\")[0].childNodes[0].data\n    image_height = root.getElementsByTagName(\"height\")[0].childNodes[0].data\n    with open(\".\/train_data\/labels\/train\/\"+filename,\"w\") as r:\n        \n        for items in root.getElementsByTagName(\"object\") :\n            \n            name = items.getElementsByTagName(\"name\")[0].childNodes[0].data\n            xmin = items.getElementsByTagName(\"xmin\")[0].childNodes[0].data\n            ymin = items.getElementsByTagName(\"ymin\")[0].childNodes[0].data\n            xmax = items.getElementsByTagName(\"xmax\")[0].childNodes[0].data\n            ymax = items.getElementsByTagName(\"ymax\")[0].childNodes[0].data\n            x_center_norm = ((int(xmin)+int(xmax)) \/ 2 ) \/ int(image_width)\n            y_center_norm = ((int(ymin)+int(ymax))\/2) \/ int(image_height)\n            width_norm = ((int(xmax)-int(xmin))\/int(image_width))\n            height_norm = ((int(ymax)-int(ymin))\/int(image_height))\n            \n            r.write(str(classes[name]))\n            r.write(\" \")\n            r.write(str(x_center_norm))\n            r.write(\" \")\n            r.write(str(y_center_norm))\n            r.write(\" \")\n            r.write(str(width_norm))\n            r.write(\" \")\n            r.write(str(height_norm))\n            r.write(\"\\n\")\n            ","3344803b":"len(os.listdir(\".\/train_data\/labels\/train\/\")) == len(os.listdir(\"..\/input\/face-mask-detection\/images\"))","9bf289e8":"import shutil\npath = \"..\/input\/face-mask-detection\/images\"\nfor images in os.listdir(path):\n    image_path = os.path.join(path,images)\n    shutil.copy(image_path,\".\/train_data\/images\/train\/\"+images)","e0873cd7":"len(os.listdir(\".\/train_data\/images\/train\/\")) == len(os.listdir(\".\/train_data\/labels\/train\/\"))","9ef469f0":"from random import shuffle\nfrom glob import glob\nimport random\nimport shutil\n\nrandom.seed(42)\nfiles = glob(\".\/train_data\/images\/train\/*.png\")\nshuffle(files)\ntxt_train_path = \".\/train_data\/labels\/train\/\"\nimg_train_path = \".\/train_data\/images\/train\/\"\ntxt_val_path = \".\/train_data\/labels\/val\/\"\nimg_val_path = \".\/train_data\/images\/val\/\"\nfor i in files[:120]:\n    \n    filename = i.split(\"\/\")[-1]\n    shutil.move(txt_train_path+filename.replace(\".png\",\".txt\"),txt_val_path+filename.replace(\".png\",\".txt\"))\n    shutil.move(img_train_path+filename,img_val_path+filename)","64ba1bdd":"len(os.listdir(\".\/train_data\/labels\/val\/\")) == len(os.listdir(\".\/train_data\/images\/val\/\"))","c5c6c92b":"with open(\"\/kaggle\/working\/data.yaml\",\"w\") as f:\n    f.write(\"train: \")\n    f.write(\"\/kaggle\/working\/train_data\/images\/train\/\")\n    f.write(\"\\n\")\n    f.write(\"val: \")\n    f.write(\"\/kaggle\/working\/train_data\/images\/val\/\")\n    f.write(\"\\n\")\n    f.write(\"nc: \")\n    f.write(\" 3\")\n    f.write(\"\\n\")\n    f.write(\"names: \")\n    f.write(\" ['with_mask','without_mask','mask_weared_incorrect']\")\n    \n    ","25963a58":"with open(\"\/kaggle\/working\/data.yaml\",\"r\") as f:\n    print(f.read())","dc8b5e3d":"!git clone https:\/\/github.com\/ultralytics\/yolov5","18f21e8c":"%cd yolov5","d8fe2e7e":"!pip install -r requirements.txt","df59e42a":"!pip uninstall -q -y wandb ","de8da666":"!python train.py --img 640 --batch 32 --epochs 40 --data \/kaggle\/working\/data.yaml --weights yolov5s.pt --cache ","89246e9a":"# display detected images\nfrom IPython.display import Image\nImage('\/kaggle\/working\/yolov5\/runs\/train\/exp\/test_batch1_pred.jpg')","fc3329b7":"!wget https:\/\/www.ed.ac.uk\/files\/styles\/landscape_breakpoints_theme_uoe_mobile_1x\/public\/thumbnails\/image\/gettyimages-1215069129_jacoblund.png","2dd5edb8":"!python detect.py --source \"\/kaggle\/working\/yolov5\/gettyimages-1215069129_jacoblund.png\" --weights '\/kaggle\/working\/yolov5\/runs\/train\/exp\/weights\/best.pt'","0079298b":"Image(\"\/kaggle\/working\/yolov5\/runs\/detect\/exp\/gettyimages-1215069129_jacoblund.png\")","e2c31b3a":"# *Let's see our data.yaml file* ","a84288ba":"# *Copy images to train_data\/images\/train folder*\n","9aec6ac6":"# *Check if images are equal to labels*","62b10051":"# *Create data.yaml file that points to our dataset in a primitive way :)*","8b69203d":" # *Convert xml files to txt files because yolo expects txt files with normalized bounding boxes* ","7b11f59a":"# *Uninstall wandb if you don't need it.Also if you are having problems of interacting with the cell,this is the only work around I found.*","dc1ddde4":"# *END !!*","e7ece533":"# *Check if val labels and val images are equal*","da12a1e8":"# *Clone Yolov5 repo*","be094bd4":"# *Check if we  created same  amount of txt files as xml files that are in annotations*","21635b38":"# *Shuffle and move to val folders to create train-val split*","40c5f709":"# *Inference on a photo*","9c1ab5de":"# *Let's train!*","f9507ae3":"## Create Folders for Data Prepration","38ffe6e7":"# *Visualize one of our batch predictions.*"}}