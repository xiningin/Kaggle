{"cell_type":{"468ba912":"code","8f356432":"code","1bfbb038":"code","9c24ccbd":"code","a84317f2":"code","60f3061c":"code","00aa1e36":"code","aaf74950":"code","6fbfc084":"code","ae250b19":"code","8ab003e5":"code","697a2cd2":"code","b9fad70c":"code","abc3d84c":"code","5b85baa5":"code","4c936858":"code","efd2544b":"code","c44644e5":"code","f4434bbd":"code","14c6ce4e":"code","dc5f2ca1":"code","c16e8aef":"code","69701341":"code","4c47bc03":"code","95c579ec":"code","0913b7ba":"code","a29e6801":"code","f1c2dddf":"code","4d3efac5":"code","1c480fe9":"code","8f964a2f":"code","813235bf":"code","6426e6fa":"code","a48fdfae":"code","18c971cc":"code","ef0993a0":"code","b131bef8":"code","9200cd5e":"code","d8498fc6":"code","86cf4855":"code","7406dae4":"code","7118d5dd":"code","870c0bca":"code","9ffecd1d":"code","914de381":"code","4f9bea10":"code","504b0b1c":"code","c9ef3bb1":"code","770f2481":"code","4e54a05c":"code","3b5160dd":"code","fe5f6640":"code","06a7eca3":"code","869d4edb":"code","d3018e95":"code","63f3369f":"code","034e009f":"code","cfca6e53":"code","d8c4c32f":"code","20eb71dc":"code","95680fe2":"code","71dbb0ce":"code","5f277bdd":"code","eadb9859":"code","a6ff510b":"code","5a7ce93e":"code","c50ca18a":"code","3ee99557":"code","ab468bfa":"code","5b3060e6":"code","15ae070c":"code","2c0cb70f":"code","8a277dc7":"code","542c4509":"code","469852e9":"code","4207e104":"code","12c5c200":"code","f2cfbe08":"code","9bd45c3f":"code","f9c2f374":"code","286c9455":"code","1beef1f2":"code","b9b2676f":"code","ba374bdf":"code","d7bb12bf":"code","577dc797":"code","4d88bfc1":"code","acb33480":"code","fdd013ab":"code","eb2c8386":"code","ee073199":"code","e4bc22cb":"code","7fd36e5a":"code","ef572adb":"code","bc2bca73":"code","e46cdde8":"code","2ad76b70":"code","6aa65196":"code","484ac1a6":"code","2b2d867e":"code","2e6ed248":"code","925fa6ae":"code","86cbb8b8":"code","6b232aec":"code","5003f2c2":"code","35b08409":"code","152f4ebb":"code","00b297cb":"code","3e86a41d":"code","a443551b":"code","fc830134":"code","02864fbe":"code","f23bb543":"code","f0cdbe45":"code","bcb9d5cf":"code","b17a67e8":"code","97148a19":"code","924201a6":"code","7b852163":"code","7e7d688c":"code","85927249":"code","242a406d":"code","ce49cc76":"code","bb095b68":"code","ae80edba":"code","82794354":"code","25a9be6f":"code","311828d6":"code","94a81e33":"code","6b4cee76":"markdown"},"source":{"468ba912":"#EEE-CIS \u043e\u0431\u043d\u0430\u0440\u0443\u0436\u0435\u043d\u0438\u0435 \u043c\u043e\u0448\u0435\u043d\u043d\u0438\u0447\u0435\u0441\u0442\u0432\u0430\n# Reboot. DS -75. \u041f\u0435\u0440\u0432\u044b\u0439 \u043f\u043e\u0442\u043e\u043a\n# \u0412\u044b\u043f\u0443\u0441\u043a\u043d\u0430\u044f \u0440\u0430\u0431\u043e\u0442\u0430 \u0414\u0435\u043c\u0438\u043d\u0430 \u0410.\u0412","8f356432":"# \u0417\u0430\u0434\u0430\u0447\u0430 \u043f\u043e\u0441\u0442\u0430\u0432\u043b\u0435\u043d\u0430 \u0432 \u0441\u043e\u0440\u0435\u0432\u043d\u043e\u0432\u0430\u043d\u0438\u0438:  https:\/\/www.kaggle.com\/c\/ieee-fraud-detection\/overview\n# \u0417\u0430 \u043e\u0441\u043d\u043e\u0432\u0443 \u0432\u0437\u044f\u0442\u044b \u043d\u043e\u0442\u0435\u0431\u0443\u043a\u0438: \n#                                    https:\/\/www.kaggle.com\/artgor\/eda-and-models \n#                                    https:\/\/www.kaggle.com\/jesucristo\/fraud-complete-eda\n#                                    https:\/\/www.kaggle.com\/cybercat\/naive-modeling-using-minimum-analysis  \n#                                    https:\/\/www.kaggle.com\/dejavu23\/titanic-survival-seaborn-and-ensembles","1bfbb038":"# \u041b\u0443\u0447\u0448\u0438\u0439 \u0441\u043f\u043e\u0441\u043e\u0431 \u0443\u0447\u0430\u0441\u0442\u0438\u044f \u0432 \u0441\u043e\u0440\u0435\u0432\u043d\u043e\u0432\u0430\u043d\u0438\u0438 \u2014 \u043d\u0430\u0439\u0442\u0438 \u0447\u0443\u0436\u043e\u0435 \u044f\u0434\u0440\u043e \u0441 \u0445\u043e\u0440\u043e\u0448\u0438\u043c \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u043e\u043c \u0432 \u0442\u0430\u0431\u043b\u0438\u0446\u0435 \u043b\u0438\u0434\u0435\u0440\u043e\u0432, \u0441\u043a\u043e\u043f\u0438\u0440\u043e\u0432\u0430\u0442\u044c \u0435\u0433\u043e \u0438 \u043f\u043e\u043f\u044b\u0442\u0430\u0442\u044c\u0441\u044f \u0443\u043b\u0443\u0447\u0448\u0438\u0442\u044c \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442. \n# (c) https:\/\/tproger.ru\/translations\/kaggle-competitions-introduction\/","9c24ccbd":"# \u041c\u0430\u0442\u0435\u0440\u0438\u0430\u043b\u044b \u043e\u0446\u0435\u043d\u0438\u0432\u0430\u044e\u0442\u0441\u044f \u0441 \u043f\u043e\u043c\u043e\u0449\u044c\u044e ROC AUC \u043c\u0435\u0436\u0434\u0443 \u043f\u0440\u043e\u0433\u043d\u043e\u0437\u0438\u0440\u0443\u0435\u043c\u043e\u0439 \u0432\u0435\u0440\u043e\u044f\u0442\u043d\u043e\u0441\u0442\u044c\u044e \u0438 \u043d\u0430\u0431\u043b\u044e\u0434\u0430\u0435\u043c\u043e\u0439 \u0446\u0435\u043b\u044c\u044e.\n\n# \u0425\u043e\u0442\u044f \u0438\u043d\u0442\u0443\u0438\u0442\u0438\u0432\u043d\u043e \u043a\u0430\u0436\u0435\u0442\u0441\u044f, \u0447\u0442\u043e \u043d\u0443\u0436\u043d\u043e \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c \u0442\u043e\u0447\u043d\u043e\u0441\u0442\u044c \u0434\u043b\u044f \u0437\u0430\u0434\u0430\u0447\u0438 \u0431\u0438\u043d\u0430\u0440\u043d\u043e\u0439 \u043a\u043b\u0430\u0441\u0441\u0438\u0444\u0438\u043a\u0430\u0446\u0438\u0438, \n# \u044d\u0442\u043e \u0431\u0443\u0434\u0435\u0442 \u043f\u043b\u043e\u0445\u0438\u043c \u0440\u0435\u0448\u0435\u043d\u0438\u0435\u043c, \u043f\u043e\u0442\u043e\u043c\u0443 \u0447\u0442\u043e \u043c\u044b \u0438\u043c\u0435\u0435\u043c \u0434\u0435\u043b\u043e \u0441 \u043f\u0440\u043e\u0431\u043b\u0435\u043c\u043e\u0439 \u043d\u0435\u0441\u0431\u0430\u043b\u0430\u043d\u0441\u0438\u0440\u043e\u0432\u0430\u043d\u043d\u043e\u0433\u043e \u043a\u043b\u0430\u0441\u0441\u0430. \n# \u0412\u043c\u0435\u0441\u0442\u043e \u0442\u043e\u0447\u043d\u043e\u0441\u0442\u0438, \u0440\u0435\u0448\u0435\u043d\u0438\u044f \u043e\u0446\u0435\u043d\u0438\u0432\u0430\u044e\u0442\u0441\u044f \u0441 \u043f\u043e\u043c\u043e\u0449\u044c\u044e ROC AUC (Receiver Operating Characteristic curve Area Under the Curve). \n# \u0427\u0435\u043c \u0432\u044b\u0448\u0435 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442, \u0442\u0435\u043c \u043b\u0443\u0447\u0448\u0435. \u0427\u0442\u043e\u0431\u044b \u0432\u0435\u0441\u0442\u0438 \u043f\u043e\u0434\u0441\u0447\u0451\u0442\u044b \u0441 \u043f\u043e\u043c\u043e\u0449\u044c\u044e ROC AUC, \u043d\u0443\u0436\u043d\u043e \u0434\u0435\u043b\u0430\u0442\u044c \u043f\u0440\u043e\u0433\u043d\u043e\u0437\u044b \u0432 \u0442\u0435\u0440\u043c\u0438\u043d\u0430\u0445 \u0432\u0435\u0440\u043e\u044f\u0442\u043d\u043e\u0441\u0442\u0435\u0439, \u0430 \u043d\u0435 \u0431\u0438\u043d\u0430\u0440\u043d\u044b\u0435 \u2014 0 \u0438\u043b\u0438 1. \n# ROC \u043f\u043e\u043a\u0430\u0437\u044b\u0432\u0430\u0435\u0442 \u0438\u0441\u0442\u0438\u043d\u043d\u0443\u044e \u043f\u043e\u043b\u043e\u0436\u0438\u0442\u0435\u043b\u044c\u043d\u0443\u044e \u043e\u0446\u0435\u043d\u043a\u0443 \u043f\u043e \u0441\u0440\u0430\u0432\u043d\u0435\u043d\u0438\u044e \u0441 \u043b\u043e\u0436\u043d\u043e \u043f\u043e\u043b\u043e\u0436\u0438\u0442\u0435\u043b\u044c\u043d\u043e\u0439 \u043e\u0446\u0435\u043d\u043a\u043e\u0439, \u043a\u0430\u043a \u0444\u0443\u043d\u043a\u0446\u0438\u044e \u043f\u043e\u0440\u043e\u0433\u0430, \u0441\u043e\u0433\u043b\u0430\u0441\u043d\u043e \u043a\u043e\u0442\u043e\u0440\u043e\u043c\u0443 \u043c\u044b \u043a\u043b\u0430\u0441\u0441\u0438\u0444\u0438\u0446\u0438\u0440\u0443\u0435\u043c \u044d\u043a\u0437\u0435\u043c\u043f\u043b\u044f\u0440 \u043a\u0430\u043a \u043f\u043e\u043b\u043e\u0436\u0438\u0442\u0435\u043b\u044c\u043d\u044b\u0439.\n\n# \u041e\u0431\u044b\u0447\u043d\u043e \u043d\u0440\u0430\u0432\u0438\u0442\u0441\u044f \u0434\u0435\u043b\u0430\u0442\u044c \u043d\u0430\u0438\u0432\u043d\u043e\u0435 \u0431\u0430\u0437\u043e\u0432\u043e\u0435 \u043f\u0440\u0435\u0434\u0441\u043a\u0430\u0437\u0430\u043d\u0438\u0435, \u043d\u043e \u0432 \u044d\u0442\u043e\u043c \u0441\u043b\u0443\u0447\u0430\u0435 \u043c\u044b \u0443\u0436\u0435 \u0437\u043d\u0430\u0435\u043c, \u0447\u0442\u043e \u0441\u043b\u0443\u0447\u0430\u0439\u043d\u044b\u0435 \u0434\u043e\u0433\u0430\u0434\u043a\u0438 \u043f\u043e \u0437\u0430\u0434\u0430\u0447\u0435 \u0431\u0443\u0434\u0443\u0442 \u0440\u0430\u0432\u043d\u044b 0,5 \u043f\u043e ROC AUC. ","a84317f2":"# \u0424\u0430\u0439\u043b \u043f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u0435\u043d\u0438\u044f\n# \u0414\u043b\u044f \u043a\u0430\u0436\u0434\u043e\u0433\u043e TransactionID \u0432 \u043d\u0430\u0431\u043e\u0440\u0435 \u0442\u0435\u0441\u0442\u043e\u0432 \u0432\u044b \u0434\u043e\u043b\u0436\u043d\u044b \u043f\u0440\u0435\u0434\u0441\u043a\u0430\u0437\u0430\u0442\u044c \u0432\u0435\u0440\u043e\u044f\u0442\u043d\u043e\u0441\u0442\u044c \u0434\u043b\u044f \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u043e\u0439 isFraud. \u0424\u0430\u0439\u043b \u0434\u043e\u043b\u0436\u0435\u043d \u0441\u043e\u0434\u0435\u0440\u0436\u0430\u0442\u044c \u0437\u0430\u0433\u043e\u043b\u043e\u0432\u043e\u043a \u0438 \u0438\u043c\u0435\u0442\u044c \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0438\u0439 \u0444\u043e\u0440\u043c\u0430\u0442:\n# TransactionID,isFraud\n# 3663549,0.5\n# 3663550,0.5\n# 3663551,0.5\n# \u0438 \u0442.\u0434.\n\n# Categorical Features - Transaction \n# \u0424\u0443\u043d\u043a\u0446\u0438\u044f TransactionDT \u043f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u044f\u0435\u0442 \u0441\u043e\u0431\u043e\u0439 \u0432\u0440\u0435\u043c\u0435\u043d\u043d\u0443\u044e \u0434\u0435\u043b\u044c\u0442\u0443 \u0438\u0437 \u0437\u0430\u0434\u0430\u043d\u043d\u043e\u0439 \u043a\u043e\u043d\u0442\u0440\u043e\u043b\u044c\u043d\u043e\u0439 \u0434\u0430\u0442\u044b \u0438 \u0432\u0440\u0435\u043c\u0435\u043d\u0438 (\u043d\u0435 \u0444\u0430\u043a\u0442\u0438\u0447\u0435\u0441\u043a\u0430\u044f \u0432\u0440\u0435\u043c\u0435\u043d\u043d\u0430\u044f \u043c\u0435\u0442\u043a\u0430)","60f3061c":"# \u0422\u0430\u0431\u043b\u0438\u0446\u0430 \u0442\u0440\u0430\u043d\u0437\u0430\u043a\u0446\u0438\u0439 (\u043e\u043f\u0438\u0441\u0430\u043d\u0438\u0435 https:\/\/www.kaggle.com\/c\/ieee-fraud-detection\/discussion\/101203)\n# TransactionDT: timedelta \u0438\u0437 \u0437\u0430\u0434\u0430\u043d\u043d\u043e\u0439 \u043a\u043e\u043d\u0442\u0440\u043e\u043b\u044c\u043d\u043e\u0439 \u0434\u0430\u0442\u044b \u0438 \u0432\u0440\u0435\u043c\u0435\u043d\u0438 (\u043d\u0435 \u0444\u0430\u043a\u0442\u0438\u0447\u0435\u0441\u043a\u0430\u044f \u0432\u0440\u0435\u043c\u0435\u043d\u043d\u0430\u044f \u043c\u0435\u0442\u043a\u0430)\n# TransactionAMT: \u0441\u0443\u043c\u043c\u0430 \u043e\u043f\u043b\u0430\u0442\u044b \u0442\u0440\u0430\u043d\u0437\u0430\u043a\u0446\u0438\u0438 \u0432 \u0434\u043e\u043b\u043b\u0430\u0440\u0430\u0445 \u0421\u0428\u0410\n# ProductCD: \u043a\u043e\u0434 \u0442\u043e\u0432\u0430\u0440\u0430, \u0442\u043e\u0432\u0430\u0440 \u0434\u043b\u044f \u043a\u0430\u0436\u0434\u043e\u0439 \u0442\u0440\u0430\u043d\u0437\u0430\u043a\u0446\u0438\u0438\n# card1 - card6: \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044f \u043e \u043f\u043b\u0430\u0442\u0435\u0436\u043d\u043e\u0439 \u043a\u0430\u0440\u0442\u0435, \u0442\u0430\u043a\u0430\u044f \u043a\u0430\u043a \u0442\u0438\u043f \u043a\u0430\u0440\u0442\u044b, \u043a\u0430\u0442\u0435\u0433\u043e\u0440\u0438\u044f \u043a\u0430\u0440\u0442\u044b, \u0431\u0430\u043d\u043a-\u044d\u043c\u0438\u0442\u0435\u043d\u0442, \u0441\u0442\u0440\u0430\u043d\u0430 \u0438 \u0442. \u0434.\n# addr: \u0430\u0434\u0440\u0435\u0441\n# dist: \u0440\u0430\u0441\u0441\u0442\u043e\u044f\u043d\u0438\u0435\n# P_ \u0438 (R__) emaildomain: \u0434\u043e\u043c\u0435\u043d \u044d\u043b\u0435\u043a\u0442\u0440\u043e\u043d\u043d\u043e\u0439 \u043f\u043e\u0447\u0442\u044b \u043f\u043e\u043a\u0443\u043f\u0430\u0442\u0435\u043b\u044f \u0438 \u043f\u043e\u043b\u0443\u0447\u0430\u0442\u0435\u043b\u044f\n# C1-C14: \u043f\u043e\u0434\u0441\u0447\u0435\u0442, \u043d\u0430\u043f\u0440\u0438\u043c\u0435\u0440, \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043d\u0430\u0439\u0434\u0435\u043d\u043d\u044b\u0445 \u0430\u0434\u0440\u0435\u0441\u043e\u0432, \u0441\u0432\u044f\u0437\u0430\u043d\u043d\u044b\u0445 \u0441 \u043f\u043b\u0430\u0442\u0435\u0436\u043d\u043e\u0439 \u043a\u0430\u0440\u0442\u043e\u0439, \u0438 \u0442. \u0414. \u0424\u0430\u043a\u0442\u0438\u0447\u0435\u0441\u043a\u043e\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435 \u043c\u0430\u0441\u043a\u0438\u0440\u0443\u0435\u0442\u0441\u044f.\n# D1-D15: \u0438\u043d\u0442\u0435\u0440\u0432\u0430\u043b \u0432\u0440\u0435\u043c\u0435\u043d\u0438, \u043d\u0430\u043f\u0440\u0438\u043c\u0435\u0440 \u0434\u043d\u0438 \u043c\u0435\u0436\u0434\u0443 \u043f\u0440\u0435\u0434\u044b\u0434\u0443\u0449\u0438\u043c\u0438 \u0442\u0440\u0430\u043d\u0437\u0430\u043a\u0446\u0438\u044f\u043c\u0438 \u0438 \u0442. \u0414.\n# M1-M9: \u0441\u043e\u0432\u043f\u0430\u0434\u0435\u043d\u0438\u0435, \u043d\u0430\u043f\u0440\u0438\u043c\u0435\u0440 \u0438\u043c\u0435\u043d\u0430 \u043d\u0430 \u043a\u0430\u0440\u0442\u0435 \u0438 \u0430\u0434\u0440\u0435\u0441 \u0438 \u0442. \u0414.\n# Vxxx: Vesta \u0440\u0430\u0437\u0440\u0430\u0431\u043e\u0442\u0430\u043b\u0430 \u0431\u043e\u0433\u0430\u0442\u044b\u0435 \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e\u0441\u0442\u0438, \u0432\u043a\u043b\u044e\u0447\u0430\u044f \u0440\u0430\u043d\u0436\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435, \u043f\u043e\u0434\u0441\u0447\u0435\u0442 \u0438 \u0434\u0440\u0443\u0433\u0438\u0435 \u043e\u0442\u043d\u043e\u0448\u0435\u043d\u0438\u044f \u0441\u0443\u0449\u043d\u043e\u0441\u0442\u0435\u0439.\n\n# \u041a\u0430\u0442\u0435\u0433\u043e\u0440\u0438\u0430\u043b\u044c\u043d\u044b\u0435 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0438:\n# ProductCD\n# card1 - card6\n# addr1, addr2\n# P emaildomain R emaildomain\n# M1 - M9\n\n# \u0418\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0446\u0438\u043e\u043d\u043d\u0430\u044f \u0442\u0430\u0431\u043b\u0438\u0446\u0430 *\n# \u041f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u044b\u0435 \u0432 \u044d\u0442\u043e\u0439 \u0442\u0430\u0431\u043b\u0438\u0446\u0435 \u043f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u044f\u044e\u0442 \u0441\u043e\u0431\u043e\u0439 \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044e \u043e\u0431 \u0438\u0434\u0435\u043d\u0442\u0438\u0447\u043d\u043e\u0441\u0442\u0438 - \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044e \u043e \u0441\u0435\u0442\u0435\u0432\u043e\u043c \u0441\u043e\u0435\u0434\u0438\u043d\u0435\u043d\u0438\u0438 (IP, ISP, Proxy \u0438 \u0442. \u0414.) \u0418 \u0446\u0438\u0444\u0440\u043e\u0432\u0443\u044e \u043f\u043e\u0434\u043f\u0438\u0441\u044c (UA \/ browser \/ os \/ version \u0438 \u0442. \u0414.), \u0421\u0432\u044f\u0437\u0430\u043d\u043d\u0443\u044e \u0441 \u0442\u0440\u0430\u043d\u0437\u0430\u043a\u0446\u0438\u044f\u043c\u0438.\n# \u041e\u043d\u0438 \u0441\u043e\u0431\u0440\u0430\u043d\u044b \u0441\u0438\u0441\u0442\u0435\u043c\u043e\u0439 \u0437\u0430\u0449\u0438\u0442\u044b \u043e\u0442 \u043c\u043e\u0448\u0435\u043d\u043d\u0438\u0447\u0435\u0441\u0442\u0432\u0430 Vesta \u0438 \u043f\u0430\u0440\u0442\u043d\u0435\u0440\u0430\u043c\u0438 \u043f\u043e \u0446\u0438\u0444\u0440\u043e\u0432\u043e\u0439 \u0431\u0435\u0437\u043e\u043f\u0430\u0441\u043d\u043e\u0441\u0442\u0438.\n# (\u0418\u043c\u0435\u043d\u0430 \u043f\u043e\u043b\u0435\u0439 \u0437\u0430\u043c\u0430\u0441\u043a\u0438\u0440\u043e\u0432\u0430\u043d\u044b \u0438 \u043f\u0430\u0440\u043d\u044b\u0439 \u0441\u043b\u043e\u0432\u0430\u0440\u044c \u043d\u0435 \u0431\u0443\u0434\u0435\u0442 \u043f\u0440\u0435\u0434\u043e\u0441\u0442\u0430\u0432\u043b\u0435\u043d \u0434\u043b\u044f \u0437\u0430\u0449\u0438\u0442\u044b \u043a\u043e\u043d\u0444\u0438\u0434\u0435\u043d\u0446\u0438\u0430\u043b\u044c\u043d\u043e\u0441\u0442\u0438 \u0438 \u0437\u0430\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u044f \u0434\u043e\u0433\u043e\u0432\u043e\u0440\u0430)\n\n# \u041a\u0430\u0442\u0435\u0433\u043e\u0440\u0438\u0430\u043b\u044c\u043d\u044b\u0435 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0438:\n# DeviceType\n# DeviceInfo\n# ID 12 - ID 38","00aa1e36":"# \u0424\u0430\u0439\u043b\u044b\n# train_{transaction, identity}.csv - the training set\n# test_{transaction, identity}.csv - the test set (you must predict the isFraud value for these observations)\n# sample_submission.csv - a sample submission file in the correct format","aaf74950":"# \u0437\u0430\u0433\u0440\u0443\u0437\u043a\u0430 \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\nimport pandas as pd\nimport numpy as np\nimport warnings\n#warnings.filterwarnings(\"ignore\", category=DeprecationWarning)\n#warnings.filterwarnings(\"ignore\", category=FutureWarning)\nwarnings.filterwarnings(\"ignore\")\n","6fbfc084":"import matplotlib.pyplot as plt\n%matplotlib inline\n\nfrom tqdm import tqdm_notebook\n\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.svm import NuSVR, SVR\nfrom sklearn.metrics import mean_absolute_error\nfrom sklearn import preprocessing\n\nfrom sklearn.decomposition import PCA\nfrom sklearn.preprocessing import StandardScaler\n\nfrom sklearn.model_selection import KFold, StratifiedKFold\nfrom sklearn.metrics import roc_auc_score\n\nimport xgboost as xgb\nimport lightgbm as lgb\nimport catboost\n\nimport time\n\npd.options.display.precision = 15\nimport seaborn as sns\n%matplotlib inline\nsns.set()\n\n# plotly library\nimport plotly.graph_objs as go\nfrom plotly import tools\nfrom plotly.offline import init_notebook_mode, iplot\ninit_notebook_mode(connected=True)\nimport gc","ae250b19":"# \u043f\u0440\u043e\u0441\u043c\u043e\u0442\u0440 \u0441\u043e\u0434\u0435\u0440\u0436\u0438\u043c\u043e\u0433\u043e \u0432\u0445\u043e\u0434\u043d\u043e\u0439 \u0434\u0438\u0440\u0435\u043a\u0442\u043e\u0440\u0438\u0438 https:\/\/www.kaggle.com\/c\/ieee-fraud-detection\/data\nfrom subprocess import check_output\nfolder_path = \"..\/input\/ieee-fraud-detection\/\"\nprint(check_output([\"ls\", folder_path]).decode(\"utf8\"))","8ab003e5":"# \u0437\u0430\u0433\u0440\u0443\u0437\u043a\u0430 \u043f\u0435\u0440\u0432\u0438\u0447\u043d\u044b\u0445 \u0434\u0430\u0442\u0430\u0441\u0435\u0442\u043e\u0432\ntrain_identity = pd.read_csv(f'{folder_path}train_identity.csv')\ntrain_transaction = pd.read_csv(f'{folder_path}train_transaction.csv')\ntest_identity = pd.read_csv(f'{folder_path}test_identity.csv')\ntest_transaction = pd.read_csv(f'{folder_path}test_transaction.csv')\nsub = pd.read_csv(f'{folder_path}sample_submission.csv')   ","697a2cd2":"# \u041d\u0430\u043c\u0435\u043d\u043e\u0432\u0430\u043d\u0438\u0435 \u0441\u0442\u043e\u043b\u0431\u0446\u043e\u0432 \u0432 train_identity\n\n# TransactionID,\n# id_01,id_02,id_03,id_04,id_05,id_06,id_07,id_08,id_09,id_10,id_11,id_12,id_13,id_14,id_15,id_16,id_17,id_18,id_19,id_20,id_21,id_22,id_23,id_24,id_25,id_26,id_27,id_28,id_29,id_30,id_31,id_32,id_33,id_34,id_35,id_36,id_37,id_38,\n# DeviceType,DeviceInfo\n\n# \u041f\u0435\u0440\u0432\u0430\u044f \u0441\u0442\u0440\u043e\u043a\u0430: 2987004,0.0,70787.0,,,,,,,,,100.0,NotFound,,-480.0,New,NotFound,166.0,,542.0,144.0,,,,,,,,New,NotFound,Android 7.0,samsung browser 6.2,32.0,2220x1080,match_status:2,T,F,T,T,mobile,SAMSUNG SM-G892A Build\/NRD90M\n\n# \u041d\u0430\u043c\u0435\u043d\u043e\u0432\u0430\u043d\u0438\u0435 \u0441\u0442\u043e\u043b\u0431\u0446\u043e\u0432 \u0432 train_transaction\n\n# TransactionID,isFraud,TransactionDT,TransactionAmt,ProductCD,card1,card2,card3,card4,card5,card6,addr1,addr2,dist1,dist2,P_emaildomain,R_emaildomain,\n\n# C1,C2,C3,C4,C5,C6,C7,C8,C9,C10,C11,C12,C13,C14,\n# D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15,\n# M1,M2,M3,M4,M5,M6,M7,M8,M9,\n# V1,V2,V3,V4,V5,V6,V7,V8,V9,V10,V11,V12,V13,V14,V15,V16,V17,V18,V19,V20,V21,V22,V23,V24,V25,V26,V27,V28,V29,V30,V31,V32,V33,V34,V35,V36,V37,V38,V39,V40,V41,V42,V43,V44,V45,V46,V47,V48,V49,V50,\n# V51,V52,V53,V54,V55,V56,V57,V58,V59,V60,V61,V62,V63,V64,V65,V66,V67,V68,V69,V70,V71,V72,V73,V74,V75,V76,V77,V78,V79,V80,V81,V82,V83,V84,V85,V86,V87,V88,V89,V90,V91,V92,V93,V94,V95,V96,V97,V98,V99,V100,\n# V101,V102,V103,V104,V105,V106,V107,V108,V109,V110,V111,V112,V113,V114,V115,V116,V117,V118,V119,V120,V121,V122,V123,V124,V125,V126,V127,V128,V129,V130,V131,V132,V133,V134,V135,V136,V137,V138,V139,V140,\n# V141,V142,V143,V144,V145,V146,V147,V148,V149,V150,V151,V152,V153,V154,V155,V156,V157,V158,V159,V160,V161,V162,V163,V164,V165,V166,V167,V168,V169,V170,V171,V172,V173,V174,V175,V176,V177,V178,V179,V180,\n# V181,V182,V183,V184,V185,V186,V187,V188,V189,V190,V191,V192,V193,V194,V195,V196,V197,V198,V199,V200,V201,V202,V203,V204,V205,V206,V207,V208,V209,V210,V211,V212,V213,V214,V215,V216,V217,V218,V219,V220,\n# V221,V222,V223,V224,V225,V226,V227,V228,V229,V230,V231,V232,V233,V234,V235,V236,V237,V238,V239,V240,V241,V242,V243,V244,V245,V246,V247,V248,V249,V250,V251,V252,V253,V254,V255,V256,V257,V258,V259,V260,\n# V261,V262,V263,V264,V265,V266,V267,V268,V269,V270,V271,V272,V273,V274,V275,V276,V277,V278,V279,V280,V281,V282,V283,V284,V285,V286,V287,V288,V289,V290,V291,V292,V293,V294,V295,V296,V297,V298,V299,V300,\n# V301,V302,V303,V304,V305,V306,V307,V308,V309,V310,V311,V312,V313,V314,V315,V316,V317,V318,V319,V320,V321,V322,V323,V324,V325,V326,V327,V328,V329,V330,V331,V332,V333,V334,V335,V336,V337,V338,V339\n# \u041f\u0435\u0440\u0432\u0430\u044f \u0441\u0442\u0440\u043e\u043a\u0430:2987000,0,86400,68.5,W,13926,,150.0,discover,142.0,credit,315.0,87.0,19.0,,,,1.0,1.0,0.0,0.0,0.0,1.0,0.0,0.0,1.0,0.0,2.0,0.0,1.0,1.0,14.0,,13.0,,,,,,,13.0,13.0,,,,0.0,T,T,T,M2,F,T,,,,\n# 1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,0.0,0.0,1.0,1.0,1.0,0.0,0.0,0.0,0.0,1.0,1.0,0.0,0.0,1.0,1.0,1.0,1.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,,,,,,,,,,,,,,,,,,,1.0,1.0,1.0,1.0,0.0,0.0,0.0,0.0,1.0,1.0,0.0,\n# 0.0,1.0,1.0,1.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,1.0,1.0,1.0,1.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,1.0,1.0,1.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,1.0,0.0,0.0,0.0,0.0,0.0,1.0,0.0,0.0,0.0,0.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,\n# 1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,0.0,117.0,0.0,0.0,0.0,0.0,0.0,117.0,0.0,0.0,0.0,0.0,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,\n# 0.0,0.0,0.0,1.0,1.0,0.0,0.0,0.0,0.0,0.0,0.0,1.0,1.0,1.0,0.0,1.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,1.0,0.0,117.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,117.0,0.0,0.0,0.0,0.0,,,,,,,,,,,,,,,,,,\n","b9fad70c":"print(train_transaction.head(1))","abc3d84c":"print(train_identity.head(1))","5b85baa5":"# \u041a\u043e\u043c\u0431\u0438\u043d\u0430\u0446\u0438\u044f \u0434\u0430\u043d\u043d\u044b\u0445 \u0441 \u043f\u043e\u043c\u043e\u0449\u044c\u044e \u0444\u0443\u043d\u043a\u0446\u0438\u0438 merge(), \u043a\u043e\u0442\u043e\u0440\u0430\u044f \u0441\u043e\u0435\u0434\u0438\u043d\u044f\u0435\u0442 \u0434\u0432\u0430 \u043d\u0430\u0431\u043e\u0440\u0430 \u0434\u0430\u043d\u043d\u044b\u0445 (\u0430\u043d\u0430\u043b\u043e\u0433 join \u0432 SQL)\ntrain = pd.merge(train_transaction, train_identity, on='TransactionID', how='left')\ntest = pd.merge(test_transaction, test_identity, on='TransactionID', how='left')\nprint(f'\u0414\u0430\u0442\u0430\u0441\u0435\u0442 Train \u0441\u043e\u0434\u0435\u0440\u0436\u0438\u0442 {train.shape[0]} \u0441\u0442\u0440\u043e\u043a and {train.shape[1]} \u0441\u0442\u043e\u043b\u0431\u0446\u043e\u0432')\nprint(f'\u0414\u0430\u0442\u0430\u0441\u0435\u0442 Test \u0441\u043e\u0434\u0435\u0440\u0436\u0438\u0442 {test.shape[0]} \u0441\u0442\u0440\u043e\u043a and {test.shape[1]} \u0441\u0442\u043e\u043b\u0431\u0446\u043e\u0432')","4c936858":"# \u0418\u0442\u0430\u043a, \u0443 \u043d\u0430\u0441 \u0435\u0441\u0442\u044c \u0434\u0432\u0430 \u043d\u0430\u0431\u043e\u0440\u0430 \u0434\u0430\u043d\u043d\u044b\u0445 \u0441\u0440\u0435\u0434\u043d\u0435\u0433\u043e \u0440\u0430\u0437\u043c\u0435\u0440\u0430 \u0441 \u0431\u043e\u043b\u044c\u0448\u0438\u043c \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e\u043c \u0441\u0442\u043e\u043b\u0431\u0446\u043e\u0432. Train \u0438 test \u0438\u043c\u0435\u044e\u0442 \u043f\u0440\u0438\u043c\u0435\u0440\u043d\u043e \u043e\u0434\u0438\u043d\u0430\u043a\u043e\u0432\u043e\u0435 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0441\u0442\u0440\u043e\u043a","efd2544b":"# \u041f\u043e\u0441\u043a\u043e\u043b\u044c\u043a\u0443 \u0437\u0430\u0433\u0440\u0443\u0436\u0435\u043d\u043d\u044b\u0435 \u0434\u0430\u043d\u043d\u044b\u0435 \u0437\u0430\u043d\u0438\u043c\u0430\u044e\u0442 \u043c\u043d\u043e\u0433\u043e \u043e\u043f\u0435\u0440\u0430\u0442\u0438\u0432\u043d\u043e\u0439 \u043f\u0430\u043c\u044f\u0442\u0438, \u0442\u043e \u0443\u0434\u0430\u043b\u0438\u043c \u0438\u0437 \u043f\u0430\u043c\u044f\u0442\u0438 \u043f\u0435\u0440\u0432\u0438\u0447\u043d\u043e \u0437\u0430\u0433\u0440\u0443\u0436\u0435\u043d\u043d\u044b\u0435 \u0434\u0430\u0442\u0430\u0441\u0435\u0442\u044b:\ndel train_identity, train_transaction, test_identity, test_transaction","c44644e5":"# \u0434\u043e\u043f\u043e\u043b\u043d\u0438\u0442\u0435\u043b\u044c\u043d\u043e\u043f\u0440\u0438\u043d\u0443\u0434\u0438\u0442\u0435\u043b\u044c\u043d\u043e \u0432\u044b\u0437\u044b\u0432\u0435\u043c \u0441\u0431\u043e\u0440\u0449\u0438\u043a \u043c\u0443\u0441\u043e\u0440\u0430, \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u043f\u043e\u0447\u0438\u0441\u0442\u0438\u0442 \u043f\u0430\u043c\u044f\u0442\u044c (\u043f\u0440\u0438\u043c\u0435\u0440\u043d\u043e 3 \u0433\u0431):\ngc.collect()","f4434bbd":"# \u2714 \u0418\u0441\u0441\u043b\u0435\u0434\u043e\u0432\u0430\u043d\u0438\u0435 \u0434\u0430\u043d\u043d\u044b\u0445","14c6ce4e":"print(train.head(5))","dc5f2ca1":"print (train.info())","c16e8aef":"print(test.head(5))","69701341":"print (test.info())","4c47bc03":"print(f'\u0418\u0437 \u0432\u0441\u0435\u0445 {train.shape[1]} \u0441\u0442\u043e\u043b\u0431\u0446\u043e\u0432 \u0434\u0430\u0442\u0430\u0441\u0435\u0442\u0430 Train {train.isnull().any().sum()} \u0441\u0442\u043e\u043b\u0431\u0446\u043e\u0432 \u0441 \u0445\u043e\u0442\u044f \u0431\u044b \u043e\u0434\u043d\u0438\u043c \u043f\u0443\u0441\u0442\u044b\u043c \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435\u043c')","95c579ec":"#\u041f\u043e\u0434\u0441\u0447\u0435\u0442 \u0440\u0430\u0437\u043b\u0438\u0447\u043d\u044b\u0445 \u043d\u0430\u0431\u043b\u044e\u0434\u0435\u043d\u0438\u0439 \u043f\u043e \u043a\u0430\u0436\u0434\u043e\u043c\u0443 \u0441\u0442\u043e\u043b\u0431\u0446\u0443 (\u043f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e \u0438\u0433\u043d\u043e\u0440\u0438\u0440\u0443\u0435\u043c \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f NaN, \u0435\u0441\u043b\u0438 \u043d\u0443\u0436\u043d\u043e \u0438\u0445 \u0443\u0447\u0438\u0442\u044b\u0432\u0430\u0442\u044c, \u0442\u043e nunique( self , axis = 0 , dropna = False)\none_value_cols = [col for col in train.columns if train[col].nunique() <= 1] \none_value_cols_test = [col for col in test.columns if test[col].nunique() <= 1]    \none_value_cols == one_value_cols_test","0913b7ba":"print(f'\u0412\u0441\u0435\u0433\u043e {len(one_value_cols)} \u0441\u0442\u043e\u043b\u0431\u0446\u043e\u0432 \u0432 train \u0441 \u043e\u0434\u043d\u0438\u043c \u0443\u043d\u0438\u043a\u0430\u043b\u044c\u043d\u044b\u043c \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435\u043c.')\nprint(f'\u0412\u0441\u0435\u0433\u043e {len(one_value_cols_test)} \u0441\u0442\u043e\u043b\u0431\u0446\u043e\u0432 \u0432 test \u0441 \u043e\u0434\u043d\u0438\u043c \u0443\u043d\u0438\u043a\u0430\u043b\u044c\u043d\u044b\u043c \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435\u043c')","a29e6801":"missing_values_count = train.isnull().sum()\nprint (missing_values_count[0:10])\ntotal_cells = np.product(train.shape)\ntotal_missing = missing_values_count.sum()\nprint (\"% \u043f\u0440\u043e\u043f\u0443\u0449\u0435\u043d\u043d\u044b\u0445 \u0434\u0430\u043d\u043d\u044b\u0445 = \",(total_missing\/total_cells) * 100)","f1c2dddf":"del missing_values_count, total_cells, total_missing, one_value_cols, one_value_cols_test\ngc.collect()","4d3efac5":"# \u041f\u0440\u043e\u043c\u0435\u0436\u0443\u0442\u043e\u0447\u043d\u044b\u0435 \u0432\u044b\u0432\u043e\u0434\u044b:\n#   \u0412 \u0431\u043e\u043b\u044c\u0448\u0438\u043d\u0441\u0442\u0432\u0435 \u0441\u0442\u043e\u043b\u0431\u0446\u043e\u0432 \u043e\u0442\u0441\u0443\u0442\u0441\u0442\u0432\u0443\u044e\u0442 \u0434\u0430\u043d\u043d\u044b\u0435 \n#   \u0422\u0430\u043a\u0436\u0435 \u0435\u0441\u0442\u044c \u0441\u0442\u043e\u043b\u0431\u0446\u044b \u0441 \u043e\u0434\u043d\u0438\u043c \u0443\u043d\u0438\u043a\u0430\u043b\u044c\u043d\u044b\u043c \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435\u043c (\u0438\u043b\u0438 \u0432\u0441\u0435 \u043e\u0442\u0441\u0443\u0442\u0441\u0442\u0432\u0443\u044e\u0442). \n#   \u0415\u0441\u0442\u044c \u043c\u043d\u043e\u0433\u043e \u043d\u0435\u043f\u0440\u0435\u0440\u044b\u0432\u043d\u044b\u0445 \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u044b\u0445 \u0438 \u043d\u0435\u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u043a\u0430\u0442\u0435\u0433\u043e\u0440\u0438\u0430\u043b\u044c\u043d\u044b\u0435. ","1c480fe9":"# \u041f\u043e\u0438\u0441\u043a \u043a\u0430\u0442\u0435\u0433\u043e\u0440\u0438\u0430\u043b\u044c\u043d\u044b\u0445 \u0438 \u0447\u0438\u0441\u043b\u043e\u0432\u044b\u0445 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u043e\u0432\n# \u0421\u043f\u0440\u0430\u0432\u043e\u0447\u043d\u043e \u0442\u0438\u043f\u044b \u0432 pandas: https:\/\/pbpython.com\/pandas_dtypes.html\nnumerical_feats = train.dtypes[ (train.dtypes != \"object\") & (train.dtypes != \"category\") ].index\nnumerical_feats_kol = len(numerical_feats)\nprint(\"\u041a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0447\u0438\u0441\u043b\u043e\u0432\u044b\u0445 \u0444\u0438\u0447\u0435\u0439 \u0432 \u0434\u0430\u0442\u0430\u0441\u0435\u0442\u0435 train: \", numerical_feats_kol)\n\ncategorical_feats = train.dtypes[ (train.dtypes == \"object\") | (train.dtypes == \"category\") ].index\ncategorical_feats_kol = len(categorical_feats)\nprint(\"\u041a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043a\u0430\u0442\u0435\u0433\u043e\u0440\u0435\u0430\u043b\u044c\u043d\u044b\u0445 \u0444\u0438\u0447\u0435\u0439 \u0432 \u0434\u0430\u0442\u0430\u0441\u0435\u0442\u0435 train: \", categorical_feats_kol)","8f964a2f":"# \u0443\u0441\u0442\u0430\u043d\u043e\u0432\u0438\u043c \u0444\u043e\u0440\u043c\u0430\u0442, \u0447\u0442\u043e\u0431\u044b \u0432\u044b\u0432\u0435\u0441\u0442\u0438 \u043d\u0430 \u044d\u043a\u0440\u0430\u043d \u0432\u0441\u0435 \u043d\u0430\u0437\u0432\u0430\u043d\u0438\u044f \u0444\u0438\u0447 (\u0431\u0435\u0437 ..)\n# \u0411\u043e\u043b\u0435\u0435 \u043f\u043e\u0434\u0440\u043e\u0431\u043d\u044b\u0439 \u0444\u043e\u0440\u043c\u0430\u0442 https:\/\/pandas.pydata.org\/pandas-docs\/stable\/reference\/api\/pandas.set_option.html\n#pd.set_option('display.max_rows', 1000)\n#pd.set_option('display.max_columns', 1000)\n\npd.set_option('display.width', 200)  # \u0448\u0438\u0440\u0438\u043d\u0430 \u0432\u044b\u0432\u043e\u0434\u0438\u043c\u043e\u0433\u043e \u044d\u043a\u0440\u0430\u043d\u0430\npd.set_option('max_seq_items', 500)  # \u0442\u043e \u0438\u0437-\u0447\u0435\u0433\u043e \u043f\u0435\u0440\u0435\u0441\u0442\u0430\u043b\u043e \u0430\u0432\u0442\u043e\u043c\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u0438 \u043f\u0440\u043e\u043f\u0443\u0441\u043a\u0430\u0442\u044c \u0438 \u0441\u0442\u0430\u0432\u0438\u0442\u044c ..\n\nprint(\"\u0418\u043c\u0435\u043d\u0430 \u0447\u0438\u0441\u043b\u043e\u0432\u044b\u0445 \u0444\u0438\u0447\u0435\u0439 \u0432 \u0434\u0430\u0442\u0430\u0441\u0435\u0442\u0435 train:\")\nprint(train[numerical_feats].columns)\nprint(\"*\"*100)\nprint(\"\u0418\u043c\u0435\u043d\u0430 \u043a\u0430\u0442\u0435\u0433\u043e\u0440\u0435\u0430\u043b\u044c\u043d\u044b\u0445 \u0441\u0442\u043e\u043b\u0431\u0446\u043e\u0432 \u0432 \u0434\u0430\u0442\u0430\u0441\u0435\u0442\u0435 train:\")\nprint(train[categorical_feats].columns)","813235bf":"#\u0434\u043b\u044f \u0432\u0441\u0435\u0445 \u0447\u0438\u0441\u043b\u043e\u0432\u044b\u0445 \u0444\u0438\u0447\u0435\u0439 \u0440\u0430\u0441\u0441\u0447\u0438\u0442\u0430\u0435\u043c describe(), \u0444\u0438\u0447\u0435\u0439 \u043c\u043d\u043e\u0433\u043e, \u043f\u043e\u044d\u0442\u043e\u043c\u0443 \u0441\u0434\u0435\u043b\u0430\u0435\u043c \u0440\u0430\u0437\u0431\u0438\u0432\u043a\u0443:\ngr_kol = 50 # \u043a\u043e\u043b-\u0432\u043e \u0444\u0438\u0447\u0435\u0439 \u0437\u0430 1 \u043f\u0440\u043e\u0445\u043e\u0434\nn1 = 0\nfor i in tqdm_notebook(range (1,numerical_feats_kol \/\/ gr_kol + 2)):\n    n2 = i * gr_kol \n    if n2 > (numerical_feats_kol - 1):\n        n2 =  numerical_feats_kol - 1\n    cols = [numerical_feats[j] for j in range (n1,n2+1) ]\n    #print (cols)\n    \n    plot_data = pd.DataFrame(train[cols])\n\n    if 0: # \u0434\u043b\u044f \u0442\u0435\u0441\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f \u043c\u043e\u0436\u043d\u043e \u043e\u0433\u0440\u0430\u043d\u0438\u0447\u0438\u0442\u044c \u043a\u043e\u043b-\u0432\u043e \u0441\u0442\u0440\u043e\u043a \u0434\u043b\u044f \u044d\u043a\u043e\u043d\u043e\u043c\u0438\u0438 \u043f\u0430\u043c\u044f\u0442\u0438 \u0438 \u0443\u0432\u0435\u043b\u0438\u0447\u0435\u043d\u0438\u044f \u0431\u044b\u0441\u0442\u0440\u043e\u0434\u0435\u0439\u0441\u0442\u0432\u0438\u044f\n        max_rows =1000    \n        plot_data = pd.DataFrame(plot_data[:max_rows])\n    \n    print(plot_data.describe())   \n    n1 = n2 +1","6426e6fa":"#\u0434\u043b\u044f \u0432\u0441\u0435\u0445 \u0447\u0438\u0441\u043b\u043e\u0432\u044b\u0445 \u0444\u0438\u0447\u0435\u0439 \u043f\u043e\u0441\u0442\u0440\u043e\u0438\u043c \u0433\u0438\u0441\u0442\u043e\u0433\u0440\u0430\u043c\u043c\u044b. \u0424\u0438\u0447\u0435\u0439 \u043c\u043d\u043e\u0433\u043e, \u043d\u043e \u043f\u0440\u0438 \u0440\u0430\u0437\u0431\u0438\u0432\u043a\u0435 \u0441\u0434\u0435\u043b\u0430\u043d\u043d\u043e\u0439 \u0432\u044b\u0448\u0435 \u0433\u0440\u0430\u0444\u0438\u043a\u0438 \u043f\u043e\u0434\u043a\u043b\u044e\u0447\u0438\u0432\u044b\u044e\u0442, \u043f\u043e\u044d\u0442\u043e\u043c\u0443 \u0440\u0430\u0437\u0431\u0438\u0432\u0430\u0442\u044c \u043d\u0435 \u0431\u0443\u0434\u0435\u043c (\u043f\u0440\u043e\u0441\u0447\u0438\u0442\u044b\u0432\u0430\u0435\u0442 \u0434\u043e\u043b\u0433\u043e)\nplot_data = pd.DataFrame(train[numerical_feats])\nif 0: # \u0434\u043b\u044f \u0442\u0435\u0441\u0442\u0440\u043e\u0432\u0430\u043d\u0438\u044f \u043c\u043e\u0436\u043d\u043e \u043e\u0433\u0440\u0430\u043d\u0438\u0447\u0438\u0442\u044c \u043a\u043e\u043b-\u0432\u043e \u0441\u0442\u0440\u043e\u043a \u0434\u043b\u044f \u044d\u043a\u043e\u043d\u043e\u043c\u0438\u0438 \u043f\u0430\u043c\u044f\u0442\u0438 \u0438 \u0443\u0432\u0435\u043b\u0438\u0447\u0435\u043d\u0438\u044f \u0431\u044b\u0441\u0442\u0440\u043e\u0434\u0435\u0439\u0441\u0442\u0432\u0438\u044f\n    max_rows =1000    \n    plot_data = pd.DataFrame(plot_data[:max_rows])\n\n_ = plot_data.hist(plot_data.columns, figsize=(60, 40))","a48fdfae":"# \u0410\u043d\u0430\u043b\u0438\u0437 \u043e\u0442\u0434\u0435\u043b\u044c\u043d\u044b\u0445 \u0444\u0438\u0447\u0435\u0439","18c971cc":"fig, ax = plt.subplots(1, 2, figsize=(18,4))\n\ntime_val = train['TransactionDT'].values\n\nsns.distplot(time_val, ax=ax[0], color='r')\nax[0].set_title('\u0420\u0430\u0441\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0438\u0435 TransactionDT', fontsize=14)\nax[1].set_xlim([min(time_val), max(time_val)])\n\nsns.distplot(np.log(time_val), ax=ax[1], color='b')\nax[1].set_title('\u0420\u0430\u0441\u043f\u0435\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0438\u0435 \u043b\u043e\u0433\u0430\u0440\u0438\u0444\u043c\u0430 TransactionDT', fontsize=14)\nax[1].set_xlim([min(np.log(time_val)), max(np.log(time_val))])\n\nplt.show()","ef0993a0":"fig, ax = plt.subplots(1, 2, figsize=(18,4))\n\ntime_val = train.loc[train['isFraud'] == 1]['TransactionDT'].values\n\nsns.distplot(np.log(time_val), ax=ax[0], color='r')\nax[0].set_title('\u0420\u0430\u0441\u043f\u0435\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0438\u0435 \u043b\u043e\u0433\u0430\u0440\u0438\u0444\u043c\u0430 TransactionDT, isFraud=1', fontsize=14)\nax[1].set_xlim([min(np.log(time_val)), max(np.log(time_val))])\n\ntime_val = train.loc[train['isFraud'] == 0]['TransactionDT'].values\n\nsns.distplot(np.log(time_val), ax=ax[1], color='b')\nax[1].set_title('\u0420\u0430\u0441\u043f\u0435\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0438\u0435 \u043b\u043e\u0433\u0430\u0440\u0438\u0444\u043c\u0430 TransactionDT, isFraud=0', fontsize=14)\nax[1].set_xlim([min(np.log(time_val)), max(np.log(time_val))])\n\n\nplt.show()","b131bef8":"train['TransactionDT'].plot(kind='hist',\n                                        figsize=(15, 5),\n                                        label='train',\n                                        bins=50,\n                                        title='Train \u043f\u0440\u043e\u0442\u0438\u0432 Test TransactionDT \u0440\u0430\u0441\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0438\u044f')\ntest['TransactionDT'].plot(kind='hist',\n                                       label='test',\n                                       bins=50)\nplt.legend()\nplt.show()","9200cd5e":"plt.figure(figsize=(30, 10))\nc_features = [col for col in train[numerical_feats].columns if (col[:1] == \"c\") | (col[:1] == \"C\")] \nuniques = [len(train[col].unique()) for col in c_features]\nsns.set(font_scale=1.2)\nax = sns.barplot(c_features, uniques, log=True)\nax.set(xlabel='\u041f\u0440\u0438\u0437\u043d\u0430\u043a\u0438', ylabel='\u043b\u043e\u0433\u0430\u0440\u0438\u0444\u043c(\u043a\u043e\u043b-\u0432\u043e \u0443\u043d\u0438\u043a\u0430\u043b\u044c\u043d\u044b\u0445)', title='\u0427\u0438\u0441\u043b\u043e \u0443\u043d\u0438\u043a\u0430\u043b\u044c\u043d\u044b\u0445 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0439 \u0444\u0438\u0447\u0435\u0439 TRAIN')\nfor p, uniq in zip(ax.patches, uniques):\n    height = p.get_height()\n    ax.text(p.get_x()+p.get_width()\/2.,\n            height + 10,\n            uniq,\n            ha=\"center\") ","d8498fc6":"print(train['id_01'].unique())\nprint(len(train['id_01'].unique())-1)","86cf4855":"plt.hist(train['id_01'], bins=77); #bins - \u0435\u0441\u043b\u0438 \u0437\u0430\u0434\u0430\u043d\u043e \u0446\u0435\u043b\u043e\u0435 \u0447\u0438\u0441\u043b\u043e, \u0431\u0438\u043d\u044b + 1 \u0440\u0435\u0431\u0440\u043e \u0431\u0438\u043d\u0430 \u0440\u0430\u0441\u0441\u0447\u0438\u0442\u044b\u0432\u0430\u044e\u0442\u0441\u044f \u0438 \u0432\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u044e\u0442\u0441\u044f \u0432 \u0441\u043e\u043e\u0442\u0432\u0435\u0442\u0441\u0442\u0432\u0438\u0438 \u0441 numpy.histogram\nplt.title('\u0420\u0430\u0441\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0438\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0439 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0430 id_01');","7406dae4":"# id_01 \u0438\u043c\u0435\u0435\u0442 \u0438\u043d\u0442\u0435\u0440\u0435\u0441\u043d\u043e\u0435 \u0440\u0430\u0441\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0438\u0435: \u0443 \u043d\u0435\u0433\u043e 77 \u0443\u043d\u0438\u043a\u0430\u043b\u044c\u043d\u044b\u0445 \u043d\u0435\u043f\u043e\u043b\u043e\u0436\u0438\u0442\u0435\u043b\u044c\u043d\u044b\u0445 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0439.","7118d5dd":"# \u041f\u043e\u0441\u043c\u043e\u0442\u0440\u0438\u043c \u0441\u043f\u0438\u0441\u043e\u043a \u0438\u0437 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432 \u0443\u043d\u0438\u043a\u0430\u043b\u044c\u043d\u044b\u0445 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0439 \u043f\u0440\u0438\u0437\u043d\u043a\u0430 id_03\n# \u043f\u043e\u043b\u0443\u0447\u0435\u043d\u043d\u044b\u0439 \u0441\u043f\u0438\u0441\u043e\u043a \u0431\u0443\u0434\u0435\u0442 \u0432 \u043f\u043e\u0440\u044f\u0434\u043a\u0435 \u0443\u0431\u044b\u0432\u0430\u043d\u0438\u044f, \u0442\u0430\u043a \u0447\u0442\u043e \u043f\u0435\u0440\u0432\u044b\u0439 \u044d\u043b\u0435\u043c\u0435\u043d\u0442 \u044f\u0432\u043b\u044f\u0435\u0442\u0441\u044f \u043d\u0430\u0438\u0431\u043e\u043b\u0435\u0435 \u0447\u0430\u0441\u0442\u043e \u0432\u0441\u0442\u0440\u0435\u0447\u0430\u044e\u0449\u0438\u043c\u0441\u044f \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u043e\u043c. \u0418\u0441\u043a\u043b\u044e\u0447\u0430\u0435\u0442 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f NA \u043f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e.\n# normalize: \u043b\u043e\u0433\u0438\u0447\u0435\u0441\u043a\u0438\u0439, \u043f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e False, \u0415\u0441\u043b\u0438 True, \u0442\u043e \u0432\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u043c\u044b\u0439 \u043e\u0431\u044a\u0435\u043a\u0442 \u0431\u0443\u0434\u0435\u0442 \u0441\u043e\u0434\u0435\u0440\u0436\u0430\u0442\u044c \u043e\u0442\u043d\u043e\u0441\u0438\u0442\u0435\u043b\u044c\u043d\u044b\u0435 \u0447\u0430\u0441\u0442\u043e\u0442\u044b \u0443\u043d\u0438\u043a\u0430\u043b\u044c\u043d\u044b\u0445 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0439\ntrain['id_03'].value_counts(dropna=False, normalize=True).head()","870c0bca":"# d_03 \u0441\u043e\u0434\u0435\u0440\u0436\u0438\u0442 88% \u043f\u0440\u043e\u043f\u0443\u0449\u0435\u043d\u043d\u044b\u0445 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0439, \u0430 98% \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0439 \u043b\u0438\u0431\u043e \u043e\u0442\u0441\u0443\u0442\u0441\u0442\u0432\u0443\u044e\u0442, \u043b\u0438\u0431\u043e \u0440\u0430\u0432\u043d\u044b 0.","9ffecd1d":"train['id_11'].value_counts(dropna=False, normalize=True).head()","914de381":"# 22% \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0439 \u0432 id_11 \u0440\u0430\u0432\u043d\u044b 100, \u0430 76% \u043e\u0442\u0441\u0443\u0442\u0441\u0442\u0432\u0443\u044e\u0442. ","4f9bea10":"plt.hist(train['id_07']);\nplt.title('\u0420\u0430\u0441\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0438\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0439 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0430 id_07');","504b0b1c":"%%time\n# \u0437\u0430 \u043e\u0441\u043d\u043e\u0432\u0443 \u0432\u0437\u044f\u0442\u0430 \u0444\u0443\u043d\u043a\u0446\u0438\u044f \u0438\u0437 \u043d\u043e\u0443\u0442\u0431\u0443\u043a\u0430 https:\/\/www.kaggle.com\/jesucristo\/fraud-complete-eda\n# \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u0432 \u0441\u0432\u043e\u044e \u043e\u0447\u0435\u0440\u0435\u0434\u044c \u0441\u0441\u044b\u043b\u0430\u0435\u0442\u0441\u044f \u043d\u0430 \u043d\u043e\u0443\u0442\u0431\u0443\u043a https:\/\/www.kaggle.com\/gemartin\/load-data-reduce-memory-usage\n# \u041f\u0420\u0415\u0414\u0423\u041f\u0420\u0415\u0416\u0414\u0415\u041d\u0418\u0415! \u042d\u0442\u043e \u043c\u043e\u0436\u0435\u0442 \u043f\u043e\u0432\u0440\u0435\u0434\u0438\u0442\u044c \u0434\u0430\u043d\u043d\u044b\u0435\ndef reduce_mem_usage2(df):\n    # \u043f\u0435\u0440\u0435\u0431\u0435\u0440\u0438\u0442\u0435 \u0432\u0441\u0435 \u0441\u0442\u043e\u043b\u0431\u0446\u044b \u043a\u0430\u0434\u0440\u0430 \u0434\u0430\u043d\u043d\u044b\u0445 \u0438 \u0438\u0437\u043c\u0435\u043d\u0438\u0442\u0435 \u0442\u0438\u043f \u0434\u0430\u043d\u043d\u044b\u0445 \u0447\u0442\u043e\u0431\u044b \u0443\u043c\u0435\u043d\u044c\u0448\u0438\u0442\u044c \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0435 \u043f\u0430\u043c\u044f\u0442\u0438.      \n    start_mem = df.memory_usage().sum() \/ 1024**2\n    print('\u0418\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0435 \u043f\u0430\u043c\u044f\u0442\u0438 \u0434\u0430\u0442\u0430\u0444\u0440\u0435\u0439\u043c\u0430 \u0441\u043e\u0441\u0442\u0430\u0432\u043b\u044f\u0435\u0442 {:.2f} MB'.format(start_mem))\n    \n    for col in tqdm_notebook(df.columns):\n        col_type = df[col].dtype\n        \n        if col_type != object:\n            c_min = df[col].min()\n            c_max = df[col].max()\n            if str(col_type)[:3] == 'int':\n                if c_min > np.iinfo(np.int8).min and c_max < np.iinfo(np.int8).max:\n                    df[col] = df[col].astype(np.int8)\n                elif c_min > np.iinfo(np.int16).min and c_max < np.iinfo(np.int16).max:\n                    df[col] = df[col].astype(np.int16)\n                elif c_min > np.iinfo(np.int32).min and c_max < np.iinfo(np.int32).max:\n                    df[col] = df[col].astype(np.int32)\n                elif c_min > np.iinfo(np.int64).min and c_max < np.iinfo(np.int64).max:\n                    df[col] = df[col].astype(np.int64)  \n            else:\n                if c_min > np.finfo(np.float16).min and c_max < np.finfo(np.float16).max:\n                    df[col] = df[col].astype(np.float16)\n                elif c_min > np.finfo(np.float32).min and c_max < np.finfo(np.float32).max:\n                    df[col] = df[col].astype(np.float32)\n                else:\n                    df[col] = df[col].astype(np.float64)\n        else:\n            df[col] = df[col].astype('category')\n\n    end_mem = df.memory_usage().sum() \/ 1024**2\n    print('\u0418\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0435 \u043f\u0430\u043c\u044f\u0442\u0438 \u043f\u043e\u0441\u043b\u0435 \u043e\u043f\u0442\u0438\u043c\u0438\u0437\u0430\u0446\u0438\u0438 \u0441\u043e\u0441\u0442\u0430\u0432\u043b\u044f\u0435\u0442: {:.2f} MB'.format(end_mem))\n    print('\u042d\u043a\u043e\u043d\u043e\u043c\u0438\u044f \u0441\u043e\u0441\u0442\u0430\u0432\u0438\u043b\u0430 {:.1f}%'.format(100 * (start_mem - end_mem) \/ start_mem))\n    \n    return df","c9ef3bb1":"# \u0434\u043b\u044f \u0434\u0430\u043b\u044c\u043d\u0435\u0439\u0448\u0435\u0433\u043e \u0430\u043d\u0430\u043b\u0438\u0437\u0430 \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u0430\u0435\u043c \u043e\u0431\u0430 \u0434\u0430\u0442\u0430\u0441\u0435\u0442\u0430 train \u0438 test \u0434\u043b\u044f \u0441\u043e\u043a\u0440\u0430\u0449\u0435\u043d\u0438\u044f \u043f\u044f\u043c\u044f\u0442\u0438 \u0438 \u0441\u043e\u0437\u0434\u0430\u0434\u0438\u043c \u043e\u0434\u0438\u043d \u043e\u0431\u044a\u0435\u0434\u0435\u043d\u0435\u043d\u043d\u044b\u0439 \u0434\u0430\u0442\u0430\u0441\u0435\u0442 \u0434\u043b\u044f \u043f\u0440\u0435\u043e\u0431\u0440\u0430\u0437\u043e\u0432\u0430\u043d\u0438\u044f \u0444\u0438\u0447\u0435\u0439 \u0438 \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u044f \u043d\u043e\u0432\u044b\u0445","770f2481":"# \u0414\u043b\u044f \u0447\u0438\u0441\u0442\u043e\u0442\u044b \u0443\u0434\u0430\u043b\u0438\u043c \u0440\u0430\u043d\u0435\u0435 \u0441\u043e\u0437\u0434\u0430\u043d\u043d\u044b\u0435 \u0434\u0430\u0442\u0430\u0441\u0435\u0442\u044b \u0438 \u0437\u0430\u0433\u0440\u0443\u0437\u0438\u043c \u0438\u0437 \u043f\u0435\u0440\u0432\u0438\u0447\u043d\u044b\u0445 \u0444\u0430\u0439\u043b\u043e\u0432\ndel train, test\ngc.collect()","4e54a05c":"# \u0437\u0430\u0433\u0440\u0443\u0437\u043a\u0430 \u0438\u0437 \u043f\u0435\u0440\u0432\u0438\u0447\u043d\u044b\u0445 \u0444\u0430\u0439\u043b\u043e\u0432\n\ntrain_identity = pd.read_csv(f'{folder_path}train_identity.csv')\ntrain_transaction = pd.read_csv(f'{folder_path}train_transaction.csv')\ntest_identity = pd.read_csv(f'{folder_path}test_identity.csv')\ntest_transaction = pd.read_csv(f'{folder_path}test_transaction.csv')\n  ","3b5160dd":"%%time\n# \u043a\u043b\u0435\u0442\u043e\u0447\u043d\u0430\u044f \u043c\u0430\u0433\u0438\u044f %% \u0434\u043e\u043b\u0436\u043d\u0430 \u043d\u0430\u0447\u0438\u043d\u0430\u0442\u044c\u0441\u044f \u0441 \u043f\u0435\u0440\u0432\u043e\u0439 \u0441\u0442\u0440\u043e\u043a\u0438 \u043f\u043e \u0441\u043e\u0433\u043b\u0430\u0448\u0435\u043d\u0438\u044e. \u0412\u043e\u0442 \u043f\u043e\u0447\u0435\u043c\u0443 \u043e\u043d\u0430 \u043d\u0430\u0437\u044b\u0432\u0430\u044e\u0442\u0441\u044f \u043a\u043b\u0435\u0442\u043e\u0447\u043d\u043e\u0439 \u043c\u0430\u0433\u0438\u0435\u0439 \ud83d\ude0a\n# \u0412\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u0435 \u043f\u0443\u043d\u043a\u0442\u043e\u0432 \u043d\u0438\u0436\u0435 \u0437\u0430\u0439\u043c\u0435\u0442 \u043d\u0435\u043a\u043e\u0442\u043e\u0440\u043e\u0435 \u0432\u0440\u0435\u043c\u044f \u043d\u043e \u0441\u043e\u043a\u0440\u0430\u0442\u0438\u0442 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0435 \u043f\u0430\u043c\u044f\u0442\u0438\ngc.collect()\ntrain_tr = reduce_mem_usage2(train_transaction)\ntrain_id = reduce_mem_usage2(train_identity)","fe5f6640":"%%time\ngc.collect()\ntest_tr = reduce_mem_usage2(test_transaction)\ntest_id = reduce_mem_usage2(test_identity)","06a7eca3":"del train_identity,train_transaction, test_identity, test_transaction\ngc.collect()","869d4edb":"# \u0441\u043e\u0437\u0434\u0430\u0434\u0438\u043c \u0442\u0440\u0438 \u0434\u0430\u0442\u0430\u0441\u0435\u0442\u0430: train, test \u0438 \u0438\u0445 \u043e\u0431\u044a\u0435\u0434\u0438\u043d\u0435\u043d\u0438\u0435 dataset\ntrain = pd.merge(train_tr, train_id, on='TransactionID', how='left')\ntest = pd.merge(test_tr, test_id, on='TransactionID', how='left')\ndataset = pd.concat([train, test], axis=0, sort=False).reset_index(drop=True)\ntrain_len = len(train)","d3018e95":"del train_tr, train_id, test_tr, test_id\ngc.collect()","63f3369f":"# \u0427\u0438\u0441\u043b\u043e\u0432\u044b\u0435 \u0444\u0438\u0447\u0438\nnum_cols = [col for col in dataset.columns if dataset[col].dtype in ['int8', 'int16', 'int32', 'int64', 'float16', 'float32', 'float64']]\ndataset[num_cols].describe()","034e009f":"#\u041a\u0430\u0442\u0435\u0433\u043e\u0440\u0438\u0430\u043b\u044c\u043d\u044b\u0435 \u0444\u0438\u0447\u0438\ncat_cols = [col for col in dataset.columns if dataset[col].dtype not in ['int8', 'int16', 'int32', 'int64', 'float16', 'float32', 'float64']]\ndataset[cat_cols].describe()","cfca6e53":"# \u043f\u043e \u0432\u0441\u0435\u043c \u043a\u0430\u0442\u0435\u0433\u043e\u0440\u0438\u0430\u043b\u044c\u043d\u044b\u043c \u0444\u0438\u0447\u0430\u043c \u0441\u0433\u0440\u0443\u043f\u043f\u0438\u0440\u0443\u0435\u043c \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f \u0438 \u043f\u043e\u0441\u0447\u0438\u0442\u0430\u0435\u043c \u0441\u0440\u0435\u0434\u043d\u0435\u0435 isFraud \nfor col in cat_cols:\n    print('-'*25+'['+col+']'+'-'*25)\n    print(dataset[[col, 'isFraud']].groupby(col).mean()*100)","d8c4c32f":"# \u041f\u0440\u0435\u043e\u0431\u0440\u0430\u0437\u043e\u0432\u0430\u043d\u0438\u044f \u0444\u0438\u0447\u0435\u0439 \u0438 \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u044f \u043d\u043e\u0432\u044b\u0445","20eb71dc":"# \u043f\u0440\u0435\u043e\u0431\u0440\u0430\u0437\u0443\u0435\u043c TransactionDT \u0432 \u0441\u0442\u0430\u043d\u0434\u0430\u0440\u0442\u043d\u0443\u044e \u0434\u0430\u0442\u0443 \u0438 \u0441\u043e\u0437\u0434\u0430\u0434\u0438\u043c \u043d\u043e\u0432\u0443\u044e \u0444\u0438\u0447\u0443 Date\nimport datetime\n\ngenesis = datetime.datetime.strptime('2019-01-01', '%Y-%m-%d')\ndataset['Date'] = dataset['TransactionDT'].apply(lambda x : genesis+datetime.timedelta(seconds=x))","95680fe2":"# \u0441\u043e\u0437\u0434\u0430\u0434\u0438\u043c \u043d\u043e\u0432\u044b\u0435 \u0444\u0438\u0447\u0438:\ndataset['Weekdays'] = dataset['Date'].dt.dayofweek\ndataset['Days'] = dataset['Date'].dt.day\ndataset['Hours'] = dataset['Date'].dt.hour","71dbb0ce":"fig, ax = plt.subplots(1, 3, figsize=(15, 5))\n\ng = sns.barplot(dataset[dataset.index<train_len].Weekdays, train.isFraud, ax=ax[0])\nax[0].set_title('Fraud Charges by Weekdays')\nplt.setp(g.get_xticklabels(), visible=False)\n\ng = sns.barplot(dataset[dataset.index<train_len].Days, train.isFraud, ax=ax[1])\nax[1].set_title('Fraud Charges by Days')\nplt.setp(g.get_xticklabels(), visible=False)\n\ng = sns.barplot(dataset[dataset.index<train_len].Hours, train.isFraud, ax=ax[2])\nax[2].set_title('Fraud Charges by Hours')\nplt.setp(g.get_xticklabels(), visible=False)\n\nplt.show()","5f277bdd":"# \u043c\u043e\u0436\u043d\u043e \u0443\u0432\u0438\u0434\u0438\u0434\u0435\u0442\u044c \u044f\u0432\u043d\u0443\u044e \u0437\u0430\u0432\u0438\u0441\u0438\u043c\u043e\u0441\u0442\u044c \u043e\u0442 \u0447\u0430\u0441\u043e\u0432 \u0438 \u0434\u043d\u0435\u0439 \u043d\u0435\u0434\u0435\u043b\u0438","eadb9859":"dataset.drop('Date', axis=1, inplace=True)","a6ff510b":"# \u041e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0430 \u0440\u0435\u0434\u043a\u0438\u0445 \u0438\u043b\u0438 \u043f\u0440\u043e\u043f\u0443\u0449\u0435\u043d\u043d\u044b\u0445 \u043f\u043e\u0447\u0442\u043e\u0432\u044b\u0445 \u0434\u043e\u043c\u0435\u043d\u043e\u0432","5a7ce93e":"print(dataset['P_emaildomain'].value_counts().head())\nprint('Data type : {}'.format(dataset['P_emaildomain'].dtype))","c50ca18a":"# \u043e\u0431\u044a\u0435\u0434\u0435\u043d\u0438\u043c \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f \u043d\u0435\u0441\u043a\u043e\u043b\u044c\u043a\u0438\u0445 \u043f\u043e\u0447\u0442\u043e\u0432\u044b\u0445 \u0434\u043e\u043c\u0435\u043d\u043e\u0432 \u0432 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435 \u0434\u0440\u0443\u0433\u0438\u0435 (etc)\ndataset.loc[(dataset.P_emaildomain!='gmail.com')&(dataset.P_emaildomain!='yahoo.com')&(dataset.P_emaildomain!='hotmail.com')&(dataset.P_emaildomain!='anonymous.com')&(dataset.P_emaildomain!='aol.com'), 'P_emaildomain'] = 'etc'","3ee99557":"sns.countplot(dataset['P_emaildomain'])\nfig = plt.gcf()\nfig.set_size_inches(10, 4)\nplt.show()","ab468bfa":"print(dataset['R_emaildomain'].value_counts().head())\nprint('Data type : {}'.format(dataset['P_emaildomain'].dtype))","5b3060e6":"sns.countplot(dataset['R_emaildomain'])\nfig = plt.gcf()\nfig.set_size_inches(10, 4)\nplt.show()","15ae070c":"# \u0410\u043d\u0430\u043b\u0438\u0437 \u043e\u043f\u0435\u0440\u0430\u0446\u0438\u043e\u043d\u043e\u043a","2c0cb70f":"top_os = dataset[['id_30', 'isFraud']].groupby(['id_30']).mean().sort_values(by=['isFraud'], ascending=False).head(10)\ntop_os.T","8a277dc7":"# \u0412\u044b\u0432\u043e\u0434: \u043e\u0431\u0432\u0438\u043d\u0435\u043d\u0438\u044f \u0432 \u043c\u043e\u0448\u0435\u043d\u043d\u0438\u0447\u0435\u0441\u0442\u0432\u0435 \u0432 \u043e\u0441\u043d\u043e\u0432\u043d\u043e\u043c \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043b\u0438\u0441\u044c \u043c\u043e\u0431\u0438\u043b\u044c\u043d\u044b\u043c\u0438 \u0443\u0441\u0442\u0440\u043e\u0439\u0441\u0442\u0432\u0430\u043c\u0438 \u0438\u043b\u0438 \u0443\u0441\u0442\u0440\u043e\u0439\u0441\u0442\u0432\u0430\u043c\u0438, \u0440\u0430\u0431\u043e\u0442\u0430\u044e\u0449\u0438\u043c\u0438 \u043f\u043e\u0434 \u0443\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u0438\u0435\u043c \u0440\u0435\u0434\u043a\u0438\u0445 \u043e\u043f\u0435\u0440\u0430\u0446\u0438\u043e\u043d\u043d\u044b\u0445 \u0441\u0438\u0441\u0442\u0435\u043c (\u043e\u0431\u043e\u0437\u043d\u0430\u0447\u0435\u043d\u043d\u044b\u0445 \u0434\u0440\u0443\u0433\u0438\u043c\u0438)","542c4509":"top_os = list(top_os.index)","469852e9":"all_os = list(dataset['id_30'].unique())\nsafe_os = [os for os in all_os if os not in top_os]","4207e104":"dataset.id_30.replace(safe_os, 'etc', inplace=True)","12c5c200":"dataset[['id_30', 'isFraud']].groupby(['id_30']).mean().T","f2cfbe08":"# \u0410\u043d\u0430\u043b\u0438\u0437 \u0431\u0440\u0430\u0443\u0437\u0435\u0440\u043e\u0432","9bd45c3f":"top_browsers = dataset[['id_31', 'isFraud']].groupby(['id_31']).mean().sort_values(by=['isFraud'], ascending=False).head(10)\ntop_browsers.T","f9c2f374":"top_browsers = list(top_browsers.index)","286c9455":"all_browsers = list(dataset['id_31'].unique())\nsafe_browsers = [brw for brw in all_browsers if brw not in top_browsers]","1beef1f2":"dataset.id_31.replace(safe_browsers, 'etc', inplace=True)","b9b2676f":"dataset[['id_31', 'isFraud']].groupby('id_31').mean().sort_values(by='isFraud', ascending=False).T","ba374bdf":"# \u0410\u043d\u0430\u043b\u0438\u0437 \u0440\u0430\u0437\u043c\u0435\u0440 \u044d\u043a\u0440\u0430\u043d\u0430\n# \u0440\u0430\u0437\u043c\u0435\u0440\u044b \u044d\u043a\u0440\u0430\u043d\u0430 \u043c\u043e\u0433\u0443\u0442 \u0431\u044b\u0442\u044c \u0444\u0430\u043a\u0442\u043e\u0440\u0430\u043c\u0438 \u0434\u043b\u044f \u043e\u0442\u0441\u043b\u0435\u0436\u0438\u0432\u0430\u043d\u0438\u044f \u043e\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u043d\u044b\u0445 \u0442\u0438\u043f\u043e\u0432 \u0443\u0441\u0442\u0440\u043e\u0439\u0441\u0442\u0432","d7bb12bf":"top_scrsz = dataset[['id_33', 'isFraud']].groupby(['id_33']).mean().sort_values(by=['isFraud'], ascending=False).head(15)\ntop_scrsz.T","577dc797":"top_scrsz = list(top_scrsz.index)","4d88bfc1":"all_scrsz = dataset['id_33'].unique()\nsafe_scrsz = [s for s in all_scrsz if s not in top_scrsz]","acb33480":"dataset.id_33.replace(safe_scrsz, 'etc', inplace=True)","fdd013ab":"dataset[['id_33', 'isFraud']].groupby('id_33').mean().sort_values(by='isFraud', ascending=False).T","eb2c8386":"# \u0410\u043d\u0430\u043b\u0438\u0437 \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u0438 \u043e\u0431 \u0443\u0441\u0442\u0440\u043e\u0439\u0441\u0442\u0432\u0435","ee073199":"top_dev = dataset[['DeviceInfo', 'isFraud']].groupby(['DeviceInfo']).mean().sort_values(by='isFraud', ascending=False).head(10)\ntop_dev.T","e4bc22cb":"top_dev = list(top_dev.loc[top_dev.isFraud>0.5].index)\ntop_dev","7fd36e5a":"all_dev = dataset['DeviceInfo'].unique()\nsafe_dev = [dev for dev in all_dev if dev not in top_dev]","ef572adb":"dataset.DeviceInfo.replace(safe_dev, 'etc', inplace=True)","bc2bca73":"dataset[['DeviceInfo', 'isFraud']].groupby('DeviceInfo').mean().sort_values(by=['isFraud'], ascending=False).T","e46cdde8":"# \u0412\u0435\u043a\u0442\u043e\u0440\u0438\u0437\u0430\u0446\u0438\u044f: one-hot\n","2ad76b70":"dataset_num = dataset.select_dtypes(exclude=['object'])\ndataset_num.head()","6aa65196":"dataset_cat = dataset.select_dtypes(include=['object'])\ndataset_cat.head()","484ac1a6":"print('Added Columns : {}'.format(sum(dataset_cat.nunique().values)-len(dataset_cat.columns)))","2b2d867e":"dataset_cat_new = pd.get_dummies(dataset_cat) #\u041f\u0440\u0435\u043e\u0431\u0440\u0430\u0437\u043e\u0432\u0430\u0442\u044c \u043a\u0430\u0442\u0435\u0433\u043e\u0440\u0438\u0430\u043b\u044c\u043d\u044b\u0435 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0438\ndataset = pd.concat([dataset_num, dataset_cat_new], axis=1) #\u0441\u0444\u043e\u0440\u043c\u0438\u0440\u0443\u0435\u043c \u043d\u043e\u0432\u044b\u0439 \u0434\u0430\u0442\u0430\u0441\u0435\u0442\ndataset.shape","2e6ed248":"dataset.drop('TransactionID', axis=1, inplace=True) # \u0443\u0434\u0430\u043b\u0438\u043c TransactionID\ndel dataset_num, dataset_cat\ngc.collect()","925fa6ae":"# \u041c\u043e\u0434\u0435\u043b\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435","86cbb8b8":"# \u041f\u043e\u0434\u0433\u043e\u0442\u043e\u0432\u043a\u0430 \u0434\u0430\u043d\u043d\u044b\u0445","6b232aec":"dataset.head()","5003f2c2":"# \u0438\u0437 \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u0430\u043d\u043d\u043e\u0433\u043e \u0434\u0430\u0442\u0430\u0441\u0435\u0442\u0430 \u0441\u0444\u043e\u0440\u043c\u0438\u0440\u0443\u0435\u043c train \u0438 test\ntrain = dataset[:train_len]\ntest = dataset[train_len:]","35b08409":"# \u0441\u0444\u043e\u0440\u043c\u0438\u0440\u0443\u0435\u043c \u0434\u0430\u0442\u0430\u0441\u0435\u0442\u044b \u0434\u043b\u044f \u043c\u043e\u0434\u0435\u043b\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f\ny = train.isFraud\nX = train.drop('isFraud', axis=1)\ntest_y = test.isFraud\ntest_X = test.drop('isFraud', axis=1)","152f4ebb":"print(train.head(5))","00b297cb":"for f in X.columns:\n    if X[f].dtype=='object' or test_X[f].dtype=='object': \n        lbl = preprocessing.LabelEncoder()\n        lbl.fit(list(X[f].values) + list(test_X[f].values))\n        X[f] = lbl.transform(list(X[f].values))\n        test_X[f] = lbl.transform(list(test_X[f].values))   ","3e86a41d":"np.unique(y)","a443551b":"# Light Gradient Boosting Machine(LGBM) ","fc830134":"from sklearn.model_selection import train_test_split\n\ntrain_X, val_X, train_y, val_y = train_test_split(X, y, test_size=0.2, random_state=0)","02864fbe":"%%time\nimport lightgbm as lgbm\n\nhyper = {\n    'num_leaves' : 500,\n    'min_child_weight': 0.03,\n    'feature_fraction': 0.4,\n    'bagging_fraction': 0.4,\n    'min_data_in_leaf': 100,\n    'objective': 'binary',\n    'max_depth': 6,\n    'learning_rate': 0.05,\n    'boosting_type': 'gbdt',\n    'bagging_seed': 10,\n    'metric': 'auc',\n    'verbosity': 0,\n    'reg_alpha': 0.4,\n    'reg_lambda': 0.6,\n    'random_state': 0\n}\n\ndtrain = lgbm.Dataset(train_X, label=train_y)\ndvalid = lgbm.Dataset(val_X, label=val_y)\nmodel = lgbm.train(hyper, dtrain, 10000, valid_sets=[dtrain, dvalid], verbose_eval=200, early_stopping_rounds=500) #\u043b\u0443\u0447\u0448\u0438\u0439 \u0440\u0435\u0437\u043b\u044c\u0442\u0430\u0442 \u0434\u0430\u0435\u0442 10000, \u0434\u043b\u044f \u0443\u0441\u043a\u043e\u0440\u0435\u043d\u0438\u044f \u043c\u043e\u0436\u043d\u043e \u0437\u0430\u0434\u0430\u0434\u0438\u043c 200\n# model = lgbm.train(hyper, dtrain, 200, valid_sets=[dtrain, dvalid], verbose_eval=200, early_stopping_rounds=500) #\u043b\u0443\u0447\u0448\u0438\u0439 \u0440\u0435\u0437\u043b\u044c\u0442\u0430\u0442 \u0434\u0430\u0435\u0442 10000, \u0434\u043b\u044f \u0443\u0441\u043a\u043e\u0440\u0435\u043d\u0438\u044f \u043c\u043e\u0436\u043d\u043e \u0437\u0430\u0434\u0430\u0434\u0438\u043c 200","f23bb543":"preds_lgb = model.predict(test_X)","f0cdbe45":"del train_X, val_X, train_y, val_y\ngc.collect()","bcb9d5cf":"# LGBM \u0434\u0430\u0435\u0442 \u043e\u0442\u043b\u0438\u0447\u043d\u044b\u0435 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u044b, \u043f\u0440\u0438\u043c\u0435\u043d\u0435\u043d\u0438\u0435 \u0434\u0440\u0443\u0433\u0438\u0445 \u043c\u0435\u0442\u043e\u0434\u043e\u0432 \u0432\u0440\u044f\u0434 \u043b\u0438 \u0438\u0445 \u0443\u043b\u0443\u0447\u0448\u0430\u0442 + \u043e\u043d\u0438 \u0432\u044b\u043f\u043e\u043b\u043d\u044f\u044e\u0442\u0441\u044f \u043e\u0447\u0435\u043d\u044c \u0434\u043e\u043b\u0433\u043e\n\nPr_Other = 0 # 0 - \u043d\u0435 \u043f\u0440\u0438\u043c\u0435\u043d\u044f\u0442\u044c \u0434\u0440\u0443\u0433\u0438\u0435 \u043c\u0435\u0442\u043e\u0434\u044b, 1 - \u043f\u0440\u0438\u043c\u0435\u043d\u044f\u0442\u044c","b17a67e8":"Pr_Test = 0\nif Pr_Test:\n    del y, X, test_y, test_X \n    gc.collect()\n    y = train.isFraud\n    X = train.drop('isFraud', axis=1)\n    test_y = test.isFraud\n    test_X = test.drop('isFraud', axis=1)","97148a19":"if Pr_Other:\n    # \u043f\u0440\u0438\u043c\u0435\u043d\u0435\u043d\u0438\u0435 \u0434\u0440\u0443\u0433\u0438\u0445 \u043c\u0435\u0442\u043e\u0434\u043e\u0432 \u0442\u0440\u0435\u0431\u0443\u0435\u0442 \u0431\u043e\u043b\u0435\u0435 \u0433\u043b\u0443\u0431\u043e\u043a\u0443\u044e \u043f\u043e\u0434\u0433\u043e\u0442\u043e\u0432\u043a\u0443 \u0434\u0430\u043d\u043d\u044b\u0445\n    \n    #\u0434\u0440\u043e\u043f\u043d\u0435\u043c \u043e\u0441\u0442\u0430\u0432\u0448\u0438\u0435\u0441\u044f \u043a\u0430\u0442\u0435\u0433\u043e\u0440\u0438\u0430\u043b\u044c\u043d\u044b\u0435 \u0444\u0438\u0447\u0438\n    categorical_feats = X.dtypes[ (train.dtypes == \"object\") | (train.dtypes == \"category\") ].index\n    categorical_feats_kol = len(categorical_feats)\n    X.drop(categorical_feats, axis=1, inplace=True)\n    test_X.drop(categorical_feats, axis=1, inplace=True)\n    \n    missing_values_count = X.isnull().sum()\n    print (missing_values_count[0:10])\n    total_cells = np.product(X.shape)\n    total_missing = missing_values_count.sum()\n    print (\"% \u0434\u043e fillna \u043f\u0440\u043e\u043f\u0443\u0449\u0435\u043d\u043d\u044b\u0445 \u0434\u0430\u043d\u043d\u044b\u0445 = \",(total_missing\/total_cells) * 100)\n    \n    X.fillna(-1,inplace=True)\n    test_X.fillna(-1,inplace=True)\n    \n    missing_values_count = X.isnull().sum()\n    print (missing_values_count[0:10])\n    total_cells = np.product(X.shape)\n    total_missing = missing_values_count.sum()\n    print (\"% \u043f\u043e\u0441\u043b\u0435 fillna \u043f\u0440\u043e\u043f\u0443\u0449\u0435\u043d\u043d\u044b\u0445 \u0434\u0430\u043d\u043d\u044b\u0445 = \",(total_missing\/total_cells) * 100)\n","924201a6":"if Pr_Other:\n    # \u041d\u043e\u0440\u043c\u0443\u043b\u0438\u0437\u0443\u0435\u043c D \u0444\u0438\u0447\u0438\n    for i in tqdm_notebook(range(1,16)):\n        if i in [1,2,3,5,9]: continue\n        X['D'+str(i)] =  X['D'+str(i)] - X.TransactionDT\/np.float32(24*60*60)\n        test_X['D'+str(i)] = test_X['D'+str(i)] - test_X.TransactionDT\/np.float32(24*60*60) ","7b852163":"if 0 & Pr_Other:\n    # \u0434\u043b\u044f \u0434\u0440\u0443\u0433\u0438\u0445 \u043c\u0435\u0442\u043e\u0434\u043e\u0432 \u0434\u0440\u043e\u043f\u043d\u0435\u043c \u0447\u0430\u0441\u0442\u044c \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u0438 \u0434\u043b\u044f \u043e\u0441\u0432\u043e\u0431\u043e\u0436\u0434\u0435\u043d\u0438\u044f \u043f\u0430\u043c\u044f\u0442\u0438\n    print(f\"\u0414\u043e \u0443\u0434\u0430\u043b\u0435\u043d\u0438\u044f, \u043f\u043e\u0441\u043c\u043e\u0442\u0440\u0438\u043c \u0442\u043e\u043f \u0444\u0438\u0447\u0435\u0439 \u0441 \u043f\u0440\u043e\u043f\u0443\u0449\u0435\u043d\u043d\u044b\u043c\u0438 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f\u043c\u0438:\\n{X.isna().sum().sort_values(ascending = False).head(5)}\\n\")\n    thresh = 0.80 #\u0418\u0437-\u0437\u0430 \u043c\u043d\u043e\u0436\u0435\u0441\u0442\u0432\u0430 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0439 NA (%), \u0442\u043e \u0447\u0442\u043e \u0431\u043e\u043b\u044c\u0448\u0435 80% - \u044d\u0442\u043e \u0441\u043b\u0438\u0448\u043a\u043e\u043c \u043c\u043d\u043e\u0433\u043e - \u0448\u0443\u043c\n    X_less_nas = X.dropna(thresh=X.shape[0]*(1-thresh), axis='columns')\n    cols_dropped  = list(set(X.columns)-set(X_less_nas.columns))\n    test_X.drop(cols_dropped, axis=1, inplace=True)\n    print(f\"\u041f\u043e\u0441\u043b\u0435 \u0443\u0434\u0430\u043b\u0435\u043d\u0438\u044f, \u0442\u043e\u043f \u0444\u0438\u0447\u0435\u0439 \u0441 \u043f\u0440\u043e\u043f\u0443\u0449\u0435\u043d\u043d\u044b\u043c\u0438 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f\u043c\u0438:\\n{X_less_nas.isna().sum().sort_values(ascending = False).head(5)}\")\n    print(f\"\\n\u041a\u043e\u043b-\u0432\u043e \u0443\u0434\u0430\u043b\u0435\u043d\u043d\u044b\u0445 \u0444\u0438\u0447\u0435\u0439 = {len(set(X.columns)-set(X_less_nas.columns))}, or {len(set(X.columns)-set(X_less_nas.columns))\/len(X.columns)*100:.2f}% \u0444\u0438\u0447\u0435\u0439\")\n    X = X_less_nas\n    del X_less_nas\n    gc.collect()","7e7d688c":"if 0 & Pr_Other:\n    cols = ['ProductCD', 'card4', 'R_emaildomain', 'M1', 'M2', 'M3', 'M4', 'M5', 'M6', 'M7', 'M8', 'M9', 'id_12', 'id_15', 'id_16', 'id_28', 'id_29', 'id_35', 'id_36', 'id_37', 'id_38', 'DeviceType']\n    for col in cols:\n        print('-'*25+'['+col+']'+'-'*25)\n        print(dataset[[col, 'isFraud']].groupby(col).mean()*100)\n    X.drop(cols,axis=1, inplace=True)\n    test_X.drop(cols, axis=1, inplace=True)","85927249":"Pr_SVC = 0\nif Pr_SVC & Pr_Other: # \u043e\u0447\u0435\u043d\u044c \u0434\u043e\u043b\u0433\u043e \u0432\u044b\u043f\u043e\u043b\u043d\u044f\u0435\u0442\u0441\u044f\n    from sklearn.model_selection import GridSearchCV\n    from sklearn.svm import SVC\n    param_grid = {'C': [0.1,10, 100, 1000,5000], 'gamma': [1,0.1,0.01,0.001,0.0001], 'kernel': ['rbf']}\n    svc_grid = GridSearchCV(SVC(), param_grid, cv=10, refit=True, verbose=1, scoring='roc_auc')\n    svc_grid.fit(X,y)\n    sc_svc = get_best_score(svc_grid)\n    pred_all_svc = svc_grid.predict(test_X)\n","242a406d":"Pr_knn = 0 # \u043e\u0447\u0435\u043d\u044c \u0434\u043e\u043b\u0433\u043e \u0432\u044b\u043f\u043e\u043b\u043d\u044f\u0435\u0442\u0441\u044f, \u043f\u0430\u043c\u044f\u0442\u044c \u043f\u0435\u0440\u0435\u043f\u043e\u043b\u043d\u044f\u0435\u0442\u0441\u044f\nif Pr_knn & Pr_Other:\n    from sklearn.neighbors import KNeighborsClassifier\n    knn = KNeighborsClassifier()\n    #leaf_range = list(range(3, 15, 1))\n    #k_range = list(range(1, 15, 1))\n    leaf_range = list(range(3, 4, 1))\n    k_range = list(range(1, 2, 1))\n    weight_options = ['uniform', 'distance']\n    param_grid = dict(leaf_size=leaf_range, n_neighbors=k_range, weights=weight_options)\n    print(param_grid)\n\n    knn_grid = GridSearchCV(knn, param_grid, cv=10, verbose=1, scoring='roc_auc')\n    knn_grid.fit(X, y)\n    sc_knn = get_best_score(knn_grid)\n    pred_all_knn = knn_grid.predict(test_X)\n    print('KNN: ', roc_auc_score(test_y, pred_all_knn))    ","ce49cc76":"Pr_Tree = 0 # \u043e\u0447\u0435\u043d\u044c \u0434\u043e\u043b\u0433\u043e \u0432\u044b\u043f\u043e\u043b\u043d\u044f\u0435\u0442\u0441\u044f, \u043f\u0430\u043c\u044f\u0442\u044c \u043d\u0435 \u043f\u0435\u0440\u0435\u043f\u043e\u043b\u043d\u044f\u0435\u0442\u0441\u044f\nif Pr_Tree & Pr_Other:\n    from sklearn.tree import DecisionTreeClassifier\n    from sklearn.model_selection import GridSearchCV\n\n    dtree = DecisionTreeClassifier()\n    param_grid = {'min_samples_split': [4,7,10,12]}\n    dtree_grid = GridSearchCV(dtree, param_grid, cv=10, refit=True, verbose=1)\n    dtree_grid.fit(X,y)\n    pred_all_dtree = dtree_grid.predict(test_X)\n    print('Tree: ', roc_auc_score(test_y, pred_all_dtree))    \n    #print(dtree_grid.best_score_)\n    #print(dtree_grid.best_params_)\n    #print(dtree_grid.best_estimator_)\n    ","bb095b68":"# Submission","ae80edba":"submission = sub \nsubmission['isFraud'] = np.nan\nsubmission.head()","82794354":"submission['isFraud'] = preds_lgb\nsubmission.head()","25a9be6f":"submission.to_csv('submission_demin_3.csv', index=False)","311828d6":"sub.loc[ sub['isFraud']>0.99 , 'isFraud'] = 1\nb = plt.hist(sub['isFraud'], bins=50)","94a81e33":"# del sub\ngc.collect()","6b4cee76":"\u041f\u043e\u0441\u0442\u0430\u043d\u043e\u0432\u043a\u0430 \u0437\u0430\u0434\u0430\u0447\u0438:\n\n\u041f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u044c\u0442\u0435 \u0441\u0435\u0431\u0435, \u0447\u0442\u043e \u0432\u044b \u0441\u0442\u043e\u0438\u0442\u0435 \u0443 \u043a\u0430\u0441\u0441\u044b \u0432 \u043f\u0440\u043e\u0434\u0443\u043a\u0442\u043e\u0432\u043e\u043c \u043c\u0430\u0433\u0430\u0437\u0438\u043d\u0435 \u0441 \u0434\u043b\u0438\u043d\u043d\u043e\u0439 \u043e\u0447\u0435\u0440\u0435\u0434\u044c\u044e \u0437\u0430 \u0432\u0430\u043c\u0438, \u0438 \u043a\u0430\u0441\u0441\u0438\u0440 \u043d\u0435 \u0442\u0430\u043a \u0442\u0438\u0445\u043e \u043e\u0431\u044a\u044f\u0432\u043b\u044f\u0435\u0442, \u0447\u0442\u043e \u0432\u0430\u0448\u0430 \u043a\u0430\u0440\u0442\u0430 \u0431\u044b\u043b\u0430 \u043e\u0442\u043a\u043b\u043e\u043d\u0435\u043d\u0430. \u0412 \u044d\u0442\u043e\u0442 \u043c\u043e\u043c\u0435\u043d\u0442 \u0432\u044b, \u0432\u0435\u0440\u043e\u044f\u0442\u043d\u043e, \u043d\u0435 \u0434\u0443\u043c\u0430\u0435\u0442\u0435 \u043e \u043d\u0430\u0443\u043a\u0435 \u043e \u0434\u0430\u043d\u043d\u044b\u0445, \u043a\u043e\u0442\u043e\u0440\u0430\u044f \u043e\u043f\u0440\u0435\u0434\u0435\u043b\u0438\u043b\u0430 \u0432\u0430\u0448\u0443 \u0441\u0443\u0434\u044c\u0431\u0443.\n\n\u0421\u043c\u0443\u0449\u0435\u043d\u043d\u044b\u0439, \u0438, \u043d\u0430\u0432\u0435\u0440\u043d\u044f\u043a\u0430, \u0443 \u0432\u0430\u0441 \u0435\u0441\u0442\u044c \u0441\u0440\u0435\u0434\u0441\u0442\u0432\u0430, \u0447\u0442\u043e\u0431\u044b \u043f\u043e\u043a\u0440\u044b\u0442\u044c \u0432\u0441\u0435 \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e\u0435 \u0434\u043b\u044f \u044d\u043f\u0438\u0447\u0435\u0441\u043a\u043e\u0439 \u0432\u0435\u0447\u0435\u0440\u0438\u043d\u043a\u0438 \u043d\u0430\u0447\u043e \u0434\u043b\u044f 50 \u0432\u0430\u0448\u0438\u0445 \u0441\u0430\u043c\u044b\u0445 \u0431\u043b\u0438\u0437\u043a\u0438\u0445 \u0434\u0440\u0443\u0437\u0435\u0439, \u0432\u044b \u043f\u0440\u043e\u0431\u0443\u0435\u0442\u0435 \u0441\u0432\u043e\u044e \u043a\u0430\u0440\u0442\u0443 \u0441\u043d\u043e\u0432\u0430. \u0422\u043e\u0442 \u0436\u0435 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442. \u041e\u0442\u043e\u0439\u0434\u044f \u0432 \u0441\u0442\u043e\u0440\u043e\u043d\u0443 \u0438 \u0440\u0430\u0437\u0440\u0435\u0448\u0438\u0432 \u043a\u0430\u0441\u0441\u0438\u0440\u0443 \u0443\u0445\u0430\u0436\u0438\u0432\u0430\u0442\u044c \u0437\u0430 \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0438\u043c \u043a\u043b\u0438\u0435\u043d\u0442\u043e\u043c, \u0432\u044b \u043f\u043e\u043b\u0443\u0447\u0438\u0442\u0435 \u0442\u0435\u043a\u0441\u0442\u043e\u0432\u043e\u0435 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435 \u043e\u0442 \u0441\u0432\u043e\u0435\u0433\u043e \u0431\u0430\u043d\u043a\u0430. \u00ab\u041d\u0430\u0436\u043c\u0438\u0442\u0435 1, \u0435\u0441\u043b\u0438 \u0432\u044b \u0434\u0435\u0439\u0441\u0442\u0432\u0438\u0442\u0435\u043b\u044c\u043d\u043e \u043f\u044b\u0442\u0430\u043b\u0438\u0441\u044c \u043f\u043e\u0442\u0440\u0430\u0442\u0438\u0442\u044c 500 \u0434\u043e\u043b\u043b\u0430\u0440\u043e\u0432 \u043d\u0430 \u0441\u044b\u0440 \u0447\u0435\u0434\u0434\u0435\u0440\u00bb.\n\n\u0425\u043e\u0442\u044f \u044d\u0442\u0430 \u0441\u0438\u0441\u0442\u0435\u043c\u0430 \u043f\u0440\u0435\u0434\u043e\u0442\u0432\u0440\u0430\u0449\u0435\u043d\u0438\u044f \u043c\u043e\u0448\u0435\u043d\u043d\u0438\u0447\u0435\u0441\u0442\u0432\u0430 \u043c\u043e\u0436\u0435\u0442 \u0431\u044b\u0442\u044c \u0433\u0440\u043e\u043c\u043e\u0437\u0434\u043a\u043e\u0439 (\u0438 \u0437\u0430\u0447\u0430\u0441\u0442\u0443\u044e \u0441\u043c\u0443\u0449\u0430\u044e\u0449\u0435\u0439) \u043d\u0430 \u0434\u0430\u043d\u043d\u044b\u0439 \u043c\u043e\u043c\u0435\u043d\u0442, \u043e\u043d\u0430 \u043d\u0430 \u0441\u0430\u043c\u043e\u043c \u0434\u0435\u043b\u0435 \u044d\u043a\u043e\u043d\u043e\u043c\u0438\u0442 \u043f\u043e\u0442\u0440\u0435\u0431\u0438\u0442\u0435\u043b\u044f\u043c \u043c\u0438\u043b\u043b\u0438\u043e\u043d\u044b \u0434\u043e\u043b\u043b\u0430\u0440\u043e\u0432 \u0432 \u0433\u043e\u0434. \u0418\u0441\u0441\u043b\u0435\u0434\u043e\u0432\u0430\u0442\u0435\u043b\u0438 \u0438\u0437 \u041e\u0431\u0449\u0435\u0441\u0442\u0432\u0430 \u0432\u044b\u0447\u0438\u0441\u043b\u0438\u0442\u0435\u043b\u044c\u043d\u043e\u0439 \u0440\u0430\u0437\u0432\u0435\u0434\u043a\u0438 IEEE (IEEE-CIS) \u0445\u043e\u0442\u044f\u0442 \u0443\u043b\u0443\u0447\u0448\u0438\u0442\u044c \u044d\u0442\u0443 \u0446\u0438\u0444\u0440\u0443, \u043e\u0434\u043d\u043e\u0432\u0440\u0435\u043c\u0435\u043d\u043d\u043e \u0443\u043b\u0443\u0447\u0448\u0430\u044f \u043a\u0430\u0447\u0435\u0441\u0442\u0432\u043e \u043e\u0431\u0441\u043b\u0443\u0436\u0438\u0432\u0430\u043d\u0438\u044f \u043a\u043b\u0438\u0435\u043d\u0442\u043e\u0432. \u0411\u043b\u0430\u0433\u043e\u0434\u0430\u0440\u044f \u0431\u043e\u043b\u0435\u0435 \u0432\u044b\u0441\u043e\u043a\u043e\u0439 \u0442\u043e\u0447\u043d\u043e\u0441\u0442\u0438 \u043e\u0431\u043d\u0430\u0440\u0443\u0436\u0435\u043d\u0438\u044f \u043c\u043e\u0448\u0435\u043d\u043d\u0438\u0447\u0435\u0441\u0442\u0432\u0430 \u0432\u044b \u043c\u043e\u0436\u0435\u0442\u0435 \u0431\u0435\u0437 \u043f\u0440\u043e\u0431\u043b\u0435\u043c \u0441\u043f\u0440\u0430\u0432\u0438\u0442\u044c\u0441\u044f \u0441\u043e \u0441\u0432\u043e\u0438\u043c\u0438 \u0447\u0438\u043f\u0430\u043c\u0438.\n\nIEEE-CIS \u0440\u0430\u0431\u043e\u0442\u0430\u0435\u0442 \u0432\u043e \u043c\u043d\u043e\u0436\u0435\u0441\u0442\u0432\u0435 \u043e\u0431\u043b\u0430\u0441\u0442\u0435\u0439 \u0438\u0441\u043a\u0443\u0441\u0441\u0442\u0432\u0435\u043d\u043d\u043e\u0433\u043e \u0438\u043d\u0442\u0435\u043b\u043b\u0435\u043a\u0442\u0430 \u0438 \u043c\u0430\u0448\u0438\u043d\u043d\u043e\u0433\u043e \u043e\u0431\u0443\u0447\u0435\u043d\u0438\u044f, \u0432\u043a\u043b\u044e\u0447\u0430\u044f \u0433\u043b\u0443\u0431\u043e\u043a\u0438\u0435 \u043d\u0435\u0439\u0440\u043e\u043d\u043d\u044b\u0435 \u0441\u0435\u0442\u0438, \u043d\u0435\u0447\u0435\u0442\u043a\u0438\u0435 \u0441\u0438\u0441\u0442\u0435\u043c\u044b, \u044d\u0432\u043e\u043b\u044e\u0446\u0438\u043e\u043d\u043d\u044b\u0435 \u0432\u044b\u0447\u0438\u0441\u043b\u0435\u043d\u0438\u044f \u0438 \u0438\u043d\u0442\u0435\u043b\u043b\u0435\u043a\u0442\u0443\u0430\u043b\u044c\u043d\u044b\u0439 \u0440\u043e\u0439. \u0421\u0435\u0433\u043e\u0434\u043d\u044f \u043e\u043d\u0438 \u0441\u043e\u0442\u0440\u0443\u0434\u043d\u0438\u0447\u0430\u044e\u0442 \u0441 \u0432\u0435\u0434\u0443\u0449\u0435\u0439 \u0432 \u043c\u0438\u0440\u0435 \u043f\u043b\u0430\u0442\u0435\u0436\u043d\u043e\u0439 \u043a\u043e\u043c\u043f\u0430\u043d\u0438\u0435\u0439 Vesta Corporation, \u0438\u0449\u0430 \u043b\u0443\u0447\u0448\u0438\u0435 \u0440\u0435\u0448\u0435\u043d\u0438\u044f \u0434\u043b\u044f \u0438\u043d\u0434\u0443\u0441\u0442\u0440\u0438\u0438 \u043f\u0440\u0435\u0434\u043e\u0442\u0432\u0440\u0430\u0449\u0435\u043d\u0438\u044f \u043c\u043e\u0448\u0435\u043d\u043d\u0438\u0447\u0435\u0441\u0442\u0432\u0430, \u0438 \u0442\u0435\u043f\u0435\u0440\u044c \u0432\u044b \u043f\u0440\u0438\u0433\u043b\u0430\u0448\u0435\u043d\u044b \u043f\u0440\u0438\u0441\u043e\u0435\u0434\u0438\u043d\u0438\u0442\u044c\u0441\u044f \u043a \u044d\u0442\u043e\u0439 \u0437\u0430\u0434\u0430\u0447\u0435.\n\n\u0412 \u044d\u0442\u043e\u043c \u043a\u043e\u043d\u043a\u0443\u0440\u0441\u0435 \u0432\u044b \u0431\u0443\u0434\u0435\u0442\u0435 \u0442\u0435\u0441\u0442\u0438\u0440\u043e\u0432\u0430\u0442\u044c \u043c\u043e\u0434\u0435\u043b\u0438 \u043c\u0430\u0448\u0438\u043d\u043d\u043e\u0433\u043e \u043e\u0431\u0443\u0447\u0435\u043d\u0438\u044f \u0432 \u0441\u043b\u043e\u0436\u043d\u043e\u043c \u043a\u0440\u0443\u043f\u043d\u043e\u043c\u0430\u0441\u0448\u0442\u0430\u0431\u043d\u043e\u043c \u043d\u0430\u0431\u043e\u0440\u0435 \u0434\u0430\u043d\u043d\u044b\u0445. \u0414\u0430\u043d\u043d\u044b\u0435 \u043f\u043e\u0441\u0442\u0443\u043f\u0430\u044e\u0442 \u0438\u0437 \u0440\u0435\u0430\u043b\u044c\u043d\u044b\u0445 \u0442\u0440\u0430\u043d\u0437\u0430\u043a\u0446\u0438\u0439 \u044d\u043b\u0435\u043a\u0442\u0440\u043e\u043d\u043d\u043e\u0439 \u043a\u043e\u043c\u043c\u0435\u0440\u0446\u0438\u0438 Vesta \u0438 \u0441\u043e\u0434\u0435\u0440\u0436\u0430\u0442 \u0448\u0438\u0440\u043e\u043a\u0438\u0439 \u0441\u043f\u0435\u043a\u0442\u0440 \u0444\u0443\u043d\u043a\u0446\u0438\u0439 \u043e\u0442 \u0442\u0438\u043f\u0430 \u0443\u0441\u0442\u0440\u043e\u0439\u0441\u0442\u0432\u0430 \u0434\u043e \u0444\u0443\u043d\u043a\u0446\u0438\u0439 \u043f\u0440\u043e\u0434\u0443\u043a\u0442\u0430. \u0423 \u0432\u0430\u0441 \u0442\u0430\u043a\u0436\u0435 \u0435\u0441\u0442\u044c \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e\u0441\u0442\u044c \u0441\u043e\u0437\u0434\u0430\u0432\u0430\u0442\u044c \u043d\u043e\u0432\u044b\u0435 \u0444\u0443\u043d\u043a\u0446\u0438\u0438 \u0434\u043b\u044f \u0443\u043b\u0443\u0447\u0448\u0435\u043d\u0438\u044f \u0432\u0430\u0448\u0438\u0445 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u043e\u0432.\n\n\u0412 \u0441\u043b\u0443\u0447\u0430\u0435 \u0443\u0441\u043f\u0435\u0445\u0430 \u0432\u044b \u043f\u043e\u0432\u044b\u0441\u0438\u0442\u0435 \u044d\u0444\u0444\u0435\u043a\u0442\u0438\u0432\u043d\u043e\u0441\u0442\u044c \u043f\u0440\u0435\u0434\u0443\u043f\u0440\u0435\u0436\u0434\u0435\u043d\u0438\u0439 \u043e \u043c\u043e\u0448\u0435\u043d\u043d\u0438\u0447\u0435\u0441\u043a\u0438\u0445 \u0442\u0440\u0430\u043d\u0437\u0430\u043a\u0446\u0438\u044f\u0445 \u0434\u043b\u044f \u043c\u0438\u043b\u043b\u0438\u043e\u043d\u043e\u0432 \u043b\u044e\u0434\u0435\u0439 \u0432\u043e \u0432\u0441\u0435\u043c \u043c\u0438\u0440\u0435, \u043f\u043e\u043c\u043e\u0433\u0430\u044f \u0441\u043e\u0442\u043d\u044f\u043c \u0442\u044b\u0441\u044f\u0447 \u043a\u043e\u043c\u043f\u0430\u043d\u0438\u0439 \u0441\u043e\u043a\u0440\u0430\u0442\u0438\u0442\u044c \u043f\u043e\u0442\u0435\u0440\u0438 \u043e\u0442 \u043c\u043e\u0448\u0435\u043d\u043d\u0438\u0447\u0435\u0441\u0442\u0432\u0430 \u0438 \u0443\u0432\u0435\u043b\u0438\u0447\u0438\u0442\u044c \u0441\u0432\u043e\u0438 \u0434\u043e\u0445\u043e\u0434\u044b. \u0418, \u043a\u043e\u043d\u0435\u0447\u043d\u043e \u0436\u0435, \u0432\u044b \u0438\u0437\u0431\u0430\u0432\u0438\u0442\u0435 \u0442\u0443\u0441\u043e\u0432\u0449\u0438\u043a\u043e\u0432, \u043a\u0430\u043a \u0438 \u0432\u044b, \u043e\u0442 \u0445\u043b\u043e\u043f\u043e\u0442 \u043b\u043e\u0436\u043d\u044b\u0445 \u0441\u0440\u0430\u0431\u0430\u0442\u044b\u0432\u0430\u043d\u0438\u0439.\n"}}