{"cell_type":{"d08ecb1f":"code","4078c649":"code","8f4f8e07":"code","11da5860":"markdown","e604dc4d":"markdown"},"source":{"d08ecb1f":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport pandas as pd\nimport numpy as np\nimport os\nimport tensorflow as tf\nimport cv2\nimport matplotlib.pyplot as plt\nimport matplotlib.image as mpimg\nfrom keras.preprocessing.image import ImageDataGenerator\n\ndatagen = ImageDataGenerator(rescale=1.\/255) \nbatch_size = 10\ndef extract_features(directory, sample_count): \n    features = np.zeros(shape=(sample_count, 4, 4, 512)) \n    labels = np.zeros(shape=(sample_count,3)) \n    generator = datagen.flow_from_directory(directory, target_size=(32, 32), batch_size=batch_size, class_mode='categorical')\n    i=0\nfor inputs_batch, labels_batch in generator:\n    #print((labels_batch))\n    features_batch = conv_base.predict(inputs_batch)\n    features[i * batch_size : (i + 1) * batch_size] = features_batch \n    labels[i * batch_size : (i + 1) * batch_size] = labels_batch\n    i += 1\n    if i * batch_size >= sample_count:\n        # Note that since generators yield data indefinitely in a loop, # we must `break` after every image has been seen once. break\n    return [features, labels]\n\n#img = cv2.imread(\"..\/input\/train-cassava\/train\/healthy\/train-healthy-0.jpg\", cv2.COLOR_BGR2GRAY)\n#plt.imshow(img)\n\ndatadir = \"..\/input\/train-cassava\/train\"\ndatadir_cbb = datadir + '\/cbb' \ndatadir_cbsd = datadir + '\/cbsd' \ndatadir_cgm = datadir + '\/cgm' \ndatadir_cmd = datadir + '\/cmd' \ndatadir_healthy = datadir + '\/healthy' \n\n#grayscaling and coloring grayscaled images using CV\n\nfor img in os.listdir(datadir_cbb):\n    gray_img_array1=cv2.imread(datadir_cbb, cv2.COLOR_BGR2GRAY)\n    break  \n    \nfor img in os.listdir(gray_img_array1):\n    colored_img_array1=cv2.imread(gray_img_array1, cv2.COLOR_GRAY2RGB)\n    break  \n    \nfor img in os.listdir(datadir_cbsd):\n    gray_img_array2=cv2.imread(datadir_cbsd, cv2.COLOR_BGR2GRAY)\n    break  \n    \nfor img in os.listdir(gray_img_array2):\n    colored_img_array2=cv2.imread(gray_img_array2, cv2.COLOR_GRAY2RGB)\n    break  \n    \nfor img in os.listdir(datadir_cgm):\n    gray_img_array3=cv2.imread(datadir_cgm, cv2.COLOR_BGR2GRAY)\n    break  \n    \nfor img in os.listdir(gray_img_array3):\n    colored_img_array3=cv2.imread(gray_img_array3, cv2.COLOR_GRAY2RGB)\n    break \n    \nfor img in os.listdir(datadir_cmd):\n    gray_img_array4=cv2.imread(datadir_cmd, cv2.COLOR_BGR2GRAY)\n    break  \n    \nfor img in os.listdir(gray_img_array4):\n    colored_img_array4=cv2.imread(gray_img_array4, cv2.COLOR_GRAY2RGB)\n    break \n    \nfor img in os.listdir(datadir_healthy):\n    gray_img_array5=cv2.imread(datadir_healthy, cv2.COLOR_BGR2GRAY)\n    break  \n    \nfor img in os.listdir(gray_img_array5):\n    colored_img_array5=cv2.imread(gray_img_array5, cv2.COLOR_GRAY2RGB)\n    break \n\ntrain_features, train_labels = extract_features(datadir, 90)\n    ","4078c649":"from keras.models import Sequential\nfrom keras.layers.core import Flatten, Dense, Dropout\nfrom keras.layers.convolutional import Convolution2D, MaxPooling2D, ZeroPadding2D\nfrom keras.optimizers import SGD\ndef VGG_16(weights_path=None):\n    model = Sequential()\n    model.add(ZeroPadding2D((1,1),input_shape=(3,224,224)))\n    model.add(Convolution2D(64, 3, 3, activation='relu'))\n    model.add(ZeroPadding2D((1,1)))\n    model.add(Convolution2D(64, 3, 3, activation='relu'))\n    model.add(MaxPooling2D((2,2), strides=(2,2)))\n\n    model.add(ZeroPadding2D((1,1)))\n    model.add(Convolution2D(128, 3, 3, activation='relu'))\n    model.add(ZeroPadding2D((1,1)))\n    model.add(Convolution2D(128, 3, 3, activation='relu'))\n    model.add(MaxPooling2D((2,2), strides=(2,2)))\n\n    model.add(ZeroPadding2D((1,1)))\n    model.add(Convolution2D(256, 3, 3, activation='relu'))\n    model.add(ZeroPadding2D((1,1)))\n    model.add(Convolution2D(256, 3, 3, activation='relu'))\n    model.add(ZeroPadding2D((1,1)))\n    model.add(Convolution2D(256, 3, 3, activation='relu'))\n    model.add(MaxPooling2D((2,2), strides=(2,2)))\n\n    model.add(ZeroPadding2D((1,1)))\n    model.add(Convolution2D(512, 3, 3, activation='relu'))\n    model.add(ZeroPadding2D((1,1)))\n    model.add(Convolution2D(512, 3, 3, activation='relu'))\n    model.add(ZeroPadding2D((1,1)))\n    model.add(Convolution2D(512, 3, 3, activation='relu'))\n    model.add(MaxPooling2D((2,2), strides=(2,2)))\n\n    model.add(ZeroPadding2D((1,1)))\n    model.add(Convolution2D(512, 3, 3, activation='relu'))\n    model.add(ZeroPadding2D((1,1)))\n    model.add(Convolution2D(512, 3, 3, activation='relu'))\n    model.add(ZeroPadding2D((1,1)))\n    model.add(Convolution2D(512, 3, 3, activation='relu'))\n    model.add(MaxPooling2D((2,2), strides=(2,2)))\n\n    model.add(Flatten())\n    model.add(Dense(4096, activation='relu'))\n    model.add(Dropout(0.5))\n    model.add(Dense(4096, activation='relu'))\n    model.add(Dropout(0.5))\n    model.add(Dense(1000, activation='softmax'))\n\n    if weights_path:\n        model.load_weights(weights_path)\n    return model\nfrom keras import models \nfrom keras import layers \nfrom keras import optimizers\nmodel = models.Sequential()\nmodel.add(layers.Dense(256, activation='relu', input_dim=4 * 4 * 512)) \nmodel.add(layers.Dropout(0.5))\nmodel.add(layers.Dense(3, activation='sigmoid'))\nmodel.compile(optimizer=optimizers.RMSprop(lr=2e-5), loss='categorical_crossentropy',\nmetrics=['acc'])\nhistory = model.fit(train_features, train_labels, \n                    epochs=30,\n                    batch_size=10)","8f4f8e07":"acc = history.history['acc'] \nloss = history.history['loss'] \nepochs = range(len(acc))\nplt.plot(epochs, acc, 'bo', label='Training acc')  \nplt.title('Training accuracy') \nplt.legend()\nplt.figure()\nplt.plot(epochs, loss, 'bo', label='Training loss') \nplt.title('Training loss')\nplt.legend()\nplt.show()","11da5860":"this code is to set the conv layer for VGG16 using this source: https:\/\/gist.github.com\/baraldilorenzo\/07d7802847aaad0a35d3","e604dc4d":"#the first code is to upload and change data to grayscale and colorgrayscaled images using CV library"}}