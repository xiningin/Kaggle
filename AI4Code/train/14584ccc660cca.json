{"cell_type":{"860be0cf":"code","00ceedba":"code","474c7875":"code","17c5661b":"code","9262a2fd":"code","8995d417":"code","fb38750d":"code","95c0fd3e":"code","fbf986be":"code","b3bb7af3":"code","a9c07716":"code","5ef7e382":"code","d079eb2b":"code","de5f5558":"code","6c96e9ee":"code","771bb22c":"code","81a6bdb3":"code","0f260e1c":"code","4ada6fd5":"code","2e1fbca3":"code","43b7a418":"code","465e2048":"code","5d2bd3b5":"code","a1d12683":"code","b0deb550":"code","d1c8cdab":"code","dcb27a96":"code","a304d7fb":"code","91102663":"code","88e729ac":"code","c85e6ba8":"code","aff0d8b1":"code","760f7521":"code","f9ee2ab2":"code","06173d80":"code","7f019462":"code","9cd88729":"code","2b9c31a2":"code","8c50186e":"code","01947d9c":"code","d6442860":"code","ee1f3edd":"code","3ad005db":"code","eb4fb058":"code","666bc268":"code","57b752ec":"code","59ce2303":"code","a541250b":"code","7df395ad":"code","6466cfee":"code","6cfe320f":"code","0996d9e5":"code","5c59236e":"code","05182711":"code","f5f79c8d":"code","9152a9b6":"code","9a5d9cd7":"code","ac02f55a":"code","0f118b8b":"code","023f0473":"code","2675989f":"code","d30f5106":"code","01ca35aa":"code","8ce4af49":"code","10049ee4":"code","0122ae44":"code","be6288bd":"code","11a2b55e":"code","4d4d5e20":"code","af0989c1":"code","241860ca":"code","b20d850e":"code","2ff8d911":"code","6ccd907c":"code","5e8e6910":"code","c7d19122":"code","5baff75e":"code","02a7dc0d":"code","86f8f8d1":"code","5b3b9894":"code","14c2bc3a":"code","6ee40299":"code","08286144":"code","643fd994":"code","5be5b746":"code","e32ec6d0":"code","0d66d49d":"code","5f49cf64":"code","d7be5f91":"code","b6515d84":"code","fe1612fb":"code","a0bf9b73":"markdown","c1297401":"markdown","1f15aabb":"markdown","209d160b":"markdown","29663fdd":"markdown","95832da0":"markdown","0a4359db":"markdown","c8f83969":"markdown","0ac2a40d":"markdown","da5676e7":"markdown","a1c0bec1":"markdown","fbda85af":"markdown","ec7cca9c":"markdown","f5c482de":"markdown","eae37485":"markdown","5e2c55c6":"markdown","199b9e60":"markdown","6d8df318":"markdown","4f6e769c":"markdown","e9b0dacc":"markdown","73a5d324":"markdown","c1ed0bac":"markdown","fa55d01b":"markdown","bc7a4978":"markdown","e795ab67":"markdown","2c7fb696":"markdown","8f1cafb4":"markdown","030b5423":"markdown","47bc9948":"markdown","45200406":"markdown","28b49600":"markdown","7523cb05":"markdown","3a796737":"markdown","f1d2e4c2":"markdown","8941f97b":"markdown","4e8cc8bd":"markdown","e57e639a":"markdown","7c891897":"markdown","7bb4a2f5":"markdown","db5aa1de":"markdown","2c11214d":"markdown","83d4f9e1":"markdown","563f64f4":"markdown","958eb616":"markdown","ec9c0bff":"markdown","d4448fcd":"markdown","7a675e2d":"markdown","8ffa58dc":"markdown","bfec15c0":"markdown","5fb550e0":"markdown","f57c7aa2":"markdown","0eef0e3a":"markdown","03f5e4e3":"markdown","7a6b6bf2":"markdown","d6a603ac":"markdown","2ceb7dcb":"markdown","1f74bdd8":"markdown","ef11f101":"markdown","8ff360d9":"markdown","dac99085":"markdown","9345181d":"markdown","295d42f9":"markdown","1fd091bd":"markdown","adac89dd":"markdown","f0ce4e34":"markdown","391ecadf":"markdown","8ac267f7":"markdown","2221c504":"markdown","47f8611c":"markdown","d247797f":"markdown","91ea1370":"markdown","b3ffe048":"markdown","b48ffe66":"markdown","8952b154":"markdown","cb67423b":"markdown","ffd5c57a":"markdown","7d6c4884":"markdown","b22b31a6":"markdown","d1a66e54":"markdown","903082e1":"markdown","5fd3756a":"markdown","b1c918ab":"markdown","dc2ee816":"markdown","2f489472":"markdown","2ed85273":"markdown","e2eac9c3":"markdown","f461c0c7":"markdown","798507c6":"markdown","621260e4":"markdown","a4c5a62a":"markdown","224eae85":"markdown","797a1191":"markdown","5ccd6916":"markdown","6ca4a752":"markdown","ca7d03ff":"markdown","b9b0ce0c":"markdown","f07e05c5":"markdown","9f5c1d8a":"markdown","9c9d7193":"markdown","59dac90d":"markdown","4a1dc245":"markdown","3457013c":"markdown","1e62d548":"markdown","9ec5bf3f":"markdown","d74b51ef":"markdown","89dec53d":"markdown","b50e88b6":"markdown","3a8ff22f":"markdown","55a83aa8":"markdown","226a6616":"markdown","fb50ff4f":"markdown","b384bb46":"markdown","7bb56be7":"markdown","da344586":"markdown","5fdc3c4a":"markdown","b565f37a":"markdown","329808dc":"markdown","6c6dc908":"markdown","bce04c30":"markdown","45036ecf":"markdown","104c4fb8":"markdown","f3ac653f":"markdown","b23f1000":"markdown","b02567fd":"markdown","7b36f938":"markdown","0fad9bc3":"markdown","5af60061":"markdown","8640cf42":"markdown","bcc8714e":"markdown","2db5a185":"markdown","0b612e62":"markdown","18a81240":"markdown","1e5d3bc1":"markdown"},"source":{"860be0cf":"import numpy as np\nimport pandas as pd\nfrom matplotlib import pyplot as plt\nfrom sklearn.linear_model import LinearRegression\nfrom sklearn.metrics import mean_squared_error, r2_score\nfrom sklearn.metrics import classification_report, confusion_matrix\ntrain = pd.read_csv(\"..\/input\/random-linear-regression\/train.csv\") \ntest = pd.read_csv(\"..\/input\/random-linear-regression\/test.csv\") \ntrain = train.dropna()\ntest = test.dropna()\ntrain.head()\n","00ceedba":"X_train = np.array(train.iloc[:, :-1].values)\ny_train = np.array(train.iloc[:, 1].values)\nX_test = np.array(test.iloc[:, :-1].values)\ny_test = np.array(test.iloc[:, 1].values)\nmodel = LinearRegression()\nmodel.fit(X_train, y_train)\n\ny_pred = model.predict(X_test)\naccuracy = model.score(X_test, y_test)\n\nplt.plot(X_train, model.predict(X_train), color='green')\nplt.show()\nprint(accuracy)","474c7875":"from sklearn.linear_model import  TheilSenRegressor\nmodel = TheilSenRegressor()\nmodel.fit(X_train, y_train)\n\ny_pred = model.predict(X_test)\naccuracy = model.score(X_test, y_test)\n\nplt.plot(X_train, model.predict(X_train), color='green')\nplt.show()\nprint(accuracy)","17c5661b":"from sklearn.linear_model import  RANSACRegressor\nmodel = RANSACRegressor()\nmodel.fit(X_train, y_train)\n\ny_pred = model.predict(X_test)\naccuracy = model.score(X_test, y_test)\nprint(accuracy)","9262a2fd":"from sklearn.linear_model import  HuberRegressor\nmodel = HuberRegressor()\nmodel.fit(X_train, y_train)\n\ny_pred = model.predict(X_test)\naccuracy = model.score(X_test, y_test)\nprint(accuracy)","8995d417":"import sklearn\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.metrics import r2_score\nfrom statistics import mode\n\n\ntrain = pd.read_csv(\"..\/input\/titanic\/train.csv\")\ntest  = pd.read_csv('..\/input\/titanic\/test.csv')\ntrain.head()","fb38750d":"ports = pd.get_dummies(train.Embarked , prefix='Embarked')\ntrain = train.join(ports)\ntrain.drop(['Embarked'], axis=1, inplace=True)\ntrain.Sex = train.Sex.map({'male':0, 'female':1})\ny = train.Survived.copy()\nX = train.drop(['Survived'], axis=1) \nX.drop(['Cabin'], axis=1, inplace=True) \nX.drop(['Ticket'], axis=1, inplace=True) \nX.drop(['Name'], axis=1, inplace=True) \nX.drop(['PassengerId'], axis=1, inplace=True)\nX.Age.fillna(X.Age.median(), inplace=True) \n","95c0fd3e":"from sklearn.model_selection import train_test_split\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.25, random_state=5)\nfrom sklearn.linear_model import LogisticRegression\nmodel = LogisticRegression(max_iter = 500000)\nmodel.fit(X_train, y_train)\ny_pred = model.predict(X_test)\naccuracy = model.score(X_test, y_test)\nprint(accuracy)\n","fbf986be":"print(confusion_matrix(y_test,y_pred))\n","b3bb7af3":"print(classification_report(y_test,y_pred))","a9c07716":"from sklearn.model_selection import train_test_split\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.25, random_state=5)\nfrom sklearn.gaussian_process import GaussianProcessClassifier\nmodel = GaussianProcessClassifier()\nmodel.fit(X_train, y_train)\ny_pred = model.predict(X_test)\naccuracy = model.score(X_test, y_test)\nprint(accuracy)\n","5ef7e382":"print(classification_report(y_test,y_pred))","d079eb2b":"from sklearn.model_selection import train_test_split\nfrom sklearn.model_selection import cross_val_score\nfrom sklearn.svm import SVC\ndata_svm = pd.read_csv(\"..\/input\/svm-classification\/UniversalBank.csv\")\ndata_svm.head()","de5f5558":"X = data_svm.iloc[:,1:13].values\ny = data_svm.iloc[:, -1].values\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.25, random_state = 0)\nclassifier = SVC(kernel = 'rbf', random_state = 0)\nclassifier.fit(X_train, y_train)\ny_pred = classifier.predict(X_test)\naccuracies = cross_val_score(estimator = classifier, X = X_train, y = y_train, cv = 10)\naccuracies.mean()","6c96e9ee":"print(classification_report(y_test,y_pred))","771bb22c":"from sklearn.model_selection import train_test_split\nfrom sklearn.model_selection import cross_val_score\nfrom sklearn.svm import NuSVC\nnu_svm = pd.read_csv(\"..\/input\/svm-classification\/UniversalBank.csv\")\nnu_svm.head()","81a6bdb3":"X = nu_svm.iloc[:,1:13].values\ny = nu_svm.iloc[:, -1].values\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.25, random_state = 0)\nclassifier = NuSVC(kernel = 'rbf', random_state = 0)\nclassifier.fit(X_train, y_train)\ny_pred = classifier.predict(X_test)\naccuracies = cross_val_score(estimator = classifier, X = X_train, y = y_train, cv = 10)\naccuracies.mean()","0f260e1c":"print(classification_report(y_test,y_pred))","4ada6fd5":"from sklearn.naive_bayes import GaussianNB\nfrom sklearn.naive_bayes import BernoulliNB\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.metrics import accuracy_score\ndata = pd.read_csv('..\/input\/classification-suv-dataset\/Social_Network_Ads.csv')\ndata_nb = data\ndata_nb.head()","2e1fbca3":"X = data_nb.iloc[:, [2,3]].values\ny = data_nb.iloc[:, 4].values\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.20, random_state = 0)\nsc_X = StandardScaler()\nX_train = sc_X.fit_transform(X_train)\nX_test = sc_X.transform(X_test)\nclassifier=GaussianNB()\nclassifier.fit(X_train,y_train)\ny_pred=classifier.predict(X_test)\nacc=accuracy_score(y_test, y_pred)\nprint(acc)","43b7a418":"print(classification_report(y_test,y_pred))","465e2048":"X = data_nb.iloc[:, [2,3]].values\ny = data_nb.iloc[:, 4].values\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.20, random_state = 0)\nsc_X = StandardScaler()\nX_train = sc_X.fit_transform(X_train)\nX_test = sc_X.transform(X_test)\nclassifier=BernoulliNB()\nclassifier.fit(X_train,y_train)\ny_pred=classifier.predict(X_test)\nacc=accuracy_score(y_test, y_pred)\nprint(acc)","5d2bd3b5":"print(classification_report(y_test,y_pred))","a1d12683":"from sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.neighbors import KNeighborsRegressor\nknn = pd.read_csv(\"..\/input\/iris\/Iris.csv\")\nknn.head()","b0deb550":"X = knn.iloc[:, [1,2,3,4]].values\ny = knn.iloc[:, 5].values\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.20, random_state = 0)\nsc_X = StandardScaler()\nX_train = sc_X.fit_transform(X_train)\nX_test = sc_X.transform(X_test)\nclassifier=KNeighborsClassifier(n_neighbors=5,metric='minkowski',p=2)\nclassifier.fit(X_train,y_train)\ny_pred=classifier.predict(X_test)\nacc=accuracy_score(y_test, y_pred)\nprint(acc)","d1c8cdab":"print(classification_report(y_test,y_pred))","dcb27a96":"from sklearn.neighbors import KNeighborsRegressor\ntrain = pd.read_csv(\"..\/input\/random-linear-regression\/train.csv\") \ntest = pd.read_csv(\"..\/input\/random-linear-regression\/test.csv\") \ntrain = train.dropna()\ntest = test.dropna()\nX_train = np.array(train.iloc[:, :-1].values)\ny_train = np.array(train.iloc[:, 1].values)\nX_test = np.array(test.iloc[:, :-1].values)\ny_test = np.array(test.iloc[:, 1].values)","a304d7fb":"model = KNeighborsRegressor(n_neighbors=2)\nmodel.fit(X_train, y_train)\ny_pred = model.predict(X_test)\naccuracy = model.score(X_test, y_test)\nprint(accuracy)","91102663":"from sklearn.linear_model import Perceptron\nfrom sklearn.neighbors import KNeighborsClassifier\np = pd.read_csv(\"..\/input\/iris\/Iris.csv\")\np.head()","88e729ac":"X = p.iloc[:, [1,2,3,4]].values\ny = p.iloc[:, 5].values\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.20, random_state = 0)\nsc_X = StandardScaler()\nX_train = sc_X.fit_transform(X_train)\nX_test = sc_X.transform(X_test)\nclassifier=Perceptron()\nclassifier.fit(X_train,y_train)\ny_pred=classifier.predict(X_test)\nacc=accuracy_score(y_test, y_pred)\nprint(acc)","c85e6ba8":"print(classification_report(y_test,y_pred))","aff0d8b1":"from sklearn.ensemble import RandomForestClassifier\nrf = pd.read_csv(\"..\/input\/mushroom-classification\/mushrooms.csv\")\nrf.head()","760f7521":"X = rf.drop('class', axis=1)\ny = rf['class']\nX = pd.get_dummies(X)\ny = pd.get_dummies(y)\nX_train, X_test, y_train, y_test = train_test_split(X, y)\nmodel = RandomForestClassifier(n_estimators=100, max_depth=10, random_state=1)\nmodel.fit(X_train, y_train)\nmodel.score(X_test, y_test)","f9ee2ab2":"from sklearn.tree import DecisionTreeClassifier\ndt = data\ndt.head()","06173d80":"X = dt.iloc[:, [2,3]].values\ny = dt.iloc[:, 4].values\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.20, random_state = 0)\nsc_X = StandardScaler()\nX_train = sc_X.fit_transform(X_train)\nX_test = sc_X.transform(X_test)\nclassifier=DecisionTreeClassifier(criterion=\"entropy\",random_state=0)\nclassifier.fit(X_train,y_train)\ny_pred=classifier.predict(X_test)\nacc=accuracy_score(y_test, y_pred)\nprint(acc)","7f019462":"from sklearn.ensemble import ExtraTreesClassifier\net = data\net.head()","9cd88729":"X = et.iloc[:, [2,3]].values\ny = et.iloc[:, 4].values\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.20, random_state = 0)\nsc_X = StandardScaler()\nX_train = sc_X.fit_transform(X_train)\nX_test = sc_X.transform(X_test)\nclassifier=ExtraTreesClassifier(criterion=\"entropy\",random_state=0)\nclassifier.fit(X_train,y_train)\ny_pred=classifier.predict(X_test)\nacc=accuracy_score(y_test, y_pred)\nprint(acc)","2b9c31a2":"from sklearn.ensemble import AdaBoostClassifier\nac = data\nac.head()","8c50186e":"X = ac.iloc[:, [2,3]].values\ny = ac.iloc[:, 4].values\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.20, random_state = 0)\nsc_X = StandardScaler()\nX_train = sc_X.fit_transform(X_train)\nX_test = sc_X.transform(X_test)\nclassifier=AdaBoostClassifier(random_state=0)\nclassifier.fit(X_train,y_train)\ny_pred=classifier.predict(X_test)\nacc=accuracy_score(y_test, y_pred)\nprint(acc)","01947d9c":"from sklearn.linear_model import PassiveAggressiveClassifier\npac = data\npac.head()","d6442860":"X = pac.iloc[:, [2,3]].values\ny = pac.iloc[:, 4].values\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.20, random_state = 0)\nsc_X = StandardScaler()\nX_train = sc_X.fit_transform(X_train)\nX_test = sc_X.transform(X_test)\nclassifier=PassiveAggressiveClassifier(random_state=0)\nclassifier.fit(X_train,y_train)\ny_pred=classifier.predict(X_test)\nacc=accuracy_score(y_test, y_pred)\nprint(acc)","ee1f3edd":"from sklearn.ensemble import BaggingClassifier\nbc = data\nbc.head()","3ad005db":"X = bc.iloc[:, [2,3]].values\ny = bc.iloc[:, 4].values\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.20, random_state = 0)\nsc_X = StandardScaler()\nX_train = sc_X.fit_transform(X_train)\nX_test = sc_X.transform(X_test)\nclassifier=BaggingClassifier(random_state=0)\nclassifier.fit(X_train,y_train)\ny_pred=classifier.predict(X_test)\nacc=accuracy_score(y_test, y_pred)\nprint(acc)","eb4fb058":"from sklearn.ensemble import GradientBoostingClassifier\ngb = data\ngb.head()","666bc268":"X = gb.iloc[:, [2,3]].values\ny = gb.iloc[:, 4].values\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.20, random_state = 0)\nsc_X = StandardScaler()\nX_train = sc_X.fit_transform(X_train)\nX_test = sc_X.transform(X_test)\ngbk = GradientBoostingClassifier()\ngbk.fit(X_train, y_train)\npred = gbk.predict(X_test)\nacc=accuracy_score(y_test, y_pred)\nprint(acc)","57b752ec":"import lightgbm as lgbm\nimport lightgbm as lgb\nimport pandas as pd\nfrom sklearn.model_selection import KFold, GridSearchCV\nfrom sklearn import preprocessing\n\n\ntrain = pd.read_csv(\"..\/input\/house-prices-advanced-regression-techniques\/train.csv\")\ntest = pd.read_csv(\"..\/input\/house-prices-advanced-regression-techniques\/test.csv\")\ndata = pd.concat([train, test], sort=False)\ndata = data.reset_index(drop=True)\ndata.head()","59ce2303":"nans=pd.isnull(data).sum()\n\ndata['MSZoning']  = data['MSZoning'].fillna(data['MSZoning'].mode()[0])\ndata['Utilities'] = data['Utilities'].fillna(data['Utilities'].mode()[0])\ndata['Exterior1st'] = data['Exterior1st'].fillna(data['Exterior1st'].mode()[0])\ndata['Exterior2nd'] = data['Exterior2nd'].fillna(data['Exterior2nd'].mode()[0])\n\ndata[\"BsmtFinSF1\"]  = data[\"BsmtFinSF1\"].fillna(0)\ndata[\"BsmtFinSF2\"]  = data[\"BsmtFinSF2\"].fillna(0)\ndata[\"BsmtUnfSF\"]   = data[\"BsmtUnfSF\"].fillna(0)\ndata[\"TotalBsmtSF\"] = data[\"TotalBsmtSF\"].fillna(0)\ndata[\"BsmtFullBath\"] = data[\"BsmtFullBath\"].fillna(0)\ndata[\"BsmtHalfBath\"] = data[\"BsmtHalfBath\"].fillna(0)\ndata[\"BsmtQual\"] = data[\"BsmtQual\"].fillna(\"None\")\ndata[\"BsmtCond\"] = data[\"BsmtCond\"].fillna(\"None\")\ndata[\"BsmtExposure\"] = data[\"BsmtExposure\"].fillna(\"None\")\ndata[\"BsmtFinType1\"] = data[\"BsmtFinType1\"].fillna(\"None\")\ndata[\"BsmtFinType2\"] = data[\"BsmtFinType2\"].fillna(\"None\")\n\ndata['KitchenQual']  = data['KitchenQual'].fillna(data['KitchenQual'].mode()[0])\ndata[\"Functional\"]   = data[\"Functional\"].fillna(\"Typ\")\ndata[\"FireplaceQu\"]  = data[\"FireplaceQu\"].fillna(\"None\")\n\ndata[\"GarageType\"]   = data[\"GarageType\"].fillna(\"None\")\ndata[\"GarageYrBlt\"]  = data[\"GarageYrBlt\"].fillna(0)\ndata[\"GarageFinish\"] = data[\"GarageFinish\"].fillna(\"None\")\ndata[\"GarageCars\"] = data[\"GarageCars\"].fillna(0)\ndata[\"GarageArea\"] = data[\"GarageArea\"].fillna(0)\ndata[\"GarageQual\"] = data[\"GarageQual\"].fillna(\"None\")\ndata[\"GarageCond\"] = data[\"GarageCond\"].fillna(\"None\")\n\ndata[\"PoolQC\"] = data[\"PoolQC\"].fillna(\"None\")\ndata[\"Fence\"]  = data[\"Fence\"].fillna(\"None\")\ndata[\"MiscFeature\"] = data[\"MiscFeature\"].fillna(\"None\")\ndata['SaleType']    = data['SaleType'].fillna(data['SaleType'].mode()[0])\ndata['LotFrontage'].interpolate(method='linear',inplace=True)\ndata[\"Electrical\"]  = data.groupby(\"YearBuilt\")['Electrical'].transform(lambda x: x.fillna(x.mode()[0]))\ndata[\"Alley\"] = data[\"Alley\"].fillna(\"None\")\n\ndata[\"MasVnrType\"] = data[\"MasVnrType\"].fillna(\"None\")\ndata[\"MasVnrArea\"] = data[\"MasVnrArea\"].fillna(0)\nnans=pd.isnull(data).sum()\nnans[nans>0]","a541250b":"_list = []\nfor col in data.columns:\n    if type(data[col][0]) == type('str'): \n        _list.append(col)\n\nle = preprocessing.LabelEncoder()\nfor li in _list:\n    le.fit(list(set(data[li])))\n    data[li] = le.transform(data[li])\n\ntrain, test = data[:len(train)], data[len(train):]\n\nX = train.drop(columns=['SalePrice', 'Id']) \ny = train['SalePrice']\n\ntest = test.drop(columns=['SalePrice', 'Id'])","7df395ad":"kfold = KFold(n_splits=5, random_state = 2020, shuffle = True)\n\nmodel_lgb = lgb.LGBMRegressor(objective='regression',num_leaves=5,\n                              learning_rate=0.05, n_estimators=720,\n                              max_bin = 55, bagging_fraction = 0.8,\n                              bagging_freq = 5, feature_fraction = 0.2319,\n                              feature_fraction_seed=9, bagging_seed=9,\n                              min_data_in_leaf =6, min_sum_hessian_in_leaf = 11)\nmodel_lgb.fit(X, y)\nr2_score(model_lgb.predict(X), y)\n","6466cfee":"import xgboost as xgb\n#Data is used the same as LGB\nX = train.drop(columns=['SalePrice', 'Id']) \ny = train['SalePrice']\nX.head()","6cfe320f":"model_xgb = xgb.XGBRegressor(colsample_bytree=0.4603, gamma=0.0468, \n                             learning_rate=0.05, max_depth=3, \n                             min_child_weight=1.7817, n_estimators=2200,\n                             reg_alpha=0.4640, reg_lambda=0.8571,\n                             subsample=0.5213, silent=1,\n                             random_state =7, nthread = -1)\nmodel_xgb.fit(X, y)\nr2_score(model_xgb.predict(X), y)\n","0996d9e5":"from catboost import CatBoostRegressor\n#Data is used the same as LGB\nX = train.drop(columns=['SalePrice', 'Id']) \ny = train['SalePrice']\nX.head()","5c59236e":"cb_model = CatBoostRegressor(iterations=500,\n                             learning_rate=0.05,\n                             depth=10,\n                             random_seed = 42,\n                             bagging_temperature = 0.2,\n                             od_type='Iter',\n                             metric_period = 50,\n                             od_wait=20)\ncb_model.fit(X, y)\nr2_score(cb_model.predict(X), y)\n","05182711":"from sklearn.linear_model import SGDRegressor\n#Data is used the same as LGB\nX = train.drop(columns=['SalePrice', 'Id']) \ny = train['SalePrice']\nX.head()","f5f79c8d":"SGD = SGDRegressor(max_iter = 100)\nSGD.fit(X, y)\nr2_score(SGD.predict(X), y)\n","9152a9b6":"from sklearn.linear_model import ElasticNet, Lasso,  BayesianRidge, LassoLarsIC\nfrom sklearn.pipeline import make_pipeline\nfrom sklearn.preprocessing import RobustScaler\n#Data is used the same as LGB\nX = train.drop(columns=['SalePrice', 'Id']) \ny = train['SalePrice']\nX.head()","9a5d9cd7":"lasso = make_pipeline(RobustScaler(), Lasso(alpha =0.0005, random_state=1))\nlasso.fit(X, y)\nr2_score(lasso.predict(X), y)\n","ac02f55a":"from sklearn.linear_model import RidgeClassifierCV\n#Data is used the same as LGB\nX = train.drop(columns=['SalePrice', 'Id']) \ny = train['SalePrice']\nX.head()","0f118b8b":"rcc = RidgeClassifierCV()\nrcc.fit(X, y)\nr2_score(rcc.predict(X), y)\n","023f0473":"from sklearn.kernel_ridge import KernelRidge\nfrom sklearn.pipeline import make_pipeline\nfrom sklearn.preprocessing import RobustScaler\n#Data is used the same as LGB\nX = train.drop(columns=['SalePrice', 'Id']) \ny = train['SalePrice']\nX.head()","2675989f":"KRR = KernelRidge(alpha=0.6, kernel='polynomial', degree=2, coef0=2.5)\nKRR.fit(X, y)\nr2_score(KRR.predict(X), y)","d30f5106":"from sklearn.linear_model  import BayesianRidge\nfrom sklearn.pipeline import make_pipeline\nfrom sklearn.preprocessing import RobustScaler\n#Data is used the same as LGB\nX = train.drop(columns=['SalePrice', 'Id']) \ny = train['SalePrice']\nX.head()","01ca35aa":"BR = BayesianRidge()\nBR.fit(X, y)\nr2_score(BR.predict(X), y)","8ce4af49":"from sklearn.linear_model import ElasticNet, Lasso,  BayesianRidge, LassoLarsIC\nfrom sklearn.pipeline import make_pipeline\nfrom sklearn.preprocessing import RobustScaler\n#Data is used the same as LGB\nX = train.drop(columns=['SalePrice', 'Id']) \ny = train['SalePrice']\nX.head()","10049ee4":"ENet = make_pipeline(RobustScaler(), ElasticNet(alpha=0.0005, l1_ratio=.9, random_state=3))\nENet.fit(X, y)\nr2_score(ENet.predict(X), y)","0122ae44":"from sklearn.discriminant_analysis import LinearDiscriminantAnalysis\nlda = data\nlda.head()","be6288bd":"X = lda.iloc[:, [2,3]].values\ny = lda.iloc[:, 4].values\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.20, random_state = 0)\nsc_X = StandardScaler()\nX_train = sc_X.fit_transform(X_train)\nX_test = sc_X.transform(X_test)\nModel=LinearDiscriminantAnalysis()\nModel.fit(X_train,y_train)\ny_pred=Model.predict(X_test)\nprint('accuracy is ',accuracy_score(y_pred,y_test))","11a2b55e":"from sklearn.cluster import KMeans\nkm = pd.read_csv(\"..\/input\/k-mean\/km.csv\")\nkm.head()","4d4d5e20":"K_clusters = range(1,8)\nkmeans = [KMeans(n_clusters=i) for i in K_clusters]\nY_axis = km[['latitude']]\nX_axis = km[['longitude']]\nscore = [kmeans[i].fit(Y_axis).score(Y_axis) for i in range(len(kmeans))]\nplt.plot(K_clusters, score)\nplt.xlabel('Number of Clusters')\nplt.ylabel('Score')\nplt.show()","af0989c1":"kmeans = KMeans(n_clusters = 3, init ='k-means++')\nkmeans.fit(km[km.columns[1:3]])\nkm['cluster_label'] = kmeans.fit_predict(km[km.columns[1:3]])\ncenters = kmeans.cluster_centers_\nlabels = kmeans.predict(km[km.columns[1:3]])\nkm.cluster_label.unique()","241860ca":"km.plot.scatter(x = 'latitude', y = 'longitude', c=labels, s=50, cmap='viridis')\nplt.scatter(centers[:, 0], centers[:, 1], c='black', s=100, alpha=0.5)\n","b20d850e":"from sklearn.model_selection import train_test_split\nfrom tensorflow.keras.utils import to_categorical\nfrom keras.models import Sequential\nfrom keras.layers import Dense, Dropout, Flatten, Conv2D, MaxPool2D\nimport tensorflow as tf\ntrain_data = pd.read_csv(\"..\/input\/digit-recognizer\/train.csv\")\ntest_data = pd.read_csv(\"..\/input\/digit-recognizer\/test.csv\")\ntrain_data.head()","2ff8d911":"X = np.array(train_data.drop(\"label\", axis=1)).astype('float32')\ny = np.array(train_data['label']).astype('float32')\nfor i in range(9):\n    plt.subplot(3,3,i+1)\n    plt.xticks([])\n    plt.yticks([])\n    plt.grid(False)\n    plt.imshow(X[i].reshape(28, 28), cmap=plt.cm.binary)\n    plt.xlabel(y[i])\nplt.show()\n\nX = X \/ 255.0\nX = X.reshape(-1, 28, 28, 1)\ny = to_categorical(y)\nX_train, X_val, y_train, y_val = train_test_split(X, y, test_size=0.2)\nX_test = np.array(test_data).astype('float32')\nX_test = X_test \/ 255.0\nX_test = X_test.reshape(-1, 28, 28, 1)\nplt.figure(figsize=(10,10))\n","6ccd907c":"model = Sequential()\nmodel.add(Conv2D(filters = 32, kernel_size = (5,5),padding = 'Same', \n                 activation ='relu', input_shape = (28,28,1)))\nmodel.add(Conv2D(filters = 32, kernel_size = (5,5),padding = 'Same', \n                 activation ='relu'))\nmodel.add(MaxPool2D(pool_size=(2,2)))\nmodel.add(Dropout(0.25))\nmodel.add(Conv2D(filters = 64, kernel_size = (3,3),padding = 'Same', \n                 activation ='relu'))\nmodel.add(Conv2D(filters = 64, kernel_size = (3,3),padding = 'Same', \n                 activation ='relu'))\nmodel.add(MaxPool2D(pool_size=(2,2), strides=(2,2)))\nmodel.add(Dropout(0.25))\nmodel.add(Flatten())\nmodel.add(Dense(256, activation = \"relu\"))\nmodel.add(Dropout(0.5))\nmodel.add(Dense(10, activation = \"softmax\"))\nmodel.summary()\nfrom tensorflow.keras.utils import plot_model\nplot_model(model, to_file='model1.png')\n","5e8e6910":"#increse to epochs to 30 for better accuracy\nmodel.compile(optimizer='adam', loss=\"categorical_crossentropy\", metrics=[\"accuracy\"])\nhistory = model.fit(X_train, y_train, epochs=10, batch_size=85, validation_data=(X_val, y_val))","c7d19122":"accuracy = history.history['accuracy']\nval_accuracy = history.history['val_accuracy']\nepochs = range(len(accuracy))\nplt.plot(epochs, accuracy, 'bo', label='Training accuracy')\nplt.plot(epochs, val_accuracy, 'b', label='Validation accuracy')\nplt.show()\n\nprint(model.evaluate(X_val, y_val))\n","5baff75e":"prediction = model.predict_classes(X_test)\nsubmit = pd.DataFrame(prediction,columns=[\"Label\"])\nsubmit[\"ImageId\"] = pd.Series(range(1,(len(prediction)+1)))\nsubmission = submit[[\"ImageId\",\"Label\"]]\nsubmission.to_csv(\"submission.csv\",index=False)\n","02a7dc0d":"import math\nfrom sklearn.preprocessing import MinMaxScaler\nfrom sklearn.preprocessing import MinMaxScaler\nfrom keras.models import Sequential\nfrom keras.layers import Dense, LSTM\nlstm = pd.read_csv(\"..\/input\/nyse\/prices.csv\")\nlstm = lstm[lstm['symbol']==\"NFLX\"]\nlstm['date'] = pd.to_datetime(lstm['date'])\nlstm.set_index('date',inplace=True)\nlstm = lstm.reset_index()\nlstm.head()","86f8f8d1":"data = lstm.filter(['close'])\ndataset = data.values \ntraining_data_len = math.ceil(len(dataset)*.75)  \nscaler = MinMaxScaler(feature_range=(0,1))\nscaled_data = scaler.fit_transform(dataset)\ntrain_data = scaled_data[0:training_data_len, :]\nx_train = []\ny_train = []\nfor i in range(60,len(train_data)):\n    x_train.append(train_data[i-60:i, 0])\n    y_train.append(train_data[i,0])\nx_train,y_train = np.array(x_train), np.array(y_train)\nx_train = np.reshape(x_train,(x_train.shape[0],x_train.shape[1],1))\n","5b3b9894":"model =Sequential()\nmodel.add(LSTM(64,return_sequences=True, input_shape=(x_train.shape[1],1)))\nmodel.add(LSTM(64, return_sequences= False))\nmodel.add(Dense(32))\nmodel.add(Dense(1))\nmodel.summary()\nfrom tensorflow.keras.utils import plot_model \nplot_model(model, to_file='model1.png')\n","14c2bc3a":"model.compile(optimizer='adam', loss='mean_squared_error')\nmodel.fit(x_train,y_train, batch_size=85, epochs=20)\n","6ee40299":"test_data= scaled_data[training_data_len-60:, :]\nx_test = []\ny_test = dataset[training_data_len:,:]\nfor i in range(60,len(test_data)):\n    x_test.append(test_data[i-60:i,0])\nx_test = np.array(x_test)\nx_test = np.reshape(x_test, (x_test.shape[0], x_test.shape[1],1))\npredictions = model.predict(x_test)\npredictions = scaler.inverse_transform(predictions)\nrmse = np.sqrt(np.mean(predictions - y_test)**2)\nrmse","08286144":"from sklearn.datasets import make_blobs\nfrom sklearn import datasets\nclass PCA:\n  def __init__(self, n_components):\n    self.n_components = n_components\n    self.components = None\n    self.mean = None\n\n  def fit(self, X):\n    self.mean = np.mean(X, axis=0)\n    X = X - self.mean\n    cov = np.cov(X.T)\n\n    evalue, evector = np.linalg.eig(cov)\n\n    eigenvectors = evector.T\n    idxs = np.argsort(evalue)[::-1]\n    \n    evalue = evalue[idxs]\n    evector = evector[idxs]\n    self.components = evector[0:self.n_components]\n\n  def transform(self, X):\n    #project data\n    X = X - self.mean\n    return(np.dot(X, self.components.T))\n\ndata = datasets.load_iris()\nX = data.data\ny = data.target\n\npca = PCA(2)\npca.fit(X)\nX_projected = pca.transform(X)\n\n\n\nx1 = X_projected[:,0]\nx2 = X_projected[:,1]\n\nplt.scatter(x1,x2,c=y,edgecolor='none',alpha=0.8,cmap=plt.cm.get_cmap('viridis',3))\nplt.xlabel('Principal Component 1')\nplt.ylabel('Principal Component 2')\nplt.colorbar()\nplt.show()","643fd994":"df = pd.read_csv('..\/input\/supermarket\/GroceryStoreDataSet.csv',names=['products'],header=None)\ndata = list(df[\"products\"].apply(lambda x:x.split(',')))\ndata","5be5b746":"from mlxtend.frequent_patterns import apriori\nfrom mlxtend.preprocessing import TransactionEncoder\nte = TransactionEncoder()\nte_data = te.fit(data).transform(data)\ndf = pd.DataFrame(te_data,columns=te.columns_)\ndf1 = apriori(df,min_support=0.01,use_colnames=True)\ndf1.head()","e32ec6d0":"import plotly.offline as py\nimport plotly.express as px\nfrom fbprophet import Prophet\nfrom fbprophet.plot import plot_plotly, add_changepoints_to_plot\n\npred = pd.read_csv(\"..\/input\/coronavirus-2019ncov\/covid-19-all.csv\")\npred = pred.fillna(0)\npredgrp = pred.groupby(\"Date\")[[\"Confirmed\",\"Recovered\",\"Deaths\"]].sum().reset_index()\npred_cnfrm = predgrp.loc[:,[\"Date\",\"Confirmed\"]]\npr_data = pred_cnfrm\npr_data.columns = ['ds','y']\npr_data.head()","0d66d49d":"m=Prophet()\nm.fit(pr_data)\nfuture=m.make_future_dataframe(periods=15)\nforecast=m.predict(future)\nforecast\n","5f49cf64":"fig = plot_plotly(m, forecast)\npy.iplot(fig) \n\nfig = m.plot(forecast,xlabel='Date',ylabel='Confirmed Count')","d7be5f91":"import datetime\nfrom statsmodels.tsa.arima_model import ARIMA\nar = pd.read_csv(\"..\/input\/competitive-data-science-predict-future-sales\/sales_train.csv\")\nar.date=ar.date.apply(lambda x:datetime.datetime.strptime(x, '%d.%m.%Y'))\nar=ar.groupby([\"date_block_num\"])[\"item_cnt_day\"].sum()\nar.index=pd.date_range(start = '2013-01-01',end='2015-10-01', freq = 'MS')\nar=ar.reset_index()\nar=ar.loc[:,[\"index\",\"item_cnt_day\"]]\nar.columns = ['confirmed_date','count']\nar.head()","b6515d84":"model = ARIMA(ar['count'].values, order=(1, 2, 1))\nfit_model = model.fit(trend='c', full_output=True, disp=True)\nfit_model.summary()\n\n","fe1612fb":"fit_model.plot_predict()\nplt.title('Forecast vs Actual')\npd.DataFrame(fit_model.resid).plot()\nforcast = fit_model.forecast(steps=6)\npred_y = forcast[0].tolist()\npred = pd.DataFrame(pred_y)\n","a0bf9b73":"# BayesianRidge","c1297401":"**Plotting Clusters**","1f15aabb":"**Library and Data**","209d160b":"**Model and Accuracy**","29663fdd":"# Bagging Classifier","95832da0":"**Library and Data**","0a4359db":"**Libraries and Data**","c8f83969":"# Machine Learning","0ac2a40d":"**Library and Data**","da5676e7":"# Perceptron ","a1c0bec1":"# Lasso","fbda85af":"**Library and Data**","ec7cca9c":"# Principle Component Analysis","f5c482de":"**Prediction and Accuracy**","eae37485":"**Model**","5e2c55c6":"# Unsupervised Machine Learning\n\n**Unsupervised learning is the training of an algorithm using information that is neither classified nor labeled and allowing the algorithm to act on that information without guidance.The main idea behind unsupervised learning is to expose the machines to large volumes of varied data and allow it to learn and infer from the data. However, the machines must first be programmed to learn from data. **\n\n** Unsupervised learning problems can be further grouped into clustering and association problems.  \n**\n1. Clustering: A clustering problem is where you want to discover the inherent groupings in the data, such as grouping customers by purchasing behaviour. \n2. Association: An association rule learning problem is where you want to discover rules that describe large portions of your data, such as people that buy X also tend to buy Y. \n\n\n","199b9e60":"**Library and Data**","6d8df318":"# **XGBoost**","4f6e769c":"**Library and Data**","e9b0dacc":"**Fitting Model**","73a5d324":"**Model and  Accuracy**","c1ed0bac":"**XGBoost is a decision-tree-based ensemble Machine Learning algorithm that uses a gradient boosting framework. In prediction problems involving unstructured data (images, text, etc.) artificial neural networks tend to outperform all other algorithms or frameworks.It is a perfect combination of software and hardware optimization techniques to yield superior results using less computing resources in the shortest amount of time.**","fa55d01b":"**Model and Accuracy**","bc7a4978":"**Model and Accuracy**","e795ab67":"**Libraries and Data**","2c7fb696":"1. Prophet only takes data as a dataframe with a ds (datestamp) and y (value we want to forecast) column. So first, let\u2019s convert the dataframe to the appropriate format.\n1. Create an instance of the Prophet class and then fit our dataframe to it.\n2. Create a dataframe with the dates for which we want a prediction to be made with make_future_dataframe(). Then specify the number of days to forecast using the periods parameter.\n3. Call predict to make a prediction and store it in the forecast dataframe. What\u2019s neat here is that you can inspect the dataframe and see the predictions as well as the lower and upper boundaries of the uncertainty interval.\n","8f1cafb4":"# Extra Tree","030b5423":"**Library and Data**","47bc9948":"**Checking for number of clusters**","45200406":"**Library and  Data**","28b49600":"**Stochastic means random , so in Stochastic Gradient Descent dataset sample is choosedn random instead of the whole dataset.hough, using the whole dataset is really useful for getting to the minima in a less noisy or less random manner, but the problem arises when our datasets get really huge and for that SGD come in action**","7523cb05":"**Library and Data**","3a796737":"# RANSAC Regressor","f1d2e4c2":"# **LDA**","8941f97b":"**Model and Accuracy**","4e8cc8bd":"# Linear Regression \n**It is a basic and commonly used type of predictive analysis. These regression estimates are used to explain the relationship between one dependent variable and one or more independent variables. \nY = a + bX where **\n* Y \u2013 Dependent Variable \n* a \u2013 intercept \n* X \u2013 Independent variable \n* b \u2013 Slope \n","e57e639a":"# Light GBM","7c891897":"**Model and Forecast**","7bb4a2f5":"**Model and Accuracy**","db5aa1de":"**Preprocessing and Data Split**","2c11214d":"**Library and Data**","83d4f9e1":"**Library and Data**","563f64f4":"**Model and Accuracy**","958eb616":"**LightGBM is a gradient boosting framework that uses tree based learning algorithms. It is designed to be distributed and efficient with the following advantages:**\n\n1. Faster training speed and higher efficiency.\n2. Lower memory usage.\n3. Better accuracy.\n4. Support of parallel and GPU learning.\n5. Capable of handling large-scale data.","ec9c0bff":"# Support Vector Machine \n**Support Vector Machines are perhaps one of the most popular and talked about machine learning algorithms.It is primarily a classier method that performs classification tasks by constructing hyperplanes in a multidimensional space that separates cases of different class labels. SVM supports both regression and classification tasks and can handle multiple continuous and categorical variables \n**\n\n**Example: One class is linearly separable from the others like if we only had two features like Height and Hair length of an individual, we\u2019d first plot these two variables in two dimensional space where each point has two co-ordinates **","d4448fcd":"# Factors help to choose algorithm \n1. Type of algorithm \n2. Parametrization \n3. Memory size \n4. Overfitting tendency \n5. Time of learning \n6. Time of predicting","7a675e2d":"# Elastic Net Regression \n","8ffa58dc":"**Library and Data**","bfec15c0":"# Kernel Ridge Regression","5fb550e0":"**Libraries and Data**","f57c7aa2":"# Application of Supervised Machine Learning \n1. Bioinformatics \n2. Quantitative structure \n3. Database marketing \n4. Handwriting recognition \n5. Information retrieval \n6. Learning to rank \n7. Information extraction \n8. Object recognition in computer vision \n9. Optical character recognition \n10. Spam detection \n11. Pattern recognition \n\n","0eef0e3a":"#  Supervised Machine Learning \n\nIt is a type of learning in which both input and desired output data are provided. Input and output data are labeled for classification to provide a learning basis for future data processing.This algorithm consist of a target \/ outcome variable (or dependent variable) which is to be predicted from a given set of predictors (independent variables). Using these set of variables, we generate a function that map inputs to desired outputs. The training process continues until the model achieves a desired level of accuracy on the training data.   \n","03f5e4e3":"**Library and Data**","7a6b6bf2":"**Model**","d6a603ac":"**Library and Data**","2ceb7dcb":"**Model and Accuracy**","1f74bdd8":"**In statistics and machine learning, lasso (least absolute shrinkage and selection operator; also Lasso or LASSO) is a regression analysis method that performs both variable selection and regularization in order to enhance the prediction accuracy and interpretability of the statistical model it produces. Though originally defined for least squares, lasso regularization is easily extended to a wide variety of statistical models including generalized linear models, generalized estimating equations, proportional hazards models, and M-estimators, in a straightforward fashion**","ef11f101":"# K-Means Algorithm \nK-means clustering is a type of unsupervised learning, which is used when you have unlabeled data and the goal of this algorithm is to find groups in the data \n\n**Steps to use this algorithm:-**\n* 1-Clusters the data into k groups where k is predefined. \n* 2-Select k points at random as cluster centers. \n* 3-Assign objects to their closest cluster center according to the Euclidean distance function. \n* 4-Calculate the centroid or mean of all objects in each cluster. \n\n**Examples: Behavioral segmentation like segment by purchase history or by activities on application, website, or platform Separate valid activity groups from bots  **\n","8ff360d9":"**Prediction**","dac99085":"# CNN","9345181d":"**Model and Accutacy**","295d42f9":"# Stochastic Gradient Descent","1fd091bd":"**It's an important method for dimension reduction.It extracts low dimensional set of features from a high dimensional data set with a motive to capture as much information as possible and to visualise high-dimensional data, it also reduces noise and finally makes other algorithms to work better because we are injecting fewer inputs.**\n* Example: When we have to bring out strong patterns in a data set or to make data easy to explore and visualize","adac89dd":"**Model and Accuracy**","f0ce4e34":"**Library and Data**","391ecadf":"**It is a categorisation algorithm attempts to operate on database records, particularly transactional records, or records including certain numbers of fields or items.It is mainly used for sorting large amounts of data. Sorting data often occurs because of association rules. **\n* Example: To analyse data for frequent if\/then patterns and using the criteria support and confidence to identify the most important relationships. ","8ac267f7":"# TheilSen Regressor","2221c504":"# Passive Aggressive Classifier","47f8611c":"**Report**","d247797f":"**Model and  Accuracy**","91ea1370":"**Model and Accuracy**","b3ffe048":"# Huber Regressor","b48ffe66":"**Model and Accuracy**","8952b154":"# LSTM ","cb67423b":"**Elastic net is a hybrid of ridge regression and lasso regularization.It combines feature elimination from Lasso and feature coefficient reduction from the Ridge model to improve your model's predictions.**","ffd5c57a":"**Model and Accuracy**","7d6c4884":"**There are three types of machine learning** \n1. Supervised Machine Learning \n2. Unsupervised Machine Learning \n3. Reinforcement Machine Learning ","b22b31a6":"**Model and Accuracy**","d1a66e54":"**Library and Data**","903082e1":"**Model and Accuracy**","5fd3756a":"# Application of Reinforcement Machine Learning \n1. Resources management in computer clusters \n2. Traffic Light Control \n3. Robotics and automation\n4. Web System Configuration \n5. Personalized Recommendations \n6. Deep areinforcement Learning \n","b1c918ab":"**Libraries and Data**","dc2ee816":"**Compiling Model**","2f489472":"# Application of Unsupervised Machine Learning \n1. Human Behaviour Analysis \n2. Social Network Analysis to define groups of friends. \n3. Market Segmentation of companies by location, industry, vertical. \n4. Organizing computing clusters based on similar event patterns and processes. \n","2ed85273":"# Reinforcement Machine Learning \n**Reinforcement Learning is a type of Machine Learning which allows machines to automatically determine the ideal behaviour within a specific context, in order to maximize its performance. Simple reward feedback is required for the agent to learn its behaviour; this is known as the reinforcement signal.It differs from standard supervised learning, in that correct input\/output pairs need not be presented, and sub-optimal actions need not be explicitly corrected. Instead the focus is on performance, which involves finding a balance between exploration of uncharted territory and exploitation of current knowledge  \n**\n","e2eac9c3":"**BernoulliNB**","f461c0c7":"# Gradient Boosting\n**Gradient boosting is an alogithm under supervised machine learning, boosting means converting weak into strong. In this new tree is boosted over the previous tree**","798507c6":"**Catboost is a type of gradient boosting algorithms which can  automatically deal with categorical variables without showing the type conversion error, which helps you to focus on tuning your model better rather than sorting out trivial errors.Make sure you handle missing data well before you proceed with the implementation.\n**","621260e4":"# Table of Content\n1. Machine Learning and Types\n2. Application of Machine Learning\n3. Steps of Machine Learning\n4. Factors help to choose algorithm\n5. Algorithm\n         Linear Regression\n         TheilSenRegressor\n         RANSAC Regressor\n         HuberRegressor\n         Logistic Regression\n         GaussianProcessClassifier\n         Support Vector Machine\n         Nu-Support Vector Classification\n         Naive Bayes Algorithm\n         KNN\n         Perceptron\n         Random Forest\n         Decision Tree\n         Extra Tree\n         AdaBoost Classifier\n         PassiveAggressiveClassifier\n         Bagging Classifier\n         Gradient Boosting\n                 Light GBM\n                 XGBoost\n                 Catboost\n                 Stochastic Gradient Descent\n         Lasso\n         RidgeC lassifier CV\n         Kernel Ridge Regression\n         Bayesian Ridge\n         Elastic Net Regression\n         LDA\n         K-Means Algorithm\n         CNN\n         LSTM\n         PCA\n         Apriori\n         Prophet\n         ARIMA\n6. Evaluate Algorithms\n                \n   \n","a4c5a62a":"**LSTM  blocks are part of a recurrent neural network structure. Recurrent neural networks are made to utilize certain types of artificial memory processes that can help these artificial intelligence programs to more effectively imitate human thought.It is  capable of learning order dependence \nLSTM can be used for machine translation, speech recognition, and more.**","224eae85":"**Libraries and Data**","797a1191":"**Gaussian NB**","5ccd6916":"**Model and Accuracy**","6ca4a752":"# Prophet","ca7d03ff":"**As Regression**","b9b0ce0c":"# Nu Support Vector Classification","f07e05c5":"\nProphet is an extremely easy tool for analysts to produce reliable forecasts","9f5c1d8a":"**Machine Learning is the science of getting computers to learn and act like humans do, and improve their learning over time in autonomous fashion, by feeding them data and information in the form of observations and real-world interactions.\nThere are many algorithm for getting machines to learn, from using basic decision trees to clustering to layers of artificial neural networks depending on what task you\u2019re trying to accomplish and the type and amount of data that you have available.  \n**","9c9d7193":"**Libraries and data**","59dac90d":"**Model and Accuracy**","4a1dc245":"**KRR combine Ridge regression and classification with the kernel trick.It is similar to Support vector Regression but relatively very fast.This is suitable for smaller dataset (less than 100 samples)**","3457013c":"# **Evaluate Algorithms** \n\n","1e62d548":"# Ridge Classifier CV","9ec5bf3f":"**A classifier with a linear decision boundary, generated by fitting class conditional densities to the data and using Bayes\u2019 rule.The model fits a Gaussian density to each class, assuming that all classes share the same covariance matrix.Itis  used in statistics, pattern recognition, and machine learning to find a linear combination of features that characterizes or separates two or more classes of objects or events. The resulting combination may be used as a linear classifier, or, more commonly, for dimensionality reduction before later classification.**","d74b51ef":"**Preprocessing**","89dec53d":"**As Classifier**","b50e88b6":"** Bayesian regression, is a regression model defined in probabilistic terms, with explicit priors on the parameters. The choice of priors can have the regularizing effect.Bayesian approach is a general way of defining and estimating statistical models that can be applied to different models.**","3a8ff22f":"**Library and Data**","55a83aa8":"**Model and Accuracy**","226a6616":"# Arima","fb50ff4f":"**Model and Accuracy**","b384bb46":"# KNN \n**KNN does not learn any model. and stores the entire training data set which it uses as its representation.The output can be calculated as the class with the highest frequency from the K-most similar instances. Each instance in essence votes for their class and the class with the most votes is taken as the prediction \n**\n\n**Example: Should the bank give a loan to an individual? Would an individual default on his or her loan? Is that person closer in characteristics to people who defaulted or did not default on their loans? **\n","7bb56be7":"** It is single layer neural network and used for classification **","da344586":"**Confusion Matrix**","5fdc3c4a":"# Apriori","b565f37a":"# Naive Bayes Algorithm \n**A naive Bayes classifier is not a single algorithm, but a family of machine learning algorithms which use probability theory to classify data with an assumption of independence between predictors It is easy to build and particularly useful for very large data sets. Along with simplicity, Naive Bayes is known to outperform even highly sophisticated classification methods    \n**\n\n**Example: Emails are given and we have to find the spam emails from that.A spam filter looks at email messages for certain key words and puts them in a spam folder if they match.**","329808dc":"# AdaBoost Classifier","6c6dc908":"**Libraries and Data**","bce04c30":"**Model and Accuracy**","45036ecf":"**Preprocessing**","104c4fb8":"**Library and Data**","f3ac653f":"**Model**","b23f1000":"# Catboost","b02567fd":"**Model and Accuracy**","7b36f938":"**Library and Data**","0fad9bc3":"**Compiling model**","5af60061":"# Decision Tree\n**Decision tree algorithm is classification algorithm under supervised machine learning and it is simple to understand and use in data.The idea of Decision tree is to split the big data(root) into smaller(leaves)**","8640cf42":"# Random Forest \n**Random forest is collection of tress(forest) and it builds multiple decision trees and merges them together to get a more accurate and stable prediction.It can be used for both classification and regression problems.**\n\n**Example: Suppose we have a bowl of 100 unique numbers from 0 to 99. We want to select a random sample of numbers from the bowl. If we put the number back in the bowl, it may be selected more than once. \n**","bcc8714e":"**Library and Data**","2db5a185":"**Library and Data **","0b612e62":"# Gaussian Process Classifier","18a81240":"# Logistic Regression \n**It\u2019s a classification algorithm, that is used where the response variable is categorical. The idea of Logistic Regression is to find a relationship between features and probability of particular outcome.**   \n* odds= p(x)\/(1-p(x)) = probability of event occurrence \/ probability of not event occurrence \n\n**Example- When we have to predict if a student passes or fails in an exam when the number of hours spent studying is given as a feature, the response variable has two values, pass and fail. \n**","1e5d3bc1":"**Model with plots and accuracy**"}}