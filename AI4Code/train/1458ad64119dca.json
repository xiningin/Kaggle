{"cell_type":{"e67ca93a":"code","5a4c6997":"code","6798d63b":"code","a6f3fc5d":"code","1afdec36":"code","cc8fb36f":"code","6df14dfd":"code","ce5d4062":"code","d0175db2":"code","7ee73ada":"code","20cce3f3":"code","96ab8832":"code","9e211499":"code","5f01a56c":"code","82be0e2b":"code","c0064a6c":"code","e07e620d":"code","36f6ba8e":"code","3ec03671":"code","b880f437":"code","a8ab0831":"code","d459d835":"code","818c95d9":"markdown","bc9843b9":"markdown","866f44c4":"markdown","ca2343ce":"markdown","ea945ea0":"markdown","150ab1c5":"markdown","2935ed5c":"markdown","ee7ec683":"markdown","d038bdc0":"markdown","812a2087":"markdown","6c0549bb":"markdown","52273f1b":"markdown","638aca7a":"markdown"},"source":{"e67ca93a":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session\nprint (\"done\")","5a4c6997":"train_data_initial = pd.read_csv('..\/input\/titanic\/train.csv', index_col='PassengerId')\ntest_data = pd.read_csv('..\/input\/titanic\/test.csv', index_col='PassengerId')\ntrain_data_initial.head()","6798d63b":"train_data_initial.info()","a6f3fc5d":"train_data_initial.drop(columns = ['Name','Ticket','Cabin'], inplace=True)","1afdec36":"train_data = train_data_initial.copy()","cc8fb36f":"train_data['Age'].fillna(value = train_data['Age'].mean(), inplace = True)\ntrain_data['Embarked'].fillna(value = train_data['Embarked'].value_counts().idxmax(), inplace = True)","6df14dfd":"s = (train_data.dtypes == 'object')\nobject_cols = list(s[s].index)\nprint(\"Categorical variables:\")\nprint(object_cols)","ce5d4062":"from sklearn.preprocessing import LabelEncoder\nlabel_train_data = train_data.copy()\n# Apply label encoder to each column with categorical data\nlabel_encoder = LabelEncoder()\nfor col in object_cols:\n    label_train_data[col] = label_encoder.fit_transform(train_data[col])","d0175db2":"label_train_data.info()","7ee73ada":"target_col = 'Survived'\ny = label_train_data[target_col]\nX = label_train_data.drop(columns=[target_col])\nX.head()","20cce3f3":"from sklearn.model_selection import train_test_split\nX_train, X_valid, y_train, y_valid = train_test_split(X, y, train_size=0.8, test_size=0.2, random_state=0)","96ab8832":"from sklearn.ensemble import RandomForestClassifier\nfrom sklearn.metrics import classification_report, accuracy_score, f1_score\npreds_dict = []\nfor n_estimators in range (100,1001,100):\n    for max_depth in range (6, 70,10):\n        for max_leaf_nodes in range (5, 500, 50):\n            parameters = {'n_estimators': n_estimators,\n                              'max_depth': max_depth, \n                              'max_leaf_nodes': max_leaf_nodes\n                             }\n            model = RandomForestClassifier(**parameters)\n            model.fit(X_train, y_train)\n            preds = model.predict(X_valid)\n            prediction = {}\n            prediction['n_estimators'] = n_estimators\n            prediction['max_depth'] = max_depth\n            prediction['max_leaf_nodes'] = max_leaf_nodes\n            prediction['accuracy_score'] = accuracy_score(y_true=y_valid, y_pred=preds)\n            preds_dict.append(prediction)\nprint (preds_dict)","9e211499":"#max(preds_dict, prediction.keys)\ncount = 0\nindexIs = 0\nmaxValue = preds_dict[0]['accuracy_score']\nfor i in preds_dict:\n    if maxValue < i['accuracy_score']:\n        print(count , ' :', i['accuracy_score'])\n        maxValue = i['accuracy_score']\n        indexIs = count\n    count = count + 1\nprint(count ,': Max Val is :',maxValue)\nprint(preds_dict[indexIs])","5f01a56c":"test_data = pd.read_csv('..\/input\/titanic\/test.csv', index_col='PassengerId')","82be0e2b":"test_data.drop(columns=['Name', 'Ticket','Cabin'], inplace=True)\ntest_data","c0064a6c":"test_data.info()","e07e620d":"test_data['Age'].fillna(value = train_data['Age'].mean(), inplace = True)\ntest_data['Fare'].fillna(value = train_data['Fare'].mean(), inplace = True)","36f6ba8e":"s = (test_data.dtypes == 'object')\nobject_cols_test = list(s[s].index)\nprint(\"Categorical variables:\")\nprint(object_cols_test)","3ec03671":"from sklearn.preprocessing import LabelEncoder\nlabel_test_data = test_data.copy()\n# Apply label encoder to each column with categorical data\nlabel_encoder = LabelEncoder()\nfor col in object_cols_test:\n    label_train_data[col] = label_encoder.fit(train_data_initial[col].astype(str))\n    label_test_data[col] = label_encoder.transform(test_data[col].astype(str))","b880f437":"label_test_data.info()","a8ab0831":"final_model = RandomForestClassifier(n_estimators=100, max_leaf_nodes=105, max_depth = 6, random_state= 0)\nfinal_model.fit(X, y)\npreds = final_model.predict(label_test_data)","d459d835":"sub_df = pd.DataFrame(data={\n    'PassengerId': label_test_data.index,\n    'Survived': preds\n})\nsub_df.to_csv('submission.csv', index=False)\nprint ('done')","818c95d9":"# drop columns which doesnt have benefit and columns with high amount of missing value.","bc9843b9":"# encode categorical variable in train data","866f44c4":"# handel missing values in test data","ca2343ce":"# lable encoding for test data","ea945ea0":"# Load data","150ab1c5":"# split data","2935ed5c":" # handel missing value in train data","ee7ec683":"# out put ","d038bdc0":"# define, fit, and predict model in train data","812a2087":"# select best parameters","6c0549bb":"# fit model with best parameters and predict it with test data","52273f1b":"# X and y denoting","638aca7a":"# remove columns without benifit"}}