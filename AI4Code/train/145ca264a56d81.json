{"cell_type":{"6756a524":"code","ecbdfd3f":"code","b22ba6c0":"code","197ff4dc":"code","b359270e":"code","21e04ada":"code","9dc2ef9e":"code","f89ff104":"code","9dbc87fe":"code","5f72c8a2":"code","3a91c78a":"code","021ac602":"code","0b906ffb":"code","30b02aea":"code","745ff89b":"code","a671a8c2":"code","442bc93f":"code","e4aa6561":"code","0315ed57":"code","8da47a16":"code","6986304c":"code","0274f67f":"code","94186b93":"code","dfd5a79e":"code","3ee7182f":"code","ad690f4d":"code","60fda2f6":"code","9686294a":"code","a59646c5":"code","14cc4f3a":"code","69b2a76d":"code","78b27527":"code","06f741ac":"code","c8684cd8":"code","1c30eeb5":"code","bcdba0a4":"code","42b4d199":"code","4d387060":"code","c7797b95":"code","3d7a7465":"code","ef04aa33":"code","691f093c":"code","20c4b01e":"code","1509f99a":"code","2667b86e":"code","f65035f5":"code","f1ce7d92":"code","2149e3a5":"code","cbccf7c7":"code","65aac111":"code","623ce258":"code","22eb351c":"code","81e9e345":"code","8ed9d9f9":"code","420c0c68":"code","6afea7d4":"code","d5d65e64":"code","b5a7473f":"code","aa74b95a":"code","b306cc02":"code","5443a09b":"code","b819dedd":"code","c729051b":"code","3accf843":"code","9c0ec36a":"code","ab6706fc":"code","dc8d3fca":"code","a40c4bdf":"code","31e8e346":"code","da108400":"code","55cdb26f":"code","e4fdb8e0":"code","b80c7b81":"code","108860fa":"code","ccd6e201":"code","6fa6b259":"code","56928e94":"code","5bfa91b1":"code","3fc214a9":"markdown","18af653c":"markdown","8ce8efbd":"markdown","dad83fba":"markdown","8fa49bb7":"markdown","ef82c638":"markdown","16cc7f71":"markdown","6e5bf0a7":"markdown","c7067dfb":"markdown","72802240":"markdown","aafab7bb":"markdown","89d90e80":"markdown","1be95988":"markdown","dadd8c38":"markdown","7421ecd2":"markdown","fb7c906b":"markdown","7bf9bb11":"markdown","3a78f83c":"markdown","e338dfb3":"markdown","ce72ef81":"markdown","50e6b26c":"markdown","bf3c2c65":"markdown","b4bc3189":"markdown","ab6a1bfd":"markdown","96555dff":"markdown","3f8b3b01":"markdown","77d71358":"markdown","a465d33a":"markdown","76015e9e":"markdown","2d9479fa":"markdown","297c9ff7":"markdown","291d42c1":"markdown","48ee9091":"markdown","61139e24":"markdown"},"source":{"6756a524":"import numpy as np \nimport pandas as pd \nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom sklearn.preprocessing import StandardScaler,RobustScaler\nfrom sklearn import preprocessing\n","ecbdfd3f":"train=pd.read_csv('\/kaggle\/input\/house-prices-advanced-regression-techniques\/train.csv')\ntest=pd.read_csv('\/kaggle\/input\/house-prices-advanced-regression-techniques\/test.csv')","b22ba6c0":"train.drop('Id',axis=1,inplace=True)\ntest.drop('Id',axis=1,inplace=True)","197ff4dc":"train_n=train[[c for c in train.columns if train[c].dtypes!='O']].copy()\ntest_n=test[[c for c in test.columns if test[c].dtypes!='O']].copy()\n\ntrain_c=train[[c for c in train.columns if train[c].dtypes=='O']].copy()\ntest_c=test[[c for c in test.columns if test[c].dtypes=='O']].copy()","b359270e":"corrmat=train_n.corr()\n# fig,ax=plt.subplots(figsize=(12,12))\n# sns.heatmap(corrmat,vmax=.8, square=True,ax=ax,annot=True, fmt='.2f', annot_kws={'size': 6})","21e04ada":"n=15\ntop15_cols=corrmat.nlargest(n,'SalePrice')['SalePrice'].index","9dc2ef9e":"corrmat_top15=train_n[top15_cols].corr()\nfig1,ax1=plt.subplots(figsize=(8,8))\nsns.heatmap(corrmat_top15,vmax=.8, square=True,ax=ax1,annot=True, fmt='.2f', annot_kws={'size': 12})","f89ff104":"sns.set(style=\"darkgrid\")\n\nfig,ax=plt.subplots(3,2,figsize=(15,15))\nsns.scatterplot(train_n['SalePrice'],train_n['GarageCars'],ax=ax[0][0],color='coral')\nsns.scatterplot(train_n['SalePrice'],train_n['GarageArea'],ax=ax[0][1],color='coral')\nsns.scatterplot(train_n['SalePrice'],train_n['TotalBsmtSF'],ax=ax[1][0],color='coral')\nsns.scatterplot(train_n['SalePrice'],train_n['1stFlrSF'],ax=ax[1][1],color='coral')\nsns.scatterplot(train_n['SalePrice'],train_n['TotRmsAbvGrd'],ax=ax[2][0],color='coral')\nsns.scatterplot(train_n['SalePrice'],train_n['GrLivArea'],ax=ax[2][1],color='coral')\nfig.tight_layout()","9dbc87fe":"# sns.jointplot(x=train['OverallQual'], y=train['SalePrice'], kind='reg',color='skyblue',height=7)","5f72c8a2":"train_n1=train_n.drop(['GarageCars','1stFlrSF','TotRmsAbvGrd'],axis=1)\ntest_n1=test_n.drop(['GarageCars','1stFlrSF','TotRmsAbvGrd'],axis=1)","3a91c78a":"fig,ax=plt.subplots(17,2,figsize=(15,60))\ndef graph(x,y,r,c,title):\n    sns.scatterplot(train_n1[x],y,color=('orange'),ax=ax[r][c])\n    ax[r][c].set_xlabel(x)\n    fig.tight_layout(pad=5.0)\n\nfor r,col in enumerate(train_n1.columns):\n    c=r%2\n    graph(col,train['SalePrice'],r\/\/2,c,col)\n","021ac602":"non_linear=['MSSubClass','LotArea','OverallCond','LowQualFinSF','BsmtFullBath', 'BsmtHalfBath','FullBath', 'HalfBath','BedroomAbvGr',\n            'KitchenAbvGr','Fireplaces','3SsnPorch','ScreenPorch' ,'PoolArea','MiscVal','MoSold', 'YrSold']\nprint(\"total non-linear\",len(non_linear),\" columns\")","0b906ffb":"linear_features=np.array([col for col in train_n1.columns if col not in non_linear])","30b02aea":"# sns.set(style=\"whitegrid\")\nfig=plt.figure(figsize=(15,5))\ntrain_null=train_n1.isnull().sum()[train_n1.isnull().sum()!=0]\nsns.barplot(y=train_null.index,x=train_null)","745ff89b":"# sns.set(style=\"whitegrid\")\nfig=plt.figure(figsize=(15,5))\ntest_null=test_n1.isnull().sum()[test_n1.isnull().sum()!=0]\nsns.barplot(y=test_null.index,x=test_null)","a671a8c2":"train_n1['GarageYrBlt']=train_n1['GarageYrBlt'].fillna(train_n1['GarageYrBlt'].median())\ntest_n1['GarageYrBlt']=test_n1['GarageYrBlt'].fillna(test_n1['GarageYrBlt'].median())\n\nfor col in train_n1.columns:\n    train_n1[col] = train_n1[col].fillna(0)\nfor col in test_n1.columns:\n    test_n1[col] = test_n1[col].fillna(0)","442bc93f":"print(train_n1[linear_features].shape)\nprint(test_n1[linear_features[:-1]].shape)","e4aa6561":"train_n1.isnull().sum()[train_n1.isnull().sum()!=0]","0315ed57":"test_n1.isnull().sum()[test_n1.isnull().sum()!=0]","8da47a16":"# fig,ax=plt.subplots(9,2,figsize=(15,40))\n# def graph(x,y,r,c,title):\n#     sns.scatterplot(train_n1[x],train_n1[y],color=('red'),ax=ax[r][c])\n#     ax[r][c].set_ylabel(y)\n#     ax[r][c].set_xlabel(x)\n#     fig.tight_layout(pad=5.0)\n\n# for r,col in enumerate(train_n1[linear_features].columns):\n#     c=r%2\n#     graph(col,'SalePrice',r\/\/2,c,col)","6986304c":"train_n1['Bsmt']=train_n1['BsmtFinSF1']+train_n1['BsmtFinSF2']+train_n1['BsmtUnfSF']+train_n1['TotalBsmtSF']\ntest_n1['Bsmt']=test_n1['BsmtFinSF1']+test_n1['BsmtFinSF2']+test_n1['BsmtUnfSF']+test_n1['TotalBsmtSF']\nsns.jointplot(train_n1['Bsmt'],train_n1['SalePrice'],kind='hex',color='purple')\n# sns.jointplot(train_n1['BsmtFinSF1'],train_n1['SalePrice'],kind='reg',color='green')","0274f67f":"train_n1['TotalPorchSF']=train_n1['EnclosedPorch']+train_n1['OpenPorchSF']\ntest_n1['TotalPorchSF']=test_n1['EnclosedPorch']+test_n1['OpenPorchSF']\n\nsns.jointplot(train_n1['TotalPorchSF'],train_n1['SalePrice'],kind='hex',color='purple')","94186b93":"linear_features","dfd5a79e":"linear_features=['LotFrontage', 'OverallQual', 'YearBuilt', 'YearRemodAdd',\n       'MasVnrArea','Bsmt', '2ndFlrSF', 'GrLivArea', 'GarageYrBlt',\n       'GarageArea', 'WoodDeckSF', 'OpenPorchSF', 'EnclosedPorch']","3ee7182f":"train_n1[linear_features].columns","ad690f4d":"train_n1[linear_features].shape","60fda2f6":"test_n1[linear_features].shape","9686294a":"fig,ax=plt.subplots(3,2,figsize=(15,15))\ndef graph(x,y,r,c,title,line):\n    sns.scatterplot(train_n1[x],train_n1[y],color=('orange'),ax=ax[r][c])\n    sns.lineplot(x=line,y=train_n1[y],color='red',ax=ax[r][c])\n    ax[r][c].set_ylabel(y)\n    ax[r][c].set_xlabel(x)\n    fig.tight_layout(pad=5.0)\n\nout=[300,1200,12000,4600,1200]\nfor r,col in enumerate(np.array(['LotFrontage','MasVnrArea','Bsmt','GrLivArea','GarageArea'])):\n    c=r%2\n    graph(col,'SalePrice',r\/\/2,c,col,out[r])","a59646c5":"a=train_n1['LotFrontage'].sort_values(ascending=False).head(2)\nb=train_n1['MasVnrArea'].sort_values(ascending=False).head(2)\nc=train_n1['Bsmt'].sort_values(ascending=False).head(1)\nd=train_n1['GrLivArea'].sort_values(ascending=False).head(2)\ne=train_n1['GarageArea'].sort_values(ascending=False).head(3)\nf=train_n1['SalePrice'].sort_values(ascending=False).head(2)","14cc4f3a":"index=a.index\nindex=index.append(b.index)\nindex=index.append(c.index)\nindex=index.append(d.index)\nindex=index.append(e.index)\nindex=index.append(f.index)","69b2a76d":"train_n1=train_n1.drop(index).reset_index(drop=True)","78b27527":"# fig,ax=plt.subplots(7,2,figsize=(15,30))\n# def graph(x,y,r,c,title):\n#     sns.regplot(train_n1[x],train_n1[y],color=('green'),ax=ax[r][c])\n#     ax[r][c].set_ylabel(y)\n#     ax[r][c].set_xlabel(x)\n#     fig.tight_layout(pad=5.0)\n\n# for r,col in enumerate(train_n1[linear_features].columns):\n#     c=r%2\n#     graph(col,'SalePrice',r\/\/2,c,col)","06f741ac":"print(train_n1.shape)\nprint(train_n1[linear_features].shape)","c8684cd8":"Train_X_n=train_n1[linear_features]\nTrain_Y_n=train_n1['SalePrice']","1c30eeb5":"Train_X_n.skew()","bcdba0a4":"fig,ax=plt.subplots(1,2,figsize=(20,5))\nsns.distplot(Train_Y_n,ax=ax[0],color='green')\nsns.distplot(np.log1p(Train_Y_n),ax=ax[1],color='green')\n# fig.tight_layout()","42b4d199":"y_train=np.log1p(Train_Y_n)","4d387060":"# scaler=StandardScaler()\nscaler=RobustScaler()\nfinal_train_n=pd.DataFrame(scaler.fit_transform(Train_X_n),columns=Train_X_n.columns)\nfinal_test_n=pd.DataFrame(scaler.fit_transform(test_n1[linear_features]),columns=Train_X_n.columns)","c7797b95":"final_train_n.head()","3d7a7465":"final_test_n.head()","ef04aa33":"train_c=train[[c for c in train.columns if train[c].dtypes=='O']].copy()\ntest_c=test[[c for c in test.columns if test[c].dtypes=='O']].copy()","691f093c":"# print(train_c.shape)\nfig=plt.figure(figsize=(10,5))\ntrain_null=train_c.isnull().sum()[train_c.isnull().sum()!=0].sort_values(ascending=False)\nsns.barplot(y=train_null.index,x=train_null)","20c4b01e":"fig=plt.figure(figsize=(10,5))\ntest_null=test_c.isnull().sum()[test_c.isnull().sum()!=0].sort_values(ascending=False)\nsns.barplot(y=test_null.index,x=test_null)","1509f99a":"train_c.dropna(thresh=len(train_c)*0.9,axis=1,inplace=True)","2667b86e":"test_c.dropna(thresh=len(test_c)*0.9,axis=1,inplace=True)","f65035f5":"train_c['Electrical']=train_c['Electrical'].fillna(method='ffill')\ntest_c['SaleType']=test_c['SaleType'].fillna(method='ffill')\ntest_c['KitchenQual']=test_c['KitchenQual'].fillna(method='ffill')\ntest_c['Exterior1st']=test_c['Exterior1st'].fillna(method='ffill')\ntest_c['Exterior2nd']=test_c['Exterior2nd'].fillna(method='ffill')\ntest_c['Functional']=test_c['Functional'].fillna(method='ffill')\ntest_c['Utilities']=test_c['Utilities'].fillna(method='ffill')\ntest_c['MSZoning']=test_c['MSZoning'].fillna(method='ffill')\n","f1ce7d92":"# Categorical missing values\nfor col in train_c.columns:\n    train_c[col] = train_c[col].fillna(\"None\")\nfor col in test_c.columns:\n    test_c[col] = test_c[col].fillna(\"None\")","2149e3a5":"print(\"Train null values : \",len(train_c.isnull().sum()[train_c.isnull().sum()!=0]))\nprint(\"Test null values : \",len(test_c.isnull().sum()[test_c.isnull().sum()!=0]))","cbccf7c7":"train_c=train_c.drop(index).reset_index(drop=True)\ntrain_c.shape","65aac111":"test_c.shape","623ce258":"num_train=train_n1[['OverallCond','BsmtFullBath', 'BsmtHalfBath', 'FullBath', 'HalfBath','KitchenAbvGr',\n'BedroomAbvGr','Fireplaces','MoSold','YrSold']]\nnum_test=test_n1[['OverallCond','BsmtFullBath', 'BsmtHalfBath', 'FullBath', 'HalfBath','KitchenAbvGr',\n'BedroomAbvGr','Fireplaces','MoSold','YrSold']]\nprint(num_train.shape)\nprint(num_test.shape)\nnumerical_categorical_feature=c = pd.concat((num_train,num_test),sort=False)\nprint(numerical_categorical_feature.shape)\nnumerical_categorical_feature=numerical_categorical_feature.astype('O')","22eb351c":"sns.violinplot(x=num_train['OverallCond'],y=num_train['OverallCond'].index)","81e9e345":"numerical_categorical_feature=pd.get_dummies(numerical_categorical_feature)\nnum_train_dummy=numerical_categorical_feature[:1451]\nnum_test_dummy=numerical_categorical_feature[1451:].reset_index(drop=True)\nprint(num_train_dummy.shape)\nprint(num_test_dummy.shape)","8ed9d9f9":"c = pd.concat((train_c, test_c), sort=False).reset_index(drop=True)","420c0c68":"c1=pd.get_dummies(c)","6afea7d4":"final_train_c=c1.iloc[:train_c.shape[0]]\n# final_train_c=final_train_c.drop(index).reset_index(drop=True)\nfinal_train_c.shape","d5d65e64":"final_test_c=c1.iloc[train_c.shape[0]:]\nfinal_test_c=final_test_c.reset_index(drop=True)\nfinal_test_c.shape","b5a7473f":"final_train_c=final_train_c.merge(num_train_dummy,left_index=True,right_index=True)\nfinal_test_c=final_test_c.merge(num_test_dummy,left_index=True,right_index=True)","aa74b95a":"train_c_labeled=pd.DataFrame()\ntest_c_labeled=pd.DataFrame()\n\nfor col in train_c.columns:\n    le = preprocessing.LabelEncoder()\n    train_c_labeled[col]=le.fit_transform(train_c[col])\n    test_c_labeled[col]=le.fit_transform(test_c[col])","b306cc02":"test_c_labeled","5443a09b":"final_test_n","b819dedd":"x_train=final_train_n.merge(final_train_c,left_index=True,right_index=True).reset_index(drop=True)\nx_test=final_test_n.merge(final_test_c,left_index=True,right_index=True).reset_index(drop=True)","c729051b":"x_train_xgb=final_train_n.merge(train_c_labeled,left_index=True,right_index=True).reset_index(drop=True)\nx_test_xgb=final_test_n.merge(test_c_labeled,left_index=True,right_index=True).reset_index(drop=True)","3accf843":"print(x_train.shape)\nprint(x_test.shape)\nprint(x_train_xgb.shape)\nprint(x_test_xgb.shape)","9c0ec36a":"from sklearn.model_selection import train_test_split\nX_train, X_test, Y_train, Y_test = train_test_split(x_train, y_train,test_size = .3, random_state=0)","ab6706fc":"from sklearn.model_selection import GridSearchCV\nfrom sklearn.linear_model import Ridge\nfrom sklearn.metrics import mean_squared_error\n\nridge=Ridge()\nparameters= {'alpha':[x for x in [0.1,0.2,0.4,0.5,0.7,0.8,1]]}\n\nridge_reg=GridSearchCV(ridge, param_grid=parameters)\nridge_reg.fit(X_train,Y_train)\nprint(\"The best value of Alpha is: \",ridge_reg.best_params_)","dc8d3fca":"ridge_mod=Ridge(alpha=1)\nridge_mod.fit(x_train,y_train)\ny_pred_train=ridge_mod.predict(X_train)\ny_pred_test=ridge_mod.predict(X_test)\n\nprint('Root Mean Square Error train = ' + str(np.sqrt(mean_squared_error(Y_train, y_pred_train))))\nprint('Root Mean Square Error test = ' + str(np.sqrt(mean_squared_error(Y_test, y_pred_test)))) ","a40c4bdf":"from sklearn.linear_model import Lasso\n\nLasso_reg =Lasso()\nparameters= {'alpha':[x for x in [0.0005,0.001,0.01,0.1,1]]}\n\nLasso_reg=GridSearchCV(Lasso_reg, param_grid=parameters)\nLasso_reg.fit(X_train,Y_train)\nprint(\"The best value of Alpha is: \",Lasso_reg.best_params_,Lasso_reg.best_score_)","31e8e346":"Lasso_reg =Lasso(alpha=0.0005)\nLasso_reg.fit(x_train,y_train)\ny_pred_train=Lasso_reg.predict(X_train)\ny_pred_test=Lasso_reg.predict(X_test)\n\nprint('Root Mean Square Error train = ' + str(np.sqrt(mean_squared_error(Y_train, y_pred_train))))\nprint('Root Mean Square Error test = ' + str(np.sqrt(mean_squared_error(Y_test, y_pred_test)))) ","da108400":"from sklearn.ensemble import RandomForestRegressor\nrf = RandomForestRegressor()\nparams = {\"max_depth\":[15,20,25], \"n_estimators\":[27,30,33]}\nrf_reg = GridSearchCV(rf, params, cv = 10, n_jobs =10)\nrf_reg.fit(X_train, Y_train)\nprint(rf_reg.best_estimator_)\nbest_estimator=rf_reg.best_estimator_\ny_pred_train = best_estimator.predict(X_train)\ny_pred_test = best_estimator.predict(X_test)\n\nprint('Root Mean Square Error train = ' + str(np.sqrt(mean_squared_error(Y_train, y_pred_train))))\nprint('Root Mean Square Error test = ' + str(np.sqrt(mean_squared_error(Y_test, y_pred_test)))) ","55cdb26f":"X_train_xgb, X_test_xgb, Y_train_xgb, Y_test_xgb = train_test_split(x_train_xgb,y_train,test_size = 0.3, random_state=0)","e4fdb8e0":"import xgboost as xgb\n\nxgbr = xgb.XGBRegressor()\nparams = {'learning_rate': [0.10,0.14,0.15,0.16, 0.2], 'max_depth': [1,2,3,5] }\n\nxgbr_reg = GridSearchCV(xgbr, params, cv = 10, n_jobs =1)\nxgbr_reg.fit(X_train_xgb,Y_train_xgb)\n\nprint(\"Best params:{}\".format(xgbr_reg.best_params_))\n\nbest_x = xgbr_reg.best_estimator_\ny_train_pred_x = best_x.predict(X_train_xgb)\ny_val_pred_x = best_x.predict(X_test_xgb)","b80c7b81":"print('Root Mean Square Error train = ' + str(np.sqrt(mean_squared_error(Y_train_xgb, y_train_pred_x))))\nprint('Root Mean Square Error test = ' + str(np.sqrt(mean_squared_error(Y_test_xgb, y_val_pred_x)))) ","108860fa":"y_test=ridge_mod.predict(x_test)","ccd6e201":"final_y_test=np.expm1(y_test)","6fa6b259":"final_y_test","56928e94":"sample=pd.read_csv('\/kaggle\/input\/house-prices-advanced-regression-techniques\/sample_submission.csv')\nsubmission=pd.DataFrame({\"Id\":sample['Id'],\n                         \"SalePrice\":final_y_test})\nsubmission.to_csv('submission.csv',index=False)","5bfa91b1":"submission.head()","3fc214a9":"<div>\nSome features are like categorical features.\n    <br><br>e.g.,OverallCond,BsmtFullBath,BsmtHalfBath,FullBath,HalfBath,BedroomAbvGr,Fireplaces,KitchenAbrGr,MoSold,YrSold.\n<br>\n<br>\nAlthough their type is Integer, We would treat them as a categorical feature in the next section [2.EDA on Categorical Features](#intLink)\n<\/div>","18af653c":"**5.3 Prediction**","8ce8efbd":"# 4. Splitting data into training and testing data","dad83fba":"**1.5 Skewing the features**","8fa49bb7":"# 2. **EDA on Categorical Features**","ef82c638":"**2.5 Labeling only for XGB Regressor**","16cc7f71":"**1.2 Misssing Values**","6e5bf0a7":"**2.1 Missing values **","c7067dfb":"Ridge performs better than the Lasso on this dataset","72802240":"**1.6 scaling**","aafab7bb":"># **Work Flow of this notebook:**\n         \n          1.EDA on Numerical Features\n           - Data Cleaning\n           - Feature Generation\n           - Skewing\n           - Scaling\n          2.EDA on Categorical Features\n           - Data Cleaning \n          3.Regularization and Evaluation\n           - Ridge\n           - Lasso\n           - Random Forest Regressor\n           - XGB Regressor          ","89d90e80":"We have removed co-linearity from our dataset, Now we will manually examine each feature and remove non-linear features from the dataset","1be95988":"**1.3 Feature Generation**","dadd8c38":"# 1. **EDA on Numerical Features**\n\n\n**1.1 Removing non-linear and co-linear features**","7421ecd2":">Outliers:\n\n     LotFrontage > 300 \n     MasVnrArea > 1200\n     Bsmt > 12000\n     GrLivArea > 4600\n     GarageArea > 1200\n     SalePrice > 700000","fb7c906b":"**5.4 XGB Regressor**","7bf9bb11":"**1.4 Outliers**","3a78f83c":">* We can clearly see in the above graphs that features have so many zeros.\n>* That means many missing values are filled with zero.","e338dfb3":"# 3. Merging numerical and categorical data","ce72ef81":"# 5. **Regularization and Evaluation**","50e6b26c":"**5.2 Lasso**","bf3c2c65":"**2.4 merge the numerical_categorical_feature with final_test_c**","b4bc3189":"But this new TotalPorchSF feature is not linear with SalePrice so we will not use it .","ab6a1bfd":">we have removed the outliears manually","96555dff":"We have removed some non-linear features from the dataset","3f8b3b01":"<div id=\"intLink\">\n**2.2 Feature engineering**\n    <\/div>","77d71358":"**2.3 Get Dummies**","a465d33a":"Drop first five columns ","76015e9e":"**5.3 Random Forest Regressor**","2d9479fa":"**Merging for XGB Regressor**","297c9ff7":"**5.1 Ridge**","291d42c1":"**Co-linearity**:\n\nWe will choose only one feature from each co-linear pair.\n\n* GarageCars and GarageArea \n* TotalBsmtSF and 1stFirSF \n* TotRmsAbvGrd and GrLIveArea \n\n>I choose GarageArea,TotalBsmtSF,GrLIveArea.I have made this decision by plotting below scatter plots.","48ee9091":"<span style=\"color:Green\">If you find this notebook useful, Please Upvote it, It motivates me to write and share more quality content","61139e24":"We had discussed about some numerical features which looked like categorical features. Now we will work on it in this section"}}