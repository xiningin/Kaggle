{"cell_type":{"1c9b6715":"code","ce54ea42":"code","cedca44b":"code","0acac083":"code","d8e8c233":"code","2b71cbfd":"code","91f0e316":"code","71dc5f6a":"code","bd5e67b8":"markdown","77c7ed55":"markdown","813d0206":"markdown","f966b237":"markdown","ac9174a4":"markdown"},"source":{"1c9b6715":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\nfrom sklearn import datasets\nfrom sklearn.manifold import TSNE\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))","ce54ea42":"# data from sklearn datasets\ndata = datasets.fetch_openml('mnist_784', version=1, return_X_y=True)\n\n# Extract data & target from the dataset\npixel_data, targets = data\ntargets = targets.astype(int)","cedca44b":"print(\"Shape of Pixel data : {}\".format(pixel_data.shape))","0acac083":"# Reshape the pixel data into 28x28\nsingle_image = pixel_data[5, :].reshape(28,28)\n\nplt.imshow(single_image, cmap='gray')\nplt.title(f\"Image of the text: {targets[5]}\", fontsize=15)\nplt.show()","d8e8c233":"# Object of tSNE\ntsne = TSNE(n_components=2, random_state=42)\n\nx_transformed = tsne.fit_transform(pixel_data[:3000, :]) # Data upto 3000 rows","2b71cbfd":"# convert the transformed data into dataframe\ntsne_df = pd.DataFrame(np.column_stack((x_transformed, targets[:3000])), columns=['X', 'Y', \"Targets\"])\n\ntsne_df.loc[:, \"Targets\"] = tsne_df.Targets.astype(int)","91f0e316":"tsne_df.head(10)","71dc5f6a":"plt.figure(figsize=(10,8))\n\ng = sns.FacetGrid(data=tsne_df, hue='Targets', height=8)\n\ng.map(plt.scatter, 'X', 'Y').add_legend()\n\nplt.show()","bd5e67b8":"## t-SNE Transformation\n\nIn this step we are going to perform two operations,\n1. Transform the 3000 rows of image pixel data into t-SNE 2D transformed data\n2. Assign target values to the transformed 2-D data points.","77c7ed55":"# t-SNE Decomposition on MNIST Dataset\n\n## What is tSNE?\n\n t-SNE is known as **t-Distribution Stochastic Neighbour Embedding**. It is a **non-linear dimensionality reduction** technique.\n \n It is a tool to visualize high dimensional data. \n \n## How doe t-SNE work?\n\nIt converts similarities between data points to joint probabilities and tries to minimize the [Kullbeck-Leibler](https:\/\/en.wikipedia.org\/wiki\/Kullback%E2%80%93Leibler_divergence) divergence (aka **relative entropy**) between the joint probabilities of the low-dimensional embedding and the high dimensional data. \n\nt-SNE has a cost function that is not convex i.e, with different initializations we can get different results. \n\n## Key requirement for t-SNE\n\nIt is highly important to apply some other high dimensional reduction technique(*PCA or TruncatedSVD*) to be applied before **t-SNE**. It will reduce the number of dimension to resonable amount(eg.50) if the number of features is very high. ","813d0206":"## Import Libraries","f966b237":"## Load Dataset","ac9174a4":"## Plot the t-SNE transformed data\n\nThe following plot depicts the cluster of data based on the target values in 2-Dimensional space. "}}