{"cell_type":{"a7d8a2ec":"code","7daf3c9e":"code","69dc62c9":"code","3d48313b":"code","d52c4db3":"code","9d5d8223":"code","047ed61f":"code","9e343c44":"code","cfccda2b":"code","76ee55da":"code","cc5aa7b8":"code","af677a5c":"code","d12fb83b":"code","9b2d18d8":"code","af6ad9e1":"markdown","e9e7530f":"markdown","91311577":"markdown","0954918a":"markdown","44577442":"markdown","68a42af2":"markdown","3eb77f4f":"markdown","4525428f":"markdown","92d8e188":"markdown","39decaa0":"markdown","a73d6014":"markdown","cf4b0374":"markdown","09150fb5":"markdown","ca230eb9":"markdown","1e3b5fd5":"markdown","47ef749f":"markdown","e52ad304":"markdown","169f761a":"markdown"},"source":{"a7d8a2ec":"import pandas as pd","7daf3c9e":"df1 = pd.DataFrame({\n    'name': ['John Smith', 'Jane Doe', 'Joe Schmo'],\n    'address': ['123 Main St.', '456 Maple Ave.', '789 Broadway'],\n    'age': [34, 28, 51]\n})\nprint(df1)","69dc62c9":"df2 = pd.DataFrame([\n    ['John Smith', '123 Main St.', 34],\n    ['Jane Doe', '456 Maple Ave.', 28],\n    ['Joe Schmo', '789 Broadway', 51]\n    ],\n    columns=['name', 'address', 'age'])\nprint(df2)","3d48313b":"# save data to a CSV\ndf1.to_csv('new-csv-file.csv')\n\n# load CSV file into a DataFrame in Pandas\ndf3 = pd.read_csv('..\/input\/sample-csv-file\/sample.csv')\n\nprint(df3)","d52c4db3":"df4 = pd.read_csv('..\/input\/imdb-data\/IMDB-Movie-Data.csv')\n\n# print first 3 rows of DataFrame (Default 5)\nprint(df4.head(3))\n\n# print statistics for each columns\nprint(df4.info())","9d5d8223":"# Select column 'Title'\nimdb_title = df4.Title\nprint(imdb_title.head())","047ed61f":"# Select column 'Runtime (Minutes)'\nimdb_runtime_minutes = df4['Runtime (Minutes)']\nprint(imdb_runtime_minutes.head())","9e343c44":"imdb_data = df4[['Title', 'Runtime (Minutes)']]\nprint(imdb_data.head())","cfccda2b":"# select fourth row\nsing_movie = imdb_data.iloc[3]\nprint(sing_movie)","76ee55da":"# select last third row\nlast_three_movies = imdb_data.iloc[-3:]\nprint(last_three_movies)","cc5aa7b8":"# select rows with runtime less than 75\nshort_movies = imdb_data[imdb_data['Runtime (Minutes)'] < 75]\nprint(short_movies)","af677a5c":"# select rows with runtime between 60 and 80\nmedium_length_movies = imdb_data[(imdb_data['Runtime (Minutes)'] > 60) &\n                                 (imdb_data['Runtime (Minutes)'] < 80)]\nprint(medium_length_movies)","d12fb83b":"# select rows with title in the list\nfav_movies = imdb_data[imdb_data.Title.isin([\n    'Wolves at the Door', 'Guardians of the Galaxy'\n])]\nprint(fav_movies)","9b2d18d8":"# reset indices without changing the source DF\nfav_movies = fav_movies.reset_index(drop=True)\nprint(fav_movies)\n\n# reset indices in the source DF\nmedium_length_movies.reset_index(drop=True, inplace=True)\nprint(medium_length_movies)","af6ad9e1":"## 3. Inspecting a DataFrame","e9e7530f":"#### Selecting rows with specific values","91311577":"## 6. Selecting rows with logical conditions","0954918a":"#### Selecting multiple columns","44577442":"#####  The columns will appear in alphabetical order because dictionaries don't have any inherent order for columns","68a42af2":"## 7. Resetting indices  \n##### When we select a subset of a DataFrame using logic, we end up with non-consecutive indices. We can fix this using the method **.reset_index()**. ","3eb77f4f":"#### Add data using List","4525428f":"#### Using name of column\n##### used only if name of columns follows all the rules of variable naming","92d8e188":"## 4. Selecting columns","39decaa0":"#### Add data using Dictonary","a73d6014":"#### Selecting multiple rows","cf4b0374":"## 1. Creating a DataFrame","09150fb5":"#### Selecting rows with multiple logical conditions\n##### Use paranthesis when combining multiple logical condition","ca230eb9":"## 5. Selecting rows","1e3b5fd5":"#### Using key value","47ef749f":"### That is all for now. Hope it helped you!\n#### Check out [Part 2](https:\/\/www.kaggle.com\/ctxplorer\/data-processing-in-pandas-ii) of the series.","e52ad304":"# Data Processing in Pandas - Notes  \n\n*This is first part of a two part series : Part 1, [Part 2](https:\/\/www.kaggle.com\/ctxplorer\/data-processing-in-pandas-ii)*\n\n#### Content:\n1. Creating a DataFrame\n2. Loading and saving CSVs\n3. Inspecting a DataFrame\n4. Selecting columns\n5. Selecting rows \n6. Selecting rows with logical conditions\n7. Resetting indices ","169f761a":"## 2. Loading and saving CSVs"}}