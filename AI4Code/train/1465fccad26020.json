{"cell_type":{"c3a2190a":"code","e963dfc4":"code","b72b91ea":"code","3fb3f332":"code","56a6abb7":"code","19e80e06":"code","1c1b92ae":"code","b4899de5":"code","5d2f61a5":"code","106f930d":"code","61691566":"code","c35e706b":"code","41a82c1a":"code","c610ff71":"code","04e24134":"code","2ec77b5d":"code","48d4789b":"markdown","dba69226":"markdown","6d3c4cac":"markdown","93b98b2c":"markdown","18970444":"markdown","a3f5d0e3":"markdown","e5c70681":"markdown","330f96af":"markdown","d1b5cf49":"markdown","fbe566c5":"markdown","782b765e":"markdown","5c3804e9":"markdown","d6efd666":"markdown","0442004d":"markdown","b3d789f3":"markdown","8b249c3d":"markdown","5f13ac7d":"markdown"},"source":{"c3a2190a":"import pandas as pd\nfrom typing import List","e963dfc4":"weather_df = pd.read_csv(\"..\/input\/delhi-weather-dataset\/Delhi_Weather_data.csv\")","b72b91ea":"weather_df.head()","3fb3f332":"weather_df.info()","56a6abb7":"weather_df.info()","19e80e06":"# float items in this dataframe\nweather_df.select_dtypes(include=['float64']).columns.tolist()","1c1b92ae":"def optimize_floats(df):\n    floats = df.select_dtypes(include=['float64']).columns.tolist()\n    df[floats] = df[floats].apply(pd.to_numeric, downcast='float')\n    return df","b4899de5":"# Now Float 64 is reduced to Float 32\noptimize_floats(weather_df).info()","5d2f61a5":"weather_df.select_dtypes(include=['int64']).columns.tolist()","106f930d":"def optimize_ints(df: pd.DataFrame) -> pd.DataFrame:\n    ints = df.select_dtypes(include=['int64']).columns.tolist()\n    df[ints] = df[ints].apply(pd.to_numeric, downcast='integer')\n    return df\n","61691566":"optimize_ints(weather_df).info()","c35e706b":"weather_df.dt_txt = pd.to_datetime(weather_df.dt_txt)","41a82c1a":"weather_df.info()","c610ff71":"def optimize_objects(df, datetime_features):\n    for col in df.select_dtypes(include=['object']):\n        if col not in datetime_features:\n            num_unique_values = len(df[col].unique())\n            num_total_values = len(df[col])\n            if float(num_unique_values) \/ num_total_values < 0.5:\n                df[col] = df[col].astype('category')\n        else:\n            df[col] = pd.to_datetime(df[col])\n    return df","04e24134":"optimize_objects(weather_df, [\"dt_txt\"]).info()","2ec77b5d":"\ndef optimize_floats(df: pd.DataFrame) -> pd.DataFrame:\n    floats = df.select_dtypes(include=['float64']).columns.tolist()\n    df[floats] = df[floats].apply(pd.to_numeric, downcast='float')\n    return df\n\n\ndef optimize_ints(df: pd.DataFrame) -> pd.DataFrame:\n    ints = df.select_dtypes(include=['int64']).columns.tolist()\n    df[ints] = df[ints].apply(pd.to_numeric, downcast='integer')\n    return df\n\n\ndef optimize_objects(df: pd.DataFrame, datetime_features: List[str]) -> pd.DataFrame:\n    for col in df.select_dtypes(include=['object']):\n        if col not in datetime_features:\n            num_unique_values = len(df[col].unique())\n            num_total_values = len(df[col])\n            if float(num_unique_values) \/ num_total_values < 0.5:\n                df[col] = df[col].astype('category')\n        else:\n            df[col] = pd.to_datetime(df[col])\n    return df\n\n\n\ndef optimize(df: pd.DataFrame, datetime_features: List[str] = []):\n    return optimize_floats(optimize_ints(optimize_objects(df, datetime_features)))","48d4789b":"# Datetime\n\nDatetime values are defaultly stored as objects. In pandas there is an option to convert the datetime value from object type to datetime type.  \n\n","dba69226":"#### Checkout the reduction in memory for those individual columns ","6d3c4cac":"# 3. Memory Optimization\n<p style=\"font-size:18px\">\nOne of the drawbacks of Pandas is that by default the memory consumption of a DataFrame is inefficient. When reading in a csv or json file the column types are inferred and are defaulted to the largest data type (int64, float64, object).\n    \n\nOur weather DataFrame is build via a csv, which has the following properties:\n    \n<\/p>","93b98b2c":"All columns have the previously stated largest data types. ","18970444":"Please <b>Upvote<\/b> if you liked it. ","a3f5d0e3":"## Now if we are seeing this the df size of 1.9 Mb is reduced to 608 kb of data. nearly its been reduced to 68 % ","e5c70681":"# Int64\n\n1. Min Number: -9,223,372,036,854,775,808 \n2. Max Number: 9,223,372,036,854,775,807","330f96af":"## As a cummulative function, ","d1b5cf49":"# Objects","fbe566c5":"1. <b>Temp, Temp_min, Temp_max :<\/b> The highest temperature ever recorded on Earth was 136 Fahrenheit (58 Celsius) in the Libyan desert. The coldest temperature ever measured was -126 Fahrenheit (-88 Celsius) at Vostok Station in Antarctica.\n\n2. <b>Wind Speed :<\/b> Max is 231 miles per hour ( Wind Speed cant be negative.)","782b765e":"As you can see, even when we changed the object type to datetime type, it wont have a difference in memory . But it will be helping us in doing great datetime operations. ","5c3804e9":"# 2. Loading Dataset","d6efd666":"| Column Name      | Initial Dtype | Converted Dtype | \n| ----------- | ----------- |----------- |\n| pressure      | Int64       |    Int16       |\n| sea_level   | Int64        |       Int16      |\n| grnd_level      | Int64       |     Int16      |\n| humidity   | Int64        |       Int8      |\n| clouds      | Int64       |      Int8     |\n| wind_degree   | Int64        |      Int16       |","0442004d":"## Float64\n\nFloat64 will have a range of sign bit, 11 bits exponent, 52 bits mantissa \n1. Max Num : 1.7976931348623157e+308\n2. Min Num : -1.7976931348623157e+308","b3d789f3":"1. Max Pressure recorded: 1083.8mb (It cant be negative)\n2. Same thing wil be applicable to sea level, grnd level, humidity, clouds, wind degree\n","8b249c3d":"Throughout this notebook we will make use of Kaggle\u2019s public [Delhi Weather Dataset](https:\/\/www.kaggle.com\/syedjaferk\/delhi-weather-dataset), which consist of date, temperature, pressure, sea_level, grnd_level, clouds, wind_speed and more","5f13ac7d":"# 1. Description\n<p style=\"font-size:18px\">Pandas is widely used across the world. It started mostly as a data exploration and experimentation tool. Pandas is a very powerful tool, but needs mastering to gain optimal performance. \n<\/p>"}}