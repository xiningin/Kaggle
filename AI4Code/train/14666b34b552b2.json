{"cell_type":{"110d19d0":"code","1314a775":"code","4412da2d":"code","7f59ff96":"code","5c964eb5":"code","3ab949ce":"code","9327970b":"code","fe990899":"code","63f4ef77":"code","02ec0814":"code","a810a347":"code","784b8a3a":"code","a3c6796d":"code","c2e363c9":"code","081080db":"code","77ac04fa":"code","706b19aa":"code","12f72c05":"code","502454d7":"code","bef9fe1c":"code","39cb0dcd":"code","415c54cb":"code","faf23527":"code","2baf8439":"code","2de1d5d9":"code","bed33982":"code","3176d97e":"code","f9990939":"code","246828ef":"code","969766ef":"code","ddc723c0":"code","e12e8081":"code","9088ce76":"code","abe109f8":"code","ba6a0688":"markdown","1b0a7145":"markdown","09235343":"markdown","0052d195":"markdown","71144f52":"markdown","11a67ca2":"markdown","97a8a45e":"markdown","586ed4d1":"markdown","7c766e94":"markdown","c4188c79":"markdown","186a12ed":"markdown","e1e96c17":"markdown","30f69299":"markdown","c8131da6":"markdown","0b732ebf":"markdown","c86c230c":"markdown","d86e5305":"markdown","5698f069":"markdown","33f625f9":"markdown","eee3a485":"markdown","fe4b3028":"markdown","8fb1b493":"markdown","f3b5294d":"markdown","cd57f00e":"markdown","9ae5f2e7":"markdown","a6f77625":"markdown","cf907f21":"markdown","afd7fd1e":"markdown","e47896a3":"markdown","35682117":"markdown","86acda8c":"markdown","b8aacb15":"markdown","9f6ce7a1":"markdown","c45d3a3a":"markdown","afcef6a2":"markdown","099ea8a5":"markdown","81149f5a":"markdown","ec10d589":"markdown","fca6263f":"markdown","5409cce4":"markdown"},"source":{"110d19d0":"import collections\nimport json\nimport os\n\nimport folium\nimport matplotlib.pyplot as plt\nimport nltk\nimport numpy as np\nimport re\nimport pandas as pd\nimport seaborn as sns\nfrom sklearn.cluster import KMeans\nfrom sklearn.metrics.pairwise import cosine_similarity\nimport umap\nfrom wordcloud import WordCloud","1314a775":"plt.style.use(\"Solarize_Light2\")","4412da2d":"for dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))","7f59ff96":"!ls ..\/input\/indian-food-101","5c964eb5":"df = pd.read_csv(\"\/kaggle\/input\/indian-food-101\/indian_food.csv\")","3ab949ce":"df.head()","9327970b":"df.shape","fe990899":"df.info()","63f4ef77":"print(\"There are \", len(set(df['name'])), \"dish\")","02ec0814":"df_diet =  df[[\"diet\"]].copy()\ndf_diet[\"count\"] = 1\ndf_diet = df_diet.groupby(\"diet\").count()\ndf_diet.head()","a810a347":"fig, axes = plt.subplots(1, 2, figsize=(10,6), gridspec_kw=dict(wspace=0.1, hspace=0.6))\nfig.suptitle(\"Analisys of diet\", fontsize=15)\n\ng_diet = sns.countplot(data=df, x=\"diet\", order = df['diet'].value_counts().index,\n                       ax=axes[0])\ng_diet.set_title(\"diet countplot\")\n\ng_diet_pie = df_diet.plot.pie(y=\"count\", ax=axes[1])\ng_diet_pie.set_title(\"diet pie plot\")","784b8a3a":"fig, axes = plt.subplots(1, 2, figsize=(10,6), gridspec_kw=dict(wspace=0.1, hspace=0.6))\nfig.suptitle(\"Analisys of flavor profile\", fontsize=15)\n\ng_flavor_profile = sns.countplot(data=df, x=\"flavor_profile\", ax=axes[0], \n                                 order = df['flavor_profile'].value_counts().index)\ng_flavor_profile.set_title(\"flavor profile countplot\")\n\ndf_flavor_profile =  df[[\"flavor_profile\"]].copy()\ndf_flavor_profile[\"count\"] = 1\ndf_flavor_profile = df_flavor_profile.groupby(\"flavor_profile\").count()\ng_flavor_profile_pie = df_flavor_profile.plot.pie(y=\"count\", ax=axes[1])\ng_flavor_profile_pie.set_title(\"flavor profile pie plot\")","a3c6796d":"g_course = sns.countplot(data=df, x=\"course\", order = df['course'].value_counts().index)\ng_course.set_title(\"course countplot\")","c2e363c9":"fig, axes = plt.subplots(1, 2, figsize=(10,6), gridspec_kw=dict(wspace=0.1, hspace=0.6))\nfig.suptitle(\"Analisys of region\", fontsize=15)\n\ng_region = sns.countplot(data=df, x=\"region\", order = df['region'].value_counts().index, ax=axes[0])\ng_region.set_title(\"region countplot\")\n\ng_region = sns.countplot(data=df, x=\"region\", hue=\"flavor_profile\", ax=axes[1],\n                         order = df['region'].value_counts().index)\ng_region.legend_._loc = 1\ng_region.set_title(\"taste countplot per region\")","081080db":"plt.figure(figsize=(20, 10))\ng_state = sns.countplot(data=df, x=\"state\",order = df['state'].value_counts().index)\ng_state.set_xticklabels(g_state.get_xticklabels(), rotation=45)\ng_state.set_title(\"state countplot\")","77ac04fa":"fig, axes = plt.subplots(1, 2, figsize=(10,6), gridspec_kw=dict(wspace=0.1, hspace=0.6))\nfig.suptitle(\"Analisys of prep&cook time\", fontsize=15)\n\ng_prep_time = sns.distplot(df[\"prep_time\"], ax=axes[0])\ng_prep_time.set_title(\"prep_time countplot\")\n\ng_cook_time = sns.distplot(df[\"cook_time\"], ax=axes[1])\ng_cook_time.set_title(\"cook_time countplot\")","706b19aa":"all_words = []\nfor i in range(len(df)):\n    txt =  df[\"ingredients\"][i]\n    #txt =  txt.replace(', ', ',').lower()\n    #all_words += [ word for word in re.split('[,.]',txt) ]\n    all_words += [word.lower() for word in nltk.word_tokenize(txt) if not word in ['.', ',']]\n    \nword_freq = collections.Counter(all_words)\nW = WordCloud().fit_words(word_freq)","12f72c05":"plt.figure(figsize = (8, 8), facecolor = None) \nplt.imshow(W)\nplt.axis('off')\nplt.show()","502454d7":"words = np.array(list(word_freq.keys()))\nwords","bef9fe1c":"def gen_ingredients_vector(ingredients):\n    ingredients_vec = np.zeros(words.shape)\n    ingredients = set([word.lower() for word in nltk.word_tokenize(ingredients) if not word in ['.', ',']])\n    for ingredient in ingredients:\n        idx = np.where(words == ingredient)\n        ingredients_vec[idx] = 1\n    return ingredients_vec.tolist()\n\ndf[\"ingredients_vec\"] = df[\"ingredients\"].map(gen_ingredients_vector)\n\ndf.head()","39cb0dcd":"# To input heatmap, I made ingredients_vecs.\ningredients_vecs = []\nfor i in range(len(df)):\n    ingredients_vecs.append(df[\"ingredients_vec\"][i])\n    \ningredients_vecs = np.array(ingredients_vecs)","415c54cb":"ingredients_vecs","faf23527":"cos_matrix = cosine_similarity(ingredients_vecs, ingredients_vecs)","2baf8439":"plt.figure(figsize=(20, 20))\nax = sns.heatmap(cos_matrix)\nax.set_title(\"cosine_similarity of ingredients_vectors\")","2de1d5d9":"df.iloc[[10,12]]","bed33982":"cosine_similarity([ingredients_vecs[10]], [ingredients_vecs[12]])","3176d97e":"df.iloc[[10,56]]","f9990939":"cosine_similarity([ingredients_vecs[10]], [ingredients_vecs[56]])","246828ef":"kmeans = KMeans(n_clusters=5, random_state=0).fit(ingredients_vecs)","969766ef":"reducer = umap.UMAP()\nembedding = reducer.fit_transform(ingredients_vecs)","ddc723c0":"plt.scatter(\n    embedding[:, 0],\n    embedding[:, 1],\n    c=kmeans.labels_)\nplt.gca().set_aspect('equal', 'datalim')\nplt.title('UMAP projection of ingredients vectors', fontsize=15)","e12e8081":"def get_cosine_similarity_heatmap(df,state=None, region=None):\n    \"\"\"\n    Visualize cosine similarity heatmap of ingredients vector.\n    And return filtered dataframe.\n    \"\"\"\n    \n    if state==None and region==None:\n        df_filtered = df\n    elif state!=None:\n        df_filtered = df[df[\"state\"]==state]\n    elif region!=None:\n        df_filtered = df[df[\"region\"]==region]\n    else:\n        df_filtered = df[df[\"state\"]==state & df[\"region\"]==region]\n    \n    #ingredients_vecs = []\n    \n    ingredients_vecs = [vec for vec in df_filtered[\"ingredients_vec\"]]\n    #for i in range(len(df_filtered)):\n    #    ingredients_vecs.append(df_filtered[\"ingredients_vec\"][i])\n    \n    ingredients_vecs = np.array(ingredients_vecs)\n    cos_matrix = cosine_similarity(ingredients_vecs, ingredients_vecs)\n    \n    plt.figure(figsize=(15, 15))\n    ax = sns.heatmap(cos_matrix)\n    ax.set_title(f\"cosine_similarity of ingredients_vectors in {state} and {region}\")\n    \n    return df_filtered.reset_index()","9088ce76":"df_WestBengal_East = get_cosine_similarity_heatmap(df, \"West Bengal\", \"East\")","abe109f8":"df_WestBengal_East.iloc[[5,8]]","ba6a0688":"## Data overviewing\n\nLet's load dataset. There are one csv data.","1b0a7145":"And let's turn it into a word cloud.","09235343":"### course\n\nCource represents dish's type in cource.","0052d195":"There are no null. prep_time and cook_time are int and others are string. ","71144f52":"### region\n\nregion represents witch region's dish. The characteristics of the dishes should be influenced by cooperation in the region.","11a67ca2":"# <div class=\"alert alert-block alert-success\">About this notebook<\/div>","97a8a45e":"Basundi is an Indian sweet in Gujarat, Maharashtra , Telangana, Tamil Nadu and Karnataka. By following pictures, you can found it's certainly not similar.\n\n- Laddu\n\n![Laddu](https:\/\/upload.wikimedia.org\/wikipedia\/commons\/thumb\/d\/d9\/Laddu-Janakpur-Community_Outreach-City_Tour_Day-4-6751.jpg\/220px-Laddu-Janakpur-Community_Outreach-City_Tour_Day-4-6751.jpg)\n\n- Basundi\n\n![Basundi](https:\/\/upload.wikimedia.org\/wikipedia\/commons\/thumb\/3\/39\/Basundi_Indian_Dessert_Mithai_Sweets.jpg\/220px-Basundi_Indian_Dessert_Mithai_Sweets.jpg)\n\n(Explanations and pictures are from https:\/\/en.wikipedia.org\/wiki\/)","586ed4d1":"### flavor_profile\n\nflavor_profile represents dish flaver. Let's see them.","7c766e94":"As you can see, some of it is mixed, but you can see that the foods are coming together relatively nicely. So we may say that ingredients vector represents simmilarity of foods nicely.","c4188c79":"# <div class=\"alert alert-block alert-info\">EDA<\/div>","186a12ed":"# <div class=\"alert alert-block alert-info\">Analysis of similarity<\/div>\n\nNow, I focus on word included in ingredients. This is because if we use same ingredient, the results should be naturally similar.","e1e96c17":"Most of the foods seem to be completed preparing and cooking in less than 100 minutes.\n\nBut, there are very elaborate dish... I would love to try such painstakingly prepared food.","30f69299":"### Following two sweets are similar. Their cosine similarity is high.","c8131da6":"The most common is main cource. The next most common is dessert. The third is snack. Also, there is a little starter.","0b732ebf":"As you can see heatmap, index 5 and 8 are similar.\n\nLet's check their ingredients.\n\n","c86c230c":"In this notebook, I tried to see similarity of foods.\n\nI focus on ingredients of food. This is because if we use same ingredient, the results should be naturally similar. Of cource, even if the ingredients are the same, different processing methods could result in a completely different dish, but let's turn a blind eye to that in this case.\n\nBut by putting this simple hypothesis, I found interesting result, so I'll share that.","d86e5305":"## Similarity search:\n\nTo find out similar dishes region-wise or state-wise based on list of ingredients, I made get_cosine_similarity_heatmap function. You can generate heatmap filtered by region and state. If you can see high similar cells on heatmap, you can search high similar dishes.\n\nLet's search!","5698f069":"There doesn't seem to be any overlap in the dishes.","33f625f9":"Most of them seem to be vegitarian.\n\nLet's see on view of rate. I'll count them.\n\nLooking at the pie chart, the ratios were more intuitive. We can see that it's almost 90% vegetarian.","eee3a485":"## Cosine similarity\n\nI use cosine similarity to calculate similarity of ingredients vectors. Cosine similarity often used to calculate sentence similarity. In fact, ingredients vectors represent sentence, so it should be a good match. If cosine similarity between two foods is high, we can say the foods are similar. \n\n![cosine similarity](https:\/\/wikimedia.org\/api\/rest_v1\/media\/math\/render\/svg\/1d94e5903f7936d3c131e040ef2c51b473dd071d)\n\nFor more detail of cosine similarity, please refer following:\n\nhttps:\/\/en.wikipedia.org\/wiki\/Cosine_similarity","fe4b3028":"Laddu is a sphere-shaped sweet originating from the Indian subcontinent. Nankhatai are shortbread biscuits, originating from the Indian subcontinent, popular in Northern India and Pakistan. This two sweets are similar.\n\n- Laddu\n\n![Laddu](https:\/\/upload.wikimedia.org\/wikipedia\/commons\/thumb\/d\/d9\/Laddu-Janakpur-Community_Outreach-City_Tour_Day-4-6751.jpg\/220px-Laddu-Janakpur-Community_Outreach-City_Tour_Day-4-6751.jpg)\n\n- Nankhatai\n\n![Nankhatai](https:\/\/upload.wikimedia.org\/wikipedia\/commons\/thumb\/3\/37\/Nankhatai.jpg\/220px-Nankhatai.jpg)\n\n(Explanations and pictures are from https:\/\/en.wikipedia.org\/wiki\/)","8fb1b493":"### state\n\nregion represents which state's dish.","f3b5294d":"## Load liblraries","cd57f00e":"The states seem to be somewhat scattered, but they tend to be concentrated in the first six or so states. Also there is quite a lot of null.","9ae5f2e7":"From all words and ingredients of each food, I create \"ingredients vector\". This vector represents which ingredients the food has. Length of this vector is lenght of list of all ingredient words. If food includes \"red pepper\" as ingredient, the element of the vector corresponding to \"red pepper\" is 1. If not, it's zero.","a6f77625":"### Dish\n\nLet's see data overview and its' trends.","cf907f21":"Flour, dal and sugar are noticeable in cloud. ","afd7fd1e":"Index 5 is Ledikeni and index 9 is Pantua. Luckily, wikipedia clearly states that the two dishes are similar.\n\n> Pantua is very similar to the cheese-based fried sweet ledikeni.\n\n![Pantua](https:\/\/upload.wikimedia.org\/wikipedia\/commons\/thumb\/0\/0b\/Pantua_-_Kolkata_2011-09-20_5431.JPG\/220px-Pantua_-_Kolkata_2011-09-20_5431.JPG)\n\nPitcure and explanation are from https:\/\/en.wikipedia.org\/wiki\/Pantua","e47896a3":"Let's visualize the flavor_profile for each region to try it out. It's almost the same, but most of the regions have a lot of spicy profiles, while East has a lot of sweet profiles. Also, sour is concentrated in West.","35682117":"We can't understand the details because plot is so detailed \ud83d\ude05, but we can see that there are about 5 blocks of high cosine similarity near the diagonal elements.\n\n\n\nFor example, 0 - 66th (as you can see, this numbers correspond to index of \"df\")  ingredients vectors have high cosine similarity each others. \n\nThink in the same way, we reckon 66th - 108th, 109th - 159th, 160th - 222th and 223th - 255th as blocks. (Note that there is no statistical basis for this, it's just an rough estimate.)\n\nLet's find out exactly how similar they really are!","86acda8c":"This data has 9 columns and 255 records.\n\nLet's see data type and wheather there are null or not.","b8aacb15":"### ingredients\n\ningredients represents what the food is made of. This is sentence, so I'll parse them to words and count frequency.","9f6ce7a1":"-1 in any of the columns indicates NaN value.\n\nThe most common flavor is spicy. The next most common is sweet. We can see that these two make up roughly 80% or more of the total.","c45d3a3a":"### prep_time and cook_time\n\nThese columns represent preperation and cooking time.","afcef6a2":"### Following two sweets are not similar. Their cosine similarity is low.","099ea8a5":"## <div class=\"alert alert-block alert-info\">Preperation<\/div>","81149f5a":"## <div class=\"alert alert-block alert-success\">Concludion<\/div>\n\nI made word vector called  ingredients vector from dish's ingredients.\n\nWith cosine similarity, I can find similar dishes region-wise or state-wise.","ec10d589":"First, we got all ingredient words. They are following.","fca6263f":"## Demonstrating the validity of the vectors by kmeans and umap.\n\nI also try to demonstrate the validity of ingredients vector by kmeans and umap.\n\nBy cosine similarity heatmap, we found that there are five gruops, so I'll define the groups by kmeans. (Of cource, these cluster doesn't necessarily match the five group, though.)\n\nAnd using umap, I'll confirm that we can separete ingredients vector to the clusters in low dimension.","5409cce4":"<u>update information<\/u>\n\nversion1: first release\n\nversion2: fixed calculation method of ingredients word."}}