{"cell_type":{"65be206c":"code","f35b0a5c":"code","732ff076":"code","15291f9f":"code","100bd5cd":"code","7487156b":"code","f9ae4c44":"code","14754eb1":"code","f01fd497":"code","a48df637":"markdown","ee0f1b2d":"markdown"},"source":{"65be206c":"import tensorflow as tf\nfrom tensorflow.keras.layers import Dense, Conv2D, MaxPooling2D, Flatten, Dropout\nfrom tensorflow.keras.models import Model, Sequential\nfrom tensorflow.keras.preprocessing.image import ImageDataGenerator\nimport matplotlib.pyplot as plt\n","f35b0a5c":"dir = \"..\/input\/natural-images\/natural_images\"\nimg_size = (128, 128)","732ff076":"datagen = ImageDataGenerator(\n    rescale=1.\/255, \n    horizontal_flip=True, \n    rotation_range=15, \n    validation_split=0.2\n)\n\n\ntrain_data = datagen.flow_from_directory(\n    dir,\n    class_mode='categorical',\n    target_size=img_size,\n    shuffle=True,\n    subset='training',\n    batch_size=32\n)\n\ntest_data = datagen.flow_from_directory(\n    dir,\n    class_mode='categorical',\n    target_size=img_size,\n    shuffle=True,\n    subset='validation',\n    batch_size=32\n)\n","15291f9f":"labels = ['airplane', 'car', 'cat', 'dog', 'flower', 'fruit', 'motorbike', 'person']\ndef get_labels(preds):\n    return labels[tf.math.argmax(preds).numpy()]","100bd5cd":"x,y = next(iter(train_data))\nplt.imshow(x[5])\nprint(get_labels(y[5]))","7487156b":"seq = Sequential([\n    Conv2D(32, 3, activation='relu', input_shape=(128, 128, 3)),\n    Dropout(0.2),\n    Conv2D(64, 5, activation='relu'),\n    MaxPooling2D(2),\n    Dropout(0.2),\n    \n    Conv2D(128, 5, activation='relu'),\n    MaxPooling2D(4),\n    Dropout(0.2),\n    \n    Flatten(),\n    \n    Dense(64, activation='relu'),\n    \n    Dense(8, activation='softmax')\n])\nseq.summary()\n","f9ae4c44":"seq.compile(loss='categorical_crossentropy', optimizer='adam', metrics=['acc'])\nhistory = seq.fit(train_data, epochs=25, validation_data=test_data, )","14754eb1":"plt.figure(figsize=(11,5))\nplt.xlabel(\"Epochs\")\nplt.ylabel(\"Accuracy\")\nplt.title(\"Accuracy vs Validation Accuracy\")\nplt.plot(history.history['acc'], label='Train')\nplt.plot(history.history['val_acc'], label='Validation')\nplt.legend()","f01fd497":"plt.figure(figsize=(11,5))\nplt.title('Loss vs Validation Loss')\nplt.xlabel(\"Epochs\")\nplt.ylabel(\"Loss\")\nplt.plot(history.history['loss'], label='Train')\nplt.plot(history.history['val_loss'], label='Validation')\nplt.legend()","a48df637":"# Making the model\n## Using Sequential Model","ee0f1b2d":"# Image Classification Using Convolutions"}}