{"cell_type":{"5a5a814f":"code","52860764":"code","4af98012":"code","5da266cf":"code","5c5ae826":"code","1b1457bf":"markdown"},"source":{"5a5a814f":"import numpy as np\nimport pandas as pd\nfrom matplotlib import pyplot as plt\n\ndata = pd.read_csv(\"\/kaggle\/input\/digit-recognizer\/train.csv\")\ndata = np.array(data)\n\nm, n = data.shape\n\nnp.random.shuffle(data) \n\ndata_dev = data[0:1000].T\nY_dev = data_dev[0]\nX_dev = data_dev[1:n]\nX_dev = X_dev \/ 255.\n\ndata_train = data[1000:m].T\nY_train = data_train[0]\nX_train = data_train[1:n]\nX_train = X_train \/ 255.\n_,m_train = X_train.shape","52860764":"def init_params():\n    W1 = np.random.rand(10, 784) - 0.5\n    b1 = np.random.rand(10, 1) - 0.5\n    W2 = np.random.rand(10, 10) - 0.5\n    b2 = np.random.rand(10, 1) - 0.5\n    return W1, b1, W2, b2\n\ndef ReLU(Z):\n    return np.maximum(Z, 0)\n\ndef softmax(Z):\n    A = np.exp(Z) \/ sum(np.exp(Z))\n    return A\n    \ndef forward_prop(W1, b1, W2, b2, X):\n    Z1 = W1.dot(X) + b1\n    A1 = ReLU(Z1)\n    Z2 = W2.dot(A1) + b2\n    A2 = softmax(Z2)\n    return Z1, A1, Z2, A2\n\ndef ReLU_deriv(Z):\n    return Z > 0\n\ndef one_hot(Y):\n    one_hot_Y = np.zeros((Y.size, Y.max() + 1))\n    one_hot_Y[np.arange(Y.size), Y] = 1\n    one_hot_Y = one_hot_Y.T\n    return one_hot_Y\n\ndef backward_prop(Z1, A1, Z2, A2, W1, W2, X, Y):\n    one_hot_Y = one_hot(Y)\n    dZ2 = A2 - one_hot_Y\n    dW2 = 1 \/ m * dZ2.dot(A1.T)\n    db2 = 1 \/ m * np.sum(dZ2)\n    dZ1 = W2.T.dot(dZ2) * ReLU_deriv(Z1)\n    dW1 = 1 \/ m * dZ1.dot(X.T)\n    db1 = 1 \/ m * np.sum(dZ1)\n    return dW1, db1, dW2, db2\ndef update_params(W1, b1, W2, b2, dW1, db1, dW2, db2, alpha):\n    W1 = W1 - alpha * dW1\n    b1 = b1 - alpha * db1    \n    W2 = W2 - alpha * dW2  \n    b2 = b2 - alpha * db2    \n    return W1, b1, W2, b2\ndef get_predictions(A2):\n    return np.argmax(A2, 0)\ndef get_accuracy(predictions, Y):\n    return np.sum(predictions == Y) \/ Y.size\n\ndef gradient_descent(X, Y, alpha, iterations):\n    W1, b1, W2, b2 = init_params()\n    for i in range(iterations):\n        Z1, A1, Z2, A2 = forward_prop(W1, b1, W2, b2, X)\n        dW1, db1, dW2, db2 = backward_prop(Z1, A1, Z2, A2, W1, W2, X, Y)\n        W1, b1, W2, b2 = update_params(W1, b1, W2, b2, dW1, db1, dW2, db2, alpha)\n        if i % 10 == 0:\n            predictions = get_predictions(A2)\n            p = get_accuracy(predictions, Y)\n            print(\"Iteration : {} ---------- Accuracy : {} \".format(i,p))\n    return W1, b1, W2, b2","4af98012":"W1, b1, W2, b2 = gradient_descent(X_train, Y_train, 0.1, 700)","5da266cf":"def make_predictions(X, W1, b1, W2, b2):\n    _, _, _, A2 = forward_prop(W1, b1, W2, b2, X)\n    predictions = get_predictions(A2)\n    return predictions\n\ndef test_prediction(index, W1, b1, W2, b2):\n    current_image = X_train[:, index, None]\n    prediction = make_predictions(X_train[:, index, None], W1, b1, W2, b2)\n    label = Y_train[index]\n    print(\"Prediction: \", prediction)\n    print(\"Label: \", label)\n    \n    current_image = current_image.reshape((28, 28)) * 255\n    plt.gray()\n    plt.imshow(current_image, interpolation='nearest')\n    plt.show()","5c5ae826":"test_prediction(0, W1, b1, W2, b2)\ntest_prediction(1, W1, b1, W2, b2)\ntest_prediction(2, W1, b1, W2, b2)\ntest_prediction(3, W1, b1, W2, b2)","1b1457bf":"**MNIST HAND DIGIT CLASSIFICATION USING DEEP NEURAL NETWORK BUILT USING NUMPY**\n\nDATASET = [https:\/\/www.kaggle.com\/c\/digit-recognizer](http:\/\/)\n\nSource code : https:\/\/github.com\/ravikumarmn\/MNIST-Classification-Using-Deep-Neural-Network"}}