{"cell_type":{"006e3a4f":"code","401c068c":"code","3d405d1e":"code","6e9ad0e6":"code","0795e8d7":"code","ddd2c327":"code","1576ce1f":"code","78e9c691":"code","22f222c9":"code","4e15e341":"code","f6176307":"code","3a71ba69":"code","8c521dcc":"code","d4ee6085":"code","ef0f8983":"code","92d8ca54":"markdown","7b693b06":"markdown","2464490e":"markdown","8ee5f1b3":"markdown","45fa6416":"markdown","97f2728b":"markdown","f4fbd22f":"markdown","596099aa":"markdown","b3f1bbce":"markdown","56747ce9":"markdown","06f868f9":"markdown","389d8d0a":"markdown","737358a8":"markdown","a57282a2":"markdown","a0cbcd9d":"markdown","ab8cf0f7":"markdown","b468f1a9":"markdown"},"source":{"006e3a4f":"import numpy as np\nimport matplotlib.pyplot as plt","401c068c":"class ChessBoard():\n    def __init__(self,len=8):\n        self.white = [1,1,1]\n        self.black = [0,0,0]\n        self.blue = [0,0,1]\n        self.red = [1,0,0]\n        self.red_pieces = {}\n        self.len = len\n        self.board = np.ones((self.len,self.len,3))\n        self.render_squares()\n        \n    def render_squares(self):        \n        for col in range(self.len):\n            if col % 2 == 0:\n                white_square = True\n            else:\n                white_square = False\n                \n            for row in range(self.len):\n                if white_square == True:\n                    self.board[col,row] = self.white\n                    white_square = False\n                else:\n                    self.board[col,row] = self.black\n                    white_square = True\n                    \n    \n    def add_red(self,col,row):\n        self.board[col,row] = self.red\n        name = len(self.red_pieces)\n        self.red_pieces[name] = (col,row)\n    \n    def add_blue(self,col,row):\n        self.board[col,row] = self.blue\n    \n    def render(self):\n        plt.imshow(self.board)\n    \n    def is_under_attack(self, piece):\n        my_row = piece[1]\n        my_col = piece[0]\n#       under_attk = False\n        #checking for horizontal threats\n        for row in range(self.len):\n            if np.array_equal(self.board[my_col, row], self.blue, equal_nan=False):\n                return True\n            else:\n                pass\n        \n        #checking for vertical threats\n        for col in range(self.len):\n            if np.array_equal(self.board[col, my_row], self.blue, equal_nan=False):\n                return True\n            else:\n                pass\n        \n        #checking for diagonal threats\n        for diag in range(self.len):            \n            if np.array_equal(self.board[max(0, min(my_col-diag, 7)), max(0, min(my_row-diag, 7))], self.blue, equal_nan=False):\n                    return True\n            if np.array_equal(self.board[max(0, min(my_col+diag, 7)), max(0, min(my_row+diag, 7))], self.blue, equal_nan=False):\n                    return True\n            if np.array_equal(self.board[max(0, min(my_col-diag, 7)), max(0, min(my_row+diag, 7))], self.blue, equal_nan=False):\n                    return True\n            if np.array_equal(self.board[max(0, min(my_col+diag, 7)), max(0, min(my_row-diag, 7))], self.blue, equal_nan=False):\n                    return True\n        return False","3d405d1e":"cb = ChessBoard(8)\ncb.render()","6e9ad0e6":"cb.add_red(2,3)\ncb.render()","0795e8d7":"cb.add_blue(4,5)\ncb.render()","ddd2c327":"cb.is_under_attack(cb.red_pieces[0])","1576ce1f":"cb = ChessBoard(8)\ncb.add_red(4,3)\ncb.add_blue(4,5)\ncb.render()","78e9c691":"cb.is_under_attack(cb.red_pieces[0])","22f222c9":"cb = ChessBoard(8)\ncb.add_red(6,5)\ncb.add_blue(4,5)\ncb.render()","4e15e341":"cb.is_under_attack(cb.red_pieces[0])","f6176307":"cb = ChessBoard(8)\ncb.add_red(6,0)\ncb.add_blue(4,5)\ncb.render()","3a71ba69":"cb.is_under_attack(cb.red_pieces[0])","8c521dcc":"cb.add_red(7,5)\ncb.render()","d4ee6085":"cb.is_under_attack(cb.red_pieces[1])","ef0f8983":"cb.is_under_attack(cb.red_pieces[0])","92d8ca54":"### Well that's good, at least...","7b693b06":"### Rendered empty chessboard:","2464490e":"### O-oh, hamburgers! Move it again!: ","8ee5f1b3":"# ChessBoard Utilizing Numpy and Matplotlib\n**This is meant to demonstrate creating a chessboard with limited functionality using the Numpy and Matplotlib modules**\n\n\n## Features\n+ Renders an 8x8 black and white chess board\n    + The method `render_squares()` renders each square individually colored as black or white.\n+ Renders squares as red for player 1 or blue for player 2\n    + All pieces are considered queens at this time.\n    + The method `add_blue()` will add blue pieces to the board.\n    + The method `add_red()` may be called multiple times to add more red pieces.\n    + The method `is_under_attack()` may be called to determine if a red piece is under attack.","45fa6416":"### Is the Red piece under attack NOW???:","97f2728b":"### That second one might be in danger, huh?:","f4fbd22f":"### Oh no! We'd better move it then: ","596099aa":"### Phew! About time...\n","b3f1bbce":"\n## Process for render_squares()\n    1. I was stuck at first trying to realize why I was getting straight lines of white and black.\n    \n    2. I then realized that order of the colors of the squares needed to be alternated between rows somehow.\n    \n    3. This led me to use a modulo comparison to find the odd\/even rows.\n    \n    4. Even numbered rows begin white, odd numbered rows begin black the same as a real chessboard.\n    \n## Process for is_under_attack()\n    1. First I whiteboarded a grid using the unique y,x set-up that numpy uses.\n    \n    2. I determined that diag directions were some combination of +n\/-n on the grid.\n    \n    3. This led me to use min\/max() constraints on the coordinates being checked to prevent out of index errors if checked outside of the chessboard's limits.\n","56747ce9":"### Adding a Red piece:","06f868f9":"### Is the Red piece in danger?:\n*(Remember, Queens may attack horizontally, vertically, or diagonally as many squares away as they'd like)*","389d8d0a":"### Is the Red piece in danger now?:","737358a8":"### Adding a Blue piece:","a57282a2":"### Now to turn the tides! Let's outnumber them with MORE Queens:","a0cbcd9d":"### Just run til you can't run no more!:","ab8cf0f7":"### But the first one is still safe, right?:","b468f1a9":"### Are we STILL in danger?:"}}