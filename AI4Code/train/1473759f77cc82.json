{"cell_type":{"d677416e":"code","63fdc56b":"code","1fe8d3e5":"code","a019e58e":"code","25bdea74":"code","3d04b80b":"code","6911c1fe":"code","541719d9":"code","94b5eee5":"code","1150aefb":"code","b8755e81":"code","d08e2530":"code","fe28d65f":"code","932a8fca":"code","080152a1":"code","bf1a29d9":"code","de6a6217":"code","e8464f17":"code","3e7aca1c":"code","c5837d31":"code","820299cb":"code","ce67d215":"code","792c3787":"code","3dcf5492":"code","f645c591":"code","db945b48":"code","b70eb492":"code","99a4f056":"markdown","2e3f5bfa":"markdown","85677b75":"markdown","66dcc9f4":"markdown","d9bc0bab":"markdown","0043a26c":"markdown","4fa62eb4":"markdown","5342de7d":"markdown"},"source":{"d677416e":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","63fdc56b":"train = pd.read_csv('..\/input\/titanic\/train.csv')","1fe8d3e5":"train.corr()","a019e58e":"train.describe","25bdea74":"import matplotlib.pyplot as plt\nimport seaborn as sns\nsns.countplot(x = 'SibSp', hue = \"Survived\", data = train)\nplt.legend(loc = \"upper right\", title = \"Survived ~ Sibsp\")","3d04b80b":"import matplotlib.pyplot as plt\nimport seaborn as sns\nsns.countplot(x = 'Parch', hue = \"Survived\", data = train)\nplt.legend(loc = \"upper right\", title = \"Survived ~ Parch\")","6911c1fe":"import matplotlib.pyplot as plt\nimport seaborn as sns\nsns.countplot(x = 'Embarked', hue = \"Survived\", data = train)\nplt.legend(loc = \"upper right\", title = \"Survived ~ Embarked\")","541719d9":"sns.distplot(train[train['Survived'] == 0].Fare, kde=False,rug=False)\nsns.distplot(train[train['Survived'] == 1].Fare,  kde=False,rug=False)","94b5eee5":"train.isnull().sum()","1150aefb":"train.Age.median()","b8755e81":"train.drop(['PassengerId','Name','Cabin','Ticket'], axis=1, inplace=True)\ntrain[\"Age\"].fillna(train[\"Age\"].median(skipna=True), inplace=True)\ntrain[\"Embarked\"].fillna(train['Embarked'].value_counts().idxmax(), inplace=True)","d08e2530":"train['Alone']=np.where((train[\"SibSp\"]+train[\"Parch\"])>0, 0, 1)\ntrain.drop(['SibSp', 'Parch'], axis=1, inplace=True)","fe28d65f":"train[['Pclass','Embarked','Sex']]","932a8fca":"pd.get_dummies(train['Sex'])","080152a1":"training=pd.get_dummies(train, columns=[\"Pclass\",\"Embarked\",\"Sex\"], drop_first=True)\ntraining","bf1a29d9":"training.dtypes","de6a6217":"from sklearn.preprocessing import StandardScaler\ntrain_standard = StandardScaler()\ntrain_copied = training.copy()\ntrain_standard.fit(train_copied[['Age','Fare']])\ntrain_std = pd.DataFrame(train_standard.transform(train_copied[['Age','Fare']]))\ntrain_std","e8464f17":"training[['Age','Fare'] ] = train_std\ntraining","3e7aca1c":"from sklearn.linear_model import LogisticRegression\n\ncols = [\"Age\",\"Fare\",\"Alone\",\"Pclass_2\",\"Pclass_2\",\"Embarked_Q\",\"Embarked_S\",\"Sex_male\"] \nX =training[cols]\ny = training['Survived']\n# Build a logreg and compute the feature importances\nmodel = LogisticRegression()\n# create the RFE model and select 8 attributes\nmodel.fit(X,y)","c5837d31":"from sklearn.metrics import accuracy_score\ntrain_predicted =model.predict(X)\naccuracy_score( train_predicted, y)","820299cb":"test = pd.read_csv('..\/input\/titanic\/test.csv')\ntest.isnull().sum()","ce67d215":"test.drop(['PassengerId','Name','Cabin','Ticket'], axis=1, inplace=True)\ntest[\"Age\"].fillna(28, inplace=True)\ntest[\"Embarked\"].fillna(test['Embarked'].value_counts().idxmax(), inplace=True)\ntest[\"Fare\"].fillna(train.Fare.median(), inplace=True)\ntest['Alone']=np.where((test[\"SibSp\"]+test[\"Parch\"])>0, 0, 1)\ntest.drop(['SibSp', 'Parch'], axis=1, inplace=True)\ntesting=pd.get_dummies(test, columns=[\"Pclass\",\"Embarked\",\"Sex\"], drop_first=True)\ntesting.dtypes","792c3787":"train_standard","3dcf5492":"test_copied = testing.copy()\ntest_std = train_standard.transform(test_copied[['Age','Fare']])\ntest_std\ntesting[['Age','Fare']] = test_std\ntesting","f645c591":"X_test=testing[cols]\nX_test.dtypes\ntest_predicted = model.predict(X_test)","db945b48":"test_predicted","b70eb492":"sub = pd.read_csv('..\/input\/titanic\/gender_submission.csv')\nsub['Survived'] = list(map(int, test_predicted))\nsub.to_csv('submission.csv', index=False)","99a4f056":"## \u7279\u5fb4\u91cf\u3092\u78ba\u8a8d\u3059\u308b","2e3f5bfa":"### \u65b0\u3057\u3044\u7279\u5fb4\u306e\u8ffd\u52a0","85677b75":"## \u30c0\u30df\u30fc\u5909\u6570\u306e\u4f5c\u6210","66dcc9f4":"### \u6a19\u6e96\u5316","d9bc0bab":"## Submission\u30c7\u30fc\u30bf\u306e\u7528\u610f","0043a26c":"## \u30ed\u30b8\u30b9\u30c6\u30a3\u30c3\u30af\u30b9\u56de\u5e30","4fa62eb4":"## \u30c6\u30b9\u30c8\u30c7\u30fc\u30bf\u306e\u524d\u51e6\u7406","5342de7d":"## \u6b20\u640d\u5024\u306e\u78ba\u8a8d"}}