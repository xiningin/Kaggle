{"cell_type":{"bcdf9c29":"code","bb2a79e0":"code","00044e3b":"code","1f845140":"code","35afbe3e":"code","20788dad":"code","f150ec5b":"code","b97a4a71":"code","78fa0520":"code","d4bbfbdd":"code","3880f784":"code","ed30a654":"code","23edb614":"code","19fcd7e2":"code","1e9a4a74":"code","0779af50":"code","5ead0b43":"code","0bc53015":"code","cb15e253":"code","964887a7":"code","2c329c76":"code","2c30ee5e":"code","2b65fb68":"markdown","f2982685":"markdown","cf3411ba":"markdown","75eac1bb":"markdown","7ad155aa":"markdown","7885f32e":"markdown","b24a1fdf":"markdown","6b347bb7":"markdown","afb01e3c":"markdown","54568627":"markdown","bb3a05fe":"markdown","22841b2e":"markdown","8cbe5fd8":"markdown","a8773f1f":"markdown","7fd5960c":"markdown","35140a9d":"markdown"},"source":{"bcdf9c29":"#'''Importing Data Manipulation Modules'''\nimport numpy as np                 # Linear Algebra\nimport pandas as pd                # Data Processing, CSV file I\/O (e.g. pd.read_csv)\n\n#'''Seaborn and Matplotlib Visualization'''\nimport matplotlib                  # 2D Plotting Library\nimport matplotlib.pyplot as plt\nimport seaborn as sns              # Python Data Visualization Library based on matplotlib\nimport geopandas as gpd            # Python Geospatial Data Library\nplt.style.use('fivethirtyeight')\n%matplotlib inline\n\n#'''Plotly Visualizations'''\nimport plotly as plotly                # Interactive Graphing Library for Python\nimport plotly.express as px\nimport plotly.graph_objects as go\nfrom plotly.offline import init_notebook_mode, iplot, plot\nimport plotly.offline as py\ninit_notebook_mode(connected=True)\n\n\n#'''NLP - WordCloud'''\nfrom wordcloud import WordCloud, ImageColorGenerator, STOPWORDS\nfrom nltk.corpus import stopwords\nfrom nltk.tokenize import word_tokenize\nfrom nltk.corpus import stopwords\n\nimport os\n%pylab inline\n\nfrom PIL import Image","bb2a79e0":"df = pd.read_csv('..\/input\/us-police-shootings\/shootings.csv')\ndf.head()","00044e3b":"print('Rows     :',df.shape[0])\nprint('Columns  :',df.shape[1])\nprint('\\nFeatures :\\n     :',df.columns.tolist())\nprint('\\nMissing values    :',df.isnull().values.sum())\nprint('\\nUnique values :  \\n',df.nunique())","1f845140":"df['date'] = pd.to_datetime(df['date'])","35afbe3e":"def get_year(x):\n    return x.year","20788dad":"df['year'] = df['date'].apply(get_year)","f150ec5b":"trace = go.Histogram(x=df.year,marker=dict(color='rgb(223,145,163)',line=dict(color='black', width=2)),opacity=0.75)\nlayout = go.Layout(\n    title='Distribution of Years',\n    xaxis=dict(\n        title='Years'\n    ),\n    yaxis=dict(\n        title='Count'\n    ),\n    bargap=0.2,\n    bargroupgap=0.1, paper_bgcolor='rgb(243, 243, 243)',\n    plot_bgcolor=\"rgb(243, 243, 243)\")\nfig = go.Figure(data=[trace], layout=layout)\niplot(fig)\n","b97a4a71":"xattack = df[df['threat_level'] == 'attack']\nxother = df[df['threat_level'] == 'other']\nxundetermined = df[df['threat_level'] == 'undetermined']","78fa0520":"def get_month(x):\n    return x.month","d4bbfbdd":"df['month'] = df['date'].apply(get_month)","3880f784":"trace1 = go.Histogram(\n    x=xattack.month,\n    opacity=0.75,\n    name = \"attack\",\n    marker=dict(color='rgb(153,201,69)'))\ntrace2 = go.Histogram(\n    x=xother.month,\n    opacity=0.75,\n    name = \"other\",\n    marker=dict(color='rgb(51,133,255)'))\ntrace3 = go.Histogram(\n    x=xundetermined.month,\n    opacity=0.75,\n    name = \"undetermined\",\n    marker=dict(color='rgb(244,109,67)'))\n\n\ndata = [trace1, trace2, trace3]\nlayout = go.Layout(barmode='stack',\n                   title='Distribution of Month',\n                   xaxis=dict(title='Month'),\n                   yaxis=dict( title='Count'),\n                   paper_bgcolor='beige',\n                   plot_bgcolor='beige'\n)\nfig = go.Figure(data=data, layout=layout)\niplot(fig)\n","ed30a654":"def count_rows(rows):\n    return len(rows)\nplt.rcParams['figure.figsize'] = (12,6)\nplt.title('Month vs Year', fontsize = '20')\na = df.groupby('year month'.split()).apply(count_rows).unstack()\nsns.heatmap(a)\n","23edb614":"labels = sorted(df.manner_of_death.unique())\nvalues = df.manner_of_death.value_counts().sort_index()\ncolors = ['crimson','aqua']\ntrace = go.Pie(labels=labels, values=values, pull=[0.05, 0],textinfo='percent+label', marker = dict(colors = colors))\niplot([trace])\n","19fcd7e2":"plt.rcParams['figure.figsize'] = (18,8)\nplt.style.use('ggplot')\nplt.title('Distribution of Age', fontsize = '20', color = 'blue')\nplt.axvline(df['age'].mean(),linestyle='dashed',color='red')\nsns.distplot(df['age'])","1e9a4a74":"labels = sorted(df.gender.unique())\nvalues = df.gender.value_counts().sort_index()\ncolors = ['aqua','black']\ntrace = go.Pie(labels=labels, values=values, pull=[0.05, 0],textinfo='percent+label', marker = dict(colors = colors))\niplot([trace])","0779af50":"plt.rcParams['figure.figsize'] = (18,8)\nplt.style.use('ggplot')\nplt.title('Race vs Age', fontsize = 20, color = 'Blue')\nsns.boxenplot(x = 'race', y = 'age', data = df)","5ead0b43":"xattack = df[df['threat_level'] == 'attack']\nxother = df[df['threat_level'] == 'other']\nxundetermined = df[df['threat_level'] == 'undetermined']\n","0bc53015":"trace1 = go.Histogram(\n    x=xattack.race,\n    opacity=0.75,\n    name = \"attack\",\n    marker=dict(color='rgb(102,194,165)'))\ntrace2 = go.Histogram(\n    x=xother.race,\n    opacity=0.75,\n    name = \"other\",\n    marker=dict(color='rgb(30,110,161)'))\ntrace3 = go.Histogram(\n    x=xundetermined.race,\n    opacity=0.75,\n    name = \"undetermined\",\n    marker=dict(color='rgb(215,48,39)'))\n\ndata = [trace1, trace2, trace3]\nlayout = go.Layout(barmode='stack',\n                   title='Race vs Threat Level',\n                   xaxis=dict(title='Race'),\n                   yaxis=dict( title='Count'),\n                   paper_bgcolor='beige',\n                   plot_bgcolor='beige'\n)\nfig = go.Figure(data=data, layout=layout)\niplot(fig)","cb15e253":"plt.rcParams['figure.figsize'] = (18,8)\nplt.style.use('dark_background')\nplt.title('Top 10 Crime States', fontweight = 40, fontsize = 30, color = 'white')\nsns.countplot(y = 'state', data = df, order = df['state'].value_counts()[:10].index)","964887a7":"labels = sorted(df.flee.unique())\nvalues = df.flee.value_counts().sort_index()\ncolors = ['crimson','aqua','gold']\ntrace = go.Pie(labels=labels, values=values, pull=[0.05, 0],textinfo='percent+label', marker = dict(colors = colors))\niplot([trace])","2c329c76":"wave_mask= np.array(Image.open(\"..\/input\/usa-map\/il_1140xN.1875110874_gr8n.jpg\"))\nstopwords = set(STOPWORDS)\nstopwords.update([\"II\", \"III\"])\nplt.subplots(figsize=(15,15))\nwordcloud = WordCloud(mask=wave_mask,background_color=\"lavenderblush\",colormap=\"hsv\" ,contour_width=2, contour_color=\"black\",\n                      width=950,stopwords=stopwords,\n                          height=950\n                         ).generate(\" \".join(df.armed))\n\nplt.imshow(wordcloud ,interpolation='bilinear')\nplt.axis('off')\nplt.savefig('graph.png')\nplt.title('Wordcloud for armed forces')\nplt.show()","2c30ee5e":"trace1 = go.Scatter(\n                    x = df['city'][:100],\n                    y = df['race'],\n                    mode = \"markers\",\n                    name = \"123\",\n                    marker = dict(color = 'rgba(231,41,138,0.8)',size=8),\n                    text= df.name)\n\n\ndata = [trace1]\nlayout = dict(title = 'City - Race',\n              xaxis= dict(title= 'City',ticklen= 5,zeroline= False,zerolinewidth=1,gridcolor=\"white\"),\n              yaxis= dict(title= 'Arms Category',ticklen= 5,zeroline= False,zerolinewidth=1,gridcolor=\"white\",),\n              paper_bgcolor='rgb(243, 243, 243)',\n              plot_bgcolor='rgb(243, 243, 243)' )\nfig = dict(data = data, layout = layout)\niplot(fig)","2b65fb68":"### Observation:\n>     In the above, graph clearly shows that \u3010White people\u3011has the most cases with nearly 2500 units, and most of them were being sorted as \u3010attack\u3011.","f2982685":"### Observation:\n>     The above Bar plot, plots the different years of US police with their no. of shootings. It is quite clear that 2015 has the highest amont of shooting cases with more than 965 units out of 4895 samples, whereas due to Covid-19, 2020 obviously has the least case through recent years, but still we haven't finished 2020 yet, and it's already nearly 400 cases, which is really crazy.","cf3411ba":"# Observation:\n>     In the above, the heatmap shows relationships between \u3010month\u3011and\u3010year\u3011, we can easily infer that in Dec 2019 and Mar 2018, there were great numbers of cases comparing other dates. and Dec 2017 was the date with least cases.","75eac1bb":"# Importing necessary libraries","7ad155aa":"### Observation:\n>     In the above, graph shows the \u3010number of cases\u3011 in the data set according to different \u3010months\u3011 and sorted by different \u3010level of threat\u3011. For example, in May, we have 291 attack cases and 118 case were sorted as 'other', lastly, 9 underminded cases.","7885f32e":"# Adding \u3010year\u3011 column","b24a1fdf":"### Observation:\n>     Previously, I did a\u3010business Analyst\u3011analysis, it shows CA has the most job opportunities in the U.S, however when it comes to \u3010Crime Cases\u3011, CA also ranks no.1, which is almost two times than TX.","6b347bb7":"# Adding \u3010month\u3011 column ","afb01e3c":"### Observation:\n>     In the graph beyond, it's pretty easy to find out \u3010white people\u3011had left their footprints in pretty much every major cities, whereas \u3010Asians\u3011and \u3010Natives\u3011were relatively narrow. ","54568627":"### Observation:\n>     Not surprisingly, male has the largest portion of the whole detaset, approximately 96%.","bb3a05fe":"### Observation:\n>     By looking at the above pie chart, shows the \u3010Manner of Death\u3011analysis, we can infer that most of cases are  \u3010shot\u3011, nearly 95%. Whearas \u3010Shot and Tasered\u3011 only has 5.07%.  ","22841b2e":"# Summary of Dataset","8cbe5fd8":"# Thanks for watching & please upvote for me, cheers!","a8773f1f":"# Data Visualization","7fd5960c":"# Reading data","35140a9d":"### Observation:\n>     From the graphe above, we can easily recongnise that most 'suspects' were in the age between 25 and 35, which has the largest portion in our dataset. There's only few cases before 20 years old and after 60 years old."}}