{"cell_type":{"2e18fad2":"code","bbff151b":"code","37e39012":"code","1f31b999":"code","d240c0ea":"code","86c7d0d4":"code","d34885bc":"code","26e7263d":"code","a68a23a7":"code","385aa423":"code","290126d9":"markdown","403a10e8":"markdown","a32bee74":"markdown","0a4bf22b":"markdown","02b1c27f":"markdown","1a8eb2dd":"markdown","41dc1f21":"markdown","d1984cb5":"markdown","e2dd8fb0":"markdown","8b47780e":"markdown"},"source":{"2e18fad2":"import numpy as np\nimport matplotlib.pyplot as plt\nimport pandas as pd","bbff151b":"dataset = pd.read_csv('..\/input\/social-network-data\/Social_Network_Ads.csv')\nX = dataset.iloc[:, :-1].values\ny = dataset.iloc[:, -1].values","37e39012":"from sklearn.model_selection import train_test_split\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.25, random_state = 0)\nprint(X_train)\nprint(y_train)\nprint(X_test)\nprint(y_test)","1f31b999":"from sklearn.preprocessing import StandardScaler\nsc = StandardScaler()\nX_train = sc.fit_transform(X_train)\nX_test = sc.transform(X_test)\nprint(X_train)\nprint(X_test)","d240c0ea":"from sklearn.tree import DecisionTreeClassifier\nclassifier = DecisionTreeClassifier(criterion = 'entropy', random_state = 0)\nclassifier.fit(X_train, y_train)","86c7d0d4":"print(classifier.predict(sc.transform([[30,87000]])))","d34885bc":"y_pred = classifier.predict(X_test)\nprint(np.concatenate((y_pred.reshape(len(y_pred),1), y_test.reshape(len(y_test),1)),1))","26e7263d":"from sklearn.metrics import confusion_matrix, accuracy_score\ncm = confusion_matrix(y_test, y_pred)\nprint(cm)\naccuracy_score(y_test, y_pred)","a68a23a7":"from matplotlib.colors import ListedColormap\nX_set, y_set = sc.inverse_transform(X_train), y_train\nX1, X2 = np.meshgrid(np.arange(start = X_set[:, 0].min() - 10, stop = X_set[:, 0].max() + 10, step = 0.25),\n                     np.arange(start = X_set[:, 1].min() - 1000, stop = X_set[:, 1].max() + 1000, step = 0.25))\nplt.contourf(X1, X2, classifier.predict(sc.transform(np.array([X1.ravel(), X2.ravel()]).T)).reshape(X1.shape),\n             alpha = 0.75, cmap = ListedColormap(('red', 'green')))\nplt.xlim(X1.min(), X1.max())\nplt.ylim(X2.min(), X2.max())\nfor i, j in enumerate(np.unique(y_set)):\n    plt.scatter(X_set[y_set == j, 0], X_set[y_set == j, 1], c = ListedColormap(('red', 'green'))(i), label = j)\nplt.title('Decision Tree Classification (Training set)')\nplt.xlabel('Age')\nplt.ylabel('Estimated Salary')\nplt.legend()\nplt.show()","385aa423":"from matplotlib.colors import ListedColormap\nX_set, y_set = sc.inverse_transform(X_test), y_test\nX1, X2 = np.meshgrid(np.arange(start = X_set[:, 0].min() - 10, stop = X_set[:, 0].max() + 10, step = 0.25),\n                     np.arange(start = X_set[:, 1].min() - 1000, stop = X_set[:, 1].max() + 1000, step = 0.25))\nplt.contourf(X1, X2, classifier.predict(sc.transform(np.array([X1.ravel(), X2.ravel()]).T)).reshape(X1.shape),\n             alpha = 0.75, cmap = ListedColormap(('red', 'green')))\nplt.xlim(X1.min(), X1.max())\nplt.ylim(X2.min(), X2.max())\nfor i, j in enumerate(np.unique(y_set)):\n    plt.scatter(X_set[y_set == j, 0], X_set[y_set == j, 1], c = ListedColormap(('red', 'green'))(i), label = j)\nplt.title('Decision Tree Classification (Test set)')\nplt.xlabel('Age')\nplt.ylabel('Estimated Salary')\nplt.legend()\nplt.show()","290126d9":"# **Feature Scaling**","403a10e8":"# **Visualising the Training set results**","a32bee74":"# **Training the Decision Tree Classification model on the Training set**","0a4bf22b":"# **Importing the libraries**","02b1c27f":"# **Predicting a new result**","1a8eb2dd":"# **Splitting the dataset into the Training set and Test set**","41dc1f21":"# **Visualising the Test set results**","d1984cb5":"# **Predicting the Test set results**","e2dd8fb0":"# **Importing the dataset\ud83d\udd7a**","8b47780e":"# **Making the Confusion Matrix\ud83c\udfc7**"}}