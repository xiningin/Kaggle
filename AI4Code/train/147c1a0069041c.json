{"cell_type":{"762ec96f":"code","421c2832":"code","c7a1ed48":"code","a0062cec":"code","d759a567":"code","1efbfc60":"code","ae2fd056":"code","6bc243da":"code","d37dab18":"code","ff8f8c73":"code","3bfde5ba":"code","47fa65c0":"code","49100da9":"code","891c8c58":"code","1bddca8e":"code","16307d21":"code","f3de5feb":"code","654a6f7e":"code","6da03a8e":"code","9e82d9ef":"code","abe264ce":"code","4fcb2f06":"code","5853f751":"code","566f23c2":"code","8552bf2c":"markdown"},"source":{"762ec96f":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory\n\nimport os\nprint(os.listdir(\"..\/input\"))\n\n# Any results you write to the current directory are saved as output.","421c2832":"# \u0130mport the data \ndf=pd.read_csv('..\/input\/breastCancer.csv')","c7a1ed48":"# we can learn general information about the data.\ndf.info()\n# It shows that all features are integer while bare_nucleoli is object (string)\n# There are not null number and it has 699 rows and 11 columns. We can also see columns names.","a0062cec":"# Let's look at data quickly \ndf.head(7) ","d759a567":"# Correlation \ndf.corr()\n# This shows the correlation between the features. This is very important for data scientist\n# Because we dont want to use features which are highly correalted with each other. We need\n# to determine the correlated features and delete some of them by using techniques.","1efbfc60":"# Correlation visualisation\n# Heatmap is good method to visualize correlation between features.\nf,ax = plt.subplots(figsize=(15,15))\nsns.heatmap(df.corr(), annot=True, linewidths=0.5, fmt='.1f', ax=ax)","ae2fd056":"#Scatter plot is a useful method to see the correlation between 2 features\ndf.plot(kind='scatter', x='size_uniformity', y='shape_uniformity', alpha=.5, color='red' )\nplt.xlabel('size_uniformity')\nplt.ylabel('shape_uniformity')\nplt.title('size_uniformity --- shape_uniformity scatter plot')","6bc243da":"#Histogram is as good method to see the distribution of a data.It also get called as frequency\ndf['class'].plot(kind='hist',color='red')","d37dab18":"#valu_counts gives the numbers of the unique data in the selected feature\ndf['class'].value_counts()","ff8f8c73":"# Describe method allow us to have statistic values of the data\ndf.describe()","3bfde5ba":"# Quartile shows the improper data in the selected feature.we need to make sure that they are true\ndf.boxplot('mitoses', 'class')","47fa65c0":"# concatenating gives chance to make new dataframe by using selected features\ndata1 = df['size_uniformity']\ndata2 = df['shape_uniformity']\ndata3 = df['class']\ndf1 = pd.concat([data1, data2, data3],axis=1, ignore_index=False)\ndf1.head()","49100da9":"# missing data must be detected and handled properly such as deleting and changing with othher\n# proper data. one of useful method is to use dropna() and fillna().\ndf['bare_nucleoli'].value_counts(dropna=True) # this gives all data with NaN data.\n# we have 16 ? data which are not number","891c8c58":"# Changing the any values in the feature\n# I want to change '?' data in bare_nucleoli feature because '?' is not a number\n# I will write 29 instead of '?' numbers in bare_nucleoli feature. \ndf['bare_nucleoli'].values[df['bare_nucleoli'] == '?'] = 29\ndf['bare_nucleoli'].value_counts(dropna=True)\n","1bddca8e":"# Dropping the missing values with dropna()\ndata_drop = df.size_uniformity.dropna(inplace=False) \n","16307d21":"# Filling the missing values with anything by using fillna(). Here we will with 'empty'\ndata_drop1 = df['shape_uniformity'].fillna('empty', inplace=False) \n","f3de5feb":"# Finding values in the certain location (index) by using loc method\ndf.loc[1,['size_uniformity']] # it gives the first row of the size_uniformity feature","654a6f7e":"# Finding values in the certain location (index) by using loc method\n#This selects the first 5 rows of the features between size_uniformity and mitoses.\ndf.loc[1:5, 'size_uniformity':'mitoses']","6da03a8e":"df['shape_uniformity'].value_counts(dropna=True)","9e82d9ef":"# Filtering the data\n# choosing data if shape_uniformity is equal to 1 and size_uniformity is equal to 2\ndata3 = df[(df['shape_uniformity'] == 1) & (df['size_uniformity'] == 2)]\ndata3","abe264ce":"# Defining the new feature.\n# We can defining the new features by using the old features\ndf['new'] = df.size_uniformity + df.shape_uniformity\ndf.head()","4fcb2f06":"# Let's see the new feature\ndf.head()","5853f751":"#Stacking the features\na=df['size_uniformity']\nb=df['shape_uniformity']\nnp.vstack((a,b)) # it stacking two columns side by side\nnp.hstack((a,b)) # it stacking two columns one under the other\n","566f23c2":"# Split the data into 2 groups as features and class\nX_data = df.drop([\"id\",\"new\",\"class\"],axis=1,inplace=False)# features columns\nY_data = df[\"class\"].values # class column \nY_data","8552bf2c":"# DATA SC\u0130ENCE FOR BEG\u0130NNERS\nThis breast cancer databases was obtained from the University of Wisconsin Hospitals, Madison from Dr. William H. Wolberg.\nThis data set has 699 rows and 11 columns (features). Columns names are:\nid\nclump_thickness\nsize_uniformity\nshape_uniformity\nmarginal_adhesion\nepithelial_size\nbare_nucleoli\nbland_chromatin\nnormal_nucleoli\nmitoses\nclass\n\n"}}