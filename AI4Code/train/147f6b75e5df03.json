{"cell_type":{"ca2d697a":"code","110c6e61":"code","0aa95dad":"code","ffb5d334":"code","b26ec5e4":"code","928500c9":"code","0d5c6c9b":"code","096efd23":"code","0a6dce8a":"code","b9330fb0":"code","2409ceba":"code","6583639d":"code","ecf48d77":"code","103f1c93":"code","d8f03036":"code","e4e7498a":"code","1d39dfce":"code","48c1ccc5":"code","b2403327":"code","920adb5b":"code","ea01c768":"code","80c59c1f":"code","d3ee9895":"code","58d6819f":"code","883975d3":"code","18566243":"code","5bdd794d":"code","9cfb4441":"code","a0d6f8e9":"code","c3e886fb":"code","0d414bf9":"code","f7954743":"code","6a3d5ea3":"code","dcf70b4b":"code","18e7c301":"code","682af523":"code","cb2c7e91":"code","12a7171c":"code","8a2c8e31":"code","f6d1be30":"code","f549f649":"code","cc765771":"code","48971d31":"code","862af8f3":"code","1622aaa1":"markdown","d9602415":"markdown","fe5946b4":"markdown","98e93897":"markdown","e20bd7a0":"markdown","0df17828":"markdown","90ab105d":"markdown","e2fdf316":"markdown","298d0419":"markdown","e29d9082":"markdown"},"source":{"ca2d697a":"import numpy as np\nimport pandas as pd\npd.set_option(\"max_colwidth\", 80)\n\nimport copy","110c6e61":"def encode_symbols(data, symbols):\n    \"\"\" \\o\/ \"\"\"\n    if isinstance(data, pd.Series) and isinstance(symbols, dict):\n\n        data = data.copy()\n\n        for key, value in symbols.items():\n            data = data.str.replace(value, str(key), regex=True)    \n\n    return data\n\n\ndef decode_symbols(data, symbols):\n    \"\"\" \\o\/ \"\"\"\n    if isinstance(data, pd.Series) and isinstance(symbols, dict):\n\n        data = data.copy()\n\n        for key, value in symbols.items():\n            data = data.str.replace(str(key), value, regex=True)    \n\n    return data\n\n\ndef create_data(df, symbols=None):\n    \"\"\" \\o\/ \"\"\"\n    lines_col = \"line\"\n    lines_list = df[lines_col].unique()\n    other_cols = [col for col in df.columns if col != lines_col]\n    \n    data_dict = {}\n    for x_line in lines_list:\n        x_mask = df[lines_col] == x_line\n        x_data = df.loc[x_mask, other_cols].copy().reset_index(drop=True)\n        \n        if symbols:\n            for col in x_data.columns:\n                x_data[col] = encode_symbols(x_data[col], symbols)\n        \n        x_data['result'] = \"\"\n        data_dict[x_line] = x_data\n    \n    return data_dict\n\n\ndef extract_combs(part_line, all_combs):\n    \"\"\" \\o\/ \"\"\"\n    if not isinstance(part_line, str) or not isinstance(all_combs, pd.Series):\n        return False\n    \n    result = [comb for comb in all_combs if comb in part_line]\n    \n    return pd.Series(result)\n\n\ndef get_base_result(combinations, symbols):\n    \"\"\" \\o\/ \"\"\"\n    base_result = {}    \n    data_dict = create_data(combinations, symbols)\n    \n    for x_line in data_dict.keys():\n        x_data = data_dict.get(x_line)\n        base_result[x_line] = \"12\" + x_data['body'] + x_data['tail'].str.slice(2)\n    \n    return base_result\n\n\ndef get_splitted_combs(combinations):\n    \"\"\" \\o\/ \"\"\"\n    result = []\n    split_list = [(0, 7), (2, 15),\n                  (10, 23), (18, 31), (26, 39),\n                  (34, 47), (43, 56), (54, 62)\n    ]\n    \n    for x_combs in combinations.values:\n        x_result = []\n        \n        for split_steps in split_list:            \n            i_start, i_stop = split_steps\n            \n            x_result.append(x_combs[i_start:i_stop])\n        \n        result.append(x_result)\n        \n    splitted_combs = pd.DataFrame(result)\n    \n    return splitted_combs\n\n\ndef _print_indents(combinations):\n    \"\"\" \\o\/ \"\"\"\n    indents_list = [0, 2, 10, 18, 26, 34, 43, 54]\n    \n    if isinstance(combinations, pd.Series):\n        for i, value in combinations.items():\n            if i < len(indents_list):\n                indent_value = indents_list[i]\n            else:\n                indent_value = 0\n\n            print(\"{} {}\".format(\" \" * indent_value, value))\n\n\ndef show_splitted_combs(combinations):\n    \"\"\" \\o\/ \"\"\"\n    if isinstance(combinations, pd.Series):\n        _print_indents(combinations)\n\n    if isinstance(combinations, pd.DataFrame):\n        for i in combinations.index:\n            _print_indents(combinations.loc[i])\n\n        print()\n            ","0aa95dad":"path_to_permutations = \"..\/input\/santa-2021\/permutations.csv\"\nall_permutations = pd.read_csv(path_to_permutations)\n\npath_to_combinations = \"..\/input\/dataset-kaggle-santa-2021\/combinations.csv\"\n\ncombinations = pd.read_csv(path_to_combinations)\ncombinations.head()","ffb5d334":"symbols = {\n    0: '\ud83c\udf1f',  # wildcard\n    1: '\ud83c\udf85',  # first start combination\n    2: '\ud83e\udd36',  # second start combination\n    3: '\ud83e\udd8c',\n    4: '\ud83e\udddd',\n    5: '\ud83c\udf84',\n    6: '\ud83c\udf81',\n    7: '\ud83c\udf80',\n}","b26ec5e4":"def get_result(data_dict, col_name=None):\n    \"\"\" \\o\/ \"\"\"\n    result = {}\n    \n    if not col_name:\n        col_name = \"result\"\n    \n    for x_key, x_value in data_dict.items():\n        if isinstance(x_value, pd.DataFrame):\n            x_value = x_value.get(col_name)\n            \n        result[x_key] = x_value.sum()\n        \n    return pd.Series(result, name='schedule')","928500c9":"data_dict = create_data(combinations, symbols)\ndata_dict.keys()","0d5c6c9b":"data_dict.get(1).head()","096efd23":"for x_line in data_dict.keys():\n    x_data = data_dict.get(x_line)\n    x_data['result'] = \"12\" + x_data['body'] + x_data['tail'].str.slice(2)","0a6dce8a":"data_dict.get(1).head()","b9330fb0":"result_2440 = get_result(data_dict)\nresult_2440","2409ceba":"result_2440.str.len()","6583639d":"base_data_dict = get_base_result(combinations, symbols)\nbase_data_dict.keys()","ecf48d77":"base_data_dict.get(1).head()","103f1c93":"position_list = [(0, 1), (2, 3)]\n\nfor x_line in base_data_dict.keys():\n    for x, y in position_list:\n        cutted_value = base_data_dict.get(x_line).pop(x)\n        replaced_value = base_data_dict.get(x_line)[y]\n        \n        new_value = replaced_value[:-1] + \"0\" + cutted_value[1:]\n        base_data_dict.get(x_line)[y] = new_value","d8f03036":"base_data_dict.get(1).head()","e4e7498a":"result_2438 = get_result(base_data_dict)\nresult_2438","1d39dfce":"result_2438.str.len()","48c1ccc5":"base_data_dict = get_base_result(combinations, symbols)\nbase_data_dict.keys()","b2403327":"base_data_dict.get(1).head()","920adb5b":"data_replace = base_data_dict.get(1)\nold_value = \"1234567213456723145672341567234516723456172345612734561234657\"\n\n\"\"\"\n1234567\n  3456721345672\n          4567231456723\n                  5672341567234\n                          6723451672345\n                                  7234561723456\n                                           3456127345612 \n                                                      1234657\n\n\n2     1263457216345726134572631457263415726345172634512763451235647\n26    1257436215743625174362571436257413625743162574312657431267345\n\n\n                                   \n4567231456723\n        5672341567234\n                               *            *\n                6723451672345\n                        7234561723456\n                               1234567\n                                 3456721345672\n                                        3456127345612\n                                                   1234657\n\n\n\"\"\"\ndel_value = (26, )\nnew_value = (0, \"12574362157436251743625714362574136257431625743126574312673\" + \\\n                \"4567231456723415672345167234561023456721345602734561234657\")\n\ndata_replace[new_value[0]] = new_value[1] \n_ = data_replace.pop(del_value[0])","ea01c768":"data_replace = base_data_dict.get(2)\nold_value = \"1273456217345627134562731456273415627345162734512673451234576\"\n\n\"\"\"\n1273456\n  7345621734562\n          3456271345627\n                  4562731456273\n                          5627341562734\n                                  6273451627345\n                                           7345126734512\n                                                      1234576\n\n\n\n3456271345627\n        4562731456273\n                5627341562734  *            *\n                        6273451627345\n                               1273456\n                                 7345621734562\n                                        7345126734512\n                                                   1234576\n\n\"\"\"\ndel_value = (24, )\nnew_value = (0, \"12547362154736251473625417362547136254731625473126547312567\" + \\\n                \"3456271345627314562734156273451027345621734502673451234576\")\n\ndata_replace[new_value[0]] = new_value[1] \n_ = data_replace.pop(del_value[0])","80c59c1f":"base_data_dict.get(3).head()","d3ee9895":"data_replace = base_data_dict.get(3)\nold_value = \"1267345216734526173452671345267314526734152673412567341234567\"\n\n\"\"\"\n\n1267345\n  6734521673452\n          7345261734526\n                  3452671345267\n                          4526731452673\n                                  5267341526734\n                                           6734125673412\n                                                      1234567\n\n\n7345261734526\n        3452671345267\n                4526731452673  *            *\n                        5267341526734\n                               1267345\n                                 6734521673452\n                                        6734125673412\n                                                   1234567\n\n\"\"\"\ndel_value = (23, )\nnew_value = (0, \"12736542173654271365427316542736154273651427365124736512645\" + \\\n                \"7345261734526713452673145267341026734521673402567341234567\")\n\ndata_replace[new_value[0]] = new_value[1] \n_ = data_replace.pop(del_value[0])","58d6819f":"result_2435 = get_result(base_data_dict)\nresult_2435","883975d3":"result_2435.str.len()","18566243":"base_data_dict = get_base_result(combinations, symbols)\nbase_data_dict.keys()","5bdd794d":"data_replace = base_data_dict.get(1)\nold_value = \"1263457216345726134572631457263415726345172634512763451235647\"\n\n\"\"\"\n3457261345726\n        4572631457263          *            *\n                5726341572634\n                        7263451726345\n                               1263457\n                                 6345721634572\n                                        6345127634512\n                                                   1235647\n\n\n\"\"\"\ndel_value = (26, )\nnew_value = (2, \"1257436215743625174362571436257413625743162574312657431267\" + \\\n                \"3457261345726314572634157263451026345721634502763451235647\")\n\ndata_replace[new_value[0]] = new_value[1] \n_ = data_replace.pop(del_value[0])","9cfb4441":"data_replace = base_data_dict.get(2)\nold_value = \"1234657213465723146572341657234615723465172346512734651235746\"\n\n\"\"\"\n\n1234657\n  3465721346572\n          4657231465723\n                  6572341657234\n                          5723461572346\n                                  7234651723465\n                                           3465127346512\n                                                      1235746\n\n\n4657231465723\n        6572341657234          *            *\n                5723461572346\n                        7234651723465\n                               1234657\n                                 3465721346572\n                                        3465127346512\n                                                   1235746\n\n\"\"\"\ndel_value = (6, )\nnew_value = (3, \"1246753214675324167532461753246715324675132467512346751237\" + \\\n                \"4657231465723416572346157234651023465721346502734651235746\")\n\ndata_replace[new_value[0]] = new_value[1] \n_ = data_replace.pop(del_value[0])","a0d6f8e9":"base_data_dict.get(3).head()","c3e886fb":"data_replace = base_data_dict.get(3)\nold_value = \"1267345216734526173452671345267314526734152673412567341234567\"\n\n\"\"\"\n\n1267345\n  6734521673452\n          7345261734526\n                  3452671345267\n                          4526731452673\n                                  5267341526734\n                                           6734125673412\n                                                      1234567\n\n\n7345261734526\n        3452671345267\n                4526731452673  *            *\n                        5267341526734\n                               1267345\n                                 6734521673452\n                                        6734125673412\n                                                   1234567\n\n\"\"\"\ndel_value = (27, )\nnew_value = (0, \"1274536217453627145362741536274513627453162745312674531265\" + \\\n                \"7345261734526713452673145267341026734521673402567341234567\")\n\ndata_replace[new_value[0]] = new_value[1] \n_ = data_replace.pop(del_value[0])","0d414bf9":"result_2434 = get_result(base_data_dict)\nresult_2434","f7954743":"result_2434.str.len()","6a3d5ea3":"base_data_dict = get_base_result(combinations, symbols)\nbase_data_dict.keys()","dcf70b4b":"base_data_dict.get(1).head()","18e7c301":"# === 1 ===\ndata_replace = base_data_dict.get(1)\n\n\n# - 25 -\n#        *\n#        1236574\n# 4236571423657\n#          3657421365742\n#                  6574231657423\n#                          5742361574236   *\n#                                  7423651742365\n#                                          1236547    < 4 > 1265473\n#                                                71243657\n# \n# 4236571023657421365742316574236157423651702365471243657\n# \n# 3657124365712\n# 3657124\n#  6571243\n#   5712436\n# ** 7124365\n# Line 3\n# 9  1243657\n# 28 1243675\n\ndata_replace[25] = data_replace.pop(5) + \\\n\t            \"236571023657421365742316574236157423651702365471243657\"\n\ndata_replace[4] = data_replace[4][:-7] + \"1265473\"\n\n# === 2 ===\ndata_replace = base_data_dict.get(2)\n\n# [...]3647 + 1253467[...] = 3647125364712 (Line 3)\ndata_replace[18] = data_replace.pop(16) + \"1253674\" + data_replace.pop(17)[:-7] + data_replace.pop(18)\n\ndata_replace[1] = data_replace.pop(15) + \\\n\t            \"245671024567321456732415673245167324561702456371234567\"\n\ndata_replace[8] = data_replace[8][:-7] + \"1234756\"\n\n# === 3 ===\ndata_replace = base_data_dict.get(3)\n\n# [...]3657 + 1243675[...] = 3657124365712 (Line 1)\ndata_replace[9] = data_replace[9] + data_replace.pop(28)\n\n# [...]4567 + 1234576[...] = 4567123456712 (Line 2)\ndata_replace[0] = data_replace[0] + data_replace.pop(1)\n\ndata_replace[21] = data_replace.pop(0) + \\\n\t            \"236471023647521364752316475236147523641702364571253647\"\n\ndata_replace[4] = data_replace[4][:-7] + \"1256743\"","682af523":"result_2433 = get_result(base_data_dict)\nresult_2433","cb2c7e91":"result_2433.str.len()","12a7171c":"base_data_dict = get_base_result(combinations, symbols)\nbase_data_dict.keys()","8a2c8e31":"base_data_dict.get(1).head()","f6d1be30":"\"\"\"\n=== Line 1 ===\n- 0 -\n[...]6 < 6, 8, 13, 16, 32, 34, 36\n61273456\n    3456721345672\n            4567231456723\n                    5672341567234\n                            6723451672345  *\n                                    7234561723456\n                                           1234567\n                                                  1234657\n\n 12734567213456723145672341567234516723456102345671234657\n\n- 7 -\n[...]7 < 0, 2, 4, 11, 24\n71256347\n    6347521634752\n            3475261347526\n                    4752631475263\n                            7526341752634  *\n                                    5263471526347\n                                           1263475\n                                                  1237654\n\n 12563475216347526134752631475263417526347102634751237654\n\n=== Line 2 ===\n- 1 -\n[...]7 < 8, 16, 20, 23, 28, 30, 32, 34\n71234567\n    4567321456732\n            5673241567324\n                    6732451673245\n                            7324561732456  *\n                                    3245671324567\n                                           1245673\n                                                  1234756\n\n 12345673214567324156732451673245617324567102456731234756\n\n- 11 -\n71235467\n    5467321546732\n            4673251467325\n                    6732541673254\n                            7325461732546  *\n                                    3254671325467\n                                           1254673\n                                                  1246375\n\n 12354673215467325146732541673254617325467102546731246375\n\nLine 3 > 8 : 5347126534712\n34  [...]1265347 +\n32  1265374[...]\n\nLine 3 > 10 : 6735124673512\n12 1246735\n6  1246753\n\n=== Line 3 ===\n\n- 8 -\n[...]7 < 0, 2, 4, 8, 9, 11, 14, 16, 17, 20, 26\n71265347\n    5347621534762\n            3476251347625\n                    4762531476253\n                            7625341762534  *\n                                    6253471625347\n                                           1253476\n                                                  1243567\n\n 12653476215347625134762531476253417625347102534761243567\n\n- 10 - \n[...]5 < 1, 22, 24, 31, 36, 38\n51246735\n    6735421673542\n            7354261735426\n                    3542671354267\n                            5426731542673  *\n                                    4267351426735\n                                           1267354\n                                                  1243756\n\n 12467354216735426173542671354267315426735102673541243756\n\nLine 1 > 0 : 3456127345612\n29 [...]1273456 + \n3  1273465[...]\n\nLine 1 > 7 : 6347125634712\n20 [...]1256347 +\n30 1256374[...]\n\nLine 2 > 1 : 4567123456712\n0  [...]1234567 +\n1  1234576[...]\n\nLine 2 > 11 : 5467123546712\n2  [...]1235467 +\n11 1235476[...]\n\n\"\"\"\n\n# === 1 ===\ndata_replace = base_data_dict.get(1)\n\n_ = data_replace.pop(0)\ndata_replace[8] = data_replace[8] + \\\n                    \"12734567213456723145672341567234516723456102345671234657\"\n\n_ = data_replace.pop(7)\ndata_replace[2] = data_replace[2] + \\\n                    \"12563475216347526134752631475263417526347102634751237654\"\n\n# === 2 ===\ndata_replace = base_data_dict.get(2)\n\n_ = data_replace.pop(1)\ndata_replace[8] = data_replace[8] + \\\n                    \"12345673214567324156732451673245617324567102456731234756\"\n\n_ = data_replace.pop(11)\ndata_replace[16] = data_replace[16] + \\\n                    \"12354673215467325146732541673254617325467102546731246375\"\n\ndata_replace[34] = data_replace[34] + data_replace.pop(32)\ndata_replace[12] = data_replace[12] + data_replace.pop(6)\n\n# === 3 ===\ndata_replace = base_data_dict.get(3)\n\n_ = data_replace.pop(8)\ndata_replace[4] = data_replace[4] + \\\n                    \"12653476215347625134762531476253417625347102534761243567\"\n\n_ = data_replace.pop(10)\ndata_replace[22] = data_replace[22] + \\\n                    \"12467354216735426173542671354267315426735102673541243756\"\n\ndata_replace[29] = data_replace[29] + data_replace.pop(3)\ndata_replace[20] = data_replace[20] + data_replace.pop(30)\ndata_replace[0] = data_replace[0] + data_replace.pop(1)\ndata_replace[2] = data_replace[2] + data_replace.pop(11)","f549f649":"result_2430 = get_result(base_data_dict)\nresult_2430","cc765771":"result_2430.str.len()","48971d31":"selected_result = result_2430\nselected_result.str.len()","862af8f3":"save_submission = True\n\nif save_submission:\n    submission = selected_result.copy()\n    \n    submission = decode_symbols(submission, symbols)\n    \n    submission.to_csv('submission.csv', index=False)\n    \nprint(save_submission)","1622aaa1":"# 3. Save submission","d9602415":"## 2.2 Improved solution - 2438","fe5946b4":"# 2. Solutions","98e93897":"## 2.5 Improved solution - 2433","e20bd7a0":"## Description\nIn this notebook, I am improving the result I got earlier as a base solution 2440 in my other notebook, the data is stored in a public dataset.\n\n## Sources\n- https:\/\/www.kaggle.com\/renokan\/kaggle-santa-2021-create-solution-2440\n- https:\/\/www.kaggle.com\/renokan\/dataset-kaggle-santa-2021 \"Dataset Kaggle Santa-2021\"","0df17828":"## 2.1 Base solution 2440","90ab105d":"## 2.3 Improved solution - 2435","e2fdf316":"# 1. Import & Load & Extract","298d0419":"## 2.4 Improved solution - 2434","e29d9082":"## 2.6 Improved solution - 2430"}}