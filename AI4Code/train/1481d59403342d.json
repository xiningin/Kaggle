{"cell_type":{"481334f9":"code","75080139":"code","9242e805":"code","247e3394":"code","51f6a04c":"code","4c4d56ae":"code","e890f158":"code","cd4b3f9d":"code","07c09410":"code","3163e3f0":"markdown","da19ab59":"markdown","82a86908":"markdown","61393742":"markdown"},"source":{"481334f9":"import os\nimport numpy as np\nimport pandas as pd\nimport tensorflow as tf\nimport tensorflow.keras as keras\nfrom tensorflow.keras import layers\n# \nimport seaborn as sns\nimport matplotlib.pyplot as plt\n%matplotlib inline\n\ninput_files = []\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        input_files.append(os.path.join(dirname, filename))\n        print(os.path.join(dirname, filename))","75080139":"def load_data(file_name, rows=None):\n    df = pd.read_csv(file_name, nrows=rows)\n    X = df.iloc[:, 1:]\n    y = df.iloc[:, 0]\n    y = y.apply(y_to_vector)\n    \n    return X.to_numpy().reshape(-1, 28, 28, 1), y.to_numpy()\n\n\ndef load_comp_test_set(file_name):\n    df = pd.read_csv(file_name)\n    X = df.to_numpy()\/255\n    return X.reshape(-1, 28, 28, 1)\n\n\ndef y_to_vector(y):\n    y_vector = np.zeros(10)\n    y_vector[y] = 1\n    return pd.Series(y_vector)","9242e805":"X_train, y_train = load_data(\"\/kaggle\/input\/digit-recognizer\/train.csv\")\nX_train = X_train \/ 255\n\nX_valid, y_valid = load_data(\"\/kaggle\/input\/mnist-valid-test-data\/mnist_valid.csv\")\nX_test, y_test = load_data(\"\/kaggle\/input\/mnist-valid-test-data\/mnist_test.csv\")\ncompetion_test = load_comp_test_set(\"\/kaggle\/input\/digit-recognizer\/test.csv\")\n\nprint(X_train.shape)","247e3394":"datagen = tf.keras.preprocessing.image.ImageDataGenerator(\n    rotation_range = 15,\n    zoom_range=0.1,\n    width_shift_range=0.11,\n    height_shift_range=0.11,\n)\n\ndatagen.fit(X_train)","51f6a04c":"# Model\/data parameters\ninput_shape=(28, 28, 1)\n\nmodel = keras.Sequential([\n    layers.Input(shape=input_shape),\n    layers.Conv2D(filters=48, kernel_size=(3, 3), strides=1, activation=\"relu\",),\n    layers.Conv2D(filters=64, kernel_size=(3, 3), strides=1, activation=\"relu\",),\n    layers.MaxPooling2D(pool_size=(2, 2)),\n    layers.Conv2D(filters=96, kernel_size=(3, 3), strides=1, activation=\"relu\",),\n    layers.MaxPooling2D(pool_size=(2, 2)),\n    layers.Flatten(),\n    layers.Dropout(0.5),\n    layers.Dense(1000, use_bias=True, activation=\"relu\"),\n    layers.Dropout(0.5),\n    layers.Dense(10, use_bias=True, activation=\"softmax\")\n])\n\nmodel.summary()","4c4d56ae":"batch_size = 128\nepochs = 30\n\nmodel.compile(loss=\"categorical_crossentropy\", optimizer=\"adam\", metrics=[\"accuracy\"])\nhistory = model.fit(datagen.flow(X_train, y_train, batch_size=batch_size), epochs=epochs,\n          steps_per_epoch=X_train.shape[0]\/\/batch_size,\n          validation_data=(X_valid, y_valid), shuffle=False, validation_freq=5,\n         )","e890f158":"def plot_history(history, figsize=(10, 10)):\n    sns.set_theme(style=\"dark\")\n    fig, axes = plt.subplots(nrows=2, ncols=2, figsize=figsize)\n    sns.lineplot(data=history[\"loss\"], ax=axes[0, 1], color=\"red\")\n    axes[0, 1].set_title(\"Train Loss\")\n    sns.lineplot(data=history[\"accuracy\"], ax=axes[0, 0], color=\"blue\")\n    axes[0, 0].set_title(\"Train Accuracy\")\n    sns.lineplot(data=history[\"val_loss\"], ax=axes[1, 1], color=\"red\")\n    axes[1, 1].set_title(\"Validation Loss\")\n    sns.lineplot(data=history[\"val_accuracy\"], ax=axes[1, 0], color=\"blue\")\n    axes[1, 0].set_title(\"Validation Accuracy\")\n    plt.show()\n    \nplot_history(history.history)","cd4b3f9d":"print(model.evaluate(X_test, y_test))","07c09410":"# out\ndef export_data(file_name, data):\n    data = pd.DataFrame(test_out).apply(\n        lambda y: y.argmax(), axis=1)\n    data = pd.DataFrame(data)\n    data.set_index(pd.Series(data.index, name='ImageId')+1, inplace=True)\n    data.columns = ['Label']\n    data['Label'] = data['Label'].astype(int)\n    data.to_csv(file_name)\n\ntest_out = (model.predict(competion_test))\nexport_data(\".\/submission.csv\", test_out)","3163e3f0":"## Test data accuracy","da19ab59":"## Data preparing","82a86908":"## Model training","61393742":"## Competion prediction"}}