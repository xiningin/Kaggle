{"cell_type":{"196074ee":"code","7c080bbe":"code","28013114":"code","2cd6b6e3":"code","668ff518":"code","60507446":"code","35437756":"code","5de2320e":"code","c3e41b2f":"code","c727975b":"code","8675b21b":"code","633fb688":"code","c1b9ec37":"code","1dcc37a5":"code","5df0bb0f":"code","981f5fa5":"code","980b2205":"code","b19ff43b":"code","6094b83e":"code","b56de269":"code","9f6f04ab":"code","1f4a81d6":"code","c95b4c5f":"code","a12692dd":"code","03f7d326":"code","9aa9486c":"code","cc362c04":"markdown","8ff705c1":"markdown","9793a810":"markdown"},"source":{"196074ee":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","7c080bbe":"L3_station = (30, 53)","28013114":"path = '..\/input\/bosch-stations-one-hot-enc-train-test\/stations_one_hot_train.csv'\none_hot_stations = pd.read_csv(path)\n\nL3_one_hot = one_hot_stations.iloc[:,L3_station[0]:L3_station[1]]\n\npd.options.display.max_columns = None\npd.options.display.max_rows = None\npd.options.display.max_colwidth = None","2cd6b6e3":"# Drop rows with all 0 for each station\nL3_one_hot = L3_one_hot.loc[~(L3_one_hot==0).all(axis=1)]\n\nprint(\"Parts in L3:{}\".format(len(L3_one_hot)))","668ff518":"L3_one_hot.insert(0, \"Id\",one_hot_stations[\"Id\"])","60507446":"L3_one_hot.head()","35437756":"from sklearn.cluster import KMeans\nfrom sklearn.decomposition import PCA\nfrom matplotlib import pyplot as plt\nfrom sklearn.cluster import DBSCAN","5de2320e":"column_names = L3_one_hot.columns[1:]","c3e41b2f":"L3_one_hot = L3_one_hot.sample(len(L3_one_hot))","c727975b":"dbscan = DBSCAN()\nnumber_of_splits = 20","8675b21b":"from random import randint\ncluster_number_list = []\n\nfor i in range(5):\n    split_number = randint(1, number_of_splits)\n    preds_split = dbscan.fit_predict(L3_one_hot[int((split_number-1)*len(L3_one_hot)\/number_of_splits):int(split_number*len(L3_one_hot)\/number_of_splits)][column_names])\n    cluster_number_list.append(len(np.unique(preds_split)))","633fb688":"max_cluster_for_l3 = int(np.max(cluster_number_list))\nprint(\"MAX NUMBER OF CLUSTERS: {}\\n\".format(max_cluster_for_l3))\nprint(cluster_number_list)","c1b9ec37":"L3_one_hot.sort_values(by=['Id'], inplace=True)","1dcc37a5":"n_clusters = max_cluster_for_l3\nkmeans = KMeans(n_clusters=n_clusters)\npred = kmeans.fit_predict(L3_one_hot[column_names])\n\npred += 1\nprint(kmeans.inertia_)","5df0bb0f":"L3_one_hot.insert(1, \"ClusterL3\", pred)\nL3_one_hot.sample(10)","981f5fa5":"ids_clusters = pd.DataFrame({\"Id\": one_hot_stations['Id'], \"ClusterL3\": 0})\nids_clusters.loc[L3_one_hot.index, ['ClusterL3']] = L3_one_hot['ClusterL3']\nids_clusters.to_csv(\"Cluster_L3_train.csv\", index=False)","980b2205":"L3_one_hot[L3_one_hot[\"ClusterL3\"] == randint(1, n_clusters)].head()","b19ff43b":"L3_one_hot[L3_one_hot[\"ClusterL3\"] == randint(1, n_clusters)].head()","6094b83e":"L3_one_hot[L3_one_hot[\"ClusterL3\"] == randint(1, n_clusters)].head()","b56de269":"L3_one_hot[L3_one_hot[\"ClusterL3\"] == randint(1, n_clusters)].head()","9f6f04ab":"path_test = '..\/input\/bosch-stations-one-hot-enc-train-test\/stations_one_hot_test.csv'\none_hot_stations_test = pd.read_csv(path_test)\n\nL3_one_hot_test = one_hot_stations_test.iloc[:,L3_station[0]:L3_station[1]]\n\n# Drop rows with all 0 for each station\nL3_one_hot_test = L3_one_hot_test.loc[~(L3_one_hot_test==0).all(axis=1)]\n\nprint(\"Parts in L3_test:{}\".format(len(L3_one_hot_test)))\n\nL3_one_hot_test.insert(0, \"Id\",one_hot_stations_test[\"Id\"])","1f4a81d6":"pred_test = kmeans.predict(L3_one_hot_test[column_names])\npred_test += 1\n\nL3_one_hot_test.insert(1, \"ClusterL3\", pred_test)\n\nids_clusters_test = pd.DataFrame({\"Id\": one_hot_stations_test['Id'], \"ClusterL3\": 0})\nids_clusters_test.loc[L3_one_hot_test.index, ['ClusterL3']] = L3_one_hot_test['ClusterL3']\nids_clusters_test.to_csv(\"Cluster_L3_test.csv\", index=False)","c95b4c5f":"L3_one_hot_test[L3_one_hot_test[\"ClusterL3\"] == 1].head(10)","a12692dd":"L3_one_hot[L3_one_hot[\"ClusterL3\"] == 1].head(10)","03f7d326":"L3_one_hot_test[L3_one_hot_test[\"ClusterL3\"] == n_clusters].head(10)","9aa9486c":"L3_one_hot[L3_one_hot[\"ClusterL3\"] == n_clusters].head(10)","cc362c04":"# DBSCAN for L3","8ff705c1":"# KMEANS for L3","9793a810":"# KMEANS ON TEST DATA"}}