{"cell_type":{"89e197a5":"code","cbc47862":"code","fd14ff36":"code","925737a1":"code","38f70bb9":"code","e27c942f":"code","10d97ff0":"code","020f81b4":"code","115c6f34":"code","27d9e465":"code","68536219":"code","7e875082":"code","7cf2d267":"code","a51e0900":"code","2ba50e79":"code","31267a09":"code","21d5fcc4":"code","f46c7951":"code","b772d11d":"code","a951b201":"code","e951dffd":"code","41d49838":"code","0d636f6f":"code","f28939b9":"code","b5119d04":"code","635e8e2e":"code","da9a07fb":"code","510c2457":"code","2d0810a5":"code","f292d085":"code","09ef3d07":"code","0d11cc13":"code","394fbc9c":"markdown","20dd0ca7":"markdown","8665759f":"markdown","3e6672e2":"markdown","25e57f8a":"markdown","25f5f48b":"markdown","21e46309":"markdown","823a12d4":"markdown"},"source":{"89e197a5":"import numpy as np # linear algebra\nfrom numpy import random\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport plotly.graph_objs as go \nfrom plotly.subplots import make_subplots\nfrom plotly.offline import init_notebook_mode, iplot, plot\ninit_notebook_mode(connected=True) \n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))","cbc47862":"data1 = pd.read_csv(\"\/kaggle\/input\/heart-disease-uci\/heart.csv\")\ndata1.head()","fd14ff36":"data2 = pd.read_csv(\"\/kaggle\/input\/videogamesales\/vgsales.csv\")\ndata2.head()","925737a1":"data3 = pd.read_csv(\"\/kaggle\/input\/novel-corona-virus-2019-dataset\/covid_19_data.csv\")\ndata3.head()","38f70bb9":"data_last = data3.tail(1)\ndata_last_day = data3[data3[\"ObservationDate\"] == data_last[\"ObservationDate\"].iloc[0]] \ncountry_list = list(data_last_day[\"Country\/Region\"].unique())\nconfirmed = []\ndeaths = []\nrecovered = []\nfor i in country_list:\n    x = data_last_day[data_last_day[\"Country\/Region\"] == i]\n    confirmed.append(sum(x[\"Confirmed\"]))\n    deaths.append(sum(x[\"Deaths\"]))\n    recovered.append(sum(x[\"Recovered\"]))\ndata3_country = pd.DataFrame(list(zip(country_list,confirmed,deaths,recovered)),columns = [\"Country\",\"Confirmed\",\"Deaths\",\"Recovered\"])\ndata3_country.head()","e27c942f":"date_list1 = list(data3[\"ObservationDate\"].unique())\nconfirmed = []\ndeaths = []\nrecovered = []\nfor i in date_list1:\n    x = data3[data3[\"ObservationDate\"] == i]\n    confirmed.append(sum(x[\"Confirmed\"]))\n    deaths.append(sum(x[\"Deaths\"]))\n    recovered.append(sum(x[\"Recovered\"]))\ndata3 = pd.DataFrame(list(zip(date_list1,confirmed,deaths,recovered)),columns = [\"Date\",\"Confirmed\",\"Deaths\",\"Recovered\"])\ndata3.head()","10d97ff0":"from datetime import date, timedelta, datetime\ndata3[\"Date\"] = pd.to_datetime(data3[\"Date\"])\ndata3.info()","020f81b4":"fig = go.Figure(go.Scatter(x = data3[\"Date\"],\n                          y = data3[\"Confirmed\"],\n                          mode = \"lines\"),\n               layout = go.Layout(title = \"standard lineplot\",\n                                 xaxis_title = \"xlabel\",\n                                 yaxis_title = \"ylabel\"))\niplot(fig)","115c6f34":"fig = go.Figure(go.Scatter(x = data1[\"age\"],\n                          y = data1[\"oldpeak\"],\n                          mode = \"markers\"),\n               layout = go.Layout(title = \"standard scatterplot\"))\niplot(fig)","27d9e465":"fig = go.Figure(go.Bar(x = data3.head(10)[\"Date\"],\n                          y = data3.head(10)[\"Confirmed\"]),\n               layout = go.Layout(title = \"standard barplot\"))\niplot(fig)","68536219":"fig = go.Figure(go.Histogram(x = data1[\"age\"]),\n               layout = go.Layout(title = \"standard histogram\"))\niplot(fig)","7e875082":"labels = [\"Confirmed\",\"Deaths\",\"Recovered\"]\nvalues = [data3.tail(1)[\"Confirmed\"].iloc[0],data3.tail(1)[\"Deaths\"].iloc[0],data3.tail(1)[\"Recovered\"].iloc[0]]\n\nfig = go.Figure(go.Pie(values = values, \n                       labels = labels,\n                       insidetextorientation='radial'),\n               layout = go.Layout(title = \"standard piechart\"))\niplot(fig)","7cf2d267":"fig = go.Figure(go.Box(x = data1[\"age\"]),\n               layout = go.Layout(title = \"standard boxplot\"))\niplot(fig)","a51e0900":"fig = go.Figure(data=go.Violin(y=data1['age'],\n                               meanline_visible=True, opacity=0.6,\n                               ))\n\nfig.update_layout(title = \"standard violinplot\")\nfig.show()","2ba50e79":"x = [\"A\",\"B\",\"C\",\"D\",\"E\",\"F\"]\ny = [10,20,11,22,14,18]\n\nfig = go.Figure(data=\n    go.Scatterpolar(\n        r = y,\n        theta = x,\n        mode = 'lines',\n    ))\n\nfig.update_layout(showlegend=False,title = \"linepolar\")\nfig.show()","31267a09":"x = [\"A\",\"B\",\"C\",\"D\",\"E\",\"F\"]\ny = [10,20,11,22,14,18]\n\nfig = go.Figure(data=\n    go.Scatterpolar(\n        r = y,\n        theta = x,\n        mode = 'markers',\n    ))\n\nfig.update_layout(showlegend=False,title = \"scatterpolar\")\nfig.show()","21d5fcc4":"x = [\"A\",\"B\",\"C\",\"D\",\"E\",\"F\"]\ny = [10,20,11,22,14,18]\n\nfig = go.Figure(data=\n    go.Barpolar(\n        r = y,\n        theta = x,\n    ))\n\nfig.update_layout(showlegend=False,title = \"barpolar\")\nfig.show()","f46c7951":"fig = go.Figure(go.Scatter3d(\n                              x = [1,5,7,9],\n                              y = [1000,2580,5673,8979],\n                              z = [10,23,26,38],\n                              mode = \"lines\",\n                              name = \"standard 3D lineplot\",\n                              ),layout = go.Layout(title_text = \"standard 3D lineplot\",\n                                                    ))\niplot(fig)","b772d11d":"trace1 = go.Scatter(\n    x=data3[\"Date\"],\n    y=data3[\"Confirmed\"],\n    name = \"Confirmed\"\n)\n# second line plot\ntrace2 = go.Scatter(\n    x=data3[\"Date\"],\n    y=data3[\"Deaths\"],\n    xaxis='x2',\n    yaxis='y2',\n    name = \"Deaths\"\n)\ndata = [trace1, trace2]\nlayout = go.Layout(\n    xaxis2=dict(\n        domain=[0.06, 0.5],\n        anchor='y2',        \n    ),\n    yaxis2=dict(\n        domain=[0.6, 0.95],\n        anchor='x2',\n    ),\n    title = '2 plots together',\n)\n\nfig = go.Figure(data=data, layout=layout)\niplot(fig)","a951b201":"fig = go.Figure()\n\nfig.add_trace(go.Scatter(\n    x=[0, 1, 2, 3, 4, 5, 6, 7, 8],\n    y=[0, 1, 3, 2, 4, 3, 4, 6, 5]\n))\n\nfig.update_layout(\n    showlegend=False,\n    annotations=[\n        dict(\n            x=2,\n            y=5,\n            xref=\"x\",\n            yref=\"y\",\n            text=\"this is a ariel Text\",\n            showarrow=False,\n            font = dict(size = 30, \n                        family = \"ariel\",\n                       color = \"LightSeaGreen\")\n        )\n    ]\n)\n\nfig.show()","e951dffd":"fig = go.Figure()\n\nfig.add_trace(go.Scatter(\n    x=[0, 1, 2, 3, 4, 5, 6, 7, 8],\n    y=[0, 4, 5, 1, 2, 2, 3, 4, 2]\n))\n\nfig.add_annotation(\n            x=2,\n            y=5,\n            text=\"dict Text\",\n            font = dict(size = 20))\nfig.add_annotation(\n            x=4,\n            y=4,\n            text=\"dict Text 2\")\nfig.update_annotations(dict(\n            xref=\"x\",\n            yref=\"y\",\n            showarrow=True,\n            arrowhead=7,\n            ax=0,\n            ay=-40\n))\n\nfig.update_layout(showlegend=False)\n\nfig.show()","41d49838":"fig = go.Figure(go.Scatter(x = data3[\"Date\"],\n                          y = data3[\"Confirmed\"],\n                           name = \"confirmed\",\n                          mode = \"lines+markers\",\n                marker = dict(color = 'rgba(102, 204, 255, 0.5)')),\n               layout = go.Layout(title = \"styled lineplot\",\n                                 xaxis_title = \"Dates\",\n                                 yaxis_title = \"Confirmed(log scale)\",\n                                 yaxis_type=\"log\",\n                                 template = \"plotly_white\",\n                                 hovermode = \"x unified\"))\n\niplot(fig)","0d636f6f":"fig = go.Figure(go.Scatter(x = data1[\"age\"],\n                          y = data1[\"oldpeak\"],\n                          mode = \"markers\",\n                              marker=dict(\n                                size=data1[\"age\"]\/3,\n                                color=data1[\"oldpeak\"],\n                                colorbar=dict(\n                                    title=\"oldpeak\"\n                                ),\n                                colorscale=\"BrBG\"\n                            ),),\n               layout = go.Layout(title = \"styled scatterplot\",\n                                 template = \"plotly_white\",\n                                 xaxis_title = \"age\",\n                                 yaxis_title = \"oldpeak\"))\niplot(fig)","f28939b9":"fig = go.Figure(go.Bar(x = data3_country.sort_values(by = [\"Confirmed\"]).tail(10)[\"Country\"],\n                          y = data3_country.sort_values(by = [\"Confirmed\"]).tail(10)[\"Confirmed\"],\n                       text = data3_country.sort_values(by = [\"Confirmed\"]).tail(10)[\"Confirmed\"],\n                              textposition = \"outside\",\n                marker=dict(\n                                color=data3_country.sort_values(by = [\"Confirmed\"]).tail(10)[\"Confirmed\"],\n                    line = dict(color = \"rgb(0,0,0)\", width = 2),\n                                colorbar=dict(\n                                    title=\"Colorbar\"\n                                ),\n                                colorscale=\"Viridis\"\n                            ),),\n               layout = go.Layout(title = \"styled barplot\",\n                                 template = \"simple_white\",\n                                 xaxis_title = \"country\",\n                                 yaxis_title = \"confirmed\"))\niplot(fig)","b5119d04":"labels = [\"Confirmed\",\"Deaths\",\"Recovered\"]\nvalues = [data3.tail(1)[\"Confirmed\"].iloc[0],data3.tail(1)[\"Deaths\"].iloc[0],data3.tail(1)[\"Recovered\"].iloc[0]]\ncolors = [\"#0099ff\",\"#ff1a1a\",\"#33cc33\"]\n\nfig = go.Figure(go.Pie(values = values, \n                       labels = labels,\n                       insidetextorientation='radial',\n                       hole = .5,\n                       pull=[0.05, 0.2, 0.05]),\n                layout = go.Layout(title = \"styled piechart\",\n                                annotations=[dict(text='Piechart', x=0.5, y=0.5, \n                                                  font_size=20, \n                                                  showarrow=False)]\n))\n\nfig.update_traces(hoverinfo='label+percent', textinfo='value', textfont_size=18,\n                  marker=dict(colors = colors, line=dict(color='#000000', width=2)))\n\n\niplot(fig)","635e8e2e":"fig = go.Figure(go.Box(y = data1[\"age\"],\n                      boxpoints='all',\n                      boxmean = \"sd\",\n                      marker_color='darkblue',\n                      name = \"age\",\n                       notched=True),\n               layout = go.Layout(title = \"styled boxplot\",\n                                 template = \"plotly_white\"))\niplot(fig)","da9a07fb":"fig = go.Figure(data=go.Violin(y=data1['age'], box_visible=True, line_color='black',\n                               meanline_visible=True, fillcolor='lightseagreen', opacity=0.6,\n                              x0='age',\n                              points='all'))\n\nfig.update_layout(title = \"styled violinplot\",\n                 template = \"plotly_white\")\nfig.show()","510c2457":"import plotly.graph_objects as go\nfrom plotly.colors import n_colors\n\n# 12 sets of normal distributed random data, with increasing mean and standard deviation\ndata = (np.linspace(1, 2, 12)[:, np.newaxis] * np.random.randn(12, 200) +\n            (np.arange(12) + 2 * np.random.random(12))[:, np.newaxis])\n\ncolors = n_colors('rgb(5, 200, 200)', 'rgb(200, 10, 10)', 12, colortype='rgb')\n\nfig = go.Figure()\nfor data_line, color in zip(data, colors):\n    fig.add_trace(go.Violin(x=data_line, line_color=color))\n\nfig.update_traces(orientation='h', side='positive', width=3, points=False)\nfig.update_layout(template = \"plotly_white\", xaxis_zeroline=False)\nfig.show()","2d0810a5":"fig = go.Figure(go.Scatter3d(\n                              x = data3[\"Confirmed\"],\n                              y = data3[\"Deaths\"],\n                              z = data3[\"Recovered\"],\n                              mode = \"lines\",\n                              name = \"states and confirmed\",\n                              line = dict(width = 7),\n                              marker = dict(\n                                   size = 4,\n                                   color = \"rgb(255,100,100)\"\n                              )),layout = go.Layout(title = \"styled 3D lineplot\",\n                                                    template = \"plotly_white\",\n                                                    scene = dict(\n                                                    xaxis =dict(\n                                                        title = \"Confirmed\"),\n                                                    yaxis =dict(\n                                                        title =\"Deaths\"),\n                                                    zaxis =dict(\n                                                        title = \"Recovered\"),)))\niplot(fig)","f292d085":"fig = make_subplots(rows=2,cols=1,\n                    subplot_titles = (\"recovered percentage last 10 days\",\n                                      \"Recovered Covid-19 last 10 days\"))\n\ndata3_last10 = data3.tail(10)\n\nrecovered_percent = ((data3_last10[\"Recovered\"]*100)\/data3_last10[\"Confirmed\"])\n\nfig.append_trace(go.Scatter(x=data3_last10[\"Date\"],\n                                  y = recovered_percent,\n                                  mode = \"lines\",\n                                  name = \"Reocvered percentage\",\n                                  marker = dict(color = 'rgba(1,108,89, 0.8)')),row = 1, col = 1)\n\nfig.append_trace(go.Bar(x=data3_last10[\"Date\"],\n                                  y = data3_last10[\"Recovered\"],\n                                  name = \"Recovered\",\n                                  marker = dict(color = 'rgba(1,108,89, 0.8)')),row = 2, col = 1)\n\nfig.update_layout(height = 700,\n                  title = \"subplots\",\n                  template=\"plotly_white\",\n                  hovermode='x unified')\n\nfig.update_xaxes(title_text=\"Dates\", row=1, col=1)\nfig.update_xaxes(title_text=\"Dates\", row=2, col=1)\n\nfig.update_yaxes(title_text=\"Percentage(%)\", row=1, col=1)\nfig.update_yaxes(title_text=\"Percentage(%)\", row=2, col=1)\n\niplot(fig)","09ef3d07":"fig = make_subplots(\n    rows=2, cols=2,\n    specs=[[{\"colspan\": 2}, None],\n           [{},{}]],\n    subplot_titles=(\"focused Subplot\",\"other Subplot\", \"other Subplot\"))\n\nfig.add_trace(go.Scatter(x=[1, 2], y=[1, 2]),\n                 row=1, col=1)\n\nfig.add_trace(go.Scatter(x=[1, 2], y=[1, 2]),\n                 row=2, col=1)\nfig.add_trace(go.Scatter(x=[1, 2, 3], y=[2, 1, 2]),\n                 row=2, col=2)\n\nfig.update_layout(title_text=\"subplots, one focused plot\",\n                 template = \"simple_white\")\nfig.show()","0d11cc13":"for template in [\"plotly\", \"plotly_white\", \"plotly_dark\", \"ggplot2\", \"seaborn\", \"simple_white\", \"none\"]:\n    x = random.randint(100, size=(15))\n    y = random.randint(100, size=(15))\n    fig = go.Figure(go.Scatter(x=x, \n                               y=y,\n                               marker = dict(size = 15,\n                                            color = y),\n                            mode = \"markers\"),\n                     layout = go.Layout(template=template, \n                                        title=template + \" theme\"))\n    fig.show()","394fbc9c":"<a id=\"4\"><\/a> <br>\n# Styled Plots","20dd0ca7":"<a id=\"7\"><\/a> <br>\n# Conclusion\n\n* **If there is something wrong with this kernel please let me know in the comments.**\n\n### My other kernels: https:\/\/www.kaggle.com\/mrhippo\/notebooks\n\n* **References:**\n* https:\/\/plotly.com\/python\/\n* https:\/\/www.w3schools.com\/colors\/colors_picker.asp","8665759f":"<a id=\"5\"><\/a> <br>\n# Subplots","3e6672e2":"# Introduction\n\n* This kernel is notes that I took for Plotly. This is not a tutorial you can think that kernel as a cheatsheet for Plotly. While coding a kernel open this in a new tab and copy paste.\n<img src = \"https:\/\/images.prismic.io\/plotly-marketing-website\/d076c072-a8d5-4316-9d87-be7d7109cf43_social+media+logo-01.png?auto=compress,format\" height = 422 width = 750 >\n\n### This kernel is a part of a big series:\n\n* [Data Science Notes1: Matplotlib](https:\/\/www.kaggle.com\/mrhippo\/data-science-notes1-matplotlib)\n* [Data Science Notes2: Seaborn](https:\/\/www.kaggle.com\/mrhippo\/data-science-notes2-seaborn?scriptVersionId=38663603)\n* Data Science Notes3: Plotly \n* [Data Science Notes4: Machine Learning (ML)](https:\/\/www.kaggle.com\/mrhippo\/data-science-notes4-machine-learning?scriptVersionId=39376804)\n* [Data Science Notes5: Deep Learning: ANN](https:\/\/www.kaggle.com\/mrhippo\/data-science-notes5-deep-learning-ann)\n* [Data Science Notes6: Deep Learning: CNN](https:\/\/www.kaggle.com\/mrhippo\/data-science-notes6-deep-learning-cnn) \n* [Data Science Notes7: Deep Learning: RNN and LSTM](https:\/\/www.kaggle.com\/mrhippo\/data-science-notes7-deep-learning-rnn-and-lstm)\n\n### This kernel will be updated\n\n## Content\n\n* [Imports and Datasets](#1)\n* [Normal Plots](#2)\n* [Annotations](#3)\n* [Styled Plots](#4)\n* [Subplots](#5)\n* [Templates](#6)\n* [Conclusion](#7)","25e57f8a":"<a id=\"6\"><\/a> <br>\n# Templates","25f5f48b":"<a id=\"1\"><\/a> <br>\n# Imports and Datasets","21e46309":"<a id=\"3\"><\/a> <br>\n# Annotations","823a12d4":"<a id=\"2\"><\/a> <br>\n# Normal Plots"}}