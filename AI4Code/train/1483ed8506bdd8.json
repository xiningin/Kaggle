{"cell_type":{"412ae0d8":"code","5c37f8f2":"code","daa6dace":"code","7e5ba3d3":"code","ae009688":"code","b0d52f36":"code","c30bf44d":"code","caa15b3f":"code","e04aac93":"code","542c1acf":"code","28bf4847":"code","57bd4748":"code","01c93000":"code","8f1468c3":"code","967aa667":"code","b33128c3":"code","4af7f44e":"code","944c8718":"code","63b9f345":"code","e70d2baf":"code","707d1aac":"code","d8390358":"code","8a7c1970":"code","8f55c4c4":"code","c48d4d2e":"code","923eb9a6":"code","e3aa4aea":"code","e2b8f834":"code","61b79e57":"code","7ee5c05a":"code","f64ea9a9":"code","59926b40":"code","7b115601":"code","52ef8a7f":"code","ee83349b":"code","25c731f6":"code","131b1cd3":"code","83a313db":"code","660f69bf":"code","2f65c368":"code","567bbc0b":"code","9017b4f4":"code","4142c8ec":"code","a7186005":"code","9fd7d398":"code","275b2b43":"code","dcfbc08c":"code","a18df858":"code","1ec38dc5":"code","2ef0a1bc":"code","184796a5":"code","cd533d73":"code","e43ed259":"code","64cc4c33":"code","b1ac74aa":"code","d571814e":"code","7e71cf98":"code","cb25e736":"code","e2d5b57f":"code","30196dcb":"code","c8e13d17":"code","6d15555a":"code","8ee5083e":"code","2a42265e":"code","8cd6f607":"code","992681dc":"code","4d155c62":"code","8669461b":"code","7c57e495":"code","b83beef7":"code","ecf59afb":"code","6c48eae3":"code","93f32dde":"code","71fb71ca":"code","b8add05c":"code","03b167e3":"code","6f82c9ae":"code","1739043d":"code","5354366f":"code","b7624621":"code","18a7c726":"code","cebaed02":"code","225a701d":"code","a0d4ffde":"code","af600d0d":"code","1d74a97d":"code","8eab2076":"code","88d60435":"code","ddf8f508":"code","ddbaeb61":"code","dff98b87":"code","e056ae5a":"code","de26f243":"code","04ebefdf":"code","ac839b47":"code","9b6b477a":"code","c045cd8e":"code","315dabad":"code","a4df2e2b":"code","298269ac":"code","4ba7d6a7":"code","213a4311":"code","e51bd36d":"code","7bfac22e":"code","d2e6e282":"code","14d38e6c":"code","ddf95df2":"code","64b2bd5d":"code","d2051d79":"code","cc2986bd":"code","0ddc41fc":"code","83f72a13":"code","112a5b72":"code","97c4c957":"code","2d334344":"code","c16a9024":"code","eb6ba6e9":"code","50f69667":"code","ecf3664f":"code","c118f7a3":"code","d4981527":"code","391d8ffa":"code","928fe97b":"code","bac75276":"code","608ec88c":"code","238000ab":"code","286c214d":"code","1c45520e":"code","143af3c2":"code","2e48c22d":"code","bd3bae59":"code","9d6de9a5":"code","9f6945bf":"code","13ae5d09":"code","e7a6dc80":"code","fb829bd0":"code","c7757979":"code","0a46abfb":"code","651769e0":"code","349bceac":"code","4e8ada4d":"code","0aa76f55":"code","4cf081bb":"code","dd9f50a5":"code","a55fa4b6":"code","665dbcd2":"code","9e1a6494":"code","c553e4f8":"code","5e397d25":"code","745c40fd":"code","cff290fc":"code","f630ef75":"code","257c071e":"code","f7924890":"code","223b382f":"code","0bde19e8":"code","2429c8a0":"code","b9fc10ee":"code","031c59a7":"code","4b3d47b6":"code","32e266de":"code","ac6a79a4":"code","5255194c":"code","1004eff0":"code","18bcf23c":"code","87b7149f":"code","51e4f597":"code","077e7014":"code","cf15fb7f":"code","9f34e294":"code","4fca922d":"code","c81a27bb":"code","a44a4ec7":"code","645ffb28":"markdown","d739b2fc":"markdown","df6b4ddd":"markdown","26f636bc":"markdown","038b824d":"markdown","4c377595":"markdown","22139827":"markdown","b81f6ac3":"markdown","5eea8578":"markdown","7be2c78b":"markdown","a44e762b":"markdown","577610c4":"markdown","cf820320":"markdown","c5f78f85":"markdown","b9f78942":"markdown","fc4d326f":"markdown","25e0b93d":"markdown","c9ddc565":"markdown","bb851cd9":"markdown","6fbe4852":"markdown","21dfbbc4":"markdown","0cff8a68":"markdown","ef96e3f3":"markdown","aa97eb20":"markdown","73806ff3":"markdown","43612120":"markdown","d3964ff7":"markdown","c7d150e7":"markdown","03554d93":"markdown","c6ffd2a2":"markdown","0b3be58c":"markdown","163ed89c":"markdown","8d7ef5ae":"markdown","5f699d0a":"markdown","5259dc36":"markdown","fe600574":"markdown","07e38d13":"markdown","f06d3f6d":"markdown","b6a4b4e2":"markdown","b850f64b":"markdown","4943143f":"markdown","31f8a8e2":"markdown","4c171c7f":"markdown","4101f2a1":"markdown","4ed3ddd0":"markdown","752d21f1":"markdown","8a0f8777":"markdown","3c1e1286":"markdown","a47683f7":"markdown","c81d3f13":"markdown","ab7d2467":"markdown","207ab27b":"markdown","eb695b63":"markdown","7de5a993":"markdown","1a93e99b":"markdown","c2e12bc0":"markdown","6e770a82":"markdown","53248fce":"markdown","4423a40d":"markdown","04cd42cb":"markdown","50a372bf":"markdown","3d43a758":"markdown","3f836eee":"markdown","c7c7a399":"markdown","5f1f6cd9":"markdown","edb4b088":"markdown","15c8f07d":"markdown","75038c66":"markdown","c5a21c3d":"markdown","6da86418":"markdown","c9fb9df1":"markdown","57ee1207":"markdown","5d5d0f49":"markdown","ec447238":"markdown","85799b5a":"markdown","b352bfca":"markdown","1f6027d1":"markdown","9a1febc2":"markdown","dbd4b9e9":"markdown","7c5aebb8":"markdown","9e08a650":"markdown","6a2cad4e":"markdown","4aee3b7c":"markdown","d1ace2ad":"markdown","e8e3efdd":"markdown","8abfb462":"markdown","7755b7c8":"markdown"},"source":{"412ae0d8":"import numpy as np\nimport pandas as pd\nimport matplotlib as mpl\nimport matplotlib.pyplot as plt\nimport matplotlib.patches as mpatches\nimport matplotlib.gridspec as gridspec \n\nfrom matplotlib.offsetbox import AnchoredText\nfrom mpl_toolkits.axes_grid1 import make_axes_locatable\nimport wordcloud\nfrom wordcloud import WordCloud,STOPWORDS\nimport seaborn as sns\nfrom wordcloud import WordCloud, STOPWORDS, ImageColorGenerator\n\nimport warnings\nwarnings.filterwarnings(action='ignore')\nplt.rcParams['figure.dpi'] = 200 #high resolution","5c37f8f2":"kaggler = pd.read_csv('\/kaggle\/input\/kaggle-survey-2020\/kaggle_survey_2020_responses.csv')\nquestions = kaggler.iloc[0, :].T\nkaggle = kaggler.iloc[1:, :]","daa6dace":"kaggler","7e5ba3d3":"# showing the frequency of each category separated by label\nplt.figure(figsize=[15,17])\nfft=['Q1','Q2','Q3','Q4','Q5','Q6']\nn=1\nfor f in fft:\n    plt.subplot(4,2,n)\n    sns.countplot(x=f, hue='Q1', edgecolor=\"black\", alpha=0.7, data=kaggler)\n    sns.despine()\n    plt.title(\"Countplot of {}  by Q1\".format(f))\n    n=n+1\nplt.tight_layout()\nplt.show()\n\n\n    \nplt.figure(figsize=[15,4])\nsns.countplot(x='Q1', hue='Q3',edgecolor=\"black\", alpha=0.7, data=kaggler)\nsns.despine()\nplt.title(\"Countplot of Q1 by Q3\")\nplt.show()","ae009688":"# showing the frequency of each category separated by label\nplt.figure(figsize=[15,17])\nfft=['Q7_Part_1','Q7_Part_2','Q7_Part_3','Q7_Part_4','Q7_Part_5','Q7_Part_6','Q7_Part_7']\nn=1\nfor f in fft:\n    plt.subplot(4,2,n)\n    sns.countplot(x=f, hue='Q1', edgecolor=\"black\", alpha=0.7, data=kaggler)\n    sns.despine()\n    plt.title(\"Countplot of {}  by Q1\".format(f))\n    n=n+1\nplt.tight_layout()\nplt.show()\n\n","b0d52f36":"def kaggler_2020(x):\n    y = kaggler[[\"Q2\",\"Q3\",\"Q4\",\"Q5\"]][kaggler[\"Q2\"] == x]\n    y = y.sort_values(by=\"Q3\",ascending=False)\n    return y.head(500)","c30bf44d":"import plotly.express as px\nfrom plotly.subplots import make_subplots\nimport plotly.graph_objs as go\n\nkg = kaggler['Q2'].value_counts().reset_index()\nkg.columns = [\n    'Q2', \n    'percent'\n]\nkg['percent'] \/= len(kaggler)\n\nfig = px.pie(\n    kg, \n    names='Q2', \n    values='percent', \n    title='See Kaggler by gender', \n    width=800,\n    height=500 \n)\n\nfig.show()","caa15b3f":"import plotly.express as px\nfrom plotly.subplots import make_subplots\nimport plotly.graph_objs as go\n\nkg = kaggler['Q2'].value_counts().reset_index()\nkg.columns = [\n    'Q2', \n    'count'\n]\nkg['Q2'] = kg['Q2'].astype(str) + '-'\nkg = kg.sort_values(['count']).tail(50)\n\nfig = px.bar(\n    kg, \n    x='count', \n    y='Q2', \n    orientation='h', \n    title='See Kaggler by gender', \n    width=1000,\n    height=900 \n)\n\nfig.show()","e04aac93":"kaggler_q2 = kaggler['Q2'].value_counts()  \nplt.figure(figsize=(5,3))\nsns.barplot(kaggler_q2.index, kaggler_q2.values, alpha=0.8)\nplt.ylabel('Number of Q2', fontsize=8)\nplt.xlabel('What is your gender? - Selected Choice', fontsize=7)\nplt.xticks(rotation=90)\nplt.show();","542c1acf":"kaggler_2020(\"Man\")","28bf4847":"kaggler_2020(\"Woman\")","57bd4748":"def kaggler_2020_1(x):\n    y = kaggler[[\"Q2\",\"Q3\",\"Q4\",\"Q5\"]][kaggler[\"Q1\"] == x]\n    y = y.sort_values(by=\"Q3\",ascending=False)\n    return y.head(500)","01c93000":"import plotly.express as px\nfrom plotly.subplots import make_subplots\nimport plotly.graph_objs as go\n\nkg = kaggler['Q1'].value_counts().reset_index()\nkg.columns = [\n    'Q1', \n    'percent'\n]\nkg['percent'] \/= len(kaggler)\n\nfig = px.pie(\n    kg, \n    names='Q1', \n    values='percent', \n    title='See Kaggler by age', \n    width=800,\n    height=500 \n)\n\nfig.show()","8f1468c3":"import plotly.express as px\nfrom plotly.subplots import make_subplots\nimport plotly.graph_objs as go\n\nkg = kaggler['Q1'].value_counts().reset_index()\nkg.columns = [\n    'Q1', \n    'count'\n]\nkg['Q1'] = kg['Q1'].astype(str) + '-'\nkg = kg.sort_values(['count']).tail(50)\n\nfig = px.bar(\n    kg, \n    x='count', \n    y='Q1', \n    orientation='h', \n    title='What is your age (# years)?', \n    width=1000,\n    height=900 \n)\n\nfig.show()","967aa667":"kaggler_q1 = kaggler['Q1'].value_counts()  \nplt.figure(figsize=(5,3))\nsns.barplot(kaggler_q1.index, kaggler_q1.values, alpha=0.8)\nplt.ylabel('Number of Q1', fontsize=8)\nplt.xlabel('What is your age (# years)?', fontsize=7)\nplt.xticks(rotation=90)\nplt.show();\n","b33128c3":"kaggler_2020_1(\"25-29\")","4af7f44e":"kaggler_2020_1(\"22-24\")","944c8718":"kaggler_2020_1(\"18-21\")","63b9f345":"kaggler_2020_1(\"30-34\")","e70d2baf":"kaggler_2020_1(\"35-39\")","707d1aac":"kaggler_2020_1(\"40-44\")","d8390358":"kaggler_2020_1(\"45-49\")","8a7c1970":"kaggler_2020_1(\"50-54\")","8f55c4c4":"kaggler_2020_1(\"55-59\")","c48d4d2e":"kaggler_2020_1(\"60-69\")","923eb9a6":"kaggler_2020_1(\"70+\")","e3aa4aea":"def kaggler_2020_2(x):\n    y = kaggler[[\"Q1\",\"Q2\",\"Q3\",\"Q4\",\"Q5\"]][kaggler[\"Q3\"] == x]\n    y = y.sort_values(by=\"Q2\",ascending=False)\n    return y.head(500)","e2b8f834":"import plotly.express as px\nfrom plotly.subplots import make_subplots\nimport plotly.graph_objs as go\n\nkg = kaggler['Q3'].value_counts().reset_index()\nkg.columns = [\n    'Q3', \n    'percent'\n]\nkg['percent'] \/= len(kaggler)\n\nfig = px.pie(\n    kg, \n    names='Q3', \n    values='percent', \n    title='See Kaggler by country', \n    width=900,\n    height=900 \n)\n\nfig.show()","61b79e57":"import plotly.express as px\nfrom plotly.subplots import make_subplots\nimport plotly.graph_objs as go\n\nkg = kaggler['Q3'].value_counts().reset_index()\nkg.columns = [\n    'Q3', \n    'count'\n]\nkg['Q3'] = kg['Q3'].astype(str) + '-'\nkg = kg.sort_values(['count']).tail(50)\n\nfig = px.bar(\n    kg, \n    x='count', \n    y='Q3', \n    orientation='h', \n    title='See Kaggler by country', \n    width=1000,\n    height=900 \n)\n\nfig.show()","7ee5c05a":"kaggler_q1 = kaggler['Q3'].value_counts()  \nplt.figure(figsize=(5,3))\nsns.barplot(kaggler_q1.index, kaggler_q1.values, alpha=0.8)\nplt.ylabel('Number of Q3', fontsize=8)\nplt.xlabel('In which country do you currently reside?', fontsize=7)\nplt.xticks(rotation=90)\nplt.show();\n","f64ea9a9":"kaggler_2020_2(\"Argentina\")\n","59926b40":"import pandas as pd\nfrom matplotlib import pyplot as plt\nArgentina = kaggler[kaggler.Q3 == 'Argentina']\nplt.plot(Argentina.Q1, Argentina.Q2)\nplt.title('Kagglers :Argentina')\nplt.show()","7b115601":"kaggler_2020_2(\"Australia\")\n","52ef8a7f":"Australia = kaggler[kaggler.Q3 == 'Australia']\nplt.plot(Australia.Q1, Australia.Q2)\nplt.title('Kagglers :Australia')\nplt.show()","ee83349b":"kaggler_2020_2(\"Bangladesh\")\n","25c731f6":"Bangladesh = kaggler[kaggler.Q3 == 'Bangladesh']\nplt.plot(Bangladesh.Q1, Bangladesh.Q2)\nplt.title('Kagglers :Bangladesh')\nplt.show()","131b1cd3":"kaggler_2020_2(\"Belarus\")\n","83a313db":"Belarus = kaggler[kaggler.Q3 == 'Belarus']\nplt.plot(Belarus.Q1, Belarus.Q2)\nplt.title('Kagglers :Belarus')\nplt.show()","660f69bf":"kaggler_2020_2(\"Belgium\")\n","2f65c368":"Belgium = kaggler[kaggler.Q3 == 'Belgium']\nplt.plot(Belgium.Q1, Belgium.Q2)\nplt.title('Kagglers :Belgium')\nplt.show()","567bbc0b":"kaggler_2020_2(\"Brazil\")\n","9017b4f4":"Brazil = kaggler[kaggler.Q3 == 'Brazil']\nplt.plot(Brazil.Q1, Brazil.Q2)\nplt.title('Kagglers :Brazil')\nplt.show()","4142c8ec":"kaggler_2020_2(\"Canada\")\n","a7186005":"Canada = kaggler[kaggler.Q3 == 'Canada']\nplt.plot(Canada.Q1, Canada.Q2)\nplt.title('Kagglers :Canada')\nplt.show()","9fd7d398":"kaggler_2020_2(\"Chile\")\n","275b2b43":"Chile = kaggler[kaggler.Q3 == 'Chile']\nplt.plot(Chile.Q1, Chile.Q2)\nplt.title('Kagglers :Chile')\nplt.show()","dcfbc08c":"kaggler_2020_2(\"China\")\n","a18df858":"China = kaggler[kaggler.Q3 == 'China']\nplt.plot(China.Q1, China.Q2)\nplt.title('Kagglers :China')\nplt.show()","1ec38dc5":"kaggler_2020_2(\"Colombia\")\n","2ef0a1bc":"Colombia = kaggler[kaggler.Q3 == 'Colombia']\nplt.plot(Colombia.Q1, Colombia.Q2)\nplt.title('Kagglers :Colombia')\nplt.show()","184796a5":"kaggler_2020_2(\"Egypt\")\n","cd533d73":"Egypt = kaggler[kaggler.Q3 == 'Egypt']\nplt.plot(Egypt.Q1, Egypt.Q2)\nplt.title('Kagglers :Egypt')\nplt.show()","e43ed259":"kaggler_2020_2(\"France\")\n","64cc4c33":"France = kaggler[kaggler.Q3 == 'France']\nplt.plot(France.Q1, France.Q2)\nplt.title('Kagglers :France')\nplt.show()","b1ac74aa":"kaggler_2020_2(\"Germany\")\n","d571814e":"Germany = kaggler[kaggler.Q3 == 'Germany']\nplt.plot(Germany.Q1, Germany.Q2)\nplt.title('Kagglers :Germany')\nplt.show()","7e71cf98":"kaggler_2020_2(\"Ghana\")\n","cb25e736":"Ghana = kaggler[kaggler.Q3 == 'Ghana']\nplt.plot(Ghana.Q1, Ghana.Q2)\nplt.title('Kagglers :Ghana')\nplt.show()","e2d5b57f":"kaggler_2020_2(\"Greece\")\n","30196dcb":"Greece = kaggler[kaggler.Q3 == 'Greece']\nplt.plot(Greece.Q1, Greece.Q2)\nplt.title('Kagglers :Greece')\nplt.show()","c8e13d17":"kaggler_2020_2(\"India\")\n","6d15555a":"India = kaggler[kaggler.Q3 == 'India']\nplt.plot(India.Q1, India.Q2)\nplt.title('Kagglers :India')\nplt.show()","8ee5083e":"kaggler_2020_2(\"Indonesia\")\n","2a42265e":"Indonesia = kaggler[kaggler.Q3 == 'Indonesia']\nplt.plot(Indonesia.Q1, Indonesia.Q2)\nplt.title('Kagglers :Indonesia')\nplt.show()","8cd6f607":"kaggler_2020_2(\"Iran, Islamic Republic of...\")\n","992681dc":"Iran= kaggler[kaggler.Q3 == 'Ireland']\nplt.plot(Iran.Q1, Iran.Q2)\nplt.title('Kagglers :Ireland')\nplt.show()","4d155c62":"kaggler_2020_2(\"Ireland\")\n","8669461b":"Ireland = kaggler[kaggler.Q3 == 'Ireland']\nplt.plot(Ireland.Q1, Ireland.Q2)\nplt.title('Kagglers :Ireland')\nplt.show()","7c57e495":"kaggler_2020_2(\"Israel\")\n","b83beef7":"Israel = kaggler[kaggler.Q3 == 'Israel']\nplt.plot(Israel.Q1, Israel.Q2)\nplt.title('Kagglers :Israel')\nplt.show()","ecf59afb":"kaggler_2020_2(\"Italy\")\n","6c48eae3":"Italy = kaggler[kaggler.Q3 == 'Italy']\nplt.plot(Italy.Q1, Italy.Q2)\nplt.title('Kagglers :Italy')\nplt.show()","93f32dde":"kaggler_2020_2(\"Japan\")\n","71fb71ca":"Japan = kaggler[kaggler.Q3 == 'Japan']\nplt.plot(Japan.Q1, Japan.Q2)\nplt.title('Kagglers :Japan')\nplt.show()","b8add05c":"kaggler_2020_2(\"Kenya\")\n","03b167e3":"Kenya = kaggler[kaggler.Q3 == 'Kenya']\nplt.plot(Kenya.Q1, Kenya.Q2)\nplt.title('Kagglers :Kenya')\nplt.show()","6f82c9ae":"kaggler_2020_2(\"Malaysia\")\n","1739043d":"Malaysia = kaggler[kaggler.Q3 == 'Malaysia']\nplt.plot(Malaysia.Q1, Malaysia.Q2)\nplt.title('Kagglers :Malaysia')\nplt.show()","5354366f":"kaggler_2020_2(\"Mexico\")\n","b7624621":"Mexico = kaggler[kaggler.Q3 == 'Mexico']\nplt.plot(Mexico.Q1, Mexico.Q2)\nplt.title('Kagglers :Mexico')\nplt.show()","18a7c726":"kaggler_2020_2(\"Morocco\")\n","cebaed02":"Morocco = kaggler[kaggler.Q3 == 'Morocco']\nplt.plot(Morocco.Q1, Morocco.Q2)\nplt.title('Kagglers :Morocco')\nplt.show()","225a701d":"kaggler_2020_2(\"Nepal\")\n","a0d4ffde":"Nepal = kaggler[kaggler.Q3 == 'Nepal']\nplt.plot(Nepal.Q1, Nepal.Q2)\nplt.title('Kagglers :Nepal')\nplt.show()","af600d0d":"kaggler_2020_2(\"Netherlands\")\n","1d74a97d":"Netherlands = kaggler[kaggler.Q3 == 'Netherlands']\nplt.plot(Netherlands.Q1, Netherlands.Q2)\nplt.title('Kagglers :Netherlands')\nplt.show()","8eab2076":"kaggler_2020_2(\"Nigeria\")\n","88d60435":"Nigeria = kaggler[kaggler.Q3 == 'Nigeria']\nplt.plot(Nigeria.Q1, Nigeria.Q2)\nplt.title('Kagglers :Nigeria')\nplt.show()","ddf8f508":"kaggler_2020_2(\"Other\")\n","ddbaeb61":"Other = kaggler[kaggler.Q3 == 'Other']\nplt.plot(Other.Q1, Other.Q2)\nplt.title('Kagglers :Other')\nplt.show()","dff98b87":"kaggler_2020_2(\"Pakistan\")\n","e056ae5a":"Pakistan = kaggler[kaggler.Q3 == 'Pakistan']\nplt.plot(Pakistan.Q1, Pakistan.Q2)\nplt.title('Kagglers :Pakistan')\nplt.show()","de26f243":"kaggler_2020_2(\"Peru\")\n","04ebefdf":"Peru = kaggler[kaggler.Q3 == 'Peru']\nplt.plot(Peru.Q1, Peru.Q2)\nplt.title('Kagglers :Peru')\nplt.show()","ac839b47":"kaggler_2020_2(\"Philippines\")\n","9b6b477a":"Philippines = kaggler[kaggler.Q3 == 'Philippines']\nplt.plot(Philippines.Q1, Philippines.Q2)\nplt.title('Kagglers :Philippines')\nplt.show()","c045cd8e":"kaggler_2020_2(\"Poland\")\n","315dabad":"Poland = kaggler[kaggler.Q3 == 'Poland']\nplt.plot(Poland.Q1, Poland.Q2)\nplt.title('Kagglers :Poland')\nplt.show()","a4df2e2b":"kaggler_2020_2(\"Portugal\")\n","298269ac":"Portugal = kaggler[kaggler.Q3 == 'Portugal']\nplt.plot(Portugal.Q1, Portugal.Q2)\nplt.title('Kagglers :Portugal')\nplt.show()","4ba7d6a7":"kaggler_2020_2(\"Republic of Korea\")\n","213a4311":"Republic_of_Korea = kaggler[kaggler.Q3 == 'Republic of Korea']\nplt.plot(Republic_of_Korea.Q1, Republic_of_Korea.Q2)\nplt.title('Kagglers :Republic of Korea')\nplt.show()","e51bd36d":"kaggler_2020_2(\"Romania\")\n","7bfac22e":"Romania = kaggler[kaggler.Q3 == 'Romania']\nplt.plot(Romania.Q1, Romania.Q2)\nplt.title('Kagglers :Romania')\nplt.show()","d2e6e282":"kaggler_2020_2(\"Russia\")\n","14d38e6c":"Russia = kaggler[kaggler.Q3 == 'Russia']\nplt.plot(Russia.Q1, Russia.Q2)\nplt.title('Kagglers :Russia')\nplt.show()","ddf95df2":"kaggler_2020_2(\"Saudi Arabia\")\n","64b2bd5d":"Saudi_Arabia = kaggler[kaggler.Q3 == 'Saudi Arabia']\nplt.plot(Saudi_Arabia.Q1, Saudi_Arabia.Q2)\nplt.title('Kagglers :Saudi Arabia')\nplt.show()","d2051d79":"kaggler_2020_2(\"Singapore\")\n","cc2986bd":"Singapore = kaggler[kaggler.Q3 == 'Singapore']\nplt.plot(Singapore.Q1, Singapore.Q2)\nplt.title('Kagglers :Singapore')\nplt.show()","0ddc41fc":"kaggler_2020_2(\"South Africa\")\n","83f72a13":"South_Africa = kaggler[kaggler.Q3 == 'South Africa']\nplt.plot(South_Africa.Q1, South_Africa.Q2)\nplt.title('Kagglers :South Africa')\nplt.show()","112a5b72":"kaggler_2020_2(\"South Korea\")\n","97c4c957":"South_Korea = kaggler[kaggler.Q3 == 'South Korea']\nplt.plot(South_Korea.Q1, South_Korea.Q2)\nplt.title('Kagglers :South Korea')\nplt.show()","2d334344":"kaggler_2020_2(\"Spain\")\n","c16a9024":"Spain = kaggler[kaggler.Q3 == 'Spain']\nplt.plot(Spain.Q1, Spain.Q2)\nplt.title('Kagglers :Spain')\nplt.show()","eb6ba6e9":"kaggler_2020_2(\"Sri Lanka\")\n","50f69667":"Sri_Lanka = kaggler[kaggler.Q3 == 'Sri Lanka']\nplt.plot(Sri_Lanka.Q1, Sri_Lanka.Q2)\nplt.title('Kagglers :Sri Lanka')\nplt.show()","ecf3664f":"kaggler_2020_2(\"Sweden\")\n","c118f7a3":"Sweden = kaggler[kaggler.Q3 == 'Sweden']\nplt.plot(Sweden.Q1, Sweden.Q2)\nplt.title('Kagglers :Sweden')\nplt.show()","d4981527":"kaggler_2020_2(\"Switzerland\")\n","391d8ffa":"Switzerland = kaggler[kaggler.Q3 == 'Switzerland']\nplt.plot(Switzerland.Q1, Switzerland.Q2)\nplt.title('Kagglers :Switzerland')\nplt.show()","928fe97b":"kaggler_2020_2(\"Taiwan\")\n","bac75276":"Taiwan = kaggler[kaggler.Q3 == 'Taiwan']\nplt.plot(Taiwan.Q1, Taiwan.Q2)\nplt.title('Kagglers :Taiwan')\nplt.show()","608ec88c":"kaggler_2020_2(\"Thailand\")\n","238000ab":"Thailand = kaggler[kaggler.Q3 == 'Thailand']\nplt.plot(Thailand.Q1, Thailand.Q2)\nplt.title('Kagglers :Thailand')\nplt.show()","286c214d":"kaggler_2020_2(\"Tunisia\")\n","1c45520e":"Tunisia = kaggler[kaggler.Q3 == 'Tunisia']\nplt.plot(Tunisia.Q1, Tunisia.Q2)\nplt.title('Kagglers :Tunisia')\nplt.show()","143af3c2":"kaggler_2020_2(\"Turkey\")\n","2e48c22d":"Turkey = kaggler[kaggler.Q3 == 'Turkey']\nplt.plot(Turkey.Q1, Turkey.Q2)\nplt.title('Kagglers :Turkey')\nplt.show()","bd3bae59":"kaggler_2020_2(\"Ukraine\")\n","9d6de9a5":"Ukraine = kaggler[kaggler.Q3 == 'Ukraine']\nplt.plot(Ukraine.Q1, Ukraine.Q2)\nplt.title('Kagglers :Ukraine')\nplt.show()","9f6945bf":"kaggler_2020_2(\"United Arab Emirates\")\n","13ae5d09":"United_Arab_Emirates = kaggler[kaggler.Q3 == 'United Arab Emirates']\nplt.plot(United_Arab_Emirates.Q1, United_Arab_Emirates.Q2)\nplt.title('Kagglers :United Arab Emirates')\nplt.show()","e7a6dc80":"kaggler_2020_2(\"United Kingdom of Great Britain and Northern Ireland\")\n","fb829bd0":"UK= kaggler[kaggler.Q3 == 'United Kingdom of Great Britain and Northern Ireland']\nplt.plot(UK.Q1, UK.Q2)\nplt.title('Kagglers :United Kingdom of Great Britain and Northern Ireland')\nplt.show()","c7757979":"kaggler_2020_2(\"United States of America\")\n","0a46abfb":"USA = kaggler[kaggler.Q3 == 'United States of America']\nplt.plot(USA.Q1,USA.Q2)\nplt.title('Kagglers :United States of America')\nplt.show()","651769e0":"kaggler_2020_2(\"Viet Nam\")","349bceac":"Viet_Nam = kaggler[kaggler.Q3 == 'Viet Nam']\nplt.plot(Viet_Nam.Q1, Viet_Nam.Q2)\nplt.title('Kagglers :Viet Nam')\nplt.show()","4e8ada4d":"def kaggler_2020_3(x):\n    y = kaggler[[\"Q1\",\"Q2\",\"Q3\",\"Q4\",\"Q5\"]][kaggler[\"Q4\"] == x]\n    y = y.sort_values(by=\"Q2\",ascending=False)\n    return y.head(500)","0aa76f55":"import plotly.express as px\nfrom plotly.subplots import make_subplots\nimport plotly.graph_objs as go\n\nkg = kaggler['Q4'].value_counts().reset_index()\nkg.columns = [\n    'Q4', \n    'percent'\n]\nkg['percent'] \/= len(kaggler)\n\nfig = px.pie(\n    kg, \n    names='Q4', \n    values='percent', \n    title='See Kaggler by college', \n    width=1000,\n    height=500 \n)\n\nfig.show()","4cf081bb":"import plotly.express as px\nfrom plotly.subplots import make_subplots\nimport plotly.graph_objs as go\n\nkg = kaggler['Q4'].value_counts().reset_index()\nkg.columns = [\n    'Q4', \n    'count'\n]\nkg['Q4'] = kg['Q4'].astype(str) + '-'\nkg = kg.sort_values(['count']).tail(50)\n\nfig = px.bar(\n    kg, \n    x='count', \n    y='Q4', \n    orientation='h', \n    title='See Kaggler by college', \n    width=1000,\n    height=900 \n)\n\nfig.show()","dd9f50a5":"kaggler_q4 = kaggler['Q4'].value_counts()  \nplt.figure(figsize=(6,3))\nsns.barplot(kaggler_q4.index, kaggler_q4.values, alpha=0.8)\nplt.ylabel('Number of Q4', fontsize=8)\nplt.xlabel('What is the highest level of formal education ?', fontsize=7)\nplt.xticks(rotation=90)\nplt.show();","a55fa4b6":"kaggler_2020_3(\"Doctoral degree\")","665dbcd2":"kaggler_2020_3(\"Professional degree\")","9e1a6494":"kaggler_2020_3(\"Master\u2019s degree\")","c553e4f8":"kaggler_2020_3(\"Bachelor\u2019s degree\")","5e397d25":"kaggler_2020_3(\"I prefer not to answer\")","745c40fd":"kaggler_2020_3(\"Some college\/university study without earning a bachelor\u2019s degree\")","cff290fc":"kaggler_2020_3(\"No formal education past high school\")","f630ef75":"import plotly.express as px\nfrom plotly.subplots import make_subplots\nimport plotly.graph_objs as go\n\nkg = kaggler['Q5'].value_counts().reset_index()\nkg.columns = [\n    'Q5', \n    'percent'\n]\nkg['percent'] \/= len(kaggler)\n\nfig = px.pie(\n    kg, \n    names='Q5', \n    values='percent', \n    title='See Kaggler by current role', \n    width=1000,\n    height=600 \n)\n\nfig.show()","257c071e":"import plotly.express as px\nfrom plotly.subplots import make_subplots\nimport plotly.graph_objs as go\n\nkg = kaggler['Q5'].value_counts().reset_index()\nkg.columns = [\n    'Q5', \n    'count'\n]\nkg['Q5'] = kg['Q5'].astype(str) + '-'\nkg = kg.sort_values(['count']).tail(50)\n\nfig = px.bar(\n    kg, \n    x='count', \n    y='Q5', \n    orientation='h', \n    title='See Kaggler by current role', \n    width=1200,\n    height=900 \n)\n\nfig.show()","f7924890":"kaggler_q5 = kaggler['Q5'].value_counts()  \nplt.figure(figsize=(6,3))\nsns.barplot(kaggler_q5.index, kaggler_q5.values, alpha=0.8)\nplt.ylabel('Number of Q5', fontsize=8)\nplt.xlabel('Select the title most similar to your current?', fontsize=7)\nplt.xticks(rotation=90)\nplt.show();","223b382f":"import plotly.express as px\nfrom plotly.subplots import make_subplots\nimport plotly.graph_objs as go\n\nkg = kaggler['Q6'].value_counts().reset_index()\nkg.columns = [\n    'Q6', \n    'percent'\n]\nkg['percent'] \/= len(kaggler)\n\nfig = px.pie(\n    kg, \n    names='Q6', \n    values='percent', \n    title='See Kaggler: how many years have you been writing code?', \n    width=1000,\n    height=600 \n)\n\nfig.show()","0bde19e8":"kaggler_q6 = kaggler['Q6'].value_counts()  \nplt.figure(figsize=(6,3))\nsns.barplot(kaggler_q6.index, kaggler_q6.values, alpha=0.8)\nplt.ylabel('Number of Q6', fontsize=8)\nplt.xlabel('For how many years have you been writing code?', fontsize=7)\nplt.xticks(rotation=90)\nplt.show();","2429c8a0":"display(kaggler[[\"Q3\",\"Q7_Part_1\",\"Q7_Part_2\",\"Q7_Part_3\",\"Q7_Part_4\",\"Q7_Part_5\",\"Q7_Part_6\",\"Q7_Part_7\",\"Q7_Part_8\",\"Q7_Part_9\",\"Q7_Part_10\",\"Q7_Part_11\",\"Q7_Part_12\",\"Q7_OTHER\"]].groupby([\"Q3\",\"Q7_Part_1\",\"Q7_Part_2\",\"Q7_Part_3\",\"Q7_Part_4\",\"Q7_Part_5\",\"Q7_Part_6\"]).agg(\"sum\").sort_values(by=\"Q3\", ascending = False).head(50000).style.background_gradient(cmap='autumn'))","b9fc10ee":"display(kaggler[[\"Q3\",\"Q8\",\"Q9_Part_1\",\"Q9_Part_2\",\"Q9_Part_3\",\"Q9_Part_4\",\"Q9_Part_5\",\"Q9_Part_6\",\"Q9_Part_7\",\"Q9_Part_8\",\"Q9_Part_9\",\"Q9_Part_10\",\"Q9_Part_11\",\"Q9_OTHER\"]].groupby([\"Q3\",\"Q8\",\"Q9_Part_1\",\"Q9_Part_2\",\"Q9_Part_3\",\"Q9_Part_4\",\"Q9_Part_5\",\"Q9_Part_6\",\"Q9_Part_7\",\"Q9_Part_8\",\"Q9_Part_9\"]).agg(\"sum\").sort_values(by=\"Q3\", ascending = False).head(50000).style.background_gradient(cmap='autumn'))","031c59a7":"# Start with one description:\ntext = kaggler.Q11[1]\n\n# Create and generate a word cloud image:\nwordcloud = WordCloud().generate(text)\n\n# Display the generated image:\nplt.imshow(wordcloud, interpolation='bilinear')\nplt.axis(\"off\")\nplt.show()","4b3d47b6":"# lower max_font_size, change the maximum number of word and lighten the background:\nwordcloud = WordCloud(max_font_size=30, max_words=100, background_color=\"white\").generate(text)\nplt.figure()\nplt.imshow(wordcloud, interpolation=\"bilinear\")\nplt.axis(\"off\")\nplt.show()","32e266de":"# Create stopword list:\nstopwords = set(STOPWORDS)\nstopwords.update([\"notebooks\", \"gpu\", \"aws\"])\n\n# Generate a word cloud image\nwordcloud = WordCloud(stopwords=stopwords, background_color=\"white\").generate(text)\n\n# Display the generated image:\n# the matplotlib way:\nplt.imshow(wordcloud, interpolation='bilinear')\nplt.axis(\"off\")\nplt.show()","ac6a79a4":"import plotly.express as px\nfrom plotly.subplots import make_subplots\nimport plotly.graph_objs as go\n\nkg = kaggler['Q11'].value_counts().reset_index()\nkg.columns = [\n    'Q11', \n    'percent'\n]\nkg['percent'] \/= len(kaggler)\n\nfig = px.pie(\n    kg, \n    names='Q11', \n    values='percent', \n    title='What type of computing platform do you use most often for your data science projects?', \n    width=1000,\n    height=600 \n)\n\nfig.show()","5255194c":"import plotly.express as px\nfrom plotly.subplots import make_subplots\nimport plotly.graph_objs as go\n\nkg = kaggler['Q11'].value_counts().reset_index()\nkg.columns = [\n    'Q11', \n    'count'\n]\nkg['Q11'] = kg['Q11'].astype(str) + '-'\nkg = kg.sort_values(['count']).tail(50)\n\nfig = px.bar(\n    kg, \n    x='count', \n    y='Q11', \n    orientation='h', \n    title='What type of computing platform do you use most often for your data science projects?', \n    width=1000,\n    height=900 \n)\n\nfig.show()","1004eff0":"kaggler_q11 = kaggler['Q11'].value_counts()  \nplt.figure(figsize=(6,3))\nsns.barplot(kaggler_q11.index, kaggler_q11.values, alpha=0.8)\nplt.ylabel('Number of Q11', fontsize=8)\nplt.xlabel('What type of computing platform do you use most often for your data science projects?', fontsize=7)\nplt.xticks(rotation=90)\nplt.show();","18bcf23c":"import plotly.express as px\nfrom plotly.subplots import make_subplots\nimport plotly.graph_objs as go\n\nkg = kaggler['Q13'].value_counts().reset_index()\nkg.columns = [\n    'Q13', \n    'percent'\n]\nkg['percent'] \/= len(kaggler)\n\nfig = px.pie(\n    kg, \n    names='Q13', \n    values='percent', \n    title='Approximately how many times have you used a TPU (tensor processing unit)?', \n    width=1000,\n    height=600 \n)\n\nfig.show()","87b7149f":"import plotly.express as px\nfrom plotly.subplots import make_subplots\nimport plotly.graph_objs as go\n\nkg = kaggler['Q13'].value_counts().reset_index()\nkg.columns = [\n    'Q13', \n    'count'\n]\nkg['Q13'] = kg['Q13'].astype(str) + '-'\nkg = kg.sort_values(['count']).tail(50)\n\nfig = px.bar(\n    kg, \n    x='count', \n    y='Q13', \n    orientation='h', \n    title='Approximately how many times have you used a TPU (tensor processing unit)?', \n    width=1000,\n    height=900 \n)\n\nfig.show()","51e4f597":"kaggler_q13 = kaggler['Q13'].value_counts()  \nplt.figure(figsize=(6,3))\nsns.barplot(kaggler_q13.index, kaggler_q13.values, alpha=0.8)\nplt.ylabel('Number of Q13', fontsize=8)\nplt.xlabel('Approximately how many times have you used a TPU (tensor processing unit)?', fontsize=7)\nplt.xticks(rotation=90)\nplt.show();","077e7014":"import plotly.express as px\nfrom plotly.subplots import make_subplots\nimport plotly.graph_objs as go\n\nkg = kaggler['Q15'].value_counts().reset_index()\nkg.columns = [\n    'Q15', \n    'percent'\n]\nkg['percent'] \/= len(kaggler)\n\nfig = px.pie(\n    kg, \n    names='Q15', \n    values='percent', \n    title='For how many years have you used machine learning methods?', \n    width=1000,\n    height=600 \n)\n\nfig.show()","cf15fb7f":"import plotly.express as px\nfrom plotly.subplots import make_subplots\nimport plotly.graph_objs as go\n\nkg = kaggler['Q15'].value_counts().reset_index()\nkg.columns = [\n    'Q15', \n    'count'\n]\nkg['Q15'] = kg['Q15'].astype(str) + '-'\nkg = kg.sort_values(['count']).tail(50)\n\nfig = px.bar(\n    kg, \n    x='count', \n    y='Q15', \n    orientation='h', \n    title='For how many years have you used machine learning methods?', \n    width=1000,\n    height=900 \n)\n\nfig.show()","9f34e294":"kaggler_q15 = kaggler['Q15'].value_counts()  \nplt.figure(figsize=(6,3))\nsns.barplot(kaggler_q15.index, kaggler_q15.values, alpha=0.8)\nplt.ylabel('Number of Q15', fontsize=8)\nplt.xlabel('For how many years have you used machine learning methods?', fontsize=7)\nplt.xticks(rotation=90)\nplt.show();","4fca922d":"display(kaggler[[\"Q1\",\"Q2\",\"Q3\"]].groupby([\"Q1\",\"Q2\"]).agg(\"sum\").sort_values(by=\"Q1\", ascending = False).head(5).style.background_gradient(cmap='autumn'))","c81a27bb":"display(kaggler[[\"Q1\",\"Q2\",\"Q3\"]].groupby([\"Q1\",\"Q2\"]).agg(\"sum\").sort_values(by=\"Q2\", ascending = False).head(5).style.background_gradient(cmap='autumn'))","a44a4ec7":"display(kaggler[[\"Q1\",\"Q2\",\"Q3\"]].groupby([\"Q1\",\"Q2\"]).agg(\"sum\").sort_values(by=\"Q3\", ascending = False).head(5).style.background_gradient(cmap='autumn'))","645ffb28":"# Indonesia","d739b2fc":"# South Africa","df6b4ddd":"# Chile","26f636bc":"## Woman","038b824d":"# Peru","4c377595":"# Viet Nam","22139827":"## 70+","b81f6ac3":"# South Korea","5eea8578":"# Italy","7be2c78b":"## 60-69","a44e762b":"# Mexico","577610c4":"# Saudi Arabia","cf820320":"# Malaysia","c5f78f85":"# See Kaggler by gender","b9f78942":"# See Kaggler by programming languages","fc4d326f":"# Thailand","25e0b93d":"# Ghana","c9ddc565":"## Argentina","bb851cd9":"# Doctoral degree","6fbe4852":"# Brazil","21dfbbc4":"## 45-49","0cff8a68":"# Spain","ef96e3f3":"## 40-44","aa97eb20":"# Israel","73806ff3":"# Barplots\n\nshowing the frequency of each category separated by label","43612120":"## 18-21","d3964ff7":"# Morocco","c7d150e7":"# Republic of Korea","03554d93":"# Egypt","c6ffd2a2":"# China","0b3be58c":"# I prefer not to answer","163ed89c":"# Australia","8d7ef5ae":"# Poland","5f699d0a":"# Ukraine","5259dc36":"# Pakistan","fe600574":"# Tunisia","07e38d13":"# Greece","f06d3f6d":"## 55-59","b6a4b4e2":"# Bachelor\u2019s degree","b850f64b":"# India","4943143f":"## 35-39","31f8a8e2":"## Man","4c171c7f":"# Colombia","4101f2a1":"# Germany","4ed3ddd0":"# Professional degree","752d21f1":"# Bangladesh","8a0f8777":"# Some college\/university study without earning a bachelor\u2019s degree","3c1e1286":"# Japan","a47683f7":"# Other","c81d3f13":"# United Kingdom of Great Britain and Northern Ireland","ab7d2467":"# France","207ab27b":"# What type of computing platform do you use most often for your data science projects?","eb695b63":"# Switzerland","7de5a993":"# Taiwan","1a93e99b":"# See Kaggler by age","c2e12bc0":"# Canada","6e770a82":"# Master\u2019s degree","53248fce":"# Ireland","4423a40d":"# Russia","04cd42cb":"# Iran, Islamic Republic of...","50a372bf":"# Belarus","3d43a758":"## 25-29","3f836eee":"# See Kaggler by current role","c7c7a399":"# Approximately how many times have you used a TPU (tensor processing unit)?\n","5f1f6cd9":"# Nepal","edb4b088":"# Singapore","15c8f07d":"# See Kaggler by college","75038c66":"## 22-24","c5a21c3d":"# Portugal","6da86418":"# No formal education past high school","c9fb9df1":"# See Kaggler by Country","57ee1207":"# On progress :)","5d5d0f49":"# Romania","ec447238":"# United Arab Emirates","85799b5a":"# Philippines","b352bfca":"## 50-54","1f6027d1":"## 30-34","9a1febc2":"# Nigeria","dbd4b9e9":"# For how many years have you used machine learning methods?\n","7c5aebb8":"# Turkey","9e08a650":"# Belgium","6a2cad4e":"# Sweden","4aee3b7c":"# United States of America","d1ace2ad":"# Kenya","e8e3efdd":"# Netherlands","8abfb462":"# See Kaggler :how many years have you been writing code?","7755b7c8":"# Sri Lanka"}}