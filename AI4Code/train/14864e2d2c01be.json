{"cell_type":{"bac889ac":"code","8fb0ca29":"code","1c138558":"code","ab1b05fd":"code","c3e0dc5a":"code","ae258f96":"code","9c4d48b8":"code","5cd3fa9f":"code","5fdef1e3":"code","5e4f2d4c":"code","38b406fe":"code","81741f13":"code","f97bf44e":"code","9f151451":"code","39a38594":"code","cad71b5f":"code","60621b92":"code","7fb1db9f":"code","8126b734":"code","2f62c495":"code","6c0c8a05":"code","69c2404c":"code","b71869c3":"code","5f184448":"code","a8425838":"code","ebe31a1b":"code","8b9b845c":"code","8040685a":"code","70ba9b76":"code","9a588a12":"code","38a099cc":"code","1c1faec4":"code","cd408714":"markdown","92744c1e":"markdown","2ef98984":"markdown","ddada356":"markdown","1fc9a6e2":"markdown","4190019d":"markdown","5f364e75":"markdown","bac9c23a":"markdown"},"source":{"bac889ac":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\nimport matplotlib.pyplot as plt\n%matplotlib inline\n\nfrom keras.models import  Sequential\nfrom keras.layers.core import  Reshape , Dense, Flatten, Dropout\nfrom keras.callbacks import EarlyStopping\nfrom keras.layers import BatchNormalization, Convolution2D , MaxPooling2D\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","8fb0ca29":"train = pd.read_csv(\"\/kaggle\/input\/digit-recognizer\/train.csv\")\n\nprint(train.shape)\nprint(train.info())\ntrain.head()","1c138558":"test = pd.read_csv(\"\/kaggle\/input\/digit-recognizer\/test.csv\")\n\nprint(test.shape)\nprint(test.info())\ntest.head()","ab1b05fd":"sample_pix = train.iloc[:3, 1:].to_numpy()\nsample_lab = train.iloc[:3, 0]\nsample_pix = sample_pix.reshape((3, 28, 28))\n\nfig, axes = plt.subplots(ncols=3)\n\nfor i in range(3):\n    axes[i].imshow(sample_pix[i], cmap=plt.get_cmap(\"gray\"))\n    axes[i].title.set_text(sample_lab[i])","c3e0dc5a":"train.label.value_counts().sort_index().plot(kind=\"bar\")","ae258f96":"added_pixels = pd.concat([train.label, train.iloc[:,1:].sum(axis=1)], axis=1, keys=[\"label\", \"p_sum\"])\nadded_pixels.groupby(\"label\").describe()","9c4d48b8":"added_pixels.groupby(\"label\").boxplot(subplots=False, rot=45, column=\"p_sum\", figsize=(12,10))","5cd3fa9f":"import scipy.stats as stats\n\npivoted = pd.pivot_table(train, columns=\"label\")\n\nfvalue, pvalue = stats.f_oneway(pivoted[0], pivoted[1], pivoted[2], pivoted[3], pivoted[4], pivoted[5],\n                               pivoted[6], pivoted[7], pivoted[8], pivoted[9])\nprint(fvalue, pvalue)","5fdef1e3":"X = train.iloc[:, 1:].values\ny = train.iloc[:, 0].values\nX_test = test.values","5e4f2d4c":"from keras.utils.np_utils import to_categorical\ny = to_categorical(y)\ny.shape","38b406fe":"from sklearn.model_selection import train_test_split\n\nX_train, X_val, y_train, y_val = train_test_split(X, y, test_size=0.10, random_state=42)\n","81741f13":"model = Sequential([\n    Dense(512, activation=\"relu\"),\n    Dense(10, activation=\"softmax\")\n])","f97bf44e":"model.compile(optimizer='Adam', loss='categorical_crossentropy',\n                  metrics=['accuracy'])","9f151451":"epochs = 10\nhistory = model.fit(x=X_train, y=y_train, batch_size=64, validation_split=0.1, epochs=epochs)","39a38594":"pd.DataFrame(history.history).loc[:, [\"loss\", \"val_loss\"]].plot()\nplt.xticks(range(epochs))\nplt.xlabel(\"Epochs\")\nplt.ylabel(\"Loss\")\nplt.show()","cad71b5f":"model.summary()","60621b92":"model.evaluate(x=X_val, y=y_val, batch_size=64)","7fb1db9f":"X_train = X_train.astype(\"float32\")\nX_test = X_test.astype(\"float32\")","8126b734":"model = Sequential([\n    Reshape((28, 28, 1)),\n    Convolution2D(32,(3,3), activation='relu'),\n    Convolution2D(32,(3,3), activation='relu'),\n    MaxPooling2D(),\n    Convolution2D(64,(3,3), activation='relu'),\n    Convolution2D(64,(3,3), activation='relu'),\n    MaxPooling2D(),\n    Flatten(),\n    Dense(512, activation='relu'),\n    Dense(10, activation='softmax')\n])","2f62c495":"earlystopping = EarlyStopping(patience=3)\nepochs = 10\nmodel.compile(optimizer=\"Adam\", loss=\"categorical_crossentropy\", metrics=[\"accuracy\"])\nhistory = model.fit(x=X_train, y=y_train, batch_size=64, validation_split=0.1, epochs=epochs, callbacks=earlystopping)","6c0c8a05":"pd.DataFrame(history.history).loc[:, [\"loss\", \"val_loss\"]].plot()\nplt.xticks(range(epochs))\nplt.xlabel(\"Epochs\")\nplt.ylabel(\"Loss\")\nplt.show()","69c2404c":"model.evaluate(x=X_val, y=y_val, batch_size=64)","b71869c3":"from keras.layers import BatchNormalization\n\nmodel = Sequential([\n    Reshape((28, 28, 1)),\n    Convolution2D(32,(3,3), activation='relu'),\n    BatchNormalization(),\n    Convolution2D(32,(3,3), activation='relu'),\n    MaxPooling2D(),\n    Convolution2D(64,(3,3), activation='relu'),\n    BatchNormalization(),\n    Convolution2D(64,(3,3), activation='relu'),\n    MaxPooling2D(),\n    Flatten(),\n    Dense(512, activation='relu'),\n    Dense(10, activation='softmax')\n])","5f184448":"model.compile(optimizer=\"Adam\", loss=\"categorical_crossentropy\", metrics=[\"accuracy\"])\nearlystopping = EarlyStopping(patience=3)\nepochs = 10\nhistory = model.fit(x=X_train, y=y_train, batch_size=64, validation_split=0.1, epochs=epochs, callbacks=earlystopping)","a8425838":"pd.DataFrame(history.history).loc[:, [\"loss\", \"val_loss\"]].plot()\nplt.xticks(range(epochs))\nplt.xlabel(\"Epochs\")\nplt.ylabel(\"Loss\")\nplt.show()","ebe31a1b":"model.evaluate(x=X_val, y=y_val, batch_size=64)","8b9b845c":"from keras import Model, Input, layers\nimport tensorflow as tf\n\ninputs = Input(shape=(784,))\n\nx = Reshape((28, 28, 1))(inputs)\nx = Convolution2D(32,(3,3), activation='relu')(x)\nx = BatchNormalization()(x)\nx = Convolution2D(32,(3,3), activation='relu')(x)\nx = MaxPooling2D()(x)\nx = Convolution2D(64,(3,3), activation='relu')(x)\nx = BatchNormalization()(x)\nx = Convolution2D(64,(3,3), activation='relu')(x)\nx = MaxPooling2D()(x)\nx = Flatten()(x)\nx = Dense(512, activation='relu')(x)\nx = Dense(10, activation='softmax')(x)\n\ny = tf.math.reduce_mean(inputs, keepdims=True)\ny = Dense(10, activation='softmax')(y)\n\noutputs = layers.add([x, y])\n\nmodel = Model(inputs, outputs)","8040685a":"from keras.utils.vis_utils import plot_model\n\nplot_model(model, \"mnist.png\", show_shapes=True)","70ba9b76":"model.compile(optimizer=\"Adam\", loss=\"categorical_crossentropy\", metrics=[\"accuracy\"])\nearlystopping = EarlyStopping(patience=3)\nepochs = 10\nhistory = model.fit(x=X_train, y=y_train, batch_size=64, validation_split=0.1, epochs=epochs, callbacks=earlystopping)","9a588a12":"pd.DataFrame(history.history).loc[:, [\"loss\", \"val_loss\"]].plot()\nplt.xticks(range(epochs))\nplt.xlabel(\"Epochs\")\nplt.ylabel(\"Loss\")\nplt.show()","38a099cc":"model.evaluate(x=X_val, y=y_val, batch_size=64)","1c1faec4":"predictions = np.argmax(model.predict(X_test, verbose=0), axis=1)\n\nsubmissions=pd.DataFrame({\"ImageId\": list(range(1,len(predictions)+1)),\n                         \"Label\": predictions})\nsubmissions.to_csv(\"predictions.csv\", index=False, header=True)","cd408714":"## EDA\n\nBesides visualizing sone digits to get a feel what I work with, the main questions I have:\n* Is there any skew in the data (are all digits represented the same)?\n* Are there differences between the digits that could be grasped even before building the model?","92744c1e":"## Predict on Test Data","2ef98984":"## Batch Normalization","ddada356":"## Convolutional Network","1fc9a6e2":"## Simple Sequential Model","4190019d":"Is it worth adding some summary statistics of the pixels as features? The summary and the boxplot above might suggest so, but let's see what an ANOVA test tells about this.\n\nH0: The mean added pixel values for all the digits are basically the same.\n\nHA: There is at least one digit whose mean is significantly different.","5f364e75":"So the probability that all the digits have the same added mean pixel value (and the seemingly present differences in the training set are there only by chance) is very small. It looks like it's worth adding this feature to the model.","bac9c23a":"## Add Mean Pixel Value as Feature with Functional API"}}