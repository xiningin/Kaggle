{"cell_type":{"8d80f57e":"code","4870739c":"code","98017d51":"code","b7af4f34":"code","06ee0edb":"code","c1fa83bf":"code","3a449235":"code","297d68ff":"code","ecbdd51a":"code","2a9d5512":"code","2ac9d5be":"code","4dbf27dd":"code","7aabfd2e":"code","dae697b0":"code","f858e2cb":"code","3583b496":"code","552303ac":"code","e4d0cb92":"code","39355fff":"code","374eb0b6":"code","a2f2bbce":"code","b4d19dc6":"code","1db4bea0":"code","b5f04534":"code","580af3e2":"code","eebd4cb8":"code","9a20734b":"code","3235623b":"code","885e2818":"code","349d1c6c":"code","f5f28748":"code","12e0281e":"code","3a17ef62":"code","da35c098":"code","3a8578bf":"code","6dd3e52d":"code","7630bed0":"code","65a078cd":"code","bc42d39e":"code","27e04e2b":"code","399ec28e":"markdown","565b249c":"markdown","2aed094f":"markdown","44354b04":"markdown","dee6db50":"markdown","df7826de":"markdown","0eddf62c":"markdown","1c15a5b7":"markdown","f05329cc":"markdown","45726954":"markdown"},"source":{"8d80f57e":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","4870739c":"def submission_generation(dataframe, name):\n    \"\"\"\n    Esta funci\u00f3n genera un csv a partir de un dataframe de pandas. \n    Con FileLink se genera un enlace desde el que poder descargar el fichero csv\n    \n    dataframe: DataFrame de pandas\n    name: nombre del fichero csv\n    \"\"\"\n    import os\n    from IPython.display import FileLink\n    os.chdir(r'\/kaggle\/working')\n    dataframe.to_csv(name, index = False)\n    return  FileLink(name)","98017d51":"Train = pd.read_csv(\"\/kaggle\/input\/rms2-titanic\/train.csv\")\nTest = pd.read_csv(\"\/kaggle\/input\/rms2-titanic\/test.csv\")","b7af4f34":"# Combinamos abos data set y le a\u00f1adimos una nueva columna donde quear\u00e1 el titulo\ntrain_test_data = [Train,Test]\n\nfor dataset in train_test_data:\n    dataset['Title'] = dataset.Name.str.extract(' ([A-Za-z]+)\\.')","06ee0edb":"for dataset in train_test_data:\n    dataset['Title'] = dataset['Title'].replace(['Lady', 'Countess','Capt', 'Col', \\\n \t'Don', 'Dr', 'Major', 'Rev', 'Sir', 'Jonkheer', 'Dona'], 'Other')\n\n    dataset['Title'] = dataset['Title'].replace('Mlle', 'Miss')\n    dataset['Title'] = dataset['Title'].replace('Ms', 'Miss')\n    dataset['Title'] = dataset['Title'].replace('Mme', 'Mrs')\n    \nTrain[['Title', 'Survived']].groupby(['Title'], as_index=False).mean()","c1fa83bf":"#Ahora comvertimos a las mujeres en 1 y a los hombres en 0\nfor dataset in train_test_data:\n    dataset['Sex'] = dataset['Sex'].map( {'female': 1, 'male': 0} ).astype(int)","3a449235":"#A los pasajeros que no tengan definida la columna 'Embarked' se les asignar\u00e1 el puerto S\nfor dataset in train_test_data:\n    dataset['Embarked'] = dataset['Embarked'].fillna('S')","297d68ff":"#Ahora cambiamos los datos de la columna 'Embarked' S , C y Q por 0 , 1 y 2\nfor dataset in train_test_data:\n    dataset['Embarked'] = dataset['Embarked'].map( {'S': 0, 'C': 1, 'Q': 2} ).astype(int)","ecbdd51a":"#Rellenamos las valores NaN de la columna edad con valores aleatorios entre media, mediana\nfor dataset in train_test_data:\n    age_avg = dataset['Age'].mean()\n    age_std = dataset['Age'].std()\n    age_null_count = dataset['Age'].isnull().sum()\n    \n    age_null_random_list = np.random.randint(age_avg - age_std, age_avg + age_std, size=age_null_count)\n    dataset['Age'][np.isnan(dataset['Age'])] = age_null_random_list\n    dataset['Age'] = dataset['Age'].astype(int)","2a9d5512":"#Ponemos valores numericos a intervalos de edad\nfor dataset in train_test_data:\n    dataset.loc[ dataset['Age'] <= 16, 'Age'] = 0\n    dataset.loc[(dataset['Age'] > 16) & (dataset['Age'] <= 32), 'Age'] = 1\n    dataset.loc[(dataset['Age'] > 32) & (dataset['Age'] <= 48), 'Age'] = 2\n    dataset.loc[(dataset['Age'] > 48) & (dataset['Age'] <= 64), 'Age'] = 3\n    dataset.loc[ dataset['Age'] > 64, 'Age'] = 4","2ac9d5be":"#Creamos una nueva columna en el Dataset 'FamilySize' \nfor dataset in train_test_data:\n    dataset['FamilySize'] = dataset['Sibsp'] +  dataset['Parch'] + 1","4dbf27dd":"#Creamos una nueva columna llamada 'IsAlone'\nfor dataset in train_test_data:\n    dataset['IsAlone'] = 0\n    dataset.loc[dataset['FamilySize'] == 1, 'IsAlone'] = 1","7aabfd2e":"Train.head()","dae697b0":"t1=pd.get_dummies(Train[\"Title\"], prefix='Titulo: ')\nt2=pd.get_dummies(Test[\"Title\"], prefix='T2')\n\nTrain=pd.concat([Train,t1], axis=1)\nTest=pd.concat([Test,t2], axis=1)","f858e2cb":"t3=pd.get_dummies(Train[\"Age\"], prefix='Rando de edad')\nt4=pd.get_dummies(Test[\"Age\"], prefix='Rando de edad')\n\nTrain=pd.concat([Train,t3], axis=1)\nTest=pd.concat([Test,t4], axis=1)","3583b496":"Train.head()","552303ac":"t5=pd.get_dummies(Train[\"FamilySize\"], prefix='Tama\u00f1o de familia : ')\nt6=pd.get_dummies(Test[\"FamilySize\"], prefix='Tama\u00f1o de familia : ')\n\nTrain=pd.concat([Train,t5], axis=1)\nTest=pd.concat([Test,t6], axis=1)","e4d0cb92":"t7=pd.get_dummies(Train[\"Pclass\"], prefix='Clase n\u00ba : ')\nt8=pd.get_dummies(Test[\"Pclass\"], prefix='Clase n\u00ba : ')\n\nTrain=pd.concat([Train,t7], axis=1)\nTest=pd.concat([Test,t8], axis=1)","39355fff":"#Quitamos las columnas que no nos interesan, las que no van a dar informaci\u00f3n relevante\nfeatures_drop = ['Name', 'Sibsp', 'Parch', 'Ticket', 'Cabin', 'Fare','PassengerId','Title','IsAlone','FamilySize','Pclass']\nTrain = Train.drop(features_drop, axis=1)\nTestDataFrame=Test\nTest = Test.drop(features_drop, axis=1)","374eb0b6":"Test.head()","a2f2bbce":"#Preparamos los datos\nX_train=Train.drop(['Survived'], axis=1)\nY_train=Train['Survived']\nX_test=Test","b4d19dc6":"from sklearn.linear_model import LogisticRegression\nclf = LogisticRegression()\nclf.fit(X_train, Y_train)\ny_pred_log_reg = clf.predict(X_test)\nacc_log_reg = round( clf.score(X_train, Y_train) * 100, 2)\nprint (str(acc_log_reg) + ' percent')","1db4bea0":"Regresi\u00f3nLogisticaDataFrame=pd.DataFrame({\"PassengerId\":TestDataFrame.PassengerId,\n                                          \"Survived\":y_pred_log_reg})\n\nsubmission_generation(Regresi\u00f3nLogisticaDataFrame, \"PrediccionRegresionLogistica.csv\")","b5f04534":"from sklearn.svm import SVC, LinearSVC\nclf = SVC()\nclf.fit(X_train, Y_train)\ny_pred_svc = clf.predict(X_test)\nacc_svc = round(clf.score(X_train, Y_train) * 100, 2)\nprint (acc_svc)\n","580af3e2":"SVMDataFrame=pd.DataFrame({\"PassengerId\":TestDataFrame.PassengerId,\n                           \"Survived\":y_pred_svc})\n\nsubmission_generation(SVMDataFrame, \"PrediccionSVM.csv\")","eebd4cb8":"from sklearn.svm import SVC, LinearSVC\nclf = LinearSVC()\nclf.fit(X_train, Y_train)\ny_pred_linear_svc = clf.predict(X_test)\nacc_linear_svc = round(clf.score(X_train, Y_train) * 100, 2)\nprint (acc_linear_svc)","9a20734b":"SVM_LinearDataFrame=pd.DataFrame({\"PassengerId\":TestDataFrame.PassengerId,\n                                  \"Survived\":y_pred_linear_svc})\n\nsubmission_generation(SVM_LinearDataFrame, \"PrediccionSVM_Linear.csv\")","3235623b":"from sklearn.neighbors import KNeighborsClassifier\nclf = KNeighborsClassifier(n_neighbors = 3)\nclf.fit(X_train, Y_train)\ny_pred_knn = clf.predict(X_test)\nacc_knn = round(clf.score(X_train, Y_train) * 100, 2)\nprint (acc_knn)","885e2818":"K_NearestNeighbrosDataFrame=pd.DataFrame({\"PassengerId\":TestDataFrame.PassengerId,\n                                          \"Survived\":y_pred_knn})\n\nsubmission_generation(K_NearestNeighbrosDataFrame, \"PrediccionKNN.csv\")","349d1c6c":"from sklearn.tree import DecisionTreeClassifier\nclf = DecisionTreeClassifier()\nclf.fit(X_train, Y_train)\ny_pred_decision_tree = clf.predict(X_test)\nacc_decision_tree = round(clf.score(X_train, Y_train) * 100, 2)\nprint (acc_decision_tree)","f5f28748":"DecisionTreeDataFrame=pd.DataFrame({\"PassengerId\":TestDataFrame.PassengerId,\n                                    \"Survived\":y_pred_decision_tree})\n\nsubmission_generation(DecisionTreeDataFrame, \"PrediccionDecisionTree.csv\")","12e0281e":"from sklearn.ensemble import RandomForestClassifier\nclf = RandomForestClassifier(n_estimators=100)\nclf.fit(X_train, Y_train)\ny_pred_random_forest = clf.predict(X_test)\nacc_random_forest = round(clf.score(X_train, Y_train) * 100, 2)\nprint (acc_random_forest)","3a17ef62":"RandomForestDataFrame=pd.DataFrame({\"PassengerId\":TestDataFrame.PassengerId,\n                                    \"Survived\":y_pred_random_forest})\n\nsubmission_generation(RandomForestDataFrame, \"PrediccionRandomForest.csv\")","da35c098":"from sklearn.naive_bayes import GaussianNB\nclf = GaussianNB()\nclf.fit(X_train, Y_train)\ny_pred_gnb = clf.predict(X_test)\nacc_gnb = round(clf.score(X_train, Y_train) * 100, 2)\nprint (acc_gnb)","3a8578bf":"GaussianNaiveDataFrame=pd.DataFrame({\"PassengerId\":TestDataFrame.PassengerId,\n                                     \"Survived\":y_pred_gnb})\n\nsubmission_generation(GaussianNaiveDataFrame, \"PrediccionGNB.csv\")","6dd3e52d":"from sklearn.linear_model import Perceptron\nclf = Perceptron(max_iter=5, tol=None)\nclf.fit(X_train, Y_train)\ny_pred_perceptron = clf.predict(X_test)\nacc_perceptron = round(clf.score(X_train, Y_train) * 100, 2)\nprint (acc_perceptron)","7630bed0":"PerceptronDataFrame=pd.DataFrame({\"PassengerId\":TestDataFrame.PassengerId,\n                                  \"Survived\":y_pred_perceptron})\n\nsubmission_generation(PerceptronDataFrame, \"PrediccionPerceptron.csv\")","65a078cd":"from sklearn.linear_model import SGDClassifier\nclf = SGDClassifier(max_iter=5, tol=None)\nclf.fit(X_train, Y_train)\ny_pred_sgd = clf.predict(X_test)\nacc_sgd = round(clf.score(X_train, Y_train) * 100, 2)\nprint (acc_sgd)","bc42d39e":"SGDDataFrame=pd.DataFrame({\"PassengerId\":TestDataFrame.PassengerId,\n                           \"Survived\":y_pred_sgd})\n\nsubmission_generation(SGDDataFrame, \"PrediccionSGD.csv\")","27e04e2b":"models = pd.DataFrame({\n    'Model': ['Logistic Regression', 'Support Vector Machines', 'Linear SVC', \n              'KNN', 'Decision Tree', 'Random Forest', 'Naive Bayes', \n              'Perceptron', 'Stochastic Gradient Decent'],\n    \n    'Score': [acc_log_reg, acc_svc, acc_linear_svc, \n              acc_knn,  acc_decision_tree, acc_random_forest, acc_gnb, \n              acc_perceptron, acc_sgd]\n    })\n\nmodels.sort_values(by='Score', ascending=False)","399ec28e":"GAUSSIAN NAIVE BAYES","565b249c":"K-Neighbrors","2aed094f":"SVM ","44354b04":"RESULTADOS","dee6db50":"PERCEPTRON","df7826de":"REGRESI\u00d3N LOGISTICA","0eddf62c":"SVM LINEAR","1c15a5b7":"RANDOM FOREST","f05329cc":"ARBOLES DE DECISIONES","45726954":"GRADIENTE DESCENDENTE ESTOCASTICO"}}