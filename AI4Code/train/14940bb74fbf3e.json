{"cell_type":{"735f479c":"code","4df45cb6":"code","3faf285b":"code","90c80b45":"code","f4c87cd7":"code","7646a590":"code","48d4c0da":"code","eb0c1f6f":"code","c226bd39":"code","6b3ff6a9":"code","524d5b13":"code","63eb539d":"code","bddaaf07":"code","495a83b4":"code","39e517f8":"code","5598e329":"markdown","bf7491ef":"markdown","8e4bc6d5":"markdown","59dcc088":"markdown","25030adb":"markdown","d85155cd":"markdown"},"source":{"735f479c":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","4df45cb6":"# Loading the data into Pandas DataFrames\ntrain = pd.read_csv(\"..\/input\/gmsc-thebridge-dsft2109\/data\/train.csv\")\ntest = pd.read_csv(\"..\/input\/gmsc-thebridge-dsft2109\/data\/test.csv\")","3faf285b":"# Train header\ntrain.head()","90c80b45":"# Test header\ntest.head()","f4c87cd7":"# Making a list of Ids from test data\nindices = list(test['Id'])","7646a590":"# Null-Values: train data\ntrain.info()","48d4c0da":"# Null-Values: test data\ntest.info()","eb0c1f6f":"# Removing columns with missings from train and test data\ntrain = train.drop(['MonthlyIncome', 'NumberOfDependents'], axis=1)\ntest = test.drop(['MonthlyIncome', 'NumberOfDependents'], axis=1)","c226bd39":"# Target and Features\ny = train['SeriousDlqin2yrs']\nX = train.drop(['SeriousDlqin2yrs'], axis=1)","6b3ff6a9":"from sklearn.preprocessing import StandardScaler\nfrom sklearn.model_selection import train_test_split\n\n# Splitting the data into train and test data\nX_train, X_test, y_train, y_test = train_test_split(\n    X, y, test_size=0.2, random_state=14)\n\n# Scaling the data\nscaler = StandardScaler()\n\nX_train = scaler.fit_transform(X_train)\nX_test = scaler.transform(X_test)\ntest = scaler.transform(test)","524d5b13":"from sklearn.ensemble import RandomForestClassifier\n\n# Model\nrf = RandomForestClassifier()\n\n# Training the model\nrf.fit(X_train, y_train)\n\n# Predictions\npreds = rf.predict(X_test)","63eb539d":"from sklearn import metrics\nimport matplotlib.pyplot as plt\n\n# Plotting ROC Curve\nplt.figure(figsize=(14, 10))\nfpr, tpr, thresholds = metrics.roc_curve(y_test, preds)\nroc_auc = metrics.auc(fpr, tpr)\ndisplay = metrics.RocCurveDisplay(fpr=fpr, tpr=tpr, roc_auc=roc_auc,\n                                  estimator_name='example estimator')\ndisplay.plot()\n\nplt.show();","bddaaf07":"# Roc Auc Score\nmetrics.roc_auc_score(y_test, preds)","495a83b4":"# DataFrame to submit\nsubmission = pd.DataFrame(\n        {'Id': indices, \n         'SeriousDlqin2yrs': rf.predict(test)}\n)\nsubmission","39e517f8":"# File to submit\nsubmission.to_csv('submission.csv', index=False)","5598e329":"# 4. Model and Predictions","bf7491ef":"# 2. Missing Values, Target and Features","8e4bc6d5":"# 3. Preprocessing the Data","59dcc088":"# 5. Roc Curve","25030adb":"# 1. First look at the Data","d85155cd":"# 6. Submission to Kaggle"}}