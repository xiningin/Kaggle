{"cell_type":{"e5853f11":"code","a138cfd9":"code","c49ea80d":"code","60913c88":"code","5babf1dc":"code","f974f8f5":"code","d5c026c7":"code","9e8e8be5":"code","268947cf":"code","f7c58892":"code","74c6b2dc":"code","bbe85af3":"code","f60c650c":"code","f40a9452":"code","9a946664":"code","fc7704e4":"code","642a8d4f":"code","79bc3677":"code","6c3bd173":"code","2ef6b3ef":"code","4795d0b7":"code","832c8936":"code","12e71a70":"code","117e957a":"code","ed6948e5":"markdown","b5ac2a04":"markdown","7892631d":"markdown","f99c5e12":"markdown","35a1d4b3":"markdown","441b138d":"markdown","7d185d9d":"markdown","ff885bd4":"markdown","259559e5":"markdown","bbfc1519":"markdown"},"source":{"e5853f11":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))","a138cfd9":"trainfile = '\/kaggle\/input\/body-performance-data\/bodyPerformance.csv'\ndf=pd.read_csv(trainfile)\nprint(df.shape)\ndf.head()","c49ea80d":"!pip install deep_autoviml","60913c88":"target = 'class'","5babf1dc":"from sklearn.model_selection import train_test_split\ntrain, test = train_test_split(df, test_size=0.1, random_state=99,\n                                stratify=df[target])\nprint(train.shape, test.shape)","f974f8f5":"from deep_autoviml import deep_autoviml as deepauto","d5c026c7":"keras_options = {'early_stopping': 10}\nmodel_options = {}","9e8e8be5":"model, cat_vocab_dict = deepauto.fit(train, target, keras_model_type=\"fast\",\n\t\tproject_name=\"deep_autoviml\", keras_options=keras_options,  \n\t\tmodel_options=model_options, save_model_flag=True, use_my_model='',\n\t\tmodel_use_case='', verbose=0)","268947cf":"predictions = deepauto.predict(model, project_name='deep_autoviml', test_dataset=test,\n                                 keras_model_type=\"fast\", \n                                 cat_vocab_dict=cat_vocab_dict)","f7c58892":"test[target+'predictions'] = predictions[1]\ntest.head(1)","74c6b2dc":"from sklearn.metrics import classification_report\nprint(classification_report(test[target].values, test[target+'predictions'].values))","bbe85af3":"pip install pycaret --ignore-installed llvmlite numba","f60c650c":"from pycaret.classification import *","f40a9452":"!pip install scikit-learn==0.23.2","9a946664":"exp_clf = setup(train, target = 'class',silent=True,session_id=1)","fc7704e4":"best = compare_models()","642a8d4f":"dt = create_model('lightgbm')","79bc3677":"tuned_dt = tune_model(dt)","6c3bd173":"plot_model(dt)","2ef6b3ef":"plot_model(dt, plot = 'confusion_matrix') ","4795d0b7":"final_dt = finalize_model(tuned_dt)","832c8936":"predf = predict_model(final_dt, data=test)\npredf.head()","12e71a70":"from sklearn.metrics import classification_report","117e957a":"print(classification_report(test[target].values,predf['Label'].values))","ed6948e5":"# 3) Multi Classification by PyCaret","b5ac2a04":"### You can see that PyCaret produces slightly better results than AutoViML though it takes much longer to do so. If this were a very large dataset, you can see the time difference much starker. However, if you want faster results, you can limit the number of models in PyCaret but you may not get the same accuracy as Deep_AutoViML.","7892631d":"## Let's start with a simple \"fast\" keras_model_type option","f99c5e12":"df=df.replace({'M':0, 'F':1})\ndf=df.replace({'A':1,'B':2,'C':3,'D':4})","35a1d4b3":"## The goal of this notebook is to show how PyCaret and Deep AutoViML differ in building models for a dataset.\n\nThis notebook is derived from the following notebook:\nhttps:\/\/www.kaggle.com\/sasakitetsuya\/visualization-and-prediction-by-auto-ml\nMany thanks to the author!","441b138d":"## Let us look at the results on held out test data by AutoViML\n#### It selected 10 features out of the 45 new features and these are results - 72% Macro Average in F1-Score|","7d185d9d":"## Split df into train and test so we assess model performance","ff885bd4":"# So either way, when you have more choices to build models faster, you win!\nIf you like this notebook, save it, share it, upvote it","259559e5":"# 2) Model Building using Deep AutoViML\nYou can build different kinds of deep learning models by just changing the keras_model_type option:\n1. fast: a quick model that applies deep layers for all variables. \n1. fast1: a deep and wide model that sends the same variables to both a deep and wide layer simultaneously.\n1. fast2: a deep and cross model that crosses some variables to build a deep and cross layer simultaneously.\n1. auto: This will build multiple dense layers in sequence that will then use Storm-Tuner to fine tune the hyper parameters for your model.","bbfc1519":"# 1) Data Preprocessing"}}