{"cell_type":{"a40ddc79":"code","5ed88f3e":"code","db08e427":"code","bb1cac66":"code","4ed4bdde":"code","ee74a19c":"code","4f3da6ed":"code","a63ba239":"code","3b29768b":"code","c21b5499":"code","a7c9525e":"code","3dee1b24":"code","48767c59":"code","d04a09b7":"code","29c94632":"code","3c3213a4":"code","ddbf002c":"code","d047bd3a":"markdown","752a3948":"markdown","b8a4c6b8":"markdown","696fd523":"markdown","1758dbd6":"markdown","0beba0cb":"markdown","997e987e":"markdown","61e2d084":"markdown","0ec32d08":"markdown"},"source":{"a40ddc79":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","5ed88f3e":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n%matplotlib inline\n\nbmw = pd.read_csv('\/kaggle\/input\/used-car-dataset-ford-and-mercedes\/bmw.csv')\nbmw.head(10)","db08e427":"bmw.shape","bb1cac66":"bmw.info()","4ed4bdde":"bmw.describe()","ee74a19c":"bmw['model'].unique()","4f3da6ed":"fig = plt.figure(figsize=(20,20))\nsns.violinplot(x='model',y='price',data=bmw,scale='width')","a63ba239":"plt.hist(x='mileage',data=bmw,bins=50,histtype='stepfilled',label='mileage')","3b29768b":"bmw_one = pd.get_dummies(bmw,columns=['model','transmission','fuelType'])","c21b5499":"bmw_one.head(10)","a7c9525e":"bmw_one.corrwith(bmw_one['price'])","3dee1b24":"from sklearn.model_selection import train_test_split\nX = bmw_one.drop(['price'],axis=1)\ny = bmw_one['price']\nX_train,X_test,y_train,y_test = train_test_split(X,y,test_size=0.2,random_state=25)","48767c59":"from sklearn.linear_model import LinearRegression\nlr = LinearRegression()\nlr.fit(X_train,y_train)\nlr.score(X_test,y_test)","d04a09b7":"from sklearn.ensemble import RandomForestRegressor\nrfr = RandomForestRegressor(n_estimators=200)\nrfr.fit(X_train,y_train)\nrfr.score(X_test,y_test)","29c94632":"from sklearn.ensemble import GradientBoostingRegressor\ngbr = GradientBoostingRegressor(random_state=0,max_depth=6,n_estimators=120)\ngbr.fit(X_train,y_train)\ngbr.score(X_test,y_test)","3c3213a4":"results = X_test.copy()\nresults['predicted_lr'] = lr.predict(X_test)\nresults['predicted_rfr'] = rfr.predict(X_test)\nresults['predicted_gbr'] = gbr.predict(X_test)\nresults['Real']= y_test\nresults = results[['predicted_lr', 'predicted_rfr', 'predicted_gbr', 'Real']]\nresults","ddbf002c":"sns.pairplot(results,x_vars=['predicted_lr', 'predicted_rfr','predicted_gbr'],y_vars=['Real'],kind='reg',height=7,aspect=1)","d047bd3a":"# Predicting prices on BMW cars.","752a3948":"![BMW-Logo-650x366.png](attachment:BMW-Logo-650x366.png)","b8a4c6b8":"Correlation between columns after getting dummies.","696fd523":"RandomForestRegressor and GradientBoostingRegressor seem to be the best models to predict prices with a score of 0.95, or in other way, with 95% of accuracy. ","1758dbd6":"Looking data in order to find missing values that could affect our analysis.","0beba0cb":"Calculating some metrics.","997e987e":"# Making predictions.","61e2d084":"This histogram shows that most of the cars that are in sale are under 50000 miles of usage.","0ec32d08":"Plotting a graph that shows the density in every BMW model according to the price."}}