{"cell_type":{"75cd6b75":"code","07737cc5":"code","cd0e1fd8":"code","aad34d19":"code","d6a5e99d":"code","2c86611b":"code","15ff764d":"code","53070bf2":"code","b5ef8f6e":"markdown","2a07e01a":"markdown","32a08783":"markdown","78e24c3c":"markdown","ebd11cb5":"markdown","d7e5e282":"markdown","79c27c49":"markdown"},"source":{"75cd6b75":"import pandas as pd\nimport matplotlib.pylab as plt\nfrom tqdm import tqdm\npd.set_option('max_columns', 100)\ncolors = plt.cm.datad[\"tab20\"]['listed']\n%matplotlib inline","07737cc5":"train = pd.read_csv('..\/input\/train.csv')\ntest = pd.read_csv('..\/input\/test.csv')\n\ntrain_T = train.T.drop(['ID_code','target'])\ntrain_T['feat_mean'] = train_T.mean(axis=1)\n\ntrain_T['feat_max'] = train_T[[x for x in range(0,200000)]].max(axis=1)\ntrain_T['feat_min'] = train_T[[x for x in range(0,200000)]].min(axis=1)\ntrain_T['feat_std'] = train_T[[x for x in range(0,200000)]].std(axis=1)\ntrain_T['feat_var'] = train_T[[x for x in range(0,200000)]].var(axis=1)\ntrain_T['feat_range'] = train_T['feat_max'] - train_T['feat_min']","cd0e1fd8":"for row in tqdm(range(0, 500)):\n    target_of_this = train.loc[row]['target']\n    if target_of_this == 0:\n        train_T.sort_values('feat_mean')[row].plot(figsize=(15, 5), color=colors[0], alpha=0.2)\n    elif target_of_this == 1:\n        train_T.sort_values('feat_mean')[row].plot(figsize=(15, 5), color=colors[2], alpha=0.6)","aad34d19":"# Identify the index of postitive and negative observations\ntrain_T.index = [x for x in range(0,200)]\nnegative_index = train.loc[train['target'] == 0].index.values\npositive_index = train.loc[train['target'] == 1].index.values\n\n# plot each one\nfor plotcount in tqdm(range(0, 5)):\n    ax = train_T.sort_values('feat_mean')[negative_index[plotcount]].reset_index(drop=True).plot(figsize=(15, 5),\n                                                                                                 color=colors[0],\n                                                                                                 alpha=0.5)\n    train_T.sort_values('feat_mean')[positive_index[plotcount]].reset_index(drop=True).plot(figsize=(15, 5),\n                                                                                            color=colors[2],\n                                                                                            alpha=0.5)\n    ax.tick_params(which='minor', length=4, color='r')","d6a5e99d":"from bokeh.io import show, output_notebook\noutput_notebook()\nfrom bokeh.plotting import figure","2c86611b":"# plotting only 50 examples of each\np = figure(tools=\"pan,wheel_zoom,box_zoom,reset,previewsave,hover\",\n          plot_height=400, plot_width=800)\nfor plotcount in tqdm(range(0, 50)):\n    p.line(train_T.sort_values('feat_mean')[negative_index[plotcount]].reset_index(drop=True).index,\n           train_T.sort_values('feat_mean')[negative_index[plotcount]].reset_index(drop=True).values)\n    p.line(train_T.sort_values('feat_mean')[positive_index[plotcount]].reset_index(drop=True).index,\n           train_T.sort_values('feat_mean')[positive_index[plotcount]].reset_index(drop=True).values,\n          color='orange')\nshow(p)","15ff764d":"from sklearn.preprocessing import StandardScaler\n\nss = StandardScaler()\nscaled = ss.fit_transform(train[['var_{}'.format(x) for x in range(0, 200)]])\n\nscaleddf = pd.DataFrame(scaled)\nscaleddf_T = scaleddf.T","53070bf2":"for plotcount in tqdm(range(0, 5000)):\n    scaleddf_T[negative_index[plotcount]].sort_values().reset_index(drop=True).plot(figsize=(15, 15), color=colors[0], alpha=0.2)\n    scaleddf_T[positive_index[plotcount]].sort_values().reset_index(drop=True).plot(figsize=(15, 15), color=colors[2], alpha=0.2)","b5ef8f6e":"## Maybe making it interactive would help..","2a07e01a":"## Transpose Training Set and Order by the mean feature\n- Plot 500 examples - maybe we can see a pattern.\n","32a08783":"## Lets try that again but plot an equal distribution of positive\/negative target","78e24c3c":"Interesting looking but I don't think it leads to anything useful....","ebd11cb5":"## Within each observation (row) sort the scaled columns in ascending order\n- This could just be a data property but it appears that the positive\/negative observations diverge at the ends.","d7e5e282":"# Standard Scale Features before plotting","79c27c49":"# A different approach\nIn this notebook I explore the santander data to see potential patterns in the order of features."}}