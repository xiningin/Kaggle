{"cell_type":{"ba409e97":"code","c777579b":"code","620da600":"code","b197b2ac":"code","0af1d018":"code","3b0c3be4":"code","1c5823f1":"code","beeda2b9":"code","94e71465":"code","2467e324":"code","20c64211":"code","ed8cbc8e":"code","133c15e9":"code","805826da":"code","0af1f418":"code","ad88f5e8":"code","f6c198a6":"code","57e10e44":"code","ad84d278":"code","5625794c":"code","0ab99fd2":"code","f4910a8e":"code","296d17d9":"code","8c8128d4":"code","fbe39ed3":"code","48e904d1":"code","19305994":"code","afffd778":"code","f0dff616":"code","9dc627fe":"code","d42f422f":"code","0b0a0dc9":"code","2132c6c5":"code","74ecfc10":"code","b0a55805":"code","ae7a7d3e":"code","680e43cd":"code","57340414":"code","5dd94c8f":"code","456c9707":"code","9bc61404":"code","e64468ea":"code","184ace7d":"code","b0c56a43":"code","7f684c05":"code","6fbc29a9":"code","d8d03890":"code","35f18d7c":"code","eac84a13":"code","8b48542e":"code","2c6a2035":"code","b56ecc60":"code","5a683426":"code","cbc27ec7":"code","95d34f46":"code","f33c2d50":"code","9a82793b":"markdown","08207d48":"markdown","b15b6824":"markdown","a9551d45":"markdown","cc85277e":"markdown","4b08e6a7":"markdown","09316992":"markdown","e3910320":"markdown","3ceb9396":"markdown","6f3d594f":"markdown","f1d9f6f8":"markdown","e3f3b52a":"markdown","ef7cea3e":"markdown","5d4ec263":"markdown","e3aa803b":"markdown","72b9633a":"markdown","6ca5dd0f":"markdown","6dd10e62":"markdown","9a7f1179":"markdown","735c4e5a":"markdown","a6aa66e1":"markdown","266ecb9b":"markdown","61545bbf":"markdown","3768210d":"markdown","89a0be90":"markdown","d2d5faec":"markdown","1eb14180":"markdown","eaad15ee":"markdown","668f83e6":"markdown","fb04fa55":"markdown","8d5a3461":"markdown","d51096b6":"markdown","6df7af31":"markdown","a64a38e6":"markdown","d5d57937":"markdown","e9b710a3":"markdown","e576f3b4":"markdown","c5b6eb5d":"markdown","1781e763":"markdown","faf51a47":"markdown","32b050b6":"markdown","adc999f7":"markdown","cfeae6ce":"markdown","106f7d02":"markdown","103ee1ef":"markdown","377c7b2c":"markdown","fd2bdeed":"markdown","12dae1b8":"markdown","490079ef":"markdown","9d607959":"markdown"},"source":{"ba409e97":"# install calmap\n! pip install calmap","c777579b":"# essential libraries\nimport json\nfrom urllib.request import urlopen\n\n# storing and anaysis\nimport numpy as np\nimport pandas as pd\n\n# visualization\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport plotly.express as px\nimport plotly.graph_objs as go\nimport calmap\nimport folium\n\n# color pallette\ncnf = '#393e46' # confirmed - grey\ndth = '#ff2e63' # death - red\nrec = '#21bf73' # recovered - cyan\nact = '#fe9801' # active case - yellow\n\n# converter\nfrom pandas.plotting import register_matplotlib_converters\nregister_matplotlib_converters()   \n\n# hide warnings\nimport warnings\nwarnings.filterwarnings('ignore')","620da600":"# list files\n!ls ..\/input\/corona-virus-report","b197b2ac":"# importing datasets\nfull_table = pd.read_csv('..\/input\/corona-virus-report\/covid_19_clean_complete.csv', \n                         parse_dates=['Date'])\nfull_table.head()","0af1d018":"# dataframe info\n# full_table.info()","3b0c3be4":"# checking for missing value\n# full_table.isna().sum()","1c5823f1":"# cases \ncases = ['Confirmed', 'Deaths', 'Recovered', 'Active']\n\n# Active Case = confirmed - deaths - recovered\nfull_table['Active'] = full_table['Confirmed'] - full_table['Deaths'] - full_table['Recovered']\n\n# replacing Mainland china with just China\nfull_table['Country\/Region'] = full_table['Country\/Region'].replace('Mainland China', 'China')\n\n# filling missing values \nfull_table[['Province\/State']] = full_table[['Province\/State']].fillna('')\nfull_table[cases] = full_table[cases].fillna(0)","beeda2b9":"# cases in the ships\nship = full_table[full_table['Province\/State'].str.contains('Grand Princess')|full_table['Province\/State'].str.contains('Diamond Princess cruise ship')]\n\n# china and the row\nchina = full_table[full_table['Country\/Region']=='China']\nrow = full_table[full_table['Country\/Region']!='China']\n\n# latest\nfull_latest = full_table[full_table['Date'] == max(full_table['Date'])].reset_index()\nchina_latest = full_latest[full_latest['Country\/Region']=='China']\nrow_latest = full_latest[full_latest['Country\/Region']!='China']\n\n# latest condensed\nfull_latest_grouped = full_latest.groupby('Country\/Region')['Confirmed', 'Deaths', 'Recovered', 'Active'].sum().reset_index()\nchina_latest_grouped = china_latest.groupby('Province\/State')['Confirmed', 'Deaths', 'Recovered', 'Active'].sum().reset_index()\nrow_latest_grouped = row_latest.groupby('Country\/Region')['Confirmed', 'Deaths', 'Recovered', 'Active'].sum().reset_index()","94e71465":"temp = full_table.groupby(['Country\/Region', 'Province\/State'])['Confirmed', 'Deaths', 'Recovered', 'Active'].max()\ntemp.style.background_gradient(cmap='Reds')","2467e324":"temp = full_table.groupby('Date')['Confirmed', 'Deaths', 'Recovered', 'Active'].sum().reset_index()\ntemp = temp[temp['Date']==max(temp['Date'])].reset_index(drop=True)\ntemp.style.background_gradient(cmap='Pastel1')","20c64211":"tm = temp.melt(id_vars=\"Date\", value_vars=['Active', 'Deaths', 'Recovered'])\nfig = px.treemap(tm, path=[\"variable\"], values=\"value\", height=400, width=600,\n                 color_discrete_sequence=[rec, act, dth])\nfig.show()","ed8cbc8e":"temp_f = full_latest_grouped.sort_values(by='Confirmed', ascending=False)\ntemp_f = temp_f.reset_index(drop=True)\ntemp_f.style.background_gradient(cmap='Reds')","133c15e9":"temp_flg = temp_f[temp_f['Deaths']>0][['Country\/Region', 'Deaths']]\ntemp_flg.sort_values('Deaths', ascending=False).reset_index(drop=True).style.background_gradient(cmap='Reds')","805826da":"temp = temp_f[temp_f['Recovered']==0][['Country\/Region', 'Confirmed', 'Deaths', 'Recovered']]\ntemp.reset_index(drop=True).style.background_gradient(cmap='Reds')","0af1f418":"temp = row_latest_grouped[row_latest_grouped['Confirmed']==\n                          row_latest_grouped['Deaths']]\ntemp = temp[['Country\/Region', 'Confirmed', 'Deaths']]\ntemp = temp.sort_values('Confirmed', ascending=False)\ntemp = temp.reset_index(drop=True)\ntemp.style.background_gradient(cmap='Reds')","ad88f5e8":"temp = row_latest_grouped[row_latest_grouped['Confirmed']==\n                          row_latest_grouped['Recovered']]\ntemp = temp[['Country\/Region', 'Confirmed', 'Recovered']]\ntemp = temp.sort_values('Confirmed', ascending=False)\ntemp = temp.reset_index(drop=True)\ntemp.style.background_gradient(cmap='Greens')","f6c198a6":"temp = row_latest_grouped[row_latest_grouped['Confirmed']==\n                          row_latest_grouped['Deaths']+\n                          row_latest_grouped['Recovered']]\ntemp = temp[['Country\/Region', 'Confirmed', 'Deaths', 'Recovered']]\ntemp = temp.sort_values('Confirmed', ascending=False)\ntemp = temp.reset_index(drop=True)\ntemp.style.background_gradient(cmap='Greens')","57e10e44":"temp_f = china_latest_grouped[['Province\/State', 'Confirmed', 'Deaths', 'Recovered']]\ntemp_f = temp_f.sort_values(by='Confirmed', ascending=False)\ntemp_f = temp_f.reset_index(drop=True)\ntemp_f.style.background_gradient(cmap='Pastel1_r')","ad84d278":"temp = china_latest_grouped[china_latest_grouped['Recovered']==0]\ntemp = temp[['Province\/State', 'Confirmed', 'Deaths', 'Recovered']]\ntemp = temp.sort_values('Confirmed', ascending=False)\ntemp = temp.reset_index(drop=True)\ntemp.style.background_gradient(cmap='Pastel1_r')","5625794c":"temp = china_latest_grouped[china_latest_grouped['Confirmed']==\n                          china_latest_grouped['Deaths']]\ntemp = temp[['Province\/State', 'Confirmed', 'Deaths', 'Recovered']]\ntemp = temp.sort_values('Confirmed', ascending=False)\ntemp = temp.reset_index(drop=True)\ntemp.style.background_gradient(cmap='Greens')","0ab99fd2":"temp = china_latest_grouped[china_latest_grouped['Confirmed']==\n                          china_latest_grouped['Recovered']]\ntemp = temp[['Province\/State', 'Confirmed', 'Recovered']]\ntemp = temp.sort_values('Confirmed', ascending=False)\ntemp = temp.reset_index(drop=True)\ntemp.style.background_gradient(cmap='Greens')","f4910a8e":"temp = china_latest_grouped[china_latest_grouped['Confirmed']==\n                          china_latest_grouped['Deaths']+\n                          china_latest_grouped['Recovered']]\ntemp = temp[['Province\/State', 'Confirmed', 'Deaths', 'Recovered']]\ntemp = temp.sort_values('Confirmed', ascending=False)\ntemp = temp.reset_index(drop=True)\ntemp.style.background_gradient(cmap='Greens')","296d17d9":"# World wide\n\nm = folium.Map(location=[0, 0], tiles='cartodbpositron',\n               min_zoom=1, max_zoom=4, zoom_start=1)\n\nfor i in range(0, len(full_latest)):\n    folium.Circle(\n        location=[full_latest.iloc[i]['Lat'], full_latest.iloc[i]['Long']],\n        color='crimson', \n        tooltip =   '<li><bold>Country : '+str(full_latest.iloc[i]['Country\/Region'])+\n                    '<li><bold>Province : '+str(full_latest.iloc[i]['Province\/State'])+\n                    '<li><bold>Confirmed : '+str(full_latest.iloc[i]['Confirmed'])+\n                    '<li><bold>Deaths : '+str(full_latest.iloc[i]['Deaths'])+\n                    '<li><bold>Recovered : '+str(full_latest.iloc[i]['Recovered']),\n        radius=int(full_latest.iloc[i]['Confirmed'])**1.1).add_to(m)\nm","8c8128d4":"# Confirmed\n\nfig = px.choropleth(full_latest_grouped, locations=\"Country\/Region\", \n                    locationmode='country names', color=\"Confirmed\", \n                    hover_name=\"Country\/Region\", range_color=[1,7000], \n                    color_continuous_scale=\"aggrnyl\", \n                    title='Countries with Confirmed Cases')\nfig.update(layout_coloraxis_showscale=False)\nfig.show()","fbe39ed3":"# Deaths\n\nfig = px.choropleth(full_latest_grouped[full_latest_grouped['Deaths']>0], \n                    locations=\"Country\/Region\", locationmode='country names',\n                    color=\"Deaths\", hover_name=\"Country\/Region\", \n                    range_color=[1,50], color_continuous_scale=\"agsunset\",\n                    title='Countries with Deaths Reported')\nfig.update(layout_coloraxis_showscale=False)\nfig.show()","48e904d1":"# # China\n\n# clg = china_latest_grouped.iloc[:, :].copy()\n\n# name = {'Inner Mongolia': 'Inner Mongol',\n#         'Tibet': 'Xizang'}\n# clg.loc[:, 'Province\/State'] = clg.loc[: 'Province\/State'].replace(name)\n\n# with urlopen('https:\/\/raw.githubusercontent.com\/yg2619\/Choropleth-Maps-in-Python-Using-Plotly\/master\/china_geojson.json') as file:\n#     china_json = json.load(file)\n\n# fig = go.Figure(go.Choroplethmapbox(geojson=china_json, locations=clg['Province\/State'], \n#                                     z=china_latest_grouped['Confirmed'], colorscale='Viridis', zmin=0, zmax=1000,\n#                                     marker_opacity=0.8, marker_line_width=0))\n# fig.update_layout(mapbox_style=\"carto-positron\",\n#                   mapbox_zoom=3, mapbox_center = {\"lat\": 35.8617, \"lon\": 104.1954})\n# fig.update_layout(margin={\"r\":0,\"t\":0,\"l\":0,\"b\":0})\n# fig.update_layout(title='Confirmed Cases in Chinese Provincec')\n# fig.show()\n\n# -----------------------------------------------------------------------------------------------------------------\n\n# # US\n\n# temp = full_latest.loc[full_latest['Country\/Region']=='US', ['Province\/State', 'Confirmed']]\n# temp['State'] = temp.loc[:, 'Province\/State'].str.split(', ').str[-1]\n# temp = temp.groupby('State')['Confirmed'].sum().reset_index()\n\n# df = pd.read_csv('https:\/\/raw.githubusercontent.com\/plotly\/datasets\/master\/2011_us_ag_exports.csv')\n\n# fig = go.Figure(go.Choropleth(locations=temp['State'], z = temp['Confirmed'].astype(float), \n#                               locationmode = 'USA-states', colorscale = 'Viridis'))\n# fig.update_layout(geo_scope='usa', title='Confirmed Cases in US States')\n# fig.show()","19305994":"formated_gdf = full_table.groupby(['Date', 'Country\/Region'])['Confirmed', 'Deaths', 'Recovered'].max()\nformated_gdf = formated_gdf.reset_index()\nformated_gdf['Date'] = pd.to_datetime(formated_gdf['Date'])\nformated_gdf['Date'] = formated_gdf['Date'].dt.strftime('%m\/%d\/%Y')\nformated_gdf['size'] = formated_gdf['Confirmed'].pow(0.3)\n\nfig = px.scatter_geo(formated_gdf, locations=\"Country\/Region\", locationmode='country names', \n                     color=\"Confirmed\", size='size', hover_name=\"Country\/Region\", \n                     range_color= [0, max(formated_gdf['Confirmed'])+2], \n                     projection=\"natural earth\", animation_frame=\"Date\", \n                     title='Spread over time')\nfig.update(layout_coloraxis_showscale=False)\nfig.show()","afffd778":"# Latest cases from the ships\ntemp = ship[ship['Date']==max(ship['Date'])]\ntemp = temp[['Province\/State', 'Confirmed', 'Deaths', 'Recovered']].reset_index(drop=True)\ntemp.style.background_gradient(cmap='Pastel1_r')","f0dff616":"temp = ship[ship['Date']==max(ship['Date'])]\n\nm = folium.Map(location=[0, 0], tiles='cartodbpositron',\n               min_zoom=1, max_zoom=4, zoom_start=1)\n\nfor i in range(0, len(temp)):\n    folium.Circle(\n        location=[temp.iloc[i]['Lat'], temp.iloc[i]['Long']],\n        color='crimson', \n        tooltip =   '<li><bold>Country : '+str(temp.iloc[i]['Country\/Region'])+\n                    '<li><bold>Province : '+str(temp.iloc[i]['Province\/State'])+\n                    '<li><bold>Confirmed : '+str(temp.iloc[i]['Confirmed'])+\n                    '<li><bold>Deaths : '+str(temp.iloc[i]['Deaths'])+\n                    '<li><bold>Recovered : '+str(temp.iloc[i]['Recovered']),\n        radius=100000).add_to(m)\nm","9dc627fe":"temp = full_table.groupby('Date')['Recovered', 'Deaths', 'Active'].sum().reset_index()\ntemp = temp.melt(id_vars=\"Date\", value_vars=['Recovered', 'Deaths', 'Active'],\n                 var_name='Case', value_name='Count')\ntemp.head()\n\nfig = px.area(temp, x=\"Date\", y=\"Count\", color='Case',\n             title='Cases over time', color_discrete_sequence = [rec, dth, act])\nfig.show()","d42f422f":"temp = full_table.groupby('Date').sum().reset_index()\n\n# adding two more columns\ntemp['No. of Deaths to 100 Confirmed Cases'] = round(temp['Deaths']\/temp['Confirmed'], 3)*100\ntemp['No. of Recovered to 100 Confirmed Cases'] = round(temp['Recovered']\/temp['Confirmed'], 3)*100\n# temp['No. of Recovered to 1 Death Case'] = round(temp['Recovered']\/temp['Deaths'], 3)\n\ntemp = temp.melt(id_vars='Date', value_vars=['No. of Deaths to 100 Confirmed Cases', 'No. of Recovered to 100 Confirmed Cases'], \n                 var_name='Ratio', value_name='Value')\n\nfig = px.line(temp, x=\"Date\", y=\"Value\", color='Ratio', log_y=True, \n              title='Recovery and Mortality Rate Over The Time', color_discrete_sequence=[dth, rec])\nfig.show()","0b0a0dc9":"c_spread = china[china['Confirmed']!=0].groupby('Date')['Province\/State'].unique().apply(len)\nc_spread = pd.DataFrame(c_spread).reset_index()\n\nfig = px.line(c_spread, x='Date', y='Province\/State', \n              title='Number of Provinces\/States\/Regions of China to which COVID-19 spread over the time',\n             color_discrete_sequence=[cnf,dth, rec])\nfig.show()\n\n# ------------------------------------------------------------------------------------------\n\nspread = full_table[full_table['Confirmed']!=0].groupby('Date')['Country\/Region'].unique().apply(len)\nspread = pd.DataFrame(spread).reset_index()\n\nfig = px.line(spread, x='Date', y='Country\/Region', \n              title='Number of Countries\/Regions to which COVID-19 spread over the time',\n             color_discrete_sequence=[cnf,dth, rec])\nfig.show()","2132c6c5":"flg = full_latest_grouped\nflg.head()","74ecfc10":"fig = px.bar(flg.sort_values('Confirmed', ascending=False).head(20).sort_values('Confirmed', ascending=True), \n             x=\"Confirmed\", y=\"Country\/Region\", title='Confirmed Cases', text='Confirmed', orientation='h', \n             width=700, height=700, range_x = [0, max(flg['Confirmed'])+10000])\nfig.update_traces(marker_color=cnf, opacity=0.6, textposition='outside')\nfig.show()","b0a55805":"fig = px.bar(flg.sort_values('Deaths', ascending=False).head(20).sort_values('Deaths', ascending=True), \n             x=\"Deaths\", y=\"Country\/Region\", title='Deaths', text='Deaths', orientation='h', \n             width=700, height=700, range_x = [0, max(flg['Deaths'])+500])\nfig.update_traces(marker_color=dth, opacity=0.6, textposition='outside')\nfig.show()","ae7a7d3e":"fig = px.bar(flg.sort_values('Recovered', ascending=False).head(20).sort_values('Recovered', ascending=True), \n             x=\"Recovered\", y=\"Country\/Region\", title='Recovered', text='Recovered', orientation='h', \n             width=700, height=700, range_x = [0, max(flg['Recovered'])+10000])\nfig.update_traces(marker_color=rec, opacity=0.6, textposition='outside')\nfig.show()","680e43cd":"fig = px.bar(flg.sort_values('Active', ascending=False).head(20).sort_values('Active', ascending=True), \n             x=\"Active\", y=\"Country\/Region\", title='Active', text='Active', orientation='h', \n             width=700, height=700, range_x = [0, max(flg['Active'])+3000])\nfig.update_traces(marker_color=act, opacity=0.6, textposition='outside')\nfig.show()","57340414":"# (Only countries with more than 100 case are considered)\n\nflg['Mortality Rate'] = round((flg['Deaths']\/flg['Confirmed'])*100, 2)\ntemp = flg[flg['Confirmed']>100]\ntemp = temp.sort_values('Mortality Rate', ascending=False)\n\nfig = px.bar(temp.sort_values('Mortality Rate', ascending=False).head(15).sort_values('Mortality Rate', ascending=True), \n             x=\"Mortality Rate\", y=\"Country\/Region\", text='Mortality Rate', orientation='h', \n             width=700, height=600, range_x = [0, 8], title='No. of Deaths Per 100 Confirmed Case')\nfig.update_traces(marker_color=act, opacity=0.6, textposition='outside')\nfig.show()","5dd94c8f":"# load population dataset\npop_clean_data = pd.read_csv(\"..\/input\/world-population-19602018\/population_clean.csv\")\n\n# select only the latest data\npop = pop_clean_data.loc[:, ['Country Name', '2018']]\n\n# substitute for missing values\ncols = ['French Guiana', 'Martinique', 'Palestine' , 'Republic of Ireland', 'Saint Barthelemy', 'Taiwan', 'Vatican City']\npops = [290691, 376480, 4750000, 4920455, 7122, 23476640, 1000]\nfor c, p in zip(cols, pops):\n    temp.loc[temp['Country\/Region']== c, 'Population'] = p\n\n# replace country names \nname = {\n    'Egypt, Arab Rep.': 'Egypt',\n    'Hong Kong SAR, China': 'Hong Kong',\n    'Iran, Islamic Rep.': 'Iran (Islamic Republic of)',\n    'Macao SAR, China': 'Macau',\n    'Hong Kong SAR': 'Hong Kong',\n    'Russian Federation': 'Russia',\n    'Slovak Republic': 'Slovakia',\n    'Korea, Rep.': 'Republic of Korea',\n    'United Kingdom': 'UK',\n    'United States': 'US' }\npop.loc[:, 'Country Name'] = pop.loc[: 'Country Name'].replace(name)\n\n# merge dataframes\ntemp = pd.merge(full_latest_grouped, pop, how='left', right_on='Country Name', left_on='Country\/Region')\n# print(temp[temp['Country Name'].isna()])\n\ntemp = temp[['Country\/Region', 'Confirmed', 'Deaths', 'Recovered', 'Active', '2018']]\ntemp.columns = ['Country\/Region', 'Confirmed', 'Deaths', 'Recovered', 'Active', 'Population']\n    \n# calculate Confirmed\/Population\ntemp['Confirmed Per Million People'] = round(temp['Confirmed']\/temp['Population']*1000000, 2)\n\n# countries with population greater that 1 million only\ntemp = temp[temp['Population']>1000000].sort_values('Confirmed Per Million People', ascending=False).reset_index(drop=True)\n# temp.head()\n\nfig = px.bar(temp.head(20).sort_values('Confirmed Per Million People', ascending=True), \n             x='Confirmed Per Million People', y='Country\/Region', orientation='h', \n             width=700, height=700, text='Confirmed Per Million People', title='Confirmed cases Per Million People',\n             range_x = [0, max(temp['Confirmed Per Million People'])+20])\nfig.update_traces(textposition='outside', marker_color=dth, opacity=0.7)\nfig.update_layout(uniformtext_minsize=8, uniformtext_mode='hide')\nfig.show()","456c9707":"temp = full_table.groupby(['Country\/Region', 'Date'])['Confirmed', 'Deaths', 'Recovered'].sum()\ntemp = temp.reset_index()\n\nfig = px.bar(temp, x=\"Date\", y=\"Confirmed\", color='Country\/Region', orientation='v', height=600,\n             title='Confirmed', color_discrete_sequence = px.colors.cyclical.mygbm)\nfig.show()","9bc61404":"fig = px.bar(temp, x=\"Date\", y=\"Deaths\", color='Country\/Region', orientation='v', height=600,\n             title='Deaths', color_discrete_sequence = px.colors.cyclical.mygbm)\nfig.show()","e64468ea":"temp = full_table.groupby(['Country\/Region', 'Date', ])['Confirmed', 'Deaths', 'Recovered']\ntemp = temp.sum().diff().reset_index()\n\nmask = temp['Country\/Region'] != temp['Country\/Region'].shift(1)\n\ntemp.loc[mask, 'Confirmed'] = np.nan\ntemp.loc[mask, 'Deaths'] = np.nan\ntemp.loc[mask, 'Recovered'] = np.nan\n\nfig = px.bar(temp, x=\"Date\", y=\"Confirmed\", color='Country\/Region',title='New cases')\nfig.show()","184ace7d":"fig = px.treemap(full_latest.sort_values(by='Confirmed', ascending=False).reset_index(drop=True), \n                 path=[\"Country\/Region\", \"Province\/State\"], values=\"Confirmed\", height=700,\n                 title='Number of Confirmed Cases',\n                 color_discrete_sequence = px.colors.qualitative.Prism)\nfig.show()\n\nfig = px.treemap(full_latest.sort_values(by='Deaths', ascending=False).reset_index(drop=True), \n                 path=[\"Country\/Region\", \"Province\/State\"], values=\"Deaths\", height=700,\n                 title='Number of Deaths reported',\n                 color_discrete_sequence = px.colors.qualitative.Prism)\nfig.show()","b0c56a43":"# In China\ntemp = china.groupby('Date')['Confirmed', 'Deaths', 'Recovered'].sum().diff()\ntemp = temp.reset_index()\ntemp = temp.melt(id_vars=\"Date\", \n                 value_vars=['Confirmed', 'Deaths', 'Recovered'])\n\nfig = px.bar(temp, x=\"Date\", y=\"value\", color='variable', \n             title='In China',\n             color_discrete_sequence=[cnf, dth, rec])\nfig.update_layout(barmode='group')\nfig.show()\n\n#-----------------------------------------------------------------------------\n\n# ROW\ntemp = row.groupby('Date')['Confirmed', 'Deaths', 'Recovered'].sum().diff()\ntemp = temp.reset_index()\ntemp = temp.melt(id_vars=\"Date\", \n                 value_vars=['Confirmed', 'Deaths', 'Recovered'])\n\nfig = px.bar(temp, x=\"Date\", y=\"value\", color='variable', \n             title='Outside China',\n             color_discrete_sequence=[cnf, dth, rec])\nfig.update_layout(barmode='group')\nfig.show()","7f684c05":"def from_china_or_not(row):\n    if row['Country\/Region']=='China':\n        return 'From China'\n    else:\n        return 'Outside China'\n    \ntemp = full_table.copy()\ntemp['Region'] = temp.apply(from_china_or_not, axis=1)\ntemp = temp.groupby(['Region', 'Date'])['Confirmed', 'Deaths', 'Recovered']\ntemp = temp.sum().diff().reset_index()\nmask = temp['Region'] != temp['Region'].shift(1)\ntemp.loc[mask, 'Confirmed'] = np.nan\ntemp.loc[mask, 'Deaths'] = np.nan\ntemp.loc[mask, 'Recovered'] = np.nan\n\nfig = px.bar(temp, x='Date', y='Confirmed', color='Region', barmode='group', \n             text='Confirmed', title='Confirmed', color_discrete_sequence= [cnf, dth, rec])\nfig.update_traces(textposition='outside')\nfig.show()\n\nfig = px.bar(temp, x='Date', y='Deaths', color='Region', barmode='group', \n             text='Confirmed', title='Deaths', color_discrete_sequence= [cnf, dth, rec])\nfig.update_traces(textposition='outside')\nfig.update_traces(textangle=-90)\nfig.show()","6fbc29a9":"\n\n# fig = px.bar(temp[temp['Country\/Region']!='China'], x=\"Date\", y=\"Confirmed\", color='Country\/Region',\n#              title='Number of new cases outside China everyday')\n# fig.show()\n\n# fig = px.bar(temp, x=\"Date\", y=\"Deaths\", color='Country\/Region',\n#              title='Number of new death case reported outside China everyday')\n# fig.show()\n\n# fig = px.bar(temp[temp['Country\/Region']!='China'], x=\"Date\", y=\"Deaths\", color='Country\/Region',\n#              title='Number of new death case reported outside China everyday')\n# fig.show()","d8d03890":"gdf = full_table.groupby(['Date', 'Country\/Region'])['Confirmed', 'Deaths', 'Recovered'].max()\ngdf = gdf.reset_index()\n\ntemp = gdf[gdf['Country\/Region']=='China'].reset_index()\ntemp = temp.melt(id_vars='Date', value_vars=['Confirmed', 'Deaths', 'Recovered'],\n                var_name='Case', value_name='Count')\nfig = px.bar(temp, x=\"Date\", y=\"Count\", color='Case', facet_col=\"Case\",\n            title='China', color_discrete_sequence=[cnf, dth, rec])\nfig.show()\n\ntemp = gdf[gdf['Country\/Region']!='China'].groupby('Date').sum().reset_index()\ntemp = temp.melt(id_vars='Date', value_vars=['Confirmed', 'Deaths', 'Recovered'],\n                var_name='Case', value_name='Count')\nfig = px.bar(temp, x=\"Date\", y=\"Count\", color='Case', facet_col=\"Case\",\n             title='ROW', color_discrete_sequence=[cnf, dth, rec])\nfig.show()","35f18d7c":"def location(row):\n    if row['Country\/Region']=='China':\n        if row['Province\/State']=='Hubei':\n            return 'Hubei'\n        else:\n            return 'Other Chinese Provinces'\n    else:\n        return 'Rest of the World'\n\ntemp = full_table.copy()\ntemp['Region'] = temp.apply(location, axis=1)\ntemp['Date'] = temp['Date'].dt.strftime('%Y-%m-%d')\ntemp = temp.groupby(['Region', 'Date'])['Confirmed', 'Deaths', 'Recovered'].sum().reset_index()\ntemp = temp.melt(id_vars=['Region', 'Date'], value_vars=['Confirmed', 'Deaths', 'Recovered'], \n                 var_name='Case', value_name='Count').sort_values('Count')\n# temp = temp.sort_values(['Date', 'Region', 'Case']).reset_index()\ntemp.head()\n\nfig = px.bar(temp, y='Region', x='Count', color='Case', barmode='group', orientation='h',\n             text='Count', title='Hubei - China - World', animation_frame='Date',\n             color_discrete_sequence= [dth, rec, cnf], range_x=[0, 70000])\nfig.update_traces(textposition='outside')\nfig.update_layout(uniformtext_minsize=8, uniformtext_mode='hide')\nfig.update_layout(yaxis={'categoryorder':'array', \n                         'categoryarray':['Hubei','Other Chinese Provinces','Rest of the World']})\nfig.show()\n\ntemp = full_latest.copy()\ntemp['Region'] = temp.apply(location, axis=1)\ntemp = temp.groupby('Region')['Confirmed', 'Deaths', 'Recovered'].sum().reset_index()\ntemp = temp.melt(id_vars='Region', value_vars=['Confirmed', 'Deaths', 'Recovered'], \n                 var_name='Case', value_name='Count').sort_values('Count')\ntemp.head()\n\nfig = px.bar(temp, y='Region', x='Count', color='Case', barmode='group', orientation='h',\n             text='Count', title='Hubei - China - World', \n             color_discrete_sequence= [dth, rec, cnf])\nfig.update_traces(textposition='outside')\nfig.update_layout(uniformtext_minsize=8, uniformtext_mode='hide')\nfig.show()","eac84a13":"rl = row_latest.groupby('Country\/Region')['Confirmed', 'Deaths', 'Recovered'].sum()\nrl = rl.reset_index().sort_values(by='Confirmed', ascending=False).reset_index(drop=True)\nrl.head().style.background_gradient(cmap='rainbow')\n\nncl = rl.copy()\nncl['Affected'] = ncl['Confirmed'] - ncl['Deaths'] - ncl['Recovered']\nncl = ncl.melt(id_vars=\"Country\/Region\", value_vars=['Affected', 'Recovered', 'Deaths'])\n\nfig = px.bar(ncl.sort_values(['variable', 'value']), \n             x=\"Country\/Region\", y=\"value\", color='variable', orientation='v', height=800,\n             title='Number of Cases outside China', color_discrete_sequence=[act, dth, rec])\nfig.update_layout(uniformtext_minsize=8, uniformtext_mode='hide')\nfig.show()\n\n# ------------------------------------------\n\ncl = china_latest.groupby('Province\/State')['Confirmed', 'Deaths', 'Recovered'].sum()\ncl = cl.reset_index().sort_values(by='Confirmed', ascending=False).reset_index(drop=True)\n# cl.head().style.background_gradient(cmap='rainbow')\n\nncl = cl.copy()\nncl['Affected'] = ncl['Confirmed'] - ncl['Deaths'] - ncl['Recovered']\nncl = ncl.melt(id_vars=\"Province\/State\", value_vars=['Affected', 'Recovered', 'Deaths'])\n\nfig = px.bar(ncl.sort_values(['variable', 'value']), \n             y=\"Province\/State\", x=\"value\", color='variable', orientation='h', height=800,\n             title='Number of Cases in China', color_discrete_sequence=[act, dth, rec])\nfig.update_layout(uniformtext_minsize=8, uniformtext_mode='hide')\nfig.show()","8b48542e":"# fig = px.treemap(china_latest.sort_values(by='Confirmed', ascending=False).reset_index(drop=True), \n#                  path=[\"Province\/State\"], values=\"Confirmed\",\n#                  title='Number of Confirmed Cases in Chinese Provinces',\n#                  color_discrete_sequence = px.colors.qualitative.Prism)\n# fig.show()\n\n# fig = px.treemap(china_latest.sort_values(by='Deaths', ascending=False).reset_index(drop=True), \n#                  path=[\"Province\/State\"], values=\"Deaths\", \n#                  title='Number of Deaths Reported in Chinese Provinces',\n#                  color_discrete_sequence = px.colors.qualitative.Prism)\n# fig.show()\n\n# fig = px.treemap(china_latest.sort_values(by='Recovered', ascending=False).reset_index(drop=True), \n#                  path=[\"Province\/State\"], values=\"Recovered\", \n#                  title='Number of Recovered Cases in Chinese Provinces',\n#                  color_discrete_sequence = px.colors.qualitative.Prism)\n# fig.show()\n\n# # ----------------------------------------------------------------------------\n\n# fig = px.treemap(row_latest, path=[\"Country\/Region\"], values=\"Confirmed\", \n#                  title='Number of Confirmed Cases outside china',\n#                  color_discrete_sequence = px.colors.qualitative.Pastel)\n# fig.show()\n\n# fig = px.treemap(row_latest, path=[\"Country\/Region\"], values=\"Deaths\", \n#                  title='Number of Deaths outside china',\n#                  color_discrete_sequence = px.colors.qualitative.Pastel)\n# fig.show()\n\n# fig = px.treemap(row_latest, path=[\"Country\/Region\"], values=\"Recovered\", \n#                  title='Number of Recovered Cases outside china',\n#                  color_discrete_sequence = px.colors.qualitative.Pastel)\n# fig.show()","2c6a2035":"temp = full_table.groupby(['Date', 'Country\/Region'])['Confirmed'].sum()\ntemp = temp.reset_index().sort_values(by=['Date', 'Country\/Region'])\n\nplt.style.use('seaborn')\ng = sns.FacetGrid(temp, col=\"Country\/Region\", hue=\"Country\/Region\", \n                  sharey=False, col_wrap=5)\ng = g.map(plt.plot, \"Date\", \"Confirmed\")\ng.set_xticklabels(rotation=90)\nplt.show()","b56ecc60":"temp = full_table.groupby(['Country\/Region', 'Date', ])['Confirmed', 'Deaths', 'Recovered']\ntemp = temp.sum().diff().reset_index()\n\nmask = temp['Country\/Region'] != temp['Country\/Region'].shift(1)\n\ntemp.loc[mask, 'Confirmed'] = np.nan\ntemp.loc[mask, 'Deaths'] = np.nan\ntemp.loc[mask, 'Recovered'] = np.nan\n\nplt.style.use('seaborn')\ng = sns.FacetGrid(temp, col=\"Country\/Region\", hue=\"Country\/Region\", \n                  sharey=False, col_wrap=5)\ng = g.map(sns.lineplot, \"Date\", \"Confirmed\")\ng.set_xticklabels(rotation=90)\nplt.show()","5a683426":"temp = full_table.groupby('Date')['Confirmed'].sum()\ntemp = temp.diff()\n\nplt.figure(figsize=(20, 5))\nax = calmap.yearplot(temp, fillcolor='white', cmap='Reds', linewidth=0.5)","cbc27ec7":"spread = full_table[full_table['Confirmed']!=0].groupby('Date')\nspread = spread['Country\/Region'].unique().apply(len).diff()\n\nplt.figure(figsize=(20, 5))\nax = calmap.yearplot(spread, fillcolor='white', cmap='Greens', linewidth=0.5)","95d34f46":"epidemics = pd.DataFrame({\n    'epidemic' : ['COVID-19', 'SARS', 'EBOLA', 'MERS', 'H1N1'],\n    'start_year' : [2019, 2003, 2014, 2012, 2009],\n    'end_year' : [2020, 2004, 2016, 2017, 2010],\n    'confirmed' : [80000, 8096, 28646, 2494, 6724149],\n    'deaths' : [2750, 774, 11323, 858, 19654]\n})\n\nepidemics['mortality'] = round((epidemics['deaths']\/epidemics['confirmed'])*100, 2)\n\nepidemics.head()","f33c2d50":"temp = epidemics.melt(id_vars='epidemic', value_vars=['confirmed', 'deaths', 'mortality'],\n                      var_name='Case', value_name='Value')\n\nfig = px.bar(temp, x=\"epidemic\", y=\"Value\", color='epidemic', text='Value', facet_col=\"Case\",\n             color_discrete_sequence = px.colors.qualitative.Bold)\nfig.update_traces(textposition='outside')\nfig.update_layout(uniformtext_minsize=8, uniformtext_mode='hide')\nfig.update_yaxes(showticklabels=False)\nfig.layout.yaxis2.update(matches=None)\nfig.layout.yaxis3.update(matches=None)\nfig.show()","9a82793b":"### Latest Complete Data","08207d48":"### Countries with deaths reported","b15b6824":"### Diamond Princess cruise ship\n\n* On *20 January 2020*, an 80-year-old passenger from Hong Kong embarked in **Yokohama**, later tested positive for COVID-19 on *1 February*.    \n* On *4 February*, the ship was in Japanese waters when **10 passengers were diagnosed with COVID-19**. \n* The **ship was quarantined** on *4 February 2020* in the **Port of Yokohama in Japan**. \n>* The infections included at least 138 from India (including 132 crew and 6 passengers), 35 Filipinos, \n>* 32 Canadians, 24 Australians, 13 Americans, 4 Indonesians, 4 Malaysians,and 2 Britons. \n\n* Home countries arranged to evacuate their citizens and quarantine them further in their own countries.\n* As of *5 March*, **at least 696** out of the 3,711 passengers and crew had **tested positive** for the virus.\n* As of *7 March*, there had been **at least 7 deaths**\n\n### Grand Princess Ship\n\n* Another **Grand-class ship owned by Princess Cruises**, also experienced an outbreak of the disease\n* **Two of its passengers** fell ill after a cruise **from San Francisco to Mexico** in February 2020, and one of them died","a9551d45":"# Preprocessing","cc85277e":"# Calander map","4b08e6a7":"https:\/\/www.kaggle.com\/imdevskp\/covid19-vs-sars-vs-mers-vs-ebola-vs-h1n1\n\n","09316992":"# Corona Virus","e3910320":"# Maps","3ceb9396":"# Latest Data","6f3d594f":"# Chinese province wise data","f1d9f6f8":"### Install","e3f3b52a":"# Top 20 Countries","ef7cea3e":"# Country Wise","5d4ec263":"# Proportion of Cases","e3aa803b":"### Cleaning Data","72b9633a":"### Derived Tables","6ca5dd0f":"# Date vs","6dd10e62":"# Recovery and mortality rate over time","9a7f1179":"### Latest Condensed Data","735c4e5a":"### Number of new cases every day","a6aa66e1":"### Countries with no cases recovered","266ecb9b":"### New cases","61545bbf":"# COVID-19","3768210d":"# Dataset","89a0be90":"### Provinces with no cases recovered","d2d5faec":"# No. of places to which COVID-19 spread","1eb14180":"### Countries with all the cases recovered","eaad15ee":"* Coronaviruses are **zoonotic** viruses (means transmitted between animals and people).  \n* Symptoms include from fever, cough, respiratory symptoms, and breathing difficulties. \n* In severe cases, it can cause pneumonia, severe acute respiratory syndrome (SARS), kidney failure and even death.\n\n* A **novel coronavirus (nCoV)** is a new strain that has not been previously identified in humans.","668f83e6":"# Libraries","fb04fa55":"### Number of new countries every day","8d5a3461":"### Import","d51096b6":"### Confirmed cases","6df7af31":"# Country wise Data","a64a38e6":"# Ships","d5d57937":"# Analysis on other epidemics","e9b710a3":"# Hubei - China - World","e576f3b4":"### Provinces with all cases died","c5b6eb5d":"https:\/\/www.kaggle.com\/imdevskp\/mers-outbreak-analysis  \nhttps:\/\/www.kaggle.com\/imdevskp\/sars-2003-outbreak-analysis  \nhttps:\/\/www.kaggle.com\/imdevskp\/western-africa-ebola-outbreak-analysis\n","1781e763":"### In each country","faf51a47":"### Countries with no affected case anymore","32b050b6":"### In each provinces","adc999f7":"# China vs ROW","cfeae6ce":"# Composition of Cases","106f7d02":"### Provinces with no affected cases anymore","103ee1ef":"# Cases over the time","377c7b2c":"### Across the world","fd2bdeed":"# Comparison with other epidemics","12dae1b8":"### Countries with all cases died","490079ef":"### Provinces with all the cases recovered","9d607959":"* Corona Virus Disease 2019\n* Caused by a **SARS-COV-2** corona virus.  \n* First identified in **Wuhan, Hubei, China**.  \n* Earliest reported symptoms occurred on **1 December 2019**. \n* First cases were linked to contact with the Huanan Seafood Wholesale Market, which sold live animals. \n* On 30 January the WHO declared the outbreak to be a Public Health Emergency of International Concern "}}