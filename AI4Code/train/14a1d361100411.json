{"cell_type":{"b078aeb0":"code","15d2b768":"code","6ac56bd9":"code","701f47db":"code","bed68191":"code","f178c090":"code","0afbd68c":"code","807b8672":"code","c30425ca":"code","821f4092":"code","dc7eac34":"code","c91ae104":"code","e01f67a3":"code","ebce1873":"code","1bb65407":"code","5f0b5cef":"code","427097e7":"code","a536a0c1":"code","43eaaaf4":"code","84b6ce47":"code","bedde472":"code","6b0929d3":"markdown","de05616e":"markdown","07b7b508":"markdown","4b98397e":"markdown","94c05407":"markdown","140dea7a":"markdown","41e35b49":"markdown","3cf79903":"markdown","dede6376":"markdown"},"source":{"b078aeb0":"import numpy as np \nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport glob\nfrom tensorflow.keras.preprocessing.image import ImageDataGenerator\nfrom tensorflow.keras.callbacks import ReduceLROnPlateau\nimport tensorflow as tf\nfrom tensorflow.keras.models import Sequential\nfrom tensorflow.keras.layers import Dense,BatchNormalization\nfrom sklearn.model_selection import train_test_split\nfrom tensorflow.keras.callbacks import Callback\nfrom tensorflow.keras.layers import Dropout\nfrom tensorflow.keras.regularizers import l1\nfrom tensorflow.keras import regularizers\nfrom tensorflow.keras.models import Sequential\nfrom tensorflow.keras.layers import Flatten, Dense, Conv2D, MaxPooling2D, BatchNormalization, Dropout,LayerNormalization\nimport sklearn\nfrom sklearn.model_selection import train_test_split\nfrom tensorflow.keras.layers import Conv2D, Dense, Flatten, MaxPool2D, Dropout, SpatialDropout2D, BatchNormalization, LayerNormalization\nsns.set(style='white', context='notebook', palette='deep')","15d2b768":"import os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))","6ac56bd9":"train=pd.read_csv('\/kaggle\/input\/digit-recognizer\/train.csv')\ntest=pd.read_csv('\/kaggle\/input\/digit-recognizer\/test.csv')\ntrain.head()","701f47db":"y=train['label']\ny.head()","bed68191":"X=train.drop('label',axis=1)\nX.head()","f178c090":"X=X\/255\ntest=test\/255","0afbd68c":"X= X.values.reshape(-1,28,28,1)\ntest = test.values.reshape(-1,28,28,1)","807b8672":"X_train,X_val,y_train,y_val=train_test_split(X,y,test_size=0.1)","c30425ca":"model=Sequential([\n    Conv2D(32,(3,3),input_shape=(28,28,1),activation='relu',padding='same'),\n    BatchNormalization(),\n    SpatialDropout2D(0.25),\n    Conv2D(32,(3,3),activation='relu',padding='same'),\n    BatchNormalization(),\n    SpatialDropout2D(0.25),\n    \n    Conv2D(32,(3,3),activation='relu',padding='same'),\n    BatchNormalization(),\n    SpatialDropout2D(0.25),\n    Conv2D(32,(5,5),strides=2,activation='relu',padding='same'),\n    BatchNormalization(),\n    SpatialDropout2D(0.25),\n    \n    Conv2D(64,(3,3),activation='relu',padding='same'),\n    BatchNormalization(),\n    SpatialDropout2D(0.25),\n    Conv2D(32,(3,3),activation='relu',padding='same'),\n    BatchNormalization(),\n    SpatialDropout2D(0.25),\n    \n    \n    Conv2D(64,(3,3),activation='relu',padding='same'),\n    BatchNormalization(),\n    SpatialDropout2D(0.25),\n    Conv2D(64,(5,5),strides=2,activation='relu',padding='same'),\n    BatchNormalization(),\n    SpatialDropout2D(0.25),  \n    \n    Conv2D(128,(4,4),activation='relu',kernel_regularizer=l1(5e-4),padding='same'),\n    Conv2D(8,(3,3),activation='relu',padding='same'),\n    BatchNormalization(),\n    SpatialDropout2D(0.25),\n    Flatten(),\n    Dense(128,activation='relu'),\n    Dense(10,activation='softmax')\n])","821f4092":"model.summary()","dc7eac34":"from tensorflow.keras.optimizers import Adam,RMSprop\nopt=RMSprop(\n    learning_rate=0.001,\n    rho=0.9,\n    momentum=0,\n    epsilon=1e-08,\n    centered=False,\n    name=\"RMSprop\"\n)\n\nmodel.compile(loss='sparse_categorical_crossentropy',optimizer=opt,metrics=['accuracy'])","c91ae104":"learning_rate_reduction = ReduceLROnPlateau(monitor='val_accuracy', \n                                            patience=3, \n                                            verbose=1, \n                                            factor=0.5, \n                                            min_lr=0.00001)","e01f67a3":"datagen = ImageDataGenerator(\n        featurewise_center=False,  # set input mean to 0 over the dataset\n        samplewise_center=False,  # set each sample mean to 0\n        featurewise_std_normalization=False,  # divide inputs by std of the dataset\n        samplewise_std_normalization=False,  # divide each input by its std\n        zca_whitening=False,  # apply ZCA whitening\n        rotation_range=10,  # randomly rotate images in the range (degrees, 0 to 180)\n        zoom_range = 0.1, # Randomly zoom image \n        width_shift_range=0.1,  # randomly shift images horizontally (fraction of total width)\n        height_shift_range=0.1,  # randomly shift images vertically (fraction of total height)\n        horizontal_flip=False,  # randomly flip images\n        vertical_flip=False)  # randomly flip images\n\n\ndatagen.fit(X)","ebce1873":"history = model.fit_generator(datagen.flow(X,y, batch_size=125),\n                              epochs = 30, validation_data = (X_val,y_val),\n                              verbose = 1, steps_per_epoch=X_train.shape[0] \/\/ 125\n                              , callbacks=[learning_rate_reduction])","1bb65407":"test_labels=model.predict(test)\ntest_labels","5f0b5cef":"def plotLearningCurve(history,epochs):\n    epochRange = range(1,epochs+1)\n    plt.plot(epochRange,history.history['accuracy'])\n    plt.plot(epochRange,history.history['val_accuracy'])\n    plt.title('Model Accuracy')\n    plt.xlabel('Epoch')\n    plt.ylabel('Accuracy')\n    plt.legend(['Train','Validation'],loc='upper left')\n    plt.show()\n\n    plt.plot(epochRange,history.history['loss'])\n    plt.plot(epochRange,history.history['val_loss'])\n    plt.title('Model Loss')\n    plt.xlabel('Epoch')\n    plt.ylabel('Loss')\n    plt.legend(['Train','Validation'],loc='upper left')\n    plt.show()","427097e7":"plotLearningCurve(history,30)","a536a0c1":"results = np.argmax(test_labels,axis = 1)\nresults = pd.Series(results,name=\"Label\")\nsubmission = pd.concat([pd.Series(range(1,28001),name = \"ImageId\"),results],axis = 1)","43eaaaf4":"submission.to_csv(\"submission_final.csv\",index=False)","84b6ce47":"from IPython.display import FileLink\nFileLink(\"submission_final.csv\")","bedde472":"results.head()","6b0929d3":"# Submission File.","de05616e":"# Importing The Required Libraries.","07b7b508":"## For faster training","4b98397e":"# Visualizing Loss And Accuracy over the Epochs.","94c05407":"# Data Augmentation","140dea7a":"# Predicting Labels.","41e35b49":"## Splitting The Data","3cf79903":"# Loading The Dataset.","dede6376":"## since conv2d requires 3d input"}}