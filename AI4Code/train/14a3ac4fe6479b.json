{"cell_type":{"1a3008cc":"code","546a71d6":"code","68d09d6c":"code","b5e848cc":"code","b27582f2":"code","04f9ef02":"code","968e6967":"code","df7ca5ba":"code","2437b8f4":"code","9f605f5c":"code","763925e8":"code","86b38749":"code","e266ae85":"code","275c35c0":"code","58d60dd9":"code","9cde39af":"markdown","2f83c40a":"markdown","c1bd3c15":"markdown","ce4b5957":"markdown","dcb4da9f":"markdown"},"source":{"1a3008cc":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport seaborn as sns\n\n# Supress unnecessary warnings so that presentation looks clean\nimport warnings\n#warnings.filterwarnings(\"ignore\")","546a71d6":"# data frame de treino 1\ndf = pd.read_csv('..\/input\/zoo-train.csv',sep=',', index_col='animal_name')","68d09d6c":"#numero de registros e colunas do dataframe\ndf.shape","b5e848cc":"df.dtypes","b27582f2":"#Substitituindo letras 'n' e 'y' por 0 e 1\ndf = df.replace ('y', 1)\ndf= df.replace('n',0)","04f9ef02":"#Visualiza\u00e7\u00e3o grafica por classe de animal\nsns.countplot(df['class_type'],label=\"Count\")","968e6967":"# Correlacao das variaveis do dataframe com mapa de calor\nimport matplotlib.pyplot as plt\n\nfig, ax = plt.subplots(figsize=(18,10)) \n\n# removendo a coluna class_type antes de fazer a correla\u00e7\u00e3o \ncorr = df.iloc[:,:-1].corr()\n\nsns.heatmap(corr, cbar = True,  square = True, annot=True, fmt= '.2f',annot_kws={'size': 11}\n            , linewidths=0.1, linecolor='white', ax=ax)","df7ca5ba":"# Selecionando as variaveis que tem maior rela\u00e7\u00e3o \"positiva > 0,50\" e \"negativa < -0,50\"\n# unique para nao repetir o nome das colunas\nselectedColumns = np.unique(['hair', 'eggs', 'hair', 'milk', 'feathers', \n                                 'airborne',\n           'toothed', 'eggs', 'toothed', 'aquatic','breathes', \n               'toothed', 'airborne','backbone', 'toothed', 'backbone', \n           'tail', 'toothed','milk', 'breathes', 'aquatic',\n           'breathes', 'fins', 'fins', 'aquatic', 'fins', \n           'legs', 'catsize', 'milk', 'catsize', 'eggs'])\n\n#venomouns, predator ficaram de fora\n\n#dataFrame com colunas espec\u00edficas selecionadas.\ndfSC = df[selectedColumns]","2437b8f4":"#modelo selecionado SVC\nfrom sklearn import svm\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn import svm\nfrom sklearn.naive_bayes import GaussianNB\n\nfrom sklearn.discriminant_analysis import LinearDiscriminantAnalysis\nfrom sklearn.ensemble import AdaBoostClassifier\nfrom sklearn.ensemble import GradientBoostingClassifier\nfrom sklearn.linear_model import Perceptron\nfrom sklearn.linear_model import Ridge\nfrom sklearn.linear_model import SGDClassifier\nfrom sklearn.neural_network import MLPClassifier\nfrom sklearn.svm import LinearSVC\nfrom sklearn.svm import SVC\nfrom sklearn.tree import DecisionTreeClassifier","9f605f5c":"models = []\n#dicionario de parametros para cada modelo\nparam_grid = {'kernel':('linear', 'rbf'), 'C':[1, 20]}\n#dict(kernel=['linear', 'rbf'], gamma=['scale'], C=range(1,10))\nmodels.append(('Support Vector Machines (SVM) - linear', svm.SVC(gamma=\"scale\"), param_grid ))\n\nparam_grid = dict(solver=['newton-cg', 'sag', 'saga', 'lbfgs'], max_iter=[1000])\nmodels.append(('Logistic Regression', LogisticRegression(), param_grid ))\n\nparam_grid = dict(n_neighbors=range(1,31), weights=['uniform', 'distance'])\nmodels.append(('KNeighborsClassifier', KNeighborsClassifier(), param_grid ))\n\nparam_grid = dict(criterion=['gini','entropy'], max_depth=range(1,10), min_samples_leaf=range(1,15))\nmodels.append(('DecisionTreeClassifier', DecisionTreeClassifier(), param_grid ))\n\n#n_estimators=[10, 20, 30, 40, 50, 60, 70, 80, 90, 100] lento\nparam_grid = dict(n_estimators=[100],max_depth=range(1,10), min_samples_leaf=range(1,15) )\nmodels.append(('RandomForestClassifier', RandomForestClassifier(), param_grid ))\n\nparam_grid = dict(var_smoothing=[1e-9])\nmodels.append(('Gaussian Na\u00efve Bayes', GaussianNB(), param_grid))","763925e8":"# definir dados de entrada\nX = df.drop(['class_type'], axis=1) # tudo, exceto a coluna alvo\n# X = dfSC = df[selectedColumns] # colunas filtradas\ny = df['class_type'] # apenas a coluna alvo\n\n# importando gridSearch\nfrom sklearn.model_selection import GridSearchCV\n\ngrids = []\n\nnames = []\nbestScores = []\nbestParams = []\nbestStimators = []\n\nfor name, model, pGrid in models:\n    grid = GridSearchCV(model, pGrid, cv=10, scoring='accuracy')\n    grid.fit(X, y)  \n    names.append(name)\n    bestScores.append(grid.best_score_)\n    bestParams.append(grid.best_params_)\n    bestStimators.append(grid.best_estimator_)\n\n    \nresults = pd.DataFrame({'Model': names, 'Score': bestScores})  \n\nprint(results)","86b38749":"\nprint (bestParams[2])","e266ae85":"#pega modelos melhores classificados dataframe (results)\ntopModel = svm.SVC(gamma=\"scale\", C=1, kernel='linear')\n# = KNeighborsClassifier(n_neighbors=1, weights='uniform')\n\n# Treinamento do modelo\ntopModel.fit(X, y)\n\n#Realizando a previsao arquivo de teste\ndfP = pd.read_csv('..\/input\/zoo-test.csv',sep=',', index_col='animal_name')\n\n#Substitituindo letras 'n' e 'y' por 0 e 1\ndfP = dfP.replace ('y', 1)\ndfP = dfP.replace('n',0)\n\nxP = dfP\nyP = topModel.predict(xP)\n\n# nome do arquivo a ser gerado\nfileName = models[results.index[0]][0]\n\ntopModel.score(xP, yP)","275c35c0":"#nome do Arquivo\nfileName","58d60dd9":"    \n# gerar dados de envio (submiss\u00e3o)\n    submission = pd.DataFrame({\n      'animal_name': xP.index,\n      'class_type': yP\n    })\n    \n    submission.set_index('animal_name', inplace=True)\n    submission.to_csv('zoo svm.csv')\n","9cde39af":"**Criando um array para armazenar v\u00e1rios modelo de aprendizado supervisionado para testes de score**\n\nO objetivo \u00e9 idenficar qual modelo est\u00e1 performando melhor\nUsando - gridSearchCV","2f83c40a":"# 1 - An\u00e1lise explorat\u00f3ria","c1bd3c15":"# 2 - Testandos modelos de classifica\u00e7\u00e3o","ce4b5957":"# 4 - Gerando o arquivo de resultado","dcb4da9f":"# 3 - Testando o modelo selecionado"}}