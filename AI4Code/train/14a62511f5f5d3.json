{"cell_type":{"5af80dae":"code","a1505d63":"code","3cb86f2b":"code","ffa2ed5d":"code","a3259f49":"code","109c1fac":"code","02636fc9":"code","53d04473":"code","527546ab":"code","ba4b0fbb":"code","3235f4e5":"code","4257c918":"code","37e809a6":"code","78b00422":"code","9123031b":"code","a32c4908":"code","3c680c75":"markdown","fb3d2b8f":"markdown"},"source":{"5af80dae":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","a1505d63":"!pip install lifetimes\n!pip install openpyxl\n\nimport matplotlib.pyplot as plt\nimport datetime as dt\nfrom lifetimes import BetaGeoFitter\nfrom lifetimes import GammaGammaFitter\nfrom lifetimes.plotting import plot_period_transactions\nfrom sklearn.preprocessing import MinMaxScaler","3cb86f2b":"pd.set_option('display.max_columns', None)\npd.set_option('display.width', 500)\npd.set_option('display.float_format', lambda x: '%.4f' % x)","ffa2ed5d":"def outlier_thresholds(dataframe, variable):\n    quartile1 = dataframe[variable].quantile(0.01)\n    quartile3 = dataframe[variable].quantile(0.99)\n    interquantile_range = quartile3 - quartile1\n    up_limit = quartile3 + 1.5 * interquantile_range\n    low_limit = quartile1 - 1.5 * interquantile_range\n    return low_limit, up_limit","a3259f49":"def replace_with_thresholds(dataframe, variable):\n    low_limit, up_limit = outlier_thresholds(dataframe, variable)\n    dataframe.loc[(dataframe[variable] < low_limit), variable] = low_limit\n    dataframe.loc[(dataframe[variable] > up_limit), variable] = up_limit","109c1fac":"df = pd.read_excel(r\"..\/input\/online-retail-ii-data-set-from-ml-repository\/online_retail_II.xlsx\")\n\ndf_ = df.copy()","02636fc9":"df.describe().T","53d04473":"df.dropna(inplace=True)","527546ab":"df = df[df[\"Quantity\"] > 0]\ndf = df[df[\"Price\"] > 0]","ba4b0fbb":"replace_with_thresholds(df, \"Quantity\")\nreplace_with_thresholds(df, \"Price\")","3235f4e5":"df.describe().T","4257c918":"df[\"TotalPrice\"] = df[\"Quantity\"] * df[\"Price\"]","37e809a6":"today_date = dt.datetime(2011, 12, 11)","78b00422":"def create_cltv_p(dataframe, month=3):\n    # Data Pre-processing\n    dataframe.dropna(inplace=True)\n    dataframe = dataframe[dataframe[\"Quantity\"] > 0]\n    dataframe = dataframe[dataframe[\"Price\"] > 0]\n    replace_with_thresholds(dataframe, \"Quantity\")\n    replace_with_thresholds(dataframe, \"Price\")\n    dataframe[\"TotalPrice\"] = dataframe[\"Quantity\"] * dataframe[\"Price\"]\n    today_date = dt.datetime(2011, 12, 11)\n\n    cltv_df = dataframe.groupby('Customer ID').agg(\n        {'InvoiceDate': [lambda InvoiceDate: (InvoiceDate.max() - InvoiceDate.min()).days,\n                         lambda InvoiceDate: (today_date - InvoiceDate.min()).days],\n         'Invoice': lambda Invoice: Invoice.nunique(),\n         'TotalPrice': lambda TotalPrice: TotalPrice.sum()})\n\n    cltv_df.columns = cltv_df.columns.droplevel(0)\n    cltv_df.columns = ['recency', 'T', 'frequency', 'monetary']\n    cltv_df[\"monetary\"] = cltv_df[\"monetary\"] \/ cltv_df[\"frequency\"]\n    cltv_df = cltv_df[(cltv_df['frequency'] > 1)]\n    cltv_df[\"recency\"] = cltv_df[\"recency\"] \/ 7\n    cltv_df[\"T\"] = cltv_df[\"T\"] \/ 7\n\n    # Establishment of BG-NBD Model\n    bgf = BetaGeoFitter(penalizer_coef=0.001)\n    bgf.fit(cltv_df['frequency'],\n            cltv_df['recency'],\n            cltv_df['T'])\n\n    cltv_df[\"expected_purc_1_week\"] = bgf.predict(1,\n                                                  cltv_df['frequency'],\n                                                  cltv_df['recency'],\n                                                  cltv_df['T'])\n\n    cltv_df[\"expected_purc_1_month\"] = bgf.predict(4,\n                                                   cltv_df['frequency'],\n                                                   cltv_df['recency'],\n                                                   cltv_df['T'])\n\n    cltv_df[\"expected_purc_3_month\"] = bgf.predict(12,\n                                                   cltv_df['frequency'],\n                                                   cltv_df['recency'],\n                                                   cltv_df['T'])\n\n    # Establishing the GAMMA-GAMMA Model\n    ggf = GammaGammaFitter(penalizer_coef=0.01)\n    ggf.fit(cltv_df['frequency'], cltv_df['monetary'])\n    cltv_df[\"expected_average_profit\"] = ggf.conditional_expected_average_profit(cltv_df['frequency'],\n                                                                                 cltv_df['monetary'])\n\n    # Calculation of CLTV with BG-NBD and GG model.\n    cltv = ggf.customer_lifetime_value(bgf,\n                                       cltv_df['frequency'],\n                                       cltv_df['recency'],\n                                       cltv_df['T'],\n                                       cltv_df['monetary'],\n                                       time=month,  # 3 ayl\u0131k\n                                       freq=\"W\",  # T'nin frekans bilgisi.\n                                       discount_rate=0.01)\n\n    cltv = cltv.reset_index()\n    cltv_final = cltv_df.merge(cltv, on=\"Customer ID\", how=\"left\")\n    cltv_final[\"segment\"] = pd.qcut(cltv_final[\"clv\"], 4, labels=[\"D\", \"C\", \"B\", \"A\"])\n\n    return cltv_final","9123031b":"cltv_final2 = create_cltv_p(df)","a32c4908":"cltv_final2.head()","3c680c75":"**Before Preprocessing**","fb3d2b8f":"***Preparation of Lifetime Data Structure***\n\nrecency        : The time elapsed since the last purchase. Weekly. (according to analysis day before, here is user specific)\n\nT              : How long before the analysis date was the first purchase made. Weekly.\n\nfrequency      : total number of repeat purchases (frequency>1)\n\nmonetary_value : average earnings per purchase"}}