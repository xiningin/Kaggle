{"cell_type":{"6b2df3d8":"code","892aaf7e":"code","b6aa9291":"code","46e07ec0":"code","a7a43caa":"code","f102cc07":"code","bb2561ca":"code","b48653a2":"code","5a3b6904":"code","8d1847ab":"code","f14763d5":"code","15e72f54":"code","8f04d017":"code","477854f7":"code","06ea8e98":"code","e1b35249":"code","7c3f1f44":"code","5f3f3b74":"code","549cb242":"code","5df97e43":"code","59ff7203":"code","a51443a0":"code","54aedc54":"code","0d4006e5":"code","39e6d2c2":"code","ed77cf56":"code","01d24b61":"code","6643593c":"code","29eec05e":"code","b7cd5360":"code","cf051f8c":"code","80c4a68a":"code","2d3d7bc4":"code","6a3789af":"code","f722f402":"code","55dffd48":"code","7a10e0ab":"code","b488d9b9":"code","4ddf4bb6":"code","78576414":"code","13891cb4":"code","60459bf3":"code","e8a998e6":"code","1f1cfa55":"code","1583ed02":"code","5d737f8b":"code","7a64b9ce":"code","4afa5186":"code","baa97732":"code","6ec9882f":"code","7f885a7c":"code","b6f14038":"code","a2e23810":"code","475bddb6":"code","e35181c4":"code","cb15aaf8":"code","889afbcb":"code","22ef24ad":"code","b5ddf08c":"code","41ebbf95":"code","fccd05c8":"code","83afe74d":"code","998a51ab":"code","3310f1f1":"code","669da2c3":"code","9651c1f8":"code","b8bdaca4":"code","f0911723":"code","9a53555e":"code","0ed9a67b":"code","287e9182":"code","015b7bea":"code","2a50260b":"code","251c5d40":"code","e3a73b73":"code","ddab37fd":"code","9e0b9610":"code","a004fafe":"code","ef6df140":"code","26da8c7a":"code","5a1c98d3":"code","237ed53d":"code","d48c1f24":"code","cb8104e2":"code","4c964237":"code","58a06dca":"code","82bd23fa":"markdown","185c8043":"markdown","60bb653a":"markdown","ba85e92c":"markdown","8d1009e4":"markdown","67ee2335":"markdown","62faab28":"markdown","acd42be4":"markdown","35548aa6":"markdown","7e816c6e":"markdown","68827f89":"markdown","b3842f14":"markdown","bba46c8a":"markdown","2beeb3cd":"markdown","6f0b0597":"markdown","c9ac8bef":"markdown","1fafdce7":"markdown","c6d9b750":"markdown","0ed93012":"markdown","79724954":"markdown"},"source":{"6b2df3d8":"import numpy as np \nimport matplotlib.pyplot as plt \nimport matplotlib.colors as mcolors\nimport pandas as pd \nimport random\nimport math\nimport time\n# from sklearn.linear_model import LinearRegression, BayesianRidge\n# from sklearn.model_selection import RandomizedSearchCV, train_test_split\n# from sklearn.preprocessing import PolynomialFeatures\n# from sklearn.tree import DecisionTreeRegressor\n# from sklearn.svm import SVR\n# from sklearn.metrics import mean_squared_error, mean_absolute_error\nimport datetime\nimport operator \nplt.style.use('fivethirtyeight')\n%matplotlib inline ","892aaf7e":"PatientInfo = pd.read_csv(r'..\/input\/PatientInfo.csv')\nPatientInfo_Copy = PatientInfo","b6aa9291":"PatientInfo.isna().sum()","46e07ec0":"PatientInfo.columns","a7a43caa":"PatientInfo[\"disease\"] = PatientInfo[\"disease\"].fillna(\"False\")\nPatientInfo[\"city\"] = PatientInfo[\"city\"].fillna(\"Unknown\")\nPatientInfo[\"country\"] = PatientInfo[\"country\"].fillna(\"Unknown\")\nPatientInfo[\"contact_number\"] = PatientInfo[\"contact_number\"].fillna(\"0\")\nPatientInfo[\"infected_by\"] = PatientInfo[\"infected_by\"].fillna(\"0\")\nPatientInfo[\"deceased_date\"] = PatientInfo[\"deceased_date\"].fillna(\"None\")\nPatientInfo[\"released_date\"] = PatientInfo[\"released_date\"].fillna(\"None\")\nPatientInfo[\"symptom_onset_date\"] = PatientInfo[\"symptom_onset_date\"].fillna(\"None\")\nPatientInfo[\"sex\"] = PatientInfo[\"sex\"].fillna(\"Unknown\")\nPatientInfo[\"infection_case\"] = PatientInfo[\"infection_case\"].fillna(\"Others\")\nPatientInfo.isna().sum()","f102cc07":"PatientInfo = PatientInfo.drop(['global_num','birth_year','infection_order',\n                                'symptom_onset_date','released_date','deceased_date'], axis=1)","bb2561ca":"PatientInfo[\"age\"] = PatientInfo[\"age\"].str.replace(\"s\",\"\").astype(float)","b48653a2":"## Updating null values in age column by using mean number\nindex_NaN_age = list(PatientInfo[\"age\"][PatientInfo[\"age\"].isnull()].index)\nindex_NaN_age\n\nfor i in index_NaN_age :\n    age_med = PatientInfo[\"age\"].mean()\n    age_pred = PatientInfo[\"age\"].mean()\n    if not np.isnan(age_pred) :\n        PatientInfo[\"age\"].iloc[i] = age_pred\n    else :\n        PatientInfo[\"age\"].iloc[i] = age_med","5a3b6904":"# #Converting certain features to categorical form\ncategorical_features = ['sex', 'country','province','city', 'disease',\n                        'infection_case', 'state']\nPatientInfo[categorical_features] = PatientInfo[categorical_features].astype('category')\nPatientInfo.info()","8d1847ab":"# #Converting certain features to Numerical form\nNumerical_features = ['contact_number','infected_by']\nPatientInfo[Numerical_features] = PatientInfo[Numerical_features].astype('int64')\nPatientInfo.info()","f14763d5":"## Converting Date column to Date form\nfrom datetime import datetime, timedelta\nfrom pandas import DataFrame\nPatientInfo['confirmed_date'] = PatientInfo['confirmed_date'].astype('datetime64[ns]') ","15e72f54":"PatientInfo.info()","8f04d017":"import seaborn as sns\n\n# def categorical_eda(df):\n#     \"\"\"Given dataframe, generate EDA of categorical data\"\"\"\n#     print(\"To check: Unique count of non-numeric data\")\n#     print(df.select_dtypes(include=['category']).nunique())\n#     # Plot count distribution of categorical data\n    \n#     for col in df.select_dtypes(include='category').columns:\n#         if df[col].nunique() < 20:\n#             fig = sns.catplot(x=col,hue='state', kind=\"count\", data=df)\n#             fig.set_xticklabels(rotation=90)\n#             plt.show()\n        \n        \n# categorical_eda(PatientInfo)","477854f7":"############# Current Status ################\ng  = sns.factorplot(y=\"age\",x=\"state\",data=PatientInfo,kind=\"bar\", size = 6 , palette = \"muted\")","06ea8e98":"#############  Patients State by age group and province  ###########\ng  = sns.factorplot(y=\"age\",x=\"country\",data=PatientInfo, hue = \"state\", kind=\"bar\", size = 6 ,\n                    palette = \"muted\",height=8.27, aspect=11.7\/5)","e1b35249":"#############  Patients State by age group and province  ###########\nfig,axes = plt.subplots(1,1,figsize=(20,5))\ng = sns.barplot(y=\"age\",x=\"province\",data=PatientInfo,hue = \"state\")","7c3f1f44":"########## Top 20 infected province #############\nfig,axes = plt.subplots(1,1,figsize=(20,5))\nsns.countplot(PatientInfo.province, order = PatientInfo.province.value_counts()[:20].index)\nplt.xticks(rotation = 50)\nplt.show()","5f3f3b74":"########## Top 20 infected cities #############\nfig,axes = plt.subplots(1,1,figsize=(20,5))\nsns.countplot(PatientInfo.city, order = PatientInfo.city.value_counts()[:20].index)\nplt.xticks(rotation = 50)\nplt.show()","549cb242":"#### Most infection casued by Patients ############\nInfected_by = PatientInfo[PatientInfo[\"infected_by\"] != 0 ]\n\nfig,axes = plt.subplots(1,1,figsize=(20,5))\nsns.countplot(Infected_by.infected_by, order = Infected_by.infected_by.value_counts()[:30].index)\nplt.xticks(rotation = 50)\nplt.show()","5df97e43":"######## infection_case Analysis #####\nfig,axes = plt.subplots(1,1,figsize=(20,5))\nsns.countplot(PatientInfo.infection_case, order = PatientInfo.infection_case.value_counts()[:30].index)\nplt.xticks(rotation = 90)\nplt.show()","59ff7203":"Confirmed_Cases = PatientInfo.groupby('confirmed_date').count()\nplt.figure(figsize=(16, 9))\nConfirmed_Case_History = Confirmed_Cases['infection_case'].plot(title = \"Confirmed Case History\")","a51443a0":"Death_History = PatientInfo_Copy[PatientInfo_Copy['state']=='deceased'].groupby('deceased_date').count()\nplt.figure(figsize=(16, 9))\nDeath_Case_History = Death_History['infection_case'].plot(title = \"Death Case History\")","54aedc54":"Released_History = PatientInfo_Copy[PatientInfo_Copy['state']=='released'].groupby('released_date').count()\nplt.figure(figsize=(16, 9))\nReleased_Case_History = Released_History['infection_case'].plot(title = \"Released Case History\")","0d4006e5":"PatientRoute = pd.read_csv('..\/input\/PatientRoute.csv')\nPatientRoute_Copy = PatientRoute","39e6d2c2":"PatientRoute","ed77cf56":"PatientInfo.isna().sum()","01d24b61":"#### Most infection casued by Patients ############\n# Infected_by = PatientInfo[PatientInfo[\"infected_by\"] != 0 ]\n\nfig,axes = plt.subplots(1,1,figsize=(20,5))\nsns.countplot(PatientRoute.patient_id, order = PatientRoute.patient_id.value_counts()[:70].index)\nplt.xticks(rotation = 50)\nplt.show()","6643593c":"#### Most infection casued by Patients ############\n# Infected_by = PatientInfo[PatientInfo[\"infected_by\"] != 0 ]\n\nfig,axes = plt.subplots(1,1,figsize=(20,5))\nsns.countplot(PatientRoute.province, order = PatientRoute.province.value_counts()[:70].index)\nplt.xticks(rotation = 50)\nplt.show()","29eec05e":"#### Most infection_case ############\n# Infected_by = PatientInfo[PatientInfo[\"infected_by\"] != 0 ]\n\nfig,axes = plt.subplots(1,1,figsize=(20,5))\nsns.countplot(PatientRoute.type, order = PatientRoute.type.value_counts()[:70].index)\nplt.xticks(rotation = 50)\nplt.show()","b7cd5360":"#### Most infection casued in city ############\n# Infected_by = PatientInfo[PatientInfo[\"infected_by\"] != 0 ]\n\nfig,axes = plt.subplots(1,1,figsize=(20,5))\nsns.countplot(PatientRoute.city, order = PatientRoute.city.value_counts()[:70].index)\nplt.xticks(rotation = 50)\nplt.show()","cf051f8c":"PatientRoute_History = PatientRoute.groupby('date').count()\nplt.figure(figsize=(16, 9))\nPatientRoute_History = PatientRoute_History['patient_id'].plot(title = \"Patient Gathering History\")","80c4a68a":"PatientRoute_details = PatientRoute.groupby('patient_id').count()\nPatientRoute_details.reset_index(inplace = True) \nPatientRoute_details\n\nPatientRoute_details = PatientRoute_details.drop([ 'global_num', 'date', 'city', 'type',\n       'latitude', 'longitude'], axis=1)\nPatientRoute_details.rename(columns = {'province':'Places_Visited'}, inplace = True)\nresult = pd.merge(PatientInfo,\n                 PatientRoute_details[['patient_id', 'Places_Visited']],\n                 on='patient_id')","2d3d7bc4":"result","6a3789af":"TimeAge = pd.read_csv('..\/input\/TimeAge.csv')\nTimeAge_Copy = TimeAge\nTimeAge['date'] = TimeAge['date'].astype('datetime64[ns]') \nTimeAge.set_index('date')","f722f402":"TimeAge_0 = TimeAge[TimeAge['age'] == '0s'].set_index('date')\nTimeAge_10 = TimeAge[TimeAge['age'] == '10s'].set_index('date')\nTimeAge_20 = TimeAge[TimeAge['age'] == '20s'].set_index('date')\nTimeAge_30 = TimeAge[TimeAge['age'] == '30s'].set_index('date')\nTimeAge_40 = TimeAge[TimeAge['age'] == '40s'].set_index('date')\nTimeAge_50 = TimeAge[TimeAge['age'] == '50s'].set_index('date')\nTimeAge_60 = TimeAge[TimeAge['age'] == '60s'].set_index('date')\nTimeAge_70 = TimeAge[TimeAge['age'] == '70s'].set_index('date')\nTimeAge_80 = TimeAge[TimeAge['age'] == '80s'].set_index('date')\nTimeAge_90 = TimeAge[TimeAge['age'] == '90s'].set_index('date')","55dffd48":"plt.figure(figsize=(16, 9))\nplt.plot(TimeAge_0['confirmed'])\nplt.plot(TimeAge_10['confirmed'])\nplt.plot(TimeAge_20['confirmed'])\nplt.plot(TimeAge_30['confirmed'])\nplt.plot(TimeAge_40['confirmed'])\nplt.plot(TimeAge_50['confirmed'])\nplt.plot(TimeAge_60['confirmed'])\nplt.plot(TimeAge_70['confirmed'])\nplt.plot(TimeAge_80['confirmed'])\nplt.title('Confirmed Coronavirus Cases', size=30)\nplt.xlabel('Time', size=30)\nplt.ylabel('Confirmed Cases', size=30)\nplt.legend(['0s', '10s', '20s', '30s', '40s','50s','60s','70s','80s'], prop={'size': 20})","7a10e0ab":"plt.figure(figsize=(16, 9))\nplt.plot(TimeAge_0['deceased'])\nplt.plot(TimeAge_10['deceased'])\nplt.plot(TimeAge_20['deceased'])\nplt.plot(TimeAge_30['deceased'])\nplt.plot(TimeAge_40['deceased'])\nplt.plot(TimeAge_50['deceased'])\nplt.plot(TimeAge_60['deceased'])\nplt.plot(TimeAge_70['deceased'])\nplt.plot(TimeAge_80['deceased'])\nplt.title('Deaths', size=30)\nplt.xlabel('Time', size=30)\nplt.ylabel('Confirmed Deaths', size=30)\nplt.legend(['0s', '10s', '20s', '30s', '40s','50s','60s','70s','80s'], prop={'size': 20})","b488d9b9":"TimeAge_Copy","4ddf4bb6":"TimeAge_Stat = TimeAge_Copy.groupby('age')['confirmed','deceased'].sum()\nTimeAge_Stat.reset_index(inplace = True) \nTimeAge_Stat[\"age\"] = TimeAge_Stat[\"age\"].str.replace(\"s\",\"\").astype(float)","78576414":"TimeAge_Stat","13891cb4":" ####### Confirmed cases w.r.t. Age ######\ng  = sns.factorplot(y=\"confirmed\",x=\"age\",data=TimeAge_Stat, kind=\"bar\", size = 6 ,\n                    palette = \"muted\",height=8.27, aspect=11.7\/5)\ng  = sns.factorplot(y=\"deceased\",x=\"age\",data=TimeAge_Stat, kind=\"bar\", size = 6 ,\n                    palette = \"muted\",height=8.27, aspect=11.7\/5)","60459bf3":" ####### Deceased cases w.r.t. Age ######\ng  = sns.factorplot(y=\"deceased\",x=\"age\",data=TimeAge_Stat, kind=\"bar\", size = 6 ,\n                    palette = \"muted\",height=8.27, aspect=11.7\/5)","e8a998e6":"### Confirmed cases and Death Comparision ##\n\nindices = TimeAge_Stat.index\nwidth = np.min(np.diff(indices))\/3\n\nfig = plt.figure(figsize=(15,5))\nax = fig.add_subplot(111)\nax.bar(indices-width,TimeAge_Stat['confirmed'],width,color='b',label='-Ymin')\nax.bar(indices,TimeAge_Stat['deceased'],width,color='r',label='Ymax')\nax.set_xlabel('Confimed and deaths')\nplt.show()","1f1cfa55":"Time = pd.read_csv('..\/input\/Time.csv')\nTime_Copy = Time\nTime['date'] = Time['date'].astype('datetime64[ns]') \nTime.set_index('date')","1583ed02":"plt.figure(figsize=(16, 9))\nplt.plot(Time['test'])\nplt.plot(Time['negative'])\nplt.plot(Time['confirmed'])\nplt.plot(Time['released'])\nplt.plot(Time['deceased'])\nplt.title('Test Analysis', size=30)\nplt.xlabel('Time', size=30)\nplt.ylabel('Tests', size=30)\nplt.legend(['test', 'negative', 'confirmed', 'released', 'deceased'], prop={'size': 20})","5d737f8b":"Time_Stat = Time.sum()\nTime_Stat = Time_Stat.to_frame()\nTime_Stat.reset_index(inplace = True) \nTime_Stat.rename(columns = {'index':'Analysis',0: 'Count'}, inplace = True)\ng  = sns.barplot(x='Analysis', y='Count',data=Time_Stat)\n\n#Time_Stat = Time_Copy['negative', 'confirmed'].sum()","7a64b9ce":"TimeGender = pd.read_csv('..\/input\/TimeGender.csv')\nTimeGender\n\nTimeGender_Copy = TimeGender\nTimeGender['date'] = TimeGender['date'].astype('datetime64[ns]') \nTimeGender.set_index('date')","4afa5186":"plt.figure(figsize=(16, 9))\nMaleCases = TimeGender[TimeGender['sex'] == 'male']\nFemaleCases = TimeGender[TimeGender['sex'] == 'female']\nplt.plot(MaleCases['confirmed'])\nplt.plot(FemaleCases['confirmed'])\nplt.title('Test Analysis', size=30)\nplt.xlabel('Time', size=30)\nplt.ylabel('Tests', size=30)\nplt.legend(['Male', 'Female'], prop={'size': 20})","baa97732":"plt.figure(figsize=(16, 9))\nMaleCases = TimeGender[TimeGender['sex'] == 'male']\nFemaleCases = TimeGender[TimeGender['sex'] == 'female']\nplt.plot(MaleCases['deceased'])\nplt.plot(FemaleCases['deceased'])\nplt.title('deceased Analysis', size=30)\nplt.xlabel('Time', size=30)\nplt.ylabel('Tests', size=30)\nplt.legend(['Male', 'Female'], prop={'size': 20})","6ec9882f":"TimeProvince = pd.read_csv('..\/input\/TimeProvince.csv')\nTimeProvince\n\nTimeProvince_Copy = TimeProvince\nTimeProvince['date'] = TimeProvince['date'].astype('datetime64[ns]') \nTimeProvince.set_index('date')","7f885a7c":"TimeProvince_Stat = TimeProvince_Copy.groupby('date')['confirmed','deceased','released'].sum()\nTimeProvince_Stat","b6f14038":"plt.figure(figsize=(16, 9))\nplt.plot(TimeProvince_Stat['confirmed'])\nplt.plot(TimeProvince_Stat['released'])\nplt.plot(TimeProvince_Stat['deceased'])\nplt.title('Test Analysis', size=30)\nplt.xlabel('Time', size=30)\nplt.ylabel('Tests', size=30)\nplt.legend(['Confirmed', 'released','deceased'], prop={'size': 20})","a2e23810":"Province_Stat = TimeProvince_Copy.groupby('province')['confirmed','deceased','released'].max()\nProvince_Stat.reset_index(inplace = True) \nProvince_Stat","475bddb6":"g = sns.factorplot(y=\"confirmed\",x=\"province\",data=Province_Stat, kind=\"bar\", size = 6 ,\n                    palette = \"muted\",height=8.27, aspect=11.7\/3.5)\nplt.xticks(rotation = 90)\n# TimeProvince_Copy","e35181c4":"g = sns.factorplot(y=\"released\",x=\"province\",data=Province_Stat, kind=\"bar\", size = 6 ,\n                    palette = \"muted\",height=8.27, aspect=11.7\/3.5)\nplt.xticks(rotation = 90)\n# TimeProvince_Copy","cb15aaf8":"g = sns.factorplot(y=\"deceased\",x=\"province\",data=Province_Stat, kind=\"bar\", size = 6 ,\n                    palette = \"muted\",height=8.27, aspect=11.7\/3.5)\nplt.xticks(rotation = 90)","889afbcb":"Weather = pd.read_csv('..\/input\/Weather.csv')\nWeather['date'] = Weather['date'].astype('datetime64[ns]') \nWeather_2020 = Weather[(Weather['date'] > '12\/31\/2019')]\nWeather_2020.rename(columns = {'date':'confirmed_date'}, inplace = True)\nWeather_2020","22ef24ad":"# apply \"Vlookup\" in padas\nCovid_2020_Details = PatientInfo.merge(Weather_2020, how='left', on=['province', 'confirmed_date'])\nCovid_2020_Details","b5ddf08c":"## Droping Unwanted columns \nCovid_2020_Details = Covid_2020_Details.drop(['code','infected_by','confirmed_date','patient_id'], axis=1)","41ebbf95":"# Covid_2020_Details.fillna(Covid_2020_Details.mean())\nCovid_2020_Details['avg_temp'].fillna((Covid_2020_Details['avg_temp'].mean()), inplace=True)\nCovid_2020_Details['min_temp'].fillna((Covid_2020_Details['min_temp'].mean()), inplace=True)\nCovid_2020_Details['max_temp'].fillna((Covid_2020_Details['max_temp'].mean()), inplace=True)\nCovid_2020_Details['precipitation'].fillna((Covid_2020_Details['precipitation'].mean()), inplace=True)\nCovid_2020_Details['max_wind_speed'].fillna((Covid_2020_Details['max_wind_speed'].mean()), inplace=True)\nCovid_2020_Details['most_wind_direction'].fillna((Covid_2020_Details['most_wind_direction'].mean()), inplace=True)\nCovid_2020_Details['avg_relative_humidity'].fillna((Covid_2020_Details['avg_relative_humidity'].mean()), inplace=True)","fccd05c8":"# Covid_2020_Details.to_csv(\"Covid_2020_Details.csv\")","83afe74d":"Covid_2020_Details = Covid_2020_Details[(Covid_2020_Details['sex'] != 'Unknown')]\nCovid_2020_Details","998a51ab":"# #Converting certain features to categorical form\ncategorical_features_Covid_2020 = ['province']\nCovid_2020_Details[categorical_features_Covid_2020] = Covid_2020_Details[categorical_features_Covid_2020].astype('category')\nCovid_2020_Details.info()","3310f1f1":"plt.figure(figsize=(20,20))\ng = sns.heatmap(Covid_2020_Details.corr(),cmap=\"BrBG\",annot=True)","669da2c3":"from sklearn.preprocessing import LabelEncoder\nlabelencoder=LabelEncoder()","9651c1f8":"# Here applying label encoder to categorical attribute by using column key name.\nCovid_2020_Details['sex']=labelencoder.fit_transform(Covid_2020_Details['sex'])\nCovid_2020_Details['country']=labelencoder.fit_transform(Covid_2020_Details['country'])\nCovid_2020_Details['province']=labelencoder.fit_transform(Covid_2020_Details['province'])\nCovid_2020_Details['city']=labelencoder.fit_transform(Covid_2020_Details['city'])\nCovid_2020_Details['infection_case']=labelencoder.fit_transform(Covid_2020_Details['infection_case'])\nCovid_2020_Details['state']=labelencoder.fit_transform(Covid_2020_Details['state'])","b8bdaca4":"Covid_2020_Details['disease'] = Covid_2020_Details['disease'].map({'TRUE':1, 'FALSE':0})","f0911723":"Covid_2020_Details['disease']=labelencoder.fit_transform(Covid_2020_Details['disease'])","9a53555e":"Covid_2020_Details.info()","0ed9a67b":"y=Covid_2020_Details['state'].values\nx=Covid_2020_Details.drop(['state'],axis=1).values","287e9182":"# dataset split.\ntrain_size=0.80\ntest_size=0.20\nseed=5\n\nfrom sklearn.model_selection import train_test_split\nX_train,X_test,y_train,y_test=train_test_split(x,y,train_size=train_size,test_size=test_size,random_state=seed)","015b7bea":"print(X_train.shape)\nprint(y_train.shape)","2a50260b":"n_neighbors=5\nimport matplotlib.pyplot as plt\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.svm import SVC\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.naive_bayes import GaussianNB\n\n\n# keeping all models in one list\nmodels=[]\nmodels.append(('LogisticRegression',LogisticRegression()))\nmodels.append(('knn',KNeighborsClassifier(n_neighbors=n_neighbors)))\nmodels.append(('SVC',SVC()))\nmodels.append((\"decision_tree\",DecisionTreeClassifier()))\nmodels.append(('Naive Bayes',GaussianNB()))\n\n# Evaluating Each model\nfrom sklearn.model_selection import KFold\nfrom sklearn.model_selection import cross_val_score\n\nnames=[]\npredictions=[]\nerror='accuracy'\nfor name,model in models:\n    fold=KFold(n_splits=10,random_state=0)\n    result=cross_val_score(model,X_train,y_train,cv=fold,scoring=error)\n    predictions.append(result)\n    names.append(name)\n    msg=\"%s : %f (%f)\"%(name,result.mean(),result.std())\n    print(msg)\\\n    \n# # Visualizing the Model accuracy\nfig=plt.figure()\nfig.suptitle(\"Comparing Algorithms\")\nplt.boxplot(predictions)\nplt.show()","251c5d40":"# Spot Checking and Comparing Algorithms With StandardScaler Scaler\nfrom sklearn.pipeline import Pipeline\nfrom sklearn. preprocessing import StandardScaler\npipelines=[]\npipelines.append(('scaled Logisitic Regression',Pipeline([('scaler',StandardScaler()),('LogisticRegression',LogisticRegression())])))\npipelines.append(('scaled KNN',Pipeline([('scaler',StandardScaler()),('KNN',KNeighborsClassifier(n_neighbors=n_neighbors))])))\npipelines.append(('scaled SVC',Pipeline([('scaler',StandardScaler()),('SVC',SVC())])))\npipelines.append(('scaled DecisionTree',Pipeline([('scaler',StandardScaler()),('decision',DecisionTreeClassifier())])))\npipelines.append(('scaled naive bayes',Pipeline([('scaler',StandardScaler()),('scaled Naive Bayes',GaussianNB())])))\n\n# # Evaluating Each model\nfrom sklearn.model_selection import KFold\nfrom sklearn.model_selection import cross_val_score\nnames=[]\npredictions=[]\nfor name,model in models:\n    fold=KFold(n_splits=10,random_state=0)\n    result=cross_val_score(model,X_train,y_train,cv=fold,scoring=error)\n    predictions.append(result)\n    names.append(name)\n    msg=\"%s : %f (%f)\"%(name,result.mean(),result.std())\n    print(msg)\n    \n\n# # Visualizing the Model accuracy\nfig=plt.figure()\nfig.suptitle(\"Comparing Algorithms\")\nplt.boxplot(predictions)\nplt.show()","e3a73b73":"from sklearn.ensemble import AdaBoostClassifier\nfrom sklearn.datasets import make_classification\nX, y = make_classification(n_samples=1000, n_features=4,\n                           n_informative=2, n_redundant=0,\n                          random_state=0, shuffle=False)\nclf = AdaBoostClassifier(n_estimators=100, random_state=0)\nclf.fit(X_train, y_train)\nAdaBoostClassifier(n_estimators=100, random_state=0)\nclf.feature_importances_\nclf.score(X_test,y_test)","ddab37fd":"import xgboost\nclassifier=xgboost.XGBClassifier()\n\nclassifier=xgboost.XGBClassifier(base_score=0.5, booster='gbtree', colsample_bylevel=1,\n       colsample_bytree=0.5, gamma=0.4, learning_rate=0.1,\n       max_delta_step=0, max_depth=6, min_child_weight=7, missing=None,\n       n_estimators=100, n_jobs=1, nthread=None,\n       objective='binary:logistic', random_state=0, reg_alpha=0,\n       reg_lambda=1, scale_pos_weight=1, seed=None, silent=True,\n       subsample=1)\n\nfrom sklearn.model_selection import cross_val_score\nscore=cross_val_score(classifier,X_train, y_train,cv=10)\n\nscore\nscore.mean()","9e0b9610":"# Feature Scaling\nfrom sklearn.preprocessing import StandardScaler\nsc = StandardScaler()\nX_train = sc.fit_transform(X_train)\nX_test = sc.transform(X_test)","a004fafe":"# Importing the Keras libraries and packages\nimport keras\nfrom keras.models import Sequential\nfrom keras.layers import Dense\nfrom keras.layers import LeakyReLU,PReLU,ELU\nfrom keras.layers import Dropout","ef6df140":"# Initialising the ANN\nclassifier = Sequential()","26da8c7a":"X_train.shape","5a1c98d3":"# Adding the input layer and the first hidden layer\nclassifier.add(Dense(output_dim = 12, init = 'he_uniform',activation='relu',input_dim = 15))","237ed53d":"# Adding the second hidden layer\nclassifier.add(Dense(output_dim = 12, init = 'he_uniform',activation='relu'))\n# Adding the output layer\nclassifier.add(Dense(output_dim = 1, init = 'glorot_uniform', activation = 'sigmoid'))","d48c1f24":"# Compiling the ANN\nclassifier.compile(optimizer = 'Adamax', loss = 'binary_crossentropy', metrics = ['accuracy'])","cb8104e2":"# Fitting the ANN to the Training set\nmodel_history=classifier.fit(X_train, y_train,validation_split=0.33, batch_size = 10, nb_epoch = 100)","4c964237":"y_pred=classifier.predict(X_test)\ny_pred=(y_pred>0.5)\ny_pred\n\nfrom sklearn.metrics import confusion_matrix,classification_report\nprint(confusion_matrix(y_test, y_pred))","58a06dca":"# summarize history for loss\nplt.plot(model_history.history['loss'])\nplt.plot(model_history.history['val_loss'])\nplt.title('model loss')\nplt.ylabel('loss')\nplt.xlabel('epoch')\nplt.legend(['train', 'test'], loc='upper left')\nplt.show()","82bd23fa":"------------------Data Merging--------------------","185c8043":"-------------Time Series Analysis-----------------","60bb653a":"In case of classification model if we need to predict death probability of individual based on\ninfection, area, province, city ,weather condition , age group and other factors, we can go with ensembale techniques with XGBOOST as it is giving 85 % of accuracy","ba85e92c":"## Pateint Info Analysis","8d1009e4":"Coronavirus disease (COVID-19) is an infectious disease caused by a newly discovered coronavirus.\n\nWHO is gathering the latest scientific findings and knowledge (primarily journal articles) on coronavirus disease (COVID-19) and compiling it in a database. \n \nToday we will explore the COVID-19 cases in South Korea and will analyze \n1. How these people got infected - Covered in EDA\n2. Most infected area, province, cities - Covered in EDA\n3. Most of age group affected - Covered in EDA\n2. Rate of infection and deceased cases  - Covered in EDA\n3. Rate of recovery - Covered in EDA\n4. Death Prediction - Covered in Modeling\n\nSome descriptions may not be current for current charts\n\nPlease vote and seek your feedback for this (EDA + Modeling) analysis\n","67ee2335":"## Data Visualization","62faab28":"### Time Age Analysis","acd42be4":"## Using LabelEncode library","35548aa6":"----------Adaboost-------------","7e816c6e":"as some of data where age sex was missing where we have added unknown as another rage column and age as average ages of perosm which will create noise in model, hence we will removibg those row.","68827f89":"--------XGBoost-------","b3842f14":"## Modeling ","bba46c8a":"## TimeGender Analysis","2beeb3cd":"### Conclusion ##","6f0b0597":"################### End ################","c9ac8bef":"## Neural Network ","1fafdce7":"### Patient Route Analysis","c6d9b750":"------------- Data Cleaning --------------","0ed93012":"## TimeProvince Analysis","79724954":"### Time Analysis"}}