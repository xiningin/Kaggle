{"cell_type":{"955135f7":"code","bf4f64d1":"code","cfee9d26":"code","4f5a4451":"code","5034961b":"code","15062acc":"code","6adb1feb":"code","eb24e2ca":"code","de8c98d8":"code","1f6d5479":"code","fd0677f3":"code","50c6c566":"code","7b6dd228":"code","73b3506a":"code","881c966a":"code","09f82a5f":"code","b133fbb8":"code","d5bee436":"code","9a2d1186":"code","2ec33a6d":"code","585c347a":"code","0095fcf1":"code","08617733":"code","8b0cddf7":"code","422b50a2":"code","027f6b09":"code","7ab80f36":"code","8a8050bc":"code","ce97a86b":"code","d21d6e75":"code","199cd588":"code","3aa25cae":"code","20e0e337":"code","5a5cdd42":"code","40b32ccf":"code","92c7b5a3":"code","67143bf2":"code","12210b92":"code","b5319590":"code","52ad519a":"code","2319b43c":"code","d87464da":"code","68105741":"code","6879d821":"code","f300e0e3":"code","01bb6250":"code","d1e3e30e":"code","deae9817":"code","7f96654e":"code","456558d9":"code","767fe8aa":"code","448354f0":"code","abb3037e":"code","2f8a8d79":"code","43cc53f4":"code","af20abf9":"code","5b2eb92b":"markdown","a8a9e025":"markdown","7057969c":"markdown","f4e7708b":"markdown","2da13bcb":"markdown","fe0c9ee4":"markdown","9e02969c":"markdown","92339436":"markdown","ba7c1f44":"markdown","0a4a606d":"markdown","1b764987":"markdown","2ce50ef9":"markdown"},"source":{"955135f7":"!pip install pandas","bf4f64d1":"!pip install numpy","cfee9d26":"import pandas as pd","4f5a4451":"import os","5034961b":"raw_df = pd.read_csv('..\/input\/names-df\/Names.csv')","15062acc":"print(raw_df)","6adb1feb":"os.listdir('..\/input\/names-df')","eb24e2ca":"raw_df.columns","de8c98d8":"raw_df.info","1f6d5479":"raw_df.info()","fd0677f3":"raw_df.describe()","50c6c566":"raw_df.shape","7b6dd228":"raw_df.sample(10)","73b3506a":"# Accessing data at particular row\n\nraw_df.loc[111]","881c966a":"!pip install matplotlib","09f82a5f":"!pip install seaborn","b133fbb8":"import seaborn as sns\nimport matplotlib\nimport matplotlib.pyplot as plt","d5bee436":"%matplotlib inline","9a2d1186":"sns.set_style('darkgrid')\nmatplotlib.rcParams['font.size'] = 14\nmatplotlib.rcParams['figure.figsize'] = (9, 5)\nmatplotlib.rcParams['figure.facecolor'] = '#00000000'","2ec33a6d":"# Showing  description of column data belongs to\n\nraw_df.belongs_to.describe()","585c347a":"# Finds unique values in belongs_to columns\n\nraw_df.belongs_to.unique()","0095fcf1":"# Showing  description of name column data\n\nraw_df.name.describe()","08617733":"# Finds unique values in name columns\n\nraw_df.name.unique()","8b0cddf7":"# Finds unique values in sanskrit column\n\nraw_df.sanskrit.unique()","422b50a2":"# Finds unique values in sanskrit column\n\nraw_df.meaning.unique()","027f6b09":"# make shiva names dataframe; here we use simple binary fuction for checking\n\nshiva_df = raw_df[raw_df.belongs_to == 'Shiva']\n\n#Following command can also be used  but below command assign boolean values \"True\" to Shiva & \"False\" to rest \n#but we have to perform more operations on it.\n#shiva_df = raw_df.belongs_to == 'Shiva'","7ab80f36":"shiva_df","8a8050bc":"shiva_df.describe()","ce97a86b":"# make Devi names dataframe; here we use simple binary fuction for checking\n\ndevi_df = raw_df[raw_df.belongs_to == 'Devi']","d21d6e75":"devi_df","199cd588":"devi_df.describe()","3aa25cae":"#Now\n#Below command assign boolean values \"True\" to 'narayan' & \"False\" to rest data in \"belong_to\" column \n\nnarayan_df = raw_df.belongs_to == 'Narayan'","20e0e337":"narayan_df","5a5cdd42":"narayan_df.describe()","40b32ccf":"# While this function is much easier\n\nnarayan_df = raw_df[raw_df.belongs_to == 'Narayan']\nnarayan_df","92c7b5a3":"# Plotting line chart with X-axis & Y-axis labels\n\nplt.plot(raw_df.belongs_to)\nplt.xlabel('No. of names')\nplt.ylabel('Names')","67143bf2":"# Make copy of df\n\ncopy_df = raw_df.copy()","12210b92":"copy_df.info()","b5319590":"#replacing the categories with the above numbers with replace() function\n#Dictionary which contains mapping numbers for each category in the belongs_to column: \n\nreplace_matrix = {'belongs_to': {'Shiva': 1, 'Devi': 2, 'Narayan': 3}}","52ad519a":"# Replacing\n\ncopy_df.replace(replace_matrix, inplace=True)\ncopy_df.head()","2319b43c":"copy_df.info()","d87464da":"copy_df.sample(20)","68105741":"# Counting Diff values in belongs_to column\n\nraw_df['belongs_to'].value_counts().count()","6879d821":"'''Barplot of the frequency distribution of a category using the seaborn package, which shows the \nfrequency distribution of the carrier column.\n'''\n\ndf = raw_df['belongs_to'].value_counts()\n\n# Assigning title, x & Y axis labels\nsns.barplot(df.index, df.values, alpha=0.9)\nplt.title('Frequency Distribution of Names')\nplt.ylabel('Number of Occurrences', fontsize=16)\nplt.xlabel('Names', fontsize=16)\nplt.show()","f300e0e3":"# We are plotting pie chart here\n\nlabels = raw_df['belongs_to'].astype('category').cat.categories.tolist()\ncounts = raw_df['belongs_to'].value_counts()\nsizes = [counts[var_cat] for var_cat in labels]\nfig1, ax1 = plt.subplots()\n\n#autopct is to show the percentage(%) on pie chart\n\nax1.pie(sizes, labels=labels, autopct='%1.1f%%', shadow=True) \n\nplt.title('Percentage-wise Distribution of Names')\nax1.axis('equal')\nplt.show()","01bb6250":"# Access previously made df \n\ndevi_df","d1e3e30e":"# extraction of required data\n\ndf1 = devi_df[['belongs_to', 'sanskrit']]\ndf1","deae9817":"# Plotting line chart\n\nplt.plot(df1.belongs_to)\nplt.xlabel('Sanskrit names')\nplt.ylabel('Names');","7f96654e":"# We are plotting pie chart here\n# Random sample collection\ndf2 = raw_df.sample(3)\n\nlabels = df2['belongs_to'].astype('category').cat.categories.tolist()\ncounts = df2['belongs_to'].value_counts()\nsizes = [counts[var_cat] for var_cat in labels]\nfig1, ax1 = plt.subplots()\n\n#autopct is to show the percentage(%) on pie chart\n\nax1.pie(sizes, labels=labels, autopct='%1.1f%%', shadow=True) \n\nplt.title(\"Random Sample's Percentage Calculation\")\nax1.axis('equal')\nplt.show();","456558d9":"df4 = raw_df.loc[140:145]","767fe8aa":"df4.info()","448354f0":"df4","abb3037e":"# Finds unique values in columns\n\nname = df4.name.unique()\nmeaning = df4.meaning.unique()\n\n# Plot histogram\nplt.bar(name, meaning);","2f8a8d79":"#check null(missing) values in df\n\nraw_df.isnull().values.sum()","43cc53f4":"# chk column wise null values\n\nraw_df.isnull().sum()","af20abf9":"# Frequency distribution of 'belongs_to' category\n\nraw_df['belongs_to'].value_counts()","5b2eb92b":"**Plot graph of 140 to 145 Name Vs meaning**","a8a9e025":"**Data Preparation & Cleaning**","7057969c":"**replace values in belongs_to column with Shiva=1 , Devi = 2, Narayan= 3**","f4e7708b":"**Count of distinct categories within belong_to column & make frequency distribution graph**","2da13bcb":"**Random Sample's % Calculation**","fe0c9ee4":"**Show percentage wise distribution of God's\/ goddesses names in total dataframe**","9e02969c":"**Making Separate dataframes according to \"belong_to\" column values**","92339436":"*Here we got our answer*","ba7c1f44":"**In raw_df find numerically which god's & goddesses has most no. of their names?**\nDon't use charts","0a4a606d":"**Find sanskrit names of devi**","1b764987":"**Plot chart w.r.to 'belongs_to' column**","2ce50ef9":"**Exploratory analysis & Visualisation**"}}