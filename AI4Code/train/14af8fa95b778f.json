{"cell_type":{"616d2b1e":"code","49178f3e":"code","b1a4e597":"code","777e6ec6":"code","c1b3e9fd":"code","8c7a127d":"code","4681ef50":"code","79419267":"code","1be32408":"code","759c50aa":"code","8946c8a5":"code","0c2182ba":"code","637f1c80":"code","288d7464":"code","8b3e4d17":"code","e139aac4":"code","39590d82":"code","51b5318f":"code","8087ce3e":"code","5974c6a7":"code","beb06b34":"code","ab0b4686":"code","c328b5a1":"code","3eaa1fb6":"code","c9f15a4f":"code","eeeff3ef":"code","c72f588d":"code","6d8a393b":"code","d2d6f807":"code","e4876731":"code","0c120b2f":"code","c284dbc8":"code","0f41d60a":"code","58dbb8cb":"code","3f20bfe2":"code","35509f40":"code","41fb25d4":"code","7bc204a0":"code","06ba96f8":"code","0164348f":"code","1493ffdb":"code","e5803807":"code","bdc100d8":"code","cc190f42":"code","eeb769ef":"code","8b60ea52":"code","d652e09b":"code","40f1cbb7":"code","6910a05d":"code","5a833506":"code","d234c838":"code","efe5b198":"code","40ecd64b":"code","2c013368":"code","bc9bb6cb":"code","6a70f00f":"code","fba6309e":"code","03d8c1cb":"code","71c841cd":"code","55215c04":"code","3c0c55b8":"code","35e57629":"code","88e56437":"code","1a5a2476":"code","90bb195a":"code","0f38c8d1":"code","b3633af1":"code","380efb10":"code","278fdda5":"code","fcaa651b":"code","48d71898":"code","3bfe020b":"code","6b73f90d":"markdown","89771cd4":"markdown","d188d977":"markdown","e0f5fa93":"markdown","23abbd61":"markdown","d53a5f52":"markdown","1b33cf3f":"markdown","a53ac419":"markdown","3acdbaf5":"markdown","12ba5fef":"markdown","f3b6f0a2":"markdown","3ee118fe":"markdown","fc384ae1":"markdown","473489c6":"markdown","bd2fad5c":"markdown","91121261":"markdown","89195386":"markdown","494257b9":"markdown","79360cdc":"markdown","8a3a4d1c":"markdown","d277b47b":"markdown","8b6c2ac1":"markdown","eeb27391":"markdown","736f3c7c":"markdown","295a2dae":"markdown","fb3379fe":"markdown","a40a5943":"markdown","a5ab893e":"markdown","6e310436":"markdown","b5eccce5":"markdown","c8d92941":"markdown","c8d54ab4":"markdown","780a588f":"markdown","1611514f":"markdown","f302a06f":"markdown","224ddd78":"markdown","7d12830b":"markdown","542d1a0d":"markdown","278f0f3c":"markdown","6a823a25":"markdown","a533b1af":"markdown","4387c29a":"markdown","f110f29a":"markdown","49b8157c":"markdown","45c24287":"markdown","e0060b27":"markdown","f3b592ae":"markdown","a9be271c":"markdown","b0af01ba":"markdown","84cd5479":"markdown","1caf13a7":"markdown","e5291e82":"markdown","6a4fdff3":"markdown","9cc4c385":"markdown","2313422b":"markdown","9943f9dd":"markdown","133b1437":"markdown","64fa415c":"markdown","65f122a6":"markdown","f7f0213d":"markdown","e2c00cfd":"markdown","74842f00":"markdown","c6710223":"markdown","7d23a13e":"markdown","34517b24":"markdown","9967ec25":"markdown","47e37283":"markdown","1112a5b0":"markdown","dc3a9f94":"markdown","d4eed639":"markdown","9e2f8d93":"markdown","e7d74c72":"markdown","19ef97ad":"markdown","321e443c":"markdown","2d32bab9":"markdown","5380a005":"markdown","e58e2059":"markdown","61700a4e":"markdown","caf5a8ff":"markdown","62697dc1":"markdown","82bffdb7":"markdown","02cf5169":"markdown","203a9037":"markdown","8cc7453b":"markdown","7fa2a3b7":"markdown","4160cb82":"markdown","82d60bd3":"markdown","7c2f98fc":"markdown","c28b4948":"markdown"},"source":{"616d2b1e":"\n\nimport numpy as np \nimport pandas as pd\nimport os\nimport seaborn as sns\nprint(os.listdir(\"..\/input\"))\nimport matplotlib.pyplot as plt\nplt.style.use('ggplot')\nimport plotly.offline as py\nimport plotly.graph_objs as go\nfrom plotly.offline import init_notebook_mode\ninit_notebook_mode(connected=False)\nfrom wordcloud import WordCloud\nfrom geopy.geocoders import Nominatim\nfrom folium.plugins import HeatMap\nimport folium\nfrom tqdm import tqdm\nimport re\nfrom keras.preprocessing.text import Tokenizer\nfrom keras.preprocessing.sequence import pad_sequences\nfrom keras.models import Sequential\nfrom keras.layers import Dense, Embedding, LSTM, SpatialDropout1D\nfrom sklearn.model_selection import train_test_split\nfrom nltk import word_tokenize\nfrom sklearn.feature_extraction.text import TfidfVectorizer\nimport gensim\nfrom collections import Counter\nfrom nltk.corpus import stopwords\nfrom nltk.stem import WordNetLemmatizer\nimport matplotlib.colors as mcolors\nfrom sklearn.manifold import TSNE\nfrom gensim.models import word2vec\nimport nltk\n# Any results you write to the current directory are saved as output.","49178f3e":"df=pd.read_csv(\"..\/input\/zomato.csv\")","b1a4e597":"print(\"dataset contains {} rows and {} columns\".format(df.shape[0],df.shape[1]))","777e6ec6":"df.info()","c1b3e9fd":"df.head()","8c7a127d":"plt.figure(figsize=(10,7))\nchains=df['name'].value_counts()[:20]\nsns.barplot(x=chains,y=chains.index,palette='deep')\nplt.title(\"Most famous restaurants chains in Bangaluru\")\nplt.xlabel(\"Number of outlets\")","4681ef50":"x=df['online_order'].value_counts()\ncolors = ['#FEBFB3', '#E1396C']\n\ntrace=go.Pie(labels=x.index,values=x,textinfo=\"value\",\n            marker=dict(colors=colors, \n                           line=dict(color='#000000', width=2)))\nlayout=go.Layout(title=\"Accepting vs not accepting online orders\",width=500,height=500)\nfig=go.Figure(data=[trace],layout=layout)\npy.iplot(fig, filename='pie_chart_subplots')\n    \n    \n    ","79419267":"x=df['book_table'].value_counts()\ncolors = ['#96D38C', '#D0F9B1']\n\ntrace=go.Pie(labels=x.index,values=x,textinfo=\"value\",\n            marker=dict(colors=colors, \n                           line=dict(color='#000000', width=2)))\nlayout=go.Layout(title=\"Table booking\",width=500,height=500)\nfig=go.Figure(data=[trace],layout=layout)\npy.iplot(fig, filename='pie_chart_subplots')\n    ","1be32408":"plt.figure(figsize=(6,5))\nrating=df['rate'].dropna().apply(lambda x : float(x.split('\/')[0]) if (len(x)>3)  else np.nan ).dropna()\nsns.distplot(rating,bins=20)","759c50aa":"\ncost_dist=df[['rate','approx_cost(for two people)','online_order']].dropna()\ncost_dist['rate']=cost_dist['rate'].apply(lambda x: float(x.split('\/')[0]) if len(x)>3 else 0)\ncost_dist['approx_cost(for two people)']=cost_dist['approx_cost(for two people)'].apply(lambda x: int(x.replace(',','')))\n","8946c8a5":"plt.figure(figsize=(10,7))\nsns.scatterplot(x=\"rate\",y='approx_cost(for two people)',hue='online_order',data=cost_dist)\nplt.show()","0c2182ba":"plt.figure(figsize=(6,6))\nsns.distplot(cost_dist['approx_cost(for two people)'])\nplt.show()","637f1c80":"\n\nvotes_yes=df[df['online_order']==\"Yes\"]['votes']\ntrace0=go.Box(y=votes_yes,name=\"accepting online orders\",\n              marker = dict(\n        color = 'rgb(214, 12, 140)',\n    ))\n\nvotes_no=df[df['online_order']==\"No\"]['votes']\ntrace1=go.Box(y=votes_no,name=\"Not accepting online orders\",\n              marker = dict(\n        color = 'rgb(0, 128, 128)',\n    ))\n\nlayout = go.Layout(\n    title = \"Box Plots of votes\",width=800,height=500\n)\n\ndata=[trace0,trace1]\nfig=go.Figure(data=data,layout=layout)\npy.iplot(fig)\n\n\n","288d7464":"plt.figure(figsize=(7,7))\nrest=df['rest_type'].value_counts()[:20]\nsns.barplot(rest,rest.index)\nplt.title(\"Restaurant types\")\nplt.xlabel(\"count\")","8b3e4d17":"trace0=go.Box(y=df['approx_cost(for two people)'],name=\"accepting online orders\",\n              marker = dict(\n        color = 'rgb(214, 12, 140)',\n    ))\ndata=[trace0]\nlayout=go.Layout(title=\"Box plot of approximate cost\",width=800,height=500,yaxis=dict(title=\"Price\"))\nfig=go.Figure(data=data,layout=layout)\npy.iplot(fig)","e139aac4":"cost_dist=df[['rate','approx_cost(for two people)','location','name','rest_type']].dropna()\ncost_dist['rate']=cost_dist['rate'].apply(lambda x: float(x.split('\/')[0]) if len(x)>3 else 0)\ncost_dist['approx_cost(for two people)']=cost_dist['approx_cost(for two people)'].apply(lambda x: int(x.replace(',','')))","39590d82":"def return_budget(location,rest):\n    budget=cost_dist[(cost_dist['approx_cost(for two people)']<=400) & (cost_dist['location']==location) & \n                     (cost_dist['rate']>4) & (cost_dist['rest_type']==rest)]\n    return(budget['name'].unique())","51b5318f":"return_budget('BTM',\"Quick Bites\")","8087ce3e":"plt.figure(figsize=(7,7))\nRest_locations=df['location'].value_counts()[:20]\nsns.barplot(Rest_locations,Rest_locations.index,palette=\"rocket\")","5974c6a7":"df_1=df.groupby(['location','cuisines']).agg('count')\ndata=df_1.sort_values(['url'],ascending=False).groupby(['location'],\n                as_index=False).apply(lambda x : x.sort_values(by=\"url\",ascending=False).head(3))['url'].reset_index().rename(columns={'url':'count'})\n","beb06b34":"\ndata.head(10)","ab0b4686":"locations=pd.DataFrame({\"Name\":df['location'].unique()})\nlocations['Name']=locations['Name'].apply(lambda x: \"Bangalore \" + str(x))\nlat_lon=[]\ngeolocator=Nominatim(user_agent=\"app\")\nfor location in locations['Name']:\n    location = geolocator.geocode(location)\n    if location is None:\n        lat_lon.append(np.nan)\n    else:    \n        geo=(location.latitude,location.longitude)\n        lat_lon.append(geo)\n\n\nlocations['geo_loc']=lat_lon\nlocations.to_csv('locations.csv',index=False)","c328b5a1":"locations[\"Name\"]=locations['Name'].apply(lambda x :  x.replace(\"Bangalore\",\"\")[1:])\nlocations.head()","3eaa1fb6":"Rest_locations=pd.DataFrame(df['location'].value_counts().reset_index())\nRest_locations.columns=['Name','count']\nRest_locations=Rest_locations.merge(locations,on='Name',how=\"left\").dropna()\nRest_locations['count'].max()","c9f15a4f":"def generateBaseMap(default_location=[12.97, 77.59], default_zoom_start=12):\n    base_map = folium.Map(location=default_location, control_scale=True, zoom_start=default_zoom_start)\n    return base_map","eeeff3ef":"lat,lon=zip(*np.array(Rest_locations['geo_loc']))\nRest_locations['lat']=lat\nRest_locations['lon']=lon\nbasemap=generateBaseMap()\nHeatMap(Rest_locations[['lat','lon','count']].values.tolist(),zoom=20,radius=15).add_to(basemap)","c72f588d":"basemap","6d8a393b":"plt.figure(figsize=(7,7))\ncuisines=df['cuisines'].value_counts()[:10]\nsns.barplot(cuisines,cuisines.index)\nplt.xlabel('Count')\nplt.title(\"Most popular cuisines of Bangalore\")","d2d6f807":"def produce_data(col,name):\n    data= pd.DataFrame(df[df[col]==name].groupby(['location'],as_index=False)['url'].agg('count'))\n    data.columns=['Name','count']\n    print(data.head())\n    data=data.merge(locations,on=\"Name\",how='left').dropna()\n    data['lan'],data['lon']=zip(*data['geo_loc'].values)\n    return data.drop(['geo_loc'],axis=1)\n\n","e4876731":"North_India=produce_data('cuisines','North Indian')","0c120b2f":"basemap=generateBaseMap()\nHeatMap(North_India[['lan','lon','count']].values.tolist(),zoom=20,radius=15).add_to(basemap)\nbasemap","c284dbc8":"food=produce_data('cuisines','South Indian')\nbasemap=generateBaseMap()\nHeatMap(food[['lan','lon','count']].values.tolist(),zoom=20,radius=15).add_to(basemap)\nbasemap","0f41d60a":"def produce_chains(name):\n    data_chain=pd.DataFrame(df[df[\"name\"]==name]['location'].value_counts().reset_index())\n    data_chain.columns=['Name','count']\n    data_chain=data_chain.merge(locations,on=\"Name\",how=\"left\").dropna()\n    data_chain['lan'],data_chain['lon']=zip(*data_chain['geo_loc'].values)\n    return data_chain[['Name','count','lan','lon']]\n","58dbb8cb":"df_1=df.groupby(['rest_type','name']).agg('count')\ndatas=df_1.sort_values(['url'],ascending=False).groupby(['rest_type'],\n                as_index=False).apply(lambda x : x.sort_values(by=\"url\",ascending=False).head(3))['url'].reset_index().rename(columns={'url':'count'})\n","3f20bfe2":"mapbox_access_token=\"pk.eyJ1Ijoic2hhaHVsZXMiLCJhIjoiY2p4ZTE5NGloMDc2YjNyczBhcDBnZnA5aCJ9.psBECQ2nub0o25PgHcU88w\"\n","35509f40":"casual=datas[datas['rest_type']=='Casual Dining']\ncasual","41fb25d4":"def produce_trace(data_chain,name):\n        data_chain['text']=data_chain['Name']+'<br>'+data_chain['count'].astype(str)\n        trace =  go.Scattermapbox(\n           \n                lat=data_chain['lan'],\n                lon=data_chain['lon'],\n                mode='markers',\n                marker=go.scattermapbox.Marker(\n                    size=data_chain['count']*4\n                ),\n                text=data_chain['text'],name=name\n            )\n        \n        return trace","7bc204a0":"\ndata=[] \nfor row in casual['name']:\n    data_chain=produce_chains(row) \n    trace_0=produce_trace(data_chain,row)\n    data.append(trace_0)\n\n\n\nlayout = go.Layout(title=\"Casual Dining Restaurant chains locations around Banglore\",\n    autosize=True,\n    hovermode='closest',\n    mapbox=dict(\n        accesstoken=mapbox_access_token,\n        bearing=0,style=\"streets\",\n        center=dict(\n            lat=12.96,\n            lon=77.59\n        ),\n        pitch=0,\n        zoom=10\n    ),\n)\n\n\nfig = dict(data=data, layout=layout)\npy.iplot(fig, filename='Montreal Mapbox')","06ba96f8":"quick=datas[datas['rest_type']=='Quick Bites']\nquick ","0164348f":"data=[]  \nfor row in quick['name']:\n    data_chain=produce_chains(row) \n    trace_0=produce_trace(data_chain,row)\n    data.append(trace_0)\n\n\n\nlayout = go.Layout(title=\"Quick Bites Restaurant chains locations around Banglore\",\n    autosize=True,\n    hovermode='closest',\n    mapbox=dict(\n        accesstoken=mapbox_access_token,\n        bearing=0,style=\"streets\",\n        center=dict(\n            lat=12.96,\n            lon=77.59\n        ),\n        pitch=0,\n        zoom=10\n    ),\n)\n\n\nfig = dict(data=data, layout=layout)\npy.iplot(fig, filename='Montreal Mapbox')","1493ffdb":"cafe=datas[datas['rest_type']=='Cafe']\ncafe","e5803807":"data=[]  \nfor row in cafe['name']:\n    data_chain=produce_chains(row) \n    trace_0=produce_trace(data_chain,row)\n    data.append(trace_0)\n\n\n\nlayout = go.Layout(title=\"Cafe Restaurant chains locations around Banglore\",\n    autosize=True,\n    hovermode='closest',\n    mapbox=dict(\n        accesstoken=mapbox_access_token,\n        bearing=0,style=\"streets\",\n        center=dict(\n            lat=12.96,\n            lon=77.59\n        ),\n        pitch=0,\n        zoom=10\n    ),\n)\n\n\nfig = dict(data=data, layout=layout)\npy.iplot(fig, filename='Montreal Mapbox')","bdc100d8":"df['dish_liked']=df['dish_liked'].apply(lambda x : x.split(',') if type(x)==str else [''])\n#x=df.groupby('rest_type',as_index=False)['dish_liked'].agg('sum')\n#x['dish_liked']=x['dish_liked'].apply(lambda x : list(filter(lambda a : a!='',x)))","cc190f42":"rest=df['rest_type'].value_counts()[:9].index\ndef produce_wordcloud(rest):\n    \n    plt.figure(figsize=(20,30))\n    for i,r in enumerate(rest):\n        plt.subplot(3,3,i+1)\n        corpus=df[df['rest_type']==r]['dish_liked'].values.tolist()\n        corpus=','.join(x  for list_words in corpus for x in list_words)\n        wordcloud = WordCloud(max_font_size=None, background_color='white', collocations=False,\n                      width=1500, height=1500).generate(corpus)\n        plt.imshow(wordcloud)\n        plt.title(r)\n        plt.axis(\"off\")\n        \n\n        \n        \nproduce_wordcloud(rest)","eeb769ef":"all_ratings = []\n\nfor name,ratings in tqdm(zip(df['name'],df['reviews_list'])):\n    ratings = eval(ratings)\n    for score, doc in ratings:\n        if score:\n            score = score.strip(\"Rated\").strip()\n            doc = doc.strip('RATED').strip()\n            score = float(score)\n            all_ratings.append([name,score, doc])","8b60ea52":"rating_df=pd.DataFrame(all_ratings,columns=['name','rating','review'])\nrating_df['review']=rating_df['review'].apply(lambda x : re.sub('[^a-zA-Z0-9\\s]',\"\",x))","d652e09b":"rating_df.to_csv(\"Ratings.csv\")","40f1cbb7":"rating_df.head()","6910a05d":"rest=df['name'].value_counts()[:9].index\ndef produce_wordcloud(rest):\n    \n    plt.figure(figsize=(20,30))\n    for i,r in enumerate(rest):\n        plt.subplot(3,3,i+1)\n        corpus=rating_df[rating_df['name']==r]['review'].values.tolist()\n        corpus=' '.join(x  for x in corpus)\n        wordcloud = WordCloud(max_font_size=None, background_color='white', collocations=False,\n                      width=1500, height=1500).generate(corpus)\n        plt.imshow(wordcloud)\n        plt.title(r)\n        plt.axis(\"off\")\n        \n\n        \n        \nproduce_wordcloud(rest)","5a833506":"plt.figure(figsize=(7,6))\nrating=rating_df['rating'].value_counts()\nsns.barplot(x=rating.index,y=rating)\nplt.xlabel(\"Ratings\")\nplt.ylabel('count')","d234c838":"rating_df['sent']=rating_df['rating'].apply(lambda x: 1 if int(x)>2.5 else 0)\n","efe5b198":"stops=stopwords.words('english')\nlem=WordNetLemmatizer()\ncorpus=' '.join(lem.lemmatize(x) for x in rating_df[rating_df['sent']==1]['review'][:3000] if x not in stops)\ntokens=word_tokenize(corpus)\n","40ecd64b":"\nvect=TfidfVectorizer()\nvect_fit=vect.fit(tokens)\n    ","2c013368":"id_map=dict((v,k) for k,v in vect.vocabulary_.items())\nvectorized_data=vect_fit.transform(tokens)\ngensim_corpus=gensim.matutils.Sparse2Corpus(vectorized_data,documents_columns=False)\nldamodel = gensim.models.ldamodel.LdaModel(gensim_corpus,id2word=id_map,num_topics=5,random_state=34,passes=25)\n","bc9bb6cb":"counter=Counter(corpus)","6a70f00f":"out=[]\ntopics=ldamodel.show_topics(formatted=False)\nfor i,topic in topics:\n    for word,weight in topic:\n        out.append([word,i,weight,counter[word]])\n\ndataframe = pd.DataFrame(out, columns=['word', 'topic_id', 'importance', 'word_count'])        \n\n\n# Plot Word Count and Weights of Topic Keywords\nfig, axes = plt.subplots(2, 2, figsize=(8,6), sharey=True, dpi=160)\ncols = [color for name, color in mcolors.TABLEAU_COLORS.items()]\nfor i, ax in enumerate(axes.flatten()):\n    ax.bar(x='word', height=\"word_count\", data=dataframe.loc[dataframe.topic_id==i, :], color=cols[i], width=0.3, alpha=0.3, label='Word Count')\n    ax_twin = ax.twinx()\n    ax_twin.bar(x='word', height=\"importance\", data=dataframe.loc[dataframe.topic_id==i, :], color=cols[i], width=0.2, label='Weights')\n    ax.set_ylabel('Word Count', color=cols[i])\n    #ax_twin.set_ylim(0, 0.030); ax.set_ylim(0, 3500)\n    ax.set_title('Topic: ' + str(i), color=cols[i], fontsize=8)\n    ax.tick_params(axis='y', left=False)\n    ax.set_xticklabels(dataframe.loc[dataframe.topic_id==i, 'word'], rotation=30, horizontalalignment= 'right')\n    ax.legend(loc='upper left'); ax_twin.legend(loc='upper right')\n\nfig.tight_layout(w_pad=2)    \nfig.suptitle('Word Count and Importance of Topic Keywords', fontsize=8, y=1.05)    \nplt.show()","fba6309e":"stops=stopwords.words('english')\nlem=WordNetLemmatizer()\ncorpus=' '.join(lem.lemmatize(x) for x in rating_df[rating_df['sent']==0]['review'][:3000] if x not in stops)\ntokens=word_tokenize(corpus)","03d8c1cb":"vect=TfidfVectorizer()\nvect_fit=vect.fit(tokens)\nid_map=dict((v,k) for k,v in vect.vocabulary_.items())\nvectorized_data=vect_fit.transform(tokens)\ngensim_corpus=gensim.matutils.Sparse2Corpus(vectorized_data,documents_columns=False)\nldamodel = gensim.models.ldamodel.LdaModel(gensim_corpus,id2word=id_map,num_topics=5,random_state=34,passes=25)\n\n ","71c841cd":"counter=Counter(corpus)\nout=[]\ntopics=ldamodel.show_topics(formatted=False)\nfor i,topic in topics:\n    for word,weight in topic:\n        out.append([word,i,weight,counter[word]])\n\ndataframe = pd.DataFrame(out, columns=['word', 'topic_id', 'importance', 'word_count'])        \n\n\n# Plot Word Count and Weights of Topic Keywords\nfig, axes = plt.subplots(2, 2, figsize=(8,6), sharey=True, dpi=160)\ncols = [color for name, color in mcolors.TABLEAU_COLORS.items()]\nfor i, ax in enumerate(axes.flatten()):\n    ax.bar(x='word', height=\"word_count\", data=dataframe.loc[dataframe.topic_id==i, :], color=cols[i], width=0.3, alpha=0.3, label='Word Count')\n    ax_twin = ax.twinx()\n    ax_twin.bar(x='word', height=\"importance\", data=dataframe.loc[dataframe.topic_id==i, :], color=cols[i], width=0.2, label='Weights')\n    ax.set_ylabel('Word Count', color=cols[i])\n    #ax_twin.set_ylim(0, 0.030); ax.set_ylim(0, 3500)\n    ax.set_title('Topic: ' + str(i), color=cols[i], fontsize=8)\n    ax.tick_params(axis='y', left=False)\n    ax.set_xticklabels(dataframe.loc[dataframe.topic_id==i, 'word'], rotation=30, horizontalalignment= 'right')\n    ax.legend(loc='upper left'); ax_twin.legend(loc='upper right')\n\nfig.tight_layout(w_pad=2)    \nfig.suptitle('Word Count and Importance of Topic Keywords', fontsize=8, y=1.05)    \nplt.show()","55215c04":"stops=set(stopwords.words('english'))\nlem=WordNetLemmatizer()\ncorpus=[]\nfor review in tqdm(rating_df['review'][:10000]):\n    words=[]\n    for x in word_tokenize(review):\n        x=lem.lemmatize(x.lower())\n        if x not in stops:\n            words.append(x)\n            \n    corpus.append(words)","3c0c55b8":"model = word2vec.Word2Vec(corpus, size=100, window=20, min_count=200, workers=4)","35e57629":"def tsne_plot(model):\n    \"Creates and TSNE model and plots it\"\n    labels = []\n    tokens = []\n\n    for word in model.wv.vocab:\n        tokens.append(model[word])\n        labels.append(word)\n    \n    tsne_model = TSNE(perplexity=40, n_components=2, init='pca', n_iter=2500, random_state=23)\n    new_values = tsne_model.fit_transform(tokens)\n\n    x = []\n    y = []\n    for value in new_values:\n        x.append(value[0])\n        y.append(value[1])\n        \n    plt.figure(figsize=(10, 10)) \n    for i in range(len(x)):\n        plt.scatter(x[i],y[i])\n        plt.annotate(labels[i],\n                     xy=(x[i], y[i]),\n                     xytext=(5, 2),\n                     textcoords='offset points',\n                     ha='right',\n                     va='bottom')\n    plt.show()\n","88e56437":"tsne_plot(model)","1a5a2476":"postive=rating_df[rating_df['rating']>3]['review'][:2000]\nnegative=rating_df[rating_df['rating']<2.5]['review'][:2000]\n\ndef return_corpus(df):\n    corpus=[]\n    for review in df:\n        tagged=nltk.pos_tag(word_tokenize(review))\n        adj=[]\n        for x in tagged:\n            if x[1]=='JJ':\n                adj.append(x[0])\n        corpus.append(adj)\n    return corpus","90bb195a":"corpus=return_corpus(postive)\nmodel = word2vec.Word2Vec(corpus, size=100, min_count=10,window=20, workers=4)\ntsne_plot(model)","0f38c8d1":"corpus=return_corpus(negative)\nmodel = word2vec.Word2Vec(corpus, size=100, min_count=10,window=20, workers=4)\ntsne_plot(model)","b3633af1":"rating_df['sent']=rating_df['rating'].apply(lambda x: 1 if int(x)>2.5 else 0)","380efb10":"max_features=3000\ntokenizer=Tokenizer(num_words=max_features,split=' ')\ntokenizer.fit_on_texts(rating_df['review'].values)\nX = tokenizer.texts_to_sequences(rating_df['review'].values)\nX = pad_sequences(X)\n","278fdda5":"embed_dim = 32\nlstm_out = 32\n\nmodel = Sequential()\nmodel.add(Embedding(max_features, embed_dim,input_length = X.shape[1]))\n#model.add(SpatialDropout1D(0.4))\nmodel.add(LSTM(lstm_out, dropout=0.2, recurrent_dropout=0.2))\nmodel.add(Dense(2,activation='softmax'))\n\nmodel.compile(loss = 'categorical_crossentropy', optimizer='adam',metrics = ['accuracy'])\nprint(model.summary())","fcaa651b":"Y = pd.get_dummies(rating_df['sent'].astype(int)).values\nX_train, X_test, Y_train, Y_test = train_test_split(X,Y, test_size = 0.33, random_state = 42)\nprint(X_train.shape,Y_train.shape)\nprint(X_test.shape,Y_test.shape)\n\n","48d71898":"batch_size = 3200\nmodel.fit(X_train, Y_train, epochs = 5, batch_size=batch_size)\n","3bfe020b":"validation_size = 1500\n\nX_validate = X_test[-validation_size:]\nY_validate = Y_test[-validation_size:]\nX_test = X_test[:-validation_size]\nY_test = Y_test[:-validation_size]\nscore,acc = model.evaluate(X_test, Y_test, verbose = 2, batch_size = batch_size)\nprint(\"score: %.2f\" % (score))\nprint(\"acc: %.2f\" % (acc))","6b73f90d":"## [Which are the top restaurant chains in Bangaluru?]()<a id=\"4\"><\/a> <br>\n","89771cd4":"### [Finding Best budget Restaurants in any location]()","d188d977":"## [Wordcloud of dishes liked by cuisines.]()<a id=\"24\"><\/a> <br>\n","e0f5fa93":"- No surprises,Cafe coffee day restaurant dominated way over other cafe chains in Banglore.\n- Cafe coffee day has 96 outlets in Banglore.\n- Caf\u00e9 Coffee Day was started as a retail restaurant in 1996. The first CCD outlet was set up on July 11, 1996, at Brigade Road, Bengaluru, Karnataka.\n","23abbd61":"1. Almost more than 50 percent of restaurants has rating between 3 and 4.\n2. Restaurants having rating more than 4.5 are very rare.","d53a5f52":"## [Which are the most popular casual dining restaurant chains?]()<a id=\"18\"><\/a> <br>\n","1b33cf3f":"- Next, we will tokenize the data and vectorize the reviews to feed it to our model.\n","a53ac419":"## [Where are their outlets located?]()<a id=\"21\"><\/a> <br>\n","3acdbaf5":"<font size=5 color='blue'> What is in this kernel<\/font>","12ba5fef":"## [Top quick bites restaurant chains in Banglore]()<a id=\"20\"><\/a> <br>\n","f3b6f0a2":"## [Top Cafes of Banglore?]()<a id=\"22\"><\/a> <br>\n","3ee118fe":"### T-SNE of adjectivs used in postive reviews","fc384ae1":"- As the first step we will divide comments as negative and positive on the basis on rating provided.\n- Comments with rating below 2.5 is classified as negative and greater tham 2.5 as classified as positive.","473489c6":"## [Rating distribution]()<a id=\"6\"><\/a> <br>\n","bd2fad5c":"## [WordCloud of Reviews of restaurant chains]()<a id=\"27\"><\/a><br>","91121261":"## [What is the ratio b\/w restaurants that provide and do not provide table booking ?]()<a id=\"25\"><\/a> <br>\n\n","89195386":"1. It is clear that restaurants tend to concentrate in central bangalore area.\n2. The clutter of restaurants lowers are we move away from central.\n3. So,potential restaurant entrepreneurs can refer this and find out good locations for their venture.","494257b9":"#### Train and test split","79360cdc":"## [Analysing Restaurant chains]()<a id=\"17\"><\/a> <br>\n ","8a3a4d1c":"Now,\n   - we will remove stopwords\n   - Lemmatize each word\n   - Create corpus\n   - Tokenize them","d277b47b":"1. [Loading required libraries](#1)\n2. [Getting basic ideas about the data](#2)\n3. [Exploratory data analysis](#3)\n\n     1. [ Which are the top restaurant chains in Bangaluru?](#4)\n     2. [How many of the restuarants do not accept online orders?](#5)\n     3. [What is the ratio b\/w restaurants that provide and do not provide table booking ?](#25)\n     4. [ Rating distribution](#6)\n     5. [Is there any difference b\/w votes of restaurants accepting and not accepting online orders?](#7)\n     6. [Which are the most common restaurant type in Banglore?](#8)\n     7. [Cost factor ?](#9)\n     8. [Which are the foodie areas?](#10)\n     9. [Which are the most common cuisines in each locations?](#11)\n     10. [Extracting location information using Geopy](#12)\n     11. [Heatmap of restaurant count on each location](13)\n     12. [Which are  the most popular cuisines of Bangalore?](#14)\n     13. [Heatmap of North Indian restaurants](#15)\n     14. [What about South  Indian cuisines?](#16)\n     15. [Analysing Restaurant chains ](#17)\n            16. [Which are the most popular casual dining restaurant chains?](#18)\n                   1. [Where are their outlets located?](#19)\n            17. [Top quick bites restaurant chains in Banglore](#20)\n                   1. [Where are their outlets located?](#21)\n            18. [Top Cafes of Banglore?](#22)\n                   1. [Where are their outlets located?](#23)\n            19. [Wordcloud of dishes liked by cuisines.](#24)\n     20. [Analysing Reviews](#26)\n            21. [Wordcloud of restaurant reviews](#27)\n            22. [Rating distribution](#28)\n4. [Topic modelling](#33)\n     23. [Topic modelling for positive comments](#34)\n     24. [Topic modelling for positive comments](#35)\n         \n            \n5. [Sentimental Analysis on Reviews](#29)\n     23. [Data preparation](#30)\n     24. [Building our model](#31)\n     25. [Validation](#32)\n     ","8b6c2ac1":"![](https:\/\/www.geeksforgeeks.org\/wp-content\/uploads\/Twitter-Sentiment-Analysis-using-Python.jpg)","eeb27391":"For doing sentimental analysis on reviews provided bt users.We have to prepare our data in appropriate format.\nWe will map reviews to positive and negative on the basis of the ratings provided by each user.So,we will map reviews to negative if the rating given is less than 2.5 and positive if rating is greater than 2.5 \n","736f3c7c":"1. We can see that **Mani's dum biriyani** restaurant has half of their restaurants in central Banglore.\n2. ** Empire Restaurant** is present in all over Banglore.\n3. **Mani's dum Biriyani** has 12 outlets in ulsoor,which is the most in a single location.","295a2dae":"## [Getting Basic Ideas]()<a id=\"2\"><\/a> <br>\n","fb3379fe":"## [Data preparation]()<a id=\"30\" ><\/a><br>\n","a40a5943":"## [Which are the most common cuisines in each locations?]()<a id=\"11\"><\/a> <br>\n","a5ab893e":"## [What about South  Indian cuisines?]()<a id=\"16\"><\/a> <br>\n","6e310436":"- We will now encode our target variable. **pd.get_dummies** is used for on-hot encoding.\n- 33 percent of data is reserved for testing our model","b5eccce5":"<font size=5 color=\"violet\">If you like my work,please consider <font color='red'>upvoting<\/font> my kernel.<\/font>","c8d92941":"(t-SNE) t-Distributed Stochastic Neighbor Embedding is a non-linear dimensionality reduction algorithm used for exploring high-dimensional data. It maps multi-dimensional data to two or more dimensions suitable for human observation. With help of the t-SNE algorithms, you may have to plot fewer exploratory data analysis plots next time you work with high dimensional data.\n![](https:\/\/s3-ap-south-1.amazonaws.com\/av-blog-media\/wp-content\/uploads\/2017\/01\/19100947\/20131959678_bf1a8e3fcc_b-768x798.jpg)","c8d54ab4":"1. As clearly indicated,almost 60 per cent of restaurants in Banglore accepts online orders.\n2. Nearly 40 per cent of the restaurants do not accept online orders.\n3. This might be because of the fact that these restaurants cannot afford to pay commission to zomoto for giving them orders online.\n   zomato may want to consider giving them some more benefits if they want to increse the number of restaurants serving their customers online.\n","780a588f":"## [Cost vs rating]()","1611514f":"## [Where are their outlets located?]()<a id=\"19\"><\/a> <br>\n","f302a06f":"## [Topic modeling for negative comments]()<a id=\"35\" ><\/a><br>","224ddd78":"1. Yes,you can observe that median number of votes for both categories vary.\n2. Restaurants accepting online orders tend to get more votes from customers as there is a rating option poping up after each order through zomato application.","7d12830b":"Now we will use word2vec to represent each word as a vector.","542d1a0d":"- We can see tht **Empire restaurant,Beijing bites and Mani's dum biriyani** are the most popular casual dining restaurant chains in Bangalore.\n- We will inspect them further...","278f0f3c":"Wow,we can observe all the adjective used in the postive reviews represented in the 2D space.","6a823a25":"##  [Topic modeling for positive comments]()<a id=\"34\" ><\/a><br>","a533b1af":"## [How many of the restuarants do not accept online orders?]()<a id=\"5\"><\/a> <br>\n","4387c29a":"## [Heatmap of North Indian restaurants]()<a id=\"15\"><\/a> <br>\n","f110f29a":"![](https:\/\/media.giphy.com\/media\/tWRJEZeQeHAqs\/giphy.gif)","49b8157c":"## [Heatmap of restaurant count on each location]()<a id=\"13\"><\/a> <br>\n","45c24287":"We will do topic modelling for postive and negative comments seperately to understand the different between the two types.","e0060b27":"Sentiment Analysis is the process of computationally determining whether a piece of writing is positive, negative or neutral. It\u2019s also known as opinion mining, deriving the opinion or attitude of a speaker.\n\n","f3b592ae":"## [Cost factor ?]()<a id=\"9\"><\/a> <br>\n","a9be271c":"1. No doubt about this as Banglore is known as the tech capital of India,people having busy and modern life will prefer Quick Bites.\n2. We can observe tha Quick Bites type restaurants dominates.","b0af01ba":"### T-SNE of Reviews ","84cd5479":"<body>\n    <font size=6 color=\"red\">Background checkup<\/font>\n<\/body>\n ","1caf13a7":"## [Topic modelling]()<a id=\"33\" ><\/a><br>","e5291e82":"- We can see that the distribution if left skewed.\n- This means almost 90percent of restaurants serve food for budget less than 1000 INR.($15)","6a4fdff3":"## [Building our model]()<a id=\"31\" ><\/a><br>","9cc4c385":"1. We can see that **BTM,HSR and Koranmangala 5th block** has the most number of restaurants.\n2. BTM dominates the section by having more than 5000 restaurants.","2313422b":"The basic idea of analyzing the Zomato dataset is to get a fair idea about the factors affecting the establishment of different types of restaurant at different places in Bengaluru, aggregate rating of each restaurant, Bengaluru being one such city has more than 12,000 restaurants with restaurants serving dishes from all over the world. With each day new restaurants opening the industry has\u2019nt been saturated yet and the demand is increasing day by day. Inspite of increasing demand it however has become difficult for new restaurants to compete with established restaurants. Most of them serving the same food. Bengaluru being an IT capital of India. Most of the people here are dependent mainly on the restaurant food as they don\u2019t have time to cook for themselves. With such an overwhelming demand of restaurants it has therefore become important to study the demography of a location.\n\n- What kind of a food is more popular in a locality. \n- Do the entire locality loves vegetarian food. If yes then is that locality populated by a particular sect of people for eg. Jain, Marwaris, Gujaratis who are mostly vegetarian. These kind of analysis can be done using the data, by studying the factors such as \u2022 Location of the restaurant \u2022 Approx Price of food  Theme based restaurant or not \n-  Which locality of that city serves that cuisines with maximum number of restaurants \u2022 The needs of people who are striving to get the best cuisine of the neighborhood \u2022 Is a particular neighborhood famous for its own kind of food.","9943f9dd":"## [Is there any difference b\/w votes of restaurants accepting and not accepting online orders?]()<a id=\"7\"><\/a> <br>\n","133b1437":"## [Extracting location information using Geopy]()<a id=\"12\"><\/a> <br>\n","64fa415c":"We will take 1500 rows to validate our model.We have choosen **accuacy** to be our evaluation criteria.","65f122a6":"- As you can see **Cafe coffee day,Onesta,Just Bake** has the most number of outlets in and around bangalore.\n- This is rather interesting,we will inspect each of them later.","f7f0213d":"## [Analysing Reviews]()<a id=\"26\"><\/a><br>","e2c00cfd":"1. We can observe that **North Indian,chinese,South Indian and Biriyani** are most common.\n2. Is this imply the fact that Banglore is more influenced by North Indian culture more than South?\n- We will inspect further......","74842f00":"## [Where are their outlets located?]()<a id=\"23\"><\/a> <br>\n","c6710223":"1. Interesting to see a cluster of North Indian Restaurants in South Bangalore area !\n2. This may indicate that these areas are more populated by North Indians.","7d23a13e":"### [Validating our model]()<a id=\"32\" ><\/a><br>","34517b24":"## [Visualizing output]()<a id=\"28\" ><\/a><br>","9967ec25":"### [Distribution of cost for two people]()","47e37283":"**Word Counts of Topic Keywords**\n\nWhen it comes to the keywords in the topics, the importance (weights) of the keywords matters. Along with that, how frequently the words have appeared in the documents is also interesting to look.\n\nLet\u2019s plot the word counts and the weights of each keyword in the same chart.\n\nYou want to keep an eye out on the words that occur in multiple topics and the ones whose relative frequency is more than the weight. Often such words turn out to be less important. The chart I\u2019ve drawn below is a result of adding several such words to the stop words list in the beginning and re-running the training process.","1112a5b0":"- In this section we will go on to prepare reviews dataframe.\n- We will extract reviews and ratings of each restaurant and create a dataframe with it.\n","dc3a9f94":"## [Which are the most common restaurant type in Banglore?]()<a id=\"8\"><\/a> <br>\n","d4eed639":"1. They tend to span all over Bangalore.\n2. South Indian cuisines tend to cluster near central Bangalore.","9e2f8d93":"In this section we will visualize words used in reviews in a 2 dimensional space.\n- For that we will first lemmatize and tokenize each reviews and build a corpus out of it.","e7d74c72":"## [Which are  the most popular cuisines of Bangalore?]()<a id=\"14\"><\/a> <br>\n","19ef97ad":"<font color='red' size=4>  If you like my kernel please consider upvoting.<\/font>\n\n<font color='green' size=3>Comments are most welcomed !<\/font>    ","321e443c":"## [Rating distribution]()<a id=\"28\" ><\/a><br>","2d32bab9":"## [Which are the foodie areas?]()<a id=\"10\"><\/a> <br>\n","5380a005":"## [Sentimental Analysis]()<a id=\"29\" ><\/a><br>","e58e2059":"## [Exploratory data analysis](#3)","61700a4e":"- We have found out latitude and longitude of each location listed in the dataset using geopy.\n- This is used to plot maps.","caf5a8ff":"- Surprisingly  ** Five star chicken** dominates in quick bites restaurant types overtaking famous **Domino's Pizza and McDonald's**.\n- Five Star Chicken is a branch of Charoen Pokphand Group Foods, a Thai multinational conglomerate with over $12 billion business in Agro and Food       Industries. Five Star Chicken specialties in fried chicken.","62697dc1":"## [Loading libraries]()<a id=\"1\"><\/a> <br>\n","82bffdb7":"**Columns description**\n\n- **url**\ncontains the url of the restaurant in the zomato website\n\n- **address**\ncontains the address of the restaurant in Bengaluru\n\n- **name**\ncontains the name of the restaurant\n\n- **online_order**\nwhether online ordering is available in the restaurant or not\n\n- **book_table**\ntable book option available or not\n\n- **rate**\ncontains the overall rating of the restaurant out of 5\n\n- **votes**\ncontains total number of rating for the restaurant as of the above mentioned date\n\n- **phone**\ncontains the phone number of the restaurant\n\n- **location**\ncontains the neighborhood in which the restaurant is located\n\n- **rest_type**\nrestaurant type\n\n- **dish_liked**\ndishes people liked in the restaurant\n\n- **cuisines**\nfood styles, separated by comma\n\n- **approx_cost(for two people)**\ncontains the approximate cost for meal for two people\n\n- **reviews_list**\nlist of tuples containing reviews for the restaurant, each tuple \n\n- **menu_item**\ncontains list of menus available in the restaurant\n\n- **listed_in(type)**\ntype of meal\n\n- **listed_in(city)**\ncontains the neighborhood in which the restaurant is listed\n","02cf5169":"**Latent Dirichlet allocation**","203a9037":"> Now we will  use **Termfrequency Inverse doc frequency(Tfidf)** to vectorize the tokens.","8cc7453b":"1. The median approximate cost for two people is 400 for a single meal.\n2. 50 percent of restaurants charge between 300 and 650 for single meal for two people.\n","7fa2a3b7":"- I have implemented a simple filtering mechanism to find best budget restaurants in any locations in Bangalore.\n- You can pass location and restaurant type as parameteres,function will return name of restaurants.\n","4160cb82":"### T-SNE of adjectives used in Negative reviews","82d60bd3":"- ","7c2f98fc":"1. Almost 90 percent of restaurants in Banglore do not provide table booking facility.\n2. In India you cannot find table booking facility in any average restaurants,usually only five star restaurants provides table booking.\n3. We will inspect this further.","c28b4948":"- We can clearly observe the difference between the two types of comments\n- The words used are clearly distinguishable.\n- The words used in negative comments are clearly critisizing.\n- The word used in positive comments  are clearly appreciating."}}