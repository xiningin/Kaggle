{"cell_type":{"0419881b":"code","09f05267":"code","aeea716e":"code","7058094e":"code","2ed85d15":"code","7559b68e":"code","f4b0feb2":"code","8e47348e":"code","22e275d0":"code","ef8f1db8":"code","f5d72747":"code","6b98a66c":"code","f9467f22":"code","39d80fc7":"code","3fdc58e7":"code","db550b4a":"code","721f9308":"code","75a7c139":"code","5737bfd1":"code","f24cc4bb":"code","85f3bd96":"code","0204f2aa":"code","0b790f80":"code","b2243ad5":"code","ea9926d3":"code","cfe2aeb8":"code","071ab205":"code","cee5a509":"code","bedd9450":"code","2530cdf8":"code","eb269863":"code","eb6d1e0f":"code","cd2df331":"code","3f9a4e80":"code","fa7da53d":"code","67d8aba5":"code","932d3fe9":"code","5f3edb72":"code","66633028":"code","751b77bf":"code","f7bc688c":"code","3b924d1a":"code","9ae9b7dc":"code","90731131":"code","a69b5364":"code","572a6083":"markdown","4a34e899":"markdown","b3f44dd7":"markdown","2ebfd2ed":"markdown","936ae2e8":"markdown","6f36746e":"markdown","37cdc762":"markdown","e222282f":"markdown","d942b3f2":"markdown"},"source":{"0419881b":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport lightgbm as lgbm\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom sklearn.model_selection import KFold, StratifiedKFold\nfrom sklearn.metrics import log_loss\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.ensemble import RandomForestClassifier, ExtraTreesClassifier\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.svm import SVC\n\nfrom keras.models import Sequential\nfrom keras.layers import Dense\nfrom keras.layers import Dense, Dropout, BatchNormalization, Activation \nfrom keras.callbacks import EarlyStopping, ModelCheckpoint\n\nimport gc\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory\n\nimport os\nprint(os.listdir(\"..\/input\"))\n\n# Any results you write to the current directory are saved as output.","09f05267":"train = pd.read_csv('..\/input\/kaggletutorial\/covertype_train.csv')\ntest = pd.read_csv('..\/input\/kaggletutorial\/covertype_test.csv')","aeea716e":"train.shape","7058094e":"test.shape","2ed85d15":"train.head()","7559b68e":"train.info()","f4b0feb2":"train.describe()","8e47348e":"dtype_df = train.dtypes.reset_index()\ndtype_df.columns = ['column','dtype']\ndtype_df.groupby(['dtype']).agg('count').reset_index()","22e275d0":"train.isnull().sum()","ef8f1db8":"missing_df = train.isnull().sum().reset_index()\nmissing_df.columns = ['column', 'count']\nmissing_df['ratio'] = missing_df['count'] \/ train.shape[0]\nmissing_df.loc[missing_df['ratio'] != 0]","f5d72747":"set(train.columns) - set(test.columns)","6b98a66c":"train['Cover_Type'].value_counts() \/ train.shape[0] * 100","f9467f22":"train['Cover_Type'].value_counts().plot(kind='bar')\nplt.show()","39d80fc7":"plt.figure(figsize=(8,6))\nplt.plot(train['Cover_Type'].cumsum())\nplt.title('ID Leak')\nplt.show()","3fdc58e7":"category_feature = [ col for col in train.columns if train[col].dtypes == \"object\"]\ncategory_feature","db550b4a":"train[category_feature].head()","721f9308":"train[category_feature].nunique()","75a7c139":"for col in category_feature:\n    train[col].value_counts().plot(kind='bar')\n    plt.title(col)\n    plt.show()","5737bfd1":"soiltype_df = train.groupby(['Soil_Type','Cover_Type'])['Soil_Type'].count().unstack('Cover_Type')\nsoiltype_df","f24cc4bb":"soiltype_df.plot(kind='bar', figsize=(20,10))\nplt.title('SoilType')\nplt.show()","85f3bd96":"wildeness_df = train.groupby(['Wilderness_Area','Cover_Type'])['Wilderness_Area'].count().unstack('Cover_Type')\nwildeness_df","0204f2aa":"wildeness_df.plot(kind='bar', figsize=(20,10))\nplt.title('Wilderness_Area')\nplt.show()","0b790f80":"oiltype_df = train.groupby(['oil_Type','Cover_Type'])['oil_Type'].count().unstack('Cover_Type')\noiltype_df.plot(kind='bar', figsize=(20,10))\nplt.title('oil_Type')\nplt.show()","b2243ad5":"all_data_cat = pd.concat([train[category_feature], test[category_feature]])","ea9926d3":"np.sum(np.abs(all_data_cat['Soil_Type'].factorize()[0] - all_data_cat['oil_Type'].factorize()[0]))","cfe2aeb8":"all_data_cat['Soil_Type']","071ab205":"all_data_cat['Soil_Type'].factorize()[0]","cee5a509":"%timeit(np.sum(np.abs(train['Soil_Type'].factorize()[0] - train['oil_Type'].factorize()[0])))","bedd9450":"all_data_cat['is_same'] = all_data_cat.apply(lambda row: 1 if row['Soil_Type']== row['oil_Type'] else 0 ,axis=1)\nall_data_cat.loc[all_data_cat['is_same']==0]","2530cdf8":"%timeit(all_data_cat.apply(lambda row: 1 if row['Soil_Type']== row['oil_Type'] else 0 ,axis=1))","eb269863":"numerical_feature = list(set(train.columns) - set(category_feature) - set(['ID','Cover_Type']))\nnumerical_feature = np.sort(numerical_feature)\nnumerical_feature","eb6d1e0f":"for col in numerical_feature:\n    sns.distplot(train.loc[train[col].notnull(), col])\n    plt.title(col)\n    plt.show()","cd2df331":"for col in numerical_feature:\n    col_value = train.loc[train[col].notnull(), col]\n    \n    fig, axs = plt.subplots(ncols=2,figsize=(10,4))\n    sns.distplot(col_value, ax=axs[0])\n    axs[0].set_title(col)\n    sns.distplot(np.log1p(col_value), ax=axs[1])\n    axs[1].set_title('Log transfrom {}'.format(col))\n    plt.show()","3f9a4e80":"train.loc[train['Vertical_Distance_To_Hydrology']<0].head()","fa7da53d":"sns.distplot(train['Vertical_Distance_To_Hydrology'])\nplt.title('Vertical_Distance_To_Hydrology Distribution')\nplt.show()","67d8aba5":"distance_feature = [col for col in train.columns if col.find('Distance') != -1 ]\ndistance_feature","932d3fe9":"sns.pairplot(train[distance_feature + ['Cover_Type']], hue='Cover_Type', \n             x_vars=distance_feature, y_vars=distance_feature, height=3)\nplt.show()","5f3edb72":"other_numerical_feature = [col for col in numerical_feature if col.find('Distance') == -1]\nother_numerical_df = train[other_numerical_feature + ['Cover_Type']]\nother_numerical_df['Elevation'] = np.log1p(other_numerical_df['Elevation'])\n\nsns.pairplot(other_numerical_df.dropna(), x_vars=other_numerical_feature, y_vars=other_numerical_feature, \n             hue='Cover_Type', height=3)\nplt.show()","66633028":"other_numerical_feature = [col for col in numerical_feature if col.find('Distance') == -1]\ndistance_numerical_df = train.copy()\ndistance_numerical_df['Elevation'] = np.log1p(distance_numerical_df['Elevation'])\n\nsns.pairplot(distance_numerical_df.dropna(), x_vars=other_numerical_feature, y_vars=distance_feature, \n             hue='Cover_Type', height=3)\nplt.show()\n\ndel distance_numerical_df","751b77bf":"for col in train.loc[:,train.dtypes=='object'].columns:\n    train[col] = train[col].factorize()[0]","f7bc688c":"wilderness_area_uniqlist = train['Wilderness_Area'].unique()\n\nfor col in numerical_feature:\n    plt.figure(figsize=(12,6))\n    sns.boxplot(x='Wilderness_Area', y=col, hue='Cover_Type', data=train.dropna())\n    plt.title(\"Wilderness_Area - {}\".format(col))\n    plt.show()\n    \n    fig, axes = plt.subplots(nrows=4, figsize=(10,8))\n    for index, wild in enumerate(wilderness_area_uniqlist):\n        try:\n            wild_frame = train.loc[train['Wilderness_Area']==wild].dropna()\n            \n            axes[index].set_title('Wilderness_Area {} vs {}'.format(wild, col))\n            sns.distplot(wild_frame.loc[wild_frame['Cover_Type']==1,col], ax=axes[index])\n            sns.distplot(wild_frame.loc[wild_frame['Cover_Type']==0,col], ax=axes[index])         \n        except:\n            pass\n        else:\n            del wild_frame\n            gc.collect()\n    plt.tight_layout()\n    plt.show()","3b924d1a":"soil_frame = train.loc[train['Soil_Type']==1].dropna()   ","9ae9b7dc":"soil_frame.loc[soil_frame['Cover_Type']==0, 'Aspect'].shape[0]","90731131":"soil_frame.loc[soil_frame['Cover_Type']==1, 'Aspect'].shape[0]","a69b5364":"soiltype_uniqlist = train['Soil_Type'].unique()\n\nfor col in numerical_feature:\n    plt.figure(figsize=(16,8))\n    sns.boxplot(x='Soil_Type', y=col, hue='Cover_Type', data=train.dropna())\n    plt.title(\"Soil_Type - {}\".format(col))\n    plt.show()\n    \n    soiltype_uniqlist = train['Soil_Type'].unique()\n    for index, soil in enumerate(soiltype_uniqlist):\n        try:\n            fig, axes = plt.subplots(ncols=2, figsize=(6,3))\n            soil_frame = train.loc[train['Soil_Type']==soil].dropna()        \n            sns.distplot(soil_frame[col], ax=axes[0])  \n            sns.distplot(soil_frame.loc[soil_frame['Cover_Type']==1, col], ax=axes[1])  \n            sns.distplot(soil_frame.loc[soil_frame['Cover_Type']==0, col], ax=axes[1]) \n            axes[0].set_title('Soil_Type {} \\n{}'.format(soil, col))\n            axes[1].set_title('CoverType')\n            axes[1].legend([1,0])\n            plt.tight_layout()\n            plt.show()\n        except:\n            pass\n        else: \n            del soil_frame\n            gc.collect()","572a6083":"# \uae30\ubcf8\uc801\uc778 Data \ud0d0\uc0c9\uc744 \uc2dc\uc791\ud558\uaca0\uc2b5\ub2c8\ub2e4.","4a34e899":"### Column Type Check","b3f44dd7":"### Category vs Numerical","2ebfd2ed":"### Category Feature","936ae2e8":"### Numerical Feature","6f36746e":"### Column Duplicate Check","37cdc762":"### Numerical Feature vs Numerical Feature","e222282f":"### Null Check","d942b3f2":"### Target Value Check"}}