{"cell_type":{"f21df752":"code","d9c2154c":"code","01c42e50":"code","86ea774d":"code","b76095e5":"code","89581536":"code","8fc52116":"code","7ccee299":"code","cd065343":"code","20ca121e":"code","427c6329":"code","23346b88":"code","d3cb9d71":"code","5bcf069f":"code","0acf8bc1":"code","7582680f":"code","5bcf8749":"markdown","6b18b209":"markdown","b67961d9":"markdown","cc7adfe3":"markdown","b5543ee0":"markdown","359e77d5":"markdown","4244e121":"markdown","050317ea":"markdown","00db38f9":"markdown","565b5fbd":"markdown"},"source":{"f21df752":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib as mpl\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n# Add plotly library\nfrom plotly.offline import init_notebook_mode, iplot, plot\nimport plotly as py\ninit_notebook_mode(connected=True)\nimport plotly.graph_objs as go\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","d9c2154c":"credits=pd.read_csv('..\/input\/tmdb-movie-metadata\/tmdb_5000_credits.csv')\nmovies=pd.read_csv('..\/input\/tmdb-movie-metadata\/tmdb_5000_movies.csv')","01c42e50":"movies.columns","86ea774d":"movies.head(5)","b76095e5":"# Way 1: Find the index of top 10 acc. to runTime\n#movieInd=[]\n#for i in runTime:\n#    movieInd.append(list(duration).index(i))\n    \n# Way 2: Find the index of top 10 acc. to runTime\nnew_index = (movies['runtime'].sort_values(ascending=False)).index.values\nsorted_data = movies.reindex(new_index)[:11]\n\n# visualization\nplt.figure(figsize=(15,10))\nsns.barplot(x=sorted_data['title'], y=sorted_data['runtime'])\nplt.xticks(rotation= -15)\nplt.xlabel('Name of the Movie')\nplt.ylabel('Duration of the Movie (minute)')\nplt.title('Top 10 Movie with the Longest Duration')\nplt.show()","89581536":"# Draw the barplot with Plotly Library\n\n# import graph objects as \"go\"\nimport plotly.graph_objs as go\n# create trace1 \ntrace1 = go.Bar(\n                x = sorted_data.title,\n                y = sorted_data.runtime,\n                name = \"Duration of the Movie\",\n                marker = dict(color = 'rgba(255, 174, 255, 0.5)',\n                             line=dict(color='rgb(0,0,0)',width=1.5)),\n                text = sorted_data.title)\ndata = trace1\nlayout = go.Layout(barmode = \"relative\")\nfig = go.Figure(data = data, layout = layout)\niplot(fig)","8fc52116":"new_index = (movies['revenue'].sort_values(ascending=False)).index.values\nsorted_data = movies.reindex(new_index)[:11]\nprofit = sorted_data[[\"budget\", \"revenue\"]]\n\nInd=[]    \nfor i in range(0,11):\n    Ind.append(list(profit[\"revenue\"])[i]-list(profit[\"budget\"])[i])  \nprint(\"Calculation Result: {}\".format(Ind))\n\nsorted_data['Profit']=pd.DataFrame({\"Profit\" : Ind}) \nprint(\"Data Result: {}\".format(np.array(sorted_data['Profit'])))","7ccee299":"sorted_data.columns","cd065343":"data = sorted_data\n\n# visualize\nf,ax1 = plt.subplots(figsize =(16,8))\nsns.pointplot(x='title',y='budget',data=data,color='lime',alpha=0.8)\nsns.pointplot(x='title',y='revenue',data=data,color='red',alpha=0.8)\nsns.pointplot(x='title',y='Profit',data=data,color='black',alpha=0.8)\nplt.text(40,0.55,'budget',color='lime',fontsize = 18,style = 'italic')\nplt.text(40,0.6,'revenue',color='red',fontsize = 17,style = 'italic')\nplt.text(40,0.55,'Profit',color='black',fontsize = 18,style = 'italic')\nplt.xlabel('Name',fontsize = 15,color='blue')\nplt.ylabel('Values (billion)',fontsize = 15,color='blue')\nplt.title('Analysis of the Movies for Budget, Revenue, Profit ',fontsize = 20,color='blue')\nplt.xticks(rotation= -18)\nplt.grid()","20ca121e":"# prepare data frames\nR = sorted_data[\"revenue\"]\nB = sorted_data[\"budget\"]\nP = sorted_data[\"Profit\"]\nN = sorted_data[\"title\"]\n\n# import graph objects as \"go\"\nimport plotly.graph_objs as go\n# creating trace1\ntrace1 =go.Scatter(\n                    x = N,\n                    y = R,\n                    mode = \"markers\",\n                    name = \"revenue\",\n                    marker = dict(color = 'rgba(255, 128, 255, 0.8)'), # 255 de\u011feri red-green-blue aras\u0131 bir de\u011fer ile rengi verir. 0.8 ise saydaml\u0131\u011f\u0131 ifade eder\n                    text= N)\n# creating trace2\ntrace2 =go.Scatter(\n                    x = N,\n                    y = B,\n                    mode = \"markers\",\n                    name = \"budget\",\n                    marker = dict(color = 'rgba(255, 128, 2, 0.8)'),\n                    text= N)\n# creating trace3\ntrace3 =go.Scatter(\n                    x = N,\n                    y = P,\n                    mode = \"markers\",\n                    name = \"profit\",\n                    marker = dict(color = 'rgba(0, 255, 200, 0.8)'),\n                    text= N)\ndata = [trace1, trace2, trace3]\nlayout = dict(title = 'Analysis of the Movies for Budget, Revenue, Profit',\n              xaxis= dict(title= 'Name of the Movies',ticklen= 5,zeroline= False), # kal\u0131nl\u0131\u011f\u0131 ifade eder\n              yaxis= dict(title= 'Values',ticklen= 5,zeroline= False)\n             )\nfig = dict(data = data, layout = layout)\niplot(fig)","427c6329":"movies.head(2)","23346b88":"new_index = (movies['vote_average'].sort_values(ascending=False)).index.values\nsorted_data = movies.reindex(new_index)\nCount_T=np.mean(sorted_data[\"vote_count\"])\nsorted_data=sorted_data[sorted_data[\"vote_count\"]>Count_T][:10] # Choose the vote number bigger than Count_T","d3cb9d71":"# vote numbers per movies\nlabels = sorted_data.title\n#colors = ['grey','blue','red','yellow','green','brown']\nexplode = [0,0,0,0,0,0,0,0,0,0]\nsizes = sorted_data.vote_count.values\n\n# visual\nplt.figure(figsize = (7,7))\nplt.pie(sizes, explode=explode, labels=labels, autopct='%1.1f%%')\nplt.title('Vote Counts According to the Movie Names',color = 'blue',fontsize = 15)\nplt.show()","5bcf069f":"# vote numbers per movies\n\npie1 = sorted_data.vote_count\n#pie1_list = [float(each.replace(',', '.')) for each in df2016.num_students]  # str(2,4) => str(2.4) = > float(2.4) = 2.4\nlabels = sorted_data.title\n# figure\nfig = {\n  \"data\": [\n    {\n      \"values\": pie1,\n      \"labels\": labels,\n      \"domain\": {\"x\": [0, .5]},\n      \"name\": \"Number of Vote\",\n      \"hoverinfo\":\"label+percent+name\",\n      \"hole\": .3,\n      \"type\": \"pie\"\n    },],\n  \"layout\": {\n        \"title\":\"Vote Numbers per Movies\",\n        \"annotations\": [\n            { \"font\": { \"size\": 20},\n              \"showarrow\": True,\n              \"text\": \"Percentage of Vote\",\n                \"x\": 0.20,\n                \"y\": 1\n            },\n        ]\n    }\n}\niplot(fig)","0acf8bc1":"# Success rate is going to be calculated with this equation: (assume 10000=vote_count, 10=vote_average)\nav=10\ncnt=10000\ni=0\nSuccess_Rate=[]\nfor i in range(0,10):\n    Success_Rate.append(((list(sorted_data[\"vote_average\"])[i]\/av)*100*0.85)+((list(sorted_data[\"vote_count\"])[i]\/cnt)*100*0.15))\nsorted_data['Success_Rate'] = Success_Rate\nsorted_data.columns","7582680f":"# Here we see the most successful three movies\n\n# create trace1 \ntrace1 = go.Scatter(\n                x = sorted_data.title,\n                y = ((sorted_data.vote_count)\/100),\n                mode = \"lines\",\n                name = \"Vote Numbers\",\n                marker = dict(color = 'rgba(16, 112, 255, 0.8)'),\n                text = sorted_data.title)\n# create trace2 \ntrace2 = go.Scatter(\n                x = sorted_data.title,\n                y = ((sorted_data.vote_average)*10),\n                name = \"Vote Rate\",\n                mode = \"lines\",\n                marker = dict(color = 'rgba(16, 112, 2, 0.8)'),\n                text = sorted_data.title)\n# create trace3 \ntrace3 = go.Scatter(\n                x = sorted_data.title,\n                y = sorted_data.Success_Rate,\n                name = \"Success Rate\",\n                mode = \"lines+markers\",\n                marker = dict(color = 'rgba(255, 0, 0, 1)',\n                          line=dict(color='rgb(0,0,0)',width=1.5)),\n                text = sorted_data.title)\n\ndata = [trace1, trace2, trace3]\nlayout = dict(title = 'Movie Success Rate of Top 10 Universities ',\n              xaxis= dict(title= 'Most Successful 10 Movie',ticklen= 5,zeroline= False),\n              yaxis= dict(title= 'Value in Percentage (%) ',ticklen= 5,zeroline= False)\n             )\nfig = dict(data = data, layout = layout)\niplot(fig)\n\n\n","5bcf8749":"<a id=\"2\"><\/a> <br>\n2. > ** Movies according to the Runtime with Bar Plot**","6b18b209":"* Movies was classified according to the data frame.\n\n* Data was sorted to select top 10 movie. \n\n* Success Equation was created to decide the most successful movie. \n\n* Analysis of the selected data was made by visualizing with Seaborn and Plotly Libraries.","b67961d9":"<a id=\"6\"><\/a> <br>\n6. > ** CONCLUSION **","cc7adfe3":"# **Movie Success Evaluation**\n##### **Nuri Baran Ayana _ 05.04.2020**\n___\nThis notebook is useful to create a ranking between movies by using the dataset.\n\n<br>Content:\n1. [Loading Data and Explanation of Features](#1)\n1. [Movies according to the Runtime with Bar Plot](#2)\n1. [Profit Analsis of the Movies by comparing Revenue and Budget](#3)\n1. [Rate Analysis of the Movies by Vote Rate and Vote Number](#4)\n1. [Success of the Movies](#5)\n1. [Conslusion](#6)\n","b5543ee0":"<a id=\"3\"><\/a> <br>\n3.  > ** Profit Analsis of the Movies by comparing Revenue and Budget**","359e77d5":"<a id=\"1\"><\/a> <br>\n1. > ** Loading Data and Explanation of the Features**","4244e121":"##### How many people has voted these movies?","050317ea":"##### By analysing the graphics above we can observe which movie is more successful than the others economically. ","00db38f9":"<a id=\"5\"><\/a> <br>\n5.  > ** Success of the Movies**","565b5fbd":"<a id=\"4\"><\/a> <br>\n4.  > ** Rate Analysis of the Movies by Vote Rate and Vote Number**"}}