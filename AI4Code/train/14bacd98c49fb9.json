{"cell_type":{"dfbb4436":"code","12338395":"code","56958309":"code","c981c33e":"code","a205d821":"code","c6b724a7":"code","34c23cdf":"code","7a05097a":"code","52a95abd":"code","04cfb638":"markdown","b281e7fb":"markdown","53bb7971":"markdown"},"source":{"dfbb4436":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport pymc3 as pm\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport scipy.stats as stats\n\nplt.style.use(\"dark_background\")\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","12338395":"np.random.seed(42)\nobserved=np.random.randn(100)\nsns.distplot(observed);","56958309":"mean = np.mean(observed)\nmean","c981c33e":"x = np.linspace(-2,2,1000)\ny = stats.norm.pdf(x = x, loc=0, scale=1)\ny_pred = stats.norm.pdf(x = x, loc=mean, scale=1)\n\nfig,ax=plt.subplots()\nax.plot(x,y, label='Actual distribution')\nax.plot(x,y_pred, label='Predicted distribution')\n\nax.legend();\n","a205d821":"with pm.Model() as model:\n    mu = pm.Uniform(\"mu\", lower=-5, upper=5)\n    \n    obs = pm.Normal(\"obs\", mu=mu, sigma=1, observed=observed)\n    y_pred = pm.Normal(\"y_pred\", mu=mu, sigma=1)  # Omitting the obeserved data will produce a prediction.\n    \n    trace = pm.sample(10000, random_seed=42, return_inferencedata=False)","c6b724a7":"burnin = 500\n\ny_pred = trace[burnin:].get_values('y_pred')\nmu = trace[burnin:].get_values('mu')\n","34c23cdf":"fig,ax=plt.subplots()\nsns.distplot(y_pred)\n\nfig,ax=plt.subplots()\nsns.distplot(mu)\nax.set_title(r'$\\mu$')","7a05097a":"with model:\n    pm.traceplot(trace);","52a95abd":"with model:\n    pm.plot_posterior(trace);","04cfb638":"So we now want to check from what distribution this data could have come from (we pretend that we do not know it). \nAssume that we know $\\sigma$ but want to know $\\mu$. One very simple way would be to do:","b281e7fb":"## Normal distribution\nWe first create some random data from a normal distribution with $\\mu=0$ $\\sigma=1$ : $ N(0,1) $","53bb7971":"As an alternative we can use PyMC3 to rather get a probability distribution for $\\mu$."}}