{"cell_type":{"4204707f":"code","76ae6833":"code","bd609d00":"code","c04fb980":"code","09dc1f42":"code","72d9058e":"code","1fa76f40":"code","030bd6ce":"code","1ab6f6a0":"code","d3036fdb":"code","96200575":"code","30fbae8a":"code","a9843d85":"code","7db6c2bf":"code","55fe5a55":"code","dfb76087":"code","98f8f801":"code","a73220d1":"code","e2bb1a2d":"code","251a8ccf":"markdown","37e7b060":"markdown","b82323f6":"markdown","04af2601":"markdown","6b5d030f":"markdown","3b24f463":"markdown","df42b5fc":"markdown","5aaa3516":"markdown"},"source":{"4204707f":"import os\nimport math\nimport random\nimport time\n\nimport numpy as np\nimport pandas as pd\n\nimport torch\nimport torch.nn as nn\nfrom torch.utils.data import Dataset\nfrom torch.utils.data import DataLoader\n\nfrom transformers import AutoTokenizer\nfrom transformers import AutoModel\nfrom transformers import AutoConfig\n\nfrom sklearn.model_selection import KFold\nfrom sklearn.svm import SVR\n\nimport gc\ngc.enable()\n\nBATCH_SIZE = 32\nMAX_LEN = 248\nEVAL_SCHEDULE = [(0.50, 16), (0.49, 8), (0.48, 4), (0.47, 2), (-1., 1)]\nROBERTA_PATH = \"\/kaggle\/input\/roberta-base\"\nTOKENIZER_PATH = \"\/kaggle\/input\/roberta-base\"\nDEVICE = \"cuda\" if torch.cuda.is_available() else \"cpu\"\n\ntest_df = pd.read_csv(\"\/kaggle\/input\/commonlitreadabilityprize\/test.csv\")\nsubmission_df = pd.read_csv(\"\/kaggle\/input\/commonlitreadabilityprize\/sample_submission.csv\")\n\ntokenizer = AutoTokenizer.from_pretrained(TOKENIZER_PATH)","76ae6833":"sub_flag = True\nif len(submission_df) == 7:\n    sub_flag = False\n    submission_df.to_csv('submission.csv', index=False)","bd609d00":"class LitDataset(Dataset):\n    def __init__(self, df, inference_only=False):\n        super().__init__()\n\n        self.df = df        \n        self.inference_only = inference_only\n        self.text = df.excerpt.tolist()\n        #self.text = [text.replace(\"\\n\", \" \") for text in self.text]\n        \n        if not self.inference_only:\n            self.target = torch.tensor(df.target.values, dtype=torch.float32)        \n    \n        self.encoded = tokenizer.batch_encode_plus(\n            self.text,\n            padding = 'max_length',            \n            max_length = MAX_LEN,\n            truncation = True,\n            return_attention_mask=True\n        )        \n \n\n    def __len__(self):\n        return len(self.df)\n\n    \n    def __getitem__(self, index):        \n        input_ids = torch.tensor(self.encoded['input_ids'][index])\n        attention_mask = torch.tensor(self.encoded['attention_mask'][index])\n        \n        if self.inference_only:\n            return (input_ids, attention_mask)            \n        else:\n            target = self.target[index]\n            return (input_ids, attention_mask, target)","c04fb980":"class LitModel(nn.Module):\n    def __init__(self):\n        super().__init__()\n\n        config = AutoConfig.from_pretrained(ROBERTA_PATH)\n        config.update({\"output_hidden_states\":True, \n                       \"hidden_dropout_prob\": 0.0,\n                       \"layer_norm_eps\": 1e-7})                       \n        \n        self.roberta = AutoModel.from_pretrained(ROBERTA_PATH, config=config)  \n            \n        self.attention = nn.Sequential(            \n            nn.Linear(768, 512),            \n            nn.Tanh(),                       \n            nn.Linear(512, 1),\n            nn.Softmax(dim=1)\n        )        \n\n        self.regressor = nn.Sequential(                        \n            nn.Linear(768, 1)                        \n        )\n        \n\n    def forward(self, input_ids, attention_mask):\n        roberta_output = self.roberta(input_ids=input_ids,\n                                      attention_mask=attention_mask)        \n\n        # There are a total of 13 layers of hidden states.\n        # 1 for the embedding layer, and 12 for the 12 Roberta layers.\n        # We take the hidden states from the last Roberta layer.\n        last_layer_hidden_states = roberta_output.hidden_states[-1]\n\n        # The number of cells is MAX_LEN.\n        # The size of the hidden state of each cell is 768 (for roberta-base).\n        # In order to condense hidden states of all cells to a context vector,\n        # we compute a weighted average of the hidden states of all cells.\n        # We compute the weight of each cell, using the attention neural network.\n        weights = self.attention(last_layer_hidden_states)\n                \n        # weights.shape is BATCH_SIZE x MAX_LEN x 1\n        # last_layer_hidden_states.shape is BATCH_SIZE x MAX_LEN x 768        \n        # Now we compute context_vector as the weighted average.\n        # context_vector.shape is BATCH_SIZE x 768\n        context_vector = torch.sum(weights * last_layer_hidden_states, dim=1)        \n        \n        # Now we reduce the context vector to the prediction score.\n        return self.regressor(context_vector)","09dc1f42":"def predict(model, data_loader):\n    \"\"\"Returns an np.array with predictions of the |model| on |data_loader|\"\"\"\n    model.eval()\n\n    result = np.zeros(len(data_loader.dataset))    \n    index = 0\n    \n    with torch.no_grad():\n        for batch_num, (input_ids, attention_mask) in enumerate(data_loader):\n            input_ids = input_ids.to(DEVICE)\n            attention_mask = attention_mask.to(DEVICE)\n                        \n            pred = model(input_ids, attention_mask)                        \n\n            result[index : index + pred.shape[0]] = pred.flatten().to(\"cpu\")\n            index += pred.shape[0]\n\n    return result","72d9058e":"test_dataset = LitDataset(test_df, inference_only=True)","1fa76f40":"if sub_flag:\n    NUM_MODELS = 5\n\n    all_predictions = np.zeros((NUM_MODELS, len(test_df)))\n\n\n\n    test_dataset = LitDataset(test_df, inference_only=True)\n    test_loader = DataLoader(test_dataset, batch_size=BATCH_SIZE,\n                             drop_last=False, shuffle=False, num_workers=2)\n\n    for model_index in range(NUM_MODELS):            \n        model_path = f\"..\/input\/commonlit-roberta-0467\/model_{model_index + 1}.pth\"\n        print(f\"\\nUsing {model_path}\")\n\n        model = LitModel()\n        model.load_state_dict(torch.load(model_path, map_location=DEVICE))    \n        model.to(DEVICE)\n\n        all_predictions[model_index] = predict(model, test_loader)\n\n        del model\n        gc.collect()\n    \n    model_467 = all_predictions.mean(axis=0)","030bd6ce":"import os\nimport numpy as np\nimport pandas as pd\nimport random\n\nfrom transformers import AutoConfig, AutoModel, AutoTokenizer, AdamW, get_linear_schedule_with_warmup, logging\n\nimport torch\nimport torch.nn as nn\nimport torch.nn.functional as F\nfrom torch.utils.data import Dataset, TensorDataset, SequentialSampler, RandomSampler, DataLoader\n\nfrom tqdm.notebook import tqdm\n\nimport gc; gc.enable()\nfrom IPython.display import clear_output\n\nfrom sklearn.model_selection import StratifiedKFold\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\nsns.set_style('whitegrid')\nlogging.set_verbosity_error()","1ab6f6a0":"INPUT_DIR = '..\/input\/commonlitreadabilityprize'\nMODEL_DIR = '..\/input\/roberta-transformers-pytorch\/roberta-large'\nCHECKPOINT_DIR = '..\/input\/clrp-mean-pooling\/'\n\nDEVICE = torch.device('cuda' if torch.cuda.is_available() else 'cpu')\n\nMAX_LENGTH = 300\nTEST_BATCH_SIZE = 1\nHIDDEN_SIZE = 1024\n\nNUM_FOLDS = 5\nSEEDS = [113, 71]","d3036fdb":"test = pd.read_csv(os.path.join(INPUT_DIR, 'test.csv'))\ntest.head(2)","96200575":"class MeanPoolingModel(nn.Module):\n    \n    def __init__(self, model_name):\n        super().__init__()\n        \n        config = AutoConfig.from_pretrained(model_name)\n        self.model = AutoModel.from_pretrained(model_name, config=config)\n        self.linear = nn.Linear(HIDDEN_SIZE, 1)\n        self.loss = nn.MSELoss()\n        \n    def forward(self, input_ids, attention_mask, labels=None):\n        \n        outputs = self.model(input_ids, attention_mask)\n        last_hidden_state = outputs[0]\n        input_mask_expanded = attention_mask.unsqueeze(-1).expand(last_hidden_state.size()).float()\n        sum_embeddings = torch.sum(last_hidden_state * input_mask_expanded, 1)\n        sum_mask = input_mask_expanded.sum(1)\n        sum_mask = torch.clamp(sum_mask, min=1e-9)\n        mean_embeddings = sum_embeddings \/ sum_mask\n        logits = self.linear(mean_embeddings)\n        \n        preds = logits.squeeze(-1).squeeze(-1)\n        \n        if labels is not None:\n            loss = self.loss(preds.view(-1).float(), labels.view(-1).float())\n            return loss\n        else:\n            return preds\n        \ndef get_test_loader(data):\n\n    x_test = data.excerpt.tolist()\n    \n    tokenizer = AutoTokenizer.from_pretrained(MODEL_DIR)\n\n    encoded_test = tokenizer.batch_encode_plus(\n        x_test, \n        add_special_tokens=True, \n        return_attention_mask=True, \n        padding='max_length', \n        truncation=True,\n        max_length=MAX_LENGTH, \n        return_tensors='pt'\n    )\n\n    dataset_test = TensorDataset(\n        encoded_test['input_ids'],\n        encoded_test['attention_mask']\n    )\n\n    dataloader_test = DataLoader(\n        dataset_test,\n        sampler = SequentialSampler(dataset_test),\n        batch_size=TEST_BATCH_SIZE\n    )\n    \n    return dataloader_test\n\ntest_dataloader = get_test_loader(test)","30fbae8a":"if sub_flag:\n    all_predictions = []\n    for seed in SEEDS:\n\n        fold_predictions = []\n\n        for fold in tqdm(range(NUM_FOLDS)):\n            model_path = f\"model_{seed + 1}_{fold + 1}.pth\"\n\n            print(f\"\\nUsing {model_path}\")\n\n            model_path = CHECKPOINT_DIR + f\"model_{seed + 1}_{fold + 1}.pth\"\n            model = MeanPoolingModel(MODEL_DIR)\n            model.load_state_dict(torch.load(model_path)) \n            model.to(DEVICE)\n            model.eval()\n\n            predictions = []\n            for batch in test_dataloader:\n\n                batch = tuple(b.to(DEVICE) for b in batch)\n\n                inputs = {'input_ids':      batch[0],\n                          'attention_mask': batch[1],\n                          'labels':         None,\n                         }\n\n\n                preds = model(**inputs).item()\n                predictions.append(preds)\n\n            del model \n            gc.collect()\n\n            fold_predictions.append(predictions)\n        all_predictions.append(np.mean(fold_predictions, axis=0).tolist())\n\n    model_466 = np.mean(all_predictions,axis=0)","a9843d85":"import os\nimport math\nimport random\nimport time\n\nimport numpy as np\nimport pandas as pd\n\nimport torch\nimport torch.nn as nn\nfrom torch.utils.data import Dataset\nfrom torch.utils.data import DataLoader\n\nfrom transformers import AdamW\nfrom transformers import AutoTokenizer\nfrom transformers import AutoModel\nfrom transformers import AutoConfig\nfrom transformers import get_cosine_schedule_with_warmup\n\nfrom sklearn.model_selection import KFold\n\nimport gc\ngc.enable()\n\n\nNUM_FOLDS = 5\nNUM_EPOCHS = 5\nBATCH_SIZE = 12\nMAX_LEN = 256\nEVAL_SCHEDULE = [(0.51, 32), (0.50, 16), (0.49, 8), (0.48, 4), (0.47, 2), (-1., 1)]\nROBERTA_PATH = \"..\/input\/robertalarge\"\nTOKENIZER_PATH = \"..\/input\/robertalarge\"\nDEVICE = \"cuda\" if torch.cuda.is_available() else \"cpu\"\n\n\ndef set_random_seed(random_seed):\n    random.seed(random_seed)\n    np.random.seed(random_seed)\n    os.environ[\"PYTHONHASHSEED\"] = str(random_seed)\n\n    torch.manual_seed(random_seed)\n    torch.cuda.manual_seed(random_seed)\n    torch.cuda.manual_seed_all(random_seed)\n\n    torch.backends.cudnn.deterministic = True\n    \n    \n# train_df_folds = pd.read_csv(\"..\/input\/create-folds\/train_folds.csv\")\n\ntest_df = pd.read_csv(\"\/kaggle\/input\/commonlitreadabilityprize\/test.csv\")\nsubmission_df = pd.read_csv(\"\/kaggle\/input\/commonlitreadabilityprize\/sample_submission.csv\")\n\ntokenizer = AutoTokenizer.from_pretrained(TOKENIZER_PATH)","7db6c2bf":"class LitDataset(Dataset):\n    def __init__(self, df, inference_only=False):\n        super().__init__()\n\n        self.df = df        \n        self.inference_only = inference_only\n        self.text = df.excerpt.tolist()\n        #self.text = [text.replace(\"\\n\", \" \") for text in self.text]\n        \n        if not self.inference_only:\n            self.target = torch.tensor(df.target.values, dtype=torch.float32)        \n    \n        self.encoded = tokenizer.batch_encode_plus(\n            self.text,\n            padding = 'max_length',            \n            max_length = MAX_LEN,\n            truncation = True,\n            return_attention_mask=True\n        )        \n \n\n    def __len__(self):\n        return len(self.df)\n\n    \n    def __getitem__(self, index):        \n        input_ids = torch.tensor(self.encoded['input_ids'][index])\n        attention_mask = torch.tensor(self.encoded['attention_mask'][index])\n        \n        if self.inference_only:\n            return (input_ids, attention_mask)            \n        else:\n            target = self.target[index]\n            return (input_ids, attention_mask, target)","55fe5a55":"class LitModel(nn.Module):\n    def __init__(self):\n        super().__init__()\n\n        self.config = AutoConfig.from_pretrained(ROBERTA_PATH)\n        self.config.update({\"output_hidden_states\":True, \n                       \"hidden_dropout_prob\": 0.0,\n                       \"layer_norm_eps\": 1e-7}) \n        \n        self.roberta = AutoModel.from_pretrained(ROBERTA_PATH, config=self.config)  \n            \n        self.attention = nn.Sequential(            \n            nn.Linear(1024, 768),            \n            nn.Tanh(),                       \n            nn.Linear(768, 1),\n            nn.Softmax(dim=1)\n        )\n        \n        self.layer_norm = nn.LayerNorm(1024)\n\n        self.regressor = nn.Sequential(                        \n            nn.Linear(1024, 1)                        \n        )\n        \n\n    def forward(self, input_ids, attention_mask):\n        roberta_output = self.roberta(input_ids=input_ids,\n                                      attention_mask=attention_mask)        \n\n        # There are a total of 13 layers of hidden states.\n        # 1 for the embedding layer, and 12 for the 12 Roberta layers.\n        # We take the hidden states from the last Roberta layer.\n        last_4_layer_hstate_avg = (roberta_output.hidden_states[-1]) # + roberta_output.hidden_states[-2] + roberta_output.hidden_states[-3] + roberta_output.hidden_states[-4]) \/ 4\n        \n        input_mask_expanded = attention_mask.unsqueeze(-1).expand(last_4_layer_hstate_avg.size()).float()\n        sum_mask = input_mask_expanded.sum(1)\n        sum_mask = torch.clamp(sum_mask, min=1e-9)\n\n        # The number of cells is MAX_LEN.\n        # The size of the hidden state of each cell is 768 (for roberta-base).\n        # In order to condense hidden states of all cells to a context vector,\n        # we compute a weighted average of the hidden states of all cells.\n        # We compute the weight of each cell, using the attention neural network.\n        weights = self.attention(last_4_layer_hstate_avg)\n                \n        # weights.shape is BATCH_SIZE x MAX_LEN x 1\n        # last_layer_hidden_states.shape is BATCH_SIZE x MAX_LEN x 768        \n        # Now we compute context_vector as the weighted average.\n        # context_vector.shape is BATCH_SIZE x 768\n        context_vector = torch.sum(weights * last_4_layer_hstate_avg, dim=1)\n        \n        # calculate mean embeddings\n        mean_embeddings = context_vector \/ sum_mask\n        norm_mean_embeddings = self.layer_norm(mean_embeddings)\n        \n        # Now we reduce the context vector to the prediction score.\n        # return self.regressor(context_vector)\n        \n        # return normalized mean embeddings\n        return self.regressor(norm_mean_embeddings)","dfb76087":"def predict(model, data_loader):\n    \"\"\"Returns an np.array with predictions of the |model| on |data_loader|\"\"\"\n    model.eval()\n\n    result = np.zeros(len(data_loader.dataset))    \n    index = 0\n    \n    with torch.no_grad():\n        for batch_num, (input_ids, attention_mask) in enumerate(data_loader):\n            input_ids = input_ids.to(DEVICE)\n            attention_mask = attention_mask.to(DEVICE)\n                        \n            pred = model(input_ids, attention_mask)                        \n\n            result[index : index + pred.shape[0]] = pred.flatten().to(\"cpu\")\n            index += pred.shape[0]\n\n    return result","98f8f801":"model_paths = [\n    \"..\/input\/rlarge-hidden-att-head-layer-reini\/model_0.pth\",\n    \"..\/input\/rlarge-hidden-att-head-layer-reini\/model_1.pth\",\n    \"..\/input\/rlarge-hidden-att-head-layer-reini\/model_2.pth\",\n    \"..\/input\/rlarge-hidden-att-head-layer-reini\/model_3.pth\",\n    \"..\/input\/rlarge-hidden-att-head-layer-reini\/model_4.pth\"\n]\n\ntest_dataset = LitDataset(test_df, inference_only=True)\n\nall_predictions = np.zeros((5, len(test_df)))\n\ntest_dataset = LitDataset(test_df, inference_only=True)\ntest_loader = DataLoader(test_dataset, batch_size=BATCH_SIZE,\n                         drop_last=False, shuffle=False, num_workers=2)\n\n","a73220d1":"if sub_flag:\n    for index in range(5):            \n        model_path = model_paths[index]\n        print(f\"\\nUsing {model_path}\")\n\n        model = LitModel()\n        model.load_state_dict(torch.load(model_path))    \n        model.to(DEVICE)\n\n        all_predictions[index] = predict(model, test_loader)\n\n        del model\n        gc.collect()\n\n    dilbert_467 = all_predictions.mean(axis=0)","e2bb1a2d":"if sub_flag:\n    predictions = (model_467 * 0.35) + (model_466 * 0.35) + (dilbert_467 * 0.3) \n    submission_df.target = predictions\n    print(submission_df)\n    submission_df.to_csv(\"submission.csv\", index=False)","251a8ccf":"# Model 2","37e7b060":"# Our Model -  LB: 0.467","b82323f6":"### Inference","04af2601":"# Ensemble","6b5d030f":"# Ensemble of 3 Models\nIn our final submision, we are making use of 2 public notebooks and one of our models. \n\n- Model 1 - LB 0.467 - https:\/\/www.kaggle.com\/andretugan\/pre-trained-roberta-solution-in-pytorch\n- Model 2 - LB 0.466 - https:\/\/www.kaggle.com\/rajat95gupta\/clrp-mean-pooling-inference\n- Model 3 - LB 0.467 - Our Model\n\nFind our model's approach in the Discussion: https:\/\/www.kaggle.com\/c\/commonlitreadabilityprize\/discussion\/257756\n\nEnsemble = (Model_1 * 0.35) + (Model_2 * 0.35) + (Model_3 * 0.3)","3b24f463":"### Dataset","df42b5fc":"### Model\nThe model is inspired by the one from [Maunish](https:\/\/www.kaggle.com\/maunish\/clrp-roberta-svm).","5aaa3516":"# Model 1 "}}