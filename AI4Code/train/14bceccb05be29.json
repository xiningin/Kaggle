{"cell_type":{"f7f08d9d":"code","f4bdfc94":"code","b8f6254c":"code","1fe6fd7a":"code","cdfd252b":"code","5119ac53":"code","641b98f5":"code","5baba567":"code","ffc50371":"code","b7447419":"code","8e65b5fe":"code","63ba175c":"code","85819029":"code","de6299f2":"code","cf8a8218":"code","f02da0ca":"code","507cbd20":"code","094b12b3":"code","cc01fb4e":"code","893bb007":"code","74d5dcfa":"code","57c08d96":"code","f122d903":"code","fb688638":"code","d43873d0":"markdown","adcc2242":"markdown","c384044f":"markdown","656cfe68":"markdown"},"source":{"f7f08d9d":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","f4bdfc94":"df = pd.read_csv(\"..\/input\/food-nutrition-dataset\/food.csv\")\ndf.head(10)","b8f6254c":"df.shape","1fe6fd7a":"df.isnull().sum()","cdfd252b":"#we cannot impute values based on mean, median, mode etc, so it's better to drop missing values\n#because food is a sensitive area, we should drop missing values\n\ndf = df.dropna(axis = 1)","5119ac53":"df.shape  #new shape has 4303 rows, 48 columns, it's enough for exploratory data analysis","641b98f5":"df.head()","5baba567":"import matplotlib.pyplot as plt\nimport seaborn as sns\n%matplotlib inline\n","ffc50371":"df.Category.nunique()  #unique values","b7447419":"#df2 = df.drop_duplicates(subset=['Category'])  we can also use this, but we want all the values grouped as mean\n\ndf2 = df.groupby(['Category'], as_index = False).mean()\ndf2.head()","8e65b5fe":"df2.info()","63ba175c":"df2.describe()","85819029":"df2[['Category','Data.Carbohydrate', 'Data.Protein']].sort_values('Data.Protein', ascending = False)[:5]","de6299f2":"df2.columns","cf8a8218":"Minerals = ['Data.Major Minerals.Calcium', 'Data.Major Minerals.Copper',\n       'Data.Major Minerals.Iron', 'Data.Major Minerals.Magnesium',\n       'Data.Major Minerals.Phosphorus', 'Data.Major Minerals.Potassium',\n       'Data.Major Minerals.Sodium', 'Data.Major Minerals.Zinc']\nVitamins = ['Data.Vitamins.Vitamin A - IU', 'Data.Vitamins.Vitamin A - RAE',\n       'Data.Vitamins.Vitamin B12', 'Data.Vitamins.Vitamin B6',\n       'Data.Vitamins.Vitamin C', 'Data.Vitamins.Vitamin E',\n       'Data.Vitamins.Vitamin K']","f02da0ca":"sns.pairplot(df2[Minerals])","507cbd20":"sns.heatmap(df2[Minerals].corr(), annot =True)","094b12b3":"sns.pairplot(df2[Vitamins])","cc01fb4e":"sns.heatmap(df2[Vitamins].corr(), annot =True)","893bb007":"df2.corr().abs()['Data.Cholesterol'].sort_values(ascending = False)","74d5dcfa":"sns.regplot(y = df2['Data.Cholesterol'], x =df2['Data.Protein'], data=df2)","57c08d96":"sns.regplot(y = df2['Data.Carbohydrate'], x =df2['Data.Protein'], data=df2)","f122d903":"Fats = ['Data.Fat.Monosaturated Fat',\n       'Data.Fat.Polysaturated Fat', 'Data.Fat.Saturated Fat',\n       'Data.Fat.Total Lipid']\nsns.pairplot(df2[Fats])","fb688638":"sns.heatmap(df2[Fats].corr(), annot =True)","d43873d0":"### High correlation between magnesium and copper(0.6)\n### High correlation between magnesium and phosphorous\n### Very low negative correlation of sodium with zinc, potassium, iron","adcc2242":"### Cholesterol have strong correlation with Choline(.64), then comes Vitamin B12(.31), Protein(.3096)","c384044f":"### Lots of duplicate values, we can pork skins are repeated more than once, get rid of duplicate values","656cfe68":"### Top 3 food category with high protein are Soy Prot Isolate, Gelatins, Seal with protein quantity 85.69gm, 85.6 gm and 82.6gm respectively"}}