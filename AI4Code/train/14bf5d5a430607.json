{"cell_type":{"aa9898b4":"code","49bebf10":"code","15527cb8":"code","c472acea":"code","9988840a":"code","6e66f01f":"code","477bda04":"code","aa8443f9":"code","60f70e13":"code","4810b3d6":"code","f7548d58":"code","5d200a95":"code","183e518e":"code","504546bc":"code","d7899c42":"code","6bf733bb":"code","69ed5dea":"code","e81d2972":"code","0c3b08ab":"code","1f34afba":"code","473e80e5":"code","59dd45ea":"code","27401922":"code","3101ce82":"markdown","adcd4e9e":"markdown","9ab7eeaf":"markdown","97be750d":"markdown","1eebd0a2":"markdown","b122ea9a":"markdown","c2fb4cbe":"markdown","33687231":"markdown","2acbd6cf":"markdown","d7a618e7":"markdown","6572f5e8":"markdown","9504c245":"markdown","7a7803f9":"markdown","0b2b7de1":"markdown","f408724c":"markdown","60bb623b":"markdown","80e93ea3":"markdown","c0d21a42":"markdown","0f3f515d":"markdown","37955fd1":"markdown","f5881f38":"markdown","0f1f2db2":"markdown","cef4a332":"markdown","69515b42":"markdown","ae25acea":"markdown","ff9b2fdb":"markdown"},"source":{"aa9898b4":"import pandas as pd\nimport os\nprint(\"Libraries Imported\")","49bebf10":"df = pd.read_csv(\"..\/input\/sales-data-for-a-tech-shop\/Sales_Data\/Sales_April_2019.csv\")\n\n# Create an empty pandas dataframe to house all months' data\nall_months_data = pd.DataFrame()\n\n# List comprehension to generate a list called 'files'\nfiles = [file for file in os.listdir(\"..\/input\/sales-data-for-a-tech-shop\/Sales_Data\")]\n\n# For loop to create a dataframe for each csv file that's in the folder and concatenates it with the all months data \n# dataframe (initially empty) above\nfor file in files:\n    df = pd.read_csv(\"..\/input\/sales-data-for-a-tech-shop\/Sales_Data\/\"+file)\n    all_months_data = pd.concat([all_months_data, df])\n\n# Create a new csv with the data from the dataframe we just created\nall_months_data.to_csv(\"all_data.csv\", index=False)","15527cb8":"all_data = pd.read_csv(\".\/all_data.csv\")\nall_data.head()","c472acea":"# Find all instances of NaN in the dataframe\nnan_df = all_data[all_data.isna().any(axis=1)]\nnan_df.head()","9988840a":"# Drop the NaN rows\nall_data = all_data.dropna(how='all')\nall_data.head()\n# Now our data will be free of these NaN rows","6e66f01f":"# Here, we're finding all the rows that have the string 'Or' as the first 2 characters in the Order Date column and \n# updating the dataframe to remove them\nall_data = all_data[all_data['Order Date'].str[0:2] != 'Or']\nall_data.head()\n\n# We can see now that row 1 was removed because it had NaN values","477bda04":"# Make quantity ordered an integer\nall_data['Quantity Ordered'] = pd.to_numeric(all_data['Quantity Ordered'])\n\n# Make price each a float\nall_data['Price Each'] = pd.to_numeric(all_data['Price Each'])\n\nall_data.head()","aa8443f9":"all_data['Month'] = all_data['Order Date'].str[0:2]\nall_data['Month'] = all_data['Month'].astype('int32')\nall_data.head()","60f70e13":"all_data['Sales'] = all_data['Quantity Ordered'] * all_data['Price Each']\nall_data.head()","4810b3d6":"# Using the .apply() method\n\n# Create a function called 'get_city' that splits the city name\ndef get_city(address):\n    return address.split(',')[1]\n\n# Create a function called 'get_state' that splits the state 2 letter code\ndef get_state(address):\n    return address.split(',')[2].split(' ')[1]\n\n# For each of the cell contents, split by comma and get the city name\nall_data['City'] = all_data['Purchase Address'].apply(lambda x: get_city(x) + ' (' + get_state(x) + ')')\n\n# Alternative way below that uses f strings:\n    # all_data['City'] = all_data['Purchase Address'].apply(lambda x: f\"{get_city(x)} ({get_state(x)})\")\n\n# deleting the column previously created called 'Column' which was a duplicate of City\n# all_data = all_data.drop(columns='Column')\n\nall_data.head()","f7548d58":"all_data.groupby('Month').sum()","5d200a95":"# Import matplotlib to visualise the data\nimport matplotlib.pyplot as plt\n\nmonths = range(1,13)\nresults = all_data.groupby('Month').sum()\n\nplt.bar(months, results['Sales'])\nplt.xticks(months)\nplt.ylabel('Sales in USD ($)')\nplt.xlabel('Month number')\nplt.show()","183e518e":"results = all_data.groupby('City').sum()\nresults","504546bc":"# List comprehension to ensure cities are in the correct order, to match the above\ncities = [city for city, df in all_data.groupby('City')]\n\nplt.bar(cities, results['Sales'])\nplt.xticks(cities, rotation='vertical', size=8)\nplt.ylabel('Sales in USD ($)')\nplt.xlabel('City name')\nplt.show()","d7899c42":"# Converting the Order Date column to date time format\nall_data['Order Date'] = pd.to_datetime(all_data['Order Date'])","6bf733bb":"# Extract hour and minute from Order Date\nall_data['Hour'] = all_data['Order Date'].dt.hour\nall_data['Minute'] = all_data['Order Date'].dt.minute\n\nall_data.head()","69ed5dea":"# List comprehension to create a list of the hours, created from the column 'Hour' in the dataframe\nhours = [hour for hour, df in all_data.groupby('Hour')]\n\nplt.plot(hours, all_data.groupby(['Hour']).count())\nplt.xticks(hours)\nplt.xlabel('Hour')\nplt.ylabel('Number of Orders')\nplt.grid()\nplt.show()","e81d2972":"# Creating a new dataframe which has all the rows with duplicated Order IDs\ndf = all_data[all_data['Order ID'].duplicated(keep=False)]\n\n# Creating a new column called Grouped to join up the duplicated products\ndf['Grouped'] = df.groupby('Order ID')['Product'].transform(lambda x: ','.join(x))\n\n# Change the dataframe called df to only have those 2 columns and get rid of duplicate values\ndf = df[['Order ID', 'Grouped']].drop_duplicates()\n\ndf.head()","0c3b08ab":"# Import some new libraries\nfrom itertools import combinations\nfrom collections import Counter","1f34afba":"count = Counter()\n\n# Determining the most common combinations of 2 products in an order\nfor row in df['Grouped']:\n    row_list = row.split(',')\n    count.update(Counter(combinations(row_list, 2)))\n\n# Get the 10 most common combinations\nfor key, value in count.most_common(10):\n    print(key, value)","473e80e5":"all_data.head()","59dd45ea":"product_group = all_data.groupby('Product')\nquantity_ordered = product_group.sum()['Quantity Ordered']\n\nproducts = [product for product, df in product_group]\n\nplt.bar(products, quantity_ordered)\nplt.ylabel('Quantity Ordered')\nplt.xlabel('Product')\nplt.xticks(products, rotation='vertical', size=8)\nplt.show()","27401922":"prices = all_data.groupby('Product').mean()['Price Each']\n\nfig, ax1 = plt.subplots()\n\nax2 = ax1.twinx()\nax1.bar(products, quantity_ordered, color='g')\nax2.plot(products, prices, 'b-')\n\nax1.set_xlabel('Product Name')\nax1.set_ylabel('Quantity Ordered', color='g')\nax2.set_ylabel('Price ($)', color='b')\nax1.set_xticklabels(products, rotation='vertical', size=8)\n\nplt.show()","3101ce82":"#### To begin, we need to import the relevant libraries","adcd4e9e":"# Sales Analysis of an online Tech Store","9ab7eeaf":"#### We can see here that December had the highest revenue, with $4.6M in sales","97be750d":"#### Now, merge the 12 months of data into a single CSV file","1eebd0a2":"### Augment data with additional columns","b122ea9a":"##### Addressing the \"invalid literal for int() with base 10: 'Or'\" error","c2fb4cbe":"#### Add a city column","33687231":"#### Add a sales column","2acbd6cf":"### This notebook shows the process of analysing the data of an example online tech store. The data is spread across multiple .csv files, each representing a month's worth of sales data. Below are some questions which could be asked of the data and the methodology for answering them.","d7a618e7":"#### Cheaper products sold better than more expensive ones. We can see that cheap items like batteries sold a lot in quantity whereas more expensive items like dryers & washing machines sold fewer","6572f5e8":"#### Read in the updated dataframe","9504c245":"#### Add month column","7a7803f9":"#### iPhone & Lightning cable, Google Phone & USB-C charging cable and iPhone and Wired Headphones were the top 3 combinations of 2 products sold together","0b2b7de1":"### Question 3: What time should we display advertisements to maximize the likelihood of a customer buying the product?","f408724c":"#### The recommended time is either around 11:00 or 19:00","60bb623b":"### Question 4: what products are most often sold together?","80e93ea3":"### Importing libraries and data","c0d21a42":"#### We can see here that San Francisco had the highest number of sales, at $8.26M","0f3f515d":"##### Convert columns to the correct type","37955fd1":"## Credit to Keith Galli for his [great walkthrough video](https:\/\/www.youtube.com\/watch?v=eMOA1pPVUc4)!","f5881f38":"#### Drop rows of NaN ('not a number')\n##### (Addressing the \"ValueError: cannot convert float NaN to integer\" error)","0f1f2db2":"### Question 1: What was the best month for sales?  How much was earned that month?","cef4a332":"### Question 2: What city had the highest number of sales?","69515b42":"### Cleaning up the data","ae25acea":"### Question 5: What product sold the most? Why do you think it sold the most?","ff9b2fdb":"## Exploring the data"}}