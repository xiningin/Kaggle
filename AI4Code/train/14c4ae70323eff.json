{"cell_type":{"df8f5920":"code","ecedd6cc":"code","be59ef01":"code","d8b35402":"code","c9df0bf3":"code","96ad419c":"code","8ba6923a":"code","75ae658f":"code","99f0e5dd":"code","6740671e":"code","e3130c8b":"code","9d1a3630":"code","31ab474d":"code","0273ad09":"code","aaadb40f":"code","2ec03818":"code","41150706":"code","cee15ea6":"code","1c4da433":"code","f2338906":"code","1b275872":"code","249e4514":"code","dc02ba5a":"code","25747dc2":"code","80faf256":"code","64306c74":"code","3733ea79":"code","c081f831":"code","58755a86":"code","e2a6f7ff":"code","6f4578f8":"code","3d7146e3":"code","8c8420c8":"code","f2c7ee11":"code","c51a28d8":"code","45a81a2e":"code","33f39b42":"code","ed6ada0e":"markdown","0f065afa":"markdown","40160a42":"markdown","93f6abce":"markdown","67b5eb4e":"markdown","92e97401":"markdown","1cd46d3e":"markdown","ba07fac3":"markdown","4e30bb72":"markdown","645955cf":"markdown"},"source":{"df8f5920":"import numpy as np\nimport pandas as pd\n\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\nimport sklearn\nfrom sklearn.preprocessing import OneHotEncoder\nfrom sklearn.preprocessing import MinMaxScaler\n\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.model_selection import KFold\nfrom sklearn.model_selection import cross_val_score\n\nfrom sklearn.ensemble import GradientBoostingClassifier\nfrom sklearn.svm import SVC","ecedd6cc":"# Load in the train and test datasets\ntrain = pd.read_csv('..\/input\/titanic\/train.csv')\ntest = pd.read_csv('..\/input\/titanic\/test.csv')\n\ntrain.head(10)","be59ef01":"responseColumn = train.Survived\ndel train['Survived']","d8b35402":"train.info()","c9df0bf3":"test.info()","96ad419c":"train['HasCabin'] = train.Cabin.notna()\ntest['HasCabin'] = train.Cabin.notna()","8ba6923a":"columnToDel = ['PassengerId', 'Name', 'Cabin', 'Ticket']\nfor colName in columnToDel:\n    del train[colName]\n    del test[colName]","75ae658f":"plt.figure(num=None, figsize=(9, 6), dpi=80, facecolor='w', edgecolor='k')\nsns.countplot(responseColumn)","99f0e5dd":"plt.figure(num=None, figsize=(12, 6), dpi=80, facecolor='w', edgecolor='k')\nplt.subplot(1, 2, 1)\nsns.countplot(train.Pclass)\nplt.subplot(1, 2, 2)\nsns.countplot(train.Pclass, hue=responseColumn)","6740671e":"plt.figure(num=None, figsize=(12, 6), dpi=80, facecolor='w', edgecolor='k')\nplt.subplot(1, 2, 1)\nsns.countplot(train.Sex)\nplt.subplot(1, 2, 2)\nsns.countplot(train.Sex, hue=responseColumn)","e3130c8b":"columnToPlot = train.Age\nplt.figure(num=None, figsize=(12, 6), dpi=80, facecolor='w', edgecolor='k')\nplt.subplot(1, 2, 1)\nsns.boxplot(columnToPlot)\nplt.subplot(1, 2, 2)\nsns.distplot(columnToPlot)\n\nmean = columnToPlot.mean()\nmedian = columnToPlot.median()\nmode = columnToPlot.mode()[0]\nstd = train.Age.std()\nmeanMedian = 3 * (mean - median) \/ std\nmeanMode = (mean - mode) \/ std\nprint('mean Median:\\t', meanMedian)\nprint('mean Mode:\\t', meanMode)","9d1a3630":"plt.figure(num=None, figsize=(12, 6), dpi=80, facecolor='w', edgecolor='k')\nplt.subplot(1, 2, 1)\nsns.countplot(train.SibSp)\nplt.subplot(1, 2, 2)\nsns.countplot(train.SibSp, hue=responseColumn)","31ab474d":"plt.figure(num=None, figsize=(12, 6), dpi=80, facecolor='w', edgecolor='k')\nplt.subplot(1, 2, 1)\nsns.countplot(train.Parch)\nplt.subplot(1, 2, 2)\nsns.countplot(train.Parch, hue=responseColumn)","0273ad09":"columnToPlot = train.Fare\nplt.figure(num=None, figsize=(12, 6), dpi=80, facecolor='w', edgecolor='k')\nplt.subplot(1, 2, 1)\nsns.boxplot(columnToPlot)\nplt.subplot(1, 2, 2)\nsns.distplot(columnToPlot)\n\nmean = columnToPlot.mean()\nmedian = columnToPlot.median()\nmode = columnToPlot.mode()[0]\nstd = train.Age.std()\nmeanMedian = 3 * (mean - median) \/ std\nmeanMode = (mean - mode) \/ std\nprint('mean Median:\\t', meanMedian)\nprint('mean Mode:\\t', meanMode)","aaadb40f":"columnToPlot = np.log(train.Fare+1)\nplt.figure(num=None, figsize=(12, 6), dpi=80, facecolor='w', edgecolor='k')\nplt.subplot(1, 2, 1)\nsns.boxplot(columnToPlot)\nplt.subplot(1, 2, 2)\nsns.distplot(columnToPlot)\n\nmean = columnToPlot.mean()\nmedian = columnToPlot.median()\nmode = columnToPlot.mode()[0]\nstd = train.Age.std()\nmeanMedian = 3 * (mean - median) \/ std\nmeanMode = (mean - mode) \/ std\nprint('mean Median:\\t', meanMedian)\nprint('mean Mode:\\t', meanMode)","2ec03818":"train['FareLog'] = columnToPlot\ndel train['Fare']","41150706":"plt.figure(num=None, figsize=(12, 6), dpi=80, facecolor='w', edgecolor='k')\nplt.subplot(1, 2, 1)\nsns.countplot(train.Embarked)\nplt.subplot(1, 2, 2)\nsns.countplot(train.Embarked, hue=responseColumn)","cee15ea6":"plt.figure(num=None, figsize=(12, 6), dpi=80, facecolor='w', edgecolor='k')\nplt.subplot(1, 2, 1)\nsns.countplot(train.HasCabin)\nplt.subplot(1, 2, 2)\nsns.countplot(train.HasCabin, hue=responseColumn)","1c4da433":"train.info()","f2338906":"train.Embarked.fillna(train.Embarked.mode()[0], inplace=True)","1b275872":"myRandomSeed = 42\nnp.random.seed(myRandomSeed)\n\nageMean = train.Age.mean()\nageStd = train.Age.std()\nn = train.Age.isnull().sum()\n\nageValues = pd.Series(np.random.normal(ageMean, ageStd, n))\nageValues.index = train[train.Age.isnull()].index\n\ntrain.Age.fillna(ageValues, inplace=True)","249e4514":"train","dc02ba5a":"train.describe()","25747dc2":"categoricalColumns = ['Sex', 'Embarked']\noneHot = OneHotEncoder()\noneHot.fit(train[categoricalColumns])\noneHotMatrix = oneHot.transform(train[categoricalColumns]).toarray()\noneHotMatrix = pd.DataFrame(oneHotMatrix)\noneHotMatrix.index = train.index\noneHotMatrix.columns = oneHot.get_feature_names()\n\ntrain = train.join(oneHotMatrix)\nfor colName in categoricalColumns:\n    del train[colName]","80faf256":"train","64306c74":"minMaxScaler = MinMaxScaler()\nminMaxScaler.fit(train)\ntrainScaled = minMaxScaler.transform(train)\ntrainScaled = pd.DataFrame(trainScaled)\ntrainScaled.columns = train.columns\ntrainScaled","3733ea79":"train_x, val_x, train_y, val_y = train_test_split(trainScaled, responseColumn, test_size=.4,\n                                                  stratify=responseColumn,random_state=myRandomSeed)","c081f831":"GBC = GradientBoostingClassifier(learning_rate=.02, n_estimators=130,\n                                 min_samples_leaf=11, max_depth=16,max_features='sqrt',\n                                random_state=myRandomSeed)\n\nGBC.fit(train_x, train_y)\nGBC.score(val_x, val_y)","58755a86":"nSplits = trainScaled.shape[0] - 1\ncv = KFold(n_splits=nSplits, random_state=myRandomSeed)\n\nGBC = GradientBoostingClassifier(learning_rate=.03, n_estimators=135,\n                                 min_samples_leaf=11, max_depth=16,max_features='sqrt',\n                                random_state=myRandomSeed)\n\nscores = cross_val_score(GBC, trainScaled, responseColumn, scoring='accuracy', cv=cv, n_jobs=-1)\n\nscores.sum() # number of correct prediction","e2a6f7ff":"# min_samples_leaf=11\nscores.sum()","6f4578f8":"GBC = GradientBoostingClassifier(learning_rate=.03, n_estimators=135,\n                                 min_samples_leaf=11, max_depth=16,max_features='sqrt',\n                                random_state=myRandomSeed)\n\nGBC.fit(trainScaled, responseColumn)","3d7146e3":"test","8c8420c8":"test.info()","f2c7ee11":"n = test.Age.isnull().sum()\nageValues = pd.Series(np.random.normal(ageMean, ageStd, n))\nageValues.index = test[test.Age.isnull()].index\ntest.Age.fillna(ageValues, inplace=True)\n\ntest['FareLog'] = np.log(test.Fare+1)\ntest.FareLog.fillna(train.FareLog.mean(), inplace=True)\ndel test['Fare']\n\noneHotMatrix = oneHot.transform(test[categoricalColumns]).toarray()\noneHotMatrix = pd.DataFrame(oneHotMatrix)\noneHotMatrix.index = test.index\noneHotMatrix.columns = oneHot.get_feature_names()\ntest = test.join(oneHotMatrix)\nfor colName in categoricalColumns:\n    del test[colName]\n\ntestScaled = minMaxScaler.transform(test)\ntestScaled = pd.DataFrame(testScaled)\ntestScaled.columns = test.columns","c51a28d8":"testScaled","45a81a2e":"prediction = GBC.predict(testScaled)\n\nsubmission = pd.read_csv('..\/input\/titanic\/gender_submission.csv')\nsubmission['Survived'] = prediction\nsubmission.to_csv('submission.csv', index=False)","33f39b42":"submission","ed6ada0e":"It mostly follows normal distribution, so we can fill with random values generated from simulated normal distribution","0f065afa":"The Fare column suffer from very long right skew","40160a42":"The Data is imbalanced, we should take care about this while building our model","93f6abce":"### Fill missing Values","67b5eb4e":"### EDA","92e97401":"Takeing The log of Fare column, solves the right skew problem","1cd46d3e":"### Working with test data","ba07fac3":"### pre-processing the data","4e30bb72":"### Machine learning models","645955cf":"The Percentage of Survived people differs from Pclass to another, so It's better to deal with column as categorical"}}