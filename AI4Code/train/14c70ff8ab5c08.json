{"cell_type":{"b33ee350":"code","b4a1301b":"code","afc87a47":"code","c29946ba":"code","e278ac99":"code","8ed03cd8":"code","5d937008":"code","e69ca8cd":"code","41e844ef":"code","912900d3":"code","743daf5f":"code","83e4a965":"code","983ab24a":"code","47ef25b9":"code","27ee9a2d":"code","7763ed4f":"code","ceb76b7a":"code","1c1da894":"code","724905ae":"markdown","0bca029b":"markdown","ed95680d":"markdown","2eeb1b10":"markdown","fe5407f0":"markdown","5838c802":"markdown"},"source":{"b33ee350":"\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\n\nimport warnings \nwarnings.filterwarnings('ignore')\n\nimport os\nprint(os.listdir(\"..\/input\"))\n\n# Any results you write to the current directory are saved as output.","b4a1301b":"# data frames from dictionary\ncountry = [\"Spain\",\"Poland\"] # making new list\npopulation = [\"46570000\",\"37970000\"] # making new list\nlist_label = [\"country\",\"population\"]\nlist_col = [country,population] # add country and population list in list_col\nzipped = list(zip(list_label,list_col))\ndata_dict = dict(zipped)\ndf = pd.DataFrame(data_dict)\ndf","afc87a47":"# Add new columns\ndf[\"capital\"] = [\"madrid\",\"warsaw\"]\ndf","c29946ba":"# Broadcasting: add new column with value(5)\ndf[\"income\"] = 5 #Broadcasting entire column\ndf","e278ac99":"mydata=pd.read_csv(\"..\/input\/kidney_disease.csv\")\nmydata.head(7)","8ed03cd8":"# Plotting all data \ndata1 = mydata.loc[:,[\"age\",\"bu\",\"bp\"]]\ndata1.plot()\n# it is confusing","5d937008":"# subplots\ndata1.plot(subplots = True)\nplt.show()","e69ca8cd":"# scatter plot  \ndata1.plot(kind = \"scatter\",x=\"age\",y = \"bp\")\ndata1.plot(kind = \"scatter\",x=\"bp\",y = \"bu\")\nplt.show()","41e844ef":"# hist plot  \ndata1.plot(kind = \"hist\",y = \"age\",bins = 50,range= (0,250),normed = True)","912900d3":"# histogram subplot with non cumulative and cumulative\nfig, axes = plt.subplots(nrows=2,ncols=1)\n#non-comulative\ndata1.plot(kind = \"hist\",y = \"age\",bins = 50,range= (0,250),normed = True,ax = axes[0])\n#comulative\ndata1.plot(kind = \"hist\",y = \"age\",bins = 50,range= (0,250),normed = True,ax = axes[1],cumulative = True)\nplt.savefig('graph.png')\nplt","743daf5f":"mydata.describe()","83e4a965":"time_list = [\"1992-03-08\",\"1992-04-12\"]\nprint(type(time_list[1])) # As you can see date is string\n# however we want it to be datetime object\ndatetime_object = pd.to_datetime(time_list)\nprint(type(datetime_object))","983ab24a":"# close warning\nimport warnings\nwarnings.filterwarnings(\"ignore\")\n\ndata2 = mydata.head()\ndate_list = [\"1992-01-10\",\"1992-02-10\",\"1992-03-10\",\"1993-03-15\",\"1993-03-16\"]\ndatetime_object = pd.to_datetime(date_list)\ndata2[\"date\"] = datetime_object\n# lets make date as index\ndata2= data2.set_index(\"date\")\ndata2 ","47ef25b9":"# Now we can select according to our date index\nprint(data2.loc[\"1993-03-16\"])\nprint(data2.loc[\"1992-03-10\":\"1993-03-16\"])","27ee9a2d":"# We will use data2 that we create at previous part\ndata2.resample(\"A\").mean()","7763ed4f":"# Lets resample with month\ndata2.resample(\"M\").mean()","ceb76b7a":"# We can interpolete from first value\ndata2.resample(\"M\").first().interpolate(\"linear\")","1c1da894":"# Or we can interpolate with mean()\ndata2.resample(\"M\").mean().interpolate(\"linear\")","724905ae":"INDEXING PANDAS TIME SERIES\n\nTransform date to ISO 8601 (yyyy-mm-dd hh:mm:ss ) format","0bca029b":"VISUAL EXPLORATORY DATA ANALYSIS","ed95680d":"Thank you looking my kernels","2eeb1b10":"BUILDING DATA FRAMES FROM SCRATCH","fe5407f0":"STATISTICAL EXPLORATORY DATA ANALYSIS\n\n1. count: number of entries\n2.mean: average of entries\n3. std: standart deviation\n4. min: minimum entry\n5. 25%: first quantile\n6. 50%: median or second quantile\n7. 75%: third quantile\n8. max: maximum entry","5838c802":"RESAMPLING PANDAS TIME SERIES\n\nResampling: statistical method over different time intervals\nNeeds string to specify frequency like \"M\" = month or \"A\" = year\nInterpolate values according to different methods like \u2018linear\u2019, \u2018time\u2019 or index\u2019"}}