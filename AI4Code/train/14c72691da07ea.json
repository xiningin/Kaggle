{"cell_type":{"dd90b9f5":"code","09b188e1":"code","155bafa9":"code","9ad72395":"code","f0ab751d":"code","e30a652b":"code","671da172":"code","f0a89197":"code","08ad3ad3":"code","6dae4ba5":"code","7f70d15b":"code","fbe1dfe9":"code","ef20b20f":"code","a7ef9a41":"code","5200f8bf":"code","fc007e0e":"code","a2917215":"code","4c36a7a7":"code","4ca4c051":"markdown","1ba03577":"markdown","315c6da4":"markdown","a5917e91":"markdown","48ec84ac":"markdown","344f32f3":"markdown","76e780ae":"markdown","17cea0de":"markdown","726d6e80":"markdown","328dfadb":"markdown","079f91a2":"markdown","8f95195d":"markdown","b348fe4e":"markdown","c9a05386":"markdown","71633d1a":"markdown","63183271":"markdown","e6894c74":"markdown","f0fd96e0":"markdown","7fcacb2a":"markdown","c25bb50a":"markdown"},"source":{"dd90b9f5":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nplt.style.use(\"fivethirtyeight\")\nimport seaborn as sns\n\nimport warnings\nwarnings.filterwarnings('ignore')","09b188e1":"heart = pd.read_csv(\"..\/input\/heart-disease-uci\/heart.csv\")\ndata = heart.copy()\ndata.head()","155bafa9":"data.info()","9ad72395":"data.describe().T.style.background_gradient(subset = ['count'], cmap = 'viridis') \\\n    .bar(subset = ['mean', '50%']) \\\n    .bar(subset = ['std'])","f0ab751d":"for col in data.columns:\n    print(\"------------------------------------\")\n    print(\"{}\\n{}\".format(col,data[col].value_counts()))\n    print(\"Unique value counts: \",len(data[col].unique()))","e30a652b":"fig = plt.figure(figsize=(12,12))\ni = 1\nfor col in data.columns:\n    if len(data[col].unique()) <= 5:\n        plt.subplot(3,3,i)\n        data[col].value_counts().plot.bar()\n        plt.title(col)\n        i = i+1\nplt.show()","671da172":"cols = []\n\nfor col in data.columns:\n    if len(data[col].unique()) >= 5:\n        cols.append(col)\n        \n        \nfig = plt.figure(figsize=(18,12))\ni = 1\nfor col in cols:\n        plt.subplot(2,3,i)\n        sns.histplot(data=data, x=col, hue=\"target\", kde=True)\n        i = i+1\nplt.show()","f0a89197":"sns.pairplot(pd.concat([data[cols], data[\"target\"]], axis=1), hue=\"target\")\nplt.show()","08ad3ad3":"heart_NUM = ['age', 'trestbps', 'thalach', 'oldpeak']\n\n#  plot Numerical Data\na = 4  # number of rows\nb = 3  # number of columns\nc = 1  # initialize plot counter\n\nfig = plt.figure(figsize=(14,22))\n\nfor i in heart_NUM:\n    plt.subplot(a,b,c)\n    plt.xlabel(i)\n    sns.distplot(data[i])\n    c = c+1\n\n    plt.subplot(a,b,c)\n    plt.xlabel(i)\n    plt.boxplot(x=data[i])\n    c = c+1\n\n    plt.subplot(a,b,c)\n    plt.xlabel(i)\n    sns.scatterplot(data=data, x=i, y='chol', hue='sex')\n    c = c+1\n\nplt.show()","6dae4ba5":"f = data[data[\"sex\"] == 0] #female\nm = data[data[\"sex\"] == 1] #male\n\nf_p = f[f[\"target\"] == 1] #female with heart disease\nf_np = f[f[\"target\"] == 0] \n\nm_p = m[m[\"target\"] == 1] #male with heart disease\nm_np = m[m[\"target\"] == 0]","7f70d15b":"fig = plt.figure(figsize=(12,6))\nplt.subplot(121)\nplt.pie(x=[len(f),len(m)], labels=[\"Female\",\"Male\"], colors=['#009ACD', '#ADD8E6'], autopct='%1.1f%%', startangle=0, pctdistance=1.1,labeldistance=1.25, explode=(0.03,0))\nplt.title(\"Gender distribution of whole dataset\")\nplt.legend(frameon=False, bbox_to_anchor=(1,0.8))\n\nplt.subplot(122)\nplt.pie(x=[len(f_p),len(m_p)], labels=[\"Female\",\"Male\"], colors=['#009ACD', '#ADD8E6'], autopct='%1.1f%%', startangle=0, pctdistance=1.1,labeldistance=1.25, explode=(0.03,0))\nplt.title(\"Gender distribution of patients\")\nplt.legend(frameon=False, bbox_to_anchor=(1,0.8))\nplt.show()","fbe1dfe9":"fig = plt.figure(figsize=(12,6))\nplt.subplot(121)\nplt.pie(x=[len(f_p),len(f_np)], labels=[\"Having Heart Disease\",\"Not having\"], colors=['#b566ff', '#e6ccff'], autopct='%1.1f%%', startangle=0, pctdistance=1.1,labeldistance=1.25, explode=(0.05,0))\nplt.title(\"Female\")\n\nplt.subplot(122)\nplt.pie(x=[len(m_p),len(m_np)], labels=[\"Having Heart Disease\", \"Not having\"], colors=['#80ff80', '#ccffcc'], autopct='%1.1f%%', startangle=0, pctdistance=1.1,labeldistance=1.25, explode=(0.04,0))\nplt.title(\"Male\")\n\nplt.show()","ef20b20f":"corr = data.corr()\nplt.figure(figsize=(15,15))\nsns.heatmap(corr, annot=True, linewidths=.5, cmap=\"YlGnBu\")\nplt.show()","a7ef9a41":"from sklearn.ensemble import RandomForestClassifier\nfrom sklearn.ensemble import GradientBoostingClassifier\nfrom sklearn.svm import SVC\n\nfrom sklearn.model_selection import StratifiedKFold\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.metrics import accuracy_score, confusion_matrix","5200f8bf":"X = data.drop(\"target\", axis=1).values\ny = data[\"target\"].values\n\nscaler = StandardScaler()\nX = scaler.fit_transform(X)\n\nmodels = [SVC(), RandomForestClassifier(), GradientBoostingClassifier()]","fc007e0e":"skf = StratifiedKFold(n_splits=5, shuffle=True, random_state=17)\n\nfor train_index, test_index in skf.split(X, y):\n    X_train_fold, X_test_fold = X[train_index], X[test_index]\n    y_train_fold, y_test_fold = y[train_index], y[test_index]\n    acc = []\n    cm = []\n    for model in models:        \n        model.fit(X_train_fold, y_train_fold)\n        pred =  model.predict(X_test_fold)\n        acc.append(accuracy_score(y_test_fold, pred))\n        cm.append(confusion_matrix(y_test_fold, pred))","a2917215":"score = {\"model\": [\"SVC\",\"RandomForestClassifier\",\"GradientBoostingClassifier\"], \"accuracy \": acc}\nresult = pd.DataFrame(score)\nresult","4c36a7a7":"for i,model in enumerate([\"SVC\",\"RandomForestClassifier\",\"GradientBoostingClassifier\"]):\n    sns.heatmap(cm[i], annot=True)\n    plt.title(model)\n    plt.show()","4ca4c051":"### Features and target","1ba03577":"We need some packages to read the data which is given as csv file, to visualize and to operate.","315c6da4":"I suggest [this notebook](https:\/\/www.kaggle.com\/asimislam\/tutorial-python-subplots) if you need help with subplots. The code cell below had gotten from it. Luckily, it's the same dataset.","a5917e91":"I want to use 3 classification methods and compare their scores. The models:\n- SVC\n- Random Forest Classifier\n- Gradient Boosting Classifier\n\nSince, labels are imbalance in dataset StratifiedKFold will be used to get better predictions and reduce overfit\/underfit risks.\n\nAlso, feature values have different ranges than each other I will scale data.\n\nTo compare model results accuracy_score and confusion_matrix will help us.","48ec84ac":"![](https:\/\/miro.medium.com\/max\/445\/1*Z54JgbS4DUwWSknhDCvNTQ.png)","344f32f3":"56,4% of people having heart disease is male, but keep in mind that the dataset has more male entries than it has for females. So, how many patients are there in male and female observations?","76e780ae":"### Features, features, target","17cea0de":"# Model","726d6e80":"Now I'm creating subsets to make easier to visualize.","328dfadb":"If you find this notebook useful, don't forget to upvote. \ud83d\udc4d\nIf you have suggestions, I'm waiting to read them. \ud83e\udd13","079f91a2":"## Heart Disease Analysis by Gender","8f95195d":"### Goal, Limits and Dataset Content","b348fe4e":"**Goal**\n\nThe goal of this notebook is to analyze the heart disease data obtained from [UCI](https:\/\/archive.ics.uci.edu\/ml\/datasets\/Heart+Disease), and show which features have the most affect in the occurrence of heart disease.\n\n**Limits**\n\nThis database contains 76 attributes, but all published experiments refer to using a subset of 14 of them. In particular, the Cleveland database is the only one that has been used by ML researchers to this date.\n\n**Content**\n\n- age\n- sex\n- chest pain type (4 values)\n- resting blood pressure\n- serum cholestoral in mg\/dl\n- fasting blood sugar > 120 mg\/dl\n- resting electrocardiographic results (values 0,1,2)\n- maximum heart rate achieved\n- exercise induced angina\n- oldpeak = ST depression induced by exercise relative to rest\n- the slope of the peak exercise ST segment\n- number of major vessels (0-3) colored by flourosopy\n- thal: 3 = normal; 6 = fixed defect; 7 = reversable defect","c9a05386":"## Overview","71633d1a":"## Correlation Matrix","63183271":"## Confusion Matrices","e6894c74":"## Importing Packages","f0fd96e0":"Using seaborn's pairplot, not only being able to plot feature\/target relations, it's possible to plot all feature relations with each others at once. It's huge but useful. I will use only columns having more than 4 unique values that I created as a list before.","7fcacb2a":"# Heart Disease Prediction","c25bb50a":"In the field of machine learning and specifically the problem of statistical classification, a confusion matrix, also known as an error matrix,[9] is a specific table layout that allows visualization of the performance of an algorithm, typically a supervised learning one (in unsupervised learning it is usually called a matching matrix). Each row of the matrix represents the instances in an actual class while each column represents the instances in a predicted class, or vice versa \u2013 both variants are found in the literature.[10] The name stems from the fact that it makes it easy to see whether the system is confusing two classes (i.e. commonly mislabeling one as another).\n\nIt is a special kind of contingency table, with two dimensions (\"actual\" and \"predicted\"), and identical sets of \"classes\" in both dimensions (each combination of dimension and class is a variable in the contingency table).\n\n1. [Image](https:\/\/towardsdatascience.com\/understanding-confusion-matrix-a9ad42dcfd62)\n2. [Definiton](https:\/\/en.wikipedia.org\/wiki\/Confusion_matrix)"}}