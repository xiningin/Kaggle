{"cell_type":{"3c7bac39":"code","5a9521b5":"code","3a755e8d":"code","305d43c3":"code","8d3d38d2":"code","30872a13":"code","af10b897":"code","d23e2fcf":"code","a5a0213c":"code","627defcd":"code","8b5294b8":"code","374d9012":"markdown","59acdc9f":"markdown","cbe12c76":"markdown","b98db3a2":"markdown","462f7674":"markdown","3ab1171f":"markdown","f4b48daa":"markdown","95da0665":"markdown","6c1d4cf7":"markdown","d623c1d0":"markdown","f6f26be9":"markdown","327a5564":"markdown"},"source":{"3c7bac39":"\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\npd.plotting.register_matplotlib_converters()\nimport matplotlib.pyplot as plt\n%matplotlib inline\nimport seaborn as sns\nfrom bs4 import BeautifulSoup\nprint(\"Setup Complete\")\npd.set_option('display.max_rows', None)\nimport warnings\nwarnings.filterwarnings('ignore')","5a9521b5":"df = pd.read_csv('..\/input\/cudacsv\/cuda.csv')\n","3a755e8d":"df['CUDA cores'][df['GPU']=='GeForce GT 730']=384\ndf['CUDA cores'][df['GPU']=='GeForce GT 640 (OEM)']=144\ndf['CUDA cores'][df['GPU']=='GeForce GT 330 (OEM)']=96","305d43c3":"df.columns","8d3d38d2":"df=df[~df['Price Dec 2020'].isna()]\ndf['CUDA cores']=df['CUDA cores'].astype(int)\ndf['Freq']=df['Processor frequency'].str.split()\ndf['Processor frequency']=df['Freq'].str[0]\ndf['Processor frequency'].fillna(0,inplace=True)\ndf['Processor frequency']=df['Processor frequency'].astype(int)","30872a13":"df.info()","af10b897":"plt.figure(figsize=(10,6))\n\ng=sns.scatterplot(data=df,y='Price Dec 2020', x='CUDA cores', hue='Processor frequency', palette='brg') \ng.get_legend().remove()\nnorm = plt.Normalize(df['Processor frequency'].max(), df['Processor frequency'].min())\nsm = plt.cm.ScalarMappable(cmap=\"brg\", norm=norm)\nsm.set_array([])\ng.figure.colorbar(sm)","d23e2fcf":"plt.figure(figsize=(10,6))\n#plt.legend(order=True)\ng=sns.scatterplot(data=df,y='Price Dec 2020', x='CUDA cores', hue_order = [1800],hue='Processor frequency', palette='brg')\ng.get_legend().remove()\nnorm = plt.Normalize(df['Processor frequency'].max(), df['Processor frequency'].min())\nsm = plt.cm.ScalarMappable(cmap=\"brg\", norm=norm)\nsm.set_array([])\ng.figure.colorbar(sm)\ng.set(ylim=(0, 2800))","a5a0213c":"import plotly.express as px\n\nfig = px.scatter(df, y='Price Dec 2020',x='CUDA cores',log_x=False, hover_data=['GPU', 'Processor frequency'])\nfig.show()","627defcd":"df['CUDA\/$']=(df['CUDA cores']\/df['Price Dec 2020']).round(decimals=2)\n","8b5294b8":"dat = df.sort_values('CUDA\/$', ascending=False)\nfig = px.bar(dat, y='CUDA\/$',x='GPU',log_x=False, hover_data=['GPU', 'CUDA cores', 'Price Dec 2020','Processor frequency'])\n\nfig.show()","374d9012":"#### This is how I downloaded the HTML chart from Bamsebu's Github page.  I added the price column.\ndfs = pd.read_html('https:\/\/gist.github.com\/bamsebu\/d5d64760ea4adc77bdc01127e9981dfa')\n\ndf = dfs[0]\ndf","59acdc9f":"### How I saved the final dataframe.\n\ndf.to_csv('cudadf.csv') ","cbe12c76":"### Choosing only the entries that have price data - and more cleaning.  Also, changing  some columns to integer so my plot axes are linear and not crowded categorical axes.","b98db3a2":"#### These are the sites where I got my gpu list and prices.\n\n#### https:\/\/www.videocardbenchmark.net\/high_end_gpus.html\n#### https:\/\/gist.github.com\/bamsebu\/d5d64760ea4adc77bdc01127e9981dfa","462f7674":"### This next plot is done with Plotly.  I couldn't get it to work on my home setup.  After trying many suggested solutions, it just comes up blank.  Here it works fine.\n\n\n### I like to change the axes from the menu at the top of the graph to stretch the plot (reset axes), cutting off the outliers, much like the above plot.  \n### You can hover over the datapoints in this plot to get the GPU info.","3ab1171f":"### The first plot, a Seaborn scatterplot of Price vs. Cuda cores, with hue denoting Processor speed.\n### For the NaNs in Processor Freq, I filled with 0 - else they wouldn't show up on the plot. I didn't feel this data feature was important to what I was trying to accomplish, so I took the easy way out.","f4b48daa":"### Plot for per CUDA core price.  Hover over bar for more info.","95da0665":"### Clean a few entries","6c1d4cf7":"### This plot is the same as the last with the price cutoff at $2800 to drop the outliers and spread the scattered points for better readability.","d623c1d0":"### Upload csv to dataframe.","f6f26be9":"### Create Core Price column for a value comparison","327a5564":"## I have an atom with an onboard gpu (quit laughing please).  To help me with my future system upgrade, I have collected some GPU info which will help in my decision.  Maybe this will help others also.  "}}