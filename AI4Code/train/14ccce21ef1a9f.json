{"cell_type":{"0790b683":"code","1df54abf":"code","fd9452aa":"code","acae42ce":"code","a2810892":"code","1cb5d3c9":"code","8f287528":"code","3a6dcaed":"code","0d77ba9f":"code","926d5883":"code","9ae2631e":"code","333652d0":"code","dec17196":"code","313d5a9e":"code","63c9d040":"code","ad9cf2a7":"code","57f039e5":"code","7d2ce629":"code","7531d945":"markdown","fde4caf6":"markdown","919ae4ed":"markdown","a5d2163b":"markdown","25bb54ea":"markdown","c630576f":"markdown","deb92ce0":"markdown","2895c8ea":"markdown","a63b8478":"markdown","d76bd5ee":"markdown","e3c80a42":"markdown","b2b8222f":"markdown","70da5557":"markdown","d36f2df2":"markdown","37454bb2":"markdown"},"source":{"0790b683":"import numpy as np\nimport pandas as pd ","1df54abf":"df = pd.read_csv(\"..\/input\/iris\/Iris.csv\")\ndf.head()","fd9452aa":"df.columns","acae42ce":"df.info()","a2810892":"for col in df.columns:\n    if col != 'Id':\n        if df[col].dtype != \"object\":\n            print(col + \"'s min:'\",round(np.min(df[col]),2))","1cb5d3c9":"for col in df.columns:\n    if col != 'Id':\n        if df[col].dtype != \"object\":\n            print(col + \"'s max:'\",round(np.max(df[col]),2))","8f287528":"for col in df.columns:\n    if col != 'Id':\n        if df[col].dtype != \"object\":\n            print(col + \"'s (min\/max)*100: \",str(round((np.min(df[col])\/np.max(df[col]))*100,2)) + \"% of max\")","3a6dcaed":"for col in df.columns:\n    if col != 'Id':\n        if df[col].dtype != \"object\":\n            print(col + \"'s max - min:'\",round( np.max(df[col] - np.min(df[col]) ),2) )","0d77ba9f":"for col in df.columns:\n    if col != 'Id':\n        if df[col].dtype != \"object\":\n            print(col + \"'s mean:'\",round(np.mean( df[col]) ,2) )","926d5883":"for col in df.columns:\n    if col != 'Id':\n        if df[col].dtype != \"object\":\n            print(col + \"'s median:'\",round( np.median(df[col]),2) )","9ae2631e":"for col in df.columns:\n    if col != 'Id':\n        if df[col].dtype != \"object\":\n            print(col + \"'s (median\/mean)*100: \",str(round((np.median(df[col])\/np.mean(df[col]))*100,2)) + \"% of mean\")","333652d0":"for col in df.columns:\n    if col != 'Id':\n        if df[col].dtype != \"object\":\n            print(col + \"'s mean - median:'\",round( np.mean(df[col]) - np.median(df[col]) ), 2 )","dec17196":"for col in df.columns:\n    if col != 'Id':\n        if df[col].dtype != \"object\":\n            print(col + \"'s var:'\",round( np.var(df[col]) ,2) )","313d5a9e":"for col in df.columns:\n    if col != 'Id':\n        if df[col].dtype != \"object\":\n            print(col + \"'s std:'\",round(np.std(df[col]) ,2) ) # ddof =0 is default. sum \/ n","63c9d040":"for col in df.columns:\n    if col != 'Id':\n        if df[col].dtype != \"object\":\n            print(col + \"'s std:'\",round(np.std(df[col],ddof=1),2) ) # sum \/(n-1)","ad9cf2a7":"# 1.64:over 90%  1.96:over 95%   2.58:over 99%   3.3:over 99.9%\ndef getOutlier(data,std_distance):\n    outData=[]\n    outIndex = []\n    m = np.mean(data)\n    sd = np.std(data)\n    \n    maxValue = m + std_distance*sd \n    minValue = m - std_distance*sd \n    print(\"maxValue=\",round(maxValue,2),\" minValue=\",round(minValue,2))\n    \n    i = 0\n    for sel in data: \n        z = (sel-m)\/sd\n        if np.abs(z) > std_distance: \n            outData.append(sel)\n            outIndex.append(i)\n            \n            \n        i = i + 1    \n    \n    return outData,outIndex\n\ndef getAllOutlerData(df,std_distance=3.3):\n    total_outlier_index = []\n    for col in df.columns:\n        if col != 'Id':\n            if df[col].dtype != \"object\":\n                print(\"[\" + col + \"'s outlier]\")\n                outData,outIndex = getOutlier(df[col],std_distance)\n\n                if len(outData) > 0 :\n\n                    for sel in outIndex:\n                        total_outlier_index.append(sel)\n\n                    print(col+\"'s outlier Data:'\",outData)\n                    print(col+\"'s outlier Index:'\",outIndex)\n                else:\n                    print(col+\"'s outlier Index:\",\"No outlier\")\n                print(\"\")\n\n            \n\n    return total_outlier_index","57f039e5":"outlierIndex = getAllOutlerData(df)\nprint(\"Toal outlierIndex = \" , outlierIndex)\nprint(\"Toal outlier lenght = \" , len(outlierIndex))\nprint(\"Toal outlier percent = \" , round((100 * len(outlierIndex)\/len(df)),2) ,\"%\")\ndf.loc[outlierIndex]","7d2ce629":"outlierIndex = getAllOutlerData(df,2.58)\nprint(\"Toal outlierIndex = \" , outlierIndex)\nprint(\"Toal outlier lenght = \" , len(outlierIndex))\nprint(\"Toal outlier percent = \" , round((100 * len(outlierIndex)\/len(df)),2) ,\"%\")\n\ndf.loc[outlierIndex]","7531d945":"# min ","fde4caf6":"# mean - median ","919ae4ed":"# get all outliers ","a5d2163b":"# max","25bb54ea":"ddofint, optional\nMeans Delta Degrees of Freedom. \n\nThe divisor used in calculations is N - ddof, where N represents the number of elements. \n\nBy default ddof is zero.","c630576f":"# var : variance","deb92ce0":"# median","2895c8ea":"# mean ","a63b8478":"# std (ddof =1)","d76bd5ee":"# (median \/ mean ) * 100 ","e3c80a42":"if std is greater than 1.64 => out of range 90%\n\nif std is greater than 1.96 => out of range 95%\n\nif std is greater than 2.58 => out of range 99%\n\nif std is greater than 3.30 => out of range 99.9%","b2b8222f":"# max - min ","70da5557":"mean - median is plus value => value less than average is center\n\nmean - median is minus value => value greater than average is center","d36f2df2":"# (min \/ max ) * 100 ","37454bb2":"# std :standard deviation"}}