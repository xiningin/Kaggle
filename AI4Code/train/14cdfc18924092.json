{"cell_type":{"dcbd7a1f":"code","71c7401c":"code","267e6429":"code","cc25c760":"code","a93af142":"code","390dd169":"code","7d78f929":"code","e76c7200":"code","0a2f394c":"code","6855be3e":"code","d5010e80":"code","c072559e":"code","66392408":"code","1fa3e92b":"code","bad1f393":"markdown","7f0b33e7":"markdown","87672595":"markdown","6c423a25":"markdown","251fa979":"markdown","77b91be8":"markdown"},"source":{"dcbd7a1f":"import numpy as np\nimport pandas as pd\nfrom scipy import stats\n\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nsns.set_style('darkgrid')\n\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.model_selection import train_test_split\n\nfrom sklearn.linear_model import LinearRegression","71c7401c":"data = pd.read_csv('..\/input\/spotify-dataset-19212020-160k-tracks\/data.csv')","267e6429":"data","cc25c760":"data = data.drop(['artists', 'id', 'name', 'release_date'], axis=1)","a93af142":"data.info()","390dd169":"data","7d78f929":"plt.figure(figsize=(16, 10))\n\nfor i in range(len(data.columns)):\n    plt.subplot(3, 5, i + 1)\n    sns.boxplot(data[data.columns[i]])\n\nplt.show()","e76c7200":"def get_outlier_counts(df, threshold):\n    df = df.copy()\n    \n    # Get the z-score for specified threshold\n    threshold_z_score = stats.norm.ppf(threshold)\n    \n    # Get the z-scores for each value in df\n    z_score_df = pd.DataFrame(np.abs(stats.zscore(df)), columns=df.columns)\n    \n    # Compare df z_scores to the threshold and return the count of outliers in each column\n    return (z_score_df > threshold_z_score).sum(axis=0)","0a2f394c":"get_outlier_counts(data, 0.99999999999)","6855be3e":"def remove_outliers(df, threshold):\n    df = df.copy()\n    \n    # Get the z-score for specified threshold\n    threshold_z_score = stats.norm.ppf(threshold)\n    \n    # Get the z-scores for each value in df\n    z_score_df = pd.DataFrame(np.abs(stats.zscore(df)), columns=df.columns)\n    z_score_df = z_score_df > threshold_z_score\n    \n    # Get indices of the outliers\n    outliers = z_score_df.sum(axis=1)\n    outliers = outliers > 0\n    outlier_indices = df.index[outliers]\n    \n    # Drop outlier examples\n    df = df.drop(outlier_indices, axis=0).reset_index(drop=True)\n    \n    return df","d5010e80":"def preprocess_inputs(df, outliers=True, threshold=0.95):\n    df = df.copy()\n    \n    # Remove outliers if specified\n    if outliers == False:\n        df = remove_outliers(df, threshold)\n    \n    # Split df into X and y\n    y = df['popularity'].copy()\n    X = df.drop('popularity', axis=1).copy()\n    \n    # Train-test split\n    X_train, X_test, y_train, y_test = train_test_split(X, y, train_size=0.7, random_state=1)\n    \n    # Scale X with a standard scaler\n    scaler = StandardScaler()\n    scaler.fit(X_train)\n    \n    X_train = scaler.transform(X_train)\n    X_test = scaler.transform(X_test)\n    \n    return X_train, X_test, y_train, y_test","c072559e":"outlier_X_train, outlier_X_test, outlier_y_train, outlier_y_test = preprocess_inputs(data, outliers=True)\n\nX_train, X_test, y_train, y_test = preprocess_inputs(data, outliers=False, threshold=0.99999999999)","66392408":"# With outliers\n\noutlier_model = LinearRegression()\noutlier_model.fit(outlier_X_train, outlier_y_train)\n\noutlier_model_acc = outlier_model.score(outlier_X_test, outlier_y_test)\n\nprint(\"Test Accuracy (Outliers): {:.5f}%\".format(outlier_model_acc * 100))","1fa3e92b":"# Without outliers\n\nmodel = LinearRegression()\nmodel.fit(X_train, y_train)\n\nmodel_acc = model.score(X_test, y_test)\n\nprint(\"Test Accuracy (No Outliers): {:.5f}%\".format(model_acc * 100))","bad1f393":"# Outlier Detection","7f0b33e7":"# Getting Started","87672595":"# Preprocessing","6c423a25":"# Training","251fa979":"# Data Every Day  \n\nThis notebook is featured on Data Every Day, a YouTube series where I train models on a new dataset each day.  \n\n***\n\nCheck it out!  \nhttps:\/\/youtu.be\/LQlTO5uhCQ8","77b91be8":"# Task for Today  \n\n***\n\n## Spotify Song Popularity Prediction  \n\nGiven *data about Spotify songs from 1921-2020*, let's try to predict the **popularity** of a given song.  \n  \nWe will use a linear regression models to make our predictions, but we will focus on outlier detection and removal."}}