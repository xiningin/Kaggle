{"cell_type":{"55ca71a3":"code","cb7ae9c8":"code","c7a11eec":"code","11bb100e":"code","6d88c9c7":"code","02d6918b":"code","0f637d5a":"code","b49292d5":"code","b84538ee":"code","443385a6":"code","2ef2138c":"code","9a6971b3":"code","3d8d4f94":"code","d1b73f92":"code","4805e6c5":"code","d26b2257":"markdown","bde69fc5":"markdown","fcf23d03":"markdown","5e7ebefe":"markdown","b80348db":"markdown","ca59452c":"markdown","39e765d1":"markdown","07a3dc87":"markdown","e1edf7b7":"markdown","50037d9d":"markdown","b27de205":"markdown"},"source":{"55ca71a3":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.linear_model import LogisticRegression\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","cb7ae9c8":"hd=pd.read_csv(\"\/kaggle\/input\/heart-disease-uci\/heart.csv\")","c7a11eec":"hd.head(20)","11bb100e":"hd.columns","6d88c9c7":"hd.info()","02d6918b":"y= hd.sex.values\ny","0f637d5a":"x_data=hd.drop([\"sex\"],axis=1)\nx_data","b49292d5":"x=(x_data-np.min(x_data))\/(np.max(x_data)-np.min(x_data)).values\nx","b84538ee":"x_train,x_test,y_train,y_test=train_test_split(x,y,test_size=0.2,random_state=42)\nx_train=x_train.T\nx_test=x_test.T\ny_train=y_train.T\ny_test=y_test.T\n\nprint(\"x train: \",x_train.shape)\nprint(\"x test: \",x_test.shape)\nprint(\"y train: \",y_train.shape)\nprint(\"y test: \",y_test.shape)","443385a6":"def initialize_w_and_b(dimension):\n    w=np.full((dimension,1),0.01)\n    b=0.0\n    return w,b\ndef sigmoid(z):\n    y_head=1\/(1+np.exp(-z))\n    return y_head\n\nprint(sigmoid(0))","2ef2138c":"def forward_backward_propagation(w,b,x_train,y_train):\n   #forward \n    z=np.dot(w.T,x_train)+b\n    y_head=sigmoid(z)\n    loss=-y_train*np.log(y_head)-(1-y_train)*np.log(1-y_head)\n    cost=(np.sum(loss))\/x_train.shape[1]\n    \n    #backward\n    der_w=(np.dot(x_train,((y_head-y_train).T)))\/x_train.shape[1]\n    der_b=np.sum(y_head-y_train)\/x_train.shape[1]\n    gradients={\"der_w\":der_w,\"der_b\":der_b}\n    return cost,gradients ","9a6971b3":"def update(w,b,learning_rate,number_of_iteration):\n    cost_list1=[]\n    cost_list2=[]\n    index=[]\n    \n    for i in range(number_of_iteration):\n        cost,gradients=forward_backward_propagation(w,b,x_train,y_train)\n        cost_list1.append(cost)\n        w=w-learning_rate*gradients[\"der_w\"]\n        b=b-learning_rate*gradients[\"der_b\"]\n        if i % 10 == 0:\n            cost_list2.append(cost)\n            index.append(i)\n            print(\"Cost after iteration %i: %f\"%(i,cost))\n            \n    parameters={\"weigh\":w,\"bias\":b}\n    plt.plot(index,cost_list2)\n    plt.xticks(index,rotation=\"vertical\")\n    plt.xlabel(\"Number of Iteration\")\n    plt.ylabel(\"Cost\")\n    plt.show()\n    \n    return parameters,gradients,cost_list1","3d8d4f94":"def predict(w,b,x_test):\n    z=sigmoid(np.dot(w.T,x_test)+b)\n    Y_prediction=np.zeros((1,x_test.shape[1]))\n    \n    for i in range(z.shape[1]):\n        if z[0,i]<=0.5:\n            Y_prediction[0,i]=0\n        else:\n            Y_prediction[0,i]=1\n            \n    return Y_prediction","d1b73f92":"def logistic_regression(x_train,y_train,x_test,y_test,learning_rate,num_iterations):\n    #initialize\n    dimension=x_train.shape[0]\n    w,b=initialize_w_and_b(dimension)\n    parameters,gradients,cost_list1=update(w,b,learning_rate,num_iterations)\n    \n    y_prediction_test=predict(parameters[\"weigh\"],parameters[\"bias\"],x_test)\n    \n    #print test errors\n    print(\"test accurary:{}\".format(100-np.mean(np.abs(y_prediction_test-y_test))*100))\n\nlogistic_regression(x_train,y_train,x_test,y_test,learning_rate=0.01,num_iterations=500)","4805e6c5":"lr=LogisticRegression()\nlr.fit(x_train.T,y_train.T)\nprint(\"test accuracy {}\".format(lr.score(x_test.T,y_test.T)))","d26b2257":"<a id=\"8\"><\/a><br>\n## **8.Prediction**","bde69fc5":"<a id=\"10\"><\/a><br>\n## **10.Sklearn with Linear Regression**","fcf23d03":"# **Introduction**\nThis is my first machine learning kernel. I used logistic regression.\n<font color = blue>\n## **Content:**\n1. [Load and check data](#1)<br>\n1. [Variable Description](#2)<br>\n1. [Normalization](#3)<br>\n1. [Train Test Split](#4)<br>\n1. [Paramter Initialize and Sigmoid Function](#5)<br>\n1. [Forward and Backward Propagation](#6)<br>\n1. [Updating (Learning) Parameters](#7)<br>\n1. [Prediction](#8)<br>\n1. [Logistic Regression](#9)<br>\n1. [Sklearn with Linear Regression](#10)<br>","5e7ebefe":"<a id=\"1\"><\/a><br>\n## **1.Load and Check Data**","b80348db":"<a id=\"2\"><\/a><br>\n## **2.Veriable Description**\n* age: age\n* sex: sex\n* cp: chest pain type  \n* trestbps: resting blood pressure (in mm Hg on admission to the hospital)\n* chol:serum cholestoral in mg\/dl\n* fbs: fasting blood sugar &gt; 120 mg\/dl) (1 = true; 0 = false\n* restecg:resting electrocardiographic results  \n* thalach: maximum heart rate achieved \n* exang: exercise induced angina\n* oldpeak: ST depression induced by exercise relative to rest","ca59452c":"<a id=\"7\"><\/a><br>\n## **7.Updating (Learning) Parameters**","39e765d1":"<a id=\"9\"><\/a><br>\n## **9.Logistic Regression**","07a3dc87":"<a id=\"5\"><\/a><br>\n## **5.Paramter Initialize and Sigmoid Function**\n* w = weighs\n* b = bias","e1edf7b7":"<a id=\"4\"><\/a><br>\n## **4.Train Test Split**\n_train: real values","50037d9d":"<a id=\"6\"><\/a><br>\n## **6.Forward and Backward Propagation**\n-der:derivative","b27de205":"<a id=\"3\"><\/a><br>\n## **3.Normalization**\nI reduced the values between 1 and 0.<br>\n-normalization formula:(x-min(x))\/(max(x)-min(x))"}}