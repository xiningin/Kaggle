{"cell_type":{"d732bced":"code","99231935":"code","f1b9725f":"code","c34eac26":"code","9e1f9cfb":"code","3986b539":"code","64cc5971":"code","faac092f":"code","8d8409d8":"code","5055a1a7":"code","b40a1f07":"code","a2f148d7":"code","49f68c36":"code","829e4b37":"code","67cf435a":"code","1347b8b7":"code","33597f80":"code","beef9007":"code","fa8c21a6":"code","e11e2336":"markdown","9883902f":"markdown"},"source":{"d732bced":"import numpy as np \nimport pandas as pd \nfrom sklearn.impute import SimpleImputer\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n","99231935":"titanic = pd.read_csv(\"\/kaggle\/input\/titanic\/train.csv\")\n#train_data =train_data.dropna()\ntitanic.head()\n#train_data.shape","f1b9725f":"test_data = pd.read_csv(\"\/kaggle\/input\/titanic\/test.csv\")\n#test_data =test_data.dropna()\ntest_data.head()\n#test_data.shape\n","c34eac26":"titanic = pd.get_dummies(titanic,columns=[\"Embarked\"],prefix=['emb'],drop_first=True)\ntitanic[\"Sex\"] = (titanic[\"Sex\"] == 'female').astype(int)\ntitanic.columns","9e1f9cfb":"X = titanic[['Age','Sex',\"Pclass\",\"SibSp\",\"Parch\",\"Fare\",\"emb_Q\",\"emb_S\"]]\ny =titanic[\"Survived\"]","3986b539":"imp = SimpleImputer(missing_values=np.nan, strategy='median').fit(X)\nX = imp.transform(X)\nX","64cc5971":"from sklearn.model_selection import train_test_split\n\nX_train,X_val,y_train,y_val = train_test_split(X,y,test_size=0.3,stratify=y,random_state=2021)","faac092f":"from sklearn.linear_model import LogisticRegression\n","8d8409d8":"parameters = {\n    \"C\": [ 0.1, 0.11, 0.111],\n    \"l1_ratio\": [0,0.5,1, 2],\n    \"solver\":['saga'],\n    \"fit_intercept\":[True,False],\n    \"random_state\":[0.1,0.5,0,1,2]\n}","5055a1a7":"logreg = LogisticRegression(penalty=\"elasticnet\",max_iter=40000, random_state=2021,class_weight=\"balanced\")","b40a1f07":"from sklearn.model_selection import GridSearchCV","a2f148d7":"grid = GridSearchCV(logreg, parameters, cv=10, scoring=\"roc_auc\",verbose=1,n_jobs=-1)\n\ngrid.fit(X_train,y_train)","49f68c36":"print(f'Meilleur parametre:{grid.best_params_}')\nprint(f'Meilleure resultat:{grid.best_score_}') #historique 0.8292631138884001","829e4b37":"from sklearn.model_selection import cross_val_score\ncv_score = cross_val_score(grid.best_estimator_,X_train,y_train, cv=10,scoring=\"roc_auc\",verbose=1,n_jobs=-1)\ncv_score.mean()","67cf435a":"from sklearn.metrics import roc_auc_score\ny_train_pred_proba_logreg = grid.best_estimator_.predict_proba(X_train)[:,1]\nprint(f'AUC={roc_auc_score(y_train,y_train_pred_proba_logreg)}')","1347b8b7":"#pour trouver une equivalence\ntitanic_test = pd.get_dummies(test_data,columns=[\"Embarked\"],prefix=['emb'],drop_first=True)\ntitanic_test[\"Sex\"] = (test_data[\"Sex\"] == 'female').astype(int)\ntitanic_test.columns\ntitanic_test.shape#pour valider integriter de la bd","33597f80":"#pour ajuster les nan\nX_test = titanic_test[['Age','Sex',\"Pclass\",\"SibSp\",\"Parch\",\"Fare\",\"emb_Q\",\"emb_S\"]]\n\nimp = SimpleImputer(missing_values=np.nan, strategy='median').fit(X_test)\nX_test = imp.transform(X_test)\nX_test","beef9007":"\npredictions = grid.predict(X_test)\nprint(predictions)","fa8c21a6":"output = pd.DataFrame({'PassengerId': test_data.PassengerId, 'Survived': predictions}) # deux ligne\noutput.to_csv('regression_logistique.csv', index=False)\nprint(\"Your submission was successfully saved!\")","e11e2336":"**Evaluation du modele**","9883902f":"**Pour inscription**"}}