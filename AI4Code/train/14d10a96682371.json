{"cell_type":{"321a374e":"code","4ffaae8b":"code","71e30389":"code","32f74c36":"code","98826a7d":"code","b29d26fb":"code","cd10e5de":"code","11d2246f":"code","afca3cae":"code","c04f2426":"code","e5e48931":"code","d2228757":"code","51e8602f":"code","74dc3cb2":"code","4a77aa51":"code","d46373b0":"code","d916a8fd":"markdown","bc1ddc8a":"markdown","8db45323":"markdown","ff8b4b43":"markdown","13a87732":"markdown","5ae56511":"markdown","b5ca7c8d":"markdown","aad09c2c":"markdown","740ad3e0":"markdown","c3438ccf":"markdown"},"source":{"321a374e":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","4ffaae8b":"dataset = pd.read_csv('\/kaggle\/input\/forest-cover-type-prediction\/train.csv')\ndataset.head()","71e30389":"dataset.Cover_Type.unique()","32f74c36":"dataset.info()","98826a7d":"dataset.describe()","b29d26fb":"dataset.groupby(['Cover_Type']).agg(['count'])['Id']","cd10e5de":"# sns.countplot(x='Cover_Type', data=dataset)","11d2246f":"from sklearn.model_selection import train_test_split\n\n# first drop id column\ndataset.drop(['Id'], axis=1, inplace=True)\n\nX_train = dataset.iloc[:, :-1]\ny_train = dataset.iloc[:, -1]\n# X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.25, random_state=42)\n# X_test = None\n# y_test = None\nprint(dataset.shape)\n# print(X.shape)\n# print(y.shape)\n# print(X_train.shape)\n# print(y_train.shape)\n# print(X_test.shape)\n# print(y_test.shape)","afca3cae":"from sklearn.preprocessing import StandardScaler\n\nto_be_scaled_features = ['Elevation', 'Aspect', 'Slope', 'Horizontal_Distance_To_Hydrology',\n       'Vertical_Distance_To_Hydrology', 'Horizontal_Distance_To_Roadways',\n       'Hillshade_9am', 'Hillshade_Noon', 'Hillshade_3pm',\n       'Horizontal_Distance_To_Fire_Points']\n\nsc_X = StandardScaler()\nX_train[to_be_scaled_features] = sc_X.fit_transform(X_train[to_be_scaled_features])\n# X_test[to_be_scaled_features] = sc_X.transform(X_test[to_be_scaled_features])\n","c04f2426":"dataset.columns","e5e48931":"X_train.head()","d2228757":"# from sklearn.ensemble import RandomForestClassifier\n\n# rf_classifier = RandomForestClassifier(n_estimators=100, random_state=42)\n# rf_classifier.fit(X_train, y_train)\n\n# y_pred = rf_classifier.predict(X_test)\n\n# from sklearn.metrics import accuracy_score, confusion_matrix\n\n# print(accuracy_score(y_test, y_pred))\n# rf_proba = rf_classifier.predict_proba(X_test)\n# print(roc_auc_score(y_test, rf_proba, multi_class='ovr'))\n# confusion_matrix(y_test, y_pred)","51e8602f":"from xgboost import XGBClassifier\n\nxgb = XGBClassifier(\n    learning_rate=0.09,\n    n_estimators=500,\n    max_depth=30,\n    nthread=4,\n    objective='multi:softprob',\n    subsample = 0.75,\n)\n\nxgb.fit(X_train, y_train)\n\n# y_pred = xgb.predict(X_test)\n\n# from sklearn.metrics import accuracy_score, classification_report \n\n# print(accuracy_score(y_test, y_pred)*100)\n# xgb_proba = xgb.predict_proba(X_test)\n# print(roc_auc_score(y_test, xgb_proba, multi_class='ovr')*100)\n# print(classification_report(y_test, y_pred))","74dc3cb2":"from lightgbm import LGBMClassifier\n\nlgb = LGBMClassifier(learning_rate=0.09,\n                       num_leaves = 500,\n                       boosting_type='gbdt',\n                       objective= 'multiclass',\n                       metric= 'multi_logloss',\n                       max_depth = 30,\n#                        n_estimators=3000,\n#                        subsample_for_bin=4000, \n#                        min_split_gain=2,\n#                        min_child_weight=2,\n#                       min_child_samples=5,\n                      subsample=0.75\n                    )\n\nlgb.fit(X_train, y_train)\n\n\n# y_pred = lgb.predict(X_test)\n\n# from sklearn.metrics import accuracy_score, classification_report \n\n# print(accuracy_score(y_test, y_pred)*100)\n# xgb_proba = xgb.predict_proba(X_test)\n# print(roc_auc_score(y_test, xgb_proba, multi_class='ovr')*100)\n# print(classification_report(y_test, y_pred))","4a77aa51":"# from sklearn.ensemble import ExtraTreesClassifier\n\n# et = ExtraTreesClassifier(n_estimators=500,n_jobs=-1,random_state=0)\n# et.fit(X_train, y_train)\n\n# y_pred = et.predict(X_train)\n\n# from sklearn.metrics import accuracy_score, classification_report \n\n# print(accuracy_score(y_train, y_pred)*100)\n# xgb_proba = et.predict_proba(X_train)\n# print(roc_auc_score(y_train, xgb_proba, multi_class='ovr')*100)\n# print(classification_report(y_train, y_pred))","d46373b0":"validation_set = pd.read_csv('\/kaggle\/input\/forest-cover-type-prediction\/test.csv')\n# validation_set.head()\nids = validation_set['Id']\nvalidation_set.drop(['Id'], axis=1, inplace=True)\nvalidation_set[to_be_scaled_features] = sc_X.transform(validation_set[to_be_scaled_features])\ny_result = xgb.predict(validation_set)\n\ny_result = pd.Series(y_result, name='Cover_Type')\nids = pd.Series(ids, name='Id')\nsubmission = pd.concat([ids,y_result], axis=1)\nsubmission.to_csv('\/kaggle\/working\/submission_xgb.csv', index=False)","d916a8fd":"## Understand business problem:\nDesign and implement a system which can process the unscaled and binary features and predict the forest cover type. This is a multi-class classification project.\nThe test data is very large when compared to the train data. ","bc1ddc8a":"As we know this is a multi class classification task.\nNow let's load the validation set from test.csv","8db45323":"# Forest Cover Type Prediction\n\nWe shall follow the following steps to complete this challange:\n1. Understand the business problem\n2. Get the data\n3. Discover and visualize insights (univariate and multi variate analysis)\n4. Prepare data for ML algorithms\n5. Select a model and train it\n6. Fine tune your model\n7. Launch, monitor and maintain your system (not needed in this case).\n","ff8b4b43":"## Discover and visualize insights\nLet's start with univariate and bivariate analysis to understand our data.","13a87732":"As we can see Random forest classifier performs the best here.\nBefore we optimise this further, lets try Xgboost classifier\n","5ae56511":"## Get the data\nWe are mainly concerned with train.csv and test.csv here.\nLet's load it into a pandas dataframe.\n","b5ca7c8d":"We don't have the Cover_Type variable as it is the independent variable that we will predict.","aad09c2c":"## Prepare data for ML algorithms\nAs we have seen, the features have very different scales. So we need to bring them in same scale. Here we will use standard scaler class from sklearn.\nBut before that, its really important to split the dataset into train and test sets.\nLet's do that first","740ad3e0":"As we have scaled the data and we don't have any missing values, let's train multiple machine learning models and see which performs best.","c3438ccf":"Let's try couple other classifiers"}}