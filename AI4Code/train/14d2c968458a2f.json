{"cell_type":{"63d6a555":"code","15069ccf":"code","939b431a":"code","fc9f4d88":"code","16a86544":"code","adb3d212":"code","315161ad":"code","a963090b":"code","9185bf4d":"code","59c189de":"code","98215e0b":"code","8c3d68ab":"code","69ff5339":"code","adf4c35a":"code","f9481b6a":"code","64a13b3c":"code","ed53c573":"code","0dd65aca":"code","d4bca2cb":"code","5e92b055":"code","d9f3d29d":"code","3cb20793":"code","47d7008b":"code","8a2dddc5":"code","434ee849":"code","7e16d488":"code","29cb1849":"code","a0ab00e9":"code","9217af25":"code","3a596e9f":"code","89d1e9d3":"code","983d3fd2":"code","341b9c43":"code","06caa760":"code","0fecce61":"code","caa1e1f1":"code","46ef3c61":"code","5d1d09ea":"code","73629347":"code","12f52145":"code","b22fc229":"code","4f6e13a6":"code","c432a4d1":"code","668306c9":"code","db148db8":"code","909ccbbd":"code","ea621869":"code","4eda3177":"code","e2f785a8":"code","6a27c22a":"code","f88ac1e8":"code","fbdbe5d9":"code","386f53bf":"code","297d6465":"code","8fb6a559":"code","d66b619a":"code","43456580":"code","39b3fa36":"code","186da557":"code","a73514ce":"code","90fd30f0":"code","c83b0c22":"code","e9823f18":"code","2e19922a":"code","86129270":"code","5e2135b5":"code","36a0a980":"code","b8b04a17":"code","f3896294":"code","d8d9fc92":"code","3a6cc50b":"code","6077efee":"code","1b5f8de3":"code","e3347eab":"code","5141144c":"code","b7962146":"code","4569c438":"code","9ab1d2a3":"code","296f59f5":"code","3c18fd4b":"code","7c6de1aa":"code","15bf842f":"code","78082717":"markdown","6d3d8e01":"markdown","c8b08889":"markdown","2272d654":"markdown","6565f86c":"markdown","1a3afa15":"markdown","d25f139a":"markdown","0b22a5a5":"markdown","adfa125a":"markdown","de45f32f":"markdown","ae891c7b":"markdown","f01bd601":"markdown","4f78c9d5":"markdown","7ca1a6ea":"markdown"},"source":{"63d6a555":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nimport sklearn\nfrom sklearn.cluster import KMeans\n\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n    \n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","15069ccf":"dados=pd.read_csv('..\/input\/google-playstore-apps\/Google-Playstore.csv')","939b431a":"dados.columns","fc9f4d88":"dados.rename(columns={'App Name':'App_Name', 'App Id':'App_Id', 'Rating Count':'Rating_Count',\n       'Minimum Installs':'Minimum_Installs', 'Maximum Installs':'Maximum_Installs',\n       'Minimum Android':'Minimum_Android', 'Developer Id':'Developer_Id', 'Developer Website':'Developer_Website',\n       'Developer Email':'Developer_Email', 'Last Updated':'Last_Updated', 'Content Rating':'Content_Rating',\n       'Privacy Policy':'Privacy_Policy', 'Ad Supported':'Ad_Supported', 'In App Purchases':'In_App_Purchases', 'Editors Choice':'Editors_Choice'},inplace=True)","16a86544":"dados.head()","adb3d212":"dados.describe()","315161ad":"dados.info()","a963090b":"dados.isnull().sum()","9185bf4d":"dados.drop(['App_Id','Developer_Id', 'Developer_Website', 'Developer_Email','Privacy_Policy'],inplace=True,axis=1)","59c189de":"dados.isnull().sum()","98215e0b":"dados.isna().sum()","8c3d68ab":"dados.Rating.fillna(0,inplace=True)","69ff5339":"dados.Rating_Count.fillna(0,inplace=True)","adf4c35a":"dados.isna().sum()","f9481b6a":"dados.dropna(axis=0,inplace=True,subset=['Installs','Minimum_Installs','Category'])","64a13b3c":"dados.isna().sum()","ed53c573":"dados.info()","0dd65aca":"dados.Minimum_Android.unique()","d4bca2cb":"dados[dados.Minimum_Android.isna()]","5e92b055":"dados.Minimum_Android.fillna('N\u00e3o Consta', inplace=True)","d9f3d29d":"dados.Released.fillna('N\u00e3o Consta',inplace=True)","3cb20793":"dados[dados.App_Name.isna()]","47d7008b":"dados.App_Name.fillna('N\u00e3o Consta',inplace=True)","8a2dddc5":"dados[dados.App_Name.isna()]","434ee849":"dados.isna().sum()","7e16d488":"dados[dados.duplicated()]","29cb1849":"dados.drop_duplicates(inplace=True)","a0ab00e9":"dados[dados.duplicated()]","9217af25":"Box_Rating=dados.boxplot(column='Rating', figsize=(12,7))","3a596e9f":"dados.Rating.describe()","89d1e9d3":"Box_Minimum_Installs=dados.boxplot(column='Minimum_Installs', figsize=(12,7))","983d3fd2":"valor0=dados.Minimum_Installs","341b9c43":"Q1= valor0.quantile(.25)\nQ3= valor0.quantile(.75)\nIIQ= Q3-Q1\nlimite_inferior = Q1 - (1.5*IIQ)\nlimite_superior = Q3 + (1.5*IIQ)","06caa760":"selecao = (valor0 >= limite_inferior) & (valor0 <= limite_superior)\ndados_Minimum_Installs = dados[selecao]","0fecce61":"Box_Minimum_Installs = dados_Minimum_Installs.boxplot(column='Minimum_Installs', figsize=(12,7))","caa1e1f1":"Box_Maximum_Installs=dados.boxplot(column='Maximum_Installs', figsize=(12,7))","46ef3c61":"valor1=dados.Maximum_Installs","5d1d09ea":"Q1= valor1.quantile(.25)\nQ3= valor1.quantile(.75)\nIIQ= Q3-Q1\nlimite_inferior = Q1 - (1.5*IIQ)\nlimite_superior = Q3 + (1.5*IIQ)","73629347":"selecao = (valor1 >= limite_inferior) & (valor1 <= limite_superior)\ndados_Maximum_Installs = dados[selecao]","12f52145":"Box_Maximum_Installs = dados_Maximum_Installs.boxplot(column='Maximum_Installs', figsize=(12,7))","b22fc229":"dados.boxplot('Price', figsize=(12,7))","4f6e13a6":"valor2=dados.Price","c432a4d1":"Q1= valor2.quantile(.25)\nQ3= valor2.quantile(.75)\nIIQ= Q3-Q1\nlimite_inferior = Q1 - (1.5*IIQ)\nlimite_superior = Q3 + (1.5*IIQ)","668306c9":"selecao = (valor2 >= limite_inferior) & (valor2 <= limite_superior)\ndados_Price = dados[selecao]","db148db8":"Box_Price = dados_Price.boxplot(column='Price', figsize=(12,7))","909ccbbd":"dados.Price.unique()","ea621869":"dados_new = dados_Minimum_Installs","4eda3177":"dados_new.head()","e2f785a8":"Box_Category = dados_new.boxplot(['Rating'],by=['Category'], figsize=(80,7))","6a27c22a":"modelo = KMeans(n_clusters = 10, init = 'random', random_state=0)","f88ac1e8":"X=dados_new[['Price']]","fbdbe5d9":"X","386f53bf":"price = modelo.fit(X)","297d6465":"price.cluster_centers_","8fb6a559":"label = price.cluster_centers_","d66b619a":"dados_new.Currency.unique()","43456580":"dados_new.groupby(by=['Currency']).count()[['Price']]","39b3fa36":"dados_new.groupby(by=['Currency']).sum()","186da557":"dados_new.shape","a73514ce":"dados_new.head()","90fd30f0":"dados_filtrados = dados_new.query('Currency ==\"USD\" or Currency == \"XXX\"')","c83b0c22":"dados_filtrados.head()","e9823f18":"plt.figure( figsize=(80, 5))\nax = plt.hist(data=dados_filtrados, x='Category')","2e19922a":"quant_cat=pd.DataFrame(dados_filtrados.Category.value_counts()).iloc[:10]\nquant_cat","86129270":"quant_cat.rename(columns={'Category':'Count'}, inplace=True)\nquant_cat","5e2135b5":"quant_cat.index.name ='Category' \nquant_cat","36a0a980":"fig, ax = plt.subplots(figsize=(15,6))\nsns.barplot(data=quant_cat, x=quant_cat.index, y=quant_cat['Count'], ax=ax, palette=[ '#0C154A','#0C154A','#0C154A','#111E6C','#111E6C','#111E6C','#192DA1','#192DA1','#2039CC','#2039CC'])\n#adicionando t\u00edtulo\nax.set_title(\"Quantidade x Categoria\", fontdict={'fontsize':15})\n\n#mudando nome e tamanho do label x\nax.set_xlabel('Categoria', fontdict={'fontsize':13})\n\n#mudando nome e tamanho do label y\nax.set_ylabel('Quantidades', fontdict={'fontsize':14})\n\n#mudando tamanho dos labels dos ticks\nax.tick_params(labelsize=10)\n\n\n#otimizar espa\u00e7o da figure\nfig.tight_layout();","b8b04a17":"quant_class=dados_filtrados.groupby(['Category']).mean()[['Rating']].sort_values(by='Rating',ascending=False).iloc[:10]\nquant_class","f3896294":"fig, ax2 = plt.subplots(figsize=(15,6))\nsns.barplot(data=quant_class, x=quant_class.index, y=quant_class['Rating'], ax=ax2, palette=[ '#735702','#735702','#735702','#A68B03','#A68B03','#A68B03','#D9B504','#D9B504','#D9CB04','#D9CB04'])\n#adicionando t\u00edtulo\nax2.set_title(\"Quantidade de Estrelas x Categoria\", fontdict={'fontsize':15})\n\n#mudando nome e tamanho do label x\nax2.set_xlabel('Categoria', fontdict={'fontsize':13})\n\n#mudando nome e tamanho do label y\nax2.set_ylabel('Quantidades de Estrelas', fontdict={'fontsize':14})\n\n#mudando tamanho dos labels dos ticks\nax2.tick_params(labelsize=10)\n\n\n#otimizar espa\u00e7o da figure\nfig.tight_layout();","d8d9fc92":"agrupado = dados_filtrados.groupby(['Category']).mean().sort_values(by='Maximum_Installs',ascending=False).iloc[:20]\nagrupado","3a6cc50b":"agrupado_min = dados_filtrados.groupby(['Category']).mean().sort_values(by='Maximum_Installs',ascending=False).iloc[-10:]\nagrupado_min","6077efee":"fig, (g1,g2) = plt.subplots(nrows=2, ncols=1, figsize=(30,6))\n\nsns.barplot(ax=g1,data=agrupado, x=agrupado.index, y=agrupado['Maximum_Installs'], palette=[ '#0C154A','#0C154A','#0C154A','#111E6C','#111E6C','#111E6C','#192DA1','#192DA1','#2039CC','#2039CC'])\nsns.barplot(ax=g2,data=agrupado, x=agrupado.index, y=agrupado['Rating'], palette=[ '#735702','#735702','#735702','#A68B03','#A68B03','#A68B03','#D9B504','#D9B504','#D9CB04','#D9CB04'])\n\n#adicionando t\u00edtulo\ng1.set_title(\"Quantidade de Instala\u00e7\u00e3o_Maxima (M\u00e9dia) x Categoria\", fontdict={'fontsize':15})\ng2.set_title(\"Quantidade de Estrelas (M\u00e9dia) x Categoria\", fontdict={'fontsize':15})\n\n#mudando nome e tamanho do label x\ng1.set_xlabel('Categoria', fontdict={'fontsize':13})\ng2.set_xlabel('Categoria', fontdict={'fontsize':13})\n\n#mudando nome e tamanho do label y\ng1.set_ylabel('Qt_Instala\u00e7\u00e3o (M\u00e9dia)', fontdict={'fontsize':14})\ng2.set_ylabel('Qt_Estrelas(M\u00e9dia)', fontdict={'fontsize':14})\n\n#mudando tamanho dos labels dos ticks\ng1.tick_params(labelsize=10)\ng2.tick_params(labelsize=10)\n\n#otimizar espa\u00e7o da figure\nfig.tight_layout();\n","1b5f8de3":"fig, (g1,g2) = plt.subplots(nrows=2, ncols=1, figsize=(15,6))\n\nsns.barplot(ax=g1,data=agrupado_min, x=agrupado_min.index, y=agrupado_min['Maximum_Installs'], palette=[ '#0C154A','#0C154A','#0C154A','#111E6C','#111E6C','#111E6C','#192DA1','#192DA1','#2039CC','#2039CC'])\nsns.barplot(ax=g2,data=agrupado_min, x=agrupado_min.index, y=agrupado_min['Rating'], palette=[ '#735702','#735702','#735702','#A68B03','#A68B03','#A68B03','#D9B504','#D9B504','#D9CB04','#D9CB04'])\n\n#adicionando t\u00edtulo\ng1.set_title(\"Quantidade de Instala\u00e7\u00e3o_Minima (M\u00e9dia) x Categoria\", fontdict={'fontsize':15})\ng2.set_title(\"Quantidade de Estrelas (M\u00e9dia) x Categoria\", fontdict={'fontsize':15})\n\n#mudando nome e tamanho do label x\ng1.set_xlabel('Categoria', fontdict={'fontsize':13})\ng2.set_xlabel('Categoria', fontdict={'fontsize':13})\n\n#mudando nome e tamanho do label y\ng1.set_ylabel('Qt_Instala\u00e7\u00e3o (M\u00e9dia)', fontdict={'fontsize':14})\ng2.set_ylabel('Qt_Estrelas (M\u00e9dia)', fontdict={'fontsize':14})\n\n#mudando tamanho dos labels dos ticks\ng1.tick_params(labelsize=10)\ng2.tick_params(labelsize=10)\n\n#otimizar espa\u00e7o da figure\nfig.tight_layout();","e3347eab":"comics_min = 3973 * 0.0927\ncomics_max = 8858 * 0.0927\n\ncomics_media =(comics_max+ comics_min)\/2 \n\nsimulation_min = 4413 * 0.2137\nsimulation_max = 10134 * 0.2137\n\nsimulation_media =(simulation_max + simulation_min)\/2 \n\nprint('\\nCalculo de Potencial Lucro\\n')\nprint(f'comics_min= {comics_min} | comics_max= {comics_max} | comics_media= {comics_media}')\nprint(f'\\nsimulation_min= {simulation_min} | simulation_max= {simulation_max} | simulation_media= {simulation_media}')\nprint(f'\\nsimulation_min= {round((simulation_min\/comics_min)*100,1)}% | simulation_max= {round((simulation_max\/comics_max)*100,1)}% | simulation_media= {round((simulation_media\/comics_media)*100,1)}%')\n","5141144c":"\npotencial_lucro = pd.DataFrame(index=['Comics','Simulation','Simulation em %'], data= {'Minimo_Lucro':[368,943,256.1],\n                                                     'Maximo_Lucro':[821,2165,263.7],'Media_Lucro':[594,1554,261.4]})\npotencial_lucro","b7962146":"tb_lucro=pd.DataFrame(data={'Lucro_maximo':round(agrupado['Maximum_Installs']*agrupado['Price'],1),'Lucro_minimo':round(agrupado['Minimum_Installs']*agrupado['Price'],1)})\ntb_lucro['Lucro_medio']= (tb_lucro['Lucro_maximo']+tb_lucro['Lucro_minimo'])\/2","4569c438":"tb_lucro = tb_lucro.sort_values(by='Lucro_medio', ascending=False)\ntb_lucro['Rank_%'] = tb_lucro['Lucro_medio'].rank(pct=True)\ntb_lucro['Rank_%_(-1)'] = 1- tb_lucro['Rank_%']\ntb_lucro['Class'] = 21-tb_lucro['Lucro_medio'].rank(method='min')\ntb_lucro","9ab1d2a3":"print(f'Diferen\u00e7a em % entre as classifica\u00e7\u00f5es Simulation ')\nprint(f'\\nComics | 1\u00b0 Categoria')\nprint(f'\\n{ round(( (2.8-2.6)\/2.8 ) *100,1)}% | { round(((3.17-2.8)\/3.17 ) *100,1) }%')\n","296f59f5":"diferenca_c_simulation = pd.DataFrame(index=['Comics','1\u00b0 no Ranking'] ,data={'Dif_Simulation_%':[7.1,11.7]})\ndiferenca_c_simulation","3c18fd4b":"aa = round(((4657-4413)\/4657)*100,1)\nbb = round(((11041-10134)\/11041)*100,1)\n\naa0 = round(((4657-3973)\/4657)*100,1)\nbb0 = round(((11041-8858)\/11041)*100,1)\n\n\nprint(f'Diferen\u00e7a em % entre Crescimento  Simulation ')\nprint(f'\\n1\u00b0 Categoria')\nprint(f'\\nsimulation_min= {aa}% | simulation_max= {bb}% | simulation_media= {round((bb+aa)\/2,1)}%' )\n\n\n\nprint(f'\\n\\n\\n\\nDiferen\u00e7a em % entre Crescimento  Comics ')\nprint(f'\\n1\u00b0 Categoria')\nprint(f'\\nsimulation_min= {aa0}% | simulation_max= {bb0}% | simulation_media= {round((bb0+aa0)\/2,1)}%' )","7c6de1aa":"crescimento_dif_simulation = pd.DataFrame(index=['dif_simulation','dif_comics'],data={'1\u00b0_Rankin_Minimo_%': [5.2,14.7],'1\u00b0_Rankin_Maximo_%':[8.2,19.8],'1\u00b0_Rankin_Media_%':[6.7,17.2]})\ncrescimento_dif_simulation","15bf842f":"tb_crescimento = pd.DataFrame(data=agrupado['Maximum_Installs'])\ntb_crescimento['Rank_%'] = tb_crescimento['Maximum_Installs'].rank(pct=True)\ntb_crescimento['Rank_%_(-1)'] = 1-tb_crescimento['Rank_%']\ntb_crescimento['Class'] = 21-tb_crescimento['Maximum_Installs'].rank(method='min')\ntb_crescimento","78082717":"# Tratando outliers","6d3d8e01":"# Consulta na base\nFazendo consulta na base de dados usando query","c8b08889":"# Gerando gr\u00e1ficos","2272d654":"# Criando Tabelas","6565f86c":"# Investigando\nAp\u00f3s clusterizar os dados pelo pre\u00e7o comercializado, notamos uma grande discrepancia entre as classes. Vamos investigar um pouco mais a funco esse detalhe.","1a3afa15":"# Discrepancia encontrada na base\nEm nosso banco de dados temos 54 tipos difernetes de moedas, causando uma discrepancia muito elevada em nossa an\u00e1lise. Teremos de fazer um tratamento discartando os dados com menos frequencia.Para isso vamos primeiramente verificar quais moedas possuem maior influencia em nosso banco de dados.","d25f139a":"# Clustering \n* Devido a grande variedade de pre\u00e7os, vamos clusterizar essa variavel com a biblioteca KMeans\n* Vamos usar o DataFrame_new contendo a sele\u00e7\u00e3o dos dados minimos instalados, pois essa base n\u00e3o consta mais os outliers.","0b22a5a5":"# Conclus\u00e3o\n\nAn\u00e1lisando os gr\u00e1ficos m\u00e9dios de instala\u00e7\u00e3o e classifica\u00e7\u00e3o detectamos uma boa oportunidade para cria\u00e7\u00e3o de aplicativos no seguimentos de comics e simulation. Tendo respectivamente: \n\n> Category   | Rating | Minimum_Installs | Maximum_Installs | Price\n\n>  Comics    |  2.6   |       3973       |      8858        | 0.0927\n\n> Simulation |   2.8  |       4413       |      10134       | 0.2137\n\n\nAp\u00f3s o c\u00e1lculo de potencial de Lucro constatamos que o simulation possui maior potencial de lucro. Porem o categoria com maior potencial de crescimento foi o comics.","adfa125a":"## Analisando valores vazies\n\nConseguimos identificar numeros nulos nas seguintes colunas \n>App_Name, Category, Rating, Rating_Count,Installs, Mimum_Installs, Currency, Minimum_Android, Developer_Id, Developer_Website, Developer_Email, Released, Privacy_Policy.\n\nPorem em nossa abordagem iremos tratar apenas as colunas relevantes para nossas an\u00e1lises e descartaremos as demais.\n\n>Indicadores relevantes:\n*   Rea\u00e7\u00f5es\/intala\u00e7\u00f5es\n*   Avalia\u00e7\u00e3o m\u00e9dia dos aplicativos\n*   Formas de pagamento\n","de45f32f":"\n## Analisando os nomes das colunas\n\n> Olhando para coluna, conseguimos notar que alguns nomes possuem espassos o que pode apresentar inconsistencia na execu\u00e7\u00e3o de alguns comando. Para mitigar esse problema vamos trocar os espassos no meio do nome por \"_\".\n","ae891c7b":"# Tabela dos dados agrupados","f01bd601":"\n# Qual o tipo de aplicativo seria mais rentavel?\n\n## Objetivo:\n\n***1- Identificar quais categorias de aplicativos s\u00e3o mais buscados pelos usuario.***\n\n***2- Identificar qual o indice de satisfa\u00e7\u00e3o nas categorias listadas .***\n\n\n > A analise ser\u00e1 baseada em atributos listados de uma base de dados coledata em dezembro de 2020 disponivel no Kaggle. Sendo estes atributos a linguagem do app, classifica\u00e7\u00e3o, categoria, valor comercializado, avalia\u00e7\u00e3o m\u00e9dia, rea\u00e7\u00f5es dos usuarios e\/ou numero de instala\u00e7\u00f5es. Com esses parametros esperamos identificar o potencial de crescimento dos apps e a satisfa\u00e7\u00e3o\/lealdade do cliente em rela\u00e7ao a categoria.  \n\n*  O potencial de crecimento ser\u00e1 medido atrav\u00e9s da quantidade de rea\u00e7\u00f5es\/intala\u00e7\u00f5es observadas.\n*  A satisfa\u00e7\u00e3o\/lealdade ser\u00e1 medida atrav\u00e9s da avalia\u00e7\u00e3o m\u00e9dia dos aplicativos.\n*  O potencial de retorno ser\u00e1 avaliado comparando a quantidade de instala\u00e7\u00f5es e suas formas de pagamento\n* A potencial oportunidade de mercado ser\u00e1 levantada cruzando o indice elevado de crescimento e baixa satisfa\u00e7\u00e3o do usu\u00e1rio.  \n\n  No final ser\u00e1 apresentado as caracteristicas mais promissoras para o lan\u00e7amento de aplicativos diantes do mercado atual, determidado por indicadores indiretos.\n  ","4f78c9d5":"# Tratando a discrepancia\nAn\u00e1lisando os dados a classifica\u00e7\u00e3o 'USD' e 'XXX' possuem maior quantidade de index em nossa base. \nVamos deixar em nossa base nova apenas essas duas vari\u00e1veis","7ca1a6ea":"# Processamento\/Tratamento dos dados\n\nNessa primeira etapa ser\u00e1 verificar a existencia de dados duplicados,faltantes,formatados de forma n\u00e3o convencional, dados inv\u00e1lidos e inconscistentes. Caso seja encontrados ser\u00e1 feito o devido tratamento para cada caso observado."}}