{"cell_type":{"a9838628":"code","e3b888be":"code","4c0b1b9f":"code","cb0d6db4":"code","4fe3c27d":"code","d3ee9977":"code","e232533b":"code","3751d7ce":"markdown","7a0a3b07":"markdown","faf9bcc3":"markdown","173da635":"markdown","28d60593":"markdown","a1899527":"markdown","3254043f":"markdown"},"source":{"a9838628":"# Libs\n!pip install pyts\n\nfrom mpl_toolkits.axes_grid1 import ImageGrid\nfrom pyts.image import GramianAngularField\nfrom pyts.datasets import load_gunpoint\nimport pandas as pd\nimport numpy as np\n\nfrom plotly.subplots import make_subplots\nimport plotly.graph_objects as go\nimport matplotlib.pyplot as plt\nimport pyarrow.parquet as pq\nimport plotly.express as px\nimport glob","e3b888be":"def generate_time_series(n, length = 900):\n    \n    \"\"\"\n    Generate n time series of size length\n\n    Parameters\n    ----------\n    n: int\n        number of time series to generate\n    length: int\n        size of the time series\n    \"\"\"\n    \n    time_series = []\n    \n    for _ in range(n):\n        time_serie = pd.Series(\n            np.random.randn(length), \n            index = np.arange(length)\n        ).cumsum()\n        time_series.append(time_serie)\n    return time_series\n\nts = generate_time_series(n = 50)","4c0b1b9f":"def plot_50_encoded_ts(time_series, method = 'summation'):\n\n    \"\"\"\n    Encode and plot 50 time series\n\n    Parameters\n    ----------\n    time_series: list\n        list of time series to encode\n    method: str\n        summation or difference GAF\n    \"\"\"\n    \n    if method == 'summation':\n        gasf = GramianAngularField(image_size=30, method='summation')\n        X = gasf.fit_transform(time_series)\n\n    elif method == 'difference':\n        gadf = GramianAngularField(image_size=30, method='difference')\n        X = gadf.fit_transform(time_series)\n\n    fig = make_subplots(\n        rows=5, cols=10, \n        #subplot_titles=(\"GASF\", \"GADF\"),\n        vertical_spacing = 0.1\n    )\n\n    for index in range(50):\n\n        fig.add_trace(\n            go.Heatmap(\n                z=X[index]\n            ),\n            row = index\/\/10+1, col = index%10+1,\n        )\n\n\n    fig.update_traces(showscale=False)\n    fig.update_layout(\n        showlegend = False,\n        template = 'plotly_dark',\n        width = 1200,\n        height = 900\n\n    )\n\n    fig.update_yaxes(title = '', visible = True, showticklabels = False)    \n    fig.update_xaxes(title = '', visible = True, showticklabels = False)\n\n    fig.show()\n    \nplot_50_encoded_ts(ts)","cb0d6db4":"# helpers\ndef get_snapshot_data(stock_id, time_id):\n    \n    \"\"\"\n    Import and filter Optiver data\n\n    Parameters\n    ----------\n    stock_id: int\n    time_id : int\n    \"\"\"\n    \n    book_table = pq.read_table(f'..\/input\/optiver-realized-volatility-prediction\/book_train.parquet\/stock_id={stock_id}').to_pandas()\n    trade_table =  pq.read_table(f'..\/input\/optiver-realized-volatility-prediction\/trade_train.parquet\/stock_id={stock_id}').to_pandas()\n    \n    book_table = book_table[book_table['time_id']==time_id]\n    book_table.loc[:,'stock_id'] = str(stock_id)\n    \n    trade_table = trade_table[trade_table['time_id']==time_id]\n    trade_table.loc[:,'stock_id'] = str(stock_id)\n    \n    return book_table, trade_table\n\ndef compute_wap(book_table):\n    \n    \"\"\"\n    Compute WAP and WAP_2\n\n    Parameters\n    ----------\n    book_table: pd.DataFrame\n    \"\"\"\n    \n    book_table['WAP'] = (book_table['bid_price1'] * book_table['ask_size1'] + book_table['ask_price1'] * book_table['bid_size1']) \/ (book_table['bid_size1'] + book_table['ask_size1'])\n    book_table['WAP_2'] = (book_table['bid_price2'] * book_table['ask_size2'] + book_table['ask_price2'] * book_table['bid_size2']) \/ (book_table['bid_size2'] + book_table['ask_size2'])\n\n    return book_table\n\ndef plot_wap(book_table, second = False):\n    \n    \"\"\"\n    Plot time serie representing WAP or WAP_2\n\n    Parameters\n    ----------\n    book_table: pd.DataFrame\n    second: boolean\n        whether to plot WAP_2 or not\n    \"\"\"\n    \n    stock_id = book_table.stock_id[0]\n    time_id = book_table.time_id[0]\n    \n    if second:\n        fig = px.line(book_table, \n                      x=\"seconds_in_bucket\", \n                      y=\"WAP\", \n                      title=f'WAP of stock_id_{stock_id}, time_id_{time_id}')\n        \n    else:\n        fig = px.line(book_table, \n                      x=\"seconds_in_bucket\", \n                      y=\"WAP_2\", \n                      title=f'WAP of stock_id_{stock_id}, time_id_{time_id}')\n        \n    fig.show()","4fe3c27d":"def preprocess_optiver(stock_ids, time_ids):\n    \n    \"\"\"\n    Return a list of time series to be encoded\n\n    Parameters\n    ----------\n    stock_ids: list\n        list of stock ids \n    time_ids: list\n        list of time ids\n    \"\"\"\n    \n    time_series = []\n    \n    for stock_id, time_id in zip(stock_ids, time_ids):\n        \n        # Import, filter and create WAP\n        book_table, trade_table = get_snapshot_data(stock_id, time_id)\n        book_table_with_wap = compute_wap(book_table)\n        \n        # Transform WAP as a time serie and append to the list of time series\n        ts = pd.Series(book_table_with_wap['WAP'])\n        time_series.append(ts)\n        \n    return time_series\n\ntime_series = preprocess_optiver(stock_ids = [0], time_ids = [5])","d3ee9977":"def get_GAFs(time_series):\n\n    \"\"\"\n    Encode time series list under GADF and GASF representation\n\n    Parameters\n    ----------\n    time_series: list\n        list of time series\n    \"\"\"\n    \n    gasf = GramianAngularField(image_size=33, method='summation')\n    gadf = GramianAngularField(image_size=33, method='difference')\n    \n    X_gasf = gasf.fit_transform(time_series)\n    X_gadf = gadf.fit_transform(time_series)\n    \n    return X_gasf, X_gadf\n\nX_gasf, X_gadf = get_GAFs(time_series)","e232533b":"def plot_GAF_plotly(GASF, GADF, save = True):\n    \n    \"\"\"\n    Plot GASF and GADF\n\n    Parameters\n    ----------\n    GASF: list[list]\n        GASF matrix\n    GADF: list[list]\n        GADF matrix\n    save: boolean\n        whether to save GAF plot or not\n    \"\"\"\n    \n    fig = make_subplots(\n        rows=1, cols=2, \n        subplot_titles=(\"GASF\", \"GADF\"),\n        vertical_spacing = 0.1\n    )\n\n    fig.add_trace(\n        go.Heatmap(\n            z=GASF[0]\n        ),\n        row=1, col=1,\n    )\n\n    fig.add_trace(\n        go.Heatmap(\n            z=GADF[0],\n        ),\n        row=1, col=2\n    )\n\n    fig.update_traces(showscale=False)\n    fig.update_layout(\n        showlegend = False,\n        template = 'plotly_dark',\n        width = 1050,\n        height = 600\n\n    )\n\n    fig.update_yaxes(title = '', visible = True, showticklabels = False)    \n    fig.update_xaxes(title = '', visible = True, showticklabels = False)\n\n    fig.show()\n\n    if save:\n        pass\n#         fig.write_image(\"images\/GAF_plotly.png\")\n#         fig.write_image(\"image_vectors\/GAF_plotly.svg\")\n\n    \nplot_GAF_plotly(X_gasf, X_gadf)","3751d7ce":"<hr>\n<div align='justify'><font color=\"#353B47\" size=\"4\">Thank you for taking the time to read this notebook. I hope that I was able to answer your questions or your curiosity and that it was quite understandable. <u>any constructive comments are welcome<\/u>. They help me progress and motivate me to share better quality content. I am above all a passionate person who tries to advance my knowledge but also that of others. If you liked it, feel free to <u>upvote and share my work.<\/u> <\/font><\/div>\n<br>\n<div align='center'><font color=\"#353B47\" size=\"3\">Thank you and may passion guide you.<\/font><\/div>","7a0a3b07":"# <div id=\"summary\">Table of Contents: GAF<\/div>\n**<font size=\"2\"><a href=\"#chap1\">1. On multiple time series<\/a><\/font>**\n**<br><font size=\"2\"><a href=\"#chap2\">2. On Optiver data<\/a><\/font>**","faf9bcc3":"## <div id=\"chap1\">1. On multiple time series (quickwin)<\/div>","173da635":"<div align='center'><font size=\"5\" color='#353B47'>Turn your time series into images<\/font><\/div>\n<div align='center'><font size=\"4\" color=\"#353B47\">Different ways to leverage your inner glubibulga<\/font><\/div>\n<br>\n<hr>","28d60593":"**<font color=\"blue\" size=\"6\">GAF : Grammian Angular Fields<\/font>**","a1899527":"## <div id=\"chap2\">2. On Optiver data, per stock_id-time_id<\/div>","3254043f":"--------\n\n**<font size=\"2\"><a href=\"#summary\">Back to summary<\/a><\/font>**"}}