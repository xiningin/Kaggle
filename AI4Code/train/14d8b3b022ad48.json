{"cell_type":{"c0cc71f3":"code","af40f994":"code","6191e9cb":"code","9819f0c2":"code","74af55cb":"code","7fd2120f":"code","b7748509":"code","5463df18":"code","b247a167":"code","f13dc151":"code","f293e488":"code","14392940":"code","95a22722":"code","a0e0bbf0":"code","610fd884":"code","e87a4d66":"code","f0c5606a":"code","1226fd27":"code","b1a29bc3":"code","dce3e61d":"code","16ec16df":"code","09d583c6":"code","e492977d":"code","4e53c2c1":"code","ccf7d659":"code","7899a8d3":"code","39b88faf":"code","214660e1":"code","c0674a5b":"code","87a11d3a":"code","52754c83":"code","7b29ae22":"code","eb9104db":"code","5e815b79":"code","6952556a":"code","3750d2c4":"code","aeee3906":"code","442d493e":"code","1acef05d":"code","e53011c9":"code","edd2f752":"markdown","82e1e8b5":"markdown","13ee6c4f":"markdown","69149c81":"markdown","705188e7":"markdown","aaabf7db":"markdown","a8edc1c6":"markdown","2768cd50":"markdown","97f5124e":"markdown","d99eecfd":"markdown","a170d1c4":"markdown","2c5ba2ee":"markdown","144e1ff3":"markdown","17894c77":"markdown","6109eeec":"markdown","517bec99":"markdown","4a02084b":"markdown","25fa281f":"markdown","9cb0ee52":"markdown","75f3d505":"markdown","f8f154a8":"markdown","fe746c67":"markdown","a598aa84":"markdown"},"source":{"c0cc71f3":"import sys\nfrom os import listdir\nfrom os.path import isfile, join\nimport numpy as np\nimport seaborn as sns \nimport pandas as pd \nimport matplotlib.pyplot as plt\nimport re\nimport gc","af40f994":"chunk = pd.read_csv('..\/input\/chess-games-from-lichess-20132014\/Lichess_2013_2014_Complete.csv',chunksize=10**4)\ndf = pd.concat(chunk)\n\n","6191e9cb":"del chunk\ngc.collect()","9819f0c2":"df.head()","74af55cb":"print('The game with more moves had',df['Number_of_Moves'].max(), 'moves')\ndf['Site'].loc[df['Number_of_Moves'].idxmax()]","7fd2120f":"df[['WhiteElo','BlackElo']].min()","b7748509":"df[['WhiteElo','BlackElo']].max()","5463df18":"repeated_games = df.groupby(['WhiteName','BlackName'])['Site'].count().loc[lambda x:x>400]","b247a167":"repeated_games = repeated_games.unstack(fill_value=0)","f13dc151":"repeated = repeated_games + repeated_games.transpose()\nmask = np.zeros_like(repeated)\nmask[np.triu_indices_from(mask)] = True\nwith sns.axes_style(\"white\"):\n    f, ax = plt.subplots(figsize=(15,15))\n    ax = sns.heatmap(repeated.fillna(0), mask=mask, annot = True, cmap = 'viridis', fmt='g')\nax.set_title('Most Repeated Match', fontsize = 20)\n\ndel repeated_games, mask, repeated\ngc.collect()","f293e488":"total_games = df['WhiteName'].value_counts().add(df['BlackName'].value_counts(), fill_value=0)\ntotal_games = total_games.sort_values(ascending = False)\ntotal_games","14392940":"total_games_400_dif = df[(df['WhiteElo']-df['BlackElo']>=400)|(df['WhiteElo']-df['BlackElo']<=-400)].groupby('TimeControl')['TimeControl'].value_counts()","95a22722":"winned_games_400_dif = df[((df['WhiteElo']-df['BlackElo']>=400)&(df['Winner'] == 'Black'))|((df['WhiteElo']-df['BlackElo']<=-400)&(df['Winner'] == 'White'))].groupby('TimeControl')['TimeControl'].value_counts()","a0e0bbf0":"winned_games_400_dif\/total_games_400_dif*100","610fd884":"del winned_games_400_dif,total_games_400_dif,total_games\ngc.collect()","e87a4d66":"new_df = df[((df['WhiteElo']-df['BlackElo']>=400)&(df['Winner'] == 'Black'))|((df['WhiteElo']-df['BlackElo']<=-400)&(df['Winner'] == 'White'))][['WhiteElo','BlackElo','Site']]\nnew_df['Difference'] = (new_df['WhiteElo']-new_df['BlackElo']).abs()\nnew_df[['Difference','Site']].loc[new_df['Difference'].idxmax()]","f0c5606a":"opening_win_by_black = df[df['Winner']=='Black'].groupby('Opening')['Site'].count().reset_index(name=\"Black\")\nopening_win_by_black.set_index('Opening', inplace=True)\nopening_win_by_black","1226fd27":"opening_win_by_white = df[df['Winner']=='White'].groupby('Opening')['Site'].count().reset_index(name=\"White\")\nopening_win_by_white.set_index('Opening', inplace=True)\nopening_win_by_white","b1a29bc3":"opening_draw = df[df['Winner']=='Draw'].groupby('Opening')['Site'].count().reset_index(name=\"Draw\")\nopening_draw.set_index('Opening', inplace=True)\nopening_draw","dce3e61d":"total_opening = df.groupby('Opening')['Site'].count().reset_index(name=\"Total\")\ntotal_opening.set_index('Opening', inplace=True)\ntotal_opening","16ec16df":"final_opening_df = pd.concat([opening_win_by_white, opening_draw,opening_win_by_black,total_opening],axis=1)\nfinal_opening_df = final_opening_df.fillna(0)","09d583c6":"final_opening_df['White Percentage'] = final_opening_df['White']\/final_opening_df['Total'] * 100\nfinal_opening_df['Draw Percentage']  = final_opening_df['Draw'] \/final_opening_df['Total'] * 100\nfinal_opening_df['Black Percentage'] = final_opening_df['Black']\/final_opening_df['Total'] * 100\n","e492977d":"final_opening_df","4e53c2c1":"white_wins = final_opening_df[final_opening_df['Total']>20000].sort_values(by = 'White Percentage', ascending = False).head(10)\nwhite_wins.drop(['Total','White','Black','Draw'], inplace = True, axis = 1)\nblack_wins = final_opening_df[final_opening_df['Total']>20000].sort_values(by = 'Black Percentage', ascending = False).head(10)\nblack_wins.drop(['Total','White','Black','Draw'], inplace = True, axis = 1)","ccf7d659":"sns.set_theme(style=\"white\", palette=None)\nfig, axes = plt.subplots(nrows=1, ncols=1, figsize=(10,10))\nwhite_wins.plot(ax = axes, kind='barh', stacked=True, color = ['white', 'grey', 'black'], linewidth = 0.8, edgecolor = 'black')\naxes.set_title('Best White Openings Percentages', fontsize=15)\naxes.set_xlabel('Percentages', fontsize=10)\nplt.legend(loc = 0)\nplt.show()\nplt.close()","7899a8d3":"sns.set_theme(style=\"white\", palette=None)\nfig, axes = plt.subplots(nrows=1, ncols=1, figsize=(10,10))\nblack_wins.plot(ax = axes, kind='barh', stacked=True, color = ['white', 'grey', 'black'], linewidth = 0.8, edgecolor = 'black')\naxes.set_title('Best Black Openings Percentages', fontsize=15)\naxes.set_xlabel('Percentages', fontsize=10)\nplt.legend(loc = 0)\nplt.show()\nplt.close()","39b88faf":"del white_wins,black_wins, new_df,final_opening_df,opening_win_by_white, opening_draw,opening_win_by_black,total_opening\ngc.collect()","214660e1":"FEN_chunk = pd.read_csv('..\/input\/chess-games-from-lichess-20132014\/Lichess_2013_2014_FEN.csv',chunksize=10**3, usecols = ['FEN'])\nFEN_df = pd.concat(FEN_chunk)","c0674a5b":"def mate(x):\n    \n    if '1-0' in x:\n        x = x.replace('1-0','')   \n    elif '0-1' in x:\n        x = x.replace('0-1','')\n    elif '1\/2-1\/2' in x:\n        x = x.replace('1\/2-1\/2','')\n    if '\\n' in x:\n        x = x.replace('\\n','') \n    \n    if x[-2]=='#':\n        return 1\n    else:\n        return 0","87a11d3a":"df['CheckMate'] = FEN_df['FEN'].apply(lambda x : mate(x))","52754c83":"del FEN_df\ngc.collect()","7b29ae22":"custom_cut = np.arange(700, 3000, 100)\ncustom_cut\n\ndf['WhiteElo_Cut'] = pd.cut(df['WhiteElo'], custom_cut)\ndf['BlackElo_Cut'] = pd.cut(df['BlackElo'], custom_cut)","eb9104db":"total_games_w = df[(df['Winner'] == 'Black')&(df['Termination']!='Rules infraction')&(df['Termination']!='Abadoned')&(df['TimeControl']=='Blitz')].groupby(by ='WhiteElo_Cut')['Site'].count()\ntotal_games_b = df[(df['Winner'] == 'White')&(df['Termination']!='Rules infraction')&(df['Termination']!='Abadoned')&(df['TimeControl']=='Blitz')].groupby(by ='BlackElo_Cut')['Site'].count()\n\nabandoned_games_w = df[(df['Termination']=='Normal')&(df['Winner'] == 'Black')&(df['CheckMate']==0)&(df['TimeControl']=='Blitz')].groupby(by ='WhiteElo_Cut')['Site'].count()\nabandoned_games_b = df[(df['Termination']=='Normal')&(df['Winner'] == 'White')&(df['CheckMate']==0)&(df['TimeControl']=='Blitz')].groupby(by ='BlackElo_Cut')['Site'].count()\n\ncheck_mate_w = df[(df['Termination']=='Normal')&(df['Winner'] == 'Black')&(df['CheckMate']==1)&(df['TimeControl']=='Blitz')].groupby(by ='WhiteElo_Cut')['Site'].count()\ncheck_mate_b = df[(df['Termination']=='Normal')&(df['Winner'] == 'White')&(df['CheckMate']==1)&(df['TimeControl']=='Blitz')].groupby(by ='BlackElo_Cut')['Site'].count()\n\ntime_end_w = df[(df['Termination']=='Time forfeit')&(df['Winner'] == 'Black')&(df['TimeControl']=='Blitz')].groupby(by ='WhiteElo_Cut')['Site'].count()\ntime_end_b = df[(df['Termination']=='Time forfeit')&(df['Winner'] == 'White')&(df['TimeControl']=='Blitz')].groupby(by ='BlackElo_Cut')['Site'].count()\n\npercetnage_abandoned_games = (abandoned_games_w+abandoned_games_b)\/(total_games_w+total_games_b)*100\npercetnage_checkmate_games = (check_mate_w+check_mate_b)\/(total_games_w+total_games_b)*100\npercetnage_timeend_games = (time_end_w+time_end_b)\/(total_games_w+total_games_b)*100\n\nblitz_loss_df = pd.DataFrame(data = list(zip(percetnage_abandoned_games.values,percetnage_checkmate_games.values,percetnage_timeend_games.values,np.array(percetnage_timeend_games.index))), \n                      columns = ['Abandon','Checkmate','Time Forfeit','Elo Range of Loser'])\n\n\nblitz_loss_df.set_index('Elo Range of Loser', inplace=True)\n\nsns.set_theme(style=\"white\", palette=None)\n\nblitz_loss_df.plot(kind='bar', stacked=True)\nplt.title('Termination of Blitz games per elo', fontsize=15)\nplt.xlabel('Elo range of loser', fontsize=10)\nplt.ylabel('Percentage', fontsize=10)\nplt.legend(loc = 0)\nplt.savefig('Termination of Blitz games per elo.png',bbox_inches='tight')\nplt.show()\nplt.close()","5e815b79":"del df,blitz_loss_df,abandoned_games_w,abandoned_games_b,time_end_w,time_end_b,check_mate_w,check_mate_b,total_games_b,total_games_w,percetnage_abandoned_games,percetnage_checkmate_games,percetnage_timeend_games\ngc.collect()","6952556a":"FEN_chunk = pd.read_csv('..\/input\/chess-games-from-lichess-20132014\/Lichess_2013_2014_FEN.csv',chunksize=10**3)\nFEN_df = pd.concat(FEN_chunk)","3750d2c4":"def castle_mate(x):\n    if 'O-O#' in x:\n        return True\n    else:\n        return False","aeee3906":"def en_passant_mate(x):\n\n    if '\\n' in x:\n        x = x.replace('\\n','') \n         \n    \n    if '1-0' in x:\n        x = x.replace('1-0','')  \n        x = re.sub('{.+?}', '', x)  #this is used to eliminate everything between {} which appears in analised games.\n        list_of_moves = x[-14:].split()\n        if len(list_of_moves)<3:\n            return False\n        for i in list_of_moves:\n            if '.' in i:\n                list_of_moves.remove(i)\n        if len(list_of_moves[1])<5 or len(list_of_moves[0])<=1:\n            return False\n        else:\n            if list_of_moves[0][1]=='5' and list_of_moves[0][0].islower():\n                if list_of_moves[1][0].islower() == True and list_of_moves[1][3] == '6' and list_of_moves[1][4] == '#' and list_of_moves[1][2] == list_of_moves[0][0]:\n                    return True\n                else:\n                    return False\n        \n        \n    elif '0-1' in x:\n        x = x.replace('0-1','')\n        x = re.sub('{.+?}', '', x)\n        list_of_moves = x[-10:].split()\n        if len(list_of_moves)!=2:\n            return False\n        if len(list_of_moves[1])<5 or len(list_of_moves[0])<=1:\n            return False\n        else:\n            if list_of_moves[0][1]=='4' and list_of_moves[0][0].islower():\n                if list_of_moves[1][0].islower() == True and list_of_moves[1][3] == '3' and list_of_moves[1][4] == '#' and list_of_moves[1][2] == list_of_moves[0][0]:\n                    return True\n                else:\n                    return False      \n        \n    elif '1\/2-1\/2' in x:\n        return False","442d493e":"FEN_df['Site'].loc[FEN_df['FEN'].apply(lambda x:castle_mate(x))==True]","1acef05d":"FEN_df['Site'].loc[FEN_df['FEN'].apply(lambda x:en_passant_mate(x))==True]","e53011c9":"del FEN_df\ngc.collect()","edd2f752":"# Brief Analysis\n\nIn this section we are reviewing simple thing about data such as the maximum number of moves in a game, or the highest or lowest rated player, etc.","82e1e8b5":"**Most repeated match**\n\nHere we will calculate wich single match has been repeated more times, taking into account that having black or white pieces doesn't matter. This means that for example Magnus-Caruana is the same as Caruana-Magnus.","13ee6c4f":"**Highest elo ratings**","69149c81":"The most repeated match in 2013-2014 is mecker vs pacal56 which happened 1902 times.","705188e7":"**Time control winning against odds probabilities**\n\nIn which time control is it easier to win a higher rated player? At first you may think that in a faster time control is easier because the higher rated player can commit more mistakes, let's see.","aaabf7db":"The most accurate way of checking the dependance is by using percentages, so we will need to calculate and group by elo all game with wins as well as every game ended in each of the three posible ways.  ","a8edc1c6":"So first of all we need to detect which games end in checkmate. We can do this with the FEN. \nA game ends in forfeit when Termination is Normal, there is a winner but there isn't checkmate.\nLast a game ends in time forfeit when Termination is Time Forfeit.","2768cd50":"In this section we will see how blitz games end as a function of the elo. This is applicable to other TimeControls. \n\nA win\/lose game can end in three different ways, by checkmate, by forfeit, or by time forfeit. \n\n","97f5124e":"# Best Openings by Color","d99eecfd":"In this section we will check the sites of games with unusual checkmates, in concrete we will check en passant mates and castle mates. ","a170d1c4":"In this section we will check what openings played at least $20000$ times has better winning statistics for white and for black. To study this we need percentage of wins, loses and draws of each opening. Hence we need to calculate the total amount of games played with each opening, and the amount of wins, loses and draws with each opening.","2c5ba2ee":"**Game with more moves**","144e1ff3":"To study the dependance on the elo we will need to study the elo of the loser, since the loser is the one who gets checkmated, that runs out of time or that forfeits.\nThis can be done by cutting the elo in ranges of 100.","17894c77":"**Castle mate**\n\nIn the FEN notation they always have to end with O-O#","6109eeec":"Let's read the data by chunks since it is too big. Through the notebook we will need to free memory.","517bec99":"**Lowest elo ratings**","4a02084b":"It is more probable to win a higher rated player in higher time controls!","25fa281f":"# Different Checkmates","9cb0ee52":"# Termination of games by TimeControl","75f3d505":"There is a clear tren to abandon more as your elo is higher. This happens because strong players don't usually let escape an advantage, so they just forfeit instead of playing a game without any hope, while weaker players can easily drop that advantage, so they try to play although they are lost. The time forfeit rates are almost constant over all elos. ","f8f154a8":"**Player with more games**","fe746c67":"**Biggest winning against higher rated player**\n\nWhich is the game where the lower rated player winned against a higher rated player being their elo difference maximum?","a598aa84":"**En passant mate**\n\nIn this type of mate the FEN has different pattern depending on who wins. \n\nIf white wins it ends like g5 46. fxg6#, while if black wins it takes the form 46. c4 dxc3#."}}