{"cell_type":{"24360613":"code","cdcdc49f":"code","296a8da4":"code","a2e77934":"code","9e2efcbf":"code","ad16be0d":"code","97d2529a":"code","5e8e0b81":"code","62ceca0a":"code","6fb8e26f":"code","208ffdc3":"code","2a875396":"code","884af487":"code","2e33c373":"code","a8c85356":"code","d4fba254":"code","33beb907":"code","a40f98e3":"code","6092c6cc":"code","6dcfdba2":"code","a9d28ade":"code","f0f8ea75":"code","0ca0652c":"code","a8f121a7":"code","c4c0c819":"code","5f88ead3":"code","21f45b6c":"code","263ee5f6":"code","b1f42756":"markdown"},"source":{"24360613":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","cdcdc49f":"df = pd.read_csv('..\/input\/house-prices-advanced-regression-techniques\/train.csv', index_col = 'Id')\ndf","296a8da4":"cols_with_missing = [col for col in df.columns\n                     if df[col].isnull().any()]\nprint(cols_with_missing)","a2e77934":"for col in cols_with_missing:\n    print (col, df[col].isnull().sum() \/ len(df))","9e2efcbf":"cols_with_big_amount_missing = ['Alley', 'PoolQC', 'Fence', 'MiscFeature']\nreduced_df = df.drop(cols_with_big_amount_missing, axis=1)","ad16be0d":"cols_with_missing = [col for col in reduced_df.columns\n                     if df[col].isnull().any()]\ncols_with_missing","97d2529a":"for col in cols_with_missing:\n    print (df[col].isnull().sum())","5e8e0b81":"object_columns_with_missing_values = ['MasVnrType', 'BsmtQual', 'BsmtCond', 'BsmtExposure', 'BsmtFinType1', \n                                     'BsmtFinType2', 'Electrical', 'FireplaceQu', 'GarageType', 'GarageFinish',\n                                     'GarageQual', 'GarageCond']\nnumeric_columns_with_missing_values = ['LotFrontage', 'MasVnrArea', 'GarageYrBlt']","62ceca0a":"reduced_df.dropna(axis=0, inplace=True)\nreduced_df","6fb8e26f":"for col in object_columns_with_missing_values:\n    print (reduced_df[col].value_counts().idxmax())","208ffdc3":"for col in object_columns_with_missing_values: \n    reduced_df[col].fillna(value = reduced_df[col].value_counts().idxmax(), inplace = True)\nfor col in numeric_columns_with_missing_values:\n    reduced_df[col].fillna(value = reduced_df[col].mean(), inplace = True)","2a875396":"reduced_df['MasVnrType'].unique()","884af487":"a = (reduced_df.dtypes == 'object')\nobject_cols = list(a[a].index)\n\nprint(\"Categorical variables:\")\nprint(object_cols)","2e33c373":"from sklearn.preprocessing import LabelEncoder\nlabel_reduced_df = reduced_df.copy()\nlabel_encoder = LabelEncoder()\nfor col in object_cols:\n    label_reduced_df[col] = label_encoder.fit_transform(reduced_df[col])","a8c85356":"target_col = 'SalePrice'\ny = label_reduced_df[target_col]\nX = label_reduced_df.drop(columns=[target_col])\nfrom sklearn.model_selection import train_test_split\nX_train, X_test, y_train, y_test = train_test_split(X, y, train_size = 0.8, test_size = 0.2, random_state = 0)","d4fba254":"from sklearn.ensemble import RandomForestRegressor\nfrom sklearn.metrics import mean_absolute_error\npara = list(range(50, 1001, 100))\nresults = {}\nfor n in para:\n    print('para=', n)\n    model = RandomForestRegressor(n_estimators=n, random_state = 0)\n    model.fit(X_train, y_train)\n    preds = model.predict(X_test)\n    mae = mean_absolute_error(y_test, preds)\n    print (mae)\n    results[n] = mae","33beb907":"test_data = pd.read_csv('..\/input\/house-prices-advanced-regression-techniques\/test.csv', index_col='Id')\ntest_data.head()","a40f98e3":"test_data.info()","6092c6cc":"cols_with_missing_test = [col for col in test_data.columns\n                     if test_data[col].isnull().any()]\ncols_with_missing_test","6dcfdba2":"for col in cols_with_missing_test:\n    print (test_data[col].isnull().sum())","a9d28ade":"cols_with_big_amount_missing = ['Alley', 'PoolQC', 'Fence', 'MiscFeature']\nreduced_test_data = test_data.drop(cols_with_big_amount_missing, axis=1)\nreduced_test_data.info()","f0f8ea75":"cols_with_missing_test = [col for col in reduced_test_data.columns\n                     if reduced_test_data[col].isnull().any()]\ncols_with_missing_test","0ca0652c":"for col in cols_with_missing_test:\n    print (reduced_test_data[col].isnull().sum())","a8f121a7":"object_columns_test_with_missing_values = ['MasVnrType', 'BsmtQual', 'BsmtExposure', 'BsmtFinType1', \n                                           'BsmtFinType2', 'GarageType', 'GarageFinish','GarageQual', 'GarageCond',\n                                           'MSZoning', 'Utilities', 'Exterior1st', 'Exterior2nd',\n                                           'KitchenQual', 'Functional', 'SaleType', 'FireplaceQu']\nnumeric_columns_test_with_missing_values = ['LotFrontage', 'MasVnrArea', 'BsmtFinSF1', 'BsmtFinSF2', 'BsmtUnfSF',\n                                            'TotalBsmtSF', 'BsmtFullBath', 'BsmtHalfBath', 'GarageYrBlt', \n                                            'GarageCars', 'GarageArea',]","c4c0c819":"for col in object_columns_test_with_missing_values:\n    print (reduced_df[col].value_counts().idxmax())","5f88ead3":"for col in object_columns_test_with_missing_values: \n    reduced_test_data[col].fillna(value = reduced_df[col].value_counts().idxmax(), inplace = True)\nfor col in numeric_columns_test_with_missing_values:\n    reduced_test_data[col].fillna(value = reduced_df[col].mean(), inplace = True)","21f45b6c":"b = (reduced_test_data.dtypes == 'object')\nobject_cols_test = list(b[b].index)\n\nprint(\"Categorical variables:\")\nprint(object_cols_test)","263ee5f6":"# apply label encoder to each column with categorical data\nlabel_encoder = LabelEncoder()\nfor col in object_cols_test:\n","b1f42756":"## Apply label encoder to each column with categorical data\n"}}