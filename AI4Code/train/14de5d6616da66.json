{"cell_type":{"f9f0037c":"code","0bb050ce":"code","8e31c1fb":"code","c151c1b0":"code","e31a875a":"code","53081bb2":"markdown","48b3f73d":"markdown","2e553a27":"markdown","ed5ce79e":"markdown","e214bd2e":"markdown","f487efb6":"markdown"},"source":{"f9f0037c":"# just import\nimport numpy as np \nimport matplotlib.pyplot as plt\nfrom sklearn.model_selection import train_test_split\nimport keras\nfrom keras.models import Sequential\nfrom keras.layers import Dense\nfrom keras.layers import Dropout\n# from tensorflow import keras\nimport joblib\nfrom sklearn.neural_network import MLPRegressor\nimport random as random\nimport numpy as np \nfrom sklearn.preprocessing import MinMaxScaler\nTRAIN = True","0bb050ce":"# create data\n\ndef func(x):\n     return np.cos(x)\n\nx = np.linspace(-10,10,400)\nx_post = np.linspace(10, 20, 200)\n\ny = func(x)\ny_post = func(x_post)\n\n# plot main function\nfig = plt.figure()\nax = fig.add_subplot(1, 1, 1)\nax.spines['left'].set_position('center')\nax.spines['bottom'].set_position('zero')\nax.spines['right'].set_color('none')\nax.spines['top'].set_color('none')\nax.xaxis.set_ticks_position('bottom')\nax.yaxis.set_ticks_position('left')\n\nplt.plot(x,y, 'r')\nplt.title(\"y(x)\")\nplt.show()","8e31c1fb":"# split data\nx_train, x_test, y_train, y_test = train_test_split(x, y, \n                                test_size=0.25, shuffle=True)\n\n\nx_train = x_train.reshape(-1, 1)\nx_test = x_test.reshape(-1, 1)\ny_train = y_train.reshape(-1, 1).ravel()\ny_test = y_test.reshape(-1, 1)\n\n\n# normslization \nmin_max_scaler = MinMaxScaler(feature_range = (-1, 1))\nx_train = min_max_scaler.fit_transform(x_train)\nx_test= min_max_scaler.transform(x_test)\nx_post_transformed=min_max_scaler.transform(x_post.reshape(-1, 1))\n\n\n# show first 5 samples of train date\nfrom tabulate import tabulate\ntable = [\n    [\"x_train\", \"y_train\"],\n     [x_train[:5],y_train[:5]]\n]\nprint(tabulate(table))\n","c151c1b0":"if TRAIN:\n    \n    model = MLPRegressor(hidden_layer_sizes=(100, 100, 100, 100 ), activation = \"relu\",\n                          max_iter = 1000, verbose=True)\n    model.fit(x_train, y_train)\n    \nelse:\n    #Loading trained model\n    model = joblib.load('_1Version.pkl')\n\ny_pred = model.predict(x_test)\n","e31a875a":"y_pred_post = model.predict(x_post_transformed.reshape(-1, 1))\nplt.plot(x_post,y_post, 'r', label = 'cos(x)')\nplt.plot(x_post,y_pred_post, 'g', label = 'models prediction')\nplt.title(\"Post Test Part\")\nplt.legend()\nplt.show()","53081bb2":"### Create and fit model \nThis is where I have the biggest problems. I don't know how the model construction should look, so I used **MLPRegressor()** as a solution. ","48b3f73d":"## Conclusion\nAs we can see, the prediction and the real data do not match at all.\n##### Help me, please\n* Probably I made a mistake in creating a model and I need to choose something else, since changes in the number and size of layers have almost no effect on the result. But still I don't know what to use instead of **MLPRegressor()**\n* Or maybe I made a mistake while normalizing the data.\n\nI would be glad for any help or hint in the comments.","2e553a27":"### Get data\nSince I am trying to predict simple math functions, it is very easy for me to **generate the initial data** myself\n\n* x - this is a train data.\n* y - target of train data.\n* x_post, y_post - for a final validation. Not used in training. ","ed5ce79e":"### Data processing\n* For shuffle and splitting on test-train data I use function **train_test_split()**\n* For normalization I use **MinMaxScaler()**\n* x_test y_test not used, but i left them in case i can use validation in model.fit() \n","e214bd2e":"### Introduction\nHello. This is my first post on kaggle so don't judge strictly. And suggest your corrections, I am open to any criticism.\n    \n   I started studying machine learning not long ago and first my task is to build the model which can predict the result of math functions. The first function is y = cos(x)\n    \n> **Purpose**: build model which can predict the result of y=cos(x)\n\n\nI will say in advance that so far I have not been able to build such a model. But I still did data normalization, and drawing the result.\n    I want to be more wholesale than me, people suggested what are the mistakes and how you can achieve the goal.\n    \nSo lets start: below is just import\n","f487efb6":"### Plot the result\nThis is the result of a prediction on the test period that did not participate in fiiting"}}