{"cell_type":{"7bf3c779":"code","280edd48":"code","a79ba05d":"code","087b0b2f":"code","1170b38a":"code","2b327f1e":"code","8f95ff95":"code","f618d127":"code","6c8fbcd2":"code","11c598f1":"code","915cb947":"code","3e402b65":"code","db077a41":"code","05484e09":"code","6a04645c":"code","5bc0f2ef":"code","1fc22d2e":"code","85cf0ff6":"code","532839bc":"code","b9614f5c":"code","235ccf97":"code","a3fa5385":"code","e19b7943":"code","849f3d84":"code","54118fce":"code","0aadfc6e":"code","9ccbb49c":"code","a7966a1d":"code","e359a5e1":"code","2f2fcbeb":"code","0c3eba96":"code","6db47519":"code","b707fc3f":"code","9e20c361":"code","895db467":"code","532c0227":"code","16806800":"code","03e49649":"code","f9a34d41":"code","e8c7bacb":"code","4d515fa3":"code","4a28f4cf":"code","ea1dd0ea":"code","293b7a26":"code","e1e613d6":"code","096f1f48":"code","18d50a6f":"code","aa5d3efe":"code","c3c7bfbc":"code","b48c6a4b":"code","0fd49ca8":"code","53485c2f":"code","289e7b23":"code","571cf91c":"code","4efa4cce":"code","3b7f05a7":"markdown"},"source":{"7bf3c779":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","280edd48":"sample_submission=pd.read_csv(\"..\/input\/amexpert-2021-challenge\/sample_submission_kF044ur.csv\")\nsample_submission.head()","a79ba05d":"train=pd.read_csv(\"..\/input\/amexpert-2021-challenge\/train_go05W65.csv\")\ntrain.head()","087b0b2f":"train['Product_Holding_B1']=train['Product_Holding_B1'].apply(eval)\ntrain.head()","1170b38a":"def to_1D(series):\n    return pd.Series([x for _list in series for x in _list])","2b327f1e":"to_1D(train['Product_Holding_B1']).value_counts()","8f95ff95":"train1=train['Product_Holding_B1'].apply(pd.Series)\ntrain1.head()","f618d127":"train1.isnull().sum()","6c8fbcd2":"train1.drop([4,5,6,7],axis=1,inplace=True)\ntrain1.head()","11c598f1":"train1=train1.fillna('0')\ntrain1.head()","915cb947":"result = pd.concat([train, train1], axis=1)\nresult","3e402b65":"#train['len_Product_Holding_B1']=train['Product_Holding_B1'].apply(lambda x: len(x.split(',')))\n#train['len_Product_Holding_B2']=train['Product_Holding_B2'].apply(lambda x: len(x.split(',')))\n#train.head()","db077a41":"result.info()","05484e09":"result.isnull().sum()","6a04645c":"import matplotlib.pyplot as plt\nimport seaborn as sns","5bc0f2ef":"sns.countplot(result.Gender)","1fc22d2e":"sns.countplot(result.Is_Active)","85cf0ff6":"sns.countplot(result.City_Category)","532839bc":"sns.countplot(result.Customer_Category)","b9614f5c":"\n#pd.options.display.max_rows = 495\n#train.Product_Holding_B2.value_counts()","235ccf97":"result.Product_Holding_B1.value_counts()","a3fa5385":"sns.histplot(result.Age)","e19b7943":"sns.distplot(result.Vintage)","849f3d84":"test=pd.read_csv(\"..\/input\/amexpert-2021-challenge\/test_VkM91FT.csv\")\ntest.head()","54118fce":"test['Product_Holding_B1']=test['Product_Holding_B1'].apply(eval)\ntest1=test['Product_Holding_B1'].apply(pd.Series)\ntest1.drop([4,5,6,7],axis=1,inplace=True)\ntest1=test1.fillna('0')\nresult1 = pd.concat([test, test1], axis=1)\nresult1","0aadfc6e":"#result1['len_Product_Holding_B1']=result1['Product_Holding_B1'].apply(lambda x: len(x))\n#result['len_Product_Holding_B1']=result['Product_Holding_B1'].apply(lambda x: len(x))\n#result1.head()","9ccbb49c":"result1.head()","a7966a1d":"result1.info()","e359a5e1":"result1.isnull().sum()","2f2fcbeb":"sns.countplot(result1.City_Category)","0c3eba96":"sns.countplot(result1.Gender)","6db47519":"sns.countplot(result1.Is_Active)","b707fc3f":"sns.countplot(result1.Customer_Category)","9e20c361":"sns.histplot(result1.Age)","895db467":"sns.distplot(result1.Vintage)","532c0227":"def eda(df):\n    df['Gender']=df['Gender'].replace({'Female':0,'Male':1})\n    df['City_Category']=df['City_Category'].replace({'C1':0,'C2':1})\n    df['Customer_Category']=df['Customer_Category'].replace({'S1':0,'S2':1,'S3':2})   \n    return df","16806800":"eda(result)\nresult.head()","03e49649":"eda(result1)\nresult1.head()","f9a34d41":"from sklearn.preprocessing import LabelEncoder\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.tree import DecisionTreeClassifier\nfrom lightgbm import LGBMClassifier\nfrom xgboost import XGBClassifier\nfrom catboost import CatBoostClassifier\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.svm import SVC\nfrom sklearn.ensemble import ExtraTreesClassifier\nfrom sklearn.metrics import classification_report,average_precision_score,precision_score\nfrom sklearn.model_selection import StratifiedKFold\nfrom sklearn.neighbors import KNeighborsClassifier\n#from sklearn.datasets import load_digits\nfrom sklearn.metrics import plot_confusion_matrix \nfrom sklearn.naive_bayes import MultinomialNB,ComplementNB\n\n#from sklearn.metrics import classification_report","e8c7bacb":"y=LabelEncoder()","4d515fa3":"result[3]=y.fit_transform(result[3])\nresult1[3]=y.fit_transform(result1[3])","4a28f4cf":"result[0]=y.fit_transform(result[0])\nresult[1]=y.fit_transform(result[1])\nresult[2]=y.fit_transform(result[2])\n\nresult","ea1dd0ea":"result1[0]=y.fit_transform(result1[0])\nresult1[1]=y.fit_transform(result1[1])\nresult1[2]=y.fit_transform(result1[2])\nresult1","293b7a26":"#result['Product_Holding_B1']=y.fit_transform(result['Product_Holding_B1'])\n#result.head()","e1e613d6":"#result1['Product_Holding_B1']=y.fit_transform(result1['Product_Holding_B1'])\n#result1.head()","096f1f48":"features1=[col for col in result1.columns if col not in ['Customer_ID','Product_Holding_B1']]\nfeatures1","18d50a6f":"features = []\ncategorical_features = []\nnumerical_features = []\n\nfor feature in test.columns:\n    features.append(feature)\n    if test.dtypes[feature] == object or test.dtypes[feature] == 'int8':\n        categorical_features.append(feature)\n    else:\n        numerical_features.append(feature)\n\nplt.bar([1,2],[len(categorical_features),len(numerical_features)])\nplt.xticks([1,2],('Categorical','Numerical'))\nplt.show()\n\nprint(\"Categorical features:\", len(categorical_features))\nprint(\"Numerical features:\", len(numerical_features))\n","aa5d3efe":"X=result[features1]\ntest_X=result1[features1]\nresult['Product_Holding_B2']=y.fit_transform(result['Product_Holding_B2'])\ntarget=result['Product_Holding_B2']","c3c7bfbc":"#train_x,test_x,train_y,test_y=train_test_split(X,target,test_size=0.2,random_state=1,shuffle=True)\nx_train, x_test, y_train, y_test = train_test_split(X, target, random_state = 1, test_size = 0.3)","b48c6a4b":"error_rate=[]\nfor i in range(1,100):\n    knn = KNeighborsClassifier(n_neighbors=i)\n    model = knn.fit(x_train,y_train)\n    pred_i = knn.predict(x_test)\n    error_rate.append(np.mean(pred_i != y_test))\nplt.figure(figsize=(13,8))\nplt.plot(range(1,100), error_rate, linestyle = 'dotted', marker = 'o',color = 'g')\nplt.xlabel('K value')\nplt.ylabel('Error Rate')\nplt.title('K value Vs Error Rate')\nplt.show()","0fd49ca8":"model = KNeighborsClassifier(n_neighbors=30).fit(X,target)\n#pred = model.predict(x_test)\n#plot_confusion_matrix(model,x_test,y_test,cmap=plt.cm.Blues)\n#print(classification_report(y_test,pred))  \n","53485c2f":"preds = model.predict(test_X)\npreds","289e7b23":"sample_submission['Product_Holding_B2']=preds\nsample_submission.head()","571cf91c":"sample_submission.to_csv('ghfj19.csv',index=False)","4efa4cce":"sample_submission['Product_Holding_B2']=y.inverse_transform(sample_submission['Product_Holding_B2'])\nsample_submission.head()","3b7f05a7":"AmExpert 2021 \u2013 Machine Learning Hackathon\n\nLB: 115\/2931\nSCORE : 0.5295 Using Catboost ,0.4926 Using KNN\n"}}