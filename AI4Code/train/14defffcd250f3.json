{"cell_type":{"bb3485c7":"code","9189e566":"code","88ce1bec":"code","2c8b77ae":"code","8038b73b":"code","a96287d6":"code","966ee3ad":"code","17fe223c":"code","43a2f516":"code","c3c338b0":"code","8fe5b8b8":"code","46b96aff":"code","2da5d71e":"code","8698e946":"code","1b1023ee":"code","4dcd494c":"code","447e890f":"code","49acf918":"code","ad44b5fc":"code","e9b66db8":"code","5dda9ac0":"code","c45cf3e4":"code","1fc4eb96":"code","d61345b1":"code","221ba6b2":"code","24223124":"code","b17d22ff":"code","eef24b5f":"code","d788a113":"code","242d944d":"code","82978553":"code","b388d8ae":"code","fff19448":"code","ca48622b":"code","4355851d":"code","e724d83e":"code","81aff299":"code","50fbf2ea":"code","82ce4ab2":"code","dbad1fae":"code","a61aad92":"code","be05e1c1":"code","52411133":"code","b73620ac":"code","898dfac3":"code","67a8fc64":"code","291228b2":"code","3b3c4add":"code","028c7d4c":"code","16347319":"code","bfedd734":"code","41e86604":"code","5b017f8d":"code","82076a4b":"code","abb5bed9":"code","b9df3d01":"code","37b54990":"code","8f9260a6":"code","357ff6d0":"code","d479944a":"code","0d4c951f":"code","6df3abe7":"code","8dce35d1":"code","4918989e":"code","c62b9cc6":"code","27d9afb6":"code","8156e94e":"markdown","85ca7c14":"markdown","8df5bdba":"markdown","9b76f2b5":"markdown","6973210a":"markdown","e00e936e":"markdown","0d655f7e":"markdown","48eeefe3":"markdown","0e3e759d":"markdown","1ceca758":"markdown","e68f709a":"markdown","f5eb848c":"markdown","b694667e":"markdown","de55f589":"markdown","0b4b4de5":"markdown","c23388a0":"markdown","e5b6696f":"markdown","175e55e1":"markdown","9a2e950e":"markdown","5b15b004":"markdown","4f64294e":"markdown"},"source":{"bb3485c7":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","9189e566":"train = pd.read_csv('\/kaggle\/input\/titanic\/train.csv')\ntrain.head()","88ce1bec":"train.isnull()","2c8b77ae":"sns.heatmap(train.isnull(), yticklabels=False, cbar=False, cmap='viridis')","8038b73b":"sns.set_style('whitegrid')\nsns.countplot(x='Survived', data=train)","a96287d6":"sns.set_style('whitegrid')\nsns.countplot(x='Survived', hue='Sex', data=train, palette='RdBu_r')","966ee3ad":"# Let's check for passenger class\nsns.set_style('whitegrid')\nsns.countplot(x='Survived', hue='Pclass', data=train, palette='rainbow')","17fe223c":"sns.distplot(train['Age'].dropna(),kde=False,color='darkred',bins=40)","43a2f516":"train['Age'].hist(bins=30, color='darkred', alpha=0.3)","c3c338b0":"# Siblings and Spouse\nsns.countplot(x='SibSp', data=train)","8fe5b8b8":"sns.countplot(x='SibSp', hue='Sex', data=train)","46b96aff":"train['Fare'].hist(color='green',bins=40,figsize=(8,4))","2da5d71e":"plt.figure(figsize=(12, 7))\nsns.boxplot(x='Pclass',y='Age',data=train,palette='winter')","8698e946":"# Pclass wise average age\ndata = train.copy()\npclass_avrg = [data.groupby(feature)['Age'].mean() for feature in data if feature == 'Pclass']\n\nprint(pclass_avrg[0])","1b1023ee":"pclass1_avg_age = int(pclass_avrg[0][1])\npclass2_avg_age = int(pclass_avrg[0][2])\npclass3_avg_age = int(pclass_avrg[0][3])\n\nprint('Pclass 1 Average Age: ', pclass1_avg_age)\nprint('Pclass 2 Average Age: ', pclass2_avg_age)\nprint('Pclass 3 Average Age: ', pclass3_avg_age)","4dcd494c":"def impute_age(cols):\n    Age = cols[0]\n    Pclass = cols[1]\n    \n    if pd.isnull(Age):\n\n        if Pclass == 1:\n            return pclass1_avg_age\n\n        elif Pclass == 2:\n            return pclass2_avg_age\n\n        else:\n            return pclass3_avg_age\n\n    else:\n        return Age","447e890f":"# Impute age for null values\ntrain['Age'] = train[['Age','Pclass']].apply(impute_age,axis=1)","49acf918":"sns.heatmap(train.isnull(),yticklabels=False,cbar=False,cmap='viridis')","ad44b5fc":"train.drop('Cabin',axis=1,inplace=True)\ntrain.head()","e9b66db8":"sns.heatmap(train.isnull(),yticklabels=False,cbar=False,cmap='viridis')","5dda9ac0":"import matplotlib.pyplot as plt\n\n#Using Pearson Correlation\nplt.figure(figsize=(12,10))\ncor = train.corr()\nsns.heatmap(cor, annot=True, cmap=plt.cm.Reds)\nplt.show()","c45cf3e4":"train.info()","1fc4eb96":"pd.get_dummies(train['Embarked'],drop_first=True).head()","d61345b1":"sex = pd.get_dummies(train['Sex'], drop_first=True)\nembarked = pd.get_dummies(train['Embarked'], drop_first=True)","221ba6b2":"train.drop(['Sex', 'Embarked', 'Name', 'Ticket'], axis=1, inplace=True)\ntrain.head()","24223124":"train = pd.concat([train, sex, embarked], axis=1)\ntrain.head()","b17d22ff":"from sklearn.preprocessing import StandardScaler\n\nX_train = train.drop(['Survived', 'PassengerId'],axis=1)\ny_train = train['Survived']\nscaler = StandardScaler()\nX_train = pd.DataFrame(scaler.fit_transform(X_train), columns=X_train.columns)\nX_train.head()","eef24b5f":"test = pd.read_csv('\/kaggle\/input\/titanic\/test.csv')\ntest.head()","d788a113":"test.isnull()","242d944d":"sns.heatmap(test.isnull(), yticklabels=False, cbar=False, cmap='viridis')","82978553":"sns.distplot(test['Age'].dropna(),kde=False,color='darkred',bins=40)","b388d8ae":"test['Age'].hist(bins=30, color='darkred', alpha=0.3)","fff19448":"# Siblings and Spouse\nsns.countplot(x='SibSp', data=test)","ca48622b":"sns.countplot(x='SibSp', hue='Sex', data=test)","4355851d":"test['Fare'].hist(color='green',bins=40,figsize=(8,4))","e724d83e":"plt.figure(figsize=(12, 7))\nsns.boxplot(x='Pclass',y='Age', hue=\"Sex\", data=test,palette='winter')","81aff299":"# Pclass wise average age\ndata = test.copy()\npclass_avrg = [data.groupby(feature)['Age'].mean() for feature in data if feature == 'Pclass']\n\nprint(pclass_avrg[0])","50fbf2ea":"pclass1_avg_age = int(pclass_avrg[0][1])\npclass2_avg_age = int(pclass_avrg[0][2])\npclass3_avg_age = int(pclass_avrg[0][3])\n\nprint('Pclass 1 Average Age: ', pclass1_avg_age)\nprint('Pclass 2 Average Age: ', pclass2_avg_age)\nprint('Pclass 3 Average Age: ', pclass3_avg_age)","82ce4ab2":"# Impute age for null values\ntest['Age'] = test[['Age','Pclass']].apply(impute_age,axis=1)","dbad1fae":"sns.heatmap(test.isnull(),yticklabels=False,cbar=False,cmap='viridis')","a61aad92":"test.drop('Cabin',axis=1,inplace=True)\ntest.head()","be05e1c1":"sns.heatmap(test.isnull(),yticklabels=False,cbar=False,cmap='viridis')","52411133":"test.info()","b73620ac":"embarked = pd.get_dummies(test['Embarked'], drop_first=True)\nembarked.head()","898dfac3":"sex = pd.get_dummies(test['Sex'], drop_first=True)\nsex.head()","67a8fc64":"test.drop(['Sex', 'Embarked', 'Name', 'Ticket'], axis=1, inplace=True)\ntest.head()","291228b2":"test = pd.concat([test, sex, embarked], axis=1)\ntest.head()","3b3c4add":"np.all(np.isnan(test))","028c7d4c":"np.all(np.isfinite(test))","16347319":"test[test['Fare'].isnull()]","bfedd734":"test['Fare'].fillna(test['Fare'].mode()[0], inplace = True)","41e86604":"from sklearn.preprocessing import StandardScaler\n\nscaler = StandardScaler()\nX_test = test.drop('PassengerId', axis=1)\nX_test = pd.DataFrame(scaler.fit_transform(X_test), columns=X_test.columns)\nX_test.head()","5b017f8d":"# from sklearn.model_selection import train_test_split\n\n\n# X_train, X_test, y_train, y_test = train_test_split(train.drop('Survived',axis=1), \n#                                                     train['Survived'], test_size=0.30, \n#                                                     random_state=101)","82076a4b":"y_train.head()","abb5bed9":"# X_test = test[features]\n# X_test.head()","b9df3d01":"from sklearn.linear_model import LogisticRegression\nfrom sklearn.model_selection import cross_val_score\n\nlr_model = LogisticRegression(solver='liblinear')\nlr_model.fit(X_train,y_train)\nlr_scores = cross_val_score(lr_model, X_train, y_train, cv=5)\nprint(lr_scores.mean())\nprint ('Accuracy: %0.3f' % lr_model.score(X_train, y_train) )","37b54990":"lr_predictions = lr_model.predict(X_test)","8f9260a6":"# from sklearn.metrics import confusion_matrix\n\n# lr_accuracy_matrix=confusion_matrix(y_test,lr_predictions)\n# lr_accuracy_matrix","357ff6d0":"# from sklearn.metrics import accuracy_score\n\n# lr_accuracy=accuracy_score(y_test,lr_predictions)\n# lr_accuracy","d479944a":"from sklearn.ensemble import RandomForestClassifier\n\nrf_model = RandomForestClassifier(n_estimators=100, max_depth=10, random_state=1)\nrf_model.fit(X_train, y_train)\nrf_scores = cross_val_score(rf_model, X_train, y_train, cv=5)\nprint(rf_scores.mean())\nprint ('Accuracy: %0.3f' % rf_model.score(X_train, y_train) )","0d4c951f":"rf_predictions = rf_model.predict(X_test)\n# rf_accuracy=accuracy_score(y_test,rf_predictions)\n# rf_accuracy","6df3abe7":"from xgboost.sklearn import XGBClassifier\n\nxgb_model = XGBClassifier(learning_rate=0.01, n_estimators=100, max_depth=3, subsample=1,\n                    colsample_bytree=1, gamma=6, reg_alpha = 14, reg_lambda = 3)\nxgb_model.fit(X_train, y_train)\nxgb_scores = cross_val_score(xgb_model, X_train, y_train, cv=5)\nprint(xgb_scores.mean())\nprint ('Accuracy: %0.3f' % xgb_model.score(X_train, y_train) )","8dce35d1":"xgb_predictions = xgb_model.predict(X_test)","4918989e":"# from sklearn.metrics import classification_report\n\n# print(classification_report(y_test,lr_predictions))","c62b9cc6":"# print(classification_report(y_test,rf_predictions))","27d9afb6":"output = pd.DataFrame({'PassengerId': test.PassengerId, 'Survived': rf_predictions})\noutput['Survived'] = output['Survived'].apply(lambda x: int(x))\noutput.to_csv('my_submission.csv', index=False)\noutput.head(30)","8156e94e":"# Missing Values","85ca7c14":"**Normalization**","8df5bdba":"\nRoughly 20 percent of the Age data is missing. The proportion of Age missing is likely small enough for reasonable replacement with some form of imputation. Looking at the Cabin column, it looks like we are just missing too much of that data to do something useful with at a basic level. We'll probably drop this later, or change it to another feature like \"Cabin Known: 1 or 0\"\n\nLet's continue on by visualizing some more of the data!","9b76f2b5":"# Test Dataset","6973210a":"# Building Model","e00e936e":"Check if there are any nan or infinite values","0d655f7e":"# Categorical Features","48eeefe3":"Dropping off the columns we don't need. ","0e3e759d":"Since there is only one null value we can replace it with mode","1ceca758":"**Missing Values**","e68f709a":"**Logistic Regression**","f5eb848c":"We don't need train test split as we have test dataset so we'll not be using it anymore","b694667e":"**Train Test Split**","de55f589":"**Training and Prediction**","0b4b4de5":"# Categorical Features","c23388a0":"# Data Cleaning\n\nWe want to fill in missing age data instead of just dropping the missing age data rows. One way to do this is by filling in the mean age of all the passengers (imputation). However we can be smarter about this and check the average age by passenger class. For example:","e5b6696f":"Now let's check that heat map again!","175e55e1":"Cabin column has a lot of missing values so we are going to drop this column","9a2e950e":"Now there are no missing values in any of the columns","5b15b004":"# Data Cleaning","4f64294e":"# Evaluation"}}