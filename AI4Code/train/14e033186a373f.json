{"cell_type":{"c14d0f6c":"code","8bd4a3b5":"code","11559135":"code","38a3fae9":"code","f5cc97a9":"code","e5769c56":"code","85bfd4ea":"code","e36d0dca":"code","bccf5264":"code","d597622b":"code","dee3756d":"code","b3939f21":"code","b8fe6ad5":"code","ac58fdde":"code","0c67273b":"code","4f124855":"code","93a4494a":"code","7e155965":"code","ee27bd22":"code","42bf5451":"code","64de598f":"code","9abb7dce":"code","951b3b89":"code","3cd88e8d":"markdown","30e576a6":"markdown","d6d91b4f":"markdown","b0afba38":"markdown","b31530f3":"markdown","adfb28ac":"markdown","d827f3c1":"markdown","0fc0c612":"markdown","1a98c639":"markdown","a50ac345":"markdown","1af5c8cb":"markdown","89b691d0":"markdown"},"source":{"c14d0f6c":"import numpy as np\nimport pandas as pd\nimport os\nimport matplotlib.pylab as plt\nimport seaborn as sns\nimport sklearn\nimport xgboost as xgb\nplt.style.use('ggplot') # Lets make our plots pretty","8bd4a3b5":"# Read in the dataframes\ntrain = pd.read_csv('..\/input\/train.csv')\ntest = pd.read_csv('..\/input\/test.csv')\nmerch = pd.read_csv('..\/input\/merchants.csv')\nht = pd.read_csv('..\/input\/historical_transactions.csv')\nss = pd.read_csv('..\/input\/sample_submission.csv')","11559135":"# Print data shapes\nprint('train shape', train.shape)\nprint('test shape', test.shape)\nprint('merchants shape', merch.shape)\nprint('sample submission shape', ss.shape)\nprint('historical_transactions', ht.shape)","38a3fae9":"train.head()","f5cc97a9":"test.head()","e5769c56":"features = ['feature_1', 'feature_2', 'feature_3']\nfor feature in features:\n    fig, axes = plt.subplots(nrows=1, ncols=2)\n    train.groupby(feature).count()['first_active_month'].plot(kind='bar',\n                                                              title='train {}'.format(feature),\n                                                              figsize=(15, 4),\n                                                              ax=axes[0])\n    test.groupby(feature).count()['first_active_month'].plot(kind='bar',\n                                                              title='test {}'.format(feature),\n                                                              figsize=(15, 4))\n    plt.show()","85bfd4ea":"train['target'].plot(kind='hist', bins=50, figsize=(15, 5), title='Target variable distribution')\nplt.show()","e36d0dca":"train['target_log5p'] = (train['target'] + 5).apply(np.log1p)\ntrain['target_log5p'].plot(kind='hist', bins=50, figsize=(15, 5), title='Target variable log+5 transform distribution')\nplt.show()","bccf5264":"train['first_active_month'] = pd.to_datetime(train['first_active_month'])\ntrain.groupby('first_active_month').count()['card_id'].plot(figsize=(15,5),\n                                                            title='Count of First Active Month in Train Set',\n                                                           color='r')\nplt.show()","d597622b":"test['first_active_month'] = pd.to_datetime(test['first_active_month'])\ntest.groupby('first_active_month').count()['card_id'].plot(figsize=(15,5),\n                                                           title='Count of First Active Month in Test Set',\n                                                          color='b')\nplt.show()","dee3756d":"ht.head()","b3939f21":"# Create features from historic transactions\ngdf = ht.groupby(\"card_id\")\ngdf = gdf[\"purchase_amount\"].agg(['sum', 'mean', 'std', 'min', 'max']).reset_index()\ngdf.columns = [\"card_id\", \"sum_hist_trans\", \"mean_hist_trans\", \"std_hist_trans\", \"min_hist_trans\", \"max_hist_trans\"]\n\ndef merge_hist_transactions(df, hist_agg_df):\n    \"\"\"Merges the historic transactions data with train or test set\"\"\"\n    return pd.merge(df, hist_agg_df, on=\"card_id\", how=\"left\")","b8fe6ad5":"def create_features(df, target=False):\n    \"\"\"\n    Creates raw features including one hot encoding for train and test\n    \"\"\"\n    # One-hot encode features\n    feat1 = pd.get_dummies(df['feature_1'], prefix='f1_')\n    feat2 = pd.get_dummies(df['feature_2'], prefix='f2_')\n    feat3 = pd.get_dummies(df['feature_3'], prefix='f3_')\n    # Numerical representation of the first active month\n    fam_num = pd.to_timedelta(df['first_active_month']).dt.total_seconds().astype(int)\n    # Historical features\n    hist_features = df[['sum_hist_trans','mean_hist_trans','std_hist_trans','min_hist_trans','max_hist_trans']]\n    if target:\n        return pd.concat([feat1, feat2, feat3, fam_num, hist_features], axis=1, sort=False), df['target']\n    return pd.concat([feat1, feat2, feat3, fam_num, hist_features], axis=1, sort=False)","ac58fdde":"# Fill the NA value with the last month?\ntest['first_active_month'] = pd.to_datetime(test['first_active_month'].fillna('2018-01-01'))","0c67273b":"train_with_hist = merge_hist_transactions(train, gdf)\ntest_with_hist = merge_hist_transactions(test, gdf)","4f124855":"X_train, y_train = create_features(train_with_hist, target=True)\nX_test = create_features(test_with_hist, target=False)","93a4494a":"dtrain = xgb.DMatrix(X_train, label=y_train.values)\nmodel = xgb.train(params={'silent':1}, dtrain=dtrain, verbose_eval=False, num_boost_round=100)","7e155965":"# Predict and format submission\ndtest = xgb.DMatrix(X_test)\npreds = model.predict(dtest)\n# Our submission\nsubmission = pd.concat([test['card_id'], pd.Series(preds)], axis = 1)\nsubmission = submission.rename(columns={0:'target'})\nprint('submission shape', submission.shape)","ee27bd22":"submission.head()","42bf5451":"# Save our output for submission\nsubmission.to_csv('submission.csv', header=True, index=False)","64de598f":"train_remneg30 = train_with_hist.loc[train_with_hist['target'] > -30]\nX_train_rem30, y_train_rem30 = create_features(train_remneg30, target=True)\n# X_test = create_features(test, target=False)\ndtrain = xgb.DMatrix(X_train_rem30, label=y_train_rem30.values)\nmodel2 = xgb.train(params={'silent':1}, dtrain=dtrain, verbose_eval=False, num_boost_round=100)\n# Predict and format submission\ndtest = xgb.DMatrix(X_test)\npreds = model2.predict(dtest)\n# Our submission\nsubmission2 = pd.concat([test['card_id'], pd.Series(preds)], axis = 1)\nsubmission2 = submission2.rename(columns={0:'target'})\nsubmission2.to_csv('submission_remneg30.csv', header=True, index=False)","9abb7dce":"submission2['target'].plot(kind='hist', bins=50, title='submission removing <-30 values')\nplt.show()","951b3b89":"submission['target'].plot(kind='hist', bins=50, title='submission not removing <-30 values')\nplt.show()\nplt.show()","3cd88e8d":"# Starter Notebook XGBoost + EDA of Elo Merchant Data","30e576a6":"# Train model","d6d91b4f":"# Compare the two submission distributions","b0afba38":"# Plot the first_active_month - train and test","b31530f3":"# What files do I need?\nYou will need, at a minimum, the `train.csv` and `test.csv` files. These contain the card_ids that we'll be using for training and prediction.\n\n`train.csv` and `test.csv` contain `card_ids` and information about the card itself - the first month the card was active, etc. train.csv also contains the target.","adfb28ac":"# Create Features and bare bones first attempt XGBoost model","d827f3c1":"## Plot Features\nThere are three given features:\n- Feature 1 has 5 possible values\n- Feature 2 has 3 possible values\n- Feature 3 has 2 possible values\n\nTrain and test set appear so have similar distribution","0fc0c612":"# Plot Target Variable\n- The target variable is normally distributed around zero\n- The exception being some very low values below -30\n- Possibly identify these low values and remove them from the training?\n- Still need to transform the target to make it more normally distributed ?","1a98c639":"# Historical Transactions\n`historical_transactions.csv` contains up to 3 months' worth of transactions for every card at any of the provided merchant_ids.","a50ac345":"# Na Values\nWe have one NA value in our test set for the first active month","1af5c8cb":"# Still to come.....\n1. Explore the below additional data\n2. Create a more complex model using historical transactions\n3. Utilize new merchant transactions\n\n## The `historical_transactions.csv` and `new_merchant_transactions.csv` files contain information about each card's transactions.\n\n## `historical_transactions.csv` contains up to 3 months' worth of transactions for every card at any of the provided merchant_ids.\n\n## `new_merchant_transactions.csv` contains the transactions at new merchants (merchant_ids that this particular card_id has not yet visited) over a period of two months.\n\n## `merchants.csv` contains aggregate information for each merchant_id represented in the data set.\n","89b691d0":"# Train model removing <-30 targets from training\nJust as a test lets try removing these values from our training"}}