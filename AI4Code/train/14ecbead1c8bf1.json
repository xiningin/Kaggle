{"cell_type":{"5c02c97c":"code","1f80c0a9":"code","1624f814":"code","ce341245":"code","d1bd05b4":"code","72796179":"code","ff35a7c7":"code","daa1a737":"code","1c227e98":"code","1645c1d7":"code","99c46eb2":"code","3fe44e97":"code","8c876dd1":"code","ca3b356b":"code","22822ce7":"code","aa171812":"code","1b812137":"code","efb28379":"code","aa39e451":"code","c4126bf5":"code","0155555c":"code","e71fb6ea":"code","5ceb7b7d":"code","088c9913":"code","05712c29":"code","a70673c4":"code","1f58c314":"code","edb90d6f":"code","ab3d0bf9":"code","1e25d814":"code","75479644":"code","26d9e8e6":"code","70ae8dea":"code","9aaed368":"markdown","cff54ddc":"markdown","7be2bcd7":"markdown","7cdd7dc4":"markdown","61c2c07b":"markdown"},"source":{"5c02c97c":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\n\nfrom wordcloud import WordCloud, STOPWORDS, ImageColorGenerator\n\nimport ast # Abstract Syntax Trees; handling of JSON content\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))","1f80c0a9":"# load data into data frame\ndf = pd.read_csv('..\/input\/covid19-research-preprint-data\/COVID-19-Preprint-Data_ver5.csv')","1624f814":"df.head()","ce341245":"df.describe(include='all')","d1bd05b4":"tab_by_date = df['Date of Upload'].value_counts().sort_index()\nplt.figure(figsize=(20,6))\ntab_by_date.plot(kind='bar')\nplt.grid()\nplt.title('Date of Upload - Distribution')\nplt.show()","72796179":"df['Uploaded Site'].value_counts().plot(kind='bar')\nplt.title('Uploaded Site')\nplt.grid()\nplt.show()","ff35a7c7":"plt.figure(figsize=(8,6))\ndf['Number of Authors'].hist(bins=50)\nplt.title('Number of Authors')\nplt.show()","daa1a737":"text = \" \".join(title for title in df['Title of preprint'])\nstopwords = set(STOPWORDS)","1c227e98":"wordcloud = WordCloud(stopwords=stopwords, max_font_size=50, max_words=500,\n                      width = 600, height = 400,\n                      background_color=\"white\").generate(text)\nplt.figure(figsize=(12,8))\nplt.imshow(wordcloud, interpolation=\"bilinear\")\nplt.axis(\"off\")\nplt.show()","1645c1d7":"text = \" \".join(abst for abst in df.Abstract)\nstopwords = set(STOPWORDS)","99c46eb2":"wordcloud = WordCloud(stopwords=stopwords, max_font_size=50, max_words=500,\n                      width = 600, height = 400,\n                      background_color=\"white\").generate(text)\nplt.figure(figsize=(12,8))\nplt.imshow(wordcloud, interpolation=\"bilinear\")\nplt.axis(\"off\")\nplt.show()","3fe44e97":"# define keyword\nmy_keyword = 'Remdesivir'","8c876dd1":"def word_finder(i_word, i_text):\n    found = str(i_text.lower()).find(i_word.lower())\n    if found == -1:\n        result = 0\n    else:\n        result = 1\n    return result\n\n# partial function for mapping\nword_indicator_partial = lambda text: word_finder(my_keyword, text)\n# build indicator vector (0\/1) of hits\nkeyword_indicator = np.asarray(list(map(word_indicator_partial, df.Abstract)))\n","ca3b356b":"# number of hits\nprint('Number of hits for keyword <', my_keyword, '> : ', keyword_indicator.sum())","22822ce7":"# add index vector as additional column\ndf['selection'] = keyword_indicator\n\n# select only hits from data frame\ndf_hits = df[df['selection']==1]\n","aa171812":"# show results\ndf_hits","1b812137":"# look at an example: title...,\nexample_row = 1\ndf_hits['Title of preprint'].iloc[example_row]","efb28379":"# ... abstract\ndf_hits.Abstract.iloc[example_row]","aa39e451":"# ... and authors\nauthor_list = ast.literal_eval(df_hits.Authors.iloc[example_row])\nauthor_list","c4126bf5":"# and corresponding institution counts\nauthor_dict = ast.literal_eval(df_hits['Author(s) Institutions'].iloc[example_row])\nauthor_dict","0155555c":"# finally a wordcloud of the selected results' abstracts\ntext = \" \".join(abst for abst in df_hits.Abstract)\nstopwords = set(STOPWORDS)\nwordcloud = WordCloud(stopwords=stopwords, max_font_size=50, max_words=200,\n                      width = 600, height = 400,\n                      background_color=\"white\").generate(text)\nplt.figure(figsize=(12,8))\nplt.imshow(wordcloud, interpolation=\"bilinear\")\nplt.axis(\"off\")\nplt.show()","e71fb6ea":"# save results in CSV file for further processing\ndf_hits.to_csv('results.csv')","5ceb7b7d":"!pip install scispacy\n\n# medium model\n!pip install https:\/\/s3-us-west-2.amazonaws.com\/ai2-s2-scispacy\/releases\/v0.2.4\/en_core_sci_md-0.2.4.tar.gz\n\n# named entity extraction\n# !pip install https:\/\/s3-us-west-2.amazonaws.com\/ai2-s2-scispacy\/releases\/v0.2.4\/en_ner_bionlp13cg_md-0.2.4.tar.gz\n!pip install https:\/\/s3-us-west-2.amazonaws.com\/ai2-s2-scispacy\/releases\/v0.2.4\/en_ner_bc5cdr_md-0.2.4.tar.gz    ","088c9913":"import scispacy\nimport spacy\n\nfrom spacy import displacy\n\nimport en_core_sci_md\nimport en_ner_bc5cdr_md","05712c29":"# look at an abstract\ntext = df_hits.Abstract.iloc[10]\ntext","a70673c4":"nlp = en_core_sci_md.load()\ndoc = nlp(text)","1f58c314":"# sentence parsing demo\ndisplacy.render(next(doc.sents), style='dep', jupyter=True)","edb90d6f":"# Try basic entity extraction\ndoc.ents","ab3d0bf9":"# display entities\ndisplacy.render(doc.sents, style='ent', jupyter=True)","1e25d814":"# use specific Named Entity Recognition\nnlp = en_ner_bc5cdr_md.load()","75479644":"doc = nlp(text)","26d9e8e6":"# Try more specific entity extraction\ndoc.ents","70ae8dea":"# display entities\ndisplacy.render(doc.sents, style='ent', jupyter=True)","9aaed368":"# Search for keywords","cff54ddc":"# Wordcloud of Titles","7be2bcd7":"# Basic explorations","7cdd7dc4":"# Wordcloud of Abstracts","61c2c07b":"# Trying SciSpacy"}}