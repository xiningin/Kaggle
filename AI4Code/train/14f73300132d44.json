{"cell_type":{"864d3bbd":"code","a235b677":"code","a966be02":"code","9901436c":"code","a023bc23":"code","2abecf5f":"code","e92ac37f":"code","7ec5ed36":"code","a9727104":"code","0f17dba0":"code","fc9f9817":"code","2d0ea49a":"code","48b12c55":"code","1f5df671":"code","c60c1a26":"code","4aef51eb":"code","4a7a9670":"markdown","f584947a":"markdown","6eb9d986":"markdown","e4e7e5b0":"markdown"},"source":{"864d3bbd":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","a235b677":"## Import Libraries","a966be02":"import pandas as pd\nimport numpy as np\n\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.preprocessing import StandardScaler\n\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.svm import SVC \nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.ensemble import RandomForestClassifier\n\nfrom sklearn.metrics import accuracy_score, precision_score\nfrom sklearn.metrics import recall_score, f1_score","9901436c":"kepler = pd.read_csv('\/kaggle\/input\/kepler-exoplanet-search-results\/cumulative.csv')\nkepler.head()","a023bc23":"kepler.info()","2abecf5f":"kepler.isnull().sum()","e92ac37f":"kepler = kepler.drop(['rowid', 'kepid', 'kepoi_name', 'kepler_name',\n                     'koi_pdisposition', 'koi_score', 'koi_tce_delivname',\n                     'koi_teq_err1', 'koi_teq_err2'], axis=1)","7ec5ed36":"for column in kepler.columns[kepler.isna().sum() > 0]:\n    kepler[column] = kepler[column].fillna(kepler[column].mean())","a9727104":"kepler_data = kepler[kepler.koi_disposition != 'CANDIDATE']","0f17dba0":"def numeric(value):\n    if value == 'CONFIRMED':\n        return 1\n    else:\n        return 0\n\nkepler_data[\"koi_disposition\"] = kepler_data.koi_disposition.map(numeric)","fc9f9817":"kepler_data.koi_disposition.value_counts()","2d0ea49a":"X = kepler_data.drop('koi_disposition', axis=1)\ny = kepler_data['koi_disposition']","48b12c55":"scaler = StandardScaler()\nX = scaler.fit_transform(X)","1f5df671":"X_train, X_test, y_train, y_test = train_test_split(X, y, \n                                train_size=0.8, test_size=0.2, random_state=0)","c60c1a26":"models = {\n\" Logistic Regression\": LogisticRegression(),\n\"        Decision Tree\": DecisionTreeClassifier(),\n\"Suport Vector Machine\": SVC(),\n\"        Random Forest\": RandomForestClassifier(),\n}","4aef51eb":"for name, model in models.items():\n    model.fit(X_train,y_train)\n    y_pred = model.predict(X_test)\n    print(name)\n    print(\"Accuracy: {}.\".format(accuracy_score(y_test,y_pred)))\n    print(\"Precision: {}.\".format(precision_score(y_test,y_pred)))\n    print(\"Recall: {}\".format(recall_score(y_test,y_pred)))\n    print(\"F1_Score: {}\".format(f1_score(y_test,y_pred)))\n    print()","4a7a9670":"## Import Data","f584947a":"## Models","6eb9d986":"## Results","e4e7e5b0":"## Preprocessing"}}