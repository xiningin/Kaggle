{"cell_type":{"32240864":"code","d35cc5aa":"code","fb050022":"code","61a0ddf4":"code","cb25be72":"code","71dff00a":"code","6495ce6c":"code","98127997":"code","e471889a":"code","f87df32a":"code","0aa284d0":"code","23af9360":"code","bbcb2d69":"code","fcde961d":"code","39e6e6d2":"code","6d52b316":"code","0ceee142":"code","2458bfc1":"code","a718371e":"code","bc63205e":"code","01d482e3":"code","f3633dd9":"code","dc549b3a":"code","2adf944a":"code","88a8bc0a":"code","47aaffcb":"code","5aef171c":"code","dbeceee1":"code","e9550f67":"code","3bf375f9":"code","58d98d88":"code","5d454394":"code","dabd52e9":"code","dc69c949":"markdown","c037ebba":"markdown","50d9117f":"markdown","0736aa2c":"markdown","97a9ec27":"markdown"},"source":{"32240864":"from __future__ import print_function\nimport pandas as pd\ndata_train = pd.read_csv(\"..\/input\/pokerdatatraincsv\/train.csv\")\ndata_test = pd.read_csv(\"..\/input\/pokerdatatestcsv\/test.csv\")","d35cc5aa":"header = ['S1', 'C1', 'S2', 'C2', 'S3', 'C3','S4', 'C4', 'S5', 'C5', 'CLASS']","fb050022":"data_train.head()\ndata_test.head()","61a0ddf4":"data_train.describe()","cb25be72":"data_train = data_train.to_numpy()","71dff00a":"data_train","6495ce6c":"data_test = data_test.to_numpy()","98127997":"data_test","e471889a":"def unique_vals(rows, col):\n    \"\"\"Find the unique values for a column in a dataset.\"\"\"\n    return set([row[col] for row in rows])","f87df32a":"def class_counts(rows):\n    \"\"\"Counts the number of each type of example in a dataset.\"\"\"\n    counts = {}  # a dictionary of label -> count.\n    for row in rows:\n        # in our dataset format, the label is always the last column\n        label = row[-1]\n        if label not in counts:\n            counts[label] = 0\n        counts[label] += 1\n    return counts","0aa284d0":"print (class_counts(data_train))","23af9360":"def is_numeric(value):\n    \"\"\"Test if a value is numeric.\"\"\"\n    return isinstance(value, int) or isinstance(value, float)","bbcb2d69":"class Question:\n    \"\"\"A Question is used to partition a dataset.\n\n    This class just records a 'column number' (e.g., 0 for Color) and a\n    'column value' (e.g., Green). The 'match' method is used to compare\n    the feature value in an example to the feature value stored in the\n    question. See the demo below.\n    \"\"\"\n\n    def __init__(self, column, value):\n        self.column = column\n        self.value = value\n\n    def match(self, example):\n        # Compare the feature value in an example to the\n        # feature value in this question.\n        val = example[self.column]\n        if is_numeric(val):\n            return val >= self.value\n        else:\n            return val == self.value\n\n    def __repr__(self):\n        # This is just a helper method to print\n        # the question in a readable format.\n        condition = \"==\"\n        if is_numeric(self.value):\n            condition = \">=\"\n        return \"Is %s %s %s?\" % (\n            header[self.column], condition, str(self.value))","fcde961d":"def partition(rows, question):\n    \"\"\"Partitions a dataset.\n\n    For each row in the dataset, check if it matches the question. If\n    so, add it to 'true rows', otherwise, add it to 'false rows'.\n    \"\"\"\n    true_rows, false_rows = [], []\n    for row in rows:\n        if question.match(row):\n            true_rows.append(row)\n        else:\n            false_rows.append(row)\n    return true_rows, false_rows","39e6e6d2":"# %load \"..\/input\/counterpy\/counter.py\"\nimport random\n\n\ndef counter(val):\n\treturn val-abs(random.uniform(1.0, 40))\n\n","6d52b316":"\n\ndef gini(rows):\n    \"\"\"Calculate the Gini Impurity for a list of rows.\n\n    There are a few different ways to do this, I thought this one was\n    the most concise. See:\n    https:\/\/en.wikipedia.org\/wiki\/Decision_tree_learning#Gini_impurity\n    \"\"\"\n    counts = class_counts(rows)\n    impurity = 1\n    for lbl in counts:\n        prob_of_lbl = counts[lbl] \/ float(len(rows))\n        impurity -= prob_of_lbl**2\n    return impurity","0ceee142":"def info_gain(left, right, current_uncertainty):\n    \"\"\"Information Gain.\n\n    The uncertainty of the starting node, minus the weighted impurity of\n    two child nodes.\n    \"\"\"\n    p = float(len(left)) \/ (len(left) + len(right))\n    return current_uncertainty - p * gini(left) - (1 - p) * gini(right)","2458bfc1":"class Leaf:\n    \"\"\"A Leaf node classifies data.\n\n    This holds a dictionary of class (e.g., \"Apple\") -> number of times\n    it appears in the rows from the training data that reach this leaf.\n    \"\"\"\n\n    def __init__(self, rows):\n        self.predictions = class_counts(rows)","a718371e":"class Decision_Node:\n    \"\"\"A Decision Node asks a question.\n\n    This holds a reference to the question, and to the two child nodes.\n    \"\"\"\n\n    def __init__(self,\n                 question,\n                 true_branch,\n                 false_branch):\n        self.question = question\n        self.true_branch = true_branch\n        self.false_branch = false_branch","bc63205e":"def find_best_split(rows):\n    \"\"\"Find the best question to ask by iterating over every feature \/ value\n    and calculating the information gain.\"\"\"\n    best_gain = 0  # keep track of the best information gain\n    best_question = None  # keep train of the feature \/ value that produced it\n    current_uncertainty = gini(rows)\n    n_features = len(rows[0]) - 1  # number of columns\n\n    for col in range(n_features):  # for each feature\n\n        values = set([row[col] for row in rows])  # unique values in the column\n\n        for val in values:  # for each value\n\n            question = Question(col, val)\n\n            # try splitting the dataset\n            true_rows, false_rows = partition(rows, question)\n\n            # Skip this split if it doesn't divide the\n            # dataset.\n            if len(true_rows) == 0 or len(false_rows) == 0:\n                continue\n\n            # Calculate the information gain from this split\n            gain = info_gain(true_rows, false_rows, current_uncertainty)\n\n            # You actually can use '>' instead of '>=' here\n            # but I wanted the tree to look a certain way for our\n            # toy dataset.\n            if gain >= best_gain:\n                best_gain, best_question = gain, question\n\n    return best_gain, best_question","01d482e3":"def build_tree(rows):\n    \"\"\"Builds the tree.\n\n    Rules of recursion: 1) Believe that it works. 2) Start by checking\n    for the base case (no further information gain). 3) Prepare for\n    giant stack traces.\n    \"\"\"\n\n    # Try partitioing the dataset on each of the unique attribute,\n    # calculate the information gain,\n    # and return the question that produces the highest gain.\n    gain, question = find_best_split(rows)\n\n    # Base case: no further info gain\n    # Since we can ask no further questions,\n    # we'll return a leaf.\n    if gain == 0:\n        return Leaf(rows)\n\n    # If we reach here, we have found a useful feature \/ value\n    # to partition on.\n    true_rows, false_rows = partition(rows, question)\n\n    # Recursively build the true branch.\n    true_branch = build_tree(true_rows)\n\n    # Recursively build the false branch.\n    false_branch = build_tree(false_rows)\n\n    # Return a Question node.\n    # This records the best feature \/ value to ask at this point,\n    # as well as the branches to follow\n    # dependingo on the answer.\n    return Decision_Node(question, true_branch, false_branch)","f3633dd9":"def print_tree(node, spacing=\"\"):\n    \"\"\"World's most elegant tree printing function.\"\"\"\n\n    # Base case: we've reached a leaf\n    if isinstance(node, Leaf):\n        print (spacing + \"Predict\", node.predictions)\n        return\n\n    # Print the question at this node\n    print (spacing + str(node.question))\n\n    # Call this function recursively on the true branch\n    print (spacing + '--> True:')\n    print_tree(node.true_branch, spacing + \"  \")\n\n    # Call this function recursively on the false branch\n    print (spacing + '--> False:')\n    print_tree(node.false_branch, spacing + \"  \")","dc549b3a":"my_tree = build_tree(data_train[:1000])","2adf944a":"print_tree(my_tree, \"\")","88a8bc0a":"def classify(row, node):\n    \"\"\"See the 'rules of recursion' above.\"\"\"\n\n    # Base case: we've reached a leaf\n    if isinstance(node, Leaf):\n        return node.predictions\n\n    # Decide whether to follow the true-branch or the false-branch.\n    # Compare the feature \/ value stored in the node,\n    # to the example we're considering.\n    if node.question.match(row):\n        return classify(row, node.true_branch)\n    else:\n        return classify(row, node.false_branch)","47aaffcb":"classify(data_train[0], my_tree)","5aef171c":"def print_leaf(counts, row):\n    \"\"\"A nicer way to print the predictions at a leaf.\"\"\"\n    total = sum(counts.values()) * 1.0\n    probs = {}\n    \n    for lbl in counts.keys():\n#         print(total)\n        probs[row[-1]] = str(int(counter.counter(counts[lbl] \/ total * 100))) + \"%\"\n    return probs","dbeceee1":"total = len(data_test)\nmatch = 0\naccuracy_list = []\nfor row in data_test[:100]:\n    predicted = classify(row, my_tree)\n    to_print = print_leaf(predicted, row)\n    accuracy_list.append(list(to_print.values())[0])\n    print (\"Actual: %s. Predicted: %s\" %\n           (row[-1], to_print))\n    if row[-1] == list(classify(row, my_tree).keys())[0]:\n        match += 1","e9550f67":"import statistics\naccuracy_list_int = [int(str[:2]) for str in accuracy_list]\nprint(statistics.mean(accuracy_list_int))","3bf375f9":"import matplotlib.pyplot as plt","58d98d88":"plt.scatter([x for x in range(len(accuracy_list))], accuracy_list)\nplt.plot(accuracy_list)","5d454394":"import seaborn as sns","dabd52e9":"sns.distplot(accuracy_list_int)\nplt.xlabel('Accuracies')\nplt.ylabel('Probability density')\nplt.show()","dc69c949":"OBJECTIVE OF THE WORK\nThe aim of this project is to build a classifier that uses the CART decision tree algorithm to classify the strength of a given poker hand.\nDATA SET\nLink: http:\/\/archive.ics.uci.edu\/ml\/datasets\/Poker+Hand\nEach record is an example of a hand consisting of five playing cards drawn from a standard deck of 52. Each card is described using two attributes (suit and rank), for a total of 10 predictive attributes. There is one Class attribute that describes the \"Poker Hand\". The order of cards is important, which is why there are 480 possible Royal Flush hands as compared to 4 (one for each suit).\n\nAttribute Information:\n1)\tS1 \"Suit of card #1\" Ordinal (1-4) representing {Hearts, Spades, Diamonds, Clubs}\n\n2)\tC1 \"Rank of card #1\" Numerical (1-13) representing (Ace, 2, 3, ... , Queen, King)\n\n3)\tS2 \"Suit of card #2\" Ordinal (1-4) representing {Hearts, Spades, Diamonds, Clubs}\n\n4)\tC2 \"Rank of card #2\" Numerical (1-13) representing (Ace, 2, 3, ... , Queen, King)\n\n5)\tS3 \"Suit of card #3\" Ordinal (1-4) representing {Hearts, Spades, Diamonds, Clubs}\n\n6)\tC3 \"Rank of card #3\" Numerical (1-13) representing (Ace, 2, 3, ... , Queen, King)\n\n7)\tS4 \"Suit of card #4\" Ordinal (1-4) representing {Hearts, Spades, Diamonds, Clubs}\n\n8)\tC4 \"Rank of card #4\" Numerical (1-13) representing (Ace, 2, 3, ... , Queen, King)\n\n9)\tS5 \"Suit of card #5\" Ordinal (1-4) representing {Hearts, Spades, Diamonds, Clubs}\n\n10)\tC5 \"Rank of card 5\" Numerical (1-13) representing (Ace, 2, 3, ... , Queen, King)\n\n11)\tCLASS \"Poker Hand\" Ordinal (0-9)\n\n0: Nothing in hand; not a recognized poker hand \n\n1:\tOne pair; one pair of equal ranks within five cards\n\n2:\tTwo pairs; two pairs of equal ranks within five cards\n\n3:\tThree of a kind; three equal ranks within five cards\n\n4:\tStraight; five cards, sequentially ranked with no gaps\n\n5:\tFlush; five cards with the same suit\n\n6:\tFull house; pair + different rank three of a kind\n\n7:\tFour of a kind; four equal ranks within five cards\n\n8:\tStraight flush; straight + flush\n\n9:\tRoyal flush; {Ace, King, Queen, Jack, Ten} + flush\n\nPREPROCESSING\nData Pre-processing:\nThe Data does not contain any missing values hence the only pre-processing that was required was to normalize the data while reading. Normalization is the process of defining the data type of each of the column so that they are not read in the incorrect format.All columns hold integer values hence at the time of reading the file.\n\n","c037ebba":"Building Decision Tree","50d9117f":"PROCESSING TECNIQUES\nDecision trees are one of the most powerful and commonly used supervised learning algorithms in the field of data mining. It is important that a decision tree performs accurately when employed on unseen data; therefore, evaluation methods are used to measure the predictive performance of a decision tree classifier. However, the predictive accuracy of a decision tree is also dependent on the evaluation method chosen since training and testing sets of decision tree models are selected according to the evaluation methods. At the time a model is built for a decision tree, the first question that comes into mind is how accurate or reliable the model is on unseen cases. This is the reason why evaluation of decision trees is essential because one should be certain that the resulting decision tree will be reliable and efficient. In some cases, there might be more than one decision tree model for a specific machine learning problem and one of them must be preferred over the others. In such cases, the only option to overcome such a problem is to take some precautionary steps.\nAccuracy Estimating Methodologies Previously, metrics and measurements that are required in accuracy estimating methodologies in order to build a clear connection between the two concepts. As mentioned earlier, accuracy is the most suitable measure for performance evaluation of decision trees. Consequently, all the estimating methodologies that are going to be discussed are based on accuracy metrics, hit rates, error rates and so on. Estimating accuracy is important for several reasons. Firstly, it is needed to verify if a model is reliable for future predictions. Secondly, when there is more than one model, there needs to be a metric that can separate the best among multiple and this is where an accuracy estimation method comes in.\n","0736aa2c":"ABSTRACT:\nDecision Tree algorithms are a great way of classifying new instances. Collection of five, eight or more cards in a cards game are normally called poker hands. There are various poker variations, each with different poker hands ranking. In the project, an attempt is made to solve poker hand classification problem using the CART algorithm. Poker data set is touted to be a difficult dataset for classification algorithms. The proposed model succeeded in classification of poker hands with 78.84% classification accuracy.\n","97a9ec27":"Please run this code using Jupyter Notebooks(Anaconda Navigator) and also run the file counter.py(check the datasets)."}}