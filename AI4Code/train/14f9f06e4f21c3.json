{"cell_type":{"713a90cf":"code","73f61bf6":"code","a406c8ad":"code","ca3169b2":"code","64d2c83a":"code","9574ab18":"code","f7c62a75":"code","1a1804ce":"code","10fee354":"code","2167f90b":"code","4611c10a":"code","d2980b67":"code","808ef2e3":"code","fa20a908":"code","9af032b0":"code","98dd3c2b":"code","ef0d6f62":"code","192bba86":"code","8f7329b8":"code","1638ca3f":"code","4445db4f":"code","9f444a71":"code","941b9424":"code","63d0e421":"code","a130dfba":"code","60af49d8":"markdown","f40b38c6":"markdown","b650d468":"markdown","62fb8039":"markdown"},"source":{"713a90cf":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","73f61bf6":"agent_df = pd.read_csv('\/kaggle\/input\/mlsp-hackathon\/train_HK6lq50.csv')\nagent_df.drop(['id','test_id'],axis=1,inplace=True)","a406c8ad":"y = agent_df.is_pass\nX = agent_df.drop(['is_pass'],axis=1)","ca3169b2":"X['program_id'].nunique()","64d2c83a":"cat_cols = [cname for cname in X.columns if X[cname].dtypes == 'object' and X[cname].nunique() < 25]\nnum_cols = [cname for cname in X.columns if X[cname].dtypes in ['int64','float64']]\nprint (cat_cols)\nprint (num_cols)\n#Utilize only these columns for Model configuration\nuse_cols = cat_cols + num_cols\nX = X[use_cols].copy()","9574ab18":"from sklearn.compose import ColumnTransformer\nfrom sklearn.pipeline import Pipeline\nfrom sklearn.impute import SimpleImputer\nfrom sklearn.preprocessing import OneHotEncoder\nfrom sklearn.model_selection import train_test_split","f7c62a75":"#Preprocessing Numerical columns - Missing values \ndef find_null_col(dataset):\n    null_col = dataset.columns[dataset.isnull().any()]\n    null_col_sum = dataset[null_col].isnull().sum()\n    return null_col,null_col_sum\n  \n#impute by groupby on following columns -\ngroup_col1 = ['trainee_id']\ngroup_col2 = ['gender','education','city_tier']\n\n#UDF to impute Null values with the mean of the group of meaningful columns.\ndef impute_null(dataset,null_col,group_col):\n    for col in null_col:\n        dataset[col] = dataset[col].fillna(dataset.groupby(group_col)[col].transform('mean'))","1a1804ce":"null_col_X,null_col_X_sum = find_null_col(X)\nprint(\"Null Columns :\" ,\"\\n\",null_col_X)\nprint(\"Null Columns info :\",\"\\n\",null_col_X_sum)","10fee354":"impute_null(X,null_col_X,group_col1)\nimpute_null(X,null_col_X,group_col2)\nnull_col_X,null_col_X_sum = find_null_col(X)\nprint(\"Null Columns :\" ,null_col_X)\nprint(\"Null Columns info :\",null_col_X_sum)","2167f90b":"X = X.drop(['trainee_id'],axis=1)\nnum_col_x = ['program_duration', 'city_tier', 'age', 'total_programs_enrolled', 'trainee_engagement_rating']","4611c10a":"from sklearn.ensemble import RandomForestClassifier\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.metrics import roc_auc_score\nfrom sklearn.model_selection import cross_val_score","d2980b67":"#Preprocessing Numerical Data\nnum_transformer = Pipeline(steps=[\n                                  ('imputer',SimpleImputer(strategy='mean')),\n                                  ('scaler',StandardScaler())\n                                  ])","808ef2e3":"#Preprocessing Categorical Data\ncat_transformer = Pipeline(steps=[\n                                  ('imputer',SimpleImputer(strategy='most_frequent')),\n                                  ('onehot',OneHotEncoder(handle_unknown='ignore'))\n                                  ])","fa20a908":"#Bundle Preprocessing steps\npreprocessor = ColumnTransformer(transformers=[\n                                               ('num',num_transformer,num_col_x),\n                                               ('cat',cat_transformer,cat_cols)\n])","9af032b0":"model_RF_1 = RandomForestClassifier(bootstrap=True, ccp_alpha=0.0, class_weight='balanced',\n                       criterion='gini', max_depth=124, max_features='auto',\n                       max_leaf_nodes=None, max_samples=None,\n                       min_impurity_decrease=0.0, min_impurity_split=None,\n                       min_samples_leaf=1, min_samples_split=9,\n                       min_weight_fraction_leaf=0.0, n_estimators=643,\n                       n_jobs=-1, oob_score=False, random_state=42, verbose=0,\n                       warm_start=False)\n","98dd3c2b":"#Pipeline for RFClassifier\npipeline_RF_1 = Pipeline(steps=[\n                           ('preprocessor',preprocessor),\n                           ('model_RF_1',model_RF_1)\n                           \n])","ef0d6f62":"pipeline_RF_1.fit(X,y)\nscores_RF_1 = cross_val_score(pipeline_RF_1,X,y,cv=10,scoring='roc_auc')\nscore_RF_1 = scores_RF_1.mean()\nprint(score_RF_1)","192bba86":"from sklearn.externals import joblib\njoblib.dump(preprocessor, 'MLSP_Hackathon_Preprocessor.pkl')\njoblib.dump(model_RF_1, 'MLSP_Hackathon_RFC_1.pkl')","8f7329b8":"test_df = pd.read_csv('\/kaggle\/input\/mlsp-hackathon\/test_wF0Ps6O.csv')\ntest_df.head()","1638ca3f":"#Removing the ID column from the test dataset\nX_test = test_df.iloc[:,1:15]\nX_test_id = test_df.iloc[:,0:1]\nprint(X_test.shape)\nprint(X_test_id.shape)","4445db4f":"MLSP_Preprocessor = joblib.load('MLSP_Hackathon_Preprocessor.pkl')\nX_test = MLSP_Preprocessor.transform(X_test)","9f444a71":"MLSP_model_1 = joblib.load('MLSP_Hackathon_RFC_1.pkl')\ny_test_1 = MLSP_model_1.predict(X_test)","941b9424":"submission_df_1 = pd.read_csv('\/kaggle\/input\/mlsp-hackathon\/sample_submission_vaSxamm.csv')","63d0e421":"submission_df_1['is_pass'] = y_test_1","a130dfba":"submission_df_1.to_csv('MSLP_Hackathon_RFC_1_sub.csv',index=False)","60af49d8":"# Model Creation - RFClassifier with Cross-Validation\n\n","f40b38c6":"# Model Evaluation on the test file","b650d468":"# Data Preprocessing","62fb8039":"## Submission"}}