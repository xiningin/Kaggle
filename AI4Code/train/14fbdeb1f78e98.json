{"cell_type":{"4a8754fb":"code","1b301568":"code","ed3589cc":"code","ab8e3c67":"code","3346f1ee":"code","7e3e9005":"code","ecdc6dc2":"code","55677766":"code","2204b4c8":"code","b507d924":"code","a0446899":"code","e6d4bff6":"code","a9461a36":"code","aa5c955e":"code","88fcbfef":"code","c98d9b3f":"code","1d8d82d5":"code","34809d4b":"code","7698dc6a":"code","24174e66":"code","78946780":"code","3f50caae":"code","bd14bc99":"code","01a04c39":"code","9dacd2b8":"code","08b94cfe":"code","8d891def":"code","172674fd":"code","a0225168":"code","abb4f68d":"code","6386cd4a":"code","a2dba35f":"code","38818979":"code","ee892e74":"code","41b51c06":"code","af85e785":"code","54df7aa6":"code","4b85aecb":"code","c8f56b0e":"code","e3aa7b42":"code","892717a7":"code","d7ab8651":"code","bf390cd6":"code","ff45f4a8":"code","e8ce235c":"code","647e841e":"code","e82cc6fa":"code","226124a8":"code","405b5105":"code","367684f2":"code","6e4eef7a":"code","606fb516":"code","e71611cb":"code","af49f3d9":"code","4dee6ba8":"markdown","bec612ec":"markdown","2c110ea9":"markdown","5ce24d0d":"markdown","5ff0c200":"markdown","28eb19b6":"markdown","c2bcb3b4":"markdown","362e4ae0":"markdown","bd21faca":"markdown","760f1dad":"markdown","0c95c521":"markdown","9b391ddb":"markdown","22512adc":"markdown","10a29647":"markdown","e1c0e82e":"markdown","46bb0db5":"markdown","2cdfba6b":"markdown","72265a94":"markdown","394743b3":"markdown","8ffbb785":"markdown","719d4793":"markdown","aff067d4":"markdown","75d14f17":"markdown","f3b13845":"markdown","3b9017e7":"markdown","0c038f37":"markdown","9caedc1a":"markdown","7b9c72c0":"markdown","1f7620cc":"markdown","5d7d6a9f":"markdown","c07f08cc":"markdown","240b85ae":"markdown","e21602a3":"markdown","41d70b97":"markdown","d48a892e":"markdown","3bc41ff0":"markdown","6b699c55":"markdown","c146bacd":"markdown","129d4f5c":"markdown","bc5f2ea3":"markdown","54e0b26f":"markdown","1af8c315":"markdown","5b1a406b":"markdown","cebe20cd":"markdown","5763a7b7":"markdown","204526fd":"markdown","08f2bac7":"markdown","62feabc1":"markdown","12ac0bb1":"markdown","3abdcfa8":"markdown","a0b12300":"markdown","86809118":"markdown","554cae5e":"markdown","b2ecc3df":"markdown","233b2a34":"markdown","bdde3850":"markdown","0b889599":"markdown","f4aa1b7c":"markdown","e676c17d":"markdown","df5b5c4c":"markdown","ae462c1d":"markdown","9c73b6f6":"markdown","dd81d35c":"markdown","8704a16d":"markdown","ce49a855":"markdown","059a9842":"markdown","8d430a85":"markdown","30f04bba":"markdown","6f58ee1c":"markdown","cec994ec":"markdown","e4d4707a":"markdown","e5964193":"markdown","91419a77":"markdown","e22d5921":"markdown","1b0e27a0":"markdown","c3ad8301":"markdown","9977fcdc":"markdown","0f05c665":"markdown"},"source":{"4a8754fb":"import pandas as pd\nimport numpy as np\nfrom sklearn.metrics import mean_squared_error\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.impute import SimpleImputer\nfrom xgboost import XGBRegressor,plot_importance\nimport ast\nfrom collections import Counter\nfrom sklearn.cluster import KMeans\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nimport bokeh\nfrom bokeh.plotting import figure\nfrom bokeh.io import output_notebook, show\nfrom bokeh.models import LabelSet, ColumnDataSource, HoverTool\nfrom bokeh.palettes import Category20c, Spectral6\nfrom bokeh.transform import cumsum, factor_cmap, jitter\n\noutput_notebook()\n","1b301568":"# Path of the files to read.\ntrain_path = '..\/input\/tmdb-box-office-prediction\/train.csv'\ntest_path = '..\/input\/tmdb-box-office-prediction\/test.csv'\nnominations_path='..\/input\/nominations\/nominations.csv'\n\ntrain = pd.read_csv(train_path)\ntest = pd.read_csv(test_path)\nnominations=pd.read_csv(nominations_path)\n","ed3589cc":"colons_in_Json = ['genres', 'production_companies', 'production_countries', 'spoken_languages', 'Keywords', 'cast', 'crew','belongs_to_collection']\n\ndef get_dictionary(s):\n    try:\n        d = eval(s)\n    except:\n        d = {}\n    return d\n\nfor col in colons_in_Json :\n    train[col] = train[col].apply(lambda x : get_dictionary(x))\n    \nfor col in colons_in_Json :\n    test[col] = test[col].apply(lambda x : get_dictionary(x))\n","ab8e3c67":"%%script false\n\nimport pandas as pd\nfrom urllib.request import urlopen\nfrom bs4 import BeautifulSoup\nimport ast\nimport time\nimport json\nimport unidecode\nimport urllib\n\npath = '.\/train.csv'\ndata = pd.read_csv(path)\n\ncast_dict = data['cast'].apply(lambda x: ast.literal_eval(x) if pd.notnull(x) else {})\ncast_ids=[[y['id'] for y in x] for x in cast_dict]\nunique_cast = pd.DataFrame(cast_ids).stack().unique()\nnominations=pd.DataFrame(columns=['id', 'nominations'])\n\n# output = pd.DataFrame({'id': nominations.id,\n#                        'nominations': nominations.nominations})\n# output.to_csv('nominations.csv', index=False)\n\nnominations['id'] = [x for x in unique_cast]\n\n\ni=0 \n\nwith open('nominations.csv', 'a') as csv:\n    for x in unique_cast[i:]:\n        start_time = time.time()\n\n        print(x)\n        \n        try:\n            with urlopen(\"https:\/\/www.themoviedb.org\/person\/\"+str(x)) as page:\n                soup = BeautifulSoup(page, 'html.parser')\n                name=soup.find('h2').text\n                name = unidecode.unidecode(name)\n                name=name.replace(\" \", \"%20\")\n\n                print(name)\n\n                url=\"https:\/\/sg.media-imdb.com\/suggests\/\"+name[0].lower()+\"\/\"+name.lower()+\".json\"\n                print(url)\n                page = urlopen(url)\n                soup = BeautifulSoup(page, 'html.parser')\n                id=soup.text.find('\"id\":\"nm')\n                id=soup.text[id+6:id+15]\n\n                print(id)\n                print(i)\n                page = urlopen(\"https:\/\/www.imdb.com\/name\/\"+id+\"\/awards?ref_=nm_ql_2\")\n\n                soup = BeautifulSoup(page, 'html.parser')\n                \n                a = 0\n                academy=0\n                golden=0\n                if soup.find_all('h3', string=\"Academy Awards, USA\"):\n                    soupCarotte = soup.find_all('table', attrs={'class': 'awards'})[a]\n                    academy=len(soupCarotte.find_all('td', attrs={'class': 'award_outcome'}))\n                    a+=1\n\n                if soup.find_all('h3', string=\"Golden Globes, USA\"):\n                    soupSoup = soup.find_all('table', attrs={'class': 'awards'})[a]\n                    golden=len(soupSoup.find_all('td', attrs={'class': 'award_outcome'}))\n\n                nominations.loc[i,'nominations']=golden+academy\n\n\n        except urllib.error.HTTPError:\n            nominations.loc[i,'nominations']=0\n\n\n        print(nominations)\n\n        output = pd.DataFrame({'id': nominations.loc[i, 'id'],\n                       'nominations': nominations.loc[i, 'nominations']}, index=[0])\n        output.to_csv(csv, header=False, index=False)\n\n        i+=1\n\n\nprint(time.time() - start_time)\n\n# output = pd.DataFrame({'id': nominations.id,\n#                        'nominations': nominations.nominations})\n# output.to_csv('nominations.csv', index=False)","3346f1ee":"%%script false\n\nimport pandas as pd\nimport numpy as np\nfrom urllib.request import urlopen\nfrom bs4 import BeautifulSoup\nimport ast\nimport time\nimport json\nimport urllib\nimport unidecode\nimport requests\nfrom tqdm import tqdm\nimport warnings\nwarnings.filterwarnings(\"ignore\")\nimport re\nfrom itertools import islice\n\n\n\npath = '.\/train.csv'\ndata = pd.read_csv(path)\n\n\nprint(data['belongs_to_collection'].iloc[0])\n\n\ncolons_in_Json = ['belongs_to_collection']\n\ndef get_dictionary(s):\n    try:\n        d = eval(s)\n    except:\n        d = {}\n    return d\n\nfor col in tqdm(colons_in_Json) :\n    data[col] = data[col].apply(lambda x : get_dictionary(x))\n\n\n\n\ngoogle_result=data[['id','title','belongs_to_collection']]\ngoogle_result['google_result']=\"\"\nmovie_title=google_result['title']\nlist_movie_title=list(movie_title)\n\n\ngoogle_result['film_belongs_to_collection'] = google_result['belongs_to_collection'].apply(lambda x: 0 if x == {} else 1)\n\nword_movie=' movie'\n\nwith open('google_result.csv', 'a') as csv:\n    for index, r in google_result.iloc[0:].iterrows():    #choose here to start iterating from the row you want in case of an error during data collection \n        if google_result.iloc[index]['film_belongs_to_collection']==0:\n            search=google_result['title'].iloc[index]\n            search=search+word_movie\n        else:\n            words = ['(Theatrical)','(1958 series)','( Series)','- \u041a\u043e\u043b\u043b\u0435\u043a\u0446\u0438\u044f','Collection','(Animation)','(Universal Series)','(Heisei)',': The Original Series','- Collezione','(Original)','(Hammer Series)','(Remake)','(Reboot)','( Series)','Trilogy','(1976 series)','(Original Series)','(Universal Series)','Anthology','(Universal)','()','The Klapisch ','(\u041a\u043e\u043b\u043b\u0435\u043a\u0446\u0438\u044f)']\n            search = [] \n            belongs_to_collection_line=google_result.iloc[index]['belongs_to_collection']\n            collection_name = belongs_to_collection_line[0]['name']\n            for w in words:\n                collection_name = collection_name.replace(w, '')\n            search.append(collection_name)\n            search=(search[0])  \n            search=search+word_movie\n      \n        try:\n            print(search)\n            r = requests.get(\"https:\/\/www.google.com\/search\", params={'q':search})\n            soup = BeautifulSoup(r.text, \"lxml\")\n            res = soup.find(\"div\", {\"id\": \"resultStats\"})\n            nb_result = ''.join(x for x in res.text if x.isdigit())\n            print(nb_result)\n            google_result.loc[index, 'google_result']=nb_result\n        except urllib.error.HTTPError:\n            google_result.loc[index,'google_result']=0\n  \n        output = pd.DataFrame({'id': google_result.loc[index, 'title'],\n                    'google_result': google_result.loc[index, 'google_result']}, index=[0])\n        output.to_csv(csv, header=False, index=False)\n","7e3e9005":"t = train[['id','revenue', 'title']]\n          \nhover = HoverTool(tooltips = [\n            ('Titre','@title'),\n            ('Revenue','@revenue'),\n            ('id','@id')\n           ])\n\n\nfig = figure(x_axis_label='Films',\n             y_axis_label='Revenue',\n             title='Revenue for each Films',\n            tools=[hover])\n\n\nfig.square(x='id',\n           y='revenue',\n          source=t)\n\nshow(fig)","ecdc6dc2":"t = train[['id','revenue', 'title']]\n\n          \nhover = HoverTool(tooltips = [\n            ('Titre','@title'),\n            ('Revenue in log1p','@revenue'),\n            ('id','@id')\n           ])\n\n\nfig = figure(x_axis_label='Films',\n             y_axis_label='Revenue Revenue in log1p',\n             title='Revenue in log1p for each Films',\n            tools=[hover])\n\n\nfig.square(x='id',\n           y='revenue',\n          source=t)\n\n\nshow(fig)","55677766":"t = train[['id','runtime', 'title','revenue']].copy()\nt['revenue'] = np.log1p(t.revenue)\n          \nhover = HoverTool(tooltips = [\n            ('Titre','@title'),\n            ('Runtime','@runtime'),\n            ('id','@id'),\n            ('Revenue','@revenue')\n           ])\n\n\nfig = figure(x_axis_label='Films',\n             y_axis_label='Runtime',\n             title='Runtime for each Films',\n            tools=[hover])\n\n\nfig.square(x='id',\n           y='runtime',\n          source=t)\n\n\nshow(fig)","2204b4c8":"t= train[['id','title','runtime','revenue','release_date']].copy()\n\n          \nt_150=t.loc[(t['runtime'] >= 150), ['id','title','runtime','revenue','release_date']] \nt_150['revenue'] = np.log1p(t_150.revenue)\n          \n\n          \nhover = HoverTool(tooltips = [\n            ('Titre','@title'),\n            ('Runtime','@runtime'),\n            ('id','@id'),\n            ('Revenue','@revenue'),\n            ('Release date','@release_date')\n           ])\n\n\nfig = figure(x_axis_label='Revenue in log1p',\n             y_axis_label='Runtime',\n             title='Runtime for each Films',\n            tools=[hover])\n\n\nfig.square(x='revenue',\n           y='runtime',\n          source=t_150)\n\n\nshow(fig)","b507d924":"t= train[['id','title','runtime','revenue']].copy()\n\nt.iloc[1335]=t.iloc[1335].replace(np.nan, int(120))\nt.iloc[2302]=t.iloc[2302].replace(np.nan, int(90))\n\n\n    \nt['runtime_cat_min_60'] = t['runtime'].apply(lambda x: 1 if (x <=60) else 0)\nt['runtime_cat_61_80'] = t['runtime'].apply(lambda x: 1 if (x >60)&(x<=80) else 0)\nt['runtime_cat_81_100'] = t['runtime'].apply(lambda x: 1 if (x >80)&(x<=100) else 0)\nt['runtime_cat_101_120'] = t['runtime'].apply(lambda x: 1 if (x >100)&(x<=120) else 0)\nt['runtime_cat_121_140'] = t['runtime'].apply(lambda x: 1 if (x >120)&(x<=140) else 0)\nt['runtime_cat_141_170'] = t['runtime'].apply(lambda x: 1 if (x >140)&(x<=170) else 0)\nt['runtime_cat_171_max'] = t['runtime'].apply(lambda x: 1 if (x >=170) else 0)\n\n\nt.loc[t.runtime_cat_min_60 == 1,'runtime_category'] = 'cat_min-60'\nt.loc[t.runtime_cat_61_80 == 1,'runtime_category'] = 'cat_61-80'\nt.loc[t.runtime_cat_81_100 == 1,'runtime_category'] = 'cat_81-100'\nt.loc[t.runtime_cat_101_120 == 1,'runtime_category'] = 'cat_101-120'\nt.loc[t.runtime_cat_121_140 == 1,'runtime_category'] = 'cat_121-140'\nt.loc[t.runtime_cat_141_170 == 1,'runtime_category'] = 'cat_141-170'\nt.loc[t.runtime_cat_171_max == 1,'runtime_category'] = 'cat_171-max'\n\n\n#to count how many samples do we have for a category. We want at at least 15 exemples to categorise a data. \n# print(Counter(t['runtime_cat_171_max']==1))\n\n\ncat = t['runtime_category']\nctr = Counter(cat)\ncat = [x for x in ctr]\nunique_names = pd.Series(cat).unique()\n\ndic={}\nfor a in unique_names:\n    mask = t.runtime_category.apply(lambda x: a in x)\n    dic[a] = t[mask]['revenue'].mean()\n    \nt = pd.DataFrame.from_dict(dic, orient='index', columns=['mean_revenue']).reset_index().rename(columns={'index':'runtime_cat'})\n\nt = t.nlargest(6, 'mean_revenue')\n\nt['color'] = Category20c[6]\n\nhover1 = HoverTool(tooltips = [\n            ('Runtime_category','@runtime_cat'),\n            ('Revenue','@mean_revenue')\n           ])\n\np = figure(x_range=t.runtime_cat, plot_width=800,plot_height=400, toolbar_location=None, title=\"Revenue per runtime category\", tools=[hover1])\np.vbar(x='runtime_cat', top='mean_revenue', width=0.9, source=t, legend='runtime_cat',\n       line_color='white',fill_color='color')\n\np.xgrid.grid_line_color = None\np.legend.orientation = \"horizontal\"\np.legend.location = \"top_center\"\n\nshow(p)","a0446899":"# feature engeneering : film by runtime category\ntrain['runtime_cat_min_60'] = train['runtime'].apply(lambda x: 1 if (x <=60) else 0)\ntrain['runtime_cat_61_80'] = train['runtime'].apply(lambda x: 1 if (x >60)&(x<=80) else 0)\ntrain['runtime_cat_81_100'] = train['runtime'].apply(lambda x: 1 if (x >80)&(x<=100) else 0)\ntrain['runtime_cat_101_120'] = train['runtime'].apply(lambda x: 1 if (x >100)&(x<=120) else 0)\ntrain['runtime_cat_121_140'] = train['runtime'].apply(lambda x: 1 if (x >120)&(x<=140) else 0)\ntrain['runtime_cat_141_170'] = train['runtime'].apply(lambda x: 1 if (x >140)&(x<=170) else 0)\ntrain['runtime_cat_171_max'] = train['runtime'].apply(lambda x: 1 if (x >=170) else 0)\n\ntest['runtime_cat_min_60'] = test['runtime'].apply(lambda x: 1 if (x <=60) else 0)\ntest['runtime_cat_61_80'] = test['runtime'].apply(lambda x: 1 if (x >60)&(x<=80) else 0)\ntest['runtime_cat_81_100'] = test['runtime'].apply(lambda x: 1 if (x >80)&(x<=100) else 0)\ntest['runtime_cat_101_120'] = test['runtime'].apply(lambda x: 1 if (x >100)&(x<=120) else 0)\ntest['runtime_cat_121_140'] = test['runtime'].apply(lambda x: 1 if (x >120)&(x<=140) else 0)\ntest['runtime_cat_141_170'] = test['runtime'].apply(lambda x: 1 if (x >140)&(x<=170) else 0)\ntest['runtime_cat_171_max'] = test['runtime'].apply(lambda x: 1 if (x >=170) else 0)","e6d4bff6":"t = train[['id','title','runtime','revenue','release_date','budget']].copy()\nt['revenue'] = np.log1p(t.revenue)\n\n\n\nhover = HoverTool(tooltips = [\n            ('Titre','@title'),\n            ('Revenue','@revenue'),\n            ('Budget','@budget')\n           ])\n\n\nfig = figure(x_axis_label='Budget',\n             y_axis_label='Revenue',\n             title='log Revenue vs log Budget ',\n            tools=[hover])\n\n\n\nfig.square('budget', 'revenue',source=t)\n\nshow(fig)","a9461a36":"# feature engeneering : Films budget  \ntrain['budget'] = np.log1p(train.budget)\ntest['budget'] = np.log1p(test.budget)","aa5c955e":"t = train[['id','title','runtime','revenue','release_date','budget','popularity']].copy()\nt['revenue'] = np.log1p(t.revenue)\n\nhover = HoverTool(tooltips = [\n            ('Titre','@title'),\n            ('Revenue','@revenue'),\n            ('Popularity','@popularity')\n            \n           ])\n\n\nfig = figure(x_axis_label='Popularity',\n             y_axis_label='Revenue',\n             title='log Revenue vs log Popularity ',\n            tools=[hover])\n\n\n\nfig.square('popularity', 'revenue',source=t)\n\nshow(fig)","88fcbfef":"# feature engeneering : popularity\ntrain['popularity'] = np.log1p(train.popularity)\ntest['popularity'] = np.log1p(test.popularity)","c98d9b3f":"#Plot : Revenue for each film that has homepage or not \n\nt = train[['revenue','homepage','title']].copy()\n\nt['film_that_has_homepage'] = t['homepage'].isnull().apply(lambda x: str(False) if x==True  else str(True))\n\n\nt = t.groupby('film_that_has_homepage')['revenue'].mean().reset_index()\n\nhover1 = HoverTool(tooltips = [\n            ('Mean revenue','@revenue'),\n           ])\n\n\nt['color'] = [Spectral6[1],Spectral6[2]]\n\n\np = figure(x_range=['False','True'], plot_width=600,plot_height=400, toolbar_location=None, title=\"Revenue for a film that has homepage\", tools=[hover1])\np.vbar(x='film_that_has_homepage', top='revenue', width=0.9, source=t, legend='film_that_has_homepage',\n       line_color='white', fill_color='color')\n\np.xgrid.grid_line_color = None\np.legend.orientation = \"horizontal\"\np.legend.location = 'top_left'\n\nshow(p)","1d8d82d5":"# feature engeneering : Film that has homepage\ntrain['film_that_has_homepage'] = train['homepage'].isnull().apply(lambda x: 0 if x==True else 1).copy()\ntest['film_that_has_homepage'] = test['homepage'].isnull().apply(lambda x: 0 if x==True else 1).copy()","34809d4b":"t = train[['revenue','original_language','title']].copy()\n\n\nlang = t['original_language']\nctr = Counter(lang).most_common(17)\nlang = [x[0] for x in ctr ]\nunique_names = pd.Series(lang).unique()\n\n\n\ndic={}\nfor a in unique_names:\n    mask = t.original_language.apply(lambda x: a in x)\n    dic[a] = t[mask]['revenue'].mean()\n\nt = pd.DataFrame.from_dict(dic, orient='index', columns=['mean_revenue']).reset_index().rename(columns={'index':'langue'})\n\nt = t.nlargest(12, 'mean_revenue')\n\nt['color'] = Category20c[12]\n\nhover1 = HoverTool(tooltips = [\n            ('Langue','@langue'),\n            ('Revenue','@mean_revenue')\n           ])\n\np = figure(x_range=t.langue, plot_width=1400,plot_height=400, toolbar_location=None, title=\"Revenue per original language\", tools=[hover1])\np.vbar(x='langue', top='mean_revenue', width=0.9, source=t, legend='langue',\n       line_color='white', fill_color='color')\n\np.xgrid.grid_line_color = None\np.legend.orientation = \"horizontal\"\np.legend.location = \"top_center\"\n\nshow(p)","7698dc6a":"# feature engeneering : one hot encoding for original language that have at least 5 samples\nlang = train['original_language']\nlang_more_17_samples = [x[0] for x in Counter(pd.DataFrame(lang).stack()).most_common(17)]\n\nfor col in lang_more_17_samples :\n    train[col] = train['original_language'].apply(lambda x: 1 if x == col else 0)\nfor col in lang_more_17_samples :\n    test[col] = test['original_language'].apply(lambda x: 1 if x == col else 0)\n# print(train['Drama'])\n","24174e66":"google_train_path = '..\/input\/google-result\/google_result_train.csv'\ngoogle_test_path = '..\/input\/google-result\/google_result_test.csv'\n\ngoogle_train = pd.read_csv(google_train_path)\ngoogle_test = pd.read_csv(google_test_path)\ntrain['google_result'] = google_train['result']\ntest['google_result'] = google_test['result']","78946780":"t = train[['revenue','title','google_result']].copy()\nt['revenue']=np.log1p(t.revenue)\nt['google_result']=np.log1p(t.google_result)\n\n\nhover = HoverTool(tooltips = [\n            ('Titre','@title'),\n            ('Revenue','@revenue'),\n            ('Google result number','@google_result')\n            \n           ])\n\n\nfig = figure(x_axis_label='Google result number',\n             y_axis_label='Revenue',\n             title='log Revenue vs log google_result ',\n            tools=[hover])\n\n\n\nfig.square('google_result', 'revenue',source=t)\n\nshow(fig)","3f50caae":"# feature engeneering : popularity with google search \ntrain['google_result']=np.log1p(train.google_result)\ntest['google_result']=np.log1p(test.google_result)","bd14bc99":"t = train[['revenue','belongs_to_collection','title']].copy()\n\n\nt['film_belongs_to_collection'] = t['belongs_to_collection'].apply(lambda x: str(False) if x == {} else str(True))\n\n\nt = t.groupby('film_belongs_to_collection')['revenue'].mean().reset_index()\n\n\nhover1 = HoverTool(tooltips = [\n            ('Mean revenue','@revenue'),\n           ])\n\n\nt['color'] = [Spectral6[0],Spectral6[1]]\n\n\np = figure(x_range=['False','True'], plot_width=600,plot_height=400, toolbar_location=None, title=\"Mean revenue for a film belonging to a collection\", tools=[hover1])\np.vbar(x='film_belongs_to_collection', top='revenue', width=0.9, source=t, legend='film_belongs_to_collection',\n       line_color='white', fill_color='color')\n\np.xgrid.grid_line_color = None\np.legend.orientation = \"horizontal\"\np.legend.location = 'top_left'\n\nshow(p)","01a04c39":"# feature engeneering : Film that belongs_to_collection \ntrain['film_belongs_to_collection'] = train['belongs_to_collection'].apply(lambda x: 0 if x == {} else 1)\ntest['film_belongs_to_collection'] = test['belongs_to_collection'].apply(lambda x: 0 if x == {} else 1)","9dacd2b8":"t = train[['id','revenue', 'title', 'genres']].copy()\nt['genres'] = [[y['name'] for y in x] for x in t['genres']]\n\ngenres = t['genres'].sum()\nctr = Counter(genres)\ndf_genres = pd.DataFrame.from_dict(ctr, orient='index').reset_index().rename(columns={'index':'genre', 0:'count'})       \ndf_genres=df_genres.sort_values('count', ascending=False)\ndf_genres = df_genres[df_genres['count'] > 1]\ndf_genres = df_genres.nlargest(20, 'count')\n\n\ngenres = list(df_genres['genre'])\n\ndic={}\nfor a in genres:\n    mask = t.genres.apply(lambda x: a in x)\n    dic[a] = t[mask]['revenue'].mean()\n\nt = pd.DataFrame.from_dict(dic, orient='index', columns=['mean_revenue']).reset_index().rename(columns={'index':'genre'})\n\nt['color'] = Category20c[len(t)]\n\nhover1 = HoverTool(tooltips = [\n            ('Genre','@genre'),\n            ('Genre mean revenue','@mean_revenue')\n           ])\n\np = figure(x_range=t.genre, plot_width=1400,plot_height=400, toolbar_location=None, title=\"Mean revenue per genre\", tools=[hover1])\np.vbar(x='genre', top='mean_revenue', width=0.9, source=t, legend='genre',\n       line_color='white', fill_color='color')\n\np.xgrid.grid_line_color = None\np.legend.orientation = \"horizontal\"\np.legend.location = \"top_center\"\n\nshow(p)\n","08b94cfe":"t = train[['id','revenue', 'genres']]\nx = [[y['name'] for y in x] for x in t['genres']]\nx = Counter(pd.DataFrame(x).stack())\nx = pd.Series(x)\n\n\ndata = x.reset_index(name='value').rename(columns={'index':'genre'})\ndata['angle'] = data['value']\/data['value'].sum() * 2*np.pi\ndata['color'] = Category20c[len(x)]\n\np = figure(plot_height=350, title=\"Number of movies per genres\", toolbar_location=None,\n           tools=\"hover\", tooltips=\"@genre: @value\", x_range=(-0.5, 1.0))\n\np.wedge(x=0, y=1, radius=0.4,\n        start_angle=cumsum('angle', include_zero=True), end_angle=cumsum('angle'),\n        line_color=\"white\", fill_color='color', legend='genre', source=data)\n\np.axis.axis_label=None\np.axis.visible=False\np.grid.grid_line_color = None\n\nshow(p)","8d891def":"train['genres_names'] = [[y['name'] for y in x] for x in train['genres']]\n\n# genres = train['genres_names'].sum()\n# ctr = Counter(genres)\n# genres=[n for n in ctr if ctr[n] > 249]\n# genres_list = pd.Series(genres).unique()\n\ngenres_list=['Action', 'Adventure', 'Science Fiction', 'Family', 'Fantasy','Animation']\n        \nfor a in genres_list :\n    train['genre_'+a]=train['genres_names'].apply(lambda x: 1 if a in x else 0)\ntrain = train.drop(['genres_names'], axis=1)\n\ntest['genres_names'] = [[y['name'] for y in x] for x in test['genres']]\nfor a in genres_list :\n    test['genre_'+a]=test['genres_names'].apply(lambda x: 1 if a in x else 0)\ntest = test.drop(['genres_names'], axis=1)","172674fd":"# feature engeneering : release date \ndef date_features(df):\n    df[['release_month','release_day','release_year']]=df['release_date'].str.split('\/',expand=True).replace(np.nan, 0).astype(int)\n    df['release_year'] = df['release_year']\n    df.loc[ (df['release_year'] <= 18) & (df['release_year'] < 100), \"release_year\"] += 2000\n    df.loc[ (df['release_year'] > 18)  & (df['release_year'] < 100), \"release_year\"] += 1900\n    df['release_date'] = pd.to_datetime(df['release_date'])\n    df['release_month'] = df['release_date'].dt.month\n    # df['release_day'] = df['release_date'].dt.day\n    df['release_quarter'] = df['release_date'].dt.quarter\n    df.drop(columns=['release_date'], inplace=True)\n    \n    return df\n\ntrain=date_features(train)\ntest=date_features(test)","a0225168":"# mean revenue per year \n\nt = train[['id','revenue','release_year']].copy()\n\nt = t.groupby('release_year')['revenue'].aggregate('mean')\nt=np.log1p(t)\n\nhover = HoverTool(tooltips = [\n            ('Year','@x'),\n            ('Revenue','@top')\n           ])\n\n\nfig = figure(plot_height=400,\n             plot_width=600,\n             x_axis_label='Year',\n             y_axis_label='Mean revenue',\n             title='Log mean revenue for each year',\n             tools = [hover])\n\n\nfig.vbar(x=t.index,\n           top=t.values, \n           width=0.9,\n           color='royalblue')\n\nshow(fig)","abb4f68d":"# mean revenue per month \n\nt = train[['id','revenue', 'release_month']]\nmonths_mean_revenues = t.groupby('release_month')['revenue'].aggregate('mean')\n\n\nhover1 = HoverTool(tooltips = [\n            ('Month','@x'),\n            ('Revenue','@top')\n           ])\n\n\nfig = figure(plot_height=400,\n             plot_width=600,\n             x_axis_label='Month',\n             y_axis_label='Mean revenue',\n             title='Mean revenue for each months',\n             tools = [hover1])\n\n\nfig.vbar(x=months_mean_revenues.index,\n           top=months_mean_revenues.values, \n           width=0.9,\n           color='royalblue')\n\n\n\nshow(fig)","6386cd4a":"# mean revenue per month \n\nt = train[['id','revenue', 'release_quarter']]\nquarters_mean_revenues = t.groupby('release_quarter')['revenue'].aggregate('mean')\n\nhover1 = HoverTool(tooltips = [\n            ('Quarter','@x'),\n            ('Revenue','@top')\n           ])\n\n\nfig = figure(plot_height=400,\n             plot_width=600,\n             x_axis_label='Quarter',\n             y_axis_label='Mean revenue',\n             title='Mean revenue for each quarter',\n             tools = [hover1])\n\n\nfig.vbar(x=quarters_mean_revenues.index,\n           top=quarters_mean_revenues.values, \n           width=0.9,\n           color='royalblue')\n\n\n\nshow(fig)","a2dba35f":"# feature engeneering : Release date per month one hot encoding\nfor col in range (1,12) :\n    train['month'+str(col)] = train['release_month'].apply(lambda x: 1 if x == col else 0)\n\nfor col in range (1,12) :\n    test['month'+str(col)] = test['release_month'].apply(lambda x: 1 if x == col else 0)\n    \n# feature engeneering : Release date per quarter one hot encoding\nfor col in range (1,4) :\n    train['quarter'+str(col)] = train['release_quarter'].apply(lambda x: 1 if x == col else 0)\n\nfor col in range (1,4) :\n    test['quarter'+str(col)] = test['release_quarter'].apply(lambda x: 1 if x == col else 0)\n\n","38818979":"# # feature engeneering : Release date per months mean revenues\n# train['months_mean_revenue'] = train['release_month'].apply(lambda x: months_mean_revenues[x])\n# train['quarter_mean_revenue'] = train['release_quarter'].apply(lambda x: quarters_mean_revenues[x])\n\n# test['release_quarter'].fillna(0, inplace=True)\n# test['release_month'].fillna(0,inplace=True)\n\n# # feature engeneering : Release date per quarter mean revenues\n# test['months_mean_revenue'] = test['release_month'].apply(lambda x: months_mean_revenues[x] if x > 0 else 0)\n# test['quarter_mean_revenue'] = test['release_quarter'].apply(lambda x: quarters_mean_revenues[x] if x > 0 else 0)","ee892e74":"# mean revenue per quarter for animation movies \n\nt = train[['id','revenue', 'title', 'genres', 'release_quarter']].copy()\nt['genres'] = [[y['name'] for y in x] for x in t['genres']]\nmask = t.genres.apply(lambda x: 'Animation' in x)\nt = t[mask]\nt = t.groupby('release_quarter')['revenue'].aggregate('mean')\n\n\nhover1 = HoverTool(tooltips = [\n            ('Quarter','@x'),\n            ('Revenue','@top')\n           ])\n\n\nfig = figure(plot_height=400,\n             plot_width=600,\n             x_axis_label='Quarter',\n             y_axis_label='Mean revenue',\n             title='Mean revenue for each quarter for animation movies',\n             tools = [hover1])\n\n\nfig.vbar(x=t.index,\n           top=t.values, \n           width=0.9,\n           color='royalblue')\n\n\n\nshow(fig)\n","41b51c06":"# mean revenue per quarter for drama movies \n\nt = train[['id','revenue', 'title', 'genres', 'release_month']].copy()\nt['genres'] = t['genres'].apply(lambda x: [y['name'] for y in x])\nmask = t.genres.apply(lambda x: 'Drama' in x)\nt = t[mask]\nt = t.groupby('release_month')['revenue'].aggregate('mean')\n\n\nhover1 = HoverTool(tooltips = [\n            ('Quarter','@x'),\n            ('Revenue','@top')\n           ])\n\n\nfig = figure(plot_height=400,\n             plot_width=600,\n             x_axis_label='Month',\n             y_axis_label='Mean revenue',\n             title='Mean revenue for each month for drama movies',\n             tools = [hover1])\n\n\nfig.vbar(x=t.index,\n           top=t.values, \n           width=0.9,\n           color='royalblue')\n\n\n\nshow(fig)\n","af85e785":"train = train.drop(['release_month', 'release_quarter'], axis=1)\ntest = test.drop(['release_month', 'release_quarter'], axis=1)","54df7aa6":"t = train[['id','revenue', 'title', 'cast']].copy()\nt['cast'] = [[y['name'] for y in x] for x in t['cast']]\nt['cast'] = t['cast'].apply(lambda x: x[:3])\n\nnames = t['cast'].sum()\nctr = Counter(names)\ndf_names = pd.DataFrame.from_dict(ctr, orient='index').reset_index().rename(columns={'index':'actor', 0:'count'})       \ndf_names=df_names.sort_values('count', ascending=False)\ndf_names = df_names[df_names['count'] > 8]\n \np = figure(plot_width=1300, plot_height=500, title=\"Most common actors\",\n           x_range=df_names['actor'], toolbar_location=None, tooltips=[(\"Actor\", \"@actor\"), (\"Count\", \"@count\")])\n\np.vbar(x='actor', top='count', width=1, source=df_names,\n       line_color=\"white\" )\n\np.y_range.start = 0\np.x_range.range_padding = 0.05\np.xgrid.grid_line_color = None\np.xaxis.axis_label = \"Actors name\"\np.xaxis.major_label_orientation = 1.2\np.outline_line_color = None\n\nshow(p)","4b85aecb":"t = train[['id','revenue', 'title', 'cast']].copy()\nt['cast'] = [[y['name'] for y in x] for x in t['cast']]\nt['cast'] = t['cast'].apply(lambda x: x[:3])\n\ndf_names_revenue = df_names.nlargest(20, 'count')\nnames = list(df_names_revenue['actor'])\n\ndic={}\nfor a in names:\n    mask = t.cast.apply(lambda x: a in x)\n    dic[a] = t[mask]['revenue'].mean()\n\nt = pd.DataFrame.from_dict(dic, orient='index', columns=['mean_revenue']).reset_index().rename(columns={'index':'actor'})\n\nt = t.nlargest(20, 'mean_revenue')\n\nt['color'] = Category20c[20]\n\nhover1 = HoverTool(tooltips = [\n            ('Actor','@actor'),\n            ('Movies mean revenue','@mean_revenue')\n           ])\n\np = figure(x_range=t.actor, plot_width=1400,plot_height=400, toolbar_location=None, title=\"20 most common actors movies mean revenue\", tools=[hover1])\np.vbar(x='actor', top='mean_revenue', width=0.9, source=t, legend='actor',\n       line_color='white', fill_color='color')\n\np.xgrid.grid_line_color = None\np.legend.orientation = \"horizontal\"\np.legend.location = \"top_center\"\n\nshow(p)\n","c8f56b0e":"df_names = df_names[df_names['count'] > 11]\nnames_list = list(df_names['actor'])\n\ntrain['cast_names']=[[y['name'] for y in x] for x in train['cast']]\ntrain['cast_names'] = train['cast_names'].apply(lambda x: x[:3])\n\ndic={}\nfor a in names_list:\n    mask = train['cast_names'].apply(lambda x: a in x)\n    dic[a] = train[mask]['revenue'].mean()\n\nactors_mean_revenue = pd.DataFrame.from_dict(dic, orient='index', columns=['mean_revenue']).reset_index().rename(columns={'index':'actor'})\nnames_list = list(actors_mean_revenue.nlargest(40, 'mean_revenue')['actor'])\n\ntrain['actors_mean_revenue'] = train['cast_names'].apply(lambda x: actors_mean_revenue[actors_mean_revenue['actor'].isin(x)].mean()['mean_revenue'])\ntrain['actors_mean_revenue'].fillna(0,inplace=True)\n\n\ntrain['total_top_actors_revenue']=train['cast_names'].apply(lambda x: sum([1 for i in x if i in names_list]))\n# for a in names_list :\n#     train['actor_'+a]=train['cast_names'].apply(lambda x: 1 if a in x else 0)\ntrain = train.drop(['cast_names'], axis=1)\n\ntest['cast_names']=[[y['name'] for y in x] for x in test['cast']]\ntest['cast_names'] = test['cast_names'].apply(lambda x: x[:3])\n\ntest['actors_mean_revenue'] = test['cast_names'].apply(lambda x: actors_mean_revenue[actors_mean_revenue['actor'].isin(x)].mean()['mean_revenue'])\ntest['actors_mean_revenue'].fillna(0,inplace=True)\n\ntest['total_top_actors_revenue']=test['cast_names'].apply(lambda x: sum([1 for i in x if i in names_list]))\n\n# for a in names_list :\n#     test['actor_'+a]=test['cast_names'].apply(lambda x: 1 if a in x else 0)\ntest = test.drop(['cast_names'], axis=1)\n","e3aa7b42":"t = train[['id','revenue', 'title', 'cast']].copy()\nt['cast'] = [[y['name'] for y in x] for x in t['cast']]\nt['cast'] = t['cast'].apply(lambda x: x[:3])\n\nnames = t['cast'].sum()\nctr = Counter(names)\nnames=[n for n in ctr if ctr[n] > 0]\nunique_names = pd.Series(names).unique()\n\ndic={}\nfor a in unique_names:\n    mask = t.cast.apply(lambda x: a in x)\n    dic[a] = t[mask]['revenue'].mean()\n\nactors_mean_revenue = pd.DataFrame.from_dict(dic, orient='index', columns=['mean_revenue']).reset_index().rename(columns={'index':'actor'})\n\nt = actors_mean_revenue.nlargest(20, 'mean_revenue')\n\nt['color'] = Category20c[20]\n\nhover1 = HoverTool(tooltips = [\n            ('Actor','@actor'),\n            ('Revenue','@mean_revenue')\n           ])\n\np = figure(x_range=t.actor, plot_width=1400,plot_height=400, toolbar_location=None, title=\"20 actors with highest mean revenue\", tools=[hover1])\np.vbar(x='actor', top='mean_revenue', width=0.9, source=t, legend='actor',\n       line_color='white', fill_color='color')\n\np.xgrid.grid_line_color = None\np.legend.orientation = \"horizontal\"\np.legend.location = \"top_center\"\n\nshow(p)\n","892717a7":"t = train[['id','popularity', 'title', 'cast']].copy()\nt['popularity'] = np.expm1(t['popularity'])\nt['cast'] = [[y['name'] for y in x] for x in t['cast']]\nt['cast'] = t['cast'].apply(lambda x: x[:3])\n\nnames = t['cast'].sum()\nctr = Counter(names)\nnames=[n for n in ctr if ctr[n] > 0]\nunique_names = pd.Series(names).unique()\n\ndic={}\nfor a in unique_names:\n    mask = t.cast.apply(lambda x: a in x)\n    dic[a] = t[mask]['popularity'].mean()\n\nt = pd.DataFrame.from_dict(dic, orient='index', columns=['mean_revenue']).reset_index().rename(columns={'index':'actor'})\n\nt = t.nlargest(20, 'mean_revenue')\n\nt['color'] = Category20c[20]\n\nhover1 = HoverTool(tooltips = [\n            ('Actor','@actor'),\n            ('Revenue','@mean_revenue')\n           ])\n\np = figure(x_range=t.actor, plot_width=1400,plot_height=400, toolbar_location=None, title=\"20 actors with highest mean popularity\", tools=[hover1])\np.vbar(x='actor', top='mean_revenue', width=0.9, source=t, legend='actor',\n       line_color='white', fill_color='color')\n\np.xgrid.grid_line_color = None\np.legend.orientation = \"horizontal\"\np.legend.location = \"top_center\"\n\nshow(p)","d7ab8651":"t = train[['id','revenue', 'title', 'cast']].copy()\n\nt['cast_ids']=[[y['id'] for y in x] for x in t['cast']]\nt['cast_ids'] = t['cast_ids'].apply(lambda x: x[:3])\nt['nominations'] = t['cast_ids'].apply(lambda x: nominations[nominations['id'].isin(x)]['nominations'].sum())\nt=t.drop(['cast'], axis=1)\n\nhover1 = HoverTool(tooltips = [\n            ('Titre','@title'),\n            ('Revenue','@revenue'),\n            ('Nominations','@nominations')\n           ])\n\n\nfig = figure(x_axis_label='Nominations for all main actors',\n             y_axis_label='Revenue',\n             title='Nominations vs. Revenue',\n            tools=[hover1])\n\n\nfig.square(x='nominations',\n           y='revenue',\n          source=t)\n\nshow(fig)","bf390cd6":"t = train[['id','revenue', 'title', 'cast']].copy()\n\nt['cast_ids']=[[y['id'] for y in x] for x in t['cast']]\nt['cast_ids'] = t['cast_ids'].apply(lambda x: x[:3])\nt['nominations'] = t['cast_ids'].apply(lambda x: 'True' if (nominations[nominations['id'].isin(x)]['nominations'] != 0).any() else 'False')\ndf_has_nominated_actor=t.drop(['cast', 'id'], axis=1)\nt = df_has_nominated_actor.groupby('nominations')['revenue'].mean().reset_index()\nhover1 = HoverTool(tooltips = [\n            ('Mean revenue','@revenue'),\n           ])\n\nt['color'] = [Spectral6[1],Spectral6[2]]\n\np = figure(x_range=['False', 'True'], plot_width=400,plot_height=400, toolbar_location=None, title=\"Has a nominated actor\", tools=[hover1])\np.vbar(x='nominations', top='revenue', width=0.9, source=t, legend='nominations',\n       line_color='white', fill_color='color')\n\np.xgrid.grid_line_color = None\np.legend.orientation = \"horizontal\"\np.legend.location = \"top_center\"\n\nshow(p)","ff45f4a8":"t = train[['id','revenue', 'title', 'cast']].copy()\n\nt['cast_ids']=[[y['id'] for y in x] for x in t['cast']]\nt['cast_ids'] = t['cast_ids'].apply(lambda x: x[:6])\nt['nominations'] = t['cast_ids'].apply(lambda x: str((nominations[nominations['id'].isin(x)]['nominations'] != 0).sum()))\nt=t.drop(['cast'], axis=1)\nt = t.groupby('nominations')['revenue'].mean().reset_index()\n\nhover1 = HoverTool(tooltips = [\n            ('Mean revenue','@revenue'),\n           ])\n\n\nt['color'] = Spectral6+[Spectral6[1]]\n\np = figure(x_range=['0','1','2','3','4','5', '6'], plot_width=500,plot_height=400, toolbar_location=None, title=\"Revenue vs. number of nominated actors\", tools=[hover1])\np.vbar(x='nominations', top='revenue', width=0.9, source=t, legend='nominations',\n       line_color='white', fill_color='color')\n\np.xgrid.grid_line_color = None\np.legend.location='top_left'\n\nshow(p)\n","e8ce235c":"df_has_nominated_actor['nominations'] = df_has_nominated_actor['nominations'].apply(lambda x: 1 if x == 'True' else 0)\ntrain['has_nominated_actor'] = df_has_nominated_actor['nominations']\n\n\ntest['cast_ids']=[[y['id'] for y in x] for x in test['cast']]\ntest['cast_ids'] = test['cast_ids'].apply(lambda x: x[:3])\ntest['has_nominated_actor'] = test['cast_ids'].apply(lambda x: 0 if (nominations[nominations['id'].isin(x)]['nominations'] != 0).any() else 1)\ntest = test.drop(['cast_ids'], axis=1)\n\n\ntrain['cast_ids']=[[y['id'] for y in x] for x in train['cast']]\ntrain['cast_ids'] = train['cast_ids'].apply(lambda x: x[:4])\ntrain['nominated_actors'] = train['cast_ids'].apply(lambda x: (nominations[nominations['id'].isin(x)]['nominations'] != 0).sum())\n\ntest['cast_ids']=[[y['id'] for y in x] for x in test['cast']]\ntest['cast_ids'] = test['cast_ids'].apply(lambda x: x[:4])\ntest['nominated_actors'] = test['cast_ids'].apply(lambda x: (nominations[nominations['id'].isin(x)]['nominations'] != 0).sum())\n","647e841e":"t = train[['id','revenue', 'title', 'crew']].copy()\nt['crew'] = [[y['name'] for y in x if y['department']=='Directing'] for x in t['crew'] ]\nt['crew'] = t['crew'].apply(lambda x: x[:3])\n\nnames = t['crew'].sum()\nctr = Counter(names)\ndf_names = pd.DataFrame.from_dict(ctr, orient='index').reset_index().rename(columns={'index':'actor', 0:'count'})       \ndf_names=df_names.sort_values('count', ascending=False)\ndf_names = df_names[df_names['count'] > 4]\n \np = figure(plot_width=1300, plot_height=500, title=\"Most common directors\",\n           x_range=df_names['actor'], toolbar_location=None, tooltips=[(\"Director\", \"@actor\"), (\"Count\", \"@count\")])\n\np.vbar(x='actor', top='count', width=1, source=df_names,\n       line_color=\"white\" )\n\np.y_range.start = 0\np.x_range.range_padding = 0.05\np.xgrid.grid_line_color = None\np.xaxis.axis_label = \"Director names\"\np.xaxis.major_label_orientation = 1.2\np.outline_line_color = None\n\nshow(p)","e82cc6fa":"df_names = df_names[df_names['count'] > 10]\nnames_list = list(df_names['actor'])\n\ntrain['crew_names'] = [[y['name'] for y in x if y['department']=='Directing'] for x in train['crew'] ]\ntrain['crew_names'] = train['crew_names'].apply(lambda x: x[:3])\n\ndic={}\nfor a in names_list:\n    mask = train['crew_names'].apply(lambda x: a in x)\n    dic[a] = train[mask]['revenue'].mean()\n\ndirectors_mean_revenue = pd.DataFrame.from_dict(dic, orient='index', columns=['mean_revenue']).reset_index().rename(columns={'index':'director'})\n\nnames_list = list(directors_mean_revenue.nlargest(40, 'mean_revenue')['director'])\n\n# train['total_top_actors_revenue']=train['cast_names'].apply(lambda x: sum([1 for i in x if i in names_list]))\n\nfor a in names_list :\n    train['director_'+a]=train['crew_names'].apply(lambda x: 1 if a in x else 0)\ntrain = train.drop(['crew_names'], axis=1)\n\ntest['crew_names'] = [[y['name'] for y in x if y['department']=='Directing'] for x in test['crew'] ]\ntest['crew_names'] = test['crew_names'].apply(lambda x: x[:3])\nfor a in names_list :\n    test['director_'+a]=test['crew_names'].apply(lambda x: 1 if a in x else 0)\ntest = test.drop(['crew_names'], axis=1)\n","226124a8":"t = train[['id','revenue', 'title', 'production_companies']].copy()\nt['production_companies'] = [[y['name'] for y in x] for x in t['production_companies'] ]\nt['production_companies'] = t['production_companies'].apply(lambda x: x[:3])\n\nnames = t['production_companies'].sum()\nctr = Counter(names)\ndf_names = pd.DataFrame.from_dict(ctr, orient='index').reset_index().rename(columns={'index':'actor', 0:'count'})       \ndf_names=df_names.sort_values('count', ascending=False)\ndf_names = df_names[df_names['count'] > 9]\n \np = figure(plot_width=1300, plot_height=500, title=\"Number of movies per production company\",\n           x_range=df_names['actor'], toolbar_location=None, tooltips=[(\"Company\", \"@actor\"), (\"Count\", \"@count\")])\n\np.vbar(x='actor', top='count', width=1, source=df_names,\n       line_color=\"white\" )\n\np.y_range.start = 0\np.x_range.range_padding = 0.05\np.xgrid.grid_line_color = None\np.xaxis.axis_label = \"Production company\"\np.xaxis.major_label_orientation = 1.2\np.outline_line_color = None\n\nshow(p)","405b5105":"df_names = df_names[df_names['count'] > 9]\nnames_list = list(df_names['actor'])\n\ntrain['production_companies'] = [[y['name'] for y in x] for x in train['production_companies'] ]\ntrain['production_companies'] = train['production_companies'].apply(lambda x: x[:3])\n\ndic={}\nfor a in names_list:\n    mask = train['production_companies'].apply(lambda x: a in x)\n    dic[a] = train[mask]['revenue'].mean()\n\ncompanies_mean_revenue = pd.DataFrame.from_dict(dic, orient='index', columns=['mean_revenue']).reset_index().rename(columns={'index':'company'})\n\nnames_list = list(companies_mean_revenue.nlargest(20, 'mean_revenue')['company'])\n\n# train['total_top_companies']=train['production_companies'].apply(lambda x: sum([1 for i in x if i in names_list]))\nfor a in names_list :\n    train['production_'+a]=train['production_companies'].apply(lambda x: 1 if a in x else 0)\ntrain = train.drop(['production_companies'], axis=1)\n\ntest['production_companies'] = [[y['name'] for y in x] for x in test['production_companies'] ]\ntest['production_companies'] = test['production_companies'].apply(lambda x: x[:3])\n# test['total_top_companies']=test['production_companies'].apply(lambda x: sum([1 for i in x if i in names_list]))\n\nfor a in names_list :\n    test['production_'+a]=test['production_companies'].apply(lambda x: 1 if a in x else 0)\ntest = test.drop(['production_companies'], axis=1)","367684f2":"# Create target object and call it y\ny = np.log1p(train.revenue)","6e4eef7a":"# Create X\nX = train.drop(['id','runtime', 'release_day'], axis=1)\n\ntest_X = test.drop(['id','runtime', 'release_day'], axis=1).select_dtypes(exclude=['object'])\n\n    \n# Split into validation and training data\ntrain_X, val_X, train_y, val_y = train_test_split(X, y, random_state=1,test_size=0.33)\n\ntrain_X=train_X.drop(['revenue'], axis=1).select_dtypes(exclude=['object'])\nX=X.drop(['revenue'], axis=1).select_dtypes(exclude=['object'])\nval_X_revenue=val_X.pop('revenue')\nval_X_title=val_X.pop('title')\nval_X=val_X.select_dtypes(exclude=['object'])\n\nxgb_model = XGBRegressor(learning_rate=0.05, \n                            n_estimators=10000,max_depth=4)\nxgb_model.fit(train_X, train_y, early_stopping_rounds=100, \n             eval_set=[(val_X, val_y)], eval_metric = 'rmse')\nxbg_val_predictions=xgb_model.predict(val_X)\n","606fb516":"df=val_X.reset_index().join(pd.DataFrame(np.expm1(xbg_val_predictions)).rename(columns={0:'prediction'}))\ndf=df.join(val_X_revenue.reset_index()['revenue'])\ndf=df.join(val_X_title.reset_index()['title'])\ndf_x=df[['revenue','prediction', 'title']]\n\nhover1 = HoverTool(tooltips = [\n            ('Titre','@title'),\n            ('Revenue','@revenue'),\n            ('Prediction','@prediction')\n           ])\n\n\nfig = figure(x_axis_label='Revenue',\n             y_axis_label='prediction',\n             title='Revenue vs. Prediction',\n            tools=[hover1])\n\n\nfig.square(x='revenue',\n           y='prediction',\n          source=df_x)\n\nshow(fig)\n\nfig, ax = plt.subplots(figsize=(15, 13))\nplot_importance(xgb_model, ax=ax)\nplt.show()","e71611cb":"df_a=df_x[df_x['title']=='Top Gun']\ndf_a=df_a.append(df_x[df_x['title']=='Tomorrowland'])\ndf_x=df_a.append(df_x[df_x['title']=='Rambo III'])\n\nfig = figure(x_axis_label='Revenue',\n             y_axis_label='prediction',\n             title='Revenue vs. Prediction',\n            tools=[hover1])\n\nfig.square(x='revenue',\n           y='prediction',\n          source=df_x)\n\nshow(fig)","af49f3d9":"xgb_model_full = XGBRegressor(n_estimators=145, learning_rate=0.05,max_depth=4)\nxgb_model_full.fit(X, y)\n\n\ntest_preds=xgb_model_full.predict(test_X)\n\noutput = pd.DataFrame({'id': test.id,\n                       'revenue': np.expm1(test_preds)})\noutput.to_csv('submission.csv', index=False)","4dee6ba8":"This plot shows that it's not because an actor makes a lot of movie that his movies revenue will be high. For example, Robert De Niro is the most common actor with 25 movies, but he is only at the 18th position in this plot.\n\nTo make sure we have enough examples, we will take only the actors that played in at least 12 movies for the features. We will make a feature with how many actors are in the top 40 with highest revenue for each movie.","bec612ec":"On average, a movie containing at least one nominated actor has almost twice the revenue of a movie without any nominated actor.","2c110ea9":"Belongs to collection : we think that a film about to hit the cinema screen that belongs to a collection might affect his revenue. A plot for the revenue per film belonging to collection might help to answer our doubt.","5ce24d0d":"We can also add a column with the mean revenue for the month and quarter of release","5ff0c200":"6 genres seem above the others.\nTo make sure they have enough data, we can plot the number of movies per genre.","28eb19b6":"The mean revenue is similar to the on of all the movies, so we won't be using this.\n\nLet's check for a genre with more data, like Drama.","c2bcb3b4":"The pattern shows that the bigger the budget, the better the revenue. We can clearly use this as a feature. No need to do anything as it is already a numeric value with magnitude. All we did was to convert the value in log1p to get a smaller range.","362e4ae0":"Are some genres more popular in certain months?\nAnimations movies may be more popular in december because \n\nWe have only 141 animation movies which is not enough to check the revenue for each month and have reliable data, so we do it by quarter","bd21faca":"The second quarter is the most profitable.\n\nWe see that the revenue does depend on the release month and quarter. We can had both of these informations as features with a one hot encoding:","760f1dad":"Is having a website a good thing ? Let's have a look :","0c95c521":"<h2>Budget<\/h2>","9b391ddb":"<a id=\"3\"><\/a>\n<h1>Conclusion<\/h1>","22512adc":"Let's look at the mean revenue for the movies the 20 most common actors played in.","10a29647":"<h2>Actors<\/h2>","e1c0e82e":"<h2>Revenue<\/h2>","46bb0db5":"We can see that english and chinese movies usually have a better mean revenue.","2cdfba6b":"We collected the actors awards data from IMDB and created a CSV file (nominations.csv) containing the number of Oscars and Golden Globes nominations for each actors.\nWe can plot the number of nominations for each movie and see if it affects a movie revenue.","72265a94":"<h2>External data<\/h2>","394743b3":"<h2>Genres<\/h2>","8ffbb785":"<a id=\"0\"><\/a>\n<h1>Loading data<\/h1>","719d4793":"We will compare the budget to the revenue to see if they are correlated.","aff067d4":"<a id=\"1\"><\/a>\n<h1>Data analysis and features<\/h1>","75d14f17":"<h2>Collection<\/h2>","f3b13845":"We can try to see if on average, a movie featuring at least one nominated actor has a higher budget.","3b9017e7":"<h3>Actors awards nominations<\/h3>","0c038f37":"<h2>Runtime<\/h2>","9caedc1a":"Like for the directors, we will create a one hot encoded feature with the 20 highest mean revenue production companies.","7b9c72c0":"Genres preferences for a movie is really subjective, but we can still try to see if some are more popular than others.\nLet's plot the mean revenue for each genre.","1f7620cc":"<h2>Directors<\/h2>","5d7d6a9f":"Let's have a look at the films' revenues.","c07f08cc":"Drama movies are a bit more popular in december but the rest is also similar to the other movies.\nIf there had been a bigger difference, we could have made a one hot encoding for the release month based on the genre of the movie, but it's not the case.\n\nNow we need to drop the *\"release_month\"* and *\"release_quarter\"* because we don't need them anymore.","240b85ae":"<h2>Original language<\/h2>","e21602a3":"Conceptualizing and measuring popularity : We think an accurate way to measure popularity might be the number of results that we get from a google search for a specific movie's title. So we decided to create a script to collect the number of results for each movie title. We aggregate the word 'movie' to the tilte for better result.","41d70b97":"<h2>Predictions<\/h2>","d48a892e":"<h4>Actors awards nominations<\/h4>","3bc41ff0":"Let's see which companies make the most movies.","6b699c55":"Let's have a look at the runtime of each film to see if we find a specific pattern.","c146bacd":"Because certain columns contain a dictionary but are loaded as a string from the CSV file, we need to transform them back into a dictionary.","129d4f5c":"<h2>Google search results<\/h2>","bc5f2ea3":"We can see that most of these actors are not really popular, because they only played in one movie that worked well, so this information is not usable because those are exceptions and it doesn't mean that the next movie they will play in will work as well.\n\nThe same thing can be said if we plot the 20 actors with the highest mean popularity of their movies.","54e0b26f":"Feature engineering : one hot encoding for original languages that have at least 5 samples","1af8c315":"We learned a lot from this project and we have a lot of room for improvements.\nA lot of features we thought would work well didn't reach our expectations, for example the use of the external data from IMDB for the awards or the google search results.\n\nThere's a lot of data we didn't use, by lack of time, which could improve our results. We mainly ignored the columns containing text, like the title or the overview, because they require a completely different approach and we decided to focus first on the other types of data. We did try to create a word vectorization with a neural network with keras and tensorflow, but we decided to stop because it was taking us too much time and we weren't sure the result would be worth it.\n\n\n\n\n\n","5b1a406b":"In this section, we will only consider the first 3 actors for each movies because we assume they are the main characters, thus they are the one that will influence the movie popularity the most.\n\nActors are one of the first thing people will look at to decide if they will go see a movie or not. We can see which actors are the most known by plotting the number of movies they made.","cebe20cd":"<h2>Popularity<\/h2>","5763a7b7":"We can see that June is the month where movies have a higher revenue on average, while movies releasing in january and from august to october usually have a lower revenue.","204526fd":"As we thought, this feature could really help our model as the revenue is much bigger when a film belongs to a collection. We implement it as a one hot encoded feature.","08f2bac7":"<h2>Release date<\/h2>","62feabc1":"We thought that this data would be a better indication of the revenue, but we can still use it. ","12ac0bb1":"<h3>Google search results<\/h3>","3abdcfa8":"Drama is the most common genre, and we see from the previous plot that it doesn't mean it generates a big revenue.\n\nWe can use a one hot encoding on the genres. We will only consider the 6 genres with a higher mean revenue.","a0b12300":"Does the release date have an influence on the revenue of a movie? \nFirst, we need to transform the data in the *\"release_date\"* column into DateTime format. We'll need to fix the year because we have some 4 digit format ie \"2013\" and some 2 digit format ie \"98\".","86809118":"<h1>Introduction<\/h1>","554cae5e":"Like we said in the introduction, we think the popularity of a movie is one of the main reason people go to see it. Let's check if we were right.","b2ecc3df":"Then we will plot the revenue versus the number of search results.","233b2a34":"We can't find a specify pattern to use it as a feature. Let's try something with categories.","bdde3850":"We see some values at \"0\", we might need to do something to it. We think that a film that is more than 2:30min might have less success at the box office.\n\nWhat are the average revenue of films with a runtime of 150 and more ?","0b889599":"<h2>Production companies<\/h2>","f4aa1b7c":"Welcome to our kernel notebook. We are two students in computer science and we are thrilled to present to all the kaggle community our first data science project. Through this kernel, we want to share with you our analysis and methodology.\nHere, we are working with data from TMDB Box Office Prediction Challenge. Thanks to loads of available data, we will try to predict the revenue for movies' world wide box office before their release. \nWhat is the best model which will be able to accurately predict film revenues? Could this model be used to make some changes in movies to increase their revenues even further? \n\nCompetition's informations :\nWe'll be using 3000 films from The Movie Database to train our model, then when we will predict 4000 movies' worldwide box office revenue. \n\n\n**Table of content**\n1. [Loading data](#0)\n2. [Data analysis and features (EDA)](#1)\n3. [Model](#2)\n4. [Conclusion](#3)\n\n\n\n","e676c17d":"We will plot the mean revenue for each months to determine which are the most profitable.","df5b5c4c":"Let's convert the budget value in log1p value and compare budget vs revenue :\n\nWe can clearly see that if we categorise films per runtime, there are some differences of mean revenues. Longer films tend to generate a better revenue. We do a one hot encoding with those categories :","ae462c1d":"Which original languages tend to help getting a better revenue ?","9c73b6f6":"Films with a homepage have a slightly better revenue, it might be interesting to use it in our model with a one hot implementation.","dd81d35c":"We can also plot the actors with the highest mean revenue per movie.","8704a16d":"The mean revenue tend to increase each year that goes by. That's why it is important to implement these values in the model. First we'll try to implement for each film the year as it is a numerical value that increases.","ce49a855":"Most of the films have a revenue below 250 000 000 $, which means that the difference between the biggest and the average revenue is far too big. Let's convert the revenue data into a log value.","059a9842":"We also plot the number of nominated actor per movie and see if it affects the mean revenue.","8d430a85":"First, we need to load the data that we got thanks to the script shown earlier.","30f04bba":"This is also very interesting, and should be a good feature. We also converted the popularity value into a log value.","6f58ee1c":"We can also plot the mean revenue by quarter.","cec994ec":"We thought that something important for the success of a movie is the success of its actors. We decided to create a script to get data from IMDB on the actors nominations to the Oscars and Golden globes.","e4d4707a":"<a id=\"2\"><\/a>\n<h1 id=\"2\">Model<\/h1>","e5964193":"<h2>Homepage<\/h2>","91419a77":"As the plot shows, the revenue does not depend on the number of nominations of its actors, probably because some of these movies are old and the nominations data is recent. The actors didn't as much nominations as they have now.","e22d5921":"<h3>Training analysis<\/h3>","1b0e27a0":"To make sure we have enough examples, we will do a one encoding on directors with over 10 movies and highest mean revenue","c3ad8301":"<h2>Training<\/h2>","9977fcdc":"What matter the most in a film to make it successfull ? \nAs spectators, we think the main reasons that make us go see a movie are the actors who play in it, the popularity of the movie and if it is the sequel of a previous movie we saw. But of course these are only from a spectator point of view and they are not the only elements for the success of a movie.\n\nThat's why we need to do some plot to analyse the data.","0f05c665":"Movies with more nominated actor generate a higher revenue on average, but it drops when we start to take the more than the first 4 actors, probably because after 4 the actors don't have an important role in the movie."}}