{"cell_type":{"ea6618d3":"code","e06eaf76":"code","ce765e03":"code","6639b5eb":"code","917857b9":"code","8b0f42db":"code","01ffd037":"code","5f22f80f":"code","6f3320cb":"code","07b4b139":"markdown"},"source":{"ea6618d3":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","e06eaf76":"%%time\n# Import the Rapids suite here - takes abot 2 mins\n\nimport sys\n!cp ..\/input\/rapids\/rapids.0.17.0 \/opt\/conda\/envs\/rapids.tar.gz\n!cd \/opt\/conda\/envs\/ && tar -xzvf rapids.tar.gz > \/dev\/null\nsys.path = [\"\/opt\/conda\/envs\/rapids\/lib\/python3.7\/site-packages\"] + sys.path\nsys.path = [\"\/opt\/conda\/envs\/rapids\/lib\/python3.7\"] + sys.path\nsys.path = [\"\/opt\/conda\/envs\/rapids\/lib\"] + sys.path \n!cp \/opt\/conda\/envs\/rapids\/lib\/libxgboost.so \/opt\/conda\/lib\/","ce765e03":"import gc\nimport sys\nimport random\nfrom tqdm.notebook import * \nimport seaborn as sns\nimport matplotlib.pyplot as plt\nfrom matplotlib.ticker import FuncFormatter\n\n\nimport warnings\npd.set_option('display.max_rows', 500)\npd.set_option('display.max_columns', 500)\npd.set_option('display.width', 500)\nwarnings.simplefilter(\"ignore\")\nwarnings.filterwarnings('ignore')","6639b5eb":"!pip install scikit-allel","917857b9":"import allel\nallel.__version__","8b0f42db":"callset = allel.read_vcf('..\/input\/end-als\/end-als\/genomics-data\/AnswerALS_subset_annovar.hg38_anno_and_geno.no_intergenic.vcf')","01ffd037":"sorted(callset.keys())","5f22f80f":"callset['samples']","6f3320cb":"with open('..\/input\/end-als\/end-als\/genomics-data\/AnswerALS_subset_annovar.hg38_anno_and_geno.no_intergenic.vcf', mode='r') as vcf:\n    print(vcf.read())","07b4b139":"#Trying another way to read the vcf file"}}