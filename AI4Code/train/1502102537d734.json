{"cell_type":{"e6a5f133":"code","976360f1":"code","7f47cb61":"code","24088f05":"code","ee0a19cf":"code","e8072f44":"code","b23bda4e":"code","897af64c":"markdown","859f5b9e":"markdown","9ac1d395":"markdown","01a5bb52":"markdown","494f7711":"markdown","7cbae196":"markdown","0af7ada3":"markdown"},"source":{"e6a5f133":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.model_selection import cross_val_score\nfrom sklearn.metrics import accuracy_score\n\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","976360f1":"df = pd.read_csv(\"..\/input\/digit-recognizer\/train.csv\")\ndf.head()","7f47cb61":"df.size,df.shape","24088f05":"x = df.drop([\"label\"],axis=\"columns\")\ny = df[\"label\"]\n\nprint(x.shape)\nprint(y.shape)","ee0a19cf":"x_train,x_test,y_train,y_test = train_test_split(x,y,test_size=0.2)\nprint(x_train.shape)\nprint(x_test.shape)\nprint(y_train.shape)\nprint(y_test.shape)","e8072f44":"model = RandomForestClassifier(n_estimators=200)\nmodel.fit(x_train,y_train)\nprint(cross_val_score(RandomForestClassifier(n_estimators=200),x_train,y_train))\npred = model.predict(x_test)\nprint(accuracy_score(y_test,pred))","b23bda4e":"test = pd.read_csv(\"..\/input\/digit-recognizer\/test.csv\")\noutput = pd.DataFrame({\"ImageId\":test.index,\"Label\":model.predict(test)})\noutput[\"ImageId\"] += 1\noutput.to_csv(\"digit_recognizer_submission.csv\",index=None)\nprint(\"complete\")","897af64c":"# Reading train_data as df","859f5b9e":"# Building a classifier model","9ac1d395":"# Splitting x and y into training and testing data","01a5bb52":"# Taking x and y [features and target]","494f7711":"# Making Submission file","7cbae196":"# Importing all required libraries","0af7ada3":"# Size and  Shape"}}