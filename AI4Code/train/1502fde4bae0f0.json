{"cell_type":{"73d115b8":"code","42a476dd":"code","06f0a974":"code","d83d5bc8":"code","bec5a669":"code","79fce403":"code","238e0fbc":"code","5d711e32":"code","77546765":"code","1b815c0f":"code","54f7e282":"code","95ccd038":"code","18119de1":"code","6cfec82f":"code","eb83133f":"code","0af118c8":"code","6a81b277":"code","de7e78e3":"code","4b6e39a7":"code","422a68d1":"code","6d8a126a":"code","c1a3c849":"code","41f00c94":"code","0175b5ce":"code","029fd38f":"code","be2945e8":"code","591a2959":"code","7a97aa86":"code","515bfaca":"code","94c993a6":"code","3979c72d":"code","24c0044f":"code","cf4da4ae":"code","2058d0f0":"code","e576b606":"code","01454ad3":"code","3bd3e6a0":"code","8f01da72":"code","2d29bfb8":"code","4a583b90":"code","284fd7bf":"code","179579af":"code","33a1e78a":"code","7748ae81":"code","bf8b0b17":"code","eff2e44b":"code","697aeb4b":"code","c5d727ce":"code","e5964693":"code","e76f1568":"code","7972574d":"code","abfc3ac9":"code","3448da9e":"code","aabb1846":"code","e8fbcfaf":"code","521a4242":"code","e3e7bc8b":"markdown","2a56fa8d":"markdown","339370f8":"markdown","78522d69":"markdown","4e49f539":"markdown","ece1d108":"markdown","35a728b8":"markdown","51f8bcb5":"markdown","a2742980":"markdown","2074855f":"markdown","4c6edac8":"markdown","f04fa496":"markdown","0c1e73ed":"markdown","f98484fb":"markdown","41039edf":"markdown","22f9e9d2":"markdown","59fffbd0":"markdown","4820de73":"markdown","d83dcf9a":"markdown","3d689e77":"markdown","f3f940aa":"markdown","ae33082a":"markdown","d2089144":"markdown","964f261a":"markdown","c9d11498":"markdown","2395e15d":"markdown","5d82e7b0":"markdown","480c56ea":"markdown","8d98813c":"markdown","1030937d":"markdown","b499d71c":"markdown","2752ebf0":"markdown","6eb68efd":"markdown","ce8ab1ea":"markdown","c1fb24d3":"markdown","c5196763":"markdown","e1b6bbaf":"markdown","dac0f322":"markdown","ef9a6493":"markdown","95fb22c2":"markdown","3d5b1f80":"markdown","33d9580e":"markdown","f2d56efc":"markdown","d7fd96fb":"markdown","319ff099":"markdown","5003a1fd":"markdown","91a18aff":"markdown","77b969b5":"markdown","c81f77bd":"markdown","c84180c0":"markdown","a98ff718":"markdown","de23490f":"markdown","0feffdcb":"markdown","d380d9a0":"markdown","836dae36":"markdown","6f2348fe":"markdown"},"source":{"73d115b8":"import os\nimport warnings\n\nimport pandas as pd\nimport numpy as np\n\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom IPython.display import set_matplotlib_formats, display, HTML\n\nimport keras\nfrom keras.models import Sequential\nfrom keras.layers import Dense, Dropout, BatchNormalization\nfrom sklearn.metrics import roc_curve, classification_report\nfrom sklearn.model_selection import RepeatedKFold\nfrom xgboost import XGBClassifier\n\n%matplotlib inline\nwarnings.filterwarnings('ignore')\nplt.style.use('ggplot')\ndefaultcolor = '#4c72b0'\nset_matplotlib_formats('pdf', 'png')\npd.options.display.float_format = '{:.2f}'.format\nrc={'savefig.dpi': 75, 'figure.autolayout': False, 'figure.figsize': [12, 8], 'axes.labelsize': 18,\\\n   'axes.titlesize': 18, 'font.size': 18, 'lines.linewidth': 2.0, 'lines.markersize': 8, 'legend.fontsize': 16,\\\n   'xtick.labelsize': 16, 'ytick.labelsize': 16}\n\nplt.rcParams['image.cmap'] = 'Blues'\n\nsns.set(style='darkgrid',rc=rc)\n\ndata_dir = '..\/input\/' #directory where the dataset is located","42a476dd":"train = pd.read_csv(os.path.join(data_dir, 'train.csv'))\ntest = pd.read_csv(os.path.join(data_dir, 'test.csv'))","06f0a974":"train.head()","d83d5bc8":"train.info()","bec5a669":"train['Survived'].describe()","79fce403":"fig, ax = plt.subplots()\ntrain['Survived'].value_counts().plot.bar(ax=ax)\n\nplt.xticks(rotation=0);\n\nplt.xticks(ticks=[0,1], labels=['Didn\\'t Survived', 'Survived']);\n\nbars = ax.get_children()[:2]\n\nbars[0].set_color('r')\n\nax.hlines(bars[0].get_height(), bars[0].get_x(), bars[1].get_x()+bars[1].get_width(), linestyles='--')\n\nplt.arrow(bars[1].get_x()+bars[1].get_width()\/2, bars[0].get_height(), 0, \n          bars[1].get_height()-bars[0].get_height()+10, color='black', width=0.005, head_length=10)\n\nplt.text(bars[1].get_x()+bars[1].get_width()\/2+0.01, (bars[0].get_height()+bars[1].get_height())\/2, \n         train[train['Survived']==0].shape[0]-train[train['Survived']==1].shape[0]);","238e0fbc":"df=train.pivot_table(index='Pclass', values='Survived', aggfunc=np.mean)","5d711e32":"fig, ax = plt.subplots(figsize=[15,5])\ndf=100*train.pivot_table(index='Pclass', values='Survived', aggfunc=np.mean)\ndf.plot.bar(ax=ax, color=defaultcolor)\nfor i,p in enumerate(ax.patches):\n    ax.annotate('{:.2f}%'.format(df['Survived'][1+i]), (p.get_x()+0.18, p.get_height()+1)).set_fontsize(15)\nax.set(title='Percentage of survivors by Pclass', xlabel='Pclass', ylabel='Percentage', ylim=[0,100]);\nplt.xticks(rotation=0);","77546765":"fig, ax = plt.subplots(figsize=[15,5])\ntrain['Pclass'].value_counts().sort_index().plot.bar(ax=ax, color=defaultcolor)\nax.set(title='Number of passengers by Pclass', xlabel='Pclass', ylabel='# of passangers');\nplt.xticks(rotation=0);","1b815c0f":"fig, ax = plt.subplots()\n\nax = sns.boxplot(x='Pclass', y='Age', data=train, ax=ax, color=defaultcolor);\n\nax = sns.pointplot(x='Pclass', y='Age', data=train.groupby('Pclass', as_index=False).mean(), ax=ax, color='g', \n              linestyles='--')\n\nplt.legend((ax.get_children()[22:23]), ['Mean'])","54f7e282":"train['Title']=train['Name'].apply(lambda x: x[x.find(',')+2:x.find('.')])\ntest['Title']=test['Name'].apply(lambda x: x[x.find(',')+2:x.find('.')])","95ccd038":"from matplotlib.ticker import PercentFormatter\n\nfig, ax = plt.subplots()\npd.concat([train['Title'].value_counts(), test['Title'].value_counts()], axis=1, sort=False).plot.bar(stacked=True, ax=ax);\n\ntmp_sr = ((train['Title'].value_counts() + test['Title'].value_counts()).fillna(0)\/(train.shape[0]+test.shape[0])).copy()\n\ntmp_sr = tmp_sr.sort_values(ascending=False).cumsum()*100\n\nax.set_ylabel('Number of passengers')\nax.set_xlabel('Titles');\n\n\nax2 = ax.twinx()\nax2.plot(tmp_sr.index, tmp_sr, color=\"g\", marker=\"D\", ms=7)\nax2.yaxis.set_major_formatter(PercentFormatter())\n\nax2.tick_params(axis=\"y\", colors=\"g\")\nax2.set_ylim([0,105])\n\nax2.grid(False)\n\nax.legend(['Train', 'Test'], loc='lower right');","18119de1":"temp_series = 100*(train.groupby('Title').count()['PassengerId']\/train.shape[0]).copy()\n\ntemp_series = temp_series.rename('% of passangers')\nwith pd.option_context('display.float_format', '{:.3f}'.format):\n    display(HTML(pd.concat([train.groupby('Title')['Survived'].mean(), temp_series], axis=1)\n                 .sort_values(by='% of passangers', ascending=False).to_html()))","6cfec82f":"fig, ax = plt.subplots()\ndfSex = 100*pd.pivot_table(index='Sex', values='Survived', aggfunc=np.mean, data=train)\ndfSex.plot.bar(ax=ax, color=defaultcolor)\nplt.xticks(rotation=0)\nplt.ylim([0,100])\nax.set(title='Percentage of survivors by sex', xlabel='Sex', ylabel='Percentage');\nsex=['female', 'male']\nfor i,p in enumerate(ax.patches):\n    ax.annotate('{:.2f}%'.format(dfSex['Survived'][sex[i]]), (p.get_x()+0.14, p.get_height()+1.0)).set_fontsize(20)","eb83133f":"fig, ax = plt.subplots(figsize=[15,5])\nsns.kdeplot(train['Age'].sort_values().dropna(), ax=ax, legend=False, color='r')\nsns.kdeplot(train[train['Survived']==1]['Age'].sort_values().dropna(), ax=ax, legend=False, color='g')\nplt.legend(['Total', 'Survivors'])\nplt.grid(True)\nplt.title('Distribution of the passangers by age');\nax.set_yticklabels(['0%', '0.5%', '1.0%', '1.5%', '2.0%', '2.5%', '3.0%']);","0af118c8":"print(\"Percentage of missing Ages: {:.2f}%\".format(train['Age'].isna().mean()*100))\nprint(\"Survival rate of passengers with not missing Age: {:.2f}%\".format(train[train['Age'].apply(lambda x: not pd.isna(x))]['Survived'].mean()*100))\nprint(\"Survival rate of passengers with missing Age: {:.2f}%\".format(train[train['Age'].apply(lambda x: pd.isna(x))]['Survived'].mean()*100))","6a81b277":"matrix = np.zeros([9,7])\nfor i in range(8):\n    for j in range(6):\n        matrix[i][j]=train[(train['SibSp']==i)&(train['Parch']==j)]['Survived'].mean()\nfig, ax = plt.subplots();\nsns.heatmap(matrix, annot=True, ax=ax, cbar=False)\nax.set_ylim([0, 9])\nax.set_ylabel('Parch')\nax.set_xlabel('SibSp')\nax.set(title='Survivor rate by SibSp and Parch');","de7e78e3":"train.groupby(['SibSp', 'Parch']).count()['PassengerId']","4b6e39a7":"train[train['SibSp']==0][train['Parch']==0]['Age'].plot.hist(bins=30)","422a68d1":"train[train['SibSp']==0][train['Parch']==0]['Age'].value_counts().sort_index().head(10)","6d8a126a":"print('Survivor rate for passengers with numerical only tickets: {}%'\n      .format(round(train[train['Ticket'].apply(lambda x: x.isdigit())]['Survived'].mean(),2)*100))\nprint('Percentage of passangers with numerical only tickets: {:.2f}%'.format(100*train['Ticket'].apply(lambda x: x.isdigit()).mean()))\n","c1a3c849":"train['Cabin'].apply(lambda x: not pd.isna(x)).mean()","41f00c94":"train[train['Cabin'].apply(lambda x: not pd.isna(x))]['Survived'].mean()","0175b5ce":"train[train['Cabin'].apply(lambda x: pd.isna(x))]['Survived'].mean()","029fd38f":"sns.violinplot(x='Survived', y='Fare', data=train)","be2945e8":"sns.kdeplot(train['Fare'], shade=True)","591a2959":"train.pivot_table(values='Survived', index='Embarked', aggfunc=np.mean).plot.bar(color=defaultcolor);","7a97aa86":"train.groupby(['Embarked', 'Pclass']).mean()","515bfaca":"fig, ax = plt.subplots(figsize=[15,10])\nsns.heatmap(train.isna(), ax=ax, cbar=False, yticklabels=False)\nax.set_title(\"NaN in each label for train set\");\nfig2, ax2 = plt.subplots(figsize=[15,10])\nsns.heatmap(test.isna(), ax=ax2, cbar=False, yticklabels=False)\nax2.set_title(\"NaN in each label for test set\");","94c993a6":"train[train['Embarked'].isnull()]","3979c72d":"train[train['Ticket'].str.startswith('1135')]","24c0044f":"train.pivot_table(index='Embarked', values='Fare', aggfunc=np.mean)","cf4da4ae":"train.pivot_table(index='Embarked', values='Pclass', aggfunc=np.mean)","2058d0f0":"train['Embarked'].fillna('C', inplace=True)","e576b606":"def fill_age_train(cols):\n    age = cols[0]\n    pclass = cols[1]\n    embarked = cols[2]\n    if pd.isna(age):\n        return train[train['Pclass']==pclass][train['Embarked']==embarked]['Age'].mean()\n    else:\n        return age","01454ad3":"def fill_age_test(cols):\n    age = cols[0]\n    pclass = cols[1]\n    embarked = cols[2]\n    if pd.isna(age):\n        return test[test['Pclass']==pclass][test['Embarked']==embarked]['Age'].mean()\n    else:\n        return age","3bd3e6a0":"train['Age'] = train[['Age', 'Pclass','Embarked']].apply(fill_age_train, axis=1)","8f01da72":"test['Age'] = test[['Age', 'Pclass','Embarked']].apply(fill_age_test, axis=1)","2d29bfb8":"test[test['Fare'].isna()]","4a583b90":"mean = test[test['Pclass']==3][test['Embarked']=='S']['Fare'].mean()\ntest['Fare'].fillna(mean, inplace=True)","284fd7bf":"train['missingAge']=train['Age'].apply(lambda x: 1 if pd.isna(x) else 0)\ntest['missingAge']=test['Age'].apply(lambda x: 1 if pd.isna(x) else 0)","179579af":"train['Title']=train['Title'].apply(lambda x: x if x in ['Mr', 'Miss', 'Mrs'] else np.nan)\ntest['Title']=test['Title'].apply(lambda x: x if x in ['Mr', 'Miss', 'Mrs'] else np.nan)\ntrainTitledf = pd.get_dummies(data=train['Title'], prefix='Title')\ntestTitledf = pd.get_dummies(data=test['Title'], prefix='Title')\ntrain = pd.concat([train, trainTitledf], axis=1)\ntest = pd.concat([test, testTitledf], axis=1)","33a1e78a":"train = pd.concat([train,pd.get_dummies(train['Sex'], prefix='Sex', drop_first=True)], axis=1)\ntest = pd.concat([test,pd.get_dummies(test['Sex'], prefix='Sex', drop_first=True)], axis=1)","7748ae81":"train = pd.concat([train,pd.get_dummies(train['Embarked'], prefix='Embarked', drop_first=True)], axis=1)\ntest = pd.concat([test,pd.get_dummies(test['Embarked'], prefix='Embarked', drop_first=True)], axis=1)","bf8b0b17":"train['missingCabin'] = train['Cabin'].apply(lambda x: 1 if not pd.isna(x) else 0)\ntest['missingCabin'] = test['Cabin'].apply(lambda x: 1 if not pd.isna(x) else 0)","eff2e44b":"X_train = np.array(train.drop(['PassengerId', 'Survived', 'Name', 'Sex', 'Ticket', 'Cabin', 'Embarked', 'Title'], axis=1))\nX_test = np.array(test.drop(['PassengerId', 'Name', 'Sex', 'Ticket', 'Cabin', 'Embarked', 'Title'], axis=1))","697aeb4b":"y_train = np.array(train['Survived'])","c5d727ce":"def build_model():\n    model = XGBClassifier(learning_rate=0.01, n_estimators=500, n_jobs=-1)\n    return model","e5964693":"def KfoldAnalysis(X, y):\n    models = []\n    rkfold = RepeatedKFold(n_splits=5, n_repeats=10)\n    for train_index, val_index in rkfold.split(X):\n        model = build_model()\n        model.fit(X[train_index], y[train_index])\n        models.append(model)\n    return models","e76f1568":"models = KfoldAnalysis(X_train, y_train)","7972574d":"y_pred = np.array([model.predict(X_test) for model in models])","abfc3ac9":"sns.distplot(np.mean(y_pred, 0).reshape(-1), bins=50)\nplt.vlines(0.4, 0, 10)","3448da9e":"ans = [1 if i>0.4 else 0 for i in np.mean(y_pred, 0).reshape(-1)]","aabb1846":"np.mean(y_train)","e8fbcfaf":"np.mean(ans)","521a4242":"df = pd.DataFrame({'PassengerId' : test['PassengerId'], 'Survived' : pd.Series(ans)})\ndf.to_csv(\"submission.csv\", index=False)","e3e7bc8b":"### Sex - Categorical","2a56fa8d":"Ticket class of the passanger, the first that come to our minds is that the greater the Pclass the worse the chance of surviving, let's explore this correlation.","339370f8":"It looks like the highest probability is that they are from Embarked=C.","78522d69":"As it was already expected, women stood a better chance of surviving compared to males.","4e49f539":"### Fare - Numerical","ece1d108":"It looks like we cannot get any information from the tickets since it does not look like to have any pattern.","35a728b8":"SibSp: # of siblings \/ spouses aboard the Titanic\n\nParch: # of parents \/ children aboard the Titanic","51f8bcb5":"## The End\nThanks for reading this far, I hope you enjoyed it!\n\nSorry, english is not my first language, any errors feel free to correct it in the comments =).","a2742980":"Is just a individual number to order the passenger and does not have any correlation with the fact that the person survived.","2074855f":"### SibSp and Parch - Ordinal","4c6edac8":"### Evaluating of the model","f04fa496":"# Titanic","0c1e73ed":"As we have only 2 missing values here we can deal with it manually.","f98484fb":"Maybe the Fare and Pclass tells us something","41039edf":"We can see something interesting here: passengers missing the age data have a survival rate almost 10% lower than the one from those that have the age information. This can probably be explained by the fact that the age of those who survived was easier to retrive.","22f9e9d2":"## Neural net + KFold for the win","59fffbd0":"We can expected that the bigger the fare the better is the survivor rate.","4820de73":"### Let's take an overall look at the data.","d83dcf9a":"Let's fill it using Pclass and Embarked","3d689e77":"### Missing Age - Train and Test","f3f940aa":"We will only use the Mr, Miss and Mrs titles for our analysis since these are the only ones we have enough data to train our model properly. Let's look at the survival rate of each to see if we can get a quick insight.","ae33082a":"As it was expected most of them are adults or older pepole, we can also see that we have some younger pepole with age 5, 11 and 13, which is quite strange, the more reasonable assumption is that the data is wrong for those.","d2089144":"## Feature enginnering","964f261a":"### Missing Cabin - Train and Test","c9d11498":"The survivor rate for all the data is approximately 38%, as we can see the ones with the Cabin label had a much higher rate, we can use this fact to improve our model.","2395e15d":"### Missing Embarked - Train","5d82e7b0":"Since we have a lot of NaN we will just use the fact that the passenger has or not a Cabin label.","480c56ea":"<h1>Table of Contents<span class=\"tocSkip\"><\/span><\/h1>\n<div class=\"toc\"><ul class=\"toc-item\"><li><span><a href=\"#Titanic\" data-toc-modified-id=\"Titanic-1\"><span class=\"toc-item-num\">1&nbsp;&nbsp;<\/span>Titanic<\/a><\/span><ul class=\"toc-item\"><li><span><a href=\"#Imports-and-configurations\" data-toc-modified-id=\"Imports-and-configurations-1.1\"><span class=\"toc-item-num\">1.1&nbsp;&nbsp;<\/span>Imports and configurations<\/a><\/span><\/li><li><span><a href=\"#Data-preprocessing\" data-toc-modified-id=\"Data-preprocessing-1.2\"><span class=\"toc-item-num\">1.2&nbsp;&nbsp;<\/span>Data preprocessing<\/a><\/span><ul class=\"toc-item\"><li><span><a href=\"#Let's-take-an-overall-look-at-the-data.\" data-toc-modified-id=\"Let's-take-an-overall-look-at-the-data.-1.2.1\"><span class=\"toc-item-num\">1.2.1&nbsp;&nbsp;<\/span>Let's take an overall look at the data.<\/a><\/span><\/li><li><span><a href=\"#PassengerId---Ordinal\" data-toc-modified-id=\"PassengerId---Ordinal-1.2.2\"><span class=\"toc-item-num\">1.2.2&nbsp;&nbsp;<\/span>PassengerId - Ordinal<\/a><\/span><\/li><li><span><a href=\"#Pclass---Ordinal\" data-toc-modified-id=\"Pclass---Ordinal-1.2.3\"><span class=\"toc-item-num\">1.2.3&nbsp;&nbsp;<\/span>Pclass - Ordinal<\/a><\/span><\/li><li><span><a href=\"#Name-and-Title---Categorical\" data-toc-modified-id=\"Name-and-Title---Categorical-1.2.4\"><span class=\"toc-item-num\">1.2.4&nbsp;&nbsp;<\/span>Name and Title - Categorical<\/a><\/span><\/li><li><span><a href=\"#Sex---Categorical\" data-toc-modified-id=\"Sex---Categorical-1.2.5\"><span class=\"toc-item-num\">1.2.5&nbsp;&nbsp;<\/span>Sex - Categorical<\/a><\/span><\/li><li><span><a href=\"#Age---Numerical\" data-toc-modified-id=\"Age---Numerical-1.2.6\"><span class=\"toc-item-num\">1.2.6&nbsp;&nbsp;<\/span>Age - Numerical<\/a><\/span><\/li><li><span><a href=\"#SibSp-and-Parch---Ordinal\" data-toc-modified-id=\"SibSp-and-Parch---Ordinal-1.2.7\"><span class=\"toc-item-num\">1.2.7&nbsp;&nbsp;<\/span>SibSp and Parch - Ordinal<\/a><\/span><\/li><li><span><a href=\"#Ticket---Categorical\" data-toc-modified-id=\"Ticket---Categorical-1.2.8\"><span class=\"toc-item-num\">1.2.8&nbsp;&nbsp;<\/span>Ticket - Categorical<\/a><\/span><\/li><li><span><a href=\"#Cabin---Categorical\" data-toc-modified-id=\"Cabin---Categorical-1.2.9\"><span class=\"toc-item-num\">1.2.9&nbsp;&nbsp;<\/span>Cabin - Categorical<\/a><\/span><\/li><li><span><a href=\"#Fare---Numerical\" data-toc-modified-id=\"Fare---Numerical-1.2.10\"><span class=\"toc-item-num\">1.2.10&nbsp;&nbsp;<\/span>Fare - Numerical<\/a><\/span><\/li><li><span><a href=\"#Embarked---Categorical\" data-toc-modified-id=\"Embarked---Categorical-1.2.11\"><span class=\"toc-item-num\">1.2.11&nbsp;&nbsp;<\/span>Embarked - Categorical<\/a><\/span><\/li><li><span><a href=\"#Dealing-with-NaN\" data-toc-modified-id=\"Dealing-with-NaN-1.2.12\"><span class=\"toc-item-num\">1.2.12&nbsp;&nbsp;<\/span>Dealing with NaN<\/a><\/span><\/li><li><span><a href=\"#Missing-Embarked---Train\" data-toc-modified-id=\"Missing-Embarked---Train-1.2.13\"><span class=\"toc-item-num\">1.2.13&nbsp;&nbsp;<\/span>Missing Embarked - Train<\/a><\/span><\/li><li><span><a href=\"#Missing-Age---Train-and-Test\" data-toc-modified-id=\"Missing-Age---Train-and-Test-1.2.14\"><span class=\"toc-item-num\">1.2.14&nbsp;&nbsp;<\/span>Missing Age - Train and Test<\/a><\/span><\/li><li><span><a href=\"#Missing-Fare---Test\" data-toc-modified-id=\"Missing-Fare---Test-1.2.15\"><span class=\"toc-item-num\">1.2.15&nbsp;&nbsp;<\/span>Missing Fare - Test<\/a><\/span><\/li><li><span><a href=\"#Missing-Cabin---Train-and-Test\" data-toc-modified-id=\"Missing-Cabin---Train-and-Test-1.2.16\"><span class=\"toc-item-num\">1.2.16&nbsp;&nbsp;<\/span>Missing Cabin - Train and Test<\/a><\/span><\/li><\/ul><\/li><li><span><a href=\"#Feature-enginnering\" data-toc-modified-id=\"Feature-enginnering-1.3\"><span class=\"toc-item-num\">1.3&nbsp;&nbsp;<\/span>Feature enginnering<\/a><\/span><ul class=\"toc-item\"><li><span><a href=\"#Creating-new-label-for-missing-age\" data-toc-modified-id=\"Creating-new-label-for-missing-age-1.3.1\"><span class=\"toc-item-num\">1.3.1&nbsp;&nbsp;<\/span>Creating new label for missing age<\/a><\/span><\/li><li><span><a href=\"#Create-new-label-for-the-title\" data-toc-modified-id=\"Create-new-label-for-the-title-1.3.2\"><span class=\"toc-item-num\">1.3.2&nbsp;&nbsp;<\/span>Create new label for the title<\/a><\/span><\/li><li><span><a href=\"#One-hot-encoding-for-Sex\" data-toc-modified-id=\"One-hot-encoding-for-Sex-1.3.3\"><span class=\"toc-item-num\">1.3.3&nbsp;&nbsp;<\/span>One-hot encoding for Sex<\/a><\/span><\/li><li><span><a href=\"#One-hot-encoding-for-embarked\" data-toc-modified-id=\"One-hot-encoding-for-embarked-1.3.4\"><span class=\"toc-item-num\">1.3.4&nbsp;&nbsp;<\/span>One-hot encoding for embarked<\/a><\/span><\/li><li><span><a href=\"#Creating-new-label-for-missing-Cabin\" data-toc-modified-id=\"Creating-new-label-for-missing-Cabin-1.3.5\"><span class=\"toc-item-num\">1.3.5&nbsp;&nbsp;<\/span>Creating new label for missing Cabin<\/a><\/span><\/li><\/ul><\/li><li><span><a href=\"#Neural-net-+-KFold-for-the-win\" data-toc-modified-id=\"Neural-net-+-KFold-for-the-win-1.4\"><span class=\"toc-item-num\">1.4&nbsp;&nbsp;<\/span>Neural net + KFold for the win<\/a><\/span><ul class=\"toc-item\"><li><span><a href=\"#Building-the-model\" data-toc-modified-id=\"Building-the-model-1.4.1\"><span class=\"toc-item-num\">1.4.1&nbsp;&nbsp;<\/span>Building the model<\/a><\/span><\/li><li><span><a href=\"#Evaluating-of-the-model\" data-toc-modified-id=\"Evaluating-of-the-model-1.4.2\"><span class=\"toc-item-num\">1.4.2&nbsp;&nbsp;<\/span>Evaluating of the model<\/a><\/span><\/li><\/ul><\/li><li><span><a href=\"#Submitting-to-kaggle\" data-toc-modified-id=\"Submitting-to-kaggle-1.5\"><span class=\"toc-item-num\">1.5&nbsp;&nbsp;<\/span>Submitting to kaggle<\/a><\/span><\/li><li><span><a href=\"#The-End\" data-toc-modified-id=\"The-End-1.6\"><span class=\"toc-item-num\">1.6&nbsp;&nbsp;<\/span>The End<\/a><\/span><\/li><\/ul><\/li><\/ul><\/div>","8d98813c":"### Building the model","1030937d":"### Creating new label for missing age","b499d71c":"As it can be seen by the above plot, Pclass=1 had a greater rate of survivors. ","2752ebf0":"### PassengerId - Ordinal","6eb68efd":"The sinking of the RMS Titanic is one of the most infamous shipwrecks in history.  On April 15, 1912, during her maiden voyage, the Titanic sank after colliding with an iceberg, killing 1502 out of 2224 passengers and crew. This sensational tragedy shocked the international community and led to better safety regulations for ships.\n\nOne of the reasons that the shipwreck led to such loss of life was that there were not enough lifeboats for the passengers and crew. Although there was some element of luck involved in surviving the sinking, some groups of people were more likely to survive than others, such as women, children, and the upper-class.","ce8ab1ea":"### One-hot encoding for embarked","c1fb24d3":"### Creating new label for missing Cabin","c5196763":"### Age - Numerical","e1b6bbaf":"### Name and Title - Categorical","dac0f322":"In a first analysis it may look like we cannot get any useful information from the name label but, after analysis the names, we can see that it contains a very interesting insight: the Title the person had at the time, let's investigate that a bit further.","ef9a6493":"We can see that more than half of the passanger had the configuration 0 and 0! Let's see the age distribution of those.","95fb22c2":"## Submitting to kaggle","3d5b1f80":"### Missing Fare - Test","33d9580e":"### Dealing with NaN","f2d56efc":"Is there any correlation between the features and the fact that the person survived? ","d7fd96fb":"### Embarked - Categorical","319ff099":"### Pclass - Ordinal","5003a1fd":"### Create new label for the title","91a18aff":"### One-hot encoding for Sex","77b969b5":"## Data preprocessing\n<a id='preprocess'><\/a>","c81f77bd":"### Ticket - Categorical","c84180c0":"## Imports and configurations","a98ff718":"Strangely, it looks like age didn't affect much the chance of surviving since the distribution of all passengers and the one of those who survived looks pretty similar.","de23490f":"- We can also search for the family name","0feffdcb":"It looks like the passanger with the title Mr had a smaller chance of surviving compared to Mrs and Master.","d380d9a0":"The interesting thing here is the number of NaN values, we have only 22% not NaN values, let's see if that has any correlation with the survivor rate.","836dae36":"### Cabin - Categorical","6f2348fe":"We have several values missing in both sets, let's use the Pclass and embarked to fill the NaNs."}}