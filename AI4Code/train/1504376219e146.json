{"cell_type":{"d1f2a009":"code","37b339f5":"code","401d760b":"code","8fd152a1":"code","35251309":"code","126bdd15":"code","5fcca7ad":"code","4e9e4ada":"code","a33500f7":"code","9452e420":"code","6a84d339":"code","f5df92f3":"code","6e49b88c":"code","0beadeb7":"code","bc2103cf":"code","70edf145":"code","e0305d5a":"code","f94dbf89":"code","60eb9a5f":"code","28f323f3":"code","5e2d3dc6":"code","11d4982b":"code","e9d4d376":"code","617a4013":"code","ffe4c5c9":"code","5a35b1cf":"code","e61ec274":"code","9cbc9ce2":"code","aa4d2985":"code","9bdc53c3":"code","525d3c11":"code","593e62e9":"code","f30d460b":"code","996057af":"code","6d902e09":"code","643b27ff":"code","3b505888":"code","f67dd83b":"code","3ea8f7d2":"code","40e7de3f":"markdown","c9282999":"markdown","a4e3e2df":"markdown","bf7f72ef":"markdown","bcf34df7":"markdown","02891ae4":"markdown","56b9852b":"markdown","d1766139":"markdown","74fdaa48":"markdown","c242c515":"markdown","5c2ce91d":"markdown","5c9a370b":"markdown","407a0c0d":"markdown","dcb4f223":"markdown","5fee8b95":"markdown","d0e4d78d":"markdown","6b5c9522":"markdown","5bae8d50":"markdown","204dc3a4":"markdown","aa03da26":"markdown","da8c21bc":"markdown","e8d30d18":"markdown","26f6bd00":"markdown","ba7f1f82":"markdown","3b8584a9":"markdown","aa942e85":"markdown"},"source":{"d1f2a009":"import numpy as np \nimport pandas as pd\nimport plotly as py\nimport plotly.graph_objs as go\nimport plotly.express as px\nfrom plotly.subplots import make_subplots\nfrom plotly.offline import init_notebook_mode\ninit_notebook_mode(connected = True)\nimport seaborn as sns\n\nimport matplotlib.pyplot as plt\n%matplotlib inline\n\nimport warnings\nwarnings.filterwarnings(\"ignore\")\n\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.preprocessing import LabelEncoder\n\nfrom sklearn.metrics import classification_report, confusion_matrix, roc_curve, auc\nfrom sklearn.metrics import roc_auc_score, precision_score, recall_score, f1_score\n\nfrom sklearn.model_selection import train_test_split, cross_val_score\n\nfrom sklearn.svm import SVC\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.linear_model import LogisticRegression\nfrom xgboost import XGBClassifier\nfrom lightgbm import LGBMClassifier\n\npd.set_option('display.max_columns', None)","37b339f5":"users = pd.read_csv('..\/input\/telecom-users-dataset\/telecom_users.csv')","401d760b":"users.head()","8fd152a1":"# Delete two unnecessary columns\nusers = users.drop(['Unnamed: 0', 'customerID'], axis = 1)","35251309":"users.info()","126bdd15":"missing_values = 0\nfor i in range(len(users.index)):\n    if users['TotalCharges'][i].replace('.', '').isdigit() == False:\n        users.iloc[i, 18] = '100'\n        missing_values += 1\nprint(missing_values)\n        \nusers['TotalCharges'] = users['TotalCharges'].astype('float')","5fcca7ad":"ch = {'Yes': 'Client left', 'No': 'Client stayed'}\nusers['Churn'] = users['Churn'].map(ch)","4e9e4ada":"churn = users.groupby('Churn').agg({'Churn': 'count'}).rename(columns = {'Churn': 'count'}).reset_index()\nchurn","a33500f7":"fig = px.pie(churn, values = churn['count'], names = churn['Churn'])\nfig.update_traces(textposition = 'inside', \n                  textinfo = 'percent + label', \n                  hole = 0.85, \n                  marker = dict(colors = ['#2A3132','#336B87'], line = dict(color = 'white', width = 2)))\n\nfig.update_layout(title_text = 'Customer churn', title_x = 0.5, title_y = 0.53, title_font_size = 32, title_font_family = 'Calibri', title_font_color = 'black',\n                  showlegend = False)\n                  \nfig.show()","9452e420":"fig = plt.figure(figsize = (17, 20))\n\nplt.subplot(221)\nsns.set_style(\"dark\")\nsns.kdeplot(users.query('Churn == \"Client left\"')['tenure'], color = '#2A3132', shade = True, label = 'Client left', alpha = 0.5)\nsns.kdeplot(users.query('Churn == \"Client stayed\"')['tenure'], color = '#336B87', shade = True, label = 'Client stayed', alpha = 0.5)\nplt.ylabel('')\nplt.xlabel('MONTHS OF USE')\nplt.yticks([])\nplt.legend()\n\nplt.subplot(222)\nplt.text(0.38, 0.93, 'Summary', fontsize = 24, fontfamily = 'serif', fontweight='light')\nplt.text(0.02, 0.65, '''1. Customers who are just starting to use the \nservices of a telecommunications company are\nmost likely to leave.''', fontsize = 16, fontfamily = 'serif', fontweight='light')\nplt.text(0.02, 0.4, '''2. The lower the monthly charges, the more likely \nthe customer is to stay, however, the higher the\nmonthly charges, the more likely the customer is to \nleave.''', fontsize = 16, fontfamily = 'serif', fontweight='light')\nplt.text(0.02, 0.2, '''3. Information about the total charges confirms \nthat customers tend to leave at the very beginning \nof using the company's services.''', fontsize = 16, fontfamily = 'serif', fontweight='light')\nplt.yticks([])\nplt.xticks([])\n\nplt.subplot(223)\nsns.set_style(\"dark\")\nsns.kdeplot(users.query('Churn == \"Client left\"')['MonthlyCharges'], color = '#2A3132', shade = True, label = 'Client left', alpha = 0.5)\nsns.kdeplot(users.query('Churn == \"Client stayed\"')['MonthlyCharges'], color = '#336B87', shade = True, label = 'Client stayed', alpha = 0.5)\nplt.ylabel('')\nplt.xlabel('MONTHLY CHARGES')\nplt.yticks([])\n\nplt.subplot(224)\nsns.set_style(\"dark\")\nsns.kdeplot(users.query('Churn == \"Client left\"')['TotalCharges'], color = '#2A3132', shade = True, label = 'Client left', alpha = 0.5)\nsns.kdeplot(users.query('Churn == \"Client stayed\"')['TotalCharges'], color = '#336B87', shade = True, label = 'Client stayed', alpha = 0.5)\nplt.ylabel('')\nplt.xlabel('TOTAL CHARGES')\nplt.yticks([])\n\n\nplt.show()","6a84d339":"spouse = users.groupby(['Partner', 'Churn']).agg({'Churn': 'count'}).rename(columns = {'Churn': 'count'}).reset_index()\nspouse.iloc[[0,1], 0] = 'Not married'\nspouse.iloc[[2,3], 0] = 'Married'\nspouse","f5df92f3":"SeniorCitizen = users.groupby(['SeniorCitizen', 'Churn']).agg({'Churn': 'count'}).rename(columns = {'Churn': 'count'}).reset_index()\nSeniorCitizen.iloc[[0,1], 0] = 'Not pensioner'\nSeniorCitizen.iloc[[2,3], 0] = 'Pensioner'\nSeniorCitizen","6e49b88c":"fig = px.sunburst(SeniorCitizen, path = ['SeniorCitizen', 'Churn'], values = 'count', color = 'SeniorCitizen', title = 'Affect of retirement on customer churn',\n                 color_discrete_map = {'Not pensioner': '#336B87', 'Pensioner': '#2A3132'},\n                 width = 600, height = 600)\n\nfig.update_layout(plot_bgcolor = 'white', title_font_family = 'Calibri Black', title_font_color = '#221f1f', title_font_size = 22, title_x = 0.5)\n\nfig.update_traces(textinfo = 'label + percent parent')\n                  \nfig.show()\n##########################\nfig = px.sunburst(spouse, path = ['Partner', 'Churn'], values = 'count', color = 'Partner', title = 'Affect of having a spouse on customer churn',\n                 color_discrete_map = {'Not married': '#336B87', 'Married': '#2A3132'},\n                 width = 600, height = 600)\n\nfig.update_layout(plot_bgcolor = 'white', title_font_family = 'Calibri Black', title_font_color = '#221f1f', title_font_size = 22, title_x = 0.5)\n\nfig.update_traces(textinfo = 'label + percent parent')\n                  \nfig.show()","0beadeb7":"phone = users.groupby(['PhoneService', 'Churn']).agg({'Churn': 'count'}).rename(columns = {'Churn': 'count'}).reset_index()\nphone.iloc[[0,1], 0] = 'No phone service'\nphone.iloc[[2,3], 0] = 'Yes phone service'\nphone","bc2103cf":"internet = users.groupby(['InternetService', 'Churn']).agg({'Churn': 'count'}).rename(columns = {'Churn': 'count'}).reset_index()\ninternet.iloc[[4,5], 0] = 'No internet'\ninternet","70edf145":"fig = px.sunburst(phone, path = ['PhoneService', 'Churn'], values = 'count', color = 'PhoneService', title = 'Distribution of customer churn by phone service',\n                 color_discrete_map = {'No phone service': '#336B87', 'Yes phone service': '#2A3132'},\n                 width = 600, height = 600)\n\nfig.update_layout(plot_bgcolor = 'white', title_font_family = 'Calibri Black', title_font_color = '#221f1f', title_font_size = 22, title_x = 0.5)\n\nfig.update_traces(textinfo = 'label + percent parent')\n                  \nfig.show()\n#######################################\nfig = px.sunburst(internet, path = ['InternetService', 'Churn'], values = 'count', color = 'InternetService', title = 'Distribution of customer churn by internet service',\n                 color_discrete_map = {'DSL': '#336B87', 'Fiber optic': '#2A3132', 'No internet': '#763626'},\n                 width = 600, height = 600)\n\nfig.update_layout(plot_bgcolor = 'white', title_font_family = 'Calibri Black', title_font_color = '#221f1f', title_font_size = 22, title_x = 0.5)\n\nfig.update_traces(textinfo = 'label + percent parent')\n                  \nfig.show()","e0305d5a":"i_sec = users.groupby(['OnlineSecurity', 'Churn']).agg({'Churn': 'count'}).rename(columns = {'Churn': 'count'}).reset_index()\n\ni_sec","f94dbf89":"i_back = users.groupby(['OnlineBackup', 'Churn']).agg({'Churn': 'count'}).rename(columns = {'Churn': 'count'}).reset_index()\n\ni_back","60eb9a5f":"fig = px.sunburst(i_sec, path = ['OnlineSecurity', 'Churn'], values = 'count', color = 'OnlineSecurity', title = 'Distribution of customer churn by online security',\n                 color_discrete_map = {'No': '#336B87', 'Yes': '#2A3132', 'No internet service': '#763626'},\n                 width = 600, height = 600)\n\nfig.update_layout(plot_bgcolor = 'white', title_font_family = 'Calibri Black', title_font_color = '#221f1f', title_font_size = 22, title_x = 0.5)\n\nfig.update_traces(textinfo = 'label + percent parent')\n                  \nfig.show()\n#######################################\nfig = px.sunburst(i_back, path = ['OnlineBackup', 'Churn'], values = 'count', color = 'OnlineBackup', title = 'Distribution of customer churn by online backup',\n                 color_discrete_map = {'No': '#336B87', 'Yes': '#2A3132', 'No internet service': '#763626'},\n                 width = 600, height = 600)\n\nfig.update_layout(plot_bgcolor = 'white', title_font_family = 'Calibri Black', title_font_color = '#221f1f', title_font_size = 22, title_x = 0.5)\n\nfig.update_traces(textinfo = 'label + percent parent')\n                  \nfig.show()","28f323f3":"d_prot = users.groupby(['DeviceProtection', 'Churn']).agg({'Churn': 'count'}).rename(columns = {'Churn': 'count'}).reset_index()\n\nd_prot","5e2d3dc6":"t_supp = users.groupby(['TechSupport', 'Churn']).agg({'Churn': 'count'}).rename(columns = {'Churn': 'count'}).reset_index()\n\nt_supp","11d4982b":"fig = px.sunburst(d_prot, path = ['DeviceProtection', 'Churn'], values = 'count', color = 'DeviceProtection', title = 'Distribution of customer churn by device protection',\n                 color_discrete_map = {'No': '#336B87', 'Yes': '#2A3132', 'No internet service': '#763626'},\n                 width = 600, height = 600)\n\nfig.update_layout(plot_bgcolor = 'white', title_font_family = 'Calibri Black', title_font_color = '#221f1f', title_font_size = 22, title_x = 0.5)\n\nfig.update_traces(textinfo = 'label + percent parent')\n                  \nfig.show()\n#######################################\nfig = px.sunburst(t_supp, path = ['TechSupport', 'Churn'], values = 'count', color = 'TechSupport', title = 'Distribution of customer churn by tech support',\n                 color_discrete_map = {'No': '#336B87', 'Yes': '#2A3132', 'No internet service': '#763626'},\n                 width = 600, height = 600)\n\nfig.update_layout(plot_bgcolor = 'white', title_font_family = 'Calibri Black', title_font_color = '#221f1f', title_font_size = 22, title_x = 0.5)\n\nfig.update_traces(textinfo = 'label + percent parent')\n                  \nfig.show()","e9d4d376":"s_tv = users.groupby(['StreamingTV', 'Churn']).agg({'Churn': 'count'}).rename(columns = {'Churn': 'count'}).reset_index()\n\ns_tv","617a4013":"s_mov = users.groupby(['StreamingMovies', 'Churn']).agg({'Churn': 'count'}).rename(columns = {'Churn': 'count'}).reset_index()\n\ns_mov","ffe4c5c9":"fig = px.sunburst(s_tv, path = ['StreamingTV', 'Churn'], values = 'count', color = 'StreamingTV', title = 'Distribution of customer churn by streaming TV',\n                 color_discrete_map = {'No': '#336B87', 'Yes': '#2A3132', 'No internet service': '#763626'},\n                 width = 600, height = 600)\n\nfig.update_layout(plot_bgcolor = 'white', title_font_family = 'Calibri Black', title_font_color = '#221f1f', title_font_size = 22, title_x = 0.5)\n\nfig.update_traces(textinfo = 'label + percent parent')\n                  \nfig.show()\n#######################################\nfig = px.sunburst(s_mov, path = ['StreamingMovies', 'Churn'], values = 'count', color = 'StreamingMovies', title = 'Distribution of customer churn by streaming movies',\n                 color_discrete_map = {'No': '#336B87', 'Yes': '#2A3132', 'No internet service': '#763626'},\n                 width = 600, height = 600)\n\nfig.update_layout(plot_bgcolor = 'white', title_font_family = 'Calibri Black', title_font_color = '#221f1f', title_font_size = 22, title_x = 0.5)\n\nfig.update_traces(textinfo = 'label + percent parent')\n                  \nfig.show()","5a35b1cf":"contract = users.groupby(['Contract', 'Churn']).agg({'Churn': 'count'}).rename(columns = {'Churn': 'count'}).reset_index()\n\ncontract","e61ec274":"payment = users.groupby(['PaymentMethod', 'Churn']).agg({'Churn': 'count'}).rename(columns = {'Churn': 'count'}).reset_index()\n\npayment","9cbc9ce2":"fig = px.sunburst(contract, path = ['Contract', 'Churn'], values = 'count', color = 'Contract', title = 'Distribution of customer churn by type of contract',\n                 color_discrete_map = {'Month-to-month': '#336B87', 'One year': '#2A3132', 'Two year': '#763626'},\n                 width = 600, height = 600)\n\nfig.update_layout(plot_bgcolor = 'white', title_font_family = 'Calibri Black', title_font_color = '#221f1f', title_font_size = 22, title_x = 0.5)\n\nfig.update_traces(textinfo = 'label + percent parent')\n                  \nfig.show()\n#######################################\nfig = px.sunburst(payment, path = ['PaymentMethod', 'Churn'], values = 'count', color = 'PaymentMethod', title = 'Distribution of customer churn by method of payment',\n                 color_discrete_map = {'Bank transfer (automatic)': '#336B87', 'Credit card (automatic)': '#2A3132', \n                                       'Electronic check': '#763626', 'Mailed check': '#90AFC5'},\n                 width = 600, height = 600)\n\nfig.update_layout(plot_bgcolor = 'white', title_font_family = 'Calibri Black', title_font_color = '#221f1f', title_font_size = 22, title_x = 0.5)\n\nfig.update_traces(textinfo = 'label + percent parent')\n                  \nfig.show()","aa4d2985":"X = users.drop('Churn', axis = 1)\nrey = {'Client stayed': 0, 'Client left': 1}\nusers['Churn'] = users['Churn'].map(rey)\ny = users['Churn']\n\nnum_cols = X.select_dtypes(include = ['int64', 'float64']).columns.to_list()\ncat_cols = X.select_dtypes(include = ['object']).columns.to_list()","9bdc53c3":"def label_encoder(df):\n    for i in cat_cols:\n        le = LabelEncoder()\n        df[i] = le.fit_transform(df[i])\n    return df","525d3c11":"sc = StandardScaler()\nX[num_cols] = sc.fit_transform(X[num_cols])\n\n# Label encoding\nX = label_encoder(X)\n\nX.head()","593e62e9":"X_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.2, random_state = 22)","f30d460b":"results = pd.DataFrame(columns = ['LR', 'RF', 'LGBM', 'XGB'], index = range(4))","996057af":"lg = LogisticRegression(random_state = 22)\nlg.fit(X_train, y_train)\ny_pred = lg.predict(X_test)\ny_prob = lg.predict_proba(X_test)[:,1]\n\n# Metrics\nresults.iloc[0, 0] = round(precision_score(y_test, y_pred), 2)\nresults.iloc[1, 0] = round(recall_score(y_test, y_pred), 2)\nresults.iloc[2, 0] = round(f1_score(y_test, y_pred), 2)\nresults.iloc[3, 0] = round(roc_auc_score(y_test, y_prob), 3)\nlg_cm = confusion_matrix(y_test, y_pred)\n\nprint(classification_report(y_test, y_pred))\nprint(f'ROC AUC score: {round(roc_auc_score(y_test, y_prob), 3)}')\nprint('')\nprint('-----------------------------------------------------')\nprint('')\nprint('Cross-validation scores with 5 folds:')\nprint('')\nprint(f\"ROC AUC: {round(cross_val_score(lg, X, y, cv = 5, scoring = 'roc_auc').mean(), 3)}\")\nprint(f\"precision: {round(cross_val_score(lg, X, y, cv = 5, scoring = 'precision').mean(), 2)}\")\nprint(f\"recall: {round(cross_val_score(lg, X, y, cv = 5, scoring = 'recall').mean(), 2)}\")\nprint(f\"f1: {round(cross_val_score(lg, X, y, cv = 5, scoring = 'f1').mean(), 2)}\")\n\n# Visualize confusion matrix\nplt.figure(figsize = (8, 5))\nsns.heatmap(lg_cm, cmap = 'Blues', annot = True, fmt = 'd', linewidths = 5, cbar = False, annot_kws = {'fontsize': 15}, \n            yticklabels = ['Stayed', 'Left'], xticklabels = ['Predicted stayed', 'Predicted left'])\nplt.yticks(rotation = 0)\nplt.show()\n\n# Roc curve\nfalse_positive_rate, true_positive_rate, thresholds = roc_curve(y_test, y_prob)\nroc_auc = auc(false_positive_rate, true_positive_rate)\n\nsns.set_theme(style = 'white')\nplt.figure(figsize = (8, 8))\nplt.plot(false_positive_rate,true_positive_rate, color = '#b01717', label = 'AUC = %0.3f' % roc_auc)\nplt.legend(loc = 'lower right')\nplt.plot([0, 1], [0, 1], linestyle = '--', color = '#174ab0')\nplt.axis('tight')\nplt.ylabel('True Positive Rate')\nplt.xlabel('False Positive Rate')\nplt.show()\n\n# Feature importance\nf_imp = pd.DataFrame(columns = ['feature', 'importance (abs coef)'], index = range(19))\nfor i in range(len(f_imp.index)):\n    f_imp.iloc[i, 0] = X_train.columns.to_list()[i]\nf_imp['importance (abs coef)'] = abs(lg.coef_)[0]\nf_imp = f_imp.sort_values('importance (abs coef)', ascending = False)\nf_imp[0:12].style.background_gradient(cmap = 'Blues')","6d902e09":"cross_val_score(lg, X, y, cv = 5, scoring = 'precision')","643b27ff":"rf = RandomForestClassifier(random_state = 22, max_depth = 5)\nrf.fit(X_train, y_train)\ny_pred = rf.predict(X_test)\ny_prob = rf.predict_proba(X_test)[:,1]\n\n# Metrics\nresults.iloc[0, 1] = round(precision_score(y_test, y_pred), 2)\nresults.iloc[1, 1] = round(recall_score(y_test, y_pred), 2)\nresults.iloc[2, 1] = round(f1_score(y_test, y_pred), 2)\nresults.iloc[3, 1] = round(roc_auc_score(y_test, y_prob), 3)\nrf_cm = confusion_matrix(y_test, y_pred)\n\nprint(classification_report(y_test, y_pred))\nprint(f'ROC AUC score: {round(roc_auc_score(y_test, y_prob), 3)}')\nprint('')\nprint('-----------------------------------------------------')\nprint('')\nprint('Cross-validation scores with 5 folds:')\nprint('')\nprint(f\"ROC AUC: {round(cross_val_score(rf, X, y, cv = 5, scoring = 'roc_auc').mean(), 3)}\")\nprint(f\"precision: {round(cross_val_score(rf, X, y, cv = 5, scoring = 'precision').mean(), 2)}\")\nprint(f\"recall: {round(cross_val_score(rf, X, y, cv = 5, scoring = 'recall').mean(), 2)}\")\nprint(f\"f1: {round(cross_val_score(rf, X, y, cv = 5, scoring = 'f1').mean(), 2)}\")\n\n# Visualize confusion matrix\nplt.figure(figsize = (8, 5))\nsns.heatmap(rf_cm, cmap = 'Blues', annot = True, fmt = 'd', linewidths = 5, cbar = False, annot_kws = {'fontsize': 15},\n           yticklabels = ['Stayed', 'Left'], xticklabels = ['Predicted stayed', 'Predicted left'])\nplt.yticks(rotation = 0)\nplt.show()\n\n# Roc curve\nfalse_positive_rate, true_positive_rate, thresholds = roc_curve(y_test, y_prob)\nroc_auc = auc(false_positive_rate, true_positive_rate)\n\nsns.set_theme(style = 'white')\nplt.figure(figsize = (8, 8))\nplt.plot(false_positive_rate,true_positive_rate, color = '#b01717', label = 'AUC = %0.3f' % roc_auc)\nplt.legend(loc = 'lower right')\nplt.plot([0, 1], [0, 1], linestyle = '--', color = '#174ab0')\nplt.axis('tight')\nplt.ylabel('True Positive Rate')\nplt.xlabel('False Positive Rate')\nplt.show()\n\n# Feature importance\nf_imp2 = pd.DataFrame(columns = ['feature', 'importance'], index = range(19))\nfor i in range(len(f_imp2.index)):\n    f_imp2.iloc[i, 0] = X_train.columns.to_list()[i]\nf_imp2['importance'] = rf.feature_importances_\nf_imp2 = f_imp2.sort_values('importance', ascending = False)\nf_imp2[0:12].style.background_gradient(cmap = 'Blues')","3b505888":"lgbm = LGBMClassifier(random_state = 22, max_depth = 5, num_leaves = 50)\nlgbm.fit(X_train, y_train)\ny_pred = lgbm.predict(X_test)\ny_prob = lgbm.predict_proba(X_test)[:,1]\n\n# Metrics\nresults.iloc[0, 2] = round(precision_score(y_test, y_pred), 2)\nresults.iloc[1, 2] = round(recall_score(y_test, y_pred), 2)\nresults.iloc[2, 2] = round(f1_score(y_test, y_pred), 2)\nresults.iloc[3, 2] = round(roc_auc_score(y_test, y_prob), 3)\nlgbm_cm = confusion_matrix(y_test, y_pred)\n\nprint(classification_report(y_test, y_pred))\nprint(f'ROC AUC score: {round(roc_auc_score(y_test, y_prob), 3)}')\nprint('')\nprint('-----------------------------------------------------')\nprint('')\nprint('Cross-validation scores with 5 folds:')\nprint('')\nprint(f\"ROC AUC: {round(cross_val_score(lgbm, X, y, cv = 5, scoring = 'roc_auc').mean(), 3)}\")\nprint(f\"precision: {round(cross_val_score(lgbm, X, y, cv = 5, scoring = 'precision').mean(), 2)}\")\nprint(f\"recall: {round(cross_val_score(lgbm, X, y, cv = 5, scoring = 'recall').mean(), 2)}\")\nprint(f\"f1: {round(cross_val_score(lgbm, X, y, cv = 5, scoring = 'f1').mean(), 2)}\")\n\n# Visualize confusion matrix\nplt.figure(figsize = (8, 5))\nsns.heatmap(lgbm_cm, cmap = 'Blues', annot = True, fmt = 'd', linewidths = 5, cbar = False, annot_kws = {'fontsize': 15},\n           yticklabels = ['Stayed', 'Left'], xticklabels = ['Predicted stayed', 'Predicted left'])\nplt.yticks(rotation = 0)\nplt.show()\n\n# Roc curve\nfalse_positive_rate, true_positive_rate, thresholds = roc_curve(y_test, y_prob)\nroc_auc = auc(false_positive_rate, true_positive_rate)\n\nsns.set_theme(style = 'white')\nplt.figure(figsize = (8, 8))\nplt.plot(false_positive_rate,true_positive_rate, color = '#b01717', label = 'AUC = %0.3f' % roc_auc)\nplt.legend(loc = 'lower right')\nplt.plot([0, 1], [0, 1], linestyle = '--', color = '#174ab0')\nplt.axis('tight')\nplt.ylabel('True Positive Rate')\nplt.xlabel('False Positive Rate')\nplt.show()\n\n# Feature importance\nf_imp3 = pd.DataFrame(columns = ['feature', 'importance'], index = range(19))\nfor i in range(len(f_imp3.index)):\n    f_imp3.iloc[i, 0] = X_train.columns.to_list()[i]\nf_imp3['importance'] = lgbm.feature_importances_\nf_imp3 = f_imp3.sort_values('importance', ascending = False)\nf_imp3[0:12].style.background_gradient(cmap = 'Blues')","f67dd83b":"xgb = XGBClassifier(random_state = 22, max_depth = 5, objective = 'binary:logistic', eval_metric = 'logloss')\nxgb.fit(X_train, y_train)\ny_pred = xgb.predict(X_test)\ny_prob = xgb.predict_proba(X_test)[:,1]\n\n# Metrics\nresults.iloc[0, 3] = round(precision_score(y_test, y_pred), 2)\nresults.iloc[1, 3] = round(recall_score(y_test, y_pred), 2)\nresults.iloc[2, 3] = round(f1_score(y_test, y_pred), 2)\nresults.iloc[3, 3] = round(roc_auc_score(y_test, y_prob), 3)\nxgb_cm = confusion_matrix(y_test, y_pred)\n\nprint(classification_report(y_test, y_pred))\nprint(f'ROC AUC score: {round(roc_auc_score(y_test, y_prob), 3)}')\nprint('')\nprint('-----------------------------------------------------')\nprint('')\nprint('Cross-validation scores with 5 folds:')\nprint('')\nprint(f\"ROC AUC: {round(cross_val_score(xgb, X, y, cv = 5, scoring = 'roc_auc').mean(), 3)}\")\nprint(f\"precision: {round(cross_val_score(xgb, X, y, cv = 5, scoring = 'precision').mean(), 2)}\")\nprint(f\"recall: {round(cross_val_score(xgb, X, y, cv = 5, scoring = 'recall').mean(), 2)}\")\nprint(f\"f1: {round(cross_val_score(xgb, X, y, cv = 5, scoring = 'f1').mean(), 2)}\")\n\n# Visualize confusion matrix\nplt.figure(figsize = (8, 5))\nsns.heatmap(xgb_cm, cmap = 'Blues', annot = True, fmt = 'd', linewidths = 5, cbar = False, annot_kws = {'fontsize': 15},\n           yticklabels = ['Stayed', 'Left'], xticklabels = ['Predicted stayed', 'Predicted left'])\nplt.yticks(rotation = 0)\nplt.show()\n\n# Roc curve\nfalse_positive_rate, true_positive_rate, thresholds = roc_curve(y_test, y_prob)\nroc_auc = auc(false_positive_rate, true_positive_rate)\n\nsns.set_theme(style = 'white')\nplt.figure(figsize = (8, 8))\nplt.plot(false_positive_rate,true_positive_rate, color = '#b01717', label = 'AUC = %0.3f' % roc_auc)\nplt.legend(loc = 'lower right')\nplt.plot([0, 1], [0, 1], linestyle = '--', color = '#174ab0')\nplt.axis('tight')\nplt.ylabel('True Positive Rate')\nplt.xlabel('False Positive Rate')\nplt.show()\n\n# Feature importance\nf_imp4 = pd.DataFrame(columns = ['feature', 'importance'], index = range(19))\nfor i in range(len(f_imp4.index)):\n    f_imp4.iloc[i, 0] = X_train.columns.to_list()[i]\nf_imp4['importance'] = xgb.feature_importances_\nf_imp4 = f_imp4.sort_values('importance', ascending = False)\nf_imp4[0:12].style.background_gradient(cmap = 'Blues')","3ea8f7d2":"plt.figure(figsize = (10, 7))\nsns.heatmap(results[results.columns.to_list()].astype(float), cmap = 'Blues', annot = True, linewidths = 1, cbar = False, annot_kws = {'fontsize': 12},\n           yticklabels = ['Precision', 'Recall', 'F1', 'ROC AUC'])\nsns.set(font_scale = 1.5)\nplt.yticks(rotation = 0)\nplt.show()","40e7de3f":"**The most important factors affecting customer churn:**\n\n1. Pensioners and who are not married are more likely to leave.\n2. The company has obvious problems with the Internet on fiber optic.\n3. Lack of online security, online backup, device protection and technical support.\n4. Customers who leave the company mostly have a month-to-month payment, \u0441ustomers who have a contract for 1 and 2 years almost do not leave the company.\n5. Customers who pay for services by electronic check are more likely to leave the company than others.","c9282999":"**Distribution of customer churn by streaming services**","a4e3e2df":"# LGBM","bf7f72ef":"**Distribution of customer churn by phone and internet services**","bcf34df7":"# XGB","02891ae4":"**Distribution of customer churn by type of contract and method of payment**","56b9852b":"# Random Forest","d1766139":"# Logistic Regression","74fdaa48":"# Conclusions of the EDA","c242c515":"There are 10 missing values. Therefore, you should always carefully double-check the data.","5c2ce91d":"**Distribution of customer churn by device protection and tech support**","5c9a370b":"**Affect of having a spouse and retirement on customer churn**","407a0c0d":"Total charges there is as object, but this column contains float, so when I tried to change the column type, it returned an error, because there are missing values in the form of an empty string, let's fix it","dcb4f223":"The missing values are actually there","5fee8b95":"**Customer churn**","d0e4d78d":"**In my opinion, for a telecommunications company, it is not so much important to know exactly who will leave the company, but all those who may leave. All models without any tuning can find half of the potential customers to leave with precision of ~68%. If there were data on more customers and tune the models, it would be a great help for the company.**","6b5c9522":"Table for results","5bae8d50":"**Affect of charges and duration of use on customer churn**","204dc3a4":"# Preprocessing","aa03da26":"# EDA","da8c21bc":"# Modeling","e8d30d18":"# Conclusion","26f6bd00":"**For this analysis I will use 5 models:**\n\n1. Logistic Regression.\n2. Random Forest.\n3. LGBM.\n4. XGB.","ba7f1f82":"**Distribution of customer churn by online security and backup**","3b8584a9":"![](https:\/\/images11.popmeh.ru\/upload\/img_cache\/f69\/f694ce60664fa7133e727a6f72cd8384_ce_2000x1050x0x265_fitted_1260x700.jpeg)","aa942e85":"# Basic information"}}