{"cell_type":{"a16e37cc":"code","5138cbf5":"code","e3a309f8":"code","4b9c43d0":"code","363508e4":"code","4205c21c":"code","817f01f5":"code","4b6361fc":"code","efd3c632":"code","f40b3bc2":"code","e709e56f":"code","afa2af6c":"code","31b0b943":"code","2ec1009f":"code","2362cbfb":"code","a7684690":"code","4f8cb26e":"code","4e0227d6":"code","666be934":"code","6a63a80f":"code","663cab63":"code","627e51fa":"code","e0e0657d":"code","9ae925d2":"code","ec13b049":"code","e55f322a":"code","50416e7e":"code","05a93ba8":"code","fd3b390b":"code","8af22917":"markdown","41383a92":"markdown"},"source":{"a16e37cc":"import tensorflow as tf\nimport os\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\n%matplotlib inline\nfrom tensorflow.keras.preprocessing import image\nfrom keras.preprocessing.image import ImageDataGenerator,load_img, img_to_array\nfrom tensorflow.keras.metrics import categorical_crossentropy\nfrom keras.models import Sequential, Model\nfrom keras.layers import Conv2D, MaxPooling2D,GlobalAveragePooling2D\nfrom keras.layers import Activation, Dropout, BatchNormalization, Flatten, Dense, AvgPool2D,MaxPool2D\nfrom keras.models import Sequential, Model\nfrom keras.applications.vgg16 import VGG16, preprocess_input\nfrom keras.optimizers import Adam, SGD, RMSprop\nfrom keras import backend as K\nimport cv2\nimport shutil\nimport glob","5138cbf5":"from pathlib import Path\ntrain_path = Path(\"..\/input\/a-large-scale-fish-dataset\/Fish_Dataset\/Fish_Dataset\")\ntrain_path.glob(r'**\/*.png')","e3a309f8":"filepath = list(train_path.glob(r'**\/*.png'))\nfilepath","4b9c43d0":"os.path.split(filepath[0]) #how splitting works\n","363508e4":"os.path.split(os.path.split(filepath[0])[1]) ","4205c21c":"len(list(map(lambda x: os.path.split(os.path.split(x)[0])[1],filepath)))","817f01f5":"classes = list(map(lambda x: os.path.split(os.path.split(x)[0])[1],filepath))\n","4b6361fc":"df = pd.concat([pd.Series(filepath).astype(str), pd.Series(classes)], axis=1)\ndf.columns = ['Images', 'Image_label']","efd3c632":"df.head()","f40b3bc2":"df.tail()","e709e56f":"#we need to remove Ground Truth images that is in short GT\n\ndf = df[df['Image_label'].apply(lambda x: x[-2:] != 'GT')]  #removing\ndf.tail()","afa2af6c":"df.head()","31b0b943":"df.shape   #shape is (9000,2) from (18000,2) because we removed all the 9000 files containing GT","2ec1009f":"from sklearn.model_selection import train_test_split\ntrain,  test = train_test_split(df, test_size = 0.2, random_state = 42)\ntrain_new, valid = train_test_split(train, test_size = 0.2, random_state = 42)\nprint(f\"train set shape: {train_new.shape}\")\nprint(f\"test set shape: {test.shape}\")\nprint(f\"validation set shape: {valid.shape}\")","2362cbfb":"train_datagen = ImageDataGenerator(rescale = 1.\/255.,rotation_range = 40, width_shift_range = 0.2, height_shift_range = 0.2, \n                                   shear_range = 0.2, zoom_range = 0.2, horizontal_flip = True, vertical_flip =True)\ntest_datagen = ImageDataGenerator(rescale = 1.0\/255.)","a7684690":"\ntrain_gen = train_datagen.flow_from_dataframe(dataframe = train_new,\n                                              x_col = 'Images', y_col ='Image_label',\n                                              target_size = (200,200), batch_size = 512, \n                                              class_mode = 'categorical', shuffle = True)\nval_gen = train_datagen.flow_from_dataframe(valid, \n                                            target_size=(200,200), x_col = 'Images', y_col ='Image_label', \n                                            class_mode='categorical',\n                                            batch_size= 512, shuffle=True)\ntest_gen = test_datagen.flow_from_dataframe(test,\n                                            target_size = (200,200), x_col = 'Images', y_col ='Image_label',\n                                             class_mode = 'categorical',\n                                            batch_size = 512, shuffle = False)","4f8cb26e":"train_gen.class_indices","4e0227d6":"\nbase_model = tf.keras.applications.ResNet50V2(weights='imagenet', input_shape = (200,200,3),\n                                                     include_top=False)\n\nfor layer in base_model.layers:\n    layer.trainable = False\n    \nbase_model.summary()    ","666be934":"model = Sequential()\nmodel.add(base_model)\nmodel.add(GlobalAveragePooling2D())\nmodel.add(Dense(128))\nmodel.add(Dropout(0.2))\nmodel.add(Dense(9, activation = 'softmax'))\nmodel.summary()","6a63a80f":"callbacks = tf.keras.callbacks.EarlyStopping(monitor='val_loss', patience=2)\nmodel.compile(loss='categorical_crossentropy', optimizer=Adam(lr=0.001), metrics=['accuracy'])","663cab63":"history = model.fit(train_gen, validation_data = val_gen, epochs = 10, \n                    callbacks = [callbacks], verbose = 1)","627e51fa":"predictions = model.predict(test_gen)\npreds = np.argmax(predictions, axis=1)\npreds","e0e0657d":"labels = train_gen.class_indices\nlabels","9ae925d2":"labels = dict((v,k) for k,v in labels.items())\nlabels","ec13b049":"preds = [labels[k] for k in preds]\npreds","e55f322a":"#visualize test set\ntest.head()","50416e7e":"from sklearn.metrics import confusion_matrix, classification_report\nmatrix = confusion_matrix(test.Image_label , preds)\n\nmatrix","05a93ba8":"print(classification_report(test.Image_label, preds))","fd3b390b":"from sklearn.metrics import accuracy_score\naccuracy_score(test.Image_label, preds)","8af22917":"# **98% accuracy**","41383a92":"# Upvote if you like it or fork it :)"}}