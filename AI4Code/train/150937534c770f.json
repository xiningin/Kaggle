{"cell_type":{"6fe19387":"code","b2858d4b":"code","c9aafd84":"code","6687717c":"code","6794de6c":"code","15ee7600":"code","21650682":"code","22577ec8":"code","ab4bb9bd":"code","fffe9e25":"code","f32d94de":"code","3194c6bd":"code","a60b06b5":"code","626603e8":"code","3091ac2d":"code","7fb1425b":"code","7214812c":"code","c042f3c4":"code","cdfaac5f":"code","1f03aa2a":"code","5991eb13":"code","fbdb30d9":"code","ca5a6fe6":"code","5ed41535":"code","ab78b947":"code","b526b68d":"code","ea4c28e4":"code","7afb62ff":"code","6509046d":"code","d71396db":"code","c5fcc92b":"code","86db3a70":"code","7fa3923c":"code","36e6bfef":"code","e027e6fe":"code","e5f9307f":"code","b9616fc4":"code","73b94849":"code","dabd9ecf":"code","79af0910":"code","346676b4":"code","05417891":"code","cffcff96":"code","cbfa5908":"markdown","681692e3":"markdown","452168f8":"markdown"},"source":{"6fe19387":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","b2858d4b":"raw_lux_df = pd.read_csv(\"..\/input\/bandung-meteorologycal-data\/lux.csv\")\nraw_temp_1_df = pd.read_csv(\"..\/input\/bandung-meteorologycal-data\/temp_1.csv\")\nraw_temp_2_df = pd.read_csv(\"..\/input\/bandung-meteorologycal-data\/temp_2.csv\")\n\n#look for data column info\nraw_lux_df.head","c9aafd84":"#Making new DataFrame for what we need and rename it, also merge it\nnew_lux_df = raw_lux_df.loc[:,[\"_time\", \"_value\"]]\nnew_temp_1_df = raw_temp_1_df.loc[:,[\"_time\", \"_value\"]]\nnew_temp_2_df = raw_temp_2_df.loc[:,[\"_time\", \"_value\"]]\n\ndf_nulled = pd.merge(new_lux_df, new_temp_1_df, on=\"_time\")\ndf_nulled = pd.merge(df_nulled, new_temp_2_df, on=\"_time\")\n\n#lets take a look\ndf_nulled.head","6687717c":"#Let's find more about their datatypes\ndf_nulled.dtypes","6794de6c":"\ndf_nulled.rename(columns={\n    \"_value_x\":\"lux\", \n    \"_value_y\":\"temp_1\",\n    \"_value\" : \"temp_2\",\n    \"_time\":\"time\"}, inplace=True)\ndf_nulled['time'] = pd.to_datetime(df_nulled['time'])\ndf_nulled.set_index('time', inplace=True)\ndf_nulled_dated = df_nulled.tz_convert(\"Asia\/Jakarta\")\ndf_nulled_dated","15ee7600":"import seaborn as sns\nimport matplotlib.pyplot as plt","21650682":"#for Temp\ndf_nulled_dated.plot.hist(x='lux',alpha=0.5)\ndf_nulled_dated.plot.hist(alpha=0.5)","22577ec8":"sns.distplot(df_nulled_dated[\"temp_1\"])","ab4bb9bd":"sns.distplot(df_nulled_dated[\"temp_2\"])\n","fffe9e25":"sns.distplot(df_nulled_dated[\"lux\"])","f32d94de":"ax = sns.heatmap(df_nulled_dated, yticklabels=False)","3194c6bd":"ax_time_temp = df_nulled_dated.plot.line(subplots=True)","a60b06b5":"df_interpolated_cubical = df_nulled_dated.interpolate(\"cubic\")\ndf_interpolated_quadratic = df_nulled_dated.interpolate(\"quadratic\")\ndf_ffil = df_nulled_dated.ffill()","626603e8":"axC = sns.heatmap(df_interpolated_cubical\n                      , yticklabels=False)","3091ac2d":"axQ = sns.heatmap(df_interpolated_quadratic\n                      , yticklabels=False)","7fb1425b":"axF = sns.heatmap(df_ffil\n                      , yticklabels=False)","7214812c":"%matplotlib inline\ndf_interpolated_cubical.plot.line(subplots=True)\ndf_interpolated_quadratic.plot.line(subplots=True)\ndf_ffil.plot.line(subplots=True)","c042f3c4":"df_interpolated_time = df_nulled_dated.interpolate(\"time\")\ndf_interpolated_time.plot.line(subplots=True)","cdfaac5f":"df = df_interpolated_time\ndf.plot.box(subplots = True, grid = True)","1f03aa2a":"df = df_interpolated_time\ndf[\"temp_1\"].plot.box()","5991eb13":"df = df_interpolated_time\ndf[\"temp_2\"].plot.box()","fbdb30d9":"df.info()\nQ1 = df.quantile(0.25)\nQ3 = df.quantile(0.75)\nIQR = Q3-Q1\nprint(IQR)","ca5a6fe6":"df[\"lux\"] = np.where(df[\"lux\"] < Q1[\"lux\"]- IQR[\"lux\"]*1.5, Q1[\"lux\"], df[\"lux\"])\ndf[\"temp_1\"] = np.where(df[\"temp_1\"] < Q1[\"temp_1\"]- IQR[\"temp_1\"]*1.5, Q1[\"temp_1\"], df[\"temp_1\"])\ndf[\"temp_2\"] = np.where(df[\"temp_2\"] < Q1[\"temp_2\"]- IQR[\"temp_2\"]*1.5, Q1[\"temp_2\"], df[\"temp_2\"])\n\ndf[\"lux\"] = np.where(df[\"lux\"] > Q3[\"lux\"] + IQR[\"lux\"]*1.5, Q3[\"lux\"], df[\"lux\"])\ndf[\"temp_1\"] = np.where(df[\"temp_1\"] > Q3[\"temp_1\"] + IQR[\"temp_1\"]*1.5, Q3[\"temp_1\"], df[\"temp_1\"])\ndf[\"temp_2\"] = np.where(df[\"temp_2\"] > Q3[\"temp_2\"] + IQR[\"temp_2\"]*1.5, Q3[\"temp_2\"], df[\"temp_2\"])\n\ndf.describe()","5ed41535":"df.skew()","ab78b947":"df.plot.box(subplots = True, grid = True)","b526b68d":"plot_temp_time = sns.lineplot(data=[df[\"temp_1\"],df[\"temp_2\"]])","ea4c28e4":"plot_temp_time = sns.lineplot(data=df[\"lux\"])","7afb62ff":"df_d_avg = df.resample(\"D\").mean()\ndf_h_avg = df.resample(\"H\").mean()","6509046d":"ax_davg_temp = sns.lineplot(data=[df_d_avg[\"temp_1\"],df_d_avg[\"temp_2\"]])","d71396db":"ax_davg_lux = sns.lineplot(data=df_d_avg[\"lux\"])","c5fcc92b":"by_day = df.groupby(df.index.day).mean()\nby_day['lux'].plot.line(ylabel=\"Lux\",xticks=by_day.index, grid=True)","86db3a70":"by_day[['temp_1','temp_2']].plot.line(ylabel=\"Temperature\",xticks=by_day.index, grid=True)","7fa3923c":"by_hour = df.groupby(df.index.hour).mean()\nby_hour['lux'].plot.line(ylabel=\"Lux\",xticks=by_hour.index,grid=True)","36e6bfef":"by_hour[['temp_1','temp_2']].plot.line(ylabel=\"Temperature\",xticks=by_hour.index, grid=True)","e027e6fe":"ax_havg_lux = sns.lineplot(data=df_h_avg[\"lux\"])","e5f9307f":"ax_havg_temp = sns.lineplot(data=[df_h_avg[\"temp_1\"],df_h_avg[\"temp_2\"]])","b9616fc4":"line_all = sns.lineplot(data=df)","73b94849":"#using multiplication\nscaled_df = df.copy()\nscaled_df[\"temp_1\"] = scaled_df[\"temp_1\"]*300\nscaled_df[\"temp_2\"] = scaled_df[\"temp_2\"]*300\nscaled_df.plot.line()","dabd9ecf":"df","79af0910":"corr_hmap = sns.heatmap(df.corr(), vmin=-1, vmax=1, annot = True)","346676b4":"regplt_t2 = sns.regplot(x=df[\"temp_2\"], y=df[\"lux\"], data=df, fit_reg=True)","05417891":"regplt_t1 = sns.regplot(x=df[\"temp_1\"], y=df[\"lux\"], data=df, fit_reg=True)","cffcff96":"by_hour","cbfa5908":"**Temperature Vs Time**","681692e3":"**Start Analyzing**\n<h1>Analysis<\/h1>\n\nAfter cleaning and preprocess the data, it's time to explore and analyze it.","452168f8":"To make it easier to read"}}