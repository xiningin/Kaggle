{"cell_type":{"4433b2ee":"code","3579c314":"code","376a284d":"code","305eccd6":"code","a2eddd87":"code","bb83cd7b":"code","a31ec4b8":"code","d3272322":"code","c0825f37":"code","acd17840":"code","231681ae":"code","4cb7f78e":"code","5136b088":"code","2de7d9a2":"code","ec5f05b1":"code","2a591dcd":"code","4a787e33":"code","fb92592b":"code","029e8217":"code","fd6a34b6":"code","3144fbde":"markdown","cd78a1b7":"markdown","e24cd29c":"markdown","918a9297":"markdown","ec2b2182":"markdown","40bc5f7d":"markdown","088d3bf9":"markdown","cc8cfa64":"markdown","9a016f27":"markdown","2ff1b2ba":"markdown","1a144041":"markdown"},"source":{"4433b2ee":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","3579c314":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom wordcloud import WordCloud, STOPWORDS\n\nplt.style.use('ggplot')\n\nfrom plotly.offline import init_notebook_mode, iplot\nimport cufflinks\ncufflinks.go_offline()\ncufflinks.set_config_file(world_readable=True, theme='pearl')\nimport plotly.graph_objs as go\nimport plotly\nimport plotly.express as px\nimport plotly.figure_factory as ff","376a284d":"df= pd.read_csv('\/kaggle\/input\/us-presidential-debatefinal-october-2020\/Presidential_ debate_USA_ final_October_ 2020.csv')","305eccd6":"df.info()","a2eddd87":"print(f'There are {df.shape[0]} rows and {df.shape[1]} columns in our dataset')","bb83cd7b":"df.head()","a31ec4b8":"df.rename(columns= {'TOPIC':'topic'}, inplace= True)\ndf.drop(columns='Unnamed: 0', axis= 1, inplace= True)","d3272322":"df['topic']= df.topic.apply(lambda x: x.split(':')[1])\ndf['topic']= df.topic.apply(lambda x: x.strip())\ndf['speech']= df.speech.apply(lambda x: x.strip())\ndf['speech']= df.speech.apply(lambda x: x.replace(',', ''))","c0825f37":"df['speech2']= df.speech.apply(lambda x: x.split(' '))\ndf['length']= df.speech2.apply(lambda x: len(x))","acd17840":"color_pal= ['rgb(221, 204, 119)','rgb(136, 204, 238)', 'rgb(204, 102, 119)']\ncolor_pal2 = ['rgb(136, 204, 238)', 'rgb(204, 102, 119)', 'rgb(221, 204, 119)', 'rgb(17, 119, 51)', 'rgb(51, 34, 136)', 'rgb(170, 68, 153)', 'rgb(68, 170, 153)', 'rgb(153, 153, 51)']","231681ae":"speaker_count= df.speaker.value_counts().sort_values()\npx.bar(speaker_count, x=speaker_count.index, y= speaker_count.values, title= 'Speaker Instance Count', \n       color= color_pal, color_discrete_map=\"identity\",\n      labels= {'index':'Speaker', 'y':'Count'})","4cb7f78e":"topic_count= df.topic.value_counts().sort_values()\npx.bar(speaker_count, x=topic_count.index, y= topic_count.values, \n       title= 'Topic Count Instance', labels= {'x':'Topic', 'y':'Count'}, \n       color= color_pal2, \n       color_discrete_map=\"identity\")","5136b088":"b = df.groupby(['topic', 'speaker']).sum().reset_index().sort_values(by='length')\npx.bar(b, x='topic', y='length', color= 'speaker', \n       labels={'topic': 'Topic', 'length':'Words Spoken', 'speaker':'Speaker'},\n       title= 'Words Spoken Per Topic', \n       color_discrete_sequence= color_pal)","2de7d9a2":"trump = df.loc[df.speaker == 'TRUMP', :]\nbiden = df.loc[df.speaker == 'BIDEN', :]","ec5f05b1":"print(pd.Series(trump.speech2.sum()).nunique())\nprint(pd.Series(biden.speech2.sum()).nunique())","2a591dcd":"labels = ['Trump','Biden']\nvalues = [1649, 1743]\n\nfig = go.Figure(data=[go.Pie(labels=labels, values=values, hole=.3)])\nfig.update_layout(title_text='Unique Word Count Per Candidate')\nfig.show()","4a787e33":"plt.figure(figsize=(15,8))\nplt.title('Histogram Per Speaker')\nsns.kdeplot(trump.length, label= 'Trump')\nsns.kdeplot(biden.length, label= 'Biden')","fb92592b":"def get_text(column):\n    words = ''\n    for text in column:\n        words += text\n    return words","029e8217":"text1 = get_text(trump.speech)\n\nstopwords = set(STOPWORDS)\nwc = WordCloud(background_color= 'black', stopwords= stopwords,\n              width=1600, height=800)\n\nwc.generate(text1)\nplt.figure(figsize=(14,10), facecolor='k')\nplt.axis('off')\nplt.tight_layout(pad=0)\nplt.imshow(wc)\nplt.show()","fd6a34b6":"text2 = get_text(biden.speech)\n\nstopwords = set(STOPWORDS)\nwc = WordCloud(background_color= 'black', stopwords= stopwords,\n              width=1600, height=800)\n\nwc.generate(text2)\nplt.figure(figsize=(14,10), facecolor='k')\nplt.axis('off')\nplt.tight_layout(pad=0)\nplt.imshow(wc)\nplt.show()","3144fbde":"# 3. EDA","cd78a1b7":"![](https:\/\/media.npr.org\/assets\/img\/2020\/10\/19\/2020-10-22-biden-trump_debate-faq_wide-3ac15f12e01e48307f6112269a9fa25092d7e09d.jpg?s=2000)","e24cd29c":"## More wordclouds will be added along with NLP","918a9297":"# Final Presidential Debate Analysis","ec2b2182":"# 2. Feature Engineering ","40bc5f7d":"## 3.1 Trump Wordcloud","088d3bf9":"# 1. Overview","cc8cfa64":"## 3.2 Biden Wordcloud","9a016f27":"## 1.1 Cleaning dataset","2ff1b2ba":"Election season is in full swing as President Donald Trump debated former Vice President Joe Biden for the final time on Thursday October 22nd. I've performed a light exploritory data analysis on the debate in hopes to uncover insights inconspicuous on first viewing. This debate was moderated very appropriately analogous to the first debate between the two candidates. Please feel free to point out any flaws, or areas where I can improve; always willing to accept criticism. ","1a144041":"# 3. Wordcloud"}}