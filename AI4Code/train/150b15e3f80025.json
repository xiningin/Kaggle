{"cell_type":{"eedd3e41":"code","6aaad43e":"code","71d93152":"code","e6ff28ae":"code","a2690ff5":"code","3bb2b008":"code","b0b00676":"code","7ae9541f":"code","dd51327b":"code","068ccc2e":"code","8aabb22b":"code","73364d6f":"code","f64a4c1b":"code","fad09859":"code","bb29a211":"code","6f2cc577":"code","a60b984a":"code","a8b63afb":"code","971eadec":"code","2d628357":"code","7bd525b0":"code","2cc641e7":"code","1fb29ceb":"code","09216195":"code","d2bbf95d":"code","a1d31e94":"code","c7e2672b":"code","d21a1046":"code","0ab53c40":"code","9efa019d":"code","73e9cbc4":"code","af247443":"code","5daa4a31":"code","3eb6faf4":"code","cb4adc04":"code","37c7e40e":"markdown","c87cd86a":"markdown","b36b605a":"markdown","b784200b":"markdown","ab952941":"markdown","4f89324b":"markdown","1344acc4":"markdown","41bd9288":"markdown","7348ae1a":"markdown","c1685658":"markdown","1a93d987":"markdown","be58dad7":"markdown"},"source":{"eedd3e41":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport plotly.express as px\nimport plotly.graph_objs as go\n\nimport plotly\nplotly.offline.init_notebook_mode(connected=True)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","6aaad43e":"df = pd.read_csv('..\/input\/skincare-products-and-their-ingredients\/skincare_products.csv', encoding='utf8')\npd.set_option('display.max_columns', None)\ndf.head()","71d93152":"#Codes by https:\/\/www.kaggle.com\/muhammadismail99\/data-analysis-of-guf-pub-dataset\/notebook\n\nsns.countplot(data = df, x = 'product_type')\nplt.title('Product Type')\nplt.xticks(rotation=45)","e6ff28ae":"product=df['product_type'].value_counts().sort_index()\ndata = [go.Pie(\n        labels = product.index,\n        values = product.values,\n        hoverinfo = 'label+value',\n)]\nplotly.offline.iplot(data, filename='ingredients')","a2690ff5":"!pip install pywaffle","3bb2b008":"from pywaffle import Waffle\nimport random","b0b00676":"care = df[\"product_type\"].value_counts()\n\nplt.figure(\n    FigureClass=Waffle,\n    rows=5,\n    columns=10,\n    values=care,\n    title={'label': 'Skin Care Products Distribution', 'loc': 'left'},\n    labels=[\"{}({})\".format(a, b) for a, b in zip(care.index, care) ],\n    icons='star',\n    # Set the position of the legend\n    legend={'loc': 'upper left', 'bbox_to_anchor': (1, 1)},\n    dpi=100\n)\nplt.show()","7ae9541f":"df[\"product_type\"].value_counts().plot.barh(figsize = (8,6), color='magenta', title=\"Skin Care Products\")","dd51327b":"#Codes by Pooja Jain https:\/\/www.kaggle.com\/jainpooja\/av-guided-hackathon-predict-youtube-likes\/notebook\n\ntext_cols = ['product_name', 'product_type', 'ingredients', 'product_url']\n\nfrom wordcloud import WordCloud, STOPWORDS\n\nwc = WordCloud(stopwords = set(list(STOPWORDS) + ['|']), random_state = 42)\nfig, axes = plt.subplots(2, 2, figsize=(20, 12))\naxes = [ax for axes_row in axes for ax in axes_row]\n\nfor i, c in enumerate(text_cols):\n  op = wc.generate(str(df[c]))\n  _ = axes[i].imshow(op)\n  _ = axes[i].set_title(c.upper(), fontsize=24)\n  _ = axes[i].axis('off')\n\n#_ = fig.delaxes(axes[4])","068ccc2e":"#word cloud\nfrom wordcloud import WordCloud, ImageColorGenerator\ntext = \" \".join(str(each) for each in df.product_url)\n# Create and generate a word cloud image:\nwordcloud = WordCloud(max_words=200,colormap='Pastel1', background_color=\"black\").generate(text)\nplt.figure(figsize=(10,6))\nplt.figure(figsize=(15,10))\n# Display the generated image:\nplt.imshow(wordcloud, interpolation='Bilinear')\nplt.axis(\"off\")\nplt.figure(1,figsize=(12, 12))\nplt.show()","8aabb22b":"#Creating a function to process the texts\n\nimport re\nimport string\n\n\ndef wordopt(text):\n    text = text.lower()\n    text = re.sub('\\[.*?\\]', '', text)\n    text = re.sub(\"\\\\W\",\" \",text) \n    text = re.sub('https?:\/\/\\S+|www\\.\\S+', '', text)\n    text = re.sub('<.*?>+', '', text)\n    text = re.sub('[%s]' % re.escape(string.punctuation), '', text)\n    text = re.sub('\\n', '', text)\n    text = re.sub('\\w*\\d\\w*', '', text)    \n    return text","73364d6f":"df[\"ingredients\"] = df[\"ingredients\"].apply(wordopt)","f64a4c1b":"#Defining dependent and independent variables\n\nx = df[\"ingredients\"]\ny = df[\"product_type\"]","fad09859":"from sklearn.model_selection import train_test_split\nfrom sklearn.metrics import accuracy_score\nfrom sklearn.metrics import classification_report","bb29a211":"x_train, x_test, y_train, y_test = train_test_split(x, y, test_size=0.25)","6f2cc577":"#Convert text to vectors\n\nfrom sklearn.feature_extraction.text import TfidfVectorizer\n\nvectorization = TfidfVectorizer()\nxv_train = vectorization.fit_transform(x_train)\nxv_test = vectorization.transform(x_test)","a60b984a":"from sklearn.linear_model import LogisticRegression\n\nLR = LogisticRegression()\nLR.fit(xv_train,y_train)","a8b63afb":"pred_lr=LR.predict(xv_test)","971eadec":"LR.score(xv_test, y_test)","2d628357":"print(classification_report(y_test, pred_lr))","7bd525b0":"from sklearn.tree import DecisionTreeClassifier\n\nDT = DecisionTreeClassifier()\nDT.fit(xv_train, y_train)","2cc641e7":"pred_dt = DT.predict(xv_test)","1fb29ceb":"DT.score(xv_test, y_test)","09216195":"print(classification_report(y_test, pred_dt))","d2bbf95d":"from sklearn.ensemble import GradientBoostingClassifier\n\nGBC = GradientBoostingClassifier(random_state=0)\nGBC.fit(xv_train, y_train)","a1d31e94":"pred_gbc = GBC.predict(xv_test)","c7e2672b":"GBC.score(xv_test, y_test)","d21a1046":"print(classification_report(y_test, pred_gbc))","0ab53c40":"from sklearn.ensemble import RandomForestClassifier\n\nRFC = RandomForestClassifier(random_state=0)\nRFC.fit(xv_train, y_train)","9efa019d":"pred_rfc = RFC.predict(xv_test)","73e9cbc4":"RFC.score(xv_test, y_test)","af247443":"print(classification_report(y_test, pred_rfc))","5daa4a31":"def output_lable(n):\n    if n == 0:\n        return \"Skin Care\"\n    elif n == 1:\n        return \"Not Skin Care\"\n    \ndef manual_testing(news):\n    testing_news = {\"ingredients\":[news]}\n    new_def_test = pd.DataFrame(testing_news)\n    new_def_test[\"ingredients\"] = new_def_test[\"ingredients\"].apply(wordopt) \n    new_x_test = new_def_test[\"ingredients\"]\n    new_xv_test = vectorization.transform(new_x_test)\n    pred_LR = LR.predict(new_xv_test)\n    pred_DT = DT.predict(new_xv_test)\n    pred_GBC = GBC.predict(new_xv_test)\n    pred_RFC = RFC.predict(new_xv_test)\n\n    return print(\"\\n\\nLR Prediction: {} \\nDT Prediction: {} \\nGBC Prediction: {} \\nRFC Prediction: {}\".format(output_lable(pred_LR[0]), \n                                                                                                              output_lable(pred_DT[0]), \n                                                                                                              output_lable(pred_GBC[0]), \n                                                                                                              output_lable(pred_RFC[0])))","3eb6faf4":"#news = str(input())\n#manual_testing(news)","cb4adc04":"#Code by Olga Belitskaya https:\/\/www.kaggle.com\/olgabelitskaya\/sequential-data\/comments\nfrom IPython.display import display,HTML\nc1,c2,f1,f2,fs1,fs2=\\\n'#eb3434','#eb3446','Akronim','Smokum',30,15\ndef dhtml(string,fontcolor=c1,font=f1,fontsize=fs1):\n    display(HTML(\"\"\"<style>\n    @import 'https:\/\/fonts.googleapis.com\/css?family=\"\"\"\\\n    +font+\"\"\"&effect=3d-float';<\/style>\n    <h1 class='font-effect-3d-float' style='font-family:\"\"\"+\\\n    font+\"\"\"; color:\"\"\"+fontcolor+\"\"\"; font-size:\"\"\"+\\\n    str(fontsize)+\"\"\"px;'>%s<\/h1>\"\"\"%string))\n    \n    \ndhtml('Be patient. Mar\u00edlia Prata, @mpwolke was Here.' )","37c7e40e":"#Logistic Regression","c87cd86a":"#Random Forest Classifier","b36b605a":"Creating a function to process the texts","b784200b":"#Codes by Sameer Patel  https:\/\/www.kaggle.com\/therealsampat\/fake-news-detection\/notebook","ab952941":"#Model Testing","4f89324b":"#Splitting Training and Testing","1344acc4":"![](https:\/\/www.grandviewresearch.com\/static\/img\/research\/us-skin-care-products-market.png)grandviewresearch.com","41bd9288":"![](https:\/\/d2hy56m2o6qi9y.cloudfront.net\/wp-content\/uploads\/2018\/05\/14212145\/Morning-skincare-routine-5.jpg)hudabeauty.com","7348ae1a":"#That script is for Fake News. The next snippet does Not make any sense. The Notebook stopped here.","c1685658":"Daily Care\n\nSTEP 1: CLEANSER. In the morning, start by splashing your face with warm water or, if you must, wash with a gentle face cleanser designed for your skin type\n\nSTEP 2: TONER\n\nSTEP 3: ANTIOXIDANT SERUM\n\nSTEP 4: EYE CREAM\n\nSTEP 5: SPOT TREATMENT\n\nSTEP 6: MOISTURIZER\n\nStep 7: SUNSCREEN\n\nhttps:\/\/www.dermstore.com\/blog\/in-what-order-do-i-apply-my-skin-care-products-infographic\/","1a93d987":"#Decision Tree Classification","be58dad7":"#Gradient Boosting Classifier"}}