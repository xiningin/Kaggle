{"cell_type":{"a1b849cd":"code","6d1dccab":"code","d75ea130":"code","14977ab4":"code","185b27ac":"code","3142e288":"code","325e4ee0":"code","f9c0a84b":"code","ffae7bd2":"code","40ed98c7":"code","368c89af":"code","42be22e5":"code","21a937b9":"code","fdf057d1":"code","6870fc57":"code","f34c60c0":"code","f84b04d1":"code","fd6be48a":"code","966e750d":"code","9b68b824":"code","2a44e86d":"code","f1727334":"code","286a7bfc":"code","ff1aa016":"code","fabec663":"markdown","0dac9e86":"markdown"},"source":{"a1b849cd":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n# We use a butterfly dataset of 50 species to demonstrate the classification method\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport os\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","6d1dccab":"import torch\nimport torchvision\nfrom torchvision import datasets\nfrom torchvision import transforms as T # for simplifying the transforms\nfrom torch import nn, optim\nfrom torch.nn import functional as F\nfrom torch.utils.data import DataLoader, sampler, random_split\nfrom torchvision import models","d75ea130":"## Now, we import timm, torchvision image models\n!pip install timm # kaggle doesnt have it installed by default\nimport timm\nfrom timm.loss import LabelSmoothingCrossEntropy # This is better than normal nn.CrossEntropyLoss","14977ab4":"# remove warnings\nimport warnings\nwarnings.filterwarnings(\"ignore\")","185b27ac":"import matplotlib.pyplot as plt\n%matplotlib inline","3142e288":"import sys\nfrom tqdm import tqdm\nimport time\nimport copy","325e4ee0":"def get_classes(data_dir):\n    all_data = datasets.ImageFolder(data_dir)\n    return all_data.classes","f9c0a84b":"def get_data_loaders(data_dir, batch_size, train = False):\n    if train:\n        #train\n        transform = T.Compose([\n            T.RandomHorizontalFlip(),\n            T.RandomVerticalFlip(),\n            T.RandomApply(torch.nn.ModuleList([T.ColorJitter()]), p=0.25),\n            T.Resize(256),\n            T.CenterCrop(224),\n            T.ToTensor(),\n            T.Normalize(timm.data.IMAGENET_DEFAULT_MEAN, timm.data.IMAGENET_DEFAULT_STD), # imagenet means\n            T.RandomErasing(p=0.1, value='random')\n        ])\n        train_data = datasets.ImageFolder(os.path.join(data_dir, \"train\/\"), transform = transform)\n        train_loader = DataLoader(train_data, batch_size=batch_size, shuffle=True, num_workers=4)\n        return train_loader, len(train_data)\n    else:\n        # val\/test\n        transform = T.Compose([ # We dont need augmentation for test transforms\n            T.Resize(256),\n            T.CenterCrop(224),\n            T.ToTensor(),\n            T.Normalize(timm.data.IMAGENET_DEFAULT_MEAN, timm.data.IMAGENET_DEFAULT_STD), # imagenet means\n        ])\n        val_data = datasets.ImageFolder(os.path.join(data_dir, \"valid\/\"), transform=transform)\n        test_data = datasets.ImageFolder(os.path.join(data_dir, \"test\/\"), transform=transform)\n        val_loader = DataLoader(val_data, batch_size=batch_size, shuffle=True, num_workers=4)\n        test_loader = DataLoader(test_data, batch_size=batch_size, shuffle=True, num_workers=4)\n        return val_loader, test_loader, len(val_data), len(test_data)","ffae7bd2":"dataset_path = \"\/kaggle\/input\/butterfly-images40-species\/\"","40ed98c7":"(train_loader, train_data_len) = get_data_loaders(dataset_path, 128, train=True)\n(val_loader, test_loader, valid_data_len, test_data_len) = get_data_loaders(dataset_path, 32, train=False)","368c89af":"classes = get_classes(\"\/kaggle\/input\/butterfly-images40-species\/train\/\")\nprint(classes, len(classes))","42be22e5":"dataloaders = {\n    \"train\": train_loader,\n    \"val\": val_loader\n}\ndataset_sizes = {\n    \"train\": train_data_len,\n    \"val\": valid_data_len\n}","21a937b9":"print(len(train_loader), len(val_loader), len(test_loader))","fdf057d1":"print(train_data_len, valid_data_len, test_data_len)","6870fc57":"# now, for the model\ndevice = torch.device('cuda' if torch.cuda.is_available() else 'cpu')\ndevice","f34c60c0":"HUB_URL = \"SharanSMenon\/swin-transformer-hub:main\"\nMODEL_NAME = \"swin_tiny_patch4_window7_224\"\n# check hubconf for more models.\nmodel = torch.hub.load(HUB_URL, MODEL_NAME, pretrained=True) # load from torch hub","f84b04d1":"for param in model.parameters(): #freeze model\n    param.requires_grad = False\n\nn_inputs = model.head.in_features\nmodel.head = nn.Sequential(\n    nn.Linear(n_inputs, 512),\n    nn.ReLU(),\n    nn.Dropout(0.3),\n    nn.Linear(512, len(classes))\n)\nmodel = model.to(device)\nprint(model.head)","fd6be48a":"criterion = LabelSmoothingCrossEntropy()\ncriterion = criterion.to(device)\noptimizer = optim.AdamW(model.head.parameters(), lr=0.001)","966e750d":"# lr scheduler\nexp_lr_scheduler = optim.lr_scheduler.StepLR(optimizer, step_size=3, gamma=0.97)","9b68b824":"def train_model(model, criterion, optimizer, scheduler, num_epochs=10):\n    since = time.time()\n    best_model_wts = copy.deepcopy(model.state_dict())\n    best_acc = 0.0\n    \n    for epoch in range(num_epochs):\n        print(f'Epoch {epoch}\/{num_epochs - 1}')\n        print(\"-\"*10)\n        \n        for phase in ['train', 'val']: # We do training and validation phase per epoch\n            if phase == 'train':\n                model.train() # model to training mode\n            else:\n                model.eval() # model to evaluate\n            \n            running_loss = 0.0\n            running_corrects = 0.0\n            \n            for inputs, labels in tqdm(dataloaders[phase]):\n                inputs = inputs.to(device)\n                labels = labels.to(device)\n                \n                optimizer.zero_grad()\n                \n                with torch.set_grad_enabled(phase == 'train'): # no autograd makes validation go faster\n                    outputs = model(inputs)\n                    _, preds = torch.max(outputs, 1) # used for accuracy\n                    loss = criterion(outputs, labels)\n                    \n                    if phase == 'train':\n                        loss.backward()\n                        optimizer.step()\n                running_loss += loss.item() * inputs.size(0)\n                running_corrects += torch.sum(preds == labels.data)\n                \n            if phase == 'train':\n                scheduler.step() # step at end of epoch\n            \n            epoch_loss = running_loss \/ dataset_sizes[phase]\n            epoch_acc =  running_corrects.double() \/ dataset_sizes[phase]\n            \n            print(\"{} Loss: {:.4f} Acc: {:.4f}\".format(phase, epoch_loss, epoch_acc))\n            \n            if phase == 'val' and epoch_acc > best_acc:\n                best_acc = epoch_acc\n                best_model_wts = copy.deepcopy(model.state_dict()) # keep the best validation accuracy model\n        print()\n    time_elapsed = time.time() - since # slight error\n    print('Training complete in {:.0f}m {:.0f}s'.format(time_elapsed \/\/ 60, time_elapsed % 60))\n    print(\"Best Val Acc: {:.4f}\".format(best_acc))\n    \n    model.load_state_dict(best_model_wts)\n    return model","2a44e86d":"model_ft = train_model(model, criterion, optimizer, exp_lr_scheduler, num_epochs=7) # now it is a lot faster\n# I will come back after 10 epochs","f1727334":"test_loss = 0.0\nclass_correct = list(0 for i in range(len(classes)))\nclass_total = list(0 for i in range(len(classes)))\nmodel_ft.eval()\n\nfor data, target in tqdm(test_loader):\n    data, target = data.to(device), target.to(device)\n    with torch.no_grad(): # turn off autograd for faster testing\n        output = model_ft(data)\n        loss = criterion(output, target)\n    test_loss = loss.item() * data.size(0)\n    _, pred = torch.max(output, 1)\n    correct_tensor = pred.eq(target.data.view_as(pred))\n    correct = np.squeeze(correct_tensor.cpu().numpy())\n    if len(target) == 32:\n        for i in range(32):\n            label = target.data[i]\n            class_correct[label] += correct[i].item()\n            class_total[label] += 1\n\ntest_loss = test_loss \/ test_data_len\nprint('Test Loss: {:.4f}'.format(test_loss))\nfor i in range(len(classes)):\n    if class_total[i] > 0:\n        print(\"Test Accuracy of %5s: %2d%% (%2d\/%2d)\" % (\n            classes[i], 100*class_correct[i]\/class_total[i], np.sum(class_correct[i]), np.sum(class_total[i])\n        ))\n    else:\n        print(\"Test accuracy of %5s: NA\" % (classes[i]))\nprint(\"Test Accuracy of %2d%% (%2d\/%2d)\" % (\n            100*np.sum(class_correct)\/np.sum(class_total), np.sum(class_correct), np.sum(class_total)\n        ))","286a7bfc":"# our model earns 93% test accuracy, which is very high. lets save it\nexample = torch.rand(1, 3, 224, 224)\ntraced_script_module = torch.jit.trace(model.cpu(), example)\ntraced_script_module.save(\"butterfly_swin_transformer.pt\")","ff1aa016":"# That's it for this video, see you next time","fabec663":"## Testing\n\nOk, now we finished training. Lets run the dataset on the test loader and calculate accuracy","0dac9e86":"# Swin Transformers\n\nThis notebook trains a  Vision Transformer on the Butterfly dataset."}}