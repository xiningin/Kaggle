{"cell_type":{"6c4f4ba7":"code","b4faf3c9":"code","a3520a61":"code","1d7d2075":"code","b914283e":"code","6257d621":"code","d9086244":"code","fb2f8c39":"code","73ffef74":"code","70bf127f":"code","eb851ce1":"code","1049ab7b":"code","8b377a23":"code","6f69f795":"code","211ffe33":"code","825efc56":"code","c3cb76fc":"code","53f99aac":"code","82756121":"code","4dd935f0":"code","80d667fc":"code","d43c6e48":"code","720ef39e":"code","47277857":"code","516852ce":"code","58f44af6":"code","f75faf51":"code","72fe7886":"code","d74983d1":"code","1a78fab7":"code","006b0aac":"code","bdf30796":"code","b9a43889":"code","77d9bcf1":"code","930adb55":"code","ea641a0a":"code","2031ac9a":"code","6c263a5b":"code","6ff20405":"code","b704115b":"code","bcf28737":"code","d70ee5b4":"code","21905cbe":"code","89d8e718":"code","e03ef54c":"code","bccf13f6":"code","1008b4de":"code","8390641f":"code","340788f4":"markdown","3a48c5c2":"markdown","c63bcc80":"markdown","f4618951":"markdown","5a3316cb":"markdown","c0d9b31e":"markdown","e8930b73":"markdown","7e01ffc3":"markdown","23a4f786":"markdown","b59b0cb5":"markdown","dd8a7ccd":"markdown","8613ae90":"markdown","8820ddb1":"markdown","fecf4aca":"markdown","c7d3ff27":"markdown","52f95529":"markdown","1e11c344":"markdown","9f62abf9":"markdown","ea43f4c8":"markdown","49b25a6a":"markdown","dd1b90d1":"markdown","b9bb0e77":"markdown","fb097390":"markdown","38dbd097":"markdown","bb45559a":"markdown","192a4918":"markdown","976a2eec":"markdown","9e74265b":"markdown","1a01cce9":"markdown","0abbb1d6":"markdown","b83701c0":"markdown"},"source":{"6c4f4ba7":"from numpy.random import seed\nseed(101)\nfrom tensorflow import set_random_seed\nset_random_seed(101)\n\nimport pandas as pd\nimport numpy as np\n#import keras\n\nimport tensorflow\nfrom tensorflow.keras.layers import Dense, Dropout\nfrom tensorflow.keras.optimizers import Adam\nfrom tensorflow.keras.metrics import categorical_crossentropy\nfrom tensorflow.keras.preprocessing.image import ImageDataGenerator\nfrom tensorflow.keras.models import Model\nfrom tensorflow.keras.callbacks import EarlyStopping, ReduceLROnPlateau, ModelCheckpoint\nfrom tensorflow.keras.metrics import categorical_accuracy\n\nimport os\nimport cv2\n\nfrom sklearn.metrics import confusion_matrix\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.utils import shuffle\nimport itertools\nimport shutil\nimport matplotlib.pyplot as plt\n%matplotlib inline\n","b4faf3c9":"# To reduce the class imbalance in the train and validation set, the number of \n# rows in class 'healthy' will be reduced to this number:\n\nHEALTHY_SAMPLE_SIZE = 579\n\n# The approx. total number of images we want in each class after doing image augmentation.\n# We won't be doing image augmentation on the fly.\nNUM_IMAGES_WANTED = 3000 # incl. class 'healthy'\n\n# MobileNet needs input images with shape 224x224x3\nIMAGE_SIZE = 224\nIMAGE_CHANNELS = 3\n\nIMAGE_PATH = \"..\/input\/bee_imgs\/bee_imgs\/\"","a3520a61":"# What files are available?\n\nos.listdir(\"..\/input\")","1d7d2075":"df = pd.read_csv('..\/input\/bee_data.csv')\ndf['health'].value_counts()","b914283e":"# Key:\n# healthy = healthy\n# fvar = few varrao, hive beetles\n# var = Varroa, Small Hive Beetles\n# ant = ant problems\n# robbed = hive being robbed\n# queen = missing queen\n\n# Create a new directory\nbase_dir = 'base_dir'\nos.mkdir(base_dir)\n\n\n#[CREATE FOLDERS INSIDE THE BASE DIRECTORY]\n\n# train_dir\n    # 1_healthy\n    # 2_fvar\n    # 3_var\n    # 4_ant\n    # 5_robbed\n    # 6_queen\n \n# val_dir\n    # 1_healthy\n    # 2_fvar\n    # 3_var\n    # 4_ant\n    # 5_robbed\n    # 6_queen\n\n# create a path to 'base_dir' to which we will join the names of the new folders\n\n# train_dir\ntrain_dir = os.path.join(base_dir, 'train_dir')\nos.mkdir(train_dir)\n\n# val_dir\nval_dir = os.path.join(base_dir, 'val_dir')\nos.mkdir(val_dir)\n\n\n# [CREATE FOLDERS INSIDE THE TRAIN AND VALIDATION FOLDERS]\n# Inside each folder we create seperate folders for each class\n\n# create new folders inside train_dir\nhealthy = os.path.join(train_dir, '1_healthy')\nos.mkdir(healthy)\nfvar = os.path.join(train_dir, '2_fvar')\nos.mkdir(fvar)\nvar = os.path.join(train_dir, '3_var')\nos.mkdir(var)\nant = os.path.join(train_dir, '4_ant')\nos.mkdir(ant)\nrobbed = os.path.join(train_dir, '5_robbed')\nos.mkdir(robbed)\nqueen = os.path.join(train_dir, '6_queen')\nos.mkdir(queen)\n\n\n# create new folders inside val_dir\nhealthy = os.path.join(val_dir, '1_healthy')\nos.mkdir(healthy)\nfvar = os.path.join(val_dir, '2_fvar')\nos.mkdir(fvar)\nvar = os.path.join(val_dir, '3_var')\nos.mkdir(var)\nant = os.path.join(val_dir, '4_ant')\nos.mkdir(ant)\nrobbed = os.path.join(val_dir, '5_robbed')\nos.mkdir(robbed)\nqueen = os.path.join(val_dir, '6_queen')\nos.mkdir(queen)\n\n","6257d621":"df_data = pd.read_csv('..\/input\/bee_data.csv')\n\ndf_data.head()","d9086244":"# take a random sample of class 'healthy'\ndf = df_data[df_data['health'] == 'healthy'].sample(HEALTHY_SAMPLE_SIZE, random_state=101)\n\n# remove class 'healthy' from the dataframe\ndf_data = df_data[df_data['health'] != 'healthy']\n\n# concat df and df_data\ndf_data = pd.concat([df_data, df], axis=0).reset_index(drop=True)\n\n# shuffle the new dataframe\ndf_data = shuffle(df_data)\n\n# check the new class distribution\ndf_data['health'].value_counts()","fb2f8c39":"\ny = df_data['health']\n\ndf_train, df_val = train_test_split(df_data, test_size=0.1, random_state=101, stratify=y)\n\nprint(df_train.shape)\nprint(df_val.shape)","73ffef74":"df_train['health'].value_counts()","70bf127f":"df_val['health'].value_counts()","eb851ce1":"# Set the 'file' column as the index in df_data\ndf_data.set_index('file', inplace=True)","1049ab7b":"\n# Get a list of train and val images\ntrain_list = list(df_train['file'])\nval_list = list(df_val['file'])\n\n# Key:\n# healthy = healthy\n# fvar = few varrao, hive beetles\n# var = Varroa, Small Hive Beetles\n# ant = ant problems\n# robbed = hive being robbed\n# queen = missing queen\n\n\n\n# Transfer the train images.\n# Note that we re-name the files during the transfer using a number sequence. This is just a\n# safety measure help the generators create a repeatable sequence of images. \n# Otherwise I think they could mix them up and give us confusing results.\n\nlength = len(train_list)\n\nfor i in range(0,length):\n    \n    fname = train_list[i]\n    image = fname\n    description = df_data.loc[image,'health']\n    \n    # map the class descriptions to folder names\n    if description == 'healthy':\n        label = '1_healthy'\n    if description == 'few varrao, hive beetles':\n        label = '2_fvar'\n    if description == 'Varroa, Small Hive Beetles':\n        label = '3_var'\n    if description == 'ant problems':\n        label = '4_ant'\n    if description == 'hive being robbed':\n        label = '5_robbed'\n    if description == 'missing queen':\n        label = '6_queen'\n        \n        \n    # source path to image\n    src = os.path.join('..\/input\/bee_imgs\/bee_imgs', fname)\n    # chage the file name\n    new_name = str(i) + '_' + 'train'+ '.png'\n    # destination path to image\n    dst = os.path.join(train_dir, label, new_name)\n    # copy the image from the source to the destination\n    shutil.copyfile(src, dst)\n\n\n# Transfer the val images\n\nlength = len(val_list)\n\nfor i in range(0,length):\n    \n    fname = val_list[i]\n    image = fname\n    description = df_data.loc[image,'health']\n    \n     # map the class descriptions to folder names\n    if description == 'healthy':\n        label = '1_healthy'\n    if description == 'few varrao, hive beetles':\n        label = '2_fvar'\n    if description == 'Varroa, Small Hive Beetles':\n        label = '3_var'\n    if description == 'ant problems':\n        label = '4_ant'\n    if description == 'hive being robbed':\n        label = '5_robbed'\n    if description == 'missing queen':\n        label = '6_queen'\n    \n    # source path to image\n    src = os.path.join('..\/input\/bee_imgs\/bee_imgs', fname)\n    # chage the file name\n    new_name = str(i) + '_' + 'val' + '.png'\n    # destination path to image\n    dst = os.path.join(val_dir, label, new_name)\n    # copy the image from the source to the destination\n    shutil.copyfile(src, dst)\n\n        ","8b377a23":"# check how many train images we have in each folder\n\nprint(len(os.listdir('base_dir\/train_dir\/1_healthy')))\nprint(len(os.listdir('base_dir\/train_dir\/2_fvar')))\nprint(len(os.listdir('base_dir\/train_dir\/3_var')))\nprint(len(os.listdir('base_dir\/train_dir\/4_ant')))\nprint(len(os.listdir('base_dir\/train_dir\/5_robbed')))\nprint(len(os.listdir('base_dir\/train_dir\/6_queen')))\n","6f69f795":"# check how many val images we have in each folder\n\nprint(len(os.listdir('base_dir\/val_dir\/1_healthy')))\nprint(len(os.listdir('base_dir\/val_dir\/2_fvar')))\nprint(len(os.listdir('base_dir\/val_dir\/3_var')))\nprint(len(os.listdir('base_dir\/val_dir\/4_ant')))\nprint(len(os.listdir('base_dir\/val_dir\/5_robbed')))\nprint(len(os.listdir('base_dir\/val_dir\/6_queen')))\n","211ffe33":"# note that we are not augmenting class 'healthy'\nclass_list = ['1_healthy', '2_fvar','3_var','4_ant','5_robbed','6_queen']\n\nfor item in class_list:\n    \n    # We are creating temporary directories here because we delete these directories later.\n    \n    # create a base dir\n    aug_dir = 'aug_dir'\n    os.mkdir(aug_dir)\n    # create a dir within the base dir to store images of the same class\n    img_dir = os.path.join(aug_dir, 'img_dir')\n    os.mkdir(img_dir)\n\n    # Choose a class\n    img_class = item\n\n    # list all images in that directory\n    img_list = os.listdir('base_dir\/train_dir\/' + img_class)\n\n    # Copy images from the class train dir to the img_dir e.g. class 'healthy'\n    for fname in img_list:\n            # source path to image\n            src = os.path.join('base_dir\/train_dir\/' + img_class, fname)\n            # destination path to image\n            dst = os.path.join(img_dir, fname)\n            # copy the image from the source to the destination\n            shutil.copyfile(src, dst)\n\n\n    # point to a dir containing the images and NOT to the images themselves\n    path = aug_dir\n    save_path = 'base_dir\/train_dir\/' + img_class\n\n    # Create a data generator to generate augmented images for each class.\n    datagen = ImageDataGenerator(\n        #rotation_range=180,\n        width_shift_range=0.1,\n        height_shift_range=0.1,\n        zoom_range=0.01,\n        #horizontal_flip=True,\n        #vertical_flip=True,\n        brightness_range=(0.9,1.1),\n        fill_mode='nearest')\n\n    batch_size = 9\n\n    aug_datagen = datagen.flow_from_directory(path,\n                                        save_to_dir=save_path, # this is where the images are saved\n                                        save_format='jpg',\n                                        target_size=(IMAGE_SIZE,IMAGE_SIZE),\n                                        batch_size=batch_size)\n\n\n\n    # Generate the augmented images and add them to the training folders\n    \n    # NUM_IMAGES_WANTED = total number of images we want to have in each class\n    # We will use image augmentation to create the additional images.\n    \n    num_files = len(os.listdir(img_dir))\n    \n    # Just a calculation to get approx. the same amount of images for each class.\n    num_batches = int(np.ceil((NUM_IMAGES_WANTED-num_files)\/batch_size))\n\n    # Run the generator and create augmented images.\n    # Note that these images are automatically stored in a folder. The path\n    # to the save folder is specified as a parameter in the generator above.\n    for i in range(0,num_batches):\n\n        imgs, labels = next(aug_datagen)\n        \n    # delete temporary directory with the raw image files\n    shutil.rmtree('aug_dir')","825efc56":"# Check how many train images we now have in each folder.\n# This is the original images plus the augmented images.\n\nprint(len(os.listdir('base_dir\/train_dir\/1_healthy')))\nprint(len(os.listdir('base_dir\/train_dir\/2_fvar')))\nprint(len(os.listdir('base_dir\/train_dir\/3_var')))\nprint(len(os.listdir('base_dir\/train_dir\/4_ant')))\nprint(len(os.listdir('base_dir\/train_dir\/5_robbed')))\nprint(len(os.listdir('base_dir\/train_dir\/6_queen')))","c3cb76fc":"# Check how many val images we have in each folder.\n\nprint(len(os.listdir('base_dir\/val_dir\/1_healthy')))\nprint(len(os.listdir('base_dir\/val_dir\/2_fvar')))\nprint(len(os.listdir('base_dir\/val_dir\/3_var')))\nprint(len(os.listdir('base_dir\/val_dir\/4_ant')))\nprint(len(os.listdir('base_dir\/val_dir\/5_robbed')))\nprint(len(os.listdir('base_dir\/val_dir\/6_queen')))","53f99aac":"# plots images with labels within jupyter notebook\n# source: https:\/\/github.com\/smileservices\/keras_utils\/blob\/master\/utils.py\n\ndef plots(ims, figsize=(12,6), rows=2, interp=False, titles=None): # 12,6\n    if type(ims[0]) is np.ndarray:\n        ims = np.array(ims).astype(np.uint8)\n        if (ims.shape[-1] != 3):\n            ims = ims.transpose((0,2,3,1))\n    f = plt.figure(figsize=figsize)\n    cols = len(ims)\/\/rows if len(ims) % 2 == 0 else len(ims)\/\/rows + 1\n    for i in range(len(ims)):\n        sp = f.add_subplot(rows, cols, i+1)\n        sp.axis('Off')\n        if titles is not None:\n            sp.set_title(titles[i], fontsize=16)\n        plt.imshow(ims[i], interpolation=None if interp else 'none')\n        \nplots(imgs, titles=None) # titles=labels will display the image labels","82756121":"# End of Data Preparation\n### ===================================================================================== ###\n# Start of Model Building","4dd935f0":"train_path = 'base_dir\/train_dir'\nvalid_path = 'base_dir\/val_dir'\n\nnum_train_samples = len(df_train)\nnum_val_samples = len(df_val)\ntrain_batch_size = 10\nval_batch_size = 10\nimage_size = 224\n\ntrain_steps = np.ceil(num_train_samples \/ train_batch_size)\nval_steps = np.ceil(num_val_samples \/ val_batch_size)\n","80d667fc":"\ndatagen = ImageDataGenerator(preprocessing_function=\n                             tensorflow.keras.applications.mobilenet.preprocess_input)\n\ntrain_gen = datagen.flow_from_directory(train_path,\n                                        target_size=(image_size,image_size),\n                                        batch_size=train_batch_size,\n                                        class_mode='categorical')\n\nval_gen = datagen.flow_from_directory(valid_path,\n                                        target_size=(image_size,image_size),\n                                        batch_size=val_batch_size,\n                                        class_mode='categorical')\n\n# Note: shuffle=False causes the test dataset to not be shuffled.\n# Here we will be using the val set as the test dataset because we need to run predict\n# in order to generate the confusion matrix.\ntest_gen = datagen.flow_from_directory(valid_path,\n                                        target_size=(image_size,image_size),\n                                        batch_size=1,\n                                        class_mode='categorical',\n                                        shuffle=False)","d43c6e48":"# Create a copy of a mobilenet model.\n# Please ensure your kaggle kernel is set to 'Internet Connected'.\n\nmobile = tensorflow.keras.applications.mobilenet.MobileNet()","720ef39e":"mobile.summary()","47277857":"type(mobile.layers)","516852ce":"# How many layers does MobileNet have?\nlen(mobile.layers)","58f44af6":"# CREATE THE MODEL ARCHITECTURE\n\n# Exclude the last 5 layers of the above model.\n# This will include all layers up to and including global_average_pooling2d_1\nx = mobile.layers[-6].output\n\n# Create a new dense layer for predictions\n# 6 corresponds to the number of classes\n#x = Dropout(0.25)(x)\npredictions = Dense(6, activation='softmax')(x)\n\n# inputs=mobile.input selects the input layer, outputs=predictions refers to the\n# dense layer we created above.\n\nmodel = Model(inputs=mobile.input, outputs=predictions)","f75faf51":"model.summary()","72fe7886":"# We need to choose how many layers we actually want to be trained.\n\n# Here we are freezing the weights of all layers except the\n# last 23 layers in the new model.\n# The last 23 layers of the model will be trained.\n\nfor layer in model.layers[:-23]:\n    layer.trainable = False","d74983d1":"model.compile(Adam(lr=0.001), loss='categorical_crossentropy', \n              metrics=['accuracy'])\n","1a78fab7":"\nfilepath = \"model.h5\"\ncheckpoint = ModelCheckpoint(filepath, monitor='val_acc', verbose=1, \n                             save_best_only=True, mode='max')\n\nreduce_lr = ReduceLROnPlateau(monitor='val_acc', factor=0.5, patience=2, \n                                   verbose=1, mode='max', min_lr=0.00001)\n                              \n                              \ncallbacks_list = [checkpoint, reduce_lr]\n\nhistory = model.fit_generator(train_gen, steps_per_epoch=train_steps, \n                            validation_data=val_gen,\n                            validation_steps=val_steps,\n                            epochs=30, verbose=1,\n                           callbacks=callbacks_list)\n","006b0aac":"# Get the metric names so that we can see what the output from evaulate_generator will be.\nmodel.metrics_names","bdf30796":"# Here the best epoch will be used.\n\nmodel.load_weights('model.h5')\n\nval_loss, val_acc = \\\nmodel.evaluate_generator(test_gen, \n                        steps=len(df_val))\n\nprint('val_loss:', val_loss)\nprint('val_acc:', val_acc)\n","b9a43889":"# display the loss and accuracy curves\n\nimport matplotlib.pyplot as plt\n\nacc = history.history['acc']\nval_acc = history.history['val_acc']\nloss = history.history['loss']\nval_loss = history.history['val_loss']\n\nepochs = range(1, len(acc) + 1)\n\nplt.plot(epochs, loss, 'bo', label='Training loss')\nplt.plot(epochs, val_loss, 'b', label='Validation loss')\nplt.title('Training and validation loss')\nplt.legend()\nplt.figure()\n\nplt.plot(epochs, acc, 'bo', label='Training acc')\nplt.plot(epochs, val_acc, 'b', label='Validation acc')\nplt.title('Training and validation accuracy')\nplt.legend()\nplt.figure()\n","77d9bcf1":"# make a prediction\nfrom tensorflow.keras.models import load_model\n\npredictions = model.predict_generator(test_gen, steps=len(df_val), verbose=1)","930adb55":"# Get the index of the class with the highest probability score\ny_pred = np.argmax(predictions, axis=1)\n\n# Get the labels of the test images.\ny_true = test_gen.classes","ea641a0a":"# Source: Scikit Learn website\n# http:\/\/scikit-learn.org\/stable\/auto_examples\/\n# model_selection\/plot_confusion_matrix.html#sphx-glr-auto-examples-model-\n# selection-plot-confusion-matrix-py\n\n\ndef plot_confusion_matrix(cm, classes,\n                          normalize=False,\n                          title='Confusion matrix',\n                          cmap=plt.cm.Blues):\n    \"\"\"\n    This function prints and plots the confusion matrix.\n    Normalization can be applied by setting `normalize=True`.\n    \"\"\"\n    if normalize:\n        cm = cm.astype('float') \/ cm.sum(axis=1)[:, np.newaxis]\n        print(\"Normalized confusion matrix\")\n    else:\n        print('Confusion matrix, without normalization')\n\n    print(cm)\n\n    plt.imshow(cm, interpolation='nearest', cmap=cmap)\n    plt.title(title)\n    plt.colorbar()\n    tick_marks = np.arange(len(classes))\n    plt.xticks(tick_marks, classes, rotation=45)\n    plt.yticks(tick_marks, classes)\n\n    fmt = '.2f' if normalize else 'd'\n    thresh = cm.max() \/ 2.\n    for i, j in itertools.product(range(cm.shape[0]), range(cm.shape[1])):\n        plt.text(j, i, format(cm[i, j], fmt),\n                 horizontalalignment=\"center\",\n                 color=\"white\" if cm[i, j] > thresh else \"black\")\n\n    plt.ylabel('True label')\n    plt.xlabel('Predicted label')\n    plt.figure(figsize=(100,100))\n    plt.tight_layout()\n\n\n","2031ac9a":"# argmax returns the index of the max value in a row\ncm = confusion_matrix(y_true, y_pred)","6c263a5b":"test_gen.class_indices","6ff20405":"# Key:\n# healthy = healthy\n# fvar = few varrao, hive beetles\n# var = Varroa, Small Hive Beetles\n# ant = ant problems\n# robbed = hive being robbed\n# queen = missing queen\n\n# Define the labels of the class indices. These need to match the \n# order shown above.\ncm_plot_labels = ['1_healthy', '2_fvar', '3_var', '4_ant', '5_robbed','6_queen']\n\nplot_confusion_matrix(cm, cm_plot_labels, title='Confusion Matrix')","b704115b":"len(df_val)","bcf28737":"# Get the filenames, labels and associated predictions\n\n# This outputs the sequence in which the generator processed the test images\ntest_filenames = test_gen.filenames\n","d70ee5b4":"from sklearn.metrics import classification_report\n\n# Generate a classification report\n\nnames = ['healthy', 'few varrao, hive beetles', 'Varroa, Small Hive Beetles', \n               'ant problems', 'hive being robbed','missing queen']\n\nreport = classification_report(y_true, y_pred, target_names=names)\n\nprint(report)","21905cbe":"# End of Model Building\n### ===================================================================================== ###\n# Convert the Model from Keras to Tensorflow.js","89d8e718":"# !pip install tensorflowjs","e03ef54c":"# create a directory to store the model files\n#os.mkdir('tfjs_dir')\n\n# convert to Tensorflow.js\n#import tensorflowjs as tfjs\n\n#tensorflowjs.converters.save_keras_model(model, 'tfjs_dir')","bccf13f6":"# check the the directory containing the model is available\n#!ls","1008b4de":"# view the files that make up the tensorflow.js model\n#os.listdir('tfjs_dir')","8390641f":"# Delete the image data directory we created to prevent a Kaggle error.\n# Kaggle allows a max of 500 files to be saved.\n\nshutil.rmtree('base_dir')","340788f4":"We see that the output metrics are loss and accuracy. Therefore, we now know that model.evaluate_generator() outputs val loss and val accuracy. ","3a48c5c2":"### Create the directory structure\n\nIn these folders we will store the images that will later be fed to the Keras generators. ","c63bcc80":"### Modify MobileNet Model","f4618951":"### Generate the Classification Report","5a3316cb":"### What is Tensorflow.js?","c0d9b31e":"1. Excellent tutorial series by deeplizard on how to use Mobilenet with Tensorflow.js<br>\nhttps:\/\/www.youtube.com\/watch?v=HEQDRWMK6yY\n\n2. Tutorial by Minsuk Heo on Accuracy, Precision and F1 Score<br>\nhttps:\/\/www.youtube.com\/watch?v=HBi-P5j0Kec\n\n3. Tutorial by Data School on how to evaluate a classifier<br>\nhttps:\/\/www.youtube.com\/watch?v=85dtiMz9tSo\n\n3. Tensorflow.js gallery of projects<br>\nhttps:\/\/github.com\/tensorflow\/tfjs\/blob\/master\/GALLERY.md\n\n","e8930b73":"### Create a Confusion Matrix\n\nThe confusion matrix and F1 score will tell us how well our model is able to perform on each individual class. ","7e01ffc3":"### Visualize a batch of augmented images","23a4f786":"### Evaluate the model using the val set\n","b59b0cb5":"### Create Train and Val Sets","dd8a7ccd":"*The code that follows could run in Kaggle kernels a few days ago, now it can't. <br>\n\"import tensorflowjs as tfjs\" gives an error.*\n\n*I've included the model conversion steps for reference - because I'm sure the error will be fixed at some point.*","8613ae90":"**Recall ** = Given a class, will the classifier be able to detect it?<br>\n**Precision** = Given a class prediction from a classifier, how likely is it to be correct?<br>\n**F1 Score** = The harmonic mean of the recall and precision. Essentially, it punishes extreme values.\n","8820ddb1":"### Train the Model","fecf4aca":"### LABELS\nWhat are the labels and what is the class distribution?","c7d3ff27":"### Downsample the 'healthy' class to reduce the class imbalance","52f95529":"### Set Up the Generators","1e11c344":"\n**A lesson learned...**\n\nIn this kernel we are using tf.keras and not native Keras. tf.keras is Keras that lives within Tensorflow.\n\nWhen using native Keras I found that the accuracy as calculated manually from the confusion matrix does not match the accuracy obtained during training and evaluation. The problem was solved when I switched to tf.keras. I think there's a problem with predict_generator() in native Keras or maybe I'm using it wrong.\n\nAnother complication is that a tf.keras model cannot be converted into a Tensorflowjs model for use in the app. To solve this problem I had to create another kernel using native Keras and convert that model to Tensorflowjs - a complicated story, I know :-)\n","9f62abf9":"### Install Tensorflow.js","ea43f4c8":"### Copy the train images  into aug_dir\nWe will not be doing image augmentation on the fly. We will augment the images and then add them to the train folders before training begins. This way the augmented images will be combined with the original images. The training process will also run faster.","49b25a6a":"### Transfer the Images into the Folders\nWe now transfer the train and val images into the directory structure that we created. Keras needs this directory structure in order to load images from folders into the model during training - and to infer the class of the images.","dd1b90d1":"#### A Note on Image Pre-propcessing to Suit MobileNet\n\nWe will be applying the same pre-processing to the bee images as was applied to the original ImageNet  images that were used to train MobileNet. We will add this pre-processing as a preprocessing_function in the generators below.","b9bb0e77":"### Creat train and val sets","fb097390":"### Conclusion","38dbd097":"### Resources\n\nThese are some helpful resources:","bb45559a":"Tensorflow.js is a new library that allows machine learning models to run in the browser - without having to download or install any additional software. Because the model is running locally, any data that a user submits never leaves his or her pc or mobile phone. \n\nEvery image that a user submits needs to be pre-processed before being passed to the model for prediction. MobileNet pre-prcessing involves scaling the pixel values between 1 and -1. In this kernel we used a built in function to pre-process images for MobileNet:<br>\ntensorflow.keras.applications.mobilenet.preprocess_input()\n\nWhen using Tensorflowjs in the app, this pre-processing needs to be implemented manually.\n","192a4918":"### Delete base_dir","976a2eec":"### Plot the Training Curves","9e74265b":"Many thanks to Jenny Yang (@jenny18) for posting this well curated dataset. Thanks again Kaggle for the free GPU.\n\nThank you for reading. ","1a01cce9":"> **Objectives**<br>\n> \n> 1. Build a model that can predict the health of a bee hive by analyzing images of bees.\n> 2. Deploy the model as a prototype web based tool that bee keepers and researchers can use. They should be able to submit a picture of a bee and  instantly get an assessment of the health of the hive where the bee lives.\n\n\n****\n\nIn this quick kernel we will use transfer learning to infer the health of bee hives by analyzing images of bees. We will use a pre-trained MobileNet model together with image augmentation. MobileNet was trained on the ImageNet dataset which includes pictures of bees. This means that it's already able to recognize bees. Here we will see how well it can be trained to evaluate bee health.\n\nWe won't be doing extensive data exploration. Other kernels have already expertly covered this area. Please refer to the excellent kernels by @gpreda and  @dmitrypukhov.<br>\n\nThis kernel will focus on:\n\n1. Creating a directory structure\n2. Creating generators\n3. Data augmentation\n4. Model building and training\n5. Assessing the quality of the model via a confusion matrix and F1 score.\n\n**Results**\n\nThe model's validation accuracy and F1 score are greater than 0.9\n\n****\n\nAll the html, css, and javascript code used to build the web app is available on Github.\n\nWeb app:<br>\nhttp:\/\/bee.test.woza.work\/<br>\nGithub:<br>\nhttps:\/\/github.com\/vbookshelf\/Bee-Hive-Health-Analyzer\n","0abbb1d6":"### Convert the model from Keras to Tensorflow.js","b83701c0":"The accuracy is above 90%. The F1 score is also above 90%. This tells us that our model is really good at detecting all classes, even the 'missing queen' class where only a 29  images are available.\n\n*As a side note - I'm wondering if the model is performing so well because it's looking at the bees or if it is actually looking at the background colour of the images. Maybe a more experienced data scientist can answer this question.*"}}