{"cell_type":{"57f76b44":"code","d04c1ce7":"code","381fbd13":"markdown","e3ef2efd":"markdown","64bbeffb":"markdown","ee1e8ad3":"markdown","5f4c6fe8":"markdown"},"source":{"57f76b44":"### Initial Lambda Tables\n### code taken from: https:\/\/www.kaggle.com\/aljannico\/variable-elimination\n\nproblem = {\n    'K' : [{ '+k': 0.6,\n            '-k': 0.4\n          }],\n    'KE' : [{ '+k+e': 0.4,\n              '+k-e' : 0.6,\n              '-k+e' : 0.8,\n              '-k-e' : 0.2\n           }],\n    'KEL' : [{\n        '+k+e+l': 0.9,\n        '+k+e-l': 0.1,\n        '+k-e+l': 0.6,\n        '+k-e-l': 0.4,\n        '-k+e+l' : 0.4,\n        '-k+e-l' : 0.6,\n        '-k-e+l' : 0.1,\n        '-k-e-l': 0.9 \n    }]\n}\n\nimport copy\ntables = copy.deepcopy(problem)\n\n### Network structure\nnodes = [ 'K', 'E', 'L'] # not necessary (redundant), just for clarity\nnet = { ('K','E'), ('K','L'), ('E','L') }\ndomains = {\n    'K' : ['+k','-k'],\n    'E' : ['+e','-e'],\n    'L' : ['+l','-l']\n}\n\n### Remove Evidence\ndef remove_evidence(**kwargs):\n    '''\n    Give evidence as values for Variables, named as the nodes\n    '''\n    if kwargs is not None:\n        for var, value in kwargs.items():\n            # Remove from tables\n            print(\"Keep %s == %s\" %(var,value))\n            to_del = []\n            to_add = []\n            for schema in tables:\n                if var in schema:\n                    new_schema = schema.replace(var,'')\n                    if new_schema != '': \n                        # We can have a list of dictionaries here\n                        for d in tables[schema]:\n                            # Form a new schema\n                            new_table = {}\n                            for e in d:\n                                if value in e:\n                                    new_e = e.replace(value,'')\n                                    new_table[new_e] = d[e]\n                            to_add.append((new_schema,new_table))\n                    to_del.append(schema)\n            # Delete obsolete tables\n            for s in to_del:\n                del(tables[s])\n            # Add new tables\n            for s,t in to_add:\n                if s in tables:\n                    tables[s].append(t)\n                else:\n                    tables[s] = [t]\n\n                    \ndef combinations(schema):\n    '''\n    schema is given as a set. We want all possible combinations of \n    values for all variables in the set. \n    '''\n    var = schema[0]\n    if len(schema) == 1:\n        return domains[var]\n    result = []\n    combs = combinations(schema[1:])\n    for c in combs:\n        for val in domains[var]:\n            result.append(c+val)\n    return result\n\ndef matches(e,c,val):\n    '''\n    USAGE: if matches(e,c,val):\n    '''\n    # print(\"Match: \",e,c,val,val in e)\n    if not val in e:\n        # Value of the variable to eliminate does not match\n        return False\n    # now we have to check, if the entry e fits to the combination we want \n    # compute: first split into values\n    values = [e[i:i+2] for i in range(0,len(e),2)]\n    # print(\"  e vals: \",values)\n    for v in values:\n        # we already checked if the value of \n        # the variable to remove is in e   \n        if v != val: \n            # Now we check if the value is in the combination we are looking for\n            if not v in c:\n                return False\n    # Ok, everything is where it should be\n    return True\n               \n                    \ndef eliminate(var):\n    '''\n    Eliminate the variable 'var' from the tables.\n    '''\n    schemata = [s for s in tables if var in s]\n    print(\"Schemata with \",var,\":\",schemata)\n    # new_schema = ''.join(list(set([v for s in schemata for v in s if v != var])))\n    new_schema = list(set([v for s in schemata for v in s if v != var]))\n    print(\"New schema: \",new_schema) # a list of one-character var names\n    # now, populate the new schema\n    new_schema_name = ''.join(new_schema)\n    new_table = {}\n    # determine all possible combinations\n    for c in combinations(new_schema):\n        value = {}\n        # iterate over all values of var        \n        sum_var = 0.0\n        for val in domains[var]:\n            value[val] = 1.0 # multiply        \n            for s in schemata:\n                # print(\"Look into schema \",s)\n                for t in tables[s]:\n                    for e in t:\n                        if matches(e,c,val):\n                            # print(\"  Val for \",e,c,val,\":\",t[e])\n                            value[val] *= t[e]\n            sum_var += value[val]\n        # print(value) # Just show what you do\n        new_table[c] = sum_var\n    # Delete now obsolete schemata\n    for s in schemata:\n        del(tables[s])\n    # Store new schema or new table for (old) schema\n    if new_schema_name in tables:\n        tables[new_schema_name].append(new_table)\n    else:\n        tables[new_schema_name] = [new_table]\n            \n\n## Now, let's normalize the final table(s)\ndef normalize(s):\n    # first, if we have multiple tables for \n    # the schema s, we multiply the matching \n    # entries \"together\"\n    value = {}\n    for val in combinations(s):        \n        value[val] = 1.0 # multiply    \n        for t in tables[s]:\n            for e in t:\n                if e == val:\n                    value[val] *= t[e]\n    \n    # Now, we compute the sum  over the entries\n    val_sum = 0\n    for val in value:\n        val_sum += value[val]\n    # ... and, finally, compute the ratios\n    for val in value:\n        value[val] \/= val_sum   \n    # Store new table for (old) schema\n    tables[s] = [value] # keep it for whatever purpose you have in mind\n    return value # ... and return the resulting table\n\n\nprint(\"Initial Lambda Tables: \",tables)            \n# print(\"Tables after removing evidence: \",tables)            \neliminate('E')\nprint(\"Tables after removing E: \",tables)\neliminate('K')\nprint(\"Tables after removing K: \",tables)\n\nprint(\"\\nP(L): \",normalize('L'),\"\\n\")\n\ntables = copy.deepcopy(problem)\nremove_evidence(L='+l')\neliminate('E')\nprint(\"Tables after removing E: \",tables)\nprint(\"\\nP(K|+l): \",normalize('K'),\"\\n\")\n\ntables = copy.deepcopy(problem)\nremove_evidence(L='-l')\neliminate('E')\nprint(\"Tables after removing E: \",tables)\nprint(\"\\nP(K|-l): \",normalize('K'),\"\\n\")\n\ntables = copy.deepcopy(problem)\nremove_evidence(E='+e')\neliminate('L')\nprint(\"Tables after removing L: \",tables)\nprint(\"\\nP(K|+e): \",normalize('K'),\"\\n\")\n\n\ntables = copy.deepcopy(problem)\nremove_evidence(E='-e')\neliminate('K')\nprint(\"Tables after removing K: \",tables)\nprint(\"\\nP(L|-e): \",normalize('L'),\"\\n\")\n\n\ntables = copy.deepcopy(problem)\nremove_evidence(E='-e')\nremove_evidence(L='+l')\nprint(\"Tables after removing evidence: \",tables)\nprint(\"\\nP(K|-e,+l): \",normalize('K'),\"\\n\")\n\n","d04c1ce7":"# This can be solved in a more generic way, \n# but it suffices for now, as it should be pretty easy to understand\n\nproblem = {\n    'K' : [{ '+k': 0.6,\n            '-k': 0.4\n          }],\n    'KE' : [{ '+k+e': 0.4,\n              '+k-e' : 0.6,\n              '-k+e' : 0.8,\n              '-k-e' : 0.2\n           }],\n    'KEL' : [{\n        '+k+e+l': 0.9,\n        '+k+e-l': 0.1,\n        '+k-e+l': 0.6,\n        '+k-e-l': 0.4,\n        '-k+e+l' : 0.4,\n        '-k+e-l' : 0.6,\n        '-k-e+l' : 0.1,\n        '-k-e-l': 0.9 \n    }]\n}\n\ndomains = {\n    'K' : ['+k','-k'],\n    'E' : ['+e','-e'],\n    'L' : ['+l','-l']\n}\n\n## Computing the full joint distribution without any intelligence...\nfjd = {}\n\nprint(\"Full Joint Distribution:\")\nfor k in domains['K']:\n    for e in domains['E']:\n        for l in domains['L']:\n            # Rechne mit der Netzstruktur: P(K) * P(E|K) * P(L|K,E)\n            # F\u00fcr jeden Knoten also die Wahrscheinlichkeitaverteilung des Knotens\n            # gegeben seine Eltern (wenn keine Eltern, dann direkt der Prior)\n            result = problem['K'][0][k]*problem['KE'][0][k+e]*problem['KEL'][0][k+e+l]\n            fjd[k+e+l] = result # in der FJD merken\n            print(k,e,l,\":\",problem['K'][0][k],'*',problem['KE'][0][k+e],'*',problem['KEL'][0][k+e+l],\"=\",result)\n            \n# Answer the questions\n\n# P(L)\nres = {}\nres['+l'] = sum([val for key,val in fjd.items() if '+l' in key])\nres['-l'] = sum([val for key,val in fjd.items() if '-l' in key])\nprint(\"\\nP(L) = < +l:\",res['+l'],', -l:',res['-l'],\">\")\n\n# P(K|L)\nres = {}\nres['+k+l'] = sum([val for key,val in fjd.items() if '+l' in key and '+k' in key])\nres['-k+l'] = sum([val for key,val in fjd.items() if '+l' in key and '-k' in key])\npsum = res['+k+l'] + res['-k+l']\nres['+k+l'] \/= psum\nres['-k+l'] \/= psum\n\nres['+k-l'] = sum([val for key,val in fjd.items() if '-l' in key and '+k' in key])\nres['-k-l'] = sum([val for key,val in fjd.items() if '-l' in key and '-k' in key])\npsum = res['+k-l'] + res['-k-l']\nres['+k-l'] \/= psum\nres['-k-l'] \/= psum\n\nprint(\"\\nP(K|L) = < +l+k:\",res['+k+l'],', +l-k:',res['-k+l'],\", -l+k:\",res['+k-l'],', -l-k:',res['-k-l'],\">\")\n\n# P(K|+e)\nres = {}\nres['+k'] = sum([val for key,val in fjd.items() if '+e' in key and '+k' in key])\nres['-k'] = sum([val for key,val in fjd.items() if '+e' in key and '-k' in key])\npsum = res['+k'] + res['-k']\nres['+k'] \/= psum\nres['-k'] \/= psum\nprint(\"\\nP(K|+e) = < +k:\",res['+k'],', -k:',res['-k'],\">\")\n\n# P(L|-e)\nres = {}\nres['+l'] = sum([val for key,val in fjd.items() if '-e' in key and '+l' in key])\nres['-l'] = sum([val for key,val in fjd.items() if '-e' in key and '-l' in key])\npsum = res['+l'] + res['-l']\nres['+l'] \/= psum\nres['-l'] \/= psum\nprint(\"\\nP(L|-e) = < +l:\",res['+l'],', -l:',res['-l'],\">\")\n\n# P(-k|-e,+l)\nres = {}\nres['+k'] = sum([val for key,val in fjd.items() if '-e' in key and '+l' in key and '+k' in key])\nres['-k'] = sum([val for key,val in fjd.items() if '-e' in key and '+l' in key and '-k' in key])\npsum = res['+k'] + res['-k']\nres['+k'] \/= psum\nres['-k'] \/= psum\nprint(\"\\nP(-k|-e,+l) = \",res['-k'])","381fbd13":"## Teilaufgabe b, Variable Elimination\n\n(b) Beantworten Sie die Fragen aus (a) mit Variable Elimination\n\nZuerst stellen wir die Lambda-Tables auf (das ist f\u00fcr alle Fragen gleich)\n\nK |\n--- | ---\nT | 0.6\nF | 0.4\n\nK | E |\n--- | --- | ---\nT | T | 0.4\nT | F | 0.6\nF | T | 0.8\nF | F | 0.2\n\nK | E | L |\n--- | --- | --- | ---\nT | T | T | 0.9\n  |   | F | 0.1\n  | F | T | 0.6\n  |   | F | 0.4\nF | T | T | 0.4 \n  |   | F | 0.6\n  | F | T | 0.1\n  |   | F | 0.9","e3ef2efd":"Achtung, $P(K|L)$ ist eine Frage, bei der wir - auf den ersten Blick - keine Evidence gegeben haben. Daf\u00fcr ist unser urspr\u00fcngliches Programm nicht gebaut (und unser Vorgehen insgesamt nicht wirklich). Wir k\u00f6nnen das aber trotzdem leicht l\u00f6sen, weil man hier ja nach 2 bedingten Verteilungen fragt, n\u00e4mlich f\u00fcr den Fall $+l$ und den Fall $-l$. Und genau so verwenden wir auch unser Programm, in dem wir zuerst nach $P(K|+l)$ und dann nach $P(K|-l)$ fragen. Insgesamt ergibt sich damit $P(K|L)$ (man k\u00f6nnte die Ergebnisse noch in eine Tabelle zusammenziehen, das ersparen wir uns hier). Auch per Hand k\u00f6nnte man analog so vorgehen (aber eher unwahrscheinlich, dass ich so eine Frage stelle - trotzdem w\u00e4re es nat\u00fcrlich sch\u00f6n, wenn man auf diese L\u00f6sungsidee k\u00e4me).\n\n## Teilaufgabe c, Full Joint Distribution\n\nDen Code unten k\u00f6nnte man genereller gestalten, f\u00fcr den Moment reicht das aber so (ein allgemeinerer Weg zum Selektieren von Informationen aus Tabellen ist oben schon enthalten, davon k\u00f6nnte man einiges erneut nutzen, aber das ist hier nicht unser Fokus. Es wird unten durchaus erkennbar, wie man zu rechnen hat).","64bbeffb":"# Beispiel zu Bayesian Inference (Version 1.01)\n\nGegeben sei das folgende Netz aus Blatt 5, Aufgabe 1:\n\n![Aufgabe 1, Blatt 5, Bayes' Netz Beispiel](data:image\/png;base64,iVBORw0KGgoAAAANSUhEUgAAAiAAAAGnCAYAAACO1OzhAAAAAXNSR0IArs4c6QAAAARnQU1BAACxjwv8YQUAAAAJcEhZcwAADsMAAA7DAcdvqGQAAG98SURBVHhe7d0HfBN148dxC3Sm0DC6S4GWtjKKULBla4syZIM8FRFkORiKosguCAhYLIIFGSqPIIgMQWQ+CKjMQhEoQ+ChgvSRMv4oPNA+bZ4kz\/efS650cIUkl3G03\/fr9Xtp7jqOJM19buTyGIiIiIgcjAFCREREDscAISIiIodjgBAREZHDMUCIiIjI4RggRERE5HAMECIiInI4BggRERE5HAOEiIiIHI4BQkRERA7HACEiIiKHY4AQERGRwzFAiIiIyOEYIERERORwDBAiIiJyOAYIERERORwDhIiIiByOAUJEREQOxwAhIiIih2OAlDH\/+x9w7cafOHX2Nxw6moGTZ87j+vUb0Ov14leQM2m1OmRduY5jp84j7ZeTOPvP3\/Dnn3+Jc4mIyg8GyCNObwiOHXt\/waA3J+PxmNbw8KoMT281qgfVQXDdaPjVjIC32heu7p4Ir9cYLw19A1t3\/ACdTif+BLKn\/+Rr8cXa7eg5YCRqRT1hfByEx0N4XITHR3ichMfLy9sHjeOewltjp+D4iQzxu4mIyi4GyCPqzn\/+iwnJSxFUpx58Q+qiw8tj8danuzDvp9tYchT3jdT9\/8G4Lw+j58jZqN0gFlVrBOCdcZPx11\/c+raHf16+gX7DJ6BKNX+ENWqJXm8mY\/yKdCw4kCf5+Mzd8xdGLdiJ9v3HoEZQbdR9vBE+XfIF\/vvf\/4o\/kYiobGGAPGJ0eiB56Vr4BoehfvMOeGfpz5IrtIeNad+eR+ser6BK1RqYPHUG8vPzxd9Acvx5Jw+D3p4GlU91PPX8cEzfeEHy\/n\/QWJz+P2NM1ot9BqFhkfh2w3fiTyciKjsYII+QC1n\/h8atOyEksjHeWfKT5MrL0jHju98Qk9ALtcOjcPToL+JvImts2nMU\/qGRaJLQGx98f0ny\/rZ0CHtFQuo2xLMdu3BvFRGVKQyQR8TGXUdQ1b8mOg4cj0WHdZIrKzlj6MxvoK7uh6WffSH+RjKXcB7O2NlLUbmqH16dvVby\/pUzPk3T4tl+oxFUszYOHz4s\/lYiokcbA+QRsPibHcYTF4d99J3kCspWQzgsE1Q7EpMmTxF\/Mz2MEB8DRr0Pv9BIqw63WDKGp2xCVUMk\/uMfO8XfTkT06GKAKNzaHYeMW9Zj\/35IcqVk65Gy6\/9QM7we5n+SKi4BPcioqZ8goHY9fPTDDcn709bjvS8OGCLEF0eOHBGXgIjo0cQAUbDzl2+gql8IRs7bKrkysteYufl3+AYEY8eOHeKSkJSvNv0MnxqBmLXlsuT9aK8h7AkJDgnlOSFE9EhjgCiUsGs\/tl0PdBw4TnIlZO8xevGPCAwKwe3bt8UloqKyb95B9cBaeOOT7ZL3n71Hx36j8GK\/l8SlISJ69DBAFGre3zcisE59LDykkVwBOWI8+7fXMGLESHGJqKgeL49Cq+5DJO83R4zU\/bkIqlkHP\/zwg7hE5VtO1kkc\/+0vFL3eb\/7VM0g\/nY088bYc5vz8nJPr8cmyvbiq1+GPPUuR+t2vNvndRGUVA0SBNFo9gsLqY9SCf0iufBw1hItjVa1WAxcvXhSXjARpGZnwVtdAyq6bkvebo8aIlI1o9ERj\/E+4\/n65lod1fdVwj5+PLLEQdL+vRGKoO0Je+Bp\/yP4UAnN+vhanpjWDe+AQbMnLxdpENTzapuAiLzhMVCoGiAIlL\/4GYdEtJFc6jh69X5uIYcOGi0tGgo5\/ewVdXpkieX85ejzeqBk2bNggLll5lSsGwjxTIOQcxrSWavjETsI+mxxBNPPn63JxJ0dr+n\/NXdzJk10+RGUaA0RhhI3ZutFxGD73e8kVTulDi+SvNuOVD77GkBkS44M1eHt9jsT3PXjM+cc1VPFR49\/\/\/re4hOXbv67fMn52i\/BuIan7q7Qx\/9sf8frszRi\/Q3v\/\/CO38f7ijXj1owOYeaDEvIeMkR99izZt2opLV14VCQTtFXw7qC68ar+Ir3+31e4Hc36+Dld2z8GQZ5sgPCQEdRq2Rd+kjbggXmBYf3UTJr88DdvO7sKsvi0QEVobjdqPwqqzBVcg1uPqpsl4edo2nN01C31bRCC0diO0H7UK975EoP0d26a\/iDb1ayEk9HG07JOETRc1pnn6q9g0+WVM23YWu2b1RYuIUNRu1B6jVp0Fr3NMSsQAUZiDx89D7RuMRUf0kiucUsfBbWhVoyIee+yxUkZFVHt+NxZIfe9DxlMde2HZsmXiElpO+CTen376Cd9884045dE18cPFaPZsouT9VPrIw7DOvnB5zBV1RpzDomLzcjHxjafh5eIClxqJGLLDssf907T\/Ql21Ov744w9xCcsjMRCeTsb25ATUqNYGMw7niPMkaDMwr08LxMXGIrbYiEP8+B2Gn1bSw3\/+3Z\/HoJFKjSYD5+Dr7zdh5eyXEF3FDRHDtuOWYb7u1xmIdQ9AncgG6Dp5Gdatmo2\/RbpD1WYOzhk7RodfZ8TCPaAOIht0xeRl67Bq9t8Q6a5CmznnDHMFd\/DTu9GoEtYTyVuP4czRLZjZOQSqJyYiTSgM3a+YEeuOgDqRaNB1MpatW4XZf4uEu6oN5ph+CZGiMEAU5u0pKWjb+3XJlc0Dx4Hv0FxdAY9VrIMnhqSgz9tzi4\/Rn2Do8r9KrPzMGyNmfoWePXuKS2geITp+\/vlnjBw5EoGBgcYISkxMFOc+uhq3ao\/X52yQvJ9KH0UD5GyRx0CPOXNfg7+rCx7zeALPLLxp1ePTvudLWLx4sbiE5ZEpEFxrRiDMwxOtkgtW2KXQ38Ch1QuR+skn+KTYSMVnO3+T+N6H\/Hz9dSzr5gOvNh\/h\/L0ZWpx6vyncqnTHlzfFAHGrhg4LLxjmCPS4tqQjvLy6Y7nxMI4pQNyqdcDCC+JhHP01LOnoBa\/uyyF8if7Gl+ihro7eKw0\/UKTL\/BAtPepg5I+GAjEGiBuqdViIwh+xBB29vNDd9EuIFIUBojCtOvQ2HjKRWtE8cBQESKU49Fhv20u1J+\/IRrVq1cUlLJ1wMuS+ffvwxhtvICgoqMQemEc\/QPT6\/8FDVcV4cq7U\/VT6kA6QhWtTUd8YjcFoPOk8Pi32PeaPN2avRO\/evcWlLI\/EPRRt38OsHoFwq\/US1sg\/87SIh\/z8\/F0YVssdT0w+LsaFSf6eEajtFoV3DmhMAeJRF2\/tFQ+XGORtHgR\/j3ZYkC38LFOAeNR9C4VfkofNg\/zh0W4BhC\/J\/3Ek6rhWR0zPlzFw4EDT6B+P2pU80eOrHDFAPFD3rb0o\/BGbMcjfA+0WZBd7Bw+REjBAFCagViSmrvtVckXzwGHHABGGn38g\/vWvf4lLWUiIjgMHDmDUqFEIDg6+LzqKjkc9QM7\/9i\/jhcek7p8Hj\/sDZNHuXWhX19Nwv1RGrUE\/4+P7vsf8MW3dGURGRolLWR6JgRA\/D5evbsLQCHfUePYTnClc1xen+w3rkl7F0CFDMKTYGIo3l6QXrrzvecjPz\/seA\/3cEPvBr8X2jGgOvINItwhjdEgGyJbBCPBIQOqV0gNky+AAeCSkQviS\/G1DEewago5jPkRycvK9MSflc\/yYZfjNkgGyBYMDPJCQeoUBQorDAFEQYQu7YiU3LDiYL7mieeCwc4DExLbE\/v37jcspRMfBgwfx1ltvISQk5L7QKG086gHy\/c79Vr47qUSApF1A\/6eDjLerPfMVPjgs9T3mD+GaIB4enuJSlkeFgSC8S+XOvvGIUanQdPw+3BG\/opgHBMgbi49InLD5kJ+vTcfEaDcEDNyEwjND9LixrCsqe7XHp9l6mwSI9uRUNHULwuAt95+lYsQAoUcMA0RBbv75l\/EdFlIrmYcOOwfIU892RkpKCkaPHo3Q0FDJwHjYeNQD5LNVG\/HEU90l758HjyIBMjwd7wxqBvfHKsCz0fsYu1fq6y0fnp5eyM0tZcVU5hUPBBgS4mRKPKq6hWPQBlscenjYz9cgbXw03H1aYuKeq8bDMLmZazG0nif8eq0wHj6xRYBAewxTmnqiWvwMpP0l\/qt0t3Fh3xEY35DDAKFHDANEQbKvXjd+8JzUCuahoyBAJFb8jz3mAs+EVbJ287eK72A8ETUsLEzi55s3wsPDERAQ8MgO4e3IDVp2krx\/HjwKAqQSfBu3hrqSC1z8X8CQLRa+0+kBQ62uWo4\/GyYPmwb6w7v9IuPK3kh3CSsSa8EjeCC+k33+pRk\/\/84RzOtZF6oKrqhcrSq8XN0Q9NRYbDWWg+HLLySjtXd9vHeoMEDyd76O0ModseSa8DU6XEhuDe\/676HwS\/Kx8\/VQVO64BMYvMcg5lornIyvDVeWHOhHhCFa7QxU+HFuFXS+6C0hu7Y367x0qDJD8nXg9tDI6LrnGACHFYYAoyM2bf8KrSjXJFcxDR0GAuKjhFx2PqGZFRwIavfYjUqW+z8yR0KErvv\/+e+NypqenY8yYMahdu7ZkaJQ2hIDJzs5+ZMdHCz7HE23l7QEJbN0dAcK7XtwaIGHhn1a960VqqFTeuHNH8oADOYwWf2Wm4+fdP+LQ2ev2u\/aG7jYuHduL3bt\/QtqZbOSwLOgRxQBREK1Wi4qVXLHosBWHUOx8CCauZVvjtTxKEj4W\/t1330WtWrUko6PoeOTPAdmxBxExT0nePw8eRQ\/BnMC411vA4zEXVPBPxJAt8h8r4fOCXA1b3LwkOxE9ShggClMjoCY+2HRRckXzwGHnAKldJwz\/\/Oc\/xaWUlpaWZjxHpGbNmmUyQM7\/MxPVA2tL3j8PHiVPQj2HF1sKtyvAq1kKkg5KfY\/54+NtvxkDkIjoUcIAUZjmT3fC8JRNkiuaBw47BsiifbeNu\/h1umKXXypVae+SedQDRNhD5ebhhdT9\/5G8n0ofJQLEMG3R9jWIC6hkuF88EdL\/J8y773vMH+8v2YSOHTuKS0lE9GhggCjMqLFT0eHlsZIrmgcOOwbItKXfo127duISWqbodUKEvSOPuvpNmmP04j2S91Pp4\/4AEabP\/XQUAt1cDI9ZbcTNvmL1+SD9hozEhx9+KC4hEdGjgQGiMPsPpiGoTn3JFc0Dhx0D5G\/9h2Lu3LniEpZv46fMxFPPD5e8n0of0gEifA7M+NdbwsPlMbio2+OFtZoi32PmSP8fatYMxZkzZ8QlJCJ6NDBAFEbYYxBcqy7GfZkmvcIpbRQEiOS7YITRDk3fOoyFUt\/7gLH0UA6qVq2GK1euiEtYvv3++2V4+1S38DBMaQFiGGnn8WIrP8M8F7g9PhFjfi4yz4zx0dc\/o2HDhuLSERE9OhggCvRhynw0ie8lucIpdRxKQ+fHvQ0rsvtP\/jSNCvDu\/J3Fn4b73ozUcv45I\/dL6NANL45bJHl\/SY98vPW3cFSsWAX1xly671DLou3r0bq2NypUUCN64h\/F5j1stO\/UFQsXLhSXjIjo0cEAUaD\/\/Oc\/qOYbiKRvTkqudBw1PjuiMe7eF95qS4UOHDyE6gGh1l0y34Zj\/rdHjO84ys+32xUniIjshgGiUB99\/AkaNH9WcsXjqPHWxFno1q2buERUVMeuvdB92AzJ+80R47Oj\/8OTcS2wbNkycYnKN821Mzi0f5\/x05gLxv608yi4Yrk8Glw7cwj7i\/zsffv2I+286cqzusy5SKjRBBMPF17l1P70uHloBeYu3YM\/zHtzGpHiMEAUSqfToX50E\/Sf9JnkCsje49Nt51C9eg1cvHhRXCIq6vLly\/Cp5uu0vVTjZnyC1q1b8+JjRnnY8FI1VKjkBi8vr3tDVaMPVsq+DLtB3ga8VK0CKrkV\/mwvLxVq9FlpnC31OS\/2l48fR9ZBpap9sa68fgQQPfIYIAr266+\/Qm1YyU36+oTkSshe47OD\/0b9Bg2xZMkScUlIypfLv0JQ7SjM++nfkvejvcaC736Br68fMjMzxSUp70p+WJyN5a5DX7U74udlSX6einMCxECXg9t3hY++I3o0MUAU7ps1a+EbGIpZWy5LroxsPT4\/okHbp9th5MiR4hLQg7w2bCQaNn\/GceeD7LqE4OAQbNiwQVwCUkqAjFi1Hkm9Y1G3Zm00aj8Kq84WnJujx9VNk\/HytM1I+3IoWoTXQsNX1uGmPg+\/fv0OujQNR81a9dGqUw\/j5yU9\/9Yq07dpf8e26S+iTf1aCAl9HC37JGHTxYLI0ePa90l46e1VuKAzLMPFrzH6+Z7G7zeN3hjx91+Nn8xLpFQMkEfA\/Pmp8AuqhffXn5VeKdlofH7oLuLbtUefPn2g19vjlbzsEe6nXs8n4olWHfDJvhzJ+9VWY9H2cwgNrYVFixaJv51MLAkQLTLm9UGLuFjExhYfcfHjsUPqcIY5AeLqDlXVSHSdvAzrVs3G3yINt9vMwTnj+RniR+0HhaFuVA\/M\/Hotlm86gVtpExCtCkfigt04cWIXUrqHwC20E8Z8sc\/wPXfw07vRqBLWE8lbj+HM0S2Y2TkEqicmIs3YNcU\/vl9\/4ycsnDgOY8eOxdhR3RDl7orGk48xQEjRGCCPiC+\/XI6q1f0wPOU7yZWT3LFwy2k0aBiN119\/3exLrpOJcH8NGfoq6kQ1wtR1v0rev3LHB4vWoEYNX8Pz4Evxt1IhU4AUewu6ixtazD5vWE2XpMeNQ6uxMPUTfPJJ8ZH62U78JvXUNwaIS5G3tD8GF7cWmH3e9MXGAHGrhg4LL4grfD2uLekIL6\/uWG48B8UUC66uj2PUnoJPLNbh3Mzm8IyeiHSxEvJ\/HIk6Xs\/g06t6Q1B8iR7q6ui98qZppoEu80O09KiDkT8KBVI8QArl4tDEGKhqDcTG69yIIGVjgDxCDh06hDphddG2Sz\/M+cc1yRWVpUM45PLG2GnGldvnn38u\/iayxtKlS1Gtui+eHznD+Am1Uve3pWPpj1fQrVciIiMj8csvv4i\/iYozBYhb7ATsOn4CJ04YRsZJXPzTRiFtDBA3xE7YhePCzzaMjJMXUfDjpc4Byds8CP4e7bAgW4gAqVjQ48rCZ+Fdcwi2GpvEEC1\/746q6t5YZYgWY4y4VkdMz5cxcOBA0+gfj9qVPNHjqxzD10sHSP7RqXiycgheXHNVcm8NkZIwQB4xubm5eO+9sVBXrY5er06wOkSWHvoPxs1aZNyl36NHD\/zrX\/8SfwPJIbw7pkvXbggODcOQKZ9jwYE8yfv\/YWPRnit45c1xqFatOiZPnmy8NgyVxpJDMDr8ti4Jrw4dgiFDio+hby5BerG9CSIrTkLN2zIYAR4JSL1SWoAA2oypaOpaCTUadcaLfTuinlqNJyfvw13DvPxtQxHsGoKOYz5EcnLyvTEn5XP8mCWUj8TP1GRgZssqCOz9Ff5gfdAjgAHyiPr999\/x+uvD4KOuioQuiRg191vM3f2n5MqsYCw6kItZK3bjxcHDjSs24RofwqfWku39\/PPP6Ny5i3GPSI8Bb2LsZz8+NEYW\/vh\/mLpwHZ7r1tt4+fs33ngDWVlZ4k+k0tkoQN5YjCNS13SzS4AIb6MNR2Cfhdi55lOkzEnFyp8vGf4lJtqThjhxC8LgLaW9x7bkz9Ti9JynoPbrhi8u2WjPD5GdMUAecbdu3cLixYuNH8depYoPgoJrolnzNojv0A0tn26Ptu06oUWbeISFR8DT0wstWrTAzJkzjVvqZH\/CdVSmTZuG2Ng44\/0fVjcKzdskoE1CJ7RO6IiEjt3wZPPWCAwKho+PGs8995zxUNjdu8J2MJlHPAQTNwk\/njqN06dN48zZP1BwxoUs4iGYuEk\/4pT4s0+fPoOzf5h+unUBosGhsQ3gGdAcL458F+MmJmHa7FSs2itGiPYYpjT1RLX4GUgruJqa7jYu7DuC3419Ufxn6i4uQseq3mg2ditOFixf1m0ehiFFY4CUIcI7Mi5dumTc+v7uu+\/Qt29f1KtXD9u3b8fZs2fx3\/\/+V\/xKcgaNRmO8tsvOnTsRHR2Nfv36YdOmTdi7d69xjxYvKmatfOx4vSYquRQ5CVU4UdT9KXz8uw1Wwfk78HrNSiU+Z8kF7k99bJytu5CMVt718d6hwgDJ3\/k6Qit3xJJrpgC5kNwa3vXfQ+GX6HFj+zA8ro5Ex0FDMXjAi+j9bCP4uanR4oOjxq\/IOZaK5yMrw1XlhzoR4QhWu0MVPhxbhVNASvxMIXgCKxY9UdYFbq3nSJ9US6QQDJAyTFihCdcEeOWVV8QppASzZs3CU089xbc6l2faDEyJ8USDcYcN+VQgF9uGBsM99gPxtoHuNi4d24vdu39C2pls5PApQ2UIA6SME3blCx\/XvmDBAnEKOVNaWhr8\/f150m95pzmMcQ3cENJ7CU78KbwPV4s\/M77CoMc9Ufu1HaavISrjGCDlgHAegrDS27NnjziFnOHf\/\/43wsLCsHHjRnEKlV96XP1hOnrFBEPl6gp3d8NQ18XTry7BUVt8fg3RI4ABUk7s3r0bAQEBxnNEyDlefPFFDBs2TLxFZKLX3MXt27m8aimVOwyQckS42mOjRo2Qk2M8i40cSLiCqXAoLC8vT5xCRFS+MUDKGeF6B7169eI7Lhzon\/\/8J3x9fXHq1ClxChERMUDKGeGtoK1atcLUqVPFKWRPwlufmzZtioULF4pTiIhIwAAph65du4bQ0FB8++234hSyl3fffdd4qXsiIiqOAVJOCR9sJhwWOHnypDiFbO0f\/\/gHatasiT\/\/\/FOcQkREBRgg5djq1atRp04d3LxZ+JHfZBvXr19HUFAQfvzxR3EK2VNO1kkc\/+0v2196PCcLJ4\/\/hoKroZtPj5uHVmDu0j34g1cjJZLEACnnxo0bh\/j4eGi1fBOgrQgn+Hbq1AkTJ04Up5B95YkfRjffjA+js0zeur5Qu8djvsU\/WPiwuTqoVLUv1pX2eXIi\/R\/rMabPm1jF66ZTOcMAKeeEy4F36dIFI0aMEKeQXHPnzjV+6B+jzlEs+TRcy+SKATLPmh+sy8Htuw9\/DmgzpiDG43GMKfJZMkTlAQOEjFfoFD60bunSpeIUstaxY8fg5+fHC745lLMCRIvft03Hi23qo1ZIKB5v2QdJmy7ClBF6XPs+CS+9vQoXxB0buqytmNqnBSJrBqNOdDyGfH4Sf\/0wHX97pgGqVvRBVHwP9Ow1BJ8e10KftR7jXnoPa00ffWukPboQQ\/onY69xj4oeVzdNxsvTtuHsrlno2yICobUbof2oVThb+OEyyPv1a7zTpSnCa9ZC\/Vad0KNnT\/R8\/i3ubSFFYICQkXCtCmHFuW\/fPnEKWUq4wFtkZCS++eYbcQo5hrkBokXGvD5oEReL2NjiIy5+PHZIHCp5UIDc+eldRFcJQ8\/krTh25ii2zOyMENUTmJgmFECJj+DXX8eKntVR\/ekkbD3xK47u+BwzPj+If5\/+FnNGd0CIqz\/iR87AzNmL8EOWDtrjk\/GERwOMO1y4VyRv\/Yuo6tEJn\/0l3DL9fPeAOohs0BWTl63Dqtl\/Q6S7Cm3mnDPMNdCkYUK0CuGJC7D7xAnsSumOELdQdBrzBfZdt3GpEVmBAUL3CO\/aCAwMxOXLl8UpZIlBgwYZBzmauQGix41Dq7Ew9RPjVYGLjtTPdkp+dH2pAaK\/gS97qFG990rcO4Vbl4kPW3qgzsgfkV8yQLQnkNTYA\/XHHETJa+FKHYIxN0DcqnXAwgviYR79NSzp6AWv7sshfJyM7txMNPeMxsR0cX7+jxhZxwvPfHrV9ifrElmBAULFpKSkoEmTJvjPf\/4jTiFzCO8oioqK4mXuncIJh2CMK3NXVI\/piZcHDsRA4+iP+NqV4NnjK+SUDBBDkhyZFgcftwC0GDQTa0\/cNO2lMJATIIU\/X5CHzYP84dFuAbINi6u\/shDPetfEkK13jHP11\/6O7lXV6L2Kn3ZHysAAofsMGDAAL7zwgniLHkY430O4popw\/gc5g7kBosNv65Lw6tAhxo8kKDqGvrkE6YXr+ntKD5BtGBrsipCOY\/BhcjKSC8acFHz+Y5bhN0kFwl38umEGBrYJhVel6mg5+SfcMky1ZYBsGRwAj4RUXBEWV5uBqU1dUalGI3R+sS861lND\/eRk7Ltr+moiZ2OA0H3y8\/MRFxeHmTNnilOoNMI7XYR3vAjvfCFnsUGAvLEYR4qcvFmg1ADRnjSs3N0QNHiL4bdLkQqEAjk4MaMVVJV7YMVt4UdNNQRIFN45UPiFutPT0My9Dkb+WLBQelz7vDMqWxAg+T+ORHhgHyzcuQafpsxB6sqfcekhbwkmciQGCEnKzs5GSEgINm\/eLE4hKcK1PoRrfvDD\/ZzJFCBucZPw46nTOH1aGGdw7or8TX1jgLjFYdKPp8Sfexpnzl3BXWhxbEpTeFaLx4y0ggug6XD7wj4cMb5zpUQgaI5j\/d9\/xh\/GntDg3EdPw7vGi1ifY0iLyx\/jKXcfdP3iKvS6XOQKX3\/7G\/ytqisiX9+G63odbuz7AM8Eu6GSu\/kBojk0Fg08A9D8xZF4d9xEJE2bjdRVexkhpBgMECrV4cOHje+M+fXXX8UpVJRwlVPhaqfCVU\/JmfKx4\/WaqOTyGB57rGC4wKvLMhjX1TLk73gdNSu5FPm5j8HFqwuWCT845xhSn49EZVcV\/OpEIDxYDXdVOIZvFc4D0uFCcmt4138PxiMr+T9hbCMfuKtDEF7bF15eddBjwUnDkgtfegGLnvNFJVdvVFXXwpCtwmmqeUhPToB\/pQpw866MysHxmPDJm2is7o4vheM2JX++UT52vh6Kyh2X4JohQPQ3tmPY42pEdhyEoYMH4MXez6KRnxvULT7A0XvfQ+Q8DBB6oBUrVqBu3br46y+5L+Vli3D5euFzXnbu3ClOofJJh9uXjmHv7t34Ke0MsnNKHKopSncHvx\/fi917DuHsjRIFoL2Bswd2Y8\/hi7hz70focediOn76KR2\/W7wzR4uMKTHwbDAOh4scWsrdNhTB7rH44CyvA0LOxwChh3rnnXfw7LPPQqdz\/IuWRqvHN1t+wrBxH6LziyPQpsuLaNXpBbQ1\/Ldbv9cx\/v1kpKf\/In6143Tv3t34SbdEyqTB4XEN4BbSG0tO\/GnIEUOS\/JmBrwY9Ds\/ar2EH36xFCsAAoYcSwqNDhw54++23xSn2dTdPi9EzFuOJtl3hVaUaqgfWRqM2XRGf+Aa6vDoV3YfNQJdXpuCp54ehXtyzUPlUh7faFzGtnsVXK78Wf4r9LFiwAM2aNcN\/\/\/tfcQqR8uiv\/oDpvWIQrHKFq7u7YahR9+lXseQo34ZLysAAIbPcunULERER+PLLL8Up97tzx3S9AWv9dVeDvw1Lgm9IOEIfj0Hiu\/Mxe+u\/DC+YeOiYuu5XdB6ahKr+IfANroOp788Qf6rlDhw4gGvXrom3ijt58qTxLbcXLlwQpxApnF6Du7dvI5cfTUQKwwAhs509e9Z4UuqhQ4fEKSYajQaDBw\/Gm2++KU6xjF4PjP94JQJqP47Ipk\/jnaU\/S0aGOWPRET1embUG\/rUi4Rdc26pzNLp27Wr8d27fvl2cYiJcnK1BgwZYvny5OIWIiKzFACGLbNmyBcHBwbhy5YrxtrCnoGXLlsZ3B1SvXt0YI5b4t2Gz7Kner0LtG4zX52yQjAprxqLDOvztnXnw8KqMAQMHi7\/t4YQrmXp4eJje7eDiYjzsVPBvev3119GvXz\/j\/xMRkTwMELLYrFmz8OSTT+LgwYPGd4IUfYvi+vXrxa96uHOXb+Lx2HaIahaPj364IRkScsf768+iRnAYGj4RY9bH4wvLX\/TfI4yYmBjjeR\/h4eGyDzMREZEJA4SsIuz1qFix4n0r686dO4tf8WD\/\/NefqNMwFi26DMSnaVrJeLDVmP\/zHUQ0aYPaYXWhF473PMBLL710379JGBUqVMCkSZPEryIiIrkYIGQR4YqfEyZMkFxJC0OIEuEqqg+Sq9GjfvP2hvh4GYvT\/ycZDbYeCw7koWZUY7Rp+5S4FPcT9pCo1WrJf1fBED4j5\/ZtvouAiEguBgiZ7e7du8brX0itmIuO2bNni98hreNLbyH8iVb4NO2\/krFgrzHnH9fg6e1j\/MRfKT\/88IPkv6fkqF27tvHwExERWY8BQmb57bff0LBhQ8kVcskhfCx9ab7YuBfe6hr44PtLkpFg7\/HGJ9vh5u6JP\/\/8U1yiQiNGjJD895QcPBxDRCQfA4TMcurUKeMn5EqtkKWGcC2NkoTTL4S32T7\/VopkHDhqRLd6Dq1btxGXykQ4tCR8+J7Uv6XoEN4BtGfPHvG7iIjIWgwQMptwAmdqaioqV64suXIuOoYOHSp+V6GJH69E9aA6Dj\/0UnIIFzer5OqGjIwMccmAI0eOSP47io6ePXtK7jkhIiLLMUDIYv\/6178eei6IECm5uYWf+y3s\/YiIaYv+kz6TjIIHjp\/PY\/ScdRixIhufSs23YrToMgCxsbHi0gHjx4+X\/HcIw8vLC0uWLBG\/koiIbIEBQlb79ttvjR9HL7XSFkbRK4Z+vXU\/Klf1w8JDGskgeNBY8NEAeLs8hooNZ+L9w9JfY+mY8d1vqFix0r1IqlevnuS\/oUmTJsYrwBIRkW0xQEiWf\/\/73xg+fLjxxMySK++nn35a\/CrgmT6v4em\/jZSMgYcNewSIMITPjJk+fTrOnTt337ILV0EdPXq0xVd2JSIi8zBAyCaEz4cp+S4ZYSV+8eJF4\/w6DWIxct5WyRB42LBXgDw3aBwaNWpkfNtw0eUOCAjAP\/7xD+NyExGRfTBAyGaEj6f\/4IMP7n2WijAmT55sPP\/DQ1UFc3f\/KRkCDxv2CpD3vtgPT09PNG\/e\/N7ydunSBTdu3BD\/RUREZC8MELI54aPqExISjCv00NBQ7NybjirVAyQjwJxhrwCZv\/eucRmFPTVCNAnv8CEiIsdggJDdfPnll8ZPyH1l1DjUbhArGQHmDHsFiDAeM8SHcOE04TonRETkOAwQsqv\/+7\/\/Q48Xhxg\/+0UqAMwZ9gyQChUr8bLqREROwAAhu3tnSgoatOwkGQDmDHsGiKubO9LS0sQlJSIiR2GAkN1NTV6IqGbxkgFgzrBngAjXAvn111\/FJSUiIkdhgJDdrd2wGQG160kGgDnDXgGyOP1\/xpNQi16xlYiIHIMBQnYnfH5KJTcPLDqilwyBhw17BcgHm34zXkCNiIgcjwFCDqH2C0bSN6ckQ+Bhw14B8vKET+Hv7y8uIRERORIDhByifrO2SHz3E8kQeNiwV4DUi2lp\/IRbIiJyPAYIOcS746egbuPWkiHwsFEQIC7eEQhrFm88obVwJCB66E7J73vQWHgwHy4VKvAdMERETsIAIYfIy8uDV2U1pqw5LRkEDxoLv0xCqOf9H3ZnGi5wb2X5R\/z3f28u1Gq1uHRERORoDBBymGee64nYjv0kg8CRY3G6Hl6qypgyZYq4ZERE5GgMEHKYK1euGD+UbsraM5Jh4KjRb\/SHUKlU4lIREZEzMEDIoXo8\/wIiY56SDANHjPk\/3TZefGzx4sXiEhERkTMwQMihNBoNqtYIwAvvLZAMBHuPiAZNUK9ePXFpiIjIWRgg5HC7d++Gu5c3xny+TzIS7DWef30C3NzccP36dXFJiIjIWRgg5BSzZn9oPB9k4spjkrFg6\/Ha9GVwcamAbdu2iUtARETOxAAhp3lv7Di4e6owaoHl1\/GwZPQZNskYH59\/\/rn4m4mIyNkYIORUqampcHP3RMeB4\/FpmlYyIKwd8368hfB6TxgPu2zdulX8jUREpAQMEHK6jIwM+Pr5o5p\/Tby9aJdkTFgyhOt8CG+1rVixIho2bGj8MDwiIlIWBggpxujRo+Hm7oHg8AZ4LXk9Fh3WSQZGaSN1Xw56vz4Znl4qeHt78622REQKxgAhRcnNzcXw4cNRuXIV46GZJk91w0sTFmHiV78gZdfNe1EiHK5J3p6Nd5fsQe9hUxFevwlcXFyMn26bnJws\/jQiIlIqBggp1q5du9C9e3fUrFkT7u7uxsAo+jkwwm0vLy\/UrVsX\/fv3x6lTp8TvJCIipWOAEBERkcMxQIiIiMjhGCBERETkcAwQIiIicjgGCBERETkcA4SIiIgcjgFCREREDscAISIiIodjgBAREZHDMUCIiIjI4RggRERE5HAMECIiInI4BggRERE5HAOEiIiIHI4BQkRERA7HAHnk5CIr4yh+u60Xbz+Y\/q8LSD+VjXzxNilLblYGjv52W7xlHv3VPVg0azUy8sQJZtHjrwvpOJXNZ8IjITcLGUd\/g5l\/5sKTAnsWzcJqy54UFuPrCdkSA0RBNNd\/Rdr+fdi3fz8OHjmF329pxTmFdOeS0Vodhw9O60wTcrJw8vhv+KvoC1X+VZxJP41sw2uR9sh4RKsTMP838evJMTTX8Wvafuzbtx\/7Dx7Bqd9v4b5HU3cOya3ViPvgtDhBg2tnDmH\/PsNz4N7Yj7Tzf4nzTTT73kakV3ssul587ZSTdRLHf\/vLkBqF8q+eQfrpbOQZfvuR8dFQJ8wHnwrOpMH1X9OMj\/H+\/Qdx5NTvuP\/PXIdzya2hjvsAhX\/m9z+2xWj24e1IL7RfdL341zzk9UGK5toZHBJeh4o8D\/ennTf+DL6ekC0xQBQjDxteqo4Kldzg5eUJt0oucPEIRsvXv8LZe5sb+dg3OhLqDovwh\/iCkreuL9Tu8ZifJU7Q\/Y6ViaFwD3kBXwtfZFjJzW7pjUYT0+9fAZLd5G14CdUrVIKblxc83SrBxcUDwS1fx1eFDyby941GpLoDFt17MDfgpWoVUMnNy\/AcKBgq1Oiz0jRfJB0geVjXVw33+PkofCqsRGKoO0Je+Nr4fNGdm42W3o0wMZ3PBKcRHuPq4mPs6YZKLi7wCG6J1786W7hXIX8fRkeq0WHRH2JM3P\/Y3qeUAHno68N9hNehauLrUOHzUFWjD1YKO+r4ekI2xABRjFzxRWae6UXGsJWStuhvqOOqwlMp5w3bRMK0XRhW2xvPLCh4YTJ8l\/gCM8\/4TTk4PK0l1D6xmLSvYLe+DmdnxsGz3ntI04iTyO6KPy75uJq2CH+r4wrVUyk4b3owsWtYbXg\/s+BeTBq+CX3V7oifl1X6lq6BdICUeP7kHMa0lmr4xE5C4VPhLGbGeaLee2mG7XByihKPcf7VNCz6Wx24qp5CiumJYfgzH4ba3s9gQeETo\/hjK6WUAHn460NJD\/tdfD0h22GAKIbEH772FN5v6grP7stxx3BTc3AMHveIwZSThdsehS8wWlz5dhDqetXGi1\/\/bgoWkXGF5dEU005zm8VRir\/wC7Q49X5TuHp2x3LTg4kxj3sgZsrJwi1JWwWI9gq+HVQXXrVfxNe\/F3smYN\/bkfBoOg18KjiJxGOsPfU+mrp6orvpiYGDYx6HR8wUFP6Z2yJASn99KO7hv4uvJ2QrDBDFkAqQdEyMdkXVvusNc\/W4kpoAj6ovYn2uON\/A9ALzNJK3JyOhRjW0mXHYsJ1Twq2\/o6uXCt2+vCVOIHuTCpD0idFwrdrX+Pjpr6QiwaMqXiz+YMoPkKeTsT05ATWqtcGMw\/c9EwxPha7wUnUDnwpOIhUg6RMR7VoVfU1PDKQmeKDqi8LffAG5AfKQ14dizPhdfD0hG2GAKEbxP3x9ziX8MKM9AlyD8dL6m4YXFQ32vhUBt3pjcKjIrk\/jC4xrTUSEecCzVTLOSW3aCIduQt3RJClDnED2VixA9Dm49MMMtA9wRfBL63HTMEmz9y1EuNXDmOIPpmHl5ILHHnvs3nBxa4HZ4q75Ag8KENeaEQjz8ESr5HOSW7nC7v1Q9yZIyuDWq1MUCxA9ci79gBntA+Aa\/BLWm54YeCvCDfXGHCpymExmgDzs9aEY0+9yKfIcfMzFDS1mi4eBBXw9IRthgCiG6Q+\/QkVXuLm5olIFF7hWb4TEuQfwp\/EVJQ+bB\/nDren7OFVk3WFa0bXFe7N6INCtFl5aU3h+yD2aQxhTzw0Rb+0VJ5C9GR+XChXh6uYG10oV4OJaHY0S5+KA6cFE3uZB8HdriveLP5iGlZMbYifswvETJ3DCMDJOXsSfJVYaD9wD0vY9zOoRCLdaL2GNxEmGmkNjUM8tAm\/t5QF8pzA+xhVQ0dUNbq6VUMHFFdUbJWLugT9Nf7d5mzHI3w1N3z9V5CRPmQHysNeHYky\/yy12AnYdNz0HT2ScxMWiT0K+npCNMEAUQ\/zDf3Istqcfw8lzf+B2sRVPPrYNCYJb4yScuC9ADFval69i09AIuNd4Fp+cKbFy0ezH6Eg3RL17QJxA9mZ8XNyexNjt6Th28hz+KP5gIn\/bEAS5NUZS8Qfzvt3zUh52Dsjlq5swNMIdNZ79BPc\/FUYj0i0K7x5ggDiFGJlPjt2O9GMnce6P28X3VOVvw5AgNzROOmHDAHnI60Mx5vwuvp6QbTBAFONhf\/jCdRwaGrZsh2FXkasA3XuBEb7pzj6Mj1FB1XQ89gnnsxXI+w4DfN3RYvYFcQLZW7HHRYJwPYWGhi3SYcUfTJsEiOmpMB4xKhWajt9nPIG5QN53A+Dr3gKzL5TYrUKO8bDHWHsE4xu6odawXYVvy7VFgDzo9aEYM34XX0\/IRhggivHwP\/y\/vuwOb88OWFJkxVNyRZd\/MgXxVd0QPmgDssUv019KQVv3Gui\/scgJj2RXDwsQw4OJ7t6e6LCkyApD3DqOm\/QjTp0+jdPGcQZn\/yi+tjAnQIQ9ZidT4lHVLRyDNmSLv0OPSyltDVvB\/cGngpM8NDL\/wpfdveHZYQkKH17TY+sWNwk\/nip8Xpy7clecb2BOgBjc\/\/qgxemFffFUz49gujyM1O86jTNn\/7gXsnw9IVthgChGHjYN9Id3+0X3wqEk3blZaO4RjCFbCy9hmLdpIPy9DSuje9+kw6UViahl+LqB35ne63\/X8CJUXfUsFl4p5QeTzd3\/uJSgO4dZzT0QPGSr4ZEX5e\/A6zUrFT8B8DEXuD\/1sfgFJtIBIvH80V3CisRa8AgeCNNT4a5h5VIdqmcXgk8FJ8nbhIH+3oZQKIjCknQ4N6u54TEbgsI\/83zseL0mKrkUf154dVlmyBVRKQHy8NeHfGwdEgTX8Dfxk\/HIjNTvegwu7k\/h499NP4OvJ2QrDJBHie40pj\/piYi391lwIalcbH+1JlRPf4yL3OuuIDqcnv4kPCPexj4LT8eQDhAz5G7HqzVVePrji8XPOyBF0Z2ejic9I\/C2JU+MUgLkoXJ2Y2SEGi1nZZj5msLXE7IdBsgjRYeLn7SDT\/gb+LGUz3G4z93NGBxSDd2WlbbFRc6iu\/gJ2vmE4w2zH0wTawPk7ubBCKnWDctK2ytDyqC7iE\/a+SD8jR8L9449jFUBosflxZ0Q3PIDHC9yKtID8fWEbIgB8qi5\/QPGteuMWUfM217J\/zkJz3R8H\/t4uFaBbuOHce3QedYR8bZ5NAfeQZRXByy5IU4wSz5+TnoGHd\/fZ9iGJaW7\/cM4tOs8C2b+mQtPCrwT5YUOFj0pdLhyZCeOXCnyTqyH4OsJ2RIDhOiRo0XO3TxugVIx2py7yOOTgh4hDBAiIiJyOAYIERERORwDhIiIiByOAUJEREQOxwAhIiIih2OAEBERkcMxQJzs+vXrOHr06CM3jh07Jjld6eN\/\/\/ufeM8TEZEzMUCcrEWLFnjiiScQExPzyIw6deqgWrVqkvOUPITl\/vzzz8V73vZu3bqFVatWKXKsX79ecroSxrp16ySnK2Fs375dfHTlOXDggPExUOrYvHmz5HSljE2bNklOV9LYsGGD5HSljIsXL4rPRuVggDiZj4+PccX1KElJSYFarRZvPTpmzZqFsWPHirdsb8CAAXj66afRt29fxQ1vb2+0bNlScp6zR+XKldG8eXPJec4eTZo0wZ49e8RH2DpnzpxBdHQ0evXqpdhRsWJFyelKGcLrTePGjSXnKWEIGzeBgYGS85QwOnfujEaNGonPSOVggDgZA8Rx7B0gPXv2xLfffiveUhYhQJYsWSLeUhYhQBYuXCjeUpYuXbrg+++\/F29ZJz09HU2bNhVvKZPwibd6vXIvo1q9enXMmDFDvKU8wt++sCdbqa5evQp\/f3\/xlnIwQJyMAeI4DBAGiKUYIMrAAJGHAUKSGCCOwwBhgFiKAaIMDBB5GCAkiQHiOAwQBoilGCDKwACRhwFCkhggjsMAYYBYigGiDAwQeRggJIkB4jgMEAaIpRggysAAkYcBQpIYII7DAGGAWIoBogwMEHkYICTJ\/ADJQdbJ4\/jtr6IvEvm4eiYdp7PzxNuOwQCRxgCxDgPE+Rgg8jBArMMAcTKzAyRvHfqq3RE\/Pwumlwkdfl+ZiFD3ELzw9R\/GKY7CAJFmfoA4PibNDxANrp05hP379mHfvbEfaef\/EufbHgOkiJwsnDz+G4o\/Na7iTPpp2HM7w\/wAcfzzQ2B+gEj9bdkfA8Q6DBAnMztAcsUAmWcKkJzD09BS7YPYSftw2\/QVDsMAkWZ2gDghJs0OkLwNeKlaBVRy84KXV8FQoUafleIX2B4DpFDeur5Qu8djfpa4AtX9jpWJoXAPeQFf\/2G\/larZAeKE54fA7AC572\/LMRgg1mGAOJk1AaK98i0G1fVC7Re\/xu86cb4DMUCkmR0gTohJswOkxLI5AgOkUK4YIPOMAZKDw9NaQu0Ti0n77LuZYXaAOOH5ITA7QJy0fAwQ6zBAnMzSAHk6eTuSE2qgWpsZOJwjznMwBog0awLEUTHJALGO8wJEiyvfDkJdr9p48evfYe\/tDAaIPAwQ6zBAnMyyAHFFzYgweHi2QvI5J+z6EDFApFkaII6MSQaIdZwTIE8jeXsyEmpUQ5sZh+GI7QwGiDwMEOswQJzM0j0gbd+bhR6Bbqj10hrY8ZDwAzFApFkWII6NScsCxMW4QioYLm4tMPu8\/ZaRAVLIGCCuNRER5gHPVslw1HaGZQHi2OeHgAEiDwOEJFl+DshlXN00FBHuNfDsJ2egEWc7EgNEmqV7QBwZk5YFiBtiJ+zC8RMncMIwMk5exJ92XL8wQAqZ9oC0xXuzeiDQrRZeWvOHQ1aklgWIY58fAgaIPAwQkmTNSah63MG+8TFQqZpi\/L474hc4DgNEmqUB4siY5CEY6zjtHJDLV7FpaATcazyLT87YfzPDsgBx\/AqeASIPA4QkWRcgBvknkRJfFW7hg7Ah25F\/agyQ0lgeII6LSQaIdZx3Eqrh3r+zD+NjVFA1HQ97b2cwQORhgFiHAeJkZgdI3iYM9PdG+0XZ9\/6wdJdWILGWB4IHfidOcQwGiDTrAsTAATFp6SGYuEk\/4tTp0zhtHGdw9g\/7rQEZIIWKBYhB\/skUxFd1Q\/igDbDndoalh2Ac+fwQWBYgJZbvzDlcuSvOtxMGiHUYIE5mdoAoCANEmtkB4oSYNDtA8nfg9ZqV4GJYIQkrJdNwgftTH4tfYHsMkEJ5mwbC37s9Ft2rDR0urUhELY9gDPzOftcCMTtAnPD8EJgdIFLL5+KFLsvse6VWBoh1GCBOxgBxHMUEiBOYHSBOwABxPrMDxEnMDhAnYYBYhwHiZAwQx2GAMEAsxQBRBgaIPAwQksQAcRwGCAPEUgwQZWCAyMMAIUkMEMdhgDBALMUAUQYGiDwMEJLEAHEcBggDxFIMEGVggMjDACFJDBDHYYAwQCzFAFEGBog8DBCSxABxHAYIA8RSDBBlYIDIwwAhSQwQx2GAMEAsxQBRBgaIPAwQkqRSqTB9+nR89NFHj8zo2rUrPDw8JOcpeTz33HMYM2aMeM\/bHgPEOgwQ52OAyMMAsQ4DxMkCAwONe0GEPQqPyhDio2LFipLzlDw8PT2RlJQk3vO298wzz6BZs2bGQFPaEB6vRo0aSc5z9hCWLTo6WnKes0doaKhNAkT4O+\/bt69ihxAgL7zwguQ8JQw3Nzfj81dqnhJGSEiI8TVGap4SRo8ePYzrGaVhgDgZD8E4jr0PwbRv3x5hYWGIiYlR3BBW8sLKVGqes4ewbDVr1pSc5+whhMOWLVvER9g6R48ehZ+fH+rVq6fYIQSI1HSlDFdXV\/j6+krOU8IQ9uIJGzhS85QwIiIiuAeE7scAcRyeA8JDMJbiIRhl4CEYeXgIhiQxQByHAcIAsRQDRBkYIPIwQEgSA8RxGCAMEEsxQJSBASIPA4QkMUAchwHCALEUA0QZGCDyMEBIEgPEcRggDBBLMUCUgQEiDwOEJDFAHIcBwgCxFANEGRgg8jBASJItAiQnOxOXb+nEW\/bHAJFmkwDJyUbm5Vuw9aPJALEOA0QZGCDyMEBIkvwAycWqXmo0n3nO5iut0lgUILqr2PvpaPTr1gldEkcgZedlaMRZ98nLxJY5b6Bv1w7o2GMAJm+4aNN\/06MQILmrekHdfCbO2fjBLBsBosPVvZ9idL9u6NQlESNSduJyqU8mgR7X9y5G0vhZ2HjBujtUOQGSg+zMy7DXdkZ5CBB7bqgxQKzDAHEyWwVI3MyzCgwQDdKnxsK3YX\/MXbMRK2f0QJhPU0xJl1hr6DLxefdQhHdJwortP+OnrSvxxdbz5TNA4mbirI0fzLIQIJr0qYj1bYj+c9dg48oZ6BHmg6ZT0ksP2r+24tUof\/iqa6DfhjxxomUUEyC5q9BL3RwzbV2morIfIIUbavZgSYDoru7Fp6P7oVunLkgckYKdpVX0ndNYM3Uoej\/XEd36j8PyY7fFGZZjgJAkywJEj8uLe6HNpINFXnSLB4j2j71Y+cVOZNqxRswOkLwdeDU0BIM33zXd1l\/Hsq5qRIzae99KI2\/XMIRHDMMP4pfag7ICROqxLBEg2j+wd+UX2GmDB9OyAJFeNmEr\/NyWeRg3\/DWMGD8f2zJzxenymBcgedjxaihCBm+G6Smix\/VlXaGOGIW9kq\/fOdg3pgmih83FqIZ+ZSRA4jDT1mUqKi8BIrxO2oPZAaJJx9RYXzTsPxdrNq7EjB5h8Gk6Bfdtk+n\/wIrewQjp9D7W7f4BX497Gv7BL+Cba9Y9RgwQkmRZgOiQmdwGdYftQr44pegflubqZgyPDkLzCXtw046vJeYGiO78bLTwTkBqdsHCaHE8qTFUHZbghjjFRIv0CY0Q9PJ6XMrYjU3rN+KH49lF\/o22oawAkXosiwSI5io2D49GUPMJ2GODB9OyAJFaNh3OL3oOtRq8gJnL12LF9B6IqN0Xq+89ttYzK0B05zG7hTcSUrMN6WGiPZ6ExqoOWFL8yWSkOTEDLaNexobswxgf\/YgFiP4yFvdqg0kHi6yVigWIFn\/sXYkvdmYaNzpswbIAcWygCiwLkAdvqNmDuQGSt+NVhIYMRuE22TJ0VUdgVImK1l9bjPaVm2Haaa1pgvYwxjVQo9uXf5puW4gBQpLMChD9Xzi24Qt8tnQJZidGwj9hDBYtXYrPVv5smGn6w4qduAKTW9VC83G7cUP+OuGBzA0QTdpY1PfujuX39mrocSmlLVStkkvsocnDlsGB8FSHIDq+N\/q\/1BVN\/NRoOv4n3BG\/whYUESAPfCzFAImdiBWTW6FW83HYbaMH06wAedCyaQ7gnXq1MWRrwSvnFaQmqNFp6XXTbRnMChBNGsbW90b3wicT9JdS0FbVCskl9xDpLmBBh0j0XHYZeu2RRy9AdJlIblMXw3YVSdN7AaLB1c3DER3UHBP23LwXY3JZFiCODVSBZQHy4A01ezAvQAz30ewW8E5IReE22XEkNVahQ4mK1mUmo5WqDT66WPDcvouvevqg4fgj4m3LMEBIklkBoruE9ZOGYNDAgegTFwif+s9hgOH\/B41capgp\/GFVQUjdOlDVeQ3bbbnGLoW5AaI9OhHRqi5Ydu\/QpfDC0Are8fORVex1KQ\/fDwxE6CvbDf9ncvvb\/gj07Y+N1q03JCkiQB74WJoCpEpIXdRR1cFrNnwwzQqQBy3brS\/Q2cMTfuFRiIoSRiSCq3ihbUqm+M3WMytAtEcxMVqFLoVPJtOLtHc85hd7MulxZWUfRCZ8LB7GenQCRP\/XMWz44jMsXTIbiZH+SBizCEuXfoaVP2eJARKLiSsmo1Wt5hi3+4bN4kNgVoA4KVAFZgWIGRtqzg0QDdLG1od39+XiYUQD\/SWktFWhVXKJvVn5P+HNulXQ9I21OHruDNK2LED\/+l6oO8q0oWIpBghJstkhmKQ1mNa6BiJf+R5WHiY0m7kBor+SigTvZph+puBPKx97RoTBf8B390LDRIP9o6NQrc\/qe3+Y2vQJiK7SAysKN3hle3QOwSRhzbTWqBH5Cr630YMp+xDM3a\/Q06cRJhzJhUajMQ2tziYrQbMCxLhC80az6WfuvVDn7xmBMP8B+K7Yk0nYUlTBo2qw8SPSQ0IC4ONaEaoaddB5vuXvFHNkgOgurcekIYMwcGAfxAX6oP5zAwz\/Pwgjlx4zBUiVENSto0Kd17bbdM+gwKwAcVKgCswKkIduqDk7QLQ4OjEaqi7LULhNlonkVt6In59139\/SrSNLMKJrazRt3AxP9x6GxKZVEJOUIc61DAOEJNnyHJD8zM\/RPTgI3T67YHiq24\/ZJ6FqTyAppjKaJR01LKVhHXJjEwaHBSBx9U3DP+UydqTOwdrTpn\/JrbV94R\/SD+uuC3+GuTg6NdawIv4A99rFBh6pc0DyhXcFBSOo22e4YIMHU3aA6M5iVgvD8+z948bH0kiTi1wbLJt5J6FqcSIpBpWbJeGo6cmETYPDEJC4GoZnk+HptAOpc9ZCeDpp7tzA1exsZAsjaydG1auB5\/9+Gbes2AmitEMwSWumoXWNSLzy\/TXH7wG5x7GBKigbh2D0uJKaAO9m0wtf1\/L3YESYPwYUr+j7aU9iatNA9Ftv3RYZA4QkWRYghqfwrSxculHkhcnwh7Um0Retky8Y\/uz0uL75NTzu3w7zz9twzV2C2QFiWJ6bO8chzleN0EYxiArwQ\/SQ1TAe1szbjMFBVdF5qXhSYf4JzHsuBOqgBmj6RChq1OqE5EO23c5TVoBIPZaGR3NNInxbJ0O4bIX++ma89rg\/2s0\/L861nmUBIr1stw\/MRPtQX4TFtkP7+FhE1o7H7Az5BWJegBiW6eZOjIvzhTq0EWKiAuAXPQSrxWPkeZsHI6hqZywtec6B9hgmxwRj4PfKPwRzzwPPAclH5ufdERzUDZ\/ZokxFsgPEjoEqKBsBImyTJSGmcjMkmSoaNzYNRlhAIoRtsuIbZXpotQWPRy7OLOmJ0MjhVr9LkAFCkiwNECUwP0BM9HezkJF2CMcvPewKn3m4ejoNB46cx42Sb0uzAaUFiCNZGiClyr+B8+kHcPDoOVyzbp1+H3MDxEh\/F1kZaTh0\/JLdLspVlFMCxLDyuZV1CcW3M9Yg0bc1kk1lis2vPQ7\/dvNhq+0MywLEsAgODFSBZQEitXyFG2r2YG6AGCoaO8fFwVcdikYxUQjwi8aQ1eIFF4tulGmPIikuGBGNn0RTQ2zXiOyJlEO8DgjZWHkIEKVggNggQOzAogBxMOcEiONZGiClskOgCiwNEEczO0CM9LiblYG0Q8dx6QEVrc+5glOH9uNgxmXckRmaDBCSxABxHAYIA8RSDBBlKFsB4ngMEJLEAHEcBggDxFIMEGVggMjDACFJDBDHYYAwQCzFAFEGBog8DBCSxABxHAYIA8RSDBBlYIDIwwAhSQwQx2GAMEAsxQBRBgaIPAwQksQAcRwGCAPEUgwQZWCAyMMAIUkBAQHw9fWFn5\/fIzOElVnFihUl5yl5CMs9efJk8Z63PQaIdRggzscAkYcBYh0GiJOpVCq88847mDRp0iMznnnmGbi7u0vOU\/KIj4\/HmDFjxHve9oSVlYuLi2KHsJKRmq6EodRlE57nO3bsEB9h6xw7dgxVqlSBq6urYodw\/0tNV8oQHosKFSpIzlPCUPryVapUCaGhoeIzUjkYIE7GQzCOY+9DMN27d8e8efNw+vRpxQ1PT09MmTJFcp6zh5eXlzEQpeY5ewjRaos9II8\/\/ji2bdum2CEEyNatWyXnKWEIe8kGDBggOU8Jo0WLFqhTp47kPCWMVatWGfciKQ0DxMkYII7Dc0B4CMZSPASjDDwEIw8PwZAkBojjMEAYIJZigCgDA0QeBghJYoA4DgOEAWIpBogyMEDkYYCQJAaI4zBAGCCWYoAoAwNEHgYISWKAOA4DhAFiKQaIMjBA5GGAkCSrAyQnG5mXb0HmpzRbhQEijQFiHQaI8zFA5GGAWIcB4mTWBkjuql5QN5+Jc04oEIsCRHcVez8djX7dOqFL4gik7LwMjThLkv469i5OwvhZG3HBxv82BggDxFIMEGWwPkBykJ15Gbfs\/DrJALEOA8TJZAVI3EycVXSAaJA+NRa+Dftj7pqNWDmjB8J8mmJKeukJ8tfWVxHl7wt1jX7YkCdOtBEGyKMeIDpc3fspRvfrhk5dEjEiZScul\/pUykPmljl4o29XdOjYAwMmb8BFK\/5WGCDKYHWA5K5CL3VzzLTzlpolAaK7uhefju6Hbp26IHFECnaW\/iQ2uItfv52DKX9PR644xRoMEJJkkwDR\/oG9K7\/AzkzH1IjZAZK3A6+GhmDw5rum2\/rrWNZVjYhRe6X3guTsw5gm0Rg2dxQa+jFAbKksBIgmfSpifRui\/9w12LhyBnqE+aDplHSJ55IOmZ93R2h4FySt2I6ff9qKlV9sxXkGSKnKdoDEYaadt9TMDhBNOqbG+qJh\/7lYs3ElZvQIg0\/TKZDaJtNf34e5iQ3gp\/KAe\/tFuC7j4WGAkCTZAaK5is3DoxHUfAL23HTMC4i5AaI7PxstvBOQml2wXFocT2oMVYcluCFOKaTBiRktEfXyBmQfHo9oBohNyQmQnHNbMG\/ccLw2Yjzmb8uUtSUmxbwAycOOV0MRMnizYZtQoMf1ZV2hjhiFvSVfvPN2YVh4BIb9IIavDAwQZSgrAZK341WEhgxG4TbZMnRVR2DUfU9iLU6m9MMLM7dj99Qn4c0AIXuQFSCxE7FicivUaj4Ou2847sXD3ADRpI1Ffe\/uWH5vPaDHpZS2ULVKRsmdNboLC9AhsieWXdZDe4QBYmvWBoju\/CI8V6uB4YVwOdaumI4eEbXRd3W2ONc2zAoQ3XnMbuGNhNRsw7PIRHs8CY1VHbCkRM1q0yegUdDLWH8pA7s3rcfGH44jO1+caSEGiDKUjQDR4fzsFvBOSEXhNtlxJDVWoUPJJ\/E9Ovw6I5YBQvZhVoBoMzArviaCAgMRGBSOQevuGAOkSkhd1FHVwWvb74hf6BjmBoj26EREq7pg2W1xgrBrPLkVvOPnI6voH5P+Clb2iUTCx2cNX2H4PgaIzVkXIBoceKceag\/Zem+vw5XUBKg7LTXeshWzAkSThrH1vdG9sGahv5SCtqpWSC5Rs3lbBiPQU42Q6Hj07v8Sujbxg7rpePxkxZ8JA0QZykaAaJA2tj68uy8X\/54M9JeQ0laFVsmZxte++zFAyI7M3QOi12mh1Wig0eqMW4CmQzBJWDOtNWpEvoLvrznuxcPcANFfSUWCdzNMP1Pwp5WPPSPC4D\/gOxRri7tfoafKA1WDQxASYhgBPnCtqEKNOp0x34YnjzFAHhIg94VuFr7o7AFPv3BERUUZR2RwFXi1TRG\/wTbMChDtUUyMVqFLYc1Cl5mMVt7xmF+sZg0B8v1ABIa+gu0FT7Lb36J\/oC\/6b7S8aBkgymBWgEhsqCkrQLQ4OjEaqi7LULhNlonkVt6In591b89ecQwQsiPZ54DkZ+Lz7sEI6vYZLmjFmXZm9kmo2hNIiqmMZklHjecN6G9swuCwACSuvmn4u7qMHalzsPa0sG9cgzs3riI7O9s4snaOQr0az+Pvl28VDxWZGCAP3wNSPHTv4quePmg04QhyhWnGoYXOxuspswJEfwWpCd5oNv3MvS3F\/D0jEOY\/AN+VeJJo9o9GVLU+WF2wmalNx4ToKuixonDvibkYIMpg7h6QkhtqygoQ0x5E72bTUbhNtgcjwvwxoOST+B4GCNmR1QGyJhG+rZON18rQX9+M1x73R7v558W59mV2gBj+4G7uHIc4XzVCG8UgKsAP0UNWm94OmbcZg4OqovPSwmP6BbTHJiMmeCC+t2V9GDBALD0Eo8PZWS0Mofs+jt8781SD3Fzblq55J6FqcSIpBpWbJeGoqWaxaXAYAhJXw5Czhp7dgdQ5a2Hs2Vtr0dc\/BP3WXTc+t3KPTkWsYSX0wb1XffMxQJShrJyEqj2RhJjKzZBkehLjxqbBCAtIhLBNVnyjrAADhOzI2gBxJvMDxER\/NwsZaYdw\/JJzrtxagAFi+UmouH0AM9uHwjcsFu3axyM2sjbiZ2eIM23DvAAxPI9u7sS4OF+oQxshJioAftFDsFq8uEfe5sEIqtoZS41n9+XjxLznEKIOQoOmTyC0Ri10Sj4Ea86UYoAog\/UBsgaJvq2RbOurGpZgboAYnsTYOS4OvupQNIqJQoBfNIasvmh6XSy2UabDb3MToFZ5wdOtIlwqucNLpUab2b8af4ylGCAkqTwEiFIwQKwIEKN83DifjgMHj+LcNRvvljIwN0CM9HeRlZGGQ8cvPfTqlnlXTyPtwBGcvyF51RmzMECUweoAcRCzA8RIj7tZGUg7dByX7H2JVhEDhCQxQByHAWJtgNiXRQHiYAwQZShbAeJ4DBCSxABxHAYIA8RSDBBlYIDIwwAhSQwQx2GAMEAsxQBRBgaIPAwQksQAcRwGCAPEUgwQZWCAyMMAIUkMEMdhgDBALMUAUQYGiDwMEJLEAHEcBggDxFIMEGVggMjDACFJVapUwS+\/\/IILFy48MmP8+PHGlYbUPCWPd955B++99554z9seA8Q6DBDnY4DIwwCxDgPEyYYNG4awsDCEh4c\/MkP4vJaIiAjJeUoeNWvWxJEjR8R73vYYINYpDwFSq1YtTJkyRbFDCJDJkydLzlPC8PT0RHx8vOQ8JYzHH3\/cuIKXmqeEIWx8Va1aVXxGKgcDhMhGGCDWKesBIuzhFLbgfX19FTuEAJGarpRRqVIlqFQqyXlKGO7u7nBzc5Ocp4QhPP+EDTClYYAQ2QgDxDo8BON8PAQjDw\/BWIcBQmQjXbt2Ne7G3rlzp+KGsIU2atQoyXnOHh4eHhg5cqTkPGePVq1aMUAUgAEiDwOEqIwTAqRixYpwdXVV3HBxcUGFChUk5zl7CMul1GXz8vLCjh07xEfYOgwQ+Rgg8jBAiMo4HoKxDg\/BOB8DRB4GiHUYIEQ2wgCxDgPE+Rgg8jBArMMAIbIRBoh1GCDOxwCRhwFiHQYIkY0wQKzDAHE+Bog8DBDrMECIbIQBYh0GiPOVhwDJyc7E5Vs68ZZtMUCswwAhshEGiHUYIM5X9gMkF6t6qdF85jnxtm1ZEiC6q3vx6eh+6NapCxJHpGDnZY045355mVsw542+6NqhI3oMmIwNF60LKAYIURnHALEOA8T5ykuAxM08K962LbMDRJOOqbG+aNh\/LtZsXIkZPcLg03QK0iUaRJf5ObqHhqNL0gps\/\/knbF35BbaeZ4AQkQTrAyQH2ZmXYae9w0YMEOswQB4u59wWzBs3HK+NGI\/52zINq3rbsyxA9Li8uBfaTDqIwvW6MgIkb8erCA0ZjM13Tbf115ehqzoCo\/aWLJA87BoWjohhP0D8UlkYIERlnNUBkrsKvdTNMfOc\/QqkbASIDlf3forR\/bqhU5dEjEjZidL2Xuec3YAZr\/VB5w7PoffQafj2rHWrRQbIg+nOL8JztRrghZnLsXbFdPSIqI2+q7PFubZjWYDokJncBnWH7UK+OEUZAaLD+dkt4J2QiuyCu1p7HEmNVeiw5IY4QaRNx4RGQXh5\/SVk7N6E9Rt\/wPHswn+NpRggRGWcvACJw8yzDJAH0aRPRaxvQ\/SfuwYbV85AjzAfNJ2SXmQrV3R3G14NC0TCxG+we+8OfP5qE6jrvYsDpcTKgzBAHkSDA+\/UQ+0hW8WtdD2upCZA3Wmp8ZYtmRUg+r9wbMMX+GzpEsxOjIR\/whgsWroUn6382TBTCQGiQdrY+vDuvrxwr4b+ElLaqtAqOdOQJ0XkbcHgQE+oQ6IR37s\/XuraBH7qphj\/0x3xCyzDACEq42wTIFr8sXclvthZ4gVJJssCRGoXtiAH57bMw7jhr2HE+PnYlmmbne3mBUgedrwaipDBm++t7K4v6wp1xCiU3HutPTkVTb074bM\/i9xW98RXVrx2M0CK0GZgVnxNBAUGIjAoHIPWZeGLzh7w9AtHVFSUcUQGV4FX2xTxG2zHrADRXcL6SUMwaOBA9IkLhE\/95zDA8P+DRgpBpIQA0eLoxGiouizDbXEKdJlIbuWN+PlZhmd0EXnfY2BgKF7ZnidOuI1v+wfCt\/9Gw1+C5RggRGWc\/ADR4Orm4YgOao4Je24Wf0GSybIAkdqFrcP5Rc+hVoMXMHP5WqyY3gMRtfti9b19ydYzK0B05zG7hTcSUrPv3S\/a40lorOqAknuvkbcP70VXQ6NXvsav10\/hixcMK8ZBG3DNikVlgBSn12mh1Wig0eoMj8NdfNXTB40mHEGuMM04tNDZ8okrKhuHYEx7iLybTceZgq2L\/D0YEeaPAd+VyArNfoyOqoY+qwv2lWiRPiEaVXqssOqcEAYIURknL0BiMXHFZLSq1Rzjdt+waXwIzAqQB+3C1hzAO\/VqY8hW8eVPfwWpCWp0WnrddFsGswJEk4ax9b3RfXnhy6\/+UgraqlohOfP+fUXaS9\/g5Qh34wfK+cQl4aA1r9oGDJAH0eHsrBZQx72P4\/d2hmmQm6sV\/992ykaAGJ6XJ5IQU7kZko4Kd5geNzYNRlhAIlbfNNzUXcaO1DlYe1pY6ltY29cfIf3W4brwsOQexdRYw\/J\/cMbwr7McA4SojDMrQO7bjX3HFCBVQlC3jgp1XtsO647yPphZAfKgXdi3vkBnD0\/4hZt2tUdFRSK4ihfapmSK32w9swJEexQTo1XosuzezmvoMpPRyjse87NKrDhzj2Felyg07puC77d9hhEtAhH0zEc4ZsW+awbIQ9w+gJntQ+EbFot27eMRG1kb8bMzxJm2Y1mAGFbtt7Jw6UbRkzZzsSbRF62TL4i3bcvcAIH+JnaOi4OvOhSNYqIQ4BeNIasvmqIibzMGB1VF56WmvXz5J+bhuRA1gho0xROhNVCrUzIOWfniwAAhKuPM3QNSfDe2gXgIJmnNNLSuEYlXvr\/mnD0g90hsQd79Cj19GmHCkVxxV3uR5ZfJrAAx7nHxRrPphVuA+XtGIMx\/AIrvvdbj2uedoW6ShBMFG+K3vsPLwb54aYPlBcIAMUc+bpxPx4GDR3HumjVnKDycpQHiaGYHiJEed7MykHboOC497L33eVdxOu0Ajpy\/cf\/J1hZggBCVceYGyH3unQOSj8zPuyM4qBs+u2Db3diyA0R3FrNaqBH3\/nHDtqRIkwtb7G037yRULU4kxaBysySY9l7fwKbBYQhIXA3T3usdSJ2zFqfz9biyoB2867+DfTnGbzR86Rq8EFQTr2wvukVsHgaIMpStAHE8BghRGWd9gKxBom9rJF8wbA3pr2Pza4\/Dv918WHnRQ0mWBYhhMe7bhS3sbZ+J9qG+CItth\/bxsYisHY\/ZGfILxLwAMSzTzZ0YF+cLdWgjxEQFwC96CFaLl6bO2zwYQVU7Y2m23vB1uzGpTSCq1TEdFmhSMwANByzHeSsWlQGiDAwQeRggRGWc1QHiAJYGSKnyb+B8+gEcPHoOttrbbm6AGOnvIisjDYeOX3rIlWPzcf3sEezfn4bTV3KsPlTEAFEGBog8DBCiMq5cBIgdWBQgDsYAUQYGiDwMEKIyjgFiHQaI8zFA5GGAWIcBQmQjDBDrMECcjwEiDwPEOgwQIhthgFiHAeJ8DBB5GCDWYYAQ2QgDxDplPUB++eUXVKtWDVWrVlXsEAJEarpSRsWKFeHp6Sk5TwlDuOKuMKTmKWH4+PigZs2a4jNSORggRDbCALFOedgDUqdOHXz44YeKHUKAzJo1S3KeEoaXlxfat28vOU8Jo0GDBggMDJScp4QxceJEY4goDQOEyEYYINbhIRjn4yEYeXgIxjoMECIbYYBYhwHifAwQeRgg1mGAENkIA8Q6DBDnY4DIwwCxDgOEyEYYINZhgDgfA0QeBoh1GCBENvLss8+ibdu26N+\/v+JGpUqVEBcXJznP2UNYtieffFJynrNHeHg4A0QBGCDyMECIyrhOnTohKCgIUVFRihvC2xiFFyCpec4eQoAoddmE5dq6dav4CFuHASIfA0QeBghRGcdDMNbhIRjnK7sBkoPszMsP+eBC+Rgg1mGAENkIA8Q6DBDnK7MBkrsKvdTNMfOcfQvEkgDRXd2LT0f3Q7dOXZA4IgU7L2vEOdL01\/dicdJ4zNp4Adb+KxggRGUcA8Q6DBDnK9sBEoeZZxUSIJp0TI31RcP+c7Fm40rM6BEGn6ZTkF5qg\/yFra9Gwd9XjRr9NiBPnGopBghRGccAsQ4DxPkYIPKYGyB5O15FaMhgbL5ruq2\/vgxd1REYtVe6QHL2jUGT6GGYO6oh\/BggRFQaBoh1GCDOxwCRx7wA0eH87BbwTkhFdsFdrT2OpMYqdFhyQ5xQhOYEZrSMwssbsnF4fDQDhIhKxwCxDgPE+Rgg8pgXIBqkja0P7+7LIe4AAfSXkNJWhVbJmSXO79DhwoIOiOy5DJf1WhxhgBDRgzBArMMAcb4yESDaDMyKr4mgwEAEBoVj0Lo7CgsQLY5OjIaqyzLcFqdAl4nkVt6In5+Fove+\/spK9IlMwMfG5WaAENFDMECswwBxvrKyB0Sv00Kr0UCj1ZlW6IoKED2upCbAu9l0nClYnPw9GBHmjwHfFU+Lu1\/1hMqjKoJDQhBiGAE+rqioqoE6nefDmjf0MECIyjgGiHXMDxAdru79FKP7dUOnLokYkbIT0u9gzMHZTXMw6qXu6PRcLwyd\/h3OW7npyABRhrJyEqr2RBJiKjdD0tFcwy09bmwajLCARKy+abipu4wdqXOw9nQ+oLmDG1ezkZ0tjCzsHFUPNZ7\/Oy7fsu6JzAAhKuMYINYxN0A06VMR69sQ\/eeuwcaVM9AjzAdNp6SjZIPor36O\/k8Pwoxl67H+s7fRproHGow9eN\/XmYMBogzWB8gaJPq2RvIFZQQI9Dexc1wcfNWhaBQThQC\/aAxZfdF0\/kfeZgwOqorOS7OLHY4RDsEcmxyD4IHf8xAMEUkrqwGSc24L5o0bjtdGjMf8bZkQtt1sybwAycOOV0MRMnizeAKfHteXdYU6YhRKeQejKA\/bXwmGR\/wn+MOK9SsDRBmsDhAHMTtAjPS4m5WBtEPHccnel2gVMUCIyriyGCC684vwXK0GeGHmcqxdMR09Imqj7+psca5tmBUguvOY3cIbCamFW4fa40lorOoAqXcwFvoTK3qqUePF9cgRp1iCAaIMZStAHI8BQlTGlb0A0eDAO\/VQe8jWe3sdhJPo1J2WGm\/ZilkBoknD2Pre6L783hsYob+UgraqVkjOLH0rMv\/EdMT5RGHUnsLvswQDRBkYIPIwQIjKuEc+QO57G2MWvujsAU+\/8HufDhsZXAVebVPEb7ANswJEexQTo1XosuzeGxihy0xGK+94zM+SXnHqb+7C6Ca+aDr2J9wSp1mKAaIMDBB5GCBEZVxZ2ANS\/G2Md\/FVTx80mnAEucI049BCZ+P1lFkBor+C1ARvNJt+5t4Fm\/L3jECY\/wCUeAejyd0jmB0fjKiBa\/C7jMPsDBBlYIDIwwAhKuPKQoAUp8PZWS2gjnsfx++deapBbq5W\/H\/bMO8kVC1OJMWgcrMkmN7BeAObBochIHE1TO9g3IHUOWshvIMR+WewuHtthD2\/DOeseetLEQwQZWCAyMMAISrjyl6AGNw+gJntQ+EbFot27eMRG1kb8bMzxJm2YV6ACIdUdmJcnC\/UoY0QExUAv+ghWH3RtHsjb\/NgBFXtjKXZemj2vY2IShXh6ukFLy\/TUKnb4ePfLN8VwgBRBgaIPAwQojKuTAaIUT5unE\/HgYNHce6atVciKJ25AWKkv4usjDQcOn4JjngHIwNEGRgg8jBAiMq4shsg9mVRgDiYrQIkMjISa9asUewQAuSbb76RnKeEoVKpkJiYKDlPCePJJ59EaGio5DwlDOFvX4g4pWGAENkIA8Q6ZT1Ajh07Bh8fH3h4eCh2uLi4SE5XyqhYsSIqVaokOU8Jo0KFCsYhNU8Jw93d3RhISsMAIbIRBoh1ysMeEB6CkYeHYOThIRiiMo4BYh0GiPMxQORhgFiHAUJkIwwQ6zBAnI8BIg8DxDoMECIbYYBYhwHifAwQeRgg1mGAENkIA8Q6DBDnY4DIwwCxDgOEyEYYINZhgDgfA0QeBoh1GCBENsIAsQ4DxPkYIPIwQKzDACGyka5duyIpKQk\/\/PCD4oZwLYC33npLcp6zh6enJ9544w3Jec4erVq1cmqA5GRn4rIDLvlaHgLEnvclA8Q6DBAiGxFWWG3btkW7du0UN5566im0bt1acp6zh7Bswopeap6zxwsvvIA\/\/\/xTfIStY32A5GJVLzWazzx37xOA7aXsB0jhfWkPlgSI7upefDq6H7p16oLEESnYefnBn5iov74Xi5PGY9bGC1Y\/DxggRETlkNwAiZt5lgFiowAR7kt7MDtANOmYGuuLhv3nYs3GlZjRIww+TacgvdQG+QtbX42Cv68aNfptgLWfxMQAISIqh2wVINo\/9mLlFzuRaYcasSxA9Li8uBfaTDqI4uvNHJzbMg\/jhr+GEePnY1tmrjhdPssCRGr5lBEgeTteRWjIYGy+a7qtv74MXdURGLVXukBy9o1Bk+hhmDuqIfwYIEREZAlbBIjm6mYMjw5C8wl7cNMOOyosCxAdMpPboO6wXcgXpwjTzi96DrUavICZy9dixfQeiKjdF6uzbbOwlgWI1PIpIUAM99HsFvBOSMW9u0V7HEmNVeiw5IY4oQjNCcxoGYWXN2Tj8PhoBggREVlGboDETlyBya1qofm43bhhh\/gQmBUg+r9wbMMX+GzpEsxOjIR\/whgsWroUn6382bCyPIB36tXGkK0Fm\/ZXkJqgRqel1023ZTIrQB60fIoIEA3SxtaHd\/flEO8lwzJfQkpbFVolZxr3chXS4cKCDojsuQyX9VocYYAQEZGlzA0QbcYsxNcMQmBgIILCB2HdHWGlWQUhdetAVec1bL8jfqEdmBUguktYP2kIBg0ciD5xgfCp\/xwGGP5\/0MilwK0v0NnDE37hUYiKEkYkgqt4oW1KpvjN8pgVIA9aPkUEiBZHJ0ZD1WUZbotToMtEcitvxM\/PQtF7X39lJfpEJuDjs8aDbwwQIiKynPl7QPTQabXQaDTQ6oTVkbjSTFqDaa1rIPKV73HNmXtA7pE4xHH3K\/T0aYQJR3KNy28cWl2xlaocZeMQjB5XUhPg3Ww6zhTs7sjfgxFh\/hjwXfG0uPtVT6g8qiI4JAQhhhHg44qKqhqo03k+zllxDhADhIioHLLFOSD5mZ+je3AQun12wbA9bHuyA0R3FrNaGJb1\/eOGpRZpcpFro4UtGwECaE8kIaZyMyQdFe4lPW5sGoywgESsvmm4qbuMHalzsPa0Yak1d3Djajays4WRhZ2j6qHG83\/H5VvW7QNhgBARlUNyAmRNoi9aJwvXf9Dj+ubX8Lh\/O8w\/b\/u3wVgWIIZV560sXLpRuHoX3D4wE+1DfREW2w7t42MRWTseszNsUyCWBYjU8hXel\/ZgboBAfxM7x8XBVx2KRjFRCPCLxpDVFw2Pr0HeZgwOqorOS7NL7DnS4tjkGAQP\/J6HYIiIyHzWB4jjWBogpcq\/gfPpB3Dw6Dlcs3ZtKcHSAHE0swPESI+7WRlIO3QclxxwlVsBA4SIqBwqVwFiJ2UrQByPAUJEVA4xQORjgMjDACEiKocYIPIxQORhgBARlUMMEPkYIPIwQIiIyiEGiHwMEHkYIERE5RADRD4GiDwMECKicogBIh8DRB4GCBFROfTLL7+gRo0aqFmzpmKHECBS05UyKlWqhCpVqkjOU8Lw9PSEu7u75DwljKCgIAQHB4vPSOVggBAR2ZGwB0T4PI8333xTsUMIkDfeeENynhKGh4cHWrRoITlPCSMsLMwYmVLzlDCGDh0KtVotPiOVgwFCRGRHPAQjHw\/ByMNDMERE5RADRD4GiDwMECKicogBIh8DRB4GCBFROcQAkY8BIg8DhIioHGKAyMcAkYcBQkRUDjFA5GOAyMMAISIqhxgg8lkfIDnIzryMWzrxpp0wQKzDACEisiMGiHxWB0juKvRSN8fMc\/YtEEsCRHd1Lz4d3Q\/dOnVB4ogU7LysEefcLy9zC+a80RddO3REjwGTseGidf8OBggRUTnEAJFPXoDEYeZZhQSIJh1TY33RsP9crNm4EjN6hMGn6RSkSzSILvNzdA8NR5ekFdj+80\/YuvILbD3PACEiIjMxQOQrKwGSt+NVhIYMxua7ptv668vQVR2BUXtLFkgedg0LR8SwHyB+qSwMECKicogBIl\/ZCBAdzs9uAe+EVGQX3NXa40hqrEKHJTfECSJtOiY0CsLL6y8hY\/cmrN\/4A45n54szLccAISIqhxgg8pWNANEgbWx9eHdfXrhXQ38JKW1VaJWcaciTIvK2YHCgJ9Qh0Yjv3R8vdW0CP3VTjP\/pjvgFlmGAEBGVQwwQ+cwKEG0GZsXXRFBgIAKDwjFonWFlragA0eLoxGiouizDbXEKdJlIbuWN+PlZKHbv532PgYGheGV7njjhNr7tHwjf\/htRMMUSDBAionKIASKfuXtA9DottBoNNFqdaYWuqADR40pqArybTceZgsXJ34MRYf4Y8F2JrNDsx+ioauizumBfiRbpE6JRpccKq84JYYAQEZVDDBD5yspJqNoTSYip3AxJR3MNt\/S4sWkwwgISsfqm4abuMnakzsHa08K5Hrewtq8\/Qvqtw3XhYck9iqmxasR9cKb4oRozMUCIiMohBoh81gfIGiT6tkbyBWUECPQ3sXNcHHzVoWgUE4UAv2gMWX3RFBV5mzE4qCo6L8027r3JPzEPz4WoEdSgKZ4IrYFanZJxyLpTQBggRETlEQNEPqsDxEHMDhAjPe5mZSDt0HFcetglWvOu4nTaARw5fwOlX67s4RggRETlEANEvrIVII7HACEiKocYIPIxQORhgBARlUMMEPkYIPIwQIiIyiEGiHwMEHkYIERE5RADRD4GiDwMECKicogBIh8DRB4GCBFROcQAkY8BIg8DhIioHBICpEGDBsb\/KnUIAXLkyBHJeUoYlStXxrBhwyTnKWE8\/fTTqFu3ruQ8JYwdO3bA19dXfEYqBwOEiMiOjh07Bm9vb1SoUEGxw8XFRXK6UoawfEpeRiHglH4f1qxZU3xGKgcDhIjIjoQtUB6CkYeHYOThIRgionKIASIfA0QeBggRUTnEAJGPASIPA4SIqBxigMjHAJGHAUJEVA4xQORjgMjDACEiKocYIPIxQORhgBARlUMMEPkYIPIwQIiIyiEGiHy2CJCc7ExcvqUTb9kWA8Q6DBAiIjtigMgnP0BysaqXGs1nnhNv25YlAaK7uhefju6Hbp26IHFECnZe1ohzpNzFr9\/OwZS\/pxv+BdZjgBARlUMMEPlsFSBxM8+Kt23L7ADRpGNqrC8a9p+LNRtXYkaPMPg0nYJ0iQbRX9+HuYkN4KfygHv7Rbgu4+FhgBARlUNlPUByzm3BvHHD8dqI8Zi\/LVPWlnppLAsQPS4v7oU2kw6icL2ujADJ2\/EqQkMGY\/Nd02399WXoqo7AqL0lC0SLkyn98MLM7dg99Ul4M0CIiMhSZTlAdOcX4blaDQwryuVYu2I6ekTURt\/V2eJc27EsQHTITG6DusN2IV+coowA0eH87BbwTkhFdsFdrT2OpMYqdFhyQ5xQkg6\/zohlgBARkeXKboBocOCdeqg9ZCtMG\/R6XElNgLrTUuMtWzIrQPR\/4diGL\/DZ0iWYnRgJ\/4QxWLR0KT5b+bNhphICRIO0sfXh3X25eH8Z6C8hpa0KrZIzDakhhQFCRERWKjMBos3ArPiaCAoMRGBQOAaty8IXnT3g6ReOqKgo44gMrgKvtiniN9iOWQGiu4T1k4Zg0MCB6BMXCJ\/6z2GA4f8HjRSCSAkBosXRidFQdVmG2+IU6DKR3Mob8fOzDPkmhQFCRERWKkt7QPQ6LbQaDTRanWGFeRdf9fRBowlHkCtMMw4tdDJWlKUpG4dgTHuIvJtNx5mC3R35ezAizB8DvssTJ5TEACEiIiuV3UMwOpyd1QLquPdx\/N6Zpxrk5mrF\/7edshEggPZEEmIqN0PSUeEO0+PGpsEIC0jE6puGm7rL2JE6B2tPFy41A4SIiKxWlk9Cxe0DmNk+FL5hsWjXPh6xkbURPztDnGk7lgWIYdV+KwuXbhRdkediTaIvWidfEG\/blrkBAv1N7BwXB191KBrFRCHALxpDVl80ZIZB3mYMDqqKzkuzDWmiw29zE6BWecHTrSJcKrnDS6VGm9m\/Gn+MpRggRETlUJkOEKN83DifjgMHj+LctdIOJchjaYA4mtkBYqTH3awMpB06jkt2ujJrSQwQIqJyqOwHiP2VrQBxPAYIEVE5xACRjwEiDwOEiKgcYoDIxwCRhwFCRFQOMUDkY4DIwwAhIiqHGCDyMUDkYYAQEZVDDBD5GCDyMECIiMohBoh8DBB5GCBEROXQ0aNH4evri4YNGyp2CAEiNV0po1KlSvDz85Ocp4RRuXJleHp6Ss5TwhA+p0e4\/5SGAUJEZEfCHpDAwED06dNHsUMIkOeff15ynhKGm5ubcUUqNU8JIzg4GGq1WnKeEkbXrl3h4+MjPiOVgwFCRGRHPAQjHw\/ByMNDMERE5RADRD4GiDwMECKicogBIh8DRB4GCBFROcQAkY8BIg8DhIioHGKAyMcAkYcBQkRUDjFA5GOAyMMAISIqhxgg8lkfIDnIzryMWzrxpp0wQKzDACEisiMGiHxWB0juKvRSN8fMc\/YtEEsCRHd1Lz4d3Q\/dOnVB4ogU7LysEeeUcOc01kwdit7PdUS3\/uOw\/NhtcYblGCBEROUQA0Q+eQESh5lnFRIgmnRMjfVFw\/5zsWbjSszoEQafplOQXrJB9H9gRe9ghHR6H+t2\/4Cvxz0N\/+AX8M016x4jBggRUTnEAJGvrARI3o5XERoyGJvvmm7rry9DV3UERu0tXiD6a4vRvnIzTDutNU3QHsa4Bmp0+\/JP020LMUCIiMohBoh8ZSNAdDg\/uwW8E1KRXXBXa48jqbEKHZbcECeY6DKT0UrVBh9dLFjuu\/iqpw8ajj8i3rYMA4SIqBxigMhXNgJEg7Sx9eHdfbkhJ0T6S0hpq0Kr5ExDnhSR\/xPerFsFTd9Yi6PnziBtywL0r++FuqN+Fr\/AMgwQIqJyiAEin1kBos3ArPiaCAoMRGBQOAatu6OwANHi6MRoqLosw73TSXWZSG7ljfj5WSh57986sgQjurZG08bN8HTvYUhsWgUxSRniXMswQIiIyiEGiHzm7gHR67TQajTQaHWmFbqiAkSPK6kJ8G42HWcKFid\/D0aE+WPAd3nihFJoT2Jq00D0W39v34lFGCBEROUQA0S+snISqvZEEmIqN0PS0VzDLT1ubBqMsIBErL5puKm7jB2pc7D2dL5xnlZb8Hjk4sySngiNHI4frOsPBggRUXnEAJHP+gBZg0Tf1ki+oIwAgf4mdo6Lg686FI1iohDgF40hqy+azv\/I24zBQVXReWk29NqjSIoLRkTjJ9E0KgA1Insi5RCvA0JERBZggMhndYA4iNkBYqTH3awMpB06jksPuESrPucKTh3aj4MZl3FHZj8xQIiIyiEGiHxlK0AcjwFCRFQOMUDkY4DIwwAhIiqHGCDyMUDkYYAQEZVDDBD5GCDyMECIiMohBoh8DBB5GCBEROUQA0Q+Bog8DBAionKIASIfA0QeBggRUTkkBEhMTAw0wiXCFTqEAMnLy5Ocp4RRtWpVTJ06VXKeEkb37t3RqFEjyXlKGJcvX4afn5\/4jFQOBggRkR0JW59NmjSBq6urYoewgpearpQh7AGpWLGi5DwljAoVKsDLy0tynhJGpUqVkJiYKD4jlYMBQkRERA7HACEiIiKHY4AQERGRwzFAiIiIyOEYIERERORwDBAiIiJyOAYIERERORwDhIiIiByOAUJEREQOxwAhIiIih2OAEBERkcMxQIiIiMjhGCBERETkcAwQIiIicjgGCBERETkcA4SIiIgcjgFCREREDscAISIiIodjgBAREZHDMUCIiIjIwYD\/B+9\/6X5ufDpLAAAAAElFTkSuQmCC)","ee1e8ad3":"Eine topologische Sortierung ergibt hier die Variablenreihenfolge K,E,L. Mit Prior Sampling sind die folgenden Samples gezogen worden:\n\n$\\;$ | $\\;$ | $\\;$\n--- | --- | ---\n+k | +e | +l\n-k | +e | -l\n+k | -e | +l\n-k | +e | +l\n+k | -e | +l\n-k | +e | -l\n+k | +e | +l\n-k | -e | -l\n+k | -e | +l\n+k | -e | -l\n\n## Teilaufgabe a, Sampling\n\n(a) Beantworten Sie, soweit m\u00f6glich, die folgenden Fragen auf Basis dieser Samples:\n\nP(L) = ?\n\nP(L) | \n--- | ---\nL |  \n+l | 0.6\n-l | 0.4\n\nP(K|L) = ? \n\nP(K$\\mid$L) | |\n--- | ---\nL | K | \n+l | +k | 5\/6\n   | -k | 1\/6\n-l | +k | 1\/4\n   | -k | 3\/4\n\nP(K|+e) = ?\n\nP(K$\\mid$+e) | \n--- | ---\nK | \n+k | 2\/5\n-k | 3\/5\n\n\nP(L|-e) = ?\n\nP(L$\\mid$-e) | \n--- | ---\nL | \n+l | 3\/5\n-l | 2\/5\n\n\nP(-k|-e,+l) = 0","5f4c6fe8":"Wenn sie die Ergebnisse vergleichen, sehen Sie, dass Variable Elimination und das Rechnen auf der FJD zu den gleichen Ergebnissen kommt (abgesehen von kleinen Abweichungen durch das Rechnen mit Floats). Die Ergebnisse des Samplings sind auch nicht v\u00f6llig ab vom Schuss (und nat\u00fcrlich w\u00fcrde man in der Realit\u00e4t noch deutlich mehr Samples ziehen und w\u00fcrde dann besser). Allerdings sieht man auch eines des Risiken der Sampling-basierten Ans\u00e4tze: $+k,-e,+l$ wurde nie gesehen und die Wahrscheinlich $P(+k|-e,+l)$ kann daher nicht sinnvoll gesch\u00e4tzt werden. Auch \"praktisch\" kann es schwierig werden, hier passende Samples \u00fcberhaupt zu ziehen, es k\u00f6nnte n\u00e4mlich sein, dass die Kombi $-e,+l$ sehr unwahrscheinlich ist und es deshalb sehr lange dauert, bis wir $+k,-e,+l$ und $-k,-e,-l$-Samples in (f\u00fcr ein sinnvolles Sch\u00e4tzen!) ausreichender Zahl sehen werden. Daf\u00fcr sind dann andere Sampling-Ans\u00e4tze gedacht... (die bitte nicht v\u00f6llig vergessen! ;)\n\nPunkt (d) ist f\u00fcr unsere Zwecke nicht so f\u00fcrchterlich wichtig. \"Freih\u00e4ndig\" werden sie in der Klausur in aller Regel nicht rechnen sollen\/d\u00fcrfen\/m\u00fcssen - die FJD-Formel aus einem Bayes-Netz sollen sie aber in jedem Fall ablesen k\u00f6nnen!\n\n"}}