{"cell_type":{"8f17a8a6":"code","f3e11c45":"code","3bfb7079":"code","153c687c":"code","320b4f02":"code","9be06537":"code","a8da497b":"code","6e068114":"code","71873bb7":"code","55ef501f":"code","51c5c92d":"code","0537b249":"code","8252d5d1":"code","a620c26d":"code","b8fe29e4":"code","c7e33a8b":"code","6440e821":"code","b51b786f":"code","81c8de70":"code","1cefcee0":"code","55c19b6f":"code","531b009a":"code","ef892502":"code","dcb9c596":"code","39008873":"code","dbcd874e":"code","556113f4":"code","3545a124":"code","0a075ced":"code","0e5984b2":"code","df131126":"code","d66ef29c":"code","0fd29d48":"code","14748b0f":"code","2658a83b":"code","b5b249ed":"code","b068afa4":"code","40b0c330":"code","58ce4615":"code","ea3b6988":"code","ffa29779":"code","5f90c237":"code","980889d6":"code","de294de6":"code","73cfdc5b":"code","3e805a27":"code","c65df985":"code","7f931286":"code","fc0ccc90":"code","334c2352":"code","230df3c8":"code","863075d9":"code","5c21884d":"code","282e533e":"code","202c19f4":"code","b57d9585":"code","d0b7c250":"code","e15a5202":"code","3ebf7a3a":"code","eabebd4e":"code","709a3702":"code","ca7a4a67":"code","ffd5f5cd":"code","e3f15191":"code","0631c9c8":"code","5e09e350":"code","a6893bd5":"code","45e79359":"markdown","7190518a":"markdown","a1a34be1":"markdown","c3219f8a":"markdown","cdd0c6af":"markdown","980f8012":"markdown","590f7e02":"markdown","8f083a00":"markdown","2697ece6":"markdown","59cc36ef":"markdown","b016ccbd":"markdown","05be7922":"markdown","f00c8db2":"markdown","79048ef8":"markdown"},"source":{"8f17a8a6":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport math\nimport os\nimport datetime\n\nplt.rcParams[\"font.size\"] = 14","f3e11c45":"ts_raw_df = pd.read_csv(\"\/kaggle\/input\/covid19-dataset-in-japan\/covid_jpn_total.csv\", parse_dates=[\"Date\"])\nts_raw_df.head()","3bfb7079":"ts_raw_df.tail()","153c687c":"def sum_nan(x):\n    if x.isna().all():\n        return np.nan\n    else:\n        return x.sum()\n\nts_df = ts_raw_df.groupby(\"Date\").aggregate(sum_nan).asfreq(\"D\")\nts_df.drop(columns=\"Location\", inplace=True)\nts_df.tail()","320b4f02":"def plot_diff(col):\n    ax = ts_df.loc[:, col].diff().plot(figsize=(16, 3), style=[\"b.\"])\n    ax.set_title(col)","9be06537":"def plot_cum(col):\n    ax = ts_df.loc[:, col].plot(figsize=(16, 3), style=[\"b.\"])\n    ax.set_title(col)","a8da497b":"plot_cum(\"Positive\")","6e068114":"plot_diff(\"Positive\")","71873bb7":"plot_cum(\"Tested\")","55ef501f":"ts_df[\"Positive_rate\"] = (ts_df[\"Positive\"].diff(7) \/ ts_df[\"Tested\"].diff(7)).shift(-7)\nplot_cum(\"Positive_rate\")\nplt.show()","51c5c92d":"plot_cum(\"Fatal\")","0537b249":"ts_df.loc[:, [\"Hosp_require\",\"Hosp_mild\",\"Hosp_severe\",\"Hosp_unknown\",\"Hosp_waiting\"]].plot(figsize=(16, 3), style=[\".\"] * 5)\nplt.show()","8252d5d1":"Total = 126166948","a620c26d":"ts_df[\"Hospitalized\"] = ts_df[[\"Hosp_mild\",\"Hosp_severe\",\"Hosp_unknown\",\"Hosp_waiting\"]].sum(axis=1, skipna=False)\nts_df[[\"Hospitalized\",\"Discharged\",\"Fatal\"]].plot(figsize=(16, 3), style=[\"b.\", \"c.\", \"g.\", \"r.\"])\nplt.show()","b8fe29e4":"ts_df[\"Hosp_require_old\"] = ts_df[[\"Hosp_mild\",\"Hosp_severe\",\"Hosp_unknown\",\"Hosp_waiting\"]].sum(axis=1, skipna=False)\nts_df[[\"Hosp_require_old\",\"Hosp_require\"]].plot(figsize=(16, 3), style=[\"b.\",\"r.\"])\nplt.show()","c7e33a8b":"ts_df[\"Hosp_require_mod\"] = ts_df[\"Hosp_require_old\"].mask(ts_df[\"Hosp_require_old\"].isna(), ts_df[\"Hosp_require\"])\nts_df[\"Hosp_require_mod\"].plot(figsize=(16, 3), style=[\"b.\"])\nplt.show()","6440e821":"ts_df[\"Suceptible\"] = Total - ts_df[[\"Positive\",\"Discharged\",\"Fatal\"]].sum(axis=1, skipna=False)\nts_df[\"Suceptible\"].plot(figsize=(16, 3), style=[\"k.\"])\nplt.show()","b51b786f":"N_test = 0\ni_end_train = len(ts_df) - N_test\nts_stan_df = ts_df[[\"Suceptible\",\"Positive\",\"Positive_rate\",\"Hosp_require_mod\",\"Discharged\",\"Fatal\"]]\nts_stan_df = ts_stan_df.iloc[:i_end_train, :].fillna(-9999, downcast=\"infer\")\nts_stan_df.head()","81c8de70":"ts_stan_df.tail()","1cefcee0":"data = dict(\n    N_train=i_end_train,\n    N_pred=730,\n    Total=Total,\n    Detected=ts_stan_df[\"Positive\"].values,\n    Hospitalized=ts_stan_df[\"Hosp_require_mod\"].values,\n    Discharged=ts_stan_df[\"Discharged\"].values,\n    Fatal=ts_stan_df[\"Fatal\"].values,\n    Positive_rate=ts_stan_df[\"Positive_rate\"].values,\n    N_impute=int((ts_stan_df[\"Positive_rate\"] < 0).sum()),\n    i_impute=np.flatnonzero(ts_stan_df[\"Positive_rate\"] < 0) + 1\n)\ndata\n","55c19b6f":"date_sim = pd.date_range(ts_df.index.values.min(), periods=data[\"N_train\"] + data[\"N_pred\"])\ndate_sim","531b009a":"stan_code = '''\nfunctions {\n    vector decreasing_simplex(vector x) {\n        int N = num_elements(x) + 1;\n        vector[N] x_out;\n        x_out[1] = 1;\n        x_out[2] = x[1];\n        for (i in 3:N)\n            x_out[i] = x_out[i-1] * x[i-1];\n        x_out = x_out \/ sum(x_out);\n        return x_out;\n    }\n\n    real poisson_lh(real[] lambda, int start, int end, int[] x) {\n        real l = 0;\n        int i = 1;\n        for (t in start:end) {\n            if (x[t] > 0) {\n                if (lambda[i] > 0)\n                    l += poisson_lpmf(x[t] | lambda[i]);\n                else\n                    l += -1e10 + lambda[i];\n            } else if (x[t] == 0) {\n                if (lambda[i] > 0)\n                    l += poisson_lpmf(x[t] | lambda[i]);\n                else if (lambda[i] < 0)\n                    l += -1e10 + lambda[i];\n            }\n            i += 1;\n        }\n        return l;\n    }\n\n    void smooth_lp(vector x, real v_raw) {\n        int N = num_elements(x);\n        real v = square(mean(x)) * v_raw;\n        x[2:] ~ gamma(square(x[:(N-1)]) \/ v, x[:(N-1)] \/ v);\n    }\n}\n\ndata {\n    int<lower=1> N_train;\n    int<lower=1> N_pred;\n    int<lower=1> Total;\n    int Detected[N_train];\n    int Hospitalized[N_train];\n    int Discharged[N_train];\n    int Fatal[N_train];\n    vector[N_train] Positive_rate;\n    int N_impute;\n    int<lower=1> i_impute[N_impute];\n}\n\ntransformed data {\n    int count_data[N_train * 4] = append_array(Detected, \n                                    append_array(Hospitalized, \n                                        append_array(Discharged, Fatal)));\n    int N_chunk = N_train;\n\n    int max_Delay = 14;\n    int max_Delay_I = 35;\n    int max_Delay_H = 35;\n    \n    int N_sim = N_train + 1;\n    int N_sim_pred = N_pred + 1;\n\n    real Positive_0 = Detected[1];\n    real sum_H0 = Hospitalized[1];\n    real L0 = Discharged[1];\n    real F0 = 0;\n\n    real detect_by_pcr_min = 1e-3;\n    real sum_D0_max = Positive_0 \/ detect_by_pcr_min;\n    real sum_E0_max = sum_D0_max * 1e2;\n\n    real max_Positive_rate = max(Positive_rate);\n}\n\nparameters {\n    vector<lower=0, upper=1e1>[N_train] contact;\n\n    \/\/ ordered mortality with upper limit\n    real<lower=1e-2, upper=1> mortality_person_hosp_1;\n    real<lower=0, upper=1> rel_mortality_person_I;\n\n    \/\/ recovery and transition to more severe state\n    simplex[2] recovery_person_exposed;\n    simplex[2] recovery_person_detectable;\n    simplex[2] recovery_person_infectious;\n\n    simplex[max_Delay] get_detectable_days;\n\n    simplex[max_Delay] get_infectious_days;\n    \n    simplex[max_Delay_I] mortality_days_infectious;\n    simplex[max_Delay_I] hospitalize_days;\n\n    simplex[max_Delay_H] mortality_days_hosp;\n    simplex[max_Delay_H] recovery_days_hosp;\n    \n    real<lower=1, upper=sum_E0_max> sum_E0;\n    real<lower=1, upper=sum_D0_max> sum_D0;\n    real<lower=1, upper=sum_D0_max> sum_I0;\n    \n    vector<lower=0, upper=1>[max_Delay - 1] dist_E0_age_dec;\n    vector<lower=0, upper=1>[max_Delay - 1] dist_D0_age_dec;\n    vector<lower=0, upper=1>[max_Delay_I - 1] dist_I0_age_dec;\n\n    simplex[max_Delay_H] dist_H0_age;\n\n    vector<lower=0, upper=max_Positive_rate>[N_impute] imputation;\n    real<lower=0, upper=1> scale_detect;\n    real<lower=0> gain_detect;\n    real<lower=0, upper=max_Positive_rate> intercept_detect;\n\n    real<lower=1e-1, upper=1> detect_fatality;\n\n    real<lower=1e-8, upper=1e-4> v_contact;\n    real<lower=1e-8, upper=1e-4> v_rate_dist;\n    real<lower=square(max_Positive_rate)*1e-8, upper=square(max_Positive_rate)*1e-4> v_Positive_rate;\n}\n\ntransformed parameters {\n    \n    vector[3] branch_person_infectious;\n    vector[2] mortality_person_hosp;\n    \n    real recovery_exposed = recovery_person_exposed[1] \/ max_Delay;\n    row_vector[max_Delay] get_detectable;\n\n    real recovery_detectable = recovery_person_detectable[1] \/ max_Delay;\n    row_vector[max_Delay] get_infectious;\n    \n    row_vector[max_Delay_I] mortality_infectious;\n    real  recovery_infectious;\n    row_vector[max_Delay_I] hospitalize;\n\n    row_vector[max_Delay_H] mortality_hosp;\n    row_vector[max_Delay_H] recovery_hosp;\n\n    vector[max_Delay] dist_E0_age = decreasing_simplex(dist_E0_age_dec);\n    vector[max_Delay] dist_D0_age = decreasing_simplex(dist_D0_age_dec);\n    vector[max_Delay_I] dist_I0_age = decreasing_simplex(dist_I0_age_dec);\n    \n    row_vector[max_Delay] E0 = (sum_E0 * dist_E0_age)';\n    row_vector[max_Delay] D0 = (sum_D0 * dist_D0_age)';\n    row_vector[max_Delay_I] I0 = (sum_I0 * dist_I0_age)';\n    row_vector[max_Delay_H] H0 = (sum_H0 * dist_H0_age)';\n\n    real R0;\n\n    vector[N_sim] S;\n    vector[N_sim] E_out;\n    vector[N_sim] D_out;\n    vector[N_sim] I_out;\n    vector[N_sim] H_out;\n    vector[N_sim] L;\n    vector[N_sim] R;\n    vector[N_sim] F;\n\n    vector[N_sim] Positive;\n    vector[N_sim] F_report;\n\n    row_vector[max_Delay] E;\n    row_vector[max_Delay] D;\n    row_vector[max_Delay_I] I;\n    row_vector[max_Delay_H] H;\n\n    vector[N_train] detect;\n    vector[N_train] Positive_rate_imputed = Positive_rate;\n\n    for (j in 1:N_impute)\n        Positive_rate_imputed[i_impute[j]] = imputation[j];\n    detect = scale_detect * inv(1 + exp(gain_detect * (Positive_rate_imputed - intercept_detect)));\n\n    branch_person_infectious[1] = mortality_person_hosp_1 * rel_mortality_person_I;\n    branch_person_infectious[2:3] = (1 - branch_person_infectious[1]) * recovery_person_infectious;\n\n    mortality_person_hosp[1] = mortality_person_hosp_1;\n    mortality_person_hosp[2] = 1 - mortality_person_hosp_1;\n    \n    {\n        real rel_prob_to_L = recovery_person_exposed[2] * recovery_person_detectable[2] * branch_person_infectious[3] * mortality_person_hosp[2];\n        real rel_prob_to_R = recovery_person_exposed[1] + recovery_person_exposed[2] * (recovery_person_detectable[1] + recovery_person_detectable[2] * branch_person_infectious[2]);\n        R0 = L0 * rel_prob_to_R \/ rel_prob_to_L;\n    }\n\n    get_detectable = (recovery_person_exposed[2] * get_detectable_days)';\n\n    get_infectious = (recovery_person_detectable[2] * get_infectious_days)';\n        \n    mortality_infectious = (branch_person_infectious[1] * mortality_days_infectious)';\n    recovery_infectious = branch_person_infectious[2] \/ max_Delay_I;\n    hospitalize = (branch_person_infectious[3] * hospitalize_days)';\n\n    mortality_hosp = (mortality_person_hosp[1] * mortality_days_hosp)';\n    recovery_hosp = (mortality_person_hosp[2] * recovery_days_hosp)';\n \n    \/\/time evolution\n    {\n        real flux_SE;\n        row_vector[max_Delay] flux_EE;\n        row_vector[max_Delay] flux_EF;\n        row_vector[max_Delay] flux_ER;\n        row_vector[max_Delay] flux_ED;\n\n        row_vector[max_Delay] flux_DD;\n        row_vector[max_Delay] flux_DF;\n        row_vector[max_Delay] flux_DR;\n        row_vector[max_Delay] flux_DI;\n        \n        row_vector[max_Delay_I] flux_II;\n        row_vector[max_Delay_I] flux_IF;\n        row_vector[max_Delay_I] flux_IR;\n        row_vector[max_Delay_I] flux_IH;\n\n        row_vector[max_Delay_H] flux_HH;\n        row_vector[max_Delay_H] flux_HF;\n        row_vector[max_Delay_H] flux_HL;\n        \n        real sum_flux_IF;\n        real sum_flux_HF;\n\n        real sum_E;\n        real sum_D;\n        real sum_I;\n        \n        S[1] = Total - (sum_E0 + sum_D0 + sum_I0 + sum_H0 + L0 + R0 + F0);\n        E = E0;\n        D = D0;\n        I = I0;\n        H = H0;\n        L[1] = L0;\n        R[1] = R0;\n        F[1] = F0;\n        \n        Positive[1] = Positive_0;\n        F_report[1] = Fatal[1];\n\n        for (t in 2:N_sim) {\n            flux_SE = S[t-1]*(sum(I) + sum(H))*contact[t-1] \/ Total;\n\n            flux_ED = E .* get_detectable;\n            Positive[t] = Positive[t-1] + sum(flux_ED)*detect[t-1];\n            flux_ER = E * recovery_exposed;\n\n            flux_DI = D .* get_infectious;\n            flux_DR = D * recovery_detectable;\n            \n            flux_IR = I * recovery_infectious;\n            flux_IH = I .* hospitalize;\n            flux_IF = I .* mortality_infectious;\n\n            flux_HL = H .* recovery_hosp;\n            flux_HF = H .* mortality_hosp;\n            \n            sum_E = sum(E);\n            sum_D = sum(D);\n            sum_I = sum(I);\n            \n            S[t] = S[t-1] - flux_SE;\n\n            flux_EE = E - flux_ED - flux_ER;\n            E[1] = flux_SE;\n            E[2:max_Delay] = flux_EE[1:(max_Delay-1)];\n            E[max_Delay] += flux_EE[max_Delay];\n            E_out[t] = sum_E;\n\n            flux_DD = D - flux_DI - flux_DR;\n            D[1] = sum(flux_ED);\n            D[2:max_Delay] = flux_DD[1:(max_Delay-1)];\n            D[max_Delay] += flux_DD[max_Delay];\n            D_out[t] = sum_D;\n\n            flux_II = I - flux_IH - flux_IR - flux_IF;\n            I[1] = sum(flux_DI);\n            I[2:max_Delay_I] = flux_II[1:(max_Delay_I-1)];\n            I[max_Delay_I] += flux_II[max_Delay_I];\n            I_out[t] = sum_I;\n            \n            flux_HH = H - flux_HL - flux_HF;\n            H[1] = sum(flux_IH);\n            H[2:max_Delay_H] = flux_HH[1:(max_Delay_H-1)];\n            H[max_Delay_H] += flux_HH[max_Delay_H];\n            H_out[t] = sum(H);\n            \n            R[t] = R[t-1] + sum(flux_ER) + sum(flux_DR) + sum(flux_IR);\n\n            L[t] = L[t-1] + sum(flux_HL);\n            \n            sum_flux_IF = sum(flux_IF);\n            sum_flux_HF = sum(flux_HF);\n            F[t] = F[t-1] + sum_flux_IF + sum_flux_HF;\n            F_report[t] = F_report[t-1] + sum_flux_IF*detect_fatality + sum_flux_HF;\n        }\n    }\n}\n\n\nmodel {\n    real estimate[N_train * 5] = to_array_1d(\n                                    append_row(Positive[2:N_sim],\n                                        append_row(H_out[2:N_sim],\n                                            append_row(L[2:N_sim], F_report[2:N_sim]))));\n\n    target += reduce_sum(poisson_lh, estimate, N_chunk, count_data);\n\n    smooth_lp(contact, v_contact);\n\n    smooth_lp(get_detectable_days, v_rate_dist);\n    smooth_lp(get_infectious_days, v_rate_dist);\n    smooth_lp(hospitalize_days, v_rate_dist);\n    smooth_lp(mortality_days_infectious, v_rate_dist);\n\n    for (j in 1:N_impute) {\n        Positive_rate_imputed[i_impute[j]] ~ gamma(square(Positive_rate_imputed[i_impute[j]-1]) \/ v_Positive_rate,\n                                                    Positive_rate_imputed[i_impute[j]-1] \/ v_Positive_rate);\n        if ((i_impute[j] < N_train) && (i_impute[j+1] != (i_impute[j] + 1)))\n            Positive_rate_imputed[i_impute[j]+1] ~ gamma(square(Positive_rate_imputed[i_impute[j]]) \/ v_Positive_rate,\n                                                        Positive_rate_imputed[i_impute[j]] \/ v_Positive_rate);\n    }\n}\n\ngenerated quantities {\n    vector[N_sim_pred] S_pred;\n    vector[N_sim_pred] E_out_pred;\n    vector[N_sim_pred] D_out_pred;\n    vector[N_sim_pred] I_out_pred;\n    vector[N_sim_pred] H_out_pred;\n    vector[N_sim_pred] L_pred;\n    vector[N_sim_pred] R_pred;\n    vector[N_sim_pred] F_pred;\n\n    vector[N_sim_pred] Positive_pred;\n    vector[N_sim_pred] F_report_pred;\n\n    real mean_duration_IH;\n    vector[N_train] reproduction;\n\n    {\n        real contact_pred = contact[N_train];\n        real detect_pred = detect[N_train];\n\n        row_vector[max_Delay] E_pred = E;\n        row_vector[max_Delay] D_pred = D;\n        row_vector[max_Delay_I] I_pred = I;\n        row_vector[max_Delay_H] H_pred = H;\n        \n        real flux_SE;\n        row_vector[max_Delay] flux_EE;\n        row_vector[max_Delay] flux_EF;\n        row_vector[max_Delay] flux_ER;\n        row_vector[max_Delay] flux_ED;\n\n        row_vector[max_Delay] flux_DD;\n        row_vector[max_Delay] flux_DF;\n        row_vector[max_Delay] flux_DR;\n        row_vector[max_Delay] flux_DI;\n        \n        row_vector[max_Delay_I] flux_II;\n        row_vector[max_Delay_I] flux_IF;\n        row_vector[max_Delay_I] flux_IR;\n        row_vector[max_Delay_I] flux_IH;\n\n        row_vector[max_Delay_H] flux_HH;\n        row_vector[max_Delay_H] flux_HF;\n        row_vector[max_Delay_H] flux_HL;\n        \n        real sum_flux_IF;\n        real sum_flux_HF;\n        \n        real sum_E;\n        real sum_D;\n        real sum_I;\n\n        S_pred[1] = S[N_sim];\n        L_pred[1] = L[N_sim];\n        R_pred[1] = R[N_sim];\n        F_pred[1] = F[N_sim];\n        \n        Positive_pred[1] = Positive[N_sim];\n        F_report_pred[1] = F_report[N_sim];\n\n        for (t in 2:N_sim_pred) {\n            \n            flux_SE = S_pred[t-1]*(sum(I_pred) + sum(H_pred))*contact_pred \/ Total;\n\n            flux_ED = E_pred .* get_detectable;\n            Positive_pred[t] = Positive_pred[t-1] + sum(flux_ED)*detect_pred;\n            flux_ER = E_pred * recovery_exposed;\n\n            flux_DI = D_pred .* get_infectious;\n            flux_DR = D_pred * recovery_detectable;\n            \n            flux_IR = I_pred * recovery_infectious;\n            flux_IH = I_pred .* hospitalize;\n            flux_IF = I_pred .* mortality_infectious;\n\n            flux_HL = H_pred .* recovery_hosp;\n            flux_HF = H_pred .* mortality_hosp;\n\n            sum_E = sum(E_pred);\n            sum_D = sum(D_pred);\n            sum_I = sum(I_pred);\n            \n            S_pred[t] = S_pred[t-1] - flux_SE;\n\n            flux_EE = E_pred - flux_ED - flux_ER;\n            E_pred[1] = flux_SE;\n            E_pred[2:max_Delay] = flux_EE[1:(max_Delay-1)];\n            E_pred[max_Delay] += flux_EE[max_Delay];\n            E_out_pred[t] = sum_E;\n\n            flux_DD = D_pred - flux_DI - flux_DR;\n            D_pred[1] = sum(flux_ED);\n            D_pred[2:max_Delay] = flux_DD[1:(max_Delay-1)];\n            D_pred[max_Delay] += flux_DD[max_Delay];\n            D_out_pred[t] = sum_D;\n\n            flux_II = I_pred - flux_IH - flux_IR - flux_IF;\n            I_pred[1] = sum(flux_DI);\n            I_pred[2:max_Delay_I] = flux_II[1:(max_Delay_I-1)];\n            I_pred[max_Delay_I] += flux_II[max_Delay_I];\n            I_out_pred[t] = sum_I;\n            \n            flux_HH = H_pred - flux_HL - flux_HF;\n            H_pred[1] = sum(flux_IH);\n            H_pred[2:max_Delay_H] = flux_HH[1:(max_Delay_H-1)];\n            H_pred[max_Delay_H] += flux_HH[max_Delay_H];\n            H_out_pred[t] = sum(H_pred);\n            \n            R_pred[t] = R_pred[t-1] + sum(flux_ER) + sum(flux_DR) + sum(flux_IR);\n            L_pred[t] = L_pred[t-1] + sum(flux_HL);\n            \n            sum_flux_IF = sum(flux_IF);\n            sum_flux_HF = sum(flux_HF);\n            F_pred[t] = F_pred[t-1] + sum_flux_IF + sum_flux_HF;\n            F_report_pred[t] = F_report_pred[t-1] + sum_flux_IF*detect_fatality + sum_flux_HF;\n        }\n    }\n\n    \/\/ average duration in I and H until recovery or die\n    \/\/ for all the domestically exposed patients\n    {\n        real numerator = 0;\n        real denominator = 0;\n        real p_get_infectious = recovery_person_exposed[2] * recovery_person_detectable[2];\n        real p_I;\n        real p_H;\n        for (d_I in 1:max_Delay_I) {\n            p_I = recovery_infectious + mortality_infectious[d_I];\n            numerator += d_I * p_I;\n            denominator += p_I;\n            for (d_H in 1:max_Delay_H) {\n                p_H = hospitalize[d_I] * (recovery_hosp[d_H] + mortality_hosp[d_H]);\n                numerator += (d_I + d_H) * p_H;\n                denominator += p_H;\n            }\n        }\n        numerator *= p_get_infectious;\n        denominator *= p_get_infectious;\n        \/\/ probability for not getting infectious\n        denominator += recovery_person_exposed[1] + recovery_person_exposed[2] * recovery_person_detectable[1];\n        mean_duration_IH = numerator \/ denominator;\n    }\n    reproduction = (S[1:N_train] \/ Total) .* contact * mean_duration_IH;\n}\n\n'''","ef892502":"with open(\"model.stan\", mode='w') as f:\n    f.write(stan_code)","dcb9c596":"import sys\n!{sys.executable} -m pip install -U cmdstanpy ujson","39008873":"import cmdstanpy\ncmdstanpy.install_cmdstan()","dbcd874e":"model = cmdstanpy.CmdStanModel(stan_file=\"model.stan\")","556113f4":"start = datetime.datetime.now()\nprint(start)\nos.environ[\"STAN_NUM_THREADS\"] = \"4\"\ntry:\n    inference = model.variational(data=data, algorithm=\"fullrank\", grad_samples=32, iter=1000000, output_dir=\".\/\", save_diagnostics=False)\nexcept Exception as e:\n    print(e)\nfinally:\n    print(datetime.datetime.now() - start)","3545a124":"from glob import glob\nfn_stan = \"model\"\nstdout_fns = [(f, os.path.getmtime(f)) for f in glob(\"{}*-stdout.txt\".format(fn_stan))]\nlatest_stdout_fn = sorted(stdout_fns, key=lambda files: files[1])[-1]\nprint(latest_stdout_fn[0])\nelbo_df = pd.read_table(latest_stdout_fn[0], engine=\"python\", skiprows=48, skipfooter=3, sep=\"\\s{2,}\", skipinitialspace=True, index_col=\"iter\")\nelbo_df.tail()","0a075ced":"ax = elbo_df[\"ELBO\"].plot(logy=\"sym\", style=\".\", ms=2, figsize=(15, 5))\nax.set_ylabel(\"ELBO\")\nplt.show()","0e5984b2":"fns = [(f, os.path.getmtime(f)) for f in glob(\"{}*.csv\".format(fn_stan))]\nlatest_fn = sorted(fns, key=lambda files: files[1])[-1]\nprint(latest_fn[0])\ninference_df = pd.read_csv(latest_fn[0], engine=\"python\", comment=\"#\")\ninference_df.head()","df131126":"par_names = []\nfor n in inference_df.columns.tolist():\n    if (\".\" in n):\n        par_names.append(n[0:n.find(\".\")])\n    else:\n        par_names.append(n)\npar_names = set(par_names)        \npar_names","d66ef29c":"par_dim = {}\nfor name in par_names:\n    if name.endswith(\"_raw\") or name.startswith((\"lp__\")):\n        continue\n    dim_sample = 0\n    for n in inference_df.columns.tolist():\n        dim_sample += n.startswith(name + \".\")\n    if dim_sample == 0:\n        dim_sample = 1\n    \n    par_dim[name] = dim_sample \n        \nprint(par_dim)","0fd29d48":"name_hist = []\nfor p, d in par_dim.items():\n    if d <= 3:\n        name_hist.append(p)\nname_hist","14748b0f":"name_hist = [\n    'recovery_person_exposed',\n    'recovery_person_detectable',\n    'branch_person_infectious',\n    'mortality_person_hosp',\n    'mean_duration_IH',\n    'sum_E0',\n    'sum_D0',\n    'sum_I0',\n    'R0',\n    'detect_fatality',\n    'scale_detect',\n    'gain_detect',\n    'intercept_detect',\n    'v_rate_dist',\n    'v_contact',\n    'v_Positive_rate',\n]","2658a83b":"from matplotlib.ticker import ScalarFormatter\n\nn_panel = 0\nfor name in name_hist:\n    n_panel += par_dim[name]\nn_rows = int(math.ceil(n_panel \/ 4))\nfig, ax_mat = plt.subplots(nrows=n_rows, ncols=4, figsize=(16, 4*n_rows))\nax = np.ravel(ax_mat)\n\ni = 0\nfor name in name_hist:\n    if par_dim[name] == 1:\n        sample = inference_df[name]\n        ax[i].hist(sample, bins=50)\n        ax[i].xaxis.set_major_formatter(ScalarFormatter(useMathText=True))\n        ax[i].ticklabel_format(style=\"sci\", axis=\"x\", scilimits=(-3, 3))\n        ax[i].set_title(name, fontsize=14)\n        i += 1\n    else:\n        for j in range(1, par_dim[name] + 1):\n            name_j = name + \".\" + str(j)\n            sample = inference_df[name_j]\n            ax[i].hist(sample, bins=50)\n            ax[i].xaxis.set_major_formatter(ScalarFormatter(useMathText=True))\n            ax[i].ticklabel_format(style=\"sci\", axis=\"x\", scilimits=(-3, 3))\n            ax[i].set_title(name_j, fontsize=14)\n            i += 1\nfig.subplots_adjust(wspace=0.3, hspace=0.4)","b5b249ed":"name_age = []\nfor p, d in par_dim.items():\n    if (3 < d) & (d < data[\"N_train\"]) & (\"dist_\" not in p) & (\"_days\" not in p):\n        name_age.append(p)\nname_age","b068afa4":"name_age = [\n'mortality_infectious',\n'mortality_hosp',\n'recovery_hosp',\n'get_detectable',\n'get_infectious',\n'hospitalize',\n'E0',\n'D0',\n'I0',\n'H0',\n]","40b0c330":"sample_dic = dict()\nfor name in name_age:\n    sample = []\n    for j in range(1, par_dim[name] + 1):\n        sample.append(inference_df[name + \".\" + str(j)])\n    sample_dic[name] = np.column_stack(sample)","58ce4615":"nrows = math.ceil(len(name_age) \/ 2)\nfig, ax_mat = plt.subplots(nrows=nrows, ncols=2, figsize=(16, 3.5*nrows))\nax = np.ravel(ax_mat)\nfor i, name in enumerate(name_age):\n    sample = sample_dic[name]\n    sns.boxplot(data=sample, ax=ax[i], color=\"dodgerblue\", linewidth=1, fliersize=1)\n    ax[i].set_xticks(np.arange(0, sample.shape[1], 5))\n    ax[i].set_xticklabels(np.arange(1, sample.shape[1]+1, 5))\n    ax[i].set_title(name)\nfig.subplots_adjust(wspace=0.2, hspace=0.4)\nfig.suptitle(\"days from transition to the state\", x=0.5, y=0.1)\nplt.show()","ea3b6988":"name_ts = []\n# N_sim = data[\"N_train\"] + data[\"N_pred\"] + 1\nfor p, d in par_dim.items():\n    if (d >= data[\"N_train\"]):\n        name_ts.append(p)\nname_ts","ffa29779":"name_ts = [\n 'S',\n 'E_out',\n 'D_out',\n 'I_out',\n 'H_out',\n 'L',\n 'R',\n 'F',\n 'Positive',\n 'Positive_rate_imputed',\n 'detect',\n 'F_report',\n 'contact',\n 'reproduction',\n]","5f90c237":"q = np.array([0.05, 0.25, 0.5, 0.75, 0.95])\nq_ts_dic = dict()\nfor name in name_ts:\n    sample = []\n    for j in range(2, par_dim[name] + 1):\n        sample.append(inference_df[name + \".\" + str(j)])\n    sample = np.column_stack(sample)\n\n    if name not in ['contact', 'reproduction','Positive_rate_imputed','detect']:\n        name_pred = name + \"_pred\"\n        sample_pred = []\n        for j in range(2, par_dim[name_pred] + 1):\n            sample_pred.append(inference_df[name_pred + \".\" + str(j)])\n        sample_pred = np.column_stack(sample_pred)\n        sample = np.hstack([sample, sample_pred])\n\n    q_ts_dic[name] = np.nanquantile(sample, q, axis=0)","980889d6":"q_ts_dic[\"S\"].shape","de294de6":"fig, ax = plt.subplots(figsize=(16, 4))\n\nfor label, i_list in {\"90% credible\":((0, 4), \"paleturquoise\"), \"50% credible\":((1, 3), \"darkturquoise\")}.items():\n    ax.fill_between(x=date_sim, y1=q_ts_dic[\"S\"][i_list[0][0], :], y2=q_ts_dic[\"S\"][i_list[0][1], :], color=i_list[1], label=label)\nax.plot(date_sim, q_ts_dic[\"S\"][2, :], \"-\", color=\"darkcyan\", label=\"Median\")\n\nax.axvline(date_sim[data[\"N_train\"]-1], color=\"red\", lw=1, label=\"End of Train\")\nax.set_title(\"Suceptible\")\n# ax.set_ylim(ts_df[\"Suceptible\"].min() * 0.5, ts_df[\"Suceptible\"].max() * 1.025)\nax.set_xlim(date_sim.min() - np.timedelta64(7, 'D'), date_sim.max() + np.timedelta64(7, 'D'))\nax.legend(loc=\"upper left\", bbox_to_anchor=(1.01, 1))\nplt.show()","73cfdc5b":"fig, ax = plt.subplots(figsize=(16, 4))\nv = \"Positive\"\nv_data = v\nfor label, i_list in {\"90% credible\":((0, 4), \"skyblue\"), \"50% credible\":((1, 3), \"royalblue\")}.items():\n    ax.fill_between(x=date_sim, y1=q_ts_dic[v][i_list[0][0], :], y2=q_ts_dic[v][i_list[0][1], :], color=i_list[1], label=label)\nax.plot(date_sim, q_ts_dic[v][2, :], \"-\", color=\"navy\", label=\"Median\")\nax.plot(ts_df.index.values, ts_df[v_data], \"k.\", label=\"Reported PCR-positive\")\n\nax.axvline(date_sim[data[\"N_train\"]-1], color=\"red\", lw=1, label=\"End of Train\")\nax.set_title(\"Cumulative PCR-positive (Domestic)\")\nax.set_ylim(-ts_df[v_data].max() * 0.025, ts_df[v_data].max() * 2)\nax.set_xlim(date_sim.min() - np.timedelta64(7, 'D'), date_sim.max() + np.timedelta64(7, 'D'))\nax.legend(loc=\"upper left\", bbox_to_anchor=(1.01, 1))\nplt.show()","3e805a27":"fig, ax = plt.subplots(figsize=(16, 4))\n\nv = \"Positive\"\nv_data = v\n\nfor label, i_list in {\"90% credible\":((0, 4), \"skyblue\"), \"50% credible\":((1, 3), \"royalblue\")}.items():\n    ax.fill_between(x=date_sim, y1=q_ts_dic[v][i_list[0][0], :], y2=q_ts_dic[v][i_list[0][1], :], color=i_list[1], label=label)\nax.plot(date_sim, q_ts_dic[v][2, :], \"-\", color=\"navy\", label=\"Median\")\nax.plot(ts_df.index.values, ts_df[v_data], \"k.\", label=\"Reported PCR-positive\")\n\nax.axvline(date_sim[data[\"N_train\"]-1], color=\"red\", lw=1, label=\"End of Train\")\nax.set_title(\"Cumulative PCR-positive (Domestic)\")\n# ax.set_ylim(-ts_df[v_data].max() * 0.025, ts_df[v_data].max() * 2)\nax.set_xlim(date_sim.min() - np.timedelta64(7, 'D'), date_sim.max() + np.timedelta64(7, 'D'))\nax.legend(loc=\"upper left\", bbox_to_anchor=(1.01, 1))\nplt.show()","c65df985":"fig, ax = plt.subplots(figsize=(16, 4))\n\nfor label, i_list in {\"90% credible\":((0, 4), \"paleturquoise\"), \"50% credible\":((1, 3), \"darkturquoise\")}.items():\n    ax.fill_between(x=date_sim, y1=q_ts_dic[\"E_out\"][i_list[0][0], :], y2=q_ts_dic[\"E_out\"][i_list[0][1], :], color=i_list[1], label=label)\nax.plot(date_sim, q_ts_dic[\"E_out\"][2, :], \"-\", color=\"darkcyan\", label=\"Median\")\n\nax.axvline(date_sim[data[\"N_train\"]-1], color=\"red\", lw=1, label=\"End of Train\")\nax.set_title(\"Exposed (not detectable or infectious)\")\n# ax.set_ylim(q_ts_dic[\"E_out\"][:data[\"N_train\"]].min() * 0.1, q_ts_dic[\"E_out\"][:data[\"N_train\"]].max() * 10)\nax.set_xlim(date_sim.min() - np.timedelta64(7, 'D'), date_sim.max() + np.timedelta64(7, 'D'))\nax.legend(loc=\"upper left\", bbox_to_anchor=(1.01, 1))\nplt.show()","7f931286":"fig, ax = plt.subplots(figsize=(16, 4))\n\nfor label, i_list in {\"90% credible\":((0, 4), \"paleturquoise\"), \"50% credible\":((1, 3), \"darkturquoise\")}.items():\n    ax.fill_between(x=date_sim, y1=q_ts_dic[\"E_out\"][i_list[0][0], :], y2=q_ts_dic[\"E_out\"][i_list[0][1], :], color=i_list[1], label=label)\nax.plot(date_sim, q_ts_dic[\"E_out\"][2, :], \"-\", color=\"darkcyan\", label=\"Median\")\n\nax.axvline(date_sim[data[\"N_train\"]-1], color=\"red\", lw=1, label=\"End of Train\")\nax.set_title(\"Exposed (not detectable or infectious)\")\nax.set_ylim(q_ts_dic[\"E_out\"][:data[\"N_train\"]].min() * 0.1, q_ts_dic[\"E_out\"][:data[\"N_train\"]].max() * 2)\nax.set_xlim(date_sim.min() - np.timedelta64(7, 'D'), date_sim.max() + np.timedelta64(7, 'D'))\nax.legend(loc=\"upper left\", bbox_to_anchor=(1.01, 1))\nplt.show()","fc0ccc90":"fig, ax = plt.subplots(figsize=(16, 4))\n\nfor label, i_list in {\"90% credible\":((0, 4), \"paleturquoise\"), \"50% credible\":((1, 3), \"darkturquoise\")}.items():\n    ax.fill_between(x=date_sim, y1=q_ts_dic[\"D_out\"][i_list[0][0], :], y2=q_ts_dic[\"D_out\"][i_list[0][1], :], color=i_list[1], label=label)\nax.plot(date_sim, q_ts_dic[\"D_out\"][2, :], \"-\", color=\"darkcyan\", label=\"Median\")\n\nax.axvline(date_sim[data[\"N_train\"]-1], color=\"red\", lw=1, label=\"End of Train\")\nax.set_title(\"PCR-detectable\")\nax.set_xlim(date_sim.min() - np.timedelta64(7, 'D'), date_sim.max() + np.timedelta64(7, 'D'))\nax.legend(loc=\"upper left\", bbox_to_anchor=(1.01, 1))\nplt.show()","334c2352":"fig, ax = plt.subplots(figsize=(16, 4))\n\nfor label, i_list in {\"90% credible\":((0, 4), \"paleturquoise\"), \"50% credible\":((1, 3), \"darkturquoise\")}.items():\n    ax.fill_between(x=date_sim, y1=q_ts_dic[\"D_out\"][i_list[0][0], :], y2=q_ts_dic[\"D_out\"][i_list[0][1], :], color=i_list[1], label=label)\nax.plot(date_sim, q_ts_dic[\"D_out\"][2, :], \"-\", color=\"darkcyan\", label=\"Median\")\n\nax.axvline(date_sim[data[\"N_train\"]-1], color=\"red\", lw=1, label=\"End of Train\")\nax.set_title(\"PCR-detectable\")\nax.set_ylim(0, q_ts_dic[\"D_out\"][4, :data[\"N_train\"]].max() * 2)\nax.set_xlim(date_sim.min() - np.timedelta64(7, 'D'), date_sim.max() + np.timedelta64(7, 'D'))\nax.legend(loc=\"upper left\", bbox_to_anchor=(1.01, 1))\nplt.show()","230df3c8":"fig, ax = plt.subplots(figsize=(16, 4))\n\nfor label, i_list in {\"90% credible\":((0, 4), \"paleturquoise\"), \"50% credible\":((1, 3), \"darkturquoise\")}.items():\n    ax.fill_between(x=date_sim, y1=q_ts_dic[\"I_out\"][i_list[0][0], :], y2=q_ts_dic[\"I_out\"][i_list[0][1], :], color=i_list[1], label=label)\nax.plot(date_sim, q_ts_dic[\"I_out\"][2, :], \"-\", color=\"darkcyan\", label=\"Median\")\n\nax.axvline(date_sim[data[\"N_train\"]-1], color=\"red\", lw=1, label=\"End of Train\")\nax.set_title(\"Infectious\")\nax.set_xlim(date_sim.min() - np.timedelta64(7, 'D'), date_sim.max() + np.timedelta64(7, 'D'))\nax.legend(loc=\"upper left\", bbox_to_anchor=(1.01, 1))\nplt.show()","863075d9":"fig, ax = plt.subplots(figsize=(16, 4))\n\nfor label, i_list in {\"90% credible\":((0, 4), \"paleturquoise\"), \"50% credible\":((1, 3), \"darkturquoise\")}.items():\n    ax.fill_between(x=date_sim, y1=q_ts_dic[\"I_out\"][i_list[0][0], :], y2=q_ts_dic[\"I_out\"][i_list[0][1], :], color=i_list[1], label=label)\nax.plot(date_sim, q_ts_dic[\"I_out\"][2, :], \"-\", color=\"darkcyan\", label=\"Median\")\n\nax.axvline(date_sim[data[\"N_train\"]-1], color=\"red\", lw=1, label=\"End of Train\")\nax.set_title(\"Infectious\")\nax.set_ylim(0, q_ts_dic[\"I_out\"][4, :data[\"N_train\"]].max() * 2)\nax.set_xlim(date_sim.min() - np.timedelta64(7, 'D'), date_sim.max() + np.timedelta64(7, 'D'))\nax.legend(loc=\"upper left\", bbox_to_anchor=(1.01, 1))\nplt.show()","5c21884d":"fig, ax = plt.subplots(figsize=(16, 4))\n\nfor label, i_list in {\"90% credible\":((0, 4), \"paleturquoise\"), \"50% credible\":((1, 3), \"darkturquoise\")}.items():\n    ax.fill_between(x=date_sim, y1=q_ts_dic[\"R\"][i_list[0][0], :], y2=q_ts_dic[\"R\"][i_list[0][1], :], color=i_list[1], label=label)\nax.plot(date_sim, q_ts_dic[\"R\"][2, :], \"-\", color=\"darkcyan\", label=\"Median\")\n\nax.axvline(date_sim[data[\"N_train\"]-1], color=\"red\", lw=1, label=\"End of Train\")\nax.set_title(\"Cumulative Recovery without Hospitalization\")\nax.set_xlim(date_sim.min() - np.timedelta64(7, 'D'), date_sim.max() + np.timedelta64(7, 'D'))\nax.legend(loc=\"upper left\", bbox_to_anchor=(1.01, 1))\nplt.show()","282e533e":"fig, ax = plt.subplots(figsize=(16, 4))\n\nfor label, i_list in {\"90% credible\":((0, 4), \"paleturquoise\"), \"50% credible\":((1, 3), \"darkturquoise\")}.items():\n    ax.fill_between(x=date_sim, y1=q_ts_dic[\"R\"][i_list[0][0], :], y2=q_ts_dic[\"R\"][i_list[0][1], :], color=i_list[1], label=label)\nax.plot(date_sim, q_ts_dic[\"R\"][2, :], \"-\", color=\"darkcyan\", label=\"Median\")\n\nax.axvline(date_sim[data[\"N_train\"]-1], color=\"red\", lw=1, label=\"End of Train\")\nax.set_title(\"Cumulative Recovery without Hospitalization\")\nax.set_ylim(0, q_ts_dic[\"R\"][2, :data[\"N_train\"]].max() * 2)\nax.set_xlim(date_sim.min() - np.timedelta64(7, 'D'), date_sim.max() + np.timedelta64(7, 'D'))\nax.legend(loc=\"upper left\", bbox_to_anchor=(1.01, 1))\nplt.show()","202c19f4":"fig, ax = plt.subplots(figsize=(16, 4))\n\nv = \"H_out\"\nv_data = \"Hosp_require_mod\"\nfor label, i_list in {\"90% credible\":((0, 4), \"skyblue\"), \"50% credible\":((1, 3), \"royalblue\")}.items():\n    ax.fill_between(x=date_sim, y1=q_ts_dic[v][i_list[0][0], :], y2=q_ts_dic[v][i_list[0][1], :], color=i_list[1], label=label)\nax.plot(date_sim, q_ts_dic[v][2, :], \"-\", color=\"navy\", label=\"Median\")\nax.plot(ts_df.index.values, ts_df[v_data], \"k.\", label=\"Reported PCR-positive\")\n\nax.axvline(date_sim[data[\"N_train\"]-1], color=\"red\", lw=1, label=\"End of Train\")\nax.set_title(\"Hospitalized\")\nax.set_ylim(-ts_df[v_data].max() * 0.025, ts_df[v_data].max() * 2)\nax.set_xlim(date_sim.min() - np.timedelta64(7, 'D'), date_sim.max() + np.timedelta64(7, 'D'))\nax.legend(loc=\"upper left\", bbox_to_anchor=(1.01, 1))\nplt.show()","b57d9585":"fig, ax = plt.subplots(figsize=(16, 4))\n\nv = \"H_out\"\nv_data = \"Hosp_require_mod\"\nfor label, i_list in {\"90% credible\":((0, 4), \"skyblue\"), \"50% credible\":((1, 3), \"royalblue\")}.items():\n    ax.fill_between(x=date_sim, y1=q_ts_dic[v][i_list[0][0], :], y2=q_ts_dic[v][i_list[0][1], :], color=i_list[1], label=label)\nax.plot(date_sim, q_ts_dic[v][2, :], \"-\", color=\"navy\", label=\"Median\")\nax.plot(ts_df.index.values, ts_df[v_data], \"k.\", label=\"Reported PCR-positive\")\n\nax.axvline(date_sim[data[\"N_train\"]-1], color=\"red\", lw=1, label=\"End of Train\")\nax.set_title(\"Hospitalized\")\n# ax.set_ylim(-ts_df[v_data].max() * 0.025, ts_df[v_data].max() * 2)\nax.set_xlim(date_sim.min() - np.timedelta64(7, 'D'), date_sim.max() + np.timedelta64(7, 'D'))\nax.legend(loc=\"upper left\", bbox_to_anchor=(1.01, 1))\nplt.show()","d0b7c250":"fig, ax = plt.subplots(figsize=(16, 4))\n\nv = \"L\"\nv_data = \"Discharged\"\nfor label, i_list in {\"90% credible\":((0, 4), \"skyblue\"), \"50% credible\":((1, 3), \"royalblue\")}.items():\n    ax.fill_between(x=date_sim, y1=q_ts_dic[v][i_list[0][0], :], y2=q_ts_dic[v][i_list[0][1], :], color=i_list[1], label=label)\nax.plot(date_sim, q_ts_dic[v][2, :], \"-\", color=\"navy\", label=\"Median\")\nax.plot(ts_df.index.values, ts_df[v_data], \"k.\", label=\"Reported PCR-positive\")\n\nax.axvline(date_sim[data[\"N_train\"]-1], color=\"red\", lw=1, label=\"End of Train\")\nax.set_title(\"Discharged\")\nax.set_ylim(-ts_df[v_data].max() * 0.025, ts_df[v_data].max() * 2)\nax.set_xlim(date_sim.min() - np.timedelta64(7, 'D'), date_sim.max() + np.timedelta64(7, 'D'))\nax.legend(loc=\"upper left\", bbox_to_anchor=(1.01, 1))\nplt.show()","e15a5202":"fig, ax = plt.subplots(figsize=(16, 4))\n\nv = \"L\"\nv_data = \"Discharged\"\nfor label, i_list in {\"90% credible\":((0, 4), \"skyblue\"), \"50% credible\":((1, 3), \"royalblue\")}.items():\n    ax.fill_between(x=date_sim, y1=q_ts_dic[v][i_list[0][0], :], y2=q_ts_dic[v][i_list[0][1], :], color=i_list[1], label=label)\nax.plot(date_sim, q_ts_dic[v][2, :], \"-\", color=\"navy\", label=\"Median\")\nax.plot(ts_df.index.values, ts_df[v_data], \"k.\", label=\"Reported PCR-positive\")\n\nax.axvline(date_sim[data[\"N_train\"]-1], color=\"red\", lw=1, label=\"End of Train\")\nax.set_title(\"Discharged\")\n# ax.set_ylim(-ts_df[v_data].max() * 0.025, ts_df[v_data].max() * 2)\nax.set_xlim(date_sim.min() - np.timedelta64(7, 'D'), date_sim.max() + np.timedelta64(7, 'D'))\nax.legend(loc=\"upper left\", bbox_to_anchor=(1.01, 1))\nplt.show()","3ebf7a3a":"fig, ax = plt.subplots(figsize=(16, 4))\n\nv = \"F_report\"\nv_data = \"Fatal\"\nfor label, i_list in {\"90% credible\":((0, 4), \"skyblue\"), \"50% credible\":((1, 3), \"royalblue\")}.items():\n    ax.fill_between(x=date_sim, y1=q_ts_dic[v][i_list[0][0], :], y2=q_ts_dic[v][i_list[0][1], :], color=i_list[1], label=label)\nax.plot(date_sim, q_ts_dic[v][2, :], \"-\", color=\"navy\", label=\"Median\")\nax.plot(ts_df.index.values, ts_df[v_data], \"k.\", label=\"Reported PCR-positive\")\n\nax.axvline(date_sim[data[\"N_train\"]-1], color=\"red\", lw=1, label=\"End of Train\")\nax.set_title(\"Fatal\")\nax.set_ylim(-ts_df[v_data].max() * 0.025, ts_df[v_data].max() * 2)\nax.set_xlim(date_sim.min() - np.timedelta64(7, 'D'), date_sim.max() + np.timedelta64(7, 'D'))\nax.legend(loc=\"upper left\", bbox_to_anchor=(1.01, 1))\nplt.show()","eabebd4e":"fig, ax = plt.subplots(figsize=(16, 4))\n\nv = \"F_report\"\nv_data = \"Fatal\"\nfor label, i_list in {\"90% credible\":((0, 4), \"skyblue\"), \"50% credible\":((1, 3), \"royalblue\")}.items():\n    ax.fill_between(x=date_sim, y1=q_ts_dic[v][i_list[0][0], :], y2=q_ts_dic[v][i_list[0][1], :], color=i_list[1], label=label)\nax.plot(date_sim, q_ts_dic[v][2, :], \"-\", color=\"navy\", label=\"Median\")\nax.plot(ts_df.index.values, ts_df[v_data], \"k.\", label=\"Reported PCR-positive\")\n\nax.axvline(date_sim[data[\"N_train\"]-1], color=\"red\", lw=1, label=\"End of Train\")\nax.set_title(\"Fatal\")\n# ax.set_ylim(-ts_df[v_data].max() * 0.025, ts_df[v_data].max() * 2)\nax.set_xlim(date_sim.min() - np.timedelta64(7, 'D'), date_sim.max() + np.timedelta64(7, 'D'))\nax.legend(loc=\"upper left\", bbox_to_anchor=(1.01, 1))\nplt.show()","709a3702":"fig, ax = plt.subplots(figsize=(16, 4))\n\nv = \"F\"\nv_data = \"Fatal\"\nfor label, i_list in {\"90% credible\":((0, 4), \"paleturquoise\"), \"50% credible\":((1, 3), \"darkturquoise\")}.items():\n    ax.fill_between(x=date_sim, y1=q_ts_dic[v][i_list[0][0], :], y2=q_ts_dic[v][i_list[0][1], :], color=i_list[1], label=label)\nax.plot(date_sim, q_ts_dic[v][2, :], \"-\", color=\"darkcyan\", label=\"Median\")\nax.plot(ts_df.index.values, ts_df[v_data], \"k.\", label=\"Reported PCR-positive\")\n\nax.axvline(date_sim[data[\"N_train\"]-1], color=\"red\", lw=1, label=\"End of Train\")\nax.set_title(\"Fatal\")\nax.set_ylim(-ts_df[v_data].max() * 0.025, ts_df[v_data].max() * 2)\nax.set_xlim(date_sim.min() - np.timedelta64(7, 'D'), date_sim.max() + np.timedelta64(7, 'D'))\nax.legend(loc=\"upper left\", bbox_to_anchor=(1.01, 1))\nplt.show()","ca7a4a67":"fig, ax = plt.subplots(figsize=(16, 4))\n\nv = \"F\"\nv_data = \"Fatal\"\nfor label, i_list in {\"90% credible\":((0, 4), \"paleturquoise\"), \"50% credible\":((1, 3), \"darkturquoise\")}.items():\n    ax.fill_between(x=date_sim, y1=q_ts_dic[v][i_list[0][0], :], y2=q_ts_dic[v][i_list[0][1], :], color=i_list[1], label=label)\nax.plot(date_sim, q_ts_dic[v][2, :], \"-\", color=\"darkcyan\", label=\"Median\")\nax.plot(ts_df.index.values, ts_df[v_data], \"k.\", label=\"Reported Fatality\")\n\nax.axvline(date_sim[data[\"N_train\"]-1], color=\"red\", lw=1, label=\"End of Train\")\nax.set_title(\"Fatal\")\n# ax.set_ylim(-ts_df[v_data].max() * 0.025, ts_df[v_data].max() * 2)\nax.set_xlim(date_sim.min() - np.timedelta64(7, 'D'), date_sim.max() + np.timedelta64(7, 'D'))\nax.legend(loc=\"upper left\", bbox_to_anchor=(1.01, 1))\nplt.show()","ffd5f5cd":"fig, ax = plt.subplots(figsize=(16, 4))\n\nfor label, i_list in {\"90% credible\":((0, 4), \"paleturquoise\"), \"50% credible\":((1, 3), \"darkturquoise\")}.items():\n    ax.fill_between(x=date_sim[1:data[\"N_train\"]], y1=q_ts_dic[\"reproduction\"][i_list[0][0], :], y2=q_ts_dic[\"reproduction\"][i_list[0][1], :], color=i_list[1], label=label)\nax.plot(date_sim[1:data[\"N_train\"]], q_ts_dic[\"reproduction\"][2, :], \"-\", color=\"darkcyan\", label=\"Median\")\n\nax.axvline(date_sim[data[\"N_train\"]-1], color=\"red\", lw=1, label=\"End of Train\")\nax.axhline(1, color=\"blue\", lw=1, label=\"Threshold (1.0)\")\nax.set_title(\"Effective Reproduction Number\")\nax.set_xlim(date_sim.min() - np.timedelta64(7, 'D'), date_sim.max() + np.timedelta64(7, 'D'))\nax.legend(loc=\"upper left\", bbox_to_anchor=(1.01, 1))\nplt.show()","e3f15191":"fig, ax = plt.subplots(figsize=(16, 4))\n\nfor label, i_list in {\"90% credible\":((0, 4), \"paleturquoise\"), \"50% credible\":((1, 3), \"darkturquoise\")}.items():\n    ax.fill_between(x=date_sim[1:data[\"N_train\"]], y1=q_ts_dic[\"reproduction\"][i_list[0][0], :], y2=q_ts_dic[\"reproduction\"][i_list[0][1], :], color=i_list[1], label=label)\nax.plot(date_sim[1:data[\"N_train\"]], q_ts_dic[\"reproduction\"][2, :], \"-\", color=\"darkcyan\", label=\"Median\")\n\nax.axvline(date_sim[data[\"N_train\"]-1], color=\"red\", lw=1, label=\"End of Train\")\nax.axhline(1, color=\"blue\", lw=1, label=\"Threshold (1.0)\")\nax.set_title(\"Effective Reproduction Number\")\nax.set_xlim(date_sim.min() - np.timedelta64(1, 'D'), date_sim[:(data[\"N_train\"]-1)].max() + np.timedelta64(2, 'D'))\nax.tick_params(axis='x', labelrotation=90)\nax.legend(loc=\"upper left\", bbox_to_anchor=(1.01, 1))\nplt.show()","0631c9c8":"fig, ax = plt.subplots(figsize=(16, 4))\n\nfor label, i_list in {\"90% credible\":((0, 4), \"paleturquoise\"), \"50% credible\":((1, 3), \"darkturquoise\")}.items():\n    ax.fill_between(x=date_sim[1:data[\"N_train\"]], y1=q_ts_dic[\"contact\"][i_list[0][0], :], y2=q_ts_dic[\"contact\"][i_list[0][1], :], color=i_list[1], label=label)\nax.plot(date_sim[1:data[\"N_train\"]], q_ts_dic[\"contact\"][2, :], \"-\", color=\"darkcyan\", label=\"Median\")\n\nax.axvline(date_sim[data[\"N_train\"]-1], color=\"red\", lw=1, label=\"End of Train\")\nax.set_title(\"Effective Contact Rate (per infectious or hospitalized patient per day)\")\nax.set_xlim(date_sim.min() - np.timedelta64(7, 'D'), date_sim.max() + np.timedelta64(7, 'D'))\nax.legend(loc=\"upper left\", bbox_to_anchor=(1.01, 1))\nplt.show()","5e09e350":"fig, ax = plt.subplots(figsize=(16, 4))\n\nfor label, i_list in {\"90% credible\":((0, 4), \"paleturquoise\"), \"50% credible\":((1, 3), \"darkturquoise\")}.items():\n    ax.fill_between(x=date_sim[1:data[\"N_train\"]], y1=q_ts_dic[\"contact\"][i_list[0][0], :], y2=q_ts_dic[\"contact\"][i_list[0][1], :], color=i_list[1], label=label)\nax.plot(date_sim[1:data[\"N_train\"]], q_ts_dic[\"contact\"][2, :], \"-\", color=\"darkcyan\", label=\"Median\")\n\nax.axvline(date_sim[data[\"N_train\"]-1], color=\"red\", lw=1, label=\"End of Train\")\nax.set_title(\"Effective Contact Rate (per infectious or hospitalized patinet per day)\")\nax.set_xlim(date_sim.min() - np.timedelta64(1, 'D'), date_sim[:(data[\"N_train\"]-1)].max() + np.timedelta64(2, 'D'))\nax.tick_params(axis='x', labelrotation=90)\nax.legend(loc=\"upper left\", bbox_to_anchor=(1.01, 1))\nplt.show()","a6893bd5":"fig, ax = plt.subplots(figsize=(16, 4))\n\nv = \"detect\"\nv_data = \"Positive_rate\"\nfor label, i_list in {\"90% credible\":((0, 4), \"paleturquoise\"), \"50% credible\":((1, 3), \"darkturquoise\")}.items():\n    ax.fill_between(x=date_sim[1:data[\"N_train\"]], y1=q_ts_dic[v][i_list[0][0], :], y2=q_ts_dic[v][i_list[0][1], :], color=i_list[1], label=label)\nax.plot(date_sim[1:data[\"N_train\"]], q_ts_dic[v][2, :], \"-\", color=\"darkcyan\", label=\"Median\")\nax_r = ax.twinx()\nax_r.plot(ts_df.index.values, ts_df[v_data], \"k.\", label=\"Positive rate (right axis)\")\n\nax.axvline(date_sim[data[\"N_train\"]-1], color=\"red\", lw=1, label=\"End of Train\")\nax.set_title(\"Detection Rate with PCR\")\nax.set_xlim(date_sim.min() - np.timedelta64(1, 'D'), date_sim[:(data[\"N_train\"]-1)].max() + np.timedelta64(2, 'D'))\nax.legend(loc=\"upper left\", bbox_to_anchor=(1.05, 1))\nax_r.legend(loc=\"upper left\", bbox_to_anchor=(1.05, 0.5))\nplt.show()","45e79359":"# Stan Code","7190518a":"- Time evolution\n\\begin{align*}\nS(0) &= N - \\left[ \\sum_{d=0}^{d_{max}} \\left\\{I(0, d) + L(0, d) + H(0, d)\\right\\} + R(0) + D(0) \\right] \\\\\nS(t) &= \\left[1 - N^{-1} \\beta(t) \\sum_{d=0}^{d_{max}} \\{ I(t-1, d-1) + H(t-1, d-1) \\}\\right] S(t-1) \\\\[10pt]  \nE(t, 0) &= N^{-1} \\beta(t-1) S(t-1) \\sum_{d=0}^{d_{max}} \\{ I(t-1, d-1) + H(t-1, d-1) \\} \\\\\nE(t, d) &= \\left[1 - \\{\\gamma_E(d-1) + \\chi(d-1)\\} \\right] E(t-1, d-1) \\\\\nE(t, d_{max}) &= [1 - \\{\\gamma_E(d_{max}) + \\chi(d_{max})\\}]E(t-1, d_{max}) + [1 - \\{\\alpha_E(d_{max}-1) + \\gamma_E(d_{max}-1) + \\chi(d_{max}-1)\\}] E(t-1, d_{max}-1) \\\\[10pt]\nD(t, 0) &= \\sum_{d=0}^{d_{max}} \\iota(d) E(t-1, d) \\\\\nD(t, d) &= \\left[1 - \\{\\gamma_D(d-1) + \\nu(d-1)\\} \\right] D(t-1, d-1) \\\\\nD(t, d_{max}) &= [1 - \\{\\gamma_D(d_{max}) + \\nu(d_{max})\\}] D(t-1, d_{max}) + [1 - \\{\\alpha_D(d_{max}-1) + \\gamma_D(d_{max}-1) + \\nu(d_{max}-1)\\}] D(t-1, d_{max}-1) \\\\[10pt]\nI(t, 0) &= \\sum_{d=0}^{d_{max}} \\iota(d) D(t-1, d) \\\\\nI(t, d) &= \\left[1 - \\{\\alpha_I(d-1) + \\gamma_I(d-1) + \\nu(d-1)\\} \\right] I(t-1, d-1) \\\\\nI(t, d_{max}) &= [1 - \\{\\alpha_I(d_{max}) + \\gamma_I(d_{max}) + \\nu(d_{max})\\}] I(t-1, d_{max}) + [1 - \\{\\alpha_I(d_{max}-1) + \\gamma_I(d_{max}-1) + \\nu(d_{max}-1)\\}] I(t-1, d_{max}-1) \\\\[10pt]\nH(t, 0) &= \\sum_{d=0}^{d_{max}} \\nu(d) I(t-1, d) \\\\\nH(t, d) &= \\left[1 - \\{\\alpha_H(d-1) + \\gamma_H(d-1)\\right] H(t-1, d-1) \\\\\nH(t, d_{max}) &= [1 - \\{\\alpha_H(d_{max}) + \\gamma_H(d_{max})\\}] H(t-1, d_{max}) + [1 - \\{\\alpha_H(d_{max}-1) + \\gamma_H(d_{max}-1) \\}] H(t-1, d_{max}-1) \\\\[10pt]\nL(t) &= L(t-1) +  \\sum_{d=0}^{d_{max}} \\gamma_H(d) H(t-1, d) \\\\[10pt]\nR(t) &= R(t-1) + \\sum_{d=0}^{d_{max}} \\{ \\gamma_E(d) E(t-1, d) + \\gamma_D(d) D(t-1, d) + \\gamma_I(d) I(t-1, d) \\} \\\\[10pt]\nF(t) &= F(t-1) + \\sum_{d=0}^{d_{max}} \\{ \\alpha_I(d) I(t-1, d) + \\alpha_H(d) H(t-1, d) \\} \\\\[10pt]\n\\end{align*}","a1a34be1":"<h1>Table of Contents<span class=\"tocSkip\"><\/span><\/h1>\n<div class=\"toc\"><ul class=\"toc-item\"><li><span><a href=\"#Summary\" data-toc-modified-id=\"Summary-1\"><span class=\"toc-item-num\">1&nbsp;&nbsp;<\/span>Summary<\/a><\/span><\/li><li><span><a href=\"#Model\" data-toc-modified-id=\"Model-2\"><span class=\"toc-item-num\">2&nbsp;&nbsp;<\/span>Model<\/a><\/span><ul class=\"toc-item\"><li><ul class=\"toc-item\"><li><span><a href=\"#System-model:\" data-toc-modified-id=\"System-model:-2.0.1\"><span class=\"toc-item-num\">2.0.1&nbsp;&nbsp;<\/span>System model:<\/a><\/span><\/li><li><span><a href=\"#Observation-model:\" data-toc-modified-id=\"Observation-model:-2.0.2\"><span class=\"toc-item-num\">2.0.2&nbsp;&nbsp;<\/span>Observation model:<\/a><\/span><\/li><li><span><a href=\"#Constraints-in-parameters-and-initial-states:\" data-toc-modified-id=\"Constraints-in-parameters-and-initial-states:-2.0.3\"><span class=\"toc-item-num\">2.0.3&nbsp;&nbsp;<\/span>Constraints in parameters and initial states:<\/a><\/span><\/li><li><span><a href=\"#Effective-reproduction-number-$R_t$:\" data-toc-modified-id=\"Effective-reproduction-number-$R_t$:-2.0.4\"><span class=\"toc-item-num\">2.0.4&nbsp;&nbsp;<\/span>Effective reproduction number $R_t$:<\/a><\/span><\/li><\/ul><\/li><\/ul><\/li><li><span><a href=\"#Preparation\" data-toc-modified-id=\"Preparation-3\"><span class=\"toc-item-num\">3&nbsp;&nbsp;<\/span>Preparation<\/a><\/span><\/li><li><span><a href=\"#Stan-Code\" data-toc-modified-id=\"Stan-Code-4\"><span class=\"toc-item-num\">4&nbsp;&nbsp;<\/span>Stan Code<\/a><\/span><\/li><li><span><a href=\"#Inference\" data-toc-modified-id=\"Inference-5\"><span class=\"toc-item-num\">5&nbsp;&nbsp;<\/span>Inference<\/a><\/span><\/li><li><span><a href=\"#Visualization-of-the-inference\" data-toc-modified-id=\"Visualization-of-the-inference-6\"><span class=\"toc-item-num\">6&nbsp;&nbsp;<\/span>Visualization of the inference<\/a><\/span><ul class=\"toc-item\"><li><span><a href=\"#Parameters-along-days-in-the-state\" data-toc-modified-id=\"Parameters-along-days-in-the-state-6.1\"><span class=\"toc-item-num\">6.1&nbsp;&nbsp;<\/span>Parameters along days in the state<\/a><\/span><\/li><li><span><a href=\"#Inference-along-time-series\" data-toc-modified-id=\"Inference-along-time-series-6.2\"><span class=\"toc-item-num\">6.2&nbsp;&nbsp;<\/span>Inference along time series<\/a><\/span><\/li><\/ul><\/li><\/ul><\/div>","c3219f8a":"### Effective reproduction number $R_t$:  \nI defined effective reproduction number $R_t$ as expected number of reproduction of infectious patients($I$) by patients infected at $t$, assuming effective contact rate $\\beta(t)$ is fixed to the value at $t$.  \nNote that $R_t$ here includes effect of imported patients as returnees and foreigners.  \nEffective reproduction number is factorized as  \n$R_t = N^{-1} S(t) \\beta(t) \\tau $,  \nwhere $\\beta(t)$ is effective contact rate [day$^{-1}$] and $\\tau$ [day] is mean duration in the infectious($I$ and $H$) states.  \n\n$\\tau = \\frac { \\left( \\sum_{d_I=1}^{d_{max}} d_I \\{ \\alpha_2(d_I) + \\gamma_2(d_I) \\} +  \\sum_{d_I=1}^{d_{max}} \\sum_{d_H=1}^{d_{max}} (d_I + d_H) [ \\nu(d_I) \\{ \\alpha_3(d_H) + \\gamma_3(d_H) \\} ] \\right) } {Z}$,  \nwhere $Z$ is a normalization contant.  \n$Z = \\sum_{d_I=1}^{d_{max}} \\{ \\alpha_2(d_I) + \\gamma_2(d_I) \\} +  \\sum_{d_I=1}^{d_{max}} \\sum_{d_H=1}^{d_{max}} \\nu(d_I) \\{ (\\alpha_3(d_H) + \\gamma_3(d_H) \\} $.","cdd0c6af":"# Inference","980f8012":"### Constraints in parameters and initial states:  \n$0 < \\alpha_I < \\alpha_H < 10^{-2}$  \n$0 < p_d < 10^{-1}$  \n$D(0, d) < D(0, d-1)$  \n$E(0, d) < E(0, d-1)$  \n$I(0, d) < I(0, d-1)$  ","590f7e02":"## Inference along time series","8f083a00":"Total population of Japan (2019)","2697ece6":"## Parameters along days in the state","59cc36ef":"# Visualization of the inference","b016ccbd":"# Preparation","05be7922":"# Model\n### System model:  \n- State variable:  \n$t$: Elapsed time from the start date [day]  \n$d$: Days from infection (entry to exposed($E$) state) [day]  \n$S(t)$: Susceptible  \n$E(t, d)$: Exposed; infected but not detectable or infectious  \n$D(t, d)$: Detectable with PCR  \n$I(t, d)$: Infectious  \n$H(t, d)$: Hospitalized or waiting for hospitalization  \n$L(t)$: Left (discharged from) hospital  \n$R(t)$: Recovered without hospitalization  \n$F(t)$: Fatality  \n\n\\begin{align*}\n\\mathrm{S} \\overset{N^{-1} \\beta(t) (I + H)}{\\longrightarrow} &\\mathrm{E} \\overset{\\gamma_E(d)}{\\longrightarrow} \\mathrm{R} \\\\\n& \\mathrm{E} \\overset{\\chi(d)}{\\longrightarrow} && \\mathrm{D} \\overset{\\gamma_D(d)}{\\longrightarrow} \\mathrm{R} \\\\\n&&& \\mathrm{D} \\overset{\\iota(d)}{\\longrightarrow} && \\mathrm{I} \\overset{\\alpha_I(d)}{\\longrightarrow} \\mathrm{F} \\\\\n&&&&& \\mathrm{I} \\overset{\\gamma_I(d)}{\\longrightarrow} \\mathrm{R} \\\\\n&&&&& \\mathrm{I} \\overset{\\nu(d)}{\\longrightarrow} && \\mathrm{H} \\overset{\\alpha_H(d)}{\\longrightarrow} \\mathrm{F} \\\\\n&&&&&&& \\mathrm{H} \\overset{\\gamma_H(d)}{\\longrightarrow} \\mathrm{L} \\\\\n\\end{align*}\n\n- Transition rate among categorical state:  \n$\\beta(t)$: Effective contact rate [day$^{-1}$]  \n$\\gamma_E(d)$, $\\gamma_D(d)$, $\\gamma_I(d)$, $\\gamma_H(d)$: Recovery rate for the exposed($E$), detectable($D$), infectious($I$), and hospitalized($H$) [day$^{-1}$]  \n$\\alpha_I(d)$, $\\alpha_H(d)$: Mortality rate for the infectious($I$), and hospitalized($H$) [day$^{-1}$]  \n$\\chi(d)$: Transition rate from exposed($E$) to detectable($D$) state [day$^{-1}$]  \n$\\iota(d)$: Transition rate from detectable($D$) to infectious($I$) state [day$^{-1}$]  \n$\\nu(d)$: Transition rate from infectious($I$) to hospitalized($H$) state [day$^{-1}$]  \n\n- Constants:  \n$N$: Total population  \n$d_{max}$: Maximum considered $d$ (days elapsed from transition to the state)  \n\n- Other Parameters:  \n$v_\\beta$: Roughness of time evolution of effective contact rate  \n$v_r$: Roughness of change in transition rate except for those from hospitalized state  \n$v_d$: Roughness of change in detection rate by PCR for imputation  \nI do not assume smoothness for hospitalized patients in recovery and mortality along $d$ because roughness due to insituitional facotrs may exists.  ","f00c8db2":"### Observation model:  \n$P_{obs}(t) \\sim Poisson\\left( p_d(t) \\sum_{s=0}^{t} \\sum_{d=0}^{d_{max}} N^{-1} \\beta(s) S(s) \\{ I(s, d-1) + H(s, d-1) \\} \\right)$,  \nwhere $P_{obs}(t)$ is reported cumulative number of PCR-positive and $p_d(t)$ is detection rate of detectable patient.  \n\n$H_{obs}(t) \\sim Poisson\\left( H(t) \\right)$,  \nwhere $H_{obs}(t)$ is reported hospitalization.  \n\n$L_{obs}(t) \\sim Poisson\\left( L(t) \\right)$,  \nwhere $L_{obs}(t)$ is reported cumulative leave (discharge) from hospital.  \n\n$F_{obs}(t) \\sim Poisson\\left( \\sum_{s=0}^{t} \\sum_{d=0}^{d_{max}} p_f\\{ \\alpha_E(d) E(s, d) + \\alpha_D(d) D(s, d) + \\alpha_I(d) I(s, d) \\} + \\alpha_H(d) H(s, d) \\} \\right)$,  \nwhere $F_{obs}(t)$ is reported cumulative fatality and $p_f(t)$ is detection rate of fatality outside hospital.  ","79048ef8":"# Summary\n**See comments below for description of inference and discussions, as inference is not fully predictable before long run.**  \n- **Update on 2020-07-17:**  \n    - Corrected code on prior for smoothness of imputation for PCR-positive rate\n    - Increased sample size of gradient for better approximation by variational inference\n- **Update on 2020-07-16:**  \n    - Changed detection rate by PCR to be time-varying monotonically decreasing with positive rate of a coming week\n    - Corrected a mistake in implementation that sum of distribution of flow from infectious state is not 1.\n    - Removed fatality in exposed and detected state as it is not likely\n    - Dependence of recovery rate along time has deleted except for those in hospitals because it can be known inderectly from observaton only when effect of collective immunity is large.\n    - Distribution of transition rate along $d$ now shares common smoothness\n    - corrected caluculation of $R_t$ so as to include those not entered into infectious or hospitalized state  \n\n- Introduced features below to [SIRD model](https:\/\/en.wikipedia.org\/wiki\/Compartmental_models_in_epidemiology#The_SIRD_model) to predict future consequence of COVID-19 in Japan.\n    - time-varying effective contact rate per patient per day\n    - time-varying detection rate by PCR monotonically decreasing with positive rate of a coming week\n    - explicit delay in getting detectable, infectious, hospitalized, recovered and fatal\n    - separation of exposed, detectable, infectious and hospitalized state\n    - separation of recovery without hospitalization from discharge from hospital\n- Considered detection rate of infected patient by PCR and fatality as observation model of Bayesian state-space model.\n- Estimated parameters and observed and hidden states using Stan based on reported number of cumulative PCR-positive, hospitalized, cumulative discharge and cumulative fatality."}}