{"cell_type":{"85e9d56c":"code","a719e5fe":"code","1c2f4b50":"code","31092ca5":"code","dcc55079":"code","e9049bf9":"code","731018b9":"code","b837f503":"markdown","bf49b81b":"markdown","f9760ab1":"markdown","2ae12c00":"markdown"},"source":{"85e9d56c":"import matplotlib.pyplot as plt\nfrom IPython.display import clear_output\nfrom ipywidgets import interact, widgets\nimport networkx as nx\nimport numpy as np","a719e5fe":"button_add = widgets.Button(description=\"Add Node\")\nbutton_update = widgets.Button(description=\"Update Node\") \nrange_edge = widgets.IntSlider(description=\"Edge value between nodes\", continuous_update=True)\nbutton_distance = widgets.Button(description=\"Distance\") \n \noutput_graph = widgets.Output()\noutput_buttons = widgets.Output()\noutput_dropdowns = widgets.Output()\noutput_slider = widgets.Output()\noutput_matrix = widgets.Output()\noutput_matrix_m = widgets.Output()\noutput_matrix_r = widgets.Output()\noutput_distance = widgets.Output()\noutput_caldist = widgets.Output()\n \ngraph = nx.MultiDiGraph()\nnodes = []\nidx = 1\n \nmatrix = []\nmatrix_m = []\nmatrix_r = []\nxvalue = 1\nzvalue = 1\nwvalue = 0\n \ndef fw(v_start, v_end):\n  global matrix_r, matrix_m\n \n  v_start -= 1  \n  v_end -= 1\n  v_orig = v_start\n  plen = 0  \n \n  while (v_end != v_start):        \n    print('Caminho percorrido: ', end= ' ')\n    print(v_start + 1, ' -> ', end='')\n    v_start = int(matrix_r[v_start][v_end]) - 1              \n    print('Dist\u00e2ncia percorrida: ' , end=' ')\n    plen += matrix_m[v_start][v_end]  \n  \n  print(v_start + 1)\n  print(matrix_m[v_orig][v_end])\n \n \ndef floyd(G, b):\n  global idx  \n  distance = list(map(lambda i: list(map(lambda j: j, i)), G))    \n  travel = np.zeros((idx - 1, idx - 1))\n \n  for i in range(idx - 1):\n    travel[:, i] = i + 1\n \n  for k in range(idx-1):\n    for i in range(idx-1):\n      for j in range(idx-1):  \n        if distance[i][j] > (distance[i][k] + distance[k][j]):                    \n          distance[i][j] = distance[i][k] + distance[k][j]\n          travel[i][j] = k + 1\n  return distance if b else travel\n \ndef on_changew(change):  \n  global graph, wvalue\n  wvalue = change['new']  \n \ndef on_changex(change):  \n  global graph, xvalue\n  xvalue = change['new']  \n \ndef on_changez(change):  \n  global graph, zvalue\n  zvalue = change['new']  \n \ndef distance_nodes(x):\n  global graph, xvalue, zvalue, wvalue, matrix, matrix_m, matrix_r\n \n  with output_caldist:\n    clear_output()  \n    if len(nodes) > 1:\n      display(button_distance)\n \n    if xvalue != zvalue:\n      fw(xvalue, zvalue)\n \ndef update_node(x):\n  global graph, xvalue, zvalue, wvalue, matrix, matrix_m, matrix_r\n \n  with output_graph:\n    if xvalue != zvalue:\n      graph.add_edge(xvalue, zvalue, weight=wvalue)\n    clear_output()             \n    plt.show(nx.draw(graph))        \n \n  with output_matrix:\n    clear_output()\n    if xvalue != zvalue:      \n      matrix[xvalue-1][zvalue-1] = range_edge.value #wvalue\n \n    fig, ax = plt.subplots()    \n    ax.matshow(matrix, alpha=0)\n    ax.set_xticklabels([' '] + nodes)\n    ax.set_yticklabels([' '] + nodes)\n \n    for (i, j), z in np.ndenumerate(matrix):\n        ax.text(j, i, '{:0.0f}'.format(z), ha='center', va='center')        \n    plt.show()\n    \n  with output_matrix_r:\n    clear_output()\n    matrix_r = floyd(matrix, False)\n    fig_r, ax_r = plt.subplots()    \n    ax_r.matshow(matrix_r, alpha=0)\n    ax_r.set_xticklabels([' '] + nodes)\n    ax_r.set_yticklabels([' '] + nodes)\n \n    for (i, j), z in np.ndenumerate(matrix_r):\n        ax_r.text(j, i, '{:0.0f}'.format(z), ha='center', va='center')        \n    plt.show()\n    \n  with output_matrix_m:\n    clear_output()\n    matrix_m = floyd(matrix, True)\n    fig_m, ax_m = plt.subplots()    \n    ax_m.matshow(matrix_m, alpha=0)\n    ax_m.set_xticklabels([' '] + nodes)\n    ax_m.set_yticklabels([' '] + nodes)\n \n    for (i, j), z in np.ndenumerate(matrix_m):\n        ax_m.text(j, i, '{:0.0f}'.format(z), ha='center', va='center')        \n    plt.show()\n \n \ndef add_node(x):\n  global vertices, graph, idx, xvalue, zvalue\n \n  graph.add_node(idx)         \n  nodes.append(idx)\n  idx += 1\n \n  with output_buttons:\n    clear_output()  \n    if len(nodes) > 1:\n      display(button_update)\n \n  with output_dropdowns:    \n    clear_output()     \n    node_in = widgets.Dropdown(options=nodes, description=\"Node:\", continuous_update=True)\n    node_out = widgets.Dropdown(options=nodes, description=\"->:\", continuous_update=True)\n \n    display(node_in)\n    display(node_out)\n \n    node_in.observe(on_changex, 'value')\n    node_out.observe(on_changez, 'value')\n \n  with output_slider:\n    clear_output()       \n    display(range_edge)\n    range_edge.observe(on_changew, 'value')\n     \n \n  with output_graph:\n    clear_output()\n    plt.show(nx.draw(graph))\n \n  with output_matrix:    \n    global matrix\n    clear_output()\n \n    matrix = np.zeros((idx - 1, idx - 1))\n    matrix[:][:] = np.inf\n    for i in range(idx-1):\n      matrix[i][i] = 0\n    \n    fig, ax = plt.subplots()    \n    ax.matshow(matrix, alpha=0)\n    ax.set_xticklabels([' '] + nodes)\n    ax.set_yticklabels([' '] + nodes)\n \n    for (i, j), z in np.ndenumerate(matrix):\n        ax.text(j, i, '{:0.0f}'.format(z), ha='center', va='center')\n        \n    plt.show()\n    \n  with output_distance:    \n    clear_output()     \n    node_in = widgets.Dropdown(options=nodes, description=\"Node:\", continuous_update=True)\n    node_out = widgets.Dropdown(options=nodes, description=\"->:\", continuous_update=True)\n \n    display(node_in)\n    display(node_out)\n \n    node_in.observe(on_changex, 'value')\n    node_out.observe(on_changez, 'value')\n \n  with output_caldist:\n    clear_output()  \n    if len(nodes) > 1:\n      display(button_distance)\n \n \ndisplay(button_add)\ndisplay(output_dropdowns)\ndisplay(output_slider)\ndisplay(output_buttons)\n \nbutton_add.on_click(add_node)\nbutton_update.on_click(update_node)\nbutton_distance.on_click(distance_nodes)","1c2f4b50":"display(output_matrix)","31092ca5":"display(output_matrix_m)","dcc55079":"display(output_matrix_r)","e9049bf9":"display(output_distance)\ndisplay(output_caldist)","731018b9":"display(output_graph)","b837f503":"**Menor caminho e dist\u00e2ncia entre dois v\u00e9rtices**","bf49b81b":"**Matriz de menor dist\u00e2ncia**","f9760ab1":"**Matriz de menor caminho**","2ae12c00":"**Matriz de dist\u00e2ncia entre os V\u00e9rtices**"}}