{"cell_type":{"98cb1686":"code","37ea0c66":"code","b81212db":"code","38e104ef":"code","edc9bfde":"code","bb358252":"code","652f7838":"code","8152ce85":"code","9fcb9eac":"code","b48c347b":"code","6032c3e2":"code","5bbad439":"code","2ba18e2c":"code","e98c5f8c":"code","91e2eb9f":"code","449263d0":"code","13e9c42b":"code","96942e1b":"code","7dbc5499":"code","b4580895":"code","6c94d889":"code","c8414ad0":"code","3c837e6a":"code","6ab47108":"code","f9d8f39d":"code","22d4d336":"code","29f3c3bb":"code","a1f717e7":"markdown"},"source":{"98cb1686":"#Import all the necessary packages\nimport numpy as np \nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\nimport warnings\nwarnings.filterwarnings(\"ignore\")","37ea0c66":"#Read the dataset\ndata = pd.read_csv(\"..\/input\/car-price-prediction\/CarPrice_Assignment.csv\")","b81212db":"data.head()","38e104ef":"data.shape","edc9bfde":"data.info()","bb358252":"data.describe()","652f7838":"#Check the the data has any null values\ndata.isnull().sum()","8152ce85":"data.nunique()","9fcb9eac":"data.drop(['car_ID','CarName'], axis=1, inplace=True)","b48c347b":"#Check the correlation between each of the columns\ndata_corr = data.corr()\n#Better to visualize the correlation using a heatMap\nplt.figure(figsize=(14,7))\nsns.heatmap(data_corr,annot=True,cmap='coolwarm')","6032c3e2":"cat_cols= [col for col in data.columns if data[col].dtype=='object']\nnum_cols= [col for col in data.columns if data[col].dtype!='object']\nnum_cols.remove('price')\n","5bbad439":"data.head()","2ba18e2c":"sns.histplot(data=data, x=\"price\", hue=\"fueltype\")","e98c5f8c":"i=1\nplt.figure(figsize=(30,100))\nfor col in cat_cols:\n    plt.subplot(10,2,i)\n    sns.countplot(data[col])\n    plt.xticks(rotation=90, fontsize=15)\n    plt.yticks(fontsize=15)\n    plt.xlabel(col, fontsize=15)\n    plt.ylabel('count',fontsize=15)\n    \n    i+=1\n    plt.subplot(10,2,i)\n    sns.boxplot(x=data[col], y=data['price'])\n    plt.xticks(rotation=90, fontsize=15)\n    plt.yticks(fontsize=15)\n    plt.xlabel(col, fontsize=15)\n    plt.ylabel('price',fontsize=15)\n    i+=1\nplt.show()","91e2eb9f":"i=1\nplt.figure(figsize=(25,100))\nfor col in num_cols:\n    plt.subplot(16,2,i)\n    sns.distplot(data[col])\n    plt.xlabel(col,fontsize=15)\n    plt.xticks(fontsize=10)\n    i+=1\n    \n    plt.subplot(16,2,i)\n    sns.scatterplot(x=data[col], y=data['price'])\n    plt.xlabel(col,fontsize=15)\n    plt.xticks(fontsize=10)\n    plt.ylabel('price', fontsize=15)\n    plt.yticks(fontsize=10)\n    i+=1","449263d0":"from scipy import stats\n\n#num_columns = df.select_dtypes(exclude='object').columns\n\nfor i in list(num_cols):\n    pearson_coeff, p_value = stats.pearsonr(data[i], data['price'])\n    print(i.capitalize())\n    print(f'Pearson Co-relation: {pearson_coeff}')\n    print(f'P-Value: {p_value}')\n    if p_value<0.05:\n        print('Correlation is Significant')\n    else:\n        print('Correlation is Insignificant')\n    print('')","13e9c42b":"data.drop('symboling', axis=1, inplace=True)\nnum_cols.remove('symboling')","96942e1b":"data.head()","7dbc5499":"cat_cols","b4580895":"from sklearn.preprocessing import LabelEncoder\nle= LabelEncoder()\n\ndata[cat_cols]= data[cat_cols].apply(lambda x: le.fit_transform(x))","6c94d889":"data.head()","c8414ad0":"from sklearn.preprocessing import StandardScaler\n\nss=StandardScaler()\ndata[num_cols]= ss.fit_transform(data[num_cols])","3c837e6a":"data.head()","6ab47108":"from sklearn.model_selection import train_test_split\nfrom sklearn.linear_model import LinearRegression\nfrom sklearn.tree import DecisionTreeRegressor\nfrom sklearn.ensemble import RandomForestRegressor\nfrom sklearn.svm import SVR\nfrom xgboost import XGBRegressor\nfrom sklearn.ensemble import AdaBoostRegressor\nfrom sklearn.metrics import mean_squared_error, r2_score\n","f9d8f39d":"X= data.drop('price', axis=1)\ny=data['price']\n\nX_train,X_test,y_train,y_test= train_test_split(X,y,test_size=0.2, random_state= 42)","22d4d336":"def regression(X_train,X_test,y_train,y_test ):\n    lr= LinearRegression()\n    lr.fit(X_train,y_train)\n    y_pred= lr.predict(X_test)\n\n    rmse= (mean_squared_error(y_test,y_pred))**(1\/2)\n    r2= r2_score(y_test,y_pred)\n\n    print(\"Linear Regression REMSE :\" , rmse)\n    print(\"Linear Regression R2 :\" ,r2)\n    print(\"\\n\")\n    \n    dt= DecisionTreeRegressor(criterion='mse', splitter='best', max_depth=100, min_samples_leaf= 5, random_state=42)\n    dt.fit(X_train,y_train)\n    y_pred= dt.predict(X_test)\n\n    rmse_train= (mean_squared_error(dt.predict(X_train),y_train))**(1\/2)\n    rmse= (mean_squared_error(y_test,y_pred))**(1\/2)\n    r2= r2_score(y_test,y_pred)\n    print(\"Decision Tree Regressor RMSE train :\",rmse_train)\n    print(\"Decision Tree Regressor RMSE :\",rmse)\n    print(\"Decision Tree Regressor R2 :\",r2)\n    print(\"\\n\")\n    \n    rf= RandomForestRegressor(max_depth=10, criterion='mse', min_samples_leaf=2, random_state=42, verbose=1)\n    rf.fit(X_train,y_train)\n    y_pred= rf.predict(X_test)\n    rmse_train= (mean_squared_error(rf.predict(X_train),y_train))**(1\/2)\n    rmse= (mean_squared_error(y_test,y_pred))**(1\/2)\n    r2= r2_score(y_test,y_pred)\n    print(\"Random Forest Regressor RMSE train :\",rmse_train)\n    print(\"Random Forest Regressor RMSE :\",rmse)\n    print(\"Random Forest Regressor R2 :\",r2)\n    print(\"\\n\")\n    \n    regressor = SVR(kernel='rbf')\n    regressor.fit(X_train,y_train)\n    mse_train= (mean_squared_error(rf.predict(X_train),y_train))**(1\/2)\n    rmse= (mean_squared_error(y_test,y_pred))**(1\/2)\n    r2= r2_score(y_test,y_pred)\n    print(\"Support Vector Regressor RMSE train :\",rmse_train)\n    print(\"Support Vector Regressor RMSE :\",rmse)\n    print(\"Support Vector Regressor R2 :\",r2)\n    print(\"\\n\")\n    \n    \n    xgb= XGBRegressor()\n    xgb.fit(X_train, y_train)\n    y_pred= xgb.predict(X_test)\n    rmse_train= (mean_squared_error(xgb.predict(X_train),y_train))**(1\/2)\n    rmse= (mean_squared_error(y_test,y_pred))**(1\/2)\n    r2= r2_score(y_test,y_pred)\n    print(\"XG Regressor RMSE train :\",rmse_train)\n    print(\"XG Regressor RMSE  :\",rmse)\n    print(\"XG Regressor R2 :\",r2)\n    print(\"\\n\")\n    \n    model_ABR = AdaBoostRegressor()\n    model_ABR.fit(X_train, y_train)\n    rmse_train= (mean_squared_error(xgb.predict(X_train),y_train))**(1\/2)\n    rmse= (mean_squared_error(y_test,y_pred))**(1\/2)\n    r2= r2_score(y_test,y_pred)\n    print(\"Ada Boots Regressor RMSE train :\",rmse_train)\n    print(\"Ada Boots Regressor RMSE  :\",rmse)\n    print(\"Ada Boots Regressor R2 :\",r2)\n    \n    ","29f3c3bb":"regression(X_train,X_test,y_train,y_test)","a1f717e7":"## **Data Preprocessing**"}}