{"cell_type":{"b19db10e":"code","2a521eef":"code","fb8b277a":"code","6b5bde46":"code","99c9c59d":"code","fa9fc173":"code","ce8bca84":"code","3041775d":"code","f771fdfa":"code","385261ea":"code","c2ebc75f":"code","6413edc4":"code","5085d632":"code","9ca398c3":"code","f3a82383":"code","d1ed54f3":"code","e371a94b":"code","f1a9a8e0":"code","b4a1d5ab":"code","6e8534ea":"code","e369438a":"code","744bd3f7":"code","34900fdb":"code","f8935dc8":"code","f8bbd3b6":"code","b5154876":"code","8e16b9b3":"code","c33155d4":"code","e53e363f":"code","fc4e436a":"code","45e4ab38":"code","d2d84606":"code","f5d0a3ed":"code","c6b16121":"code","e293a894":"code","8258127f":"code","14f24541":"code","0ad2d385":"code","1037e3ea":"code","1f1cf119":"code","0b5e83a2":"code","9beb4f08":"code","a8b943c6":"code","5b53cc41":"code","c89b2c41":"code","f52d31b4":"code","f29c100a":"code","0f831c5f":"code","e34a2c11":"code","412ba65a":"code","04d57058":"code","e071c681":"code","b1f9e25c":"code","a8dfd8d6":"code","3e474d49":"code","f268637c":"code","ebea73c3":"code","15d98588":"code","48194f53":"code","0e45ec75":"code","050fa8fd":"code","2d07c4e9":"code","8e16498a":"code","0dfbd36c":"code","ecf85e89":"code","457a1de2":"code","fb96c429":"code","c5eb5a35":"code","da8addee":"code","fc5663e1":"code","dd0eb62d":"code","bf956654":"code","49f242e2":"code","92307ff4":"code","016d2eb4":"code","d960ae09":"code","7a6c9076":"code","7955d880":"code","da6fa9b4":"code","17aa8b49":"code","d5be0363":"code","3325c183":"code","bb111705":"code","194f0eaa":"code","3310091e":"code","c99883ff":"code","808fb3ca":"code","76c1703d":"code","67427f64":"code","50818fcc":"code","a97865ee":"code","d5467224":"code","dcc7c5a9":"code","86362137":"code","68a2730e":"code","3cd51f3f":"code","6218219a":"code","3718c5f8":"code","f25ada59":"code","9559a888":"code","887f0b54":"code","82b55d18":"code","cdc001c0":"code","d60128d5":"code","c416197b":"code","7ecd6c19":"code","dc846b77":"code","ff0a640b":"code","479b127d":"code","80e0fd5b":"code","6f968fab":"code","dcd52337":"markdown","ce8e6855":"markdown","2121e7fb":"markdown","97c94a79":"markdown","483992b4":"markdown","d15a4f67":"markdown","56a4587a":"markdown","0195889f":"markdown","f742a63f":"markdown","41504717":"markdown","0d5c45c6":"markdown","fd1fc5e7":"markdown","f8c63a0c":"markdown","d537c9e1":"markdown","59c3c43a":"markdown","009532f7":"markdown","385cd9a3":"markdown","120fa6bb":"markdown","8bca305e":"markdown","d5d5ee4f":"markdown","a41a6b5a":"markdown","af818dde":"markdown","42d37fcc":"markdown","f322074c":"markdown","23e8296e":"markdown","2b08eedf":"markdown","ab255266":"markdown","7890731c":"markdown","c2116336":"markdown","1b3b89b1":"markdown","810abc92":"markdown","865e8cb7":"markdown","707a4a7b":"markdown","22e09215":"markdown","1eef463f":"markdown","0dfbef7c":"markdown","5af00d69":"markdown","ec3be29b":"markdown","7fdea9f0":"markdown","0ee98ab5":"markdown","854dc0a0":"markdown","cb3f9737":"markdown","3c921f14":"markdown","a7660619":"markdown","5cf5a9e5":"markdown","fd819919":"markdown","a6366e3d":"markdown","60dc04ce":"markdown","2bf89c6c":"markdown","cdc51152":"markdown","aa723fff":"markdown","0475d2c7":"markdown","0f701220":"markdown","5b1b4db1":"markdown","52179c4a":"markdown","f3fb3ae1":"markdown","ecf91f53":"markdown","b8e43cb3":"markdown","14767790":"markdown","f4107e1c":"markdown","98392ef7":"markdown","c662c588":"markdown","285eb741":"markdown","fea3c506":"markdown","d3e1cfdc":"markdown","4b01dcb9":"markdown","235674aa":"markdown","2bc9bfef":"markdown","9cab3e44":"markdown","f2e6f0a8":"markdown","ebf33129":"markdown","628054f9":"markdown","b403d767":"markdown","d6528e08":"markdown","3bfeb581":"markdown","e4f98e7c":"markdown","502abc36":"markdown","e9416a3e":"markdown","33155bcf":"markdown","597f7818":"markdown","554471e6":"markdown","c3913db9":"markdown","34f599ca":"markdown","810487fe":"markdown","a5390066":"markdown","95c898a0":"markdown","a89656ab":"markdown","eaa51797":"markdown","d15e83eb":"markdown","0537e02a":"markdown","1d01d68b":"markdown","af3f8eb8":"markdown","23bd6a25":"markdown","8c4a30ab":"markdown","94842c97":"markdown","bb142693":"markdown","8edebce1":"markdown","28001c56":"markdown"},"source":{"b19db10e":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","2a521eef":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns","fb8b277a":"from datetime import datetime\n\nfrom sklearn.model_selection import train_test_split\n\nfrom sklearn.naive_bayes import GaussianNB\nfrom sklearn.naive_bayes import BernoulliNB\nfrom sklearn.svm import SVC\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.linear_model import LogisticRegression\n\nfrom sklearn.metrics import r2_score\nfrom sklearn.metrics import accuracy_score\n\nfrom sklearn.model_selection import GridSearchCV\nfrom sklearn.model_selection import KFold\nfrom sklearn.model_selection import cross_val_score\n\nfrom sklearn.decomposition import PCA\nfrom sklearn.manifold import TSNE\n\nfrom sklearn.ensemble import RandomForestClassifier\n\nfrom catboost import CatBoostClassifier","6b5bde46":"def get_data(limit=None):\n    df = pd.read_csv('jds101\/fashion-mnist_train.csv')\n    data = df.values\n    np.random.shuffle(data)\n    X = data[:, 1:] \/ 255.0 # data is from 0..255\n    Y = data[:, 0]\n    if limit is not None:\n        X, Y = X[:limit], Y[:limit]\n    return X, Y\n\nif __name__ == '__main__':\n    X, Y = get_data(60000)\n    Xtrain, Xtest, Ytrain, Ytest = train_test_split(X, Y, test_size=0.2, random_state=42)\n\n","99c9c59d":"cv_scores=[]\nfor k in range(1,9):\n    knn = KNeighborsClassifier(n_neighbors=k)\n    knn.fit(Xtrain, Ytrain)\n    scores = knn.score(Xtest,Ytest)\n    cv_scores.append([k, scores.mean(),scores.std()])\ndf_scores = pd.DataFrame(cv_scores, columns=['k', 'ACCURACY', 'STD'])","fa9fc173":"sns.lineplot(x=\"k\", y=\"ACCURACY\", data=df_scores)","ce8bca84":"new_test = pd.read_csv('jds101\/new_test.csv')\nnew_test=new_test\/255","3041775d":"knn = KNeighborsClassifier(n_neighbors=4)\nknn.fit(Xtrain, Ytrain)","f771fdfa":"pred = knn.predict(new_test)","385261ea":"pred1 = pd.DataFrame(np.array(pred), columns=['label'],index=new_test.index)","c2ebc75f":"pred1['id']=range(1,10001)\npred1","6413edc4":"pred1.to_csv('pred1.csv', index=False)","5085d632":"names = ['DecisionTreeClassifier', 'LogisticRegression','GaussianNB', 'BernoulliNB', 'SVC', 'KNN']\n\nclf_list = [DecisionTreeClassifier(max_depth=10, ccp_alpha = 0.005),\n            LogisticRegression(C=0.1),\n            GaussianNB(),\n            BernoulliNB(alpha=0.01),\n            SVC(kernel = 'poly', degree = 1, C = 10, gamma = 0.001),\n            KNeighborsClassifier(n_neighbors=4)\n           ]","9ca398c3":"for name, clf in zip(names, clf_list):\n        t0 = datetime.now()\n        clf.fit(Xtrain, Ytrain)\n        print(name, end=': ')\n        print(clf.score(Xtest, Ytest), \"Time:\", (datetime.now() - t0))","f3a82383":"pred_logreg = clf_list[1].predict(new_test)\n\npred_logreg = pd.DataFrame(np.array(pred_logreg), columns=['label'])\n\npred_logreg['id']=range(1,10001)\n\npred_logreg.to_csv('pred.csv', index=False)","d1ed54f3":"pred_svc = clf_list[4].predict(new_test)\n\npred_svc= pd.DataFrame(np.array(pred_svc), columns=['label'])\n\npred_svc['id']=range(1,10001)\n\npred_svc.to_csv('pred.csv', index=False)","e371a94b":"pca = PCA()\nX_pca = pd.DataFrame(pca.fit_transform(X))","f1a9a8e0":"(X_pca.var()\/X_pca.var().sum()).cumsum().head(155)","b4a1d5ab":"X_pca = pca.transform(X)[:,:155]\nX_pca.shape","6e8534ea":"Xtrain_pca, Xtest_pca, Ytrain_pca, Ytest_pca = train_test_split(X_pca, Y, test_size=0.2, random_state=42)","e369438a":"svc = SVC(kernel = 'poly', degree = 1, C = 10, gamma = 0.001)\nsvc.fit(Xtrain_pca, Ytrain_pca)","744bd3f7":"print(svc.score(Xtest_pca, Ytest_pca))","34900fdb":"new_test_pca = pca.transform(new_test)[:,:155]","f8935dc8":"pred_pca = svc.predict(new_test_pca)","f8bbd3b6":"pred1_pca = pd.DataFrame(np.array(pred_pca), columns=['label'])","b5154876":"pred1_pca['id']=range(1,10001)","8e16b9b3":"pred1_pca.to_csv('pred1_pca.csv', index=False)","c33155d4":"cv_scores=[]\nt0 = datetime.now()\nfor k in range(1,16):\n    knn = KNeighborsClassifier(n_neighbors=k)\n    knn.fit(Xtrain_pca, Ytrain_pca)\n    scores = knn.score(Xtest_pca,Ytest_pca)\n    cv_scores.append([k, scores.mean(),scores.std()])\ndf_scores = pd.DataFrame(cv_scores, columns=['k', 'ACCURACY', 'STD'])\nprint(\"Time:\", (datetime.now() - t0))","e53e363f":"sns.lineplot(x=\"k\", y=\"ACCURACY\", data=df_scores)\ndf_scores","fc4e436a":"pred_pca_knn8 = knn.predict(new_test_pca)\n\npred_pca_knn8 = pd.DataFrame(np.array(pred_pca_knn8), columns=['label'])\n\npred_pca_knn8['id']=range(1,10001)\n\npred_pca_knn8.to_csv('pred_pca_knn8.csv', index=False)","45e4ab38":"for n in range(50,250,50):\n    X_pca = pca.transform(X)[:,:n]\n    Xtrain_pca, Xtest_pca, Ytrain_pca, Ytest_pca = train_test_split(X_pca, Y, test_size=0.2, random_state=42)\n    knn = KNeighborsClassifier(n_neighbors=8)\n    knn.fit(Xtrain_pca, Ytrain_pca)\n    print(n, \"components\" , end=': ')\n    print(knn.score(Xtest_pca, Ytest_pca))","d2d84606":"RF = RandomForestClassifier(criterion='entropy', max_depth=50, n_estimators = 300, random_state=0)","f5d0a3ed":"Xtrain, Xtest, Ytrain, Ytest = train_test_split(X, Y, test_size=0.2, random_state=42)\nRF.fit(Xtrain, Ytrain)","c6b16121":"RF.score(Xtest,Ytest)","e293a894":"pred_RF = RF.predict(new_test)\npred_RF = pd.DataFrame(np.array(pred_RF), columns=['label'])\n\npred_RF['id']=range(1,10001)\n\npred_RF.to_csv('pred_RF.csv', index=False)","8258127f":"cat = CatBoostClassifier(iterations = 1500)","14f24541":"Xtrain, Xtest, Ytrain, Ytest = train_test_split(X, Y, test_size=0.2, random_state=42)\ncat.fit(Xtrain, Ytrain)","0ad2d385":"cat.score(Xtest,Ytest)","1037e3ea":"pred_cat = cat.predict(new_test)\npred_cat = pd.DataFrame(np.array(pred_cat), columns=['label'])\n\npred_cat['id']=range(1,10001)\n\npred_cat.to_csv('pred_cat.csv', index=False)","1f1cf119":"Xtrain1, Xtest1, Ytrain1, Ytest1 = train_test_split(X_pca, Y, test_size=0.2, random_state=42)\ncat.fit(Xtrain1, Ytrain1)","0b5e83a2":"cat.score(Xtest1,Ytest1)","9beb4f08":"X_tsne = TSNE(random_state=42).fit_transform(X)\nX_tsne.shape   ","a8b943c6":"import matplotlib.patheffects as PathEffects\ndef scatter(x, colors):\n    classes = ['T-shirt\/top', 'Trouser', 'Pullover', 'Dress', 'Coat', 'Sandal', 'Shirt', 'Sneaker', 'Bag', 'Ankle boot']\n    \n    # choose a color palette with seaborn.\n    num_classes = len(np.unique(colors))\n    palette = np.array(sns.color_palette(\"hls\", num_classes))\n\n    # create a scatter plot.\n    f = plt.figure(figsize=(8, 8))\n    ax = plt.subplot(aspect='equal')\n    sc = ax.scatter(x[:,0], x[:,1], lw=0, s=40, c=palette[colors.astype(np.int)])\n    plt.xlim(-25, 25)\n    plt.ylim(-25, 25)\n    ax.axis('off')\n    ax.axis('tight')\n\n    # add the labels for each digit corresponding to the label\n    txts = []\n\n    for i in range(num_classes):\n\n        # Position of each label at median of data points.\n\n        xtext, ytext = np.median(x[colors == i, :], axis=0)\n        txt = ax.text(xtext, ytext, str(classes[i]), fontsize=24)\n        txt.set_path_effects([\n            PathEffects.Stroke(linewidth=5, foreground=\"w\"),\n            PathEffects.Normal()])\n        txts.append(txt)\n\n    return f, ax, sc, txts","5b53cc41":"scatter(X_tsne, Y)","c89b2c41":"Xtrain_tsne, Xtest_tsne, Ytrain_tsne, Ytest_tsne = train_test_split(X_tsne, Y, test_size=0.2, random_state=42)\ncat.fit(Xtrain_tsne, Ytrain_tsne)","f52d31b4":"cat.score(Xtest_tsne,Ytest_tsne)","f29c100a":"X_pca_tsne = TSNE(random_state=42).fit_transform(X_pca)\nX_pca_tsne.shape  ","0f831c5f":"scatter(X_pca_tsne, Y)","e34a2c11":"X_pca2 = pca.transform(X)[:,:2]\nX_pca2.shape","412ba65a":"scatter(X_pca2, Y)","04d57058":"Xsample, __, Ysample, __ = train_test_split(Xtrain, Ytrain, test_size=0.9, random_state=42)","e071c681":"Xsample.shape","b1f9e25c":"Xsample_train, Xsample_test, Ysample_train, Ysample_test = train_test_split(Xsample, Ysample, test_size=0.2, random_state=42)","a8dfd8d6":"clf = DecisionTreeClassifier(random_state=0)\npath = clf.cost_complexity_pruning_path(Xsample_train, Ysample_train)\nccp_alphas, impurities = path.ccp_alphas, path.impurities","3e474d49":"clfs = []\nfor ccp_alpha in ccp_alphas:\n    clf = DecisionTreeClassifier(random_state=0, ccp_alpha=ccp_alpha)\n    clf.fit(Xsample_train, Ysample_train)\n    clfs.append(clf)\nprint(\"Number of nodes in the last tree is: {} with ccp_alpha: {}\".format(\n      clfs[-1].tree_.node_count, ccp_alphas[-1]))","f268637c":"train_scores = [clf.score(Xsample_train, Ysample_train) for clf in clfs]\ntest_scores = [clf.score(Xsample_test, Ysample_test) for clf in clfs]\n\nfig, ax = plt.subplots()\nax.set_xlabel(\"alpha\")\nax.set_ylabel(\"accuracy\")\nax.set_title(\"Accuracy vs alpha for training and testing sets\")\nax.plot(ccp_alphas, train_scores, marker='o', label=\"train\",\n        drawstyle=\"steps-post\")\nax.plot(ccp_alphas, test_scores, marker='o', label=\"test\",\n        drawstyle=\"steps-post\")\nax.legend()\nplt.show()","ebea73c3":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns","15d98588":"from datetime import datetime\n\nfrom sklearn.model_selection import train_test_split\n\nfrom sklearn.naive_bayes import GaussianNB\nfrom sklearn.naive_bayes import BernoulliNB\nfrom sklearn.svm import SVC\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.linear_model import LogisticRegression\n\nfrom sklearn.metrics import r2_score\nfrom sklearn.metrics import accuracy_score\n\nfrom sklearn.model_selection import GridSearchCV\nfrom sklearn.model_selection import KFold\nfrom sklearn.model_selection import cross_val_score\n\nfrom sklearn.decomposition import PCA\nfrom sklearn.manifold import TSNE\n\nfrom sklearn.ensemble import RandomForestClassifier\n\nfrom catboost import CatBoostClassifier","48194f53":"def get_data(limit=None):\n    df = pd.read_csv('jds101\/fashion-mnist_train.csv')\n    data = df.values\n    np.random.shuffle(data)\n    X = data[:, 1:] \/ 255.0 # data is from 0..255\n    Y = data[:, 0]\n    if limit is not None:\n        X, Y = X[:limit], Y[:limit]\n    return X, Y\n\nif __name__ == '__main__':\n    X, Y = get_data(60000)\n    Xtrain, Xtest, Ytrain, Ytest = train_test_split(X, Y, test_size=0.2, random_state=42)\n\n","0e45ec75":"cv_scores=[]\nfor k in range(1,9):\n    knn = KNeighborsClassifier(n_neighbors=k)\n    knn.fit(Xtrain, Ytrain)\n    scores = knn.score(Xtest,Ytest)\n    cv_scores.append([k, scores.mean(),scores.std()])\ndf_scores = pd.DataFrame(cv_scores, columns=['k', 'ACCURACY', 'STD'])","050fa8fd":"sns.lineplot(x=\"k\", y=\"ACCURACY\", data=df_scores)","2d07c4e9":"new_test = pd.read_csv('jds101\/new_test.csv')\nnew_test=new_test\/255","8e16498a":"knn = KNeighborsClassifier(n_neighbors=4)\nknn.fit(Xtrain, Ytrain)","0dfbd36c":"pred = knn.predict(new_test)","ecf85e89":"pred1 = pd.DataFrame(np.array(pred), columns=['label'],index=new_test.index)","457a1de2":"pred1['id']=range(1,10001)\npred1","fb96c429":"pred1.to_csv('pred1.csv', index=False)","c5eb5a35":"names = ['DecisionTreeClassifier', 'LogisticRegression','GaussianNB', 'BernoulliNB', 'SVC', 'KNN']\n\nclf_list = [DecisionTreeClassifier(max_depth=10, ccp_alpha = 0.005),\n            LogisticRegression(C=0.1),\n            GaussianNB(),\n            BernoulliNB(alpha=0.01),\n            SVC(kernel = 'poly', degree = 1, C = 10, gamma = 0.001),\n            KNeighborsClassifier(n_neighbors=4)\n           ]","da8addee":"for name, clf in zip(names, clf_list):\n        t0 = datetime.now()\n        clf.fit(Xtrain, Ytrain)\n        print(name, end=': ')\n        print(clf.score(Xtest, Ytest), \"Time:\", (datetime.now() - t0))","fc5663e1":"pred_logreg = clf_list[1].predict(new_test)\n\npred_logreg = pd.DataFrame(np.array(pred_logreg), columns=['label'])\n\npred_logreg['id']=range(1,10001)\n\npred_logreg.to_csv('pred.csv', index=False)","dd0eb62d":"pred_svc = clf_list[4].predict(new_test)\n\npred_svc= pd.DataFrame(np.array(pred_svc), columns=['label'])\n\npred_svc['id']=range(1,10001)\n\npred_svc.to_csv('pred.csv', index=False)","bf956654":"pca = PCA()\nX_pca = pd.DataFrame(pca.fit_transform(X))","49f242e2":"(X_pca.var()\/X_pca.var().sum()).cumsum().head(155)","92307ff4":"X_pca = pca.transform(X)[:,:155]\nX_pca.shape","016d2eb4":"Xtrain_pca, Xtest_pca, Ytrain_pca, Ytest_pca = train_test_split(X_pca, Y, test_size=0.2, random_state=42)","d960ae09":"svc = SVC(kernel = 'poly', degree = 1, C = 10, gamma = 0.001)\nsvc.fit(Xtrain_pca, Ytrain_pca)","7a6c9076":"print(svc.score(Xtest_pca, Ytest_pca))","7955d880":"new_test_pca = pca.transform(new_test)[:,:155]","da6fa9b4":"pred_pca = svc.predict(new_test_pca)","17aa8b49":"pred1_pca = pd.DataFrame(np.array(pred_pca), columns=['label'])","d5be0363":"pred1_pca['id']=range(1,10001)","3325c183":"pred1_pca.to_csv('pred1_pca.csv', index=False)","bb111705":"cv_scores=[]\nt0 = datetime.now()\nfor k in range(1,16):\n    knn = KNeighborsClassifier(n_neighbors=k)\n    knn.fit(Xtrain_pca, Ytrain_pca)\n    scores = knn.score(Xtest_pca,Ytest_pca)\n    cv_scores.append([k, scores.mean(),scores.std()])\ndf_scores = pd.DataFrame(cv_scores, columns=['k', 'ACCURACY', 'STD'])\nprint(\"Time:\", (datetime.now() - t0))","194f0eaa":"sns.lineplot(x=\"k\", y=\"ACCURACY\", data=df_scores)\ndf_scores","3310091e":"pred_pca_knn8 = knn.predict(new_test_pca)\n\npred_pca_knn8 = pd.DataFrame(np.array(pred_pca_knn8), columns=['label'])\n\npred_pca_knn8['id']=range(1,10001)\n\npred_pca_knn8.to_csv('pred_pca_knn8.csv', index=False)","c99883ff":"for n in range(50,250,50):\n    X_pca = pca.transform(X)[:,:n]\n    Xtrain_pca, Xtest_pca, Ytrain_pca, Ytest_pca = train_test_split(X_pca, Y, test_size=0.2, random_state=42)\n    knn = KNeighborsClassifier(n_neighbors=8)\n    knn.fit(Xtrain_pca, Ytrain_pca)\n    print(n, \"components\" , end=': ')\n    print(knn.score(Xtest_pca, Ytest_pca))","808fb3ca":"RF = RandomForestClassifier(criterion='entropy', max_depth=50, n_estimators = 300, random_state=0)","76c1703d":"Xtrain, Xtest, Ytrain, Ytest = train_test_split(X, Y, test_size=0.2, random_state=42)\nRF.fit(Xtrain, Ytrain)","67427f64":"RF.score(Xtest,Ytest)","50818fcc":"pred_RF = RF.predict(new_test)\npred_RF = pd.DataFrame(np.array(pred_RF), columns=['label'])\n\npred_RF['id']=range(1,10001)\n\npred_RF.to_csv('pred_RF.csv', index=False)","a97865ee":"cat = CatBoostClassifier(iterations = 1500)","d5467224":"Xtrain, Xtest, Ytrain, Ytest = train_test_split(X, Y, test_size=0.2, random_state=42)\ncat.fit(Xtrain, Ytrain)","dcc7c5a9":"cat.score(Xtest,Ytest)","86362137":"pred_cat = cat.predict(new_test)\npred_cat = pd.DataFrame(np.array(pred_cat), columns=['label'])\n\npred_cat['id']=range(1,10001)\n\npred_cat.to_csv('pred_cat.csv', index=False)","68a2730e":"Xtrain1, Xtest1, Ytrain1, Ytest1 = train_test_split(X_pca, Y, test_size=0.2, random_state=42)\ncat.fit(Xtrain1, Ytrain1)","3cd51f3f":"cat.score(Xtest1,Ytest1)","6218219a":"X_tsne = TSNE(random_state=42).fit_transform(X)\nX_tsne.shape   ","3718c5f8":"import matplotlib.patheffects as PathEffects\ndef scatter(x, colors):\n    classes = ['T-shirt\/top', 'Trouser', 'Pullover', 'Dress', 'Coat', 'Sandal', 'Shirt', 'Sneaker', 'Bag', 'Ankle boot']\n    \n    # choose a color palette with seaborn.\n    num_classes = len(np.unique(colors))\n    palette = np.array(sns.color_palette(\"hls\", num_classes))\n\n    # create a scatter plot.\n    f = plt.figure(figsize=(8, 8))\n    ax = plt.subplot(aspect='equal')\n    sc = ax.scatter(x[:,0], x[:,1], lw=0, s=40, c=palette[colors.astype(np.int)])\n    plt.xlim(-25, 25)\n    plt.ylim(-25, 25)\n    ax.axis('off')\n    ax.axis('tight')\n\n    # add the labels for each digit corresponding to the label\n    txts = []\n\n    for i in range(num_classes):\n\n        # Position of each label at median of data points.\n\n        xtext, ytext = np.median(x[colors == i, :], axis=0)\n        txt = ax.text(xtext, ytext, str(classes[i]), fontsize=24)\n        txt.set_path_effects([\n            PathEffects.Stroke(linewidth=5, foreground=\"w\"),\n            PathEffects.Normal()])\n        txts.append(txt)\n\n    return f, ax, sc, txts","f25ada59":"scatter(X_tsne, Y)","9559a888":"Xtrain_tsne, Xtest_tsne, Ytrain_tsne, Ytest_tsne = train_test_split(X_tsne, Y, test_size=0.2, random_state=42)\ncat.fit(Xtrain_tsne, Ytrain_tsne)","887f0b54":"cat.score(Xtest_tsne,Ytest_tsne)","82b55d18":"X_pca_tsne = TSNE(random_state=42).fit_transform(X_pca)\nX_pca_tsne.shape  ","cdc001c0":"scatter(X_pca_tsne, Y)","d60128d5":"X_pca2 = pca.transform(X)[:,:2]\nX_pca2.shape","c416197b":"scatter(X_pca2, Y)","7ecd6c19":"Xsample, __, Ysample, __ = train_test_split(Xtrain, Ytrain, test_size=0.9, random_state=42)","dc846b77":"Xsample.shape","ff0a640b":"Xsample_train, Xsample_test, Ysample_train, Ysample_test = train_test_split(Xsample, Ysample, test_size=0.2, random_state=42)","479b127d":"clf = DecisionTreeClassifier(random_state=0)\npath = clf.cost_complexity_pruning_path(Xsample_train, Ysample_train)\nccp_alphas, impurities = path.ccp_alphas, path.impurities","80e0fd5b":"clfs = []\nfor ccp_alpha in ccp_alphas:\n    clf = DecisionTreeClassifier(random_state=0, ccp_alpha=ccp_alpha)\n    clf.fit(Xsample_train, Ysample_train)\n    clfs.append(clf)\nprint(\"Number of nodes in the last tree is: {} with ccp_alpha: {}\".format(\n      clfs[-1].tree_.node_count, ccp_alphas[-1]))","6f968fab":"train_scores = [clf.score(Xsample_train, Ysample_train) for clf in clfs]\ntest_scores = [clf.score(Xsample_test, Ysample_test) for clf in clfs]\n\nfig, ax = plt.subplots()\nax.set_xlabel(\"alpha\")\nax.set_ylabel(\"accuracy\")\nax.set_title(\"Accuracy vs alpha for training and testing sets\")\nax.plot(ccp_alphas, train_scores, marker='o', label=\"train\",\n        drawstyle=\"steps-post\")\nax.plot(ccp_alphas, test_scores, marker='o', label=\"test\",\n        drawstyle=\"steps-post\")\nax.legend()\nplt.show()","dcd52337":"### 6. \u0421\u043d\u0438\u0436\u0435\u043d\u0438\u0435 \u0440\u0430\u0437\u043c\u0435\u0440\u043d\u043e\u0441\u0442\u0438 (t-SNE)","ce8e6855":"### 3. \u0421\u043d\u0438\u0436\u0435\u043d\u0438\u0435 \u0440\u0430\u0437\u043c\u0435\u0440\u043d\u043e\u0441\u0442\u0438 (PCA)","2121e7fb":"\u0415\u0449\u0435 \u044f \u043f\u044b\u0442\u0430\u043b\u0430\u0441\u044c \u043f\u043e\u0434\u043e\u0431\u0440\u0430\u0442\u044c ccp_alpha \u0434\u043b\u044f \u0434\u0435\u0440\u0435\u0432\u0430 \u0440\u0435\u0448\u0435\u043d\u0438\u0439, \u043d\u043e \u0442\u0430\u043c \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442 \u043f\u043e\u043b\u0443\u0447\u0430\u0435\u0442\u0441\u044f \u0433\u043e\u0440\u0430\u0437\u0434\u043e \u0445\u0443\u0436\u0435. \u0427\u0442\u043e\u0431\u044b \u0432\u044b\u0447\u0438\u0441\u043b\u0435\u043d\u0438\u044f \u043f\u0440\u043e\u0448\u043b\u0438 \u0431\u044b\u0441\u0442\u0440\u0435\u0435 \u044f \u043e\u0431\u0443\u0447\u0430\u043b\u0430 \u043c\u043e\u0434\u0435\u043b\u044c \u043d\u0430 10% \u043e\u0442 \u0432\u0441\u0435\u0439 \u0438\u0441\u0445\u043e\u0434\u043d\u043e\u0439 \u0432\u044b\u0431\u043e\u0440\u043a\u0438.","97c94a79":"\u041f\u043e\u043b\u0443\u0447\u0438\u043b\u0438 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442 0.86433. \u0427\u0442\u043e \u043d\u0435\u043c\u043d\u043e\u0433\u043e \u043b\u0443\u0447\u0448\u0435 \u043f\u0435\u0440\u0432\u043e\u043d\u0430\u0447\u0430\u043b\u044c\u043d\u043e\u0433\u043e \u043f\u0440\u0438\u043c\u0435\u043d\u0435\u043d\u0438\u044f KNN \u0431\u0435\u0437 \u0441\u043d\u0438\u0436\u0435\u043d\u0438\u044f \u0440\u0430\u0437\u043c\u0435\u0440\u043d\u043e\u0441\u0442\u0438.","483992b4":"\u041f\u043e\u043b\u0443\u0447\u0430\u0435\u043c \u0442\u043e\u0447\u043d\u043e\u0441\u0442\u044c 0.86833, \u0447\u0442\u043e \u043d\u0435\u043c\u043d\u043e\u0433\u043e \u043c\u0435\u043d\u044c\u0448\u0435, \u0447\u0435\u043c \u0431\u0435\u0437 \u043f\u0440\u0438\u043c\u0435\u043d\u0435\u043d\u0438\u044f PCA.","d15a4f67":"\u041f\u043e\u043b\u0443\u0447\u0438\u043c \u0434\u0430\u043d\u043d\u044b\u0435 \u0438 \u0441\u0440\u0430\u0437\u0443 \u0440\u0430\u0437\u043e\u0431\u044c\u0435\u043c \u0438\u0445 \u043d\u0430 \u0442\u0440\u0435\u0439\u043d \u0438 \u0442\u0435\u0441\u0442 \u0441\u0435\u0442\u044b, \u0447\u0442\u043e\u0431\u044b \u043f\u0440\u043e\u0432\u043e\u0434\u0438\u0442\u044c \u043a\u0440\u043e\u0441\u0441-\u0432\u0430\u043b\u0438\u0434\u0430\u0446\u0438\u044e.","56a4587a":"\u0415\u0449\u0435 \u044f \u043f\u044b\u0442\u0430\u043b\u0430\u0441\u044c \u043f\u043e\u0434\u043e\u0431\u0440\u0430\u0442\u044c ccp_alpha \u0434\u043b\u044f \u0434\u0435\u0440\u0435\u0432\u0430 \u0440\u0435\u0448\u0435\u043d\u0438\u0439, \u043d\u043e \u0442\u0430\u043c \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442 \u043f\u043e\u043b\u0443\u0447\u0430\u0435\u0442\u0441\u044f \u0433\u043e\u0440\u0430\u0437\u0434\u043e \u0445\u0443\u0436\u0435. \u0427\u0442\u043e\u0431\u044b \u0432\u044b\u0447\u0438\u0441\u043b\u0435\u043d\u0438\u044f \u043f\u0440\u043e\u0448\u043b\u0438 \u0431\u044b\u0441\u0442\u0440\u0435\u0435 \u044f \u043e\u0431\u0443\u0447\u0430\u043b\u0430 \u043c\u043e\u0434\u0435\u043b\u044c \u043d\u0430 10% \u043e\u0442 \u0432\u0441\u0435\u0439 \u0438\u0441\u0445\u043e\u0434\u043d\u043e\u0439 \u0432\u044b\u0431\u043e\u0440\u043a\u0438.","0195889f":"\u042d\u0442\u0438 \u043f\u0440\u043e\u0433\u043d\u043e\u0437\u044b \u0432\u044b\u0434\u0430\u044e\u0442 \u0432 Kaggle \u0442\u043e\u0447\u043d\u043e\u0441\u0442\u044c 0.86133 \u0438 0.87066 \u0441\u043e\u043e\u0442\u0432\u0435\u0442\u0441\u0442\u0432\u0435\u043d\u043d\u043e.","f742a63f":"\u0421\u0442\u0440\u043e\u0438\u043c \u0433\u0440\u0430\u0444\u0438\u043a accuracy \u0442\u0435\u0441\u0442\u043e\u0432\u043e\u0439 \u0432\u044b\u0431\u043e\u0440\u043a\u0438. \u041f\u043e \u043e\u0441\u0438 \u0445 \u043e\u0442\u043a\u043b\u0430\u0434\u044b\u0432\u0430\u0435\u043c \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0441\u043e\u0441\u0435\u0434\u0435\u0439. \u041f\u043e \u043e\u0441\u0438 \u0443 - \u0442\u043e\u0447\u043d\u043e\u0441\u0442\u044c \u0442\u0435\u0441\u0442\u043e\u0432\u043e\u0439 \u0432\u044b\u0431\u043e\u0440\u043a\u0438.","41504717":"\u041f\u043e\u043b\u0443\u0447\u0430\u0435\u043c \u0442\u043e\u0447\u043d\u043e\u0441\u0442\u044c 0.86833, \u0447\u0442\u043e \u043d\u0435\u043c\u043d\u043e\u0433\u043e \u043c\u0435\u043d\u044c\u0448\u0435, \u0447\u0435\u043c \u0431\u0435\u0437 \u043f\u0440\u0438\u043c\u0435\u043d\u0435\u043d\u0438\u044f PCA.","0d5c45c6":"\u041f\u043e\u043f\u0440\u043e\u0431\u0443\u0435\u043c \u043f\u0440\u0438\u043c\u0435\u043d\u0438\u0442\u044c \"\u0441\u043b\u0443\u0447\u0430\u0439\u043d\u044b\u0439 \u043b\u0435\u0441\". \u042f \u043f\u0440\u043e\u0431\u043e\u0432\u0430\u043b\u0430 \u043f\u0440\u0438\u043c\u0435\u043d\u044f\u0442\u044c \u0440\u0430\u0437\u043d\u044b\u0435 \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u044b: \u0438\u0437\u043c\u0435\u043d\u044f\u043b\u0430 \u043a\u0440\u0438\u0442\u0435\u0440\u0438\u0439, \u043c\u0430\u043a\u0441\u0438\u043c\u0430\u043b\u044c\u043d\u0443\u044e \u0433\u043b\u0443\u0431\u0438\u043d\u0443, ccp_alpha \u0438 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0434\u0435\u0440\u0435\u0432\u044c\u0435\u0432 (n_estimators). \u041f\u0440\u0438\u0432\u0435\u0434\u0435\u043d\u043d\u044b\u0435 \u043d\u0438\u0436\u0435 \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u044b, \u044f \u043f\u043e\u0441\u0447\u0438\u0442\u0430\u043b\u0430 \u043e\u043f\u0442\u0438\u043c\u0430\u043b\u044c\u043d\u044b\u043c\u0438.","fd1fc5e7":"\u0417\u0430\u0433\u0440\u0443\u0436\u0430\u0435\u043c \u043f\u043e\u043b\u0443\u0447\u0435\u043d\u043d\u044b\u0439 \u0444\u0430\u0439\u043b \u0432 Kaggle. \u0418 \u043f\u043e\u043b\u0443\u0447\u0430\u0435\u043c \u0442\u043e\u0447\u043d\u043e\u0441\u0442\u044c 0.86000.","f8c63a0c":"\u0414\u043b\u044f 150 \u043a\u043e\u043c\u043f\u043e\u043d\u0435\u043d\u0442 accuracy (0.8655833333333334) \u0432\u044b\u0448\u0435 \u0438 \u0441 \u0442\u043e\u0447\u043d\u043e\u0441\u0442\u044c\u044e \u0434\u043e 4 \u0437\u043d\u0430\u043a\u0430 \u0441\u043e\u0432\u043f\u0430\u0434\u0430\u0435\u0442 \u0441 accuracy \u0434\u043b\u044f 155 \u043a\u043e\u043c\u043f\u043e\u043d\u0435\u043d\u0442 (0.865500). \u041f\u043e\u044d\u0442\u043e\u043c\u0443 \u043d\u0435 \u0431\u0443\u0434\u0435\u043c \u0441\u0442\u0440\u043e\u0438\u0442\u044c \u043f\u0440\u043e\u0433\u043d\u043e\u0437 \u0434\u043b\u044f \u0434\u0440\u0443\u0433\u0438\u0445 \u0440\u0430\u0437\u043c\u0435\u0440\u043d\u043e\u0441\u0442\u0435\u0439.","d537c9e1":"\u041f\u043e\u043f\u0440\u043e\u0431\u0443\u0435\u043c \u043f\u0440\u0438\u043c\u0435\u043d\u0438\u0442\u044c \"\u0441\u043b\u0443\u0447\u0430\u0439\u043d\u044b\u0439 \u043b\u0435\u0441\". \u042f \u043f\u0440\u043e\u0431\u043e\u0432\u0430\u043b\u0430 \u043f\u0440\u0438\u043c\u0435\u043d\u044f\u0442\u044c \u0440\u0430\u0437\u043d\u044b\u0435 \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u044b: \u0438\u0437\u043c\u0435\u043d\u044f\u043b\u0430 \u043a\u0440\u0438\u0442\u0435\u0440\u0438\u0439, \u043c\u0430\u043a\u0441\u0438\u043c\u0430\u043b\u044c\u043d\u0443\u044e \u0433\u043b\u0443\u0431\u0438\u043d\u0443, ccp_alpha \u0438 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0434\u0435\u0440\u0435\u0432\u044c\u0435\u0432 (n_estimators). \u041f\u0440\u0438\u0432\u0435\u0434\u0435\u043d\u043d\u044b\u0435 \u043d\u0438\u0436\u0435 \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u044b, \u044f \u043f\u043e\u0441\u0447\u0438\u0442\u0430\u043b\u0430 \u043e\u043f\u0442\u0438\u043c\u0430\u043b\u044c\u043d\u044b\u043c\u0438.","59c3c43a":"\u0417\u0430\u043f\u0438\u0441\u044b\u0432\u0430\u0435\u043c \u043f\u043e\u043b\u0443\u0447\u0435\u043d\u043d\u044b\u0439 \u043f\u0440\u043e\u0433\u043d\u043e\u0437 \u043a\u0430\u043a \u0434\u0430\u0442\u0430\u0444\u0440\u0435\u0439\u043c \u0438 \u0434\u043e\u0431\u0430\u0432\u043b\u044f\u0435\u043c \u043a \u043d\u0435\u043c\u0443 \u0441\u0442\u043e\u043b\u0431\u0435\u0446 id, \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u0441\u043e\u043e\u0442\u0432\u0435\u0442\u0441\u0442\u0432\u0435\u0443\u0442 \u0438\u043d\u0434\u0435\u043a\u0441\u0443 \u043e\u0442 1 \u0434\u043e 10000 \u0432\u043a\u043b\u044e\u0447\u0438\u0442\u0435\u043b\u044c\u043d\u043e.","009532f7":"### 8. \u0412\u044b\u0432\u043e\u0434\u044b\n\u041b\u0443\u0447\u0448\u0438\u0439 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442 \u043f\u043e\u043a\u0430\u0437\u0430\u043b CatBoost (0.90900 \u0438 0.89728 \u0432 public \u0438 private \u043b\u0438\u0434\u0435\u0440\u0431\u043e\u0440\u0434\u0430\u0445 \u0441\u043e\u043e\u0442\u0432\u0435\u0442\u0441\u0442\u0432\u0435\u043d\u043d\u043e).\n\n\u0421\u043d\u0438\u0436\u0435\u043d\u0438\u0435 \u0440\u0430\u0437\u043c\u0435\u0440\u043d\u043e\u0441\u0442\u0438 \u043d\u0435 \u0432\u0441\u0435\u0433\u0434\u0430 \u0443\u043b\u0443\u0447\u0448\u0430\u0435\u0442 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442. \u0414\u043b\u044f KNN \u043f\u0440\u0438\u043c\u0435\u043d\u0435\u043d\u0438\u0435 PCA \u043f\u0440\u0438\u0432\u0435\u043b\u043e \u043a \u043d\u0435\u0431\u043e\u043b\u044c\u0448\u043e\u043c\u0443 \u0443\u043b\u0443\u0447\u0448\u0435\u043d\u0438\u044e \u0442\u043e\u0447\u043d\u043e\u0441\u0442\u0438. \u0414\u043b\u044f \u0434\u0440\u0443\u0433\u0438\u0445 \u0436\u0435 \u043c\u0435\u0442\u043e\u0434\u043e\u0432 \u0442\u043e\u0447\u043d\u043e\u0441\u0442\u044c \u043d\u0435\u043c\u043d\u043e\u0433\u043e \u0443\u043f\u0430\u043b\u0430.\n\n\u041c\u0435\u0442\u043e\u0434 t-SNE \u0445\u043e\u0440\u043e\u0448\u043e \u043e\u0442\u0434\u0435\u043b\u0438\u043b \u043a\u043b\u0430\u0441\u0441\u044b \u0431\u0440\u044e\u043a\u0438 \u0438 \u0441\u0443\u043c\u043a\u0438 \u043e\u0442 \u0434\u0440\u0443\u0433\u0438\u0445 \u043a\u043b\u0430\u0441\u0441\u043e\u0432.\n\n\u0418\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0435 t-SNE \u043b\u0443\u0447\u0448\u0435 \u043f\u0440\u043e\u0432\u043e\u0434\u0438\u0442\u044c \u043d\u0430 \u043f\u0440\u0435\u0434\u0432\u0430\u0440\u0438\u0442\u0435\u043b\u044c\u043d\u043e \u0441\u043d\u0438\u0436\u0435\u043d\u043d\u044b\u0445 \u0440\u0430\u0437\u043c\u0435\u0440\u043d\u043e\u0441\u0442\u044f\u0445 \u0441 \u043f\u043e\u043c\u043e\u0449\u044c\u044e PCA.","385cd9a3":"\u0417\u0430\u0433\u0440\u0443\u0436\u0430\u0435\u043c \u043f\u043e\u043b\u0443\u0447\u0435\u043d\u043d\u044b\u0439 \u0444\u0430\u0439\u043b \u0432 Kaggle. \u0418 \u043f\u043e\u043b\u0443\u0447\u0430\u0435\u043c \u0442\u043e\u0447\u043d\u043e\u0441\u0442\u044c 0.86000.","120fa6bb":"\u041f\u0440\u043e\u0431\u0443\u0435\u043c \u0441\u0442\u0440\u043e\u0438\u0442\u044c \u043f\u0440\u043e\u0433\u043d\u043e\u0437 \u0441 \u043f\u043e\u043c\u043e\u0449\u044c\u044e \u043b\u043e\u0433\u0440\u0435\u0433\u0440\u0435\u0441\u0438\u0438 \u0438 SVC.","8bca305e":"### 7. \u041f\u043e\u0434\u0431\u043e\u0440 ccp_alpha \u0434\u043b\u044f \u0434\u0435\u0440\u0435\u0432\u0430 \u0440\u0435\u0448\u0435\u043d\u0438\u0439","d5d5ee4f":"\u0414\u043b\u044f 150 \u043a\u043e\u043c\u043f\u043e\u043d\u0435\u043d\u0442 accuracy (0.8655833333333334) \u0432\u044b\u0448\u0435 \u0438 \u0441 \u0442\u043e\u0447\u043d\u043e\u0441\u0442\u044c\u044e \u0434\u043e 4 \u0437\u043d\u0430\u043a\u0430 \u0441\u043e\u0432\u043f\u0430\u0434\u0430\u0435\u0442 \u0441 accuracy \u0434\u043b\u044f 155 \u043a\u043e\u043c\u043f\u043e\u043d\u0435\u043d\u0442 (0.865500). \u041f\u043e\u044d\u0442\u043e\u043c\u0443 \u043d\u0435 \u0431\u0443\u0434\u0435\u043c \u0441\u0442\u0440\u043e\u0438\u0442\u044c \u043f\u0440\u043e\u0433\u043d\u043e\u0437 \u0434\u043b\u044f \u0434\u0440\u0443\u0433\u0438\u0445 \u0440\u0430\u0437\u043c\u0435\u0440\u043d\u043e\u0441\u0442\u0435\u0439.","a41a6b5a":"\u041f\u043e\u043b\u0443\u0447\u0438\u043b\u0438 \u0442\u043e\u0447\u043d\u043e\u0441\u0442\u044c \u0434\u043b\u044f new_test 0.90900. \u0418 \u044d\u0442\u043e \u043d\u0430\u0438\u043b\u0443\u0447\u0448\u0438\u0439 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442.","af818dde":"\u041f\u0440\u0438\u043c\u0435\u043d\u0438\u043c \u043a \u043d\u0435\u043c\u0443 CatBoost.","42d37fcc":"\u0412\u0438\u0437\u0443\u0430\u043b\u0438\u0437\u0438\u0440\u0443\u0435\u043c \u043f\u043e\u043b\u0443\u0447\u0435\u043d\u043d\u044b\u0439 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442.","f322074c":"\u0421\u0440\u0430\u0432\u043d\u0438\u043c t-SNE \u0441 PCA. \u0414\u043b\u044f \u044d\u0442\u043e\u0433\u043e \u0432\u044b\u0434\u0435\u043b\u0438\u043c 2 \u0433\u043b\u0430\u0432\u043d\u044b\u0435 \u043a\u043e\u043c\u043f\u043e\u043d\u0435\u043d\u0442\u044b \u0438 \u043f\u043e\u0441\u0442\u043e\u0440\u0438\u043c \u0433\u0440\u0430\u0444\u0438\u043a.","23e8296e":"### 6. \u0421\u043d\u0438\u0436\u0435\u043d\u0438\u0435 \u0440\u0430\u0437\u043c\u0435\u0440\u043d\u043e\u0441\u0442\u0438 (t-SNE)","2b08eedf":"\u0420\u0430\u0437\u0431\u0438\u0432\u0430\u0435\u043c X_pca \u043d\u0430 \u0442\u0440\u0435\u0439\u043d \u0438 \u0442\u0435\u0441\u0442 \u0441\u0435\u0442\u044b. \u0418 \u043f\u0440\u0438\u043c\u0435\u043d\u044f\u0435\u043c SVC.","ab255266":"\u0421\u043d\u0438\u0437\u0438\u043c \u0440\u0430\u0437\u043c\u0435\u0440\u043d\u043e\u0441\u0442\u044c \u043f\u0440\u043e\u0441\u0442\u0440\u0430\u043d\u0441\u0442\u0432\u0430 \u0441 \u043f\u043e\u043c\u043e\u0449\u044c\u044e PCA.","7890731c":"### 4. RandomForest","c2116336":"\u041f\u0440\u0438\u043c\u0435\u043d\u0438\u043c t-SNE.","1b3b89b1":"\u0412\u0438\u0434\u0438\u043c, \u0447\u0442\u043e \u043b\u043e\u0433\u0438\u0441\u0442\u0438\u0447\u0435\u0441\u043a\u0430\u044f \u0440\u0435\u0433\u0440\u0435\u0441\u0441\u0438\u044f \u0438 \u043c\u0435\u0442\u043e\u0434 \u043e\u043f\u043e\u0440\u043d\u044b\u0445 \u0432\u0435\u043a\u0442\u043e\u0440\u043e\u0432 \u0434\u0430\u044e\u0442 \u043d\u0435\u043f\u043b\u043e\u0445\u0438\u0435 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u044b.\n\u0422\u0430\u043a\u0436\u0435 \u044f \u0432\u044b\u0432\u0435\u043b\u0430 \u0432\u0440\u0435\u043c\u044f \u0437\u0430 \u043a\u043e\u0442\u043e\u0440\u043e\u0435 \u043a\u0430\u0436\u0434\u044b\u0439 \u0438\u0437 \u043c\u0435\u0442\u043e\u0434\u043e\u0432 \u043e\u0431\u0443\u0447\u0430\u0435\u0442\u0441\u044f.","810abc92":"\u0414\u043b\u044f new_test \u043f\u043e\u043b\u0443\u0447\u0438\u043b\u0438 \u0442\u043e\u0447\u043d\u043e\u0441\u0442\u044c 0.88533.","865e8cb7":"### 4. RandomForest","707a4a7b":"\u0414\u043b\u044f new_test \u043f\u043e\u043b\u0443\u0447\u0438\u043b\u0438 \u0442\u043e\u0447\u043d\u043e\u0441\u0442\u044c 0.88533.","22e09215":"\u0421\u0442\u0440\u043e\u0438\u043c \u043f\u0440\u043e\u0433\u043d\u043e\u0437.","1eef463f":"\u041f\u0440\u0438\u043c\u0435\u043d\u0438\u043c \u043a \u043d\u0435\u043c\u0443 CatBoost.","0dfbef7c":"\u0414\u0430\u043b\u044c\u0448\u0435 \u044f \u043f\u0440\u0438\u043c\u0435\u043d\u044f\u043b\u0430 t-SNE \u043a X_pca, \u0442.\u0435. \u043a \u0434\u0430\u043d\u043d\u044b\u043c \u0441\u043e \u0441\u043d\u0438\u0436\u0435\u043d\u043d\u043e\u0439 \u0440\u0430\u0437\u043c\u0435\u0440\u043d\u043e\u0441\u0442\u044c\u044e \u0434\u043e 155 \u043a\u043e\u043c\u043f\u043e\u043d\u0435\u043d\u0442 \u0441 \u043f\u043e\u043c\u043e\u0449\u044c\u044e PCA.","5af00d69":"\u041f\u043e\u043b\u0443\u0447\u0438\u043b\u0438 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442 0.86433. \u0427\u0442\u043e \u043d\u0435\u043c\u043d\u043e\u0433\u043e \u043b\u0443\u0447\u0448\u0435 \u043f\u0435\u0440\u0432\u043e\u043d\u0430\u0447\u0430\u043b\u044c\u043d\u043e\u0433\u043e \u043f\u0440\u0438\u043c\u0435\u043d\u0435\u043d\u0438\u044f KNN \u0431\u0435\u0437 \u0441\u043d\u0438\u0436\u0435\u043d\u0438\u044f \u0440\u0430\u0437\u043c\u0435\u0440\u043d\u043e\u0441\u0442\u0438.","ec3be29b":"\u0420\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442 \u043d\u0430 \u0442\u0435\u0441\u0442\u043e\u0432\u043e\u0439 \u0432\u044b\u0431\u043e\u0440\u043a\u0435 \u043f\u043e\u043b\u0443\u0447\u0438\u043b\u0441\u044f \u043d\u0438\u0436\u0435, \u043f\u043e\u044d\u0442\u043e\u043c\u0443 \u043d\u0435 \u0431\u0443\u0434\u0435\u043c \u0435\u0433\u043e \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c.","7fdea9f0":"\u0418\u0437 \u0433\u0440\u0430\u0444\u0438\u043a\u0430 \u0432\u0438\u0434\u043d\u043e, \u0447\u0442\u043e \u043f\u0440\u0438 k = 4 \u0442\u043e\u0447\u043d\u043e\u0441\u0442\u044c \u0432\u044b\u0448\u0435. \u041f\u043e\u044d\u0442\u043e\u043c\u0443 \u0434\u043b\u044f \u043f\u0440\u0435\u0434\u0441\u043a\u0430\u0437\u0430\u043d\u0438\u044f \u0431\u0443\u0434\u0435\u043c \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c k = 4.","0ee98ab5":"\u0412\u0438\u0434\u0438\u043c, \u0447\u0442\u043e \u043f\u0435\u0440\u0432\u044b\u0435 155 \u043a\u043e\u043c\u043f\u043e\u043d\u0435\u043d\u0442 \u043e\u0431\u044a\u044f\u0441\u043d\u044f\u044e\u0442 \u043f\u043e\u0447\u0442\u0438 95% \u0434\u0430\u043d\u043d\u044b\u0445. \u041f\u043e\u044d\u0442\u043e\u043c\u0443 \u043e\u0441\u0442\u0430\u0432\u043b\u044f\u0435\u043c \u0442\u043e\u043b\u044c\u043a\u043e 155 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u043e\u0432.","854dc0a0":"\u0414\u0430\u043b\u044c\u0448\u0435 \u044f \u043f\u0440\u0438\u043c\u0435\u043d\u044f\u043b\u0430 t-SNE \u043a X_pca, \u0442.\u0435. \u043a \u0434\u0430\u043d\u043d\u044b\u043c \u0441\u043e \u0441\u043d\u0438\u0436\u0435\u043d\u043d\u043e\u0439 \u0440\u0430\u0437\u043c\u0435\u0440\u043d\u043e\u0441\u0442\u044c\u044e \u0434\u043e 155 \u043a\u043e\u043c\u043f\u043e\u043d\u0435\u043d\u0442 \u0441 \u043f\u043e\u043c\u043e\u0449\u044c\u044e PCA.","cb3f9737":"\u041f\u043e\u043f\u0440\u043e\u0431\u0443\u0435\u043c \u043f\u0440\u0438\u043c\u0435\u043d\u0438\u0442\u044c KNN \u0434\u043b\u044f X_pca. \u041f\u0440\u043e\u0432\u0435\u0440\u0438\u043c \u0431\u0443\u0434\u0435\u0442 \u043b\u0438 \u0434\u043b\u044f \u0434\u0430\u043d\u043d\u044b\u0445 \u0441\u043e \u0441\u043d\u0438\u0436\u0435\u043d\u043d\u043e\u0439 \u0440\u0430\u0437\u043c\u0435\u0440\u043d\u043e\u0441\u0442\u044c\u044e \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0441\u043e\u0441\u0435\u0434\u0435\u0439 k = 4 \u043d\u0430\u0438\u043b\u0443\u0447\u0448\u0438\u043c.","3c921f14":"\u0412\u0438\u0437\u0443\u0430\u043b\u0438\u0437\u0438\u0440\u0443\u0435\u043c \u043f\u043e\u043b\u0443\u0447\u0435\u043d\u043d\u044b\u0439 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442.","a7660619":"\u0417\u0430\u043f\u0438\u0441\u044b\u0432\u0430\u0435\u043c \u0432 csv \u0444\u0430\u0439\u043b.","5cf5a9e5":"\u041f\u0440\u043e\u0431\u0443\u0435\u043c CatBoost. \u042f \u0438\u0437\u043c\u0435\u043d\u044f\u043b\u0430 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0438\u0442\u0435\u0440\u0430\u0446\u0438\u0439 (500, 1000, 1500). \u0414\u043b\u044f 1500 \u0442\u043e\u0447\u043d\u043e\u0441\u0442\u044c \u043f\u043e\u043b\u0443\u0447\u0430\u0435\u0442\u0441\u044f \u0432\u044b\u0448\u0435. \u0423\u0432\u0435\u043b\u0438\u0447\u0438\u0432\u0430\u0442\u044c \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0438\u0442\u0435\u0440\u0430\u0446\u0438\u0439 \u044f \u043d\u0435 \u0441\u0442\u0430\u043b\u0430, \u0442.\u043a. \u0434\u043b\u044f 1500 \u0432\u044b\u0447\u0438\u0441\u043b\u0435\u043d\u0438\u044f \u0437\u0430\u043d\u0438\u043c\u0430\u044e\u0442 \u043f\u043e\u0447\u0442\u0438 1.5 \u0447\u0430\u0441\u0430.","fd819919":"\u0418\u0437 \u0433\u0440\u0430\u0444\u0438\u043a\u0430 \u0432\u0438\u0434\u043d\u043e, \u0447\u0442\u043e \u043f\u0440\u0438 k = 4 \u0442\u043e\u0447\u043d\u043e\u0441\u0442\u044c \u0432\u044b\u0448\u0435. \u041f\u043e\u044d\u0442\u043e\u043c\u0443 \u0434\u043b\u044f \u043f\u0440\u0435\u0434\u0441\u043a\u0430\u0437\u0430\u043d\u0438\u044f \u0431\u0443\u0434\u0435\u043c \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c k = 4.","a6366e3d":"\u041f\u043e\u043f\u0440\u043e\u0431\u0443\u0435\u043c \u043f\u0440\u0438\u043c\u0435\u043d\u0438\u0442\u044c KNN \u0434\u043b\u044f X_pca. \u041f\u0440\u043e\u0432\u0435\u0440\u0438\u043c \u0431\u0443\u0434\u0435\u0442 \u043b\u0438 \u0434\u043b\u044f \u0434\u0430\u043d\u043d\u044b\u0445 \u0441\u043e \u0441\u043d\u0438\u0436\u0435\u043d\u043d\u043e\u0439 \u0440\u0430\u0437\u043c\u0435\u0440\u043d\u043e\u0441\u0442\u044c\u044e \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0441\u043e\u0441\u0435\u0434\u0435\u0439 k = 4 \u043d\u0430\u0438\u043b\u0443\u0447\u0448\u0438\u043c.","60dc04ce":"### 2. \u0414\u0435\u0440\u0435\u0432\u043e \u0440\u0435\u0448\u0435\u043d\u0438\u0439, \u043b\u043e\u0433\u0440\u0435\u0433\u0440\u0435\u0441\u0441\u0438\u044f, \u043d\u0430\u0438\u0432\u043d\u044b\u0439 \u0431\u0430\u0439\u0435\u0441, \u043c\u0435\u0442\u043e\u0434 \u043e\u043f\u043e\u0440\u043d\u044b\u0445 \u0432\u0435\u043a\u0442\u043e\u0440\u043e\u0432","2bf89c6c":"\u041f\u0440\u0438\u043c\u0435\u043d\u0438\u043c CatBoost \u0441 PCA.","cdc51152":"\u041f\u0440\u043e\u0431\u0443\u0435\u043c \u043f\u0440\u0438\u043c\u0435\u043d\u0438\u0442\u044c \u0434\u0440\u0443\u0433\u0438\u0435 \u043a\u043b\u0430\u0441\u0441\u0438\u0444\u0438\u043a\u0430\u0442\u043e\u0440\u044b \u0438 \u0441\u0440\u0430\u0432\u043d\u0438\u0442\u044c \u0438\u0445 \u0441 KNN.","aa723fff":"### 3. \u0421\u043d\u0438\u0436\u0435\u043d\u0438\u0435 \u0440\u0430\u0437\u043c\u0435\u0440\u043d\u043e\u0441\u0442\u0438 (PCA)","0475d2c7":"\u041f\u043e\u043b\u0443\u0447\u0438\u043c \u0434\u0430\u043d\u043d\u044b\u0435 \u0438 \u0441\u0440\u0430\u0437\u0443 \u0440\u0430\u0437\u043e\u0431\u044c\u0435\u043c \u0438\u0445 \u043d\u0430 \u0442\u0440\u0435\u0439\u043d \u0438 \u0442\u0435\u0441\u0442 \u0441\u0435\u0442\u044b, \u0447\u0442\u043e\u0431\u044b \u043f\u0440\u043e\u0432\u043e\u0434\u0438\u0442\u044c \u043a\u0440\u043e\u0441\u0441-\u0432\u0430\u043b\u0438\u0434\u0430\u0446\u0438\u044e.","0f701220":"\u0421\u0440\u0430\u0432\u043d\u0438\u043c t-SNE \u0441 PCA. \u0414\u043b\u044f \u044d\u0442\u043e\u0433\u043e \u0432\u044b\u0434\u0435\u043b\u0438\u043c 2 \u0433\u043b\u0430\u0432\u043d\u044b\u0435 \u043a\u043e\u043c\u043f\u043e\u043d\u0435\u043d\u0442\u044b \u0438 \u043f\u043e\u0441\u0442\u043e\u0440\u0438\u043c \u0433\u0440\u0430\u0444\u0438\u043a.","5b1b4db1":"\u0417\u0430\u0433\u0440\u0443\u0436\u0430\u0435\u043c \u0442\u0435\u0441\u0442\u043e\u0432\u044b\u0439 \u043d\u0430\u0431\u043e\u0440, \u0434\u043b\u044f \u043a\u043e\u0442\u043e\u0440\u043e\u0433\u043e \u043d\u0443\u0436\u043d\u043e \u043f\u043e\u0441\u0442\u0440\u043e\u0438\u0442\u044c \u043f\u0440\u0435\u0434\u0441\u043a\u0430\u0437\u0430\u043d\u0438\u044f.","52179c4a":"\u041e\u0447\u0435\u0432\u0438\u0434\u043d\u043e, \u0447\u0442\u043e PCA \u0441\u043f\u0440\u0430\u0432\u0438\u043b\u0441\u044f \u0445\u0443\u0436\u0435 t-SNE.","f3fb3ae1":"\u0420\u0430\u0437\u0431\u0438\u0432\u0430\u0435\u043c X_pca \u043d\u0430 \u0442\u0440\u0435\u0439\u043d \u0438 \u0442\u0435\u0441\u0442 \u0441\u0435\u0442\u044b. \u0418 \u043f\u0440\u0438\u043c\u0435\u043d\u044f\u0435\u043c SVC.","ecf91f53":"\u0412\u0438\u0434\u0438\u043c, \u0447\u0442\u043e \u0437\u0434\u0435\u0441\u044c \u043b\u0443\u0447\u0448\u0435 \u0432\u044b\u0431\u0438\u0440\u0430\u0442\u044c k = 8.","b8e43cb3":"\u0418\u0437 \u0433\u0440\u0430\u0444\u0438\u043a\u0430 \u0432\u0438\u0434\u0438\u043c, \u0447\u0442\u043e \u0431\u0440\u044e\u043a\u0438 \u0438 \u0441\u0443\u043c\u043a\u0438 \u0445\u043e\u0440\u043e\u0448\u043e \u043e\u0442\u0434\u0435\u043b\u044f\u044e\u0442\u0441\u044f \u043e\u0442 \u043e\u0441\u0442\u0430\u043b\u044c\u043d\u044b\u0445 \u043a\u043b\u0430\u0441\u0441\u043e\u0432.","14767790":"\u041f\u0440\u0438\u043c\u0435\u043d\u0438\u043c CatBoost \u0441 PCA.","f4107e1c":"\u0417\u0430\u043f\u0438\u0441\u044b\u0432\u0430\u0435\u043c \u043f\u043e\u043b\u0443\u0447\u0435\u043d\u043d\u044b\u0439 \u043f\u0440\u043e\u0433\u043d\u043e\u0437 \u043a\u0430\u043a \u0434\u0430\u0442\u0430\u0444\u0440\u0435\u0439\u043c \u0438 \u0434\u043e\u0431\u0430\u0432\u043b\u044f\u0435\u043c \u043a \u043d\u0435\u043c\u0443 \u0441\u0442\u043e\u043b\u0431\u0435\u0446 id, \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u0441\u043e\u043e\u0442\u0432\u0435\u0442\u0441\u0442\u0432\u0435\u0443\u0442 \u0438\u043d\u0434\u0435\u043a\u0441\u0443 \u043e\u0442 1 \u0434\u043e 10000 \u0432\u043a\u043b\u044e\u0447\u0438\u0442\u0435\u043b\u044c\u043d\u043e.","98392ef7":"Accuracy \u043f\u043e\u043b\u0443\u0447\u0438\u043b\u0430\u0441\u044c \u043d\u0438\u0436\u0435, \u0447\u0435\u043c \u0431\u0435\u0437 \u043f\u0440\u0438\u043c\u0435\u043d\u0435\u043d\u0438\u044f PCA. \u041f\u043e\u044d\u0442\u043e\u043c\u0443 \u043d\u0435 \u0431\u0443\u0434\u0435\u043c \u0434\u0435\u043b\u0430\u0442\u044c \u043f\u0440\u043e\u0433\u043d\u043e\u0437.","c662c588":"\u0412\u0438\u0434\u0438\u043c, \u0447\u0442\u043e \u0437\u0434\u0435\u0441\u044c \u043b\u0443\u0447\u0448\u0435 \u0432\u044b\u0431\u0438\u0440\u0430\u0442\u044c k = 8.","285eb741":"\u0417\u0430\u043f\u0438\u0441\u044b\u0432\u0430\u0435\u043c \u0432 csv \u0444\u0430\u0439\u043b.","fea3c506":"\u041f\u0440\u043e\u0431\u0443\u0435\u043c CatBoost. \u042f \u0438\u0437\u043c\u0435\u043d\u044f\u043b\u0430 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0438\u0442\u0435\u0440\u0430\u0446\u0438\u0439 (500, 1000, 1500). \u0414\u043b\u044f 1500 \u0442\u043e\u0447\u043d\u043e\u0441\u0442\u044c \u043f\u043e\u043b\u0443\u0447\u0430\u0435\u0442\u0441\u044f \u0432\u044b\u0448\u0435. \u0423\u0432\u0435\u043b\u0438\u0447\u0438\u0432\u0430\u0442\u044c \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0438\u0442\u0435\u0440\u0430\u0446\u0438\u0439 \u044f \u043d\u0435 \u0441\u0442\u0430\u043b\u0430, \u0442.\u043a. \u0434\u043b\u044f 1500 \u0432\u044b\u0447\u0438\u0441\u043b\u0435\u043d\u0438\u044f \u0437\u0430\u043d\u0438\u043c\u0430\u044e\u0442 \u043f\u043e\u0447\u0442\u0438 1.5 \u0447\u0430\u0441\u0430.","d3e1cfdc":"### 5. CatBoost","4b01dcb9":"### 1. KNN","235674aa":"\u0413\u0440\u0430\u0444\u0438\u043a \u043d\u0435\u0441\u0438\u043b\u044c\u043d\u043e \u043e\u0442\u043b\u0438\u0447\u0430\u0435\u0442\u0441\u044f \u043e\u0442 \u043f\u0440\u0435\u0434\u044b\u0434\u0443\u0449\u0435\u0433\u043e. \u041d\u043e \u043f\u0440\u0438 \u044d\u0442\u043e\u043c \u0432\u044b\u0447\u0438\u0441\u043b\u0435\u043d\u0438\u044f \u043f\u0440\u043e\u0438\u0441\u0445\u043e\u0434\u044f\u0442 \u0431\u044b\u0441\u0442\u0440\u0435\u0435. \u0411\u0435\u0437 PCA \u0443 \u043c\u0435\u043d\u044f \u0432\u044b\u0447\u0438\u0441\u043b\u0435\u043d\u0438\u044f \u0437\u0430\u043d\u044f\u043b\u0438 \u0431\u043e\u043b\u044c\u0448\u0435 \u0447\u0430\u0441\u0430. \u0415\u0441\u043b\u0438 \u0436\u0435 \u043f\u0440\u0435\u0434\u0432\u0430\u0440\u0438\u0442\u0435\u043b\u044c\u043d\u043e \u0443\u043c\u0435\u043d\u044c\u0448\u0438\u0442\u044c \u0440\u0430\u0437\u043c\u0435\u0440\u043d\u043e\u0441\u0442\u044c \u0441 \u043f\u043e\u043c\u043e\u0449\u044c\u044e PCA \u0434\u043e 155 \u043a\u043e\u043c\u043f\u043e\u043d\u0435\u043d\u0442, \u0442\u043e \u0432\u044b\u0447\u0438\u0441\u043b\u0435\u043d\u0438\u044f \u0437\u0430\u043d\u0438\u043c\u0430\u044e\u0442 \u043c\u0438\u043d\u0443\u0442 20.","2bc9bfef":"\u0421\u0442\u0440\u043e\u0438\u043c \u0433\u0440\u0430\u0444\u0438\u043a accuracy \u0442\u0435\u0441\u0442\u043e\u0432\u043e\u0439 \u0432\u044b\u0431\u043e\u0440\u043a\u0438. \u041f\u043e \u043e\u0441\u0438 \u0445 \u043e\u0442\u043a\u043b\u0430\u0434\u044b\u0432\u0430\u0435\u043c \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0441\u043e\u0441\u0435\u0434\u0435\u0439. \u041f\u043e \u043e\u0441\u0438 \u0443 - \u0442\u043e\u0447\u043d\u043e\u0441\u0442\u044c \u0442\u0435\u0441\u0442\u043e\u0432\u043e\u0439 \u0432\u044b\u0431\u043e\u0440\u043a\u0438.","9cab3e44":"\u041f\u043e\u043f\u0440\u043e\u0431\u0443\u0435\u043c \u043f\u0440\u0438\u043c\u0435\u043d\u0438\u0442\u044c KNN. \u041f\u043e\u0434\u0431\u0435\u0440\u0435\u043c \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0441\u043e\u0441\u0435\u0434\u0435\u0439 \u0441 \u043d\u0430\u0438\u0431\u043e\u043b\u044c\u0448\u0438\u043c accuracy \u043d\u0430 \u0442\u0435\u0441\u0442\u043e\u0432\u043e\u0439 \u0432\u044b\u0431\u043e\u0440\u043a\u0435. \u041f\u0435\u0440\u0435\u0431\u0438\u0440\u0430\u0435\u043c k \u043e\u0442 1 \u0434\u043e 8 \u0432\u043a\u043b\u044e\u0447\u0438\u0442\u0435\u043b\u044c\u043d\u043e.","f2e6f0a8":"\u041f\u043e\u0441\u043c\u043e\u0442\u0440\u0438\u043c \u043d\u0430 \u043f\u0435\u0440\u0432\u044b\u0435 155 \u043a\u0443\u043c\u0443\u043b\u044f\u0442\u0438\u0432\u043d\u044b\u0445 \u0434\u0438\u0441\u043f\u0435\u0440\u0441\u0438\u0439.","ebf33129":"\u0412\u0438\u0434\u0438\u043c, \u0447\u0442\u043e \u043f\u0435\u0440\u0432\u044b\u0435 155 \u043a\u043e\u043c\u043f\u043e\u043d\u0435\u043d\u0442 \u043e\u0431\u044a\u044f\u0441\u043d\u044f\u044e\u0442 \u043f\u043e\u0447\u0442\u0438 95% \u0434\u0430\u043d\u043d\u044b\u0445. \u041f\u043e\u044d\u0442\u043e\u043c\u0443 \u043e\u0441\u0442\u0430\u0432\u043b\u044f\u0435\u043c \u0442\u043e\u043b\u044c\u043a\u043e 155 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u043e\u0432.","628054f9":"\u041f\u043e\u043f\u0440\u043e\u0431\u0443\u0435\u043c \u0438\u0437\u043c\u0435\u043d\u0438\u0442\u044c \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0433\u043b\u0430\u0432\u043d\u044b\u0445 \u043a\u043e\u043c\u043f\u043e\u043d\u0435\u043d\u0442 \u0438 \u043f\u043e\u0441\u043c\u043e\u0442\u0440\u0438\u043c \u043a\u0430\u043a\u0430\u044f \u0431\u0443\u0434\u0435\u0442 \u0442\u043e\u0447\u043d\u043e\u0441\u0442\u044c \u043d\u0430 \u0442\u0435\u0441\u0442\u043e\u0432\u043e\u0439 \u0432\u044b\u0431\u043e\u0440\u043a\u0435. \u0411\u0443\u0434\u0435\u043c \u043c\u0435\u043d\u044f\u0442\u044c \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043a\u043e\u043c\u043f\u043e\u043d\u0435\u043d\u0442 \u043e\u0442 50 \u0434\u043e 200 \u0441 \u0448\u0430\u0433\u043e\u043c 50.","b403d767":"\u042d\u0442\u0438 \u043f\u0440\u043e\u0433\u043d\u043e\u0437\u044b \u0432\u044b\u0434\u0430\u044e\u0442 \u0432 Kaggle \u0442\u043e\u0447\u043d\u043e\u0441\u0442\u044c 0.86133 \u0438 0.87066 \u0441\u043e\u043e\u0442\u0432\u0435\u0442\u0441\u0442\u0432\u0435\u043d\u043d\u043e.","d6528e08":"### 8. \u0412\u044b\u0432\u043e\u0434\u044b\n\u041b\u0443\u0447\u0448\u0438\u0439 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442 \u043f\u043e\u043a\u0430\u0437\u0430\u043b CatBoost (0.90900 \u0438 0.89728 \u0432 public \u0438 private \u043b\u0438\u0434\u0435\u0440\u0431\u043e\u0440\u0434\u0430\u0445 \u0441\u043e\u043e\u0442\u0432\u0435\u0442\u0441\u0442\u0432\u0435\u043d\u043d\u043e).\n\n\u0421\u043d\u0438\u0436\u0435\u043d\u0438\u0435 \u0440\u0430\u0437\u043c\u0435\u0440\u043d\u043e\u0441\u0442\u0438 \u043d\u0435 \u0432\u0441\u0435\u0433\u0434\u0430 \u0443\u043b\u0443\u0447\u0448\u0430\u0435\u0442 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442. \u0414\u043b\u044f KNN \u043f\u0440\u0438\u043c\u0435\u043d\u0435\u043d\u0438\u0435 PCA \u043f\u0440\u0438\u0432\u0435\u043b\u043e \u043a \u043d\u0435\u0431\u043e\u043b\u044c\u0448\u043e\u043c\u0443 \u0443\u043b\u0443\u0447\u0448\u0435\u043d\u0438\u044e \u0442\u043e\u0447\u043d\u043e\u0441\u0442\u0438. \u0414\u043b\u044f \u0434\u0440\u0443\u0433\u0438\u0445 \u0436\u0435 \u043c\u0435\u0442\u043e\u0434\u043e\u0432 \u0442\u043e\u0447\u043d\u043e\u0441\u0442\u044c \u043d\u0435\u043c\u043d\u043e\u0433\u043e \u0443\u043f\u0430\u043b\u0430.\n\n\u041c\u0435\u0442\u043e\u0434 t-SNE \u0445\u043e\u0440\u043e\u0448\u043e \u043e\u0442\u0434\u0435\u043b\u0438\u043b \u043a\u043b\u0430\u0441\u0441\u044b \u0431\u0440\u044e\u043a\u0438 \u0438 \u0441\u0443\u043c\u043a\u0438 \u043e\u0442 \u0434\u0440\u0443\u0433\u0438\u0445 \u043a\u043b\u0430\u0441\u0441\u043e\u0432.\n\n\u0418\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0435 t-SNE \u043b\u0443\u0447\u0448\u0435 \u043f\u0440\u043e\u0432\u043e\u0434\u0438\u0442\u044c \u043d\u0430 \u043f\u0440\u0435\u0434\u0432\u0430\u0440\u0438\u0442\u0435\u043b\u044c\u043d\u043e \u0441\u043d\u0438\u0436\u0435\u043d\u043d\u044b\u0445 \u0440\u0430\u0437\u043c\u0435\u0440\u043d\u043e\u0441\u0442\u044f\u0445 \u0441 \u043f\u043e\u043c\u043e\u0449\u044c\u044e PCA.","3bfeb581":"\u041f\u043e\u043f\u0440\u043e\u0431\u0443\u0435\u043c \u043f\u0440\u0438\u043c\u0435\u043d\u0438\u0442\u044c KNN. \u041f\u043e\u0434\u0431\u0435\u0440\u0435\u043c \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0441\u043e\u0441\u0435\u0434\u0435\u0439 \u0441 \u043d\u0430\u0438\u0431\u043e\u043b\u044c\u0448\u0438\u043c accuracy \u043d\u0430 \u0442\u0435\u0441\u0442\u043e\u0432\u043e\u0439 \u0432\u044b\u0431\u043e\u0440\u043a\u0435. \u041f\u0435\u0440\u0435\u0431\u0438\u0440\u0430\u0435\u043c k \u043e\u0442 1 \u0434\u043e 8 \u0432\u043a\u043b\u044e\u0447\u0438\u0442\u0435\u043b\u044c\u043d\u043e.","e4f98e7c":"### 1. KNN","502abc36":"\u041e\u0431\u0443\u0447\u0430\u0435\u043c \u043c\u043e\u0434\u0435\u043b\u044c.","e9416a3e":"\u041f\u043e\u043b\u0443\u0447\u0438\u043b\u0438 \u0442\u043e\u0447\u043d\u043e\u0441\u0442\u044c \u0434\u043b\u044f new_test 0.90900. \u0418 \u044d\u0442\u043e \u043d\u0430\u0438\u043b\u0443\u0447\u0448\u0438\u0439 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442.","33155bcf":"\u0420\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442 \u043d\u0430 \u0442\u0435\u0441\u0442\u043e\u0432\u043e\u0439 \u0432\u044b\u0431\u043e\u0440\u043a\u0435 \u043f\u043e\u043b\u0443\u0447\u0438\u043b\u0441\u044f \u043d\u0438\u0436\u0435, \u043f\u043e\u044d\u0442\u043e\u043c\u0443 \u043d\u0435 \u0431\u0443\u0434\u0435\u043c \u0435\u0433\u043e \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c.","597f7818":"\u0417\u0430\u0433\u0440\u0443\u0436\u0430\u0435\u043c \u0442\u0435\u0441\u0442\u043e\u0432\u044b\u0439 \u043d\u0430\u0431\u043e\u0440, \u0434\u043b\u044f \u043a\u043e\u0442\u043e\u0440\u043e\u0433\u043e \u043d\u0443\u0436\u043d\u043e \u043f\u043e\u0441\u0442\u0440\u043e\u0438\u0442\u044c \u043f\u0440\u0435\u0434\u0441\u043a\u0430\u0437\u0430\u043d\u0438\u044f.","554471e6":"\u0421\u0442\u0440\u043e\u0438\u043c \u043f\u0440\u043e\u0433\u043d\u043e\u0437.","c3913db9":"\u0421\u043d\u0438\u0437\u0438\u043c \u0440\u0430\u0437\u043c\u0435\u0440\u043d\u043e\u0441\u0442\u044c \u043f\u0440\u043e\u0441\u0442\u0440\u0430\u043d\u0441\u0442\u0432\u0430 \u0441 \u043f\u043e\u043c\u043e\u0449\u044c\u044e PCA.","34f599ca":"\u041f\u043e\u0441\u0442\u0440\u043e\u0438\u043c \u043f\u0440\u043e\u0433\u043d\u043e\u0437 \u0434\u043b\u044f new_test. \u0414\u043b\u044f \u044d\u0442\u043e\u0433\u043e \u0434\u043b\u044f \u043d\u0430\u0447\u0430\u043b\u0430 \u0443 \u043d\u0435\u0433\u043e \u043d\u0443\u0436\u043d\u043e \u0442\u043e\u0436\u0435 \u0441\u043d\u0438\u0437\u0438\u0442\u044c \u0440\u0430\u0437\u043c\u0435\u0440\u043d\u043e\u0441\u0442\u044c.","810487fe":"Accuracy \u043f\u043e\u043b\u0443\u0447\u0438\u043b\u0430\u0441\u044c \u043d\u0438\u0436\u0435, \u0447\u0435\u043c \u0431\u0435\u0437 \u043f\u0440\u0438\u043c\u0435\u043d\u0435\u043d\u0438\u044f PCA. \u041f\u043e\u044d\u0442\u043e\u043c\u0443 \u043d\u0435 \u0431\u0443\u0434\u0435\u043c \u0434\u0435\u043b\u0430\u0442\u044c \u043f\u0440\u043e\u0433\u043d\u043e\u0437.","a5390066":"\u041e\u0447\u0435\u0432\u0438\u0434\u043d\u043e, \u0447\u0442\u043e PCA \u0441\u043f\u0440\u0430\u0432\u0438\u043b\u0441\u044f \u0445\u0443\u0436\u0435 t-SNE.","95c898a0":"\u041f\u0440\u043e\u0431\u0443\u0435\u043c \u0441\u0442\u0440\u043e\u0438\u0442\u044c \u043f\u0440\u043e\u0433\u043d\u043e\u0437 \u0441 \u043f\u043e\u043c\u043e\u0449\u044c\u044e \u043b\u043e\u0433\u0440\u0435\u0433\u0440\u0435\u0441\u0438\u0438 \u0438 SVC.","a89656ab":"\u041f\u0440\u043e\u0431\u0443\u0435\u043c \u043f\u0440\u0438\u043c\u0435\u043d\u0438\u0442\u044c \u0434\u0440\u0443\u0433\u0438\u0435 \u043a\u043b\u0430\u0441\u0441\u0438\u0444\u0438\u043a\u0430\u0442\u043e\u0440\u044b \u0438 \u0441\u0440\u0430\u0432\u043d\u0438\u0442\u044c \u0438\u0445 \u0441 KNN.","eaa51797":"\u041f\u043e\u0441\u043c\u043e\u0442\u0440\u0438\u043c \u043d\u0430 \u043f\u0435\u0440\u0432\u044b\u0435 155 \u043a\u0443\u043c\u0443\u043b\u044f\u0442\u0438\u0432\u043d\u044b\u0445 \u0434\u0438\u0441\u043f\u0435\u0440\u0441\u0438\u0439.","d15e83eb":"\u041f\u043e\u043f\u0440\u043e\u0431\u0443\u0435\u043c \u0438\u0437\u043c\u0435\u043d\u0438\u0442\u044c \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0433\u043b\u0430\u0432\u043d\u044b\u0445 \u043a\u043e\u043c\u043f\u043e\u043d\u0435\u043d\u0442 \u0438 \u043f\u043e\u0441\u043c\u043e\u0442\u0440\u0438\u043c \u043a\u0430\u043a\u0430\u044f \u0431\u0443\u0434\u0435\u0442 \u0442\u043e\u0447\u043d\u043e\u0441\u0442\u044c \u043d\u0430 \u0442\u0435\u0441\u0442\u043e\u0432\u043e\u0439 \u0432\u044b\u0431\u043e\u0440\u043a\u0435. \u0411\u0443\u0434\u0435\u043c \u043c\u0435\u043d\u044f\u0442\u044c \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043a\u043e\u043c\u043f\u043e\u043d\u0435\u043d\u0442 \u043e\u0442 50 \u0434\u043e 200 \u0441 \u0448\u0430\u0433\u043e\u043c 50.","0537e02a":"### 5. CatBoost","1d01d68b":"\u0418\u0437 \u0433\u0440\u0430\u0444\u0438\u043a\u0430 \u0432\u0438\u0434\u0438\u043c, \u0447\u0442\u043e \u0431\u0440\u044e\u043a\u0438 \u0438 \u0441\u0443\u043c\u043a\u0438 \u0445\u043e\u0440\u043e\u0448\u043e \u043e\u0442\u0434\u0435\u043b\u044f\u044e\u0442\u0441\u044f \u043e\u0442 \u043e\u0441\u0442\u0430\u043b\u044c\u043d\u044b\u0445 \u043a\u043b\u0430\u0441\u0441\u043e\u0432.","af3f8eb8":"\u0413\u0440\u0430\u0444\u0438\u043a \u043d\u0435\u0441\u0438\u043b\u044c\u043d\u043e \u043e\u0442\u043b\u0438\u0447\u0430\u0435\u0442\u0441\u044f \u043e\u0442 \u043f\u0440\u0435\u0434\u044b\u0434\u0443\u0449\u0435\u0433\u043e. \u041d\u043e \u043f\u0440\u0438 \u044d\u0442\u043e\u043c \u0432\u044b\u0447\u0438\u0441\u043b\u0435\u043d\u0438\u044f \u043f\u0440\u043e\u0438\u0441\u0445\u043e\u0434\u044f\u0442 \u0431\u044b\u0441\u0442\u0440\u0435\u0435. \u0411\u0435\u0437 PCA \u0443 \u043c\u0435\u043d\u044f \u0432\u044b\u0447\u0438\u0441\u043b\u0435\u043d\u0438\u044f \u0437\u0430\u043d\u044f\u043b\u0438 \u0431\u043e\u043b\u044c\u0448\u0435 \u0447\u0430\u0441\u0430. \u0415\u0441\u043b\u0438 \u0436\u0435 \u043f\u0440\u0435\u0434\u0432\u0430\u0440\u0438\u0442\u0435\u043b\u044c\u043d\u043e \u0443\u043c\u0435\u043d\u044c\u0448\u0438\u0442\u044c \u0440\u0430\u0437\u043c\u0435\u0440\u043d\u043e\u0441\u0442\u044c \u0441 \u043f\u043e\u043c\u043e\u0449\u044c\u044e PCA \u0434\u043e 155 \u043a\u043e\u043c\u043f\u043e\u043d\u0435\u043d\u0442, \u0442\u043e \u0432\u044b\u0447\u0438\u0441\u043b\u0435\u043d\u0438\u044f \u0437\u0430\u043d\u0438\u043c\u0430\u044e\u0442 \u043c\u0438\u043d\u0443\u0442 20.","23bd6a25":"\u041e\u0431\u0443\u0447\u0430\u0435\u043c \u043c\u043e\u0434\u0435\u043b\u044c.","8c4a30ab":"\u0412\u0438\u0434\u0438\u043c, \u0447\u0442\u043e \u043b\u043e\u0433\u0438\u0441\u0442\u0438\u0447\u0435\u0441\u043a\u0430\u044f \u0440\u0435\u0433\u0440\u0435\u0441\u0441\u0438\u044f \u0438 \u043c\u0435\u0442\u043e\u0434 \u043e\u043f\u043e\u0440\u043d\u044b\u0445 \u0432\u0435\u043a\u0442\u043e\u0440\u043e\u0432 \u0434\u0430\u044e\u0442 \u043d\u0435\u043f\u043b\u043e\u0445\u0438\u0435 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u044b.\n\u0422\u0430\u043a\u0436\u0435 \u044f \u0432\u044b\u0432\u0435\u043b\u0430 \u0432\u0440\u0435\u043c\u044f \u0437\u0430 \u043a\u043e\u0442\u043e\u0440\u043e\u0435 \u043a\u0430\u0436\u0434\u044b\u0439 \u0438\u0437 \u043c\u0435\u0442\u043e\u0434\u043e\u0432 \u043e\u0431\u0443\u0447\u0430\u0435\u0442\u0441\u044f.","94842c97":"### 2. \u0414\u0435\u0440\u0435\u0432\u043e \u0440\u0435\u0448\u0435\u043d\u0438\u0439, \u043b\u043e\u0433\u0440\u0435\u0433\u0440\u0435\u0441\u0441\u0438\u044f, \u043d\u0430\u0438\u0432\u043d\u044b\u0439 \u0431\u0430\u0439\u0435\u0441, \u043c\u0435\u0442\u043e\u0434 \u043e\u043f\u043e\u0440\u043d\u044b\u0445 \u0432\u0435\u043a\u0442\u043e\u0440\u043e\u0432","bb142693":"\u041f\u043e\u0441\u0442\u0440\u043e\u0438\u043c \u043f\u0440\u043e\u0433\u043d\u043e\u0437 \u0434\u043b\u044f new_test. \u0414\u043b\u044f \u044d\u0442\u043e\u0433\u043e \u0434\u043b\u044f \u043d\u0430\u0447\u0430\u043b\u0430 \u0443 \u043d\u0435\u0433\u043e \u043d\u0443\u0436\u043d\u043e \u0442\u043e\u0436\u0435 \u0441\u043d\u0438\u0437\u0438\u0442\u044c \u0440\u0430\u0437\u043c\u0435\u0440\u043d\u043e\u0441\u0442\u044c.","8edebce1":"### 7. \u041f\u043e\u0434\u0431\u043e\u0440 ccp_alpha \u0434\u043b\u044f \u0434\u0435\u0440\u0435\u0432\u0430 \u0440\u0435\u0448\u0435\u043d\u0438\u0439","28001c56":"\u041f\u0440\u0438\u043c\u0435\u043d\u0438\u043c t-SNE."}}