{"cell_type":{"746fbb12":"code","a3811761":"code","fb83ee83":"code","ba6f9f54":"code","019fae0e":"code","dafef773":"code","4a082a5e":"code","db32779d":"code","b1dc8bcf":"markdown","4f3bb1ad":"markdown","e417b8ec":"markdown","ae9314db":"markdown","101a6517":"markdown","5aaec5a2":"markdown","19e12330":"markdown","14b83085":"markdown","e36ac2d1":"markdown","d24f65e3":"markdown"},"source":{"746fbb12":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nfrom sklearn.model_selection import train_test_split #Split the data into training and testing\nfrom sklearn.tree import DecisionTreeClassifier #Get a tree to train\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","a3811761":"shroom = pd.read_csv(\"..\/input\/mushroom-classification\/mushrooms.csv\") #Read the mushroom dataset\nshroom.head() #Show the mushrooms","fb83ee83":"print(shroom.isnull().any()) #Check for any nulls","ba6f9f54":"poisonous = shroom[\"class\"].copy() #Get the characteristic we are looking for into one variable\ncharacteristics = shroom.drop(\"class\", axis = 1) #Get every other characteristic into another variable\ncharacteristics.head() #Take a peek at every other characteristic","019fae0e":"isPoison = pd.get_dummies(poisonous) #Changes the categorical poison or edible into 1 and 0 depending on the edibility\ncharacter = pd.get_dummies(characteristics) #Changes the character data into 1 and 0 for each characteristic\nprint(isPoison) #Prints isPoison to show the dummy structure","dafef773":"charaTrain, charaTest, poiTrain, poiTest = train_test_split(character, isPoison) #Splits the data into train and test sets","4a082a5e":"model = DecisionTreeClassifier() #Load our SVC\nmodel.fit(charaTrain, poiTrain) #Train it to the training data","db32779d":"poiTest.reset_index(drop=True, inplace=True) #Reset the poiTest index for iteration\npoison = [] #A list used to hold poiTest data in the form [[e,p]]\nscore = 0 #A score count for the model predictions\npredict = model.predict(charaTest) #Use the model to predict edibility\n\n#For loop to put poiTest into the poison list in the format [[e,p]], which is how the predictions come out\nfor i in range(0,len(poiTest)):\n    poison.append([poiTest[\"e\"][i], poiTest[\"p\"][i]]) #Append edibility status into the poison list\n    \npredictLength = len(predict) #Move the length calculation so it is not calculated every time the loop is run\n    \n#For loop to compare the poisonous status to the predicted poisonous status\nfor i in range(0 , predictLength):\n    if predict[i][0] ==  poison[i][0]: #If the prediction and actual have the same starting value, thus the same overall value\n        score += 1 #Add one to the score\n\nprint(\"This tree model predicted {} out of {} correctly, which gives an accuracy of {}%\".format(score, predictLength, int(score\/predictLength * 100))) #Print the score","b1dc8bcf":"The model produced at 100% accuracy. I would say that is a good time to stop.","4f3bb1ad":"---","e417b8ec":"No null values. Time to proceed.","ae9314db":"# Check for Null Values","101a6517":"# Classification Project: Mushroom Classification","5aaec5a2":"Coded by Luna McBride","19e12330":"---","14b83085":"# Run the data with a ML model","e36ac2d1":"---","d24f65e3":"# Split the data into train and test"}}