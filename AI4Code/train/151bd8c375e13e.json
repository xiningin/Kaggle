{"cell_type":{"d6db1e2b":"code","d9a81e57":"code","e84945b9":"code","e7982d8c":"code","e39b09e1":"code","2353d8a6":"code","91243155":"code","0408a328":"code","cf78ed70":"code","2745132d":"code","68d64dd6":"code","c2040453":"code","5c8b153d":"code","f13f7d60":"code","9de8e29a":"code","b260177c":"code","83dc6f66":"code","a875e9e3":"code","e304275a":"code","4a60aefc":"code","ad2a8752":"code","4ed9fca8":"code","195e3f74":"code","282da106":"code","109036dc":"code","794569e1":"code","9e11653f":"code","b17095c1":"code","29b3a9fa":"code","79aefc4f":"code","ce308e93":"code","f4b73b1f":"code","cf0c3cc1":"code","cc4a8604":"code","d245964c":"code","1f985758":"code","eab3fcf8":"code","a4d166ce":"code","a774fda3":"code","5f637b34":"markdown","45f54775":"markdown","ea15e0fa":"markdown","cf7bd780":"markdown","26764ea6":"markdown","b0927742":"markdown","fbcc864b":"markdown"},"source":{"d6db1e2b":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","d9a81e57":"import numpy as np \nimport pandas as pd \nimport matplotlib.pyplot as plt\n","e84945b9":"raw = pd.read_csv(\"\/kaggle\/input\/Iowa_Liqor.csv\", sep='\\t')","e7982d8c":"raw.drop([\"Date.1\"], axis=1, inplace=True)","e39b09e1":"raw.tail()","2353d8a6":"raw.info()","91243155":"from datetime import datetime\nraw.Date = pd.to_datetime(raw.Date) ","0408a328":"raw.info()","cf78ed70":"liqor = raw.set_index(raw['Date'])\nliqor = liqor.sort_index()","2745132d":"liqor[\"2015\"].tail()","68d64dd6":"liqor.shape","c2040453":"ls = liqor[\"Sale\"].resample(\"M\").sum()","5c8b153d":"ls.shape","f13f7d60":"plt.figure(figsize = (20, 10))\nplt.plot(ls, color = \"blue\", label = \"Monthly sales\")\nplt.title(\"Monthly sales\")\nplt.legend();","9de8e29a":"from statsmodels.tsa.stattools import adfuller\n\ndef test_stationarity(timeseries):\n    \n    #Determing rolling statistics\n#     rolmean = pd.rolling_mean(timeseries, window=12)\n#     rolstd = pd.rolling_std(timeseries, window=12)\n    \n    rolmean = pd.Series(timeseries).rolling(window=12).mean()\n    rolstd = pd.Series(timeseries).rolling(window=12).std()\n\n    #Plot rolling statistics:\n    plt.figure(figsize = (20, 10))\n    orig = plt.plot(timeseries, color='blue',label='Original')\n    mean = plt.plot(rolmean, color='red', label='Rolling Mean')\n    std = plt.plot(rolstd, color='black', label = 'Rolling Std')\n    plt.legend(loc='best')\n    plt.title('Rolling Mean & Standard Deviation')\n    plt.show(block=False)\n    \n    #Perform Dickey-Fuller test:\n    print ('Results of Dickey-Fuller Test:')\n    dftest = adfuller(timeseries, autolag='AIC')\n    dfoutput = pd.Series(dftest[0:4], index=['Test Statistic','p-value','#Lags Used','Number of Observations Used'])\n    for key,value in dftest[4].items():\n        dfoutput['Critical Value (%s)'%key] = value\n    print (dfoutput)","b260177c":"test_stationarity(ls)","83dc6f66":"ls_log = np.log(ls)\n\nplt.figure(figsize = (20, 10))\nplt.plot(ls_log, color = \"blue\", label = \"Monthly sales\")\nplt.title(\"Log Transformation Monthly sales\")\nplt.legend();\n","a875e9e3":"moving_avg = pd.Series(ls_log).rolling(window=12).mean()\n\nplt.figure(figsize = (20, 10))\n\nplt.plot(ls_log)\nplt.plot(moving_avg, color='red')\nplt.title('Moving Average')\nplt.show()","e304275a":"ls_log_moving_avg_diff = ls_log - moving_avg\nprint(ls_log_moving_avg_diff.head(12))","4a60aefc":"ls_log_moving_avg_diff.dropna(inplace=True)\ntest_stationarity(ls_log_moving_avg_diff)","ad2a8752":"\nexpwighted_avg = ls_log.ewm(halflife=12).mean()\n\nplt.figure(figsize = (20, 10))\n\nplt.plot(ls_log)\nplt.plot(expwighted_avg, color='red')\nplt.title('Exponentially Weighted Average')\nplt.show()\n","4ed9fca8":"ls_log_ewma_diff = ls_log - expwighted_avg\ntest_stationarity(ls_log_ewma_diff)","195e3f74":"ls_log_diff = ls_log - ls_log.shift()\n\nplt.figure(figsize = (15, 10))\n\nplt.plot(ls_log_diff)","282da106":"ls_log_diff.dropna(inplace=True)\ntest_stationarity(ls_log_diff)","109036dc":"from statsmodels.tsa.seasonal import seasonal_decompose\ndecomposition = seasonal_decompose(ls_log)\n\ntrend = decomposition.trend\nseasonal = decomposition.seasonal\nresidual = decomposition.resid\n\nplt.figure(figsize = (15, 10))\nplt.subplot(411)\nplt.plot(ls_log, label='Original')\nplt.legend(loc='best')\nplt.subplot(412)\nplt.plot(trend, label='Trend')\nplt.legend(loc='best')\nplt.subplot(413)\nplt.plot(seasonal,label='Seasonality')\nplt.legend(loc='best')\nplt.subplot(414)\nplt.plot(residual, label='Residuals')\nplt.legend(loc='best')\nplt.tight_layout()","794569e1":"ls_log_decompose = residual\nls_log_decompose.dropna(inplace=True)\ntest_stationarity(ls_log_decompose)","9e11653f":"from statsmodels.tsa.stattools import acf, pacf","b17095c1":"lag_acf = acf(ls_log_diff, nlags=20)\nlag_pacf = pacf(ls_log_diff, nlags=20, method='ols')","29b3a9fa":"#Plot ACF: \n\nplt.figure(figsize = (15, 10))\n\nplt.subplot(121) \nplt.plot(lag_acf)\nplt.axhline(y=0,linestyle='--',color='gray')\nplt.axhline(y=-1.96\/np.sqrt(len(ls_log_diff)),linestyle='--',color='gray')\nplt.axhline(y=1.96\/np.sqrt(len(ls_log_diff)),linestyle='--',color='gray')\nplt.title('Autocorrelation Function')\n\nplt.subplot(122)\nplt.plot(lag_pacf)\nplt.axhline(y=0,linestyle='--',color='gray')\nplt.axhline(y=-1.96\/np.sqrt(len(ls_log_diff)),linestyle='--',color='gray')\nplt.axhline(y=1.96\/np.sqrt(len(ls_log_diff)),linestyle='--',color='gray')\nplt.title('Partial Autocorrelation Function')\nplt.tight_layout()","79aefc4f":"from statsmodels.tsa.arima_model import ARIMA","ce308e93":"#AR Model\nmodel = ARIMA(ls_log, order=(2, 1, 0))  \nresults_AR = model.fit(disp=-1)  \nplt.figure(figsize = (15, 10))\nplt.plot(ls_log_diff)\nplt.plot(results_AR.fittedvalues, color='red')\nplt.title('RSS: %.4f'% sum((results_AR.fittedvalues-ls_log_diff)**2))","f4b73b1f":"#MA model\nmodel = ARIMA(ls_log, order=(0, 1, 2))  \nresults_MA = model.fit(disp=-1)  \nplt.figure(figsize = (15, 10))\nplt.plot(ls_log_diff)\nplt.plot(results_MA.fittedvalues, color='red')\nplt.title('RSS: %.4f'% sum((results_MA.fittedvalues-ls_log_diff)**2))","cf0c3cc1":"model = ARIMA(ls_log, order=(2, 1, 2))  \nresults_ARIMA = model.fit(disp=-1)\nplt.figure(figsize = (15, 10))\nplt.plot(ls_log_diff)\nplt.plot(results_ARIMA.fittedvalues, color='red')\nplt.title('RSS: %.4f'% sum((results_ARIMA.fittedvalues-ls_log_diff)**2))","cc4a8604":"predictions_AR_diff = pd.Series(results_AR.fittedvalues, copy=True)\npredictions_AR_diff.head()","d245964c":"predictions_AR_diff_cumsum = predictions_AR_diff.cumsum()\npredictions_AR_diff_cumsum.head()","1f985758":"#predictions_ARIMA_log = pd.Series(ls_log.loc[0], index=ls_log.index)\npredictions_AR_log = pd.Series(ls_log.loc[:], index=ls_log.index)\npredictions_AR_log = predictions_AR_log.add(predictions_AR_diff_cumsum,fill_value=0)\npredictions_AR_log.head()","eab3fcf8":"# predictions_ARIMA_log = pd.Series(indexedDataset_logScale['#Passengers'].iloc[0], index=indexedDataset_logScale.index)\n# predictions_ARIMA_log = predictions_ARIMA_log.add(predictions_ARIMA_diff_cumsum, fill_value=0)\n# predictions_ARIMA_log.head()","a4d166ce":"predictions_AR = np.exp(predictions_AR_log)\nplt.figure(figsize = (15, 10))\nplt.plot(ls)\nplt.plot(predictions_AR)\nplt.title('RMSE: %.2f'% np.sqrt(sum((predictions_AR-ls)**2)\/len(ls)))","a774fda3":"plt.figure(figsize = (20, 10))\nresults_AR.plot_predict(1,200) ","5f637b34":"##### Time for Forecasting !","45f54775":"##### Now to check for stationarity by using the Dickey Fuller Test, in which the null hyposthesis assumes that the data is non-stationary","ea15e0fa":"##### The sales are definitely increasing as we see the line lift  towards the end and the peaks becoming less steep. Showing an increase in casual drinking with a decrease in special occassion drinking.","cf7bd780":"##### The test statistic is higher than all critical values which means that the null hypethesis is true and that the data is not stationary","26764ea6":"##### This looks much better! The test statistic is smaller than 5% critical values. Now the time series can be said to be stationary with 95% confidence.\n##### Although we have taken out some values and restricted our data,  we need to correct this by giving more weight to the recent values ","b0927742":"##### Here we have a fairly accurate model. Let us show our forecasts","fbcc864b":"#### Now our test statistic is even lower than 1% critical values. \n\n#### Now lets eliminate trend ans seasonality"}}