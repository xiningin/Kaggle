{"cell_type":{"d8411982":"code","76f2cdf8":"code","c6512062":"code","4c7951bb":"code","95c46fd6":"code","208aa16f":"code","05fae57d":"code","ace249d1":"code","18bb480d":"code","6abc8a10":"code","0fd6a5d4":"code","e30f1a4e":"code","fe5d570e":"code","600e8708":"code","178cb831":"code","7860f26e":"code","18cd1c57":"markdown","05c3b010":"markdown","ab68d1af":"markdown","74d527a9":"markdown","9e9d2220":"markdown","3442747c":"markdown","3c03cbda":"markdown","f8b1e2a6":"markdown","b5ae5971":"markdown","35b43753":"markdown","585c1099":"markdown","37c05f52":"markdown","f822a307":"markdown","1afeee37":"markdown"},"source":{"d8411982":"import json\nimport pandas as pd\nimport requests\nimport matplotlib\nimport matplotlib.pyplot as plt\n%matplotlib inline\nimport geopandas\nimport numpy as np\nimport contextily as cx\n\nimport plotly\nimport plotly.graph_objects as go\nplotly.offline.init_notebook_mode(connected = True)\n","76f2cdf8":"field_code_to_name_manual = {\n    \"PAD_2C02\": \"Total de personas\",\n    \"PAD_2C03\": \"Pob. 0-4\",\n    \"PAD_2C04\": \"Pob. 5-9\",\n    \"PAD_2C05\": \"Pob. 10-14\",\n    \"PAD_2C06\": \"Pob. 15-19\",\n    \"PAD_2C07\": \"Pob. 20-24\",\n    \"PAD_2C08\": \"Pob. 25-29\",\n    \"PAD_2C09\": \"Pob. 30-34\",\n    \"PAD_2C10\": \"Pob. 35-39\",\n    \"PAD_2C11\": \"Pob. 40-44\",\n    \"PAD_2C12\": \"Pob. 45-49\",\n    \"PAD_2C13\": \"Pob. 50-54\",\n    \"PAD_2C14\": \"Pob. 55-59\",\n    \"PAD_2C15\": \"Pob. 60-64\",\n    \"PAD_2C16\": \"Pob. 65-69\",\n    \"PAD_2C17\": \"Pob. 70-74\",\n    \"PAD_2C18\": \"Pob. 75-79\",\n    \"PAD_2C19\": \"Pob. 80-84\",\n    \"PAD_2C20\": \"Pob. 85 o m\u00e1s\",\n    \n    \"PAD_2C21\": \"Total de varones\",\n    \"PAD_2C22\": \"Varones 0-4\",\n    \"PAD_2C23\": \"Varones 5-9\",\n    \"PAD_2C24\": \"Varones 10-14\",\n    \"PAD_2C25\": \"Varones 15-19\",\n    \"PAD_2C26\": \"Varones 20-24\",\n    \"PAD_2C27\": \"Varones 25-29\",\n    \"PAD_2C28\": \"Varones 30-34\",\n    \"PAD_2C29\": \"Varones 35-39\",\n    \"PAD_2C30\": \"Varones 40-44\",\n    \"PAD_2C31\": \"Varones 45-49\",\n    \"PAD_2C32\": \"Varones 50-54\",\n    \"PAD_2C33\": \"Varones 55-59\",\n    \"PAD_2C34\": \"Varones 60-64\",\n    \"PAD_2C35\": \"Varones 65-69\",\n    \"PAD_2C36\": \"Varones 70-74\",\n    \"PAD_2C37\": \"Varones 75-79\",\n    \"PAD_2C38\": \"Varones 80-84\",\n    \"PAD_2C39\": \"Varones 85 o m\u00e1s\",\n    \n    \"PAD_2C40\": \"Total de mujeres\",\n    \"PAD_2C41\": \"Mujeres 0-4\",\n    \"PAD_2C42\": \"Mujeres 5-9\",\n    \"PAD_2C43\": \"Mujeres 10-14\",\n    \"PAD_2C44\": \"Mujeres 15-19\",\n    \"PAD_2C45\": \"Mujeres 20-24\",\n    \"PAD_2C46\": \"Mujeres 25-29\",\n    \"PAD_2C47\": \"Mujeres 30-34\",\n    \"PAD_2C48\": \"Mujeres 35-39\",\n    \"PAD_2C49\": \"Mujeres 40-44\",\n    \"PAD_2C50\": \"Mujeres 45-49\",\n    \"PAD_2C51\": \"Mujeres 50-54\",\n    \"PAD_2C52\": \"Mujeres 55-59\",\n    \"PAD_2C53\": \"Mujeres 60-64\",\n    \"PAD_2C54\": \"Mujeres 65-69\",\n    \"PAD_2C55\": \"Mujeres 70-74\",\n    \"PAD_2C56\": \"Mujeres 75-79\",\n    \"PAD_2C57\": \"Mujeres 80-84\",\n    \"PAD_2C58\": \"Mujeres 85 o m\u00e1s\",\n    \n    \"PAD_3C03\": \"Pob. Espa\u00f1a\",\n    \"PAD_3C04\": \"Pob. extranjera\",\n    \n    \"PAD_3C05\": \"Pob. Uni\u00f3n Europea\",\n    \"PAD_3C06\": \"Pob. Alemania\",\n    \"PAD_3C07\": \"Pob. Bulgaria\",\n    \"PAD_3C08\": \"Pob. Francia\",\n    \"PAD_3C09\": \"Pob. Italia\",\n    \"PAD_3C10\": \"Pob. Polonia\",\n    \"PAD_3C11\": \"Pob. Portugal\",\n    \"PAD_3C12\": \"Pob. Reino Unido\",\n    \"PAD_3C13\": \"Pob. Ruman\u00eda\",\n    \n    \"PAD_3C14\": \"Pob. europea no comunitaria\",\n    \"PAD_3C15\": \"Pob. Rusia\",\n    \"PAD_3C16\": \"Pob. Ucrania\",\n    \n    \"PAD_3C17\": \"Pob. \u00c1frica\",\n    \"PAD_3C18\": \"Pob. Argelia\",\n    \"PAD_3C19\": \"Pob. Marruecos\",\n    \"PAD_3C20\": \"Pob. Nigeria\",\n    \"PAD_3C21\": \"Pob. Senegal\",\n    \n    \"PAD_3C22\": \"Pob. Am\u00e9rica\",\n    \"PAD_3C23\": \"Pob. Argentina\",\n    \"PAD_3C24\": \"Pob. Bolivia\",\n    \"PAD_3C25\": \"Pob. Brasil\",\n    \"PAD_3C26\": \"Pob. Colombia\",\n    \"PAD_3C27\": \"Pob. Cuba\",\n    \"PAD_3C28\": \"Pob. Chile\",\n    \"PAD_3C29\": \"Pob. Ecuador\",\n    \"PAD_3C30\": \"Pob. Paraguay\",\n    \"PAD_3C31\": \"Pob. Per\u00fa\",\n    \"PAD_3C32\": \"Pob. Rep_Dominicana\",\n    \"PAD_3C33\": \"Pob. Uruguay\",\n    \"PAD_3C34\": \"Pob. Venezuela\",\n    \n    \"PAD_3C35\": \"Pob. Asia\",\n    \"PAD_3C36\": \"Pob. China\",\n    \"PAD_3C37\": \"Pob. Pakist\u00e1n\",\n    \n    \"PAD_3C38\": \"Pob. Ocean\u00eda y Ap\u00e1tridas\",\n    \n    \"PAD_3C39\": \"Total Varones (Todas Nacionalidades)\",\n    \"PAD_3C40\": \"Varones Espa\u00f1a\",\n    \"PAD_3C41\": \"Varones Extranjeros\",\n    \n    \"PAD_3C42\": \"Varones Uni\u00f3n Europea\",\n    \"PAD_3C43\": \"Varones Alemania\",\n    \"PAD_3C44\": \"Varones Bulgaria\",\n    \"PAD_3C45\": \"Varones Francia\",\n    \"PAD_3C46\": \"Varones Italia\",\n    \"PAD_3C47\": \"Varones Polonia\",\n    \"PAD_3C48\": \"Varones Portugal\",\n    \"PAD_3C49\": \"Varones Reino Unido\",\n    \"PAD_3C50\": \"Varones Ruman\u00eda\",\n    \n    \"PAD_3C51\": \"Varones europea no comunitaria\",\n    \"PAD_3C52\": \"Varones Rusia\",\n    \"PAD_3C53\": \"Varones Ucrania\",\n    \n    \"PAD_3C54\": \"Varones \u00c1frica\",\n    \"PAD_3C55\": \"Varones Argelia\",\n    \"PAD_3C56\": \"Varones Marruecos\",\n    \"PAD_3C57\": \"Varones Nigeria\",\n    \"PAD_3C58\": \"Varones Senegal\",\n    \n    \"PAD_3C59\": \"Varones Am\u00e9rica\",\n    \"PAD_3C60\": \"Varones Argentina\",\n    \"PAD_3C61\": \"Varones Bolivia\",\n    \"PAD_3C62\": \"Varones Brasil\",\n    \"PAD_3C63\": \"Varones Colombia\",\n    \"PAD_3C64\": \"Varones Cuba\",\n    \"PAD_3C65\": \"Varones Chile\",\n    \"PAD_3C66\": \"Varones Ecuador\",\n    \"PAD_3C67\": \"Varones Paraguay\",\n    \"PAD_3C68\": \"Varones Per\u00fa\",\n    \"PAD_3C69\": \"Varones Rep_Dominicana\",\n    \"PAD_3C70\": \"Varones Uruguay\",\n    \"PAD_3C71\": \"Varones Venezuela\",\n    \n    \"PAD_3C72\": \"Varones Asia\",\n    \"PAD_3C73\": \"Varones China\",\n    \"PAD_3C74\": \"Varones Pakist\u00e1n\",\n    \n    \"PAD_3C75\": \"Varones Ocean\u00eda y Ap\u00e1tridas\",\n    \n    \"PAD_3C76\": \"Total Mujeres (Todas Nacionalidades)\",\n    \"PAD_3C77\": \"Mujeres Espa\u00f1a\",\n    \"PAD_3C78\": \"Mujeres Extranjeros\",\n    \n    \"PAD_3C79\": \"Mujeres Uni\u00f3n Europea\",\n    \"PAD_3C80\": \"Mujeres Alemania\",\n    \"PAD_3C81\": \"Mujeres Bulgaria\",\n    \"PAD_3C82\": \"Mujeres Francia\",\n    \"PAD_3C83\": \"Mujeres Italia\",\n    \"PAD_3C84\": \"Mujeres Polonia\",\n    \"PAD_3C85\": \"Mujeres Portugal\",\n    \"PAD_3C86\": \"Mujeres Reino Unido\",\n    \"PAD_3C87\": \"Mujeres Ruman\u00eda\",\n    \n    \"PAD_3C88\": \"Mujeres europea no comunitaria\",\n    \"PAD_3C89\": \"Mujeres Rusia\",\n    \"PAD_3C90\": \"Mujeres Ucrania\",\n    \n    \"PAD_3C91\": \"Mujeres \u00c1frica\",\n    \"PAD_3C92\": \"Mujeres Argelia\",\n    \"PAD_3C93\": \"Mujeres Marruecos\",\n    \"PAD_3C94\": \"Mujeres Nigeria\",\n    \"PAD_3C95\": \"Mujeres Senegal\",\n    \n    \"PAD_3C96\": \"Mujeres Am\u00e9rica\",\n    \"PAD_3C97\": \"Mujeres Argentina\",\n    \"PAD_3C98\": \"Mujeres Bolivia\",\n    \"PAD_3C99\": \"Mujeres Brasil\",\n    \n    \"PAD_3C100\": \"Mujeres Colombia\",\n    \"PAD_3C101\": \"Mujeres Cuba\",\n    \"PAD_3C102\": \"Mujeres Chile\",\n    \"PAD_3C103\": \"Mujeres Ecuador\",\n    \"PAD_3C104\": \"Mujeres Paraguay\",\n    \"PAD_3C105\": \"Mujeres Per\u00fa\",\n    \"PAD_3C106\": \"Mujeres Rep_Domincana\",\n    \"PAD_3C107\": \"Mujeres Uruguay\",\n    \"PAD_3C108\": \"Mujeres Venezuela\",\n    \"PAD_3C109\": \"Mujeres Asia\",\n    \"PAD_3C110\": \"Mujeres China\",\n    \"PAD_3C111\": \"Mujeres Pakist\u00e1n\",\n    \"PAD_3C112\": \"Mujeres Ocean\u00eda y Ap\u00e1tridas\",\n    \"PAD_3C113\": \"Mujeres China\",\n    \n    \"PAD_3_COD_PROV\": \"C\u00f3digo Provincia\",\n    \"PAD_3_COD_CCAA\": \"C\u00f3digo Comunidad Aut\u00f3noma\",\n}\n\ndef add_localities_natcode(census_localities):\n    \n    def locality_census_to_natcode(locality_census):\n        autonomy_code = locality_census[\"Cod_CCAA\"]\n        province_code = locality_census[\"Cod_Prov\"]\n        ine = locality_census[\"Codigo\"]\n        return f\"34{autonomy_code}{province_code}{ine}\"\n    \n    localities_natcodes = census_localities.apply(locality_census_to_natcode, axis=\"columns\")\n    return census_localities.set_index(localities_natcodes).rename_axis(index=\"NATCODE\")\n\nfile_geojson = \"\/kaggle\/input\/espaa-padrn-2017\/CensusSpain2017.geojson\"\nspain_localities_info = add_localities_natcode(\n    geopandas.read_file(file_geojson)\n    .rename(columns=field_code_to_name_manual)\n)","c6512062":"spain_localities_info.crs","4c7951bb":"spain_localities_info[\"Area\"] = spain_localities_info.to_crs(epsg=2062).geometry.area \/ 1e6\nspain_localities_info[\"Density\"] = spain_localities_info[\"Total de personas\"] \/ spain_localities_info[\"Area\"]","95c46fd6":"spain_localities_info = spain_localities_info.to_crs(epsg=3857)","208aa16f":"def plot_map(color, name=None, normalizer=None, tick_format=None, colormap=\"brg\"):\n    fig, ax = plt.subplots(1, 1, figsize=(20, 12))\n\n    ax.set_xlim(-1250000, 600000)\n    ax.set_ylim(4250000, 5500000)\n\n    spain_localities_info.plot(\n        ax=ax,\n        column=color,\n        legend=True,\n        cmap=colormap,\n        alpha=0.75,\n        norm=normalizer,\n        legend_kwds={\"format\": tick_format}\n    )\n\n    ax.tick_params(axis=\"both\", bottom=False, top=False, left=False, right=False, labelbottom=False, labelleft=False)\n\n    colorbar = fig.axes[1]\n    colorbar.tick_params(labelsize=20)\n    colorbar.set_ylabel(name, fontsize=20)\n\n    cx.add_basemap(ax, zoom=7)\n    \n    return fig\n\n\nplot_map(\n    color=\"Density\",\n    name=\"Density (people \/ km$^2$)\",\n    normalizer=matplotlib.colors.LogNorm(vmin=1, vmax=spain_localities_info.Density.max(), clip=True),\n    tick_format=\"%d\"\n);","05fae57d":"def calculate_diversity_score(target_population, reference_population):\n    total_target_population = target_population.sum()\n    total_reference_population = reference_population.sum()\n    \n    expected_target_population = reference_population * total_target_population \/ total_reference_population\n    \n    return target_population \/ expected_target_population","ace249d1":"diversity_score = calculate_diversity_score(\n    target_population=spain_localities_info[\"Pob. extranjera\"],\n    reference_population=spain_localities_info[\"Pob. Espa\u00f1a\"],\n)","18bb480d":"fig = plot_map(\n    diversity_score,\n    normalizer=matplotlib.colors.LogNorm(vmin=0.1, vmax=10, clip=True), \n    name=\"Diversity Score\",\n    tick_format=\"%.1f\",\n    colormap=\"bwr\"\n);","6abc8a10":"def calculate_relative_deviation_density(target_population, reference_population, area):\n    total_area = area.sum()\n    total_target_population = target_population.sum()\n    total_reference_population = reference_population.sum()\n    \n    expected_target_population = reference_population * total_target_population \/ total_reference_population\n    mean_target_density = total_target_population \/ total_area\n    \n    return (\n        (target_population - expected_target_population)\n        \/ (area * mean_target_density)\n    )","0fd6a5d4":"diversity_deviation_density = calculate_relative_deviation_density(\n    target_population=spain_localities_info[\"Pob. extranjera\"],\n    reference_population=spain_localities_info[\"Pob. Espa\u00f1a\"],\n    area=spain_localities_info[\"Area\"]\n)","e30f1a4e":"fig = plot_map(\n    diversity_deviation_density,\n    normalizer=matplotlib.colors.SymLogNorm(\n        linthresh=10,\n        linscale=1,\n        vmin=-diversity_deviation_density.abs().quantile(0.99),\n        vmax=diversity_deviation_density.abs().quantile(0.99),\n        clip=True\n    ),\n    name=\"Diversity Deviation Density\",\n    colormap=\"bwr\"\n)","fe5d570e":"# fig.savefig(\"DiversityDeviationDensity.png\")","600e8708":"nationality = \"China\"\nforeign_nationality_deviation_density = calculate_relative_deviation_density(\n    target_population=spain_localities_info[f\"Pob. {nationality}\"],\n    reference_population=spain_localities_info[\"Pob. Espa\u00f1a\"],\n    area=spain_localities_info[\"Area\"]\n)\n\nfig = plot_map(\n    foreign_nationality_deviation_density,\n    normalizer=matplotlib.colors.SymLogNorm(\n        linthresh=10,\n        linscale=1,\n        vmin=-foreign_nationality_deviation_density.abs().quantile(0.99),\n        vmax=foreign_nationality_deviation_density.abs().quantile(0.99),\n        clip=True\n    ),\n    name=f\"{nationality} Deviation Density\",\n    colormap=\"bwr\"\n)","178cb831":"# fig.savefig(\"ChinaDeviationDensity.png\")","7860f26e":"nationality = \"China\"\nforeign_nationality_deviation_density = calculate_relative_deviation_density(\n    target_population=spain_localities_info[f\"Pob. {nationality}\"],\n    reference_population=spain_localities_info[\"Pob. extranjera\"],\n    area=spain_localities_info[\"Area\"]\n)\n\nfig = plot_map(\n    foreign_nationality_deviation_density,\n    normalizer=matplotlib.colors.SymLogNorm(\n        linthresh=10,\n        linscale=1,\n        vmin=-foreign_nationality_deviation_density.abs().quantile(0.99),\n        vmax=foreign_nationality_deviation_density.abs().quantile(0.99),\n        clip=True\n    ),\n    name=f\"{nationality} Deviation Density\",\n    colormap=\"bwr\"\n)","18cd1c57":"# Setup","05c3b010":"The maps look very similar, but they are different. We can notice that in the subtleties. For exaple, the city of Granada has an unusually low number of foreign people and, hence, an unusually low number of Chinese people living ther. However, given that Granada is like that, i.e. given that it has the number of foreigners it has, the size of the Chinese population is actually higher than expected.","ab68d1af":"# Downloading the data\n\nThere are two types of data we need. On the one hand there is the demographic information about the geographical regions we want to study. In my case, I am interested in the population of Spain, my coutry. So I need the information about the people in each city, and its distribution across age groups, sexes and nationalities. On the other hand, we need the geographical information: geographical coordinates, shapes of the cities, etc.\n\nThe demographic information can come in a great variety of formats, and it depends on the organism that makes that data available in each country. So, don't get caught up in the particular information you have available at your country. The intention of this post is not that you replicate exactly what I do. It is much better if you create your own list of visualizations that you are interested in.\n\nIn any case, I am going to use the Spanish census population from the year 2017, available in https:\/\/opendata.esri.es\/datasets\/municipios-de-espa%C3%B1a-padron2017https:\/\/opendata.esri.es\/datasets\/municipios-de-espa%C3%B1a-padron2017\n\nIt turns out you can navigate to the downloads section and choose the file in .geojson format. In any case, the file is already available as input in the notebook.In any case, the file is already available as input in the notebook. This is the ideal format because the file contains, in addition to the census population of every town, the geometric shape of each one. Hence, we have all information we need in just one file.","74d527a9":"Now we can see that, in most of Spain, as it is mostly uninhabited, the deviation is close to 0 (white color). However, in highly populated cities, we see if they present a bigger or smaller diversity than expected.\n\nIn general, foreign population is unusually high in cities of the Mediterranean coast and Madrid.\nThe counterpart are the big cities of the rest of Spain: Sevilla, Salamanca, Valladolid, Pontevedra, Santander, A Coru\u00f1a, etc.\n\n## Distribution of foreigners of specific nationalities\nNow we can do the same but selecting specific nationalities.","9e9d2220":"The `geometry` column of `spain_localities_info`, which has been generated by Geopandas when reading the file in .geojson format, contains the shapes of the localities in Spain.\n\nA shape is nothing more than the sequence of points that, when joined together in order by straight lines, form a 2D polygon. So, for each city, we have a sequence of points that form the polygon with the shape of that city.\n\nBut, wait. The Earth is more or less like a Sphere, a 3-dimensional object. But the polygons in the `geometry` column are in a 2-dimensional space. In other words, each point of the polygon has an X and a Y coorditates.\nHow are they calculated? What is the X, Y coordinate for London for example?\n\nThe answer? They are calculated by projecting geographical locations to a Coordinate Reference System or CRS. A CRS is just a way transforming (projecting) each 3D real geographical location to a lower dimensional (2D) space. There is always a loss of information, a distortion. According to <a href=\"https:\/\/en.wikipedia.org\/wiki\/Map_projection\">Wikipedia<\/a>:\n\n> All projections of a sphere on a plane necessarily distort the surface in some way and to some extent\n\nAnd, in which way are locations distorted? It depends on the CRS. If we take the (X, Y) coordinates for London, Madrid, and Rome for example, the distance between them in the 2D space might be different from the real one, or maybe the angles of the triangle are different. It could be that the difference in distance is more pronunciated in the X direction than the Y direction.\n\nIn general, all types of distortions occurr to some extent. Hence, the question is not how to avoid distortion, but what type of distortion we are willing to allow. What type of distortion is not very critical for our application.\n\nThe way to know the CRS of a Geopandas DataFrame is to use the `crs` property. Sometimes the `crs` property is not going to be set because the data from the source does not have a CRS specified, but usually it does. Geographical coordinates without the CRS they use are pretty useless.\n\nAnyway, in our example the geographical data came with the CRS specified.","3442747c":"## Plotting\n\nNow, when plotting shapes on a map, we need the map as the background and the shapes to be drawed on top. The map and the shapes must use the same CRS.\n\nThe library for adding background maps we are going to use is <a href=\"https:\/\/contextily.readthedocs.io\/en\/latest\/\">Contextily<\/a>.\nBy default, it plots maps using the CRS <a href=\"https:\/\/en.wikipedia.org\/wiki\/Web_Mercator_projection\">Web Mercator<\/a>, also called <a href=\"https:\/\/epsg.io\/3857\">EPSG:3857<\/a>, which is different from the one we are using.\n\nAlthough Contextily has the option to change it, it looks to me it is easier to convert the geometry information using the `to_crs` function of Geopandas.","3c03cbda":"It seems that the geographic information from the source (and the one that has been loaded into the `geometry` column of `spain_localities_info`) is in a CRS (Coordinate Reference System) called <a href=\"https:\/\/en.wikipedia.org\/wiki\/World_Geodetic_System#WGS84\">WGS84<\/a> or <a href=\"https:\/\/epsg.io\/4326\">EPSG:4326<\/a>, which is what we popularly know as latitude and longitude coordinate system. \n\n## Calculating the area of shapes\n\nAs we are going to study the population density of towns in Spain, we need to calculate the area. GeoPandas has the <a href=\"https:\/\/geopandas.readthedocs.io\/en\/latest\/docs\/reference\/api\/geopandas.GeoSeries.area.html?highlight=area\">builtin property `area`<\/a> for calculating the area of the polygons in the `geometry` column.\n\nHowever, as we have just seen, some types of distortions (every CRS is a distortion) are more fit to a given application than others. We need to choose the right type of distortion. The units of the WGS84 system are not in meters but in degrees and moreover one unit distance of latitude does not represent the same distance as one unit distance in longitude. And, actually, the ratio between the two changes with the latitude.\n\nIn summary, it is not the approppriate system for calculating areas because distances are deeply distorted. The area of the polygons in this system does not have meaningful units and due to the distortion that increases with latitude, we cannot even compare areas of different parts of the world.\n\nWe need to project the data onto a CRS where distances are in meters and the distortion is not too big.\n\nFor Spain, a good CRS is <a href=\"https:\/\/epsg.io\/2062-8241\">EPSG:2062<\/a>. We will project the coordinates onto this CRS using the Geopandas <a href=\"https:\/\/geopandas.readthedocs.io\/en\/latest\/docs\/reference\/api\/geopandas.GeoSeries.to_crs.html\">builtin function `to_crs`<\/a> and then calculate the area.","f8b1e2a6":"And that's it! We have our map of population density.\n\n## Further exploration: distribution of foreigners in Spain\n\nWe might ask: what parts of spain have more foreigners?\nAnother way of asking it is: is foreign population distributed accross spain the same way nationals are?\nBefore answering the question with data, I would say big cities like Madrid, Barcelona and Valencia have a bigger proportion of foreigners than the rest of Spain, but it might not be true and be just a sensation.\n\nI have thought about two ways to answer this question visually. I think the second way is better, but I will start with the first one since it is more intuitive.\n\nIn order to answer what cities of Spain have more foreigners, we should compare to the amount of nationals that are living there. For example, almost 7% of all Spaniards (nationals) in Spain are living in Madrid.\nIf the distribution of foreigners was the same as nationals, we would expect the same proportion of them to live in Madrid.\n\nHowever, if there are more (as I suspect is the case), then that would mean that in that part of Spain is more cosmopolitan\/diverse, and we want the color of that city in the map to correspond to its level of diversity.\n\nHow can we come up with a number that is significative? To me, the most intuitive is just to divide the number of actual foreigners in a city by the expected number of them:\n\n$$\nS_i = \\frac{N_i}{\\mu^{(\\text{reference})}_{i}}\n$$\n\n$$\n\\mu^{(\\text{reference})}_{i} = \\frac{\\sum_i N_i}{\\sum_i N^{(\\text{reference})}_{i}} N^{(\\text{reference})}_{i}\n$$\n\nwhere\n- $S_i$ is the Diversity Score of the $i$-th municipality\/territory\/region.\n- $N_i$ is the number of people from the target population (the foreign population in this case) in the $i$-th municipality\n- $N_i^{(\\text{reference})}$ is the number of people from the reference population (the national population in this case) in the $i$-th municipality\n- $\\mu^{(\\text{reference})}_{i}$ is the expected number of people from the target population considering the distribution of the reference population as the expected one (Spaniard population in this case)","b5ae5971":"We can even do it using the total foreign population as a reference for the expected distribution, instead of the national distribution.\n\nIn this case, this would help detect the parts of Spain with unusually high density of, say, Germans for example, but not compared to the population of Spaniards, but to the population of foreigners.\n\nIn other words, we already know that Barcelona has lots of people from other countries, so it is not a surprise that there are lots of people from basically any country. But, given its cosmopolitanism, does it have more or less Chinese population, for example?","35b43753":"Now we are ready to plot!","585c1099":"Geographic and demographic visualizations are one of the most fun parts about data visualization. They allow you to connect technical skills with facts about the reality in which we live in in a very straightforward manner. This is a short exercise for showing how you can use GeoPandas and Matplotlib libraries to visualize simple but insightful facts about a country's population.","37c05f52":"## Reading geographical data\n\nWe can load the data from a .geojson file into a GeoDataFrame.\n\nA GeoWhat?\n\nWorking with Pandas DataFrames for any type of tabular data set is convenient, easy and popular. And in this post it is expected that you already know how to use Pandas. But, when dealing with geospatial data (like the shapes of municipalities), one might need to use some other libraries like Shapely to perform some operations: calculating areas, transforming to other coordinate system...\n\nFortunately, there is a library called GeoPandas, that makes it really easy to work with tabular data with geospatial data associated to it. This library extends the datatypes used by Pandas to allow spatial operations using Shapely. It also makes plotting maps very easily since it also uses Matplotlib utilities.\n\nA GeoDataFrame is very similar to a Pandas DataFrame, but one of the columns has geometric data that Shapely can operate on. It can be loaded as:\n\n```python\ngeo_dataframe = geopandas.read_file(file_geojson)\n```\n\nLet's do it, and also apply some post-processing for making the geodataframe easier to navigate:","f822a307":"Notice we have divided the area between 1000000 to transform square meters to square kilometers.","1afeee37":"Red tonalities mean that the nuber of foreigners is bigger than the expected. Blue tonalities mean the opposite.\nAs we can see, the east of Spain has, in general a bigger diversity score than the west.\n\nHowever, I find a problem with this visualization. Some town might be very big in extension, but not in population. There is, for example, a little town of less than 400 people, where only 70 of them are nationals. That part of the map is very red, but in terms of total population, it is not that relevant.\n\nHence, this visualization gives too much weight to municipalities with low density. This is why the diversity score is not very meaningful.\n\nI propose another score that will take in account the population of municipalities.\nInstead of taking the quocient, I will just take the difference between the actual and expected amount of foreigners, and then I will divide by the area of the municipality to transform it to a density. Therefore, this quantity is the \"excess\" of foreigners (the difference with respect to the expected quantity) per square kilometer that live in a municipality.\n\nIn this way, low populated towns will not be relevant at all (will appear with a white color), while very populated towns will have a weight proportional to its density.\n\nFinally, in order to appreciate the magnitude of the unbalance in the distribution of foreigners with respect the total size of the group, I will divide the current score by the mean density of foreign population per square kilometer. This way, the final quantity, which I will call Relative Deviation Density, can be thought of as the \"excess\" of proportion of foreigners per square kilometer.\n\n$$\nD_i = \\frac{N_i - \\mu^{(\\text{reference})}_{i}}{A_i \\frac{\\sum_i N_i}{\\sum_i A_i}}\n$$\n\n$$\n\\mu^{(\\text{reference})}_{i} = \\frac{\\sum_i N_i}{\\sum_i N^{(\\text{reference})}_{i}} N^{(\\text{reference})}_{i}\n$$\n\nwhere\n- $D_i$ is the Relative Deviation Density of the $i$-th municipality\/territory\/region.\n- $N_i$ is the number of people from the target population (the foreign population in this case) in the $i$-th municipality\n- $N_i^{(\\text{reference})}$ is the number of people from the reference population (the national population in this case) in the $i$-th municipality\n- $\\mu^{(\\text{reference})}_{i}$ is the expected number of people from the target population considering the distribution of the reference population as the expected one (Spaniard population in this case)\n- $A_i$ is the area of the $i$-th municipality in square kilometers"}}