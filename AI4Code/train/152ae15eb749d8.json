{"cell_type":{"689e2de4":"code","117edf86":"code","6ca2ab11":"code","24351c34":"code","5a08ade4":"code","21ca5538":"code","8b676d7e":"code","012c20e2":"code","d783f8da":"code","1e109019":"code","fe609bc7":"code","bb72eb1a":"markdown","4f6d6f07":"markdown","ee914b46":"markdown","bb6308df":"markdown","36184bc2":"markdown","507041cc":"markdown","397f9515":"markdown","a80ba6c3":"markdown","f700de42":"markdown","6e659a50":"markdown","d5672687":"markdown","000f03de":"markdown"},"source":{"689e2de4":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.linear_model import SGDClassifier\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.model_selection import GridSearchCV\nfrom sklearn.model_selection import cross_val_score\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","117edf86":"train_data = pd.read_csv('\/kaggle\/input\/titanic\/train.csv')\ntest_data = pd.read_csv('\/kaggle\/input\/titanic\/test.csv')","6ca2ab11":"train_data.head()","24351c34":"male = train_data.loc[train_data.Sex == 'male']['Survived']\nfemale = train_data.loc[train_data.Sex == 'female']['Survived']\n\npercent_male = (sum(male)\/len(male)) * 100\npercent_female = (sum(female)\/len(female)) * 100\n\nsex_data = [percent_male, percent_female]\nsex_data = np.array(sex_data)\nsex_labels = ['Male', 'Female']\n\nplt.bar(sex_labels, sex_data)\nplt.xlabel('Sex')\nplt.ylabel('Percent Survivors')\nplt.title('Percent of Survivors By Sex')\nplt.show()\n\nprint('%' + str(round(percent_male, 2)) + ' of males survived.')\nprint('%' + str(round(percent_female, 2)) + ' of females survived.')","5a08ade4":"twenty_or_less = train_data.loc[(train_data.Age <= 20)]['Survived']\nfifty_or_less =  train_data.loc[(train_data.Age < 20) & (train_data.Age <= 50)]['Survived']\nolder_than_fifty = train_data.loc[(train_data.Age > 50)]['Survived']\n\nage_data = [(sum(twenty_or_less)\/len(twenty_or_less)), (sum(fifty_or_less)\/len(fifty_or_less)), \n           (sum(older_than_fifty)\/len(older_than_fifty))]\n\nage_data = np.array(age_data) * 100\nage_labels = ['0-20', '21-50', '50+']\n\nplt.bar(age_labels, age_data)\nplt.xlabel('Ages')\nplt.ylabel('Percent Survivors')\nplt.title('Percent of Survivors By Age Group')\nplt.show()\n\nprint('%' + str(round(age_data[0], 2)) + ' of ages 20 or younger survived.')\nprint('%' + str(round(age_data[1], 2)) + ' of ages younger than 50 and older than 20 survived.')\nprint('%' + str(round(age_data[2], 2)) + ' of ages over 50 survived.')","21ca5538":"first_class = train_data.loc[(train_data.Pclass == 1)]['Survived']\nsecond_class =  train_data.loc[(train_data.Pclass == 2)]['Survived']\nthird_class = train_data.loc[(train_data.Pclass == 3)]['Survived']\n\nclass_data = [(sum(first_class)\/len(first_class)), (sum(second_class)\/len(second_class)), \n           (sum(third_class)\/len(third_class))]\n\nclass_data = np.array(class_data) * 100\nclass_labels = ['1st Class', '2nd Class', '3rd Class']\n\nplt.bar(class_labels, class_data)\nplt.xlabel('Class')\nplt.ylabel('Percent Survivors')\nplt.title('Percent of Survivors By Passenger Class')\nplt.show()\n\nprint('%' + str(round(class_data[0], 2)) + ' of 1st class survived.')\nprint('%' + str(round(class_data[1], 2)) + ' of 2nd class survived.')\nprint('%' + str(round(class_data[2], 2)) + ' of 3rd class survived.')","8b676d7e":"print('NaN training data:\\n')\nprint(train_data.isnull().sum())\nprint()\nprint('NaN testing data:\\n')\nprint(test_data.isnull().sum())","012c20e2":"train_data.fillna(train_data['Age'].mean(), axis = 1, inplace = True)\ntest_data.fillna(test_data['Age'].mean(), axis = 1, inplace = True)\n\nprint('NaN training data:\\n')\nprint(train_data.isnull().sum())\nprint('NaN testing data:\\n')\nprint(test_data.isnull().sum())","d783f8da":"y = train_data['Survived']\ntargets = ['Pclass', 'Sex', 'Age', 'PassengerId']\nX = pd.get_dummies(train_data[targets])\nX_test = pd.get_dummies(train_data[targets])\n\nKNN_model = KNeighborsClassifier()\nSGD_model = SGDClassifier()\nRFC_model = RandomForestClassifier()\n\nKNN_model.fit(X, y)\nKNN_predict = KNN_model.predict(X_test)\n\nSGD_model.fit(X, y)\nSGD_predict = SGD_model.predict(X_test)\n\nRFC_model.fit(X, y)\nRFC_predict = RFC_model.predict(X_test)","1e109019":"cv1 = cross_val_score(KNN_model, X, y, cv=10)\ncv2 = cross_val_score(SGD_model, X, y, cv=10)\ncv3 = cross_val_score(RFC_model, X, y, cv=10)\n\nKNN_model_score = cv1.mean()\nSGD_model_score = cv2.mean()\nRFC_model_score = cv3.mean()\n\nprint('KNN model score is ', KNN_model_score)\nprint('SGD model score is ', SGD_model_score)\nprint('RFC model score is ', RFC_model_score)","fe609bc7":"test_data = pd.get_dummies(test_data[targets])\n\nprediction = RFC_model.predict(test_data)\noutput = pd.DataFrame({'PassengerId': test_data['PassengerId'], 'Survived': prediction})\noutput.to_csv('submission.csv', index=False)\n\nprint(\"Submission generated.\")\npd.read_csv('submission.csv').head()","bb72eb1a":"# Exploratory Data Analysis","4f6d6f07":"**Finding and filling null values:**","ee914b46":"# Submission:\n(RFC is best model after evaluation)","bb6308df":"# Loading Data","36184bc2":"**Class of Survivors**","507041cc":"# Building the Models\n(Using Age, Sex, and Class)","397f9515":"# Evaluating the Models","a80ba6c3":"**Ages of Survivors:**","f700de42":"**Splitting data into testing\/training and creating models:**","6e659a50":"****","d5672687":"**Male vs Female Survivors:**","000f03de":"**Raw Data:**"}}