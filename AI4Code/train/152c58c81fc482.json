{"cell_type":{"ee0e4116":"code","017a10af":"code","cdbbcb59":"code","9da988a0":"code","2baea14e":"code","ae3df6fe":"code","cf4304ac":"code","55df5c92":"code","5e38853d":"code","82aba459":"code","f7b5abb4":"code","438454fa":"code","10539ce4":"code","9e838105":"code","cdd8e99f":"code","3d4858d6":"code","d2cf85b7":"code","48102afc":"code","7bf5ccd7":"code","662dff4b":"code","100f1592":"code","c6c42c4e":"code","8187962e":"code","572e6fef":"code","7defd384":"code","da7dc84d":"code","538cfdc0":"code","a4081400":"code","70202ac1":"code","beb2568d":"code","b9d196bc":"code","fff2dedb":"code","ca7d19f8":"code","fa045c52":"code","dfc21e90":"code","eca14097":"code","72cc6d09":"code","a8b90d51":"code","27fa4f8f":"code","c7800d33":"code","bb301766":"code","64d5b053":"code","889f1165":"code","a98cd516":"code","3457c5a7":"markdown","c85c518a":"markdown"},"source":{"ee0e4116":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","017a10af":"# Importing necessary libraries\nimport pandas as pd\nimport numpy as np\nfrom sklearn import metrics\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n%matplotlib inline","cdbbcb59":"# Importing boston dataset from sklearn\n\nfrom sklearn.datasets import load_boston\nboston = load_boston()","9da988a0":"boston.keys()","2baea14e":"# target columns i.e the price of the house\nboston.target[:2] ","ae3df6fe":"# consist of features i.e info. about the house\nboston.data ","cf4304ac":"# View the features in the boston dataset\nboston.feature_names","55df5c92":"# View the descriptions of boston dataset\nprint(boston.DESCR)","5e38853d":"data_frame = pd.DataFrame(boston.data, columns= boston.feature_names)\ndata_frame['PRICE'] = boston.target","82aba459":"# data_frame.columns =  # Giving Column names to out data\ndata_frame.head() ","f7b5abb4":"len(data_frame[data_frame['B']<350])","438454fa":"data_frame.shape","10539ce4":"sns.boxplot(data_frame['B'])","9e838105":"np.set_printoptions(suppress=True)\nnp.percentile(data_frame['CRIM'],np.arange(1,99))","cdd8e99f":"data_frame.info()","3d4858d6":"# Using box plots for detecting features with outliers\nfor i in data_frame.drop(['CHAS','PRICE','RM'], axis=1).columns:\n    print(i)\n    sns.boxplot(data_frame[i],data = data_frame)\n    plt.show()","d2cf85b7":"# Method to remove outliers in all numeric features\ndef Outlier(data):\n    for column in data.drop(['CHAS','PRICE','RM'], axis=1).columns:\n        if data[column].dtype != object:\n            Q1 = np.percentile(data[column],25)\n            Q3 = np.percentile(data[column],75)\n            IQR =  Q3 - Q1\n            lower = Q1 - (1.5 * IQR) # min value allowed\n            upper = Q3 + (1.5 * IQR)  # max. value allowed\n            data.loc[:,column] = np.where(data[column].values > upper, upper, data[column].values)\n            data.loc[:,column] = np.where(data[column].values < lower, lower, data[column].values)\n           \n    return data\n\ndata_frame2 = Outlier(data_frame)\ndata_frame2.columns","48102afc":"# checking treated data for outliers\nfor i in data_frame2.columns:\n    print(i)\n    sns.boxplot(data_frame2[i],data = data_frame2)\n    plt.show()","7bf5ccd7":"sns.regplot(x=\"RM\",y=\"LSTAT\", data=data_frame2, fit_reg=True)\nplt.title(\"Relationship between No. of rooms and Lstat\")\nplt.show()","662dff4b":"# Between prices and No. of rooms\nsns.regplot(x=\"RM\",y=\"PRICE\", data=data_frame2)\nplt.title(\"Relationship between No. of rooms and Price\")\nplt.show()","100f1592":"# Between prices and Lower Status Population\nsns.regplot(y=\"PRICE\",x=\"LSTAT\", data=data_frame2, fit_reg= True)\nplt.title(\"Relationship between Lower Status Population and Price\")\nplt.show()","c6c42c4e":"sns.kdeplot(data_frame2['PRICE']) # kernal density estimation","8187962e":"# Distribution plots of features\nfor val in data_frame2.drop(['PRICE','CHAS'], axis = 1):\n    sns.distplot(data_frame2[val], kde = False,bins=20,label=val)\n    plt.legend()\n    plt.show()","572e6fef":"data_frame2[data_frame2.duplicated()==True].index # to get to know the duplicate data indexs","7defd384":"# Check Duplicate Records in a data\ndata_frame2.duplicated().sum()\ndata_frame2.drop_duplicates(inplace=True)","da7dc84d":"data_frame2.describe()","538cfdc0":"data_frame2.corr()","a4081400":"data_frame2.isna().sum() # total null value count","70202ac1":"fig=plt.figure(figsize=(18,8))\nsns.heatmap(data_frame.describe(), annot = True, fmt='0.2f', cmap='Pastel2') # used where data has more than 2d","beb2568d":"fig = plt.figure(figsize = (15,5))\nsns.heatmap(data_frame2.corr(), annot = True)","b9d196bc":"X = data_frame2.drop(['PRICE','CHAS','DIS','B'], axis = 1) # Independant Feature\ny = data_frame2['PRICE'] # Target","fff2dedb":"from sklearn.model_selection import train_test_split\n\n\nX_train, X_test, y_train, y_test = train_test_split(X,\n                                                    y,\n                                                    test_size = 0.25,\n                                                    random_state = 41)\n\nfrom sklearn.preprocessing import StandardScaler, MinMaxScaler\nsc = StandardScaler()  # mean around 0 ,and Variance around 1\nmin_max = MinMaxScaler()  # values will always lie in range 0-1\n\nx_train_transformed = min_max.fit_transform(X_train)\n\nx_test_transformed = min_max.transform(X_test) # will always return array","ca7d19f8":"pd.DataFrame(x_train_transformed, columns = X_train.columns) # getting dataframe out of transformed data","fa045c52":"X_test.head()","dfc21e90":"y_test.head()","eca14097":"# importing algorithm\nfrom sklearn.linear_model import LinearRegression\n\n# Create a Linear regressor\nlm = LinearRegression()\n\n# Train the model using the training sets \nlm.fit(x_train_transformed, y_train)","72cc6d09":"y_pred = lm.predict(x_test_transformed)\ny_pred","a8b90d51":"# visualising predictions along with actual data and price\ntest_results = pd.DataFrame(X_test)\ntest_results['y_test'] = y_test\ntest_results['predictions'] = y_pred\ntest_results","27fa4f8f":"display(lm.intercept_ , list(zip(lm.coef_, X_train.columns)))","c7800d33":"coeff_df = pd.DataFrame(lm.coef_, X.columns, columns=['Coefficient'])\ncoeff_df","bb301766":"from sklearn.metrics import  mean_absolute_error, mean_squared_error, r2_score","64d5b053":"print('R^2:',metrics.r2_score(y_test, y_pred))\nprint('Adjusted R^2:',1 - (1-metrics.r2_score(y_test, y_pred))*(len(y_test)-1)\/(len(y_test)-X_test.shape[1]-1))\nprint('MAE:',metrics.mean_absolute_error(y_test, y_pred))\nprint('MSE:',metrics.mean_squared_error(y_test, y_pred))\nprint('RMSE:',np.sqrt(metrics.mean_squared_error(y_test, y_pred)))","889f1165":"# TRAIN ERROR for transformed data\ny_train_pred = lm.predict(x_train_transformed)\n# # Model Evaluation\nprint('R^2 Train:',metrics.r2_score(y_train, y_train_pred))\nprint('Adjusted R^2:',1 - (1-metrics.r2_score(y_train, y_train_pred))*(len(y_train)-1)\/(len(y_train)-X_train.shape[1]-1))\nprint('MAE train:',metrics.mean_absolute_error(y_train, y_train_pred))\nprint('MSE train:',metrics.mean_squared_error(y_train, y_train_pred))\nprint('RMSE:',np.sqrt(metrics.mean_squared_error(y_train,y_train_pred)))\n\n\n# Testing Error(x_test_transformed)\nprint('\\n R^2 Test:',metrics.r2_score(y_train, y_train_pred))\ny_pred = lm.predict(x_test_transformed)\nprint('Adjusted R^2:',1 - (1-metrics.r2_score(y_test, y_pred))*(len(y_test)-1)\/(len(y_test)-X_test.shape[1]-1))\nprint('MAE test:',metrics.mean_absolute_error(y_test, y_pred))\nprint('MSE test:',metrics.mean_squared_error(y_test, y_pred))\nprint('RMSE:',np.sqrt(metrics.mean_squared_error(y_test, y_pred)))","a98cd516":"plt.scatter(y_test,\n            y_pred , \n            color = 'red')\nplt.xlabel(\"Prices\")\nplt.ylabel(\"Predicted prices\")\nplt.title(\"Prices vs Predicted prices\")\nplt.show()","3457c5a7":"With this heatmap, we can see : \nRM is the most +ve correlated feature and  \nLSTAT is the most -ve correlated feature for the target Y.","c85c518a":"A real estate company wants to build homes at different locations in Boston. They have data for historical prices but haven\u2019t decided the actual prices yet. They want to price the homes so that they are affordable to the general public.\nObjective:\n* Import the Boston data from sklearn and read the description using DESCR.\n* Analyze the data and predict the approximate prices for the houses.\n\nThe team also wants to cross-reference results using regularization techniques.\n* Build a predictive model using Ridge, Lasso, and ElasticNet.\n* Compare the models on the basis of accuracy.\n\nThe required data set for this project is inbuilt in Python sklearn package"}}