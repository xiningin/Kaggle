{"cell_type":{"e7426f3b":"code","8e8a6ba2":"code","cbc9abe4":"code","f803f8d8":"code","70fe713d":"code","9d19df56":"code","5999ff17":"code","ca48c1a4":"code","73ee310b":"code","05e80852":"code","7ba4e425":"code","06469834":"code","8bdb9bce":"code","2c9ada89":"code","a2d8f2fd":"code","125d9b18":"code","9900ffbb":"code","161a3cbd":"code","c3ffaf50":"code","8fa455ea":"code","cd35627b":"code","d3eadf2b":"code","61eee61a":"code","add4dac2":"code","f25eb557":"code","e418f7d4":"code","70b8d999":"code","82a389f4":"code","f9b9fdbb":"code","a188f037":"code","668f1e68":"code","23f50ab0":"markdown","edcfe37e":"markdown"},"source":{"e7426f3b":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","8e8a6ba2":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\nimport warnings\nwarnings.filterwarnings('ignore')","cbc9abe4":"from plotly import tools\nimport plotly.express as px","f803f8d8":"complete_data = pd.read_csv('..\/input\/covid-19-till-june25-india\/complete.csv')\ncomplete_data.head()","70fe713d":"complete_data.info()","9d19df56":"complete_data['Date'] = pd.to_datetime(complete_data['Date'])\ncomplete_data['Date'] = complete_data['Date'].dt.strftime('%Y\/%m\/%d')","5999ff17":"complete_data.rename(columns={'Name of State \/ UT':'State\/UT','Total Confirmed cases':'Confirmed',\n                              'Cured\/Discharged\/Migrated':'Recovered'},inplace=True)","ca48c1a4":"data = complete_data[['Date','State\/UT','Confirmed','Death','Recovered']]\ndata.head()","73ee310b":"data.tail()","05e80852":"data.isnull().sum()","7ba4e425":"# getting number of active cases\ndata['Active'] = data['Confirmed'] - data['Death'] - data['Recovered']\ndata.head()","06469834":"latest = data[data['Date'] == data['Date'].max()]\nlatest.head()","8bdb9bce":"dates = data.groupby('Date')[['Confirmed','Death','Recovered','Active']].sum().reset_index()\ndates.head()","2c9ada89":"plt.figure(figsize=(14,6))\nplt.grid(True, color='w')\nplt.gca().patch.set_facecolor('0.88')\nplt.plot(dates.Date, dates.Confirmed, color='blue', label='Confirmed')\nplt.plot(dates.Date, dates.Death, color='red', label='Deaths')\nplt.plot(dates.Date, dates.Recovered, color='green', label='Recovered')\nplt.fill_between(dates.Date, dates.Confirmed, color='lightblue', alpha=0.5)\nplt.fill_between(dates.Date, dates.Death, color='orange', alpha=0.5)\nplt.fill_between(dates.Date, dates.Recovered, color='lightgreen', alpha=0.5)\nplt.xticks(dates.Date[::4],rotation='45')\nplt.xlabel('Dates', size=15)\nplt.ylabel('Number of cases', size=15)\nplt.title('Corona cases over time in India', size=15)\nplt.legend()\nplt.show()","a2d8f2fd":"plt.figure(figsize=(14,6))\nplt.grid(True, color='w')\nplt.gca().patch.set_facecolor('0.88')\nplt.plot(dates.Date, dates.Active, color='orange', label='Active cases')\nplt.plot(dates.Date, dates.Recovered, color='green', label='Recovered')\nplt.fill_between(dates.Date, dates.Active, color='yellow', alpha=0.5)\nplt.fill_between(dates.Date, dates.Recovered, color='lightgreen', alpha=0.5)\nplt.xticks(dates.Date[::4],rotation='45')\nplt.xlabel('Dates', size=15)\nplt.ylabel('Number of cases', size=15)\nplt.title('Active and Recovered cases over time', size=15)\nplt.legend()\nplt.show()","125d9b18":"plt.figure(figsize=(14,6))\nplt.grid(True, color='w')\nplt.gca().patch.set_facecolor('0.88')\nplt.plot(dates.Date, dates.Active, color='green', label='Active cases')\nplt.plot(dates.Date, dates.Death, color='red', label='Deaths')\nplt.fill_between(dates.Date, dates.Active, color='lightgreen', alpha=0.5)\nplt.fill_between(dates.Date, dates.Death, color='orange', alpha=0.5)\nplt.xticks(dates.Date[::4],rotation='45')\nplt.xlabel('Dates', size=15)\nplt.ylabel('Number of cases', size=15)\nplt.title('Active and Death cases over time', size=15)\nplt.legend()\nplt.show()","9900ffbb":"recovery_rate = np.round(dates['Recovered']\/dates['Confirmed'], 3)*100\nmortality_rate = np.round(dates['Death']\/dates['Confirmed'], 3)*100\n\nplt.figure(figsize=(14,6))\nplt.grid(True, color='w')\nplt.gca().patch.set_facecolor('0.88')\nplt.plot(dates.Date, recovery_rate, color='orange', label='Recovered to per 100 confirmed cases')\nplt.plot(dates.Date, mortality_rate, color='green', label='Deaths to per 100 confirmed cases')\nplt.fill_between(dates.Date, recovery_rate, color='yellow', alpha=0.5)\nplt.fill_between(dates.Date, mortality_rate, color='lightgreen', alpha=0.5)\nplt.xticks(dates.Date[::4],rotation='45')\nplt.xlabel('Dates', size=15)\nplt.ylabel('Number of cases to per 100 cases', size=15)\nplt.title('Recovery and mortality rate cases over time', size=15)\nplt.legend()\nplt.show()","161a3cbd":"dates['New_cases'] = 0\nfor i in dates.index-1:\n    dates['New_cases'].iloc[i] = dates['Confirmed'].iloc[i]-dates['Confirmed'].iloc[i-1]\ndates['New_cases'].iloc[0] = dates['Confirmed'].iloc[0]\ndates.head()","c3ffaf50":"plt.figure(figsize=(20,8))\nplt.grid(True, color='w')\nplt.gca().patch.set_facecolor('0.88')\nsns.barplot(dates.Date, dates.New_cases, palette='winter', edgecolor='k')\nplt.xticks(rotation='90', size=7)\nplt.title('Daily increase in cases', size=15)\nplt.xlabel('Dates', size=15)\nplt.ylabel('Number of cases', size=15)\nplt.show()","8fa455ea":"temp = data.groupby(['Date','State\/UT'])[['Confirmed','Death','Recovered','Active']].sum().reset_index()\ntemp.head()","cd35627b":"temp['size'] = temp['Confirmed'].pow(0.3) * 3.5\ntemp['Latitude'] = complete_data['Latitude']\ntemp['Longitude'] = complete_data['Longitude']\npx.scatter_geo(temp, lat='Latitude', lon='Longitude', locationmode='country names', color='Confirmed',\n               hover_name='State\/UT', size='size', range_color=[1,100], scope='asia', animation_frame='Date', \n               projection='natural earth', color_continuous_scale='jet', title='Covid-19 cases over time in India').show()","d3eadf2b":"latest_data = latest.groupby('State\/UT')['Confirmed','Death','Recovered','Active'].sum().reset_index()\nlatest_data.head()","61eee61a":"top20_states = latest_data.sort_values('Confirmed',ascending=False).head(20).reset_index()\ntop20_states = top20_states.drop('index', axis=1)\ntop20_states","add4dac2":"plt.figure(figsize=(14,8))\nplt.grid(True, color='w')\nplt.gca().patch.set_facecolor('0.88')\nplt.plot(top20_states['State\/UT'],top20_states['Confirmed'], 'bo-', label='Confirmed')\nplt.plot(top20_states['State\/UT'],top20_states['Recovered'], 'go-', label='Recovered')\nplt.plot(top20_states['State\/UT'],top20_states['Death'], 'ro-', label='Death')\nplt.fill_between(top20_states['State\/UT'],top20_states['Confirmed'], color='lightblue', alpha=0.5)\nplt.fill_between(top20_states['State\/UT'],top20_states['Recovered'], color='lightgreen', alpha=0.5)\nplt.fill_between(top20_states['State\/UT'],top20_states['Death'], color='orange', alpha=0.5)\nplt.title('Covid19 with top 20 states in India', size=15)\nplt.xlabel('State\/UT name', size=15)\nplt.xticks(rotation='90')\nplt.ylabel('Number of cases', size=15)\nplt.legend()\nplt.show()","f25eb557":"plt.figure(figsize=(14,6))\nplt.grid(True, color='w')\nplt.gca().patch.set_facecolor('0.88')\nplt.barh(top20_states['State\/UT'],top20_states['Confirmed'], edgecolor='b')\nplt.title('Confirmed cases of top 20 State\/UT in India', size=15)\nplt.xlabel('Confirmed cases', size=15)\nplt.ylabel('State\/UT', size=15)\nplt.show()","e418f7d4":"plt.figure(figsize=(14,6))\nplt.grid(True, color='w')\nplt.gca().patch.set_facecolor('0.88')\nplt.barh(top20_states['State\/UT'],top20_states['Death'], edgecolor='b')\nplt.title('Death cases of top 20 State\/UT in India', size=15)\nplt.xlabel('Death cases', size=15)\nplt.ylabel('State\/UT', size=15)\nplt.show()","70b8d999":"plt.figure(figsize=(14,6))\nplt.grid(True, color='w')\nplt.gca().patch.set_facecolor('0.88')\nplt.barh(top20_states['State\/UT'],top20_states['Recovered'], edgecolor='b')\nplt.title('Recovered cases of top 20 Sate\/UT in India', size=15)\nplt.xlabel('Recovered cases', size=15)\nplt.ylabel('State\/UT', size=15)\nplt.show()","82a389f4":"plt.figure(figsize=(14,6))\nplt.grid(True, color='w')\nplt.gca().patch.set_facecolor('0.88')\nplt.barh(top20_states['State\/UT'],top20_states['Active'], edgecolor='b')\nplt.title('Active cases of top 20 State\/UT in India', size=15)\nplt.xlabel('Active cases', size=15)\nplt.ylabel('State\/UT', size=15)\nplt.show()","f9b9fdbb":"Maharashtra = temp[temp['State\/UT'] == 'Maharashtra']\nDelhi = temp[temp['State\/UT'] == 'Delhi']\nTamil_Nadu = temp[temp['State\/UT'] == 'Tamil Nadu']","a188f037":"plt.figure(figsize=(14,6))\nplt.grid(True, color='w')\nplt.gca().patch.set_facecolor('0.88')\nplt.plot(Maharashtra['Date'], Maharashtra['Confirmed'], color='red', label='Cases in Maharashtra')\nplt.plot(Delhi['Date'], Delhi['Confirmed'], color='green', label='Cases in Delhi')\nplt.plot(Tamil_Nadu['Date'], Tamil_Nadu['Confirmed'], color='blue', label='Cases in Tamil Nadu')\nplt.fill_between(Maharashtra['Date'], Maharashtra['Confirmed'], color='orange', alpha=0.3)\nplt.fill_between(Delhi['Date'], Delhi['Confirmed'], color='lightgreen', alpha=0.3)\nplt.fill_between(Tamil_Nadu['Date'], Tamil_Nadu['Confirmed'], color='lightblue', alpha=0.3)\nplt.xlabel('Dates', size=15)\nplt.xticks(rotation=90, size=7)\nplt.ylabel('Confirmed cases', size=15)\nplt.title('Covid19 spread over time')\nplt.legend()\nplt.show()","668f1e68":"plt.figure(figsize=(14,6))\nplt.grid(True, color='w')\nplt.gca().patch.set_facecolor('0.88')\nplt.plot(Maharashtra['Date'], Maharashtra['Death'], color='red', label='Deaths in Maharashtra')\nplt.plot(Delhi['Date'], Delhi['Death'], color='green', label='Deaths in Delhi')\nplt.plot(Tamil_Nadu['Date'], Tamil_Nadu['Death'], color='blue', label='Deaths in Tamil_Nadu')\nplt.fill_between(Maharashtra['Date'], Maharashtra['Death'], color='orange', alpha=0.5)\nplt.fill_between(Delhi['Date'], Delhi['Death'], color='lightgreen', alpha=0.5)\nplt.fill_between(Tamil_Nadu['Date'], Tamil_Nadu['Death'], color='lightblue', alpha=0.5)\nplt.xlabel('Dates', size=15)\nplt.xticks(rotation=90, size=7)\nplt.ylabel('Count of deaths', size=15)\nplt.title('Covid19 Deaths over time', size=15)\nplt.legend()\nplt.show()","23f50ab0":"***Observation:*** \\\nOn observing both Confirmed cases and Deaths over the time Delhi and Tamil Nadu are in the verge of repeating the Maharashtra, whereas the death rate in Maharashtra seems worse of all and it follows a increasing trend, which leaves us with the worries.","edcfe37e":"***Observation:***\n\nFrom this map, we can see clearly that disease is well spread in Maharashtra. We can also able to observe that Delhi and Tamil Nadu are following the trend of Maharashtra and are having high numbers."}}