{"cell_type":{"75457131":"code","8c3ed3be":"code","8cfc0dd7":"code","a6959470":"code","2ef16c4c":"code","232ce3cf":"code","57f59de8":"code","4060a298":"code","f3f09455":"code","d7d1cc37":"code","36c2c711":"markdown","7978f3b1":"markdown","0a12fbdc":"markdown","bd3ed27b":"markdown","a9f510a2":"markdown","04c713d4":"markdown","ead020b1":"markdown"},"source":{"75457131":"import numpy as np\nimport pandas as pd\nfrom sklearn.neighbors import NearestNeighbors\nimport os\nprint(os.listdir(\"..\/input\"))\n\npd.options.mode.chained_assignment = None  # default='warn'\n\n# calculate total distance of the path\ndef total_distance(dfcity,path):\n    prev_city = path[0]\n    total_distance = 0\n    step_num = 1\n    for city_num in path[1:]:\n        next_city = city_num\n        total_distance = total_distance + \\\n            np.sqrt(pow((dfcity.X[city_num] - dfcity.X[prev_city]),2) + pow((dfcity.Y[city_num] - dfcity.Y[prev_city]),2)) * \\\n            (1+ 0.1*((step_num % 10 == 0)*int(not(prime_cities[prev_city]))))\n        prev_city = next_city\n        step_num = step_num + 1\n    return total_distance","8c3ed3be":"santa_cities = pd.read_csv('..\/input\/cities.csv')\nsanta_cities.head()","8cfc0dd7":"santa_cities.describe()","a6959470":"def sieve_of_eratosthenes(n):\n    n = int(n)\n    primes = [True for i in range(n+1)] # Start assuming all numbers are primes\n    primes[0] = False # 0 is not a prime\n    primes[1] = False # 1 is not a prime\n    for i in range(2,int(np.sqrt(n)) + 1):\n        if primes[i]:\n            k = 2\n            while i*k <= n:\n                primes[i*k] = False\n                k += 1\n    return(primes)\n\n# find cities that are prime numbers\nprime_cities = sieve_of_eratosthenes(max(santa_cities.CityId))\nsanta_cities['prime'] = prime_cities\n\n# add a few columns\nsanta_cities = pd.concat([santa_cities,pd.DataFrame(columns=['next_city',\n                                                             'next_city_distance'\n                                                            ]\n                                                   )],sort=False)\nsanta_cities[['next_city','next_city_distance']] = santa_cities[['next_city','next_city_distance']].astype(float)\n\nsanta_cities.head(10)","2ef16c4c":"# find the optimal nearest neighbor for each row\n# exclude index row 0 to ensure that doesn't get assigned until the end\nsanta_cities_to_analyze = santa_cities.iloc[1:, 1:3]\nnbrs = NearestNeighbors(n_neighbors=100, algorithm='ball_tree').fit(santa_cities_to_analyze)\nnn_distances, nn_indices = nbrs.kneighbors(santa_cities_to_analyze)\n\n# loop through each layer of nearest neighbors\nfor i in range(1,nn_indices.shape[1]):\n    # only get rows where next_city is null\n    santa_cities_remaining = santa_cities.loc[santa_cities['next_city'].isnull()]\n    santa_cities_remaining = pd.concat([santa_cities_remaining,\n                                        pd.DataFrame(columns=['NN_city','NN_distance'])],\n                                       sort=False)\n    # get potential nearest neighbors in this layer\n    santa_cities_remaining['NN_city'] = pd.Series(data=nn_indices[:,i])\n    santa_cities_remaining['NN_distance'] = pd.Series(data=nn_distances[:,i])\n    \n    # set next_city to nearest neighbor in this layer\n    santa_cities['next_city'].update(santa_cities_remaining['NN_city'])\n    santa_cities['next_city_distance'].update(santa_cities_remaining['NN_distance'])\n    \n    # sort by the distance of nearest neighbors to favor shorter distances\n    santa_cities = santa_cities.sort_values(by=['next_city_distance'],ascending=True)\n    \n    # mark all duplicates of next_city except for the first with the shortest distance\n    santa_cities['duplicate'] = santa_cities.duplicated(subset='next_city', keep=\"first\")\n    # clear data for all duplicates\n    santa_cities.at[santa_cities['duplicate'] == True,'next_city'] = np.nan\n    santa_cities.at[santa_cities['duplicate'] == True,'next_city_distance'] = np.nan\n    \n    # TO DO - determine if I can remove this section of code with the merge\n    # check for one step recursive links between cities\n    santa_cities_test = santa_cities[['CityId','next_city']]\n    santa_cities_test.rename(columns={'CityId': 'next_city', 'next_city': 'compare_city'}, inplace=True)\n    santa_cities = santa_cities.reset_index().merge(santa_cities_test,\n                                                    on='next_city',\n                                                    how='left').set_index('index')\n    santa_cities.at[santa_cities['compare_city'] == santa_cities['CityId'],'next_city'] = np.nan\n    santa_cities.at[santa_cities['compare_city'] == santa_cities['CityId'],'next_city_distance'] = np.nan\n    santa_cities.drop(columns=['compare_city'], inplace=True)\n    \n    # check for deeper recursive links\n    santa_cities = pd.concat([santa_cities,pd.DataFrame(columns=['city_order',\n                                                                 'next_city_order']\n                                                       )],sort=False)\n    \n    santa_cities.at[0,'next_city'] = 146845 # ensure beginning of path is set\n    santa_cities.at[0,'next_city_distance'] = 7.358130\n    santa_recursion = santa_cities.loc[~santa_cities['next_city'].isnull()]\n    city_to_travel_next = 0\n    for i in range(1,len(santa_recursion)):\n        current_city = city_to_travel_next\n        santa_cities.at[santa_cities['CityId'] == current_city,'city_order'] = i\n        santa_cities.at[santa_cities['next_city'] == current_city,'next_city_order'] = i\n        try:\n            city_to_travel_next= int(santa_cities.at[current_city,'next_city'])\n        except:\n            break\n    \n    santa_cities.at[santa_cities['next_city_order'] < santa_cities['city_order'],'next_city'] = np.nan\n    santa_cities.at[santa_cities['next_city_order'] < santa_cities['city_order'],'next_city_distance'] = np.nan\n    santa_cities.drop(columns=['city_order','next_city_order'], inplace=True)\n    \n    # ensure 0 doesn't get marked as a next_city and is left for the very end\n    santa_cities.at[santa_cities['next_city'] == 0,'next_city'] = np.nan\n    santa_cities.at[santa_cities['next_city'] == 0,'next_city_distance'] = np.nan\n    \n    # sort index to normal ordering again\n    santa_cities.sort_index(inplace=True)\n\n# show number of remaining cities that still need a next_city\nprint(santa_cities['next_city'].isnull().sum())","232ce3cf":"if 'duplicate' in santa_cities.columns:\n    santa_cities.drop(columns=['duplicate'],inplace=True)\nsanta_cities.index.name = None\nsanta_cities.head(10)","57f59de8":"print(\"Total optimized nn attempt distance so far is {:,}\".format(santa_cities['next_city_distance'].sum()))","4060a298":"#santa_cities.nunique()\n\n#santa_path = []\n#city_to_travel_next = int(0)\n#santa_path_cities = santa_cities.loc[~santa_cities['next_city'].isnull()]\n\n#for i in range(1,len(santa_cities)): #len(santa_cities)\n#    current_city = city_to_travel_next\n#    santa_path.append(current_city)\n#    city_to_travel_next = int(santa_cities.iloc[current_city,4])\n\n#santa_path.append(0)\n#len(santa_path)\n\n# check for recursion in travel path\n#print(len(set(santa_path)))\n\n#print(\"Total optimized nn attempt distance is {:,}\".format(total_distance(santa_cities,santa_path)))","f3f09455":"def nearest_neighbour():\n    cities = pd.read_csv(\"..\/input\/cities.csv\")\n    ids = cities.CityId.values[1:]\n    xy = np.array([cities.X.values, cities.Y.values]).T[1:]\n    path = [0,]\n    while len(ids) > 0:\n        last_x, last_y = cities.X[path[-1]], cities.Y[path[-1]]\n        dist = ((xy - np.array([last_x, last_y]))**2).sum(-1)\n        nearest_index = dist.argmin()\n        path.append(ids[nearest_index])\n        ids = np.delete(ids, nearest_index, axis=0)\n        xy = np.delete(xy, nearest_index, axis=0)\n    path.append(0)\n    return path\n\npath_nn = nearest_neighbour()\nprint(\"Total nn distance is {:,}\".format(total_distance(santa_cities,path_nn)))","d7d1cc37":"pd.DataFrame({'Path':path_nn}).to_csv('nearest_neighbor_cities.csv',index = False)","36c2c711":"Determine cities that are prime numbers.","7978f3b1":"The random assignment of nearest neighbors below came from [XYZT's kernel](https:\/\/www.kaggle.com\/thexyzt\/xyzt-s-visualizations-and-various-tsp-solvers).","0a12fbdc":"Generate the output file for submission to the competition.","bd3ed27b":"Try to optimize the nearest neighbors by assigning the shortest distances first.","a9f510a2":"The distance shown below is already trending higher than a lazy approach to nearest neighbor assignment so I'm abandoning the exploration...but it was a fun challenge for me to try out.","04c713d4":"I commented out most of the code in the block below because I don't want to build a travel path now since the distance is trending higher than other options.","ead020b1":"For the sake of my own curiosity, I wanted to look at whether I could improve on a nearest neighbor assignment by starting with assigning the nearest neighbors for shorter distances first then move on to longer distances rather than just letting the neighbors get assigned randomly as seen in [XYZT's kernel](https:\/\/www.kaggle.com\/thexyzt\/xyzt-s-visualizations-and-various-tsp-solvers).\n\nThe short answer: NO!\n\nYou can see below that the total distance traveled between my \"optimized nn\" path versus the \"nn\" path below."}}