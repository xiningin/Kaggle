{"cell_type":{"0b338311":"code","e926c2c3":"code","46707e37":"code","153b8ab4":"code","e5a5ffb4":"code","a33f57cc":"code","6b065a22":"code","7cb99799":"code","1084b1f0":"code","72f85a08":"code","826d5da3":"code","9d3f0252":"code","6cca2f12":"code","7b431084":"code","2f38b219":"code","5e932ca0":"code","dc3125c2":"code","befdf05a":"code","c78b41c7":"markdown","81dad32e":"markdown","eb857586":"markdown","7a21f2ca":"markdown","427e74ac":"markdown","9d55495b":"markdown","19f22bb3":"markdown","15613fd8":"markdown","fdaad3d8":"markdown","896db0e4":"markdown"},"source":{"0b338311":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport random\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nif 1==0:\n    for dirname, _, filenames in os.walk('\/kaggle\/input'):\n        for filename in filenames:\n            print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","e926c2c3":"from kaggle_environments import make, evaluate\n\n# Create the game environment\n# Set debug=True to see the errors if your agent refuses to run\nenv = make(\"connectx\", debug=True)\n\n# List of available default agents\nprint(list(env.agents))","46707e37":"# Selects random valid column\ndef agent_random(obs, config):\n    valid_moves = [col for col in range(config.columns) if obs.board[col] == 0]\n    return random.choice(valid_moves)\n\n# Selects middle column\ndef agent_middle(obs, config):\n    valid_moves = [col for col in range(config.columns) if obs.board[col] == 0]\n    if config.columns\/\/2 in valid_moves:\n        return config.columns\/\/2\n    else:\n        return random.choice(valid_moves)\n\n# Selects leftmost valid column\ndef agent_leftmost(obs, config):\n    valid_moves = [col for col in range(config.columns) if obs.board[col] == 0]\n    return valid_moves[0]","153b8ab4":"# check if column contains key\ndef three_in_col(col, key):\n    found=False\n    for i in range(0,len(col)-len(key)+1):\n        if str(key) == str(col[i:len(key)+i]):\n            return(True)\n    return(False)","e5a5ffb4":"# check if row contains a winning spot\ndef three_in_row(row, my_mark, numtowin):\n    win_spot_col=[]\n    for i in range(0,len(row)-numtowin+1):\n        # subset to num to win\n        sub_row = row[i:numtowin+i]\n        # check if there are 3's of my_mark\n        num_mymark = np.count_nonzero(sub_row == my_mark)\n        if num_mymark == numtowin - 1:\n            if 0 in row[i:numtowin+i]:\n                wi_rep_idx = np.where(sub_row==0)[0][0]\n                win_spot_col.append(\n                    i + wi_rep_idx)\n    return(win_spot_col)","a33f57cc":"# This returns either:\n# * The columns that will allow you to win\n# * The column to block the opponent from winning\n# * -1 meaning that no one is winning in the next round\ndef essential_move(mark, board, valid_moves, config):\n    # parameters:\n    # * threekey: combination to win. For example if we \n    #   want to connect 4 the combination to win is [1,1,1,0]\n    #   (given that we are player 1)\n    # * board: the matrix containing the board (the bottom row\n    #   should be index 0)\n    # * valid moves: open columns on board\n    # * config: configuration of the board\n    \n    threekey = [int(x) for x in list(np.ones(config.inarow-1) * mark) +[0]]\n    \n    # connect 4 in column\n    for move in valid_moves:\n        threeInCol = three_in_col(board[:,move],np.array(threekey))\n        if threeInCol:\n            return(move)\n    winning_col=[]\n    winning_row=[]\n    \n    for row_i in range(0,config.rows):\n        row=board[row_i,:]\n        \n        # connect 4 in row\n        win_cols_in_row_i=three_in_row(row, mark, config.inarow)\n        if len(win_cols_in_row_i) > 0:\n            winning_col+=win_cols_in_row_i\n            winning_row+=([row_i]*len(win_cols_in_row_i))\n        \n        # connect 4 in a diagonal\n        d_start = np.where(row==mark)\n        for ds in list(d_start[0]):\n            # right diagonal\n            if (row_i + (config.inarow - 1) < config.rows\n                and (ds + (config.inarow - 1) < config.columns)):\n                good=0\n                good_row=-1\n                good_col=-1\n                for k in range(1,config.inarow):\n                    if board[row_i+k,ds+k]==mark:\n                        good+=1\n                    elif board[row_i+k,ds+k]==0:\n                        good_row=row_i+k\n                        good_col=ds+k\n                if good==config.inarow - 1:\n                    winning_col+=[good_col]\n                    winning_row+=[good_row]\n            # left diagonal\n            if (row_i + (config.inarow - 1) < config.rows\n                and (ds - (config.inarow - 1) > -1)):\n                good=0\n                good_row=-1\n                good_col=-1\n                for k in range(1,len(threekey)):\n                    if board[row_i+k,ds-k]==mark:\n                        good+=1\n                    elif board[row_i+k,ds-k]==0:\n                        good_row=row_i+k\n                        good_col=ds-k\n                if good==config.inarow - 1:\n                    winning_col+=[good_col]\n                    winning_row+=[good_row]\n            \n            \n    # check if winning spot is available\n    for i in range(0,len(winning_col)):\n        wcol=winning_col[i]\n        wrow=winning_row[i]\n        if wrow - 1 < 0 or board[wrow-1,wcol]!=0:\n            if wcol in valid_moves:\n                return(int(wcol))\n    return(-1)","6b065a22":"import sys\n# Selects random valid column\ndef agent_without_a_plan(obs, config):\n    # `obs` contains 2 peices of information\n    b_m=np.flip(\n        np.resize(obs.board,(config.rows,config.columns)),0)\n    valid_moves = [col for col in range(config.columns) if obs.board[col] == 0]\n    \n    # get opponents mark\n    opp_mark=1\n    if obs.mark==1:\n        opp_mark=2\n        \n    # always perform these first two moves if available\n    #if b_m[2,3]==0 and (b_m[0,3]==0 or b_m[0,3]==obs.mark):\n    #    return int(3)\n    \n    # LAST MOVE TO WIN\n    # combo2win\n    #combo2win = [int(x) for x in list(np.ones(config.inarow-1) * obs.mark)+[0]]\n    winning_move = essential_move(obs.mark,b_m, \n                                  valid_moves, config)\n    if winning_move != -1:\n        return(winning_move)\n    \n    # BLOCK OPPONENT FROM WINNING\n    # combo2lose\n    #combo2lose = [int(x) for x in list(np.ones(config.inarow-1) * opp_mark)+[0]]\n    block_winning_move = essential_move(opp_mark,b_m,\n                                        valid_moves, config)\n    if block_winning_move != -1:\n        return(block_winning_move)\n    \n    return random.choice(valid_moves)","7cb99799":"# returns row that mark will be placed at\n# in the given column\ndef drop_chip_row(board, column, nrows):\n    drop=False\n    for row_i in range(0,nrows):\n        if board[row_i,column]==0:\n            return(row_i)\n    return(-1)\n            ","1084b1f0":"# This function is returns the score of dropping \n# a chip in column `drop_col`\ndef score_drop(board, drop_col, my_mark,config):\n    opp_mark=1\n    if my_mark==1:\n        opp_mark=2\n    drop_row = drop_chip_row(board, drop_col, config.rows)\n    # 1. get score of marks in a column\n    ## automatic .25 is given since dropping a chip down is .25 points\n    col_score=.25 \n    ## given .25 points to each chip that is consecutively below\n    ## the one you plan to drop\n    if drop_row > 0:            \n        next_row = drop_row - 1\n        while next_row >= 0 and next_row > drop_row - config.inarow:\n            if board[next_row,drop_col] == my_mark:\n                col_score+=.25\n            else:\n                next_row = -1\n            next_row = next_row - 1\n    ## if the chip is near the top it gets 0 points\n    ## if we cannot make a column of 4\n    if (drop_row > config.rows - config.inarow):\n        score_threshold = (config.inarow -\n                          (config.rows - drop_row)) * .25\n        if .25 + score_threshold > col_score:\n            col_score = 0\n    score = col_score\n        \n    # 2. get score of marks in a row\n    if score != 1:\n        row_score=0\n        leftmost=drop_col-(config.inarow-1)\n        if leftmost < 0:\n            leftmost=0\n        while leftmost <= config.columns - config.inarow:\n            rightmost=leftmost+config.inarow\n\n            row_of_four = board[drop_row,leftmost:rightmost]\n            if not np.isin(opp_mark,row_of_four):\n                new_row_score=.25 + (np.count_nonzero(row_of_four == my_mark)* .25)\n                if new_row_score > row_score:\n                    row_score = new_row_score\n            leftmost+=1\n        if row_score==.25:\n            row_score=0\n        if row_score > score:\n            score = row_score\n        \n    # 3. get score of marks in a RIGHT diagonal\n    if score != 1:\n        right_d_score=0\n\n        ## get the lowest possible diagonal from this point\n        leftmost_col=drop_col-(config.inarow-1)\n        lowest_row=drop_row-(config.inarow-1)\n        ## check if the row or column is below zero\n        ## if this is so, we need to adjust the bottom\n        ## of the diagonal\n        col_below_zero=0\n        if leftmost_col < 0:\n            col_below_zero=leftmost_col*-1\n        row_below_zero=0\n        if lowest_row < 0:\n            row_below_zero=lowest_row*-1\n        if col_below_zero > row_below_zero:\n            leftmost_col = 0\n            lowest_row = lowest_row + col_below_zero\n        elif col_below_zero < row_below_zero:\n            lowest_row = 0\n            leftmost_col = leftmost_col + row_below_zero\n        elif row_below_zero > 0:\n            leftmost_col = 0\n            lowest_row = 0\n\n        diag_of_four = np.array([])\n        end_of_diag_col=leftmost_col + (config.inarow - 1)\n        end_of_diag_row=lowest_row + (config.inarow - 1)\n        while (leftmost_col <= drop_col and\n              end_of_diag_col < config.columns and\n              end_of_diag_row < config.rows):\n            ## get values of sub-diagonal in diag_of_four\n            if len(diag_of_four)==0:\n                for i in range(0,config.inarow):\n                    diag_of_four=np.append(diag_of_four,board[lowest_row+i,leftmost_col+i])\n            else:\n                diag_of_four = np.delete(diag_of_four, 0)\n                i = config.inarow - 1\n                diag_of_four = np.append(diag_of_four,board[lowest_row+i,leftmost_col+i])\n\n            ## get score given diag_of_four\n            if not np.isin(opp_mark,diag_of_four):\n                new_rdiag_score=.25 + (np.count_nonzero(diag_of_four == my_mark)* .25)\n                if new_rdiag_score > right_d_score:\n                    right_d_score = new_rdiag_score\n            leftmost_col+=1\n            lowest_row+=1\n            end_of_diag_col=leftmost_col + (config.inarow - 1)\n            end_of_diag_row=lowest_row + (config.inarow - 1)\n        if right_d_score > score:\n            score = right_d_score\n            \n    # 4. get score of marks in a LEFT diagonal\n    if score != 1:\n        left_d_score=0\n\n        ## get the lowest possible diagonal from this point\n        rightmost_col=drop_col+(config.inarow-1)\n        lowest_row=drop_row-(config.inarow-1)\n        #print(\"og rightmost col: \" +str(rightmost_col))\n        #print(\"og lowest_row: \" +str(lowest_row))\n        ## check if the column is greater than \n        ## the # of columns OR row is below zero\n        ## if this is so, we need to adjust the bottom\n        ## of the diagonal\n        col_gt_numrows=0\n        if rightmost_col >= config.columns:\n            col_gt_numrows=rightmost_col-(config.rows-1)\n        row_below_zero=0\n        if lowest_row < 0:\n            row_below_zero=lowest_row*-1\n        if col_gt_numrows > row_below_zero:\n            rightmost_col = config.rows-1\n            lowest_row = lowest_row + col_gt_numrows\n        elif col_gt_numrows < row_below_zero:\n            lowest_row = 0\n            rightmost_col = rightmost_col - row_below_zero\n        elif row_below_zero > 0:\n            rightmost_col = config.rows-1\n            lowest_row = 0\n        diag_of_four = np.array([])\n        end_of_diag_col=rightmost_col - (config.inarow - 1)\n        end_of_diag_row=lowest_row + (config.inarow - 1)\n        while (rightmost_col >= drop_col and\n              end_of_diag_col >= 0 and\n              end_of_diag_row < config.rows):\n            # get values of sub-diagonal in diag_of_four\n            if len(diag_of_four)==0:\n                for i in range(0,config.inarow):\n                    diag_of_four=np.append(diag_of_four,board[lowest_row+i,rightmost_col-i])\n            else:\n                diag_of_four = np.delete(diag_of_four, 0)\n                i = config.inarow - 1\n                diag_of_four = np.append(diag_of_four,board[lowest_row+i,rightmost_col-i])\n\n            # get score given diag_of_four\n            if not np.isin(opp_mark,diag_of_four):\n                new_ldiag_score=.25 + (np.count_nonzero(diag_of_four == my_mark)* .25)\n                if new_ldiag_score > left_d_score:\n                    left_d_score = new_ldiag_score\n            rightmost_col=rightmost_col-1\n            lowest_row+=1\n            end_of_diag_col=rightmost_col - (config.inarow - 1)\n            end_of_diag_row=lowest_row + (config.inarow - 1)\n        if left_d_score > score:\n            score = left_d_score\n    if score == 1:\n        return(4)\n    else:\n        return(col_score+row_score+left_d_score+right_d_score)","72f85a08":"if 1==0:\n    a_m=np.array([[0, 2, 1, 2, 1, 2, 0],\n       [0, 1, 1, 1, 0, 0, 0],\n       [0, 2, 1, 2, 0, 0, 0],\n       [0, 0, 2, 1, 0, 0, 0],\n       [0, 0, 1, 0, 0, 0, 0],\n       [0, 0, 0, 0, 0, 0, 0]])\n    print(a_m)\n\n    import pandas as pd\n    class a:\n        def __init__(self,columns,rows,inarow):\n            self.columns = columns\n            self.rows = rows\n            self.inarow = inarow\n\n    conf=a(7,6,4)\n    my_num=1\n    opp_num=2\n    for i in range(0,7):\n        if i == 4:\n            print(\"col: \"+ str(i))\n            print(\"my score\")\n            print(score_drop(a_m,i,my_num,conf))\n            print(\"block score\")\n            score_drop(a_m,i,opp_num,conf)\n            # add my mark in column to fake board\n            fake_board_a=a_m.copy()\n            fake_chip_ya=drop_chip_row(fake_board_a, i, conf.rows)\n            print(\"------\")\n            print(\"give score\")\n            if fake_chip_ya == -1:\n                    print(0)\n            else:\n                fake_board_a[fake_chip_ya,i]=my_num\n                print(fake_board_a)\n                print(score_drop(fake_board_a, i, opp_num,conf))\n            print(\"---\")","826d5da3":"# Selects random valid column\ndef custom_agent(obs, config):\n    # `obs` contains 2 peices of information\n    b_m=np.flip(\n        np.resize(obs.board,(config.rows,config.columns)),0)\n    valid_moves = [col for col in range(config.columns) if obs.board[col] == 0]\n    \n    # get opponents mark\n    opp_mark=1\n    if obs.mark==1:\n        opp_mark=2\n\n    # GET SCORE OF EACH POSSIBLITY\n    score_moves=[]\n    for move in valid_moves:\n        add_score_mymark= score_drop(b_m, move, obs.mark,config)\n        add_score_oppmark= score_drop(b_m, move, opp_mark,config) * .8\n        fake_board=b_m.copy()\n        # add my mark in column to fake board\n        fake_chip_y=drop_chip_row(fake_board, move, config.rows)\n        if fake_chip_y == -1:\n            sub_score = 0\n        else:\n            fake_board[fake_chip_y,move]=obs.mark\n            sub_score= score_drop(fake_board, move, opp_mark,config)\n        score_moves.append(\n            (add_score_mymark + \n             add_score_oppmark)\n            - sub_score)\n        \n    best_col=[valid_moves[0]]\n    best_score=score_moves[0]\n    if len(score_moves) > 1:\n        for i in range(1,len(score_moves)):\n            if score_moves[i] > best_score:\n                best_col=[valid_moves[i]]\n                best_score=score_moves[i]\n            elif score_moves[i] == best_score:\n                best_col.append(valid_moves[i])\n    return(random.choice(best_col))","9d3f0252":"# Agents play one game round\nenv.run([custom_agent, agent_without_a_plan])\n\n# Show the game\nenv.render(mode=\"ipython\")","6cca2f12":"# To learn more about the evaluate() function, check out the documentation here: (insert link here)\ndef get_win_percentages(agent1, agent2, n_rounds=100):\n    # Use default Connect Four setup\n    config = {'rows': 6, 'columns': 7, 'inarow': 4}\n    # Agent 1 goes first (roughly) half the time          \n    agent1_first_outcomes = evaluate(\"connectx\", \n                        [agent1, agent2],\n                        config, [], n_rounds\/\/2)\n    # Agent 2 goes first (roughly) half the time  \n    agent2_first_outcomes = [[b,a] for [a,b] in evaluate(\"connectx\", [agent2, agent1], config, [], n_rounds-n_rounds\/\/2)]\n    outcomes = agent1_first_outcomes + agent2_first_outcomes\n    print(\"Agent 1 Win Percentage:\", np.round(outcomes.count([1,-1])\/len(outcomes), 2))\n    print(\"Agent 2 Win Percentage:\", np.round(outcomes.count([-1,1])\/len(outcomes), 2))\n    print(\"Number of Invalid Plays by Agent 1:\", outcomes.count([None, 0]))\n    print(\"Number of Invalid Plays by Agent 2:\", outcomes.count([0, None]))\n    print(\"Number of Draws (in {} game rounds):\".format(n_rounds), outcomes.count([0, 0]))","7b431084":"get_win_percentages(agent1=agent_middle, agent2=agent_random)","2f38b219":"get_win_percentages(agent1=agent_leftmost, agent2=agent_random)","5e932ca0":"get_win_percentages(agent1=agent_without_a_plan, agent2=agent_random)","dc3125c2":"get_win_percentages(agent1=custom_agent, agent2=agent_random)","befdf05a":"get_win_percentages(agent1=custom_agent, agent2=agent_without_a_plan)","c78b41c7":"`agent_without_a_plan` just blocks the other from winning or when it has 3 in a row it should try and form 4 in a row","81dad32e":"# Game Time\nNow we can run our bots against each other!","eb857586":"The code in the box below was used for testing so please ignore it...","7a21f2ca":"# Bot Winning Average\nIn the code below we test our bots against bots given in the original tutorial for the competition and verse each other.","427e74ac":"# Custom Agent\nThis bot goes in whichever spot has the highest score or chooses from spots of the same highest score. The score is based on how many chips would align in each spot by summing the number of possible chips can line up in the column + the row + the left diagonal + the right diagonal.","9d55495b":"# Summary\nIn the code below I make two bots. The first one `agent_without_a_plan` just blocks the other from winning or when it has 3 in a row it should try and form 4 in a row. I think there may be a bug in how it find if there are 3 in a row in a diagonal, but it works for the most part. The second bot `custom agent` goes in whichever spot has the highest score or chooses from spots of the same highest score. The score is based on how many chips would align in each spot by summing the number of possible chips can line up in the column + the row + the left diagonal + the right diagonal. ","19f22bb3":"# Agent without a plan\nThe next few functions are for the `agent_without_a_plan`. Like I said before, there may be a bug in the `essential_move` function for the diagonal.","15613fd8":"First let's see the default agents as given in the introduction tutorial of the competition","fdaad3d8":"# Summary\nThe custom agent seems to do really well. It is custom made so I wonder if I could make it better using reinforcement learning. However, I do think this bot may be a better start than the random_agent.","896db0e4":"Cool, cool, cool. Now lets make our own agent! Recall the input for an agent.\n\n**obs** contains two pieces of information:\n * obs.board - the game board (a Python list with one item for each grid location)\n * obs.mark - the piece assigned to the agent (either 1 or 2)\n \n**config** contains three pieces of information:\n\n* config.columns - number of columns in the game board (7 for Connect Four)\n* config.rows - number of rows in the game board (6 for Connect Four)\n* config.inarow - number of pieces a player needs to get in a row in order to win (4 for Connect Four)"}}