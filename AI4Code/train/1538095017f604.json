{"cell_type":{"85e91732":"code","56a9b1b2":"code","b2c40f3b":"code","f9f42edd":"code","8beae2b8":"code","6d5daf48":"code","503580f6":"code","093cbd89":"code","bf119289":"code","183f267f":"code","1acf3f4e":"code","7dcda90f":"code","18dfba28":"code","9c98eef2":"code","6fc3ee7e":"code","5cb00085":"markdown","b21be31f":"markdown","28480cbf":"markdown","8f59bf5d":"markdown","d48dfe85":"markdown","3225f239":"markdown","2f6e2e37":"markdown","6d5d279a":"markdown","db219d3c":"markdown","375d02b6":"markdown","92cd70e0":"markdown"},"source":{"85e91732":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","56a9b1b2":"from sklearn.ensemble import RandomForestRegressor, GradientBoostingRegressor, StackingRegressor\nfrom sklearn.linear_model import Ridge\nfrom sklearn.model_selection import RandomizedSearchCV\nfrom sklearn.pipeline import Pipeline\nfrom sklearn.compose import TransformedTargetRegressor\nfrom sklearn.preprocessing import FunctionTransformer, QuantileTransformer\nfrom scipy.stats import uniform, geom, randint\nfrom lightgbm import LGBMRegressor\nfrom model_utils import dummify_persistent","b2c40f3b":"df = pd.read_csv(os.path.join(dirname, filename)).sample(frac=1).sample(frac=1, axis='columns')","f9f42edd":"prices = df.pop('price')\n\ndf.shape","8beae2b8":"CATEGORICAL_FIELDS = ['closest_subway', 'AO', 'h3', 'hm']\nfor field in CATEGORICAL_FIELDS:\n    df[field] = df[field].astype('category')\ndf.info()","6d5daf48":"def bearing_degree(lat1, lng1):\n    '''\n    Calculate bearing to\/from Moscow center\n    '''\n    \n    lat2, lng2 = 55.75222, 37.61556  # Moscow center\n    \n    diff_lng = np.radians(lng2 - lng1)\n    lat1, lng1, lat2, lng2 = map(np.radians, (lat1, lng1, lat2, lng2))\n    y = np.sin(diff_lng) * np.cos(lat2)\n    x = np.cos(lat1) * np.sin(lat2) - np.sin(lat1) * np.cos(lat2) * np.cos(diff_lng)\n    return np.arctan2(y, x)\n \n\ndef gen_new_features(df_original):\n    df = df_original.copy()\n    \n    # rescaling\n    df['footage_sq'] = df['footage'] ** 2\n    df['subway_dist_to_center_sq'] = df['subway_dist_to_center'] ** 2\n    df['max_floor_log'] = np.log(df['max_floor'])\n\n    # interaction features\n    df['footage_per_room'] = df['footage'] \/ df['rooms']\n    df['footage_per_dist_to_center'] = df['footage'] \/ df['subway_dist_to_center']\n    df['footage_per_max_floor'] = df['footage'] \/ df['max_floor']\n    df['dist_per_max_floor'] = df['subway_dist_to_center'] \/ df['max_floor']\n    df['footage_per_repair'] = df['footage'] \/ df['repair']\n    \n    # geographical features\n    df['bearing'] = bearing_degree(df['lat'], df['lon'])\n    \n    return df\n\n\nnew_features_generator = FunctionTransformer(gen_new_features)\nnew_features_generator.transform(df).shape","503580f6":"from sklearn.ensemble import IsolationForest\n\noutlier_markers = IsolationForest(contamination=0.1).fit_predict(pd.get_dummies(df, CATEGORICAL_FIELDS))\ndf_filtered = df.loc[outlier_markers == 1]\nprices_filtered = prices.loc[df_filtered.index]\ndf_filtered.shape","093cbd89":"regr = StackingRegressor([\n    ('lgbm', LGBMRegressor(n_jobs=-1)),\n    ('rf', RandomForestRegressor(n_jobs=-1, n_estimators=50, max_leaf_nodes=1000)),\n    ('ridge', Ridge())\n], n_jobs=-1)\n\ndm = FunctionTransformer(dummify_persistent, kw_args={'columns': [\n    'closest_subway', 'AO', 'h3', 'hm', 'sg', 'repair', 'max_floor'\n]})\ndm.fit_transform(df)  # needed to establish the possible caterogy space without folding\n\npipe = Pipeline([\n    ('nf', new_features_generator),\n    ('dummifier', dm),\n    ('ttr', TransformedTargetRegressor(\n        regressor=regr,\n        transformer=QuantileTransformer(n_quantiles=500),\n\n    ))\n    ],\n    verbose=True\n)","bf119289":"param_grid = {\n    'ttr__regressor__lgbm__n_estimators': geom(p = 0.02),\n#    'ttr__regressor__rf__n_estimators': geom(p = 0.02),\n#    'ttr__regressor__ridge__solver': ['svd', 'cholesky', 'lsqr', 'sparse_cg', 'sag', 'saga'],\n    'ttr__regressor__ridge__alpha': [300, 500, 1000, 3000],    \n}\n\ncv = RandomizedSearchCV(pipe, param_grid, n_jobs=-1, verbose=10, n_iter=20)\n_ = cv.fit(df_filtered, prices_filtered)","183f267f":"cv.score(df, prices)","1acf3f4e":"cv.best_params_","7dcda90f":"try:\n    fi_dict = {key: round(value*100, 4) for key, value \n               in zip(gen_new_features(df_filtered).columns, cv.best_estimator_[-1].regressor_.feature_importances_)}\n    sorted(fi_dict.items(), key=lambda x: x[1], reverse=True)[:50]\nexcept:\n    pass","18dfba28":"import pickle\nimport sys\n\np = pickle.dumps(cv)\nprint(sys.getsizeof(p))","9c98eef2":"df_plot = pd.DataFrame({\n    'price': prices,\n    'prediction': cv.predict(df),\n    'outlier': outlier_markers\n})\n\ndf_plot['outlier'] = df_plot['outlier'] == -1\n\ndf_plot['residual'] = df_plot['prediction'] - df_plot['price']\n\nfrom seaborn import relplot\nrelplot(x='price', y='residual', col='outlier', hue='outlier',\n          data=df_plot.sample(frac=0.1))\n","6fc3ee7e":"from sklearn.linear_model import LinearRegression\nlr = LinearRegression()\nlr.fit(df_plot['price'].values.reshape(-1, 1), df_plot['residual'])\nlr.coef_[0]","5cb00085":"## Estimating the results","b21be31f":"Residuals skewness","28480cbf":"## Setting up the new feature generator","8f59bf5d":"## Removing the outliers","d48dfe85":"R^2 score","3225f239":"Best estimator parameters","2f6e2e37":"Residuals analysis","6d5d279a":"Feature importance","db219d3c":"## Getting the data","375d02b6":"Model size","92cd70e0":"## Preparing and running the pipeline"}}