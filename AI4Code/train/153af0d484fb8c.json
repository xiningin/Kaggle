{"cell_type":{"bc380c0d":"code","822f8fc4":"code","b2bc3fb3":"code","bba21780":"code","477e9e9c":"code","5e6a0a86":"code","36a109fc":"code","876050b9":"code","ec5c1110":"code","9397d106":"code","01140feb":"code","3f42a107":"code","aebacf73":"code","e6a31457":"code","b718a700":"code","1719fc31":"code","bd4026ef":"code","31c73254":"code","a9677c6e":"code","d3103ff5":"code","20fb5afb":"code","0517b9eb":"code","ca9a43e5":"code","4d0d99fe":"code","99516cb3":"code","c8726bfb":"code","c22b31b8":"code","f8e6e3a7":"code","fd79be4f":"code","d52a3194":"code","3b09829c":"code","9c897960":"code","5ffc4a79":"code","b3c3ec38":"code","51675fc8":"code","54ad424a":"code","1f42593c":"code","1ada8841":"code","aad148a6":"code","802dca8e":"code","1922e677":"code","c6c8ecf2":"code","889ac3a4":"code","59848186":"code","aed8304e":"code","7595ed3d":"markdown","d0d833a5":"markdown","94c75d3c":"markdown","f103c515":"markdown","c1f60e2f":"markdown","2e07bdc7":"markdown","4fc52d60":"markdown","63c5777f":"markdown","3b836a93":"markdown","867854db":"markdown","6683aeb7":"markdown","6c212c02":"markdown","b3f84d00":"markdown","5b7c54e3":"markdown","6972ed33":"markdown","b7e9aa26":"markdown","7cc5af8d":"markdown","51f1218a":"markdown","081152dc":"markdown","57f7c66a":"markdown","a69a8b6a":"markdown","bec60385":"markdown"},"source":{"bc380c0d":"from fastai import *\nfrom fastai.vision import *\nimport fastai\nfastai.__version__","822f8fc4":"path = Path('..\/input')\npath.ls()","b2bc3fb3":"labs = pd.read_csv(path\/'train.csv')\nlabs.head()","bba21780":"labs.has_cactus.count()","477e9e9c":"labs['has_cactus'].value_counts().plot(kind='bar')","5e6a0a86":"data = (ImageList.from_csv(path, 'train.csv', folder='train\/train')\n        .random_split_by_pct()\n        .label_from_df()\n        .add_test_folder('test\/test')\n        .transform(get_transforms(max_rotate=0, max_lighting=0.1, max_zoom=1, flip_vert=True), size=32)\n        .databunch(bs=256))","36a109fc":"data.show_batch(5, figsize=(6,6))","876050b9":"# https:\/\/www.kaggle.com\/guntherthepenguin\/fastai-v1-densenet169\nfrom sklearn.metrics import roc_auc_score\n\ndef auc_score(y_pred,y_true,tens=True):\n    score=roc_auc_score(y_true,torch.sigmoid(y_pred)[:,1])\n    if tens:\n        score=tensor(score)\n    else:\n        score=score\n    return score","ec5c1110":"learn = create_cnn(data, models.resnet50, path=\".\", metrics=[accuracy, auc_score])","9397d106":"learn.lr_find()\nlearn.recorder.plot()","01140feb":"learn.fit_one_cycle(5, 1e-2)","3f42a107":"! pip install objgraph xdot -q\nimport objgraph\nobjgraph.show_refs([learn])","aebacf73":"learn.save('model-resnet')\nprint(Path('.\/models\/model-resnet.pth').stat().st_size\/\/(1024*1024), 'MB')","e6a31457":"# Export the model for inference\nlearn.export()","b718a700":"!pip install git+https:\/\/github.com\/FrancescAlted\/ipython_memwatcher -q","1719fc31":"from ipython_memwatcher import MemWatcher\nmw = MemWatcher()\nmw.start_watching_memory()","bd4026ef":"learn = load_learner(\"\")","31c73254":"img = open_image(path\/'train\/train'\/labs.id.iloc[0])","a9677c6e":"learn.predict(img)","d3103ff5":"print(mw.measurements)\nmw.stop_watching_memory()","20fb5afb":"!pip install git+https:\/\/github.com\/Tom2718\/pytorch-OpCounter -q --upgrade","0517b9eb":"from thop import profile","ca9a43e5":"model = learn.model\nflops, params = profile(model, input_size=(1, 3, 32,32), \n                        custom_ops={Flatten: None})\n\nprint('FLOPs:', flops\/\/1e6, 'M')\nprint('Params:', params\/\/1e6, 'M')","4d0d99fe":"learn = create_cnn(data, models.squeezenet1_1, path=\".\", metrics=[accuracy, auc_score])","99516cb3":"learn.lr_find()\nlearn.recorder.plot()","c8726bfb":"learn.fit_one_cycle(10, 5e-2)","c22b31b8":"learn.unfreeze()\nlearn.lr_find()\nlearn.recorder.plot()","f8e6e3a7":"learn.fit_one_cycle(7, slice(5e-4, 5e-3))","fd79be4f":"learn.save('model-squeezenet')\nprint(Path('.\/models\/model-squeezenet.pth').stat().st_size\/\/(1024*1024), 'MB')","d52a3194":"learn.export()\nmw.start_watching_memory()","3b09829c":"learn = load_learner(\"\")","9c897960":"img = open_image(path\/'train\/train'\/labs.id.iloc[0])","5ffc4a79":"learn.predict(img)","b3c3ec38":"print(mw.measurements)\nmw.stop_watching_memory()","51675fc8":"model = learn.model\nflops, params = profile(model, input_size=(1, 3, 32,32), custom_ops={Flatten: None})\n\nprint('FLOPs:', flops\/\/1e6, 'M')\nprint('Params:', params\/\/1e6, 'M')","54ad424a":"learn = create_cnn(data, models.resnet18, path=\".\", metrics=[accuracy, auc_score])","1f42593c":"learn.fit_one_cycle(10, 5e-2)","1ada8841":"learn.save('model-resnet18')\nprint(Path('.\/models\/model-resnet18.pth').stat().st_size\/\/(1024*1024), 'MB')","aad148a6":"learn.export()\nmw.start_watching_memory()","802dca8e":"learn = load_learner(\"\")","1922e677":"img = open_image(path\/'train\/train'\/labs.id.iloc[0])","c6c8ecf2":"learn.predict(img)","889ac3a4":"print(mw.measurements)\nmw.stop_watching_memory()","59848186":"model = learn.model\nflops, params = profile(model, input_size=(1, 3, 32,32), custom_ops={Flatten: None})\n\nprint('FLOPs:', flops\/\/1e6, 'M')\nprint('Params:', params\/\/1e6, 'M')","aed8304e":"plt.plot([14,48,114], [4,38,88])\nplt.xlabel('Model Size (MB)')\nplt.ylabel('FLOPs (M)')\nplt.title('Model Size vs FLOPs')","7595ed3d":"## Final Thoughts","d0d833a5":"## Reduce Model Size\n\nNow we will use a different architecture more optimized to have a small footprint: squeezenet.","94c75d3c":"After 5 epochs of training we attain a validation accuracy of 99%, showing that this isn't very difficult for powerful models. Let's learn a bit more about the `learn` object. ","f103c515":"Let's see the RAM usage when we're using the model for inference.","c1f60e2f":"## Computational Size of Model\n\nWe can use the objgraph package to visualise the connections of the `learn` object.","2e07bdc7":"With a few more training epochs, we can reach similar accuracy to the Resnet model:","4fc52d60":"## A Smaller Resnet\n\nLet's wrap this up by comparing these results with a Resnet18.","63c5777f":"Let's use a resnet50 to prove that we can get good results on this task.","3b836a93":"Theres clearly a lot going on in the model. Additionally, the model weights are 114MB which is fairly large!","867854db":"With about 13000 containing a cactus and about 5000 without a cactus.","6683aeb7":"This competition focuses on determining whether a 32x32px image contains a cactus or not. The dataset comes from Efren L\u00f3pez-Jim\u00e9nez master's thesis titled _Sistema embebido para la supervisi\u00f3n inteligente de terrenos con veh\u0131\u0301culos a\u00e9reos no tripulados_ which translates to _Embedded system for intelligent monitoring of land with unmanned aerial vehicles_.\n\nThe abstract of the paper reads as follows:\n\n> The terrain survillance by an aerial vehicle provides the view of an area of interest represented by a polygon through an on-board sensor. In the present work we propose an integral system, it has three mainly approaches: coverage path planning, object recognize and its processing on an embedded system. For solve the coverage path planning problem, we used the rotating caliper algorithm proposed by Vasquez. For the classification and recognition object we used Lenet-5 convolutional neural network proposed by Lecun. The dataset was obtained from the cactus plants images, captured by an unmanned aerial vehicle (UAV) at San Antonio Nanahuatipan, Oax, biosphere reserve. Finally we performed the couple between the embedded system and the UAV. \n\n[Source](https:\/\/www.researchgate.net\/publication\/329453166_Sistema_embebido_para_la_supervision_inteligente_de_terrenos_con_vehiculos_aereos_no_tripulados)\n\nThis is an interesting application and integration of machine learning where it is used as a step in the process of mapping an area through a UAV. The difficulty of the challenge is not in predicting the class of the image - that is trivial with today's state of the art techniques. However, the challenge seems to be able to integrate this into the UAV's embedded processing system. Thus, size and processing power for the network are highly constrained.","6c212c02":"This is clearly less computationally expensive!","b3f84d00":"## Let's Look at Some of the Data","5b7c54e3":"There are 17500 training images.","6972ed33":"## Let's create a Good Model","b7e9aa26":"We can use the [IPython Memwatcher](https:\/\/github.com\/FrancescAlted\/ipython_memwatcher) package to monitor RAM usage when predicting.","7cc5af8d":"Finally, let's look at the number of parameters and FLOPs the model uses by using this [simple library](https:\/\/github.com\/Lyken17\/pytorch-OpCounter). The library however had not implemented some of the nn Modules like `nn.AdaptiveAvgPool2d` so I implemented them and have made a pull request to the repo. In the mean time, you can use my branch to install the repo.","51f1218a":"The augmentations we will use for this data are probably limited since changing the few pixel values that we have can drastically change the image. For example, rotations introduce pixelations in the output. However, since our application is on a drone, we probably want to use vertical flips.","081152dc":"Let's tabulate our results:\n\n|               | Model Size (MB) | Loading Model RAM (MB) | Predict RAM (MB) | FLOPs (M) | Params (M) |\n|---------------|-----------------|------------------------|------------------|-----------|------------|\n|      ResNet50 |       114       |          0.008         |       0.488      |     88    |     25     |\n|      ResNet18 |        48       |          0.254         |       0.566      |     38    |     11     |\n| SqueezeNet1_1 |        14       |          0.004         |       0.191      |     4     |      1     |\n\n\nAs we observed, the smaller our model was, the fewer computational resources it required. These results however, should be taken with a pinch of salt - the computer that they are running on is far more powerful than the embedded computer that might be found on a UAV. They are relevant however when looking at relative differences in compute.\n\nMemWatcher does have the limitation of showing the combined RAM usage so the more variables the notebook has defined above, the more RAM will be used anyway. The most demonstrative runs were done by restarting the kernel and running just that model and these are the results you see in the table. They will certainly be different when the kernel is committed. If I get more time, I will try do multiple runs of the same model so we can get a better result.\n\nThanks for reading!","57f7c66a":"Define the AUC metric that Kaggle uses to score the competition.","a69a8b6a":"Similarly the RAM usage is fairly high for classification of a single image.","bec60385":"Repeating the above steps, we can see the computational impact that this model has."}}