{"cell_type":{"dfa7c00b":"code","4fc335a8":"code","33a737ec":"code","6c8173b1":"code","e2e38e97":"code","ac9491be":"code","8192d3e5":"code","753bb4cb":"code","1a7bccb8":"code","48f231f4":"code","beab6742":"code","3c29cf7d":"code","fe89ed49":"code","301e4404":"code","633ac41a":"code","f976a050":"code","7c838f62":"code","eab012d9":"code","5ff3e781":"code","d6fc44ab":"code","8c70ded2":"code","f7f3e6a7":"code","93e598f9":"code","32fca565":"code","eb248d3f":"code","d1b671c2":"code","5632447b":"code","d1c66126":"code","3bd1aa73":"code","b468ab18":"code","9157f1f7":"code","ec82f7ca":"code","925344ef":"code","83d12345":"code","04b268c0":"code","6f86003d":"code","5304fbab":"code","cb627f75":"code","73706281":"code","dfcb6869":"code","2dc6e377":"code","dc8a679c":"code","0879ee05":"code","3e4a34fd":"code","fac2283a":"code","bc60a223":"code","374e7568":"code","12974492":"code","5710ccdd":"code","fff22e6c":"code","0164e0ae":"code","8433e2cc":"code","fb98163a":"code","f90fbde5":"code","65a93f76":"code","a3918cfe":"code","df61dd7b":"code","29358424":"code","3c5272d3":"code","63d103b7":"code","cb12bfdb":"code","97bfefcb":"code","600c37f9":"code","9d2d4f1d":"code","325ab4b8":"code","de2b2675":"code","c979be40":"code","24562132":"code","21f44473":"code","9d82fa5b":"code","31cc7089":"code","54f09e66":"code","66568c76":"code","11babddc":"code","799eb7e1":"code","1e86c317":"code","6012438a":"code","dc77db71":"code","179f097c":"code","5bc13f2b":"code","ffab5845":"markdown","70e55b55":"markdown","372a1a8e":"markdown","bef486cf":"markdown","6ee77fbf":"markdown","7e823e32":"markdown","d8979635":"markdown","b876d792":"markdown","dc364601":"markdown","95b6d026":"markdown","a4ed19c6":"markdown","cf43f267":"markdown","727764c4":"markdown","8dc0527d":"markdown","adb9341d":"markdown","75e73c92":"markdown","83341baa":"markdown","793e867b":"markdown","0db52abe":"markdown","12286a6d":"markdown","64063765":"markdown","b55ecece":"markdown","b271ee22":"markdown","c9ccd8bc":"markdown","c647efb9":"markdown","f2938a32":"markdown","691a35d1":"markdown","3ec17c60":"markdown","e3ee946a":"markdown","7627836a":"markdown","b2260c86":"markdown","ca003939":"markdown","d989b49d":"markdown","e3d93258":"markdown","ec5d8e9b":"markdown","4311122d":"markdown","12393656":"markdown","8c2d631a":"markdown","53799e1f":"markdown","ff26c940":"markdown","36f8ea0a":"markdown","bd83ba1c":"markdown","e6c17043":"markdown","ac59302a":"markdown","666074a0":"markdown","34bb8836":"markdown"},"source":{"dfa7c00b":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","4fc335a8":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\nplt.style.use('seaborn')\nsns.set(font_scale=2.5) # \uc774 \ub450\uc904\uc740 \ubcf8 \ud544\uc790\uac00 \ud56d\uc0c1 \uc4f0\ub294 \ubc29\ubc95\uc785\ub2c8\ub2e4. matplotlib \uc758 \uae30\ubcf8 scheme \ub9d0\uace0 seaborn scheme \uc744 \uc138\ud305\ud558\uace0, \uc77c\uc77c\uc774 graph \uc758 font size \ub97c \uc9c0\uc815\ud560 \ud544\uc694 \uc5c6\uc774 seaborn \uc758 font_scale \uc744 \uc0ac\uc6a9\ud558\uba74 \ud3b8\ud569\ub2c8\ub2e4.\nimport missingno as msno\n\n#ignore warnings\nimport warnings\nwarnings.filterwarnings('ignore')\n\n%matplotlib inline","33a737ec":"# read data\ndf_train = pd.read_csv('..\/input\/titanic\/train.csv')\ndf_test = pd.read_csv('..\/input\/titanic\/test.csv')","6c8173b1":"df_train.head()","e2e38e97":"df_test.head()","ac9491be":"df_train.describe() # \uac01 feature \uc758 \uac04\ub2e8\ud55c \ud1b5\uacc4\ub97c \uc54c\ub824\uc90c","8192d3e5":"df_test.describe()","753bb4cb":"# null \ube44\uc728\uc744 \uc0b0\ucd9c \nfor col in df_train.columns:\n    msg = 'column: {:>10}\\t Percent of NaN value: {:.2f}%'.format(col, 100 * (df_train[col].isnull().sum() \/ df_train[col].shape[0]))\n    print(msg)","1a7bccb8":"# null \ube44\uc728\uc744 \uc0b0\ucd9c \nfor col in df_test.columns:\n    msg = 'column: {:>10}\\t Percent of NaN value: {:.2f}%'.format(col, 100 * (df_test[col].isnull().sum() \/ df_test[col].shape[0]))\n    print(msg)","48f231f4":"# null data visualization\nmsno.matrix(df=df_train.iloc[:, :], figsize=(8, 8), color=(0.8, 0.5, 0.2))","beab6742":"# null data visualization\nmsno.matrix(df=df_test.iloc[:, :], figsize=(8, 8), color=(0.8, 0.5, 0.2))","3c29cf7d":"msno.bar(df=df_train.iloc[:, :], figsize=(8, 8), color=(0.8, 0.5, 0.2))","fe89ed49":"msno.bar(df=df_test.iloc[:, :], figsize=(8, 8), color=(0.8, 0.5, 0.2))","301e4404":"f, ax = plt.subplots(1,2, figsize=(18,8))\n\ndf_train['Survived'].value_counts().plot.pie(explode=[0,0.1], autopct='%1.1f%%', ax=ax[0], shadow=True)\nax[0].set_title('pie plot - survived')\nax[0].set_ylabel('')\nsns.countplot('Survived', data = df_train, ax=ax[1])\nax[1].set_title('count plot - survived')\n\nplt.show()","633ac41a":"# \uac01 \ub4f1\uae09\ubcc4 \ud0d1\uc2b9\uc778\uc6d0 \ud655\uc778\ndf_train[['Pclass', 'Survived']].groupby(['Pclass'], as_index=True).count()","f976a050":"# \uac01 \ub4f1\uae09\ubcc4 \uc0dd\uc874\uc790 \ud655\uc778\ndf_train[['Pclass', 'Survived']].groupby(['Pclass'], as_index=True).sum()","7c838f62":"# pclass\ubcc4 survive \ubd84\ud3ec \ud655\uc778\npd.crosstab(df_train[\"Pclass\"], df_train[\"Survived\"], margins=True).style.background_gradient(cmap='summer_r')","eab012d9":"df_train[['Pclass', 'Survived']].groupby(['Pclass'], as_index=True).mean().sort_values(by='Survived', ascending=False).plot.bar()","5ff3e781":"y_position=1.02\nf, ax = plt.subplots(1,2 , figsize=(18,8))\ndf_train['Pclass'].value_counts().plot.bar(color=['#CD7F32','#FFDF00','#D3D3D3'] , ax=ax[0])\nax[0].set_title('number of passengers by pclass', y=y_position)\nax[0].set_ylabel('count')\n\nsns.countplot('Pclass', hue='Survived', data = df_train,ax=ax[1])\nax[1].set_title('pclass: survived vs dead', y=y_position)\nax[1].set_ylabel('count')\nplt.show()","d6fc44ab":"f, ax = plt.subplots(1,3, figsize=(18,8))\n\nfor i in range(3) :\n    df_train.loc[df_train['Pclass']==i+1]['Survived'].value_counts().plot.pie(explode=[0,0.1], autopct='%1.1f%%', ax=ax[i], shadow=True)\n    ax[i].set_title('pie plot(pclass: '+str(i)+') - survived')\n    ax[i].set_ylabel('')","8c70ded2":"f, ax = plt.subplots(1,2, figsize=(18,8))\ndf_train[['Sex', 'Survived']].groupby(['Sex'], as_index=True).mean().plot.bar(ax=ax[0])\nax[0].set_title(\"Survived vs Sex\")\n\nsns.countplot('Sex', hue='Survived', data=df_train, ax=ax[1])\nax[1].set_title('Sex: survived vs dead')\n\nplt.show()","f7f3e6a7":"df_train[['Sex', 'Survived']].groupby(['Sex'], as_index=False).mean().sort_values(by='Survived', ascending=False)","93e598f9":"pd.crosstab(df_train['Sex'], df_train['Survived'], margins=True).style.background_gradient(cmap='summer_r')","32fca565":"sns.factorplot('Pclass', 'Survived', hue='Sex', data=df_train, size=6, aspect=1.5)","eb248d3f":"sns.factorplot(x ='Sex', y='Survived', col='Pclass', data=df_train,\n               satureation=.5,size=9, aspect=1)","d1b671c2":"print('\ub098\uc774 max: {:.1f} Years'.format(df_train[\"Age\"].max()))\nprint('\ub098\uc774 min: {:.1f} Years'.format(df_train[\"Age\"].min()))\nprint('\ub098\uc774 mean: {:.1f} Years'.format(df_train[\"Age\"].mean()))","5632447b":"f, ax = plt.subplots(1,1, figsize=(9,5))\n\nsns.kdeplot(df_train[df_train['Survived'] == 1]['Age'], ax=ax)\nsns.kdeplot(df_train[df_train['Survived'] == 0]['Age'], ax=ax)\n\nplt.legend(['survived', 'dead'])\nplt.show()","d1c66126":"plt.figure(figsize=(8,6))\n\ndf_train['Age'][df_train['Pclass'] == 1].plot(kind='kde')\ndf_train['Age'][df_train['Pclass'] == 2].plot(kind='kde')\ndf_train['Age'][df_train['Pclass'] == 3].plot(kind='kde')\n\nplt.xlabel('Age')\nplt.title('Age distribution within classes')\nplt.legend(['1', '2', '3'])","3bd1aa73":"cummulate_survival_ratio = []\nfor i in range(1, 80) :\n    cummulate_survival_ratio.append(df_train[df_train['Age'] < i]['Survived'].sum() \/ len(df_train[df_train['Age'] < i]['Survived']))\n    \nplt.figure(figsize=(7,7))\nplt.plot(cummulate_survival_ratio)\nplt.title('Survived rate change depending on range of age', y=1.02)\nplt.ylabel('survived rate')\nplt.xlabel('range of age')\nplt.show()","b468ab18":"f, ax= plt.subplots(1,2, figsize=(18,8))\n\nsns.violinplot('Pclass', 'Age', hue='Survived', data =df_train, scale='count', split=True, ax=ax[0])\nax[0].set_title('pclass, age vs survived')\nax[0].set_yticks(range(0,110,10))\n\n\nsns.violinplot('Sex', 'Age', hue='Survived', data =df_train, scale='count', split=True, ax=ax[1])\nax[0].set_title('Sex, age vs survived')\nax[0].set_yticks(range(0,110,10))\n\nplt.show()\n","9157f1f7":"f, ax = plt.subplots(1,1, figsize=(7,7))\n\ndf_train[['Embarked', 'Survived']].groupby(['Embarked'], as_index=True).mean().sort_values(by='Survived', ascending=False).plot.bar(ax=ax)","ec82f7ca":"f, ax=plt.subplots(2,2, figsize=(20,15))\n\nsns.countplot('Embarked', data=df_train, ax= ax[0,0])\nax[0,0].set_title(\"1. num of passengers boarded\")\n\n\nsns.countplot('Embarked', hue=\"Sex\",data=df_train, ax= ax[0,1])\nax[0,1].set_title(\"2 . male-female split for Embarked\")\n\nsns.countplot('Embarked', hue='Survived', data=df_train, ax= ax[1,0])\nax[1,0].set_title(\"3. Embarked vs Survived\")\n\nsns.countplot('Embarked', hue='Pclass', data=df_train, ax= ax[1,1])\nax[1,1].set_title(\"3. Embarked vs Pclass\")\n\nplt.subplots_adjust(wspace=0.2, hspace=0.5)\nplt.show()","925344ef":"# \ud615\uc81c, \uc790\ub9e4 \uc218 + \ubd80\ubaa8, \uc790\uc2dd\uc758 \uc218 + \uc790\uae30\uc790\uc2e0(1)\ndf_train['FamilySize'] = df_train['SibSp'] + df_train['Parch'] + 1 \ndf_test['FamilySize'] = df_test['SibSp'] + df_test['Parch'] + 1 \n\nprint(\"max of family num: \", df_train[\"FamilySize\"].max())\nprint(\"min of family num: \", df_train[\"FamilySize\"].min())","83d12345":"f, ax = plt.subplots(1,3, figsize=(40,10))\n\nsns.countplot('FamilySize', data=df_train, ax=ax[0])\nax[0].set_title('1. num of passengers boarded')\n\nsns.countplot('FamilySize', hue='Survived', data=df_train, ax=ax[1])\nax[1].set_title('2. Survived count depending on F.S', y =1.02)\n\ndf_train[['FamilySize', 'Survived']].groupby(['FamilySize'], as_index=True).mean().sort_values(by='Survived', ascending=False).plot.bar(ax=ax[2])\nax[2].set_title('3. Survived rate depending on F.S', y =1.02)\n\nplt.subplots_adjust(wspace=0.2, hspace=0.5)\nplt.show()","04b268c0":"f, ax = plt.subplots(1,1, figsize=(8,8))\ng = sns.distplot(df_train['Fare'], color='b', label='Skewness: {:.2f}'.format(df_train['Fare'].skew()), ax=ax)\ng = g.legend(loc='best')","6f86003d":"df_test.loc[df_test.Fare.isnull(), 'Fare'] = df_test['Fare'].mean()\n\ndf_train['Fare'] = df_train['Fare'].map(lambda i: np.log(i) if i > 0 else 0)\ndf_test['Fare'] = df_test['Fare'].map(lambda i: np.log(i) if i > 0 else 0)","5304fbab":"f, ax = plt.subplots(1,1, figsize=(8,8))\n\ng = sns.distplot(df_train['Fare'], color='b', label='Skewness : {:.2f}'.format(df_train['Fare'].skew()), ax=ax)\ng = g.legend(loc='best')","cb627f75":"# cabin\uc758 null\uc774 \ub108\ubb34 \ub9ce\uc544 \uc81c\uc678\ndf_train.head()","73706281":"df_train['Ticket'].value_counts()\n# \uc544\uc774\ub514\uc5b4\ub97c \ucc3e\uc544\ubcf4\uc790 ","dfcb6869":"import plotly.offline as py\npy.init_notebook_mode(connected=True)\nimport plotly.graph_objs as go\nimport plotly.tools as tls\n","2dc6e377":"df_train = pd.read_csv('..\/input\/titanic\/train.csv')\ndf_test = pd.read_csv('..\/input\/titanic\/test.csv')\n\n# FamilySize\ndf_train['FamilySize'] = df_train['SibSp'] + df_train['Parch'] + 1 # \uc790\uc2e0\uc744 \ud3ec\ud568\ud574\uc57c\ud558\ub2c8 1\uc744 \ub354\ud569\ub2c8\ub2e4\ndf_test['FamilySize'] = df_test['SibSp'] + df_test['Parch'] + 1 # \uc790\uc2e0\uc744 \ud3ec\ud568\ud574\uc57c\ud558\ub2c8 1\uc744 \ub354\ud569\ub2c8\ub2e4\n\n# fare null --> mean()\ndf_test.loc[df_test.Fare.isnull(), 'Fare'] = df_test['Fare'].mean()\n\n# fare distribution --> log\ndf_train['Fare'] = df_train['Fare'].map(lambda i: np.log(i) if i > 0 else 0)\ndf_test['Fare'] = df_test['Fare'].map(lambda i: np.log(i) if i > 0 else 0)","dc8a679c":"# name\uc758 Mr, Mrs, ... \uc744 \ucc3e\uc544\ubcf4\uc790\ndf_train['Initial'] = df_train.Name.str.extract('([A-Za-z]+)\\.') \ndf_test['Initial'] = df_test.Name.str.extract('([A-Za-z]+)\\.') ","0879ee05":"pd.crosstab(df_train['Initial'], df_train['Sex']).T.style.background_gradient(cmap='summer_r')","3e4a34fd":"# \uc774\ub984\uc744 Miss, Mr, Mrs, other\ub85c \ub098\ub214\ndf_train['Initial'].replace(['Mlle','Mme','Ms','Dr','Major','Lady','Countess','Jonkheer','Col','Rev','Capt','Sir','Don', 'Dona'],\n                        ['Miss','Miss','Miss','Mr','Mr','Mrs','Mrs','Other','Other','Other','Mr','Mr','Mr', 'Mr'],inplace=True)\n\ndf_test['Initial'].replace(['Mlle','Mme','Ms','Dr','Major','Lady','Countess','Jonkheer','Col','Rev','Capt','Sir','Don', 'Dona'],\n                        ['Miss','Miss','Miss','Mr','Mr','Mrs','Mrs','Other','Other','Other','Mr','Mr','Mr', 'Mr'],inplace=True)","fac2283a":"df_train.groupby('Initial').mean()","bc60a223":"df_train.groupby('Initial')['Survived'].mean().plot.bar()","374e7568":"df_train.groupby('Initial').mean()","12974492":"df_train.loc[(df_train.Age.isnull())&(df_train.Initial=='Mr'),'Age'] = 33\ndf_train.loc[(df_train.Age.isnull())&(df_train.Initial=='Mrs'),'Age'] = 36\ndf_train.loc[(df_train.Age.isnull())&(df_train.Initial=='Master'),'Age'] = 5\ndf_train.loc[(df_train.Age.isnull())&(df_train.Initial=='Miss'),'Age'] = 22\ndf_train.loc[(df_train.Age.isnull())&(df_train.Initial=='Other'),'Age'] = 46\n\ndf_test.loc[(df_test.Age.isnull())&(df_test.Initial=='Mr'),'Age'] = 33\ndf_test.loc[(df_test.Age.isnull())&(df_test.Initial=='Mrs'),'Age'] = 36\ndf_test.loc[(df_test.Age.isnull())&(df_test.Initial=='Master'),'Age'] = 5\ndf_test.loc[(df_test.Age.isnull())&(df_test.Initial=='Miss'),'Age'] = 22\ndf_test.loc[(df_test.Age.isnull())&(df_test.Initial=='Other'),'Age'] = 46","5710ccdd":"print('Embarked has ', sum(df_train['Embarked'].isnull()), ' Null values')","fff22e6c":"# null data\uac00 2\uac1c\ubc16\uc5d0\uc5c6\uace0 \uc774\ub97c \uac00\uc7a5 \ub9ce\uc740 S\ub85c \ucc44\uc6b4\ub2e4.\ndf_train['Embarked'].fillna('S', inplace=True)","0164e0ae":"df_train['Age_cat'] = 0\ndf_train.loc[df_train['Age'] < 10, 'Age_cat'] = 0\ndf_train.loc[(10 <= df_train['Age']) & (df_train['Age'] < 20), 'Age_cat'] = 1\ndf_train.loc[(20 <= df_train['Age']) & (df_train['Age'] < 30), 'Age_cat'] = 2\ndf_train.loc[(30 <= df_train['Age']) & (df_train['Age'] < 40), 'Age_cat'] = 3\ndf_train.loc[(40 <= df_train['Age']) & (df_train['Age'] < 50), 'Age_cat'] = 4\ndf_train.loc[(50 <= df_train['Age']) & (df_train['Age'] < 60), 'Age_cat'] = 5\ndf_train.loc[(60 <= df_train['Age']) & (df_train['Age'] < 70), 'Age_cat'] = 6\ndf_train.loc[70 <= df_train['Age'], 'Age_cat'] = 7\n\ndf_test['Age_cat'] = 0\ndf_test.loc[df_test['Age'] < 10, 'Age_cat'] = 0\ndf_test.loc[(10 <= df_test['Age']) & (df_test['Age'] < 20), 'Age_cat'] = 1\ndf_test.loc[(20 <= df_test['Age']) & (df_test['Age'] < 30), 'Age_cat'] = 2\ndf_test.loc[(30 <= df_test['Age']) & (df_test['Age'] < 40), 'Age_cat'] = 3\ndf_test.loc[(40 <= df_test['Age']) & (df_test['Age'] < 50), 'Age_cat'] = 4\ndf_test.loc[(50 <= df_test['Age']) & (df_test['Age'] < 60), 'Age_cat'] = 5\ndf_test.loc[(60 <= df_test['Age']) & (df_test['Age'] < 70), 'Age_cat'] = 6\ndf_test.loc[70 <= df_test['Age'], 'Age_cat'] = 7","8433e2cc":"def category_age(x):\n    if x < 10:\n        return 0\n    elif x < 20:\n        return 1\n    elif x < 30:\n        return 2\n    elif x < 40:\n        return 3\n    elif x < 50:\n        return 4\n    elif x < 60:\n        return 5\n    elif x < 70:\n        return 6\n    else:\n        return 7    \n    \ndf_train['Age_cat_2'] = df_train['Age'].apply(category_age)\ndf_test['Age_cat_2'] = df_test['Age'].apply(category_age)","fb98163a":"print('1\ubc88 \ubc29\ubc95, 2\ubc88 \ubc29\ubc95 \ub458\ub2e4 \uac19\uc740 \uacb0\uacfc\ub97c \ub0b4\uba74 True \uc918\uc57c\ud568 -> ', (df_train['Age_cat'] == df_train['Age_cat_2']).all())","f90fbde5":"df_train.drop(['Age', 'Age_cat_2'], axis=1, inplace=True)\ndf_test.drop(['Age', 'Age_cat_2'], axis=1, inplace=True)","65a93f76":"df_train['Initial'] = df_train['Initial'].map({'Master': 0, 'Miss': 1, 'Mr': 2, 'Mrs': 3, 'Other': 4})\ndf_test['Initial'] = df_test['Initial'].map({'Master': 0, 'Miss': 1, 'Mr': 2, 'Mrs': 3, 'Other': 4})","a3918cfe":"df_train['Embarked'].unique()","df61dd7b":"df_train['Embarked'].value_counts()","29358424":"df_train['Embarked'] = df_train['Embarked'].map({'C': 0, 'Q': 1, 'S': 2})\ndf_test['Embarked'] = df_test['Embarked'].map({'C': 0, 'Q': 1, 'S': 2})","3c5272d3":"# null \ud655\uc778\ndf_train['Embarked'].isnull().any()","63d103b7":"df_train['Sex'] = df_train['Sex'].map({'female': 0, 'male': 1})\ndf_test['Sex'] = df_test['Sex'].map({'female': 0, 'male': 1})\ndf_train['Sex'].isnull().any()","cb12bfdb":"heatmap_data = df_train[['Survived', 'Pclass', 'Sex', 'Fare', 'Embarked', 'FamilySize', 'Initial', 'Age_cat']] \n\ncolormap = plt.cm.RdBu\nplt.figure(figsize=(14, 12))\nplt.title('Pearson Correlation of Features', y=1.05, size=15)\n\nsns.heatmap(heatmap_data.astype(float).corr(), linewidths=0.1, vmax=1.0,\n           square=True, cmap=colormap, linecolor='white', annot=True, annot_kws={\"size\": 16})\n\ndel heatmap_data","97bfefcb":"df_train = pd.get_dummies(df_train, columns=['Initial'], prefix='Initial')\ndf_test = pd.get_dummies(df_test, columns=['Initial'], prefix='Initial')\ndf_train.head()","600c37f9":"df_train = pd.get_dummies(df_train, columns=['Embarked'], prefix='Embarked')\ndf_test = pd.get_dummies(df_test, columns=['Embarked'], prefix='Embarked')\ndf_train.head()","9d2d4f1d":"df_train.drop(['PassengerId', 'Name', 'SibSp', 'Parch', 'Ticket', 'Cabin'], axis=1, inplace=True)\ndf_test.drop(['PassengerId', 'Name', 'SibSp', 'Parch', 'Ticket', 'Cabin'], axis=1, inplace=True)\ndf_train.head()","325ab4b8":"df_test.head()","de2b2675":"from sklearn.ensemble import RandomForestClassifier\nfrom sklearn import metrics\nfrom sklearn.model_selection import train_test_split","c979be40":"X_train = df_train.drop('Survived', axis=1).values\ntarget_label = df_train['Survived'].values\n\nX_test = df_test.values","24562132":"X_tr, X_vld, y_tr, y_vld = train_test_split(X_train, target_label, test_size = 0.3, random_state = 395)","21f44473":"model = RandomForestClassifier()\nmodel.fit(X_tr, y_tr)\nprediction = model.predict(X_vld)","9d82fa5b":"print('\ucd1d {}\uba85 \uc911 {:.2f}% \uc815\ud655\ub3c4\ub85c \uc0dd\uc874\uc744 \ub9de\ucda4'.format(y_vld.shape[0], 100 * metrics.accuracy_score(prediction, y_vld)))","31cc7089":"max_idx, max_score = 0, 0\nmodel = RandomForestClassifier()\nfor i in range(3000) :\n    X_tr, X_vld, y_tr, y_vld = train_test_split(X_train, target_label, test_size = 0.3, random_state = i)\n    model.fit(X_tr, y_tr)\n    prediction = model.predict(X_vld)\n#     print(i, end=', ')\n#     print('\ucd1d {}\uba85 \uc911 {:.2f}% \uc815\ud655\ub3c4\ub85c \uc0dd\uc874\uc744 \ub9de\ucda4'.format(y_vld.shape[0], 100 * metrics.accuracy_score(prediction, y_vld)))\n    \n    if max_score < 100 * metrics.accuracy_score(prediction, y_vld):\n        max_score = 100 * metrics.accuracy_score(prediction, y_vld)\n        max_idx = i \n\nprint(max_idx, max_score)","54f09e66":"print(max_idx)\nX_tr, X_vld, y_tr, y_vld = train_test_split(X_train, target_label, test_size = 0.3, random_state = max_idx)\nmodel.fit(X_tr, y_tr)\nprediction = model.predict(X_vld)\nprint('\ucd1d {}\uba85 \uc911 {:.2f}% \uc815\ud655\ub3c4\ub85c \uc0dd\uc874\uc744 \ub9de\ucda4'.format(y_vld.shape[0], 100 * metrics.accuracy_score(prediction, y_vld)))","66568c76":"from pandas import Series\n\nfeature_importance = model.feature_importances_\nSeries_feat_imp = Series(feature_importance, index=df_test.columns)","11babddc":"plt.figure(figsize=(8, 8))\nSeries_feat_imp.sort_values(ascending=True).plot.barh()\nplt.xlabel('Feature importance')\nplt.ylabel('Feature')\nplt.show()","799eb7e1":"submission = pd.read_csv('..\/input\/titanic\/gender_submission.csv')","1e86c317":"submission.head()","6012438a":"X_test","dc77db71":"prediction = model.predict(X_test)\nprediction","179f097c":"submission['Survived'] = prediction\nsubmission.head()","5bc13f2b":"submission.to_csv('.\/my_first_submission.csv', index=False)","ffab5845":"age\uc758 \ud3c9\uade0\uc744 \uc774\uc6a9\ud558\uc5ec null value\ub97c \ucc44\uc6c0","70e55b55":"## 4.3 Feature importance","372a1a8e":"* S \uc5d0\uc11c \uac00\uc7a5 \ub9ce\uc740 \uc0ac\ub78c\uc774 \ud0d1\uc2b9\ud588\ub2e4\n* C,Q \ub294 \ub0a8\ub140\ube44\uc728\uc774 \ube44\uc2b7 S\ub294 \ub0a8\uc790\uac00 \ub354 \ub9ce\ub2e4\n* S\uc758 \uacbd\uc6b0 \uc0dd\uc874\ud655\ub960\uc774 \ub2e4\ub978 label \ubcf4\ub2e4 \ub0ae\ub2e4\n* C\uc758 \uacbd\uc6b0 pclass\uac00 \ub192\uc740 \uc0ac\ub78c\ub4e4\uc774 \ub9ce\uc774 \ud0d4\uace0, S\uc758 \uacbd\uc6b0 pclass\uac00 \ub0ae\uc740 \uc0ac\ub78c\uc774 \ub9ce\uc774 \ud0c0\uc11c \uac01\uac01\uc758 \uc0dd\uc874\ub960\uc774 \ub192\uace0 \ub0ae\ub2e4","bef486cf":"## 4.1 preparation - split dataset ","6ee77fbf":"# 4. building ml model and prediction using trained model","7e823e32":"* loc\ub97c \uc774\uc6a9\ud558\uc5ec \uce58\ud658","d8979635":"* apply \ud568\uc218\ub97c \uc774\uc6a9\ud558\uc5ec \uce58\ud658","b876d792":"## 2.1 Pclass\n* \ub4f1\uae09\uc774 \ub098\ub220\uc838 \uc788\uc73c\uba70 \ubc94\uc8fc\ud615 \ubcc0\uc218\uc774\uba74\uc11c \uc21c\uc11c\uac00 \uc788\ub2e4","dc364601":"### 3.1.1 fill null in age using title","95b6d026":"* 38.4% \uac00 \uc0b4\uc544\ub0a8\uc74c\n* target data \uc758 \ubd84\ud3ec\uac00 \uc0c1\ub2f9\ud788 \uace0\ub984\uc744 \ud655\uc778 \ud560 \uc218 \uc788\uc5c8\uc74c","a4ed19c6":"## 2.5 pclass, sex, age","cf43f267":"* 'PassengerId' - passenger id\n* 'Survived' - \uc0dd\uc874 \uc5ec\ubd80, 0 = dead, 1 = survived \n* 'Pclass' - \uc88c\uc11d \ub4f1\uae09 , 1 = 1st, 2 = 2nd, 3 = 3rd , categorical, ordered\n* 'Name' - \uc2b9\uac1d \uc774\ub984\n* 'Sex' - \uc131\ubcc4 , male, female , categorical\n* 'Age' - \ub098\uc774 , continous\n* 'SibSp' - \ud615\uc81c, \uc790\ub9e4\uc758 \uc218, quentity\n* 'Parch' - \ubd80\ubaa8, \uc790\uc2dd\uc758 \uc218, quentity\n* 'Ticket' - \ud2f0\ucf13 \ubc88\ud638\n* 'Fare' - \uc694\uae08 , continous\n* 'Cabin' - \uac1d\uc2e4 \ubc88\ud638\n* 'Embarked' - \ud0d1\uc2b9 \ud56d\uad6c, C = Cherbourg, Q = Queenstown, S = Southampton, categorical","727764c4":"# 2. Exploratory data analysis","8dc0527d":"\uc5ec\uc790\uc758 \uc0dd\uc874\ub960\uc774 \ub192\uc740 \uac83\uc744 \ud655\uc778 \ud560 \uc218 \uc788\ub2e4","adb9341d":"\ub098\uc774\uac00 \uc5b4\ub9b4\uc218\ub85d \uc0dd\uc874\ub960\uc774 \ub192\ub2e4\ub294 \uac78 \uc7ac\ud655\uc778 \ud560 \uc218 \uc788\ub2e4","75e73c92":"## 2.3 Sex & Pclass","83341baa":"## 3.1 fill null data","793e867b":"## 3.3 Change Initial, Embarked and Sex","0db52abe":"## 2.8 Fare","12286a6d":"## 2.10 Ticket","64063765":"## 3.2 Change Age( continous to categorical)","b55ecece":"## 3.4 one-hot encoding on Initial and Embarked","b271ee22":"## 2.9 Cabin","c9ccd8bc":"* familysize\uac00 \uc791\uc744\uc218\ub85d 1~4 \uc815\ub3c4\uc5d0\uc11c \uc0dd\uc874\ub960\uc774 \ub192\ub2e4","c647efb9":"\ube44\ub300\uce6d\uc774 \ub108\ubb34 \uc2ec\ud558\ubbc0\ub85c \uc815\uaddc\ud654\uc758 \ud544\uc694\uac00 \uc788\ub2e4 --> log\ud654 ","f2938a32":"### 3.1.2 fill null in embarked","691a35d1":"## 2.6 Embarked","3ec17c60":"## 3.5 Drop columns","e3ee946a":"\uc0c1\uad00\uad00\uacc4 \ubd84\uc11d","7627836a":"## 4.2 model generation and prediction","b2260c86":"age\ub294 train, test\uc5d0\uc11c \uac01\uac01 20%\uc815\ub3c4 cabin\uc740 \uac01\uac01 80%\uc815\ub3c4 null data\uac00 \uc788\uc74c\uc744 \ud655\uc778 ","ca003939":"\uc704\uc640 \uac19\uc774 pclass\uac00 \ub192\uc744 \uc218\ub85d \uc0dd\uc874\ub960\uc774 \ub192\uc740\uac83\uc744 \ud655\uc778\ud558\uc600\ub2e4","d989b49d":"# 1. Dataset check","e3d93258":"* \ub098\uc774\uac00 \uc5b4\ub9b4\uc218\ub85d \uc0dd\uc874\ub960\uc774 \ub192\ub2e4","ec5d8e9b":"## 1.1 null data check","4311122d":"## 4.4 prediction on test set","12393656":"* class\uac00 \ub192\uc744 \uc218\ub85d \ub098\uc774 \ub9ce\uc740 \uc0ac\ub78c\uc774 \ub9ce\ub2e4\n* \ub098\uc774 \ubc94\uc704\ubcc4 \uc0dd\uc874\ub960\uc744 \ud655\uc778\ud574\ubcf4\uc790","8c2d631a":"# 3. Feature Engineering","53799e1f":"## 2.7 SibSp, Parch\n\uac00\uc871\uc774\ub77c\ub294 \ubc94\uc704\ub85c \ud574\uc11d\ub420 \uc218 \uc788\uc73c\ubbc0\ub85c \ub458\uc744 \ud569\uccd0\ubd04","ff26c940":"* pclass\uc5d0 \uc0c1\uad00\uc5c6\uc774 \uc5ec\uc131\uc774 \ub0a8\uc131\ubcf4\ub2e4 \ub9ce\uc774 \uc0b4\uc544\ub0a8\uc558\ub2e4\n* \uc131\ubcc4\uc5d0 \uad00\uacc4\uc5c6\uc774 pclass\uac00 \ub192\uc744\uc218\ub85d \ub354 \ub9ce\uc774 \uc0b4\uc544\ub0a8\uc558\ub2e4","36f8ea0a":"## 2.4 Age","bd83ba1c":"* \ub098\uc774\uac00 \uc5b4\ub9ac\uace0 \uc5ec\uc790\uc77c \uc218\ub85d \uc0dd\uc874\ub960\uc774 \ub192\ub2e4","e6c17043":"\uc5ec\uc131\uacfc \uad00\uacc4\uc788\ub294 Miss, Mrs\uac00 \uc0dd\uc874\ub960\uc774 \ub192\uc740 \uac83\uc744 \ud655\uc778 \ud560 \uc218 \uc788\uc74c","ac59302a":"pclass \uac00 \ub192\uc744 \uc218\ub85d \uc0dd\uc874\uc728\uc774 \ub192\ub2e4(\uac01 63%, 47%, 24%)","666074a0":"## 1.2 target label check\n\ubd84\ud3ec \ud655\uc778(target\uc758 \ubd84\ud3ec\uac00 \uace0\ub974\uac8c \ub418\uc5b4\uc788\ub290\ub0d0)","34bb8836":"## 2.2 Sex"}}