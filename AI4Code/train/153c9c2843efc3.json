{"cell_type":{"a463df85":"code","f70d0596":"code","6a19d814":"code","0f2f8a3b":"code","af5221f0":"code","0555880f":"code","d47711e8":"code","871bbca2":"code","9efeab4e":"code","e3f2070d":"code","6d443a04":"code","363118ce":"code","52c8fc8d":"code","679410c3":"code","00a46141":"code","0033a9cc":"code","30cc9bc4":"markdown","8ce52f5e":"markdown","595d289c":"markdown","4d4cb8e8":"markdown","ce7c68b7":"markdown","8be8063c":"markdown","03bda866":"markdown","0bf5bb15":"markdown","78e6e056":"markdown","51ccffc2":"markdown","fffb39ea":"markdown","9bc568d5":"markdown","cf8ae6ea":"markdown","cf3960dd":"markdown","02b6bd23":"markdown","5933d796":"markdown","a84e53fe":"markdown","4d872011":"markdown","49e57932":"markdown","50d88b87":"markdown","998342fe":"markdown","1af629e4":"markdown","772725d8":"markdown","1ed5beaf":"markdown","bb1893af":"markdown","05af0714":"markdown"},"source":{"a463df85":"import numpy as np\nimport pandas as pd\n\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\nimport os\nimport json\nimport glob\nimport random\nimport collections\nimport cv2\n\nimport pydicom\nfrom pydicom.pixel_data_handlers.util import apply_voi_lut\n\nfrom matplotlib import animation, rc\nrc('animation', html='jshtml')\n","f70d0596":"train_df = pd.read_csv(\"..\/input\/rsna-miccai-brain-tumor-radiogenomic-classification\/train_labels.csv\")\ntrain_df.head(5)","6a19d814":"plt.figure(figsize=(5, 5))\nsns.countplot(data=train_df, x=\"MGMT_value\");","0f2f8a3b":"def load_dicom(path):\n    dicom = pydicom.read_file(path)\n    data = dicom.pixel_array\n    data = data - np.min(data)\n    if np.max(data) != 0:\n        data = data \/ np.max(data)\n    data = (data * 255).astype(np.uint8)\n    return data\n\n\n\ndef visualize_sample(\n    brats21id, \n    slice_i,\n    mgmt_value,\n    types=(\"FLAIR\", \"T1w\", \"T1wCE\", \"T2w\")\n):\n    plt.figure(figsize=(10, 3))\n    patient_path = os.path.join(\n        \"..\/input\/rsna-miccai-brain-tumor-radiogenomic-classification\/train\/\", \n        str(brats21id).zfill(5),\n    )\n    for i, t in enumerate(types, 1):\n        t_paths = sorted(\n            glob.glob(os.path.join(patient_path, t, \"*\")), \n            key=lambda x: int(x[:-4].split(\"-\")[-1]),\n        )\n        data = load_dicom(t_paths[int(len(t_paths) * slice_i)])\n        plt.subplot(1, 4, i)\n        plt.imshow(data, cmap=\"gray\")\n        plt.title(f\"{t}\", fontsize=10)\n        plt.axis(\"off\")\n    plt.show()\n    \n","af5221f0":"list0=[315,176,153,164]\nfor i in list0:\n    _brats21id = train_df.iloc[i][\"BraTS21ID\"]\n    _mgmt_value = train_df.iloc[i][\"MGMT_value\"]\n    visualize_sample(brats21id=_brats21id, mgmt_value=_mgmt_value, slice_i=0.55)","0555880f":"list1=[184,315,155,228]\nfor i in list1:\n    _brats21id = train_df.iloc[i][\"BraTS21ID\"]\n    _mgmt_value = train_df.iloc[i][\"MGMT_value\"]\n    visualize_sample(brats21id=_brats21id, mgmt_value=_mgmt_value, slice_i=0.55)","d47711e8":"def create_animation(ims):\n    fig = plt.figure(figsize=(5, 5))\n    plt.axis('off')\n    im = plt.imshow(ims[0], cmap=\"gray\")\n\n    def animate_func(i):\n        im.set_array(ims[i])\n        #return [im]\n    return animation.FuncAnimation(fig, animate_func, frames = len(ims), interval = 1000\/\/4)\n\ndef load_dicom_line(path):\n    t_paths = sorted(\n        glob.glob(os.path.join(path, \"*\")), \n        key=lambda x: int(x[:-4].split(\"-\")[-1]),\n    )\n    images = []\n    for filename in t_paths:\n        data = load_dicom(filename)\n        if data.max() == 0:\n            continue\n        images.append(data)\n        \n    return images","871bbca2":"images = load_dicom_line(\"..\/input\/rsna-miccai-brain-tumor-radiogenomic-classification\/train\/00176\/FLAIR\")\nanm_FLAIR0=create_animation(images)\nimages = load_dicom_line(\"..\/input\/rsna-miccai-brain-tumor-radiogenomic-classification\/train\/00176\/T1w\")\nanm_T1W0=create_animation(images)\nimages = load_dicom_line(\"..\/input\/rsna-miccai-brain-tumor-radiogenomic-classification\/train\/00176\/T1wCE\")\nanm_T1wCE0=create_animation(images)\nimages = load_dicom_line(\"..\/input\/rsna-miccai-brain-tumor-radiogenomic-classification\/train\/00176\/T2w\")\nanm_T2w0=create_animation(images)\n\n\nimages = load_dicom_line(\"..\/input\/rsna-miccai-brain-tumor-radiogenomic-classification\/train\/00184\/FLAIR\")\nanm_FLAIR1=create_animation(images)\nimages = load_dicom_line(\"..\/input\/rsna-miccai-brain-tumor-radiogenomic-classification\/train\/00184\/T1w\")\nanm_T1W1=create_animation(images)\nimages = load_dicom_line(\"..\/input\/rsna-miccai-brain-tumor-radiogenomic-classification\/train\/00184\/T1wCE\")\nanm_T1wCE1=create_animation(images)\nimages = load_dicom_line(\"..\/input\/rsna-miccai-brain-tumor-radiogenomic-classification\/train\/00184\/T2w\")\nanm_T2w1=create_animation(images)","9efeab4e":"anm_FLAIR0","e3f2070d":"anm_T1W0","6d443a04":"anm_T1wCE0","363118ce":"anm_T2w0","52c8fc8d":"anm_FLAIR1","679410c3":"anm_T1W1","00a46141":"anm_T1wCE1","0033a9cc":"anm_T2w1","30cc9bc4":"# Data Description\n* The competition data is defined by three cohorts: **Training**, **Validation** (Public), and **Testing** (Private). The \u201cTraining\u201d and the \u201cValidation\u201d cohorts are provided to the participants, whereas the \u201cTesting\u201d cohort is kept hidden at all times, during and after the competition.\n\n* These 3 cohorts are structured as follows: Each independent case has a dedicated folder identified by a five-digit number. Within each of these \u201ccase\u201d folders, there are four sub-folders, each of them corresponding to each of the structural multi-parametric MRI (mpMRI) scans, in DICOM format.\n\n## .dcm\nThe .dcm file is DICOM (Digital Imaging and Communications in Medicine), which is a file for recording medical images and related information in medical digital imaging and communication. When used for medical image processing, we need to read the image information in the .dcm file into the python program.","8ce52f5e":"# References","595d289c":"# Animation","4d4cb8e8":"![download.jpg](attachment:65d997fb-451f-495c-935e-48e065a2fdf6.jpg)","ce7c68b7":"### FLAIR","8be8063c":"# \ud83e\udde0Brain Tumor 3D EDA","03bda866":"# Data Visualization","0bf5bb15":"### FLAIR","78e6e056":"* **The goal:**In this competition you will predict the genetic subtype of glioblastoma using MRI (magnetic resonance imaging) scans to train and test your model to detect for the presence of MGMT promoter methylation.","51ccffc2":"## The exact mpMRI scans included are:\n1.  Fluid Attenuated Inversion Recovery (FLAIR)\n1. T1-weighted pre-contrast (T1w)\n1. T1-weighted post-contrast (T1Gd)\n1. T2-weighted (T2)\n\n**Exact folder structure:**","fffb39ea":"# T1w","9bc568d5":"# importing libraries","cf8ae6ea":"# MGMT=0","cf3960dd":"# T1w","02b6bd23":"## Files\n* **train** folder containing the training files, with each top-level folder representing a subject\n* **train_labels.csv** file containing the target MGMT_value for each subject in the training data (e.g. the presence of MGMT promoter methylation)\n* **test** the test files, which use the same structure as train\/; your task is to predict the MGMT_value for each subject in the test data. NOTE: the total size of the rerun test set (Public and Private) is ~5x the size of the Public test set\n* **sample_submission.csv**  a sample submission file in the correct format","5933d796":"# MGMT=1","a84e53fe":"# MGMT=0","4d872011":"# MGMT=1","49e57932":"# T1wCE","50d88b87":"1. https:\/\/www.kaggle.com\/avloss\/eda-with-animation\n1. https:\/\/www.kaggle.com\/polomarco\/visualizatio-3d-nifti-dicom-matlab-nrrd-files\n1. https:\/\/www.kaggle.com\/ihelon\/brain-tumor-eda-with-animations-and-modeling\n1. https:\/\/www.kaggle.com\/ihelon\/brain-tumor-eda-with-animations-and-modeling","998342fe":"![1q.jpg](attachment:f2c0f2f5-d6ae-4ee8-b765-e0661b305049.jpg)","1af629e4":"# loading data","772725d8":"### T2W","1ed5beaf":"# T1wCE","bb1893af":"### T2W","05af0714":"## WORK IN PROGRESS..."}}