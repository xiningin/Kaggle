{"cell_type":{"f1c78d68":"code","f4108306":"code","f4d77a80":"code","9d8bc6f2":"code","28cbe373":"code","c7d6df18":"code","2c149042":"code","7b2a1ad6":"code","bf5d148a":"code","84d0ae97":"code","319977bd":"code","60ef1645":"code","717a2191":"code","c89caaba":"code","383f4f70":"code","260bf321":"code","e76a1d19":"code","e75749b4":"code","58cef018":"code","34f19f3a":"code","f45654e4":"markdown","35d44260":"markdown","7af8351e":"markdown","8a9c369e":"markdown","2ec2869b":"markdown"},"source":{"f1c78d68":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","f4108306":"#\u30c7\u30fc\u30bf\u306e\u8aad\u307f\u8fbc\u307f\u3068\u78ba\u8a8d\ndf = pd.read_csv(\"\/kaggle\/input\/cardiogoodfitness\/CardioGoodFitness.csv\") \ndf.head()","f4d77a80":"#\u6b20\u640d\u5024\u306e\u78ba\u8a8d\ndf.isnull().sum()","9d8bc6f2":"#\u30ab\u30c6\u30b4\u30ea\u30fc\u5909\u6570\u3092\u78ba\u8a8d\nprint(df.groupby(\"Product\").size())\nprint(\"_\"*40)\nprint(df.groupby(\"Gender\").size())\nprint(\"_\"*40)\nprint(df.groupby(\"MaritalStatus\").size())","28cbe373":"#\u30ab\u30c6\u30b4\u30ea\u30fc\u5909\u6570\u3092\u30a8\u30f3\u30b3\u30fc\u30c9\ndf = pd.get_dummies(df, columns = [\"Product\",\"Gender\",\"MaritalStatus\"])\ndf.head()","c7d6df18":"#\u30c7\u30fc\u30bf\u30bf\u30a4\u30d7\u3092float\u306b\u5909\u63db\ndf = df.astype(float)\ndf.dtypes","2c149042":"#\u7279\u5fb4\u91cf\u3054\u3068\u306e\u95a2\u4fc2\u3092\u30d7\u30ed\u30c3\u30c8\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nsns.pairplot(df)\nplt.show()\n","7b2a1ad6":"#\u30d2\u30fc\u30c8\u30de\u30c3\u30d7\u3067\u8868\u793a\ncolormap = plt.cm.RdBu\nplt.figure(figsize=(14,12))\nsns.heatmap(df.corr(),linewidths=0.1, \ncmap=colormap, linecolor='white', \nannot=True)","bf5d148a":"#\u30c7\u30fc\u30bf\u30d5\u30ec\u30fc\u30e0\u306e\u884c\u6570\u3068\u5217\u6570\u3092\u78ba\u8a8d\ndf.shape","84d0ae97":"#\u76ee\u7684\u5909\u6570\u3092income\u3068\u3059\u308b\ny = df[\"Income\"]\nX = df.drop(columns = [\"Income\"])\nX.shape","319977bd":"#\u6a19\u6e96\u5316\nfrom sklearn import preprocessing\nsc = preprocessing.StandardScaler()\nX_std = sc.fit_transform(X)\nX_std","60ef1645":"#\u8a13\u7df4\u30c7\u30fc\u30bf\u3068\u30c6\u30b9\u30c8\u30c7\u30fc\u30bf\nfrom sklearn.model_selection import train_test_split\nX_train, X_test, y_train, y_test = train_test_split(X_std, y)","717a2191":"#\u4f5c\u3063\u305fX_train\u3092\u78ba\u8a8d\nX_train.shape","c89caaba":"#\u7dda\u5f62\u30e2\u30c7\u30eb\nfrom sklearn import linear_model \n#Ridge\u30e2\u30c7\u30eb\u3092\u4f7f\u3046\nrg = linear_model.Ridge()\nrg.fit(X_train, y_train)\n","383f4f70":"# \u504f\u56de\u5e30\u4fc2\u6570\u306e\u8868\u793a\nprint(\"coefficient  = \", rg.coef_)\n# \u5207\u7247\u306e\u8868\u793a\nprint(\"intercept = \", rg.intercept_)\n#\u6c7a\u5b9a\u4fc2\u6570\nprint(\"R2\u6c7a\u5b9a\u4fc2\u6570 (\u5b66\u7fd2\u30c7\u30fc\u30bf) = \", rg.score(X_train, y_train))\nprint(\"R2\u6c7a\u5b9a\u4fc2\u6570 (\u30c6\u30b9\u30c8\u30c7\u30fc\u30bf) = \", rg.score(X_test, y_test))","260bf321":"#SDGRegressor\nrg = linear_model.SGDRegressor(max_iter=1000)\nrg.fit(X_train, y_train)\n#\u6c7a\u5b9a\u4fc2\u6570\nprint(\"R2\u6c7a\u5b9a\u4fc2\u6570 (\u5b66\u7fd2\u30c7\u30fc\u30bf) = \", rg.score(X_train, y_train))\nprint(\"R2\u6c7a\u5b9a\u4fc2\u6570 (\u30c6\u30b9\u30c8\u30c7\u30fc\u30bf) = \", rg.score(X_test, y_test))","e76a1d19":"#ElasticNet\nrg = linear_model.ElasticNet(alpha=0.1, l1_ratio=1.0)\nrg.fit(X_train, y_train)\n#\u6c7a\u5b9a\u4fc2\u6570\nprint(\"R2\u6c7a\u5b9a\u4fc2\u6570 (\u5b66\u7fd2\u30c7\u30fc\u30bf) = \", rg.score(X_train, y_train))\nprint(\"R2\u6c7a\u5b9a\u4fc2\u6570 (\u30c6\u30b9\u30c8\u30c7\u30fc\u30bf) = \", rg.score(X_test, y_test))","e75749b4":"rg = linear_model.Lasso(alpha=0.1)\nrg.fit(X_train, y_train)\n#\u6c7a\u5b9a\u4fc2\u6570\nprint(\"R2\u6c7a\u5b9a\u4fc2\u6570 (\u5b66\u7fd2\u30c7\u30fc\u30bf) = \", rg.score(X_train, y_train))\nprint(\"R2\u6c7a\u5b9a\u4fc2\u6570 (\u30c6\u30b9\u30c8\u30c7\u30fc\u30bf) = \", rg.score(X_test, y_test))","58cef018":"# \u30a2\u30f3\u30b5\u30f3\u30d6\u30eb\u5b66\u7fd2\nfrom sklearn import ensemble\n# \u30e9\u30f3\u30c0\u30e0\u30d5\u30a9\u30ec\u30b9\u30c8\u306e\u4f8b\nrg = ensemble.RandomForestRegressor()\nrg.fit(X_train, y_train)\n\n\nprint(\"R2\u6c7a\u5b9a\u4fc2\u6570 (\u5b66\u7fd2\u30c7\u30fc\u30bf) = \", rg.score(X_train, y_train))\nprint(\"R2\u6c7a\u5b9a\u4fc2\u6570 (\u30c6\u30b9\u30c8\u30c7\u30fc\u30bf) = \", rg.score(X_test, y_test))\n","34f19f3a":"# \u7279\u5fb4\u91cf\u306e\u91cd\u8981\u5ea6\nimportance = rg.feature_importances_\n# \u7279\u5fb4\u91cf\u306e\u540d\u524d\nlabel = X.columns[0:]\n# \u91cd\u8981\u5ea6\u3068\u7279\u5fb4\u91cf\u306e\u540d\u524d\u304b\u3089\u306a\u308b\u30c7\u30fc\u30bf\u3092\u4f5c\u308b\nfeature_importances = pd.concat([pd.Series(label), pd.Series(importance)], axis=1)\n# \u91cd\u8981\u5ea6\u9806\u306b\u4e26\u3079\u66ff\u3048\u3066\u8868\u793a\u3059\u308b\nsorted_feature_importances = feature_importances.sort_values(1, ascending=False)\nprint(sorted_feature_importances)\n","f45654e4":"## \u9867\u5ba2\u53ce\u5165\u306f\u5e74\u9f62\u3068TM798\u306e\u30eb\u30fc\u30e0\u30e9\u30f3\u30ca\u30fc\u306e\u4f7f\u3044\u306b\u5f37\u3044\u95a2\u4fc2\u304c\u3042\u308b\u305d\u3046\u3060\u3002","35d44260":"## \u30a2\u30f3\u30b5\u30f3\u30d7\u30eb\u5b66\u7fd2\u306b\u3088\u3063\u3066\u3001\u30b9\u30b3\u30a2\u304c\u305a\u3044\u3076\u3093\u826f\u304f\u306a\u3063\u305f\u3002\u3057\u304b\u3057\u3001\u30c6\u30b9\u30c8\u30b9\u30b3\u30a2\u306f\u5c11\u3057\u30ba\u30ec\u305f\u306e\u3067\u3001\u904e\u5b66\u7fd2\u3060\u3002","7af8351e":"# ML&DL_\u8ab2\u984c_\u56de\u5e30\u5206\u6790\n## 2122024_Nguyen Tien Minh","8a9c369e":"## \u9867\u5ba2\u306e\u53ce\u5165\u306f\u6559\u80b2\u3068TM798\u306e\u30eb\u30fc\u30e0\u30e9\u30f3\u30ca\u30fc\u306b\u5f37\u3044\u6b63\u306e\u76f8\u95a2\u304c\u3042\u308b\u3053\u3068\u304c\u308f\u304b\u308b\u3002TM798\u306f\u9ad8\u4fa1\u306a\u88fd\u54c1\u306e\u3067\u306f\u306a\u3044\u304b\u306a\u3068\u63a8\u5b9a\u3059\u308b\u3002","2ec2869b":"## \u7dda\u5f62\u56de\u5e30\u30e2\u30c7\u30eb\u3054\u3068\u306e\u7d50\u679c\u306f\u3042\u307e\u308a\u5dee\u304c\u306a\u3044"}}