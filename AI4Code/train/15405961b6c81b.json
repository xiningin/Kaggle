{"cell_type":{"23e1b0bc":"code","2b431b0a":"code","61d72020":"code","1ff2e275":"code","a0bd10fb":"code","46781ff5":"code","3624ebd3":"code","8006ee77":"code","459a3dac":"code","4a4854c1":"code","67037d0e":"code","d23c9c6f":"code","76f26cb7":"code","88b3bc79":"code","cf62ff5c":"code","02e7606b":"code","778e8527":"code","26de3852":"code","e093d7ec":"code","50901aeb":"code","1454811b":"code","3f80abcc":"code","18cec1e5":"markdown","3a35d3a6":"markdown","041802dd":"markdown","c719ba34":"markdown","2674021a":"markdown","be2f3c10":"markdown","7b3dc5a5":"markdown"},"source":{"23e1b0bc":"import pandas as pd\nimport numpy as np\nimport math\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom matplotlib import cm\nplt.style.use(\"seaborn\")\n\n!conda install -y -c bioconda forgi\n!conda install -y -c bioconda viennarna\n\nimport forgi.graph.bulge_graph as fgb\nimport forgi.threedee.utilities.vector as ftuv\nimport RNA\n\nimport warnings\nwarnings.filterwarnings('ignore')","2b431b0a":"base = \"..\/input\/stanford-covid-vaccine\/\"\ntrain = pd.read_json(base + 'train.json', lines=True)\n# test = pd.read_json(base + 'test.json', lines=True)\n# submission = pd.read_csv(base + 'sample_submission.csv')\n\ntrain.head()","61d72020":"def _clashfree_annot_pos(pos, coords):\n    for c in coords:\n        dist = ftuv.vec_distance(c, pos)\n        if dist<14:\n            return False\n    return True\n\ndef _find_annot_pos_on_circle(nt, coords, cg):\n    for i in range(5):\n        for sign in [-1,1]:\n            a = np.pi\/4*i*sign\n            if cg.get_elem(nt)[0]==\"s\":\n                bp = cg.pairing_partner(nt)\n                anchor = coords[bp-1]\n            else:\n                anchor =np.mean([ coords[nt-2], coords[nt]], axis=0)\n            vec = coords[nt-1]-anchor\n            vec=vec\/ftuv.magnitude(vec)\n            rotated_vec =  np.array([vec[0]*math.cos(a)-vec[1]*math.sin(a),\n                                     vec[0]*math.sin(a)+vec[1]*math.cos(a)])\n            annot_pos = coords[nt-1]+rotated_vec*50\n            if _clashfree_annot_pos(annot_pos, coords):\n                return annot_pos\n    return None\n","1ff2e275":"def my_plot_rna(cg, highlight_idx, df, max_val, min_val, target=\"reactivity\", ax=None, offset=(0, 0), text_kwargs={}, backbone_kwargs={},\n                nt=True):\n    RNA.cvar.rna_plot_type = 1\n\n    values = np.array(df[target].values[0])\n    coords = []\n\n    bp_string = cg.to_dotbracket_string()\n    # get the type of element of each nucleotide\n    el_string = cg.to_element_string()\n    # i.e. eeesssshhhhsssseeee\n    hl_structure_string = list(df['structure'])[0][highlight_idx]\n    hl_plt_string = list(df['predicted_loop_type'])[0][highlight_idx]\n    paired_string = \"Paired\"\n    if hl_structure_string == \".\":\n        paired_string = \"Unpaired\"\n        \n    if ax is None:\n        ax = plt.gca()\n\n    if offset is None:\n        offset = (0, 0)\n    elif offset is True:\n        offset = (ax.get_xlim()[1], ax.get_ylim()[1])\n    else:\n        pass\n\n    vrna_coords = RNA.get_xy_coordinates(bp_string)\n    # TODO Add option to rotate the plot\n    for i, _ in enumerate(bp_string):\n        coord = (offset[0] + vrna_coords.get(i).X,\n                 offset[1] + vrna_coords.get(i).Y)\n        coords.append(coord)\n    coords = np.array(coords)\n    # First plot backbone\n    bkwargs = {\"color\":\"gray\", \"zorder\":0, \"alpha\":0.2}\n    bkwargs.update(backbone_kwargs)\n    ax.plot(coords[:,0], coords[:,1], **bkwargs)\n    \n    normalized_values = (values - min_val) \/ (max_val - min_val)\n    # Now plot circles\n    for i, coord in enumerate(coords):\n        a = 1.0\n        if i < 68:\n            c = cm.Blues(normalized_values[i])\n        else:\n            c = 'black'\n            a = 0.8\n        circle = plt.Circle((coord[0], coord[1]), radius=8, color=c, alpha=a)\n\n        ax.add_artist(circle)\n        if cg.seq:\n            text_kwargs[\"color\"]=\"red\"\n            if nt:\n                ax.annotate(cg.seq[i+1], xy=coord, ha=\"center\", va=\"center\", **text_kwargs )\n\n    all_coords = list(coords)\n    ntnum_kwargs = {\"color\":\"gray\"}\n    ntnum_kwargs.update(text_kwargs)\n    highlight_kwargs = {\"color\":\"black\", \"fontsize\":15}\n    highlight_kwargs.update(text_kwargs)\n    \n    for nt in range(10, cg.seq_length, 10):\n        # We try different angles\n        annot_pos = _find_annot_pos_on_circle(nt, all_coords, cg)\n        if annot_pos is not None:\n            ax.annotate(str(nt), xy=coords[nt-1], xytext=annot_pos,\n                        arrowprops={\"width\":1, \"headwidth\":1, \"color\":\"gray\"},\n                        ha=\"center\", va=\"center\", zorder=0, **ntnum_kwargs)\n            all_coords.append(annot_pos)\n\n    annot_pos_highlight = _find_annot_pos_on_circle(highlight_idx+1, all_coords, cg)\n    all_coords.append(annot_pos_highlight)\n    ax.annotate(\"HERE!\", xy=coords[highlight_idx], xytext=annot_pos_highlight,\n                arrowprops={\"width\":1, \"headwidth\":1, \"color\":\"red\"},\n                bbox=dict(boxstyle=\"round\", alpha=0.1),\n                ha=\"center\", va=\"center\", zorder=0, **highlight_kwargs)\n    \n    datalim = ((min(list(coords[:, 0]) + [ax.get_xlim()[0]]),\n                min(list(coords[:, 1]) + [ax.get_ylim()[0]])),\n               (max(list(coords[:, 0]) + [ax.get_xlim()[1]]),\n                max(list(coords[:, 1]) + [ax.get_ylim()[1]])))\n\n    ax.set_aspect('equal', 'datalim')\n    ax.update_datalim(datalim)\n    ax.autoscale_view()\n    ax.set_axis_off()\n    \n    val = str(values[highlight_idx])\n    info = df['id'].values[0] + \"\\n\" + target + \": \" + val + \"\\nNT: \" + str(cg.seq[highlight_idx+1]) \\\n    + \"\\nloop type (bpRNA): \" + el_string[highlight_idx] + \"(\" + hl_plt_string + \"), \" \\\n    + paired_string\n    ax.text(ax.get_xlim()[0], ax.get_ylim()[-1], info, fontsize=18)\n\n    return (ax, coords)\n","a0bd10fb":"train = train[train['SN_filter'] == 1]","46781ff5":"def make_target(target_str):    \n    target = train[['id', target_str]]\n    target = target.explode(column=target_str)\n    i = 0\n    for _, row in target.iterrows():\n        row['id'] += \"_\" + str(i % 68)\n        i += 1\n    target = target.sort_values(by=[target_str], ascending=False)\n    target = target.reset_index(drop=True)\n    return target","3624ebd3":"def plot_distribution(target, target_str):\n    target_list = list(target[target_str])\n    plt.figure(figsize=(12, 8))\n    plt.suptitle(target_str + \" distribution\", fontsize=18)\n    plt.subplot(2, 1, 1)\n    plt.hist(target_list, density=True, bins=\"auto\")\n    plt.subplot(2, 1, 2)\n    sns.boxplot(target_list)\n    plt.xlabel(target_str)\n    print(target[target_str].astype(float).describe())\n    plt.show()","8006ee77":"def plot_high_target(n, target, target_str, nt=False, fig_size=None):\n    r = (n \/\/ 5) if (n \/\/ 5 > 0) else 1\n    c = 5\n\n    if fig_size is None:\n        fig_size = (40, 10*r)\n\n    fig, ax = plt.subplots(r, c, figsize=fig_size)\n    plt.suptitle(f'{r*c} largest {target_str} values', fontsize=25)\n    \n    max_value = np.max(target[target_str])\n    min_value = np.min(target[target_str])\n    \n    for i in range(r * c):\n        nt_id = target.loc[i].id\n        nt_id_num = int(nt_id.split(\"_\")[2])\n        nt_id = nt_id[:12]\n        df = train[train['id'] == nt_id]\n        structure = df['structure'].values[0]\n        sequence = df['sequence'].values[0]\n        bg = fgb.BulgeGraph.from_fasta_text(f'>rna1\\n{structure}\\n{sequence}')[0]\n        my_plot_rna(bg, nt_id_num, df, max_value, min_value, nt=nt,\n                    target=target_str, ax=ax[i\/\/c, i%c])\n","459a3dac":"def plot_low_target(n, target, target_str, nt=False, fig_size=None):\n    r = (n \/\/ 5) if (n \/\/ 5 > 0) else 1\n    c = 5\n    \n    if fig_size is None:\n        fig_size = (40, 10*r)\n\n    fig, ax = plt.subplots(r, c, figsize=fig_size)\n    plt.suptitle(f'{r*c} smallest {target_str} values', fontsize=25)\n\n    max_value = np.max(target[target_str])\n    min_value = np.min(target[target_str])\n    \n    for i in range(r * c):\n        nt_id = target.loc[len(target) - 1 - i].id\n        nt_id_num = int(nt_id.split(\"_\")[2])\n        nt_id = nt_id[:12]\n        df = train[train['id'] == nt_id]\n        structure = df['structure'].values[0]\n        sequence = df['sequence'].values[0]\n        bg = fgb.BulgeGraph.from_fasta_text(f'>rna1\\n{structure}\\n{sequence}')[0]\n        my_plot_rna(bg, nt_id_num, df, max_value, min_value, nt=nt,\n                    target=target_str, ax=ax[i\/\/c, i%c])","4a4854c1":"def plot_zero_target(n, target, target_str, nt=False, fig_size=None):\n    target[target_str] = target[target_str].apply(abs)\n    target = target.sort_values(by=[target_str], ascending=False)\n    target = target.reset_index(drop=True)\n    \n    r = (n \/\/ 5) if (n \/\/ 5 > 0) else 1\n    c = 5\n\n    if fig_size is None:\n        fig_size = (40, 10*r)\n                 \n    fig, ax = plt.subplots(r, c, figsize=fig_size)\n    plt.suptitle(f'{r*c} {target_str} values closest to zero', fontsize=25)\n\n    max_value = np.max(target[target_str])\n    min_value = np.min(target[target_str])\n    \n    for i in range(r * c):\n        nt_id = target.loc[len(target) - 1 - i].id\n        nt_id_num = int(nt_id.split(\"_\")[2])\n        nt_id = nt_id[:12]\n        df = train[train['id'] == nt_id]\n        structure = df['structure'].values[0]\n        sequence = df['sequence'].values[0]\n        bg = fgb.BulgeGraph.from_fasta_text(f'>rna1\\n{structure}\\n{sequence}')[0]\n        my_plot_rna(bg, nt_id_num, df, max_value, min_value, nt=nt,\n                    target=target_str, ax=ax[i\/\/c, i%c])","67037d0e":"target_str = \"reactivity\"\ntarget = make_target(target_str)\nplot_distribution(target, target_str)","d23c9c6f":"plot_high_target(15, target, target_str, nt=False)","76f26cb7":"plot_low_target(15, target, target_str, nt=False)","88b3bc79":"plot_zero_target(15, target, target_str, nt=False)","cf62ff5c":"target_str = \"deg_Mg_pH10\"\ntarget = make_target(target_str)\nplot_distribution(target, target_str)","02e7606b":"plot_high_target(15, target, target_str, nt=False)","778e8527":"plot_low_target(15, target, target_str)","26de3852":"plot_zero_target(15, target, target_str, nt=False)","e093d7ec":"target_str = \"deg_Mg_50C\"\ntarget = make_target(target_str)\nplot_distribution(target, target_str)","50901aeb":"plot_high_target(15, target, target_str, nt=False)","1454811b":"plot_low_target(15, target, target_str, nt=False)","3f80abcc":"plot_zero_target(15, target, target_str, nt=False)","18cec1e5":"# deg_Mg_50C\n### deg_Mg_50C Distribution","3a35d3a6":"### Visualization of RNA w\/ various deg_Mg_pH10 values","041802dd":"### Visualization of RNA w\/ various deg_Mg_50C values","c719ba34":"# deg_Mg_pH10\n### deg_Mg_pH10 Distribution","2674021a":"### Visualization of RNA w\/ various reactivity values","be2f3c10":"### Use filtered data","7b3dc5a5":"# Reactivity\n### Reactivity Distribution"}}