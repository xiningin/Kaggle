{"cell_type":{"bc6b3a17":"code","1782ca36":"code","53c6cdd0":"code","ae88ecc8":"code","6a297826":"code","ed6012c8":"code","4fa480ef":"code","0195f850":"code","6eabf254":"code","86f397c7":"code","64d3e4d6":"code","2ed8bada":"code","e38d54e3":"code","2612ad19":"code","b28bc6b2":"code","2fca1bc2":"code","c35e4872":"code","6b1e3867":"code","b815a237":"code","20d846b0":"code","1aa2f226":"markdown","40e8c651":"markdown","57b3e505":"markdown","5bc3c673":"markdown","125ff636":"markdown","5540b099":"markdown","0a2613cf":"markdown","478f8ddb":"markdown","51608fac":"markdown","ceef45af":"markdown","69816644":"markdown","d3d8d2bc":"markdown","270da66c":"markdown","0f40bb9a":"markdown","56b14979":"markdown","31ea673b":"markdown","343897dd":"markdown","2167c244":"markdown","3d2a98e6":"markdown","34caa0cd":"markdown","a4612883":"markdown"},"source":{"bc6b3a17":"import pandas as pd\nimport numpy as np\nimport seaborn as sns\nimport matplotlib.pyplot as plt","1782ca36":"df = pd.read_csv(\"..\/input\/30-days-of-ml\/train.csv\")\ndf_test = pd.read_csv(\"..\/input\/30-days-of-ml\/test.csv\")","53c6cdd0":"sns.boxplot(x='target', data=df)\n_ = plt.title('Box plot of target column', fontsize=14)","ae88ecc8":"percent_25 = df['target'].describe()[\"25%\"]\npercent_75 = df['target'].describe()[\"75%\"]\niqr = percent_75 - percent_25\nlbound = percent_25 - (1.5 * iqr)\nubound = percent_75 + (1.5 * iqr)\n\ndf[\"outliers\"] = df[\"target\"].apply(lambda x: \"yes\" if (x < lbound or x > ubound) else \"no\")\noutliers = df[df[\"outliers\"]==\"yes\"][\"target\"].values","6a297826":"sns.scatterplot(x=range(len(outliers)), y=outliers,color=\"olive\")","ed6012c8":"new_df = df[df[\"outliers\"] == \"no\"].reset_index(drop=True)\nnew_df.drop(\"outliers\", axis=1, inplace=True)","4fa480ef":"sns.boxplot(x='target', data=new_df)\n_ = plt.title('Box plot of target column after removing outliers', fontsize=14)","0195f850":"new_df[\"psuedo_target\"] = pd.cut(new_df['target'], bins=3)\nprint (\"Created bins: \")\nprint(new_df[\"psuedo_target\"].value_counts())","6eabf254":"sns.histplot(new_df['target'], kde=True, bins=3)","86f397c7":"cat_features = [feat for feat in new_df.columns if\n                new_df[feat].nunique() <= 15 and #arbitrarily chosen\n                new_df[feat].dtype == \"object\"]\n\nnum_features = [feat for feat in new_df.columns if\n                new_df[feat].dtype in [\"int64\", \"float64\"] and \n                feat not in ['target','psuedo_target']]\n\nuseful_features = cat_features + num_features","64d3e4d6":"fig, ax = plt.subplots(5,2, figsize=(18,10))\n\nfor indx,feature in enumerate(cat_features):\n    row = indx \/\/ 2\n    col = indx % 2\n    sns.countplot(ax=ax[row, col],x=feature, hue='psuedo_target', data=new_df)","2ed8bada":"fig, ax = plt.subplots(5,3, figsize=(18,10))\n\nfor indx,feature in enumerate(num_features):\n    row = indx \/\/ 3\n    col = indx % 3\n    sns.kdeplot(ax=ax[row, col],x=feature, hue='psuedo_target', data=new_df)","e38d54e3":"from sklearn import preprocessing\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import mean_squared_error\nfrom xgboost import XGBRegressor","2612ad19":"df = pd.read_csv('..\/input\/30days-folds\/train_folds.csv')\ndf_test = pd.read_csv('..\/input\/30-days-of-ml\/test.csv')\nsample_submission = pd.read_csv('..\/input\/30-days-of-ml\/sample_submission.csv')","b28bc6b2":"useful_features = [c for c in df.columns if c not in (\"id\", \"target\", \"kfold\")]\nobject_cols = [col for col in useful_features if col.startswith(\"cat\")]\ndf_test = df_test[useful_features]","2fca1bc2":"xgb_params = {\n    'random_state': 1, \n    'n_jobs': 4,\n    'booster': 'gbtree',\n    'n_estimators': 1000,\n    'learning_rate': 0.034682894846408095,\n    'reg_lambda': 1.224383455634919,\n    'reg_alpha': 36.043214512614476,\n    'subsample': 0.9219010649982458,\n    'colsample_bytree': 0.11247495917687526,\n    'max_depth': 3,\n    'min_child_weight': 6,\n    'tree_method':'gpu_hist',\n}","c35e4872":"final_predictions = []\nscores = []\nfor fold in range(5):\n    xtrain = df[df.kfold != fold].reset_index(drop=True)\n    xvalid = df[df.kfold == fold].reset_index(drop=True)\n    xtest = df_test.copy()\n    \n    ytrain = xtrain.target\n    yvalid = xvalid.target\n    \n    xtrain = xtrain[useful_features]\n    xvalid = xvalid[useful_features]\n    \n    ordinal_encoder = preprocessing.OrdinalEncoder()\n    xtrain[object_cols] = ordinal_encoder.fit_transform(xtrain[object_cols])\n    xvalid[object_cols] = ordinal_encoder.transform(xvalid[object_cols])\n    xtest[object_cols] = ordinal_encoder.transform(xtest[object_cols])\n    \n    model= XGBRegressor(**xgb_params)\n    model.fit(\n        xtrain, ytrain,\n        early_stopping_rounds=300,\n        eval_set=[(xvalid, yvalid)], \n        verbose=1000\n    )\n    preds_valid = model.predict(xvalid)\n    test_preds = model.predict(xtest)\n    final_predictions.append(test_preds)\n    rmse = mean_squared_error(yvalid, preds_valid, squared=False)\n    scores.append(rmse)\n    print(fold, rmse)\n\nprint(np.mean(scores), np.std(scores))","6b1e3867":"importance = model.feature_importances_\nimportance","b815a237":"# get importance\nimportance = model.feature_importances_\n# summarize feature importance\nfor feature,imp in zip(xtrain.columns, importance):\n    print(f'feature:{feature}, Importance score: {imp:.5f}')","20d846b0":"# plot feature importance\nsns.barplot(xtrain.columns, importance)\n_ = plt.xticks(rotation=90)\n_ = plt.title(\"Feature Importance Chart\")","1aa2f226":"On visualization, we observe that these bins give us good enough spread.","40e8c651":"### Out with the outliers.","57b3e505":"Looks like any target value less than 6 and greater\/around 10 are outliers. And out of 3L data, these constitute for around 3000 points. There are two easy ways to handle these outliers. \n1. One is to drop the columns pertaining to these rows.\n2. Other is to upper or lower bound them to a certain range. We can round them up to the inter-quartile ranges calculated earlier.  \n\nFor this notebook, I will go with Option-1. **However, it is always better to go with option-2**. Option-2 will ebsure that we will not end up losing out on important input features. This will particularly have a bearing in cases like churn prediction or fraud detection.","5bc3c673":"The *whiskers* of the plot looks too highlighted. Which means that there are outliers that we need to take care of.","125ff636":"This is quite an intriguing competition since there is no direct, visible patter that helps in predicting the targe variables. But then again, it is a wonderful opportunity to play around and underestand different modeling techniques like ensembling, stacking and blending. Excellently and patiently covered by one and only Abhishek Thakur in this playlist [here](https:\/\/www.youtube.com\/watch?v=_55G24aghPY&list=PL98nY_tJQXZnP-k3qCDd1hljVSciDV9_N).","5540b099":"Unfortunately, no patterns are emerging from the data. The distributions looks really similar between the different target scales. We can, I guess, try one experiment based on this observation - work with 30% of the sample data and check if there are variations in the overall result. ","0a2613cf":"Looks clean!","478f8ddb":"### Checking the target","51608fac":"This short kernel is just talks about two things \n- basic way of identifying and handling outlier\n- a very simple attempt at exploring the data. \n\nMy aim is to see how the distribution of output is behaving w.r.t the target variable. There are great kernels out there that gives detailed walkthroughs of modelling, but I just wanted to see if we can get the data talking.","ceef45af":"## **Conclusion**","69816644":"#### Checking the spread of categorical variable ","d3d8d2bc":"#### Getting the feature importance","270da66c":"From this small experiment, looks like there is no clear winner. Perhaps we can re-iterate the model by removing the features that contibute less than 0.02% to the overall result. Might give a bump to the score.","0f40bb9a":"#### Checking the spread of numerical variable ","56b14979":"## **Getting the feature importance from the model**","31ea673b":"## **Setup**","343897dd":"### Creating the bins  ","2167c244":"Training a quick model to check if it can yield any insights into important features.","3d2a98e6":"Decided to go from the reverse. First step, understanding the target.*Outlier removal*  in the target variable.\n\nThe easiest way to identify outliers is using the Inter Quantile Range. Any data points that lie 1.5 times of IQR above Q3 *(75th percentile)* and below Q1 *(25th percentile)* can be considered as outliers.","34caa0cd":"## **Exploring the data**\n\nConsidering I am doing it the reverse way *(target -> data)*,we will try to get some relation between how the features behave with respect to the target. To do this a little differently, I created \"psuedo-target\" by grouping the target into 3-bins.  \n\nThese bins are decided on the data range present in the target variable.","a4612883":"### Checking the spread "}}