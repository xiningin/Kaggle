{"cell_type":{"37b8f510":"code","783069b4":"code","eda78b82":"code","de64797d":"code","600f751e":"code","a7ae8c56":"code","5a6fce7f":"code","f9c05843":"code","0a8a14a5":"code","a3a8e596":"code","ffd0b50b":"markdown","138748c6":"markdown","7b81683b":"markdown"},"source":{"37b8f510":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","783069b4":"import cv2\nfrom matplotlib import pyplot as plt","eda78b82":"c = cv2.imread('\/kaggle\/input\/cutlery\/cutlery.jpg')\nc_ori = cv2.cvtColor(c, cv2.COLOR_BGR2RGB)\nplt.title('Original')\nplt.imshow(c_ori)\nplt.show()","de64797d":"cl = plt.imread('\/kaggle\/input\/cutlery\/cutlery.jpg')\ncl2 = plt.imread('\/kaggle\/input\/cutlery\/cutlery.jpg')\ncl = cl.sum(axis=-1)\n\ndef blur(cl):\n    for i in range(1, cl.shape[0]-1):\n        for j in range(1, cl.shape[1]-1):\n            cl[i,j] = (10*cl[i,j] + cl[i-1,j] + cl[i+1,j] + cl[i,j+1] + cl[i,j-1])\/3\n    return cl","600f751e":"%timeit blur(cl)","a7ae8c56":"plt.figure(figsize=(7,7))\nplt.imshow(cl2, cmap=\"gray\")\nplt.title('Original'), plt.xticks([]), plt.yticks([])\nblur(cl)\nplt.figure(figsize=(7,7))\nplt.imshow(cl, cmap=\"gray\")\nplt.title('Blurred'), plt.xticks([]), plt.yticks([])","5a6fce7f":"cultery = cv2.imread('\/kaggle\/input\/cutlery\/cutlery.jpg')\ncultery = cv2.cvtColor(cultery, cv2.COLOR_BGR2RGB)\nkernel_sharp = np.array([[-1, -1, -1],\n                         [-1,  9, -1],\n                         [-1, -1, -1]])\nsharp = cv2.filter2D(cultery, -1, kernel_sharp)\n\nplt.figure(figsize=(7,7))\nplt.imshow(cultery)\nplt.title('Original'), plt.xticks([]), plt.yticks([])\nplt.figure(figsize=(7,7))\nplt.imshow(sharp)\nplt.title('Sharp Mode'), plt.xticks([]), plt.yticks([])","f9c05843":"c = cv2.imread('\/kaggle\/input\/cutlery\/cutlery.jpg')\ncgray = cv2.cvtColor(c, cv2.COLOR_BGR2GRAY)\n\ncanny = cv2.Canny(cgray,100,200)\n\nsobelx = cv2.Sobel(cgray, cv2.CV_64F,1,0,ksize=5)\nsobely = cv2.Sobel(cgray, cv2.CV_64F,0,1,ksize=5)","0a8a14a5":"def f2d(src, kernel):\n    m,n = kernel.shape\n    d = int((m-1)\/2)\n    h,w = src.shape[0], src.shape[1]\n    \n    dst = np.zeros((h,w))\n    \n    for y in range(d, h-d):\n        for x in range(d, w-d):\n            dst[y][x] = np.sum(src[y-d:y+d+1, x-d:x+d+1]*kernel)\n        return dst\n    \ncugray = cv2.cvtColor(c, cv2.COLOR_BGR2GRAY)\nkernel = np.array([[1,  1, 1],\n                  [ 1, -8, 1],\n                  [ 1,  1, 1]])\n\ndst = f2d(cugray, kernel)\n\nplt.subplot(2,2,1), plt.imshow(canny, cmap='gray')\nplt.title('Canny'), plt.xticks([]), plt.yticks([])\nplt.subplot(2,2,2), plt.imshow(sobelx, cmap='gray')\nplt.title('Sobel X'), plt.xticks([]), plt.yticks([])\nplt.subplot(2,2,3), plt.imshow(sobely, cmap='gray')\nplt.title('Sobel Y'), plt.xticks([]), plt.yticks([])\nplt.subplot(2,2,4), plt.imshow(dst, cmap='gray')\nplt.title('Laplacian'), plt.xticks([]), plt.yticks([])\nplt.show()","a3a8e596":"plt.imshow(cugray,cmap = 'gray')\nplt.title('Original Gray'), plt.xticks([]), plt.yticks([])\n\nplt.show()","ffd0b50b":"-Blurring-","138748c6":"-Sharpened-","7b81683b":"-Edge Detection-\n1. Canny\n2. Sobel X & Y\n3. Laplacian Filter"}}