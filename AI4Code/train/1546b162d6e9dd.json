{"cell_type":{"eb98ff5c":"code","db9bf333":"code","39d27b2b":"code","cb4f04bb":"code","b86cbde9":"code","aaf19211":"code","b02b2df4":"code","48c8e0fd":"code","c6c671c4":"code","5410a79b":"code","b5fc1e59":"code","3f7d5d6b":"code","8e329bbb":"code","4714dd5a":"code","4bf751c4":"code","b4e14f2b":"code","f5ecedce":"code","1d8677c6":"code","879d8c92":"code","944131bd":"code","751c615f":"code","12675bc1":"code","4275e0ee":"code","da02ecf7":"code","d78f6009":"code","72b64a9e":"code","8d9ffeb0":"code","36905d89":"code","391ac49c":"code","917a6748":"code","79842709":"code","eed0b5c0":"code","d150be54":"code","55253e45":"code","fc8e6694":"code","0b54cc49":"code","f058799a":"code","9397f5e5":"code","5530097e":"code","3b7f79dd":"code","31110c26":"code","1f579b15":"code","7605aabf":"code","57390bd5":"code","990ab63e":"code","0de3e480":"code","f12bdc61":"code","f2021870":"code","9fb1ad87":"code","5a48bd57":"code","f671d6bd":"code","daefee37":"code","a0347b72":"code","5735c439":"code","d9712813":"code","f8223e1f":"code","e93bbcfb":"code","895683cb":"code","ffb1346e":"code","f2e7ad4e":"code","d5115f6c":"code","8bbc1007":"code","72194a52":"code","b5504789":"code","14691d14":"code","ddc76247":"code","0d8ca062":"code","c6d6d66d":"code","4bad7377":"code","fb9662f7":"code","9c3b9a49":"code","761b5c4f":"code","9b87d80e":"code","f495ebca":"code","1e778162":"code","16d506eb":"code","457b9978":"code","450bc744":"code","3fc670e3":"code","2836c1ac":"code","8da97026":"code","d48c1ad9":"code","14a42447":"code","f69fa65d":"code","cefed46f":"code","ebdfeccf":"code","f0e5aa21":"code","03ac463d":"code","834d493f":"code","fd99a68d":"code","9c3742c9":"code","9a7ad72b":"code","d1f915e1":"code","10cd6c91":"code","8f17c8e5":"code","71fc225b":"code","f9ab2259":"code","25cb1afb":"code","1ffe0177":"code","a00c2856":"code","eea58cbe":"code","3110ec7f":"code","0b54c18f":"code","05d4f367":"code","0d2f4ed6":"code","dd431d13":"code","42aa5314":"code","ce93fdfd":"code","af774861":"code","b0af207d":"code","acbaaf2d":"code","60c10160":"code","7bde5802":"code","86540d4c":"code","bb8dd59a":"code","d969dcc2":"code","56397178":"code","d73635b4":"code","94a7d487":"code","ad9c6e86":"code","fe3913a5":"code","47d63097":"code","9265b857":"code","8c58ab64":"code","9b93c157":"code","91f19d61":"code","c5c36d77":"code","789b8236":"code","46a934b3":"code","bc77a80c":"code","4797cc41":"code","1e0f775a":"code","c5cce342":"code","83685169":"code","b536e7bc":"code","20044876":"code","1d6a7f5e":"code","8a0b2415":"code","066d9c02":"code","053060af":"code","93776970":"code","ebb52972":"code","73bfdd69":"code","e7824ebd":"markdown","90055fff":"markdown","bee6e8df":"markdown","0f484c77":"markdown","c77bfd4c":"markdown","73f803e0":"markdown","65aead91":"markdown","be7a2c0b":"markdown","362e9e8b":"markdown","8ad255c6":"markdown","4d9ab0fe":"markdown","af167d9c":"markdown","949e3c43":"markdown","5659bf8c":"markdown","99fc514c":"markdown","6393a9b5":"markdown","9d1ff1a8":"markdown","8f3134a1":"markdown","a6e2605b":"markdown","0785b1b3":"markdown","8f27d3e3":"markdown","9e555028":"markdown","7ac6bda3":"markdown","7c9a835f":"markdown","b8a4433f":"markdown","375c3a05":"markdown","07eeacd2":"markdown","07d53920":"markdown","59e16320":"markdown","30039613":"markdown","5f236a42":"markdown","95fbdc4b":"markdown","66898241":"markdown","de48f0e3":"markdown","fa69e6a0":"markdown","98a69468":"markdown","1744e663":"markdown","b2482687":"markdown","c1fffe5c":"markdown","4bab3db5":"markdown","191be523":"markdown","45b0845c":"markdown","8bb2b485":"markdown","66fdc79e":"markdown","c0ef55b2":"markdown","8f92f7b3":"markdown","13de4a5b":"markdown","5f402fbc":"markdown","a4e56ad3":"markdown","25eeba44":"markdown","b27e07c7":"markdown","382d41b3":"markdown","61e4a574":"markdown","f1400745":"markdown","edaec8ad":"markdown","95cb5b3b":"markdown","ee14378f":"markdown","5b58495c":"markdown","60816daf":"markdown","68916145":"markdown","b6f2bb78":"markdown","6e4abca4":"markdown","26ddcd04":"markdown","99de6f82":"markdown","5d48381d":"markdown","e6da4060":"markdown","ad803432":"markdown","5118ffd9":"markdown","2fdbf978":"markdown","b2b8db52":"markdown","f07d9b82":"markdown","6154a9b6":"markdown","0e1c874f":"markdown","895645bb":"markdown","c839409f":"markdown","70795640":"markdown","4e9d1e31":"markdown","fe28e701":"markdown","ab121c20":"markdown","7cbd419f":"markdown","7577db10":"markdown","012bad02":"markdown","70081e3e":"markdown","ee1b7533":"markdown","f345923f":"markdown","ba055b31":"markdown","1149e495":"markdown","29c0b8f5":"markdown","37813fe5":"markdown","65325cd8":"markdown","5e5d3b88":"markdown","ec0bf21c":"markdown","26b925ee":"markdown","462343b4":"markdown","34a7c3ae":"markdown","33321c92":"markdown","d693eb8a":"markdown","b913afbd":"markdown","10cfe76a":"markdown"},"source":{"eb98ff5c":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport warnings\nwarnings.filterwarnings('ignore')","db9bf333":"train=pd.read_csv('..\/input\/big-mart-sales-prediction\/Train.csv')\ntest=pd.read_csv('..\/input\/big-mart-sales-prediction\/Test.csv')","39d27b2b":"train.head()","cb4f04bb":"test.head()","b86cbde9":"train.shape","aaf19211":"test.shape","b02b2df4":"#We will combine train and test data for better Analysis\ntrain['source']='train'\ntest['source']='test'\ntest['Item_Outlet_Sales']=0.0\n\n#Concatenating the data in df variable\ndf=pd.concat([train,test],sort=False,ignore_index=True)\ndf","48c8e0fd":"df.isnull().sum()","c6c671c4":"df.dtypes","5410a79b":"df.skew()","b5fc1e59":"df.nunique()","3f7d5d6b":"df.describe()","8e329bbb":"#Lets separate categorical features first\ncat=[feature for feature in df.columns if df[feature].nunique()<20 and feature!='source']\ncat","4714dd5a":"plt.figure(figsize=(15,5))\nplt.subplot(1,2,1)\ndf['Item_Fat_Content'].value_counts().plot.pie(autopct='%1.1f%%')\nplt.subplot(1,2,2)\nsns.countplot(df['Item_Fat_Content'])\ndf['Item_Fat_Content'].value_counts()","4bf751c4":"plt.figure(figsize=(10,10))\nplt.subplot(2,1,1)\ndf['Outlet_Identifier'].value_counts().plot.pie(autopct='%1.1f%%')\nplt.ylabel('')\nplt.subplot(2,1,2)\nsns.countplot(df['Outlet_Identifier'])\ndf['Outlet_Identifier'].value_counts()","b4e14f2b":"plt.figure(figsize=(10,15))\nplt.subplot(2,1,1)\ndf['Item_Type'].value_counts().plot.pie(autopct='%1.1f%%',textprops={'fontsize':10})\nplt.ylabel('')\nplt.subplot(2,1,2)\nsns.countplot(df['Item_Type'])\nplt.xticks(rotation = 90)\ndf['Item_Type'].value_counts()","f5ecedce":"plt.figure(figsize=(10,15))\nplt.subplot(2,1,1)\ndf['Outlet_Establishment_Year'].value_counts().plot.pie(autopct='%1.1f%%')\nplt.subplot(2,1,2)\nsns.countplot(df['Outlet_Establishment_Year'])\ndf['Outlet_Establishment_Year'].value_counts()","1d8677c6":"plt.figure(figsize=(15,5))\nplt.subplot(1,2,1)\ndf['Outlet_Size'].value_counts().plot.pie(autopct='%1.1f%%')\nplt.subplot(1,2,2)\nsns.countplot(df['Outlet_Size'])\ndf['Outlet_Size'].value_counts()","879d8c92":"plt.figure(figsize=(15,5))\nplt.subplot(1,2,1)\ndf['Outlet_Location_Type'].value_counts().plot.pie(autopct='%1.1f%%')\nplt.subplot(1,2,2)\nsns.countplot(df['Outlet_Location_Type'])\ndf['Outlet_Location_Type'].value_counts()","944131bd":"plt.figure(figsize=(15,5))\nplt.subplot(1,2,1)\ndf['Outlet_Type'].value_counts().plot.pie(autopct='%1.1f%%')\nplt.subplot(1,2,2)\nsns.countplot(df['Outlet_Type'])\nplt.xticks(rotation=45)\ndf['Outlet_Type'].value_counts()","751c615f":"#Separating the continuous feature\ncont=[feature for feature in df.columns if df[feature].nunique()>20 and feature!='Item_Identifier' and feature!='Item_Outlet_Sales']\ncont","12675bc1":"for feat in cont:\n    sns.boxplot(df[feat])\n    plt.figure()","4275e0ee":"for feat in cont:\n    sns.distplot(df[feat])\n    plt.figure()","da02ecf7":"sns.stripplot(df['Outlet_Location_Type'],df['Outlet_Type'])","d78f6009":"sns.stripplot(df['Outlet_Size'],df['Outlet_Type'])","72b64a9e":"sns.stripplot(df['Outlet_Size'],df['Outlet_Location_Type'])","8d9ffeb0":"sns.stripplot(df['Outlet_Establishment_Year'],df['Outlet_Type'])","36905d89":"sns.stripplot(df['Outlet_Establishment_Year'],df['Outlet_Location_Type'])","391ac49c":"sns.stripplot(df['Outlet_Establishment_Year'],df['Outlet_Size'])","917a6748":"plt.figure(figsize=(10,6))\nsns.stripplot(df['Outlet_Identifier'],df['Outlet_Type'])","79842709":"plt.figure(figsize=(10,6))\nsns.stripplot(df['Outlet_Identifier'],df['Outlet_Location_Type'])","eed0b5c0":"sns.stripplot(df['Outlet_Size'],df['Outlet_Identifier'])","d150be54":"plt.figure(figsize=(10,6))\nsns.stripplot(df['Outlet_Identifier'],df['Outlet_Establishment_Year'])","55253e45":"plt.figure(figsize=(10,6))\nsns.stripplot(df['Outlet_Identifier'],df['Item_Visibility'])","fc8e6694":"plt.figure(figsize=(10,6))\nsns.stripplot(df['Outlet_Type'],df['Item_Visibility'])","0b54cc49":"sns.stripplot(df['Outlet_Size'],df['Item_Visibility'])","f058799a":"fig,ax=plt.subplots(2,2,figsize=(18,10))\nr=0\nc=0\nfor i,n in enumerate(['Item_Fat_Content','Outlet_Establishment_Year','Outlet_Type','Item_Fat_Content']):\n    if i%2==0 and i>0:\n        r+=1\n        c=0\n    sns.boxenplot(x=df[n],y=df['Item_Weight'],ax=ax[r,c])\n    c+=1","9397f5e5":"for i in range(len(cont)):\n    for j in range(i+1,len(cont)):\n        sns.scatterplot(x=cont[i],y=cont[j],data=df)\n        plt.figure()","5530097e":"sns.countplot(df['Outlet_Location_Type'],hue=df['Outlet_Type'])","3b7f79dd":"sns.countplot(df['Outlet_Size'],hue=df['Outlet_Location_Type'])","31110c26":"sns.lmplot(x='Item_Weight',y='Item_Outlet_Sales',data=df)","1f579b15":"sns.lmplot(x='Item_Visibility',y='Item_Outlet_Sales',data=df)","7605aabf":"sns.lmplot(x='Item_MRP',y='Item_Outlet_Sales',data=df)","57390bd5":"for i in cat:\n    plt.figure(figsize=(15,6))\n    sns.boxplot(x=df[i],y=df['Item_Outlet_Sales'])\n    plt.xticks(rotation=45)\n    plt.figure()","990ab63e":"plt.figure(figsize=(10,8))\nsns.boxplot('Outlet_Location_Type','Item_Outlet_Sales',hue='Outlet_Type',data=df)","0de3e480":"plt.figure(figsize=(10,8))\nsns.boxplot('Outlet_Size','Item_Outlet_Sales',hue='Outlet_Type',data=df)","f12bdc61":"plt.figure(figsize=(10,8))\nsns.scatterplot('Item_Visibility','Item_MRP',hue='Item_Outlet_Sales',data=df,palette='rocket_r')","f2021870":"plt.figure(figsize=(15,10))\nsns.heatmap(df.corr(),annot=True)","9fb1ad87":"df['Item_Visibility'].value_counts()","5a48bd57":"#Replacing o visibility with nan values\ndf['Item_Visibility'].replace(0,np.nan,inplace=True)\ndf['Item_Visibility'].min()","f671d6bd":"#Checking visibility in Outlet size with Outlet type\nplt.figure(figsize=(15,6))\nsns.boxplot(data=df, x='Outlet_Size', y='Item_Visibility', hue='Outlet_Type')\nplt.xticks(rotation=45)","daefee37":"#Checking visibility in Outlet identifier with Outlet type\nplt.figure(figsize=(15,6))\nsns.boxplot(data=df, x='Outlet_Identifier', y='Item_Visibility', hue='Outlet_Type')\nplt.xticks(rotation=45)","a0347b72":"#Checking visibility in Item type with Outlet type\nplt.figure(figsize=(15,6))\nsns.boxplot(data=df, x='Item_Type', y='Item_Visibility', hue='Outlet_Type')\nplt.xticks(rotation=45)","5735c439":"#Creating pivot table to help fill nan values of visibility from here\ntable = df.pivot_table(values='Item_Visibility', index='Item_Type', columns='Outlet_Type', aggfunc='mean')\ntable","d9712813":"# replace the nan values\n# define function that returns the mean values\ndef find_mean(x):\n    return table.loc[x['Item_Type'], x['Outlet_Type']]\n\n# replace missing values in visibility with mean values from above pivot table\ndf['Item_Visibility'].fillna(df[df['Item_Visibility'].isnull()].apply(find_mean, axis=1), inplace=True)","f8223e1f":"#we try to fill the nan values of wieht by using values from item identifier\nwt_table = df.pivot_table(values='Item_Weight', index='Item_Identifier')\nwt_table","e93bbcfb":"def find_wt(x):\n    return wt_table.loc[x['Item_Identifier'],'Item_Weight']\n\ndf['Item_Weight'].fillna(df[df['Item_Weight'].isnull()].apply(find_wt, axis=1), inplace=True)","895683cb":"df['Outlet_Size'].replace(np.NaN,'Unknown',inplace=True)","ffb1346e":"from scipy.stats import mode","f2e7ad4e":"size_table = df.pivot_table(values='Outlet_Size', index='Outlet_Type', aggfunc=(lambda x:mode(x).mode[0]))\nsize_table","d5115f6c":"#Filling nan values with mode\ndf['Outlet_Size'].replace('Unknown','Small',inplace=True)","8bbc1007":"plt.figure(figsize=(8,6))\nsns.heatmap(df.isnull(),cmap='Greys')","72194a52":"df['Item_Identifier']=df['Item_Identifier'].apply(lambda x: x[:-2])","b5504789":"df['Item_Identifier'].unique()","14691d14":"df['Outlet_Establishment_Year']=(2021.0-df['Outlet_Establishment_Year'])\ndf.head()","ddc76247":"df['Item_Fat_Content'].unique()","0d8ca062":"df['Item_Fat_Content'].replace('reg','Regular',inplace=True)\ndf['Item_Fat_Content'].replace(['low fat','LF'],'Low Fat',inplace=True)\ndf['Item_Fat_Content'].unique()","c6d6d66d":"#Using Ordinal Encoder for encoding object type values\nfrom sklearn.preprocessing import OrdinalEncoder\ne=OrdinalEncoder()","4bad7377":"obj=[feature for feature in df.columns if df[feature].dtypes=='O' and feature!='source']\nobj","fb9662f7":"for i in obj:\n    df[i]=e.fit_transform(df[i].values.reshape(-1,1))","9c3b9a49":"df.dtypes","761b5c4f":"df=df[np.abs(df.Item_Visibility-df.Item_Visibility.mean())<=(3*df.Item_Visibility.std())]","9b87d80e":"df.shape","f495ebca":"sns.boxplot(df['Item_Visibility'])","1e778162":"df['Item_Visibility'].skew()","16d506eb":"df['Item_Visibility']=np.sqrt(df['Item_Visibility'])","457b9978":"df['Item_Visibility'].skew()","450bc744":"sns.distplot(df['Item_Visibility'])","3fc670e3":"from sklearn.preprocessing import MinMaxScaler\nm=MinMaxScaler()","2836c1ac":"df.iloc[:,:-2]=m.fit_transform(df.iloc[:,:-2])","8da97026":"train = df.loc[df['source']=='train']\ntest = df.loc[df['source']=='test']","d48c1ad9":"train.drop('source',axis=1,inplace=True)\ntest.drop(['source','Item_Outlet_Sales'],axis=1,inplace=True)","14a42447":"train=train.reset_index(drop=True)\ntest=test.reset_index(drop=True)","f69fa65d":"train","cefed46f":"test","ebdfeccf":"from sklearn.model_selection import train_test_split,cross_val_score","f0e5aa21":"#importing models\nfrom sklearn.neighbors import KNeighborsRegressor\nfrom sklearn.linear_model import LinearRegression,Lasso,Ridge,ElasticNet\nfrom sklearn.svm import SVR\nfrom sklearn.tree import DecisionTreeRegressor\nfrom sklearn.ensemble import RandomForestRegressor,AdaBoostRegressor,GradientBoostingRegressor\nfrom xgboost import XGBRegressor","03ac463d":"from sklearn.metrics import r2_score,mean_absolute_error,mean_squared_error","834d493f":"x=train.iloc[:,:-1]\ny=train.iloc[:,-1]","fd99a68d":"#Choosing the best random state using Logistic regression\ndef randomstate(a,b):\n    maxx=0\n    for state in range(1,201):\n        xtrain,xtest,ytrain,ytest=train_test_split(a,b,test_size=0.2,random_state=state)\n        model=LinearRegression()\n        model.fit(xtrain,ytrain)\n        p=model.predict(xtest)\n        r2=r2_score(p,ytest)\n        if maxx<r2:\n            maxx=r2\n            j=state\n    return j","9c3742c9":"#Creating list of models and another list mapped to their names\nmodels=[KNeighborsRegressor(),LinearRegression(),Lasso(),Ridge(),ElasticNet(),DecisionTreeRegressor(),\n       RandomForestRegressor(),AdaBoostRegressor(),GradientBoostingRegressor(),XGBRegressor()]\n\nnames=['KNeighborsRegressor','LinearRegression','Lasso','Ridge','ElasticNet','DecisionTreeRegressor',\n       'RandomForestRegressor','AdaBoostRegressor','GradientBoostingRegressor','XGBRegressor']","9a7ad72b":"def performance(p,ytest,s,n):\n    print(m)\n    print('Mean Absolute Error is',np.round(mean_absolute_error(p,ytest),4))\n    print('Mean Squared Error is',np.round(mean_squared_error(p,ytest),4))\n    print('Root Mean Squared Error is',np.round(np.sqrt(mean_squared_error(p,ytest)),4))\n    print('R2 Score is',np.round(r2_score(p,ytest),4)*100)\n    print('Mean of cross validaton Score is',np.round(np.mean(s),4))\n    print('--------------------------------------------------------------------------')","d1f915e1":"def createmodels(model_list,independent,dependent,n):\n    xtrain,xtest,ytrain,ytest=train_test_split(independent,dependent,test_size=0.2,random_state=randomstate(x,y))\n    name=[]\n    meanabs=[]\n    meansqd=[]\n    rootmeansqd=[]\n    r2=[]\n    mcv=[]\n    \n    #Creating models\n    for i,model in enumerate(model_list):\n        model.fit(xtrain,ytrain)\n        p=model.predict(xtest)\n        score=cross_val_score(model,independent,dependent,cv=10)\n        \n        #Calculating scores of the model and appending them to a list\n        name.append(n[i])\n        meanabs.append(np.round(mean_absolute_error(p,ytest),4))\n        meansqd.append(np.round(mean_squared_error(p,ytest),4))\n        rootmeansqd.append(np.round(np.sqrt(mean_squared_error(p,ytest)),4))\n        r2.append(np.round(r2_score(p,ytest),4)*100)\n        mcv.append(np.round(np.mean(score),4)*100)\n    \n    #Creating Dataframe\n    data=pd.DataFrame()\n    data['Model']=name\n    data['Mean Absolute Error']=meanabs\n    data['Mean Squared Error']=meansqd\n    data['Root Mean Squared Error']=rootmeansqd\n    data['R2 Score']=r2\n    data['Mean of Cross validaton Score']=mcv\n    data.set_index('Model',inplace = True)\n    return data\n        ","10cd6c91":"createmodels(models,x,y,names)","8f17c8e5":"from sklearn.feature_selection import SelectKBest\nfrom sklearn.feature_selection import f_classif","71fc225b":"selection = SelectKBest(score_func=f_classif)\nfit = selection.fit(x,y)","f9ab2259":"dfscores = pd.DataFrame(fit.scores_)\ndfcolumns = pd.DataFrame(x.columns)\nfeatureScores = pd.concat([dfcolumns,dfscores],axis=1)\nfeatureScores.columns = ['Features','Score']  #naming the dataframe columns\nfeatureScores","25cb1afb":"featureScores.sort_values(by=['Score'],ascending=False)","1ffe0177":"from sklearn.ensemble import ExtraTreesRegressor\nmodel = ExtraTreesRegressor()\nmodel.fit(x,y)","a00c2856":"#plot graph of feature importances for better visualization\nfeat_importances = pd.Series(model.feature_importances_, index=x.columns)\nfeat_importances.nlargest(11).plot(kind='barh')\nplt.show()","eea58cbe":"fi=list(feat_importances.nlargest(11).index)\nfi","3110ec7f":"from sklearn.model_selection import GridSearchCV","0b54c18f":"param_grid={'alpha':[1e-15,1e-10,1e-8,1e-5,1e-3,0.1,1,5,10,15,20,30,35,45,50,55,65,100,110,150,1000]}\nm1=GridSearchCV(Lasso(),param_grid,scoring='neg_mean_squared_error',cv=10)\nm1.fit(x,y)\nprint(m1.best_params_)","05d4f367":"m1=Lasso(alpha=1)\nm1.fit(x,y)\n","0d2f4ed6":"importance = np.abs(m1.coef_)","dd431d13":"dfcolumns = pd.DataFrame(x.columns)\ndfimp=pd.DataFrame(importance)\nfeatureScores = pd.concat([dfcolumns,dfimp],axis=1)\nfeatureScores.columns = ['Features','Coefficients']  #naming the dataframe columns\nfeatureScores","42aa5314":"featureScores.sort_values(by=['Coefficients'],ascending=False)","ce93fdfd":"x1=x.drop('Outlet_Location_Type',axis=1)\nx2=x.drop('Item_Type',axis=1)\nx3=x.drop(['Outlet_Location_Type','Item_Type'],axis=1)","af774861":"#Testing x1 dataset\ncreatemodels(models,x1,y,names)","b0af207d":"#Testing x2 dataset\ncreatemodels(models,x2,y,names)","acbaaf2d":"#Testing x3 dataset\ncreatemodels(models,x3,y,names)","60c10160":"from sklearn.model_selection import GridSearchCV","7bde5802":"xtrain,xtest,ytrain,ytest=train_test_split(x,y,test_size=0.2,random_state=randomstate(x2,y))","86540d4c":"params={'n_estimators':[100, 300, 500],\n        'min_samples_split':[1,2,3,4],\n        'min_samples_leaf':[1,2,3,4],\n            'max_depth':[None,1,2,3,4,5,6,7,8,9,10]}\n","bb8dd59a":"g=GridSearchCV(RandomForestRegressor(),params,cv=5)","d969dcc2":"g.fit(xtrain,ytrain)","56397178":"print(g.best_estimator_)\nprint(g.best_params_)\nprint(g.best_score_)","d73635b4":"m=RandomForestRegressor(max_depth=6, min_samples_leaf=4, min_samples_split=3)\nm.fit(xtrain,ytrain)\np=m.predict(xtest)","94a7d487":"score=cross_val_score(m,x,y,cv=10)","ad9c6e86":"print('Mean Absolute Error is',np.round(mean_absolute_error(p,ytest),4))\nprint('Mean Squared Error is',np.round(mean_squared_error(p,ytest),4))\nprint('Root Mean Squared Error is',np.round(np.sqrt(mean_squared_error(p,ytest)),4))\nprint('R2 Score is',np.round(r2_score(p,ytest),4)*100)\nprint('Mean of cross validaton Score is',np.round(np.mean(score)*100,4))","fe3913a5":"params={'n_estimators':[100,200,300,400,500],\n      'learning_rate':[0.05, 0.10],\n      'subsample':[0.5,1],\n      'max_depth':[1,2,3,4,5,6,7,8,9,10]}","47d63097":"from sklearn.model_selection import RandomizedSearchCV","9265b857":"g=RandomizedSearchCV(GradientBoostingRegressor(),params,cv=5)","8c58ab64":"g.fit(xtrain,ytrain)","9b93c157":"print(g.best_estimator_)\nprint(g.best_params_)\nprint(g.best_score_)","91f19d61":"m=GradientBoostingRegressor(learning_rate=0.05, subsample=1,max_depth= 2,n_estimators=200 )\nm.fit(xtrain,ytrain)\np=m.predict(xtest)","c5c36d77":"score=cross_val_score(m,x,y,cv=10)","789b8236":"print('Mean Absolute Error is',np.round(mean_absolute_error(p,ytest),4))\nprint('Mean Squared Error is',np.round(mean_squared_error(p,ytest),4))\nprint('Root Mean Squared Error is',np.round(np.sqrt(mean_squared_error(p,ytest)),4))\nprint('R2 Score is',np.round(r2_score(p,ytest),4)*100)\nprint('Mean of cross validaton Score is',np.round(np.mean(score)*100,4))","46a934b3":"params={\n \"learning_rate\"    : [0.001,0.05, 0.10, ] ,\n \"max_depth\"        : [ 4, 5, 6, 8, 10, 12, 15],\n \"min_child_weight\" : [ 1, 3, 5, 7 ],\n \"gamma\"            : [ 0.0, 0.1, 0.2 , 0.3, 0.4 ],\n \"colsample_bytree\" : [ 0.3, 0.4, 0.5 , 0.7 ]\n    \n}","bc77a80c":"g=RandomizedSearchCV(XGBRegressor(),params,cv=5)","4797cc41":"g.fit(xtrain,ytrain)","1e0f775a":"print(g.best_estimator_)\nprint(g.best_params_)\nprint(g.best_score_)","c5cce342":"m=XGBRegressor(colsample_bytree= 0.7, gamma= 0.1, learning_rate=0.05, max_depth=5, min_child_weight= 3)\nm.fit(xtrain,ytrain)\np=m.predict(xtest)","83685169":"score=cross_val_score(m,x,y,cv=10)","b536e7bc":"print('Mean Absolute Error is',np.round(mean_absolute_error(p,ytest),4))\nprint('Mean Squared Error is',np.round(mean_squared_error(p,ytest),4))\nprint('Root Mean Squared Error is',np.round(np.sqrt(mean_squared_error(p,ytest)),4))\nprint('R2 Score is',np.round(r2_score(p,ytest),4)*100)\nprint('Mean of cross validaton Score is',np.round(np.mean(score)*100,4))","20044876":"model=GradientBoostingRegressor(learning_rate=0.05, subsample=1,max_depth= 3,n_estimators=100 )\nmodel.fit(xtrain,ytrain)\np=model.predict(xtest)\nscore=cross_val_score(m,x,y,cv=10)","1d6a7f5e":"print('Mean Absolute Error is',np.round(mean_absolute_error(p,ytest),4))\nprint('Mean Squared Error is',np.round(mean_squared_error(p,ytest),4))\nprint('Root Mean Squared Error is',np.round(np.sqrt(mean_squared_error(p,ytest)),4))\nprint('R2 Score is',np.round(r2_score(p,ytest),4)*100)\nprint('Mean of cross validaton Score is',np.round(np.mean(score)*100,4))","8a0b2415":"plt.scatter(x=ytest,y=p,color='r')\nplt.plot(ytest,ytest,color='b')\nplt.xlabel('Actual Sales')\nplt.ylabel('Predicted Sales')\nplt.title('Gradient Boost Regressor')","066d9c02":"import joblib\njoblib.dump(model,'Mart_Sales.obj')","053060af":"predictions=model.predict(test)","93776970":"predictions","ebb52972":"predictions=pd.DataFrame(predictions)","73bfdd69":"predictions.to_csv('test_predictions.csv')","e7824ebd":"###### Item_Weight","90055fff":"# Feature Engineering","bee6e8df":"Supermarket type 2 was build much later while grocery stores and supermarket are the oldest outlet type.","0f484c77":"After Hyperparametertunning the best model with least error and highest r2 score and cross validation score is Gradient Boost","c77bfd4c":"Here visibility contains missing values","73f803e0":"Outliers and skewness both are removed from the visibility column","65aead91":"So we create 3 set of data set-:\nx1 - After removing Outlet_Location_Type\nx2 - After removing Item_Type\nx3 - After removing both Outlet_Location_Type and Item_Type","be7a2c0b":"Now we have only two categories in the fat content column","362e9e8b":"## Predicting the test dataset","8ad255c6":"Here thee are no missing values for missing visibility hence this can be used to fill nan values in visibility column","4d9ab0fe":"Fruits and Vegetables and Snack Foods are the two categories in which most of the items fall whereas Seafood is the least","af167d9c":"## Finalizing the best model","949e3c43":"No null values remain","5659bf8c":"Only Item Visibility has large no. of outliers","99fc514c":"Datset has 8 rows with object type data out of which we have created one and one is an identifier column. others we will have to encode them","6393a9b5":"Tier 3 has the most diff types of outlets, but they are almost balanced.","9d1ff1a8":"### Bivariate Analysis","8f3134a1":"###### Merging all the low fat categories to Low fat and regular categories to Regular","a6e2605b":"##### Using Lasso Coeficients","0785b1b3":"### Univariate Analysis","8f27d3e3":"All columns are converted into float type except for source.","9e555028":"test dataset has 5681 rows and 11 columns","7ac6bda3":"Item_Outlet_Sales increases with low item visibility and high item price.","7c9a835f":"## Evaluation Metrics","b8a4433f":"# Modelling Phase","375c3a05":"Outlet 27 and 19 are the oldest outlet identifier and outlet 18  is the newest, outlet no. does not hold any order towards year of establishment. ","07eeacd2":"Above are the best features with there score in decreasing order after going through anova test","07d53920":"Above fi list contains features in order with most important feature on the top and least important feature below.","59e16320":"From above analysis we see that previous models which were performimng well are the one performing well even this time and the dataset providing least Root errors and highest mean cross validation score is Dataset x2 which we get after removing Item_Type which we got using feature selection of Lasso, even though results do not vary much even after doing feature selection so we will keep the original dataset for training purposes without loosing any data.","30039613":"It can be seen that medium size outlets sell the most and also they have the most type of ooutlets hence the sales increases even more","5f236a42":"###### Item_Visibility","95fbdc4b":"There is only Outlet13 with high outlet size while medium and small of outlets each have 3 outlet identifiers. ","66898241":"##### Handling nan values ","de48f0e3":"Our new dataset has 14204 rows and 13 columns","fa69e6a0":"Feature sekection tells us that Item_Type is the least significant feature","98a69468":"Item weight column has about 2439 missing values and outlet size column has 4016 NaN values","1744e663":"train datset has 8523 rows and 12 columns","b2482687":"There are less products with high visibility. There seem to exist no correlation between the above continuous features","c1fffe5c":"In Tier1 and tier2 cities outlets were established in 1985 whereas tier2 got outlets after 2000","4bab3db5":"Item_Identifier, Item_Weight, Item_Visibility, Item_MRP, Item_Outlet_Sales are continuos type of data rest are categorical.","191be523":"Anova test and feature importances tell us that Outlet_Location_Type is the least significant feature.","45b0845c":"MRP, Outlet weight are the most important features and the list follows","8bb2b485":"###### Outlet_Size","66fdc79e":"##### Conclusion","c0ef55b2":"As seen earlier visibilty has 0 values which is not possible as a product will have some visibility in marts","8f92f7b3":"As the mrp of an item increases item outlet sales also increases","13de4a5b":"Above dataframe shows features with their coefficients values. Item Type has coefficient 0 signifying that it is least important feature according to Lasso","5f402fbc":"# EDA","a4e56ad3":"###### Correcting year column by subtracting it from 2021","25eeba44":"Outlet 10 and 19 have give the highest visibilty to products. Other outlets provide almost equal visibility.","b27e07c7":"Tier 3 cities have only Superkarket type 1 whereas Tier 1 cities have only supermarket 1 and grocery strores","382d41b3":"##### Engineering","61e4a574":"Grocery stores are usually smaller than super markets so we will replace NaN values by small","f1400745":"There are 10 outlets which are almost balanced except for two outlets","edaec8ad":"##### Using ANOVA test","95cb5b3b":"There is only one oulat identifier for supermarket 2 and 3 while most of the outlet identifiers belong to supermarket1","ee14378f":"There are still a lot of outliers in our output","5b58495c":"# Hyperparameter Tuning","60816daf":"There is not much relation between fat content and item outlet sales. Seafoord, Vegetables and fruits contribute towards the item outlet sales. Medium size outlets and Supermarket 3 gives the most item outlet sales. Tier 1 cities donot produce least` item outlet sales compared to other types of cities.","68916145":"There are null values present in item weight as count less than total rows, mean is less than median in item mrp and outlet establishment year, rest of the features have median greater than median. Variance is almost zero in item visibility column and very high in item mrp. There are some outliers present as difference between min, max and interquartile range is unequal. Minimum value of visibility is zero that can not be posiible so we will treat it as a null value","b6f2bb78":"Data of weight is missing for Supermarket 3 and for the year 1985, Median of low fat content is lowest.","6e4abca4":"Different low fat categories need to be merged. Same must be done with regular categories. Low Fat products are much more than Regular products.","26ddcd04":"Products are most visible in grocery stores rather than any other super markets","99de6f82":"From above analysis only Random Forest, Gradient Boost and xgboost perform well with r2 scor more than 51 and mean absolute error less than 810.Though the results are not as good therefore we further try to increase the scores by Feature Selection","5d48381d":"Tier 3 ;ocations have the most sales. It can also be seen that they have most type of outlets, hence more sales","e6da4060":"Most outlets were opened in 1985 and least in 1998","ad803432":"##### Random Forest","5118ffd9":"Supermarket type 1 are of all sizes whereas grocery stores are only small and Supermarket type 2, Supermarket type 3 are of medium size only.","2fdbf978":"Now the item identifier column looks more meaningful so we will keep it.","b2b8db52":"##### Conclusion","f07d9b82":"Tier 3 cities have the highest no. of medioum size outlet and tier 1 cities have highest no. small size outlets.Tier 3 cities have the least no. of stores","6154a9b6":"This also contain missing values ","0e1c874f":"![](https:\/\/1.bp.blogspot.com\/-EKYS2teelzM\/WgB-t2lzzqI\/AAAAAAAAAgY\/iWsXcbqbHsMy9dkQQFzepN4Z2jQXEf-AQCLcBGAs\/s1600\/z.jpg)","895645bb":"##### Scaling the data","c839409f":"65% of the outlets are of supermarket type 1","70795640":"Smallest Stores provide the most visibility to products","4e9d1e31":"##### Separating the data into train and test","fe28e701":"Most of the stores are located in tier 2 cities\/","ab121c20":"Importing neccessary modules","7cbd419f":"##### Removing skewness from visibility column","7577db10":"##### Xtreme Gradient Boost","012bad02":"##### GradientBoost","70081e3e":"There is no relation between item weight and item outlet sales.","ee1b7533":"MRP has the strongest positive correlation with Sales, while cisibility and establishment show a little negative correlation. There is not much correlation between the independent features.","f345923f":"There are few outlets with high size. most of the outlets are of medium size.","ba055b31":"##### Using feature importances of Extra trees regressor","1149e495":"Ttem outlet sales sharply decreases for the most visible items","29c0b8f5":"Only Item visibility is skewed to the right while others almost follow the gaussian distribution.","37813fe5":"# Feature selection","65325cd8":"###### Item_Identifier","5e5d3b88":"##### Removing outliers from Visibiltiy column","ec0bf21c":"### Multivariate Analysis","26b925ee":"Tier 2 cities have the highest no. of supermarket 2 and donot habe any other type of outlet whereas tier 3 cities have all the types of outlets with less no. of each of them.","462343b4":"## Saving the model","34a7c3ae":"#### Saving the predictions","33321c92":"After 1990 no outlet of high size was established.","d693eb8a":"Tier 2 citis have only small outlet size and high outlet size is only found in tier 3 cities","b913afbd":"##### Encoding object type features","10cfe76a":"There is skewness present in the item visibility which need to be handled"}}