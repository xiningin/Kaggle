{"cell_type":{"7a80743b":"code","b58b6097":"code","bd35133f":"code","7f5d55ab":"code","256fc594":"code","4de72a6a":"code","a62a245f":"code","1be3cb2b":"code","feba9a96":"code","d08e8c9f":"code","3c7eafdc":"code","ab690bdd":"code","3342a1f6":"code","beb2f622":"code","5c171443":"code","5b7b165e":"code","4bfff8bc":"code","b5a466aa":"code","10e58c9b":"code","6ec7177e":"code","5b922f9a":"code","4512d722":"code","4184a4f7":"code","e266738b":"code","aa748aa2":"code","68602b6e":"code","5c24fb66":"code","e74b7dad":"code","961255c0":"code","adeef0db":"code","a2285297":"markdown","6a412e6c":"markdown"},"source":{"7a80743b":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","b58b6097":"import pandas as pd\n\ndf= pd.read_csv('\/kaggle\/input\/house-prices-advanced-regression-techniques\/train.csv')\ndf.head()","bd35133f":"df.info()","7f5d55ab":"y = df.SalePrice\ny","256fc594":"#Dropping the columns with too many missing values\ndf1= df.drop(columns={'MiscFeature' , 'Fence' , 'PoolQC' , 'Alley' , 'SalePrice'} , axis=1)\ndf1.info()","4de72a6a":"#Filling the Null values with most frequent values\nimport numpy as np\nfrom sklearn.impute import SimpleImputer\n\ndef fit_missing_values(column):\n  imputer = SimpleImputer(missing_values=np.nan, strategy='most_frequent')\n  imputer = imputer.fit(df1[[column]])\n  df1[column] = imputer.transform(df1[[column]])","a62a245f":"col_missing_values=df1.columns[df1.isnull().any()].tolist()\n\nfor i in col_missing_values:\n   fit_missing_values(i)","1be3cb2b":"df1.isnull().sum().sum()","feba9a96":"#Scaling down the values of all numerical columns\nnum_cols = df1.columns[df1.dtypes.apply(lambda c: np.issubdtype(c, np.int64))]\nprint(len(num_cols))\n\nfloat_cols = df1.columns[df1.dtypes.apply(lambda c: np.issubdtype(c, np.float64))]\nprint(len(float_cols))","d08e8c9f":"from sklearn.preprocessing import MinMaxScaler\n\nstd_num = MinMaxScaler()\ndf1[num_cols] = std_num.fit_transform(df1[num_cols])\n\nstd_float = MinMaxScaler()\ndf1[float_cols] = std_float.fit_transform(df1[float_cols])","3c7eafdc":"df1.head()","ab690bdd":"#OneHotEncoding the Categorical Columns\ndf2 = pd.get_dummies(df1)\ndf2.info()","3342a1f6":"df2.columns","beb2f622":"df_test = pd.read_csv('\/kaggle\/input\/house-prices-advanced-regression-techniques\/test.csv')\ndf_test.head()","5c171443":"df_test.info()","5b7b165e":"#Creating the Submission Dataframe\nsub = pd.DataFrame(columns=['Id','SalePrice'])\n\nsub['Id'] = df_test['Id'].astype(int)","4bfff8bc":"df_test1= df_test.drop(columns={'MiscFeature' , 'Fence' , 'PoolQC' , 'Alley' } , axis=1)\ndf_test1.info()","b5a466aa":"\nimport numpy as np\nfrom sklearn.impute import SimpleImputer\n\ndef fit_missing_values_t(column):\n  imputer = SimpleImputer(missing_values=np.nan, strategy='most_frequent')\n  imputer = imputer.fit(df_test1[[column]])\n  df_test1[column] = imputer.transform(df_test1[[column]])","10e58c9b":"\ncol_missing_values_test = df_test1.columns[df_test1.isnull().any()].tolist()\nfor i in col_missing_values_test:\n   fit_missing_values_t(i)","6ec7177e":"df_test1.isnull().sum().sum()","5b922f9a":"num_col_test = df_test1.columns[df_test1.dtypes.apply(lambda c: np.issubdtype(c, np.int64))]\nprint(len(num_col_test))\n\nfloat_col_test = df_test1.columns[df_test1.dtypes.apply(lambda c: np.issubdtype(c, np.float64))]\nprint(len(float_col_test))","4512d722":"from sklearn.preprocessing import MinMaxScaler\n\nstd_num = MinMaxScaler()\ndf_test1[num_col_test] = std_num.fit_transform(df_test1[num_col_test])\n\nfloat_num = MinMaxScaler()\ndf_test1[float_col_test] = float_num.fit_transform(df_test1[float_col_test])\n\ndf_test1.info() ","4184a4f7":"df_test2 = pd.get_dummies(df_test1)\ndf_test2.info()","e266738b":"X_test = df_test2","aa748aa2":"not_common=list(set(df2.columns).difference(set(X_test.columns)))\nlen(not_common)","68602b6e":"X = df2.drop(columns=not_common , axis=1)\nlen(X.columns)","5c24fb66":"from sklearn.ensemble import RandomForestRegressor\n\n\nrfr = RandomForestRegressor(criterion = 'mse' , n_estimators = 100 , max_depth=12 , min_samples_split=3 , min_samples_leaf=3)\n\nmodel = rfr.fit(X, y)\nprint('train accuracy',rfr.score(X, y))","e74b7dad":"y_pred = model.predict(X_test)","961255c0":"sub['SalePrice'] = y_pred","adeef0db":"sub.to_csv('sub.csv', index=False) ","a2285297":"Manipulating Test Data\n","6a412e6c":"If you like my work don't forget to upvote!"}}