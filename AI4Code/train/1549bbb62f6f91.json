{"cell_type":{"85edbbc5":"code","1bf26d81":"code","e70c10c2":"code","1766202e":"code","b59e46c3":"code","d16d4153":"code","d4febca9":"code","280e0f45":"code","2ad266d6":"code","40379165":"code","74b10e3f":"code","21716418":"code","612eecc9":"code","1a906c4b":"code","481bf337":"code","fb63b1db":"code","7afdb768":"code","3456b2ef":"code","66bae43d":"code","88020f1b":"code","24c2fece":"code","c8116ec8":"code","cb4e67a6":"code","43aadaf7":"code","735ebb29":"code","968d1cd0":"code","543181e9":"code","e36299ed":"code","13b77da6":"code","deac1d27":"markdown"},"source":{"85edbbc5":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","1bf26d81":"import matplotlib.pyplot as plt\n\ndata = {\n'year': [2010, 2011, 2012,\n2010, 2011, 2012,\n2010, 2011, 2012],\n'team': ['FCBarcelona', 'FCBarcelona', 'FCBarcelona',\n'RMadrid', 'RMadrid', 'RMadrid',\n'ValenciaCF', 'ValenciaCF', 'ValenciaCF'],\n'wins': [30, 28, 32, 29, 32, 26, 21, 17, 19],\n'draws': [6, 7, 4, 5, 4, 7, 8, 10, 8],\n'losses': [2, 3, 2, 4, 2, 5, 9, 11, 11]\n}\n","e70c10c2":"football = pd.DataFrame(data, columns = ['year', 'team', 'wins', 'draws', 'losses'])","1766202e":"edu = pd.read_csv('\/kaggle\/input\/ict-exercise-ii\/files\/ch02\/educ_figdp_1_Data.csv',\n                  na_values=':', usecols=['TIME', 'GEO', 'Value'])","b59e46c3":"edu","d16d4153":"edu.describe()","d4febca9":"edu[10:14]","280e0f45":"edu.iloc[90:94][['TIME','GEO']]","2ad266d6":"edu[edu['Value'] > 6.5].tail()","40379165":"edu[edu[\"Value\"].isnull()].head()","74b10e3f":"edu.max(axis = 0)","21716418":"print ('Pandas max function:', edu['Value'].max())\nprint ('Python max function:', max(edu['Value']))","612eecc9":"edu = edu.append({\"TIME\": 2000, \"Value\": 5.00, \"GEO\": 'a'},\n                  ignore_index = True)","1a906c4b":"edu.tail()","481bf337":"edu.drop(max(edu.index), axis = 0, inplace = True)\nedu.tail()","fb63b1db":"eduDrop = edu[~edu[\"Value\"].isnull()].copy()\neduDrop.head()","7afdb768":"eduDrop = edu.dropna(how = 'any', subset = [\"Value\"])\neduDrop.head()","3456b2ef":"eduFilled = edu.fillna(value = {\"Value\": 0})\neduFilled.head()","66bae43d":"edu.sort_values(by = 'Value', ascending = False,\n                inplace = True)\nedu.head()","88020f1b":"edu.sort_index(axis = 0, ascending = True, inplace = True)\nedu.head()","24c2fece":"edu.sort_values(by = 'Value', ascending = True,\n                inplace = True)\nedu.head()","c8116ec8":"edu.sort_index(axis = 0, ascending = True, inplace = True)\nedu.head()","cb4e67a6":"group = edu[[\"GEO\", \"Value\"]].groupby('GEO').mean()\ngroup.head()","43aadaf7":"filtered_data = edu[edu[\"TIME\"] > 2005]\npivedu = pd.pivot_table(filtered_data, values = 'Value',\n                        index = ['GEO'], columns = ['TIME'])\npivedu.head()","735ebb29":"pivedu.loc[['Spain','Portugal'], [2006,2011]]","968d1cd0":"pivedu = pivedu.drop(['Euro area (13 countries)',\n                      'Euro area (15 countries)',\n                      'Euro area (17 countries)',\n                      'Euro area (18 countries)',\n                      'European Union (25 countries)',\n                      'European Union (27 countries)',\n                      'European Union (28 countries)'\n                      ], axis=0)\npivedu = pivedu.rename(\n    index={'Germany (until 1990 former territory of the FRG)': 'Germany'})\npivedu = pivedu.dropna()\npivedu.rank(ascending=False, method='first').head()","543181e9":"totalSum = pivedu.sum(axis = 1)\n\ntotalSum.rank(ascending = False, method = 'dense').sort_values().head()","e36299ed":"totalSum = pivedu.sum(axis = 1).sort_values(ascending = False)\ntotalSum.plot(kind = 'bar', style = 'b', alpha = 0.4,\n              title = \"Total Values for Country\")","13b77da6":"my_colors = ['b', 'r', 'g', 'y', 'm', 'c']\nax = pivedu.plot(kind='barh', stacked=True, color=my_colors, figsize=(12, 6))\nax.legend(loc='center left', bbox_to_anchor=(1, 0.5))\nplt.savefig('Value_Time_Country.png', dpi=300, bbox_inches='tight')","deac1d27":"Q1- Which is the size of the edu DataFrame (rows x columns)?\n384 rows x 3 colums "}}