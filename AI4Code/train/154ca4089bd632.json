{"cell_type":{"600adbe2":"code","4f5cde43":"code","55b02ba5":"code","938a43a5":"code","98f6ad10":"code","d4f83510":"code","1dd64526":"code","224be3c6":"code","4cd6772d":"code","f4861bf4":"code","8f044af8":"code","6f29f2b6":"code","4e9495ad":"code","0f8e626a":"code","68a0f35b":"code","e182240a":"code","1dca4c5f":"code","2ed45fe3":"code","b037b94c":"code","ecce828f":"code","af18b09a":"markdown","e6698f0f":"markdown","ddbcc96b":"markdown"},"source":{"600adbe2":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.model_selection import train_test_split\nfrom imblearn.under_sampling import (RandomUnderSampler)\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.model_selection import cross_val_score, KFold,cross_val_predict\nfrom sklearn.metrics import auc,roc_auc_score,roc_curve,recall_score\nfrom sklearn.model_selection import StratifiedKFold\nfrom sklearn import metrics\nfrom sklearn.model_selection import GridSearchCV","4f5cde43":"data = pd.read_csv(\"..\/input\/creditcard.csv\")\ndata.head()","55b02ba5":"data_fraud=data.loc[data[\"Class\"] ==1]\ndata_Nonfraud=data.loc[data[\"Class\"] ==0]\nprint(\"fraud dataset Shape: {} and non-fraud dataset Shape {}, ratio :{}\".format(data_fraud.shape, data_Nonfraud.shape,(data_fraud.shape[0]\/data.shape[0])*100))","938a43a5":"count_classes =pd.value_counts(data['Class'])\ncount_classes.plot(kind=\"bar\") # OR count_class.plot.bar()\nplt.title(\"Fraud class histogram\")\nplt.xlabel(\"Class\")\nplt.ylabel(\"Frequency\")\ndata[\"Class\"].value_counts()","98f6ad10":"data['normAmount'] = StandardScaler().fit_transform(data['Amount'].values.reshape(-1, 1))\ndata = data.drop(['Time','Amount'],axis=1)\ndata.head()","d4f83510":"X = data.drop('Class', axis=1)\ny = data['Class']","1dd64526":"X_train, X_test, y_train, y_test = train_test_split(X, y,\n                                                    stratify=y, \n                                                    test_size=0.20)","224be3c6":"sampler = RandomUnderSampler(sampling_strategy=1)\nX_train_balanced, y_train_balanced=sampler.fit_resample(X_train,y_train)","4cd6772d":"y_unRe_labels,y_unRe_counts_label = np.unique(y_train_balanced, return_counts=True)\ny_unRe_labels,y_unRe_counts_label","f4861bf4":"#CONVERTING DATAFRAMES TO ARRAYS FOR TRAINING A CLASSIFICATION MODEL\nX_train_balanced=X_train_balanced.values\nX_test=X_test.values\ny_test=y_test.values\ny_train_balanced=y_train_balanced.values\ny_train_balanced=y_train_balanced.ravel()\ny_test=y_test.ravel()","8f044af8":"lr=LogisticRegression()","6f29f2b6":"c_param_range = [0.01,0.1,1,10,100]\ndual=[True,False]\nparam_grid = dict(dual=dual, C=\n                 c_param_range)","4e9495ad":"grid = GridSearchCV(estimator=lr, param_grid=param_grid, n_jobs=-1,scoring=\"roc_auc\")","0f8e626a":"grid_result = grid.fit(X_train_balanced, y_train_balanced)\nprint(\"Best: %f using %s\" % (grid_result.best_score_, grid_result.best_params_))","68a0f35b":"lr_pred = cross_val_predict(lr.set_params(C=0.01), X_train_balanced, y_train_balanced, cv=5,\n                             method=\"decision_function\")","e182240a":"print('Logistic Regression Classifier: ', roc_auc_score(y_train_balanced, lr_pred))","1dca4c5f":"lr_fpr, lr_tpr, lr_threshold = roc_curve(y_train_balanced, lr_pred)","2ed45fe3":"def graph_roc_curve_multiple( lr_fpr, lr_tpr):\n    plt.figure(figsize=(16,8))\n    plt.title('ROC Curve \\n Top Classifier', fontsize=18)\n    plt.plot(lr_fpr, lr_tpr, label='Support Vector Classifier Score: {:.4f}'.format(roc_auc_score(y_train_balanced, lr_pred)))\n    plt.plot([0, 1], [0, 1], 'k--')\n    plt.axis([-0.01, 1, 0, 1])\n    plt.xlabel('False Positive Rate', fontsize=16)\n    plt.ylabel('True Positive Rate', fontsize=16)\n    plt.annotate('Minimum ROC Score of 50% \\n (This is the minimum score to get)', xy=(0.5, 0.5), xytext=(0.6, 0.3),\n                arrowprops=dict(facecolor='#6E726D', shrink=0.05),\n                )\n    plt.legend()\n    \ngraph_roc_curve_multiple(lr_fpr, lr_tpr)\nplt.show()","b037b94c":"final_Model=lr.set_params(C=0.01).fit(X_train_balanced,y_train_balanced)","ecce828f":"final_Model.score(X_test,y_test)","af18b09a":"****SCALING","e6698f0f":"# BALANCING DATA WITH UNDERSAMPLING","ddbcc96b":"****VERIFY IF THE DATA HAS BEEN BALANCED 50\/50 FOR BOTH CLASSES"}}