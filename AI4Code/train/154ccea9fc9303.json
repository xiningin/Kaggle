{"cell_type":{"95e55749":"code","f6bc0bcd":"code","b4b14b1e":"code","b1f23dc0":"code","e132524d":"code","7ffaa9a6":"code","0e22c3db":"code","d1a82ebb":"code","d977d327":"code","661491cf":"code","1d44f2ea":"code","19c06a94":"code","7509b02c":"code","a1d82341":"code","aa960e4c":"code","20166bfe":"code","64b31289":"code","e1b5ebd2":"code","a41240bc":"code","3c2db4b2":"code","110ca014":"code","d30820fc":"code","49bd3d41":"code","d51c0c47":"code","032da5f3":"code","2981f9b9":"code","4e4aa5b4":"code","73cb323b":"code","c7c1b708":"code","d7780dad":"code","18b351d8":"code","66cb72ab":"code","96fcc92a":"code","811eecad":"markdown","f292720a":"markdown","e9805672":"markdown","4d64d5ad":"markdown"},"source":{"95e55749":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","f6bc0bcd":"df = pd.read_csv('\/kaggle\/input\/fake-news\/train.csv')\ndf.head(4)","b4b14b1e":"df = df.dropna()","b1f23dc0":"X = df.drop('label', axis = 1)\ny = df['label']","e132524d":"X.shape","7ffaa9a6":"y.shape","0e22c3db":"\nimport tensorflow as tf\ntf.__version__\n","d1a82ebb":"from tensorflow.keras.layers import Embedding\nfrom tensorflow.keras.preprocessing.sequence import pad_sequences\nfrom tensorflow.keras.models import Sequential\nfrom tensorflow.keras.preprocessing.text import one_hot\nfrom tensorflow.keras.layers import LSTM\nfrom tensorflow.keras.layers import Dense","d977d327":"voc_size=5000","661491cf":"messages=X.copy()\nmessages['title'][1]\n","1d44f2ea":"messages.reset_index(inplace=True)\nmessages\n","19c06a94":"import nltk\nimport re\nfrom nltk.corpus import stopwords\nnltk.download('stopwords')\n","7509b02c":"### Dataset Preprocessing\nfrom nltk.stem.porter import PorterStemmer\nps = PorterStemmer()\ncorpus = []\nfor i in range(0, len(messages)):\n    print(i)\n    review = re.sub('[^a-zA-Z]', ' ', messages['title'][i])\n    review = review.lower()\n    review = review.split()\n    \n    review = [ps.stem(word) for word in review if not word in stopwords.words('english')]\n    review = ' '.join(review)\n    corpus.append(review)","a1d82341":"corpus","aa960e4c":"\n### Dataset Preprocessing\nfrom nltk.stem.porter import PorterStemmer\nps = PorterStemmer()\ncorpus = []\nfor i in range(0, len(messages)):\n    print(i)\n    review = re.sub('[^a-zA-Z]', ' ', messages['title'][i])\n    review = review.lower()\n    review = review.split()\n    \n    review = [ps.stem(word) for word in review if not word in stopwords.words('english')]\n    review = ' '.join(review)\n    corpus.append(review)","20166bfe":"onehot_repr=[one_hot(words,voc_size)for words in corpus] \nonehot_repr","64b31289":"sent_length=20\nembedded_docs=pad_sequences(onehot_repr,padding='pre',maxlen=sent_length)\nprint(embedded_docs)","e1b5ebd2":"embedded_docs[0]","a41240bc":"\n## Creating model\nembedding_vector_features=40\nmodel=Sequential()\nmodel.add(Embedding(voc_size,embedding_vector_features,input_length=sent_length))\nmodel.add(LSTM(100))\nmodel.add(Dense(1,activation='sigmoid'))\nmodel.compile(loss='binary_crossentropy',optimizer='adam',metrics=['accuracy'])\nprint(model.summary())","3c2db4b2":"len(embedded_docs),y.shape\n","110ca014":"import numpy as np\nX_final=np.array(embedded_docs)\ny_final=np.array(y)","d30820fc":"X_final","49bd3d41":"y_final","d51c0c47":"X_final.shape,y_final.shape\n","032da5f3":"from sklearn.model_selection import train_test_split\nX_train, X_test, y_train, y_test = train_test_split(X_final, y_final, test_size=0.33, random_state=42)","2981f9b9":"### Finally Training\nmodel.fit(X_train,y_train,validation_data=(X_test,y_test),epochs=10,batch_size=64)","4e4aa5b4":"\nfrom tensorflow.keras.layers import Dropout\n## Creating model\nembedding_vector_features=40\nmodel=Sequential()\nmodel.add(Embedding(voc_size,embedding_vector_features,input_length=sent_length))\nmodel.add(Dropout(0.3))\nmodel.add(LSTM(100))\nmodel.add(Dropout(0.5))\nmodel.add(Dense(32, activation='sigmoid'))\nmodel.add(Dense(16, activation='sigmoid'))\nmodel.add(Dense(1,activation='sigmoid'))\nmodel.compile(loss='binary_crossentropy',optimizer='adam',metrics=['accuracy'])","73cb323b":"model.fit(X_train,y_train,validation_data=(X_test,y_test),epochs=10,batch_size=64)","c7c1b708":"\nfrom tensorflow.keras.layers import Dropout\nfrom tensorflow.keras.layers import Bidirectional\n\n## Creating model\nembedding_vector_features=40\nmodel=Sequential()\nmodel.add(Embedding(voc_size,embedding_vector_features,input_length=sent_length))\nmodel.add(Dropout(0.3))\nmodel.add(Bidirectional(LSTM(100)))\nmodel.add(Dropout(0.5))\nmodel.add(Dense(32, activation='sigmoid'))\nmodel.add(Dense(16, activation='sigmoid'))\nmodel.add(Dense(1,activation='sigmoid'))\nmodel.compile(loss='binary_crossentropy',optimizer='adam',metrics=['accuracy'])","d7780dad":"model.fit(X_train,y_train,validation_data=(X_test,y_test),epochs=10,batch_size=64)","18b351d8":"y_pred=model.predict_classes(X_test)\n","66cb72ab":"from sklearn.metrics import confusion_matrix\nconfusion_matrix(y_test,y_pred)\n","96fcc92a":"from sklearn.metrics import accuracy_score\naccuracy_score(y_test,y_pred)","811eecad":"## Removing null values","f292720a":"### Vocabulary size","e9805672":"## Onehot Representation\u00b6\n","4d64d5ad":"Embedding Representation\u00b6\n"}}