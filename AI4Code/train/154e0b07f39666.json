{"cell_type":{"703a626c":"code","b68d8496":"code","c408598c":"code","8048255e":"code","da33e735":"code","f072afdd":"code","98c3be4b":"code","dde5dc0f":"code","a3f7786b":"code","802d9cb9":"code","f3faf4aa":"code","0245ef7e":"code","d18c828f":"code","1fb1dad1":"code","c80b280a":"code","f37bab8e":"code","5370b0e9":"code","b51ebcb6":"code","be1769c1":"code","034ba21a":"code","40e66687":"code","65333efb":"code","e6f1b226":"code","8a2dd15e":"code","8ed26db1":"code","6275fc41":"code","362eb2a8":"code","14a687dd":"code","daa57262":"code","3962d231":"code","43a4fd67":"code","d4ca4106":"code","0fefd7c2":"code","07194200":"code","17d28b61":"code","6ff33593":"code","106e1080":"code","b780b6ca":"code","4fe14c6b":"code","f735aa6a":"code","1827b029":"code","1efc7e24":"code","383ed16d":"code","fb798e81":"code","9ef0183a":"code","47c776ab":"code","c3f703e6":"code","43f22bbf":"code","2f96fdfd":"code","38ae6e3e":"code","81fc0890":"code","62ef083a":"code","03398823":"code","adda3032":"code","b155a9e5":"code","621501cf":"code","fbad4deb":"code","160af1c2":"code","53c47269":"code","a76d132a":"code","3887cd38":"code","88a259b4":"code","80ece62b":"markdown","686418fe":"markdown","1fbdf655":"markdown","17400e32":"markdown","20a9a5a6":"markdown","f207e897":"markdown","21940808":"markdown","cf6757cf":"markdown","15df47d4":"markdown","2d1757a8":"markdown"},"source":{"703a626c":"# Importing the required libraries\nimport pandas as pd, numpy as np\nimport matplotlib.pyplot as plt, seaborn as sns\n%matplotlib inline","b68d8496":"# Reading the csv file and putting it into 'df' object.\ndf = pd.read_csv(r\"\/kaggle\/input\/heart-disease-prediction\/heart_v2.csv\")","c408598c":"df.columns","8048255e":"df.head()","da33e735":"df.shape","f072afdd":"df.info()","98c3be4b":"plt.figure(figsize = (10,5))\nax= sns.violinplot(df['age'])\nplt.show()","dde5dc0f":"plt.figure(figsize = (15,5))\nax= sns.countplot(df['sex'])\nfor p in ax.patches:\n    ax.annotate(str(p.get_height()), (p.get_x() * 1.01 , p.get_height() * 1.01))\nplt.xticks(rotation = 45)\nplt.show()\n","a3f7786b":"plt.figure(figsize = (10,5))\nax= sns.violinplot(df['BP'])\nplt.show()","802d9cb9":"percentiles = df['BP'].quantile([0.05,0.95]).values\ndf['BP'][df['BP'] <= percentiles[0]] = percentiles[0]\ndf['BP'][df['BP'] >= percentiles[1]] = percentiles[1]","f3faf4aa":"plt.figure(figsize = (10,5))\nax= sns.violinplot(df['BP'])\nplt.show()","0245ef7e":"plt.figure(figsize = (10,5))\nax= sns.violinplot(df['cholestrol'])\nplt.show()","d18c828f":"percentiles = df['cholestrol'].quantile([0.05,0.95]).values\ndf['cholestrol'][df['cholestrol'] <= percentiles[0]] = percentiles[0]\ndf['cholestrol'][df['cholestrol'] >= percentiles[1]] = percentiles[1]","1fb1dad1":"plt.figure(figsize = (10,5))\nax= sns.violinplot(df['cholestrol'])\nplt.show()","c80b280a":"plt.figure(figsize = (15,5))\nax= sns.countplot(df['heart disease'])\nfor p in ax.patches:\n    ax.annotate(str(p.get_height()), (p.get_x() * 1.01 , p.get_height() * 1.01))\nplt.xticks(rotation = 45)\nplt.show()","f37bab8e":"plt.figure(figsize = (10,5))\nsns.violinplot(y = 'age', x = 'heart disease', data = df)\nplt.show()","5370b0e9":"plt.figure(figsize = (10,5))\nax= sns.countplot(x = \"sex\", hue = \"heart disease\", data = df)\nfor p in ax.patches:\n    ax.annotate(str(p.get_height()), (p.get_x() * 1.01 , p.get_height() * 1.01))\nplt.xticks(rotation = 90)\nplt.show()","b51ebcb6":"plt.figure(figsize = (10,5))\nsns.violinplot(y = 'BP', x = 'heart disease', data = df)\nplt.show()","be1769c1":"plt.figure(figsize = (10,5))\nsns.violinplot(y = 'cholestrol', x = 'heart disease', data = df)\nplt.show()","034ba21a":"plt.figure(figsize = (10,5))\nsns.heatmap(df.corr(), annot = True, cmap=\"rainbow\")\nplt.show()","40e66687":"df.describe()","65333efb":"# Putting feature variable to X\nX = df.drop('heart disease',axis=1)\n\n# Putting response variable to y\ny = df['heart disease']","e6f1b226":"from sklearn.model_selection import train_test_split","8a2dd15e":"X_train, X_test, y_train, y_test = train_test_split(X, y, train_size=0.6, random_state=50)\nX_train.shape, X_test.shape","8ed26db1":"from sklearn.tree import DecisionTreeClassifier","6275fc41":"dt = DecisionTreeClassifier(max_depth=3)\ndt.fit(X_train, y_train)","362eb2a8":"from sklearn import tree\nfig = plt.figure(figsize=(25,20))\n_ = tree.plot_tree(dt,\n                   feature_names=X.columns,\n                   class_names=['No Disease', \"Disease\"],\n                   filled=True)","14a687dd":"y_train_pred = dt.predict(X_train)\ny_test_pred = dt.predict(X_test)","daa57262":"from sklearn.metrics import confusion_matrix, accuracy_score","3962d231":"print(accuracy_score(y_train, y_train_pred))\nconfusion_matrix(y_train, y_train_pred)","43a4fd67":"print(accuracy_score(y_test, y_test_pred))\nconfusion_matrix(y_test, y_test_pred)","d4ca4106":"def get_dt_graph(dt_classifier):\n    fig = plt.figure(figsize=(25,20))\n    _ = tree.plot_tree(dt_classifier,\n                       feature_names=X.columns,\n                       class_names=['No Disease', \"Disease\"],\n                       filled=True)","0fefd7c2":"def evaluate_model(dt_classifier):\n    print(\"Train Accuracy :\", accuracy_score(y_train, dt_classifier.predict(X_train)))\n    print(\"Train Confusion Matrix:\")\n    print(confusion_matrix(y_train, dt_classifier.predict(X_train)))\n    print(\"-\"*50)\n    print(\"Test Accuracy :\", accuracy_score(y_test, dt_classifier.predict(X_test)))\n    print(\"Test Confusion Matrix:\")\n    print(confusion_matrix(y_test, dt_classifier.predict(X_test)))","07194200":"dt_default = DecisionTreeClassifier(random_state=42)\ndt_default.fit(X_train, y_train)","17d28b61":"gph = get_dt_graph(dt_default)\n","6ff33593":"evaluate_model(dt_default)","106e1080":"dt_depth = DecisionTreeClassifier(max_depth=3)\ndt_depth.fit(X_train, y_train)","b780b6ca":"gph = get_dt_graph(dt_depth) ","4fe14c6b":"evaluate_model(dt_depth)","f735aa6a":"dt_min_split = DecisionTreeClassifier(min_samples_split=20)\ndt_min_split.fit(X_train, y_train)","1827b029":"gph = get_dt_graph(dt_min_split) ","1efc7e24":"evaluate_model(dt_min_split)","383ed16d":"dt_min_leaf = DecisionTreeClassifier(min_samples_leaf=20, random_state=42)\ndt_min_leaf.fit(X_train, y_train)","fb798e81":"gph = get_dt_graph(dt_min_leaf)","9ef0183a":"evaluate_model(dt_min_leaf)","47c776ab":"dt_min_leaf_entropy = DecisionTreeClassifier(min_samples_leaf=20, random_state=42, criterion=\"entropy\")\ndt_min_leaf_entropy.fit(X_train, y_train)","c3f703e6":"gph = get_dt_graph(dt_min_leaf_entropy)","43f22bbf":"evaluate_model(dt_min_leaf_entropy)","2f96fdfd":"dt = DecisionTreeClassifier(random_state=42)","38ae6e3e":"from sklearn.model_selection import GridSearchCV","81fc0890":"# Create the parameter grid based on the results of random search \nparams = {\n    'max_depth': [2, 3, 5, 10, 20],\n    'min_samples_leaf': [5, 10, 20, 50, 100],\n    'criterion': [\"gini\", \"entropy\"]\n}","62ef083a":"# grid_search = GridSearchCV(estimator=dt, \n#                            param_grid=params, \n#                            cv=4, n_jobs=-1, verbose=1, scoring = \"f1\")","03398823":"# Instantiate the grid search model\ngrid_search = GridSearchCV(estimator=dt, \n                           param_grid=params, \n                           cv=4, n_jobs=-1, verbose=1, scoring = \"accuracy\")","adda3032":"%%time\ngrid_search.fit(X_train, y_train)","b155a9e5":"score_df = pd.DataFrame(grid_search.cv_results_)\nscore_df.head()","621501cf":"score_df.nlargest(5,\"mean_test_score\")","fbad4deb":"grid_search.best_estimator_","160af1c2":"dt_best = grid_search.best_estimator_","53c47269":"evaluate_model(dt_best)","a76d132a":"get_dt_graph(dt_best)","3887cd38":"from sklearn.metrics import classification_report","88a259b4":"print(classification_report(y_test, dt_best.predict(X_test)))","80ece62b":"### Hyper-parameter tuning","686418fe":"# EDA","1fbdf655":"### Specifying minimum samples before split","17400e32":"### Controlling the depth of the tree","20a9a5a6":"### Using Entropy instead of Gini","f207e897":"Fitting the decision tree with default hyperparameters, apart from max_depth which is 3 so that we can plot and read the tree.","21940808":"### Without setting any hyper-parameters","cf6757cf":"### Specifying minimum samples in leaf node","15df47d4":"#### Evaluating model performance","2d1757a8":"Creating helper functions to evaluate model performance and help plot the decision tree"}}