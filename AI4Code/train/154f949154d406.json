{"cell_type":{"130cb7ef":"code","a60a79cd":"code","57f7abf2":"code","130e005b":"code","da1f2167":"code","6454661f":"code","56d3152a":"code","4132730e":"code","7cccc5c7":"code","e4982f66":"code","2ed62271":"code","1b2d9c21":"code","3da8a50b":"code","88864c23":"code","6281e293":"code","771723db":"code","d053bee2":"code","18c16225":"code","b67437ba":"code","c6cb63d9":"code","b1f63da8":"code","35e964af":"code","855b36b8":"code","ec0a4d72":"code","21d12977":"code","e0a6fb3a":"code","684694de":"code","71a3db1d":"code","7a124e37":"code","0d0d559a":"code","415881f8":"code","3ee799fb":"code","93c29cb1":"code","034dd548":"code","75ca8966":"code","72e1ab5c":"code","d6ad5bf2":"code","ebbe9056":"code","a3538e0e":"code","94cb7047":"code","480b4f78":"code","57a7a3ba":"code","b592cc47":"code","da434a42":"code","b622c413":"code","57a02ba4":"markdown","56e90a90":"markdown","f2769fb0":"markdown","05ced5bc":"markdown","0c138231":"markdown","773a6248":"markdown","3c8f08fb":"markdown","9dd9ad53":"markdown","12d8b4f8":"markdown","1c1c9d6b":"markdown","411f57cc":"markdown","59fc8482":"markdown","14c8b0fb":"markdown","cb0500f1":"markdown","ac137c75":"markdown","43b91c10":"markdown","51f470c1":"markdown","bce88a93":"markdown","2ed48782":"markdown","806eb44e":"markdown","ccb4507d":"markdown","9089ac7c":"markdown"},"source":{"130cb7ef":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","a60a79cd":"import pandas as pd\nimport numpy as np\nfrom matplotlib import pyplot as plt\nimport matplotlib\n%matplotlib inline\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.linear_model import LinearRegression\nfrom sklearn.model_selection import GridSearchCV\n\nfrom sklearn.linear_model import Lasso\nfrom sklearn.tree import DecisionTreeRegressor\nfrom sklearn.model_selection import ShuffleSplit\nfrom sklearn.metrics import mean_squared_error as MSE\n","57f7abf2":"df_train = pd.read_csv('..\/input\/ipl-2020-player-performance\/Training.csv')\nmatch2020 = pd.read_csv('..\/input\/ipl-2020-player-performance\/Matches IPL 2020.csv')\nprev_match = pd.read_csv('..\/input\/ipl-2020-player-performance\/Matches IPL 2008-2019.csv')\nplayers1 =  pd.read_csv('..\/input\/ipl-2020-player-performance\/sample_submission.csv', encoding='windows-1254')\ndf_train","130e005b":"prev_match.groupby('season').count()['match_id'].plot(kind='bar', figsize=(12, 6), color='lightblue')\nplt.ylabel(\"Number of Match\", labelpad=10, fontsize=18)\nplt.xlabel(\"Season\", labelpad=10, fontsize=18)\nplt.title(\"Number of Match per Season\", fontsize=18);","da1f2167":"prev_match.groupby('venue').count()['match_id'].sort_values().plot(kind='barh', figsize=(12, 15), color='lightblue')\nplt.ylabel(\"Match by Stadium\", labelpad=10, fontsize=18)\nplt.xlabel(\"Count\", labelpad=10, fontsize=18)\nplt.title(\"Number of Match per Stadium\", fontsize=18);","6454661f":"prev_match.groupby('city').count()['match_id'].sort_values().plot(kind='barh', figsize=(12, 15), color='lightblue')\nplt.ylabel(\"Match by city\", labelpad=10, fontsize=18)\nplt.xlabel(\"Count\", labelpad=10, fontsize=18)\nplt.title(\"Number of Match per City\", fontsize=18);","56d3152a":"winner_stats=pd.DataFrame(prev_match['toss_winner'])\nwinner_stats['winner']=prev_match['winner']\nwinner_stats['stadium']=prev_match['venue']\nwinner_stats['toss winner is winner']= np.where(winner_stats['toss_winner']==winner_stats['winner'], 'Yes','No')\nwinner_stats","4132730e":"#winner_stats.groupby('stadium')['toss winner is winner'].agg('count')\nwinner_stats1=winner_stats.groupby('stadium')['toss winner is winner'].value_counts().unstack().fillna(0)\n#.sort_values().plot(kind='barh', figsize=(12, 15), color=('red','green'))\n\nwinner_stats1.plot(kind='barh', figsize=(12, 15), color=('red','green'));\nwinner_stats.groupby('stadium')['toss winner is winner'].count().plot(kind='barh', figsize=(12, 15),alpha = 0.65, lw=3, color=('lightblue'));","7cccc5c7":"## Creaate new dataframe with team name and sum the same team with different names.\n## Like Delhi Capitals=Delhi Daredevils\n## Rising Pune Supergiant = Pune Warriors\n## Deccan Chargers = Sunrisers Hyderabad\n\nTotal_matches=pd.concat([prev_match['team1'],prev_match['team2']])\nTotal_matches=Total_matches.value_counts().reset_index()\nTotal_matches.columns=['Team','Total Matches']\nTotal_matches['Team'] = Total_matches['Team'].replace(['Delhi Capitals'],'Delhi Daredevils')\nTotal_matches['Team'] = Total_matches['Team'].replace(['Deccan Chargers'],'Sunrisers Hyderabad')\nTotal_matches['Team'] = Total_matches['Team'].replace(['Rising Pune Supergiant'],'Pune Warriors')\nTotal_matches['Team'] = Total_matches['Team'].replace(['Rising Pune Supergiants'],'Pune Warriors')\nTotal_matches['Matches won']=prev_match['winner'].value_counts().reset_index()['winner']\naggregation_functions = {'Total Matches': 'sum', 'Matches won': 'sum'}\nTotal_matches1=Total_matches.groupby(Total_matches['Team']).aggregate(aggregation_functions)\nTotal_matches1=Total_matches1.sort_values(by='Total Matches', ascending=False)\nTotal_matches1","e4982f66":"fig = plt.subplots(figsize =(10, 7));\np1=plt.barh(Total_matches1.index,Total_matches1['Total Matches'],color='y'); \np2=plt.barh(Total_matches1.index,Total_matches1['Matches won'],color='g');\nplt.legend((p1[0], p2[0]), ('Total Matches', 'Matches won'));","2ed62271":"explode=(0, 0, 0, 0,0,0,0,0,0,0,0.2)\ncmap = plt.get_cmap(\"tab20c\")\nsize=0.6\n#colors = ['yellowgreen','red','gold','lightskyblue','white','lightcoral','blue','pink', 'darkgreen','yellow','grey','violet','magenta','cyan']\nplt.pie(Total_matches1['Total Matches'],explode=explode,colors=cmap(np.array([1, 2, 5, 6, 9, 10,12,13,15,17,20])), autopct='%1.1f%%',pctdistance=1.1,textprops={'fontsize': 10},radius=1.0, startangle=90,wedgeprops=dict(width=size, edgecolor='w'));\n#plt.pie(Total_matches1['Matches won'],colors=cmap(np.array([1, 2, 5, 6, 9, 10,12,13,15,17,20])), autopct='%1.1f%%',pctdistance=1.1,textprops={'fontsize': 10},radius=1.2-size, startangle=90,wedgeprops=dict(width=size, edgecolor='w'));\n\nplt.axis('equal');\n\nplt.legend(labels=Total_matches1.index,fontsize=8, loc=\"best\")\nplt.tight_layout()\nplt.show()","1b2d9c21":"umpire=pd.concat([prev_match['umpire1'],prev_match['umpire2'],prev_match['umpire3']])\numpire=umpire.value_counts()\numpire.plot(kind='barh', figsize=(12, 18),alpha = 1, color=('blue'));","3da8a50b":"prev_match1=prev_match.copy()\nplayer_of_match=prev_match1.groupby('player_of_match')['player_of_match'].agg('count').sort_values(ascending=False)\nplayer_of_match_less_than_10=player_of_match[player_of_match<=7]\nprev_match1['player_of_match']=prev_match1['player_of_match'].apply(lambda x: 'others' if x in player_of_match_less_than_10 else x)\nprev_match1.drop(index=prev_match1[prev_match1.player_of_match=='others'].index, inplace=True)\nprev_match1.groupby('player_of_match')['player_of_match'].agg('count').sort_values(ascending=False).plot(kind='barh', figsize=(12, 18), color=('lightblue'));","88864c23":"df_train[\"Match_ID\"]=df_train[\"Id\"].str.split(\"_\", n = 1, expand = True)[0]\ndf_train[\"Players\"]=df_train[\"Id\"].str.split(\"_\", n = 1, expand = True)[1]","6281e293":"df_train1=df_train.drop(columns=['Batting_Points','Bowling_Points','Id'])\ndf_train1","771723db":"#cols=df_train1.columns.tolist()\ncols=[ 'Match_ID',\n 'Players',\n 'Runs',\n 'Boundaries',\n 'Six',\n 'Fifty',\n 'Hundred',\n 'Duck',\n 'Wickets',\n '4W_Haul',\n '5W_Haul',\n 'Maidens',\n 'Total Points']","d053bee2":"df_train1=df_train1[cols]","18c16225":"batsman_stats=pd.DataFrame(df_train1.groupby('Players')['Runs'].sum())\nbatsman_stats['Boundaries']=df_train1.groupby('Players')['Boundaries'].sum()\nbatsman_stats['Six']=df_train1.groupby('Players')['Six'].sum()\nbatsman_stats['Fifty']=df_train1.groupby('Players')['Fifty'].sum()\nbatsman_stats['Hundred']=df_train1.groupby('Players')['Hundred'].sum()\nbatsman_stats['Duck']=df_train1.groupby('Players')['Duck'].sum()\nbatsman_stats.sort_values(by='Runs', ascending=False)","b67437ba":"#### Best Player By Maximum Runs","c6cb63d9":"best_batsman_stats=batsman_stats.sort_values(by='Runs', ascending=False).head(5)\nbest_batsman_stats","b1f63da8":"bawler_stats=pd.DataFrame(df_train1.groupby('Players')['Wickets'].sum())\nbawler_stats['Maidens']=df_train1.groupby('Players')['Maidens'].sum()\nbawler_stats.sort_values(by='Wickets', ascending=False)","35e964af":"highest_wickets=bawler_stats.sort_values(by='Wickets', ascending=False).head(5)\nhighest_wickets","855b36b8":"players=players1.copy()\nplayers","ec0a4d72":"players[\"Match_ID\"]=players[\"Id\"].str.split(\"_\", n = 1, expand = True)[0]\nplayers[\"Player_name\"]=players[\"Id\"].str.split(\"_\", n = 1, expand = True)[1]\ncols=['Match_ID','Player_name','Total Points']\nplayers = players[cols]\n\nPl_2020=players['Player_name']","21d12977":"pl_2020_remaining=[]\ndf_2020=pd.DataFrame()\nfor i in Pl_2020:\n    if df_train1['Players'].str.contains(i).any():\n        df_2020=df_2020.append(df_train1.loc[df_train1['Players'] == i])\n    else:\n        pl_2020_remaining.append(i)","e0a6fb3a":"## Remaining players those are which has no previous recoeds. Prediction of their performance is not possible.\nlen(pl_2020_remaining)","684694de":"pl_2020_final=players.copy()\nlen(pl_2020_final['Player_name'].unique())","71a3db1d":"## New Dataset with players performance which has similar name in both data.\ndf_2020","7a124e37":"df_2020=df_2020.drop(columns=[ 'Runs','Boundaries','Six','Fifty','Hundred','Duck','Wickets','4W_Haul','5W_Haul','Maidens'])\ndf_2020","0d0d559a":"df_2020= df_2020[['Players','Match_ID','Total Points']].reset_index(drop=True)\ndf_2020","415881f8":"len(df_2020['Players'].unique())","3ee799fb":"dummies=pd.get_dummies(df_2020.Players)\ndummies","93c29cb1":"df_2020_1=pd.concat([df_2020,dummies],axis='columns')\ndf_2020_2=df_2020_1.drop(['Players'],axis='columns')\ndf_2020_2","034dd548":"### Define x and y axis\n\nx=df_2020_2.drop('Total Points',axis='columns')\ny=df_2020_2['Total Points']","75ca8966":"x_train, x_test, y_train, y_test = train_test_split(x,y,test_size=0.2,random_state=10)","72e1ab5c":"lr_reg = LinearRegression()\nlr_reg.fit(x_train,y_train)\nlr_reg.score(x_test,y_test)","d6ad5bf2":"def find_best_model_using_gridsearchcv(x,y):\n    algos = {\n        'linear_regression' : {\n            'model': LinearRegression(),\n            'params': {\n                'normalize': [True, False]\n            }\n        },\n        'lasso': {\n            'model': Lasso(),\n            'params': {\n                'alpha': [1,2],\n                'selection': ['random', 'cyclic']\n            }\n        },\n        'decision_tree': {\n            'model': DecisionTreeRegressor(),\n            'params': {\n                'criterion' : ['mse','friedman_mse'],\n                'splitter': ['best','random']\n            }\n        }\n    }\n    scores = []\n    cv = ShuffleSplit(n_splits=5, test_size=0.2, random_state=0)\n    for algo_name, config in algos.items():\n        gs =  GridSearchCV(config['model'], config['params'], cv=cv, return_train_score=False)\n        gs.fit(x,y)\n        scores.append({\n            'model': algo_name,\n            'best_score': gs.best_score_,\n            'best_params': gs.best_params_\n        })\n\n    return pd.DataFrame(scores,columns=['model','best_score','best_params'])\n\nfind_best_model_using_gridsearchcv(x,y)","ebbe9056":"dt=DecisionTreeRegressor(\n    criterion=\"friedman_mse\",\n    splitter= 'random',\n    max_depth= 22,\n)\ndt.fit(x_train,y_train)\ndt.score(x_test,y_test)","a3538e0e":"y_pred=dt.predict(x_test)\npi_p=y_pred\npi_l=y_test\nmse_dt=MSE(pi_l,pi_p)\nRMSE=mse_dt**(1\/2)\nRMSE","94cb7047":"def predict_points(Players,Match_ID):    \n    try:\n        loc_index = np.where(x.columns==Players)[0][0]\n        X = np.zeros(len(x.columns))\n        X[0] = Match_ID\n        if loc_index >= 0:\n            X[loc_index] = 1\n        return dt.predict([X])[0]\n    except:\n        return 0","480b4f78":"pl_2020_final['Total Points']=np.nan\nfor i in pl_2020_final.index:\n    run=predict_points(pl_2020_final['Player_name'][i],pl_2020_final['Match_ID'][i]);\n    pl_2020_final['Total Points'][i]=run;\npl_2020_final","57a7a3ba":"pl_2020_final_pred=pl_2020_final.copy()\npl_2020_final_pred","b592cc47":"pl_2020_final_pred['Id']=pl_2020_final['Match_ID'].astype(str)+'_'+ pl_2020_final['Player_name']\npl_2020_final_pred=pl_2020_final_pred.drop(columns=['Player_name','Match_ID'])\npl_2020_final_pred","da434a42":"col=list(pl_2020_final_pred.columns)\ncol[0],col[1]=col[1],col[0]\ncol\npl_2020_final_pred=pl_2020_final_pred[col]\npl_2020_final_pred['Total Points']=pl_2020_final_pred['Total Points'].astype(int)\npl_2020_final_pred","b622c413":"pl_2020_final_pred.to_csv(\"submission.csv\",index=False) ","57a02ba4":"# Define various Charts to analyse data.\n## 1.) Number of Matches per Season","56e90a90":"# Now lets Predict the Performance of Player for 2020 season.","f2769fb0":"### Score is very low for linear regression so lets find best fitting model using grid search cv function.","05ced5bc":"#### Best Player By Maximum Runs","0c138231":"# 3.) Number of Matches in Each City","773a6248":"### First of all create match ID and Player name column individually using ID column.","3c8f08fb":"# Import Required Libraries","9dd9ad53":"## Let's predict the performance of shortlisted players using its performace till now.\n\n#### Remove excesive value column from the DataFrame.","12d8b4f8":"#### Create new DataFrame with Players combined performance till now.","1c1c9d6b":"## 7.) Maximum \"Player of the match\" Title holder Players.","411f57cc":"# 2.) Number of Matches in each Stadium","59fc8482":"#### Best Bawlers by Maximum Wickets.","14c8b0fb":"# 4.) Lets analyse the results as per the toss winner in each stadium.\n####   For that lets define one new column with toss winner is winner or not.\n####  Plot this data on new bar plot. ","cb0500f1":"#### Here for 2020 some of the new players are introduced which not has past performance data so we need to remove those from lists and also removed performance of players which not in the 2020 IPL. ","ac137c75":"## 6.) Find out Total Matches Hosted by each umpires.","43b91c10":"## Let's Create new Column for match id and Player Name Nndividually.  \n### Find out best Batsman and Bawler by various Parameters.","51f470c1":"### Lets evaluate performance of the model","bce88a93":"## Lets import csv files and ceate dataframes.","2ed48782":"## 5.) Calculate and Plot total matches and matches won by each team on bar chart and Pie chart.","806eb44e":"## There is lots of more perameters possible to calculate from the datasets like purple cap holder, orange cap holder for each season, best player for each season etc......","ccb4507d":"## Try with linear regression to predict the data.","9089ac7c":"### Let's Predict performace for 2020 IPL"}}