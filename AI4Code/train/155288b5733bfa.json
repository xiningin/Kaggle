{"cell_type":{"e7cb0787":"code","aebac0b0":"code","65baeea1":"code","468af082":"code","59ab3a03":"code","3736092c":"code","31c4a5b8":"code","c175875a":"code","58101866":"code","9bb5d6d1":"code","038b99f3":"code","757e33fb":"code","ffe3ea2d":"code","e4905d3e":"code","59ff1347":"code","8f133d3c":"code","3757fadd":"code","a1f8bc0e":"code","c88a5f48":"code","ddd1762d":"code","facfaf14":"code","9ca82a7f":"code","596a0566":"code","8a9b3668":"code","03751f07":"code","2baf436d":"code","142f5dbd":"markdown","e7a47021":"markdown","90947e30":"markdown","0cfa2718":"markdown","a983c5a5":"markdown","a9cbbcf5":"markdown","65600649":"markdown","7843ea78":"markdown","f127099c":"markdown"},"source":{"e7cb0787":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\nimport matplotlib.dates as dates\nimport matplotlib as mpl \nimport plotly.offline as py\nimport plotly.graph_objs as go\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory\n\nimport os\nprint(os.listdir(\"..\/input\"))\n\n# Any results you write to the current directory are saved as output.","aebac0b0":"rawdata = pd.read_csv('..\/input\/all_stocks_5yr.csv')\ndataA = rawdata.loc[rawdata['Name']  == 'T']\ndataA.head()","65baeea1":"dataA[dataA.open.isnull()]\ndataA.dropna(inplace=True)\ndataA[dataA.open.isnull()].sum()\ndata = dataA.set_index('date')\ndata.head()","468af082":"fig,ax1 = plt.subplots(figsize=(20, 10))\nplt.plot(data[['open','close','high','low']])\nplt.show()","59ab3a03":"\n\ntrace = go.Candlestick(\n                open=data['open'],\n                high=data['high'],\n                low=data['low'],\n                close=data['close'])\nd = [trace]\npy.iplot(d, filename='simple_candlestick')","3736092c":"data[\"target\"] = (data[\"close\"] - data[\"close\"].shift(-1))\/data[\"close\"]\ndata =data.dropna()\ndata = data.drop([\"Name\"],axis=1)\ndata.head()","31c4a5b8":"data.target.plot()","c175875a":"data_train = data[:-400]\ndata_test = data[-400:]\ntest_size = data_test.shape[0]\n\n\ndata_test.shape","58101866":"go_long_stratgie =  np.ones(test_size)\ngo_short_stratgie =  -1*np.ones(test_size)\ngo_hold_stratgie =  np.zeros(test_size)","9bb5d6d1":"target = data_test[\"target\"].values","038b99f3":"target.shape","757e33fb":"(go_long_stratgie*target).sum()","ffe3ea2d":"(go_short_stratgie*target).sum()","e4905d3e":"(go_hold_stratgie*target).sum()","59ff1347":"plt.plot(range(test_size),(go_long_stratgie*target).cumsum()) \nplt.show()\n","8f133d3c":"def evaluate_and_plot(stratgie,target , show_graph=True):\n    print(f\"the sum profit is {(stratgie*target).sum()}\")\n    if show_graph:\n        plt.plot(range(test_size),(stratgie*target).cumsum()) \n        plt.show()","3757fadd":"evaluate_and_plot(go_long_stratgie,target)","a1f8bc0e":"random_monkie01 = np.random.randint(3, size=test_size)-1\nrandom_monkie01[:10]","c88a5f48":"evaluate_and_plot(random_monkie01,target)","ddd1762d":"random_monkie1000 = np.random.randint(3, size=(1000,test_size))-1\n","facfaf14":"evaluate_and_plot(random_monkie1000[0],target)\nevaluate_and_plot(random_monkie1000[1],target)","9ca82a7f":"max_profit =-20\nprofits = np.zeros(1000)\nfor i in range(1000):\n    profits[i] = (random_monkie1000[i]*target).sum()","596a0566":"profits[:5]","8a9b3668":"profits.max()","03751f07":"evaluate_and_plot(random_monkie1000[profits.argmax()],target)","2baf436d":"data[\"bar_change\"] = (data[\"close\"] - data[\"open\"])\/data[\"open\"]\ndata[\"bar_full_size\"] = (data[\"close\"] - data[\"open\"])\/data[\"open\"]","142f5dbd":"## Creating buy and hold strategy\nnow lets create a trade stratgie for our test data\nwe will define a stratgie as a list of 1,0,-1 \n* 1 go long\n* 0 cash\n* -1 go short","e7a47021":"## Creating the RateOfChange metrics\nnow lets create a target coulem and plot it\n","90947e30":"**Data Cleaning Removing Null Values**","0cfa2718":"Basic line Graph to see the trend of the companies stock for past 5 years ","a983c5a5":"## Selecting the Stock T Data","a9cbbcf5":"## Evaluate the strategy and show accumulated return on a graph ","65600649":"lets take the last 400 bars as our test piriod","7843ea78":"# The 1000 Monkies traders\n### visit algozi.com for the full tutorial for this notebook \n### this work is still in progress, stay tuned\n### in this notebook we explore running 1000 random traders on a single stock\n\nin this notebook we will:\n* Loading and visualizing stock data\n* Creating the RateOfChange metrics\n* Creating buy and hold strategy\n* Evaluate the strategy and show accumulated return on a graph \n* Creating 1000 monkies traders \n* Would you BE fooled to invest in a monkey \n* Advanced metrics to evaluate the trader so we won't be fooled\n* Sampling by month\n* Calculating population mean and standard deviation(std)\n* Evaluating models using population sampling\n* Evaluating the best monkey  using population sampling\n* Creating a simple prediction model using Machine learning\n* Evaluating a basic ML model \n* Summary","f127099c":"More Monkieys "}}