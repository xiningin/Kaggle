{"cell_type":{"48eb4ff3":"code","cf3f832c":"code","389a8a8f":"code","965c2cdf":"code","985140c7":"code","59b17298":"code","b7c7bc90":"code","4bcf1f47":"code","38cdb0da":"code","52569627":"code","23acd144":"code","4bdc27f2":"code","4ccfb3fc":"code","e6b7df86":"code","20127284":"code","676e4cea":"code","2e5a77f6":"code","6697ade4":"code","8e5a9458":"code","9242a089":"code","1d58ff7e":"code","39083d24":"code","3236f420":"code","2c408b15":"code","dcdce699":"code","9d8c6b4f":"code","1614799a":"code","db241c23":"code","e270ac5b":"code","2ee68b04":"code","a4e9132c":"code","f325ddc0":"code","165365a3":"code","603cbeb9":"code","47270db2":"code","370bddc3":"code","4e706ece":"code","362ed3ce":"code","bf9caf4c":"code","c9d8b666":"markdown","8f2d69cd":"markdown","a29969b0":"markdown","771f3393":"markdown","5c1a31f7":"markdown","b5172928":"markdown"},"source":{"48eb4ff3":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\n%matplotlib inline","cf3f832c":"from sklearn.model_selection import train_test_split\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.preprocessing import OneHotEncoder\nfrom sklearn.preprocessing import LabelEncoder\nfrom sklearn.model_selection import GridSearchCV\nfrom sklearn.utils import compute_class_weight\nfrom sklearn.metrics import confusion_matrix\nfrom sklearn.metrics import mean_squared_error\nfrom sklearn.metrics import plot_confusion_matrix\nfrom sklearn.metrics import plot_precision_recall_curve\nfrom sklearn.metrics import precision_recall_curve\nfrom sklearn.metrics import plot_roc_curve\nfrom sklearn.metrics import precision_score\nfrom sklearn.metrics import recall_score\nfrom sklearn.metrics import accuracy_score\nfrom sklearn.metrics import f1_score","389a8a8f":"data = pd.read_csv(\"\/kaggle\/input\/abalone-dataset\/abalone.csv\", sep=\",\", header='infer' )","965c2cdf":"data","985140c7":"category = np.repeat(\"empty000\", data.shape[0])\ncategory.size","59b17298":"for i in range(0, data[\"Rings\"].size):\n    if(data[\"Rings\"][i] <= 7):\n        category[i] = \"G1\"\n    elif(data[\"Rings\"][i] > 7):\n        category[i] = \"G2\"\n","b7c7bc90":"category[10:25]","4bcf1f47":"data.Rings.value_counts()","38cdb0da":"label_encoder = LabelEncoder()\ninteger_encoded = label_encoder.fit_transform(data['Sex'])\nprint(integer_encoded[0:7])","52569627":"onehot_encoder = OneHotEncoder(sparse=False)\ninteger_encoded = integer_encoded.reshape(len(integer_encoded), 1)\nonehot_encoded = onehot_encoder.fit_transform(integer_encoded)\nonehot_encoded[0:7]\n#onehot_encoded.shape","23acd144":"data = data.drop(['Sex'], axis=1)\n#print((onehot_encoded))\n#size(np.array(onehot_encoded.tolist()))\n#data['Gender'] = np.array(onehot_encoded.tolist())\ndata['category_size'] = category\ndata = data.drop(['Rings'], axis=1)","4bdc27f2":"data.head()","4ccfb3fc":"features = data.iloc[:,np.r_[0:7]]\nlabels = data.iloc[:,7]","e6b7df86":"data.category_size.value_counts()","20127284":"features.head()\n#labels.head()","676e4cea":"data.describe()","2e5a77f6":"#import seaborn as sns\n#corr = data.corr()\n#fig, ax = plt.subplots(figsize = (10,10))\n#g= sns.heatmap(corr,ax=ax, annot= True)\n#ax.set_title('Correlation between variables')","6697ade4":"#import matplotlib.pyplot as plt\n#data.hist(bins=50, figsize=(20,15))\n#plt.show()","8e5a9458":"X_train, X_test, y_train, y_test, X_gender, X_gender_test = train_test_split(features, labels, onehot_encoded, random_state=10, test_size=0.2)","9242a089":"X_train.shape","1d58ff7e":"X_train","39083d24":"y_train[0:3]","3236f420":"X_test.shape","2c408b15":"X_test[1:3]","dcdce699":"temp = X_train.values\nX_train_gender = np.concatenate((temp, X_gender), axis=1)","9d8c6b4f":"temp = X_test.values\nX_test_gender = np.concatenate((temp, X_gender_test), axis=1)","1614799a":"X_gender","db241c23":"X_gender.shape","e270ac5b":"class_weights = compute_class_weight(class_weight='balanced', classes=np.unique(data['category_size']), y=data['category_size'])\nclass_weights_dict = dict(enumerate(class_weights))\nclass_weights_dict","2ee68b04":"old_keys = np.r_[0:27]\nnew_keys = np.unique(data['category_size'])\nweights_final = dict(zip(new_keys, list(class_weights_dict.values()))) \n#class_weights_dict[new_keys] = class_weights_dict.pop(old_keys)\n#class_weights_dict.keys()\nweights_final","a4e9132c":"X_train_gender[0:5]","f325ddc0":"rfc = RandomForestClassifier()\n\nparam_grid = [\n    {'n_estimators': [10, 20, 30, 50, 70, 80, 100, 120, 150, 180, 200, 220, 280, 320], \n     'max_features': ['auto','sqrt','log2'], \n      'oob_score':[True, False], 'bootstrap':[True, False], \n     'class_weight':[None, 'balanced'], 'criterion':['gini', 'entropy']}\n] # a list of dictionaries\n\ngrid_search = GridSearchCV(rfc, param_grid, cv=5, return_train_score=True, scoring='accuracy', n_jobs=-1)\ngrid_search.fit(X_train, y_train)","165365a3":"grid_search.best_params_","603cbeb9":"rf_classifier = RandomForestClassifier(bootstrap=True, class_weight=None, criterion='gini',\n                                       max_features='auto', n_estimators=30, oob_score=False,n_jobs=-1)\nrf_classifier.fit(X_train_gender, y_train)","47270db2":"rf_classifier_train = rf_classifier.predict(X_train_gender)\naccuracy_score(y_train, rf_classifier_train)","370bddc3":"rf_classifier_test = rf_classifier.predict(X_test_gender)\naccuracy_score(y_test, rf_classifier_test)","4e706ece":"plot_confusion_matrix(rf_classifier, X_train_gender, y_train)","362ed3ce":"plot_confusion_matrix(rf_classifier, X_test_gender, y_test)","bf9caf4c":"from sklearn.metrics import classification_report\nprint(classification_report(y_test, rf_classifier_test))","c9d8b666":"# Grid Search","8f2d69cd":"# compute class weight","a29969b0":"# Random Forest ","771f3393":"# Train-Test split","5c1a31f7":"# One-hot encoding of gender","b5172928":"# Abalone dataset"}}