{"cell_type":{"67745730":"code","fd918601":"code","370d1c29":"code","77d2200d":"code","b311e388":"code","81206e60":"code","1f1ce36f":"code","2a1fa56b":"code","5d637711":"code","ab1434b8":"code","6e9ebadb":"code","21137e7b":"code","518ae359":"code","a4690e1a":"code","9e6a2086":"code","7605e869":"code","577eac9c":"code","f51dab35":"code","17603f6e":"code","87e5fd10":"code","a4c9a5ff":"code","2743abae":"markdown"},"source":{"67745730":"from sklearn.model_selection import train_test_split\nfrom sklearn.preprocessing import StandardScaler\nimport numpy as np \nimport pandas as pd \nfrom sklearn.preprocessing import OneHotEncoder\nfrom sklearn.metrics import mean_squared_error,mean_absolute_error,explained_variance_score\nimport os\nfrom sklearn.decomposition import PCA\n","fd918601":"df = pd.read_csv('..\/input\/real-time-advertisers-auction\/Dataset.csv')","370d1c29":"df = df[(df.drop(['date'],axis=1)>=0).all(axis=1) ] # \u0444\u0438\u043b\u044c\u0442\u0440\u0443\u0435\u043c \u043e\u0442\u0440\u0438\u0446\u0430\u0442\u0435\u043b\u044c\u043d\u044b\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f ","77d2200d":"df.drop(['order_id' , 'line_item_type_id'], axis = 1, inplace=True)","b311e388":"def weird_division(n, d):\n    return n \/ d if d else 0\n\ndf['CPM'] = df.apply(lambda x: weird_division(((x['total_revenue']*100)),x['measurable_impressions'])*1000 , axis=1)","81206e60":"\ndf = df[df['CPM'].between(0, df['CPM'].quantile(.95))] # \u0443\u0431\u0438\u0440\u0430\u0435\u043c \u0432\u044b\u0431\u0440\u043e\u0441\u044b","1f1ce36f":"# \u0443\u0431\u0438\u0440\u0430\u0435\u043c \u0437\u0430\u043f\u0440\u0435\u0449\u0435\u043d\u043d\u044b\u0435 \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u044b\u0435\ndf.drop(['integration_type_id' , 'revenue_share_percent','total_revenue'], axis = 1, inplace=True) ","2a1fa56b":"\ndf['View\/measurable'] = df.apply(lambda x: weird_division(x['viewable_impressions'],x['measurable_impressions']) , axis=1)","5d637711":"df.drop([ 'total_impressions'], axis = 1, inplace=True)","ab1434b8":"df['date'] = pd.to_datetime(df['date'])","6e9ebadb":"df.head()","21137e7b":"# result=[]\n# for col in df.columns:\n#     if '_id' in col and col not in [] :\n        \n#         onehot = pd.get_dummies(df[col],prefix=col[:-3])\n#         result.append(onehot)\n#         df.drop([col],axis=1,inplace=True)\n# df =pd.concat([df]+result,axis=1)\n        \n        ","518ae359":"X_train = df[df['date']<pd.to_datetime('22.06.2019')]\nX_test= df[df['date']>=pd.to_datetime('22.06.2019')]\n\n\ny_train = X_train['CPM']\ny_test = X_test['CPM']\n","a4690e1a":"def mean_encode(X_train,X_test,columns):\n    for c in columns:\n        Mean_encoded_subject = X_train.groupby([c])['CPM'].mean().to_dict() \n        X_train[c] =  X_train[c].map(Mean_encoded_subject) \n        X_test[c] =  X_test[c].map(Mean_encoded_subject) \n        \n    return X_train,X_test","9e6a2086":"X_train,X_test = mean_encode(X_train,X_test,[c for c in X_train.columns if '_id' in c])","7605e869":"X_train.drop(['CPM','date'],axis=1,inplace=True)\nX_test.drop(['CPM','date'],axis=1,inplace=True)","577eac9c":"X_train.fillna(0,inplace=True)","f51dab35":"X_test.fillna(0,inplace=True)","17603f6e":"X_train","87e5fd10":"from sklearn.linear_model import LinearRegression\nfrom sklearn.ensemble import RandomForestRegressor\nlr = LinearRegression()\nrf=RandomForestRegressor(n_jobs=-1,n_estimators=300)\nrf.fit(X_train,y_train)","a4c9a5ff":"mean_squared_error(y_test,rf.predict(X_test))","2743abae":"# Modeling"}}