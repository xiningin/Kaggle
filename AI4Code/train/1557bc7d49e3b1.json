{"cell_type":{"b871fe3a":"code","d763b5d2":"code","2dee5906":"code","87f76e32":"code","e35a7303":"code","e5fe627c":"code","84f22ad5":"code","788b2a68":"code","7b61c13e":"code","52fc5185":"code","4dfa4252":"code","6354d826":"code","a115e6d3":"code","be06f326":"code","94aebfc1":"markdown","cf9d28ce":"markdown","e792225a":"markdown","4f10e0d1":"markdown","65ceeacc":"markdown","01c90511":"markdown","5b14c772":"markdown"},"source":{"b871fe3a":"import tensorflow as tf\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport csv\nimport matplotlib.image  as mpimg\nimport matplotlib.pyplot as plt","d763b5d2":"!wget --no-check-certificate \\\n    https:\/\/storage.googleapis.com\/laurencemoroney-blog.appspot.com\/Sunspots.csv \\\n    -O \/tmp\/sunspots.csv","2dee5906":"def plot_series(time, series, format=\"-\", start=0, end=None):\n    plt.plot(time[start:end], series[start:end], format)\n    plt.xlabel(\"Time\")\n    plt.ylabel(\"Value\")\n    plt.grid(True)\n\ntime_step = []\nsunspots = []\n\nwith open('\/tmp\/sunspots.csv') as csvfile:\n  reader = csv.reader(csvfile, delimiter=',')\n  next(reader)\n  for row in reader:\n    sunspots.append(float(row[2]))\n    time_step.append(int(row[0]))\n\nseries = np.array(sunspots)\ntime = np.array(time_step)\nplt.figure(figsize=(10, 6))\nplot_series(time, series)","87f76e32":"split_time = 3000\ntime_train = time[:split_time]\nx_train = series[:split_time]\ntime_valid = time[split_time:]\nx_valid = series[split_time:]\n\nwindow_size = 30\nbatch_size = 32\nshuffle_buffer_size = 1000","e35a7303":"def windowed_dataset(series, window_size, batch_size, shuffle_buffer):\n    series = tf.expand_dims(series, axis=-1)\n    ds = tf.data.Dataset.from_tensor_slices(series)\n    ds = ds.window(window_size + 1, shift=1, drop_remainder=True)\n    ds = ds.flat_map(lambda w: w.batch(window_size + 1))\n    ds = ds.shuffle(shuffle_buffer)\n    ds = ds.map(lambda w: (w[:-1], w[1:]))\n    return ds.batch(batch_size).prefetch(1)","e5fe627c":"def model_forecast(model, series, window_size):\n    ds = tf.data.Dataset.from_tensor_slices(series)\n    ds = ds.window(window_size, shift=1, drop_remainder=True)\n    ds = ds.flat_map(lambda w: w.batch(window_size))\n    ds = ds.batch(32).prefetch(1)\n    forecast = model.predict(ds)\n    return forecast","84f22ad5":"tf.keras.backend.clear_session()\ntf.random.set_seed(51)\nnp.random.seed(51)\nwindow_size = 64\nbatch_size = 256\ntrain_set = windowed_dataset(x_train, window_size, batch_size, shuffle_buffer_size)\nprint(train_set)\nprint(x_train.shape)\n\nmodel = tf.keras.models.Sequential([\n  tf.keras.layers.Conv1D(filters=32, kernel_size=5,\n                      strides=1, padding=\"causal\",\n                      activation=\"relu\",\n                      input_shape=[None, 1]),\n  tf.keras.layers.LSTM(64, return_sequences=True),\n  tf.keras.layers.LSTM(64, return_sequences=True),\n  tf.keras.layers.Dense(30, activation=\"relu\"),\n  tf.keras.layers.Dense(10, activation=\"relu\"),\n  tf.keras.layers.Dense(1),\n  tf.keras.layers.Lambda(lambda x: x * 400)\n])\n\nlr_schedule = tf.keras.callbacks.LearningRateScheduler(\n    lambda epoch: 1e-8 * 10**(epoch \/ 20))\noptimizer = tf.keras.optimizers.SGD(lr=1e-8, momentum=0.9)\nmodel.compile(loss=tf.keras.losses.Huber(),\n              optimizer=optimizer,\n              metrics=[\"mae\"])\nhistory = model.fit(train_set, epochs=100, callbacks=[lr_schedule])\n","788b2a68":"plt.semilogx(history.history[\"lr\"], history.history[\"loss\"])\nplt.axis([1e-8, 1e-4, 0, 60])","7b61c13e":"tf.keras.backend.clear_session()\ntf.random.set_seed(51)\nnp.random.seed(51)\ntrain_set = windowed_dataset(x_train, window_size=60, batch_size=100, shuffle_buffer=shuffle_buffer_size)\nmodel = tf.keras.models.Sequential([\n  tf.keras.layers.Conv1D(filters=60, kernel_size=5,\n                      strides=1, padding=\"causal\",\n                      activation=\"relu\",\n                      input_shape=[None, 1]),\n  tf.keras.layers.LSTM(60, return_sequences=True),\n  tf.keras.layers.LSTM(60, return_sequences=True),\n  tf.keras.layers.Dense(30, activation=\"relu\"),\n  tf.keras.layers.Dense(10, activation=\"relu\"),\n  tf.keras.layers.Dense(1),\n  tf.keras.layers.Lambda(lambda x: x * 400)\n])\n\n\noptimizer = tf.keras.optimizers.SGD(lr=1e-5, momentum=0.9)\nmodel.compile(loss=tf.keras.losses.Huber(),\n              optimizer=optimizer,\n              metrics=[\"mae\"])\nhistory = model.fit(train_set,epochs=500)","52fc5185":"rnn_forecast = model_forecast(model, series[..., np.newaxis], window_size)\nrnn_forecast = rnn_forecast[split_time - window_size:-1, -1, 0]","4dfa4252":"plt.figure(figsize=(10, 6))\nplot_series(time_valid, x_valid)\nplot_series(time_valid, rnn_forecast)","6354d826":"tf.keras.metrics.mean_absolute_error(x_valid, rnn_forecast).numpy()","a115e6d3":"#-----------------------------------------------------------\n# Retrieve a list of list results on training and test data\n# sets for each training epoch\n#-----------------------------------------------------------\nloss=history.history['loss']\n\nepochs=range(len(loss)) # Get number of epochs\n\n\n#------------------------------------------------\n# Plot training and validation loss per epoch\n#------------------------------------------------\nplt.plot(epochs, loss, 'b')\nplt.title('Training loss')\nplt.xlabel(\"Epochs\")\nplt.ylabel(\"Loss\")\nplt.legend([\"Loss\"])\n\nplt.figure()\n\n\n\nzoomed_loss = loss[200:]\nzoomed_epochs = range(200,500)\n\n\n#------------------------------------------------\n# Plot training and validation loss per epoch\n#------------------------------------------------\nplt.plot(zoomed_epochs, zoomed_loss, 'b')\nplt.title('Training loss')\nplt.xlabel(\"Epochs\")\nplt.ylabel(\"Loss\")\nplt.legend([\"Loss\"])\n\nplt.figure()","be06f326":"print(rnn_forecast)","94aebfc1":"**Making future perdicitions**","cf9d28ce":"**Show the best laearning rate valus**","e792225a":"**To view the notebook better go to my github** [HERE](https:\/\/github.com\/mohnabil2020\/machine_learning\/blob\/master\/Sunspot_Predictor.ipynb)","4f10e0d1":"**Show mean absolute error value**","65ceeacc":"This notebook for making future perdicitions for sunspot from [this dataset](https:\/\/www.kaggle.com\/abhinand05\/daily-sun-spot-data-1818-to-2019)\n\n**My target is:**\n\n\n1.   Making correct perdicitions as possible\n\n1.   Decreasing loss and mean absolute error as possible\n2.   Estimating the best learning rate using callbacks and lambda\n\n\n\n","01c90511":"<a href=\"https:\/\/colab.research.google.com\/github\/mohnabil2020\/machine_learning\/blob\/master\/Sunspot_Predictor.ipynb\" target=\"_parent\"><img src=\"https:\/\/colab.research.google.com\/assets\/colab-badge.svg\" alt=\"Open In Colab\"\/><\/a>","5b14c772":"**This video Explains this phenomenon**\n[video](https:\/\/www.youtube.com\/watch?v=ZC2dfDS8g0Q)\n\n\n![](https:\/\/i2.wp.com\/thegrandsolarminimum.com\/wp-content\/uploads\/2019\/03\/Sun_sunspot.jpg?ssl=1)"}}