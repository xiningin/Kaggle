{"cell_type":{"0e583123":"code","50fa8e97":"code","b515cce3":"code","ebdfe99f":"code","6c101639":"code","63f0e433":"code","1a8f060f":"code","d8be8f84":"code","56bbf239":"code","7ad29a38":"code","b4e32514":"code","33ac474f":"code","b51cd29e":"code","b070b2a6":"code","c8692549":"code","eeb8345d":"code","ec86d6e8":"code","ae7de249":"code","a16b94c4":"code","7c996c33":"code","3416f8c4":"code","3ea1bb56":"code","2168f9db":"code","1af9e950":"code","a899063c":"code","1286e55a":"code","668312d0":"markdown","0ccb0327":"markdown"},"source":{"0e583123":"import numpy as np\nimport pandas as pd\nfrom keras.models import Sequential\nfrom keras.layers import Dense,Dropout,LSTM,GRU\n# from xgboost import XGBRegressor","50fa8e97":"## importing data from one csv file\n\ndf = pd.read_csv('..\/input\/stock-time-series-20050101-to-20171231\/AABA_2006-01-01_to_2018-01-01.csv')\ndf","b515cce3":"## here we just do for close stock price\ndata = df[['Date','Close']]\ndata","ebdfe99f":"## convert str type into datetime\ndata['Date'] = pd.to_datetime(data['Date'])\n\n\n# data['Date'][:'2016']\ndata","6c101639":"## set index as date col\ndata.set_index('Date',inplace=True)\ndata","63f0e433":"## split data into two parts\ntrain_data = data[:'2016']['Close'].values\ntest_data = data['2017':]['Close'].values","1a8f060f":"train_data.shape , test_data.shape","d8be8f84":"## reshape your data\ntrain_data = train_data.reshape(len(train_data),1)\ntest_data = test_data.reshape(len(test_data),1)\ntrain_data.shape , test_data.shape","56bbf239":"## plot train data and test data\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\nplt.figure(figsize=(18,6))\nplt.plot(data[:'2016'],label='Train Data')\nplt.plot(data['2017':],label='Test Data')\nplt.legend()\nplt.show()","7ad29a38":"## lets scale our dataset\nfrom sklearn.preprocessing import MinMaxScaler","b4e32514":"## scalling your data to increase your efficiency\n\nsc = MinMaxScaler(feature_range=(0,1))\ntrain_scaled = sc.fit_transform(train_data)\ntrain_scaled\ntest_scaled = sc.transform(test_data)\n","33ac474f":"len(test_scaled)","b51cd29e":"\n## split train and test data into inputs and target\nx_train , y_train = [],[]\nx_test , y_test = [],[]\n# you can change window size your convience\nwindow_size = 30\n\nfor i in range(window_size,len(train_scaled)):\n    x_train.append(train_scaled[i-window_size:i,0])\n    y_train.append(train_scaled[i,0])\n    \nfor j in range(window_size,len(test_scaled)):\n    \n    x_test.append(test_scaled[j-window_size:j,0])\n    y_test.append(test_scaled[j,0])","b070b2a6":"x_train","c8692549":"y_train","eeb8345d":"x_train = np.array(x_train)\ny_train = np.array(y_train)\nx_test = np.array(x_test)\ny_test = np.array(y_test)\nx_train.shape , y_train.shape,x_test.shape,y_test.shape","ec86d6e8":"x_train = x_train.reshape(x_train.shape[0],x_train.shape[1],1)\nprint(x_train.shape)\nx_test = x_test.reshape(x_test.shape[0],x_test.shape[1],1)\nprint(x_test.shape)","ae7de249":"md = Sequential([\n    LSTM(120,input_shape=(x_train.shape[1],1),return_sequences=True),\n#     Dropout(0.3),\n    LSTM(80,return_sequences=True),\n#     Dropout(0.3),    \n    LSTM(60,return_sequences=False),\n#     Dense(20),\n    Dense(1)\n])\n\nmd.compile(optimizer='rmsprop',loss='mse',metrics=['accuracy'])","a16b94c4":"md.summary()","7c996c33":"md.fit(x_train,y_train,epochs=60)","3416f8c4":"## don't be worried about less accuracy just plot chart of actual data and predicted data \ndef plot_predictions(test,preds):\n    plt.plot(preds,label='Predicted')\n    plt.plot(test,label='Test')\n    plt.legend()\n    plt.show()","3ea1bb56":"predicted_data = md.predict(x_test)\nplot_predictions( y_test ,predicted_data.reshape(-1))","2168f9db":"from sklearn.linear_model import LinearRegression\n\n## decrease one dimension of ndarray\ndef changeShape(x):\n    return x.reshape(x.shape[0],x.shape[1])\n\n\nlrmd = LinearRegression()\nlrmd.fit(changeShape(x_train),y_train)","1af9e950":"lrmd.score(changeShape(x_test),y_test)","a899063c":"lr_results = lrmd.predict(changeShape(x_test))\nplot_predictions(y_test,lr_results)","1286e55a":"## conclusion : Linear regressor gives us best output for out stock dataset.","668312d0":"## Using LinearRegression model","0ccb0327":"## predictions using LSTM model"}}