{"cell_type":{"57e001fc":"code","111ef8b8":"code","d212458e":"code","0378e8be":"code","fc0f8769":"code","86ad1b03":"code","e5ffe492":"code","f7d599d9":"code","b1a2e1bb":"code","7a0d1020":"code","c995220b":"code","648b89fe":"code","f9d040da":"code","6eeb927c":"code","eed4cc81":"code","1797b93f":"code","45abd231":"code","693d568e":"code","148a808d":"code","a49f68c7":"code","2049a5a4":"code","d08ee230":"code","815e921b":"markdown","06e7ef87":"markdown","992b5b7d":"markdown","b69ac3df":"markdown","ca19c5ff":"markdown","0e3d5325":"markdown","97129bf8":"markdown","38d0aadb":"markdown","24ddd982":"markdown","4347ca04":"markdown","4fd4ff73":"markdown","e414d3f8":"markdown","757be569":"markdown","b6db73c6":"markdown"},"source":{"57e001fc":"# Installing `caer` and `canaro` since they don't come pre-installed\n!pip install --upgrade caer canaro","111ef8b8":"import os\nimport caer\nimport canaro\nimport numpy as np\nimport cv2 as cv\nimport gc\nimport sklearn.model_selection as skm \n#pylint:disable=no-member (Removes linting problems with cv)","d212458e":"IMG_SIZE = (80,80)\nchannels = 1\nchar_path = r'..\/input\/the-simpsons-characters-dataset\/simpsons_dataset'","0378e8be":"\nchar_dict = {}\nfor char in os.listdir(char_path):\n    char_dict[char] = len(os.listdir(os.path.join(char_path,char)))\n\n# Sort in descending order\nchar_dict = caer.sort_dict(char_dict, descending=True)\nchar_dict","fc0f8769":"\ncharacters = []\ncount = 0\nfor i in char_dict:\n    characters.append(i[0])\n    count += 1\n    if count >= 10:\n        break\ncharacters","86ad1b03":"\ntrain = caer.preprocess_from_dir(char_path, characters, channels=channels, IMG_SIZE=IMG_SIZE, isShuffle=True)","e5ffe492":"\nlen(train)","f7d599d9":"\nimport matplotlib.pyplot as plt\nplt.figure(figsize=(30,30))\nplt.imshow(train[0][0], cmap='gray')\nplt.show()","b1a2e1bb":"\nfeatureSet, labels = caer.sep_train(train, IMG_SIZE=IMG_SIZE)","7a0d1020":"from tensorflow.keras.utils import to_categorical\n\n# Normalize the featureSet ==> (0,1)\nfeatureSet = caer.normalize(featureSet)\n# Converting numerical labels to binary class vectors\nlabels = to_categorical(labels, len(characters))","c995220b":"\n# Do note that `val_ratio` is now `test_size`. \nsplit_data = skm.train_test_split(featureSet, labels, test_size=.2)\nx_train, x_val, y_train, y_val = (np.array(item) for item in split_data)","648b89fe":"del train\ndel featureSet\ndel labels \ngc.collect()","f9d040da":"\nBATCH_SIZE = 32\nEPOCHS = 10","6eeb927c":"\ndatagen = canaro.generators.imageDataGenerator()\ntrain_gen = datagen.flow(x_train, y_train, batch_size=BATCH_SIZE)","eed4cc81":"\nmodel = canaro.models.createSimpsonsModel(IMG_SIZE=IMG_SIZE, channels=channels, output_dim=len(characters), \n                                         loss='binary_crossentropy', decay=1e-7, learning_rate=0.001, momentum=0.9,\n                                         nesterov=True)","1797b93f":"model.summary()","45abd231":"\n\nfrom tensorflow.keras.callbacks import LearningRateScheduler\ncallbacks_list = [LearningRateScheduler(canaro.lr_schedule)]\ntraining = model.fit(train_gen,\n                    steps_per_epoch=len(x_train)\/\/BATCH_SIZE,\n                    epochs=EPOCHS,\n                    validation_data=(x_val,y_val),\n                    validation_steps=len(y_val)\/\/BATCH_SIZE,\n                    callbacks = callbacks_list)","693d568e":"characters","148a808d":"test_path = r'..\/input\/the-simpsons-characters-dataset\/kaggle_simpson_testset\/kaggle_simpson_testset\/charles_montgomery_burns_0.jpg'\n\nimg = cv.imread(test_path)\n\nplt.imshow(img)\nplt.show()","a49f68c7":"def prepare(image):\n    image = cv.cvtColor(image, cv.COLOR_BGR2GRAY)\n    image = cv.resize(image, IMG_SIZE)\n    image = caer.reshape(image, IMG_SIZE, 1)\n    return image","2049a5a4":"predictions = model.predict(prepare(img))","d08ee230":"# Getting class with the highest probability\nprint(characters[np.argmax(predictions[0])])","815e921b":"# Create the training data","06e7ef87":"# Training the model","992b5b7d":"# ***Importing All Required Libraries***","b69ac3df":"# Visualizing the data ","ca19c5ff":"***Setting Path and Image Size***","0e3d5325":"#  Getting the first 10 categories with the most number of images","97129bf8":"# Creating a character dictionary, sorting it in descending order","38d0aadb":"# Setting Useful variables when training","24ddd982":"## Testing","4347ca04":"# Number of training samples","4fd4ff73":"## NOTE:\n## In the tutorial, I've use the following line\n### x_train, x_val, y_train, y_val = caer.train_val_split(featureSet, labels, val_ratio=.2)\n## However, due to recent API changes in `caer`, this is now a deprecated feature. \n## Instead, you can use the following line (which use's SkLearn's train-test split feature). \n## Both achieve the same end result \n","e414d3f8":"# Separating the array and corresponding labels","757be569":"# Image data generator (introduces randomness in network ==> better accuracy)","b6db73c6":"# Create our model (returns a compiled model)"}}