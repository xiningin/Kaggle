{"cell_type":{"0cfa8d26":"code","15068cda":"code","767cc078":"code","fbfcbd94":"code","009ee669":"code","744f3eef":"code","5559cb1e":"code","c968b847":"code","2a836e92":"code","7f0516b3":"code","09f64703":"code","40b069f7":"code","20a081e0":"code","ebbf67cc":"code","ab3e6db9":"code","38a2feda":"markdown","5d8de20d":"markdown","94e93553":"markdown","1dc47026":"markdown","92a156f5":"markdown"},"source":{"0cfa8d26":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","15068cda":"dataset_train = pd.read_csv('\/kaggle\/input\/tesla-stock-data-from-2010-to-2020\/TSLA.csv')","767cc078":"dataset_train.head()","fbfcbd94":"training_set = dataset_train.iloc[:, 1:2].values","009ee669":"training_set[:5]","744f3eef":"from sklearn.preprocessing import MinMaxScaler","5559cb1e":"sc = MinMaxScaler(feature_range = (0, 1))\ntraining_set_scaled = sc.fit_transform(training_set)","c968b847":"dataset_train.shape","2a836e92":"X_train = []\ny_train = []\nfor i in range(60, 1258):\n    X_train.append(training_set_scaled[i-60:i, 0])\n    y_train.append(training_set_scaled[i, 0])\nX_train, y_train = np.array(X_train), np.array(y_train)","7f0516b3":"X_train = np.reshape(X_train, (X_train.shape[0], X_train.shape[1], 1))","09f64703":"from keras.models import Sequential\nfrom keras.layers import Dense\nfrom keras.layers import LSTM\nfrom keras.layers import Dropout","40b069f7":"# Initialising the RNN\nregressor = Sequential()\n\n# Adding the first LSTM layer and some Dropout regularisation\nregressor.add(LSTM(units = 50, return_sequences = True, input_shape = (X_train.shape[1], 1)))\nregressor.add(Dropout(0.2))\n\n# Adding a second LSTM layer and some Dropout regularisation\nregressor.add(LSTM(units = 50, return_sequences = True))\nregressor.add(Dropout(0.2))\n\n# Adding a third LSTM layer and some Dropout regularisation\nregressor.add(LSTM(units = 50, return_sequences = True))\nregressor.add(Dropout(0.2))\n\n# Adding a fourth LSTM layer and some Dropout regularisation\nregressor.add(LSTM(units = 50))\nregressor.add(Dropout(0.2))\n\n# Adding the output layer\nregressor.add(Dense(units = 1))\n\n# Compiling the RNN\nregressor.compile(optimizer = 'adam', loss = 'mean_squared_error')\n\n# Fitting the RNN to the Training set\nregressor.fit(X_train, y_train, epochs = 100, batch_size = 32)","20a081e0":"dataset_test = pd.read_csv('\/kaggle\/input\/tesla-stock-data-from-2010-to-2020\/TSLA.csv')\nreal_stock_price = dataset_test.iloc[:, 1:2].values","ebbf67cc":"dataset_test","ab3e6db9":"dataset_total = pd.concat((dataset_train['Open'], dataset_test['Open']), axis = 0)\ninputs = dataset_total[len(dataset_total) - len(dataset_test) - 60:].values\ninputs = inputs.reshape(-1,1)\ninputs = sc.transform(inputs)\nX_test = []\nfor i in range(60, 80):\n    X_test.append(inputs[i-60:i, 0])\nX_test = np.array(X_test)\nX_test = np.reshape(X_test, (X_test.shape[0], X_test.shape[1], 1))\npredicted_stock_price = regressor.predict(X_test)\npredicted_stock_price = sc.inverse_transform(predicted_stock_price)","38a2feda":"## Building the RNN","5d8de20d":"### Feature Scaling","94e93553":"Creating a data structure with 60 timesteps and 1 output","1dc47026":"Making the predictions and visualising the results","92a156f5":"Reshaping"}}