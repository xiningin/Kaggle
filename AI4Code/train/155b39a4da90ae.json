{"cell_type":{"b6117500":"code","16ee0b75":"code","f3fad62f":"code","c59fc933":"code","5970c9ff":"code","5927126b":"code","02613ff1":"code","7a09bbc9":"code","d194d577":"code","3caf47ab":"code","d0cfaf44":"code","c1517128":"code","24ffef7e":"code","3877ee69":"code","cd1f6c22":"code","58232e5c":"code","fc3abfd4":"code","c654a975":"code","6bd99f82":"code","6d106a0e":"code","c59ae72b":"code","d36b40b0":"code","ef757f6d":"code","25082583":"code","71c97192":"code","0f02226b":"code","58d7df1a":"code","6e9e9646":"code","441617aa":"code","02d76560":"code","15feca3e":"code","de09a8ec":"code","443f3b45":"code","dce5b886":"code","584eae90":"code","836f3308":"code","821322e3":"code","53a2d719":"code","ac530b5d":"code","b9976b58":"markdown","8e191842":"markdown","2c6cc9e1":"markdown","749688e3":"markdown","eb3e6252":"markdown","0d5c8d64":"markdown","bd1c30f7":"markdown","3173b228":"markdown","b2def6bc":"markdown","46438dee":"markdown","0c796992":"markdown","aaa9b0f4":"markdown","7db76386":"markdown","637dc497":"markdown","f795ed3a":"markdown","9ef350c8":"markdown","bc8baf42":"markdown"},"source":{"b6117500":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)","16ee0b75":"# tensorflow\nimport tensorflow as tf\nfrom tensorflow import keras\n# Sampler\nfrom imblearn.over_sampling import RandomOverSampler \nfrom imblearn.under_sampling import RandomUnderSampler\nfrom imblearn.over_sampling import SMOTE\n# Keras\nfrom keras.callbacks import ReduceLROnPlateau\nfrom keras.preprocessing.image import ImageDataGenerator\nfrom keras.utils import to_categorical\n\nfrom keras.models import Model\n# for resize an img\nfrom skimage.transform import rescale, resize\nimport skimage.io\nfrom PIL import Image\n# Training and testing with train_test_split\nfrom sklearn.model_selection import train_test_split\n# Validation model\nfrom sklearn.metrics import confusion_matrix , classification_report\n\n# Visualization\nimport matplotlib.pyplot as plt \nimport seaborn as sns","f3fad62f":"import warnings # tf needs to learn to stfu\nwarnings.simplefilter(action=\"ignore\", category=FutureWarning)\nwarnings.simplefilter(action=\"ignore\", category=UserWarning)\nwarnings.simplefilter(action=\"ignore\", category=RuntimeWarning)\nwarnings.simplefilter(action='ignore', category=DeprecationWarning)","c59fc933":"%matplotlib inline\nplt.rcParams[\"figure.figsize\"] = (15, 10)\nplt.rcParams[\"figure.dpi\"] = 125\nplt.rcParams[\"font.size\"] = 14\nplt.rcParams['font.family'] = ['sans-serif']\nplt.rcParams['font.sans-serif'] = ['DejaVu Sans']\nplt.style.use('ggplot')\nsns.set_style(\"whitegrid\", {'axes.grid': False})\nplt.rcParams['image.cmap'] = 'gray' # grayscale looks better\nfrom itertools import cycle\nprop_cycle = plt.rcParams['axes.prop_cycle']\ncolors = prop_cycle.by_key()['color']","5970c9ff":"FilePath = \"..\/input\/skin-cancer-mnist-ham10000\/hmnist_28_28_RGB.csv\"\ndataSet = pd.read_csv(FilePath)","5927126b":"Label = dataSet[\"label\"]\nData = dataSet.drop(columns=[\"label\"]) ","02613ff1":"Label.value_counts()","7a09bbc9":"#sns.set_style(\"darkgrid\")\nsns.countplot(Label)","d194d577":"Data.shape","3caf47ab":"strategy_over = {0:2000, 1:2000, 2:2000, 3:1000, 5:1000, 6:2000}\n# T\u0103ng c\u01b0\u1eddng cho c\u00e1c l\u1edbp t\u1ed1i thi\u1ec3u\noversample = RandomOverSampler(sampling_strategy=strategy_over)\nundersample = RandomUnderSampler(sampling_strategy = {4: 3000})\nData,Label  = oversample.fit_resample(Data,Label)\n\nData, Label = undersample.fit_resample(Data, Label)","d0cfaf44":"Data = np.array(Data).reshape(-1,28,28,3)\nprint('Shape of Data :',Data.shape)","c1517128":"#plt.figure(figsize = (10,10))\n#sns.set_style(\"darkgrid\")\nsns.countplot(Label)","24ffef7e":"Label = np.array(Label)\nLabel","3877ee69":"classes = {4: ('nv', ' melanocytic nevi'),\n           6: ('mel', 'melanoma'),\n           2: ('bkl', 'benign keratosis-like lesions'), \n           1: ('bcc' , ' basal cell carcinoma'),\n           5: ('vasc', ' pyogenic granulomas and hemorrhage'),\n           0: ('akiec', 'Actinic keratoses and intraepithelial carcinomae'),\n           3: ('df', 'dermatofibroma')}","cd1f6c22":"X_train , X_valid , y_train , y_valid = train_test_split(Data , Label , test_size = 0.2 , random_state = 42, stratify=Label)\nX_val, X_test, y_val, y_test = train_test_split(X_valid , y_valid , test_size = 0.5, random_state = 101, stratify=y_valid)","58232e5c":"sns.countplot(y_train)","fc3abfd4":"print(X_train.shape, 'training masks')\nprint(X_test.shape, 'testing masks')\nprint(y_train.shape, 'y training masks')\nprint(y_test.shape, 'y testing masks')\nprint(y_val.shape, 'y validation masks')","c654a975":"fig, (ax) = plt.subplots(8, 8, figsize = (10, 10))\nk = 0 \nfor i in range(8):\n    for j in range(8):\n        ax[i,j].imshow(X_train[k].reshape(28,28,3))\n        ax[i,j].axis('off')\n        k = k + 1  \n    plt.tight_layout()\n    #ax.set_title('image')","6bd99f82":"y_train = to_categorical(y_train)\ny_test = to_categorical(y_test)\ny_val =  to_categorical(y_val)","6d106a0e":"print(y_train)\nprint(y_train.shape)","c59ae72b":"learning_rate_reduction = ReduceLROnPlateau(monitor='val_accuracy'\n                                            , patience = 2\n                                            , verbose=1\n                                            , factor=0.5\n                                            , min_lr=0.00001)","d36b40b0":"def Skin_Lesion_Model():\n  input_ = keras.layers.Input(shape = [28,28,3])\n  x = keras.layers.Conv2D(32 , (3,3) , activation='relu',padding='same' , kernel_initializer='he_normal')(input_)\n  x = keras.layers.MaxPooling2D()(x)\n\n  x = keras.layers.BatchNormalization()(x)\n  x = keras.layers.Conv2D(64 , (3,3) , activation='relu',padding='same' , kernel_initializer='he_normal')(x)\n  x = keras.layers.Conv2D(64 , (3,3) , activation='relu',padding='same' , kernel_initializer='he_normal')(x)\n  x = keras.layers.MaxPooling2D()(x)\n\n  x = keras.layers.BatchNormalization()(x)\n  x = keras.layers.Conv2D(128 , (3,3) , activation='relu',padding='same' , kernel_initializer='he_normal')(x)\n  x = keras.layers.Conv2D(128 , (3,3) , activation='relu',padding='same' , kernel_initializer='he_normal')(x)\n  x = keras.layers.MaxPooling2D()(x)\n\n  x = keras.layers.BatchNormalization()(x)\n  x = keras.layers.Conv2D(256 , (3,3) , activation='relu' ,padding='same', kernel_initializer='he_normal')(x)\n  x = keras.layers.Conv2D(256 , (3,3) , activation='relu' ,padding='same', kernel_initializer='he_normal')(x)\n  x = keras.layers.MaxPooling2D()(x)\n\n  flatten  = keras.layers.Flatten()(x)\n  classifier = keras.layers.Dropout(rate = 0.2)(flatten)\n\n  classifier = keras.layers.Dense(units = 256 , activation = 'relu' , kernel_initializer = 'he_normal')(classifier)\n  classifier = keras.layers.BatchNormalization()(classifier)\n\n  classifier = keras.layers.Dense(units = 128 , activation = 'relu' , kernel_initializer = 'he_normal')(classifier)\n  classifier = keras.layers.BatchNormalization()(classifier)\n\n  classifier = keras.layers.Dense(units = 64 , activation = 'relu' , kernel_initializer = 'he_normal')(classifier)\n  classifier = keras.layers.BatchNormalization()(classifier) \n\n  classifier = keras.layers.Dense(units = 32 , activation = 'relu' , kernel_initializer = 'he_normal' , kernel_regularizer=keras.regularizers.L1L2())(classifier)\n  classifier = keras.layers.BatchNormalization()(classifier) \n\n  classifier = keras.layers.Dense(units = 7 , activation='softmax' ,kernel_initializer=\"glorot_uniform\" , name = 'classifier')(classifier)\n\n  return keras.models.Model(inputs = input_  ,outputs =  classifier  )\n  ","ef757f6d":"model = Skin_Lesion_Model()","25082583":"model.summary()","71c97192":"keras.utils.plot_model(model)","0f02226b":"model.compile(optimizer='adam', loss = keras.losses.CategoricalCrossentropy() ,metrics = ['accuracy'])","58d7df1a":"history = model.fit(X_train, y_train,\n                    epochs=30,\n                    batch_size=128,\n                    validation_data=(X_val, y_val),\n                    callbacks=[learning_rate_reduction])","6e9e9646":"model.evaluate(X_test, y_test)","441617aa":"fig, (ax1, ax2) = plt.subplots(1, 2, figsize = (20, 10))\n\nax1.plot(history.history[\"accuracy\"] , 'ro-' , label = \"Training Accuracy\")\nax1.plot(history.history[\"val_accuracy\"] , 'go-' , label = \"Testing Accuracy\")\nax1.legend()\nax2.set_title('Loss')\nplt.plot(history.history[\"loss\"] , 'ro-' , label = \"Training Loss\")\nplt.plot(history.history[\"val_loss\"] , 'go-' , label = \"Testing Loss\")\nax2.legend()\nax1.set_title('Accuracy')\nax2.set_ylim(0, 1)","02d76560":"y_pred  = model.predict(X_test).round()","15feca3e":"target_names = [f\"{classes[i]}\" for i in range(7)]\nprint(classification_report(y_test , y_pred , target_names =target_names ))","de09a8ec":"cm = confusion_matrix(y_test.argmax(axis = 1) , y_pred.argmax(axis = 1))\ncm = pd.DataFrame(cm , index = [i for i in range(7)] , columns = [i for i in range(7)])\nplt.figure(figsize = (8,8))\nplot_labels = ['akiec', 'bcc', 'bkl', 'df', 'nv', 'vasc','mel']\nsns.heatmap(cm,cmap= \"Blues\", linecolor = 'black' , linewidth = 1 , annot = True, fmt='', \n            yticklabels = plot_labels,\n            xticklabels = plot_labels)","443f3b45":"label_frac_error = 1 - np.diag(cm) \/ np.sum(cm, axis=1)\nfig, ax = plt.subplots(1, 1, figsize = (8, 5))\nax.bar(np.arange(7),label_frac_error)\nplot_lbls = ['','akiec', 'bcc', 'bkl', 'df', 'nv', 'vasc','mel']\nax.set_xlabel('True Label')\nax.set_xticklabels(plot_lbls)\nax.set_ylabel('Fraction classified incorrectly')","dce5b886":"correct = np.nonzero(y_pred == y_test)[0]\n\nk = 0\nfor c in correct[:14]:\n            plt.subplot(2,7,k+1)\n            plt.imshow(X_test[k].reshape(28,28,3), interpolation='none')\n            plt.title(f\"Pred: {y_pred[k].argmax(axis = 0)}, Truth: {y_test[k].argmax(axis = 0)} \")\n            plt.axis('off')\n            plt.tight_layout()\n            k += 1","584eae90":"model.save('.\/kaggle\/working\/model', save_format='h5')","836f3308":"test_model = keras.models.load_model('.\/kaggle\/working\/model_v')","821322e3":"target_names = [\"('akiec', 'Actinic keratoses and intraepithelial carcinomae')\", \n                \"('bcc', ' basal cell carcinoma')\", \n                \"('bkl', 'benign keratosis-like lesions')\", \n                \"('df', 'dermatofibroma')\", \n                \"('nv', ' melanocytic nevi')\", \n                \"('vasc', ' pyogenic granulomas and hemorrhage')\", \n                \"('mel', 'melanoma')\"]","53a2d719":"\ndef resize_img(img):\n    resized_image = resize(img, (28, 28))\n     # Convert the image to a 0-255 scale.\n    rescaled_image = 255 * resized_image\n     # Convert to integer data type pixels.\n    final_image = rescaled_image.astype(np.uint8)\n     # show resized image\n    img = Image.fromarray(final_image, 'RGB')\n    test_img  = np.array(img)\n    return test_img.reshape(-1, 28, 28, 3)\n\ndef test_img_from_url(model, url):\n\n    image_np = skimage.io.imread(url)\n    test = resize_img(image_np)\n    result = test_model.predict(test).round()\n    return target_names[np.argmax(result)]","ac530b5d":"image_filename = input(\"Paste your URL: \")\nprint(test_img_from_url(test_model, image_filename))","b9976b58":"## Flotting fraction classified incorrectly","8e191842":"## **As you see the data is imbalanced , so let's make it balanced**","2c6cc9e1":"## **SPLIT DATA INTO TRAIN AND TEST DATA**","749688e3":"# Training step","eb3e6252":"# Analysis after Training","0d5c8d64":"## Plotting model to see connected layers","bd1c30f7":"## Export Model and Predict","3173b228":"## **Count labels using countlabel() method**","b2def6bc":"## Convert labels into One-hot encoding","46438dee":"# **Build Our Model**","0c796992":"## Plot images","aaa9b0f4":"datagen.fit(X_train)\n\nhistory = model.fit(datagen.flow(X_train, y_train, batch_size=32,\n         subset='training'),\n         validation_data=datagen.flow(X_train, y_train,\n         batch_size=8, subset='validation'),\n         epochs=20)","7db76386":"#datagen = ImageDataGenerator(rescale=(1.\/255)\n                             ,rotation_range=10\n                             ,zoom_range = 0.1\n                             ,width_shift_range=0.1\n                             ,height_shift_range=0.1)\ndatagen = ImageDataGenerator(\n    rescale=(1.\/255),\n    featurewise_center=True,\n    featurewise_std_normalization=True,\n    rotation_range=10,\n    width_shift_range=0.1,\n    height_shift_range=0.1,\n    horizontal_flip=True,\n    validation_split=0.2)\ntestgen = ImageDataGenerator(rescale=(1.\/255))","637dc497":"# **Loading the Dataset**","f795ed3a":"## Use Data Augmentation to avoid Overfitting, using by ImageDataGenerator method","9ef350c8":"## **Learning Rate Decay**","bc8baf42":"## **Plot Test Images**"}}