{"cell_type":{"3bbc2ce7":"code","516cb048":"code","dd7dcba8":"code","7542eb7f":"code","096ad4fe":"code","cbcca701":"code","8ff25dd4":"code","c79419ad":"code","8b4ed0f8":"code","21635449":"code","b1da0013":"code","0dd7f2d0":"code","54953883":"code","f74083c2":"code","fd0795b9":"code","b3c49d11":"code","a96d1ee0":"code","d15b2926":"code","aa828a7b":"code","2cad5c0f":"code","cae27ecd":"code","8fbcd552":"code","44e6aa1f":"code","8149f61c":"code","37741242":"code","25f28870":"code","3d3b0cbf":"code","c0223fc9":"code","fabc22ef":"code","2ac7b9c9":"code","b9854293":"code","6752190d":"code","f8c3a211":"code","0aee1c49":"code","93c0262b":"code","9d764bbc":"code","bfc00019":"code","8c4dad98":"code","5a579966":"code","fd283d33":"code","a304017d":"code","74d57e9b":"code","4cc0d20d":"code","658aa2c3":"code","0e1fd8a6":"code","60a7d528":"code","3451e530":"code","61fee8d3":"code","979ac0f2":"code","0c25c551":"code","4bbcd77f":"code","11e8d120":"code","720e7321":"code","2816e8e1":"code","3d40adcd":"code","1d9d44e2":"code","0faa076e":"code","6ee927cd":"code","1e0ff301":"code","e14751b8":"code","c08a634e":"code","b957c0ed":"code","2184e458":"code","a536a23f":"code","8719da67":"code","fdaa3f05":"code","061fa347":"code","20cb861e":"code","6a8bcc7d":"code","8874ce1b":"code","9d3f0abd":"code","406fbd7d":"code","7c53099d":"code","54ecfef4":"code","33b36a07":"code","f02fddd2":"code","25497605":"code","5d010a81":"code","3f103893":"code","8ccf38fd":"code","97e9fbf0":"code","09b3cecf":"code","993f162e":"code","a5e09e05":"code","aae4c479":"code","5c852ed1":"code","1a8d8f50":"code","2f28a4c8":"markdown","a07042a0":"markdown","18457e77":"markdown","b3022295":"markdown","dda31f19":"markdown","9bae2eb1":"markdown","e32a838f":"markdown","621d7b6c":"markdown","e2ab26e3":"markdown","d9dc1be6":"markdown","16adf013":"markdown","edee6646":"markdown","41b0e296":"markdown","5def1919":"markdown","9d8abfed":"markdown","8b288445":"markdown","b237d7de":"markdown","ec7b061a":"markdown","665bb2e0":"markdown","83df40fa":"markdown","514e2479":"markdown","9a6285fa":"markdown","d95709e7":"markdown","7ca5eb91":"markdown","fc298f71":"markdown","cebac0dc":"markdown","36d83587":"markdown","a131af73":"markdown","ee51427b":"markdown","7a88f4c3":"markdown","41b7e150":"markdown","4b3da3ef":"markdown","e4af1b5b":"markdown","ee954099":"markdown","984562e5":"markdown","d5f09fc0":"markdown","769dcbd4":"markdown","f6922d38":"markdown","15217340":"markdown","f133f09f":"markdown","bde9e68f":"markdown","2da3720e":"markdown","66f70554":"markdown","e1195be8":"markdown","cd111ec1":"markdown","f3224410":"markdown","79f9c4ac":"markdown","26054501":"markdown","2f4ba16e":"markdown","3e4878e0":"markdown","4903fe1e":"markdown","8f0bd6eb":"markdown","3176ec2e":"markdown","32231a21":"markdown","14c6b829":"markdown","b29df6e8":"markdown","ef4cebf7":"markdown","47a9111c":"markdown","e791f24d":"markdown","292e0335":"markdown","100f5801":"markdown","0a7d03b4":"markdown","816dfd4a":"markdown","57a7a316":"markdown","05c9193c":"markdown","92da4fe0":"markdown","dbcf4612":"markdown","d80e549e":"markdown","17788fc1":"markdown","0338c35c":"markdown","3fcf2ed5":"markdown","da636c3d":"markdown","608e5a79":"markdown","48ad03ee":"markdown","806335ab":"markdown","5a0b7204":"markdown","d91b3b78":"markdown","c057dc2c":"markdown","8dd13a84":"markdown","a92e7855":"markdown","bb93b096":"markdown","eb03169e":"markdown","79e61d6d":"markdown","5c351a64":"markdown"},"source":{"3bbc2ce7":"import seaborn as sns","516cb048":"import pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\nfrom datetime import datetime\n%matplotlib inline\ndf = pd.read_csv('\/kaggle\/input\/psagot2020explorationlecturedata\/athlete_events.csv')\ndf.head()","dd7dcba8":"df.columns","7542eb7f":"df.Team.head()\ndf[\"City\"].head()\ndf[[\"Games\",\"City\"]].head()","096ad4fe":"df[df.Year == 2006]\ndf[df.Age > 30]\ndf[~df.Weight.isnull()]\ndf[df.Sport.isin(['Basketball', 'Judo'])]","cbcca701":"df[\"BMI\"] = 10000 * df.Weight \/ df.Height.pow(2) \ndf.head()","8ff25dd4":"### Enter your code here!\n","c79419ad":"print(\"row #3: \\n\")\ndf.iloc[2]","8b4ed0f8":"df.iloc[2:5]","21635449":"df.loc[1:10][[\"City\", \"Year\"]]\n#vs \ndf.loc[1:10,[\"City\", \"Year\"]]","b1da0013":"df.iloc[1:4,0]","0dd7f2d0":"df.iloc[1:4,4:8]","54953883":"tmp_df = pd.DataFrame({'A': [7,7,1,9,9,5]})\ntmp_df","f74083c2":"time_index = pd.date_range('1\/1\/1955', periods=6, freq='2h')\ntime_index","fd0795b9":"tmp_df = tmp_df.set_index(time_index)\ntmp_df","b3c49d11":"dt = datetime(1955,1,1,4)\ntmp_df.loc[dt]","a96d1ee0":"start = datetime(1955,1,1,4)\nend = datetime(1955,1,1,8)\ntmp_df.loc[start:end]","d15b2926":"### enter your code here\n","aa828a7b":"print(\"The average age is {0:.2f}\".format(df['Age'].mean()))\nprint(\"The std age is {0:.2f}\".format(df['Age'].std()))","2cad5c0f":"df.groupby(\"Sex\")[['Age','Weight','Height']].mean()","cae27ecd":"bins = pd.cut(df.Age, 10)\nbins.head()","8fbcd552":"min_age, max_age = int(df['Age'].min()), int(df['Age'].max()) \nbins = pd.cut(df.Age, range(min_age,max_age+5,5))\nbins.head()","44e6aa1f":"df.groupby(bins)['Age'].count()","8149f61c":"df.groupby(['Sex',bins])['Height'].mean()","37741242":"pd.DataFrame(df.groupby(['NOC'])['Medal'].value_counts(sort=False)).head(10)\n# Another option: pd.DataFrame(df.groupby(['NOC', 'Medal'])['Medal'].count()).head(10)","25f28870":"### enter your code here\n","3d3b0cbf":"def lower(x):\n    return x.lower()","c0223fc9":"df['City'] = df['City'].apply(lower)","fabc22ef":"%matplotlib inline\nimport matplotlib.pyplot as plt\nplt.rcParams['axes.titlepad'] = 0.7  #change the padding of title from the plots, not necessary","2ac7b9c9":"min_age, max_age = int(df['Age'].min()), int(df['Age'].max()) \ndf['Age'].hist(by=df.Sex, density=True, bins=range(min_age,max_age+5,5))\nplt.suptitle(\"histogram of age according to gender\")\nplt.show()","b9854293":"df.groupby('Sex')['Age'].plot.hist(bins=range(min_age,max_age+5,5), alpha=0.3, density=True)\nplt.title(\"Histogram of age according to gender\")\nplt.legend(); #add legends to plot!","6752190d":"df['Medal'].value_counts(normalize=True).plot.bar()\nplt.title(\"Histogram of medals types\");","f8c3a211":"sports_count = df.groupby(['Season'])['Sport'].value_counts(normalize=True)\nsports_count = sports_count[sports_count > 0.03].unstack()\nsports_count['Other'] = 1 - sports_count.sum(axis=1)\nexplode = [0] * len(sports_count.T)\nexplode[-1] = 0.1 #makes \"other\" category moves a little bit out, very fancy!\nsports_count.T.plot.pie(subplots=True, figsize=(15,7), explode = explode)\nplt.suptitle(\"number of athlets in each sport (spereate season)\");","0aee1c49":"plt.figure(figsize=(10,8))\nyears_bins = pd.cut(df['Year'], bins= 10)\nsport_count_per_year_norm = df.groupby(years_bins)['Sport'].value_counts(normalize=True).unstack().fillna(0)\nsns.heatmap(sport_count_per_year_norm.T)\nplt.title('sports relative to other sports per year')","93c0262b":"plt.figure(figsize=(10,8))\nyears_bins = pd.cut(df['Year'], bins= 10)\nnoc_count_per_year_norm = df.groupby(years_bins)['NOC'].value_counts(normalize=True).unstack().fillna(0)\nsns.heatmap(noc_count_per_year_norm.T)\nplt.title('nocs relative to other nocs per year');","9d764bbc":"sns.jointplot(x=\"Year\", y=\"Height\", data=df, kind=\"hex\")","bfc00019":"# How does the values of 'Season' looks? \n#In what season the Olypmic Games occured? (Yeah you probably knew but you ALWAYS need to check)\ndf['Season'].value_counts()","8c4dad98":"# Whats NOC? -> National Olympic Committee(represented by three-letter country codes)\ndf[df['NOC'].apply(len) != 3]","5a579966":"## Complete your code here\n","fd283d33":"print(\"num of rows: \", len(df))\nprint(\"num of duplicates rows: \", sum(df.duplicated()))\ndf.drop_duplicates(inplace=True)\nprint(\"num of duplicates rows: \", sum(df.duplicated()))","a304017d":"# DO Team's names have hidden duplicates?\ndf['Team'].value_counts().sort_index().head(15)","74d57e9b":"df[df['Team'].str.contains('Aldebaran')].groupby('Team')['Year'].value_counts()","4cc0d20d":"df[df.Age.isnull()].head()","658aa2c3":"df.Age.mean()","0e1fd8a6":"a = np.nan\nb = 5\na+b","60a7d528":"df.isnull().any()","3451e530":"df.isnull().mean() * 100","61fee8d3":"df[['Height', 'Weight']].isnull().groupby(df['Year']).mean().plot()\nplt.title('Null values % of [Height, Weight] through the years');","979ac0f2":"df['Year'].hist(bins= df['Year'].max() - df['Year'].min())\nplt.title('hist of year');","0c25c551":"olympics_years_summer = pd.DataFrame(df.loc[df['Season'] == 'Summer', 'Year'].unique(), columns=['Year'])\nolympics_years_winter = pd.DataFrame(df.loc[df['Season'] == 'Winter', 'Year'].unique(), columns=['Year'])","4bbcd77f":"olympics_years_winter.sort_values(by='Year').reset_index().diff()['Year'].plot()\nplt.title('olympics years winter gap');","11e8d120":"olympics_years_summer.sort_values(by='Year').reset_index().diff()['Year'].plot()\nplt.title('olympics years summer gap');","720e7321":"df.Medal = df.Medal.fillna(\"No Medal\")","2816e8e1":"df.Age = df.Age.fillna(df.Age.mean())","3d40adcd":"#BAD :(\nfemale_mean = df.Age[df.Sex == \"F\"].mean()\ndf.loc[df.Sex == \"F\", 'Age'] = df.loc[df.Sex == \"F\", 'Age'].fillna(female_mean)\nmale_mean = df.Age[df.Sex == \"M\"].mean()\ndf.loc[df.Sex == \"M\", 'Age'] = df.loc[df.Sex == \"M\", 'Age'].fillna(male_mean)\n\n#GOOD :)\ndf['Age'] = df.groupby(\"Sex\")['Age'].apply(lambda x: x.fillna(x.mean()))","1d9d44e2":"df['Weight'] = df['Weight'].fillna(df.groupby('Year')['Weight'].transform('mean'))","0faa076e":"### Replace the code here\ndf['Height'] = df['Height'].fillna(df.groupby('Year')['Height'].transform('mean'))\ndf[\"BMI\"] = 10000 * df.Weight \/ df.Height.pow(2) \n###\ndf['isHealthy'] = True\ndf.loc[(df['BMI'] < 18) | (df['BMI'] > 26), 'isHealthy'] = False","6ee927cd":"df.isnull().any()","1e0ff301":"df.describe()","e14751b8":"df[df['Age'] >= 97]","c08a634e":"sns.jointplot(x=\"Age\", y=\"Weight\", data=df)","b957c0ed":"sns.boxplot(df['Age'], df['Season'])","2184e458":"df['NOC'].value_counts().describe(), df['NOC'].value_counts().plot()","a536a23f":"#naive data filling:\nnoc_to_GDP = pd.read_csv(\"\/kaggle\/input\/psagot2020explorationlecturedata\/dictionary.csv\")\nnoc_to_GDP[\"Population\"] = noc_to_GDP[\"Population\"].fillna(noc_to_GDP[\"Population\"].mean())\nnoc_to_GDP[\"GDP per Capita\"] = noc_to_GDP[\"GDP per Capita\"].fillna(noc_to_GDP[\"GDP per Capita\"].mean())","8719da67":"noc_to_GDP.head()","fdaa3f05":"df = noc_to_GDP.merge(df, left_on = \"Code\", right_on = \"NOC\", how = \"right\")\ndf.head()","061fa347":"gdp_per_capita_hist = pd.qcut(df[\"GDP per Capita\"], q=5)\n# gdp_per_capita_hist = pd.cut(df[\"GDP per Capita\"], bins=5)\n\ndf.groupby(gdp_per_capita_hist)[\"NOC\"].nunique()","20cb861e":"df.groupby(gdp_per_capita_hist)['Medal'].value_counts().unstack()","6a8bcc7d":"df_medals = df[df['Medal'] != 'No Medal']","8874ce1b":"count_per_noc = pd.DataFrame(df_medals.groupby('NOC')['Country'].count()).rename(columns={'Country': 'win'})\nlen_per_noc = pd.DataFrame(df.groupby('NOC')['Country'].count()).rename(columns={'Country': 'win'})\nwinning_precent = (count_per_noc \/ len_per_noc).fillna(0)","9d3f0abd":"noc_gdp_count = noc_to_GDP.merge(winning_precent, left_on = \"Code\", right_on = \"NOC\", how = \"inner\")","406fbd7d":"noc_gdp_count.head()","7c53099d":"sns.heatmap(noc_gdp_count.corr())","54ecfef4":"df_medals = df_medals.set_index('ID')\ndf_medals['count_medals'] = df_medals.groupby('ID')['Medal'].count()","33b36a07":"sns.heatmap(df_medals.corr())","f02fddd2":"sns.jointplot(x=\"BMI\", y=\"count_medals\", data=df_medals)","25497605":"sns.set(color_codes=True)\n\nax = df.groupby([df.Year,df.Sex])['Age'].median().unstack().plot(rot=45, marker='o')\nax.set(ylabel=\"age median\")\nplt.title(\"Age median by Year (for male and female)\");","5d010a81":"plt.figure(figsize=(10,8))\nsns.boxplot(x='Year', y='Age', hue='Sex', data=df)\nplt.xticks(rotation=45);","3f103893":"df.loc[df['Medal'] == 'No Medal','Medal'] = np.nan\ngdp_to_medals = df.groupby(gdp_per_capita_hist).apply(lambda x: x['Medal'].value_counts()).unstack()\nax = gdp_to_medals.plot(kind='bar', rot = 45)\nplt.title(\"medal count per gdp\")\nax.set(ylabel=\"#medal\");\ndf.loc[df['Medal'].isnull(),'Medal'] = 'No Medal'","8ccf38fd":"num_of_countries_per_gdp = df.groupby(gdp_per_capita_hist)[\"NOC\"].nunique()\nax = num_of_countries_per_gdp.plot.bar(rot = 45)\nax.set(ylabel=\"num of countries\")\nplt.title(\"num of countries on each GDP bin\");","97e9fbf0":"num_of_athlete_per_gdp = df.groupby(gdp_per_capita_hist)['ID'].nunique()\nax = num_of_athlete_per_gdp.plot.bar(rot=45)\nplt.title(\"num of athlete per gdp\")\nax.set(ylabel=\"#athlete\");","09b3cecf":"athlete_per_country = num_of_athlete_per_gdp \/ num_of_countries_per_gdp\nax = (athlete_per_country).plot.bar(rot=45)\nplt.title(\"num of athlete per gdp divided by num of countries for each gdp group\")\nax.set(ylabel=\"#athlete \/ #countries\");","993f162e":"df.loc[df['Medal'] == 'No Medal', 'Medal'] = np.nan\nnum_of_medals_per_gdp = df.groupby(gdp_per_capita_hist)['Medal'].count()\nax = (num_of_medals_per_gdp \/ num_of_athlete_per_gdp).plot.bar(rot=45)\nplt.title(\"num of medals per gdp divided by num of athlete for each gdp group\")\nax.set(ylabel=\"#medal \/ #athlete\")\ndf.loc[df['Medal'].isnull(),'Medal'] = 'No Medal'","a5e09e05":"print(\"number of games per season:\")\ndf.groupby([df.Season]).size()","aae4c479":"df.groupby([df.Season]).Year.value_counts().sort_index().unstack().T.plot.bar(rot=45, figsize=(10,5))\nplt.title(\"num of records per year(separate season)\");","5c852ed1":"df[df['Sex'] == 'F'].groupby('Year')['Year'].count().plot() ## Bad :(","1a8d8f50":"female_num = df[df['Sex'] == 'F'].groupby('Year')['Year'].count() ## Good :)\n(female_num \/ df.groupby('Year')['Year'].count()).plot()","2f28a4c8":"## Data Science Flow\n\nBy now you should know what is Data Science and maybe you're familiar with the standard flow of Data Science project.\nLet's look at this flow:","a07042a0":"note: iloc allows choosing column only by their order and not by their names.(loc on the other side allows accessing columns by their names)","18457e77":"#### Grouping with multiple labels:\n\nGroupby with column and bin:","b3022295":"## 1.2 Groups\n\n[Groupby](https:\/\/pandas.pydata.org\/pandas-docs\/stable\/reference\/api\/pandas.DataFrame.groupby.html) allows us to split the df into groups and apply separate calculations on each group, for example:\n\n    We know how to calculate the average weight of all the athletes.\n    We may assume that the average weight for man and female is different,\n    we would like to check this assumption...\n    Meaning we want to do different calcultaion for female and male:","dda31f19":"The graph above shows us how many athlete are in each percentage. \n\nBut we should normalize it by the number of countries in each percentage.","9bae2eb1":"Is there a correlation between healthy athlete to winning more medals?","e32a838f":"The graph above shows us how many countries are in each percentage.","621d7b6c":"Now we want to count the number of medals for each GDP bin.","e2ab26e3":"### Why do we worry about some missing values?\n\nCan't we just ignore them?\n\nSome function like mean can be applied on missing values,\n\nfor example, mean on age will just ignore those NaNs:","d9dc1be6":"### 2.4 Outliers values","16adf013":"Another interesting discovery we can make in the cleaning phase of the DS process is detecting outliers.\n\nIt's important to discover this values because they will bias your statistics methods and eventually your learning models. \nAnd most of the time they are noise that you don't want to insert to your model.\n\nSo, how can you find those anomalies?\n \n     1. Histograms of values - outlier stand out this way\n     2. look at the quentiles of the values for each columns\n     3. visualization such scatter plots, box plots\n     4. anomaly detection ways as - clustering, Isolation Forest and more and more.(We won't get into it)\n \n \nExample:","edee6646":"Do It Yourself:\n1. return mean of Weight and std of Height fot each age group.\n2. return number of games in each season\n3. what is the most popular game in each season?","41b0e296":"It is interesting to see that the gap between ages is decreasing over the years. \n\nWhich probably leads you to think about exploring the data even more!","5def1919":"### Let's explore the data a bit more guided by some questions","9d8abfed":"We can use different methods on our groups, for example [value_counts](https:\/\/pandas.pydata.org\/pandas-docs\/stable\/reference\/api\/pandas.Series.value_counts.html) which count the appearences of each value:","8b288445":"Some More ideas:\n\n    1) For each year\/game type\/season\/... fill nulls with mean weights of this year.\n    2) The above solution may hint that we would like to fill nulls with most similar rows in the data.......\n    3) just delete any row with missing data","b237d7de":"### Some Simple statistic we can do on our dataset:\n\n\nnote that duplicates will change this values!","ec7b061a":"### 2.3 Missing values\n\nSometimes we have missing data in our dateset.\nIt can be missing values for some cols or rows.\n\n\nSometime missing values might be: <br>\n\n    (1) Empty strings\n    (2) 0\n    (3) None (not the same as NaN)\n    (4) NaN(NaN = Not a Number) is typcally mean we are missing some value.\n    (5) NaT ( Not a Time)\n    (6) ** default values **\n    (7) and more...\n\nFor example, in our data set some of the rows are missing the age of the athlete:","665bb2e0":"Pandas main object is [DataFrame](https:\/\/pandas.pydata.org\/pandas-docs\/stable\/reference\/api\/pandas.DataFrame.html), DataFrame describe a tabular information.\n\nDataFrame has index and columns. (The index can be numeric, timestamps, etc)\n\nAnother main object of pandas is [Series](https:\/\/pandas.pydata.org\/pandas-docs\/stable\/reference\/series.html), Series describe a one dimensional array with index.","83df40fa":"Do It Yourself!\n\n    1. Fill the Height however you like!\n    2. Can you think of other ways to fill the missing age? discuss with your best friend over lunch!","514e2479":"Another example, Do Countries that appear only for one Olympic games really interesting for us? would we want to insert them into our model?\nWould we want to analyze their statistics?","9a6285fa":"Create bins using [cut](https:\/\/pandas.pydata.org\/pandas-docs\/version\/0.23.4\/generated\/pandas.cut.html):","d95709e7":"Recall that the Olympics game occures every 4 years. (Domain knowladge!)\n\n    \"The Olympic Games are held every four years, with the Summer and Winter Games alternating by occurring every four years but two years apart.\"\n    \nAnother domain knowladge, the big gap above was caused by WWII.","7ca5eb91":"### Question #1: \n#### Who gets more medals? Countries with low or high GDP?","fc298f71":"#### iloc vs. loc:\n\n[iloc](https:\/\/pandas.pydata.org\/pandas-docs\/stable\/reference\/api\/pandas.DataFrame.iloc.html) - chooses rows by real order of the rows\n\n[loc](https:\/\/pandas.pydata.org\/pandas-docs\/stable\/reference\/api\/pandas.DataFrame.loc.html) - chooses rows by the index of the table","cebac0dc":"Another example of missing data which is not obvious, we can see that we have few years with no information about at all.\nStatistic function that assumse that we have records for each year will fail. For example num of records for each decade.","36d83587":"### Now that you know a little bit of pandas we can do some data cleaning!","a131af73":"## 1.4 Plots\nLooking at tables does help us to find a lot of insight about the data, but we find it difficult to understand in the form of tables. We would like to visualize the data and take a good look at it.","ee51427b":"We can see that we have more records of athelte in the summer. This create bias in our data that we need to keep in mind. <br>\nAnother bias that we need to keep in mind is the fact that we have more records from recent years:","7a88f4c3":"What is the different between female's age and male's age?","41b7e150":"### Filling NaNs:\n\nSo we've missing data, what can we do? Fill them up with some value.\n\nFor example fill the NaNs in the \"Medal\" column with \"No Medal\".","4b3da3ef":"try to understand why we have nulls and when can er expect them:","e4af1b5b":"How can we fill other missing values?\n\nNaive solution fill the mean of all values, for example:","ee954099":"FYI: [John Quincy Adams Ward](https:\/\/en.wikipedia.org\/wiki\/John_Quincy_Adams_Ward) ","984562e5":"accessing specific columns:\n\nnote: the type of pandas's columns is Series","d5f09fc0":"We can further explore our data with visualizetion in the next cells.","769dcbd4":"### Important NOTE: \nThis doesn't mean that duplicates must have the same values in all of the columns.\n\nsometimes the duplicates are hard to detect. \n\nFor example we might have two records for the same athlete but in each record his name is spelled a little different, \"drop_duplicates\" won't detect this. but we still need to detect it!\n\nIt's part of the cleaning process, which is integral part of the Data Science process.\n\nhow can I find these duplicates(or general inconsistents) in the data?\nWell it changes from data set to data set, in genral you want to look at the value's distrbution for each column.\n\nSome short examples:","f6922d38":"Do it yourself!\n\n    1. How many sport types are there?\n    2. What is the most popular sport?\n    3. Who is the most awarded athlete in history?","15217340":"Now we'll load another table: \"noc_to_GDP\". This table contains tha GDP per capita and the population of each country.","f133f09f":"## 1.1 Indexing, Slicing and more...","bde9e68f":"## A bit more into indexing\nyou might ask yourself about the indexing of our table above and how can we set it.\n\nBy default the index is just the order of the rows as we can see above. but we can set an index to a DF.\nThe index doesn't even has to be a number as you can see in the example below:","2da3720e":"But it's difficult to look at 2 histogram and compare. we would like to see both histograms on the same plot!","66f70554":"## 4. Exploration - what, why, how?","e1195be8":"## 2.1 clean what?\n\nwhen you first get a new tabular data set the first questions you migth ask yourself are: \n\n    1) what does my data contains exactly? \n    2) what values should I expect for each column? \n    3) What is the value's distribution of each column? \n    4) and so many more questions. \n\nThese are excellent questiosns and you need to answer them in order to start cleaning your data.\n\nHere are few examples of getting to know your data:","cd111ec1":"% of nulls is actualy more interesting:","f3224410":"Filter rows(according to some conditions):","79f9c4ac":"## 1.3 Apply\nSometime we wish to [apply](https:\/\/pandas.pydata.org\/pandas-docs\/stable\/reference\/api\/pandas.DataFrame.apply.html) some methods on our df, for example we would like to lower case the City column:","26054501":"Now we'll merge these 2 tables.","2f4ba16e":"### Here are some examples for creating different types of graphs. Go through it later.","3e4878e0":"For example if we want to compare the number of females througt the years we need to take it as the precent from each year.","4903fe1e":"Now assume we want to check how many athlete there are in each Age group.\n\nWe first need to define age groups and then group by them.","8f0bd6eb":"How many countries in each GDP group? <br>\nNote: notice using [qcut](https:\/\/pandas.pydata.org\/pandas-docs\/stable\/reference\/api\/pandas.qcut.html) instead of [cut](https:\/\/pandas.pydata.org\/pandas-docs\/stable\/reference\/api\/pandas.cut.html). Exploring with cut vs qcut w'll change the exploration a bit.","3176ec2e":"# 1. Pandas\n\nPandas is an open-source python library \"providing high-performance, easy-to-use data structures and data analysis tools\".\n\n![pandaImg](https:\/\/user-images.githubusercontent.com\/38311688\/91642908-c6585500-ea37-11ea-9504-f3bb7dc0271d.jpg)","32231a21":"We can find here many more conclusions and insights. <br>\nThere are many questions that we would like to ask ourself, for example: <br>\n\n        (1) How many athletes send countries with a high GDP compared to countries with low GDP? \n        (2) Is there a correlation between the number of athletes sent by the state to the number of medals in that country?\n            We have a hypothesis that there is a connection.\n","14c6b829":"Note:\nIf we use apply on our <b>df<\/b> the apply will work on each column seperatly. (unless given axis=1).<br>\nIf we use apply on some <b>column<\/b> the apply will work on each value in the column seperatly. <br>\nIf we use apply on <b>grouby the apply will work on each group separately.","b29df6e8":"What?\n\nExploring the inner hidden structure of the data. In this stage we want to achieve several goals:\n\n    1. asserting assumption about the data, can be your own assumptions. You'll probably want to assert your client's assumptions.\n    2. discover new relations in the data\n    3. discover new assumptions and patterns.\n    4. test hypotesis\n \nWhy?\n\nBecause if you want to increase you model's results you need more then just running some model, you need to know your data!\nHow can you decide which features to extract if you don't have any deeper knowledge of the data?\nChecking assumpotion and discovering inner information of the data can help you improve your model a lot.\n\nHow?\n\n    1. With all the tools we learned above.\n    2. With domain knowledge - sit with your client and together describe interseting relations to check in your data.\n    3. Look for correlation between your columns(features) and correlation between your data and your target(if you have one).","ef4cebf7":"In this Lecture we'll discuss data cleaning and basic data exploration.\n\nThe main example through this lecture will be a data set of records of athletes in the Olympics games through the history.\nWe'll learn some practical tools such as Pandas, Matplotlib, seaborn, and some concepts such as Data Cleaning and Data Exploration.","47a9111c":"Try it youself!\n\n1. return a new DF with only Summers events\n2. create new columns 'isHealthy', the value of this column will be true for BMI between 19 to 25, else false.","e791f24d":"We can clearly see that some teams's names has a numeric order. We need to understand why.","292e0335":"Was there really athlete aged 97?","100f5801":"### Dealing with outliers:\n\n1. delete them.\n2. treat them as missing values\n3. notice when it's just one outliers and when it's two or more groups of data in your model.","0a7d03b4":"# 2. Data Cleaning","816dfd4a":"Indexing rows:","57a7a316":"### Bias in our data:\nDoes our data contain bias?\n\nBias happens when your data set is out of balance, for example:\n    1. the negative-positive balance in our train differ from the real world.\n    2. the overall sampling of the train differ from real world(features imbalance)\n\nIn the first case we can use many balancing methods in the training part of the flow. (such as down-sampling, up-sampling, etc)\n\nIn the second case you need to understand the data and take into account this bias while generating feartues(or while training your model).\n\nFor example if for some reason we only got data of winners in the winter olympics, and we want to predict whether some country will win in the next olympic game. our model might learn that the country should only participate in the winter olympic. So basically our model will learn nothing at all.\n\nThis is an obvious case but sometimes the bias is hiding beneath the surface.","05c9193c":"We can see strange gaps in the data, a further exploraion is needed, for example, are the gaps in the winter and the summer occures around the same time?","92da4fe0":"# More Data!","dbcf4612":"#### Good Practice:\n\n    (1) Add titles to your plots: to plot, to subplots, to axes...\n    (2) Add legends to your code\n    (3) Make your graphs easy to interpret. (color, logic, ...)","d80e549e":"For example, is filling the same mean age for female and male makes sense? No..\n\nwe would like to fill different values for female and male:","17788fc1":"From the above graph it seems that there are countries with low GDP win less medals from countries with high GDP. <br>\nBut if we think about it we don't know how many countries are in each GDP bin. moreover we dont know how many athlete each of these country sent.\n<br>\nSo lets find out!","0338c35c":"![data_science_flow](https:\/\/user-images.githubusercontent.com\/38311688\/91642896-b771a280-ea37-11ea-8798-493e334c0d28.png)","3fcf2ed5":"Short Try It Yourself: in the athlete_events table, which coulnm should be the index? set it as the index.","da636c3d":"This result could be a result of to lack of reliable data relevant to earlier years. \nOr maybe because in the first olympics games there were less athletes.\nSo whenever we compare recent and earlier years we need to notice this bias.","608e5a79":"We dont want to propagate NaNs to all of our computations!\n\nSo, we want to know which columns has NaN values so we can fill those NaNs(or at least know about their existence):","48ad03ee":"getting all the columns:","806335ab":"Adding and manipulating columns:","5a0b7204":"We can see that countries with relative small GDP sends less athelete then countries with higher GDP.","d91b3b78":"But is this the best we can achieve? NO!","c057dc2c":"We can see that if we normalize the number of medals by the number of athletes that were sent, we get that the countries with small gdp got less medals then countries with high gdp.","8dd13a84":"## Seaborn\nAnother tool that allows us to create complex graphs easily. <br>\nWe wont get into it but  you'll see few examples in this notebook, you are more then welcome to read more about it.","a92e7855":"Note that we asked ourself these questions after looking at the data and exploring it. \nThe more you research the data you will have more questions and you will find yourself entering deeper and deeper into the data.\n<br> And that's great!","bb93b096":"### Box Plot\n\n    \"Draw a box plot to show distributions with respect to categories.\n    The box shows the quartiles of the dataset while the whiskers extend to show the rest of the distribution, \n    except for outliers\"\n    \nThe horizental line is the median, the box is everything between Q1 and Q3.\n\nGiven IQR = Q3 \u2212  Q1,\n\n    the upper bound is: Q1 - 1.5IQR\n    \n    the bottom bound is: Q3 + 1.5IQR\n    \nOutliers will appear as points outside the whiskers.","eb03169e":"## Merge\n\nSometimes we have more then one dateset. <br>\nSometimes we want to connect our datasets so we can explore our data even more.\n<br>\n[Merge](https:\/\/pandas.pydata.org\/pandas-docs\/stable\/reference\/api\/pandas.DataFrame.merge.html) allows us to join tables togather. <br>\n![merge_tables_r](https:\/\/user-images.githubusercontent.com\/38311688\/91642914-d112ea00-ea37-11ea-90c9-a02a4f603818.png)\n<br>\nThere are several types of merge: <br>\nleft: use only keys from left frame, similar to a SQL left outer join; preserve key order <br>\nright: use only keys from right frame, similar to a SQL right outer join; preserve key order <br>\nouter: use union of keys from both frames, similar to a SQL full outer join; sort keys lexicographically <br>\ninner: use intersection of keys from both frames, similar to a SQL inner join; preserve the order of the left keys","79e61d6d":"### 2.2 Duplicates\n#### Q. Why should I care? \n#### A. \n    (1) duplicates can bias our statistics methods\n    (2) duplicated can mislead our learning model\n    (3) duplicates takes more memory\n    (4) duplicates can damage the efficiency of our operations","5c351a64":"BUT, there are some operation that won't ignore Nans, for example \"+\": "}}