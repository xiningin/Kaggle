{"cell_type":{"c2aaae6a":"code","24acef1b":"code","ae7571e7":"code","d70889e8":"code","165a79d0":"code","79c8997c":"code","6d2042fa":"code","78ecbd5f":"markdown","e208ced8":"markdown","21b82425":"markdown","f917d8e2":"markdown","8b279cd9":"markdown"},"source":{"c2aaae6a":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","24acef1b":"import pandas as pd\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n\nfrom sklearn.preprocessing import LabelEncoder\nfrom sklearn.pipeline import Pipeline\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.model_selection import train_test_split\n\n\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.ensemble import RandomForestClassifier\nimport xgboost as xgb\nfrom sklearn.metrics import classification_report\n%matplotlib inline","ae7571e7":"## Reading dataset \nchurn_data = pd.read_csv('..\/input\/churn-in-telecoms-dataset\/bigml_59c28831336c6604c800002a.csv')\n\n## dataset shape \nprint(f\"{'shape of the dataset'.title()} :- {churn_data.shape}\")\n\n## sample data\nprint(f\"{'sample dataset'.title()} :- \\n {churn_data.head()}\")\n\n## missing values\nprint(f\"\\n {'Number of null values in every column'.title()} \\n {churn_data.isnull().sum()}\")\n\n## duplicate values\nprint(f\"\\n {'number of duplicate values'.title()} :- {len(churn_data.loc[churn_data.duplicated()])}\")\n\n## target value count \nprint(f\"\\n {'count of each value of target column'.title()} \\n {churn_data.churn.value_counts()}\")\n\n## information about dataset\nprint(f\"{'dataset info'.title()} \\n \")\nchurn_data.info()","d70889e8":"sns.countplot(x ='churn', data = churn_data)\nplt.show()","165a79d0":"def col_unique_values(col_name):\n  ## input : category variables\n  ## Output : number of unique values in particular category col\n  print(f\"****************** Col Name : {col_name} ****************\")\n  print(f\"Unique Values :- \\n {churn_data[col_name].unique()}\")\n  print(f\"Number of Unique values :- {churn_data[col_name].nunique()}\\n\\n\")\n\n\n## all columns\ntotal_col_names = churn_data.columns\n## find numeric columns (int & float, bool)\nnum_cols = churn_data._get_numeric_data().columns\n## getting category columns \ncat_col_names = list(set(total_col_names) - set(num_cols))\n\n\nfor col_name in cat_col_names:\n  ## check unique values of every category column\n  col_unique_values(col_name)\n\n\n## phone number is not important feature so we can remove it\nchurn_data = churn_data.drop(['phone number'], axis=1)\ncat_col_names.remove('phone number')\n\n## Apply label encoding operation on category columns\ndef label_encoding(col_name):\n  le = LabelEncoder()\n  churn_data[col_name] = le.fit_transform(churn_data[col_name])\n\n\nfor col_name in cat_col_names:\n  label_encoding(col_name)\n\n## sample dataset after label encoding\nchurn_data.head()","79c8997c":"## separate dependent and independent variables \nX = churn_data.drop(['churn'], axis=1)\ny = churn_data['churn']\n\ncolumn_names = list(X.columns)\n\n## create pipeline to apply feature scaling\npipeline = Pipeline([\n                     ('std_scaler', StandardScaler())\n])\n\n## apply feature scaling on independent values (X)\nX = pd.DataFrame(data=pipeline.fit_transform(X), columns=column_names)\nX.head()\n\n## label encoding on target variables\nle = LabelEncoder()\ny = le.fit_transform(y)\n\n## splitting whole dataset into train and test dataset\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.1, random_state=42)\nprint(f\"Size Of The Train Dataset :- {len(X_train)}\")\nprint(f\"Size Of The Test Dataset :- {len(X_test)}\")","6d2042fa":"## building different models\ndef model_building(model_name):\n  model = model_name\n  model.fit(X_train, y_train)\n  print(f\"******** Model :- {model_name} ********\\n\\n\")\n  print(f\"******** Score :- {model.score(X_test, y_test)} ***********\")\n  print(f\"******** Classification Report ************************\\n\\n\")\n  y_prediction = model.predict(X_test)\n  print(classification_report(y_test, y_prediction))\n\n\n## dictionary with different models\nmodel_dict = {'dt':DecisionTreeClassifier(criterion='entropy'), \n              'knn':KNeighborsClassifier(n_neighbors=17), \n              'rf': RandomForestClassifier(), \n              'xgb':xgb.XGBClassifier(random_state=42, learning_rate=0.4)}\n\n\n## calling to build and evaluate models\nfor key in model_dict.keys():\n  model_building(model_dict[key])","78ecbd5f":"## Import Libraires","e208ced8":"## Preprocessing","21b82425":"## Model Building & Evaluation","f917d8e2":"## DATA Visualization","8b279cd9":"## EDA"}}