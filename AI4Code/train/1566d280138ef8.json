{"cell_type":{"fdcd9c23":"code","4a995bd0":"code","318b8e6f":"code","d4fe8491":"code","7a2d13b3":"code","0c5401b9":"code","fc657892":"code","dc648138":"code","06e925b3":"code","29831814":"code","6d3a48e2":"code","d21932aa":"code","eadf92ab":"code","98f1175d":"code","c78d12d7":"code","e862a1f8":"code","28df1fac":"code","549f4e94":"code","d39a67b4":"code","c51948c6":"code","aa991cd2":"code","7d6aebb4":"code","7423c10f":"code","4a0980ce":"code","25004b01":"code","d68f496a":"code","0e087731":"code","22938ef4":"code","85333d01":"code","6720bde4":"code","4c906448":"code","b3be72ad":"code","da2db98e":"code","5925f3a1":"code","3da9880f":"code","157d8819":"code","95e1472b":"code","feecb6a0":"code","2c1e15a0":"code","4daaf088":"code","5d2384c3":"code","cf23f01f":"code","b6dcd587":"code","3b753a14":"code","a986b803":"code","2144e9f5":"code","b2134898":"code","71c56e14":"code","d521c2ce":"code","658bfcf6":"code","e0321662":"code","e7fc7cbc":"code","1f90d7c3":"code","331d9242":"code","0762ac5e":"code","db1c2c91":"code","0b537aef":"code","0e1458e3":"code","3aec1b01":"code","1d17d383":"code","b156d2c2":"code","a95c3195":"code","7df79126":"code","8c681335":"code","af4707a7":"code","0f718cc7":"code","360dc9fb":"code","136d8721":"code","5dca5043":"code","dcd574b6":"code","4297effa":"code","190a680d":"code","db9d1c1e":"code","d256af2c":"code","c21f4c77":"code","33bd2a3a":"code","e777cd31":"code","c855674f":"code","39cf9692":"code","975bd47c":"code","de7536f4":"code","2a496314":"code","6d7f7291":"code","ceab2186":"code","6cedb31b":"code","115cfd4e":"code","aba186ee":"code","705a4477":"code","62627132":"code","f4205ff6":"code","7d44f8b8":"code","e3607e9d":"code","d05b07e9":"code","cd908051":"code","4c6d4707":"code","c4792b4f":"code","976349e7":"code","c96681fe":"code","25fcee44":"code","29cf4432":"code","f9d31dd9":"code","8c76b4cc":"code","d1d83103":"code","05586e02":"code","e3da4fc9":"code","fa1bd710":"code","a850bb92":"code","c71d8dba":"code","bff49ed2":"code","a570fdd5":"code","63d503b5":"code","1ce54cdd":"code","13bee0b1":"code","60aa68bb":"code","54fd727e":"code","97ed3cbc":"code","ac5c97dc":"code","94fa105e":"code","051ec9e4":"code","73b67169":"code","02d3a309":"code","8c2fd6dd":"code","2583a86c":"code","9e04c54d":"code","b0368c1a":"code","1e6b3550":"code","d247298d":"code","00087216":"code","125adde9":"code","3fbdb0de":"code","53a11625":"code","72eff5ad":"code","e41b138f":"code","e944798a":"code","70d7946d":"code","0a834dd3":"code","84e76b51":"code","f43d7666":"code","00498693":"code","096dc526":"code","a4b2f8d3":"code","ccc6b44c":"code","7a17f65d":"code","8435e36b":"code","5cdd6a2f":"code","82914eb5":"code","8296b690":"code","9741625f":"code","6989b308":"code","095e946c":"code","79f28d7e":"code","b0406528":"code","c48aac65":"code","b5f88ed2":"code","c6a90929":"markdown","9846a60c":"markdown","d82e1b2d":"markdown","15576db6":"markdown","8c13bb6b":"markdown","25687f18":"markdown","f23e50f3":"markdown","a759ebe9":"markdown","98237e98":"markdown","27a87913":"markdown","d0d20c8d":"markdown","8c78b6bc":"markdown","377cf426":"markdown","0ccba6fe":"markdown"},"source":{"fdcd9c23":"import numpy as np # importing numpy","4a995bd0":"arr_1 = np.array([1, 2, 3, 4])  # crating array\narr_1","318b8e6f":"numbers = [1, 2, 3, 4]\narr_2 = np.array(numbers)\narr_2","d4fe8491":"array_of_zeros = np.zeros((3, 4)) # all zeros in array\narray_of_zeros","7a2d13b3":"array_of_ones = np.ones((3, 4))  # all ones in array\narray_of_ones","0c5401b9":"array_of_ones_int = np.ones((3, 4), dtype=np.int16)    # array of type integer (row, columns)\narray_of_ones_int","fc657892":"array_empty = np.empty((2, 3))  # Empty array\narray_empty","dc648138":"array_eye = np.eye(3)  # only diagonal elements are one\narray_eye","06e925b3":"array_of_events = np.arange(1, 10, 1)  # like for loop it create array \narray_of_events","29831814":"array_of_floats = np.arange(0, 5, 0.5)\narray_of_floats","6d3a48e2":"array_2d = np.array([(2, 4, 6), (3, 5, 7)]) # create two dimensional array\narray_2d","d21932aa":"array_2d.shape # find the shape of the array","eadf92ab":"np.arange(5)","98f1175d":"array_nd = np.arange(6).reshape(3, 2)\narray_nd","c78d12d7":"array_nd","e862a1f8":"array_ones = np.ones_like(array_nd) # create same dimension of array but all values will be 1\narray_ones","28df1fac":"a = np.arange(6)","549f4e94":"print(a)","d39a67b4":"b = np.arange(12).reshape(4, 3)","c51948c6":"print(b)","aa991cd2":"c = np.arange(24).reshape(2, 3, 4)","7d6aebb4":"print(c)","7423c10f":"print(np.arange(10000))","4a0980ce":"print(np.arange(1000).reshape(100, 10))","25004b01":"np.set_printoptions(threshold = np.nan)\n# set_printoptions follow in all the print statement of the notebook\n# threshold indicates no summaries","d68f496a":"print(np.arange(100).reshape(10, 10))","0e087731":"a = np.array([10, 10, 10])\nb = np.array([5, 5, 5])","22938ef4":"a + b   # add element wise ","85333d01":"a - b # subtract elemetn wise","6720bde4":"a * b # mul element wise","4c906448":"a \/ b # Division element wise","b3be72ad":"a % 3 # modulo operator","da2db98e":"a < 35 # condition operator","5925f3a1":"a > 25","3da9880f":"A = np.array([[1, 1], [0, 1]])\nB = np.array([[2, 0], [3, 4]])\n\nprint('A:\\n', A)\nprint('B:\\n', B)","157d8819":"A * B","95e1472b":"A.dot(B)  # matrix multiplication\n# [row, col] = sum(all elements in row * all elements in col)","feecb6a0":"np.dot(A, B)","2c1e15a0":"a *= 3 # element wise multiplication\na","4daaf088":"b += a\nb","5d2384c3":"ages = np.array([1, 2, 3, 4, 5])\nages.sum()","cf23f01f":"ages.min()","b6dcd587":"ages.max()","3b753a14":"numbers = np.arange(12).reshape(3, 4)\nnumbers","a986b803":"numbers.sum(axis = 0)  # sums up the columns","2144e9f5":"numbers.sum(axis = 1) # sums up the rows","b2134898":"numbers.min(axis = 1) # find minimum in the row","71c56e14":"angles = np.array([0, 30, 45, 60, 90])","d521c2ce":"angles_radians = angles * (np.pi\/180)\nangles_radians","658bfcf6":"print(\"Sin of angles in the array: \")\nprint(np.sin(angles_radians))","e0321662":"angles_radians = np.radians(angles)\nangles_radians","e7fc7cbc":"print(\"Cosine of angles in the array: \")\nprint(np.cos(angles_radians))","1f90d7c3":"print(\"Tangent of angles in the array: \")\nprint(np.tan(angles_radians))","331d9242":"sin = np.sin(angles * np.pi\/180)\nprint('Compute sine inverse of angles. Returned Values are in radians.')\n\ninv = np.arcsin(sin)\nprint(inv)","0762ac5e":"print('Check result by converting to degrees: ')\nprint(np.degrees(inv))","db1c2c91":"scores = np.array([1, 2 , 3, 4, 5])","0b537aef":"print(np.mean(scores))  # mean","0e1458e3":"print(np.median(scores)) # median","3aec1b01":"salaries = np.genfromtxt('..\/input\/salary.csv',\n                        delimiter = ',')  # read the file ","1d17d383":"salaries","b156d2c2":"salaries.shape","a95c3195":"mean = np.mean(salaries)\nmedian = np.median(salaries)\nstddev = np.std(salaries)\nvariance = np.var(salaries)","7df79126":"print(\"Mean = %i\" %mean)\nprint(\"Median = %i\" %median)\nprint(\"Standard Deviation = %i\" %stddev)\nprint(\"Variance = %i\" %variance)","8c681335":"a = np.arange(11) ** 2   # square all the elements","af4707a7":"a","0f718cc7":"a[2]","360dc9fb":"a[-2]","136d8721":"a[2:7]","5dca5043":"a[2:-2] # means 2 element to third last element","dcd574b6":"a[2:] # all element from given index","4297effa":"a[:7]","190a680d":"a[:11:2] # begining: end: step size","db9d1c1e":"a[::-1] # reverse the array means omiting the start and end than starting backwards","d256af2c":"students = np.array([['Krunal', 'Mihir', 'Kunal', 'Sai', 'Ankit'],\n                   [1, 2, 3, 4, 5]])","c21f4c77":"students","33bd2a3a":"students[0]","e777cd31":"students[1]","c855674f":"students[0, 1]","39cf9692":"students[0:2, 1:4]  # [rows, columns]","975bd47c":"students[:, 1:2]  # all rows and given column","de7536f4":"students[:, 1:3] ","2a496314":"students[-1, :]","6d7f7291":"students[0, ...]","ceab2186":"students[..., 1]","6cedb31b":"a = np.arange(11) ** 2","115cfd4e":"a","aba186ee":"for i in a:\n    print(i**(1\/2))","705a4477":"for i in students:\n    print('i = ', i)","62627132":"# Row major flattening - elements in a row appear together\nfor element in students.flatten():\n    print(element)","f4205ff6":"for element in students.flatten(order='F'):\n    print(element)","7d44f8b8":"x = np.arange(12).reshape(3, 4)\nx","e3607e9d":"for i in np.nditer(x): # iterate in row major form, one \n    print(i)","d05b07e9":"for i in np.nditer(x, order = 'F'): # iterate in col major form, one \n    print(i)","cd908051":"for i in np.nditer(x, order = 'F', flags = ['external_loop']):\n    print(i)","4c6d4707":"# for arr in np.nditer(x):\n#     arr[...] = arr * arr\n# ---------------------------------------------------------------------------\n# ValueError                                Traceback (most recent call last)\n# <ipython-input-110-2dde0a500dd6> in <module>()\n#       1 for arr in np.nditer(x):\n# ----> 2     arr[...] = arr * arr\n\n# ValueError: assignment destination is read-only","c4792b4f":"for arr in np.nditer(x, op_flags = ['readwrite']):\n    arr[...] = arr * arr","976349e7":"x","c96681fe":"a = np.array([('a', 'b', 'c'),\n            ('d', 'e', 'f')])","25fcee44":"a","29cf4432":"a.shape","f9d31dd9":"a.ravel() # 2D to 1D","8c76b4cc":"a.T # Transpose","d1d83103":"a.T.ravel()  # flatten the array in row wise","05586e02":"a.reshape(3, 2)","e3da4fc9":"np.arange(15).reshape(3, 5)","fa1bd710":"np.arange(15).reshape(5, 3)","a850bb92":"name = np.array(['a', 'b', 'c', 'd', 'e', 'f'])\nname","c71d8dba":"name.reshape(-1, 3) # arrange rows automatically according to the columns","bff49ed2":"name.reshape(3, -1)","a570fdd5":"x = np.arange(9)","63d503b5":"x","1ce54cdd":"np.split(x, 3) # split in equal parts","13bee0b1":"print('Split the array at positions indicated in 1-D array')\nnp.split(x, [4, 7])","60aa68bb":"y = np.array([('a', 'b', 'c', 'x'),\n            ('d', 'e', 'f', 'y')])","54fd727e":"y","97ed3cbc":"a, b = np.hsplit(y, 2) # split horizontally","ac5c97dc":"a","94fa105e":"b","051ec9e4":"av, bv = np.vsplit(y, 2) # Split vertically","73b67169":"av","02d3a309":"bv","8c2fd6dd":"from scipy import ndimage\nfrom scipy import misc","2583a86c":"f = misc.face()  # Get a color image of a raccon face","9e04c54d":"f.shape","b0368c1a":"type(f)","1e6b3550":"import matplotlib.pyplot as plt","d247298d":"plt.imshow(f)","00087216":"a = f[384:, 512:, :]","125adde9":"plt.imshow(a)\nplt.show()","3fbdb0de":"a, b = np.split(f, 2)  # spliting in two parts by default in row","53a11625":"plt.imshow(a)\nplt.show()","72eff5ad":"plt.imshow(b)\nplt.show()","e41b138f":"x, y = np.split(f, 2, axis = 1) # Spliting in two parts in column","e944798a":"plt.imshow(x)\nplt.show()","70d7946d":"plt.imshow(y)\nplt.show()","0a834dd3":"plt.imshow(np.concatenate((a, b))) # concatenating in row\nplt.show()","84e76b51":"plt.imshow(np.concatenate((x, y), axis = 1)) # concatenating in column\nplt.show()","f43d7666":"fruits = np.array(['Apple', 'Mango', 'Orange'])","00498693":"a = fruits.view()\nb = fruits.view()","096dc526":"print(a)\nprint(b)","a4b2f8d3":"print('ids for the arrays are different.')\nprint('id for fruits is : ')\nprint(id(fruits))\nprint('id for baskets is :')\nprint(id(a))\nprint(id(b))","ccc6b44c":"a is fruits","7a17f65d":"a.base is fruits  # Describes that 'a' is derived from the fruits","8435e36b":"a[0] = 'Strawberry'","5cdd6a2f":"a","82914eb5":"fruits","8296b690":"fruits = np.array(['Apple', 'Orange', 'Mango'])","9741625f":"a = fruits.copy()","6989b308":"a","095e946c":"a is fruits","79f28d7e":"a.base is fruits # Describes that 'a' is not derived from the fruits","b0406528":"a[0] = 'Strawberry'","c48aac65":"a","b5f88ed2":"fruits","c6a90929":"## Universal Functions","9846a60c":"## Indexing and Slicing","d82e1b2d":"<img src=\"https:\/\/i.ibb.co\/gjRtTPz\/Numpy.jpg\">\n<img src=\"https:\/\/i.ibb.co\/C6TXNSb\/Overview.jpg\">","15576db6":"# Shallow Copies Using View","8c13bb6b":"* **Note:-** flatten actually return a result array, nditer just allow you to iterate over elements.","25687f18":"## Splitting arrays horizontally and vertically","f23e50f3":"## Printing arrays","a759ebe9":"# Image Manipulation\n* **Scipy** is open source ecosystem for all kinds of mathematical and scientific software\n<img src=\"https:\/\/i.ibb.co\/Ld2GGqz\/Screenshot-2018-12-22-at-3-42-41-PM.png\">\n<img src=\"https:\/\/i.ibb.co\/6FVynkV\/Screenshot-2018-12-22-at-3-44-28-PM.png\">\n<img src=\"https:\/\/i.ibb.co\/zQRDwFp\/Screenshot-2018-12-22-at-3-43-03-PM.png\">\n<img src=\"https:\/\/i.ibb.co\/CV2Q512\/Screenshot-2018-12-22-at-3-45-37-PM.png\">\n<img src=\"https:\/\/i.ibb.co\/b1ZDQ1M\/Screenshot-2018-12-22-at-3-46-27-PM.png\">\n* 1 indicates Grey scale and 3 indicates RBG.","98237e98":"# Exploring Multidimensional Data Using Numpy\n## Creating arrays","27a87913":"## Iterating over arrays","d0d20c8d":"## Reshaping the array","8c78b6bc":"## Basic array operations","377cf426":"* **<** Little endian style\n* **>** Big endian\n* **U** Unicode","0ccba6fe":"## Deep  Copies Using copy"}}