{"cell_type":{"e8734a89":"code","0e49cce9":"code","9f027f4a":"code","2ee08022":"code","a2e5231a":"code","a3d30a2e":"code","08ed9572":"code","7c9a06cd":"code","d03e339a":"code","19c7701e":"code","c955106c":"code","fd11195d":"code","ac802767":"code","16ab3da4":"code","048748bc":"code","109c53d3":"code","845a4c80":"markdown","a018f9ff":"markdown","2fe7edf0":"markdown","40b51efd":"markdown","6ca0134a":"markdown"},"source":{"e8734a89":"# Import libraries\nimport pandas as pd\nimport numpy as np\n\nimport xgboost as xgb\n\nfrom sklearn.model_selection import StratifiedKFold, cross_val_score","0e49cce9":"# Set options\npd.set_option('display.float_format', lambda x: '%.3f' % x)","9f027f4a":"def optimize_memory_usage(df, print_size = True):\n    # Function optimizes memory usage in dataframe.\n   \n    # Types for optimization.\n    numerics = ['int16', 'int32', 'int64', 'float16', 'float32', 'float64']\n    # Memory usage size before optimize (Mb).\n    before_size = df.memory_usage().sum() \/ 1024**2    \n    for column in df.columns:\n        column_type = df[column].dtypes\n        if column_type in numerics:\n            column_min = df[column].min()\n            column_max = df[column].max()\n            if str(column_type).startswith('int'):\n                if column_min > np.iinfo(np.int8).min and column_max < np.iinfo(np.int8).max:\n                    df[column] = df[column].astype(np.int8)\n                elif column_min > np.iinfo(np.int16).min and column_max < np.iinfo(np.int16).max:\n                    df[column] = df[column].astype(np.int16)\n                elif column_min > np.iinfo(np.int32).min and column_max < np.iinfo(np.int32).max:\n                    df[column] = df[column].astype(np.int32)\n                elif column_min > np.iinfo(np.int64).min and column_max < np.iinfo(np.int64).max:\n                    df[column] = df[column].astype(np.int64)  \n            else:\n                if column_min > np.finfo(np.float32).min and column_max < np.finfo(np.float32).max:\n                    df[column] = df[column].astype(np.float32)\n                else:\n                    df[column] = df[column].astype(np.float64)    \n    # Memory usage size after optimize (Mb).\n    after_size = df.memory_usage().sum() \/ 1024**2\n    if print_size: print('Memory usage size: before {:5.4f} Mb - after {:5.4f} Mb ({:.1f}%).'.format(before_size, after_size, 100 * (before_size - after_size) \/ before_size))\n    return df","2ee08022":"def import_data_from_csv(file_path):\n    # Load a dataframe from csv-file and optimize its memory usage.\n    df = pd.read_csv(file_path, parse_dates = True, keep_date_col = True)\n    df = optimize_memory_usage(df)\n    return df","a2e5231a":"# Load train data\ntrain_df = import_data_from_csv('..\/input\/tabular-playground-series-nov-2021\/train.csv')","a3d30a2e":"# Load test data\ntest_df = import_data_from_csv('..\/input\/tabular-playground-series-nov-2021\/test.csv')","08ed9572":"train_df.shape, test_df.shape","7c9a06cd":"train_df.head()","d03e339a":"train_df.describe()","19c7701e":"# Make features list\nfeatures_black_list = ['id', 'target']\nfeatures_list = [x for x in train_df.columns if x not in features_black_list]","c955106c":"# Make X and y\nX_train = train_df[features_list].values\ny_train = train_df['target'].values","fd11195d":"cv = StratifiedKFold(n_splits = 3)\nmodel = xgb.XGBClassifier(max_depth = 5, n_estimators = 100)","ac802767":"scores = cross_val_score(model, X_train, y_train, cv = cv, scoring='roc_auc')\nnp.mean(scores), np.std(scores)","16ab3da4":"model.fit(X_train, y_train)","048748bc":"X_test = test_df[features_list].values\ntest_df['target'] = model.predict(X_test).astype('int8')","109c53d3":"test_df[['id', 'target']].to_csv('Tabular_Playground_Series_Nov_21_simple_xgb.csv', index = False)","845a4c80":"This is try to predict by simple XGBClassifier model without any feature engineering.","a018f9ff":"Use [function memory usage optimization dataframe](https:\/\/www.kaggle.com\/ellavs\/function-memory-usage-optimization-dataframe\/):","2fe7edf0":"# Import libraries and load data","40b51efd":"# Save result","6ca0134a":"# Try XGBClassifier"}}