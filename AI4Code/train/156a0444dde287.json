{"cell_type":{"4b559a42":"code","d8699bbb":"code","25d3f014":"code","266af0bc":"code","04d36509":"code","af4aaa80":"code","883a4af5":"code","672fc85a":"code","c487bbeb":"code","5359a977":"code","be97ad22":"code","962be854":"markdown","fe69337b":"markdown","a83c5c8d":"markdown","806be8fa":"markdown","ff823017":"markdown"},"source":{"4b559a42":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","d8699bbb":"train = pd.read_csv('..\/input\/house-prices-advanced-regression-techniques\/train.csv')\ntest  = pd.read_csv('..\/input\/house-prices-advanced-regression-techniques\/test.csv')","25d3f014":"train.isnull().sum().head(20)","266af0bc":"train.dropna(axis=0, subset=['SalePrice'],inplace=True)","04d36509":"sprice = train['SalePrice']\nalldata = pd.concat([train.iloc[:,:-1], test],axis=0)","af4aaa80":"alldata=alldata.drop(columns=['Id'], axis=1)","883a4af5":"def Fill(df):\n    numerical = [cname for cname in df.columns if df[cname].dtype in ['int64', 'float64']]\n    categorical = [cname for cname in df.columns if df[cname].dtype == \"object\"]\n    values = {}\n    for a in categorical:\n        values[a] = 'UNKNOWN'\n\n    for a in numerical:\n        values[a] = df[a].mean()\n        \n    df.fillna(value=values, inplace=True)","672fc85a":"Fill(alldata)","c487bbeb":"categoric=[cname for cname in alldata.columns if alldata[cname].dtype == \"object\"]\nalldata=pd.get_dummies(alldata,columns=categoric)\n\ntrain_data = alldata.iloc[:1460, :]\ntest_data = alldata.iloc[1460:, :]","5359a977":"from sklearn.model_selection import train_test_split\nfrom sklearn.linear_model import RidgeCV\nimport xgboost as xgb\ntrain_data['SalePrice']=sprice\ny = train_data['SalePrice']\nX = train_data.drop(['SalePrice'],axis=1)\nX_train, X_test, y_train, y_test = train_test_split(\n                          X, y, random_state=42, test_size=.33)\n\n\nridge_cv = RidgeCV(alphas = (0.01, 0.05, 0.1, 0.3, 1, 3, 5, 10))\nridge_cv.fit(X_train, y_train)\nridge_cv_preds = ridge_cv.predict(test_data)\n\nmodel_xgb = xgb.XGBRegressor(n_estimators=270, max_depth=5, learning_rate=0.2)\nmodel_xgb.fit(X_train, y_train)\nxgb_preds = model_xgb.predict(test_data)\n\npredictions = (ridge_cv_preds + xgb_preds) \/ 2\nsubmission = {\n    'Id': test.Id.values,\n    'SalePrice': predictions\n}","be97ad22":"solution = pd.DataFrame(submission)\nsolution.to_csv('submission.csv',index=False)","962be854":"**\u0424\u0443\u043d\u043a\u0446\u0438\u044f \u0434\u043b\u044f \u0437\u0430\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f \u043f\u0440\u043e\u043f\u0443\u0441\u043a\u043e\u0432**","fe69337b":"**\u041f\u0440\u043e\u043f\u0443\u0441\u043a\u0438 \u0432 \u0434\u0430\u043d\u043d\u044b\u0445**","a83c5c8d":"**\u0413\u0440\u0435\u0431\u043d\u0435\u0432\u0430\u044f \u0440\u0435\u0433\u0440\u0435\u0441\u0441\u0438\u044f**","806be8fa":"**\u0417\u0430\u043f\u0438\u0441\u044c \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u043e\u0432 \u0432 \u0444\u0430\u0439\u043b**","ff823017":"**\u0421\u0447\u0438\u0442\u044b\u0432\u0430\u043d\u0438\u0435 \u0434\u0430\u043d\u043d\u044b\u0445**"}}