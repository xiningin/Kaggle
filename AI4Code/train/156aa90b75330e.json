{"cell_type":{"f5f6c799":"code","7daac00d":"code","2e1cdf4e":"code","1e8f9c98":"code","e10b0d5d":"code","046f1b0d":"code","9bc220b8":"code","a4a124e0":"code","c75ba382":"code","d6d5bc6a":"code","a14be7e2":"code","0213bd1d":"code","5dc6bbfd":"code","6e531335":"code","b37bc06d":"code","b8d38a56":"code","b6a64295":"markdown","2afc20cc":"markdown","718c67d3":"markdown","75a763c2":"markdown","81386740":"markdown","c2fda6ad":"markdown","82d385c7":"markdown","4abaf4e2":"markdown","f0cb798d":"markdown","f00b6b2f":"markdown","dc7f569a":"markdown","0554ec6d":"markdown","0ad45f71":"markdown"},"source":{"f5f6c799":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","7daac00d":"df = pd.read_csv('\/kaggle\/input\/heart-attack-analysis-prediction-dataset\/heart.csv')\ndf.head(3)","2e1cdf4e":"import matplotlib.pyplot as plt\nimport seaborn as sns","1e8f9c98":"df.info()","e10b0d5d":"df.describe()","046f1b0d":"sns.countplot(x='sex',data=df)","9bc220b8":"plt.figure(figsize=(20,10))\nsns.heatmap(df.corr(),annot=True)","a4a124e0":"sns.countplot(data=df,x='exng',hue='output')","c75ba382":"plt.figure(figsize=(10,5))\n\ndf[df['output']==1]['age'].hist(alpha=0.4,bins=5,color='r')\ndf[df['output']==0]['age'].hist(alpha=0.5,bins=5,color='g')\nplt.legend()","d6d5bc6a":"X=df.drop(['output'],axis=1)\ny=df['output']","a14be7e2":"print(X.head(3))\nprint('\\n')\nprint('\\n')\nprint(y.head(3))","0213bd1d":"from sklearn.preprocessing import StandardScaler\nsc = StandardScaler()\nX = sc.fit_transform(X)","5dc6bbfd":"from sklearn.model_selection import train_test_split\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=101)","6e531335":"print(X_train.shape,y_train.shape,X_test.shape,y_test.shape)","b37bc06d":"from sklearn.linear_model import LogisticRegression\nlr = LogisticRegression()\nlr.fit(X_train,y_train)\ny_pred = lr.predict(X_test)","b8d38a56":"from sklearn.metrics import accuracy_score,classification_report\nprint(accuracy_score(y_test,y_pred))\nprint('\\n')\nprint(classification_report(y_test,y_pred))","b6a64295":"show the shape of each seperated data","2afc20cc":"Import the data","718c67d3":"checking up the data info","75a763c2":"now importing the metrics to compare the prediction and real result","81386740":"now show the heatmap","c2fda6ad":"Import visual tools","82d385c7":"import the standard scaler to scale the data in X","4abaf4e2":"let's look how much male and female in this data.\nfemale = 0\nmale = 1","f0cb798d":"importing the logistic regression","f00b6b2f":"let's seperate the data for a regression\n* the X is the basic data and y is the result","dc7f569a":"from the heatmap lets see the correlation with exang and output","0554ec6d":"seperate the data into train data and test data","0ad45f71":"now showing the output comparison based on age"}}