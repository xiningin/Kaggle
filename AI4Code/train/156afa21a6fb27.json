{"cell_type":{"dbcfcb86":"code","aa189cf1":"code","483e0f8c":"code","ab66d9b1":"code","b5d21ab2":"code","f898b3a8":"code","84cda7c4":"code","023afaa9":"code","6f463b49":"code","9474e64e":"code","8fc10f2c":"code","f76e3d43":"code","c555318b":"code","19905926":"code","17df779f":"code","ecd75b10":"code","cc80f912":"code","4110fb42":"code","a8468277":"code","2fa0a70c":"code","554fcbbe":"code","497fe7b8":"code","00914936":"code","a9d16902":"code","243e4543":"code","3c9b50d6":"code","475489ee":"markdown","6f00ead4":"markdown","15955d53":"markdown","bc807301":"markdown","89c6624e":"markdown","7cc19276":"markdown","5b2e5cbf":"markdown","f468a338":"markdown"},"source":{"dbcfcb86":"import numpy as np \nimport pandas as pd\nimport matplotlib.pyplot as plt\n","aa189cf1":"player_role_data = pd.read_csv('..\/input\/play_player_role_data.csv')","483e0f8c":"player_role_data.head()","ab66d9b1":"play_information_data = pd.read_csv('..\/input\/play_information.csv')","b5d21ab2":"play_information_data.head()","f898b3a8":"concussion_data = pd.read_csv('..\/input\/video_review.csv')","84cda7c4":"concussion_data.head()","023afaa9":"len(concussion_data)","6f463b49":"concussion_data['concussed'] = 1","9474e64e":"table = pd.pivot_table(player_role_data,index=['GameKey', 'PlayID'],columns=['Role'], aggfunc=lambda x: len(x.unique()))['GSISID'].fillna(0)\n\ntable.reset_index(inplace=True)","8fc10f2c":"table.head()","f76e3d43":"merged_data = pd.merge(table,play_information_data)\nmerged_data = pd.merge(merged_data,concussion_data,how='outer')\nmerged_data.concussed.fillna(0, inplace=True)","c555318b":"len(merged_data[merged_data['Primary_Impact_Type'].notnull()])","19905926":"merged_data['overload'] =  ((merged_data['PDL1'] + merged_data['PDL2'] + merged_data['PDL3'] + merged_data['PDL4'] + merged_data['PDL5'] + merged_data['PDL6']) - \\\n(merged_data['PDR1'] + merged_data['PDR2'] + merged_data['PDR3'] + merged_data['PDR4'] + merged_data['PDR5'] + merged_data['PDR6']) + \\\n(merged_data['PLL1'] + merged_data['PLL2'] + merged_data['PLL3']) - \\\n(merged_data['PLR1'] + merged_data['PLR2'] + merged_data['PLR3'])).abs()","17df779f":"merged_data['box_defender'] =  ((merged_data['PDL1'] + merged_data['PDL2'] + merged_data['PDL3'] + merged_data['PDL4'] + merged_data['PDL5'] + merged_data['PDL6']) + \\\n(merged_data['PDR1'] + merged_data['PDR2'] + merged_data['PDR3'] + merged_data['PDR4'] + merged_data['PDR5'] + merged_data['PDR6']) + \\\n(merged_data['PLL1'] + merged_data['PLL2'] + merged_data['PLL3']) + \\\n(merged_data['PLR1'] + merged_data['PLR2'] + merged_data['PLR3']) + \n(merged_data['PLM1'] + merged_data['PLM'] + merged_data['PDM']))","ecd75b10":"yards_list = []\n\nfor i,yards in enumerate(merged_data.PlayDescription.str.split(' yard').str[0].str[-2:]):\n    try:\n        yards_list.append(float(yards))\n    except ValueError:\n        yards_list.append('NaN')\nmerged_data['punt_yards'] = yards_list\nmerged_data['no_play'] = merged_data.PlayDescription.str.contains('No Play', regex=True)\nmerged_data['blocked'] = merged_data.PlayDescription.str.contains('BLOCKED', regex=True)","cc80f912":"merged_data = merged_data[(merged_data.box_defender > 3) & (merged_data.box_defender  <9) & (merged_data.punt_yards != 'NaN') & (merged_data.no_play == False) & (merged_data.blocked == False)]","4110fb42":"merged_data.head()","a8468277":"import statsmodels\nimport statsmodels.api as sm\n\nimport statsmodels.formula.api as smf\n\n\nresults = smf.logit(formula='concussed ~ box_defender + overload', data=merged_data).fit()","2fa0a70c":"results.summary()","554fcbbe":"zero_overload = merged_data[merged_data['overload'] == 0]\nlower_zero,upper_zero = statsmodels.stats.proportion.proportion_confint(len(zero_overload[zero_overload['concussed'] == 1]), len(zero_overload['concussed']), alpha=0.05, method='wilson')\none_overload = merged_data[merged_data['overload'] == 1]\nlower_one,upper_one = statsmodels.stats.proportion.proportion_confint(len(one_overload[one_overload['concussed'] == 1]), len(one_overload['concussed']), alpha=0.05, method='wilson')\ntwo_overload = merged_data[merged_data['overload'] == 2]\nlower_two,upper_two = statsmodels.stats.proportion.proportion_confint(len(two_overload[two_overload['concussed'] == 1]), len(two_overload['concussed']), alpha=0.05, method='wilson')\nthree_overload = merged_data[merged_data['overload'] == 3]\nlower_three,upper_three = statsmodels.stats.proportion.proportion_confint(len(three_overload[three_overload['concussed'] == 1]), len(three_overload['concussed']), alpha=0.05, method='wilson')","497fe7b8":"x = [0,1,2,3]\ny = [np.mean(zero_overload['concussed']),np.mean(one_overload['concussed']),np.mean(two_overload['concussed']),np.mean(three_overload['concussed'])]\n\nyerr = [[y[0] - lower_zero, y[1] - lower_one, y[2] - lower_two, y[3] - lower_three ], [upper_zero - y[0], upper_one - y[1], upper_two - y[2], upper_three - y[3]]]","00914936":"plt.errorbar(x,y,yerr, capsize=3, elinewidth=1)\nplt.xlabel('No. of overload defender')\nplt.ylabel('Concussion chance')\nplt.title('Error of concussion chance vs overload defender')\nplt.xticks(np.arange(0, 4, step=1))","a9d16902":"six_box = merged_data[merged_data['box_defender'] == 6]\nlower_six,upper_six = statsmodels.stats.proportion.proportion_confint(len(six_box[six_box['concussed'] == 1]), len(six_box['concussed']), alpha=0.05, method='wilson')\nseven_box = merged_data[merged_data['box_defender'] == 7]\nlower_seven,upper_seven = statsmodels.stats.proportion.proportion_confint(len(seven_box[seven_box['concussed'] == 1]), len(seven_box['concussed']), alpha=0.05, method='wilson')\neight_box = merged_data[merged_data['box_defender'] == 8]\nlower_eight,upper_eight = statsmodels.stats.proportion.proportion_confint(len(eight_box[eight_box['concussed'] == 1]), len(eight_box['concussed']), alpha=0.05, method='wilson')","243e4543":"x = [6,7,8]\ny = [np.mean(six_box['concussed']),np.mean(seven_box['concussed']),np.mean(eight_box['concussed'])]\n\nyerr = [[y[0] - lower_six, y[1] - lower_seven, y[2] - lower_eight], [upper_six - y[0], upper_seven - y[1], upper_eight - y[2]]]","3c9b50d6":"plt.errorbar(x,y,yerr, capsize=3, elinewidth=1)\nplt.xlabel('No. of box defender')\nplt.ylabel('Concussion chance')\nplt.title('Error of concussion chance vs box defender')\nplt.xticks(np.arange(6,9, step=1))","475489ee":"Also remove punt plays that are blocked or killed by penalties","6f00ead4":"Create a pivot table for all punt play data and merge it with concussion data","15955d53":"Here is the  kernel to show how punt formation affect the rate of concussion","bc807301":"Load player role and concussion data","89c6624e":"Check the number of concussed player  in the new dataframe","7cc19276":"From the result we can see that no. of box defender may has some effect on concussion chance, but overloading one side by receiving team seems to not making any difference.\nFinally we plot the 95% Wilson convidence interval for each case","5b2e5cbf":"Here we would like to find number of defender in box and if the receiver team is overloading one side. ","f468a338":"We now load the statsmodels module for logistic regression to determine whether no. of box defender and overload players would affect"}}