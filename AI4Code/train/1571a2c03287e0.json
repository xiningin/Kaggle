{"cell_type":{"463e0290":"code","fe6ac448":"code","3252e571":"code","967f1fdf":"code","54ef912f":"code","f1804c8e":"code","36c1a3d1":"code","8beb2ff6":"code","dd7c5174":"code","b1335fad":"code","47b38d16":"code","26add9b7":"code","d32ad7fb":"code","7284fdef":"code","93237ff3":"code","2647a6c5":"code","9848ab44":"code","a167ffaf":"code","59c6292a":"code","762f108e":"code","8c3cb5a7":"code","2a5ef8bb":"code","4f32097d":"code","d8d9a415":"code","3e342803":"markdown","97e11560":"markdown","837a1d60":"markdown","c4ce1f1b":"markdown","0679eab9":"markdown","d9e25c0f":"markdown","6239ced1":"markdown","8b5126f2":"markdown","8321c092":"markdown","83328310":"markdown","363f01bd":"markdown","874c3d88":"markdown","28a92843":"markdown","a28d7210":"markdown","8ec63b5b":"markdown","448927b2":"markdown","f4ad2ac0":"markdown","008f52c5":"markdown","0ce7135d":"markdown","96382dc0":"markdown","fa97c796":"markdown","e242c854":"markdown","9fc9fe04":"markdown"},"source":{"463e0290":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","fe6ac448":"import warnings\nfrom math import pi\nimport seaborn as sns\nimport plotly.express as px\nimport matplotlib.pyplot as plt\nwarnings.filterwarnings(\"ignore\")","3252e571":"# Missing values\ndef missing_values(df):\n        # Total missing values\n        mis_val = df.isnull().sum()\n        \n        # Percentage of missing values\n        mis_val_percent = 100 * df.isnull().sum() \/ len(df)\n        \n        # Make a table with the results\n        mis_val_table = pd.concat([mis_val, mis_val_percent], axis=1)\n        \n        # Rename the columns\n        mis_val_table_ren_columns = mis_val_table.rename(columns = {0 : 'Missing Values', 1 : '% of Total Values'})\n        \n        # Sort the table by percentage of missing descending\n        mis_val_table_ren_columns = mis_val_table_ren_columns[mis_val_table_ren_columns.iloc[:,1] != 0].sort_values('% of Total Values', ascending=False).round(1)\n        \n        # Print some summary information\n        print (\"Your selected dataframe has \" + str(df.shape[1]) + \" columns.\\n\"\"There are \" + str(mis_val_table_ren_columns.shape[0]) +\" columns that have missing values.\")\n        \n\n        return mis_val_table_ren_columns.style.background_gradient(cmap='Reds')\n","967f1fdf":"df_station_hour = pd.read_csv(\"\/kaggle\/input\/air-quality-data-in-india\/station_hour.csv\", parse_dates = [\"Datetime\"] )\ndf_city_hour    = pd.read_csv(\"\/kaggle\/input\/air-quality-data-in-india\/city_hour.csv\")\ndf_station_day  = pd.read_csv(\"\/kaggle\/input\/air-quality-data-in-india\/station_day.csv\")\ndf_city_day     = pd.read_csv(\"\/kaggle\/input\/air-quality-data-in-india\/city_day.csv\")\ndf_stations     = pd.read_csv(\"\/kaggle\/input\/air-quality-data-in-india\/stations.csv\")","54ef912f":"df_city_hour.head()","f1804c8e":"np.unique(df_city_hour['AQI_Bucket'][df_city_hour['AQI_Bucket'].notnull()].values)","36c1a3d1":"df_stations.head()","8beb2ff6":"grouped=df_stations.groupby(['State'])\nfor name,group in grouped:\n    print( name)\n    print('-'*30)\n    print( np.unique(group['City']),'\\n\\n')\n    ","dd7c5174":"Amaravati=['AP001'] ","b1335fad":"df =df_station_hour\n\n\n\ndf = df[df.StationId.isin(Amaravati)]\ndf.sort_values([\"StationId\", \"Datetime\"], inplace = True)\ndf[\"Date\"] = df.Datetime.dt.date.astype(str)\ndf.Datetime = df.Datetime.astype(str)","47b38d16":"df","26add9b7":"missing_values(df)","d32ad7fb":"df[\"PM10_24hr_avg\"] = df.groupby(\"StationId\")[\"PM10\"].rolling(window = 24, min_periods = 16).mean().values\ndf[\"PM2.5_24hr_avg\"] = df.groupby(\"StationId\")[\"PM2.5\"].rolling(window = 24, min_periods = 16).mean().values\ndf[\"SO2_24hr_avg\"] = df.groupby(\"StationId\")[\"SO2\"].rolling(window = 24, min_periods = 16).mean().values\ndf[\"NOx_24hr_avg\"] = df.groupby(\"StationId\")[\"NOx\"].rolling(window = 24, min_periods = 16).mean().values\ndf[\"NH3_24hr_avg\"] = df.groupby(\"StationId\")[\"NH3\"].rolling(window = 24, min_periods = 16).mean().values\ndf[\"CO_8hr_max\"] = df.groupby(\"StationId\")[\"CO\"].rolling(window = 8, min_periods = 1).max().values\ndf[\"O3_8hr_max\"] = df.groupby(\"StationId\")[\"O3\"].rolling(window = 8, min_periods = 1).max().values","7284fdef":"## PM2.5 Sub-Index calculation\ndef get_PM25_subindex(x):\n    if x <= 30:\n        return x * 50 \/ 30\n    elif x <= 60:\n        return 50 + (x - 30) * 50 \/ 30\n    elif x <= 90:\n        return 100 + (x - 60) * 100 \/ 30\n    elif x <= 120:\n        return 200 + (x - 90) * 100 \/ 30\n    elif x <= 250:\n        return 300 + (x - 120) * 100 \/ 130\n    elif x > 250:\n        return 400 + (x - 250) * 100 \/ 130\n    else:\n        return 0\n\ndf[\"PM2.5_SubIndex\"] = df[\"PM2.5_24hr_avg\"].apply(lambda x: get_PM25_subindex(x))","93237ff3":"\n\n## PM10 Sub-Index calculation\ndef get_PM10_subindex(x):\n    if x <= 50:\n        #return x * 50\/ 50\n        return x\n    elif x <= 100:\n        #return  50 + (x -  50) *  50 \/ 50\n        return x\n    elif x <= 250:\n        return 100 + (x - 100) * 100 \/ 150\n    elif x <= 350:\n        return 200 + (x - 250)\n    elif x <= 430:\n        return 300 + (x - 350) * 100 \/ 80\n    elif x > 430:\n        return 400 + (x - 430) * 100 \/ 80\n    else:\n        return 0\n\ndf[\"PM10_SubIndex\"] = df[\"PM10_24hr_avg\"].apply(lambda x: get_PM10_subindex(x))\n\n","2647a6c5":"## SO2 Sub-Index calculation\ndef get_SO2_subindex(x):\n    if x <= 40:\n        return x * 50 \/ 40\n    elif x <= 80:\n        return 50 + (x - 40) * 50 \/ 40\n    elif x <= 380:\n        return 100 + (x - 80) * 100 \/ 300\n    elif x <= 800:\n        return 200 + (x - 380) * 100 \/ 420\n    elif x <= 1600:\n        return 300 + (x - 800) * 100 \/ 800\n    elif x > 1600:\n        return 400 + (x - 1600) * 100 \/ 800\n    else:\n        return 0\n\ndf[\"SO2_SubIndex\"] = df[\"SO2_24hr_avg\"].apply(lambda x: get_SO2_subindex(x))\n","9848ab44":"## NOx Sub-Index calculation\ndef get_NOx_subindex(x):\n    if x <= 40:\n        return x * 50 \/ 40\n    elif x <= 80:\n        return 50 + (x - 40) * 50 \/ 40\n    elif x <= 180:\n        return 100 + (x - 80) * 100 \/ 100\n    elif x <= 280:\n        return 200 + (x - 180) * 100 \/ 100\n    elif x <= 400:\n        return 300 + (x - 280) * 100 \/ 120\n    elif x > 400:\n        return 400 + (x - 400) * 100 \/ 120\n    else:\n        return 0\n\ndf[\"NOx_SubIndex\"] = df[\"NOx_24hr_avg\"].apply(lambda x: get_NOx_subindex(x))\n","a167ffaf":"## NH3 Sub-Index calculation\ndef get_NH3_subindex(x):\n    if x <= 200:\n        return x * 50 \/ 200\n    elif x <= 400:\n        return 50 + (x - 200) * 50 \/ 200\n    elif x <= 800:\n        return 100 + (x - 400) * 100 \/ 400\n    elif x <= 1200:\n        return 200 + (x - 800) * 100 \/ 400\n    elif x <= 1800:\n        return 300 + (x - 1200) * 100 \/ 600\n    elif x > 1800:\n        return 400 + (x - 1800) * 100 \/ 600\n    else:\n        return 0\n\ndf[\"NH3_SubIndex\"] = df[\"NH3_24hr_avg\"].apply(lambda x: get_NH3_subindex(x))\n","59c6292a":"## CO Sub-Index calculation\ndef get_CO_subindex(x):\n    if x <= 1:\n        return x * 50 \/ 1\n    elif x <= 2:\n        return 50 + (x - 1) * 50 \/ 1\n    elif x <= 10:\n        return 100 + (x - 2) * 100 \/ 8\n    elif x <= 17:\n        return 200 + (x - 10) * 100 \/ 7\n    elif x <= 34:\n        return 300 + (x - 17) * 100 \/ 17\n    elif x > 34:\n        return 400 + (x - 34) * 100 \/ 17\n    else:\n        return 0\n\ndf[\"CO_SubIndex\"] = df[\"CO_8hr_max\"].apply(lambda x: get_CO_subindex(x))","762f108e":"## O3 Sub-Index calculation\ndef get_O3_subindex(x):\n    if x <= 50:\n        return x * 50 \/ 50\n    elif x <= 100:\n        return 50 + (x - 50) * 50 \/ 50\n    elif x <= 168:\n        return 100 + (x - 100) * 100 \/ 68\n    elif x <= 208:\n        return 200 + (x - 168) * 100 \/ 40\n    elif x <= 748:\n        return 300 + (x - 208) * 100 \/ 539\n    elif x > 748:\n        return 400 + (x - 400) * 100 \/ 539\n    else:\n        return 0\n\ndf[\"O3_SubIndex\"] = df[\"O3_8hr_max\"].apply(lambda x: get_O3_subindex(x))","8c3cb5a7":"## AQI bucketing\ndef get_AQI_bucket(x):\n    if x <= 50:\n        return \"Good\"\n    elif x <= 100:\n        return \"Satisfactory\"\n    elif x <= 200:\n        return \"Moderate\"\n    elif x <= 300:\n        return \"Poor\"\n    elif x <= 400:\n        return \"Very Poor\"\n    elif x > 400:\n        return \"Severe\"\n    else:\n        return np.NaN\n\ndf[\"Checks\"] = (df[\"PM2.5_SubIndex\"] > 0).astype(int) + \\\n                (df[\"PM10_SubIndex\"] > 0).astype(int) + \\\n                (df[\"SO2_SubIndex\"] > 0).astype(int) + \\\n                (df[\"NOx_SubIndex\"] > 0).astype(int) + \\\n                (df[\"NH3_SubIndex\"] > 0).astype(int) + \\\n                (df[\"CO_SubIndex\"] > 0).astype(int) + \\\n                (df[\"O3_SubIndex\"] > 0).astype(int)\n\ndf[\"AQI_calculated\"] = round(df[[\"PM2.5_SubIndex\", \"PM10_SubIndex\", \"SO2_SubIndex\", \"NOx_SubIndex\",\n                                 \"NH3_SubIndex\", \"CO_SubIndex\", \"O3_SubIndex\"]].max(axis = 1))\ndf.loc[df[\"PM2.5_SubIndex\"] + df[\"PM10_SubIndex\"] <= 0, \"AQI_calculated\"] = np.NaN\ndf.loc[df.Checks < 3, \"AQI_calculated\"] = np.NaN\n\ndf[\"AQI_bucket_calculated\"] = df[\"AQI_calculated\"].apply(lambda x: get_AQI_bucket(x))\ndf[~df.AQI_calculated.isna()].head(13)","2a5ef8bb":"df[~df.AQI_calculated.isna()].AQI_bucket_calculated.value_counts()","4f32097d":"df1 = df","d8d9a415":"df_check_station_hour = df1[[\"AQI\", \"AQI_calculated\"]].dropna()\nprint(\"Station + Hour\")\nprint(\"Rows: \", df_check_station_hour.shape[0])\nprint(\"Matched AQI: \", (df_check_station_hour.AQI == df_check_station_hour.AQI_calculated).sum())\nprint(\"% Match: \", (df_check_station_hour.AQI == df_check_station_hour.AQI_calculated).sum() * 100 \/ df_check_station_hour.shape[0])","3e342803":"# SO2","97e11560":"# PM 2.5","837a1d60":"# NOx","c4ce1f1b":"* Let's find how the AQI index categories are named","0679eab9":"# step 1","d9e25c0f":"# ->\n* The averages are calculated according to Indian National Air Quality Standards","6239ced1":"#  Indian Air Quality Index (IND-AQI)\n\n* AQI India provides air pollution data with real-time Air Quality Index(AQI). Air quality standards are the basic foundation that provides a legal framework for air pollution control. An air quality standard is a description of a level of air quality that is adopted by a regulatory authority as enforceable. The basis of development of standards is to provide a rational for protecting public health from adverse effects of air pollutants, to eliminate or reduce exposure to hazardous air pollutants, and to guide national\/ local authorities for pollution control decisions\n* So Central Pollution Control Board notified a new set of Indian National Air Quality Standards(INAQS) for 12 parameters: carbon monoxide (CO) nitrogen dioxide (NO2), sulphur dioxide (SO2), particulate matter (PM) of less than 2.5 microns  size  (PM2.5),  PM  of  less  than  10  microns  size  (PM10),  Ozone  (O3),  Lead  (Pb),  Ammonia  (NH3), Benzo(a)Pyrene (BaP), Benzene (C6H6), Arsenic (As), and Nickel (Ni)\n* Bap3, C4H6, As and Ni have annual standards\n\n\n","8b5126f2":"# step3\n* Now that all the sub indices are calculated  it's time to find the overall AQI index\n* The final AQI is the maximum Sub-Index among the available sub-indices with the condition that at least one of PM2.5 and PM10 should be available and at least three out of the seven should be available.","8321c092":"# ->\n* calculating the sub indices of each individual pollutant\n* the formula to calculte the sub index of a pollutant at a given concentration is:\n# Isub = ({(IHI - ILO)\/(BHI -BLO)} * (Cp-BLO))+  ILO\n* BHI= Breakpoint concentration greater or equal to given concentration.\n* BLO= Breakpoint concentration smaller or equal to given concentration.\n* IHI =AQI value corresponding to BHI\n* ILO = AQI value corresponding to BLO\n* Cp = Pollutant concentration\n* AQI ranges are given in the above table","83328310":"# NH3","363f01bd":"# ->\n* Let's assess each state information","874c3d88":"* It is recognized that air concentrations of Pb are not known in real-time and cannot contribute to real-time AQI ","28a92843":"*  To  present  status  of  the  air  quality  and  its  effects  on  human  health,  the  following description categories have been adopted for IND-AQI \n\n* IND-AQI Category and Range\n\n![image.png](attachment:image.png)","a28d7210":"# PM 10","8ec63b5b":"# CO","448927b2":"# ->\n* Now let's seperate data of one station and work on it","f4ad2ac0":"# step 2","008f52c5":"# -> calculating AQI index\n* The AQI index is calculated by using mathematical relation.\n* first the raw data is grouped into 24 hours and average is taken for each pollutant concentration, 8 hours in case of co and o3.\n* now the sub index of each pollution is calculatd.\n* The aggrregated AQI indesx is calculated by using various methods but to avoid over estimation(Ambiguos values) and under estimation (eclipse values) the maximum of values is used to calculate final AQI index.\n","0ce7135d":"# O3","96382dc0":"![image.png](attachment:image.png)","fa97c796":"# ->\n* The AQI bins are named as they are defined in the IND-AQI Category and Range","e242c854":"# Data analysis","9fc9fe04":"# Indian National Air Quality Standards (units: \u03bcg\/m3 unless mentioned otherwise)\n![image.png](attachment:image.png)"}}