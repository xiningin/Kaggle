{"cell_type":{"407e3d05":"code","5d9a7315":"code","457848c3":"code","eeac6772":"code","46bfacbf":"code","2a20029e":"code","78f76957":"code","db691be5":"code","743a4807":"code","187e09bb":"code","4b6af091":"code","d7a56298":"code","3c21c0f6":"code","532e905c":"code","dcb86dbd":"code","332d6714":"code","6cb304fe":"code","d1e5edc3":"code","5c505eb7":"code","8ecb40f5":"code","77d9ae90":"code","82de1bcd":"code","92c9798f":"code","29c9e314":"code","bab9eaf9":"code","e5128a9b":"code","d1a90f95":"code","1dfd94c0":"code","5e06290d":"code","1dbbbd10":"code","69fd0325":"markdown","c18e27ce":"markdown","c54c85b1":"markdown","6fc5d904":"markdown","062f9bc1":"markdown","e65a7564":"markdown","9f12858c":"markdown","cdf5fff3":"markdown","321cbe14":"markdown","df78aea8":"markdown","4008a7b9":"markdown","b05432c4":"markdown","b0b139db":"markdown","dac7097d":"markdown","00c370cc":"markdown"},"source":{"407e3d05":"import sklearn\nfrom sklearn.preprocessing import StandardScaler, LabelEncoder\nfrom sklearn import metrics\nimport matplotlib.pyplot as plt\nfrom sklearn.metrics import confusion_matrix, classification_report, accuracy_score, mean_squared_error\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.neighbors import KNeighborsRegressor\nfrom sklearn.linear_model import LinearRegression\nfrom sklearn.neural_network import MLPRegressor\n\nfrom sklearn.svm import SVR\nfrom sklearn.tree import DecisionTreeRegressor\nfrom sklearn.model_selection import cross_val_score\nfrom sklearn.ensemble import RandomForestRegressor, GradientBoostingRegressor, AdaBoostRegressor\nfrom sklearn.decomposition import PCA\nimport pandas as pd\nimport sklearn as sk\nimport numpy as np\nimport matplotlib.pyplot as plt\nfrom sklearn.preprocessing import MinMaxScaler, StandardScaler\n\n\nimport seaborn as sns\nsns.set_style(\"whitegrid\")\n# sns.color_palette(\"Set2\")\nsns.set_palette(\"Set2\")\n\n# sns.set_theme(style=\"ticks\", color_codes=True)","5d9a7315":"# get csv file\n\ndataset = pd.read_csv(\"\/kaggle\/input\/usedcarscatalog\/cars.csv\")\ndataset","457848c3":"# dataset","eeac6772":"# remove rows where engine_capacity is null\n\nenc_dataset = dataset.copy() # encoded dataset\n\nto_rem = enc_dataset[enc_dataset.engine_capacity.isna()].index\n\nenc_dataset.drop(to_rem, inplace = True)","46bfacbf":"enc_dataset.info()","2a20029e":"for column in enc_dataset.columns:\n  plt.figure(figsize = (10,8))\n\n  if enc_dataset[column].dtype==\"object\" or enc_dataset[column].dtype==\"bool\":\n  \n    unqs = enc_dataset[column].unique()\n  \n    if len(unqs) >  10:\n      unqs = unqs[0:10]\n\n    sns.catplot(x=column, kind=\"count\", data=enc_dataset, order = unqs)\n    plt.xticks(rotation=45)\n\n  else:\n    # dataset[column].plot()\n    plt.title(column)\n    enc_dataset[column].hist(bins = 20)","78f76957":"# label encoding for all\n\nlb_encoders = [] # for saving all encoders\ncatg_cols = [i for i in enc_dataset.columns if enc_dataset[i].dtype==\"object\" or enc_dataset[i].dtype==\"bool\" ]\nfor i in catg_cols:\n  lb_encoder = LabelEncoder()\n  col = enc_dataset[i]\n  encoded_col = lb_encoder.fit_transform(col)\n  enc_dataset[i] = encoded_col\n  lb_encoders.append(lb_encoder)\n\nenc_dataset","db691be5":"# see corelation for numerical values\n\ncols = [i for i in enc_dataset.columns   if enc_dataset[i].dtype!=\"object\" and enc_dataset[i].dtype!=\"bool\"]\ncorr = enc_dataset[cols].corr()\nlast = corr.price_usd\ncorr.drop(columns =[\"price_usd\"], inplace = True)\ncorr.drop([\"price_usd\"], inplace = True)\ncorr[\"price_usd\"] = last\ncorr","743a4807":"plt.figure(figsize=(10,8))\nsns.heatmap(corr,\n            center  = 0)","187e09bb":"# corr[col]# droping features with corr between -0.1  to 0.\/1\n\nlow_corr_features  = [col for col in corr.index if abs(corr[\"price_usd\"][col]) < 0.1 ]\nlow_corr_features","4b6af091":"enc_dataset.drop(columns = low_corr_features,inplace = True)","d7a56298":"enc_dataset.columns","3c21c0f6":"# recheck corr\n# see corelation for numerical values\n\ncols = [j for j in enc_dataset.columns  if enc_dataset[j].dtype!=\"object\" and enc_dataset[j].dtype!=\"bool\"]\ncorr = enc_dataset[cols].corr()\ncorr","532e905c":"# check outliers\nfor column in enc_dataset.columns:\n\n  if enc_dataset[column].dtype!=\"object\" and enc_dataset[column].dtype!=\"bool\":\n    plt.figure()\n    plt.title(column)\n    sns.boxplot(data=enc_dataset[column])\n''' outliers in \n - odometer val\n - year produced\n - engine_capacity\n '''","dcb86dbd":"# # odometer\n# enc_dataset.odometer_value.value_counts()\n\n# '''remove this feature bcz:\n#    - many outliers\n#    - v low corr'''\n  \n# enc_dataset.drop(columns=['odometer_value'], inplace = True)","332d6714":"# # year produced\n# pd.set_option('display.max_columns', 100)\n# enc_dataset.year_produced.value_counts().reset_index()\n\n# # remove values with count < 2","6cb304fe":"# # dropping years with count < 5\n# print(\"shape before {}\".format(enc_dataset.shape))\n\n# temp  = enc_dataset.year_produced.value_counts().reset_index()\n# temp = temp[temp.year_produced<5]\n# year_rem = temp.values[:,0]\n\n# enc_dataset.drop(enc_dataset[enc_dataset.year_produced.isin(year_rem)].index, inplace = True)\n# print(\"shape after {}\".format(enc_dataset.shape))","d1e5edc3":"# # dropping engine_capacity with count < 2\n# print(\"shape before {}\".format(enc_dataset.shape))\n\n# temp  = enc_dataset.engine_capacity.value_counts().reset_index()\n# temp = temp[temp.engine_capacity<2]\n# value_rem = temp.values[:,0]\n\n# enc_dataset.drop(enc_dataset[enc_dataset.engine_capacity.isin(value_rem)].index, inplace = True)\n# print(\"shape after {}\".format(enc_dataset.shape))","5c505eb7":"# minmax scaling\n\nminmax_scalar = MinMaxScaler()\nmm_scaled = minmax_scalar.fit_transform(enc_dataset)\nmm_scaled  = pd.DataFrame ( data = mm_scaled, columns = enc_dataset.columns)\nmm_scaled","8ecb40f5":"# standard scaling\n\nst_scalar = StandardScaler()\nst_scaled = st_scalar.fit_transform(enc_dataset)\nst_scaled  = pd.DataFrame ( data = st_scaled, columns = enc_dataset.columns)\nst_scaled","77d9ae90":"def eval(model  ,testx, testy):\n\n  #acc score : returns th ecofficient of determination, r2 \n  r2 = model.score(testx, testy)  \n  y_pred = model.predict(testx)\n  rmse = mean_squared_error(testy,y_pred, squared = False)\n  return [r2,rmse]\n","82de1bcd":"def eval_graphs(models):\n  \n  df = pd.DataFrame.from_dict(models, orient='index', columns = [\"model\", \"R^2\", \"RMSE\"])\n  \n\n  plt.figure()\n  df.plot.bar(y = \"R^2\", color = \"#34eb9b\"     )\n  \n  plt.figure()\n  df.plot.bar( y = \"RMSE\", color =  \"#eb3489\"  )\n\n  return df\n","92c9798f":"# >>> cross_val_score(regressor, X, y, cv=10)\n# # ","29c9e314":"# # for st scaled\n# predictors = st_scaled.drop(\"price_usd\",axis=1)\n# target = st_scaled[\"price_usd\"]\n# X_train,X_test,Y_train,Y_test =train_test_split(predictors,target,test_size=0.25,random_state=0)\n# print(X_train.shape)\n# print(X_test.shape)\n# print(Y_train.shape)\n# print(Y_test.shape)","bab9eaf9":"## for mm scaled\n\npredictors = mm_scaled.drop(\"price_usd\",axis=1)\ntarget = mm_scaled[\"price_usd\"]\nX_train,X_test,Y_train,Y_test =train_test_split(predictors,target,test_size=0.25,random_state=0)\nprint(X_train.shape)\nprint(X_test.shape)\nprint(Y_train.shape)\nprint(Y_test.shape)\n\n","e5128a9b":"# train test , x y split\n\n# predictors = enc_dataset.drop(\"price_usd\",axis=1)\n# target = enc_dataset[\"price_usd\"]\n# X_train,X_test,Y_train,Y_test =train_test_split(predictors,target,test_size=0.25,random_state=0)\n# print(X_train.shape)\n# print(X_test.shape)\n# print(Y_train.shape)\n# print(Y_test.shape)\n\n\n","d1a90f95":"models = {   \n           \"LR\" : [ LinearRegression(n_jobs = 5) ] ,\n           \"KNNR\" : [ KNeighborsRegressor(n_jobs=5, n_neighbors=8) ],\n           \"SVR\" : [ SVR(kernel=\"rbf\") ],\n           \"RFR\" : [ RandomForestRegressor(n_estimators = 200) ],\n           \"GBR\" : [ GradientBoostingRegressor(learning_rate=0.7, n_estimators=200) ],\n           \"ABR\" : [ AdaBoostRegressor(n_estimators=200, learning_rate=0.01) ],\n           \"MLP\" : [ MLPRegressor(random_state=1, max_iter=500,learning_rate_init=0.01) ],\n          }","1dfd94c0":"for model in list(models.keys()):\n\n  print(\"**************************** {} ****************************\".format(model))\n  \n  models[model][0] = models[model][0].fit(X_train,Y_train)\n\n  res = eval(models[model][0], X_test, Y_test)\n  print(\"r2 : \",res[0],\"\\nrmse :\",res[1])\n\n  models[model].extend( res )","5e06290d":"models","1dbbbd10":"eval_graphs(models)","69fd0325":"## cleaning","c18e27ce":"# preprocessing\n\n- data cleaning\n- categorical preprocessing\n- numerical preprocessing\n- bool processing","c54c85b1":"# imports\n","6fc5d904":"## data distribution visualize\n","062f9bc1":"# evalution metrics\n\n- model score\n- accuracy","e65a7564":"# load dataset","9f12858c":"## Encoding","cdf5fff3":"## normalization","321cbe14":"rf : r2 = 0.9, gb: r2 = 0.87","df78aea8":"\n*   preprocess\n\n*   train\n\n*   eval\n\n*   cross validation\n","4008a7b9":"## checking outliers","b05432c4":"## dimensionality reduction","b0b139db":"# models\n\n- linear regg\n- knn reg\n- svm\n- dt regg\n- ensemble regg\n- MLP regg\n","dac7097d":"it shows that there is a need to remove some features since there corelation is very low","00c370cc":"# train test \n\n- simple split\n- cross validation\n"}}