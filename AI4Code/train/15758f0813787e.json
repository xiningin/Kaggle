{"cell_type":{"f83e2716":"code","52ae46e2":"code","088af502":"code","e4fe5e88":"code","b21b7985":"code","2284c5f9":"code","38f001a7":"code","df11fe74":"code","9813a06e":"code","3f56ad40":"code","75c37305":"code","09cfbe97":"code","f2e9ca50":"code","562ab60a":"code","60329ec2":"code","07117f13":"code","114c5bef":"code","d312cd0d":"code","764eb641":"code","a68233e5":"code","856ce708":"markdown","d9b9ebfa":"markdown","fc840f72":"markdown","56acf1b0":"markdown","83c70aee":"markdown","65691183":"markdown"},"source":{"f83e2716":"import numpy as np\nimport pandas as pd\n\nimport matplotlib.pyplot as plt\n%matplotlib inline","52ae46e2":"df = pd.read_csv(\"..\/input\/ptb-diagnostic-ecg-database\/meta.csv\", \n                 usecols=[\"patient\", \"record_id\", \"fs\", \"sig_len\", \"age\", \"Reason_for_admission\"])","088af502":"df.head()","e4fe5e88":"print(\"{} recordings from {} users have NaN diagnosis\".format(\n    df.loc[df.Reason_for_admission.isnull(), \"patient\"].size,\n    df.loc[df.Reason_for_admission.isnull(), \"patient\"].nunique()\n))","b21b7985":"before = df.shape[0]\ndf = df.drop(df[df.Reason_for_admission.isnull()].index)\nprint(\"Before: {}, After: {}, {} records removed\".format(before, df.shape[0], before - df.shape[0]))","2284c5f9":"df.groupby([\"patient\"])['record_id'].nunique().value_counts().sort_index()","38f001a7":"_t = df.groupby([\"patient\"])['Reason_for_admission'].nunique().eq(1).all()\nprint(\"Different recordings of same patient are marked with same diagnosis:\", _t)","df11fe74":"ages = df.groupby([\"patient\"])['age'].apply(lambda x: list(np.unique(x))[0])\nprint(\"Age is not specified for {} patients\".format(ages.isna().sum()))","9813a06e":"ages.describe()","3f56ad40":"ax = ages.plot.hist(title=\"Age distribution\")\nax.set_xlabel(\"Age\")","75c37305":"df[\"signal_duration\"] = df[\"sig_len\"] \/ df[\"fs\"]\n\ngroupby_diagnosis = df.groupby([\"Reason_for_admission\"])['patient', 'signal_duration']\ngroupby_diagnosis = groupby_diagnosis.agg({\"patient\": 'nunique', \"signal_duration\": \"sum\"})\n\nfig, axes = plt.subplots(nrows=1, ncols=2)\n\naxes[0].yaxis.label.set_visible(False)\naxes[1].yaxis.label.set_visible(False)\n\ngroupby_diagnosis[\"patient\"].sort_values(ascending=True).plot(ax=axes[0], kind='barh', grid=True, figsize=(10,5), \n                                         title=\"Number of patients per diagnosis\")\n\nfor p in axes[0].patches:\n    axes[0].annotate(str(p.get_width()), (p.get_x() + p.get_width(), p.get_y()), xytext=(5, 0), textcoords='offset points')\n\ngroupby_diagnosis[\"signal_duration\"].sort_values(ascending=True).plot(ax=axes[1], kind='barh', grid=True, figsize=(10,5), \n                                         title=\"Total recording time per diagnosis, sec.\")\n\nfor p in axes[1].patches:\n    val = \"{:.1f}\".format(p.get_width())\n    axes[1].annotate(val, (p.get_x() + p.get_width(), p.get_y()), xytext=(5, 0), textcoords='offset points')\n    \nfig.tight_layout()","09cfbe97":"df[\"myocardial_infarction\"] = (df.Reason_for_admission == \"Myocardial infarction\").astype(int)","f2e9ca50":"_t = df.groupby([\"myocardial_infarction\"])[\"patient\"].nunique()\nax = _t.sort_values(ascending=True).plot(kind='barh', grid=True, \n                                      title=\"Number of patients with MI (1) and no MI (0)\")\n# ax.set_yticklabels([\"MI\", \"Non-MI\"], rotation=0)\nfor p in ax.patches:\n    val = \"{:.1f}\".format(p.get_width())\n    ax.annotate(val, (p.get_x() + p.get_width(), p.get_y()), xytext=(5, 5), textcoords='offset points')","562ab60a":"_t = df.groupby([\"myocardial_infarction\"])[\"signal_duration\"].sum()\nax = _t.sort_values(ascending=True).plot(kind='barh', grid=True, \n                                      title=\"Total recording time for patients with MI (1) and no MI (0), sec.\")\n# ax.set_yticklabels([\"MI\", \"Non-MI\"], rotation=0)\nfor p in ax.patches:\n    val = \"{:.1f}\".format(p.get_width())\n    ax.annotate(val, (p.get_x() + p.get_width(), p.get_y()), xytext=(5, 5), textcoords='offset points')","60329ec2":"df['age'].hist(by=df['myocardial_infarction'], stacked=True)\nplt.suptitle('Age distribution for patients with no MI (0) and MI (1)', y=1.05)","07117f13":"df[\"dysrhythmia\"] = (df.Reason_for_admission == \"Dysrhythmia\").astype(int)","114c5bef":"_t = df.groupby([\"dysrhythmia\"])[\"patient\"].nunique()\nax = _t.sort_values(ascending=True).plot(kind='barh', grid=True, \n                                      title=\"Number of patients with Dysrhythmia (1), and no Dysrhythmia (0)\")\n# ax.set_yticklabels([\"MI\", \"Non-MI\"], rotation=0)\nfor p in ax.patches:\n    val = \"{:.1f}\".format(p.get_width())\n    ax.annotate(val, (p.get_x() + p.get_width(), p.get_y()), xytext=(5, 5), textcoords='offset points')","d312cd0d":"_t = df.groupby([\"dysrhythmia\"])[\"signal_duration\"].sum()\nax = _t.sort_values(ascending=True).plot(kind='barh', grid=True, \n                                      title=\"Total recording time for patients with \\n Dysrhythmia (1) and no Dysrhythmia (0), sec.\")\n# ax.set_yticklabels([\"MI\", \"Non-MI\"], rotation=0)\nfor p in ax.patches:\n    val = \"{:.1f}\".format(p.get_width())\n    ax.annotate(val, (p.get_x() + p.get_width(), p.get_y()), xytext=(5, 5), textcoords='offset points')","764eb641":"df.head()","a68233e5":"df.drop(labels=[\"Reason_for_admission\", \"signal_duration\"], axis=1, inplace=True)\ndf.to_csv(\"..\/working\/labels.csv\", index=False)","856ce708":"How many patients are diagnosed with particular diagnosis?","d9b9ebfa":"### Demographics","fc840f72":"### Dysrhythmia","56acf1b0":"Remove recordings for which diagnosis is not available","83c70aee":"For 159 users there is only 1 recording available, for 24 users there are 2 recordings available, etc.\n\nIf there are more than 1 recordings available for some users, are they marked with same diagnosis?","65691183":"### Myocardial infarction"}}