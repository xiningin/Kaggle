{"cell_type":{"7e5c0f20":"code","f49a3e29":"code","b26458af":"code","737a5fdb":"code","c628099f":"code","8f6b9238":"code","32342f71":"code","2c336f05":"code","2dccf49b":"code","033e8e5f":"code","59705c77":"markdown"},"source":{"7e5c0f20":"\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n","f49a3e29":"import category_encoders as ce\nimport matplotlib.pyplot as plt\n\nfrom sklearn.cluster import KMeans\n","b26458af":"data= pd.read_csv(\"..\/input\/ctrust\/ctrust.csv\")\ndata.head()","737a5fdb":"df = pd.DataFrame(data)\ndff= pd.DataFrame(data)\ndf['score'].replace({'untrustworthy':0,'trustworthy':1},inplace=True)\n\ndff = pd.DataFrame({\n    'context':[\"sport\", \"game\", \"Ecommerece\", \"holiday\", \"game\", \"sport\"], \n    'outcome':[1, 2, 3, 4, 2, 1]})\n\nX = dff.drop('outcome', axis = 1)\nY = dff.drop('context', axis = 1)\n\nce_one_hot= ce.OneHotEncoder(cols= 'context')\nce_one_hot.fit_transform(X,Y)\n\n\ndf['context'].replace({'sport':1,'game':2,'ECommerce':3,'holiday':4},inplace=True)\n\ndf.head()","c628099f":"# Basic data Analysis\nprint(df.info())\nprint(df.shape)\nprint(df.describe())\nprint(df[\"context\"].value_counts())","8f6b9238":"#plotting \nX=df.iloc[:,3]\nY=df.iloc[:,0]\nZ=df.iloc[:,1]\nA=df.iloc[:,2]\n\nplt.xlabel('Transaction context') \n\n\n#plt.scatter(X,Y)\nplt.ylabel('count trust')\nplt.scatter(X, Y)\n\n#plt.scatter(X,Z)\nplt.ylabel('count untrust')\nplt.scatter(X, Z)\n\n#plt.scatter(X,A)\nplt.ylabel('last time')\nplt.scatter(X, A)\n\ndf.head()","32342f71":"# let's check the shape of x\nx = df.iloc[:, [2, 3]].values\n\nprint(x.shape)","2c336f05":"\n# elbow method\nwcss = []\nfor i in range(1, 10):\n    km = KMeans(n_clusters = i, init = 'k-means++', max_iter = 300, n_init = 10, random_state = 0)\n    km.fit(x)\n    wcss.append(km.inertia_)\n    \nplt.plot(range(1, 10), wcss)\nplt.title('The Elbow Method', fontsize = 20)\nplt.xlabel('No. of Clusters')\nplt.ylabel('wcss')\nplt.show()","2dccf49b":"#Silhouette Method\n\nno_of_clusters = [2, 3, 4, 5, 6] \nprint(\"Average Silhouette Method\\n\")\nfor n_clusters in no_of_clusters: \n  \n    cluster = KMeans(n_clusters = n_clusters) \n    cluster_labels = cluster.fit_predict(X) \n  \n    # The silhouette_score gives the  \n    # average value for all the samples. \n    silhouette_avg = silhouette_score(X, cluster_labels) \n  \n    print(\"For no of clusters =\", n_clusters,\" The average silhouette_score is :\", silhouette_avg)\n","033e8e5f":"#KMeans Clustering\n\nkmean = KMeans(n_clusters=3, random_state=0).fit(X)\ny_kmeans = kmean.predict(X)\nlab = kmean.labels_\n#for i in range(1,10):\nplt.figure(figsize=(14,7))\nplt.title(\"KMeans Clustering on Destinations Rating\",fontsize=20)\nplt.scatter(X[:,0], X[:,1],c = y_kmeans, s=80, cmap='cividis',alpha=0.8,marker='H')\nplt.xlabel(\"X Axis Rating\")\nplt.ylabel(\"Y Axis Rating\")\nplt.show()","59705c77":"shows no null value or missing values"}}