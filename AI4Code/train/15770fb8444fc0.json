{"cell_type":{"cf8d65a0":"code","468949c6":"code","801c9417":"code","48550a2e":"code","7c20f4de":"code","f0b110a6":"code","fff21bb5":"code","8d09171d":"code","a422a858":"code","9a0996f8":"code","ac51901e":"code","c56d8958":"code","beabaa0e":"code","275f951b":"code","b1a21ec7":"code","5e38c929":"markdown"},"source":{"cf8d65a0":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","468949c6":"import gc\nimport os\nfrom pathlib import Path\nimport random\nimport sys\n\n\nfrom ipywidgets import interact, interactive, fixed, interact_manual\nfrom ipywidgets import widgets\nfrom IPython.display import display\nfrom tkinter import *\n\n\nfrom tqdm.notebook import tqdm\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\nfrom IPython.core.display import display, HTML\n\n# --- plotly ---\nfrom plotly import tools, subplots\nimport plotly.offline as py\npy.init_notebook_mode(connected=True)\nimport plotly.graph_objs as go\nimport plotly.express as px\nimport plotly.figure_factory as ff\n\n# --- models ---\nfrom sklearn import preprocessing\n\nfrom sklearn.model_selection import KFold\nimport lightgbm as lgb\nimport xgboost as xgb\nimport catboost as cb\n\n# --- setup ---\npd.set_option('max_columns', 50)\n\n\n#macro\nmonth_arr=['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December']\n","801c9417":"# get pandas dataframes\ncalendar = pd.read_csv('\/kaggle\/input\/m5-forecasting-accuracy\/calendar.csv')\nsell_prices = pd.read_csv('\/kaggle\/input\/m5-forecasting-accuracy\/sell_prices.csv')\nsales_train = pd.read_csv('\/kaggle\/input\/m5-forecasting-accuracy\/sales_train_validation.csv')","48550a2e":"submission = pd.read_csv('\/kaggle\/input\/m5-forecasting-accuracy\/sample_submission.csv')\nsubmission","7c20f4de":"d = ['d_' + str(i) for i in range(1802,1914)]\nsales_train_mlt = pd.melt(sales_train, id_vars=['item_id','dept_id','cat_id','store_id','state_id'], value_vars=d)\nsales_train_mlt = sales_train_mlt.rename(columns={'variable':'d', 'value':'sales'})\n\nsales_train_mlt=pd.merge(sales_train_mlt,calendar,how='inner',on=['d'])\n\n\n\nsell_prices=sell_prices.merge(sales_train_mlt,on=['wm_yr_wk','store_id','item_id'],how='inner')\n#sell_prices['net_selling_price']=sell_prices['sales']*sell_prices['sell_price']","f0b110a6":"sell_prices","fff21bb5":"sales_train_mlt=sales_train_mlt.fillna(-1)\nsales_train_event2=sales_train_mlt[sales_train_mlt['event_name_2']!=-1 ]\nsales_train_event1=sales_train_mlt[sales_train_mlt['event_name_1']!=-1 ]\nsales_train_event1","8d09171d":"#Lineplot analysis for every month (SELL PRICE)\nfeatures2_plot=['sales','sell_price','net_selling_price']\n\nsell_prices['date']=pd.to_datetime(sell_prices['date'])\nsell_prices.sell_price.astype('int32')\nprint(\"change the value of q for changing the month \\n change the value of p to select the feature\")\ndef f(p,q):\n  temp_df=pd.DataFrame()\n  #temp_df=sell_prices['sales']\n  temp_df1=sell_prices[sell_prices['month']==q]\n  #print(temp_df1)\n  v=['date',features2_plot[p-1]]\n  print(\"Feature Selected : \",features2_plot[p-1])\n  label='Avg '+features2_plot[p-1]+' by day'\n\n  temp_df1[v].set_index('date').resample(\"D\")['sales'].mean().plot(kind='line',figsize=(12,10),grid=True)\n  plt.xlabel(\"Days\")\n  plt.ylabel(label)\n    \ninteract(f,p=widgets.IntSlider(min=1,max=2,step=1),q=widgets.IntSlider(min=1,max=6,step=1))\n","a422a858":"\nsell_prices[['date','sales']].set_index('date').resample(\"D\")['sales'].mean().plot(kind='line',figsize=(12,10),grid=True,color='r')\nplt.title(\"Average sales accross 6 months\")\n","9a0996f8":"departments=sell_prices.dept_id.unique()\ncategories=sell_prices.cat_id.unique()\ncities=['California','Texas','Winsconsin']\nlocations=sell_prices.state_id.unique()\nstores=sell_prices.store_id.unique()\nfeatures2_plot=['dept_id','cat_id','state_id']\nprint(\"change the value of loc for shuffling locations  \\nchange the value of cat to toggle between the categories\")\ndef f(loc,cat,dept):\n  temp_df=sell_prices[sell_prices['state_id']==locations[loc]]\n  temp_df1=temp_df[temp_df['cat_id']==categories[cat]]\n  temp_df2=temp_df1[temp_df1['dept_id']==departments[dept]]\n\n  print(temp_df.shape,'   location selected : ',locations[loc])\n  print(temp_df1.shape,'    categories selected : ',categories[cat])\n  print(temp_df2.shape,' department selected : ',departments[dept])\n  label=\"Selling price across all \"+cities[loc]+\" under \"+categories[cat]+\" category \"+\" and the department is \" + departments[dept]\n  fig = plt.figure(figsize=(16,12))\n  ax = sns.lineplot(y=\"sales\", x=\"d\", data=temp_df2)\n  ax.set_title(label)\n  ax.set_xlabel('days(d_1802-d_1913)')\n  ax.set_ylabel('Sales ')\n    \ninteract(f,loc=widgets.IntSlider(min=0,max=len(locations)-1,step=1),cat=widgets.IntSlider(min=0,max=len(categories)-1,step=1),dept=widgets.IntSlider(min=0,max=len(departments)-1,step=1))\n","ac51901e":"#distribution plot analysis\n#1 sales distribution vs all stores in different locations\n#2 sales distribution vs all dept\nfeatures2_plot=['dept_id','cat_id','state_id']\nstores\nprint(\"To use the toggle bar(loc\/cat\/dept) set the stor to -1 and vice-versa\")\n\n\ndef f(loc,cat,dept,stor):\n  temp_df=pd.DataFrame()\n  temp_df=sell_prices[sell_prices['state_id']==locations[loc]]\n  temp_df1=temp_df[temp_df['cat_id']==categories[cat]]\n  temp_df2=temp_df1[temp_df1['dept_id']==departments[dept]]\n  temp_df3=sell_prices[sell_prices['store_id']==stores[stor]]\n\n  fig = plt.figure(figsize=(12,8))\n\n  if stor>-1:\n    print(\"Store Selected \",stores[stor])\n    label=\"Sales distributions of Store \"+stores[stor]\n    sns.distplot(temp_df3['sales'],rug=False, hist=True,kde=True,kde_kws={\"color\":\"black\"},hist_kws={\"color\":\"red\"})\n    plt.title(label)\n  else:\n    print('location selected : ',locations[loc])\n    print('categories selected : ',categories[cat])\n    print(' department selected : ',departments[dept])\n    label=\"Sales distributions across all \"+locations[loc]+\" under \"+categories[cat]+\" category \"+\" and the department is \" + departments[dept]\n    sns.distplot(temp_df2['sales'],rug=False, hist=True,kde=True,kde_kws={\"color\":\"black\"},hist_kws={\"color\":\"red\"})\n    plt.title(label)\n\n\ninteract(f,loc=widgets.IntSlider(min=0,max=len(locations)-1,step=1),\n         cat=widgets.IntSlider(min=0,max=len(categories)-1,step=1),\n         dept=widgets.IntSlider(min=0,max=len(departments)-1,step=1),\n         stor=widgets.IntSlider(min=-1,max=len(stores)-1))\n","c56d8958":"import plotly.express as px\nfig = px.sunburst(sell_prices, path=['state_id', 'store_id', 'cat_id'], values='sales')\nfig.show()","beabaa0e":"import plotly.express as px\nfig = px.sunburst(sell_prices, path=[ 'store_id', 'cat_id'], values='sales')\nfig.show()","275f951b":"sell_prices.nunique()","b1a21ec7":"sell_prices[sell_prices.weekday=='Sunday']","5e38c929":"# EDA "}}