{"cell_type":{"b24e69c0":"code","6570a313":"code","57175a89":"code","889b11e0":"code","4cdaddbb":"code","1fc004e6":"code","da6b2921":"code","cb621c16":"code","d3a92f75":"code","27199ddf":"code","357fa8c7":"code","efb25bba":"code","a5ce883c":"code","84836e2e":"code","0b649dee":"code","4d73369c":"code","e948fdfd":"code","1d8968ee":"code","832955f9":"markdown","e9d31fa2":"markdown","fb73b5a3":"markdown","f8edc32a":"markdown","aa190b22":"markdown","aa340f81":"markdown","a3dbc3b8":"markdown","63bec8fa":"markdown","db319c9c":"markdown","7539cd20":"markdown","704557a0":"markdown","b03dfec2":"markdown","0088a39f":"markdown","0cdd9cdd":"markdown","7729ef6b":"markdown","55289bbb":"markdown","93179984":"markdown","c9a70357":"markdown"},"source":{"b24e69c0":"'''import os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))'''","6570a313":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\n%matplotlib inline\nimport seaborn as sns\nimport tensorflow as tf","57175a89":"df_train = pd.read_csv(\"\/kaggle\/input\/digit-recognizer\/train.csv\") #..\/input\/digit-recognizer\/train.csv\ndf_test = pd.read_csv(\"\/kaggle\/input\/digit-recognizer\/test.csv\")\ndf_submission = pd.read_csv(\"\/kaggle\/input\/digit-recognizer\/sample_submission.csv\")","889b11e0":"df_submission","4cdaddbb":"display(\"Train File\", df_train.head())\ndisplay(\"Test File\", df_test.head())","1fc004e6":"print(\"Train File\", df_train.shape)\nprint(\"Test File\", df_test.shape)","da6b2921":"print(\"Train File\", df_train.isnull().any().sum())\nprint(\"Test File\", df_test.isnull().any().sum())","cb621c16":"display(\"Train File\", df_train.describe())\ndisplay(\"Test File\", df_test.describe())","d3a92f75":"sns.countplot(df_train['label'])","27199ddf":"y_train = df_train['label'].astype('float32')\nX_train = df_train.drop(['label'], axis=1).astype('int32')\nX_test = df_test.astype('float32')\nX_train.shape, y_train.shape, X_test.shape","357fa8c7":"X_train = X_train\/255\nX_test = X_test\/255","efb25bba":"X_train = X_train.values.reshape(-1,28,28,1)\nX_test = X_test.values.reshape(-1,28,28,1)\nX_train.shape , X_test.shape","a5ce883c":"from keras.utils.np_utils import to_categorical\ny_train = to_categorical(y_train, num_classes = 10)\ny_train.shape","84836e2e":"from sklearn.model_selection import train_test_split\nX_train, X_cv, y_train, y_cv = train_test_split(X_train, y_train, test_size = 0.1, random_state=42)","0b649dee":"from keras.layers import Input,InputLayer, Dense, Activation, ZeroPadding2D, BatchNormalization, Flatten, Conv2D\nfrom keras.layers import AveragePooling2D, MaxPooling2D, Dropout\nfrom keras.models import Sequential,Model\nfrom keras.optimizers import SGD\nfrom keras.callbacks import ModelCheckpoint,LearningRateScheduler\nimport keras\nfrom keras import backend as K","4d73369c":"# Building a CNN model\ninput_shape = (28,28,1)\nX_input = Input(input_shape)\n\n# layer 1\nx = Conv2D(64,(3,3),strides=(1,1),name='layer_conv1',padding='same')(X_input)\nx = BatchNormalization()(x)\nx = Activation('relu')(x)\nx = MaxPooling2D((2,2),name='maxPool1')(x)\n# layer 2\nx = Conv2D(32,(3,3),strides=(1,1),name='layer_conv2',padding='same')(x)\nx = BatchNormalization()(x)\nx = Activation('relu')(x)\nx = MaxPooling2D((2,2),name='maxPool2')(x)\n# layer 3\nx = Conv2D(32,(3,3),strides=(1,1),name='conv3',padding='same')(x)\nx = BatchNormalization()(x)\nx = Activation('relu')(x)\nx = MaxPooling2D((2,2), name='maxPool3')(x)\n# fc\nx = Flatten()(x)\nx = Dense(64,activation ='relu',name='fc0')(x)\nx = Dropout(0.25)(x)\nx = Dense(32,activation ='relu',name='fc1')(x)\nx = Dropout(0.25)(x)\nx = Dense(10,activation ='softmax',name='fc2')(x)\n\nconv_model = Model(inputs=X_input, outputs=x, name='Predict')\nconv_model.summary()","e948fdfd":"# Adam optimizer\nconv_model.compile(optimizer='adam',loss='categorical_crossentropy',metrics=['accuracy'])\nconv_model.fit(X_train, y_train, epochs=10, batch_size=100, validation_data=(X_cv,y_cv))","1d8968ee":"y_pred = conv_model.predict(X_test)\ny_pred = np.argmax(y_pred,axis=1)\nmy_submission = pd.DataFrame({'ImageId': list(range(1, len(y_pred)+1)), 'Label': y_pred})\nmy_submission.to_csv('submission.csv', index=False)","832955f9":"#### Shape of files","e9d31fa2":"# IMPORTING LIBRARIES","fb73b5a3":"#### Reshaping data(as images)","f8edc32a":"#### Model Preparation Libraries","aa190b22":"## -> GETTING VIEW OF SUBMISSION FILE","aa340f81":"#### Normalizing Data","a3dbc3b8":"#### Looking into data","63bec8fa":"#### Adam Optimizer (it converges more efficiently)","db319c9c":"#### Segregating Data","7539cd20":"#### One Hot Encoding","704557a0":"#### Predicting labels and saving in csv file","b03dfec2":"#### Model Layers","0088a39f":"# Preprocessing","0cdd9cdd":"#### Checking for NULL values","7729ef6b":"#### Data description","55289bbb":"# EDA","93179984":"# LOADING DATA","c9a70357":"#### Label plot"}}