{"cell_type":{"e60aff34":"code","581178c9":"code","e968bd2b":"code","034b0873":"code","bcb82584":"code","807dcddd":"code","732739ba":"code","cf18656e":"code","b26a730d":"code","8f6aa29b":"code","7c33132d":"markdown","f554de02":"markdown","1aa8ccd8":"markdown","3ddeeb2f":"markdown"},"source":{"e60aff34":"# define libs\nimport matplotlib.pyplot as plt                                    # visualization\nfrom mpl_toolkits.mplot3d import Axes3D \nfrom matplotlib import cm\nfrom matplotlib.ticker import LinearLocator, FormatStrFormatter\nfrom matplotlib.collections import PolyCollection\nfrom matplotlib.colors import colorConverter\nimport seaborn as sns    \nimport numpy as np # vector and matrizes\n\n%matplotlib inline\nsns.set()","581178c9":"class functions_pertinence:\n    \n        def __init__(self,):\n            \"\"\"\n            fun\u00e7\u00f5es de pertin\u00eancia\n            \"\"\"\n    \n        def triangular(self, a,m,b,x, max_degree=None):\n            \"\"\"\n            define pertinence y of the triangular function from x values\n            a - primeiro valor conjunto\n            m - valor mediano do conjunto\n            b - \u00faltimo valor do conjunto\n            x - valor a ser calculado\n            \"\"\"\n\n            if x <= a or x >= b:\n                return 0\n\n            if x == m and max_degree != None:\n                return max_degree\n\n            if x > a and x <= m:\n                return ((x-a)\/(m-a))\n\n            if x > m and x < b:\n                return ((b-x)\/(b-m))\n            \n        def trapezoidal(self, a,m,n,b,x,max_degree = None):\n            \"\"\"\n            define pertinence y of the trapezoidal function from x values\n            a - primeiro valor conjunto\n            m - primeiro valor com maximo valor de pertin\u00eancia\n            n - primeiro valor com maximo valor de pertin\u00eancia\n            b - \u00faltimo valor do conjunto\n            x - valor a ser calculado\n            \"\"\"\n                \n            if max_degree is None:\n                max_degree = 1\n\n            if x <= a or x >= b:\n                return 0\n            \n            if x >= m and x <= n:\n                return max_degree\n\n            if x > a and x < m:\n                return (x-a)\/(m-a)\n    \n            if x > n and x < b:\n                return (b-x)\/(b-n)\n        \n        def gaussiana(self, x, m,sigma,max_degree = None):\n            \"\"\"\n            define pertinence y of the trapezoidal function from x values\n            m: valor m\u00e9dio\n            sigma: siga\n            \n            x: valor a ser calculado\n            \"\"\"\n            return np.exp(-((x-m)**2)\/(sigma**2))\n            \n    \n            \n            ","e968bd2b":"# gerando a estrutura pra armazernar o conjunto fyzzye as principais opera\u00e7\u00f5es necess\u00e1rias para manipul\u00e7\u00e3o\nclass fuzzy:\n    \n    def __init__(self,size_set):\n        self.x = np.zeros(size_set)\n        self.y = np.zeros(size_set)\n        self.set = np.zeros((size_set,2))\n        self.size = size_set\n        self.calculo = functions_pertinence()\n        \n        \n    def set_x(self, conjunto):\n        \"\"\"\n        seta o conjunto passado ao conjunto x - dominio\n        \"\"\"\n        for i in range(self.x.shape[0]):\n            self.x[i] = conjunto[i]\n    \n    def merge(self,verbose=False):\n        \"\"\"\n        junta o conjunto x com y em um unico array\n        \"\"\"\n        for i in range(self.x.shape[0]):\n            self.set[i][0] = self.x[i]\n            self.set[i][1] = self.y[i]\n            \n        if verbose:\n            print(self.set)\n            \n    def set_y(self, conjunto):\n        \"\"\"\n        seta o conjunto passado ao conjunto y - pertinencias\n        \"\"\"\n        for i in range(self.y.shape[0]):\n            self.y[i] = conjunto[i]\n            \n        self.merge()\n        \n    \n    def triangular(self, a,m,b, max_degree=None):\n        \"\"\"\n        define o conjunto x com a func\u00e3o de pertin\u1ebdncia triangular\n        \"\"\"\n        for i in range(self.x.shape[0]):\n            self.y[i] = self.calculo.triangular(a,m,b,self.x[i])\n        self.merge()\n        \n    def trapezoidal(self, a,m,n,b, max_degree=None):\n        \"\"\"\n        define o conjunto x com a func\u00e3o de pertin\u00eancia trapezoidal\n        \"\"\"\n        for i in range(self.x.shape[0]):\n            self.y[i] = self.calculo.trapezoidal(a,m,n,b,self.x[i])\n        self.merge()\n    \n    def gaussiana(self, m,sigma=0.5, max_degree=None):\n        \"\"\"\n        define o conjunto x com a func\u00e3o de pertin\u00eancia trapezoidal\n        \"\"\"\n        \n        for i in range(self.x.shape[0]):\n            self.y[i] = self.calculo.gaussiana(self.x[i],m,sigma)\n        self.merge()\n    \n        \n    def get_y(self, x):\n        \"\"\"\n        obtem o valor da pertinencia do valor x passado - WARNING obter posi\u00e7\u00e3o do x\n        \"\"\"\n        for i in range(self.x.shape[0]):\n            if x == self.x[i]:\n                return self.y[i]\n        return 0\n        \n    \n    def view_set(self,):\n        print(self.set)","034b0873":"# visualiza\u00e7\u00e3o\ndef plot_sets(conjuntos, labels, title=None, position=None):\n    \"\"\"\n     - fun\u00e7\u00e3o para plotagem dos conjuntos 2d\n     -- plota os conjuntos em um mesmo plano\n    \"\"\"\n    \n    color = ['--bo','--go', '--ro', '--yo', '--po']\n    facecolors = [cm.jet(x) for x in np.random.rand(20)]\n    \n    fig, ax = plt.subplots(figsize=(8,5))\n\n    indice = 0\n    for i in conjuntos:\n            plt.plot(i[:,0], i[:,1], color[indice], label=labels[indice])\n            plt.fill_between(i[:,0], i[:,1], facecolors=facecolors[indice], alpha=0.4)\n            indice += 1 \n            \n    if position:\n        legend = ax.legend(loc=position, shadow=True, fontsize='x-large')\n    else:\n        legend = ax.legend(loc='upper left', shadow=True, fontsize='x-large')\n\n    # Put a nicer background color on the legend.\n    legend.get_frame().set_facecolor('#00FFCC')\n    plt.title(title)\n    plt.grid(True)","bcb82584":"# defini\u00e7\u00e3o dos conjuntos fuzzy - representa\u00e7\u00e3o por NUMPY ARRAY\nA = np.arange(1,12)\nB = np.arange(5,16)\n\n# A = np.arange(1,50)\n# B = np.arange( 55,100)\n\nprint('A', A)\nprint('B', B)","807dcddd":"# definindo meus conjuntos fuzzy\nvendas_baixa = fuzzy(A.size)\nvendas_media = fuzzy(B.size)","732739ba":"# setando o dom\u00ednio\nvendas_baixa.set_x(A)\nvendas_media.set_x(B)\nvendas_baixa.x","cf18656e":"# setando o dom\u00ednio\nvendas_baixa.triangular(a=A[0], m=A[5], b=A[len(A)-1])\nvendas_media.triangular(a=B[0], m=B[5], b=B[len(A)-1]) # trapezoidal\n\n# visualizando os conjuntos\nplot_sets(np.array([vendas_baixa.set,vendas_media.set]), ['Baixa', 'M\u00e9dia'], ' Vendas')","b26a730d":"\nvendas_baixa.trapezoidal(a=A[0], m=A[3], n=A[7],b=A[len(A)-1])\nvendas_media.trapezoidal(a=B[0], m=B[3], n=B[7], b=B[len(A)-1]) # trapezoidal\nplot_sets(np.array([vendas_baixa.set,vendas_media.set]), ['Baixa', 'M\u00e9dia'], 'Vendas')","8f6aa29b":"vendas_baixa.gaussiana(m=A[int(len(A)\/2)], sigma=0.1)\nvendas_media.gaussiana(m=B[int(len(B)\/2)]) \nplot_sets(np.array([vendas_baixa.set,vendas_media.set]), ['Baixa', 'M\u00e9dia'], 'Vendas')","7c33132d":"## Triangular","f554de02":"## Pertinence Funtions\n * Triangular\n * Trapezoidal\n * Gaussiana\n","1aa8ccd8":"## Trapezoidal","3ddeeb2f":"## Gaussiana"}}