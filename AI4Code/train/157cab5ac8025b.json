{"cell_type":{"97901076":"code","b89f75ec":"code","bd58a5aa":"code","40babf78":"code","19de6de7":"code","b9322783":"code","568f6d8f":"code","4604d53c":"code","db5624ac":"code","0757e269":"code","d8e61470":"code","803ba75c":"code","360d867e":"code","7e472985":"code","64ce7a1f":"code","f4ef2db6":"code","f15b58f7":"code","3f466520":"code","6226f71e":"code","187e9683":"code","45fead59":"code","3df9362e":"code","490b7d31":"code","ae164aa6":"code","62a1deab":"code","759e93f7":"code","0092d35b":"code","d066f141":"code","c24119cc":"code","5c28d52c":"code","573e55e7":"code","e4519924":"code","e3a0a6f8":"code","449c8f9a":"code","9f5f4bc7":"markdown","05eed7c6":"markdown","49068a9b":"markdown","76b319ce":"markdown","3bf8a6b1":"markdown","79464b8e":"markdown","7fd123f0":"markdown","c870ec2d":"markdown","07132c76":"markdown","2ffd0d3a":"markdown","5428c23c":"markdown","2d295542":"markdown","2c36f7fc":"markdown","6cf03c62":"markdown"},"source":{"97901076":"%run '~\/code\/py\/life.py'","b89f75ec":"%history # Gives history of commands run in notebook","bd58a5aa":"s1 = 'Vaibhav'\nprint (s1[4])   # prints char at 4th index\nprint (s1[:4])  # prints chars before 4th index, 4th index excluded.\n\n# Same for -ve index\nprint (s1[-2])   # prints char at 2nd last index\nprint (s1[:-2])  # prints chars before 2nd last index, 2nd last index excluded.\n\nprint ( len(s1) ) # prints length, number of characters in string.\n\nstr.upper(s1)    # same as below \ns1.upper()       # same as above\n\nstrList = list(s1) # converts to list data type, array of each char in string\nprint (strList)\n\n# Formatting\nmyFormat = '%.2f %% this as fraction, and string %s and value INR%d'\nmyFormat %(2,1,4.8) # takes 3 args, convers and prints as per definition.\n\n","40babf78":"# find in string\n'bh' in s1","19de6de7":"type(float('23'))","b9322783":"my_list = [1,2,3,'hi',[2,3,4]]\n# mix data type list\n# list is collection of objects\nprint (my_list)\n\nmy_dict = {'k1':'v1' , 'k2':'v2'}\n# Key value pair\nprint (my_dict)\n\n\nmy_tuple = (1,2,3)\n# tuples are fixed values and cannot be assigned\nprint (my_tuple)\n\nmy_set = {1,2,3,1,2,1,2,1,2,1,2,1,3}\n# set can have only unique values\n# for above result is only 1,2,3\nprint (my_set)","568f6d8f":"a_list = ['amit', 'pranav', 'ramesh', 123, 22.4]\na_list.append(5)\nprint (a_list)\n\na_list.reverse() # reverses in place, returns nothing\nprint (a_list)\n\n# a_list.sort()\nprint (a_list)\n","4604d53c":"sorted('hello World 4')","db5624ac":"sqr = [x**2 for x in range(5)] # This gives list with squares of numbers 0 to 4\nprint (sqr)","0757e269":"# With Condition\ninput_list = [1,2,3,4,5,6,7,8,9,8,7,56,4,32]\neven = [var for var in input_list if var % 2 == 0]\nprint (even)","d8e61470":"# list comp dict\n\nstate = ['Gujarat', 'Maharashtra', 'Rajasthan'] \ncapital = ['Gandhinagar', 'Mumbai', 'Jaipur'] \n  \ndict_using_comp = {key:value for (key, value) in zip(state, capital)} \n  \nprint(dict_using_comp) ","803ba75c":"def my_sqr(num):\n  return num**2\n\nseq = [1,2,3,4,5]\n\nmap(my_sqr,seq) # It computes my_sqr for all items in seq.","360d867e":"lambda num: num*2\nmap(lambda num: num*2, range(1,5)) # square for list","7e472985":"map(lambda x, y: x + y,[1,20],[4,50])","64ce7a1f":"filter(lambda num: num%2 == 0,seq)","f4ef2db6":"my_dict = {\n    'k1': 'value1',\n    'k2': 'value2',\n    'k3': 'value3'\n}\nmy_dict.items() # returns list of tuples\n\nprint (type(my_dict))               # Dict is list of tuples of strings\nprint (my_dict.items())             # list of tuples of strings\nprint (type(my_dict.items()))\n# print (type(my_dict.items()[0]))    # tuple of strings\n# print (type(my_dict.items()[0][1])) # String","f15b58f7":"sorted(my_dict.values(), reverse=True)","3f466520":"def my_square(num):\n  \"\"\"\n  This is DocString, shows up in help using ? or shift tab.\n  Can be multiline\n  This func squares a number\n  \"\"\"\n  return num**2\n\nmy_square(4)","6226f71e":"def my_sum(a=5, b=4, *args, **kwargs):\n    print ('Arguments passed:', args)\n    print ('Key With Args passed', kwargs)\n    sum = a + b\n    for n in args:\n        sum += n\n    return sum\n\nmy_sum(2, 4, 3, 1, key0='val0', key1='val1')","187e9683":"bool(1.2) #returns boolean or not","45fead59":"x=2\nx**4 # to the power of","3df9362e":"True and not False # keywords and not","490b7d31":"type(chr(97) ) # keywork chr","ae164aa6":"sum(range(0,10)) # last, that is 10th index, is not included","62a1deab":"%echo \"hello world\" > new.txt\nhandle = open('.\/new.txt', 'r')\n\nfor line in handle:\n    print (line)\nhandle.close()","759e93f7":"type(handle)","0092d35b":"handle.name","d066f141":"handle.mode","c24119cc":"new_file = open('new.txt', 'w')","5c28d52c":"new_file.write('some text')","573e55e7":"new_file.close()","e4519924":"%cat new.txt","e3a0a6f8":"def average( numList ):\n    # Raises TypeError or ZeroDivisionError exceptions.\n    sum= 0\n    for v in numList:\n        sum = sum + v\n    return float(sum)\/len(numList)\n\ndef averageReport( numList ):\n    try:\n        print (\"Start averageReport\")\n        m = average(numList)\n        print (\"Average = \", m)\n    except (TypeError, ex):\n        print (\"TypeError: \", ex)\n    except (ZeroDivisionError, ex):\n        print (\"ZeroDivisionError: \", ex)\n    finally:\n         print (\"Finish block always runs\")\n\nlist1 = [10,20,30,40]\nlist2 = []\nlist3 = [10,20,30,'abc']\n\naverageReport(list1)","449c8f9a":"state = ['Gujarat', 'Maharashtra', 'Rajasthan'] \ncapital = ['Gandhinagar', 'Mumbai', 'Jaipur'] \n  \noutput_dict = {} \n  \n# Using loop for constructing output dictionary \nzip(state, capital)","9f5f4bc7":"## Functions\n- The are also called methods, property.\n- `def` is used to define a new function.\n- Similar to java, except it can accept any number of arguments with or without keys.\n- eg, `def my_func(a=5, *numbers, **keywords):`","05eed7c6":"## Strings\n- A built in class `str` has many string related functions.\n- Any String is by default a list of characters.\n- String can be sliced using [:] operator. Starts from 0 and -1 from end. Also works in list or array.\n- Operator `+` for concatenation and `*` for repetition.\n- We can call `str.function(my_string)` or `my_string.function(args)`\n- `len(s1)` length of string\n- `in` operator can be used to find an object in list, char in string.","49068a9b":"## Data Structures\n\nPython's in built data sets are list, dict, tuple and sets.\n- All DS can be accessed using [] and index.\n- Index starts from 0 and end is not included.\n- [0:3] gives 0,1,2 and not 3\n- [0:-2] all but last two.","76b319ce":"## File Operations\n- `open` passes filename and mode to open file.","3bf8a6b1":"#### Map\n- Map is used to apply a function to all elements in a list.\n- eg, `map(fun, iter)`\n- like, map this function on this list. map my_square on my_numbers.","79464b8e":"#### Lambda\n- This is used to define a function in a line.\n- `lambda args: expression` - this means passing variable : return statement.\n- Useful for use in map.","7fd123f0":"### Dictionary\n- A built in data structure\n- Consists of key-value pair\n- Key can be anything but mostly num or string\n- values can be any object\n- declared using {} and :\n- accessed using key in []","c870ec2d":"### Lists\n- List is a built in data structure.\n- It can hold list of any object.\n- Can have mixed data types.\n- Can hold list in list.\n- declared in [], separated by ,\n- it is similar to array, index works from 0 and -1 from end\n- \\* to repeat, + to concatenate, it combines lists to single list.\n- has functions like, `append(), pop(), remove(), index()` etc.","07132c76":"**Exception Handling**\n- use `try except finally` block to handle exceptions.","2ffd0d3a":"**Run external commands**\n\n% can be used to run linux commands from notebook. It is called magic commands. For eg, `%mkdir, %ls, %pwd` etc.","5428c23c":"# Python - Introduciton\n\nPython is a high level, interpretable language.\n\n**Keywords**\n- `in` operator, returns boolean, can be used to find an object in list. For eg, char in string.\n- `True` and `False` are constants to hold boolean values.\n- `not and or` used for boolean operations.\n- `if elif else` conditional statements.\n- `map() lambda apply` used to define functions and apply it to a list.\n- `for range break continue while with` iterating words.\n- `file open() close()` used for file handling.\n- `try except finally` used for exception handling.\n- **Note:** We can use `else` with `for`. eg, for this, do this, else this.\n\n**Data Types**\n- `str()` string class, has many string methods, also converts other data type to string.\n- `int()` integer data type class, also converts variable passed to integer.\n- `float()` float class, has functions to work on decimal numbers.\n- `chr()` converts integer to string.\n- `bool()` boolean class, converts to boolean.\n\n**In Built Data Structures**\n- `list()` class for DS list or array. has many functions related to list operations. Defined in [,]\n- `dict()` class for DS dictionaries, has functions like .keys, .values etc. Defined in {:,}\n- `tuple()` class for DS tuple, has function index and count.Value cannot be changed. Defined in (,).\n- `set()` class for DS set. Has unique values. Defined in {,}.\n- [NumPy](numpy-notes\/) and [Pandas](padas-notes\/) are external packages that offers other data structures to work on large datasets.\n\n**General Functions**\n\nFollowing fuctions can be directly called in python:\n- `type()` method, returns string, type of a variable.\n- `len()` method, returns int, length of object passed. For eg, `len(s1)` length of string\n- `max()` and `min()` works on list, string etc.\n- `sum()` adds numbers in list.\n- `zip()` combines lists element to element into a tuple. [(x1,y1),(x2,y2)]\n- `sorted()` sorts any list using a key. default is alpanum.\n- `file()` is a class for file operations. Obejct created when we open.\n\n","2d295542":"**Modules**\n- python code file having functions\n- can be imported in another files.\n- `import filename as alias` to use module.\n","2c36f7fc":"#### Filters\n- Filter is used to filter items in list based on function\/lambda\n- eg: to get even values `filter(lambda num: num%2 == 0,seq)`","6cf03c62":"#### List Comprehension\n- A way to define list in one line.\n- Similar to the way we define sets in maths, eg, x such that x = x*2.\n- use [] for list\n- use {} for dict or set\n- use () for generators, this does not allocate memory at once. Hence, memory efficient."}}