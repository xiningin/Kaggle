{"cell_type":{"6a49a24e":"code","8893b28a":"code","26a10a55":"code","a0f64a6e":"code","423a8608":"code","d879b843":"code","b046b8fd":"markdown","d9f666f1":"markdown","bf40a74b":"markdown","f64a96cb":"markdown","6978d907":"markdown","049c50b6":"markdown","31b72f6d":"markdown"},"source":{"6a49a24e":"import os\n\nimport numpy as np\nimport matplotlib.pyplot as plt\n\nfrom tensorflow import keras\nfrom tensorflow.keras import layers, preprocessing, optimizers\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","8893b28a":"main_dir = \"..\/input\/brain-tumor-classification-mri\/\"\nclassification_dirs = [(\"no_tumor\",), (\"meningioma_tumor\",)]\nresolution = 64\n\ndef load_images(root_dir_name):\n    x = []\n    y = []\n    \n    for label, sub_dir_names in enumerate(classification_dirs):\n        for sub_dir_name in sub_dir_names:\n            print(f\"loading {root_dir_name} {sub_dir_name}\")\n            sub_dir_path = os.path.join(main_dir, root_dir_name, sub_dir_name)\n            for image_name in os.listdir(sub_dir_path):\n                image_path = os.path.join(sub_dir_path, image_name)\n                image = preprocessing.image.load_img(image_path, color_mode=\"grayscale\", target_size=(resolution, resolution))\n                x.append(preprocessing.image.img_to_array(image))\n                y.append(label)\n    \n    x = np.array(x) \/ 255.0\n    y = np.array(y)\n    \n    return x, y\n\nx_train, y_train = load_images(\"Training\")\nx_test, y_test = load_images(\"Testing\")\n\nprint(\"done loading!\")\nprint(\"\\nshapes:\")\nprint(x_train.shape)\nprint(x_test.shape)","26a10a55":"c = 8\n\nfig, subplots = plt.subplots(1, c)\nfig.set_size_inches(25, 3)\nfor i in range(c):\n    n = np.random.randint(0, len(x_test))\n    num = y_test[n]\n    word = \"out\" if num == 0 else \"\"\n    \n    subplots[i].imshow(x_test[n].reshape((resolution, resolution)), cmap=\"gray\")\n    subplots[i].set_title(f\"brain with{word} tumor: {num}\")\n    subplots[i].axis(\"off\")\nplt.show()","a0f64a6e":"model = keras.Sequential([\n    layers.Input((resolution, resolution, 1)),\n    layers.Conv2D(32, (3, 3), activation=\"linear\", padding=\"same\"),\n    layers.MaxPooling2D(2, 2), # 32 x 32\n    layers.Conv2D(64, (3, 3), activation=\"linear\", padding=\"same\"),\n    layers.MaxPooling2D(2, 2), # 16 x 16\n    layers.Conv2D(128, (3, 3), activation=\"linear\", padding=\"same\"),\n    layers.MaxPooling2D(2, 2), # 8 x 8\n    layers.Conv2D(32, (3, 3), activation=\"linear\", padding=\"same\"),\n    layers.MaxPooling2D(2, 2), # 4 x 4\n    layers.Flatten(),\n    layers.Dropout(0.5),\n    layers.Dense(256, activation=\"linear\"), # 128 and 256 got 94% after 15 epochs\n    layers.Dense(1, activation=\"sigmoid\")\n])\n\nmodel.compile(loss=\"binary_crossentropy\", optimizer=optimizers.RMSprop(), metrics=[\"accuracy\"])\nmodel.summary()","423a8608":"history = model.fit(x_train, y_train, batch_size=4, shuffle=True, epochs=15, validation_data=(x_test, y_test))","d879b843":"y_test_results = model.predict([x_test])\n\nc = 8\n\nfig, subplots = plt.subplots(1, c)\nfig.set_size_inches(25, 3)\nfor i in range(c):\n    n = np.random.randint(0, len(x_test))\n    guess = str(round(y_test_results[n][0], 2)).ljust(4, \"0\")\n    actual = y_test[n]\n\n    subplot = subplots[i]\n    subplot.imshow(x_test[n].reshape((resolution, resolution)), cmap=\"gray\")\n    subplot.set_title(f\"guess: {guess}, actual: {actual}\")\n    subplot.axis(\"off\")\nplt.show()","b046b8fd":"## Model Fitting","d9f666f1":"# Meningioma (Brain Tumor) MRI Identification\n\nThis convolutional neural network distinguishes between MRI scans of healthy brains and brains with meningiomas with roughly 99% accuracy.","bf40a74b":"## Imports","f64a96cb":"## Data Visualization","6978d907":"## File Processing\n\nAll the images are loaded and resized to a 64x64 resolution.","049c50b6":"## Model Definition","31b72f6d":"## Model Testing\n\nLet's see if it actually works on unseen data."}}