{"cell_type":{"0185aed4":"code","f9e7ba97":"code","b4478589":"code","1a6854f9":"code","ab2643d2":"code","1b563cf7":"code","afe3ba45":"code","ddb3f6a7":"code","237c1a25":"code","39d91b55":"code","e34458d7":"code","3c709976":"code","adaf6ded":"code","45d4b2b4":"code","b658a7c6":"code","6ad3efbb":"code","9718cbd8":"code","129b1aea":"code","55e28a21":"code","af7e282a":"code","97ba389b":"code","7e16c160":"code","4b514cc4":"code","6c440726":"code","a6d73268":"code","bd5aa82f":"code","d275a7e7":"code","65e2ba96":"code","fc65ea36":"code","ceaea6da":"code","37e35c99":"code","bfcab0c1":"code","dabfb3bf":"code","a2ea1327":"code","a2ec1cef":"code","6d46bb6c":"code","55a2ce90":"code","f930aa1f":"code","aebefc82":"code","0b4cbdcd":"code","421ec5f1":"code","dabc7cee":"code","cfbce470":"code","ed47529e":"code","f60510a3":"code","e66239d9":"code","1aebbeca":"code","dac43627":"code","4fb49caf":"code","96abfda8":"code","89f9945d":"code","b6213ed1":"code","79a62c2b":"code","595750eb":"code","e34a11f8":"code","8c4b2fdb":"code","1b7bcaaa":"code","d06da5ca":"code","fb8322e5":"code","211a337a":"markdown","fcbf48cd":"markdown","8fadb3a0":"markdown","0c9e5228":"markdown","96daf401":"markdown","94955a43":"markdown","41a8eda4":"markdown","5016c9e8":"markdown","a49c98a7":"markdown","0b23d7c2":"markdown","1069ffbe":"markdown","148cc5dd":"markdown","c5dbe6f8":"markdown","cc983ce3":"markdown","e9ef4d0d":"markdown"},"source":{"0185aed4":"import numpy as np\narray_01 = np.array([1,2,5,4,4,5,8])\nprint(array_01)","f9e7ba97":"array_zeros = np.zeros((2,2))\nprint(array_zeros)","b4478589":"array_ones = np.ones((3,3))\narray_ones","1a6854f9":"array_empty = np.empty((2,3))\narray_empty","ab2643d2":"np_arange = np.arange(12)\nnp_arange","1b563cf7":"np_arange.reshape((3,4)) #arranges the array in the given matrix","afe3ba45":"np_linspace = np.linspace(1,10,11) # linespaced array, 11 equally spaced numbers between 1 and 10\nnp_linspace","ddb3f6a7":"oneD_array = np.arange(15)  # One Dimensional Array\nprint(oneD_array)","237c1a25":"twoD_array = oneD_array.reshape(5,3) # Two Dimensional array\nprint(twoD_array)","39d91b55":"# Three Dimensional Array\nthreeD_array = np.arange(27).reshape(3,3,3)\nprint(threeD_array)","e34458d7":"type(np)","3c709976":"np_city = np.array(['NYC', 'LA', 'Boston'])\nnp_city.ndim # .ndim attribute is used here to find the dimension of the array","adaf6ded":"np_city2d = np.array([['NYC', 'LA', 'Boston'],[1,2,3]])\nprint(\"Dimensions of the 'np_city2d' array are \" + str(np_city2d.ndim))\n","45d4b2b4":"np_city.shape # .shape attribute is used here to find the rows and columns of the array,\n              # here, 3 columns and rank 1, as only one row ","b658a7c6":"rows, columns = np_city2d.shape\nprint(\"Rows are {} & Columns are {}\".format(rows,columns))\n","6ad3efbb":"np_city.size # .size attribute is used to determine the number of elements","9718cbd8":"np_city2d.size # 2 rows & 3 columns makes 6 elements","129b1aea":"np_city.dtype # here, U means unicode string","55e28a21":"np_city2d.dtype # 6 is the largest length of an element present in the array","af7e282a":"first_trial = np.array([10, 15, 17, 26])\nsecond_trial = np.array([12, 11, 21, 24])","97ba389b":"# ADDITION\ntrial_add = first_trial + second_trial # Vector Addition OR Element Wise Addition\ntrial_add\n#np.add(25,15)","7e16c160":"# SUBTRACTION\ntrial_sub = first_trial - second_trial\ntrial_sub\n#np.subtract(15,10)","4b514cc4":"# MULTIPLICATION\nnp_daily_wage = np.array([2,3,4,5,6])*10\nprint(np_daily_wage)\nmul = first_trial*second_trial\nprint(mul)","6c440726":"np_weekly_hrs = np.array([23,41,55,47,38])\nnp_weekly_hrs[np_weekly_hrs>40] # > < >= <= !=","a6d73268":"np.logical_and(np_weekly_hrs>20,np_weekly_hrs<50)","bd5aa82f":"np.logical_not(np_weekly_hrs>35)","d275a7e7":"runner_trials = np.array([\n    [10, 15, 17, 26],\n    [12, 11, 21, 24]\n])","65e2ba96":"first_trial = runner_trials[0] #axis 0\nfirst_trial","fc65ea36":"second_trial = runner_trials[1] #axis 1\nsecond_trial","ceaea6da":"first_runner_first_trial = runner_trials[0][0]  # rows,colunn [0,0]\nfirst_runner_first_trial","37e35c99":"first_runner_second_trial = runner_trials[1,0] \nfirst_runner_second_trial","bfcab0c1":"first_runner_all_trials = runner_trials[:,0] # use ':' to select all the rows\nfirst_runner_all_trials","dabfb3bf":"runner_trials.shape","a2ea1327":"two_runner_trial_data = runner_trials[:,1:3]\ntwo_runner_trial_data","a2ec1cef":"for iterate_var in runner_trials:\n    print(iterate_var)","6d46bb6c":"for iterate_var in two_runner_trial_data:\n    print(iterate_var)","55a2ce90":"test_scores = np.array([\n    [83,71,57,63],\n    [54,68,81,45]\n])","f930aa1f":"passing_scores = test_scores>60\npassing_scores","aebefc82":"test_scores[passing_scores]","0b4cbdcd":"np_sqrt = np.sqrt([2,4,6,9]) # To perform sqrt of the array elements\nnp_sqrt","421ec5f1":"np.cos(0) # To perform cosine function on the elements ","dabc7cee":"np.cos([0,1,2,3])","cfbce470":"from numpy import pi","ed47529e":"np.sin(pi\/2)","f60510a3":"np.floor([1.2,1.5,1.6,0.2,2.5,2.8,0,-0.1,-0.6,-1.2,-1.8]) # Performs floor, returns largest integer value of the array elements","e66239d9":"np.exp([0,1,5]) # Returns e^x, where x is the array element","1aebbeca":"np.eye(6) # Identity Matrix","dac43627":"np.random.rand(4,3) # Random distribution between 0 and 1","4fb49caf":"np.random.randn(8) # Standard Normal Distribution","96abfda8":"np.random.randn(5,3)","89f9945d":"np.random.randint(0,101,10) # 10 Random integers between 0 and 101","b6213ed1":"np.random.randint(0,101,(4,5)) # A martrix with 4x5 random elements lying between 0 and 101","79a62c2b":"np.random.seed(42) # same set of random numbers \nnp.random.rand(6)","595750eb":"np.random.seed(42) \nnp.random.rand(6)","e34a11f8":"np.random.seed(101)\nnp.random.rand(6)","8c4b2fdb":"ran_arr = np.random.randint(0,101,10)","1b7bcaaa":"ran_arr","d06da5ca":"ran_arr.max() # Maximum valued element, min for minimum","fb8322e5":"ran_arr.argmax() # Index ","211a337a":"<br><b> MATHEMATICAL OPERATIONS <\/b>","fcbf48cd":"<i><b>Classes and Attributes of ndarray<\/i><\/b><br><br>\n<p><b>ndarray.ndim<\/b>\n    number of axis or dimension of the array\n<br><b>ndarray.shape<\/b>\n    describes the structure of the array, n rows and m columns, results a tuple     of (n,m)\n<br><b>ndarray.size<\/b>\n    number of elements present in the array, rows*columns\n<br><b>ndarray.dtype<\/b>\n    object that describes the type of elements in the array, \n    numpy also provides its own datatype (numpy.int32 | numpy.int16  | numpy.float64)\n    or use specified python datatypes<\/p>","8fadb3a0":"<br><b>COMPARISION OPERATIONS<\/b>","0c9e5228":"<b><i>Types of DataTypes in NumPy and Key Letters<\/b><\/i><br>\ni - integer<br>\nb - boolean<br>\nu - unsigned integer<br>\nf - float<br>\nc - complex float<br>\nm - timedelta<br>\nM - datetime<br>\nO - object<br>\nS - string<br>\nU - unicode string<br>\nV - fixed chunk of memory for other type ( void )","96daf401":"<br><br><b>ACCESSING ARRAY ELEMENTS<\/b>\n<br><br>\n<b>Indexing<\/b> ","94955a43":"Send 'passing scores' as an argument to 'test scores' object for valuable information","41a8eda4":"In above code, all rows are being selected and then sliced from 1:3,<br>\nthat is 2nd and 3rd elements of every row","5016c9e8":"<br><b>Slicing<\/b>","a49c98a7":"<br><b>LOGICAL OPERATIONS<\/b>","0b23d7c2":"<br><b>Indexing with Boolean Arrays<\/b> ","1069ffbe":"<i><b>Basic Operations on NumPy Array<\/i><\/b><br>\nMathematical Operations<br>\nLogical Operations<br>\nComparison Operstions","148cc5dd":"<br><b>Iteration<\/b>","c5dbe6f8":"<b> <center> NumPy (NUMerical PYthon) <\/center> <\/b>","cc983ce3":"Above code snippet sets and checks a condition (Boolean result) ","e9ef4d0d":"<br><b> UNIVERSAL FUNCTIONS <\/b>"}}