{"cell_type":{"73ef773b":"code","44a5fead":"code","45df2c93":"code","7e96cc3d":"code","cd0d545e":"code","575d9938":"code","5aa7411a":"code","6e72ce71":"code","c7f96d03":"code","89b6b254":"code","e6c5bcb6":"code","7447670f":"code","7978b766":"code","56ccf39e":"code","c6561afd":"code","38a66f1c":"code","6b8f8ce8":"code","afe1c456":"code","253d382c":"code","6f5a821f":"code","ae7936f3":"code","4f3aee6f":"code","d6e35cc1":"code","f8fe1e0c":"code","6d5d30b3":"code","2dfbbee4":"code","f6700021":"code","578c6cc5":"code","6a1448d2":"code","b5692be4":"code","c052186d":"code","37dab80c":"code","08fc32d8":"code","747c8cb0":"markdown","70686c14":"markdown","2c3875dd":"markdown","2a7027f0":"markdown","79cf8eaf":"markdown","2e8bbb88":"markdown","87a8532e":"markdown","958e16ed":"markdown","a4e247c7":"markdown","a58919dd":"markdown","727b7d5e":"markdown","38f19fa5":"markdown","af50a84c":"markdown","3f4fa31c":"markdown","54f547c7":"markdown","f01fe2d0":"markdown","4a9ccae9":"markdown","f2ffc2c5":"markdown","08ee1e8c":"markdown"},"source":{"73ef773b":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","44a5fead":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n%matplotlib inline","45df2c93":"# Combine all the csv files\n\n#all the 2019 csv files\n\ncsv_list = ['..\/input\/ford-go-bikey\/files\/201901-fordgobike-tripdata.csv', '..\/input\/ford-go-bikey\/files\/201902-fordgobike-tripdata.csv', \n             '..\/input\/ford-go-bikey\/files\/201903-fordgobike-tripdata.csv', '..\/input\/ford-go-bikey\/files\/201904-fordgobike-tripdata.csv',\n             '..\/input\/ford-go-bikey\/files\/201905-baywheels-tripdata.csv', '..\/input\/ford-go-bikey\/files\/201906-baywheels-tripdata.csv', \n             '..\/input\/ford-go-bikey\/files\/201907-baywheels-tripdata.csv', '..\/input\/ford-go-bikey\/files\/201908-baywheels-tripdata.csv', \n             '..\/input\/ford-go-bikey\/files\/201909-baywheels-tripdata.csv', '..\/input\/ford-go-bikey\/files\/201910-baywheels-tripdata.csv', \n             '..\/input\/ford-go-bikey\/files\/201911-baywheels-tripdata.csv', '..\/input\/ford-go-bikey\/files\/201912-baywheels-tripdata.csv']\n\ndf_list = []\n\n#append all the csvs\nfor filename in csv_list:\n    df_list.append(pd.read_csv(filename))\n    \n        \ngobike_df = pd.concat(df_list)","7e96cc3d":"gobike_df","cd0d545e":"gobike_df.info()","575d9938":"# Check for nulls\ngobike_df.info(verbose=True, null_counts=True)","5aa7411a":"gobike_df\n","6e72ce71":"# Check for duplicates\ngobike_df.duplicated().sum()","c7f96d03":"#Check for nulls\ngobike_df.isna().sum()","89b6b254":"# drop unnecessary columns\ngobike_df.drop(['bike_share_for_all_trip', 'rental_access_method'], axis=1, inplace = True)\n","e6c5bcb6":"# drop nulls\ngobike_df.dropna(axis = 0, how = 'any', inplace = True)","7447670f":"# Change datatypes\ngobike_df['start_time'] = pd.to_datetime(gobike_df['start_time'])\ngobike_df['end_time'] = pd.to_datetime(gobike_df['end_time'])","7978b766":"# Get month \n\ngobike_df['month'] = gobike_df['start_time'].dt.strftime('%B')\n\ngobike_df.head()","56ccf39e":"# get day of week\ngobike_df['day'] = gobike_df['start_time'].dt.day_name()","c6561afd":"# Change start_station_name, end_station_name and user_types columns categorical data type\n\n#get the places\nstart_classes = gobike_df.loc[:, 'start_station_name']\nend_classes = gobike_df.loc[:, 'end_station_name']\nmonth_classes = gobike_df.loc[:, 'month']\nday_classes = gobike_df.loc[:, 'day']\n\n#eliminate any duplicates\nstart_classes = list(dict.fromkeys(start_classes))\nstart_classes = np.array(start_classes)\n\nmonth_classes = list(dict.fromkeys(month_classes))\nmonth_classes = np.array(month_classes)\n\nday_classes = list(dict.fromkeys(day_classes))\nday_classes = np.array(day_classes)\n\nend_classes = list(dict.fromkeys(end_classes))\nend_classes = np.array(end_classes)\n\nuser_classes = ['Customer', 'Subscriber']\n","38a66f1c":"# change the data type\npd_ver = pd.__version__.split(\".\")\nif (int(pd_ver[0]) > 0) or (int(pd_ver[1]) >= 21): # v0.21 or later\n    sclasses = pd.api.types.CategoricalDtype(ordered = False, categories = start_classes)\n    gobike_df['start_station_name'] = gobike_df['start_station_name'].astype(sclasses)\n    \n    eclasses = pd.api.types.CategoricalDtype(ordered = False, categories = end_classes)\n    gobike_df['end_station_name'] =  gobike_df['end_station_name'].astype(eclasses)\n    \n    uclasses = pd.api.types.CategoricalDtype(ordered = False, categories = user_classes)\n    gobike_df['user_type'] = gobike_df['user_type'].astype(uclasses)\n    \n    dclasses = pd.api.types.CategoricalDtype(ordered = False, categories = day_classes)\n    gobike_df['day'] = gobike_df['day'].astype(dclasses)\n    \n    mclasses = pd.api.types.CategoricalDtype(ordered = False, categories = month_classes)\n    gobike_df['month'] = gobike_df['month'].astype(mclasses)\nelse: # pre-v0.21\n    gobike_df['start_station_name'] = gobike_df['start_station_name'].astype('category', \n                                                                ordered = False, categories = sclasses)\n    gobike_df['end_station_name'] = gobike_df['end_station_name'].astype('category', \n                                                                ordered = False, categories = eclasses)\n    gobike_df['user_type'] = gobike_df['user_type'].astype('category', \n                                                                ordered = False, categories = uclasses)\n    gobike_df['day'] = gobike_df['day'].astype('category', \n                                                        ordered = False, categories = dclasses)\n    gobike_df['month'] = gobike_df['month'].astype('category', \n                                                                ordered = False, categories = mclasses)","6b8f8ce8":"gobike_df","afe1c456":"gobike_df.info(verbose=True, null_counts=True)","253d382c":"# Create a count function\ndef counter(column):\n    \n    #join all the entries in the column to a single string\n    concat_str = gobike_df[column].str.cat(sep='|')\n    \n    # Change the string to series\n    sep_str = pd.Series(concat_str.split(sep='|'))\n    \n    return sep_str","6f5a821f":"# Store the series in a dataframe \ns_station_df = counter('start_station_name').to_frame('start_station_name')\n\n#Get the unique values\ns_station_df = s_station_df['start_station_name'].value_counts().to_frame('start_station_name').reset_index()\n\n#rename columns\ns_station_df = s_station_df.rename(columns={'index':'start_station_name','start_station_name':'count'})","ae7936f3":"s_station_df.head()","4f3aee6f":"#Cut the first 20 starting stations\nstart_station = s_station_df.iloc[:20]\n\n#Set color for the bar graph\nbase_color = sns.color_palette()[0]\nfig_dims = (20, 15)\nfig, ax = plt.subplots(figsize = fig_dims);\n\n#Plot the bargraph\nsns.barplot(data = start_station, x = 'count', y = 'start_station_name', color = base_color, ax = ax);\nsns.set_style(\"whitegrid\")\n\n#Set the title and axes\nplt.title(\"Top 20 Most Common Starting Station\", fontsize=16);\nplt.xlabel(\"Total Number Of Stations\",fontsize=15);\nplt.ylabel(\"Starting Stations\",fontsize= 15);\n#plt.savefig('ss.png');","d6e35cc1":"# Store the series in a dataframe \ne_station_df = counter('end_station_name').to_frame('end_station_name')\n\n#Get the unique values\ne_station_df = e_station_df['end_station_name'].value_counts().to_frame('end_station_name').reset_index()\n\n#rename columns\ne_station_df = e_station_df.rename(columns={'index':'end_station_name','end_station_name':'count'})","f8fe1e0c":"e_station_df.head()","6d5d30b3":"#Cut the first 20 send stations\nend_station = e_station_df.iloc[:20]\n\n#Set color for the bar graph\nbase_color = sns.color_palette()[0]\nfig_dims = (20, 15)\nfig, ax = plt.subplots(figsize = fig_dims);\n\n#Plot the bargraph\nsns.barplot(data = end_station, x = 'count', y = 'end_station_name', color = base_color, ax = ax);\nsns.set_style(\"whitegrid\")\n\n#Set the title and axes\nplt.title(\"Top 20 Most Common Destination Station\", fontsize=16);\nplt.xlabel(\"Total Number Of Stations\",fontsize=15);\nplt.ylabel(\"Starting Stations\",fontsize= 15);\n#plt.savefig('ss.png');","2dfbbee4":"#Calculate the distance between the start and end stations\ndistance = []\n\n\nR = 6373.0\n\n# convert  degrees to radian\nstart_lat = gobike_df['start_station_latitude']\nend_lat = gobike_df['end_station_latitude']\nstart_lgt = gobike_df['start_station_longitude']\nend_lgt = gobike_df['end_station_longitude']\n\n\n#Make a coordinate dataframe\nframe = {'start_lat': start_lat, 'end_lat':end_lat, 'start_lgt':start_lgt, 'end_lgt': end_lgt}\n\ncoordinate_df = pd.DataFrame(frame)","f6700021":"# calculate distance using Haversine formula\ndef haversine_distance(lat1, lon1, lat2, lon2):\n   r = 6371\n   phi1 = np.radians(lat1)\n   phi2 = np.radians(lat2)\n   delta_phi = np.radians(lat2 - lat1)\n   delta_lambda = np.radians(lon2 - lon1)\n   a = np.sin(delta_phi \/ 2)**2 + np.cos(phi1) * np.cos(phi2) * np.sin(delta_lambda \/ 2)**2\n   res = r * (2 * np.arctan2(np.sqrt(a), np.sqrt(1 - a)))\n\n   return np.round(res, 2)","578c6cc5":"# calculate distance between the two points\ngobike_df['distance_km'] = gobike_df.apply(lambda x: haversine_distance(x['start_station_latitude'], x['start_station_longitude'], x['end_station_latitude'], x['end_station_longitude']), axis=1)\n","6a1448d2":"gobike_df['distance_miles'] = gobike_df['distance_km'] * 0.621371","b5692be4":"gobike_df.head()","c052186d":"#Set color for the bar graph\nfig_dims = (10,5)\nfig, ax = plt.subplots(figsize = fig_dims);\nplt.yscale('log');\n\n#Plot the bargraph\nsns.countplot(data = gobike_df, x = 'user_type', ax = ax);\nsns.set_style(\"whitegrid\")\n\n#Set the title and axes\nplt.title(\"Users\", fontsize=16);\nplt.xlabel(\"User Type\",fontsize=15);\nplt.ylabel(\"Number of Users\",fontsize= 15);","37dab80c":"\nfig_dims = (20,15)\nfig, ax = plt.subplots(figsize = fig_dims);\nplt.yscale('log');\n\n#Plot the bargraph\nsns.countplot(data = gobike_df, x = 'month', ax = ax);\nsns.set_style(\"whitegrid\")\n\n#Set the title and axes\nplt.title(\"Rides per Month\", fontsize=16);\nplt.xlabel(\"Month\",fontsize=15);\nplt.ylabel(\"Number of Rides\",fontsize= 15);","08fc32d8":"#set dimensions\nfig_dims = (10,5)\nfig, ax = plt.subplots(figsize = fig_dims);\nplt.yscale('log');\n\n#Plot the bargraph\nsns.countplot(data = gobike_df, x = 'day', ax = ax);\nsns.set_style(\"whitegrid\")\n\n#Set the title and axes\nplt.title(\"Days of the Week\", fontsize=16);\nplt.xlabel(\"Day\",fontsize=15);\nplt.ylabel(\"Number of Rides\",fontsize= 15);","747c8cb0":"# Ford GoBike System Dataset\n## by Anne Mburu\n\n## Table of Content\n<ul>\n    <li><a href=\"intro\">Introduction<\/a><\/li>\n    <li><a href=\"wrangle\">Preliminary Wrangling<\/a><\/li>\n    <li><a href=\"assess\">Assessing<\/a><\/li>\n    <li><a href=\"clean\">Cleaning<\/a><\/li>\n    <li><a href=\"univariate\">Univariate Exploration<\/a><\/li>\n    <li><a href=\"bivariate\">Bivariate Exploration<\/a><\/li>\n    <li><a href=\"multivariate\"> Multivariate Exploration<\/a><\/li>\n    <li><a href=\"conclusion\"> Conclusion<\/a><\/li>  \n    <li><a href=\"ref\">Reference<\/a><\/li>  \n<\/ul>\n\n<a id=\"intro\"><\/a>\n## Introduction\nThis data set includes information about individual rides made in a bike-sharing system covering the greater San Francisco Bay area. \n\n## Preliminary Wrangling\nThe data was downloaded from [Lyft](\"https:\/\/s3.amazonaws.com\/baywheels-data\/index.html\") website. The site has datasets from 2017-2020. However for this analysis, I specifically concentrated on 2019","70686c14":"From the bar graph above we can see the top 20 common stations that riders usually start their ride from with the top 3 being:\n- Market St at 10<\/sup>th<\/sup> St\n- Berry St at 4<\/sup>th<\/sup> St\n- San Francisco Caltrain (Townsend St at 4<sup>th<\/sup> St)","2c3875dd":"### Q: How many subscribers and customers are there?","2a7027f0":"### Q: Which day of the week has more rides?","79cf8eaf":"> The plot above shows that in March the company had the highest number of bike rides while in December it has the lowest.","2e8bbb88":"## Univariate Exploration\n\n> In this section, investigate distributions of individual variables. If\nyou see unusual points or outliers, take a deeper look to clean things up\nand prepare yourself to look at relationships between variables.\n\n> - What is the most common starting point that bikers start their ride from?\n- What is the most common starting point that bikers start their ride from?\n- What is the most common destination point that bikers finish their ride?\n- What are distances that the riders usually cover? What does it's distribution look like? What are the nearest and furthest distances?\n- How many subscribers and customers are there?\n- Which month have the most rides?\n- Which day of the week has more rides?","87a8532e":"### Q: What is the most common destination point that bikers finish their ride?","958e16ed":"### Q: What is the most common starting point that bikers start their ride from?","a4e247c7":"### Q: Station are furthest from each other and by how many km? ","a58919dd":"### What is the structure of your dataset?\n\n> The dataset has 2407259 rows and 15 columns.\n\n### What is\/are the main feature(s) of interest in your dataset?\n\n> After assesing and cleaning, the main feature of interest or rather  the questions whose answers I want to extract from the set are:\n- What is the most common starting point that bikers start their ride from?\n- What is the most common destination point that bikers finish their ride?\n- What are distances that the riders usually cover? What does it's distribution look like? What are the nearest and furthest distances?\n- Which Users are more, subscribers or customers ?\n- Which month have the most rides?\n- Which day of the week has more rides?\n\n- Relationship between customer and distance they cover.\n- Relationship between between customer and time they take to arrive at end station.\n- relationship between distance between starting and ending station and duration?\n- Relationship between the type rider and the month and day of week they go for rides.\n\n- Relationship between distance, time and users.\n- Relationship between Users, day and month.\n\n### What features in the dataset do you think will help support your investigation into your feature(s) of interest?\n\n> Having the questions I wanna extract answers from the dataset, the following features of the dataset will help with this:\n- Latitudes and Longitudes between stations will help calculate the distances.\n- The date(month,day) will be useful in knowing the timeline users like going for rides.\n- The stations will help know the popular starting and destinations.\n- The time taken will help duration taken between each stations.\n- The user type will help to see how the two types of users interact with other variables","727b7d5e":"From the bar graph above we can see the top 20 common stations that riders usually finish their ride at, with the top 3 being:\n- San Francisco Caltrain Station 2 (Townsend St at 4<sup>th<\/sup> St)\n- San Francisco Caltrain (Townsend St at 4<sup>th<\/sup> St)\n- San Francisco Ferry Building (Harry Bridges Plaza)\n","38f19fa5":"> The plot above shows that there are more subscribers than customers.","af50a84c":"### Discuss the distribution(s) of your variable(s) of interest. Were there any unusual points? Did you need to perform any transformations?\n\n> \n\n### Of the features you investigated, were there any unusual distributions? Did you perform any operations on the data to tidy, adjust, or change the form of the data? If so, why did you do this?\n\n> Your answer here!","3f4fa31c":"## Assess\nHaving picked the 2019 dataset, the data may contain some quality issues that needs to be cleaned before analysing the dataset. I therefore need to assess it first.","54f547c7":"> The plot above shows that Thursdays has the highest number of rides while Sundays had the lowest.","f01fe2d0":"> Engineer the columns we need for analysis. We are going to add `month` and `day` columns","4a9ccae9":"After assessing I found the following data issues that I needed to fix:\n- *start_time*, *end_time*, *user_type*, *start_station_name* and *end_station_name* have wrong datatypes.\n- Dataset has some null values.\n- Dataset has some unnecessary columns\n- The data needs additional columns for analysis.","f2ffc2c5":"## Clean\nIn this section, I cleaned the issues I found in the assesment stage.","08ee1e8c":"### Q: Which month have the most rides?"}}