{"cell_type":{"dbb4e4ab":"code","f20c1364":"code","abc8f27a":"code","247540d7":"code","ad13b68a":"code","94a470fc":"code","55b9b312":"code","b36388e2":"code","90f11863":"code","079fe5fd":"code","a0b1b59e":"code","24180d2b":"code","0b4723c3":"code","59766c14":"code","dee6eb55":"code","fe700a66":"code","928f9a5b":"code","f849f6d0":"code","63f81097":"code","fc1046e0":"code","a4835380":"code","4fd22029":"code","888c6e85":"code","e749959e":"code","626a9219":"code","73452254":"code","4ce3dc4e":"code","43586aa5":"code","5f9b92f3":"code","69ade346":"code","c4b04e78":"code","e8f9bc4f":"code","b7746499":"code","a0233f7f":"code","40a3e438":"code","15dece59":"code","8ccf6410":"code","f4d03772":"code","acf289f9":"code","0d323ba6":"code","2751c7fc":"code","3fa5daef":"code","a66e5c13":"code","a5520997":"code","1921a48f":"code","4ce19fae":"code","cb5de1a4":"code","5c31bbdf":"code","fa0d80c8":"code","fde8e601":"code","f12e6f05":"code","4604725a":"code","ff0cd6d1":"code","a4577779":"code","a3d18eee":"code","966a4fb5":"code","9534df57":"code","33400e82":"code","f3850e28":"code","4fb6c772":"code","d6d4ce81":"code","8d5a645f":"code","38bdb690":"code","21a10092":"code","b17a6490":"code","b1379e93":"code","b74d0812":"code","42bdc42a":"code","63a94ad1":"code","9f9a066e":"code","817085bc":"code","0c1bb55d":"code","ba85cacd":"code","0c5ffa89":"code","821aa114":"code","39fba1a6":"code","52e10001":"code","81757265":"code","5b930763":"code","d84c8aa0":"code","d39ac896":"code","2537f0ad":"code","ea4b33be":"code","b6ec9d8d":"code","6f72f9a8":"code","d3b66d7f":"code","ba06cd44":"code","4cab3f4b":"code","4f35b219":"code","e5eac850":"code","d3c0b3b5":"code","60180c73":"code","c3ba5a13":"code","a0b3c546":"code","e13e0720":"code","2d26ec53":"code","005922cb":"code","c606a22d":"code","e375906e":"code","29770030":"code","083ef811":"code","59521ee1":"markdown","7586af31":"markdown","2fa4e80e":"markdown","f638b959":"markdown","e16eeaed":"markdown","aeceb745":"markdown","4a185451":"markdown","f339fc23":"markdown","18fb574b":"markdown"},"source":{"dbb4e4ab":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","f20c1364":"import matplotlib.pyplot as plt\nimport seaborn as sns","abc8f27a":"df = pd.read_csv('\/kaggle\/input\/fifa19\/data.csv')","247540d7":"df.head(7)","ad13b68a":"df.columns","94a470fc":"del df['Unnamed: 0']\ndel df['ID']\ndel df['Photo']\ndel df['Flag']\ndel df['Club Logo']","55b9b312":"df.shape","b36388e2":"df.describe()","90f11863":"df.head(7)","079fe5fd":"df[df['Club'] == 'FC Barcelona'].groupby(['Name', 'Overall','Potential'], as_index = False).mean().sort_values(by = 'Composure', ascending = False)","a0b1b59e":"df['Jersey Number'] = df['Jersey Number'].values.astype(int)","24180d2b":"dfcorr = df[['Age', 'Overall', 'Potential', 'Finishing', 'ShotPower', 'LongShots', 'Penalties', 'FKAccuracy']].corr()","0b4723c3":"cmap = sns.color_palette('viridis')\nf = sns.heatmap(dfcorr, annot = True, cmap = cmap)\nf.set_title('Correlation of Shooting Attributes of Football Players', fontsize = 12)\nplt.show()","59766c14":"sns.pairplot(df[['Age', 'Overall', 'Potential', 'Finishing', 'ShotPower', 'LongShots', 'Penalties', 'FKAccuracy']]);","dee6eb55":"countries = df['Nationality'].unique()\ntop_countries = []\nfor i in countries:\n    mean = df[df['Nationality'] == i]['Overall'][0:100].mean()\n    if (mean > 75) & (len(df[df['Nationality'] == i]) > 20):\n        top_countries.append(i)\n        print('Average of Overall', i, 'is', df[df['Nationality'] == i]['Overall'][0:100].mean())\nprint('Top countries are: ', top_countries)","fe700a66":"sns.distplot(df[df['Nationality'] == 'Brazil']['Potential']);","928f9a5b":"sns.countplot(df[df['Nationality'] == 'Portugal']['Overall'], palette='ocean_r');","f849f6d0":"columns = ['Finishing', 'Positioning', 'ShotPower', 'LongShots', 'Volleys', 'Penalties']\nfor i in columns:\n    mean = df[i].mean()\n    df[i].replace(np.nan, mean, inplace = True)","63f81097":"for i in columns:\n    for j in columns:\n        if i != j:\n            corrv = np.corrcoef(df[i], df[j])[1,0]\n            print('Correlation between {} and {} is equal to:'.format(i, j), corrv)\n        elif i == j:\n            print('-'*70)","fc1046e0":"att_corr = df[columns].corr()\nsns.heatmap(att_corr, annot = True)\nplt.show()","a4835380":"X = df.loc[:,['Positioning', 'ShotPower', 'LongShots', 'Volleys', 'Penalties']].values\ny = df.loc[:, 'Finishing'].values","4fd22029":"from sklearn.model_selection import train_test_split\nX_train, X_test, y_train, y_test = train_test_split(X, y, random_state = 8, test_size = 0.2)","888c6e85":"from sklearn.linear_model import LinearRegression\nregressor = LinearRegression()\nregressor.fit(X_train, y_train)","e749959e":"y_pred = regressor.predict(X_test)","626a9219":"print(np.concatenate((y_pred.reshape(len(y_pred), 1), y_test.reshape(len(y_test), 1)), 1))","73452254":"from sklearn.metrics import mean_squared_error","4ce3dc4e":"mean_squared_error(y_test ,y_pred)","43586aa5":"sns.scatterplot(y_pred, y_test)\nplt.plot(range(100), range(100), color = 'red')\nplt.show()","5f9b92f3":"from sklearn.preprocessing import StandardScaler\nsc = StandardScaler()\nX_train = sc.fit_transform(X_train)\nX_test = sc.transform(X_test)","69ade346":"from sklearn.linear_model import SGDRegressor\nregressor = SGDRegressor(max_iter=1000, tol=1e-3, penalty=None, eta0=0.1)\nregressor.fit(X_train, y_train.ravel())","c4b04e78":"y_pred = regressor.predict(X_test)","e8f9bc4f":"print(np.concatenate((y_pred.reshape(len(y_pred), 1), y_test.reshape(len(y_test), 1)), 1))","b7746499":"regressor.coef_, regressor.intercept_","a0233f7f":"mean_squared_error(y_test, y_pred)","40a3e438":"sns.scatterplot(y_pred, y_test)\nplt.plot(range(100), range(100), color = 'red')\nplt.show()","15dece59":"from sklearn.linear_model import Ridge\nridge_reg = Ridge(alpha = 1, solver = 'cholesky')\nridge_reg.fit(X_train, y_train)\ny_pred = ridge_reg.predict(X_test)","8ccf6410":"print(np.concatenate((y_pred.reshape(len(y_pred), 1), y_test.reshape(len(y_test), 1)), 1))","f4d03772":"sns.scatterplot(y_pred, y_test)\nplt.plot(range(100), range(100), color = 'red')\nplt.show()","acf289f9":"mean_squared_error(y_test, y_pred)","0d323ba6":"from sklearn.linear_model import Lasso\nlasso_reg = Lasso(alpha = 0.1)\nlasso_reg.fit(X_train, y_train)\ny_pred = lasso_reg.predict(X_test)","2751c7fc":"print(np.concatenate((y_pred.reshape(len(y_pred), 1), y_test.reshape(len(y_test), 1)), 1))","3fa5daef":"sns.scatterplot(y_pred, y_test)\nplt.plot(range(100), range(100), color = 'red')\nplt.show()","a66e5c13":"mean_squared_error(y_test, y_pred)","a5520997":"from sklearn.linear_model import ElasticNet\nelastic_net = ElasticNet(alpha = 0.1, l1_ratio = 0.5)\nelastic_net.fit(X_train, y_train)\ny_pred = elastic_net.predict(X_test)","1921a48f":"print(np.concatenate((y_pred.reshape(len(y_pred), 1), y_test.reshape(len(y_test), 1)), 1))","4ce19fae":"sns.scatterplot(y_pred, y_test)\nplt.plot(range(80), range(80), color = '#d13495')\nplt.show()","cb5de1a4":"mean_squared_error(y_test, y_pred)","5c31bbdf":"# Pace stats calculation\ndf['Pace'] = round(df['SprintSpeed'] * 0.55 + df['Acceleration'] * 0.45)\ndf['Pace'] = df['Pace'].replace(np.nan, df['Pace'].mean())\ndf['Pace'] = df['Pace'].astype(int)\n\n# Shooting stats calculation\ndf['Shooting'] = round(df['Finishing'] * 0.45 + df['LongShots'] * 0.2 + df['ShotPower'] * 0.2 + df['Positioning'] * 0.05 + df['Penalties'] * 0.05 + df['Volleys'] * 0.05)\ndf['Shooting'] = df['Shooting'].replace(np.nan, df['Shooting'].mean())\ndf['Shooting'] = df['Shooting'].astype(int)\n\n# Passing stats calculation\ndf['Passing'] = round(df['ShortPassing'] * 0.35 + df['Vision'] * 0.2 + df['Crossing'] * 0.2 + df['LongPassing'] * 0.15 + df['Curve'] * 0.05 + df['FKAccuracy'] * 0.05) \ndf['Passing'] = df['Passing'].replace(np.nan, df['Passing'].mean())\ndf['Passing'] = df['Passing'].astype(int)\n\n# Dribbling stats calculation\ndf['Dribbling_Ovr'] = round(df['Agility'] * 0.1 + df['Balance'] * 0.05 + df['BallControl'] * 0.35 + df['Dribbling'] * 0.5)\ndf['Dribbling_Ovr'] = df['Dribbling_Ovr'].replace(np.nan, df['Dribbling_Ovr'].mean())\ndf['Dribbling_Ovr'] = df['Dribbling_Ovr'].astype(int)\n\n# Defending stats calculation\ndf['Defending'] = round(df['HeadingAccuracy'] * 0.1 + df['Interceptions'] * 0.2 + df['Marking'] * 0.3 + df['SlidingTackle'] * 0.1 + df['StandingTackle'] * 0.3)\ndf['Defending'] = df['Defending'].replace(np.nan, df['Defending'].mean())\ndf['Defending'] = df['Defending'].astype(int)\n\n# Physical stats calculation\ndf['Physical'] = round(df['Aggression'] * 0.2 + df['Jumping'] * 0.05 + df['Stamina'] * 0.25 + df['Strength'] * 0.5) \ndf['Physical'] = df['Physical'].replace(np.nan, df['Physical'].mean())\ndf['Physical'] = df['Physical'].astype(int)","fa0d80c8":"main_stats = ['Pace', 'Shooting', 'Passing', 'Dribbling_Ovr', 'Defending', 'Physical']\nfor i in main_stats:\n    for j in top_countries[:-1]:\n        for k in range(2):\n            player_position = np.array(df[df['Nationality'] == j]['Position'])[k]\n            if player_position != 'GK':\n                player_name = list(df[df['Nationality'] == j]['Name'])[k]\n                stats = {i: np.array(df[df['Nationality'] == j][i])[k]}\n                print(player_name, '\\'s', i.lower() ,'stat is', stats.get(i))","fde8e601":"sns.jointplot(x = df['Overall'], y = df['Age'], data = df, kind = 'kde');","f12e6f05":"def compare_players(player_1, player_2):\n    player_name_1 = df[df['Name'] == player_1]\n    player_name_2 = df[df['Name'] == player_2]\n    player_1_stats = np.array(player_name_1[['Pace', 'Shooting', 'Passing', 'Dribbling_Ovr', 'Defending', 'Physical']])\n    player_2_stats = np.array(player_name_2[['Pace', 'Shooting', 'Passing', 'Dribbling_Ovr', 'Defending', 'Physical']])\n    difference = []\n    for i in range(0, 6):\n        diff = player_1_stats[0] - player_2_stats[0]\n        difference.append(diff)\n    difference = np.array(difference)\n    result = np.concatenate((player_1_stats.reshape(6, 1), player_2_stats.reshape(6, 1), difference[0].reshape(6, 1)),1)\n    print(player_1, player_2, '\\n',result)","4604725a":"compare_players('L. Messi', 'Cristiano Ronaldo')","ff0cd6d1":"gold_band = df[df['Overall'] >= 75]\nsilver_band = df[(df['Overall'] < 75) & (df['Overall'] > 64)]\nbronz_band = df[df['Overall'] <= 64]","a4577779":"df['Version'] = None","a3d18eee":"df.loc[df['Overall'] >= 75, 'Version'] = 3","966a4fb5":"df.loc[(df['Overall'] < 75) & (df['Overall'] > 64), 'Version'] = 2","9534df57":"df.loc[df['Overall'] <= 64, 'Version'] = 1","33400e82":"df['Card Type'] = None","f3850e28":"df.loc[df['Overall'] >= 75, 'Card Type'] = 'Gold'","4fb6c772":"df.loc[(df['Overall'] < 75) & (df['Overall'] > 64), 'Card Type'] = 'Silver'","d6d4ce81":"df.loc[df['Overall'] <= 64, 'Card Type'] = 'Bronze'","8d5a645f":"grid = sns.FacetGrid(df, col = 'Card Type', row = 'Preferred Foot')\ngrid.map(sns.distplot, 'Shooting', bins = 20, color = '#0f8da3')\ngrid.add_legend();","38bdb690":"stats = ['Overall', 'Potential', 'Pace', 'Shooting', 'Passing', 'Dribbling_Ovr', 'Defending', 'Physical', 'Version']","21a10092":"df['Version'] = df['Version'].astype(int)","b17a6490":"main_stats_corr = df[stats].corr()\ncmap = sns.color_palette(\"mako\")\nsns.heatmap(main_stats_corr, annot = True, cmap=cmap,);","b1379e93":"plt.figure(figsize = (16,9))\nsns.set_style('darkgrid')\nsns.set_palette('viridis')\nplt.title('Overall Distribution of Card Types')\nsns.boxplot(x = 'Card Type', y = 'Overall', data = df);","b74d0812":"df.tail()","42bdc42a":"for i in main_stats:\n    df['{} Band'.format(i)] = pd.cut(df[i], 10)","63a94ad1":"for i in main_stats:\n    band_interval = df['{} Band'.format(i)].unique().sort_values(ascending = True)\n    for j in range(len(band_interval)):\n        df['{} Band'.format(i)] = df['{} Band'.format(i)].replace(band_interval[j], j + 1)","9f9a066e":"df.iloc[:, -8:]","817085bc":"X = df.loc[:, ['Pace Band', 'Shooting Band', 'Passing Band', 'Dribbling_Ovr Band', 'Defending Band', 'Physical Band']].values\ny = df.loc[:, 'Version'].values.astype(int)","0c1bb55d":"X_train, X_test, y_train, y_test = train_test_split(X, y, random_state = 7, test_size = 0.2)","ba85cacd":"from sklearn.neighbors import KNeighborsClassifier\nknn = KNeighborsClassifier()\nknn.fit(X_train, y_train)","0c5ffa89":"y_pred = knn.predict(X_test)","821aa114":"print(np.concatenate((y_pred.reshape(len(y_pred), 1), y_test.reshape(len(y_test), 1)), 1))","39fba1a6":"acc_knn = knn.score(X_train, y_train) * 100\nprint(acc_knn)","52e10001":"from sklearn.ensemble import RandomForestClassifier\nrandf = RandomForestClassifier()\nrandf.fit(X_train, y_train)","81757265":"y_pred = randf.predict(X_test)","5b930763":"print(np.concatenate((y_pred.reshape(len(y_pred), 1), y_test.reshape(len(y_test), 1)), 1))","d84c8aa0":"acc_randf = randf.score(X_train, y_train) * 100\nprint(acc_randf)","d39ac896":"from sklearn.svm import SVC\nsvc = SVC()\nsvc.fit(X_train, y_train)","2537f0ad":"y_pred = svc.predict(X_test)","ea4b33be":"print(np.concatenate((y_pred.reshape(len(y_pred), 1), y_test.reshape(len(y_test), 1)), 1))","b6ec9d8d":"acc_linear_svc = svc.score(X_train, y_train) * 100\nprint(acc_linear_svc)","6f72f9a8":"from sklearn.linear_model import Perceptron\nperceptron = Perceptron()\nperceptron.fit(X_train, y_train)","d3b66d7f":"y_pred = perceptron.predict(X_test)","ba06cd44":"print(np.concatenate((y_pred.reshape(len(y_pred), 1), y_test.reshape(len(y_test), 1)), 1))","4cab3f4b":"acc_perceptron = perceptron.score(X_train, y_train) * 100\nprint(acc_perceptron)","4f35b219":"from sklearn.naive_bayes import GaussianNB\ngnb = GaussianNB()\ngnb.fit(X_train, y_train)","e5eac850":"y_pred = gnb.predict(X_test)","d3c0b3b5":"print(np.concatenate((y_pred.reshape(len(y_pred), 1), y_test.reshape(len(y_test), 1)), 1))","60180c73":"acc_gnb = gnb.score(X_train, y_train) * 100\nprint(acc_gnb)","c3ba5a13":"from sklearn.tree import DecisionTreeClassifier\ndtree = DecisionTreeClassifier()\ndtree.fit(X_train, y_train)","a0b3c546":"y_pred = dtree.predict(X_test)","e13e0720":"print(np.concatenate((y_pred.reshape(len(y_pred), 1), y_test.reshape(len(y_test), 1)), 1))","2d26ec53":"acc_dtree = dtree.score(X_train, y_train) * 100\nprint(acc_dtree)","005922cb":"models = pd.DataFrame({'Model' : ['K-Nearest Neighbors', 'Random Forest', 'Linear SVC', 'Gaussian NB', 'Perceptron' ,'Decision Tree']\n                      ,'Score' : [acc_knn, acc_randf, acc_linear_svc, acc_gnb, acc_perceptron, acc_dtree]}).sort_values(by = 'Score', ascending=False)","c606a22d":"models","e375906e":"def player_version_finder(Pace, Shooting, Passing, Dribbling_Ovr, Defending, Physical, classification = dtree):\n    main_stats = ['Pace', 'Shooting', 'Passing', 'Dribbling_Ovr', 'Defending', 'Physical']\n    variables = [Pace, Shooting, Passing, Dribbling_Ovr, Defending, Physical]\n    band_df = pd.DataFrame()\n    index = []\n    for i, j in zip(variables, main_stats):\n        band_df['{} Band'.format(j)] = pd.cut(df['{}'.format(j)], 10).unique().sort_values(ascending = True)\n        for k in range(len(band_df['{} Band'.format(j)])):\n            if i in band_df['{} Band'.format(j)].unique().sort_values(ascending = True)[k]:\n                index.append(k + 1)\n    converted_inputs = np.array(index).reshape(1, -1)\n    prediction = classification.predict(converted_inputs)\n    if prediction == 1:\n        print('According to the {} model this has to be a Bronze player'.format(classification))\n    elif prediction == 2:\n        print('According to the {} model this has to be a Silver player'.format(classification))\n    elif prediction == 3:\n        print('According to the {} model this has to be a Gold player'.format(classification))","29770030":"player_version_finder(79,60,75,72,40,67, randf)","083ef811":"rng = np.random.default_rng()\nall_players = []\nclassifications = [randf, dtree, knn]\nfor j in classifications:\n    print('-' * 100)\n    for i in range(10):\n        all_players.append(rng.integers(30, 89, size=6))\n        print(all_players[i])\n        player_version_finder(all_players[i][0], all_players[i][1], all_players[i][2], all_players[i][3], all_players[i][4], all_players[i][5], j)","59521ee1":"## Random Forest Classification","7586af31":"##  Perceptron","2fa4e80e":"## Decision Tree ","f638b959":"Pace: Sprint Speed x 0.55 + Acceleration x 0.45\n\nShooting: Finishing x 0.45 + Long shots x 0.2 + Shot power x 0.2 + Positioning x 0.05 + Penalties x 0.05 + Volleys x 0.05\n\nPassing: Short Pass x 0.35 + Vision x 0.2 + Crossing x 0.2 + Long Pass x 0.15 + Curve x 0.05 + Freekick Accuracy x 0.05","e16eeaed":"## Gaussian Naive Bayes","aeceb745":"### Prediction Function","4a185451":"Best models are Decision Tree and Random Forest Classifications.","f339fc23":"## K-Nearest Neighbors","18fb574b":"##  Linear SVC"}}