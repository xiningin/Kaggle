{"cell_type":{"54e9334e":"code","03130154":"code","c80fc4e9":"code","fb24ef94":"code","bd151a34":"code","71272f30":"code","95d9f7f3":"code","afe11b1a":"code","7ac2f2cf":"code","1390e2c0":"code","31c6ae56":"code","ee18ba00":"code","bc74be1b":"code","bb686dc8":"code","2668a0e8":"code","fe0f6db5":"code","4437abad":"code","4f87eec0":"code","6e269be3":"code","bb9aea79":"code","68aee970":"code","0388744b":"code","eb3b9067":"code","2e9f749c":"code","3eff8579":"markdown","869d4d53":"markdown","ce178479":"markdown","ca9a1002":"markdown","6bdca115":"markdown","f99dec07":"markdown","9a81a26c":"markdown","b774e349":"markdown","1581a4ac":"markdown","d0bddfbf":"markdown","29125f20":"markdown","75f3ca9e":"markdown","a19ac16b":"markdown","645b09de":"markdown","278fd8de":"markdown","fa9967fd":"markdown"},"source":{"54e9334e":"import numpy as np\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nfrom mpl_toolkits.mplot3d import Axes3D\nfrom shutil import copyfile, rmtree\n\n%matplotlib inline","03130154":"copyfile(src = \"..\/input\/kmeansutilsmodule\/KMeansUtils.py\", dst = \"..\/working\/KMeansUtils.py\")\n\n# some utility functions to test and visualize K-Means\nfrom KMeansUtils import *","c80fc4e9":"def _distance(point_a, point_b):\n    \"\"\"Calculates euclidean distance between 2 points.\"\"\"\n    \n    # axis=1 allows vectorized function - that is, calculating the distance between point_a and many point_b's\n    return np.sqrt(np.sum(np.power(point_a - point_b, 2), axis=1)).reshape(-1, 1)","fb24ef94":"def cluster_assignment(data, centroids):\n    \"\"\"Assigns cluster to each of the data points.\"\"\"\n    \n    distances = np.concatenate([_distance(cent, data) for cent in centroids], axis=1)\n    return distances.argmin(axis=1)","bd151a34":"def move_clusters(assignments, data, clusters):\n    \"\"\"Moves cluster centroids to the average location of it's assigned data points.\"\"\"\n    \n    cluster_ids = np.unique(assignments)\n    new_cluster_locs = np.zeros(shape=clusters.shape, dtype=float)\n    \n    for cluster_id in cluster_ids:\n        cur_cluster_points_idx = np.where(assignments==cluster_id)\n        cur_cluster_points = data[cur_cluster_points_idx]    \n        new_cluster_locs[cluster_id, :] = np.mean(cur_cluster_points, axis=0)\n    \n    return new_cluster_locs","71272f30":"def distortion_function(assignments, data, clusters):\n    \"\"\"Calculates K-Means cost function - mean of squared distances of each sample from it's assigned cluster centroid.\"\"\"\n    \n    cluster_ids = np.unique(assignments)\n    cost = 0\n    \n    for cluster_id in cluster_ids:\n        cur_cluster_points_idx = np.where(assignments==cluster_id)\n        cur_cluster_points = data[cur_cluster_points_idx]\n        \n        cost += np.sum(_distance(clusters[cluster_id], cur_cluster_points))\n    \n    cost \/= data.shape[0]\n    \n    return cost","95d9f7f3":"def random_start(data, k):\n    \"\"\"Randomly chooses k points from the data to be used as cluster centroids.\"\"\"\n    \n    return data[np.random.choice(data.shape[0], size=k, replace=False)]","afe11b1a":"def kmeans(data, k, iterations, scatter='2D', save_scatter=False, save_dir_path=''):\n    \"\"\"K-Means algorithm (with scatter option for 2 and 3 dimensional data).\"\"\"\n    \n    # initialize centroids locations\n    centroids = random_start(data=data, k=k)\n    \n    # instantiate an array to log cost function value at each iteration\n    cost = np.zeros((10+1), dtype=float)\n    \n    scatter_plots = []\n\n    for i in range(iterations):\n        \n        # assign clusters to each data point\n        assignments = cluster_assignment(data, centroids)\n        \n        # compute cost function value\n        cost[i] = distortion_function(assignments, data, centroids)\n        \n        # visualize K-Means clusters and data assignments\n        scatter_plots.append(\n            cluster_scatter(data, centroids, assignments, i,\n            scatter, save=save_scatter, save_dir_path=save_dir_path)\n        )\n        \n        # move cluster centroids\n        centroids = move_clusters(assignments, data, centroids)\n        \n    # compute cost function value\n    cost[iterations] = distortion_function(assignments, data, centroids)\n    \n    #visualize K-Means clusters and data assignments\n    last_scatter = cluster_scatter(\n        data, centroids, assignments, iterations, scatter,\n        save=save_scatter, save_dir_path=save_dir_path\n    )\n    scatter_plots.append(last_scatter)\n    \n    return centroids, assignments, cost, last_scatter, scatter_plots","7ac2f2cf":"# Generates random data points around given Centroids locations.\n# the tuples are of form: ((x1, x2, ..., xn), variance, number of samples).\nlocation_to_generate = [\n    ((0, 0), 2, 50),\n    ((15, 0), 2, 50),\n    ((0, 15), 2, 50),\n    ((15, 15), 2, 50),\n    ((-5, 10), 3, 100)\n]\ndata = generate_centroids_data(location_to_generate)\ndata.shape","1390e2c0":"scatter_2d(data)","31c6ae56":"# directory path for saving the scatterplots of each iteration, later to create an animated gif\nsave_dir_path = '2D_imgs'\n\n# remove directory if already exists\nif os.path.isdir(save_dir_path):\n    rmtree(save_dir_path)","ee18ba00":"k = 6\niterations = 8","bc74be1b":"centroids, assignments, cost, last_scatter, scatter_plots = kmeans(\n    data=data, k=k, iterations=8,\n    scatter='2D', save_scatter=True, save_dir_path='2D_imgs')","bb686dc8":"plot_distortion(cost_values=cost)","2668a0e8":"create_gif(gif_name='2D', dir_path=save_dir_path)\nImage(filename=f'{os.path.join(save_dir_path, \"2D.gif\")}')","fe0f6db5":"last_scatter","4437abad":"location_to_generate = [\n    ((0, 0, 0), 2, 50),\n    ((10, 0, 0), 1, 50),\n    ((0, 10, 0), 3, 50),\n    ((0, 0, 10), 1, 50),\n    ((10, 10, 0), 2, 50),\n    ((10, 0, 10), 1, 50),\n    ((0, 10, 10), 3, 50),\n    ((10, 10, 10), 1, 50)\n]\ndata = generate_centroids_data(location_to_generate)\ndata.shape","4f87eec0":"scatter_3d(data)","6e269be3":"save_dir_path = '3D_imgs'\n\n# remove directory if already exists\nif os.path.isdir(save_dir_path):\n    rmtree(save_dir_path)","bb9aea79":"k = 8\niterations = 10","68aee970":"centroids, assignments, cost, last_scatter, scatter_plots = kmeans(\n    data=data, k=k, iterations=iterations,\n    scatter='3D', save_scatter=True, save_dir_path='3D_imgs')","0388744b":"plot_distortion(cost_values=cost)","eb3b9067":"create_gif(gif_name='3D', dir_path=save_dir_path)\nImage(filename=f'{os.path.join(save_dir_path, \"3D.gif\")}')","2e9f749c":"plotly_3d_scatter(data, centroids, assignments, iteration=10)","3eff8579":"This notebook shows a simple implementation from scratch of the K-Means clustering algorithm.\nIt includes also 2D and 3D visualizations (representing the clustering process of data with 2 and 3 features).\n\nThe random data generation and the visualization functions are not important to the algorithm understanding,\nand for readability reasons are left out of this notebook, and are being imported from a utility module.","869d4d53":"# K-Means implementation functions","ce178479":"# 2D visualized example","ca9a1002":"# Imports","6bdca115":"### A 2D scatterplot of the generated data","f99dec07":"#### you can roatate the last one","9a81a26c":"### Visualizations\n#### For some reason the animated visualizations do no appear within the notebook, but in the kernel's Output Visualizations. ","b774e349":"### A 3D scatterplot of the generated data","1581a4ac":"### Visualizations\n#### For some reason the animated visualizations do no appear within the notebook, but in the kernel's Output Visualizations. ","d0bddfbf":"# Intro","29125f20":"#### Note:\nI did not implement stopping criterion by a threshold of centroids moves differences.","75f3ca9e":"### Random data generation","a19ac16b":"### Random data generation","645b09de":"### Run K-Means","278fd8de":"# 3D visualized example","fa9967fd":"### Run K-Means"}}