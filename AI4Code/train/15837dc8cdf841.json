{"cell_type":{"e16d78f5":"code","ae754bd4":"code","a5c630c3":"code","ad452001":"code","cdf7eaca":"code","ee864c12":"code","ef5fc721":"markdown","3925d62b":"markdown","9b072240":"markdown","4f443db5":"markdown"},"source":{"e16d78f5":"import pandas as pd\nimport numpy as np\nimport datetime,os,gc\nimport matplotlib.pyplot as plt\n\nimport random\nrandom.seed(1234)","ae754bd4":"features = ['R','C','breath_id','time_step']\n\nif True:\n    train = pd.read_csv('..\/input\/ventilator-pressure-prediction\/train.csv',usecols=features)\n    test  = pd.read_csv('..\/input\/ventilator-pressure-prediction\/test.csv',usecols=features)","a5c630c3":"train_BID = train.breath_id.unique()\ntest_BID = test.breath_id.unique()\ndf = pd.concat([train,test], ignore_index=True, axis=0)\n\nassert df.shape[0] % 80 == 0\nassert len(train_BID) + len(test_BID) == df.shape[0]\/\/80\ndf = df.sort_values(['breath_id','time_step'])\ndf.index = np.arange(0,df.shape[0]).astype(np.int64)","ad452001":"def add_features(df):\n    order = 1\n    df.rename(columns={'time_step':'time_step0'},inplace=True)\n    for i in range(1):\n        df[f'time_step{i+1}'] = df.groupby('breath_id')[f'time_step{i}'].diff().shift(-1).fillna(method='ffill')\n    return df\ndf = add_features(df)\n\n# let's pick 50000 breathing patterns from train and test randomly\nsample_BID = np.random.choice(df.breath_id.unique(),50000)\n# comment the line bellow if you want to run over the entire data\ndf = df[df.breath_id.isin(sample_BID)]","cdf7eaca":"!pip install -U scikit-learn\nfrom sklearn.manifold import TSNE\nimport umap\n\nC   = np.array(df.C).reshape(-1,80)[:,0]\nR   = np.array(df.R).reshape(-1,80)[:,0]\n\nimport re\n\ncluster_features = [col for col in df.columns if  re.match('time_step[[0-9]',col) ]","ee864c12":"def plot_embedding(embedding,embedding_name,label_feature,label_feature_name):\n    fig = plt.figure()\n    CB_color_cycle = ['y','k','b']\n    x = 1\n    point_size=1\n    for g,c,label in zip(np.unique(label_feature), CB_color_cycle, [ label_feature_name+str(cc) for cc in np.unique(label_feature)]):\n        ix = np.where(label_feature[:] == g)\n        ix_bar = np.where(label_feature[:] != g)\n        ax = fig.add_subplot(1,3,x)\n        # plot all\n        ax.scatter(embedding[:,0],  embedding[:,1],s=point_size,c='0.8',label = 'All',marker='.',alpha=0.25)\n        # plot desired layer\n        ax.scatter(embedding[ix,0],embedding[ix,1],s=point_size,c=c,    label = label,marker='.',alpha=1)\n        # plot other than the desired layer\n        ax.scatter(embedding[ix_bar,0],embedding[ix_bar,1],s=point_size+1,c='0.5',marker='.',alpha=1)\n        ax.legend()\n        x += 1\n    plt.suptitle(f'{embedding_name}')\n    fig.set_size_inches(12,4)\n    plt.show()\n    \nfor step in cluster_features:\n    \n    dat = np.array(df[step]).reshape(-1,80,1)\n    dat = np.transpose(dat,axes=(0,2,1))\n    dat = dat.reshape(dat.shape[0],-1).astype(np.float32)\n    \n    tsne = TSNE(n_components=2, learning_rate='auto',init='random',perplexity=10,random_state=1234).fit_transform(dat)\n    UMP  = umap.UMAP(n_neighbors=15, random_state=1234).fit(dat)\n    \n    plot_embedding(tsne,'TSNE '+step,R,'R')\n    plot_embedding(UMP.embedding_,'UMAP '+step,R,'R')\n    plot_embedding(tsne,'TSNE '+step,C,'C')\n    plot_embedding(UMP.embedding_,'UMAP '+step,C,'C')","ef5fc721":"# This examines the feature 'time_step' and derivatives via unsupervised learning using TSNE and UMAP\n\nIt was motivated by a [discussion](https:\/\/www.kaggle.com\/c\/ventilator-pressure-prediction\/discussion\/285435) exchanged with [Chris Deotte](https:\/\/www.kaggle.com\/cdeotte).\n\nI produced initially a TSNE embedding [here](https:\/\/www.kaggle.com\/c\/ventilator-pressure-prediction\/discussion\/285773). The conclusion was that 'time_step', suprisingly, contains much information about the 'R' and 'C' features. But how much? One issue with that earlier plot was that the labeling of the learned clusters were not disjoint. That made the last layer to dominate in the plots. One can examine that certain clusters, all three values for R or C were present. Others had two values. Some clusters had only one.\n\nIn this notebook, I color the clusters when only one of the values in R or C dominates the cluster. Clusters with two or more values will appear gray. It should give a better indicator for the correlation between time_step and R or C.","3925d62b":"The plots above show that while certain clusters are mostly exclusively dominated by one R or C value, many of them have more than two values. Thus it seems that although time_step knows much about R or C, it is not sufficient to fully discern them.","9b072240":"time_step is renamed to time_step0 for convenience.\ntimpe_step1 is the first order difference.\nIf you want to examine higher order differences increase 'order'","4f443db5":"Data is read and then train and test are concatenated."}}