{"cell_type":{"37a5ef78":"code","b2f61634":"code","3ec3f1ee":"code","3ed347cc":"code","4f7d1fc3":"code","aa66bd4f":"code","ec4cae83":"code","f2cdac5c":"code","d2ce1814":"code","b414dc8e":"code","3aa2f247":"code","a69a45de":"code","1b367a6c":"code","60b0c009":"code","cd1e00ea":"code","70ec3422":"code","bb0c969a":"code","46908562":"markdown","b41cf854":"markdown","abb4822d":"markdown","682eafb7":"markdown","fbfcb812":"markdown","2c16327c":"markdown","7b931390":"markdown","6b3b7be2":"markdown","67bc1d92":"markdown","fc4c67dd":"markdown","fdc71a53":"markdown","cab39319":"markdown","e6e2fb69":"markdown","9d861ddb":"markdown","b9d6a6ed":"markdown"},"source":{"37a5ef78":"import gc\nimport os\nimport warnings\nimport numpy as np\nimport pandas as pd\nimport seaborn as sns\nfrom multiprocessing import Pool\n\nimport matplotlib.pyplot as plt\nwarnings.filterwarnings('ignore')\nPATH=\"..\/input\/\"\nos.listdir(PATH)","b2f61634":"def merge_train_test(df_train, df_test):\n    if \"target\" not in df_test.columns.values:\n        df_test[\"target\"] = -1\n    res = pd.concat([df_train, df_test])\n    res.reset_index(inplace=True, drop=True)\n    return res\n\ndef split_train_test(df):\n    df_train = df[df[\"target\"] >= 0]\n    df_test = df[df[\"target\"] <= -1]\n    df_train.reset_index(inplace=True, drop=True)\n    df_test.reset_index(inplace=True, drop=True)\n    assert list(df_train[\"ID_code\"].values) == [f\"train_{i}\" for i in range(200000)]\n    assert list(df_test[\"ID_code\"].values) == [f\"test_{i}\" for i in range(200000)]\n    return df_train, df_test","3ec3f1ee":"%%time\ntrain_df = pd.read_csv(PATH+\"train.csv\")\ntest_df = pd.read_csv(PATH+\"test.csv\")","3ed347cc":"class CountEncoder:\n    def fit(self, series):\n        self.counts = series.groupby(series).count()\n    \n    def transform(self, series):\n        return series.map(self.counts).fillna(0).astype(np.int16)","4f7d1fc3":"%%time\ndf_merged = merge_train_test(train_df, test_df)\nfor i in range(200):\n    enc = CountEncoder()\n    var = df_merged[f\"var_{i}\"]\n    enc.fit(var)\n    df_merged[f\"{i}_count_enc\"] = enc.transform(var)","aa66bd4f":"train_df, test_df = split_train_test(df_merged)\nfor v in range(10):\n    cnt_mean_trn = train_df[f\"{v}_count_enc\"].mean()\n    cnt_mean_test = test_df[f\"{v}_count_enc\"].mean()\n    print(f\"cnt_mean_trn={cnt_mean_trn:2.5f}, cnt_mean_test={cnt_mean_test:2.5f}, diff={cnt_mean_trn-cnt_mean_test:.5f}\")","ec4cae83":"%%time\ndf_merged[\"count_enc_1s\"] = 0\nfor v in range(200):\n    df_merged[\"count_enc_1s\"] += (df_merged[f\"{v}_count_enc\"]==1)\ntrain_df, test_df = split_train_test(df_merged)","f2cdac5c":"plt.figure(figsize=(20, 4))\nplt.hist(train_df[\"count_enc_1s\"], range=(-0.5, 99.5), bins=100, alpha=0.5, label=\"train\")\nplt.hist(test_df[\"count_enc_1s\"], range=(-0.5, 99.5), bins=100, alpha=0.5, label=\"test\")\nplt.legend()\nplt.show()","d2ce1814":"(test_df[\"count_enc_1s\"]==0).sum()","b414dc8e":"test_df[\"target\"] = -1 - (test_df[\"count_enc_1s\"] == 0)  # -1: public?  -2: private?\ntest_df.head()\n\n# actually -1 is real and -2 is fake","3aa2f247":"%%time\nfor val, df_grouped in test_df.groupby(f\"var_{v}\"):\n    if -2 in df_grouped[\"target\"].values:\n        assert -1 in df_grouped[\"target\"].values\nprint(\"ok\")","a69a45de":"# unionfind tree\nclass Uf:\n    def __init__(self, N):\n        self.Par = list(range(N))\n\n    def root(self, x):\n        if self.Par[x] == x:\n            return x\n        else:\n            self.Par[x] = self.root(self.Par[x])\n            return self.Par[x]\n\n    def same(self, x, y):\n        return self.root(x) == self.root(y)\n\n    def unite(self, x, y):\n        x = self.root(x)\n        y = self.root(y)\n        if x != y:\n            self.Par[x] = y","1b367a6c":"%%time\nfrom itertools import groupby\nfrom operator import itemgetter\n\nindex = range(200000)\ntarget = test_df[\"target\"].values\n\nuf = Uf(200000)\nfor v in range(200):\n    data = test_df[f\"var_{v}\"].values\n    for k, g in groupby(sorted(zip(data, target, index)), key=itemgetter(0)):  # grouping by raw value\n        g = list(g)\n        if [tgt for _, tgt, _ in g].count(-1) == 1:  # if the value is unique in public? data\n            idx0 = g[0][2]\n            for _, _, idx in g[1:]:\n                uf.unite(idx0, idx)  # belong to same group","60b0c009":"from collections import defaultdict\ncnt = defaultdict(int)\nfor i in test_df.index.values:\n    cnt[uf.root(i)] += 1\ncnt","cd1e00ea":"cnt = defaultdict(int)\nfor i in test_df[target==-1].index.values:\n    cnt[uf.root(i)] += 1\ncnt","70ec3422":"cnt = defaultdict(int)\nfor i in test_df[target==-2].index.values:\n    cnt[uf.root(i)] += 1\ncnt","bb0c969a":"test_df[\"public_private\"] = [uf.root(idx)==166779 for idx in range(200000)]\ntest_df.head()","46908562":"then I thought:  \n*the target of data duplicated from `target==1` is 1?*","b41cf854":"count encoding with all data. since I had known count encoding improves CV (also LB, but little), I guessed there are some secret in count encoding.","abb4822d":"!?!?!?","682eafb7":"public? and private? were split into two groups.\n\nthen I found one of the group does not affect LB.  \nso I was confused but my teammate mamas suggested private? was not private, but fake.\n\nwe finally found true public\/private split and real\/fake split.","fbfcb812":"so it can be said that all values in private? data are duplicated from public? data.","2c16327c":"## 1. real\/fake split","7b931390":"if the value which is unique in public? data appeares in some private data, maybe those have the same target value.  \n(cf. graph features in Quora Question Pairs)","6b3b7be2":"I found that:  \n*all values in private? data also appears in public? data.*","67bc1d92":"maybe this kernel is a rehash of https:\/\/www.kaggle.com\/yag320\/list-of-fake-samples-and-public-private-lb-split .","fc4c67dd":"then checked: how many `count_enc==1` in the same row?","fdc71a53":"## 2. public\/private split","cab39319":"compare the mean of count of train and test.","e6e2fb69":"count of test data is 1.5 larger than train data. strange...","9d861ddb":"I submitted a file and found that the rows with `count_enc_1s==0` does not affect public LB.  \nso I thought those are private data.","b9d6a6ed":"`count_enc_1s==0` can mean all values in the row are duplicated.\n\nhow many `count_enc_1s==0` rows?"}}