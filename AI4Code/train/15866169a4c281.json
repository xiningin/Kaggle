{"cell_type":{"2e680cef":"code","59fdcf64":"code","70c2c953":"code","d599f9b9":"code","2387fb07":"code","4d11ba1c":"code","93bdd1dc":"code","3a02bd0d":"code","3cde1d48":"code","f9d16f41":"code","e678282f":"code","1131c56a":"code","87c643c0":"code","7698abbf":"code","866202a7":"markdown","6251bc7c":"markdown","6d20dade":"markdown","db4c177e":"markdown"},"source":{"2e680cef":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","59fdcf64":"import pandas as pd\nimport seaborn as sn\nimport matplotlib.pyplot as plt\nimport os\nimport numpy as np\nimport time\nimport math\n\nfrom sklearn.preprocessing import LabelEncoder, MinMaxScaler\nfrom sklearn.model_selection import train_test_split, GridSearchCV, StratifiedKFold\nfrom sklearn.metrics import explained_variance_score, mean_squared_error, mean_absolute_error\nfrom sklearn.linear_model import (LinearRegression, Ridge, RidgeCV, \n                                  SGDRegressor, ElasticNet, ElasticNetCV, \n                                  Lasso, LassoCV)","70c2c953":"# Dataset\nd_train = pd.read_csv(\"..\/input\/house-prices-advanced-regression-techniques\/train.csv\", \n                      index_col='Id')\nd_test = pd.read_csv(\"..\/input\/house-prices-advanced-regression-techniques\/test.csv\", \n                     index_col='Id')","d599f9b9":"d_train","2387fb07":"# Concate data train & test so we can process it together\nY_train = d_train['SalePrice']\nd_train.drop(['SalePrice'], axis=1, inplace=True)\ndata = pd.concat([d_train,d_test], ignore_index=False)\ndata","4d11ba1c":"data.info()","93bdd1dc":"nulls = data.isnull().sum().sort_values(ascending=False)\nnull_percent = (data.isnull().sum()\/data.isnull().count()).sort_values(ascending=False)\n\nmissing_data = pd.concat([nulls, null_percent], axis=1, keys=['Total','Percent(%)'])\nmissing_data.head(20)","3a02bd0d":"d_train.drop(['Alley','PoolQC','Fence','MiscFeature'], axis=1, inplace=True)","3cde1d48":"#d_train.update(d_train.select_dtypes(include=['object']).fillna(0))","f9d16f41":"def fill_nan_values(df):\n    categorical_columns = [col for col in df.select_dtypes(include=['object']).columns]\n    for column in categorical_columns:\n        df[column] = df[column].fillna('None')\n\n    number_columns = [col for col in df.select_dtypes(include=['number']).columns \n                      if col != \"SalePrice\"]\n    for column in number_columns:\n        df[column] = df[column].fillna(0)\n        \n    return df\n\ndata = fill_nan_values(data)","e678282f":"le = LabelEncoder()\n\n# Encode the categorical variables\ncategorical_col = data.select_dtypes(include='object').columns\nfor i in categorical_col:\n    data[i]= le.fit_transform(data[i])\n    \nd_train_new = data[:len(d_train)]\nd_test_new = data[len(d_train):]\n\n# Normalize the number variables\nminmax = MinMaxScaler()\ntemp = minmax.fit_transform(d_train_new)\nX_train_normed = pd.DataFrame(temp, columns=d_train_new.columns)\n\ntemp = minmax.fit_transform(d_test_new)\nX_test_normed = pd.DataFrame(temp, columns=d_test_new.columns)","1131c56a":"X_train_normed.head()","87c643c0":"# Model ML\nmodels = [LinearRegression(),Ridge(),RidgeCV(),\n          SGDRegressor(),ElasticNet(),ElasticNetCV(),\n          Lasso(),LassoCV()]\n\nrmse_list = []\nmae_list = []\nacc_list = []\nmodel_name_list = []\nfor model in models:\n    model.fit(X_train_normed, Y_train)\n    y_pred = model.predict(X_train_normed)\n    \n    # Calculate RMSE, Mae and Acc\n    mse = mean_squared_error(Y_train, y_pred)\n    rmse = math.sqrt(mse)\n    mae = mean_absolute_error(Y_train, y_pred)\n    acc = explained_variance_score(Y_train, y_pred)\n    \n    model_name = model.__class__.__name__ \n    model_name_list.append(model_name)\n    rmse_list.append(rmse)\n    mae_list.append(mae)\n    acc_list.append(acc)\n    \n    print(model_name)\n    print('Accuracy: {}\\n'.format(acc))\n\n# Plotting\n#x = np.arange(0,len(model_name_list))  # the label locations\n#width = 0.4  # the width of the bars\n\n#fig, ax = plt.subplots(figsize=(10,5))\n#plot1 = ax.bar(x - width\/2, rmse_list, width, label='RMSE')\n#plot2 = ax.bar(x + width\/2, mae_list, width, label='MAE')\n\n#ax.set_xticklabels(model_name_list, rotation=45)\n#ax.bar_label(plot1, padding=3)\n#ax.bar_label(plot2, padding=3)\n\n#plt.legend()\n#plt.show()","7698abbf":"# Prediction\nmodel = Lasso().fit(X_train_normed, Y_train)\ny_pred_test = model.predict(X_test_normed)\n\n# Submission\nsubmission = pd.DataFrame({'Id': d_test.index, 'SalePrice': np.round(y_pred_test,2)})\nsubmission.to_csv('submission.csv', index=False)\nsubmission","866202a7":"#### Model","6251bc7c":"#### Missing values (%)","6d20dade":"#### Handle NaN values","db4c177e":"#### Encode"}}