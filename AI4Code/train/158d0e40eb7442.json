{"cell_type":{"4a2babd4":"code","9e2f7200":"code","4538056b":"code","767f09fe":"code","8ad1bd49":"code","56e670bf":"code","b2cefcec":"code","c737c578":"code","3ba005ee":"code","6de53b52":"code","2788f85d":"code","c22cb756":"code","b43dffbf":"code","d98fe55a":"code","b7299088":"code","ceb5c0ed":"code","91b62585":"code","36525a7c":"code","3207dea5":"code","8844a67a":"code","942c57fd":"code","2a6bd997":"code","4fbc54cb":"code","a29fd17a":"code","cb76ad3a":"code","1e13e788":"code","c0a363bb":"code","73ff0139":"markdown","fe6fe684":"markdown","45587420":"markdown","d640e54e":"markdown","3c744bf1":"markdown","bddbf8f3":"markdown","297181db":"markdown","54a8bca3":"markdown","8545da0c":"markdown","bba4246c":"markdown"},"source":{"4a2babd4":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","9e2f7200":"# Imports, \n\nimport pandas as ps\nimport numpy as ny\nimport datetime\n\nfrom matplotlib import pyplot as plt\nimport seaborn as sn\nimport plotly.express as plex\n%matplotlib inline\n\n\n\ntoyotas = ps.read_csv('..\/input\/toyota-used-car-listing\/toyota.csv')\ntoyotas.head(10)","4538056b":"print(\" Rows and coloumns in dataset: \",toyotas.shape[0],' x ',toyotas.shape[1])","767f09fe":"toyotas.info() ","8ad1bd49":"toyotas.isnull().sum() # Cool, pretty clean dataset.","56e670bf":"# Time to check for outliers and other wrongly placed records.\n\ntoyotas.describe()","b2cefcec":"# Screening the dataset to find out engineSize == 0 means. Does not seem valid, so dropping them.\nprint( toyotas[toyotas['engineSize'] < 1] )\ntoyotas = toyotas[toyotas['engineSize'] > 1]\ntoyotas.head(10)","c737c578":"# Screening the dataset to find out mileage <10 means. looks fine.\n\ntoyotas[toyotas['mileage'] < 10]","3ba005ee":"# Screening the dataset to find out costlier vehicles are new.\n\ntoyotas[toyotas['price'] > 50000]","6de53b52":"# Begin checking unique values among the dataset columns\n\nprint(\"\\n Unique values in model: \\n \", toyotas['model'].unique() )\nprint(\"\\n Unique values in transmission: \\n \", toyotas['transmission'].unique() )\nprint(\"\\n Unique values in fuelType: \\n \", toyotas['fuelType'].unique() )\nprint(\"\\n Unique values in year: \\n \", toyotas['year'].unique() )","2788f85d":"# Transmission other poses as a outlier here, as Yaris in 2015 came into one of 'Manual' 'Automatic' 'Semi-Auto' and not a 4th Tx variant.\ntoyotas[toyotas['transmission'] == 'Other']\n\n# Dropping 1 row.\ntoyotas = toyotas[toyotas['transmission'] != 'Other']\n\ntoyotas.head(10)","c22cb756":"plex.bar(toyotas,x='model',y='price',color='model',template = \"gridon\")\n\n# Yaris is ruling the charts !","b43dffbf":"bar2 = plex.bar(toyotas,x='transmission',y='price',color='transmission',template = \"gridon\",width=800, height=400)\nbar2.show()\n\n# Automatic transmission is holding the lead. Toyotas are known for high quality auto-boxes !","d98fe55a":"bar3 = plex.bar(toyotas,x='year',y='price',color='fuelType',template = \"gridon\",width=1200, height=600)\nbar3.show()\n\n# I would have chosen histogram, but demarkation of the bars needed for transmission type.","b7299088":"# The tax figures are grouped for the below y-axis.\n\nbar4 = plex.bar(toyotas,y='tax',x='model',template = \"presentation\",width=1200, height=600)\nbar4.show()","ceb5c0ed":"pie1 = plex.pie(toyotas, names = \"engineSize\",title = \"<b> Engine sizes spread<\/b>\",hole = 0.2, template = \"plotly_dark\",width=1200, height=600)\npie1.show()","91b62585":"# Calculating 'wearOut' as mileage \/ age(of the car)\n\nwearoutdf = toyotas.copy()\n\ncurrent_year = datetime.datetime.now().year #get current year\nwearoutdf['Age'] = current_year - wearoutdf['year']\nwearoutdf['wearout'] = wearoutdf['mileage'] - wearoutdf['Age']\nwearoutdf.head(10)\n\n\nwornout_models = wearoutdf.groupby('model')['wearout'].sum()\ntop5 = wornout_models.sort_values(ascending=False)[:5]\nbottom5 = wornout_models.sort_values(ascending=True)[:5]\n\n# Plotting the above said groupby.\nfigure, axes = plt.subplots(1, 2, figsize=(19, 11))\naxes[0].set_title('Top 5 Worn out')\naxes[1].set_title('Bottom 5 Worn out')\n\nsn.barplot(ax=axes[0],y=top5.index,x=top5.values,palette='twilight_r')\nsn.barplot(ax=axes[1],y=bottom5.index,x=bottom5.values,palette='seismic')","36525a7c":"scatter1 = plex.scatter(toyotas,x='mileage',y='price',color='year',template = \"ygridoff\",width=1200, height=600)\nscatter1.show()","3207dea5":"# Encoding for a numeric data set.\n\nfrom sklearn.preprocessing import LabelEncoder\n\nle = LabelEncoder()\ntoyotas['model'] =  le.fit_transform(toyotas['model'])\n\n\ntransmissions = ps.get_dummies(toyotas['transmission'])\nfueltypes = ps.get_dummies(toyotas['fuelType'])\ntoyotas = ps.concat([toyotas,transmissions,fueltypes],axis=1)\n\ntoyotas = toyotas.drop(columns=['transmission','fuelType']) # Reducing dimension count by 1 \ntoyotas.head(10)","8844a67a":"plt.figure(figsize=(22,11))\nsn.heatmap(toyotas.corr(),cmap='icefire_r')\nplt.title(\"Correlation Matrix\")","942c57fd":"y = toyotas['price']\nX = toyotas.drop(columns=['price'])\n\nfrom sklearn.feature_selection import mutual_info_regression\n\ndef make_mi_scores(X, y):\n    mi_scores = mutual_info_regression(X, y, discrete_features='auto')\n    mi_scores = ps.Series(mi_scores, name=\"MI Scores\", index=X.columns)\n    mi_scores = mi_scores.sort_values(ascending=False)\n    return mi_scores\n\nmi_scores = make_mi_scores(X, y)\nmi_scores[::]\n\n# Let's see if by using them is a good or a bad idea.","2a6bd997":"\nfrom sklearn.linear_model import LinearRegression\nfrom sklearn.ensemble import RandomForestRegressor\nfrom xgboost import XGBRegressor\n\nfrom sklearn.model_selection import train_test_split\n\nfrom sklearn.metrics import mean_absolute_error,mean_squared_error, r2_score,accuracy_score\n\n","4fbc54cb":"# Setting up a common def for all models' calls. \n\n#T-T-S\nX_train,X_test,y_train,y_test = train_test_split(X,y,train_size=0.75)\n    \nlin_reg_model = LinearRegression()\nrf_reg_model = RandomForestRegressor()\nxgb_reg_model = XGBRegressor()\n\nscores = {}\n\ndef get_model_scores(model,modelstr):\n    \n    \n    #Training the model\n    model.fit(X_train,y_train)\n    \n    # Predicting\n    predicted = model.predict(X_test)\n    \n    print(\"\\n \",modelstr,\" ------------\")\n    print(\"\\n R2 Score: \",r2_score(y_test, predicted))\n    print('\\n MAE:{}'.format(mean_absolute_error(y_test,predicted)))\n    print('\\n MSE:{}'.format(mean_squared_error(y_test,predicted)))\n    print('\\n RMSE:{}'.format(ny.sqrt(mean_squared_error(y_test,predicted))))\n    \n    scores.update({modelstr : (r2_score(y_test, predicted) * 100) })","a29fd17a":"\nget_model_scores(lin_reg_model,\"LinearRegression\")\nget_model_scores(rf_reg_model,\"RandomForestRegressor\")\nget_model_scores(xgb_reg_model,\"XGBRegressor\")\n","cb76ad3a":"toyotas.head(10)","1e13e788":"# for now: taking a sample_input record from the dataset.\n\nsample_input = [[5,2020,516,150,33.2,2.0,0,1,0,0,0,0,1]]\n\nprint(\"Linear Reg model's price: \",lin_reg_model.predict(sample_input))\nprint(\"RF Reg model's price: \",rf_reg_model.predict(sample_input))\nprint(\"XGB Reg model's price: \",xgb_reg_model.predict(ny.asarray(sample_input)))","c0a363bb":"# Plotting scores\n\nplt.figure(figsize=(18, 7))\n\nkeys1 = list(scores.keys())\nvalues1 = list(scores.values())\n\nsn.barplot(y=keys1,x=values1,palette='OrRd')","73ff0139":"# 3.1 Predict manually","fe6fe684":"# 1. Primary checks and data cleaning","45587420":"**Plotting a few use-cases:**\n\n1. Model vs Price - Which model rules the price charts.\n2. Transmission vs Price - Which Transmission rules the price charts.\n3. Fuel type vs Price - Which fueltype commands higher prices.\n4. Tax vs Model\n5. Engine sizes\n6. Which models were driven most given thier age.('Worn out factor')\n7. Engine Size vs Price","d640e54e":"# 4. Observations\n\n1. Random forest\/XGB models have predicted prices well.\n\n2. Dataset's correlation does not nessacarily matches the mutual information scores. When eliminated features based on MI scores the predicted metrics were higher.\n\n3. KFOLD iterations are coming up... Keeping this notebook active.\n\n4. Suggestions and comments are welcome !\n\n**Thank you for your time !**","3c744bf1":"![](https:\/\/pbs.twimg.com\/media\/EOLiIbVXkAIkoCm.jpg)","bddbf8f3":"**Let our friend be given a chance for selling his car. Modify the below 'sample_input' to get expected price range.**","297181db":"# 3. Data Modelling","54a8bca3":"# 2. Visualizing the dataset.","8545da0c":"#                                  Used Toyota cars prices - EDA and Prediction.","bba4246c":"# Introduction\n\n**Here's what I plan to do:**\n\n1. To take a deep dive into dataset's variables, clean the data and visualize important use-cases.\n\n2. Consider 'price' as the independent variables and feature engineer accordingly.\n\n3. Use Mutual Information scores to get an idea of which features to select\/are of importance.\n\n4. Use KFOLD to understand dataset bins split. Build models and predict prices.\n\n5. Record scores to see which regressor does well."}}