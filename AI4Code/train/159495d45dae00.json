{"cell_type":{"ae7c3db6":"code","55cc3927":"code","07395a43":"code","aa557e6c":"code","4d9896c6":"code","6b404f70":"code","871fa4bf":"code","d7d84720":"code","be0a51e2":"code","71dd6321":"code","71b04b11":"code","5d48e54a":"code","85f36e4c":"code","65f53e2a":"code","c1b2e2ef":"code","eec78f29":"code","ad01926d":"code","d51d3432":"code","3b86da9b":"code","b5f57325":"code","93538d52":"code","5224cc7c":"markdown","644c4103":"markdown","da8f5aec":"markdown","efc0fdb4":"markdown","4370e7c7":"markdown","a743d9e1":"markdown","d0184fe5":"markdown","495a58df":"markdown","95f1c957":"markdown"},"source":{"ae7c3db6":"#Importing Necessary Libraries.\nfrom PIL import Image\nimport numpy as np\nimport os\nimport cv2\nimport keras\nfrom keras.utils import np_utils\nfrom keras.models import Sequential\nfrom keras.layers import Conv2D,MaxPooling2D,Dense,Flatten,Dropout","55cc3927":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory\n\nimport os\nprint(os.listdir(\"..\/input\"))\n\n# Any results you write to the current directory are saved as output.\n","07395a43":"data=[]\nlabels=[]\nmen=os.listdir(\"..\/input\/data\/men\/\")\nprint(men)\nfor a in men:\n    try:\n        image=cv2.imread(\"..\/input\/data\/men\/\"+a)\n        image_from_array = Image.fromarray(image, 'RGB')\n        size_image = image_from_array.resize((200, 200))\n        data.append(np.array(size_image))\n        labels.append(0)\n    except AttributeError:\n        print(\"\")\nwomen=os.listdir(\"..\/input\/data\/women\/\")\nfor b in women:\n    try:\n        image=cv2.imread(\"..\/input\/data\/women\/\"+b)\n        image_from_array = Image.fromarray(image, 'RGB')\n        size_image = image_from_array.resize((200, 200))\n        data.append(np.array(size_image))\n        labels.append(1)\n    except AttributeError:\n        print(\"\")\n\n","aa557e6c":"print(\"data Prepearaion finished\")","4d9896c6":"Cells=np.array(data)\nlabels=np.array(labels)\nprint(Cells.shape)\nprint(labels.shape)","6b404f70":"np.save(\"Cells\",Cells)\nnp.save(\"labels\",labels)","871fa4bf":"Cells=np.load(\"Cells.npy\")\nlabels=np.load(\"labels.npy\")","d7d84720":"s=np.arange(Cells.shape[0])\nnp.random.shuffle(s)\nCells=Cells[s]\nlabels=labels[s]","be0a51e2":"num_classes=len(np.unique(labels))\nlen_data=len(Cells)","71dd6321":"(x_train,x_test)=Cells[(int)(0.1*len_data):],Cells[:(int)(0.1*len_data)]\nx_train = x_train.astype('float32')\/255 # As we are working on image data we are normalizing data by divinding 255.\nx_test = x_test.astype('float32')\/255\ntrain_len=len(x_train)\ntest_len=len(x_test)","71b04b11":"(y_train,y_test)=labels[(int)(0.1*len_data):],labels[:(int)(0.1*len_data)]\nprint(y_train)\nprint(y_test)\nprint(x_train.shape)\nprint(y_train.shape)","5d48e54a":"#Doing One hot encoding as classifier has multiple classes\ny_train=keras.utils.to_categorical(y_train,2)\ny_test=keras.utils.to_categorical(y_test,2)","85f36e4c":"#creating sequential model\nmodel=Sequential()\nmodel.add(Conv2D(filters=16,kernel_size=2,padding=\"same\",activation=\"relu\",input_shape=(200,200,3)))\nmodel.add(MaxPooling2D(pool_size=2))\nmodel.add(Conv2D(filters=32,kernel_size=2,padding=\"same\",activation=\"relu\"))\nmodel.add(MaxPooling2D(pool_size=2))\nmodel.add(Conv2D(filters=64,kernel_size=2,padding=\"same\",activation=\"relu\"))\nmodel.add(MaxPooling2D(pool_size=2))\nmodel.add(Dropout(0.2))\nmodel.add(Flatten())\nmodel.add(Dense(500,activation=\"relu\"))\nmodel.add(Dropout(0.2))\nmodel.add(Dense(2,activation=\"softmax\"))#2 represent output layer neurons \nmodel.summary()","65f53e2a":"# compile the model with loss as categorical_crossentropy and using adam optimizer you can test result by trying RMSProp as well as Momentum\nmodel.compile(loss='categorical_crossentropy', optimizer='adam', metrics=['accuracy'])","c1b2e2ef":"#Fit the model with min batch size as 50[can tune batch size to some factor of 2^power ] \nmodel.fit(x_train,y_train,batch_size=128,epochs=30)","eec78f29":"# Save the model weights:\nfrom keras.models import load_model\nmodel.save('men_women.h5')","ad01926d":"from keras.models import load_model\nimport matplotlib.pyplot as plt\nfrom PIL import Image\nfrom PIL import Image\nimport numpy as np\nimport os\nimport cv2\ndef convert_to_array(img):\n    im = cv2.imread(img)\n    cv_rgb =cv2.cvtColor(im,cv2.COLOR_BGR2RGB)\n    plt.imshow(cv_rgb)\n    plt.show()\n    img_ = Image.fromarray(im, 'RGB')\n    image = img_.resize((200, 200))\n    \n    return np.array(image)\ndef get_cell_name(label):\n    if label==0:\n        return \"men\"\n    if label==1:\n        return \"women\"\ndef predict_cell(file):\n    model = load_model('men_women.h5')\n    print(\"Predicting Type of people Image.................................\")\n    ar=convert_to_array(file)\n    ar=ar\/255\n    label=1\n    a=[]\n    a.append(ar)\n    a=np.array(a)\n    score=model.predict(a,verbose=1)\n    print(score)\n    label_index=np.argmax(score)\n    print(label_index)\n    acc=np.max(score)\n    Cell=get_cell_name(label_index)\n    return Cell,\"The people Cell is a \"+Cell+\" with accuracy =    \"+str(acc)\npredict_cell('..\/input\/data\/men\/00000001.jpg')\npredict_cell('..\/input\/data\/women\/00000002.jpg')\n","d51d3432":"#Check the accuracy on Test data:\naccuracy = model.evaluate(x_test, y_test, verbose=1)\nprint('\\n', 'Test_Accuracy:-', accuracy[1])","3b86da9b":"# Distribution graphs (histogram\/bar graph) of column data\ndef plotPerColumnDistribution(df, nGraphShown, nGraphPerRow):\n    nunique = df.nunique()\n    df = df[[col for col in df if nunique[col] > 1 and nunique[col] < 50]] # For displaying purposes, pick columns that have between 1 and 50 unique values\n    nRow, nCol = df.shape\n    columnNames = list(df)\n    nGraphRow = (nCol + nGraphPerRow - 1) \/ nGraphPerRow\n    plt.figure(num = None, figsize = (6 * nGraphPerRow, 8 * nGraphRow), dpi = 80, facecolor = 'w', edgecolor = 'k')\n    for i in range(min(nCol, nGraphShown)):\n        plt.subplot(nGraphRow, nGraphPerRow, i + 1)\n        columnDf = df.iloc[:, i]\n        if (not np.issubdtype(type(columnDf.iloc[0]), np.number)):\n            valueCounts = columnDf.value_counts()\n            valueCounts.plot.bar()\n        else:\n            columnDf.hist()\n        plt.ylabel('counts')\n        plt.xticks(rotation = 90)\n        plt.title(f'{columnNames[i]} (column {i})')\n    plt.tight_layout(pad = 1.0, w_pad = 1.0, h_pad = 1.0)\n    plt.show()\n","b5f57325":"# Correlation matrix\ndef plotCorrelationMatrix(df, graphWidth):\n    filename = df.dataframeName\n    df = df.dropna('columns') # drop columns with NaN\n    df = df[[col for col in df if df[col].nunique() > 1]] # keep columns where there are more than 1 unique values\n    if df.shape[1] < 2:\n        print(f'No correlation plots shown: The number of non-NaN or constant columns ({df.shape[1]}) is less than 2')\n        return\n    corr = df.corr()\n    plt.figure(num=None, figsize=(graphWidth, graphWidth), dpi=80, facecolor='w', edgecolor='k')\n    corrMat = plt.matshow(corr, fignum = 1)\n    plt.xticks(range(len(corr.columns)), corr.columns, rotation=90)\n    plt.yticks(range(len(corr.columns)), corr.columns)\n    plt.gca().xaxis.tick_bottom()\n    plt.colorbar(corrMat)\n    plt.title(f'Correlation Matrix for {filename}', fontsize=15)\n    plt.show()\n","93538d52":"# Scatter and density plots\ndef plotScatterMatrix(df, plotSize, textSize):\n    df = df.select_dtypes(include =[np.number]) # keep only numerical columns\n    # Remove rows and columns that would lead to df being singular\n    df = df.dropna('columns')\n    df = df[[col for col in df if df[col].nunique() > 1]] # keep columns where there are more than 1 unique values\n    columnNames = list(df)\n    if len(columnNames) > 10: # reduce the number of columns for matrix inversion of kernel density plots\n        columnNames = columnNames[:10]\n    df = df[columnNames]\n    ax = pd.plotting.scatter_matrix(df, alpha=0.75, figsize=[plotSize, plotSize], diagonal='kde')\n    corrs = df.corr().values\n    for i, j in zip(*plt.np.triu_indices_from(ax, k = 1)):\n        ax[i, j].annotate('Corr. coef = %.3f' % corrs[i, j], (0.8, 0.2), xycoords='axes fraction', ha='center', va='center', size=textSize)\n    plt.suptitle('Scatter and Density Plot')\n    plt.show()\n","5224cc7c":"## Exploratory Analysis\nTo begin this exploratory analysis, first import libraries and define functions for plotting the data using `matplotlib`. Depending on the data, not all plots will be made. (Hey, I'm just a simple kerneling bot, not a Kaggle Competitions Grandmaster!)","644c4103":"# Use of Model","da8f5aec":"Oh, no! There are no automatic insights available for the file types used in this dataset. As your Kaggle kerneler bot, I'll keep working to fine-tune my hyper-parameters. In the meantime, please feel free to try a different dataset.","efc0fdb4":"# Create Sequential Model:\nHere I will be using Relu{max(0,z)}, You can try tanh\/sigmoid\/Leaky Relu for finding performance on various activation functions.Our output layer will be softmax activation rather than sigmoid as we have more than one class to classify. softmax activation calculates e^value\/sum(all_values_in_axis[0 or 1])","4370e7c7":"## Introduction\nGreetings from the Kaggle bot! This is an automatically-generated kernel with starter code demonstrating how to read in the data and begin exploring. If you're inspired to dig deeper, click the blue \"Fork Notebook\" button at the top of this kernel to begin editing.","a743d9e1":"# Import Libraries\nImport Necessary Libraries. Here I will be using Keras library for making classifier. We will also requires numpy and Image for making image to array implementation. We will be using sequential model here in the notebook. ","d0184fe5":"## Conclusion\nThis concludes your starter analysis! To go forward from here, click the blue \"Fork Notebook\" button at the top of this kernel. This will create a copy of the code and environment for you to edit. Delete, modify, and add code as you please. Happy Kaggling!","495a58df":"# One hot encoding:\nHere the problem has two classes so last output layer of neural network will have 2 neurons one for each class, One hot encoding will help us to change labels in binary format.\nexample:\n    2 can be represented as [1 0] if output layer has 2 neurons and [0 0 1 0] if output has 4 neurons\/classes","95f1c957":"# Data Prepearaion\nData Preperation: We will make data and labels list where data will be image to array implementatation which contains RGB values of each image. and label will be class of cells here I will be taking 0 and 1 for two classes"}}