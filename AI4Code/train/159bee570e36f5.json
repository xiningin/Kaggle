{"cell_type":{"a3a647df":"code","1273f858":"code","6132cbba":"code","0ddc1ace":"code","e5036ded":"code","ad987d8c":"code","dcc14d6e":"code","815579d5":"code","b4743ee7":"code","3ab03e2b":"code","b55e6524":"markdown","374cbd19":"markdown","2e200588":"markdown","52836fc1":"markdown"},"source":{"a3a647df":"%matplotlib inline\nimport numpy as np\nimport matplotlib.pyplot as plt\nfrom os import makedirs\nfrom os.path import join, exists, expanduser\nfrom keras.preprocessing import image\nfrom keras.applications.resnet50 import ResNet50\nfrom keras.applications.resnet50 import preprocess_input\nfrom keras.applications.imagenet_utils import decode_predictions","1273f858":"!ls ..\/input","6132cbba":"cache_dir = expanduser(join('~', '.keras'))\nif not exists(cache_dir):\n    makedirs(cache_dir)\nmodels_dir = join(cache_dir, 'models')\nif not exists(models_dir):\n    makedirs(models_dir)","0ddc1ace":"!cp ..\/input\/resnet* ~\/.keras\/models\/\n!cp ..\/input\/imagenet_class_index.json ~\/.keras\/models\/","e5036ded":"!ls ~\/.keras\/models","ad987d8c":"fig, ax = plt.subplots(1, figsize=(12, 10))\nimg = image.load_img('..\/input\/Kuszma.JPG')\nimg = image.img_to_array(img)\nax.imshow(img \/ 255.) \nax.axis('off')\nplt.show()","dcc14d6e":"resnet = ResNet50(weights='imagenet')","815579d5":"img = image.load_img('..\/input\/Kuszma.JPG', target_size=(224, 224))\nimg = image.img_to_array(img)\nprint(img.max(),img.min())\nplt.imshow(img \/ 255.)\nx = preprocess_input(np.expand_dims(img.copy(), axis=0))\nprint(x.max(),x.min())\npreds = resnet.predict(x)\ndecode_predictions(preds, top=5)","b4743ee7":"img = image.load_img('..\/input\/Kuszma.JPG', target_size=(224, 224))\nimg = image.img_to_array(img)\nprint(img.max(),img.min())\nplt.imshow(img \/ 255.)\nx = preprocess_input(np.expand_dims(img.copy(), axis=0),mode='tf')\nprint(x.max(),x.min())\npreds = resnet.predict(x)\ndecode_predictions(preds, top=5)","3ab03e2b":"img = image.load_img('..\/input\/Kuszma.JPG', target_size=(224, 224))\nimg = image.img_to_array(img)\nprint(img.max(),img.min())\nplt.imshow(img \/ 255.)\nx = preprocess_input(np.expand_dims(img.copy(), axis=0),mode='torch')\nprint(x.max(),x.min())\npreds = resnet.predict(x)\ndecode_predictions(preds, top=5)","b55e6524":"## Use model with pretrained weights","374cbd19":"Becarefull in using preprocessing mode. if using wrong preprocessing we will get much wrong answer too... :p","2e200588":"## Copy weigths to .keras\/models","52836fc1":"## Read example image"}}