{"cell_type":{"f76d7435":"code","257b7762":"code","e886d3f5":"code","5ef58935":"code","1d08c876":"code","f05ea976":"code","304416b1":"code","7e242ef8":"code","d0981d40":"code","7031bde1":"code","6c4ec58b":"code","b1ff5566":"code","57598208":"code","b8a9396c":"code","63f88ed9":"code","fac514fd":"code","053393ae":"code","a0c9a4dd":"code","1fb19a60":"code","d6c6163e":"code","e628ac7d":"code","01d82249":"code","3e1c7840":"code","6a251c77":"code","a99a8f83":"code","a133e1d9":"code","b3768fd5":"code","d5380442":"markdown","ad975ee9":"markdown","02b7fd0a":"markdown","9942c7a6":"markdown","34f5733d":"markdown","cbc76d58":"markdown","55ff6398":"markdown","e2820054":"markdown","0c13b794":"markdown","50b21fa6":"markdown","cc6af67f":"markdown","e11ba499":"markdown"},"source":{"f76d7435":"import numpy as np\nimport pandas as pd \nfrom pandas import Series, DataFrame\nimport seaborn as sns\nfrom matplotlib import pyplot as plt\nfrom PIL import Image","257b7762":"\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))","e886d3f5":"df=pd.read_csv('\/kaggle\/input\/iris-dataset-uci\/Iris.csv')","5ef58935":"df.head()","1d08c876":"df.tail()","f05ea976":"df.info()","304416b1":"df.describe()","7e242ef8":"df.shape # The dimensions of the datasets","d0981d40":"df.drop('Id',axis=1,inplace=True)","7031bde1":"fig = df[df.Species == 'Iris-setosa'].plot(kind='scatter', x='SepalLengthCm', y='SepalWidthCm', color='orange', label='Setosa')\ndf[df.Species == 'Iris-versicolor'].plot(kind='scatter', x='SepalLengthCm', y='SepalWidthCm', color='blue', label='Versicolor', ax=fig)\ndf[df.Species == 'Iris-virginica'].plot(kind='scatter', x='SepalLengthCm', y='SepalWidthCm', color='green', label='Virginica', ax=fig)\n\nfig.set_xlabel('Sepal Length')\nfig.set_ylabel('Sepal Width')\nfig.set_title('Sepal Length Vs Width')\n\nfig=plt.gcf()\nfig.set_size_inches(10, 7)\nplt.show()","6c4ec58b":"sns.FacetGrid(df, hue='Species', size=5).map(plt.scatter, 'SepalLengthCm', 'SepalWidthCm').add_legend()\nplt.savefig('Sepal_LengthVsWidth_1.jpeg')","b1ff5566":"fig = df[df.Species == 'Iris-setosa'].plot(kind='scatter', x='PetalLengthCm', y='PetalWidthCm', color='orange', label='Setosa')\ndf[df.Species == 'Iris-versicolor'].plot(kind='scatter', x='PetalLengthCm', y='PetalWidthCm', color='blue', label='Versicolor', ax=fig)\ndf[df.Species == 'Iris-virginica'].plot(kind='scatter', x='PetalLengthCm', y='PetalWidthCm', color='green', label='Virginica', ax=fig)\n\nfig.set_xlabel('Petal Length')\nfig.set_ylabel('Petal Width')\nfig.set_title('Petal Length Vs Width')\n\nfig=plt.gcf()\nfig.set_size_inches(10, 7)\nplt.show()\nplt.savefig('Petal_LengthVsWidth.jpeg')","57598208":"df.hist(edgecolor='red', linewidth=1.2)\nfig = plt.gcf()\nfig.set_size_inches(12,6)\nplt.show()","b8a9396c":"plt.figure(figsize=(15,10))\nplt.subplot(2,2,1)\nsns.violinplot(x='Species', y = 'SepalLengthCm', data=df)\nplt.subplot(2,2,2)\nsns.violinplot(x='Species', y = 'SepalWidthCm', data=df)\n\nplt.subplot(2,2,3)\nsns.violinplot(x='Species', y = 'PetalLengthCm', data=df)\nplt.subplot(2,2,4)\nsns.violinplot(x='Species', y = 'PetalWidthCm', data=df)\nplt.savefig('violionplot.jpeg')","63f88ed9":"from sklearn.preprocessing import LabelEncoder   ## Converting the labels into numeric form to convert them into machine readable form","fac514fd":"encoder = LabelEncoder()\ndf['Species'] = encoder.fit_transform(df['Species'])","053393ae":"df.head()","a0c9a4dd":"X = df.drop(columns = ['Species'],axis=1)\ny = df['Species']","1fb19a60":"from sklearn.model_selection import train_test_split","d6c6163e":"X_train,X_test,y_train,y_test = train_test_split(X,y,test_size=0.3,random_state=0) # train=70% and test=30% ","e628ac7d":"print(X_train.shape)\nprint(X_test.shape)","01d82249":"print(y_train.shape)\nprint(y_test.shape)","3e1c7840":"from sklearn.linear_model import LogisticRegression\nfrom sklearn.svm import SVC\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.metrics import accuracy_score","6a251c77":"log_reg = LogisticRegression()     ## Assigning the model \n\nlog_reg.fit(X_train, y_train)      ## Fitting the model with the training data\ny_pred = log_reg.predict(X_test) # Predict The Model\n\nprint(f'The accuracy of the Logistic Regression Model is: {accuracy_score(y_pred, y_test)*100}')  ## Printing the accuracy of the model","a99a8f83":"svc = SVC() # select the svc algorithm\n\n# we train the algorithm with training data and training output\nsvc.fit(X_train, y_train)\n\n# we pass the testing data to the stored algorithm to predict the outcome\ny_pred = svc.predict(X_test)\n\nprint(f'The accuracy of the SVC is: {accuracy_score(y_pred, y_test)*100}') # we check the accuracy of the algorithm","a133e1d9":"dec_tree_class = DecisionTreeClassifier()\n\n# we train the algorithm with training data and training output\ndec_tree_class.fit(X_train, y_train)\n\n# we pass the testing data to the stored algorithm to predict the outcome\ny_pred = dec_tree_class.predict(X_test)\n\nprint(f'The accuracy of the Decision Tree Classifier Model is: {accuracy_score(y_pred, y_test)*100}')","b3768fd5":"KNC = KNeighborsClassifier()\n\n# we train the algorithm with training data and training output\nKNC.fit(X_train, y_train)\n\n# we pass the testing data to the stored algorithm to predict the outcome\ny_pred = KNC.predict(X_test)\n\nprint(f'The accuracy of the k-Nearest Neighbours Model is: {accuracy_score(y_pred, y_test)*100}')","d5380442":"# Now Check the shape of the X_train and X_test also y_train and y_test","ad975ee9":"# Now SVC Model","02b7fd0a":"# Exploratory Data Analysis EDA","9942c7a6":"# Now Logistic Regression","34f5733d":"# Clean the data, as there is redundant ID column.","cbc76d58":"# Now DecisionTreeClassifier","55ff6398":"# Now k-Nearest Neighbours","e2820054":"# Now Modeling Part","0c13b794":"# Now We can apart from Sepal Width are not normally distributed.","50b21fa6":"# Splitting the iris dataset\n","cc6af67f":"# Import Necessary Packages","e11ba499":"# Now Label Encoder"}}