{"cell_type":{"d4558b6f":"code","ff1adad4":"code","7c6bcb04":"code","5e7dae45":"code","96f4cbf7":"code","7ff5dd66":"code","03ebe8cf":"code","2b6d5acf":"code","64f87ad6":"code","79b36d22":"code","ce217a12":"code","f9265840":"code","8670807c":"code","24242692":"code","9da158da":"code","da2d974f":"code","1377e613":"code","7f3eac64":"code","994479bb":"code","59fdd81a":"code","0b313ffd":"code","fcc3eda9":"code","1e492a24":"code","9a116092":"code","e56bcb1c":"code","281c29ad":"code","a1fd75d2":"code","ebc6a923":"code","264b40dc":"code","c7bab91e":"code","24d49b14":"code","6a0d8e85":"code","0031465d":"markdown","f1798c1c":"markdown","7053d3c6":"markdown","2c4d0f3b":"markdown","88c43a3d":"markdown","ab12d4f8":"markdown"},"source":{"d4558b6f":"import numpy as np\nimport pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import fbeta_score, accuracy_score\nfrom sklearn.metrics import classification_report\n\n# TODO:\n# - Clean functions\n# - Training\n# - Predicting","ff1adad4":"def remove_columns(data, columns):\n    data.drop(columns, axis=1, inplace=True)\n    \n    return data","7c6bcb04":"# set_median(data, 'Age')\ndef set_median(data, column):\n    age_median = np.median(data[data[column].notnull()][column])\n    data[column] = data[column].fillna(age_median)\n    \n    return data","5e7dae45":"def fill_nan_values(data, column, value = -1):\n    data[column] = data[column].fillna(value)\n    \n    return data","96f4cbf7":"def factorize_column(data, column):\n    labels, uniques = pd.factorize(data[column])\n    data[column] = labels\n    \n    return data","7ff5dd66":"def normalize_columns(data, columns):\n    scaler = MinMaxScaler()\n    data[columns] = scaler.fit_transform(data[columns])\n    \n    return data","03ebe8cf":"data = pd.read_csv('..\/input\/train.csv')","2b6d5acf":"# Remove some columns\ndata = remove_columns(data, ['PassengerId', 'Name', 'Ticket'])","64f87ad6":"data = set_median(data, 'Age')","79b36d22":"data = fill_nan_values(data, 'Cabin')\ndata = factorize_column(data, 'Cabin')","ce217a12":"data = fill_nan_values(data, 'Embarked')\ndata = factorize_column(data, 'Embarked')","f9265840":"data = normalize_columns(data, ['Age', 'Fare'])","8670807c":"# One-hot the data\ndata = pd.get_dummies(data)","24242692":"# Split data\n\noutput = data['Survived']\ndata = remove_columns(data, 'Survived')\nX_train, X_dev, y_train, y_dev = train_test_split(data, output, test_size = 0.3, random_state = 0)","9da158da":"def show_scores(y, predicted):\n    acc = accuracy_score(y, predicted)\n    fbeta = fbeta_score(y, predicted, beta=0.5)\n    \n    print(classification_report(y, predicted))","da2d974f":"# Gaussian default model\nfrom sklearn.naive_bayes import GaussianNB\nclf = GaussianNB()\nclf.fit(X_train, y_train)\n\npred_train_nb = clf.predict(X_train)\npred_dev_nb = clf.predict(X_dev)\n\nprint(\"TEST\")\nshow_scores(y_train, pred_train_nb)\nprint(\"DEV\")\nshow_scores(y_dev, pred_dev_nb)","1377e613":"# AdaBoost default model\nfrom sklearn.ensemble import AdaBoostClassifier\nclf_ada = AdaBoostClassifier(random_state = 0)\nclf_ada.fit(X_train, y_train)\n\npred_train_ada = clf_ada.predict(X_train)\npred_dev_ada = clf_ada.predict(X_dev)\n\nprint(\"TEST\")\nshow_scores(y_train, pred_train_ada)\nprint(\"DEV\")\nshow_scores(y_dev, pred_dev_ada)","7f3eac64":"# Use GridSearch to improve the parameters of AdaBoost classifier\nfrom sklearn.model_selection import GridSearchCV\n\nparams = {\"n_estimators\":[100, 150, 200, 250], \"learning_rate\":[0.001, 0.01, 0.1, 1, 1.5, 2], \"algorithm\": [\"SAMME\", \"SAMME.R\"]}\ngrd = GridSearchCV(clf_ada, params, cv=10)\n\ngrd.fit(X_train, y_train)","994479bb":"print(grd.best_score_)\nprint(grd.best_params_)","59fdd81a":"# Create a new AdaBoost classifier whith the parameters above\nclf_ada_grd = AdaBoostClassifier(algorithm='SAMME', learning_rate=1, n_estimators=150, random_state=0)\nclf_ada_grd.fit(X_train, y_train)\n\np_train = clf_ada_grd.predict(X_train)\np_dev = clf_ada_grd.predict(X_dev)\n\nprint(\"TEST\")\nshow_scores(y_train, p_train)\nprint(\"DEV\")\nshow_scores(y_dev, p_dev)","0b313ffd":"# Load test data\ntest_data = pd.read_csv('..\/input\/test.csv')","fcc3eda9":"# Remove some columns\ntest_data = remove_columns(test_data, ['PassengerId', 'Name', 'Ticket'])","1e492a24":"test_data = set_median(test_data, 'Age')","9a116092":"test_data = fill_nan_values(test_data, 'Cabin')\ntest_data = factorize_column(test_data, 'Cabin')","e56bcb1c":"test_data = fill_nan_values(test_data, 'Embarked')\ntest_data = factorize_column(test_data, 'Embarked')","281c29ad":"test_data = fill_nan_values(test_data, 'Fare')","a1fd75d2":"test_data = normalize_columns(test_data, ['Age', 'Fare'])","ebc6a923":"# One-hot the data\ntest_data = pd.get_dummies(test_data)","264b40dc":"p_gaussian = clf.predict(test_data)\nprint(p_gaussian)","c7bab91e":"p_ada = clf_ada.predict(test_data)\nprint(p_ada)","24d49b14":"p_ada_grd = clf_ada_grd.predict(test_data)\nprint(p_ada_grd)","6a0d8e85":"passengers_id = pd.read_csv('..\/input\/test.csv')['PassengerId']\nsubmission = pd.DataFrame({'PassengerId':passengers_id,'Survived':p_ada_grd})\n\nfilename = 'titanic_predictions_2.csv'\n\nsubmission.to_csv(filename,index=False)\n\nprint(filename)","0031465d":"# Prepare training data","f1798c1c":"# Training and validate training data","7053d3c6":"# Create submission file for Kaggle","2c4d0f3b":"# Functions to clean data","88c43a3d":"# Predict","ab12d4f8":"# Prepare test data"}}