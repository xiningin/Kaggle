{"cell_type":{"cb2309fe":"code","100296c6":"code","b25a7019":"code","3f84d4e9":"code","8da3aa42":"code","0bb26895":"code","6d9dcd60":"code","077960b9":"markdown","345683a5":"markdown","ec5eae77":"markdown","3a7b40e7":"markdown","d81f8545":"markdown","37f3f8d9":"markdown"},"source":{"cb2309fe":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport matplotlib.patches as patches\nimport matplotlib as mpl\nimport math\n%matplotlib inline","100296c6":"train = pd.read_csv('..\/input\/nfl-big-data-bowl-2020\/train.csv')","b25a7019":"#correct the team names\ntrain['VisitorTeamAbbr'] = train['VisitorTeamAbbr'].replace('ARI','ARZ')\ntrain['HomeTeamAbbr'] = train['HomeTeamAbbr'].replace('ARI','ARZ')\ntrain['VisitorTeamAbbr'] = train['VisitorTeamAbbr'].replace('BAL','BLT')\ntrain['HomeTeamAbbr'] = train['HomeTeamAbbr'].replace('BAL','BLT')\ntrain['VisitorTeamAbbr'] = train['VisitorTeamAbbr'].replace('CLE','CLV')\ntrain['HomeTeamAbbr'] = train['HomeTeamAbbr'].replace('CLE','CLV')\ntrain['VisitorTeamAbbr'] = train['VisitorTeamAbbr'].replace('HOU','HST')\ntrain['HomeTeamAbbr'] = train['HomeTeamAbbr'].replace('HOU','HST')\n\n# Player is on offense\ntrain['home_possession'] = (train['PossessionTeam'] == train['HomeTeamAbbr'])\ntrain['team_binary'] = [True if i==\"home\" else False for i in train['Team']]\ntrain['on_offense'] = (train['team_binary'] == train['home_possession'])\n\n#correct X Y and Dir\nmask = train[\"PlayDirection\"] != \"right\"\ntrain.loc[mask, \"X\"] = 120 - train.loc[mask, \"X\"]\ntrain[\"X\"] -= 10\ntrain.loc[mask, \"Y\"] = 160\/3 - train.loc[mask, \"Y\"]\ntrain.loc[mask, \"Dir\"] = (train.loc[mask, \"Dir\"] + 180) % 360\ntrain.loc[mask, \"Orientation\"] = np.mod(180 + train.loc[mask, 'Orientation'], 360)\n\n#Yrds from own goal\ntrain['YardsFromOwnGoal'] = train['YardLine']\ntrain.loc[(train.FieldPosition!=train.PossessionTeam), 'YardsFromOwnGoal'] = (50 + (50 - train.loc[(train.FieldPosition!=train.PossessionTeam), 'YardsFromOwnGoal']))\ntrain.loc[(train.YardLine==50), 'YardsFromOwnGoal'] = 50\n\n#is Rusher\ntrain['isRusher'] = (train['NflIdRusher'] == train['NflId'])\ntrain[\"TeamOnOffense\"] = \"away\"\ntrain.loc[train[\"HomeTeamAbbr\"] == train[\"PossessionTeam\"], \"TeamOnOffense\"] = \"home\"\ntrain[\"IsOnOffense\"] = train[\"Team\"] == train[\"TeamOnOffense\"]","3f84d4e9":"def create_football_field(linenumbers=True,\n                          endzones=True,\n                          highlight_line=False,\n                          highlight_line_number=50,\n                          highlighted_name='Line of Scrimmage',\n                          fifty_is_los=False,\n                          figsize=(12*2, 6.33*2)):\n    \"\"\"\n    Function that plots the football field for viewing plays.\n    Allows for showing or hiding endzones.\n    \"\"\"\n    rect = patches.Rectangle((0, 0), 120, 53.3, linewidth=0.1,\n                             edgecolor='r', facecolor='darkgreen', zorder=0)\n\n    fig, ax = plt.subplots(1, figsize=figsize)\n    ax.add_patch(rect)\n\n    plt.plot([10, 10, 10, 20, 20, 30, 30, 40, 40, 50, 50, 60, 60, 70, 70, 80,\n              80, 90, 90, 100, 100, 110, 110, 120, 0, 0, 120, 120],\n             [0, 0, 53.3, 53.3, 0, 0, 53.3, 53.3, 0, 0, 53.3, 53.3, 0, 0, 53.3,\n              53.3, 0, 0, 53.3, 53.3, 0, 0, 53.3, 53.3, 53.3, 0, 0, 53.3],\n             color='white')\n    if fifty_is_los:\n        plt.plot([60, 60], [0, 53.3], color='gold')\n        plt.text(62, 50, '<- Player Yardline at Snap', color='gold')\n    # Endzones\n    if endzones:\n        ez1 = patches.Rectangle((0, 0), 10, 53.3,\n                                linewidth=0.1,\n                                edgecolor='r',\n                                facecolor='blue',\n                                alpha=0.2,\n                                zorder=0)\n        ez2 = patches.Rectangle((110, 0), 120, 53.3,\n                                linewidth=0.1,\n                                edgecolor='r',\n                                facecolor='blue',\n                                alpha=0.2,\n                                zorder=0)\n        ax.add_patch(ez1)\n        ax.add_patch(ez2)\n    plt.xlim(0, 120)\n    plt.ylim(-5, 58.3)\n    plt.axis('off')\n    if linenumbers:\n        for x in range(20, 110, 10):\n            numb = x\n            if x > 50:\n                numb = 120 - x\n            plt.text(x, 5, str(numb - 10),\n                     horizontalalignment='center',\n                     fontsize=20,  # fontname='Arial',\n                     color='white')\n            plt.text(x - 0.95, 53.3 - 5, str(numb - 10),\n                     horizontalalignment='center',\n                     fontsize=20,  # fontname='Arial',\n                     color='white', rotation=180)\n    if endzones:\n        hash_range = range(11, 110)\n    else:\n        hash_range = range(1, 120)\n\n    for x in hash_range:\n        ax.plot([x, x], [0.4, 0.7], color='white')\n        ax.plot([x, x], [53.0, 52.5], color='white')\n        ax.plot([x, x], [22.91, 23.57], color='white')\n        ax.plot([x, x], [29.73, 30.39], color='white')\n\n    if highlight_line:\n        hl = highlight_line_number + 10\n        plt.plot([hl, hl], [0, 53.3], color='yellow')\n        plt.text(hl + 2, 50, '<- {}'.format(highlighted_name),\n                 color='yellow')\n    return fig, ax","8da3aa42":"def get_moving(angle,speed):\n    import math\n    cartesianAngleRadians = (90-angle)*math.pi\/180.0\n    dx = speed * math.cos(cartesianAngleRadians)\n    dy = speed * math.sin(cartesianAngleRadians) \n    return dx,dy","0bb26895":"def show_play_std(playid, train=train):\n    from scipy.spatial import Voronoi, voronoi_plot_2d\n\n    df = train[train.PlayId == playid]\n    \n    StdYardLine = df.YardsFromOwnGoal.values[0]-10\n\n    fig, ax = create_football_field(highlight_line=True,highlight_line_number = StdYardLine)\n    ax.scatter(df.X, df.Y, cmap='seismic', c=~df.IsOnOffense)\n    \n    points = df[[\"X\",\"Y\"]].to_numpy()\n    vor = Voronoi(points)\n\n    for index, simplex in enumerate(vor.ridge_vertices):\n        simplex = np.asarray(simplex)\n        if np.all(simplex >= 0):\n            ax.plot(vor.vertices[simplex,0], vor.vertices[simplex,1], 'b-')\n\n    center = points.mean(axis=0)\n    for pointidx, simplex in zip(vor.ridge_points, vor.ridge_vertices):\n        simplex = np.asarray(simplex)\n        if np.any(simplex < 0):\n            i = simplex[simplex >= 0][0] # finite end Voronoi vertex\n            t = points[pointidx[1]] - points[pointidx[0]] # tangent\n            t \/= np.linalg.norm(t)\n            n = np.array([-t[1], t[0]]) # normal\n            midpoint = points[pointidx].mean(axis=0)\n            far_point = vor.vertices[i] + np.sign(np.dot(midpoint - center, n)) * n * 100\n            ax.plot([vor.vertices[i,0], far_point[0]], [vor.vertices[i,1], far_point[1]], 'b--')\n    \n    rusher_row = df[df.isRusher]\n    yards_covered = rusher_row[\"Yards\"].values[0]\n    x = rusher_row[\"X\"].values[0]\n    y = rusher_row[\"Y\"].values[0]\n    rusher_dir = rusher_row[\"Dir\"].values[0]\n    rusher_speed = rusher_row[\"S\"].values[0]\n    \n    if (yards_covered ==0):\n        dx,dy = get_moving(rusher_dir,rusher_speed)\n    else:\n        dx,dy = get_moving(rusher_dir,yards_covered)\n        \n    ax.arrow(x, y, dx, dy, length_includes_head=True, width=0.2, color = 'yellow')\n\n    plt.title('Play # ' +  str(playid) + \"and yard distance is \" + str(yards_covered))\n    plt.legend(loc = 'lower right')\n    plt.show()\n    \n    return","6d9dcd60":"myplayid = 20170907000118\nshow_play_std(myplayid, train=train)","077960b9":"### Importing data and libraries","345683a5":"Add rusher\nhttps:\/\/www.kaggle.com\/sudalairajkumar\/simple-exploration-notebook-nfl","ec5eae77":"### Draw Voronoi on football field","3a7b40e7":"# Voronoi diagram implementation in Python\nThanks a lot for the great work from[Rob Mulla](https:\/\/www.kaggle.com\/robikscube\/nfl-big-data-bowl-plotting-player-position), [SRK](https:\/\/www.kaggle.com\/sudalairajkumar\/simple-exploration-notebook-nfl), and [tuttifrutti](https:\/\/www.kaggle.com\/tuttifrutti\/voronoi-diagram-in-python). Here is another Voronoi for NFL","d81f8545":"Plot football field\nhttps:\/\/www.kaggle.com\/robikscube\/nfl-big-data-bowl-plotting-player-position","37f3f8d9":"### Handle Data:\n- Creating on_offense variable (is player on offense?)\n- Correcting team names\n- Normalize X and Y\n- Create Yards_from_own_goal variable\n- Create player is Rusher variable"}}