{"cell_type":{"816ae983":"code","5a449c7d":"code","7989034a":"code","2d7c4338":"code","9e9da0fc":"code","05351e2d":"code","a3128db5":"code","1b2ca5a1":"code","c80e1dde":"code","a1a41780":"code","5d0a4f58":"code","03ddcc3a":"code","1a300c13":"code","7a0849d3":"code","00ccac47":"code","efda6484":"code","ad8c7359":"code","5513cef7":"code","561cb4de":"code","366fd8d9":"markdown","f5a0533d":"markdown","76909b3b":"markdown","e7b6855d":"markdown","4a640d4a":"markdown","28e5a042":"markdown","c2d20239":"markdown","3c6f7191":"markdown","85eea00f":"markdown","2cc26d57":"markdown","b829c8aa":"markdown","5b774f5b":"markdown","0af6b149":"markdown","2e0f9d42":"markdown"},"source":{"816ae983":"import os\nimport cv2\nimport pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.decomposition import PCA\nfrom scipy import ndimage\n\nplt.rcParams['font.size'] = 15\nplt.rcParams['legend.fontsize'] = 18\nplt.rcParams['xtick.direction'] = 'out'\nplt.rcParams['ytick.direction'] = 'out'\nplt.rcParams['xtick.major.size'] = 5.0\nplt.rcParams['xtick.minor.size'] = 3.0\nplt.rcParams['ytick.major.size'] = 5.0\nplt.rcParams['ytick.minor.size'] = 3.0\nplt.rcParams['axes.linewidth'] = 3.0\nplt.rcParams['legend.handlelength'] = 5.0","5a449c7d":"path = '..\/input\/a-large-scale-fish-dataset\/Fish_Dataset\/Fish_Dataset\/'\n\nmasks_path = []\nimages_path = []\n\nfor folder in os.listdir(path):\n    if os.path.isdir(os.path.join(path,folder)):\n        for folder2 in os.listdir(path+folder):\n            if 'GT' in folder2 :\n                for img in os.listdir(os.path.join(path,folder,folder2)):\n                    masks_path.append(os.path.join(path,folder,folder2,img))\n            else:\n                for img in os.listdir(os.path.join(path,folder,folder2)):\n                    images_path.append(os.path.join(path,folder,folder2,img))\n                \n\n\ndata = {'images_path': images_path, 'masks_path': masks_path}\n\ndataframe = pd.DataFrame(data)","7989034a":"dataframe.head()","2d7c4338":"MASK_WIDTH = 28\nMASK_HEIGTH = 28\n\nIMG_WIDTH = 128\nIMG_HEIGTH = 128\n\nimages = []\nmasks = []\n\nfor path_image, path_mask in dataframe.values:\n    img = cv2.imread(path_image)\n    img = cv2.resize(img,(IMG_WIDTH,IMG_HEIGTH))\n    images.append(img)\n    \n    mask = cv2.imread(path_mask,0)\n    mask = cv2.resize(mask,(MASK_WIDTH,MASK_HEIGTH))\n    masks.append(mask)\n    \n    \nimages = np.array(images)\nmasks = np.array(masks)","9e9da0fc":"f, ax = plt.subplots(1,2, figsize=(15,9))\n\nax[0].imshow(images[0])\nax[0].set_xticks([])\nax[0].set_yticks([])\nax[0].set_title('Image')\n\nax[1].imshow(masks[0])\nax[1].set_xticks([])\nax[1].set_yticks([])\nax[1].set_title('Mask')\n\nplt.show()","05351e2d":"sample=0\n\nf, ax = plt.subplots(1,2, figsize=(15,9))\n\nax[0].imshow(images[sample])\nax[0].set_xticks([])\nax[0].set_yticks([])\nax[0].set_title('Image')\n\nax[1].imshow(masks[sample])\nax[1].set_xticks([])\nax[1].set_yticks([])\nax[1].set_title('Mask')\n\nplt.show()","a3128db5":"c, r = np.where(masks[sample]==255)\n\nplt.figure(figsize=(10,7))\nplt.scatter(c, r)\nplt.xlabel('X')\nplt.ylabel('Y')\nplt.title('Mask on X Y Coordinates')\nplt.show()","1b2ca5a1":"X = np.array([c,r]).T","c80e1dde":"pca = PCA(n_components=2)\n\nprojected = pca.fit_transform(X)","a1a41780":"steps = np.linspace(0,2,10)\n\ncomponent_1_line = (pca.components_[1,0]\/pca.components_[0,0]) * steps \ncomponent_2_line = (pca.components_[1,1]\/pca.components_[0,1]) * steps\n\nplt.figure(figsize=(10,7))\nplt.scatter(c, r, label='data')\nplt.plot(steps + np.mean(c),component_1_line + np.mean(r),'g--', label='PC1')\nplt.plot(steps + np.mean(c),component_2_line + np.mean(r),'r--', label='PC2')\nplt.legend()\nplt.xlabel('X')\nplt.ylabel('Y')\nplt.show()","5d0a4f58":"plt.figure(figsize=(10,7))\nplt.scatter(projected[:,0],projected[:,1])\nplt.xlabel('PC 1')\nplt.ylabel('PC 2')\nplt.title('Projected Mask on the Principal Components')\nplt.show()","03ddcc3a":"angle = np.arctan2(pca.components_[0,1], pca.components_[0,0])\nangle = np.degrees(angle)\n\nrotated = ndimage.rotate(images[sample], -angle)","1a300c13":"f, ax = plt.subplots(1,2, figsize=(15,9))\n\nax[0].imshow(images[sample])\nax[0].set_xticks([])\nax[0].set_yticks([])\nax[0].set_title('Original')\n\nax[1].imshow(rotated)\nax[1].set_xticks([])\nax[1].set_yticks([])\nax[1].set_title('Rotated')\n\nplt.show()","7a0849d3":"def rotate_PCA(image, mask):\n\n    c, r = np.where(mask==255)\n    X = np.array([c,r]).T\n    pca = PCA(n_components=2)\n    projected = pca.fit_transform(X)\n    angle = np.arctan2(pca.components_[0,1], pca.components_[0,0])\n    angle = np.degrees(angle)\n    rotated = ndimage.rotate(image, -angle)\n    \n    f, ax = plt.subplots(1,2, figsize=(15,9))\n\n    ax[0].imshow(images[sample])\n    ax[0].set_xticks([])\n    ax[0].set_yticks([])\n    ax[0].set_title('Original')\n\n    ax[1].imshow(rotated)\n    ax[1].set_xticks([])\n    ax[1].set_yticks([])\n    ax[1].set_title('Rotated')\n\n    plt.show()","00ccac47":"sample = 42\nrotate_PCA(images[sample],masks[sample])","efda6484":"sample = 69\nrotate_PCA(images[sample],masks[sample])","ad8c7359":"sample = 3450\nrotate_PCA(images[sample],masks[sample])","5513cef7":"sample = 8050\nrotate_PCA(images[sample],masks[sample])","561cb4de":"sample = 586\nrotate_PCA(images[sample],masks[sample])","366fd8d9":"## How PCA works?","f5a0533d":"First lets take a sample from the dataframe","76909b3b":"# Load Data","e7b6855d":"We can visualize the direction of the principal components","4a640d4a":"For the PCA computation, remember to use 2 components","28e5a042":"and the projected mask","c2d20239":"# PCA Rotation","3c6f7191":"## Example of Image and Mask","85eea00f":"PCA is defined as an orthogonal linear transformation that transforms the data to a new coordinate system such that the greatest variance by some scalar projection of the data comes to lie on the first coordinate (called the first principal component), the second greatest variance on the second coordinate, and so on...\n\nKnowing this, it is possbile two find two principal components that can explain the direction of the variance from the image masks, therefore we can find the angle between these components and rotate the image.","2cc26d57":"Encapsulating all in a function","b829c8aa":"# Results","5b774f5b":"Now we can prepare our data for input as follows\n\n$\nX = \\begin{bmatrix}\nc_{1} & r_{1} \\\\\nc_{2} & r_{2} \\\\\n\\vdots & \\vdots \\\\\nc_{N} & r_{N}\n\\end{bmatrix}$\n\nwhere c, r, and N represent column, row, and the total number of 1-valued pixels, respectively.","0af6b149":"Next, we need to find where the mask pixels are on X and Y coordinates","2e0f9d42":"Now we find the angle of the image based on the principal components, and rotate the image back to center"}}