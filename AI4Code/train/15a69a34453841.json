{"cell_type":{"7af9517e":"code","989d9c8f":"code","0f80bc0a":"code","77897a18":"code","a1b63030":"code","56d29268":"code","54306b48":"code","ca2c4811":"code","3c40216e":"code","1036d942":"code","ed5046ef":"code","378776f8":"code","6b9f879b":"code","d787a6df":"code","5b745bce":"code","5343624f":"code","bbee3f08":"code","9ae77f94":"code","170887bc":"code","6c5c9816":"code","0c00d149":"code","581285f3":"code","fa535c8f":"code","243c6c6e":"code","ee14b39c":"code","a3577fe5":"code","5ac19533":"code","88877aba":"code","a5e7906a":"code","fb949e56":"markdown","3187e9e1":"markdown","f6748c1c":"markdown","5319d0c1":"markdown","38256789":"markdown","ad432726":"markdown","c1a0ab76":"markdown","96599c72":"markdown","c6feffa4":"markdown","6d93be4f":"markdown","0d8715c8":"markdown","661253eb":"markdown","f13b57db":"markdown","0bf2cedd":"markdown","2e15309d":"markdown","50ab9af6":"markdown","cb97c93a":"markdown","4f1f090d":"markdown","f8eb3fc7":"markdown","523974f9":"markdown","f4cd032b":"markdown","80554ec4":"markdown","a3e785fe":"markdown","48a094f7":"markdown","b071da01":"markdown","e0895096":"markdown","5ae395a2":"markdown"},"source":{"7af9517e":"from plotly.offline import init_notebook_mode, iplot\nimport plotly.graph_objs as go\nimport plotly.plotly as py\nfrom plotly import tools\nfrom datetime import date\nimport pandas as pd\nimport numpy as np \nimport plotly.figure_factory as ff\n\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.preprocessing import LabelEncoder\nimport lightgbm as lgb\n\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport random \nimport warnings\nimport operator\nwarnings.filterwarnings(\"ignore\")\ninit_notebook_mode(connected=True)","989d9c8f":"train = pd.read_csv(\"..\/input\/train.csv\")\ntest = pd.read_csv(\"..\/input\/test.csv\")\n\nprint (\"Train Dataset: Rows, Columns: \", train.shape)\nprint (\"Test Dataset: Rows, Columns: \", test.shape)","0f80bc0a":"print (\"Glimpse of Train Dataset: \")\ntrain.head()","77897a18":"print (\"Summary of Train Dataset: \")\ntrain.describe()","a1b63030":"print (\"Top Columns having missing values\")\nmissmap = train.isnull().sum().to_frame()\nmissmap = missmap.sort_values(0, ascending = False)\nmissmap.head()","56d29268":"target = train['Target'].value_counts().to_frame()\nlevels = [\"NonVulnerable\", \"Moderate Poverty\", \"Vulnerable\", \"Extereme Poverty\"]\ntrace = go.Bar(y=target.Target, x=levels, marker=dict(color='orange', opacity=0.6))\nlayout = dict(title=\"Household Poverty Levels\", margin=dict(l=200), width=800, height=400)\ndata = [trace]\nfig = go.Figure(data=data, layout=layout)\niplot(fig)","54306b48":"def compare_plot(col, title):\n    tr1 = train[train['Target'] == 1][col].value_counts().to_dict()\n    tr2 = train[train['Target'] == 2][col].value_counts().to_dict()\n    tr3 = train[train['Target'] == 3][col].value_counts().to_dict()\n    tr4 = train[train['Target'] == 4][col].value_counts().to_dict()\n    \n    xx = ['Extereme', 'Moderate', 'Vulnerable', 'NonVulnerable']\n    trace1 = go.Bar(y=[tr1[0], tr2[0], tr3[0], tr4[0]], name=\"Not Present\", x=xx, marker=dict(color=\"orange\", opacity=0.6))\n    trace2 = go.Bar(y=[tr1[1], tr2[1], tr3[1], tr4[1]], name=\"Present\", x=xx, marker=dict(color=\"purple\", opacity=0.6))\n    \n    return trace1, trace2 \n    \ntr1, tr2 = compare_plot(\"v18q\", \"Tablet\")\ntr3, tr4 = compare_plot(\"refrig\", \"Refrigirator\")\ntr5, tr6 = compare_plot(\"computer\", \"Computer\")\ntr7, tr8 = compare_plot(\"television\", \"Television\")\ntr9, tr10 = compare_plot(\"mobilephone\", \"MobilePhone\")\ntitles = [\"Tablet\", \"Refrigirator\", \"Computer\", \"Television\", \"MobilePhone\"]\n\nfig = tools.make_subplots(rows=3, cols=2, print_grid=False, subplot_titles=titles)\nfig.append_trace(tr1, 1, 1)\nfig.append_trace(tr2, 1, 1)\nfig.append_trace(tr3, 1, 2)\nfig.append_trace(tr4, 1, 2)\nfig.append_trace(tr5, 2, 1)\nfig.append_trace(tr6, 2, 1)\nfig.append_trace(tr7, 2, 2)\nfig.append_trace(tr8, 2, 2)\nfig.append_trace(tr9, 3, 1)\nfig.append_trace(tr10, 3, 1)\n\nfig['layout'].update(height=1000, title=\"What do Households Own\", barmode=\"stack\", showlegend=False)\niplot(fig)","ca2c4811":"def find_prominent(row, mats):\n    for c in mats:\n        if row[c] == 1:\n            return c\n    return \n\ndef combine(starter, colname, title, replacemap):\n    mats = [c for c in train.columns if c.startswith(starter)]\n    train[colname] = train.apply(lambda row : find_prominent(row, mats), axis=1)\n    train[colname] = train[colname].apply(lambda x : replacemap[x] if x != None else x )\n\n    om1 = train[train['Target'] == 1][colname].value_counts().to_frame()\n    om2 = train[train['Target'] == 2][colname].value_counts().to_frame()\n    om3 = train[train['Target'] == 3][colname].value_counts().to_frame()\n    om4 = train[train['Target'] == 4][colname].value_counts().to_frame()\n\n    trace1 = go.Bar(y=om1[colname], x=om1.index, name=\"Extereme\", marker=dict(color='red', opacity=0.9))\n    trace2 = go.Bar(y=om2[colname], x=om2.index, name=\"Moderate\", marker=dict(color='red', opacity=0.5))\n    trace3 = go.Bar(y=om3[colname], x=om3.index, name=\"Vulnerable\", marker=dict(color='green', opacity=0.5))\n    trace4 = go.Bar(y=om4[colname], x=om4.index, name=\"NonVulnerable\", marker=dict(color='green', opacity=0.9))\n    return [trace1, trace2, trace3, trace4]\n\ntitles = [\"Outside Wall Material\", \"Floor Material\", \"Roof Material\", \"Sanitary Conditions\", \"Cooking Energy Sources\", \"Disposal Methods\"]\nfig = tools.make_subplots(rows=3, cols=2, print_grid=False, subplot_titles=titles)\n\n### outside material\nflr = {'paredblolad' : \"Block \/ Brick\", \"paredpreb\" : \"Cement\", \"paredmad\" : \"Wood\",\n      \"paredzocalo\" : \"Socket\", \"pareddes\" : \"Waste Material\", \"paredfibras\" : \"Fibres\",\n      \"paredother\" : \"Other\", \"paredzinc\": \"Zink\"}\nres = combine(\"pared\", \"outside_material\", \"Predominanat Material of the External Walls\", flr)      \nfor x in res:\n    fig.append_trace(x, 1, 1)\n\n### floor material \nflr = {'pisomoscer' : \"Mosaic \/ Ceramic\", \"pisocemento\" : \"Cement\", \"pisonatur\" : \"Natural Material\",\n      \"pisonotiene\" : \"No Floor\", \"pisomadera\" : \"Wood\", \"pisoother\" : \"Other\"}\nres = combine(\"piso\", \"floor_material\", \"Floor Material of the Households\", flr)\nfor x in res:\n    fig.append_trace(x, 1, 2)\n\n### Roof Material\nflr = {'techozinc' : \"Zinc\", \"techoentrepiso\" : \"Fibre \/ Cement\", \"techocane\" : \"Natural Fibre\", \"techootro\" : \"Other\"}\nres = combine(\"tech\", \"roof_material\", \"Roof Material of the Households\", flr)  \nfor x in res:\n    fig.append_trace(x, 2, 1)\n\n\n### Sanitary Conditions\nflr = {'sanitario1' : \"No Toilet\", \"sanitario2\" : \"Sewer \/ Cesspool\", \"sanitario3\" : \"Septic Tank\",\n       \"sanitario5\" : \"Black Hole\", \"sanitario6\" : \"Other System\"}\nres = combine(\"sanit\", \"sanitary\", \"Sanitary Conditions of the Households\", flr)\nfor x in res:\n    fig.append_trace(x, 2, 2)\n\n### Energy Source\nflr = {'energcocinar1' : \"No Kitchen\", \"energcocinar2\" : \"Electricity\", \"energcocinar3\" : \"Cooking Gas\",\n       \"energcocinar4\" : \"Wood Charcoal\"}\nres = combine(\"energ\", \"energy_source\", \"Main source of energy for cooking\", flr)  \nfor x in res:\n    fig.append_trace(x, 3, 1)\n\n### Disposal Methods\nflr = {\"elimbasu1\":\"Tanker truck\",\n\"elimbasu2\": \"Buried\",\n\"elimbasu3\": \"Burning\",\n\"elimbasu4\": \"Unoccupied space\",\n\"elimbasu5\": \"River\",\n\"elimbasu6\": \"Other\"}\nres = combine(\"elim\", \"waste_method\", \"Rubbish Disposals Method\", flr)  \nfor x in res:\n    fig.append_trace(x, 3, 2)\n\nfig['layout'].update(height=900, title=\"Key Characteristics of Households\", barmode=\"stack\", showlegend=False)\niplot(fig)","3c40216e":"def find_prominent2(row, mats):\n    for i,c in enumerate(mats):\n        if row[c] == 1 and c.endswith(\"1\"):\n            return \"Bad\"\n        elif row[c] == 1 and c.endswith(\"2\"):\n            return \"Regular\"\n        elif row[c] == 1 and c.endswith(\"3\"):\n            return \"Good\"\n    return \n\nbadwl = [c for c in train.columns if c.startswith(\"epar\")]\nbadrf = [c for c in train.columns if c.startswith(\"etec\")]\nbadfl = [c for c in train.columns if c.startswith(\"eviv\")]\ntrain[\"WallQuality\"] = train.apply(lambda row : find_prominent2(row, badwl), axis=1)\ntrain[\"RoofQuality\"] = train.apply(lambda row : find_prominent2(row, badrf), axis=1)\ntrain[\"FloorQuality\"] = train.apply(lambda row : find_prominent2(row, badfl), axis=1)\n\nwd1 = train[train['Target']==1]['WallQuality'].value_counts()\nwd2 = train[train['Target']==2]['WallQuality'].value_counts()\nwd3 = train[train['Target']==3]['WallQuality'].value_counts()\nwd4 = train[train['Target']==4]['WallQuality'].value_counts()\ntrace1=go.Bar(x=wd1.index, y=wd1.values, marker=dict(color=\"red\", opacity=0.99), name=\"Extereme\")\ntrace2=go.Bar(x=wd2.index, y=wd2.values, marker=dict(color=\"red\", opacity=0.69), name=\"Moderate\")\ntrace3=go.Bar(x=wd3.index, y=wd3.values, marker=dict(color=\"red\", opacity=0.49), name=\"Vulnerable\")\ntrace4=go.Bar(x=wd4.index, y=wd4.values, marker=dict(color=\"red\", opacity=0.29), name=\"NonVulnerable\")\n\nwd1 = train[train['Target']==1]['RoofQuality'].value_counts()\nwd2 = train[train['Target']==2]['RoofQuality'].value_counts()\nwd3 = train[train['Target']==3]['RoofQuality'].value_counts()\nwd4 = train[train['Target']==4]['RoofQuality'].value_counts()\ntrace5=go.Bar(x=wd1.index, y=wd1.values, marker=dict(color=\"green\", opacity=0.99), name=\"Extereme\")\ntrace6=go.Bar(x=wd2.index, y=wd2.values, marker=dict(color=\"green\", opacity=0.69), name=\"Moderate\")\ntrace7=go.Bar(x=wd3.index, y=wd3.values, marker=dict(color=\"green\", opacity=0.49), name=\"Vulnerable\")\ntrace8=go.Bar(x=wd4.index, y=wd4.values, marker=dict(color=\"green\", opacity=0.29), name=\"NonVulnerable\")\n\nwd1 = train[train['Target']==1]['FloorQuality'].value_counts()\nwd2 = train[train['Target']==2]['FloorQuality'].value_counts()\nwd3 = train[train['Target']==3]['FloorQuality'].value_counts()\nwd4 = train[train['Target']==4]['FloorQuality'].value_counts()\ntrace9=go.Bar(x=wd1.index, y=wd1.values, marker=dict(color=\"purple\", opacity=0.99), name=\"Extereme\")\ntrace10=go.Bar(x=wd2.index, y=wd2.values, marker=dict(color=\"purple\", opacity=0.69), name=\"Moderate\")\ntrace11=go.Bar(x=wd3.index, y=wd3.values, marker=dict(color=\"purple\", opacity=0.49), name=\"Vulnerable\")\ntrace12=go.Bar(x=wd4.index, y=wd4.values, marker=dict(color=\"purple\", opacity=0.29), name=\"NonVulnerable\")\n\nfig = tools.make_subplots(rows=1, cols=4, print_grid=False, subplot_titles=[\"Extereme Poverty\", \"Moderate Poverty\", \"Vulnerable\", \"NonVulnerable\"])\nfig.append_trace(trace1, 1, 1)\nfig.append_trace(trace2, 1, 2)\nfig.append_trace(trace3, 1, 3)\nfig.append_trace(trace4, 1, 4)\nfig['layout'].update(height=250, showlegend=False, title=\"Wall Quality of Households\")\niplot(fig)\n\nfig = tools.make_subplots(rows=1, cols=4, print_grid=False, subplot_titles=[\"Extereme Poverty\", \"Moderate Poverty\", \"Vulnerable\", \"NonVulnerable\"])\nfig.append_trace(trace5, 1, 1)\nfig.append_trace(trace6, 1, 2)\nfig.append_trace(trace7, 1, 3)\nfig.append_trace(trace8, 1, 4)\nfig['layout'].update(height=250, showlegend=False, title=\"Roof Quality of Households\")\niplot(fig)\n\nfig = tools.make_subplots(rows=1, cols=4, print_grid=False, subplot_titles=[\"Extereme Poverty\", \"Moderate Poverty\", \"Vulnerable\", \"NonVulnerable\"])\nfig.append_trace(trace9, 1, 1)\nfig.append_trace(trace10, 1, 2)\nfig.append_trace(trace11, 1, 3)\nfig.append_trace(trace12, 1, 4)\nfig['layout'].update(height=250, showlegend=False, title=\"Floor Quality of Households\")\niplot(fig)","1036d942":"def combine2(starter, colname, title, replacemap, plotme = True):\n    mats = [c for c in train.columns if c.startswith(starter)]\n    train[colname] = train.apply(lambda row : find_prominent(row, mats), axis=1)\n    train[colname] = train[colname].apply(lambda x : replacemap[x] if x != None else x )\n\n    om1 = train[train['Target'] == 1][colname].value_counts().to_frame()\n    om2 = train[train['Target'] == 2][colname].value_counts().to_frame()\n    om3 = train[train['Target'] == 3][colname].value_counts().to_frame()\n    om4 = train[train['Target'] == 4][colname].value_counts().to_frame()\n\n    trace1 = go.Bar(y=om1[colname], x=om1.index, name=\"Extereme\", marker=dict(color='red', opacity=0.9))\n    trace2 = go.Bar(y=om2[colname], x=om2.index, name=\"Moderate\", marker=dict(color='red', opacity=0.5))\n    trace3 = go.Bar(y=om3[colname], x=om3.index, name=\"Vulnerable\", marker=dict(color='orange', opacity=0.9))\n    trace4 = go.Bar(y=om4[colname], x=om4.index, name=\"NonVulnerable\", marker=dict(color='orange', opacity=0.5))\n\n    data = [trace1, trace2, trace3, trace4]\n    layout = dict(title=title, legend=dict(y=1.1, orientation=\"h\"), barmode=\"stack\", margin=dict(l=50), height=400)\n    fig = go.Figure(data=data, layout=layout)\n    if plotme:\n        iplot(fig)\n\n\nflr = {\"instlevel1\": \"No Education\", \"instlevel2\": \"Incomplete Primary\", \"instlevel3\": \"Complete Primary\", \n       \"instlevel4\": \"Incomplete Sc.\", \"instlevel5\": \"Complete Sc.\", \"instlevel6\": \"Incomplete Tech Sc.\",\n       \"instlevel7\": \"Complete Tech Sc.\", \"instlevel8\": \"Undergraduation\", \"instlevel9\": \"Postgraduation\"}\ncombine2(\"instl\", \"education_details\", \"Education Details of Family Members\", flr)  \n\nflr = {\"estadocivil1\": \"< 10 years\", \"estadocivil2\": \"Free \/ Coupled union\", \"estadocivil3\": \"Married\", \n       \"estadocivil4\": \"Divorced\", \"estadocivil5\": \"Separated\", \"estadocivil6\": \"Widow\",\n       \"estadocivil7\": \"Single\"}\ncombine2(\"estado\", \"status_members\", \"Status of Family Members\", flr)  \n\nflr = {\"parentesco1\": \"Household Head\", \"parentesco2\": \"Spouse\/Partner\", \"parentesco3\": \"Son\/Daughter\", \n       \"parentesco4\": \"Stepson\/Daughter\", \"parentesco5\" : \"Son\/Daughter in Law\" , \"parentesco6\": \"Grandson\/Daughter\", \n       \"parentesco7\": \"Mother\/Father\", \"parentesco8\": \"Mother\/Father in Law\", \"parentesco9\" : \"Brother\/Sister\" , \n       \"parentesco10\" : \"Brother\/Sister in law\", \"parentesco11\" : \"Other Family Member\", \"parentesco12\" : \"Other Non Family Member\"}\ncombine2(\"parentesc\", \"family_members\", \"Family Members in the Households\", flr)  \n\nflr = {\"lugar1\": \"Central\", \"lugar2\": \"Chorotega\", \"lugar3\": \"Pac\u00c3\u0192\u00c2\u00adfico central\", \n       \"lugar4\": \"Brunca\", \"lugar5\": \"Huetar Atl\u00c3\u0192\u00c2\u00a1ntica\", \"lugar6\": \"Huetar Norte\"}\ncombine2(\"lugar\", \"region\", \"Region of the Households\", flr, plotme=False)  ","ed5046ef":"def agbr(col):\n    temp1 = train[train['Target'] == 1][col].value_counts()\n    trace1 = go.Bar(x=temp1.index, y=temp1.values, marker=dict(color=\"red\", opacity=0.89), name=\"Extereme\")\n\n    temp2 = train[train['Target'] == 2][col].value_counts()\n    trace2 = go.Bar(x=temp2.index, y=temp2.values, marker=dict(color=\"orange\", opacity=0.79), name=\"Moderate\")\n\n    temp3 = train[train['Target'] == 3][col].value_counts()\n    trace3 = go.Bar(x=temp3.index, y=temp3.values, marker=dict(color=\"purple\", opacity=0.89), name=\"Vulnerable\")\n\n    temp4 = train[train['Target'] == 4][col].value_counts()\n    trace4 = go.Bar(x=temp4.index, y=temp4.values, marker=dict(color=\"green\", opacity=0.79), name=\"NonVulnerable\")\n    \n    return [trace1, trace2, trace3, trace4]\n    layout = dict(height=400)\n    fig = go.Figure(data=[trace1, trace2, trace3, trace4], layout=layout)\n    iplot(fig)\n\ntitles = [\"Total Persons\", \"< 12 Yrs\", \">= 12 Yrs\", \"Total Males\", \"Males < 12 Yrs\", \"Males >= 12 Yrs\", \n         \"Total Females\", \"Females < 12 Yrs\", \"Females >= 12 Yrs\"]\nfig = tools.make_subplots(rows=3, cols=3, print_grid=False, subplot_titles=titles)\n\nres = agbr('r4t1')\nfor x in res:\n    fig.append_trace(x, 1, 1)\nres = agbr('r4t2')\nfor x in res:\n    fig.append_trace(x, 1, 2)\nres = agbr('r4t3')\nfor x in res:\n    fig.append_trace(x, 1, 3)\n\nres = agbr('r4h1')\nfor x in res:\n    fig.append_trace(x, 2, 1)\nres = agbr('r4h2')\nfor x in res:\n    fig.append_trace(x, 2, 2)\nres = agbr('r4h3')\nfor x in res:\n    fig.append_trace(x, 2, 3)\n\nres = agbr('r4m1')\nfor x in res:\n    fig.append_trace(x, 3, 1)\nres = agbr('r4m2')\nfor x in res:\n    fig.append_trace(x, 3, 2)\nres = agbr('r4m3')\nfor x in res:\n    fig.append_trace(x, 3, 3)\n\n    \nfig['layout'].update(height=750, showlegend=False, title=\"Gender and Age Distributions\")\niplot(fig)","378776f8":"titles = [\"Children\", \"Adults\", \"65+ Old\"]\nfig = tools.make_subplots(rows=1, cols=3, print_grid=False, subplot_titles=titles)\n\nres = agbr(\"hogar_nin\")\nfor x in res:\n    fig.append_trace(x, 1, 1)\nres = agbr(\"hogar_adul\")\nfor x in res:\n    fig.append_trace(x, 1, 2)\nres = agbr(\"hogar_mayor\")\nfor x in res:\n    fig.append_trace(x, 1, 3)\n\nfig['layout'].update(height=350, title=\"People Distribution in Households\", barmode=\"stack\", showlegend=False)\niplot(fig)","6b9f879b":"tm = agbr('tamhog')\nlayout = dict(title=\"Household People Size\", margin=dict(l=100), height=400, legend=dict(orientation=\"h\", y=1))\nfig = go.Figure(data=tm, layout=layout)\niplot(fig)","d787a6df":"def compare_dists(col, title):\n    trace1 = go.Histogram(name=\"Extereme\", x=train[train['Target']==1][col])\n    trace2 = go.Histogram(name=\"Moderate\", x=train[train['Target']==2][col])\n    trace3 = go.Histogram(name=\"Vulnerable\", x=train[train['Target']==3][col])\n    trace4 = go.Histogram(name=\"NonVulnerable\", x=train[train['Target']==4][col])\n\n    fig = tools.make_subplots(rows=2, cols=2, print_grid=False)\n    fig.append_trace(trace1, 1, 1)\n    fig.append_trace(trace2, 1, 2)\n    fig.append_trace(trace3, 2, 1)\n    fig.append_trace(trace4, 2, 2)\n\n    fig['layout'].update(height=400, showlegend=False, title=title)\n    iplot(fig)\n\ncompare_dists('v2a1', \"Monthy Rent for four groups of houses\")","5b745bce":"trace0 = go.Scatter(x=train['v2a1'], y=train['age'], name=\"Extereme\", \n                    mode='markers', marker=dict(color=train['Target'], opacity=1, size=16 - train['Target']**2))\nlayout = go.Layout(xaxis=dict(title=\"Monthly Rent of the house\", range=(0,400000)), yaxis=dict(title=\"Age of the House\"))\nfig = go.Figure(data =[trace0], layout=layout)\niplot(fig)","5343624f":"train1 = train[train['Target'] == 1]\ntrain2 = train[train['Target'] == 2]\ntrain3 = train[train['Target'] == 3]\ntrain4 = train[train['Target'] == 4]\n\ntrace0 = go.Scatter(x=train1['rooms'], y=train1['tamviv'], name=\"Extereme\", mode='markers', marker=dict(color=\"red\", opacity=0.4, size=10))\ntrace1 = go.Scatter(x=train2['rooms'], y=train2['tamviv'], name=\"Moderate\", mode='markers', marker=dict(color=\"orange\",opacity=0.4, size=10))\ntrace2 = go.Scatter(x=train3['rooms'], y=train3['tamviv'], name=\"Vulnerable\", mode='markers', marker=dict(color=\"blue\",opacity=0.4, size=10))\ntrace3 = go.Scatter(x=train4['rooms'], y=train4['tamviv'], name=\"NonVulnerable\", mode='markers', marker=dict(color=\"green\",opacity=0.4, size=10))\n\nfig = tools.make_subplots(rows=2, cols=2, print_grid=False, subplot_titles=[\"Extereme Poverty\", \"Moderate Poverty\", \"Vulnerable\", \"Non Vulnerable\"])\n\nfig.append_trace(trace0, 1, 1)\nfig.append_trace(trace1, 1, 2)\nfig.append_trace(trace2, 2, 1)\nfig.append_trace(trace3, 2, 2)\n\nfig['layout'].update(height=600, showlegend=False, title=\"Rooms (Yaxis) and Persons Living (Xaxis)\" )\niplot(fig)","bbee3f08":"def boxs(col, title):\n    y1 = train[train['Target'] == 1][col]\n    y2 = train[train['Target'] == 2][col]\n    y3 = train[train['Target'] == 3][col]\n    y4 = train[train['Target'] == 4][col]\n\n    trace1 = go.Box(y=y1, name=\"Extereme\", marker=dict(color=\"red\", opacity=0.7))\n    trace2 = go.Box(y=y2, name=\"Moderate\", marker=dict(color=\"orange\", opacity=0.7))\n    trace3 = go.Box(y=y3, name=\"Vulnerable\", marker=dict(color=\"purple\", opacity=0.7))\n    trace4 = go.Box(y=y4, name=\"NonVulnerable\", marker=dict(color=\"green\", opacity=0.7))\n    data = [trace1, trace2, trace3, trace4]\n    return data \n    layout = dict(title=title, showlegend=False, height=400)\n    data = [trace1, trace2, trace3, trace4]\n    fig = go.Figure(data=data, layout=layout)\n    iplot(fig)\n\n\ntitles = [\"Number of Rooms\", \"Number of Bedrooms\", \"Mobile Phones Owned\", \"Tablets Owned\", \"Age of the House\", \"Overcrowding Per Persons\"]\nfig = tools.make_subplots(rows=3, cols=2, print_grid=False, subplot_titles=titles)\n\nres = boxs(\"rooms\", \"Number of \")\nfor x in res:\n    fig.append_trace(x, 1, 1)\nres = boxs(\"bedrooms\", \"Number of \")\nfor x in res:\n    fig.append_trace(x, 1, 2)\nres = boxs(\"qmobilephone\", \"Number of\")\nfor x in res:\n    fig.append_trace(x, 2, 1)\nres = boxs(\"v18q1\", \"Number of\")\nfor x in res:\n    fig.append_trace(x, 2, 2)\nres = boxs(\"age\", \"Number of\")\nfor x in res:\n    fig.append_trace(x, 3, 1)\nres = boxs(\"overcrowding\", \"Number of\")\nfor x in res:\n    fig.append_trace(x, 3, 2)\n\nfig['layout'].update(height=900, title=\"\", barmode=\"stack\", showlegend=False)\niplot(fig)","9ae77f94":"trgt = {1:'Extereme Poverty', 2:'Moderate Poverty', 3: 'Vulnerable Households', 4:'Non Vulnerable Households'}\ntrain['target'] = train['Target'].apply(lambda x : trgt[x])\nsns.set(rc={'figure.figsize':(15, 6)})\nsns.boxplot(x=\"outside_material\", y=\"rooms\", hue=\"target\",  palette=\"cool\", data=train)\nplt.title(\"Effect of Number of Rooms and Outside Material on Poverty Levels\", fontsize=14)\nplt.xticks(rotation='vertical')\nplt.xlabel('Outside Material',fontsize=14)\nplt.ylabel('Number of Rooms',fontsize=14)\nplt.show()","170887bc":"sns.set(rc={'figure.figsize':(15, 6)})\nsns.boxplot(x=\"floor_material\", y=\"rooms\", hue=\"target\",  palette=\"gist_stern\", data=train)\nplt.title(\"Effect of Number of Rooms and Floor Material wise Poverty Levels\", fontsize=14)\nplt.xticks(rotation='vertical')\nplt.xlabel('Floor Material',fontsize=14)\nplt.ylabel('Number of Rooms',fontsize=14)\nplt.show()","6c5c9816":"sns.set(rc={'figure.figsize':(15, 6)})\nsns.boxplot(x=\"education_details\", y=\"hhsize\", hue=\"target\",  palette=\"Spectral\", data=train)\nplt.title(\"Effect of Education Details and Household Size on Poverty Levels\", fontsize=14)\nplt.xticks(rotation='vertical')\nplt.xlabel('Education Details',fontsize=14)\nplt.ylabel('Household Size',fontsize=14)\nplt.show()\n","0c00d149":"sns.set(rc={'figure.figsize':(15, 6)})\nsns.boxplot(x=\"status_members\", y=\"hhsize\", hue=\"target\",  palette=\"rocket\", data=train)\nplt.title(\"Effect of Family Members Status and and Household Size on Poverty Levels\", fontsize=14)\nplt.xticks(rotation='vertical')\nplt.xlabel('Family Members Status',fontsize=14)\nplt.ylabel('Household Size',fontsize=14)\nplt.show()","581285f3":"sns.set(rc={'figure.figsize':(15, 6)})\nsns.boxplot(x=\"family_members\", y=\"hhsize\", hue=\"target\",  palette=\"cool\", data=train)\nplt.title(\"Effect of Family Members and Household Size on Poverty Levels\", fontsize=14)\nplt.xticks(rotation='vertical')\nplt.xlabel('Family Members',fontsize=14)\nplt.ylabel('Household Size',fontsize=14)\nplt.show()","fa535c8f":"train['area_type'] = train['area1'].apply(lambda x: \"urbal\" if x==1 else \"rural\")\n\ncols = ['area_type', 'target']\ncolmap = sns.light_palette(\"yellow\", as_cmap=True)\npd.crosstab(train[cols[1]], train[cols[0]]).style.background_gradient(cmap = colmap)","243c6c6e":"cols = ['region', 'target']\ncolmap = sns.light_palette(\"orange\", as_cmap=True)\npd.crosstab(train[cols[0]], train[cols[1]]).style.background_gradient(cmap = colmap)","ee14b39c":"train = pd.read_csv(\"..\/input\/train.csv\")\ntest = pd.read_csv(\"..\/input\/test.csv\")\n\n## list of features to be used\nfeatures = [c for c in train.columns if c not in ['Id', 'Target']]\n\n## target variable \ntarget = train['Target'].values\ntarget_index = {1:0, 2:1, 3:2, 4:3}\ntarget = np.array([target_index[c] for c in target])","a3577fe5":"def label_encoding(col):\n    le = LabelEncoder()\n    le.fit(list(train[col].values) + list(test[col].values))\n    train[col] = le.transform(train[col].astype(str))\n    test[col] = le.transform(test[col].astype(str))\n\nnum_cols = train._get_numeric_data().columns\ncat_cols = list(set(features) - set(num_cols))\nfor col in cat_cols:\n    label_encoding(col)","5ac19533":"X_train, X_valid, y_train, y_valid = train_test_split(train[features].values, target, test_size=0.2, random_state=1)\nlgb_train = lgb.Dataset(X_train, y_train)\nlgb_valid = lgb.Dataset(X_valid, y_valid)","88877aba":"params = {'boosting_type': 'gbdt', 'objective': 'multiclass', 'metric': 'multi_logloss',\n          'num_class': 4, 'max_depth': 44, 'num_leaves': 36, 'learning_rate': 0.01,\n          'feature_fraction': 0.8, 'bagging_fraction': 0.8, 'bagging_freq': 5,\n          'lambda_l2': 1.0, 'verbose': -1, 'num_threads': -1 }\n\nmodel = lgb.train(params, lgb_train, num_boost_round=100,  valid_sets=[lgb_train, lgb_valid], \n                  early_stopping_rounds=2000, verbose_eval=100)","a5e7906a":"## predictions\npreds = model.predict(test[features], num_iteration=model.best_iteration)\n\n## revert back to original classes\nreverse_index = {}\nfor k,v in target_index.items():\n    reverse_index[v] = k\npreds = [reverse_index[np.argmax(p)] for p in preds]\n\n## submission\nsubs = pd.DataFrame()\nsubs['Id'] = test['Id']\nsubs['Target'] = preds\nsubs.to_csv('submission.csv', index=False)\nsubs.head()","fb949e56":"## 6.9 Effect of Family Memebrs Type and Household Size on Poverty Levels ","3187e9e1":"## 5.3  Age Groups among the households","f6748c1c":"<hr>\n## Part A : Exploration\n<hr>\n\n## 1. Dataset Preparation\n\nLets view the snapshot of the dataset which is given for training and testing purposes","5319d0c1":"## 2. Different Levels of Poverty Household Groups ","38256789":"## 6. Multivariate Analysis \n\n## 6.1 Monthly Rent Comparisons ","ad432726":"## 6.3 Poverty Levels with respect to Number of Rooms and People Living","c1a0ab76":"## 7.2 Region with respect to Poverty Levels ","96599c72":"## 4.2 Quality of Walls, Roof, and Floor","c6feffa4":"## 4. Key Characteristics of the Households \n\n## 4.1 Household Materials and Methods","6d93be4f":"## 3. What do households own ?","0d8715c8":"### 8.4 Baseline LightGBM","661253eb":"## 6.2 Poverty Levels with respect to Monthly Rent and Age of the House\n\nSize of the bubbles repersents levels of poverty. Higher the size, higher is the poverty level.","f13b57db":"## 5. Family Details of the households\n\n## 5.1 Education Details, Status, and Members","0bf2cedd":"## 7. Area \/ Location Details \n\n## 7.1 AreaType with respect to Poverty Levels ","2e15309d":"## 6.8 Effect of Family Members Status and Household Size on Poverty Levels ","50ab9af6":"<hr>\n\n## Part B: Modelling\n\n<hr>\n\n## 8. Baseline Model\n\n### 8.1 Dataset Preparation - Features and Target Variable","cb97c93a":"### 8.5 Predict and Submit","4f1f090d":"Further Improvement Ideas for Model. \n- Feature Engineering  \n- Model Tuning  \n- Model Ensembling  ","f8eb3fc7":"## 6.6 Effect of Number of Rooms and Floor Material on Poverty Levels ","523974f9":"## Exploration Kernel - Costa Rica Poverty\n\nMany social programs have a hard time making sure the right people are given enough aid. It\u2019s especially tricky when a program focuses on the poorest segment of the population. The world\u2019s poorest typically can\u2019t provide the necessary income and expense records to prove that they qualify. Beyond Costa Rica, many countries face this same problem of inaccurately assessing social need. \n\nA popular algorithm called the Proxy Means Test (or PMT) is used to verify income qualification along with family\u2019s observable household attributes like the material of their walls and ceiling, or the assets found in the home to classify them and predict their level of need. This is an improvement but accuracy remains a problem as the region\u2019s population grows and poverty declines.\n\nIn this [competition](https:\/\/www.kaggle.com\/c\/costa-rican-household-poverty-prediction), the dataset is shared with similar attributes with an aim to improve the accuracy of household poverty prediction. In this kernel, I have performed exploration, feature engineering, and baseline model.  ","f4cd032b":"## 5.2 Gender and Age Distributions ","80554ec4":"## 6.5 Effect of Number of Rooms and Outside Material on Poverty Levels ","a3e785fe":"## 5.4 Household Size","48a094f7":"### 8.2 Label Encode the categorical variables ","b071da01":"## 6.7 Effect of Education Details and Household Size on Poverty Levels ","e0895096":"### 8.3 Prepare Training and Validation Sets","5ae395a2":"## 6.4 Distributions (Poverty Levels wise) of some continuous variables "}}