{"cell_type":{"47762bb7":"code","c87da327":"code","1039b13a":"code","d0577963":"code","d295c56f":"code","257b9415":"code","070eeee6":"code","9aeff905":"code","e05bd5a7":"code","b4a6c795":"markdown"},"source":{"47762bb7":"! pip install openpyxl\n! pip install lifetimes","c87da327":"# Importing libraries:\nimport datetime as dt\nimport pandas as pd\nimport matplotlib.pyplot as plt\nfrom lifetimes import BetaGeoFitter\nfrom lifetimes import GammaGammaFitter\nfrom lifetimes.plotting import plot_period_transactions\nimport numpy as np\nimport warnings\nwarnings.filterwarnings('ignore')","1039b13a":"# Importing file:\ndf = pd.read_excel('\/kaggle\/input\/online-retail\/online_retail.xlsx', sheet_name=\"Year 2010-2011\", engine='openpyxl')","d0577963":"# Analysis for United Kingdom\n\ndf=df[df[\"Country\"]==\"United Kingdom\"]","d295c56f":"#########################\n# Pre Processing\n#########################\n\ndef outlier_thresholds(dataframe, variable):\n    quartile1 = dataframe[variable].quantile(0.01)\n    quartile3 = dataframe[variable].quantile(0.99)\n    interquantile_range = quartile3 - quartile1\n    up_limit = quartile3 + 1.5 * interquantile_range\n    low_limit = quartile1 - 1.5 * interquantile_range\n    return low_limit, up_limit\n\n\ndef replace_with_thresholds(dataframe, variable):\n    low_limit, up_limit = outlier_thresholds(dataframe, variable)\n    dataframe.loc[(dataframe[variable] < low_limit), variable] = low_limit\n    dataframe.loc[(dataframe[variable] > up_limit), variable] = up_limit\n\ndf.dropna(inplace=True)\ndf = df[~df[\"Invoice\"].str.contains(\"C\", na=False)]\ndf = df[df[\"Quantity\"] > 0]\n\nreplace_with_thresholds(df, \"Quantity\")\nreplace_with_thresholds(df, \"Price\")\ndf.describe().T\n\ndf[\"TotalPrice\"] = df[\"Quantity\"] * df[\"Price\"]\n\ntoday_date = dt.datetime(2011, 12, 11)\n\ndf.head()","257b9415":"#########################\n# Preparing Dataset\n#########################\n\n# Recency: How recently a customer has made a purchase\n# Frequency: How often a customer makes a purchase\n# Monetary Value: How much money a customer spends on purchases\n\ncltv_df = df.groupby('Customer ID').agg({'InvoiceDate': [lambda date: (date.max() - date.min()).days,\n                                                         lambda date: (today_date - date.min()).days],\n                                        'Invoice': lambda num: num.nunique(),\n                                        'TotalPrice': lambda TotalPrice: TotalPrice.sum()})\n\ncltv_df.columns = cltv_df.columns.droplevel(0)\ncltv_df.columns = ['recency', 'T', 'frequency', 'monetary']\n\ncltv_df[\"monetary\"] = cltv_df[\"monetary\"] \/ cltv_df[\"frequency\"]\n\ncltv_df = cltv_df[cltv_df[\"monetary\"] > 0]\n\ncltv_df.head()","070eeee6":"# Recency and T value is converted to \"Weekly\" \ncltv_df[\"recency\"] = cltv_df[\"recency\"] \/ 7\ncltv_df[\"T\"] = cltv_df[\"T\"] \/ 7","9aeff905":"# If there is lower 1 transaction value, then they are not selected: \ncltv_df = cltv_df[(cltv_df['frequency'] > 1)]","e05bd5a7":"# Estimating \"Expected AVG Profit\" by one customer\nggf = GammaGammaFitter(penalizer_coef=0.01)\nggf.fit(cltv_df['frequency'], cltv_df['monetary'])\n\ncltv_df[\"expected_average_profit\"] = ggf.conditional_expected_average_profit(cltv_df['frequency'],\n                                                                             cltv_df['monetary'])\n\ncltv_df.head()","b4a6c795":"## Gamma Gamma SubModel\n**it is shown how to estimate the model parameters and use them to predict likely spend per transaction in the future at the customer level. In general, it is used in retail market.**"}}