{"cell_type":{"a0542011":"code","b0ad8b1d":"code","99c3b34c":"code","141e1f61":"code","a72b2205":"code","90bcd08d":"code","8ee1fae3":"code","6afd0920":"code","8b4c10d4":"code","4389759a":"code","0b6ce746":"code","a4c5c000":"code","8003608f":"code","0d91422f":"code","8db7ea21":"code","8b6d0718":"code","fa35d1bd":"code","e4938e18":"code","42178b52":"code","0080a45d":"code","57c2d8f6":"code","360a89a3":"code","603c5956":"code","ca6d35eb":"code","086fea7b":"code","9dea4518":"code","4fb20529":"code","caa9c8fe":"code","7720f795":"code","88e84ccc":"code","df2ceba4":"code","584c3988":"markdown","d324bd48":"markdown","5d3e8ace":"markdown"},"source":{"a0542011":"# Code Sorce : https:\/\/www.kaggle.com\/bernhardklinger\/tps-jan-2022\n!pip install pycaret[full]","b0ad8b1d":"# Code Sorce : https:\/\/www.kaggle.com\/bernhardklinger\/tps-jan-2022\nimport pandas as pd\nimport numpy as np \nimport matplotlib as mpl\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom pycaret.regression import *","99c3b34c":"# Code Sorce : https:\/\/www.kaggle.com\/bernhardklinger\/tps-jan-2022\ntrain = pd.read_csv('..\/input\/tabular-playground-series-jan-2022\/train.csv',index_col='row_id')\ntest = pd.read_csv('..\/input\/tabular-playground-series-jan-2022\/test.csv',index_col='row_id')","141e1f61":"# Code Source : https:\/\/www.kaggle.com\/subinium\/tps-jan-happy-new-year\nfrom cycler import cycler\n\nmpl.rcParams['figure.dpi'] = 120\nmpl.rcParams['axes.spines.top'] = False\nmpl.rcParams['axes.spines.right'] = False\n# mpl.rcParams['font.family'] = 'serif'\n\nraw_light_palette = [\n    (0, 122, 255), # Blue\n    (255, 149, 0), # Orange\n    (52, 199, 89), # Green\n    (255, 59, 48), # Red\n    (175, 82, 222),# Purple\n    (255, 45, 85), # Pink\n    (88, 86, 214), # Indigo\n    (90, 200, 250),# Teal\n    (255, 204, 0)  # Yellow\n]\n\nlight_palette = np.array(raw_light_palette)\/255\n\n\nmpl.rcParams['axes.prop_cycle'] = cycler('color',light_palette)\n\nsurvived_palette = ['#dddddd', mpl.colors.to_hex(light_palette[2])]\nsex_palette = [light_palette[0], light_palette[3]]","a72b2205":"# Code Source : https:\/\/www.kaggle.com\/subinium\/tps-jan-happy-new-year\ntrain['date'] = pd.to_datetime(train['date'])\ntest['date'] = pd.to_datetime(test['date'])","90bcd08d":"# Code Source : https:\/\/www.kaggle.com\/subinium\/tps-jan-happy-new-year\ntrain.describe(include='O')","8ee1fae3":"# Code Source : https:\/\/www.kaggle.com\/subinium\/tps-jan-happy-new-year\nfor col in ['country', 'store', 'product']:\n    print(col, train[col].unique())","6afd0920":"# Code Source : https:\/\/www.kaggle.com\/subinium\/tps-jan-happy-new-year\nprint('train date duration : ', train['date'].min(), train['date'].max())\nprint('test date duration : ', test['date'].min(), test['date'].max())","8b4c10d4":"# Code Source : https:\/\/www.kaggle.com\/subinium\/tps-jan-happy-new-year\nfor col in ['country', 'store', 'product']:\n    display(pd.DataFrame(train[col].value_counts()))","4389759a":"# Code Source : https:\/\/www.kaggle.com\/subinium\/tps-jan-happy-new-year\nfor col in ['country', 'store', 'product']:\n    display(pd.DataFrame(test[col].value_counts()))","0b6ce746":"# Code Source : https:\/\/www.kaggle.com\/subinium\/tps-jan-happy-new-year\ntrain_date = train.set_index('date').pivot(columns=['country', 'store', 'product'], values='num_sold')\ntrain_date.head()","a4c5c000":"# Code Source : https:\/\/www.kaggle.com\/subinium\/tps-jan-happy-new-year\ntrain_month = train.set_index('date').groupby([pd.Grouper(freq='M'), 'country', 'store', 'product'])['num_sold'].mean().unstack([1, 2, 3])\ntrain_month_country = train.set_index('date').groupby([pd.Grouper(freq='M'), 'country'])['num_sold'].mean().unstack()\ntrain_month.head()","8003608f":"# Code Source : https:\/\/www.kaggle.com\/subinium\/tps-jan-happy-new-year\nfig, ax = plt.subplots(1, 1, figsize=(12, 7))\ntrain_monthly = train.set_index('date').groupby([pd.Grouper(freq='M')])[['num_sold']].mean()\n\nsns.lineplot(x=\"date\", y=\"num_sold\", data=train, ax=ax, label='daily')\nsns.lineplot(x=\"date\", y=\"num_sold\", data=train_monthly, ax=ax, label='monthly mean', color='black')\nax.set_title('Monthly Trend', fontsize=20, fontweight='bold', loc='left', y=1.03)\nax.grid(alpha=0.5)\nax.legend()\nplt.show()","0d91422f":"# Code Source : https:\/\/www.kaggle.com\/subinium\/tps-jan-happy-new-year\ncountry_daily = train.groupby(['date','country'])[['num_sold']].sum().reset_index(level=[0,1])\nfor country in train['country'].unique():\n    display(country_daily[country_daily['country']==country].sort_values(by=['num_sold'], ascending=False).head(30))","8db7ea21":"# Code Source : https:\/\/www.kaggle.com\/subinium\/tps-jan-happy-new-year\nfig, ax = plt.subplots(1, 1, figsize=(12, 7))\ntrain_monthly_country = train.set_index('date').groupby([pd.Grouper(freq='M'),'country'])[['num_sold']].mean()\nsns.lineplot(x=\"date\", y='num_sold', hue='country', data=train_monthly_country, ax=ax)\n\nax.set_ylabel('num_sold')\nax.set_title('Monthly Trend by Country', fontsize=15, fontweight='bold', loc='left')\nax.grid(alpha=0.5)\nplt.show()","8b6d0718":"# Code Source : https:\/\/www.kaggle.com\/subinium\/tps-jan-happy-new-year\ntrain['dayofweek'] = train['date'].dt.dayofweek\ntest['dayofweek'] = test['date'].dt.dayofweek","fa35d1bd":"# Code Source : https:\/\/www.kaggle.com\/subinium\/tps-jan-happy-new-year\nfig, ax = plt.subplots(1, 1, figsize=(12, 7))\ntrain_dayofweek = train.set_index('date').groupby([pd.Grouper(freq='M'), 'dayofweek'])[['num_sold']].mean()\n\nsns.lineplot(x=\"date\", y='num_sold', hue='dayofweek', data=train_dayofweek, ax=ax)\nax.set_title('Trend by day of the week', fontsize=15, fontweight='bold', loc='left')\nax.grid(alpha=0.5)\nplt.show()","e4938e18":"# Code Source : https:\/\/www.kaggle.com\/subinium\/tps-jan-happy-new-year\ntrain['weekend'] = train['dayofweek'].apply(lambda x : x >= 5)\nfig, ax = plt.subplots(1, 1, figsize=(12, 7))\ntrain_weekend = train.set_index('date').groupby([pd.Grouper(freq='M'), 'weekend'])[['num_sold']].mean()\nsns.lineplot(x=\"date\", y=\"num_sold\", hue='weekend', data=train_weekend, ax=ax)\nax.set_title('Weekend vs. Weekday Trend Comparison', fontsize=15, fontweight='bold', loc='left')\nax.grid(alpha=0.5)\nplt.show()","42178b52":"# Code Source : https:\/\/www.kaggle.com\/subinium\/tps-jan-happy-new-year\nfig, ax = plt.subplots(figsize=(12, 9))\ncountry_dayofweek = pd.pivot_table(train, index='country', columns='dayofweek', values='num_sold', aggfunc=np.mean)\ncountry_dayofweek = pd.DataFrame(country_dayofweek.divide(country_dayofweek.sum(axis=1), axis=0).unstack()).reset_index(level=[0,1])\ncountry_dayofweek.rename(columns={0:'num_sold'}, inplace=True)\n# country_dayofweek.reset_index(level=[0,1])\nsns.barplot(x='dayofweek', y='num_sold', hue='country',data=country_dayofweek, ax=ax)\nax.grid(axis='y',alpha=0.5, )\nax.set_xticklabels(['MON', 'TUE', 'WED','THU','FRI','SAT','SUN'])\nax.set_title('Percentage by day of the week by country', fontsize=15, fontweight='bold', loc='left')\nplt.show()","0080a45d":"# Code Source : https:\/\/www.kaggle.com\/subinium\/tps-jan-happy-new-year\ncountry_product = pd.pivot_table(train, index='country', columns='product', values='num_sold', aggfunc=np.mean)\ncountry_product.divide(country_product.sum(axis=1), axis=0)","57c2d8f6":"# Code Source : https:\/\/www.kaggle.com\/subinium\/tps-jan-happy-new-year\ncountry_product_dayofweek = pd.pivot_table(train, index='dayofweek', columns='product', values='num_sold', aggfunc=np.mean)\ncountry_product_dayofweek.divide(country_product_dayofweek.sum(axis=1), axis=0)","360a89a3":"# Code Sorce : https:\/\/www.kaggle.com\/bernhardklinger\/tps-jan-2022\ndef pre_process(df):\n    \n    df['date'] = pd.to_datetime(df['date'])\n    df['week']= df['date'].dt.week\n    df['year'] = 'Y'+df['date'].dt.year.astype(str)\n    df['quarter'] = 'Q'+df['date'].dt.quarter.astype(str)\n    df['day'] = df['date'].dt.day\n    df['dayofyear'] = df['date'].dt.dayofyear\n    df.loc[(df.date.dt.is_leap_year) & (df.dayofyear >= 60),'dayofyear'] -= 1\n    df['weekend'] = df['date'].dt.weekday >=5\n    df['weekday'] = 'WD' + df['date'].dt.weekday.astype(str)\n    df.drop(columns=['date'],inplace=True)   \n\npre_process(train)\npre_process(test)","603c5956":"# Code Sorce : https:\/\/www.kaggle.com\/bernhardklinger\/tps-jan-2022\ntrain.info(), test.info()","ca6d35eb":"# Code sorce : https:\/\/www.kaggle.com\/c\/web-traffic-time-series-forecasting\/discussion\/36414\ndef SMAPE(y_true, y_pred):\n    denominator = (y_true + np.abs(y_pred)) \/ 200.0\n    diff = np.abs(y_true - y_pred) \/ denominator\n    diff[denominator == 0] = 0.0\n    return np.mean(diff)","086fea7b":"# Code Sorce : https:\/\/www.kaggle.com\/bernhardklinger\/tps-jan-2022\nreg = setup(data = train,\n            target = 'num_sold',\n            normalize=True,\n            normalize_method='robust', \n            transform_target = True,\n            data_split_shuffle = False, \n            create_clusters = False, \n            use_gpu = True,\n            silent = True, # silent : If you give a value of 'True', automation is performed, and if you give a value of 'False', no automation is performed.\n                                     # ('True'  \uac12\uc744 \uc8fc\uba74 \uc790\ub3d9\ud654\ub97c \uc2dc\ucf1c\uc8fc\uace0,  'False'\ub85c \uac12\uc744 \uc8fc\uba74 \uc790\ub3d9\ud654\ub97c \uc2dc\ucf1c\uc8fc\uc9c0 \uc54a\ub294 \uc5ed\ud560.)\n            fold=10,\n            n_jobs = -1)","9dea4518":"# Code Sorce : https:\/\/www.kaggle.com\/bernhardklinger\/tps-jan-2022\nadd_metric('SMAPE', 'SMAPE', SMAPE, greater_is_better = False) # TensorFlow is built-in in Pi Carrot, so you can use 'add_metric' of TensorFlow's 'Keras' api.\n                                                               # (\ud30c\uc774\uce90\ub86f\uc548\uc5d0 \ud150\uc11c\ud50c\ub85c\uc6b0\uac00 \ub0b4\uc7a5 \ub418\uc5b4\uc788\uc5b4 \ud150\uc11c\ud50c\ub85c\uc6b0\uc758 'Keras' api \uc758 'add_metric' \uc0ac\uc6a9 \uac00\ub2a5.)\ntop =compare_models(sort = 'SMAPE',n_select = 3, include = ['catboost','lightgbm','xgboost']) # Compare Models: Compare different models to find a model that fits your data.\n                                                                                              # (Compare Models : \ub370\uc774\ud130\uc5d0 \uc801\ud569\ud55c \ubaa8\ub378\uc744 \ucc3e\uae30 \uc704\ud574 \ub2e4\uc591\ud55c \ubaa8\ub378\uc744 \ube44\uad50\ud569\ub2c8\ub2e4.)","4fb20529":"# Code Sorce : https:\/\/www.kaggle.com\/bernhardklinger\/tps-jan-2022\nblend = blend_models(top) # blend_models( ) : compares several models and finds a suitable model.\n                          # (blend_models( )\ub294 \uc5ec\ub7ec \ubaa8\ub378\uc744 \ube44\uad50\ud574\uc11c \uc801\ud569\ud55c \ubaa8\ub378\uc744\ucc3e\uc544 \uc8fc\ub294\uc5ed\ud560\uc744 \ud55c\ub2e4.)\npredict_model(blend)","caa9c8fe":"# Code Sorce : https:\/\/www.kaggle.com\/bernhardklinger\/tps-jan-2022\nfinal_blend = finalize_model(blend)  # It serves to finalize the model on the entire data set.\n                                     # ('finalize'\ub97c \ubc88\uc5ed\ud558\uba74 \uc644\uc131'\uc774\ub77c\ub294 \uc758\ubbf8\uc774\uae30 \ub54c\ubb38\uc5d0 \uc804\uccb4 \ub370\uc774\ud130 \uc138\ud2b8\uc5d0\uc11c \ubaa8\ub378\uc744 \ub9c8\ubb34\ub9ac\ud558\ub294 \uc5ed\ud560\uc744 \ud55c\ub2e4.)\npredict_model(final_blend)","7720f795":"# Code Sorce : https:\/\/www.kaggle.com\/bernhardklinger\/tps-jan-2022\npreds = predict_model(final_blend, data=test) \nsub = pd.DataFrame(list(zip(test.index,preds.Label)),columns = ['row_id', 'num_sold']) \nsub.to_csv('submission.csv', index = False) \nprint(sub.head(),sub.describe())","88e84ccc":"test.head()","df2ceba4":"train.head()","584c3988":"#### The 'train' data is from '2015' to '2018'.\n#### The 'test' data is from '2019'.\n#### ('train' \ub370\uc774\ud130\ub294 '2015\ub144' ~ '2018\ub144' \uae4c\uc9c0\uc758 \ub370\uc774\ud130\uc774\uace0\n####  'test' \ub370\uc774\ud130\ub294 '2019\ub144'\uc758 \ub370\uc774\ud130\uc774\ub2e4.)","d324bd48":"![](https:\/\/t4.ftcdn.net\/jpg\/04\/60\/05\/05\/360_F_460050532_7JjxeTTaZLyk7RTOayql8iX4O6Zlctjs.jpg)","5d3e8ace":"#### This year is the year of the black tiger. happy New Year."}}