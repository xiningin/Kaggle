{"cell_type":{"595e3e91":"code","3a28a16b":"code","9482b9b1":"code","6bb9fe47":"code","3acf8743":"code","5da060bd":"code","ad62338a":"code","30299997":"code","0f96f3a8":"code","37878dc7":"code","353e3c02":"code","c4c9db8d":"code","276646fd":"code","a9919a91":"code","75b13f3e":"code","ab0e313e":"code","60690e3c":"code","7975600a":"code","46a972fb":"code","a1b5aee6":"code","2e27b25a":"code","4e77ce2b":"markdown","b8b36eb8":"markdown","fa3e3fbf":"markdown","982105d9":"markdown","c0b0ae60":"markdown","637e0af9":"markdown","06ff76c7":"markdown","48654a67":"markdown","00dd46e8":"markdown","46386246":"markdown","baeb7f63":"markdown","b0a5de05":"markdown","0ef0a0bb":"markdown","f2d4654d":"markdown","181c6e79":"markdown","d0d4f08c":"markdown","389e9687":"markdown","4f1dda10":"markdown","e9170cf2":"markdown","8d7a152b":"markdown"},"source":{"595e3e91":"a = 1    #atribui o valor 1 \u00e0 vari\u00e1vel a","3a28a16b":"a       #ao digitar o nome de uma vari\u00e1vel no prompt interativo ","9482b9b1":"b = a\nb","6bb9fe47":"b is a   # o operaor is retorna True se duas vari\u00e1veis apontam para o mesmo objeto. Ele retornar\u00e1 False caso n\u00e3o apontem","3acf8743":"a = 2","5da060bd":"a","ad62338a":"res = True\ntas = False","30299997":"resultado = 2 ** 1000   #o tipo int consegue manipular grandes inteiros, por exemplo 2 elevado a 1000\nresultado","0f96f3a8":"pi = 3.1435\nw = 7.349","37878dc7":"inteiro = 5  #dado do tipo int (pois n\u00e3o tem o ponto decimal)\nreal = 5.0   #dado do tipo float (tem o ponto decimal)","353e3c02":"c = 1 + 3.2j    #numero complexo\nd = 2.6 - 7.8j  #outro numero complexo","c4c9db8d":"#Python suporta opera\u00e7\u00f5es com n\u00fameros complexos naturalmente\nsomacomplexa = c + d\nsomacomplexa","276646fd":"c = None #a vari\u00e1vel c ser\u00e1 criada e apontar\u00e1 para um objeto None","a9919a91":"p = 9\ntype(p)  #retorna um objeto type que representa o tipo do objeto apontado pela vari\u00e1vel p","75b13f3e":"nome = \"jessica\"\nnome[0]    #Podemos acessar um caractere da string pela sua posi\u00e7\u00e3o, como\u00e7ando a parti do zero. O caracter na posi\u00e7\u00e3o 0 \u00e9 \"j\"","ab0e313e":"#todavia, como a string \u00e9 um objeto imut\u00e1vel, n\u00e3o podemos trocar um determinado caractere por outro:\nnome[j] = \"G\"   #Erro, pois a string \u00e9 imut\u00e1vel","60690e3c":"#observe a diferen\u00e7a de interpreta\u00e7\u00e3o ao escrever um nome entre aspas e sem as aspas\nresultado = 19\nn = resultado  #como o nome resultado est\u00e1 sem aspas, Python interpreta que vc se refere ao conte\u00fado da vari\u00e1vel resultado. Assim. n tb apontar\u00e1 p\/ 19\nn","7975600a":"m = \"resultado\" #aqui, resultado est\u00e1 entre aspas. \n#Ent\u00e3o, Python interpreta que voc\u00ea quer realmente trabalhar com o texto \"resultado\" (literalmente), e n\u00e3o com a vari\u00e1vel resultado\nm","46a972fb":"v = (7,  2.5,  'Carol',  None,  1)  #pode-se misturar tipos na mesma tupla\nv","a1b5aee6":"#pode-se acessar os alementos da tupla atrav\u00e9s de \u00edndices, come\u00e7ando a contar do zero.\nv[2]","2e27b25a":"#no entanto, n\u00e3o se pode trocar o objeto em um determinado \u00edndice, pois a tupla \u00e9um objeto imut\u00e1vel\nv[1] = 4    #erro, pois a tupla \u00e9 imut\u00e1vel","4e77ce2b":"Quando um objeto fica sem ser apontado por alguma vari\u00e1vel, ele \u00e9 automaticamente removido (destru\u00eddo) da mem\u00f3ria (**coleta autom\u00e1tica de lixo**);\nVari\u00e1veis podem ser destru\u00eddas atrav\u00e9s do operador del:\n\ndel b\n\nRemove a vari\u00e1vel b. Se o objeto para o qual b apontava n\u00e3o for apontado por mais nenhuma outra vari\u00e1vel, ele tamb\u00e9m ser\u00e1 removido.\n\n![image.png](attachment:image.png)","b8b36eb8":"# int:\n    n\u00famero inteiro. A partir do Python 3, a precis\u00e3o \u00e9 arbitr\u00e1ria (pode-se utilizar quantos bits forem necess\u00e1rios). Assim, Python consegue manipular inteiros grandes de modo muito natural, por exemplo: 2 elevado a 1000 :****","fa3e3fbf":"# None: \n    lugar reservado vazio (Note a primeira letra mai\u00fascula). Possui alguma similaridade com a constante NULL em C. None \u00e9 utilizado, por exemplo quando se deseja inicializar uma vari\u00e1vel mas ainda n\u00e3o se tem um valor apropriado para a mesma. ","982105d9":"# float: \n    ponto flutuante para representa\u00e7\u00e3o de n\u00fameros reais racionas (64 bits). Usa-se ponto para separar a parte decimal, por exemplo 3.1415 .","c0b0ae60":"# tuple: \n    tuplas (arrays imut\u00e1veis). Podem ser declaradas usando par\u00eanteses (opcionais). Assim como as strings, tuplas s\u00e3o indexadas","637e0af9":"Assim, a \u00fanica forma de alterar o valor apontado pela vari\u00e1vel a \u00e9 gerando um novo objeto:\n\na = 2\n\nAo executar a atribui\u00e7\u00e3o acima, a deixar\u00e1 de apontar para o objeto 1 e passar\u00e1 a apontar para o objeto 2.\n\n\n![image.png](attachment:image.png)\n\n**Note que, embora os objetos imut\u00e1veis n\u00e3o possam mudar de valor, as vari\u00e1veis est\u00e3o liberadas para apontarem para novos objetos conforme nosso desejo e necessidade.**","06ff76c7":"Em uma atribui\u00e7\u00e3o do tipo:\n\nb = a\n\nNesse caso, N\u00c3O ser\u00e1 criado um novo objeto na mem\u00f3ria. A vari\u00e1vel b ser\u00e1 criada e passar\u00e1 a apontar para o mesmo objeto que a aponta:\n\n![image.png](attachment:image.png)\n\n**\u00c9 importante frisar que uma opera\u00e7\u00e3o do tipo b = a NUNCA gera uma c\u00f3pia de objetos em Python**; Ela apenas faz duas vari\u00e1veis apontarem para o mesmo objeto","48654a67":"Qual o perigo de haver duas vari\u00e1veis apontando para o mesmo objeto?\n\n![image.png](attachment:image.png)\n\nSe o objeto tiver seu valor modificado, ambas as vari\u00e1veis refletir\u00e3o essa altera\u00e7\u00e3o!\n\nTodavia, nesse caso espec\u00edfico, o objeto 1 n\u00e3o pode ser alterados, pois n\u00fameros s\u00e3o objetos imut\u00e1veis em Python. Objetos imut\u00e1veis s\u00f3 podem ser criados e destru\u00eddos, mas nunca podem ter seu valor alterado.","00dd46e8":"# str: \n    strings (sequ\u00eancias de caracteres). Podem ser declaradas usando aspas simples ou duplas (Python n\u00e3o define o tipo caractere isolado). Strings em Python n\u00e3o terminam com \u2018\\0\u2019. ","46386246":"# Tipos b\u00e1sicos imut\u00e1veis\nObjetos de tipos imut\u00e1veis n\u00e3o podem ser alterados na mem\u00f3ria, apenas criados ou destru\u00eddos. Os tipos b\u00e1sicos imut\u00e1veis s\u00e3o:\n\n# bool: \n    tipo booleano. S\u00f3 pode assumir os valores True (verdadeiro) e False (falso) (note a primeira letra mai\u00fascula)","baeb7f63":"# Aula 1 - Introdu\u00e7\u00e3o ao Universo da Programa\u00e7\u00e3o em Python - Professor: Wendel Melo\n\n\n**T\u00f3picos: Vari\u00e1veis, Atribui\u00e7\u00f5es e Objetos Imut\u00e1veis**\n\n\npara uma discuss\u00e3o mais detalhada, consulte o Cap\u00edtulo 2 do nosso livro em https:\/\/wendelmelo.net\/book","b0a5de05":"# Vari\u00e1veis em Python:\n\n* N\u00e3o h\u00e1 declara\u00e7\u00e3o de vari\u00e1veis em Python;\n* Vari\u00e1veis s\u00e3o criadas e destru\u00eddas dinamicamente;\n* Vari\u00e1veis em Python apontam para objetos (isto \u00e9, s\u00e3o apontadores ou ponteiros de objetos);\n* Vari\u00e1veis em Python n\u00e3o possuem tipo (o que possui tipo s\u00e3o os objetos apontados pelas vari\u00e1veis);\n* Uma vari\u00e1vel pode apontar para objetos de quaisquer tipos;\n* Todo o gerenciamento de mem\u00f3ria \u00e9 feito de forma autom\u00e1tica.\n","0ef0a0bb":"2. Se a vari\u00e1vel indicada pelo lado esquerdo da atribui\u00e7\u00e3o n\u00e3o existir no escopo (contexto) atual, cria-se esta vari\u00e1vel (a vari\u00e1vel a);\n\n![image.png](attachment:image.png)","f2d4654d":"A simples presen\u00e7a do ponto dentre os d\u00edgitos \u00e9 suficiente para fazer com que o n\u00famero seja considerado como float, e n\u00e3o int. Por exemplo, 5.0 \u00e9 considerado um dado (objeto) do tipo float. Por sua vez 5 (sem o ponto e o zero) \u00e9 considerado um dado do tipo int.","181c6e79":"3. A vari\u00e1vel indicada no lado esquerdo da atribui\u00e7\u00e3o (a vari\u00e1vel a) passa a apontar para o objeto gerado no Passo 1 (o n\u00famero 1).\n\n![image.png](attachment:image.png)","d0d4f08c":"# complex: \n    n\u00fameros complexos. Usa-se a letra j para designar o n\u00famero imagin\u00e1rio:  1+3j  ;   2.7 \u2013 1.4J    (j pode ser mai\u00fasculo ou min\u00fasculo)","389e9687":"# type: \n    objetos tipo. \u00datil, por exemplo, para testar o tipo de um objeto","4f1dda10":"1. Gera-se na mem\u00f3ria o objeto (dado) resultante do lado direito da atribui\u00e7\u00e3o (o n\u00famero 1);\n\n![image.png](attachment:image.png)\n","e9170cf2":"Quando realizamos uma atribui\u00e7\u00e3o do tipo: \n\na = 1\n\no interpretador realiza os seguintes passos:\n","8d7a152b":"# para uma discuss\u00e3o mais detalhada, consulte o Cap\u00edtulo 2 do nosso livro em https:\/\/wendelmelo.net\/book"}}