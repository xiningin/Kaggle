{"cell_type":{"595026bd":"code","6002a987":"code","a3850287":"code","c0967446":"code","eca23a51":"code","fa0724c5":"code","dd30141b":"code","4c814a37":"code","28f9a349":"code","6f112b0a":"code","52eacfe0":"markdown","2843a015":"markdown","a2b44904":"markdown","2ce0b766":"markdown"},"source":{"595026bd":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","6002a987":"import numpy as np\nimport pandas as pd\nfrom keras.utils import np_utils\nfrom keras.models import Sequential\nfrom keras.layers import Dense,Dropout,Conv2D,MaxPool2D,Flatten\nfrom keras.optimizers import Adam\nfrom sklearn.model_selection import train_test_split","a3850287":"train = pd.read_csv('\/kaggle\/input\/Kannada-MNIST\/train.csv')\ntest = pd.read_csv('\/kaggle\/input\/Kannada-MNIST\/test.csv')\nsubmission = pd.read_csv('\/kaggle\/input\/Kannada-MNIST\/sample_submission.csv')\ndisplay(train.shape,test.shape)\n","c0967446":"Id = test['id']","eca23a51":"x_train, x_test, y_train, y_test = train_test_split(train.iloc[:, 1:], train.iloc[:, 0], test_size=0.2)\ndisplay(x_train.shape,y_train.shape,x_test.shape,y_test.shape)","fa0724c5":"y_test.head()","dd30141b":"# (60000,784)->(60000,28,28,1)\nx_train = x_train.values.reshape(-1,28,28,1)\/255.0\nx_test = x_test.values.reshape(-1,28,28,1)\/255.0\n\ny_train = np_utils.to_categorical(y_train,num_classes=10)\ny_test = np_utils.to_categorical(y_test,num_classes=10)\n","4c814a37":"model = Sequential()\n\nmodel.add(Conv2D(input_shape = (28,28,1),filters = 32,kernel_size = 5,strides = 1,padding = 'same',activation = 'relu'))\nmodel.add(MaxPool2D(pool_size = 2,strides = 2,padding = 'same'))\nmodel.add(Conv2D(64,5,strides=1,padding='same',activation = 'relu'))\nmodel.add(MaxPool2D(2,2,'same'))\nmodel.add(Flatten())\n\nmodel.add(Dense(1024,activation = 'relu'))\n# Dropout\nmodel.add(Dropout(0.5))\n\nmodel.add(Dense(10,activation='softmax'))\n\nadam = Adam(lr=1e-4)\n\nmodel.compile(optimizer=adam,loss='categorical_crossentropy',metrics=['accuracy'])\n\nmodel.fit(x_train,y_train,batch_size=32,epochs=10)\n\nloss,accuracy = model.evaluate(x_test,y_test)\n\nprint('test loss',loss)\nprint('test accuracy',accuracy)","28f9a349":"test = test.drop(['id'],axis=1)\ntest = test.values.reshape(test.shape[0],28,28,1)\/255.0\nFINAL_PREDS = model.predict_classes(test)","6f112b0a":"submission = pd.DataFrame({ 'id': Id,\n                            'label': FINAL_PREDS })\nsubmission.to_csv(path_or_buf =\"submission.csv\", index=False)\nsubmission.head()","52eacfe0":"load data\n","2843a015":"Data preprocessing","a2b44904":"Prepare the CNN model","2ce0b766":"prepare train and test\n"}}