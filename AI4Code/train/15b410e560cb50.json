{"cell_type":{"51fed526":"code","dfec08d4":"code","c5481bc0":"code","70e9b4ec":"code","65b533bb":"code","05ae5444":"code","8f71a374":"code","8f5c16ed":"code","4f17c379":"code","99b2f3cd":"code","7d3e099c":"code","3827e357":"code","c6ae4d23":"code","76037c9a":"code","511ec0a3":"code","36e1829b":"code","224d7da4":"code","965861cd":"code","8067c53c":"code","229d9dbc":"code","a51ecbba":"code","72859723":"markdown","603a8014":"markdown","6d4cb27e":"markdown","328fd77e":"markdown","28eb1ffb":"markdown","964d8868":"markdown","6e7acaed":"markdown","4b268fc0":"markdown","d0d323e7":"markdown","f1eab567":"markdown","dd0b9c1c":"markdown"},"source":{"51fed526":"#pd.set_option('display.max_rows', 500)\n#pd.set_option('display.max_columns', 500)\n#pd.set_option('display.width', 1000)","dfec08d4":"# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session\n\nfrom scipy.stats import mode\nfrom sklearn.preprocessing import LabelEncoder\nfrom sklearn.model_selection import train_test_split, StratifiedKFold\nfrom sklearn.metrics import roc_auc_score\n\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\nimport time\n\nfrom importlib import reload  \nimport scipy.stats\n\n!pip install  --no-dependencies  git+https:\/\/github.com\/j-bac\/elpigraph-python.git\nimport elpigraph","c5481bc0":"# load omics data\ndf1 = pd.read_csv('\/kaggle\/input\/breast-cancer-omics-bulk-data\/METABRIC.txt', sep = '\\t', index_col = 0)\ndf1=df1.T\ni1 = [s.replace('BRCA-METABRIC-S1-','') for s in df1.index ]\n#print('number of common ids:', len(set(i2) & set(df1.index) ) )\ndf1.index = i1\ndf1\n# load clinical data\ndf2 = pd.read_csv('\/kaggle\/input\/breast-cancer-omics-bulk-data\/METABRIC_clinical.txt', sep = '\\t')#, index_col = 0)\ndf2 = df2.set_index('Patient ID')\ndf2\ndf = df2.join(df1, how = 'inner')\nprint('Joined data shape', df.shape)\ndf\nm = df['Relapse Free Status'].notnull()\nprint( m.sum() )\ndf = df[m].copy()\ndf['Relapse Free Status'] = df['Relapse Free Status'].map({'0:Not Recurred':0,'1:Recurred':1 } )\nprint(df.shape)\ndisplay(df.head())\n\ndf_full = df.copy()\ndf = df.iloc[:,37:] # OMICS data only","70e9b4ec":"df_full['Pam50 + Claudin-low subtype'].value_counts()","65b533bb":"X = df.values.copy()","05ae5444":"f = 'Pam50 + Claudin-low subtype' #   'pam50_+_claudin-low_subtype'\nvec4color = df_full[f]\n\nfrom sklearn.decomposition import PCA\nimport seaborn as sns\nimport matplotlib.pyplot as plt\npca = PCA\nr = pca().fit_transform(X = X )\nplt.figure(figsize = (20,10))\nsns.scatterplot( x=r[:,0], y=r[:,1], hue = vec4color )\nplt.title('PCA for Omics data colored by Pam50 groups')\nplt.show()","8f71a374":"X_var = X.var(axis = 0)\nprint( X_var.shape, X.shape, X_var[:5] )\nix = np.argsort(X_var)\nX = X[:,ix[-1000:]]\n","8f5c16ed":"df = df.iloc[:,ix[-1000:]]\ndf","4f17c379":"f = 'Pam50 + Claudin-low subtype' #   'pam50_+_claudin-low_subtype'\n\nfrom sklearn.decomposition import PCA\nimport seaborn as sns\nimport matplotlib.pyplot as plt\npca = PCA\nr = pca().fit_transform(X = X )\nplt.figure(figsize = (20,10))\nsns.scatterplot( x=r[:,0], y=r[:,1], hue = vec4color )\nplt.title('PCA for Omics data colored by Pam50 groups')\nplt.show()","99b2f3cd":"!pip install trimap\n\nimport sys\nsys.path.insert(0,'\/kaggle\/input\/breast-cancer-omics-bulk-data\/code\/')# \"\/path\/to\/your\/package_or_module\")\nprint(sys.path)\n\nfrom clintraj_qi import *\nfrom clintraj_eltree import *\nfrom clintraj_util import *\nfrom clintraj_ml import *\nfrom clintraj_optiscale import *","7d3e099c":"variable_types, binary, continuous, ordinal = detect_variable_type(df,10,verbose=False)","3827e357":"df = remove_constant_columns_from_dataframe(df)\nvariable_names = list(df.columns)\nX = df.to_numpy().copy()\nX_original = X.copy()\nX_before_scaling = X.copy()\nX,cik = optimal_scaling(X,variable_types,verbose=True,vmax=0.6)\nX_save = X.copy()\nX.shape","c6ae4d23":"f = 'Pam50 + Claudin-low subtype' #   'pam50_+_claudin-low_subtype'\n\nfrom sklearn.decomposition import PCA\nimport seaborn as sns\nimport matplotlib.pyplot as plt\npca = PCA\nr = pca().fit_transform(X = X )\nplt.figure(figsize = (20,10))\nsns.scatterplot( x=r[:,0], y=r[:,1], hue = vec4color )\nplt.title('PCA for Omics data colored by Pam50 groups')\nplt.show()","76037c9a":"reduced_dimension = 30\nX = scipy.stats.zscore(X)\npca = PCA(n_components=X.shape[1],svd_solver='full')\nY = pca.fit_transform(X)\nv = pca.components_.T\nmean_val = np.mean(X,axis=0)\nX = Y[:,0:reduced_dimension]","511ec0a3":"f = 'Pam50 + Claudin-low subtype' #   'pam50_+_claudin-low_subtype'\nvec4color = df_full[f]\n\nfrom sklearn.decomposition import PCA\nimport seaborn as sns\nimport matplotlib.pyplot as plt\npca = PCA\nr = pca().fit_transform(X = X )\nplt.figure(figsize = (20,10))\nsns.scatterplot( x=r[:,0], y=r[:,1], hue = vec4color )\nplt.title('PCA for Omics data colored by Pam50 groups')\nplt.show()","36e1829b":"from sklearn.decomposition import PCA\ntry :\n    import umap\nexcept:\n    print('cannot import umap')\n\ndef plot_graph(edges, nodes_positions, data = None, dim_reduction = 'PCA', graph_color = 'black', graph_linewidth=2, \n               plot_data = True, data_linewidth = 1,  data_color = 'tab:red', data_transparency_alpha = 0.9,\n               showNodeNumbers = False, # Shows text with internal number of each node\n               umap_n_neighbors = 50, umap_min_dist = 0.99):\n  '''\n  #' Plots graphs defined by edges and nodes_positions, optionally - scatter plot the \"data\" on the same plot,\n  #' Optionally performs PCA\/etc (depending on dim_reduction)\n  #'\n  #' @param edges Nx2-shape matrix with edges ends, i.e. edges[k,0], edges[k,1] - ends of k-th edge  \n  #' @param nodes_positions  matrix of nodes positions \n  #' @param data  \"original dataset\", basically arbitrary dataset for scatter plot, it should have same shape[1] as nodes_positions\n  #' @param plot_data  True\/False - to scatterplot or not data\n  #' @param dim_reduction  'PCA', 'plot_first2axis', 'umap'\n  #' @param data_color can be a vector or predefined color - argument for c = data_color in scatter\n\n  #' @examples\n  # edges = np.array([ [0,1],[1,2],[2,0] ] )\n  # nodes_positions = np.random.rand(3,10) # 3 points in 10d space\n  # plot_graph(edges, nodes_positions)\n  #\n  # t = elpigraph_output\n  # edges = t[0]['Edges'][0]\n  # nodes_positions = t[0]['NodePositions']\n  # plot_graph(edges, nodes_positions)\n  '''\n  str_dim_reduction = dim_reduction\n  if dim_reduction in ['PCA', 'umap' ]: #  not 'plot_first2axis':\n    if dim_reduction.upper() == 'PCA':\n      reducer = PCA()\n    elif dim_reduction.lower() == 'umap':\n      n_neighbors = umap_n_neighbors#  50\n      min_dist= umap_min_dist # 0.99\n      #n_components=n_components\n      reducer = umap.UMAP( n_neighbors=n_neighbors,        min_dist=min_dist, n_components = 2)\n\n    if data is not None:\n      data2 = reducer.fit_transform(data)\n      if plot_data == True:\n        if data_color is None:\n          plt.scatter(data2[:,0],data2[:,1], linewidth = data_linewidth , alpha = data_transparency_alpha)# ,cmap=plt.cm.Paired) # ,c=np.array(irx) \n          plt.xlabel(str_dim_reduction+'1')\n          plt.ylabel(str_dim_reduction+'2')\n        else:\n          #plt.scatter(data2[:,0],data2[:,1] ,cmap=plt.cm.Paired,c= data_color, linewidth = data_linewidth, alpha = data_transparency_alpha ) \n          sns.scatterplot( x=data[:,0], y=data[:,1], hue = data_color )\n\n          plt.xlabel(str_dim_reduction+'1')\n          plt.ylabel(str_dim_reduction+'2')\n    else:\n      reducer.fit(nodes_positions)\n\n    nodes_positions2 = reducer.transform( nodes_positions )\n  else:\n    if plot_data == True:\n      if data is not None:\n        if data_color is None:\n          plt.scatter(data[:,0],data[:,1] , linewidth = linewidth, alpha = data_transparency_alpha )# ,cmap=plt.cm.Paired) # ,c=np.array(irx) \n        else:\n          plt.scatter(data[:,0],data[:,1] ,cmap=plt.cm.Paired,c= data_color , linewidth = data_linewidth, alpha = data_transparency_alpha ) \n          #sns.scatterplot( x=data[:,0], y=data[:,1], hue = data_color )\n\n    nodes_positions2 = nodes_positions\n\n  plt.scatter(nodes_positions2[:,0],nodes_positions2[:,1],c = graph_color, linewidth = graph_linewidth)#, cmap=plt.cm.Paired)\n\n  edgeCount = edges.shape[0]\n  for k in range(edgeCount):\n    n0 = edges[k,0]\n    n1 = edges[k,1]\n    x_line = [ nodes_positions2[n0,0],  nodes_positions2[n1,0] ]\n    y_line = [ nodes_positions2[n0,1],  nodes_positions2[n1,1] ]\n    plt.plot(x_line, y_line, graph_color, linewidth = graph_linewidth) # 'black')\n\n  if showNodeNumbers:\n    for i in range(nodes_positions2.shape[0]):\n      plt.text(nodes_positions2[i,0],nodes_positions2[i,1],str(i),FontSize=20,bbox=dict(facecolor='grey', alpha=0.5))    \n    \nedges = np.array([ [0,1],[1,2],[2,0] ] )\nnodes_positions = np.random.rand(3,10) # 3 points in 10d space\nplot_graph(edges, nodes_positions)\nplt.title('Example graph plot with  plot_graph function')\nplt.show()","224d7da4":"import time\nf = 'Pam50 + Claudin-low subtype' #   'pam50_+_claudin-low_subtype'\nvec4colors = df_full[f].values\n\nfor nnodes in [10,20, 25, 30, 40, 50, 60, 100]:\n    t0 = time.time()\n    tree_elpi = elpigraph.computeElasticPrincipalTree(X,nnodes,# ,drawPCAView=True,\n                                                      alpha=0.01,Mu=0.1,Lambda=0.05,\n                                                      FinalEnergy='Penalized')\n    tree = tree_elpi[0]\n\n    nodes_positions = tree['NodePositions']\n    edges = tree['Edges'][0]\n\n    plt.figure(figsize = (20,8))\n    plot_graph(edges, nodes_positions, data = X , data_color = vec4colors) # df[f]) # 'tab:blue', data_transparency_alpha = 0.3 )\n    plt.title('nnodes ' + str(nnodes))\n    plt.show()\n    print(np.round(time.time()-t0,1),'seconds passed. nnodes = ', nnodes)","965861cd":"!pip install trimap\n\nimport sys\nsys.path.insert(0,'\/kaggle\/input\/breast-cancer-omics-bulk-data\/code\/')# \"\/path\/to\/your\/package_or_module\")\nprint(sys.path)\n\nfrom clintraj_qi import *\nfrom clintraj_eltree import *\nfrom clintraj_util import *\nfrom clintraj_ml import *\nfrom clintraj_optiscale import *","8067c53c":"import time\nf = 'Pam50 + Claudin-low subtype' #   'pam50_+_claudin-low_subtype'\nvec4colors = df_full[f].values\n\nfor nnodes in [10,20, 25, 30, 40, 50, 60, 100]:\n    t0 = time.time()\n    tree_elpi = elpigraph.computeElasticPrincipalTree(X,nnodes,# ,drawPCAView=True,\n                                                      alpha=0.01,Mu=0.1,Lambda=0.05,\n                                                      FinalEnergy='Penalized')\n    tree = tree_elpi[0]\n    # some additional pruning of the graph\n    prune_the_tree(tree)\n\n    nodes_positions = tree['NodePositions']\n    edges = tree['Edges'][0]\n\n    plt.figure(figsize = (20,8))\n    plot_graph(edges, nodes_positions, data = X , data_color = vec4colors) # df[f]) # 'tab:blue', data_transparency_alpha = 0.3 )\n    plt.title('nnodes ' + str(nnodes))\n    plt.show()\n    print(np.round(time.time()-t0,1),'seconds passed. nnodes = ', nnodes)\n    \n    \n","229d9dbc":"import time\nf = 'Pam50 + Claudin-low subtype' #   'pam50_+_claudin-low_subtype'\nvec4colors = df_full[f].values\n\nfor nnodes in [10,20, 25, 30, 40, 50, 60, 100]:\n    t0 = time.time()\n    tree_elpi = elpigraph.computeElasticPrincipalTree(X,nnodes,# ,drawPCAView=True,\n                                                      alpha=0.01,Mu=0.1,Lambda=0.05,\n                                                      FinalEnergy='Penalized')\n    tree = tree_elpi[0]\n    # some additional pruning of the graph\n    prune_the_tree(tree)\n    \n    # extend the leafs to reach the extreme data points\n    tree = ExtendLeaves_modified(X, tree, Mode = \"QuantDists\", ControlPar = .5, DoSA = False)\n    \n\n    nodes_positions = tree['NodePositions']\n    edges = tree['Edges'][0]\n\n    plt.figure(figsize = (20,8))\n    plot_graph(edges, nodes_positions, data = X , data_color = vec4colors) # df[f]) # 'tab:blue', data_transparency_alpha = 0.3 )\n    plt.title('nnodes ' + str(nnodes))\n    plt.show()\n    print(np.round(time.time()-t0,1),'seconds passed. nnodes = ', nnodes)\n    \n    \n","a51ecbba":"import time\nf = 'Pam50 + Claudin-low subtype' #   'pam50_+_claudin-low_subtype'\nvec4colors = df_full[f].values\n\nfor nnodes in range(15,25):\n    t0 = time.time()\n    tree_elpi = elpigraph.computeElasticPrincipalTree(X,nnodes,# ,drawPCAView=True,\n                                                      alpha=0.01,Mu=0.1,Lambda=0.05,\n                                                      FinalEnergy='Penalized')\n    tree = tree_elpi[0]\n    # some additional pruning of the graph\n    prune_the_tree(tree)\n    \n    # extend the leafs to reach the extreme data points\n    tree = ExtendLeaves_modified(X, tree, Mode = \"QuantDists\", ControlPar = .5, DoSA = False)\n    \n\n    nodes_positions = tree['NodePositions']\n    edges = tree['Edges'][0]\n\n    plt.figure(figsize = (20,8))\n    plot_graph(edges, nodes_positions, data = X , data_color = vec4colors) # df[f]) # 'tab:blue', data_transparency_alpha = 0.3 )\n    plt.title('nnodes ' + str(nnodes))\n    plt.show()\n    print(np.round(time.time()-t0,1),'seconds passed. nnodes = ', nnodes)\n    \n    \n","72859723":"# Auxilliary function to plot graphs and data","603a8014":"# Prepare data","6d4cb27e":"# What is about \n\nConstruct trajectories for OMICS part of METABRIC breast cancer dataset, color it by PAM50 clusters. \nTrajectories constructed by ElPiGraph package. \nWe study different preprocessings and params and choose the best from our point of view.\n\nThe notebook shows results for many versions of params and preprossings. \nThe best scheme: preprocessings from ClinTrajan package (including stanard scaler), preserve only 1000 genes with highest variance,\nmake PCA to 30 dimensions, construct ElPiGraph with 20 nodes using additionally use prune_the_tree + ExtendLeaves_modified from ClingTrajan. \n\nThe main conlusions is  that clusters which can be defined by segments of trajectories \nquite correspond to standard PAM50 clusters. (In subsequent parts we will argue that these clusters might even have certain advantages\nover standard clusters).\n\nElPiGraph package: https:\/\/github.com\/j-bac\/elpigraph-python\n\nClinTrajan package: https:\/\/github.com\/auranic\/ClinTrajan\/ (downloaded to the present kaggle dataset folder)\n\n\nVersion 7: just introduction updated\n\nVersion 6: test additional preprocessing step - optimal_scaling from ClinTrajan package \n\n***Conlusion:***  Same params as before are quite good. \n\nVersion 5: use standard scaler, additionally check the range(15,25) of nodes values, \nusing options: prune_the_tree(tree), tree = ExtendLeaves_modified(X, tree, Mode = \"QuantDists\", ControlPar = .5, DoSA = False)\n\n***Conlusion:*** 20 nodes with standard scaler + prune_the_tree + ExtendLeaves_modified provides \nmost reasonable trajectories i.e. branching points correspond to \"transition\" from one PAM50 to other PAM50 cluster \n\n\nVersion 4: (use standard scaler:)\nX = scipy.stats.zscore(X)\n\n\nVersion 3: (do not use standard scaler:)\ncomment line: X = scipy.stats.zscore(X)\n\n","328fd77e":"# No pruning, No extension ","28eb1ffb":"## Prune and then extend to reach extreme data points ","964d8868":"## Prune and then extend to reach extreme data points ","6e7acaed":"# Reduce dimensions","4b268fc0":"# Trajectories by ElpiGraph","d0d323e7":"## Prune tree (i.e. cut edges of len = 1 )","f1eab567":"# Import","dd0b9c1c":"# Visualization\n\nAlso cut 1000 highly variable genes "}}