{"cell_type":{"8a940675":"code","6e142e49":"code","88f18cd1":"code","f3c3ea5e":"code","ed220a28":"code","2eb9fe36":"code","24168f55":"code","36f7ae5c":"code","26c08246":"code","3183dffe":"code","c32a7633":"code","7fba547c":"code","818f9737":"code","40d663eb":"code","89c126c0":"code","72d74b51":"code","ba093638":"code","ec6c3bf3":"code","1c7fecb0":"code","4ca96f12":"code","673fa1e3":"code","7ea5bde6":"code","89f51465":"code","12b66209":"code","9ec49f93":"code","54dff575":"code","67cc139f":"code","fc0c5a69":"code","632734fb":"code","e88e310b":"code","cff21ed2":"code","768a9f1f":"code","c0d57403":"code","da71af4c":"code","bde0b8c0":"code","127931ae":"code","6479e2f8":"code","8eaf954d":"code","f35d7fe9":"code","969da2cb":"markdown","b50875ac":"markdown","86507824":"markdown","01571daa":"markdown","e2024923":"markdown","b9be53a7":"markdown","20013e10":"markdown","6c270a56":"markdown","c46835c1":"markdown","903db818":"markdown","8d0ff1a4":"markdown","08cfc357":"markdown","0138d6e7":"markdown","8ba1f723":"markdown","7b1f697e":"markdown","21b4f403":"markdown","98a9f2e8":"markdown","636e059b":"markdown","8cb0fd79":"markdown"},"source":{"8a940675":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n%matplotlib inline","6e142e49":"loans = pd.read_csv('..\/input\/loan-dataset\/loan_data.csv')","88f18cd1":"loans.head()","f3c3ea5e":"loans.info()","ed220a28":"loans.describe()","2eb9fe36":"sns.set()","24168f55":"sns.countplot('credit.policy', data=loans)","36f7ae5c":"plt.figure(figsize=(10,6))\nloans[loans['credit.policy']==1]['fico'].hist(alpha=0.5,color='blue',bins=30,label='credit.policy=1')\nloans[loans['credit.policy']==0]['fico'].hist(alpha=0.5,color='red',bins=30,label='credit.policy=0')\nplt.legend()\nplt.xlabel('FICO')","26c08246":"plt.figure(figsize=(10,6))\nloans[loans['not.fully.paid']==1]['fico'].hist(alpha=0.5,color='blue',\n                                              bins=30,label='not.fully.paid=1')\nloans[loans['not.fully.paid']==0]['fico'].hist(alpha=0.5,color='red',\n                                              bins=30,label='not.fully.paid=0')\nplt.legend()\nplt.xlabel('FICO')","3183dffe":"plt.figure(figsize=(12,12))\nsns.countplot('purpose', hue='not.fully.paid', data=loans)","c32a7633":"sns.jointplot(x='fico', y= 'int.rate', data= loans)","7fba547c":"sns.lmplot(x='fico', y='int.rate', col='not.fully.paid', hue='credit.policy', data=loans)","818f9737":"loans.info()","40d663eb":"cat_feats = ['purpose']","89c126c0":"final_data = pd.get_dummies(loans,columns=cat_feats,drop_first=True)","72d74b51":"final_data.head()","ba093638":"final_data.info()","ec6c3bf3":"from sklearn.model_selection import train_test_split","1c7fecb0":"X = final_data.drop('not.fully.paid',axis=1)\ny = final_data['not.fully.paid']\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.30, random_state=101)","4ca96f12":"from sklearn.tree import DecisionTreeClassifier","673fa1e3":"dtree = DecisionTreeClassifier()","7ea5bde6":"dtree.fit(X_train,y_train)","89f51465":"predictions = dtree.predict(X_test)","12b66209":"from sklearn.metrics import classification_report,confusion_matrix","9ec49f93":"print(classification_report(y_test,predictions))","54dff575":"from sklearn.metrics import accuracy_score","67cc139f":"accuracy_score(predictions, y_test)","fc0c5a69":"from sklearn.metrics import confusion_matrix","632734fb":"confusion_matrix(predictions, y_test)","e88e310b":"from sklearn.ensemble import RandomForestClassifier","cff21ed2":"rfc = RandomForestClassifier(n_estimators=100)","768a9f1f":"rfc.fit(X_train,y_train)","c0d57403":"predictions = rfc.predict(X_test)","da71af4c":"from sklearn.metrics import classification_report,confusion_matrix","bde0b8c0":"print(classification_report(y_test,predictions))","127931ae":"from sklearn.metrics import accuracy_score","6479e2f8":"accuracy_score(predictions, y_test)","8eaf954d":"from sklearn.metrics import confusion_matrix","f35d7fe9":"confusion_matrix(predictions, y_test)","969da2cb":"## Train Test Split\n\nNow its time to split our data into a training set and a testing set!\n\n** Use sklearn to split your data into a training set and a testing set as we've done in the past.**","b50875ac":"** Check out the info(), head(), and describe() methods on loans.**","86507824":"**Create an instance of DecisionTreeClassifier() called dtree and fit it to the training data.**","01571daa":"## Training the Random Forest model\n\nNow its time to train our model!\n\n**Create an instance of the RandomForestClassifier class and fit it to our training data from the previous step.**","e2024923":"## Predictions and Evaluation of Decision Tree\n**Create predictions from the test set and create a classification report and a confusion matrix.**","b9be53a7":"## Predictions and Evaluation\n\nLet's predict off the y_test values and evaluate our model.\n\n** Predict the class of not.fully.paid for the X_test data.**","20013e10":"**Now use pd.get_dummies(loans,columns=cat_feats,drop_first=True) to create a fixed larger dataframe that has new feature columns with dummy variables. Set this dataframe as final_data.**","6c270a56":"## Categorical Features\n\nNotice that the **purpose** column as categorical\n\nThat means we need to transform them using dummy variables so sklearn will be able to understand them. Let's do this in one clean step using pd.get_dummies.\n\nLet's show you a way of dealing with these columns that can be expanded to multiple categorical features if necessary.\n\n**Create a list of 1 element containing the string 'purpose'. Call this list cat_feats.**","c46835c1":"** Let's see the trend between FICO score and interest rate. Recreate the following jointplot.**","903db818":"# Random Forest Project \n\nFor this project we will be exploring publicly available data from [LendingClub.com](www.lendingclub.com). Lending Club connects people who need money (borrowers) with people who have money (investors). Hopefully, as an investor you would want to invest in people who showed a profile of having a high probability of paying you back. We will try to create a model that will help predict this.\n\nLending club had a [very interesting year in 2016](https:\/\/en.wikipedia.org\/wiki\/Lending_Club#2016), so let's check out some of their data and keep the context in mind. This data is from before they even went public.\n\nWe will use lending data from 2007-2010 and be trying to classify and predict whether or not the borrower paid back their loan in full. You can download the data from [here](https:\/\/www.lendingclub.com\/info\/download-data.action) or just use the csv already provided. It's recommended you use the csv provided as it has been cleaned of NA values.\n\nHere are what the columns represent:\n* credit.policy: 1 if the customer meets the credit underwriting criteria of LendingClub.com, and 0 otherwise.\n* purpose: The purpose of the loan (takes values \"credit_card\", \"debt_consolidation\", \"educational\", \"major_purchase\", \"small_business\", and \"all_other\").\n* int.rate: The interest rate of the loan, as a proportion (a rate of 11% would be stored as 0.11). Borrowers judged by LendingClub.com to be more risky are assigned higher interest rates.\n* installment: The monthly installments owed by the borrower if the loan is funded.\n* log.annual.inc: The natural log of the self-reported annual income of the borrower.\n* dti: The debt-to-income ratio of the borrower (amount of debt divided by annual income).\n* fico: The FICO credit score of the borrower.\n* days.with.cr.line: The number of days the borrower has had a credit line.\n* revol.bal: The borrower's revolving balance (amount unpaid at the end of the credit card billing cycle).\n* revol.util: The borrower's revolving line utilization rate (the amount of the credit line used relative to total credit available).\n* inq.last.6mths: The borrower's number of inquiries by creditors in the last 6 months.\n* delinq.2yrs: The number of times the borrower had been 30+ days past due on a payment in the past 2 years.\n* pub.rec: The borrower's number of derogatory public records (bankruptcy filings, tax liens, or judgments).","8d0ff1a4":"## Training a Decision Tree Model\n\nLet's start by training a single decision tree first!\n\n** Import DecisionTreeClassifier**","08cfc357":"# Setting up the Data\n\nLet's get ready to set up our data for our Random Forest Classification Model!\n\n**Check loans.info() again.**","0138d6e7":"** Create the following lmplots to see if the trend differed between not.fully.paid and credit.policy. Check the documentation for lmplot() if you can't figure out how to separate it into columns.**","8ba1f723":"** Create a similar figure, except this time select by the not.fully.paid column.**","7b1f697e":"** Create a countplot using seaborn showing the counts of loans by purpose, with the color hue defined by not.fully.paid. **","21b4f403":"## Get the Data\n\n** Use pandas to read loan_data.csv as a dataframe called loans.**","98a9f2e8":"# Great Job!","636e059b":"# Import Libraries\n\n**Import the usual libraries for pandas and plotting. You can import sklearn later on.**","8cb0fd79":"# Exploratory Data Analysis\n\nLet's do some data visualization! We'll use seaborn and pandas built-in plotting capabilities, but feel free to use whatever library you want. Don't worry about the colors matching, just worry about getting the main idea of the plot.\n\n** Create a histogram of two FICO distributions on top of each other, one for each credit.policy outcome.**\n\n*Note: This is pretty tricky, feel free to reference the solutions. You'll probably need one line of code for each histogram, I also recommend just using pandas built in .hist()*"}}