{"cell_type":{"9ad3025a":"code","7da560c3":"code","039a221a":"code","6eec98b3":"code","4294d12e":"code","47ebd298":"code","05c34896":"code","3b759138":"code","603b764a":"code","635db875":"code","65af6a65":"code","8135bea8":"code","07b3872d":"code","f5dc9e7f":"code","a554556c":"code","3ecfcdc2":"code","bd0e1f53":"code","a378923f":"code","7477c5de":"code","60cc78e4":"code","fe1009e1":"code","2f63b3c2":"code","fcfea5b4":"code","f3903dde":"code","fd713467":"code","6aceeaa5":"code","704de83e":"code","88ba67ed":"code","c8dc95ca":"code","acde1d14":"code","5988b372":"code","0b5ee6d2":"code","948747f9":"code","a1f308ac":"code","bc5d2058":"code","5aab3476":"code","2b3af78d":"code","92f5dcd4":"code","fd622c8b":"code","10cdeb6a":"code","5e00e51b":"code","e6301ae1":"code","28a0c776":"code","a510bae6":"markdown","eada4aa1":"markdown","d6e5190f":"markdown","d788cd5d":"markdown","7caf0fd9":"markdown","258e5400":"markdown","135a8f2b":"markdown","caff5759":"markdown","388f092a":"markdown","9420569b":"markdown","fc018a2f":"markdown","2b7ac4e4":"markdown","3ced8856":"markdown","512051d5":"markdown","1ec5c5c5":"markdown","662e715b":"markdown","ae7cb03f":"markdown","071b4426":"markdown","af04f4eb":"markdown","7700e69e":"markdown","bf021d73":"markdown","2d207366":"markdown","b2a64e02":"markdown"},"source":{"9ad3025a":"import numpy as np\nimport pandas as pd\n\nfrom datetime import datetime, timedelta, date, time\n\nimport plotly.express as px\nimport plotly.io as pio\npio.templates.default = \"plotly_dark\"\nfrom plotly.subplots import make_subplots\n\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n# hide warnings\nimport warnings\nwarnings.filterwarnings('ignore')\n","7da560c3":"# color pallette\ncnf = '#67000d' # confirmed - dark brown\ndth = '#ff2e63' # death - red\nrec = '#21bf73' # recovered - cyan\nact = '#636efa' # active case - yellow","039a221a":"from plotly.offline import download_plotlyjs, init_notebook_mode, plot, iplot\nimport plotly as py\nimport plotly.graph_objs as go\n\ninit_notebook_mode(connected=True) #do not miss this line\n\ndata = [go.Bar(\n        x=[\"Monday\", \"Tuesday\"],\n        y=[55,100]  )]\nfig = go.Figure(data=data)\n\npy.offline.iplot(fig)","6eec98b3":"ts19confirmed = pd.read_csv('\/kaggle\/input\/novel-corona-virus-2019-dataset\/time_series_covid_19_confirmed.csv')\nts19recover = pd.read_csv('\/kaggle\/input\/novel-corona-virus-2019-dataset\/time_series_covid_19_recovered.csv')\nts19deaths = pd.read_csv('\/kaggle\/input\/novel-corona-virus-2019-dataset\/time_series_covid_19_deaths.csv')","4294d12e":"# confirmed = pd.melt(ts19confirmed, id_vars=['Province\/State', 'Country\/Region', 'Lat', 'Long'], var_name='Date', value_name='Confirmed')\n# recovered = pd.melt(ts19recover, id_vars=['Province\/State', 'Country\/Region', 'Lat', 'Long'], var_name='Date', value_name='Recovered')\n# deaths = pd.melt(ts19deaths, id_vars=['Province\/State', 'Country\/Region', 'Lat', 'Long'], var_name='Date', value_name='Deaths')\n\n# result = confirmed\n# result['Deaths'] = deaths['Deaths'].values\n# result['Recovered'] = recovered['Recovered'].values\n\n# new_data = result\n# new_data['Date'] = pd.to_datetime(new_data['Date'])\n# new_data = new_data.reset_index(drop=True)\n# new_data['Active'] = new_data['Confirmed'] - (new_data['Deaths'] + new_data['Recovered'])\n# data = new_data\n# without_china = data[data['Country\/Region'] != 'China']","47ebd298":"data = pd.read_csv('\/kaggle\/input\/corona-virus-report\/covid_19_clean_complete.csv', parse_dates=['Date'])\ndata['Active'] = data['Confirmed'] - (data['Deaths'] + data['Recovered'])\n# data = data[data['Date'] < '2020-03-23']\ndata = data\nwithout_china = data[data['Country\/Region'] != 'China']","05c34896":"# data = pd.read_csv('\/kaggle\/input\/novel-corona-virus-2019-dataset\/covid_19_data.csv', parse_dates=['ObservationDate', 'Last Update'])\n# data = data.copy()\n# data = data.drop(['SNo', 'Last Update'], axis=1)\n# data['Country\/Region'] = data['Country\/Region'].replace('Mainland China', 'China')\n# data = data.rename(columns={\"ObservationDate\": \"Date\"})\n# data['Active'] = data['Confirmed'] - (data['Deaths'] + data['Recovered'])\n# data.sort_values(by='Confirmed', ascending=False\n# without_china = data[data['Country\/Region'] != 'China']","3b759138":"last_max_data = data.groupby(['Date'])['Confirmed', 'Deaths', 'Recovered', 'Active'].sum()\nlast_max_data = last_max_data.reset_index()\nlast_max_data = last_max_data[last_max_data['Date'] == max(last_max_data['Date'])]\nlast_max_data = last_max_data.reset_index(drop=True)\nlast_max_data['Deaths %'] = round(100 * last_max_data['Deaths'] \/ last_max_data['Confirmed'], 2)\nlast_max_data['Recovered %'] = round(100 * last_max_data['Recovered'] \/ last_max_data['Confirmed'], 2)\nlast_max_data['Active %'] = round(100 * last_max_data['Active'] \/ last_max_data['Confirmed'], 2)","603b764a":"lencov19 = len(data['Country\/Region'].unique())\nepidemics = pd.DataFrame({\n    'epidemic' : ['COVID-19', 'SARS', 'EBOLA', 'MERS', 'Swine flu'],\n    'start_year' : [2019, 2002, 2014, 2012, 2009],\n    'end_year' : [2020, 2004, 2016, 2020, 2010],\n    'confirmed' : [last_max_data['Confirmed'].sum(), 8096, 28646, 2519, 6724149],\n    'deaths' : [last_max_data['Deaths'].sum(), 774, 11323, 866, 19654],\n    'total countries' : [lencov19, 29, 10, 27, 60],\n    'began from': ['China', 'China', 'Guinea', 'Saudi Arabia', 'US'],\n})\n\nepidemics['mortality'] = round((epidemics['deaths']\/epidemics['confirmed'])*100, 2)\n\nepidemics.style.background_gradient(cmap='Pastel1')","635db875":"temp = epidemics.melt(id_vars='epidemic', value_vars=['confirmed', 'deaths', 'mortality'],\n                      var_name='Case', value_name='Value')\n\nfig = px.bar(temp, x=\"epidemic\", y=\"Value\", color='epidemic', text='Value', facet_col=\"Case\",\n             color_discrete_sequence = px.colors.qualitative.Bold)\nfig.update_traces(textposition='outside')\nfig.update_layout(uniformtext_minsize=8, uniformtext_mode='hide')\nfig.update_yaxes(showticklabels=False)\nfig.layout.yaxis2.update(matches=None)\nfig.layout.yaxis3.update(matches=None)\nfig.show()","65af6a65":"last_max_data.style.background_gradient(cmap='Pastel1')","8135bea8":"wc_last_max_data = without_china.groupby(['Date'])['Confirmed', 'Deaths', 'Recovered', 'Active'].sum()\nwc_last_max_data = wc_last_max_data.reset_index()\nwc_last_max_data = wc_last_max_data[wc_last_max_data['Date'] == max(wc_last_max_data['Date'])]\nwc_last_max_data = wc_last_max_data.reset_index(drop=True)\nwc_last_max_data['Deaths Rate'] = round(100 * wc_last_max_data['Deaths'] \/ wc_last_max_data['Confirmed'], 2)\nwc_last_max_data['Recovered Rate'] = round(100 * wc_last_max_data['Recovered'] \/ wc_last_max_data['Confirmed'], 2)\nwc_last_max_data['Active Rate'] = round(100 * wc_last_max_data['Active'] \/ wc_last_max_data['Confirmed'], 2)\nwc_last_max_data.style.background_gradient(cmap='Pastel1')","07b3872d":"def per_day_data_mrg(country_name):\n    cr_per_day_data = data.groupby(['Date', 'Country\/Region'])['Confirmed', 'Deaths', 'Recovered'].sum()\n    cr_per_day_data = cr_per_day_data.reset_index()\n    cr_per_day_data = cr_per_day_data[cr_per_day_data['Country\/Region'] == country_name]\n    cr_per_day_data = cr_per_day_data.drop(['Country\/Region'], axis=True).reset_index(drop=True)\n    cr_per_day_data = cr_per_day_data.set_index(['Date']).diff()\n    cr_per_day_data = cr_per_day_data.reset_index()\n    cr_per_day_data.insert(1, 'Country\/Region', country_name)\n    cr_per_day_data[['Confirmed', 'Deaths', 'Recovered']] = cr_per_day_data[['Confirmed', 'Deaths', 'Recovered']].fillna(0)\n    return cr_per_day_data\n\nunq_country_name = data['Country\/Region'].unique()\ndata_frames = []\nfor name in unq_country_name:\n    get_result = per_day_data_mrg(name)\n    data_frames.append(get_result)","f5dc9e7f":"cr_per_day_data_result = pd.concat(data_frames)\ncr_per_day_data_result.reset_index()\nnum = cr_per_day_data_result._get_numeric_data()\nnum[num < 0] = 0.0\ncr_per_day_data_result = cr_per_day_data_result.sort_values(by=['Date', 'Confirmed'], ascending=False).reset_index(drop=True)\ncr_per_day_data_result.head().style.background_gradient(cmap='Reds')","a554556c":"cr_per_day_data_result = pd.concat(data_frames)\ncr_per_day_data_result.reset_index()\nnum = cr_per_day_data_result._get_numeric_data()\nnum[num < 0] = 0.0\ncr_per_day_data_result = cr_per_day_data_result.sort_values(by=['Date', 'Deaths'], ascending=False).reset_index(drop=True)\ncr_per_day_data_result.head().style.background_gradient(cmap='Reds')","3ecfcdc2":"cr_per_day_data_result = pd.concat(data_frames)\ncr_per_day_data_result.reset_index()\nnum = cr_per_day_data_result._get_numeric_data()\nnum[num < 0] = 0.0\ncr_per_day_data_result = cr_per_day_data_result.sort_values(by=['Date', 'Recovered'], ascending=False).reset_index(drop=True)\ncr_per_day_data_result.head().style.background_gradient(cmap='Greens')","bd0e1f53":"ds_data = data.groupby('Date')['Confirmed', 'Deaths', 'Recovered'].sum().diff()\nds_data = ds_data.reset_index()\nds_data = ds_data.melt(id_vars=\"Date\",value_vars=['Confirmed', 'Deaths', 'Recovered'])\n\nfig = px.bar(ds_data, x=\"Date\", y=\"value\", color='variable', title='Daily Cases Whole world', color_discrete_sequence=['#536DFE', dth, rec])\nfig.update_layout(barmode='group')\nfig.show()\n\n# -----------------outside china--------------------------\n\nwc_ds_data = without_china.groupby('Date')['Confirmed', 'Deaths', 'Recovered'].sum().diff()\nwc_ds_data = wc_ds_data.reset_index()\nwc_ds_data = wc_ds_data.melt(id_vars=\"Date\",value_vars=['Confirmed', 'Deaths', 'Recovered'])\n\nfig = px.bar(wc_ds_data, x=\"Date\", y=\"value\", color='variable', title='Daily Cases Outside China', color_discrete_sequence=['#536DFE', dth, rec])\nfig.update_layout(barmode='group')\nfig.show()\n\n# -----------------in us--------------------------\nus_ds_data = data.copy()\nus_ds_data = us_ds_data[us_ds_data['Country\/Region'] == 'US']\n\nconfirmed_ds_data = us_ds_data[us_ds_data['Confirmed'] > 0]\ndate_time = confirmed_ds_data.values\ndate_time = date_time[0, 4] + pd.DateOffset(-2)\nus_ds_data = us_ds_data[us_ds_data['Date'] > date_time]\n\nus_ds_data = us_ds_data.groupby('Date')['Confirmed', 'Deaths', 'Recovered'].sum().diff()\nus_ds_data = us_ds_data.reset_index()\nus_ds_data = us_ds_data.melt(id_vars=\"Date\",value_vars=['Confirmed', 'Deaths', 'Recovered'])\n\nfig = px.bar(us_ds_data, x=\"Date\", y=\"value\", color='variable', title='Daily Cases In US', color_discrete_sequence=['#536DFE', dth, rec])\nfig.update_layout(barmode='group')\nfig.show()\n\n\n# -----------------in italy--------------------------\nit_ds_data = data.copy()\nit_ds_data = it_ds_data[it_ds_data['Country\/Region'] == 'Italy']\n\nconfirmed_ds_data = it_ds_data[it_ds_data['Confirmed'] > 0]\ndate_time = confirmed_ds_data.values\ndate_time = date_time[0, 4] + pd.DateOffset(-2)\nit_ds_data = it_ds_data[it_ds_data['Date'] > date_time]\n\nit_ds_data = it_ds_data.groupby('Date')['Confirmed', 'Deaths', 'Recovered'].sum().diff()\nit_ds_data = it_ds_data.reset_index()\nit_ds_data = it_ds_data.melt(id_vars=\"Date\",value_vars=['Confirmed', 'Deaths', 'Recovered'])\n\nfig = px.bar(it_ds_data, x=\"Date\", y=\"value\", color='variable', title='Daily Cases In Italy', color_discrete_sequence=['#536DFE', dth, rec])\nfig.update_layout(barmode='group')\nfig.show()\n\n# -----------------in spain--------------------------\nsp_ds_data = data.copy()\nsp_ds_data = sp_ds_data[sp_ds_data['Country\/Region'] == 'Spain']\n\nconfirmed_ds_data = sp_ds_data[sp_ds_data['Confirmed'] > 0]\ndate_time = confirmed_ds_data.values\ndate_time = date_time[0, 4] + pd.DateOffset(-2)\nsp_ds_data = sp_ds_data[sp_ds_data['Date'] > date_time]\n\nsp_ds_data = sp_ds_data.groupby('Date')['Confirmed', 'Deaths', 'Recovered'].sum().diff()\nsp_ds_data = sp_ds_data.reset_index()\nsp_ds_data = sp_ds_data.melt(id_vars=\"Date\",value_vars=['Confirmed', 'Deaths', 'Recovered'])\n\nfig = px.bar(sp_ds_data, x=\"Date\", y=\"value\", color='variable', title='Daily Cases In Spain', color_discrete_sequence=['#536DFE', dth, rec])\nfig.update_layout(barmode='group')\nfig.show()\n\n# -----------------in china--------------------------\nic_ds_data = data.copy()\nic_ds_data = ic_ds_data[ic_ds_data['Country\/Region'] == 'China']\nic_ds_data = ic_ds_data.groupby('Date')['Confirmed', 'Deaths', 'Recovered'].sum().diff()\nic_ds_data = ic_ds_data.reset_index()\nic_ds_data = ic_ds_data.melt(id_vars=\"Date\",value_vars=['Confirmed', 'Deaths', 'Recovered'])\n\nfig = px.bar(ic_ds_data, x=\"Date\", y=\"value\", color='variable', title='Daily Cases In China', color_discrete_sequence=['#536DFE', dth, rec])\nfig.update_layout(barmode='group')\nfig.show()\n\n# -----------------in iran--------------------------\nir_ds_data = data.copy()\nir_ds_data = ir_ds_data[ir_ds_data['Country\/Region'] == 'Iran']\n\nconfirmed_ds_data = ir_ds_data[ir_ds_data['Confirmed'] > 0]\ndate_time = confirmed_ds_data.values\ndate_time = date_time[0, 4] + pd.DateOffset(-2)\nir_ds_data = ir_ds_data[ir_ds_data['Date'] > date_time]\n\nir_ds_data = ir_ds_data.groupby('Date')['Confirmed', 'Deaths', 'Recovered'].sum().diff()\nir_ds_data = ir_ds_data.reset_index()\nir_ds_data = ir_ds_data.melt(id_vars=\"Date\",value_vars=['Confirmed', 'Deaths', 'Recovered'])\n\nfig = px.bar(ir_ds_data, x=\"Date\", y=\"value\", color='variable', title='Daily Cases In Iran', color_discrete_sequence=['#536DFE', dth, rec])\nfig.update_layout(barmode='group')\nfig.show()\n\n# -----------------in india--------------------------\nid_ds_data = data.copy()\nid_ds_data = id_ds_data[id_ds_data['Country\/Region'] == 'India']\n\nconfirmed_ds_data = id_ds_data[id_ds_data['Confirmed'] > 0]\ndate_time = confirmed_ds_data.values\ndate_time = date_time[0, 4] + pd.DateOffset(-2)\nid_ds_data = id_ds_data[id_ds_data['Date'] > date_time]\n\nid_ds_data = id_ds_data.groupby('Date')['Confirmed', 'Deaths', 'Recovered'].sum().diff()\nid_ds_data = id_ds_data.reset_index()\nid_ds_data = id_ds_data.melt(id_vars=\"Date\",value_vars=['Confirmed', 'Deaths', 'Recovered'])\n\nfig = px.bar(id_ds_data, x=\"Date\", y=\"value\", color='variable', title='Daily Cases In India', color_discrete_sequence=['#536DFE', dth, rec])\nfig.update_layout(barmode='group')\nfig.show()\n\n# -----------------in bangladesh--------------------------\nbd_ds_data = data.copy()\nbd_ds_data = bd_ds_data[bd_ds_data['Country\/Region'] == 'Bangladesh']\n\nconfirmed_ds_data = bd_ds_data[bd_ds_data['Confirmed'] > 0]\ndate_time = confirmed_ds_data.values\n# date_time[0, 4]\ndate_time = date_time[0, 4] + pd.DateOffset(-2)\nbd_ds_data = bd_ds_data[bd_ds_data['Date'] > date_time]\n\nbd_ds_data = bd_ds_data.groupby('Date')['Confirmed', 'Deaths', 'Recovered'].sum().diff()\nbd_ds_data = bd_ds_data.reset_index()\nbd_ds_data = bd_ds_data.melt(id_vars=\"Date\",value_vars=['Confirmed', 'Deaths', 'Recovered'])\n\nfig = px.bar(bd_ds_data, x=\"Date\", y=\"value\", color='variable', title='Daily Cases In Bangladesh', color_discrete_sequence=['#536DFE', dth, rec])\nfig.update_layout(barmode='group')\nfig.show()","a378923f":"pi_data = last_max_data.melt(id_vars=\"Date\", value_vars=['Active', 'Deaths', 'Recovered'], var_name='Case', value_name='Count')\nfig = px.pie(pi_data, values='Count', names='Case', color_discrete_sequence=[act, rec, dth])\nfig.show()","7477c5de":"pi_data = wc_last_max_data.melt(id_vars=\"Date\", value_vars=['Active', 'Deaths', 'Recovered'], var_name='Case', value_name='Count')\n# df = px.pi_data.tips()\nfig = px.pie(pi_data, values='Count', names='Case', color_discrete_sequence=[act, rec, dth])\nfig.show()","60cc78e4":"country_data = data[data['Confirmed'] > 0]\ncountry_data = country_data.groupby(['Date','Country\/Region'])['Confirmed', 'Deaths', 'Recovered', 'Active'].sum()\ncountry_data = country_data.reset_index()\ncountry_data = country_data.drop_duplicates(subset=[\"Country\/Region\"], keep='last')\ncountry_data = country_data.sort_values(by='Deaths', ascending=False)\ncountry_data = country_data.reset_index(drop=True)\ncountry_data['Deaths %'] = round(100 * country_data['Deaths'] \/ country_data['Confirmed'], 2)\ncountry_data['Recovered %'] = round(100 * country_data['Recovered'] \/ country_data['Confirmed'], 2)\ncountry_data['Active %'] = round(100 * country_data['Active'] \/ country_data['Confirmed'], 2)\ncountry_data.style.background_gradient(cmap='Reds')","fe1009e1":"wc_country_data = without_china.groupby(['Date','Country\/Region'])['Confirmed', 'Deaths', 'Recovered', 'Active'].sum()\nwc_country_data = wc_country_data.reset_index()\nwc_country_data = wc_country_data.drop_duplicates(subset=[\"Country\/Region\"], keep='last')\nwc_country_data = wc_country_data.sort_values(by='Deaths', ascending=False)\nwc_country_data = wc_country_data.reset_index(drop=True)\nwc_country_data['Deaths Rate'] = round(100 * wc_country_data['Deaths'] \/ wc_country_data['Confirmed'], 2)\nwc_country_data['Recovered Rate'] = round(100 * wc_country_data['Recovered'] \/ wc_country_data['Confirmed'], 2)\nwc_country_data['Active Rate'] = round(100 * wc_country_data['Active'] \/ wc_country_data['Confirmed'], 2)\nwc_country_data.style.background_gradient(cmap='Reds')","2f63b3c2":"line_data = data.groupby(['Date'])['Confirmed', 'Deaths', 'Recovered', 'Active'].sum().reset_index()\nline_data = line_data.melt(id_vars=\"Date\", value_vars=['Confirmed', 'Active', 'Recovered', 'Deaths'], var_name='Case', value_name='Count')\nfig = px.line(line_data, x='Date', y='Count', color='Case', title='Whole World Cases over time', color_discrete_sequence = [cnf, act, rec, dth])\nfig.show()","fcfea5b4":"wc_line_data = without_china.groupby(['Date'])['Confirmed', 'Deaths', 'Recovered', 'Active'].sum().reset_index()\nwc_line_data = wc_line_data.melt(id_vars=\"Date\", value_vars=['Confirmed', 'Active', 'Recovered', 'Deaths'], var_name='Case', value_name='Count')\nfig = px.line(wc_line_data, x='Date', y='Count', color='Case', title='Outside China Cases over time', color_discrete_sequence = [cnf, act, rec, dth])\nfig.show()","f3903dde":"ch_data = data[data['Country\/Region'] == 'China'].reset_index(drop=True)\nch_line_data = ch_data.groupby(['Date'])['Confirmed', 'Deaths', 'Recovered', 'Active'].sum().reset_index()\nch_line_data = ch_line_data.melt(id_vars=\"Date\", value_vars=['Confirmed', 'Active', 'Recovered', 'Deaths'], var_name='Case', value_name='Count')\nfig = px.line(ch_line_data, x='Date', y='Count', color='Case', title='China Cases over time', color_discrete_sequence = [cnf, act, rec, dth])\nfig.show()","fd713467":"it_data = data[data['Country\/Region'] == 'Italy'].reset_index(drop=True)\nit_data = it_data[it_data['Confirmed'] > 0]\nit_line_data = it_data.groupby(['Date'])['Confirmed', 'Deaths', 'Recovered', 'Active'].sum().reset_index()\nit_line_data = it_line_data.melt(id_vars=\"Date\", value_vars=['Confirmed', 'Active', 'Recovered', 'Deaths'], var_name='Case', value_name='Count')\nfig = px.line(it_line_data, x='Date', y='Count', color='Case', title='Italy Cases over time', color_discrete_sequence = [cnf, act, rec, dth])\nfig.show()","6aceeaa5":"ir_data = data[data['Country\/Region'] == 'Iran'].reset_index(drop=True)\nir_data = ir_data[ir_data['Confirmed'] > 0]\nir_line_data = ir_data.groupby(['Date'])['Confirmed', 'Deaths', 'Recovered', 'Active'].sum().reset_index()\nir_line_data = ir_line_data.melt(id_vars=\"Date\", value_vars=['Confirmed', 'Active', 'Recovered', 'Deaths'], var_name='Case', value_name='Count')\nfig = px.line(ir_line_data, x='Date', y='Count', color='Case', title='Iran Cases over time', color_discrete_sequence = [cnf, act, rec, dth])\nfig.show()","704de83e":"us_data = data[data['Country\/Region'] == 'US'].reset_index(drop=True)\nus_data = us_data[us_data['Confirmed'] > 0]\nus_line_data = us_data.groupby(['Date'])['Confirmed', 'Deaths', 'Recovered', 'Active'].sum().reset_index()\nus_line_data = us_line_data.melt(id_vars=\"Date\", value_vars=['Confirmed', 'Active', 'Recovered', 'Deaths'], var_name='Case', value_name='Count')\nfig = px.line(us_line_data, x='Date', y='Count', color='Case', title='US Cases over time', color_discrete_sequence = [cnf, act, rec, dth])\nfig.show()","88ba67ed":"in_data = data[data['Country\/Region'] == 'India'].reset_index(drop=True)\nin_data = in_data[in_data['Confirmed'] > 0]\nin_line_data = in_data.groupby(['Date'])['Confirmed', 'Deaths', 'Recovered', 'Active'].sum().reset_index()\nin_line_data = in_line_data.melt(id_vars=\"Date\", value_vars=['Confirmed', 'Active', 'Recovered', 'Deaths'], var_name='Case', value_name='Count')\nfig = px.line(in_line_data, x='Date', y='Count', color='Case', title='India Cases over time', color_discrete_sequence = [cnf, act, rec, dth])\nfig.show()","c8dc95ca":"bd_data = data[data['Country\/Region'] == 'Bangladesh'].reset_index(drop=True)\nbd_data = bd_data[bd_data['Confirmed'] > 0]\nbd_line_data = bd_data.groupby(['Date'])['Confirmed', 'Deaths', 'Recovered', 'Active'].sum().reset_index()\nbd_line_data = bd_line_data.melt(id_vars=\"Date\", value_vars=['Confirmed', 'Active', 'Recovered', 'Deaths'], var_name='Case', value_name='Count')\nfig = px.line(bd_line_data, x='Date', y='Count', color='Case', title='Bangladesh Cases over time', color_discrete_sequence = [cnf, act, rec, dth])\nfig.show()","acde1d14":"area_data = data.groupby(['Date'])['Deaths', 'Recovered', 'Active'].sum().reset_index()\narea_data = area_data.melt(id_vars=\"Date\", value_vars=['Deaths', 'Recovered', 'Active'], var_name='Case', value_name='Count')\nfig = px.area(area_data, x=\"Date\", y=\"Count\", color='Case',\n             title='Whole world Cases over time', color_discrete_sequence = [dth, rec, act])\nfig.show()","5988b372":"wc_area_data = without_china.groupby(['Date'])['Deaths', 'Recovered', 'Active'].sum().reset_index()\nwc_area_data = wc_area_data.melt(id_vars=\"Date\", value_vars=['Deaths', 'Recovered', 'Active'], var_name='Case', value_name='Count')\nfig = px.area(wc_area_data, x=\"Date\", y=\"Count\", color='Case',\n             title='Outside China Cases over time', color_discrete_sequence = [dth, rec, act])\nfig.show()","0b5ee6d2":"bar_data = data.groupby(['Date', 'Country\/Region'])['Confirmed', 'Deaths', 'Recovered', 'Active'].sum().reset_index()\nbar_data = bar_data.drop_duplicates(subset=[\"Country\/Region\"], keep='last')","948747f9":"conf_bar_data = bar_data.sort_values(by='Confirmed', ascending=False).head(10)\nconf_bar_data = conf_bar_data.sort_values(by='Confirmed', ascending=True)\nfig = px.bar(conf_bar_data, x=\"Confirmed\", y=\"Country\/Region\", title='Confirmed Cases for 10 Countries', text='Confirmed', orientation='h', \n             width=700, height=700, range_x = [0, max(bar_data['Confirmed'])+10000])\nfig.update_traces(marker_color='#46cdcf', opacity=0.8, textposition='outside')\nfig.show()\n\n\n\n\n\ndth_bar_data = bar_data.sort_values(by='Deaths', ascending=False).head(10)\ndth_bar_data = dth_bar_data.sort_values(by='Deaths', ascending=True)\nfig = px.bar(dth_bar_data, x=\"Deaths\", y=\"Country\/Region\", title='Deaths Cases for 10 Countries', text='Deaths', orientation='h', \n             width=700, height=700, range_x = [0, max(bar_data['Deaths'])+500])\nfig.update_traces(marker_color='#ff2e63', opacity=0.8, textposition='outside')\nfig.show()\n\n\n\n\nrec_bar_data = bar_data.sort_values(by='Recovered', ascending=False).head(10)\nrec_bar_data = rec_bar_data.sort_values(by='Recovered', ascending=True)\nfig = px.bar(rec_bar_data, x=\"Recovered\", y=\"Country\/Region\", title='Recovered Cases for 10 Countries', text='Recovered', orientation='h', \n             width=700, height=700, range_x = [0, max(bar_data['Recovered'])+10000])\nfig.update_traces(marker_color='#21bf73', opacity=0.8, textposition='outside')\nfig.show()\n\n\n\nact_bar_data = bar_data.sort_values(by='Active', ascending=False).head(10)\nact_bar_data = act_bar_data.sort_values(by='Active', ascending=True)\nfig = px.bar(act_bar_data, x=\"Active\", y=\"Country\/Region\", title='Active Cases for 10 Countries', text='Active', orientation='h', \n             width=700, height=700, range_x = [0, max(bar_data['Active'])+10000])\nfig.update_traces(marker_color='#fe9801', opacity=0.8, textposition='outside')\nfig.show()","a1f308ac":"wc_bar_data = without_china.groupby(['Date', 'Country\/Region'])['Confirmed', 'Deaths', 'Recovered', 'Active'].sum().reset_index()\nwc_bar_data = wc_bar_data.drop_duplicates(subset=[\"Country\/Region\"], keep='last')\n\nwc_bar_data['Deaths Rate'] = round(100 * wc_bar_data['Deaths'] \/ wc_bar_data['Confirmed'], 2)\nwc_bar_data['Recovered Rate'] = round(100 * wc_bar_data['Recovered'] \/ wc_bar_data['Confirmed'], 2)\nwc_bar_data['Active Rate'] = round(100 * wc_bar_data['Active'] \/ wc_bar_data['Confirmed'], 2)","bc5d2058":"wc_bar_data = wc_bar_data[wc_bar_data['Confirmed'] > 1000]\nwc_daths_rate = wc_bar_data\nwc_daths_rate = wc_daths_rate.sort_values(by=['Deaths Rate'], ascending=False).reset_index(drop=True)\nwc_daths_rate.style.background_gradient(cmap='Reds')","5aab3476":"wc_bar_data = wc_bar_data[wc_bar_data['Confirmed'] > 1000]\nwc_dth_bar_data = wc_bar_data.sort_values(by='Deaths Rate', ascending=False)\nwc_dth_bar_data = wc_dth_bar_data.sort_values(by='Deaths Rate', ascending=True)\nfig = px.bar(wc_dth_bar_data, x=\"Deaths Rate\", y=\"Country\/Region\", title='Outside China Minimum 1000 confirmed case Deaths Rate', text='Deaths Rate', orientation='h', \n             width=700, height=700, range_x = [0, max(wc_bar_data['Deaths Rate'])+5])\nfig.update_traces(marker_color='#ff2e63', opacity=0.8, textposition='outside')\nfig.show()\n\n\n\nwc_rec_bar_data = wc_bar_data[wc_bar_data['Confirmed'] > 1000]\nwc_rec_bar_data = wc_rec_bar_data.sort_values(by='Recovered Rate', ascending=False)\nwc_rec_bar_data = wc_rec_bar_data.sort_values(by='Recovered Rate', ascending=True)\nfig = px.bar(wc_rec_bar_data, x=\"Recovered Rate\", y=\"Country\/Region\", title='Outside China Minimum 1000 confirmed case Recovered Rate', text='Recovered Rate', orientation='h', \n             width=700, height=700, range_x = [0, max(wc_bar_data['Recovered Rate'])+5])\nfig.update_traces(marker_color='#21bf73', opacity=0.8, textposition='outside')\nfig.show()\n\n\n\n\nwc_act_bar_data = wc_bar_data[wc_bar_data['Confirmed'] > 1000]\nwc_act_bar_data = wc_act_bar_data.sort_values(by='Active Rate', ascending=False)\nwc_act_bar_data = wc_act_bar_data.sort_values(by='Active Rate', ascending=True)\nfig = px.bar(wc_act_bar_data, x=\"Active Rate\", y=\"Country\/Region\", title='Outside China Minimum 1000 confirmed case Active Rate', text='Active Rate', orientation='h', \n             width=700, height=700, range_x = [0, max(wc_bar_data['Active Rate'])+50])\nfig.update_traces(marker_color='#fe9801', opacity=0.8, textposition='outside')\nfig.show()","2b3af78d":"vertical_data = data.copy()\nbar_ver_data = vertical_data.groupby(['Date', 'Country\/Region'])['Confirmed', 'Deaths', 'Recovered', 'Active'].sum()\nbar_ver_data = bar_ver_data.reset_index()\nbar_ver_data = bar_ver_data.drop_duplicates(subset=[\"Country\/Region\"], keep='last')\nbar_ver_data = bar_ver_data.sort_values(by='Confirmed', ascending=False).reset_index(drop=True)\nbar_ver_data = bar_ver_data[bar_ver_data['Confirmed'] > 500]\n\nbar_ver_data = bar_ver_data.melt(id_vars=\"Country\/Region\", value_vars=['Active', 'Recovered', 'Deaths'])\n\nfig = px.bar(bar_ver_data.sort_values(['variable', 'value']), \n             x=\"Country\/Region\", y=\"value\", color='variable', orientation='v', height=800,\n             title='Minimum 500 confirmed cases, Whole world', color_discrete_sequence=[act, dth, rec])\nfig.update_layout(uniformtext_minsize=8, uniformtext_mode='hide')\nfig.show()","92f5dcd4":"wc_vertical = without_china.copy()\nwc_bar_ver_data = wc_vertical.groupby(['Date', 'Country\/Region'])['Confirmed', 'Deaths', 'Recovered', 'Active'].sum()\nwc_bar_ver_data = wc_bar_ver_data.reset_index()\nwc_bar_ver_data = wc_bar_ver_data.drop_duplicates(subset=[\"Country\/Region\"], keep='last')\nwc_bar_ver_data = wc_bar_ver_data.sort_values(by='Confirmed', ascending=False).reset_index(drop=True)\nwc_bar_ver_data = wc_bar_ver_data[wc_bar_ver_data['Confirmed'] > 500]\n\nwc_bar_ver_data = wc_bar_ver_data.melt(id_vars=\"Country\/Region\", value_vars=['Active', 'Recovered', 'Deaths'])\n\nfig = px.bar(wc_bar_ver_data.sort_values(['variable', 'value']), \n             x=\"Country\/Region\", y=\"value\", color='variable', orientation='v', height=800,\n             title='Minimum 500 confirmed case, outside China', color_discrete_sequence=[act, dth, rec])\nfig.update_layout(uniformtext_minsize=8, uniformtext_mode='hide')\nfig.show()","fd622c8b":"group_data = data.groupby(['Date', 'Country\/Region'])['Confirmed', 'Deaths', 'Recovered'].sum()\ngroup_data = group_data.reset_index()\ngroup_data['Date'] = pd.to_datetime(group_data['Date'])\ngroup_data['Date'] = group_data['Date'].dt.strftime('%m\/%d\/%Y')","10cdeb6a":"group_data['size'] = group_data['Confirmed'].pow(0.3) # 47^0.3\nfig = px.scatter_geo(group_data, locations=\"Country\/Region\", locationmode='country names', \n                     color=\"Confirmed\", size='size', hover_name=\"Country\/Region\",\n                     range_color= [0, max(group_data['Confirmed'])+2],\n                     projection=\"equirectangular\", animation_frame=\"Date\", \n                     title='Confirmed Spread over time')\n# fig.update(layout_coloraxis_showscale=False)\nfig.show()","5e00e51b":"group_data['size'] = group_data['Deaths'].pow(0.3) # 47^0.3\nfig = px.scatter_geo(group_data, locations=\"Country\/Region\", locationmode='country names', \n                     color=\"Deaths\", size='size', hover_name=\"Country\/Region\",\n                     range_color= [0, max(group_data['Deaths'])+2],\n                     projection=\"equirectangular\", animation_frame=\"Date\", \n                     title='Deaths Spread over time')\n# fig.update(layout_coloraxis_showscale=False)\nfig.show()","e6301ae1":"group_data['size'] = group_data['Recovered'].pow(0.3) # 47^0.3\nfig = px.scatter_geo(group_data, locations=\"Country\/Region\", locationmode='country names', \n                     color=\"Recovered\", size='size', hover_name=\"Country\/Region\",\n                     range_color= [0, max(group_data['Recovered'])+2],\n                     projection=\"equirectangular\", animation_frame=\"Date\", \n                     title='Recovered Spread over time')\n# fig.update(layout_coloraxis_showscale=False)\nfig.show()","28a0c776":"# temp = data.groupby(['Date', 'Country\/Region'])['Confirmed', 'Active', 'Deaths', 'Recovered'].sum()\n# temp = temp.reset_index().sort_values(by=['Date', 'Country\/Region'])\n# temp = temp[temp['Confirmed'] > 1000]\n\n# plt.style.use('seaborn')\n# g = sns.FacetGrid(temp, col=\"Country\/Region\", hue=\"Country\/Region\", \n#                   sharey=False, col_wrap=5)\n# g = g.map(plt.plot, \"Date\", \"Confirmed\", color=cnf)\n# g = g.map(plt.plot, \"Date\", \"Active\", color=act)\n# g = g.map(plt.plot, \"Date\", \"Deaths\", color=dth)\n# g = g.map(plt.plot, \"Date\", \"Recovered\", color=rec)\n# g.set_xticklabels(rotation=90)\n# plt.show()","a510bae6":"### The highest number of Confirmed last updated date by country","eada4aa1":"### Outside China, Rest of the World","d6e5190f":"### Countries, Cases over time\n* Confirmed - Dark chocolate\n* Active - Blue\n* Deaths - Red\n* Recovered - Green","d788cd5d":"### Total confirmed, deaths, recovered, active With Percentage","7caf0fd9":"### Outside China, active, recovered, deaths Percentage","258e5400":"Prepare Data","135a8f2b":"### The highest number of deaths last updated date by country","caff5759":"### Outside China, Data Sorted by Deaths","388f092a":"### Whole World active, recovered, deaths Percentage","9420569b":"## covid19 - The misfortune of the world\n#### Almost 188 countries people are affected. Almost all affected countries economy are destroyed. Many many people are jobless hopeless for this now. It's a biggest misfortune of the world now. Let's see some stat of this. \n\n\n## Coronavirus\n#### Coronaviruses (CoV) are a large family of viruses that cause illness ranging from the common cold to more severe diseases such as Middle East Respiratory Syndrome (MERS-CoV) and Severe Acute Respiratory Syndrome (SARS-CoV). \n\n\n\n## Signs\n\n#### Common signs of infection include respiratory symptoms, fever, cough, shortness of breath and breathing difficulties. In more severe cases, infection can cause pneumonia, severe acute respiratory syndrome,kidney failure and even death.\n\n\n## Recommendations\n#### Standard recommendations to prevent infection spread include regular hand washing, covering mouth and nose when coughing and sneezing, thoroughly cooking meat and eggs. Avoid close contact with anyone showing symptoms of respiratory illness such as coughing and sneezing.","fc018a2f":"### Outside China Minimum 1000 Confirmed sorted by Deaths Rate","2b7ac4e4":"### Data Source\n* https:\/\/en.wikipedia.org\/wiki\/2002%E2%80%932004_SARS_outbreak\n* https:\/\/en.wikipedia.org\/wiki\/Western_African_Ebola_virus_epidemic\n* http:\/\/www.emro.who.int\/pandemic-epidemic-diseases\/mers-cov\/mers-situation-update-january-2020.html\n* https:\/\/en.wikipedia.org\/wiki\/2009_flu_pandemic","3ced8856":"### And highly inspired from this work. Thanks Always\n[https:\/\/www.kaggle.com\/imdevskp\/covid-19-analysis-viz-prediction-comparisons\/notebook](http:\/\/)","512051d5":"## This answer is hidden, want to show please click \"Output\" button","1ec5c5c5":"---\n\n<h1 style=\"text-align: center;font-size: 40px;\">covid19 Data Analysis and Visualization<\/h1>\n\n---\n\n<center><img style=\"text-align: center;width: 800px;\" src=\"https:\/\/api.time.com\/wp-content\/uploads\/2020\/05\/remdesivirSTEP2.gif\"><\/center>\n\n---\n<i>image from Google<\/i>","662e715b":"### Note: Please always check Date","ae7cb03f":"### Incredible china","071b4426":"# COVID-19 VS 21st centuries some epidemics & pandemic","af04f4eb":"### The highest number of Recovered last updated date by country","7700e69e":"### Whole World Data Sorted by Deaths","bf021d73":"Import data","2d207366":"## This answer is hidden, want to show please click \"Output\" button","b2a64e02":"### Data Source\n[https:\/\/www.kaggle.com\/sudalairajkumar\/novel-corona-virus-2019-dataset](http:\/\/)"}}