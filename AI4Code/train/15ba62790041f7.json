{"cell_type":{"4349f604":"code","98a0ffb3":"code","e2194d66":"code","59a3e3ba":"code","97f05245":"code","4db89f0a":"code","b914eb4f":"code","82677d26":"code","d94fa799":"code","7a6b8cae":"code","80704567":"code","81c9824c":"code","dd5e848a":"code","ee6e6f33":"code","abfc5c0d":"code","c7ea0466":"code","ade5bfb6":"code","e4f05219":"code","f677517c":"code","42a42c63":"code","54b045e5":"code","f5ec2299":"code","42d124b5":"code","21365abd":"code","408ac753":"markdown","aa911769":"markdown","7b51d06b":"markdown","a89d7664":"markdown"},"source":{"4349f604":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","98a0ffb3":"import torch\n\nfrom transformers import BertTokenizer\n\nimport transformers\nfrom transformers import BertForSequenceClassification\n\nimport numpy as np\nimport pandas as pd\nimport re\n","e2194d66":"df = pd.read_csv('..\/input\/covid-19-nlp-text-classification\/Corona_NLP_train.csv', encoding='latin-1')\ndf.head()\n","59a3e3ba":"def extract_hash_tags(s):\n    hashes = re.findall(r\"#(\\w+)\", s)\n    return \" \".join(hashes)\ndf['hashtags'] = df['OriginalTweet'].apply(lambda x : extract_hash_tags(x))\n","97f05245":"def extract_mentions(s):\n    hashes = re.findall(r\"@(\\w+)\", s)\n    return \" \".join(hashes)\ndf['mentions'] = df['OriginalTweet'].apply(lambda x : extract_mentions(x))","4db89f0a":"from sklearn.preprocessing import LabelEncoder\n\nencoder = LabelEncoder()\ndf['encoded_sentiment'] = encoder.fit_transform(df['Sentiment'])","b914eb4f":"df.head()","82677d26":"df['OriginalTweet'] = df['OriginalTweet'].apply(lambda x: ' '.join(re.sub(\"(@[A-Za-z0-9]+)|([^0-9A-Za-z \\t])|(\\w+:\\\/\\\/\\S+)\",\" \",x).split()))\n","d94fa799":"from sklearn.model_selection import train_test_split\n\nxtrain, xval, ytrain, yval = train_test_split(df['OriginalTweet'], df['encoded_sentiment'], test_size = 0.2)\n","7a6b8cae":"\ntokenizer = transformers.BertTokenizer.from_pretrained('..\/input\/bert-base-uncased',do_lower_case=True)\n","80704567":"encoded_data_train = tokenizer.batch_encode_plus(\n    xtrain, \n    add_special_tokens=True, \n    return_attention_mask=True, \n    pad_to_max_length=True, \n    max_length=50, \n    return_tensors='pt'\n)\n\nencoded_data_val = tokenizer.batch_encode_plus(\n    xval, \n    add_special_tokens=True, \n    return_attention_mask=True, \n    pad_to_max_length=True, \n    max_length=50, \n    return_tensors='pt'\n)","81c9824c":"encoded_data_val","dd5e848a":"from torch.utils.data import TensorDataset\ninput_ids_train = encoded_data_train['input_ids']\nattention_masks_train = encoded_data_train['attention_mask']\nlabels_train = torch.tensor(ytrain.values)\n\ninput_ids_val = encoded_data_val['input_ids']\nattention_masks_val = encoded_data_val['attention_mask']\nlabels_val = torch.tensor(yval.values)\n\n\n# Pytorch TensorDataset Instance\ndataset_train = TensorDataset(input_ids_train, attention_masks_train, labels_train)\ndataset_val = TensorDataset(input_ids_val, attention_masks_val, labels_val)\n","ee6e6f33":"model = transformers.BertForSequenceClassification.from_pretrained(\"..\/input\/bert-base-uncased\",\n                                                      num_labels=5,\n                                                      output_attentions=False,\n                                                      output_hidden_states=False)\n","abfc5c0d":"from torch.utils.data import DataLoader, RandomSampler, SequentialSampler\n\ndataloader_train = DataLoader(dataset_train, \n                              sampler=RandomSampler(dataset_train), \n                              batch_size=256)\n\ndataloader_validation = DataLoader(dataset_val, \n                                   sampler=SequentialSampler(dataset_val), \n                                   batch_size=256)\n","c7ea0466":"from transformers import AdamW, get_linear_schedule_with_warmup\n\noptimizer = AdamW(model.parameters(),\n                  lr=1e-5, \n                  eps=1e-8)\n                  \nepochs = 5\n\nscheduler = get_linear_schedule_with_warmup(optimizer, \n                                            num_warmup_steps=0,\n                                            num_training_steps=len(dataloader_train)*epochs)\n","ade5bfb6":"from sklearn.metrics import f1_score\n\ndef f1_score_func(preds, labels):\n    preds_flat = np.argmax(preds, axis=1).flatten()\n    labels_flat = labels.flatten()\n    return f1_score(labels_flat, preds_flat, average='weighted')\n","e4f05219":"import random\n\nseed_val = 17\nrandom.seed(seed_val)\nnp.random.seed(seed_val)\ntorch.manual_seed(seed_val)\ntorch.cuda.manual_seed_all(seed_val)\ndevice = torch.device('cuda')\n","f677517c":"from tqdm.notebook import tqdm\nmodel.to(device)\n\nfor epoch in tqdm(range(1, epochs+1)):\n    \n    model.train()\n    \n    loss_train_total = 0\n\n    progress_bar = tqdm(dataloader_train, desc='Epoch {:1d}'.format(epoch), leave=False, disable=False)\n    for batch in progress_bar:\n\n        model.zero_grad()\n        \n        batch = tuple(b.to(device) for b in batch)\n        \n        inputs = {'input_ids':      batch[0].to(device),\n                  'attention_mask': batch[1].to(device),\n                  'labels':         batch[2].to(device),\n                 }       \n\n        outputs = model(**inputs)\n        \n        loss = outputs[0]\n        loss_train_total += loss.item()\n        loss.backward()\n\n        torch.nn.utils.clip_grad_norm_(model.parameters(), 1.0)\n\n        optimizer.step()\n        scheduler.step()\n        \n        progress_bar.set_postfix({'training_loss': '{:.3f}'.format(loss.item()\/len(batch))})\n        \n    tqdm.write(f'\\nEpoch {epoch}')\n    \n    loss_train_avg = loss_train_total\/len(dataloader_train)            \n    tqdm.write(f'Training loss: {loss_train_avg}')\n","42a42c63":"def evaluate(dataloader_val):\n\n    model.eval()\n    \n    loss_val_total = 0\n    predictions, true_vals = [], []\n    \n    for batch in dataloader_val:\n        \n        batch = tuple(b.to(device) for b in batch)\n        \n        inputs = {'input_ids':      batch[0],\n                  'attention_mask': batch[1],\n                  'labels':         batch[2],\n                 }\n\n        with torch.no_grad():        \n            outputs = model(**inputs)\n            \n        loss = outputs[0]\n        logits = outputs[1]\n        loss_val_total += loss.item()\n\n        logits = logits.detach().cpu().numpy()\n        label_ids = inputs['labels'].cpu().numpy()\n        predictions.append(logits)\n        true_vals.append(label_ids)\n    \n    loss_val_avg = loss_val_total\/len(dataloader_val) \n    \n    predictions = np.concatenate(predictions, axis=0)\n    true_vals = np.concatenate(true_vals, axis=0)\n            \n    return loss_val_avg, predictions, true_vals\n","54b045e5":"val_loss, predictions, true_vals = evaluate(dataloader_validation)\nval_f1 = f1_score_func(predictions, true_vals)\n","f5ec2299":"print('Val Loss = ', val_loss)\nprint('Val F1 = ', val_f1)\n","42d124b5":"encoded_classes = encoder.classes_\npredicted_category = [encoded_classes[np.argmax(x)] for x in predictions]\ntrue_category = [encoded_classes[x] for x in true_vals]\nx = 0\nfor i in range(len(true_category)):\n    if true_category[i] == predicted_category[i]:\n        x += 1\n        \nprint('Accuracy Score = ', x \/ len(true_category))\n","21365abd":"df_test = pd.read_csv('..\/input\/covid-19-nlp-text-classification\/Corona_NLP_train.csv', encoding='latin-1')\ndf_test.head()","408ac753":"# Importing Libraries\n","aa911769":"# Tweets Preprocessing","7b51d06b":"### Testing on the ","a89d7664":"# Importing dataset"}}