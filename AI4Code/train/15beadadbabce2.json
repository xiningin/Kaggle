{"cell_type":{"c7e1d0d5":"code","7a4e9518":"code","ca7f56c0":"code","53ccabba":"code","a5e1b832":"code","6bbac650":"code","5f2c980f":"code","44b5a7c9":"code","15579245":"code","476febc4":"code","f5aafb4b":"code","f9c6979b":"code","e99dae20":"code","f360173e":"code","c4cfe268":"code","813fb147":"code","89c4c3b4":"code","421cf1ed":"code","c2d7aded":"code","873fc121":"code","28e9214a":"code","87c68663":"code","1fdc74d7":"code","d1a09dfc":"code","0db1c33d":"code","1f61a9b2":"code","8b7346b6":"code","eee8be61":"code","9357a5a4":"code","ef20b44c":"markdown","bf5b6011":"markdown","dd2cef72":"markdown","a36ba498":"markdown","d53e2dc3":"markdown","bb4c3f03":"markdown","548340a8":"markdown","127def7e":"markdown","791b55a5":"markdown","2270ec8d":"markdown","ed90bd99":"markdown","95ccb8d2":"markdown","727c2003":"markdown","d92de36d":"markdown","c5ae5eeb":"markdown","5c5d9680":"markdown","9e318b87":"markdown"},"source":{"c7e1d0d5":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","7a4e9518":"import pandas as pd\nimport numpy as np\nimport os,sys\nimport xgboost as xgb\nfrom sklearn.preprocessing import MinMaxScaler\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import accuracy_score\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport warnings\nwarnings.filterwarnings('ignore')","ca7f56c0":"df=pd.read_csv(\"\/kaggle\/input\/parkinson-disease-detection\/Parkinsson disease.csv\")\ndf","53ccabba":"df.rename(columns=({'MDVP:Fo(Hz)':'avg_fre', 'MDVP:Fhi(Hz)':'max_fre', 'MDVP:Flo(Hz)':'min_fre', 'MDVP:Jitter(%)':'var_fre1',\n       'MDVP:Jitter(Abs)':'var_fre2', 'MDVP:RAP':'var_fre3', 'MDVP:PPQ':'var_fre4', 'Jitter:DDP':'var_fre5',\n       'MDVP:Shimmer':'var_amp1', 'MDVP:Shimmer(dB)':'var_amp2', 'Shimmer:APQ3':'var_amp3', 'Shimmer:APQ5':'var_amp4',\n       'MDVP:APQ':'var_amp5', 'Shimmer:DDA':'var_amp6'}),inplace=True)\ndf","a5e1b832":"df.shape","6bbac650":"df.head(20)","5f2c980f":"df.describe()","44b5a7c9":"df.info()","15579245":"df.duplicated().sum()","476febc4":"df.drop(columns=\"name\",axis=1,inplace=True)\ndf","f5aafb4b":"df.isnull().sum()","f9c6979b":"df.notnull()","e99dae20":"df.columns","f360173e":"df.skew()","c4cfe268":"# get features and labels\n\nx=df.loc[:,df.columns!='status'].values[:,1:]\nx1=df.loc[:,df.columns!='status']\ny=df.loc[:,'status'].values\ny1=df.loc[:,'status']","813fb147":"x1.hist(figsize=(25,20))\nplt.show()","89c4c3b4":"df=df[df.max_fre<=300]\ndf=df[df.var_fre1<=0.02]\ndf=df[df.var_fre2<=0.0001]\ndf=df[df.var_fre3<=0.01]\ndf=df[df.var_fre4<=0.01]\ndf=df[df.var_fre5<=0.02]\ndf=df[df.var_amp1<=0.10]\ndf=df[df.var_amp2<=1.0]\ndf=df[df.var_amp3<=0.04]\ndf=df[df.var_amp4<=0.050]\ndf=df[df.var_amp5<=0.075]\ndf=df[df.var_amp6<=0.125]\ndf=df[df.NHR<=0.15]","421cf1ed":"df.skew()","c2d7aded":"sns.distplot(df['NHR'])","873fc121":"df=df[df.NHR<=0.06]\ndf.skew()","28e9214a":"correl=x1.corr()\nplt.figure(figsize=(20,20))\nsns.heatmap(correl,annot=True,cmap='OrRd')\nplt.show()","87c68663":"#Scale the features to between -1 and 1\nscaler=MinMaxScaler((-1,1))\nx1=scaler.fit_transform(x)\ny1=y","1fdc74d7":"#Split the dataset\n\nxtrain,xtest,ytrain,ytest=train_test_split(x1, y1, test_size=0.2)","d1a09dfc":"# Train the model\nfrom xgboost import XGBClassifier\n\n\nmodel=XGBClassifier()\nmodel.fit(xtrain,ytrain)\npredict=model.predict(xtest)\n","0db1c33d":"print(accuracy_score(ytest,predict)*100)","1f61a9b2":"from sklearn.metrics import confusion_matrix\ncm=confusion_matrix(ytest,predict)\nplt.figure(figsize=(8,6))\nfg=sns.heatmap(cm,annot=True,cmap=\"Reds\")\nfigure=fg.get_figure()\nplt.xlabel('Predicted')\nplt.ylabel('Actual')\nplt.title(\"Output Confusion Matrix\")","8b7346b6":"pd.DataFrame({'actual':ytest,'predict':predict})","eee8be61":"newinput=[[274.688,240.005,174.287,0.01360,0.01008,0.00624,0.00564,0.01873,1.02308,0.256,0.51268,0.01365,0.81667,0.63804,0.10715,6.883,0.607567,0.158453,3.679772,0.131728]]\n","9357a5a4":"output=model.predict(newinput)\noutput","ef20b44c":"# Outliers","bf5b6011":"# Output Display","dd2cef72":"# Load Dataset","a36ba498":"# Importing Libraries","d53e2dc3":"# Peak at the Data","bb4c3f03":"# unwanted columns","548340a8":"# Statistical Summary","127def7e":"# Prediction With New Input ","791b55a5":"# Implementing Confusion Matrix","2270ec8d":"# Duplicate Entries","ed90bd99":"# Missing values","95ccb8d2":"# Correlation Matrix","727c2003":"# Dimensions of Dataset","d92de36d":"# Information of the dataset","c5ae5eeb":"# Analyzing Features","5c5d9680":"# Determining Depentend & Independent Variables","9e318b87":"# Renaming columns"}}