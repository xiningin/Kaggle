{"cell_type":{"9cf4e2f3":"code","2b050d0c":"code","d4715f81":"code","d7b2b02c":"code","2953c0e2":"code","ff3e8bb6":"code","5d48ed0f":"code","78594b9d":"code","fee91125":"markdown","5a358514":"markdown","77a3a453":"markdown","c710ee79":"markdown"},"source":{"9cf4e2f3":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt # data visualization\nimport seaborn as sns\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","2b050d0c":"# train_data is the name of a new dataframe (df) that contains the train.cv dataset\ntrain_data = pd.read_csv(\"\/kaggle\/input\/titanic\/train.csv\")\n\n# output shows the first five rows of the dataset\ntrain_data.head()","d4715f81":"# outputs the total number of rows and columns in the train_data df\ntrain_data.shape","d7b2b02c":"# test_data is the name of a new dataframe (df) that contains the test.cv dataset\ntest_data = pd.read_csv(\"\/kaggle\/input\/titanic\/test.csv\")\n\n# output shows the first five rows of the dataset\ntest_data.head()","2953c0e2":"# outputs the total number of rows and columns in the test_data df\ntest_data.shape","ff3e8bb6":"plt.figure(figsize=(13,6))\n# creating new variable 'women' which will contains the data of all 'female' passengers from the column name 'Sex' that 'Survived', in the train_data df\nwomen = train_data.loc[train_data.Sex == 'female'][\"Survived\"]\n\n# creating new variable 'men' which will contains the data of all 'male' passengers from the column name 'Sex' that 'Survived', in the train_data df\nmen = train_data.loc[train_data.Sex == 'male'][\"Survived\"]\n\nplt.subplot(1,2,1)\nwomen.value_counts().plot(kind='pie', autopct='%1.1f%%', startangle=180)\nplt.title(\"Fig 1. Survival Percentage of Female Passengers\")\nplt.ylabel(\"\")\n\nplt.subplot(1,2,2)\nmen.value_counts().plot(kind='pie', autopct='%1.1f%%', startangle=180,colors=['C1','C0'])\nplt.title(\"Fig 2.  Survival Percentage of Male Passengers\")\nplt.ylabel(\"\")\n\nplt.figlegend(['Survived','Did not survive'], loc =10)","5d48ed0f":"plt.figure(figsize=(8,6))\nsns.histplot(x=\"Age\", data=train_data, hue=\"Survived\", multiple=\"stack\")\nplt.title(\"Fig 3. Number of Observations of Survival Rate based on Age\")\nplt.ylabel(\"No. of Observations\")\nplt.legend(['Survived','Did not survive'])","78594b9d":"from sklearn.ensemble import RandomForestClassifier\n\ny = train_data[\"Survived\"]\n\nfeatures = [\"Pclass\", \"Sex\", \"SibSp\", \"Parch\"]\nX = pd.get_dummies(train_data[features])\nX_test = pd.get_dummies(test_data[features])\n\nmodel = RandomForestClassifier(n_estimators=100, max_depth=5, random_state=1)\nmodel.fit(X, y)\npredictions = model.predict(X_test)\n\noutput = pd.DataFrame({'PassengerId': test_data.PassengerId, 'Survived': predictions})\noutput.to_csv('my_submission.csv', index=False)\nprint(\"Your submission was successfully saved!\")","fee91125":"**Reading the Training Dataset**","5a358514":"**Reading the Test Dataset**","77a3a453":"**Random Forest Model**\n\nThis model is constructed of several \"trees\" that will individually consider each passenger's data and vote on whether the individual survived. Then, the random forest model makes a democratic decision: the outcome with the most votes wins!\n\n**Steps:**\n1. looks for patterns in four different columns (\"Pclass\", \"Sex\", \"SibSp\", and \"Parch\") of the data. \n2. constructs the trees in the random forest model based on patterns in the train.csv file\n3. generates predictions for the passengers in test.csv\n4. saves new predictions in a CSV file my_submission.csv.","c710ee79":"**Exploratory Data Analysis**"}}