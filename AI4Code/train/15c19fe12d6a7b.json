{"cell_type":{"6b943af5":"code","2d750603":"code","e56bcebf":"code","166adeef":"code","f8dbb33c":"code","e70ad247":"code","406be393":"code","2ea54eff":"code","013eb240":"code","5a6c0473":"code","90e3a9c4":"code","7a17512f":"code","d44e8769":"code","a167f1de":"code","b58272c6":"code","11638051":"code","f2a59c5a":"code","abe45bfb":"code","c0b85585":"code","54308f46":"code","c2aaf8fa":"code","a17c750f":"code","697f3be4":"code","ad2af1e2":"code","7ee0cc1d":"code","02c192c1":"code","6d28f6a6":"code","d8cec5a9":"code","629032ac":"code","418f9354":"code","36b4c8e0":"code","76b805fc":"code","38445296":"code","2870b23c":"code","cd5e4cc1":"code","b7e7a054":"code","d5f7b10e":"code","0d14a868":"code","b2a72ce3":"code","160d669e":"markdown","662eb855":"markdown","d7d5e5ea":"markdown","d8d399a7":"markdown","1a579dcb":"markdown","9caec3a0":"markdown","5faabd6a":"markdown","6cd8be32":"markdown","a7a82076":"markdown","5e5b7880":"markdown","0dbb0764":"markdown","29ecdddc":"markdown"},"source":{"6b943af5":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","2d750603":"!pip install sentencepiece","e56bcebf":"!pip install transformers","166adeef":"from transformers import AutoTokenizer, AutoConfig, TFAutoModel    \nfrom transformers import XLMRobertaConfig, XLMRobertaTokenizer, TFXLMRobertaModel         \n\nimport matplotlib.pyplot as plt\nimport tensorflow as tf\nimport tensorflow.keras.backend as K\n\nfrom sklearn.metrics import classification_report, f1_score, accuracy_score\n\nos.environ[\"WANDB_API_KEY\"] = \"0\" # to silence warning\n\nnp.random.seed(0)","f8dbb33c":"try:\n    tpu = tf.distribute.cluster_resolver.TPUClusterResolver()\n    tf.config.experimental_connect_to_cluster(tpu)\n    tf.tpu.experimental.initialize_tpu_system(tpu)\n    strategy = tf.distribute.experimental.TPUStrategy(tpu)\nexcept ValueError:\n    strategy = tf.distribute.get_strategy() # for CPU and single GPU\n    print('Number of replicas:', strategy.num_replicas_in_sync)","e70ad247":"BATCH_SIZE= 16 * strategy.num_replicas_in_sync\nAUTO = tf.data.experimental.AUTOTUNE","406be393":"train = pd.read_csv(\"..\/input\/contradictory-my-dear-watson\/train.csv\")\ntest = pd.read_csv(\"..\/input\/contradictory-my-dear-watson\/test.csv\")","2ea54eff":"train_aug = pd.read_csv(\"..\/input\/contradictorywatsontwicetranslatedaug\/thrice_translation_aug_train.csv\")\ntrain_aug2 = pd.read_csv(\"..\/input\/contradictorywatsontwicetranslatedaug\/twice_translated_aug_train.csv\")","013eb240":"train.head()","5a6c0473":"train.info()","90e3a9c4":"df2 = train_aug[train_aug['language']!='English']\ndf2 = df2.drop('Unnamed: 0',axis=1)\ndf2.head()","7a17512f":"df3 = train_aug2[train_aug['language']!='English']\ndf3.head()","d44e8769":"new_train = pd.concat([train,df2,df3],ignore_index = True)","a167f1de":"new_train = new_train.drop_duplicates()\nnew_train = new_train.dropna()\nnew_train = new_train.sample(frac = 1).reset_index(drop=True)\nnew_train","b58272c6":"labels, frequencies = np.unique(train.language.values, return_counts = True)\n\nplt.figure(figsize = (10,10))\nplt.pie(frequencies,labels = labels, autopct = '%1.1f%%')\nplt.show()","11638051":"Accuracy=pd.DataFrame()\nAccuracy['Type']=train.label.value_counts().index\nAccuracy['Count']=train.label.value_counts().values\nAccuracy['Type']=Accuracy['Type'].replace(0,'Entailment')\nAccuracy['Type']=Accuracy['Type'].replace(1,'Neutral')\nAccuracy['Type']=Accuracy['Type'].replace(2,'Contradiction')\nAccuracy","f2a59c5a":"labels, frequencies = np.unique(new_train.language.values, return_counts = True)\n\nplt.figure(figsize = (10,10))\nplt.pie(frequencies,labels = labels, autopct = '%1.1f%%')\nplt.show()","abe45bfb":"from sklearn.model_selection import train_test_split\nX_train, X_val = train_test_split(new_train, test_size=0.20, random_state=42 )#stratify=train['lang_abv']","c0b85585":"X_train","54308f46":"from sklearn.model_selection import StratifiedKFold\nskf = StratifiedKFold(n_splits=5)\nval_score=[]\nhistory=[]","c2aaf8fa":"target = new_train.loc[:,'label']","a17c750f":"fold_no = 1\nfor train_index, test_index in skf.split(new_train, target):\n    ktrain = new_train.loc[train_index,:]\n    kval = new_train.loc[test_index,:]","697f3be4":"kval.info()","ad2af1e2":"labels, frequencies = np.unique(ktrain.language.values, return_counts = True)\n\nplt.figure(figsize = (10,10))\nplt.pie(frequencies,labels = labels, autopct = '%1.1f%%')\nplt.show()","7ee0cc1d":"model_name = 'jplu\/tf-xlm-roberta-large'\ntokenizer = XLMRobertaTokenizer.from_pretrained(model_name)","02c192c1":"def encoder(df, tokenizer, max_len=100):\n\n    df1 = df[['premise', 'hypothesis']].values.tolist()\n    df_encoded = tokenizer.batch_encode_plus(df1,max_length=max_len, padding=True, truncation=True, \n                                               add_special_tokens=True, return_attention_mask=True)\n    \n    inputs = np.array(df_encoded['input_ids'])\n    return inputs","6d28f6a6":"X_train_input = encoder(new_train, tokenizer)\nX_test_input = encoder(test,tokenizer)","d8cec5a9":"y_train = new_train.label.values\ny_train","629032ac":"X_train_input","418f9354":"def build_model(max_len=100):\n    \n    tf.random.set_seed(12345)\n\n    robertaModel = TFXLMRobertaModel.from_pretrained(model_name)\n    input_word_ids = tf.keras.Input(shape=(max_len,), dtype=tf.int32, name=\"input_word_ids\")\n    print('one')\n    embedding = robertaModel([input_word_ids])[0] \n    sequence_output = embedding[:,0,:]\n    print('two')\n    output = tf.keras.layers.Dense(3, activation=\"softmax\")(sequence_output)  \n    \n    model = tf.keras.Model(inputs=[input_word_ids], outputs=output)\n    model.compile(tf.keras.optimizers.Adam(lr=1e-5), loss='sparse_categorical_crossentropy', metrics=['accuracy'])\n    \n    return model","36b4c8e0":"def create_dist_dataset(X, y,val,batch_size= BATCH_SIZE):\n    \n    \n    dataset = tf.data.Dataset.from_tensor_slices((X,y)).shuffle(len(X))\n          \n    if not val:\n        dataset = dataset.repeat().batch(batch_size).prefetch(AUTO)\n    else:\n        dataset = dataset.batch(batch_size).prefetch(AUTO)\n\n    \n    \n    return dataset\n\n\n\ntest_dataset = (\n    tf.data.Dataset\n    .from_tensor_slices((X_test_input))\n    .batch(BATCH_SIZE)\n)","76b805fc":"pred_test = 0","38445296":"for fold,(train_ind,valid_ind) in enumerate(skf.split(X_train_input,y_train)):\n    \n    if fold < 4:\n    \n        print(\"fold\",fold+1)\n        \n       \n        tf.tpu.experimental.initialize_tpu_system(tpu)\n        \n        train_data = create_dist_dataset(X_train_input[train_ind],y_train[train_ind],val=False)\n        valid_data = create_dist_dataset(X_train_input[valid_ind],y_train[valid_ind],val=True)\n    \n        Checkpoint=tf.keras.callbacks.ModelCheckpoint(f\"roberta_base.h5\", monitor='val_loss', verbose=0, save_best_only=True,\n        save_weights_only=True, mode='min')\n        \n        with strategy.scope():\n            model = build_model()\n            \n        \n\n        n_steps = len(train_ind)\/\/BATCH_SIZE\n        print(\"training model {} \".format(fold+1))\n\n        train_history = model.fit(\n        train_data,\n        steps_per_epoch=n_steps,\n        validation_data=valid_data,\n        epochs=10,callbacks=[Checkpoint],verbose=1)\n        \n        print(\"Loading model...\")\n        model.load_weights(f\"roberta_base.h5\")\n        \n        \n\n        print(\"fold {} val acc {}\".format(fold+1,np.mean(train_history.history['val_accuracy'])))\n        print(\"fold {} val loss {}\".format(fold+1,np.mean(train_history.history['val_loss'])))\n        \n        history.append(train_history)\n\n        val_score.append(np.mean(train_history.history['val_accuracy']))\n        \n        print('predict on test....')\n        preds=model.predict(test_dataset,verbose=1)\n\n        pred_test+=preds\/4","2870b23c":"pred_test","cd5e4cc1":"test_prediction = np.argmax(pred_test, axis=1)\ntest_prediction","b7e7a054":"import matplotlib.pyplot as plt","d5f7b10e":"plt.plot(model.history['loss'], label='train loss')\nplt.plot(model.history['val_loss'], label='validation loss')\nplt.title('Average Loss')\nplt.xlabel('Epoch')\nplt.ylabel('Loss')\nplt.legend()\nplt.show()","0d14a868":"submission = test.id.copy().to_frame()\nsubmission['prediction'] = test_prediction","b2a72ce3":"submission.to_csv(\"submission.csv\", index = False)","160d669e":"# Creating & Training Model","662eb855":"Function to make a tensor dataset with encoded inputs","d7d5e5ea":"Original dataset Label distribution","d8d399a7":"Original language ratios","1a579dcb":"Remove augmented data of english language as we only want to upsample other languages.","9caec3a0":"# Data Loading","5faabd6a":"Combine the data with augmented data of other languages to increase samples. Drop duplicate rows using pandas drop_duplicates(). Remove any NA values and shuffle the new dataframe.","6cd8be32":"Splitting data into folds for kfold crossvalidation.","a7a82076":"New training set distributions","5e5b7880":"We can see that the folds have same ratio as the new augmented dataset.","0dbb0764":"Load backtranslated data.","29ecdddc":"# Input Encoding"}}