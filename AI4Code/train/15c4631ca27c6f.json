{"cell_type":{"886c9797":"code","4d9c707e":"code","ecc8e1e7":"code","bd19e846":"code","1ca67512":"code","00d8979f":"code","1ef2773f":"code","cc3bb776":"code","d73e7183":"code","242c1ace":"code","6af2f8f1":"code","9bfe862f":"markdown"},"source":{"886c9797":"from tqdm import tqdm_notebook as tqdm\nimport pandas as pd\nimport numpy as np\nimport librosa\nimport librosa.display\nimport IPython.display\nimport matplotlib.pyplot as plt\nimport math\nimport os\nfrom scipy import signal\nfrom sklearn.preprocessing import MinMaxScaler","4d9c707e":"#\u30e1\u30bf\u30c7\u30fc\u30bf\u6574\u5f62\u95a2\u6570\n#from notebook\u300cCorrections to notation errors and EDA for META\u300d\n#https:\/\/www.kaggle.com\/ryoichi0917\/corrections-to-notation-errors-and-eda-for-meta\ndef meta_define():\n    \"\"\"\n    input : none\n    output : Corrected metadata\n    \"\"\"\n    import pandas as pd\n    import os \n    os.chdir(\"\/kaggle\/input\/hah-data-science-challenge\/\")\n    df_train = pd.read_csv(\"train.csv\", index_col=False)\n    df_test = pd.read_csv(\"test.csv\", index_col=False)\n    \n    ##################################################\n    #\u4ee5\u4e0b\u8f9e\u66f8\u3084\u5909\u6570\u306e\u5b9a\u7fa9\n    #\u5404\u30c7\u30fc\u30bf\u4fee\u6b63\u7528\u306e\u8f9e\u66f8\n    bolt_dict = {\n        '\u5927':\"big\",\n        '\u5c0f':\"small\"\n    }\n\n    plate_dict = {\n        '\u5927':\"big\",\n        '\u5c0f':\"small\"\n    }\n\n    record_dict = {\n        'PC\u5185\u81d3':\"pc_built_in\",\n        'PC\u5185\u8535':\"pc_built_in\",\n        'USB1':\"usb1\", \n        'USB2':\"usb2\", \n        'USB3':\"usb3\", \n        'USB4':\"usb4\", \n        '\u30b9\u30de\u30db':\"smart_phone\",\n        '\u30b9\u30de\u30db\u306e\u30dc\u30a4\u30b9\u30ec\u30b3\u30fc\u30c0':\"smart_phone\",\n        '\u5185\u8535\u30de\u30a4\u30af':\"pc_built_in\",\n        }\n\n    distance_dict = {\n        '10cm': 0.1, \n        '10\u339d': 0.1, \n        '1M': 1.0, \n        '20cm': 0.2, \n        '20\u339d': 0.2, \n        '2M': 2.0, \n        '2m': 2.0, \n        '30cm': 0.3, \n        '30cn': 0.3, \n        '30\u339d': 0.3, \n        '3m': 3.0, \n        '40cm': 0.4, \n        '40\u339d': 0.4, \n        '50cm': 0.5, \n        '50\u339d': 0.5, \n        '5cm': 0.05,\n        '8cm': 0.08, \n        '\uff11\uff2d': 1.0   \n    }\n\n    cvt_dict = {\n        \"\u306d\u3058\" : bolt_dict, \n        '\u30d7\u30ec\u30fc\u30c8' : plate_dict, \n        '\u9332\u97f3\u65b9\u6cd5' : record_dict, \n        '\u30de\u30a4\u30af\u8ddd\u96e2' : distance_dict\n    }\n    \n    #df_train\u65e5\u672c\u8a9e\u30ab\u30e9\u30e0\u540d : ['ID', '\u306d\u3058', '\u30d7\u30ec\u30fc\u30c8', '\u9332\u97f3\u65b9\u6cd5', '\u30de\u30a4\u30af\u8ddd\u96e2', '\u30d5\u30a1\u30a4\u30eb', 'Target']\n    col_train = ['id', 'bolt', 'plate', 'record', 'mic_dist', 'file', 'target']\n    #df_test\u65e5\u672c\u8a9e\u30ab\u30e9\u30e0\u540d : ['ID', '\u306d\u3058', '\u30d7\u30ec\u30fc\u30c8', '\u9332\u97f3\u65b9\u6cd5', '\u30de\u30a4\u30af\u8ddd\u96e2', '\u30d5\u30a1\u30a4\u30eb', 'Target']\n    col_test = ['id', 'bolt', 'plate', 'record', 'mic_dist', 'file']\n    \n    tgt_col = [\"\u306d\u3058\", '\u30d7\u30ec\u30fc\u30c8', '\u9332\u97f3\u65b9\u6cd5', '\u30de\u30a4\u30af\u8ddd\u96e2']\n    ##################################################\n    \n    for col in tgt_col:#Target\u306f\u5909\u63db\u5bfe\u8c61\u5916\n        df_train[col] = df_train[col].map(cvt_dict[col])\n        df_test[col] = df_test[col].map(cvt_dict[col])\n        \n    df_train.columns = col_train\n    df_test.columns = col_test\n    \n    return df_train, df_test","ecc8e1e7":"#operation check\ndf_train, df_test = meta_define()","bd19e846":"def bandpass_filter(data, sample_rate, lower_freq, upper_freq, filt_degree):\n    \"\"\"\n    \u30d0\u30f3\u30c9\u30d1\u30b9\u30d5\u30a3\u30eb\u30bf\u95a2\u6570\n    \"\"\"\n    nyq_freq = sample_rate \/ 2.0 #\u30ca\u30a4\u30ad\u30b9\u30c8\u5468\u6ce2\u6570\n    b, a = signal.butter(1, [lower_freq\/nyq_freq, upper_freq\/nyq_freq], btype='band')\n    for i in range(0, filt_degree):\n        data = signal.lfilter(b, a, data)\n    return data\n\n#\u6253\u6483\u30bf\u30a4\u30df\u30f3\u30b0\u3067\u5206\u5272\u3055\u308c\u305f\u30c7\u30fc\u30bf\u3092\u51fa\u529b\ndef sep_impact_timig(y, sr, max_interval=0.75):\n    onset_envelope = librosa.onset.onset_strength(y, sr=sr)\n\n    #\u78ba\u8a8d\u3055\u308c\u305fonset\u306e\u76f4\u524d\u306e\u5c40\u6240\u7684\u306a\u6700\u5c0f\u5024\u3092\u51fa\u529b\n    #\u51fa\u529b\u3055\u308c\u308b\u5024\u306flist\u5f62\u5f0f\u3067\u3001\u5024\u306fonset_envelope\u306eindex\u756a\u53f7\n    onset = librosa.onset.onset_detect(onset_envelope=onset_envelope, sr=sr)#\u691c\u77e5\u3055\u308c\u305f\u6253\u97f3\u306e\u30bf\u30a4\u30df\u30f3\u30b0\n    onset_backtrack = librosa.onset.onset_backtrack(onset, onset_envelope)#\u691c\u77e5\u3055\u308c\u305f\u6253\u97f3\u306e\u30bf\u30a4\u30df\u30f3\u30b0\u306e\u76f4\u8fd1\u3067\u306e\u6975\u5c0f\u5024\n    h_count = len(onset_backtrack)\n\n    #onset_backtrack\u306eindex\u3092\u751f\u30c7\u30fc\u30bf\u306e\u30d5\u30ec\u30fc\u30e0\u756a\u53f7\u306b\u5909\u63db\u3059\u308b\n    start_index = [int(i) for i in (onset_backtrack\/len(onset_envelope)*len(y)).tolist()]\n    \n    #max_interval(s)\u4ee5\u5185\u306b\u6b21\u306e\u6253\u97f3\u304c\u78ba\u8a8d\u3055\u308c\u306a\u304b\u3063\u305f\u3089\u3001max_interval\u7d4c\u904e\u3057\u305fframe\u756a\u53f7\u3092\n    #max_interval(s)\u4ee5\u5185\u306b\u6b21\u306e\u6253\u97f3\u304c\u78ba\u8a8d\u3055\u308c\u305f\u3089\u3001\u6b21\u306e\u6253\u97f3\u304c\u89b3\u6e2c\u3055\u308c\u308b\u76f4\u524d\u306eframe\u756a\u53f7\u3092\u8fd4\u3059\n    end_index = []\n    max_interval_frame = int(max_interval*sr)\n    for i, s_index in enumerate(start_index):\n        max_interval_index = s_index+max_interval_frame#max_interval(s)\u7d4c\u904e\u5f8c\u306eindex\n        if len(start_index) == int(i+1):#\u6700\u5f8c\u306eindex\u306e\u5834\u5408\u306f\u5225\u6271\u3044\n            e_index = min(len(y), max_interval_index)\n            end_index.append(e_index)\n            break\n        e_index = min(start_index[i+1]-1, max_interval_index)\n        end_index.append(e_index)\n    \n    sep_data = []\n    for s,e in zip(start_index, end_index):\n        sep = y[s:e]\n        sep_data.append(sep)\n    \n    return np.array(sep_data, dtype=object), h_count, y.max()","1ca67512":"def skip_decide(wav,sr):\n    #\u30c7\u30fc\u30bf\u3092\u30b9\u30ad\u30c3\u30d7\u3059\u308b\u304b\u306e\u95a2\u6570\n    ####################################################################################\n    #\u6253\u523b\u56de\u6570\u304c\u4e0d\u81ea\u7136\u306b\u591a\u3044\u3082\u306e\u3001\u632f\u5e45\u304c\u4e0d\u81ea\u7136\u306b\u5c0f\u3055\u3044\u30c7\u30fc\u30bf\u306f\u30b9\u30ad\u30c3\u30d7\n    sep_data, h_count, y_max = sep_impact_timig(y=wav, sr=sr)\n    if (h_count > 12) or (y_max<0.2):\n        return True\n    ####################################################################################\n    \n    if len(sep_data) == 1:\n        return False #\u6253\u97f3\u304c\u4e00\u97f3\u3057\u304b\u89b3\u6e2c\u3055\u308c\u306a\u304b\u3063\u305f\u5834\u5408\u306fskip\u3057\u306a\u3044\n    ####################################################################################\n    #\u5206\u5272\u3057\u305f\u30c7\u30fc\u30bf\u306e\u3046\u3061\u3001\u6700\u5f8c\u306e\u6253\u6483\u4ee5\u5916\u306e\u30c7\u30fc\u30bf\u306e\u9577\u3055\u304c0.2\u79d2\u4ee5\u4e0b\u306e\u30c7\u30fc\u30bf\u304c\u3042\u308b\u5834\u5408\u306f\u30b9\u30ad\u30c3\u30d7\n    min_len = []\n    for i in range(len(sep_data)-1):\n        tmp_len = len(sep_data[i])\n        min_len.append(tmp_len)\n    if min(min_len) < int(sr*0.2):\n        return True\n    ####################################################################################\n    return False","00d8979f":"df_train.head()","1ef2773f":"def skip_data_detect(df):\n    skip_list = []\n    for col in tqdm(df.itertuples()):\n        if \"train\" in col.file: \n            path = os.path.join(\"train\/train\/\", col.file)  \n        else:\n            path = os.path.join(\"test\/test\/\", col.file)  \n        \n        wav,sr=librosa.load(path,sr=None)\n        #\u4f4e\u57df\u507480Hz, \u5e83\u57df\u507410000Hz\u3067\u30d5\u30a3\u30eb\u30bf\u30ea\u30f3\u30b0\n        wav_filtered = bandpass_filter(data=wav, sample_rate=sr, lower_freq=80, upper_freq=10000, filt_degree=5)\n        \n        skip = skip_decide(wav_filtered, sr)\n        if skip is True:\n            skip_list.append(path)\n    return skip_list\n","cc3bb776":"skip_list_train = skip_data_detect(df_train)","d73e7183":"#\u8a13\u7df4\u30c7\u30fc\u30bf\u306e\u3046\u3061\u3001\u30ce\u30a4\u30ba\u5019\u88dc\u306e\u30c7\u30fc\u30bf\u3092\u53ef\u8996\u5316\ndata_num = len(skip_list_train)\ncol_num  = 3 #\u53ef\u8996\u5316\u6642\u306e\u5217\u6570\nrow_num = math.ceil(data_num\/col_num)\n\n\nfig, axes = plt.subplots(row_num, col_num,figsize=(col_num*10, row_num*5))\nfor num, skip_file in tqdm(enumerate(skip_list_train)):\n    r = math.ceil(((num+1)\/col_num))-1\n    c = (num % col_num)  \n    ax = axes[r, c]\n    \n    wav,sr=librosa.load(skip_file,sr=None)\n    wav_filtered = bandpass_filter(data=wav, sample_rate=sr, lower_freq=80, upper_freq=10000, filt_degree=5)\n    \n    time_ax = np.linspace(0, len(wav) * 1\/sr, len(wav))\n    ax.plot(time_ax, wav)\n    ax.plot(time_ax, wav_filtered)\n    ax.set_title(f'{skip_file}')","242c1ace":"skip_list_test = skip_data_detect(df_test)","6af2f8f1":"#\u30c6\u30b9\u30c8\u30c7\u30fc\u30bf\u306e\u3046\u3061\u3001\u30ce\u30a4\u30ba\u5019\u88dc\u306e\u30c7\u30fc\u30bf\u3092\u53ef\u8996\u5316\ndata_num = len(skip_list_test)\ncol_num  = 3 #\u53ef\u8996\u5316\u6642\u306e\u5217\u6570\nrow_num = math.ceil(data_num\/col_num)\n\n\nfig, axes = plt.subplots(row_num, col_num,figsize=(col_num*10, row_num*5))\nfor num, skip_file in tqdm(enumerate(skip_list_test)):\n    r = math.ceil(((num+1)\/col_num))-1\n    c = (num % col_num)  \n    ax = axes[r, c]\n    \n    wav,sr=librosa.load(skip_file,sr=None)\n    wav_filtered = bandpass_filter(data=wav, sample_rate=sr, lower_freq=80, upper_freq=10000, filt_degree=5)\n    \n    time_ax = np.linspace(0, len(wav) * 1\/sr, len(wav))\n    ax.plot(time_ax, wav)\n    ax.plot(time_ax, wav_filtered)\n    ax.set_title(f'{skip_file}')","9bfe862f":"### \u63a8\u8ad6\u7d50\u679c\u306b\u5bfe\u3059\u308b\u5f8c\u51e6\u7406\u306b\u3064\u3044\u3066\n- \u63a8\u8ad6\u7d50\u679c\u306b\u5bfe\u3059\u308b\u5f8c\u51e6\u7406\u3068\u3057\u3066\u3001\u4ee5\u4e0b\u306e\u30a2\u30d7\u30ed\u30fc\u30c1\u3092\u5b9f\u65bd\n    - **\u6253\u97f3\u306e\u7121\u3044\u30c7\u30fc\u30bf\u3084\u4e0d\u81ea\u7136\u306a\u30c7\u30fc\u30bf**\u306b\u5bfe\u3057\u3066\u3001**\u63a8\u8ad6\u7d50\u679c\u306b\u5f8c\u51e6\u7406\u3068\u3057\u3066\u305d\u308c\u3089\u306e\u30c7\u30fc\u30bf\u306e\u7570\u5e38\u5ea6\u3092\u5f37\u5236\u7684\u306b\u9ad8\u304f\u66f8\u304d\u63db\u3048\u308b\u3068\u30b9\u30b3\u30a2\u304c\u4e0a\u304c\u308b**\u3001\u3068\u3044\u3046\u5642\u3092\u8033\u306b\u3057\u305f\u306e\u3067\u3001\u8a66\u884c\u3057\u307e\u3057\u305f\u3002\n    - \u30eb\u30fc\u30eb\u30d9\u30fc\u30b9\u3067\u3001\u7570\u5e38\u5ea6\u3092\u5f37\u5236\u7684\u306b\u66f8\u304d\u63db\u3048\u308b\u30c7\u30fc\u30bf\u3092\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u5b9a\u7fa9\u3057\u305f\u306e\u3067\u3059\u304c\u3001\u3042\u307e\u308a\u3046\u307e\u304f\u62bd\u51fa\u3067\u304d\u307e\u305b\u3093\u3067\u3057\u305f\u3002\n    - \u30c7\u30a3\u30b9\u30ab\u30c3\u30b7\u30e7\u30f3\u306b\u3082\u6295\u7a3f\u3057\u3066\u304a\u308a\u307e\u3059\u306e\u3067\u3001\u3082\u3057\u30a2\u30c9\u30d0\u30a4\u30b9\u306a\u3069\u3042\u308a\u307e\u3057\u305f\u3089\u3001\u3044\u305f\u3060\u304d\u305f\u3044\u3067\u3059\u3002\n     1. \u30d0\u30f3\u30c9\u30d1\u30b9\u30d5\u30a3\u30eb\u30bf\u306780Hz\u4ee5\u4e0b\u53ca\u307310000Hz\u4ee5\u4e0a\u306e\u5e2f\u57df\u3092\u30ab\u30c3\u30c8(\u53c2\u8003\uff1ahttps:\/\/www.kaggle.com\/c\/hah-data-science-challenge\/discussion\/274448)\n     1. \u30d5\u30a3\u30eb\u30bf\u5f8c\u306e\u30c7\u30fc\u30bf\u306b\u5bfe\u3057\u3066\u3001\u4ee5\u4e0b\u306e\u30eb\u30fc\u30eb\u306e\u3044\u305a\u308c\u304b\u306b\u5f53\u3066\u306f\u307e\u308b\u30c7\u30fc\u30bf\u306f**\u6253\u97f3\u306e\u7121\u3044\u30c7\u30fc\u30bf\u3084\u4e0d\u81ea\u7136\u306a\u30c7\u30fc\u30bf**\u3068\u898b\u505a\u3059\u3002\n         - **\u6253\u523b\u56de\u6570\u304c\u4e0d\u81ea\u7136\u306b\u591a\u3044(\u4eca\u56de\u306f12\u56de\u4ee5\u4e0a)**\n         - **\u632f\u5e45\u304c\u4e0d\u81ea\u7136\u306b\u5c0f\u3055\u3044(\u632f\u5e45\u304c0.2\u4ee5\u4e0b)**\n         - **\u5206\u5272\u3057\u305f\u6253\u97f3\u30c7\u30fc\u30bf\u306e\u3046\u3061\u3001\u6700\u5f8c\u306e\u6253\u6483\u4ee5\u5916\u306e\u30c7\u30fc\u30bf\u3067\u9577\u3055\u304c0.2\u79d2\u4ee5\u4e0b\u306e\u6253\u97f3\u304c\u3042\u308b**\n         \n         "}}