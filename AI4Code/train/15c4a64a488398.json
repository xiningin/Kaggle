{"cell_type":{"4556b441":"code","f0229f94":"code","fca9129c":"code","ce5b6c60":"code","8f37e055":"code","6b7eb808":"code","f5791cd2":"code","eade0ae6":"code","b95a7ac1":"code","f2ce892c":"code","6e30c911":"code","543fa498":"code","6ca0acba":"code","aac9dfad":"code","8de802ee":"code","c4e9f6fb":"code","b0b11967":"code","3241ba8b":"code","5ecb8564":"code","8303dba0":"markdown","b4b6ca57":"markdown","284c7265":"markdown","2d36c23c":"markdown","8d589f24":"markdown","ab1832db":"markdown","f9aa533a":"markdown","4b12d1f5":"markdown","275a8830":"markdown","1d06be9b":"markdown","9318df60":"markdown","2ed5b419":"markdown","da6851dd":"markdown","b8bae16f":"markdown","71367735":"markdown","a220326a":"markdown","5fc7b7d6":"markdown","9a8b5242":"markdown","a31551f5":"markdown","2bf57dc6":"markdown","b5db50d3":"markdown","85ff352b":"markdown","2922ea72":"markdown","dc8db63b":"markdown","e531dafa":"markdown","8e9d526a":"markdown","a59a6c1f":"markdown","e857423c":"markdown","bd994dc7":"markdown"},"source":{"4556b441":"# Loading Nessesary Modules\nimport pandas as pd\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n'''downloaded dataset from https:\/\/drive.google.com\/open?id=1o1I9PLyjqGgs0eOylK-2srXM2ZH3mIVb'''\n\n#Load haberman.csv into a pandas dataFrame.\nhaberman = pd.read_csv(\"..\/input\/haberman.csv\")","f0229f94":"# A breif look on dataframe\nprint(\"Haberman Dataset Head\\n\")\nprint(haberman.head(10))","fca9129c":"# Dataset Description\nprint(\"Haberman Dataset Describe\\n\")\nprint(haberman.describe())","ce5b6c60":"print(\"Haberman Dataset Info\\n\")\nprint(haberman.info())","8f37e055":"# how many data-points and features?\nprint (haberman.shape)","6b7eb808":"# Check for any Null values\nprint(haberman.isnull().values.any())","f5791cd2":"print(list(haberman['status'].unique()))","eade0ae6":"haberman['status'] = haberman['status'].map({1:\"survived\", 2:\"not_survived\"})\nhaberman['status'] = haberman['status'].astype('category')\nprint(haberman.head(10))","b95a7ac1":"print(haberman.info())","f2ce892c":"print(\"Number of rows: \" + str(haberman.shape[0]))\nprint(\"Number of columns: \" + str(haberman.shape[1]))\nprint(\"Columns: \" + \", \".join(haberman.columns))\nprint(\"*\"*100)\nprint(\"Target variable distribution\")\nprint(haberman.iloc[:,-1].value_counts())\nprint(\"*\"*100)\nprint(haberman.iloc[:,-1].value_counts(normalize = True))\nprint(\"*\"*100)\nprint(haberman.describe())","6e30c911":"# cite : https:\/\/www.kaggle.com\/gokulkarthik\/haberman-s-survival-exploratory-data-analysis\nfor idx, feature in enumerate(list(haberman.columns)[:-1]):\n    fg = sns.FacetGrid(haberman, hue='status', height=5)\n    fg.map(sns.distplot, feature).add_legend()\n    plt.suptitle(str(\"Distribution Plot for \"+feature), y=1.05, fontsize=18)\n    plt.show()\n    ","543fa498":"plt.figure(figsize=(20,5))\nfor idx, feature in enumerate(list(haberman.columns)[:-1]):\n    plt.subplot(1, 3, idx+1)\n    print(\"\\n*************** \"+str(feature)+\" ****************\")\n    counts, bin_edges = np.histogram(haberman[feature], bins=10, density=True)\n    pdf = counts\/sum(counts)\n    print(\"PDF: {}\".format(pdf))\n    print(\"Bin Edges: {}\".format(bin_edges))\n    cdf = np.cumsum(pdf)\n    print(\"CDF: {}\".format(cdf))\n    plt.plot(bin_edges[1:], pdf, label = \"pdf\")\n    plt.plot(bin_edges[1:], cdf, label = \"cdf\")\n    plt.xlabel(feature)\n    plt.legend(loc='upper left')\n    plt.title(str(feature+\"'s pdf-cdf plot\"))\n    plt.grid(True)\n    plt.suptitle(\"PDF-CDF Plottings\", y=1.05, fontsize=20)","6ca0acba":"#Mean, Std-deviation, \n\nyes = haberman.loc[haberman[\"status\"] == \"survived\"];\nno = haberman.loc[haberman[\"status\"] == \"not_survived\"];\n\nfor idx, feature in enumerate(list(haberman.columns)[:-1]):\n    print(str(feature))\n    print(\"Mean of \", str(feature),\" of survived class : \",np.mean(yes[feature]))\n    print(\"Mean of \", str(feature),\" of not survived class : \",np.mean(no[feature]))\n    print(\"Std Dev. of \", str(feature),\" of survived class : \",np.std(yes[feature]))\n    print(\"Std Dev. of \", str(feature),\" of not survived class : \",np.std(no[feature]))\n    print(\"\\n\")\n","aac9dfad":"#Median, Quantiles, Percentiles, IQR.\nfor idx, feature in enumerate(tuple(haberman.columns)[:-1]):\n    print(\"*\"*10,str(feature),\"*\"*10)\n    print(\"\\nMedians:\")\n    print(np.median(yes[feature]))\n    print(np.median(no[feature]))\n\n    print(\"\\nQuantiles:\")\n    print(np.percentile(yes[feature],np.arange(0, 100, 25)))\n    print(np.percentile(no[feature],np.arange(0, 100, 25)))\n\n    print(\"\\n90th Percentiles:\")\n    print(np.percentile(yes[feature],90))\n    print(np.percentile(no[feature],90))\n\n    from statsmodels import robust\n    print (\"\\nMedian Absolute Deviation\")\n    print(robust.mad(yes[feature]))\n    print(robust.mad(no[feature]))\n    print(\"\\n\")\n","8de802ee":"fig, axes = plt.subplots(1, 3, figsize=(16, 5))\nfor idx, feature in enumerate(tuple(haberman.columns)[:-1]):\n    sns.boxplot(x='status',y=feature, hue=\"status\", data=haberman, ax=axes[idx]).set_title(str(\"status-\"+feature))\nplt.suptitle(\"Box Plots\",y=1.0, fontsize=18)\nplt.show()","c4e9f6fb":"fig, axes = plt.subplots(1, 3, figsize=(15, 5))\nfor idx, feature in enumerate(tuple(haberman.columns)[:-1]):\n    sns.violinplot(x='status',y=feature, hue=\"status\", data=haberman, ax=axes[idx]).set_title(str(\"status-\"+feature))\nplt.suptitle(\"Violin Plots\",y=1.05, fontsize=18)\nplt.show()","b0b11967":"fig, axes = plt.subplots(3, 3, figsize=(15, 15))\nfor idx, feature in enumerate(list(haberman.columns)[:-1]):\n    for i, f in enumerate(list(haberman.columns)[:-1]):\n        sns.scatterplot(x=feature, y=f, hue='status', ax=axes[idx][i], data = haberman).set_title(str(feature+\" vs. \"+f))\nplt.suptitle(\"2-d Scatter Plots\", fontsize=18)\nplt.show()\n","3241ba8b":"plt.close();\nsns.set()\nsns.set_style(\"whitegrid\");\nsns.pairplot(haberman, hue=\"status\", height=6)\nplt.suptitle(\"PairPlots\", y=1.05, fontsize = 18, color='black')\nplt.show()","5ecb8564":"#2D Density plot, contors-plot\nfor idx, feature in enumerate(list(haberman.columns)[:-1]):\n    for i, f in enumerate(list(haberman.columns)[:-1]):\n        if(idx>=i):\n            continue\n        sns.jointplot(x=feature, y=f, data=yes, kind=\"kde\");\n        plt.suptitle(str(\"contour plot for \"+feature+\" & \"+f), y = 1.05, fontsize=18)\n        plt.show()","8303dba0":"##### Change \"status\" data type (int64 to catagorial)","b4b6ca57":"1. The given dataset is imbalanced as it does not contains equal number of data-points for each class.\n2. The given dataset is not linearly separable form each class. There are too much overlapping in the data-points and hence it is very difficult to classify.\n3. Somehow nodes is giving some Intuition in the dataset.\n4. we can not build simple model using only if else condition we need to have some more complex technique to handle this dataset.\n5. By scattering the data points between year and nodes, we can see a little better separation between the two classes than other scatter plots.","284c7265":"##### contour plot","2d36c23c":"1. Number of data points == 306,\n2. Number of features == 3, \n3. Number of classes == 2,\n4. data-points per class == (survived = 225, Not survived = 81)\n\n5. The age of the patients vary from 30 to 83 with the median of 52.\n6. Although the maximum number of positive lymph nodes observed is 52, nearly 75% of the patients have less than 5 axil nodes and nearly 25% of the patients have no axil nodes.\n7. The target column is imbalanced with 73% of values are \"yes\".","8d589f24":"[](http:\/\/)# Exploratory data analysis (EDA) for Haberman Dataset","ab1832db":"### Conclusions :","f9aa533a":"## **Discription** <br\/>\nThe dataset contains cases from a study that was conducted between 1958 and 1970 at the University of Chicago's Billings Hospital on the survival of patients who had undergone surgery for breast cancer.\n\n**Number of Attributes**: 4  <br\/>\n**Attributes Information:**<br\/>\n1. Age of patient at time of operation ('age') <br\/>\n2. Patient's year of operation ('operation_year') <br\/>\n3. Number of positive axillary nodes detected ('axil_nodes') <br\/>\n4. Survival status: \n                1 = the patient survived 5 years or longer('will_survive') \n                2 = the patient died within 5 year('not_survive')","4b12d1f5":"##### CDF(Cumulative Distribution Function)","275a8830":"To predict whether the patient will survive after 5 years or not based upon the patient's age, year of treatment and the number of axil nodes (positive lymph nodes).","1d06be9b":"##### Obervations","9318df60":"## Analysis","2ed5b419":"High level statistics of the dataset: number of points, numer of features, number of classes, data-points per class","da6851dd":"### Data Preprocessing ","b8bae16f":"1. Download Haberman Cancer Survival dataset from Kaggle. You may have to create a Kaggle account to donwload data. (https:\/\/www.kaggle.com\/gilsousa\/habermans-survival-data-set)\n2. Perform a similar alanlaysis as above on this dataset with the following sections:\n* High level statistics of the dataset: number of points, numer of   features, number of classes, data-points per class.\n* Explain our objective. \n* Perform Univaraite analysis(PDF, CDF, Boxplot, Voilin plots) to understand which features are useful towards classification.\n* Perform Bi-variate analysis (scatter plots, pair-plots) to see if combinations of features are useful in classfication.\n* Write your observations in english as crisply and unambigously as possible. Always quantify your results.","71367735":"##### Observations","a220326a":"##### 2-D Scatter Plot","5fc7b7d6":"1. No null or missing values so no need of data imputation.\n2. The status column data is int64 type it has to be converted to catagorial class. ","9a8b5242":"##### Box plot ","a31551f5":"##### Observations","2bf57dc6":"##### Median, Percentile, Quantile, IQR, MAD","b5db50d3":"### Bivariate Analysis","85ff352b":"##### Violin plots","2922ea72":"### Univariate Analysis","dc8db63b":"### High level statistics of the dataset:","e531dafa":"##### Distribution plots","8e9d526a":"##### Mean, Variance and Std-dev","a59a6c1f":"1. The number of axil of the survivors is highly densed from 0 to 5 shown by PDF of axil node.\n2. Almost 80% of the patients have less than or equal to 5 positive axil node.\n3. The patients treated after 1966 have the slighlty higher chance to surive that the rest. The patients treated before 1959 have the slighlty lower chance to surive that the rest.","e857423c":"##### Pairplot","bd994dc7":"### Objective"}}