{"cell_type":{"bb0f0b06":"code","1d94c22d":"code","20263a23":"code","6595ef54":"code","c6ce59d4":"code","c70cb7ad":"code","49ede82f":"code","2930691e":"code","f8dfca35":"code","0996e04c":"code","33a7da71":"code","09d989c3":"code","998814e4":"code","dd94f5c1":"code","0effc42a":"code","973155ef":"code","69fa5d0d":"code","cfd15695":"code","8b69c915":"code","7ae905f4":"code","83779df9":"code","cd68e5c0":"code","289446c2":"code","5512bddb":"code","d7aec09b":"code","3b9bbfb2":"code","fac90b00":"code","78412e96":"code","017c8f07":"code","e6dfe90b":"code","ec5e8750":"code","e792e7db":"code","69f3b3de":"code","e93a0bdd":"code","b49797c6":"code","b2b4bfdd":"code","23383204":"code","421a2095":"code","4ea49d4f":"code","bc86895e":"code","a01ea5ff":"code","d3d2e13c":"code","ea6d6d56":"code","885d9cba":"code","d974d7b3":"code","f76548b1":"code","ae01a57e":"code","59eb63e5":"code","24b78cca":"code","1ded156e":"code","ad919831":"code","8cb1502d":"code","6ee708c8":"code","ea061928":"code","a967c3f6":"code","379ea79a":"code","dab77c42":"code","7c190ee7":"code","d61b9d66":"code","bf8a1fe4":"code","6d412b9f":"code","ba4b87c7":"markdown","f2eb7ba2":"markdown","747fe45d":"markdown","4220c5d5":"markdown","a9d16260":"markdown","1d596d27":"markdown","36805d69":"markdown","30bbf370":"markdown","bef1f549":"markdown","ec1fb859":"markdown","f8ffdae8":"markdown","e181983f":"markdown","945c85c0":"markdown","34910608":"markdown","15fc1851":"markdown","6bfb7ee6":"markdown","cca42c47":"markdown","c0f539cb":"markdown","238d5d47":"markdown","5537c505":"markdown","121337be":"markdown","25c90e76":"markdown","15b1a8b0":"markdown","ea7f74ba":"markdown","05a95821":"markdown","686f735d":"markdown","86b5dc3a":"markdown","c99fa991":"markdown","c0b44bf9":"markdown","2ae8aa8a":"markdown","f7fc3542":"markdown","a45fad65":"markdown","1e488f52":"markdown","4c39951e":"markdown","60c37cb0":"markdown","0ba26d38":"markdown"},"source":{"bb0f0b06":"# Importing essential Libraries\nimport pandas as pd\nimport numpy as np\n\nimport warnings\nwarnings.filterwarnings(\"ignore\")\n\nimport matplotlib.pyplot as plt\n%matplotlib inline\nimport seaborn as sns\n\nfrom sklearn.model_selection import train_test_split\n\nfrom sklearn.preprocessing import MinMaxScaler\n\nfrom sklearn.feature_selection import RFE\nfrom sklearn.linear_model import LinearRegression\n\nimport statsmodels.api as sm\n\nfrom statsmodels.stats.outliers_influence import variance_inflation_factor\nfrom sklearn.metrics import r2_score","1d94c22d":"# Read and view the Dataset\nday = pd.read_csv('..\/input\/boom-bikes\/day.csv')\nday.head()","20263a23":"# Get to know about type of Data\nday.info()","6595ef54":"day = day.drop(['instant','dteday'],axis =1)","c6ce59d4":"season_desc = pd.get_dummies(day['season'])\nseason_desc.head()","c70cb7ad":"season_desc.info()","49ede82f":"#df.rename(columns = d, inplace = False)\nseason_desc1 = season_desc.rename(columns={1:'spring', 2:'summer', 3:'fall', 4:'winter'},inplace = False)\nseason_desc1.sample(5)\n","2930691e":"day = pd.concat((day,season_desc1),axis=1)","f8dfca35":"day = day.drop(['season','spring'],axis=1)\nday.sample(5)","0996e04c":"Month = pd.get_dummies(day['mnth'])\nMonth.head()","33a7da71":"Month1 = Month.rename(columns={ 1:'Jan',2:'Feb',3:'March',4:'April',5:'May', \\\n                               6:'June',7:'July',8:'Aug',9:'Sep',10:'Oct',11:'Nov',12:'Dec'},inplace = False)\nMonth1.sample(5)","09d989c3":"day = pd.concat((day,Month1),axis=1)\nday.sample(5)","998814e4":"day = day.drop(['mnth','Jan'],axis=1)\n","dd94f5c1":"day.info()","0effc42a":"Weekday = pd.get_dummies(day['weekday'])\nWeekday.sample(5)","973155ef":"WEEKDAYS = Weekday.rename(columns={1:'Monday',2:'Tuesday',3:'Wednesday',4:'Thrusday', \\\n                                   5:'Friday',6:'Saturday',0:'Sunday'},inplace = False)\nWEEKDAYS.sample(7)","69fa5d0d":"day = pd.concat((day,WEEKDAYS),axis=1)\nday.sample(5)","cfd15695":"day = day.drop(['weekday','Sunday'],axis=1)\nday.sample(5)","8b69c915":"Weathersit = pd.get_dummies(day['weathersit'])\nWeathersit.sample(5)","7ae905f4":"Weathersits = Weathersit.rename(columns = {1:'Clear' ,2: 'Mist' , 3: 'Light'},inplace = False)","83779df9":"day = pd.concat((day,Weathersits), axis =1)\nday.sample(5)","cd68e5c0":"# As we don't need the Feature 'weathersit' now as we have already expanded so we can drop it\nday = day.drop('weathersit',axis=1)\n","289446c2":"day.info()","5512bddb":"# Visualization of Data Statistics \nday.describe().T.style.background_gradient(cmap = 'coolwarm',axis=1).set_precision(2)","d7aec09b":"# Visualization of Relationship of Numerical Features against Target Variable\nsns.pairplot(day, x_vars=[\"temp\",'atemp', 'windspeed',\"hum\",'casual','registered'],y_vars=['cnt'],hue ='yr')\nplt.show()\n","3b9bbfb2":"plt.figure(figsize = (12,6))\nsns.heatmap(day[[\"temp\",'atemp', 'windspeed',\"hum\",'casual','registered','cnt']].corr(),annot =True)\nplt.show()","fac90b00":"day = day.drop(['atemp','casual','registered'],axis =1)","78412e96":"day.groupby(['Clear', 'Mist','Light','summer','fall','winter'])['cnt'].mean().sort_values(ascending = False)","017c8f07":"sns.pairplot(day,x_vars =['Clear', 'Mist','Light','summer','fall','winter'],y_vars='cnt',hue ='yr')\nplt.show()","e6dfe90b":"plt.figure(figsize = (12,6))\nsns.heatmap(day[['cnt','Clear', 'Mist','Light','summer','fall','winter','yr']].corr(),annot =True)\nplt.show()","ec5e8750":"day.groupby(['summer','fall','winter','Feb','March','April','May','June', \\\n             'July' ,'Aug','Sep','Oct','Nov','Dec'])['cnt'].mean().sort_values(ascending = False)","e792e7db":"sns.pairplot(day,x_vars =['Feb','March','April','May','June','July' ,'Aug','Sep','Oct','Nov','Dec'],y_vars='cnt',hue ='yr')\nplt.show()","69f3b3de":"plt.figure(figsize = (20,10))\nsns.heatmap(day[['cnt','Feb','March','April','May','June','July' ,'Aug','Sep','Oct','Nov','Dec']].corr(),annot = True)\nplt.show()","e93a0bdd":"day.columns","b49797c6":"day.groupby(['holiday', 'workingday','summer','fall','winter'])['cnt'].mean().sort_values(ascending = False)","b2b4bfdd":"sns.pairplot(day,x_vars =['holiday', 'workingday','summer','fall','winter'],y_vars='cnt',hue ='yr')\nplt.show()","23383204":"plt.figure(figsize = (16,8))\nsns.heatmap(day[['cnt','holiday', 'workingday','summer','fall','winter']].corr(),annot = True)\nplt.show()","421a2095":"# Splitting the Data into Training and Testing Sets\ndf_train,df_test = train_test_split(day,train_size=0.7,random_state=100)\nprint(df_train.shape)\nprint(df_test.shape)","4ea49d4f":"# As we saw that Data we were unfiform across the all the Features hence Scaling is Required.\nscaler = MinMaxScaler()\n\n# Create a list of Numerical Variables which need to Scaled\nnum_vars = ['temp', 'windspeed',\"hum\",'cnt']\n\n# For the Training Data Fit and Transform both need to done.\ndf_train[num_vars]=scaler.fit_transform(df_train[num_vars])\n\n# View the Statistical Description to ensure MinMax Scaling has done properly\ndf_train.describe().T","bc86895e":"# Preparation of Training Dataset\ny_train = df_train.pop('cnt')\nX_train = df_train\nprint(X_train.shape)\ny_train.sample(5)","a01ea5ff":"# Running RFE with the Output Number of variables equals to 15\nlm = LinearRegression()\nlm.fit(X_train,y_train)\n# Running RFE\nrfe = RFE(lm,15)\nrfe = rfe.fit(X_train, y_train)","d3d2e13c":"list(zip(X_train.columns,rfe.support_,rfe.ranking_))","ea6d6d56":"# RFE Selected Features\ncol = X_train.columns[rfe.support_]\ncol","885d9cba":"# Features Rejected by the RFE\nX_train.columns[~(rfe.support_)]","d974d7b3":"# Creating X train with RFE Selected Variables\nX_train_rfe = X_train[col]","f76548b1":"# Adding Constant\nX_train_rfe = sm.add_constant(X_train_rfe)\n\n# Create Object for the Model\nlm = sm.OLS(y_train, X_train_rfe).fit()\n\n# View Summary of Statistics\nlm.summary()","ae01a57e":"# Calculation of VIF\nvif = pd.DataFrame()\nvif['Features'] = X_train_rfe.columns\nvif['VIF'] = [variance_inflation_factor(X_train_rfe.values,i) for i in range(X_train_rfe.shape[1])]\nvif['VIF'] = round(vif['VIF'],2)\nvif = vif.sort_values(by = 'VIF', ascending = False)\nvif","59eb63e5":"# As VIF is Infnity for the Feature 'Clear' so we can drop it \nX_train_rfe = X_train_rfe.drop('Clear',axis=1)\nX_train_rfe.columns","24b78cca":"# Add constant to all the Variables\nX_train_sm = sm.add_constant(X_train_rfe)\n# Create the Model\nlr = sm.OLS(y_train, X_train_sm)\n# Fit the Model\nlr_model = lr.fit()\n# View the Parameter of the Model\nlr_model.summary()","1ded156e":"# Again Checking the VIF Score\nvif = pd.DataFrame()\nvif['Features'] = X_train_rfe.columns\nvif['VIF'] = [variance_inflation_factor(X_train_rfe.values,i) for i in range(X_train_rfe.shape[1])]\nvif['VIF'] = round(vif['VIF'],2)\nvif = vif.sort_values(by = 'VIF', ascending = False)\nvif","ad919831":"X_train_rfe.shape","8cb1502d":"# Calculation of Error in Prediction for Training Data\ny_train_pred = lr_model.predict(X_train_sm)\nres = (y_train - y_train_pred)","6ee708c8":"# Ploting of Residuals\nplt.figure(figsize = (12,6))\nsns.set_style(\"darkgrid\")\nsns.distplot(res)\nplt.title('Distribution of Error Terms')\nplt.show()","ea061928":"plt.figure(figsize = (12,6))\nsns.set_style(\"darkgrid\")\nplt.scatter(y_train_pred,res)\nplt.title('Residual Vs. Predicted Values')\nplt.xlabel('Predicted Values')\nplt.ylabel('Residuals')\nplt.show()","a967c3f6":"plt.figure(figsize = (12,6))\nsns.set_style(\"darkgrid\")\nsns.regplot(x=y_train, y=y_train_pred)\nplt.title('Predicted Points Vs. Actual Points')\nplt.xlabel('Actual Points')\nplt.ylabel('Predicted Points')\nplt.show()","379ea79a":"num_vars = ['temp', 'windspeed',\"hum\",'cnt']\n\ndf_test[num_vars]=scaler.transform(df_test[num_vars])\n\ny_test = df_test.pop('cnt')\nX_test = df_test\nX_test_sm = sm.add_constant(X_test)\nX_test_sm.head()","dab77c42":"#Dropping the Features which were eliminated during the Training Process\nX_test_sm = X_test_sm.drop(['fall', 'Feb', 'March', 'April', 'May', 'June', 'July', 'Nov', 'Dec', \\\n       'Monday', 'Tuesday', 'Wednesday', 'Thrusday', 'Friday','Clear'],axis=1)\n\n# Predict the Price for Test Data using the Trainned Model\ny_test_pred = lr_model.predict(X_test_sm)\n\ny_test_pred.sample(5)","7c190ee7":"# Plotting y_test and y_pred to understand the spread.\nplt.figure(figsize = (12,6))\nsns.set_style(\"darkgrid\")\nsns.regplot(x=y_test, y=y_test_pred)\nplt.title('Actual vs. Predicted Rent of Bikes Count')\nplt.xlabel('Actual Rent of Bikes Count')\nplt.ylabel('Predicted Rent of Bikes Count')\nplt.show()","d61b9d66":"# Checking the Accuracy of the Test Model\nr2_score(y_test,y_test_pred)","bf8a1fe4":"Cofficients = round(lr_model.params,2)\nbeta = Cofficients.sort_values(ascending = False)\nbeta","6d412b9f":"for i in range(0, len(beta)):\n    print(beta[i],'*',beta.index[i],end ='')\n    print(' + ',end ='')","ba4b87c7":">  **We have Prob(F-statistic) is very low Which tells Overall model is a good Fit.**\n\n>  **We got quite Good Adjusted R2 Score i.e 84.3%** \n\n>  **All the P Value are less than 0.05, Which say that all the 14 Features are Statistically Significant**\n\n>  **Hence we can go ahaed with the current Model for Prediction and Evaluation.**","f2eb7ba2":"#### Feature: season has four levels (1:spring, 2:summer, 3:fall, 4:winter) , so it has to be encoded with the help three dummy variables\n\n","747fe45d":"***Building Model using statsmodels for the detailed statistics***","4220c5d5":"> **We can see there is no specific Pattern observed in the Error Terms with respect to Prediction, hence we can say\nError terms are\u202findependent\u202fof each other.** ","a9d16260":"#### Understanding the Feature 'weekday'\nweekday : day of the week , so this Feature needs Encoding\n\nIt can be encoded as follow:\n\n{1:'Monday',2:'Tuesday',3:'Wednesday',4:'Thrusday',5:'Friday',6:'Saturday',0:'Sunday'}\n","1d596d27":"> **We can see Error Terms are normally Distributed with mean Zero. Hence Model is Actaully obeying the assumption of Normality**.","36805d69":"## **Model Evaluation on Test Dataset**","30bbf370":"## **Data Modelling**","bef1f549":"* As we have already Expanded the Feature 'weekday' so we don't need it.\n* Since any one of the Weekday can be explained by remaining other 6 Weekdays. so we can drop 'Sunday'","ec1fb859":"> ***Above Scatter Plot Shows the Linear Relationship between Actual Rent of Bikes Count and Predicted Rent of Bikes Count.***","f8ffdae8":"> **We can see MinMax Scaling has been done properly for the Training Data as the Minimum\nvalue is 0 for each of the Feature and Maximum value is 1 for each of the Feature**","e181983f":"* Since any one of the Month can be explained by remaining other 11 Months so we can drop First one i.e. 'Jan'\n* As we have already expanded the Levels of of the Feature 'mnth' so we don't need it.","945c85c0":"From Above Numerical Feature Description we have following observation:\n\n* > some of the Columns may have outliers like 'casual'\n* > Data are not uniform across all the features hence it need to be Scaled so that the Interpreation can be done well\n* > MinMax Scaling can be used as it take care of Outliers in the Data\n\n\n    ","34910608":"#### Understanding the Feature 'holiday'\nholiday : weather day is a holiday or not , so this Feature is already encoded to Binary form where\n*     1 represents it's Holiday\n*     0 represents it's not a Holiday\n    ","15fc1851":"> **The Final Model accuray is around 81.5%, Which is a Good Score.**\n\n> **The Model accuracy difference between the Train and Test Data is less than 3% which is acceptable.**\n\n","6bfb7ee6":"> Features such as 'temp','atemp','hum','windspeed','casual','register','cnt'and integers and it is expected them\nto be as integers only.\n\n> The Feature 'cnt' represents count of total rental bikes including both casual and registered and it is the Target variable.","cca42c47":"### *Looking for the Assumption : Normality*","c0f539cb":"## **Data Visualization**","238d5d47":"* We don't need the Feature 'instant',it is just serial number of the dataset.\n* We don't need the Feature 'dtday' because it is already expalained by the other features like: yr, mnth, weekday, workingday and holiday.\n","5537c505":"we don't need all four columns we can drop any one column because each of the column can be explained\nby remaining three. Let's say we if drop the column 'spring' then let's see how it can be explained by remaining three:\n\n*     000 will corresponds to spring\n*     100 will corresponds to summer\n*     010 will corresponds to fall\n*     001 will corresponds to winter","121337be":"#### Understanding the Feature 'weathersit'\nweathersit : \n- 1: Clear, Few clouds, Partly cloudy, Partly cloudy\n- 2: Mist + Cloudy, Mist + Broken clouds, Mist + Few clouds, Mist\n- 3: Light Snow, Light Rain + Thunderstorm + Scattered clouds, Light Rain + Scattered clouds\n- 4: Heavy Rain + Ice Pallets + Thunderstorm + Mist, Snow + Fog\n\n> Since the Feature 'wethershit' has four levels so we can create  dummy Variables to represent them into Numerical forms and mapping can be done as\n1: Clear\n2: Mist\n3: Light\n","25c90e76":"### *Looking for patterns in the residuals*","15b1a8b0":"> As the Statistics Report say there is strong multicollinearity problems so we need to check for VIF","ea7f74ba":"#### *Feature Selection using RFE(Recursive Feature Elimination)*","05a95821":"> **We can see Error Terms have approximatly a Constant Variance, Hence it follows the Assumption of Homoscedasticity**","686f735d":"## ***Insights:*** \n\n> **Temperature is the Most Significant Feature which affects the Business positively,**  \n \n> **Whereas  the other Environmental condition such as Raining, Humidity, Windspeed and Cloudy affects the Business negatively.**\n \n\n> **Company need to think how to tackle with bad weather condition and come up with sort of solution which protect users from Raining.** \n\n\n\n> **The Demand of Bikes is more in the Winter and Summer season, mostly user don't like to travel using Bikes in Rainy Day or Rainy Season.** \n\n\n> **It is interesting to see Specially Saturday People like to Rent a Bike more than other usual Days** \n   \n\n> **Demand of Bike Rent has been significantly increased in the 2019 than 2018 so it is clear sign that Boom Bikes is doing a Business.** \n\n\n> **Even though without expending a single cent BOOM Bikes can expect their business to grow by 19%**","86b5dc3a":"> **Equation of Best Fit Line :**\n\n> **cnt = 0.53 * temp + 0.23 * yr  + 0.13 * winter + 0.13 * Sep + 0.1 * summer + 0.06 * Aug + 0.05 * Saturday + 0.04 * workingday + 0.04 * Oct - 0.06 * holiday - 0.06 * Mist - 0.17 * hum - 0.19 * windspeed - 0.25 * Light + 0.19**","c99fa991":"\n**Problem Statment**:\n\nA US bike-sharing provider BoomBikes has recently suffered considerable dips in their revenues. They have contracted a consulting company to understand the factors on which the demand for these shared bikes depends. Specifically, they want to understand the factors affecting the demand for these shared bikes in the American market.\nThe company wants to know :\n\n*     Which variables are significant in predicting the demands for shred bikes.\n*     How well those variables describe the bike demands.\n\n","c0b44bf9":"### *Looking for Constant Variance*","2ae8aa8a":"* > Most number of the Bike has been rented in the Year 2019 in the Month of September However in the just previous Year it was in the June Month.\n\n* > Basically in the Winter Season BOOM Bikes can expect more number demand for Rent of Bikes.","f7fc3542":"#### *Applying the MinMax scaling on the test sets*","a45fad65":"#### Understanding the Feature 'workingday'\n* workingday : if day is neither weekend nor holiday is 1, otherwise is 0\n* As the Feture Working Days is already Binary Encoded so no further Data Preparation is needed.","1e488f52":"## **Residual Analysis**","4c39951e":"From Above two plot below are the observations:\n* > Registered Bike users are more than Casual and is strongly correlated with Target Variable\n* > Temp and atemp are very strongly correlated one can be dropped\n* > Humidity has not much Negative effect on the Target Variable.\n* > Since after a user rented a Bike only we can determine He or She has registered or Casually done so both the Features are actually Target Feature\n    Since we have already a Target Feature we can drop these two.\n","60c37cb0":"## **Data Reading,Understanding and Preparation**","0ba26d38":"> **Most of the Bike has been rented during the weekdays**\n\n> **Users Prefer to Rent Bike if the Environment is Clear**\n\n> **Rent of bike is least on the Holiday**\n\n> **More Number of Bike has been rented in the year 2019 than last year (2018) , it shows BOOM Bikes are doing Good Business.**"}}