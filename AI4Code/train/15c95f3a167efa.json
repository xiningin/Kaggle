{"cell_type":{"b7b3765e":"code","7cdda444":"code","c2097469":"code","0bbbc44a":"code","3af161f3":"code","95c28f7a":"code","808bf810":"code","97220b33":"code","a04bc855":"code","0a295eef":"code","42a6f318":"code","2fb7b400":"code","b7d77c1d":"code","ed98daac":"code","e882da41":"code","91e09d4e":"code","eca300c0":"code","c8b5781a":"code","b51cc2a7":"code","69208db4":"code","34b3c84e":"code","decb612f":"code","7a29cbc7":"code","938af99e":"code","cd2d6221":"code","6d23b161":"code","8c623410":"code","40410e9b":"code","5ae457c5":"code","83d299ec":"code","dc1285e0":"code","4526887a":"code","a67e559f":"code","0d659fc1":"code","94ed7f2b":"code","70ec48e2":"code","4cb267bc":"code","b4cb70ed":"markdown","5e7cdc76":"markdown","777bdd57":"markdown","93eb7344":"markdown","675e4484":"markdown","11afeefc":"markdown","a940117b":"markdown","262e02ce":"markdown","9fd5a2a3":"markdown","6efe1f77":"markdown","8d504b51":"markdown","92fdf499":"markdown","39b216a4":"markdown","3a0a4cc3":"markdown","0bd31025":"markdown","688c9374":"markdown","a1bbe6ee":"markdown"},"source":{"b7b3765e":"!pip install pandasql","7cdda444":"import pandas as pd\nimport pandasql as psql\nfrom pandasql import sqldf\nimport numpy as np\nimport calendar\n\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n#from wordcloud import WordCloud\n\nimport warnings\nwarnings.filterwarnings( 'ignore' )\n\nsns.set(style='darkgrid')\nplt.rcParams[\"figure.figsize\"] = (15,7)","c2097469":"reviews = pd.read_csv(\"\/kaggle\/input\/brazilian-ecommerce\/olist_order_reviews_dataset.csv\")\nproducts  = pd.read_csv(\"\/kaggle\/input\/brazilian-ecommerce\/olist_products_dataset.csv\")\ncustomers = pd.read_csv(\"\/kaggle\/input\/brazilian-ecommerce\/olist_customers_dataset.csv\")\norders = pd.read_csv(\"\/kaggle\/input\/brazilian-ecommerce\/olist_orders_dataset.csv\")\norders_items = pd.read_csv(\"\/kaggle\/input\/brazilian-ecommerce\/olist_order_items_dataset.csv\")","0bbbc44a":"df_reviews =  psql.sqldf(\"select * from reviews\")\ndf_reviews.head()","3af161f3":"df_customers =  psql.sqldf(\"select * from customers\")\ndf_customers.head()","95c28f7a":"df_products =  psql.sqldf(\"select * from products\")\ndf_products.head()","808bf810":"df_orders =  psql.sqldf(\"select * from orders\")\ndf_orders.head()","97220b33":"query = '''SELECT REVISAO.REVIEW_ID,\n                  REVISAO.REVIEW_SCORE,\n                  REVISAO.REVIEW_COMMENT_TITLE,\n                  REVISAO.REVIEW_COMMENT_MESSAGE,\n                  REVISAO.REVIEW_CREATION_DATE,\n                  PEDIDOS.ORDER_STATUS,\n                  PEDIDOS.ORDER_APPROVED_AT,\n                  PEDIDOS.ORDER_DELIVERED_CARRIER_DATE,\n                  PEDIDOS.ORDER_ESTIMATED_DELIVERY_DATE,\n                  CLIENTES.CUSTOMER_STATE,\n                  PRODUTOS.PRODUCT_CATEGORY_NAME\n           FROM reviews REVISAO\n                INNER JOIN orders PEDIDOS\n                ON REVISAO.ORDER_ID = PEDIDOS.ORDER_ID\n                INNER JOIN customers CLIENTES\n                ON CLIENTES.CUSTOMER_ID = PEDIDOS.CUSTOMER_ID\n                INNER JOIN orders_items ITENS \n                ON PEDIDOS.ORDER_ID = ITENS.ORDER_ID\n                INNER JOIN products PRODUTOS \n                ON PRODUTOS.PRODUCT_ID = ITENS.PRODUCT_ID'''","a04bc855":"df = psql.sqldf(query)","0a295eef":"df.shape","42a6f318":"df.isna().sum()","2fb7b400":"df.dtypes","b7d77c1d":"df.columns","ed98daac":"df1 = df.copy()","e882da41":"df1.head()","91e09d4e":"%%time\n\ndf1 = df1.drop_duplicates()\n\n# rename columns\ncols = ['review_id', 'score', 'review_title', 'review_message', 'review_date',\n        'order_status', 'order_approved','delivered_carrier','estimated_delivery',\n        'customer_state', 'product_category']\ndf1.columns = map(str.lower, cols)\n\n#Change types \ndf1['score'] = df1['score'].astype(int)\n\n# Parse Dates to datetime pandas\nfor col in df1[['review_date', 'order_approved','delivered_carrier','estimated_delivery']]:\n    df1[col] = pd.to_datetime(df1[col])\n\n# check if there is a empty values. If true, fill With NaN\nfor col in df1:\n    df1[col] = df1[col].apply(lambda x: np.nan if x == '' else x )\n    \n#ordering columns\ndf1 = df1[['review_id','review_date', 'order_approved','delivered_carrier','estimated_delivery', \n            'product_category','order_status','review_title', 'review_message','customer_state','score']]","eca300c0":"df1.isna().sum()","c8b5781a":"df1.sample(3)","b51cc2a7":"sns.countplot(x='score', data=df1, palette='gist_yarg_r', order=[5,4,3,2,1])\nplt.title(\"SCORE\", size=12);","69208db4":"mais_vendidos = df1.groupby(['product_category'], as_index=False)['customer_state'].count().rename( columns = {'customer_state':'total'})\n# calculo porcentagem\nmais_vendidos['%'] = round((mais_vendidos['total'] \/ mais_vendidos['total'].sum()) * 100, 2)\nmais_vendidos.nlargest(3, 'total')","34b3c84e":"g = sns.barplot(y='product_category', x='%', palette='Greens_r', data=mais_vendidos.nlargest(20, '%'))\n\nplt.title('TOTAL ORDERS BY CATEGORY', size=18)\nplt.yticks(fontsize=15, color='gray');\nplt.xticks([0,2,4,6,8,10],['0 %', '2 %', '4 %', '6 %', '8 %', '10 %'], fontsize=15);\nplt.xlabel(\"Percentage of order\");\ng.spines['top'].set_visible(False)\ng.spines['right'].set_visible(False)","decb612f":"def count_product_category(score, data, x, y, n = 20):\n    #filtering the dataframe by score, to generate the graph for each one\n    data = data[ data['score'] == score ]\n    count = data.groupby(col, as_index=False)['customer_state'].count().rename( columns = {'customer_state':'total'})\n    count['%'] = round((count['total'] \/ count['total'].sum()) * 100, 2)\n    \n    g = sns.barplot(x=x, y =y, data = count.nlargest(n, 'total'), palette='icefire_r')\n    \n    # config plot area\n    plt.title(f'score {score} by {col}', size=13,  fontweight=\"bold\")\n    g.spines['top'].set_visible(False)\n    g.spines['right'].set_visible(False)\n    plt.subplots_adjust(left=0.1, \n                    bottom=0.3,  \n                    right=0.9,  \n                    top=2.3,  \n                    wspace=0.4,  \n                   hspace=1)\n    return g","7a29cbc7":"for i in range(1,6):\n    plt.subplot( 3, 3, i );\n    count_product_category(i, df1, 'product_category', '%', 10);\n    plt.xticks(rotation=90);","938af99e":"df1.sample()","cd2d6221":"def count_order_by_state(col, data, y, n = 20):\n    count = data.groupby(col, as_index=False)['order_status'].count().rename( columns = {'order_status':'total'})\n    count['%'] = round((count['total'] \/ count['total'].sum()) * 100, 2)\n    \n    g = sns.barplot(x=col, y =y, data = count.nlargest(n, 'total'), palette='Greys_r')\n    \n    col = col.replace(\"_\", \" \")\n    plt.title(f' Total order by {col}', size=18,  fontweight=\"bold\")\n    g.spines['top'].set_visible(False)\n    g.spines['right'].set_visible(False)\n    return g","6d23b161":"count_order_by_state('customer_state', df1, 'total', 27);","8c623410":"df_delivery = df1.copy()","40410e9b":"df_delivery = df_delivery.dropna()","5ae457c5":"%%time\n\n# I will create a simple function to calculate how many days it took to make the delivery (delivered_carrier - order_approved)\ndef days_to_delivery(data):\n    # If delivery was made within the same month:\n    if data['delivered_carrier'].month == data['order_approved'].month:\n        if data['delivered_carrier'].day < data['order_approved'].day:\n            return np.nan # In some cases there is an error in the data, in which the day of delivery is less than the day of approval of the order.\n        else: \n            return data['delivered_carrier'].day - data['order_approved'].day\n    \n    # If it was delivered in different months, you must first calculate the days separately for each month and then add them up.\n    elif data['delivered_carrier'].month != data['order_approved'].month:\n        if data['delivered_carrier'].month < data['order_approved'].month:\n            return np.nan\n        else:\n            return (pd.Period(data['order_approved'], freq='D').days_in_month - data['order_approved'].day) + data['delivered_carrier'].day\n\n    \ndf_delivery['days_to_delivery'] = df_delivery.apply(days_to_delivery, axis=1)","83d299ec":"df_delivery[df_delivery['days_to_delivery'] != np.nan ].sample(6)","dc1285e0":"# ANALYZING THE BASE, IT IS PERCEIVED THAT THERE ARE DIVERGENCES BETWEEN THE DATES. THEREFORE,\n#ALL DIVERGENT DATA HAS BEEN FILLED WITH NAN SO THEY CAN BE PROCESSED FURTHER.\n\ndef highlight_cols(s):\n    color = 'orange'\n    return 'background-color: %s' % color\n\ndf_delivery[df_delivery['days_to_delivery'].isna()].head(2)\\\n.style.applymap(highlight_cols, subset=pd.IndexSlice[:, ['order_approved', 'delivered_carrier']])","4526887a":"# saving the index of the nan lines, to be able to filter and check if the average values \u200b\u200bwere correctly imputed.\nlist_index = list(df_delivery[df_delivery['days_to_delivery'].isna() ].index)","a67e559f":"# Filling NaN with time - in days - delivery average according to the state.\n\ndf_delivery['days_to_delivery'] = df_delivery.groupby(['customer_state'])['days_to_delivery']\\\n.transform(lambda x: x.fillna( abs(x.mean()) ))","0d659fc1":"df_delivery[df_delivery.index.isin(list_index)].head(2)","94ed7f2b":"sns.boxplot(y='days_to_delivery', x='score', data=df_delivery);\nplt.title('NUMBER OF DAYS TO DELIVERY VS. SCORE', size = 18, fontweight=\"bold\");\nplt.ylabel(\"Days to Delivery\");","70ec48e2":"df_outlier_devlivery = df_delivery[df_delivery['days_to_delivery'] > 10 ]","4cb267bc":"sns.countplot(x='score', data=df_outlier_devlivery)","b4cb70ed":"**Fill NAN with average delivery days by state. Delivery time varies by state, because Brazil is very big**","5e7cdc76":"**Analyzing the score with high delivery time**","777bdd57":"**Continue...**","93eb7344":"**PREPROCESSING**","675e4484":"**Which product categories have the most sales?**","11afeefc":"**LOADING DATA**","a940117b":"**DATA DESCRIPTION**","262e02ce":"Analyzing the data, it is clear that deliveries are made almost unanimously within the same month. Therefore, I will analyze the differences between the days.\n","9fd5a2a3":"**IMPORTS**","6efe1f77":"**Does the delivery time affect the score?**","8d504b51":"**EXLORATORY DATA ANALYSIS**","92fdf499":"**Which States are there more Order?**","39b216a4":"The cama_mesa_banho Category appears in first place in all scores ranges. Obviously, this is due to the amount of farts for this category. The greater the number of requests for a category, the greater the probability of appearing in all score ranges. The positive point is the beleza_saude category, which occupies the first place in the score 5 range.","3a0a4cc3":"We can see in the graph the categories of the products and their respective participation in the number of the total orders. It can be seen that the company's product portfolio is well diversified, whose product value as the largest share is cama_mesa_banho and does not exceed 10% of the total orders. Therefore, any problem that impacts sales in a certain category would not cause such a sharp decrease in the company's revenue.","0bd31025":"**SCORE BY PRODUCT CATEGORY**","688c9374":"**SCORES**","a1bbe6ee":"The base has some values with negative delivery time, which can indicate 3 things:\n\n1. There is something wrong in the calculation I made and I need to check it;\n\n2. The dates are wrong in the database, causing this distortion in the delivery time;\n\n3. The carrier did an incredible job and went back in time to deliver - I think it's unlikely."}}