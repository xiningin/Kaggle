{"cell_type":{"4212e88d":"code","856bff53":"code","419450fc":"code","7b948722":"code","e9f0c92d":"code","fa29dd68":"code","268d9601":"code","06c05f52":"code","7859d84e":"code","dfde7ae3":"code","0f99273e":"code","2d058d66":"code","cbbc158f":"code","0d25bc8d":"code","bd512810":"code","539974dd":"code","4f9f9fcb":"code","fc38b96a":"code","29e52412":"code","9648b56f":"code","231488cf":"code","28754016":"code","27d8803d":"code","b884216e":"code","83d35dda":"code","70a4cb49":"code","78a87f74":"code","bc062df3":"code","3acaa5ec":"code","a59f5b7b":"code","0fcc96b6":"code","da1bb8ee":"code","e91e8244":"code","031fcb9a":"code","2b555047":"code","701ed2c0":"markdown","a6c95b1f":"markdown","ebee0b5f":"markdown","9e921857":"markdown","754eea72":"markdown","89334c3f":"markdown","18da309b":"markdown","5b75e0d1":"markdown","e4ec5ad6":"markdown","02a3efa8":"markdown","96a2cc87":"markdown","6aa9e4f8":"markdown","41591337":"markdown","23111151":"markdown","faea4e3d":"markdown","242de31b":"markdown","f370c091":"markdown","ccf2aeba":"markdown","5ae5d00f":"markdown"},"source":{"4212e88d":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\ni=0\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        if(i<20):\n            print(os.path.join(dirname, filename))\n            i+=1\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","856bff53":"import numpy as np\nimport tensorflow as tf\nfrom tensorflow import keras\nfrom tensorflow.keras.layers import Dense, Activation\nfrom tensorflow.keras.optimizers import Adam\nfrom tensorflow.keras.metrics import categorical_crossentropy\nfrom tensorflow.keras.preprocessing.image import ImageDataGenerator\nfrom tensorflow.keras.preprocessing import image\nfrom tensorflow.keras.models import Model\nfrom tensorflow.keras.applications import imagenet_utils\nfrom sklearn.metrics import confusion_matrix\nimport itertools\nimport os\nimport shutil\nimport random\nimport matplotlib.pyplot as plt\n%matplotlib inline","419450fc":"physical_devices = tf.config.experimental.list_physical_devices('GPU')\nprint(\"Num GPUs Available: \", len(physical_devices))\ntf.config.experimental.set_memory_growth(physical_devices[0], True)","7b948722":"trainpath = os.listdir(\"..\/input\/fingers\/train\")\ntestpath = os.listdir(\"..\/input\/fingers\/test\")","e9f0c92d":"traindata = ['..\/input\/fingers\/train\/' + i for i in trainpath]\ntestdata = [\"..\/input\/fingers\/test\/\" + i for i in testpath]","fa29dd68":"traindata = pd.DataFrame(traindata, columns=['Filepath'])\ntestdata = pd.DataFrame(testdata, columns=['Filepath'])","268d9601":"traindata.head(5)","06c05f52":"traindata['Y'] = traindata['Filepath'].apply(lambda a: a[-6:-5])\ntestdata['Y'] = testdata['Filepath'].apply(lambda a: a[-6:-5])","7859d84e":"traindata.head(5)","dfde7ae3":"traindata.Y.unique()","0f99273e":"from IPython.display import Image\nImage(filename=traindata.Filepath[0], width=300,height=300) ","2d058d66":"traindata.Y[0]","cbbc158f":"mobile = tf.keras.applications.mobilenet.MobileNet()\nmobile.summary()","0d25bc8d":"x = mobile.layers[-6].output #6th last layer ","bd512810":"output = Dense(units=6, activation='softmax')(x)","539974dd":"model = Model(inputs=mobile.input, outputs=output)","4f9f9fcb":"for layer in model.layers[:-23]:\n    layer.trainable = False","fc38b96a":"model.summary()","29e52412":"train_generator = ImageDataGenerator(preprocessing_function=tf.keras.applications.mobilenet.preprocess_input,validation_split=0.1)","9648b56f":"train_batches=train_generator.flow_from_dataframe(\n    dataframe=traindata,\n    x_col='Filepath',\n    y_col='Y',\n    target_size=(224, 224),\n    color_mode='rgb',\n    class_mode='categorical',\n    batch_size=10,\n    subset='training')","231488cf":"valid_batches=train_generator.flow_from_dataframe(\n    dataframe=traindata,\n    x_col='Filepath',\n    y_col='Y',\n    target_size=(224, 224),\n    color_mode='rgb',\n    class_mode='categorical',\n    batch_size=10,\n    subset='validation')","28754016":"traindata.shape","27d8803d":"test_batches = ImageDataGenerator(preprocessing_function=tf.keras.applications.mobilenet.preprocess_input).flow_from_dataframe(\n    dataframe=testdata,\n    x_col='Filepath',\n    y_col='Y',\n    target_size=(224, 224),\n    color_mode='rgb',\n    class_mode='categorical',\n    batch_size=10,\n    shuffle=False)","b884216e":"testdata.shape","83d35dda":"model.compile(optimizer=Adam(learning_rate=0.001), loss='categorical_crossentropy', metrics=['accuracy'])","70a4cb49":"model.fit(x=train_batches,\n            steps_per_epoch=len(train_batches),\n            validation_data=valid_batches,\n            validation_steps=len(valid_batches),\n            epochs=3,\n            verbose=1,\n          callbacks=[\n        tf.keras.callbacks.EarlyStopping(\n            monitor='val_loss',\n            patience=2,\n            restore_best_weights=True\n        )\n    ]\n)","78a87f74":"loss, acc = model.evaluate(test_batches)","bc062df3":"test_labels = test_batches.classes","3acaa5ec":"predictions = model.predict(x=test_batches, steps=len(test_batches), verbose=1)","a59f5b7b":"def plot_confusion_matrix(cm, classes,\n                          normalize=False,\n                          title='Confusion matrix',\n                          cmap=plt.cm.Blues):\n    \"\"\"\n    This function prints and plots the confusion matrix.\n    Normalization can be applied by setting `normalize=True`.\n    \"\"\"\n    plt.imshow(cm, interpolation='nearest', cmap=cmap)\n    plt.title(title)\n    plt.colorbar()\n    tick_marks = np.arange(len(classes))\n    plt.xticks(tick_marks, classes, rotation=45)\n    plt.yticks(tick_marks, classes)\n\n    if normalize:\n        cm = cm.astype('float') \/ cm.sum(axis=1)[:, np.newaxis]\n        print(\"Normalized confusion matrix\")\n    else:\n        print('Confusion matrix, without normalization')\n\n    print(cm)\n\n    thresh = cm.max() \/ 2.\n    for i, j in itertools.product(range(cm.shape[0]), range(cm.shape[1])):\n        plt.text(j, i, cm[i, j],\n            horizontalalignment=\"center\",\n            color=\"white\" if cm[i, j] > thresh else \"black\")\n\n    plt.tight_layout()\n    plt.ylabel('True label')\n    plt.xlabel('Predicted label')","0fcc96b6":"cm = confusion_matrix(y_true=test_labels, y_pred=predictions.argmax(axis=1))","da1bb8ee":"test_batches.class_indices","e91e8244":"cm_plot_labels = ['0','1','2','3','4','5']\nplot_confusion_matrix(cm=cm, classes=cm_plot_labels, title='Confusion Matrix')","031fcb9a":"from sklearn.preprocessing import LabelEncoder\nle = LabelEncoder()\ny_readable = le.fit_transform(traindata['Y'])","2b555047":"fig, axes = plt.subplots(nrows=3, ncols=3, figsize=(15, 15),\n                        subplot_kw={'xticks': [], 'yticks': []})\n\n\ny_pred=predictions.argmax(axis=1)\n\nfor i, ax in enumerate(axes.flat):\n    ax.imshow(plt.imread(testdata.Filepath.iloc[i]), cmap='gray')\n    ax.set_title(f\"True: {testdata.Y.iloc[i]}\\nPredicted: {le.inverse_transform([y_pred[i]])[0]}\")\nplt.tight_layout()\nplt.show()","701ed2c0":"### <B> Transfer Learning","a6c95b1f":"### <B> Converting Images to a format accepted by Mobilenet","ebee0b5f":"# <B> Improting Necessary Libraries","9e921857":"# <B> Checking GPU Support","754eea72":"### <B> Creating test and train lists with all the filenames","89334c3f":"### <B> Making Predictions","18da309b":"### <B> Adding Corresponding label to the dataframes","5b75e0d1":"### <B> Fitting Model","e4ec5ad6":"# <B> Model","02a3efa8":"# <B> Testing","96a2cc87":"### <B> Downloading a prebuilt Mobilenet","6aa9e4f8":"### <B> Setting up train and test directories","41591337":"### <B> Setting up last 23 layers of Mobilenet as trainable","23111151":"# <B> Data Preprocessing","faea4e3d":"### <B> Removing last 6 layers of prebuilt mobilenet and adding out own output layer with 6 classes","242de31b":"### <B> Model Evaluation","f370c091":"### <B> Compiling Model","ccf2aeba":"### <B> Converting Lists to DataFrame","5ae5d00f":"### <B> Testing out displaying an image"}}