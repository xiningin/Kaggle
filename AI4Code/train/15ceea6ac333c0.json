{"cell_type":{"83d37249":"code","680a9c64":"code","f1137f83":"code","f968d96a":"code","b748bbe0":"code","703c9fe7":"code","cec62eb6":"code","9f680c4e":"code","28e407f1":"code","12ae624c":"code","7feefeb0":"code","bf76c557":"code","67ce5076":"code","693c5573":"code","5edbbc90":"code","a0120122":"code","50225e9a":"code","1611c5f6":"code","3ef181c1":"code","006b9f80":"code","f43b613e":"code","cdbaaaf8":"code","bfb0e021":"code","fe2aca9e":"code","37e664e9":"code","b937f98f":"code","ea17a371":"code","098b8a63":"code","0c5667dd":"code","c32a6596":"code","1aaef72a":"code","b79acdac":"code","0f8e020d":"code","b655ff27":"code","ff81e983":"code","070bb2c0":"markdown","dcb13442":"markdown","bd7c5c1f":"markdown","4d886b9e":"markdown","d29d3569":"markdown","01e030d9":"markdown","8c8e425d":"markdown","ebd1ff24":"markdown","6b0b4300":"markdown","383c37e9":"markdown"},"source":{"83d37249":"import pandas as pd\nimport numpy as np\nfrom sympy import *\nimport seaborn as sns\nimport matplotlib.pyplot as plt","680a9c64":"path = {'train': '\/kaggle\/input\/house-prices-advanced-regression-techniques\/train.csv', 'test':'\/kaggle\/input\/house-prices-advanced-regression-techniques\/train.csv'}\ndata = pd.read_csv(path['train'])\ntest_data = pd.read_csv(path['test'])","f1137f83":"data.SalePrice.describe()","f968d96a":"sns.boxplot(data.SalePrice.values)\nplt.title(\"\u0420\u0430\u0441\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0438\u0435 \u0446\u0435\u043b\u0435\u0432\u043e\u0439 \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u043e\u0439 - SalePrice\\n\", fontsize=15)\nplt.xlabel('\u0426\u0435\u043d\u0430')\nplt.ylabel(\"\u041a\u043e\u043b-\u0441\u0442\u0432\u043e\")\nplt.show();","b748bbe0":"gr_liv_area_data = pd.concat([data['SalePrice'], data['GrLivArea']], axis=1)\ngr_liv_area_data.plot.scatter(x='GrLivArea', y='SalePrice', ylim=(0,800_000))","703c9fe7":"total_bsmtSF = pd.concat([data.SalePrice, data.TotalBsmtSF], axis=1)\ntotal_bsmtSF.plot.scatter(x='TotalBsmtSF', y='SalePrice', ylim=(0,800_000))","cec62eb6":"overallQual = pd.concat([data.SalePrice, data.OverallQual], axis=1)","9f680c4e":"f, ax = plt.subplots(figsize=(14,8))\nfig = sns.boxplot(x=\"OverallQual\", y='SalePrice', data=overallQual)\nfig.axis(ymin=0, ymax=800_000)","28e407f1":"corrmat = data.corr()\nf, ax = plt.subplots(figsize=(12, 9))\nsns.heatmap(corrmat, vmax=.8, square=True);","12ae624c":"k = 9 #number of variables for heatmap\ncols = corrmat.nlargest(k, 'SalePrice')['SalePrice'].index\nf, ax = plt.subplots(figsize=(14, 10))\nsns.heatmap(data[cols].corr(), vmax=.8, square=True);","7feefeb0":"cols = ['SalePrice', 'OverallQual', 'GrLivArea', 'GarageCars']\nsns.pairplot(data[cols], size = 4);","bf76c557":"total = data.isnull().sum()\ntotal","67ce5076":"percent = (total\/ data.isnull().count()).sort_values(ascending=False)\npercent","693c5573":"missing_data = pd.concat([total.sort_values(ascending=False), percent], axis=1, keys=['Total', 'Percent'])\nmissing_data.head(20)","5edbbc90":"x = data['GrLivArea']\n\ny = data['SalePrice']","a0120122":"def feature_scaling(data):\n    data_ = (data - data.mean()) \/ data.std()\n    return np.c_[np.ones(data_.shape[0]), data_]","50225e9a":"x = feature_scaling(x)","1611c5f6":"x.shape ","3ef181c1":"class LinearRegression:\n    \n    \"\"\"\u0420\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f \u043b\u0438\u043d\u0435\u0439\u043d\u043e\u0439 \u0440\u0435\u0433\u0440\u0435\u0441\u0441\u0438\u0438\"\"\"\n    \n    def predict(self, X):\n        return np.dot(X, self._W)\n\n    \n    def loss(self, y_prediction, y):\n        return sum((y_prediction - y)**2) \/ len(y)\n   \n\n    def _step_gradient_descent(self, X, y, prediction, step_learn):\n        error = prediction - y\n        self._W -= step_learn * 2 * np.dot(X.T, error) \/ len(X)\n\n        \n    def fit(self, X, y, iterations = 100_000, step_learn = .01):\n        self._W = np.zeros(X.shape[1])\n        self._cost_history = []\n        self._w_history = [self._W]\n        \n        for i in range(iterations):\n            \n            prediction = self.predict(X)\n            cost = self.loss(prediction, y)\n            self._cost_history.append(cost)\n            self._step_gradient_descent(X, y, prediction, step_learn)\n            self._w_history.append(self._W.copy())\n        return \"=> \u041e\u0431\u0443\u0447\u0435\u043d\u0438\u0435 \u043f\u0440\u043e\u0448\u043b\u043e \u0443\u0441\u043f\u0435\u0448\u043d\u043e <=\"    ","006b9f80":"simple_regression = LinearRegression()\nsimple_regression.fit(x, y , iterations=2000, step_learn=0.01)","f43b613e":"simple_regression._W","cdbaaaf8":"plt.title('Cost Function J')\nplt.xlabel('No. of iterations')\nplt.ylabel('Cost')\nplt.plot(simple_regression._cost_history)\nplt.show()","bfb0e021":"simple_regression._cost_history[0]","fe2aca9e":"simple_regression.predict([x[0]]) - data.SalePrice[0]","37e664e9":"x_m = data[['OverallQual', 'GrLivArea', 'GarageCars']]\nx_m = feature_scaling(x_m)","b937f98f":"multivariable_regression = LinearRegression()\nmultivariable_regression.fit(x_m, y, iterations=2000, step_learn=0.01)","ea17a371":"multivariable_regression._W","098b8a63":"plt.title('Cost Function J')\nplt.xlabel('No. of iterations')\nplt.ylabel('Cost')\nplt.plot(multivariable_regression._cost_history)\nplt.show()","0c5667dd":"multivariable_regression._cost_history[-1]","c32a6596":"simple_regression._cost_history[-1]","1aaef72a":"test_simple = test_data['GrLivArea']\ntest_multi =  test_data[['OverallQual', 'GrLivArea', 'GarageCars']]\ntest_simple = feature_scaling(test_simple)\ntest_multi = feature_scaling(test_multi)","b79acdac":"predictions_simple = simple_regression.predict(test_simple)\npredictions_simple","0f8e020d":"predictions_multi = multivariable_regression.predict(test_multi)\npredictions_multi","b655ff27":"def save(feature, result:pd.DataFrame, name:np.ndarray) -> None:\n    output_multi = pd.DataFrame({'Id': feature.Id, 'SalePrice': result})\n    output_multi.to_csv(f'{name}_submission.csv', index=False)\n    print(\"=> Your submission was successfully saved! <=\")","ff81e983":"save(test_data, predictions_simple, 'Simple_regression')\nsave(test_data, predictions_multi, 'Multi_regression')","070bb2c0":"# \u0420\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f \u0440\u0435\u0433\u0440\u0435\u0441\u0441\u0438\u0438","dcb13442":"# \u041e\u0446\u0435\u043d\u043a\u0430 \u043d\u0435\u0432\u0430\u043b\u0438\u0434\u043d\u044b\u0445 \u0434\u0430\u043d\u043d\u044b\u0445","bd7c5c1f":"# \u0418\u0441\u043b\u0435\u0434\u043e\u0432\u0430\u043d\u0438\u0435 \u0434\u0430\u043d\u043d\u044b\u0445","4d886b9e":"#  \u0417\u0430\u0433\u0440\u0443\u0437\u043a\u0430 \u0434\u0430\u043d\u043d\u044b\u0445","d29d3569":"# Feature scaling\n\nWe will do a little preprocessing to our data using the following formula (standardization):\n\n$$x'= \\frac{x - \\mu}{\\sigma}$$\n\u0413\u0434\u0435 \u00b5 - \u0441\u0440\u0435\u0434\u043d\u0435\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435 \u043f\u043e \u0441\u043e\u0432\u043e\u043a\u0443\u043f\u043d\u043e\u0441\u0442\u0438, \u0430 \u03c3 - \u0441\u0442\u0430\u043d\u0434\u0430\u0440\u0442\u043d\u043e\u0435 \u043e\u0442\u043a\u043b\u043e\u043d\u0435\u043d\u0438\u0435.","01e030d9":"# \u0421\u043e\u0445\u0440\u0430\u043d\u0435\u043d\u0438\u0435 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u043e\u0432","8c8e425d":"# \u0412\u0438\u0437\u0443\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f \u0444\u0443\u043d\u043a\u0446\u0438\u0438 \u043f\u043e\u0442\u0435\u0440\u044c \u0432 \u0437\u0430\u0432\u0438\u0441\u0438\u043c\u043e\u0441\u0442\u0438 \u043e\u0442 \u0438\u0442\u0435\u0440\u0430\u0446\u0438\u0438","ebd1ff24":"$$Y = bX + a$$\n\n![](https:\/\/spss-tutorials.com\/img\/simple-linear-regression-equation-linear-relation.png)\n","6b0b4300":"# \u041f\u0440\u043e\u0432\u0435\u0440\u043a\u0430 \u043c\u043e\u0434\u0435\u043b\u0438 \u043d\u0430 \u0442\u0435\u0441\u0442\u043e\u0432\u044b\u0445 \u0434\u0430\u043d\u043d\u044b\u0445","383c37e9":"# \u041c\u043d\u043e\u0433\u043e\u043c\u0435\u0440\u043d\u0430\u044f \u043b\u0438\u043d\u0435\u0439\u043d\u0430\u044f \u0440\u0435\u0433\u0440\u0435\u0441\u0441\u0438\u044f"}}