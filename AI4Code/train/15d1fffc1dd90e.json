{"cell_type":{"309f1268":"code","fc814ee4":"code","c679a9db":"code","17fb447c":"code","c032334b":"code","35318b95":"code","00e95b60":"code","1aaf2a62":"code","1a138c39":"code","5ff5e96f":"code","001a1bd7":"code","01e52de8":"code","0cb4d480":"code","fad1ca65":"code","81b88f33":"code","8186af36":"code","5990b543":"code","2bc72516":"code","b0590316":"code","c16db77d":"code","f78fea16":"code","654d3826":"code","3624c766":"code","1b299a55":"code","eaa90739":"code","a5c121e6":"code","b32458bc":"code","ddd4cf3f":"code","d6a7bc70":"code","738759ce":"code","4ebf8a35":"code","63bb965c":"code","caff3498":"code","e293be2b":"code","752bc79e":"code","104599c3":"code","c91442e5":"code","4e537edd":"code","6226b302":"code","50708c81":"code","72eb2a54":"code","c93e8e39":"code","e113b65e":"code","58cf7e08":"code","90e1477e":"code","a9aa8074":"code","b5212758":"markdown","128ea22c":"markdown","d2d6b920":"markdown","388497cf":"markdown","1fad009b":"markdown","3865d9ea":"markdown","3d15b8e2":"markdown","84f75a8d":"markdown","315e3931":"markdown","f436358f":"markdown","a03bd3a5":"markdown","237b0f48":"markdown","b2fb4e92":"markdown","9290c03b":"markdown","8a193d85":"markdown","8d24c217":"markdown","4bb2a4c7":"markdown","e8196e9c":"markdown","afb9677f":"markdown","60c30df4":"markdown","1d09d6b5":"markdown","48865622":"markdown","e5d87cf5":"markdown","1a38727c":"markdown","078bd2a3":"markdown","d12a5d0a":"markdown","8e12b3eb":"markdown","c617c998":"markdown","4579f797":"markdown","fe115a82":"markdown"},"source":{"309f1268":"import numpy as np\nimport pandas as pd \nimport matplotlib.pyplot as plt\nimport seaborn as sns","fc814ee4":"train = pd.read_excel('..\/input\/flight-fare-prediction-mh\/Data_Train.xlsx', sheet_name='Sheet1')\ntest = pd.read_excel('..\/input\/flight-fare-prediction-mh\/Test_set.xlsx', sheet_name='Sheet1')","c679a9db":"train.head()","17fb447c":"test.head()","c032334b":"train.info()","35318b95":"train.dropna(inplace=True)","00e95b60":"train.isnull().sum()","1aaf2a62":"weekday = [0,1,2,3,4]","1a138c39":"# Date of Journey\n\ntrain['journey_day'] = pd.to_datetime(train['Date_of_Journey']).dt.day\ntrain['journey_month'] = pd.to_datetime(train['Date_of_Journey']).dt.month\ntrain['is_weekend'] = pd.to_datetime(train['Date_of_Journey']).dt.dayofweek.map(lambda x: 1 if x not in weekday else 0)\n# train['is_quarter_start'] = pd.to_datetime(train['Date_of_Journey']).dt.is_quarter_start","5ff5e96f":"train.head()","001a1bd7":"# Departure Time\n\ntrain['dep_hour'] = pd.to_datetime(train['Dep_Time']).dt.hour\ntrain['dep_minute'] = pd.to_datetime(train['Dep_Time']).dt.minute","01e52de8":"# Arrival time\n\ntrain['arrival_hour'] = pd.to_datetime(train['Arrival_Time']).dt.hour\ntrain['arrival_minute'] = pd.to_datetime(train['Arrival_Time']).dt.minute","0cb4d480":"# Duration\n\nduration = list(train['Duration'])\n\nfor i in range(len(duration)):\n    if len(duration[i].split()) != 2:\n        if 'm' in duration[i]:\n            duration[i] = '0h' + duration[i]\n        else:\n            duration[i] = duration[i] + '0m'\n            \n    \nduration_hours = []\nduration_minutes = []\n\nfor i in range(len(duration)):\n    duration_hours.append(int(duration[i].split(sep = 'h')[0]))\n    duration_minutes.append(int(duration[i].split(sep = 'h')[1].split('m')[0]))\n    \ntrain['duration_hour'] = duration_hours\ntrain['duration_minute'] = duration_minutes","fad1ca65":"train.columns","81b88f33":"to_drop = ['Date_of_Journey', 'Dep_Time', 'Arrival_Time', 'Duration']\ntrain.drop(to_drop,axis=1,inplace=True)","8186af36":"train.head()","5990b543":"# Airline\n\ntrain['Airline'].value_counts()","2bc72516":"sns.catplot(x = 'Airline', y = 'Price' , data = train.sort_values(by = 'Price' , ascending=False), height=6, aspect=3, kind='bar');","b0590316":"# OHE the Airline data\n\nairline = train[['Airline']]\nairline = pd.get_dummies(airline, drop_first=True)\nairline.head()","c16db77d":"sns.catplot(x = 'Source', y = 'Price' , data = train.sort_values(by = 'Source' , ascending=False), height=6, aspect=3, kind='boxen');","f78fea16":"sns.catplot(x = 'Destination', y = 'Price' , data = train.sort_values(by = 'Source' , ascending=False), height=6, aspect=3, kind='boxen');","654d3826":"source = train['Source']\ndestination = train['Destination']\n\nsource = pd.get_dummies(source, drop_first=True)\ndestination = pd.get_dummies(destination, drop_first=True)","3624c766":"train['Route'].head()","1b299a55":"train['Additional_Info'].value_counts()","eaa90739":"train.drop(['Route', 'Additional_Info'], axis=1, inplace=True)","a5c121e6":"sns.catplot(x = 'Total_Stops', y = 'Price',data=train.sort_values('Price',ascending=True), kind='bar', height=6, aspect=3)","b32458bc":"train['Total_Stops'].replace({'non-stop' : 0,\n               '1 stop' : 1,\n               '2 stops' : 2,\n               '3 stops' : 3,\n               '4 stops' : 4\n              }, inplace = True)","ddd4cf3f":"train_df = pd.concat([train, airline, source, destination], axis=1)","d6a7bc70":"train_df.head()","738759ce":"train_df.drop(['Airline', 'Source', 'Destination'], axis=1, inplace=True)","4ebf8a35":"train_df.shape","63bb965c":"test.head()","caff3498":"test.isnull().sum()","e293be2b":"print('TEST DATA PREPROCESSING\\n')\nprint('\\n')\nprint(f\"Shape before preprocessing {test.shape}\")\nprint('\\n')\n# Journey Date\ntest['journey_day'] = pd.to_datetime(test['Date_of_Journey']).dt.day\ntest['journey_month'] = pd.to_datetime(test['Date_of_Journey']).dt.month\ntest['is_weekend'] = pd.to_datetime(test['Date_of_Journey']).dt.dayofweek.map(lambda x: 1 if x not in weekday else 0)\n# test['is_quarter_start'] = pd.to_datetime(test['Date_of_Journey']).dt.is_quarter_start\n\n#Dep_Time\ntest['dep_hour'] = pd.to_datetime(test['Dep_Time']).dt.hour\ntest['dep_minute'] = pd.to_datetime(test['Dep_Time']).dt.minute\n\n#Arrival Time\ntest['arrival_hour'] = pd.to_datetime(test['Arrival_Time']).dt.hour\ntest['arrival_minute'] = pd.to_datetime(test['Arrival_Time']).dt.minute\n\n# Duration\n\nduration = list(test['Duration'])\nduration_hours = []\nduration_minutes = []\n\nfor i in range(len(duration)):\n    if len(duration[i].split()) != 2:    # Check if duration contains only hour or mins\n        if \"h\" in duration[i]:\n            duration[i] = duration[i].strip() + \" 0m\"   # Adds 0 minute\n        else:\n            duration[i] = \"0h \" + duration[i] # Adds 0 hour\n\nfor i in range(len(duration)):\n    duration_hours.append(int(duration[i].split('h')[0]))\n    duration_minutes.append(int(duration[i].split('h')[1].split('m')[0]))\n\ntest['duration_hour'] = duration_hours\ntest['duration_minute'] = duration_minutes\n\n#Dropping some columns\n\ntest.drop(['Date_of_Journey', 'Dep_Time', 'Arrival_Time', 'Duration'], axis = 1, inplace = True)\n\n# Handling Categorical Data\n## Airline \nprint(test['Airline'].value_counts())\nprint('\\n')\nairline = pd.get_dummies(test['Airline'], drop_first=True)\n\n## source\nprint(test['Source'].value_counts())\nprint('\\n')\nsource = pd.get_dummies(test['Source'], drop_first = True)\n\n## Destination\nprint(test['Destination'].value_counts())\nprint('\\n')\ndestination = pd.get_dummies(test['Destination'], drop_first=True)\n\n# Dropping Additional_info and route\ntest.drop(['Additional_Info', 'Route'], axis=1, inplace = True)\n\n## Replacing Total_Stops\ntest['Total_Stops'].replace({\"non-stop\": 0, \"1 stop\": 1, \"2 stops\": 2, \"3 stops\": 3, \"4 stops\": 4}, inplace = True)\n\n# concatinating all the data\ntest_df = pd.concat([test, airline, source, destination], axis=1)\n\ntest_df.drop(['Airline', 'Source', 'Destination'], axis=1, inplace= True)\nprint('\\n')\nprint(f'Test data shape after preprocessing {test_df.shape}')","752bc79e":"test_df.shape","104599c3":"test_df.columns,train_df.columns","c91442e5":"X = train_df.drop('Price', axis=1)\ny = train_df['Price']","4e537edd":"X.shape","6226b302":"plt.figure(figsize=(15,15))\nsns.heatmap(train.corr(), annot=True)","50708c81":"from sklearn.ensemble import ExtraTreesRegressor\n\nmodel_extra = ExtraTreesRegressor()\nmodel_extra.fit(X, y)","72eb2a54":"plt.figure(figsize=(15,10))\nfeat_imp = pd.Series(model_extra.feature_importances_, index=X.columns)\nfeat_imp.nlargest(20).plot(kind='barh');","c93e8e39":"from sklearn.model_selection import train_test_split, KFold\nfrom sklearn.metrics import mean_squared_error, mean_absolute_error\nfrom sklearn.ensemble import RandomForestRegressor","e113b65e":"X_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.2, shuffle = True)","58cf7e08":"model_rf = RandomForestRegressor(n_estimators = 700,\n min_samples_split = 15,\n min_samples_leaf =  1,\n max_features = 'auto',\n max_depth = 20)\n\nmodel_rf.fit(X_train, y_train)","90e1477e":"y_pred = model_rf.predict(X_test)\nnp.sqrt(mean_squared_error(y_test, y_pred))","a9aa8074":"plt.figure(figsize = (8,8))\nsns.distplot(y_test-y_pred)\nplt.show();","b5212758":"<a id=\"preprocessing\"><\/a>\n## Preprocessing","128ea22c":"<a id=\"feat_imp_extra\"><\/a>\n## Feature_importance using ExtraTreesRegressor","d2d6b920":"<a id=\"test\"><\/a>\n# Test set","388497cf":"<a id = \"Basic_EDA\"><\/a>\n# Basic EDA","1fad009b":"<a id=\"randomforestregressor\"><\/a>\n## RandomForestRegressor","3865d9ea":"<a id=\"feature_selection\"><\/a>\n# Feature Selection","3d15b8e2":"We can see that date of journey is an object Datatype extracting features from that","84f75a8d":"Finding out the best feature which will contribute and have good relation with target variable. Following are some of the feature selection methods,\n\n1. **heatmap**\n2. **feature_importance_**\n3. **SelectKBest**","315e3931":"Steps to do: \n\n1. From `Date_of_Journey` add the `journey_day`, `journey_month`, `is_weekend`, `is_quarter_start`\n2. From `Dep_Time` add `dep_hour` and `dep_minute`\n3. From `Arrival_Time` add `arrival_hour`, `arrival_minute`\n4. From `Duration` get the `duration_hour` , `duration_minute`\n5. Drop `Date_of_Journey`, `Dep_Time`, `Arrival_Time`, `Duration`\n6. Handling categorical data\n    - 6.1 nominal encoding - `Airline`, `Source`, `Destination`\n    - 6.2 ordinal_encoding - `Total_Stops`\n7. Drop `Route` and `Additional_Info`\n8. Drop `Airline`, `Source`, `Destination`","f436358f":"<a id=\"route_additionalinfo\"><\/a>\n## Route & Additional info","a03bd3a5":"<a id=\"model_building\"><\/a>\n# Model Building","237b0f48":"<a id=\"total_stops\"><\/a>\n## Total stops","b2fb4e92":"**Next update :** Improving the Predictive model and deploying WebApp to predict the flight fare will be done and link will be updated here","9290c03b":"**Since there is another column which contains total stops the flight had this cloumn is not useful for us**","8a193d85":"**Above are the important features used by the model to predict the flight fare**","8d24c217":"<a id=\"import\"> <\/a>\n\n# Importing Libraries","4bb2a4c7":"**As you can see that the `Additional_Info` column contains most of the value as No info which is not useful for us so we are droppping that also**","e8196e9c":"**As we have extracted the necessary data from all the columns delete the unwanted columns**","afb9677f":"# Please do upvote if you find it useful","60c30df4":"<a id=\"cat_data\"><\/a>\n# Handling Categorical Data\n","1d09d6b5":"<a id=\"Data_cleaning\"><\/a>\n\n# Data cleaning and Feature Extraction","48865622":"One can find many ways to handle categorical data. Some of them are,\n\n1. **Nominal data** --> data are not in any order --> **OneHotEncoder** is used in this case\n2. **Ordinal data** --> data are in order --> **LabelEncoder** is used in this case","e5d87cf5":"# Flight Fare Prediction\n\n1. [Importing Libraries](#import)\n2. [Basic EDA](#Basic_EDA)\n3. [Data_Cleaning & Feature Extraction](#Data_cleaning)\n4. [Handling Categorical Data](#cat_data)\n    * [Airline](#airline)\n    * [Source & Destination](#source_destination)\n    * [Route & Additional_Info](#route_additionalinfo)\n    * [Total_Stops](#total_stops)\n5. [Test data](#test)\n    * [Preprocessing](#preprocessing)\n6. [Feature Selection](#feature_selection)\n    * [Feature Importance using ExtraTreeRegressor](#feat_imp_extra)\n7. [Model Building](#model_building)\n    * [RandomForestRegressor](#randomforestregressor)\n\n\n![Flight ticket](https:\/\/www.trusttravelandtours.com\/wp-content\/uploads\/2017\/12\/Untitled-design-7.jpg)","1a38727c":"<a id=\"source_destination\"><\/a>\n## Source & Destination","078bd2a3":"<a id=\"airline\"><\/a>\n## Airline","d12a5d0a":"Arrival time is when the plane pulls up to the gate.\nSimilar to Date_of_Journey we can extract values from Arrival_Time","8e12b3eb":"**From the above chart we can clearly see that when the number of stop increases the ticket price also increases**\n\n**So we have to encode it as a ordinal encoding technique**","c617c998":"Hyderabad is not present in source column only in destination it presents","4579f797":"**Here we have to follow all the preprocessing steps that has been done in the training data**\n\nI know you are thinking that this can be done by combining both dataset in the first step and performing all the preprocessing steps... this can be effective for kaggle competitions but here if we did like that then **Data Leakage** occurs which make your model worse.","fe115a82":"There is only one column which is integer type that is price and it is the target variable that we have to predict"}}