{"cell_type":{"b8a79124":"code","a8e05430":"code","e9fea8da":"code","e29fc3a1":"code","4ac46749":"code","edde1ad5":"code","ba50b8b9":"code","2d5d4a4d":"code","b129fd38":"code","c4e28629":"code","53029894":"code","dbc71411":"code","a7cde232":"code","e642d8c7":"code","2f247b71":"code","3d8f2903":"code","d72b9a12":"code","46542021":"code","51ff4438":"code","08d89819":"code","82666f21":"code","19eb00e4":"code","3eaefef6":"code","07d86de9":"code","3133d5a7":"code","8fefed14":"code","b6ae8335":"code","9edb069c":"code","cd92a702":"code","65e7bd0c":"code","67399a2f":"code","90bbbe29":"code","e4546b1d":"code","c8c4ef0e":"code","033c6f7f":"code","d37c3fa4":"code","e11bdffa":"code","287893da":"code","61ee49b7":"code","8655e30f":"code","da9945ea":"code","282fe509":"markdown","d4a0c1bd":"markdown","5fb4cbb2":"markdown","ab233498":"markdown","184395e0":"markdown","dd5762fc":"markdown","fcb6ebdd":"markdown","d8b811d5":"markdown","240d955a":"markdown","6b80d452":"markdown","ff6c25ec":"markdown","09485275":"markdown","7b3b76d0":"markdown","fe54e37e":"markdown","5fb84f63":"markdown","084bf9bb":"markdown"},"source":{"b8a79124":"#loading_all libraries\nfrom sklearn.metrics import make_scorer, accuracy_score\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.model_selection import GridSearchCV\nfrom sklearn.metrics import confusion_matrix\nfrom sklearn.metrics import accuracy_score\nfrom sklearn import preprocessing\nimport matplotlib.pylab as pylab\nimport matplotlib.pyplot as plt\nfrom pandas import get_dummies\nimport matplotlib as mpl\nfrom scipy import stats\nimport xgboost as xgb\nimport seaborn as sns\nimport pandas as pd\nimport numpy as np\nimport matplotlib\nimport warnings\nimport sklearn\nimport scipy\nimport numpy\nimport json\nimport csv\nimport os","a8e05430":"warnings.filterwarnings('ignore')\n%matplotlib inline","e9fea8da":"import os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))","e29fc3a1":"df_train=pd.read_csv(\"\/kaggle\/input\/heart-disease-uci\/heart.csv\")","4ac46749":"df_train.head()","edde1ad5":"df_train.dtypes","ba50b8b9":"#function for missing data\ndef missing_data(df_train):\n    total = df_train.isnull().sum().sort_values(ascending=False)\n    percent = (df_train.isnull().sum()\/df_train.isnull().count()).sort_values(ascending=False)\n    missing_data = pd.concat([total, percent], axis=1, keys=['Total', 'Percent'])\n    return(missing_data.head(20))","2d5d4a4d":"missing_data(df_train)","b129fd38":"#correlation matrix\ncorrmat = df_train.corr()\nf, ax = plt.subplots(figsize=(10, 8))\nsns.heatmap(corrmat, vmax=.8, square=True);","c4e28629":"plt.figure(figsize=(25,20))\nsns.factorplot(data=df_train,x='target',y='age',hue='sex')","53029894":"plt.figure(figsize=(15,10))\nsns.relplot(x='trestbps', y='chol', data=df_train,\n            kind='line', hue='fbs', col='sex')","dbc71411":"plt.figure(figsize=(15,10))\nsns.catplot(x='cp',y='oldpeak',data=df_train,hue='target',height=5,aspect=3,kind='box')\nplt.title('boxplot')","a7cde232":"plt.figure(figsize=(15,15))\nsns.relplot(x='restecg', y='thalach', data=df_train,\n            kind='line')","e642d8c7":"plt.figure(figsize=(15,7))\nsns.countplot(x='slope',hue='sex',data=df_train,order=df_train['thal'].value_counts().sort_values().index);","2f247b71":"sns.set()\ncols = ['age','sex','cp','trestbps','chol','fbs','restecg','thalach','exang','oldpeak','slope','ca','thal','target']\nsns.pairplot(df_train[cols], size = 2.5)\nplt.show()","3d8f2903":"dependent_all=df_train['target']\nindependent_all=df_train.drop(['target'],axis=1)","d72b9a12":"x_train,x_test,y_train,y_test=train_test_split(independent_all,dependent_all,test_size=0.3,random_state=100)","46542021":"log =LogisticRegression()\nlog.fit(x_train,y_train)","51ff4438":"#model on train using all the independent values in df\nlog_prediction = log.predict(x_train)\nlog_score= accuracy_score(y_train,log_prediction)\nprint('Accuracy score on train set using Logistic Regression :',log_score)","08d89819":"from sklearn.metrics import confusion_matrix\nconfusion_matrix(y_train, log_prediction)\nfrom sklearn import metrics\nfpr, tpr, thresholds = metrics.roc_curve(y_train,log_prediction)\nprint(\"AUC on train using Logistic Regression :\",metrics.auc(fpr, tpr))\nfrom sklearn.metrics import average_precision_score\naverage_precision = average_precision_score(y_train, log_prediction)\n\nprint('Average precision-recall score: {0:0.2f}'.format(\n      average_precision))\nfrom sklearn.metrics import recall_score\nprint('recall_score on train set :',recall_score(y_train, log_prediction))\nfrom sklearn.metrics import f1_score\nprint('F1_sccore on train set :',f1_score(y_train, log_prediction))","82666f21":"#model on train using all the independent values in df\nlog_prediction = log.predict(x_test)\nlog_score= accuracy_score(y_test,log_prediction)\nprint('accuracy score on test using Logisitic Regression :',log_score)","19eb00e4":"confusion_matrix(y_test, log_prediction)\nfpr, tpr, thresholds = metrics.roc_curve(y_test,log_prediction)\nprint(\"AUC on test using Logistic Regression :\",metrics.auc(fpr, tpr))\naverage_precision = average_precision_score(y_test, log_prediction)\nprint('Average precision-recall score: {0:0.2f}'.format(\n      average_precision))\nprint('recall_score on test set :',recall_score(y_test, log_prediction))\nprint('F1_sccore on test set :',f1_score(y_test, log_prediction))","3eaefef6":"from sklearn.model_selection import cross_val_score\nlr = LogisticRegression()\nscores = cross_val_score(lr, x_train, y_train, cv=10, scoring = \"accuracy\")\nprint(\"Scores:\", scores)\nprint(\"Mean:\", scores.mean())\nprint(\"Standard Deviation:\", scores.std())","07d86de9":"xgboost = xgb.XGBClassifier(max_depth=3,n_estimators=300,learning_rate=0.001)","3133d5a7":"xgboost.fit(x_train,y_train)","8fefed14":"#XGBoost model on the train set\nXGB_prediction = xgboost.predict(x_train)\nXGB_score= accuracy_score(y_train,XGB_prediction)\nprint('accuracy score on train using XGBoost ',XGB_score)","b6ae8335":"from sklearn import metrics\nprint(confusion_matrix(y_train, XGB_prediction))\nfpr, tpr, thresholds = metrics.roc_curve(y_train,XGB_prediction)\nprint(\"AUC on train using XGBClassifiers:\",metrics.auc(fpr, tpr))\n\naverage_precision = average_precision_score(y_train, XGB_prediction)\n\nprint('Average precision-recall score: {0:0.2f}'.format(\n      average_precision))\nprint('recall_score on train set :',recall_score(y_train, XGB_prediction))\nprint('F1_sccore on train set :',f1_score(y_train, XGB_prediction))\n","9edb069c":"#XGBoost model on the test\nXGB_prediction = xgboost.predict(x_test)\nXGB_score= accuracy_score(y_test,XGB_prediction)\nprint('accuracy score on test using XGBoost :',XGB_score)","cd92a702":"from sklearn import metrics\nprint(confusion_matrix(y_test, XGB_prediction))\nfpr, tpr, thresholds = metrics.roc_curve(y_test,XGB_prediction)\nprint(\"AUC on test using XGBClassifiers:\",metrics.auc(fpr, tpr))\n\naverage_precision = average_precision_score(y_test, XGB_prediction)\n\nprint('Average precision-recall score: {0:0.2f}'.format(\n      average_precision))\nprint('recall_score on test set :',recall_score(y_test, XGB_prediction))\nprint('F1_sccore on test set :',f1_score(y_test, XGB_prediction))\n","65e7bd0c":"xg = xgb.XGBClassifier()\nscores = cross_val_score(xg, x_test, y_test, cv=5, scoring = \"accuracy\")\nprint(\"Scores:\", scores)\nprint(\"Mean:\", scores.mean())\nprint(\"Standard Deviation:\", scores.std())","67399a2f":"rfc2=RandomForestClassifier(n_estimators=100)\nrfc2.fit(x_train,y_train)","90bbbe29":"#model on train using all the independent values in df\nrfc_prediction = rfc2.predict(x_train)\nrfc_score= accuracy_score(y_train,rfc_prediction)\nprint('accuracy Score on train using RandomForest :',rfc_score)","e4546b1d":"from sklearn import metrics\nprint(confusion_matrix(y_train, rfc_prediction))\nfpr, tpr, thresholds = metrics.roc_curve(y_train,rfc_prediction)\nprint(\"AUC on train using RandomForest :\",metrics.auc(fpr, tpr))\n\naverage_precision = average_precision_score(y_train, rfc_prediction)\n\nprint('Average precision-recall score: {0:0.2f}'.format(\n      average_precision))\nprint('recall_score on train set :',recall_score(y_train, rfc_prediction))\nprint('F1_sccore on train set :',f1_score(y_train, rfc_prediction))\n","c8c4ef0e":"#model on test using all the indpendent values in df\nrfc_prediction = rfc2.predict(x_test)\nrfc_score= accuracy_score(y_test,rfc_prediction)\nprint('accuracy score on test using RandomForest ',rfc_score)","033c6f7f":"\nprint(confusion_matrix(y_test, rfc_prediction))\nfpr, tpr, thresholds = metrics.roc_curve(y_test,rfc_prediction)\nprint(\"AUC on test using RandomForest :\",metrics.auc(fpr, tpr))\n\naverage_precision = average_precision_score(y_test, rfc_prediction)\n\nprint('Average precision-recall score: {0:0.2f}'.format(\n      average_precision))\nprint('recall_score on test set :',recall_score(y_test, rfc_prediction))\nprint('F1_sccore on test set :',f1_score(y_test, rfc_prediction))\n","d37c3fa4":"lr = RandomForestClassifier(n_estimators=100)\nscores = cross_val_score(lr, x_train, y_train, cv=10, scoring = \"accuracy\")\nprint(\"Scores:\", scores)\nprint(\"Mean:\", scores.mean())\nprint(\"Standard Deviation:\", scores.std())","e11bdffa":"clf = RandomForestClassifier()\ngrid_values = {'max_features':['auto','sqrt','log2'],'max_depth':[None, 10, 5, 3, 1],\n              'min_samples_leaf':[1, 5, 10, 20, 50]}\ngrid_clf = GridSearchCV(clf, param_grid=grid_values, cv=10, scoring='accuracy')\ngrid_clf.fit(x_train, y_train)\n","287893da":"grid_clf.best_params_\n","61ee49b7":"clf = RandomForestClassifier().fit(x_train, y_train)","8655e30f":"y_pred = clf.predict(x_test)","da9945ea":"print('Training Accuracy :: ', accuracy_score(y_train, clf.predict(x_train)))\nprint('Test Accuracy :: ', accuracy_score(y_test, y_pred))","282fe509":"# Heart Diseases problem","d4a0c1bd":"# GridSearchCV [RandomForestClassifier]","5fb4cbb2":"## train test split","ab233498":"## Data Visulization","184395e0":"from all above caluculation we can conclude that xgboost algorithm is best this problem :)","dd5762fc":"## Conclusion","fcb6ebdd":"**Before we start:**\n\nIf you like my work, please upvote this kernel as it will keep me motivated to do more in the future and share the kernel with others so we can all benefit from it .","d8b811d5":"## Kfold cross validation","240d955a":"## Kfold cross validation ","6b80d452":"## Logistic regression","ff6c25ec":"## Loading libraries","09485275":"## Kfold cross validation","7b3b76d0":"## Random forest","fe54e37e":"## Xgboost ","5fb84f63":"## Loading dataset using pd.read_csv","084bf9bb":"## Correlation Matrix"}}