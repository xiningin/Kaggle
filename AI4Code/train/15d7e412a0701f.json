{"cell_type":{"ef09c79a":"code","e24a7318":"code","e1dc993e":"code","dd276d3b":"code","f346fd67":"code","d5d10ae3":"code","31f886e0":"code","5aeecbd6":"code","453bf506":"code","c1141b8d":"code","1b2981ec":"code","2a649e03":"code","158355b8":"code","6087d454":"code","6f940e5a":"code","eb1c932b":"code","6ad8eea4":"code","9324960e":"markdown"},"source":{"ef09c79a":"import os\nimport pandas as pd\nfrom datetime import datetime, timedelta\n\ntrain_df = pd.read_csv(\"\/kaggle\/input\/mlb-player-digital-engagement-forecasting\/train.csv\", nrows=500)\ntrain_df.head()","e24a7318":"players_df = pd.read_csv(\"\/kaggle\/input\/mlb-player-digital-engagement-forecasting\/players.csv\")\nplayers_df[\"position_and_birth_country\"] = players_df.apply(\n    lambda x: \"{0}_{1}\".format(x[\"birthCountry\"], x[\"primaryPositionName\"]), axis=1)\nplayers_df.head()","e1dc993e":"from datetime import datetime\n\ndef calc_debut_age(r):\n    try:\n        value = int((datetime.strptime(str(r[\"mlbDebutDate\"]), \"%Y-%m-%d\") - datetime.strptime(str(r[\"DOB\"]), \"%Y-%m-%d\")).days)\n    except Exception:\n        value = None\n        pass\n    return value\n\nplayers_df[\"debut_age_days\"] = players_df.apply(lambda x: calc_debut_age(x),axis=1)\n\ndebut_age_dic = dict(zip(players_df[\"playerId\"], players_df[\"debut_age_days\"]))\nprint(\"Created debut_age_dic\", len(debut_age_dic))","dd276d3b":"player_characteristics_category_dic = dict()\n\ncategory_headers = [\"birthCountry\", \"primaryPositionName\", \"position_and_birth_country\"]\n\nfor category_header in category_headers:\n    player_characteristics_category_dic[category_header] = dict(zip(players_df[\"playerId\"],\n                                                                    players_df[category_header]))\n    print(category_header, len(player_characteristics_category_dic[category_header]))","f346fd67":"from datetime import datetime, timedelta\n\nplayer_birthday_dic = dict(zip(players_df[\"playerId\"], players_df[\"DOB\"]))\nplayer_debut_dic = dict(zip(players_df[\"playerId\"], players_df[\"mlbDebutDate\"]))\n\nprint(\"player_debut_dic\", len(player_debut_dic))\nprint(\"player_birthday_dic\", len(player_birthday_dic))","d5d10ae3":"def build_age_dic(player_age_dic, key, reference_dic, min_time, max_time):\n    \n    print(\"Building age dic...\", key)\n\n    continue_loop = True\n    j = 0\n    data_added = 0\n\n    while continue_loop:\n\n        target_date = datetime.strptime(str(min_time), \"%Y%m%d\") + timedelta(days=j)\n        target_date_key = datetime.strftime(target_date, \"%Y%m%d\")\n\n        for player in reference_dic:\n\n            try:\n\n                baseline_day = datetime.strptime(str(reference_dic[player]), \"%Y-%m-%d\")\n                days_since_baseline_day = (target_date - baseline_day).days\n                \n                if days_since_baseline_day > 0:\n                    player_age_dic[(target_date_key, int(player), key)] = days_since_baseline_day\n                    data_added += 1\n                else:\n                    player_age_dic[(target_date_key, int(player), key)] = 0\n\n            except Exception as e:\n                #print(e)\n                player_age_dic[(target_date_key, int(player), key)] = None\n                pass\n\n        j += 1\n\n        if target_date_key == max_time:\n            continue_loop = False\n\n    print(\"Success, data_added\", key, data_added)\n    \n    return player_age_dic","31f886e0":"min_time = \"20170101\"\nmax_time = \"20220101\"\n\nplayer_age_dic = dict()\n\nplayer_age_dic = build_age_dic(player_age_dic,\n                               key=\"days_since_birthday\",\n                               reference_dic=player_birthday_dic,\n                               min_time=min_time,\n                               max_time=max_time)\n\nplayer_age_dic = build_age_dic(player_age_dic,\n                               key=\"days_since_debut\",\n                               reference_dic=player_debut_dic,\n                               min_time=min_time,\n                               max_time=max_time)","5aeecbd6":"awards_df = pd.read_csv(\"\/kaggle\/input\/mlb-player-digital-engagement-forecasting\/awards.csv\")\nawards_df[\"award_date_dateobj\"] = awards_df[\"awardDate\"].map(lambda x: datetime.strptime(x, \"%Y-%m-%d\"))\nawards_df.sort_values(by=\"awardDate\", ascending=True, inplace=True)\nawards_df.head()","453bf506":"from collections import defaultdict\n\nplayer_award_dic = defaultdict(list)\n\nfor i, row in awards_df.iterrows():\n    data = [row[\"award_date_dateobj\"], row[\"awardId\"]]\n    player_award_dic[row[\"playerId\"]].append(data)\n\nprint(\"Created player award dic\", len(player_award_dic))\n\nfor p in [q for q in player_award_dic][0:10]:\n    print(p, len(player_award_dic[p]))","c1141b8d":"# Helper function to unpack json found in daily data\ndef unpack_json(json_str):\n    return pd.DataFrame() if pd.isna(json_str) else pd.read_json(json_str)","1b2981ec":"def feature_engineering_prediction_df(input_df, input_sample_prediction_df, row_threshold):\n    \n    rows_processed = 0\n    \n    if input_sample_prediction_df.shape[0] > 0:\n        columns_to_check = [\"date\", \"date_playerId\", \"target1\", \"target2\", \"target2\", \"target3\", \"target4\"]\n        for column_to_check in columns_to_check:\n            assert column_to_check in input_sample_prediction_df.columns.values\n    \n    assert input_df.shape[0] > 0\n    \n    if input_sample_prediction_df.shape[0] == 0:\n        \n        assert \"nextDayPlayerEngagement\" in input_df.columns.values\n        assert \"date\" in input_df.columns.values\n        final_sample_prediction_df = pd.DataFrame()\n        \n        for i, row in input_df.iterrows():\n            \n            next_day_player_engagement_df = unpack_json(row[\"nextDayPlayerEngagement\"])\n            if final_sample_prediction_df.shape[0] == 0 and next_day_player_engagement_df.shape[0] > 0:\n                final_sample_prediction_df = next_day_player_engagement_df\n            else:\n                assert len(final_sample_prediction_df.columns.values) == len(next_day_player_engagement_df.columns.values)\n                intersection_set = set.intersection(set(final_sample_prediction_df.columns.values),\n                                                    set(next_day_player_engagement_df.columns.values))\n                assert len(intersection_set) == len(final_sample_prediction_df.columns.values)\n                assert len(intersection_set) == len(next_day_player_engagement_df.columns.values)\n                final_sample_prediction_df = final_sample_prediction_df.append(next_day_player_engagement_df)\n        \n            rows_processed += 1\n            \n            if row_threshold > 0 and rows_processed >= row_threshold:\n                break\n        \n        assert final_sample_prediction_df.shape[0] > 0\n        \n        final_sample_prediction_df[\"date\"] = final_sample_prediction_df[\"engagementMetricsDate\"].map(\n            lambda x: (datetime.strptime(x, \"%Y-%m-%d\") - timedelta(days=1)).strftime(\"%Y%m%d\"))\n        final_sample_prediction_df[\"date_playerId\"] = final_sample_prediction_df.apply(\n            lambda x: \"{0}_{1}\".format(datetime.strptime(x[\"engagementMetricsDate\"],\n                                                         \"%Y-%m-%d\").strftime(\"%Y%m%d\"),\n                                       x[\"playerId\"]), axis=1)\n        \n        final_headers = [\"date\", \"date_playerId\", \"target1\", \"target2\", \"target3\", \"target4\"]\n        final_sample_prediction_df = final_sample_prediction_df[final_headers].copy()\n        \n    else:\n        \n        final_sample_prediction_df = input_sample_prediction_df.copy()\n    \n    print(\"Feature engineering complete, rows processed = {}\".format(rows_processed))\n    \n    return final_sample_prediction_df","2a649e03":"final_sample_prediction_df = feature_engineering_prediction_df(input_df=train_df,\n                                                               input_sample_prediction_df=pd.DataFrame(),\n                                                               row_threshold=200)\nfinal_sample_prediction_df.head()","158355b8":"def add_feature_ages(df, player_age_dic):\n    \n    df[\"feature_days_since_dob\"] = df.apply(\n        lambda x: player_age_dic[(x[\"date\"],\n                                  x[\"playerId\"],\n                                  \"days_since_birthday\")] if (x[\"date\"],\n                                                              x[\"playerId\"],\n                                                              \"days_since_birthday\") in player_age_dic else None,\n        axis=1)\n    \n    df[\"feature_days_since_debut\"] = df.apply(\n        lambda x: player_age_dic[(x[\"date\"],\n                                  x[\"playerId\"],\n                                  \"days_since_debut\")] if (x[\"date\"],\n                                                           x[\"playerId\"],\n                                                           \"days_since_debut\") in player_age_dic else None,\n        axis=1)\n    \n    return df","6087d454":"def feature_engineering_model_df(input_prediction_df,\n                                 player_age_dic):\n    \n    print(\"input_prediction_df columns\", input_prediction_df.columns.values)\n    \n    assert input_prediction_df.shape[0] > 0\n    \n    if \"date\" not in input_prediction_df.columns.values:\n        assert \"date_playerId\" in input_prediction_df.columns.values\n        input_prediction_df[\"date\"] = input_prediction_df[\"date_playerId\"].map(\n            lambda x: (datetime.strptime(str(x).split(\"_\")[0], \"%Y%m%d\") - timedelta(days=1)).strftime(\"%Y%m%d\"))\n    \n    required_headers = [\"date\", \"date_playerId\", \"target1\", \"target2\", \"target3\", \"target4\"]\n    for required_header in required_headers:\n        assert required_header in input_prediction_df.columns.values\n    \n    final_model_df = input_prediction_df[required_headers].copy()\n    final_model_df[\"playerId\"] = final_model_df[\"date_playerId\"].map(lambda x: int(str(x).split(\"_\")[1]))\n    \n    final_model_df = add_feature_ages(final_model_df, player_age_dic)\n    \n    return final_model_df","6f940e5a":"final_model_df = feature_engineering_model_df(input_prediction_df=final_sample_prediction_df,\n                                              player_age_dic=player_age_dic)\n\nfinal_model_df.head()","eb1c932b":"# then we train the model...\n\nfrom lightgbm import LGBMRegressor\n\nmodel_dic = dict()\nfeature_header_dic = dict()\n\nfeature_headers = [f for f in final_model_df.columns.values if f.find(\"feature_\") != -1]\nassert len(feature_headers) > 0\n\nfor target_header in [\"target1\", \"target2\", \"target3\", \"target4\"]:\n    \n    print(\"Training model\", target_header)\n    clf = LGBMRegressor()\n    clf.fit(final_model_df[feature_headers], final_model_df[target_header])\n    model_dic[target_header] = clf\n    feature_header_dic[target_header] = feature_headers\n    del clf","6ad8eea4":"import mlb\nenv = mlb.make_env() # initialize the environment\niter_test = env.iter_test() # iterator which loops over each date in test set\n\nfor (test_df, sample_prediction_df) in iter_test:\n    \n    final_model_df = feature_engineering_model_df(input_prediction_df=sample_prediction_df,\n                                                  player_age_dic=player_age_dic)\n    \n    for target_header in [\"target1\", \"target2\", \"target3\", \"target4\"]:\n        feature_headers = feature_header_dic[target_header]\n        final_model_df[target_header] = model_dic[target_header].predict(final_model_df[feature_headers])\n        sample_prediction_df[target_header] = final_model_df[target_header].values\n    \n    final_headers = [\"date_playerId\", \"target1\", \"target2\", \"target3\", \"target4\"]\n    sample_prediction_df = sample_prediction_df[final_headers].copy()\n    \n    env.predict(sample_prediction_df)","9324960e":"**FEATURE ENGINEERING...**\n\ndictionaries we can use for feature engineering:\n- player_characteristics_category_dic\n- player_age_dic (days since birth, days since debut)\n- player_award_dic"}}