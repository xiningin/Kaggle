{"cell_type":{"d102c412":"code","5c828b0e":"code","cc8ffad4":"code","e862d351":"code","42292903":"code","ca835b10":"code","e554c315":"code","e6dea274":"code","9c1fcdea":"code","2d892e18":"code","d2e308a5":"code","2d40c794":"code","2e8ba228":"code","42f2aa68":"code","673df4e1":"code","ee23b080":"code","a4497afe":"code","798ec228":"code","2a26eb5b":"code","8f56667d":"code","bbdd993e":"code","edd8f0e0":"code","3a028abe":"code","519593f2":"code","6e0a1f8d":"code","2b722125":"code","621bdfd9":"code","b3ec2da9":"code","b65a1891":"markdown","310ae108":"markdown","bb335fc7":"markdown","67fe0d5a":"markdown","8d33d68c":"markdown","4c879ee5":"markdown","ef6f69f5":"markdown","72326936":"markdown","b3651bbd":"markdown","7b065034":"markdown","9b8a8fe9":"markdown"},"source":{"d102c412":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","5c828b0e":"data = pd.read_csv(\"..\/input\/credit-card-customers\/BankChurners.csv\")\ndata.drop(['CLIENTNUM',\n                 'Naive_Bayes_Classifier_Attrition_Flag_Card_Category_Contacts_Count_12_mon_Dependent_count_Education_Level_Months_Inactive_12_mon_2', \n                 'Naive_Bayes_Classifier_Attrition_Flag_Card_Category_Contacts_Count_12_mon_Dependent_count_Education_Level_Months_Inactive_12_mon_1'],\n                 axis =1, inplace = True)","cc8ffad4":"### Check the distribution of the target variable\n\n((data.Attrition_Flag.value_counts())\/data.shape[0])*100","e862d351":"## Check for null Value\nprint(data.isnull().sum())\ndata.info()","42292903":"y = data.Attrition_Flag\nX = data.drop('Attrition_Flag', axis = 1)","ca835b10":"X.Customer_Age.value_counts().plot(kind='barh')","e554c315":"object_columns = X.loc[:, X.dtypes == \"object\" ].columns\nfloat_columns = X.loc[:, X.dtypes != \"object\" ].columns","e6dea274":"X[float_columns]","9c1fcdea":"from statsmodels.stats.outliers_influence import variance_inflation_factor\n\ndef calc_vif(X):\n\n    # Calculating VIF\n    vif = pd.DataFrame()\n    vif[\"variables\"] = X.columns\n    vif[\"VIF\"] = [variance_inflation_factor(X.values, i) for i in range(X.shape[1])]\n\n    return(vif)","2d892e18":"vif = calc_vif(X[float_columns]).sort_values(by=['VIF'])\nvif","d2e308a5":"remove_column = vif.iloc[-5:,0].to_list()\nremove_column","2d40c794":"X = X.drop(remove_column, axis = 1)","2e8ba228":"print(X.shape, y.shape)","42f2aa68":"from sklearn.preprocessing import OneHotEncoder\n\nenc = OneHotEncoder(drop = 'first')\nenc.fit(X[object_columns])\nd = enc.transform(X[object_columns])","673df4e1":"enc.get_feature_names(object_columns)\nOHE = pd.DataFrame(d.todense())\nOHE.columns = enc.get_feature_names(object_columns)\nX = X.drop(object_columns, axis = 1)","ee23b080":"X_feature = pd.concat([X, OHE], axis=1)","a4497afe":"import category_encoders as ce\n\nencoder= ce.OrdinalEncoder(cols=['Attrition_Flag'],return_df=True,\n                           mapping=[{'col':'Attrition_Flag',\n'mapping':{'Existing Customer':0,'Attrited Customer':1}}])\n\ny = data.Attrition_Flag\n\ny_target = encoder.fit_transform(y)\n","798ec228":"print(y_target.shape, X_feature.shape)","2a26eb5b":"from sklearn.model_selection import train_test_split\nfrom sklearn.metrics import classification_report\nfrom xgboost import XGBClassifier\nfrom sklearn.metrics import accuracy_score\nfrom sklearn.metrics import confusion_matrix\nfrom sklearn.metrics import roc_auc_score\n# import packages for hyperparameters tuning\nfrom hyperopt import STATUS_OK, Trials, fmin, hp, tpe\n\n\nX_train, X_test, y_train, y_test = train_test_split(X_feature, y_target, test_size=0.20, random_state=42)\n\nxgb_model = XGBClassifier().fit(X_train, y_train)\n\n# predict\nxgb_y_predict = xgb_model.predict(X_test)\n\n# accuracy score\nxgb_score = accuracy_score(xgb_y_predict, y_test)\n\nprint('Accuracy score is:', xgb_score)\ntarget_names = ['class 0', 'class 1']\nprint(classification_report(xgb_y_predict, y_test, target_names=target_names))\nprint(confusion_matrix(xgb_y_predict, y_test))\nroc_auc_score(xgb_y_predict, y_test)","8f56667d":"from sklearn.model_selection import RandomizedSearchCV, GridSearchCV\n\nparams = {\n   \"learning_rate\" : [0.05, 0.10, 0.15, 0.20,0.25],\n    \"max_depth\" : [3,4,5,6,7,8,9,12, 15],\n    \"min_child_weight\" : [1,2,3,4,5,6,7],\n    \"gamma\" :[-0.5,0,0.5,1,1.5,2],\n    \"colsample_bytree\" : [0.3,0.5,0.7,0.8,1,1.2, 1.3]\n}","bbdd993e":"X_train, X_test, y_train, y_test = train_test_split(X_feature, y_target, test_size=0.20, random_state=42)\n\nxgb_model = XGBClassifier()\n\nrandom_search = RandomizedSearchCV(xgb_model, param_distributions = params, n_iter = 5, scoring =\"roc_auc\", n_jobs=-1, cv = 5, verbose = 3)\n\nrandom_search.fit(X_train, y_train)","edd8f0e0":"random_search.best_estimator_","3a028abe":"xgb = XGBClassifier(base_score=0.5, booster='gbtree', colsample_bylevel=1,\n              colsample_bynode=1, colsample_bytree=0.5, gamma=1, gpu_id=-1,\n              importance_type='gain', interaction_constraints='',\n              learning_rate=0.15, max_delta_step=0, max_depth=7,\n              min_child_weight=4,  monotone_constraints='()',\n              n_estimators=100, n_jobs=4, num_parallel_tree=1, random_state=0,\n              reg_alpha=0, reg_lambda=1, scale_pos_weight=1, subsample=1,\n              tree_method='exact', validate_parameters=1, verbosity=None)","519593f2":"xgb_model = xgb.fit(X_train, y_train)\n\n# predict\nxgb_y_predict = xgb_model.predict(X_test)\n\n# accuracy score\nxgb_score = accuracy_score(xgb_y_predict, y_test)\n\nprint('Accuracy score is:', xgb_score)\ntarget_names = ['class 0', 'class 1']\nprint(classification_report(xgb_y_predict, y_test, target_names=target_names))\nprint(confusion_matrix(xgb_y_predict, y_test))\nroc_auc_score(xgb_y_predict, y_test)","6e0a1f8d":"X_train, X_test, y_train, y_test = train_test_split(X_feature, y_target, test_size=0.20, random_state=42)\n\nfrom imblearn.over_sampling import RandomOverSampler\nfrom collections import Counter\nros = RandomOverSampler(random_state=42)\n\n# fit predictor and target \nvariablex_ros, y_ros = ros.fit_resample(X_train.to_numpy(), y_train.to_numpy())\n\nprint('Resample dataset shape', Counter(y_ros))","2b722125":"xgb_model = xgb.fit(variablex_ros, y_ros)\n\n# predict\nxgb_y_predict = xgb_model.predict(X_test.to_numpy())\n\n# accuracy score\nxgb_score = accuracy_score(xgb_y_predict, y_test.to_numpy().reshape(-1,))\n\nprint('Accuracy score is:', xgb_score)\ntarget_names = ['class 0', 'class 1']\nprint(classification_report(xgb_y_predict, y_test, target_names=target_names))\nprint(confusion_matrix(xgb_y_predict, y_test))\nprint(roc_auc_score(xgb_y_predict, y_test))","621bdfd9":"# X_train, X_test, y_train, y_test\n# import library\nfrom imblearn.over_sampling import SMOTE\n\nsmote = SMOTE()\n\n# fit predictor and target variable\nx_smote, y_smote = smote.fit_resample(X_train, y_train)\n\nprint('Original dataset shape', y_train.value_counts())\nprint('Resample dataset shape', y_smote.value_counts())","b3ec2da9":"xgb_model = xgb.fit(x_smote, y_smote)\n\n# predict\nxgb_y_predict = xgb_model.predict(X_test)\n\n# accuracy score\nxgb_score = accuracy_score(xgb_y_predict, y_test)\n\nprint('Accuracy score is:', xgb_score)\ntarget_names = ['class 0', 'class 1']\nprint(classification_report(xgb_y_predict, y_test, target_names=target_names))\nprint(confusion_matrix(xgb_y_predict, y_test))\nprint(roc_auc_score(xgb_y_predict, y_test))","b65a1891":"# Label Encoding for our target columns","310ae108":"# Imbalanced Data \nWhen observation in one class is higher than the observation in other classes then there exists a class imbalance. ","bb335fc7":"We can see here that the \u2018Avg_Open_To_Buy\u2019,'Total_Revolving_Bal', 'Credit_Limit', 'Customer_Age' and \u2018Months_on_book\u2019 have a high VIF value, meaning they can be predicted by other independent variables in the dataset. So we can drop that columns from our dataset.\n","67fe0d5a":"# Multicollinearity (VIF)\n\nAlthough correlation matrix and scatter plots can also be used to find multicollinearity, their findings only show the bivariate relationship between the independent variables. VIF is preferred as it can show the correlation of a variable with a group of other variables.\n\n\nMulticollinearity can be detected via various methods. In this article, we will focus on the most common one \u2013 VIF (Variable Inflation Factors)\n","8d33d68c":"# Let's go throgh the insight of DataFrame","4c879ee5":"## Hyperparameter tunning for Xgboost algorithm","ef6f69f5":"### Over sampling technique to solve the imbalance class ","72326936":"# Building Model and hyperparameter tunning (Xgboosting Algorithm)","b3651bbd":"# One Hot encoding for the object or categorical columns","7b065034":"### SMOTE technique to solve the imbalance class ","9b8a8fe9":"Creating a dataframe with all the data of onehot encoder and merging with our old dataframe"}}