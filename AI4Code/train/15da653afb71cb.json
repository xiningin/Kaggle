{"cell_type":{"01066022":"code","19b4d768":"code","793bf40a":"code","0124f7da":"code","c428a01f":"code","dea877ac":"code","fa3404a7":"code","7c26a374":"code","5b80d091":"code","514a389a":"code","2fdbf447":"code","4260c0bf":"code","02ab0646":"code","faed23f3":"code","8c7ea668":"markdown","19404c40":"markdown","29d3984b":"markdown","37e0fde9":"markdown","69076e0d":"markdown","4ec7146c":"markdown","c92a9bb9":"markdown"},"source":{"01066022":"import os\nfrom IPython.display import Image\nImage(filename=\"..\/input\/front-image\/Statisical-cash-forecasting-methods-1.png\", width= 1200, height=800)","19b4d768":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nfrom datetime import datetime, timedelta\nfrom tqdm import tqdm \n \n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","793bf40a":"# PyCaret might not be installed. Below commands would install PyCaret and import necessary regression models\n!pip install pycaret\nfrom pycaret.regression import *","0124f7da":"# Read Data\ndata = pd.read_csv('\/kaggle\/input\/retail-analysis-with-walmart-data\/Walmart_Store_sales.csv')","c428a01f":"# Data Properties\ndata.dtypes","dea877ac":"data.shape","fa3404a7":"data.isnull().sum()","7c26a374":"# Converting all columns to Upper Case \ndata.columns = [_c.upper() for _c in data.columns]","5b80d091":"# Converting datatype of Date to DateTime and creating a month column\ndata['DATE'] = pd.to_datetime(data['DATE'])\ndata.loc[:,'MONTH'] = data['DATE'].dt.month\n","514a389a":"data.head()","2fdbf447":"train_dict = {}\ntest_dict = {}\n\nunique_stores = list(data['STORE'].unique())\n\nfor i in unique_stores:\n    train_dict[i] = data.loc[data['STORE'] == i].copy()\n    train_dict[i].sort_values(by = 'DATE', inplace = True)\n    train_dict[i].reset_index(inplace = True, drop = True)\n    test_dict[i] = train_dict[i].iloc[-6:,:].copy()\n    train_dict[i] = train_dict[i].iloc[0:len(train_dict[i])-6,:]\n    test_dict[i].reset_index(inplace = True, drop = True)","4260c0bf":"# Executing PyCaret and Saving the output\noutput_dict = {}\nall_results = []\nfinal_model = {}\nfor i in tqdm(unique_stores):\n    \n    df_subset = train_dict[i]\n    \n    # initialize setup from pycaret.regression\n    s = setup(df_subset, target = 'WEEKLY_SALES', train_size = 0.95,\n              data_split_shuffle = False, fold_strategy = 'timeseries', fold = 3,\n              ignore_features = ['DATE', 'STORE'],\n              numeric_features = ['TEMPERATURE', 'FUEL_PRICE', 'CPI', 'UNEMPLOYMENT'],\n              categorical_features = ['MONTH', 'HOLIDAY_FLAG'],\n              silent = True, verbose = False, session_id = 123)\n    \n    # compare all models and select best one based on MAE\n    best_model = compare_models(sort = 'MAE', verbose=False)\n    \n    # capture the compare result grid and store best model in list\n    p = pull().iloc[0:1]\n    p['time_series'] = str(i)\n    all_results.append(p)\n    \n    # finalize model i.e. fit on entire data including test set\n    f = finalize_model(best_model)\n    \n    # attach final model to a dictionary\n    final_model[i] = f\n    \n    # Predict\n    score_df = test_dict[i].drop('WEEKLY_SALES', axis = 1)\n    p = predict_model(f, data=score_df)\n    test_dict[i].loc[:,'FORECASTED_SALES'] = p['Label']","02ab0646":"# Checking Models used for Each Store \nconcat_results = pd.concat(all_results,axis=0)\nconcat_results","faed23f3":"# Plotting Result of any Store 17 randomly\nimport plotly.express as px\ndf = test_dict[17][['DATE', 'WEEKLY_SALES', 'FORECASTED_SALES']]\nfig = px.line(df, x=\"DATE\", y=df.columns,\n              title='Weekly Sales')\nfig.update_xaxes(\n    dtick=\"M1\",\n    tickformat=\"%b\\n%Y\")\nfig.show()","8c7ea668":"#### Plotting","19404c40":"#### Check Different best performing models for each store","29d3984b":"#### This could be used as a baseline model to further check for trend, seasonality in the data and account for it","37e0fde9":"## *If found useful, please leave an Upvote* \ud83d\udc4d","69076e0d":"#### Setup PyCaret and Run Multiple Regression Models for each Store","4ec7146c":"#### Creating train and test data dictionaries","c92a9bb9":"#### Install PyCaret"}}