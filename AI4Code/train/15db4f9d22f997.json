{"cell_type":{"936ed26f":"code","4749566b":"code","2c537757":"code","ba3bbde1":"code","626225fb":"code","fb3a0bfb":"code","fce2b1b3":"code","5154afed":"code","39d75484":"code","7ea282d0":"code","97c9f51c":"code","30827fc4":"code","97231570":"code","b8f58fb2":"code","1ef188a3":"code","9f529a4b":"code","897895f5":"code","72512ab3":"code","99256d9e":"code","680cea03":"code","e34b402c":"code","3607877f":"code","53b52f71":"code","c659f98c":"code","802bb9db":"code","4c46f3de":"code","9612ea74":"code","65c6f5fe":"code","1b13d057":"code","24b0babd":"code","25933962":"code","65f7518e":"code","9f00dcae":"code","ce541d0d":"code","58405301":"code","4313c17c":"code","0aeb4a99":"code","32ca4604":"code","f84dea54":"code","23c951db":"code","b5e21798":"code","c281bc44":"code","a6d817fd":"code","9528344c":"code","650958f7":"code","dfb90b54":"code","a727c8a0":"code","f92d0ebb":"code","d5b583c3":"code","d516be5f":"code","b56a4ab9":"code","d92cd660":"code","06a8200d":"code","855185ff":"markdown","78a46a3d":"markdown","df564d62":"markdown","822926d2":"markdown","24cc62a1":"markdown","babf096e":"markdown","9562c7dc":"markdown","ecfac8c4":"markdown","926ae708":"markdown","5f8a0cb4":"markdown","626ce2c5":"markdown","1dcd29f2":"markdown","d3da02ce":"markdown","c657f42a":"markdown","75718bb9":"markdown","36d57746":"markdown","5535936c":"markdown","357fb008":"markdown","44f44495":"markdown","76066573":"markdown","06f0252b":"markdown","58200056":"markdown","18c50ae9":"markdown","68974438":"markdown","4370be21":"markdown","e61f4cb3":"markdown","b179c3c1":"markdown","17e0b402":"markdown","869abe41":"markdown","68d6bbed":"markdown","d3f7b4fa":"markdown","27263cc0":"markdown","551fce49":"markdown","72b5547d":"markdown","20063070":"markdown","883f6e49":"markdown","dab96a8f":"markdown","a62d5e4a":"markdown","5df9f9da":"markdown","dbc038cd":"markdown","5104806b":"markdown","a1eeb528":"markdown","719c2e90":"markdown"},"source":{"936ed26f":"pip install pycaret","4749566b":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport category_encoders as ce\nfrom pycaret.regression import *\nfrom sklearn.preprocessing import MinMaxScaler\nfrom sklearn.model_selection import train_test_split\nimport catboost as cb\nfrom sklearn.metrics import mean_squared_error,r2_score,mean_absolute_error","2c537757":"df = pd.read_csv(\"..\/input\/pizza-price-prediction\/pizza_v1.csv\")","ba3bbde1":"df","626225fb":"df.shape","fb3a0bfb":"df.isnull().sum()","fce2b1b3":"df.dtypes","5154afed":"plt.figure(figsize=(10,8))\nplt.pie(df['company'].value_counts(),autopct='%.1f',labels=df['company'].unique())\nplt.title('Companies Weigtage')\nplt.show()","39d75484":"sns.boxplot(x=\"topping\", y=\"diameter\", data=df)\nplt.xticks(rotation =90)\nplt.show()","7ea282d0":"sns.histplot(data=df, x=\"company\",hue='extra_sauce')","97c9f51c":"df_company=df.groupby('company').agg({'company':['count']})\nsns.kdeplot(df['company'].value_counts(), color='g', shade=True)","30827fc4":"# This function is to generate basic insigts from all columns before data cleaning\ndef give_insights(df,column):\n    print(\"Data Type: \",df[column].dtypes)\n    print(\"Value Counts:\\n\",df[column].value_counts())\n    plt.figure(figsize=(10,5))\n    print(\"Plotting the distribution\",plt.plot(df[column]))\n    \n    plt.show()","97231570":"# One hot encoding\ndef one_hot_encoding(df,col):\n    one_hot_encoder=ce.OneHotEncoder(cols=col,return_df=True,use_cat_names=True)\n    df_final = one_hot_encoder.fit_transform(df)\n    return df_final","b8f58fb2":"# Ordinal Encoding\ndef ordinal_encoding(df,col,mapping):\n    ordinal_encoder=ce.OrdinalEncoder(cols=col,return_df=True,mapping=[{'col':col,'mapping':mapping}])\n    df_final = ordinal_encoder.fit_transform(df)\n    return df_final","1ef188a3":"give_insights(df,\"company\")","9f529a4b":"# Cleaning Function for \"company\" column\ndef clean_company(df,column):\n    df = one_hot_encoding(df,column)\n    return df","897895f5":"# Applying the function\ndf = clean_company(df,\"company\")","72512ab3":"df.sample(5)","99256d9e":"give_insights(df,\"price_rupiah\")","680cea03":"# Cleaning Function for \"price_rupiah\" column\ndef clean_price_rupiah(df,column):\n    price = []\n    for item in df[column]:\n        price += [float(item.replace('Rp', '').replace(',', ''))]\n    df[column] = price\n    return df","e34b402c":"# Applying the function\ndf =  clean_price_rupiah(df,\"price_rupiah\")","3607877f":"df.sample(5)","53b52f71":"give_insights(df,\"diameter\")","c659f98c":"give_insights(df,\"topping\")","802bb9db":"# Cleaning Function for \"topping\" column\ndef clean_topping(df,column):\n    df = one_hot_encoding(df,column)\n    return df","4c46f3de":"# Applying the function\ndf = clean_company(df,\"topping\")","9612ea74":"df.sample(5)","65c6f5fe":"give_insights(df,\"variant\")","1b13d057":"# Cleaning Function for \"variant\" column\ndef clean_variant(df,column):\n    df = one_hot_encoding(df,column)\n    return df","24b0babd":"# Applying the function\ndf = clean_company(df,\"variant\")","25933962":"df.sample(5)","65f7518e":"give_insights(df,\"size\")","9f00dcae":"# Cleaning Function for \"size\" column\ndef clean_size(df,column,encoding):\n    df = ordinal_encoding(df,column,encoding)\n    return df","ce541d0d":"# Ordinal values\nencoding = {\"small\":1,\"medium\":2,\"reguler\":3,\"large\":4,\"XL\":5,\"jumbo\":6}\n# Applying the function\n\ndf = clean_size(df,\"size\",encoding)","58405301":"df.sample(5)","4313c17c":"give_insights(df,\"extra_sauce\")","0aeb4a99":"give_insights(df,\"extra_cheese\")","32ca4604":"# Cleaning Function for \"extra_sauce\" and \"extra_cheese\" columns\ndef clean_yes_no(df,column,encoding):\n    df = ordinal_encoding(df,column,encoding)\n    return df\n    ","f84dea54":"# Ordinal values\nencoding = {\"yes\":1,\"no\":0}\n\n# Applying the function\ndf = clean_yes_no(df,\"extra_sauce\",encoding)\ndf = clean_yes_no(df,\"extra_cheese\",encoding)","23c951db":"df.sample(5)","b5e21798":"df.dtypes","c281bc44":"# Splitting Dependent and Independent variable\nX = df.drop(\"price_rupiah\",axis = 1)\nY = df[\"price_rupiah\"]","a6d817fd":"# Splitting the dataset from training and validation\nX_train,X_test,Y_train,Y_test = train_test_split(X,Y,random_state = 27,test_size = 0.2)","9528344c":"# Initializing the Min Max Scaler objects\nX_scaler = MinMaxScaler()\nY_scaler = MinMaxScaler()","650958f7":"#Fitting and tranforimg the independent variables\nX_train = X_scaler.fit_transform(X_train)\nX_test = X_scaler.transform(np.array(X_test))\n\n#Fitting and tranforimg the dependent variables\nY_train = Y_scaler.fit_transform(np.array(Y_train).reshape(-1, 1))\nY_test = Y_scaler.transform(np.array(Y_test).reshape(-1,1))","dfb90b54":"experiment =setup(df,\"price_rupiah\",normalize = True)","a727c8a0":"compare_models()","f92d0ebb":"# Fitting our data into Catboost pool constructor\ntrain_dataset = cb.Pool(X_train, Y_train) \ntest_dataset = cb.Pool(X_test, Y_test)","d5b583c3":"# Initializing the catboost Model and loss function\nmodel = cb.CatBoostRegressor(loss_function=\"RMSE\")","d516be5f":"# Hyper parameter tuning\ngrid = {'iterations': [100, 150, 200],\n        'learning_rate': [0.03, 0.1],\n        'depth': [2, 4, 6, 8],\n        'l2_leaf_reg': [0.2, 0.5, 1, 3]}\nmodel.grid_search(grid, train_dataset)\n","b56a4ab9":"Y_pred = model.predict(X_test)","d92cd660":"rmse = (np.sqrt(mean_squared_error(Y_test, Y_pred)))\nr2 = r2_score(Y_test, Y_pred)\nmae = mean_absolute_error(Y_test, Y_pred)","06a8200d":"print(\"Testing performance\")\nprint(\"RMSE: {:.2f}\".format(rmse))\nprint(\"R2: {:.2f}\".format(r2))\nprint(\"MAE: {:.2f}\".format(mae))","855185ff":"### Now taking **company** column into consideration","78a46a3d":"## Data Visualization","df564d62":"#### Here, if we see 12 different toppings are available in our data.Most likely topping in our datatset are **chicken, mushrooms, mozzarella, smoked beef**\n#### Also we can notice that each topping are denoted as string. So we can perform one hot encode them and convert to boolean values.","822926d2":"### Now taking **topping** column into consideration","24cc62a1":"#### Here, in our problem statement \"price_rupiah\" is the dependent variable and this is continuous variable. It ranges from Rs.28,000 - Rs.2,48,000.\n#### Also we can notice that they have a prefix Rp which we have clean. So we can perform some replace functions and clean them accordingly","babf096e":"## Data Preprocessing\n","9562c7dc":"# Essential Functions\n##### These functions will help us to generate insights, ecoding the data, visualizing the data which will be more helpful in Data Preprocessing ","ecfac8c4":"## Data Scaling","926ae708":"### Now taking **price_rupiah** column into consideration","5f8a0cb4":"## Analysing Data\nPerforming Data Exploration","626ce2c5":"<center><img src=\"https:\/\/media.tenor.com\/images\/aa37ff519d18dc4b51b8a55fb36e27e7\/tenor.gif\"><\/img><\/center><br>\n<center><font size = 4 color = \"red\">Data Cleaning done successfully \u2728<\/font><\/center>","1dcd29f2":"## Evaluation Metrics","d3da02ce":"#### Here you can see that the values are converted to boolean (1 and 0)","c657f42a":"### Now taking **size** column into consideration","75718bb9":"#### Here, if we see 20 different variant pizzas are available in our data.Most likely variant in our datatset are **classic, crunchy, double_mix, new_york**\n#### Also we can notice that each variant are denoted as string. So we can perform one hot encode them and convert to boolean values.","36d57746":"## Model Selection","5535936c":"#### Here you can check new coloumns have been created for each topping and values are converted to boolean","357fb008":"### Thank You \ud83e\udd17\n### I hope you had a good time reading my notebook. Pls do support and comment! \ud83d\ude0e","44f44495":"#### Here, if we see five different companies are available in our data. Each  contribute to around 20-30 observations in our dataset.\n#### Also we can notice that they are denoted with alphabets. So we can perform one hot encode them and convert to boolean values.","76066573":"#### Here, \"diameter\" is already in float datatype. It ranges from 8cm - 22cm. So nothing to clean in this column","06f0252b":"### Predicting x_test with our trained model","58200056":"#### Now price column has been cleaned as we removed string characters from them","18c50ae9":"### Now taking \"extra_sauce\" and \"extra_cheese\" columns into consideration","68974438":"### Contents:\n<font size = 3.5 color = \"blue\">\n<li>Importing Packages<\/li>\n<li>Importing Data<\/li>\n<li>Analysing Data<\/li>\n<li>Data Visualization<\/li>\n<li>Essential Functions<\/li>\n<li>Data Preprocessing<\/li>\n<li>One Hot encoding<\/li>\n<li>Filling NA Values<\/li>\n<li>Data Upscaling<\/li>\n<li>Training Models<\/li>\n<li>Evaluation Metrics<\/li>","4370be21":"#### Here you can check new coloumns have been created for each variant and values are converted to boolean","e61f4cb3":"#### No null values \ud83d\ude00 ","b179c3c1":"#### Here, if we see 6 different size pizzas are available in our data.Most likely variant in our datatset are medium ones.\n#### Also we can notice that each variant are denoted as string. So we can perform ordinal encoding them and convert to ordered numerical values","17e0b402":"### Now taking **variant** column into consideration","869abe41":"## Importing Data\nImporting the dataset","68d6bbed":"#### Here we have only less data points for training and testing \ud83d\ude25","d3f7b4fa":"#### This chart tells us about the average diameter with respect to topping\n#### Chicken pizzas are more larger in size compared to all other toppings<br>","27263cc0":"#### Here all columns are in **object** datatype. So we need to perform some encoding techniques to convert them to numbers ","551fce49":"## Hurryay !!We got more $R^2$ value by tuning hyperparameters in CatBoost Model.\n<center><img src = \"https:\/\/c.tenor.com\/Nz_vlGMgXV0AAAAM\/done-congrats.gif\"><\/center>","72b5547d":"#### Here, We get high $R^2$ value (Coefficient of Determination) for CatBoostRegreesor. So we can choose the CatBoostRegreesor and work on hyperparameter tuning in it.\n#### A higher r-squared indicates a better fit for the model \ud83d\ude01","20063070":"## Model Building","883f6e49":"<center><h1 class=\"list-group-item list-group-item-success\">\ud83c\udf55 Pizza Price Prediction \ud83c\udf55<\/h1><\/center><br><br>\n<center><img src = \"https:\/\/media-cdn.tripadvisor.com\/media\/photo-s\/10\/aa\/89\/3a\/pizza.jpg\"><\/center>\n\n### Context\n\n<font size = 3.5 color = \"blue\">\nThis dataset designed to understand the factors that lead to increase\/ decrease in pizza prize.<br>\n<br>Independent Features : <br>\n<li>company <\/li>\n<li>diameter<\/li>\n<li>topping<\/li>\n<li>variant<\/li>\n<li>size<\/li>\n<li>extra_sauce<\/li>\n<li>extra_cheese<\/li><br>\n With these features you will predict the pizza prize, as well as interpreting affected factors on pizza price.\n\n\n\n","dab96a8f":"#### Here, in both the cases, the values are boolean with Yes and No and weightage of Yes is more in all cases\n#### Also we can notice that yes and no denoted with string. So we can perform ordinal encoding them and convert to boolean numerical  values\u00b6","a62d5e4a":"#### Here new coloumns have been created for each company and values are converted to boolean","5df9f9da":"## Train Test Split","dbc038cd":"### Now taking **diameter** column into consideration","5104806b":"\n<center><img src = \"https:\/\/assets.rbl.ms\/18339144\/origin.jpg\" width = 800><\/center><br>\n","a1eeb528":"#### Here, each pie represents differnt companies.All comapnies contribute equally in the dataset","719c2e90":"## Importing Packages\n<font size = 3>Importing all the packages in the first cell is always a good practice. <\/font>"}}