{"cell_type":{"546af399":"code","b745b694":"code","39d41f26":"code","fac3038b":"code","94dfef36":"code","4834a2b7":"code","c516486f":"code","eefdbcee":"code","a739739a":"code","1d194fdd":"code","948f3a9f":"code","0f84ab0b":"markdown","6d5d6b34":"markdown","176a21eb":"markdown","aecd1580":"markdown","fa6b4304":"markdown","9ac5f23a":"markdown"},"source":{"546af399":"import pandas as pd\nimport numpy as np\nfrom sklearn.model_selection import KFold\nfrom sklearn.multioutput import MultiOutputClassifier, MultiOutputRegressor\nfrom joblib import dump, load\nimport pickle\nfrom sklearn.preprocessing import LabelEncoder\nfrom sklearn.metrics import log_loss, brier_score_loss, precision_score, recall_score, f1_score, roc_auc_score\nfrom datetime import date\nfrom sklearn.pipeline import Pipeline\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.decomposition import PCA\n\n\nimport matplotlib.pyplot as plt\n\nfrom sklearn.calibration import CalibratedClassifierCV, calibration_curve\nfrom sklearn.model_selection import train_test_split\n\nfrom datetime import datetime\n\nfrom sklearn.linear_model import LogisticRegression","b745b694":"data_folder = '..\/input\/lish-moa\/'\noutput_folder = ''\n\n# fix the random seed \nxseed = 43\n\n# number of folds for cv\nnfolds = 5\n\n# number of components to retain from PCA decomposition\nnof_comp = 200\n\nmodel_name = 'ad' + str(nof_comp)","39d41f26":"xtrain = pd.read_csv(data_folder + 'train_features.csv')\nxtest = pd.read_csv(data_folder + 'test_features.csv')\nytrain = pd.read_csv(data_folder + 'train_targets_scored.csv')","fac3038b":"# due to small cardinality of all values, it's faster to handle categoricals that way,\n\n# cp_time\nxtrain['cp_time_24'] = (xtrain['cp_time'] == 24) + 0\nxtrain['cp_time_48'] = (xtrain['cp_time'] == 48) + 0\nxtest['cp_time_24'] = (xtest['cp_time'] == 24) + 0\nxtest['cp_time_48'] = (xtest['cp_time'] == 48) + 0\nxtrain.drop('cp_time', axis = 1, inplace = True)\nxtest.drop('cp_time', axis = 1, inplace = True)\n\n# cp_dose\nprint(set(xtrain['cp_dose']), set(xtest['cp_dose']) )\nxtrain['cp_dose_D1'] = (xtrain['cp_dose'] == 'D1') + 0\nxtest['cp_dose_D1'] = (xtest['cp_dose'] == 'D1') + 0\nxtrain.drop('cp_dose', axis = 1, inplace = True)\nxtest.drop('cp_dose', axis = 1, inplace = True)\n\n# cp_type\nxtrain['cp_type_control'] = (xtrain['cp_type'] == 'ctl_vehicle') + 0\nxtest['cp_type_control'] = (xtest['cp_type'] == 'ctl_vehicle') + 0\nxtrain.drop('cp_type', axis = 1, inplace = True)\nxtest.drop('cp_type', axis = 1, inplace = True)","94dfef36":"kf = KFold(n_splits = nfolds)\n\n# separation\nid_train = xtrain['sig_id']; id_test = xtest['sig_id']\nytrain.drop('sig_id', axis = 1, inplace = True) \nxtrain.drop('sig_id', axis = 1, inplace = True)\nxtest.drop('sig_id', axis = 1, inplace = True)\n\n# storage matrices for OOF \/ test predictions\nprval = np.zeros(ytrain.shape)\nprfull = np.zeros((xtest.shape[0], ytrain.shape[1]))","4834a2b7":"for (ff, (id0, id1)) in enumerate(kf.split(xtrain)):\n     \n    x0, x1 = xtrain.loc[id0], xtrain.loc[id1]\n    y0, y1 = np.array(ytrain.loc[id0]), np.array(ytrain.loc[id1])\n    \n    for ii in range(0, ytrain.shape[1]):\n        idx = np.where(y0[:,ii] == 0)[0]\n        xtr = np.array(x0)[idx,:]\n        pca = PCA()\n        pca.fit(xtr)\n        W1 = pca.components_[:, :nof_comp]\n\n        # prval\n        x1_proj = np.dot(x1, np.dot(W1, W1.T))\n        prval[id1,ii] = (x1 - x1_proj).std(axis = 1)\n\n        # prfull\n        x1_proj = np.dot(xtest, np.dot(W1, W1.T))\n        prfull[:,ii] += (xtest - x1_proj).std(axis = 1)\/nfolds\n        \n    print(datetime.now())\n    ","c516486f":"column_list = ytrain.columns\n\nprval_cal = np.zeros(ytrain.shape)\nprfull_cal = np.zeros((xtest.shape[0], ytrain.shape[1]))\n\n\n\nfor (ff, (id0, id1)) in enumerate(kf.split(xtrain)):\n     \n    for ii in range(0, ytrain.shape[1]):\n        \n        xname = column_list[ii]\n        \n        x0, x1 = prval[id0,ii], prval[id1,ii]\n        y0, y1 = np.array(ytrain)[id0,ii], np.array(ytrain)[id1,ii]\n       \n        if sum(y0) == 0:\n            y0[0] = 1\n            \n        basemodel = LogisticRegression(C = 10)        \n        basemodel.fit(x0.reshape(-1,1), y0)\n        prv = basemodel.predict_proba(x1.reshape(-1,1))[:,1]\n        prf = basemodel.predict_proba(np.array(prfull)[:,ii].reshape(-1,1))[:,1]\n        \n        prval_cal[id1, ii] = prv\n        prfull_cal[:, ii] += prf\/nfolds\n\n    print(ff)","eefdbcee":"# compare performance pre- and post- calibration\nmetrics1 = []\nmetrics2 = []\n\n\nfor ii in range(0,ytrain.shape[1]):\n    loss1 = log_loss(np.array(ytrain)[:, ii], prval[:, ii])\n    metrics1.append(loss1)\n    loss2 = log_loss(np.array(ytrain)[:, ii], prval_cal[:, ii])\n    metrics2.append(loss2)\n    \nprint('raw: ' + str(np.mean(metrics1)) )\nprint('cal: ' + str(np.mean(metrics2)))","a739739a":"prval_cal = pd.DataFrame(prval_cal)\nprfull_cal = pd.DataFrame(prfull_cal)\nprval_cal.columns = ytrain.columns\nprfull_cal.columns = ytrain.columns\n\nprval_cal['sig_id'] = id_train\nprfull_cal['sig_id'] = id_test","1d194fdd":"metrics = []\nfor _target in ytrain.columns:\n    metrics.append(log_loss(ytrain.loc[:, _target], prval_cal.loc[:, _target]))\nprint(f'OOF Metric: {np.round(np.mean(metrics),4)}')","948f3a9f":"xcols = list(ytrain.columns); xcols.insert(0, 'sig_id')\nprval_cal = prval_cal[xcols]; prfull_cal = prfull_cal[xcols]\n\n\ntodate = date.today().strftime(\"%d%m\")\nprint(todate)\n\n# files for combination\nprval_cal.to_csv(output_folder + 'prval_'+model_name+'_'+todate+'.csv', index = False)\nprfull_cal.to_csv(output_folder + 'prfull_'+model_name+'_'+todate+'.csv', index = False)\n# actual submission\nprfull_cal.to_csv(output_folder + 'submission.csv', index = False)","0f84ab0b":"# FE","6d5d6b34":"Crude implementation of section 6 from https:\/\/people.csail.mit.edu\/kalyan\/AI2_Paper.pdf","176a21eb":"# Eval and sub","aecd1580":"# Model","fa6b4304":"# Data","9ac5f23a":"# Postprocessing the probabilities"}}