{"cell_type":{"b31af929":"code","e9eabe52":"code","44455871":"code","9664d9d3":"code","e20a9053":"code","920d694a":"code","7df454cf":"code","81443296":"code","95d924f1":"code","d6e5a3bb":"code","df1c519b":"code","e72804d9":"code","37dd1b08":"code","8db0922b":"code","c08f9f85":"code","3bdc80d2":"code","4b4903ba":"code","3eb6bba8":"code","57c72182":"code","157d0a1d":"code","5fed270c":"code","6feb0e6e":"code","bf7feed0":"code","f3c3ea0a":"code","eb5fe1d7":"code","fcd4ec83":"code","8b049569":"code","6594afbd":"markdown","88d53922":"markdown","7dd356d9":"markdown","70727c45":"markdown","34d85ce5":"markdown","d1e4c69e":"markdown","25119644":"markdown","7eda101e":"markdown"},"source":{"b31af929":"# 1- (Raw Text) <<<<<  Reading and Exploring your Data\nimport pandas as pd\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nimport itertools\n# 2- (Tokenization) and (Text Cleaning) and (Vectorization)\nimport nltk\nfrom nltk.corpus import stopwords\nfrom nltk.stem.porter import PorterStemmer\nfrom nltk.tokenize import RegexpTokenizer\nfrom string import punctuation\n# 3- (ML Algorithm)\nfrom sklearn.model_selection import train_test_split\n# 4- (Transformer)\nfrom sklearn.feature_extraction.text import TfidfVectorizer, CountVectorizer\n# 5- Pipline Classifier\nfrom sklearn.pipeline import Pipeline\nfrom sklearn.linear_model import PassiveAggressiveClassifier, LogisticRegression\nfrom sklearn.naive_bayes import MultinomialNB, BernoulliNB\nfrom sklearn.model_selection import GridSearchCV\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.linear_model import RidgeClassifier\nfrom sklearn.linear_model import SGDClassifier\nfrom sklearn.linear_model import Perceptron\nfrom sklearn import svm\n# 6- (Evaluation)\nfrom sklearn.metrics import accuracy_score, confusion_matrix\nfrom sklearn.model_selection import cross_val_score","e9eabe52":"# Read the data\ndf = pd.read_csv('..\/input\/fake-news\/train.csv')","44455871":"# Rows and columns in the data\ndf.shape","9664d9d3":"# Take a glimpse of the data\ndf.head()","e20a9053":"# Get more information about the data\ndf.info()","920d694a":"# Check for missing data in each feature\/column\ndf.isna().sum()","7df454cf":"# Drop unrelated features first, then drop missing data\ndf = df.drop(columns=['title', 'author']).dropna()","81443296":"# Double check missing data\ndf.isna().sum()","95d924f1":"# Get the labels. 1: unreliable, 0: reliable\nlabels = df.label\nlabels.head()","d6e5a3bb":"'''\nnltk.download('stopwords')\ntokenizer=RegexpTokenizer('r\\w+')\nstopwords_english=set(stopwords.words('english'))\n\ndef CleanNews(news):\n news=news.replace(\"<br \/><br \/>\",\" \")\n news=news.lower()\n news=news.split() \n news= ''.join(p for p in news if p not in punctuation)\n # Tokenizing the text\n news_tokens=tokenizer.tokenize(news)\n news_tokens_without_stopwords=[token for token in news_tokens if token not in stopwords_english]\n stemmed_news_tokens_without_stopwords=[PorterStemmer().stem(token) for token in news_tokens_without_stopwords]\n cleaned_news=' '.join(stemmed_news_tokens_without_stopwords)\n return cleaned_news\n\n# Clean the data \ndf['text'] = df['text'].apply(CleanNews)\n# print(df)\n'''\n# Removing Null\nnulls = df.isnull().sum()\nnulls[nulls > 0]\ndf    = df.fillna(0)\n# print(df['text'])","df1c519b":"# Defining X and y\nX = df['text']\ny = df['label']\nprint(X.shape) \nprint(y.shape)","e72804d9":"# Split the dataset\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.25, random_state=7) #, shuffle=True)","37dd1b08":"# Initialize a TfidfVectorizer\n# tfidf_vectorizer = TfidfVectorizer(stop_words = 'english', max_df=0.75)     # PAC Accuracy: 0.961015 0.874053\ntfidf_vectorizer  = TfidfVectorizer(sublinear_tf=True, encoding='ISO-8859-1') # PAC Accuracy: 0.972768 0.875915\n\n\n# Fit and transform train set, transform test set\ntfidf_train = tfidf_vectorizer.fit_transform(X_train)\ntfidf_test  = tfidf_vectorizer.transform(X_test)","8db0922b":"pipe = Pipeline(steps = [('clf', PassiveAggressiveClassifier())])\n                         \n                         \nsearch_space = [{'clf': [PassiveAggressiveClassifier()]},\n                {'clf': [MultinomialNB()]},\n                {'clf': [BernoulliNB()]},\n                {'clf': [RidgeClassifier()]},\n                {'clf': [SGDClassifier()]},\n                {'clf': [Perceptron()]},\n                {'clf': [RandomForestClassifier()]}]\n                         \ngridsearch = GridSearchCV(estimator  = pipe,\n                          param_grid = search_space,\n                          scoring    = 'accuracy')\n                         \nbest_model = gridsearch.fit(tfidf_train, y_train)","c08f9f85":"print('Best accuracy: %f using %s'%(best_model.best_score_, best_model.best_params_))","3bdc80d2":"cv_results = gridsearch.cv_results_['mean_test_score']\ncv_results","4b4903ba":"y_pred = best_model.predict(tfidf_test)","3eb6bba8":"# Build confusion matrix. 1: unreliable, 0: reliable\nconfusion_matrix(y_test, y_pred, labels=[1, 0])","57c72182":"from sklearn.metrics import plot_confusion_matrix\n\nplot_confusion_matrix(best_model, tfidf_test, y_test, display_labels=['Unreliable', 'Reliable'])","157d0a1d":"# Read the data\ntest_data = pd.read_csv('..\/input\/fake-news\/test.csv')","5fed270c":"# Rows and columns in the data\ntest_data.shape","6feb0e6e":"# Take a glimpse of the data\ntest_data.head()","bf7feed0":"# Get some information about the data\ntest_data.info()","f3c3ea0a":"# How many missing data in each feature\/column\ntest_data.isna().sum()","eb5fe1d7":"# Assign ids to an object to use it later for Kaggle submission\ntest_id = test_data['id']\n\n# 2- (Tokenization) and (Text Cleaning) and (Vectorization)\ntest_data         = test_data.drop(columns=['id','title', 'author']).fillna('fake and unreliable')\ntest_data         = test_data.fillna(0)\ntest_data['text'] = test_data['text']\n\n# 3- (Transformer) TfidfTransformer (tf-idf) transformer\ntest_vectorized = tfidf_vectorizer.transform(test_data['text'])\n\n# 4- Predict test data\ntest_predictions = best_model.predict(test_vectorized)","fcd4ec83":"# Join test data's ids with their respective predicted labels\nsubmission = pd.DataFrame({'id':test_id, 'label':test_predictions})\nprint(submission.shape)\nprint(submission.head())","8b049569":"# Save the submission file\nsubmission.to_csv('submission.csv', index=False)","6594afbd":"## Test Data","88d53922":"# Data\n# 1- Reading and Exploring your Data\n---------------------------------------------------------------------------------------------","7dd356d9":"# 6- (Evaluation)\n--------------------------------------------------------------------------------------------------","70727c45":"# 2- (Tokenization) and (Text Cleaning) and (Vectorization)\n--------------------------------------------------------------------------------------------------","34d85ce5":"# Weekend Project -  Week 11 - Nov 20, 2020\n# Saudi Digital Academy\n--------------------------------------------------------------------------------------------\n\n# Fake News Detector\n### Building a system to identify unreliable news articles.\n","d1e4c69e":"# 5- Pipeline\n--------------------------------------------------------------------------------------------------","25119644":"# 4- (Transformer) TfidfTransformer (tf-idf) transformer\n--------------------------------------------------------------------------------------------------","7eda101e":"# 3- ML Algorithm\n--------------------------------------------------------------------------------------------------"}}