{"cell_type":{"280edd02":"code","fbf78910":"code","b9050726":"code","18e8625b":"code","0309b82e":"code","19791280":"code","b3257a10":"code","909acc01":"code","09f1cc50":"code","36571fc1":"markdown","7ca257df":"markdown","5b646f30":"markdown","37314e0b":"markdown","74b9193a":"markdown"},"source":{"280edd02":"import numpy as np \nimport os\n\nos.getcwd()","fbf78910":"os.listdir('..\/input\/mpiihuman-pose-estimation-heat-maps')","b9050726":"print(sorted(os.listdir('..\/input\/mpiihuman-pose-estimation-heat-maps\/Images'))[:10])\nprint(sorted(os.listdir('..\/input\/mpiihuman-pose-estimation-heat-maps\/HeatMaps'))[:10])","18e8625b":"import tensorflow as tf\nfrom PIL import Image\nimport cv2\nimport random\nimport matplotlib.pyplot as plt\nimport matplotlib.image as mpimg\nfrom keras.preprocessing.image import load_img\nfrom keras.preprocessing.image import img_to_array","0309b82e":"R_ANKLE = 0\nR_KNEE = 1\nR_HIP = 2\nL_HIP = 3\nL_KNEE = 4\nL_ANKLE = 5\nPELVIS = 6\nTHORAX = 7\nUPPER_NECK = 8\nHEAD_TOP = 9\nR_WRIST = 10\nR_ELBOW = 11\nR_SHOULDER = 12\nL_SHOULDER = 13\nL_ELBOW = 14\nL_WRIST = 15\n\nMPII_BONES = [\n    [R_ANKLE, R_KNEE],\n    [R_KNEE, R_HIP],\n    [R_HIP, PELVIS],\n    [L_HIP, PELVIS],\n    [L_HIP, L_KNEE],\n    [L_KNEE, L_ANKLE],\n    [PELVIS, THORAX],\n    [THORAX, UPPER_NECK],\n    [UPPER_NECK, HEAD_TOP],\n    [R_WRIST, R_ELBOW],\n    [R_ELBOW, R_SHOULDER],\n    [THORAX, R_SHOULDER],\n    [THORAX, L_SHOULDER],\n    [L_SHOULDER, L_ELBOW],\n    [L_ELBOW, L_WRIST]\n]\n\ndef draw_skel(img, heatmap, thresh=0.5):\n    x_val = []\n    y_val = []\n    name = []\n    for i in range(16):\n        if np.max(heatmap[:,:,i]) < thresh:\n            x_val.append(-1)\n            y_val.append(-1)\n            continue\n        coor = np.argwhere(heatmap[:,:,i] == np.max(heatmap[:,:,i]))\n        x_val.append(coor[0,1])\n        y_val.append(coor[0,0])\n    \n    x_val = np.array(x_val) * 256 \/ 64\n    y_val = np.array(y_val) * 256 \/ 64 \n    plt.imshow(img)\n    for i in MPII_BONES:\n        jt1 = i[0]\n        jt2 = i[1]\n        if x_val[jt1] < 0 or x_val[jt2] < 0:\n            continue\n        plt.plot([x_val[jt1], x_val[jt2]], [y_val[jt1], y_val[jt2]], color='blue')","19791280":"class DataGenerator(tf.keras.utils.Sequence):\n    def __init__(self, batch_size, input_img_path, target_joint_path):\n        self.batch_size = batch_size\n        self.input_img_path = input_img_path \n        self.target_joint_path = target_joint_path \n\n    def __len__(self): \n        return len(self.target_joint_path) \/\/ self.batch_size\n\n    def __getitem__(self, idx):\n        i = idx * self.batch_size\n        \n        batch_input_img_paths = self.input_img_path[i : i + self.batch_size]\n        batch_target_img_paths = self.target_joint_path[i : i + self.batch_size]\n        x = np.zeros((self.batch_size,) + (256,256,3), dtype=\"float32\")\n        for j, path in enumerate(batch_input_img_paths):\n            img = load_img(path)\n            x[j] = np.array(img)\n            x[j] \/= 255.0\n        y = np.zeros((self.batch_size,) + (64,64,16), dtype=\"float32\")\n        for j, path in enumerate(batch_target_img_paths):\n            img = np.load(path)\n            y[j] = img\n        return x, y ","b3257a10":"train_gen = DataGenerator(\n    32, [os.path.join('..\/input\/mpiihuman-pose-estimation-heat-maps\/Images',i) for i in sorted(os.listdir('..\/input\/mpiihuman-pose-estimation-heat-maps\/Images'))],\n     [os.path.join('..\/input\/mpiihuman-pose-estimation-heat-maps\/HeatMaps',i) for i in sorted(os.listdir('..\/input\/mpiihuman-pose-estimation-heat-maps\/HeatMaps'))]\n) \n\nvalid_gen = DataGenerator(\n    32, [os.path.join('..\/input\/mpiihuman-pose-estimation-heat-maps\/Images_val',i) for i in sorted(os.listdir('..\/input\/mpiihuman-pose-estimation-heat-maps\/Images_val'))],\n     [os.path.join('..\/input\/mpiihuman-pose-estimation-heat-maps\/HeatMaps_val',i) for i in sorted(os.listdir('..\/input\/mpiihuman-pose-estimation-heat-maps\/HeatMaps_val'))]\n) \n# you may change the distribution by playing around the sent list argument through the parameters, jusst make sure that the correspoding heatmap is sent !","909acc01":"x,y = train_gen.__getitem__(0)","09f1cc50":"nrows = 2\nncols = 4   \nfig = plt.gcf() \nfig.set_size_inches(ncols * 4, nrows * 4)\n\nimages = sorted(os.listdir('..\/input\/mpiihuman-pose-estimation-heat-maps\/Images'))\njts = sorted(os.listdir('..\/input\/mpiihuman-pose-estimation-heat-maps\/HeatMaps'))\n\nd = np.arange(len(images))\nrandom.shuffle(d)\nimages = [images[i] for i in d]\njts = [jts[i] for i in d]\nk=0\nfor img,jt in zip(images[:4],jts[:4]):\n    # normal image\n    sp = plt.subplot(nrows, ncols, k+1) \n    sp.axis('Off') \n    img = mpimg.imread(os.path.join('..\/input\/mpiihuman-pose-estimation-heat-maps\/Images',img))\n    plt.imshow(img)\n\n    # JOINTS image\n    sp = plt.subplot(nrows, ncols, k + 5) \n    sp.axis('Off') \n    k += 1\n    out = np.load(os.path.join('..\/input\/mpiihuman-pose-estimation-heat-maps\/HeatMaps',jt))\n    out1 = np.zeros((64,64))\n    for i in range(16):\n        out1 += out[:,:,i]\n    draw_skel(img, out)\n    a = cv2.resize(out1,(256,256))\n    plt.imshow(a,alpha=0.6)#, cmap='hot')\nplt.show()","36571fc1":"## Importing the necessary Libraries","7ca257df":"## Custom DataGenerators","5b646f30":"Testing the Generator and visualizing the dataset","37314e0b":"## Function To Draw Skeleton","74b9193a":"### Visuals"}}