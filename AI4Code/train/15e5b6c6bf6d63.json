{"cell_type":{"281716a2":"code","c59094fb":"code","6c48a4bf":"code","a88520ff":"code","d3332f38":"code","e04604d2":"code","f491c952":"code","494550c6":"code","c4a01bc1":"code","9e4bc88a":"code","5fe0f4c2":"code","4d5ef9ab":"code","b68fbfa9":"code","d01127a2":"markdown","8aca69f8":"markdown","ec5cd516":"markdown","28ed7f45":"markdown","763b9f1f":"markdown","587ac320":"markdown","d82cf813":"markdown","718d24f4":"markdown","2e244f0e":"markdown","cb8792a9":"markdown"},"source":{"281716a2":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","c59094fb":" import pandas as pd\n import numpy as np\n import matplotlib.pyplot as plt\n import matplotlib.ticker as ticker\n import seaborn as sns\n\ndata = pd.read_csv('\/kaggle\/input\/kaggle-survey-2020\/kaggle_survey_2020_responses.csv')","6c48a4bf":"data.head()","a88520ff":"df_similar_to_me = data[(data[\"Q2\"] == \"Man\")  & (data[\"Q4\"] == \"Master\u2019s degree\")]\n\ndf_similar_to_me.head()","d3332f38":"age_group = df_similar_to_me['Q1'].value_counts().sort_index().astype(np.int64)\n\nidx = age_group.index\n\nfig, ax = plt.subplots(figsize=(15, 8))\nax.bar(idx, age_group, facecolor='lightgray')\nax.set_xlabel('Age group', fontsize=14, fontweight='bold', color='gray', labelpad=12)\nax.set_ylabel('Population', fontsize=14, fontweight='bold', color='gray', labelpad=12)\n\nfor p in ax.patches:\n    left, bottom, width, height = p.get_bbox().bounds\n    if height == 1529:\n        ax.annotate(height.astype(np.int64), (left+width\/2, height+30), ha='center', color='k', fontweight='bold')\n    else:\n        ax.annotate(height.astype(np.int64), (left+width\/2, height+30), ha='center', color='k')\n    \nax.patches[2].set_facecolor('yellow')\nax.patches[2].set_linewidth('3')\nax.patches[2].set_edgecolor('darkorange')","e04604d2":"current_role = df_similar_to_me['Q5'].value_counts().sort_index().astype(np.int64)\n\nfig, ax = plt.subplots(figsize=(15, 8))\nax.bar(current_role.index, current_role, facecolor='lightgray')\nax.set_xlabel('Current role', fontsize=14, fontweight='bold', color='gray', labelpad=12)\nax.set_ylabel('Population', fontsize=14, fontweight='bold', color='gray', labelpad=12)\n\nax.tick_params(axis='x', rotation=90, labelsize=10, length=5)\n\nfor p in ax.patches:\n    left, bottom, width, height = p.get_bbox().bounds\n    ax.annotate(height.astype(np.int64), (left+width\/2, height+10), ha='center', color='k', fontweight='bold')\n    \n\nax.patches[5].set_facecolor('yellow')\nax.patches[5].set_linewidth('3')\nax.patches[5].set_edgecolor('darkorange')\n\nax.patches[6].set_facecolor('lime')\nax.patches[6].set_linewidth('3')\nax.patches[6].set_edgecolor('seagreen')\n\nax.patches[9].set_facecolor('skyblue')\nax.patches[9].set_linewidth('3')\nax.patches[9].set_edgecolor('dodgerblue')\n\nax.get_xticklabels()[5].set_color('darkorange')\nax.get_xticklabels()[5].set_fontweight('bold')\nax.get_xticklabels()[6].set_color('seagreen')\nax.get_xticklabels()[6].set_fontweight('bold')\nax.get_xticklabels()[9].set_color('dodgerblue')\nax.get_xticklabels()[9].set_fontweight('bold')","f491c952":"top_3_jobs = df_similar_to_me[(df_similar_to_me[\"Q5\"] == \"Data Scientist\") |\n                              (df_similar_to_me[\"Q5\"] == \"Machine Learning Engineer\") |\n                              (df_similar_to_me[\"Q5\"] == \"Research Scientist\")]\n\ntop_3_jobs.head()\n\ntop_3_jobs['count'] = 1\n\njobs_exp = pd.pivot_table(top_3_jobs, index=['Q6'], columns=['Q5'], values='count', aggfunc='sum').reindex(['1-2 years', '3-5 years', '5-10 years', '10-20 years', '20+ years'])\n\njobs_exp.head()\n\nfig, ax = plt.subplots(figsize=(5,12))\nsns.heatmap(jobs_exp, linewidths=2.5, annot=True, annot_kws={\"size\": 10, \"fontweight\": 'bold'}, cmap=\"Greens\", fmt=\"d\")\nax.set_ylabel('Experience in programming',fontsize=14, fontweight='bold', color='gray', labelpad=12)\nax.set_xlabel('Current Jobs',fontsize=14, fontweight='bold', color='gray', labelpad=12)","494550c6":"lang_sum = top_3_jobs.loc[:,'Q7_Part_1':'Q7_OTHER'].count(axis=1).values\n\ntop_3_jobs['lang_sum'] = lang_sum.astype(np.int64)\n\ng = sns.catplot(data=top_3_jobs, x='Q6', y='lang_sum', order=['1-2 years', '3-5 years', '5-10 years', '10-20 years', '20+ years'], \n            kind='violin', inner='stick', palette='pastel')\n\ng.set_xlabels('Experience in coding', fontsize=14, fontweight='bold', color='gray', labelpad=12)\ng.set_ylabels('Number of languages', fontsize=14, fontweight='bold', color='gray', labelpad=12)\n\ng.axes[0][0].axhline(2, ls='-', color='dodgerblue', linewidth=3)\ng.axes[0][0].axhline(3, ls='-', color='dodgerblue', linewidth=3)","c4a01bc1":"df = pd.DataFrame(top_3_jobs.loc[:,'Q7_Part_1':'Q7_OTHER'])\n\ndf_2 = df.notnull().astype('int')\ndf_2 = df_2.append(df_2.agg(\"sum\"), ignore_index=True)\n\nlang_group = df_2.iloc[-1,:]\nidx = ['Python', 'R', 'SQL', 'C', 'C++', 'Java', 'Javascript', 'Julia', 'Swift', 'Bash', 'MATLAB', 'None', 'Other']\n\nfig, ax = plt.subplots(figsize=(15, 6))\nax.bar(idx, lang_group, facecolor='lightgray')\nax.set_xlabel('Language', fontsize=14, fontweight='bold', color='gray', labelpad=12)\nax.set_ylabel('Recommendations', fontsize=14, fontweight='bold', color='gray', labelpad=12)\nax.set_title('First Language to learn for aspiring data scientist', fontsize=14, fontweight='bold')\n\nfor p in ax.patches:\n    left, bottom, width, height = p.get_bbox().bounds\n    if height == 1626 or height == 861:\n        ax.annotate(height.astype(np.int64), (left+width\/2, height+30), ha='center', color='k', fontweight='bold')\n    else:\n        ax.annotate(height.astype(np.int64), (left+width\/2, height+30), ha='center', color='k')\n    \nax.patches[0].set_facecolor('yellow')\nax.patches[0].set_linewidth('3')\nax.patches[0].set_edgecolor('darkorange')\n\nax.patches[2].set_facecolor('yellow')\nax.patches[2].set_linewidth('3')\nax.patches[2].set_edgecolor('darkorange')","9e4bc88a":"salary = top_3_jobs.iloc[:,118].value_counts().astype(np.int64)\n\nsalary","5fe0f4c2":"salary.index = [i.replace(',','') for i in salary.index]\n\nsalary.index = [i.replace('$','') for i in salary.index]\n\nsalary.index = [i.replace('> ','') for i in salary.index]\n\nnew_index = {}\nfor i in salary.index:\n    mid_point = i.find('-')\n    left_num = int(i[:(mid_point)])\n    right_num = int(i[(mid_point+1):])\n    new_index[i] = (left_num+right_num)\/2\n\nnew_index","4d5ef9ab":"exp_comp = pd.pivot_table(top_3_jobs, values='count', index=['Q6'], columns=['Q24'], aggfunc=np.sum)\n\nnew_col = list(new_index.values())\n\nexp_comp.columns = new_col\n\nexp_comp.fillna(0, inplace=True)\n\nexp_comp\n\nexp_comp['avg_income'] = 0\nv2 = np.array(exp_comp.columns[:-1])\n\nfor i in range(0,7):\n    v1 = np.array(exp_comp.iloc[i, :-1])\n    sum = np.sum(v1)\n    avg_income = np.dot(v1, v2) \/ sum\n    exp_comp.iloc[i,-1] = round(avg_income,2)\n\nq6_order = ['I have never written code', '< 1 years', '1-2 years', '3-5 years','5-10 years', '10-20 years', '20+ years']\n\nexp_comp = exp_comp.reindex(q6_order)\n\nfig, ax = plt.subplots(figsize=(15, 6))\nax.plot(exp_comp.index, exp_comp['avg_income'], color = 'dodgerblue', linewidth=2.5, linestyle='--')\nax.bar(exp_comp.index, exp_comp['avg_income'], facecolor = 'lightgray', edgecolor='black')\nax.set_xlabel('Experience in coding', fontsize=14, fontweight='bold', color='gray', labelpad=12)\nax.set_ylabel('Average yearly compensation', fontsize=14, fontweight='bold', color='gray', labelpad=12)","b68fbfa9":"year_job_salary = top_3_jobs[[\"Q6\", \"Q5\", \"Q24\"]]\n\nnew_salary_list = list(new_index.values())\n\nold_salary_index = top_3_jobs.iloc[:,118].value_counts().astype(np.int64)\n\nold_salary_list = list(old_salary_index.index)\n\nidx_map = dict(zip(old_salary_list, new_salary_list))\n\nyear_job_salary = year_job_salary.replace({\"Q24\": idx_map})\n\nq6_order = ['I have never written code', '< 1 years', '1-2 years', '3-5 years','5-10 years', '10-20 years', '20+ years']\n\ninteger_q6 = [0, 1, 1.5, 4, 7.5, 15, 20]\n\nq6_dict = dict(zip(q6_order, integer_q6))\n\nyear_job_salary = year_job_salary.replace({\"Q6\": q6_dict})\n\nyear_job_salary.fillna(0, inplace=True)\n\nfig, axes = plt.subplots(nrows=1, ncols=2, figsize=(10, 6))\naxs = axes.ravel()\npalette = sns.color_palette(\"mako_r\", 3)\n\nsns.lineplot(data=year_job_salary, x=\"Q6\", y=\"Q24\", hue=\"Q5\", ci=None, palette=palette, ax=axs[0])\naxs[0].legend().set_title('Jobs')\naxs[0].set_xlabel('Experience in coding', fontsize=14, fontweight='bold', color='gray', labelpad=12)\naxs[0].set_ylabel('Average yearly compensation', fontsize=14, fontweight='bold', color='gray', labelpad=12)\n\nsns.lineplot(data=year_job_salary, x=\"Q6\", y=\"Q24\", ci=None, ax=axs[1])\naxs[1].set_ylabel('')\naxs[1].set_xlabel('Experience in coding', fontsize=14, fontweight='bold', color='gray', labelpad=12)","d01127a2":"Before doing the main task, let's skim through the whole data. ","8aca69f8":"It is not that quite intersting, but I'm glad that I don't seem late. Anyway, next we will analyze their current occupation.","ec5cd516":"Because all the data is categorical, it has weak logical background for drawing the line plot, but I just want to show the trend. Let's analyze this result by jobs. Similar with above procedure, we have to do some preprocessing for changing string data to numeric data.","28ed7f45":"There are so many items in the data, I choose to extract some of the information that I need for analyzing. I sometimes want to know that what people with similar circumstances with me do. And by looking at their choices, I can make a plan to achieve my goal. \n\nIn this EDA, at first, I have to specify what my current conditions are: Male with master's degree.","763b9f1f":"I get a sense of how much experience I need for getting those jobs. Then, do I have to know many languages? Let's see.","587ac320":"As above graph shows, regardless of experience, most of them are capable of 2 or 3 languages. Then what language should I learn?","d82cf813":"Luckily, Python is the most recommended language. The most interesting part, it's time to talk about money.","718d24f4":"Let's take a glance at the age group.","2e244f0e":"Since the 3 jobs tha I admire most are 'Data Scientist', 'Machine Learning Engineer', 'Reserach Scientist', let's focus on those 3 groups. Maybe there are some differences in coding\/programming experience between those groups.","cb8792a9":"Let's preprocess the index data for analysis. Since I take the median of each price range, it can be a little bit inaccurate analysis, since I don't know about the distribution in the certain wage group."}}