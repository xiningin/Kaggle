{"cell_type":{"7711b762":"code","9a166b83":"code","22defe0d":"code","9bb7a0d5":"code","c777ac8f":"code","c584f267":"code","59e6c75d":"code","ceae8e39":"code","d4a26927":"code","aa09d16b":"code","8dc78172":"code","81ac35d1":"code","65dfde2e":"code","b6eadaf2":"code","55500e2a":"code","fd953286":"code","a29d74b8":"code","95cbb046":"code","1554ef1f":"code","31b88d42":"code","09e1b40b":"code","4d04e413":"code","c7440ce0":"code","1fed0428":"code","822f9b4f":"code","b185b341":"code","a9014be3":"code","054ec9c8":"code","a4544c3f":"code","429d206a":"code","f505711f":"code","0df582cd":"code","09038fc2":"code","e0063639":"code","f7eb7e34":"code","a8eaaa9e":"code","c5ac6227":"code","b936850d":"code","27f29be4":"code","6add5026":"code","2d3115fa":"code","03650ee6":"code","edeaf26f":"markdown","66bb19d7":"markdown","8d7a3056":"markdown","2d7339d5":"markdown","b8d0aeb7":"markdown","15e45193":"markdown","224ba10b":"markdown","cba12a66":"markdown","deacd841":"markdown","52a7fa61":"markdown","76a55ed8":"markdown","7feeaa62":"markdown"},"source":{"7711b762":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n%matplotlib inline\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","9a166b83":"## Load dataset\ndf = pd.read_csv('\/kaggle\/input\/kyphosis-dataset\/kyphosis.csv')\ndf.head()","22defe0d":"df.shape","9bb7a0d5":"## Discriptive Stats\ndf.describe()","c777ac8f":"## Checking Missing Value\ndf.isnull().sum()","c584f267":"df['Kyphosis'].value_counts()","59e6c75d":"sns.countplot(x='Kyphosis', data=df)","ceae8e39":"sns.pairplot(df,hue=\"Kyphosis\")","d4a26927":"## Feature Encoding\nfrom sklearn.preprocessing import LabelEncoder\n\nle = LabelEncoder()\ndf['Kyphosis'] = le.fit_transform(df['Kyphosis'])\ndf.head()","aa09d16b":"x = df.iloc[:,1:] ## Independent Variables\ny = df.iloc[:,0] ## Dependent Variable","8dc78172":"from sklearn.model_selection import train_test_split\n\nx_train, x_test, y_train, y_test = train_test_split(x, y, test_size=0.2, random_state=100)","81ac35d1":"from sklearn.linear_model import LogisticRegression\n\nlr_model = LogisticRegression()\nlr_model.fit(x_train, y_train)","65dfde2e":"from sklearn.metrics import confusion_matrix, accuracy_score, classification_report\n\nlr_y_pred = lr_model.predict(x_test)\n\nprint('Accuracy Score:', accuracy_score(y_test, lr_y_pred))\nprint('Confusion Matrix: \\n', confusion_matrix(y_test, lr_y_pred))\nprint('Classification Report: \\n', classification_report(y_test, lr_y_pred))","b6eadaf2":"from sklearn.neighbors import KNeighborsClassifier\n\nknn_clf_model = KNeighborsClassifier(n_neighbors=2, weights='distance')\nknn_clf_model.fit(x_train, y_train)","55500e2a":"knn_y_pred = knn_clf_model.predict(x_test)\n\nprint('Accuracy Score: \\n', accuracy_score(y_test, knn_y_pred))\nprint('Confusion Matrix: \\n', confusion_matrix(y_test, knn_y_pred))\nprint('Classification Report: \\n', classification_report(y_test, knn_y_pred))","fd953286":"from sklearn.tree import DecisionTreeClassifier\n\ndt_clf_model = DecisionTreeClassifier()\ndt_clf_model.fit(x_train, y_train)","a29d74b8":"dt_y_pred = dt_clf_model.predict(x_test)\n\nprint('Accuracy Score: \\n', accuracy_score(y_test, dt_y_pred))\nprint('Confusion Matrix: \\n', confusion_matrix(y_test, dt_y_pred))\nprint('Classification Report: \\n', classification_report(y_test, dt_y_pred))","95cbb046":"from sklearn.ensemble import RandomForestClassifier\n\nrf_clf_model = RandomForestClassifier()\nrf_clf_model.fit(x_train, y_train)","1554ef1f":"rf_y_pred = rf_clf_model.predict(x_test)\n\nprint('Accuracy Score: \\n', accuracy_score(y_test, rf_y_pred))\nprint('Confusion Matrix: \\n', confusion_matrix(y_test, rf_y_pred))\nprint('Classification Report: \\n', classification_report(y_test, rf_y_pred))","31b88d42":"from sklearn import svm\n\nsvm_clf_model = svm.SVC(kernel='linear')\nsvm_clf_model.fit(x_train, y_train)","09e1b40b":"svm_y_pred = svm_clf_model.predict(x_test)\n\nprint('Accuracy Score: \\n', accuracy_score(y_test, svm_y_pred))\nprint('Confusion Matrix: \\n', confusion_matrix(y_test, svm_y_pred))\nprint('Classification Report: \\n', classification_report(y_test, svm_y_pred))","4d04e413":"from sklearn.ensemble import AdaBoostClassifier\n\nada_clf_model = AdaBoostClassifier(random_state=100)\nada_clf_model.fit(x_train, y_train)","c7440ce0":"ada_y_pred = ada_clf_model.predict(x_test)\n\nprint('Accuracy Score: \\n', accuracy_score(y_test, ada_y_pred))\nprint('Confusion Matrix: \\n', confusion_matrix(y_test, ada_y_pred))\nprint('Classification Report: \\n', classification_report(y_test, ada_y_pred))","1fed0428":"ada_rf_model = AdaBoostClassifier(base_estimator=rf_clf_model)\nada_rf_model.fit(x_train, y_train)","822f9b4f":"ada_rf_y_pred = ada_rf_model.predict(x_test)\n\nprint('Accuracy Score: \\n', accuracy_score(y_test, ada_rf_y_pred))\nprint('Confusion Matrix: \\n', confusion_matrix(y_test, ada_rf_y_pred))\nprint('Classification Report: \\n', classification_report(y_test, ada_rf_y_pred))","b185b341":"ada_lr_model = AdaBoostClassifier(base_estimator=lr_model)\nada_lr_model.fit(x_train, y_train)","a9014be3":"ada_lr_y_pred = ada_lr_model.predict(x_test)\n\nprint('Accuracy Score: \\n', accuracy_score(y_test, ada_lr_y_pred))\nprint('Confusion Matrix: \\n', confusion_matrix(y_test, ada_lr_y_pred))\nprint('Classification Report: \\n', classification_report(y_test, ada_lr_y_pred))","054ec9c8":"from sklearn.model_selection import RandomizedSearchCV\n\n# Number of trees in random forest\nn_estimators = [int(x) for x in np.linspace(200, 2000, 5)]\n# Number of features to consider at every split\nmax_features = ['auto', 'sqrt', 'log2']\n# Maximum number of levels in tree\nmax_depth = [int(x) for x in np.linspace(10, 100, 10)]\n# Minimum number of samples required to split a node\nmin_samples_split = [2, 5, 7, 10, 14]\n# Minimum number samples required at each leaf node\nmin_samples_leaf = [1, 2, 4, 6, 8]\n# Create a random grid\nrandom_grid = {'n_estimators': n_estimators,\n                'max_features': max_features,\n                'max_depth': max_depth,\n                'min_samples_split': min_samples_split,\n                'min_samples_leaf': min_samples_leaf,\n                'criterion': ['entropy', 'gini']\n\n}\nprint(random_grid)","a4544c3f":"rf = RandomForestClassifier()\nrf_randomcv = RandomizedSearchCV(estimator=rf, param_distributions=random_grid, n_iter=100, cv=3, verbose=2, random_state=100, n_jobs=-1)\nrf_randomcv.fit(x_train, y_train)","429d206a":"rf_randomcv.best_params_","f505711f":"rf_randomcv_model = rf_randomcv.best_estimator_\nrf_randomcv_model.fit(x_train, y_train)","0df582cd":"rf_randomcv_model_y_pred = rf_randomcv_model.predict(x_test)\n\nprint('Accuracy Score: \\n', accuracy_score(y_test, rf_randomcv_model_y_pred))\nprint('Confusion Matrix: \\n', confusion_matrix(y_test, rf_randomcv_model_y_pred))\nprint('Classification Report: \\n', classification_report(y_test, rf_randomcv_model_y_pred))","09038fc2":"rf_randomcv.best_params_","e0063639":"# Create a param grid\nparam_grid = {'n_estimators': [rf_randomcv.best_params_['n_estimators'] - 100, rf_randomcv.best_params_['n_estimators'],                                             rf_randomcv.best_params_['n_estimators'] + 100, rf_randomcv.best_params_['n_estimators'] + 200],\n                'max_features': [rf_randomcv.best_params_['max_features']],\n                'max_depth': [rf_randomcv.best_params_['max_depth']],\n                'min_samples_split': [rf_randomcv.best_params_['min_samples_split'] -2, rf_randomcv.best_params_['min_samples_split']-1, rf_randomcv.best_params_['min_samples_split'], rf_randomcv.best_params_['min_samples_split'] +1, rf_randomcv.best_params_['min_samples_split'] +2,],\n                'min_samples_leaf': [rf_randomcv.best_params_['min_samples_leaf'], rf_randomcv.best_params_['min_samples_leaf']+2,                                          rf_randomcv.best_params_['min_samples_leaf'] + 4],\n                'criterion': [rf_randomcv.best_params_['criterion']]\n\n}\nprint(param_grid)","f7eb7e34":"from sklearn.model_selection import GridSearchCV\n\nrf2 = RandomForestClassifier()\nrf_gridcv = GridSearchCV(estimator=rf2, param_grid=param_grid, cv=5, n_jobs=-1, verbose=2)\nrf_gridcv.fit(x_train, y_train)","a8eaaa9e":"rf_gridcv.best_params_","c5ac6227":"rf_gridcv_model = rf_gridcv.best_estimator_\nrf_gridcv_model.fit(x_train, y_train)","b936850d":"rf_gridcv_y_pred = rf_gridcv_model.predict(x_test)\n\nprint('Accuracy Score: \\n', accuracy_score(y_test, rf_gridcv_y_pred))\nprint('Confusion Matrix: \\n', confusion_matrix(y_test, rf_gridcv_y_pred))\nprint('Classification Report: \\n', classification_report(y_test, rf_gridcv_y_pred))","27f29be4":"parameters = [{'C': [1, 10, 100, 1000], 'kernel': ['linear']}, \n                {'C': [1, 10, 100, 1000], 'kernel': ['rbf'], 'gamma': [0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9]}]\n\nsvc_grid_search = GridSearchCV(estimator=svm_clf_model, param_grid=parameters, scoring='accuracy', cv=10, n_jobs=-1, verbose=2)\nsvc_grid_search.fit(x_train, y_train)","6add5026":"svc_grid_search.best_params_","2d3115fa":"svc_grid_search_model = svc_grid_search.best_estimator_\nsvc_grid_search_model.fit(x_train, y_train)","03650ee6":"svc_grid_search_y_pred = svc_grid_search_model.predict(x_test)\n\nprint('Accuracy Score: \\n', accuracy_score(y_test, svc_grid_search_y_pred))\nprint('Confusion Matrix: \\n', confusion_matrix(y_test, svc_grid_search_y_pred))\nprint('Classification Report: \\n', classification_report(y_test, svc_grid_search_y_pred))","edeaf26f":"# SVM Hyper parameter tunning","66bb19d7":"# Ada Boost With Random Forest","8d7a3056":"# Logistic Regression","2d7339d5":"# Ada Boosting","b8d0aeb7":"# Decession Tree","15e45193":"# Gridsearch CV","224ba10b":"# Hyper Parameter Tunning Random Forest\n\n# Randomized Search CV","cba12a66":"#            **Prediction of Kyphosis**","deacd841":"# SVM Classifier","52a7fa61":"# Ranom Forest Classifier","76a55ed8":"# Ada Boost with Logistic Regression","7feeaa62":"# KNN Classifier"}}