{"cell_type":{"b5c4caae":"code","5911a5b4":"code","f91db4ec":"code","3300c47e":"code","58225e5c":"code","ca7df235":"code","9b7bbbb9":"code","48aff099":"code","fd302e4e":"code","4cf7fee0":"code","b4579978":"code","70692c28":"code","5880ca3d":"code","469d1f50":"code","01d4459f":"code","cf989e97":"code","d5e886dd":"code","2b11371f":"code","f9b2466b":"markdown"},"source":{"b5c4caae":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","5911a5b4":"from numpy import mean, std\nimport seaborn as sns\nfrom matplotlib import *\nfrom matplotlib import pyplot as plt\nfrom catboost import CatBoostClassifier\nfrom sklearn.ensemble import GradientBoostingClassifier, RandomForestClassifier\nfrom sklearn.preprocessing import StandardScaler, LabelEncoder\nfrom sklearn.model_selection import train_test_split, KFold, StratifiedKFold, cross_val_score, RepeatedStratifiedKFold\nfrom sklearn.metrics import accuracy_score\nfrom lightgbm import LGBMClassifier","f91db4ec":"train_data = pd.read_csv('\/kaggle\/input\/janatahack-healthcare-analytics-part-2\/train.csv')\ntest_data = pd.read_csv('\/kaggle\/input\/janatahack-healthcare-analytics-part-2\/test.csv')\nsample_submission = pd.read_csv('\/kaggle\/input\/janatahack-healthcare-analytics-part-2\/sample_submission.csv')\ntrain_data.columns = train_data.columns.str.lower().str.strip().str.replace(' ', '_').str.replace('(', '').str.replace(')', '')\ntest_data.columns = test_data.columns.str.lower().str.strip().str.replace(' ', '_').str.replace('(', '').str.replace(')', '')","3300c47e":"print('Train Data Shape: ', train_data.shape)\nprint('Test Data Shape: ', test_data.shape)\ntrain_data.head()","58225e5c":"train_data.dtypes","ca7df235":"train_data.isnull().sum()","9b7bbbb9":"train_data.nunique()","48aff099":"train_data.columns","fd302e4e":"# Unique values for all the columns\nfor col in train_data.columns[~(train_data.columns.isin(['case_id', 'patientid', 'admission_deposit']))].tolist():\n    print(\" Unique Values --> \" + col, ':', len(train_data[col].unique()), ': ', train_data[col].unique())","4cf7fee0":"i = 1\nfor column in train_data.columns[~(train_data.columns.isin(['case_id', 'patientid', 'admission_deposit']))].tolist():\n    plt.figure(figsize = (60, 10))\n    plt.subplot(4, 4, i)\n    sns.barplot(x = train_data[column].value_counts().index, y = train_data[column].value_counts())\n    i += 1\n    plt.show()","b4579978":"sns.boxplot(x = 'visitors_with_patient', data = train_data)\nsns.despine()","70692c28":"plt.figure(figsize = (20, 6))\nsns.barplot(x = train_data.groupby(['severity_of_illness'])['visitors_with_patient'].value_counts().index, y = train_data.groupby(['severity_of_illness'])['visitors_with_patient'].value_counts())\nplt.xticks(rotation = 90)\nsns.despine()","5880ca3d":"train_data = train_data.fillna('NaN')\ntest_data = test_data.fillna('NaN')\n\nfor column in train_data.columns[~(train_data.columns.isin(['case_id', 'stay']))].tolist():\n\n    le = LabelEncoder()\n\n    if column == 'city_code_patient':\n        train_data['city_code_patient'] = train_data['city_code_patient'].astype('str')\n        test_data['city_code_patient'] = test_data['city_code_patient'].astype('str')\n        train_data['city_code_patient'] = le.fit_transform(train_data['city_code_patient'])\n        test_data['city_code_patient'] = le.fit_transform(test_data['city_code_patient'])\n    \n    elif column == 'bed_grade':\n        bedGrade = {1: '1',2: '2', 3: '3', 4: '4', np.nan: '5'}\n        train_data['bed_grade'] = train_data['bed_grade'].map(bedType)\n        test_data['bed_grade'] = test_data['bed_grade'].map(bedType)\n        train_data['bed_grade'] = train_data['bed_grade'].fillna('NaN')\n        test_data['bed_grade'] = test_data['bed_grade'].fillna('NaN')\n    \n    else:\n        train_data[column] = le.fit_transform(train_data[column])\n        test_data[column] = le.fit_transform(test_data[column])","469d1f50":"train_data.head()","01d4459f":"ss = StandardScaler()\n\nfor column in train_data.columns[~(train_data.columns.isin(['case_id', 'stay']))].tolist():\n    train_data[[column]] = ss.fit_transform(train_data[[column]])\n    test_data[[column]] = ss.fit_transform(test_data[[column]])","cf989e97":"# Partitioning the features and the target\n\nX = train_data[train_data.columns[~(train_data.columns.isin(['case_id', 'stay']))].tolist()].values\ny = train_data['stay'].values","d5e886dd":"kfold, scores = KFold(n_splits = 6, shuffle = True, random_state = 22), list()\nfor train, test in kfold.split(X):\n    X_train, X_test = X[train], X[test]\n    y_train, y_test = y[train], y[test]\n    \n    model = CatBoostClassifier(random_state = 22, max_depth = 6, n_estimators = 200, verbose = 100)\n    model.fit(X_train, y_train)\n    preds = model.predict(X_test)\n    score = accuracy_score(y_test, preds)\n    scores.append(score)\n    print('Validation Accuracy:', score)\nprint(\"Average Validation Accuracy: \", sum(scores)\/len(scores))","2b11371f":"predictions = model.predict(test_data[test_data.columns[~(test_data.columns.isin(['case_id']))].tolist()].values)\nsubmission = pd.DataFrame({'case_id': test_data['case_id'], 'Stay': predictions.ravel()})\nsubmission.to_csv('av_healthcare_v1.csv', index = False)\nsubmission.head()","f9b2466b":"## Exploratory Data Analysis"}}