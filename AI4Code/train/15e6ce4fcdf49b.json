{"cell_type":{"ca8aedf7":"code","547f42bc":"code","12893356":"code","4a000523":"code","25ba3658":"code","09c89a80":"code","58188b28":"code","16ec876b":"code","7faaa9d3":"code","b4750f04":"code","2a1f8812":"code","08cd397b":"code","d76ce680":"code","c693f7dc":"code","aecc979c":"code","bf047235":"code","931f8dac":"code","d6cf2456":"code","4ac46beb":"code","c607526a":"code","bfebbe26":"code","351f8f09":"code","db4cf00b":"code","beee0398":"code","58d77972":"code","92690ebb":"code","09f3d095":"code","1fe078c5":"code","9b547b73":"code","ea390e08":"code","f72b6d1c":"code","332ebcf9":"code","b816f370":"code","e239245f":"code","14afacb4":"code","921388cd":"code","0f245218":"code","eb1f331d":"code","8ef10a74":"code","3b606e77":"code","295a9bbe":"markdown","b91418cd":"markdown","15f2e19c":"markdown","4e57135d":"markdown","6d2f4f00":"markdown","c4d2d4b3":"markdown","74ad3d06":"markdown","825a0d6d":"markdown","b951595f":"markdown","4580ce46":"markdown"},"source":{"ca8aedf7":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","547f42bc":"import pandas as pd\nimport numpy as np\n\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport plotly.express as px\nimport plotly.graph_objects as go\nimport plotly.offline as pyo\nimport plotly.figure_factory as ff\nfrom plotly.offline import init_notebook_mode, iplot, download_plotlyjs\ninit_notebook_mode(connected = True)\n","12893356":"# Function defined to check medata of a dataframe\ndef master_dataframe(dataframe):\n    df_metadata = pd.DataFrame({'Datatype': dataframe.dtypes,\n                                \"Null Values\": dataframe.isna().sum(),  \n                                \"Null %\": round(dataframe.isna().sum()\/len(dataframe)*100, 2),\n                                \"No: Of Unique Values\": dataframe.nunique()})\n    \n    df_describe = dataframe.describe(include='all').T\n    \n    df_metadata = df_metadata.join(df_describe)  \n\n    return df_metadata","4a000523":"# Load data\nraw_data = pd.read_csv('..\/input\/graduate-admissions\/Admission_Predict_Ver1.1.csv')","25ba3658":"# Calling the function to check metadata.\nmaster_dataframe(raw_data)","09c89a80":"raw_data.columns","58188b28":"# Droppig Serial No. from the data frame and removing extra space from column Chance of Admit\ndata_col_chng = raw_data.copy()\ndata_col_chng.drop(columns = ['Serial No.'], axis = 1, inplace = True)\ndata_col_chng.columns = data_col_chng.columns.str.strip()","16ec876b":"grp_UR = data_col_chng.groupby(by=['University Rating'])[\"Chance of Admit\"].mean().reset_index()\ngrp_UR['Chance of Admit'] = round(grp_UR['Chance of Admit']*100, 2)\ngrp_UR.sort_values(by=['Chance of Admit'], inplace = True)\n\ndata = [go.Bar(x = grp_UR['University Rating'], \n               y = grp_UR['Chance of Admit'], \n               text = grp_UR['Chance of Admit'],\n               textposition = 'inside',\n               marker = dict(line = {'color': 'black', 'width': 0.5}))]\n\nlayout = go.Layout(title = dict(text = 'Percentage Chance Of Admission By University Rating', \n                                font = {'size': 20},\n                                x = 0.5, \n                                y = 0.88, \n                                xanchor = 'center', \n                                yanchor = 'top'), \n                   xaxis = dict(title = 'University Rating', \n                                titlefont = {'size': 16}), \n                   yaxis = dict(title = 'Percentage Chance Of Admission', \n                                titlefont = {'size': 16}, \n                                range = [0, 100]))\n\nfig = go.Figure(data = data, \n                layout = layout)\n\niplot(fig)","7faaa9d3":"grp_LOR = data_col_chng.groupby(by=['LOR'])[\"Chance of Admit\"].mean().reset_index()\ngrp_LOR['Chance of Admit'] = round(grp_LOR['Chance of Admit']*100, 2)\ngrp_LOR.sort_values(by=['Chance of Admit'], inplace = True)\n\ndata = [go.Bar(x = grp_LOR['LOR'], \n               y = grp_LOR['Chance of Admit'], \n               text = grp_LOR['Chance of Admit'],\n               textposition = 'inside',\n               marker = dict(line = {'color': 'black', 'width': 0.5}))]\n\nlayout = go.Layout(title = dict(text = 'Percentage Chance Of Admission By Letter Of Recommendation', \n                                font = {'size': 20},\n                                x = 0.5, \n                                y = 0.88, \n                                xanchor = 'center', \n                                yanchor = 'top'), \n                   xaxis = dict(title = 'LOR', \n                                titlefont = {'size': 16}), \n                   yaxis = dict(title = 'Percentage Chance Of Admission', \n                                titlefont = {'size': 16}, \n                                range = [0, 100]))\n\nfig = go.Figure(data = data, \n                layout = layout)\n\niplot(fig)","b4750f04":"grp_SOP = data_col_chng.groupby(by=['SOP'])[\"Chance of Admit\"].mean().reset_index()\ngrp_SOP['Chance of Admit'] = round(grp_SOP['Chance of Admit']*100, 2)\ngrp_SOP.sort_values(by=['Chance of Admit'], inplace = True)\n\ndata = [go.Bar(x = grp_SOP['SOP'], \n               y = grp_SOP['Chance of Admit'], \n               text = grp_SOP['Chance of Admit'],\n               textposition = 'inside',\n               marker = dict(line = {'color': 'black', 'width': 0.5}))]\n\nlayout = go.Layout(title = dict(text = 'Percentage Chance Of Admission By SOP', \n                                font = {'size': 20},\n                                x = 0.5, \n                                y = 0.88, \n                                xanchor = 'center', \n                                yanchor = 'top'), \n                   xaxis = dict(title = 'SOP', \n                                titlefont = {'size': 16}), \n                   yaxis = dict(title = 'Percentage Chance Of Admission', \n                                titlefont = {'size': 16}, \n                                range = [0, 100]))\n\nfig = go.Figure(data = data, \n                layout = layout)\n\niplot(fig)","2a1f8812":"grp_Res = data_col_chng.groupby(by=['Research'])[\"Chance of Admit\"].mean().reset_index()\ngrp_Res['Chance of Admit'] = round(grp_Res['Chance of Admit']*100, 2)\ngrp_Res.sort_values(by=['Chance of Admit'], inplace = True)\n\ndata = [go.Pie(values = grp_Res['Chance of Admit'], \n               )]\n\nlayout = go.Layout(title = dict(text = 'Percentage Chance Of Admission By Research', \n                                font = {'size': 20},\n                                x = 0.5, \n                                y = 0.88, \n                                xanchor = 'center', \n                                yanchor = 'top')\n                  )\n\nfig = go.Figure(data = data, \n                layout = layout)\n\niplot(fig)","08cd397b":"data = [go.Scatter(x = data_col_chng['GRE Score'], \n                   y = data_col_chng['Chance of Admit']*100, \n                   mode = 'markers', \n                   marker = dict(symbol = 'circle', \n                                 size = 16, \n                                 color = data_col_chng['SOP'], \n                                 showscale = True))]\n\nlayout = go.Layout(title = dict(text = 'GRE Score Vs Chance Of Admit - SOP', \n                                x = 0.5, \n                                y = 0.88, \n                                font = {'size': 20}),\n                   xaxis = dict(title = 'GRE Score', \n                                titlefont = {'size': 16}),\n                   yaxis = dict(title = 'Chance Of Admit', \n                                titlefont = {'size': 16}),\n                   template = 'plotly_dark')\n\nfig = go.Figure(data = data, \n                layout = layout)\n\niplot(fig)","d76ce680":"data = [go.Scatter(x = data_col_chng['CGPA'], \n                   y = data_col_chng['Chance of Admit']*100, \n                   mode = 'markers', \n                   marker = dict(symbol = 'circle', \n                                 size = 16, \n                                 color = data_col_chng['University Rating'], \n                                 showscale = True))]\n\nlayout = go.Layout(title = dict(text = 'CGPA Vs Chance Of Admit - University Rating', \n                                x = 0.5, \n                                y = 0.88, \n                                font = {'size': 20}),\n                   xaxis = dict(title = 'CGPA', \n                                titlefont = {'size': 16}),\n                   yaxis = dict(title = 'Chance Of Admit', \n                                titlefont = {'size': 16}),\n                   template = 'plotly_dark')\n\nfig = go.Figure(data = data, \n                layout = layout)\n\niplot(fig)","c693f7dc":"data = [go.Scatter(x = data_col_chng['TOEFL Score'], \n                   y = data_col_chng['Chance of Admit']*100, \n                   mode = 'markers', \n                   marker = dict(symbol = 'circle', \n                                 size = 16, \n                                 color = data_col_chng['LOR'], \n                                 showscale = True))]\n\nlayout = go.Layout(title = dict(text = 'TOEFL Vs Chance Of Admit - LOR', \n                                x = 0.5, \n                                y = 0.88, \n                                font = {'size': 20}),\n                   xaxis = dict(title = 'TOEFL', \n                                titlefont = {'size': 16}),\n                   yaxis = dict(title = 'Chance Of Admit', \n                                titlefont = {'size': 16}),\n                   template = 'plotly_dark')\n\nfig = go.Figure(data = data, \n                layout = layout)\n\niplot(fig)","aecc979c":"# Checking for outliers and the scale of values of variables.\ndata = []\nfor i in data_col_chng.columns[:-1]:\n    data .append(go.Box(y = data_col_chng[i], \n                        marker = dict(line = {'color': 'black', 'width': 0.5}, \n                                      opacity = 0.5), \n                        name = str(i), \n                        boxpoints = 'outliers', \n                        notched = True))\n\nlayout = go.Layout(title = dict(text = 'Checking the range and scale of all the features.', \n                                x = 0.5, \n                                y = 0.88))\n\nfig = go.Figure(data = data, \n                layout = layout)\n\niplot(fig)","bf047235":"from sklearn.preprocessing import StandardScaler\ndata_scaled_using_ss = data_col_chng.copy()\nss_for_df = StandardScaler()\ndata_scaled_using_ss[['GRE Score', 'TOEFL Score']] = ss_for_df.fit_transform(data_col_chng[['GRE Score', 'TOEFL Score']]) ","931f8dac":"data = []\nfor i in data_scaled_using_ss.columns[:-1]:\n    data .append(go.Box(y = data_scaled_using_ss[i], \n                        marker = dict(line = {'color': 'black', 'width': 0.5}, \n                                      opacity = 0.5), \n                        name = str(i), \n                        boxpoints = 'outliers', \n                        notched = True))\n\nlayout = go.Layout(title = dict(text = 'Checking the range and scale of all the features.', \n                                x = 0.5, \n                                y = 0.88))\n\nfig = go.Figure(data = data, \n                layout = layout)\n\niplot(fig)","d6cf2456":"data_col_chng.columns[:-1]","4ac46beb":"from sklearn.preprocessing import MinMaxScaler\ndata_scaled_using_mms = data_col_chng.copy()\nmms_for_df = MinMaxScaler()\ndata_scaled_using_mms[data_scaled_using_mms.columns[:-1]] = mms_for_df.fit_transform(data_col_chng[data_scaled_using_mms.columns[:-1]]) ","c607526a":"data = []\nfor i in data_scaled_using_mms.columns[:-1]:\n    data .append(go.Box(y = data_scaled_using_mms[i], \n                        marker = dict(line = {'color': 'black', 'width': 0.5}, \n                                      opacity = 0.5), \n                        name = str(i), \n                        boxpoints = 'outliers', \n                        notched = True))\n\nlayout = go.Layout(title = dict(text = 'Checking the range and scale of all the features.', \n                                x = 0.5, \n                                y = 0.88))\n\nfig = go.Figure(data = data, \n                layout = layout)\n\niplot(fig)","bfebbe26":"# Lets split out dependent and independent variables.\nX = data_col_chng.iloc[:, :-1].values\ny = data_col_chng.iloc[:, -1].values\nprint('Shape of X: ', X.shape)\nprint('Shape of y: ', y.shape)","351f8f09":"# Lets split our dataset into train & test data.\nfrom sklearn.model_selection import train_test_split\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.2, random_state = 42)\nprint('Shape of X_train: ', X_train.shape)\nprint('Shape of X_test: ', X_test.shape)\nprint('Shape of y_train: ', y_train.shape)\nprint('Shape of y_test: ', y_test.shape)","db4cf00b":"X_train_ss_scaled = X_train\nX_test_ss_scaled = X_test\nX_train_mms_scaled = X_train\nX_test_mms_scaled = X_test\n\ny_train_ss_scaled = y_train\ny_test_ss_scaled = y_test\ny_train_mms_scaled = y_train\ny_test_mms_scaled = y_test","beee0398":"# Lets scale our data using MinMaxScaler.\nmms_train_test = MinMaxScaler()\nX_train_mms_scaled[:, :-1] = mms_train_test.fit_transform(X_train[:, :-1])\nX_test_mms_scaled[:, :-1] = mms_train_test.transform(X_test[:, :-1])","58d77972":"ss_train_test = StandardScaler()\nX_train_ss_scaled[:, :-1] = ss_train_test.fit_transform(X_train[:, :-1])\nX_test_ss_scaled[:, :-1] = ss_train_test.transform(X_test[:, :-1])","92690ebb":"# Creating a Multi-Linear Regression Model with MinMaxScaler\nfrom sklearn.linear_model import LinearRegression\nfrom sklearn.metrics import r2_score\nl_regressor = LinearRegression()\nl_regressor.fit(X_train_mms_scaled, y_train)\ny_pred_l_reg = l_regressor.predict(X_test_mms_scaled)\nprint(r2_score(y_test, y_pred_l_reg))","09f3d095":"# Creating a Multi-Linear Regression Model with StandardScaler\nfrom sklearn.linear_model import LinearRegression\nfrom sklearn.metrics import r2_score\nl_regressor_ss = LinearRegression()\nl_regressor_ss.fit(X_train_ss_scaled, y_train)\ny_pred_l_reg_ss = l_regressor_ss.predict(X_test_ss_scaled)\nprint(r2_score(y_test, y_pred_l_reg_ss))","1fe078c5":"data = [go.Scatter(x = y_test, \n                   y = y_pred_l_reg, \n                   mode = 'markers', \n                   marker = dict(symbol = 'circle', \n                                 size = 16, \n                                 color = 'skyblue'))]\n\nlayout = go.Layout(title = dict(text = 'Linear Regression - Actual Values vs Predicted Values', \n                                x = 0.5, \n                                y = 0.88, \n                                font = {'size': 20}),\n                   xaxis = dict(title = 'Actual Value', \n                                titlefont = {'size': 16}, \n                                range = [0, 1]),\n                   yaxis = dict(title = 'Predicted Value', \n                                titlefont = {'size': 16}, \n                                range = [0, 1]),\n                   template = 'plotly_dark')\n\nfig = go.Figure(data = data, \n                layout = layout)\n\niplot(fig)","9b547b73":"from sklearn.preprocessing import PolynomialFeatures\npoly_reg_mms = PolynomialFeatures(degree = 2)\nX_poly_mms = poly_reg_mms.fit_transform(X_train_mms_scaled)\nX_test_poly_mms = poly_reg_mms.transform(X_test_mms_scaled)\npoly_regressor_mms = LinearRegression()\npoly_regressor_mms.fit(X_poly_mms, y_train)\ny_pred_poly_mms = poly_regressor_mms.predict(X_test_poly_mms)\nprint(r2_score(y_test, y_pred_poly_mms))","ea390e08":"poly_reg_ss = PolynomialFeatures(degree = 2)\nX_poly_ss = poly_reg_ss.fit_transform(X_train_ss_scaled)\nX_test_poly_ss = poly_reg_ss.transform(X_test_ss_scaled)\npoly_regressor_ss = LinearRegression()\npoly_regressor_ss.fit(X_poly_ss, y_train)\ny_pred_poly_ss = poly_regressor_ss.predict(X_test_poly_ss)\nprint(r2_score(y_test, y_pred_poly_ss))","f72b6d1c":"data = [go.Scatter(x = y_test, \n                   y = y_pred_poly_ss, \n                   mode = 'markers', \n                   marker = dict(symbol = 'circle', \n                                 size = 16, \n                                 color = 'skyblue'))]\n\nlayout = go.Layout(title = dict(text = 'Polynomial Regression - Actual Values vs Predicted Values', \n                                x = 0.5, \n                                y = 0.88, \n                                font = {'size': 20}),\n                   xaxis = dict(title = 'Actual Value', \n                                titlefont = {'size': 16}, \n                                range = [0, 1]),\n                   yaxis = dict(title = 'Predicted Value', \n                                titlefont = {'size': 16}, \n                                range = [0, 1]),\n                   template = 'plotly_dark')\n\nfig = go.Figure(data = data, \n                layout = layout)\n\niplot(fig)","332ebcf9":"mms_y_train = MinMaxScaler()\ny_train_mms_scaled = mms_y_train.fit_transform(y_train.reshape(-1,1))\n\nfrom sklearn.svm import SVR\nsvr_regressor_mms = SVR(kernel = 'rbf')\nsvr_regressor_mms.fit(X_train_mms_scaled, y_train_mms_scaled.ravel())\ny_pred_svr_mms = svr_regressor_mms.predict(X_test_mms_scaled)\ny_pred_svr_mms = mms_y_train.inverse_transform(y_pred_svr_mms.reshape(-1, 1))\nprint(r2_score(y_test, y_pred_svr_mms))","b816f370":"ss_y_train = StandardScaler()\ny_train_ss_scaled = ss_y_train.fit_transform(y_train.reshape(-1,1))\n\nfrom sklearn.svm import SVR\nsvr_regressor_ss = SVR(kernel = 'rbf')\nsvr_regressor_ss.fit(X_train_ss_scaled, y_train_ss_scaled.ravel())\ny_pred_svr_ss = svr_regressor_ss.predict(X_test_ss_scaled)\ny_pred_svr_ss = ss_y_train.inverse_transform(y_pred_svr_ss.reshape(-1, 1))\nprint(r2_score(y_test, y_pred_svr_ss))","e239245f":"data = [go.Scatter(x = y_test, \n                   y = y_pred_svr.ravel(), \n                   mode = 'markers', \n                   marker = dict(symbol = 'circle', \n                                 size = 16, \n                                 color = 'skyblue'))]\n\nlayout = go.Layout(title = dict(text = 'SVR - Actual Values vs Predicted Values', \n                                x = 0.5, \n                                y = 0.88, \n                                font = {'size': 20}),\n                   xaxis = dict(title = 'Actual Value', \n                                titlefont = {'size': 16}, \n                                range = [0, 1]),\n                   yaxis = dict(title = 'Predicted Value', \n                                titlefont = {'size': 16}, \n                                range = [0, 1]),\n                   template = 'plotly_dark')\n\nfig = go.Figure(data = data, \n                layout = layout)\n\niplot(fig)","14afacb4":"# Decision Tree Regression with MinMaxScaled Data\nfrom sklearn.tree import DecisionTreeRegressor\ndtr_scaled_mms = DecisionTreeRegressor(random_state = 0)\ndtr_scaled_mms.fit(X_train_mms_scaled, y_train)\ny_pred_dtrs_mms = dtr_scaled_mms.predict(X_test_mms_scaled)\nprint(r2_score(y_test, y_pred_dtrs_mms))","921388cd":"# Decision Tree Regression with StandardScaled Data\ndtr_scaled_ss = DecisionTreeRegressor(random_state = 0)\ndtr_scaled_ss.fit(X_train_ss_scaled, y_train)\ny_pred_dtrs_ss = dtr_scaled_ss.predict(X_test_ss_scaled)\nprint(r2_score(y_test, y_pred_dtrs_ss))","0f245218":"# Decision Tree Regression with unscaled data\nfrom sklearn.tree import DecisionTreeRegressor\ndtr_unscaled = DecisionTreeRegressor(random_state = 0)\ndtr_unscaled.fit(X_train, y_train)\ny_pred_dtr = dtr_unscaled.predict(X_test)\nprint(r2_score(y_test, y_pred_dtr))","eb1f331d":"# Random Forest model with data scaled with MinMaxScaler\nfrom sklearn.ensemble import RandomForestRegressor\nrf_mms_regressor = RandomForestRegressor(n_estimators = 10, random_state = 0)\nrf_mms_regressor.fit(X_train_mms_scaled, y_train)\ny_pred_rf_mms = rf_mms_regressor.predict(X_test_mms_scaled)\nprint(r2_score(y_test, y_pred_rf_mms))","8ef10a74":"# Random Forest model with data scaled with StandardScaled Data\nrf_ss_regressor = RandomForestRegressor(n_estimators = 10, random_state = 0)\nrf_ss_regressor.fit(X_train_ss_scaled, y_train)\ny_pred_rf_ss = rf_ss_regressor.predict(X_test_ss_scaled)\nprint(r2_score(y_test, y_pred_rf_ss))","3b606e77":"# Random Forest model with unscaled data\nrf_regressor = RandomForestRegressor(n_estimators = 10, random_state = 0)\nrf_regressor.fit(X_train, y_train)\ny_pred_rf = rf_regressor.predict(X_test)\nprint(r2_score(y_test, y_pred_rf))","295a9bbe":"If we standardize the features GRE Score & TOEFL Score only using Standard Scaler we can see they appear to be in a scale near by other features. \nBut now we have negative values for them but all other features have positive values only.","b91418cd":"# Lets check how our categorical variables affect the Chance Of Admit.","15f2e19c":"We have both categorical and numerical data in the dataset. Below are the independent variables:\n\nCategorical Variables : \n1. SOP (Ordinal)\n2. LOR (Ordinal)\n3. Research (Nominal)\n4. University Rating (Ordinal)\n\nNumerical Variables : \n1. GRE Score (Continous)\n2. TOEFL Score (Continous)\n3. CGPA (Continous)\n\nDependent Variable : Chance of Admit","4e57135d":"We shall standardize the GRE Score & TOEFL Score so that the scale of all the variables are in same range.","6d2f4f00":"# Lets check correlation between different features.","c4d2d4b3":"# Decison Tree Regressoion","74ad3d06":"# Random Forest Regression","825a0d6d":"# Multi-Linear Regression Model","b951595f":"# Polynomial Linear Regression","4580ce46":"# Support Vector Regression"}}