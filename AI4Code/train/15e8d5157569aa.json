{"cell_type":{"8471ee75":"code","3eb97f16":"code","0ca1b94d":"code","92e65db9":"code","66fd97ee":"code","de7995a8":"code","cfcf70df":"code","12e8d7ce":"code","e69accd4":"code","158bd2ab":"code","00ce21eb":"code","ba7a869b":"code","a9a0ae13":"code","14b615ea":"code","f6cc9d4a":"code","3e89a8ba":"code","93e1811e":"code","ddad52ca":"code","cb04c1c6":"code","d8c46f50":"code","3d63801e":"code","487444e0":"code","8b1c727d":"code","40859acb":"code","92cabfdd":"code","ddd6f13f":"code","6e611115":"code","08df65e1":"code","f5382b32":"code","b7f9d2e7":"code","72d3c205":"code","0d3f88fc":"code","90293827":"code","d84d883e":"code","3f89d744":"code","ec102179":"code","8a6509d9":"code","b7358688":"code","d6e55d12":"code","88046086":"markdown","220e78f5":"markdown","c42493ac":"markdown","8db4ba00":"markdown","8df45444":"markdown","21a11af2":"markdown","e57d542f":"markdown","5ac48887":"markdown","3c351956":"markdown","f7fc2e6f":"markdown","7bf37d74":"markdown","ea16b4f6":"markdown","f61c0475":"markdown","ce9e35f0":"markdown","9ee2b25a":"markdown"},"source":{"8471ee75":"# If condition and for loop\nlst = [2,6,3,7,8,3,1,5,4,7,3,8,2,7]\nless_than_5 = 0\ngreater_than_5 = 0\nfor i in lst:\n    if i>5:\n        greater_than_5 = greater_than_5 + i\n    else:\n        less_than_5 = less_than_5 + i\nprint(greater_than_5,  less_than_5)","3eb97f16":"def value(lst):\n    less_than_5 = 0\n    greater_than_5 = 0\n    for i in lst:\n        if i>5:\n            greater_than_5 = greater_than_5 + i\n        else:\n            less_than_5 = less_than_5 + i\n    return(greater_than_5,  less_than_5)\nvalue([2,6,3,7,8,3,1,5,4,7,3,8,2,7])","0ca1b94d":"def hello_world():\n    return ('Hello')","92e65db9":"val = hello_world()\nprint(val)","66fd97ee":"#name is a positional argument\n#age is a keyword argument\ndef new_func(name, age=21):\n    print('My name is {} and age is {}'.format(name, age))","de7995a8":"new_func('Bhavya',22)","cfcf70df":"# * means positional arg\n# ** means keyword arg\ndef func(*args,**kwargs):\n    print(args)\n    print(kwargs)","12e8d7ce":"func('Bhavya','Joshi',age=21,dob=2000)","e69accd4":"lst = ['Bhavya', 'Joshi']\ndict_arg = {'age': 21, 'dob': 2000}","158bd2ab":"#It by default considers as positional arguments\nfunc(lst, dict_arg)","00ce21eb":"func(*lst, **dict_arg)","ba7a869b":"def add_num(a,b):\n    return a+b\nadd_num(5,4)","a9a0ae13":"addition = lambda a,b: a+b","14b615ea":"addition(12,14)","f6cc9d4a":"def even(num):\n    if num%2==0:\n        return True\neven(44)","3e89a8ba":"even = lambda num: num%2==0","93e1811e":"even(44)","ddad52ca":"def even_odd(num):\n    if num%2 == 0:\n        return '{} is even'.format(num)\n    else:\n        return '{} is odd'.format(num)","cb04c1c6":"even_odd(75)","d8c46f50":"lst = [3,5,6,2,5,4,3,1,7,9,0,7,5,4,3,1]","3d63801e":"list(map(even_odd,lst))","487444e0":"list(filter(even_odd,lst))","8b1c727d":"list(filter(lambda num:num%2==0, lst))","40859acb":"list(map(lambda num:num%2==0,lst))","92cabfdd":"lst1 = []\ndef lst_square(lst):\n    for i in lst:\n        lst1.append(i*i)\n    return lst1","ddd6f13f":"lst_square([1,2,3,4,5,6,7,8,9])","6e611115":"lst = [1,2,3,4,5,6,7,8,9]\nlst1 = [i*i for i in lst]","08df65e1":"lst1","f5382b32":"lst1 = [i*i for i in lst if i%2==0]","b7f9d2e7":"lst1","72d3c205":"print('Hello')","0d3f88fc":"str = 'Bhavya Joshi'\nprint(str)","90293827":"def name_of_person(name,percent):\n    return 'Hii {}, Congratulations for {} percentage!'.format(name,percent)","d84d883e":"name_of_person('Bhavya',99)","3f89d744":"#List is iterable\nlst = [1,2,3,4,5,6,7,8,9]\nfor i in lst:\n    print(i)","ec102179":"lst1 = iter(lst)","8a6509d9":"lst1","b7358688":"next(lst1)","d6e55d12":"for i in lst1:\n    print(i)","88046086":"### List Comprehension","220e78f5":"### Map Functions in Python ","c42493ac":"List comprehension provides a concise way to create lists. It consists of a bracket containing an expression followed by a for clause, then zero or more for clause or if clauses. The expressions can be anything, which means you can put in all kinds of objects in list.","8db4ba00":"#### Syntax of lambda\n\nlambda input: operation","8df45444":"The above even_odd function takes only one argument. If we want to get even odd for the above list then we have to iterate using for loop. To avoid that use map function","21a11af2":"### Python List iterables vs iterators","e57d542f":"Anonymous function<br>\nA function with no name<br>\nfaster than normal function","5ac48887":"#### Syntax\n\nmap(function, iterables)","3c351956":"A function is a block of code which only runs when it is called.\n\nYou can pass data, known as parameters, into a function.\n\nA function can return data as a result.","f7fc2e6f":"### For loop, If else, Functions ","7bf37d74":"### Lambda function","ea16b4f6":"Difference between map and filter is that map will print whatever is there in return statement but filter will return the input values for which the condition holds true\n","f61c0475":"### String Formatting in Python","ce9e35f0":"Use keyword ***def*** to define a function\n\nSyntax:\n\ndef(parameter1, parameter2, parameter3,..):<br>\n    body<br>\n    return  #optional","9ee2b25a":"### Filter in Python "}}