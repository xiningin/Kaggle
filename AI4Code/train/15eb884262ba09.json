{"cell_type":{"a516b829":"code","2b3a83f3":"code","2c56328d":"code","b1c89106":"code","27a2578e":"code","1b171a15":"code","9779269f":"code","f63f5b8b":"code","29de1b4f":"code","358a3839":"code","212cda06":"code","deb8c006":"code","8676b7a4":"code","4ca528b3":"code","d0a76aa6":"markdown","91b22c99":"markdown","3cd2d00a":"markdown","17ecc0d8":"markdown","149c21e3":"markdown","ac66790a":"markdown","bb942395":"markdown"},"source":{"a516b829":"#Imports\nimport numpy as np\nimport pandas as pd\n\n#Visualizations\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n%matplotlib inline\nplt.rcParams['figure.figsize'] = [12,6]\nsns.set(style=\"darkgrid\")\n\n#Models\nfrom sklearn.cluster import KMeans\n\n#Quality of life\nimport warnings\nwarnings.filterwarnings('ignore')","2b3a83f3":"df = train_df = pd.read_csv(\"..\/input\/world-cities\/worldcities.csv\")","2c56328d":"df.head()","b1c89106":"sns.scatterplot(x='lng', y='lat', data=df)\nplt.ylabel('Longitude')\nplt.xlabel('Latitude')\nplt.tick_params(left=False,\n                bottom=False,\n                labelleft=False,\n                labelbottom=False)\nplt.title('World map as a Scatterplot');","27a2578e":"X = df.loc[:, ['lat', 'lng']].values","1b171a15":"WCSS = []\nfor i in range(1,11):\n    kmeans = KMeans(n_clusters=i, init='k-means++', random_state=0)\n    kmeans.fit(X)\n    WCSS.append(kmeans.inertia_)\nplt.plot(range(1,11),WCSS)\nplt.title('Elbow Method')\nplt.xlabel('Number of Clusters')\nplt.ylabel('WCSS')\nplt.show()","9779269f":"kmeans = KMeans(n_clusters=6, init='k-means++', random_state=0)\ny_kmeans = kmeans.fit_predict(X)","f63f5b8b":"plt.scatter(X[y_kmeans == 0, 1], X[y_kmeans == 0, 0], s = 1, c = 'red', label = 'Cluster 1')\nplt.scatter(X[y_kmeans == 1, 1], X[y_kmeans == 1, 0], s = 1, c = 'blue', label = 'Cluster 2')\nplt.scatter(X[y_kmeans == 2, 1], X[y_kmeans == 2, 0], s = 1, c = 'green', label = 'Cluster 3')\nplt.scatter(X[y_kmeans == 3, 1], X[y_kmeans == 3, 0], s = 1, c = 'cyan', label = 'Cluster 4')\nplt.scatter(X[y_kmeans == 4, 1], X[y_kmeans == 4, 0], s = 1, c = 'magenta', label = 'Cluster 5')\nplt.scatter(X[y_kmeans == 5, 1], X[y_kmeans == 5, 0], s = 1, c = 'yellow', label = 'Cluster 6')\nplt.scatter(kmeans.cluster_centers_[:, 0], kmeans.cluster_centers_[:, 1], s = 30, c = 'black', label = 'Centroids')\nplt.ylabel('Longitude')\nplt.xlabel('Latitude')\nplt.tick_params(left=False,\n                bottom=False,\n                labelleft=False,\n                labelbottom=False)\nplt.title('The World as we know it (Random Centroids)');\nplt.legend()\nplt.show()","29de1b4f":"continental_centroids = np.array([\n#North America: \n[-100.546666667, 46.0730555556],\n#South America:\n[-57.6561111111, -14.6047222222],\n#Africa:\n[21.0936111111, 7.18805555556],\n#Europe:\n[9.14055555556, 48.6908333333],\n#Asia:\n[89.2966666667, 29.8405555556],\n#Oceania:\n[138.515555556, -18.3127777778],\n])","358a3839":"kmeans = KMeans(n_clusters=6, init=continental_centroids, random_state=6)\ny_kmeans = kmeans.fit_predict(X)\n\nkmeans.cluster_centers_ = continental_centroids #setting clusters centroids to middle of continents","212cda06":"plt.scatter(X[y_kmeans == 0, 1], X[y_kmeans == 0, 0], s = 1, c = 'red', label = 'Cluster 1')\nplt.scatter(X[y_kmeans == 1, 1], X[y_kmeans == 1, 0], s = 1, c = 'blue', label = 'Cluster 2')\nplt.scatter(X[y_kmeans == 2, 1], X[y_kmeans == 2, 0], s = 1, c = 'green', label = 'Cluster 3')\nplt.scatter(X[y_kmeans == 3, 1], X[y_kmeans == 3, 0], s = 1, c = 'cyan', label = 'Cluster 4')\nplt.scatter(X[y_kmeans == 4, 1], X[y_kmeans == 4, 0], s = 1, c = 'magenta', label = 'Cluster 5')\nplt.scatter(X[y_kmeans == 5, 1], X[y_kmeans == 5, 0], s = 1, c = 'yellow', label = 'Cluster 6')\nplt.scatter(kmeans.cluster_centers_[:, 0], kmeans.cluster_centers_[:, 1], s = 30, c = 'black', label = 'Centroids')\nplt.ylabel('Longitude')\nplt.xlabel('Latitude')\nplt.tick_params(left=False,\n                bottom=False,\n                labelleft=False,\n                labelbottom=False)\nplt.title('The World as we know it (Predefined Centroids)');\nplt.legend()\nplt.show()","deb8c006":"from math import sin, cos, sqrt, atan2, radians\n\nR = 6373.0\n#X.shape[0]\nfor i in range(3):\n    lat1 = radians(continental_centroids[0][0])\n    lon1 = radians(continental_centroids[0][1])\n    lat2 = radians(X[i][0])\n    lon2 = radians(X[i][1])\n    \n    dlon = lon2 - lon1\n    dlat = lat2 - lat1\n\n    a = sin(dlat \/ 2)**2 + cos(lat1) * cos(lat2) * sin(dlon \/ 2)**2\n    c = 2 * atan2(sqrt(a), sqrt(1 - a))\n\n    distance = R * c\n\n    print(\"Result:\", distance)","8676b7a4":"continental_centroids[0][0]","4ca528b3":"from math import sin, cos, sqrt, atan2, radians\n\n# approximate radius of earth in km\nR = 6373.0\n\nlat1 = radians(52.2296756)\nlon1 = radians(21.0122287)\nlat2 = radians(52.406374)\nlon2 = radians(16.9251681)\n\ndlon = lon2 - lon1\ndlat = lat2 - lat1\n\na = sin(dlat \/ 2)**2 + cos(lat1) * cos(lat2) * sin(dlon \/ 2)**2\nc = 2 * atan2(sqrt(a), sqrt(1 - a))\n\ndistance = R * c\n\nprint(\"Result:\", distance)\nprint(\"Should be:\", 278.546, \"km\")","d0a76aa6":"**A brief visualization of the world's continents in one of the worst ways imaginable.**","91b22c99":"**The World as we know it (Random Centroids)**","3cd2d00a":"Inspired by [K-Means Clustering : World Map by Mutyala Yogita](https:\/\/www.kaggle.com\/yogitamutyala\/k-means-clustering-world-map)","17ecc0d8":"It appears our optimal number of continents would be 3, but let's stick to 6 for now (Antartica has fallen off the map).","149c21e3":"Not too bad, though not quite the continents we recognize on a proper world map..","ac66790a":"**The World as we know it (Predifined Centroids)**","bb942395":"Slight improvements on the Eurasian front, Hawaii is now a continent.\n\nIt appears that on a flat earth clustering continents won't work.."}}