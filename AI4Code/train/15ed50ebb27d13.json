{"cell_type":{"9a1243fa":"code","f922ad1d":"code","a48724d7":"code","3c0ad97e":"code","61483828":"code","6174e1b3":"code","acba30c2":"code","ab1706f5":"code","87325321":"code","2f044e0e":"code","327e1135":"code","7749502a":"code","b106f433":"code","9b9cad76":"code","dd76d73d":"code","0a1c510e":"markdown","c5669194":"markdown","4d726a9a":"markdown","372ea032":"markdown","56a6615e":"markdown","c1c9ad27":"markdown"},"source":{"9a1243fa":"!pip3 install arch yfinance pmdarima","f922ad1d":"import numpy as np\nimport pandas as pd\nimport scipy\nimport statsmodels.api as sm\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport sklearn\nfrom statsmodels.tsa.arima_model import ARIMA\nfrom arch import arch_model\nimport seaborn as sns\nimport yfinance\nimport warnings\nwarnings.filterwarnings(\"ignore\")\nsns.set()","a48724d7":"raw_data = yfinance.download (tickers = \"^GSPC ^FTSE ^N225 ^GDAXI\", start = \"1994-01-07\", end = \"2020-06-30\", \n                              interval = \"1d\", group_by = 'ticker', auto_adjust = True, treads = True)","3c0ad97e":"df_comp = raw_data.copy()","61483828":"df_comp['spx'] = df_comp['^GSPC'].Close[:]\ndf_comp['dax'] = df_comp['^GDAXI'].Close[:]\ndf_comp['ftse'] = df_comp['^FTSE'].Close[:]\ndf_comp['nikkei'] = df_comp['^N225'].Close[:]","6174e1b3":"df_comp = df_comp.iloc[1:]\ndel df_comp['^N225']\ndel df_comp['^GSPC']\ndel df_comp['^GDAXI']\ndel df_comp['^FTSE']\ndf_comp=df_comp.asfreq('b')\ndf_comp=df_comp.fillna(method='ffill')","acba30c2":"df_comp['ret_spx'] = df_comp.spx.pct_change(1)*100\ndf_comp['ret_ftse'] = df_comp.ftse.pct_change(1)*100\ndf_comp['ret_dax'] = df_comp.dax.pct_change(1)*100\ndf_comp['ret_nikkei'] = df_comp.nikkei.pct_change(1)*100","ab1706f5":"size = int(len(df_comp)*0.8)\ndf, df_test = df_comp.iloc[:size], df_comp.iloc[size:]","87325321":"from pmdarima.arima import auto_arima","2f044e0e":"model_auto = auto_arima(df.ret_ftse[1:])","327e1135":"model_auto","7749502a":"model_auto.summary()","b106f433":"model_auto = auto_arima(df_comp.ret_ftse[1:], exogenous = df_comp[['ret_spx', 'ret_dax', 'ret_nikkei']][1:], m = 5,\n                       max_order = None, max_p = 7, max_q = 7, max_d = 2, max_P = 4, max_Q = 4, max_D = 2,\n                       maxiter = 50, alpha = 0.05, n_jobs = -1, trend = 'ct', information_criterion = 'oob',\n                       out_of_sample = int(len(df_comp)*0.2))\n\n# exogenous -> outside factors (e.g other time series)\n# m -> seasonal cycle length\n# max_order -> maximum amount of variables to be used in the regression (p + q)\n# max_p -> maximum AR components\n# max_q -> maximum MA components\n# max_d -> maximum Integrations\n# maxiter -> maximum iterations we're giving the model to converge the coefficients (becomes harder as the order increases)\n# alpha -> level of significance, default is 5%, which we should be using most of the time\n# n_jobs -> how many models to fit at a time (-1 indicates \"as many as possible\")\n# trend -> \"ct\" usually\n# information_criterion -> 'aic', 'aicc', 'bic', 'hqic', 'oob' \n#        (Akaike Information Criterion, Corrected Akaike Information Criterion,\n#        Bayesian Information Criterion, Hannan-Quinn Information Criterion, or\n#        \"out of bag\"--for validation scoring--respectively)\n# out_of_smaple -> validates the model selection (pass the entire dataset, and set 20% to be the out_of_sample_size)","9b9cad76":"model_auto.summary()","dd76d73d":"plt.figure(figsize=(15,7))\nplt.plot(model_auto.resid())\nplt.title(\"ARIMA MODEL ERRORS\", size=25)\nplt.show()","0a1c510e":"### Splitting the Data","c5669194":"### Important Arguments","4d726a9a":"### Fitting a Model","372ea032":"### Packages","56a6615e":"### Creating Returns","c1c9ad27":"### Loading the data"}}