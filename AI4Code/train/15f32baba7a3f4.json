{"cell_type":{"23386aae":"code","4244d11c":"code","bc3eea3c":"code","aea2a3a6":"code","6f2f0628":"code","0b02314d":"code","4b258fb2":"code","3275ced0":"code","701f9c6a":"code","02414f34":"code","3ddcf43f":"code","ed0b95b7":"code","ba8aedda":"code","9cae7460":"code","afb61763":"code","22952d83":"code","859242c7":"code","1c28c566":"code","cb2ccab3":"code","bb3b5875":"code","a36bcd0a":"code","ee0da1c1":"code","3075da69":"code","88fd7c6c":"code","660dbebd":"code","b46f4855":"code","832751c7":"code","d84044ec":"code","a301e76f":"markdown","0c6c9f5c":"markdown","90c07fc5":"markdown","852a3907":"markdown","8f4096de":"markdown","7470f9cc":"markdown","77f39d91":"markdown","8dc6ae3d":"markdown"},"source":{"23386aae":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom sklearn.ensemble import RandomForestRegressor\nfrom xgboost import XGBRegressor\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","4244d11c":"train_data = pd.read_csv('\/kaggle\/input\/house-prices-advanced-regression-techniques\/train.csv')\ntrain_data.head()","bc3eea3c":"test_data = pd.read_csv('\/kaggle\/input\/house-prices-advanced-regression-techniques\/test.csv')\ntest_data","aea2a3a6":"train_data.describe()","6f2f0628":"train_data.columns","0b02314d":"train_data.shape","4b258fb2":"test_data.shape","3275ced0":"#Checking columns with missing data\nMiss_Percent=100*(train_data.isnull().sum()\/len(train_data))\n\n#Sorting the data columns by their percentage in descending order (big to small)\n# by using Miss_Percent>0 it takes values,ore than 0\n# round(1) this is used to round the value to one decimal point .0\nMiss_Percent=Miss_Percent[Miss_Percent>0].sort_values(ascending=False).round(1)\n\n#Creating a dataframe to show percentage of missing data and its respective data column in table\nDataFrame=pd.DataFrame(Miss_Percent)\nmiss_percent_table=DataFrame.rename(columns={0:'% of Missing Values'})\nMissPercent=miss_percent_table\n\n#Displaying Missing Value table\nMissPercent","701f9c6a":"train_data[\"FireplaceQu\"].unique()","02414f34":"test_data[\"FireplaceQu\"].unique()","3ddcf43f":"train_data['GarageType'] = train_data['GarageType'].fillna('None')\ntrain_data['GarageYrBlt'] = train_data['GarageYrBlt'].fillna(train_data['GarageYrBlt'].median())\ntrain_data['GarageFinish'] = train_data['GarageFinish'].fillna('None')\ntrain_data['GarageCond'] = train_data['GarageCond'].fillna('None')\ntrain_data['BsmtExposure'] = train_data['BsmtExposure'].fillna('None')\ntrain_data['BsmtFinType2'] = train_data['BsmtFinType2'].fillna('None')\ntrain_data['BsmtFinType1'] = train_data['BsmtFinType1'].fillna('None')\ntrain_data['BsmtCond'] = train_data['BsmtCond'].fillna('None')\ntrain_data['BsmtQual'] = train_data['BsmtQual'].fillna('None')\ntrain_data['MasVnrArea'] = train_data['MasVnrArea'].fillna(0)\ntrain_data['MasVnrType'] = train_data['GarageType'].fillna('Others')\ntrain_data['LotFrontage'] = train_data['LotFrontage'].fillna(train_data['LotFrontage'].median())\ntrain_data['FireplaceQu'] = train_data['FireplaceQu'].fillna('None')","ed0b95b7":"test_data['GarageType'] = test_data['GarageType'].fillna('None')\ntest_data['GarageYrBlt'] = test_data['GarageYrBlt'].fillna(train_data['GarageYrBlt'].median())\ntest_data['GarageFinish'] = test_data['GarageFinish'].fillna('None')\ntest_data['GarageCond'] = test_data['GarageCond'].fillna('None')\ntest_data['BsmtExposure'] = test_data['BsmtExposure'].fillna('None')\ntest_data['BsmtFinType2'] = test_data['BsmtFinType2'].fillna('None')\ntest_data['BsmtFinType1'] = test_data['BsmtFinType1'].fillna('None')\ntest_data['BsmtCond'] = test_data['BsmtCond'].fillna('None')\ntest_data['BsmtQual'] = test_data['BsmtQual'].fillna('None')\ntest_data['MasVnrArea'] = test_data['MasVnrArea'].fillna(0)\ntest_data['MasVnrType'] = test_data['GarageType'].fillna('Others')\ntest_data['LotFrontage'] = test_data['LotFrontage'].fillna(test_data['LotFrontage'].median())\ntest_data['FireplaceQu'] = test_data['FireplaceQu'].fillna('None')","ba8aedda":"feature = ['Id', 'MSSubClass', 'MSZoning', 'LotArea', 'Street', 'LotShape',\n       'LandContour', 'LotConfig', 'LandSlope', 'Neighborhood',\n       'Condition1', 'BldgType', 'OverallQual',\n       'OverallCond', 'YearBuilt', 'YearRemodAdd', 'RoofStyle',\n       'ExterQual', 'ExterCond', 'Foundation',\n       'BsmtFinSF1', 'BsmtFinSF2', 'BsmtUnfSF', 'TotalBsmtSF',\n       'HeatingQC', 'CentralAir', '1stFlrSF', '2ndFlrSF', 'LowQualFinSF',\n       'GrLivArea', 'BsmtFullBath', 'BsmtHalfBath', 'FullBath', 'HalfBath',\n       'BedroomAbvGr', 'KitchenAbvGr', 'KitchenQual', 'TotRmsAbvGrd',\n       'Functional', 'Fireplaces', 'GarageCars', 'GarageArea', 'PavedDrive',\n       'WoodDeckSF', 'OpenPorchSF', 'EnclosedPorch', '3SsnPorch', 'FireplaceQu',\n       'ScreenPorch', 'PoolArea', 'MiscVal', 'MoSold', 'YrSold', 'SaleType',\n       'SaleCondition', 'GarageType', 'GarageYrBlt', 'GarageFinish', 'GarageCond', 'BsmtExposure',\n       'BsmtFinType2',  'BsmtFinType1', 'BsmtCond', 'BsmtQual', 'MasVnrArea', 'MasVnrType', 'LotFrontage']\ntrain_data[feature]","9cae7460":"train_data[feature].dtypes","afb61763":"def print_unique_col_values(df):\n       for column in df:\n            if df[column].dtypes=='object':\n                print(f'{column}: {df[column].unique()}') ","22952d83":"def print_unique_col_valuesint(df):\n       for column in df:\n            if df[column].dtypes=='int64' or df[column].dtypes=='float64':\n                print(f'{column}: {df[column].unique()}') ","859242c7":"print_unique_col_values(train_data[feature])","1c28c566":"print_unique_col_valuesint(train_data[feature])","cb2ccab3":"y = train_data[\"SalePrice\"]\ny","bb3b5875":"from sklearn.model_selection import train_test_split\nfeature = ['Id', 'MSSubClass', 'MSZoning', 'LotArea', 'Street', 'LotShape',\n       'LandContour', 'LotConfig', 'LandSlope', 'Neighborhood',\n       'Condition1', 'BldgType', 'OverallQual',\n       'OverallCond', 'YearBuilt', 'YearRemodAdd', 'RoofStyle',\n       'ExterQual', 'ExterCond', 'Foundation',\n       'BsmtFinSF1', 'BsmtFinSF2', 'BsmtUnfSF', 'TotalBsmtSF',\n       'HeatingQC', 'CentralAir', '1stFlrSF', '2ndFlrSF', 'LowQualFinSF',\n       'GrLivArea', 'BsmtFullBath', 'BsmtHalfBath', 'FullBath', 'HalfBath',\n       'BedroomAbvGr', 'KitchenAbvGr', 'KitchenQual', 'TotRmsAbvGrd',\n       'Functional', 'Fireplaces', 'GarageCars', 'GarageArea', 'PavedDrive',\n       'WoodDeckSF', 'OpenPorchSF', 'EnclosedPorch', '3SsnPorch', 'FireplaceQu',\n       'ScreenPorch', 'PoolArea', 'MiscVal', 'MoSold', 'YrSold', 'SaleType',\n       'SaleCondition', 'GarageType', 'GarageYrBlt', 'GarageFinish', 'GarageCond', 'BsmtExposure',\n       'BsmtFinType2',  'BsmtFinType1', 'BsmtCond', 'BsmtQual', 'MasVnrArea', 'MasVnrType', 'LotFrontage']\nX = pd.get_dummies(train_data[feature])\ny = train_data[\"SalePrice\"]\nX","a36bcd0a":"X.shape","ee0da1c1":"X_train,X_test,y_train,y_test = train_test_split(X,y,test_size=0.2)\nprint(X_train.shape)\nprint(y_train.shape)\nprint(X_test.shape)\nprint(y_test.shape)","3075da69":"# model = RandomForestRegressor(n_estimators=50)\n# from sklearn.linear_model import LinearRegression\n# model = LinearRegression()\nmodel = XGBRegressor(n_estimators=700,\n                    learning_rate=0.02,\n                    max_depth=3)\nmodel.fit(X_train,y_train)","88fd7c6c":"model.score(X_test,y_test)","660dbebd":"X_Test = pd.get_dummies(test_data[feature])\nX_Test","b46f4855":"X_Test.shape","832751c7":"X_Test = pd.get_dummies(test_data[feature])\nyhat = model.predict(X_Test)","d84044ec":"output = pd.DataFrame({'Id': test_data.Id, 'SalePrice': yhat})\noutput.to_csv('my_submission.csv', index=False)","a301e76f":"### Checking the missing value precentage","0c6c9f5c":"### Getting a  idea of train and test data","90c07fc5":"### Using pandas get.dummies","852a3907":"### Filling Missing Values\nif missing values are **less than 80%** ","8f4096de":"### Training the model","7470f9cc":"### Checking the types of each column","77f39d91":"### Predicting Test Values","8dc6ae3d":"### To check the values of each column"}}