{"cell_type":{"8250c612":"code","e4c5776e":"code","eb539e9c":"code","06957b52":"code","2dde6132":"code","d421a284":"code","b1befdf2":"code","f3a61fcb":"code","c3fe91af":"code","905ff99a":"code","267124b3":"code","0f79c14b":"code","30003e01":"code","d86274cc":"code","2c655ef6":"markdown","70c8453d":"markdown","f865a242":"markdown","f0fbbfb1":"markdown","b7229812":"markdown","e3b69a9a":"markdown","00ad7702":"markdown","f356b482":"markdown","07efcea4":"markdown","5cd256bc":"markdown","b037dc6f":"markdown","f7f7647e":"markdown","94350867":"markdown"},"source":{"8250c612":"\n\nimport numpy as np\nimport pandas as pd \n\n","e4c5776e":"df=pd.read_csv(\"\/kaggle\/input\/udemy-courses\/udemy_courses.csv\")","eb539e9c":"import altair as alt\nimport altair_render_script\n","06957b52":"sortdf=df[df[\"is_paid\"]==True].sort_values([\"num_subscribers\"],ascending=False)[:20]\nalt.Chart(sortdf).mark_bar().encode(alt.X(\"course_title\"),alt.Y(\"num_subscribers\"),tooltip=[\"course_title\",\"num_subscribers\"]).properties(width=600)\n#alt.Chart().mark_bar().encode(x=[1,2,3,4],y=[10,20,30,40])\n","2dde6132":"from datetime import datetime\ndef extractdate(x):\n    return datetime.strptime(x[:10],\"%Y-%m-%d\")\ndf[\"day\"]=df[\"published_timestamp\"].apply(extractdate)\ndf[\"day\"]=df[\"day\"].apply(lambda x: int(x.day))\n\ndf[\"month\"]=df[\"published_timestamp\"].apply(extractdate)\ndf[\"month\"]=df[\"month\"].apply(lambda x: int(x.month))\n\ndf[\"day_in_year\"]=df[\"published_timestamp\"].apply(extractdate)\ndf[\"day_in_year\"]=df[\"day_in_year\"].apply(lambda x: int(x.timetuple().tm_yday))\n\n\ndf[\"year\"]=df[\"published_timestamp\"].apply(extractdate)\ndf[\"year\"]=df[\"year\"].apply(lambda x: int(x.year))","d421a284":"\ncourses=df[\"subject\"].unique()\n\nslider2 = alt.binding_range(min=2011, max=2017, step=1)\nselect_year= alt.selection_single(name='year', fields=['year'],\n                                   bind=slider2, init={'year': 2016})\nbase = alt.Chart(df[df[\"subject\"]==courses[0]].groupby([\"month\",\"year\"]).count().reset_index()).add_selection(select_year).transform_filter(select_year)\n\nc1=base.mark_line(point=True).encode(alt.X(\"month\"), alt.Y(\"course_title\",title=\"Buisness Finance Courses made\"),tooltip=alt.Tooltip([\"course_title\"],title=\"Buisness Finance Courses made\"))\nbase = alt.Chart(df[df[\"subject\"]==courses[1]].groupby([\"month\",\"year\"]).count().reset_index()).add_selection(select_year).transform_filter(select_year)\n\nc2=base.mark_line(point=True).encode(alt.X(\"month\"), alt.Y(\"course_title\",title=\"Graphic Design Courses made\"),tooltip=alt.Tooltip([\"course_title\"],title=\"Graphic Design Courses made\"))\n\n\n\nbase = alt.Chart(df[df[\"subject\"]==courses[2]].groupby([\"month\",\"year\"]).count().reset_index()).add_selection(select_year).transform_filter(select_year)\n\nc3=base.mark_line(point=True).encode(alt.X(\"month\"), alt.Y(\"course_title\",title=\"Musical Instruments Courses made\"),tooltip=alt.Tooltip([\"course_title\"],title=\"Musical Instruments Courses made\"))\n\n\n\nbase = alt.Chart(df[df[\"subject\"]==courses[3]].groupby([\"month\",\"year\"]).count().reset_index()).add_selection(select_year).transform_filter(select_year)\n\nc4=base.mark_line(point=True).encode(alt.X(\"month\"), alt.Y(\"course_title\",title=\"Web Development Courses made\"),tooltip=alt.Tooltip([\"course_title\"],title=\"Web Development Courses made\"))\nalt.vconcat(alt.concat(c1,c2,spacing=80),alt.concat(c3,c4,spacing=80),spacing=5)\n","b1befdf2":"\ncourses=df[\"subject\"].unique()\nslider2 = alt.binding_range(min=2011, max=2017, step=1)\nselect_year= alt.selection_single(name='year', fields=['year'],\n                                   bind=slider2, init={'year': 2016})\nbase = alt.Chart(df[df[\"subject\"]==courses[0]]).add_selection(select_year).transform_filter(select_year)\n\n\n\na=base.mark_bar(size=10).encode(\n    alt.X(\"month\"),alt.Y(\"sum(price)\"),color=\"level\",tooltip=alt.Tooltip([\"sum(price)\"],title=\"Total Price\")).properties(title=\"Buisness Finance Prices over the month\")\n\nb=base.mark_bar(size=10).encode(\n    alt.X(\"month\"),alt.Y(\"sum(price)\"),color=\"level\",tooltip=alt.Tooltip([\"sum(price)\"],title=\"Total Price\")).properties(title=\"Graph Design Prices over the month\")\n\nc=base.mark_bar(size=10).encode(\n    alt.X(\"month\"),alt.Y(\"sum(price)\"),color=\"level\",tooltip=alt.Tooltip([\"sum(price)\"],title=\"Total Price\")).properties(title=\"Musical Instrument Prices over the month\")\n\nd=base.mark_bar(size=10).encode(\n    alt.X(\"month\"),alt.Y(\"sum(price)\"),color=\"level\",tooltip=alt.Tooltip([\"sum(price)\"],title=\"Total Price\")).properties(title=\"Web Development Prices over the month\")\nalt.vconcat(alt.concat(a,b,spacing=20),alt.concat(c,d,spacing=20),spacing=5)\n","f3a61fcb":"sortdf=df[df[\"is_paid\"]==False].sort_values([\"num_subscribers\"],ascending=False)[:20]\nalt.Chart(sortdf).mark_bar().encode(alt.X(\"course_title\"),alt.Y(\"num_subscribers\"),tooltip=[\"course_title\",\"num_subscribers\"]).properties(width=600)\n\n","c3fe91af":"alt.Chart(df).mark_bar().encode(\n    column='level',\n    x='num_subscribers',\n    y='subject' ,tooltip=[\"num_subscribers\"]\n).properties(width=220)\n","905ff99a":"alt.Chart(df).mark_bar().encode(\n   column=\"level\",\n    x='num_lectures',\n    y='subject' ,tooltip=[\"num_lectures\"]\n).properties(width=220)\n","267124b3":"slider = alt.binding_range(min=1, max=12, step=1)\nselect_month = alt.selection_single(name='month', fields=['month'],\n                                   bind=slider, init={'month': 1})\n\nslider2 = alt.binding_range(min=2011, max=2017, step=1)\nselect_year= alt.selection_single(name='year', fields=['year'],\n                                   bind=slider2, init={'year': 2016})\nbase = alt.Chart(df).add_selection(select_year,select_month).transform_filter(select_year).transform_filter(\n    select_month\n)\n\n\n\n\nleft = base.transform_filter(alt.datum.is_paid==True).encode( \n     y=alt.Y('subject'),\n     x=alt.X('sum(num_subscribers)',\n            \n            title='NumOfSubscribers')\n    ,tooltip=[\"sum(num_subscribers)\",\"subject\"]).mark_bar(size=20).properties(title='subscribers Over the month for PAID',height=200)\n\nleft\n","0f79c14b":"\nright = base.transform_filter(alt.datum.is_paid==False).encode(\n     y=alt.Y('subject'),\n    x=alt.X('sum(num_subscribers)'),tooltip=[\"sum(num_subscribers)\",\"subject\"]).mark_bar(size=20).properties(title='subscribers Over the month for FREE',height=200)\n\n\nright","30003e01":"\n\nalt.Chart(df).mark_bar(size=10).encode(\n    alt.X(\"num_lectures:Q\", bin=alt.Bin(step=21)),\n    alt.Y(\"count(subject)\",title=\"subject count \"),\n    row='level',color='subject',tooltip=[\"count(subject)\",\"subject\",\"num_lectures\"]\n).properties(width=700)","d86274cc":"\n\nalt.Chart(df).mark_bar(size=13).encode(\n    alt.X(\"content_duration:Q\", bin=alt.Bin(step=2)),\n    alt.Y(\"count(subject)\",title=\"subject count \"),\n    row='level',color='subject',tooltip=[\"count(subject)\",\"subject\",\"content_duration\"]\n).properties(width=700)","2c655ef6":"<h3> Now lets do something with the number of lectures, we create a bar chart with bins(20 is the size(step=21)) for the number of lectures , the y axis is the count of the subjects present in this number of lecture bin,the color depicts the subject notation, also the <b>white<\/b> strips use is because I added num_lectures to toolkit list, hence it also shows the specific number of lectures that particular strip has<\/h3>","70c8453d":"<h3>now we create the same selector slider for year<\/h3>\n<ul><li> create the base like we did above only we are just filtering the subject thats all<\/li>\n <li>we want to create barplots, which will tell us the price(total) of that particual level in a particular group of a particular year<\/li>\n    <h2><li><b>EXAMPLE: In the year 2017 the 3rd month(March) under the Buisness Finance group the total courses prices was 1795<\/b><\/li><\/h2>\n<\/ul>","f865a242":"<h3> we should also plot the top subscribers for FREE courses just as we did for paid courses<\/h3>","f0fbbfb1":"<h3>we do the same for our course content duration!!!<\/h3>","b7229812":"<h3> NOT ENOUGH BARPLOTS :D<\/h3>\nwe are still gonna plot more :D\n<h3>over here we simply plot barplots with the number of subscribers for different kinds of levels(all,beginner...) and different kinds of groups(buisness,graphic,...)","e3b69a9a":"<h3>Now lets do some more advanced!!\n<ul> we create a slider using binding_range ,this slider will be for our years present (2011 to 2017)\n<li>We create a select year selector which will select the particular year the slider is on in the dataframe<\/li>\n     \n<li>we then create a <b> base chart <\/b> with alt<\/li>\n<li>  I have created a courses variable which stores the 4 subject category types<\/li>\n<li> we then use the base chart and we select the rows with the first category(source[0]) , group it with months and year and then count the occurences of the course type using count() <\/li>\n<li>we then use the selector and transform filter for filtering out the year<\/li>\n<li> we then create c1 which will be our line plot using mark_line and we use it on base which we have already configured and filtered<\/li>\n<li>we do the same for other courses hence 4 times <\/li>\n<li>now we just concat these using concat for the columns and vconcat(vertical concat) for the rows<\/li>\n      \n     \n<\/ul>\n<\/h3>\n<h2> Basically the plot is for showing the amount of courses published of a paritcular category of a particular year and per month<\/h2>","00ad7702":"<h3> Now we convert the datetime given in the column into days,months,year<\/h3>","f356b482":"<h3> do the same but instead of number of subscribers we have number of lectures!!<\/h3>","07efcea4":"<h3> NOT ENOUGH BARS NOT ENOUGH SLIDERS!!! :D<\/h3>\n<ul> Here we use 2 sliders one for year and one for month <\/ul>\n <li>create the sliders same way as we did above <\/li>\n  <li>create the base chart and add the selection and filter functions for year month respectively<\/li>\n   <li>now create a bar chart (we also filter out and keep the paid courses only) for number of subscribers for the 4 subjects over the years and over the months :D<\/li>","5cd256bc":"<h3> let start with a basic barplot, here we first create a sortdf, what is in this? and what are we doing?\n<ul><li>first take the columns of only the PAID courses<\/li>\n    <li>then we sort the values according to our number of subscribers in descending order and we select the first <b>20<\/b><\/li>\n    <li>now  using alt.chart we input of sortdf give the make_bar for the barchart creation and inside encode we give the x and y<\/li>\n    <li>x=> course title <\/li>\n    <li>y=> the number of subscribers \n    <li> So we are just plotting the top most subscribed course and we also added a toolkit which you can <b>HOVER<\/b><\/li>\n<\/ul>\n<\/h3>\n<h3><b>Hover for more info,in all graphs I have added the hover option!!<\/b><\/h3>","b037dc6f":"<h3> we do the same only for non paid(free) courses<\/h3>","f7f7647e":"<h3> here we add altair as alt, whats the altair render script? well to render altair on kaggle notebooks(local machine no need)\nyou need to import it, but before that you have to add <a href=\"https:\/\/www.kaggle.com\/omegaji\/altair-render-script\">this<\/a> as an utility script that's all!!!\n\n(just click on file and you get the utility script option!!)\n","94350867":"<h3> Welcome all to my EDA of this dataset, with the help of altair you can focus on plotting what you want instead of how you want!!!<\/h3>\n<h1>Please do upvote!! the content is original as ever and fresh as ever :D<\/h1>\n"}}