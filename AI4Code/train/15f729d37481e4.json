{"cell_type":{"3eb75ee2":"code","63f0dfd2":"code","d07bc7f2":"code","1ef5f53c":"code","cda9e4f8":"code","5bc341e0":"code","334f7f21":"code","a3aff310":"code","b531ae95":"code","90a4c045":"code","ae517771":"code","c5ddbb18":"code","d81131ab":"code","cf673445":"code","0d72da1f":"code","10a21fed":"code","7d8f117f":"code","6863615f":"code","f26cb4c0":"code","ed9f9a65":"code","413d1e1a":"code","fbcae34f":"code","79b62bc2":"code","cb5620fe":"code","2b535460":"code","05806825":"code","410c97f3":"code","c7a7f89f":"markdown","28f03b6f":"markdown","36a1c7fe":"markdown","590d9a4d":"markdown","76ea2d5c":"markdown","c7d2f583":"markdown","a72304c8":"markdown","fca38f36":"markdown"},"source":{"3eb75ee2":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\nimport plotly.express as px\nimport plotly.graph_objs as go\nfrom plotly.subplots import make_subplots\nimport plotly.io as pio\n\nimport warnings\nwarnings.filterwarnings('ignore')","63f0dfd2":"#Reference: https:\/\/www.kaggle.com\/c\/tabular-playground-series-oct-2021\/discussion\/275854\ndef reduce_mem_usage(df, verbose=True):\n    numerics = ['int16', 'int32', 'int64', 'float16', 'float32', 'float64']\n    start_mem = df.memory_usage().sum() \/ 1024**2    \n    for col in df.columns:\n        col_type = df[col].dtypes\n        if col_type in numerics:\n            c_min = df[col].min()\n            c_max = df[col].max()\n            if str(col_type)[:3] == 'int':\n                if c_min > np.iinfo(np.int8).min and c_max < np.iinfo(np.int8).max:\n                    df[col] = df[col].astype(np.int8)\n                elif c_min > np.iinfo(np.int16).min and c_max < np.iinfo(np.int16).max:\n                    df[col] = df[col].astype(np.int16)\n                elif c_min > np.iinfo(np.int32).min and c_max < np.iinfo(np.int32).max:\n                    df[col] = df[col].astype(np.int32)\n                elif c_min > np.iinfo(np.int64).min and c_max < np.iinfo(np.int64).max:\n                    df[col] = df[col].astype(np.int64)  \n            else:\n                if c_min > np.finfo(np.float32).min and c_max < np.finfo(np.float32).max:\n                    df[col] = df[col].astype(np.float32)\n                else:\n                    df[col] = df[col].astype(np.float64)    \n    end_mem = df.memory_usage().sum() \/ 1024**2\n    if verbose: print('Mem. usage decreased to {:5.2f} Mb ({:.1f}% reduction)'.format(end_mem, 100 * (start_mem - end_mem) \/ start_mem))\n    return df","d07bc7f2":"df_train = pd.read_csv('..\/input\/tabular-playground-series-dec-2021\/train.csv')\nreduce_mem_usage(df_train)\ndf_test = pd.read_csv('..\/input\/tabular-playground-series-dec-2021\/test.csv')\nreduce_mem_usage(df_test)\ndf_subm = pd.read_csv(\"..\/input\/tabular-playground-series-dec-2021\/sample_submission.csv\")","1ef5f53c":"#Custom Color Palette \ud83c\udfa8\ncustom_colors = [\"#70D6FF\",\"#FF70A6\",\"#FF9770\",\"#FFD670\",\"#E9FF70\"]\ncustomPalette = sns.set_palette(sns.color_palette(custom_colors))\nsns.palplot(sns.color_palette(custom_colors),size=1.2)\nplt.tick_params(axis='both', labelsize=0, length = 0)","cda9e4f8":"df_train_row_count, df_train_column_count = df_train.shape\nprint('Total number of rows:', df_train_row_count)\nprint('Total number of columns:', df_train_column_count)","5bc341e0":"df_test_row_count, df_test_column_count = df_test.shape\nprint('Total number of rows:', df_test_row_count)\nprint('Total number of columns:', df_test_column_count)","334f7f21":"df_train.head()","a3aff310":"df_train.describe().T","b531ae95":"df_train.info()","90a4c045":"df_train.isna().sum()","ae517771":"df_test.isna().sum()","c5ddbb18":"print (\"Unique values are:\\n\",df_train.nunique())","d81131ab":"df_train.drop(columns = 'Id', inplace = True)\ndf_test.drop(columns = 'Id', inplace = True)","cf673445":"plt.figure(figsize = (11,11))\ncorr = df_train.corr()\nmask = np.triu(np.ones_like(corr, dtype=bool))\nsns.heatmap(corr, mask=mask, cmap=custom_colors, robust=True, center=0,square=True, linewidths =.6)\nplt.title('Correlation')\nplt.show()","0d72da1f":"df_train.drop(columns = ['Soil_Type7','Soil_Type15'], inplace = True)\ndf_test.drop(columns = ['Soil_Type7','Soil_Type15'], inplace = True)","10a21fed":"df_train.Cover_Type.value_counts()","7d8f117f":"fig, ax = plt.subplots(figsize=(12,7))\nbar_ch = ax.bar(df_train['Cover_Type'].value_counts().sort_index().index, df_train['Cover_Type'].value_counts().sort_index().values, color=['#70D6FF',\"#FF70A6\",\"#FF9770\",'#70D6FF',\"#FF70A6\",\"#FFD670\",\"#E9FF70\"])\nplt.text(3.9,2650000, 'How cover type is distributed?',{'font': 'Times New Roman','fontsize':'xx-large','style':'normal'})\nax.tick_params(axis=\"x\", pad=20)\nax.bar_label(bar_ch, [f\"{x*100:2.1f}%\" for x in df_train['Cover_Type'].value_counts().sort_index().values\/len(df_train)])\nax.set_xticklabels(('0','1', '2', '3','4','5','6','7'))\nax.axes.get_xaxis().set_visible(True)\nax.axes.get_yaxis().set_visible(False)\nax.spines['bottom'].set_visible(False)\nax.spines['left'].set_visible(False)\nax.spines['right'].set_visible(False)\nax.spines['top'].set_visible(False)","6863615f":"df_train.skew()","f26cb4c0":"fig = plt.figure(figsize=(12,12))\ndata_sk = df_train[df_train.columns].skew()\nsns.barplot(x=data_sk, y=data_sk.index, palette=custom_colors)\nplt.show()","ed9f9a65":"background_color = 'white'\nzeros = pd.DataFrame(columns=['% Train Zero values'],data=((df_train.iloc[:,:55]==0).sum() \/ len(df_train))[::-1])\nzeros.drop(['Cover_Type'],inplace=True)\nzeros_tst = pd.DataFrame(columns=['% Test Zero values'],data=((df_test.iloc[:,:55]==0).sum() \/ len(df_test))[::-1])\nfig = plt.figure(figsize=(10, 30),facecolor=background_color)\ngs = fig.add_gridspec(1, 2)\ngs.update(wspace=0.5, hspace=0.5)\nax0 = fig.add_subplot(gs[0, 0])\nax1 = fig.add_subplot(gs[0, 1])\nfor s in [\"right\", \"top\",\"bottom\",\"left\"]:\n    ax0.spines[s].set_visible(False)\n    ax1.spines[s].set_visible(False)\nsns.heatmap(zeros,cbar=False,annot=True,fmt=\".1%\", cmap=custom_colors,linewidths=2,vmax=1, ax=ax0)\nsns.heatmap(zeros_tst,cbar=False,annot=True,fmt=\".1%\", cmap=custom_colors,linewidths=2,vmax=1, ax=ax1)\nax1.set_yticklabels([])\nplt.show()","413d1e1a":"df_train['Wild Areas'] = (df_train.iloc[:,10:14] == 1).idxmax(1)\ndf_train['Soil types'] = (df_train.iloc[:,14:54] == 1).idxmax(1)","fbcae34f":"df_st=['Soil_Type2','Soil_Type4','Soil_Type10','Soil_Type23','Soil_Type29','Soil_Type33']\nfig, axs = plt.subplots(3, 2, figsize=(10,12))\naxs = axs.flatten()\nfor i, col_name in enumerate(df_st):\n    sns.countplot(x=col_name, data=df_train, ax=axs[i], hue =df_train['Cover_Type'],palette=custom_colors)","79b62bc2":"df_st=['Wilderness_Area1','Wilderness_Area2','Wilderness_Area3','Wilderness_Area4']\nfig, axs = plt.subplots(2, 2, figsize=(10,8))\naxs = axs.flatten()\nfor i, col_name in enumerate(df_st):\n    sns.countplot(x=col_name, data=df_train, ax=axs[i],palette=custom_colors)","cb5620fe":"fig, axs = plt.subplots(ncols=2,figsize=(14,5))\nfig.suptitle(\"Aspect\")\nsns.boxplot(x= \"Cover_Type\",y=\"Aspect\",data=df_train,palette=custom_colors,ax=axs[0])\nsns.boxplot(x= 'Wild Areas',y=\"Aspect\",data=df_train,palette=custom_colors,ax=axs[1],hue='Cover_Type')","2b535460":"tr_col = ['Elevation', 'Aspect', 'Slope', 'Horizontal_Distance_To_Hydrology','Vertical_Distance_To_Hydrology', 'Cover_Type']\ndf = df_train[tr_col]\nsns.pairplot(df, hue='Cover_Type', corner=True)\nplt.show()","05806825":"tr_col1 = ['Horizontal_Distance_To_Roadways','Hillshade_9am','Hillshade_Noon','Hillshade_3pm','Horizontal_Distance_To_Fire_Points','Cover_Type']\ndf = df_train[tr_col1]\nsns.pairplot(df, hue='Cover_Type', corner=True)\nplt.show()","410c97f3":"fig = px.treemap(df_train, path=['Wild Areas','Cover_Type'],values='Elevation')\nfig.show()","c7a7f89f":"<h3 style=\"font-family: Arial;background-color:#ff4d6d;color:white;text-align: center;padding-top: 5px;padding-bottom: 5px;border-radius: 15px 50px;letter-spacing: 2px;font-size: 20px\"><strong><centre>Importing & Reading the dataset \ud83d\udcdd <\/centre><\/strong><\/h3>","28f03b6f":"<h3 style=\"font-family: Arial;background-color:#ff4d6d;color:white;text-align: center;padding-top: 5px;padding-bottom: 5px;border-radius: 15px 50px;letter-spacing: 2px;font-size: 20px\"><strong><centre>Importing Libraries & Packages \ud83d\udcda <\/centre><\/strong><\/h3>","36a1c7fe":"![TPS.jpg](attachment:dce55df4-c6ee-4514-a645-ccd0fd2a58ea.jpg)","590d9a4d":"<p style=\"font-family: Trebuchet MS; line-height: 2; font-size: 14px; font-weight: bold; letter-spacing: 2px; text-align: center; color: #3a0ca3\">Target distribution is imbalanced. Covertype 2 is the most dominated. There is no existence of Covertype 4 and 5.<\/p>","76ea2d5c":"<h3 style=\"font-family: Arial;background-color:#ff4d6d;color:white;text-align: center;padding-top: 5px;padding-bottom: 5px;border-radius: 15px 50px;letter-spacing: 2px;font-size: 20px\"><strong><centre>If you found this notebook useful, please Upvote. Thanks! <\/centre><\/strong><\/h3>","c7d2f583":"<p style=\"font-family: Trebuchet MS; line-height: 2; font-size: 18px; font-weight: bold; letter-spacing: 2px; text-align: center; color: #3a0ca3\">There are no missing values.<\/p>","a72304c8":"**Observations on this TPS dataset:**\n- `Cover_Type` column is the target variable\n- `Train` dataset has `40,00,000` rows and `56` columns which contains`54` features, `1` target variable `target` and `1` column of `id`\n- `10` features are numerical and rest`44` features are categorical\n- `Test` dataset has `10,00,000` rows and `55` columns which contains`54` features with`1` column of `id`\n- No missing values in train and test dataset\n","fca38f36":"<h3 style=\"font-family: Arial;background-color:#ff4d6d;color:white;text-align: center;padding-top: 5px;padding-bottom: 5px;border-radius: 15px 50px;letter-spacing: 2px;font-size: 20px\"><strong><centre>Checking for missing values \u270f\ufe0f <\/centre><\/strong><\/h3>"}}