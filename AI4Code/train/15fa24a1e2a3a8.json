{"cell_type":{"8748e4c2":"code","87169ae0":"code","cc403318":"code","d9d278c7":"code","4ab56838":"code","c67edaa5":"code","4d5269fb":"code","e7182263":"code","efda81b7":"code","121b6064":"code","1230b668":"code","71d576be":"code","94e3c47a":"code","92ebacd4":"code","5dad0875":"markdown","ef7362fb":"markdown","9e84c250":"markdown","68ed6d75":"markdown","b30aed7f":"markdown"},"source":{"8748e4c2":"import numpy as np\nimport pandas as pd\nfrom matplotlib import pyplot as plt\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","87169ae0":"train_sales = pd.read_csv('\/kaggle\/input\/m5-forecasting-accuracy\/sales_train_validation.csv')\nsubmission_file = pd.read_csv('\/kaggle\/input\/m5-forecasting-accuracy\/sample_submission.csv')","cc403318":"days = range(1, 1913 + 1)\ntime_series_columns = [f'd_{i}' for i in days]\n\ntime_series_data = train_sales[time_series_columns]","d9d278c7":"figsize = (25, 5)\ntime_series_data.iloc[0, :].plot(figsize=figsize)\nplt.grid()","4ab56838":"from sklearn.neighbors import KernelDensity\nfrom sklearn.model_selection import GridSearchCV\nimport numpy as np\nimport pandas as pd","c67edaa5":"time_series_data.head(5)","4d5269fb":"params = {\n    'kernel': ['gaussian'],\n    'bandwidth': [0.1]\n         }","e7182263":"N = time_series_data.shape[0]\nrandom_samples = []\nfor i in range(N):\n    model = GridSearchCV(KernelDensity(), params)\n    df = time_series_data.loc[[i]].T\n    df = df.values.reshape(-1,1)\n    model.fit(df)\n    \n    # randomly sample 28 times from the KDE \n    kde_sample = time_series_data.loc[[i]].T.sample(28,random_state=42).T\n    random_samples += [kde_sample]\n    \n    # print only selected outputs\n    if i < 10:\n        print('Iteration ' + str(i) + ' done. Best model params is: ' + str(model.best_params_))\n    elif i == N-5:\n        print('...')\n    elif i > N-5:\n        print('Iteration ' + str(i) + ' done. Best model params is: ' + str(model.best_params_))","efda81b7":"forecasts = pd.concat(random_samples)\nforecasts.columns = [f'F{i}' for i in range(1, 28 + 1)]\nforecasts.reset_index(inplace=True)\nforecasts.drop(['index'], axis=1, inplace=True)\n\nforecasts.head(5)","121b6064":"validation_ids = train_sales['id'].values\nevaluation_ids = [i.replace('validation', 'evaluation') for i in validation_ids]","1230b668":"ids = np.concatenate([validation_ids, evaluation_ids])","71d576be":"predictions = pd.DataFrame(ids, columns=['id'])\nforecasts = pd.concat([forecasts] * 2).reset_index(drop=True)\npredictions = pd.concat([predictions, forecasts], axis=1)","94e3c47a":"predictions.head()","92ebacd4":"predictions.to_csv('submission.csv', index=False)","5dad0875":"Feel free to add in more parameters for grid search! This is only a baseline working version.\n\nIf you find this helpful and\/or insightful, an upvote will be appreciated!\n\nI'll try to answer questions to the best of my ability! :)","ef7362fb":"# EDA & Gaussian KDE Baseline Model","9e84c250":"# Predictions\n\nWe need to provide predictions for the next 28 days for each of the series. For the validation series that is days 1914 - 1941 and for the evaluation that is days 1942 - 1969.","68ed6d75":"# Gaussian Kernel Density Estimator (KDE) Sampling","b30aed7f":"# Visualizing the Time Series\n\nBelow I make a simple plot of the first time series in the data."}}