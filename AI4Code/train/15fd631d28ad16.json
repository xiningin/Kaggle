{"cell_type":{"2e51229c":"code","7664bfe5":"code","69d1d9aa":"code","f870c58d":"code","6a46b71f":"code","41200a49":"code","cb10fd22":"code","e9e7834d":"code","f34729e9":"code","ce6c45c8":"code","8008d81b":"code","811e17eb":"code","86893ace":"code","0e739379":"code","6101e972":"code","6867e76b":"code","964131c2":"code","59452409":"code","fb7ffdeb":"code","7ee8655b":"code","6943639b":"code","4b5cab84":"code","7ac4891d":"code","e744273b":"code","443f3cf7":"code","dfd311a3":"code","e5f0bb22":"code","edb2fc0f":"code","0b943ced":"code","ea7f41a2":"code","072ac59a":"markdown","198846fa":"markdown","3d4dcc95":"markdown"},"source":{"2e51229c":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)","7664bfe5":"train = pd.read_csv(\"..\/input\/digit-recognizer\/train.csv\")","69d1d9aa":"from tensorflow import keras\nfrom sklearn.model_selection import train_test_split\nimport matplotlib.pyplot as plt\nfrom keras.utils import to_categorical\nfrom keras.models import Sequential\nfrom keras.layers import Dense, Conv2D, Flatten,Dropout, MaxPooling2D\nfrom keras.preprocessing.image import ImageDataGenerator","f870c58d":"train.shape","6a46b71f":"train.head()","41200a49":"Y_train = train.loc[:,'label']\nX_train = train.drop('label',axis = 1)","cb10fd22":"x_train, x_test, y_train, y_test = train_test_split(X_train, Y_train, test_size = 0.1, random_state = 48)","e9e7834d":"#plot the first image in the data\nplt.imshow(np.array(x_train.iloc[0]).reshape(28,28))\nprint(y_train.iloc[0])","f34729e9":"x_train.shape","ce6c45c8":"x_train = np.array(x_train).reshape(x_train.shape[0],28,28,1)\nx_test = np.array(x_test).reshape(x_test.shape[0],28,28,1)","8008d81b":"x_train = x_train \/ 255\nx_test = x_test \/ 255","811e17eb":"y_train = np.array(y_train)","86893ace":"plt.imshow(x_train[0])\nprint(\"label:\", y_train[0])","0e739379":"y_train = to_categorical(y_train)\ny_test = to_categorical(y_test)","6101e972":"y_train[0]","6867e76b":"#create model\nmodel = Sequential()\n#add model layers\nmodel.add(Conv2D(64, kernel_size=3, activation='relu', input_shape=(28,28,1)))\nmodel.add(Conv2D(32, kernel_size=3, activation='relu'))\nmodel.add(MaxPooling2D(pool_size=(2,2)))\nmodel.add(Flatten())\nmodel.add(Dense(128, activation='relu'))\nmodel.add(Dropout(0.2))\nmodel.add(Dense(10, activation='softmax'))","964131c2":"model.compile(optimizer = 'adam', loss='categorical_crossentropy', metrics=['accuracy'])","59452409":"#training the model\nmodel.fit(x_train,y_train,steps_per_epoch = np.ceil(x_train.shape[0]\/32), validation_data=(x_test, y_test), epochs=50)","fb7ffdeb":"test = pd.read_csv(\"..\/input\/digit-recognizer\/test.csv\")","7ee8655b":"test.head()","6943639b":"test.shape","4b5cab84":"test = np.array(test).reshape(test.shape[0],28,28,1)","7ac4891d":"test.shape","e744273b":"test = test\/ 255","443f3cf7":"prediction_probabilities = model.predict(test)","dfd311a3":"len(prediction_probabilities)","e5f0bb22":"prediction = []\nfor i in range(len(prediction_probabilities)):\n    prediction.append(list(prediction_probabilities[i]).index(max(prediction_probabilities[i])))","edb2fc0f":"df = pd.DataFrame({'ImageId' : range(1,len(prediction)+1),'Label' : prediction})","0b943ced":"df","ea7f41a2":"df.to_csv('submission.csv',index=False)","072ac59a":"training data: x_train, y_train\nvalidation data: x_test, y_test\nepochs: the number of times the model will cycle throught the data : more epochs will improve the accuracy of the model uptill a certain number afterwhich there will be no change. - 3 in our case","198846fa":"# creating a model\n\n* Model Type: Sequential - Allows to build a model layer by layer\n* First 2 layers are Convolutional 2D layers - input images are seen as 2D matrices\n* 64 and 32 are the number of nodes in each layers. These are decided on the basis of the size of the date. These have to be tuned.\n* Kernel Size: this is the size of the filter matrix - in our case we have kept this as 3 i.e 3x3 filter matrix is used\n* Activation function: ReLu( rectified linear activation) - works best for nueral networks'\n* The first layer takes in input images in the shape (28,28,1) where 1 signifies that the images are in greyscale\n* We have 10 nodes in out output layers; one for each possible outcome (0-9)\n* Activation in the output layer is softmax ( it sums up the output to 1) so that we can interpret the output as probabilities. The prediction will be made based on the probabilites.\n","3d4dcc95":"# Compiling the model\ncompiling the model takes three paramters: optimizer, loss and metrics\n* Optimizer controls the learning rate - adam in our case\n* Loss function : categorical_crossentropy - A lower score indicates that the model is performing better."}}