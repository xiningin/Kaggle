{"cell_type":{"db95b1c8":"code","791d53a0":"code","ac2c67e6":"code","a023130c":"code","056daa6c":"code","ab701361":"code","a0339a10":"code","186508f4":"code","cced2dd8":"code","4ff45db3":"markdown","719680e1":"markdown","97f280df":"markdown","9fe2d0d7":"markdown","7f3a1fd6":"markdown","8ffa31fc":"markdown"},"source":{"db95b1c8":"import os\nimport numpy as np\nimport pandas as pd\nimport tensorflow as tf\nfrom tensorflow import keras\nfrom tensorflow.keras import layers\nimport matplotlib.pyplot as plt\nos.environ['TF_CPP_MIN_LOG_LEVEL'] = '3' # Supress tensorflow log outputs","791d53a0":"train = pd.read_csv(\"\/kaggle\/input\/digit-recognizer\/train.csv\")\ntest = pd.read_csv(\"\/kaggle\/input\/digit-recognizer\/test.csv\")","ac2c67e6":"x_train = train.drop(\"label\", axis=1).to_numpy().astype(\"float32\").reshape(-1, 28, 28, 1) \/ 255.0\nx_test = test.to_numpy().astype(\"float32\").reshape(-1, 28, 28, 1) \/ 255.0\ny_train = train[\"label\"]","a023130c":"model = keras.Sequential([\n    layers.Input((28, 28, 1)),\n    \n    # image augmentation\n    layers.RandomContrast(0.2, seed=1),\n    layers.RandomZoom(0.2, 0.2, seed=1),\n    \n    layers.Conv2D(32, 3, activation=\"relu\"),\n    layers.MaxPooling2D(),\n    layers.BatchNormalization(),\n    layers.Dropout(0.2),\n    \n    layers.Conv2D(64, 3, activation=\"relu\"),\n    layers.MaxPooling2D(),\n    layers.BatchNormalization(),\n    layers.Dropout(0.3),\n    \n    layers.Conv2D(128, 3, activation=\"relu\"),\n    layers.MaxPooling2D(),\n    layers.BatchNormalization(),\n    layers.Dropout(0.2),\n    \n    layers.Flatten(),\n    layers.Dense(64),\n    layers.BatchNormalization(),\n    layers.Dropout(0.1),\n    layers.Dense(10, activation=\"softmax\")\n])","056daa6c":"model.compile(\n    optimizer = keras.optimizers.Adam(),\n    loss = keras.losses.SparseCategoricalCrossentropy(),\n    metrics=[\"accuracy\"]\n)","ab701361":"from tensorflow.keras.callbacks import EarlyStopping\nfrom tensorflow.keras.callbacks import ReduceLROnPlateau\nfrom tensorflow.keras.callbacks import ModelCheckpoint\n\ncallbacks = [\n    EarlyStopping(patience=25, monitor='val_loss'),\n\n\tReduceLROnPlateau(monitor='val_loss', min_lr=1e-9, patience=5, mode='min',verbose=1, factor=0.1),\n\n\tModelCheckpoint(monitor='val_loss', filepath='.\/best_model.h5', save_best_only=True)\n]","a0339a10":"model.fit(x_train, y_train, epochs=150, batch_size=64, validation_split=0.2, verbose=2, callbacks=callbacks)","186508f4":"model = keras.models.load_model(\"best_model.h5\") # load in best model","cced2dd8":"submission = pd.read_csv(\"\/kaggle\/input\/digit-recognizer\/sample_submission.csv\")\nsubmission[\"Label\"] = np.argmax(model.predict(x_test), axis=-1)\nsubmission.to_csv(\"submission.csv\", index=False)","4ff45db3":"### Imports","719680e1":"### Submission","97f280df":"### Callbacks to minimize loss","9fe2d0d7":"### Extract x_train and y_train","7f3a1fd6":"### Simple CNN Model with Regularization","8ffa31fc":"### Load in Data"}}