{"cell_type":{"b68fe8bf":"code","3e572273":"code","5fd61b6f":"code","3d446c66":"code","4fd65ab7":"code","d9a73a2b":"code","9cc406fa":"code","ed33f3af":"code","68da0f4a":"code","bcba88ab":"code","86af6a8b":"code","81c7a3e7":"code","185322ba":"code","9fbf6c89":"code","56a6ea87":"code","b25c3ddd":"code","4f1817f8":"code","f426a96c":"code","1fbcdf5b":"code","53f1d059":"code","97039ac0":"code","60878c3f":"code","ee1f2ac3":"code","ebefd434":"code","a8a997d3":"code","7e7d5124":"code","45f8475f":"markdown","5880419c":"markdown","0b52377a":"markdown","bd43190a":"markdown","167aa855":"markdown","4a8766e5":"markdown","588f2067":"markdown","6411e330":"markdown","de74b275":"markdown","91a2e4b2":"markdown","f3aee899":"markdown","f79a0420":"markdown","480e159d":"markdown","8718b029":"markdown","a6c0150c":"markdown","caeabe8e":"markdown","2dd93014":"markdown","366a1a0d":"markdown","82a89ea4":"markdown","ced2bb36":"markdown","a4bffd54":"markdown","cf12646e":"markdown","cca9d255":"markdown","60f4ea1b":"markdown","e46f3ff2":"markdown","5059ce0d":"markdown","5ad234bc":"markdown","209c07ad":"markdown","02db228b":"markdown"},"source":{"b68fe8bf":"import numpy as np\nimport pandas as pd\nimport sqlite3\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport folium\n\n\nfrom math import *\nfrom collections import Counter\nfrom scipy.stats import kde\n\nimport warnings\nwarnings.filterwarnings(\"ignore\")","3e572273":"\nwith sqlite3.connect(\"..\/input\/soccer\/database.sqlite\") as connect:\n    match = pd.read_sql_query(\"SELECT * from Match\", connect)\n    country = pd.read_sql_query(\"SELECT * from Country\", connect)\n    league = pd.read_sql_query(\"SELECT * from League\", connect)\n    team =pd.read_sql_query(\"SELECT * from Team\", connect)\n    player =pd.read_sql_query(\"SELECT * from Player\", connect)\n    player_attributes=pd.read_sql_query(\"SELECT * from  Player_Attributes\", connect)","5fd61b6f":"league_country = league.merge(country, on='id')\nfr_league_info = league_country.loc[league_country['name_y'] == 'France']","3d446c66":"fr_league_info=fr_league_info.loc[:, fr_league_info.columns != 'country_id']\nfr_league_info.columns=[\"country_id\",\"league\",\"country\"]\nfr_league_info","4fd65ab7":"match_fr = match.merge(fr_league_info, on='country_id')\nmatch_fr.head()","d9a73a2b":"#focus on 2015-2016 season, last year of the dataset\nprint(\"season in the original dataset :\",match_fr['season'].unique())\nfr_18=match_fr.loc[match_fr['season'] == '2015\/2016']\nfr_18.head()","9cc406fa":"#Get the list of all team in the 2015-16 Ligue 1 season\nteam_18=fr_18['home_team_api_id'].unique().tolist()\nteam_18=team[team['team_api_id'].isin(team_18)]\nteam_18[[\"team_api_id\",\"team_long_name\",\"team_short_name\"]]","ed33f3af":"# Make an empty map\nm = folium.Map(location=[46.5,4.5], tiles=\"OpenStreetMap\", zoom_start=5)\n\ndata = pd.DataFrame({\n   'lon':[-1.55, -0.58, -0.37, 7.26,-3.37,4.83,1.44,7.42,2.35,3.06,-1.677,5.37,4.39,3.88,4.03,9.45,4.08,-3.15,-0.56,8.74],\n   'lat':[47.2, 44.83, 49.18, 43.7,47.75, 45.76,43.6,43.7,48.86,50.63,48.1,43.3,45.44,43.6,49.258,42.7,48.3,48.55,47.48,41.92],\n   'name':team_18[\"team_long_name\"].tolist(),\n}, dtype=str)\n\n\n# add marker one by one on the map\nfor i in range(0,len(data)):\n    folium.Marker(\n      location=[data.iloc[i]['lat'], data.iloc[i]['lon']],\n      popup=data.iloc[i]['name'],\n   ).add_to(m)\n\nm","68da0f4a":"#Get all match of AS Saint-\u00c9tienne\n\nasse_18_dom=fr_18.loc[fr_18['home_team_api_id'] == 9853]\nasse_18_ext=fr_18.loc[fr_18['away_team_api_id'] == 9853]\nasse_18=pd.concat([asse_18_dom,asse_18_ext])","bcba88ab":"def Display_compo(df_match,title,nb_match):    \n\n    fig, ax = plt.subplots(nb_match\/\/5+1,5,figsize=(30,(nb_match\/\/5+1)*7))\n    #fig.tight_layout()\n    for n in range(len(df_match)):\n        \n        match=df_match.iloc[n]\n        \n        home_players_api_id = list()\n        away_players_api_id = list()\n        home_players_x = list()\n        away_players_x = list()\n        home_players_y = list()\n        away_players_y = list()\n\n\n        for i in range(1,12):\n            home_players_api_id.append(match['home_player_%d' % i])\n            away_players_api_id.append(match['away_player_%d' % i])\n            home_players_x.append(match['home_player_X%d' % i])\n            away_players_x.append(match['away_player_X%d' % i])\n            home_players_y.append(match['home_player_Y%d' % i])\n            away_players_y.append(match['away_player_Y%d' % i])\n\n        #Fetch players'names \n        players_api_id = [home_players_api_id,away_players_api_id]\n        players_api_id.append(home_players_api_id) # Home\n        players_api_id.append(away_players_api_id) # Away\n        players_names = [[None]*11,[None]*11]\n\n\n\n        con = sqlite3.connect('..\/input\/soccer\/database.sqlite')\n        con.row_factory = sqlite3.Row\n        cur = con.cursor()\n\n\n\n        for i in range(2):\n            players_api_id_not_none = [x for x in players_api_id[i] if isnan(x)==False]\n            request = 'SELECT player_api_id,player_name FROM Player'\n            request += ' WHERE player_api_id IN (' + ','.join(map(str, players_api_id_not_none)) + ')'\n            cur.execute(request)\n            players = cur.fetchall()\n            for player in players:\n                idx = players_api_id[i].index(player['player_api_id'])\n                name = player['player_name'].split()[-1] # keep only the last name\n                players_names[i][idx] = name\n\n\n        home_players_x = [5 if x==1 else x for x in home_players_x]\n        away_players_x = [5 if x==1 else x for x in away_players_x]\n\n        away_players_y=[(element-12)\/1.7 for element in away_players_y]\n        home_players_y=[(-element+12)\/1.7 for element in home_players_y]\n\n\n        img = plt.imread(\"https:\/\/socialcompare.com\/u\/1809\/terrain-football-v_e8675e323e9595f354c655b7acfb43ec.png\")        \n        ax = ax.flatten()\n        \n        ax[n].imshow(img, extent=[0, 10, 7, -7])\n        ax[n].scatter(home_players_x, home_players_y,s=480,c='blue',alpha=0.8)\n        ax[n].scatter(away_players_x, away_players_y,s=480,c='red',alpha=0.8)\n\n        #legend\n        for label, x, y in zip(players_names[1], away_players_x, away_players_y):\n            ax[n].annotate(\n                label, \n                xy = (x, y), xytext = (-15, 12),\n                textcoords = 'offset points', va = 'center')\n        for label, x, y in zip(players_names[0], home_players_x, home_players_y):\n            ax[n].annotate(\n                label, \n                xy = (x, y), xytext = (-15, 12),\n                textcoords = 'offset points', va = 'center')\n\n        ax[n].axis('off')\n\n    fig.suptitle(title, fontsize=50,y=0.92)\n\n\n    plt.show()","86af6a8b":"Display_compo(asse_18[:19],'Team formation of ASSE during home matches in 2015-16',19)\nDisplay_compo(asse_18[19:],'Team formation of ASSE during away matches in 2015-16',19)","81c7a3e7":"xa=list()\nya=list()\n\nxh=list()\nyh=list()\n\n\nfor i in range(len(asse_18)):\n    match=asse_18.iloc[i]\n    \n    for j in range(1,12):  \n            if i<19:\n                if match['home_player_X%d' % j]==1:\n                    xh.append(5)\n                else:\n                    xh.append(match['home_player_X%d' % j])\n                yh.append(match['home_player_Y%d' % j])\n                \n            else:\n                if match['away_player_X%d' % j]==1:\n                    xa.append(5)\n                else:\n                    xa.append(match['away_player_X%d' % j])\n                ya.append(match['away_player_Y%d' % j])\n\n                \ndata= [list(a) for a in zip(xa,ya)]\ndata=np.array(data)\n\ndath= [list(a) for a in zip(xh,yh)]\ndath=np.array(dath)","185322ba":"\n\ndef Heatmap(nbins,title):\n    k = kde.gaussian_kde(data.T)\n    xi, yi = np.mgrid[1:9:nbins*1j, 0:20:nbins*1j]\n    zi = k(np.vstack([xi.flatten(), yi.flatten()]))\n\n\n    kh = kde.gaussian_kde(dath.T)\n    xih, yih = np.mgrid[1:9:nbins*1j, 0:20:nbins*1j]\n    zih = kh(np.vstack([xih.flatten(), yih.flatten()]))\n\n    fig, (ax1, ax2) = plt.subplots(1,2,figsize=(9,7))\n\n    ax1.contourf(xi, yi, zi.reshape(xi.shape), alpha=0.5)\n    ax2.contourf(xih, yih, zih.reshape(xih.shape), alpha=0.5)\n\n    ax1.set_xlim(1, 9)\n    ax1.set_ylim(0.5, 20)\n\n    ax2.set_xlim(1, 9)\n    ax2.set_ylim(0.5, 20)\n\n    im = plt.imread('https:\/\/socialcompare.com\/u\/1809\/terrain-football-v_e8675e323e9595f354c655b7acfb43ec.png')\n\n    ax1.imshow(im, extent=[1, 9, 0.5, 20], aspect='auto')\n    ax2.imshow(im, extent=[1, 9, 0.5, 20], aspect='auto')\n\n    ax1.axis('off')\n    ax2.axis('off')\n\n\n    ax1.set_title('Away matches')\n    ax2.set_title('Home matches')\n\n    fig.suptitle(title, fontsize=16)\n\n\n    plt.show()\n\nnbins = 100\nHeatmap(nbins,'Team formation Heatmap of ASSE during the 2015-16 season')","9fbf6c89":"def Count_compo(df_match):    \n    compo_list=list()\n\n    for n in range(len(df_match)):\n        \n        match=df_match.iloc[n]\n        \n        home_players_api_id = list()\n        away_players_api_id = list()\n        home_players_x = list()\n        away_players_x = list()\n        home_players_y = list()\n        away_players_y = list()\n\n        for i in range(1,12):\n            home_players_api_id.append(match['home_player_%d' % i])\n            away_players_api_id.append(match['away_player_%d' % i])\n            home_players_x.append(match['home_player_X%d' % i])\n            away_players_x.append(match['away_player_X%d' % i])\n            home_players_y.append(match['home_player_Y%d' % i])\n            away_players_y.append(match['away_player_Y%d' % i])\n\n        #Fetch players'names \n        players_api_id = [home_players_api_id,away_players_api_id]\n        players_api_id.append(home_players_api_id) # Home\n        players_api_id.append(away_players_api_id) # Away\n        players_names = [[None]*11,[None]*11]\n\n        con = sqlite3.connect('..\/input\/soccer\/database.sqlite')\n        con.row_factory = sqlite3.Row\n        cur = con.cursor()\n\n        for i in range(2):\n            players_api_id_not_none = [x for x in players_api_id[i] if isnan(x)==False]\n            request = 'SELECT player_api_id,player_name FROM Player'\n            request += ' WHERE player_api_id IN (' + ','.join(map(str, players_api_id_not_none)) + ')'\n            cur.execute(request)\n            players = cur.fetchall()\n            for player in players:\n                idx = players_api_id[i].index(player['player_api_id'])\n                name = player['player_name'].split()[-1] # keep only the last name\n                players_names[i][idx] = name\n\n\n        home_players_x = [5 if x==1 else x for x in home_players_x]\n        away_players_x = [5 if x==1 else x for x in away_players_x]\n\n        away_players_y=[(element-12)\/1.7 for element in away_players_y]\n        home_players_y=[(-element+12)\/1.7 for element in home_players_y]\n    \n    \n        players_y = [home_players_y,away_players_y]\n        formations = [None] * 2\n        for i in range(2):\n                \n            formation_dict=Counter(players_y[i]);\n            if i==0:\n                sorted_keys = sorted(formation_dict,reverse=True)\n            else:\n                sorted_keys = sorted(formation_dict) \n\n            formation = ''\n            for key in sorted_keys[1:-1]:\n                y = formation_dict[key]\n                formation += '%d-' % y\n            formation += '%d' % formation_dict[sorted_keys[-1]]   \n            formations[i] = formation\n\n\n        compo_list.append(formations[0])\n        compo_list.append(formations[1])\n\n        #print('Home team formation: ' + formations[0])\n        #print('Away team formation: ' + formations[1])\n    return compo_list\n","56a6ea87":"asse_compo=Count_compo(asse_18)   \nasse_h_compo=asse_compo[:38:2]\nasse_a_compo=asse_compo[39::2]\n\nfig, (ax1, ax2) = plt.subplots(1,2,figsize=(10,6))\n\nax1.bar(Counter(asse_h_compo).keys(), Counter(asse_h_compo).values(), color=(0,0,0.6))\nax2.bar(Counter(asse_a_compo).keys(), Counter(asse_a_compo).values(), color=(0.6,0,0))\n\nax1.set_ylabel('Uses during the season')\nax1.set_xlabel('Team formation')\nax1.set_title('Home matches')\n\nax2.set_ylabel('Uses during the season')\nax2.set_xlabel('Team formation')\nax2.set_title('Away matches')\n\nfig.suptitle('Team formation occurences of ASSE during the 2015-16 season', fontsize=16)\n\nplt.show()","b25c3ddd":"def player_compo(df_match,lim):    \n\n    compo_list=list()\n    players_api_id = list()\n    players_x = list()\n    players_y = list()\n    \n    for n in range(len(df_match)):\n        match=df_match.iloc[n]\n        \n        for i in range(1,12):\n            if lim==True:\n                if n<19:\n                    players_api_id.append(match['home_player_%d' % i])\n                    players_x.append(match['home_player_X%d' % i])\n                    players_y.append(match['home_player_Y%d' % i])\n\n                else:\n                    players_api_id.append(match['away_player_%d' % i])\n                    players_x.append(match['away_player_X%d' % i])\n                    players_y.append(match['away_player_Y%d' % i])\n            else:\n                    players_api_id.append(match['home_player_%d' % i])\n                    players_x.append(match['home_player_X%d' % i])\n                    players_y.append(match['home_player_Y%d' % i])\n                    players_api_id.append(match['away_player_%d' % i])\n                    players_x.append(match['away_player_X%d' % i])\n                    players_y.append(match['away_player_Y%d' % i])\n\n        players_x = [5 if x==1 else x for x in players_x]\n    return (players_api_id,players_x,players_y)","4f1817f8":"lists=player_compo(asse_18,True)\n\ndef Weight(lists):\n    df = pd.DataFrame(list(zip(lists[0], lists[1],lists[2])),\n                   columns =['player_api_id', 'players_x','players_y'])\n\n    df = df.join(player.set_index('player_api_id'), on='player_api_id')\n    df['weight']=df['weight'].apply(lambda x: x*0.453592)\n\n    #forwards\n    df_a=df.loc[df['players_y'] >= 7.2]\n    #midfielders\n    df_m=df.loc[(df['players_y'] >= 3.6) & (df['players_y'] < 7.2) ]\n    #defenders\n    df_d=df.loc[df['players_y'] < 3.6]\n\n    sns.set(style=\"darkgrid\")\n\n    f, ax = plt.subplots(3, 2, figsize=(15, 10), sharex=True,gridspec_kw={'width_ratios': [3,5],\n                           'wspace': 0.1,\n                           'hspace': 0.1})\n\n    sns.boxplot(df_a[\"weight\"], ax=ax[0][0],palette=['g'])\n    sns.histplot(data=df_a, x=\"weight\", ax=ax[0][1],color='green').set(title='weight distribution of forwards',xlabel='weight (kg)')\n    ax[0][0].set(xlabel='')\n\n\n    # assigning a graph to each ax\n    sns.boxplot(df_m[\"weight\"], ax=ax[1][0],palette=['r'])\n    sns.histplot(data=df_m, x=\"weight\", ax=ax[1][1], color='red').set(title='weight distribution of midfielders',xlabel='weight (kg)')\n    ax[1][0].set(xlabel='')\n\n    sns.boxplot(df_d[\"weight\"], ax=ax[2][0],palette=['b'])\n    sns.histplot(data=df_d, x=\"weight\", ax=ax[2][1],color='blue').set(title='weight distribution of defenders',xlabel='weight (kg)')\n    ax[2][0].set(xlabel='')\n\n    f.suptitle('Weight distribution for each field line', fontsize=16)\n\nWeight(lists)","f426a96c":"def Height(lists):\n    df = pd.DataFrame(list(zip(lists[0], lists[1],lists[2])),\n                   columns =['player_api_id', 'players_x','players_y'])\n\n    df = df.join(player.set_index('player_api_id'), on='player_api_id')\n\n\n    #forwards\n    df_a=df.loc[df['players_y'] >= 7.2]\n    #midfielders\n    df_m=df.loc[(df['players_y'] >= 3.6) & (df['players_y'] < 7.2) ]\n    #defenders\n    df_d=df.loc[df['players_y'] < 3.6]\n\n\n\n    sns.set(style=\"darkgrid\")\n\n    f, ax = plt.subplots(3, 2, figsize=(15, 10), sharex=True,gridspec_kw={'width_ratios': [3,5],\n                           'wspace': 0.1,\n                           'hspace': 0.1})\n\n    sns.boxplot(df_a[\"height\"], ax=ax[0][0],palette=['g'])\n    sns.histplot(data=df_a, x=\"height\", ax=ax[0][1],color='green').set(title='height distribution of forwards',xlabel='height (cm)')\n\n    ax[0][0].set(xlabel='')\n\n\n\n    sns.boxplot(df_m[\"height\"], ax=ax[1][0],palette=['r'])\n    sns.histplot(data=df_m, x=\"height\", ax=ax[1][1], color='red').set(title='height distribution of midfielders',xlabel='height (cm)')\n\n    ax[1][0].set(xlabel='')\n\n\n    sns.boxplot(df_d[\"height\"], ax=ax[2][0],palette=['b'])\n    sns.histplot(data=df_d, x=\"height\", ax=ax[2][1],color='blue').set(title='height distribution of defenders',xlabel='height (cm)')\n\n    ax[2][0].set(xlabel='')\n\n    f.suptitle('Height distribution for each field line', fontsize=16)\n\nHeight(lists)","1fbcdf5b":"def Feet(lists):\n\n    df = pd.DataFrame(list(zip(lists[0], lists[1],lists[2])),\n                   columns =['player_api_id', 'players_x','players_y'])\n    df = df.join(player.set_index('player_api_id'), on='player_api_id')\n    df = df.join(player_attributes, on='player_api_id', how='left', lsuffix='_left', rsuffix='_right')\n\n\n    #forwards\n    df_l=df.loc[df['players_x'] < 5]\n    #midfielders\n    df_m=df.loc[df['players_x'] == 5 ]\n    #defenders\n    df_r=df.loc[df['players_x'] > 5]\n\n\n    fig, ax = plt.subplots(1,3,figsize=(15,12)) \n\n\n    wedges, texts, autotexts =ax[0].pie(df_m['preferred_foot'].value_counts(), \n                                labeldistance=1.15, \n                                wedgeprops = { 'linewidth' : 1, 'edgecolor' : 'white' },\n                                autopct='%1.2f%%',\n                                colors = ['peru', 'steelblue'])\n\n    ax[1].legend(wedges, [\"left\",\"right\"],\n              title=\"Preferred foot\",\n              loc=\"center left\",\n              bbox_to_anchor=(0.7, 0.4, 0.5, 0.6))\n    ax[1].set_title(\"Mid part\")\n\n    wedges, texts, autotexts =ax[1].pie(df_l['preferred_foot'].value_counts(), \n                                labeldistance=1.15, \n                                wedgeprops = { 'linewidth' : 1, 'edgecolor' : 'white' },\n                                autopct='%1.2f%%',\n                                colors = ['steelblue','peru'])\n\n    ax[0].legend(wedges, [\"right\",\"left\"],\n              title=\"Preferred foot\",\n              loc=\"center left\",\n              bbox_to_anchor=(0.7, 0.4, 0.5, 0.6))\n    ax[0].set_title(\"Left sideline\")\n\n\n    wedges, texts, autotexts =ax[2].pie(df_r['preferred_foot'].value_counts(), \n                                labeldistance=1.15, \n                                wedgeprops = { 'linewidth' : 1, 'edgecolor' : 'white' },\n                                autopct='%1.2f%%',\n                                colors = [ 'steelblue','peru'])\n\n    ax[2].legend(wedges, [\"right\",\"left\"],\n              title=\"Preferred foot\",\n              loc=\"center left\",\n              bbox_to_anchor=(0.7, 0.4, 0.5, 0.6))\n    ax[2].set_title(\"Right sideline\")\n\n    fig.suptitle('Preferred foot for each part of the field', fontsize=15,y=0.7)\n\nFeet(lists)\n\n","53f1d059":"fr_18.head()","97039ac0":"xa=list()\nya=list()\n\nxh=list()\nyh=list()\n\n\nfor i in range(len(fr_18)):\n    match=fr_18.iloc[i]\n    \n    for j in range(1,12):  \n                if match['home_player_X%d' % j]==1:\n                    xh.append(5)\n                elif match['away_player_X%d' % j]==1:\n                    xa.append(5)\n                else:\n                    xh.append(match['home_player_X%d' % j])\n                    yh.append(match['home_player_Y%d' % j])\n                    xa.append(match['away_player_X%d' % j])\n                    ya.append(match['away_player_Y%d' % j])\n\n                \ndata= [list(a) for a in zip(xa,ya)]\ndata=np.array(data)\n\ndath= [list(a) for a in zip(xh,yh)]\ndath=np.array(dath)","60878c3f":"nbins = 100\nHeatmap(nbins,'Team formation Heatmap during the 2015-16 season')","ee1f2ac3":"compo=Count_compo(asse_18)   \nh=compo[::2]\na=compo[1::2]\n\nfig, (ax1, ax2) = plt.subplots(1,2,figsize=(20,6))\n\nax1.bar(Counter(h).keys(), Counter(h).values(), color=(0,0,0.6))\nax2.bar(Counter(a).keys(), Counter(a).values(), color=(0.6,0,0))\n\nax1.set_ylabel('Uses during the season')\nax1.set_xlabel('Team formation')\nax1.set_title('Home matches')\n\nax2.set_ylabel('Uses during the season')\nax2.set_xlabel('Team formation')\nax2.set_title('Away matches')\n\nfig.suptitle('Team formation occurences during the 2015-16 season', fontsize=16)\n\nplt.show()","ebefd434":"lists=player_compo(fr_18,False)\nHeight(lists)","a8a997d3":"Weight(lists)","7e7d5124":"Feet(lists)","45f8475f":"### Characteristics by position <a class=\"anchor\" id=\"c8c\"><\/a>","5880419c":"## Librairies <a class=\"anchor\" id=\"c1\"><\/a>","0b52377a":"### Heatmap field of ASSE <a class=\"anchor\" id=\"c7b\"><\/a>","bd43190a":"#### Height distribution for each field line <a class=\"anchor\" id=\"c8c1\"><\/a>","167aa855":"### Team formation occurences of ASSE <a class=\"anchor\" id=\"c7c\"><\/a>","4a8766e5":"### Team formation of ASSE <a class=\"anchor\" id=\"c7a\"><\/a>\n\n<img src=\"https:\/\/assets.stickpng.com\/thumbs\/580b57fcd9996e24bc43c4d7.png\" align=\"left\" alt=\"Drawing\" style=\"width:100px;\"\/>","588f2067":"## Dataset","6411e330":"#### Weight distribution for each field line <a class=\"anchor\" id=\"c7d1\"><\/a>","de74b275":"### Characteristics by position of ASSE <a class=\"anchor\" id=\"c7d\"><\/a>","91a2e4b2":"## Focus on the Ligue 1 <a class=\"anchor\" id=\"c3\"><\/a>\nWe filter the dataset in order to only keep the Ligue 1 data","f3aee899":"### Heatmap <a class=\"anchor\" id=\"c8a\"><\/a>","f79a0420":"## DataBase connection <a class=\"anchor\" id=\"c2\"><\/a>","480e159d":"#### Weight distribution for each field line <a class=\"anchor\" id=\"c8c2\"><\/a>","8718b029":"## Analysis for all team during the 2015-2016 Ligue 1 season <a class=\"anchor\" id=\"c8\"><\/a>","a6c0150c":"## List of competition teams <a class=\"anchor\" id=\"c5\"><\/a>","caeabe8e":"## Focus on the AS Saint-\u00c9tienne Team <a class=\"anchor\" id=\"c7\"><\/a>","2dd93014":"## Introduction","366a1a0d":"## Focus on the 2015-2016 season <a class=\"anchor\" id=\"c4\"><\/a>\nWe filter the dataset in order to only keep the 2015-2016 matches","82a89ea4":"#### Height distribution for each field line <a class=\"anchor\" id=\"c7d2\"><\/a>","ced2bb36":"<img src=\"https:\/\/vl-media.fr\/wp-content\/uploads\/2015\/07\/3200610435_1_27_mBTH8Ied.png\" align=\"center\" alt=\"Drawing\" style=\"width: 500px;\"\/>\n\n","a4bffd54":"#### Prefered foot <a class=\"anchor\" id=\"c8c3\"><\/a>","cf12646e":"The goal of this notebook was to analyse some characteritics of the french teams during the Ligue 1 season 2015-2016.\nThe study will be based on analysing the various postionning of players and the correlation between their position on the field and their characteristcs.","cca9d255":"# Analysis of team formations in Ligue 1 during the 2015-16 Season","60f4ea1b":"### Team formation occurences <a class=\"anchor\" id=\"c8b\"><\/a>","e46f3ff2":"## Table of Contents\n\n* [1. Librairies](#c1)\n* [2. DataBase connection](#c2)\n* [3. Focus on the Ligue 1](#c3)\n* [4. Focus on the 2015-2016 season](#c4)\n* [5. List of competition teams](#c5)\n* [6. Map of the cities of the competition teams](#c6)\n* [7. Focus on the AS Saint-\u00c9tienne Team](#c7)\n\n    * [a. Team formation of ASSE](#c7a)\n    * [b. Heatmap field of ASSE](#c7b)\n    * [c. Team formation occurences of ASSE](#c7c)\n    * [d. Characteristics by position of ASSE](#c7d)    \n    \n        * [1. Weight distribution for each field line](#c7d1)\n        * [2. Height distribution for each field line](#c7d2)\n        * [3. Prefered foot](#c7d3)\n        \n* [8. Analysis for all team during the 2015-2016 Ligue 1 season](#c8)\n\n    * [a. Heatmap](#c8a)\n    * [b. Team formation occurences](#c8b)\n    * [c. Characteristics by position of ASSE](#c8c)\n    \n        * [1. Height distribution for each field line](#c8c1)\n        * [2. Weight distribution for each field line](#c8c2)\n        * [3. Prefered foot](#c8c3)\n\n\n<a class=\"anchor\" id=\"c7\"><\/a>\n","5059ce0d":"European Soccer Database\n25k+ matches, players & teams attributes for European Professional Football\n\nreference: https:\/\/www.kaggle.com\/hugomathien\/soccer\nlicense: https:\/\/opendatacommons.org\/licenses\/odbl\/1-0\/","5ad234bc":"## Map of the cities of the competition teams <a class=\"anchor\" id=\"c6\"><\/a>","209c07ad":"Firstly, we will focus on AS Saint-\u00c9tienne which is my favorite team, in order to create various methods that will be used after to study the dataset globally. You can also take this code and reproduce the various steps in order to do it with your favorite team aswell. ","02db228b":"#### Prefered foot <a class=\"anchor\" id=\"c7d3\"><\/a>"}}