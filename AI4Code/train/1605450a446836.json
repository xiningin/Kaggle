{"cell_type":{"55624a38":"code","28f6541f":"code","405041de":"code","f76110cc":"code","3009b027":"code","c2180470":"code","eb7e4738":"code","844115d8":"code","0895e4d6":"code","14c61b89":"code","6b8fc40c":"code","a486149d":"code","85faa0a2":"code","d360f84e":"code","28534d7e":"code","3f7d9716":"code","5d16b86d":"code","98e98ccc":"code","498fe26f":"code","971117e7":"code","d2dff61f":"code","ee3778a1":"code","5e78404b":"code","4abf8b87":"code","25f79f21":"code","a0d6e1c6":"code","06fd06f6":"code","5320dd23":"code","4d026378":"code","669459be":"code","2ee829fb":"code","cc1c176a":"code","686ffe46":"code","ce2bceef":"code","b3d642bd":"code","a2d17c4b":"code","aa4614ba":"code","73e8b617":"code","56fc6977":"code","36d96cef":"code","2af46ec7":"code","911374ca":"code","a98b76cd":"code","8fbdb63d":"code","774a2e8b":"code","c4f9e26d":"code","9f25fb68":"code","ab2bd039":"code","71db23df":"code","e3592027":"code","a4497bca":"code","793376be":"code","c56e7f92":"code","90956bbd":"code","18434c42":"code","7f7af4df":"code","0caf4d78":"code","cd74e556":"code","99505dd8":"code","0c02ae6e":"code","4d10c75f":"code","dfdb1eb3":"code","982577ae":"code","91360945":"code","581d73b7":"code","5af1609a":"code","15c5fffd":"markdown","97ae19bc":"markdown","a3820d15":"markdown","2f48fd96":"markdown","c289a5a4":"markdown","fc590d01":"markdown","8e2e21ff":"markdown","d53f6f9f":"markdown","2fedc9f7":"markdown","c1b3fc53":"markdown","7d113ee1":"markdown","29e49f3f":"markdown","287bac1c":"markdown","02bd2fe3":"markdown","b4a46006":"markdown","56cdd78c":"markdown","d8a49e3c":"markdown","5c371c68":"markdown"},"source":{"55624a38":"import numpy as np \nimport pandas as pd ","28f6541f":"train = pd.read_csv('..\/input\/titanic\/train.csv')\ntest = pd.read_csv('..\/input\/titanic\/test.csv')\nsubmission = pd.read_csv('..\/input\/titanic\/gender_submission.csv')","405041de":"train.shape","f76110cc":"train.info()","3009b027":"train.head()","c2180470":"train['Survived'].value_counts()","eb7e4738":"train.columns","844115d8":"train['Cabin'] = train['Cabin'].fillna('None')\ntrain['Embarked'] = train['Embarked'].fillna('None')\ntrain['Have_Cabin'] = np.where(train['Cabin']=='None', 0, 1)","0895e4d6":"train_dp = train.drop(['PassengerId','Name','Ticket','Cabin','Parch'],axis=1)\ntrain_dp.shape","14c61b89":"train_features = train_dp.drop('Survived', axis=1)\ntrain_labels = train_dp['Survived']","6b8fc40c":"from sklearn.pipeline import Pipeline\nfrom sklearn.impute import SimpleImputer\nfrom sklearn.preprocessing import StandardScaler, OneHotEncoder\nfrom sklearn.compose import ColumnTransformer","a486149d":"num_pipeline =Pipeline([\n    ('imputer', SimpleImputer(strategy='median')),\n    ('std_scaler',StandardScaler()),\n])","85faa0a2":"num_attribs = list(train_features.select_dtypes(include='number').columns)\ncat_attribs = list(train_features.select_dtypes(include='object').columns)","d360f84e":"full_pipeline = ColumnTransformer([\n    ('num', num_pipeline, num_attribs),\n    ('cat', OneHotEncoder(),cat_attribs),\n])","28534d7e":"cat_attribs","3f7d9716":"train_prepared = full_pipeline.fit_transform(train_features)","5d16b86d":"def transform_test(df):\n    df['Cabin'] = df['Cabin'].fillna('None')\n    df['Embarked'] = df['Embarked'].fillna('None')\n    df['Have_Cabin'] = np.where(df['Cabin']=='None', 0, 1)    \n    df_dp = df.drop(['PassengerId','Name','Ticket','Cabin','Parch'],axis=1)\n    return full_pipeline.transform(df_dp)","98e98ccc":"from sklearn.metrics import accuracy_score","498fe26f":"from sklearn.linear_model import LogisticRegression\nmod_logit = LogisticRegression(random_state=0)","971117e7":"mod_logit.fit(train_prepared, train_labels)","d2dff61f":"logit_pred = mod_logit.predict(train_prepared)\naccuracy_score(train_labels, logit_pred)","ee3778a1":"from sklearn.model_selection import cross_val_score\ncross_val_score(mod_logit, train_prepared, train_labels, cv=3, scoring=\"accuracy\")","5e78404b":"from sklearn.svm import SVC \nmod_svm = SVC(kernel=\"rbf\", gamma=1, C=10)\nmod_svm.fit(train_prepared, train_labels)","4abf8b87":"svm_pred = mod_svm.predict(train_prepared)\naccuracy_score(train_labels, svm_pred)","25f79f21":"cross_val_score(mod_svm, train_prepared, train_labels, cv=3, scoring=\"accuracy\")","a0d6e1c6":"from sklearn.tree import DecisionTreeClassifier\nfrom sklearn import tree","06fd06f6":"mod_dt = DecisionTreeClassifier(max_depth=3, random_state=42, max_features = 3)\nmod_dt.fit(train_prepared, train_labels)","5320dd23":"tree.plot_tree(mod_dt);","4d026378":"cross_val_score(mod_dt, train_prepared, train_labels, cv=3, scoring=\"accuracy\")","669459be":"from sklearn.ensemble import RandomForestClassifier\nmod_rf = RandomForestClassifier(random_state=42)\nmod_rf.fit(train_prepared, train_labels)","2ee829fb":"rf_pred = mod_rf.predict(train_prepared)\naccuracy_score(train_labels, rf_pred)","cc1c176a":"cross_val_score(mod_rf, train_prepared, train_labels, cv=3, scoring=\"accuracy\")","686ffe46":"from sklearn.ensemble import GradientBoostingClassifier\n\nmod_gbrt = GradientBoostingClassifier(max_depth=2, n_estimators=3, learning_rate=1.0, random_state=42)\nmod_gbrt.fit(train_prepared, train_labels)","ce2bceef":"cross_val_score(mod_gbrt, train_prepared, train_labels, cv=3, scoring=\"accuracy\")","b3d642bd":"from sklearn.decomposition import PCA\npca = PCA()\ntrian_ld = pca.fit_transform(train_prepared)","a2d17c4b":"import matplotlib.pyplot as plt\nplt.plot(np.cumsum(pca.explained_variance_ratio_));","aa4614ba":"import plotly.express as px\ndf_plot = pd.DataFrame()\ndf_plot['1d'] = trian_ld[:,0]\ndf_plot['2d'] = trian_ld[:,1]\ndf_plot ['label'] = train_labels.astype('category')\npx.scatter(df_plot, x='1d', y='2d', color='label')","73e8b617":"from sklearn.model_selection import cross_val_predict\n\ny_train_pred = cross_val_predict(mod_rf, train_prepared, train_labels, cv=3)","56fc6977":"from sklearn.metrics import precision_score, recall_score, f1_score, confusion_matrix","36d96cef":"confusion_matrix(train_labels, y_train_pred)","2af46ec7":"precision_score(train_labels, y_train_pred)","911374ca":"recall_score(train_labels, y_train_pred)","a98b76cd":"f1_score(train_labels, y_train_pred)","8fbdb63d":"from sklearn.model_selection import GridSearchCV","774a2e8b":"param_grid_svm = {'C': list(range(1,11)),\n                 'gamma': list(range(1,6))}\nprint(param_grid_svm)","c4f9e26d":"svm_grid = GridSearchCV(mod_svm, param_grid_svm, cv = 3)","9f25fb68":"svm_grid.fit(train_prepared, train_labels)","ab2bd039":"svm_grid.best_params_","71db23df":"final_model_svm = svm_grid.best_estimator_","e3592027":"cross_val_score(final_model_svm, train_prepared, train_labels, cv=3, scoring=\"accuracy\")","a4497bca":"n_estimators = [int(x) for x in np.linspace(start = 30, stop = 120, num = 10)]\nmax_features = ['auto', 'sqrt']\nbootstrap = [True, False]\n\n# Create the random grid\nparam_grid_rf = {'n_estimators': n_estimators,\n               'max_features': max_features,\n               'bootstrap': bootstrap}\nprint(param_grid_rf)","793376be":"rf_grid = GridSearchCV(mod_rf, param_grid_rf, cv = 3)","c56e7f92":"rf_grid.fit(train_prepared, train_labels)","90956bbd":"rf_grid.best_params_","18434c42":"final_model_rf = rf_grid.best_estimator_","7f7af4df":"cross_val_score(final_model_rf, train_prepared, train_labels, cv=3, scoring=\"accuracy\")","0caf4d78":"from xgboost import XGBClassifier","cd74e556":"mod_xg = XGBClassifier()\nmod_xg.fit(train_prepared, train_labels)","99505dd8":"cross_val_score(mod_xg, train_prepared, train_labels, cv=3, scoring=\"accuracy\")","0c02ae6e":"test.head()","4d10c75f":"test_prepared = transform_test(test)","dfdb1eb3":"test_pred_rf = final_model_rf.predict(test_prepared)\ntest_pred_dt = mod_dt.predict(test_prepared)\ntest_pred_svm = final_model_svm.predict(test_prepared)\ntest_pred_logit = mod_logit.predict(test_prepared)\ntest_pred_gbrt = mod_gbrt.predict(test_prepared)\ntest_pred_xg = mod_xg.predict(test_prepared)","982577ae":"test_pred_rf.shape","91360945":"result = pd.DataFrame()\nresult['rf'] = test_pred_rf\nresult['dt'] = test_pred_dt\nresult['svm'] = test_pred_svm\nresult['logit'] = test_pred_logit\nresult['gbrt'] = test_pred_gbrt\nresult['xg'] = test_pred_xg\nresult['average_score'] = (result['rf'] + result['dt'] + result['svm'] + result['logit'] + result['xg'])\/5\nresult['average_result'] = (result['average_score'] >= 0.6).apply(int)","581d73b7":"submission['Survived'] = result['average_result']","5af1609a":"submission.to_csv('submission.csv',index=False)","15c5fffd":"### Performance Evaluation ","97ae19bc":"### Explore the Data","a3820d15":"### PCA","2f48fd96":"### Fine-Tune the Model","c289a5a4":"#### XGBoost","fc590d01":"#### SVM with Gaussian Kernal","8e2e21ff":"### Load the Data","d53f6f9f":"### Transform Data","2fedc9f7":"#### Random Forest","c1b3fc53":"#### SVM","7d113ee1":"#### Random Forest","29e49f3f":"### Train the Model","287bac1c":"#### Decision Tree","02bd2fe3":"#### Gradient Boosting","b4a46006":"### Clean and Transform the Data","56cdd78c":"Leave a code to transform test set","d8a49e3c":"#### Logistic Regression","5c371c68":"### Submit the Test Result"}}