{"cell_type":{"b2555239":"code","d68fe78e":"code","22aaeb2a":"code","21996de0":"code","15a3b51f":"code","46e63f69":"code","cac9db76":"code","9d6cda7f":"code","b00807a1":"code","5b746e70":"code","2ad7e8c2":"code","1cc2c979":"code","3cf0214e":"code","10064107":"code","b6078b99":"code","ed2dd8a3":"code","84c55ede":"code","a24c8c9c":"code","d534d480":"code","f2c8bf65":"code","10f6797c":"code","43826586":"code","9ce6f06d":"code","06b9a937":"code","fb3a13a7":"code","dd05e542":"code","37d94bb5":"code","3e7c651c":"code","83404955":"code","32996cca":"code","123f69e4":"code","624b5b7e":"code","26b19885":"code","ea50177e":"code","3c131fb9":"code","7b8f42a2":"code","4c7275d6":"code","3c4f4323":"code","c8ad936b":"markdown","8ae10a9a":"markdown","0a818b37":"markdown","5b8aef8f":"markdown","3f57e625":"markdown","e86ca27c":"markdown","d8d2bd21":"markdown","9c85ac42":"markdown","4ae1dd1c":"markdown","2d6e7109":"markdown","e47bd05b":"markdown","50f3221e":"markdown","c7d4eb93":"markdown","d631d0e0":"markdown","d9a56585":"markdown","1b57a889":"markdown","99051d0b":"markdown","930c87a6":"markdown","591784ea":"markdown","618ff740":"markdown","dcdc73b9":"markdown","39e7be54":"markdown","319ba311":"markdown","7729d51e":"markdown","d0bc15a1":"markdown","d45e2705":"markdown","3c8e590a":"markdown","3731116c":"markdown","fe47bb62":"markdown","48049f2c":"markdown"},"source":{"b2555239":"import pandas as pd\nfrom bokeh.models import ColumnDataSource, HoverTool\nfrom bokeh.plotting import figure, show, output_file","d68fe78e":"def get_portfolio(list_of_stocks):\n\n    stocks = {}\n    tickers = []\n    \n    for i in list_of_stocks:\n    \n        stocks[i] = pd.read_csv('..\/input\/'+str(i)+'.csv', na_values = ['NaN','','nan'], keep_default_na = False)\n        \n        tickers.append(i)       \n    \n    portfolio = pd.concat(stocks.values(), axis=1, keys=tickers)\n\n    portfolio.columns.names = ['Stock ticker', 'Stock info']\n\n    return portfolio, stocks, tickers","22aaeb2a":"def clean_portfolio(stocks):\n        \n    stocks_clean = {}\n        \n    #Any values with a value of less than half of the standard deviation is considered anomalous and will be replaced by the mean of the column.    \n    def anomolous_result(series):\n            \n            for i in range(len(series)):\n\n                if series.iloc[i] < (0.5*series.std()):\n                    series.iloc[i] = series.mean() - series.iloc[i]\n                else:\n                    pass\n\n            return series\n        \n    \n    for i in tickers:\n        \n        #choose relevant columns\n        stocks_clean[i] = stocks[i].drop(['Open','High','Low','Adj. close**'],axis=1).dropna()\n        \n        #reset column names\n        stocks_clean[i].columns = ['date','close','volume']\n        \n        #format the columns\n        stocks_clean[i]['date'] = pd.to_datetime(stocks_clean[i]['date'])\n        stocks_clean[i]['close'] = pd.to_numeric(stocks_clean[i]['close'],errors='coerce')\n        stocks_clean[i]['volume'] = stocks_clean[i]['volume'].apply(lambda x:x.replace(',',''))\n        stocks_clean[i]['volume'] = stocks_clean[i]['volume'].astype('int32')\n        \n        #sort the stocks dataframes by the date column so that it is ascending\n        stocks_clean[i].sort_values(by='date', inplace=True)\n        \n        #Addressing anomolous values\n        stocks_clean[i]['close'] = anomolous_result(stocks_clean[i]['close'])\n        \n    stocks = stocks_clean\n    \n    return stocks","21996de0":"def volume(tickers):\n    \n    volume = pd.DataFrame(tickers['MKS']['date'])\n    \n    for i in stocks:\n        \n        volume[i] = tickers[i]['volume']\n\n    volume['average volume'] = volume.mean(axis=1)\n\n    return volume","15a3b51f":"def close_prices(stocks):\n    \n    closing_prices = pd.DataFrame(stocks['MKS']['date'])\n    \n    for i in tickers:\n        \n        closing_prices[i] = stocks[i]['close']\n    \n    return closing_prices","46e63f69":"def daily_change(close_prices_table):\n    \n    daily_change_table = pd.DataFrame(close_prices_table['date'])\n    \n    for i in tickers:\n       \n        daily_change_table[i +' daily change'] = close_prices_table[i].diff()\n   \n    daily_change_table['average daily change'] = daily_change_table.mean(axis=1)\n    \n    #drop the first row since it will be full of null values\n    daily_change_table.dropna(thresh=4, inplace=True)\n    \n    return daily_change_table","cac9db76":"def daily_return(close_prices_table):\n    \n    daily_return_table = pd.DataFrame(close_prices_table['date'])\n\n    for i in tickers:\n        \n        daily_return_table[i+' daily return'] = close_prices_table[i].pct_change()*100\n\n    daily_return_table['average daily return'] = daily_return_table.mean(axis=1)\n    \n    #drop the first row because it will contain null values\n    daily_return_table.dropna(thresh=4, inplace=True)\n    \n    return daily_return_table","9d6cda7f":"def investment_return(close_prices_table):\n    \n    investment_return_table = pd.DataFrame(close_prices_table['date'])\n    \n    def return_from_purchase(x):\n        return ((x-(close_prices_table[i].iloc[0]))\/(close_prices_table[i].iloc[0]))*100\n\n    for i in tickers:\n        \n        investment_return_table[i + ' investment return'] = close_prices_table[i].apply(lambda x: return_from_purchase(x))\n\n    investment_return_table['average investment return'] = investment_return_table.mean(axis=1)\n    \n    #Drop the first row because it will just contain null values\n    investment_return_table = investment_return_table[1::]\n    \n    return investment_return_table","b00807a1":"def format_graph(dataframe,title,x_label,y_label):\n   \n    #Define the data source for the plots\n    source = ColumnDataSource(data = dataframe)\n\n    #Instantiate the figure for plotting\n    fig = figure(plot_width = 1200, \n                              plot_height = 600, \n                              title = title, \n                              x_axis_label = x_label, \n                              y_axis_label = y_label,\n                              x_axis_type=\"datetime\",\n                              tools = ['wheel_zoom','box_select','box_zoom','reset']\n                              )\n\n    fig.background_fill_color = \"DeepSkyBlue\"\n    fig.background_fill_alpha = 0.05\n    fig.xgrid.grid_line_color = \"white\"\n    fig.ygrid.grid_line_color = \"white\"\n    \n    #Define a list containing each ticker so that we can iterate through each company's data\n    lines = list(dataframe.drop('date',axis=1))\n    colors = {tickers[0]:'black',tickers[1]:'green',tickers[2]:'orange',tickers[3]:'darkblue'}\n    \n    return source, fig, lines, colors","5b746e70":"def plot_graph(source, figure, title, lines, colors):\n    \n    for i in lines:\n\n            if i.split(' ')[0] in tickers:\n\n                #plot the data onto the figure\n                plot = figure.line(x= 'date',\n                                   y= i,\n                                   legend_label=i,\n                                   line_width=0.8,\n                                   line_color=colors[i.split(' ')[0]],\n                                   alpha=0.8,\n                                   source=source\n                                   )\n                \n                #add the tools to the graph\n                figure.add_tools(HoverTool(renderers = [plot],\n                                           tooltips = [('Company', i),\n                                                       ( 'date',   '@date{%F}' ),\n                                                       ( str(title),  '@'+'{'+i+'}' ),\n                                                      ],\n                                           formatters = {\n                                                        'date' : 'datetime',\n                                                        str(title) : 'printf'\n                                                        }\n                                          )\n                                )\n \n            else:\n\n                #plot the data onto the figure\n                plot = figure.line(x= 'date',\n                                   y= i,\n                                   legend_label=i,\n                                   line_width=3,\n                                   line_color='red',\n                                   alpha=1,\n                                   source=source\n                                  )\n\n                #add the tools to the graph\n                figure.add_tools(HoverTool(renderers = [plot],\n                                                     tooltips = [('Company', i),\n                                                                 ( 'date',   '@date{%F}' ),\n                                                                 ( str(title),  '@'+'{'+i+'}' ),\n                                                                ],\n                                                     formatters = {\n                                                                 'date' : 'datetime',\n                                                                 str(title) : 'printf'\n                                                                  },\n                                                     mode='vline'\n                                                  )\n                                        )\n\n    return figure","2ad7e8c2":"portfolio, stocks, tickers = get_portfolio(['MKS','MRW','SBRY','TSCO'])","1cc2c979":"portfolio.head(2)","3cf0214e":"stocks = clean_portfolio(stocks)","10064107":"volume_table = volume(stocks)","b6078b99":"volume_table.head(3)","ed2dd8a3":"close_prices_table = close_prices(stocks)\n#Addressing missing values for may 19th\nclose_prices_table['MRW'].loc[36] = close_prices_table['MRW'].mean()\nclose_prices_table['TSCO'].loc[36] = close_prices_table['TSCO'].mean()","84c55ede":"close_prices_table.head(3)","a24c8c9c":"daily_change_table = daily_change(close_prices_table)","d534d480":"daily_change_table.head(3)","f2c8bf65":"daily_return_table = daily_return(close_prices_table)","10f6797c":"daily_return_table.head(3)","43826586":"investment_return_table = investment_return(close_prices_table)","9ce6f06d":"investment_return_table.head(3)","06b9a937":"volume_source, volume_figure, volume_lines, volume_color = format_graph(dataframe = volume_table,\n                                                                        title = 'volume',\n                                                                        x_label = 'time',\n                                                                        y_label = 'volume')","fb3a13a7":"volume_plot = plot_graph(source = volume_source, \n                         figure = volume_figure, \n                         title = 'volume', \n                         lines = volume_lines, \n                         colors = volume_color)","dd05e542":"show(volume_plot)","37d94bb5":"close_source, close_figure, close_lines, close_color = format_graph(dataframe = close_prices_table,\n                                                                    title = 'closing price',\n                                                                    x_label = 'time',\n                                                                    y_label = 'closing price')","3e7c651c":"close_prices_plot = plot_graph(source = close_source, \n                               figure = close_figure, \n                               title = 'closing price (\u00a3)', \n                               lines = close_lines, \n                               colors = close_color)","83404955":"show(close_prices_plot)","32996cca":"dc_source, dc_figure, dc_lines, dc_color = format_graph(dataframe = daily_change_table,\n                                                        title = 'daily change',\n                                                        x_label = 'time',\n                                                        y_label = 'daily change')","123f69e4":"daily_change_plot = plot_graph(source = dc_source, \n                               figure = dc_figure, \n                               title = 'daily change (\u00a3)', \n                               lines = dc_lines, \n                               colors = dc_color)","624b5b7e":"show(daily_change_plot)","26b19885":"dr_source, dr_figure, dr_lines, dr_color = format_graph(dataframe = daily_return_table,\n                                                        title = 'daily return',\n                                                        x_label = 'time',\n                                                        y_label = 'daily return')","ea50177e":"daily_return_plot = plot_graph(source = dr_source, \n                               figure = dr_figure, \n                               title = 'daily return (%)', \n                               lines = dr_lines, \n                               colors = dr_color)","3c131fb9":"show(daily_return_plot)","7b8f42a2":"ir_source, ir_figure, ir_lines, ir_color = format_graph(dataframe = investment_return_table,\n                                                        title = 'investment return',\n                                                        x_label = 'time',\n                                                        y_label = 'investment return')","4c7275d6":"investment_return_plot = plot_graph(source = ir_source, \n                                    figure = ir_figure, \n                                    title = 'investment return (%)', \n                                    lines = ir_lines, \n                                    colors = ir_color)","3c4f4323":"show(investment_return_plot)","c8ad936b":"![aa%29%20closing%20price.png](attachment:aa%29%20closing%20price.png)","8ae10a9a":"#### The best performer \n - Morrisons:\n     - Relatively similar in volatilty to both Tesco and Sainsburys.\n     - Low trading volume, relative to the other supermarkets (less sensitive to media)\n     - Highest return on investment throughout the period\n     \n#### The worst performer\n - Marks and Spencer:\n     - Most volatility in both objective and price-adjusted terms, as well as the \n     - largest decrease in its share price throughout the period by quite a margin\n     - largest loss on investment\n     \n#### Across the board \n - All of the supermarkets suffered during 2020 with each posting a negative return on investment.\n    - This is despite March being recorded as the highest monthly sales for UK supermarkets\n        This shows that the negative effects of the coronavirus of UK supermarket operations is expected to outweigh the boost in sales during lockdown. \n - The relative return on investment of each supermarket can indicate the strength of the brand in the UK market, as well as the company's ability to deal with operational shocks. \n     - Nevertheless, it is worth noting that the supermarkets that report a higher trading volume are much more sensitive to media. From this, certain information asymmetries are likely to have an effect on the share price.","0a818b37":"#### Plotting volume of portfolio components\n - There is a spike in trading volume across the board during March which is expected because this is when lockdown was announced. The implications of this would affect the supermarkets in both their supply chains (issues with trade) and consumer demand (requirements to ration etc.)\n - Neverthelss, March recorded the monthly UK supermarket sales which would have encouraged more investors to make trades.\n - There was a huge spike in volume for Marks and Spencer at the end of may which may have been a result of their earnings release on may 20th.","5b8aef8f":"#### Creating daily return dataframe\n - Calculating the daily return as the daily price change divided by the previous price. Using the Pandas 'pct_change()' method as it saves some time here.\n - Again calculating the average as the average of each row in order to look at the performance of the group as a whole with their different pricing scales accounted for.\n - Since this calculations uses the previous rows, the first row will contain empty values. Because of this I am dropping the first row.","3f57e625":"#### Creating the porfolio, the dictionary that contains its contents and a list of the tickers of portfolio companies","e86ca27c":"#### Creating a function to format the graph.\n - This function passes the dataframe as well as a title and axis labels into Bokeh functions to format the graph. \n    - It uses the dataframe as a source for the information which saves repetition.\n    - It creates a figure object using the title and axis labels, as well as tools for the plots.\n - This function returns:\n    - 'source' which provides the data for the and labels.\n    - 'fig' which is the formatted figure object.\n    - 'lines' which provides a list of a dataframe containing only the values to be plotted.\n    - 'colors' which provides a dictionary with the keys being the company tickers and the colors being associated brand colors.\n    \n ","d8d2bd21":"# Conclusions","9c85ac42":"#### Creating trading volume dataframe.","4ae1dd1c":"#### plotting daily change in price of portfolio components\n - As expected, the magnitude of price changes is the largest during March.\n - Overall there is similar volatility across the board.","2d6e7109":"In order to get the stocks into a portfolio, I read them in as a dataframe as they are all of the form csv. \nI then store each dataframe in the dictionary 'stocks', as well as storing the ticker names in 'tickers'.\n - 'portfolio' returns a visual representation of all metrics of the stock.\n - 'stocks' returns a dictionary with keys being the tickers and the values being the associated dateframe.\n - 'tickers' returns a list of the tickers of the supermarkets that we are looking at.","e47bd05b":"# Graph functions","50f3221e":"I have created functions that will pass in the stocks data and then return the relevant dataframe to use for analysis.\nAs I am looking to refactor this code into a class format in the near future, seperating each function will make the process much simpler.","c7d4eb93":"![aa%29%20daily%20return.png](attachment:aa%29%20daily%20return.png)","d631d0e0":"# Get portfolio and data functions","d9a56585":"#### Creating investment return dataframe\n - Creating a function 'return_from_purchase' which calculates the percentage change in closing price between the current date and the purchase date.\n - For similar reasons to the daily return calculation, I am also dropping the first row of this table.","1b57a889":"#### plotting return on each investment since investment date\n - Decline on investment across the board with M&S being driving force for poor performance within the group.\n - Tesco and Sainsbury's again, have a gradual decrease throughout the period of investment.","99051d0b":"![aa%29%20trading%20volume.png](attachment:aa%29%20trading%20volume.png)","930c87a6":"#### Creating closing price dataframe","591784ea":"# Using the functions to explore and analyse the data.","618ff740":"# UK Supermarket 2020 stock market performance.\n\n### *** Note that I was unable to call the Bokeh plots themselves with the Kaggle kernel, so instead I have pasted screenshots of each graph ***\n - Looking at the share price performance of Marks and Spencer, Morrisons, Sainsburys and Tesco during the year 2020. It will be interesting to see the impact of operational shocks such as coronavirus on the share price performance of each company.\n    - For simplicity we will be simulating a stock market portfolio in which one share of each company was purchased at the start of the year.\n    - The metrics that we will be using to analyse the performance of each company are the following:\n        - Trading volume:\n            - A high trading volume is a good indicator of a stock's activity in the market. This will be closely related to variables such as media, conference calls and earnings releases.\n        - Daily closing share price (\u00a3):\n            - The closing price directly indicates the performance of a stock in the market, we will be using this as our main indicator to gauge how well the supermarkets performed, relative to eachother.\n        - Daily change in closing share price (\u00a3):\n            - The magnitude of daily change in closing share price is linked to he volatility of a stock in the market. Consistent daily changes of high volatility imply more risk to be associated with a stocks performance.\n        - Daily percentage change in price (%):\n            - Another way to look at the daily variation in share price is by the % change. This takes into account the different scales at which the companies are priced and makes for better comparison.\n        - Return of on initial investment (%):\n            - Calculated as the percentage change in closing price between the current date and the date of initial investment. This demonstrates the performance of the stock throughout the term of ownership and will show us how well these companies have dealt with the challenges of 2020 so far.\n    - These metrics will then be graphed using time-series line plots from the Bokeh library.\n    - The relationship between each","dcdc73b9":"#### Creating a function to plot the graph\n - This function passes the output of the previous function with the additional argument of 'title', in order to label the hover tool.\n - Iterating through the lines list, it checks:\n     - if the data belongs to a ticker (in which it assigns the line the brand color) \n     - else the data is an aggregate, such as 'average', in which it assigns the line the color 'red' with a thicker, more opaque line.\n - This function then returns the final formatted figure which contains all of the plots.\n - One way to improve this would be to store lines as a dictionary rather than a list which would allow the operation to be O(1) rather than O(n), however since I am only working with a small set of data (4 companies, each with <200 entries) this will not affect performance too much.","39e7be54":"To keep the code tidy, I created a function that would clean the data, rather than doing so in the global space. This meant that:\n\n - I could easily identify and amend errors.\n - I could simply adjust the function slightly to apply the same procedures to a new financial dataset from the same source.\n - I could easily store the function within a module.\n \n This function returns 'stocks' which is a dictionary similar to the first one but containing cleaned, formatted data.","319ba311":"#### plotting daily return of portfolio components \n - Better indicator of volatility as shows change of price relative to previous price.\n - M&S shows the largest changes in daily return which implies that its price is the least stable.\n - The other supermarkets are quite closely packed to the mean which implies that they have less variation in their price and are pretty similar in daily return.","7729d51e":"![aa%29%20daily%20change.png](attachment:aa%29%20daily%20change.png)","d0bc15a1":"# Metrics functions","d45e2705":"#### plotting closing price of portfolio components\n - Marks and Spencer sees the sharpest decline over this period, which makes sense because it was reported that Marks and Spencer expected a 60% decline in revenues as a result of the lockdown. \n - Tesco and Sainsburys see gradual decline with a few areas of high volatility.\n - Morrisons remains relatively stable throughout the period also with a few areas of volatility, which implies a sound ability to deal with operational shocks.","3c8e590a":"![aa%29%20investment%20return.png](attachment:aa%29%20investment%20return.png)","3731116c":"Since Bokeh plots are quite low-level, I decided to split the plotting process into two different functions in order to apply these plotting functions for each table without repeating code.","fe47bb62":"#### Creating daily price change dataframe.\n - Calculating the daily price change as the difference between the current and previous days' closing prices.\n - Taking an average daily price change in order to look at the performance of the supermarkets as a whole.","48049f2c":"#### Creating the tables of financial metrics"}}