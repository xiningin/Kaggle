{"cell_type":{"25e7e2a7":"code","1c4f3b99":"code","c6ceda73":"code","7506a53b":"code","f53d3cb1":"code","c7d7ef05":"code","d31f347d":"code","a17c0244":"code","38644898":"code","0a5ba633":"code","15a4c1bf":"code","74a220dd":"code","13822ac1":"code","6b58877e":"code","57cdcc9e":"code","b256c722":"code","945323d7":"code","065aa398":"code","96a76117":"code","cd463b33":"code","d6a59401":"code","af4f4c9d":"code","195704f0":"code","b1133771":"code","fba1b618":"code","35be1a90":"code","c8aefcf4":"code","e566cf88":"code","ee0bddf2":"code","e5dd01cd":"code","8504057b":"code","4774e6cc":"code","8cafde61":"code","f0152d0a":"code","f1926722":"code","bb405974":"code","1de6afa2":"markdown","350d961c":"markdown"},"source":{"25e7e2a7":"import numpy as np\nimport cudf\n\ntrain = cudf.read_csv(\"\/kaggle\/input\/tabular-playground-series-feb-2021\/train.csv\")\ntest = cudf.read_csv(\"\/kaggle\/input\/tabular-playground-series-feb-2021\/test.csv\")\nsample_submission = cudf.read_csv('..\/input\/tabular-playground-series-feb-2021\/sample_submission.csv')","1c4f3b99":"train.tail(3)","c6ceda73":"test.tail(3)","7506a53b":"sample_submission.tail(3)","f53d3cb1":"type(train)","c7d7ef05":"type(train.to_pandas())","d31f347d":"train.to_pandas()","a17c0244":"train[['id', 'cat0', 'cat8', 'cont7']].to_pandas()","38644898":"type(train.to_pandas())","0a5ba633":"y = train.target\n\ny.to_pandas()","15a4c1bf":"type(y.to_pandas())","74a220dd":"train.describe()","13822ac1":"test.info()","6b58877e":"train.info()","57cdcc9e":"train.isna().sum()","b256c722":"sample_submission.info()","945323d7":"test.isna().sum()","065aa398":"import pandas as pd \n\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\nsns.scatterplot(x='cont1' , y= 'cont2',size='cont0',data=train.sample(100).to_pandas(), hue='target');","96a76117":"train.columns\ntrain","cd463b33":"from cuml.preprocessing import train_test_split","d6a59401":"X = train.drop('target', axis=1)\ny = train.target","af4f4c9d":"X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=2)","195704f0":"def baseline_model(n_predictions, value_to_predict):\n    \"\"\"\n    just predict a single value (e.g. mean) for everything\n    \"\"\"\n    baseline_preds = []\n    for i in range(n_predictions): \n        baseline_preds.append(value_to_predict) \n    return pd.Series(baseline_preds) \n\nn_predictions = len(y_test) \nbaseline_value = y_train.value_counts().index[0]  \n\nbaseline_preds = baseline_model(n_predictions, baseline_value)\nbaseline_preds","b1133771":"baseline_preds","fba1b618":"from cuml.metrics import mean_squared_error","35be1a90":"mean_squared_error(y_true=y_test,\n                   y_pred=baseline_preds,\n                   squared=False)","c8aefcf4":"cat_col = [col for col in train.columns if train[col].dtype=='O']\ncat_col","e566cf88":"np.mean(y_train)","ee0bddf2":"def baseline_model(n_predictions, value_to_predict):\n    \"\"\"\n    just predict a single value (e.g. mean) for everything\n    \"\"\"\n    baseline_preds = []\n    \n    for i in range(n_predictions): \n        baseline_preds.append(value_to_predict)\n    return pd.Series(baseline_preds) \nn_predictions = len(y_test) \nbaseline_value = y_train.value_counts().index[0]  \nbaseline_preds = baseline_model(n_predictions, baseline_value)\nbaseline_preds","e5dd01cd":"from sklearn.ensemble import RandomForestRegressor\n\nrfr = RandomForestRegressor()\nrfr.fit(X_train, y_train)","8504057b":"preds = rfr.predict(X_test)\npreds[-4: ]","4774e6cc":"from sklearn.metrics import mean_absolute_error\nmean_absolute_error(y_test, preds)","8cafde61":"#p_grid = {'fit_intercept': [True, False],\n          #'solver':[ \"newton-cg\", \"lbfgs\", \"liblinear\", \"sag\", \"saga\"],\n          #'max_iter': [100, 150, 200,250,500, 10000] , \n          #'penalty': ['l2', 'l1']\n#}\n\n#grid = GridSearchCV(lr, p_grid, cv=7)\n#grid.fit(x_train, y_train)","f0152d0a":"#grid.fit(X_train, y_train)","f1926722":"#grid.best_params_","bb405974":"#preds = lr.predict(X_test)\n\n#accuracy_score(y_test, preds)","1de6afa2":"### Notes\n1. To use sklearn with cudf... convert `cudf.Series` \/ `cudf.DataFrame` `.to_pandas()`..\n2. Using cudf is the same as using pandas but `cudf` instead of `pd`..","350d961c":"# TPS Feb 2021\nStarter Notebook\n\n## Deleverables\n1. EDA\n    - What's going on?\n    - Show me the data...\n2. Model\n    - Baseline...\n    - Simple...\n    - Evaluation...\n    - Improvement...\n3. RAPIDS Bonus\n    - Apply RAPIDS ([Starter Notebook](https:\/\/www.kaggle.com\/tunguz\/tps-feb-2021-rapids-starter))\n    - Replace pandas with [cuDF](https:\/\/github.com\/rapidsai\/cudf) & sklearn with [cuML](https:\/\/github.com\/rapidsai\/cuml)\n    - Context: [What is RAPIDS?](https:\/\/medium.com\/future-vision\/what-is-rapids-ai-7e552d80a1d2?source=friends_link&sk=64b79c363beeffb9923e16482f3977cc)\n    \n    \n#### Troubleshooting\n- [Data](https:\/\/www.kaggle.com\/c\/tabular-playground-series-feb-2021\/data)\n- [Overview](https:\/\/www.kaggle.com\/c\/tabular-playground-series-feb-2021\/overview)\n- [RF Starter Notebook](https:\/\/www.kaggle.com\/warobson\/tps-feb-2021-rf-starter)\n- [ML repo on GitHub](https:\/\/github.com\/gumdropsteve\/intro_to_machine_learning)\n- [Most simple RAPIDS Notebook submission](https:\/\/www.kaggle.com\/warobson\/simple-rapids-live) (Has stuff like `train_test_split()` with cuml..)\n    \n#### Load Data"}}