{"cell_type":{"1a16ae9d":"code","b93d16ac":"code","c0ecfd61":"code","19a3e655":"code","bef624d2":"code","6121ca30":"code","b47f7532":"code","44ddc98e":"code","18392004":"code","0e1a9408":"code","a37c46a0":"code","b0760dbe":"code","40acaff9":"code","6ee3c336":"code","f7e0b828":"code","70b4c0ec":"code","851eeac0":"code","0df84c92":"code","43a6393d":"code","f9abff35":"code","9a97243f":"code","0157afbe":"code","0b82b0d4":"code","05a05b1d":"code","81790fe6":"markdown","453b1eea":"markdown","0822f831":"markdown","1748fae5":"markdown","fae671cb":"markdown","853ccb8b":"markdown","acb448d2":"markdown","5db9f1be":"markdown","51c1940f":"markdown","bb42f9cb":"markdown","d1a0dd3d":"markdown","6ed69e0b":"markdown","b6ae5828":"markdown","84caefb6":"markdown","b2c57377":"markdown"},"source":{"1a16ae9d":"pip install gradio","b93d16ac":"import numpy as np\nimport pandas as pd \nimport random\n\nimport matplotlib.pyplot as plt\nimport os\nimport cv2\n\nfrom sklearn.model_selection import train_test_split\nfrom sklearn import metrics\n\nimport tensorflow as tf\nfrom tensorflow import keras\nfrom tensorflow.keras.models import Sequential\nfrom tensorflow.keras.layers import Dense, Dropout, Activation, Flatten, Conv2D, MaxPooling2D\n\nimport gradio\nimport gradio as gr\nfrom urllib.request import urlretrieve","c0ecfd61":"#check out data\nDATADIR = '\/kaggle\/input\/cat-dog-classification\/PetImages'\nCATEGORIES = [\"Dog\", \"Cat\"]\n\nfor category in CATEGORIES:\n    path = os.path.join(DATADIR, category)    #path to cats or dogs dir\n    for img in os.listdir(path):\n        img_array = cv2.imread(os.path.join(path, img), cv2.IMREAD_GRAYSCALE)\n        plt.imshow(img_array, cmap = \"gray\")\n        plt.show()\n        break\n    break","19a3e655":"print(img_array.shape)","bef624d2":"#resize image\nIMG_SIZE = 100\n\nnew_array = cv2.resize(img_array, (IMG_SIZE, IMG_SIZE))\nplt.imshow(new_array, cmap = 'gray')\nplt.show()","6121ca30":"#create create array of data\ndata = []\n\ndef create_data():\n    for category in CATEGORIES:\n        path = os.path.join(DATADIR, category)    #path to cats or dogs dir\n        \n        class_num = CATEGORIES.index(category)    #assign class label\n        \n        for img in os.listdir(path):\n            try: \n                img_array = cv2.imread(os.path.join(path, img), cv2.IMREAD_GRAYSCALE)\n                new_array = cv2.resize(img_array, (IMG_SIZE, IMG_SIZE))\n\n                data.append([new_array, class_num])\n            except Exception as e:\n                pass\n\ncreate_data()","b47f7532":"print(len(data))","44ddc98e":"import random\nrandom.shuffle(data)","18392004":"random.shuffle(data)\n\n#separate features and labels\nX = []\ny = []\n\nfor features, label in data:\n    X.append(features)\n    y.append(label)\n\n#neural network takes in a numpy array as the features and labels so convert from list to array and change shape\nX = np.array(X).reshape(-1, IMG_SIZE, IMG_SIZE, 1)\ny = np.array(y)","0e1a9408":"#show shape; (count of images, rows, columns, dimension (1D because grayscale image))\nX.shape","a37c46a0":"X = X\/255.0","b0760dbe":"#separate training and test data\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=42)\n\nprint('the shape of training features is {}'.format(X_train.shape))\nprint('the shape of training labels is {}'.format(y_train.shape))\n\nprint('the shape of test features is {}'.format(X_test.shape))\nprint('the shape of test labels is {}'.format(y_test.shape))","40acaff9":"#create model\nmodel = Sequential()\n\nmodel.add(Conv2D(64, (3,3), activation = 'relu'))\nmodel.add(MaxPooling2D(2,2))\nmodel.add(Dropout(0.2))\n\nmodel.add(Conv2D(64, (3,3), activation = 'relu'))\nmodel.add(MaxPooling2D(2,2))\nmodel.add(Dropout(0.2))\n\nmodel.add(Conv2D(64, (3,3), activation = 'relu'))\nmodel.add(MaxPooling2D(2,2))\nmodel.add(Dropout(0.2))\n\nmodel.add(Flatten())\n\nmodel.add(Dense(128, input_shape = X.shape[1:], activation = 'relu'))\n\n#output layer\nmodel.add(Dense(2, activation = 'softmax'))","6ee3c336":"#compile the model\nmodel.compile(loss=\"sparse_categorical_crossentropy\",\n             optimizer=\"adam\",\n             metrics=['accuracy'])","f7e0b828":"#fit model\nhistory = model.fit(X_train, y_train, epochs=5, validation_split=0.1)","70b4c0ec":"model.summary()","851eeac0":"#show learning curves\n#mean training loss and accuracy measured over each epoch\n#mean validation loss and accuracy measured at the end of each epoch\n\npd.DataFrame(history.history).plot(figsize=(8,5))\nplt.grid(True)\nplt.gca().set_ylim(0,1) # set the vertical range to [0-1]\nplt.show()","0df84c92":"#use the model to make predictions on test data\ny_proba = model.predict(X_test)\ny_proba.round(2)","43a6393d":"#use predict_classes() to find the class with the highest probability\ny_pred = model.predict_classes(X_test)\ny_pred","f9abff35":"print(\"Performance Summary of Sequential Neural Network on test data:\")\n\n#show classification report\nprint(metrics.classification_report(y_test, y_pred))\n\n#show confusion matrix\nprint(metrics.confusion_matrix(y_test, y_pred))","9a97243f":"#separate correct and incorrect predictions\nincorrect_indices = []\ncorrect_indices = []\n\nfor idx,(i,j) in enumerate(zip(y_pred, y_test)):\n    if i != j:\n        incorrect_indices.append(idx)\n    else:\n        correct_indices.append(idx)\n        \nprint(len(correct_indices))\nprint(len(incorrect_indices))","0157afbe":"#show first 5 correctly identified test images with predicted labels and probabilities\nfig, ax = plt.subplots(1,5,figsize=(20,20))\n\nclass_names = [\"Dog\", \"Cat\"]\n\nfor i, correct_idx in enumerate(correct_indices[:5]):\n    ax[i].imshow(X_test[correct_idx].reshape(100,100),cmap='gray')\n    ax[i].set_title(\"{} with probabililty of {}%\".format(class_names[y_pred[correct_idx]], int(max(y_proba[correct_idx])*100)))","0b82b0d4":"#show first 5 incorrectly identified test images with predicted labels and probabilities\nfig, ax = plt.subplots(1,5,figsize=(20,20))\n\nfor i, incorrect_idx in enumerate(incorrect_indices[:5]):\n    ax[i].imshow(X_test[incorrect_idx].reshape(100,100),cmap='gray')\n    ax[i].set_title(\"{} with probabililty of {}%\".format(class_names[y_pred[incorrect_idx]], int(max(y_proba[incorrect_idx])*100)))","05a05b1d":"#create a function to make predictions\n#return a dictionary of labels and probabilities\ndef cat_or_dog(img):\n    img = img.reshape(1, 100, 100, 1)\n    prediction = model.predict(img).tolist()[0]\n    class_names = [\"Dog\", \"Cat\"]\n    return {class_names[i]: prediction[i] for i in range(2)}\n\n#set the user uploaded image as the input array\n#match same shape as the input shape in the model\nim = gradio.inputs.Image(shape=(100, 100), image_mode='L', invert_colors=False, source=\"upload\")\n\n#setup the interface\niface = gr.Interface(\n    fn = cat_or_dog, \n    inputs = im, \n    outputs = gradio.outputs.Label(),\n)\niface.launch(share=True)","81790fe6":"compile the model with the following parameters:","453b1eea":"here we separate the image arrays as X and labels as y","0822f831":"Because this exercise will be for a simple CNN model, we will resize all images to shape (100, 100)\n\nan example is shown below","1748fae5":"show first 5 incorrectly identified test images with predicted labels and probabilities","fae671cb":"### Check out both correct and incorrect classification outputs","853ccb8b":"next we perform a train test split (training size as 70%, test size as 30%)","acb448d2":"## Modeling","5db9f1be":"# Cat Dog Image Classification & demo with GradioML","51c1940f":"create a convolutional neural network using the following architecture:","bb42f9cb":"we will now organize all of the images and their classes","d1a0dd3d":"show first 5 correctly identified test images with predicted labels and probabilities","6ed69e0b":"check out the data in the 'PetImages' folder","b6ae5828":"The following is happening in the code below:\n* we first create a function called cat_or_dog() which takes an image array as an input, utilizes the model to make predictions, and returns a dictionary with each class name as the key and its respective probability as the value (e.g. {Dog: 0.6, Cat: 0.4})\u00a0\n* Set up the input upload: transform the input image to match the input shape which the model takes in, which is (100, 100) in our case. We also set the source to \"upload\" so that we may upload our own images into Gradio\n* Compile the interface; utilize the cat_or_dog() function that we created above, set input as the input uploader,  and allow Gradio to return the class and their probabilities as the output","84caefb6":"## Create a model demo using Gradio","b2c57377":"## Explore and organize the data\n"}}