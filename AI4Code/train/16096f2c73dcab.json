{"cell_type":{"1cefee78":"code","6789500d":"code","6d427486":"code","acdf2511":"code","f2995acf":"code","f512c5ae":"code","5914a6b5":"code","0be363aa":"code","5aaa0658":"code","f82650d5":"code","a24698ce":"code","75fbf171":"code","d425b85b":"code","bebe8fa6":"code","3784538f":"code","31c6ee34":"code","ee20f8e0":"code","12312201":"code","ce044a88":"code","ec20fa4a":"code","6314778e":"code","bed71e2e":"code","9e7b5728":"code","218bf415":"code","28917657":"code","43883ca3":"code","8f862760":"code","42f67066":"markdown","2eb4f162":"markdown","e9dd5bc6":"markdown","aa623802":"markdown","7789c8fe":"markdown","10246acb":"markdown","be6152ea":"markdown","29252768":"markdown","4e607208":"markdown","03d87a1c":"markdown","abbaeb60":"markdown","98fa69d9":"markdown","f7743967":"markdown","c2569827":"markdown","881aefd1":"markdown","254e0177":"markdown","79d4d870":"markdown"},"source":{"1cefee78":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","6789500d":"df = pd.read_csv(\"\/kaggle\/input\/bitcoin-stock-rates-20092020\/BTC-INR.csv\")\ndf","6d427486":"df.columns= df.columns.str.lower()\ndf.describe()","acdf2511":"df.info()","f2995acf":"df[\"date_year\"] = pd.DatetimeIndex(df[\"date\"]).year\ndf[\"date_month\"] = pd.DatetimeIndex(df[\"date\"]).month","f512c5ae":"df.info()","5914a6b5":"df.isnull().sum()","0be363aa":"df = df.dropna()","5aaa0658":"import seaborn as sns\nimport matplotlib.pyplot as plt","f82650d5":"df_2015 = df[df[\"date_year\"]==2015]\ndf_2016 = df[df[\"date_year\"]==2016]\ndf_2017 = df[df[\"date_year\"]==2017]\ndf_2018 = df[df[\"date_year\"]==2018]\ndf_2019 = df[df[\"date_year\"]==2019]","a24698ce":"df_2015","75fbf171":"fig = plt.figure(figsize=(16,9), dpi= 80)\nax1 = fig.add_subplot()\n# some data\nfor i in range(2015, 2020):\n    x = eval(f\"df_{i}.index\")\n    y = eval(f\"df_{i}['close']\")\n    ax1.plot(x, y)","d425b85b":"plt.figure(figsize=(16,9), dpi= 80)\nsns.set_color_codes()\nsns.distplot(df_2015['close'],color = 'slateblue')\nplt.show()","bebe8fa6":"sns.set_style(\"white\")\n\nx1 = df.loc[df.date_year==2015, 'close']\nx2 = df.loc[df.date_year==2016, 'close']\n\n# Plot\nkwargs = dict(hist_kws={'alpha':.6}, kde_kws={'linewidth':2})\n\nplt.figure(figsize=(16,9), dpi= 80)\nsns.distplot(x1, label=2015, **kwargs)\nsns.distplot(x2, label=\"2016\", **kwargs)\nplt.legend()","3784538f":"sns.set_style(\"white\")\nplt.figure(figsize=(16,9), dpi= 80)\nfor i in range(2015, 2017):\n    x = eval(f\"df.loc[df.date_year=={i}, 'close']\")\n    # Plot\n    kwargs = dict(hist_kws={'alpha':.6}, kde_kws={'linewidth':2})\n    sns.distplot(x, label=i, **kwargs)\n    plt.legend()","31c6ee34":"# instanciate the figure\nfig = plt.figure(figsize = (10, 8))\n\n# ----------------------------------------------------------------------------------------------------\n# plot the data\n# the idea is to iterate over each class\n# extract their data ad plot a sepate density plot\nfor i in range(2017, 2020):\n    # extract the data\n    x = eval(f\"df.loc[df.date_year=={i}, 'close']\")\n    # plot the data using seaborn\n    sns.kdeplot(x, shade=True, label = \"{} year\".format(i))\n\n# set the title of the plot\nplt.title(\"Density Plot of City Mileage by n_cilinders\")","ee20f8e0":"# Scatter and density plots\ndef plotScatterMatrix(df, plotSize, textSize):\n    df = df.select_dtypes(include =[np.number]) # keep only numerical columns\n    # Remove rows and columns that would lead to df being singular\n    df = df.dropna('columns')\n    df = df[[col for col in df if df[col].nunique() > 1]] # keep columns where there are more than 1 unique values\n    columnNames = list(df)\n    if len(columnNames) > 10: # reduce the number of columns for matrix inversion of kernel density plots\n        columnNames = columnNames[:10]\n    df = df[columnNames]\n    ax = pd.plotting.scatter_matrix(df, alpha=0.75, figsize=[plotSize, plotSize], diagonal='kde')\n    corrs = df.corr().values\n    for i, j in zip(*plt.np.triu_indices_from(ax, k = 1)):\n        ax[i, j].annotate('Corr. coef = %.3f' % corrs[i, j], (0.8, 0.2), xycoords='axes fraction', ha='center', va='center', size=textSize)\n    plt.suptitle('Scatter and Density Plot')\n    plt.show()","12312201":"plotScatterMatrix(df_2015, 15, 10)","ce044a88":"plotScatterMatrix(df_2016, 15, 10)","ec20fa4a":"plotScatterMatrix(df_2017, 15, 10)","6314778e":"plotScatterMatrix(df_2018, 15, 10)","bed71e2e":"plotScatterMatrix(df_2019, 15, 10)","9e7b5728":"pip install pandas-profiling","218bf415":"from pandas_profiling import ProfileReport","28917657":"profile = ProfileReport(df, title=\"Profiling Report: bitcoin-stock-rates\")\nprofile.to_file(output_file='profile.html')","43883ca3":"!pip install art\nimport art","8f862760":"art.tprint(\"DONE.\")","42f67066":"### Plot the close cost for Bitcoin for all available years.","2eb4f162":"Creating year-wise dataframes except 2020 because not having the data for all months in 2020.","e9dd5bc6":"Getting info for dataset","aa623802":"### Import libraries for generating graphs.","7789c8fe":"### Let's check the file: \/kaggle\/input\/bitcoin-stock-rates-20092020\/BTC-INR.csv","10246acb":"Let's add the Year and Month columns for analysis different Year and Months.","be6152ea":"Drop the NULL rows.","29252768":"1. Install it with this command:","4e607208":"## Exploratory Analysis\nTo begin this exploratory analysis, first import libraries and define functions for plotting the data using `matplotlib`. Depending on the data, not all plots will be made.","03d87a1c":"# Introduction\nThis is generated kernel with starter code demonstrating how to read in the data and begin exploring. If you're inspired to dig deeper, click the blue \"Fork Notebook\" button at the top of this kernel to begin editing.","abbaeb60":"Lower the column names for easy typing and fast.","98fa69d9":"# Pandas Profiling for Dataset","f7743967":"Generate profile of your data using ProfileReport. And save it to .html file.","c2569827":"Check the null values.","881aefd1":"### Generate Profile","254e0177":"### Scatter and density plots:","79d4d870":"## import pandas_profiling"}}