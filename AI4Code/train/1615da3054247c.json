{"cell_type":{"14243720":"code","d10316e7":"code","a826e5d2":"code","3f567d5b":"code","5abc654e":"code","d167c38c":"code","3a2c8ad2":"code","f0c15c55":"code","40cafb8a":"code","68dd1330":"code","39308d38":"code","e4d88638":"code","8d7c2a60":"code","ef12ce65":"code","e4b81071":"code","dfd05c1f":"code","2c7f10e5":"code","b856ce12":"code","47b00132":"code","dc8c0123":"code","090fde2d":"code","d51ee351":"code","b3872da0":"code","ca590ee3":"markdown","8b0862e3":"markdown","5157b59b":"markdown","9950972d":"markdown","282ef6fb":"markdown","2a9682e8":"markdown","54b3afea":"markdown","d37ece2f":"markdown","800f8d41":"markdown","f30a1239":"markdown","82ff4510":"markdown","0b0199ed":"markdown","b900072e":"markdown","fa0dfd89":"markdown"},"source":{"14243720":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","d10316e7":"import seaborn as sns\nimport matplotlib.pyplot as plt\nimport scipy\nfrom sklearn.metrics import mean_squared_error\n\nsns.set()","a826e5d2":"daily_climate_train_df = pd.read_csv(\"\/kaggle\/input\/daily-climate-time-series-data\/DailyDelhiClimateTrain.csv\", parse_dates=[\"date\"]) \ndaily_climate_test_df = pd.read_csv(\"\/kaggle\/input\/daily-climate-time-series-data\/DailyDelhiClimateTest.csv\", parse_dates=[\"date\"]) \n\ndaily_climate_train_df.shape, daily_climate_test_df.shape","3f567d5b":"daily_climate_train_df.date.min(), daily_climate_train_df.date.max()","5abc654e":"daily_climate_test_df.date.min(), daily_climate_test_df.date.max()","d167c38c":"daily_climate_train_df.sort_values(\"date\", inplace=True)","3a2c8ad2":"daily_climate_train_df.count()","f0c15c55":"def custom_train_test_split(data, size=1200):\n    explain_columns = [\"date\", \"humidity\", \"wind_speed\", \"meanpressure\"]   \n    y_column = \"meantemp\"\n\n    X_train = data[explain_columns].iloc[:size]\n    X_test = data[explain_columns].iloc[size:]\n    y_train = data[y_column].iloc[:size]\n    y_test = data[y_column].iloc[size:]\n    \n    return X_train, X_test, y_train, y_test","40cafb8a":"X_train, X_test, y_train, y_test = custom_train_test_split(daily_climate_train_df)","68dd1330":"_ = plt.figure(figsize=(19, 8))\n\n_ = plt.subplot(131)\n_ = plt.hist(X_train[\"humidity\"], bins=30, density=True)\n_ = plt.xlabel(\"Humidity\")\n\n_ = plt.subplot(132)\n_ = plt.hist(X_train[\"wind_speed\"], bins=30, density=True)\n_ = plt.xlabel(\"Wind speed\")\n\n\n_ = plt.subplot(133)\n_ = plt.hist(X_train[\"meanpressure\"], density=True)\n_ = plt.xlabel(\"Mean pressure\")\n\nplt.show()","39308d38":"_ = plt.figure(figsize=(16, 4))\nsns.lineplot(x=\"date\", y=\"meanpressure\", data=X_train)\nplt.show()","e4d88638":"X_train[X_train[\"date\"] < \"2016-01-01\"][\"meanpressure\"].max() - X_train[X_train[\"date\"] < \"2016-01-01\"][\"meanpressure\"].min()","8d7c2a60":"scipy.stats.pearsonr(X_train[\"meanpressure\"], y_train)","ef12ce65":"_ = plt.scatter(X_train[\"meanpressure\"], y_train)\n_ = plt.xlabel(\"meanpressure\")\n_ = plt.ylabel(\"Mean temp\")\n\nplt.show()","e4b81071":"def custom_train_test_split_v2(data, size=1200):\n    explain_columns = [\"date\", \"humidity\", \"wind_speed\"]   \n    y_column = \"meantemp\"\n\n    X_train = data[explain_columns].iloc[:size]\n    X_test = data[explain_columns].iloc[size:]\n    y_train = data[y_column].iloc[:size]\n    y_test = data[y_column].iloc[size:]\n    \n    y_test.index = np.arange(len(y_test))\n    y_train.index = np.arange(len(y_train))\n    \n    return X_train, X_test, y_train, y_test","dfd05c1f":"X_train, X_test, y_train, y_test = custom_train_test_split_v2(daily_climate_train_df)","2c7f10e5":"_ = plt.figure(figsize=(18, 9))\n\n_ = plt.plot(X_train[\"date\"], X_train[\"humidity\"], label=\"Humidity\")\n_ = plt.plot(X_train[\"date\"], X_train[\"wind_speed\"], label=\"Wind speed\")\n_ = plt.plot(X_train[\"date\"], y_train, label=\"Mean temp\")\n\n# the vertical lines show a new year start\n_ = plt.axvline(x=\"2013-01-01\", c=\"r\", linewidth=3.0)\n_ = plt.axvline(x=\"2014-01-01\", c=\"r\", linewidth=3.0)\n_ = plt.axvline(x=\"2015-01-01\", c=\"r\", linewidth=3.0)\n_ = plt.axvline(x=\"2016-01-01\", c=\"r\", linewidth=3.0)\n\n_ = plt.legend()\n\nplt.show()","b856ce12":"def get_mean_temp_for_n_days (data, days=7):\n    mean_temp_last_n_days = np.empty(len(data))\n\n    for i in range(len(data)):\n        if i < days: \n            mean_temp_last_n_days[i] = 0\n        else:\n            mean_temp_last_n_days[i] = data[i - days: i].mean()\n\n    return mean_temp_last_n_days","47b00132":"_ = plt.figure(figsize=(18, 9))\n\n#_ = plt.plot(X_train[\"date\"], X_train[\"humidity\"], label=\"Humidity\")\n_ = plt.plot(X_train[\"date\"], get_mean_temp_for_n_days(y_train, days=7) + 10, label=\"Last 7 days\")\n_ = plt.plot(X_train[\"date\"], get_mean_temp_for_n_days(y_train, days=2) + 5, label=\"Last 2 days\")\n_ = plt.plot(X_train[\"date\"], y_train, label=\"Mean temp\")\n\n# the vertical lines show a new year start\n_ = plt.axvline(x=\"2013-01-01\", c=\"r\", linewidth=3.0)\n_ = plt.axvline(x=\"2014-01-01\", c=\"r\", linewidth=3.0)\n_ = plt.axvline(x=\"2015-01-01\", c=\"r\", linewidth=3.0)\n_ = plt.axvline(x=\"2016-01-01\", c=\"r\", linewidth=3.0)\n\n_ = plt.legend()\n\nplt.show()","dc8c0123":"# start with 100 days\nn = 100\nerrors = np.empty(n)\n\nfor i in range(n):\n    y_pred = get_mean_temp_for_n_days(y_train, days = i + 2)\n    errors[i] = mean_squared_error(y_train, y_pred)\n    \n_ = plt.plot(np.arange(n) + 2, errors)\n_ = plt.xlabel(\"Days on mean\")\n_ = plt.ylabel(\"Error\")\n\nplt.show()","090fde2d":"# start with 100 days\nn = 100\nerrors = np.empty(n)\n\nfor i in range(n):\n    y_pred = get_mean_temp_for_n_days(y_train, days = i + 2)\n    errors[i] = mean_squared_error(y_train[i + 2: ], y_pred[i + 2: ])\n    \n_ = plt.plot(np.arange(n) + 2, errors)\n_ = plt.xlabel(\"Days on mean\")\n_ = plt.ylabel(\"Error\")\n\nplt.show()","d51ee351":"_ = plt.figure(figsize=(20, 9))\n\nx = daily_climate_train_df[\"date\"]\ny_real = daily_climate_train_df[\"meantemp\"]\ny_pred = get_mean_temp_for_n_days(y_real, days=2)\n\nmean_error = np.quantile(np.abs(y_pred - y_real), 0.95)\n\nprint(\"Expected error: \", mean_error)\n\n_ = plt.plot(x, y_real, label=\"True\")\n_ = plt.plot(x, y_pred, label=\"Pred\")\n_ = plt.fill_between(x, y1=y_pred + mean_error, y2=y_pred - mean_error, color=\"orange\", alpha=0.2)\n\n_ = plt.xlabel(\"Date\")\n_ = plt.ylabel(\"mean temperature\")\n\n_ = plt.legend()\n\nplt.show()","b3872da0":"_ = plt.figure(figsize=(20, 9))\n\nx = daily_climate_train_df[\"date\"][:400]\ny_real = daily_climate_train_df[\"meantemp\"][:400]\ny_pred = get_mean_temp_for_n_days(y_real, days=2)\n\nmean_error = np.quantile(np.abs(y_pred - y_real), 0.95)\n\nprint(\"Expected error: \", mean_error)\n\n_ = plt.plot(x, y_real, label=\"True\")\n_ = plt.plot(x, y_pred, label=\"Pred\")\n_ = plt.fill_between(x, y1=y_pred + mean_error, y2=y_pred - mean_error, color=\"orange\", alpha=0.2)\n\n_ = plt.xlabel(\"Date\")\n_ = plt.ylabel(\"mean temperature\")\n\n_ = plt.legend()\n\nplt.show()","ca590ee3":"That chart show that 95% of the time we are in the prediction +- 3.6\u00b0, we can think if its a good interval, for exemple, a person can fell a diference between 20\u00b0 and 23.6\u00b0? or 16.4\u00b0 and 20\u00b0? Maybe! If is not enough, we can think in a better model. But for, this study, is good enough, in a later notebook we can improve.\n\nSo, for a conclusion, i don't use any variable in the dataset to model this problem, i just use the previous tempetures. Very simple model.\n\nFor a better visualization of the last chart, lets plot a small interval","8b0862e3":"Still show that the best model is the mean of the previous 2 days. So lets predict. As in real word, at the current day, we have the temperatures of the previous days, implies that we can use this model","5157b59b":"Here we see that the mean from the last n day is a good aproximation for the time series. But what is the best n? For this problem, n could be think as a hyperparameter. So lets plot chat with n and the mean squared error to see if we could find an optimal n","9950972d":"From the above plots, i will consider mean pressure a variable that not explain mean temperature in this dataset.","282ef6fb":"See date range from datasets","2a9682e8":"Loading libs","54b3afea":"A exploratory data analysis","d37ece2f":"Zeros could influence the results","800f8d41":"From the plot, we can see an outlier between 2016-01 and 2016-05, but for the rest of the data, the mean preassure is like constant.","f30a1239":"At first eye, we see clearly that humidity and wind speed distributions are differents. And mean pressure is almost constants, lets verify this fact","82ff4510":"Will order train dataset for split in test and train later","0b0199ed":"We can see that the shape of mean temperature repeat over the year, that is expected beacues of the year's seasons. Also, the humidity has a correlation with temperature (i see that by eye, we can calculate this with a pearson coeficient for example), but i think that isn't enough information to predict the mean temp. For now, lets calculate the mean temperature for the last 7 and 30 days, and see what we get","b900072e":"Getting datasets","fa0dfd89":"As we can see, no missing values, that is great news! rs\n\nAt this time, just simple split, arbitrary, the first 1200 rows as trains and the remaining for test."}}