{"cell_type":{"e25902e5":"code","2d667530":"code","1d62ea4b":"code","4f4fa848":"code","0d23a4f7":"code","a34feaa5":"code","7d36bcb8":"code","160986c6":"code","28a4cc47":"code","567c3439":"code","48dbd89c":"code","aa4bc44a":"code","a8a1d52f":"code","19c17284":"code","3ae62059":"code","d5e6d600":"code","70d71183":"code","24dc91f2":"code","8ae732f2":"code","67a34fd1":"code","082ce622":"code","208f96f7":"code","d322b532":"code","420cc4dc":"code","16364682":"code","bf136e7d":"code","74747c3c":"code","c89f86a5":"code","6fd217f7":"code","17b40335":"code","9c8c1bab":"code","e0328352":"code","bc646e8d":"code","c7531a2f":"code","6a5f5c6f":"code","aa1ae1c9":"code","13904e94":"code","76f0c6da":"code","37dc69da":"code","b0b65309":"code","b0e77e49":"code","c1f5fe87":"code","460d9128":"markdown","b692e3d0":"markdown","43bdf921":"markdown","8048583a":"markdown","78596d63":"markdown","f06c3dd8":"markdown","6454ff30":"markdown","d8ebc56e":"markdown"},"source":{"e25902e5":"import tensorflow as tf\nfrom tensorflow.keras.models import Sequential\nfrom tensorflow.keras.layers import Conv2D, MaxPooling2D, Flatten, Dense\nfrom tensorflow.keras.preprocessing.image import ImageDataGenerator\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport numpy as np\nimport cv2","2d667530":"!pip install google-colab\nfrom google.colab.patches import cv2_imshow","1d62ea4b":"path = '..\/input\/animal-5-mammal\/animal\/train'","4f4fa848":"tf.keras.preprocessing.image.load_img('..\/input\/animal-5-mammal\/Animal\/train\/cat\/pixabay_cat_001849.jpg')","0d23a4f7":"tf.keras.preprocessing.image.load_img('..\/input\/animal-5-mammal\/Animal\/train\/dog\/flickr_dog_000324.jpg')","a34feaa5":"tf.keras.preprocessing.image.load_img('..\/input\/animal-5-mammal\/Animal\/train\/ELEPHANT\/_6cccad68-09ca-11ea-a248-2cd23afa2126.jpg')","7d36bcb8":"tf.keras.preprocessing.image.load_img('..\/input\/animal-5-mammal\/Animal\/train\/HORSE\/Horse-2.jpg')","160986c6":"tf.keras.preprocessing.image.load_img('..\/input\/animal-5-mammal\/Animal\/train\/LION\/lion2.jpg')","28a4cc47":"training_generator = ImageDataGenerator(rescale=1.\/255,\n                                        rotation_range=7,\n                                        horizontal_flip=True,\n                                        zoom_range=0.2)\ntraining_dataset = training_generator.flow_from_directory('..\/input\/animal-5-mammal\/Animal\/train',\n                                                        target_size = (64, 64),\n                                                        batch_size = 32,\n                                                        class_mode = 'categorical',\n                                                        shuffle = True)","567c3439":"training_dataset.classes","48dbd89c":"training_dataset.class_indices","aa4bc44a":"test_generator = ImageDataGenerator(rescale=1.\/255)\ntest_dataset = test_generator.flow_from_directory('..\/input\/animal-5-mammal\/Animal\/val',\n                                                     target_size = (64, 64),\n                                                     batch_size = 1,\n                                                     class_mode = 'categorical',\n                                                     shuffle = False)","a8a1d52f":"network = Sequential()\nnetwork.add(Conv2D(32, (3,3), input_shape = (64,64,3), activation='relu'))\nnetwork.add(MaxPooling2D(pool_size=(2,2)))\n\nnetwork.add(Conv2D(32, (3,3), activation='relu'))\nnetwork.add(MaxPooling2D(pool_size=(2,2)))\n\nnetwork.add(Flatten())\n\nnetwork.add(Dense(units = 6272, activation='relu'))\nnetwork.add(Dense(units = 6272, activation='relu'))\nnetwork.add(Dense(units = 5, activation='softmax'))","19c17284":"network.summary()","3ae62059":"network.compile(optimizer='Adam', loss='categorical_crossentropy', metrics = ['accuracy'])","d5e6d600":"from keras.utils.vis_utils import plot_model\nplot_model(network, to_file='model_plot.png', show_shapes=True, show_layer_names=True)","70d71183":"history = network.fit(training_dataset, epochs=27)","24dc91f2":"plt.plot(history.history['loss'])\nplt.xlabel(\"Epochs\")\nplt.ylabel(\"Loss\")\nplt.show()","8ae732f2":"plt.plot(history.history['accuracy'])\nplt.xlabel(\"Epochs\")\nplt.ylabel(\"Accuracy\")\nplt.show()","67a34fd1":"test_dataset.class_indices","082ce622":"forecasts = network.predict(test_dataset)\nforecasts","208f96f7":"forecasts = np.argmax(forecasts, axis = 1)\nforecasts","d322b532":"test_dataset.classes","420cc4dc":"from sklearn.metrics import accuracy_score\naccuracy_score(test_dataset.classes, forecasts)","16364682":"test_dataset.class_indices","bf136e7d":"from sklearn.metrics import confusion_matrix\ncm = confusion_matrix(test_dataset.classes, forecasts)\ncm","74747c3c":"sns.heatmap(cm, annot=True);","c89f86a5":"from sklearn.metrics import classification_report\nprint(classification_report(test_dataset.classes, forecasts))","6fd217f7":"# serialize network to JSON\nnetwork_json = network.to_json()\nwith open(\"network.json\", \"w\") as json_file:\n    json_file.write(network_json)\n","17b40335":"# serialize weights to HDF5\nnetwork.save_weights(\"network.h5\")\nprint(\"Saved network to disk\")","9c8c1bab":"# load json and create network\nfrom keras.models import model_from_json\njson_file = open('network.json', 'r')\nloaded_network_json = json_file.read()\njson_file.close()\nloaded_network = model_from_json(loaded_network_json)\nloaded_network\n","e0328352":"# load weights into new network\nloaded_network.load_weights(\"network.h5\")\nprint(\"Loaded network from disk\")\n\n \n","bc646e8d":"image = cv2.imread('..\/input\/animal-5-mammal\/Animal\/val\/dog\/pixabay_dog_000646.jpg')","c7531a2f":"cv2_imshow(image)","6a5f5c6f":"image = cv2.resize(image, (64, 64))\ncv2_imshow(image)","aa1ae1c9":"image = image \/ 255\nimage","13904e94":"image.shape","76f0c6da":"image = image.reshape(-1, 64, 64, 3)\nimage.shape","37dc69da":"result = network(image)\nresult","b0b65309":"result = np.argmax(result)\nresult","b0e77e49":"test_dataset.class_indices","c1f5fe87":"if result == 0:\n    print('ELEPHANT')\nelse:\n    if result == 1:\n        print('HORSE')\n    else:\n        if result == 2:\n            print(\"LION\")\n        else:\n            if result == 3:\n                print(\"CAT\")\n            else:\n                if result == 4:\n                    print(\"DOG\")\n                else:\n                    print(\"Other\")","460d9128":"# **Import from libraries**","b692e3d0":"# **If you find this notebook useful, support with an upvote** \ud83d\udc4d\u00b6\u00b6","43bdf921":"# **Uploading the images**","8048583a":"# Saving Network as JSON","78596d63":"# **Single image classification**","f06c3dd8":"# **Training and Testing Basis**","6454ff30":"# **Construction and training of the neural network**","d8ebc56e":"# **Neural network evaluation**"}}