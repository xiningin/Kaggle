{"cell_type":{"854de748":"code","b04328aa":"code","58e3d72b":"code","f3a95228":"code","a1de9df6":"code","73a356ab":"code","5139cad3":"code","a722fb6f":"code","879a20ed":"code","c86443d0":"code","04e6e145":"code","2bdfa962":"code","ddc56196":"code","3818c934":"code","076a2c21":"code","03c87979":"code","f8b5ce12":"code","c296d086":"code","e2916243":"code","c4d10a9d":"code","775af10b":"code","785d65a1":"code","512687f2":"code","c8bb5058":"code","1565dd96":"code","8352e2d3":"code","11349378":"code","1909612d":"code","a4c53e75":"code","88e08961":"markdown","a1d1715e":"markdown","9ad07342":"markdown","804e6bca":"markdown","50ca5724":"markdown","f37fb699":"markdown","9df427f7":"markdown","74077ab2":"markdown","fcc65faa":"markdown","c2032043":"markdown"},"source":{"854de748":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","b04328aa":"gender_sub=pd.read_csv('\/kaggle\/input\/titanic\/gender_submission.csv')\n# gender_sub.drop('PassengerId',axis=1,inplace=True)\ngender_sub.head()","58e3d72b":"test_data=pd.read_csv('\/kaggle\/input\/titanic\/test.csv')\ntest_data.describe()","f3a95228":"tr_data=pd.read_csv('\/kaggle\/input\/titanic\/train.csv')","a1de9df6":"tr_data.groupby(['Survived']).mean()\ntr_data.head()","73a356ab":"tr_data['Age'].fillna(tr_data['Age'].mean(),inplace=True)\ntest_data['Age'].fillna(test_data['Age'].mean(),inplace=True)\n# tr_data['Age'].mean()\ntr_data['Embarked']=tr_data['Embarked'].fillna('S')\ntr_data.isnull().sum()\n# tr_data.head()","5139cad3":"# tr_data.columns.unique()\ntr_data.drop(['PassengerId','Name','Ticket'],axis=1,inplace=True)\ntest_data.drop(['PassengerId','Name','Ticket'],axis=1,inplace=True)\ntest_data.head()","a722fb6f":"tr_data['Sex']=tr_data['Sex'].map({'male':0,'female':1})\ntest_data['Sex']=test_data['Sex'].map({'male':0,'female':1})","879a20ed":"tr_data['Cabin_indexed']=np.where(tr_data['Cabin'].isnull(),0,1)\ntest_data['Cabin_indexed']=np.where(test_data['Cabin'].isnull(),0,1)","c86443d0":"tr_data.drop(['Cabin'],axis=1,inplace=True)\ntest_data.drop(['Cabin'],axis=1,inplace=True)","04e6e145":"tr_data.groupby('Survived').mean()","2bdfa962":"from sklearn.preprocessing import OneHotEncoder\n\n# Get list of categorical variables\ns = (tr_data.dtypes == 'object')\nobject_cols = list(s[s].index)\n# object_cols\nOH_Enc=OneHotEncoder(handle_unknown='ignore',sparse=False)\n\nOH_enc_tr=pd.DataFrame(OH_Enc.fit_transform(tr_data[object_cols]))\nOH_enc_test=pd.DataFrame(OH_Enc.fit_transform(test_data[object_cols]))\n\nOH_enc_tr.index=tr_data.index\nOH_enc_test.index=test_data.index\n\nOH_num_tr=tr_data.drop(object_cols,axis=1)\nOH_num_test=test_data.drop(object_cols,axis=1)\n\nOH_X_tr=pd.concat([OH_num_tr,OH_enc_tr],axis=1)\nOH_X_test=pd.concat([OH_num_test,OH_enc_test],axis=1)\n# OH_X_tr\n# OH_X_test\n\n# from sklearn.preprocessing import LabelEncoder\n# label_encoder = LabelEncoder()\n# label_X_train = label_encoder.fit_transform(tr_data['Embarked'])","ddc56196":"OH_X_test.head()","3818c934":"import matplotlib.pyplot as plt\n%matplotlib inline\nimport seaborn as sns\nfor i, col in enumerate(['Pclass','Sex','SibSp','Parch','Embarked','Cabin_indexed']):\n    plt.figure(i)\n    sns.catplot(x=col,y='Survived',data=tr_data,kind='point',aspect=2)","076a2c21":"tr_data['Family_mem']=tr_data['SibSp']+tr_data['Parch']\ntr_data.drop(['SibSp','Parch'],axis=1,inplace=True)","03c87979":"test_data['Family_mem']=test_data['SibSp']+test_data['Parch']\ntest_data.drop(['SibSp','Parch'],axis=1,inplace=True)","f8b5ce12":"test_data.head()","c296d086":"for i, col in enumerate(['Pclass','Sex','Embarked','Cabin_indexed','Family_mem']):\n    plt.figure(i)\n    sns.catplot(x=col,y='Survived',data=tr_data,kind='point',aspect=2)","e2916243":"tr_data.pivot_table('Survived',index='Sex',columns='Embarked',aggfunc='count')","c4d10a9d":"OH_X_tr.to_csv('tr_X_data_cl.csv',index=False)\nOH_X_test.to_csv('test_X_data_cl.csv',index=False)\n\ntr_X_data_cl=pd.read_csv('tr_X_data_cl.csv')\ntest_X_data_cl=pd.read_csv('test_X_data_cl.csv')","775af10b":"tr_x_data=tr_X_data_cl.drop(['Survived'],axis=1)\ntr_y_data=tr_X_data_cl['Survived']\n\ntest_x_data=test_X_data_cl\ntest_x_data['Fare']=test_x_data.fillna(method='bfill',axis=0)\ntest_x_data.isnull().sum()","785d65a1":"# tr_y_data","512687f2":"from sklearn.ensemble import RandomForestRegressor","c8bb5058":"rf=RandomForestRegressor(n_estimators=100, random_state=0)\nrf.fit(tr_x_data,tr_y_data)\npred_y=rf.predict(test_x_data)","1565dd96":"gender_sub.drop(['PassengerId'],axis=1,inplace=True)\ngender_sub.head()","8352e2d3":"pred_y=pd.DataFrame(pred_y,columns=['Pred_Survived'])\npred_y.loc[pred_y['Pred_Survived'] > 0.5,'Pred_Survived'] = 1\npred_y.loc[pred_y['Pred_Survived'] < 0.5,'Pred_Survived'] = 0\n# if pred_y['Pred_Survived'].any()<=0.5:\n#     pred_y['Pred_Survived'].set_values==0\n# elif pred_y['Pred_Survived'].values.any()>0.5:\n#     pred_y['Pred_Survived'].values=1\npred_y.head()","11349378":"from sklearn.metrics import mean_absolute_error\ngender_sub=gender_sub\nscore=mean_absolute_error(pred_y,gender_sub)\nscore","1909612d":"pred_y['Gender_sub']=gender_sub","a4c53e75":"pred_y.sum()","88e08961":"# RandomForest Modeling of data","a1d1715e":"# Adding two features","9ad07342":"The data is already splitted train(60%) test(20%)","804e6bca":"# Handling categorical features - sex & cabin","50ca5724":"# Data Exploration & cleaning\nContinuous features are Pclass, Age, Fare\\\nIn the training data, there are missing values in age column. ","f37fb699":"# Dropping irrelevant features","9df427f7":"# Seperating train and target data","74077ab2":"Column names are C=0, Q=1, S=2.","fcc65faa":"Tried to use One Hot Encoder for Pclass & Embarked but it didn't work.","c2032043":"# Plotting to get insight"}}