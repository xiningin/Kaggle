{"cell_type":{"9ff9c04a":"code","150f890d":"code","c7a6608f":"code","e6a93156":"code","42c08b2f":"code","3d8385ee":"code","fde05242":"code","a5b0456d":"code","2b90e648":"code","a58c58bc":"code","1a81ab59":"code","06d51ac4":"code","c29b8f15":"code","8119fb35":"code","18952a43":"code","2f3759e5":"code","65459b1a":"code","8b51116c":"code","161d9915":"code","594539ee":"code","2319fbf7":"code","8224d2b9":"code","a9e09eeb":"code","b75be4b3":"code","f450fa32":"code","f9d8a1e6":"code","be340b8c":"code","6276d035":"code","18cf0d47":"code","42d4ac02":"code","7809c21a":"code","801e9610":"code","7b95b8bc":"code","10207949":"code","a70d91da":"code","e8712663":"code","635ddd79":"code","243ff8ee":"code","466b9d2b":"markdown","80021cd4":"markdown","dfa4d4f9":"markdown","06b0f8e5":"markdown","eb97d91d":"markdown","497f709d":"markdown","03c70a6c":"markdown","cc6a1da8":"markdown","53b59210":"markdown","09bd2734":"markdown","a8a88187":"markdown","f6173902":"markdown","6857144f":"markdown","85587c5a":"markdown","9e0cb475":"markdown","9fca6304":"markdown","54ccb681":"markdown","2fd0997b":"markdown","6668ff83":"markdown","ab5abdcd":"markdown","4ba973e1":"markdown","a8c0c428":"markdown","c6a8f747":"markdown","5fedf42f":"markdown","d42ca39e":"markdown"},"source":{"9ff9c04a":"from functools import reduce\nimport gmpy2\nimport numpy as np\nimport multiprocessing as mp\nfrom scipy.special import comb\nimport calendar\nfrom itertools import combinations_with_replacement\nimport itertools","150f890d":"%%time\ns=0\nfor x in range(1000):\n    if x % 3 == 0 or x % 5 ==0:\n        s += x\ns","c7a6608f":"%%time\nsum(x for x in range(1000) if x % 3 == 0 or x % 5 == 0)","e6a93156":"%%time\ndef fibGenerator(n):\n    a, b = 1, 1\n    while b <= n:\n        a, b = b, a + b\n        yield a\n\n\ndef solution(n):\n    return sum(i for i in fibGenerator(n) if not i % 2)\n\n\nsolution(4000000)","42c08b2f":"%%time\ndef isPrime(n):\n    for k in range(int(n ** 0.5), 1, -1):\n        if n % k == 0:\n            return False\n    return True\n\n\ndef solution(n):\n    for k in range(int(n ** 0.5)+1, 1, -2):\n        if n % k == 0 and isPrime(k):\n            return k\n\n\nsolution(600851475143)","3d8385ee":"%%time\ndef isPrime(n):\n    for k in range(int(n ** 0.5), 1, -1):\n        if n % k == 0:\n            return False\n    return True\n\n\ndef solution(n):\n    m=0\n    for k in range(3,int(n ** 0.5),2):\n        if n % k == 0 and isPrime(k):\n            m=k\n    return m\n\n\nsolution(600851475143)","fde05242":"%%time\ndef isPalindromic(n):\n    return list(str(n)) == list(reversed(list(str(n))))\n\n\npalList = []\nfor k in range(999, 99, -1):\n    for i in range(k, 99, -1):\n        if isPalindromic(k * i):\n            palList.append(k * i)\nmax(palList)\n","a5b0456d":"%%time\ndef test(n):\n    for k in range(11, 21):\n        if n % k != 0:\n            return False\n    return True\n\ndef solution():\n    n = 2520\n    while True:\n        if test(n):\n            return n\n        n += 2520\n\nsolution()","2b90e648":"%%time\ns1, s2 = 0, 0\nfor k in range(1, 101):\n    s1 += k ** 2\n    s2 += k\ns2 ** 2 - s1","a58c58bc":"%%time\nreduce(lambda x, y: x + y, range(1, 101)) ** 2 - reduce(lambda x, y: x + y ** 2, range(1, 101))","1a81ab59":"%%time\ndef isPrime(n):\n    for k in range(int(n ** 0.5), 1, -1):\n        if n % k == 0:\n            return False\n    return True\n\n\ndef nPrime(x):\n    count = 0\n    n = 2\n    while True:\n        if isPrime(n):\n            count += 1\n            if count == x:\n                return n\n        n += 1\n\n\nnPrime(10001)","06d51ac4":"%%time\ndef nPrime(x):\n    count = 0\n    n = 2\n    while True:\n        if gmpy2.is_prime(n):\n            count += 1\n            if count == x:\n                return n\n        n += 1\n\n\nnPrime(10001)","c29b8f15":"%%time\n\ndef nPrimeGen(n):\n    i=1\n    p = 2\n    while i<=n:\n        yield p\n        p = gmpy2.next_prime(p)\n        i += 1\n\nfor p in nPrimeGen(10001):\n    pass\n\nint(p)","8119fb35":"%%time\nbigN = \"\"\"73167176531330624919225119674426574742355349194934\\\n96983520312774506326239578318016984801869478851843\\\n85861560789112949495459501737958331952853208805511\\\n12540698747158523863050715693290963295227443043557\\\n66896648950445244523161731856403098711121722383113\\\n62229893423380308135336276614282806444486645238749\\\n30358907296290491560440772390713810515859307960866\\\n70172427121883998797908792274921901699720888093776\\\n65727333001053367881220235421809751254540594752243\\\n52584907711670556013604839586446706324415722155397\\\n53697817977846174064955149290862569321978468622482\\\n83972241375657056057490261407972968652414535100474\\\n82166370484403199890008895243450658541227588666881\\\n16427171479924442928230863465674813919123162824586\\\n17866458359124566529476545682848912883142607690042\\\n24219022671055626321111109370544217506941658960408\\\n07198403850962455444362981230987879927244284909188\\\n84580156166097919133875499200524063689912560717606\\\n05886116467109405077541002256983155200055935729725\\\n71636269561882670428252483600823257530420752963450\\\n\"\"\"\ntheMax = 0\np = theMax\nfor k in range(1, 1000 - 12):\n    p = reduce(lambda x, y: x * y, map(int, bigN[0 + k:13 + k]))\n    if p > theMax:\n        theMax = p\ntheMax","18952a43":"%%time\ndef solution():\n    for a in range(1, 1000):\n        for b in range(1, 1000 - a):\n            c = 1000 - a - b\n            l = sorted([a, b, c])\n            if l[0] ** 2 + l[1] ** 2 == l[2] ** 2:\n                return a * b * c\n\n\nsolution()\n","2f3759e5":"%%time\nsum(x for x in range(2000000) if gmpy2.is_prime(x))","65459b1a":"%%time\ndef primeGen(n):\n    p = 2\n    while p<n:\n        yield p\n        p = gmpy2.next_prime(p)\n\n\nint(sum(primeGen(2000000)))","8b51116c":"%%time\ndef eratosthenes(n):\n    isPrime = np.ones(n, dtype=np.bool_)\n    isPrime[0] = isPrime[1] = 0\n    for i in np.arange(2, int(n ** 0.5) + 1):\n        if isPrime[i]:\n            isPrime[i * i:n:i] = 0\n    return sum(x for x in range(n) if isPrime[x])\n\neratosthenes(2000000)","161d9915":"%%time\ngrid = \"\"\"\n08 02 22 97 38 15 00 40 00 75 04 05 07 78 52 12 50 77 91 08\n49 49 99 40 17 81 18 57 60 87 17 40 98 43 69 48 04 56 62 00\n81 49 31 73 55 79 14 29 93 71 40 67 53 88 30 03 49 13 36 65\n52 70 95 23 04 60 11 42 69 24 68 56 01 32 56 71 37 02 36 91\n22 31 16 71 51 67 63 89 41 92 36 54 22 40 40 28 66 33 13 80\n24 47 32 60 99 03 45 02 44 75 33 53 78 36 84 20 35 17 12 50\n32 98 81 28 64 23 67 10 26 38 40 67 59 54 70 66 18 38 64 70\n67 26 20 68 02 62 12 20 95 63 94 39 63 08 40 91 66 49 94 21\n24 55 58 05 66 73 99 26 97 17 78 78 96 83 14 88 34 89 63 72\n21 36 23 09 75 00 76 44 20 45 35 14 00 61 33 97 34 31 33 95\n78 17 53 28 22 75 31 67 15 94 03 80 04 62 16 14 09 53 56 92\n16 39 05 42 96 35 31 47 55 58 88 24 00 17 54 24 36 29 85 57\n86 56 00 48 35 71 89 07 05 44 44 37 44 60 21 58 51 54 17 58\n19 80 81 68 05 94 47 69 28 73 92 13 86 52 17 77 04 89 55 40\n04 52 08 83 97 35 99 16 07 97 57 32 16 26 26 79 33 27 98 66\n88 36 68 87 57 62 20 72 03 46 33 67 46 55 12 32 63 93 53 69\n04 42 16 73 38 25 39 11 24 94 72 18 08 46 29 32 40 62 76 36\n20 69 36 41 72 30 23 88 34 62 99 69 82 67 59 85 74 04 36 16\n20 73 35 29 78 31 90 01 74 31 49 71 48 86 81 16 23 57 05 54\n01 70 54 71 83 51 54 69 16 92 33 48 61 43 52 01 89 19 67 48\"\"\"\n\nmatrix = list(map(int, grid.split()))\n\np = 1\ntheMax = p\nfor k in range(400):\n    if k % 20 <= 16:\n        p = matrix[k] * matrix[k + 1] * matrix[k + 2] * matrix[k + 3]\n        if p > theMax:\n            theMax = p\n        if k \/\/ 20 <= 16:\n            p = matrix[k] * matrix[k + 21] * matrix[k + 42] * matrix[k + 63]\n            if p > theMax:\n                theMax = p\n    if k \/\/ 20 <= 16:\n        p = matrix[k] * matrix[k + 20] * matrix[k + 40] * matrix[k + 60]\n        if p > theMax:\n            theMax = p\n        if k % 20 >= 3:\n            p = matrix[k] * matrix[k + 19] * matrix[k + 38] * matrix[k + 57]\n            if p > theMax:\n                theMax = p\ntheMax","594539ee":"%%time\ndef triangleGen():\n    i = 1\n    while True:\n        yield sum(range(i))\n        i += 1\n        \ndef divisors(n):\n    c = 0\n    for k in range(1, int(n ** 0.5) + 1):\n        if n % k == 0:\n            c += 1\n    return 2 * c\n\n\ndef solution(n):\n    for k in triangleGen():\n        if divisors(k) > n:\n            return k\n\nsolution(500)","2319fbf7":"%%time\ndef triangleGen():\n    x,y = 1,0\n    while True:\n        x,y = x+1,x + y\n        yield y\n\n\ndef divisors(n):\n    c = 0\n    for k in range(1, int(n ** 0.5) + 1):\n        if n % k == 0:\n            c += 1\n    return 2 * c\n\n\n\ndef solution(n):\n    for k in triangleGen():\n        if divisors(k) > n:\n            return k\n\nsolution(500)","8224d2b9":"%%time\nnums = \"\"\"\n37107287533902102798797998220837590246510135740250\n46376937677490009712648124896970078050417018260538\n74324986199524741059474233309513058123726617309629\n91942213363574161572522430563301811072406154908250\n23067588207539346171171980310421047513778063246676\n89261670696623633820136378418383684178734361726757\n28112879812849979408065481931592621691275889832738\n44274228917432520321923589422876796487670272189318\n47451445736001306439091167216856844588711603153276\n70386486105843025439939619828917593665686757934951\n62176457141856560629502157223196586755079324193331\n64906352462741904929101432445813822663347944758178\n92575867718337217661963751590579239728245598838407\n58203565325359399008402633568948830189458628227828\n80181199384826282014278194139940567587151170094390\n35398664372827112653829987240784473053190104293586\n86515506006295864861532075273371959191420517255829\n71693888707715466499115593487603532921714970056938\n54370070576826684624621495650076471787294438377604\n53282654108756828443191190634694037855217779295145\n36123272525000296071075082563815656710885258350721\n45876576172410976447339110607218265236877223636045\n17423706905851860660448207621209813287860733969412\n81142660418086830619328460811191061556940512689692\n51934325451728388641918047049293215058642563049483\n62467221648435076201727918039944693004732956340691\n15732444386908125794514089057706229429197107928209\n55037687525678773091862540744969844508330393682126\n18336384825330154686196124348767681297534375946515\n80386287592878490201521685554828717201219257766954\n78182833757993103614740356856449095527097864797581\n16726320100436897842553539920931837441497806860984\n48403098129077791799088218795327364475675590848030\n87086987551392711854517078544161852424320693150332\n59959406895756536782107074926966537676326235447210\n69793950679652694742597709739166693763042633987085\n41052684708299085211399427365734116182760315001271\n65378607361501080857009149939512557028198746004375\n35829035317434717326932123578154982629742552737307\n94953759765105305946966067683156574377167401875275\n88902802571733229619176668713819931811048770190271\n25267680276078003013678680992525463401061632866526\n36270218540497705585629946580636237993140746255962\n24074486908231174977792365466257246923322810917141\n91430288197103288597806669760892938638285025333403\n34413065578016127815921815005561868836468420090470\n23053081172816430487623791969842487255036638784583\n11487696932154902810424020138335124462181441773470\n63783299490636259666498587618221225225512486764533\n67720186971698544312419572409913959008952310058822\n95548255300263520781532296796249481641953868218774\n76085327132285723110424803456124867697064507995236\n37774242535411291684276865538926205024910326572967\n23701913275725675285653248258265463092207058596522\n29798860272258331913126375147341994889534765745501\n18495701454879288984856827726077713721403798879715\n38298203783031473527721580348144513491373226651381\n34829543829199918180278916522431027392251122869539\n40957953066405232632538044100059654939159879593635\n29746152185502371307642255121183693803580388584903\n41698116222072977186158236678424689157993532961922\n62467957194401269043877107275048102390895523597457\n23189706772547915061505504953922979530901129967519\n86188088225875314529584099251203829009407770775672\n11306739708304724483816533873502340845647058077308\n82959174767140363198008187129011875491310547126581\n97623331044818386269515456334926366572897563400500\n42846280183517070527831839425882145521227251250327\n55121603546981200581762165212827652751691296897789\n32238195734329339946437501907836945765883352399886\n75506164965184775180738168837861091527357929701337\n62177842752192623401942399639168044983993173312731\n32924185707147349566916674687634660915035914677504\n99518671430235219628894890102423325116913619626622\n73267460800591547471830798392868535206946944540724\n76841822524674417161514036427982273348055556214818\n97142617910342598647204516893989422179826088076852\n87783646182799346313767754307809363333018982642090\n10848802521674670883215120185883543223812876952786\n71329612474782464538636993009049310363619763878039\n62184073572399794223406235393808339651327408011116\n66627891981488087797941876876144230030984490851411\n60661826293682836764744779239180335110989069790714\n85786944089552990653640447425576083659976645795096\n66024396409905389607120198219976047599490197230297\n64913982680032973156037120041377903785566085089252\n16730939319872750275468906903707539413042652315011\n94809377245048795150954100921645863754710598436791\n78639167021187492431995700641917969777599028300699\n15368713711936614952811305876380278410754449733078\n40789923115535562561142322423255033685442488917353\n44889911501440648020369068063960672322193204149535\n41503128880339536053299340368006977710650566631954\n81234880673210146739058568557934581403627822703280\n82616570773948327592232845941706525094512325230608\n22918802058777319719839450180888072429661980811197\n77158542502016545090413245809786882778948721859617\n72107838435069186155435662884062257473692284509516\n20849603980134001723930671666823555245252804609722\n53503534226472524250874054075591789781264330331690\"\"\"\n\nint(str(sum(map(int, nums.split())))[:10])","a9e09eeb":"%%time\nansDict = {}\ndef collatzLen(n):\n    if n not in ansDict:\n        if n == 1:\n            ansDict[n] = 1\n        elif not n % 2:\n            ansDict[n] = collatzLen(n \/ 2)[0] + 1\n        else:\n            ansDict[n] = collatzLen(n * 3 + 1)[0] + 1\n    return ansDict[n], n\nmax(collatzLen(n) for n in range(1,1000000))[1]\n","b75be4b3":"%%time\ncomb(40, 20, exact=True)","f450fa32":"%%time\nsum(map(int, str(2 ** 1000)))","f9d8a1e6":"%%time\nsum(map(int, str(1 << 1000)))","be340b8c":"\"\"\"\n!pip install num2words\nfrom num2words import num2words\n\n\ndef num2letters(n):\n    return num2words(n).replace(' ', '').replace('-', '')\n\n\ns = 0\nfor k in range(1, 1001):\n    s += len(num2letters(k))\nprint(s)\n\"\"\"","6276d035":"%%time\ndata = \"\"\"75\n95 64\n17 47 82\n18 35 87 10\n20 04 82 47 65\n19 01 23 75 03 34\n88 02 77 73 07 63 67\n99 65 04 28 06 16 70 92\n41 41 26 56 83 40 80 70 33\n41 48 72 33 47 32 37 16 94 29\n53 71 44 65 25 43 91 52 97 51 14\n70 11 33 28 77 73 17 78 39 68 17 57\n91 71 52 38 17 14 91 43 58 50 27 29 48\n63 66 04 68 89 53 67 30 73 16 69 87 40 31\n04 62 98 27 23 09 70 98 73 93 38 53 60 04 23\"\"\"\n\nl = []\nfor k in data.split('\\n'):\n    l.append(list(map(int, k.split())))\n\nfor x in range(len(l) - 2, -1, -1):\n    for k in range(len(l[x])):\n        l[x][k] = max(l[x][k] + l[x + 1][k], l[x][k] + l[x + 1][k + 1])\n\nl[0][0]\n","18cf0d47":"%%time\ndef solution():\n    c = 0\n    for year in range(1901, 2001):\n        for month in range(1, 13):\n            if calendar.monthrange(year, month)[0] == 6:\n                c += 1\n    return c\n\nsolution()","42d4ac02":"%%time\nsum(map(int, str(np.math.factorial(100))))","7809c21a":"%%time\ndef sumDivs(n):\n    s = 0\n    for k in range(2, 1 + int(n ** 0.5)):\n        if n % k == 0:\n            s += (k + (n \/\/ k))\n    s += 1\n    return s\n\n\ndef sumAmis(starter, upperLimit, num_cores):\n    s = 0\n    for n in range(starter + 1, upperLimit, num_cores):\n        t = sumDivs(n)\n        if n == sumDivs(t) and n != t:\n            s += n\n    return s\n\n\ndef solution():\n    upperLimit = 10000\n    num_cores = int(mp.cpu_count())\n    print(f\"Parallel computing on {num_cores} CPU cores\")\n    pool = mp.Pool(num_cores)\n\n    results = [pool.apply_async(sumAmis, args=(starter, upperLimit, num_cores)) for starter in\n               range(num_cores)]\n\n    return sum(result.get() for result in results)\n\nsolution()","801e9610":"# download names\nimport requests\nnames = requests.get('https:\/\/projecteuler.net\/project\/resources\/p022_names.txt').text","7b95b8bc":"%%time\nnames = [x[1:-1] for x in names.split(\",\")]\nnames.sort()\nfor n in range(len(names)):\n    names[n] = sum(ord(letter) - 64 for letter in list(names[n])) * (n + 1)\nsum(names)","10207949":"%%time\ndef isAbundant(n):\n    divs = []\n    divsR = [1]\n    for k in range(2, 1 + int(n ** 0.5)):\n        if n % k == 0:\n            divs.append(k)\n    for k in divs:\n        divsR.append(int(n \/ k))\n    return sum(list(set(divsR + divs))) > n\n\nl = [x for x in range(1, 28123) if isAbundant(x)]\n\ns = list(set([i + j for i in l for j in l]))\n\nprint(sum(x for x in range(1, 28123) if x not in s))","a70d91da":"%%time\ndef isAbundant(n):\n    return sum(set(reduce(list.__add__, ([i, n\/\/i] for i in range(1, int(n**0.5) + 1) if n % i == 0)))) > 2 * n\n\nabundantList = (n for n in range(1, 28123) if isAbundant(n))\ntwoAbundantsSum = set(x + y for x, y in combinations_with_replacement(abundantList, 2))\nsum(x for x in range(28123) if x not in twoAbundantsSum)","e8712663":"%%time\nint(\"\".join(map(str, list(itertools.permutations(range(10), 10))[999999])))","635ddd79":"%%time\ndef fib(n):\n    if n == 0:\n        return 0\n    if n == 1:\n        return 1\n    k = (n + 1) \/ 2 if n % 2 else n \/ 2\n    fib_k = fib(k)\n    fib_k_1 = fib(k - 1)\n    return fib_k**2 + fib_k_1**2 if n % 2 else (2 * fib_k_1 + fib_k) * fib_k\n\ndef solution(n):\n    i,l = 1,0\n    while l<n:\n        i+=1\n        f=fib(i)\n        l=len(str(f))\n    return i\n\nsolution(1000)","243ff8ee":"%%time\ndef fibGenerator(n):\n    a, b = 1, 1\n    l, c = 0, 1\n    while l < n:\n        a, b = b, a + b\n        l=len(str(a))\n        c+=1\n        yield a, c\n        \nfor i in fibGenerator(1000):\n    pass\ni[1]","466b9d2b":"# [24]Lexicographic permutations\nA permutation is an ordered arrangement of objects. For example, 3124 is one possible permutation of the digits 1, 2, 3 and 4. If all of the permutations are listed numerically or alphabetically, we call it lexicographic order. The lexicographic permutations of 0, 1 and 2 are:\n```\n012   021   102   120   201   210\n```\nWhat is the millionth lexicographic permutation of the digits 0, 1, 2, 3, 4, 5, 6, 7, 8 and 9?","80021cd4":"# [5]Smallest multiple\n2520 is the smallest number that can be divided by each of the numbers from 1 to 10 without any remainder.\n\nWhat is the smallest positive number that is evenly divisible by all of the numbers from 1 to 20?","dfa4d4f9":"# [21]Amicable numbers\nLet d(n) be defined as the sum of proper divisors of n (numbers less than n which divide evenly into n).\nIf d(a) = b and d(b) = a, where a \u2260 b, then a and b are an amicable pair and each of a and b are called amicable numbers.\n\nFor example, the proper divisors of 220 are 1, 2, 4, 5, 10, 11, 20, 22, 44, 55 and 110; therefore d(220) = 284. The proper divisors of 284 are 1, 2, 4, 71 and 142; so d(284) = 220.\n\nEvaluate the sum of all the amicable numbers under 10000.","06b0f8e5":"# [20]Factorial digit sum\nn! means n \u00d7 (n \u2212 1) \u00d7 ... \u00d7 3 \u00d7 2 \u00d7 1\n\nFor example, 10! = 10 \u00d7 9 \u00d7 ... \u00d7 3 \u00d7 2 \u00d7 1 = 3628800,\nand the sum of the digits in the number 10! is 3 + 6 + 2 + 8 + 8 + 0 + 0 = 27.\n\nFind the sum of the digits in the number 100!","eb97d91d":"# [15]Lattice paths\nStarting in the top left corner of a 2\u00d72 grid, and only being able to move to the right and down, there are exactly 6 routes to the bottom right corner.\n\n![](https:\/\/projecteuler.net\/project\/images\/p015.png)\n\nHow many such routes are there through a 20\u00d720 grid?","497f709d":"# [19]Counting Sundays\nYou are given the following information, but you may prefer to do some research for yourself.\n\n* 1 Jan 1900 was a Monday.\n* Thirty days has September,\n* April, June and November.\n* All the rest have thirty-one,\n* Saving February alone,\n* Which has twenty-eight, rain or shine.\n* And on leap years, twenty-nine.\n\nA leap year occurs on any year evenly divisible by 4, but not on a century unless it is divisible by 400.\nHow many Sundays fell on the first of the month during the twentieth century (1 Jan 1901 to 31 Dec 2000)?","03c70a6c":"# [1]Multiples of 3 and 5\nIf we list all the natural numbers below 10 that are multiples of 3 or 5, we get 3, 5, 6 and 9. The sum of these multiples is 23.\n\nFind the sum of all the multiples of 3 or 5 below 1000.\n","cc6a1da8":"# [13]Large sum\nWork out the first ten digits of the sum of the following one-hundred 50-digit numbers.\n```\n37107287533902102798797998220837590246510135740250\n46376937677490009712648124896970078050417018260538\n74324986199524741059474233309513058123726617309629\n91942213363574161572522430563301811072406154908250\n23067588207539346171171980310421047513778063246676\n89261670696623633820136378418383684178734361726757\n28112879812849979408065481931592621691275889832738\n44274228917432520321923589422876796487670272189318\n47451445736001306439091167216856844588711603153276\n70386486105843025439939619828917593665686757934951\n62176457141856560629502157223196586755079324193331\n64906352462741904929101432445813822663347944758178\n92575867718337217661963751590579239728245598838407\n58203565325359399008402633568948830189458628227828\n80181199384826282014278194139940567587151170094390\n35398664372827112653829987240784473053190104293586\n86515506006295864861532075273371959191420517255829\n71693888707715466499115593487603532921714970056938\n54370070576826684624621495650076471787294438377604\n53282654108756828443191190634694037855217779295145\n36123272525000296071075082563815656710885258350721\n45876576172410976447339110607218265236877223636045\n17423706905851860660448207621209813287860733969412\n81142660418086830619328460811191061556940512689692\n51934325451728388641918047049293215058642563049483\n62467221648435076201727918039944693004732956340691\n15732444386908125794514089057706229429197107928209\n55037687525678773091862540744969844508330393682126\n18336384825330154686196124348767681297534375946515\n80386287592878490201521685554828717201219257766954\n78182833757993103614740356856449095527097864797581\n16726320100436897842553539920931837441497806860984\n48403098129077791799088218795327364475675590848030\n87086987551392711854517078544161852424320693150332\n59959406895756536782107074926966537676326235447210\n69793950679652694742597709739166693763042633987085\n41052684708299085211399427365734116182760315001271\n65378607361501080857009149939512557028198746004375\n35829035317434717326932123578154982629742552737307\n94953759765105305946966067683156574377167401875275\n88902802571733229619176668713819931811048770190271\n25267680276078003013678680992525463401061632866526\n36270218540497705585629946580636237993140746255962\n24074486908231174977792365466257246923322810917141\n91430288197103288597806669760892938638285025333403\n34413065578016127815921815005561868836468420090470\n23053081172816430487623791969842487255036638784583\n11487696932154902810424020138335124462181441773470\n63783299490636259666498587618221225225512486764533\n67720186971698544312419572409913959008952310058822\n95548255300263520781532296796249481641953868218774\n76085327132285723110424803456124867697064507995236\n37774242535411291684276865538926205024910326572967\n23701913275725675285653248258265463092207058596522\n29798860272258331913126375147341994889534765745501\n18495701454879288984856827726077713721403798879715\n38298203783031473527721580348144513491373226651381\n34829543829199918180278916522431027392251122869539\n40957953066405232632538044100059654939159879593635\n29746152185502371307642255121183693803580388584903\n41698116222072977186158236678424689157993532961922\n62467957194401269043877107275048102390895523597457\n23189706772547915061505504953922979530901129967519\n86188088225875314529584099251203829009407770775672\n11306739708304724483816533873502340845647058077308\n82959174767140363198008187129011875491310547126581\n97623331044818386269515456334926366572897563400500\n42846280183517070527831839425882145521227251250327\n55121603546981200581762165212827652751691296897789\n32238195734329339946437501907836945765883352399886\n75506164965184775180738168837861091527357929701337\n62177842752192623401942399639168044983993173312731\n32924185707147349566916674687634660915035914677504\n99518671430235219628894890102423325116913619626622\n73267460800591547471830798392868535206946944540724\n76841822524674417161514036427982273348055556214818\n97142617910342598647204516893989422179826088076852\n87783646182799346313767754307809363333018982642090\n10848802521674670883215120185883543223812876952786\n71329612474782464538636993009049310363619763878039\n62184073572399794223406235393808339651327408011116\n66627891981488087797941876876144230030984490851411\n60661826293682836764744779239180335110989069790714\n85786944089552990653640447425576083659976645795096\n66024396409905389607120198219976047599490197230297\n64913982680032973156037120041377903785566085089252\n16730939319872750275468906903707539413042652315011\n94809377245048795150954100921645863754710598436791\n78639167021187492431995700641917969777599028300699\n15368713711936614952811305876380278410754449733078\n40789923115535562561142322423255033685442488917353\n44889911501440648020369068063960672322193204149535\n41503128880339536053299340368006977710650566631954\n81234880673210146739058568557934581403627822703280\n82616570773948327592232845941706525094512325230608\n22918802058777319719839450180888072429661980811197\n77158542502016545090413245809786882778948721859617\n72107838435069186155435662884062257473692284509516\n20849603980134001723930671666823555245252804609722\n53503534226472524250874054075591789781264330331690\n```","53b59210":"# [2]Even Fibonacci numbers\n\nEach new term in the Fibonacci sequence is generated by adding the previous two terms. By starting with 1 and 2, the first 10 terms will be:\n\n1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...\n\nBy considering the terms in the Fibonacci sequence whose values do not exceed four million, find the sum of the even-valued terms.","09bd2734":"# [7]10001st prime\nBy listing the first six prime numbers: 2, 3, 5, 7, 11, and 13, we can see that the 6th prime is 13.\n\nWhat is the 10 001st prime number?","a8a88187":"# [16]Power digit sum\n$2^{15} = 32768$ and the sum of its digits is $3 + 2 + 7 + 6 + 8 = 26$.\n\nWhat is the sum of the digits of the number $2^{1000}$?","f6173902":"# [22]Names scores\nUsing [names.txt](https:\/\/projecteuler.net\/project\/resources\/p022_names.txt) (right click and 'Save Link\/Target As...'), a 46K text file containing over five-thousand first names, begin by sorting it into alphabetical order. Then working out the alphabetical value for each name, multiply this value by its alphabetical position in the list to obtain a name score.\n\nFor example, when the list is sorted into alphabetical order, COLIN, which is worth 3 + 15 + 12 + 9 + 14 = 53, is the 938th name in the list. So, COLIN would obtain a score of 938 \u00d7 53 = 49714.\n\nWhat is the total of all the name scores in the file?","6857144f":"# [14]Longest Collatz sequence\nThe following iterative sequence is defined for the set of positive integers:\n\n$$\n\\left\\{\n\t\\begin{array}{lr}\n\t\tn \u2192\\dfrac{n}{2},&(n\\ is\\ even)\\\\\n\t\tn \u2192 3n + 1,&(n\\ is\\ odd)\n\t\\end{array}\n\\right.\n$$\n\n\nUsing the rule above and starting with 13, we generate the following sequence:\n\n$$13 \u2192 40 \u2192 20 \u2192 10 \u2192 5 \u2192 16 \u2192 8 \u2192 4 \u2192 2 \u2192 1$$\n\n\nIt can be seen that this sequence (starting at 13 and finishing at 1) contains 10 terms. Although it has not been proved yet (Collatz Problem), it is thought that all starting numbers finish at 1.\n\nWhich starting number, under one million, produces the longest chain?\n\n**NOTE**: Once the chain starts the terms are allowed to go above one million.","85587c5a":"# [11]Largest product in a grid\nIn the 20\u00d720 grid below, four numbers along a diagonal line have been marked in red.\n```\n08 02 22 97 38 15 00 40 00 75 04 05 07 78 52 12 50 77 91 08\n49 49 99 40 17 81 18 57 60 87 17 40 98 43 69 48 04 56 62 00\n81 49 31 73 55 79 14 29 93 71 40 67 53 88 30 03 49 13 36 65\n52 70 95 23 04 60 11 42 69 24 68 56 01 32 56 71 37 02 36 91\n22 31 16 71 51 67 63 89 41 92 36 54 22 40 40 28 66 33 13 80\n24 47 32 60 99 03 45 02 44 75 33 53 78 36 84 20 35 17 12 50\n32 98 81 28 64 23 67 10 26 38 40 67 59 54 70 66 18 38 64 70\n67 26 20 68 02 62 12 20 95 63 94 39 63 08 40 91 66 49 94 21\n24 55 58 05 66 73 99 26 97 17 78 78 96 83 14 88 34 89 63 72\n21 36 23 09 75 00 76 44 20 45 35 14 00 61 33 97 34 31 33 95\n78 17 53 28 22 75 31 67 15 94 03 80 04 62 16 14 09 53 56 92\n16 39 05 42 96 35 31 47 55 58 88 24 00 17 54 24 36 29 85 57\n86 56 00 48 35 71 89 07 05 44 44 37 44 60 21 58 51 54 17 58\n19 80 81 68 05 94 47 69 28 73 92 13 86 52 17 77 04 89 55 40\n04 52 08 83 97 35 99 16 07 97 57 32 16 26 26 79 33 27 98 66\n88 36 68 87 57 62 20 72 03 46 33 67 46 55 12 32 63 93 53 69\n04 42 16 73 38 25 39 11 24 94 72 18 08 46 29 32 40 62 76 36\n20 69 36 41 72 30 23 88 34 62 99 69 82 67 59 85 74 04 36 16\n20 73 35 29 78 31 90 01 74 31 49 71 48 86 81 16 23 57 05 54\n01 70 54 71 83 51 54 69 16 92 33 48 61 43 52 01 89 19 67 48\n```\nThe product of these numbers is 26 \u00d7 63 \u00d7 78 \u00d7 14 = 1788696.\n\nWhat is the greatest product of four adjacent numbers in the same direction (up, down, left, right, or diagonally) in the 20\u00d720 grid?","9e0cb475":"# [12]Highly divisible triangular number\nThe sequence of triangle numbers is generated by adding the natural numbers. So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. The first ten terms would be:\n\n$$1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...$$\n\nLet us list the factors of the first seven triangle numbers:\n```\n 1: 1\n 3: 1,3\n 6: 1,2,3,6\n10: 1,2,5,10\n15: 1,3,5,15\n21: 1,3,7,21\n28: 1,2,4,7,14,28\n```\nWe can see that 28 is the first triangle number to have over five divisors.\n\nWhat is the value of the first triangle number to have over five hundred divisors?","9fca6304":"# [25]1000-digit Fibonacci number\nThe Fibonacci sequence is defined by the recurrence relation:\n\n$$F_n = F_{n\u22121} + F_{n\u22122}$$\n$$F_1 = 1, F_2 = 1$$\n\nHence the first 12 terms will be:\n```\nF1 = 1\nF2 = 1\nF3 = 2\nF4 = 3\nF5 = 5\nF6 = 8\nF7 = 13\nF8 = 21\nF9 = 34\nF10 = 55\nF11 = 89\nF12 = 144\n```\n\nThe 12th term, F12, is the first term to contain three digits.\n\nWhat is the index of the first term in the Fibonacci sequence to contain 1000 digits?","54ccb681":"# [23]Non-abundant sums\nA perfect number is a number for which the sum of its proper divisors is exactly equal to the number. For example, the sum of the proper divisors of 28 would be 1 + 2 + 4 + 7 + 14 = 28, which means that 28 is a perfect number.\n\nA number n is called deficient if the sum of its proper divisors is less than n and it is called abundant if this sum exceeds n.\n\nAs 12 is the smallest abundant number, 1 + 2 + 3 + 4 + 6 = 16, the smallest number that can be written as the sum of two abundant numbers is 24. By mathematical analysis, it can be shown that all integers greater than 28123 can be written as the sum of two abundant numbers. However, this upper limit cannot be reduced any further by analysis even though it is known that the greatest number that cannot be expressed as the sum of two abundant numbers is less than this limit.\n\nFind the sum of all the positive integers which cannot be written as the sum of two abundant numbers.","2fd0997b":"# [8]Largest product in a series\nThe four adjacent digits in the 1000-digit number that have the greatest product are 9 \u00d7 9 \u00d7 8 \u00d7 9 = 5832.\n\n```\n73167176531330624919225119674426574742355349194934\n96983520312774506326239578318016984801869478851843\n85861560789112949495459501737958331952853208805511\n12540698747158523863050715693290963295227443043557\n66896648950445244523161731856403098711121722383113\n62229893423380308135336276614282806444486645238749\n30358907296290491560440772390713810515859307960866\n70172427121883998797908792274921901699720888093776\n65727333001053367881220235421809751254540594752243\n52584907711670556013604839586446706324415722155397\n53697817977846174064955149290862569321978468622482\n83972241375657056057490261407972968652414535100474\n82166370484403199890008895243450658541227588666881\n16427171479924442928230863465674813919123162824586\n17866458359124566529476545682848912883142607690042\n24219022671055626321111109370544217506941658960408\n07198403850962455444362981230987879927244284909188\n84580156166097919133875499200524063689912560717606\n05886116467109405077541002256983155200055935729725\n71636269561882670428252483600823257530420752963450\n```\n\nFind the thirteen adjacent digits in the 1000-digit number that have the greatest product. What is the value of this product?","6668ff83":"# [6]Sum square difference\nThe sum of the squares of the first ten natural numbers is,\n\n$$1^2+2^2+...+10^2=385$$\n\nThe square of the sum of the first ten natural numbers is,\n\n$$(1+2+...+10)^2=55^2=3025$$\nHence the difference between the sum of the squares of the first ten natural numbers and the square of the sum is 3025\u2212385=2640.\n\nFind the difference between the sum of the squares of the first one hundred natural numbers and the square of the sum.","ab5abdcd":"# [3]Largest prime factor\nThe prime factors of 13195 are 5, 7, 13 and 29.\n\nWhat is the largest prime factor of the number 600851475143 ?","4ba973e1":"# [10]Summation of primes\nThe sum of the primes below 10 is 2 + 3 + 5 + 7 = 17.\n\nFind the sum of all the primes below two million.","a8c0c428":"# [9]Special Pythagorean triplet\nA Pythagorean triplet is a set of three natural numbers, a < b < c, for which,\n\n$$a^2 + b^2 = c^2$$\nFor example, $3^2 + 4^2 = 9 + 16 = 25 = 5^2$.\n\nThere exists exactly one Pythagorean triplet for which a + b + c = 1000.\nFind the product abc.","c6a8f747":"# [17]Number letter counts\nIf the numbers 1 to 5 are written out in words: one, two, three, four, five, then there are $3 + 3 + 5 + 4 + 4 = 19$ letters used in total.\n\nIf all the numbers from 1 to 1000 (one thousand) inclusive were written out in words, how many letters would be used?\n\n\n**NOTE**: Do not count spaces or hyphens. For example, 342 (three hundred and forty-two) contains 23 letters and 115 (one hundred and fifteen) contains 20 letters. The use of \"and\" when writing out numbers is in compliance with British usage.","5fedf42f":"# [18]Maximum path sum I\nBy starting at the top of the triangle below and moving to adjacent numbers on the row below, the maximum total from top to bottom is 23.\n```\n3\n7 4\n2 4 6\n8 5 9 3\n```\nThat is, 3 + 7 + 4 + 9 = 23.\n\nFind the maximum total from top to bottom of the triangle below:\n```\n75\n95 64\n17 47 82\n18 35 87 10\n20 04 82 47 65\n19 01 23 75 03 34\n88 02 77 73 07 63 67\n99 65 04 28 06 16 70 92\n41 41 26 56 83 40 80 70 33\n41 48 72 33 47 32 37 16 94 29\n53 71 44 65 25 43 91 52 97 51 14\n70 11 33 28 77 73 17 78 39 68 17 57\n91 71 52 38 17 14 91 43 58 50 27 29 48\n63 66 04 68 89 53 67 30 73 16 69 87 40 31\n04 62 98 27 23 09 70 98 73 93 38 53 60 04 23\n```\nNOTE: As there are only 16384 routes, it is possible to solve this problem by trying every route. However, Problem 67, is the same challenge with a triangle containing one-hundred rows; it cannot be solved by brute force, and requires a clever method! ;o)\n\n","d42ca39e":"# [4]Largest palindrome product\nA palindromic number reads the same both ways. The largest palindrome made from the product of two 2-digit numbers is 9009 = 91 \u00d7 99.\n\nFind the largest palindrome made from the product of two 3-digit numbers."}}