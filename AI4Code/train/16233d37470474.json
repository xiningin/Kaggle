{"cell_type":{"362c814f":"code","f1235f55":"code","9d315931":"code","dff82271":"code","0d061afa":"code","f02a5894":"code","ec0936e9":"code","3568372b":"markdown","daa7942f":"markdown","8a1449e0":"markdown","f16af1fc":"markdown","0423452e":"markdown","9d3445db":"markdown"},"source":{"362c814f":"import numpy as np\nimport tensorflow as tf\ntf.compat.v1.disable_eager_execution()\nprint(tf.version.VERSION)","f1235f55":"# AND input data\ndata_input_x = np.array([[0.0, 0.0], \n                         [0.0, 1.0],\n                         [1.0, 0.0],\n                         [1.0, 1.0]])\ndata_input_x","9d315931":"# Output data\ndata_y = np.array([[0.0], [0.0], [0.0], [1.0]])\ndata_y","dff82271":"def step_function(sum_value):\n    return tf.cast(tf.cast(tf.math.greater_equal(sum_value, 1),tf.float64), tf.float64)","0d061afa":"\n# Weights are initialized with zero\nweights = tf.Variable(tf.zeros([2,1], dtype = tf.float64))\n\n# define our outputlayer calculation\noutput_layer = tf.matmul(data_input_x, weights)\n\n# transform the output layer values \npredictions = step_function(output_layer)\n\n# define score function \nerror = tf.subtract(data_y, predictions)\n\n# define delta function \ndelta = tf.matmul(data_input_x, error, transpose_a = True)\nlearningRate = 0.1\ntrain = tf.compat.v1.assign(weights, tf.add(weights, tf.multiply(delta, learningRate)))\n\n# Create the initializer function TensorFlow Variables used during the processing\ntf.compat.v1.disable_eager_execution()\ninit = tf.compat.v1.global_variables_initializer()","f02a5894":"data_test_x = np.array([[1.0, 0.0],\n                         [1.0, 1.0]])","ec0936e9":"with tf.compat.v1.Session() as s:\n    s.run(init)\n    print('Output layer result: \\n', s.run(output_layer))\n    print('Prediction result: \\n', s.run(predictions))\n    print('Error result: \\n', s.run(error))\n    print('\\n')\n    for epoch in range(15):\n        train_error, _ = s.run([error, train])\n        train_error_sum = tf.reduce_sum(train_error)\n        print('Epoch: ', epoch+1, ' - Error: ', s.run(train_error_sum))\n        if train_error_sum.eval() == 0.0:\n            break; # learned and got 100% accuracy\n    print('\\nWeights to the best accuracy: \\n', s.run(weights))\n\n\n    output_layer1 = tf.matmul(data_test_x, weights)\n    predictions1 = step_function(output_layer1)\n    print('Output layer result1: \\n', s.run(output_layer1))\n    print('Prediction result1: \\n', s.run(predictions1))\n\n\n\n    ","3568372b":"### Execution","daa7942f":"## Import libraries","8a1449e0":"## Step Activation Function\n\n It returns 0 or 1.\n\n![Step Function Representation](https:\/\/i.imgur.com\/ZnPKsi9.png) \n","f16af1fc":"## TensorFlow implementation\n\n","0423452e":"# Neural Network with TensorFlow - 1st \n\n## Introduction\n\n### Single-layer perceptron using Step Function to Activation.\n\n\n![Single-Layer-Perceptron](https:\/\/i.imgur.com\/UKVKxoy.jpeg)\n","9d3445db":"## Creating the data"}}