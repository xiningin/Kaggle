{"cell_type":{"1370b14d":"code","66c1fa53":"code","eb5fd603":"code","870784a1":"code","af4f0483":"code","97ddd739":"code","0231b4aa":"code","990b6092":"code","14a20cbb":"code","9ba3049f":"code","31bd0e6d":"code","d5434986":"code","a51e4e78":"code","fa94f5e0":"code","d796f8a4":"code","f5d3b3b1":"code","071648ad":"code","509a3272":"code","6867135e":"code","2862db41":"code","7ae00f64":"code","b8e7a350":"code","3be38437":"code","c0b1a0fb":"markdown","89df5a55":"markdown","c161cfab":"markdown","6cd663ee":"markdown","72e86a3d":"markdown","c76118c5":"markdown","e95b9894":"markdown","8782d563":"markdown","07f21494":"markdown","e8528e35":"markdown","cb451ed7":"markdown","7bb397d0":"markdown","26f7d0f4":"markdown","454246bb":"markdown","413765e2":"markdown","39e41354":"markdown","b252f9fd":"markdown","423e1616":"markdown","5494db63":"markdown","f66e96dd":"markdown","ec788fd6":"markdown","32f4ede6":"markdown","ea682731":"markdown","1371acb0":"markdown","0aabfa35":"markdown","13bd4770":"markdown","4286541c":"markdown","86341f91":"markdown","61bc0359":"markdown","672a8e73":"markdown","e8f5dee8":"markdown","715ab6e4":"markdown","990b5e39":"markdown","09a4cf6a":"markdown","031bebd5":"markdown","dcc4b33a":"markdown"},"source":{"1370b14d":"import numpy as np\nimport pandas as pd \nimport matplotlib.pyplot as plt\n\n%matplotlib inline\n\n# _______________________________________\n\n# Kernels Data (Public Score & File Path)\n\ndfk = pd.DataFrame({ \n    'Kernel ID': ['A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q'],  \n    'Score':     [ 0.69864 , 0.69846 , 0.69836 , 0.69824 , 0.69813, 0.69795, 0.69752, 0.69751, 0.69749, 0.69747, 0.69735, 0.69731, 0.69703, 0.69701, 0.69691, 0.69648, 0.69579],   \n    'File Path': ['..\/input\/aa69864\/AA69864.csv', '..\/input\/bb69846\/BB69846.csv', '..\/input\/cc69836\/CC69836.csv', '..\/input\/a69824\/A69824.csv', '..\/input\/c69813\/C69813.csv', '..\/input\/ff69795\/FF69795.csv', '..\/input\/ggg69752\/GGG69752.csv', '..\/input\/gg69751\/GG69751.csv' , '..\/input\/g69749\/G69749.csv', '..\/input\/h69747\/H69747.csv', '..\/input\/i69735\/I69735.csv', '..\/input\/j69731\/J69731.csv', '..\/input\/mmm69703\/MMM69703.csv', '..\/input\/l69701\/L69701.csv', '..\/input\/ooo69691\/OOO69691.csv', '..\/input\/ppp69648\/PPP69648.csv', '..\/input\/jan21-tabular-playground-4-lb-final-blend\/submission.csv']     \n})    \n    \ndfk         ","66c1fa53":"def generate(main, support, coeff):\n    \n    g = main.copy()    \n    for i in main.columns[1:]:\n        \n        res = []\n        lm, Is = [], []        \n        lm = main[i].tolist()\n        ls = support[i].tolist()  \n        \n        for j in range(len(main)):\n            res.append((lm[j] * coeff) + (ls[j] * (1.- coeff)))            \n        g[i] = res\n        \n    return g\n","eb5fd603":"def drawing(main, support, generated):\n    \n    X  = main.iloc[:, 1]\n    Y1 = support.iloc[:, 1]\n    Y2 = generated.iloc[:, 1]\n    \n    plt.style.use('seaborn-whitegrid') \n    plt.figure(figsize=(8, 8), facecolor='lightgray')\n    plt.title(f'\\nOn the X axis >>> main\\nOn the Y axis >>> support\\n')           \n    plt.scatter(X, Y1, s=0.1)\n    plt.show() \n    \n    plt.style.use('seaborn-whitegrid') \n    plt.figure(figsize=(8, 8), facecolor='lightgray')\n    plt.title(f'\\nOn the X axis >>> main\\nOn the Y axis >>> generated\\n')           \n    plt.scatter(X, Y2, s=0.1)\n    plt.show()     \n    ","870784a1":"def drawing1(main, support, generated):\n    \n    X  = main.iloc[:, 1]\n    Y1 = support.iloc[:, 1]\n    Y2 = generated.iloc[:, 1]\n    \n    plt.style.use('seaborn-whitegrid') \n    plt.figure(figsize=(8, 8), facecolor='lightgray')\n    plt.title(f'\\nBlue | X axis >> main | Y axis >> support\\n\\nOrange | X axis >> main | Y axis >> generated\\n') \n    \n    plt.scatter(X, Y1, s=0.1)    \n    plt.scatter(X, Y2, s=0.1)\n    \n    plt.show() \n    ","af4f0483":"def drawing2(pxy, mxy):\n    \n    plt.style.use('seaborn-whitegrid') \n    plt.figure(figsize=(8, 8), facecolor='lightgray')\n    plt.title(f'\\nComparative Method\\n\\nBlue | X(main) | Y(average - smaller result)\\n\\nOrange | X(main) | Y(generated)\\n') \n    plt.scatter(pxy[0], pxy[1], s=0.1)\n    plt.scatter(pxy[0], pxy[2], s=0.1)\n    plt.show() \n\n    plt.style.use('seaborn-whitegrid') \n    plt.figure(figsize=(8, 8), facecolor='lightgray')\n    plt.title(f'\\nComparative Method\\n\\nBlue | X(main) | Y(average - bigger results)\\n\\nOrange | X(main) | Y(generated)\\n') \n    plt.scatter(mxy[0], mxy[1], s=0.1)\n    plt.scatter(mxy[0], mxy[2], s=0.1)\n    plt.show()\n    ","97ddd739":"def comparison(main, majority, pcoeff, mcoeff):\n    '''\n    majority: Must be greater than half the total number of kernels. \n              In this example it must be greater than six.(Hyper parameter)\n    \n    pcoeff:   More than one (Hyper parameter)\n    mcoeff:   Less than one (Hyper parameter)\n    \n              First you can assume: (mcoeff = 2 - pcoeff)\n              Then update the numbers based on the results.    \n    '''    \n    comp = main.copy()\n    for i in main.columns[1:]:\n        res = []\n        pxy = [[],[],[]]\n        mxy = [[],[],[]]        \n        lm  = main[i].tolist() \n        ls  = [[],[],[],[],[],[],[],[],[],[],[]]\n        for n in range (11):       \n            csv   = pd.read_csv(dfk.iloc[n, 2])  \n            ls[n] = csv[i].tolist() \n            \n        for j in range(len(main)):\n            pcount = 0\n            pvalue = 0.0        \n            mcount = 0\n            mvalue = 0.0 \n    \n            for k in range (11):            \n                if lm[j] > ls[k][j]:\n                    pcount += 1\n                    pvalue += ls[k][j]                 \n                else: \n                    mcount += 1\n                    mvalue += ls[k][j] \n                    \n            if (pcount > majority): \n                res.append(lm[j] * pcoeff)\n                pxy[2].append(lm[j] * pcoeff)                \n                pxy[1].append(pvalue \/ pcount)\n                pxy[0].append(lm[j])\n                        \n            elif (mcount > majority): \n                res.append(lm[j] * mcoeff)\n                mxy[2].append(lm[j] * mcoeff)                \n                mxy[1].append(mvalue \/ mcount)\n                mxy[0].append(lm[j])\n                        \n            else: \n                res.append(lm[j])       \n    \n        comp[i] = res    \n\n    drawing2(pxy, mxy)    \n    return comp\n    \n    ","0231b4aa":"support = pd.read_csv(dfk.iloc[0, 2])\n    \nfor k in range (1, 11):\n    main = pd.read_csv(dfk.iloc[k, 2])\n    support = generate(main, support, 0.60)\n    \nsub1 = support ","990b6092":"print('sub1(Last Support)    | Score: 0.69726')\nsub1.describe()","14a20cbb":"main = pd.read_csv(dfk.iloc[11, 2])\n\nsub2 = generate(main, sub1, 0.60)\n\n#drawing(main, sub1, sub2)\n\ndrawing1(main, sub1, sub2)","9ba3049f":"print('sub2    | Score: 0.69689')\nsub2.describe()","31bd0e6d":"main = pd.read_csv(dfk.iloc[12, 2])\n\nsub3 = generate(main, sub2, 0.30)\n\n#drawing(main, sub2, sub3)\n\ndrawing1(main, sub2, sub3)","d5434986":"print('sub3    | Score: 0.69678')\nsub3.describe()","a51e4e78":"main = pd.read_csv(dfk.iloc[13, 2])\n\nsub4 = generate(main, sub3, 0.05)\n\n#drawing(main, sub3, sub4)\n\ndrawing1(main, sub3, sub4)","fa94f5e0":"print('sub4    | Score: 0.69676')\nsub4.describe()","d796f8a4":"main = pd.read_csv(dfk.iloc[14, 2])\n\nsub5 = generate(main, sub4, 0.25)\n\n#drawing(main, sub4, sub5)\n\ndrawing1(main, sub4, sub5)","f5d3b3b1":"print('sub5    | Score: 0.69671')\nsub5.describe()","071648ad":"main = pd.read_csv(dfk.iloc[15, 2])\n\nsub6 = generate(main, sub5, 0.60)\n\n#drawing(main, sub5, sub6)\n\ndrawing1(main, sub5, sub6)","509a3272":"print('sub6    | Score: 0.69650')\nsub6.describe()","6867135e":"main = pd.read_csv(dfk.iloc[16, 2])\n\nsub7 = generate(main, sub6, 0.60)\n\n#drawing(main, sub6, sub7)\n\ndrawing1(main, sub6, sub7)","2862db41":"print('sub7    | Score: 0.69584')\nsub7.describe()","7ae00f64":"sub8 = comparison(sub7, 8, 1.0030, 0.9980)\n","b8e7a350":"print('sub8    | Score: 0.69548')\nsub8.describe()","3be38437":"sub = sub8\nsub.to_csv(\"submission.csv\", index=False)\n\nsub1.to_csv(\"submission1.csv\", index=False)\nsub2.to_csv(\"submission2.csv\", index=False)\nsub3.to_csv(\"submission3.csv\", index=False)\nsub4.to_csv(\"submission4.csv\", index=False)\nsub5.to_csv(\"submission5.csv\", index=False)\nsub6.to_csv(\"submission6.csv\", index=False)\nsub7.to_csv(\"submission7.csv\", index=False)\n\n\n!ls","c0b1a0fb":"<div class=\"alert alert-success\">  \n<\/div>","89df5a55":"## Step #8\n## Comparative Method\nIn this step, we so-called recover some of the results of the previous step. That is, we compensate for the bad effects of the previous stages.","c161cfab":"## Step #6\nUse the results of the \"P\" kernel as well as the results of step #5.","6cd663ee":"## Result:\n\n[ Q: (Score: 0.69579) , sub6: (Score: 0.69650) ] >>> sub7: (Score: **0.69584**)","72e86a3d":"## Result:\n\n[ M: (Score: 0.69703) , sub2: (Score: 0.69689) ] >>> sub3: (Score: **0.69678**)\n","c76118c5":"## Step #2\nUse the results of the \"L\" kernel as well as the results of step #1.","e95b9894":"## Result:\n\nsub7: (Score: 0.69584)  >>>  sub8: (Score: **0.69548**)\n\nWe first compared the result of our previous step with the results of each kernel used. We looked for rows where the results of all kernels (or the majority of kernels) differed from the results of our previous step (more or less). On the other hand, we know that the results of the previous step are better than the results of all the kernels used. So we can guess that these rows have been oppressed !!! That is, in the previous steps, they were mistakenly increased or decreased. We compensate for these possible errors to some extent by applying the coefficients \"pcoeff\" and \"mcoeff\" (of course, only in these rows). Fortunately, the pictures illustrate the method well.\n\nThat is, first we hold a vote and then, exactly contrary to the result of the vote, we make the corrections:)","8782d563":"## Step #7\nUse the results of the \"Q\" kernel as well as the results of step #6.","07f21494":"<div>\n    <h1 align=\"center\">Optimizing results for 4th solution<\/h1><\/h1>\n    <h3 align=\"center\">Tabular Playground Series - Jan 2021<\/h3>\n<\/div>","e8528e35":"<div class=\"alert alert-success\">  \n<\/div>","cb451ed7":"<div class=\"alert alert-success\">  \n<\/div>","7bb397d0":"<div class=\"alert alert-success\">  \n<\/div>","26f7d0f4":"## Step #3\nUse the results of the \"M\" kernel as well as the results of step #2.","454246bb":"## Submission","413765e2":"## Functions:","39e41354":"## Result:\n\n[ P: (Score: 0.69648) , sub5: (Score: 0.69671) ] >>> sub6: (Score: **0.69650**)","b252f9fd":"## Result:\n\n[ N: (Score: 0.69701) , sub3: (Score: 0.69678) ] >>> sub4: (Score: **0.69676**)\n","423e1616":"# If you find this work useful, please don't forget upvoting :)\n","5494db63":"<div class=\"alert alert-success\">  \n<\/div>","f66e96dd":"<div class=\"alert alert-success\">  \n<\/div>","ec788fd6":"<div class=\"alert alert-success\">  \n<\/div>","32f4ede6":"## Step #1\nIn this step, we use the results of kernels \"A, B, C, D, E, F, G, H, I, J, K\".","ea682731":"<div class=\"alert alert-success\">  \n<\/div>","1371acb0":"## Step #4\nUse the results of the \"N\" kernel as well as the results of step #3.","0aabfa35":"<div class=\"alert alert-success\">  \n<\/div>","13bd4770":"<div class=\"alert alert-success\">  \n<\/div>","4286541c":"# Description:\n\n\n### - At the end of the challenge, Mr. [@davidedwards1](https:\/\/www.kaggle.com\/davidedwards1) shared his notebook. He won the fourth place according to the private score [0.69500] and the second place according to the public score [0.69579]. Thanks for sharing the results, I also congratulate him.\n\n### https:\/\/www.kaggle.com\/davidedwards1\/jan21-tabular-playground-4-lb-final-blend\n\n\n### - During this challenge, I had a public notebook that improved the results of other people's kernels using the \"ensembling\" and \"Comparative Method\". The address of the previous notebook is here: \n\n### https:\/\/www.kaggle.com\/somayyehgholami\/results-driven-tabular-playground-series-201\n\n\n### - In this notebook, I greatly improved the private and public scores of the fourth winner. This was done using the results of a number of public notebooks that had a much worse score than the fourth winning notebook. (For example, the best score in this collection was related to my notebook: 0.69648) You can also see that the problem of \"Overfitting\" does not happen, and quite the opposite, that is, in this method, the private score is closer to what we expect.\n\n### - This method is not only for Kegel challenges but you can also use this method for your own projects. For example, suppose you have a real project (not a Kaggle challenge). You got seven mediocre results with seven simple methods and three good results with three advanced methods. You usually miss out on seven mediocre results, but my suggestion is that even mediocre results are important. You can improve good results by \"ensembling\" and use mediocre results for the \"Comparative Method\".\n\n### - The \"Comparative Method\" is new to you because it's my own idea. Of course, outside of Kaggle, I have used the \"Comparative Method\" many times, and this method has always worked very well. That's why I decided to share this method with you in this challenge. As you will see in this notebook, the positive effect of the \"Comparative Method\" is even greater than the effect of all the \"ensembling\" steps. You can also find more information about this notebook at the following address:\n\n### https:\/\/www.kaggle.com\/c\/tabular-playground-series-jan-2021\/discussion\/213093","86341f91":"<div class=\"alert alert-success\">  \n<\/div>","61bc0359":"## Result: \n[ A: (Score: 0.69864), B: (Score: 0.69846), ... , J: (Score: 0.69747), K: (Score: 0.69735) ] >>> sub1: (Score: **0.69726**)\n","672a8e73":"## Result:\n\n[ O: (Score: 0.69691) , sub4: (Score: 0.69676) ] >>> sub5: (Score: **0.69671**)\n","e8f5dee8":"<div class=\"alert alert-success\">  \n<\/div>","715ab6e4":"## Step #5\nUse the results of the \"O\" kernel as well as the results of step #4.","990b5e39":"<div class=\"alert alert-success\">  \n<\/div>","09a4cf6a":"<div class=\"alert alert-success\">  \n<\/div>","031bebd5":"## Result:\n\n[ L: (Score: 0.69731) , sub1: (Score: 0.69726) ] >>> sub2: (Score: **0.69689**)","dcc4b33a":"## Import & Data Set"}}