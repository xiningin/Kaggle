{"cell_type":{"7e07dace":"code","c0af975b":"code","b0efd0c5":"code","e5a6f1af":"code","bb8afaa2":"code","d362ea86":"code","dc57be27":"code","2023ab9c":"code","d40f1f26":"code","0cfaa958":"code","07174c4d":"code","f05dfbb5":"code","9b180a79":"code","4e35d9e8":"code","d7049b99":"code","e72319bd":"code","7e0926e2":"code","f3f36f48":"code","d7724c3c":"code","d6ccdd88":"code","8b784e55":"code","71d7a246":"code","1b79a8b2":"code","bd3a6440":"code","ce2ab548":"code","d3c71c05":"code","a9999b69":"code","6239cc4e":"code","b390ad30":"code","6e1c8704":"code","ad394db3":"code","6c83ab39":"code","9a125351":"code","c5812600":"code","81cf5771":"code","b5cf0ea3":"code","da35b8db":"code","bce2e8f6":"code","46f78eb5":"code","62a13447":"code","d655588b":"code","491ac37a":"code","a092c1f8":"code","2500577a":"code","d2c1fbc7":"code","93b709be":"code","f4b8f4e0":"code","0f38059d":"code","f4243190":"code","2d0d338a":"code","e7cfc2f1":"code","e282456e":"code","1232ed10":"code","ddeb4de1":"code","e172c76e":"code","3ac2205a":"code","0df17a4f":"code","f6aab715":"code","3641494b":"code","9316218f":"code","21335617":"code","f16e857f":"code","988929a9":"code","e98efa28":"code","7f735d31":"code","7d376596":"code","e596756b":"code","c2e3c6a2":"code","53f0271e":"code","b5f53223":"code","27d54aa9":"code","10db8a43":"code","bfd1f9c0":"code","c05344c7":"code","9acd255a":"code","ed980437":"code","42861061":"code","7263b289":"code","f4ad5848":"code","bb1b6b5c":"code","d1b8f79b":"code","0cef9652":"code","99216e24":"code","2e4bc125":"code","272a6e79":"code","7153bf15":"code","92335816":"code","b1aa3cca":"code","3738caee":"code","e18dcde9":"code","4402cc17":"code","6799d31f":"code","1dfd383a":"code","0dccb402":"code","97a839e6":"code","f066f4b2":"code","cd42e929":"code","0a26fb82":"code","baa06ad9":"code","96860660":"code","8d478f27":"code","8682f47e":"code","bc367ff4":"code","0355df56":"code","a0594141":"code","e203e9b0":"code","6f0e3885":"code","c87eee7d":"code","109bcefe":"code","8cd0d666":"code","c1cd0537":"code","cc05ab9e":"code","48b7a03e":"code","15dd0a19":"code","40d42bb5":"code","96e37d4f":"code","118cbde2":"code","68d2b1fb":"code","b94b6f81":"code","cc09aed1":"code","5f306ece":"code","9c8b12cc":"code","5d2617da":"code","ea19bc75":"code","b3bad204":"code","cc08c4b5":"code","5da6ece0":"code","ad332837":"code","61f6dbff":"code","98fe0774":"code","ce259296":"code","237645e9":"code","07722ace":"code","5908b0ee":"code","06fb0b0a":"code","49f9a7e8":"code","43962a85":"code","03b01e78":"code","8fb54678":"code","3bd7b7f1":"code","62880d83":"code","857ec78b":"code","c70276da":"code","9b9ebcbd":"code","e8f60eee":"code","8d104e5e":"code","fe535307":"code","feb091a8":"code","af0e7295":"code","261c48fd":"code","84c8d5e8":"code","8bd25382":"code","54ddb868":"code","f462715f":"markdown","27ce714c":"markdown","867edb6c":"markdown","a090d17f":"markdown","b6407e75":"markdown","a7faabcc":"markdown","1f3b7221":"markdown","e09dc0f6":"markdown","659b23d3":"markdown","0dc45b5e":"markdown","ff42c006":"markdown","b1143062":"markdown","c76d662b":"markdown","4044819b":"markdown","2f60c994":"markdown","c22c33e7":"markdown","4e6f0b22":"markdown","1bb8b9cb":"markdown","26188a58":"markdown","ada685f4":"markdown","a45a4ff3":"markdown","10350d2e":"markdown","edbf618c":"markdown","48b2562e":"markdown","68f00d3e":"markdown","c6842a50":"markdown","5062c422":"markdown","0c51c971":"markdown","57b8fc14":"markdown","90df18f2":"markdown","c867eb19":"markdown","441dc843":"markdown","74f319e0":"markdown","a17b21c6":"markdown","15eab52f":"markdown","ed21c074":"markdown","202987cc":"markdown","a065a834":"markdown","0dc46794":"markdown","08206df6":"markdown","2353db7b":"markdown","3b503715":"markdown","f5f193fc":"markdown","ba42078f":"markdown","d352e00d":"markdown","bf01086f":"markdown","f7793699":"markdown","2ce547ca":"markdown","a802b70a":"markdown","86b34e6d":"markdown","e0575848":"markdown","d400a270":"markdown","4c15607f":"markdown","6f91f11c":"markdown","7122312c":"markdown","c41ea92b":"markdown","bd80d0b9":"markdown","7777c2df":"markdown","ef929b82":"markdown","f6871377":"markdown","1d307747":"markdown","04c2ce34":"markdown","79a348e7":"markdown","d6e4e461":"markdown","bf5005eb":"markdown"},"source":{"7e07dace":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","c0af975b":"import pandas as pd\nimport numpy as np\n\ntrain = pd.read_csv(\"\/kaggle\/input\/house-prices-advanced-regression-techniques\/train.csv\")\ntrain_orig = pd.read_csv(\"\/kaggle\/input\/house-prices-advanced-regression-techniques\/train.csv\")\n\ntest = pd.read_csv(\"\/kaggle\/input\/house-prices-advanced-regression-techniques\/test.csv\")\ntest_orig = pd.read_csv(\"\/kaggle\/input\/house-prices-advanced-regression-techniques\/test.csv\")\n","b0efd0c5":"from pandas_profiling import ProfileReport\nprof = ProfileReport(train)\nprof.to_file(output_file='output.html')","e5a6f1af":"pd.set_option('display.max_columns', None)","bb8afaa2":"train.head()","d362ea86":"train.columns","dc57be27":"def display_only_missing(df):\n    all_data_na = (df.isnull().sum() \/ len(df)) * 100\n    all_data_na = all_data_na.drop(all_data_na[all_data_na == 0].index).sort_values(ascending=False)\n    missing_data = pd.DataFrame({'Missing Ratio' :all_data_na})\n    print(missing_data)","2023ab9c":"display_only_missing(train)","d40f1f26":"display_only_missing(test)","0cfaa958":"train.PoolQC.value_counts()","07174c4d":"train.drop(\"PoolQC\", axis=1, inplace=True)\ntest.drop(\"PoolQC\", axis=1, inplace=True)","f05dfbb5":"train.MiscFeature.value_counts()","9b180a79":"train.drop(\"MiscFeature\", axis=1, inplace=True)\ntest.drop(\"MiscFeature\", axis=1, inplace=True)","4e35d9e8":"train.Alley.value_counts()","d7049b99":"train.drop(\"Alley\", axis=1, inplace=True)\ntest.drop(\"Alley\", axis=1, inplace=True)","e72319bd":"train.Fence.value_counts()","7e0926e2":"train.drop(\"Fence\", axis=1, inplace=True)\ntest.drop(\"Fence\", axis=1, inplace=True)","f3f36f48":"train.FireplaceQu.value_counts()","d7724c3c":"import seaborn as sns\n\nsns.countplot(train[\"FireplaceQu\"])","d6ccdd88":"sns.boxplot(data=train, x=\"SalePrice\", y=\"FireplaceQu\")","8b784e55":"train[\"FireplaceQu\"] = train[\"FireplaceQu\"].fillna(0)\ntest[\"FireplaceQu\"] = test[\"FireplaceQu\"].fillna(0)","71d7a246":"sns.boxplot(data=train, x=\"SalePrice\", y=\"FireplaceQu\")","1b79a8b2":"sns.distplot(train.LotFrontage)","bd3a6440":"train.LotFrontage.mean()","ce2ab548":"train.LotFrontage.median()","d3c71c05":"test.LotFrontage.mean()","a9999b69":"test.LotFrontage.median()","6239cc4e":"train.LotFrontage.min()","b390ad30":"sns.regplot(data=train, x=\"SalePrice\",y=\"LotFrontage\")","6e1c8704":"train_orig[train_orig[\"LotFrontage\"].isnull()]","ad394db3":"train[\"LotFrontage\"] = train[\"LotFrontage\"].fillna( train[\"LotFrontage\"].median())\ntest[\"LotFrontage\"] = test[\"LotFrontage\"].fillna( train[\"LotFrontage\"].median())","6c83ab39":"train[train[\"GarageQual\"].isnull()]","9a125351":"train.GarageQual.value_counts()","c5812600":"sns.boxplot(data=train, x=\"SalePrice\", y=\"GarageQual\")","81cf5771":"train_orig[\"GarageQual\"] = train_orig[\"GarageQual\"].fillna(0)","b5cf0ea3":"sns.boxplot(data=train_orig, x=\"SalePrice\", y=\"GarageQual\")","da35b8db":"sns.distplot(train[train[\"GarageQual\"]==\"TA\"].SalePrice)","bce2e8f6":"sns.distplot(train[train[\"GarageQual\"]==\"Fa\"].SalePrice)","46f78eb5":"train.drop(\"GarageQual\", axis=1, inplace=True)\ntest.drop(\"GarageQual\", axis=1, inplace=True)","62a13447":"train.GarageFinish.value_counts()","d655588b":"sns.boxplot(data=train, x=\"SalePrice\", y=\"GarageFinish\")","491ac37a":"train[\"GarageFinish\"] = train[\"GarageFinish\"].fillna(\"NoGarage\")\ntest[\"GarageFinish\"] = test[\"GarageFinish\"].fillna(\"NoGarage\")","a092c1f8":"sns.boxplot(data=train, x=\"SalePrice\", y=\"GarageFinish\")","2500577a":"train.GarageCond.value_counts()","d2c1fbc7":"train[\"GarageCond\"] = train[\"GarageCond\"].fillna(\"NoGarage\")","93b709be":"sns.boxplot(data=train, x=\"SalePrice\", y=\"GarageCond\")\n","f4b8f4e0":"train.drop(\"GarageCond\", axis=1, inplace=True)\ntest.drop(\"GarageCond\", axis=1, inplace=True)","0f38059d":"sns.distplot(train.GarageYrBlt)","f4243190":"train[train[\"GarageYrBlt\"].isnull()]","2d0d338a":"train.GarageYrBlt.max()","e7cfc2f1":"train.GarageYrBlt.min()","e282456e":"sns.regplot(data=train,x=\"SalePrice\",y=\"GarageYrBlt\")","1232ed10":"train[\"GarageYrBlt\"] = train[\"GarageYrBlt\"].fillna(train.GarageYrBlt.min())\ntest[\"GarageYrBlt\"] = test[\"GarageYrBlt\"].fillna(train.GarageYrBlt.min())","ddeb4de1":"train.GarageType.value_counts()","e172c76e":"sns.boxplot(data=train, x=\"SalePrice\", y=\"GarageType\")","3ac2205a":"train[\"GarageType\"] = train[\"GarageType\"].fillna(\"NoGarage\")\ntest[\"GarageType\"] = test[\"GarageType\"].fillna(\"NoGarage\")","0df17a4f":"sns.boxplot(data=train, x=\"SalePrice\", y=\"GarageType\")","f6aab715":"train.BsmtQual.value_counts()","3641494b":"sns.boxplot(data=train, x=\"SalePrice\", y=\"BsmtQual\")","9316218f":"train_orig[\"BsmtQual\"] = train_orig[\"BsmtQual\"].fillna(\"NoBsmt\")\ntest_orig[\"BsmtQual\"] =test_orig[\"BsmtQual\"].fillna(\"NoBsmt\")","21335617":"sns.boxplot(data=train_orig, x=\"SalePrice\", y=\"BsmtQual\")","f16e857f":"train[\"BsmtQual\"] = train[\"BsmtQual\"].fillna(\"NoBsmt\")\ntest[\"BsmtQual\"] =test[\"BsmtQual\"].fillna(\"NoBsmt\")","988929a9":"train.BsmtCond.value_counts()","e98efa28":"sns.boxplot(data=train, x=\"SalePrice\", y=\"BsmtCond\")","7f735d31":"train.drop(\"BsmtCond\", axis=1, inplace=True)\ntest.drop(\"BsmtCond\", axis=1, inplace=True)","7d376596":"train.BsmtExposure.value_counts()","e596756b":"sns.boxplot(data=train, x=\"SalePrice\", y=\"BsmtExposure\")","c2e3c6a2":"train_orig[\"BsmtExposure\"] = train_orig[\"BsmtExposure\"].fillna(\"NoBsmt\")\ntest_orig[\"BsmtExposure\"] =test_orig[\"BsmtExposure\"].fillna(\"NoBsmt\")","53f0271e":"sns.boxplot(data=train_orig, x=\"SalePrice\", y=\"BsmtExposure\")","b5f53223":"train[\"BsmtExposure\"] = train[\"BsmtExposure\"].fillna(\"NoBsmt\")\ntest[\"BsmtExposure\"] =test[\"BsmtExposure\"].fillna(\"NoBsmt\")","27d54aa9":"train.BsmtFinType1.value_counts()","10db8a43":"sns.boxplot(data=train, x=\"SalePrice\", y=\"BsmtFinType1\")","bfd1f9c0":"train_orig[\"BsmtFinType1\"] = train_orig[\"BsmtFinType1\"].fillna(\"NoBsmt\")\ntest_orig[\"BsmtFinType1\"] =test_orig[\"BsmtFinType1\"].fillna(\"NoBsmt\")","c05344c7":"sns.boxplot(data=train_orig, x=\"SalePrice\", y=\"BsmtFinType1\")","9acd255a":"train[\"BsmtFinType1\"] = train[\"BsmtFinType1\"].fillna(\"NoBsmt\")\ntest[\"BsmtFinType1\"] =test[\"BsmtFinType1\"].fillna(\"NoBsmt\")","ed980437":"train.BsmtFinType2.value_counts()","42861061":"sns.boxplot(data=train, x=\"SalePrice\", y=\"BsmtFinType2\")","7263b289":"train.drop(\"BsmtFinType2\", axis=1, inplace=True)\ntest.drop(\"BsmtFinType2\", axis=1, inplace=True)","f4ad5848":"train.MasVnrType.value_counts()","bb1b6b5c":"sns.boxplot(data=train, x=\"SalePrice\", y=\"MasVnrType\")","d1b8f79b":"train_orig[\"MasVnrType\"] = train_orig[\"MasVnrType\"].fillna(\"0\")\ntest_orig[\"MasVnrType\"] =test_orig[\"MasVnrType\"].fillna(\"0\"","0cef9652":"sns.boxplot(data=train_orig, x=\"SalePrice\", y=\"MasVnrType\")","99216e24":"train[train[\"MasVnrType\"].isnull()]","2e4bc125":"train[\"MasVnrType\"] = train[\"MasVnrType\"].fillna(\"None\")\ntest[\"MasVnrType\"] =test[\"MasVnrType\"].fillna(\"None\")","272a6e79":"sns.distplot(train.MasVnrArea)","7153bf15":"train.MasVnrArea.min()","92335816":"train.MasVnrArea.max()","b1aa3cca":"train[train[\"MasVnrArea\"].isnull()]","3738caee":"train[\"MasVnrArea\"] = train[\"MasVnrArea\"].fillna(train.MasVnrArea.min())\ntest[\"MasVnrArea\"] =test[\"MasVnrArea\"].fillna(train.MasVnrArea.min())","e18dcde9":"train.Electrical.value_counts()","4402cc17":"sns.boxplot(data=train, x=\"SalePrice\", y=\"Electrical\")","6799d31f":"train_orig[\"Electrical\"] = train_orig[\"Electrical\"].fillna(\"0\")\ntest_orig[\"Electrical\"] =test_orig[\"Electrical\"].fillna(\"0\")","1dfd383a":"sns.boxplot(data=train_orig, x=\"SalePrice\", y=\"Electrical\")","0dccb402":"train[\"Electrical\"] = train[\"Electrical\"].fillna(\"SBrkr\")\ntest[\"Electrical\"] =test[\"Electrical\"].fillna(\"SBrkr\")","97a839e6":"train.MSZoning.value_counts()","f066f4b2":"sns.boxplot(data=train_orig, x=\"SalePrice\", y=\"MSZoning\")","cd42e929":"test[test[\"MSZoning\"].isnull()]","0a26fb82":"test[\"MSZoning\"] =test[\"MSZoning\"].fillna(\"RL\")","baa06ad9":"test.Functional.value_counts()","96860660":"train.Functional.value_counts()","8d478f27":"sns.boxplot(data=train_orig, x=\"SalePrice\", y=\"Functional\")","8682f47e":"test[\"Functional\"] =test[\"Functional\"].fillna(\"Typ\")","bc367ff4":"test.BsmtFullBath.value_counts()","0355df56":"train.BsmtFullBath.value_counts()","a0594141":"test[\"BsmtFullBath\"] =test[\"BsmtFullBath\"].fillna(0)","e203e9b0":"test.BsmtHalfBath.value_counts()","6f0e3885":"train.BsmtHalfBath.value_counts()","c87eee7d":"sns.regplot(data=train, x=\"SalePrice\", y=\"BsmtHalfBath\")","109bcefe":"test[\"BsmtHalfBath\"] =test[\"BsmtHalfBath\"].fillna(0)","8cd0d666":"test.Utilities.value_counts()","c1cd0537":"train.Utilities.value_counts()","cc05ab9e":"train.drop(\"Utilities\", axis=1, inplace=True)\ntest.drop(\"Utilities\", axis=1, inplace=True)\n","48b7a03e":"test.SaleType.value_counts()","15dd0a19":"train.SaleType.value_counts()","40d42bb5":"sns.boxplot(data=train, x=\"SalePrice\", y=\"SaleType\")","96e37d4f":"test[\"SaleType\"] =test[\"SaleType\"].fillna(\"WD\")","118cbde2":"sns.distplot(test.GarageArea)","68d2b1fb":"test[test[\"GarageArea\"].isnull()]","b94b6f81":"test[\"GarageArea\"] =test[\"GarageArea\"].fillna(test.GarageArea.min())","cc09aed1":"sns.distplot(test.GarageCars)","5f306ece":"test[\"GarageCars\"] =test[\"GarageCars\"].fillna(test.GarageCars.min())","9c8b12cc":"test.KitchenQual.value_counts()","5d2617da":"test[test[\"KitchenQual\"].isnull()]","ea19bc75":"test[\"KitchenQual\"] =test[\"KitchenQual\"].fillna(\"TA\")","b3bad204":"sns.distplot(test.TotalBsmtSF)","cc08c4b5":"test[test[\"TotalBsmtSF\"].isnull()]","5da6ece0":"test[\"TotalBsmtSF\"] =test[\"TotalBsmtSF\"].fillna(test.TotalBsmtSF.min())","ad332837":"test[\"BsmtUnfSF\"] =test[\"BsmtUnfSF\"].fillna(test.BsmtUnfSF.min())","61f6dbff":"test[\"BsmtFinSF2\"].value_counts()","98fe0774":"test[\"BsmtFinSF2\"] =test[\"BsmtFinSF2\"].fillna(test.BsmtFinSF2.min())","ce259296":"test[\"BsmtFinSF1\"] =test[\"BsmtFinSF1\"].fillna(test.BsmtFinSF1.min())","237645e9":"test[\"Exterior1st\"].value_counts()","07722ace":"train[\"Exterior1st\"].value_counts()","5908b0ee":"test[test[\"Exterior1st\"].isnull()]","06fb0b0a":"test[\"Exterior1st\"] =test[\"Exterior1st\"].fillna(\"VinlSd\")","49f9a7e8":"test[\"Exterior2nd\"].value_counts()","43962a85":"test[\"Exterior2nd\"] =test[\"Exterior2nd\"].fillna(\"VinlSd\")","03b01e78":"columns_to_le = []\ncolumns = list(train.columns)\n\nfor column in columns:\n    if train[column].nunique() > 5 and (train[column].dtypes == object) == True :\n        columns_to_le.append(column)","8fb54678":"columns_to_le","3bd7b7f1":"from sklearn import preprocessing\nle = preprocessing.LabelEncoder()\n\ntrain[columns_to_le] = le.fit_transform(columns_to_le)\ntest[columns_to_le] = le.fit_transform(columns_to_le)","62880d83":"columns_to_ohe=[]\nfor column in columns:\n    if (train[column].dtypes == object) == True :\n        columns_to_ohe.append(column)","857ec78b":"columns_to_ohe","c70276da":"full = pd.concat([train,test])","9b9ebcbd":"full = pd.get_dummies(full, columns=columns_to_ohe, prefix_sep=\"__\", drop_first=True)","e8f60eee":"full.head()","8d104e5e":"test.Id","fe535307":"from sklearn.model_selection import train_test_split\n\ntrain_new, test_new = train_test_split(full, test_size=0.4995, shuffle=False)","feb091a8":"train_new = train_new.drop(\"Id\", axis=1)\ntest_new = test_new.drop(\"Id\", axis=1)","af0e7295":"test_new = test_new.drop(\"SalePrice\", axis=1)","261c48fd":"X_train = train_new.drop(\"SalePrice\", axis=1)\ny_train = train_new[\"SalePrice\"]\nX_test = test_new","84c8d5e8":"\nimport xgboost\nxgb = xgboost.XGBRegressor(eta=0.1,max_depth=3,colsample_bytree= 0.3, min_child_weight=0.5, subsample=1)\nxgb_model = xgb.fit(X=X_train,y=y_train)\ny_pred = xgb_model.predict(X_test)","8bd25382":"submission = pd.read_csv(\"\/kaggle\/input\/house-prices-advanced-regression-techniques\/sample_submission.csv\")\nsubmission['SalePrice'] = y_pred\nsubmission.head(20)","54ddb868":"from IPython.display import FileLink\n\nsubmission.to_csv('submission.csv',index=False)\nFileLink(r'submission.csv')","f462715f":"KitchenQual: Kitchen quality\n\n       Ex\tExcellent\n       Gd\tGood\n       TA\tTypical\/Average\n       Fa\tFair\n       Po\tPoor","27ce714c":"MasVnrType: Masonry veneer type\n\n       BrkCmn\tBrick Common\n       BrkFace\tBrick Face\n       CBlock\tCinder Block\n       None\tNone\n       Stone\tStone","867edb6c":"I don't think this is not help our model. We drop this column.","a090d17f":"We use label encoding for number of nunique is more than 5.","b6407e75":"I think this column is ok. Because the value difference in the categories is not too big. Let's create a new category called NoGarage.","a7faabcc":"Let's create a new category called NoBsmt","1f3b7221":"We use one-hot encoding for the remaining object type columns.","e09dc0f6":"**SaleType**: Type of sale\n\t\t\n       WD \tWarranty Deed - Conventional\n       CWD\tWarranty Deed - Cash\n       VWD\tWarranty Deed - VA Loan\n       New\tHome just constructed and sold\n       COD\tCourt Officer Deed\/Estate\n       Con\tContract 15% Down payment regular terms\n       ConLw\tContract Low Down payment and low interest\n       ConLI\tContract Low Interest\n       ConLD\tContract Low Down\n       Oth\tOther","659b23d3":"### 2.3 Categorical fill methods\n\nWe can fill with most frequent value in columns or maybe we can make unique category for missing values.","0dc45b5e":"Let's create a new category called NoBsmt","ff42c006":"We fill with most frequent","b1143062":"**GarageYrBlt**: Year garage was built\n","c76d662b":"**GarageQual**: Garage quality\n\n       Ex\tExcellent\n       Gd\tGood\n       TA\tTypical\/Average\n       Fa\tFair\n       Po\tPoor\n       NA\tNo Garage\n\t\t","4044819b":"**GarageFinish**: Interior finish of the garage\n\n       Fin\tFinished\n       RFn\tRough Finished\t\n       Unf\tUnfinished\n       NA\tNo Garage","2f60c994":"**BsmtQual**: Evaluates the height of the basement\n\n       Ex\tExcellent (100+ inches)\t\n       Gd\tGood (90-99 inches)\n       TA\tTypical (80-89 inches)\n       Fa\tFair (70-79 inches)\n       Po\tPoor (<70 inches\n       NA\tNo Basement","c22c33e7":"**FireplaceQu**: Fireplace quality\n\n       Ex\tExcellent - Exceptional Masonry Fireplace\n       Gd\tGood - Masonry Fireplace in main level\n       TA\tAverage - Prefabricated Fireplace in main living area or MasonryFireplace in basement\n       Fa\tFair - Prefabricated Fireplace in basement\n       Po\tPoor - Ben Franklin Stove\n       NA\tNo Fireplace","4e6f0b22":"Functional: Home functionality (Assume typical unless deductions are warranted)\n\n       Typ\tTypical Functionality\n       Min1\tMinor Deductions 1\n       Min2\tMinor Deductions 2\n       Mod\tModerate Deductions\n       Maj1\tMajor Deductions 1\n       Maj2\tMajor Deductions 2\n       Sev\tSeverely Damaged\n       Sal\tSalvage only","1bb8b9cb":"We fill with most frequent","26188a58":"BsmtCond: Evaluates the general condition of the basement\n\n       Ex\tExcellent\n       Gd\tGood\n       TA\tTypical - slight dampness allowed\n       Fa\tFair - dampness or some cracking or settling\n       Po\tPoor - Severe cracking, settling, or wetness\n       NA\tNo Basement","ada685f4":"This feature same as PoolQC, we drop this to.","a45a4ff3":"We fill with min value.","10350d2e":"Let's create a new category called NoBsmt","edbf618c":"MasVnrArea: Masonry veneer area in square feet","48b2562e":"## 2. Fill Methods\n\n### 2.1) Fill with Mean\/Median\n\nWe can use this method for the numerical variables. If we have outlier values we probably use median.\n\n<pre><code>train[\"ColumnName\"] = train[\"ColumnName\"].fillna(train[\"ColumnName\"].mean())\n<\/code><\/pre>\n\n#### Pros\n+ Can fix the loss of information when we drop columns or rows.\n+ This is a good method when data size is small.\n\n#### Cons\n+ It works poorly compared to other multiple-fill methods.\n\n\n\n\n\n### 2.2) Fill with Predicted Values\n\nWe can predict missing values from non missing values in data.\n\n<pre><code>pip install datawig\nimport datawig\n\ndata = pd.read_csv(\"train.csv\")\n\ndf_train, df_test = datawig.utils.random_split(data)\n\n#Initialize a SimpleImputer model\nimputer = datawig.SimpleImputer(\n    input_columns=['NonMissing1','NonMissing2','NonMissing3'], # column(s) containing information about the column we want to impute\n    output_column= 'Missing1', # the column we'd like to impute values for\n    output_path = 'imputer_model' # stores model data and metrics\n    )\n\n#Fit an imputer model on the train data\nimputer.fit(train_df=df_train, num_epochs=50)\n\n#Impute missing values and return original dataframe with predictions\nimputed = imputer.predict(df_test)\n<\/code><\/pre>\n\n#### Pros\n+ Quite accurate compared to other methods.\n\n#### Cons:\n+ Can be quite slow with large datasets.\n\nhttps:\/\/github.com\/awslabs\/datawig\n","68f00d3e":"## 1.Drop Methods\n\n\n### 1.1) Row Drop\n\nWe can use if there is more than one missing data in a row.  \n\n\n<pre><code>train.dropna()\n<\/code><\/pre>\n\n### 1.2) Column Drop\n\nWe can use if there missing values percentage is \u2248 %30 *(This is my personal threshold)*. But we have to be careful while doing this. The column we will drop may be very important for our goal. We must check the correlation,autocorrelation etc. before drop it.\n\n<pre><code>train.drop(\"ColumnName\", axis=1, inplace=True)\n<\/code><\/pre>\n\n#### Pros\n+ Drop methods are so fast.\n+ Leaving the useless columns or rows can improve the performance of our model.\n\n#### Cons\n+ We can lose a lot of information in our data.\n\n\n","c6842a50":"**GarageType**: Garage location\n\t\t\n       2Types\tMore than one type of garage\n       Attchd\tAttached to home\n       Basment\tBasement Garage\n       BuiltIn\tBuilt-In (Garage part of house - typically has room above garage)\n       CarPort\tCar Port\n       Detchd\tDetached from home\n       NA\tNo Garage ","5062c422":"**LotFrontage**: Linear feet of street connected to property\n\nThe first real missing column.","0c51c971":"**BsmtFullBath**: Basement full bathrooms","57b8fc14":"I separate the data I have merged.","90df18f2":"BsmtExposure: Refers to walkout or garden level walls\n\n       Gd\tGood Exposure\n       Av\tAverage Exposure (split levels or foyers typically score average or above)\t\n       Mn\tMimimum Exposure\n       No\tNo Exposure\n       NA\tNo Basement","c867eb19":"We fill with min value.","441dc843":"I don't think this is not help our model. We drop this column.","74f319e0":"MSZoning: Identifies the general zoning classification of the sale.\n\t\t\n       A\tAgriculture\n       C\tCommercial\n       FV\tFloating Village Residential\n       I\tIndustrial\n       RH\tResidential High Density\n       RL\tResidential Low Density\n       RP\tResidential Low Density Park \n       RM\tResidential Medium Density","a17b21c6":"I combine train and test because in onehot encoding, there may be a difference in the number of columns in train and test data.","15eab52f":"We fill with most frequent","ed21c074":"Electrical: Electrical system\n\n       SBrkr\tStandard Circuit Breakers & Romex\n       FuseA\tFuse Box over 60 AMP and all Romex wiring (Average)\t\n       FuseF\t60 AMP Fuse Box and mostly Romex wiring (Fair)\n       FuseP\t60 AMP Fuse Box and mostly knob & tube wiring (poor)\n       Mix\tMixed","202987cc":"**BsmtUnfSF**: Unfinished square feet of basement area\n\n**BsmtFinSF1**: Type 1 finished square feet\n\n**BsmtFinSF2**: Type 2 finished square feet","a065a834":"We fill with most frequent","0dc46794":"I don't think that dropping this will affect our model badly.","08206df6":"**Alley**: Type of alley access to property\n\n       Grvl\tGravel\n       Pave\tPaved\n       NA \tNo alley access","2353db7b":"# Handling Missing Values\nIn the lines above we see the columns of missing data and the loss rates.\n\nThere are 2 different methods for missing data.\n\nThe first method is drop, second method is fill.\n\nLet's start with drop method.","3b503715":"Let's create a new category called NoGarage.","f5f193fc":"BsmtFinType2: Rating of basement finished area (if multiple types)\n\n       GLQ\tGood Living Quarters\n       ALQ\tAverage Living Quarters\n       BLQ\tBelow Average Living Quarters\t\n       Rec\tAverage Rec Room\n       LwQ\tLow Quality\n       Unf\tUnfinshed\n       NA\tNo Basement","ba42078f":"Let's see this columns one by one.\n\n**PoolQC**: Pool quality\n\t\t\n       Ex\tExcellent\n       Gd\tGood\n       TA\tAverage\/Typical\n       Fa\tFair\n       NA\tNo Pool","d352e00d":"This feature same as PoolQC and MiscFeature, we drop this to.","bf01086f":"I think this column should be fill with 0. \nIt seems to be directly related to our target column.","f7793699":"We fill with most frequent","2ce547ca":"**Fence**: Fence quality\n\t\t\n       GdPrv\tGood Privacy\n       MnPrv\tMinimum Privacy\n       GdWo\tGood Wood\n       MnWw\tMinimum Wood\/Wire\n       NA\tNo Fence","a802b70a":"BsmtFinType1: Rating of basement finished area\n\n       GLQ\tGood Living Quarters\n       ALQ\tAverage Living Quarters\n       BLQ\tBelow Average Living Quarters\t\n       Rec\tAverage Rec Room\n       LwQ\tLow Quality\n       Unf\tUnfinshed\n       NA\tNo Basement","86b34e6d":"Same as the three above.","e0575848":"**MiscFeature**: Miscellaneous feature not covered in other categories\n\t\t\n       Elev\tElevator\n       Gar2\t2nd Garage (if not described in garage section)\n       Othr\tOther\n       Shed\tShed (over 100 SF)\n       TenC\tTennis Court\n       NA\tNone","d400a270":"**Exterior1st**: Exterior covering on house\n\n       AsbShng\tAsbestos Shingles\n       AsphShn\tAsphalt Shingles\n       BrkComm\tBrick Common\n       BrkFace\tBrick Face\n       CBlock\tCinder Block\n       CemntBd\tCement Board\n       HdBoard\tHard Board\n       ImStucc\tImitation Stucco\n       MetalSd\tMetal Siding\n       Other\tOther\n       Plywood\tPlywood\n       PreCast\tPreCast\t\n       Stone\tStone\n       Stucco\tStucco\n       VinylSd\tVinyl Siding\n       Wd Sdng\tWood Siding\n       WdShing\tWood Shingles\n\t\n**Exterior2nd**: Exterior covering on house (if more than one material)\n\n       AsbShng\tAsbestos Shingles\n       AsphShn\tAsphalt Shingles\n       BrkComm\tBrick Common\n       BrkFace\tBrick Face\n       CBlock\tCinder Block\n       CemntBd\tCement Board\n       HdBoard\tHard Board\n       ImStucc\tImitation Stucco\n       MetalSd\tMetal Siding\n       Other\tOther\n       Plywood\tPlywood\n       PreCast\tPreCast\n       Stone\tStone\n       Stucco\tStucco\n       VinylSd\tVinyl Siding\n       Wd Sdng\tWood Siding\n       WdShing\tWood Shingles","4c15607f":"I don't think this is not help our model. We drop this column.","6f91f11c":"**TotalBsmtSF**: Total square feet of basement area","7122312c":"**GarageArea**: Size of garage in square feet","c41ea92b":"Utilities: Type of utilities available\n\t\t\n       AllPub\tAll public Utilities (E,G,W,& S)\t\n       NoSewr\tElectricity, Gas, and Water (Septic Tank)\n       NoSeWa\tElectricity and Gas Only\n       ELO\tElectricity only\t","bd80d0b9":"There is little difference between median and mean. So \u0131 think it doesn't matter. I fill with median.","7777c2df":"This column has no missing values. But 1453 value same.So that does not make sense for our model. We can drop this column.","ef929b82":"\n**BsmtHalfBath**: Basement half bathrooms","f6871377":"We drop this column. Useless info.","1d307747":"We fill with \"None\"","04c2ce34":"We fill with min value.","79a348e7":"**GarageCars**: Size of garage in car capacity","d6e4e461":"**GarageCond**: Garage condition\n\n       Ex\tExcellent\n       Gd\tGood\n       TA\tTypical\/Average\n       Fa\tFair\n       Po\tPoor\n       NA\tNo Garage","bf5005eb":"We fill with most frequent."}}