{"cell_type":{"ec04cf94":"code","713518c1":"code","fc9cea03":"code","b3b8b7ee":"code","cd8fa867":"code","7ab598c8":"code","b0a5e527":"code","581a4d51":"code","56a5d802":"code","eb1e03bf":"code","b0d9b80d":"code","14607402":"code","c27764f1":"code","d5e5e216":"code","2f5b8c72":"code","5b7e5d37":"code","74cc9fdf":"code","a408fb3a":"code","52bf3d47":"code","20b69cc0":"code","1a747975":"code","52c1c056":"code","13655e12":"code","3dbe6274":"code","a5bacceb":"code","6d2cbd4a":"code","b34655fb":"code","eab66e04":"code","108ca321":"code","1a612062":"markdown","77e1e540":"markdown","3bd77ea5":"markdown","eb94c54c":"markdown","fe13e1a0":"markdown","b48178de":"markdown","184a5403":"markdown","8ef750d7":"markdown","b7a5ccef":"markdown","38665e2f":"markdown","4214f5a9":"markdown","4d25deea":"markdown","b12fbf8b":"markdown","f689e658":"markdown","4f94525c":"markdown","02c6809f":"markdown","3e8e7996":"markdown","a628845d":"markdown","2e2b593c":"markdown","b4f4bdfe":"markdown","e9203a9f":"markdown","84c7c1f6":"markdown","5bce1b44":"markdown","44542f79":"markdown","9fd6e2f7":"markdown","03f95e66":"markdown","dc83b862":"markdown","0f949f56":"markdown","1ec2296f":"markdown"},"source":{"ec04cf94":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport warnings\nwarnings.filterwarnings(\"ignore\")\nfrom sklearn.metrics import accuracy_score\nfrom sklearn.metrics import confusion_matrix\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.svm import SVC\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.ensemble import GradientBoostingClassifier\nfrom sklearn.ensemble import AdaBoostClassifier\nimport xgboost as xgb","713518c1":"data = pd.read_csv('..\/input\/heart-attack-analysis-prediction-dataset\/heart.csv')\ndata.head()","fc9cea03":"df1 = data.copy()","b3b8b7ee":"df1.info()","cd8fa867":"df1.shape","7ab598c8":"df1.duplicated().sum()","b0a5e527":"df1[df1.duplicated()]","581a4d51":"df1.drop_duplicates(inplace=True) # dropping duplicated rows\ndf1.reset_index(drop=True, inplace=True)\ndf1.shape","56a5d802":"df1.isnull().sum() # Checking null values","eb1e03bf":"df1['exng'] = df1['exng'].map({1:'yes',0:'no'})\ndf1['cp'] = df1['cp'].map({0:'typical angina',1:'atypical angina',2:'non-anginal pain',3:'asymptomatic'})\ndf1['fbs'] = df1['fbs'].map({1:'true',0:'false'})\ndf1['restecg'] = df1['restecg'].map({0:'normal',1:'having ST-T wave abnormality',2:'showing probable or definite left ventricular hypertrophy'})\ndf1['output'] = df1['output'].map({0:'less chance of heart attack',1:'more chance of heart attack'})\ndf1.sample(5)","b0d9b80d":"plt.figure(figsize=(15,10))\nsns.heatmap(df1.corr(),annot=True,cmap='coolwarm')","14607402":"plt.figure(figsize=(20,30))\nplt.subplots_adjust(left=0.1,\n                    bottom=0.1, \n                    right=0.9, \n                    top=0.9, \n                    wspace=0.4, \n                    hspace=0.4)\n\nplt.subplot(4,2,1)\nplt.title('Prevalence of Heart attack by Sex',fontsize=15)\nsns.countplot(df1['output'], hue=df1['sex'])\n\nplt.subplot(4,2,2)\nplt.title('Prevalence of Heart attack by Chest Pain',fontsize=15)\nsns.countplot(df1['output'], hue=df1['cp'])\n\nplt.subplot(4,2,3)\nplt.title('Prevalence of Heart attack by fasting blood sugar > 120 mg\/dl',fontsize=15)\nsns.countplot(df1['output'],hue=df1['fbs'])\n\nplt.subplot(4,2,4)\nplt.title('Prevalence of Heart attack by restecg',fontsize=15)\nsns.countplot(df1['output'],hue = df1['restecg'])\n\nplt.subplot(4,2,5)\nplt.title('Prevalence of Heart attack by Exercise induced angina',fontsize=15)\nsns.countplot(df1['output'],hue=df1['exng'])\n\nplt.subplot(4,2,6)\nplt.title('Prevalence of Heart attack by slp',fontsize=15)\nsns.countplot(df1['output'],hue=df1['slp'])\n\nplt.subplot(4,2,7)\nplt.title('Prevalence of Heart attack by number of major vessels',fontsize=15)\nsns.countplot(df1['output'],hue=df1['caa'])\n\nplt.subplot(4,2,8)\nplt.title('Prevalence of Heart attack by thall',fontsize=15)\nsns.countplot(df1['output'],hue=df1['thall'])","c27764f1":"plt.figure(figsize=(20,15))\nplt.subplot(2,2,1)\nplt.title('Prevalence of Heart attack by age',fontsize=15)\nsns.histplot(x = df1['age'], hue = df1['output'])\n\nplt.subplot(2,2,2)\nplt.title('Prevalence of Heart attack by Maximum heart rate',fontsize=15)\nsns.histplot(x = df1['trtbps'], hue = df1['output'])\n\nplt.subplot(2,2,3)\nplt.title('Prevalence of Heart attack by cholestoral in mg\/dl',fontsize=15)\nsns.histplot(x = df1['chol'], hue = df1['output'])\n\nplt.subplot(2,2,4)\nplt.title('Prevalence of Heart attack by old peak',fontsize=15)\nsns.histplot(x = df1['oldpeak'],hue = df1['output'])","d5e5e216":"sns.jointplot(x = df1['chol'], y = df1['trtbps'], kind = 'hist',color = 'pink')\nsns.jointplot(x = df1['trtbps'], y = df1['thalachh'], kind = 'hex', color = 'green')\nsns.jointplot(x = df1['chol'], y = df1['thalachh'], kind = 'kde', color = 'grey')","2f5b8c72":"plt.figure(figsize = (20,20))\ng = sns.FacetGrid(df1, col=\"cp\", hue=\"output\")\ng.map(sns.scatterplot,'age','chol')\ng.set_axis_labels('age', 'cholestoral')\ng.add_legend()","5b7e5d37":"plt.figure(figsize=(20,8))\nsns.lineplot(x = df1['age'], y = df1['thall'],marker = '*', linestyle = '--', color = 'red')\n\nplt.figure(figsize = (20,5))\nsns.regplot(x=df1['age'],y=df1['oldpeak'],color='black')","74cc9fdf":"plt.figure(figsize = (20,5))\nsns.barplot(x=df1['slp'],y=df1['thalachh'],hue=df1['output'],palette = 'rainbow')\n\nplt.figure(figsize = (20,10))\nplt.xticks(fontsize=13)\nsns.boxplot(x=df1['restecg'],y=df1['age'],hue=df1['output'],palette = 'rainbow')","a408fb3a":"plt.figure(figsize = (10,10))\nsns.swarmplot(x=df1['caa'],y=df1['age'],hue=df1['output'])","52bf3d47":"plt.figure(figsize = (20,8))\nsns.violinplot(x=df1['thall'],y=df1['age'],hue=df1['output'])","20b69cc0":"df2 = data.copy()\ndf2.head()","1a747975":"df2.drop_duplicates(inplace=True)\ndf2.reset_index(drop=True, inplace=True)\ndf2.isnull().sum()","52c1c056":"df2.reset_index(drop=True,inplace=True)\ndf2.head()","13655e12":"x = df2.iloc[:, :-1].values\ny = df2.iloc[:, -1].values","3dbe6274":"# Spliting the data\nfrom sklearn.model_selection import train_test_split\nx_train,x_test,y_train,y_test = train_test_split(x,y,test_size = 0.2,random_state = 0)\nsc = StandardScaler()\nx_train = sc.fit_transform(x_train)\nx_test = sc.transform(x_test)","a5bacceb":"key = ['LogisticRegression','KNeighborsClassifier','SVC','DecisionTreeClassifier','RandomForestClassifier','GradientBoostingClassifier','AdaBoostClassifier','XGBClassifier']\nvalue = [LogisticRegression(),KNeighborsClassifier(),SVC(),DecisionTreeClassifier(),RandomForestClassifier(),GradientBoostingClassifier(),AdaBoostClassifier(),xgb.XGBClassifier()]\nmodels = dict(zip(key,value))\nprint(models)","6d2cbd4a":"predicted =[]\nfor name,algo in models.items():\n    model=algo\n    model.fit(x_train,y_train)\n    predict = model.predict(x_test)\n    acc = accuracy_score(y_test, predict)\n    predicted.append(acc)\n    print(name,acc)","b34655fb":"plt.figure(figsize = (10,5))\nsns.barplot(x = predicted, y = key)","eab66e04":"svc = SVC(kernel = 'rbf',C = 1, degree = 5, random_state = 0)\nsvc.fit(x_train,y_train)\nsvc_pred = svc.predict(x_test)\nprint(\"Accuracy:\",accuracy_score(y_test,svc_pred))\nprint(\"Confusion matrix:\\n\",confusion_matrix(y_test,svc_pred))","108ca321":"plt.figure(figsize = (10,5))\nsns.distplot(svc_pred, label = 'Predicted')\nsns.distplot(y_test, label = 'Actual')","1a612062":"**Hope you like my work. Please upvote me if you like it and leave your feedback in comments. Share this to your friends. Thanks for viewing this.**","77e1e540":"# Importing Libraries","3bd77ea5":"Now, I'm going to perform baseline modelling","eb94c54c":"# Distplot","fe13e1a0":"# Violinplot","b48178de":"# Lineplot & Regplot","184a5403":"# FacetGrid","8ef750d7":"# Prediction","b7a5ccef":"## Visualizing Best fit model","38665e2f":"# Countplot","4214f5a9":"# Jointplot","4d25deea":"## Accuracy Visualization","b12fbf8b":"# Barplot & Boxplot","f689e658":"**I'm going to take copy of original data for visualization**","4f94525c":"# Data Preprocessing","02c6809f":"# Swarmplot","3e8e7996":"## Conditions that leads to more chance of Heart Attack are:\n\n* In general, 40 to 58 aged people have more chance of heart attack.\n\n* Chest Pain - Non-anginal type\n\n* Resting Blood Pressure - range of 120 to 140\n\n* Cholesterol level - 200 to 260\n\n* Electrocardiograph - having ST-T wave normality\n\n* Maximum Heart Rate - above 150\n\n* Slope - 2\n\n* Number of major vessels - 0\n\n* Thalium Stress Test Result - 2\n\n* Old peak - between 0-0.5","a628845d":"**Now, I'm going to change column values for better understanding**","2e2b593c":"## Hyper tuning","b4f4bdfe":"## Dropping Duplicate values","e9203a9f":"It shows SVC is the best fit for this dataset because the accuracy 93%. Let's try to increase the efficiency by Hyper tuning.","84c7c1f6":"Taking copy from Original Data","5bce1b44":"The accuracy remains same.","44542f79":"# Features:\n\n1. age: Age of the patient\n\n2. sex: Sex of the patient\n\n3. cp: Chest pain type, 0 = Typical Angina, 1 = Atypical Angina, 2 = Non-anginal Pain, 3 = Asymptomatic\n\n4. trtbps: Resting blood pressure (in mm Hg)\n\n5. chol: Cholestoral in mg\/dl fetched via BMI sensor\n\n6. fbs: (fasting blood sugar > 120 mg\/dl), 1 = True, 0 = False\n\n7. restecg: Resting electrocardiographic results, 0 = Normal, 1 = ST-T wave normality, 2 = showing probable or definite left ventricular hypertrophy by Estes' criteria\n\n8. thalachh: Maximum heart rate achieved\n\n9. oldpeak: Previous peak\n\n10. slp: Slope\n\n11. caa: Number of major vessels\n\n12. thall: Thalium Stress Test result, (0-3)\n\n13. exng: Exercise induced angina, 1 = Yes, 0 = No\n\n14. output:  0 = less chance of heart attack, 1 = more chance of heart attack","9fd6e2f7":"# Correlation","03f95e66":"#### Hello all, Welcome to my kernel. I m going to perform complete EDA for more chances of Heart Attack and Prediction with 93% accuracy. Let's start !","dc83b862":"## Standardization","0f949f56":"## Machine Learning Models","1ec2296f":"# Loading the dataset (heart.csv)"}}