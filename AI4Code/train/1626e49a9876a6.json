{"cell_type":{"d3588b9f":"code","1b7acd73":"code","c760449c":"code","103facd2":"code","894bd50f":"code","ae3239d6":"code","e5ce771d":"markdown"},"source":{"d3588b9f":"import numpy as np \nimport pandas as pd \nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))","1b7acd73":"df=pd.read_excel('\/kaggle\/input\/car-sales\/CarSales.xlsx')\nmissing = df.isnull().sum()\nprint('missing data:',missing[missing > 0])\nprint('shape:', df.shape)","c760449c":"from sklearn.preprocessing import LabelEncoder\ndf = df.applymap(str) # consider all the data as strings, I am not sure that this approach is appropiate but then I can skip imputing \n\ns = (df.dtypes == 'object')\nobject_cols = list(s[s].index)\nlabel= df.copy()\nlabel_encoder = LabelEncoder()\nfor col in object_cols:\n    label[col] = label_encoder.fit_transform(df[col])   \n\nmissing = label.isnull().sum()\nprint('missing values:',missing[missing > 0])\nprint('the head:\\n',label.head())","103facd2":"import matplotlib.pyplot as plt\nfrom sklearn.model_selection import train_test_split\n\ndftrain, dftest = train_test_split(label, test_size=0.2) # randomly split df to train\/test data with 80\/20 proportion\n\n#Let's check if prices distribution is same in test and train data\nplt.figure(figsize=(10,5))\nplt.subplot(1,2,1), dftrain['Price'].hist(bins=10)\n\nplt.figure(figsize=(10,5))\nplt.subplot(1,2,2),dftest['Price'].hist(bins=10)\n","894bd50f":"from sklearn.tree import DecisionTreeRegressor\nfeatures = list(label.columns)\nfeatures.remove('Price') \ntrain_y = dftrain['Price'] \ntrain_x = dftrain[features] \ntest_x=dftest[features] \ntest_y=dftest['Price'] \nmodel = DecisionTreeRegressor(random_state=1)\nmodel.fit(train_x, train_y)\npredicted_prices = model.predict(test_x)\npredicted_prices=pd.DataFrame(predicted_prices)","ae3239d6":"#Calculate mae \nfrom sklearn.metrics import mean_absolute_error\nmae = mean_absolute_error(predicted_prices, test_y)\nprint('mean absolute error: ',mae)\nprint('mean price in df:', label['Price'].mean(), '\\nmae\/mean, %:',100*mae\/label['Price'].mean())","e5ce771d":"Price prediction with a decision tree:\n0. Import modules and find dataset path\n1. Load .xlsx into df and check missing data\n2. Convert data to strings and then convert to numerical values by labelling categorical data with label encoder\n3. Split data and compare the distribution of prices \n4. Select features, fit the model and predict prices\n5. Calculate mean absolute error, mean prices"}}