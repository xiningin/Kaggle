{"cell_type":{"74245212":"code","71da08d8":"code","8209333d":"code","78fdf642":"code","41bcb3df":"code","6306dad9":"code","b680ea7f":"code","abaf1dea":"code","30dbcce0":"code","3793cea3":"code","5fe2e283":"code","44271fa9":"code","8595a4c3":"code","241b069e":"code","9ba14ffb":"code","31976212":"code","a90b8a65":"code","eb751e70":"code","5349cdd0":"code","85ff6d50":"code","cdfed025":"code","ef389742":"code","fe970f90":"code","804ad9fa":"code","add9c7b1":"code","400f33aa":"code","163f4299":"code","1f2703ee":"code","46735245":"code","6e03eacd":"code","22f2d1e3":"code","973c6723":"markdown","259ced1a":"markdown","c4dbe8ed":"markdown","844b30bb":"markdown","50fb11bf":"markdown","03168c18":"markdown","deb30022":"markdown","3a221d32":"markdown","2b9b1719":"markdown","1293faa8":"markdown","8d354f16":"markdown","650e1897":"markdown","6e709944":"markdown","f0af5115":"markdown"},"source":{"74245212":"from IPython.display import Image\nImage('https:\/\/upload.wikimedia.org\/wikipedia\/commons\/b\/b4\/Lifo_stack.png')","71da08d8":"class Stack:\n    \n    def __init__(self):\n        self.items = []\n\n    def isEmpty(self):\n        return self.items == []\n\n    def push(self, item):\n        self.items.append(item)\n\n    def pop(self):\n        return self.items.pop()\n\n    def peek(self):\n        return self.items[-1]\n\n    def size(self):\n        return len(self.items)","8209333d":"s = Stack()                    \n# After this operation -> []\ns.isEmpty()","78fdf642":"s.push(1)                     \n# After this operation -> [1]","41bcb3df":"s.push('two')                 \n# After this operation -> [1,'two']","6306dad9":"s.peek()                      \n# After this operation -> [1,'two']","b680ea7f":"s.push(True)                  \n# After this operation -> [1,'two',True]","abaf1dea":"s.size()","30dbcce0":"s.pop()                  \n# After this operation -> [1,'two']","3793cea3":"s.pop()                  \n# After this operation -> [1]","5fe2e283":"s.size()","44271fa9":"s.pop()                    \n# After this operation -> []","8595a4c3":"s.isEmpty()","241b069e":"from IPython.display import Image\nImage(\"https:\/\/upload.wikimedia.org\/wikipedia\/commons\/thumb\/5\/52\/Data_Queue.svg\/300px-Data_Queue.svg.png\")","9ba14ffb":"class Queue:\n    def __init__(self):\n        self.items = []\n\n    def isEmpty(self):\n        return self.items == []\n\n    def enqueue(self, item):\n        self.items.insert(0,item)\n\n    def dequeue(self):\n        return self.items.pop()\n\n    def size(self):\n        return len(self.items)","31976212":"q = Queue()\n# rear->[]<-front","a90b8a65":"q.size()","eb751e70":"q.enqueue(1)\n# rear->[1]<-front","5349cdd0":"q.enqueue(2)\n# rear->[2,1]<-front","85ff6d50":"q.dequeue()\n# rear->[2]<-front","cdfed025":"q.isEmpty()","ef389742":"from IPython.display import Image\nImage(\"https:\/\/media.geeksforgeeks.org\/wp-content\/uploads\/anod.png\")","fe970f90":"class Deque:\n    def __init__(self):\n        self.items = []\n\n    def isEmpty(self):\n        return self.items == []\n\n    def addFront(self, item):\n        self.items.append(item)\n\n    def addRear(self, item):\n        self.items.insert(0,item)\n\n    def removeFront(self):\n        return self.items.pop()\n\n    def removeRear(self):\n        return self.items.pop(0)\n\n    def size(self):\n        return len(self.items)","804ad9fa":"d = Deque()\n# Rear -> [] <- Front","add9c7b1":"d.addFront('Hello')\n# Rear -> ['Hello'] <- Front","400f33aa":"d.addRear('World')\n# Rear -> ['World','Hello'] <- Front","163f4299":"d.size()","1f2703ee":"d.addFront('!!')\n# Rear -> ['World','Hello','!!'] <- Front","46735245":"d.removeFront()\n# Rear -> ['World','Hello'] <- Front","6e03eacd":"d.removeRear()\n# Rear -> ['Hello'] <- Front","22f2d1e3":"d.size()","973c6723":"# Queue Implementation","259ced1a":"# Deque Attributes and Methods\n\n* Deque() creates a new deque that is empty. It needs no parameters and returns an empty deque.\n* addFront(item) adds a new item to the front of the deque. It needs the item and returns nothing.\n* addRear(item) adds a new item to the rear of the deque. It needs the item and returns nothing.\n* removeFront() removes the front item from the deque. It needs no parameters and returns the item. The deque is modified.\n* removeRear() removes the rear item from the deque. It needs no parameters and returns the item. The deque is modified.\n* isEmpty() tests to see whether the deque is empty. It needs no parameters and returns a boolean value.\n* size() returns the number of items in the deque. It needs no parameters and returns an integer.","c4dbe8ed":"# Deque Implementation","844b30bb":"Stack, Queues, and Deques are linear data structures. They are similar to arrays, but each of these structures differs by how it adds and removes items.","50fb11bf":"Reference: [Python for Data Structures, Algorithms, and Interviews! - Udemy](https:\/\/www.udemy.com\/course\/python-for-data-structures-algorithms-and-interviews\/)","03168c18":"Note how we can both add and remove from the front and the back of the Deque. ","deb30022":"# Deque Overview\n\nA deque, also known as a double-ended queue, is an ordered collection of items similar to the queue. It has two ends, a front and a rear, and the items remain positioned in the collection. What makes a deque different is the unrestrictive nature of adding and removing items. New items can be added at either the front or the rear. Likewise, existing items can be removed from either end. In a sense, this hybrid linear structure provides all the capabilities of stacks and queues in a single data structure. \n\nIt is important to note that even though the deque can assume many of the characteristics of stacks and queues, it does not require the LIFO and FIFO orderings that are enforced by those data structures. It is up to you to make consistent use of the addition and removal operations.","3a221d32":"# Stack Implementation","2b9b1719":"# Stack Overview \nA stack is an ordered collection of items where the addition of new items and the removal of existing items always takes place at the same end. This end is commonly referred to as the \u201ctop.\u201d The end opposite the top is known as the \u201cbase.\u201d\n\nThe base of the stack is significant since items stored in the stack that are closer to the base represent those that have been in the stack the longest. The most recently added item is the one that is in position to be removed first.\n\nThis ordering principle is sometimes called ****LIFO, last-in first-out**** . It provides an ordering based on length of time in the collection. Newer items are near the top, while older items are near the base.","1293faa8":"Note how we have two terms here, **Enqueue** and **Dequeue**. The enqueue term describes when we add a new item to the rear of the queue. The dequeue term describes removing the front item from the queue.","8d354f16":"# Queues Overview\nA queue is an ordered collection of items where the addition of new items happens at one end, called the rear, back or tail and the removal of existing items occurs at the other end, commonly called the front or head. As an element enters the queue it starts at the rear and makes its way toward the front, waiting until that time when it is the next element to be removed.\n\nThe most recently added item in the queue must wait at the end of the collection. The item that has been in the collection the longest is at the front. This ordering principle is sometimes called ****FIFO, first-in first-out****. It is also known as \u201cfirst-come first-served.\u201d\n\nThe simplest example of a queue is the typical line that we all participate in from time to time. We wait in a line for a movie, we wait in the check-out line at a grocery store, and we wait in the cafeteria line. The first person in that line is also the first person to get serviced\/helped.","650e1897":"# Stack Attributes and Methods\n The stack operations are given below:\n* Stack() creates a new stack that is empty. It needs no parameters and returns an empty stack.\n* push(item) adds a new item to the top of the stack. It needs the item and returns nothing.\n* pop() removes the top item from the stack. It needs no parameters and returns the item. The stack is modified.\n* peek() returns the top item from the stack but does not remove it. It needs no parameters. The stack is not modified.\n* isEmpty() tests to see whether the stack is empty. It needs no parameters and returns a boolean value.\n* size() returns the number of items on the stack. It needs no parameters and returns an integer.","6e709944":"Stacks are fundamentally important, as they can be used to reverse the order of items. The order of insertion is the reverse of the order of removal.\n\nConsidering this reversal property, you can perhaps think of examples of stacks that occur as you use your computer. For example, every web browser has a Back button. As you navigate from web page to web page, those pages are placed on a stack (actually it is the URLs that are going on the stack). The current page that you are viewing is on the top and the first page you looked at is at the base. If you click on the Back button, you begin to move in reverse order through the pages.","f0af5115":"# Queue Attributes and Methods \nThe queue operations are given below:\n* Queue() creates a new queue that is empty. It needs no parameters and returns an empty queue.\n* enqueue(item) adds a new item to the rear of the queue. It needs the item and returns nothing.\n* dequeue() removes the front item from the queue. It needs no parameters and returns the item. The queue is modified.\n* isEmpty() tests to see whether the queue is empty. It needs no parameters and returns a boolean value.\n* size() returns the number of items in the queue. It needs no parameters and returns an integer."}}