{"cell_type":{"ceb96ef1":"code","e9b30f1a":"code","cd921801":"code","2ee45585":"code","fef2c2b5":"code","7d321428":"code","d7f87d94":"code","36935d77":"code","70319654":"code","d805975f":"code","041e6e53":"code","b4b0539d":"code","20312450":"markdown","81c5198d":"markdown","1e4cecd8":"markdown","b85b74b5":"markdown","5dc22e40":"markdown","9fb41c8a":"markdown"},"source":{"ceb96ef1":"from spacy.lang.en import English\n\nnlp = English()\ndoc = nlp(\"I have a cat\")\n\ncat_hash = nlp.vocab.strings['cat']\nprint(cat_hash)\n\ncat_string = nlp.vocab.strings[cat_hash]\nprint(cat_string)","e9b30f1a":"person_hash = nlp.vocab.strings['PERSON']\nprint(person_hash)\n\nperson_string = nlp.vocab.strings[person_hash]\nprint(person_string)","cd921801":"from spacy.lang.en import English\nfrom spacy.tokens import Doc\n\nnlp = English()\n\nwords = ['spaCy', 'is', 'cool', '!']\nspaces = [True, True, False, False]\n\ndoc = Doc(nlp.vocab, words=words, spaces=spaces)\nprint(doc.text)","2ee45585":"words = ['Go', ',', 'get', 'started', '!']\nspaces = [False, True, True, False, False]\n\ndoc = Doc(nlp.vocab, words=words, spaces=spaces)\nprint(doc.text)","fef2c2b5":"from spacy.lang.en import English\nfrom spacy.tokens import Doc, Span\n\nnlp = English()\n\nwords = ['I', 'like', 'David', 'Bowie']\nspaces = [True, True, True, False]\n\ndoc = Doc(nlp.vocab, words=words, spaces=spaces)\nprint(doc.text)\n\nspan = Span(doc, start=2, end=4, label='PERSON')\nprint(span.text, span.label_)\n\ndoc.ents = [span]\n\nprint([(ent.text, ent.label_) for ent in doc.ents])","7d321428":"import spacy\n\nnlp = spacy.load(\"en_core_web_sm\")\ndoc = nlp(\"Berlin looks like a nice city\")\n\n# Collect all proper nouns that are followed by a verb\nfor token in doc:\n    if token.pos_ == \"PROPN\":\n        if doc[token.i + 1].pos_ == \"VERB\":\n            print(\"Found proper noun before a verb: \", token.text)","d7f87d94":"!python3 -m spacy download en_core_web_md","36935d77":"import en_core_web_md\n\nnlp = en_core_web_md.load()\n\ndoc = nlp(\"Two bananas in pyjamas\")\n\nbananas_vector = doc[1].vector\nprint(bananas_vector)","70319654":"doc_1 = nlp(\"It's a warm summer day\")\ndoc_2 = nlp(\"It's sunny outside\")\n\nsimilarity = doc_1.similarity(doc_2)\nprint(similarity)","d805975f":"doc = nlp(\"TV and Books\")\ntoken_1, token_2 = doc[0], doc[2]\n\nsimilarity = token_1.similarity(token_2)\nprint(similarity)","041e6e53":"doc = nlp(\"This was a great restaurant. Afterwards, we went to a really nice bar.\")\n\nspan_1 = doc[3:5]\nspan_2 = doc[12:15]\n\nprint(span_1)\nprint(span_2)\n\nsimilarity = span_1.similarity(span_2)\nprint(similarity)","b4b0539d":"import spacy\nfrom spacy.matcher import Matcher\n\nnlp = spacy.load(\"en_core_web_sm\")\ndoc = nlp(\n    \"Twitch Prime, the perks program for Amazon Prime members offering free \"\n    \"loot, games and other benefits, is ditching one of its best features: \"\n    \"ad-free viewing. According to an email sent out to Amazon Prime members \"\n    \"today, ad-free viewing will no longer be included as a part of Twitch \"\n    \"Prime for new members, beginning on September 14. However, members with \"\n    \"existing annual subscriptions will be able to continue to enjoy ad-free \"\n    \"viewing until their subscription comes up for renewal. Those with \"\n    \"monthly subscriptions will have access to ad-free viewing until October 15.\"\n)\n\npattern_1 = [{\"LOWER\": \"amazon\"}, {\"IS_TITLE\": True, \"POS\": \"PROPN\"}]\npattern_2 = [{\"LOWER\": \"ad\"}, {\"IS_PUNCT\":True}, {\"LOWER\":\"free\"}, {\"POS\": \"NOUN\"}]\n\nmatcher = Matcher(nlp.vocab)\nmatcher.add(\"PATTERN_1\", None, pattern_1)\nmatcher.add(\"PATTERN_2\", None, pattern_2)\n\nfor match_id, start, end in matcher(doc):\n    print(doc.vocab.strings[match_id], doc[start:end].text)","20312450":"# 1. Strings to Hashes","81c5198d":"# 5. Comparing Similarities","1e4cecd8":"# 6. Debugging Patterns","b85b74b5":"# 4. Inspecting Word Vectors","5dc22e40":"# 2. Creating a Doc","9fb41c8a":"# 3. Docs, Spans, and entities from Scratch"}}