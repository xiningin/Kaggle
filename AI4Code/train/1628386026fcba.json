{"cell_type":{"f955444d":"code","a1519acc":"code","6647e19c":"code","92abf1ed":"code","f8aa9568":"code","d34ed7d9":"code","07286876":"code","8edbd06c":"code","01f9db97":"code","bb0556c5":"code","38d6da93":"markdown"},"source":{"f955444d":"import pandas as pd\nimport numpy as np\nfrom sklearn.feature_extraction.text import TfidfVectorizer\nfrom sklearn.metrics.pairwise import linear_kernel\n\nds = pd.read_csv(\"..\/input\/sample-data.csv\")\n","a1519acc":"ds.shape","6647e19c":"ds.head()\n","92abf1ed":"ds.description","f8aa9568":"import re\np = re.compile(r'<.*?>')\nds['Cleaned_description'] = [p.sub('',each) for each in ds.description]","d34ed7d9":"tf = TfidfVectorizer(analyzer='word', ngram_range=(1, 3), min_df=0, stop_words='english')\ntfidf_matrix = tf.fit_transform(ds['Cleaned_description'])\ntfidf_matrix\n","07286876":"cos_similarities = linear_kernel(tfidf_matrix, tfidf_matrix)\nprint(len(cos_similarities))\ncos_similarities","8edbd06c":"for i,j in ds.iterrows():\n    print(i,j)\n    \n    break","01f9db97":"\nresult_dict = {}\n\nfor idx, row in ds.iterrows():\n    similar_ind = cos_similarities[idx].argsort()[:-100:-1]\n    similar_items = [(cos_similarities[idx][i], ds['id'][i]) for i in similar_ind]\n    result_dict[row['id']] = similar_items[1:]","bb0556c5":"# return name of the Item\ndef item(id):\n    return ds.loc[ds['id'] == id]['description'].tolist()[0].split(' - ')[0]\n\n# Just reads the results out of the dictionary. No real logic here.\ndef recommend(item_id):\n    num = 100\n    print(\"Recommending \" + str(num) + \" products similar to \" + item(item_id) + \"...\")\n    print(\"-------\")\n    recs = result_dict[item_id][:num]\n    count = 0\n    for rec in recs:\n        if rec[0] > 0.1:\n            if count < 11:\n                print(\"Recommended: \" + item(rec[1]) + \" (score:\" + str(rec[0]) + \")\")\n                count+=1\n# Just plug in any item id here (1-500), and the number of recommendations you want (1-99)\n# You can get a list of valid item IDs by evaluating the variable 'ds', or a few are listed below\n\nrecommend(item_id= np.random.randint(1,500,1)[0])","38d6da93":"## Recommendation"}}