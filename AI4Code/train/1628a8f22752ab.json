{"cell_type":{"cfabf1ab":"code","3ff20442":"code","a0cee5e0":"code","6319fbeb":"code","5532c37a":"code","10243f83":"code","7ad788c3":"code","df181863":"code","7038775a":"code","da2562a7":"code","406d785f":"code","eeaad70f":"code","c06b09ed":"code","5c0d57b3":"code","5a3546cd":"markdown","2528533f":"markdown","72abaff3":"markdown","d068839e":"markdown","accaf534":"markdown","f04fd0c2":"markdown","ef756946":"markdown","0a6faae9":"markdown","616240f3":"markdown","710865ae":"markdown","57a5cb17":"markdown"},"source":{"cfabf1ab":"# ====================================================\n# Directory settings\n# ====================================================\nimport os\n\nOUTPUT_DIR = '.\/'\nif not os.path.exists(OUTPUT_DIR):\n    os.makedirs(OUTPUT_DIR)\n\nTEST_PATH = '..\/input\/ranzcr-clip-catheter-line-classification\/test'","3ff20442":"# ====================================================\n# CFG\n# ====================================================\nclass CFG:\n    debug=False\n    num_workers=4\n    model_name='resnet200d_320'\n    size=512\n    batch_size=128\n    seed=416\n    target_size=11\n    target_cols=['ETT - Abnormal', 'ETT - Borderline', 'ETT - Normal',\n                 'NGT - Abnormal', 'NGT - Borderline', 'NGT - Incompletely Imaged', 'NGT - Normal', \n                 'CVC - Abnormal', 'CVC - Borderline', 'CVC - Normal',\n                 'Swan Ganz Catheter Present']\n    n_fold=5\n    trn_fold=[0] # [0, 1, 2, 3, 4]","a0cee5e0":"# ====================================================\n# Library\n# ====================================================\nimport sys\nsys.path.append('..\/input\/pytorch-image-models\/pytorch-image-models-master')\n\nimport os\nimport math\nimport time\nimport random\nimport shutil\nfrom pathlib import Path\nfrom contextlib import contextmanager\nfrom collections import defaultdict, Counter\n\nimport scipy as sp\nimport numpy as np\nimport pandas as pd\n\nfrom sklearn import preprocessing\nfrom sklearn.metrics import roc_auc_score\nfrom sklearn.model_selection import StratifiedKFold, GroupKFold, KFold\n\nfrom tqdm.auto import tqdm\nfrom functools import partial\n\nimport cv2\nfrom PIL import Image\n\nfrom matplotlib import pyplot as plt\n\nimport torch\nimport torch.nn as nn\nimport torch.nn.functional as F\nfrom torch.optim import Adam, SGD\nimport torchvision.models as models\nfrom torch.nn.parameter import Parameter\nfrom torch.utils.data import DataLoader, Dataset\nfrom torch.optim.lr_scheduler import CosineAnnealingWarmRestarts, CosineAnnealingLR, ReduceLROnPlateau\n\nfrom albumentations import (\n    Compose, OneOf, Normalize, Resize, RandomResizedCrop, RandomCrop, HorizontalFlip, VerticalFlip, \n    RandomBrightness, RandomContrast, RandomBrightnessContrast, Rotate, ShiftScaleRotate, Cutout, \n    IAAAdditiveGaussianNoise, Transpose\n    )\nfrom albumentations.pytorch import ToTensorV2\nfrom albumentations import ImageOnlyTransform\n\nimport timm\n\nfrom torch.cuda.amp import autocast, GradScaler\n\nimport warnings \nwarnings.filterwarnings('ignore')\n\ndevice = torch.device('cuda' if torch.cuda.is_available() else 'cpu')","6319fbeb":"# ====================================================\n# Utils\n# ====================================================\ndef get_score(y_true, y_pred):\n    scores = []\n    for i in range(y_true.shape[1]):\n        score = roc_auc_score(y_true[:,i], y_pred[:,i])\n        scores.append(score)\n    avg_score = np.mean(scores)\n    return avg_score, scores\n\n\ndef get_result(result_df):\n    preds = result_df[[f'pred_{c}' for c in CFG.target_cols]].values\n    labels = result_df[CFG.target_cols].values\n    score, scores = get_score(labels, preds)\n    LOGGER.info(f'Score: {score:<.4f}  Scores: {np.round(scores, decimals=4)}')\n\n\n@contextmanager\ndef timer(name):\n    t0 = time.time()\n    LOGGER.info(f'[{name}] start')\n    yield\n    LOGGER.info(f'[{name}] done in {time.time() - t0:.0f} s.')\n\n\ndef init_logger(log_file=OUTPUT_DIR+'inference.log'):\n    from logging import getLogger, INFO, FileHandler,  Formatter,  StreamHandler\n    logger = getLogger(__name__)\n    logger.setLevel(INFO)\n    handler1 = StreamHandler()\n    handler1.setFormatter(Formatter(\"%(message)s\"))\n    handler2 = FileHandler(filename=log_file)\n    handler2.setFormatter(Formatter(\"%(message)s\"))\n    logger.addHandler(handler1)\n    logger.addHandler(handler2)\n    return logger\n\nLOGGER = init_logger()\n\n\ndef seed_torch(seed=42):\n    random.seed(seed)\n    os.environ['PYTHONHASHSEED'] = str(seed)\n    np.random.seed(seed)\n    torch.manual_seed(seed)\n    torch.cuda.manual_seed(seed)\n    torch.backends.cudnn.deterministic = True\n\nseed_torch(seed=CFG.seed)","5532c37a":"oof_df = pd.read_csv('..\/input\/ranzcr-exp12-step3-fold0\/oof_df.csv')\nfor fold in CFG.trn_fold:\n    fold_oof_df = oof_df[oof_df['fold']==fold].reset_index(drop=True)\n    LOGGER.info(f\"========== fold: {fold} result ==========\")\n    get_result(fold_oof_df)","10243f83":"if CFG.debug:\n    test = pd.read_csv('..\/input\/ranzcr-clip-catheter-line-classification\/sample_submission.csv', nrows=10)\nelse:\n    test = pd.read_csv('..\/input\/ranzcr-clip-catheter-line-classification\/sample_submission.csv')\n\nprint(test.shape)\ntest.head()","7ad788c3":"# ====================================================\n# Dataset\n# ====================================================\nclass TestDataset(Dataset):\n    def __init__(self, df, transform=None):\n        self.df = df\n        self.file_names = df['StudyInstanceUID'].values\n        self.transform = transform\n        \n    def __len__(self):\n        return len(self.df)\n\n    def __getitem__(self, idx):\n        file_name = self.file_names[idx]\n        file_path = f'{TEST_PATH}\/{file_name}.jpg'\n        image = cv2.imread(file_path)\n        image = cv2.cvtColor(image, cv2.COLOR_BGR2RGB)\n        if self.transform:\n            augmented = self.transform(image=image)\n            image = augmented['image']\n        return image","df181863":"# ====================================================\n# Transforms\n# ====================================================\ndef get_transforms(*, data):\n    \n    if data == 'train':\n        return Compose([\n            #Resize(CFG.size, CFG.size),\n            RandomResizedCrop(CFG.size, CFG.size, scale=(0.85, 1.0)),\n            HorizontalFlip(p=0.5),\n            RandomBrightnessContrast(p=0.2, brightness_limit=(-0.2, 0.2), contrast_limit=(-0.2, 0.2)),\n            HueSaturationValue(p=0.2, hue_shift_limit=0.2, sat_shift_limit=0.2, val_shift_limit=0.2),\n            ShiftScaleRotate(p=0.2, shift_limit=0.0625, scale_limit=0.2, rotate_limit=20),\n            CoarseDropout(p=0.2),\n            Cutout(p=0.2, max_h_size=16, max_w_size=16, fill_value=(0., 0., 0.), num_holes=16),\n            Normalize(\n                mean=[0.485, 0.456, 0.406],\n                std=[0.229, 0.224, 0.225],\n            ),\n            ToTensorV2(),\n        ])\n\n    elif data == 'valid':\n        return Compose([\n            Resize(CFG.size, CFG.size),\n            Normalize(\n                mean=[0.485, 0.456, 0.406],\n                std=[0.229, 0.224, 0.225],\n            ),\n            ToTensorV2(),\n        ])","7038775a":"train_dataset = TestDataset(test, transform=get_transforms(data='valid'))\n\nfor i in range(1):\n    image = train_dataset[i]\n    plt.imshow(image[0])\n    plt.show()\n    plt.imshow(image[0].flip(-1))\n    plt.show()","da2562a7":"# ====================================================\n# MODEL\n# ====================================================\nclass CustomResNet200D(nn.Module):\n    def __init__(self, model_name='resnet200d_320', pretrained=False):\n        super().__init__()\n        self.model = timm.create_model(model_name, pretrained=False)\n        if pretrained:\n            pretrained_path = '..\/input\/resnet200d-pretrained-weight\/resnet200d_ra2-bdba9bf9.pth'\n            self.model.load_state_dict(torch.load(pretrained_path))\n            print(f'load {model_name} pretrained model')\n        n_features = self.model.fc.in_features\n        self.model.global_pool = nn.Identity()\n        self.model.fc = nn.Identity()\n        self.pooling = nn.AdaptiveAvgPool2d(1)\n        self.fc = nn.Linear(n_features, CFG.target_size)\n\n    def forward(self, x):\n        bs = x.size(0)\n        features = self.model(x)\n        pooled_features = self.pooling(features).view(bs, -1)\n        output = self.fc(pooled_features)\n        return output","406d785f":"# ====================================================\n# Helper functions\n# ====================================================\ndef inference(models, test_loader, device):\n    tk0 = tqdm(enumerate(test_loader), total=len(test_loader))\n    probs = []\n    for i, (images) in tk0:\n        images = images.to(device)\n        avg_preds = []\n        for model in models:\n            with torch.no_grad():\n                y_preds1 = model(images)\n                y_preds2 = model(images.flip(-1))\n            y_preds = (y_preds1.sigmoid().to('cpu').numpy() + y_preds2.sigmoid().to('cpu').numpy()) \/ 2\n            avg_preds.append(y_preds)\n        avg_preds = np.mean(avg_preds, axis=0)\n        probs.append(avg_preds)\n    probs = np.concatenate(probs)\n    return probs","eeaad70f":"%%time\n\nmodel = CustomResNet200D(CFG.model_name, pretrained=False)\nmodel_path = '..\/input\/ranzcr-exp12-step3-fold0\/resnet200d_320_fold0_best_loss.pth'\nmodel.load_state_dict(torch.load(model_path)['model'])\nmodel.eval()\n\nmodels = [model.to(device)]","c06b09ed":"test_dataset = TestDataset(test, transform=get_transforms(data='valid'))\ntest_loader = DataLoader(test_dataset, batch_size=CFG.batch_size, shuffle=False, \n                         num_workers=CFG.num_workers, pin_memory=True)\npredictions = inference(models, test_loader, device)","5c0d57b3":"# submission\ntest[CFG.target_cols] = predictions\ntest[['StudyInstanceUID'] + CFG.target_cols].to_csv(OUTPUT_DIR+'submission.csv', index=False)\ntest.head()","5a3546cd":"# MODEL","2528533f":"# Transforms","72abaff3":"# Data Loading","d068839e":"# inference","accaf534":"# Helper functions","f04fd0c2":"# Dataset","ef756946":"# Directory settings","0a6faae9":"# About this notebook\nI share an example how to use annotated images to improve score.  \nIf this notebook is helpful, feel free to upvote :)\n## Training strategy\n- [1st-stage training](https:\/\/www.kaggle.com\/yasufuminakama\/ranzcr-resnet200d-3-stage-training-step1)\n    - teacher model training for annotated image\n        - data: annotated data\n        - pretrained weight: imagenet weight\n        - `BCEWithLogitsLoss(y_preds, labels)`\n        - `y_preds: teacher model predictions for annotated image`\n- [2nd-stage training](https:\/\/www.kaggle.com\/yasufuminakama\/ranzcr-resnet200d-3-stage-training-step2)\n    - student model training with teacher model features\n        - data: annotated data\n        - student model pretrained weight: imagenet weight\n        - teacher model pretrained weight: 1st-stage weight\n        - `BCEWithLogitsLoss(y_preds, labels) + w * MSELoss(student_features, teacher_features)`\n        - `y_preds: student model predictions for normal image`\n        - `student_features: student model features for normal image`\n        - `teacher_features: teacher model features for annotated image`\n- [3rd-stage training](https:\/\/www.kaggle.com\/yasufuminakama\/ranzcr-resnet200d-3-stage-training-step3)\n    - model training\n        - data: all data\n        - pretrained weight: 2nd-stage weight\n        - `BCEWithLogitsLoss(y_preds, labels)`\n        - `y_preds: student model predictions for normal image`\n- [inference notebook](https:\/\/www.kaggle.com\/yasufuminakama\/ranzcr-resnet200d-3-stage-training-sub)\n    - I use private weight in this notebook","616240f3":"# Library","710865ae":"# Utils","57a5cb17":"# CFG"}}