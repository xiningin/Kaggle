{"cell_type":{"cd0ced0b":"code","d3bd043a":"code","1a9e93b6":"code","b595053a":"code","915a5af8":"code","6e4f1894":"code","4c02bf34":"code","2a9da8f1":"code","810023b6":"code","1562f8f9":"code","c87544d9":"code","8dbea443":"code","101cbe25":"code","5e38c341":"code","452fcf8e":"code","2c2e1e42":"code","6d28b269":"code","4cdb82b9":"code","4f6e0275":"code","7014f9d8":"code","12701564":"code","2474c9a2":"code","17ee6887":"code","1c739619":"code","06ee7d63":"markdown"},"source":{"cd0ced0b":"import os\nimport numpy as np\nimport pandas as pd\nimport random\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport category_encoders as ce\nfrom contextlib import contextmanager\nfrom time import time\nfrom tqdm import tqdm\nimport lightgbm as lgbm\n\nfrom sklearn.metrics import mean_squared_error\nfrom sklearn.model_selection import KFold\nfrom sklearn.metrics import classification_report, log_loss, accuracy_score","d3bd043a":"data0 = pd.read_csv(\"..\/input\/alcohol-consumption\/gapminder_alcohol.csv\")\ndata0[0:5]","1a9e93b6":"data0.columns","b595053a":"data0.info()","915a5af8":"data1=data0.dropna(axis=0, how='any')","6e4f1894":"n=len(data1)\nprint(n)","4c02bf34":"list_cols = ['country']\nce_ohe = ce.OrdinalEncoder(cols=list_cols,handle_unknown='impute')\ndata2 = ce_ohe.fit_transform(data1)\ndata2[0:5].T","2a9da8f1":"N=[]\nfor i in range(n):\n    N+=[i]\nrandom.shuffle(N)","810023b6":"data2.info()","1562f8f9":"datay=data2['suicideper100th']\ndata3=data2.drop(['suicideper100th'],axis=1)\ndata3[0:5]","c87544d9":"train=np.array(data3)\ny=np.array(datay)","8dbea443":"df_columns=['country', 'alcconsumption', 'incomeperperson', \n           'employrate', 'urbanrate']","101cbe25":"train_df=pd.DataFrame(train)\ntrain_df.columns=df_columns","5e38c341":"def create_numeric_feature(input_df):\n    use_columns = df_columns\n    return input_df[use_columns].copy()","452fcf8e":"create_numeric_feature(train_df)[0:5]","2c2e1e42":"from contextlib import contextmanager\nfrom time import time\n\nclass Timer:\n    def __init__(self, logger=None, format_str='{:.3f}[s]', prefix=None, suffix=None, sep=' '):\n\n        if prefix: format_str = str(prefix) + sep + format_str\n        if suffix: format_str = format_str + sep + str(suffix)\n        self.format_str = format_str\n        self.logger = logger\n        self.start = None\n        self.end = None\n\n    @property\n    def duration(self):\n        if self.end is None:\n            return 0\n        return self.end - self.start\n\n    def __enter__(self):\n        self.start = time()\n\n    def __exit__(self, exc_type, exc_val, exc_tb):\n        self.end = time()\n        out_str = self.format_str.format(self.duration)\n        if self.logger:\n            self.logger.info(out_str)\n        else:\n            print(out_str)","6d28b269":"from tqdm import tqdm\n\ndef to_feature(input_df):\n\n    processors = [\n        create_numeric_feature,\n    ]\n    \n    out_df = pd.DataFrame()\n    \n    for func in tqdm(processors, total=len(processors)):\n        with Timer(prefix='create' + func.__name__ + ' '):\n            _df = func(input_df)\n\n        assert len(_df) == len(input_df), func.__name__\n        out_df = pd.concat([out_df, _df], axis=1)\n        \n    return out_df","4cdb82b9":"train_feat_df = to_feature(train_df)","4f6e0275":"train_feat_df[0:5]","7014f9d8":"import lightgbm as lgbm\nfrom sklearn.metrics import mean_squared_error\n\ndef fit_lgbm(X, y, cv, \n             params: dict=None, \n             verbose: int=50):\n\n    if params is None:\n        params = {}\n\n    models = []\n    oof_pred = np.zeros_like(y, dtype=np.float)\n\n    for i, (idx_train, idx_valid) in enumerate(cv): \n        x_train, y_train = X[idx_train], y[idx_train]\n        x_valid, y_valid = X[idx_valid], y[idx_valid]\n\n        clf = lgbm.LGBMRegressor(**params)\n        \n        with Timer(prefix='fit fold={} '.format(i)):\n            clf.fit(x_train, y_train, \n                    eval_set=[(x_valid, y_valid)],  \n                    early_stopping_rounds=100,\n                    verbose=verbose)\n\n        pred_i = clf.predict(x_valid)\n        oof_pred[idx_valid] = pred_i\n        models.append(clf)\n        print(f'Fold {i} RMSLE: {mean_squared_error(y_valid, pred_i) ** .5:.4f}')\n        print()\n\n    score = mean_squared_error(y, oof_pred) ** .5\n    print('-' * 50)\n    print('FINISHED | Whole RMSLE: {:.4f}'.format(score))\n    return oof_pred, models","12701564":"params = {\n    'objective': 'rmse', \n    'learning_rate': .1,\n    'reg_lambda': 1.,\n    'reg_alpha': .1,\n    'max_depth': 5, \n    'n_estimators': 10000, \n    'colsample_bytree': .5, \n    'min_child_samples': 10,\n    'subsample_freq': 3,\n    'subsample': .9,\n    'importance_type': 'gain', \n    'random_state': 71,\n}","2474c9a2":"from sklearn.model_selection import KFold\n\nfold = KFold(n_splits=5, shuffle=True, random_state=71)\ncv = list(fold.split(train_feat_df, y))\noof, models = fit_lgbm(train_feat_df.values, y, cv, params=params, verbose=500)","17ee6887":"fig,ax = plt.subplots(figsize=(8,8))\nax.set_xlabel('oof',fontsize=20)\nax.set_ylabel('train_y',fontsize=20)\nax.scatter(oof,y)","1c739619":"def visualize_importance(models, feat_train_df):\n\n    feature_importance_df = pd.DataFrame()\n    for i, model in enumerate(models):\n        _df = pd.DataFrame()\n        _df['feature_importance'] = model.feature_importances_\n        _df['column'] = feat_train_df.columns\n        _df['fold'] = i + 1\n        feature_importance_df = pd.concat([feature_importance_df, _df], \n                                          axis=0, ignore_index=True)\n\n    order = feature_importance_df.groupby('column')\\\n        .sum()[['feature_importance']]\\\n        .sort_values('feature_importance', ascending=False).index[:50]\n\n    fig, ax = plt.subplots(figsize=(8, max(6, len(order) * .25)))\n    sns.boxenplot(data=feature_importance_df, \n                  x='feature_importance', \n                  y='column', \n                  order=order, \n                  ax=ax, \n                  palette='viridis', \n                  orient='h')\n    ax.tick_params(axis='x', rotation=0)\n    ax.set_title('Importance')\n    ax.grid()\n    fig.tight_layout()\n    return fig, ax\n\nfig, ax = visualize_importance(models, train_feat_df)","06ee7d63":"Alcohol consumption was judged as the most important factor."}}