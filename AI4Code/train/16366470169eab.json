{"cell_type":{"81c68a88":"code","f72f253f":"code","2ef6670c":"code","1667c481":"code","5d750bc8":"code","0c3ac56e":"code","37fecaff":"code","3da319f7":"code","4c7a31b1":"code","36bf7da5":"code","4b5bc038":"code","21b026c8":"code","c6011d58":"code","7eb1869c":"code","3ff4de9c":"code","9c060730":"code","936b564e":"code","77cedd9e":"code","197c6ada":"code","3d48cccf":"code","dbfc27e3":"code","1461d140":"code","ee49b825":"code","23871049":"code","38ee2411":"code","3ffdc9dd":"code","3a9b1888":"code","20e7974a":"code","e36099cf":"code","75eece1d":"code","f29746ea":"code","16389606":"markdown"},"source":{"81c68a88":"import cv2\nimport numpy as np\nimport pandas as pd\n\nimport matplotlib.pyplot as plt\n%matplotlib inline\n\nimport os\nimport random\nimport gc","f72f253f":"train_dir_duck='..\/input\/duckietown\/duck'\ntrain_dir_road='..\/input\/duckietown\/road'\ntrain_dir_two='..\/input\/duckietown\/two'\ntrain_duck =['..\/input\/duckietown\/duck\/{}'.format(i) for i in os.listdir(train_dir_duck) if 'duck' in i]\ntrain_two =['..\/input\/duckietown\/two\/{}'.format(i) for i in os.listdir(train_dir_two) if 'two' in i]\ntrain_road =['..\/input\/duckietown\/road\/{}'.format(i) for i in os.listdir(train_dir_road) if 'road' in i]\n\nrandom.shuffle(train_duck)","2ef6670c":"print(len(train_road),\nlen(train_duck),len(train_two))","1667c481":"train_imgs = train_duck[:1400] + train_road[:2400] + train_two[:950]\ntest_imgs = train_duck[1400:1460] + train_road[2400:2524]+ train_two[950:987]\n\nrandom.shuffle(train_imgs)","5d750bc8":"import matplotlib.image as mpimg\nfor ima in train_imgs[0:3]:\n    img=mpimg.imread(ima)\n    imgplot = plt.imshow(img)\n    plt.show()","0c3ac56e":"nrows= 150\nncolumns =150\nchannels = 3","37fecaff":"def read_and_process_image(list_of_images):\n    X=[]\n    y=[]\n    \n    for image in list_of_images:\n        try:\n            X.append(cv2.resize(cv2.imread(image,cv2.IMREAD_COLOR),(nrows,ncolumns),interpolation=cv2.INTER_CUBIC))\n        \n            if 'duck' in image[16:] or 'two' in image[16:]:\n                y.append(1)\n            elif 'road' in image[16:]:\n                y.append(0)\n        except Exception as e:\n            print(str(e))\n            \n    return X, y","3da319f7":"X, y = read_and_process_image(train_imgs)","4c7a31b1":"np.unique(y,return_counts=True)","36bf7da5":"plt.figure(figsize=(20,10))\ncolumns = 5\nfor i in range (columns):\n    plt.subplot(5\/columns+1,columns,i+1)\n    plt.imshow(X[i])","4b5bc038":"import seaborn as sns\ndel train_imgs\ngc.collect()\n\nX=np.array(X)\ny=np.array(y)\n\nsns.countplot(y)\nplt.title('labers for road and ducks')","21b026c8":"print('shape of train images is', X.shape)\nprint('shape of labels is',y.shape)","c6011d58":"from sklearn.model_selection import train_test_split\nX_train, X_val, y_train,y_val = train_test_split(X,y, test_size=0.20,random_state=2)\n\nprint(\"Shape of train images is\", X_train.shape)\nprint(\"Shape of validation images is\", X_val.shape)\nprint(\"Shape of labels is\",y_train.shape)\nprint(\"Shape of labels is\", y_val.shape)","7eb1869c":"del X\ndel y\ngc.collect()\n\nntrain= len(X_train)\nnval=len(X_val)\n\nbatch_size=32","3ff4de9c":"#from keras.applications import InceptionResNetV2\n#conv_base = InceptionResNetV2(weights='imagenet', include_top=False, input_shape=(150,150,3))\n#conv_base.summary()","9c060730":"from keras import layers\nfrom keras import models\nfrom keras import optimizers\nfrom keras.preprocessing.image import ImageDataGenerator\nfrom keras.preprocessing.image import img_to_array, load_img","936b564e":"#model=models.Sequential()\n#model.add(conv_base)\n#model.add(layers.Flatten())\n#model.add(layers.Dense(256,activation='relu'))\n#model.add(layers.Dense(1,activation='sigmoid'))\n#model.summary()","77cedd9e":"#print('Number of trainable weights before freezing the conv base:', len(model.trainable_weights))\n#conv_base.trainable=False\n#print('Number of trainable weights after freezing the conv base:', len(model.trainable_weights))","197c6ada":"model = models.Sequential()\nmodel.add(layers.Conv2D(32,(3,3),activation='relu',input_shape=(150,150,3)))\nmodel.add(layers.MaxPooling2D((2,2)))\nmodel.add(layers.Conv2D(64,(3,3),activation='relu'))\nmodel.add(layers.MaxPooling2D((2,2)))\nmodel.add(layers.Conv2D(128,(3,3),activation='relu'))\nmodel.add(layers.MaxPooling2D((2,2)))\nmodel.add(layers.Conv2D(128,(3,3),activation='relu'))\nmodel.add(layers.MaxPooling2D((2,2)))\nmodel.add(layers.Flatten())\nmodel.add(layers.Dropout(0.5))\nmodel.add(layers.Dense(512, activation='relu'))\nmodel.add(layers.Dense(1,activation='sigmoid'))","3d48cccf":"model.summary()","dbfc27e3":"model.compile(loss='binary_crossentropy',optimizer=optimizers.RMSprop(lr=2e-4),metrics=['acc'])","1461d140":"train_datagen = ImageDataGenerator(rescale=1.\/255,rotation_range=40,width_shift_range=0.2,height_shift_range=0.2,shear_range=0.2,zoom_range=0.2,horizontal_flip=True,fill_mode='nearest')\nval_datagen=ImageDataGenerator(rescale=1.\/255)","ee49b825":"train_generator=train_datagen.flow(X_train,y_train,batch_size=batch_size)\nval_generator=val_datagen.flow(X_val,y_val,batch_size=batch_size)","23871049":"history=model.fit_generator(train_generator,steps_per_epoch=ntrain\/\/batch_size,epochs=90,validation_data=val_generator,validation_steps=nval\/\/batch_size)","38ee2411":"model.save_weights('model_weights.h5')\nmodel.save('model_keras.h5')","3ffdc9dd":"acc=history.history['acc']\nval_acc=history.history['val_acc']\nloss=history.history['loss']\nval_loss=history.history['val_loss']\n\nepochs=range(1,len(acc)+1)\n\nplt.plot(epochs,acc,'b',label='Training accuaricy')\nplt.plot(epochs, val_acc,'r',label='Validation accuaricy')\nplt.title('Training and Validation accuaricy')\nplt.legend()\n\nplt.figure()\n\nplt.plot(epochs,loss,'b', label='Training loss')\nplt.plot(epochs, val_loss,'r',label='Validation accuaricy')\nplt.title('Training and Validation lost')\nplt.legend()\n\nplt.show()","3a9b1888":"random.shuffle(test_imgs)\nX_test, y_test = read_and_process_image(test_imgs[:10])\nx = np.array(X_test)\ntest_datagen = ImageDataGenerator(rescale=1.\/255)","20e7974a":"i=0\ntext_labels = []\nplt.figure(figsize=(30,20))\nfor batch in test_datagen.flow(x,batch_size=1):\n    pred=model.predict(batch)\n    if pred>0.9:\n        text_labels.append('duck')\n    else:\n        text_labels.append('road')\n    plt.subplot(5\/columns+1,columns, i+1)\n    plt.title('This is a '+text_labels[i])\n    imgplot=plt.imshow(batch[0])\n    i+=1\n    if i%10 ==0:\n        break\nplt.show()","e36099cf":"dir_t='..\/input\/testok\/twosmall\/small'\ntest_two =['..\/input\/testok\/twosmall\/small\/{}'.format(i) for i in os.listdir(dir_t) if 'two' in i]\n\nrandom.shuffle(test_two)","75eece1d":"X_test, y_test = read_and_process_image(test_two[:5])\nx = np.array(X_test)\ntest_datagen = ImageDataGenerator(rescale=1.\/255)","f29746ea":"i=0\ntext_labels = []\nplt.figure(figsize=(30,20))\nfor batch in test_datagen.flow(x,batch_size=1):\n    pred=model.predict(batch)\n    if pred>0.5:\n        text_labels.append('duck found!')\n    else:\n        text_labels.append('no duck ')\n    plt.subplot(5\/columns+1,columns, i+1)\n    plt.title(''+text_labels[i])\n    imgplot=plt.imshow(batch[0])\n    i+=1\n    if i%10 ==0:\n        break\nplt.show()","16389606":"# DUCKIE TOWN DUCK OBJECT DETECTION"}}