{"cell_type":{"3429285f":"code","c5350a6f":"code","e65b4d3b":"code","a2006615":"code","c2fb7d14":"code","c8584e21":"code","9a624af4":"code","214ebd36":"code","240aecc0":"code","32e7e31f":"code","8267f726":"code","b4e17c4d":"code","ec6047d1":"code","51aba157":"code","106f599e":"code","18fd1bd9":"code","8a741d50":"code","a559988f":"code","ac79ae3e":"code","6b116f92":"code","ab2025e9":"code","13e10dc0":"markdown","03636f1e":"markdown","fe053097":"markdown","7c46e449":"markdown","c0117908":"markdown","f3f1b22e":"markdown","458d0992":"markdown","ae2e497f":"markdown","ce012da4":"markdown","ebe4782c":"markdown","9f8be553":"markdown","dc48b2d8":"markdown","24832d78":"markdown","50389d60":"markdown","313a6df7":"markdown","e4dc3715":"markdown","a9ed6352":"markdown","518a7f22":"markdown","36e860c4":"markdown","d5fe0d6f":"markdown"},"source":{"3429285f":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sb\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import accuracy_score\nfrom sklearn.preprocessing import LabelEncoder,StandardScaler\nfrom sklearn.metrics import classification_report, confusion_matrix\n\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.neural_network import MLPClassifier\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","c5350a6f":"def printResult(y_Test,y_pred_res):\n    print(np.concatenate((y_Test.reshape(len(y_Test),1),y_pred_res.reshape(len(y_pred_res),1)),1))\n\ndef printAccuracy(y_Test,y_pred_res):\n    accuracy_lrc_model = accuracy_score(y_Test,y_pred_res)\n    print(f\"Accuracy Score of Model: {accuracy_lrc_model}\")\n\ndef printReport(y_test,y_pred):\n    print(confusion_matrix(y_test,y_pred))\n    print(classification_report(y_test,y_pred))","e65b4d3b":"df = pd.read_csv('\/kaggle\/input\/iris\/Iris.csv')","a2006615":"df.head()","c2fb7d14":"df.tail()","c8584e21":"df.describe()","9a624af4":"df.info()","214ebd36":"df.isna().count()","240aecc0":"corr = df.drop([\"Id\"],axis=1).corr()\ncorr","32e7e31f":"sb.heatmap(corr, cmap=\"Reds\")\nplt.show()","8267f726":"df_median = df.groupby(by=\"Species\").median().reset_index()\ndf_median = df_median.drop(['Id'], axis=1)\ndf_median","b4e17c4d":"df['Species'].value_counts()","ec6047d1":"df_median.plot.bar(x='Species');","51aba157":"sb.set()\nsb.pairplot(df[['SepalLengthCm', 'SepalWidthCm', 'PetalLengthCm', 'PetalWidthCm', 'Species']],\n             hue=\"Species\", diag_kind=\"kde\");","106f599e":"le = LabelEncoder()\n_df = df.copy()\n_df[\"Species\"] = le.fit_transform(df[\"Species\"])\n_df = _df.drop([\"Id\"],axis=1)\n_df.sample(5)","18fd1bd9":"X = _df.iloc[:, 3:5]\ny = _df.iloc[:, -1:]\nprint(X)\nprint(y.shape)\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.33)\nprint('-------------------------------------------X Train---------------------------------')\nprint(X_train)\nprint('--------------------------X Test--------------------------')\nprint(X_test)\nprint('-------------------------------------------Y Train---------------------------------')\nprint(y_train)\nprint('--------------------------Y Test--------------------------')\nprint(y_test)","8a741d50":"scaler = StandardScaler()\nX_train = scaler.fit_transform(X_train)\nX_test = scaler.fit_transform(X_test)\nprint('-------------------------------------------X Train---------------------------------')\nprint(X_train)\nprint('--------------------------X Test--------------------------')\nprint(X_test)","a559988f":"lr_classifier = LogisticRegression()\nlr_classifier.fit(X_train,y_train);\ny_pred_lrc = lr_classifier.predict(X_test)\nprint(y_pred_lrc)\n#printResult(y_test.to_numpy(),y_pred_lrc)\nprintAccuracy(y_test,y_pred_lrc)\nprintReport(y_test,y_pred_lrc)","ac79ae3e":"classifier = DecisionTreeClassifier(criterion='entropy',random_state=0)\nclassifier.fit(X_train, y_train)\ny_pred = classifier.predict(X_test)\nprint(y_pred)\n#printResult(y_test.to_numpy(),y_pred)\nprintAccuracy(y_test,y_pred)\nprintReport(y_test,y_pred)","6b116f92":"mlp = MLPClassifier(hidden_layer_sizes=(5), max_iter=500)\nmlp.fit(X_train, y_train)\ny_pred = mlp.predict(X_test)\nprint(y_pred)\n#printResult(y_test.to_numpy(),y_pred)\nprintAccuracy(y_test,y_pred)\nprintReport(y_test,y_pred)","ab2025e9":"mlp = MLPClassifier(hidden_layer_sizes=(2,2), max_iter=500)\nmlp.fit(X_train, y_train)\ny_pred = mlp.predict(X_test)\nprint(y_pred)\n#printResult(y_test.to_numpy(),y_pred)\nprintAccuracy(y_test,y_pred)\nprintReport(y_test,y_pred)","13e10dc0":"Info of the data ","03636f1e":"Correlation of the data","fe053097":"Median of the data","7c46e449":"**Neural Network**\n\n**contain 1 hidden layer (neurons < 5)**","c0117908":"**Transform the data**","f3f1b22e":"**Encode the data**","458d0992":"Bar plot of the data w.r.t Target","ae2e497f":"**Split Data into test and train**","ce012da4":"> **Logistic Regression**","ebe4782c":"> **Decision Tree Classifier**","9f8be553":"Custom methods","dc48b2d8":"print head of the data","24832d78":"Heatmap of the data","50389d60":"print tail of the data","313a6df7":"Target value count in data.","e4dc3715":"pair plot of data","a9ed6352":"Null data count","518a7f22":"**contain 2 hidden layers (2 neurons in each)**","36e860c4":"**Load Data**","d5fe0d6f":"Description of the data"}}