{"cell_type":{"7e6b1f82":"code","fe7d6f52":"code","e4743942":"code","b2be7d68":"code","179e5c46":"code","62e499a8":"code","dfb20edd":"code","bf080564":"code","49da058a":"code","8f6e37a3":"code","4871b54e":"code","5f3e379b":"code","fe1d2d01":"code","32823a61":"code","1f2adac6":"code","b96b6250":"code","0318b24e":"code","b21a1cdd":"code","c50b4f00":"code","3bce8e55":"code","0d86ac39":"code","e36a240f":"code","f6ea968f":"code","3179046a":"code","51a209d5":"code","a03533b8":"code","28e62731":"code","4528be81":"code","d24df385":"code","3a8ae19b":"code","4684972b":"code","986b534e":"code","d3470244":"code","f9aa5bf1":"code","3baf0db3":"code","b2812aa5":"code","4f6b5223":"code","ce66004a":"code","7ebd0580":"code","3df92ce5":"code","0d4433dc":"code","221bb0b1":"code","0a089ad5":"code","003b0f43":"code","61301c6c":"code","286a69d3":"code","50d5f54b":"code","f62471d5":"code","7a3d85f9":"code","d7e2329e":"code","4d7e6440":"code","96b08e1d":"code","81807200":"code","21130618":"code","bde21479":"code","a52e61f4":"code","cf0e924d":"code","89e4c0d8":"code","5497de60":"code","ed3db171":"code","683c40c0":"code","bfaab756":"code","a467c1ed":"code","4d2a050e":"code","37107a99":"code","e5d6e568":"code","279d6512":"code","972b66f6":"code","27edad8e":"code","403b8e5c":"code","ef3df313":"code","58aa34c5":"code","dea1c00b":"code","c82ab274":"code","62d11951":"code","5497c2ef":"code","807e6ffe":"code","5b38a439":"code","0df5b214":"code","a5b9e1f8":"code","346b12e8":"code","560c8957":"code","7d4bad84":"code","ed5e53cb":"code","e49176d9":"code","8b52dd7e":"code","183a377a":"code","0de8ced4":"code","77279cbb":"code","3c5cd6cb":"code","38666566":"markdown","4d7267dd":"markdown","3601475f":"markdown","278cd7ad":"markdown","d6eac8ad":"markdown","b6fa2e39":"markdown","40c45f47":"markdown","c7f1b5db":"markdown","56bbcfd2":"markdown","0372e2ec":"markdown","efaf1c0f":"markdown","9b597c10":"markdown","d1e41127":"markdown","bd59cd60":"markdown","4c91bf64":"markdown","e2fda4e6":"markdown","27e397b8":"markdown","19fa526b":"markdown","ab75ff8a":"markdown","7242af33":"markdown","f04d5241":"markdown","4f90fcba":"markdown","570fd5d6":"markdown","be46f1b6":"markdown","525d60a8":"markdown","4676952d":"markdown"},"source":{"7e6b1f82":"#GENERAL\nimport pandas as pd\nimport numpy as np\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nimport random\n#PATH PROCESS\nimport os\nimport os.path\nfrom pathlib import Path\nimport glob\n#IMAGE PROCESS\nfrom PIL import Image\nfrom keras.preprocessing import image\nfrom tensorflow.keras.preprocessing.image import ImageDataGenerator\nimport cv2\nfrom keras.applications.vgg16 import preprocess_input, decode_predictions\nfrom keras.preprocessing import image\nimport skimage\nfrom skimage.feature import hessian_matrix, hessian_matrix_eigvals\nfrom scipy.ndimage.filters import convolve\nfrom skimage import data, io, filters\n#SCALER & TRANSFORMATION\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.preprocessing import MinMaxScaler\nfrom keras.utils.np_utils import to_categorical\nfrom sklearn.model_selection import train_test_split\nfrom keras import regularizers\nfrom sklearn.preprocessing import LabelEncoder\nfrom keras.utils import to_categorical\n#ACCURACY CONTROL\nfrom sklearn.metrics import confusion_matrix, accuracy_score, classification_report, roc_auc_score, roc_curve\nfrom sklearn.model_selection import GridSearchCV, cross_val_score\nfrom sklearn.metrics import mean_squared_error, r2_score\n#OPTIMIZER\nfrom keras.optimizers import RMSprop,Adam,Optimizer,Optimizer, SGD\n#MODEL LAYERS\nfrom tensorflow.keras.models import Sequential\nfrom keras.layers import Dense, Dropout, Flatten, Conv2D, MaxPool2D, BatchNormalization,MaxPooling2D,BatchNormalization,\\\n                        Permute, TimeDistributed, Bidirectional,GRU, SimpleRNN, LSTM, GlobalAveragePooling2D, SeparableConv2D,\\\nZeroPadding2D, Convolution2D, ZeroPadding2D,AveragePooling2D\nfrom keras import models\nfrom keras import layers\nimport tensorflow as tf\nfrom keras.applications import VGG16,VGG19,inception_v3\nfrom keras import backend as K\nfrom keras.utils import plot_model\nfrom keras.models import load_model\nfrom keras.regularizers import l1,l2,L1L2\nfrom tensorflow.keras import regularizers\n#SKLEARN CLASSIFIER\nfrom xgboost import XGBClassifier, XGBRegressor\nfrom lightgbm import LGBMClassifier, LGBMRegressor\nfrom catboost import CatBoostClassifier, CatBoostRegressor\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.naive_bayes import GaussianNB\nfrom sklearn.ensemble import RandomForestClassifier, RandomForestRegressor\nfrom sklearn.ensemble import GradientBoostingClassifier, GradientBoostingRegressor\nfrom sklearn.ensemble import BaggingRegressor\nfrom sklearn.tree import DecisionTreeClassifier, DecisionTreeRegressor\nfrom sklearn.neural_network import MLPClassifier, MLPRegressor\nfrom sklearn.neighbors import KNeighborsClassifier, KNeighborsRegressor\nfrom sklearn.linear_model import LinearRegression\nfrom sklearn.cross_decomposition import PLSRegression\nfrom sklearn.linear_model import Ridge\nfrom sklearn.linear_model import RidgeCV\nfrom sklearn.linear_model import Lasso\nfrom sklearn.linear_model import LassoCV\nfrom sklearn.linear_model import ElasticNet\nfrom sklearn.linear_model import ElasticNetCV\n#IGNORING WARNINGS\nfrom warnings import filterwarnings\nfilterwarnings(\"ignore\",category=DeprecationWarning)\nfilterwarnings(\"ignore\", category=FutureWarning) \nfilterwarnings(\"ignore\", category=UserWarning)","fe7d6f52":"Main_G_A_E_Path = pd.read_csv(\"..\/input\/age-gender-and-ethnicity-face-data-csv\/age_gender.csv\")","e4743942":"print(Main_G_A_E_Path.head(-1))","b2be7d68":"Main_G_A_E_Path = Main_G_A_E_Path.drop(\"img_name\",axis=1)","179e5c46":"print(Main_G_A_E_Path.head())","62e499a8":"Main_G_A_E_Path[\"age\"] = Main_G_A_E_Path[\"age\"].apply(lambda x: \"Teen\" if x < 18 else(\"Middle\" if 18 <= x < 55 else \"Old\"))","dfb20edd":"print(Main_G_A_E_Path[\"age\"].value_counts())","bf080564":"print(Main_G_A_E_Path.head(-1))","49da058a":"Encoder_Function = LabelEncoder()","8f6e37a3":"print(\"MAIN:\")\nprint(Main_G_A_E_Path[\"age\"].value_counts())\nprint(\"---\" * 20)\nMain_G_A_E_Path[\"age\"] = Encoder_Function.fit_transform(Main_G_A_E_Path[\"age\"])\nprint(\"TRANSFORMED:\")\nprint(Main_G_A_E_Path[\"age\"].value_counts())","4871b54e":"print(Main_G_A_E_Path.head())","5f3e379b":"Main_G_A_E_Path[\"pixels\"] = Main_G_A_E_Path[\"pixels\"].apply(lambda x: np.array(x.split(),dtype=\"float32\"))\nMain_G_A_E_Path[\"pixels\"] = Main_G_A_E_Path[\"pixels\"] \/ 255.","fe1d2d01":"print(Main_G_A_E_Path.head())","32823a61":"print(\"Single Image Shape:\")\nprint(Main_G_A_E_Path[\"pixels\"][0].shape)\nprint(\"Total Shape:\")\nprint(Main_G_A_E_Path[\"pixels\"].shape)","1f2adac6":"X_Train = np.zeros(shape=(23705,2304))\n\nfor indexing in range(len(Main_G_A_E_Path[\"pixels\"])):\n    X_Train[indexing] = Main_G_A_E_Path[\"pixels\"][indexing]","b96b6250":"print(X_Train.shape)","0318b24e":"# \"2304 = 48*48\"\n\nX_Train = X_Train.reshape(-1,48,48,1)","b21a1cdd":"print(X_Train.shape)","c50b4f00":"print(X_Train[0].shape)","3bce8e55":"print(type(X_Train))","0d86ac39":"figure,axis = plt.subplots(5,5,figsize=(10,10))\n\nfor indexing,operations in enumerate(axis.flat):\n    Picking_Image = X_Train[indexing]\n    \n    operations.set_xlabel(f\"AGE: {str(Main_G_A_E_Path.age.iloc[indexing])} \"+f\"ETH: {str(Main_G_A_E_Path.ethnicity.iloc[indexing])} \"+f\"GENDER: {str(Main_G_A_E_Path.gender.iloc[indexing])}\")\n    operations.imshow(Picking_Image)\n    \nplt.tight_layout()\nplt.show()","e36a240f":"figure = plt.figure(figsize=(10,10))\n\nrandom_picking = index=np.random.randint(0,23000,16)\n\nfor indexing in range(len(random_picking)):\n    plt.subplot(4,4,(indexing%25)+1)\n    plt.grid(True)\n    plt.xticks([])\n    plt.yticks([])\n    plt.imshow(X_Train[random_picking[indexing]])\n    \n    plt.xlabel(f\"AGE: {str(Main_G_A_E_Path.age.iloc[random_picking[indexing]])} \"+f\"ETH: {str(Main_G_A_E_Path.ethnicity.iloc[random_picking[indexing]])} \"+f\"GENDER: {str(Main_G_A_E_Path.gender.iloc[random_picking[indexing]])}\")\n\nplt.show()","f6ea968f":"Main_G_A_E_Path[\"age\"] = np.array(Main_G_A_E_Path[\"age\"],dtype=\"float32\")\nMain_G_A_E_Path[\"gender\"] = np.array(Main_G_A_E_Path[\"gender\"],dtype=\"float32\")\nMain_G_A_E_Path[\"ethnicity\"] = np.array(Main_G_A_E_Path[\"ethnicity\"],dtype=\"float32\")","3179046a":"X = X_Train # pixels\nY = Main_G_A_E_Path.iloc[:,:-1].values # prediction targets","51a209d5":"print(X.shape)\nprint(Y.shape)","a03533b8":"print(type(X))\nprint(type(Y))","28e62731":"print(Y)","4528be81":"xTrain,xTest,yTrain,yTest = train_test_split(X,Y,train_size=0.9,random_state=42,shuffle=True)","d24df385":"print(xTrain.shape)\nprint(xTest.shape)\nprint(yTrain.shape)\nprint(yTest.shape)","3a8ae19b":"Early_Stopper = tf.keras.callbacks.EarlyStopping(monitor=\"loss\",patience=5,mode=\"min\")\nCheckpoint_Model = tf.keras.callbacks.ModelCheckpoint(monitor=\"val_accuracy\",\n                                                      save_best_only=True,\n                                                      save_weights_only=True,\n                                                      filepath=\".\/modelcheck\")","4684972b":"# for age\nA_COMPILE_OPTIMIZER = Adam()\nA_COMPILE_LOSS = \"msle\" # mean squared logarithmic error\nA_COMPILE_METRICS = [\"accuracy\"]\nA_INPUT_SHAPE = (xTrain.shape[1],xTrain.shape[2],xTrain.shape[3])\nA_OUTPUT_CLASS = 1","986b534e":"# for ethnicity\nE_COMPILE_OPTIMIZER = Adam()\nE_COMPILE_LOSS = \"mean_absolute_percentage_error\" # mean squared logarithmic error\nE_COMPILE_METRICS = [\"accuracy\"]\nE_INPUT_SHAPE = (xTrain.shape[1],xTrain.shape[2],xTrain.shape[3])\nE_OUTPUT_CLASS = 1","d3470244":"# for gender\nG_COMPILE_OPTIMIZER = Adam()\nG_COMPILE_LOSS = \"categorical_hinge\" # mean squared logarithmic error\nG_COMPILE_METRICS = [\"accuracy\"]\nG_INPUT_SHAPE = (xTrain.shape[1],xTrain.shape[2],xTrain.shape[3])\nG_OUTPUT_CLASS = 1","f9aa5bf1":"# for general\nCOMPILE_OPTIMIZER = Adam()\nCOMPILE_LOSS = \"msle\" # mean squared logarithmic error\nCOMPILE_METRICS = [\"accuracy\"]\nINPUT_SHAPE = (xTrain.shape[1],xTrain.shape[2],xTrain.shape[3])\nOUTPUT_CLASS = 3","3baf0db3":"# for last\nL_COMPILE_OPTIMIZER = Adam()\nL_COMPILE_LOSS = \"categorical_crossentropy\" # mean squared logarithmic error\nL_COMPILE_METRICS = [\"accuracy\"]\nL_INPUT_SHAPE = (xTrain.shape[1],xTrain.shape[2],xTrain.shape[3])\nL_OUTPUT_CLASS = 5","b2812aa5":"Model = Sequential()\n\nModel.add(Conv2D(32,(3,3),activation=\"relu\",input_shape=INPUT_SHAPE))\nModel.add(BatchNormalization())\nModel.add(MaxPooling2D((2,2)))\n\nModel.add(Conv2D(64,(3,3),activation=\"relu\"))\nModel.add(Dropout(0.3))\nModel.add(MaxPooling2D((2,2)))\nModel.add(BatchNormalization())\n\nModel.add(Conv2D(128,(3,3),activation=\"relu\"))\nModel.add(Dropout(0.3))\nModel.add(MaxPooling2D((2,2)))\nModel.add(BatchNormalization())\n\n\nModel.add(Flatten())\nModel.add(Dense(128,activation=\"relu\"))\nModel.add(BatchNormalization())\nModel.add(Dropout(0.5))\nModel.add(Dense(64,activation=\"relu\"))\nModel.add(BatchNormalization())\nModel.add(Dropout(0.5))\nModel.add(Dense(OUTPUT_CLASS,activation=\"softmax\"))","4f6b5223":"Model.compile(optimizer=COMPILE_OPTIMIZER,loss=COMPILE_LOSS,metrics=COMPILE_METRICS)","ce66004a":"CNN_Model = Model.fit(xTrain,yTrain,\n                      validation_data=(xTest,yTest),\n                      callbacks=[Early_Stopper,Checkpoint_Model],\n                      batch_size=12,\n                      epochs=50)","7ebd0580":"Model_Results = Model.evaluate(xTest,yTest)\nprint(\"LOSS:  \" + \"%.4f\" % Model_Results[0])\nprint(\"ACCURACY:  \" + \"%.2f\" % Model_Results[1])","3df92ce5":"Grap_Data = pd.DataFrame(CNN_Model.history)\nGrap_Data.plot()","0d4433dc":"print(yTrain.shape)\nprint(yTest.shape)","221bb0b1":"print(yTrain[:,:1].shape) # for age\nprint(yTest[:,:1].shape)","0a089ad5":"A_yTrain = yTrain[:,:1]\nA_yTest = yTest[:,:1]","003b0f43":"Model_A = Sequential()\n\nModel_A.add(Conv2D(32,(3,3),activation=\"relu\",input_shape=A_INPUT_SHAPE))\nModel_A.add(BatchNormalization())\nModel_A.add(MaxPooling2D((2,2)))\n\nModel_A.add(GlobalAveragePooling2D())\nModel_A.add(Flatten())\nModel_A.add(Dense(128,activation=\"relu\"))\nModel_A.add(BatchNormalization())\nModel_A.add(Dropout(0.5))\nModel_A.add(Dense(64,activation=\"relu\"))\nModel_A.add(BatchNormalization())\nModel_A.add(Dropout(0.5))\nModel_A.add(Dense(A_OUTPUT_CLASS,activation=\"sigmoid\"))","61301c6c":"Model_A.compile(optimizer=A_COMPILE_OPTIMIZER,loss=A_COMPILE_LOSS,metrics=A_COMPILE_METRICS)","286a69d3":"A_CNN_Model = Model_A.fit(xTrain,A_yTrain,\n                      validation_data=(xTest,A_yTest),\n                      callbacks=Early_Stopper,\n                      batch_size=12,\n                      epochs=50)","50d5f54b":"Model_Results = Model_A.evaluate(xTest,A_yTest)\nprint(\"LOSS:  \" + \"%.4f\" % Model_Results[0])\nprint(\"ACCURACY:  \" + \"%.2f\" % Model_Results[1])","f62471d5":"Grap_Data = pd.DataFrame(A_CNN_Model.history)\nGrap_Data.plot()","7a3d85f9":"print(yTrain)","d7e2329e":"print(yTrain[:,1:2]) # for ethnicity","4d7e6440":"print(yTrain[:,1:2].shape)","96b08e1d":"E_yTrain = yTrain[:,1:2]\nE_yTest = yTest[:,1:2]","81807200":"Model_E = Sequential()\n\nModel_E.add(Conv2D(32,(3,3),activation=\"relu\",input_shape=E_INPUT_SHAPE))\nModel_E.add(BatchNormalization())\nModel_E.add(MaxPooling2D((2,2)))\n\nModel_E.add(GlobalAveragePooling2D())\nModel_E.add(Flatten())\nModel_E.add(Dense(128,activation=\"relu\"))\nModel_E.add(BatchNormalization())\nModel_E.add(Dropout(0.5))\nModel_E.add(Dense(64,activation=\"relu\"))\nModel_E.add(BatchNormalization())\nModel_E.add(Dropout(0.5))\nModel_E.add(Dense(E_OUTPUT_CLASS,activation=\"sigmoid\"))","21130618":"Model_E.compile(optimizer=E_COMPILE_OPTIMIZER,loss=E_COMPILE_LOSS,metrics=E_COMPILE_METRICS)","bde21479":"E_CNN_Model = Model_E.fit(xTrain,E_yTrain,\n                      validation_data=(xTest,E_yTest),\n                      callbacks=Early_Stopper,\n                      batch_size=12,\n                      epochs=50)","a52e61f4":"Model_Results = Model_E.evaluate(xTest,E_yTest)\nprint(\"LOSS:  \" + \"%.4f\" % Model_Results[0])\nprint(\"ACCURACY:  \" + \"%.2f\" % Model_Results[1])","cf0e924d":"Grap_Data = pd.DataFrame(E_CNN_Model.history)\nGrap_Data.plot()","89e4c0d8":"G_yTrain = yTrain[:,2:3]\nG_yTest = yTest[:,2:3]","5497de60":"Model_G = Sequential()\n\nModel_G.add(Conv2D(32,(3,3),activation=\"relu\",input_shape=G_INPUT_SHAPE))\nModel_G.add(BatchNormalization())\nModel_G.add(MaxPooling2D((2,2)))\n\nModel_G.add(Conv2D(64,(3,3),activation=\"relu\"))\nModel_G.add(Dropout(0.3))\nModel_G.add(MaxPooling2D((2,2)))\nModel_G.add(BatchNormalization())\n\nModel_G.add(Conv2D(128,(3,3),activation=\"relu\"))\nModel_G.add(Dropout(0.3))\nModel_G.add(MaxPooling2D((2,2)))\nModel_G.add(BatchNormalization())\n\n\nModel_G.add(Flatten())\nModel_G.add(Dense(128,activation=\"relu\"))\nModel_G.add(BatchNormalization())\nModel_G.add(Dropout(0.5))\nModel_G.add(Dense(64,activation=\"relu\"))\nModel_G.add(BatchNormalization())\nModel_G.add(Dropout(0.5))\nModel_G.add(Dense(G_OUTPUT_CLASS,activation=\"softmax\"))","ed3db171":"Model_G.compile(optimizer=G_COMPILE_OPTIMIZER,loss=G_COMPILE_LOSS,metrics=G_COMPILE_METRICS)","683c40c0":"G_CNN_Model = Model_G.fit(xTrain,G_yTrain,\n                      validation_data=(xTest,G_yTest),\n                      callbacks=Early_Stopper,\n                      batch_size=12,\n                      epochs=50)","bfaab756":"Model_Results = Model_G.evaluate(xTest,G_yTest)\nprint(\"LOSS:  \" + \"%.4f\" % Model_Results[0])\nprint(\"ACCURACY:  \" + \"%.2f\" % Model_Results[1])","a467c1ed":"Grap_Data = pd.DataFrame(G_CNN_Model.history)\nGrap_Data.plot()","4d2a050e":"X_Train = np.zeros(shape=(23705,2304))\n\nfor indexing in range(len(Main_G_A_E_Path[\"pixels\"])):\n    X_Train[indexing] = Main_G_A_E_Path[\"pixels\"][indexing]","37107a99":"X = X_Train # pixels\nY = Main_G_A_E_Path.iloc[:,:-1] # prediction targets","e5d6e568":"print(X.shape)\nprint(Y.shape)","279d6512":"print(Y)","972b66f6":"Y.ethnicity=Y.ethnicity.astype('object')","27edad8e":"print(Y.ethnicity)","403b8e5c":"Y_ethnicity=np.array(to_categorical(Y.ethnicity))","ef3df313":"print(\"Ethnicity Labels:\",Y_ethnicity.shape)","58aa34c5":"X = X_Train.reshape(-1,48,48,1)","dea1c00b":"print(X.shape)","c82ab274":"xTrain,xTest,yTrain,yTest = train_test_split(X,Y_ethnicity,train_size=0.9,random_state=42,shuffle=True)","62d11951":"print(xTrain.shape)\nprint(xTest.shape)\nprint(yTest.shape)\nprint(yTrain.shape)","5497c2ef":"print(yTest)","807e6ffe":"print(xTest[1])","5b38a439":"Model_L = Sequential()\n\nModel_L.add(Conv2D(32,(3,3),activation=\"relu\",input_shape=L_INPUT_SHAPE))\nModel_L.add(BatchNormalization())\nModel_L.add(MaxPooling2D((2,2)))\n\nModel_L.add(Conv2D(64,(3,3),activation=\"relu\"))\nModel_L.add(Dropout(0.3))\nModel_L.add(MaxPooling2D((2,2)))\nModel_L.add(BatchNormalization())\n\nModel_L.add(Conv2D(128,(3,3),activation=\"relu\"))\nModel_L.add(Dropout(0.3))\nModel_L.add(MaxPooling2D((2,2)))\nModel_L.add(BatchNormalization())\n\n\nModel_L.add(Flatten())\nModel_L.add(Dense(128,activation=\"relu\"))\nModel_L.add(BatchNormalization())\nModel_L.add(Dropout(0.5))\nModel_L.add(Dense(64,activation=\"relu\"))\nModel_L.add(BatchNormalization())\nModel_L.add(Dropout(0.5))\nModel_L.add(Dense(L_OUTPUT_CLASS,activation=\"softmax\"))","0df5b214":"Model_L.compile(optimizer=L_COMPILE_OPTIMIZER,loss=L_COMPILE_LOSS,metrics=L_COMPILE_METRICS)","a5b9e1f8":"L_CNN_Model = Model_L.fit(xTrain,yTrain,\n                      validation_data=(xTest,yTest),\n                      callbacks=Early_Stopper,\n                      batch_size=12,\n                      epochs=50)","346b12e8":"Model_Results = Model_L.evaluate(xTest,yTest)\nprint(\"LOSS:  \" + \"%.4f\" % Model_Results[0])\nprint(\"ACCURACY:  \" + \"%.2f\" % Model_Results[1])","560c8957":"Grap_Data = pd.DataFrame(L_CNN_Model.history)\nGrap_Data.plot()","7d4bad84":"Prediction_Results = Model_L.predict(xTest)","ed5e53cb":"Model_Test_Prediction = Prediction_Results.argmax(axis=-1)","e49176d9":"Model_True_Values = yTest.argmax(axis=-1)","8b52dd7e":"print(confusion_matrix(Model_True_Values,Model_Test_Prediction))","183a377a":"print(classification_report(Model_True_Values,Model_Test_Prediction))","0de8ced4":"print(Model_Test_Prediction)","77279cbb":"print(yTest[1].argmax(axis=-1))","3c5cd6cb":"fig, axes = plt.subplots(nrows=5,\n                         ncols=5,\n                         figsize=(20, 20),\n                        subplot_kw={'xticks': [], 'yticks': []})\n\nfor i, ax in enumerate(axes.flat):\n    ax.imshow(xTest[i])\n    ax.set_title(f\"PREDICTION:{Model_Test_Prediction[i]}\")\n    ax.set_xlabel(yTest[i].argmax(axis=-1))\nplt.tight_layout()\nplt.show()","38666566":"# MODEL FOR ETHNICITY","4d7267dd":"# HISTORY\n\n#### Ethnicity Labels\n\nETHNICITIES = { \n    0: \"White\", \n    1: \"Black\",\n    2: \"Asian\",\n    3: \"Indian\",\n    4: \"Hispanic\"\n}\n\n#### Gender Labels\n\nGENDERS = { \n    0: \"Male\", \n    1: \"Female\"\n}\n\n\n#### What Will You See\n\n* Effect of various loss functions on similar models\n* Different data preparation stages for different models\n* Data preparation processes\n* Various models\n* Last model for ethnicities\n\n\n##### Please follow carefully","3601475f":"#### CSV RE-BUILT","278cd7ad":"# MODEL FOR GENDER","d6eac8ad":"# MODEL FOR ALL","b6fa2e39":"#### RE-BUILT","40c45f47":"#### STRUCTURE","c7f1b5db":"#### END OF THE PROJECT! THANK YOU FOR YOUR CHECKING! KEEP IT UP!","56bbcfd2":"# MODEL FOR AGE","0372e2ec":"#### MAIN CSV","efaf1c0f":"#### RE-BUILT","9b597c10":"#### TO ARRAY","d1e41127":"#### STRUCTURE","bd59cd60":"# LAST MODEL FOR ETHNICITY","4c91bf64":"#### PREDICTION","e2fda4e6":"# GENERAL PARAMETERS","27e397b8":"# PACKAGES AND LIBRARIES","19fa526b":"# PATH, LABEL, TRANSFORMATION","ab75ff8a":"#### STRUCTURE","7242af33":"#### RE-BUILT","f04d5241":"#### RE-BUILT","4f90fcba":"# DATA PROCESS FOR PREDICTION","570fd5d6":"* first column = age\n* second column = ethnicity\n* third column = gender","be46f1b6":"# VISION","525d60a8":"#### STRUCTURE","4676952d":"#### SPLITTING"}}