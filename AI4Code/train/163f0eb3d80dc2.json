{"cell_type":{"3eb32bf1":"code","f3893b0e":"code","cc01a0ac":"code","1d13cb12":"code","ec201fde":"code","c3559b53":"code","e16a02d3":"code","eb0a180c":"code","1be0b357":"code","af11af93":"code","28bcf846":"code","7568b0e3":"code","2978b4ac":"code","f2b31514":"code","7f1cf104":"code","15b30cff":"code","4c20f7e5":"code","d9f517b9":"code","d3ef6d1c":"code","caecba21":"code","f06660d7":"code","2223302c":"code","0a655b08":"code","3f3e98d8":"markdown","718ded42":"markdown","ee4825b0":"markdown","9bd2da85":"markdown","7cdd5fe2":"markdown","47d17056":"markdown","6996105f":"markdown","2dc7654c":"markdown"},"source":{"3eb32bf1":"from selenium import webdriver\nfrom selenium.webdriver.firefox.options import Options\nfrom lxml import etree\nimport xml.etree\nimport requests as req\nfrom bs4 import BeautifulSoup\nfrom pathlib import Path\nimport pandas as pd\nimport json\nfrom fastai.text import *\n","f3893b0e":"output_folder = Path.home() \/ \"data\"\n\noutput_raw_path = output_folder \/ \"raw_essays.json\"\noutput_path = output_folder \/ \"essays.csv\"\noutput_lite = output_folder \/ \"essays_lite.csv\"\n\nuri_initial = \"https:\/\/educacao.uol.com.br\/bancoderedacoes\/\"\n\n# xpaths for getting the relevant contents\n\nxpath_see_more_button = \"\/\/div[6]\/section\/div\/section\/div\/div[2]\/div\/button\"\nxpath_theme_link = \"\/\/div[6]\/section\/div\/section\/div\/div\/div\/div\/a\/@href\"\n\nxpath_theme_title = \"\/\/div[5]\/article\/div[1]\/header\/h1\/span\/i[2]\/text()\"\nxpath_theme_text = '\/\/div[5]\/article\/div[2]\/div\/div[1]\/div\/div[2]\/div[1]\/\/div[@class=\"text\"]'\nxpath_essay_link = \"\/\/article\/div[2]\/div\/div[1]\/div\/div[2]\/div[2]\/section\/article\/div\/a\/@href\"\n\nxpath_essay_title = \"\/\/div[5]\/article\/div[2]\/div\/div[1]\/div\/div[2]\/div[1]\/div[2]\/section\/div[2]\/h2\/text()\"\nxpath_essay_title_alt = '\/\/*[@id=\"conteudo-principal\"]\/header\/h1\/text()'\nxpath_essay_text = \"\/\/div[5]\/article\/div[2]\/div\/div[1]\/div\/div[2]\/div[1]\/div[2]\/section\/div[2]\/div[2]\"\nxpath_essay_text_alt = '\/\/*[@id=\"texto\"]'\nxpath_essay_scores = \"\/\/div[5]\/article\/div[2]\/div\/div[1]\/div\/div[2]\/div[1]\/div[4]\/section[1]\/article\/div\/span[2]\/text()\"\nxpath_essay_scores_alt = '\/\/*[@id=\"texto\"]\/div[1]\/table[1]\/\/tr\/td[2]\/text()'","cc01a0ac":"options = Options()\noptions.headless = True\ndriver = webdriver.Firefox(options=options)\ndriver.get(uri_initial)\nwhile True:\n    try:\n        elem = driver.find_element_by_xpath(xpath_see_more_button)\n        elem.click()\n    except:\n        break\n\npage_source = driver.page_source\ndriver.close()","1d13cb12":"html_parser = etree.HTMLParser()\ntree = etree.fromstring(page_source, html_parser)\nuris_theme = tree.xpath(xpath_theme_link)","ec201fde":"def get_clean_theme_text(raw_text):\n    soup = BeautifulSoup(raw_text, 'html.parser')\n    return soup.text\n\n\ndef get_theme(uri):\n    r = req.get(uri)\n    page_source = r.text    \n    tree = etree.fromstring(page_source, html_parser)\n    \n    title = tree.xpath(xpath_theme_title)[0]\n    text_el = tree.xpath(xpath_theme_text)[0]\n    raw_text= etree.tostring(text_el, encoding=str)\n    text = get_clean_theme_text(raw_text)\n    uri_essays = tree.xpath(xpath_essay_link)\n    \n    theme_obj = {\"title\": title,\n                 \"raw_text\": raw_text,\n                 \"clean_text\": text,\n                 \"url\": uri,\n                 \"urls_essay\": uri_essays}\n    \n    return theme_obj","c3559b53":"themes = []\n\nfor (i, uri) in enumerate(uris_theme):\n    print(\"\\r{}\/{}   \".format(i, len(uris_theme)), end=\"\")\n    themes.append(get_theme(uri))","e16a02d3":"def get_clean_essay_text(raw_text, alt=False):\n    soup = BeautifulSoup(raw_text, 'html.parser')\n    if alt is not False:\n        all_spans = soup.findAll(\"span\")\n        black_spans = soup.findAll(\"span\", {\"style\":\"color:black\"})\n        non_black_spans_set = set(all_spans) - set(black_spans)\n        non_black_spans = [span for span in all_spans if span in non_black_spans_set]\n        for span in non_black_spans:\n            span.decompose()\n    text = soup.text\n    return text\n\n\ndef get_essay(url):\n    r = req.get(url)\n    page_source = r.text\n    tree = etree.fromstring(page_source, html_parser)\n    essay_obj = {}\n    try:\n        el = tree.xpath(xpath_essay_text)[0]\n        title = tree.xpath(xpath_essay_title)[0]\n        scores = tree.xpath(xpath_essay_scores)\n    except:\n        el = tree.xpath(xpath_essay_text_alt)[0]\n        title = tree.xpath(xpath_essay_title_alt)[0]\n        scores = tree.xpath(xpath_essay_scores_alt)\n    finally:\n        raw_text = etree.tostring(el, encoding=str)\n        text = get_clean_essay_text(raw_text)        \n        essay_obj = {\"title\": title,\n                     \"raw_text\": raw_text,\n                     \"clean_text\": text,\n                     \"scores\": scores,\n                     \"url\": url}\n        return essay_obj","eb0a180c":"for i, theme in enumerate(themes):\n    theme_essays = []\n    urls_essay = theme[\"urls_essay\"]\n    for j, uri_essay in enumerate(urls_essay):\n        print(\"\\r{}\/{} ({}\/{})       \".format(i, len(themes), j, len(urls_essay)), end=\"\")\n        essay = get_essay(uri_essay)\n        theme_essays.append(essay)\n    theme_url = theme[\"url\"]\n    theme[\"essays\"] = theme_essays","1be0b357":"with open(output_raw_path, \"w\") as fid:\n    json.dump(themes, fid)","af11af93":"dataset = []\n\n\nfor theme in themes:\n    essays = theme[\"essays\"]\n    theme_title = theme[\"title\"]\n    theme_text = theme[\"clean_text\"]\n    for essay in essays:\n        row = {}\n        row[\"essay_title\"] = essay[\"title\"]\n        row[\"essay_text\"] = essay[\"clean_text\"]\n        row[\"scores\"] = essay[\"scores\"]\n        row[\"theme_title\"] = theme_title\n        row[\"theme_text\"] = theme_text\n        dataset.append(row)","28bcf846":"data = pd.DataFrame(dataset)","7568b0e3":"score_map = {0: \"score_1\", 1: \"score_2\", 2:\"score_3\", 3:\"score_4\", 4:\"score_5\", 5: \"total_score\"}\nscores = (data.scores.apply(pd.Series)\n              .rename(columns=score_map))\n\ndata = (data.drop(\"scores\", axis=1)\n            .join(scores))","2978b4ac":"data.to_csv(output_path)","f2b31514":"data = (pd.read_csv(output_path)\n          .assign(score_1=lambda x: pd.to_numeric(x[\"score_1\"], errors='coerce'))\n          .assign(score_2=lambda x: pd.to_numeric(x[\"score_2\"], errors='coerce'))\n          .assign(score_3=lambda x: pd.to_numeric(x[\"score_3\"], errors='coerce'))\n          .assign(score_4=lambda x: pd.to_numeric(x[\"score_4\"], errors='coerce'))\n          .assign(score_5=lambda x: pd.to_numeric(x[\"score_5\"], errors='coerce'))\n          .assign(score_5=lambda x: pd.to_numeric(x[\"score_5\"], errors='coerce'))\n          .assign(total_score=lambda x: pd.to_numeric(x[\"total_score\"], errors='coerce'))) ","7f1cf104":"low_data = data.loc[:, [\"essay_text\", \"total_score\"]].dropna()\nlow_data.total_score = (low_data.total_score > 500).astype(int)\nlow_data.to_csv(output_lite, index=False)","15b30cff":"#even_low_data = low_data.loc[:, [\"essay_text\"]]\n#even_low_data.to_csv(output_folder \/ \"essays_even_liter.csv\", index=False)","4c20f7e5":"data_lm = TextClasDataBunch.from_csv(output_folder,\n                                     \"essays_lite.csv\",\n                                     text_cols=[\"essay_text\"],\n                                     label_cols=[\"total_score\"],\n                                     bs=48)\ndata_lm.show_batch()\ndata_lm.backwards = False","d9f517b9":"torch.cuda.empty_cache()","d3ef6d1c":"learn = text_classifier_learner(data_lm, AWD_LSTM, drop_mult=0.5)","caecba21":"learn.lr_find()\n","f06660d7":"learn.recorder.plot()\n","2223302c":"learn.fit_one_cycle(1, 2e-2, moms=(0.8,0.7))","0a655b08":"txt = \"\"\"\nRecentemente, o Governo Federal anunciou um contingenciamento de verbas para a educa\u00e7\u00e3o superior, o que gerou grande diverg\u00eancia entre os brasileiros: enquanto uns apoiaram a medida, outros foram \u00e0s ruas para se manifestar contra ela. Nesse contexto, alguns defenderam a privatiza\u00e7\u00e3o das universidades ou a cobran\u00e7a de mensalidades para os mais ricos a fim de solucionar a crise financeira do ensino superior. Por\u00e9m, o mais justo \u00e9 manter esse servi\u00e7o p\u00fablico e gratuito a todos, embora certas a\u00e7\u00f5es sejam necess\u00e1rias para maximizar os benef\u00edcios dessa decis\u00e3o.\n\nPrimordialmente Primeiramente, \u00e9 v\u00e1lido importante considerar que as universidades p\u00fablicas s\u00e3o as mais bem avaliadas do pa\u00eds. Segundo uma pesquisa do grupo brit\u00e2nico QS (Quacquarelli Symonds), UNICAMP e USP, por exemplo, est\u00e3o entre as melhores da Am\u00e9rica Latina. Ademais, um levantamento recente da CAPES (Coordena\u00e7\u00e3o de Aperfei\u00e7oamento de Pessoal de N\u00edvel Superior) mostrou que mais de 90% das pesquisas cient\u00edficas do Brasil v\u00eam das escolas superiores p\u00fablicas. Sendo assim, a privatiza\u00e7\u00e3o das universidades seria prejudicial ao pa\u00eds, j\u00e1 que sua qualidade tenderia a piorar e a quantidade dessas pesquisas, a diminuir. Al\u00e9m disso, seria prov\u00e1vel que tais estudos, lamentavelmente, fossem voltados somente a \u00e1reas que trazem maior retorno financeiro imediato. Desse modo, conclui-se que as institui\u00e7\u00f5es p\u00fablicas de ensino superior devem continuar sendo do Estado.\n\nEm uma segunda an\u00e1lise, conv\u00e9m lembrar que o Artigo 206 da Constitui\u00e7\u00e3o Federal garante o ensino gratuito em estabelecimentos oficiais. Logo, ningu\u00e9m deveria ser privado de ter uma educa\u00e7\u00e3o superior gratuita e de qualidade, independentemente da de classe social. Infelizmente, isso n\u00e3o acontece na pr\u00e1tica: boa parte da popula\u00e7\u00e3o, sobretudo os mais pobres, n\u00e3o tem acesso a esse servi\u00e7o. Todavia, a cobran\u00e7a de mensalidades n\u00e3o seria uma solu\u00e7\u00e3o adequada para o impasse, pois n\u00e3o s\u00f3 violaria a Constitui\u00e7\u00e3o, mas tamb\u00e9m poderia desestimular os mais ricos a ingressarem e realizarem pesquisas nessas institui\u00e7\u00f5es. Assim, \u00e9 poss\u00edvel concluir que a universidade p\u00fablica deve ser gratuita para todos.\n\nPortanto, a privatiza\u00e7\u00e3o das universidades p\u00fablicas e a cobran\u00e7a da mensalidade dos mais ricos n\u00e3o solucionariam o problema da crise financeira no ensino superior. Contudo, o Poder P\u00fablico precisa agir para resolv\u00ea-lo e proporcionar, ainda, uma maior igualdade de acesso a essas institui\u00e7\u00f5es. Primeiramente, verbas de setores menos relevantes (a exemplo das For\u00e7as Armadas) devem ser destinadas a \u00e1reas mais essenciais, como a educa\u00e7\u00e3o superior. Al\u00e9m do mais, para esse mesmo fim, deve haver privatiza\u00e7\u00f5es de empresas estatais (os Correios, por exemplo). Por fim, para que haja maior igualdade de oportunidades nas universidades, \u00e9 necess\u00e1rio que as cotas sociais (\u00e0queles que estudaram em escolas p\u00fablicas) sejam ampliadas. Dessa forma, a crise financeira do ensino superior ser\u00e1 solucionada de maneira justa e em respeito \u00e0 Constitui\u00e7\u00e3o Federal.\n\"\"\"\n\nlearn.predict(txt)","3f3e98d8":"### Cleaning it up","718ded42":"## Scraping","ee4825b0":"### Getting an list of all essays, and the theme contents","9bd2da85":"### Getting an list of all themes","7cdd5fe2":"## Deep Learning","47d17056":"## Definitions","6996105f":"### Getting the essays content","2dc7654c":"# UOL corrected essays scraper\n\n(run local)\n\nAuthor: Danilo Lessa Bernardineli (danilo.lessa@gmail.com)"}}