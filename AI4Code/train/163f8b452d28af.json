{"cell_type":{"8c3004fc":"code","648eff2c":"code","75a090b0":"code","538b1c3d":"code","efaa138c":"code","78375f76":"code","9057c416":"code","4fdc6d8d":"code","f888dfb9":"code","7cda691b":"code","30ae398a":"code","1a3bc56a":"code","965f71eb":"code","9d7b877d":"code","74e3be2a":"code","afcadb27":"code","e74278d6":"code","b2ee7706":"code","75cf20c9":"code","a4fc1a42":"code","00220009":"code","32fddbd2":"code","2a85bfdb":"code","2999d44f":"code","76a2c6a2":"code","3b5f08ec":"code","9f4ba3d0":"markdown","94b826df":"markdown","1d27a09e":"markdown","a1ba7123":"markdown","d4d72bda":"markdown","e2c400f5":"markdown","0bbbc824":"markdown","efd12522":"markdown","839e6162":"markdown","cf436252":"markdown"},"source":{"8c3004fc":"import numpy as np\nimport matplotlib.pyplot as plt\nimport pandas as pd","648eff2c":"dataset = pd.read_csv('..\/input\/insurance\/insurance.csv')\nX = dataset.iloc[:, :-1].values\ny = dataset.iloc[:, -1].values","75a090b0":"dataset.hist()","538b1c3d":"dataset.duplicated().sum()","efaa138c":"dataset.drop_duplicates(inplace=True)\ndataset.duplicated().sum()","78375f76":"plt.scatter(dataset['age'], dataset['charges'])\nplt.title('Bmi vs Charges')\nplt.xlabel('BMI')\nplt.ylabel('Charges')\nplt.show()","9057c416":"from sklearn.compose import ColumnTransformer\nfrom sklearn.preprocessing import OneHotEncoder\nct = ColumnTransformer(transformers=[('encoder', OneHotEncoder(), [1,4,5])], remainder='passthrough')\nX = np.array(ct.fit_transform(X))","4fdc6d8d":"X","f888dfb9":"from sklearn.model_selection import train_test_split\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.2, random_state = 0)","7cda691b":"from sklearn.linear_model import LinearRegression\nregressor = LinearRegression()\nregressor.fit(X_train, y_train)","30ae398a":"y_pred = regressor.predict(X_test)\nnp.set_printoptions(precision=2)\nprint(np.concatenate((y_pred.reshape(len(y_pred),1), y_test.reshape(len(y_test),1)),1))","1a3bc56a":"from sklearn.metrics import r2_score\nmlr = r2_score(y_test, y_pred)\nmlr","965f71eb":"plt.scatter(y_test, y_pred)","9d7b877d":"from sklearn.preprocessing import PolynomialFeatures\nfrom sklearn.linear_model import LinearRegression\npoly_reg = PolynomialFeatures(degree = 4)\nX_poly = poly_reg.fit_transform(X_train)\nregressor_p = LinearRegression()\nregressor_p.fit(X_poly, y_train)","74e3be2a":"y_pred_p = regressor_p.predict(poly_reg.transform(X_test))\nnp.set_printoptions(precision=2)\nprint(np.concatenate((y_pred_p.reshape(len(y_pred),1), y_test.reshape(len(y_test),1)),1))","afcadb27":"pr = r2_score(y_test, y_pred_p)\npr","e74278d6":"plt.scatter(y_test, y_pred_p)","b2ee7706":"from sklearn.tree import DecisionTreeRegressor\nregressor_dt = DecisionTreeRegressor(random_state = 0)\nregressor_dt.fit(X_train, y_train)","75cf20c9":"y_pred_dt = regressor_dt.predict(X_test)\nnp.set_printoptions(precision=2)\nprint(np.concatenate((y_pred_dt.reshape(len(y_pred),1), y_test.reshape(len(y_test),1)),1))","a4fc1a42":"dt = r2_score(y_test, y_pred_dt)\ndt","00220009":"plt.scatter(y_test, y_pred_dt)","32fddbd2":"from sklearn.ensemble import RandomForestRegressor\nregressor_rf = RandomForestRegressor(n_estimators = 10, random_state = 0)\nregressor_rf.fit(X_train, y_train)","2a85bfdb":"y_pred_rf = regressor_rf.predict(X_test)\nnp.set_printoptions(precision=2)\nprint(np.concatenate((y_pred_rf.reshape(len(y_pred_rf),1), y_test.reshape(len(y_test),1)),1))","2999d44f":"rf = r2_score(y_test, y_pred_rf)\nrf","76a2c6a2":"plt.scatter(y_test, y_pred_rf)","3b5f08ec":"x_a = ['Multiple linear regression', 'Polynomial regression', 'Descision tree', 'Random forest']\ny_a = [mlr,pr,dt,rf]\nplt.bar(x_a, y_a, width = 0.5, color=\"#ff6666\")\nplt.title('R squared of the taken models')\nplt.xlabel('Models')\nplt.ylabel('R squared value')\nplt.show()","9f4ba3d0":"##Comparing R-squared values","94b826df":"## Importing the libraries","1d27a09e":"##Checking Duplicates","a1ba7123":"## Importing the dataset","d4d72bda":"##Encoding Data","e2c400f5":"## Splitting the dataset into the Training set and Test set","0bbbc824":"## Multiple Linear Regression","efd12522":"##Descision tree","839e6162":"##Random Forest","cf436252":"##Polynomial regression"}}