{"cell_type":{"a3635c13":"code","592ed640":"code","2d4bf9c9":"code","fe6dfc05":"code","8a119b71":"code","7a1dd4ff":"code","2d4bb16e":"code","ddab1cab":"code","5d455c04":"code","9f63d225":"code","1282675f":"code","1b1faeae":"code","3a3aa73b":"code","194852f3":"code","ac4a5752":"code","f86831df":"code","24c84bad":"code","ebd01a2f":"code","2bd21add":"code","f97592be":"code","f48daa4e":"code","a8beac23":"code","4a11a292":"code","747fe0bb":"code","573a566e":"code","0e1d8a1a":"code","0160068a":"code","b3da2dfa":"code","96aa7a1a":"code","1bb0c482":"code","7fd9a83a":"code","be89f074":"code","9124608e":"code","272c11d9":"code","1e1cc2a6":"code","6313663e":"code","589a31ce":"code","bdb8f22b":"code","ddaa4823":"code","187e20cf":"code","02c7ef52":"code","5cd3f1b4":"code","776d24c5":"code","b30f8791":"markdown","f503c80f":"markdown","5be5cefc":"markdown","448f8582":"markdown","e4914f3c":"markdown","9f3c43a0":"markdown","dd600379":"markdown","dddebeb7":"markdown","a0f03435":"markdown","1b2e7d88":"markdown","0accdc38":"markdown","77346aa5":"markdown","bcf3a51b":"markdown","250cd629":"markdown","5a4f8eb2":"markdown","8efbc6b5":"markdown","bf6ad44d":"markdown","088d216c":"markdown","2cdde8b0":"markdown","3872a3d2":"markdown","e2468dfb":"markdown","acd9e62c":"markdown","51a5ab41":"markdown","a1e5da1f":"markdown","9de1c475":"markdown","b03825cc":"markdown"},"source":{"a3635c13":"# Competition Specific\nfrom kaggle.competitions import nflrush\n\n# Data Management\nimport numpy as np \nimport pandas as pd \npd.set_option('max_columns', 100)\n\n# Visualization Libraries\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nplt.style.use('ggplot')\n\n# Managing Warnings \nimport warnings\nwarnings.filterwarnings('ignore')\n\n# Plot Figures Inline\n%matplotlib inline\n\n# Extras\nimport math, string, os\n\n# View Available Files\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))","592ed640":"train_df = pd.read_csv('\/kaggle\/input\/nfl-big-data-bowl-2020\/train.csv', low_memory=False)\nprint(train_df.shape)\ntrain_df.head()","2d4bf9c9":"train_df.columns","fe6dfc05":"train_df.info()","8a119b71":"train_df.isnull().sum()","7a1dd4ff":"def height_to_numerical(height):\n    \"\"\"\n    Convert string representing height into total inches\n    \n    Ex. '5-11' --> 71\n    Ex. '6-3'  --> 75\n    \"\"\"  \n    feet   = height.split('-')[0]\n    inches = height.split('-')[1]\n    return int(feet)*12 + int(inches)","2d4bb16e":"train_df['PlayerHeight'] = train_df['PlayerHeight'].apply(height_to_numerical)","ddab1cab":"train_df.drop(['GameId', 'PlayId', 'NflId', 'JerseyNumber', 'NflIdRusher'], axis=1).describe(include=['O']).T","5d455c04":"train_df.drop(['GameId', 'PlayId', 'NflId', 'JerseyNumber', 'NflIdRusher'], axis=1).describe().T","9f63d225":"train_df[ train_df['PlayerWeight'] == 153.00 ]","1282675f":"train_df['StadiumType'].value_counts()","1b1faeae":"def group_stadium_types(stadium):\n    outdoor       = [\n        'Outdoor', 'Outdoors', 'Cloudy', 'Heinz Field', \n        'Outdor', 'Ourdoor', 'Outside', 'Outddors', \n        'Outdoor Retr Roof-Open', 'Oudoor', 'Bowl'\n    ]\n    indoor_closed = [\n        'Indoors', 'Indoor', 'Indoor, Roof Closed', 'Indoor, Roof Closed', \n        'Retractable Roof', 'Retr. Roof-Closed', 'Retr. Roof - Closed', 'Retr. Roof Closed',\n    ]\n    indoor_open   = ['Indoor, Open Roof', 'Open', 'Retr. Roof-Open', 'Retr. Roof - Open']\n    dome_closed   = ['Dome', 'Domed, closed', 'Closed Dome', 'Domed', 'Dome, closed']\n    dome_open     = ['Domed, Open', 'Domed, open']\n    \n    if stadium in outdoor:\n        return 'outdoor'\n    elif stadium in indoor_closed:\n        return 'indoor closed'\n    elif stadium in indoor_open:\n        return 'indoor open'\n    elif stadium in dome_closed:\n        return 'dome closed'\n    elif stadium in dome_open:\n        return 'dome open'\n    else:\n        return 'unknown'","3a3aa73b":"train_df['StadiumType'] = train_df['StadiumType'].apply(group_stadium_types)","194852f3":"weather = pd.DataFrame(train_df['GameWeather'].value_counts())\npd.options.display.max_rows=100\nweather","ac4a5752":"def group_game_weather(weather):\n    rain = [\n        'Rainy', 'Rain Chance 40%', 'Showers',\n        'Cloudy with periods of rain, thunder possible. Winds shifting to WNW, 10-20 mph.',\n        'Scattered Showers', 'Cloudy, Rain', 'Rain shower', 'Light Rain', 'Rain'\n    ]\n    overcast = [\n        'Cloudy, light snow accumulating 1-3\"', 'Party Cloudy', 'Cloudy, chance of rain',\n        'Coudy', 'Cloudy, 50% change of rain', 'Rain likely, temps in low 40s.',\n        'Cloudy and cold', 'Cloudy, fog started developing in 2nd quarter',\n        'Partly Clouidy', '30% Chance of Rain', 'Mostly Coudy', 'Cloudy and Cool',\n        'cloudy', 'Partly cloudy', 'Overcast', 'Hazy', 'Mostly cloudy', 'Mostly Cloudy',\n        'Partly Cloudy', 'Cloudy'\n    ]\n    clear = [\n        'Partly clear', 'Sunny and clear', 'Sun & clouds', 'Clear and Sunny',\n        'Sunny and cold', 'Sunny Skies', 'Clear and Cool', 'Clear and sunny',\n        'Sunny, highs to upper 80s', 'Mostly Sunny Skies', 'Cold',\n        'Clear and warm', 'Sunny and warm', 'Clear and cold', 'Mostly sunny',\n        'T: 51; H: 55; W: NW 10 mph', 'Clear Skies', 'Clear skies', 'Partly sunny',\n        'Fair', 'Partly Sunny', 'Mostly Sunny', 'Clear', 'Sunny'\n    ]\n    snow  = ['Heavy lake effect snow', 'Snow']\n    none  = ['N\/A Indoor', 'Indoors', 'Indoor', 'N\/A (Indoors)', 'Controlled Climate']\n    \n    if weather in rain:\n        return 'rain'\n    elif weather in overcast:\n        return 'overcast'\n    elif weather in clear:\n        return 'clear'\n    elif weather in snow:\n        return 'snow'\n    elif weather in none:\n        return 'none'\n    \n    return 'none'","f86831df":"train_df['GameWeather'] = train_df['GameWeather'].apply(group_game_weather)","24c84bad":"train_df['WindSpeed'].value_counts()","ebd01a2f":"def clean_wind_speed(windspeed):\n    \"\"\"\n    This is not a very robust function, \n    but it should do the job for this dataset.\n    \"\"\"\n    ws = str(windspeed)\n    # if it's already a number just return an int value\n    if ws.isdigit():\n        return int(ws)\n    # if it's a range, just take the first value\n    if '-' in ws:\n        return int(ws.split('-')[0])\n    # if there's a space between the number and mph\n    if ws.split(' ')[0].isdigit():\n        return int(ws.split(' ')[0])\n    # if it looks like '10MPH' or '12mph' just take the first part\n    if 'mph' in ws.lower():\n        return int(ws.lower().split('mph')[0])\n    else:\n        return 0","2bd21add":"train_df['WindSpeed'] = train_df['WindSpeed'].apply(clean_wind_speed)","f97592be":"train_df['WindDirection'].value_counts()","f48daa4e":"# This function has been updated to reflect what Subin An (https:\/\/www.kaggle.com\/subinium) mentioned in comments below.\n# WindDirection is indicated by the direction that wind is flowing FROM - https:\/\/en.wikipedia.org\/wiki\/Wind_direction\n\ndef clean_wind_direction(wind_direction):\n    wd = str(wind_direction).upper()\n    if wd == 'N' or 'FROM N' in wd:\n        return 'north'\n    if wd == 'S' or 'FROM S' in wd:\n        return 'south'\n    if wd == 'W' or 'FROM W' in wd:\n        return 'west'\n    if wd == 'E' or 'FROM E' in wd:\n        return 'east'\n    \n    if 'FROM SW' in wd or 'FROM SSW' in wd or 'FROM WSW' in wd:\n        return 'south west'\n    if 'FROM SE' in wd or 'FROM SSE' in wd or 'FROM ESE' in wd:\n        return 'south east'\n    if 'FROM NW' in wd or 'FROM NNW' in wd or 'FROM WNW' in wd:\n        return 'north west'\n    if 'FROM NE' in wd or 'FROM NNE' in wd or 'FROM ENE' in wd:\n        return 'north east'\n    \n    if 'NW' in wd or 'NORTHWEST' in wd:\n        return 'north west'\n    if 'NE' in wd or 'NORTH EAST' in wd:\n        return 'north east'\n    if 'SW' in wd or 'SOUTHWEST' in wd:\n        return 'south west'\n    if 'SE' in wd or 'SOUTHEAST' in wd:\n        return 'south east'\n\n    return 'none'","a8beac23":"train_df['WindDirection'] = train_df['WindDirection'].apply(clean_wind_direction)","4a11a292":"train_df['WindDirection'].value_counts()","747fe0bb":"train_df['Humidity'].fillna(train_df['Humidity'].mean(), inplace=True)\ntrain_df['Temperature'].fillna(train_df['Temperature'].mean(), inplace=True)","573a566e":"train_df['FieldPosition'].value_counts()","0e1d8a1a":"train_df['FieldPosition'].isnull().sum()","0160068a":"train_df[ train_df['YardLine'] == 50 ].shape[0]","b3da2dfa":"train_df['FieldPosition'] = np.where(train_df['YardLine'] == 50, train_df['PossessionTeam'], train_df['FieldPosition'])","96aa7a1a":"na_map = {\n    'Orientation': train_df['Orientation'].mean(),\n    'Dir': train_df['Dir'].mean(),\n    'DefendersInTheBox': math.ceil(train_df['DefendersInTheBox'].mean()),\n    'OffenseFormation': 'UNKNOWN'\n}\n\ntrain_df.fillna(na_map, inplace=True)","1bb0c482":"train_df['DefendersInTheBox'].value_counts()","7fd9a83a":"train_df.isnull().sum()","be89f074":"columns_to_plot = [\n     'X', 'Y', 'S', 'A',\n    'Dis', \n    'Orientation', \n    'Dir',\n    'YardLine', \n    'HomeScoreBeforePlay',\n    'VisitorScoreBeforePlay',\n    'OffenseFormation',\n    'DefendersInTheBox',\n    'Yards',\n    'PlayerHeight',\n    'PlayerWeight',\n    'PlayerBirthDate',     \n    'PlayerCollegeName',\n    'Position',\n    'Week',\n    'Stadium',\n    'Location',\n    'StadiumType',\n    'Turf',\n    'GameWeather',\n    'Temperature',\n    'Humidity',\n    'WindSpeed',\n    'WindDirection',\n]\n\n# Plot the distribution of each feature\ndef plot_distribution(dataset, cols=5, width=20, height=25, hspace=0.4, wspace=0.5):\n    \"\"\"\n    Plot distributions for each column in a dataset.\n    Seaborn countplots are used for categorical data and distplots for numerical data\n\n    args:\n    ----\n    dataset {dataframe} - the data that will be plotted\n    cols {int} - how many distributions to plot for each row\n    width {int} - how wide each plot should be\n    height {int} - how tall each plot should be\n    hspace {float} - horizontal space between plots\n    wspace {float} - vertical space between plots \n    \"\"\"\n    # plot styling\n    plt.style.use('fivethirtyeight')\n    fig = plt.figure(figsize=(width, height))\n    fig.subplots_adjust(left=None, bottom=None, right=None, top=None, wspace=wspace, hspace=hspace)\n    # calculate rows needed\n    rows = math.ceil(float(dataset.shape[1]) \/ cols)\n    # create a countplot for top 20 categorical values\n    # and a distplot for all numerical values\n    for i, column in enumerate(dataset.columns):\n        ax = fig.add_subplot(rows, cols, i + 1)\n        ax.set_title(column)\n        if dataset.dtypes[column] == np.object:\n            # grab the top 10 for each countplot\n            g = sns.countplot(y=column, \n                              data=dataset,\n                              order=dataset[column].value_counts().index[:10])\n            # make labels only 20 characters long and rotate x labels for nicer displays\n            substrings = [s.get_text()[:20] for s in g.get_yticklabels()]\n            g.set(yticklabels=substrings)\n            plt.xticks(rotation=25)\n        else:\n            g = sns.distplot(dataset[column])\n            plt.xticks(rotation=25)\n    \nplot_distribution(train_df[columns_to_plot], cols=3, width=30, height=50, hspace=0.45, wspace=0.5)","9124608e":"# reference: https:\/\/www.kaggle.com\/sudalairajkumar\/simple-exploration-notebook-nfl\n\nrushing_df = train_df[ train_df['NflId'] == train_df['NflIdRusher']]\nprint(rushing_df.shape)\nrushing_df.head()","272c11d9":"rushing_df['Position'].value_counts()","1e1cc2a6":"rushing_df[rushing_df['Position'] == 'DE']","6313663e":"rushing_df[rushing_df['Position'] == 'DT']","589a31ce":"rushing_df[rushing_df['Position'] == 'CB']","bdb8f22b":"plt.figure(figsize=(12, 6))\nsns.scatterplot(x='S', y='Yards', data=rushing_df, color='b')\nplt.xlabel('Speed of Rusher')\nplt.ylabel('Yards Gained')\nplt.title('Running Speed vs Yards Gained', fontsize=24)\nplt.show()","ddaa4823":"plt.figure(figsize=(12, 6))\nsns.scatterplot(x='A', y='Yards', data=rushing_df, color='r')\nplt.xlabel('Acceleration of Rusher')\nplt.ylabel('Yards Gained')\nplt.title('Rusher Acceleration vs Yards Gained', fontsize=24)\nplt.show()","187e20cf":"plt.figure(figsize=(12, 6))\nsns.scatterplot(x='Dis', y='Yards', data=rushing_df, color='g')\nplt.xlabel('Distance Traveled')\nplt.ylabel('Yards Gained')\nplt.title('Distance Traveled vs Yards Gained', fontsize=24)\nplt.show()","02c7ef52":"plt.figure(figsize=(20, 6))\nsns.boxplot(x='Distance', y='Yards', data=rushing_df, color='dodgerblue')\nplt.xlabel('Yards Needed For First Down')\nplt.ylabel('Yards Gained')\nplt.title('Yards Needed for a First Down vs Yards Gained', fontsize=24)\nplt.show()","5cd3f1b4":"plt.figure(figsize=(20, 10))\nsns.boxplot(x='DefendersInTheBox', y='Yards', data=rushing_df[rushing_df['DefendersInTheBox'] > 3], color='dodgerblue')\nplt.xlabel('Defenders in the Box')\nplt.ylabel('Yards Gained')\nplt.title('Defenders in the Box vs Yards Gained', fontsize=24)\nplt.show()","776d24c5":"plt.style.use('ggplot')\n\nkws = dict(linewidth=.9)\n\ng = sns.FacetGrid(train_df, col='OffenseFormation', col_wrap=3, size=8, aspect=.7, sharex=False)\ng = (g.map(sns.boxplot, 'DefendersInTheBox', 'Yards', **kws)\n     .set_titles(\"{col_name}\")\n     .fig.subplots_adjust(wspace=.1, hspace=.2))\n# for ax in g.axes.flat:\n#   ax.set_title(ax.get_title().split(' = ')[1])\n#   for label in ax.get_xticklabels():\n#     label.set_rotation(90)","b30f8791":"## Multivariate Analysis","f503c80f":"The same seems to be true here. At the 1 yard line and trying to punch in a touchdown with a big man.","5be5cefc":"#### Temperature and Humidity\n\nFor temperature and humidity, we'll use the mean.","448f8582":"For corner backs, it seems to be a different scenario. These 3 players can be used on both offense and defense, but are primarily defensive skill players. We see quite a larger proportion of big plays here, potentially because these are trick plays or interesting formations that are not seen very often by the defense.","e4914f3c":"# NFL EDA FTW\n\n### Kaggle Description\n\nAmerican football is a complex sport. From the 22 players on the field to specific characteristics that ebb and flow throughout the game, it can be challenging to quantify the value of specific plays and actions within a play. Fundamentally, the goal of football is for the offense to run (rush) or throw (pass) the ball to gain yards, moving towards, then across, the opposing team\u2019s side of the field in order to score. And the goal of the defense is to prevent the offensive team from scoring.\n\nIn the National Football League (NFL), roughly a third of teams\u2019 offensive yardage comes from run plays. Ball carriers are generally assigned the most credit for these plays, but their teammates (by way of blocking), coach (by way of play call), and the opposing defense also play a critical role. Traditional metrics such as \u2018yards per carry\u2019 or \u2018total rushing yards\u2019 can be flawed; in this competition, the NFL aims to provide better context into what contributes to a successful run play.\n\nAs an \u201carmchair quarterback\u201d watching the game, you may think you can predict the result of a play when a ball carrier takes the handoff - but what does the data say? In this competition, you will develop a model to predict how many yards a team will gain on given rushing plays as they happen. You'll be provided game, play, and player-level data, including the position and speed of players as provided in the NFL\u2019s Next Gen Stats data. And the best part - you can see how your model performs from your living room, as the leaderboard will be updated week after week on the current season\u2019s game data as it plays out.\n\nDeeper insight into rushing plays will help teams, media, and fans better understand the skill of players and the strategies of coaches. It will also assist the NFL and its teams evaluate the ball carrier, his teammates, his coach, and the opposing defense, in order to make adjustments as necessary.\n\nAdditionally, the winning model will be provided to the NFL\u2019s Next Gen Stats group to potentially share with teams. You could help the NFL Network generate models to use during games, or for pre-game\/post-game breakdowns.\n\n### About This Competition\n\nThis dataset contains Next Gen Stats tracking data for running plays. You must use features known at the time when the ball is handed off (**TimeHandoff**) to forecast the yardage gained on that play (**PlayId**).\n\nBecause this is a time-series code competition that will be evaluated on future data, you will receive data and make predictions with a time-series API. This API provides plays in the time order in which they occurred in a game. Refer to the starter notebook here for an example of how to complete a submission.","9f3c43a0":"From this single sample, it looks like the Los Angeles Chargers let Melvin Ingram - a primarily defensive player - rush the football from the 1 yard line to try and punch in a touchdown. This doesn't happen very often, so there seems to be only one example of it during the season. That makes sense and is an interesting observation.","dd600379":"### Observations\n+ Wow! Some of the outliers here are interesting. \n+ There's a 153 lb player in the NFL? I have to know who that is.\n+ Also, the max number of quarters if 5? That clearly doesn't make sense and might be a mistake (unless they count overtime).\n+ Speed and acceleration of 0 seem interesting, so we'll examine that in more depth later on.\n+ We're only looking at 2017-2018 data.","dddebeb7":"#### WindSpeed and WindDirection","a0f03435":"#### Next up will be GameWeather.\n\n","1b2e7d88":"### Evaluation\n\nSubmissions will be evaluated on the Continuous Ranked Probability Score (CRPS). For each PlayId, you must predict a cumulative probability distribution for the yardage gained or lost. In other words, each column you predict indicates the probability that the team gains <= that many yards on the play. \n\nThe CRPS is computed as follows:\n\n$$ C = \\frac{1}{199N} \\sum_{m=1}^{N} \\sum_{n=-99}^{99} (P(y \\le n) -H(n - Y_m))^2 $$\n\nwhere P is the predicted distribution, N is the number of plays in the test set, Y is the actual yardage and H(x) is the Heaviside step function (H(x)=1 for x\u22650 and zero otherwise).\n\nThe submission will not score if any of the predicted values has\n\n$$ P(y \\le k) > P(y \\le k+1) $$\n\nfor any k (i.e. the CDF must be non-decreasing).","0accdc38":"## Modeling\n\n...more to come here","77346aa5":"### Observations\n+ Rushing speed and acceleration increase see a slight increase in total yards gained, but not much.\n+ As rusher travels a larger distance, they tend to gain more yards - up to a point - after which the total yards gained declines. This may be due to sweep plays where the rusher is traveling sideways as fast as possible to get around the defense before heading upfield.\n+ We see a larger number of yards gained when 10 yards are needed for a first down. That may be the result of a few different scenarios. Whenever a team gets a first down, they need to travel 10 yards from their current spot to gain another first down by default.\n   + Perhaps on first down, when a team's offense is rolling, they hand the ball off and gain a significant chunk of yards multiple times. \n   + Or perhaps when teams realize that the passing game isn't working, they hand the ball off on 3rd and ten and break a big run\n   + Or since more plays happen when 10 yards are needed for a first down, we're just seeing a much larger sample size of rushes that covers a wider span of outcomes.\n+ Few big rushing plays are seen when more than 20 yards are needed. This is probably due to the defense playing a soft zone and ensuring that a first down is not achieved, even if the rusher picks up between 10-15 yards on the play. As long as they don't get a first down, the defense is satisfied.\n","bcf3a51b":"## To Be Continued...","250cd629":"## Summary Statistics","5a4f8eb2":"### Observations\n+ Most plays start at the 25 yard line (where kickoffs place the ball)\n+ Singleback and Shotgun formations dominate plays\n+ Pretty much either 6, 7, or 8 players in the box every play.\n+ Nothing super interesting about X, Y, S, A, Dis, Orientation, Dir, or Yards\n+ PlayerWeight has an interesting dip between the 270-290 range. We see very few players with this weight potentially because they're too small to be lineman, and too massive to play linebacker\/defensive end. The skills players seem to have a bimodal distribution - potentially representing skill players who are big bruisers, and skill players who are finesse and speed oriented.\n+ The top birth dates are between 1988-1993, or players who are between 25-31.\n+ Players most often come from an SEC school or big names like Ohio State or Note Dame.\n+ Games are often played outdoor, on grass, with overcast or clear weather.\n+ The temperature is most often 60 degrees, and the humidity has a spike at zero, and then a larger area between 40 and 80.","8efbc6b5":"## Univariate Analysis","bf6ad44d":"### Observations\n+ A few columns with missing values\n+ WindSpeed, WindDirection, Temperature, GameWeather, Humidity, StadiumType, and FieldPosition are the columns missing large quantities.\n+ A few columns that server as identifiers and can potentially be ignored.\n+ Player height should be converted to a numerical value.","088d216c":"Since that seems to be true, we'll just use whatever team had possession to fill in that value.","2cdde8b0":"### Observations\n+ We have some weird values here\n+ We'll take the lower end for any range of values and set any non numerical values to 0","3872a3d2":"#### FieldPosition\n\nFor FieldPosition, my guess is that all the null values represent the fact that the ball is on the 50 yard line.","e2468dfb":"We'll start by looking at comparisons between Yards gained (the target variable) and other features.\n\nFirst, let's look at a subset of data where the player is the one actually running the football.","acd9e62c":"### Observations\n+ Quite a few typos.\n+ Many of the same stadium types are represented differently.\n+ Is Cloudy a stadium type?\n+ Heinz Field is home to the Pittsburgh Steelers and is an Outdoor stadium.\n\nLet's group them as best we can. All retractable roof stadiums will considered to be indoor stadiums (unless indicated otherwise), and if the roof isn't specified we'll consider them to be closed roof.","51a5ab41":"### Columns\n\nEach row in the file corresponds to a single player's involvement in a single play. The dataset was intentionally joined (i.e. denormalized) to make the API simple. All the columns are contained in one large dataframe which is grouped and provided by PlayId.\n\n+ **GameId** - a unique game identifier\n+ **PlayId** - a unique play identifier\n+ **Team** - home or away\n+ **X** - player position along the long axis of the field. See figure below.\n+ **Y** - player position along the short axis of the field. See figure below.\n+ **S** - speed in yards\/second\n+ **A** - acceleration in yards\/second^2\n+ **Dis** - distance traveled from prior time point, in yards\n+ **Orientation** - orientation of player (deg)\n+ **Dir** - angle of player motion (deg)\n+ **NflId** - a unique identifier of the player\n+ **DisplayName** - player's name\n+ **JerseyNumber** - jersey number\n+ **Season** - year of the season\n+ **YardLine** - the yard line of the line of scrimmage\n+ **Quarter** - game quarter (1-4)\n+ **GameClock** - time on the game clock\n+ **PossessionTeam** - team with possession\n+ **Down** - the down (1-4)\n+ **Distance** - yards needed for a first down\n+ **FieldPosition** - which side of the field the play is happening\n+ **HomeScoreBeforePlay** - home team score before play started\n+ **VisitorScoreBeforePlay** - visitor team score before play started\n+ **NflIdRusher** - the NflId of the rushing player\n+ **OffenseFormation** - offense formation\n+ **OffensePersonnel** - composition of offense\n+ **DefendersInTheBox** - number of defenders in the box\n+ **DefensePersonnel** - composition of defense\n+ **PlayDirection** - direction the play is headed\n+ **TimeHandoff** - UTC time of the handoff\n+ **TimeSnap** - UTC time of the snap\n+ **Yards** - the yardage gained on the play (you are predicting this)\n+ **PlayerHeight** - player height (ft-in)\n+ **PlayerWeight** - player weight (lbs)\n+ **PlayerBirthDate** - birth date (mm\/dd\/yyyy)\n+ **PlayerCollegeName** - where the player attended college\n+ **HomeTeamAbbr** - home team abbreviation\n+ **VisitorTeamAbbr** - visitor team abbreviation\n+ **Week** - week into the season\n+ **Stadium** - stadium where the game is being played\n+ **Location** - city where the game is being player\n+ **StadiumType** - description of the stadium environment\n+ **Turf** - description of the turf\n+ **GameWeather** - description of the game weather\n+ **Temperature** - temperature (deg F)\n+ **Humidity** - humidity\n+ **WindSpeed** - wind speed in miles\/hour\n+ **WindDirection** - wind direction","a1e5da1f":"#### Orientation, Dir, DefendersInTheBox, OffenseFormation\n\nFor the last null values, we'll handle them in a few ways.\n+ For Orientation, Dir, and DefendersInTheBox, we'll use the mean value.\n+ For OffenseFormation, we'll use 'UNKNOWN'","9de1c475":"## Data Cleaning and Handling Missing Values \n\nWe'll go through the columns with missing values in pieces, starting with stadium type.\n\n#### Stadium Type","b03825cc":"### Observations\n+ This is interesting. DE is a defensive end, DT is a defensive tackle, and CB is a corner back. Those are all defensive positions. For them to rush the ball would mean they either are playing both offense and defense (and defense is their primary listed position), or they had an interception and this dataset is counting those plays as rushing plays.\n+ If anyone has insight here please comment below!"}}