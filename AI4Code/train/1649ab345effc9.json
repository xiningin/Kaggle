{"cell_type":{"2457ede8":"code","803e458b":"code","ba52a414":"code","f46ed35a":"code","8770f140":"code","d0294f25":"code","657e6eb3":"code","acc74df8":"code","5c649eb7":"code","684edf2c":"code","08c82e5a":"markdown","53fad00f":"markdown","89da7668":"markdown","b23f71b1":"markdown","70aaf865":"markdown","2d0f1a71":"markdown","59129902":"markdown"},"source":{"2457ede8":"import os\nimport pandas as pd\nfrom sklearn.tree import DecisionTreeRegressor\nfrom sklearn.model_selection import train_test_split\nfrom sklearn import metrics\nfrom sklearn.ensemble import RandomForestRegressor","803e458b":"def create_folders():\n    directories = []\n    \n    data_dir = 'data'\n    directories.append(data_dir)\n    \n    for directory in directories: \n        if not os.path.exists(directory):\n            os.makedirs(directory)\n            print(directory, 'succesfully created.')\n        else:\n            print(directory, 'already exists.')","ba52a414":"def get_category_dict(item_categories): #items.csv to python dict\n    item_category_dict = {}\n    keys = item_categories['item_id']\n    values = item_categories['item_category_id']\n    item_category_dict = dict(zip(keys, values))\n    return item_category_dict\n\ndef add_item_category_id_by_item_id(data):\n    item_categories = pd.read_csv('\/kaggle\/input\/competitive-data-science-predict-future-sales\/items.csv')\n    cat_dict = get_category_dict(item_categories)\n    all_item_categories = []\n    for item_id in data['item_id']:\n        all_item_categories.append(cat_dict[item_id])\n    data['item_category_id'] = all_item_categories\n    return data\n    \ndef write_csv_predicting_item_price_train():\n    data = pd.read_csv('data\/month_based_salesTrainData.csv')\n    print('\\nwrite_csv_predicting_item_price_train PRE:\\n',data.head(5))\n        \n    data = data.drop(['item_cnt_day'],axis=1)\n    data = add_item_category_id_by_item_id(data)\n    data.to_csv('data\/predicting_item_price_train.csv', index = False)\n    \n    print('\\nwrite_csv_predicting_item_price_train POST:\\n',data.head(5))\n    \ndef write_csv_predicting_item_price_test():\n    data = pd.read_csv('\/kaggle\/input\/competitive-data-science-predict-future-sales\/test.csv')\n    print('\\nwrite_csv_predicting_item_price_test PRE:\\n',data.head(5))\n    \n    data['date_block_num'] = 34\n    data = add_item_category_id_by_item_id(data)\n    data.to_csv('data\/predicting_item_price_test.csv', index = False)\n    \n    print('\\nwrite_csv_predicting_item_price_test POST:\\n',data.head(5))\n    \ndef write_csv_predicting_item_cnt_day_train():\n    data = pd.read_csv('data\/month_based_salesTrainData.csv')\n    print('\\nwrite_csv_predicting_item_price_test PRE:\\n',data.head(5))\n    \n    data = add_item_category_id_by_item_id(data)\n    data.to_csv('data\/predicting_item_cnt_day_train.csv', index = False)\n    \n    print('\\nwrite_csv_predicting_item_price_test POST:\\n',data.head(5))\n    \ndef write_csv_month_based_salesTrainData():\n    \n    data = pd.read_csv('\/kaggle\/input\/competitive-data-science-predict-future-sales\/sales_train.csv')\n    print('\\nwrite_csv_month_based_salesTrainData PRE:\\n', data.head(5))\n    \n    data = data[data['item_cnt_day'] > 0]\n    new_data = pd.DataFrame()\n    uniques_month_nums = data['date_block_num'].unique()\n    for month_num in uniques_month_nums:\n        month = data[data['date_block_num'] == month_num]\n        agg_overlappeds = month.groupby(['item_id','shop_id'], as_index = False).agg({'item_cnt_day': 'sum', 'item_price': 'mean'})\n        agg_overlappeds['date_block_num'] = month_num\n        new_data = pd.concat([new_data,agg_overlappeds])\n    new_data.to_csv('data\/month_based_salesTrainData.csv',index=False)\n    \n    print('\\nwrite_csv_month_based_salesTrainData POST:\\n', new_data.head(5))\n\ndef prepare_datas():\n    write_csv_month_based_salesTrainData()\n    write_csv_predicting_item_price_train()\n    write_csv_predicting_item_price_test()\n    write_csv_predicting_item_cnt_day_train()\n    print('All the datas are prepared')\n","f46ed35a":"create_folders()\nprepare_datas()","8770f140":"class DTR:\n    def __init__(self):\n        pass\n    def get_accuracy_for_predicting_item_price(self):\n        data = pd.read_csv('data\/predicting_item_price_train.csv')\n        data = data.astype({'item_price':str})\n        x = data.drop(['item_price'], axis=1).to_numpy()\n        y = data['item_price'].to_numpy()\n\n\n        reg_decT = DecisionTreeRegressor(random_state=0)\n\n        x_train, x_test, y_train, y_test = train_test_split(x, y,random_state=10, test_size=0.2)\n\n        reg_decT.fit(x_train, y_train)\n        y_pred = reg_decT.predict(x_test)\n        y_pred = y_pred.tolist()\n        r2_score = metrics.r2_score(y_test, y_pred)\n        print('Predicting item_price r_2 score:', r2_score)\n\n    def get_accuracy_for_predicting_item_cnt_day(self):\n        data = pd.read_csv('data\/predicting_item_cnt_day_train.csv')\n        \n        data = data.astype({'item_cnt_day':str})\n        x = data.drop(['item_cnt_day'], axis=1).to_numpy()\n        y = data['item_cnt_day'].to_numpy()\n\n\n        reg_decT = DecisionTreeRegressor(random_state=0)\n\n        x_train, x_test, y_train, y_test = train_test_split(x, y,random_state=10, test_size=0.2)\n        reg_decT.fit(x_train, y_train)\n        y_pred = reg_decT.predict(x_test)\n        y_pred = y_pred.tolist()\n        r2_score = metrics.r2_score(y_test, y_pred)\n        print('Predicting item_cnt_day r_2 score:', r2_score)\n        \n    def predict_item_price_on_testData(self):\n        data_train = pd.read_csv('data\/predicting_item_price_train.csv')\n        print('\\npredict_item_price_on_testData PRE:\\n', data_train.head(5))\n        \n        data_train = data_train.astype({'item_price':str})\n        x_train = data_train.drop(['item_price'], axis=1).to_numpy()\n        y_train = data_train['item_price'].to_numpy()\n\n        data_test = pd.read_csv('data\/predicting_item_price_test.csv')\n        x_test = data_test.drop(['ID'], axis=1).to_numpy()\n\n        reg_decT = DecisionTreeRegressor(random_state=0)\n\n        reg_decT.fit(x_train, y_train)\n\n        y_pred = reg_decT.predict(x_test)\n        y_pred = y_pred.tolist()\n\n        data_test['item_price'] = y_pred\n        data_test.to_csv('data\/testData_with_item_price.csv', index=False)\n        print('testData_with_item_price.csv succesfully created.')\n        \n        print('\\npredict_item_price_on_testData POST:\\n', data_test.head(5))","d0294f25":"dtr = DTR()\ndtr.get_accuracy_for_predicting_item_price()\ndtr.predict_item_price_on_testData()\n\ndtr.get_accuracy_for_predicting_item_cnt_day()","657e6eb3":"class RFR:\n    def __init__(self):\n        pass\n    \n    def get_accuracy_for_predicting_item_cnt_day(self):\n        data = pd.read_csv('data\/predicting_item_cnt_day_train.csv')\n        data = data.astype({'item_cnt_day':str})\n        x = data.drop(['item_cnt_day'], axis=1).to_numpy()\n        y = data['item_cnt_day'].to_numpy()\n\n\n        rf_reg = RandomForestRegressor(n_estimators=10,random_state=0)\n\n        x_train, x_test, y_train, y_test = train_test_split(x, y,random_state=10, test_size=0.2)\n\n        rf_reg.fit(x_train, y_train)\n        y_pred = rf_reg.predict(x_test)\n        y_pred = y_pred.tolist()\n        r2_score = metrics.r2_score(y_test, y_pred)\n        print('r_2 score:', r2_score)\n        \n    def predict_item_cnt_day_on_testData_with_item_price(self):\n        data_train = pd.read_csv('data\/predicting_item_cnt_day_train.csv')\n        print('\\npredict_item_cnt_day_on_testData_with_item_price PRE:\\n', data_train.head(5))\n        \n        x_train = data_train.drop(['item_cnt_day'], axis=1).to_numpy()\n        y_train = data_train['item_cnt_day'].to_numpy()\n\n        data_test = pd.read_csv('data\/testData_with_item_price.csv')\n        x_test = data_test.drop(['ID'], axis=1).to_numpy()\n\n        rf_reg = RandomForestRegressor(n_estimators=10,random_state=0)\n\n        rf_reg.fit(x_train, y_train)\n\n        y_pred = rf_reg.predict(x_test)\n        y_pred = y_pred.tolist()\n\n        data_test['item_cnt_month'] = y_pred\n        data_test.to_csv('data\/testData_with_item_price_and_item_cnt_day.csv', index=False)\n        print('\\npredict_item_cnt_day_on_testData_with_item_price POST:\\n', data_test.head(5))\n        ","acc74df8":"rfr = RFR()\nrfr.get_accuracy_for_predicting_item_cnt_day()\nrfr.predict_item_cnt_day_on_testData_with_item_price()","5c649eb7":"def submission_final():\n    data = pd.read_csv('data\/testData_with_item_price_and_item_cnt_day.csv')\n    data = data.loc[:,['ID', 'item_cnt_month']]\n    data['item_cnt_month'] = data['item_cnt_month'].clip(0,20)\n    data.to_csv('submission.csv', index=False)\n    print('submission.csv succesfully created.')\n    print('submission data summary:\\n', data.iloc[:,1:].head(15))","684edf2c":"submission_final()","08c82e5a":"### *DTR methods using*\nBurada item_price tahmininin test verisine eklenmesi i\u00e7in Decision Tree Regressor denemelerine yer verilmektedir.","53fad00f":"**Decision Tree Regressor Class**","89da7668":"# Data Preparation\n\nBurada daha sonraki kullan\u0131mlarda h\u0131z kazanmak ve okunurlu\u011fu art\u0131rmak amac\u0131yla yap\u0131lacak ara i\u015flemler i\u00e7in veriler haz\u0131rlanm\u0131\u015f ve **data** klas\u00f6r\u00fc alt\u0131na .csv format\u0131nda kay\u0131t edilmi\u015ftir. Olu\u015fturulan dosyalara ve a\u00e7\u0131klamalar\u0131na a\u015fa\u011f\u0131da yer verilmi\u015ftir.\n1. month_based_sales_train.csv: G\u00fcn baz\u0131ndaki verilerin ayl\u0131k baza d\u00f6n\u00fc\u015ft\u00fcr\u00fclm\u00fc\u015f halini i\u00e7erir.\n1. predicting_item_price_train.csv: item_price tahmini i\u00e7in olu\u015fturulan train seti i\u00e7erir.\n1. predicting_item_price_test.csv: item_price tahminini test datas\u0131na uygulanmas\u0131n\u0131 i\u00e7erir.\n1. predicting_item_cnt_day_train.csv: item_cnt_month tahmini i\u00e7in train veri setini i\u00e7erir.\n1. testData_with_item_price.csv: testData's\u0131na tahmin edilen item_price'\u0131n eklenmi\u015f halini i\u00e7erir.\n1. testData_with_item_price_and_item_cnt_day.csv: test datas\u0131na item_price ve item_cnt s\u00fctunlar\u0131n\u0131n eklenmesini i\u00e7erir.","b23f71b1":"**all imports**","70aaf865":"### Random Forest Regression Methods Using\n\nBurada Decision Tree Regressor ile yeterli ba\u015far\u0131 al\u0131namayan item_cnt s\u00fctunun prediction accuracy \u00e7\u0131kt\u0131sana ve Random Forest uygulamalar\u0131na yer verilmi\u015ftir.","2d0f1a71":"**initialize folders and csv files**","59129902":"**finalize the mission**"}}