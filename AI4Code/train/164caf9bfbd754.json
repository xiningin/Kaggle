{"cell_type":{"57422ebf":"code","5223bfd3":"code","b39bccc2":"code","b3fd8492":"code","3c25b21f":"code","7c0d4f97":"code","b0475108":"code","516764e3":"code","f887e86e":"code","3f9ec3b0":"code","fd4c0a8d":"code","f5ddd48a":"code","3b1b38ba":"code","58452d49":"code","df9e47d6":"code","296abb6d":"code","dbfbff7d":"code","02591e9e":"code","cde78a3b":"code","90390d9e":"code","4cd23cd2":"code","379fc6aa":"code","cf3c2a50":"code","f59360a1":"code","5268fdd5":"code","60a5f732":"code","f2ac178a":"code","9ce4908a":"code","7c532d24":"code","5507ffac":"code","00a22a18":"code","3d331ce1":"code","d726c757":"code","22745ec5":"code","1f889c71":"code","6d3f09f6":"code","4c2c1e46":"code","88617990":"code","82abb4eb":"code","aeb951b3":"code","3ac10792":"code","a184cdd9":"code","ba2cb36e":"code","b316fbad":"code","5e9d3a1c":"code","441e68d6":"code","818fd4c1":"code","04ee89f6":"code","7e408e50":"code","ba109dbd":"code","d2ae8aa0":"code","7b326743":"code","5dc7c1fb":"code","e2283601":"code","399c2445":"code","e0f23e4d":"code","4e2f11d3":"code","a2735e71":"code","cfd7184e":"code","d5d4f10a":"code","138a746b":"code","9923e8b0":"code","1869520d":"markdown","d3995aee":"markdown","26b32c93":"markdown","8187c95d":"markdown","fcabfd65":"markdown","47846f80":"markdown","03179bec":"markdown","d5d2dfe1":"markdown","77ecc08e":"markdown","246ab508":"markdown","ee4cbf9e":"markdown","48520f71":"markdown","e6bd77d8":"markdown"},"source":{"57422ebf":"range(0,20) #It creates a range between 0 and 20","5223bfd3":"print(*range(0,20)) # You can print with *","b39bccc2":"new_list = list(range(0,20))","b3fd8492":"new_list","3c25b21f":"print(*range(5,12))","7c0d4f97":"print(*range(15))","b0475108":"print(*range(0,20,2))","516764e3":"print(*range(20,0,-1)) #Reverse the numbers with -1","f887e86e":"\"a\" in \"hello\" # a is not in hello","3f9ec3b0":"\"i\" in \"time\"","fd4c0a8d":"4 in [1,2,3,4]","f5ddd48a":"3 in range(5)","3b1b38ba":"4 in (1,2,3)","58452d49":"incomes = [2000,4000,7000,5000]\nprint(incomes)","df9e47d6":"incomes[1]","296abb6d":"len(incomes)","dbfbff7d":"for i in incomes: # i is a temporary value\n    print(i) # It prints every element in incomes","02591e9e":"names = [\"Josh\",\"Katy\",\"Hurry\"]\nprint(names)","cde78a3b":"len(names)","90390d9e":"for name in names:\n    print(name)","4cd23cd2":"for name in range(len(names)):\n    print(names[name])","379fc6aa":"grades = [50,70,90,45]","cf3c2a50":"total = 0\n\nfor i in range(len(grades)):\n    total = total+grades[i] #or total+=grades[i]","f59360a1":"total","5268fdd5":"avg = total \/ len(grades)\nprint(\"Average is\", avg)","60a5f732":"grades","f2ac178a":"for i in range(len(grades)):\n    grades[i]-=5","9ce4908a":"grades","7c532d24":"new_list = [1,2,3,4,5,6,7,8,9] # Print all even elements\n\nfor element in new_list:\n    if element % 2 == 0:\n        print(element)\n","5507ffac":"for say\u0131 in range(1,20): # for and range\n    print(\"* \" * say\u0131)","00a22a18":"py = \"Python\"","3d331ce1":"for i in py:\n    print(i)","d726c757":"for ch in py:\n    print(ch*3)","22745ec5":"new_list = [[1,2],[3,4],[5,6],[7,8]]\nnew_list","1f889c71":"for e in new_list:\n    print(e)","6d3f09f6":"new_list = [1,2,3,4,5,6,7,8,9] # continue will pass 3 and 5.\n\n\nfor i in new_list:\n    if (i == 3 or i == 5):\n        continue\n    print(\"i:\",i)","4c2c1e46":"incomes = [7000,8000,5000,9000] \nincomes","88617990":"# We want to make a salary increase if income is lower than 8000\n\nfor i in range(len(incomes)):\n    if incomes[i]>=8000:\n        continue\n    else:\n        incomes[i]+=1000","82abb4eb":"incomes","aeb951b3":"num = [1,4,6,21,4,100,35,2,1,2,43,2,2]\nnum","3ac10792":"for i in num: # Break when found 100\n    print(i)\n    if i==100:\n        print(\"Highest Number!\")\n        break","a184cdd9":"incomes = [7000,8000,5000,9000] \nincomes","ba2cb36e":"incomes.sort()\nincomes","b316fbad":"for i in range(len(incomes)):\n    print(incomes[i])\n    if incomes[i]>=8000:\n        print(\"8000 is border!\")\n        break","5e9d3a1c":"jobs = [\"ML Engineer\",\"Data Scientist\",\"Researcher\",\"Deep Learning Specialist\"]","441e68d6":"incomes = [7000,11000,6000,9000]","818fd4c1":"zipped = zip(jobs,incomes)","04ee89f6":"list(zipped)","7e408e50":"for j,i in zip(jobs,incomes):\n    print(j,i)","ba109dbd":"dic = {\"Apartment1\": {\"persons\": [\"Josh\",\"Katy\"]},\"Apartment2\": {\"persons\": [\"Mike\",\"Hate\"]}, \n       \"Apartment3\": {\"persons\": [\"Michael\",\"Jone\"]}}","d2ae8aa0":"dic","7b326743":"for i in dic:\n    print(i) # It just prints keys","5dc7c1fb":"for i in dic:\n    j = dic[i]\n    print(i,j)","e2283601":"for i,j in dic.items():\n    print(i,j)","399c2445":"list(dic.values())","e0f23e4d":"list(dic.keys())","4e2f11d3":"# assigning multiple variables at the same time\nx, y = (5,6)","a2735e71":"print(x,y)","cfd7184e":"names = [\"Josh\",\"Kate\",\"Hurry\",\"Bradson\"]\nages = [32,23,56,35]","d5d4f10a":"for n,a in zip(names,ages):\n    print(\"Name: {0} - Age: {1}\".format(n,a))","138a746b":"i = 0 \n\nwhile (i < 10):\n    print(\"Value of i: \",i)\n    i += 1","9923e8b0":"num = 0\n\nwhile num < 10:\n    num += 1\n    if num % 2 == 0:\n        \n        continue\n    \n    print(\"Odd number is \",num)","1869520d":"## For Loop","d3995aee":"## In Operator","26b32c93":"## Content\n\n- range()\n- In Operator\n- For Loop\n- Iterating in Strings\n- Iterating in two(2) dimensional Lists\n- continue\n- break\n- zip()\n- Iteration in a Dictionary\n- Iterating pair values\n- While Loop","8187c95d":"## Iterating in Strings","fcabfd65":"## range()","47846f80":"**Created by Berkay Alan**\n\n**Loops**\n\n**15 of November, 2020**\n\n**For more Tutorial: https:\/\/github.com\/berkayalan**","03179bec":"## While Loop","d5d2dfe1":"## zip()","77ecc08e":"## Iteration in a Dictionary","246ab508":"## Iterating pair values","ee4cbf9e":"## Break","48520f71":"## Continue","e6bd77d8":"## Iterating in two(2) dimensional Lists"}}