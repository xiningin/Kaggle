{"cell_type":{"e8eba773":"code","6a37425b":"code","71885691":"code","512d482f":"code","e3524884":"code","2da734ad":"code","2e6538a4":"code","5637f3af":"code","12beefac":"code","5e9f740d":"code","6325b684":"code","e3dda952":"code","8f313609":"code","b067c413":"code","e8f9b601":"markdown","62aac89c":"markdown","b971b31b":"markdown","a8d567f7":"markdown","e6e959c7":"markdown","40e6d4d0":"markdown","97beb2e5":"markdown","8b742f2a":"markdown","ddf06572":"markdown","919197a9":"markdown","0be86413":"markdown","85b043fe":"markdown"},"source":{"e8eba773":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n        \n        \nimport warnings\nwarnings.filterwarnings(\"ignore\")        \nimport matplotlib\nimport matplotlib.pyplot as plt\nimport matplotlib.ticker as mtick\nimport matplotlib.gridspec as grid_spec\nimport seaborn as sns","6a37425b":"df = pd.read_csv('\/kaggle\/input\/poland-cars-for-sale-dataset\/Car_sale_ads.csv')\n\nplt.figure(figsize=(9,3),dpi=150)\nsns.heatmap(df.isnull())","71885691":"df_car = df.drop(['Vehicle_version', 'Vehicle_generation', 'CO2_emissions', 'Drive','Origin_country', 'First_owner','First_registration_date'], axis=1)\ndf_car = df_car.dropna(axis=0)\nprint(\"Count of null : \", df_car.isnull().sum().sum())","512d482f":"df_car[\"date\"] = pd.to_datetime(df_car['Offer_publication_date'], dayfirst=True) # change Dtype from object to datetime64\ndf_car[\"year_month\"] = df_car['date'].dt.strftime('%Y-%m')\nprint('Offer publication date from :',df_car['date'].min(), \"\/\/ to :\" ,df_car['date'].max(), \"\/\/ format : yyyy-mm-dd hh:mm:ss\")","e3524884":"print(df_car[df_car['Currency'] != 'PLN']['Currency'].unique(), df_car[df_car['Currency'] != 'PLN']['Currency'].count())","2da734ad":"Curr_rate = pd.DataFrame(\n    {'Currency':['PLN', 'PLN', 'PLN' , 'EUR', 'EUR', 'EUR'],\n     'year_month':['2021-03','2021-04','2021-05','2021-03','2021-04','2021-05'],\n     'To_USD':[0.258995, 0.261873, 0.265475, 1.191048, 1.195110, 1.209037] })\n\ndf_car_USD =pd.merge(df_car, Curr_rate, left_on=['Currency', 'year_month'], right_on=['Currency', 'year_month'], how='left')\ndf_car_USD['Price_USD'] = round((df_car_USD['Price'] * df_car_USD['To_USD']), 2)","2e6538a4":"many_sell = df_car_USD['Vehicle_brand'].value_counts()[:20].sort_values(ascending=True)","5637f3af":"fig = plt.figure(figsize=(6,6),dpi=150)\ngs = fig.add_gridspec(1, 1)\ngs.update(wspace=0.05, hspace=0.27)\nax0 = fig.add_subplot(gs[0, 0])\n\nbackground_color = \"#f7f5f7\" #RGBA code - https:\/\/www.hexcolortool.com\/\nhigh_c = '#133b81'\nmid_c = '#57a2ff'\nplt.rcParams[\"font.family\"] = \"monospace\"\n\nfig.patch.set_facecolor(background_color) # figure background color\nax0.set_facecolor(background_color) \n\ndata = many_sell\n\ncolor_map = ['#e7e9e7' for _ in range(20)] # \uc77c\ub2e8 \uce7c\ub77c\ub9f5\uc744 20\uac1c \ub9cc\ub4e4\uc5b4\uc11c \uc804\ubd80\ub2e4 \uac19\uc740 \ud68c\uc0c9\uc73c\ub85c \uce60\ud558\uace0\ncolor_map[15] = color_map[16] = color_map[17] = color_map[18] = color_map[19] = high_c # color highlight \ud558\uc704 3\uac1c\uc5d0 \ub300\ud574 \ud558\uc774\ub77c\uc774\ud2b8 \uc6a9\ncolor_map[10] = color_map[11] = color_map[12] = color_map[13] = color_map[14] = mid_c # color highlight \ud558\uc704 3\uac1c\uc5d0 \ub300\ud574 \ud558\uc774\ub77c\uc774\ud2b8 \uc6a9\n\nax0.barh(data.index, data, \n       edgecolor='darkgray',color=color_map)\n\nfor i in range(0,10):\n    ax0.annotate(list(data.index)[i],  # \uc8fc\uc11d\ub2ec\uae30 = data\uc758 \uc778\ub371\uc2a4\ub294 \uad6d\uac00\uba85\uc774\ub2e4.\n                   xy=(data[i]-(data[i]*0.01), i),  #\uc704\uce58 \uc54c\ub824\uc8fc\uae30 x\ucd95\uc740 \uc57d\uac04 \uc67c\ucabd\uc73c\ub85c y \ucd95\uc740 \uc5ed\uc21c\uc778\uac00\ubcf4\ub2e4\n                   va = 'center', ha='right',fontweight='light', fontfamily='monospace',fontsize=6, color='gray',rotation=0)\n    \nfor i in range(10,15):\n    ax0.annotate(list(data.index)[i],  # \uc8fc\uc11d\ub2ec\uae30 = data\uc758 \uc778\ub371\uc2a4\ub294 \uad6d\uac00\uba85\uc774\ub2e4.\n                   xy=(data[i]-(data[i]*0.01), i),  #\uc704\uce58 \uc54c\ub824\uc8fc\uae30 x\ucd95\uc740 \uc57d\uac04 \uc67c\ucabd\uc73c\ub85c y \ucd95\uc740 \uc5ed\uc21c\uc778\uac00\ubcf4\ub2e4\n                   va = 'center', ha='right',fontweight='light', fontfamily='monospace',fontsize=7, color='black',rotation=0)\n\nfor i in range(15,20):\n    ax0.annotate(list(data.index)[i], \n                   xy=(data[i]-(data[i]*0.01), i), \n                   va = 'center', ha='right',fontweight='bold', fontfamily='monospace',fontsize=8, color='white',rotation=0)\n\nplt.xticks(fontsize = 5)\nax0.axes.get_yaxis().set_ticks([])\n\nfor s in ['top', 'bottom', 'right']:\n    ax0.spines[s].set_visible(False)\n    \nax0.text(0,21,'The most advertised brand in the used car market', fontfamily='sans-serif',fontsize=12,fontweight='bold',color='#323232')\nax0.text(0,20.45,'Poland, from Mar 26 to May 5 2021',fontfamily='sans-serif',fontsize=8,fontweight='light',color='#303030')\n\nplt.show()","12beefac":"Brand_top10 = many_sell.index.tolist()[::-1][:10]","5e9f740d":"Price_dist = df_car_USD[df_car_USD['Vehicle_brand'].isin(Brand_top10)]\nPrice_dist['Vehicle_brand_cat'] = pd.Categorical(Price_dist['Vehicle_brand'], categories=Brand_top10, ordered=True)\nPrice_dist = Price_dist.sort_values('Vehicle_brand_cat')","6325b684":"sns.set_theme(style=\"ticks\")\n\nf, ax = plt.subplots(figsize=(6, 5),dpi=150)\nax.set_xscale(\"log\")\n\n# Plot the orbital period with horizontal boxes\nsns.boxplot(x=\"Price_USD\", y=\"Vehicle_brand\", data=Price_dist,\n            whis=[0, 100], width=0.5, palette=\"vlag\")\n\n# Add in points to show each observation\nsns.stripplot(x=\"Price_USD\", y=\"Vehicle_brand\", data=Price_dist,\n              size=0.3, color=\"0.5\", linewidth=0)\n\n# Tweak the visual presentation\nplt.xticks(fontsize = 7)\nplt.xlabel(\"\")\n\nax.xaxis.grid(True)\nax.set(ylabel=\"\")\nsns.despine(trim=True, left=True)","e3dda952":"sns.set_theme(style=\"white\")\n\n\n# Compute the correlation matrix\ncorr = Price_dist.drop(['Price','Index','To_USD'], axis=1).corr()\n#corr = Price_dist[Price_dist['Vehicle_brand']=='Volkswagen'].corr()\n\n# Generate a mask for the upper triangle\nmask = np.triu(np.ones_like(corr, dtype=bool))\n\n# Set up the matplotlib figure\nf, ax = plt.subplots(figsize=(11, 9))\n\n# Generate a custom diverging colormap\ncmap = sns.diverging_palette(230, 20, as_cmap=True)\n\n# Draw the heatmap with the mask and correct aspect ratio\nsns.heatmap(corr, mask=mask, cmap=\"vlag\", vmax=1, center=0,\n            annot=True, square=True, linewidths=0.5, cbar_kws={\"shrink\": .5})","8f313609":"sns.set_theme(style=\"ticks\")\n\n# Show the results of a linear regression within each dataset\nplot = sns.lmplot(x=\"Power_HP\", y=\"Price_USD\", col=\"Vehicle_brand\", hue=\"Vehicle_brand\", data=Price_dist,\n           col_wrap=2, ci=None, palette=\"muted\", height=4,\n           scatter_kws={\"s\": 50, \"alpha\": 1})\n\nplot.set(ylim=(0, 600000)) # to exclude outlier on BMW\nplot.set(xlim=(0, 800)) # to exclude outlier on Volkswagen\n\nplt.show()","b067c413":"sns.set_theme(style=\"ticks\")\n\n# Show the results of a linear regression within each dataset\nplot = sns.lmplot(x=\"Production_year\", y=\"Price_USD\", col=\"Vehicle_brand\", hue=\"Vehicle_brand\", data=Price_dist,\n           col_wrap=2, ci=None, palette=\"muted\", height=4,\n           scatter_kws={\"s\": 50, \"alpha\": 1})\n\nplot.set(ylim=(0, 500000)) # to exclude outlier on BMW and Merdesdes-benz\n\nplt.show()","e8f9b601":"Many null on \n* 'Vehicle_version', \n* 'Vehicle_generation', \n* 'CO2_emissions', \n* 'Drive',\n* 'Origin_country', \n* 'First_owner',\n* 'First_registration_date' \nThese columns will be dropped for predict\n\nSome null on  \n* 'Mileage_km', \n* 'Power_HP', \n* 'Displacement_cm3', \n* 'Transmission', \n* 'Doors_number'\nrow, which has null, will be deleted for EDA\n","62aac89c":"Price correlated with \n1. Horse Power (it is also highly correlated with Displacement_cm3)\n2. Prodction year ","b971b31b":"# Plot : Horse Power vs. Price","a8d567f7":"246 offers were 'Euro(EUR)', rest of offers are Polish Zloty (PLN)","e6e959c7":"Average currecy rate (based on May 17, 2021) :\n\nUSD per 1 Polish Zloty (PLN)\n* Mar 0.258995 \u2013 31 days\n* Apr 0.261873 \u2013 30 days\n* May 0.265475 \u2013 17 days\n\nUSD per 1 Euro (EUR)\n* Mar 1.191048 \u2013 31 days\n* Apr 1.195110 \u2013 30 days\n* May 1.209037 \u2013 17 days\n\n","40e6d4d0":"# Plot : Production Year vs. Price","97beb2e5":"# Price Distribution on Top 10 Brand","8b742f2a":"# Currency (PLN & EUR) to USD","ddf06572":"# Top 20 Brand","919197a9":"# Loading Data","0be86413":"# Handle Null data","85b043fe":"# Correlation"}}