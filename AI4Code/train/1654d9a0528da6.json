{"cell_type":{"7e5c4050":"code","1976e65c":"code","f21ca9d7":"code","a6fd2281":"code","447366bb":"code","c4bde8f3":"code","f9cb4b50":"code","6ede8e8c":"code","2c9fbb7c":"code","c579e47a":"code","b854112c":"markdown","7a18eeed":"markdown","90d27b64":"markdown","86896fb7":"markdown","1ac77318":"markdown","a5325de4":"markdown","82607d7b":"markdown","26385671":"markdown","1fce81d1":"markdown","c2b621f7":"markdown","3af7c3d5":"markdown","0b4cb142":"markdown","39621786":"markdown","285d3f34":"markdown","e975d84b":"markdown","c947048a":"markdown","ecb97fe9":"markdown","a737428e":"markdown"},"source":{"7e5c4050":"# Check the Python Version \nimport sys  #sys is a built in module that contains many system specific parameters and functions, including version \nprint(sys.version)  ","1976e65c":"print(\"hello world!\")","f21ca9d7":"a = 1 + 2 + 3 + \\\n    4 + 5 + 6 + \\\n    7 + 8 + 9\na","a6fd2281":"#This is an explicit line continuation. In Python, line continuation is implied inside parentheses ( ), brackets [ ], and braces { }. For instance, we can implement the above multi-line statement as:\n\na = (1 + 2 + 3 +\n    4 + 5 + 6 +\n    7 + 8 + 9)\n#Here, the surrounding parentheses ( ) do the line continuation implicitly. Same is the case with [ ] and { }. For example:\n\ncolors = ['red',\n          'blue',\n          'green']\n#We can also put multiple statements in a single line using semicolons, as follows:\n\nc = 1; b = 2; c = 3\nprint(a)\nprint(c)\ncolors","447366bb":"if True:\n print (\"True\")\nelse:\n print (\"False\")","c4bde8f3":"for i in range(1,11):\n    print(i)\n    if i==5:\n        break","f9cb4b50":"#Incorrect indentation will result in IndentationError.\n\nfor i in range(1,11):\n    print(i)\n    if i==5:\n    break       \n    \n    \n","6ede8e8c":"# Practice on writing comments*  \nprint('Hello, Python!') # This line prints a string*  \n  ","2c9fbb7c":"#Multi-line comments\n#We can have comments that extend up to multiple lines.\n#One way is to use the hash(#) symbol at the beginning of each line. For example:\n\n#This is a long comment\n#and it extends\n#to multiple lines\n\n#Another way of doing this is to use triple quotes, either ''' or \"\"\".\n\n","c579e47a":"#example\nprint(\"amrut\")\n8+6","b854112c":"### IDE \n\u25cf an IDE ,or integrated development environment enables programmers\nto consolidate thedifferent aspects of writing a computer program.  \n\u25cf IDE is a software application that provides facilities to computer\nprogrammers for software development.  \n\u25cf IDEs increase programmer productivity by combining common activities\nof writing  \nsoftware into a single application, editing source code ,building\nexecutables and  \ndebugging. \n\n\u25cf Some recommend IDE are  \n1. **IDLE**-<br>\nis pythons integrated development and\nlearning environment,IDLE  \ncomes by default with\npython.\n2. **Pycharm**-<br> \nPycharm is the most popular IDE used for\npython language.Pycharm  \noffers some of the best features to its users and developers.  \n3. **VS code**-<br>\nvisual studio code is agree source code editor.\nMade by Microsoft for  \nwindows, linux,macros.features include support for\ndebugging,syntax  \nhighlighting,code refactoring and embedded git.  \n4. **Anaconda**-<br>\n\n**Few important things**  \n\u25cf To represent a statement in Python, newline (enter) is used.  \n\u25cf Use of semicolon at the end of the statement is optional  \n\u25cf Instead of curly braces {}, indentation are used to represent a\nblock.  ","7a18eeed":"### Reason to choose python \n \u25cf Simple elegant syntax<br> \n \u25cf Not overly strict  \n \u25cf Expressiveness of the language  \n \u25cf Great community and support \n   ","90d27b64":"### Python Statements\n\u25cfInstructions that a Python interpreter can execute are called statements. For example, a = 1 is an assignment statement. if statement, for statement, while statement, etc. are other kinds of statements which will be discussed later\n\n\u25cfMulti-line statement<br>\nIn Python, the end of a statement is marked by a newline character. But we can make a statement extend over multiple lines with the line continuation character (\\). For example:","86896fb7":"### How python work \n \u25cfthere are 2 types of programming lang.  \n 1.complied language  \n 2.inerpreted language\n \n \u25cf **Compiled language**  \n Compiled languages are converted directly into machine code that the  \n processor can execute.a result,they to be faster and more\n efficient to execute than interpreted languages  \n ex C,C++,java etc  \n \n \u25cf **Interpreted language**  \n Interpreters run through a program line by line and execute each\n command.  \n interpreted languages where one significantly slower than a compiled\n language but with thedevelopment of just in the time\n completion that gap is shrinkage.  \n ExPHP,Ruby,Python and JavaScript.  \n 1. First we write instruction in English  \n 2. Python is an interpreted language, so there is no need to\n compile them. Python  \n programs run directly through a source code  \n 3. the source code is converted into an intermediate bytecode\n and then into the  \n native language of the conductive computer by the Python\n interpreter.  \n 4. the code is executed and output is presented  \n","1ac77318":"### Installation  \n\u25cf go to download Python page (http: python.org\/downloads ) on\nthe official site and  click download python 3.6.5(you may see\ndifferent version name)  \n\u25cf when the download is completed, double click the file and\nfollow the instruction to install it.  \n\u25cf when Python is installed, a program called IDLE is also\ninstalled along with it.it provida graphical user interface to work\nwith Python  ","a5325de4":"### Versions \n\u25cf there are two different and grate versions of python  \nPython 2.x  \nPython 3.x  \n\u25cf First major difference between Python 2 and Python3 is python\nto is more structured programming language whereas Python 3 is\nmore object oriented language  \n\u25cf Another difference is the print function that is used to print\ndata onto the console screen Python 2 print function does not\nrequire parentheses","82607d7b":"### comments  \n\u25cf To make the code much more readable  \n\u25cf Python interpreter ignores comment.  \n\u25cf 2 types of comment  \n  \u25cb Single line comment  \n  \u25cb Multi line comment  \n\u25cf In Python, we use the hash (*\\#) for comments*  ","26385671":"### Where is Python used \n\u25cf Web development  \n\u25cf App development  \n\u25cf Data science  \n\u25cf Machine learning  \n\u25cf Internet of things  \n  ","1fce81d1":"### Why python name \n \u25cf Guido van rossum was a big fan of TV shows and also he wanted a\n short and uniquename for his invention.<br> \n \u25cf The inspiration for the name came from BBC\u2019s TV show **Monty\n Python\u2019s Flying Circus**  \n  ","c2b621f7":"### hello world\n\u25cf The aim of this program is to print hello word on the output screen.<br>\n\u25cf To do this we can use the print() function the print() function is predefined function in Python that prints the specified message as the output.","3af7c3d5":"### Jupyter Notebooks\n [Jupyter notebook](https:\/\/jupyter.org) \n* a document made of _cells_. Each cell can contain code written in Python or explanations in plain English.\n* You can execute code cells and view the results, e.g., numbers, messages, graphs, tables, files, etc. instantly within the notebook. \n* Jupyter is a powerful platform for experimentation and analysis.\n* You can use the \"Kernel > Restart & Clear Output\" menu option to clear all outputs and start again from the top.\n\n**Working with cells**: \n* To create a new cell within Jupyter, you can select \"Insert > Insert Cell Below\" from the menu bar or just press the \"+\" button on the toolbar. You can also use the keyboard shortcut `Esc+B` to create a new cell.\n* Once a cell is created, click on it to select it. You can then change the cell type to code or markdown (text) using the \"Cell > Cell Type\" menu option. You can also use the keyboard shortcuts `Esc+Y` and `Esc+M`. \n* Double-click a cell to edit the content within the cell. To apply your changes and run a cell, use the \"Cell > Run Cells\" menu option or click the \"Run\" button on the toolbar or just use the keyboard shortcut `Shift+Enter`. \n* You can see a full list of keyboard shortcuts using the \"Help > Keyboard Shortcuts\" menu option.\n\n","0b4cb142":"### Python Features\n\n\u25cf **Easy-to-learn**: Python has few keywords, simple structure, and a clearly defined \nsyntax. This allows a student to pick up the language quickly.\n\n\u25cf **Easy-to-read**: Python code is more clearly defined and visible to the eyes.\n\n\u25cf **Easy-to-maintain**: Python's source code is fairly easy-to-maintain.\n\n\u25cf **A broad standard library**: Python's bulk of the library is very portable and cross platform compatible on UNIX, Windows, and Macintosh.\n\n\u25cf **Interactive Mode**: Python has support for an interactive mode, which allows \ninteractive testing and debugging of snippets of code.\n\n\u25cf **Portable**: Python can run on a wide variety of hardware platforms and has the \nsame interface on all platforms.\n\n\u25cf **Extendable**: You can add low-level modules to the Python interpreter. These \nmodules enable programmers to add to or customize their tools to be more \nefficient.\n\n\u25cf **Databases**: Python provides interfaces to all major commercial databases.\n\n\u25cf** GUI Programming**: Python supports GUI applications that can be created and \nported to many system calls, libraries and windows systems, such as Windows MFC, \nMacintosh, and the X Window system of Unix.\n\n\u25cf **Scalable**: Python provides a better structure and support for large programs than \nshell scripting.\n\nApart from the above-mentioned features, Python has a big list of good features. A few \nare listed below-<br>\n\uf0b7 It supports functional and structured programming methods as well as OOP.<br>\n\uf0b7 It can be used as a scripting language or can be compiled to byte-code for building \nlarge applications.<br>\n\uf0b7 It provides very high-level dynamic data types and supports dynamic type \nchecking.","39621786":"**Real life use case**  \n\u25cf A company called forecast watch.com is in the business operating the accuracy of  weather reports from companies such as AccuWeather , my forecast.com coma and the  weather channel.  \n\u25cf forecast watch.com is 100% pure Python solution Python is\nused in all its components from the back and to the print\nand including also the more performance critical portionsof the\nsystem.  \n\u25cf forecast watch.com web interface was originally written in PHP but\nlater changed topython to simplify the toolset and improve\nintegration with other components of thesystem. ","285d3f34":"### Python identifiers \n\u25cfAn identifier is a name given to entities like class, functions,veriables etc.in\nPython  \n\u25cfRules for writing identifiers<br>\n1.Identifiers can be a combination of letters in lowercase (a to z) or uppercase (A to Z) or digits (0 to 9) or an underscore _. Names like myClass, var_1 and print_this_to_screen, all are valid example.\n\n2.An identifier cannot start with a digit. 1variable is invalid, but variable1 is a valid name.\n\n3.Keywords cannot be used as identifiers.\nglobal = 1\nOutput\n  File \"<interactive input>\", line 1\n    global = 1\n           ^\n SyntaxError: invalid syntax\n \n4.We cannot use special symbols like !, @, #, $, % etc. in our identifier.\na@ = 0\nOutput\n  File \"<interactive input>\", line 1\n    a@ = 0\n     ^\nSyntaxError: invalid syntax\n\n5.An identifier can be of any length.\n\n\nHere are naming conventions for Python identifiers-<br>\n\uf0b7 Class names start with an uppercase letter. All other identifiers start with a \nlowercase letter.<br>\n\uf0b7 Starting an identifier with a single leading underscore indicates that the identifier \nis private<br>\n\uf0b7 Starting an identifier with two leading underscores indicates a strong private \nidentifier.<br>\n\uf0b7 If the identifier also ends with two trailing underscores, the identifier is a language-defined special name.\n\n**Things to care about**  \n\u25cb Python is case sensitive language.This means, Variable and variable are not the same.  \n\u25cb Multiple words can be separated using an underscore<br>\n\u25cb Always give the identifiers a name that makes sense. While c = 10 is a valid name, writing count = 10 would make more sense, and it would be easier to figure out what it represents when you look at your code after a long gap.\n  ","e975d84b":"### Indentation\n\u25cfPython indentation is a way of telling the python\ninterpreter that a series of statements belong to a particular block of code<br>\n\u25cfPython does not use braces({}) to indicate blocks of code for class and function definitions \nor flow control. Blocks of code are denoted by line indentation, which is rigidly enforced.<br>\n\u25cfThe number of spaces in the indentation is variable, but all statements within the block \nmust be indented the same amount. For example-\n","c947048a":"### Keywords \n\u25cf Python has a set of keywords that are reserved words<br> \n\u25cfthat cannot be used as variablenames, function names, or any other identifiers: Keywords are the reserved words in Python.\n\u25cfThey are used to define the syntax and structure of the Python language.<br> \n\u25cfIn Python, keywords are case sensitive.<br> \n\u25cfThere are 33 keywords in Python 3.7. This number can vary slightly over the course of time.<br> \n\u25cfAll the keywords except True, False and None are in lowercase and they must be written as they are. The list of all the keywords is given below.  \n1. **and** A logical operator  \n2. **as** To create an alias  \n3. **assert** For debugging  \n4. **break** To break out of a loop  \n5. **class** To define a class  \n6. **continue** To continue to the next iteration of a loop  \n7. **def** To define a function  \n8. **del** To delete an object  \n9. **elif** Used in conditional statements, same as else\nif  \n10. **else** Used in conditional statements  \n11. **except** Used with exceptions, what to do when an exception\noccurs  \n12. **False** Boolean value, result of comparison operations  \n13. **finally** Used wit exceptions, a block of code that will be\nexecuted no matter if there an exception or not  \n14. **for** To create a for loop  \n15. **from** To import specific parts of a module  \n16. **global** To declare a global variable  \n17. **if** To make a conditional statement  \n18. **import** To import a module  \n19. **in** To check if a value is present in a list, tuple,\netc.  \n20. **is** To test if two variables are equal  \n21. **lambda** To create an anonymous function  \n22. **None** Represents a null value  \n23. **nonlocal** To declare a non local variable  \n24. **not** A logical operator  \n25. **or** A logical operator  \n26. **pass** A null statement, a statement that will do nothing  \n27. **raise** To raise an exception  \n28. **return** To exit a function and return a value  \n29. **True** Boolean value, result of comparison operations  \n30. **try** To make a try...except statement  \n31. **while** To create a while loop  \n32. **with** Used to simplify exception handling  \n33. **yield** To end a function, returns a generator  \n  ","ecb97fe9":"### History\n\u25cf Python is said to have succeeded, the ABC programming language,which had interfacing with the amoeba operating system and had the feature of exception   handling.<br>\n\u25cfhowever,it had few complaints which needed to be addressed.<br>\n\u25cf So,guido van rossum took the syntax of ABC along with some of its good features and tried to fix the issues.<br>\n\u25cf In this process he created a good scripting language that removed all flaws of the previous language.<br>\n\u25cf Python was finally released in **1991**.","a737428e":"### python\n\u25cf Python is a general purpose interpreted,interactive,object oriented and high level programming language<br>\n\u25cf It was created by **Guido Van Rossum** in 1985-1990,released in 1991.\n\n\uf0b7 Python is Interpreted: Python is processed at runtime by the interpreter. You do \nnot need to compile your program before executing it. This is similar to PERL and \nPHP.<br>\n\n\uf0b7 Python is Interactive: You can actually sit at a Python prompt and interact with \nthe interpreter directly to write your programs.\n\n\uf0b7 Python is Object-Oriented: Python supports Object-Oriented style or technique \nof programming that encapsulates code within objects.\n\n\uf0b7 Python is a Beginner's Language: Python is a great language for the beginner level programmers and supports the development of a wide range of applications \nfrom simple text processing to WWW browsers to games."}}