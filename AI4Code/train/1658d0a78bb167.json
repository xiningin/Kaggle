{"cell_type":{"ce2010da":"code","2cdc3a9b":"code","e49918e3":"code","478721ef":"code","414946f5":"code","3d4114f0":"code","787f58a6":"code","1daa2f8c":"code","fd3a7dfd":"code","54d5ddca":"code","55d86293":"code","7a070c0d":"code","b00ccc73":"code","cc4be0a6":"code","0a48a4b4":"code","eee31c2f":"code","eb068cef":"markdown","57d31bce":"markdown","e60a251e":"markdown","eeffc3bb":"markdown","c1011288":"markdown","2e2a9de9":"markdown","2623b39b":"markdown","7b7ef188":"markdown","e4a4f7f5":"markdown","3d61f483":"markdown","01c20520":"markdown","a75bd5e7":"markdown","26a6347c":"markdown","ad7385b8":"markdown","22d7a003":"markdown"},"source":{"ce2010da":"## importing packages\nimport numpy as np\nimport pandas as pd\n","2cdc3a9b":"## defining constants\nPATH_STATION_HOUR = \"\/kaggle\/input\/air-quality-data-in-india\/station_hour.csv\"\nPATH_STATION_DAY = \"\/kaggle\/input\/air-quality-data-in-india\/station_day.csv\"\nPATH_CITY_HOUR = \"\/kaggle\/input\/air-quality-data-in-india\/city_hour.csv\"\nPATH_CITY_DAY = \"\/kaggle\/input\/air-quality-data-in-india\/city_day.csv\"\nPATH_STATIONS = \"\/kaggle\/input\/air-quality-data-in-india\/stations.csv\"\n\nSTATIONS = [\"KL007\", \"KL008\"]\n","e49918e3":"## importing data and subsetting the station\ndf = pd.read_csv(PATH_STATION_HOUR, parse_dates = [\"Datetime\"])\nstations = pd.read_csv(PATH_STATIONS)\n\ndf = df.merge(stations, on = \"StationId\")\n\ndf = df[df.StationId.isin(STATIONS)]\ndf.sort_values([\"StationId\", \"Datetime\"], inplace = True)\ndf[\"Date\"] = df.Datetime.dt.date.astype(str)\ndf.Datetime = df.Datetime.astype(str)\n","478721ef":"df[\"PM10_24hr_avg\"] = df.groupby(\"StationId\")[\"PM10\"].rolling(window = 24, min_periods = 16).mean().values\ndf[\"PM2.5_24hr_avg\"] = df.groupby(\"StationId\")[\"PM2.5\"].rolling(window = 24, min_periods = 16).mean().values\ndf[\"SO2_24hr_avg\"] = df.groupby(\"StationId\")[\"SO2\"].rolling(window = 24, min_periods = 16).mean().values\ndf[\"NOx_24hr_avg\"] = df.groupby(\"StationId\")[\"NOx\"].rolling(window = 24, min_periods = 16).mean().values\ndf[\"NH3_24hr_avg\"] = df.groupby(\"StationId\")[\"NH3\"].rolling(window = 24, min_periods = 16).mean().values\ndf[\"CO_8hr_max\"] = df.groupby(\"StationId\")[\"CO\"].rolling(window = 8, min_periods = 1).max().values\ndf[\"O3_8hr_max\"] = df.groupby(\"StationId\")[\"O3\"].rolling(window = 8, min_periods = 1).max().values\n","414946f5":"## PM2.5 Sub-Index calculation\ndef get_PM25_subindex(x):\n    if x <= 30:\n        return x * 50 \/ 30\n    elif x <= 60:\n        return 50 + (x - 30) * 50 \/ 30\n    elif x <= 90:\n        return 100 + (x - 60) * 100 \/ 30\n    elif x <= 120:\n        return 200 + (x - 90) * 100 \/ 30\n    elif x <= 250:\n        return 300 + (x - 120) * 100 \/ 130\n    elif x > 250:\n        return 400 + (x - 250) * 100 \/ 130\n    else:\n        return 0\n\ndf[\"PM2.5_SubIndex\"] = df[\"PM2.5_24hr_avg\"].apply(lambda x: get_PM25_subindex(x))\n","3d4114f0":"## PM10 Sub-Index calculation\ndef get_PM10_subindex(x):\n    if x <= 50:\n        return x\n    elif x <= 100:\n        return x\n    elif x <= 250:\n        return 100 + (x - 100) * 100 \/ 150\n    elif x <= 350:\n        return 200 + (x - 250)\n    elif x <= 430:\n        return 300 + (x - 350) * 100 \/ 80\n    elif x > 430:\n        return 400 + (x - 430) * 100 \/ 80\n    else:\n        return 0\n\ndf[\"PM10_SubIndex\"] = df[\"PM10_24hr_avg\"].apply(lambda x: get_PM10_subindex(x))\n","787f58a6":"## SO2 Sub-Index calculation\ndef get_SO2_subindex(x):\n    if x <= 40:\n        return x * 50 \/ 40\n    elif x <= 80:\n        return 50 + (x - 40) * 50 \/ 40\n    elif x <= 380:\n        return 100 + (x - 80) * 100 \/ 300\n    elif x <= 800:\n        return 200 + (x - 380) * 100 \/ 420\n    elif x <= 1600:\n        return 300 + (x - 800) * 100 \/ 800\n    elif x > 1600:\n        return 400 + (x - 1600) * 100 \/ 800\n    else:\n        return 0\n\ndf[\"SO2_SubIndex\"] = df[\"SO2_24hr_avg\"].apply(lambda x: get_SO2_subindex(x))\n","1daa2f8c":"## NOx Sub-Index calculation\ndef get_NOx_subindex(x):\n    if x <= 40:\n        return x * 50 \/ 40\n    elif x <= 80:\n        return 50 + (x - 40) * 50 \/ 40\n    elif x <= 180:\n        return 100 + (x - 80) * 100 \/ 100\n    elif x <= 280:\n        return 200 + (x - 180) * 100 \/ 100\n    elif x <= 400:\n        return 300 + (x - 280) * 100 \/ 120\n    elif x > 400:\n        return 400 + (x - 400) * 100 \/ 120\n    else:\n        return 0\n\ndf[\"NOx_SubIndex\"] = df[\"NOx_24hr_avg\"].apply(lambda x: get_NOx_subindex(x))\n","fd3a7dfd":"## NH3 Sub-Index calculation\ndef get_NH3_subindex(x):\n    if x <= 200:\n        return x * 50 \/ 200\n    elif x <= 400:\n        return 50 + (x - 200) * 50 \/ 200\n    elif x <= 800:\n        return 100 + (x - 400) * 100 \/ 400\n    elif x <= 1200:\n        return 200 + (x - 800) * 100 \/ 400\n    elif x <= 1800:\n        return 300 + (x - 1200) * 100 \/ 600\n    elif x > 1800:\n        return 400 + (x - 1800) * 100 \/ 600\n    else:\n        return 0\n\ndf[\"NH3_SubIndex\"] = df[\"NH3_24hr_avg\"].apply(lambda x: get_NH3_subindex(x))\n","54d5ddca":"## CO Sub-Index calculation\ndef get_CO_subindex(x):\n    if x <= 1:\n        return x * 50 \/ 1\n    elif x <= 2:\n        return 50 + (x - 1) * 50 \/ 1\n    elif x <= 10:\n        return 100 + (x - 2) * 100 \/ 8\n    elif x <= 17:\n        return 200 + (x - 10) * 100 \/ 7\n    elif x <= 34:\n        return 300 + (x - 17) * 100 \/ 17\n    elif x > 34:\n        return 400 + (x - 34) * 100 \/ 17\n    else:\n        return 0\n\ndf[\"CO_SubIndex\"] = df[\"CO_8hr_max\"].apply(lambda x: get_CO_subindex(x))\n","55d86293":"## O3 Sub-Index calculation\ndef get_O3_subindex(x):\n    if x <= 50:\n        return x * 50 \/ 50\n    elif x <= 100:\n        return 50 + (x - 50) * 50 \/ 50\n    elif x <= 168:\n        return 100 + (x - 100) * 100 \/ 68\n    elif x <= 208:\n        return 200 + (x - 168) * 100 \/ 40\n    elif x <= 748:\n        return 300 + (x - 208) * 100 \/ 539\n    elif x > 748:\n        return 400 + (x - 400) * 100 \/ 539\n    else:\n        return 0\n\ndf[\"O3_SubIndex\"] = df[\"O3_8hr_max\"].apply(lambda x: get_O3_subindex(x))\n","7a070c0d":"## AQI bucketing\ndef get_AQI_bucket(x):\n    if x <= 50:\n        return \"Good\"\n    elif x <= 100:\n        return \"Satisfactory\"\n    elif x <= 200:\n        return \"Moderate\"\n    elif x <= 300:\n        return \"Poor\"\n    elif x <= 400:\n        return \"Very Poor\"\n    elif x > 400:\n        return \"Severe\"\n    else:\n        return np.NaN\n\ndf[\"Checks\"] = (df[\"PM2.5_SubIndex\"] > 0).astype(int) + \\\n                (df[\"PM10_SubIndex\"] > 0).astype(int) + \\\n                (df[\"SO2_SubIndex\"] > 0).astype(int) + \\\n                (df[\"NOx_SubIndex\"] > 0).astype(int) + \\\n                (df[\"NH3_SubIndex\"] > 0).astype(int) + \\\n                (df[\"CO_SubIndex\"] > 0).astype(int) + \\\n                (df[\"O3_SubIndex\"] > 0).astype(int)\n\ndf[\"AQI_calculated\"] = round(df[[\"PM2.5_SubIndex\", \"PM10_SubIndex\", \"SO2_SubIndex\", \"NOx_SubIndex\",\n                                 \"NH3_SubIndex\", \"CO_SubIndex\", \"O3_SubIndex\"]].max(axis = 1))\ndf.loc[df[\"PM2.5_SubIndex\"] + df[\"PM10_SubIndex\"] <= 0, \"AQI_calculated\"] = np.NaN\ndf.loc[df.Checks < 3, \"AQI_calculated\"] = np.NaN\n\ndf[\"AQI_bucket_calculated\"] = df[\"AQI_calculated\"].apply(lambda x: get_AQI_bucket(x))\ndf[~df.AQI_calculated.isna()].head(13)\n","b00ccc73":"df[~df.AQI_calculated.isna()].AQI_bucket_calculated.value_counts()","cc4be0a6":"df_station_hour = df\ndf_station_day = pd.read_csv(PATH_STATION_DAY)\n\ndf_station_day = df_station_day.merge(df.groupby([\"StationId\", \"Date\"])[\"AQI_calculated\"].mean().reset_index(), on = [\"StationId\", \"Date\"])\ndf_station_day.AQI_calculated = round(df_station_day.AQI_calculated)\n","0a48a4b4":"df_city_hour = pd.read_csv(PATH_CITY_HOUR)\ndf_city_day = pd.read_csv(PATH_CITY_DAY)\n\ndf_city_hour[\"Date\"] = pd.to_datetime(df_city_hour.Datetime).dt.date.astype(str)\n\ndf_city_hour = df_city_hour.merge(df.groupby([\"City\", \"Datetime\"])[\"AQI_calculated\"].mean().reset_index(), on = [\"City\", \"Datetime\"])\ndf_city_hour.AQI_calculated = round(df_city_hour.AQI_calculated)\n\ndf_city_day = df_city_day.merge(df_city_hour.groupby([\"City\", \"Date\"])[\"AQI_calculated\"].mean().reset_index(), on = [\"City\", \"Date\"])\ndf_city_day.AQI_calculated = round(df_city_day.AQI_calculated)\n","eee31c2f":"df_check_station_hour = df_station_hour[[\"AQI\", \"AQI_calculated\"]].dropna()\ndf_check_station_day = df_station_day[[\"AQI\", \"AQI_calculated\"]].dropna()\ndf_check_city_hour = df_city_hour[[\"AQI\", \"AQI_calculated\"]].dropna()\ndf_check_city_day = df_city_day[[\"AQI\", \"AQI_calculated\"]].dropna()\n\nprint(\"Station + Hour\")\nprint(\"Rows: \", df_check_station_hour.shape[0])\nprint(\"Matched AQI: \", (df_check_station_hour.AQI == df_check_station_hour.AQI_calculated).sum())\nprint(\"% Match: \", (df_check_station_hour.AQI == df_check_station_hour.AQI_calculated).sum() * 100 \/ df_check_station_hour.shape[0])\nprint(\"\\n\")\nprint(\"Station + Day\")\nprint(\"Rows: \", df_check_station_day.shape[0])\nprint(\"Matched AQI: \", (df_check_station_day.AQI == df_check_station_day.AQI_calculated).sum())\nprint(\"% Match: \", (df_check_station_day.AQI == df_check_station_day.AQI_calculated).sum() * 100 \/ df_check_station_day.shape[0])\nprint(\"\\n\")\nprint(\"City + Hour\")\nprint(\"Rows: \", df_check_city_hour.shape[0])\nprint(\"Matched AQI: \", (df_check_city_hour.AQI == df_check_city_hour.AQI_calculated).sum())\nprint(\"% Match: \", (df_check_city_hour.AQI == df_check_city_hour.AQI_calculated).sum() * 100 \/ df_check_city_hour.shape[0])\nprint(\"\\n\")\nprint(\"City + Day\")\nprint(\"Rows: \", df_check_city_day.shape[0])\nprint(\"Matched AQI: \", (df_check_city_day.AQI == df_check_city_day.AQI_calculated).sum())\nprint(\"% Match: \", (df_check_city_day.AQI == df_check_city_day.AQI_calculated).sum() * 100 \/ df_check_city_day.shape[0])\n","eb068cef":"## NOx (Any Nitric x-oxide)\nNOx is measured in ppb (parts per billion). The predefined groups are defined in the function below:\n","57d31bce":"Matches perfectly. In case of any discrepancy or bug or issue, feel free to comment here or share on the [dataset page](https:\/\/www.kaggle.com\/rohanrao\/air-quality-data-in-india).","e60a251e":"## City level\nTo get AQI at city level, the AQI values are averaged over stations of the city.","eeffc3bb":"## NH3 (Ammonia)\nNH3 is measured in ug \/ m3 (micrograms per cubic meter of air). The predefined groups are defined in the function below:","c1011288":"## Verification\nSince this exact formula is used for AQI calculated, lets quickly compare it with the actual AQI values present in the raw data at each of the four levels.\n","2e2a9de9":"## AQI\nThe final AQI is the maximum Sub-Index among the available sub-indices with the condition that at least one of PM2.5 and PM10 should be available and at least three out of the seven should be available.\n\nThere is no theoretical upper value of AQI but its rare to find values over 1000.\n\nThe pre-defined buckets of AQI are as follows:\n![](https:\/\/i.imgur.com\/XmnE0rT.png)\n","2623b39b":"## SO2 (Sulphur Dioxide)\nSO2 is measured in ug \/ m3 (micrograms per cubic meter of air). The predefined groups are defined in the function below:","7b7ef188":"## Day level\nTo get AQI at day level, the AQI values are averaged over the hours of the day.\n","e4a4f7f5":"## Preparing data\nThe dataset used is hourly air quality data (2015 - 2020) from various measuring stations across India: https:\/\/www.kaggle.com\/rohanrao\/air-quality-data-in-india\n\nWe'll use one city (Thiruvananthapuram in Kerala) that has two stations and compare it with the actual AQI values present in the data at station, city, hour and day level to confirm the calculations are correct.\n","3d61f483":"## CO (Carbon Monoxide)\nCO is measured in mg \/ m3 (milligrams per cubic meter of air). The predefined groups are defined in the function below:","01c20520":"## PM10 (Particulate Matter 10-micrometer)\nPM10 is measured in ug \/ m3 (micrograms per cubic meter of air). The predefined groups are defined in the function below:\n","a75bd5e7":"## O3 (Ozone or Trioxygen)\nO3 is measured in ug \/ m3 (micrograms per cubic meter of air). The predefined groups are defined in the function below:","26a6347c":"## Formula\n![](https:\/\/i.imgur.com\/vQR5Zy0.png)\n\n* The AQI calculation uses 7 measures: **PM2.5, PM10, SO2, NOx, NH3, CO and O3**.\n* For **PM2.5, PM10, SO2, NOx and NH3** the average value in last 24-hrs is used with the condition of having at least 16 values.\n* For **CO and O3** the maximum value in last 8-hrs is used.\n* Each measure is converted into a Sub-Index based on pre-defined groups.\n* Sometimes measures are not available due to lack of measuring or lack of required data points.\n* Final AQI is the maximum Sub-Index with the condition that at least one of PM2.5 and PM10 should be available and at least three out of the seven should be available.\n","ad7385b8":"## PM2.5 (Particulate Matter 2.5-micrometer)\nPM2.5 is measured in ug \/ m3 (micrograms per cubic meter of air). The predefined groups are defined in the function below:\n","22d7a003":"## Calculating AQI (Air Quality Index) in India\n![](https:\/\/i.imgur.com\/GL2BaU4.png)\n\nThis notebook provides a workflow for calculating Air Quality Index. The formula is as per CPCB's official AQI Calculator: https:\/\/app.cpcbccr.com\/ccr_docs\/How_AQI_Calculated.pdf\n"}}