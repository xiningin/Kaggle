{"cell_type":{"04316ba3":"code","d94ec669":"code","2706f769":"code","5145922e":"code","e123668e":"code","45ee61f1":"code","2b4c5fdf":"code","ea1837c6":"code","cfb8c190":"code","bf6b5307":"code","94750a2b":"code","8558502d":"code","fd50fab0":"code","7f877b1b":"code","b4426645":"code","2f17a441":"code","b382cba1":"code","2b279232":"code","20acaa1f":"code","735d23ae":"code","0d7aeeb7":"code","1d9b6cfe":"code","8ee46ef7":"code","f64bb5c0":"code","2ee17769":"code","a6d56546":"code","c1d1c5fc":"code","d2796fc9":"code","5bc37a66":"code","56e43596":"code","7ded1877":"code","6c75eb99":"code","3f6d07f6":"code","846ee01b":"code","04f183c8":"code","672b0654":"code","f04a4790":"code","10cf0014":"code","21faee0d":"code","b72da576":"code","15d535fa":"code","b85881f6":"code","294f26ca":"code","c1607d67":"code","d332664a":"code","a1c7c7b2":"code","4255a0f9":"code","aeddc625":"code","af20cdf6":"code","522ff706":"code","a437a0d6":"code","284c7b9b":"code","a19b43c6":"code","fe40a961":"code","718ededc":"code","91904bd8":"code","8cc64f2a":"code","0582c4a5":"code","78a5739d":"code","a72a04c3":"code","71dd50b4":"code","b80603df":"code","3583b31c":"code","5f3601b9":"code","f30b3566":"code","bf82932b":"code","f512706b":"code","bea1a3c5":"code","8818482b":"code","0683400b":"code","75b18f2b":"code","9b0cb1cb":"code","cd21b9f9":"code","306588a8":"code","3b06644e":"code","1884e45e":"code","c21db922":"code","2f490c93":"code","af8db22b":"code","3ed81b65":"code","dae658d8":"code","d899f901":"code","7e95e3c4":"code","9610e5fa":"markdown","218b6486":"markdown","9810a889":"markdown","7ec6457d":"markdown","262f82b7":"markdown","e2826ddb":"markdown","ced4cdc9":"markdown","44369596":"markdown","acb009e7":"markdown","42ac6cbf":"markdown","ab430cff":"markdown","b02f54f7":"markdown","ebe9f28c":"markdown","c02ca48c":"markdown","86e1cc0e":"markdown","5c06c411":"markdown","9906e0c2":"markdown","8844d9cd":"markdown","a24a3ed9":"markdown","3cdf55b6":"markdown","a4c375a5":"markdown","55dedfe8":"markdown","4c9a16ad":"markdown","5d7901aa":"markdown","8a1bd7d7":"markdown","9d3a82ef":"markdown","d17a6856":"markdown","8a48e584":"markdown","d746af1c":"markdown","221c0fb9":"markdown","6263fc52":"markdown","5b12c39c":"markdown","af44a271":"markdown","9edd6ee2":"markdown","ae62134a":"markdown","85e0d3da":"markdown","ec1a5758":"markdown","b6eb259b":"markdown","17515ede":"markdown","04dd516b":"markdown","d1fdc126":"markdown","e568f23f":"markdown","2d05f28a":"markdown","e8bfbb18":"markdown","caa528a6":"markdown","7fad7af2":"markdown","bf2792ae":"markdown","102098c7":"markdown","c44dcf5a":"markdown"},"source":{"04316ba3":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\nimport matplotlib.pyplot as plt\nplt.style.use(\"seaborn-whitegrid\")  #plt.style.available = you can see all the style which you can use\n\nimport seaborn as sns\n\nfrom collections import Counter\n\nimport warnings\nwarnings.filterwarnings(\"ignore\")\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","d94ec669":"train_df = pd.read_csv('\/kaggle\/input\/titanic\/train.csv')\ntest_df = pd.read_csv('\/kaggle\/input\/titanic\/test.csv')\ntest_PassengerId = test_df[\"PassengerId\"]","2706f769":"train_df.columns","5145922e":"train_df.head()","e123668e":"train_df.describe()","45ee61f1":"train_df.info()","2b4c5fdf":"def bar_plot(variable):\n    \"\"\"\n    input : variable , for instance : sex\n    output : bar plot & value count\n    \"\"\"\n    # get feature\n    var = train_df[variable]\n    #count number of catergorical variable (value\/sample)\n    varValue = var.value_counts()\n    \n    #visualize\n    plt.figure(figsize = (9,5))\n    plt.bar(varValue.index, varValue)\n    plt.xticks(varValue.index, varValue.index.values)\n    plt.ylabel(\"Frequency\")\n    plt.title(variable)\n    plt.show()\n    print(\"{}\\n{}\".format(variable,varValue))","ea1837c6":"category1 = [\"Survived\", \"Sex\", \"Pclass\", \"SibSp\", \"Parch\", \"Embarked\"]\nfor c in category1:\n    bar_plot(c)","cfb8c190":"category2 = [\"Name\", \"Ticket\", \"Cabin\"]\nfor c in category2:\n    print(\"{} \\n\".format(train_df[c].value_counts()))","bf6b5307":"def plot_hist(variable):\n    plt.figure(figsize = (9,3))\n    plt.hist(train_df[variable])\n    plt.xlabel(variable)\n    plt.ylabel(\"Frequency\")\n    plt.title(\"{} distribution with hist\".format(variable))\n    plt.show()","94750a2b":"numericVar = [\"PassengerId\", \"Age\", \"Fare\"]\nfor n in numericVar:\n    plot_hist(n)","8558502d":"# Pclass-Survived\ntrain_df[[\"Pclass\",\"Survived\"]].groupby([\"Pclass\"], as_index = False).mean().sort_values(by=\"Survived\", ascending = False)","fd50fab0":"# Sex-Survived\ntrain_df[[\"Sex\",\"Survived\"]].groupby([\"Sex\"], as_index = False).mean().sort_values(by=\"Survived\", ascending = False)","7f877b1b":"# SibSp - Survived\ntrain_df[[\"SibSp\",\"Survived\"]].groupby([\"SibSp\"], as_index = False).mean().sort_values(by=\"Survived\", ascending = False)","b4426645":"# Parch-Survived\ntrain_df[[\"Parch\",\"Survived\"]].groupby([\"Parch\"], as_index = False).mean().sort_values(by=\"Survived\", ascending = False)","2f17a441":"# Embarked-Survived\ntrain_df[[\"Embarked\",\"Survived\"]].groupby([\"Embarked\"], as_index = False).mean().sort_values(by=\"Survived\", ascending = False)","b382cba1":"def detect_outliers(df,features):\n    outlier_indices = []\n    \n    for c in features:\n        # 1st quartile\n        Q1 = np.percentile(df[c],25)\n        # 3rd quartile\n        Q3 = np.percentile(df[c],75)\n        # IQR\n        IQR = Q3 - Q1\n        # Outlier step\n        outlier_step = IQR * 1.5\n        # detect outlier and their indeces\n        outlier_list_col = df[(df[c] < Q1 - outlier_step) | (df[c] > Q3 + outlier_step)].index\n        # store indeces\n        outlier_indices.extend(outlier_list_col)\n    \n    outlier_indices = Counter(outlier_indices)\n    multiple_outliers = list(i for i, v in outlier_indices.items() if v > 2)\n    \n    return multiple_outliers","2b279232":"train_df.loc[detect_outliers(train_df,[\"Age\",\"SibSp\",\"Parch\",\"Fare\"])]","20acaa1f":"#drop outliers\ntrain_df = train_df.drop(detect_outliers(train_df,[\"Age\",\"SibSp\",\"Parch\",\"Fare\"]), axis = 0 ).reset_index(drop = True)","735d23ae":"train_df_len = len(train_df)\ntrain_df = pd.concat([train_df,test_df], axis = 0).reset_index(drop = True)","0d7aeeb7":"train_df.head()","1d9b6cfe":"train_df.columns[train_df.isnull().any()]","8ee46ef7":"train_df.isnull().sum()","f64bb5c0":"train_df[train_df[\"Embarked\"].isnull()]","2ee17769":"train_df.boxplot(column=\"Fare\", by = \"Embarked\")\nplt.show()","a6d56546":"train_df[\"Embarked\"] = train_df[\"Embarked\"].fillna(\"C\")","c1d1c5fc":"train_df[train_df[\"Fare\"].isnull()]","d2796fc9":"np.mean(train_df[train_df[\"Pclass\"] == 3][\"Fare\"])","5bc37a66":"train_df[\"Fare\"] = train_df[\"Fare\"].fillna(np.mean(train_df[train_df[\"Pclass\"] == 3][\"Fare\"]))","56e43596":"list1 = [\"SibSp\",\"Parch\",\"Age\",\"Fare\", \"Survived\"]\nsns.heatmap(train_df[list1].corr(), annot = True, fmt = \".2f\")\nplt.show()","7ded1877":"relation_ss = sns.factorplot(x = \"SibSp\", y = \"Survived\",data = train_df, kind = \"bar\", size = 7)\nrelation_ss.set_ylabels(\"Survived Probability\")\nplt.show()","6c75eb99":"relation_ps = sns.factorplot(x = \"Parch\", y = \"Survived\", data = train_df, kind = \"bar\", size = 7)\nrelation_ps.set_ylabels(\"Survived Probability\")\nplt.show()","3f6d07f6":"relation_pcs = sns.factorplot(x = \"Pclass\", y = \"Survived\", data = train_df, kind = \"bar\", size = 7)\nrelation_pcs.set_ylabels(\"Survived Probability\")\nplt.show()","846ee01b":"relation_as = sns.FacetGrid(train_df, col = \"Survived\")\nrelation_as.map(sns.distplot, \"Age\",bins = 15)\nplt.show()","04f183c8":"relation_pas  = sns.FacetGrid(train_df, col = \"Survived\", row = \"Pclass\", size = 2)\nrelation_pas.map(plt.hist, \"Age\",bins = 15)\nrelation_pas.add_legend()\nplt.show()","672b0654":"relation_pses = sns.FacetGrid(train_df, row = \"Embarked\", size = 2)\nrelation_pses.map(sns.pointplot, \"Pclass\", \"Survived\", \"Sex\" )\nrelation_pses.add_legend()\nplt.show()","f04a4790":"relation_fses = sns.FacetGrid(train_df, row = \"Embarked\", col = \"Survived\", size = 2.6)\nrelation_fses.map(sns.barplot, \"Sex\", \"Fare\")\nrelation_fses.add_legend()\nplt.show()","10cf0014":"train_df[train_df[\"Age\"].isnull()]","21faee0d":"sns.factorplot(x= \"Sex\", y = \"Age\", data = train_df, kind = \"box\")\nplt.show()","b72da576":"sns.factorplot(x= \"Sex\", y = \"Age\", hue = \"Pclass\", data = train_df, kind = \"box\")\nplt.show()","15d535fa":"sns.factorplot(x= \"Parch\", y = \"Age\", data = train_df, kind = \"box\")\nsns.factorplot(x= \"SibSp\", y = \"Age\", data = train_df, kind = \"box\")\nplt.show()","b85881f6":"sns.heatmap(train_df[[\"Age\",\"Sex\",\"SibSp\",\"Parch\",\"Pclass\"]].corr(), annot = True)\nplt.show()","294f26ca":"# filling age values\nindex_nan_age = list(train_df[\"Age\"][train_df[\"Age\"].isnull()].index)\nfor i in index_nan_age:\n    age_pred = train_df[\"Age\"][((train_df[\"SibSp\"] == train_df.iloc[i][\"SibSp\"]) &(train_df[\"Parch\"] == train_df.iloc[i][\"Parch\"])& (train_df[\"Pclass\"] == train_df.iloc[i][\"Pclass\"]))].median()\n    age_med = train_df[\"Age\"].median()\n    if not np.isnan(age_pred):\n        train_df[\"Age\"].iloc[i] = age_pred\n    else:\n        train_df[\"Age\"].iloc[i] = age_med","c1607d67":"train_df[train_df[\"Age\"].isnull()]\n#nan values are filled in.","d332664a":"train_df[\"Name\"].head(15)","a1c7c7b2":"name = train_df[\"Name\"]\ntrain_df[\"Title\"] = [i.split(\".\")[0].split(\",\")[-1].strip() for i in name]","4255a0f9":"train_df[\"Title\"].head(10)","aeddc625":"sns.countplot(x=\"Title\", data = train_df)\nplt.xticks(rotation = 70)\nplt.show()","af20cdf6":"train_df[\"Title\"] = train_df[\"Title\"].replace([\"Don\",\"Rev\",\"Dr\",\"Mme\",\"Ms\",\"Major\",\"Lady\",\"Sir\", \"Mlle\",\"Col\",\"Capt\",\"the Countess\",\"Jonkheer\",\"Dona\"],\"others\")","522ff706":"train_df[\"Title\"] = [0 if i == \"Master\" else 1 if i == \"Mrs\" or i == \"Miss\" else 2 if i == \"Mr\" else 3 for i in train_df[\"Title\"]]","a437a0d6":"sns.countplot(x=\"Title\", data = train_df)\nplt.show()","284c7b9b":"relation_nt = sns.factorplot(x = \"Title\", y = \"Survived\",data = train_df, kind = \"bar\")\nrelation_nt.set_xticklabels([\"Master\",\"Mrs\",\"Mr\",\"Others\"])\nrelation_nt.set_ylabels(\"Probability of Survive\")\nplt.show()","a19b43c6":"train_df.drop(labels = [\"Name\"], axis = 1, inplace = True)\n# We drop \"Name\" label because we do not need in algorithm which we train in machine learning.","fe40a961":"train_df.head()","718ededc":"train_df = pd.get_dummies(train_df,columns = [\"Title\"])\ntrain_df.head(10)","91904bd8":"train_df[\"Family\"] = train_df[\"SibSp\"] + train_df[\"Parch\"] + 1 # +1 is himself\/herself","8cc64f2a":"train_df.head(10)","0582c4a5":"relation_sspc = sns.factorplot(x = \"Family\", y= \"Survived\", data = train_df, kind = \"bar\")\nrelation_sspc.set_ylabels(\"Probability of Survive\")\nplt.show()","78a5739d":"train_df[\"family_type\"] = [1 if i < 5 else 0 for i in train_df[\"Family\"]]\ntrain_df.head(10)","a72a04c3":"g = sns.countplot(x = \"family_type\", data = train_df)\nplt.show()","71dd50b4":"v = sns.factorplot(x = \"family_type\", y= \"Survived\", data = train_df, kind = \"bar\")\nv.set_ylabels(\"Probability of Survive\")\nplt.show()","b80603df":"train_df[\"Embarked\"].head()","3583b31c":"sns.countplot(x= \"Embarked\", data = train_df)\nplt.show()","5f3601b9":"train_df = pd.get_dummies(train_df, columns = [\"Embarked\"])\ntrain_df.head(10)","f30b3566":"train_df[\"Ticket\"].head(15)","bf82932b":"tickets = []\nfor i in list(train_df.Ticket):\n    if not i.isdigit():\n        tickets.append(i.replace(\".\",\"\").replace(\"\/\",\"\").strip().split(\" \")[0])\n    else:\n        tickets.append(\"x\")\ntrain_df[\"Ticket\"] = tickets","f512706b":"train_df[\"Ticket\"].head(15)","bea1a3c5":"train_df = pd.get_dummies(train_df, columns= [\"Ticket\"], prefix = \"T\")\ntrain_df.head(10)","8818482b":"sns.countplot(x = \"Pclass\", data = train_df)\nplt.show()","0683400b":"train_df[\"Pclass\"] = train_df[\"Pclass\"].astype(\"category\")\ntrain_df = pd.get_dummies(train_df, columns = [\"Pclass\"])\ntrain_df.head(10)","75b18f2b":"train_df[\"Sex\"] = train_df[\"Sex\"].astype(\"category\")\ntrain_df = pd.get_dummies(train_df, columns = [\"Sex\"])\ntrain_df.head(10)","9b0cb1cb":"train_df.drop(labels = [\"PassengerId\",\"Cabin\"], axis = 1, inplace = True)\ntrain_df.head(10)","cd21b9f9":"from sklearn.model_selection import train_test_split, StratifiedKFold, GridSearchCV\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.svm import SVC\nfrom sklearn.ensemble import RandomForestClassifier, VotingClassifier\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.metrics import accuracy_score","306588a8":"train_df_len","3b06644e":"test = train_df[train_df_len:]\ntest.drop(labels = [\"Survived\"],axis = 1, inplace = True)","1884e45e":"test.head()","c21db922":"train = train_df[:train_df_len]\nx_train = train.drop(labels = [\"Survived\"], axis = 1)\ny_train = train[\"Survived\"]\nx_train, x_test, y_train, y_test = train_test_split(x_train,y_train, test_size = 0.33, random_state = 42)\nprint(\"x_train\",len(x_train))\nprint(\"x_test\",len(x_test))\nprint(\"y_train\",len(y_train))\nprint(\"y_test\",len(y_test))\nprint(\"test\",len(test))","2f490c93":"logreg = LogisticRegression()\nlogreg.fit(x_train, y_train)\nacc_log_train = round(logreg.score(x_train,y_train)*100,3)\nacc_log_test = round(logreg.score(x_test,y_test)*100,3)\nprint(\"Training Accuracy: {}%\".format(acc_log_train))\nprint(\"Test Accuracy: {}%\".format(acc_log_test))","af8db22b":"random_state = 42\nclassifier = [DecisionTreeClassifier(random_state = random_state),\n             SVC(random_state = random_state),\n             RandomForestClassifier(random_state = random_state),\n             LogisticRegression(random_state = random_state),\n             KNeighborsClassifier()]\n\ndt_param_grid = {\"min_samples_split\" : range(10,500,20),\n                \"max_depth\": range(1,20,2)}\n\nsvc_param_grid = {\"kernel\" : [\"rbf\"],\n                 \"gamma\": [0.001, 0.01, 0.1, 1],\n                 \"C\": [1,10,50,100,200,300,1000]}\n\nrf_param_grid = {\"max_features\": [1,3,10],\n                \"min_samples_split\":[2,3,10],\n                \"min_samples_leaf\":[1,3,10],\n                \"bootstrap\":[False],\n                \"n_estimators\":[100,300],\n                \"criterion\":[\"gini\"]}\n\nlogreg_param_grid = {\"C\":np.logspace(-3,3,7),\n                    \"penalty\": [\"l1\",\"l2\"]}\n\nknn_param_grid = {\"n_neighbors\": np.linspace(1,19,10, dtype = int).tolist(),\n                 \"weights\": [\"uniform\",\"distance\"],\n                 \"metric\":[\"euclidean\",\"manhattan\"]}\nclassifier_param = [dt_param_grid,\n                   svc_param_grid,\n                   rf_param_grid,\n                   logreg_param_grid,\n                   knn_param_grid]","3ed81b65":"cv_result = []\nbest_estimators = []\nfor i in range(len(classifier)):\n    clf = GridSearchCV(classifier[i], param_grid=classifier_param[i], cv = StratifiedKFold(n_splits = 10), scoring = \"accuracy\", n_jobs = -1,verbose = 1)\n    clf.fit(x_train,y_train)\n    cv_result.append(clf.best_score_)\n    best_estimators.append(clf.best_estimator_)\n    print(cv_result[i])","dae658d8":"cv_results = pd.DataFrame({\"Cross Validation Means\":cv_result, \"ML Models\":[\"DecisionTreeClassifier\", \"SVM\",\"RandomForestClassifier\",\n             \"LogisticRegression\",\n             \"KNeighborsClassifier\"]})\n\ng = sns.barplot(\"Cross Validation Means\", \"ML Models\", data = cv_results)\ng.set_xlabel(\"Mean Accuracy\")\ng.set_title(\"Cross Validation Scores\")\nplt.show()","d899f901":"votingC = VotingClassifier(estimators = [(\"dt\",best_estimators[0]),\n                                        (\"rfc\",best_estimators[2]),\n                                        (\"lr\",best_estimators[3])],\n                                        voting = \"soft\", n_jobs = -1)\nvotingC = votingC.fit(x_train, y_train)\nprint(accuracy_score(votingC.predict(x_test),y_test))","7e95e3c4":"test_survived = pd.Series(votingC.predict(test), name = \"Survived\").astype(int)\nresults = pd.concat([test_PassengerId, test_survived],axis = 1)\nresults.to_csv(\"titanic.csv\", index = False)","9610e5fa":"As can be seen, fare features have pozitive correlation with survived features with 0.26.","218b6486":"<a id = \"23\"><\/a><br>\n## Creating Family Size\n* It is meant to be shown that does the chance of survival vary depending on the number of family members on board.","9810a889":"<a id = \"8\"><\/a><br>\n# Missing Value\n* Find Missing Value\n* Fill Missing Value","7ec6457d":"<a id = \"11\"><\/a><br>\n# Visualization","262f82b7":"<a id = \"24\"><\/a><br>\n## Separate Features of Embarked\n","e2826ddb":"* Having more than 3  parent or children in the ship is significantly reduce chance to survive.\n* It's look like SibSp and Parch are can be used for new feature (with th = 3). ","ced4cdc9":"<a id = \"3\"><\/a><br>\n# Univeriate Variable Analysis\n* Categorical Univeriate Variable : Survived, Name, Pclass, Sex, SibSp, Parch, Ticket, Cabin and Embarked.\n* Numerical Univeriate Variable : PassengerId, Age, Fare","44369596":"<a id = \"33\"><\/a><br>\n## Ensemble Modeling","acb009e7":"* It can be said that babies and children had priority. \n* Secondly, almost nobody who older than 60's survived. Yet, this situation changed at 80's. It seems they had priority too.  \n* Also it can be said the majority of passengers were between 20 and 40 years old.","42ac6cbf":"<a id = \"12\"><\/a><br>\n## **Correlation Between SibSp -- Parch -- Age -- Fare -- Survived**","ab430cff":"* In general, survival rate increased when fares were high.\n* Based on a fare comparison, passengers embarked from Cherbourg are the wealthiest.\n* In general, females paid much higher than males for fare.","b02f54f7":"* Families which have more than 4 people have less chance to survive. To see clearly;","ebe9f28c":"* Having more than 2 siblings significantly reduces the chances of survival.","c02ca48c":"Age Distribution has a order as you can see. Passengers's ages are highest at the Class1. (Class1 > Class2 > Class3)","86e1cc0e":"<a id = \"15\"><\/a><br>\n## Relation Between Pclass & Survived","5c06c411":"<a id = \"6\"><\/a><br>\n# Basic Data Analysis\n* Pclass - Survived\n* Sex - Survived\n* SibSp - Survived\n* Parch - Survived\n* Embarked - Survived","9906e0c2":"<a id = \"14\"><\/a><br>\n## Relation Between Parch & Survived","8844d9cd":"<a id = \"4\"><\/a><br>\n## Categorical Univeriate Variable","a24a3ed9":"* It can be said that class 3 had the most passengers.\n* Where number of passengers higher compare to other classes, probability of survive is less. \n* The ranking of survivors ratio is as follows class1 > class2 > class3","3cdf55b6":"* As we have examined before and now visualized, the rate of survival for women is higher than that of men.\n* Males' and females' rate of survive have inverse proportion with in C(Cherbourg) compare to Q(Queenstown) and S(Southampton).","a4c375a5":"<a id = \"17\"><\/a><br>\n## Relation Between Pclass & Age & Survived","55dedfe8":"<a id = \"27\"><\/a><br>\n## Separate Features of Sex","4c9a16ad":"<a id = \"34\"><\/a><br>\n## Prediction and Submission","5d7901aa":"<a id = \"19\"><\/a><br>\n## Relation Between Fare & Sex & Embarked & Survived","8a1bd7d7":"<a id = \"2\"><\/a><br>\n# Valiable Description\n\n1. PassengerId : Unique number which belongs to each passenger\n1. Survived : Passenger survived(1) or died(0)\n1. Pclass : Class of passenger (1 , 2 , 3 changes with ticket price)\n1. Name : Name of passengers\n1. Sex : Gender of passengers (Male or Female)\n1. Age : Age of passengers\n1. SibSp : Number of siblings\/spouses who in the ship\n1. Parch : Number of Parent\/Children who in the ship\n1. Ticket : Ticket's serial number\n1. Fare : Ticket's price\n1. Cabin  : Cabin number which passengers' living in during voyage\n1. Embarked : Port where passenger embarked (S : Southampton, C : Cherbourg, Q : Queenstown)\n      ","9d3a82ef":"<a id = \"9\"><\/a><br>\n## Find Missing Value","d17a6856":"<a id = \"20\"><\/a><br>\n## Fill Missing Data: Age Features","8a48e584":"* Now we can see more clear, small families have much more chance to survive. ","d746af1c":"* We can not estimate missing age values for passengers' sex. It's look like same.","221c0fb9":"<a id = \"18\"><\/a><br>\n## Relation Between Pclass & Sex & Embarked & Survived","6263fc52":"<a id = \"13\"><\/a><br>\n## Relation Between SibSp & Survived","5b12c39c":"<a id = \"31\"><\/a><br>\n## Simple Logistic Regression","af44a271":"<a id = \"22\"><\/a><br>\n## Creating Title Feature from Name Feature\n* It is meant to be shown that titles affect the person's probability of survival.","9edd6ee2":"* It can be said that class types directly affect probability of survive.","ae62134a":"# Introduction\nTitanic Disaster is the most notorious shipwrecks in the history. In 15th April 1912, the Titanic sank after colliding with an iceberg during her voyage. The disaster killed 1502 people out of 2224 passenger and crew.\n\n<font color = 'purple'>\n    \n### Content\n\n1. [Look and Check Data](#1)\n1. [Variable Description](#2)\n     * [Univeriate Variable Analysis](#3)\n        * [Categorical Univeriate Variable](#4)\n        * [Numerical Univeriate Variable](#5)\n1. [Basic Data Analysis](#6)\n1. [Outlier Detection](#7)\n1. [Missing Value](#8)\n    * [Find Missing Value](#9)\n    * [Fill Missing Value](#10)\n1. [Vizualization](#11)\n    * [Correlation Between SibSp -- Parch -- Age -- Fare -- Survived](#12)\n    * [Relation Between SibSp & Survived](#13)\n    * [Relation Between Parch & Survived](#14)\n    * [Relation Between Pclass & Survived](#15)\n    * [Relation Between Age & Survived](#16)\n    * [Relation Between Pclass & Age & Survived](#17)\n    * [Relation Between Pclass & Sex & Embarked & Survived](#18)\n    * [Relation Between Fare & Sex & Embarked & Survived](#19)\n    * [Fill Missing Data: Age Features](#20)\n1. [Feature Engineering](#21)\n    * [Creating Title Feature from Name Feature](#22)\n    * [Creating Family Size](#23)\n    * [Separate Features of Embarked](#24)\n    * [Separate Features of Tickets](#25)\n    * [Separate Features of Pclass](#26)\n    * [Separate Features of Sex](#27)\n    * [Drop Part](#28)\n1. [Modeling](#29)\n    * [Train - Test Split](#30)\n    * [Simple Logistic Regression](#31)\n    * [Hyperparameter Tuning & Grid Search & Cross Validation](#32) \n    * [Ensemble Modeling](#33)\n    * [Prediction and Submission](#34)\n","85e0d3da":"<a id = \"30\"><\/a><br>\n## Train - Test Split\n","ec1a5758":"<a id = \"28\"><\/a><br>\n## Drop Part\n* We do not want to unuseful datas in our frame. ","b6eb259b":"<a id = \"21\"><\/a><br>\n# Feature Engineering","17515ede":"<a id = \"32\"><\/a><br>\n## Hyperparameter Tuning & Grid Search & Cross Validation\n\n We will compare 5 ml classifier and evaluate mean accuracy of each of them by stratified cross validation.\n\n* Decision Tree\n* SVM\n* Random Forest\n* KNN\n* Logistic Regression","04dd516b":"<a id = \"16\"><\/a><br>\n## Relation Between Age & Survived","d1fdc126":"<a id = \"7\"><\/a><br>\n# Outlier Detection","e568f23f":"<a id = \"25\"><\/a><br>\n## Separate Features of Tickets","2d05f28a":"* float64(2) : Fare and Age\n* int64(5) : PassengerId, Survived, Pclass, Sibsp, Parch\n* object(5) : Name, Sex, Ticket, Cabin, Embarked","e8bfbb18":"<a id = \"1\"><\/a><br>\n# Look and Check Data","caa528a6":"<a id = \"29\"><\/a><br>\n# Modeling","7fad7af2":"<a id = \"5\"><\/a><br>\n## Numerical Univeriate Variable","bf2792ae":"<a id = \"10\"><\/a><br>\n## Fill Missing Value\n* Embarked and Fare both have 2 missing values","102098c7":"<a id = \"26\"><\/a><br>\n## Separate Features of Pclass","c44dcf5a":"* Age has negative correlation with Pclass, Sibsp and Parch."}}