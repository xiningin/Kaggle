{"cell_type":{"ce074956":"code","51f8e488":"code","83cd2322":"code","0203d5a2":"code","bd30b6c4":"code","b3ee8ac8":"code","4eed7039":"code","6266ebd0":"code","2f2add1f":"code","e92bc61e":"code","04e9e3f3":"code","e52033eb":"code","36910ed4":"code","5668f431":"code","f05a6201":"code","6a296b2d":"code","bd4c1539":"code","b65e73ff":"code","d8e6c72f":"code","bbe25bf2":"code","196e01c1":"code","dbbd8903":"code","9f313efb":"code","87a55421":"code","5d7e2e15":"code","0d65616f":"code","d84fe6e3":"code","82c3ab61":"code","91094a1c":"code","114c3e0b":"code","73e6fe3b":"code","38b59ef7":"code","ea9476b5":"code","0fd007af":"code","9a72c18a":"code","30524800":"code","16ade5de":"code","52a7eb86":"code","ba322f23":"code","0c406c63":"code","53a01e94":"code","23404d95":"code","f03ab5fe":"markdown","e2c3b1fd":"markdown","5e1e8679":"markdown","3801b4c0":"markdown","4585649d":"markdown","b2a0bc6f":"markdown"},"source":{"ce074956":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\nimport seaborn as sns\nimport warnings\nwarnings.filterwarnings('ignore')\nfrom sklearn.preprocessing import MinMaxScaler,StandardScaler\n\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.ensemble import RandomForestClassifier,GradientBoostingClassifier\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.metrics import accuracy_score,confusion_matrix,ConfusionMatrixDisplay,classification_report\n","51f8e488":"df = pd.read_csv(\"\/kaggle\/input\/google-playstore-apps\/Google-Playstore.csv\")\ndf.head()","83cd2322":"for col in df.columns:\n    col1 = col.replace(' ','')\n    df = df.rename(columns={col:col1})\ndf.columns","0203d5a2":"print(\"Dropping the following columns - AppId, DeveloperWebsite, DeveloperEmail, PrivacyPolicy, Currency, DeveloperId, ScrapedTime, MinimumAndroid\")\ndf = df.drop(['AppId','DeveloperWebsite','DeveloperEmail','PrivacyPolicy','Currency','DeveloperId','ScrapedTime','MinimumAndroid'],axis=1)\ndf.head()","bd30b6c4":"print(\"Number of features in the dataset : \",df.shape[1])","b3ee8ac8":"print(\"Dataset information\",df.info())","4eed7039":"print(\"Number of rows having null values in the dataset:\")\nmissing_info = (len(df[df.isnull().any(axis=1)]) \/ len(df) )*100\nprint(len(df[df.isnull().any(axis=1)]),' which is ' ,round(missing_info,2) , '%')","6266ebd0":"print(\"Features having null values in the dataset:\")\ndf.isnull().any()","2f2add1f":"cols = df.columns[df.isnull().any()].to_list()\nprint(\"Columns having null values are :\",cols)\n\nfor c in cols:\n    print(c,type(c),\": \",df[c].isnull().sum())","e92bc61e":"df.dropna(subset=['Size','MinimumInstalls','Installs','AppName'],inplace=True)\ndf.dropna(subset=['AppName'],inplace=True)","04e9e3f3":"df['Rating']  = df['Rating'].astype(float)\navg = round(df['Rating'].mean(),1)\ndf['Rating'].fillna(avg,inplace=True)\n\ndf['RatingCount']  = df['RatingCount'].astype(float)\navg = round(df['RatingCount'].mean(),1)\ndf['RatingCount'].fillna(avg,inplace=True)","e52033eb":"df['ContentRating'].value_counts()","36910ed4":"df['ContentRating'] = df['ContentRating'].replace('Unrated',\"Everyone\")\n\n#Cleaning other values just to include Everyone, Teens and Adult \n\ndf['ContentRating'] = df['ContentRating'].replace('Mature 17+',\"Adults\")\ndf['ContentRating'] = df['ContentRating'].replace('Adults only 18+',\"Adults\")\ndf['ContentRating'] = df['ContentRating'].replace('Everyone 10+',\"Everyone\")","5668f431":"# CLeaning the Installs column so as to convert it into numeric\ndf.Installs = df.Installs.str.replace(',','')\ndf.Installs = df.Installs.str.replace('+','')\ndf.Installs = df.Installs.str.replace('Free','0')\ndf['Installs'] = pd.to_numeric(df['Installs'])","f05a6201":"df['PriceRange'] = pd.cut(df['Price'],bins=[0,0.19,9.99,29.99,410],labels=['Free','Low','Mid','High'],include_lowest=True)\n#dummies = pd.get_dummies(df['PriceRange'],prefix='Price')\n#df = df.join(dummies)\ndf['PriceRange'].value_counts()","6a296b2d":"print(df.Free.value_counts())\nprint(\"Apps that have Price = 0, have Free column True\")\ndf.loc[(df.Price==0) & (df.Free==False),'Free'] = True\nprint(df.Free.value_counts())","bd4c1539":"df['Type'] = np.where(df['Free'] == True,'Free','Paid')\ndf.drop(['Free'],inplace=True,axis=1)","b65e73ff":"df['RatingType'] = 'NoRating'\ndf.loc[(df['RatingCount'] > 0) & (df['RatingCount'] <= 10000.0),'RatingType'] = 'Less than 10K'\ndf.loc[(df['RatingCount'] > 10000) & (df['RatingCount'] <= 500000.0),'RatingType'] = 'Between 10K and 500K'\ndf.loc[(df['RatingCount'] > 500000) & (df['RatingCount'] <= 138557570.0),'RatingType'] = 'More than 500K'\ndf.RatingType.value_counts()","d8e6c72f":"plt.figure(figsize=(10,10))\nax = sns.countplot(df['ContentRating'],hue=df['Type']);\nplt.title(\"ContentRating in Free and Paid\")\n\nfor p in ax.patches:\n    ax.annotate(p.get_height(),(p.get_x() + p.get_width()\/2,p.get_height()),ha='center',size= 20)\n    \nplt.show()","bbe25bf2":"plt.figure(figsize=(18,18))\nax = sns.countplot(df['Installs'],hue=df['Type']);\nplt.title(\"Number of Installs in different Types \")\n\nplt.xticks(fontsize=10,fontweight='bold',rotation=45,ha='right');\nplt.show()","196e01c1":"#draw a boxplot map to observe app's ratings among different categories\nf, ax = plt.subplots(figsize=(15, 15))\nsns.boxplot(x=\"Rating\", y=\"Category\", data=df,palette=\"Pastel1\",order = df['Category'].value_counts().index)\nplt.title(\"Ratings by Category\", fontsize = '20')\nplt.ylabel('Category',fontsize = '15')\nplt.xlabel('Rating',fontsize = '15');","dbbd8903":"category_rating = df.groupby(['Category'])['RatingCount'].count()\n\nplt.figure(figsize=(15,10))\nsns.barplot(category_rating.index, category_rating.values)\nplt.title('Number of Ratings Per Category')\nplt.xlabel('Category')\nplt.ylabel('Rating')\nplt.xticks(fontsize=10,fontweight='bold',rotation=45,ha='right');","9f313efb":"plt.figure(figsize=(15,15))\nplt.title(\"Categories in Free\/Paid\")\nsns.heatmap(pd.crosstab(df['Category'], df[\"Type\"]),annot=True,fmt='g', cmap=\"Pastel1_r\")\nplt.show()","87a55421":"m = df.RatingCount.max()\ndf[df.RatingCount==m]","5d7e2e15":"plt.figure(figsize=(15,15))\nplt.title(\"Categories based on their Content\")\nsns.heatmap(pd.crosstab(df['Category'], df[\"ContentRating\"]),annot=True,fmt='g', cmap=\"Pastel1_r\");\nplt.show()","0d65616f":"df_e = df.loc[(df.Installs > 1000000) & (df.RatingCount > 1000000) & (df.Category == \"Social\")]\n\ndf_e = df_e.sort_values(by=['RatingCount'],ascending=False).head(10)\n\nplt.figure(figsize=(15,10))\n\nax = sns.barplot(df_e.AppName, df_e.Rating,palette='coolwarm_r')#'Set3_r')\nfor p in ax.patches:\n    ax.annotate(p.get_height(),(p.get_x() + p.get_width()\/2,p.get_height()),ha='center',size= 20)\nplt.title(\"Top Apps in Social Category based on RatingCount and Installs with their Ratings\")\nplt.xticks(fontsize=10,fontweight='bold',rotation=45,ha='right');\nplt.show()","d84fe6e3":"df_e = df.loc[(df.Installs > 1000000) & (df.RatingCount > 1000000) & (df.Category == \"Entertainment\")]\n\ndf_e = df_e.sort_values(by=['RatingCount'],ascending=False).head(10)\n\nplt.figure(figsize=(15,10))\n\nax = sns.barplot(df_e.AppName, df_e.Rating,palette='Set3_r')\nfor p in ax.patches:\n    ax.annotate(p.get_height(),(p.get_x() + p.get_width()\/2,p.get_height()),ha='center',size= 20)\nplt.title(\"Top Apps in Entertainment Category based on RatingCount and Installs with their Ratings\")\nplt.xticks(fontsize=10,fontweight='bold',rotation=45,ha='right');\nplt.show()","82c3ab61":"df_e = df.loc[(df.Installs > 1000000) & (df.RatingCount > 1000000) & (df.Category == \"Education\")]\n\ndf_e = df_e.sort_values(by=['RatingCount'],ascending=False).head(10)\n\nplt.figure(figsize=(15,10))\n\nax = sns.barplot(df_e.AppName, df_e.Rating,palette='Set2_r')\nfor p in ax.patches:\n    ax.annotate(p.get_height(),(p.get_x() + p.get_width()\/2,p.get_height()),ha='center',size= 20)\nplt.title(\"Top Apps in Education Category based on RatingCount and Installs with their Ratings\")\nplt.xticks(fontsize=10,fontweight='bold',rotation=45,ha='right');\nplt.show()","91094a1c":"df_e = df.loc[(df.Installs > 1000000) & (df.RatingCount > 1000000) & (df.Category == \"Communication\")]\n\ndf_e = df_e.sort_values(by=['RatingCount'],ascending=False).head(10)\n\nplt.figure(figsize=(15,10))\n\nax = sns.barplot(df_e.AppName, df_e.Rating,palette='Set2_r')\nfor p in ax.patches:\n    ax.annotate(p.get_height(),(p.get_x() + p.get_width()\/2,p.get_height()),ha='center',size= 20)\nplt.title(\"Top Apps in Education Communication based on RatingCount and Installs with their Ratings\")\nplt.xticks(fontsize=10,fontweight='bold',rotation=45,ha='right');\nplt.show()","114c3e0b":"# Top paid apps based on their ratings and Installs\n\npaid_apps = df[(df.Type=='Paid') & (df.Installs == 5000000) | ((df.Type=='Paid') & (df.Installs == 10000000))]\npaid_apps = paid_apps.groupby(['AppName'])['Rating'].max().sort_values(ascending=False)\npaid_apps = paid_apps.head(10)\nplt.title(\"Top Paid Apps based on highest ratings and installs\")\n\nax = sns.lineplot(x=paid_apps.values,y=paid_apps.index,color='green');","73e6fe3b":"# Top Free apps based on their ratings and installs\n\nfree_apps = df[(df.Type=='Free') & (df.Installs == 10000000)]\n                                                   \nfree_apps = free_apps.groupby(['AppName'])['Rating'].max().sort_values(ascending=False)\nfree_apps = free_apps.head(10)\nplt.title(\"Top Free Apps based on highest ratings and more installs\")\nsns.lineplot(x=free_apps.values,y=free_apps.index,color='orange');","38b59ef7":"x = pd.crosstab(df['Category'],df['PriceRange'])\nx.plot(kind='bar',stacked=True,figsize=(15,15))\nplt.title(\"Category Vs PriceRange\")\nplt.xticks(fontsize=10,fontweight='bold',rotation=45,ha='right');","ea9476b5":"df['Category'] = pd.factorize(df['Category'])[0].astype(int)\ndf['Type'] = pd.factorize(df['Type'])[0].astype(int)\ndf['ContentRating'] = pd.factorize(df['ContentRating'])[0].astype(int)\ndf['AdSupported'] = pd.factorize(df['AdSupported'])[0].astype(int)\ndf['EditorsChoice'] = pd.factorize(df['EditorsChoice'])[0].astype(int)\ndf['InAppPurchases'] = pd.factorize(df['InAppPurchases'])[0].astype(int)\ndf['RatingType'] = pd.factorize(df['RatingType'])[0].astype(int)\ndf['PriceRange'] = pd.factorize(df['PriceRange'])[0].astype(int)","0fd007af":"X = df.drop(['AppName','Size', 'MinimumInstalls', 'Released','RatingCount' ,'Type','MaximumInstalls','Price','LastUpdated','Rating','RatingType'],axis=1)\ny = df['RatingType'].values","9a72c18a":"corr = X.corr()\nplt.figure(figsize=(10,10))\nsns.heatmap(corr, cmap=\"coolwarm\",square=True, annot=True)\nplt.title(\"Correlation Matrix\", fontsize = '17');#","30524800":"scaler = StandardScaler()\nX['Installs'] = scaler.fit_transform(X[['Installs']])","16ade5de":"X_train,X_test,y_train,y_test = train_test_split(X,y,stratify=y,test_size=0.3,random_state=20)\n\nX_train.shape,X_test.shape,y_train.shape,y_test.shape","52a7eb86":"# A simple RandomForestClassifier without any parameter tuning\nrf_model = RandomForestClassifier()\nrf_model.fit(X_train,y_train)\ny_pred = rf_model.predict(X_test)\nrf_acc = accuracy_score(y_pred,y_test)*100\nprint(\"Accuracy =\",round(rf_acc,2),\"%\")\ncm = confusion_matrix(y_pred,y_test)\n\ncmd = ConfusionMatrixDisplay(cm,display_labels =['NoRating','Less than 10K','Between 10K and 500K','More than 500K'])\nfig, ax = plt.subplots(figsize=(12,12));\nplt.title(\"Confusion Matrix RandomForestClassifier\")\ncmd.plot(ax=ax);","ba322f23":"target_names = ['NoRating','Less than 10K','Between 10K and 500K','More than 500K']\ncr = classification_report(y_test,y_pred,target_names = target_names)\nprint(\"Classification Report for RandomForestClassifier\")\nprint(cr)","0c406c63":"gb_model = GradientBoostingClassifier()\ngb_model.fit(X_train,y_train)\ny_pred = gb_model.predict(X_test)\ngb_acc = accuracy_score(y_pred,y_test)*100\nprint(\"Accuracy =\",round(gb_acc,2),\"%\")\ncm = confusion_matrix(y_pred,y_test)\n\ncmd = ConfusionMatrixDisplay(cm,display_labels =['NoRating','Less than 10K','Between 10K and 500K','More than 500K'])\nfig, ax = plt.subplots(figsize=(12,12));\nplt.title(\"Confustion Matrix for GradientBoostingClassifier\")\ncmd.plot(ax=ax);","53a01e94":"target_names = ['NoRating','Less than 10K','Between 10K and 500K','More than 500K']\ncr = classification_report(y_test,y_pred,target_names = target_names)\nprint(\"Classification Report for GradientBoostingClassifier\")\nprint(cr)","23404d95":"print(\"Please Upvote and Comment if you like this work\")","f03ab5fe":"    Teens have more apps in Music & Audio,Social, Entertainment\n    Adults have more apps in Entertainment,Music & Audio,Personalization            ","e2c3b1fd":"# Data Modeling","5e1e8679":"# Data Visualization\u00b6","3801b4c0":"# Data Exploration and Ceaning","4585649d":"# Data Acquisition","b2a0bc6f":"Education,Tools,Busines, Musis & Audio have more ratings"}}