{"cell_type":{"8800fefd":"code","ce35da45":"code","b1790050":"code","dcdc0057":"code","85dbcb6d":"code","e27831a2":"code","9775177c":"code","4babc7a0":"code","35ec405b":"code","7d89fd85":"code","f8c4f9ac":"code","df8e98a5":"code","821a0aa5":"code","c0c206fb":"code","6e12dc8e":"code","ccf68070":"code","9b220055":"code","7d3119e7":"code","3a1484ed":"code","8659c81f":"code","732bc6a0":"code","9e5cb399":"code","1221c90d":"code","471536fe":"code","f12755c3":"code","d64016d4":"code","de89b1a2":"code","ce4cb306":"code","68d69199":"code","fcaeab41":"code","ecd208eb":"code","2951ea20":"code","ecc59320":"code","6176172e":"code","b98c3d81":"code","40921a8d":"code","ef60e8fd":"code","caea0a7a":"code","32eabe1f":"code","68dfe76e":"code","ed58f4da":"code","e644d758":"markdown","19f1242b":"markdown","85bb064c":"markdown","6c369760":"markdown","f6a130a1":"markdown","9bd8a7b2":"markdown","425408d8":"markdown","93bb0985":"markdown","0022d176":"markdown","bdb9d842":"markdown","4b5d3103":"markdown","45b28906":"markdown","ad76b673":"markdown","165f3094":"markdown","0866c9d4":"markdown"},"source":{"8800fefd":"import rkn_module_benford_law as rkn_benford\n\nimport sys\nimport csv\nimport numpy as np\nimport pandas as pd\nfrom matplotlib import pyplot as plt\nimport matplotlib.image as mpimg","ce35da45":"path = \"..\/input\/inputbenfordcovid19\/time_series_covid19_confirmed_global.csv\"\n\ndata = pd.read_csv(path, encoding='ISO-8859-1', delimiter=',' , low_memory=False)\n\ndata_mod = data.copy()\n\ndf = pd.DataFrame(data_mod)","b1790050":"# df to store the analysis\ndf_analysis = pd.DataFrame(columns=['var_name', 'var_NaN', 'var_not_NaN', \"var_min\", \"var_max\" , \"var_mean\" , 'var_type', 'var_categ'])","dcdc0057":"# Column names in dataSet\ncoluna_name_list = list(df.columns.values)","85dbcb6d":"# This routine will store on df_analise the number os NaN each variable from dataset has. Alto the variable type and its categories.\nfor i in coluna_name_list:\n    if(df[i].dtypes == \"object\"):\n        lista=[i, df[i].isna().sum(), df[i].count(), \"NA\", \"NA\", \"NA\", df[i].dtypes, \"numerical variable\"]\n        df_length = len(df_analysis)\n        df_analysis.loc[df_length] = lista\n    else:\n        lista=[i, df[i].isna().sum(), df[i].count(), df[i].min(), df[i].max(), df[i].mean(), df[i].dtypes, \"numerical variable\"]\n        df_length = len(df_analysis)\n        df_analysis.loc[df_length] = lista","e27831a2":"# Set var_name as index\ndf_analysis.set_index('var_name', inplace=True)","9775177c":"# For each non numerical variable assign its possible values\nfor i in coluna_name_list:\n    if(df_analysis.loc[i, \"var_type\"] == \"object\"):\n        df_analysis.loc[i, \"var_categ\"] = list(df[i].unique())\n    else:\n        pass","4babc7a0":"df_analysis.sort_values(\"var_NaN\", ascending=False)","35ec405b":"# Create a new column with country names. If a country has no provinces\/state desaggregation, so it will show the term: Single Unity\ndf[\"Province\/State\"] = df[\"Province\/State\"].replace(np.NaN, \"Single Unity\")\ndf[\"Country_State\"] = df[\"Country\/Region\"] + \"_\" + df[\"Province\/State\"]","7d89fd85":"# Remove unecessary columns\ndel df[\"Province\/State\"]\ndel df[\"Country\/Region\"]\ndel df[\"Lat\"]\ndel df[\"Long\"]","f8c4f9ac":"df","df8e98a5":"# Send columns to rows\ndf_melt = df.melt(id_vars=[\"Country_State\"],\n       var_name=\"Date\",\n       value_name=\"Confirmed_Accumulated\")","821a0aa5":"# Assign date type\ndf_melt['Date'] = pd.to_datetime(df_melt['Date'])","c0c206fb":"# Sort by country and date\ndf_melt = df_melt.sort_values([\"Country_State\", \"Date\"], ascending = (True, True))","6e12dc8e":"# New column to receive the new cases for each day\ndf_melt[\"Confirmed_New_Day\"] = 0\n# This function will assign to each country\/day the number of new cases confirmed, based on the difference among accumulated cases of the actual and last day.\ncountry_before = df_melt.iloc[0,0]\n\nfor row in range(1, df_melt.shape[0], 1):\n    country_actual = df_melt.iloc[row,0]\n    if(country_actual == country_before):\n        df_melt.iloc[row,3] = df_melt.iloc[row,2] - df_melt.iloc[row-1,2]\n    else:\n        df_melt.iloc[row,3] = df_melt.iloc[row,2]\n    country_before = country_actual","ccf68070":"# Reset index: drop = False\ndf_melt.reset_index(inplace = True, drop = True)","9b220055":"# Create column to store de number of the week\ndf_melt['Date_week'] = pd.DatetimeIndex(df_melt['Date']).week","7d3119e7":"# New dataFrame grouped by country and week. The column value represents the number of new cases in each week per country.\ndf_agg_week = (df_melt.groupby(['Country_State', 'Date_week']).sum()).copy()","3a1484ed":"# Remove columns && rename columns\ndel df_agg_week[\"Confirmed_Accumulated\"]\ndf_agg_week = df_agg_week.rename(columns = {\"Confirmed_New_Day\": \"Confirmed_New_Week\"})","8659c81f":"# Set index to columns: drop = False\ndf_agg_week.reset_index(inplace = True, drop = False)","732bc6a0":"# IMPORTANT: This is the data that will be used on our analysis. However, will keep on the code to create a more robust database\ndf_week = df_agg_week.copy()\ndel df_week[\"Date_week\"]\ndf_week.to_excel(\"df_week_confirmed.xlsx\")","9e5cb399":"df_week","1221c90d":"# Create key-column (Country_week) to join both dataFrames\ndf_melt[\"Country_week\"] = df_melt[\"Country_State\"] + \"-\" + df_melt[\"Date_week\"].astype(str)\ndf_agg_week[\"Country_week\"] = df_agg_week[\"Country_State\"] + \"-\" + df_agg_week[\"Date_week\"].astype(str)","471536fe":"# Reorder column\ndf_agg_week = df_agg_week[['Country_week', 'Confirmed_New_Week']]\ndf_melt = df_melt[[\"Country_week\", 'Country_State', 'Date', \"Date_week\", \"Confirmed_Accumulated\", \"Confirmed_New_Day\"]]","f12755c3":"# Create the final dataFrame with number of accumulated cases, daily cases and weekly cases. Key-column: Country_week\ndf_merge = df_melt.merge(df_agg_week, on=\"Country_week\")","d64016d4":"# Remove key column\ndel df_merge[\"Country_week\"]","de89b1a2":"# Show final data and send to excell\ndf_merge.to_excel(\"df_merge_confirmed.xlsx\")","ce4cb306":"# Note that we have few weeks of information per country. Insufficient for an analysis ungrouped per country.\ndf_merge","68d69199":"# Note that it is possible to have a negative new number of cases. Meaning that in such a week the government corrected the numbers informed in the previous week.\ndf_week.describe()","fcaeab41":"# Some deeper analysis\ndf_analysis_desc = (df_week.groupby(['Country_State']).describe()).copy()\ndf_analysis_desc","ecd208eb":"# Getting hints (1 for aggregated analysis)\nrkn_benford.hints(df_week, 1)","2951ea20":"# df_week: data set with the values to be analyzed\n# 1: Aggregated analysis (Since the sample per country is very small, we are only interested to analyze frequencies of the entire data set as a whole.)\n# 30: Number of rounds we will run the code in order to produced an averaged chi-squared value.\n# 1000: Sample size for the first digit analysis.\n# 780: Sample size for the second digit analysis.\n# 334: Sample size for the third digit analysis.\n# 1: Number of graphs to produce with the best chi-sq values.\n# 1: Number of graphs to produce with the worst chi-sq values. Same as the graph before.\ntable_app = rkn_benford.benford(df_week, 1, 30, 1000, 780, 334, 1, 1, \"output_confirmed.xlsx\", \"\")","ecc59320":"# Order by city name\ntable_app[0].sort_values(by=['units'], inplace=True)\n# Format table values\nresults_d1 = table_app[0].style.format({\n    'N0': '{:,.2%}'.format, 'N1': '{:,.2%}'.format, 'N2': '{:,.2%}'.format, 'N3': '{:,.2%}'.format, 'N4': '{:,.2%}'.format, 'N5': '{:,.2%}'.format,\n    'N6': '{:,.2%}'.format, 'N7': '{:,.2%}'.format, 'N8': '{:,.2%}'.format, 'N8': '{:,.2%}'.format, 'N9': '{:,.2%}'.format, \n    'chi_sq': '{:,.2f}'.format, 'chi_sq 10 rounds': '{:,.2f}'.format,\n    })","6176172e":"# The table results may differ from graph results, since they differ on the sample size selected.\nresults_d1","b98c3d81":"fig = plt.figure(figsize=(8,6), dpi=200)\n\na = fig.add_subplot(1, 1, 1)\nimgplot = plt.imshow(mpimg.imread('..\/input\/inputbenfordcovid19\/D1__Aggregated_confirmed.png'))\n\nplt.setp(plt.gcf().get_axes(), xticks=[], yticks=[]);","40921a8d":"# Order by city name\ntable_app[1].sort_values(by=['units'], inplace=True)\n# Format table values\nresults_d2 = table_app[1].style.format({\n    'N0': '{:,.2%}'.format, 'N1': '{:,.2%}'.format, 'N2': '{:,.2%}'.format, 'N3': '{:,.2%}'.format, 'N4': '{:,.2%}'.format, 'N5': '{:,.2%}'.format,\n    'N6': '{:,.2%}'.format, 'N7': '{:,.2%}'.format, 'N8': '{:,.2%}'.format, 'N8': '{:,.2%}'.format, 'N9': '{:,.2%}'.format, \n    'chi_sq': '{:,.2f}'.format, 'chi_sq 10 rounds': '{:,.2f}'.format,\n    })","ef60e8fd":"results_d2","caea0a7a":"fig = plt.figure(figsize=(8,6), dpi=200)\n\na = fig.add_subplot(1, 1, 1)\nimgplot = plt.imshow(mpimg.imread('..\/input\/inputbenfordcovid19\/D2__Aggregated_confirmed.png'))\n\nplt.setp(plt.gcf().get_axes(), xticks=[], yticks=[]);","32eabe1f":"# Order by city name\ntable_app[2].sort_values(by=['units'], inplace=True)\n# Format table values\nresults_d3 = table_app[2].style.format({\n    'N0': '{:,.2%}'.format, 'N1': '{:,.2%}'.format, 'N2': '{:,.2%}'.format, 'N3': '{:,.2%}'.format, 'N4': '{:,.2%}'.format, 'N5': '{:,.2%}'.format,\n    'N6': '{:,.2%}'.format, 'N7': '{:,.2%}'.format, 'N8': '{:,.2%}'.format, 'N8': '{:,.2%}'.format, 'N9': '{:,.2%}'.format, \n    'chi_sq': '{:,.2f}'.format, 'chi_sq 10 rounds': '{:,.2f}'.format,\n    })","68dfe76e":"results_d3","ed58f4da":"fig = plt.figure(figsize=(8,6), dpi=200)\n\na = fig.add_subplot(1, 1, 1)\nimgplot = plt.imshow(mpimg.imread('..\/input\/inputbenfordcovid19\/D3__Aggregated_confirmed.png'))\n\nplt.setp(plt.gcf().get_axes(), xticks=[], yticks=[]);","e644d758":"# 4. Creating modified data sets\n\nFor this section we want to aggregate the daily numbers into weekly numbers. This aggregation is important since many cases that happen in one day may only be informed some days later. \n\nWe also gonna concatenate the country name and the country state into a unique column named: Country_State\n\nThen, we will produce two excel files:\n\n* **df_merge_confirmed.xlsx**: This file contains the number of new cases per day, per week and the accumulated up to the date. These numbers are shown per country and per day (from 22\/jan\/2020 to 31\/mar\/2020). This file will not be used on the work, but may be useful for researchers.\n\n* **df_week_confirmed.xlsx**: This file contains in each row the name of the Country\/State plus the number of confirmed new cases of Covid-19 for each week from 22\/jan\/2020 to 31\/mar\/2020. This is the data that will be used further for the Benford's analysis.","19f1242b":"### 5.2.1. First digit results\n\nIn this application we will use a sample size of 1000 out of 1270 possibles. The chi-squared obtained is very low. Only for a very low level of significance (around 5%) we would reject the hypothesis that this distribution is equal to the one predicted by Benford. In such case we are inclined to not consider that there is any kind of data manipulation.\n\nHowever, our analysis focused only on the entire data. Maybe an analysis per country would reveal that some countries follow and others do not follow Benford's law. Unfortunately there is not enough data to make this investigation at the present moment.","85bb064c":"# 5. Application: Confirmed cases of Covid-19 per week\n\nFor this analysis we are taking our treated data set with only the number of new cases per week. \n\nThe idea is to select a sample size from this data set and analyze the frequency in which appears numbers from 1 to 9 in the first position of the values selected. Then we compare these frequencies to those predicted by Benford's theory. We will be using a chi-squared test for statistical significance. \n\nSince the sample per country is very small (only few weeks of information per country), we will be only interested to analyze frequencies of the entire data set as a whole. Later, in the end of the year when we have more data per country, then we may analyze frequencies per country too.","6c369760":"## Data to be used further on our analysis","f6a130a1":"# THANKS FOR READING!","9bd8a7b2":"## 5.1. Analysis of the data set","425408d8":"## Usefull Data for researchers","93bb0985":"# 6. Final Remarks\n\nAlong this work we tested the values of new confirmed cases of Covid-19 per week informed by governments around the world. We took data from 22\/jan\/2020 to 31\/mar\/2020.\n\nFor the first, second and third digits the conclusion was the same: No evidence of data manipulation. However, we still need to make an specific investigation per country. Nevertheless, this will only be possible after we have more weeks of data, meaning a sufficient sample size.","0022d176":"# 3. Analysis on the Original Data Set\n\nIn this section we want to analyze the data for confirmed cases took from [Data Repository by Johns Hopkins CSSE](https:\/\/github.com\/CSSEGISandData\/COVID-19). This dataset shows the number of confirmed cases of Covid-19 per country and per country's state when possible. The period of analysis goes from 22\/jan\/2020 to 31\/mar\/2020.\n\nThen, let's check for:\n\n* Number of NaN in each variable\n* Variable types\n* Variable categories","bdb9d842":"## 5.2 Running the script\n\n* This work uses the following utility script: \"RKN Module - Benford Law\". For more on how to use this script, please access:\nhttps:\/\/www.kaggle.com\/rafaelknunes\/rkn-module-benford-law-tutorial\/notebook","4b5d3103":"### 5.2.2. Second digit results\n\nAgain we find a very low chi-squared value (4.24) which means that for the second digit the values informed by governments around the world adhere to the Benford's Law.\n\nFurther analysis per country still needed.","45b28906":"# 2. Loading the DataSet","ad76b673":"<span style='color:Red ; font-size: 250%'> Benford's Law - A tool to detect data manipulation on confirmed cases of Covid-19 (Part 1 of 3) <\/span> \n#### Author: [Rafael Klanfer Nunes](https:\/\/www.linkedin.com\/in\/rafaelknunes\/)\n#### **Date**: 11\/apr\/2020\n#### **Data Source**: [Data Repository by Johns Hopkins CSSE](https:\/\/github.com\/CSSEGISandData\/COVID-19\/tree\/master\/csse_covid_19_data\/csse_covid_19_time_series)\n#### **Disclaimer**: In this first part we will be analyzing the numbers of confirmed cases of Covid-19. Look for parts 2 and 3 for an investigation on the number of deaths and recovered cases of Covid-19.\n#### **KAGGLE Notebook (Part 1: confirmed)**: https:\/\/www.kaggle.com\/rafaelknunes\/benford-law-to-detect-covid-19-manipulation-1of3\n#### **KAGGLE Notebook (Part 2: recovered)**: https:\/\/www.kaggle.com\/rafaelknunes\/benford-law-to-detect-covid-19-manipulation-2of3\n#### **KAGGLE Notebook (Part 3: deaths)**: https:\/\/www.kaggle.com\/rafaelknunes\/benford-law-to-detect-covid-19-manipulation-3of3","165f3094":"### 5.2.3. Third digit results\n\n\nFinally, we find a very low chi-squared value (4.75) for the third digit. Which means that the values informed by governments around the world adhere to the Benford's Law.\n\nFurther analysis per country still needed.","0866c9d4":"# 1. Notebook Goals\n\n* 1) Using Benford's Law theory, test whether the numbers of confirmed Covid-19 cases informed by governments are experiencing some kind of manipulation.\n* 2) This work uses the following utility script: \"RKN Module - Benford Law\". For more on how to use this script, please access:\nhttps:\/\/www.kaggle.com\/rafaelknunes\/rkn-module-benford-law-tutorial\/notebook"}}