{"cell_type":{"0509f0e5":"code","6036bfc0":"code","069e54e1":"code","e2425052":"code","dc496eb9":"code","6b235966":"code","2744391a":"code","a76358ae":"code","7da65168":"code","3d5e7da8":"code","d393e81b":"code","98c5bbef":"code","ec804968":"code","bb8d1e63":"code","e4a7c419":"code","cfea6be3":"code","690d022d":"code","6116a45f":"code","021444da":"code","eebb9c22":"code","7b7bebc3":"code","958d18c9":"code","0fec32b8":"code","e48c4f6e":"code","6f129b7f":"code","18554169":"code","d8d89d75":"code","307f8c42":"code","b884d231":"code","4878a663":"code","c5e216bb":"code","dbaab54d":"code","d2b90fa0":"code","e481b909":"code","eecdbfef":"code","68d0a862":"code","cd21f055":"code","552d9717":"code","6ef44512":"code","377f6f59":"code","ae3919a1":"code","a8e06f11":"code","c59c8cd6":"code","c5ba20af":"code","a29e4160":"code","80b8e1ad":"markdown","8302d1d1":"markdown","40d958af":"markdown","963040a1":"markdown","1f0d0e8a":"markdown","3cf246f6":"markdown","37d24157":"markdown","4813dbb8":"markdown","1cffd76d":"markdown","346319dd":"markdown","3cc7cd6d":"markdown","c95a4461":"markdown","65f9c044":"markdown","d4fdd1ae":"markdown","a63510e1":"markdown"},"source":{"0509f0e5":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","6036bfc0":"import os\nprint(os.listdir(\"..\/input\"))","069e54e1":"!pip install regressors","e2425052":"import numpy as np \nimport pandas as pd \nimport matplotlib.pyplot as plt\n\nfrom IPython.display import display\nimport seaborn as sns\n\nimport statsmodels.api as sma\nimport statsmodels.formula.api as sm\nimport statsmodels.sandbox.tools.cross_val as cross_val\nfrom statsmodels.formula.api import ols\n\nfrom sklearn import linear_model as lm\nfrom sklearn.linear_model import LinearRegression \nfrom sklearn.preprocessing import PolynomialFeatures\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import r2_score\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn import metrics\nfrom sklearn.model_selection import KFold, cross_val_score,cross_val_predict, LeaveOneOut\n\nfrom regressors import stats\nimport datetime as dt\n","dc496eb9":"#Explore at least 5 interactions - at least one should be a three-way interaction. \n#Determine and identify your discoveries for each interaction. ","6b235966":"#Interactive Terms: Statsmodel\nd = pd.read_csv(\"..\/input\/diabetes.csv\")\nd.head()\n","2744391a":"main = sm.ols(formula=\"chol ~ age+gender\",data=d).fit()\nprint(main.summary())","a76358ae":"main = sm.ols(formula=\"chol ~ age+weight\",data=d).fit()\nprint(main.summary())","7da65168":"main = sm.ols(formula=\"chol ~ age+waist\",data=d).fit()\nprint(main.summary())","3d5e7da8":"main = sm.ols(formula=\"chol ~ weight+waist\",data=d).fit()\nprint(main.summary())","d393e81b":"main = sm.ols(formula=\"chol ~ weight+waist+age\",data=d).fit()\nprint(main.summary())","98c5bbef":"main = sm.ols(formula=\"chol ~ age*gender\",data=d).fit()\nprint(main.summary())","ec804968":"main = sm.ols(formula=\"chol ~ age*waist\",data=d).fit()\nprint(main.summary())","bb8d1e63":"main = sm.ols(formula=\"chol ~ weight*waist\",data=d).fit()\nprint(main.summary())","e4a7c419":"main = sm.ols(formula=\"chol ~ weight*waist*age\",data=d).fit()\nprint(main.summary())","cfea6be3":"main = sm.ols(formula=\"chol ~ age*gender*weight*waist\",data=d).fit()\nprint(main.summary())","690d022d":"#Explore Polynomial (up to 3rd order or Cubic) or Logarithmic transformations of at least two variables. \n#Determine if these transformations are significant. ","6116a45f":"d = pd.read_csv(\"..\/input\/diabetes.csv\")\nd.head()","021444da":"chol0 = sm.ols(formula=\"chol ~ 1 \",data=d).fit()\nchol1 = sm.ols(formula=\"chol ~ age \",data=d).fit()\nchol2 = sm.ols(formula=\"chol ~ gender \",data=d).fit()\nchol3 = sm.ols(formula=\"chol ~ waist \",data=d).fit()\nchol4 = sm.ols(formula=\"chol ~ age + gender \",data=d).fit()\nchol5 = sm.ols(formula=\"chol ~ age + waist \",data=d).fit()\nchol6 = sm.ols(formula=\"chol ~ age * gender \",data=d).fit()\nchol7 = sm.ols(formula=\"chol ~ age * waist \",data=d).fit()\nchol8 = sm.ols(formula=\"chol ~ age * gender * waist \",data=d).fit()\n\nchols = sma.stats.anova_lm(chol0, chol1, chol2, chol3, chol4, chol5, chol6,chol7,chol8)\nprint(chols)","eebb9c22":"main = sm.ols(formula=\"chol ~ np.log(age) \",data=d).fit()\nprint(main.summary())","7b7bebc3":"main = sm.ols(formula=\"chol ~ np.log(waist) \",data=d).fit()\nprint(main.summary())","958d18c9":"main = sm.ols(formula=\"chol ~ np.log(age+waist) \",data=d).fit()\nprint(main.summary())","0fec32b8":"main = sm.ols(formula=\"chol ~ np.log(age*waist) \",data=d).fit()\nprint(main.summary())","e48c4f6e":"#Start with an intercept-only model. \n#Choose at least 8 predictors - some of them can be numerical transformations or interactions that you found were significant in Parts A and B. \n#Write a single python script that does forward selection automatically in loops and identifies the best possible model.","6f129b7f":"from mlxtend.feature_selection import SequentialFeatureSelector as sfs\n\nd = pd.read_csv(\"..\/input\/diabetes.csv\")\nd = d.rename(index=str,columns={\"bp.1s\":\"bp1s\"})\nd = d.rename(index=str,columns={\"bp.1d\":\"bp1d\"})\nd = d.rename(index=str,columns={\"bp.2s\":\"bp2s\"})\nd = d.rename(index=str,columns={\"bp.2d\":\"bp2d\"})\n\nd.head()","18554169":"print(\"Check for NaN\/null values: \\n\",d.isnull().values.any())\nprint(\"Number of NaN\/nullvalues: \\n\",d.isnull().sum())\nd = d.dropna()\nd.shape","d8d89d75":"inputDF = d[[\"stab.glu\",\"hdl\",\"glyhb\",\"age\",\"height\",\"weight\",\"waist\",\"hip\"]]\noutputDF = d[[\"chol\"]]\n\nmodel = sfs(LinearRegression(),k_features=5,forward=True,verbose=2,cv=5,n_jobs=-1,scoring='r2')\nmodel.fit(inputDF,outputDF)","307f8c42":"#Selected feature index.\nmodel.k_feature_idx_","b884d231":"#Column names for the selected feature.\nmodel.k_feature_names_","4878a663":"chols = sm.ols(formula=\"outputDF ~ hdl + glyhb + weight + waist + hip \",data=d).fit()\nprint(chols.summary())\n","c5e216bb":"# Backward Selection: Scikit-Learn \nd = pd.read_csv(\"..\/input\/diabetes.csv\")\nd = d.rename(index=str,columns={\"bp.1s\":\"bp1s\"})\nd = d.rename(index=str,columns={\"bp.1d\":\"bp1d\"})\nd = d.rename(index=str,columns={\"bp.2s\":\"bp2s\"})\nd = d.rename(index=str,columns={\"bp.2d\":\"bp2d\"})\n\nd.head()","dbaab54d":"print(\"Check for NaN\/null values: \\n\",d.isnull().values.any())\nprint(\"Number of NaN\/nullvalues: \\n\",d.isnull().sum())\nd = d.dropna()\nd.shape","d2b90fa0":"inputDF = d[[\"stab.glu\",\"hdl\",\"glyhb\",\"age\",\"height\",\"weight\",\"waist\",\"hip\"]]\noutputDF = d[[\"chol\"]]\n\nbackwardModel = sfs(LinearRegression(),k_features=5,forward=False,verbose=2,cv=5,n_jobs=-1,scoring='r2')\nbackwardModel.fit(inputDF,outputDF)","e481b909":"#Selected feature index.\nbackwardModel.k_feature_idx_","eecdbfef":"#Column name for the selected feature.\nbackwardModel.k_feature_names_","68d0a862":"chols = sm.ols(formula=\"outputDF ~ hdl + glyhb + height + waist + hip \",data=d).fit()\nprint(chols.summary())\n","cd21f055":"from sklearn import metrics\nfrom sklearn.linear_model import LinearRegression\n","552d9717":"#LOOCV: Scikit-Learn \nd=pd.read_csv(\"..\/input\/diabetes.csv\")\nd.head()","6ef44512":"d = d.rename(index=str,columns={\"bp.1s\":\"bp1s\"})\nd = d.rename(index=str,columns={\"bp.1d\":\"bp1d\"})\nd = d.rename(index=str,columns={\"bp.2s\":\"bp2s\"})\nd = d.rename(index=str,columns={\"bp.2d\":\"bp2d\"})\nd = d.rename(index=str,columns={\"time.ppn\":\"timeppn\"})\n\nprint(\"Check for NaN\/null values: \\n\",d.isnull().values.any())\nprint(\"Number of NaN\/nullvalues: \\n\",d.isnull().sum())\nd = d.dropna()\nd.drop(\"Unnamed: 0\", axis = 1, inplace = True)\nd.head()","377f6f59":"inputDF = d[[\"stab.glu\",\"hdl\",\"glyhb\",\"age\",\"height\",\"weight\",\"waist\",\"hip\"]]\noutputDF = d[[\"chol\"]]\n\nmodel = LinearRegression()\nloocv = LeaveOneOut()\n\nrmse = np.sqrt(-cross_val_score(model, inputDF, outputDF, scoring=\"neg_mean_squared_error\", cv = loocv))\nprint(rmse.mean())","ae3919a1":"predictions = cross_val_predict(model, inputDF, outputDF, cv=loocv)\n#print(predictions)","a8e06f11":"#K-Fold: Scikit-Learn \nd=pd.read_csv(\"..\/input\/diabetes.csv\")\nd.head()","c59c8cd6":"d = d.rename(index=str,columns={\"bp.1s\":\"bp1s\"})\nd = d.rename(index=str,columns={\"bp.1d\":\"bp1d\"})\nd = d.rename(index=str,columns={\"bp.2s\":\"bp2s\"})\nd = d.rename(index=str,columns={\"bp.2d\":\"bp2d\"})\nd = d.rename(index=str,columns={\"time.ppn\":\"timeppn\"})\n\nprint(\"Check for NaN\/null values: \\n\",d.isnull().values.any())\nprint(\"Number of NaN\/nullvalues: \\n\",d.isnull().sum())\nd = d.dropna()\nd.drop(\"Unnamed: 0\", axis = 1, inplace = True)\nd.head()","c5ba20af":"inputDF = d[[\"stab.glu\",\"hdl\",\"glyhb\",\"age\",\"height\",\"weight\",\"waist\",\"hip\"]]\noutputDF = d[[\"chol\"]]\n\nmodel = LinearRegression()\nkf = KFold(5, shuffle=True, random_state=42).get_n_splits(inputDF)\nrmse = np.sqrt(-cross_val_score(model, inputDF, outputDF, scoring=\"neg_mean_squared_error\", cv = kf))\nprint(rmse.mean())","a29e4160":"predictions = cross_val_predict(model, inputDF, outputDF, cv=kf)\n#print(predictions)","80b8e1ad":"### **4) Backward Selection**","8302d1d1":"### **3) Forward Selection using Scikit-Learn**","40d958af":"![](https:\/\/i.ibb.co\/ckSMqfd\/kfold.png)","963040a1":"## **Notebook Contents:**\n1. Interactive Terms using Statsmodel.\n2. Analysis of Variance using Statsmodel.  \n3. Forward Selection using Mlxtend.\n4. Backward Selection using Mlxtend.\n5. Resampling Methods using Scikit-Learn. <br>\n    a. Leave-One-Out Cross-Validation (LOOCV).<br>\n    b. k-Fold Cross-Validation.","1f0d0e8a":"### **1) Interactive Terms using Statsmodel **","3cf246f6":"#  **Model Selection & Cross Validation**\nLab Exercises - Week 4\n\n----------","37d24157":"### **5) Resampling Methods**","4813dbb8":"Q1> Is that interaction significant?\n\nYes, I selected age, gender, weight and waist as predictors and chol as outcome and I observed that 1)Age has significant interaction with cholesterol but Gender or Weight doesn\u2019t. \n2)Waist is not significant effect for Age but is significant for Weight to interact with Cholesterol\n\nQ2> Is a combination of interactions in the model significant?\n\nYes, the combination between Age and Gender has significant interaction with Cholesterol. \nBut, the combination among all predictors has no significant interaction with Cholesterol\n","1cffd76d":"![](https:\/\/i.ibb.co\/HX93R1R\/LOOCV.png)","346319dd":"### **Python Libraries:**","3cc7cd6d":"### **2) Analysis of Variance using Statsmodel** ","c95a4461":"**Voil\u00e0! This is the end of the lab session for week 3.** <br>\nDo not forget to commit your notebook and set the access to private. Share the notebook with Prof. Karim (Kaggle id: karimshaikh) and Phil Chwistek (Kaggle id: pchwistek).","65f9c044":"I analyzed whether the numerical transformations are significant or not through Analysis of Variance using Statsmodel and observed that age has the most significant interaction with cholesterol, while gender is the main effect for better significant interaction.","d4fdd1ae":"#### **a. Leave-One-Out Cross-Validation (LOOCV)**","a63510e1":"#### **b. k-Fold Cross-Validation** "}}