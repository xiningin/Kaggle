{"cell_type":{"9d977816":"code","ed327786":"code","dd05eb0f":"code","337203f5":"code","126c9149":"code","2b4b3b3c":"code","cf2b11ad":"code","9d99d346":"code","fd72975c":"code","7de2cc69":"code","ce954679":"code","fbebf5de":"code","8f6d8bf0":"code","7b2db20c":"code","af94d5ab":"code","a0517f30":"markdown","8ea4678c":"markdown"},"source":{"9d977816":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","ed327786":"import matplotlib.pyplot as plt\nimport seaborn as sns  # visualization tool\n\n\n\nfrom subprocess import check_output\nprint(check_output([\"ls\", \"..\/input\"]).decode(\"utf8\"))\n","dd05eb0f":"data = pd.read_csv('..\/input\/google-play-store-apps\/googleplaystore.csv')","337203f5":"data.info()","126c9149":"data.head(20)","2b4b3b3c":"data.tail(20)","cf2b11ad":"data = data.drop(columns = [\"Current Ver\",\"Android Ver\"])","9d99d346":"data = data.dropna(axis=0) #Drop rows which contain missing values\n\ndata[\"Installs\"] = data[\"Installs\"].apply(lambda x: x.replace('+', '') if '+' in str(x) else x) #replace +\ndata[\"Installs\"] = data[\"Installs\"].apply(lambda x: x.replace(',', '') if ',' in str(x) else x) #replace ,\ndata[\"Installs\"] = data[\"Installs\"].astype('float')\n\ndata[\"Price\"] = data[\"Price\"].apply(lambda x: x.replace('$', '') if '$' in str(x) else x) #replace $\ndata[\"Price\"] = data[\"Price\"].astype(\"float\")\n\ndata[\"Reviews\"] = data[\"Reviews\"].astype(\"int\")\n\ndata[\"Size\"] = data[\"Size\"].apply(lambda x: str(x).replace('Varies with device', 'NaN') if 'Varies with device' in str(x) else x)\ndata[\"Size\"] = data[\"Size\"].apply(lambda x: str(x).replace('M', '') if 'M' in str(x) else x)\ndata[\"Size\"] = data[\"Size\"].apply(lambda x: str(x).replace(',', '') if 'M' in str(x) else x)\ndata[\"Size\"] = data[\"Size\"].apply(lambda x: float(str(x).replace('k', '')) \/ 1024 if 'k' in str(x) else x) #convert size of apps to MB\ndata[\"Size\"] = data[\"Size\"].astype(\"float\")\n\n\n\n","fd72975c":"data.head(20)","7de2cc69":"data.corr()","ce954679":"#correlation map\nf,ax = plt.subplots(figsize=(15, 10))\nsns.heatmap(data.corr(), annot=True, linewidths=.5, fmt= '.1f',ax=ax)\nplt.show()\n","fbebf5de":"f,ax = plt.subplots(figsize=(20, 5))\nsns.countplot(x=data['Category'], palette=\"hls\")\nplt.xticks(rotation=45, horizontalalignment='right',fontweight='light',fontsize='large')\nplt.show()","8f6d8bf0":"sns.catplot(x=\"Category\", y=\"Rating\", kind=\"swarm\", data=data , height= 5 , aspect=5)\nplt.xticks(rotation=45, horizontalalignment='right',fontweight='light',fontsize='large')\nplt.show()","7b2db20c":"Sorted_By_Reviews = data.sort_values(by=['Reviews'], ascending=False) # Sorted by reviews \nSorted_By_Reviews.head(10)","af94d5ab":"f,ax = plt.subplots(figsize=(15, 5))\nsns.barplot(x=Sorted_By_Reviews['App'][:25], y=Sorted_By_Reviews['Reviews'][:25], palette=\"hls\")\nplt.xticks(rotation=45, horizontalalignment='right',fontweight='light',fontsize='large')\nplt.show()","a0517f30":"# Cleaning Data","8ea4678c":"# Basic Visualization"}}