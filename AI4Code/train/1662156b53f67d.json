{"cell_type":{"13f4c3a1":"code","ca151fdd":"code","9730559f":"code","d23f1f9f":"code","b9833445":"code","7d121585":"code","4fe64c82":"code","8fc1f016":"code","a213cc8c":"code","79ec6607":"code","4fc72f7f":"code","00e254b9":"code","1c6d3810":"code","db177e5a":"code","b0a3368a":"code","4aa889dc":"code","ad0c6b9c":"code","eb5d4f43":"code","789e8804":"code","04a6ea29":"code","9f002ee2":"code","b8ffef52":"code","b8f4288a":"code","3ba24c70":"code","cce5825f":"code","f6ea6329":"code","100580d1":"code","0fd8e94a":"code","6fbe10ae":"code","086e5130":"code","4a855500":"markdown","aba89d39":"markdown","237bdc34":"markdown","a440ea8b":"markdown","cfc39200":"markdown","08894717":"markdown","2d5efce0":"markdown","dc4608f0":"markdown"},"source":{"13f4c3a1":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","ca151fdd":"import numpy as np \nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns ","9730559f":"train_df = pd.read_csv('..\/input\/titanic\/train.csv')\ntest_df = pd.read_csv('..\/input\/titanic\/test.csv')","d23f1f9f":"train_df.head()","b9833445":"test_df = test_df.drop(['Cabin'], axis=1)\nfor column in ['Sex', 'Embarked']:\n  dummies = pd.get_dummies(test_df[column])\n  test_df[dummies.columns] = dummies\ntest_df = test_df.drop(['Sex','Embarked'], axis=1)\ntest_df.head()","7d121585":"train_df['Survived'].value_counts()","4fe64c82":"train_df.shape","8fc1f016":"train_df.info()","a213cc8c":"train_df.isnull().sum()","79ec6607":"sns.heatmap(train_df.isnull(), cbar=False)\n","4fc72f7f":"from sklearn.preprocessing import Normalizer\ntrain_df['Age'].fillna(train_df['Age'].mean(), inplace=True)\ndf = train_df.drop(['Cabin'], axis=1)\n\nsns.heatmap(df.isnull(), cbar=False)","00e254b9":"test_df['Age'].fillna(test_df['Age'].mean(), inplace=True)\nsns.heatmap(test_df.isnull(), cbar=False)","1c6d3810":"corr = df.corr()\nax = sns.heatmap(\n    corr, \n    vmin=-1, vmax=1, center=0,\n    cmap=sns.diverging_palette(20, 220, n=200),\n    square=True\n)\nax.set_xticklabels(\n    ax.get_xticklabels(),\n    rotation=45,\n    horizontalalignment='right'\n);","db177e5a":"for column in ['Sex', 'Embarked']:\n  dummies = pd.get_dummies(df[column])\n  df[dummies.columns] = dummies","b0a3368a":"df = df.drop(['Sex','Embarked'], axis=1)\ndf.head()","4aa889dc":"df['Survived'].value_counts().plot(kind='bar', title='Survival Rate');","ad0c6b9c":"df.plot(x=\"Survived\", y=[\"female\", \"male\"], kind ='hist',figsize=(10,5), stacked = True)","eb5d4f43":"df.plot(x=\"Survived\", y=\"Fare\", kind ='hist',figsize=(10,5))","789e8804":"df.plot(x=\"Fare\", y=\"Survived\", kind = 'hist')","04a6ea29":"df1 = df.append(test_df, ignore_index=True)","9f002ee2":"df1 = df1.drop(['Name','Ticket'], axis=1)\ndf1[\"Survived\"] = df1[\"Survived\"].fillna(0)\ndf1.head()","b8ffef52":"from sklearn.model_selection import train_test_split\nX_train, X_test, y_train, y_test = train_test_split(df1.drop('Survived',axis=1),df1['Survived'], test_size=0.30,random_state=101)","b8f4288a":"np.where(df1.values >= np.finfo(np.float64).max)","3ba24c70":"X_train.isnull().any(), y_train.isnull().any()","cce5825f":"X_train.astype(np.float32).dtypes","f6ea6329":"from sklearn.linear_model import LogisticRegression\nlogmodel = LogisticRegression()\nlogmodel.fit(X_train.fillna(0).astype(np.float32), y_train.astype(np.float32))\n","100580d1":"predictions = logmodel.predict(X_test.fillna(0).astype(np.float32))","0fd8e94a":"sns.heatmap(df1.isnull(), cbar=False)\n","6fbe10ae":"from sklearn.metrics import classification_report\nprint(classification_report(y_test,predictions))","086e5130":"import sklearn.metrics as metrics\nprint(\"Accuracy:\",metrics.accuracy_score(y_test, predictions))","4a855500":"### Understanding the dataset \n\n1. Passenger ID = Like index\n2. Survived = 0 (Didn't) 1 (Did)\n3. Pclass = 1,2,3\n4. Name = Unique\n5. Sex = Male and Female\n6. Age = Unique\n7. SibSp = Sibling and Spouses\n8. Parch = Parent their or not\n9. Ticket = Unique ID\n10. Fare = Price\n11. Cabin = Cabin No\n12. Embarked = C, Q, S","aba89d39":"## Preprocessing","237bdc34":"### One hot encoding","a440ea8b":"### Normalizing the null values","cfc39200":"### Comparing Survival Rate","08894717":"### Checking correlations","2d5efce0":"## Loading Dataset","dc4608f0":"## Training the dataset"}}