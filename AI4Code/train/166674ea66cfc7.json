{"cell_type":{"4a2094de":"code","1ab04764":"code","75233d1a":"code","c6471b99":"code","970218d1":"code","6b318f1e":"code","f2d77d46":"code","67a534f7":"code","d8f144dd":"code","7b990851":"code","49279fe1":"code","75ea7ecc":"code","e2b5d13b":"markdown","bb37f95a":"markdown","eae8cc33":"markdown","6aa5719b":"markdown","222bfcc9":"markdown","77394aed":"markdown","8c7654dc":"markdown","73b35804":"markdown","567e5c0d":"markdown","99912fcd":"markdown","a721b96a":"markdown","ac6e63ee":"markdown","89ddf696":"markdown","398f2f81":"markdown","ef1d991c":"markdown","bc6dd7eb":"markdown","dfc580da":"markdown"},"source":{"4a2094de":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\ns\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","1ab04764":"import pandas as pd\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.svm import SVC\nfrom sklearn import svm\nfrom sklearn.neural_network import MLPClassifier\nfrom sklearn.metrics import confusion_matrix,classification_report\nfrom sklearn.preprocessing import StandardScaler, LabelEncoder\nfrom sklearn.model_selection import train_test_split\nfrom sklearn import datasets\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn import metrics\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.ensemble import AdaBoostClassifier","75233d1a":"digits = datasets.load_digits() # Load the data set\nprint(digits.data) # Inorder to view the data\nclf = svm.SVC(gamma=0.001, C=100.) # SVM model with gamma and C parameter\nclf.fit(digits.data[:-1], digits.target[:-1]) # model fit\nclf.predict(digits.data[-1:]) # Predict","c6471b99":"X,y = datasets.load_iris(return_X_y=True) # Load data set\nclf = SVC() # Support vector classification\nclf.set_params(kernel='rbf').fit(X, y) # Fit the model with rbf kernel trick\nclf.predict(X[:5]) # Prediction","970218d1":"dataset = datasets.load_iris() # load the iris datasets\n\nmodel = DecisionTreeClassifier() # fit a CART to the data\nmodel.fit(dataset.data, dataset.target)\nprint(model)\n\nexpected = dataset.target\npredicted = model.predict(dataset.data\n                          \nprint(metrics.classification_report(expected, predicted))\nprint(metrics.confusion_matrix(expected, predicted))","6b318f1e":"dataset = datasets.load_iris()","f2d77d46":"logreg_clf = LogisticRegression()\nlogreg_clf.fit(dataset.data, dataset.target)\nlogreg_clf.predict(dataset.data)\n\nexpected = dataset.target\npredicted = logreg_clf.predict(dataset.data)\n\nprint(metrics.classification_report(expected, predicted))\nprint(metrics.confusion_matrix(expected, predicted))","67a534f7":"softmax_reg = LogisticRegression(multi_class=\"multinomial\", solver=\"lbfgs\", C=5)\nsoftmax_reg.fit(dataset.data, dataset.target)\npred = softmax_reg.predict(dataset.data)","d8f144dd":"rf = RandomForestClassifier(n_estimators=100, max_depth=2, random_state=0)\nrf.fit(dataset.data, dataset.target) \ny_proba = rf.predict_proba(dataset.data)\n\nexpected = dataset.target\npredicted = rf.predict(dataset.data)\n\nprint(metrics.classification_report(expected, predicted))\nprint(metrics.confusion_matrix(expected, predicted))\n","7b990851":"ada = AdaBoostClassifier(n_estimators=100)\nada.fit(dataset.data, dataset.target) \ny_proba = ada.predict_proba(dataset.data)\n\nexpected = dataset.target\npredicted = ada.predict(dataset.data)\n\nprint(metrics.classification_report(expected, predicted))\nprint(metrics.confusion_matrix(expected, predicted))","49279fe1":"from sklearn import datasets, metrics\nfrom sklearn.ensemble import ExtraTreesClassifier\ndataset = datasets.load_iris()\nmodel = ExtraTreesClassifier()\nmodel.fit(dataset.data, dataset.target)\nprint(model.feature_importances_)","75ea7ecc":"from sklearn.datasets import load_iris\nfrom sklearn import preprocessing\niris = load_iris()\nprint(iris.data.shape)\nX = iris.data\ny = iris.target\nnormalized_X = preprocessing.normalize(X)\nstandardized_X = preprocessing.scale(X)","e2b5d13b":"The main aim of this library is to level the robustness and support required for use in production systems.","bb37f95a":"# importing libraries","eae8cc33":"Methods that use ensembles of decision trees (like Random Forest or Extra Trees) can also compute the relative importance of each attribute. These importance values can be used to inform a feature selection process.","6aa5719b":"![image.png](attachment:image.png)","222bfcc9":"# Logistic regression for iris dataset","77394aed":"Scikit learn is simple and efficient tool for data mining and data analysis\n\nIt is widely used for model building\n\nIt is build on the top of numpy, scipy and matplotlib\n\nIt is an open source and can be contributed by anyone\n\nRegression and classification type of problems can be solved using scikit learn\n\nIn addition to the above mentioned Clustering and for model selection, scikit learn can be used \n\nIt is a library that helps us to bring machine learning into a production system.","8c7654dc":"# Data Rescaling","73b35804":"# Random Forest for iris dataset","567e5c0d":"Some of the evaluation metrics are","99912fcd":"# Adaboost for iris dataset","a721b96a":"# Decision Tree for Iris Data set","ac6e63ee":"# SCIKIT LEARN","89ddf696":"# feature_importances","398f2f81":"# SVM model for iris dataset","ef1d991c":"Welcome! In this post you will get an overview of the scikit-learn library with some examples","bc6dd7eb":"# SVM model for Digit dataset","dfc580da":"# So, What is Sklearn ? "}}