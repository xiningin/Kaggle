{"cell_type":{"95ab332a":"code","1b13edb3":"code","08c411fc":"code","be957c89":"code","20e311bc":"code","46b2590d":"code","25059260":"code","8dbd7502":"code","fe152aae":"code","766af14a":"code","fa7b9b1b":"code","a2dae61d":"code","f384dee6":"code","d3d7a37e":"code","d4a003c2":"markdown"},"source":{"95ab332a":"import optuna\nfrom lightgbm import LGBMRegressor\nimport numpy as np\nimport pandas as pd\nfrom sklearn.model_selection import KFold\nfrom sklearn.metrics import mean_squared_error\nfrom sklearn.preprocessing import OneHotEncoder\nfrom sklearn.model_selection import train_test_split","1b13edb3":"train = pd.read_csv('..\/input\/tabular-playground-series-feb-2021\/train.csv')\ntest  = pd.read_csv('..\/input\/tabular-playground-series-feb-2021\/test.csv')\nsub = pd.read_csv('..\/input\/tabular-playground-series-feb-2021\/sample_submission.csv')","08c411fc":"categorical_cols=['cat'+str(i) for i in range(10)]\ncontinous_cols=['cont'+str(i) for i in range(14)]\ntarget = train['target']","be957c89":"train_cat = train[categorical_cols].copy()\ntest_cat = test[categorical_cols].copy()\n\ntrain_num = train[continous_cols].copy()\ntest_num = test[continous_cols].copy()\ntrain_num.head()","20e311bc":"data = pd.concat([train_cat, test_cat], axis=0)\ndata = pd.get_dummies(data)\ntrain_cat = data.iloc[:len(train), ]\ntest_cat = data.iloc[:len(test), ]","46b2590d":"train = pd.concat([train_cat, train_num], axis=1)\ntest = pd.concat([test_cat, test_num], axis=1)\ntrain.head()","25059260":"def objective(trial,data=train,target=target):\n    \n    train_x, test_x, train_y, test_y = train_test_split(data, target, test_size=0.2,random_state=42)\n    param = {\n        'metric': 'rmse', \n        'random_state': 48,\n        'n_estimators': 1000,\n        'device': 'gpu',\n        'gpu_platform_id': 0,\n        'gpu_device_id': 0,\n        'reg_alpha': trial.suggest_loguniform('reg_alpha', 1e-3, 10.0),\n        'reg_lambda': trial.suggest_loguniform('reg_lambda', 1e-3, 10.0),\n        'colsample_bytree': trial.suggest_loguniform('colsample_bytree', 0.2, 1.0),\n        'subsample': trial.suggest_loguniform('subsample', 0.4, 1.0),\n        'learning_rate': trial.suggest_loguniform('learning_rate', 1e-4, 0.5),\n        'max_depth': trial.suggest_categorical('max_depth', [5,10,20,40,100, -1]),\n        'num_leaves' : trial.suggest_int('num_leaves', 1, 1000),\n        'min_child_samples': trial.suggest_int('min_child_samples', 1, 300),\n        'cat_smooth' : trial.suggest_int('min_data_per_groups', 1, 100)\n    }\n    model = LGBMRegressor(**param)  \n    \n    model.fit(train_x,train_y,eval_set=[(test_x,test_y)],early_stopping_rounds=20,verbose=False)\n    \n    preds = model.predict(test_x)\n    \n    rmse = mean_squared_error(test_y, preds,squared=False)\n    \n    return rmse","8dbd7502":"%%time\nstudy = optuna.create_study(direction='minimize')\nstudy.optimize(objective, n_trials=100)\nprint('Number of finished trials:', len(study.trials))\nprint('Best trial:', study.best_trial.params)","fe152aae":"#plot_optimization_histor: shows the scores from all trials as well as the best score so far at each point.\noptuna.visualization.plot_optimization_history(study)","766af14a":"#Visualize parameter importances.\noptuna.visualization.plot_param_importances(study)","fa7b9b1b":"params=study.best_params   \nparams['random_state'] = 48\nparams['n_estimators'] = 25000 \nparams['learning_rate'] \/= 25\nparams['cat_smooth'] = params.pop('min_data_per_groups')\nparams['metric'] = 'rmse'","a2dae61d":"preds = np.zeros(test.shape[0])\nkf = KFold(n_splits=5,random_state=48,shuffle=True)\nrmse=[]  # list contains rmse for each fold\nn=0\nfor trn_idx, test_idx in kf.split(train,target):\n    X_tr,X_val=train.iloc[trn_idx],train.iloc[test_idx]\n    y_tr,y_val=target[trn_idx],target[test_idx]\n    model = LGBMRegressor(**params)\n    model.fit(X_tr,y_tr,eval_set=[(X_val,y_val)],early_stopping_rounds=500,verbose=False)\n    preds+=model.predict(test)\/kf.n_splits\n    rmse.append(mean_squared_error(y_val, model.predict(X_val), squared=False))\n    print(n+1,rmse[n])\n    n+=1","f384dee6":"np.mean(rmse)","d3d7a37e":"sub['target']=preds\nsub.to_csv('submission.csv', index=False)","d4a003c2":"This is a modified version of the following notebook: https:\/\/www.kaggle.com\/hamzaghanmi\/lgbm-hyperparameter-tuning-using-optuna\n\nThe main differences are the following:\n\n1. Dummy encoding of the categorical variables\n2. Modified ranges of the test options adn increased number of test rounds\n3. Use of GPU"}}