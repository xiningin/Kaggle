{"cell_type":{"0bf44733":"code","8d54f095":"code","17bb1b86":"code","558269ec":"code","c17dcf52":"code","14044bd0":"code","326de741":"code","a7dab09d":"code","113c7ed5":"code","ba35570e":"code","c0469ad6":"code","ebd375e4":"code","8c982201":"code","71095e08":"code","051cf07f":"code","448a76d3":"code","d7e65bee":"code","904e6575":"code","290a624d":"code","5be1a1fa":"code","94b46e84":"code","26f8d135":"code","4084259e":"code","60d60ad9":"code","3e190a04":"code","c482246c":"code","a00cb44e":"code","1d608d9a":"code","d93bde36":"code","6122ee75":"code","2e76bf5a":"code","3b990295":"code","f6547595":"code","7fb5ffd5":"code","45b2d0f9":"code","c25a8da1":"code","4dc211c1":"code","57ed9bb8":"code","9cfaca3e":"code","128b7337":"code","7433e049":"code","1c8d93d6":"code","c27ece32":"code","a885b1bc":"code","f26c9d2c":"code","1766945d":"code","937f95e9":"code","cb1e5653":"code","9b21a3b2":"code","3d76429d":"code","79101a45":"code","1490b506":"code","7a814818":"code","023eb12a":"code","a3226ab6":"code","20a9716b":"code","feae010e":"code","47b36716":"code","3be9a15f":"code","57ae1b41":"code","bf094101":"code","784884ed":"code","228ba5b7":"code","08264d3c":"code","e7e7f59f":"code","a79b6875":"code","ebdca2a1":"code","e17a7638":"code","4589bf61":"code","e0a380cf":"markdown","1cf44f08":"markdown","9dfa598a":"markdown","195a76a4":"markdown","34fd9899":"markdown","48aff565":"markdown","264577a3":"markdown","ee37be78":"markdown","9d062b98":"markdown","e7932723":"markdown","375ce075":"markdown","747bc820":"markdown","4e5807e2":"markdown","c0a21d61":"markdown","50a676c0":"markdown","9b276d5b":"markdown","ba3a902a":"markdown"},"source":{"0bf44733":"import os\nimport torch\nimport pandas as pd\nimport numpy as np\nfrom torch.utils.data import Dataset, random_split, DataLoader\nfrom PIL import Image\nimport torchvision.models as models\nimport matplotlib.pyplot as plt\nimport torchvision.transforms as transforms\nfrom sklearn.metrics import f1_score\nimport torch.nn.functional as F\nimport torch.nn as nn\nfrom torchvision.utils import make_grid\n%matplotlib inline","8d54f095":"DATA_DIR = '..\/input\/jovian-pytorch-z2g\/Human protein atlas'\n\nTRAIN_DIR = DATA_DIR + '\/train'                           # Contains training images\nTEST_DIR = DATA_DIR + '\/test'                             # Contains test images\n\nTRAIN_CSV = DATA_DIR + '\/train.csv'                       # Contains real labels for training images\nTEST_CSV = '..\/input\/jovian-pytorch-z2g\/submission.csv'   # Contains dummy labels for test image","17bb1b86":"!head \"{TRAIN_CSV}\"","558269ec":"!head \"{TEST_CSV}\"","c17dcf52":"!ls \"{TRAIN_DIR}\" | head","14044bd0":"train_df = pd.read_csv(TRAIN_CSV)\ntrain_df.head()","326de741":"train_df.info()","a7dab09d":"labels = {\n    0: 'Mitochondria',\n    1: 'Nuclear bodies',\n    2: 'Nucleoli',\n    3: 'Golgi apparatus',\n    4: 'Nucleoplasm',\n    5: 'Nucleoli fibrillar center',\n    6: 'Cytosol',\n    7: 'Plasma membrane',\n    8: 'Centrosome',\n    9: 'Nuclear speckles'\n}","113c7ed5":"def encode_label(label):\n    target = torch.zeros(10)\n    for l in str(label).split(' '):\n        target[int(l)] = 1.\n    return target\n\ndef decode_target(target, text_labels=False, threshold=0.5):\n    result = []\n    for i, x in enumerate(target):\n        if (x >= threshold):\n            if text_labels:\n                result.append(labels[i] + \"(\" + str(i) + \")\")\n            else:\n                result.append(str(i))\n    return ' '.join(result)","ba35570e":"encode_label('2 4 5')","c0469ad6":"decode_target(torch.tensor([0, 0, 1, 0, 1, 1, 0, 0, 0, 0.]))","ebd375e4":"decode_target(torch.tensor([0, 0, 1, 0, 1, 1, 0, 0, 0, 0.]), text_labels=True)","8c982201":"class HumanProteinDataset(Dataset):\n    def __init__(self, csv_file, root_dir, transform=None):\n        self.df = pd.read_csv(csv_file)\n        self.transform = transform\n        self.root_dir = root_dir\n    \n    def __len__(self):\n        return len(self.df)\n    \n    def __getitem__(self, idx):\n        row = self.df.loc[idx]\n        img_id, img_label = row['Image'], row['Label']\n        img_fname = self.root_dir + \"\/\" + str(img_id) + \".png\"\n        img = Image.open(img_fname)\n        if self.transform:\n            img = self.transform(img)\n        return img, encode_label(img_label)","71095e08":"transform = transforms.Compose([transforms.ToTensor()])\ndataset = HumanProteinDataset(TRAIN_CSV, TRAIN_DIR, transform=transform)","051cf07f":"len(dataset)","448a76d3":"dataset","d7e65bee":"def show_sample(img, target, invert=True):\n    if invert:\n        plt.imshow(1 - img.permute((1, 2, 0)))\n    else:\n        plt.imshow(img.permute(1, 2, 0))\n    print('Labels:', decode_target(target, text_labels=True))","904e6575":"show_sample(*dataset[0], invert=False)","290a624d":"show_sample(*dataset[0])","5be1a1fa":"torch.manual_seed(10)","94b46e84":"val_pct = 0.1\nval_size = int(val_pct * len(dataset))\ntrain_size = len(dataset) - val_size","26f8d135":"train_ds, val_ds = random_split(dataset, [train_size, val_size])\nlen(train_ds), len(val_ds)","4084259e":"batch_size = 32","60d60ad9":"train_dl = DataLoader(\n                      train_ds, \n                      batch_size, \n                      shuffle=True, \n                      num_workers=2, \n                      pin_memory=True\n                     )\nval_dl = DataLoader(\n                    val_ds, \n                    batch_size*2, \n                    num_workers=2, \n                    pin_memory=True\n                   )","3e190a04":"def show_batch(dl, invert=True):\n    for images, labels in dl:\n        fig, ax = plt.subplots(figsize=(16, 8))\n        ax.set_xticks([]); ax.set_yticks([])\n        data = 1-images if invert else images\n        ax.imshow(make_grid(data, nrow=16).permute(1, 2, 0))\n        break","c482246c":"show_batch(train_dl)","a00cb44e":"def F_score(output, label, threshold=0.5, beta=1):\n    prob = output > threshold\n    label = label > threshold\n\n    TP = (prob & label).sum(1).float()\n    TN = ((~prob) & (~label)).sum(1).float()\n    FP = (prob & (~label)).sum(1).float()\n    FN = ((~prob) & label).sum(1).float()\n\n    precision = torch.mean(TP \/ (TP + FP + 1e-12))\n    recall = torch.mean(TP \/ (TP + FN + 1e-12))\n    F2 = (1 + beta**2) * precision * recall \/ (beta**2 * precision + recall + 1e-12)\n    return F2.mean(0)","1d608d9a":"class MultilabelImageClassificationBase(nn.Module):\n    def training_step(self, batch):\n        images, targets = batch \n        out = self(images)                      \n        loss = F.binary_cross_entropy(out, targets)      \n        return loss\n    \n    def validation_step(self, batch):\n        images, targets = batch \n        out = self(images)                           # Generate predictions\n        loss = F.binary_cross_entropy(out, targets)  # Calculate loss\n        score = F_score(out, targets)\n        return {'val_loss': loss.detach(), 'val_score': score.detach() }\n        \n    def validation_epoch_end(self, outputs):\n        batch_losses = [x['val_loss'] for x in outputs]\n        epoch_loss = torch.stack(batch_losses).mean()   # Combine losses\n        batch_scores = [x['val_score'] for x in outputs]\n        epoch_score = torch.stack(batch_scores).mean()      # Combine accuracies\n        return {'val_loss': epoch_loss.item(), 'val_score': epoch_score.item()}\n    \n    def epoch_end(self, epoch, result):\n        print(\"Epoch [{}], train_loss: {:.4f}, val_loss: {:.4f}, val_score: {:.4f}\".format(\n            epoch, result['train_loss'], result['val_loss'], result['val_score']))","d93bde36":"class ProteinCnnModel(MultilabelImageClassificationBase):\n    def __init__(self):\n        super().__init__()\n        self.network = nn.Sequential(\n            nn.Conv2d(3, 32, kernel_size=3, padding=1),\n            nn.ReLU(),\n            nn.MaxPool2d(2, 2),\n            nn.Conv2d(32, 64, kernel_size=3, stride=1, padding=1),\n            nn.ReLU(),\n            nn.MaxPool2d(2, 2),\n\n\n            nn.Conv2d(64, 64, kernel_size=3, stride=1, padding=1),\n            nn.ReLU(),\n            nn.MaxPool2d(2, 2),\n            nn.Conv2d(64, 128, kernel_size=3, stride=1, padding=1),\n            nn.ReLU(),\n            nn.MaxPool2d(2, 2),\n\n\n            nn.Conv2d(128, 128, kernel_size=3, stride=1, padding=1),\n            nn.ReLU(),\n            nn.MaxPool2d(2, 2),\n            nn.Conv2d(128, 256, kernel_size=3, stride=1, padding=1),\n            nn.ReLU(),\n            nn.AdaptiveAvgPool2d(1),\n\n\n            nn.Flatten(), \n            nn.Linear(256, 128),\n            nn.ReLU(),\n            nn.Linear(128, 64),\n            nn.ReLU(),\n            nn.Linear(64, 10),\n            nn.Sigmoid()\n        )\n        \n    def forward(self, xb):\n        return self.network(xb)","6122ee75":"class ProteinCnnModel2(MultilabelImageClassificationBase):\n    def __init__(self):\n        super().__init__()\n        # Use a pretrained model\n        self.network = models.resnet34(pretrained=True)\n        # Replace last layer\n        num_ftrs = self.network.fc.in_features\n        self.network.fc = nn.Linear(num_ftrs, 10)\n    \n    def forward(self, xb):\n        return torch.sigmoid(self.network(xb))","2e76bf5a":"model = ProteinCnnModel2()\nmodel","3b990295":"def get_default_device():\n    \"\"\"Pick GPU if available, else CPU\"\"\"\n    if torch.cuda.is_available():\n        return torch.device('cuda')\n    else:\n        return torch.device('cpu')\n    \ndef to_device(data, device):\n    \"\"\"Move tensor(s) to chosen device\"\"\"\n    if isinstance(data, (list,tuple)):\n        return [to_device(x, device) for x in data]\n    return data.to(device, non_blocking=True)\n\nclass DeviceDataLoader():\n    \"\"\"Wrap a dataloader to move data to a device\"\"\"\n    def __init__(self, dl, device):\n        self.dl = dl\n        self.device = device\n        \n    def __iter__(self):\n        \"\"\"Yield a batch of data after moving it to device\"\"\"\n        for b in self.dl: \n            yield to_device(b, self.device)\n\n    def __len__(self):\n        \"\"\"Number of batches\"\"\"\n        return len(self.dl)","f6547595":"device = get_default_device()\ndevice","7fb5ffd5":"train_dl = DeviceDataLoader(train_dl, device)\nval_dl = DeviceDataLoader(val_dl, device)\nto_device(model, device);","45b2d0f9":"def try_batch(dl):\n    for images, labels in dl:\n        print('images.shape:', images.shape)\n        out = model(images)\n        print('out.shape:', out.shape)\n        print('out[0]:', out[0])\n        break\n\ntry_batch(train_dl)","c25a8da1":"from tqdm.notebook import tqdm","4dc211c1":"@torch.no_grad()\ndef evaluate(model, val_loader):\n    model.eval()\n    outputs = [model.validation_step(batch) for batch in val_loader]\n    return model.validation_epoch_end(outputs)\n\ndef fit(epochs, lr, model, train_loader, val_loader, opt_func=torch.optim.SGD):\n    torch.cuda.empty_cache()\n    history = []\n    optimizer = opt_func(model.parameters(), lr)\n    for epoch in range(epochs):\n        # Training Phase \n        model.train()\n        train_losses = []\n        for batch in tqdm(train_loader):\n            loss = model.training_step(batch)\n            train_losses.append(loss)\n            loss.backward()\n            optimizer.step()\n            optimizer.zero_grad()\n        # Validation phase\n        result = evaluate(model, val_loader)\n        result['train_loss'] = torch.stack(train_losses).mean().item()\n        model.epoch_end(epoch, result)\n        history.append(result)\n    return history","57ed9bb8":"model = to_device(ProteinCnnModel2(), device)","9cfaca3e":"evaluate(model, val_dl)","128b7337":"num_epochs = 5\nopt_func = torch.optim.Adam\nlr = 0.1","7433e049":"history += fit(num_epochs, lr, model, train_dl, val_dl, opt_func)","1c8d93d6":"num_epochs = 5\nopt_func = torch.optim.Adam\nlr = 0.01","c27ece32":"history += fit(num_epochs, lr, model, train_dl, val_dl, opt_func)","a885b1bc":"num_epochs = 5\nopt_func = torch.optim.Adam\nlr = 0.01","f26c9d2c":"history += fit(num_epochs, lr, model, train_dl, val_dl, opt_func)","1766945d":"def plot_accuracies(history):\n    accuracies = [x['val_score'] for x in history]\n    plt.plot(accuracies, '-x')\n    plt.xlabel('epoch')\n    plt.ylabel('accuracy')\n    plt.title('Accuracy vs. No. of epochs');\n\ndef plot_losses(history):\n    train_losses = [x.get('train_loss') for x in history]\n    val_losses = [x['val_loss'] for x in history]\n    plt.plot(train_losses, '-bx')\n    plt.plot(val_losses, '-rx')\n    plt.xlabel('epoch')\n    plt.ylabel('loss')\n    plt.legend(['Training', 'Validation'])\n    plt.title('Loss vs. No. of epochs');","937f95e9":"history","cb1e5653":"plot_accuracies(history)","9b21a3b2":"plot_losses(history)","3d76429d":"!pip install jovian --upgrade\nimport jovian","79101a45":"jovian.log_dataset(val_size=val_size, val_pct=val_pct, train_size=train_size)","1490b506":"jovian.reset()\njovian.log_hyperparams({\n    'num_epochs': num_epochs,\n    'opt_func': opt_func.__name__,\n    'batch_size': batch_size,\n    'lr': lr,\n})","7a814818":"jovian.log_metrics(train_loss=history[-1]['train_loss'], \n                   val_loss=history[-1]['val_loss'], \n                   val_score=history[-1]['val_score'])","023eb12a":"jovian.commit(project=\"zerogans-protein-competition\", message=\"3rd Commit\")","a3226ab6":"def predict_single(image):\n    xb = image.unsqueeze(0)\n    xb = to_device(xb, device)\n    preds = model(xb)\n    prediction = preds[0]\n    print(\"Prediction: \", prediction)\n    show_sample(image, prediction)","20a9716b":"test_dataset = HumanProteinDataset(TEST_CSV, TEST_DIR, transform=transform)","feae010e":"img, target = test_dataset[0]\nimg.shape","47b36716":"predict_single(test_dataset[100][0])","3be9a15f":"predict_single(test_dataset[74][0])","57ae1b41":"test_dl = DeviceDataLoader(DataLoader(test_dataset, batch_size, num_workers=2, pin_memory=True), device)","bf094101":"@torch.no_grad()\ndef predict_dl(dl, model):\n    torch.cuda.empty_cache()\n    batch_probs = []\n    for xb, _ in tqdm(dl):\n        probs = model(xb)\n        batch_probs.append(probs.cpu().detach())\n    batch_probs = torch.cat(batch_probs)\n    return [decode_target(x) for x in batch_probs]","784884ed":"test_preds = predict_dl(test_dl, model)","228ba5b7":"submission_df = pd.read_csv(TEST_CSV)\nsubmission_df.Label = test_preds\nsubmission_df.head()","08264d3c":"submission_df.head(20)","e7e7f59f":"sub_fname = 'resnet3rd_submission.csv'","a79b6875":"submission_df.to_csv(sub_fname, index=False)","ebdca2a1":"!pip install jovian --upgrade","e17a7638":"import jovian","4589bf61":"jovian.commit(project='zerogans-protein-competition',message='3rd submission default notebook')","e0a380cf":"### Let's save our work at Jovian","1cf44f08":"The Dataset is not linked with this notebook. This notebook is just a minimal notebook or clone of the actual starter notebook provided by Aakash.","9dfa598a":"## Imports","195a76a4":"### Data Loaders","34fd9899":"## Training & Validation sets","48aff565":"## Save to Jovian","264577a3":"# Human Protein Multi Label Image Classification","ee37be78":"## Plotting Functions","9d062b98":"# **THE END**","e7932723":"* ***User***: [@manishshah120](https:\/\/www.kaggle.com\/manishshah120)\n* ***LinkedIn***: https:\/\/www.linkedin.com\/in\/manishshah120\/\n* ***GitHub***: https:\/\/github.com\/ManishShah120\n* ***Twitter***: https:\/\/twitter.com\/ManishShah120\n\n> *This Notebook was created while undergoing a course \"[Deep Learning with PyTorch: Zero to GANs](https:\/\/jovian.ml\/forum\/t\/start-here-welcome-to-deep-learning-with-pytorch-zero-to-gans\/1622)\" from \"jovian.ml\" in collaboratoin with \"freecodecamp.org\"*","375ce075":"## Creating a submission file","747bc820":"## Exploring the Data","4e5807e2":"## Model","c0a21d61":"## Training the model","50a676c0":"## Creating Datasets & Data Loaders","9b276d5b":"## Making predictions & submission","ba3a902a":"We can now save it batck to CSV, and download the file from the sidebar (check the output folder)"}}