{"cell_type":{"1ab235a6":"code","14d9f330":"code","00d764f0":"code","0e3521cb":"code","10b0f45f":"code","398af3bb":"code","f85ac6fd":"code","e05d0a84":"code","05f7ac35":"code","9abb4216":"code","f35dbc4c":"code","3b01c144":"code","025cae89":"code","9e475131":"code","3222814a":"code","8efd0826":"code","4e5d530f":"code","977b50ad":"code","096820b6":"code","87766137":"code","18b8c444":"code","9404a578":"code","6517b875":"code","8b2d2f10":"code","0075c5f2":"code","ce41f45c":"code","305301c6":"code","4b4e75c9":"markdown","43776b45":"markdown","a3772e29":"markdown","f84e821c":"markdown","2377740a":"markdown","440f934a":"markdown","0df3ae43":"markdown","215806aa":"markdown"},"source":{"1ab235a6":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\nimport seaborn as sns  # visualization tool\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory\n\nfrom subprocess import check_output\nprint(check_output([\"ls\", \"..\/input\"]).decode(\"utf8\"))\n\n# Any results you write to the current directory are saved as output.","14d9f330":"data = pd.read_csv('..\/input\/forestfires.csv')","00d764f0":"data.info()","0e3521cb":"data.corr()","10b0f45f":"#correlation map\nf,ax = plt.subplots(figsize=(18, 18))\nsns.heatmap(data.corr(), annot=True, linewidths=.5, fmt= '.1f',ax=ax)\nplt.show()","398af3bb":"data.head(10)","f85ac6fd":"# Histogram\n# bins = number of bar in figure\ndata.rain.plot(kind = 'hist',bins = 50,figsize = (12,12))\nplt.show()","e05d0a84":"series = data['ISI']        # data['Defense'] = series\nprint(type(series))\ndata_frame = data[['ISI']]  # data[['Defense']] = data frame\nprint(type(data_frame))","05f7ac35":"# 1 - Filtering Pandas data frame\nx = data['rain']>1     # There are only 3 pokemons who have higher defense value than 200\ndata[x]","9abb4216":"# This is also same with previous code line. Therefore we can also use '&' for filtering.\ndata[(data['rain']<1) & (data['temp']>30)]","f35dbc4c":"data.head()","3b01c144":"# info gives data type like dataframe, number of sample or row, number of feature or column, feature types and memory usage\ndata.info()","025cae89":" #For example lets look frequency of months types\nprint(data['month'].value_counts(dropna =False))  # if there are nan values that also be counted\n","9e475131":"#for example max temp 33.3 min wind 0.4\ndata.describe() #ignore null entries","3222814a":"# Plotting all data \ndata1 = data.loc[:,[\"FFMC\",\"DMC\",\"DC\"]]\ndata1.plot()\n# it is confusing","8efd0826":"time_list = [\"1992-03-08\",\"1992-04-12\"]\nprint(type(time_list[1])) # As you can see date is string\n# however we want it to be datetime object\ndatetime_object = pd.to_datetime(time_list)\nprint(type(datetime_object))","4e5d530f":"# close warning\nimport warnings\nwarnings.filterwarnings(\"ignore\")\n# In order to practice lets take head of pokemon data and add it a time list\ndata2 = data.head()\ndate_list = [\"1992-01-10\",\"1992-02-10\",\"1992-03-10\",\"1993-03-15\",\"1993-03-16\"]\ndatetime_object = pd.to_datetime(date_list)\ndata2[\"date\"] = datetime_object\n# lets make date as index\ndata2= data2.set_index(\"date\")\ndata2 ","977b50ad":"# Now we can select according to our date index\nprint(data2.loc[\"1993-03-16\"])\nprint(data2.loc[\"1992-03-10\":\"1993-03-16\"])","096820b6":"# indexing using square brackets\ndata[\"temp\"][1]","87766137":"# using loc accessor\ndata.loc[1,[\"temp\"]]","18b8c444":"# Selecting only some columns\ndata[[\"temp\",\"rain\"]]","9404a578":"# Slicing and indexing series\ndata.loc[1:10,\"temp\":\"rain\"]   # 10 and \"Defense\" are inclusive","6517b875":"# From something to end\ndata.loc[1:10,\"ISI\":] ","8b2d2f10":"# Creating boolean series\nboolean = data.temp > 30\ndata[boolean]","0075c5f2":"# Combining filters\nfirst_filter = data.temp > 30\nsecond_filter = data.ISI > 10\ndata[first_filter & second_filter]","ce41f45c":"# our index name is this:\nprint(data.index.name)\n# lets change it\ndata.index.name = \"index_name\"\ndata.head()","305301c6":"# Setting index : type 1 is outer type 2 is inner index\ndata1 = data.set_index([\"month\",\"temp\"]) \ndata1.head(100)\n","4b4e75c9":"SLICING DATA FRAME\n* Difference between selecting columns\n * Series and data frames\n* Slicing and indexing series\n* Reverse slicing \n* From something to end","43776b45":"HIERARCHICAL INDEXING","a3772e29":"FILTERING DATA FRAMES","f84e821c":"Information of Dataset\nFor more information, read [Cortez and Morais, 2007]. 1. X - x-axis spatial coordinate within the Montesinho park map: 1 to 9 2. Y - y-axis spatial coordinate within the Montesinho park map: 2 to 9 3. month - month of the year: 'jan' to 'dec' 4. day - day of the week: 'mon' to 'sun' 5. FFMC - FFMC index from the FWI system: 18.7 to 96.20 6. DMC - DMC index from the FWI system: 1.1 to 291.3 7. DC - DC index from the FWI system: 7.9 to 860.6 8. ISI - ISI index from the FWI system: 0.0 to 56.10 9. temp - temperature in Celsius degrees: 2.2 to 33.30 10. RH - relative humidity in %: 15.0 to 100 11. wind - wind speed in km\/h: 0.40 to 9.40 12. rain - outside rain in mm\/m2 : 0.0 to 6.4 13. area - the burned area of the forest (in ha): 0.00 to 1090.84 (this output variable is very skewed towards 0.0, thus it may make sense to model with the logarithm transform).","2377740a":"INDEXING DATA FRAMES\n* Indexing using square brackets\n* Using column attribute and row label\n* Using loc accessor\n* Selecting only some columns","440f934a":"INDEX OBJECTS AND LABELED DATA","0df3ae43":"INDEXING PANDAS TIME SERIES\n* datetime = object\n* parse_dates(boolean): Transform date to ISO 8601 (yyyy-mm-dd hh:mm:ss ) format","215806aa":"EXPLORATORY DATA ANALYSIS\nvalue_counts(): Frequency counts\n\n* Lets say value at 75% is Q3 and value at 25% is Q1. \n* Outlier are smaller than Q1 - 1.5(Q3-Q1) and bigger than Q3 + 1.5(Q3-Q1). (Q3-Q1) = IQR\nWe will use describe() method. Describe method includes:\n* count: number of entries\n* mean: average of entries\n* std: standart deviation\n* min: minimum entry\n* 25%: first quantile\n* 50%: median or second quantile\n* 75%: third quantile\n* max: maximum entry\n\n\n\n* 1,4,5,6,8,9,11,12,13,14,15,16,17\n* The median is the number that is in **middle** of the sequence. In this case it would be 11."}}