{"cell_type":{"2731edc9":"code","eb754f44":"code","534b0609":"code","36377125":"code","52dd0864":"code","80a785a8":"code","b64c6dde":"code","746657d9":"code","fc72c797":"code","3ea3d2de":"code","62f465eb":"code","9cd44161":"code","0a7495a4":"code","30ac8527":"code","f70d6ab7":"code","6a1fe559":"code","57a39a01":"code","e1610586":"code","36314de3":"code","7f001415":"code","7f990fd7":"code","dd6dc1a9":"code","e4b9ad3a":"code","f74976c4":"code","04f5df6f":"code","13695ee7":"code","f04c8169":"code","ab937d9a":"code","af7c56ae":"code","010da5f2":"code","61b97536":"code","74f5ddec":"code","05ba2125":"code","7544e643":"code","82a11ba7":"code","2df17fef":"code","b7c8241d":"code","ace269b1":"code","65f8f2f6":"code","87808ea6":"code","5ae837c7":"code","f5952e52":"code","1e002d03":"code","acd1961b":"code","2c1f6c70":"code","9126b40a":"code","cbfb7506":"code","cd31537b":"code","580970b6":"markdown","79a73e96":"markdown","c4158e5a":"markdown","41dd58ca":"markdown","9b6802b0":"markdown","1ba67da2":"markdown","ba57b7ea":"markdown","f73c2dd1":"markdown","003e2305":"markdown","27284236":"markdown","4ff47387":"markdown","3554d892":"markdown","02195e5a":"markdown","1e06761a":"markdown","2d2001f2":"markdown","40b5dabe":"markdown","53e042fa":"markdown","9921641d":"markdown","234a417c":"markdown","21cc46a8":"markdown","f3389345":"markdown","5b958483":"markdown","97bf4480":"markdown","756ea5d5":"markdown","1b36e902":"markdown","7aed0907":"markdown","32a0c3ff":"markdown","1c403e81":"markdown","a4e18300":"markdown","eeb34421":"markdown","030166ad":"markdown","20bc53f7":"markdown","d3ccd632":"markdown","9c9a8735":"markdown","7fe18041":"markdown","df4aa971":"markdown","d565f22c":"markdown","53048185":"markdown","0ffc6568":"markdown","230e705e":"markdown","2c0fa369":"markdown","f2ae8a36":"markdown","3ec30424":"markdown"},"source":{"2731edc9":"from bokeh.io import output_notebook\noutput_notebook()","eb754f44":"from bokeh.layouts import column, gridplot\nfrom bokeh.models import Div, Range1d, WMTSTileSource\nfrom bokeh.plotting import figure, show\n\noutput_notebook()\nimport bokeh.sampledata\nbokeh.sampledata.download()\nfrom bokeh.sampledata.airports import data as airports\nfrom bokeh.tile_providers import CARTODBPOSITRON, get_provider\n\ntitle = \"US Airports: Field Elevation > 1500m\"\n\ndef plot(tile_source):\n\n    # set to roughly extent of points\n    x_range = Range1d(start=airports['x'].min() - 10000, end=airports['x'].max() + 10000, bounds=None)\n    y_range = Range1d(start=airports['y'].min() - 10000, end=airports['y'].max() + 10000, bounds=None)\n\n    # create plot and add tools\n    p = figure(tools='hover,wheel_zoom,pan,reset', x_range=x_range, y_range=y_range, title=title,\n               tooltips=[(\"Name\", \"@name\"), (\"Elevation\", \"@elevation (m)\")],\n               plot_width=400, plot_height=400)\n    p.axis.visible = False\n    p.add_tile(tile_source)\n\n    # create point glyphs\n    p.circle(x='x', y='y', size=10, fill_color=\"#F46B42\", line_color=\"white\", line_width=2, source=airports)\n    return p\n\n# create a tile source\ntile_options = {}\ntile_options['url'] = 'http:\/\/tile.stamen.com\/terrain\/{Z}\/{X}\/{Y}.png'\ntile_options['attribution'] = \"\"\"\n    Map tiles by <a href=\"http:\/\/stamen.com\">Stamen Design<\/a>, under\n    <a href=\"http:\/\/creativecommons.org\/licenses\/by\/3.0\">CC BY 3.0<\/a>.\n    Data by <a href=\"http:\/\/openstreetmap.org\">OpenStreetMap<\/a>,\n    under <a href=\"http:\/\/www.openstreetmap.org\/copyright\">ODbL<\/a>.\n    \"\"\"\nmq_tile_source = WMTSTileSource(**tile_options)\n\ncarto = plot(get_provider(CARTODBPOSITRON))\nmq = plot(mq_tile_source)\n\n# link panning\nmq.x_range = carto.x_range\nmq.y_range = carto.y_range\n\ndiv = Div(text=\"\"\"\n<p>This example shows the same data on two separate tile plots. The left plot\nis using a built-in CartoDB tile source, and is using  a customized tile source\nconfigured for OpenStreetMap.<\/p>\n\"\"\", width=800)\n\nlayout = column(div, gridplot([[carto, mq]], toolbar_location=\"right\"))\n\nshow(layout)","534b0609":"from bokeh.layouts import layout\nfrom bokeh.plotting import figure, output_file, show\n\np1 = figure(match_aspect=True, title=\"Circle touches all 4 sides of square\")\np1.rect(0, 0, 300, 300, line_color='black')\np1.circle(x=0, y=0, radius=150, line_color='black', fill_color='grey',\n          radius_units='data')\n\ndef draw_test_figure(aspect_scale=1, width=300, height=300):\n    p = figure(\n        plot_width=width,\n        plot_height=height,\n        match_aspect=True,\n        aspect_scale=aspect_scale,\n        title=\"Aspect scale = {0}\".format(aspect_scale),\n        toolbar_location=None)\n    p.circle([-1, +1, +1, -1], [-1, -1, +1, +1])\n    return p\n\naspect_scales = [0.25, 0.5, 1, 2, 4]\np2s = [draw_test_figure(aspect_scale=i) for i in aspect_scales]\n\nsizes = [(100, 400), (200, 400), (400, 200), (400, 100)]\np3s = [draw_test_figure(width=a, height=b) for (a, b) in sizes]\n\nlayout = layout(children=[[p1], p2s, p3s])\n\noutput_file(\"aspect.html\")\nshow(layout)","36377125":"from bokeh.io import output_file, show\nfrom bokeh.plotting import figure\n\n#output_file(\"bar_basic.html\")\n\nfruits = ['Apples', 'Pears', 'Nectarines', 'Plums', 'Grapes', 'Strawberries']\ncounts = [5, 3, 4, 2, 4, 6]\n\np = figure(x_range=fruits, plot_height=350, title=\"Fruit Counts\",\n           toolbar_location=None, tools=\"\")\n\np.vbar(x=fruits, top=counts, width=0.9)\n\np.xgrid.grid_line_color = None\np.y_range.start = 0\n\nshow(p)","52dd0864":"from bokeh.io import output_file, show\nfrom bokeh.models import ColumnDataSource\nfrom bokeh.palettes import Spectral6\nfrom bokeh.plotting import figure\nfrom bokeh.transform import factor_cmap\n\noutput_file(\"bar_colormapped.html\")\n\nfruits = ['Apples', 'Pears', 'Nectarines', 'Plums', 'Grapes', 'Strawberries']\ncounts = [5, 3, 4, 2, 4, 6]\n\nsource = ColumnDataSource(data=dict(fruits=fruits, counts=counts))\n\np = figure(x_range=fruits, plot_height=350, toolbar_location=None, title=\"Fruit Counts\")\np.vbar(x='fruits', top='counts', width=0.9, source=source, legend_field=\"fruits\",\n       line_color='white', fill_color=factor_cmap('fruits', palette=Spectral6, factors=fruits))\n\np.xgrid.grid_line_color = None\np.y_range.start = 0\np.y_range.end = 9\np.legend.orientation = \"horizontal\"\np.legend.location = \"top_center\"\n\nshow(p)","80a785a8":"from bokeh.io import output_file, show\nfrom bokeh.models import ColumnDataSource\nfrom bokeh.palettes import Spectral6\nfrom bokeh.plotting import figure\n\noutput_file(\"bar_colors.html\")\n\nfruits = ['Apples', 'Pears', 'Nectarines', 'Plums', 'Grapes', 'Strawberries']\ncounts = [5, 3, 4, 2, 4, 6]\n\nsource = ColumnDataSource(data=dict(fruits=fruits, counts=counts, color=Spectral6))\n\np = figure(x_range=fruits, y_range=(0,9), plot_height=350, title=\"Fruit Counts\",\n           toolbar_location=None, tools=\"\")\n\np.vbar(x='fruits', top='counts', width=0.9, color='color', legend_field=\"fruits\", source=source)\n\np.xgrid.grid_line_color = None\np.legend.orientation = \"horizontal\"\np.legend.location = \"top_center\"\n\nshow(p)","b64c6dde":"from bokeh.io import output_file, show\nfrom bokeh.models import ColumnDataSource\nfrom bokeh.plotting import figure\nfrom bokeh.transform import dodge\n\noutput_file(\"bar_dodged.html\")\n\nfruits = ['Apples', 'Pears', 'Nectarines', 'Plums', 'Grapes', 'Strawberries']\nyears = ['2015', '2016', '2017']\n\ndata = {'fruits' : fruits,\n        '2015'   : [2, 1, 4, 3, 2, 4],\n        '2016'   : [5, 3, 3, 2, 4, 6],\n        '2017'   : [3, 2, 4, 4, 5, 3]}\n\nsource = ColumnDataSource(data=data)\n\np = figure(x_range=fruits, y_range=(0, 10), plot_height=350, title=\"Fruit Counts by Year\",\n           toolbar_location=None, tools=\"\")\n\np.vbar(x=dodge('fruits', -0.25, range=p.x_range), top='2015', width=0.2, source=source,\n       color=\"#c9d9d3\", legend_label=\"2015\")\n\np.vbar(x=dodge('fruits',  0.0,  range=p.x_range), top='2016', width=0.2, source=source,\n       color=\"#718dbf\", legend_label=\"2016\")\n\np.vbar(x=dodge('fruits',  0.25, range=p.x_range), top='2017', width=0.2, source=source,\n       color=\"#e84d60\", legend_label=\"2017\")\n\np.x_range.range_padding = 0.1\np.xgrid.grid_line_color = None\np.legend.location = \"top_left\"\np.legend.orientation = \"horizontal\"\n\nshow(p)","746657d9":"from bokeh.io import output_file, show\nfrom bokeh.models import ColumnDataSource\nfrom bokeh.plotting import figure\nfrom bokeh.sampledata.sprint import sprint\n\noutput_file(\"bar_intervals.html\")\n\nsprint.Year = sprint.Year.astype(str)\ngroup = sprint.groupby('Year')\nsource = ColumnDataSource(group)\n\np = figure(y_range=group, x_range=(9.5,12.7), plot_width=400, plot_height=550, toolbar_location=None,\n           title=\"Time Spreads for Sprint Medalists (by Year)\")\np.hbar(y=\"Year\", left='Time_min', right='Time_max', height=0.4, source=source)\n\np.ygrid.grid_line_color = None\np.xaxis.axis_label = \"Time (seconds)\"\np.outline_line_color = None\n\nshow(p)","fc72c797":"from bokeh.io import output_file, show\nfrom bokeh.models import FactorRange\nfrom bokeh.plotting import figure\n\noutput_file(\"bar_mixed.html\")\n\nfactors = [\n    (\"Q1\", \"jan\"), (\"Q1\", \"feb\"), (\"Q1\", \"mar\"),\n    (\"Q2\", \"apr\"), (\"Q2\", \"may\"), (\"Q2\", \"jun\"),\n    (\"Q3\", \"jul\"), (\"Q3\", \"aug\"), (\"Q3\", \"sep\"),\n    (\"Q4\", \"oct\"), (\"Q4\", \"nov\"), (\"Q4\", \"dec\"),\n\n]\n\np = figure(x_range=FactorRange(*factors), plot_height=350,\n           toolbar_location=None, tools=\"\")\n\nx = [ 10, 12, 16, 9, 10, 8, 12, 13, 14, 14, 12, 16 ]\np.vbar(x=factors, top=x, width=0.9, alpha=0.5)\n\np.line(x=[\"Q1\", \"Q2\", \"Q3\", \"Q4\"], y=[12, 9, 13, 14], color=\"red\", line_width=2)\n\np.y_range.start = 0\np.x_range.range_padding = 0.1\np.xaxis.major_label_orientation = 1\np.xgrid.grid_line_color = None\n\nshow(p)","3ea3d2de":"from bokeh.io import output_file, show\nfrom bokeh.models import ColumnDataSource, FactorRange\nfrom bokeh.plotting import figure\n\noutput_file(\"bar_nested.html\")\n\nfruits = ['Apples', 'Pears', 'Nectarines', 'Plums', 'Grapes', 'Strawberries']\nyears = ['2015', '2016', '2017']\n\ndata = {'fruits' : fruits,\n        '2015'   : [2, 1, 4, 3, 2, 4],\n        '2016'   : [5, 3, 3, 2, 4, 6],\n        '2017'   : [3, 2, 4, 4, 5, 3]}\n\n# this creates [ (\"Apples\", \"2015\"), (\"Apples\", \"2016\"), (\"Apples\", \"2017\"), (\"Pears\", \"2015), ... ]\nx = [ (fruit, year) for fruit in fruits for year in years ]\ncounts = sum(zip(data['2015'], data['2016'], data['2017']), ()) # like an hstack\n\nsource = ColumnDataSource(data=dict(x=x, counts=counts))\n\np = figure(x_range=FactorRange(*x), plot_height=350, title=\"Fruit Counts by Year\",\n           toolbar_location=None, tools=\"\")\n\np.vbar(x='x', top='counts', width=0.9, source=source)\n\np.y_range.start = 0\np.x_range.range_padding = 0.1\np.xaxis.major_label_orientation = 1\np.xgrid.grid_line_color = None\n\nshow(p)","62f465eb":"from bokeh.io import output_file, show\nfrom bokeh.models import ColumnDataSource, FactorRange\nfrom bokeh.plotting import figure\nfrom bokeh.transform import factor_cmap\n\noutput_file(\"bar_nested_colormapped.html\")\n\nfruits = ['Apples', 'Pears', 'Nectarines', 'Plums', 'Grapes', 'Strawberries']\nyears = ['2015', '2016', '2017']\n\ndata = {'fruits' : fruits,\n        '2015'   : [2, 1, 4, 3, 2, 4],\n        '2016'   : [5, 3, 3, 2, 4, 6],\n        '2017'   : [3, 2, 4, 4, 5, 3]}\n\npalette = [\"#c9d9d3\", \"#718dbf\", \"#e84d60\"]\n\n# this creates [ (\"Apples\", \"2015\"), (\"Apples\", \"2016\"), (\"Apples\", \"2017\"), (\"Pears\", \"2015), ... ]\nx = [ (fruit, year) for fruit in fruits for year in years ]\ncounts = sum(zip(data['2015'], data['2016'], data['2017']), ()) # like an hstack\n\nsource = ColumnDataSource(data=dict(x=x, counts=counts))\n\np = figure(x_range=FactorRange(*x), plot_height=350, title=\"Fruit Counts by Year\",\n           toolbar_location=None, tools=\"\")\n\np.vbar(x='x', top='counts', width=0.9, source=source, line_color=\"white\",\n       fill_color=factor_cmap('x', palette=palette, factors=years, start=1, end=2))\n\np.y_range.start = 0\np.x_range.range_padding = 0.1\np.xaxis.major_label_orientation = 1\np.xgrid.grid_line_color = None\n\nshow(p)","9cd44161":"from bokeh.io import output_file, show\nfrom bokeh.palettes import Spectral5\nfrom bokeh.plotting import figure\nfrom bokeh.sampledata.autompg import autompg_clean as df\nfrom bokeh.transform import factor_cmap\n\noutput_file(\"bar_pandas_groupby_nested.html\")\n\ndf.cyl = df.cyl.astype(str)\ndf.yr = df.yr.astype(str)\n\ngroup = df.groupby(['cyl', 'mfr'])\n\nindex_cmap = factor_cmap('cyl_mfr', palette=Spectral5, factors=sorted(df.cyl.unique()), end=1)\n\np = figure(plot_width=800, plot_height=300, title=\"Mean MPG by # Cylinders and Manufacturer\",\n           x_range=group, toolbar_location=None, tooltips=[(\"MPG\", \"@mpg_mean\"), (\"Cyl, Mfr\", \"@cyl_mfr\")])\n\np.vbar(x='cyl_mfr', top='mpg_mean', width=1, source=group,\n       line_color=\"white\", fill_color=index_cmap, )\n\np.y_range.start = 0\np.x_range.range_padding = 0.05\np.xgrid.grid_line_color = None\np.xaxis.axis_label = \"Manufacturer grouped by # Cylinders\"\np.xaxis.major_label_orientation = 1.2\np.outline_line_color = None\n\nshow(p)","0a7495a4":"from bokeh.io import output_file, show\nfrom bokeh.plotting import figure\n\noutput_file(\"bar_sorted.html\")\n\nfruits = ['Apples', 'Pears', 'Nectarines', 'Plums', 'Grapes', 'Strawberries']\ncounts = [5, 3, 4, 2, 4, 6]\n\n# sorting the bars means sorting the range factors\nsorted_fruits = sorted(fruits, key=lambda x: counts[fruits.index(x)])\n\np = figure(x_range=sorted_fruits, plot_height=350, title=\"Fruit Counts\",\n           toolbar_location=None, tools=\"\")\n\np.vbar(x=fruits, top=counts, width=0.9)\n\np.xgrid.grid_line_color = None\np.y_range.start = 0\n\nshow(p)","30ac8527":"from bokeh.io import output_file, show\nfrom bokeh.plotting import figure\n\noutput_file(\"bar_stacked.html\")\n\nfruits = ['Apples', 'Pears', 'Nectarines', 'Plums', 'Grapes', 'Strawberries']\nyears = [\"2015\", \"2016\", \"2017\"]\ncolors = [\"#c9d9d3\", \"#718dbf\", \"#e84d60\"]\n\ndata = {'fruits' : fruits,\n        '2015'   : [2, 1, 4, 3, 2, 4],\n        '2016'   : [5, 3, 4, 2, 4, 6],\n        '2017'   : [3, 2, 4, 4, 5, 3]}\n\np = figure(x_range=fruits, plot_height=250, title=\"Fruit Counts by Year\",\n           toolbar_location=None, tools=\"hover\", tooltips=\"$name @fruits: @$name\")\n\np.vbar_stack(years, x='fruits', width=0.9, color=colors, source=data,\n             legend_label=years)\n\np.y_range.start = 0\np.x_range.range_padding = 0.1\np.xgrid.grid_line_color = None\np.axis.minor_tick_line_color = None\np.outline_line_color = None\np.legend.location = \"top_left\"\np.legend.orientation = \"horizontal\"\n\nshow(p)","f70d6ab7":"from bokeh.io import output_file, show\nfrom bokeh.models import ColumnDataSource, FactorRange\nfrom bokeh.plotting import figure\n\noutput_file(\"bar_stacked_grouped.html\")\n\nfactors = [\n    (\"Q1\", \"jan\"), (\"Q1\", \"feb\"), (\"Q1\", \"mar\"),\n    (\"Q2\", \"apr\"), (\"Q2\", \"may\"), (\"Q2\", \"jun\"),\n    (\"Q3\", \"jul\"), (\"Q3\", \"aug\"), (\"Q3\", \"sep\"),\n    (\"Q4\", \"oct\"), (\"Q4\", \"nov\"), (\"Q4\", \"dec\"),\n\n]\n\nregions = ['east', 'west']\n\nsource = ColumnDataSource(data=dict(\n    x=factors,\n    east=[ 5, 5, 6, 5, 5, 4, 5, 6, 7, 8, 6, 9 ],\n    west=[ 5, 7, 9, 4, 5, 4, 7, 7, 7, 6, 6, 7 ],\n))\n\np = figure(x_range=FactorRange(*factors), plot_height=250,\n           toolbar_location=None, tools=\"\")\n\np.vbar_stack(regions, x='x', width=0.9, alpha=0.5, color=[\"blue\", \"red\"], source=source,\n             legend_label=regions)\n\np.y_range.start = 0\np.y_range.end = 18\np.x_range.range_padding = 0.1\np.xaxis.major_label_orientation = 1\np.xgrid.grid_line_color = None\np.legend.location = \"top_center\"\np.legend.orientation = \"horizontal\"\n\nshow(p)","6a1fe559":"\nfrom bokeh.io import output_file, show\nfrom bokeh.models import ColumnDataSource\nfrom bokeh.palettes import GnBu3, OrRd3\nfrom bokeh.plotting import figure\n\noutput_file(\"bar_stacked_split.html\")\n\nfruits = ['Apples', 'Pears', 'Nectarines', 'Plums', 'Grapes', 'Strawberries']\nyears = [\"2015\", \"2016\", \"2017\"]\n\nexports = {'fruits' : fruits,\n           '2015'   : [2, 1, 4, 3, 2, 4],\n           '2016'   : [5, 3, 4, 2, 4, 6],\n           '2017'   : [3, 2, 4, 4, 5, 3]}\nimports = {'fruits' : fruits,\n           '2015'   : [-1, 0, -1, -3, -2, -1],\n           '2016'   : [-2, -1, -3, -1, -2, -2],\n           '2017'   : [-1, -2, -1, 0, -2, -2]}\n\np = figure(y_range=fruits, plot_height=350, x_range=(-16, 16), title=\"Fruit import\/export, by year\",\n           toolbar_location=None)\n\np.hbar_stack(years, y='fruits', height=0.9, color=GnBu3, source=ColumnDataSource(exports),\n             legend_label=[\"%s exports\" % x for x in years])\n\np.hbar_stack(years, y='fruits', height=0.9, color=OrRd3, source=ColumnDataSource(imports),\n             legend_label=[\"%s imports\" % x for x in years])\n\np.y_range.range_padding = 0.1\np.ygrid.grid_line_color = None\np.legend.location = \"top_left\"\np.axis.minor_tick_line_color = None\np.outline_line_color = None\n\nshow(p)","57a39a01":"from bokeh.models import BoxAnnotation\nfrom bokeh.plotting import figure, output_file, show\nfrom bokeh.sampledata.glucose import data\n\nTOOLS = \"pan,wheel_zoom,box_zoom,reset,save\"\n\ndata = data.loc['2010-10-04':'2010-10-04']\n\np = figure(x_axis_type=\"datetime\", tools=TOOLS, title=\"Glocose Readings, Oct 4th (Red = Outside Range)\")\np.background_fill_color = \"#efefef\"\np.xgrid.grid_line_color=None\np.xaxis.axis_label = 'Time'\np.yaxis.axis_label = 'Value'\n\np.line(data.index, data.glucose, line_color='grey')\np.circle(data.index, data.glucose, color='grey', size=1)\n\np.add_layout(BoxAnnotation(top=80, fill_alpha=0.1, fill_color='red', line_color='red'))\np.add_layout(BoxAnnotation(bottom=180, fill_alpha=0.1, fill_color='red', line_color='red'))\n\noutput_file(\"box_annotation.html\", title=\"box_annotation.py example\")\n\nshow(p)","e1610586":"import numpy as np\nimport pandas as pd\n\nfrom bokeh.plotting import figure, output_file, show\n\n# generate some synthetic time series for six different categories\ncats = list(\"abcdef\")\nyy = np.random.randn(2000)\ng = np.random.choice(cats, 2000)\nfor i, l in enumerate(cats):\n    yy[g == l] += i \/\/ 2\ndf = pd.DataFrame(dict(score=yy, group=g))\n\n# find the quartiles and IQR for each category\ngroups = df.groupby('group')\nq1 = groups.quantile(q=0.25)\nq2 = groups.quantile(q=0.5)\nq3 = groups.quantile(q=0.75)\niqr = q3 - q1\nupper = q3 + 1.5*iqr\nlower = q1 - 1.5*iqr\n\n# find the outliers for each category\ndef outliers(group):\n    cat = group.name\n    return group[(group.score > upper.loc[cat]['score']) | (group.score < lower.loc[cat]['score'])]['score']\nout = groups.apply(outliers).dropna()\n\n# prepare outlier data for plotting, we need coordinates for every outlier.\nif not out.empty:\n    outx = []\n    outy = []\n    for keys in out.index:\n        outx.append(keys[0])\n        outy.append(out.loc[keys[0]].loc[keys[1]])\n\np = figure(tools=\"\", background_fill_color=\"#efefef\", x_range=cats, toolbar_location=None)\n\n# if no outliers, shrink lengths of stems to be no longer than the minimums or maximums\nqmin = groups.quantile(q=0.00)\nqmax = groups.quantile(q=1.00)\nupper.score = [min([x,y]) for (x,y) in zip(list(qmax.loc[:,'score']),upper.score)]\nlower.score = [max([x,y]) for (x,y) in zip(list(qmin.loc[:,'score']),lower.score)]\n\n# stems\np.segment(cats, upper.score, cats, q3.score, line_color=\"black\")\np.segment(cats, lower.score, cats, q1.score, line_color=\"black\")\n\n# boxes\np.vbar(cats, 0.7, q2.score, q3.score, fill_color=\"#E08E79\", line_color=\"black\")\np.vbar(cats, 0.7, q1.score, q2.score, fill_color=\"#3B8686\", line_color=\"black\")\n\n# whiskers (almost-0 height rects simpler than segments)\np.rect(cats, lower.score, 0.2, 0.01, line_color=\"black\")\np.rect(cats, upper.score, 0.2, 0.01, line_color=\"black\")\n\n# outliers\nif not out.empty:\n    p.circle(outx, outy, size=6, color=\"#F38630\", fill_alpha=0.6)\n\np.xgrid.grid_line_color = None\np.ygrid.grid_line_color = \"white\"\np.grid.grid_line_width = 2\np.xaxis.major_label_text_font_size=\"16px\"\n\noutput_file(\"boxplot.html\", title=\"boxplot.py example\")\n\nshow(p)","36314de3":"\nimport numpy as np\nimport pandas as pd\n\nfrom bokeh.palettes import brewer\nfrom bokeh.plotting import figure, output_file, show\n\nN = 20\ncats = 10\ndf = pd.DataFrame(np.random.randint(10, 100, size=(N, cats))).add_prefix('y')\n\ndef stacked(df):\n    df_top = df.cumsum(axis=1)\n    df_bottom = df_top.shift(axis=1).fillna({'y0': 0})[::-1]\n    df_stack = pd.concat([df_bottom, df_top], ignore_index=True)\n    return df_stack\n\nareas = stacked(df)\ncolors = brewer['Spectral'][areas.shape[1]]\nx2 = np.hstack((df.index[::-1], df.index))\n\np = figure(x_range=(0, N-1), y_range=(0, 800))\np.grid.minor_grid_line_color = '#eeeeee'\n\np.patches([x2] * areas.shape[1], [areas[c].values for c in areas],\n          color=colors, alpha=0.8, line_color=None)\n\noutput_file('stacked_area.html', title='brewer.py example')\n\nshow(p)","7f001415":"\nfrom collections import OrderedDict\nfrom io import StringIO\nfrom math import log, sqrt\n\nimport numpy as np\nimport pandas as pd\n\nfrom bokeh.plotting import figure, output_file, show\n\nantibiotics = \"\"\"\nbacteria,                        penicillin, streptomycin, neomycin, gram\nMycobacterium tuberculosis,      800,        5,            2,        negative\nSalmonella schottmuelleri,       10,         0.8,          0.09,     negative\nProteus vulgaris,                3,          0.1,          0.1,      negative\nKlebsiella pneumoniae,           850,        1.2,          1,        negative\nBrucella abortus,                1,          2,            0.02,     negative\nPseudomonas aeruginosa,          850,        2,            0.4,      negative\nEscherichia coli,                100,        0.4,          0.1,      negative\nSalmonella (Eberthella) typhosa, 1,          0.4,          0.008,    negative\nAerobacter aerogenes,            870,        1,            1.6,      negative\nBrucella antracis,               0.001,      0.01,         0.007,    positive\nStreptococcus fecalis,           1,          1,            0.1,      positive\nStaphylococcus aureus,           0.03,       0.03,         0.001,    positive\nStaphylococcus albus,            0.007,      0.1,          0.001,    positive\nStreptococcus hemolyticus,       0.001,      14,           10,       positive\nStreptococcus viridans,          0.005,      10,           40,       positive\nDiplococcus pneumoniae,          0.005,      11,           10,       positive\n\"\"\"\n\ndrug_color = OrderedDict([\n    (\"Penicillin\",   \"#0d3362\"),\n    (\"Streptomycin\", \"#c64737\"),\n    (\"Neomycin\",     \"black\"  ),\n])\n\ngram_color = OrderedDict([\n    (\"negative\", \"#e69584\"),\n    (\"positive\", \"#aeaeb8\"),\n])\n\ndf = pd.read_csv(StringIO(antibiotics),\n                 skiprows=1,\n                 skipinitialspace=True,\n                 engine='python')\n\nwidth = 800\nheight = 800\ninner_radius = 90\nouter_radius = 300 - 10\n\nminr = sqrt(log(.001 * 1E4))\nmaxr = sqrt(log(1000 * 1E4))\na = (outer_radius - inner_radius) \/ (minr - maxr)\nb = inner_radius - a * maxr\n\ndef rad(mic):\n    return a * np.sqrt(np.log(mic * 1E4)) + b\n\nbig_angle = 2.0 * np.pi \/ (len(df) + 1)\nsmall_angle = big_angle \/ 7\n\np = figure(plot_width=width, plot_height=height, title=\"\",\n    x_axis_type=None, y_axis_type=None,\n    x_range=(-420, 420), y_range=(-420, 420),\n    min_border=0, outline_line_color=\"black\",\n    background_fill_color=\"#f0e1d2\")\n\np.xgrid.grid_line_color = None\np.ygrid.grid_line_color = None\n\n# annular wedges\nangles = np.pi\/2 - big_angle\/2 - df.index.to_series()*big_angle\ncolors = [gram_color[gram] for gram in df.gram]\np.annular_wedge(\n    0, 0, inner_radius, outer_radius, -big_angle+angles, angles, color=colors,\n)\n\n# small wedges\np.annular_wedge(0, 0, inner_radius, rad(df.penicillin),\n                -big_angle+angles+5*small_angle, -big_angle+angles+6*small_angle,\n                color=drug_color['Penicillin'])\np.annular_wedge(0, 0, inner_radius, rad(df.streptomycin),\n                -big_angle+angles+3*small_angle, -big_angle+angles+4*small_angle,\n                color=drug_color['Streptomycin'])\np.annular_wedge(0, 0, inner_radius, rad(df.neomycin),\n                -big_angle+angles+1*small_angle, -big_angle+angles+2*small_angle,\n                color=drug_color['Neomycin'])\n\n# circular axes and lables\nlabels = np.power(10.0, np.arange(-3, 4))\nradii = a * np.sqrt(np.log(labels * 1E4)) + b\np.circle(0, 0, radius=radii, fill_color=None, line_color=\"white\")\np.text(0, radii[:-1], [str(r) for r in labels[:-1]],\n       text_font_size=\"11px\", text_align=\"center\", text_baseline=\"middle\")\n\n# radial axes\np.annular_wedge(0, 0, inner_radius-10, outer_radius+10,\n                -big_angle+angles, -big_angle+angles, color=\"black\")\n\n# bacteria labels\nxr = radii[0]*np.cos(np.array(-big_angle\/2 + angles))\nyr = radii[0]*np.sin(np.array(-big_angle\/2 + angles))\nlabel_angle=np.array(-big_angle\/2+angles)\nlabel_angle[label_angle < -np.pi\/2] += np.pi # easier to read labels on the left side\np.text(xr, yr, df.bacteria, angle=label_angle,\n       text_font_size=\"12px\", text_align=\"center\", text_baseline=\"middle\")\n\n# OK, these hand drawn legends are pretty clunky, will be improved in future release\np.circle([-40, -40], [-370, -390], color=list(gram_color.values()), radius=5)\np.text([-30, -30], [-370, -390], text=[\"Gram-\" + gr for gr in gram_color.keys()],\n       text_font_size=\"9px\", text_align=\"left\", text_baseline=\"middle\")\n\np.rect([-40, -40, -40], [18, 0, -18], width=30, height=13,\n       color=list(drug_color.values()))\np.text([-15, -15, -15], [18, 0, -18], text=list(drug_color),\n       text_font_size=\"12px\", text_align=\"left\", text_baseline=\"middle\")\n\noutput_file(\"burtin.html\", title=\"burtin.py example\")\n\nshow(p)","7f990fd7":"from math import pi\n\nimport pandas as pd\n\nfrom bokeh.plotting import figure, output_file, show\nfrom bokeh.sampledata.stocks import MSFT\n\ndf = pd.DataFrame(MSFT)[:50]\ndf[\"date\"] = pd.to_datetime(df[\"date\"])\n\ninc = df.close > df.open\ndec = df.open > df.close\nw = 12*60*60*1000 # half day in ms\n\nTOOLS = \"pan,wheel_zoom,box_zoom,reset,save\"\n\np = figure(x_axis_type=\"datetime\", tools=TOOLS, plot_width=1000, title = \"MSFT Candlestick\")\np.xaxis.major_label_orientation = pi\/4\np.grid.grid_line_alpha=0.3\n\np.segment(df.date, df.high, df.date, df.low, color=\"black\")\np.vbar(df.date[inc], w, df.open[inc], df.close[inc], fill_color=\"#D5E1DD\", line_color=\"black\")\np.vbar(df.date[dec], w, df.open[dec], df.close[dec], fill_color=\"#F2583E\", line_color=\"black\")\n\noutput_file(\"candlestick.html\", title=\"candlestick.py example\")\n\nshow(p)  # open a browser","dd6dc1a9":"\nfrom bokeh.layouts import row\nfrom bokeh.plotting import figure, output_file, show\n\nfactors = [\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\"]\nx =  [50, 40, 65, 10, 25, 37, 80, 60]\n\ndot = figure(title=\"Categorical Dot Plot\", tools=\"\", toolbar_location=None,\n            y_range=factors, x_range=[0,100])\n\ndot.segment(0, factors, x, factors, line_width=2, line_color=\"green\", )\ndot.circle(x, factors, size=15, fill_color=\"orange\", line_color=\"green\", line_width=3, )\n\nfactors = [\"foo 123\", \"bar:0.2\", \"baz-10\"]\nx = [\"foo 123\", \"foo 123\", \"foo 123\", \"bar:0.2\", \"bar:0.2\", \"bar:0.2\", \"baz-10\",  \"baz-10\",  \"baz-10\"]\ny = [\"foo 123\", \"bar:0.2\", \"baz-10\",  \"foo 123\", \"bar:0.2\", \"baz-10\",  \"foo 123\", \"bar:0.2\", \"baz-10\"]\ncolors = [\n    \"#0B486B\", \"#79BD9A\", \"#CFF09E\",\n    \"#79BD9A\", \"#0B486B\", \"#79BD9A\",\n    \"#CFF09E\", \"#79BD9A\", \"#0B486B\"\n]\n\nhm = figure(title=\"Categorical Heatmap\", tools=\"hover\", toolbar_location=None,\n            x_range=factors, y_range=factors)\n\nhm.rect(x, y, color=colors, width=1, height=1)\n\noutput_file(\"categorical.html\", title=\"categorical.py example\")\n\nshow(row(hm, dot, sizing_mode=\"scale_width\"))  # open a browser","e4b9ad3a":"from bokeh.io import output_file, show\nfrom bokeh.models import ColumnDataSource\nfrom bokeh.plotting import figure\nfrom bokeh.sampledata.commits import data\nfrom bokeh.transform import jitter\n\noutput_file(\"categorical_scatter_jitter.html\")\n\nDAYS = ['Sun', 'Sat', 'Fri', 'Thu', 'Wed', 'Tue', 'Mon']\n\nsource = ColumnDataSource(data)\n\np = figure(plot_width=800, plot_height=300, y_range=DAYS, x_axis_type='datetime',\n           title=\"Commits by Time of Day (US\/Central) 2012-2016\")\n\np.circle(x='time', y=jitter('day', width=0.6, range=p.y_range),  source=source, alpha=0.3)\n\np.xaxis.formatter.days = ['%Hh']\np.x_range.range_padding = 0\np.ygrid.grid_line_color = None\n\nshow(p)","f74976c4":"from bokeh.palettes import Viridis6\nfrom bokeh.plotting import figure, show\nfrom bokeh.sampledata.unemployment import data as unemployment\nfrom bokeh.sampledata.us_counties import data as counties\nfrom bokeh.sampledata.us_states import data as states\n\ndel states[\"HI\"]\ndel states[\"AK\"]\n\nEXCLUDED = (\"ak\", \"hi\", \"pr\", \"gu\", \"vi\", \"mp\", \"as\")\n\nstate_xs = [states[code][\"lons\"] for code in states]\nstate_ys = [states[code][\"lats\"] for code in states]\n\ncounty_xs=[counties[code][\"lons\"] for code in counties if counties[code][\"state\"] not in EXCLUDED]\ncounty_ys=[counties[code][\"lats\"] for code in counties if counties[code][\"state\"] not in EXCLUDED]\n\ncounty_colors = []\nfor county_id in counties:\n    if counties[county_id][\"state\"] in EXCLUDED:\n        continue\n    try:\n        rate = unemployment[county_id]\n        idx = int(rate\/6)\n        county_colors.append(Viridis6[idx])\n    except KeyError:\n        county_colors.append(\"black\")\n\np = figure(title=\"US Unemployment 2009\",\n           x_axis_location=None, y_axis_location=None,\n           plot_width=1000, plot_height=600)\np.grid.grid_line_color = None\n\np.patches(county_xs, county_ys,\n          fill_color=county_colors, fill_alpha=0.7,\n          line_color=\"white\", line_width=0.5)\n\np.patches(state_xs, state_ys, fill_alpha=0.0,\n          line_color=\"#884444\", line_width=2, line_alpha=0.3)\n\nshow(p)  # Change to save(p) to save but not show the HTML file","04f5df6f":"import numpy as np\n\nfrom bokeh.io import show\nfrom bokeh.layouts import column, gridplot\nfrom bokeh.models import ColorBar, ColumnDataSource, LinearColorMapper, LogColorMapper\nfrom bokeh.plotting import figure\nfrom bokeh.transform import transform\n\nx = np.random.random(size=2000) * 1000\ny = np.random.normal(size=2000) * 2 + 5\nsource = ColumnDataSource(dict(x=x, y=y))\n\ndef make_plot(mapper_type, palette):\n    mapper_opts = dict(palette=palette, low=1, high=1000)\n    if mapper_type == \"linear\":\n        mapper = LinearColorMapper(**mapper_opts)\n    else:\n        mapper = LogColorMapper(**mapper_opts)\n\n    p = figure(toolbar_location=None, tools='', title=\"\", x_axis_type=mapper_type, x_range=(1, 1000))\n    p.title.text = f\"{palette} with {mapper_type} mapping\"\n    p.circle(x='x', y='y', alpha=0.8, source=source, size=6,\n             fill_color=transform('x', mapper), line_color=None)\n\n    color_bar = ColorBar(color_mapper=mapper, ticker=p.xaxis.ticker, formatter=p.xaxis.formatter,\n                         location=(0,0), orientation='horizontal', padding=0)\n\n    p.add_layout(color_bar, 'below')\n    return p\n\np1 = make_plot('linear', 'Viridis256')\np2 = make_plot('log', 'Viridis256')\np3 = make_plot('linear', 'Viridis6')\np4 = make_plot('log', 'Viridis6')\n\np5 = figure(toolbar_location=None, tools='', title=\"\", x_range=(1, 1000), plot_width=800, plot_height=300)\np5.title.text = f\"Viridis256 with linear mapping and low\/high = 200\/800 = pink\/grey\"\nmapper = LinearColorMapper(palette=\"Viridis256\", low=200, high=800, low_color=\"pink\", high_color=\"darkgrey\")\np5.circle(x='x', y='y', alpha=0.8, source=source, size=6,\n         fill_color=transform('x', mapper), line_color=None)\n\nshow(column(\n    gridplot([p1, p2, p3, p4], ncols=2, plot_width=400, plot_height=300, toolbar_location=None),\n    p5\n))","13695ee7":"\nimport numpy as np\n\nfrom bokeh.plotting import figure, output_file, show\n\nN = 4000\nx = np.random.random(size=N) * 100\ny = np.random.random(size=N) * 100\nradii = np.random.random(size=N) * 1.5\ncolors = [\n    \"#%02x%02x%02x\" % (int(r), int(g), 150) for r, g in zip(50+2*x, 30+2*y)\n]\n\nTOOLS=\"hover,crosshair,pan,wheel_zoom,zoom_in,zoom_out,box_zoom,undo,redo,reset,tap,save,box_select,poly_select,lasso_select,\"\n\np = figure(tools=TOOLS)\n\np.scatter(x, y, radius=radii,\n          fill_color=colors, fill_alpha=0.6,\n          line_color=None)\n\noutput_file(\"color_scatter.html\", title=\"color_scatter.py example\")\n\nshow(p)  # open a browser","f04c8169":"\nimport colorsys\n\nimport yaml\n\nfrom bokeh.layouts import column, row\nfrom bokeh.models import ColumnDataSource, CustomJS, Slider\nfrom bokeh.plotting import curdoc, figure, output_file, show\nfrom bokeh.themes import Theme\n\n\n# for plot 2: create colour spectrum of resolution N and brightness I, return as list of decimal RGB value tuples\ndef generate_color_range(N, I):\n    HSV_tuples = [ (x*1.0\/N, 0.5, I) for x in range(N) ]\n    RGB_tuples = map(lambda x: colorsys.hsv_to_rgb(*x), HSV_tuples)\n    for_conversion = []\n    for RGB_tuple in RGB_tuples:\n        for_conversion.append((int(RGB_tuple[0]*255), int(RGB_tuple[1]*255), int(RGB_tuple[2]*255)))\n    hex_colors = [ rgb_to_hex(RGB_tuple) for RGB_tuple in for_conversion ]\n    return hex_colors, for_conversion\n\n# convert RGB tuple to hexadecimal code\ndef rgb_to_hex(rgb):\n    return '#%02x%02x%02x' % rgb\n\n# convert hexadecimal to RGB tuple\ndef hex_to_dec(hex):\n    red = ''.join(hex.strip('#')[0:2])\n    green = ''.join(hex.strip('#')[2:4])\n    blue = ''.join(hex.strip('#')[4:6])\n    return (int(red, 16), int(green, 16), int(blue,16))\n\n# plot 1: create a color block with RGB values adjusted with sliders\n\n# initialise a white block for the first plot\nhex_color = rgb_to_hex((255, 255, 255))\n\n# initialise the text color as black. This will be switched to white if the block color gets dark enough\ntext_color = '#000000'\n\n# create a data source to enable refreshing of fill & text color\nsource = ColumnDataSource(data=dict(color=[hex_color], text_color=[text_color]))\n\n# create first plot, as a rect() glyph and centered text label, with fill and text color taken from source\np1 = figure(x_range=(-8, 8), y_range=(-4, 4),\n            plot_width=600, plot_height=300,\n            title='move sliders to change', tools='')\n\np1.rect(0, 0, width=18, height=10, fill_color='color',\n        line_color = 'black', source=source)\n\np1.text(0, 0, text='color', text_color='text_color',\n        alpha=0.6667, text_font_size='48px', text_baseline='middle',\n        text_align='center', source=source)\n\nred_slider = Slider(title=\"R\", start=0, end=255, value=255, step=1)\ngreen_slider = Slider(title=\"G\", start=0, end=255, value=255, step=1)\nblue_slider = Slider(title=\"B\", start=0, end=255, value=255, step=1)\n\n# the callback function to update the color of the block and associated label text\n# NOTE: the JS functions for converting RGB to hex are taken from the excellent answer\n# by Tim Down at http:\/\/stackoverflow.com\/questions\/5623838\/rgb-to-hex-and-hex-to-rgb\ncallback = CustomJS(args=dict(source=source, red=red_slider, blue=blue_slider, green=green_slider), code=\"\"\"\n    function componentToHex(c) {\n        var hex = c.toString(16)\n        return hex.length == 1 ? \"0\" + hex : hex\n    }\n    function rgbToHex(r, g, b) {\n        return \"#\" + componentToHex(r) + componentToHex(g) + componentToHex(b)\n    }\n    function toInt(v) {\n       return v | 0\n    }\n    const color = source.data['color']\n    const text_color = source.data['text_color']\n    const R = toInt(red.value)\n    const G = toInt(green.value)\n    const B = toInt(blue.value)\n    color[0] = rgbToHex(R, G, B)\n    text_color[0] = '#ffffff'\n    if ((R > 127) || (G > 127) || (B > 127)) {\n        text_color[0] = '#000000'\n    }\n    source.change.emit()\n\"\"\")\n\nred_slider.js_on_change('value', callback)\nblue_slider.js_on_change('value', callback)\ngreen_slider.js_on_change('value', callback)\n\n# plot 2: create a color spectrum with a hover-over tool to inspect hex codes\n\nbrightness = 0.8 # change to have brighter\/darker colors\ncrx = list(range(1,1001)) # the resolution is 1000 colors\ncry = [ 5 for i in range(len(crx)) ]\ncrcolor, crRGBs = generate_color_range(1000,brightness) # produce spectrum\n\n# make data source object to allow information to be displayed by hover tool\ncrsource = ColumnDataSource(data=dict(x=crx, y=cry, crcolor=crcolor, RGBs=crRGBs))\n\n# create second plot\np2 = figure(x_range=(0,1000), y_range=(0,10),\n            plot_width=600, plot_height=150,\n            tools='hover', title='hover over color')\n\ncolor_range1 = p2.rect(x='x', y='y', width=1, height=10,\n                       color='crcolor', source=crsource)\n\n# set up hover tool to show color hex code and sample swatch\np2.hover.tooltips = [\n    ('color', '$color[hex, rgb, swatch]:crcolor'),\n    ('RGB levels', '@RGBs')\n]\n\n# theme everything for a cleaner look\ncurdoc().theme = Theme(json=yaml.load(\"\"\"\nattrs:\n    Plot:\n        toolbar_location: null\n    Grid:\n        grid_line_color: null\n    Axis:\n        axis_line_color: null\n        major_label_text_color: null\n        major_tick_line_color: null\n        minor_tick_line_color: null\n\"\"\", Loader=yaml.SafeLoader))\n\nlayout = row(\n    column(red_slider, green_slider, blue_slider),\n    column(p1, p2)\n)\n\noutput_file(\"color_sliders.html\", title=\"color_sliders.py example\")\n\nshow(layout)","ab937d9a":"import numpy as np\n\nfrom bokeh.io import curdoc\nfrom bokeh.layouts import column, row\nfrom bokeh.models import ColumnDataSource, Slider, TextInput\nfrom bokeh.plotting import figure\n\n# Set up data\nN = 200\nx = np.linspace(0, 4*np.pi, N)\ny = np.sin(x)\nsource = ColumnDataSource(data=dict(x=x, y=y))\n\n\n# Set up plot\nplot = figure(plot_height=400, plot_width=400, title=\"my sine wave\",\n              tools=\"crosshair,pan,reset,save,wheel_zoom\",\n              x_range=[0, 4*np.pi], y_range=[-2.5, 2.5])\n\nplot.line('x', 'y', source=source, line_width=3, line_alpha=0.6)\n\n\n# Set up widgets\ntext = TextInput(title=\"title\", value='my sine wave')\noffset = Slider(title=\"offset\", value=0.0, start=-5.0, end=5.0, step=0.1)\namplitude = Slider(title=\"amplitude\", value=1.0, start=-5.0, end=5.0, step=0.1)\nphase = Slider(title=\"phase\", value=0.0, start=0.0, end=2*np.pi)\nfreq = Slider(title=\"frequency\", value=1.0, start=0.1, end=5.1, step=0.1)\n\n\n# Set up callbacks\ndef update_title(attrname, old, new):\n    plot.title.text = text.value\n\ntext.on_change('value', update_title)\n\ndef update_data(attrname, old, new):\n\n    # Get the current slider values\n    a = amplitude.value\n    b = offset.value\n    w = phase.value\n    k = freq.value\n\n    # Generate the new curve\n    x = np.linspace(0, 4*np.pi, N)\n    y = a*np.sin(k*x + w) + b\n\n    source.data = dict(x=x, y=y)\n\nfor w in [offset, amplitude, phase, freq]:\n    w.on_change('value', update_data)\n\n\n# Set up layouts and add to document\ninputs = column(text, offset, amplitude, phase, freq)\n\ncurdoc().add_root(row(inputs, plot, width=800))\ncurdoc().title = \"Sliders\"","af7c56ae":"from bokeh.io import save\nfrom bokeh.layouts import column\nfrom bokeh.models import Div, Paragraph\nfrom bokeh.util.browser import view\n\ntemplate = \"\"\"\n{% block postamble %}\n<style>\n.bk.custom {\n    border-radius: 0.5em;\n    padding: 1em;\n}\n.bk.custom-1 {\n    border: 3px solid #2397D8;\n}\n.bk.custom-2 {\n    border: 3px solid #14999A;\n    background-color: whitesmoke;\n}\n<\/style>\n{% endblock %}\n\"\"\"\n\np = Paragraph(text=\"The divs below were configured with additional css_classes:\")\n\ndiv1 = Div(text=\"\"\"\n<p> This Bokeh Div adds the style classes:<p>\n<pre>\n.bk.custom {\n    border-radius: 0.5em;\n    padding: 1em;\n}\n.bk.custom-1 {\n    border: 3px solid #2397D8;\n}\n<\/pre>\n\"\"\")\ndiv1.css_classes = [\"custom\", \"custom-1\"]\n\ndiv2 = Div(text=\"\"\"\n<p> This Bokeh Div adds the style classes:<p>\n<pre>\n.bk.custom {\n    border-radius: 0.5em;\n    padding: 1em;\n}\n.bk.custom-2 {\n    border: 3px solid #14999A;\n    background-color: whitesmoke;\n}\n<\/pre>\n\"\"\")\ndiv2.css_classes = [\"custom\", \"custom-2\"]\n\nsave(column(p, div1, div2), template=template)\nshow(\"css_classes.html\")","010da5f2":"\nimport pandas as pd\n\nfrom bokeh.io import output_file, show\nfrom bokeh.plotting import figure\nfrom bokeh.sampledata.stocks import MSFT\n\ndf = pd.DataFrame(MSFT)[:51]\ninc = df.close > df.open\ndec = df.open > df.close\n\np = figure(plot_width=1000, title=\"MSFT Candlestick with Custom X-Axis\")\n\n# map dataframe indices to date strings and use as label overrides\np.xaxis.major_label_overrides = {\n    i: date.strftime('%b %d') for i, date in enumerate(pd.to_datetime(df[\"date\"]))\n}\np.xaxis.bounds = (0, df.index[-1])\np.x_range.range_padding = 0.05\n\np.segment(df.index, df.high, df.index, df.low, color=\"black\")\np.vbar(df.index[inc], 0.5, df.open[inc], df.close[inc], fill_color=\"#D5E1DD\", line_color=\"black\")\np.vbar(df.index[dec], 0.5, df.open[dec], df.close[dec], fill_color=\"#F2583E\", line_color=\"black\")\n\noutput_file(\"custom_datetime_axis.html\", title=\"custom_datetime_axis.py example\")\n\nshow(p)","61b97536":"from bokeh.io import save\nfrom bokeh.plotting import figure\nfrom bokeh.util.browser import view\n\ntemplate = \"\"\"\n{% block preamble %}\n<style>\n* { box-sizing: border-box; }\n.plots { display: flex; flex-direction: row; width: 100%; }\n.p { width: 33.3%; padding: 50px; }\n.p:nth-child(1) { background-color: red; }\n.p:nth-child(2) { background-color: green; }\n.p:nth-child(3) { background-color: blue; }\n<\/style>\n{% endblock %}\n{% block body %}\n<body style=\"background-color: lightgray;\">\n    {{ self.inner_body() }}\n<\/body>\n{% endblock %}\n{% block contents %}\n<div>\n<p>This example shows how different Bokeh Document roots may be embedded in custom\ntemplates. The individal plots were embedded in divs using the embed macro:\n<pre>\n    &lt;div class=\"p\"&gt;&#123;&#123; embed(roots.p0) &#125;&#125;&lt;\/div&gt;\n    &lt;div class=\"p\"&gt;&#123;&#123; embed(roots.p1) &#125;&#125;&lt;\/div&gt;\n    &lt;div class=\"p\"&gt;&#123;&#123; embed(roots.p2) &#125;&#125;&lt;\/div&gt;\n<\/pre>\nAnd the divs are styled using standard CSS in the template:\n<pre>\n    .p { width: 33.3%; padding: 50px; }\n    .p:nth-child(1) { background-color: red; }\n    .p:nth-child(2) { background-color: green; }\n    .p:nth-child(3) { background-color: blue; }\n<\/pre>\n<\/p>\n<\/div>\n<div class=\"plots\">\n    <div class=\"p\">{{ embed(roots.p0) }}<\/div>\n    <div class=\"p\">{{ embed(roots.p1) }}<\/div>\n    <div class=\"p\">{{ embed(roots.p2) }}<\/div>\n<\/div>\n<\/div>\n{% endblock %}\n\"\"\"\n\nx = [1, 2, 3]\ny = [1, 2, 3]\n\np0 = figure(name=\"p0\", sizing_mode=\"scale_width\")\np0.scatter(x, y, size=20, fill_color=\"red\")\np1 = figure(name=\"p1\", sizing_mode=\"scale_width\")\np1.scatter(x, y, size=20, fill_color=\"green\")\np2 = figure(name=\"p2\", sizing_mode=\"scale_width\")\np2.scatter(x, y, size=20, fill_color=\"blue\")\n\nsave([p0, p1, p2], template=template)\nview(\"custom_layout.html\")","74f5ddec":"\nimport pandas as pd\n\nfrom bokeh.plotting import figure, show\nfrom bokeh.sampledata.periodic_table import elements\n\nelements = elements.copy()\nelements = elements[elements.group != \"-\"]\nelements.sort_values('metal', inplace=True)\n\ncolormap = {\n    \"alkali metal\"         : \"#a6cee3\",\n    \"alkaline earth metal\" : \"#1f78b4\",\n    \"halogen\"              : \"#fdbf6f\",\n    \"metal\"                : \"#b2df8a\",\n    \"metalloid\"            : \"#33a02c\",\n    \"noble gas\"            : \"#bbbb88\",\n    \"nonmetal\"             : \"#baa2a6\",\n    \"transition metal\"     : \"#e08e79\",\n}\n\ndata=dict(\n    atomic_number=elements[\"atomic number\"],\n    sym=elements[\"symbol\"],\n    name=elements[\"name\"],\n    atomic_mass = pd.to_numeric(elements['atomic mass'], errors=\"coerce\"),\n    density=elements['density'],\n    metal=[x.title() for x in elements[\"metal\"]],\n    type_color=[colormap[x] for x in elements[\"metal\"]]\n)\n\nmass_format = '{0.00}'\n\nTOOLTIPS = \"\"\"\n    <div style=\"width: 62px; height: 62px; opacity: .8; padding: 5px; background-color: @type_color;>\n    <h1 style=\"margin: 0; font-size: 12px;\"> @atomic_number <\/h1>\n    <h1 style=\"margin: 0; font-size: 24px;\"><strong> @sym <\/strong><\/h1>\n    <p style=\" margin: 0; font-size: 8px;\"><strong> @name <\/strong><\/p>\n    <p style=\"margin: 0; font-size: 8px;\"> @atomic_mass{mass_format} <\/p>\n    <\/div>\n\"\"\".format(mass_format=mass_format)\n\np = figure(plot_width=900, plot_height=450, tooltips=TOOLTIPS, title='Densities by Atomic Mass')\np.background_fill_color = \"#fafafa\"\n\np.circle('atomic_mass', 'density', size=12, source=data, color='type_color',\n         line_color=\"black\", legend_field='metal', alpha=0.9)\n\np.legend.glyph_width = 30\np.legend.glyph_height = 30\np.xaxis.axis_label= 'Atomic Mass'\np.yaxis.axis_label= 'Density'\np.xgrid.grid_line_color = None\np.toolbar_location = None\n\nlegend = p.legend[0]\np.add_layout(legend, 'right')\nlegend.border_line_color = None\n\nshow(p)","05ba2125":"import pandas as pd\n\nfrom bokeh.plotting import figure, show\nfrom bokeh.sampledata.periodic_table import elements\n\nelements = elements.copy()\nelements = elements[elements.group != \"-\"]\nelements.sort_values('metal', inplace=True)\n\ncolormap = {\n    \"alkali metal\"         : \"#a6cee3\",\n    \"alkaline earth metal\" : \"#1f78b4\",\n    \"halogen\"              : \"#fdbf6f\",\n    \"metal\"                : \"#b2df8a\",\n    \"metalloid\"            : \"#33a02c\",\n    \"noble gas\"            : \"#bbbb88\",\n    \"nonmetal\"             : \"#baa2a6\",\n    \"transition metal\"     : \"#e08e79\",\n}\n\ndata=dict(\n    atomic_number=elements[\"atomic number\"],\n    sym=elements[\"symbol\"],\n    name=elements[\"name\"],\n    atomic_mass = pd.to_numeric(elements['atomic mass'], errors=\"coerce\"),\n    density=elements['density'],\n    metal=[x.title() for x in elements[\"metal\"]],\n    type_color=[colormap[x] for x in elements[\"metal\"]]\n)\n\nmass_format = '{0.00}'\n\nTOOLTIPS = \"\"\"\n    <div style=\"width: 62px; height: 62px; opacity: .8; padding: 5px; background-color: @type_color;>\n    <h1 style=\"margin: 0; font-size: 12px;\"> @atomic_number <\/h1>\n    <h1 style=\"margin: 0; font-size: 24px;\"><strong> @sym <\/strong><\/h1>\n    <p style=\" margin: 0; font-size: 8px;\"><strong> @name <\/strong><\/p>\n    <p style=\"margin: 0; font-size: 8px;\"> @atomic_mass{mass_format} <\/p>\n    <\/div>\n\"\"\".format(mass_format=mass_format)\n\np = figure(plot_width=900, plot_height=450, tooltips=TOOLTIPS, title='Densities by Atomic Mass')\np.background_fill_color = \"#fafafa\"\n\np.circle('atomic_mass', 'density', size=12, source=data, color='type_color',\n         line_color=\"black\", legend_field='metal', alpha=0.9)\n\np.legend.glyph_width = 30\np.legend.glyph_height = 30\np.xaxis.axis_label= 'Atomic Mass'\np.yaxis.axis_label= 'Density'\np.xgrid.grid_line_color = None\np.toolbar_location = None\n\nlegend = p.legend[0]\np.add_layout(legend, 'right')\nlegend.border_line_color = None\n\nshow(p)","7544e643":"from bokeh.io import output_file, show\nfrom bokeh.models import CustomJSHover, HoverTool\nfrom bokeh.plotting import figure\nfrom bokeh.tile_providers import CARTODBPOSITRON, get_provider\n\noutput_file(\"customjs_hover.html\")\n\n# range bounds supplied in web mercator coordinates\np = figure(x_range=(-2000000, 6000000), y_range=(-1000000, 7000000),\n           x_axis_type=\"mercator\", y_axis_type=\"mercator\")\np.add_tile(get_provider(CARTODBPOSITRON))\n\np.circle(x=[0, 2000000, 4000000], y=[4000000, 2000000, 0], size=30)\n\ncode = \"\"\"\n    var projections = Bokeh.require(\"core\/util\/projections\");\n    var x = special_vars.x\n    var y = special_vars.y\n    var coords = projections.wgs84_mercator.inverse([x, y])\n    return coords[%d].toFixed(2)\n\"\"\"\n\np.add_tools(HoverTool(\n    tooltips=[\n        ( 'lon', '$x{custom}' ),\n        ( 'lat', '$y{custom}' ),\n    ],\n\n    formatters={\n        '$x' : CustomJSHover(code=code % 0),\n        '$y' : CustomJSHover(code=code % 1),\n    }\n))\n\nshow(p)","82a11ba7":"# Based on https:\/\/www.reddit.com\/r\/dataisbeautiful\/comments\/6qnkg0\/google_search_interest_follows_the_path_of_the\/\n\nimport pandas as pd\nimport shapefile as shp\n\nfrom bokeh.models import ColorBar, ColumnDataSource, Label, LinearColorMapper\nfrom bokeh.palettes import YlOrRd5\nfrom bokeh.plotting import figure, show\nfrom bokeh.sampledata.us_states import data\n\nstates = pd.DataFrame.from_dict(data, orient=\"index\")\nstates.drop([\"AK\", \"HI\"], inplace=True)\n\ntrends = pd.read_csv(\"eclipse_data\/trends.csv\")\n\nstates.set_index(\"name\", inplace=True)\ntrends.set_index(\"Region\", inplace=True)\n\nstates[\"trend\"] = trends[\"solar eclipse\"]\n\nupath17 = shp.Reader(\"eclipse_data\/upath17\")\n(totality_path,) = upath17.shapes()\n\np = figure(plot_width=1000, plot_height=600, background_fill_color=\"#333344\",\n           tools=\"\", toolbar_location=None, x_axis_location=None, y_axis_location=None)\n\np.grid.grid_line_color = None\n\np.title.text = \"Google Search Trends and the Path of Solar Eclipse, 21 August 2017\"\np.title.align = \"center\"\np.title.text_font_size = \"21px\"\np.title.text_color = \"#333344\"\n\nmapper = LinearColorMapper(palette=list(reversed(YlOrRd5)), low=0, high=100)\n\nsource = ColumnDataSource(data=dict(\n    state_xs=list(states.lons),\n    state_ys=list(states.lats),\n    trend=states.trend,\n))\nus = p.patches(\"state_xs\", \"state_ys\",\n    fill_color=dict(field=\"trend\", transform=mapper),\n    source=source,\n    line_color=\"#333344\", line_width=1)\n\np.x_range.renderers = [us]\np.y_range.renderers = [us]\n\ntotality_x, totality_y = zip(*totality_path.points)\np.patch(totality_x, totality_y,\n    fill_color=\"black\", fill_alpha=0.7,\n    line_color=None)\n\npath = Label(\n    x=-76.3, y=31.4,\n    angle=-36.5, angle_units=\"deg\",\n    text=\"Solar eclipse path of totality\",\n    text_baseline=\"middle\", text_font_size=\"11px\", text_color=\"silver\")\np.add_layout(path)\n\ncolor_bar = ColorBar(\n    color_mapper=mapper,\n    location=\"bottom_left\", orientation=\"horizontal\",\n    title=\"Popularity of \\\"solar eclipse\\\" search term\",\n    title_text_font_size=\"16px\", title_text_font_style=\"bold\",\n    title_text_color=\"lightgrey\", major_label_text_color=\"lightgrey\",\n    background_fill_alpha=0.0)\np.add_layout(color_bar)\n\nnotes = Label(\n    x=0, y=0, x_units=\"screen\", y_units=\"screen\",\n    x_offset=40, y_offset=20,\n    text=\"Source: Google Trends, NASA Scientific Visualization Studio\",\n    level=\"overlay\",\n    text_font_size=\"11px\", text_color=\"gray\")\np.add_layout(notes)\n\nshow(p)","2df17fef":"import pandas as pd\n\nfrom bokeh.models import ColumnDataSource, LabelSet\nfrom bokeh.plotting import figure, output_file, show\nfrom bokeh.sampledata.periodic_table import elements\n\nelements = elements.copy()\nelements = elements[elements[\"atomic number\"] <= 82]\nelements = elements[~pd.isnull(elements[\"melting point\"])]\nmass = [float(x.strip(\"[]\")) for x in elements[\"atomic mass\"]]\nelements[\"atomic mass\"] = mass\n\npalette = [\"#053061\", \"#2166ac\", \"#4393c3\", \"#92c5de\", \"#d1e5f0\",\n           \"#f7f7f7\", \"#fddbc7\", \"#f4a582\", \"#d6604d\", \"#b2182b\", \"#67001f\"]\n\nmelting_points = elements[\"melting point\"]\nlow = min(melting_points)\nhigh = max(melting_points)\nmelting_point_inds = [int(10*(x-low)\/(high-low)) for x in melting_points] #gives items in colors a value from 0-10\nelements['melting_colors'] = [palette[i] for i in melting_point_inds]\n\nTITLE = \"Density vs Atomic Weight of Elements (colored by melting point)\"\nTOOLS = \"hover,pan,wheel_zoom,box_zoom,reset,save\"\n\np = figure(tools=TOOLS, toolbar_location=\"above\", plot_width=1200, title=TITLE)\np.toolbar.logo = \"grey\"\np.background_fill_color = \"#dddddd\"\np.xaxis.axis_label = \"atomic weight (amu)\"\np.yaxis.axis_label = \"density (g\/cm^3)\"\np.grid.grid_line_color = \"white\"\np.hover.tooltips = [\n    (\"name\", \"@name\"),\n    (\"symbol:\", \"@symbol\"),\n    (\"density\", \"@density\"),\n    (\"atomic weight\", \"@{atomic mass}\"),\n    (\"melting point\", \"@{melting point}\")\n]\n\nsource = ColumnDataSource(elements)\n\np.circle(\"atomic mass\", \"density\", size=12, source=source,\n         color='melting_colors', line_color=\"black\", fill_alpha=0.8)\n\nlabels = LabelSet(x=\"atomic mass\", y=\"density\", text=\"symbol\", y_offset=8,\n                  text_font_size=\"11px\", text_color=\"#555555\",\n                  source=source, text_align='center')\np.add_layout(labels)\n\noutput_file(\"elements.html\", title=\"elements.py example\")\n\nshow(p)","b7c8241d":"\nfrom bokeh.layouts import column\nfrom bokeh.models import CustomJS, Div, FileInput\nfrom bokeh.plotting import output_file, show\n\n# Set up widgets\nfile_input = FileInput(accept=\".csv,.json\")\npara = Div(text=\"<h1>FileInput Values:<\/h1><p>filename:<p>b64 value:\")\n\n# Create CustomJS callback to display file_input attributes on change\ncallback = CustomJS(args=dict(para=para, file_input=file_input), code=\"\"\"\n    para.text = \"<h1>FileInput Values:<\/h1><p>filename: \" + file_input.filename  + \"<p>b64 value: \" + file_input.value\n\"\"\")\n\n# Attach callback to FileInput widget\nfile_input.js_on_change('change', callback)\n\n\noutput_file(\"file_input.html\")\n\nshow(column(file_input, para))","ace269b1":"\nimport numpy as np\n\nfrom bokeh.plotting import figure, output_file, show\n\nx = np.linspace(-6, 6, 500)\ny = 8*np.sin(x)*np.sinc(x)\n\np = figure(plot_width=800, plot_height=300, title=\"\", tools=\"\",\n           toolbar_location=None, match_aspect=True)\n\np.line(x, y, color=\"navy\", alpha=0.4, line_width=4)\np.background_fill_color = \"#efefef\"\np.xaxis.fixed_location = 0\np.yaxis.fixed_location = 0\n\noutput_file(\"fixed_axis.html\", title=\"fixed_axis.py example\")\n\nshow(p)","65f8f2f6":"\nfrom bokeh.io import output_file, show\nfrom bokeh.models import GeoJSONDataSource\nfrom bokeh.plotting import figure\nfrom bokeh.sampledata.sample_geojson import geojson\n\np = figure(tooltips=[(\"Organisation Name\", \"@OrganisationName\")])\n\np.circle(x='x', y='y', line_color=None, fill_alpha=0.8, size=20,\n         source=GeoJSONDataSource(geojson=geojson))\n\noutput_file(\"geojson_points.html\", title=\"GeoJSON Points\")\n\nshow(p)","87808ea6":"\nimport numpy as np\n\nfrom bokeh.io import curdoc, output_file, show\nfrom bokeh.layouts import gridplot\nfrom bokeh.plotting import figure\nfrom bokeh.themes import Theme\n\nN = 9\n\nx = np.linspace(-2, 2, N)\ny = x**2\nsizes = np.linspace(10, 20, N)\n\nxpts = np.array([-.09, -.12, .0, .12, .09])\nypts = np.array([-.1, .02, .1, .02, -.1])\n\nchildren = []\n\np = figure(title=\"annular_wedge\")\np.annular_wedge(x, y, 10, 20, 0.6, 4.1, color=\"#8888ee\",\n                inner_radius_units=\"screen\", outer_radius_units=\"screen\")\nchildren.append(p)\n\np = figure(title=\"annulus\")\np.annulus(x, y, 10, 20, color=\"#7FC97F\",\n          inner_radius_units=\"screen\", outer_radius_units = \"screen\")\nchildren.append(p)\n\np = figure(title=\"arc\")\np.arc(x, y, 20, 0.6, 4.1, radius_units=\"screen\", color=\"#BEAED4\", line_width=3)\nchildren.append(p)\n\np = figure(title=\"bezier\")\np.bezier(x, y, x+0.2, y, x+0.1, y+0.1, x-0.1, y-0.1, color=\"#D95F02\", line_width=2)\nchildren.append(p)\n\np = figure(title=\"circle\")\np.circle(x, y, radius=0.1, color=\"#3288BD\")\nchildren.append(p)\n\np = figure(title=\"ellipse\")\np.ellipse(x, y, 15, 25, angle=-0.7, color=\"#1D91C0\",\n       width_units=\"screen\", height_units=\"screen\")\nchildren.append(p)\n\np = figure(title=\"Hbar\")\np.hbar(y=x, height=0.5, left=0, right=y, color=\"#AA9348\")\nchildren.append(p)\n\np = figure(title=\"line\")\np.line(x, y, color=\"#F46D43\")\nchildren.append(p)\n\np = figure(title=\"multi_line\")\np.multi_line([xpts+xx for xx in x], [ypts+yy for yy in y],\n    color=\"#8073AC\", line_width=2)\nchildren.append(p)\n\np = figure(title=\"multi_polygons\")\np.multi_polygons(\n    [[[xpts*2+xx, xpts+xx]] for xx in x],\n    [[[ypts*3+yy, ypts+yy]] for yy in y],\n    color=\"#FB9A99\")\nchildren.append(p)\n\np = figure(title=\"oval\")\np.oval(x, y, 15, 25, angle=-0.7, color=\"#1D91C0\",\n       width_units=\"screen\", height_units=\"screen\")\nchildren.append(p)\n\np = figure(title=\"patch\")\np.patch(x, y, color=\"#A6CEE3\")\nchildren.append(p)\n\np = figure(title=\"patches\")\np.patches([xpts+xx for xx in x], [ypts+yy for yy in y], color=\"#FB9A99\")\nchildren.append(p)\n\np = figure(title=\"quad\")\np.quad(x, x-0.1, y, y-0.1, color=\"#B3DE69\")\nchildren.append(p)\n\np = figure(title=\"quadratic\")\np.quadratic(x, y, x+0.2, y, x+0.3, y+1.4, color=\"#4DAF4A\", line_width=3)\nchildren.append(p)\n\np = figure(title=\"ray\")\np.ray(x, y, 45, -0.7, color=\"#FB8072\", line_width=2)\nchildren.append(p)\n\np = figure(title=\"rect\")\np.rect(x, y, 10, 20, color=\"#CAB2D6\", width_units=\"screen\", height_units=\"screen\")\nchildren.append(p)\n\np = figure(title=\"segment\")\np.segment(x, y, x-0.1, y-0.1, color=\"#F4A582\", line_width=3)\nchildren.append(p)\n\np = figure(title=\"square\")\np.square(x, y, size=sizes, color=\"#74ADD1\")\nchildren.append(p)\n\np = figure(title=\"Vbar\")\np.vbar(x=x, width=0.5, bottom=0, top=y, color=\"#CAB2D6\")\nchildren.append(p)\n\np = figure(title=\"wedge\")\np.wedge(x, y, 15, 0.6, 4.1, radius_units=\"screen\", color=\"#B3DE69\")\nchildren.append(p)\n\np = figure(title=\"Marker: circle_x\")\np.scatter(x, y, marker=\"circle_x\", size=sizes, color=\"#DD1C77\", fill_color=None)\nchildren.append(p)\n\np = figure(title=\"Marker: triangle\")\np.scatter(x, y, marker=\"triangle\", size=sizes, color=\"#99D594\", line_width=2)\nchildren.append(p)\n\np = figure(title=\"Marker: circle\")\np.scatter(x, y, marker=\"o\", size=sizes, color=\"#80B1D3\", line_width=3)\nchildren.append(p)\n\np = figure(title=\"Marker: x\")\np.scatter(x, y, marker=\"x\", size=sizes, color=\"#B3DE69\", line_width=3)\nchildren.append(p)\n\np = figure(title=\"Marker: cross\")\np.scatter(x, y, marker=\"cross\", size=sizes, color=\"#E6550D\", line_width=2)\nchildren.append(p)\n\np = figure(title=\"Marker: dash\")\np.scatter(x, y, marker=\"dash\", angle=-0.7, size=sizes, color=\"#E6550D\")\nchildren.append(p)\n\np = figure(title=\"Marker: diamond\")\np.scatter(x, y, marker=\"diamond\", size=sizes, color=\"#1C9099\", line_width=2)\nchildren.append(p)\n\np = figure(title=\"hex\")\np.scatter(x, y, marker=\"hex\", size=sizes, color=\"#99D594\")\nchildren.append(p)\n\np = figure(title=\"Marker: inverted_triangle\")\np.scatter(x, y, marker=\"inverted_triangle\", size=sizes, color=\"#DE2D26\")\nchildren.append(p)\n\np = figure(title=\"Marker: square_x\")\np.scatter(x, y, marker=\"square_x\", size=sizes, color=\"#FDAE6B\",\n    fill_color=None, line_width=2)\nchildren.append(p)\n\np = figure(title=\"Marker: asterisk\")\np.scatter(x, y, marker=\"asterisk\", size=sizes, color=\"#F0027F\", line_width=2)\nchildren.append(p)\n\np = figure(title=\"Marker: square_cross\")\np.scatter(x, y, marker=\"square_cross\", size=sizes, color=\"#7FC97F\",\n    fill_color=None, line_width=2)\nchildren.append(p)\n\np = figure(title=\"Marker: diamond_cross\")\np.scatter(x, y, marker=\"diamond_cross\", size=sizes, color=\"#386CB0\",\n    fill_color=None, line_width=2)\nchildren.append(p)\n\np = figure(title=\"Marker: circle_cross\")\np.scatter(x, y, marker=\"circle_cross\", size=sizes, color=\"#FB8072\",\n    fill_color=None, line_width=2)\nchildren.append(p)\n\n# simplify theme by turning off axes and gridlines\ncurdoc().theme = Theme(json={\n    \"attrs\": {\n        \"Axis\": {\n            \"visible\": False\n            },\n        \"Grid\": {\n            \"visible\": False\n            }\n        }\n    })\n\noutput_file(\"glyphs.html\", title=\"glyphs.py example\")\n\nshow(gridplot(children, ncols=4, plot_width=200, plot_height=200))  # open a browser","5ae837c7":"\nfrom bokeh.io import output_file, show\nfrom bokeh.models import GMapOptions, Label\nfrom bokeh.plotting import gmap\n\noutput_file(\"gmap.html\")\n\nmap_options = GMapOptions(lat=30.2861, lng=-97.7394, map_type=\"roadmap\", zoom=13)\n\n# replace with your google api key\np = gmap(\"GOOGLE_API_KEY\", map_options)\n\nif p.api_key == \"GOOGLE_API_KEY\":\n    p.add_layout(Label(x=140, y=400, x_units='screen', y_units='screen',\n                       text='Replace GOOGLE_API_KEY with your own key',\n                       text_color='red'))\n\nshow(p)","f5952e52":"import numpy as np\n\nfrom bokeh.models import (ColumnDataSource, HoverTool, NodesAndLinkedEdges,\n                          StaticLayoutProvider, TapTool,)\nfrom bokeh.palettes import Set3_12\nfrom bokeh.plotting import figure, output_file, show\nfrom bokeh.sampledata.airport_routes import airports, routes\nfrom bokeh.sampledata.us_states import data as us_states\n\noutput_file(\"graphs.html\")\n\nairports.set_index(\"AirportID\", inplace=True)\nairports.index.rename(\"index\", inplace=True)\nroutes.rename(columns={\"SourceID\": \"start\", \"DestinationID\": \"end\"}, inplace=True)\n\nlats, lons = [], []\nfor k, v in us_states.items():\n    lats.append(np.array(v['lats']))\n    lons.append(np.array(v['lons']))\n\nsource = ColumnDataSource(data=dict(lats=lats, lons=lons))\n\ngraph_layout = dict(zip(airports.index.astype(str), zip(airports.Longitude, airports.Latitude)))\nlayout_provider = StaticLayoutProvider(graph_layout=graph_layout)\n\nfig = figure(x_range=(-180, -60), y_range=(15,75),\n              x_axis_label=\"Longitude\", y_axis_label=\"Latitude\",\n              plot_width=800, plot_height=600, background_fill_color=Set3_12[4],\n              background_fill_alpha=0.2, tools='box_zoom,reset')\n\nfig.patches(xs=\"lons\", ys=\"lats\", line_color='grey', line_width=1.0,\n             fill_color=Set3_12[10], source=source)\n\nr = fig.graph(airports, routes, layout_provider,\n              ## node style props\n              node_fill_color=Set3_12[3], node_fill_alpha=0.4, node_line_color=\"black\", node_line_alpha=0.3,\n              node_nonselection_fill_color=Set3_12[3], node_nonselection_fill_alpha=0.2, node_nonselection_line_alpha=0.1,\n              node_selection_fill_color=Set3_12[3], node_selection_fill_alpha=0.8, node_selection_line_alpha=0.3,\n              ## edge style props\n              edge_line_color=\"black\", edge_line_alpha=0.04,\n              edge_hover_line_alpha=0.6, edge_hover_line_color=Set3_12[1],\n              edge_nonselection_line_color=\"black\", edge_nonselection_line_alpha=0.01,\n              edge_selection_line_alpha=0.6, edge_selection_line_color=Set3_12[1],\n              ## graph policies\n              inspection_policy=NodesAndLinkedEdges(), selection_policy=NodesAndLinkedEdges())\n\nhover = HoverTool(tooltips=[(\"Airport\", \"@Name (@IATA), @City \")], renderers=[r])\ntap = TapTool(renderers=[r])\nfig.add_tools(hover, tap)\n\nshow(fig)","1e002d03":"import numpy as np\n\nfrom bokeh.models import (ColumnDataSource, HoverTool, NodesAndLinkedEdges,\n                          StaticLayoutProvider, TapTool,)\nfrom bokeh.palettes import Set3_12\nfrom bokeh.plotting import figure, output_file, show\nfrom bokeh.sampledata.airport_routes import airports, routes\nfrom bokeh.sampledata.us_states import data as us_states\n\noutput_file(\"graphs.html\")\n\nairports.set_index(\"AirportID\", inplace=True)\nairports.index.rename(\"index\", inplace=True)\nroutes.rename(columns={\"SourceID\": \"start\", \"DestinationID\": \"end\"}, inplace=True)\n\nlats, lons = [], []\nfor k, v in us_states.items():\n    lats.append(np.array(v['lats']))\n    lons.append(np.array(v['lons']))\n\nsource = ColumnDataSource(data=dict(lats=lats, lons=lons))\n\ngraph_layout = dict(zip(airports.index.astype(str), zip(airports.Longitude, airports.Latitude)))\nlayout_provider = StaticLayoutProvider(graph_layout=graph_layout)\n\nfig = figure(x_range=(-180, -60), y_range=(15,75),\n              x_axis_label=\"Longitude\", y_axis_label=\"Latitude\",\n              plot_width=800, plot_height=600, background_fill_color=Set3_12[4],\n              background_fill_alpha=0.2, tools='box_zoom,reset')\n\nfig.patches(xs=\"lons\", ys=\"lats\", line_color='grey', line_width=1.0,\n             fill_color=Set3_12[10], source=source)\n\nr = fig.graph(airports, routes, layout_provider,\n              ## node style props\n              node_fill_color=Set3_12[3], node_fill_alpha=0.4, node_line_color=\"black\", node_line_alpha=0.3,\n              node_nonselection_fill_color=Set3_12[3], node_nonselection_fill_alpha=0.2, node_nonselection_line_alpha=0.1,\n              node_selection_fill_color=Set3_12[3], node_selection_fill_alpha=0.8, node_selection_line_alpha=0.3,\n              ## edge style props\n              edge_line_color=\"black\", edge_line_alpha=0.04,\n              edge_hover_line_alpha=0.6, edge_hover_line_color=Set3_12[1],\n              edge_nonselection_line_color=\"black\", edge_nonselection_line_alpha=0.01,\n              edge_selection_line_alpha=0.6, edge_selection_line_color=Set3_12[1],\n              ## graph policies\n              inspection_policy=NodesAndLinkedEdges(), selection_policy=NodesAndLinkedEdges())\n\nhover = HoverTool(tooltips=[(\"Airport\", \"@Name (@IATA), @City \")], renderers=[r])\ntap = TapTool(renderers=[r])\nfig.add_tools(hover, tap)\n\nshow(fig)","acd1961b":"import numpy as np\n\nfrom bokeh.plotting import figure, gridplot, output_file, show\n\nN = 50\n\nx = np.linspace(0, 4*np.pi, N)\ny = np.sin(x)\n\nTOOLS = \"pan,wheel_zoom,box_zoom,reset,save,crosshair\"\n\nl = figure(title=\"line\", tools=TOOLS, plot_width=300, plot_height=300)\nl.line(x,y, line_width=3, color=\"gold\")\n\naw = figure(title=\"annular wedge\", tools=TOOLS, plot_width=300, plot_height=300)\naw.annular_wedge(x, y, 10, 20, 0.6, 4.1, color=\"navy\", alpha=0.5,\n    inner_radius_units=\"screen\", outer_radius_units=\"screen\")\n\nbez = figure(title=\"bezier\", tools=TOOLS, plot_width=300, plot_height=300)\nbez.bezier(x, y, x+0.4, y, x+0.1, y+0.2, x-0.1, y-0.2,\n    line_width=2, color=\"olive\")\n\nq = figure(title=\"quad\", tools=TOOLS, plot_width=300, plot_height=300)\nq.quad(x, x-0.2, y, y-0.2, color=\"tomato\", alpha=0.4)\n\n# specify \"empty\" grid cells with None\np = gridplot([[l, None, aw], [bez, q, None]])\n\noutput_file(\"grid.html\", title=\"grid.py example\")\n\nshow(p)","2c1f6c70":"from bokeh.io import output_file, show\nfrom bokeh.models import ImageURLTexture\nfrom bokeh.plotting import figure\n\noutput_file(\"hatch_custom_image.html\")\n\nclips = [\n    'https:\/\/static.bokeh.org\/clipart\/clipart-colorful-circles-64x64.png',\n    'https:\/\/static.bokeh.org\/clipart\/clipart-celtic-repeating-64x64.png',\n    'https:\/\/static.bokeh.org\/clipart\/clipart-tie-dye-64x64.png',\n    'https:\/\/static.bokeh.org\/clipart\/clipart-ferns-64x64.png',\n    'https:\/\/static.bokeh.org\/clipart\/clipart-diamond-tiles-64x64.png',\n    'https:\/\/static.bokeh.org\/clipart\/clipart-abstract-squares-64x64.png',\n    'https:\/\/static.bokeh.org\/clipart\/clipart-interlaced-pattern-64x64.png',\n    'https:\/\/static.bokeh.org\/clipart\/clipart-mosaic-64x64.png',\n    'https:\/\/static.bokeh.org\/clipart\/clipart-gold-stars-64x64.png',\n    'https:\/\/static.bokeh.org\/clipart\/clipart-voronoi-2d-64x64.png',\n    'https:\/\/static.bokeh.org\/clipart\/clipart-victorian-background-64x64.png',\n    'https:\/\/static.bokeh.org\/clipart\/clipart-wallpaper-circles-64x64.png',\n    'https:\/\/static.bokeh.org\/clipart\/clipart-beads-64x64.png',\n]\n\np = figure(plot_width=900, plot_height=450, toolbar_location=None, tools=\"\")\np.x_range.range_padding = p.y_range.range_padding = 0\n\nfor i, url in enumerate(clips):\n    p.vbar(x=i+0.5, top=5, width=0.9, fill_color=None, line_color=\"black\",\n           hatch_pattern=dict(value='image'), hatch_extra={\"image\": ImageURLTexture(url=url)})\n\nshow(p)","9126b40a":"\nimport numpy as np\n\nfrom bokeh.io import show\nfrom bokeh.plotting import figure\n\nx = np.linspace(0, 6*np.pi, 100)\ny = np.sin(x)\n\np = figure(plot_height=250, sizing_mode=\"stretch_width\", x_range=(0, 6*np.pi), tools=\"\", toolbar_location=None)\np.line(x, y)\n\nticks = np.linspace(0, 6*np.pi, 13)\n\nlabels = dict(zip(ticks[1:], [\"\u03c0\/2\", \"\u03c0\", \"3\u03c0\/2\", \"2\u03c0\", \"5\u03c0\/2\", \"3\u03c0\", \"7\u03c0\/2\", \"4\u03c0\", \"9\u03c0\/2\", \"5\u03c0\",  \"11\u03c0\/2\", \"6\u03c0\",]))\np.xaxis.ticker = ticks\np.xgrid.ticker = ticks[1::2]\np.xaxis.major_label_overrides = labels\n\np.ygrid.grid_line_color = None\n\np.xgrid.band_hatch_pattern = \"\/\"\np.xgrid.band_hatch_alpha = 0.6\np.xgrid.band_hatch_color = \"lightgrey\"\np.xgrid.band_hatch_weight = 0.5\np.xgrid.band_hatch_scale = 10\n\nshow(p)","cbfb7506":"from bokeh.core.enums import HatchPattern\nfrom bokeh.io import output_file, show\nfrom bokeh.plotting import figure\n\noutput_file(\"hatch_patterns.html\")\n\npats = list(HatchPattern)\nlefts  = [3,  4, 6,  5, 3, 7, 4,  5, 3,  4,  7,  5, 6,  4, 5, 6, 8]\nscales = [12, 6, 12, 4, 8, 4, 10, 8, 18, 16, 12, 8, 12, 8, 6, 8, 12]\n\np = figure(y_range=pats, plot_height=900, plot_width=600, title=\"Built-in Hatch Patterns\",\n           toolbar_location=None, tools=\"\", y_axis_location=\"right\")\n\nr = p.hbar(y=pats, left=lefts, right=10, height=0.9, fill_color=\"#fafafa\", line_color=\"grey\",\n       hatch_pattern=pats, hatch_scale=scales, hatch_color=\"black\", hatch_weight=0.5, hatch_alpha=0.5)\n\np.ygrid.grid_line_color = None\np.x_range.end = 10\n\nshow(p)","cd31537b":"\nimport numpy as np\n\nfrom bokeh.io import output_file, show\nfrom bokeh.plotting import figure\nfrom bokeh.transform import linear_cmap\nfrom bokeh.util.hex import hexbin\n\nn = 5000\nx = np.random.standard_normal(n)\ny = np.random.standard_normal(n)\n\nbins = hexbin(x, y, 0.1)\n\np = figure(title=\"Manual hex bin for 5000 points\", tools=\"wheel_zoom,pan,reset\",\n           match_aspect=True, background_fill_color='#FFC0CB')\np.grid.visible = False\n\np.hex_tile(q=\"q\", r=\"r\", size=0.2, line_color=None, source=bins,\n           fill_color=linear_cmap('counts', 'Viridis256', 0, max(bins.counts)))\n\nshow(p)","580970b6":"`burtin.py`","79a73e96":"custom_datatime_axis.py","c4158e5a":"`bar_stacked_grouped.py`","41dd58ca":"`hatch_grid_band.py`","9b6802b0":"`custom_tooltip.py`","1ba67da2":"`bar_dodged.py`","ba57b7ea":"`customjs_hover.py`","f73c2dd1":"bar_nested_colormapped.py","003e2305":"`custom_layout.py`","27284236":"`color_sliders.py`","4ff47387":"`bar_sorted.py`","3554d892":"`hatch_custom_image.py`","02195e5a":"`categorical.py`","1e06761a":"`color_scatter.py`","2d2001f2":"`hex_tile.py`","40b5dabe":"`grid.py`","53e042fa":"`graphs.py`","9921641d":"`bar_colors.py`","234a417c":"`brewer.py`","21cc46a8":"`css_classes.py`","f3389345":"`chloropeth.py`","5b958483":"custom_layout.py","97bf4480":"`categorical_scatter_jitter.py`","756ea5d5":"`bar_basic.py`","1b36e902":"`file_input.py`","7aed0907":"`airports_map.py`","32a0c3ff":"`eclipse.py`","1c403e81":"`elements.py`","a4e18300":"`graphs.py`","eeb34421":"`boxplot.py`","030166ad":"`bar_annotation.py`","20bc53f7":"bar_pandas_groupby_nested.py ","d3ccd632":"`geojson_points.py`","9c9a8735":"`gmap.py`","7fe18041":"`bar_colormapped.py`","df4aa971":"`bar_intervals.py`","d565f22c":"`bar_nested.py`","53048185":"`hatch_patterns.py`","0ffc6568":"`color_data_map.py`","230e705e":"`fixed_axis.py`","2c0fa369":"`bar_mixed.py`","f2ae8a36":"`glyphs.py`","3ec30424":"`candlestick.py`"}}