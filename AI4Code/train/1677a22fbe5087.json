{"cell_type":{"c9c546e9":"code","5586a476":"code","eb82c871":"code","f19a793a":"code","ca06e73c":"code","480fb2c8":"code","c60de9fb":"code","1d02adeb":"code","2db56ce6":"code","4949e9cd":"code","f153c50f":"code","98c1ae29":"code","7176583e":"code","310a2d8f":"code","23ab9d1e":"code","d99ddf87":"code","348c02ac":"code","1c5f063e":"code","927b1bfc":"code","33feb743":"code","068cfe34":"code","7830aa88":"code","bcb128be":"code","726d8d8d":"code","91fe8d71":"code","6b32d948":"code","a2fe8241":"code","4fe9a2ff":"code","4d098b5f":"code","b4536d42":"code","051f5deb":"markdown","a525de73":"markdown","9553b5a6":"markdown","9c98b394":"markdown","c5a22ac9":"markdown","a26a8f56":"markdown","a06ffdae":"markdown","a126c11d":"markdown","43f92a96":"markdown","4b928d6c":"markdown","f2426dfc":"markdown"},"source":{"c9c546e9":"import pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom statsmodels.graphics.regressionplots import influence_plot\nimport statsmodels.api as smf\nimport numpy as np","5586a476":"#importing data \ncompdata = pd.read_csv('..\/input\/50-startups\/50_Startups.csv')\ncompdata.head()","eb82c871":"# checking data details and checking for null data.\ncompdata.info()","f19a793a":"#compareing compete data by grouping by state.\ncompdata.groupby(\"State\").mean()","ca06e73c":"compdata.head()","480fb2c8":"sns.set_style(style='darkgrid')\nsns.pairplot(compdata)","c60de9fb":"# As state is a categorical variable, we are getting dummies to get the values of unique states.\ncompdata = pd.get_dummies(compdata,drop_first= True)","1d02adeb":"compdata.head()","2db56ce6":"# Separating the dataset into x and y \nx = compdata.drop(\"Profit\", axis= 1)\ny = compdata[\"Profit\"]","4949e9cd":"# Splitting the dataset into the Training set and Test set\nfrom sklearn.model_selection import train_test_split\nx_train, x_test, y_train, y_test = train_test_split(x,y, test_size = 0.25, random_state = 4)","f153c50f":"m1 = smf.OLS(y_train, x_train).fit()","98c1ae29":"m1.summary2()","7176583e":"y_train2 = np.sqrt(y_train)","310a2d8f":"y_train2.head()","23ab9d1e":"m2 = smf.OLS(y_train2,x_train).fit()","d99ddf87":"m2.summary2()","348c02ac":"y_train3 = np.log(y_train)","1c5f063e":"y_train3.head()","927b1bfc":"m3 = smf.OLS(y_train3,x_train).fit()","33feb743":"m3.summary2()","068cfe34":"x_train1 = x_train.drop([\"State_Florida\",\"State_New York\"],axis = 1)","7830aa88":"x_train1.head()","bcb128be":"m4 = smf.OLS(y_train3,x_train1).fit()","726d8d8d":"m4.summary2()","91fe8d71":"x_train2 = x_train.drop([\"State_Florida\",\"State_New York\"],axis = 1)","6b32d948":"x_train2.head()","a2fe8241":"m5 = smf.OLS(y_train,x_train1).fit()","4fe9a2ff":"m5.summary2()","4d098b5f":"m5.rsquared","b4536d42":"data = [{'R Square Values': m1.rsquared, 'AIC':m1.aic}, {'R Square Values': m2.rsquared, 'AIC':m2.aic},{'R Square Values': m3.rsquared, 'AIC':m3.aic}, {'R Square Values': m4.rsquared, 'AIC':m4.aic}, {'R Square Values': m5.rsquared, 'AIC':m5.aic}]\n\n# Lists of dictionaries and row index.\ndf = pd.DataFrame(data, index =['Model without any modification', 'Y transformed using sqrt','Y transformed using natural log','Y -ln with insignificant variables removed','Insignificant values removed with original model'])\n  \n# Print the data\ndf","051f5deb":"### removing two states as they are insignificant and building main  model again.","a525de73":"#### Fitting linear regression model on the sqrt transformed data.","9553b5a6":"#### Fitting linear regression model on the  transformed data.","9c98b394":"### Using natural log  function from numpy library to transform Y","c5a22ac9":"## Using different transformations on y and validating different models.","a26a8f56":"### we can see that the model with insignificant state columns removed and transformed using natural log yeilds the best AIC scores, so we can say that this is the best model.","a06ffdae":"### Using sqrt function from numpy library to transform Y","a126c11d":"### removing two states as they are insignificant and building log model again.","43f92a96":"#### Fitting linear regression model on the original data.","4b928d6c":"#### Fitting linear regression model on the  transformed data.","f2426dfc":"#### Fitting linear regression model on the  transformed data."}}