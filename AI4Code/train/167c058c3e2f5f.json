{"cell_type":{"47ae13e2":"code","647f8aac":"code","edb7c45a":"code","86b9a50b":"code","20806fdd":"code","a0fd6b82":"code","50388b80":"code","f36952f3":"code","1ef14320":"code","1fe0401c":"code","3e03f609":"code","df15693d":"code","14761566":"code","038ee6e4":"code","7f2e22e2":"code","3aee176c":"code","90fe70bb":"code","c8b17e79":"code","5dcf0582":"code","2f8f6cc5":"code","cf5322f3":"code","fc47d5f5":"markdown","80385a5a":"markdown","642e0e38":"markdown","0ca9b780":"markdown","823826e3":"markdown","e739ca84":"markdown"},"source":{"47ae13e2":"import numpy as np \nimport pandas as pd\nimport matplotlib.pyplot as plt \nimport numpy as np \nimport pandas as pd \n","647f8aac":"import os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))","edb7c45a":"df = pd.read_csv('\/kaggle\/input\/real-time-advertisers-auction\/Dataset.csv')","86b9a50b":"df.head()","20806fdd":"#calculating CPM\ndef weird_division(n, d):\n    return n \/ d if d else 0\n\ndf['CPM'] = df.apply(lambda x: weird_division(((x['total_revenue']*100)),\n                                              x['measurable_impressions'])*1000 , axis=1)","a0fd6b82":"df.drop(['integration_type_id' , 'revenue_share_percent'], axis = 1, inplace=True)","50388b80":"df = df[df['CPM'].between(0, df['CPM'].quantile(.95))]","f36952f3":"for col in list(df.columns):\n  if 'id' in col:\n    tmp = pd.get_dummies(df[col], prefix=col, drop_first=True)\n    df.drop([col], axis = 1, inplace=True)\n    df = pd.concat([df, tmp], axis=1)","1ef14320":"df.head()","1fe0401c":"test = df[pd.to_datetime(df.date) > pd.Timestamp(2019,6,21)]","3e03f609":"df = df[pd.to_datetime(df.date) <= pd.Timestamp(2019,6,21)]","df15693d":"train = df[pd.to_datetime(df.date) <= pd.Timestamp(2019,6,19)]\nval = df[pd.to_datetime(df.date) > pd.Timestamp(2019,6,19)]","14761566":"X_test = test[pd.to_datetime(test.date) > pd.Timestamp(2019,6,21)].drop(['CPM' , 'total_revenue', 'date'], axis = 1, inplace=False)","038ee6e4":"X_test.shape","7f2e22e2":"X_train = train.drop(['CPM' , 'total_revenue', 'date'], axis = 1, inplace=False)\nX_val = val.drop(['CPM' , 'total_revenue', 'date'], axis = 1, inplace=False)","3aee176c":"X_train.shape","90fe70bb":"y_test = test['CPM']\ny_train = train['CPM']\ny_val = val['CPM']","c8b17e79":"import tensorflow as tf\nfrom tensorflow.keras.models import Sequential\nfrom tensorflow.keras.layers import Dense, Activation, Dropout\nfrom tensorflow.keras.optimizers import Adam","5dcf0582":"model = Sequential()\n\nmodel.add(Dense(X_train.shape[1],activation='relu'))\nmodel.add(Dense(100, activation='relu'))\nmodel.add(Dense(100, activation='relu'))\nmodel.add(Dense(100, activation='relu'))\nmodel.add(Dense(1, activation='relu'))\n\nmodel.compile(optimizer='adam',loss='mse')\n\n\nmodel.fit(x=X_train,y=y_train,\n         validation_data=(X_val,y_val),\n         batch_size=128,epochs=10)","2f8f6cc5":"pred = model.predict(X_test)","cf5322f3":"from sklearn.metrics import mean_squared_error\nmean_squared_error(y_test, pred)","fc47d5f5":"### working with ids","80385a5a":"## PREPROCESSING","642e0e38":"Interestingly, that if we drop colums 'order_id' , 'line_item_type_id', which we mentioned as unuseful by dataset author,  results are getting worse. Best MSE that I have achieved without these columns (with the same model) was approximately 4200. ","0ca9b780":"### Train test split","823826e3":"Simple NN","e739ca84":"## LOADING DATA"}}