{"cell_type":{"2b24cd73":"code","a13916ad":"code","32e869ef":"code","a2770372":"code","1ecb43cb":"code","00867b76":"code","9c0ae372":"code","17c67f59":"code","ebccab38":"code","09699264":"code","d5c6601d":"code","1e9e6d1d":"code","0ab8681d":"code","b7f4110d":"code","5df45ab4":"code","84c57022":"code","84bd2beb":"code","c370e501":"code","e3415576":"code","6ec944a8":"code","d2d7e527":"code","6eaa5b8c":"code","f7f25c81":"code","dd2045cd":"code","f33257a3":"code","017f9eef":"code","7fc22c92":"code","5a1d6d55":"code","ad8158f0":"code","d999ef04":"code","ff02e2ee":"code","a74f430d":"code","82d10b5a":"code","942fb446":"code","42be8cb7":"code","75b003e0":"code","9d6ea6a4":"code","13a043ca":"code","448312a2":"code","cb7c4aa3":"code","8050f24d":"code","dac6fdcc":"code","f3efec71":"code","1ed5a47e":"code","8f2bda3b":"code","800a7e8b":"code","f2ae905f":"code","9deef9b0":"code","83374b4b":"code","4e0fba08":"markdown","cee3fe93":"markdown","a69c327a":"markdown","a46918b7":"markdown","6e18d550":"markdown","31eaf2d7":"markdown"},"source":{"2b24cd73":"from datetime import datetime, timedelta\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\nimport seaborn as sns","a13916ad":"dateparse = lambda x: pd.datetime.strptime(x, '%m\/%d\/%Y %H:%M')","32e869ef":"tx_data = pd.read_csv('\/kaggle\/input\/onlineretail\/OnlineRetail.csv', parse_dates=['InvoiceDate'], date_parser=dateparse, encoding = 'unicode_escape')\n#If you specify the date_parser, you increase the speed of loading","a2770372":"print(\"Number of lines:\" + str(len(tx_data)))\ntx_data.head(10)","1ecb43cb":"tx_data['InvoiceDate'] = pd.to_datetime(tx_data['InvoiceDate'])","00867b76":"tx_data['InvoiceDate'].describe()","9c0ae372":"tx_uk = tx_data[tx_data.Country == 'United Kingdom'].reset_index(drop=True)","17c67f59":"tx_user = pd.DataFrame(tx_data['CustomerID'].unique())\ntx_user.columns = ['CustomerID']","ebccab38":"tx_data.plot.scatter(x=\"Quantity\", y=\"UnitPrice\")","09699264":"tx_data.Quantity[tx_data.Quantity < 0].count()","d5c6601d":"tx_data.UnitPrice[tx_data.UnitPrice < 0]","1e9e6d1d":"tx_data.isnull().sum()","0ab8681d":"tx_max_purchase = tx_uk.groupby('CustomerID').InvoiceDate.max().reset_index()","b7f4110d":"tx_max_purchase.columns = ['CustomerID','MaxPurchaseDate']","5df45ab4":"tx_max_purchase['Recency'] = (tx_max_purchase['MaxPurchaseDate'].max() - tx_max_purchase['MaxPurchaseDate']).dt.days\ntx_max_purchase.head()","84c57022":"tx_user = pd.merge(tx_user, tx_max_purchase[['CustomerID','Recency']], on='CustomerID')","84bd2beb":"tx_user.head()","c370e501":"tx_user.Recency.describe()","e3415576":"tx_user.Recency.hist(bins=40)","6ec944a8":"#Using elbow method\nfrom sklearn.cluster import KMeans\n\nsse={}\ntx_recency = tx_user[['Recency']]\nfor k in range(1, 10):\n    kmeans = KMeans(n_clusters=k, max_iter=1000).fit(tx_recency)\n    tx_recency[\"clusters\"] = kmeans.labels_\n    sse[k] = kmeans.inertia_ \nplt.figure()\nplt.plot(list(sse.keys()), list(sse.values()))\nplt.xlabel(\"Number of cluster\")\nplt.show()","d2d7e527":"from sklearn.metrics import silhouette_score\nfrom yellowbrick.cluster import SilhouetteVisualizer\nimport matplotlib.cm as cm\n\n#Using silhouettes\ndef plot_silhouettes(X, range_n_clusters):\n  for n_clusters in range_n_clusters:\n      clusterer = KMeans(n_clusters=n_clusters, random_state=10)\n      cluster_labels = clusterer.fit_predict(X)\n\n      # The silhouette_score gives the average value for all the samples.\n      # This gives a perspective into the density and separation of the formed\n      # clusters\n      silhouette_avg = silhouette_score(X, cluster_labels)\n      print(\"For n_clusters =\", n_clusters,\n            \"The average silhouette_score is :\", silhouette_avg)\n\n      visualizer = SilhouetteVisualizer(clusterer)\n      visualizer.fit(X)        # Fit the data to the visualizer\n      plt.show()\n\ntx_recency = tx_user[['Recency']]\nrange_n_clusters = [2, 3, 4, 5, 6]\nplot_silhouettes(tx_recency, range_n_clusters)","6eaa5b8c":"kmeans = KMeans(n_clusters=4)\nkmeans.fit(tx_user[['Recency']])\ntx_user['RecencyCluster'] = kmeans.predict(tx_user[['Recency']])","f7f25c81":"tx_user.groupby('RecencyCluster')['Recency'].describe()","dd2045cd":"def order_cluster(cluster_field_name, target_field_name, df, ascending):\n    new_cluster_field_name = 'new_' + cluster_field_name\n    df_new = df.groupby(cluster_field_name)[target_field_name].mean().reset_index()\n    df_new = df_new.sort_values(by=target_field_name, ascending=ascending).reset_index(drop=True)\n    df_new['index'] = df_new.index\n    df_final = pd.merge(df, df_new[[cluster_field_name,'index']], on=cluster_field_name)\n    df_final = df_final.drop([cluster_field_name], axis=1)\n    df_final = df_final.rename(columns={\"index\":cluster_field_name})\n    return df_final","f33257a3":"tx_user = order_cluster('RecencyCluster', 'Recency', tx_user, False)\nprint(tx_user.head())\nprint(tx_user.tail())","017f9eef":"tx_user.groupby('RecencyCluster')['Recency'].describe()","7fc22c92":"tx_frequency = tx_uk.groupby('CustomerID').InvoiceDate.count().reset_index()","5a1d6d55":"tx_frequency.columns = ['CustomerID', 'Frequency']","ad8158f0":"tx_frequency.head()","d999ef04":"tx_user = pd.merge(tx_user, tx_frequency, on='CustomerID')","ff02e2ee":"tx_user.head()","a74f430d":"tx_user.Frequency.describe()","82d10b5a":"tx_user.Frequency.hist()\n#We can't see anything here","942fb446":"tx_user.Frequency[tx_user.Frequency < 1000].hist(bins=100)","42be8cb7":"sse={}\ntx_frequency = tx_user[['Frequency']].copy()\nfor k in range(1, 10):\n    kmeans = KMeans(n_clusters=k, max_iter=1000).fit(tx_frequency)\n    tx_frequency[\"clusters\"] = kmeans.labels_\n    sse[k] = kmeans.inertia_ \nplt.figure()\nplt.plot(list(sse.keys()), list(sse.values()))\nplt.xlabel(\"Number of cluster\")\nplt.show()","75b003e0":"kmeans = KMeans(n_clusters=4)\nkmeans.fit(tx_user[['Frequency']])\ntx_user['FrequencyCluster'] = kmeans.predict(tx_user[['Frequency']])","9d6ea6a4":"tx_user.groupby('FrequencyCluster')['Frequency'].describe()","13a043ca":"tx_user = order_cluster('FrequencyCluster', 'Frequency', tx_user, True)\ntx_user.head()","448312a2":"tx_uk['Revenue'] = tx_uk['UnitPrice'] * tx_uk['Quantity']","cb7c4aa3":"tx_revenue = tx_uk.groupby('CustomerID').Revenue.sum().reset_index()","8050f24d":"tx_revenue.head()","dac6fdcc":"tx_user = pd.merge(tx_user, tx_revenue, on='CustomerID')","f3efec71":"tx_user.Revenue.describe()","1ed5a47e":"tx_user.Revenue.hist(bins=50)","8f2bda3b":"tx_user.Revenue[tx_user.Revenue < 10000].hist(bins=50)","800a7e8b":"sse={}\ntx_revenue = tx_user[['Revenue']].copy()\nfor k in range(1, 10):\n    kmeans = KMeans(n_clusters=k, max_iter=1000).fit(tx_revenue)\n    tx_revenue[\"clusters\"] = kmeans.labels_\n    sse[k] = kmeans.inertia_ \nplt.figure()\nplt.plot(list(sse.keys()), list(sse.values()))\nplt.xlabel(\"Number of cluster\")\nplt.show()","f2ae905f":"kmeans = KMeans(n_clusters=4)\nkmeans.fit(tx_user[['Revenue']])\ntx_user['RevenueCluster'] = kmeans.predict(tx_user[['Revenue']])","9deef9b0":"tx_user = order_cluster('RevenueCluster', 'Revenue',tx_user,True)","83374b4b":"tx_user.groupby('RevenueCluster')['Revenue'].describe()","4e0fba08":"Think carefully about each column.\n\nWhen `CustomerID` is null, well we can't use it for the customer segmentation. We can drop it \/ ignore it.\n\nIf `Description` is null, it can still be useful for our segmentation.","cee3fe93":"# Frequency","a69c327a":"# Data viz","a46918b7":"# Null analysis","6e18d550":"# Monetary Value","31eaf2d7":"# Recency"}}