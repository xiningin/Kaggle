{"cell_type":{"86280320":"code","bf0e95e7":"code","82e48c47":"code","6f84e92e":"code","b1e51d20":"code","253f9cba":"code","c5baee3f":"code","d2a474b6":"code","6fd2a7ba":"code","352029bc":"code","35cc1ec3":"code","8af6a85d":"code","cf058ac8":"code","a39d928d":"code","7f21863f":"code","4c70b9ab":"code","369eb3f0":"code","155a8c9c":"code","64bfff96":"code","e1b84104":"code","d6d3189e":"code","8b96c02e":"code","ad6f2d0f":"code","fb07e496":"code","df889897":"code","aacce8b1":"code","09491ac8":"code","eba63707":"code","52bb4ee4":"code","1597b875":"code","7a95fe86":"code","2247bac3":"code","64ee8d8f":"code","f0f5a4d9":"code","4783ef9e":"code","c668adc5":"code","abb1ece7":"code","b6826e51":"code","1c383c40":"code","17a95f3d":"code","ce1227fd":"code","e0f693f7":"code","233e14e6":"code","5afab0c5":"code","2299d4ae":"code","c304ec65":"code","4c0a31e4":"code","7a0fc025":"code","b93ffba3":"code","8da2ec63":"code","b7df8f52":"markdown","5ebb8193":"markdown","abb75dd7":"markdown","21cee8d6":"markdown","0d6b3b81":"markdown","7a5f6e9b":"markdown"},"source":{"86280320":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","bf0e95e7":"import matplotlib.pyplot as plt\nimport seaborn as sns","82e48c47":"%matplotlib inline","6f84e92e":"Titanic =  pd.read_csv(\"\/kaggle\/input\/titanic\/train.csv\",index_col=0)\nlen(Titanic)\nTitanic.head()","b1e51d20":"Titanic['Survived'].value_counts()","253f9cba":"Titanic.info()","c5baee3f":"Test =  pd.read_csv(\"\/kaggle\/input\/titanic\/test.csv\",index_col=0)\nprint(len(Test))\nTitanic.head()","d2a474b6":"Test.info()","6fd2a7ba":"Feature =  Titanic.drop(['Survived'],axis=1)\nFeature = pd.concat([Feature,Test])","352029bc":"Feature.info()","35cc1ec3":"sns.set()\nfig, axes = plt.subplots(nrows=1, ncols=2,figsize=(12,4), dpi=100)\nsns.distplot(Feature[Feature['Age'].notnull()]['Age'],ax=axes[0],kde=False)\nsns.distplot(Feature[Feature['Fare'].notnull()]['Fare'],ax=axes[1],kde=False)","8af6a85d":"sns.set(style='whitegrid', rc={\"grid.linewidth\": 0.2})\nsns.set_context(\"paper\", font_scale=0.9)\nfig, axes = plt.subplots(nrows=2, ncols=3,figsize=(10,6), dpi=100)\n# sns.set_context('notebook',font_scale=1)\n# sns.set_style('whitegrid')\nsns.countplot(x='Sex',data=Titanic,ax=axes[0][0])\nsns.countplot(x='Pclass',data=Titanic,ax=axes[0][1])\nsns.countplot(x='Survived',data=Titanic,ax=axes[0][2])\nsns.countplot(x='SibSp',data=Titanic,ax=axes[1][0])\nsns.countplot(x='Parch',data=Titanic,ax=axes[1][1])\nsns.countplot(x='Embarked',data=Titanic,ax=axes[1][2])","cf058ac8":"sns.set(style='whitegrid', rc={\"grid.linewidth\": 0.2})\nsns.set_context(\"paper\", font_scale=0.9)\nfig, axes = plt.subplots(nrows=2, ncols=3,figsize=(10,6), dpi=100)\n# sns.set_context('notebook',font_scale=1)\n# sns.set_style('whitegrid')\nsns.countplot(x='Sex',data=Titanic,ax=axes[0][0],hue='Survived')\nsns.countplot(x='Pclass',data=Titanic,ax=axes[0][1],hue='Survived')\nsns.countplot(x='Survived',data=Titanic,ax=axes[0][2])\nsns.countplot(x='SibSp',data=Titanic,ax=axes[1][0],hue='Survived')\nsns.countplot(x='Parch',data=Titanic,ax=axes[1][1],hue='Survived')\nsns.countplot(x='Embarked',data=Titanic,ax=axes[1][2],hue='Survived')","a39d928d":"sns.set(style='whitegrid', rc={\"grid.linewidth\": 0.2})\nsns.set_context(\"paper\", font_scale=0.9)\nfig, axes = plt.subplots(nrows=1, ncols=2,figsize=(10,4), dpi=100)\nsns.stripplot(x=\"Sex\", y=\"Age\", data=Titanic,jitter=True,hue='Survived',dodge=True,ax=axes[0])\nsns.stripplot(x=\"Sex\", y=\"Fare\", data=Titanic,jitter=True,hue='Survived',dodge=True,ax=axes[1])","7f21863f":"sns.set(style='whitegrid', rc={\"grid.linewidth\": 0.2})\nsns.set_context(\"paper\", font_scale=0.9)\nfig, axes = plt.subplots(nrows=1, ncols=2,figsize=(10,4), dpi=100)\nsns.stripplot(x=\"Embarked\", y=\"Age\", data=Titanic,jitter=True,hue='Survived',dodge=True,ax=axes[0])\nsns.stripplot(x=\"Embarked\", y=\"Fare\", data=Titanic,jitter=True,hue='Survived',dodge=True,ax=axes[1])","4c70b9ab":"sns.set(style='whitegrid', rc={\"grid.linewidth\": 0.2})\nsns.set_context(\"paper\", font_scale=0.9)\nfig, axes = plt.subplots(nrows=1, ncols=2,figsize=(10,4), dpi=100)\nsns.stripplot(x=\"Parch\", y=\"Age\", data=Titanic,jitter=True,hue='Survived',dodge=True,ax=axes[0])\nsns.stripplot(x=\"Parch\", y=\"Fare\", data=Titanic,jitter=True,hue='Survived',dodge=True,ax=axes[1])","369eb3f0":"Corr = Titanic.corr()","155a8c9c":"fig=plt.figure(figsize =(10,10),dpi=65)\nsns.heatmap(Corr,cmap='summer',linewidths=1,linecolor='black',annot=True)","64bfff96":"Feature['Age'].fillna(value =Feature['Age'].median(),inplace=True )","e1b84104":"Feature['Fare'].fillna(value =Feature['Fare'].median(),inplace=True)","d6d3189e":"Feature['Embarked'].fillna(value ='S',inplace=True)","8b96c02e":"Feature.info()","ad6f2d0f":"Feature['Family'] = Feature['SibSp']+Feature['Parch']","fb07e496":"Feature['Salutation'] = Feature['Name'].str.split(\",\").str[1].str.split().str[0]","df889897":"Feature.head()","aacce8b1":"from sklearn.preprocessing import LabelEncoder\nfrom sklearn.preprocessing import MinMaxScaler\nsccalerm = MinMaxScaler()","09491ac8":"Feature['Fare']=sccalerm.fit_transform(Feature[['Fare']])","eba63707":"Feature['Age']=sccalerm.fit_transform(Feature[['Age']])","52bb4ee4":"Feature.head()","1597b875":"Feature.drop(['Name','Cabin','Ticket'],inplace=True,axis=1)","7a95fe86":"Feature.drop(['Age'],inplace=True,axis=1)","2247bac3":"Feature.head()","64ee8d8f":"X = Feature.iloc[:,:].values","f0f5a4d9":"X","4783ef9e":"LabelCol = [1,5,7]\nfor i in LabelCol:\n    LabelX = LabelEncoder()\n    X[:,i]=LabelX.fit_transform(X[:,i])","c668adc5":"X","abb1ece7":"Xtest = X[len(Titanic):]","b6826e51":"X1 = X[0:len(Titanic)]","1c383c40":"Y=Titanic.iloc[:,0].values","17a95f3d":"from sklearn.model_selection import train_test_split\nfrom sklearn.metrics import confusion_matrix\nfrom sklearn.metrics import accuracy_score ,precision_score,recall_score,f1_score\nfrom sklearn.metrics import roc_curve\nfrom sklearn.metrics import roc_auc_score","ce1227fd":"from sklearn.linear_model import LogisticRegression\nfrom sklearn.ensemble import RandomForestClassifier","e0f693f7":"from xgboost import XGBClassifier","233e14e6":"def plot_roc_curve(fpr, tpr,col,lab):\n    plt.plot(fpr, tpr, color=col, label=lab)\n    plt.plot([0, 1], [0, 1], color='darkblue', linestyle='--')\n    plt.xlabel('False Positive Rate')\n    plt.ylabel('True Positive Rate')\n    plt.title('Receiver Operating Characteristic (ROC) Curve')\n    plt.legend()\n    plt.show()","5afab0c5":"X_train,X_test,Y_Train,Y_Test = train_test_split(X1,Y,test_size= 0.20)","2299d4ae":"classifierLogistic = LogisticRegression()\nclassifierLogistic.fit(X_train,Y_Train)\ny_pred_logit = classifierLogistic.predict(X_test)\n\ncm_logit = confusion_matrix(Y_Test, y_pred_logit)\nprint('Confusion matrix for Logistic',cm_logit)\n\naccuracy_logit = accuracy_score(Y_Test, y_pred_logit)\nprecision_logit =precision_score(Y_Test, y_pred_logit)\nrecall_logit =  recall_score(Y_Test, y_pred_logit)\nf1_logit = f1_score(Y_Test, y_pred_logit)\nprint('accuracy_logistic :',accuracy_logit)\nprint('precision_logistic :',precision_logit)\nprint('recall_logistic :',recall_logit)\nprint('f1-score_logistic :',f1_logit)\nauc_logit = roc_auc_score(Y_Test, y_pred_logit)\nprint('AUC_logistic : %.2f' % auc_logit)","c304ec65":"classifierRF = RandomForestClassifier(n_estimators=100,max_depth=10,criterion='entropy',class_weight='balanced')\nclassifierRF.fit(X_train,Y_Train)\ny_pred_RF = classifierRF.predict(X_test)\n\ncm_RF = confusion_matrix(Y_Test, y_pred_RF)\nprint('Confusion matrix Random Forest',cm_RF)\n\naccuracy_RF = accuracy_score(Y_Test, y_pred_RF)\nprecision_RF =precision_score(Y_Test, y_pred_RF)\nrecall_RF =  recall_score(Y_Test, y_pred_RF)\nf1_RF = f1_score(Y_Test, y_pred_RF)\nprint('accuracy random forest :',accuracy_RF)\nprint('precision random forest :',precision_RF)\nprint('recall random forest :',recall_RF)\nprint('f1-score random forest :',f1_RF)\nauc_RF = roc_auc_score(Y_Test, y_pred_RF)\nprint('AUC: %.2f' % auc_RF)","4c0a31e4":"xgb =  XGBClassifier()\nxgb.fit(X_train,Y_Train)\ny_pred_xgb = xgb.predict(X_test)\n\ncm_xgb = confusion_matrix(Y_Test, y_pred_xgb)\nprint('Confusion matrix Random Forest',cm_xgb)\n\naccuracy_xgb = accuracy_score(Y_Test, y_pred_xgb)\nprecision_xgb =precision_score(Y_Test, y_pred_xgb)\nrecall_xgb =  recall_score(Y_Test, y_pred_xgb)\nf1_xgb = f1_score(Y_Test, y_pred_xgb)\nprint('XGBOOST accuracy :',accuracy_xgb)\nprint('precision XGBOOST :',precision_xgb)\nprint('recall XGBOOST :',recall_xgb)\nprint('f1-score XGBOOST :',f1_xgb)\nauc_xgb = roc_auc_score(Y_Test, y_pred_xgb)\nprint('AUC: %.2f' % auc_xgb)","7a0fc025":"a=[0.0,0.1,0.2,0.3,0.4,0.5,0.6,0.7,0.8,0.9,1]\nb=[0.0,0.1,0.2,0.3,0.4,0.5,0.6,0.7,0.8,0.9,1]\nfig =plt.figure(figsize=(15,15),dpi=50)\nfpr, tpr, thresholds = roc_curve(Y_Test,y_pred_logit )\nplt.plot(fpr, tpr,color ='orange',label ='Logistic' )\nfpr, tpr, thresholds = roc_curve(Y_Test,y_pred_RF )\nplt.plot(fpr, tpr,color ='blue',label ='random Forest' )\nfpr, tpr, thresholds = roc_curve(Y_Test,y_pred_RF )\nplt.plot(fpr, tpr,color ='blue',label ='XGB' )\nplt.plot(a,b,color='black',linestyle ='dashed')\nplt.legend(fontsize=15)\nplt.xlabel('False Positive Rate',fontsize=15)\nplt.ylabel('True Positive Rate',fontsize=15)","b93ffba3":"y_pred_test = xgb.predict(Xtest)","8da2ec63":"output = pd.DataFrame({'PassengerId': Test.index, 'Survived': y_pred_test})\noutput.to_csv('my_submission.csv', index=False)\nprint(\"Your submission was successfully saved!\")\n","b7df8f52":"**Application of various models**","5ebb8193":"**Adding New Features and Filling the missing values**","abb75dd7":"Dropping feature which are not relevent for machine learning purpose","21cee8d6":"Creating a combined Data set for train and test","0d6b3b81":"Analytical Graphs to Check which categorical values are making a difference","7a5f6e9b":"**Exploratory Data Visualizations**"}}