{"cell_type":{"2724cf70":"code","d7c91491":"code","d0740530":"code","bb2c3f0c":"code","42c3a148":"code","0b2ad10b":"code","3387ceb1":"code","4eaac7ae":"code","3098cac9":"code","384809d1":"code","12ba915d":"code","78e30ad6":"code","511349c4":"code","dba30892":"code","c7463cda":"code","96ba4663":"code","a00e527b":"code","ec91a181":"code","ef87ad20":"code","2cf68969":"code","265ff451":"code","621dd486":"code","c759c37b":"code","55eee2a3":"code","10fe8b0a":"code","23e3e6c2":"code","3afa2e8b":"code","6935df52":"code","0fbb498c":"code","99cc1023":"markdown"},"source":{"2724cf70":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\nimport tensorflow as tf\n\nimport keras\nfrom keras.models import Sequential\nfrom keras.layers import Conv2D, MaxPool2D, Dropout, Flatten, Dense \nfrom keras.optimizers import RMSprop\n\nfrom sklearn.model_selection import train_test_split\n","d7c91491":"train_df = pd.read_csv('..\/input\/digit-recognizer\/train.csv')\ntrain_df.head()","d0740530":"test_df = pd.read_csv('..\/input\/digit-recognizer\/test.csv')\ntest_df.head()","bb2c3f0c":"len(test_df.iloc[0])","42c3a148":"sum(train_df.isna().sum())","0b2ad10b":"sum(test_df.isna().sum())","3387ceb1":"### split into X and y\n\nX_train = train_df.drop('label', axis=1)\ny_train = train_df['label']\n","4eaac7ae":"### check balancy of labels:\ny_train.value_counts()","3098cac9":"### Normalization : 0-255 => 0-1\n\nX_train = X_train\/255.0\ntest_df = test_df\/255.0","384809d1":"X_train.values","12ba915d":"### Reshape the images   (28, 28)  => (28, 28, 1)\n\nX_train = X_train.values.reshape(-1, 28, 28, 1)\ntest_df = test_df.values.reshape(-1, 28, 28, 1)","78e30ad6":"### Label encodeing (One hot encoders)\n\ny_train = keras.utils.np_utils.to_categorical(y_train, num_classes=10)","511349c4":"### split into training and validation set\n\nnp.random.seed(42)\n\nX_train, X_val, y_train, y_val = train_test_split(X_train, y_train, test_size=0.1)","dba30892":"X_train.shape, X_val.shape, y_train.shape, y_val.shape","c7463cda":"### Build the model\n\nmodel = Sequential()\nmodel.add(Conv2D(32, (5,5),\n                 padding='same',\n                 activation='relu',\n                 input_shape=(28, 28, 1)))\nmodel.add(Conv2D(32, (5,5),\n                 padding='same',\n                 activation='relu'))\nmodel.add(MaxPool2D((2,2)))\nmodel.add(Dropout(0.25))\n\nmodel.add(Conv2D(64, (3,3),\n                 padding='same',\n                 activation='relu'))\nmodel.add(Conv2D(64, (3,3),\n                 padding='same',\n                 activation='relu'))\nmodel.add(MaxPool2D((2,2), strides=(2,2)))\nmodel.add(Dropout(0.25))\n\nmodel.add(Flatten())\nmodel.add(Dense(256, activation='relu'))\nmodel.add(Dense(10, activation='softmax'))\n\nmodel.summary()","96ba4663":"### Compile the model\n\noptimizer = RMSprop()\n\nmodel.compile(optimizer=optimizer,\n              loss='categorical_crossentropy',\n              metrics=['accuracy'])","a00e527b":"### train the model\n\nbatch_size = 86\nepochs = 30\n\nhistory = model.fit(X_train, y_train,\n                    batch_size=batch_size,\n                    epochs=epochs,\n                    validation_data=(X_val, y_val),\n                    verbose=2)","ec91a181":"history.history.keys()","ef87ad20":"### Let's plot the loss and accuracy\n\nplt.plot(np.arange(epochs), history.history['loss'], color='orange', label='Training loss')\nplt.plot(np.arange(epochs), history.history['val_loss'], color='blue', label='Validation loss')\nplt.title('Loss')\nplt.xlabel('#Epochs')\nplt.ylabel('Loss')\nplt.legend()\nplt.show()\n\nplt.plot(np.arange(epochs), history.history['accuracy'], color='orange', label='Training accuracy')\nplt.plot(np.arange(epochs), history.history['val_accuracy'], color='blue', label='Validation accuracy')\nplt.title('Accuracy')\nplt.xlabel('#Epochs')\nplt.ylabel('Accuracy')\nplt.legend()\nplt.show()\n","2cf68969":"### Let's make predictions\npredictions = model.predict(test_df)","265ff451":"predictions[0]","621dd486":"pred_bool = (predictions>0.5)\npred_bool[0]","c759c37b":"pred_bool = pred_bool.astype(int)","55eee2a3":"labels = ['zero', 'one', 'two', 'three', 'four',\n          'five', 'six', 'seven', 'eight', 'nine']","10fe8b0a":"labels[np.argmax(pred_bool[0])]","23e3e6c2":"### Now let's visualize the prediction\n\nprint('prediction on test data set:')\nprint('')\nplt.figure(figsize=(10,10))\nfor i in range(25):\n    plt.subplot(5,5,i+1)\n    plt.imshow(test_df[i].reshape(28,28))\n    plt.title(labels[np.argmax(pred_bool[i])])\nplt.tight_layout(h_pad=0.5)\nplt.show()","3afa2e8b":"### make submission file\nlabel_col = []\nfor i in range(len(pred_bool)):\n    label_col.append(np.argmax(pred_bool[i]))\n\nlabel_col[:10]","6935df52":"\n\nsubmission = pd.DataFrame()\nsubmission['ImageId'] = np.arange(1, len(test_df)+1)\nsubmission['Label'] = label_col\nsubmission","0fbb498c":"submission.to_csv('submission.csv', index=False)","99cc1023":"We're ready with X_train, y_train"}}