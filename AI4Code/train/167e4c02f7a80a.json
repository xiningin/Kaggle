{"cell_type":{"f4d0e0f1":"code","08f38b59":"code","3724dc77":"code","afb0eeb7":"code","e1e43a88":"code","7ffe66e4":"code","2bac46cd":"code","5a63673d":"code","5d377432":"code","b5939d3c":"code","618b29a0":"code","1b0ddbbd":"code","0531a1fb":"code","121e238a":"code","e2004e66":"code","827c4819":"code","7afac6e0":"code","842016d9":"code","502749e2":"code","fcf41cc2":"code","8bcd398f":"code","12e5b48a":"code","028de641":"code","b9f57551":"code","ba306162":"code","e9830bdd":"code","f9731ca4":"code","1e8ae827":"code","c52b22fb":"code","54f6de83":"code","3547e5e0":"code","49e0daa4":"code","85fb1ed2":"code","fd3c4937":"code","dc255f15":"code","e311c73f":"code","0c439257":"code","f3508911":"code","ce2be305":"code","9a4011e4":"code","43516a8c":"code","561145ff":"code","712b9411":"code","614ce6d3":"code","7a6ad2f7":"code","bad0b841":"code","202a2838":"code","20d0a8e1":"code","836a313c":"code","c5ec4046":"code","9f9fac4d":"code","b78be194":"code","43b47be1":"code","2adaf044":"code","80c05b48":"code","e5556986":"code","de2e5edb":"code","cf637dd4":"code","82bce4ac":"code","53d0a7d4":"code","bc1f489f":"code","499f5671":"code","3ac36ca5":"code","0bfd4a6e":"markdown","f67e323b":"markdown","28aa26ba":"markdown","137f937e":"markdown","cd4463cf":"markdown","8ab1ae32":"markdown","551a2e6e":"markdown","eeabe2e5":"markdown","b403e0ac":"markdown","6f917e19":"markdown","727e6ee5":"markdown","b9864835":"markdown","59a3d0cb":"markdown","10867cc8":"markdown","f9f79647":"markdown","c6039bfc":"markdown","a6f96c84":"markdown","82342015":"markdown","f52e8fe6":"markdown","c5100817":"markdown","cbc3acf9":"markdown","f1dc404b":"markdown","2affbc6f":"markdown","d4d2eb56":"markdown","7162f391":"markdown","ce3488b0":"markdown","135b7d1d":"markdown","e3b77fc4":"markdown","7c73cfb5":"markdown","30d87b59":"markdown","2a6faaaa":"markdown","9b50fd41":"markdown","a6122e63":"markdown","74377be0":"markdown","32bb62d2":"markdown","216d684c":"markdown","3162f9d5":"markdown","d5b75f21":"markdown","d7cfb951":"markdown","ba746a11":"markdown","0005d2b4":"markdown","26be88ed":"markdown","96620f7a":"markdown","7f6b2488":"markdown","30aecd66":"markdown","d075133b":"markdown","ab623cda":"markdown","d17326b2":"markdown","6ddcf4fb":"markdown","f16946b8":"markdown","27ffe40d":"markdown","b610ad56":"markdown","4840d0a5":"markdown","967b76b4":"markdown","2074a895":"markdown","0a7788eb":"markdown","5f03b6d0":"markdown","6e6e4bf9":"markdown"},"source":{"f4d0e0f1":"#Import the standard libraries\nimport pandas as pd\nimport numpy as np\nimport seaborn as sb\nimport matplotlib.pyplot as plt","08f38b59":"#Import csv file\naviationData = pd.read_csv(\"..\/input\/dataset\/AviationData.csv\", encoding = 'iso-8859-1')\n\npd.set_option('display.max_columns',31)\naviationData.head()","3724dc77":"aviationData.info()","afb0eeb7":"#Check for significance of the null values\n\nfor i in aviationData.columns:\n    data_missing = np.mean(aviationData[i].isnull())\n    print('{} - {}% , {}'.format(i, round(data_missing*100), aviationData[i].isna().sum()))\n    ","e1e43a88":"#Understand the breakdown of the variables before cleaning\nvariables = ['Event.Date',\n            'Latitude',\n            'Longitude',\n            'Injury.Severity',\n            'Aircraft.Damage',\n            'Make',\n            'Amateur.Built',\n            'Number.of.Engines',\n            'Engine.Type',\n            'Purpose.of.Flight',\n            'Weather.Condition',\n            'Broad.Phase.of.Flight',\n            'Report.Status']\n\nfor x in variables:\n    print(x, ': ', aviationData[x].value_counts(), '\\n')","7ffe66e4":"#Event.date\n#Split the Event date dataset into month, day, year datasets\naviationData['Month'] = aviationData['Event.Date'].str.split('\/', expand=True)[0]\naviationData['Day'] = aviationData['Event.Date'].str.split('\/', expand=True)[1]\naviationData['Year'] = aviationData['Event.Date'].str.split('\/', expand=True)[2]","2bac46cd":"#Latitude and longtitude\n#Since around 64% of the data is missing, it does not make sense to fill\n#in the data. Filling in the null values with the mean or median of Latitude and longtitude\n#does not make sense. Hence we will be dropping the null values in the later analysis.\n","5a63673d":"#Injury.Severity\n#Categorise Injurity Severity dataset into Fatal and Non-Fatal\n#For incident and unavailable data, assumed as Non-Fatal\naviationData['Fatal'] = aviationData['Injury.Severity'].apply(lambda x: 'No' \n                                                              if x=='Non-Fatal' \n                                                              or x== 'Incident' \n                                                              or x=='Unavailable' \n                                                              else 'Yes')","5d377432":"#Aircraft.Damage\n#Fill the null values of Aircraft.Damage with the most common recurring value\naviationData['Aircraft.Damage'].fillna(aviationData['Aircraft.Damage'].mode()[0], inplace=True)","b5939d3c":"#Make\n#Standardise Make to uppercase letters (to remove complications)\naviationData['Make'] = aviationData['Make'].str.upper()\n\n#Fill null values with 'Others'\naviationData['Make'].fillna('Others', inplace = True)\n\n#Group those Make with insignificant sample size(<1% of total) with 'Others'\nmake_others = aviationData[\"Make\"].value_counts()<850\naviationData[\"Make\"] = aviationData[\"Make\"].apply(lambda x: 'Others' if make_others.loc[x]==True else x)","618b29a0":"#Amateur.Built\n#Fill null values of Amateur.Built with the most common recurring data\naviationData['Amateur.Built'].fillna(aviationData['Amateur.Built'].mode()[0], inplace=True)","1b0ddbbd":"#Number.of.Engines\n#Fill null values of Number.of.Engines with the most common recurring data\naviationData['Number.of.Engines'].fillna(aviationData['Number.of.Engines'].mode()[0], inplace=True)\n\n#Convert data type of Number.of.Engines to int64 for Exploratory Analysis\naviationData['Number.of.Engines'] = aviationData['Number.of.Engines'].astype('int64')\n\n#Simplify dataset by representing 3 or more engines as 3\naviationData['Number.of.Engines'] = aviationData['Number.of.Engines'].replace(4, 3)\naviationData['Number.of.Engines'] = aviationData['Number.of.Engines'].replace(8, 3)\naviationData['Number.of.Engines'].value_counts()","0531a1fb":"#Engine.Type\n#Fill null values of Engine.Type with the most common recurring data\naviationData['Engine.Type'].fillna(aviationData['Engine.Type'].mode()[0], inplace=True)\n\n#Group those engine type with insignificant sample size(<1% of total) as 'Others'\ntype_others = aviationData['Engine.Type'].value_counts()<850\naviationData['Engine.Type'] = aviationData['Engine.Type'].apply(lambda x: 'Others' if type_others.loc[x]==True else x)","121e238a":"#Purpose.of.Flight\n#Fill null values of Purpose.of.Flight as 'Unknown'\naviationData['Purpose.of.Flight'].fillna('Unknown', inplace=True)\n\n#Group purpose of flight with those of similar purpose\n#Public Aircraft\naviationData['Purpose.of.Flight'] = aviationData['Purpose.of.Flight'].replace('Public Aircraft - Local', 'Public Aircraft')\naviationData['Purpose.of.Flight'] = aviationData['Purpose.of.Flight'].replace('Public Aircraft - Federal', 'Public Aircraft')\naviationData['Purpose.of.Flight'] = aviationData['Purpose.of.Flight'].replace('Public Aircraft - State', 'Public Aircraft')\n\n#Work use\naviationData['Purpose.of.Flight'] = aviationData['Purpose.of.Flight'].replace('Executive\/Corporate', 'Work Use')\naviationData['Purpose.of.Flight'] = aviationData['Purpose.of.Flight'].replace('Other Work Use', 'Work Use')\naviationData['Purpose.of.Flight'] = aviationData['Purpose.of.Flight'].replace('Business', 'Work Use')\n\n#Group those purpose of flight with insignificant sample size(<1% of total) as 'Others'\npurpose_others = aviationData['Purpose.of.Flight'].value_counts()<850\naviationData['Purpose.of.Flight'] = aviationData['Purpose.of.Flight'].apply(lambda x: 'Others' if purpose_others.loc[x]==True else x)","e2004e66":"#Weather.Condition\n#Fill null values of Weather.Condition with the most common recurring data\naviationData['Weather.Condition'].fillna(aviationData['Weather.Condition'].mode()[0], inplace = True)","827c4819":"#Broad.Phase.of.Flight\n#Fill null values of Broad.Phase.of.Flight as 'UNKNOWN'\naviationData['Broad.Phase.of.Flight'].fillna('UNKNOWN', inplace = True)","7afac6e0":"#Report.Status\n#No steps requred for cleaning","842016d9":"#Breakdown of variables after cleaning\nfor x in variables:\n    print(x, ': ', aviationData[x].value_counts(), '\\n')","502749e2":"#Rearrange the order of columns\n#Exclude 'Day' as it is unnecessary in analysis\n#Exclude Latitude and Longtitude as they will be put in a separate dataframe\/analysis\nclean_data = pd.DataFrame(aviationData[['Year',\n                                        'Month',\n                                        'Aircraft.Damage',\n                                        'Make',\n                                        'Amateur.Built',\n                                        'Number.of.Engines',\n                                        'Engine.Type',\n                                        'Purpose.of.Flight',\n                                        'Weather.Condition',\n                                        'Broad.Phase.of.Flight',\n                                        'Report.Status',\n                                        'Fatal']])","fcf41cc2":"#Latitude and Longtitude dataframe\nLatLong_data = pd.DataFrame(aviationData[['Latitude', 'Longitude', 'Fatal']])","8bcd398f":"#Check for null values(if any)\nfor i in clean_data.columns:\n    data_missing = np.mean(clean_data[i].isnull())\n    print('{} - {}% , {}'.format(i, round(data_missing*100), clean_data[i].isna().sum()))\n    ","12e5b48a":"clean_data.head()","028de641":"#Arrange by years(ascending)\nclean_data = clean_data.sort_values(by = 'Year', ascending = True)\n\n#Count plot of number of accidents every year\nf, axes = plt.subplots(1, 1, figsize=(24, 10))\nax = sb.countplot(x = 'Year', data = clean_data)\nax.axes.set_title(\"Total Accidents Each Year\",fontsize=20)","b9f57551":"#Count plot of Fatal & Non-Fatal every year\nf, axes = plt.subplots(1, 1, figsize=(30, 10))\nax = sb.countplot(x = 'Year', hue = 'Fatal', data = clean_data, palette = 'Set1')\nax.axes.set_title(\"Fatal:Non Fatal Ratio Over the Years\",fontsize=20)","ba306162":"#Percentage of fatality over the years\ndataset = pd.DataFrame(clean_data.groupby('Year')['Fatal'].count())\ndataset = dataset.rename(columns={'Fatal': \"Total\"})\ndataset['Year'] = dataset.index\nfatal_count = []\nfor yr in dataset['Year']:\n    data1 = clean_data.loc[clean_data['Year']== yr]\n    data1 = len(data1.loc[data1['Fatal'] =='Yes'])\n    fatal_count.append(data1)\ndataset['Fatal_Count'] = fatal_count\ndataset['Percentage'] = dataset['Fatal_Count']\/dataset['Total'] * 100\ndataset['Index'] = [x for x in range(45)]\ndataset = dataset.set_index('Index')\n\nf, axes = plt.subplots(1, 1, figsize=(24, 10))\nsb.barplot(x = 'Percentage', y = 'Year', data = dataset, orient = 'h')","e9830bdd":"#We will be diving deeper into the time series and look at possible pattern in a year\n#Arrange the months(ascending)\n\nclean_data['Month'] = clean_data['Month'].replace(['1'],'Jan')\nclean_data['Month'] = clean_data['Month'].replace(['2'],'Feb')\nclean_data['Month'] = clean_data['Month'].replace(['3'],'Mar')\nclean_data['Month'] = clean_data['Month'].replace(['4'],'Apr')\nclean_data['Month'] = clean_data['Month'].replace(['5'],'May')\nclean_data['Month'] = clean_data['Month'].replace(['6'],'Jun')\nclean_data['Month'] = clean_data['Month'].replace(['7'],'Jul')\nclean_data['Month'] = clean_data['Month'].replace(['8'],'Aug')\nclean_data['Month'] = clean_data['Month'].replace(['9'],'Sep')\nclean_data['Month'] = clean_data['Month'].replace(['10'],'Oct')\nclean_data['Month'] = clean_data['Month'].replace(['11'],'Nov')\nclean_data['Month'] = clean_data['Month'].replace(['12'],'Dec')\n\n#Count plot of accidents over the months\nf, axes = plt.subplots(1, 1, figsize=(24, 10))\nax = sb.countplot(x = 'Month', data = clean_data, order = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun',\n                                                  'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'])\nax.axes.set_title(\"Total Accidents Each Month\",fontsize=20)","f9731ca4":"#Count plot of accidents over the months\nf, axes = plt.subplots(1, 1, figsize=(24, 10))\nax = sb.countplot(x = 'Month', data = clean_data, hue = 'Fatal', order = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun',\n                                                  'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'], palette = 'Set1')\nax.axes.set_title(\"Fatal:Non Fatal Ratio Each Month\",fontsize=20)","1e8ae827":"dataset = pd.DataFrame(clean_data.groupby('Month')['Fatal'].count())\ndataset = dataset.rename(columns={'Fatal': \"Total\"})\ndataset['Month'] = dataset.index\nfatal_count = []\nfor mon in dataset['Month']:\n    data1 = clean_data.loc[clean_data['Month']== mon]\n    data1 = len(data1.loc[data1['Fatal'] =='Yes'])\n    fatal_count.append(data1)\ndataset['Fatal_Count'] = fatal_count\ndataset['Percentage'] = dataset['Fatal_Count']\/dataset['Total'] * 100\ndataset['Index'] = [x for x in range(12)]\ndataset = dataset.set_index('Index')\n\nf, axes = plt.subplots(1, 1, figsize=(24, 10))\nsb.barplot(x = 'Percentage', y = 'Month', data = dataset, order = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun',\n                                                  'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'])","c52b22fb":"f, axes = plt.subplots(1, 1, figsize=(24, 10))\nax = sb.countplot(x = 'Aircraft.Damage', hue = 'Fatal', data = clean_data, palette = 'Set1')\nax.axes.set_title(\"Fatal:Non Fatal Ratio of Air Craft Damage\",fontsize=20)\n\n#Show Percentages of the Total Count\nAircraftDamage_data = clean_data['Aircraft.Damage']\ntotal = float(len(AircraftDamage_data))\nfor p in ax.patches:\n    height = p.get_height()\n    ax.text(p.get_x()+p.get_width()\/2., height + 100, '{:1.2f}'.format(height*100\/total),\n            ha=\"center\")","54f6de83":"f, axes = plt.subplots(1, 1, figsize=(24, 10))\nax = sb.countplot(x = 'Make', hue = 'Fatal', data = clean_data, palette = 'Set1')\n\n#Show Percentages of the Total Count\nmake_data = clean_data['Make']\ntotal = float(len(make_data))\nfor p in ax.patches:\n    height = p.get_height()\n    ax.text(p.get_x()+p.get_width()\/2., height + 100, '{:1.2f}'.format(height*100\/total),\n            ha=\"center\")\n    \n#percentage fatality of Make\ndataset = pd.DataFrame(clean_data.groupby('Make')['Fatal'].count())\ndataset = dataset.rename(columns={'Fatal': \"Total\"})\ndataset['Make'] = dataset.index\nfatal_count = []\nfor i in dataset['Make']:\n    data1 = clean_data.loc[clean_data['Make']== i]\n    data1 = len(data1.loc[data1['Fatal'] =='Yes'])\n    fatal_count.append(data1)\ndataset['Fatal_Count'] = fatal_count\ndataset['Percentage'] = dataset['Fatal_Count']\/dataset['Total'] * 100\ndataset['Index'] = [x for x in range(11)]\ndataset = dataset.set_index('Index')\n\nf, axes = plt.subplots(1, 1, figsize=(24, 10))\nsb.barplot(x = 'Percentage', y = 'Make', data = dataset)","3547e5e0":"f, axes = plt.subplots(1, 1, figsize=(24, 10))\nax = sb.countplot(x = 'Amateur.Built', hue = 'Fatal', data = clean_data, palette = 'Set1')\n\n#Percentage fatality of amateur built\ndataset = pd.DataFrame(clean_data.groupby('Amateur.Built')['Fatal'].count())\ndataset = dataset.rename(columns={'Fatal': \"Total\"})\ndataset['Amateur.Built'] = dataset.index\nfatal_count = []\nfor i in dataset['Amateur.Built']:\n    data1 = clean_data.loc[clean_data['Amateur.Built']== i]\n    data1 = len(data1.loc[data1['Fatal'] =='Yes'])\n    fatal_count.append(data1)\ndataset['Fatal_Count'] = fatal_count\ndataset['Percentage'] = dataset['Fatal_Count']\/dataset['Total'] * 100\ndataset['Index'] = [x for x in range(2)]\ndataset = dataset.set_index('Index')\n\nf, axes = plt.subplots(1, 1, figsize=(24, 10))\nsb.barplot(x = 'Percentage', y = 'Amateur.Built', data = dataset, palette = 'RdBu_r')","49e0daa4":"#countplot of number of engines\nf, axes = plt.subplots(1, 1, figsize=(24, 10))\nsb.countplot(x = 'Number.of.Engines', hue = 'Fatal', data = clean_data, palette = 'Set1')\n\n#Percentage fatality of Number of engines\ndataset = pd.DataFrame(clean_data.groupby('Number.of.Engines')['Fatal'].count())\ndataset = dataset.rename(columns={'Fatal': \"Total\"})\ndataset['Number.of.Engines'] = dataset.index\nfatal_count = []\nfor i in dataset['Number.of.Engines']:\n    data1 = clean_data.loc[clean_data['Number.of.Engines']== i]\n    data1 = len(data1.loc[data1['Fatal'] =='Yes'])\n    fatal_count.append(data1)\ndataset['Fatal_Count'] = fatal_count\ndataset['Percentage'] = dataset['Fatal_Count']\/dataset['Total'] * 100\ndataset['Index'] = [x for x in range(4)]\ndataset = dataset.set_index('Index')\n\nf, axes = plt.subplots(1, 1, figsize=(24, 10))\nsb.barplot(x = 'Percentage', y = 'Number.of.Engines', data = dataset, orient = 'h', palette = 'RdBu_r')","85fb1ed2":"#countplot of engine types\nf, axes = plt.subplots(1, 1, figsize=(24, 10))\nsb.countplot(x = 'Engine.Type', hue = 'Fatal', data = clean_data, palette = 'Set1')\n\n#Percentage fatality of Engine type\ndataset = pd.DataFrame(clean_data.groupby('Engine.Type')['Fatal'].count())\ndataset = dataset.rename(columns={'Fatal': \"Total\"})\ndataset['Engine.Type'] = dataset.index\nfatal_count = []\nfor i in dataset['Engine.Type']:\n    data1 = clean_data.loc[clean_data['Engine.Type']== i]\n    data1 = len(data1.loc[data1['Fatal'] =='Yes'])\n    fatal_count.append(data1)\ndataset['Fatal_Count'] = fatal_count\ndataset['Percentage'] = dataset['Fatal_Count']\/dataset['Total'] * 100\ndataset['Index'] = [x for x in range(6)]\ndataset = dataset.set_index('Index')\n\nf, axes = plt.subplots(1, 1, figsize=(24, 10))\nsb.barplot(x = 'Percentage', y = 'Engine.Type', data = dataset, palette = 'RdBu_r')","fd3c4937":"#countplot of purpose of flight\nf, axes = plt.subplots(1, 1, figsize=(24, 10))\nsb.countplot(x = 'Purpose.of.Flight', hue = 'Fatal', data = clean_data, palette = 'Set1')\n\n#Percentage fatality of Purpose of Flight\ndataset = pd.DataFrame(clean_data.groupby('Purpose.of.Flight')['Fatal'].count())\ndataset = dataset.rename(columns={'Fatal': \"Total\"})\ndataset['Purpose.of.Flight'] = dataset.index\nfatal_count = []\nfor i in dataset['Purpose.of.Flight']:\n    data1 = clean_data.loc[clean_data['Purpose.of.Flight']== i]\n    data1 = len(data1.loc[data1['Fatal'] =='Yes'])\n    fatal_count.append(data1)\ndataset['Fatal_Count'] = fatal_count\ndataset['Percentage'] = dataset['Fatal_Count']\/dataset['Total'] * 100\ndataset['Index'] = [x for x in range(8)]\ndataset = dataset.set_index('Index')\n\nf, axes = plt.subplots(1, 1, figsize=(24, 10))\nsb.barplot(x = 'Percentage', y = 'Purpose.of.Flight', data = dataset, palette = 'RdBu_r')","dc255f15":"#countplot of weather condition\nf, axes = plt.subplots(1, 1, figsize=(24, 10))\nsb.countplot(x = 'Weather.Condition', hue = 'Fatal', data = clean_data, palette = 'Set1')\n\n#Percentage fatality of Weather condition\ndataset = pd.DataFrame(clean_data.groupby('Weather.Condition')['Fatal'].count())\ndataset = dataset.rename(columns={'Fatal': \"Total\"})\ndataset['Weather.Condition'] = dataset.index\nfatal_count = []\nfor i in dataset['Weather.Condition']:\n    data1 = clean_data.loc[clean_data['Weather.Condition']== i]\n    data1 = len(data1.loc[data1['Fatal'] =='Yes'])\n    fatal_count.append(data1)\ndataset['Fatal_Count'] = fatal_count\ndataset['Percentage'] = dataset['Fatal_Count']\/dataset['Total'] * 100\ndataset['Index'] = [x for x in range(3)]\ndataset = dataset.set_index('Index')\n\nf, axes = plt.subplots(1, 1, figsize=(24, 10))\nsb.barplot(x = 'Percentage', y = 'Weather.Condition', data = dataset, palette = 'RdBu_r')","e311c73f":"#countplot of broad phase of flight\nf, axes = plt.subplots(1, 1, figsize=(24, 10))\nsb.countplot(x = 'Broad.Phase.of.Flight', hue = 'Fatal', data = clean_data, palette = 'Set1')\n\n#Percentage fatality of Broad Phase of Flight\ndataset = pd.DataFrame(clean_data.groupby('Broad.Phase.of.Flight')['Fatal'].count())\ndataset = dataset.rename(columns={'Fatal': \"Total\"})\ndataset['Broad.Phase.of.Flight'] = dataset.index\nfatal_count = []\nfor i in dataset['Broad.Phase.of.Flight']:\n    data1 = clean_data.loc[clean_data['Broad.Phase.of.Flight']== i]\n    data1 = len(data1.loc[data1['Fatal'] =='Yes'])\n    fatal_count.append(data1)\ndataset['Fatal_Count'] = fatal_count\ndataset['Percentage'] = dataset['Fatal_Count']\/dataset['Total'] * 100\ndataset['Index'] = [x for x in range(12)]\ndataset = dataset.set_index('Index')\n\nf, axes = plt.subplots(1, 1, figsize=(24, 10))\nsb.barplot(x = 'Percentage', y = 'Broad.Phase.of.Flight', data = dataset, palette = 'RdBu_r')","0c439257":"#countplot of report status\nf, axes = plt.subplots(1, 1, figsize=(24, 10))\nsb.countplot(x = 'Report.Status', hue = 'Fatal', data = clean_data, palette='Set1')\n\n#Percentage fatality of report status\ndataset = pd.DataFrame(clean_data.groupby('Report.Status')['Fatal'].count())\ndataset = dataset.rename(columns={'Fatal': \"Total\"})\ndataset['Report.Status'] = dataset.index\nfatal_count = []\nfor i in dataset['Report.Status']:\n    data1 = clean_data.loc[clean_data['Report.Status']== i]\n    data1 = len(data1.loc[data1['Fatal'] =='Yes'])\n    fatal_count.append(data1)\ndataset['Fatal_Count'] = fatal_count\ndataset['Percentage'] = dataset['Fatal_Count']\/dataset['Total'] * 100\ndataset['Index'] = [x for x in range(4)]\ndataset = dataset.set_index('Index')\n\nf, axes = plt.subplots(1, 1, figsize=(24, 10))\nsb.barplot(x = 'Percentage', y = 'Report.Status', data = dataset, palette = 'RdBu_r')","f3508911":"#Check for null values\nfor i in LatLong_data.columns:\n    latlong_missing = np.mean(LatLong_data[i].isnull())\n    print('{} - {}% , {}'.format(i, round(data_missing*100), LatLong_data[i].isna().sum()))\n    ","ce2be305":"#Drop the null values\nLatLong_data = LatLong_data.dropna()\n\n#check for null values (if any)\nfor i in LatLong_data.columns:\n    latlong_missing = np.mean(LatLong_data[i].isnull())\n    print('{} - {}% , {}'.format(i, round(data_missing*100), LatLong_data[i].isna().sum()))","9a4011e4":"LatLong_data.describe()","43516a8c":"#Observe that max (Longitude) = 435.833334, value(s) that exist beyond the possible range of Longitude \n#Latitude: -90 to 90\n#Longtitude: -180 to 180 \n\n#Remove the anomaly\n\nlatrange = LatLong_data[(LatLong_data['Latitude'] >= 90) | (LatLong_data['Latitude'] <= -90)].index\nlongrange = LatLong_data[(LatLong_data['Longitude'] >= 180) | (LatLong_data['Longitude'] <= -180)].index\nLatLong_data.drop(latrange, inplace = True)\nLatLong_data.drop(longrange, inplace = True)\n\nLatLong_data.describe() #Check","561145ff":"#scatter plot to visualize the location of the accidents\/incidents\n\nsb.set_style(\"darkgrid\")\nf, axes = plt.subplots(1, 1, figsize = (24, 14))\nsb.scatterplot(x = 'Longitude', y = 'Latitude', data = LatLong_data)","712b9411":"#scatter plot to visualize the location of the accidents\/incidents that are fatal and non-fatal\n\nf, axes = plt.subplots(1, 1, figsize = (24, 14))\nsb.scatterplot(x = 'Longitude', y = 'Latitude', hue = 'Fatal', data = LatLong_data)","614ce6d3":"from sklearn.model_selection import train_test_split\nfrom sklearn.preprocessing import LabelEncoder\nfrom sklearn.preprocessing import OrdinalEncoder\nfrom sklearn.feature_selection import SelectKBest\nfrom sklearn.feature_selection import chi2\nfrom sklearn.feature_selection import mutual_info_classif","7a6ad2f7":"#Allocating features \/ target variable\nX = pd.DataFrame(clean_data[['Month',              \n                             'Aircraft.Damage',     \n                             'Make',\n                             'Amateur.Built',\n                             'Number.of.Engines',\n                             'Engine.Type',\n                             'Purpose.of.Flight',\n                             'Weather.Condition',\n                             'Broad.Phase.of.Flight',\n                             'Report.Status',]])\n\ny = pd.DataFrame(clean_data[\"Fatal\"]) #Target Variable\n\n# prepare input data\ndef prepare_inputs(X_train, X_test):\n    oe = OrdinalEncoder()\n    oe.fit(X_train)\n    X_train_enc = oe.transform(X_train)\n    X_test_enc = oe.transform(X_test)\n    return X_train_enc, X_test_enc\n\n# prepare target\ndef prepare_targets(y_train, y_test):\n    le = LabelEncoder()\n    le.fit(y_train.values.ravel())\n    y_train_enc = le.transform(y_train)\n    y_test_enc = le.transform(y_test)\n    return y_train_enc, y_test_enc\n\n#Split randomly into train and test sets\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.3, random_state = 42)\n\n# prepare input data\nX_train_enc, X_test_enc = prepare_inputs(X_train, X_test)\n\n# prepare output data\ny_train_enc, y_test_enc = prepare_targets(y_train, y_test)","bad0b841":"def select_features(X_train, y_train, X_test):\n    fs = SelectKBest(score_func=chi2, k='all')\n    fs.fit(X_train, y_train)\n    X_train_fs = fs.transform(X_train)\n    X_test_fs = fs.transform(X_test)\n    return X_train_fs, X_test_fs, fs\n\n# feature selection\nX_train_fs, X_test_fs, fs = select_features(X_train_enc, y_train_enc, X_test_enc)\n\n# what are scores for the features\nfor i in range(len(fs.scores_)):\n    print('Feature %d: %f' % (i, fs.scores_[i]))\n    \n# plot the scores  \nplt.bar([i for i in range(len(fs.scores_))], fs.scores_)","202a2838":"def select_features(X_train, y_train, X_test):\n    fs = SelectKBest(score_func=mutual_info_classif, k='all')\n    fs.fit(X_train, y_train)\n    X_train_fs = fs.transform(X_train)\n    X_test_fs = fs.transform(X_test)\n    return X_train_fs, X_test_fs, fs\n\n# feature selection\nX_train_fs, X_test_fs, fs = select_features(X_train_enc, y_train_enc, X_test_enc)\n\n# what are scores for the features\nfor i in range(len(fs.scores_)):\n    print('Feature %d: %f' % (i, fs.scores_[i]))\n    \n# plot the scores  \nplt.bar([i for i in range(len(fs.scores_))], fs.scores_)","20d0a8e1":"from sklearn.linear_model import LogisticRegression\nfrom sklearn.metrics import accuracy_score\nfrom sklearn.metrics import confusion_matrix","836a313c":"# fit the model\nmodel = LogisticRegression(solver='lbfgs', max_iter=1000)\nmodel.fit(X_train_enc, y_train_enc)\n\n# evaluate the model\ny_test_pred = model.predict(X_test_enc)\ny_train_pred = model.predict(X_train_enc)\n\n# evaluate predictions\naccuracy_test = accuracy_score(y_test_enc, y_test_pred)\naccuracy_train = accuracy_score(y_train_enc, y_train_pred)\nprint(\"Goodness of fit for model using ALL Features\")\nprint(\"Classification Accuracy (train dataset) :\\t %.2f\" %(accuracy_train*100))\nprint(\"Classification Accuracy (test dataset) :\\t %.2f\" %(accuracy_test*100))\n\n#Plotting a heatmap\nf, axes = plt.subplots(1, 2, figsize=(12, 4))\nsb.heatmap(confusion_matrix(y_train_enc, y_train_pred),\n           annot = True, fmt=\".0f\", annot_kws={\"size\": 18}, ax = axes[0])\nsb.heatmap(confusion_matrix(y_test_enc, y_test_pred), \n           annot = True, fmt=\".0f\", annot_kws={\"size\": 18}, ax = axes[1])\n\naxes[0].set_title(\"Train\")\naxes[1].set_title(\"Test\")","c5ec4046":"def select_features(X_train, y_train, X_test):\n    fs = SelectKBest(score_func=chi2, k=4)\n    fs.fit(X_train, y_train)\n    X_train_fs = fs.transform(X_train)\n    X_test_fs = fs.transform(X_test)\n    return X_train_fs, X_test_fs\n\n# feature selection\nX_train_fs, X_test_fs = select_features(X_train_enc, y_train_enc, X_test_enc)\n\n#fit the model\nmodel = LogisticRegression(solver='lbfgs', max_iter=1000)\nmodel.fit(X_train_fs, y_train_enc)\n\n# evaluate the model\ny_test_pred = model.predict(X_test_fs)\ny_train_pred = model.predict(X_train_fs)\n\n# evaluate predictions\naccuracy_test = accuracy_score(y_test_enc, y_test_pred)\naccuracy_train = accuracy_score(y_train_enc, y_train_pred)\nprint(\"Goodness of fit for model using Chi-Squared selected features\")\nprint(\"Classification Accuracy (train dataset) :\\t %.2f\" %(accuracy_train*100))\nprint(\"Classification Accuracy (test dataset) :\\t %.2f\" %(accuracy_test*100))\n\n#Plotting a heatmap\nf, axes = plt.subplots(1, 2, figsize=(12, 4))\nsb.heatmap(confusion_matrix(y_train_enc, y_train_pred),\n           annot = True, fmt=\".0f\", annot_kws={\"size\": 18}, ax = axes[0])\nsb.heatmap(confusion_matrix(y_test_enc, y_test_pred), \n           annot = True, fmt=\".0f\", annot_kws={\"size\": 18}, ax = axes[1])\n\naxes[0].set_title(\"Train\")\naxes[1].set_title(\"Test\")","9f9fac4d":"def select_features(X_train, y_train, X_test):\n    fs = SelectKBest(score_func=mutual_info_classif, k=4)\n    fs.fit(X_train, y_train)\n    X_train_fs = fs.transform(X_train)\n    X_test_fs = fs.transform(X_test)\n    return X_train_fs, X_test_fs\n\n# feature selection\nX_train_fs, X_test_fs = select_features(X_train_enc, y_train_enc, X_test_enc)\n\n# fit the model\nmodel = LogisticRegression(solver='lbfgs')\nmodel.fit(X_train_fs, y_train_enc)\n\n# evaluate the model\ny_test_pred = model.predict(X_test_fs)\ny_train_pred = model.predict(X_train_fs)\n\n# evaluate predictions\naccuracy_test = accuracy_score(y_test_enc, y_test_pred)\naccuracy_train = accuracy_score(y_train_enc, y_train_pred)\nprint(\"Goodness of fit for model using Mutual Info selected features\")\nprint(\"Classification Accuracy (train dataset) :\\t %.2f\" %(accuracy_train*100))\nprint(\"Classification Accuracy (test dataset) :\\t %.2f\" %(accuracy_test*100))\n\n#Plotting a heatmap\nf, axes = plt.subplots(1, 2, figsize=(12, 4))\nsb.heatmap(confusion_matrix(y_train_enc, y_train_pred),\n           annot = True, fmt=\".0f\", annot_kws={\"size\": 18}, ax = axes[0])\nsb.heatmap(confusion_matrix(y_test_enc, y_test_pred), \n           annot = True, fmt=\".0f\", annot_kws={\"size\": 18}, ax = axes[1])\n\naxes[0].set_title(\"Train\")\naxes[1].set_title(\"Test\")","b78be194":"from sklearn.ensemble import RandomForestRegressor\nfrom sklearn.model_selection import train_test_split\npd.set_option('display.max_column',90)\n\nforest_data = pd.DataFrame(clean_data[['Month', \n                                       'Aircraft.Damage', \n                                       'Make', \n                                       'Amateur.Built', \n                                       'Number.of.Engines',\n                                       'Engine.Type', \n                                       'Purpose.of.Flight', \n                                       'Weather.Condition', \n                                       'Broad.Phase.of.Flight',\n                                       'Report.Status', \n                                       'Fatal']])\n\nfeatures = pd.get_dummies(forest_data)\nfeatures","43b47be1":"numeric_cols = [col for col in features if features[col].dtype.kind != 'O']\n# Positive is 2, Negative is 1 since dataframe +=1\n# Making it so no values will divide by 0 later\nfeatures[numeric_cols] += 1","2adaf044":"# Labels are the values we want to predict\nlabels = np.array(features['Fatal_Yes'])\n\n# Remove the labels from the features\n# axis 1 refers to the columns\nfeatures = features.drop(['Fatal_No', 'Fatal_Yes'], axis = 1)\n\n# Saving feature names for later use\nfeature_list = list(features.columns)\n\n# Convert to numpy array\nfeatures = np.array(features)","80c05b48":"# Split the data into training and testing sets \ntrain_features, test_features, train_labels, test_labels = train_test_split(features, labels, \n                                                                            test_size = 0.3, random_state = 42)\n\nprint('Training Features Shape:', train_features.shape)\nprint('Training Labels Shape:', train_labels.shape)\nprint('Testing Features Shape:', test_features.shape)\nprint('Testing Labels Shape:', test_labels.shape)\n                                                        \n","e5556986":"# Instantiate model with 100 decision trees \nregressor = RandomForestRegressor(n_estimators=100, random_state= 42)\n\n# Train the model on training data\nregressor.fit(train_features, train_labels)  ","de2e5edb":"train_predictions = regressor.predict(train_features)\n\n# Calculate the absolute errors\nerrors = abs(train_predictions - train_labels)\n\n# Calculate mean absolute percentage error (MAPE)\nmape = 100 * (errors \/ train_labels)\n\n# Calculate and display accuracy\naccuracy = 100 - np.mean(mape)\nprint('Train Accuracy:', round(accuracy, 2), '%')","cf637dd4":"predictions = regressor.predict(test_features)\n\n# Calculate the absolute errors\nerrors = abs(predictions - test_labels)\n\n# Calculate mean absolute percentage error (MAPE)\nmape = 100 * (errors \/ test_labels)\n\n# Calculate and display accuracy\naccuracy = 100 - np.mean(mape)\nprint('Test Accuracy:', round(accuracy, 2), '%')","82bce4ac":"importances = list(regressor.feature_importances_)\n\n# List of tuples with variable and importance\nfeature_importances = [(features, round(importance, 4)) for features, \n                       importance in zip(feature_list, importances)]\n\n# Sort the feature importances by most important first\nfeature_importances = sorted(feature_importances, key = lambda x: x[1], reverse = True)\n\n# Print out the feature and importances \n[print('Variable: {:20} Importance: {}'.format(*pair)) for pair in feature_importances]","53d0a7d4":"# list of x locations for plotting\nx_values = list(range(len(importances)))\n\n# Make a bar chart\nf, axes = plt.subplots(1, 1, figsize = (24,12))\nplt.bar(x_values, importances, orientation = 'vertical')\n\n# Tick labels for x axis\nplt.xticks(x_values, feature_list, rotation='vertical')\n\n# Axis labels and title\nplt.ylabel('Importance')\nplt.xlabel('Variable')\nplt.title('Variable Importances')","bc1f489f":"# New random forest with only the most important variables\nregressor_most_important = RandomForestRegressor(n_estimators= 100, random_state=42)\n\n# Extract the two most important features\nimportant_indices = [feature_list.index('Aircraft.Damage_Substantial')]\ntrain_important = train_features[:, important_indices]\ntest_important = test_features[:, important_indices]\n\n# Train the random forest\nregressor_most_important.fit(train_important, train_labels)\n\n# Make predictions and determine the error\npredictions = regressor_most_important.predict(test_important)","499f5671":"errors = abs(train_predictions - train_labels)\n\n# Calculate mean absolute percentage error (MAPE)\nmape = 100 * (errors \/ train_labels)\naccuracy = 100 - np.mean(mape)\nprint('Train Accuracy:', round(accuracy, 2), '%')","3ac36ca5":"errors = abs(predictions - test_labels)\n\n# Display the performance metrics\nmape = np.mean(100 * (errors \/ test_labels))\naccuracy = 100 - mape\nprint('Accuracy:', round(accuracy, 2), '%.')","0bfd4a6e":"#### Most Important Variable to Predict - train data","f67e323b":"From the above plots, we observe that `Landing` and `Taxi` phase has exceptionally low fatality rate. `Maneuvering` and `Unknown` phases of flight has the highest fatality rates.","28aa26ba":"#### ANALYSIS OF PURPOSE OF FLIGHT","137f937e":"#### Convert Data to Arrays\n\nLabel - Data we want to Predict <br>\nFeatures - Variables to used for prediction <br>\nConvert to Numpy - in order for this algorithm to work","cd4463cf":"From the above plot, we observe that the number of accidents reported has been decreasing over the years, however this is largely due to the number of non-fatal accidents decreasing as the number of fatal accidents still remain approximately the same. We can also observe that the fatality rate from 1948-1979 is very high, this is an anomaly as very few accidents were reported during that period as the aviation industry was still developing.","8ab1ae32":"From the above plots, we observe that `CESSNA` has the highest count of accident, with one of the lowest fatality percentage. `BOEING` has an exceptionally low count of fatality percentage while `BEECH`, `MOONEY` and `ROBINSON` has the highest fatality percentages. However, accident count for `BOEING`, `BEECH`, `MOONEY` and `ROBINSON` are the lowest and the statistic might be biased given the smaller sample count. It is still worthy to note that `BOEING` has the low accident and fatality rate.","551a2e6e":"##### VMC - Visual Meteorological Conditions\n##### IMC - Instrument Meteorological Conditions\n##### UNK - Unknown\n\nFrom the above plots, we observe that flight in `VMC` has the highest accident count. However, this may be because `VMC` is the most common weather condition. `VMC` also has an exceptionally low fatality rate which is expectedly due to the ease of flight and management of adversity in a mild and safer weather condition. \n\nThe fatality rate is higher in `IMC` or `UNK` weather condition. Logically, flying and managing crisis in worse weather condition is likely to be a challenge and hence explains the higher rate of fatality. Rate of fatality can observed to be highly related to the weather condition. ","eeabe2e5":"#### FATILITY RATES SORTED BY MONTH","b403e0ac":"#### Most Important Variable to Predict - test data","6f917e19":"#### ANALYSIS OF AMATEUR BUILT","727e6ee5":"From the above plots, we observe that aircrafts with `1 engine` has the highest accident count. However, this may be because `1 engine` is the most common in aircrafts. Another observation is that as the `number of engines` increases from `0 to 2`, the fatality rate increases as well. However this observation may be biased due to significant difference in sample counts.","b9864835":"#### Use the forest's predict method on the test data\nTo put our predictions in perspective, we can calculate an accuracy using the mean average percentage error subtracted from 100 %.","59a3d0cb":"# MA0218 Mini Project \n---\n#### Selected Dataset 4: `Aviation Accident Database`\n#### Problem Statement: `Predicting the Probability of Fatality in Aviation Accident\/Incident using classification modelling.`\n#### Designed By: `Group MA8`\n","10867cc8":"---\n# Data Exploration and Analysis","f9f79647":"#### Model Built Using Chi-Squared Features\n\nWe can use the chi-squared test to score the features and select the four most relevant features.","c6039bfc":"### Categorical Feature Selection\n\nUsing OriginalEncoder and LabelEncode to encode each variable to integers","a6f96c84":"#### 2. Mutual Information Feature Selection\nMutual information from the field of information theory is the application of information gain (typically used in the construction of decision trees) to feature selection.","82342015":"From the plots above, we observe that the points shape the world map. Expected since the axis is latitude by longitude. Majority of accidents reported are in the area of the United States. Another observation is that majority of the accidents outside of the United States resulted in fatality. This is coherent with our observation from analysis of Report Status whereby a `Foreign` report on an accident is likely to be fatal.\n\n### Conclusion:  \n#### The possible factors that are likely to affect the fatality of an accident\/incident: \n`Aircraft Damage`, `Purpose of Flight`, `Weather Conditions`, `Broad phase of flight` and `Report Status`.","f52e8fe6":"**Chi2:** it can be seen that Features 1,3,6 and 7 are the four best variables to choose from.\n\nThese features are: `Aircraft.Damage`, `Amateur.Built`, `Purpose.of.Flight`, `Weather.Condition` respectively.","c5100817":"#### Considering the significance of null values and our initial judgement on the importance of each variable, we proceed to clean the data with the following variables of interest:\n`Event.Date`, `Latitude`, `Longtitude`, `Injury Severity`, `Aircraft Damage`, `Make`, `Amateur Built`, `Number of Engines`, `Engine Type`, `Purpose of Flight`, `Weather Condition`, `Broad Phase of Flight`, `Report Status`","cbc3acf9":"#### Model Built Using Mutual Information Features\nWe can repeat the experiment and select the top four features using a mutual information statistic.","f1dc404b":"**Mutual_Info_classif:** it can be seen that Features 1,7,8 and 9 are the four best variables to choose from.\n\nThese features are: `Aircraft.Damage`, `Weather.Condition`, `Broad.Phase.of.Flight`, `Report.Status` respectively.","2affbc6f":"### Natural Forest Regression\n\nReferences: <br>\nhttps:\/\/towardsdatascience.com\/random-forest-in-python-24d0893d51c0","d4d2eb56":"From the above plots, we observe that `Non-amateur built` aircraft have higher counts of accidents which may be due to a significantly higher number and frequency of `Non-amateur built` aircraft flown. `Amateur built` aircraft has a higher fatality rate which may be reasoned with their purpose of build and flight, yet can also be a biased statistic due to the significant difference in sample size. ","7162f391":"#### ANALYSIS OF BROAD PHASE OF FLIGHT","ce3488b0":"#### ANALYSIS OF MAKE","135b7d1d":"#### YEARLY FATALITY COUNT","e3b77fc4":"#### 1. Chi-Squared Feature Selection\nPearson\u2019s chi-squared statistical hypothesis test is an example of a test for independence between categorical variables.","7c73cfb5":"---\n# Data Preparation","30d87b59":"#### TOTAL NUMBER OF ACCIDENTS SORTED BY MONTH","2a6faaaa":"In future implementations of the model, we can remove those variables that have no importance, and the performance will not suffer. Additionally, if we are using a different model(eg: a support vector machine) we could use the random forest feature importances as a feature selection method.","9b50fd41":"#### Use the forest's predict method on the train data\nTo put our predictions in perspective, we can calculate an accuracy using the mean average percentage error subtracted from 100 %.","a6122e63":"#### ANALYSIS OF REPORT STATUS","74377be0":"#### ANALYSIS OF ENGINE TYPE","32bb62d2":"It is interesting to note that the majority of the accidents occur in the months of Jun\/Jul, yet they have the lowest percentage of fatality.\n\nIt is also true for the months where the number of accidents are lower such as the first few months (Jan-June) and last few (July-Dec), yet they have a high percentage of fatality.","216d684c":"#### YEARLY PERCENTAGE OF FATALITY COUNT","3162f9d5":"#### ANALYSIS OF LATITUDE AND LONGITUDE","d5b75f21":"#### Variable Importances\nThe importances returned in Skicit-learn represent how much including a particular variable improves the prediction\n","d7cfb951":"From the above plots, we observe that aircrafts with `Reciprocating` engine type has the highest accident count. However, this may be because `Reciprocating` engine type is the most common in aircrafts. `Turbo Fan` has an exceptionally low fatality rate while `Turbo Prop` has the highest. Nevertheless, this might be biased statistic due to the small sample count for `Turbo Fan` and `Turbo Prop`.","ba746a11":"From the above plots, we observe that aircrafts for purpose of `personal` use has the highest accident count. However, this may be because `personal` use is the most common purpose of flight. `Aerial Application` and `Instructional` has exceptionally low fatality rate, which could be due to the nature of flight and experience of the pilots. `Work use` and `Others` has the highest fatality rates. Nevertheless, this might be biased statistic due to the small sample sizes.","0005d2b4":"From the above plot, we observe that most aircraft suffer substantial aircraft damage after an accident. In a case whereby the aircraft is destroyed, the rate of fatality is higher. Logically, a destroyed aircraft results in higher rate of death.\n\nHowever, there is also high fatal rate when aircraft suffer minor damage, yet a low fatal rate when aircraft suffer substantial damage. This is counter intuitive as we would expect higher rate of death in the case of higher damage to an aircraft. Nevertheless, this might be a biased statistic due to the significant difference in the count.","26be88ed":"#### Comments:\n\nThe classification accuracy of the 3 different models above are shown to be ~87%. They are highly accurate for prediction of fatality. \n\nWe observe that the accuracy of prediction using selected features, either by `Chi-Squared` or `Mutual Info Classification`, is marginally higher then using `all features`. This might indicate that modelling using `all features` might impose a negative effect due to overfitting. ","96620f7a":"---\n# Modelling and Predictions\n\nReference: <br>\nhttps:\/\/machinelearningmastery.com\/feature-selection-with-categorical-data\/","7f6b2488":"#### ANALYSIS OF WEATHER CONDITION","30aecd66":"#### Visualization\n\nSimple bar plot of the feature importances to illustrate the disparities in the relative significance of the variables.","d075133b":"#### Comments:\n\nWith only 1 variable, we were able to achieve an accurate result - slightly more accurate if we were to use all the variables. \n\nThis means that if we were to operate with this model, using variables of importances are sufficient to achieve optimal performance. \n\nIn a production setting, we would need to weigh this effect on accuracy against the number of variables and time required to obtain them. \n\n---","ab623cda":"#### ANALYSIS OF AIRCRAFT DAMAGE","d17326b2":"#### ANALYSIS OF ACCIDENTS OVER THE YEARS","6ddcf4fb":"From the above plots, we observe that `Probable Cause ` report status has highest accident count. However, this might be because a `Probable Cause` report status is most common. A `Factual` report status has the lowest fatality rate . A `Foreign` report status has the highest fatality rates. Nevertheless, this might be biased statistic due to the small sample sizes for `Foreign` and `Factual` reports.","f16946b8":"#### Creating and training the model","27ffe40d":"#### Training and Testing Sets\nWe expect the training features number of columns to match the testing feature number of columns and the number of rows to match for the respective training and testing features and the labels","b610ad56":"---\n# Data Cleaning","4840d0a5":"### Logistic Regression\n#### Modelling with ALL FEATURES","967b76b4":"#### Random forest with only the most important variables\n`Aircraft.Damage_Substantial` to see how the performance compares.","2074a895":"# `THE` `END` `. `","0a7788eb":"#### FATALITY PERCENTAGE SORTED BY MONTH","5f03b6d0":"#### ANALYSIS OF NUMBER OF ENGINES","6e6e4bf9":"### _Data Cleaning completed_ \n#### Datasets to be used for Data Exploration and Analysis:\n`clean_data` and `LatLong_Data` "}}