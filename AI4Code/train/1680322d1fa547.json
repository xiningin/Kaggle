{"cell_type":{"640bc848":"code","fc4d9541":"code","17699894":"code","37f1a6fc":"code","44770753":"code","c30a6398":"code","0ea32ff5":"code","5cb6160a":"code","40910748":"code","158fcbde":"code","dbb02e34":"code","344ea1d6":"code","ea538851":"code","fdfc46dc":"code","77403021":"code","5ecca3e4":"code","b6b25597":"code","2535aabf":"code","1d34d54f":"code","a15e0d62":"code","d593b2ff":"code","a9d8c0b4":"code","700a704e":"code","4153d7f4":"code","fb2a8b60":"code","c575b141":"code","4d84e5b7":"code","779592bd":"code","a2145093":"code","a5cb2eec":"code","06a7b1be":"code","fe7bbd9b":"code","5546100e":"code","7a4c4644":"code","c1479b37":"code","55045f25":"code","73518e58":"code","d2332fce":"code","5eaa710c":"code","ebcd9d94":"markdown","b31c4c14":"markdown","184e2941":"markdown","41eec75e":"markdown","af1dcf4f":"markdown","5329f525":"markdown","53088997":"markdown","b60f721e":"markdown","ae818a76":"markdown","b4c23819":"markdown","5808c8d6":"markdown","618db2f1":"markdown","676e5edb":"markdown","2f73cecd":"markdown","ff8a9fc3":"markdown","fcfe927c":"markdown","373d3c68":"markdown","e458e457":"markdown","482161bc":"markdown","ce0da04e":"markdown","1bb73002":"markdown","06d26923":"markdown","d9ed7cdf":"markdown","87983b82":"markdown","7ef168dd":"markdown","df9956d2":"markdown","c6df2248":"markdown","197153e9":"markdown","1acf3ccd":"markdown","ac45c6e3":"markdown","e0c9e589":"markdown"},"source":{"640bc848":"# essential libraries\nimport json\nimport random\nfrom urllib.request import urlopen\n\n# storing and anaysis\nimport numpy as np\nimport pandas as pd\n\n# visualization\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n# converter\nfrom pandas.plotting import register_matplotlib_converters\nregister_matplotlib_converters()   \n\n# hide warnings\nimport warnings\nwarnings.filterwarnings('ignore')\n\n# html embedding\nfrom IPython.display import Javascript\nfrom IPython.core.display import display\nfrom IPython.core.display import HTML","fc4d9541":"# list files\n !ls ..\/input\/corona-virus-report","17699894":"# importing datasets\nfull_table = pd.read_csv('..\/input\/corona-virus-report\/covid_19_clean_complete.csv', \n                         parse_dates=['Date'])\nfull_table.head()","37f1a6fc":"# dataframe info\nfull_table.info()","44770753":"# checking for missing value\n full_table.isna().sum()","c30a6398":"full_table['Country\/Region'].nunique()","0ea32ff5":"print('these stats are updated to:', full_table['Date'].max())","5cb6160a":"full_table['Country\/Region'].value_counts().head(10)","40910748":"# cases \ncases = ['Confirmed', 'Deaths', 'Recovered', 'Active']\n\n# Active Case = confirmed - deaths - recovered\nfull_table['Active'] = full_table['Confirmed'] - full_table['Deaths'] - full_table['Recovered']\n\n\n# filling missing values \nfull_table[['Province\/State']] = full_table[['Province\/State']].fillna('')\nfull_table[cases] = full_table[cases].fillna(0)","158fcbde":"print ('list of countries', full_table['Country\/Region'].unique())","dbb02e34":"# cases in the ships\nship = full_table[full_table['Province\/State'].str.contains('Grand Princess')|full_table['Country\/Region'].str.contains('Cruise Ship')]\n\n# china and the row\nchina = full_table[full_table['Country\/Region']=='China']\nrow = full_table[full_table['Country\/Region']!='China']\nsweden = full_table[full_table['Country\/Region']=='Sweden']\nitaly = full_table[full_table['Country\/Region']=='Italy']\nuk = full_table[full_table['Country\/Region']=='United Kingdom']\nfrance = full_table[full_table['Country\/Region']=='France']\nbrazil = full_table[full_table['Country\/Region']=='Brazil']\nspain = full_table[full_table['Country\/Region']=='Spain']\nrussia = full_table[full_table['Country\/Region']=='Russia']\npoland = full_table[full_table['Country\/Region']=='Poland']\nUS= full_table[full_table['Country\/Region']=='US']\nnetherlands = full_table[full_table['Country\/Region']=='Netherlands']\ngermany = full_table[full_table['Country\/Region']=='Germany']\n# latest\nfull_latest = full_table[full_table['Date'] == max(full_table['Date'])].reset_index()\nchina_latest = full_latest[full_latest['Country\/Region']=='China']\nSweden_latest = full_latest[full_latest['Country\/Region']=='Sweden']\nItaly_latest = full_latest[full_latest['Country\/Region']=='Italy']\nUK_latest = full_latest[full_latest['Country\/Region']=='United Kingdom']\nFrance_latest = full_latest[full_latest['Country\/Region']=='France']\nBelgium_latest = full_latest[full_latest['Country\/Region']=='Belgium']\nrow_latest = full_latest[full_latest['Country\/Region']!='China']\n\n# latest condensed\nfull_latest_grouped = full_latest.groupby('Country\/Region')['Confirmed', 'Deaths', 'Recovered', 'Active'].sum().reset_index()\nchina_latest_grouped = china_latest.groupby('Province\/State')['Confirmed', 'Deaths', 'Recovered', 'Active'].sum().reset_index()\nrow_latest_grouped = row_latest.groupby('Country\/Region')['Confirmed', 'Deaths', 'Recovered', 'Active'].sum().reset_index()","344ea1d6":"temp = full_table.groupby(['Country\/Region', 'Province\/State'])['Confirmed', 'Deaths', 'Recovered', 'Active'].max()\n# temp.style.background_gradient(cmap='Reds')\ntemp.tail()","ea538851":"thresold = 1000 # thresold value of confirmed cases based on US initial count","fdfc46dc":"\ndf_sweden = sweden.groupby('Date')['Confirmed', 'Deaths', 'Recovered', 'Active'].sum().reset_index()\ndf_sweden = df_sweden[df_sweden['Confirmed'] > thresold].reset_index()\n\ny_sweden = df_sweden['Confirmed'].values # transform the column to differentiate into a numpy array\n\nderiv_y_sweden = np.diff(y_sweden) # now we can get the derivative as a new numpy array\n\noutput_sweden = np.transpose(deriv_y_sweden)\n#now add the numpy array to our dataframe\ndf_sweden['ContagionRate'] = pd.Series(output_sweden)\n\n","77403021":"plt.figure(figsize= (5,10))\nplt.subplot(211)\nplt.plot(df_sweden['Date'],df_sweden['Confirmed'], color = 'g') #trend cases\nplt.title('Cases over time')\nplt.ylabel('number of cases')\nplt.xticks(df_sweden['Date'],\" \")\nplt.subplot(212)\nplt.plot(df_sweden['Date'],df_sweden['ContagionRate'], color = 'r') #trend deaths\nplt.title('Spread rate over time')\nplt.ylabel('Rate (cases % increase)')\nplt.xticks(rotation=90)\n\nplt.suptitle('Virus spread over time Sweden')\nplt.show()","5ecca3e4":"df_italy = italy.groupby(['Date']).mean().reset_index()\ndf_italy = df_italy[df_italy['Confirmed'] > thresold].reset_index()\n\ny_italy = df_italy['Confirmed'].values # transform the column to differentiate into a numpy array\n\nderiv_y_italy = np.diff(y_italy) # now we can get the derivative as a new numpy array\n\noutput_italy = np.transpose(deriv_y_italy)\n#now add the numpy array to our dataframe\ndf_italy['ContagionRate'] = pd.Series(output_italy)\n","b6b25597":"plt.figure(figsize= (5,10))\nplt.subplot(211)\nplt.plot(df_italy['Date'],df_italy['Confirmed'], color = 'g') #trend cases\nplt.title('Cases over time')\nplt.ylabel('number of cases')\nplt.xticks(df_italy['Date'],\" \")\nplt.subplot(212)\nplt.plot(df_italy['Date'],df_italy['ContagionRate'], color = 'r') #trend deaths\nplt.title('Spread rate over time')\nplt.ylabel('Rate (cases % increase)')\nplt.xticks(rotation=90)\n\nplt.suptitle('Virus spread over time Italy')\nplt.show()","2535aabf":"df_china = china.groupby('Date')['Confirmed', 'Deaths', 'Recovered', 'Active'].sum().reset_index()\ndf_china = df_china[df_china['Confirmed'] > thresold].reset_index()\n\ny_china = df_china['Confirmed'].values # transform the column to differentiate into a numpy array\n\nderiv_y_china = np.diff(y_china) # now we can get the derivative as a new numpy array\n\noutput_china = np.transpose(deriv_y_china)\n#now add the numpy array to our dataframe\ndf_china['ContagionRate'] = pd.Series(output_china)\ndf_china = df_china[df_china['ContagionRate'] < 4500] # clean the chinese data from the suspicious \"spike\" of 12\/2\n\n","1d34d54f":"df_poland = poland.groupby('Date')['Confirmed', 'Deaths', 'Recovered', 'Active'].sum().reset_index()\ndf_poland = df_poland[df_poland['Confirmed'] > thresold].reset_index()\ny_poland = df_poland['Confirmed'].values # transform the column to differentiate into a numpy array\n\nderiv_y_poland = np.diff(y_poland) # now we can get the derivative as a new numpy array\n\noutput_poland = np.transpose(deriv_y_poland)\n#now add the numpy array to our dataframe\ndf_poland['ContagionRate'] = pd.Series(output_poland)\n","a15e0d62":"df_france = france.groupby('Date')['Confirmed', 'Deaths', 'Recovered', 'Active'].sum().reset_index()\ndf_france = df_france[df_france['Confirmed'] > thresold].reset_index()\ny_france = df_france['Confirmed'].values # transform the column to differentiate into a numpy array\n\nderiv_y_france = np.diff(y_france) # now we can get the derivative as a new numpy array\n\noutput_france = np.transpose(deriv_y_france)\n#now add the numpy array to our dataframe\ndf_france['ContagionRate'] = pd.Series(output_france)\npopulation_france = 67064000","d593b2ff":"df_uk = uk.groupby('Date')['Confirmed', 'Deaths', 'Recovered', 'Active'].sum().reset_index()\ndf_uk = df_uk[df_uk['Confirmed'] > thresold].reset_index()\ny_uk = df_uk['Confirmed'].values # transform the column to differentiate into a numpy array\n\nderiv_y_uk = np.diff(y_uk) # now we can get the derivative as a new numpy array\n\noutput_uk = np.transpose(deriv_y_uk)\n#now add the numpy array to our dataframe\ndf_uk['ContagionRate'] = pd.Series(output_uk)\n","a9d8c0b4":"df_us = US.groupby('Date')['Confirmed', 'Deaths', 'Recovered', 'Active'].sum().reset_index()\ndf_us = df_us[df_us['Confirmed'] > thresold].reset_index()\n\ny_us = df_us['Confirmed'].values # transform the column to differentiate into a numpy array\n\nderiv_y_us = np.diff(y_us) # now we can get the derivative as a new numpy array\n\noutput_us = np.transpose(deriv_y_us)\n#now add the numpy array to our dataframe\ndf_us['ContagionRate'] = pd.Series(output_us)","700a704e":"df_germany = germany.groupby('Date')['Confirmed', 'Deaths', 'Recovered', 'Active'].sum().reset_index()\ndf_germany = df_germany[df_germany['Confirmed'] > thresold].reset_index()\n\ny_germany = df_germany['Confirmed'].values # transform the column to differentiate into a numpy array\n\nderiv_y_germany = np.diff(y_germany) # now we can get the derivative as a new numpy array\n\noutput_germany = np.transpose(deriv_y_germany)\n#now add the numpy array to our dataframe\ndf_germany['ContagionRate'] = pd.Series(output_germany)","4153d7f4":"df_brazil = brazil.groupby('Date')['Confirmed', 'Deaths', 'Recovered', 'Active'].sum().reset_index()\ndf_brazil = df_brazil[df_brazil['Confirmed'] > thresold].reset_index()\n\ny_brazil = df_brazil['Confirmed'].values # transform the column to differentiate into a numpy array\n\nderiv_y_brazil = np.diff(y_brazil) # now we can get the derivative as a new numpy array\n\noutput_brazil = np.transpose(deriv_y_brazil)\n#now add the numpy array to our dataframe\ndf_brazil['ContagionRate'] = pd.Series(output_brazil)\n","fb2a8b60":"df_netherlands = netherlands.groupby('Date')['Confirmed', 'Deaths', 'Recovered', 'Active'].sum().reset_index()\ndf_netherlands = df_netherlands[df_netherlands['Confirmed'] > thresold].reset_index()\n\ny_netherlands = df_netherlands['Confirmed'].values # transform the column to differentiate into a numpy array\n\nderiv_y_netherlands = np.diff(y_netherlands) # now we can get the derivative as a new numpy array\n\noutput_netherlands = np.transpose(deriv_y_netherlands)\n#now add the numpy array to our dataframe\ndf_netherlands['ContagionRate'] = pd.Series(output_netherlands)\n","c575b141":"df_russia = russia.groupby('Date')['Confirmed', 'Deaths', 'Recovered', 'Active'].sum().reset_index()\ndf_russia = df_russia[df_russia['Confirmed'] > thresold].reset_index()\n\ny_russia = df_russia['Confirmed'].values # transform the column to differentiate into a numpy array\n\nderiv_y_russia = np.diff(y_russia) # now we can get the derivative as a new numpy array\n\noutput_russia = np.transpose(deriv_y_russia)\n#now add the numpy array to our dataframe\ndf_russia['ContagionRate'] = pd.Series(output_russia)","4d84e5b7":"df_spain = spain.groupby('Date')['Confirmed', 'Deaths', 'Recovered', 'Active'].sum().reset_index()\ndf_spain = df_spain[df_spain['Confirmed'] > thresold].reset_index()\n\ny_spain = df_spain['Confirmed'].values # transform the column to differentiate into a numpy array\n\nderiv_y_spain = np.diff(y_spain) # now we can get the derivative as a new numpy array\n\noutput_spain = np.transpose(deriv_y_spain)\n#now add the numpy array to our dataframe\ndf_spain['ContagionRate'] = pd.Series(output_spain)\n","779592bd":"X_spain = df_spain.index.values\ny_spain = df_spain['Confirmed'].values\n#X_china = X_china[0:10]\n#y_china = y_china[0:10]\n#y_china","a2145093":"X_us = df_us.index.values\ny_us = df_us['Confirmed'].values\n\nX_uk = df_uk.index.values\ny_uk = df_uk['Confirmed'].values","a5cb2eec":"\nfrom scipy.optimize import curve_fit\n\n\n\n# I define the exponential function\ndef func(x, a, b, c): \n    return a * np.exp(-b * x) + c\n\n#do the fit!\n#popt_us, pcov_us = curve_fit(func, X_us, y_us)\n#popt_spain, pcov_spain = curve_fit(func, X_spain, y_spain, maxfev=1200)\n#popt_uk, pcov_uk = curve_fit(func, X_uk, y_uk)\n\n","06a7b1be":"th_china = df_china['Date'].iloc[0]\nprint('China:', th_china )\nth_italy = df_italy['Date'].iloc[0]\nprint('Italy:', th_italy )\nth_germany = df_germany['Date'].iloc[0]\nprint('Germany:', th_germany )\nth_us = df_us['Date'].iloc[0]\nprint('USA:', th_us )\nth_uk = df_uk['Date'].iloc[0]\nprint('UK:', th_uk )\nth_sweden = df_sweden['Date'].iloc[0]\nprint('Sweden:', th_sweden )\nth_brazil = df_brazil['Date'].iloc[0]\nprint('Brazil:', th_brazil )\nth_spain = df_spain['Date'].iloc[0]\nprint('Spain:', th_spain )\nth_russia = df_russia['Date'].iloc[0]\nprint('Russia:', th_russia )\nth_nl = df_netherlands['Date'].iloc[0]\nprint('Netherlands:', th_nl )\nth_pol = df_poland['Date'].iloc[0]\nprint('Poland:', th_pol) \nth_fr = df_france['Date'].iloc[0]\nprint('France:', th_fr)\nthdates = [th_china, th_sweden, th_italy, th_uk,th_pol, th_germany, th_brazil, th_us, th_spain, th_nl, th_fr]\n\n","fe7bbd9b":"population_russia = 145934462","5546100e":"plt.figure(figsize=(18, 18))\n\nplt.subplot(221)\n\nplt.plot(df_china.index, df_china['Confirmed'], label = 'China (2020-01-25)')\nplt.plot(df_sweden.index, df_sweden['Confirmed'], label ='Sweden (2020-03-15)')\n\nplt.plot(df_italy.index, df_italy['Confirmed'], label = 'Italy (2020-02-29)')\nplt.plot(df_uk.index, df_uk['Confirmed'], label = 'UK (2020-03-14)')\nplt.plot(df_germany.index, df_germany['Confirmed'], label ='Germany (2020-03-08)')\nplt.plot(df_spain.index, df_spain['Confirmed'], label = 'Spain (2020-03-09)')\nplt.plot(df_russia.index, df_russia['Confirmed'], label ='Russia (1000 reached: 2020-03-27)')\nplt.plot(df_brazil.index, df_brazil['Confirmed'], label = 'Brazil (1000 reached: 2020-03-21)')\nplt.plot(df_us.index, df_us['Confirmed'], color = 'k', label = 'USA (1000 reached: 2020-03-11)')\n#plt.plot(X_spain, func(X_spain, *popt_spain), '--', label='Spain fit: a=%5.3f, b=%5.3f, c=%5.3f' % tuple(popt_spain))\n#plt.plot(X_us, func(X_us, *popt_us), '--', label='US fit: a=%5.3f, b=%5.3f, c=%5.3f' % tuple(popt_us))\n#plt.plot(X_uk, func(X_uk, *popt_uk), '--', label='UK fit: a=%5.3f, b=%5.3f, c=%5.3f' % tuple(popt_uk))\nplt.xlim(0, 150)\nplt.ylim(0, 3500000)\nplt.ylabel('Number of cases', fontsize=14)\nplt.xlabel('Days from reaching the thresold (1000 cases)', fontsize = 14)\nplt.legend(bbox_to_anchor=(0., 1.02, 1., .102), loc=3, ncol=2, mode=\"expand\", borderaxespad=0.)\nplt.subplot(222)\nplt.plot(df_sweden.index, df_sweden['Confirmed']\/10088474, label ='Sweden (1000 reached: 2020-03-15)')\nplt.plot(df_italy.index, df_italy['Confirmed']\/60483973,'--', label = 'Italy (1000 reached: 2020-02-29)')\nplt.plot(df_russia.index, df_russia['Confirmed']\/population_russia,'--', label = 'Russia (1000 reached: 2020-03-27)')\n#plt.plot(df_poland.index, df_poland['Confirmed']\/37115000 ,':', label = 'Poland(1000 reached: 2020-03-25)')\nplt.plot(df_france.index, df_france['Confirmed']\/population_france ,':', label = 'France(1000 reached: 2020-03-08)')\nplt.plot(df_uk.index, df_uk['Confirmed']\/66575226,':', label = 'UK (1000 reached: 2020-03-14)')\nplt.plot(df_us.index, df_us['Confirmed']\/328953020, color = 'k', label = 'USA (1000 reached: 2020-03-11)')\nplt.plot(df_brazil.index, df_brazil['Confirmed']\/212434518,color = 'orange', label = 'Brazil (1000 reached: 2020-03-21)')\n#plt.plot(X_spain, func(X_spain, *popt_spain), '--', label='Spain fit: a=%5.3f, b=%5.3f, c=%5.3f' % tuple(popt_spain))\n#plt.plot(X_us, func(X_us, *popt_us), '--', label='US fit: a=%5.3f, b=%5.3f, c=%5.3f' % tuple(popt_us))\n#plt.plot(X_fr, func(X_fr, *popt_fr), '--', label='France fit: a=%5.3f, b=%5.3f, c=%5.3f' % tuple(popt_fr))\nplt.xlim(0, 150)\n#plt.ylim(0, 250000)\n#plt.xscale('log')\nplt.yscale('log')\nplt.ylabel('Log num. cases\/ population', fontsize=14)\nplt.xlabel('Days from reaching the thresold (1000 cases)', fontsize = 14)\nplt.legend\n\nplt.title('International comparison of cases growth', fontsize = 20)\nplt.legend(bbox_to_anchor=(1.05, 1), loc='upper left', borderaxespad=0.)\n\n\nplt.show()","7a4c4644":"plt.figure(figsize=(6, 6))\n\nplt.plot(df_sweden.index, df_sweden['ContagionRate'], label ='Sweden (1000 reached: 2020-03-15)')\nplt.plot(df_italy.index, df_italy['ContagionRate'], label = 'Italy (1000 reached: 2020-02-29)')\n#plt.plot(df_uk.index, df_uk['ContagionRate'], label = 'UK (1000 reached: 2020-03-14)')\nplt.plot(df_spain.index, df_spain['ContagionRate'], label = 'Spain (1000 reached: 2020-03-09)')\n#plt.plot(df_germany.index, df_germany['ContagionRate'], label ='Germany (2020-03-08)')\n#plt.plot(df_netherlands.index, df_netherlands['ContagionRate'], label ='Netherlands (1000 reached: 2020-03-15)')\n#plt.plot(df_us.index, df_us['ContagionRate'], color = 'k', label = 'USA (1000 reached: 2020-03-11)')\n#plt.plot(X_spain, func(X_spain, *popt_spain), '--', label='Spain fit: a=%5.3f, b=%5.3f, c=%5.3f' % tuple(popt_spain))\n#plt.plot(X_us, func(X_us, *popt_us), '--', label='US fit: a=%5.3f, b=%5.3f, c=%5.3f' % tuple(popt_us))\n#plt.plot(X_fr, func(X_fr, *popt_fr), '--', label='France fit: a=%5.3f, b=%5.3f, c=%5.3f' % tuple(popt_fr))\n#plt.xlim(0, 50)\n#plt.ylim(0, 250000)\n#plt.xscale('log')\n#plt.yscale('log')\nplt.ylabel('Daily new cases (COVID-19 spread rate)', fontsize=14)\nplt.ylim(0, 10000)\nplt.xlabel('Days from reaching the thresold (1000 cases)', fontsize = 14)\nplt.legend\n\nplt.title('International comparison of contagion rates', fontsize = 20)\nplt.legend(bbox_to_anchor=(1.05, 1), loc='upper left', borderaxespad=0.)\n\n\nplt.show()","c1479b37":"df_italy_clean = df_italy[df_italy['ContagionRate'] > 100] \ndf_uk_clean = df_uk[df_uk['ContagionRate'] > 100] \ndf_us_clean = df_us[df_us['ContagionRate'] > 100] \ndf_spain_clean = df_spain[df_spain['ContagionRate'] > 100] \ndf_sweden_clean = df_sweden[df_sweden['ContagionRate'] > 100] \ndf_france_clean = df_germany[df_germany['ContagionRate'] > 100] ","55045f25":"plt.figure(figsize=(6, 6))\n\nplt.plot(df_sweden_clean['Confirmed'], df_sweden_clean['ContagionRate'], label ='Sweden (1000 reached: 2020-03-15)')\nplt.plot(df_italy_clean['Confirmed'], df_italy_clean['ContagionRate'], label = 'Italy (1000 reached: 2020-02-29)')\n#plt.plot(df_uk_clean['Confirmed'], df_uk_clean['ContagionRate'], label = 'UK (1000 reached: 2020-03-14)')\nplt.plot(df_france_clean['Confirmed'], df_france_clean['ContagionRate'], label = 'France (1000 reached: 2020-03-08)')\n#plt.plot(df_netherlands.index, df_netherlands['ContagionRate'], label ='Netherlands (1000 reached: 2020-03-15)')\nplt.plot(df_us_clean['Confirmed'], df_us_clean['ContagionRate'], color = 'k', label = 'USA (1000 reached: 2020-03-11)')\n#plt.plot(X_spain, func(X_spain, *popt_spain), '--', label='Spain fit: a=%5.3f, b=%5.3f, c=%5.3f' % tuple(popt_spain))\n#plt.plot(X_us, func(X_us, *popt_us), '--', label='US fit: a=%5.3f, b=%5.3f, c=%5.3f' % tuple(popt_us))\n#plt.plot(X_fr, func(X_fr, *popt_fr), '--', label='France fit: a=%5.3f, b=%5.3f, c=%5.3f' % tuple(popt_fr))\n#plt.xlim(0, 50)\n#plt.ylim(0, 250000)\nplt.xscale('log')\nplt.yscale('log')\nplt.ylabel('Daily new cases', fontsize=14)\nplt.xlabel('Total cases', fontsize = 14)\nplt.legend\n\nplt.title('International comparison of contagion rates', fontsize = 20)\nplt.legend(bbox_to_anchor=(1.05, 1), loc='upper left', borderaxespad=0.)\n\n\nplt.show()","73518e58":"\n\ntemp_f = full_latest_grouped.sort_values(by='Confirmed', ascending=False)\ntemp_f = temp_f.reset_index(drop=True)\ntemp_f.to_csv('generaltable.csv')\n","d2332fce":"!pip install imgkit","5eaa710c":"\ntemp_f['%mortality'] = (temp_f['Deaths']\/ temp_f['Confirmed'])*100\ntemp_f['%recovered'] = (temp_f['Recovered']\/ temp_f['Confirmed'])*100\ntemp_f = temp_f[temp_f['Confirmed'] > thresold]\ntemp_f = temp_f.sort_values(by='%recovered', ascending=False) \ntemp_f = temp_f.reset_index(drop=True)\ncolortable = temp_f.style.background_gradient(cmap='GnBu')\n\ncolortable","ebcd9d94":"## latest raw data for Sweden and Italy","b31c4c14":"## The Netherlands","184e2941":"https:\/\/www.kaggle.com\/imdevskp\/mers-outbreak-analysis  \nhttps:\/\/www.kaggle.com\/imdevskp\/sars-2003-outbreak-analysis  \nhttps:\/\/www.kaggle.com\/imdevskp\/western-africa-ebola-outbreak-analysis\n","41eec75e":"## Spain","af1dcf4f":"### Latest Complete Data","5329f525":"# United Kingdom","53088997":" thanks to https:\/\/www.kaggle.com\/imdevskp\/covid-19-analysis-viz-prediction-comparisons","b60f721e":"## Russia","ae818a76":"## China","b4c23819":"# Germany","5808c8d6":"# Preprocessing","618db2f1":"# Dataset","676e5edb":"# Latest Data","2f73cecd":"## France","ff8a9fc3":"\n## Current statistics for countries with over 1000 COVID-19 cases","fcfe927c":"## More countries for an international comparison","373d3c68":"## Brazil","e458e457":"### Thresold Dates by country\nThe day the country reached at least 1000 cases","482161bc":"# Italy","ce0da04e":"> ## All countries overview","1bb73002":"### Cleaning Data","06d26923":"## Raw data comparison","d9ed7cdf":"### Import","87983b82":"# Cases over the time","7ef168dd":"# Sweden","df9956d2":"\n\nThe most complete dataset at the time Covid-19 started to spread in Europe is that of China. We fit a model to this data, that closely resemble a bell curve\n","c6df2248":"### Derived Tables","197153e9":"# Final Comparison and model","1acf3ccd":"# Analysis on similar epidemics","ac45c6e3":"## United States","e0c9e589":"# Poland"}}