{"cell_type":{"97b58a7f":"code","5f05088a":"code","045d5ea3":"code","c3f16233":"code","d2925d90":"code","3a855ecd":"code","99af57fa":"code","b70c92f0":"code","11c067a2":"code","3c83b948":"code","7e7aa517":"code","effa5032":"code","4c2a0f83":"code","41e02425":"code","a4618305":"code","15ceeb2f":"code","869bcfa5":"code","c9f8923b":"code","61b64eb1":"code","edf64c09":"code","470754ce":"markdown"},"source":{"97b58a7f":"# inspired in https:\/\/www.kaggle.com\/kritidoneria\/responsible-ai-model-explainability\n# inspired in https:\/\/www.kaggle.com\/databeru\/fruit-and-vegetable-classification","5f05088a":"import numpy as np\nimport pandas as pd\nfrom pathlib import Path\nimport os.path\nimport matplotlib.pyplot as plt\nimport tensorflow as tf\n\n# Create a list with the filepaths for training and testing\ntrain_dir = Path('..\/input\/100-bird-species\/train')\ntrain_filepaths = list(train_dir.glob(r'**\/*.jpg'))\n\nval_dir = Path('..\/input\/100-bird-species\/valid')\nval_filepaths = list(val_dir.glob(r'**\/*.jpg'))\n\ntest_dir = Path('..\/input\/100-bird-species\/test')\ntest_filepaths = list(test_dir.glob(r'**\/*.jpg'))","045d5ea3":"def proc_img(filepath):\n\n    labels = [str(filepath[i]).split('\/')[-2] for i in range(len(filepath))]\n    filepath = pd.Series(filepath, name='Filepath').astype(str)\n    labels = pd.Series(labels, name='Label')\n\n    df = pd.concat([filepath, labels], axis=1)\n\n    # Shuffle the DataFrame and reset index\n    df = df.sample(frac=1).reset_index(drop = True)\n\n    return df\n\ntrain_df = proc_img(train_filepaths)\nval_df = proc_img(val_filepaths)\ntest_df = proc_img(test_filepaths)","c3f16233":"train_df.head(5)","d2925d90":"# Create a DataFrame with one Label of each category\ndf_unique = train_df.copy().drop_duplicates(subset=[\"Label\"]).reset_index()\n\n# Display some pictures of the dataset\nfig, axes = plt.subplots(nrows=6, ncols=6, figsize=(12, 12),\n                        subplot_kw={'xticks': [], 'yticks': []})\n\nfor i, ax in enumerate(axes.flat):\n    ax.imshow(plt.imread(df_unique.Filepath[i]))\n    ax.set_title(df_unique.Label[i], fontsize = 12, color = 'white')\nplt.tight_layout(pad=0.5)\nplt.show()","3a855ecd":"train_generator = tf.keras.preprocessing.image.ImageDataGenerator(\n    preprocessing_function=tf.keras.applications.mobilenet_v2.preprocess_input\n)\n\ntest_generator = tf.keras.preprocessing.image.ImageDataGenerator(\n    preprocessing_function=tf.keras.applications.mobilenet_v2.preprocess_input\n)","99af57fa":"train_images = train_generator.flow_from_dataframe(\n    dataframe=train_df,\n    x_col='Filepath',\n    y_col='Label',\n    target_size=(224, 224),\n    color_mode='rgb',\n    class_mode='categorical',\n    batch_size=32,\n    shuffle=True,\n    seed=0,\n    rotation_range=30,\n    zoom_range=0.15,\n    width_shift_range=0.2,\n    height_shift_range=0.2,\n    shear_range=0.15,\n    horizontal_flip=True,\n    fill_mode=\"nearest\"\n)\n\nval_images = train_generator.flow_from_dataframe(\n    dataframe=val_df,\n    x_col='Filepath',\n    y_col='Label',\n    target_size=(224, 224),\n    color_mode='rgb',\n    class_mode='categorical',\n    batch_size=32,\n    shuffle=True,\n    seed=0,\n    rotation_range=30,\n    zoom_range=0.15,\n    width_shift_range=0.2,\n    height_shift_range=0.2,\n    shear_range=0.15,\n    horizontal_flip=True,\n    fill_mode=\"nearest\"\n)\n\ntest_images = test_generator.flow_from_dataframe(\n    dataframe=test_df,\n    x_col='Filepath',\n    y_col='Label',\n    target_size=(224, 224),\n    color_mode='rgb',\n    class_mode='categorical',\n    batch_size=32,\n    shuffle=False\n)\n","b70c92f0":"# Load the pretained model\n\nfrom tensorflow.keras.applications.mobilenet_v2 import MobileNetV2\n\npretrained_model = MobileNetV2(\n    input_shape=(224, 224, 3),\n    include_top=False,\n#     weights='..\/input\/tf-keras-pretrained-model-weights\/No Top\/mobilenet_v2_weights_tf_dim_ordering_tf_kernels_1.0_192_no_top.h5',\n    weights='imagenet',\n    pooling='avg'\n)\n\n# pretrained_model = tf.keras.applications.MobileNetV2(\n#     input_shape=(224, 224, 3),\n#     include_top=False,\n#     weights='imagenet',\n#     pooling='avg'\n# )\npretrained_model.trainable = False","11c067a2":"inputs = pretrained_model.input\n\n# transfer learning\n\nx = tf.keras.layers.Dense(128, activation='relu')(pretrained_model.output)\n# x = tf.keras.layers.Dense(128, activation='relu')(x)\n\noutputs = tf.keras.layers.Dense(275, activation='softmax')(x) # 275\n\nmodel = tf.keras.Model(inputs=inputs, outputs=outputs)","3c83b948":"from keras.utils.vis_utils import plot_model\n\nmodel.compile(\n    optimizer='adam',\n    loss='categorical_crossentropy',\n    metrics=['accuracy']\n)\n\n# model.summary()\n\n# plot_model(model, to_file='model_plot.png', show_shapes=True, show_layer_names=True)","7e7aa517":"history = model.fit(\n    train_images,\n    validation_data=val_images,\n    batch_size = 32,\n    epochs=6,\n    callbacks=[\n        tf.keras.callbacks.EarlyStopping(\n            monitor='val_loss',\n            patience=2,\n            restore_best_weights=True\n        )\n    ]\n)","effa5032":"pd.DataFrame(history.history)[['accuracy','val_accuracy']].plot()\nplt.title(\"Accuracy\")\nplt.show()","4c2a0f83":"pd.DataFrame(history.history)[['loss','val_loss']].plot()\nplt.title(\"Loss\")\nplt.show()","41e02425":"# Predict the label of the test_images\npred = model.predict(test_images)\npred = np.argmax(pred,axis=1)\n\n# Map the label\nlabels = (train_images.class_indices)\nlabels = dict((v,k) for k,v in labels.items())\npred = [labels[k] for k in pred]\n\ny_test = [labels[k] for k in test_images.classes]","a4618305":"from sklearn.metrics import accuracy_score\nacc = accuracy_score(y_test, pred)\nprint(f'Accuracy on the test set: {100*acc:.2f}%')","15ceeb2f":"from sklearn.metrics import confusion_matrix\nimport seaborn as sns\n\ncf_matrix = confusion_matrix(y_test, pred, normalize='true')\nplt.figure(figsize = (15,10))\nsns.heatmap(cf_matrix, \n            annot=False, \n            xticklabels = sorted(set(y_test)),\n            yticklabels = sorted(set(y_test)),\n            )\nplt.title('Normalized Confusion Matrix')\nplt.show()","869bcfa5":"# Display some pictures of the dataset with their labels and the predictions\nfig, axes = plt.subplots(nrows=3, ncols=3, figsize=(8, 8),\n                        subplot_kw={'xticks': [], 'yticks': []})\n\nfor i, ax in enumerate(axes.flat):\n    ax.imshow(plt.imread(test_df.Filepath.iloc[i]))\n    ax.set_title(f\"True: {test_df.Label.iloc[i]}\\nPredicted: {pred[i]}\",color='white')\nplt.tight_layout()\nplt.show()","c9f8923b":"# https:\/\/www.kaggle.com\/kritidoneria\/responsible-ai-model-explainability\nfrom keras.applications.mobilenet_v2 import decode_predictions,preprocess_input\nfrom keras.preprocessing.image import load_img, img_to_array\n\npath = '..\/input\/100-bird-species\/test\/FLAMINGO\/1.jpg'\n\n# input_shape=(224, 224, 3),\n\nimage_raw = load_img(path, target_size=(224,224,3))\nimage_raw","61b64eb1":"# Convert to numpy array, reshape and preprocess\nimage = img_to_array(image_raw)\n\nimage = image.reshape(\n    (1, image.shape[0], image.shape[1], image.shape[2])\n)\n# print(image.shape)\n\nimage = preprocess_input(image).astype('double')\n# print(image.shape)\n\npredictions = model.predict(image)\n\nprint(predictions.shape)\n# print(predictions)\n\n# decode_predictions(predictions)\n\nmodel.predict(image).argsort()[0, -5:][::-1]\n\n# model.predict(image).argsort()[0, -5:][::-1]","edf64c09":"from lime.lime_image import LimeImageExplainer\nexplainer = LimeImageExplainer()\n\nexplanation = explainer.explain_instance(image[0], \n                                         model.predict, \n                                         top_labels=2, \n                                         num_samples=100,\n                                         random_seed=42\n                                        )\n\nfrom skimage.segmentation import mark_boundaries\nfrom matplotlib import pyplot as plt\n\ntemp, mask = explanation.get_image_and_mask(100,\n                                            positive_only=True, \n                                            num_features=5, \n                                            hide_rest=True)\n# plot image and mask together\nplt.imshow(mark_boundaries(temp , mask))","470754ce":"# Test"}}