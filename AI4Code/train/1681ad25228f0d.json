{"cell_type":{"b734464b":"code","411cc06d":"code","77b18df9":"code","fc39137e":"code","c4547f0e":"code","8eac42db":"code","a1ad3458":"code","3a7bc1f7":"code","e1a96ddb":"code","036ff618":"code","7c69799c":"code","bd3ee48c":"code","c0f0b324":"code","b4ece851":"code","89b86ef0":"code","3f6c6045":"code","e69c5b84":"code","a5fff284":"code","79d672d4":"code","a648785b":"code","d78cc338":"code","f8c9b2a9":"markdown","df51e8e9":"markdown","60b7151e":"markdown","26e8c9a7":"markdown","0208fb64":"markdown","e80faf9e":"markdown","3c683f51":"markdown","82ca5c64":"markdown"},"source":{"b734464b":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","411cc06d":"import numpy as np\nimport pandas as pd\nimport seaborn as sns\nimport matplotlib.pyplot as plt","77b18df9":"data=pd.read_csv(\"..\/input\/glass\/glass.csv\")","fc39137e":"data.head()","c4547f0e":"data.info()","8eac42db":"data.isnull().sum()","a1ad3458":"data['Type'].value_counts()","3a7bc1f7":"X=data.iloc[:,:-1]","e1a96ddb":"X","036ff618":"y=data.iloc[:,-1]","7c69799c":"y","bd3ee48c":"from sklearn.model_selection import train_test_split\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.25, random_state = 0)","c0f0b324":"X_train","b4ece851":"X_test","89b86ef0":"y_train","3f6c6045":"y_test","e69c5b84":"from sklearn.preprocessing import StandardScaler\nsc = StandardScaler()\nX_train = sc.fit_transform(X_train)\nX_test = sc.transform(X_test)","a5fff284":"# Support vector classifier\nfrom sklearn.svm import SVC\nsvc_classifier = SVC()\nsvc_classifier.fit(X_train, y_train)\ny_pred_scv = svc_classifier.predict(X_test)\naccuracy_score(y_test, y_pred_scv)","79d672d4":"from sklearn.metrics import confusion_matrix, classification_report, accuracy_score\nprint(classifier.predict(sc.transform([[1.51784,12.68,3.67,1.16,73.11,0.61,8.70,0.00,0.00]])))","a648785b":"cm = confusion_matrix(y_test, y_pred_scv)\nplt.title('Heatmap of Confusion Matrix', fontsize = 15)\nsns.heatmap(cm, annot = True)\nplt.show()","d78cc338":"print(classification_report(y_test, y_pred_scv))","f8c9b2a9":"# Confusion Matrix","df51e8e9":"# Import libraries","60b7151e":"# Classification report","26e8c9a7":"# Prediction","0208fb64":"# Data Gathering","e80faf9e":"# SVM","3c683f51":"# Standard Scaler","82ca5c64":"# Train Test Split"}}