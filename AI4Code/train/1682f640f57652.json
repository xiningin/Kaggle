{"cell_type":{"05651d2a":"code","c91b82f6":"code","cbbd6efb":"code","c30ae56b":"code","33d3f16c":"code","0aa82d0d":"code","243fd739":"code","4e9fe253":"code","f766ca3e":"code","40079892":"code","d4409eb0":"code","8c90f741":"code","aea2f379":"code","8cfea1db":"code","f6bf6707":"code","3b2e1fe2":"code","e002980a":"code","c18eed85":"code","1b3e6c4e":"code","b92dc7ef":"code","84c40f5e":"code","a1529cb1":"code","8f4b444f":"code","57ce489e":"code","94d6615d":"code","76c68988":"code","1e9fb23b":"markdown","274a41b7":"markdown"},"source":{"05651d2a":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)","c91b82f6":"sub = pd.read_csv(\"..\/input\/udon-future-predict\/xgb_submission.csv\")","cbbd6efb":"sub","c30ae56b":"data = pd.read_csv('..\/input\/competitive-data-science-predict-future-sales\/sales_train.csv')\ntest = data[data.date_block_num == 33]\ndrop_cols =[\"date\",\"date_block_num\",\"shop_id\",\"item_price\",\"item_id\"]\ntest.drop(drop_cols, axis=1,inplace = True)\ntest","33d3f16c":"test = test.reset_index()","0aa82d0d":"new_test = test.rename(columns={'index':'ID',\"item_cnt_day\":\"item_cnt_day\"})\nnew_test","243fd739":"sub","4e9fe253":"sub.describe()","f766ca3e":"test.describe()","40079892":"# test\u30c7\u30fc\u30bf\u306b\u542b\u307e\u308c\u308b\u5927\u304d\u3044\u5024\u30d9\u30b9\u30c84\nlist = test[\"item_cnt_day\"].values.tolist()\nnew = sorted(list)\nfor i in range(1,5):\n    print(new[-i])","d4409eb0":"import matplotlib.pyplot as plt\nimport seaborn as sns\n\n#  test\u30c7\u30fc\u30bf\u306b\u3066\u3001\u300c\u88fd\u54c1\u306e\u500b\u6570\u300d\u3092\u7bb1\u3072\u3052\u56f3\u3067\u78ba\u8a8d\u3059\u308b\nfig,ax = plt.subplots(2,1,figsize=(10,4))\n# \u5c3a\u5ea6\u306e\u8abf\u6574\nplt.xlim(-10, 3000)\n# \u7bb1\u3072\u3052\u56f3\u3092\u63cf\u753b\nax[0].boxplot((test.item_cnt_day) , labels=['test.item_cnt_day'], vert=False)\n\n# sub\u30c7\u30fc\u30bf\u306b\u3066\u3001\u300c\u5546\u54c1\u306e\u4fa1\u683c\u300d\u3092\u7bb1\u3072\u3052\u56f3\u3067\u78ba\u8a8d\u3059\u308b\nplt.xlim(-10, 3000)\nax[1].boxplot((sub.item_cnt_month) , labels=['sub.item_cnt_month'], vert=False)\nplt.show()","8c90f741":"test.query(\"item_cnt_day > 400\")","aea2f379":"# \u5916\u308c\u5024\u306e\u9664\u5916\ntest = test[test.item_cnt_day<400]","8cfea1db":"test","f6bf6707":"sub","3b2e1fe2":"new_test","e002980a":"ans = pd.merge(sub, new_test)","c18eed85":"ans","1b3e6c4e":"ans.query(\"ID == 2909401 or ID == 2909818\")","b92dc7ef":"clear = ans[ans[\"ID\"] != 2909401]\nclear","84c40f5e":"clear = ans[ans[\"ID\"] != 2909818]\nclear","a1529cb1":"clear[\"e\"] = clear[\"item_cnt_month\"] - clear[\"item_cnt_day\"]\nclear","8f4b444f":"clear[\"e**2\"] = clear[\"e\"]**2\nclear","57ce489e":"clear[\"e**2\"].sum()","94d6615d":"total = clear[\"e**2\"].sum() \/ len(clear)\ntotal","76c68988":"final_ans = np.sqrt(total)\nprint(final_ans)","1e9fb23b":"### \u4e00\u3064\u76ee\u306e\u8a08\u6e2c\u65b9\u6cd5","274a41b7":"## \u5916\u308c\u5024\u3092\u9664\u5916\u3057\u3066\u307f\u308b"}}