{"cell_type":{"15db06ff":"code","f79ca5d9":"code","846e7440":"code","9abd35b5":"code","41bc891c":"code","39d3c456":"code","ba0abd78":"code","d628622a":"code","92799e79":"code","d81c3a9d":"code","38749003":"code","72ecb78b":"markdown","3594d9b8":"markdown","5ebbb78a":"markdown"},"source":{"15db06ff":"# \u5f62\u614b\u7d20\u5206\u6790\u30e9\u30a4\u30d6\u30e9\u30ea\u30fcMeCab \u3068 \u8f9e\u66f8(mecab-ipadic-NEologd)\u306e\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb \n!apt-get -q -y install sudo file mecab libmecab-dev mecab-ipadic-utf8 git curl python-mecab > \/dev\/null\n!git clone --depth 1 https:\/\/github.com\/neologd\/mecab-ipadic-neologd.git > \/dev\/null \n!echo yes | mecab-ipadic-neologd\/bin\/install-mecab-ipadic-neologd -n > \/dev\/null 2>&1\n!pip install mecab-python3 > \/dev\/null","f79ca5d9":"# \u30b7\u30f3\u30dc\u30ea\u30c3\u30af\u30ea\u30f3\u30af\u306b\u3088\u308b\u30a8\u30e9\u30fc\u56de\u907f\n!ln -s \/etc\/mecabrc \/usr\/local\/etc\/mecabrc","846e7440":"!echo `mecab-config --dicdir`\"\/mecab-ipadic-neologd\"","9abd35b5":"!pip install mojimoji > \/dev\/null","41bc891c":"from typing import List, Optional\n\nimport MeCab\nimport mojimoji\n\n\ndicdir = !echo `mecab-config --dicdir`\"\/mecab-ipadic-neologd\"\ntagger = MeCab.Tagger(dicdir[0])","39d3c456":"def tokenize(sentence: str) -> List[str]:\n    splitted = tagger.parse(sentence).split(\"\\n\")\n    filtered = list(\n        filter(\n            lambda x: x != \"\" and x != \"EOS\",\n            splitted\n        )\n    )\n    return filtered\n\n\ndef split_sentence(\n    sentence: str, \n    normalize=False, \n    pos_allowed: Optional[List[str]] = None, \n    disallow: Optional[List[str]] = None\n) -> List[str]:\n    if normalize:\n        sentence = mojimoji.zen_to_han(sentence, kana=False).lower()\n        sentence = mojimoji.han_to_zen(sentence, digit=False, ascii=False)\n    splitted = [result.split(\"\\t\") for result in tokenize(sentence)]\n    if disallow is None:\n        disallow = []\n    \n    if pos_allowed is None:\n        words = [\n            result[0] for result in splitted\n            if result[1].split(\",\")[1] not in disallow\n        ]\n    else:\n        words = [\n            result[0] for result in splitted\n            if result[1].split(\",\")[1] not in disallow\n            and result[1].split(\",\")[0] in pos_allowed\n        ]\n    return words","ba0abd78":"text = \"\u667a\u306b\u50cd\u3051\u3070\u89d2\u304c\u7acb\u3064\u3002\u60c5\u306b\u68f9\u3055\u305b\u3070\u6d41\u3055\u308c\u308b\u3002\u610f\u5730\u3092\u901a\u305b\u3070\u7aae\u5c48\u3060\u3002\u514e\u89d2\u306b\u4eba\u306e\u4e16\u306f\u4f4f\u307f\u306b\u304f\u3044\u3002\"\ntokenize(text)","d628622a":"split_sentence(text)","92799e79":"split_sentence(text, normalize=True)","d81c3a9d":"split_sentence(text, disallow=[\"\u53e5\u70b9\", \"\u975e\u81ea\u7acb\"])","38749003":"split_sentence(text, pos_allowed=[\"\u540d\u8a5e\"])","72ecb78b":"## \u5358\u8a9e\u5206\u5272\u306e\u30b5\u30f3\u30d7\u30eb","3594d9b8":"## MeCab & NEologd\u306e\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb","5ebbb78a":"## \u4fbf\u5229\u30e9\u30a4\u30d6\u30e9\u30ea\u306e\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb"}}