{"cell_type":{"98e582b2":"code","b284ac05":"code","071eaa8e":"code","05482f40":"code","1217de4b":"code","63c66af9":"code","8b41fd95":"code","044189b0":"code","df100d55":"code","573dcda9":"markdown","5d1e4675":"markdown","7797e61a":"markdown","4ca09028":"markdown"},"source":{"98e582b2":"import matplotlib.pyplot as plt\nimport seaborn as sns; sns.set()\nimport numpy as np\nimport pandas as pd\n\nimport warnings\nwarnings.filterwarnings(\"ignore\")","b284ac05":"from sklearn.model_selection import train_test_split\nfrom sklearn.datasets import make_moons\n\nX, y = make_moons(n_samples=500, noise=0.30, random_state=42)\nX_train, X_test, y_train, y_test = train_test_split(X, y, random_state=42)","071eaa8e":"plt.figure(dpi=200)\nplt.scatter(X[y == 0, 0], X[y == 0, 1],\n            c='r', marker='o', label='Class 0')\nplt.scatter(X[y == 1, 0], X[y == 1, 1],\n            c='b', marker='s', label='Class 1')\n\nplt.xlim(X[:, 0].min()-1, X[:, 0].max()+1)\nplt.ylim(X[:, 1].min()-1, X[:, 1].max()+1)\nplt.xlabel('$x_1$', fontsize=18)\nplt.ylabel('$x_2$', rotation=0, fontsize=18)\nplt.legend(loc='best')\nplt.tight_layout()\nplt.show()","05482f40":"from sklearn.ensemble import RandomForestClassifier\nfrom sklearn.ensemble import VotingClassifier\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.svm import SVC\n\nlog_clf = LogisticRegression(solver=\"liblinear\", random_state=42)\nrnd_clf = RandomForestClassifier(n_estimators=10, random_state=42)\nsvm_clf = SVC(gamma=\"auto\", random_state=42)\n#bu \u00fc\u00e7 s\u0131n\u0131fland\u0131r\u0131c\u0131y\u0131 birle\u015ftirip \u00e7al\u0131\u015ft\u0131r\u0131yor.\nvoting_clf = VotingClassifier(\n    estimators=[('lr', log_clf), ('rf', rnd_clf), ('svc', svm_clf)],\n    voting='hard')","1217de4b":"voting_clf.fit(X_train, y_train)","63c66af9":"from sklearn.metrics import accuracy_score\n\nfor clf in (log_clf, rnd_clf, svm_clf, voting_clf):\n    clf.fit(X_train, y_train)\n    y_pred = clf.predict(X_test)\n    print(clf.__class__.__name__, accuracy_score(y_test, y_pred))\n","8b41fd95":"from sklearn.ensemble import BaggingClassifier\nfrom sklearn.tree import DecisionTreeClassifier\n\nbag_clf = BaggingClassifier(\n    DecisionTreeClassifier(random_state=42), n_estimators=500,\n    max_samples=100, bootstrap=True, n_jobs=-1, random_state=42)\nbag_clf.fit(X_train, y_train)\ny_pred = bag_clf.predict(X_test)","044189b0":"from sklearn.metrics import accuracy_score\nprint(accuracy_score(y_test, y_pred))","df100d55":"tree_clf = DecisionTreeClassifier(random_state=42)\ntree_clf.fit(X_train, y_train)\ny_pred_tree = tree_clf.predict(X_test)\nprint(accuracy_score(y_test, y_pred_tree))","573dcda9":"**Random Forest Classification**","5d1e4675":"**Voting Classifiers**","7797e61a":"**Bagging and Pasting**","4ca09028":"# **Ensemble Methods & Random Forest**"}}