{"cell_type":{"7029c87d":"code","65b1ddac":"code","eaca73a3":"code","3e9e28f4":"code","81e72d71":"code","8e3b1d05":"code","46cb6bae":"code","49049050":"code","e1620d8a":"code","a6804df7":"code","91059d19":"code","0c35a213":"code","4e91efe9":"code","a5da6513":"code","0471b778":"code","3b473093":"code","655428eb":"code","2693a4aa":"code","621b3aa7":"code","1a89e4c2":"code","c946e2e2":"code","a120a799":"markdown","f9740cbc":"markdown","b1386b04":"markdown","91ae17a8":"markdown","a397251f":"markdown","90aa2a56":"markdown","98181da0":"markdown","8de26faf":"markdown","47325b33":"markdown"},"source":{"7029c87d":"!pip install xlrd\n!pip install openpyxl\n!pip install geopy\n!pip install folium\n!pip install bs4\n!pip install dadata","65b1ddac":"import pandas as pd\nimport numpy as np\nimport requests\nimport matplotlib.pyplot as plt\n\nfrom geopy.geocoders import Nominatim\n\nimport matplotlib.cm as cm\nimport matplotlib.colors as colors\n\nfrom sklearn.cluster import KMeans\n\nimport folium \n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))","eaca73a3":"# Get addresses from web, then write them to csv for use from file:\n#mo_spb = pd.read_excel('..\/input\/spb-data-ru-en\/spb_new.xlsx')\n\n# Get coordinates from DaData, then write them to csv for use from file:\n\n#from dadata import Dadata\n#token = \"c0a159aec57b0bea2e656cf6d539c78c8e14db0c\"\n#secret = \"1f0faaad0fbcb19603b50471e7a8b8a91af0a17a\"\n#dadata = Dadata(token, secret)\n\n#lat=[]\n#lon=[]\n#for i in mo_spb['Address_RU']:\n#    result = dadata.clean(\"address\", i)\n#    lat.append(result['geo_lat'])\n#    lon.append(result['geo_lon'])\n#mo_spb['Latitude'] = lat\n#mo_spb['Longitude'] = lon\n\n\n#mo_spb.to_csv('spb_addr_result.csv', index=False)\n\n# DaData is paid service, so we will use results next time:\n\nmo_spb = pd.read_csv('..\/input\/spbadr\/spb_addr_result.csv')\nmo_spb","3e9e28f4":"address = 'Saint Petersberg, Russia'\ngeolocator = Nominatim(user_agent=\"ny_explorer\")\nlocation = geolocator.geocode(address)\nlatitude = location.latitude\nlongitude = location.longitude\nprint('The geograpical coordinate are {}, {}.'.format(latitude, longitude))","81e72d71":"map_spb = folium.Map(location=[latitude, longitude], zoom_start=9)\n\n# add markers to map\nfor lat, lng, borough, neighborhood, postalcode in zip(mo_spb['Latitude'],mo_spb['Longitude'],mo_spb['Borough'],mo_spb['Neighborhood'],mo_spb['Code']):\n    label = '{}, {}, {}'.format(neighborhood, borough, postalcode)\n    label = folium.Popup(label, parse_html=True)\n    folium.CircleMarker(\n        [lat, lng],\n        radius=5,\n        popup=label,\n        color='black',\n        fill=True,\n        fill_color='grey',\n        fill_opacity=0.7,\n        parse_html=False).add_to(map_spb)  \n    \nmap_spb","8e3b1d05":"CLIENT_ID = 'EYKGEV2E3LS5ZZRLWR0GCS2WIVVF5TLBAGGXDTJ0Y4BYIII5' # your Foursquare ID\nCLIENT_SECRET = 'RY1J3KSIOGNX5WWLF2PISYTSFTYGKTI1VLNK3DHLLJFXO3LW' # your Foursquare Secret\nVERSION = '20180605' # Foursquare API version 20201224\nLIMIT = 200 \nDEFAULT_LIMIT = 200\nDEFAULT_RADIUS = 750","46cb6bae":"import time\nFOURSQUARE_BASE_EXPLORE_URL = 'https:\/\/api.foursquare.com\/v2\/venues\/explore?client_id={}&client_secret={}&v={}&ll={},{}&radius={}&limit={}'\n\ndef explore_venues(dataframe):\n    \n    columns = ['Neighborhood', 'Neighborhood Latitude', 'Neighborhood Longitude',\n                'Venue', 'Venue Latitude', 'Venue Longitude',\n                'Category']\n\n    venues_list = []\n    \n    for i, n in dataframe.iterrows():\n        Neighborhood = n['Neighborhood']\n        latitude = n['Latitude']\n        longitude = n['Longitude']\n\n        explore_url = FOURSQUARE_BASE_EXPLORE_URL.format(CLIENT_ID,\n                                                         CLIENT_SECRET,\n                                                         VERSION,\n                                                         latitude,\n                                                         longitude,\n                                                         DEFAULT_RADIUS,\n                                                         DEFAULT_LIMIT)\n\n        response = requests.get(explore_url).json()['response']\n        \n        try:\n            response['groups']\n        except KeyError:\n            print(response)\n\n        results = response['groups'][0]['items']        \n\n        for r in results:\n            data_row = [Neighborhood, latitude, longitude,\n                        r['venue']['name'], r['venue']['location']['lat'], r['venue']['location']['lng'],\n                        r['venue']['categories'][0]['name']]\n\n            venues_list.append(data_row)\n\n        time.sleep(1)\n\n    venues_df = pd.DataFrame(venues_list, columns=columns)\n\n    return venues_df","49049050":"spb_full_venues = explore_venues(mo_spb)\nspb_full_venues.to_csv('spb_full_venues.csv')\nspb_full_venues[['Category', 'Neighborhood']][spb_full_venues['Category'] == 'Italian Restaurant'].groupby('Category').count().sort_values('Neighborhood', ascending=False)","e1620d8a":"spb_locator = geolocator.geocode('Saint-Petersberg, Russia')\n\n\ndef add_polygon_marker_to_map(lat_series, long_series, venue, color, fill_color, map_out):\n\n\n    for lat, lng, label in zip(lat_series, long_series, venue):\n        label = folium.Popup(label, parse_html=True)\n        folium.RegularPolygonMarker(\n            [lat, lng],\n            number_of_sides=4,\n            radius=6,\n            popup=label,\n            color=color,\n            fill=True,\n            fill_color=fill_color,\n            fill_opacity=0.7,\n            parse_html=False).add_to(map_out)","a6804df7":"spb_it_restaurants = spb_full_venues[spb_full_venues['Category'] == 'Italian Restaurant']\nmap_it_restaurant = folium.Map(location=[spb_locator.latitude, spb_locator.longitude], zoom_start=13)\n\nadd_polygon_marker_to_map(spb_it_restaurants['Venue Latitude'], \\\n                          spb_it_restaurants['Venue Longitude'], \\\n                          spb_it_restaurants['Venue'], \\\n                          'green', \\\n                          'lightgreen', \\\n                          map_it_restaurant)\n\nmap_it_restaurant","91059d19":"restaurant_counts = spb_full_venues[spb_full_venues['Category'].str.contains('Restaurant')].\\\n                    groupby('Category').count().sort_values('Neighborhood', ascending=False)\n\nspb_restaurants = spb_full_venues.merge(restaurant_counts.reset_index(level=0)['Category'], how='inner')\n# See data distribution\n\n#spb_restaurants\nrestaurant_counts.reset_index(level=0)[['Category', 'Neighborhood']].plot.bar(x='Category', y='Neighborhood')\nplt.title('Distribution of Restaurants in SPb')\nplt.rcParams[\"figure.figsize\"] = (20,20)\nplt.xticks(size=15)","0c35a213":"restaurant_onehot = pd.get_dummies(spb_restaurants[['Category']], prefix='', prefix_sep='')\nrestaurant_onehot['Neighborhood'] = spb_restaurants['Neighborhood']\ncolumns = [restaurant_onehot.columns[-1]] + list(restaurant_onehot.columns[:-1])\nrestaurant_onehot = restaurant_onehot[columns]\n\n# 2. Score each of restaurant type for each of Neighborhood\nrestaurant_onehot = restaurant_onehot.groupby('Neighborhood').mean().reset_index()\n\n# 3. Drop the 'Neighborhood' column\nrestaurant_onehot.drop('Neighborhood', axis=1)","4e91efe9":"from sklearn.cluster import KMeans\nimport matplotlib.pyplot as plt\n\nscores = []\n\nrestaurant_clustering = restaurant_onehot.drop('Neighborhood', axis=1)\n\nfor k in range(1, 20):\n    scores.append(KMeans(n_clusters=k, random_state=1).fit(restaurant_clustering).score(restaurant_clustering))\n\nplt.plot(scores)\nplt.ylabel('K-Score')\nplt.xlabel('K')\nplt.figure(figsize=(3, 3))\nplt.show()","a5da6513":"kclusters = 6\nn = restaurant_onehot['Neighborhood']\nNeighborhood = restaurant_onehot[['Neighborhood']]\nrestaurant_clustering = restaurant_onehot.drop('Neighborhood', 1)\nkmeans = KMeans(n_clusters=kclusters, random_state=1).fit(restaurant_clustering)\nclusters_label = pd.DataFrame([x for x in kmeans.labels_], columns=['Cluster'])\n\nNeighborhood_cluster = pd.concat([clusters_label, Neighborhood], axis=1)\nNeighborhood_cluster.groupby('Cluster').count()","0471b778":"top_restaurants = spb_restaurants[['Neighborhood', 'Neighborhood Latitude', 'Neighborhood Longitude', 'Category', 'Venue']].\\\n                groupby(by=['Neighborhood', 'Neighborhood Latitude', 'Neighborhood Longitude', 'Category']).count().reset_index().\\\n                groupby(by=['Neighborhood', 'Neighborhood Latitude', 'Neighborhood Longitude']).max().reset_index()\n\ntop_restaurants = top_restaurants.merge(Neighborhood_cluster, on='Neighborhood', how='inner')","3b473093":"import random\n\ndef add_cluster_to_map(lat_series, long_series, label_series, cluster_series, target_map, colors):\n    for lat, lon, Neighborhood, cluster in zip(lat_series, long_series, label_series, cluster_series):\n        label = folium.Popup('{}: Cluster {}'.format(Neighborhood, cluster), parse_html=True)\n        folium.CircleMarker([lat, lon],\n                            radius=5,\n                            popup=label,\n                            color='#000000',\n                            fill=True,\n                            fill_color=colors[cluster],\n                            fill_opacity=1.0,\n                            weight=2).add_to(target_map)\n\nmap_clusters = folium.Map(location=[spb_locator.latitude, spb_locator.longitude], zoom_start=13)\ncolors = ['#983a06', '#f57b27', '#0f8222', '#946bbd', '#1cad8e', '#374ae0', '#f5fa18', '#12d1fc']\nadd_cluster_to_map(top_restaurants['Neighborhood Latitude'],\\\n                  top_restaurants['Neighborhood Longitude'],\\\n                  top_restaurants['Neighborhood'],\\\n                  top_restaurants['Cluster'],\\\n                  map_clusters,\n                  colors)\n    \nmap_clusters","655428eb":"top_restaurants[['Cluster', 'Category', 'Neighborhood']].groupby(by=['Cluster', 'Category']).count()","2693a4aa":"potential_poi = ['Bookstore','Boat or Ferry','Beach',\\\n                         'Bridge', 'Hotel','Plaza','Museum','Castle',\\\n                         'Station','University','Mall',\\\n                         'Stadium','Park','Monument','Theater','Gallery'\\\n                         'Boutique', 'Circus', 'Cultural Center', 'Department Store'\\\n                         'Electronics Store', 'Escape Room', 'Historic Site', \\\n                         'Hot Spring', 'Music Venue', 'Multiplex', 'Nightclub', \\\n                         'Wine']\nspb_poi = spb_full_venues[spb_full_venues['Category'].\\\n                                                str.contains('|'.join(potential_poi))].reset_index()\nspb_poi","621b3aa7":"from folium import plugins\n\npoi_list = list(spb_poi[['Venue Latitude', 'Venue Longitude']].values)\npoi_map = folium.Map([spb_locator.latitude, spb_locator.longitude], zoom_start=11)\nheat_map = plugins.HeatMap(poi_list, name='SPb POI')\npoi_map.add_child(heat_map)\nfolium.LayerControl().add_to(poi_map)\n\npoi_map","1a89e4c2":"final_map = poi_map\n\nadd_cluster_to_map(top_restaurants['Neighborhood Latitude'],top_restaurants['Neighborhood Longitude'],\n                  top_restaurants['Neighborhood'],top_restaurants['Cluster'],final_map,colors)\nfinal_map","c946e2e2":"r_Neighborhoods = ['\u2116 7', 'Vasilevskij', 'CHkalovskoe', 'Okrug Petrovskij','Kronverkskoe','Vladimirskij okrug',\n                   'Aptekarskij ostrov', 'Litejnyj okrug', 'Dvorcovyj okrug', '\u2116 78','Sennoj okrug']\n\nselected_Neighborhoods = top_restaurants[top_restaurants['Neighborhood'].isin(r_Neighborhoods)]\n\nrec_map = poi_map\n\nadd_cluster_to_map(selected_Neighborhoods['Neighborhood Latitude'],selected_Neighborhoods['Neighborhood Longitude'],\n                  selected_Neighborhoods['Neighborhood'],selected_Neighborhoods['Cluster'],rec_map,colors)\n\nadd_polygon_marker_to_map(spb_it_restaurants['Venue Latitude'],spb_it_restaurants['Venue Longitude'], \n                          spb_it_restaurants['Venue'], 'black', 'white', rec_map)  \nrec_map","a120a799":"<h3>Let's see how many Italian restaurants are there and how the distribution looks like<\/h3>","f9740cbc":"\n<h2>Location Analysis for New Itallian Restaurant<br>\nin Saint-Petersburg, Russia<\/h2>\n    \n\n\n<h3>0. Presentation<\/h3>\n\n* [One-page Presentation (PDF on GitHub)](https:\/\/github.com\/spb-r-u\/Coursera-Capstone\/blob\/master\/present.pdf)\n\n* [Presentation (PDF on GitHub)](https:\/\/github.com\/spb-r-u\/Coursera-Capstone\/blob\/master\/spb-districts.pdf) \n\n<h3>1. Intro<\/h3>\n<div>St. Petersburg is the second largest city in Russia after Moscow. It is home to up to 6 million people. The city has many historical sights, 100 years ago this city was the capital of the country. The city is interesting for guests of the city and local residents. The historical center of the city deserves special attention.<\/div>\n<div>&nbsp;<br><\/div>\n<div>We have an opportunity in the fact that St. Petersburg is actively developing and the restaurant business has not yet been fully formed in it. Locals and tourists loves: pizza, sushi, kebabs and grilled meat. We looking for a place to open one restaurant with Italian cuisine, but we need the best place to open it.<\/div>\n<div>&nbsp;<br><\/div>\n<div>Target is a list of city districts in which locals and tourists are actively spending (not industrial zone, not sleeping areas), while there should be no other Italian restaurants.<\/div>\n<div>&nbsp;<br>&nbsp;<br><\/div>\n\n<h3>2. Data<\/h3>\n<div>Data is collected from various sources:<\/div>\n<div>&nbsp;&nbsp;&nbsp; - Official website of the city administration.<\/div>\n<div>&nbsp;&nbsp;&nbsp; - Geographic coordinates of the regions are collected from the Dadata API map server.<\/div>\n<div>&nbsp;&nbsp;&nbsp; - Geographical coordinates of restaurants and other POIs is collected using the Foursquare API and Nominatim (OpenStreetMap)<\/div>\n<div>As a result, we get a table with a list of all city districts and geographic coordinates.<\/div>\n<div>&nbsp;<br><\/div>","b1386b04":"<h3>The elbow method describes the best number of clusters found when there are no significant changes of the score observed. From the chart above, we can see that afrer 6 dinamique is slow and after 7+ model can be overfitted. Based on the elbow method, 6 is the best number of clusters we can use.<\/h3>","91ae17a8":"<h3>We now have a good vision on how the clustering looks like. Let us now see what are the characteristics of each cluster, by analyzing the top restaurant category on each cluster, as well as giving a preliminary label whether the restaurant should be opened in any of the Neighborhood within the cluster<\/h3>","a397251f":"<h3>It does not really give us good information on what this information entails, but 1 thing for sure is that the data are heavily distributed within 3 clusters.<\/h3>","90aa2a56":"<h3>From the visualization above, it looks like Italian restaurants are popular but there are not many in the whole city of SPb. It's making a good opportunity for a potential new business. Let's now explore where would be the ideal place to open it.<\/h3>","98181da0":"<h3>We are almost ready to start clustering the data. We need to utilize the elbow method to identify the best number of clusters based on the dataset that we have. Lets do it!<\/h3>","8de26faf":"<h3>Almost all places with a high concentration of POIs have Italian restaurants. <\/h3>\n<h3>But there are exceptions that we were looking for: <\/h3>\n\n<h3>\n    \n* Vladimirskij okrug, \n* Izmajlovskoe, \n* District \u2116 78, \n* Ostrov Dekabristov;\n* Gavan.\n\n<\/h3>\n    \n<h3>We can research the menus of non-specialized restaurants in these areas. \nPerhaps one of them specializes in Italian cuisine, but did not indicate this in the Foursquire.<\/h3>\n\n<h3>The goal of the research has been achieved, we have found several potential areas of the city that fit our criteria.<\/h3>","47325b33":"<h3>POI heat map shows us that center of the city has maximum of POIs.<\/h3>\n<h3>Let's cross check between:<\/h3>\n<h3> 1. cluster map<\/h3>\n<h3> 2. POI heat map<\/h3>\n<h3> 3. itallian restaurants map<\/h3>\n<h3>And we'll see what we got<\/h3>"}}