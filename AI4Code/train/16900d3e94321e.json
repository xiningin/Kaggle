{"cell_type":{"dc3876b5":"code","8904e707":"code","a8f63b34":"code","d4039848":"code","f9cfdff5":"code","26e1ecec":"code","4eae15d0":"code","ab94b462":"code","c83e80e9":"code","37949ae4":"code","0ebc93e5":"code","6487cd8f":"code","3a4b247e":"code","7a051de9":"code","947ee323":"code","790f1c07":"code","adf46410":"code","c3573550":"code","c031e4ce":"code","ccb6ae47":"code","b9ba4507":"code","a7f3459b":"code","648d296b":"code","61261fad":"code","716ea814":"code","45c78c10":"code","099f82e3":"code","793bb02a":"code","1aa763de":"markdown","1a93cc2b":"markdown","fb490d7a":"markdown","1b892433":"markdown","d2d668cb":"markdown","f87f9369":"markdown","081ff7d9":"markdown"},"source":{"dc3876b5":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","8904e707":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.preprocessing import StandardScaler,LabelEncoder,MinMaxScaler\nimport seaborn as sns\nfrom sklearn.decomposition import PCA","a8f63b34":"df=pd.read_csv('\/kaggle\/input\/logistic-regression\/Social_Network_Ads.csv')\ndf.head()","d4039848":"# Drop User id\nlen(df['User ID'].unique())\ndf.drop(columns=['User ID'],inplace=True)","f9cfdff5":"df.describe()","26e1ecec":"df.isnull().sum()","4eae15d0":"df.dtypes","ab94b462":"#conert categorical feature to numarical feature\nle=LabelEncoder()\ndf['Gender']=le.fit_transform(df['Gender'])","c83e80e9":"#Normalize the data\nsc=MinMaxScaler()\ndf_n=sc.fit_transform(df.iloc[:,:-1])","37949ae4":"#train test split\nx_train,x_test,y_train,y_test=train_test_split(df_n,df['Purchased'])\ny_train.reset_index(drop=True,inplace=True)\ny_test.reset_index(drop=True,inplace=True)\nx=x_train\ny=y_train","0ebc93e5":"#pairplot\nsns.pairplot(df,hue='Purchased')","6487cd8f":"sns.boxplot(x='Purchased',y='EstimatedSalary',data=df)","3a4b247e":"sns.boxplot(x='Purchased',y='Age',data=df)","7a051de9":"#pie plot\ndf_gender=df[['Gender','Purchased']].groupby('Purchased').sum()\ndf_gender.index=['Male','Female']\ndf_gender['Gender'].plot(kind='pie',autopct='%1.1f%%')\nplt.show()","947ee323":"def sigmoid(x,w,b):\n    return 1\/(1+np.exp(-(np.dot(x,w)+b)))\ndef loss(x,w,y,b):\n    s=sigmoid(x,w,b)\n    return np.mean(-(y*np.log(s))- ((1-y)*np.log(1-s)))\ndef grad(x,y,w,b):\n    s=sigmoid(x,w,b)    \n    return np.dot(x.T,(s-y))\/x.shape[0]","790f1c07":"def accuracy(y_pred,y_test):\n    return np.mean(y_pred==y_test)","adf46410":"# initilize w and b\ndef gradientdescent(x,y):\n    w=np.zeros((x.shape[1]))\n    b=np.zeros(1)\n    ite=1000 #number of iteration\n    eta=0.7 #learning rate\n    loss_v=[]\n    for i in range(ite):\n        probability=sigmoid(x,w,b)\n        l=loss(x,w,y,b)\n        gradient=grad(x,y,w,b)\n        w=w- (eta*gradient)\n        b=b-(eta*np.sum(probability-y)\/x.shape[0])\n        loss_v.append(l)\n        if i%100==0:\n            print(l)\n    return w,b,loss_v","c3573550":"w,b,loss_v=gradientdescent(x,y)\ny_pred=sigmoid(x_test,w,b)\nfor j,i in enumerate(y_pred):\n    if i<0.5:\n        y_pred[j]=0\n    else:\n        y_pred[j]=1\n\nprint('test accuracy',accuracy(y_pred,y_test))","c031e4ce":"plt.plot(range(len(loss_v)),loss_v)\nplt.xlabel('iteration')\nplt.ylabel('loss')\nplt.show()","ccb6ae47":"batch_size=8\ndef sgd(x,y,batch_size):\n    # initilize w and b\n    w=np.zeros((x_train.shape[1]))\n    b=np.zeros(1)\n    ite=1000 #number of iteration\n    eta=0.7 #learning rate\n    loss_v=[]\n    for i in range(1000):\n        ind=np.random.choice(len(y_train),batch_size)\n        x_b=x[ind]\n        y_b=y[ind]\n        p=sigmoid(x_b,w,b)\n        l=loss(x_b,w,y_b,b)\n        gradient=grad(x_b,y_b,w,b)\n        w=w- (0.1*gradient)\n        b=b-(eta*np.sum(p-y_b)\/x.shape[0])\n        if i%10==0:\n            loss_v.append(l)\n        if i%100==0:\n            print('loss',l)\n    return w,b,loss_v","b9ba4507":"w,b,loss_v=sgd(x,y,32)\ny_pred=sigmoid(x_test,w,b)\nfor j,i in enumerate(y_pred):\n    if i<0.5:\n        y_pred[j]=0\n    else:\n        y_pred[j]=1\n\nprint('test accuracy',accuracy(y_pred,y_test))","a7f3459b":"plt.plot(range(len(loss_v)),loss_v)\nplt.xlabel('iteration')\nplt.ylabel('loss')\nplt.show()","648d296b":"batch_size=8\ndef sgdmomentum(x,y,batch_size):\n    # initilize w and b\n    w=np.zeros((x_train.shape[1]))\n    b=np.zeros(1)\n    ite=1000 #number of iteration\n    eta=0.7 #learning rate\n    alpha=0.9\n    loss_v=[]\n    v_t=np.zeros((x_train.shape[1])) \n    v_b=np.zeros(1)\n    for i in range(1000):\n        ind=np.random.choice(len(y_train),batch_size)\n        x_b=x[ind]\n        y_b=y[ind]\n        p=sigmoid(x_b,w,b)\n        l=loss(x_b,w,y_b,b)\n        gradient=grad(x_b,y_b,w,b)\n        v_t =(alpha*v_t) + (eta*gradient)\n        w=w-v_t\n        v_b=(alpha*v_b) + (eta*np.sum(p-y_b)\/x.shape[0])\n        b=b-v_b\n        if i%10==0:\n            loss_v.append(l)\n        if i%100==0:\n            print('loss',l)\n    return w,b,loss_v","61261fad":"w,b,loss_v=sgdmomentum(x,y,32)","716ea814":"plt.plot(range(len(loss_v)),loss_v)\nplt.xlabel('iteration')\nplt.ylabel('loss')\nplt.show()","45c78c10":"#Predction\ny_pred=sigmoid(x_test,w,b)\nfor j,i in enumerate(y_pred):\n    if i<0.5:\n        y_pred[j]=0\n    else:\n        y_pred[j]=1\n\nprint('test accuracy',accuracy(y_pred,y_test))","099f82e3":"from sklearn.linear_model import LogisticRegression","793bb02a":"model= LogisticRegression()\nmodel.fit(x_train,y_train)\ny_pred=model.predict(x_test)\nprint('test accuracy',accuracy(y_pred,y_test))","1aa763de":"# EDA<a id=2><\/a>","1a93cc2b":"### Table of content\n1. [EDA](#2)\n1. [Data Visulization](#4)\n1. [Logistic Regression using Gradient Descent ](#6)\n1. [Logistic Regression using Mini-batch SGD](#8)\n1. [Logistic Regression using SGD with momentum](#10)\n1. [Logistic Regression using using sklearn](#12)","fb490d7a":"# Data Visulization<a id=4><\/a>","1b892433":"# Logistic Regression using SGD with momentum<a id=10><\/a>","d2d668cb":"# Logistic Regression using Gradient Descent <a id=6><\/a>","f87f9369":"# Logistic Regression using Using sklearn<a id=12><\/a>","081ff7d9":"# Logistic Regression using Mini-batch SGD<a id=8><\/a>"}}