{"cell_type":{"814310a6":"code","955a22b7":"code","c7909375":"code","9dee0036":"code","a5a0705f":"code","0768af4b":"code","dd297cb2":"code","ee4bf0f0":"code","5bb19585":"code","bc2db3c7":"code","5824533b":"code","f2652ddf":"code","a8b4f959":"code","b461c9a1":"code","0337b2a1":"code","608e11d9":"code","c2e5b5f1":"code","88fc931c":"code","3077a602":"code","941c4e02":"code","aec569b2":"code","d80ea278":"code","c6d7c91f":"code","7f0d8a2d":"code","6624a861":"code","5fb48c6e":"code","536808a8":"code","7d7e92eb":"code","6d55e467":"code","5fe2e323":"code","1df37875":"code","d3feb74d":"code","0eae684c":"code","947932fa":"code","c3c43850":"code","48e17472":"code","6b0b2dd2":"code","a5d4874b":"code","51642801":"code","6b1e19b4":"code","860d1a9f":"code","23e7a03d":"code","2820c444":"code","fdd9e746":"code","5a657acb":"code","13d022f4":"code","30d613b7":"code","fa6cc0c6":"code","1cd36845":"code","c13a30ee":"code","0eaac2d1":"code","ac423a9b":"code","4e40e4a5":"code","ec680357":"code","60c58ea4":"code","b3690942":"code","5d3d3311":"code","9f43ec28":"code","79040383":"code","9c84b23d":"code","c042ec95":"code","2d270728":"code","6440da9f":"code","7e5e4c6d":"code","f789c111":"code","1dc19010":"code","7c3477d1":"code","9468c870":"code","54aa574f":"markdown","43817094":"markdown","f7a08490":"markdown","30a74050":"markdown","7712698e":"markdown","13f5a838":"markdown","93addfce":"markdown","e681b8df":"markdown","e96420d2":"markdown","fced1d85":"markdown","d5d7e59f":"markdown","037236f6":"markdown","2f99f4e6":"markdown","144ca2c1":"markdown","997c1134":"markdown","203e3196":"markdown","2f6f7acc":"markdown","8b0deb8d":"markdown","dbc7951a":"markdown","91fe7c95":"markdown","50e2cd1c":"markdown","aa6b332e":"markdown","cb70c513":"markdown","c81ec2c6":"markdown","746ddc55":"markdown","c786c00f":"markdown"},"source":{"814310a6":"import numpy as np\nimport pandas as pd\nimport matplotlib as plt\nimport seaborn as sns","955a22b7":"test_df = pd.read_csv('..\/input\/titanic\/test.csv')\ntrain_df = pd.read_csv('..\/input\/titanic\/train.csv')","c7909375":"train_df.head()","9dee0036":"train_df.info()","a5a0705f":"mean_age = train_df['Age'].mean()\ntrain_df['Age'].fillna(mean_age, inplace=True)\ntest_df['Age'].fillna(mean_age, inplace=True)","0768af4b":"train_df.info()","dd297cb2":"to_drop = ['Cabin']","ee4bf0f0":"# train_df['Cabin'].value_counts()\n# train_df['Cabin_reformat'] = train_df['Cabin'].str.replace('\\d+', '').str[0] # Get first character\n# train_df['Cabin_reformat'].value_counts()\n# train_df[['Pclass', 'Cabin_reformat']].loc[train_df['Cabin_reformat'].notnull()].value_counts() # Group Cabin with Class for better association","5bb19585":"# train_df['Cabin_reformat'] = train_df['Cabin'].str.replace('\\d+', '').str[0] # Get first character","bc2db3c7":"train_df.corr()","5824533b":"to_drop.extend((train_df.corr()['Survived'])[train_df.corr()['Survived'].abs() < 0.05].index.values)","f2652ddf":"age_bins = [0, 2, 8, 12, 18, 40, 100]\ntrain_df['AgeCat1'] = pd.cut(x=train_df['Age'], bins=age_bins, labels=[x for x in range(len(age_bins) - 1)]).astype('int')\n\nage_bins = [0, 2, 8, 16, 40, 100]\ntrain_df['AgeCat2'] = pd.cut(x=train_df['Age'], bins=age_bins, labels=[x for x in range(len(age_bins) - 1)]).astype('int')\n\nage_bins = [0, 2, 8, 14, 18, 40, 100]\ntrain_df['AgeCat3'] = pd.cut(x=train_df['Age'], bins=age_bins, labels=[x for x in range(len(age_bins) - 1)]).astype('int')\n\n\nage_bins = [0, 2, 6, 10, 14, 18, 40, 100]\ntrain_df['AgeCat4'] = pd.cut(x=train_df['Age'], bins=age_bins, labels=[x for x in range(len(age_bins) - 1)]).astype('int')\ntrain_df.corr()","a8b4f959":"train_df['AgeCat'] = train_df['AgeCat4']\nsns.histplot(x='AgeCat', data=train_df)","b461c9a1":"sns.barplot(x='AgeCat', y='Survived', data=train_df)","0337b2a1":"to_drop.extend(['Age1', 'AgeCat1', 'AgeCat2', 'AgeCat3', 'AgeCat4'])","608e11d9":"print(train_df['Embarked'].value_counts())\ntrain_df['Embarked'].fillna(train_df['Embarked'].value_counts().idxmax(), inplace=True)","c2e5b5f1":"test_df.head()","88fc931c":"test_df.info()","3077a602":"fare_mean = train_df['Fare'].mean()\ntest_df['Fare'].fillna(fare_mean, inplace=True)","941c4e02":"test_df['AgeCat'] = pd.cut(x=train_df['Age'], bins=age_bins, labels=[x for x in range(len(age_bins) - 1)]).astype('int')","aec569b2":"to_drop.extend(['PassengerId', 'Name', 'Ticket', 'SibSp', 'Parch'])\nprediction_ids = test_df['PassengerId'] # We'll use later on\n\nfor df in [train_df, test_df]:\n    df.drop(list(set(df.columns.values) & set(to_drop)), axis=1, inplace=True)","d80ea278":"# train_df.drop(list(set(train_df.columns.values) & set(to_drop)), axis=1, inplace=True)\ntrain_df.info()","c6d7c91f":"test_df.info()","7f0d8a2d":"train_df.head()","6624a861":"from sklearn.preprocessing import LabelEncoder\nle = LabelEncoder()\n\ntrain_df['Sex'] = le.fit_transform(train_df['Sex'])\ntest_df['Sex'] = le.transform(test_df['Sex'])","5fb48c6e":"train_df = pd.get_dummies(train_df, prefix=\"Embarked\",prefix_sep='_', columns=['Embarked'], drop_first=True)\ntest_df = pd.get_dummies(test_df, prefix=\"Embarked\",prefix_sep='_', columns=['Embarked'], drop_first=True)","536808a8":"train_df.head()","7d7e92eb":"test_df.head()","6d55e467":"train_df.describe()","5fe2e323":"from sklearn.model_selection import train_test_split\nX_train, X_test, y_train, y_test = train_test_split(train_df.iloc[:, 1:].values, train_df.iloc[:, 0].values, random_state=1)","1df37875":"model_scores = []","d3feb74d":"from tpot import TPOTClassifier","0eae684c":"tpot = TPOTClassifier(generations=8, population_size=50, verbosity=2)\ntpot.fit(X_train, y_train)\nprint(\"Accuracy is {}%\".format(tpot.score(X_test, y_test)*100))","947932fa":"from sklearn.ensemble import ExtraTreesClassifier\netc = ExtraTreesClassifier(bootstrap=True, criterion='entropy', max_features=0.55, min_samples_leaf=2, min_samples_split=6, n_estimators=100)","c3c43850":"etc.fit(X_train, y_train)","48e17472":"_score = etc.score(X_test, y_test);\nmodel_scores.append({'model': etc, 'score': _score})\nprint(_score)","6b0b2dd2":"from sklearn.neighbors import KNeighborsClassifier\nfrom sklearn import metrics","a5d4874b":"knn = KNeighborsClassifier(n_neighbors=5)\nknn.fit(X_train, y_train)","51642801":"_score = knn.score(X_test, y_test);\nmodel_scores.append({'model': knn, 'score': _score})\nprint(_score)","6b1e19b4":"from sklearn.linear_model import SGDClassifier\nsgd = SGDClassifier()\nsgd.fit(X_train, y_train)","860d1a9f":"_score = sgd.score(X_test, y_test);\nmodel_scores.append({'model': sgd, 'score': _score})\nprint(_score)","23e7a03d":"from sklearn.linear_model import LinearRegression\nlr = LinearRegression()\nlr.fit(X_train, y_train)","2820c444":"_score = lr.score(X_test, y_test);\nmodel_scores.append({'model': lr, 'score': _score})\nprint(_score)","fdd9e746":"from sklearn.tree import DecisionTreeClassifier\ndtc = DecisionTreeClassifier()\ndtc.fit(X_train, y_train)","5a657acb":"_score = dtc.score(X_test, y_test);\nmodel_scores.append({'model': dtc, 'score': _score})\nprint(_score)","13d022f4":"model_df = pd.DataFrame(model_scores)\nbest_model = model_df.sort_values(by='score', ascending=False).iloc[0]['model']","30d613b7":"best_model","fa6cc0c6":"prediction_ids.head()","1cd36845":"test_df.head()","c13a30ee":"predictions = best_model.predict(test_df)\noutput = pd.DataFrame({'PassengerId': prediction_ids, 'Survived': predictions})","0eaac2d1":"output","ac423a9b":"output.to_csv('submission.csv', index=False)","4e40e4a5":"import matplotlib.pyplot as plt\nplt.plot(n_range, scores)\nplt.title('Score against number of Neighbors for KNN')\nplt.xlabel('K Neighbors')\nplt.ylabel('Score')","ec680357":"train_df.corr().abs()","60c58ea4":"plt.scatter(train_df['Fare'], train_df['AgeCat'], s=(train_df['Pclass']-4)*-40, alpha=0.1, c=train_df['Survived'], cmap='RdBu')\nplt.xlabel('Fare Price')\nplt.ylabel('Age Category')","b3690942":"plt.scatter(train_df['Fare'], train_df['Age'], s=(3*train_df['Pclass']-10)*-20, alpha=0.1, c=train_df['Survived'], cmap='RdBu')\nplt.xlabel('Fare Price')\nplt.ylabel('Age #');","5d3d3311":"train_df[train_df['Fare'] > 350]","9f43ec28":"_train_df = pd.read_csv('..\/input\/titanic\/train.csv')","79040383":"_train_df['Embarked'].mode()","9c84b23d":"train_df['Cabin_reformat'].value_counts()","c042ec95":"train_df[['Pclass', 'Cabin_reformat']].loc[train_df['Cabin_reformat'].notnull()].value_counts()","2d270728":"sns.histplot(data=train_df, x=\"Age\")","6440da9f":"train_df[['Pclass', 'Fare', 'Age']].loc[train_df['Cabin'].notnull()]","7e5e4c6d":"train_df[train_df['Pclass'] == 1][['Pclass', 'Fare', 'Age', 'Survived']].head()","f789c111":"sns.histplot(data=train_df[train_df['Pclass'] == 1][['Pclass', 'Fare', 'Age', 'Survived']], x='Fare')","1dc19010":"sns.histplot(data=train_df[(train_df['Pclass'] == 2) & (train_df['Age'] < 15)][['Pclass', 'Fare', 'Age', 'Survived']], x='Fare')","7c3477d1":"sns.histplot(data=train_df[(train_df['Pclass'] == 2) & (train_df['Survived'] == 0)][['Pclass', 'Fare', 'Age', 'Survived']], x='Fare')","9468c870":"len(train_df[(train_df['Age'] < 18) & (train_df['Pclass'] == 1) & (train_df['Survived'] == 1)])","54aa574f":"## Use `TPOT` to find best performing model","43817094":"### Fare","f7a08490":"# Transform testing data","30a74050":"We preserved the test data's passanger id's in `test_passengerId_df` and we have the preprocessed test data in `test_df`.\\\nWe can now begin generating predictions and associate them with the appropriate passengers in order to get a score for our predictions.","7712698e":"Use `LabelEncoder` for `Sex`","13f5a838":"## Dealing Missing Cabins - make age catagorical instead of numerical to get better predictions\nInitially, the thought was to correlate both `Cabin` location (A,B,C...) with `Pclass` in order to get better catagorization.\\\nBut for now, and since we are missing so many entries, it is best to just drop the data.\n\nCabins are catagorical in a way, but are way to spread out and miss a lot of data.\\\nSo we will just remove them for now.","93addfce":"### Use best performing\n## Extra Trees Classifier","e681b8df":"## Fill Missing Embarks \nMost likely to be `S`","e96420d2":"# Submission","fced1d85":"# Choose best model","d5d7e59f":"### Drop the redundant age columns\nDrop the other age catagories and age columns","037236f6":"# Drop Unnecesary Columns\nDon't need `PassengerId`, `Name`, `Ticket`, and can't really get anything significant from `SibSp` and `Parch`","2f99f4e6":"Use `OneHotEncoding` for `Embarked` location","144ca2c1":"## Dealing Missing ages - make age catagorical instead of numerical to get better predictions\nAfter looking at the data, I (Mr. Gonen Matias) found that the number of children in first and second class is significantly lower than the number of children in 3rd class. I wanted to correlate the `Pclass` and the `Fare` to predict if the passenger was a child. With that in mind, the best decision is to just fill in the missing data entries with the mean `Age`.","997c1134":"## Linear Regression","203e3196":"## See any other insigniciant numerical fields\nI want to figure out which features are insignificant by analyzing the correlation matrix in regards to `Survived` and drop them.\\\n_**Note**: drop what ever is less than `0.05` correlation_.","2f6f7acc":"### Encode Data\nEncode `Sex` and`Embarked`","8b0deb8d":"### Generate predictions","dbc7951a":"### Age","91fe7c95":"## Decision Trees","50e2cd1c":"# Model Selection\nStore all models with their corresponding scores","aa6b332e":"## SGD Classifier","cb70c513":"# Split Data to Train\/Test","c81ec2c6":"## K-Nearest Neighbors\n*Note*: I ran analysis earlier (corresponding with Dr. Struggle due to initial struggle) that concluded that `n_neighbors=5` is a good hyper parameter for `KNN`.","746ddc55":"## Age should probably have a bigger correlation to chances of survival\nLooking at the data reveals that children (`Age` < 18) in accordance to class have a much higher rate of survival.\\\nTherefore, it would probably make sense to transform `Age` into a catagorical field, rather then a numerical range.","c786c00f":"### Export output for submission"}}