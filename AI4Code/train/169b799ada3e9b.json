{"cell_type":{"995eb5ca":"code","bb3d3e56":"code","2de7c23b":"code","b60f5fd0":"code","eb6802c4":"code","e31824e2":"code","86c0d4aa":"code","2af5d05a":"markdown","df80a636":"markdown","a7968389":"markdown"},"source":{"995eb5ca":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory\n\nimport os\nimport glob\n\nimport pydicom\n\nprint(os.listdir(\"..\/input\/siim-acr-pneumothorax-segmentation\"))\nprint()\nprint(os.listdir(\"..\/input\/siim-acr-pneumothorax-segmentation\/sample images\"))\n# Any results you write to the current directory are saved as output.\n\nfrom matplotlib import cm\nfrom matplotlib import pyplot as plt\n\nimport tensorflow as tf\n\nfrom tqdm import tqdm_notebook\n\nimport sys\nsys.path.insert(0, '..\/input\/siim-acr-pneumothorax-segmentation')\n\nfrom mask_functions import rle2mask\n\nimport cv2","bb3d3e56":"def show_dcm_info(dataset):\n    print(\"Filename.........:\", file_path)\n    print(\"Storage type.....:\", dataset.SOPClassUID)\n    print()\n\n    pat_name = dataset.PatientName\n    display_name = pat_name.family_name + \", \" + pat_name.given_name\n    print(\"Patient's name......:\", display_name)\n    print(\"Patient id..........:\", dataset.PatientID)\n    print(\"Patient's Age.......:\", dataset.PatientAge)\n    print(\"Patient's Sex.......:\", dataset.PatientSex)\n    print(\"Modality............:\", dataset.Modality)\n    print(\"Body Part Examined..:\", dataset.BodyPartExamined)\n    print(\"View Position.......:\", dataset.ViewPosition)\n    \n    if 'PixelData' in dataset:\n        rows = int(dataset.Rows)\n        cols = int(dataset.Columns)\n        print(\"Image size.......: {rows:d} x {cols:d}, {size:d} bytes\".format(\n            rows=rows, cols=cols, size=len(dataset.PixelData)))\n        if 'PixelSpacing' in dataset:\n            print(\"Pixel spacing....:\", dataset.PixelSpacing)\n\ndef plot_pixel_array(dataset, figsize=(10,10)):\n    plt.figure(figsize=figsize)\n    plt.imshow(dataset.pixel_array, cmap=plt.cm.bone)\n    plt.show()\n","2de7c23b":"start = 5   # Starting index of images\nnum_img = 4 # Total number of images to show\n\nfig, ax = plt.subplots(nrows=1, ncols=num_img, sharey=True, figsize=(num_img*10,10))\nfor q, file_path in enumerate(glob.glob('..\/input\/siim-acr-pneumothorax-segmentation\/sample images\/*.dcm')[start:start+num_img]):\n    dataset = pydicom.dcmread(file_path)\n    #show_dcm_info(dataset)\n    \n    ax[q].imshow(dataset.pixel_array, cmap=plt.cm.bone)\n","b60f5fd0":"df = pd.read_csv('..\/input\/siim-acr-pneumothorax-segmentation\/sample images\/train-rle-sample.csv', header=None, index_col=0)\n\nfig, ax = plt.subplots(nrows=1, ncols=num_img, sharey=True, figsize=(num_img*10,10))\nfor q, file_path in enumerate(glob.glob('..\/input\/siim-acr-pneumothorax-segmentation\/sample images\/*.dcm')[start:start+num_img]):\n    dataset = pydicom.dcmread(file_path)\n    #print(file_path.split('\/')[-1][:-4])\n    ax[q].imshow(dataset.pixel_array, cmap=plt.cm.bone)\n    if df.loc[file_path.split('\/')[-1][:-4],1] != '-1':\n        mask = rle2mask(df.loc[file_path.split('\/')[-1][:-4],1], 1024, 1024).T\n        ax[q].set_title('See Marker')\n        ax[q].imshow(mask, alpha=0.3, cmap=\"Reds\")\n    else:\n        ax[q].set_title('Nothing to see')\n","eb6802c4":"clahe = cv2.createCLAHE(clipLimit=2.0, tileGridSize=(16, 16))","e31824e2":"start = 5   # Starting index of images\nnum_img = 4 # Total number of images to show\n\nfig, ax = plt.subplots(nrows=1, ncols=num_img, sharey=True, figsize=(num_img*10,10))\nfor q, file_path in enumerate(glob.glob('..\/input\/siim-acr-pneumothorax-segmentation\/sample images\/*.dcm')[start:start+num_img]):\n    dataset = pydicom.dcmread(file_path)\n\n    src_img = dataset.pixel_array\n    img_clahe = clahe.apply(src_img)\n    \n    ax[q].imshow(img_clahe, cmap=plt.cm.bone)","86c0d4aa":"df = pd.read_csv('..\/input\/siim-acr-pneumothorax-segmentation\/sample images\/train-rle-sample.csv', header=None, index_col=0)\n\nfig, ax = plt.subplots(nrows=1, ncols=num_img, sharey=True, figsize=(num_img*10,10))\nfor q, file_path in enumerate(glob.glob('..\/input\/siim-acr-pneumothorax-segmentation\/sample images\/*.dcm')[start:start+num_img]):\n    dataset = pydicom.dcmread(file_path)\n    src_img = dataset.pixel_array\n    img_clahe = clahe.apply(src_img)\n    ax[q].imshow(img_clahe, cmap=plt.cm.bone)\n    if df.loc[file_path.split('\/')[-1][:-4],1] != '-1':\n        mask = rle2mask(df.loc[file_path.split('\/')[-1][:-4],1], 1024, 1024).T\n        ax[q].set_title('See Marker')\n        ax[q].imshow(mask, alpha=0.3, cmap=\"Reds\")\n    else:\n        ax[q].set_title('Nothing to see')\n","2af5d05a":"# Before","df80a636":"This kernel is froked from [Intro - chest xray, DICOM, viz, U-nets - full data](https:\/\/www.kaggle.com\/jesperdramsch\/intro-chest-xray-dicom-viz-u-nets-full-data) <br\/>\nand revised from my old kernel [silver medalImage Pre-processing for Wild Images](https:\/\/www.kaggle.com\/seriousran\/image-pre-processing-for-wild-images).\n\nI'm not sure if this pre-processing is helpful or not, however, looks clearer.\nHave a look \"before & after\"","a7968389":"<br\/>\n# After\n## CLAHE(Contrast Limited Adaptive Histogram Equalization)\n![](http:\/\/)ref: https:\/\/docs.opencv.org\/3.1.0\/d5\/daf\/tutorial_py_histogram_equalization.html"}}