{"cell_type":{"101b1eba":"code","5e313c98":"code","c0eb5193":"code","87eaa2bf":"code","d9dc09fe":"code","ae55d3a1":"code","16db7d57":"code","11a58563":"code","0481fae3":"code","7b39c617":"code","6b7e1461":"code","6d38dbd9":"code","ea95a2a4":"code","fb61a067":"code","9f95bb20":"code","3c871525":"code","29d973a0":"code","72915497":"code","e6b4ab7c":"code","a877c591":"code","e9f1cb23":"code","c56c211e":"code","ab5345f5":"code","5eb9a8c5":"code","174bcd07":"markdown","07f7a2e1":"markdown","8fb9d2ed":"markdown","7adb5848":"markdown","58dca2f2":"markdown","3838d20a":"markdown","c9297bf1":"markdown","3fe03b1e":"markdown"},"source":{"101b1eba":"import shapely.geometry as shg\nimport matplotlib.pyplot as plt\nfrom pylab import rcParams\n\nrcParams['figure.figsize'] = 8, 8 #makes our plots bigger!\n\ndef areasign(tri):\n    \"\"\"Finds the sign of the area of a closed triangle\n\n    Parameters\n    ----------\n    tri : List\n        List of coordinate tuples in the format\n        [(x, y), (x, y). (x, y), (x, y)]\n        First and last vertex are the same\n    \n    Returns\n    -------\n    int (-1, 1, 0)\n        -1 if the triangle is encoded clockwise\n        1  if the triangle is encoded anti-clockwise\n        0  if the coordinates are a 1d line\n    \"\"\"\n    sumarea = 0\n    for i in range(0, len(tri)-1):\n        xi = tri[i][0]\n        yi = tri[i][1]\n        xj = tri[i+1][0]\n        yj = tri[i+1][1]\n        sumarea = sumarea + ((xi*yj)-(yi*xj))\n        \n    if sumarea == 0: return 0\n    if sumarea < 0:  return -1\n    if sumarea > 0:  return 1\n\ndef create_triangle(test_pt, line_seg):\n    \"\"\" Creates a closed triangle from a test point and a line segment\n    \n    Parameters\n    ----------\n    test_pt : the test point in the format (x, y)\n    line_seg: the line segment in the format [(x, y), (x, y)]\n    \n    Returns\n    -------\n    A triangle consisting of 4 coordinate tuples\n    \"\"\"\n    tri = line_seg.copy()\n    \n    tri.insert(0, test_pt)\n    tri.append(test_pt)\n    \n    return tri\n\ndef line_intersection(line1, line2):\n    \"\"\" Tests whether 2 line segments intersect\n    \n    Parameters\n    ----------\n    line1 : the first line segment in the format [(x, y), (x, y)]\n    line2 : the second line segment in the format [(x, y), (x, y)] \n    \n    Returns\n    -------\n    True if the segmenets intersect,otherwise False\n    \"\"\"\n    \n    #create 4 triangles from the\n    #start and end points of each line and the other line\n    tri1 = create_triangle(line2[0], line1)\n    tri2 = create_triangle(line2[1], line1)\n    tri3 = create_triangle(line1[0], line2)\n    tri4 = create_triangle(line1[1], line2)\n    \n    #Calculate the signs of the  areas of these triangles\n    tri1sign = areasign(tri1)\n    tri2sign = areasign(tri2)\n    tri3sign = areasign(tri3)\n    tri4sign = areasign(tri4)\n    \n    #if the signs are not equal then the lines intersect\n    if ((tri1sign != tri2sign) and (tri3sign != tri4sign)):\n        return True\n    else:\n        return False","5e313c98":" \"\"\" Defining the details of the point in polygon test case by assigning coordinates \n     to the polygon, test point and half life.\n    \"\"\"\n\n#A polygon\np = [(1.0, 1.0), (1.0, 5.0), (5.0, 5.0),(5.0, 1.0), (1.0, 1.0)] \n\n#the test point\ntest_pt = (2, 3)  \n\nhalf_line = [test_pt, (4, 8)] ","c0eb5193":"# The half line (truncated here!)\nxy = list(zip(*p))\nplt.plot(xy[0], xy[1])\nplt.plot(test_pt[0], test_pt[1], 'ro')\nplt.plot([2, 4], [3, 8], 'g-')","87eaa2bf":"# To iterate over a polygon we use a loop\n# You might recognise this - it is the same code as as in the Area and Areasign functions\nprint(p)\ncounter = 1\nfor i in range(len(p)-1):\n    print ('Line segment {} is ({}, {})'.format(counter, p[i], p[i+1]))\n    counter = counter + 1","d9dc09fe":"\"\"\" Below is the created function that contains the code for the 'PiP' algorithm.\n  \"\"\"\n\ndef pointinpolygon(test_pt,p):\n    half_line = [test_pt,(4,8)] #plot the half line\n    counter = 0 #set the counter to zero\n    \n    for i in range(len(p)-1): #Put the polygon into a list, minus 1 as we finish on the start coord.\n        res = line_intersection(half_line, [p[i], p[i+1]]) #iterate over every segment\n        if res == True:\n            counter = counter + 1 #add 1 to the counter for every line intersection \n        \n    if counter % 2 == 0: #modulus determines whether intersections odd or even\n        return False #if when remaining no. is zero when divided by 2, point outside polygon\n    else: \n        return True #if modulus isn't zero, line intersection is even = point is inside polygon\n        \nprint(pointinpolygon(test_pt,p))  \n","ae55d3a1":"from shapely.geometry import Point, Polygon\n\ntest_pt1 = Point(3,3)\ntest_pt2 = Point(10,3)\ntest_pt3 = Point(5,4)\ntest_pt4 = Point(5,30)\n\np1 = Polygon([(1.0,1.0),(1.0,5.0),(5.0,5.0),(5.0,1.0),(1.0,1.0)])\np2 = Polygon([(5.0,2.0),(7.0,3.0),(11.0,3.0),(50.0,15.0),(6.0,4.0),(1.0,7.0),(5.0,2.0)])\n","16db7d57":"print(test_pt1.within(p1)) #Shapely (point within polygon) function\nprint(test_pt2.within(p1))\nprint(test_pt3.within(p2))\nprint(test_pt4.within(p2))\n","11a58563":"f = open(\"..\/input\/vector\/test_polygons1.txt\")\nfor i in f:\n    print(i)","0481fae3":"from shapely import wkt\nlist_of_polygons = [] #to store the polygons we read in our format\nf = open ('..\/input\/vector\/test_polygons2.txt') #Open the file (mine is stored in the subfolder vector)\n\n#iterate over the file\nfor each_line in f: \n    poly = wkt.loads(each_line)           #read WKT format into a Polygon (it recognises the type)\n    print(list(poly.exterior.coords))     #use coords to generate lists in our format\n    list_of_polygons.append(list(poly.exterior.coords))         #add the polygon to our list of polygons","7b39c617":"display(list_of_polygons)","6b7e1461":"\nlist_of_points = []   #to store the polygons we read in our format\n\nf = open ('..\/input\/vector\/test_points1.txt') \n\n#iterate over the file\nfor each_line in f: \n    pt = wkt.loads(each_line)           \n    print(list(pt.coords))     \n    list_of_points.append(pt.coords[0])  #So we get a list of coordinates","6d38dbd9":"display(list_of_points) #putting the points into tuple format","ea95a2a4":"#Let's see what we have\n\nfor poly in list_of_polygons:\n    xy = list(zip(*poly))\n    plt.fill(xy[0], xy[1], alpha=0.5)\n    \nfor pt in list_of_points:\n    #print(pt)\n    plt.plot(pt[0], pt[1], 'bx', ms=12)","fb61a067":"for pt in list_of_points:\n    for poly in list_of_polygons:\n        ans = pointinpolygon(pt,poly)\n        if ans == True:\n            print('Point {} is located inside   {}.'.format(pt,poly))\n        else:\n            print('Point {} is located outside   {}'.format(pt,poly))","9f95bb20":"import fiona                             #a library that reads spatial formats\nfrom shapely.geometry import shape\n\nshapefile_polygons = []                  #a list to store the polygons we load\n\n\nc = fiona.open('..\/input\/shapefiles\/test_polygon_shapefile.shp') #Open the shapefile\n\nfor each_poly in c:\n    geom = shape(each_poly['geometry'])\n    poly_data = each_poly[\"geometry\"][\"coordinates\"][0]  #EXTERIOR RING ONLY\n    poly = shg.Polygon(poly_data)\n    print(poly)\n    #Converts into the same format as the other data\n    shapefile_polygons.append(list(poly.exterior.coords))\n\ndisplay(shapefile_polygons)","3c871525":"# And read the points from a shapefile\nshapefile_points = []\n\nc = fiona.open('..\/input\/shapefiles\/test_point_shapefile.shp')\n\nfor each_pt in c:\n    geom = shape(each_pt['geometry'])\n    pt_data = each_pt[\"geometry\"][\"coordinates\"]\n    pt = shg.Point(pt_data)\n    print(pt)\n    shapefile_points.append(pt.coords[0])\n\ndisplay(shapefile_points)","29d973a0":"# and we can plot these out\nplt.gca().set_aspect('equal', adjustable='box')  #To make the x and y axis the same scale\n\nfor poly in shapefile_polygons:\n    xy = list(zip(*poly))\n    plt.fill(xy[0], xy[1], alpha=0.5)\n    \nfor pt in shapefile_points:\n    plt.plot(pt[0], pt[1], 'bx', ms=12)","72915497":"for pt in shapefile_points: \n    for poly in shapefile_polygons:\n        ans = pointinpolygon(pt,poly) #Testing to see if the shapefile points(1) are inside the shapefile polygons(2)\n        print('Point {} is located outside  {}'.format(pt,poly))","e6b4ab7c":"#Plotting these on a real map\n\nimport folium\nimport geopandas as gpd\n\n#read the files using geopandas\npolys=gpd.read_file('..\/input\/shapefiles\/test_polygon_shapefile.shp')\npoints = gpd.read_file('..\/input\/shapefiles\/test_point_shapefile.shp')\n\n#Find the centroid to position the map\ncentroidp = polys.geometry.centroid \n#Convert from CRS British national grid to WGS84\nwgspolys = polys.to_crs(\"EPSG:4326\").to_json()\nwgspoints = points.to_crs(\"EPSG:4326\").to_json()\nwgscentre = centroidp.to_crs(\"EPSG:4326\")\n\nlong = wgscentre.x\nlat = wgscentre.y\n\n#Find spatial mean\nlong = long.mean()\nlat = lat.mean()\n\n#Plot it\nmymap = folium.Map(location=[lat, long], tiles='openstreetmap', zoom_start=13)\nplotpoly =folium.features.GeoJson(wgspolys)\nplotpts = folium.features.GeoJson(wgspoints)\nmymap.add_child(plotpoly)\nmymap.add_child(plotpts)","a877c591":"    \"\"\" Here the four degenerative cases are being tested in Shapely using the 'Poly contains' code. \n    This will act as a secondary check against my function and it will correctly determine whether \n    the points are inside or outside of the polygons tor each degenerative cases. \n    See the report for an explanation and a plot of each degenerative case.\"\"\"","e9f1cb23":"#Using Shapely to test degenerative case 1 (Half-line is tangent to polygon)\n\nfrom shapely.geometry import Point,Polygon\n\np1 = Point(-1.0,3.0)\n\npoly1 = [(1.0, 1.0), (1.0, 5.0), (5.0, 5.0),\n(5.0, 1.0), (1.0, 1.0)]\n\nTP=shg.Point(p1)\npoly=shg.Polygon(poly1)\nres=(poly.contains(TP))\nif res==True:\n    print(\"inside\")\nelse:\n    print(\"outside\")\n","c56c211e":"#Using Shapely to test degenerative case 2 example: (Half-line passes through vertex) \n\nfrom shapely.geometry import Point,Polygon\n\np1 = Point(4.0,4.0)\n\npoly1 = [(1.0, 1.0), (1.0, 5.0), (5.0, 5.0),\n(5.0, 1.0), (1.0, 1.0)]\n\nTP=shg.Point(p1)\npoly=shg.Polygon(poly1)\nres=(poly.contains(TP))\nif res==True:\n    print(\"inside\")\nelse:\n    print(\"outside\")","ab5345f5":"#Using Shapely to test degenerative case 3 example: (Half line is collinear with line segment)\n\nfrom shapely.geometry import Point,Polygon\n\np1 = Point(4.0,2.0)\n\npoly1 = [(1.0, 1.0), (1.0, 5.0), (5.0, 5.0), \n(5.0, 4.0), (4.0, 4.0),(4.0, 2.5),\n(5.0, 2.5),(5.0, 1.0), (1.0, 1.0)]\n\nTP=shg.Point(p1)\npoly=shg.Polygon(poly1)\nres=(poly.contains(TP))\nif res==True:\n    print(\"inside\")\nelse:\n    print(\"outside\")","5eb9a8c5":"#Using Shapely to test degenerative case 4 example: (Test point on boundary)\n\nfrom shapely.geometry import Point,Polygon\n\np1 = Point(3.0,1.0)\n\npoly1 = [(1.0, 1.0), (1.0, 5.0), (5.0, 5.0), \n(5.0, 4.0), (4.0, 4.0),(4.0, 2.5),\n(5.0, 2.5),(5.0, 1.0), (1.0, 1.0)]\n\nTP=shg.Point(p1)\npoly=shg.Polygon(poly1)\nres=(poly.contains(TP))\nif res==True:\n    print(\"inside\")\nelse:\n    print(\"outside\")","174bcd07":"**Testing my function using Shapely to test basic 'point in polygon' examples**","07f7a2e1":" # The point in polygon function","8fb9d2ed":"# Degenerative case testing in Shapely","7adb5848":"# Testing the shapefile point and polygons and printing the results","58dca2f2":"Loading the necessary libraries and the areasign,create_triangle and line intersection functions needed for the point in polygon test.","3838d20a":"# Testing the text file (WKT) test data and printing the results ","c9297bf1":"# So now we have list of points and polygons and we iterate over them to test point in polygon\n# Finally we will load points and polygons from a shapefile and do the same","3fe03b1e":"READING POLYGON DATA FROM A FILE\ntest_polygons1.txt looks like this\n\nPOLYGON((1 1,1 5,5 5,5 1,1 1))\n\nPOLYGON((30 10,40 40,20 40,10 20,30 10))\n\nPOLYGON((2 1,1 4,4 5,3 4,6.5 4,6 5,8.5 2.5,2 1))\n\nThis is a format called Well Known Text - you can find out more here:\n\nWell Known Text - External Link\n\nThe type of geoemtry comes first, then 2 brackets if a polygon and then x, y pairs are separated by commas. X andY coordinates are separated by a space.\n\nWe want to convert that into a bunch of polygons in our format eg:\n\n[(1.0, 1.0), (1.0, 5.0), (5.0, 5.0), (5.0, 1.0), (1.0, 1.0)]\n\nTo do this we will use the SHAPELY library that reads WKT"}}