{"cell_type":{"53accca0":"code","1b3abc65":"code","9f239a2e":"code","4956222e":"code","51669d4f":"code","e532c3ea":"code","52e5291a":"code","2c0acfd3":"code","9990b8e0":"code","ebdb0b6e":"code","7dafc606":"code","cb971ada":"code","496eb29e":"code","dfc4a0a7":"code","b43eda11":"code","8a54be7b":"code","17fc9378":"code","7b749b84":"code","bba55770":"code","05cea3e4":"code","4eae88ee":"code","06590dd2":"code","76a4c36c":"code","8c4982ba":"code","e5295617":"code","b6d7962e":"code","13245071":"code","25c9fc25":"code","b9757eaa":"code","47dbae67":"code","f04b29c6":"code","0e2b72ac":"code","4ba0f307":"code","cae0e28b":"code","944ea504":"code","996dc340":"code","3bdcea3d":"code","2b9e6c55":"code","790f69dd":"code","7b4647a0":"code","039c211f":"code","bf2f4471":"code","6f5c771d":"code","26a6949d":"code","292a2cb0":"code","d68b1fad":"code","f1604ca1":"code","23f25103":"code","2dff15f5":"code","83574308":"code","37759667":"code","7d99fa22":"code","b50ccb93":"markdown","8036bc2b":"markdown","11ca183f":"markdown","41302bf9":"markdown","e713c468":"markdown","e200ea28":"markdown","f7a08729":"markdown","6fe8063b":"markdown","d0d21fc2":"markdown"},"source":{"53accca0":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns","1b3abc65":"data = pd.read_csv(\"..\/input\/breast-cancer-wisconsin-data\/data.csv\")","9f239a2e":"data.head()","4956222e":"data.columns","51669d4f":"data.info()","e532c3ea":"data.isnull().sum()","52e5291a":"data =data.drop(labels=[\"Unnamed: 32\"],axis=1)","2c0acfd3":"data[\"diagnosis\"] = data[\"diagnosis\"].replace(\"M\",1)","9990b8e0":"data[\"diagnosis\"] = data[\"diagnosis\"].replace(\"B\",0)","ebdb0b6e":"data.describe()","7dafc606":"plt.figure(figsize = (20, 15))\nsns.set(style=\"darkgrid\")\nplotnumber = 1\n\nfor column in data:\n    if plotnumber <= 30:\n        ax = plt.subplot(5, 6, plotnumber)\n        sns.histplot(data[column],kde=True)\n        plt.xlabel(column)\n        \n    plotnumber += 1\nplt.show()","cb971ada":"plt.figure(figsize = (20, 15))\nplotnumber = 1\n\nfor column in data:\n    if plotnumber <= 30:\n        ax = plt.subplot(5, 6, plotnumber)\n        sns.boxplot(x=data[column])\n        plt.xlabel(column)\n       \n    plotnumber += 1\nplt.title(\"Distribution\")\nplt.show()","496eb29e":"plt.figure(figsize = (30, 15))\nsns.heatmap(data.corr(),annot=True)","dfc4a0a7":"sns.pairplot(data,\n             x_vars=[\n                          'area_worst',\n                     'smoothness_worst',\n                  'compactness_worst',\n                     'concavity_worst',\n                     'concave points_worst',\n                        'symmetry_worst',\n                      'fractal_dimension_worst'],\n             y_vars=[\"diagnosis\"])","b43eda11":"sns.pairplot(data,\n             x_vars=[  'concavity_se', \n                     'concave points_se',\n                     'symmetry_se',\n                     'fractal_dimension_se',\n                     'radius_worst', \n                     'texture_worst',\n                  'perimeter_worst'],\n             y_vars=[\"diagnosis\"])","8a54be7b":"sns.pairplot(data,\n             x_vars=[\n                     'fractal_dimension_mean',\n                       'radius_se', \n                     'texture_se', \n                     'perimeter_se',\n                     'area_se',\n                     'smoothness_se',\n                    'compactness_se'],\n                y_vars=[\"diagnosis\"])","17fc9378":"sns.pairplot(data,\n             x_vars=['radius_mean', \n                           'texture_mean', \n                              'area_mean', \n                     'smoothness_mean',\n                     'compactness_mean', \n                     'concavity_mean',\n                  'concave points_mean',\n                     'symmetry_mean'],\n                      y_vars=[\"diagnosis\"])","7b749b84":"c={\"Agg_of_all\":(data[\"radius_mean\"]+data[\"texture_mean\"]+data[\"perimeter_mean\"]+data[\"area_mean\"]+data[\"smoothness_mean\"]+data[\"compactness_mean\"]+\n                data[\"concavity_mean\"]+data[\"concave points_mean\"]+data[\"symmetry_mean\"]+data[\"fractal_dimension_mean\"]+data[\"radius_se\"]+data[\"texture_se\"]+\n                data[\"perimeter_se\"]+data[\"area_se\"]+data[\"smoothness_se\"]+data[\"compactness_se\"]+data[\"concavity_se\"]+data[\"concave points_se\"]+\n                data[\"fractal_dimension_se\"]+data[\"symmetry_se\"]+data[\"radius_worst\"]+data[\"texture_worst\"]+data[\"perimeter_worst\"]+data[\"area_worst\"]+\n                data[\"smoothness_worst\"]+data[\"compactness_worst\"]+data[\"concavity_worst\"]+data[\"concave points_worst\"]+data[\"symmetry_worst\"]+data[\"fractal_dimension_worst\"]),\"diagnosis\":data[\"diagnosis\"]}\ndata_1 = pd.DataFrame(data=c)","bba55770":"data_1.head()","05cea3e4":"data_1[\"Agg_of_all\"]=(data_1[\"Agg_of_all\"]-data_1[\"Agg_of_all\"].min())\/(data_1[\"Agg_of_all\"].max()-data_1[\"Agg_of_all\"].min())","4eae88ee":"data_1.head()","06590dd2":"sns.scatterplot(data = data_1, x=\"Agg_of_all\",y=\"diagnosis\",legend='auto')","76a4c36c":"from statsmodels.stats.outliers_influence import variance_inflation_factor","8c4982ba":"def claculate_vif(dataset):\n    vif=pd.DataFrame()\n    vif_features = dataset.columns\n    vif[\"vif_values\"] = [variance_inflation_factor(dataset.values,i) for i in range (dataset.shape[1])]\n    return vif","e5295617":"features = data[['radius_mean', 'texture_mean', \n       'area_mean', 'smoothness_mean', 'compactness_mean', 'concavity_mean',\n       'concave points_mean', 'symmetry_mean', 'fractal_dimension_mean',\n       'radius_se', 'texture_se', 'perimeter_se', 'area_se', 'smoothness_se',\n       'compactness_se', 'concavity_se', 'concave points_se', 'symmetry_se',\n       'fractal_dimension_se', 'radius_worst', 'texture_worst',\n       'perimeter_worst', 'area_worst', 'smoothness_worst',\n       'compactness_worst', 'concavity_worst', 'concave points_worst',\n       'symmetry_worst', 'fractal_dimension_worst']]\nclaculate_vif(features)","b6d7962e":"X=data[['radius_mean', 'perimeter_mean',\n       'area_mean', 'smoothness_mean', 'compactness_mean', 'concavity_mean',\n       'concave points_mean', 'symmetry_mean', 'fractal_dimension_mean',\n       'radius_se', 'texture_se', 'perimeter_se', 'area_se', 'smoothness_se',\n       'compactness_se', 'concavity_se', 'concave points_se', 'symmetry_se',\n       'fractal_dimension_se', 'radius_worst', 'texture_worst',\n       'perimeter_worst', 'area_worst', 'smoothness_worst',\n       'compactness_worst', 'concavity_worst', 'concave points_worst',\n       'symmetry_worst', 'fractal_dimension_worst']]\nY=data[\"diagnosis\"]","13245071":"from sklearn.model_selection import train_test_split\nX_train, X_test, Y_train, Y_test = train_test_split(X,Y, test_size=0.3,random_state=500)","25c9fc25":"#scaling data\n\nfrom sklearn.preprocessing import StandardScaler\nscaler = StandardScaler()\nX_train = scaler.fit_transform(X_train)\nX_test = scaler.transform(X_test)","b9757eaa":"#Logistic Regression","47dbae67":"from sklearn.linear_model import LogisticRegression\nclassifier = LogisticRegression()\nclassifier.fit(X_train,Y_train)","f04b29c6":"y_pred = classifier.predict(X_test)","0e2b72ac":"from sklearn.metrics import accuracy_score, confusion_matrix, classification_report\nprint(accuracy_score(Y_test, classifier.predict(X_test)))","4ba0f307":"print(confusion_matrix(Y_test, y_pred))","cae0e28b":"print(classification_report(Y_test, y_pred))","944ea504":"#KNN","996dc340":"from sklearn.neighbors import KNeighborsClassifier\nclassifier=KNeighborsClassifier(n_neighbors =5, metric=\"minkowski\",p=2)\nclassifier.fit(X_train,Y_train)","3bdcea3d":"y_pred = classifier.predict(X_test)","2b9e6c55":"from sklearn.metrics import confusion_matrix,classification_report\ncm = confusion_matrix(Y_test,y_pred)\nprint(cm)","790f69dd":"print(classification_report(Y_test,y_pred))","7b4647a0":"#SVM","039c211f":"from sklearn.svm import SVC\nsvc_model = SVC()\nsvc_model.fit(X_train,Y_train)","bf2f4471":"y_pred_svc = svc_model.predict(X_test)","6f5c771d":"from sklearn.metrics import accuracy_score, confusion_matrix, classification_report\nprint(accuracy_score(Y_test, y_pred_svc))","26a6949d":"print(confusion_matrix(Y_test, y_pred_svc))","292a2cb0":"print(classification_report(Y_test, y_pred))","d68b1fad":"#Model Improvement using gridsearchcv library","f1604ca1":"param_grid={'C':[0.1,1,10,100],'gamma':[1,0.1,0.01,0.001],'kernel':['rbf']}","23f25103":"from sklearn.model_selection import GridSearchCV\ngrid=GridSearchCV(SVC(),param_grid,refit=True,verbose=4)\ngrid.fit(X_train,Y_train)\ngrid.best_params_","2dff15f5":"grid_predict = grid.predict(X_test)","83574308":"from sklearn.metrics import accuracy_score, confusion_matrix, classification_report\nprint(accuracy_score(Y_test, grid_predict))","37759667":"print(confusion_matrix(Y_test, y_pred_svc))","7d99fa22":"print(classification_report(Y_test, y_pred))","b50ccb93":"# lets check the ditribution of data","8036bc2b":"# Loading the Dataset","11ca183f":"# Importing Libraries","41302bf9":"# So the agg_of_all above 0.2 are generally Cancer with Malignancy","e713c468":"# checking for outliers","e200ea28":"# Replacing M with 1 and B with 0","f7a08729":"# As data is clean lets analyze it","6fe8063b":"# Feature Engineering:Normalizing the Data","d0d21fc2":"# Above graph doesn't tell much about the diagnosis"}}