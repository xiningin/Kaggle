{"cell_type":{"846334d9":"code","58a3698c":"code","6d535aaa":"code","6560691a":"code","a1e389b2":"code","a821f0a7":"code","59327c83":"code","76ffcbb4":"code","e0aea1fc":"code","7678cc5b":"code","f9f38ffc":"code","b5ad885b":"code","308fc27e":"code","88323f59":"code","946554d5":"code","b357836c":"code","f034b850":"code","1a8bdf96":"code","f4f42ea7":"code","21deaf2e":"code","ace2b166":"code","431610e4":"code","57243618":"code","b996aa98":"code","7408c710":"code","c9940c0b":"code","5ae83d20":"code","424f3e43":"code","56cd9d8c":"code","a186af21":"code","8097ceb5":"code","3c718d05":"code","73116596":"code","25125f2f":"code","3d2bf38b":"code","2959ac91":"code","5742d431":"code","194c99eb":"code","b59300f3":"code","5bbb544b":"code","9ad611c5":"code","7a93894c":"code","81df227b":"code","13e33a7e":"code","330c0333":"code","5072dbc5":"code","9e473597":"code","9849a4ef":"code","8de55cdb":"code","99ac0ae1":"code","6d4d8f84":"code","ec47e408":"markdown","0cc02e17":"markdown","44d2aaea":"markdown","bdede743":"markdown","a9058d99":"markdown","947a5b1a":"markdown","1fec62b6":"markdown"},"source":{"846334d9":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","58a3698c":"%config Completer.use_jedi = False","6d535aaa":"# \u5b66\u7fd2\u30c7\u30fc\u30bf\u3068\u30c6\u30b9\u30c8\u30c7\u30fc\u30bf\u3092\u8aad\u307f\u8fbc\u307f\u307e\u3059\u3002\ndf_train = pd.read_csv('\/kaggle\/input\/ml-study-meetup-osaka\/OsakaWinter_train.csv', index_col=0)\ndf_test = pd.read_csv('\/kaggle\/input\/ml-study-meetup-osaka\/OsakaWinter_test.csv', index_col=0)","6560691a":"# \u5b66\u7fd2\u30c7\u30fc\u30bf\u3068\u30c6\u30b9\u30c8\u30c7\u30fc\u30bf\u306e\u5148\u982d5\u884c\u3092\u305d\u308c\u305e\u308c\u898b\u3066\u307f\u307e\u3057\u3087\u3046\ndf_train.head()","a1e389b2":"df_test.head()","a821f0a7":"# \u5e9c\u770c\u306e\u5185\u8a33\u3092\u78ba\u8a8d\u3057\u3066\u307f\u307e\u3057\u3087\u3046\u3002\u5b66\u7fd2\u30c7\u30fc\u30bf\u5185\u3067\u306f\u5175\u5eab\u306b\u7269\u4ef6\u304c\u591a\u304f\u3001\u6b21\u3044\u3067\u4eac\u90fd\u306b\u591a\u3044\u3088\u3046\u3067\u3059\u3002\ndf_train.Prefecture.value_counts()","59327c83":"df_test.Prefecture.value_counts()","76ffcbb4":"# \u5b66\u7fd2\u30c7\u30fc\u30bf\u5185\u306e\u5404\u5e9c\u770c\u306e\u5e73\u5747TradePrice\u306e\u30e9\u30f3\u30ad\u30f3\u30b0\u3002\u5b66\u7fd2\u30c7\u30fc\u30bf\u5185\u3067\u306f\u4eac\u90fd\u3001\u3064\u3044\u3067\u5175\u5eab\u306e\u7269\u4ef6\u304c\u5e73\u5747\u7684\u306b\u306f\u9ad8\u3044\u3088\u3046\u3067\u3059\u3002\n# \u30c6\u30b9\u30c8\u30c7\u30fc\u30bf\u306e\u5206\u306f\uff08\u305d\u308c\u304c\u4e88\u6e2c\u30bf\u30fc\u30b2\u30c3\u30c8\u306a\u306e\u3067\uff09\u3042\u308a\u307e\u305b\u3093\u304c\u3001\u304a\u305d\u3089\u304f\u306f\u4eac\u90fd\u3088\u308a\u3055\u3089\u306b\u4e0a\u304b\u3082\u3057\u308c\u307e\u305b\u3093\u306d\u3002\u809d\u5fc3\u306e\u5927\u962a\u304c\u30c6\u30b9\u30c8\u30c7\u30fc\u30bf\u3068\u3044\u3046\u306e\u306f\u5b9f\u306b\u5384\u4ecb\u3067\u3059\u306d\uff01\ndf_train.groupby(['Prefecture']).TradePrice.mean().sort_values(ascending=False)","e0aea1fc":"# \u30b5\u30d6\u306e\u5e02\u753a\u6751\u30c7\u30fc\u30bf\u3068\u9244\u9053\u99c5\u30c7\u30fc\u30bf\u3082\u3056\u3063\u3068\u773a\u3081\u3066\u307f\u307e\u3057\u3087\u3046\ndf_city = pd.read_csv('\/kaggle\/input\/ml-study-meetup-osaka\/OsakaWinter_city.csv')\ndf_station = pd.read_csv('\/kaggle\/input\/ml-study-meetup-osaka\/OsakaWinter_station.csv')","7678cc5b":"df_city.head()","f9f38ffc":"df_station.head()","b5ad885b":"# wiki_desctiption\u306e\u4e2d\u3082\u898b\u3066\u307f\u307e\u3057\u3087\u3046\u3002\u307e\u305a\u306f\u5e02\u753a\u6751\u30c7\u30fc\u30bf\ndf_city.wiki_description[0]","308fc27e":"# \u3064\u3044\u3067\u9244\u9053\u99c5\u30c7\u30fc\u30bf\u3002\u3069\u3046\u3067\u3057\u3087\u3046\uff1f\u6709\u7528\u305d\u3046\u306a\u60c5\u5831\u306f\u3042\u308a\u305d\u3046\u3067\u3057\u3087\u3046\u304b\uff1f\ndf_station.wiki_description[0]","88323f59":"# \u3055\u3066\u3001\u307e\u305a\u306f\u30b7\u30f3\u30d7\u30eb\u306a\u30d9\u30fc\u30b9\u30e9\u30a4\u30f3\u30e2\u30c7\u30eb\u3092\u4f5c\u3063\u3066\u3044\u304d\u307e\u3057\u3087\u3046\n# \u307e\u305a\u306f\u30bf\u30fc\u30b2\u30c3\u30c8\u5909\u6570\u3068\u7279\u5fb4\u91cf\u306b\u5206\u5272\u3057\u307e\u3059\ny_train = df_train.TradePrice\nX_train = df_train.drop(['TradePrice'], axis=1)\nX_test = df_test.copy()\ngroups = df_train.Prefecture","946554d5":"X_train = X_train.merge(df_station, left_on=['NearestStation'], right_on=['Station'], how='left')\nX_test = X_test.merge(df_station, left_on=['NearestStation'], right_on=['Station'], how='left')\n\nX_train = X_train.merge(df_city, on=['Prefecture', 'Municipality'], how='left', suffixes=['_station', '_city'])\nX_test = X_test.merge(df_city, on=['Prefecture', 'Municipality'], how='left', suffixes=['_station', '_city'])","b357836c":"# Station\u306f\u91cd\u8907\u3059\u308b\u306e\u3067drop\u3057\u3066\u304a\u304d\u307e\u3059\u3002\u30c6\u30ad\u30b9\u30c8\u306f\u3042\u3068\u3067\u3069\u3046\u7528\u3044\u308b\u304b\u8003\u3048\u308b\u3068\u3057\u3066\u3001\u4eca\u56de\u306f\u4e00\u65e6\u9664\u3044\u3066\u304a\u304d\u307e\u3059\u3002\nX_train.drop(['Station', 'wiki_description_city', 'wiki_description_station'], axis=1, inplace=True)\nX_test.drop(['Station', 'wiki_description_city', 'wiki_description_station'], axis=1, inplace=True)","f034b850":"X_train.head()","1a8bdf96":"X_test.head()","f4f42ea7":"# \u5730\u7406\u60c5\u5831\u3092\u6271\u3046\u305f\u3081\u306b\u4fbf\u5229\u306a\u30e9\u30a4\u30d6\u30e9\u30ea\u3092import\u3057\u3066\u304a\u304d\u307e\u3059\nfrom geopy.distance import great_circle","21deaf2e":"# \u81ea\u6cbb\u4f53 <> \u6700\u5bc4\u308a\u99c5\u9593\u306e\u8ddd\u96e2\u8a08\u7b97\u3092\u884c\u3046\u95a2\u6570\u3092\u5b9a\u7fa9\u3057\u3066\u304a\u304d\u307e\u3059\u3002\n# \u81ea\u6cbb\u4f53\u306e\u7def\u5ea6\u7d4c\u5ea6\u306f\u5e02\u306e\u4e2d\u5fc3\u90e8\u3067\u3042\u308d\u3046\u3068\u306e\u8003\u3048\u304b\u3089\u3053\u306e\u8ddd\u96e2\u304c\u8fd1\u3044\u307b\u3069\u5f53\u8a72\u81ea\u6cbb\u4f53\u306e\u4e2d\u5fc3\u90e8\u306b\u4f4d\u7f6e\u3059\u308b\u7269\u4ef6\u3068\u306e\u4eee\u8aac\u3067\u3059\n# \u4ed6\u306b\u3082geopy\u3092\u7528\u3044\u3066\u5f37\u529b\u306a\u7279\u5fb4\u91cf\u3092\u8272\u3005\u4f5c\u308b\u3053\u3068\u304c\u3067\u304d\u308b\u3068\u601d\u3044\u307e\u3059\u306e\u3067\u3001\u5404\u81ea\u3067\u8a66\u3057\u3066\u307f\u3066\u304f\u3060\u3055\u3044\u3002\ndef calc_Municipality_NearestStation_distance(df):\n    try:\n        # \u3053\u3053\u3067\u306f\u5927\u570f\u8ddd\u96e2 (Great Circle Distance)\u3092\u7528\u3044\u307e\u3059\u304c\u3001\u95a2\u897f\u9650\u5b9a\u306a\u306e\u3067\u30e6\u30fc\u30af\u30ea\u30c3\u30c9\u8ddd\u96e2\u3067\u3082\u5927\u304d\u306a\u554f\u984c\u306f\u306a\u3044\u304b\u3082\u3057\u308c\u307e\u305b\u3093\u3093\u3002\n        distance = great_circle((df.Latitude_city, df.Longitude_city), (df.Latitude_station, df.Longitude_station)).meters\n    except:\n        distance = -1\n    return distance","ace2b166":"# \u5b9a\u7fa9\u3057\u305f\u95a2\u6570\u3092apply\u3057\u3066\u8ddd\u96e2\u7279\u5fb4\u91cf\u3092\u8a08\u7b97\u3057\u307e\u3059\nX_train['Municipality_NearestStation_distance'] = X_train.apply(calc_Municipality_NearestStation_distance, axis=1)\nX_test['Municipality_NearestStation_distance'] = X_test.apply(calc_Municipality_NearestStation_distance, axis=1)","431610e4":"# \u6700\u5bc4\u308a\u99c5\u306e\u7def\u5ea6\u7d4c\u5ea6\u304c\u6b20\u640d\u3057\u3066\u3044\u308b\u30b1\u30fc\u30b9\u304c\u591a\u3044\u305f\u3081\u306b-1\u304c\u76ee\u7acb\u3061\u307e\u3059\u306d\nX_train['Municipality_NearestStation_distance']","57243618":"X_test['Municipality_NearestStation_distance']","b996aa98":"# \u5b66\u7fd2\u3068\u30c6\u30b9\u30c8\u306f\u5730\u7406\u3067\u533a\u5207\u3089\u308c\u3066\u3044\u308b\u305f\u3081\u3001\u3053\u308c\u3089\u306e\u5730\u540d\u306f\u76f4\u63a5\u306f\u7528\u3044\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u305b\u3093\u3002\ncol_geo = ['Prefecture', 'Municipality', 'DistrictName', 'NearestStation']","7408c710":"# \u5730\u540d\u305d\u306e\u307e\u307e\u306f\u4f7f\u3048\u306a\u3044\u306e\u3067\u3001\u3088\u308a\u4e00\u822c\u5316\u3057\u305f\u8868\u73fe\u3068\u3057\u3066\u3053\u3053\u3067\u306fCount Encoding(\u51fa\u73fe\u56de\u6570\u306b\u7f6e\u63db\u3059\u308b)\u3092\u884c\u306a\u3063\u3066\u307f\u307e\u3059\u3002\n# \u5148\u307b\u3069\u306e\u770c\u540d\u3067value_counts\u3057\u305f\u969b\u306b\u307b\u307c\u4eba\u53e3\u6bd4\u306b\u306a\u3063\u3066\u3044\u305f\u3088\u3046\u306b\u898b\u3048\u305f\u306e\u3067\u3001\u3053\u308c\u3067\u5404\u5730\u57df\u306e\u4eba\u53e3\u6bd4\u306e\u8fd1\u4f3c\u5024\u306e\u3088\u3046\u306a\u7279\u5fb4\u91cf\u306b\u306a\u308b\u3053\u3068\u3092\u671f\u5f85\u3057\u3066\u3044\u307e\u3059\u3002\nfor col in col_geo:\n    summary_train = X_train[col].value_counts()\n    summary_test = X_test[col].value_counts()\n    \n    X_train[col] = X_train[col].map(summary_train)\n    X_test[col] = X_test[col].map(summary_test)","c9940c0b":"# \u3053\u306e\u3088\u3046\u306b\u30a8\u30f3\u30b3\u30fc\u30c9\u3055\u308c\u307e\u3057\u305f\nX_train[col_geo]","5ae83d20":"X_test[col_geo]","424f3e43":"# \u5148\u307b\u3069head\u3092\u307f\u305f\u3068\u304d\u306b\u6700\u5bc4\u308a\u99c5\u307e\u3067\u306e\u6240\u8981\u6642\u9593\u306b\u6587\u5b57\u5217\u304c\u542b\u307e\u308c\u3066\u3044\u305f\u306e\u304c\u6c17\u306b\u306a\u308a\u307e\u3057\u305f\u3088\u306d\u3002\nX_train.TimeToNearestStation.value_counts()","56cd9d8c":"# \u6570\u5024\u3067\u7d71\u4e00\u3067\u304d\u308b\u3088\u3046\u306b\u7f6e\u63db\u3057\u3066\u304a\u304d\u307e\u3057\u3087\u3046\nreplace_dict = {'30-60minutes':30, '1H-1H30':60, '1H30-2H':90, '2H-':120}\nX_train['TimeToNearestStation'].replace(replace_dict, inplace=True)\nX_test['TimeToNearestStation'].replace(replace_dict, inplace=True)\n\nX_train['TimeToNearestStation'] = X_train['TimeToNearestStation'].astype(float)\nX_test['TimeToNearestStation'] = X_test['TimeToNearestStation'].astype(float)","a186af21":"from category_encoders import OrdinalEncoder\n\ncol_cat = []\nfor col in X_train.columns:\n    if X_train[col].dtype=='object':\n        col_cat.append(col)\n        \nencoder = OrdinalEncoder()\nencoder.fit(X_train[col_cat])\nX_train[col_cat] = encoder.transform(X_train[col_cat])\nX_test[col_cat] = encoder.transform(X_test[col_cat])","8097ceb5":"# \u307e\u305a\u306f\u6700\u4f4e\u9650\u306e\u524d\u51e6\u7406\u304c\u3067\u304d\u305f\u306e\u3067\u3001\u30e2\u30c7\u30eb\u306e\u5b66\u7fd2\u3092\u3057\u3066\u307f\u307e\u3057\u3087\u3046\nX_train.head()","3c718d05":"X_test.head()","73116596":"from pandas import DataFrame\nfrom sklearn.model_selection import GroupKFold\nfrom sklearn.metrics import mean_squared_error\nfrom lightgbm import LGBMRegressor","25125f2f":"# \u3055\u3066\u3001Discussion\u3067\u3082\u8a55\u4fa1\u7cfb\u306e\u69cb\u7bc9\u3067\u56f0\u3063\u3066\u3044\u308b\u3068\u3044\u3046\u8a71\u984c\u304c\u3042\u308a\u307e\u3057\u305f\u306e\u3067\u3053\u3053\u3067\u89e6\u308c\u305f\u3044\u3068\u601d\u3044\u307e\u3059\u3002\n# \u5927\u962a\u306b\u96a3\u63a5\u3057\u3066\u3044\u308b\u5e02\u753a\u6751\u306e\u30c7\u30fc\u30bf\u3092\u4eee\u60f3\u5927\u962a\u3068\u898b\u7acb\u3066\u3066\u7cbe\u5ea6\u8a55\u4fa1\u306b\u7528\u3044\u3066\u307f\u305f\u3044\u3068\u601d\u3044\u307e\u3059\u3002\n# \u884c\u653f\u533a\u5206\u7684\u306b\u306f\u975e\u9023\u7d9a\u3067\u3059\u304c\u3001\u5730\u7406\u7684\u306b\u306f\u9023\u7d9a\u3057\u3066\u304a\u308a\"\u5927\u962a\u306b\u6027\u8cea\u304c\u8fd1\u3044\"\u3068\u60f3\u5b9a\u3067\u304d\u308b\u304b\u3082\u3057\u308c\u307e\u305b\u3093\u3002\n# \u3053\u306e\u8fba\u306f\u56de\u5e30\u4e0d\u9023\u7d9a\u30c7\u30b6\u30a4\u30f3\u306b\u3082\u901a\u3058\u308b\u3082\u306e\u304c\u3042\u308b\u304b\u3082\u3057\u308c\u307e\u305b\u3093\u306d\u3002\nimport cupy as cp # PFN\u8b39\u88fd\u306e\u30e9\u30a4\u30d6\u30e9\u30ea\u3067\u3001numpy\u306eGPU\u7248\u307f\u305f\u3044\u306a\u3082\u306e\nfrom cuml.neighbors import NearestNeighbors # NVIDIA\u8b39\u88fd\u306e\u30e9\u30a4\u30d6\u30e9\u30ea\u3067scikit-learn\uff08\u306e\u4e00\u90e8\uff09\u306eGPU\u7248\u307f\u305f\u3044\u306a\u3082\u306e\u3002\u3053\u3053\u3067\u306f\u8fd1\u508d\u63a2\u7d22\u3057\u305f\u3044\u306e\u3067\u3053\u308c\u3092import","3d2bf38b":"# \u5927\u962a\u3068\u975e\u5927\u962a\u306b\u5206\u3051\u308b\ndf_city_osaka = df_city[df_city.Prefecture=='Osaka Prefecture']\ndf_city_noosaka = df_city[df_city.Prefecture!='Osaka Prefecture']","2959ac91":"# \u975e\u5927\u962a\u306e\u5404\u81ea\u6cbb\u4f53\u306b\u5bfe\u3057\u3066\u3001\u6700\u3082\u8fd1\u3044\u5927\u962a\u306e\u81ea\u6cbb\u4f53\u3068\u305d\u3053\u307e\u3067\u306e\uff08\u7def\u5ea6\u7d4c\u5ea6\u3092XY\u5ea7\u6a19\u3068\u3057\u305f\u5834\u5408\u306e\uff09\u30e6\u30fc\u30af\u30ea\u30c3\u30c9\u8ddd\u96e2\u3092\u6c42\u3081\u307e\u3059\u3002\nmodel = NearestNeighbors(n_neighbors=1)\nposition = ['Longitude', 'Latitude']\n\nmodel.fit(df_city_osaka[position])\ndistances, indices = model.kneighbors(df_city_noosaka[position])","5742d431":"# \u5927\u962a\u3078\u306e\u8fd1\u3055\u3067\u30bd\u30fc\u30c8\u3059\u308b\u3068\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u306a\u308b\u3088\u3046\u3067\u3059\u306d\u3002\ndf_city_noosaka.iloc[np.argsort(distances.ravel())]","194c99eb":"# \u5927\u962a\u3078\u306e\u8fd1\u3055\u4e0a\u4f4d30\u81ea\u6cbb\u4f53\u3092\u7cbe\u5ea6\u8a55\u4fa1\u306b\u7528\u3044\u305f\u3044\u3068\u601d\u3044\u307e\u3059\u3002\n# \u3053\u308c\u304c\u30d9\u30b9\u30c8\u3068\u8a00\u3063\u3066\u3044\u308b\u308f\u3051\u3067\u306f\u306a\u304f\u4e00\u4f8b\u3067\u306e\u3067\u3001\u7686\u3055\u3093\u3067\u3088\u308a\u59a5\u5f53\u306a\u8a55\u4fa1\u7cfb\u306e\u3042\u308a\u65b9\u306b\u3064\u3044\u3066\u6df1\u6398\u308a\u3057\u3066\u307f\u3066\u304f\u3060\u3055\u3044\u3002\n# \u5927\u962a\u529b\u306f\u7686\u3055\u3093\u306e\u65b9\u304c\u305a\u3063\u3068\u4e0a\u3060\u3068\u601d\u3044\u307e\u3059\u306e\u3067\uff01\n# \u7686\u3055\u3093\u306f\u5927\u962a\u3092\u3088\u304f\u3054\u5b58\u77e5\u306a\u306e\u3067\u3001\u30c7\u30fc\u30bf\u304c\u306a\u304f\u3066\u3082\u540c\u69d8\u306b\u3067\u304d\u308b\u304b\u3082\u3057\u308c\u307e\u305b\u3093\u3002\nval_cities = df_city_noosaka.iloc[np.argsort(distances.ravel())].Municipality.values[:30]\nval_cities","b59300f3":"# \u73fe\u6709\u30ab\u30e9\u30e0\u3092\u4e00\u89a7\u306b\u3059\u308b\u3068\u4ee5\u4e0b\u306e\u901a\u308a\nX_train.columns","5bbb544b":"# \u914d\u5217\u3092\u7528\u610f\u3057\u3066\u304a\u304d\u307e\u3059\nmono = np.zeros(len(X_train.columns))\n\n# \u8ddd\u96e2\u7cfb\u306e\u7279\u5fb4\u91cf\u304c\u5024\u304c\u5c0f\u3055\u3044\u307b\u3069\u304a\u305d\u3089\u304f\u306f\u5bb6\u8cc3\u306f\u3042\u304c\u308b\u3067\u3057\u3087\u3046\u3002negative\u306b\u50cd\u304f\u306e\u3067-1\u3092\u7acb\u3066\u307e\u3059\nmono_neg = ['TimeToNearestStation', 'Municipality_NearestStation_distance']\nmono[np.isin(X_train.columns, mono_neg)] = -1\n\n# \u5e83\u3044\u307b\u3069\u5bb6\u8cc3\u306f\u4e0a\u304c\u308b\u6c17\u304c\u3057\u307e\u3059\u3002positive\u306b\u50cd\u304f\u306e\u30671\u3092\u7acb\u3066\u307e\u3059\nmono_pos = ['Area', 'TotalFloorArea', 'BuildingYear']\nmono[np.isin(X_train.columns, mono_pos)] = 1\n\nmono","9ad611c5":"seed = 71\nlgb_params = {\n                    'boosting_type': 'gbdt',\n                    'objective': 'rmse',\n                    'metric': 'rmse',\n                    'subsample': 0.71,\n                    'subsample_freq': 1,\n                    'learning_rate': 0.01,\n                    'n_estimators':9999,\n                    'num_leaves': 7,\n                    'min_data_in_leaf': 10,\n                    'feature_fraction': 0.71,\n                    'importance_type':'gain',\n                    'verbose': -1,\n                    'device': 'gpu',# \u4eca\u56de\u306fGPU\u3092\u7528\u3044\u3066\u307f\u307e\u3057\u3087\u3046\n                    'gpu_use_dp': False\n                } ","7a93894c":"# \u30c7\u30fc\u30bf\u91cf\u3092\u5909\u3048\u3066\u5236\u7d04\u6709\u7121\u306e\u7cbe\u5ea6\u6bd4\u8f03\u3092\u884c\u3044\u307e\u3059\u3002\n# \u82e5\u5e72\u30ce\u30a4\u30b8\u30fc\u306a\u306e\u3067\u30015seed\u306e\u5e73\u5747\u5024\u3092\u307f\u3066\u307f\u307e\u3059\nfracs = np.linspace(0.1, 1.0, num=10, endpoint=True)\nscores = np.zeros((len(fracs),2))\nseeds = range(71, 71+5)\n\nfor seed in seeds:\n    for i, frac in enumerate(fracs):\n        X_train_, y_train_ = X_train[~df_train.Municipality.isin(val_cities)], y_train[~df_train.Municipality.isin(val_cities)]\n        X_val, y_val = X_train[df_train.Municipality.isin(val_cities)], y_train[df_train.Municipality.isin(val_cities)]\n\n        X_train_ = X_train_.sample(frac=frac, replace=False)\n        y_train_ = y_train_.loc[X_train_.index]\n\n        # without constraint\n        model = LGBMRegressor(**lgb_params, seed=seed)\n        model.fit(X_train_, np.log1p(y_train_), eval_set=[(X_val, np.log1p(y_val))], early_stopping_rounds=50, eval_metric='rmse')# Evaluation\u306e\u30da\u30fc\u30b8\u306e\u8a55\u4fa1\u5f0f\u3092\u898b\u308b\u3068\u308f\u304b\u308a\u307e\u3059\u304c\u3001\u5bfe\u6570\u5909\u63db\u3057\u3066RMSE\u3092\u7528\u3044\u308b\u3068RMSLE\u3068\u7b49\u4fa1\u306b\u306a\u308a\u307e\u3059\u3002\n        y_pred_val = np.expm1(model.predict(X_val))\n\n        score = mean_squared_error(np.log1p(y_val), np.log1p(y_pred_val))**0.5\n        scores[i,0] += score\/len(seeds)\n\n        # with constraint\n        model = LGBMRegressor(**lgb_params, monotone_constraint=mono, seed=seed)\n        model.fit(X_train_, np.log1p(y_train_), eval_set=[(X_val, np.log1p(y_val))], early_stopping_rounds=50, eval_metric='rmse')# Evaluation\u306e\u30da\u30fc\u30b8\u306e\u8a55\u4fa1\u5f0f\u3092\u898b\u308b\u3068\u308f\u304b\u308a\u307e\u3059\u304c\u3001\u5bfe\u6570\u5909\u63db\u3057\u3066RMSE\u3092\u7528\u3044\u308b\u3068RMSLE\u3068\u7b49\u4fa1\u306b\u306a\u308a\u307e\u3059\u3002\n        y_pred_val = np.expm1(model.predict(X_val))\n\n        score = mean_squared_error(np.log1p(y_val), np.log1p(y_pred_val))**0.5\n        scores[i,1] += score\/len(seeds)","81df227b":"import matplotlib.pyplot as plt\nplt.style.use('ggplot')\n%matplotlib inline","13e33a7e":"# \u5236\u7d04\u6709\u7121\u3067\u306e\u8aa4\u5dee\u306e\u5927\u304d\u3055\u3092\u6bd4\u8f03\u3057\u3066\u307f\u307e\u3057\u3087\u3046\nplt.plot(fracs, scores[:,0], label='without constraint')\nplt.plot(fracs, scores[:,1], label='with constraint')\nplt.xlabel('fraction')\nplt.ylabel('RMSLE')\nplt.legend()\nplt.show()","330c0333":"best_iter = model.best_iteration_\nbest_iter","5072dbc5":"seed = 71\nlgb_params = {\n                    'boosting_type': 'gbdt',\n                    'objective': 'rmse',\n                    'metric': 'rmse',\n                    'subsample': 0.71,\n                    'subsample_freq': 1,\n                    'learning_rate': 0.01,\n                    'n_estimators':best_iter, # \u4eee\u60f3\u5927\u962a\u306e\u8a55\u4fa1\u7cfb\u3067\u6c42\u3081\u305f\u30e9\u30a6\u30f3\u30c9\u6570\u3092\u7528\u3044\u307e\u3059\u3002\u3053\u308c\u306f\u3001\u624b\u5143\u306e\u8a55\u4fa1\u7cfb\u3067\u59a5\u5f53\u306a\u30e2\u30c7\u30eb\u306e\u8907\u96d1\u3055\u306e\u5ea6\u5408\u3044\u3092\u898b\u7a4d\u3082\u3063\u305f\u3053\u3068\u306b\u76f8\u5f53\u3057\u307e\u3059\u3002\n                    'num_leaves': 7,\n                    'min_data_in_leaf': 10,\n                    'feature_fraction': 0.71,\n                    'importance_type':'gain',\n                    'verbose': -1,\n                    'seed':seed,\n                    'device': 'gpu',# \u4eca\u56de\u306fGPU\u3092\u7528\u3044\u3066\u307f\u307e\u3057\u3087\u3046\n                    'gpu_use_dp': False,\n                    'monotone_constraint':mono\n                } ","9e473597":"model = LGBMRegressor(**lgb_params)\nmodel.fit(X_train, np.log1p(y_train))\ny_pred_test = np.expm1(model.predict(X_test))","9849a4ef":"import matplotlib.pyplot as plt\nplt.style.use('ggplot')\n%matplotlib inline","8de55cdb":"# \u5909\u6570\u91cd\u8981\u5ea6\u3082\u78ba\u8a8d\u3057\u3066\u304a\u304d\u307e\u3057\u3087\u3046\nimportances = DataFrame(model.feature_importances_, index=X_train.columns, columns=['importance'])\nimportances.sort_values(['importance'], ascending=False, inplace=True)\n\nplt.figure(figsize=[6,10])\nplt.title('Feature Importance')\nplt.barh(importances.index[::-1], importances.importance[::-1])\nplt.xlabel('importance')\nplt.show()","99ac0ae1":"# \u4e88\u6e2c\u5024\u3092\u6240\u5b9a\u306e\u30d5\u30a9\u30fc\u30de\u30c3\u30c8\u306b\u4ee3\u5165\u3057\u3066\u63d0\u51fa\u7528\u30d5\u30a1\u30a4\u30eb\u3092\u4f5c\u6210\u3057\u307e\u3059\nsubmission = pd.read_csv('\/kaggle\/input\/ml-study-meetup-osaka\/OsakaWinter_sample_submission.csv')\nsubmission['TradePrice'] = y_pred_test\nsubmission","6d4d8f84":"# \u4fdd\u5b58\u3057\u307e\u3059\nsubmission.to_csv('submission.csv', index=False)","ec47e408":"## \u307e\u305a\u306f\u3088\u304f\u30c7\u30fc\u30bf\u3092\u898b\u3066\u307f\u307e\u3057\u3087\u3046","0cc02e17":"## [New!] \u5358\u8abf\u5236\u7d04\u3092\u8003\u3048\u308b\n\u3055\u3066\u3001\u69d8\u3005\u306a\u7279\u5fb4\u91cf\u3092\u4f5c\u3063\u3066\u307f\u307e\u3057\u305f\u3002\u3044\u305a\u308c\u3082\u7279\u5fb4\u91cf\u540d\u3092\u898b\u308c\u3070\u79c1\u305f\u3061\u4eba\u9593\u306a\u3089\u3070\u3001\u300c\u99c5\u8fd1\u306e\u7269\u4ef6\u306f\u9ad8\u3044\u3088\u306d\u300d\u300c\u5e83\u3044\u90e8\u5c4b\u306f\u9ad8\u3044\u300d\u306a\u3069\u5e38\u8b58\u3092\u6301\u3063\u3066\u3044\u307e\u3059\u3002\u4e00\u65b9\u3067\u6a5f\u68b0\u5b66\u7fd2\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u306f\u4e0e\u3048\u3089\u308c\u305f\u30c7\u30fc\u30bf\u306e\u307f\u304b\u3089\u5b66\u7fd2\u3059\u308b\u305f\u3081\u306b\u305d\u306e\u3088\u3046\u306a\u4e8b\u524d\u77e5\u8b58\u306f\u6301\u3061\u5408\u308f\u305b\u3066\u3044\u307e\u305b\u3093\u3001\u305d\u3053\u3067\u3001\u300c\u3053\u306e\u7279\u5fb4\u91cf\u306e\u5024\u304c\u5927\u304d\u304f\u306a\u3063\u305f\u3089\u3001\u5bb6\u8cc3\u306f\u4e0a\u304c\u308bor\u4e0b\u304c\u308b\u306f\u305a\u3067\u3042\u308b\u300d\u3068\u3044\u3046\u79c1\u305f\u3061\u306e\u77e5\u8b58\u3092\u5358\u8abf\u5236\u7d04\u3068\u3044\u3046\u5f62\u3067\u30e2\u30c7\u30eb\u306b\u4e0e\u3048\u3066\u307f\u307e\u3057\u3087\u3046\u3002\u3053\u306e\u4f8b\u3067\u306f\u52b9\u304d\u5177\u5408\u306f\u5fae\u5999\u304b\u3082\u3057\u308c\u307e\u305b\u3093\u304c\u3001\u30c7\u30fc\u30bf\u304c\u5c11\u306a\u3044\u30b1\u30fc\u30b9\u3067\u81ea\u660e\u306a\u77e5\u8b58\u3092\u53cd\u6620\u3055\u305b\u305f\u3044\u5834\u5408\u3084\u30d3\u30b8\u30cd\u30b9\u30eb\u30fc\u30eb\u304c\u660e\u78ba\u306a\u5834\u5408\u306b\u6709\u7528\u3067\u3057\u3087\u3046\u3002","44d2aaea":"## \u30d9\u30fc\u30b9\u30e9\u30a4\u30f3\u30e2\u30c7\u30eb\u3092\u69cb\u7bc9\u3057\u3066\u307f\u3088\u3046","bdede743":"## \u7cbe\u5ea6\u8a55\u4fa1\u7cfb\u3092\u3069\u306e\u3088\u3046\u306b\u69cb\u7bc9\u3059\u3079\u304d\u304b\u8003\u3048\u3066\u307f\u307e\u3057\u3087\u3046","a9058d99":"## \u30b5\u30d6\u30c6\u30fc\u30d6\u30eb\u3092\u30e1\u30a4\u30f3\u30c6\u30fc\u30d6\u30eb\u306b\u30de\u30fc\u30b8\u3057\u307e\u3059","947a5b1a":"## \u30c7\u30fc\u30bf\u306e\u6e96\u5099\u3092\u3057\u307e\u3057\u3087\u3046","1fec62b6":"## \u5730\u7406\u60c5\u5831\u304b\u3089\u7c21\u5358\u306a\u7279\u5fb4\u91cf\u3092\u4f5c\u3063\u3066\u307f\u307e\u3057\u3087\u3046"}}