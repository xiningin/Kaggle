{"cell_type":{"ca4f72af":"code","64b874a5":"code","1016b53d":"code","7fc8c328":"code","b517abee":"code","be78c268":"code","12609b5f":"code","e918a3a5":"code","24c5427e":"code","412f7d88":"code","915034af":"code","61de3e13":"code","4b40e3de":"code","9267e4c5":"code","1fbf3211":"code","1fcd456b":"code","e1093b2f":"code","f29f8de0":"code","f317741e":"code","f2dfe1c5":"code","e3f0802e":"code","5fff0d02":"code","613c1a0a":"code","c66e4213":"code","ed53e560":"code","2fb51d6c":"markdown","c0f4e270":"markdown","bac6878a":"markdown","dbc1f623":"markdown","03f91d5b":"markdown","e3da2180":"markdown","5e429aab":"markdown"},"source":{"ca4f72af":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","64b874a5":"from pandas import DataFrame\nfrom sklearn import preprocessing\nfrom sklearn.preprocessing import LabelEncoder\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.ensemble import RandomForestClassifier as RFC\nfrom sklearn.metrics import roc_auc_score\nimport missingno as msno\nimport seaborn as sns\nimport matplotlib.pyplot as plt","1016b53d":"sample_submission = pd.read_csv('\/kaggle\/input\/tabular-playground-series-mar-2021\/sample_submission.csv')\ntrain = pd.read_csv('\/kaggle\/input\/tabular-playground-series-mar-2021\/train.csv')\ntest = pd.read_csv('\/kaggle\/input\/tabular-playground-series-mar-2021\/test.csv')\n\ndf_train = pd.DataFrame(train)\ndf_test = pd.DataFrame(test)","7fc8c328":"pd.set_option('display.max_columns', 32)","b517abee":"sample_submission","be78c268":"df_train","12609b5f":"df_test","e918a3a5":"df_all = pd.concat([df_train.drop(columns='target'),df_test],ignore_index=True)\ndf_all","24c5427e":"# Search for missing data\n\nmsno.matrix(df=df_all, figsize=(20,14), color=(0,.3,.3))","412f7d88":"# String label to categorical values\n\nfor i in range(df_all.shape[1]):\n    if df_all.iloc[:,i].dtypes == object:\n        lbl = LabelEncoder()\n        lbl.fit(list(df_all.iloc[:,i].values))\n        df_all.iloc[:,i] = lbl.transform(list(df_all.iloc[:,i].values))","915034af":"df_all","61de3e13":"df_train = pd.merge(df_all.iloc[df_train.index[0]:df_train.index[-1]+1],df_train['target'],left_index=True,right_index=True)\ndf_test = df_all.iloc[df_train.index[-1]+1:]","4b40e3de":"\nsns.histplot(df_train['target'])","9267e4c5":"df_train_corr = df_train.corr()\ndf_train_corr","1fbf3211":"f, ax = plt.subplots(figsize=(12, 9))\nsns.heatmap(df_train_corr, vmax=.8, square=True)","1fcd456b":"# *************************************************************************\n# \u8aac\u660e\u5909\u6570\u3092\u6307\u5b9a\nexVarArray = []\nfor i in df_train_corr:\n    if df_train_corr[i]['target'] > 0.01 or df_train_corr[i]['target'] < -0.01:\n        innerName = df_train_corr[i].name\n        if innerName != 'target':\n            exVarArray.append(innerName)\nexVarArray\n# *************************************************************************","e1093b2f":"x = DataFrame(df_train[exVarArray])\nt = DataFrame(df_train['target'])\n\n# numpy\u306e\u914d\u5217\u306b\u5909\u63db\nx = np.array(x)\nt = np.array(t)\n\n# numpy\u3067\u578b\u3092\u5909\u63db\nt = t.ravel()\n\nx = x.astype('float32')\nt = t.astype('int32')\n# \u4e2d\u3092\u78ba\u8a8d\nprint('x shape:', x.shape)\nprint(x[:10])\nprint('t shape:', t.shape)\nprint(t[:10])","f29f8de0":"# scaling\nfeatures = preprocessing.minmax_scale(x[:, :])\n\n# split data for train and test\nx_train, x_test, t_train, t_test = train_test_split(features, t.ravel(), test_size=0.3)\n\nprint(x_train)\nprint(x_test)\nprint(t_train)\nprint(t_test)","f317741e":"clf = RFC(n_estimators=192,\n          criterion='entropy',# 'gini' or 'entropy'\n          max_depth=19,\n          min_samples_split=2,\n          max_features='log2',# 'auto'(='sqrt') or 'log2'\n          n_jobs=-1,\n          random_state=2525,\n          verbose=1)# 0 or 1\nclf.fit(x_train, t_train)\n# 0.89000(n_estimators=192, criterion='entropy', max_depth=19, min_samples_split=2, max_features='log2', n_jobs=-1, random_state=2525)","f2dfe1c5":"predict = clf.predict_proba(x_test)[:, 1] # This grabs the positive class prediction\nscore = roc_auc_score(t_test, predict)\nprint(f'{score:0.5f}')","e3f0802e":"plt.figure(figsize=(8,4))\nplt.hist(predict[np.where(t_test == 0)], bins=100, alpha=0.75, label='neg class')\nplt.hist(predict[np.where(t_test == 1)], bins=100, alpha=0.75, label='pos class')\nplt.legend()\nplt.show()","5fff0d02":"# \u8aac\u660e\u5909\u6570\u3092\u6307\u5b9a\u3057\u3066numpy\u578b\u306b\u5909\u63db\ny = DataFrame(df_test[exVarArray])\ny = np.array(y)\n\n# scaling\ny = preprocessing.minmax_scale(y[:, :])\n\n# predict\nresult = clf.predict_proba(y)[:, 1]","613c1a0a":"result","c66e4213":"if score > 0.8:\n    sample_submission['target'] = result\n    print(sample_submission)\nelse:\n    print('Low score')","ed53e560":"sample_submission.to_csv('submission.csv', index=False)","2fb51d6c":"# 1.Import data","c0f4e270":"# 2. Preprocessing","bac6878a":"# 3. Histogram","dbc1f623":"# 5.Learn with sckit-learn","03f91d5b":"# 4. Check the correlation for each item","e3da2180":"# 7. Prepare upload data","5e429aab":"# 6.Predict"}}