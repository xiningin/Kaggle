{"cell_type":{"a37ee240":"code","cf506050":"code","f62d8230":"code","e4bb4ff1":"code","76f60aaf":"code","0d3b5be4":"markdown","5d610327":"markdown","1bc5ed71":"markdown","9f535eb3":"markdown","d1a4bb2b":"markdown","26aff787":"markdown","381cc305":"markdown"},"source":{"a37ee240":"# adapted from https:\/\/www.kaggle.com\/dansbecker\/programming-in-tensorflow-and-keras\n\nimport numpy as np \nimport pandas as pd\nimport os\nimport json\nfrom keras.applications.resnet50 import ResNet50\nfrom keras.applications.resnet50 import preprocess_input\nfrom keras.preprocessing.image import load_img, img_to_array\nfrom IPython.display import Image, display\n\nimage_size = 224\ndef read_and_prep_images(img_paths, img_height=image_size, img_width=image_size):\n    imgs = [load_img(img_path, target_size=(img_height, img_width)) for img_path in img_paths]\n    img_array = np.array([img_to_array(img) for img in imgs])\n    output = preprocess_input(img_array)\n    return(output)\n\ndef decode_predictions(preds, top=5, class_list_path=None):\n    if len(preds.shape) != 2 or preds.shape[1] != 1000:\n        raise ValueError('`decode_predictions` expects '\n                     'a batch of predictions '\n                     '(i.e. a 2D array of shape (samples, 1000)). '\n                     'Found array with shape: ' + str(preds.shape))\n    CLASS_INDEX = json.load(open(class_list_path))\n    results = []\n    for pred in preds:\n        top_indices = pred.argsort()[-top:][::-1]\n        result = [tuple(CLASS_INDEX[str(i)]) + (pred[i],) for i in top_indices]\n        result.sort(key=lambda x: x[2], reverse=True)\n        results.append(result)\n    return results\n\nimage_paths = '..\/input\/sample-images-for-kaggle-demos'\nimage_paths = [os.path.join(image_paths,filename) for filename in os.listdir(image_paths)]\nimage_data = read_and_prep_images(image_paths)\nimg_paths = image_paths\n\ntest_data = read_and_prep_images(img_paths)","cf506050":"# Step 1: Attach a dataset containing a pre-trained model to your kernel\n# Step 2: Specify location of pre-trained model weights ('..\/input\/')\nmy_model_1 = ResNet50(weights='..\/input\/resnet50\/resnet50_weights_tf_dim_ordering_tf_kernels.h5')","f62d8230":"# Step 1: Open the right-side menu in the kernel editor and enable internet\n# Step 2: Specify location of pre-trained model weights ('imagenet')\nmy_model_2 = ResNet50(weights='imagenet')","e4bb4ff1":"my_model = my_model_1\nmy_preds = my_model.predict(test_data)\npreds = my_preds\nmost_likely_labels = decode_predictions(preds, top=1, class_list_path='..\/input\/resnet50\/imagenet_class_index.json')\n\nfor i, img_path in enumerate(img_paths[:2]):\n    display(Image(img_path))\n    print(most_likely_labels[i])","76f60aaf":"my_model = my_model_2\nmy_preds = my_model.predict(test_data)\npreds = my_preds\nmost_likely_labels = decode_predictions(preds, top=1, class_list_path='..\/input\/resnet50\/imagenet_class_index.json')\n\nfor i, img_path in enumerate(img_paths[:2]):\n    display(Image(img_path))\n    print(most_likely_labels[i])","0d3b5be4":"**Learn more about pre-trained models here:**\n* https:\/\/www.kaggle.com\/dansbecker\/transfer-learning","5d610327":"**Method 1: Attach a dataset that contains the pre-trained model to your kernel**","1bc5ed71":"**Method 2: Results**","9f535eb3":"**You can find pre-trained models in the following locations:**\n1. https:\/\/www.kaggle.com\/keras\/datasets\n1. https:\/\/www.kaggle.com\/pytorch\/datasets\n1. https:\/\/www.kaggle.com\/gaborfodor\/keras-pretrained-models","d1a4bb2b":"**Method 2: Download the pre-trained model from the internet**","26aff787":"**How to use pre-trained models in kernels on Kaggle**","381cc305":"**Method 1: Results**"}}