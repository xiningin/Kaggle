{"cell_type":{"8e5bcf2d":"code","2b92f88b":"code","62d0b8f9":"code","db7c0fd7":"code","ca54f639":"code","a6ff97b6":"code","b830d305":"code","398fad10":"code","17b3516a":"code","85edebb3":"code","05577d70":"code","38ae0be0":"code","1c15a2a3":"markdown","85f0bfd8":"markdown","d86bfe01":"markdown","dd42dd49":"markdown","fc9479e4":"markdown","7397f4ac":"markdown","f398d1a3":"markdown","db0e1090":"markdown","97c5f367":"markdown","c2cf5308":"markdown","76a5cba3":"markdown","40eda948":"markdown","c4c63018":"markdown","6b41d6bd":"markdown"},"source":{"8e5bcf2d":"from learntools.core import binder\nbinder.bind(globals())\nfrom learntools.game_ai.ex1 import *","2b92f88b":"import numpy as np\n\n# Gets board at next step if agent drops piece in selected column\ndef drop_piece(grid, col, piece, config):\n    next_grid = grid.copy()\n    for row in range(config.rows-1, -1, -1):\n        if next_grid[row][col] == 0:\n            break\n    next_grid[row][col] = piece\n    return next_grid\n\n# Returns True if dropping piece in column results in game win\ndef check_winning_move(obs, config, col, piece):\n    # Convert the board to a 2D grid\n    grid = np.asarray(obs.board).reshape(config.rows, config.columns)\n    next_grid = drop_piece(grid, col, piece, config)\n    # horizontal\n    for row in range(config.rows):\n        for col in range(config.columns-(config.inarow-1)):\n            window = list(next_grid[row,col:col+config.inarow])\n            if window.count(piece) == config.inarow:\n                return True\n    # vertical\n    for row in range(config.rows-(config.inarow-1)):\n        for col in range(config.columns):\n            window = list(next_grid[row:row+config.inarow,col])\n            if window.count(piece) == config.inarow:\n                return True\n    # positive diagonal\n    for row in range(config.rows-(config.inarow-1)):\n        for col in range(config.columns-(config.inarow-1)):\n            window = list(next_grid[range(row, row+config.inarow), range(col, col+config.inarow)])\n            if window.count(piece) == config.inarow:\n                return True\n    # negative diagonal\n    for row in range(config.inarow-1, config.rows):\n        for col in range(config.columns-(config.inarow-1)):\n            window = list(next_grid[range(row, row-config.inarow, -1), range(col, col+config.inarow)])\n            if window.count(piece) == config.inarow:\n                return True\n    return False","62d0b8f9":"def agent_q1(obs, config):\n    import random\n    import numpy as np\n    \n    # Gets board at next step if agent drops piece in selected column\n    def drop_piece(grid, col, piece, config):\n        next_grid = grid.copy()\n        for row in range(config.rows-1, -1, -1):\n            if next_grid[row][col] == 0:\n                break\n        next_grid[row][col] = piece\n        return next_grid\n    \n    # Returns True if dropping piece in column results in game win\n    def check_winning_move(obs, config, col, piece):\n        # Convert the board to a 2D grid\n        grid = np.asarray(obs.board).reshape(config.rows, config.columns)\n        next_grid = drop_piece(grid, col, piece, config)\n        # horizontal\n        for row in range(config.rows):\n            for col in range(config.columns-(config.inarow-1)):\n                window = list(next_grid[row,col:col+config.inarow])\n                if window.count(piece) == config.inarow:\n                    return True\n        # vertical\n        for row in range(config.rows-(config.inarow-1)):\n            for col in range(config.columns):\n                window = list(next_grid[row:row+config.inarow,col])\n                if window.count(piece) == config.inarow:\n                    return True\n        # positive diagonal\n        for row in range(config.rows-(config.inarow-1)):\n            for col in range(config.columns-(config.inarow-1)):\n                window = list(next_grid[range(row, row+config.inarow), range(col, col+config.inarow)])\n                if window.count(piece) == config.inarow:\n                    return True\n        # negative diagonal\n        for row in range(config.inarow-1, config.rows):\n            for col in range(config.columns-(config.inarow-1)):\n                window = list(next_grid[range(row, row-config.inarow, -1), range(col, col+config.inarow)])\n                if window.count(piece) == config.inarow:\n                    return True\n        return False\n\n    valid_moves = [col for col in range(config.columns) if obs.board[col] == 0]\n    # Your code here: Amend the agent!\n    for col in valid_moves:\n        if check_winning_move(obs, config, col, obs.mark):\n            return col\n    return random.choice(valid_moves)\n    \n# Check your answer\nq_1.check()","db7c0fd7":"# Lines below will give you a hint or solution code\n#q_1.hint()\nq_1.solution()","ca54f639":"def agent_q2(obs, config):\n    import random\n    import numpy as np\n    \n    # Gets board at next step if agent drops piece in selected column\n    def drop_piece(grid, col, piece, config):\n        next_grid = grid.copy()\n        for row in range(config.rows-1, -1, -1):\n            if next_grid[row][col] == 0:\n                break\n        next_grid[row][col] = piece\n        return next_grid\n    \n    # Returns True if dropping piece in column results in game win\n    def check_winning_move(obs, config, col, piece):\n        # Convert the board to a 2D grid\n        grid = np.asarray(obs.board).reshape(config.rows, config.columns)\n        next_grid = drop_piece(grid, col, piece, config)\n        # horizontal\n        for row in range(config.rows):\n            for col in range(config.columns-(config.inarow-1)):\n                window = list(next_grid[row,col:col+config.inarow])\n                if window.count(piece) == config.inarow:\n                    return True\n        # vertical\n        for row in range(config.rows-(config.inarow-1)):\n            for col in range(config.columns):\n                window = list(next_grid[row:row+config.inarow,col])\n                if window.count(piece) == config.inarow:\n                    return True\n        # positive diagonal\n        for row in range(config.rows-(config.inarow-1)):\n            for col in range(config.columns-(config.inarow-1)):\n                window = list(next_grid[range(row, row+config.inarow), range(col, col+config.inarow)])\n                if window.count(piece) == config.inarow:\n                    return True\n        # negative diagonal\n        for row in range(config.inarow-1, config.rows):\n            for col in range(config.columns-(config.inarow-1)):\n                window = list(next_grid[range(row, row-config.inarow, -1), range(col, col+config.inarow)])\n                if window.count(piece) == config.inarow:\n                    return True\n        return False\n\n    valid_moves = [col for col in range(config.columns) if obs.board[col] == 0]\n    # Your code here: Amend the agent!\n    for col in valid_moves:\n        if check_winning_move(obs, config, col, obs.mark):\n            return col\n    for col in valid_moves:\n        if check_winning_move(obs, config, col, obs.mark%2+1):\n            return col\n    return random.choice(valid_moves)\n\n# Check your answer\nq_2.check()","a6ff97b6":"# Lines below will give you a hint or solution code\n#q_2.hint()\nq_2.solution()","b830d305":"q_3.hint","398fad10":"# Check your answer (Run this code cell to receive credit!)\nq_3.solution()","17b3516a":"def my_agent(obs, config):\n    import random\n    # Your code here: Amend the agent!\n    valid_moves = [col for col in range(config.columns) if obs.board[col] == 0]\n    return random.choice(valid_moves)","85edebb3":"# Run this code cell to get credit for creating an agent\nq_4.check()","05577d70":"from kaggle_environments import evaluate, make, utils\n\nenv = make(\"connectx\", debug=True)\nenv.play([agent_q1, None], width=500, height=450)","38ae0be0":"import inspect\nimport os\n\ndef write_agent_to_file(function, file):\n    with open(file, \"a\" if os.path.exists(file) else \"w\") as f:\n        f.write(inspect.getsource(function))\n        print(function, \"written to\", file)\n\nwrite_agent_to_file(agent_q2, \"submission.py\")\n\n# Check that submission file was created\nq_5.check()","1c15a2a3":"**[Intro to Game AI and Reinforcement Learning Home Page](https:\/\/www.kaggle.com\/learn\/intro-to-game-ai-and-reinforcement-learning)**\n\n---\n","85f0bfd8":"### 2) An even smarter agent\n\nIn the previous question, you created an agent that selects winning moves.  In this problem, you'll amend the code to create an agent that can also block its opponent from winning.  In particular, your agent should:\n- Select a winning move, if one is available.\n- Otherwise, it selects a move to block the opponent from winning, if the opponent has a move that it can play in its next turn to win the game. \n- If neither the agent nor the opponent can win in their next moves, the agent selects a random move.\n\nTo help you with this exercise, you are encouraged to start with the agent from the previous exercise.  \n\n**To check if the opponent has a winning move, you can use the `check_winning_move()` function, but you'll need to supply a different value for the `piece` argument.**  ","d86bfe01":"Run the next code cell to play a game round against the agent.  To select a move, click on the game screen in the column where you'd like to place a disc.\n\nAfter the game finishes, you can re-run the code cell to play again!","dd42dd49":"# Keep going\n\nLearn how to **[use heuristics](https:\/\/www.kaggle.com\/alexisbcook\/one-step-lookahead)** to improve your agent.","fc9479e4":"Then, follow these steps:\n1. Begin by clicking on the blue **Save Version** button in the top right corner of this window.  This will generate a pop-up window.  \n2. Ensure that the **Save and Run All** option is selected, and then click on the blue **Save** button.\n3. This generates a window in the bottom left corner of the notebook.  After it has finished running, click on the number to the right of the **Save Version** button.  This pulls up a list of versions on the right of the screen.  Click on the ellipsis **(...)** to the right of the most recent version, and select **Open in Viewer**.  This brings you into view mode of the same page. You will need to scroll down to get back to these instructions.\n4. Click on the **Output** tab on the right of the screen.  Then, click on the **Submit to Competition** button to submit your results to the leaderboard.\n\nYou have now successfully submitted to the competition!\n\nIf you want to keep working to improve your performance, select the blue **Edit** button in the top right of the screen. Then you can change your code and repeat the process. There's a lot of room to improve, and you will climb up the leaderboard as you work.\n\n\nGo to **\"My Submissions\"** to view your score and episodes being played.","7397f4ac":"The `check_winning_move()` function takes four required arguments: the first two (`obs` and `config`) should be familiar, and: \n- `col` is any valid move \n- `piece` is either the agent's mark or the mark of its opponent.  \n\nThe function returns `True` if dropping the piece in the provided column wins the game (for either the agent or its opponent), and otherwise returns `False`.  To check if the agent can win in the next move, you should set `piece=obs.mark`.\n\n**To complete this exercise, you need to define `agent_q1()` in the code cell below.  To do this, you're encouraged to use the `check_winning_move()` function.**  \n\nThe `drop_piece()` function (defined in the code cell above) is called in the `check_winning_move()` function.  Feel free to examine the details, but you won't need a detailed understanding to solve the exercise.","f398d1a3":"# Introduction\n\nYou have seen how to define a random agent.  In this exercise, you'll make a few improvements.\n\nTo get started, run the code cell below to set up our feedback system.","db0e1090":"### 3) Looking ahead\n\nSo far, you have encoded an agent that always selects the winning move, if it's available.  And, it can also block the opponent from winning.\n\nYou might expect that this agent should perform quite well!  But how is it still possible that it can still lose the game?","97c5f367":"### 4) Play against an agent\n\nAmend the `my_agent()` function below to create your own agent.  Feel free to copy an agent that you created above.  \n\nNote that you'll have to include all of the necessary imports and helper functions.  For an example of how this would look with the first agent you created in the exercise, take a look at **[this notebook](https:\/\/www.kaggle.com\/alexisbcook\/create-a-connectx-agent)**.","c2cf5308":"---\n**[Intro to Game AI and Reinforcement Learning Home Page](https:\/\/www.kaggle.com\/learn\/intro-to-game-ai-and-reinforcement-learning)**\n\n\n\n\n\n*Have questions or comments? Visit the [Learn Discussion forum](https:\/\/www.kaggle.com\/learn-forum) to chat with other Learners.*","76a5cba3":"* agent_q1 is created in version 6\n* agent_q2 is created in version 8","40eda948":"### 1) A smarter agent\n\nWe can improve the performance without devising a complicated strategy, simply by selecting a winning move, if one is available.\n\nIn this exercise, you will create an agent that:\n- selects the winning move, if it is available.  (_If there is more than one move that lets the agent win the game, the agent can select any of them._)\n- Otherwise, it should select a random move.\n\nTo help you with this goal, we provide some helper functions in the code cell below. ","c4c63018":"# The original Exercise will create Error in the submission. In this file, I revised codes to make all submssion work.\n* agent_q1 is created in version 6\n* agent_q2 is created in version 8\n","6b41d6bd":"### 5) Submit to the competition\n\nNow, it's time to make your first submission to the competition!  Run the next code cell to write your agent to a submission file."}}