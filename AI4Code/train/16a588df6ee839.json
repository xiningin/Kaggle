{"cell_type":{"ae3a7481":"code","15d66bae":"code","74848f78":"code","d8b60d50":"code","017fac78":"code","d90a7765":"code","2f4fc948":"code","152c042a":"code","28ba7635":"code","c32add49":"code","5a4b3b91":"code","c6892d40":"code","1e7d2a1d":"code","8597940d":"code","7a5de468":"code","cdff5011":"code","319afed8":"code","8a21193a":"code","cc12dd11":"code","4664c885":"code","1921fb95":"code","71a97af8":"markdown","4b34d9b4":"markdown","4aa06895":"markdown","abfcfbf7":"markdown","d0223b65":"markdown","5612dbb8":"markdown","f35b50e1":"markdown","0ba876ce":"markdown","5fd78d0a":"markdown","24bbd4ec":"markdown","8a02cb5c":"markdown"},"source":{"ae3a7481":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","15d66bae":"train_and_valid = pd.read_csv(\"..\/input\/bluebook-for-bulldozers\/TrainAndValid.csv\",\n                             low_memory = False, #to avoid the error shown above\n                             parse_dates = [\"saledate\"]) #to convert into date time, (see column index - 9)\ntrain_and_valid.info()","74848f78":"train_and_valid.head()","d8b60d50":"train_and_valid.head().T","017fac78":"import matplotlib.pyplot as plt\n%matplotlib inline\n\nfig, ax = plt.subplots()\nax.scatter(train_and_valid[\"saledate\"][:1000], train_and_valid[\"SalePrice\"][:1000]);","d90a7765":"train_and_valid.SalePrice.plot.hist();","2f4fc948":"# Import Pipeline from sklearn's pipeline module\nfrom sklearn.pipeline import Pipeline\nfrom sklearn.preprocessing import FunctionTransformer\n\ndef preprocess_data(df):\n    # Add datetime parameters for saledate\n#     global saleYear, saleMonth, saleDay\n    df['saleYear'] = df['saledate'].dt.year\n    df['saleMonth'] = df['saledate'].dt.month\n    df['saleDay'] = df['saledate'].dt.day\n\n    # Drop original saledate\n    df.drop(\"saledate\", axis=1, inplace=True)\n#     df.drop(\"SalesID\", axis=1, inplace=True) # this doesn't follow a pattern\n    \n    \n    # Fill numeric rows with the median\n    for label, content in df.items():\n        temp = label+\"_is_missing\"\n        if pd.api.types.is_numeric_dtype(content):\n#         if pd.isnull(content).sum():\n            df[temp] = pd.isnull(content)\n            df[label] = content.fillna(content.median())\n                \n        # Turn categorical variables into numbers\n        if not pd.api.types.is_numeric_dtype(content):\n            df[label+\"_is_missing\"] = pd.isnull(content)\n            # We add the +1 because pandas encodes missing categories as -1\n            df[label] = pd.Categorical(content).codes+1        \n    \n    return df\n\ndata_process = FunctionTransformer(preprocess_data, validate = False)","152c042a":"# split the data into training and validation\ndf_valid = train_and_valid[train_and_valid['saledate'].dt.year == 2012] \ndf_train = train_and_valid[train_and_valid['saledate'].dt.year != 2012]\n\ndf_valid.shape, df_train.shape\n\n# split the data in X and y\n\nX_train = df_train.drop(\"SalePrice\", axis = 1)\ny_train = df_train[\"SalePrice\"]\n\nX_valid = df_valid.drop(\"SalePrice\", axis = 1)\ny_valid = df_valid[\"SalePrice\"]","28ba7635":"from sklearn.ensemble import RandomForestRegressor\nfrom sklearn.model_selection import RandomizedSearchCV\n\nrf_grid = {\"n_estimators\" : np.arange(10, 100, 10), \n          \"max_depth\": [None, 3, 5, 10],\n          \"min_samples_split\" : np.arange(2, 20, 2),\n          \"min_samples_leaf\" : np.arange(1, 20, 2),\n          \"max_features\" : [0.5, 1, \"sqrt\", \"auto\"],\n          \"max_samples\" : [10000]}\n\nmodel = RandomizedSearchCV(RandomForestRegressor(),\n                              param_distributions = rf_grid,\n                              n_iter = 20,\n                              n_jobs = -1,\n                              cv = 5, \n                              verbose = True)","c32add49":"model_pipeline = Pipeline(steps = [\n    (\"preprocess\", data_process),\n    ('model_rfr', model)\n])","5a4b3b91":"model_pipeline.fit(X_train, y_train)","c6892d40":"y_preds = model_pipeline.predict(X_valid)","1e7d2a1d":"from sklearn.metrics import mean_absolute_error, mean_squared_log_error, r2_score\n\ndef rmsle(y_test, y_preds):\n    return np.sqrt(mean_squared_log_error(y_test, y_preds))\n\n#create a function to get other values\ndef show_scores(y_test, y_preds):\n    scores = {\"MAE\" : mean_absolute_error(y_test, y_preds),\n              \"RMSLE\" : rmsle(y_test, y_preds),\n              \"R^2\" : r2_score(y_test, y_preds)} #default parameter \n    return scores","8597940d":"show_scores(y_valid, y_preds)","7a5de468":"model_pipeline[1]","cdff5011":"test = pd.read_csv(\"..\/input\/bluebook-for-bulldozers\/Test.csv\",\n                             low_memory = False, #to avoid the error shown above\n                             parse_dates = [\"saledate\"]) #to convert into date time, (see column index - 9)\ntest.info()","319afed8":"y_preds_test = model_pipeline.predict(test)","8a21193a":"test_submission = pd.DataFrame(data = [test[\"SalesID\"].astype(int), \n                                y_preds_test], \n                        index = [\"SalesID\", \"SalesPrice\"])\ntest_submission = test_submission.T\ntest_submission.head()","cc12dd11":"test_submission.to_csv(\".\/predictions.csv\", index=False)\n","4664c885":"feature_importance= pd.DataFrame(data = [model.best_estimator_.feature_importances_],\n                                 columns = test.columns,\n                                 index = [\"features_importance\"]).T.sort_values(\"features_importance\",\n                                               ascending = False)\n    \nfeature_importance","1921fb95":"import seaborn as sns \n\ndef plot_features(df, n = 20): # plot top 20 (be default) features\n    \n    sns.barplot(x = \"features_importance\",\n                y = df.index[:n],\n               data = df[:n],\n               orient = 'h')\nplot_features(feature_importance)","71a97af8":"### Feature Importance","4b34d9b4":"## 6. Process the data\n\nThis won't work since we've got missing numbers and categories\n```python\nfrom sklearn.ensemble import RandomForestRegressor\n\nmodel = RandomForestRegressor(n_jobs=-1)\nmodel.fit(df_tmp.drop(\"SalePrice\", axis=1), df_tmp.SalePrice)\n```\nWe still have data types which are not compatible for the model\n\n---\n### Add datetime parameters for saledate column\n\nSo we can enrich our dataset with as much information as possible.\n\nBecause we imported the data using `read_csv()` and we asked pandas to parse the dates using `parase_dates=[\"saledate\"]`, we can now access the [different datetime attributes](https:\/\/pandas.pydata.org\/pandas-docs\/stable\/reference\/api\/pandas.DatetimeIndex.html) of the `saledate` column.\n\n### Convert strings to categories\n\nOne way to help turn all of our data into numbers is to convert the columns with the string datatype into a category datatype.\n\nTo do this we can use the [pandas types API](https:\/\/pandas.pydata.org\/pandas-docs\/stable\/reference\/general_utility_functions.html#data-types-related-functionality) which allows us to interact and manipulate the types of data.\n\n### Filling numerical values\nWe're going to fill any column with missing values with the median of that column.\nAfter filling the numeric values, we'll do the same with the categorical values at the same time as turning them into numbers.","4aa06895":"### Fitting the pipeline","abfcfbf7":"## 7. Modelling\n\nWe've explored our dataset a little as well as enriched it with some datetime attributes, now let's try to model.\n\nFollowing the [Scikit-Learn machine learning map](https:\/\/scikit-learn.org\/stable\/tutorial\/machine_learning_map\/index.html), we find a [RandomForestRegressor()](https:\/\/scikit-learn.org\/stable\/modules\/generated\/sklearn.ensemble.RandomForestRegressor.html#sklearn-ensemble-randomforestregressor) might be a good candidate.\n\n### Hyperparameter Tunning\n\nBefore training the model on full 400k records, we will train it on 10k records and find the best model by hyperparameter tunning. Once we are able to find the best sets of parameter, we will train the model with full dataset.","d0223b65":"## 5. Data Visualization","5612dbb8":"### Splitting data into train\/valid sets\n\nWe need had to preprocess the data so we didn't took \"train.csv\" and \"valid.csv\" separately. We will split our processed data. The validation set and test set are split according to dates.  \nThis makes sense since we're working on a time series problem.    \nE.g. using past events to try and predict future events.  \n\nKnowing this, randomly splitting our data into train and test sets using something like `train_test_split()` wouldn't work.  \nInstead, we split our data into training, validation and test sets using the date each sample occured.  \nIn our case:\n* Training = all samples up until 2011\n* Valid = all samples form January 1, 2012 - April 30, 2012\n* Test = all samples from May 1, 2012 - November 2012\n\nFor more on making good training, validation and test sets, check out the post [How (and why) to create a good validation set](https:\/\/www.fast.ai\/2017\/11\/13\/validation-sets\/) by Rachel Thomas.","f35b50e1":"## 1. Problem Definition\n\nFor this dataset, the problem we're trying to solve, or better, the question we're trying to answer is,\n\n> How well can we predict the future sale price of a bulldozer, given its characteristics previous examples of how much similar bulldozers have been sold for?\n\n## 2. Data\n\nIn this case, it's historical sales data of bulldozers. Including things like, model type, size, sale date and more.\n\nThere are 3 datasets:\n1. **Train.csv** - Historical bulldozer sales examples up to 2011 (close to 400,000 examples with 50+ different attributes, including `SalePrice` which is the **target variable**).\n2. **Valid.csv** - Historical bulldozer sales examples from January 1 2012 to April 30 2012 (close to 12,000 examples but missing the `SalePrice` attribute, as this is what we'll use to tune HyperParameters).\n3. **Test.csv** - Historical bulldozer sales examples from May 1 2012 to November 2012 (close to 12,000 examples but missing the `SalePrice` attribute, as this is what we'll be trying to predict).\n\n## 3. Evaluation\n\nFor this problem, [Kaggle has set the evaluation metric to being root mean squared log error (RMSLE)](https:\/\/www.kaggle.com\/c\/bluebook-for-bulldozers\/overview\/evaluation). As with many regression evaluations, the goal will be to get this value as low as possible.\n\n[Root Mean Squre vs Root Mean Squared Log Error](https:\/\/medium.com\/analytics-vidhya\/root-mean-square-log-error-rmse-vs-rmlse-935c6cc1802a)\n\nTo see how well our model is doing, we'll calculate the RMSLE and then compare our results to others on the [Kaggle leaderboard](https:\/\/www.kaggle.com\/c\/bluebook-for-bulldozers\/leaderboard).\n\n## 4. Features\n\nFeatures are different parts of the data. During this step, you'll want to start finding out what you can about the data.\n\nOne of the most common ways to do this, is to create a **data dictionary**.\n\nFor this dataset, Kaggle provide a data dictionary which contains information about what each attribute of the dataset means.\n\nWith all of this being known, let's get started! \n\nFirst, we'll import the dataset and start exploring. Since we know the evaluation metric we're trying to minimise, our first goal will be building a baseline model and seeing how it stacks up against the competition.","0ba876ce":"### Building an evaluation function\n\nIt's important to understand the evaluation metric you're going for.  \n**RMSLE** = generally you don't care as much if you're off by $10 as much as you'd care if you were off by 10%, you care more about ratios rather than differences. **MAE** (mean absolute error) is more about exact differences.\n\nSince Scikit-Learn doesn't have a function built-in for RMSLE, we'll create our own. We can do this by taking the square root of Scikit-Learn's [mean_squared_log_error](https:\/\/scikit-learn.org\/stable\/modules\/generated\/sklearn.metrics.mean_squared_log_error.html#sklearn.metrics.mean_squared_log_error) (MSLE). MSLE is the same as taking the log of mean squared error (MSE).  \nWe'll also calculate the MAE and R^2 for our evaluation","5fd78d0a":"### Creating the pipeline","24bbd4ec":"## 8. Creating test predictions\n\nAlthough we are creating a submission file. The competiton is closed and we have to consider the valid scores as evaluation parameter only.","8a02cb5c":"## For a more detailed notebook. Check version 3"}}