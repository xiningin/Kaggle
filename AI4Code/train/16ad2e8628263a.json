{"cell_type":{"070b9b87":"code","897756ba":"code","2c55a5cb":"code","2abfcb50":"code","58929d48":"code","876fe3f5":"code","cfa51dc4":"code","e20265a1":"code","1d5d7a0d":"code","260c6bea":"markdown","46389204":"markdown","0b4cf85b":"markdown","e3abfbc4":"markdown"},"source":{"070b9b87":"import numpy as np\nimport pandas as pd\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nsns.set(color_codes=True)\nimport os\nprint(os.listdir(\"..\/input\"))","897756ba":"df = pd.read_csv(\"..\/input\/train.tsv\", sep=\"\\t\")\ndf_test = pd.read_csv(\"..\/input\/test.tsv\", sep=\"\\t\")","2c55a5cb":"df.shape","2abfcb50":"def print_sentence(df, sentence_id=None):\n    if not sentence_id:\n        sentence_ids = df_test.SentenceId.unique()\n        sentence_id = np.random.choice(sentence_ids)\n    print(\"Sentence ID = {}\".format(sentence_id))\n    return df[df.SentenceId == sentence_id].iloc[:].Phrase\n\nprint_sentence(df_test)","58929d48":"dist = df.groupby([\"Sentiment\"]).size()\ndist = dist \/ dist.sum()\nfig, ax = plt.subplots(figsize=(12,8))\nsns.barplot(dist.keys(), dist.values);","876fe3f5":"def generate_dummy_submission():\n    df_submission = df_test.copy()\n    n = df_submission.shape[0]\n    df_submission[\"Sentiment\"] = [2] * n\n    df_submission = df_submission.loc[:, [\"PhraseId\", \"Sentiment\"]]\n    df_submission.to_csv(\"submission.csv\", index=False)\n    \n# generate_dummy_submission() ","cfa51dc4":"from sklearn.feature_extraction.text import CountVectorizer\nfrom sklearn.feature_extraction.text import TfidfVectorizer\nfrom sklearn.svm import LinearSVC\nfrom sklearn.pipeline import Pipeline\nfrom sklearn.model_selection import StratifiedKFold","e20265a1":"svc = LinearSVC(\n    C=1.0,\n    class_weight='balanced',\n    dual=True,\n    fit_intercept=True,\n    intercept_scaling=1,\n    loss='squared_hinge',\n    max_iter=1000,\n    multi_class='ovr',\n    penalty='l2',\n    random_state=0,\n    tol=1e-05, \n    verbose=0\n)\n\ntfidf = CountVectorizer(\n    input='content',\n    encoding='utf-8',\n    decode_error='strict',\n    strip_accents=None,\n    lowercase=True,\n    preprocessor=None,\n    tokenizer=None,\n    stop_words=None,\n    token_pattern=r\"(?u)\\b\\w\\w+\\b\",\n    ngram_range=(1, 1),\n    analyzer='word',\n    max_df=1.0,\n    min_df=1,\n    max_features=None,\n    vocabulary=None,\n    binary=False,\n    dtype=np.int64\n)\n\npipeline = Pipeline([\n    ('tfidf', tfidf),\n    ('svc', svc),\n])","1d5d7a0d":"skf = StratifiedKFold(n_splits=3)\n\nX = df.Phrase\ny = df.Sentiment\n\nfor train, test in skf.split(X, y):\n    pipeline.fit(X[train], y[train])\n    train_score = pipeline.score(X[train], y[train])\n    test_score = pipeline.score(X[test], y[test])\n    print(\"Train = {}, Test = {}\".format(train_score, test_score))","260c6bea":"# 3. TF-IDF + SVMs","46389204":"# 1. Explore Data","0b4cf85b":"# Rotten Tomatoes Sentiment Analysis","e3abfbc4":"# 2. Dummy Submission: Everything Neutral\nAccuracy = 0.51"}}