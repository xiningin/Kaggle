{"cell_type":{"f4b218da":"code","576bf2c8":"code","981adf0a":"code","34297e8b":"code","5cc8d0e4":"code","d182e4f1":"code","6188adda":"code","42ee80e9":"code","d7b5532e":"code","ef070fe3":"code","2843c097":"code","8e051b8c":"code","5da97a52":"code","0284bb32":"code","81d93c24":"markdown","9e9167b3":"markdown","6a7abcb8":"markdown","29c39007":"markdown","32bff51c":"markdown","5a25fe0f":"markdown","72e349e7":"markdown","84d2eeac":"markdown","e542aafc":"markdown","38c8474e":"markdown","d3bb7fa2":"markdown","76939c5f":"markdown","a8e7ca46":"markdown","0084bf3f":"markdown","29ba4ae7":"markdown","84e13103":"markdown","ccb5083a":"markdown","c55c6ce5":"markdown","8ecf3b47":"markdown","cbc19b4c":"markdown","a34503d1":"markdown","6bfa9aa4":"markdown","120a2865":"markdown","a2f8b9df":"markdown","e444e890":"markdown","9cc6d00e":"markdown","39925bfb":"markdown","e287af9d":"markdown","b494997c":"markdown","ee7a9183":"markdown","203c6cdc":"markdown","5db20d90":"markdown","9fce3489":"markdown","91990171":"markdown","6e639182":"markdown","1c505959":"markdown","03952ee1":"markdown","b2afa43c":"markdown","41818392":"markdown","ad05696b":"markdown","a3a4f8dd":"markdown","da2e2634":"markdown","510b6ea7":"markdown","c663f57b":"markdown"},"source":{"f4b218da":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\nfrom scipy.stats import sem, t\nimport seaborn as sns\nimport scipy.stats as stats\nimport statsmodels.api as sm\n\nimport os\nprint(os.listdir(\"..\/input\"))","576bf2c8":"loans_income = np.array(pd.read_csv(\"..\/input\/loans-income\/loans_income.csv\"))\nloans_income[:5]","981adf0a":"# Making a flat list from list of lists\nloans_income = np.array([item for sublist in loans_income for item in sublist])","34297e8b":"def bootstrap(l,R):\n    n = len(loans_income)\n    # Number of Bootstrap Samples\n    means_of_boot_samples = []\n    for reps in range(R):\n        #Steps 1,2\n        boot_sample = np.random.choice(loans_income, size = n)\n        #Step 3\n        means_of_boot_samples.append(round(np.mean(boot_sample), 3))\n    return means_of_boot_samples\n\nbootstrap(loans_income, 5)","5cc8d0e4":"np.std(bootstrap(loans_income, 100))","d182e4f1":"plt.figure(dpi = 200)\n\nplt.subplot(221)\nplt.title(\"R = 10.000\")\nplt.hist(bootstrap(loans_income, 10000), edgecolor = 'k')\n\nplt.subplot(222)\nplt.title(\"R = 1000\")\nplt.hist(bootstrap(loans_income, 1000), edgecolor = 'k')\n\nplt.subplot(223)\nplt.title(\"R = 100\")\nplt.hist(bootstrap(loans_income, 100), edgecolor = 'k')\n\nplt.subplot(224)\nplt.title(\"R = 10\")\nplt.hist(bootstrap(loans_income, 10), edgecolor = 'k')\n\nplt.tight_layout()","6188adda":"data = bootstrap(loans_income, 1000)\nlower_lim, upper_lim = np.percentile(data, 2.5), np.percentile(data, 95)\nprint(\"Lower Limit: \", lower_lim)\nprint(\"Upper Limit: \", upper_lim)","42ee80e9":"plt.figure(dpi = 200)\nplt.title(\"95% Confidence interval of loan aplicants based on a sample of 1000 means\")\n\nsns.distplot(bootstrap(loans_income, 1000), hist=True, kde=True, \n             color = 'darkblue', bins = 50,\n             hist_kws={'edgecolor':'black'},\n             kde_kws={'linewidth': 2})\n\nplt.axvline(x=lower_lim,color='red')\nplt.axvline(x=upper_lim,color='red')","d7b5532e":"#  Genreating normal distribution (0 is the mean, 0.1 is the std, 100 is the quanity of values)\nnorm = np.random.normal(0,0.1,100)\n\n# Plotting\nfig, ax = plt.subplots(dpi = 300)\nprobplot = sm.ProbPlot(norm)\n# We use semicolon \";\" here to avoid plotting the same thing twice.\nprobplot.qqplot(line = 's', xlabel = \"\", ylabel = \"\", ax=ax);","ef070fe3":"# Importing data\nnflx = np.array(pd.read_csv(\"..\/input\/stock-price\/sp500_data.csv\")[\"NFLX\"])\n\n# Plotting\nfig, ax = plt.subplots(dpi = 300)\nprobplot = sm.ProbPlot(nflx)\n# We use semicolon \";\" here to avoid plotting the same thing twice.\nprobplot.qqplot(line = 's', xlabel = \"\", ylabel = \"\", ax=ax);","2843c097":"# n = 200, p = 0.02, x = ?\nprint(\"x(number of sucesses): \", np.random.binomial(200, 0.02))","8e051b8c":"np.random.poisson(2, 100)","5da97a52":"np.random.exponential(.2, 100)","0284bb32":"np.random.weibull(1.5, 100)","81d93c24":"## Normal Distribution and QQ-plots","9e9167b3":"### Weibulll distribution","6a7abcb8":"**Key terms**\n* Lambda\n> The rate (per unit of time or space) at which event occurs.\n* Poisson distribution\n> The frequency distribution of the number of events in sampled units of time or space.\n* Exponential distribution\n> The frequency distribution of the time or distance from one event to the next event.\n* Weibull distribution\n> A generalized verion of the exponential, in which the event rate is allowed to shift over time.\n","29c39007":"1. Draw a sample value, record, replace it.\n2. Repeat n times.\n3. Record the mean of the **n** resampled values.\n4. Repeat steps 1-3 **R** times.\n5. Use the **R** result to:\n>* Calculate their standard deviation.\n>* Produce a histogram or a boxplot.\n>* Find a confidence interval.","32bff51c":"In the era of big data, the principles of random sampling remain important  when  accurate  estimates  are needed.  Random  selection  of  data  can  reduce  bias  and  yield  a  higher  quality  data  set  than  would  result from  just  using  the  conveniently  available  data.  Knowledge  of  various  sampling  and  data  generating distributions  allows  us  to  quantify  potential  errors  in  an  estimate  that  might  be  due  to  random  variation.  At the  same  time,  [the bootstrap](#The-Bootstrap)  (sampling  with  replacement  from  an  observed  data  set)  is  an  attractive  \u201cone size  fits  all\u201d  method  to  determine  possible  error  in  sample  estimates.  \n","5a25fe0f":"Yes\/no (binomial) outcomes lie at the heart of analytics since they are often the culmination of a decision or oter process; buy\/don't buy, click\/don't click, survive\/die. and so on. Central to understanding the binomial distribution is the idea of a set of trials, each trial having two possible outcome with definite probabilities.\n<p>For example, flipping a coin 10 times is a binomial experiment with 10 trials, each trial having two possible outcomes (heads or tails). Such yes\/no outcomes are termed binary outcomes.<\/p>\n<p>The binomial distribution is the frequency distribution of the number of successes (*x*) in a given number of trials (*n*) with specified probability (*p*)of sucess in each trial.\n<br>The binomial distribution would answer a question like:\n> if the probability of a click converting to a sale is 0.02, what is the probability of observing 0 sales in 200 clicks?\n<p>The Python function *numpy.random.binomial* calculates binomial probabilites. For example:","72e349e7":"The code above generates 100 random numbers from a Poisson distribution with \u03bb = 2. For example, if incoming customer service calls average 2 per minute, this code will simulate 100 minutes, returning the number of calls in each of those 100 minutes.","84d2eeac":"From prior data we can estimate the average number of events per unit of time or space, but we might also want to know how different this might be from one unit of time\/space to another. The Poisson distribution tells us the distribution of events per unit of time or space when we sample many such units. It is useful when addressing queuing questions like \"How much capacity do we need to be 95% sure of fully processing the internet traffic that arrive on a server in any 5 seconds.\n<p>\n    The key parameter in a Poisson distribution is **\u03bb**, or lambda. This is the mean number of events that occurs in a specified interval of time or space. The variance of Poisson distribution is also **\u03bb**.\n<p>\n    A common technique is to generate random numbers from Poisso distribution as part of queuing simulation. The *numpy.random.poisson* function in Python does this, taking only two arguments-lambda and the quanity of random numbers to sought.","e542aafc":"### Exponential Distrbution","38c8474e":"The mean of a binomial distribution is *n* x *p* <br>\nThe variance is *n* x *p*(1-*p*)","d3bb7fa2":"## Long-Tailed Distribution","76939c5f":"## Definition of Bootstrap","a8e7ca46":"# Table of Contents\n1. [The Bootstrap](#The-Bootstrap)\n>* [Definition of Bootstrap](#Definition-of-Bootstrap)\n>* [Why Do We Use The Bootstrap](#Why-Do-We-Use-The-Bootstrap)\n>* [The Algorithm For A Bootstrap](#The-Algorithm-For-A-Bootstrap)\n>* [An Example of Using The Bootstrap](#An-Example-of-Using-The-Bootstrap)\n2. [Types of Distributions](#Types-of-Distributions)\n>* [Normal Distribution and QQ-plots](#Normal-Distribution-and-QQ-plots)\n>* [Long-Tailed Distribution](#Long-Tailed-Distribution)\n>* [Student's T-Distribution](#Student's-T-Distribution)\n>* [Binomial Distribution](#Binomial-Distribution)\n>* [Poisson and Related Distributions](#Poisson-and-Related-Distributions)\n>>* [Poisson Distribution](#Poisson-Distribution)\n>>* [Exponential Distributon](#Exponential-Distribution)\n>>* [Weibull Distribution](#Weibull-Distribution)\n3. [Summary](#Summary)","0084bf3f":"The bell-shaped ormal distribution is iconic in traditional statistics. In a normal distribution 68% of the data lies within one standard deviation of the mean, and 95% lies within two standard deviations.","29ba4ae7":"**Key terms**\n* Error\n> The difference between a data point and a predicted or average value.\n* Standardize\n> Subtract the mean and divide by the standard deviation.\n* Z-score\n> The result of standardizing an individual data point.\n* Standard normal\n> A normal distribution with mean = 0 and standard deviation = 1.\n* QQ-plot\n> A plot to visualize how close a sample distribution is to a normal distribution.","84e13103":"### Poisson Distribution\n","ccb5083a":"Using the same parameter *\u03bb* that we used in the Poisson distribution, we can also model the distribution of the time between events: time between visits to a website or between cars arriving at a toll plaza. It is also used in engineering to model time to failure, and in process managment to model, for example, the time required per service call. The Python code to generate random numbers from an exponential distribution takes two arguments *szie* (the quanity of numbers to be generated), and *rate* (*\u03bb*), the number of events per time period. <p>For example:","c55c6ce5":"In many cases, the event rate does not remain constant over time. If the period over which it changes is much longer than typical interval between events, there is no problem; you just subdivide the analysis into segments where rates are relatively constant, as mentioned before. If, however, the event rate changes over the time of the interval, the Exponential (or Poisson) distributions are not longer useful. This is likely to be the case in mechanical failure-the risk of failure increases as time goes by. The Weiblull distribution is an extensions of the exponential distribution, in which the event rate is allowed to change, as specified by a shape parameter, *\u03b2*. If *\u03b2*>1, the probability of an event increases over time, if *\u03b2*<1, it decreases. \n<p>\n    The Python code numpy.random.weibull() generates random numbers from a Weibull distribution takes two arguments, *shape* and *size* (the quanity of numbers to be generated).\n<\/p>\nFor example, the following code generates 100 random numbers from a Weibull distribution with shape of 1.5 .","8ecf3b47":"This code generates 100 random numbers from an exponential distribution where the mean number of events per time is 0.2. So you could use it to simulate 100 intervals, in minutes, between service calls, where the average rate of incoming calls is 0.2 per minute.","cbc19b4c":"## Why Do We Use The Bootstrap","a34503d1":"**Key terms**\n* Tail\n> The long narrow portion of a frequency distribution, where relatively extreme values occur at low frequency.\n* Skew\n> Where one tail of a distribution is longer than the other.","6bfa9aa4":"The t-distribution is a normally shaped distribution, but a bit thicker and longer on the tails. Distributions of sample means are typically shaped like a t-distribution, and there is a family of t-distributions that differ depending on how large the sample is. The larger the sample, the more normally shaped the t-distribution becomes.\n<p>\n    The t-distribution is often called Stident's t because it was published in 1908 in Biometrika by W. S. Gosset under the name \"Student\" ","120a2865":"![image.png](attachment:image.png)","a2f8b9df":"# The Bootstrap","e444e890":"**C.** Find a confidence interval.","9cc6d00e":"## The Algorithm For A Bootstrap","39925bfb":"# Summary","e287af9d":"**A**. Their standard deviation (this estimates sample mean **standard error**)","b494997c":"The points are far below the line for low values and far above the line for high values. This means that we are much more likely to observe extreme values than would be expected if the data had a normal distribution.","ee7a9183":"A **QQ-Plot** is used to visually determine how close a sample is to the normal distribution. The QQ-plot orders the z-scores from low to high, and plots each value's z-score on the y-axis; the x-axis is\tthe corresponding\tquantile\tof\ta\tnormal\tdistribution\tfor\tthat\tvalue\u2019s\trank.\tSince\tthe\tdata\tis\tnormalized,\tthe units\tcorrespond\tto\tthe\tnumber\tof\tstandard\tdeviations\taway\tof\tthe\tdata\tfrom\tthe\tmean.\tIf\tthe\tpoints roughly\tfall\ton\tthe\tdiagonal\tline,\tthen\tthe\tsample\tdistribution\tcan\tbe\tconsidered\tclose\tto\tnormal.\tFigure\tbelow\tshows\ta\tQQ-Plot\tfor\ta\tsample\tof\t100\tvalues\trandomly\tgenerated\tfrom\ta\tnormal\tdistribution;\tas expected,\tthe\tpoints\tclosely\tfollow\tthe\tline.","203c6cdc":"The bootstrap is used for sample size determination; experiment with different values for **n** *to see how the sampling distribution is affected*.","5db20d90":"## Binomial Distribution","9fce3489":"# Types of Distributions","91990171":"**B**. Produce a histogram or boxplot","6e639182":"Many processes produce events randomly at a given overall rate-visitors arriving at a website, car arriving at a toll plaza (events spread over time), imperfection in a square meter of fabric, or typos per 100 lines of code (events spread over space).","1c505959":"Despite the importance of normal distribution historically in statistics, and in contrast to what the name would suggest, data is generally not norally distributed. <br>\nWhile the normal distribution is often appropriate and useful with respect to the distribution of errors and sample statistic, it typically does not characterize the distribution of raw data. Sometimes, the distribution is highly skewed (asymmetric), such as with income data, or the distribution can be discrete, as with binomial data. Both symmetric and asymmetric distributions may have longtails. The tails of distribution correspond to the extreme values (small and large). Long tails, and guarding against them, are widely recognized in practical work. <br>\n<p>A good example to illustrate the long-tailed nature of data is stock returns.<br> Figure bellow shows the QQ-plot for the daily stock returns for Netflix.<\/p>","03952ee1":"## An Example of Using The Bootstrap","b2afa43c":"## Poisson and Related Distributions","41818392":"**Key terms**\n* Trial\n> An event with a discrete outcome (e.g. a coin flip).\n* Success \n> The outcome of interest for a trial.\n* Binomial\n> Having two outcomes\n* Binomial trial\n> A trial with two outcomes\n* Binomial distribution\n> Distribution of number of successes in x trials","ad05696b":"Now as we have a means of bootstrap samples we can estimate:","a3a4f8dd":"As we can see distribution of 10000 means is more compact and bell-shaped than the distribution with smaller amount of means. This phenomenon is termed as **central limit theorem**.","da2e2634":"## Student's T-Distribution","510b6ea7":"***Source*: Book - Practical Statistics for Data Scientists. Code samples were translated from R to Python by me.**","c663f57b":"One easy and effective way to estimate the sampling distributions of a statistic, or of model parameters, is to draw additional samples,with replacement, from the sample itself and recalculate the statistic or model for each resample. This procedure is called the **bootstrap**."}}