{"cell_type":{"169403f3":"code","5a22ea15":"code","d4154ca7":"code","f83e67c9":"code","1acc3755":"code","1be4e5ba":"code","b2971a46":"code","24d5fd2f":"code","e89d0445":"code","267d3bab":"code","39b67067":"code","a89e4e6e":"code","283ff1be":"code","77caf496":"code","a6962b75":"code","65b7b200":"code","29efc23a":"code","8ade7037":"code","160ada19":"code","aaaa32a1":"code","b8f79ad8":"code","03a142b6":"code","4beec771":"code","833f8df8":"code","22b2eb8d":"code","de24f6d6":"code","7d33c44f":"code","7bdbe780":"code","ff4083c4":"code","54cefe77":"code","c6cefe56":"code","e36815d0":"code","07be83c9":"code","a2e7d915":"code","65356175":"code","85b09977":"code","d4e23f0b":"code","a5223e6f":"code","d15aad62":"code","4183c97a":"code","c3b3930c":"code","57fc8738":"code","62020e0e":"code","f42cbbe9":"code","a5e66315":"code","e4ffb309":"code","318301c0":"code","56769c01":"code","0c01d3fa":"code","13e58a5f":"code","216d72a7":"code","b7f9465a":"code","54acd213":"code","e3e4feb0":"code","ca997590":"code","e1e83d5c":"code","2ebd16d1":"code","4a674ea3":"code","bfa6ab7e":"code","90299a81":"code","cd1485d1":"markdown","329f3aa2":"markdown","c8b79727":"markdown","30c7cc3c":"markdown","a04c234c":"markdown","245788c7":"markdown","424e720c":"markdown","bc87b29a":"markdown","0b150955":"markdown","6cf4392c":"markdown","c30b1c0a":"markdown","d6049548":"markdown","493c47c4":"markdown","6a3bc551":"markdown","25c1da5b":"markdown","1f1d611d":"markdown","4b7a45ea":"markdown","d943a034":"markdown","1de42b1f":"markdown","237fa60a":"markdown","a37d77ee":"markdown","912b2446":"markdown","24170ad5":"markdown","332072f5":"markdown","e721cde9":"markdown","5f362a5b":"markdown","f7dae540":"markdown","05d1205e":"markdown","608ec4da":"markdown","4ea10db2":"markdown","0cea9070":"markdown","5ac2e1ff":"markdown","95a85c10":"markdown","e3333074":"markdown","86e384ad":"markdown","886ba332":"markdown","5e7392af":"markdown"},"source":{"169403f3":"import  numpy as np\nimport  pandas as pd\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n%matplotlib inline","5a22ea15":"from sklearn.model_selection import train_test_split\nfrom sklearn import feature_selection\nfrom sklearn import model_selection\nfrom sklearn.metrics import accuracy_score \nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.svm import SVC\nfrom sklearn.naive_bayes import GaussianNB\nfrom sklearn.ensemble import RandomForestClassifier,GradientBoostingClassifier\nfrom sklearn.neighbors import KNeighborsClassifier\n\nimport warnings\nwarnings.filterwarnings('ignore')","d4154ca7":"train = pd.read_csv('..\/input\/loan-prediction-problem-dataset\/train_u6lujuX_CVtuZ9i.csv')\ntest = pd.read_csv('..\/input\/loan-prediction-problem-dataset\/test_Y3wMUE5_7gLdaTN.csv')","f83e67c9":"print (train.shape, test.shape)","1acc3755":"train.head() ","1be4e5ba":"train.info() ","b2971a46":"train.isnull().sum()","24d5fd2f":"test.head()","e89d0445":"test.info()","267d3bab":"test.isnull().sum()","39b67067":"data = [train,test]\nfor dataset in data:\n    #Filter categorical variables\n    categorical_columns = [x for x in dataset.dtypes.index if dataset.dtypes[x]=='object']\n    # Exclude ID cols and source:\n    categorical_columns = [x for x in categorical_columns if x not in ['Loan_ID' ]]\n    #Print frequency of categories\n    \nfor col in categorical_columns:\n    print ('\\nFrequency of Categories for variable %s'%col)\n    print (train[col].value_counts())","a89e4e6e":"sns.countplot(train['Gender'])","283ff1be":"pd.crosstab(train.Gender, train.Loan_Status, margins = True)","77caf496":"train.Gender = train.Gender.fillna(train.Gender.mode())\ntest.Gender = test.Gender.fillna(test.Gender.mode())\n\nsex = pd.get_dummies(train['Gender'] , drop_first = True )\ntrain.drop(['Gender'], axis = 1 , inplace =True)\ntrain = pd.concat([train , sex ] , axis = 1)\n\nsex = pd.get_dummies(test['Gender'] , drop_first = True )\ntest.drop(['Gender'], axis = 1 , inplace =True)\ntest = pd.concat([test , sex ] , axis = 1)","a6962b75":"plt.figure(figsize=(6,6))\nlabels = ['0' , '1', '2' , '3+']\nexplode = (0.05, 0, 0, 0)\nsize = [345 , 102 , 101 , 51]\n\nplt.pie(size, explode=explode, labels=labels,\n        autopct='%1.1f%%', shadow = True, startangle = 90)\nplt.axis('equal')\nplt.show()","65b7b200":"train.Dependents.value_counts()","29efc23a":"pd.crosstab(train.Dependents , train.Loan_Status, margins = True)","8ade7037":"train.Dependents = train.Dependents.fillna(\"0\")\ntest.Dependents = test.Dependents.fillna(\"0\")\n\nrpl = {'0':'0', '1':'1', '2':'2', '3+':'3'}\n\ntrain.Dependents = train.Dependents.replace(rpl).astype(int)\ntest.Dependents = test.Dependents.replace(rpl).astype(int)","160ada19":"sns.countplot(train['Credit_History'])","aaaa32a1":"pd.crosstab(train.Credit_History , train.Loan_Status, margins = True)","b8f79ad8":"train.Credit_History = train.Credit_History.fillna(train.Credit_History.mode()[0])\ntest.Credit_History  = test.Credit_History.fillna(test.Credit_History.mode()[0])","03a142b6":"sns.countplot(train['Self_Employed'])","4beec771":"pd.crosstab(train.Self_Employed , train.Loan_Status,margins = True)","833f8df8":"train.Self_Employed = train.Self_Employed.fillna(train.Self_Employed.mode())\ntest.Self_Employed = test.Self_Employed.fillna(test.Self_Employed.mode())\n\nself_Employed = pd.get_dummies(train['Self_Employed'] ,prefix = 'employed' ,drop_first = True )\ntrain.drop(['Self_Employed'], axis = 1 , inplace =True)\ntrain = pd.concat([train , self_Employed ] , axis = 1)\n\nself_Employed = pd.get_dummies(test['Self_Employed'] , prefix = 'employed' ,drop_first = True )\ntest.drop(['Self_Employed'], axis = 1 , inplace =True)\ntest = pd.concat([test , self_Employed ] , axis = 1)","22b2eb8d":"sns.countplot(train.Married)","de24f6d6":"pd.crosstab(train.Married , train.Loan_Status,margins = True)","7d33c44f":"train.Married = train.Married.fillna(train.Married.mode())\ntest.Married = test.Married.fillna(test.Married.mode())\n\nmarried = pd.get_dummies(train['Married'] , prefix = 'married',drop_first = True )\ntrain.drop(['Married'], axis = 1 , inplace =True)\ntrain = pd.concat([train , married ] , axis = 1)\n\nmarried = pd.get_dummies(test['Married'] , prefix = 'married', drop_first = True )\ntest.drop(['Married'], axis = 1 , inplace =True)\ntest = pd.concat([test , married ] , axis = 1)","7bdbe780":"train.drop(['Loan_Amount_Term'], axis = 1 , inplace =True)\ntest.drop(['Loan_Amount_Term'], axis = 1 , inplace =True)\n\ntrain.LoanAmount = train.LoanAmount.fillna(train.LoanAmount.mean()).astype(int)\ntest.LoanAmount = test.LoanAmount.fillna(test.LoanAmount.mean()).astype(int)","ff4083c4":"sns.distplot(train['LoanAmount'])","54cefe77":"sns.countplot(train.Education)","c6cefe56":"train['Education'] = train['Education'].map( {'Graduate': 0, 'Not Graduate': 1} ).astype(int)\ntest['Education'] = test['Education'].map( {'Graduate': 0, 'Not Graduate': 1} ).astype(int)","e36815d0":"sns.countplot(train.Property_Area)","07be83c9":"train['Property_Area'] = train['Property_Area'].map( {'Urban': 0, 'Semiurban': 1 ,'Rural': 2  } ).astype(int)\n\ntest.Property_Area = test.Property_Area.fillna(test.Property_Area.mode())\ntest['Property_Area'] = test['Property_Area'].map( {'Urban': 0, 'Semiurban': 1 ,'Rural': 2  } ).astype(int)\n","a2e7d915":"sns.distplot(train['ApplicantIncome'])","65356175":"sns.distplot(train['CoapplicantIncome'])","85b09977":"train['Loan_Status'] = train['Loan_Status'].map( {'N': 0, 'Y': 1 } ).astype(int)","d4e23f0b":"train.drop(['Loan_ID'], axis = 1 , inplace =True)","a5223e6f":"train.head()","d15aad62":"test.head()","4183c97a":"g = sns.lmplot(x='ApplicantIncome',y='LoanAmount',data= train , col='employed_Yes', hue='Male',\n          palette= [\"Red\" , \"Blue\",\"Yellow\"] ,aspect=1.2,size=6)\ng.set(ylim=(0, 800))\n##Relation Between the Male or female Applicant's income , Loan taken and Self employment.","c3b3930c":"plt.figure(figsize=(10,5))\nsns.boxplot(x=\"Property_Area\", y=\"LoanAmount\", hue=\"Education\",data=train, palette=\"coolwarm\")","57fc8738":"train.Credit_History.value_counts()","62020e0e":"lc = pd.crosstab(train['Credit_History'], train['Loan_Status'])\nlc.plot(kind='bar', stacked=True, color=['red','blue'], grid=False)","f42cbbe9":"plt.figure(figsize=(9,6))\nsns.heatmap(train.drop('Loan_Status',axis=1).corr(), vmax=0.6, square=True, annot=True)","a5e66315":"X = train.drop('Loan_Status' , axis = 1 )\ny = train['Loan_Status']\n\nX_train ,X_test , y_train , y_test = train_test_split(X , y , test_size = 0.3 , random_state =102)","e4ffb309":"from sklearn.linear_model import LogisticRegression\nlogmodel = LogisticRegression()\nlogmodel.fit(X_train , y_train)\npred_l = logmodel.predict(X_test)\nacc_l = accuracy_score(y_test , pred_l)*100\nacc_l","318301c0":"\nrandom_forest = RandomForestClassifier(n_estimators= 100)\nrandom_forest.fit(X_train, y_train)\npred_rf = random_forest.predict(X_test)\nacc_rf = accuracy_score(y_test , pred_rf)*100\nacc_rf","56769c01":"\nknn = KNeighborsClassifier(n_neighbors = 3)\nknn.fit(X_train, y_train)\npred_knn = knn.predict(X_test)\nacc_knn = accuracy_score(y_test , pred_knn)*100\nacc_knn","0c01d3fa":"gaussian = GaussianNB()\ngaussian.fit(X_train, y_train)\npred_gb = gaussian.predict(X_test)\nacc_gb = accuracy_score(y_test , pred_gb)*100\nacc_gb","13e58a5f":"svc = SVC()\nsvc.fit(X_train, y_train)\npred_svm = svc.predict(X_test)\nacc_svm = accuracy_score(y_test , pred_svm)*100\nacc_svm","216d72a7":"gbk = GradientBoostingClassifier()\ngbk.fit(X_train, y_train)\npred_gbc = gbk.predict(X_test)\nacc_gbc = accuracy_score(y_test , pred_gbc)*100\nacc_gbc","b7f9465a":"## Arranging the Accuracy results\nmodels = pd.DataFrame({\n    'Model': ['Logistic Regression', 'Random Forrest','K- Nearest Neighbour' ,\n             'Naive Bayes' , 'SVM','Gradient Boosting Classifier'],\n    'Score': [acc_l , acc_rf , acc_knn , acc_gb ,acc_svm ,acc_gbc ]})\nmodels.sort_values(by='Score', ascending=False)","54acd213":"importances = pd.DataFrame({'Features':X_train.columns,'Importance':np.round(random_forest.feature_importances_,3)})\nimportances = importances.sort_values('Importance',ascending=False).set_index('Features')\nimportances.head(11) ","e3e4feb0":"importances.plot.bar()","ca997590":"df_test = test.drop(['Loan_ID'], axis = 1)","e1e83d5c":"df_test.head()","2ebd16d1":"p_log = logmodel.predict(df_test)","4a674ea3":"p_rf = random_forest.predict(df_test)","bfa6ab7e":"predict_combine = np.zeros((df_test.shape[0]))\n\nfor i in range(0, test.shape[0]):\n    temp = p_log[i] + p_rf[i]\n    if temp>=2:\n        predict_combine[i] = 1\npredict_combine = predict_combine.astype('int')","90299a81":"submission = pd.DataFrame({\n        \"Loan_ID\": test[\"Loan_ID\"],\n        \"Loan_Status\": predict_combine\n    })\n\nsubmission.to_csv(\"results.csv\", encoding='utf-8', index=False)\n","cd1485d1":"###### Dropping the ID column","329f3aa2":"The highest classification accuracy is shown by Logistic Regression of about 83.24 %\n\nLet us Check th feature importance,","c8b79727":"## View the datasets","30c7cc3c":"#### Loan Amount Term and Loan Amount","a04c234c":"### Plot between LoanAmount, Applicant Income, Employement and Gender\n\n*What is the relation of Loan taken between men and women?<br> Did the employed ones were greater in number to take Loan ?<br> What is distribution of Loan Amount and Income?*","245788c7":"### Viewing the train dataset","424e720c":"The applicants with highest number of dependants are least in number whereas applicants with no dependance are greatest among these.","bc87b29a":"#### Gender","0b150955":"### Boxplots for  relation between Property area, amount of Loan and Education qualification ","6cf4392c":"# Visualizing the correlations and relation","c30b1c0a":"### Viewing the test dataset","d6049548":"The male are in large number as compared to female applicants.Also many of them have positive Loan Status. Further Binarization of this feature should be done,","493c47c4":"### Importing data ","6a3bc551":"Finally the we predict over unseen dataset using the Logistic Regression and Random Forest model(**Ensemble Learning**): ","25c1da5b":"## Prediction","1f1d611d":"#### Property Area","4b7a45ea":"#### Co-Applicant income and Applicant income","d943a034":"# Thank you\n\nAuthor: [Pratik Kumar](https:\/\/pr2tik1.github.io)","1de42b1f":"### Summarizing\n\nThe Loan status has better relation with features such as Credit History, Applicant's Income, Loan Amount needed by them, Family status(Depenedents) and Property Area which are generally considered by the loan providing organisations. These factors are hence used to take correct decisions to provide loan status or not. This data analysis hence gives a realisation of features and the relation between them from the older decision examples hence giving a learning to predict the class of the unseen data. ","237fa60a":"#### Self Employed","a37d77ee":"We observe no outliers in the continuous variable Loan Amount","912b2446":"#### Credit History","24170ad5":"Credit History has the maximum importance and empoloyment has the least!","332072f5":"- The above boxplot signifies that,\n    - In the Urban area the non graduates take slightly more loan than graduates. \n    - In the Rural and semiurban area the graduates take more amount of Loan than non graduates \n    - The higher values of Loan are mostly from Urban area \n    - The semiurban area and rural area both have one unusual Loan amount close to zero.\n","e721cde9":"### Exploring and Preparing the data","5f362a5b":"- The credit history vs Loan Status indicates:\n    - The good credit history applicants have more chances of getting Loan.\n    - With better credit History the Loan amount given was greater too.\n    - But many were not given loan in the range 0-100\n    - The applicant with poor credit history were handled in the range 0-100 only.","f7dae540":"### Importing Libraries","05d1205e":"The problem is of **Classification** as observed and concluded from the data and visualisations.","608ec4da":"Further we analyse the relation between education status,loan taken and property area \n","4ea10db2":"### Target Variable : Loan Status","0cea9070":"#### Dependants","5ac2e1ff":"### Crosstab for relation between Credit History and Loan status.","95a85c10":"- Property_Area: \n    - `Urban      :0`\n    - `Semiurban  :1`\n    - `Rural      :2`","e3333074":"- Above graph tells:\n    - The male applicants take more amount of loan than female.\n    - The males are higher in number of \"NOT self employed\" category.\n    - The amount is still larger in the income range in (0 to 20000).\n    - Also we observe that majority of applicants are NOT self employed.\n    - Highest Loan amount taken is by the female applicant of about 700 which is NOT self employed.\n    - The majority of income taken is about 0-200 with income in the range 0-20000. \n    - The line plotted shows that with increase in income the amount of loan increases with almost same slope for the case of women in both the cases but a slightely lesser slope in the case of men in Self- Employed category as compared to non-self employed.\n","86e384ad":"#### Education","886ba332":"# Loan Status Prediction \n\nCompany wants to automate the loan eligibility process (real time) based on customer detail provided while filling online application form. These details are Gender, Marital Status, Education, Number of Dependents, Income, Loan Amount, Credit History and others. To automate this process, they have given a problem to identify the customers segments, those are eligible for loan amount so that they can specifically target these customers. Here they have provided a partial data set.\n","5e7392af":"#### Married"}}