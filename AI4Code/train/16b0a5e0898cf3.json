{"cell_type":{"e3fde37e":"code","7790b040":"code","ba9ef8dd":"code","27090a70":"code","bce6f94e":"code","2cd25eb2":"code","6529559e":"code","8f1fdcf0":"code","7e30d36e":"code","8602c7be":"code","62c22b12":"code","52a6d699":"code","7940f8e3":"code","d8028c9c":"code","dae9fc18":"code","5e199e16":"code","a17188aa":"code","b0186f40":"code","79cdd11c":"code","20a7785f":"code","1c67f7d4":"code","8aabb7a3":"code","9aa227b5":"code","89a13a2c":"code","a663ff73":"code","96c5b502":"code","05b8410c":"code","bd465c55":"code","fddc65db":"code","533dc1e4":"code","8d8a4888":"code","3066921a":"code","4124b40b":"code","8ecc423c":"code","ca909a6a":"code","58264236":"code","c1f346a4":"code","3a18ff5a":"code","59d32a5d":"code","212373ce":"code","f11ded43":"code","bb4e3d1a":"code","ff19abac":"code","398db4fa":"code","219845ab":"code","8ee1faae":"code","44319f13":"code","819d40c1":"code","e10dd60b":"code","0da6badd":"code","a2da89e1":"code","1bc7c854":"code","c7e35609":"code","3fa3b2d5":"code","d3555892":"code","3fc15459":"code","4dadebc6":"code","93614831":"code","ae897ceb":"code","d3c90b6b":"code","adecc02a":"code","4c923345":"code","09cc8602":"code","b05b2990":"code","259cfc3c":"code","38a0ab55":"code","bb66d8ae":"code","c9f9bbe1":"code","a1da78a4":"code","cde8ffd9":"code","b749dab6":"code","73e1c05d":"code","e150ceae":"code","4c7e313f":"code","6e65d8e0":"code","6db508bb":"code","fa8262b1":"code","eb7f0cee":"code","046c02ae":"code","452239c3":"code","04863aa7":"code","9ca0235b":"code","0e922101":"code","305a458a":"code","3fa659e9":"code","424e8614":"code","fbf71f2c":"code","606eaa66":"code","98acc263":"code","ab77d0f6":"code","0d6cf937":"code","5877771a":"code","253f1d13":"code","0729f39b":"code","bc4a30d2":"code","306b824b":"code","e989bc5a":"code","0677a9b0":"code","b09c2707":"code","cf87673c":"code","31631cc1":"code","f1ab872f":"code","7a56f131":"code","040f086d":"code","a60fb69e":"code","6e82431e":"code","616df975":"code","a9917e73":"code","08c48e90":"code","4a91f52f":"code","eaf3b7da":"code","65ca9470":"code","18e8428c":"code","c5f71cea":"code","96bc10f3":"markdown","aed45fbc":"markdown","405cc883":"markdown","c83396f2":"markdown","da27fec4":"markdown","013520d9":"markdown","91a9e3cc":"markdown","cc07fc18":"markdown","db9610bf":"markdown","5b7e818f":"markdown","eaeab3aa":"markdown","8d88af15":"markdown","28760d28":"markdown","fcec49cf":"markdown","e00d7f9e":"markdown","4f71fbfc":"markdown","bc63b53a":"markdown","755da46e":"markdown","e1a85d10":"markdown","9fbe9f7b":"markdown","3edf6b4b":"markdown","d281718d":"markdown","caabfc93":"markdown","712b47de":"markdown","2cb07940":"markdown","e2444ea3":"markdown","711219ce":"markdown","c9bd83e0":"markdown","99937cf3":"markdown","164c5a90":"markdown","65c63abf":"markdown","d0d18a2c":"markdown","8b3d15d8":"markdown","fc611c9c":"markdown"},"source":{"e3fde37e":"# import dependencies\nimport math, time, random, datetime\n\n# data manipulation\nimport numpy as np\nimport pandas as pd\n\n# visualization\n%matplotlib inline\nimport matplotlib.pyplot as plt\nimport missingno\nimport seaborn as sns\nplt.style.use('seaborn-whitegrid')\n\n# preprocessing\nfrom sklearn.preprocessing import OneHotEncoder, LabelEncoder, label_binarize\n\n# machine learning\nimport catboost\nfrom sklearn.model_selection import train_test_split\nfrom sklearn import model_selection, tree, preprocessing, metrics, linear_model\nfrom sklearn.svm import LinearSVC\nfrom sklearn.ensemble import GradientBoostingClassifier\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.naive_bayes import GaussianNB\nfrom sklearn.linear_model import LinearRegression, LogisticRegression, SGDClassifier\nfrom sklearn.tree import DecisionTreeClassifier\nfrom catboost import CatBoostClassifier, Pool, cv\n\n# ignore warnings\nimport warnings\nwarnings.filterwarnings('ignore')","7790b040":"!ls '..\/input'","ba9ef8dd":"train = pd.read_csv('..\/input\/train.csv')\ntest = pd.read_csv('..\/input\/test.csv')\ngender_submission = pd.read_csv('..\/input\/gender_submission.csv')","27090a70":"train.head()","bce6f94e":"test.head()","2cd25eb2":"gender_submission.head()","6529559e":"print(train.shape)\nprint(test.shape)\nprint(gender_submission.shape)","8f1fdcf0":"print(len(train))\nprint(len(test))\nprint(len(gender_submission))","7e30d36e":"train['Survived'].sum()","8602c7be":"train.describe()","62c22b12":"train.head()","52a6d699":"missingno.matrix(train, figsize=(30,10))","7940f8e3":"train.columns","d8028c9c":"def find_missing_values(df, columns):\n    missing_vals = {}\n    print(\"Number of missing or NaN values for each column:\")\n    df_length = len(df)\n    for column in columns:\n        total_column_values = df[column].value_counts().sum()\n        missing_vals[column] = df_length - total_column_values\n    return missing_vals\n\nmissing_values = find_missing_values(train, columns=train.columns)\nmissing_values","dae9fc18":"df_bin = pd.DataFrame()\ndf_con = pd.DataFrame()","5e199e16":"train.dtypes","a17188aa":"train.head()","b0186f40":"#fig = plt.figure(figsize=(1, 5))\nsns.countplot(x='Survived', data=train)\nprint(train.Survived.value_counts())","79cdd11c":"df_bin['Survived'] = train['Survived']\ndf_con['Survived'] = train['Survived']","20a7785f":"df_bin.head()","1c67f7d4":"df_con.head()","8aabb7a3":"train.Pclass.value_counts()","9aa227b5":"sns.distplot(train.Pclass)","89a13a2c":"sns.countplot(x='Pclass', data=train)","a663ff73":"missing_values['Pclass']","96c5b502":"df_bin['Pclass'] = train['Pclass']\ndf_con['Pclass'] = train['Pclass']","05b8410c":"df_con.head()","bd465c55":"train.Name.value_counts()","fddc65db":"len(train)","533dc1e4":"train.Sex.value_counts()","8d8a4888":"sns.countplot(x='Sex', data=train)","3066921a":"missing_values['Sex']","4124b40b":"df_bin['Sex'] = train['Sex']\ndf_bin['Sex'] = np.where(df_bin['Sex'] == 'female', 1, 0)\n\ndf_con['Sex'] = train['Sex']","8ecc423c":"df_bin.head()","ca909a6a":"train.head()","58264236":"fig = plt.figure(figsize=(10, 10))\nsns.distplot(df_bin.loc[df_bin['Survived'] == 1]['Sex'], kde_kws={'label': 'Survived'})          # female\nsns.distplot(df_bin.loc[df_bin['Survived'] == 0]['Sex'], kde_kws={'label': 'Did Not Survive'})    # male","c1f346a4":"train.Survived.value_counts()","3a18ff5a":"train.groupby(['Survived', 'Sex']).size()","59d32a5d":"df_bin.groupby(['Survived', 'Sex']).size()","212373ce":"missing_values['Age']","f11ded43":"def plot_count_dist(data, bin_df, label_column, target_column, figsize=(20, 5), use_bin_df=False):\n    if use_bin_df:\n        fig = plt.figure(figsize=figsize)\n        plt.subplot(1, 2, 1)\n        sns.countplot(y=target_column, data=bin_df)\n        plt.subplot(1, 2, 2)\n        sns.distplot(data.loc[data[label_column] == 1][target_column],\n                    kde_kws={'label': 'Survived'})\n        sns.distplot(data.loc[data[label_column] == 0][target_column],\n                    kde_kws={'label': 'Did Not Survived'})\n    else:\n        fig = plt.figure(figsize=figsize)\n        plt.subplot(1, 2, 1)\n        sns.countplot(y=target_column, data=bin_df)\n        plt.subplot(1, 2, 2)\n        sns.distplot(data.loc[data[label_column] == 1][target_column],\n                    kde_kws={'label': 'Survived'})\n        sns.distplot(data.loc[data[label_column] == 0][target_column],\n                    kde_kws={'label': 'Did Not Survived'})","bb4e3d1a":"missing_values['SibSp']","ff19abac":"train.SibSp.value_counts()","398db4fa":"df_bin['SibSp'] = train['SibSp']\ndf_con['SibSp'] = train['SibSp']","219845ab":"plot_count_dist(train,\n                bin_df=df_bin,\n                label_column='Survived',\n                target_column='SibSp',\n                figsize=(20,5))","8ee1faae":"missing_values['Parch']","44319f13":"df_bin['Parch'] = train['Parch']\ndf_con['Parch'] = train['Parch']","819d40c1":"plot_count_dist(train,\n                bin_df=df_bin,\n                label_column='Survived',\n                target_column='Parch',\n                figsize=(20,5))","e10dd60b":"train.head()","0da6badd":"df_con.head()","a2da89e1":"missing_values['Ticket']","1bc7c854":"sns.countplot(y='Ticket', data=train)","c7e35609":"train.Ticket.value_counts()","3fa3b2d5":"len(train.Ticket.unique())","d3555892":"missing_values['Fare']","3fc15459":"sns.countplot(y='Fare', data=train)","4dadebc6":"train.Fare.dtype","93614831":"len(train.Fare.unique())","ae897ceb":"df_con['Fare'] = train['Fare']\ndf_bin['Fare'] = pd.cut(train['Fare'], bins=5)","d3c90b6b":"df_con.head()","adecc02a":"df_bin.head()","4c923345":"df_bin.Fare.value_counts()","09cc8602":"plot_count_dist(train,\n               bin_df=df_bin,\n               label_column='Survived',\n               target_column='Fare',\n               figsize=(20,10),\n               use_bin_df=True)","b05b2990":"missing_values['Cabin']","259cfc3c":"train.Cabin.value_counts()","38a0ab55":"len(train.Cabin.unique())","bb66d8ae":"missing_values['Embarked']","c9f9bbe1":"train.Embarked.value_counts()","a1da78a4":"train.Embarked.value_counts().sum()","cde8ffd9":"sns.countplot(y='Embarked', data=train)","b749dab6":"df_bin['Embarked'] = train['Embarked']\ndf_con['Embarked'] = train['Embarked']","73e1c05d":"print(len(df_con))\ndf_con = df_con.dropna(subset=['Embarked'])\ndf_bin = df_bin.dropna(subset=['Embarked'])\nprint(len(df_con))","e150ceae":"train.head()","4c7e313f":"df_con.head()","6e65d8e0":"df_bin.head()","6db508bb":"one_hot_cols = df_bin.columns.tolist()\none_hot_cols.remove('Survived')\ndf_bin_enc = pd.get_dummies(df_bin, columns=one_hot_cols)\n\ndf_bin_enc.head()","fa8262b1":"df_con.head()","eb7f0cee":"df_con_enc = df_con.apply(LabelEncoder().fit_transform)\ndf_con_enc.head()","046c02ae":"selected_df = df_con_enc","452239c3":"X_train = selected_df.drop('Survived', axis=1)\ny_train = selected_df.Survived","04863aa7":"X_train.head()","9ca0235b":"y_train.head()","0e922101":"def fit_ml_algo(algo, X_train, y_train, cv):\n    \n    model = algo.fit(X_train, y_train)\n    acc = round(model.score(X_train, y_train) * 100, 2)\n    \n    train_pred = model_selection.cross_val_predict(algo,\n                                                  X_train,\n                                                  y_train,\n                                                  cv=cv,\n                                                  n_jobs = -1)\n    \n    acc_cv = round(metrics.accuracy_score(y_train, train_pred) * 100, 2)\n    \n    return train_pred, acc, acc_cv","305a458a":"start_time = time.time()\ntrain_pred_log, acc_log, acc_cv_log = fit_ml_algo(LogisticRegression(),\n                                                 X_train,\n                                                 y_train,\n                                                 10)\n\nlog_time = (time.time() - start_time)\nprint('Accuracy: %s' % acc_log)\nprint('Accuracy CV 10-Fold %s' % acc_cv_log)\nprint('Running Time: %s' % datetime.timedelta(seconds=log_time))","3fa659e9":"start_time = time.time()\ntrain_pred_knn, acc_knn, acc_cv_knn = fit_ml_algo(KNeighborsClassifier(),\n                                                 X_train,\n                                                 y_train,\n                                                 10)\n\nlog_time = (time.time() - start_time)\nprint('Accuracy: %s' % acc_knn)\nprint('Accuracy CV 10-Fold %s' % acc_cv_knn)\nprint('Running Time: %s' % datetime.timedelta(seconds=log_time))","424e8614":"start_time = time.time()\ntrain_pred_gaussian, acc_gaussian, acc_cv_gaussian = fit_ml_algo(GaussianNB(),\n                                                 X_train,\n                                                 y_train,\n                                                 10)\n\nlog_time = (time.time() - start_time)\nprint('Accuracy: %s' % acc_gaussian)\nprint('Accuracy CV 10-Fold %s' % acc_cv_gaussian)\nprint('Running Time: %s' % datetime.timedelta(seconds=log_time))","fbf71f2c":"start_time = time.time()\ntrain_pred_linear_svc, acc_linear_svc, acc_cv_linear_svc = fit_ml_algo(LinearSVC(),\n                                                 X_train,\n                                                 y_train,\n                                                 10)\n\nlog_time = (time.time() - start_time)\nprint('Accuracy: %s' % acc_linear_svc)\nprint('Accuracy CV 10-Fold %s' % acc_cv_linear_svc)\nprint('Running Time: %s' % datetime.timedelta(seconds=log_time))","606eaa66":"start_time = time.time()\ntrain_pred_sgd, acc_sgd, acc_cv_sgd = fit_ml_algo(SGDClassifier(),\n                                                 X_train,\n                                                 y_train,\n                                                 10)\n\nlog_time = (time.time() - start_time)\nprint('Accuracy: %s' % acc_sgd)\nprint('Accuracy CV 10-Fold %s' % acc_cv_sgd)\nprint('Running Time: %s' % datetime.timedelta(seconds=log_time))","98acc263":"start_time = time.time()\ntrain_pred_dt, acc_dt, acc_cv_dt = fit_ml_algo(DecisionTreeClassifier(),\n                                                 X_train,\n                                                 y_train,\n                                                 10)\n\nlog_time = (time.time() - start_time)\nprint('Accuracy: %s' % acc_dt)\nprint('Accuracy CV 10-Fold %s' % acc_cv_dt)\nprint('Running Time: %s' % datetime.timedelta(seconds=log_time))","ab77d0f6":"start_time = time.time()\ntrain_pred_gbt, acc_gbt, acc_cv_gbt = fit_ml_algo(GradientBoostingClassifier(),\n                                                 X_train,\n                                                 y_train,\n                                                 10)\n\nlog_time = (time.time() - start_time)\nprint('Accuracy: %s' % acc_gbt)\nprint('Accuracy CV 10-Fold %s' % acc_cv_gbt)\nprint('Running Time: %s' % datetime.timedelta(seconds=log_time))","0d6cf937":"X_train.head()","5877771a":"y_train.head()","253f1d13":"cat_features = np.where(X_train.dtypes != np.float)[0]\ncat_features","0729f39b":"train_pool = Pool(X_train,\n                 y_train,\n                 cat_features)","bc4a30d2":"catboost_model = CatBoostClassifier(iterations=1000,\n                                   custom_loss=['Accuracy'],\n                                   loss_function='Logloss')\n\ncatboost_model.fit(train_pool,\n                  plot=True)\n\nacc_catboost = round(catboost_model.score(X_train, y_train) * 100, 2)","306b824b":"start_time = time.time()\n\ncv_params = catboost_model.get_params()\n\ncv_data = cv(train_pool,\n            cv_params,\n            fold_count=10,\n            plot=True)\n\ncatboost_time = (time.time() - start_time)\n\nacc_cv_catboost = round(np.max(cv_data['test-Accuracy-mean']) * 100, 2)","e989bc5a":"print(\"---CatBoost Metrics---\")\nprint(\"Accuracy: {}\".format(acc_catboost))\nprint(\"Accuracy 10-Fold: {}\".format(acc_cv_catboost))\nprint(\"Running Time: {}\".format(datetime.timedelta(seconds=catboost_time)))","0677a9b0":"models = pd.DataFrame({\n    'Model': ['KNN', 'Logistic Regression', 'Naive Bayes',  \n              'Stochastic Gradient Descent', 'Linear SVC',  \n              'Decision Tree', 'Gradient Boosting Trees', \n              'CatBoost'],\n    'Score' : [acc_knn,\n               acc_log,\n               acc_gaussian,\n               acc_sgd,\n               acc_linear_svc,\n               acc_dt,\n               acc_gbt,\n               acc_catboost]\n})\n\nprint(\"---Regular Accuracy Scores---\")\nmodels.sort_values(by='Score', ascending=False)","b09c2707":"models = pd.DataFrame({\n    'Model': ['KNN', 'Logistic Regression', 'Naive Bayes',  \n              'Stochastic Gradient Descent', 'Linear SVC',  \n              'Decision Tree', 'Gradient Boosting Trees', \n              'CatBoost'],\n    'Score' : [acc_cv_knn,\n               acc_cv_log,\n               acc_cv_gaussian,\n               acc_cv_sgd,\n               acc_cv_linear_svc,\n               acc_cv_dt,\n               acc_cv_gbt,\n               acc_cv_catboost]\n})\n\nprint(\"---Cross-validation Accuracy Scores---\")\nmodels.sort_values(by='Score', ascending=False)","cf87673c":"models = pd.DataFrame({\n    'Model': ['KNN', 'Logistic Regression', 'Naive Bayes',  \n              'Stochastic Gradient Descent', 'Linear SVC',  \n              'Decision Tree', 'Gradient Boosting Trees', \n              'CatBoost'],\n    'Reg Score' : [acc_knn,\n               acc_log,\n               acc_gaussian,\n               acc_sgd,\n               acc_linear_svc,\n               acc_dt,\n               acc_gbt,\n               acc_catboost],\n    'CV Score' : [acc_cv_knn,\n               acc_cv_log,\n               acc_cv_gaussian,\n               acc_cv_sgd,\n               acc_cv_linear_svc,\n               acc_cv_dt,\n               acc_cv_gbt,\n               acc_cv_catboost]\n})\n\nprint(\"---Cross-validation Accuracy Scores---\")\nmodels.sort_values(by='CV Score', ascending=False)","31631cc1":"def feature_importance(model, data):\n    fea_imp = pd.DataFrame({'imp': model.feature_importances_, 'col': data.columns})\n    fea_imp = fea_imp.sort_values(['imp', 'col'], ascending=[False, False]).iloc[-30:]\n    _ = fea_imp.plot(kind='barh', x='col', y='imp', figsize=[20, 5])\n    _.invert_yaxis()\n    return fea_imp","f1ab872f":"feature_importance(catboost_model, X_train)","7a56f131":"metrics = ['Precision', 'Recall', 'F1', 'AUC']\n\neval_metrics = catboost_model.eval_metrics(train_pool,\n                                          metrics=metrics,\n                                          plot=True)\n\nfor metric in metrics:\n    print(str(metric)+\": {}\".format(np.mean(eval_metrics[metric])))","040f086d":"wanted_test_columns = X_train.columns\nwanted_test_columns","a60fb69e":"predictions = catboost_model.predict(test[wanted_test_columns]\n                                    .apply(LabelEncoder().fit_transform))","6e82431e":"predictions[:20]","616df975":"y_train.head()","a9917e73":"submission = pd.DataFrame()\nsubmission['PassengerId'] = test['PassengerId']\nsubmission['Survived'] = predictions\nsubmission.head()","08c48e90":"gender_submission.head()","4a91f52f":"submission['Survived'] = submission['Survived'].astype(int)","eaf3b7da":"submission.head()","65ca9470":"if len(submission) == len(test):\n    print(\"Submission dataframe is the same length as test ({} rows).\".format(len(submission)))\nelse:\n    print(\"DataFrame mismatched, won't be able to submit to Kaggle.\")","18e8428c":"submission.to_csv('catboost_submission.csv', index=False)","c5f71cea":"submissions_check = pd.read_csv('catboost_submission.csv')\nsubmissions_check.head()","96bc10f3":"## 3.3 Feature - Name","aed45fbc":"# 3 - EDA","405cc883":"## 3.5 Feature - Age","c83396f2":"## Feature - Cabin","da27fec4":"## Precision and Recall","013520d9":"## 5.6 - Decision Tree Classifier","91a9e3cc":"## Feature - Fare","cc07fc18":"## 7 - Submission","db9610bf":"1 - Get Data","5b7e818f":"## 3.4 Feature - Sex","eaeab3aa":"## 3.1 Target Feature - Survived","8d88af15":"# 5 - Machine Learning Models","28760d28":"## Define a function to fit machine learning algorithms","fcec49cf":"## 5.2 - K-Nearest Neighbours","e00d7f9e":"## 5.8 - CatBoost Algorithm","4f71fbfc":"# 2 - Check Missing Values","bc63b53a":"## 5.7 - Gradient Boost Trees","755da46e":"# TODO\n1. Get Data\n2. Check Missing Values\n3. EDA\n4. Feature Encoding\n5. Machine Learning Models\n6. Feature Importance\n7. Submission","e1a85d10":"## 3.2 Feature - PClass","9fbe9f7b":"## Regular Accuracy Scores","3edf6b4b":"## 5.1 - Logistic Regression","d281718d":"## Submit to https:\/\/www.kaggle.com\/c\/titanic\/submit","caabfc93":"## 5.4 - Linear Support Vector Machines (SVC)","712b47de":"df_bin - One-hot encoding<br>\ndf_con - label encoding function from sklearn","2cb07940":"## 5.5 - Stochastic Gradient Descent","e2444ea3":" C - Cherbourg, S - Southampton, Q = Queenstown","711219ce":"# 4 - Feature Encoding","c9bd83e0":"## Feature - Embarked","99937cf3":"## Feature - Ticket","164c5a90":"## Cross-validation Accuracy Score","65c63abf":"## Feature - Parch","d0d18a2c":"## 6 - Feature Importance","8b3d15d8":"## Feature - SibSp","fc611c9c":"##  5.3 - Gaussian Naive Bayes"}}