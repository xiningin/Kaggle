{"cell_type":{"00a94d76":"code","e3ce0c35":"code","ae4732a0":"code","1c75c1c2":"code","5ac3f149":"code","2d60ea9f":"code","2be4ec53":"code","73d666e5":"code","46159759":"code","094dbd7e":"code","9920a1a2":"code","8cbff512":"code","e86a257b":"code","9670eada":"code","fb1c8a2f":"code","3622a327":"code","67bd6ee8":"code","6833bb26":"code","3977d6da":"code","2916be17":"code","60095f72":"code","c1682389":"code","2b0ee753":"code","4cbeb21d":"code","b5be570d":"code","f71b37b5":"code","2cceccda":"code","8d9e4ddb":"code","993a6d4a":"code","2e985dd9":"code","168366e0":"code","8af46814":"markdown","180f54d1":"markdown","83fc516f":"markdown","d11cd50e":"markdown","38e5b28d":"markdown","7ea9005f":"markdown","607a66cd":"markdown","4813432c":"markdown","a66aa092":"markdown","c93574d9":"markdown","0a6d8baa":"markdown","f51a605f":"markdown","3bc57a99":"markdown","22013cc8":"markdown","dedc801d":"markdown","c478fb5d":"markdown","5167e5b5":"markdown","7b4b0ff4":"markdown","38993d86":"markdown","58414a88":"markdown","d32b323d":"markdown","2b87640d":"markdown","f8d5c3ff":"markdown","4eae571a":"markdown"},"source":{"00a94d76":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","e3ce0c35":"pip install openpyxl","ae4732a0":"pip install xlrd","1c75c1c2":"# Importing the libraries necessary for the exercise.\nimport datetime as dt\nimport pandas as pd","5ac3f149":"# Reading and copying dataset\ndf_ = pd.read_excel(\"..\/input\/online-retail-ii-data-set-from-ml-repository\/online_retail_II.xlsx\", sheet_name=\"Year 2010-2011\")\ndf = df_.copy()\n\n# Looking at the first 5 rows of the data set\ndf.head()","2d60ea9f":"# Getting general information about the data set\ndf.info()","2be4ec53":"# Looking at the descriptive statistics of the data set\ndf.describe().T","73d666e5":"# Setting an upper and lower limit for outliers\ndef outlier_thresholds(dataframe, variable):\n    quartile1 = dataframe[variable].quantile(0.01)\n    quartile3 = dataframe[variable].quantile(0.99)\n    interquantile_range = quartile3 - quartile1\n    up_limit = quartile3 + 1.5 * interquantile_range\n    low_limit = quartile1 - 1.5 * interquantile_range\n    return low_limit, up_limit","46159759":"# Replacing outliers with upper and lower limit\ndef replace_with_thresholds(dataframe, variable):\n    low_limit, up_limit = outlier_thresholds(dataframe, variable)\n    dataframe.loc[(dataframe[variable] > up_limit), variable] = up_limit","094dbd7e":"replace_with_thresholds(df, \"Quantity\")\nreplace_with_thresholds(df, \"Price\")","9920a1a2":"# distribution looks more normal\ndf.describe().T","8cbff512":"# checking for null values\ndf.isnull().sum()","e86a257b":"# Remove null values\ndf.dropna(inplace=True)","9670eada":"# Number of products\ndf[\"Description\"].value_counts().head()","fb1c8a2f":"# Unique number of products\ndf[\"Description\"].nunique()","3622a327":"# Order the total sales of products from high to low\ndf.groupby(\"Description\").agg({\"Quantity\": \"sum\"}).sort_values(\"Quantity\", ascending=False).head()","67bd6ee8":"df[\"Invoice\"].nunique()","6833bb26":"df = df[~df[\"Invoice\"].str.contains(\"C\", na=False)]","3977d6da":"df[\"Invoice\"].nunique()","2916be17":"df[\"TotalPrice\"] = df[\"Quantity\"] * df[\"Price\"]","60095f72":"# Looking at due date in data set\ndf[\"InvoiceDate\"].max()","c1682389":"today_date = dt.datetime(2011, 12, 11)","2b0ee753":"# We found the rfm values by grouping\nrfm = df.groupby('Customer ID').agg({'InvoiceDate': lambda date: (today_date - date.max()).days,\n                                     'Invoice': lambda num: len(num),\n                                     'TotalPrice': lambda TotalPrice: TotalPrice.sum()})\n","4cbeb21d":"rfm.columns = ['Recency', 'Frequency', 'Monetary']","b5be570d":"# We removed the problematic data that did not show any fees even though there was a purchase.\nrfm = rfm[(rfm[\"Monetary\"]) > 0 & (rfm[\"Frequency\"] > 0)]","f71b37b5":"rfm[\"RecencyScore\"] = pd.qcut(rfm[\"Recency\"], 5, labels=[5, 4, 3, 2, 1])\nrfm[\"FrequencyScore\"] = pd.qcut(rfm[\"Frequency\"], 5, labels=[1, 2, 3, 4, 5])\nrfm[\"MonetaryScore\"] = pd.qcut(rfm[\"Monetary\"], 5, labels=[1, 2, 3, 4, 5])","2cceccda":"rfm[\"RFM_SCORE\"] = (rfm['RecencyScore'].astype(str) +\n                    rfm['FrequencyScore'].astype(str) +\n                    rfm['MonetaryScore'].astype(str))\n","8d9e4ddb":"seg_map = {\n    r'[1-2][1-2]': 'Hibernating',\n    r'[1-2][3-4]': 'At_Risk',\n    r'[1-2]5': 'Cant_Loose',\n    r'3[1-2]': 'About_to_Sleep',\n    r'33': 'Need_Attention',\n    r'[3-4][4-5]': 'Loyal_Customers',\n    r'41': 'Promising',\n    r'51': 'New_Customers',\n    r'[4-5][2-3]': 'Potential_Loyalists',\n    r'5[4-5]': 'Champions'\n}","993a6d4a":"rfm[\"Segment\"] = (rfm['RecencyScore'].astype(str) + rfm['FrequencyScore'].astype(str))\nrfm[\"Segment\"] = rfm[\"Segment\"].replace(seg_map, regex=True)","2e985dd9":"rfm[[\"Segment\", \"Recency\", \"Frequency\", \"Monetary\"]].groupby(\"Segment\").agg([\"mean\", \"count\"])","168366e0":"# For example, if we want to examine loyal customers.\nrfm[rfm[\"Segment\"] == \"Loyal_Customers\"].head()","8af46814":"**Monetary:** It is the value that shows how much a customer has spent in a certain period of time. Dividing the value of the spend by frequency shows us the average purchase amount.","180f54d1":"RFM consists of three dimensions:","83fc516f":"RFM Analysis is one of the most ideal methods to determine the groups of customers according to their purchasing behavior and to deal with them specifically according to their segments.","d11cd50e":"# Data Preparation","38e5b28d":"# Customer Segmentation with RFM","7ea9005f":"# Creating RFM Metrics","607a66cd":"Now we can see the customer segments that we want to focus on. For the customer segment that they want to focus on, a marketing strategy can be chosen easily.","4813432c":"**Recency:** The value that indicates how much time has passed since a customer's last activity or transaction with the brand. \nThe activity is usually a purchase, but sometimes variations are used such as the last visit to a website or the use of a mobile app.","a66aa092":"**Frequency:** How often a customer shows in a certain period of activity value. Customers who operate more often may be more loyal than others.","c93574d9":"![1_Zyt1G-MweQs3ZSjtREGgOw.png](attachment:1_Zyt1G-MweQs3ZSjtREGgOw.png)","0a6d8baa":"When we examine the data set, we see that there are variables that include the amount of purchase of a product and the price of that product, but it is not a variable that represents the total price earned from a product, and this is actually a required value for the Monetary value. To achieve this, we define a variable that indicates how much is earned from a product named \"TotalPrice\".","f51a605f":"In the code above:\n* We introduced RFM values in the \"Customer ID\" breakdown.\n* Subtracting date.max () from today_date variable on \"InvoiceDate\" variable and assigning it as days gave us the value of Recency.\n* We obtained the value of Frequency by keeping the number of pieces of the \u201cInvoice\u201d variable with len () function.\n* We obtained the Monetary value by taking the sum of the \"TotalPrice\" variable with the function sum ().\n* We have assigned new column names to RFM","3bc57a99":"![1_oUKMc3gk53hccFX4YNeu1g.png](attachment:1_oUKMc3gk53hccFX4YNeu1g.png)","22013cc8":"*Let's support this theoretical RFM knowledge with an exercise.*","dedc801d":"*Thank you for reading. \nI am waiting for your feedback.*","c478fb5d":"The last step of our exercise is to assign labels to RFM values with the help of regex. The values in the seg_map dictionary give us our RFM values.\nWe have defined a variable named \"segment\" variable. This variable holds values representing segments of customers, corresponding to our R and F values. We used the replace () function to assign these values to the combination of R and F variables. Here the replace () function goes to the seg_map dictionary and keeps the variable R from the first value to the variable F from the second value and discards the corresponding value.","5167e5b5":"Variables of the data set:\n\n* InvoiceNo : The number of the invoice, unique per each purchase. Refund invoice numbers contain \"C\"\n* StockCode : Unique code per each item\n* Description : Name of the item\n* Quantity : The number of items within the invoice\n* InvoiceDate : Date and time of the purchase\n* UnitPrice : Price of a single item, as of Sterlin\n* CustomerID : Unique id number per each customer\n* Country : The country where the customer is living","7b4b0ff4":"# Data Set and Story","38993d86":"The data set called Online Retail II, which we will use in the exercise, includes the sales of a UK-based online retail store between the dates 01\/12\/2009 - 09\/12\/2011.","58414a88":"We segmented our RFM values with the qcut () function. The high recency value means that the customer gets away from us. For this reason, we made the labels decreasing in order to avoid confusion.","d32b323d":"In order to see the RFM values together, we defined a variable named \"RFM_SCORE\" and combined the RFM values by converting them to strings. If we tried to combine without converting, we might get an error because it would not combine the two categorical variables.","2b87640d":"We first looked at the unique values in the invoice number and these were 22190. Then we removed the returned parts of the Invoice variable and the unique values in the invoice number were reduced to 18536.","f8d5c3ff":"To calculate the recency value, we defined a variable called today_date. \nWe have done 2 days longer than the deadline for this variable in the data. \nOur goal of doing this was to prevent the last date shoppers in the dataset from having a Recency value of 0.","4eae571a":"*We got to know our data set. We can go into practice.*"}}