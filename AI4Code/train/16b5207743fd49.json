{"cell_type":{"dc004308":"code","ecf0120d":"code","f7ef2414":"code","dc97f7c2":"code","25503a2e":"code","f90d2221":"code","2425461d":"code","55d8eeb5":"code","dffc9872":"code","611dab20":"code","7b48e0ad":"code","dc145fb0":"code","24356817":"code","65f09bfb":"code","15965f90":"code","539c0c53":"code","bb6b24db":"code","3c67de90":"code","08db306c":"code","dc54cd0d":"code","7104de8c":"code","96c3ebb3":"code","104a8fab":"markdown","31483e71":"markdown","31e4b70f":"markdown","42ccdaff":"markdown","08d330f8":"markdown","2de2cac8":"markdown","d42d3935":"markdown","3886a11f":"markdown"},"source":{"dc004308":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\n # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","ecf0120d":"import numpy as np # linear algebra\nimport pandas as pd\nimport pandas as pd\nimport matplotlib.pyplot as plt\nfrom statsmodels.graphics.tsaplots import plot_acf\nfrom statsmodels.graphics.tsaplots import plot_pacf\nfrom statsmodels.tsa.seasonal import STL\nfrom statsmodels.tsa.arima.model import ARIMA\nfrom statsmodels.tsa.forecasting.stl import STLForecast\nfrom sklearn.metrics import mean_absolute_error\nfrom sklearn.metrics import mean_squared_error\nimport re #to extract model name","f7ef2414":"#reading the dataset\nair_passengers_df = pd.read_csv(\"..\/input\/air-passengers\/AirPassengers.csv\")\nair_passengers_df['Month'] = pd.to_datetime(air_passengers_df['Month'], infer_datetime_format=True)\nair_passengers_df_time_indexed = air_passengers_df.set_index('Month')\n","dc97f7c2":"#create train and test data\n# a 70-30 train test split is generated\n\n\ntrain_df = air_passengers_df_time_indexed[:int(0.7*(len(air_passengers_df_time_indexed)))]\ntest_df = air_passengers_df_time_indexed[int(0.7*len(air_passengers_df_time_indexed)):]\n","25503a2e":"#function to calculate mape\n\ndef mean_absolute_percentage_error(y_true, y_pred): \n    y_true, y_pred = np.array(y_true), np.array(y_pred)\n    return np.mean(np.abs((y_true - y_pred) \/ y_true)) * 100\n\n\n\n#function to calulate all scores like AIC,BIC,RMSE etc. and return a dataframe\ndef score_generator(fitted_model,forecast,actual):\n                               \n    try:\n        AIC = fitted_model.aic\n        BIC = fitted_model.bic\n    except:\n        AIC = 'not defined'\n        BIC = 'not defined'\n     \n    try:\n        mae = mean_absolute_error(actual,forecast)                      #since tsa.ARIMA return a single series with forecasts\n    except:\n        mae = mean_absolute_error(actual,forecast['fcst'])    #since kats.prophet returns a dataframe where the forecasts are in column name 'fcst'\n        \n    try:    \n        rmse= np.sqrt(mean_squared_error(actual,forecast))\n    except:\n        rmse= np.sqrt(mean_squared_error(actual,forecast['fcst']))\n                               \n    try:\n        mape = mean_absolute_percentage_error(actual,forecast)\n    except:\n        mape = mean_absolute_percentage_error(actual,forecast['fcst'])\n                               \n    \n                    \n    return AIC,BIC,mae,rmse,mape\n    \n #function to generate a dataframe for a list of models\ndef tabulated_scores(list_models,actual):\n    \n    AIC = []\n    BIC = []\n    MAE = []\n    RMSE = []\n    MAPE = []                         \n    NAME = []\n    \n    \n    for model in list_models:\n        \n        #code to get model name\n        model_name = str(type(model))\n        name = re.findall(r\"'(.*?)'\", model_name, re.DOTALL)\n        \n        if name[0].split('.')[0] == 'merlion':\n            test_df_merlion = TimeSeries.from_pd(test_df)\n            test_pred, test_err = model.forecast(len(test_df))\n             \n            rmse = ForecastMetric.RMSE.value(ground_truth=test_df_merlion, predict=test_pred)\n            mae = ForecastMetric.MAE.value(ground_truth=test_df_merlion, predict=test_pred)\n            aic = 'not defined'\n            bic = 'not defined'\n            mape = mean_absolute_percentage_error(test_df,[i[0] for i in pd.DataFrame(test_pred)[1]]) #calculating mape as tuple is formed on making preds a DataFrame\n         \n        elif ( name[0].split('.')[0] == 'kats' or name[0].split('.')[0] == 'pmdarima') :\n            \n            if name[0].split('.')[2] == 'ensemble':\n                model.predict(len(actual))\n                res = model.aggregate()\n                aic, bic, mae,rmse ,mape = score_generator(model,res,actual)\n                \n            else:\n                forecast = model.predict(len(actual)) #for kats.prophet, pmdarima autoarima\n                aic, bic, mae,rmse ,mape = score_generator(model,forecast,actual)\n                \n            \n            \n        \n        else:\n            forecast = model.forecast(len(actual)) #for tsa.ARIMA and STLforecast\n            aic, bic, mae,rmse ,mape = score_generator(model,forecast,actual)\n        \n        AIC.append(aic)\n        BIC.append(bic)\n        MAE.append(mae)\n        RMSE.append(rmse)\n        MAPE.append(mape)\n        NAME.append(name)\n                               \n        \n           \n    table = pd.DataFrame(data = list(zip(NAME,AIC,BIC,MAE,RMSE,MAPE)), columns = ['NAME','AIC','BIC','MAE','RMSE','MAPE'])\n    \n    \n    return table\n    \n    \n\n\n\n","f90d2221":"\nfrom statsmodels.tsa.statespace.sarimax import SARIMAX\n\n\n","2425461d":"#generating SARIMAX models and appending it to the list\n\n\nlist_Sarimax_models = []\n\nfor p in range(11,12):\n    for d in range (0,2):\n        for q in range (0,2):\n            for P in range(0,2):\n                for D in range(0,2):\n                    for Q in range(0,2):\n                        if p == 12:\n                            continue\n                        else:\n                            model3 = SARIMAX(train_df,order = (p,d,q), seasonal_order=(P,D,Q,12),trend='t')\n                            fitted3 = model3.fit()\n                            list_Sarimax_models.append(fitted3)\n\n","55d8eeb5":"PARAMETERS_SARIMAX = []\n\nfor p in range(11,12):\n    for d in range (0,2):\n        for q in range (0,2):\n            for P in range(0,2):\n                for D in range(0,2):\n                    for Q in range(0,2):\n                        if p == 12:\n                            continue\n                        else:\n                            PARAMETERS_SARIMAX.append(f'({p},{d},{q})({P},{D},{Q},12)')\n    \n    \nPARAMETERS_SARIMAX  \n    ","dffc9872":"import numpy as np\ntsa_SARIMAX_df = tabulated_scores(list_Sarimax_models,test_df)\ntsa_SARIMAX_df['Parameters'] = PARAMETERS_SARIMAX\ntsa_SARIMAX_df.sort_values(by = ['RMSE'], inplace = True) #first row has the best model for tsa.SARIMAX with RMSE of 30.86\ntsa_SARIMAX_df","611dab20":"pip install kats","7b48e0ad":"from kats.consts import TimeSeriesData\n\nair_pax_renamed = air_passengers_df.rename(columns={\"Month\": \"time\"})\nair_passengers_ts_train = TimeSeriesData(air_pax_renamed[:int(0.7*len(air_pax_renamed))])\nair_passengers_ts_train.plot(cols=['#Passengers'])\nplt.show()","dc145fb0":"from kats.models.prophet import ProphetModel, ProphetParams","24356817":"# import the param and model classes for Prophet model\nfrom kats.models.prophet import ProphetModel, ProphetParams\n\nseasonality_mode = ['multiplicative','additive']\ngrowth = ['linear']\nyearly_seasonality = [True,False]\n#uncertainty_samples = False\n\nlist_katsprophet_models = []\nlist_katsprophet_models_params = []\n\nfor s in seasonality_mode:\n    for g in growth:\n        for ys in yearly_seasonality:\n            params = ProphetParams(seasonality_mode= s, yearly_seasonality=ys, growth= g)\n            prophet_m = ProphetModel(air_passengers_ts_train, params)\n            prophet_m.fit()\n            list_katsprophet_models.append(prophet_m)\n            list_katsprophet_models_params.append(f'{s},{ys},{g}')\n            ","65f09bfb":"kats_prophet_df = tabulated_scores(list_katsprophet_models,test_df)\nkats_prophet_df['Parameters'] = list_katsprophet_models_params\nkats_prophet_df.sort_values(by=['RMSE'],inplace = True)\nkats_prophet_df #gives the best model for kats.prophet with RMSE of 26.9","15965f90":"pip install salesforce-merlion","539c0c53":"from merlion.utils import TimeSeries\nfrom merlion.utils.time_series import TimeSeries\nfrom merlion.evaluate.forecast import ForecastMetric\nfrom merlion.models.automl.autosarima import AutoSarima, AutoSarimaConfig\nfrom merlion.models.automl.seasonality_mixin import SeasonalityLayer\nfrom merlion.models.forecast.sarima import Sarima\n\n","bb6b24db":"#Generating TimeSeries object from Dataframes\ntrain_df_merlion = TimeSeries.from_pd(train_df)\ntest_df_merlion = TimeSeries.from_pd(test_df)","3c67de90":"# **full auto sarima with approximation**\nmax_iter = [10,20,50,100,200,400,1000]\n# Specify the configuration of AutoSarima with approximation\nlist_autosarima_merlion_models = []\nparameters_autosarima_merlion_models = []\n\nfor mi in max_iter:\n    config1 = AutoSarimaConfig(max_forecast_steps=len(test_df), order=(\"auto\", \"auto\", \"auto\"),\n                           seasonal_order=(\"auto\", \"auto\", \"auto\", 12), approximation=True, maxiter=mi)\n    #model1  = SeasonalityLayer(model = AutoSarima(model = Sarima(config1)))\n    model1  = AutoSarima(model = Sarima(config1))\n    train_pred, train_err = model1.train(train_df_merlion, train_config={\"enforce_stationarity\": True,\"enforce_invertibility\": True})\n    list_autosarima_merlion_models.append(model1)\n    parameters_autosarima_merlion_models.append(f'{mi} maximum iterations')\n    \n    \nautosarima_df_result = tabulated_scores(list_autosarima_merlion_models,test_df)\nautosarima_df_result['Parameters'] = parameters_autosarima_merlion_models\nautosarima_df_result.sort_values(by=['RMSE'],inplace = True)\nautosarima_df_result\n\n","08db306c":"pip install pmdarima","dc54cd0d":"import pmdarima as pm\nmodel = pm.auto_arima(train_df, seasonal=True, m=12) #takes approx 10 min to train\n\nforecast = model.predict(len(test_df))","7104de8c":"pmd_autoarima_df = tabulated_scores([model],test_df)\npmd_autoarima_df['Parameters'] = 'seasonal=True, m = 12'\npmd_autoarima_df","96c3ebb3":"All_models_params_df = pd.concat([tsa_SARIMAX_df,\nkats_prophet_df,\nautosarima_df_result,pmd_autoarima_df], ignore_index=True)\n\nAll_models_params_df.sort_values(by=['RMSE'],inplace = True)\nAll_models_params_df","104a8fab":"# **pmd ARIMA auto arima method**","31483e71":"# **Merlion**","31e4b70f":"# **Forecast using tsa.ARIMA models**","42ccdaff":"# **KATS package**","08d330f8":"# **function to generate predictive accuracy\/complexity scores of the model**","2de2cac8":"# **Forecasting using Prophet**","d42d3935":"# **Train Test splitting of dataset**","3886a11f":"# **Auto ML models merlion**"}}