{"cell_type":{"d3522b65":"code","3c1e13c9":"code","f7c2089f":"code","0a27eb1f":"code","70079e37":"code","80feb05a":"code","ab616ea1":"code","45c48f79":"markdown","740b3a69":"markdown","7b4386aa":"markdown","1e3718c0":"markdown"},"source":{"d3522b65":"import sklearn\n\nimport os\nimport re\nimport sys\n\nimport matplotlib.pyplot as plt\nimport cv2\nimport pytesseract\nfrom tqdm import tqdm\n\nimport numpy as np\nimport pandas as pd\n\nimport torch\nfrom torchvision import models\n\nimport seaborn as sb\n\nfrom sklearn.cluster import AgglomerativeClustering","3c1e13c9":"class SafetyDataset:\n    class Data:\n        def __init__(self):\n            self.photo_name = []\n            self.flatten_photo = []\n            self.text = []\n    \n    def __init__(self, path):\n        self.data = self.Data()\n        self.path = path\n        self.conf = r'-- oem 2'\n        \n        # use resnet50 model for prediction\n        self.model = models.resnet50(pretrained=True)\n        \n        # store the images\n        self.store_images()\n        \n    def load_image(self, path, h, w):\n        orig_img = cv2.imread(path)\n        img = cv2.resize(orig_img, (h, w))\n        img = np.expand_dims(img, 0)\n        return orig_img, torch.from_numpy(img.copy()).transpose(3, 1).float()\n    \n    def store_images(self):\n        list_ = os.listdir(self.path)\n        for mem in tqdm(list_):\n            # append photo name\n            self.append_name(mem)\n            \n            imagePath = self.path + '\/' + mem\n            orig_img, tensor = self.load_image(imagePath, 224, 224)\n            \n            # append orig photo to text\n            self.append_text(orig_img)\n            \n            features = self.predict_image(tensor)\n            \n            # append flatten photo\n            self.append_tensor(features)\n\n            \n    def predict_image(self, tensor):\n        features = self.model(tensor)\n        return np.array(features.detach().numpy())\n            \n    def append_name(self, mem):\n        self.data.photo_name.append(mem)\n    \n    def append_text(self, img):\n        self.data.text.append(pytesseract.image_to_string(img, config=self.conf))\n        \n    def append_tensor(self, features):\n        self.data.flatten_photo.append(features.flatten())\n        \n    def get_flatten_photos(self):\n        return np.array(self.data.flatten_photo, dtype='float64')","f7c2089f":"# images path\npath = '..\/input\/keep-babies-safe\/dataset\/images'\n\n# load the dataset\nds = SafetyDataset(path)\n\n# get the features\nfeatures = ds.get_flatten_photos()","0a27eb1f":"class Clustering:\n    class Data:\n        def __init__(self):\n            self.df = None\n            \n        def set_data(self, names, classes, brands):\n            df = {\n                'Image' : names,\n                'Class_of_image' : classes,\n                'Brand_name' : brands\n            }\n            self.df = pd.DataFrame(df)\n    \n    def __init__(self, n_clusters):\n        self.data = self.Data()\n        self.kmeans = AgglomerativeClustering(n_clusters=n_clusters)\n        self.idx_to_classes = { 0: 'toys', 1: 'consumer_products'}\n        \n    def fit(self, features):\n        self.kmeans.fit(features)\n        \n    def prep_data(self, photo_names, texts):\n        classes = np.array([self.idx_to_classes[label] for label in self.kmeans.labels_])\n\n        subs = [re.sub(\"\\s\\s+\", \" \", text) for text in np.array(texts)]\n        brands = ['Unamed' if (len(sub) == 0 or sub == \" \") else sub for sub in subs]\n        \n        self.data.set_data(photo_names, classes, brands)\n        \n    def get_data(self):\n        return self.data.df","70079e37":"cluster = Clustering(2)\ncluster.fit(features)\ncluster.prep_data(ds.data.photo_name, ds.data.text)\ncluster_df = cluster.get_data()","80feb05a":"def draw(features, cluster_df):\n    dim_reduced = pd.DataFrame(features)\n    dim_reduced = dim_reduced.rename(columns = { 0: 'V1', 1 : 'V2'})\n    dim_reduced['Category'] = list (cluster_df['Class_of_image'])\n    plt.figure(figsize = (10, 5))\n    sb.scatterplot(data=dim_reduced, x='V1', y='V2', hue='Category')\n    plt.grid(True)\n    plt.show()","ab616ea1":"draw(features, cluster_df)","45c48f79":"<h1 align='center' style='border: 1px dotted blue; color: red'>Keep Babies Safe - Clustering<\/h1>","740b3a69":"<h2 align='center' color='blue' style='border: 1px dotted blue; color: green'>Safety Dataset<\/h2>","7b4386aa":"<h2 align='center' style='border: 1px dotted blue; color: green'>Draw Cluster<\/h2>","1e3718c0":"<h2 align='center' style='border: 1px dotted blue; color: green'>Agglomerative Clustering<\/h2>"}}