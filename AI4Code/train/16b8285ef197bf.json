{"cell_type":{"c5fcd729":"code","14af32eb":"code","2aab8e77":"code","f7d4d2ba":"code","6fe74450":"code","09bf4cea":"code","68c18bcf":"code","5d473e05":"code","96612bfd":"code","4607f6ee":"code","92957e4c":"code","826c329d":"code","678d1d19":"code","fc870b0c":"code","0ff7c326":"code","d52d7957":"code","b3d154ee":"code","cf2c6e51":"code","ebfbe67c":"code","95bdd503":"code","c304bbc2":"code","648cab2c":"code","375a076b":"code","a161b8e6":"code","ffdfc221":"code","685f2ddf":"code","9ca985f1":"code","855021db":"code","6e55153b":"code","bd0e980a":"code","457c99d0":"code","4a4242e8":"code","c14e56ad":"code","e34a8441":"code","a54a473e":"code","ea0a5a56":"code","a7fa8bb2":"markdown"},"source":{"c5fcd729":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","14af32eb":"import pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport numpy as np","2aab8e77":"songs = pd.read_csv('\/kaggle\/input\/top50spotify2019\/top50.csv',encoding='ISO-8859-1')\nsongs.head(5)","f7d4d2ba":"new_songs = songs.drop(['Unnamed: 0'],axis=1)","6fe74450":"new_songs.describe()","09bf4cea":"new_songs.info()","68c18bcf":"## Check on Target Column--Popularity\nplt.figure(figsize=(8,6))\nplt.scatter(range(new_songs.shape[0]),np.sort(new_songs['Popularity'].values))\nplt.xlabel('Row Index')\nplt.ylabel('Popularity Count')\nplt.show()","5d473e05":"#Distribtution of every feature with target feature--here popularity#","96612bfd":"## all Feature check with Popularity \nfig, axes = plt.subplots(nrows=3, ncols=3, figsize=(18,10))\naxes = axes.flatten()\ncolors=\"bgrcmykw\"\nimport random\nnum_cols = list(new_songs.select_dtypes([np.number]).columns[:-1])\n#selecting all the numeric columns except Popularity\nplt.tight_layout(pad=2)\nfor i, j in enumerate(num_cols):\n    axes[i].scatter(x=new_songs[j], y=new_songs['Popularity'], color= random.choice(colors), edgecolor='black')\n    axes[i].set_xlabel(j)\n    axes[i].set_ylabel('Popularity')","4607f6ee":"plot gives us indication that songs with most energy and most danceability are most popular","92957e4c":"plt.figure(figsize=(12,8))\nsns.countplot(x='Artist.Name',data=new_songs,color='c')\nplt.xlabel('Artist.Name in given data',fontsize=12)\nplt.ylabel('count of song sung',fontsize=12)\nplt.xticks(rotation='vertical')\nplt.title('Artist.Name and no.of song count',fontsize=12)\nplt.show()","826c329d":"Ed Sheeran has sung maximum number of songs","678d1d19":"plt.figure(figsize=(12,8))\nsns.countplot(x='Genre',data=new_songs,color='b')\nplt.xlabel('Songs Genre',fontsize=12)\nplt.ylabel('count of Genre',fontsize=12)\nplt.xticks(rotation='vertical')#Summary statistic of all Genre\nplt.title('Songs Genre and no.of song count',fontsize=12)\nplt.show()","fc870b0c":"seems that most of the songs are from 'dance pop' genre","0ff7c326":"Summary statistic of all Genre","d52d7957":"# Groupby by Genre\ngenre = new_songs.groupby(\"Genre\")\ngenre.describe().head()\ngenre.mean().sort_values(by=\"Popularity\",ascending=False).head()\nplt.figure(figsize=(15,10))\ngenre.size().sort_values(ascending=False).plot.bar()\nplt.xticks(rotation=50)\nplt.xlabel(\"songs genre\")\nplt.ylabel(\"Polulaity\")\nplt.show()","b3d154ee":"##Let's now take a look at the plot of all genre by its highest rated genre,\n##using the same plotting technique as above:\nplt.figure(figsize=(15,10))\ngenre.max().sort_values(by=\"Popularity\",ascending=False)[\"Popularity\"].plot.bar()\nplt.xticks(rotation=50)\nplt.xlabel(\"songs genre\")\nplt.ylabel(\"Polulaity\")\nplt.show()","cf2c6e51":"'electro pop'is most populare genre amongst in the list of top 50","ebfbe67c":"plt.figure(figsize=(10,8))\nsns.jointplot(x=songs['Danceability'], y=songs['Popularity'].values, size=10, kind=\"reg\",color='g')\nplt.ylabel('Popularity', fontsize=12)\nplt.xlabel(\"Danceability\", fontsize=12)\nplt.title(\"Danceability Vs Popularity\", fontsize=15)\nplt.show()","95bdd503":"sns.pairplot(songs, x_vars=['Beats.Per.Minute','Energy'], y_vars=(['Popularity']),height=5, kind='reg')","c304bbc2":"sns.pairplot(songs, x_vars=['Beats.Per.Minute','Speechiness.'], y_vars=(['Popularity']),height=5, kind='reg')","648cab2c":"pairplot shows 'beats per sec' and 'speechiness' showing some lenearity with popularity","375a076b":"#Finding out the skew for each attribute\nskew=new_songs.skew()\nprint(skew)","a161b8e6":"Skewness indicates whether the data is concentrated on one side","ffdfc221":"# Removing the skew by using the boxcox transformations\nfrom scipy import stats\ntransform=np.asarray(songs['Liveness'].values)\nsongs_transform = stats.boxcox(transform)[0]\n# Plotting a histogram to show the difference \nplt.hist(songs['Liveness'],bins=10) #original data\nplt.show()\nplt.hist(songs_transform,bins=10) #corrected skew data\nplt.show()","685f2ddf":"sns.distplot(new_songs['Popularity'],kde=True,color='blue')\nplt.show()","9ca985f1":"transform=np.asarray(new_songs['Popularity'].values)\nsongs_transform = stats.boxcox(transform)[0] \nsns.distplot(songs_transform,kde=False,color='red')\nplt.show()","855021db":"degree of skewness before and after in 'popularity' and 'Liveliness' attributes","6e55153b":"fig, ax = plt.subplots(figsize=(10,10))        \nsns.heatmap(new_songs.corr(),annot=True,linewidths=.5, ax=ax)","bd0e980a":"def func(pct, allvals):\n    absolute = int(pct\/100.*np.sum(allvals))\n    return \"{:.1f}%\\n({:d} g)\".format(pct, absolute)","457c99d0":"labels1 = songs['Artist.Name'].value_counts().index\nsizes1 = songs['Artist.Name'].value_counts().values\ncolors = ['purple', 'yellow','lightcoral', 'lightskyblue','cyan', 'green', 'blue','yellow','orange','pink']\nplt.figure(figsize = (13,10))\nplt.pie(sizes1, labels=labels1, autopct=lambda pct: func(pct, sizes1),colors=colors)\nplt.axis('equal')\nplt.show()","4a4242e8":"##distributions and proportions of each genre on the top 50 list\n# calculate the number of tracks by genre\nGenre_counts = new_songs[\"Genre\"].value_counts()\nGenre_counts_index = Genre_counts.index\nGenre_counts, Genre_counts_index = zip(*sorted(zip(Genre_counts, Genre_counts_index)))","c14e56ad":"# treemap for visualizing proportions\n%matplotlib inline\nimport plotly\nimport plotly.graph_objects as go\nplotly.offline.init_notebook_mode(connected=True)\nfig = go.Figure(\n    go.Treemap(\n        labels = [\"Number of Tracks by Genre of the Spotify Top 50 Music List\"] + list(Genre_counts_index),\n        parents = [\"\"] + [\"Number of Tracks by Genre of the Spotify Top 50 Music List\"] * len(Genre_counts_index),\n        values = [0] + list(Genre_counts),\n        textposition='middle center', # center the text\n        textinfo = \"label+percent parent\", # show label and its percentage among the whole treemap\n        textfont=dict(\n            size=12 # adjust small text to larger text\n        )\n    )\n)\n#plotly.offline.iplot(fig, filename= treemap + \".html\")\nfig.show()\n#import plotly.plotly as py\n# Save the figure as a png image:\n#py.image.save_as(fig, 'my_plot.png')","e34a8441":"from os import path\nfrom PIL import Image\nfrom wordcloud import WordCloud, STOPWORDS, ImageColorGenerator\n\nimport matplotlib.pyplot as plt\n%matplotlib inline","a54a473e":"import warnings\nwarnings.filterwarnings(\"ignore\")","ea0a5a56":"# Start with one review:\n##visualization of most popular genre group using WordCloud\nfrom matplotlib import pyplot as plt\nfrom wordcloud import WordCloud, STOPWORDS\nstring=str(songs.Genre)\nwordcloud = WordCloud(stopwords=STOPWORDS,\n                      background_color='cyan',\n                      width=4000,\n                      height=2000).generate(string)\nplt.imshow(wordcloud,interpolation='bilinear')\nplt.axis(\"off\")\nplt.show()","a7fa8bb2":"# These are the ways of visualization to Discover Insights in spotify dataset.\n# "}}