{"cell_type":{"84c755ff":"code","aba12ddc":"code","ebbfa8f1":"code","54d49cbd":"code","652596a9":"code","f3c510f7":"code","f31f6ff9":"code","b8a294e6":"code","50cb91f4":"code","cc5de5fd":"code","15a03184":"code","7dee3ad6":"code","755c9f9a":"code","5ac7d952":"code","75087829":"code","52d827d0":"code","27b725d0":"code","49479210":"code","e73d45cd":"code","7863d931":"code","878b2233":"code","7c18f783":"code","6f06648c":"code","620ea02e":"code","a335755c":"code","642ac916":"code","bd3fd677":"code","891dff85":"code","c315a75f":"code","380c3edf":"markdown"},"source":{"84c755ff":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport cv2\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\n# for dirname, _, filenames in os.walk('\/kaggle\/input'):\n#     for filename in filenames:\n#         print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","aba12ddc":"!ls","ebbfa8f1":"from matplotlib import pyplot\nfrom matplotlib.image import imread\nimport matplotlib.pyplot as plt\n# define location of dataset\nimg1 = '\/kaggle\/input\/agriculture-crop-images\/test_crop_image\/rice-field.jpg'\nimg2 = '\/kaggle\/input\/agriculture-crop-images\/test_crop_image\/wheatarial02.jpg'\nimg3 = '\/kaggle\/input\/agriculture-crop-images\/test_crop_image\/juteplants.jpg'\nimg4 = '\/kaggle\/input\/agriculture-crop-images\/test_crop_image\/sugarcane-farm-in-the-mountain-countryside-of-thailand.jpg'\n# plot first few images\nimage = imread(img1)\npyplot.imshow(image)\npyplot.show()\nimage = imread(img2)\npyplot.imshow(image)\npyplot.show()\nimage = imread(img3)\npyplot.imshow(image)\npyplot.show()\nimage = imread(img4)\npyplot.imshow(image)\npyplot.show()","54d49cbd":"from keras.preprocessing.image import img_to_array\nfrom sklearn.utils import shuffle\nfrom sklearn.preprocessing import LabelBinarizer\nfrom sklearn.model_selection import train_test_split\nfrom keras.preprocessing.image import ImageDataGenerator\nfrom sklearn.metrics import classification_report, confusion_matrix\nfrom keras.preprocessing.image import ImageDataGenerator, array_to_img, img_to_array, load_img","652596a9":"def summarize_diagnostics(history):\n    plt.style.use(\"ggplot\")\n    plt.figure()\n    N = epochs\n    plt.plot(np.arange(0, N), history.history[\"loss\"], label=\"train_loss\")\n    plt.title(\"Loss\")\n    plt.xlabel(\"Epoch #\")\n    plt.ylabel(\"Loss\")\n    plt.legend(loc=\"upper left\")\n    \n    plt.style.use(\"ggplot\")\n    plt.figure()\n    N = epochs\n    plt.plot(np.arange(0, N), history.history[\"accuracy\"], label=\"accuracy\")\n    plt.title(\"Accuracy\")\n    plt.xlabel(\"Epoch #\")\n    plt.ylabel(\"Accuracy\")\n    plt.legend(loc=\"upper left\")","f3c510f7":"IMAGE_DIMS = (224, 224, 3)","f31f6ff9":"train_data_dir = '..\/input\/agriculture-crop-images\/kag2'","b8a294e6":"batch_size=64","50cb91f4":"train_datagen = ImageDataGenerator(rescale=1.0\/255.0, horizontal_flip=True,vertical_flip=True, rotation_range=90)\n \ntrain_generator = train_datagen.flow_from_directory(\n        train_data_dir,\n        target_size=(IMAGE_DIMS[0], IMAGE_DIMS[1]),\n        batch_size=batch_size,\n        class_mode='categorical',\n        shuffle=True)","cc5de5fd":"nb_train_samples=804 ","15a03184":"from tensorflow.keras.applications import VGG16\nfrom tensorflow.keras.models import Sequential\nfrom tensorflow.keras.layers import Dense, Dropout, Activation, Flatten\nfrom tensorflow.keras.layers import Conv2D, MaxPooling2D, ZeroPadding2D\nfrom tensorflow.keras.layers import BatchNormalization\nfrom tensorflow.keras.models import Model\n\n\nimg_rows = 224\nimg_cols = 224 \n\npre_model = VGG16(weights = 'imagenet', \n                 include_top = False, \n                 input_shape = (img_rows, img_cols, 3))\n\nfor layer in pre_model.layers:\n    layer.trainable = False\n    \nfor (i,layer) in enumerate(pre_model.layers):\n    print(str(i) + \" \"+ layer.__class__.__name__, layer.trainable)","7dee3ad6":"def addTopModel(bottom_model, num_classes, D=512):\n    top_model = bottom_model.output\n    top_model = Flatten(name = \"flatten\")(top_model)\n    top_model = Dense(D, activation = \"relu\")(top_model)\n    top_model = Dropout(0.5)(top_model)\n    top_model = Dense(D, activation = \"relu\")(top_model)\n    top_model = Dropout(0.3)(top_model)\n    top_model = Dense(num_classes, activation = \"softmax\")(top_model)\n    return top_model","755c9f9a":"num_classes = 5\nFC_Head = addTopModel(pre_model, num_classes)\nmodel = Model(inputs=pre_model.input, outputs=FC_Head)\nprint(model.summary())","5ac7d952":"from tensorflow.keras.optimizers import RMSprop, Adam\nfrom tensorflow.keras.callbacks import ModelCheckpoint, EarlyStopping, ReduceLROnPlateau","75087829":"model.compile(loss = 'categorical_crossentropy',\n              optimizer = Adam(lr = 0.0001),\n              metrics = ['accuracy'])\n\nnb_train_samples=804 \nepochs = 40\nbatch_size = 64\ncheckpoint = ModelCheckpoint(\".\/weights.h5\",\n                             monitor=\"loss\",\n                             mode=\"min\",\n                             save_best_only = True,\n                             verbose=1)\ncallbacks = [ checkpoint]\nhistory = model.fit_generator(\n    train_generator,\n    steps_per_epoch = nb_train_samples \/\/ batch_size,\n    epochs = epochs,\n    callbacks = callbacks)","52d827d0":"summarize_diagnostics(history)","27b725d0":"test_data_dir = '..\/input\/agriculture-crop-images\/crop_images'\ntest_datagen = ImageDataGenerator(rescale=1.\/255)\n \n# Change the batchsize according to your system RAM\ntest_batchsize = 64\n \ntest_generator = test_datagen.flow_from_directory(\n        test_data_dir,\n        target_size=(img_rows, img_cols),\n        batch_size=test_batchsize,\n        class_mode='categorical',\n        shuffle=False)","49479210":"model.load_weights(\"weights.h5\")\nclass_labels = test_generator.class_indices\nclass_labels = {v: k for k, v in class_labels.items()}\nclasses = list(class_labels.values())\nY_pred = model.predict_generator(test_generator)\ny_pred = np.argmax(Y_pred, axis=1)","e73d45cd":"print('Confusion Matrix')\nprint(confusion_matrix(test_generator.classes, y_pred))\nprint('Classification Report')\ntarget_names = list(class_labels.values())\nprint(classification_report(test_generator.classes, y_pred, target_names=target_names))\n\nplt.figure(figsize=(8,8))\ncnf_matrix = confusion_matrix(test_generator.classes, y_pred)\n\nplt.imshow(cnf_matrix, interpolation='nearest')\nplt.colorbar()\ntick_marks = np.arange(len(classes))\n_ = plt.xticks(tick_marks, classes, rotation=90)\n_ = plt.yticks(tick_marks, classes)","7863d931":"import cv2\nimport numpy as np","878b2233":"def predict_crop(path,actual,class_labels):\n    predict_datagen = ImageDataGenerator(rescale=1.\/255)\n    img = cv2.imread(path)\n    img = cv2.resize(img, (224, 224))\n    img = np.array(img).reshape((1, 224, 224, 3))\n    Y_pred = model.predict(img)\n    y_pred = np.argmax(Y_pred, axis=1)\n    if y_pred == actual:\n        print('Correct prediction')\n    else:\n        print(\"Messed up!!\")\n    print('Actual class \"{0}\" and predicted class \"{1}\"'.format(class_labels[int(y_pred)],class_labels[actual]))\n\n","7c18f783":"predict_crop('..\/input\/agriculture-crop-images\/test_crop_image\/sugarcane fields.jpg',3,class_labels)","6f06648c":"predict_crop('..\/input\/agriculture-crop-images\/test_crop_image\/wheatss.jpg',4,class_labels)","620ea02e":"predict_crop('..\/input\/agriculture-crop-images\/test_crop_image\/wheatcrop01.jpg',4,class_labels)","a335755c":"predict_crop('..\/input\/agriculture-crop-images\/test_crop_image\/maize-field.jpg',1,class_labels)","642ac916":"predict_crop('..\/input\/agriculture-crop-images\/test_crop_image\/jute003.jpg',0,class_labels)","bd3fd677":"predict_crop('..\/input\/agriculture-crop-images\/test_crop_image\/rice8122f869e3f.jpg',2,class_labels)","891dff85":"predict_crop('..\/input\/agriculture-crop-images\/test_crop_image\/sugarcane fields.jpg',3,class_labels)","c315a75f":"class_labels","380c3edf":"Some random images from test dataset. Model is misclassifying for rice and sugarcane class.\nI think model is not able to generalize properly."}}