{"cell_type":{"f90a40d1":"code","e9256a9d":"code","8e95d5c3":"code","7bed8a8f":"code","fb3dc8c7":"code","8e12dac6":"code","d2032304":"code","27482073":"code","41023d19":"code","cbdd3aa7":"code","e25e535d":"code","4f4f75e1":"code","c5d32399":"code","24769f0f":"code","7e462014":"code","c442cfc1":"code","23340068":"code","47258e5f":"code","4cfaf351":"code","f1460d51":"code","c64cc5fe":"code","c084dd4b":"code","a9628a40":"code","2dfa6e4b":"code","9b23c01d":"code","9e732ad1":"code","33ea804c":"code","7600d743":"code","cfdb859b":"code","6edbbd04":"code","03c3b345":"code","36326c70":"code","ea5646a8":"code","9aa1e16d":"code","e525cd90":"code","f7f9bd07":"code","894306d8":"code","8725a116":"code","3b853655":"code","e1defd1e":"code","10afd851":"code","5bde4303":"code","e1dbbcd9":"code","abbf2f56":"code","f0f0776f":"code","974f2faa":"code","64043742":"code","d742ba3d":"code","59c8eeec":"code","d385a80f":"code","1016ab24":"code","e25ea66b":"code","e41acfc9":"code","ef3ef68b":"code","2e300aff":"code","b13a624a":"code","91552665":"code","fbd41e59":"code","33f175b2":"code","06fd35d7":"code","e1865c23":"code","bec9e719":"code","fb7d4b40":"code","3ca42e14":"code","2e1ec694":"code","6e41e669":"code","96a2ae93":"code","16659b6c":"code","a6823586":"code","5bb2d932":"code","70c51e80":"code","1e11e6ab":"code","cd3f1c2c":"code","f0011e43":"code","d0972b92":"markdown","821b1fa2":"markdown","7411ca3e":"markdown","a78e631b":"markdown","c9d9465a":"markdown","fc99f240":"markdown","e4f15171":"markdown","4a71b44d":"markdown","503a5bae":"markdown","0ece8010":"markdown","b942fb31":"markdown","278b5897":"markdown","ece86652":"markdown","bcefd991":"markdown","93f2c80b":"markdown","998a7d1c":"markdown","7edab390":"markdown","434ccea3":"markdown","49c49922":"markdown","669c28bc":"markdown","f0ef2eb4":"markdown","8f6ce76c":"markdown","542fd438":"markdown","83a64bba":"markdown","f5b9961d":"markdown","32c4987b":"markdown","fbb2ee26":"markdown","04dafbaf":"markdown"},"source":{"f90a40d1":"False","e9256a9d":"print(True, False)","8e95d5c3":"type(True)","7bed8a8f":"bool(5)","fb3dc8c7":"bool(0)","8e12dac6":"bool(-19)","d2032304":"my_str = 'Bhavya'\nmy_str.isalpha()","27482073":"print(my_str.istitle()) #Return True if the string is a title-cased string, False otherwise.\nprint(my_str.isnumeric()) #Return True if the string is a numeric string, False otherwise.\nprint(my_str.isalnum()) #Return True if the string is an alpha-numeric string, False otherwise.\nprint(my_str.islower()) #Return True if the string is a lowercase string, False otherwise.\nprint(my_str.isupper()) #Return True if the string is an uppercase string, False otherwise.\nprint(my_str.isdigit()) #Return True if the string is a digit string, False otherwise.","41023d19":"True and False","cbdd3aa7":"True or False","e25e535d":"False or False","4f4f75e1":"my_str.isalpha() or my_str.isdigit()","c5d32399":"type([])","24769f0f":"list_example = []","7e462014":"type(list_example)","c442cfc1":"lst = list()","23340068":"type(lst)","47258e5f":"list1 = [1,2,3,4,5,[11,22,33],'Hello','good','morning']","4cfaf351":"type(list1)","f1460d51":"list1","c64cc5fe":"for i in list1:\n    print(i)","c084dd4b":"list1.append('added item')","a9628a40":"print(list1)","2dfa6e4b":"list1.insert(6,'new element before hello ') #here location is 6","9b23c01d":"print(list1)","9e732ad1":"len(list1)","33ea804c":"list1[4] #list index starts from zero","7600d743":"list1.extend([6,7])","cfdb859b":"list1","6edbbd04":"new_list = [1,2,3,4,5,6,7,6,5,4,3,2,1]","03c3b345":"sum(new_list)","36326c70":"new_list.pop()","ea5646a8":"print(new_list)","9aa1e16d":"new_list.count(6)","e525cd90":"min(new_list)","f7f9bd07":"max(new_list)","894306d8":"new_list.index(2,3) # here element 2 is to be found from 3rd index to end of list","8725a116":"set_var = set()\nprint(set_var)\nprint(type(set_var))","3b853655":"set_var = {1,2,3,4,5,3,2}","e1defd1e":"set_var","10afd851":"set_var.add(6)","5bde4303":"set_var","e1dbbcd9":"set1 = {'abc','def','ghi'}\nset2 = {'abc','def','ghi','jkl'}","abbf2f56":"set2.intersection(set1) #Returns common elements","f0f0776f":"set2.union(set1) #Returns all the unique values","974f2faa":"set2.difference(set1) #Returns the difference between two sets","64043742":"set2.intersection_update(set1)","d742ba3d":"set2","59c8eeec":"set2 = {'abc','def','ghi','jkl'}","d385a80f":"set2.difference_update(set1)","1016ab24":"set2","e25ea66b":"dic = {}","e41acfc9":"type(dic)","ef3ef68b":"type(dict())","2e300aff":"my_dict = {1:'Red',2:'Blue',3:'Yellow',4:'Green'}","b13a624a":"my_dict[1] #Returns the value for key '1'","91552665":"for x in my_dict:\n    print(x)","fbd41e59":"for y in my_dict.values():\n    print(y)","33f175b2":"for z in my_dict.items():\n    print(z)","06fd35d7":"my_dict[4] = 'Black'","e1865c23":"my_dict","bec9e719":"fruits_dict1 = {1:'Apple'}\nfruits_dict2 = {2:'Grapes'}\nfruits_dict3 = {3:'Mango'}\nfruits = {'fruit1':fruits_dict1,'fruit2':fruits_dict2,'fruit3':fruits_dict3}","fb7d4b40":"print(fruits)","3ca42e14":"print(fruits['fruit2'])","2e1ec694":"print(fruits['fruit3'][3])","6e41e669":"my_tuple = tuple()","96a2ae93":"type(my_tuple)","16659b6c":"my_tuple = ('John','Jason','James')","a6823586":"my_tuple[2] = 'Jacob'","5bb2d932":"my_tuple","70c51e80":"my_tuple.count('John')","1e11e6ab":"my_tuple.index('James')","cd3f1c2c":"my_tuple = ('Hello','World')","f0011e43":"my_tuple","d0972b92":"## Sets ","821b1fa2":"## Dictionaries ","7411ca3e":"### List: Length method (Returns the length of the list)","a78e631b":"# Python Data Structures and Boolean","c9d9465a":"### List: Minimum method (Returns the minimum value from list) ","fc99f240":"Boolean values are two constant object TRUE and FALSE <br>\nIt is used to represent the truth value <br>\nIn numeric context FALSE is considered as 0 and TRUE is considered as 1","e4f15171":"### Tuples ","4a71b44d":"##### sets only keep unique values. It removes duplicates","503a5bae":"### Operations in sets ","0ece8010":"### List: Maximum method (Returns the maximum value from List) ","b942fb31":"### List: Pop method (Removes the last element from the list) ","278b5897":"### List: Append method (Adds new element at the end of the list)","ece86652":"### Indexing in list (Returns the 4th element in the list) ","bcefd991":"## Boolean and Logical Operators","93f2c80b":"### List: Count method (Returns the number of occurences of an element in a list)","998a7d1c":"### List: Insert method (Inserts a new element at the given location)","7edab390":"## Lists ","434ccea3":"## Boolean Variables","49c49922":"A Set is an unordered collection data type that is iterable, mutable, and has no duplicate elements. Python's set class represents the mathematical notion of a set.This is based on a data structure known as a hash table","669c28bc":" A list is a data structure in Python that is a mutable, or changeable, ordered sequence of elements. Each element or value that is inside of a list is called an item. Just as strings are defined as characters between quotes, lists are defined by having values between square brackets [ ]","f0ef2eb4":"### List: Extend method (adds multiple elements towards the end of the list)","8f6ce76c":"* Boolean  \n* Boolean and logical operators\n* List\n* Comparison operators\n* Dictionaries\n* Tuples\n* Sets","542fd438":"##### It is generally used to find different occurences of an element in list ","83a64bba":"##### Once a tuple is defined then its elements cannot be changed. Then only way to make changes is to replace all the values of tuple","f5b9961d":"### List: Index method (Returns the occurence of an element in a list with start and end index parameters) ","32c4987b":"### List: Sum (Returns the sum of all elements present in the list) ","fbb2ee26":"## Nested Dictionary ","04dafbaf":"### Adding element in set"}}