{"cell_type":{"15f2d679":"code","36cff410":"code","dba5971f":"code","5f8e35be":"code","1f3d4600":"code","f7e67798":"code","cd4cfa38":"code","aabecde5":"code","3a13504a":"code","a3f3d494":"code","6d505c1b":"code","b5e85ac3":"code","f073f257":"code","2f4335e7":"code","93f3cc1b":"code","2afe5574":"code","bbe0816c":"code","adab0203":"code","4e02b0a6":"code","e8154c45":"code","19489ae9":"code","88f52463":"code","8727377d":"markdown","a08f4205":"markdown","a31b7f7e":"markdown","c3d7b18a":"markdown","a40f0380":"markdown","28eba639":"markdown","9e0733ad":"markdown","ce0642e3":"markdown","a64480fa":"markdown","5ad1e489":"markdown","6c138283":"markdown","fc0dab7c":"markdown","6cb4dffe":"markdown"},"source":{"15f2d679":"import pandas as pd\nimport numpy as np\nimport matplotlib.cm\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport warnings\nimport plotly.graph_objs as go\nimport cufflinks\nfrom ast import literal_eval\nfrom sklearn.preprocessing import LabelEncoder\nfrom plotly import tools\nfrom plotly.offline import init_notebook_mode, iplot\n\nplt.style.use('ggplot')\n%matplotlib inline\npd.set_option('display.max_columns', 100)\nwarnings.filterwarnings('ignore')\ncufflinks.go_offline(connected=True)\ninit_notebook_mode(connected = True)","36cff410":"data = pd.read_csv('..\/input\/cars_ver2.csv', encoding = 'windows-1251')","dba5971f":"data.head(3)","5f8e35be":"# Making some changes in data\ndata['region'] = data['region'].str.replace(' \u043e\u0431\u043b\u0430\u0441\u0442\u044c', '')\ndata['body_type'] = data['body_type'].replace(['Passenger van (up to 1.5 tons)', 'SUV \/ Crossover'], ['Pass. van', 'SUV'])\n\n# Function to draw values on plots\ndef annot(ax, val):\n    '''Draws values on plot'''\n    for p, i in zip(ax.patches, val):\n        x=p.get_bbox().get_points()[:,0]\n        y=p.get_bbox().get_points()[1,1]\n        ax.annotate('{}'.format(i), (x.mean(), y), \n                ha='center', va='bottom')\n\n# Changing size of plots\nfig = plt.figure(figsize = (18, 8))\n\n# First plot\nplt.subplot(1, 2, 1)\nax = sns.countplot(y = 'region', data = data, order=data.region.value_counts().iloc[:15].index)\nplt.title('Adverts by region')\nval = data.region.value_counts().iloc[:15].values \nannot(ax, val)\n\n# Second plot\nplt.subplot(1, 2, 2)\nax2 = sns.countplot(y = 'city', data = data, order=data.city.value_counts().iloc[:15].index)\nplt.title('Adverts by city')\nval2 = data.city.value_counts().iloc[:15].values\nannot(ax2, val2)","1f3d4600":"# Preparing data for plots\nmark = data.mark.value_counts().iloc[:15]\nmodel = data.model.value_counts().iloc[:15]\nbody = data['body_type'].value_counts().sort_values(ascending = False)\ncolor = data['color'].value_counts().sort_values(ascending = False)\nfuel = data['fuel'].value_counts().sort_values(ascending = False)\ngear = data['gearbox'].value_counts().sort_values(ascending = False)\n\n# Making traces for each plot\ntrace1 = go.Bar(x = mark.index, y = mark.values)\ntrace2 = go.Bar(x = model.index, y = model.values)\ntrace3 = go.Bar(x = body.index, y = body.values)\ntrace4 = go.Bar(x = color.index, y = color.values)\ntrace5 = go.Bar(x = fuel.index, y = fuel.values)\ntrace6 = go.Bar(x = gear.index, y = gear.values)\n\n# Making subplots\nfig = tools.make_subplots(rows = 3, cols = 2, \n                          subplot_titles = ['Most frequent marks', 'Most frequent models',\n                                            'Types of cars', 'Colors',\n                                            'Types of fuel', 'Types of gearbox', ])\n\n# Appending traces to fig\nfig.append_trace(trace1, 1, 1)\nfig.append_trace(trace2, 1, 2)\nfig.append_trace(trace3, 2, 1)\nfig.append_trace(trace4, 2, 2)\nfig.append_trace(trace5, 3, 1)\nfig.append_trace(trace6, 3, 2)\n\n# Tuning layout\nfig['layout'].update(height = 1000, showlegend=False)\n\n# Show plot\niplot(fig)","f7e67798":"# Prepairing our data\nyear = data['year'].value_counts().sort_index()[1:]\nmile = data['mileage'].value_counts().sort_index()[1:]\n\n# Making traces\ntrace1 = go.Scatter(x = year.index, y = year.values)\ntrace2 = go.Scatter(x = mile.index, y = mile.values)\n\n# Setting subplots and titles\nfig = tools.make_subplots(rows = 1, cols = 2, subplot_titles = ['Distribution by year', 'Distribution by mileage'])\n\n# Appending traces\nfig.append_trace(trace1, 1, 1)\nfig.append_trace(trace2, 1, 2)\n\n# Remove legend\nfig['layout'].update(showlegend = False)\n\n# Show plot\niplot(fig)","cd4cfa38":"data['year'] = data['year'].replace(0, np.nan)\ndata.loc[(data['year'] <= 1950) | (data['year'] == 2020)].dropna(subset = ['year']).sort_values(by = 'year')","aabecde5":"data.drop(data.loc[(data['year'] == 1900) | (data['year'] == 2020) | (data['mileage'] > 500000) \n                  | (data['engine_vol'] > 5000)].index, inplace = True)","3a13504a":"sns.countplot(data['cleared'])","a3f3d494":"# Adding additional feature log_price\ndata['log_price'] = np.log1p(data['price'])\n\n# Determine columns which we want to plot\ncols = ['year', 'mileage', 'engine_vol', 'year', 'mileage', 'engine_vol']\n\n# Plotting them with cycle\nfig = plt.figure(figsize = (24, 12))\nfor i, j in enumerate(cols):\n    fig.add_subplot(2, 3, i+1) # We adding subplot on each step\n    plt.tight_layout() # This function makes our plots look better, adjusting distance between plots\n    if i <= 2:\n        sns.scatterplot(x = j, y = 'price', data = data)\n    else:\n        sns.regplot(x = j, y = 'log_price', data = data)","6d505c1b":"cols = ['body_type', 'body_type', 'fuel', 'fuel', 'gearbox', 'gearbox', 'cleared', 'cleared']\n\nfig = plt.figure(figsize = (15, 20))\nfor i, j in enumerate(cols):\n    fig.add_subplot(4, 2, i+1)\n    plt.tight_layout()\n    if i%2 == 0:\n        sns.boxplot(x = j, y = 'price', data = data)\n        if j == 'body_type':\n            plt.xticks(rotation=45)\n    else:\n        sns.boxplot(x = j, y = 'log_price', data = data)\n        if j == 'body_type':\n            plt.xticks(rotation=45)","b5e85ac3":"# Plotting mark feature\nmark1 = data[data['mark'].isin(data['mark'].unique()[:23])]\nmark2 = data[data['mark'].isin(data['mark'].unique()[23:])]\n\nfig = plt.figure(figsize = (15, 20))\nfor i, j in enumerate([mark1, mark2, mark1, mark2]):\n    fig.add_subplot(4, 1, i+1)\n    plt.tight_layout()\n    if i<2:\n        sns.boxplot(x = 'mark', y = 'price', data = j)\n        plt.xticks(rotation=45)\n    else:\n        sns.boxplot(x = 'mark', y = 'log_price', data = j)\n        plt.xticks(rotation=45)","f073f257":"cols = ['color', 'region', 'color', 'region']\nfig = plt.figure(figsize = (15, 20))\nfor i, j in enumerate(cols):\n    fig.add_subplot(4, 1, i+1)\n    plt.tight_layout()\n    if i<2:\n        sns.boxplot(x = j, y = 'price', data = data)\n        plt.xticks(rotation=45)\n    else:\n        sns.boxplot(x = j, y = 'log_price', data = data)\n        plt.xticks(rotation=45)","2f4335e7":"lists = ['condition', 'add_opt', 'multimedia', 'security', 'other']\n\n# I'll create DataFrame for these columns\ndf = data[lists]\n\n# Pandas loads lists from csv as string, so first we need to convert it to list\n# First fill nan\ndf = df.fillna('[\"XXX\"]')\n\n# Then use Literal_eval to convert strings to lists\nfor col in lists:\n    df[col] = pd.Series([literal_eval(i) for i in df[col].values])","93f3cc1b":"df.head()","2afe5574":"# Now we can look at unique values in columns\ndf['condition'].apply(pd.Series).stack().value_counts()","bbe0816c":"# And now we can start to create dummy variables from lists\ndef dummies(vals, target):\n    '''Creates dummy variables for vals'''\n    for val in vals:\n        df[val] = 0\n        df.loc[df[target].str.contains(val, regex = False), val] = 1        \n    df.drop(target, axis = 1, inplace = True)\n    \ndf = df.fillna('XXX')\n\n# Create vals for each column\ncond = df['condition'].apply(pd.Series).stack().value_counts().index.values\nadd = df['add_opt'].apply(pd.Series).stack().value_counts().index.values\nmult = df['multimedia'].apply(pd.Series).stack().value_counts().index.values\nsec = df['security'].apply(pd.Series).stack().value_counts().index.values\noth = df['other'].apply(pd.Series).stack().value_counts().index.values\n\n# Applying our function\ndummies(cond, 'condition')\ndummies(add, 'add_opt')\ndummies(mult, 'multimedia')\ndummies(sec, 'security')\ndummies(oth, 'other')\n\n# Check results\ndf.drop('XXX', axis = 1, inplace = True)\ndf.head()","adab0203":"# I'll also rename columns\ncols = ['gar_storage', 'no_accidents', 'unpainted', 'first_reg',\n       'service_book', 'first_owner', 'rep_required',\n       'not_on_the_run', 'after_accident', 'taken_on_credit',\n       'el_windows', 'power_steering', 'air_conditioning',\n       'computer', 'electro_package', 'heated_mirr',\n       'security_sys', 'climate_cntrl', 'mf_steering_wheel',\n       'cruise_control', 'heated_seats', 'parktronic', 'light_sensor',\n       'leather_int', 'rain_sensor', 'sunroof', 'headlights_wash',\n       'start_btn', 'heated_steer_wheel', 'cassete_player', 'cd', 'aux', 'usb',\n       'acoustics', 'bluetooth', 'gps', 'amplifier',\n       'subwoofer', 'central_lock', 'abs',\n       'airbag', 'alarm', 'esp',\n       'immobilizer', 'halogen_headlights', 'servo_steer_wheel', 'abd',\n       'lock_on_gearbox', 'air_susp', 'armored_car',\n       'toning', 'gas', 'hook',\n       'tuning', 'right_wheel']\n\ndf.columns = cols\nprint(df.shape)\ndf.head()","4e02b0a6":"# Now we can join our dataframes\ndata = data.join(df)\ndata.head(2)","e8154c45":"# And now we can make some plots to see, haow these features affects on price\nfig = plt.figure(figsize = (15, 30))\nfor i, col in enumerate(df.columns.values):\n    fig.add_subplot(11, 5, i+1)\n    plt.tight_layout()\n    sns.violinplot(x = col, y = 'price', data = data)","19489ae9":"corrmap = data.corr().sort_values(by = 'price', ascending = False)\ncorrmap['price'].head(15)","88f52463":"corrmap['price'].tail(15)","8727377d":"We can see interesting things here:\n- First we have some very old cars, 5 of them have been made in 1900!\n- Second - we have 2 cars from the future - 2020 year.\n\nLet's look at them:","a08f4205":"It's not surprise that Kiev has major part of adverts, it's center of Ukraine at all. It was surprising for me, that Donetsk region has such big values despite the occupation of this region by Russia.\n\nCount cars by mark, model, type of body, color, fuel and gearbox","a31b7f7e":"Reading our csv file. We should use 'windows-1251' encoding because there is a lot of cyrillic.","c3d7b18a":"On the next step I want to see which influence have these features on price of a car.","a40f0380":"We can see that most frequent mark is VAZ. It's quite obvious because they are cheap and a lot of people can afford such car. \nAmong models we can see something interesting - old Vaz 2101 is leading, but there are a lot of expensive cars such as Audi A6\/A4 and BMW 3 and 5 series.\nMost frequent body type - sedan.\nWe can also see most frequent colors of cars - white and black.\nIt's a pity that there are not much electrocars - petrol \/ diesel \/ gas engines still leading.\nAnd at last - mos of cars have mechanical gearbox.","28eba639":"Last feature that i want to count is 'cleared'. We can see that major par of cars is cleared.","9e0733ad":"What we can see here:\n - Year\/price gives us interesting information - we can see a clear border that looks like exponential function.\n - Mileage have negative correlation with price, it's quite obvious - than more mileage than lower price.\n - Engine volume gives us slightly less information - we can see, that cars with low engine volume have lower prices, and it rises until reaches 3000 cubic centimeters, after this value price is decreasing. (I can be wrong, but it reminds me y = -|x| graph)\n \nNext, let's see how other features affects on price:","ce0642e3":"When I worked as an appraiser, I often had to deal with cars, evaluate their cost and not only  based on data, presented on sites like Avito or Olx, and I still interested in this topic, so, in this kernel I want to take a quick look on this dataset and make basic analysis of data and what influence have this features on price of a car. \n\nI want to note a few points:\n- I'll not analyse time series in this kernel, I think there is not enoughh data for this type of analysis, but I'll return to it when I'll scrape more data.\n- Also I'll not looking for outliers and completing missing values using different approaches, this kernel is for basic analysis.\n\nOk, let's start.\nFirst - importing all necessary modules:","a64480fa":"Also we can see few cars with mileage more then 500k.\nI'll drop cars with 1900 in 'year' column because it obvious that there is a mistake. Also I'll drop 'cars from the future' and with mileage more than 500k.","5ad1e489":"On last step I want to look on correlations between features.","6c138283":"What a mess, but looking on all these plots we can see which features affects on price of a car. For example - we can see that SUVs and Cabriolets, hybrid and electro are more expensive than others types of cars. Cars with mechanical gearbox are cheaper than others and we can see that mark of a car has great influence on its price.\n\nNow lets try to analyse how additional options, installed on a car, affects on price.\nThere are columns - 'condition', 'add_opt', 'multimedia', 'security', 'other' - which contains lists with installed options. To analyze it, I will create dummy variables.\n\nNote: if anyone knows better way to do it, please write about it in comment (I tried pd.get_dummies and sklearn.preprocessing.MultiIndexBinarizer but had no success)","fc0dab7c":"Next let's look at distribution by the year:","6cb4dffe":"Let's start to extract information from dataset. Simple things first:\n\nNumber of adverts by region and city (because there is a lot of regions and cities, I'll only top 15 by number of adverts)"}}