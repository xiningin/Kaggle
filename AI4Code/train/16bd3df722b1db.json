{"cell_type":{"ac3d7e7c":"code","ef129432":"code","c5a8d866":"code","af517751":"code","96119bcf":"code","7a2122a3":"code","c1cd662f":"code","decc9fa6":"code","7532dd7f":"code","84f11041":"code","c91118ae":"code","f8ee3b62":"code","a1de0281":"code","42d816a7":"code","544574cc":"code","0402144a":"code","319fc4fd":"code","62290bde":"code","9783b0c7":"code","b6ed547e":"code","156263ea":"code","584bb8da":"code","0210b775":"code","0e749c98":"code","1d598e04":"code","7f18ef3e":"code","a03ee5bd":"code","548bcfb8":"code","bd374e6e":"code","dd133f10":"code","59c3c7f7":"code","4a056bfc":"code","254130b6":"markdown","8eda08eb":"markdown"},"source":{"ac3d7e7c":"#importing the necessary libraries\n\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\n%matplotlib inline\nimport seaborn as sns\nfrom sklearn.impute import SimpleImputer\nfrom sklearn.preprocessing import Imputer\nfrom sklearn.preprocessing import LabelEncoder\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.model_selection import train_test_split\nfrom sklearn import metrics\nfrom sklearn.metrics import accuracy_score\nimport statsmodels.api as sm\nimport warnings\nwarnings.filterwarnings('ignore')","ef129432":"#reading the datasets into dataframes\n\ndf_train = pd.read_csv(\"..\/input\/titanic\/train.csv\")\ndf_test = pd.read_csv(\"..\/input\/titanic\/test.csv\")","c5a8d866":"df_train.head(10)","af517751":"df_train.describe()","96119bcf":"df_train.isnull().sum()*100\/len(df_train)","7a2122a3":"#imputing median for missing 'Age' values\n\nmed_imputer = Imputer(missing_values='NaN', strategy='most_frequent', axis=0)\ndf_train['Age'] = med_imputer.fit_transform(df_train[['Age']])","c1cd662f":"#mapping age values to categories\n\ndef age_map(x):\n    if(x <= 12):\n        return \"Kid\"\n    elif(x >= 13 and x <= 19):\n        return \"Teen\"\n    elif(x >= 19 and x < 70):\n        return \"Adult\"\n    else:\n        return \"Senior\"\ndf_train['Age'] = df_train['Age'].apply(lambda x: age_map(x))","decc9fa6":"#processing 'Cabin' and 'Embarked' columns\n\ndf_train['Cabin'].fillna('U', inplace=True)\ndf_train['Cabin'] = df_train['Cabin'].apply(lambda x: x[0])\n\ndf_train['Embarked'].fillna('S', inplace=True)","7532dd7f":"#converting 'Fare' values to categorical\n\ndf_train['Fare'] = pd.cut(df_train['Fare'], bins=[-1, 7, 11, 15, 22, 40, 520], labels=[1, 2, 3, 4, 5, 6])","84f11041":"df_train.drop(['Ticket', 'Name'], axis=1, inplace=True)","c91118ae":"df_train.head()","f8ee3b62":"fig, ax = plt.subplots(1,2,figsize=(10,5))\nsns.countplot(df_train['Age'], data=df_train, ax=ax[0])\nsns.countplot(df_train['Age'], hue='Survived', data=df_train, ax=ax[1])\nax[0].title.set_text(\"Frequency of each age group\")\nax[1].title.set_text(\"Survived: Age Group\")","a1de0281":"fig, ax = plt.subplots(1,2, figsize=(10,5))\nsns.countplot(df_train['Sex'], data=df_train, ax=ax[0])\nsns.countplot(df_train['Sex'], hue='Survived', data=df_train, ax=ax[1])\nax[0].title.set_text(\"Frequency: Sex\")\nax[1].title.set_text(\"Survived: Sex\")","42d816a7":"fig, ax = plt.subplots(1,2, figsize=(10,5))\nsns.countplot(df_train['Pclass'], data=df_train, ax=ax[0])\nsns.countplot(df_train['Pclass'], hue='Survived', data=df_train, ax=ax[1])\nax[0].title.set_text(\"Frequency: Pclass\")\nax[1].title.set_text(\"Survived: Pclass\")","544574cc":"fig, ax = plt.subplots(1,2, figsize=(10,5))\nsns.countplot(df_train['SibSp'], data=df_train, ax=ax[0])\nsns.countplot(df_train['SibSp'], hue='Survived', data=df_train, ax=ax[1])\nax[0].title.set_text(\"Frequency: SibSp\")\nax[1].title.set_text(\"Survived: SibSp\")","0402144a":"fig, ax = plt.subplots(1,2, figsize=(10,5))\nsns.countplot(df_train['Embarked'], data=df_train, ax=ax[0])\nsns.countplot(df_train['Embarked'], hue='Survived', data=df_train, ax=ax[1])\nax[0].title.set_text(\"Frequency: Embarked\")\nax[1].title.set_text(\"Survived: Embarked\")\n","319fc4fd":"fig, ax = plt.subplots(1,2, figsize=(10,5))\nsns.countplot(df_train['Parch'], data=df_train, ax=ax[0])\nsns.countplot(df_train['Parch'], hue='Survived', data=df_train, ax=ax[1])\nax[0].title.set_text(\"Frequency: Parch\")\nax[1].title.set_text(\"Survived: Parch\")","62290bde":"fig, ax = plt.subplots(1,2, figsize=(10,5))\nsns.countplot(df_train['Cabin'], data=df_train, ax=ax[0])\nsns.countplot(df_train['Cabin'], hue='Survived', data=df_train, ax=ax[1])\nax[0].title.set_text(\"Frequency: Cabin\")\nax[1].title.set_text(\"Survived: Cabin\")","9783b0c7":"#LabelEncoder\nLE = LabelEncoder()\n\n#label encoding the remaining categorical and continous variables\ndf_train['Sex'] = LE.fit_transform(df_train['Sex'])\ndf_train['Cabin'] = LE.fit_transform(df_train['Cabin'])\ndf_train['Embarked'] = LE.fit_transform(df_train['Embarked'])\ndf_train['Age'] = LE.fit_transform(df_train['Age'])","b6ed547e":"#plotting a heatmap of the train set\n\nplt.figure(figsize=(10,10))\nsns.heatmap(df_train.corr(), xticklabels = df_train.columns.values, yticklabels = df_train.columns.values, annot=True, cmap=\"YlGnBu\")","156263ea":"df_train.head(10)","584bb8da":"#sorting PassendgerId in ascending order\ndf_train.sort_values(by=['PassengerId'], inplace=True)","0210b775":"#Splitting the train set into dependent and independent variables\ny = df_train['Survived']\nX = df_train.drop('Survived', axis = 1)\n\n#converting 'Fare' values to int64 type\nX['Fare'] = X['Fare'].astype('int64')","0e749c98":"#train-test split\n\nX_train, X_valid, y_train, y_valid = train_test_split(X, y, train_size = 0.65, test_size = 0.35, random_state=100 )","1d598e04":"#creating a RandomForestClassifier object and generate the model\nmodel = RandomForestClassifier(n_estimators=100)\n\n# Fit on training data\nmodel.fit(X_train, y_train)","7f18ef3e":"#making predictions on validation set\ny_preds = model.predict(X_valid)","a03ee5bd":"df_test.head()","548bcfb8":"#imputing missing values in 'Age' with the median\nage_imputer = Imputer(missing_values='NaN', strategy='most_frequent', axis=0)\ndf_test['Age'] = age_imputer.fit_transform(df_test[['Age']])\n\n#converting age values to categorical values\ndf_test['Age'] = df_test['Age'].apply(lambda x: age_map(x))\n\n#processing Cabin and Embarked columns\ndf_test['Cabin'].fillna('U', inplace=True)\ndf_test['Cabin'] = df_test['Cabin'].apply(lambda x: x[0])\n\ndf_test['Embarked'].fillna('S', inplace=True)\n\n#imputing missing values in 'Fare' with the mean\nfare_imputer = Imputer(missing_values='NaN', strategy='mean', axis=0)\ndf_test['Fare'] = fare_imputer.fit_transform(df_test[['Fare']])\n\n#converting 'Fare' values to categorical\ndf_test['Fare'] = pd.cut(df_test['Fare'], bins=[-1, 7, 11, 15, 22, 40, 520], labels=[1, 2, 3, 4, 5, 6])\n\n#label encoding the remaining categorical and continous variables\ndf_test['Sex'] = LE.fit_transform(df_test['Sex'])\ndf_test['Cabin'] = LE.fit_transform(df_test['Cabin'])\ndf_test['Embarked'] = LE.fit_transform(df_test['Embarked'])\ndf_test['Age'] = LE.fit_transform(df_test['Age'])\n\n\n#converting 'Fare' values to int64 type\ndf_test['Fare'] = df_test['Fare'].astype('int64')\n\n#dropping Name and Ticket columns from the test set\ndf_test.drop(['Name','Ticket'], axis=1, inplace=True)","bd374e6e":"df_test.head()","dd133f10":"#sorting PassendgerId in ascending order\ndf_test.sort_values(by=['PassengerId'], inplace=True)","59c3c7f7":"#making predictions on the test set\ny_test_pred = model.predict(df_test)","4a056bfc":"#write to output file\noutput = pd.DataFrame({'PassengerId': df_test['PassengerId'], 'Survived': y_test_pred})\noutput.to_csv(\"submission.csv\", index=False)","254130b6":"![titanic.JPG](attachment:titanic.JPG)\nSource: Dreamstime","8eda08eb":"Most survivors were from the 1st class, followed by 3rd and lastly 2nd class."}}