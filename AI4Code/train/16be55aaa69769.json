{"cell_type":{"a8f1e577":"code","9a6e2fab":"code","e972a2c4":"code","04c45374":"code","b609c86e":"code","c71b64fe":"code","fd21f6ae":"code","037ec032":"code","76663082":"code","18c9af6d":"code","7080065f":"code","6fc5dd4f":"code","a63e5337":"code","f8986d79":"code","cb2f32dd":"code","c138d124":"code","efd77a83":"code","b3c5cc3d":"code","66edbaad":"code","d685f629":"code","c7ef8b93":"code","6d08a4d6":"code","0a114c91":"code","30a74b07":"code","78d52f36":"code","e78a4247":"code","d78a6c88":"code","0f25da8d":"code","f6dc9b15":"code","dab9471d":"code","32693d53":"code","5bc7dbd4":"code","e0e70a17":"code","ac7e13a2":"code","44052399":"code","824277b8":"code","e364132a":"code","1699a63b":"code","5272f50d":"code","0ab26f25":"code","baf8ce46":"markdown","eed298c0":"markdown","8300e205":"markdown","1432050c":"markdown","b3bfa341":"markdown","fa165f36":"markdown","a707149a":"markdown","0d10e205":"markdown","9481bda2":"markdown","dd849b3e":"markdown"},"source":{"a8f1e577":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","9a6e2fab":"!pip install xlrd\n!pip install openpyxl ","e972a2c4":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.metrics import classification_report\nfrom sklearn.model_selection import cross_val_score\nfrom xgboost import XGBClassifier\nimport warnings\nwarnings.filterwarnings(action='ignore') \nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.svm import SVC\nfrom sklearn.ensemble import RandomForestClassifier,AdaBoostClassifier,BaggingClassifier,ExtraTreesClassifier\nfrom sklearn.decomposition import PCA\nfrom sklearn.model_selection import GridSearchCV\nfrom sklearn.preprocessing import MinMaxScaler\nfrom sklearn.metrics import accuracy_score\nfrom sklearn.preprocessing import LabelEncoder\nle=LabelEncoder()\nimport warnings\nwarnings.filterwarnings('ignore')","04c45374":"train=pd.read_excel('\/kaggle\/input\/predicting-food-delivery-time\/Participants Data\/Data_Train.xlsx')\ntest=pd.read_excel('\/kaggle\/input\/predicting-food-delivery-time\/Participants Data\/Data_Test.xlsx')\nsample=pd.read_excel('\/kaggle\/input\/predicting-food-delivery-time\/Participants Data\/Sample_Submission.xlsx')\n","b609c86e":"# Train data preprocessing(Referring to Sabin Hashmi code for data preprocessing, I would like to thank Sabin Hashmi.)\ntrain['Restaurant']=le.fit_transform(train['Restaurant'])\ntrain['Minimum_Order']=pd.to_numeric(train['Minimum_Order'].str.replace('\u20b9',' '))\ntrain['Average_Cost']=pd.to_numeric(train['Average_Cost'].str.replace('[^0-9]',''))\ntrain['Rating']=pd.to_numeric(train['Rating'].apply(lambda x : np.nan if x in ['Temporarily Closed','Opening Soon','-','NEW'] else x))\ntrain['Votes']=pd.to_numeric(train['Votes'].apply(lambda x : np.nan if x=='-' else x))\ntrain['Reviews']=pd.to_numeric(train['Reviews'].apply(lambda x : np.nan if x=='-' else x))\ntrain['Delivery_Time']=pd.to_numeric(train['Delivery_Time'].str.replace('[^0-9]',''))","c71b64fe":"# Test data preprocessing\ntest['Restaurant']=le.fit_transform(test['Restaurant'])\ntest['Minimum_Order']=pd.to_numeric(test['Minimum_Order'].str.replace('\u20b9',' '))\ntest['Average_Cost']=pd.to_numeric(test['Average_Cost'].str.replace('[^0-9]',''))\ntest['Rating']=pd.to_numeric(test['Rating'].apply(lambda x : np.nan if x in ['Temporarily Closed','Opening Soon','-','NEW'] else x))\ntest['Votes']=pd.to_numeric(test['Votes'].apply(lambda x : np.nan if x=='-' else x))\ntest['Reviews']=pd.to_numeric(test['Reviews'].apply(lambda x : np.nan if x=='-' else x))\ntest['Rating']=test['Rating'].fillna(test['Rating'].median())\ntest['Votes']=test['Votes'].fillna(test['Votes'].mode()[0])\ntest['Reviews']=test['Reviews'].fillna(test['Reviews'].median())\ntest['Average_Cost']=test['Average_Cost'].fillna(test['Average_Cost'].mean())\nsample['Delivery_Time'] = sample['Delivery_Time'].str.replace(' minutes','').astype('int64')","fd21f6ae":"# train location data one hot encoding\nfor i in range(len(train)):\n    train['Location'][i] = train['Location'][i].split(',')\n    train['Location'][i] = [line.strip() for line in train['Location'][i]]\n\ntrain_location_df = pd.DataFrame()\n\nfor n in range(len(train)):\n    location = train['Location'][n]\n    location_df = pd.DataFrame()\n    for i in location:\n        location_df[i] = [1]\n        \n    train_location_df = pd.concat([train_location_df, location_df], ignore_index=True)\n\ntrain_location_df.rename(columns ={\"\" : 'None'}, inplace = True )\ntrain_location_df.head()","037ec032":"# train cuisines data one hot encoding\nfor i in range(len(train)):\n    train['Cuisines'][i] = train['Cuisines'][i].split(',')\n    train['Cuisines'][i] = [line.strip() for line in train['Cuisines'][i]]\n\ntrain_cuisines_df = pd.DataFrame()\n\nfor n in range(len(train)):\n    cuisines = train['Cuisines'][n]\n    cuisines_df = pd.DataFrame()\n    for i in cuisines:\n        cuisines_df[i] = [1]\n        \n    train_cuisines_df = pd.concat([train_cuisines_df, cuisines_df], ignore_index=True)\n\ntrain_cuisines_df.rename(columns ={\"\" : 'None'}, inplace = True )\ntrain_cuisines_df.head()","76663082":"# test location data one hot encoding\nfor i in range(len(test)):\n    test['Location'][i] = test['Location'][i].split(',')\n    test['Location'][i] = [line.strip() for line in test['Location'][i]]\n\ntest_location_df = pd.DataFrame()\n\nfor n in range(len(test)):\n    location = test['Location'][n]\n    location_df = pd.DataFrame()\n    for i in location:\n        location_df[i] = [1]\n        \n    test_location_df = pd.concat([test_location_df, location_df], ignore_index=True)\n\ntest_location_df.rename(columns ={\"\" : 'None'}, inplace = True )\ntest_location_df.head()","18c9af6d":"# test cuisines data one hot encoding\n\nfor i in range(len(test)):\n    test['Cuisines'][i] = test['Cuisines'][i].split(',')\n    test['Cuisines'][i] = [line.strip() for line in test['Cuisines'][i]]\ntest_cuisines_df = pd.DataFrame()\n\nfor n in range(len(test)):\n    cuisines = test['Cuisines'][n]\n    cuisines_df = pd.DataFrame()\n    for i in cuisines:\n        cuisines_df[i] = [1]\n        \n    test_cuisines_df = pd.concat([test_cuisines_df, cuisines_df], ignore_index=True)\n    \ntest_cuisines_df.rename(columns ={\"\" : 'None'}, inplace = True )\ntest_cuisines_df.head()   ","7080065f":"# Fill columns without each other\nnumber = 0\nls=[]\nfor i in train_cuisines_df.columns:\n    ls.append(i)\n    ls[number].replace(' ','')\n    number = number+1\n    \nnumber = 0\nls2=[]\nfor i in test_cuisines_df.columns:\n    ls2.append(i)\n    ls2[number].replace(' ','')\n    number = number +1\n    \ncomplement = list(set(ls) - set(ls2))\ncomplement2 = list(set(ls2) - set(ls))\n\nfor i in complement2:\n    train_cuisines_df[i] = np.nan\ntrain_cuisines_df.rename(columns ={\"\" : 'None'}, inplace = True )\ntrain_cuisines_df.head()   \n\nfor i in complement:\n    test_cuisines_df[i] = np.nan\ntest_cuisines_df.rename(columns ={\"\" : 'None'}, inplace = True )\ntest_cuisines_df.head()","6fc5dd4f":"# Normalize and fill in missing values\ntrain_02=train.copy()\ndel train_02['Cuisines']\ndel train_02['Location']\ntrain_02=train_02.drop('Delivery_Time',axis=1)\nscaler=MinMaxScaler()\nX_scaled_d = scaler.fit_transform(train_02)\nX_scaled = pd.DataFrame(X_scaled_d, index=train_02.index, columns=train_02.columns)\nX_scaled = X_scaled[['Restaurant']]\ntrain_02 = pd.merge(X_scaled,train_location_df, left_index =True, right_index =True, how= 'left')\ntrain_02 = pd.merge(train_02,train_cuisines_df, left_index =True, right_index =True, how= 'left')\ntrain_02 = train_02.fillna(0)\nx=train_02\ny=train['Delivery_Time']","a63e5337":"X_train,X_test,y_train,y_test=train_test_split(x,y,test_size=0.3,random_state=50)","f8986d79":"model_lr = LogisticRegression()\nmodel_lr.fit(X_train, y_train)\nscores = cross_val_score(model_lr, X_train,y_train, cv=10) # model, train, target, cross validation\nprint('cross-val-score \\n{}'.format(scores))\nprint('cross-val-score.mean \\n{:.3f}'.format(scores.mean()))","cb2f32dd":"pred = model_lr.predict(X_test)\nprint(\"Test Accuracy: {}%\".format(round(model_lr.score(X_test, y_test)*100, 2)))\nprint(classification_report(y_test, pred))","c138d124":"model_coef = pd.DataFrame(data=model_lr.coef_[0][:20], index=x.columns[:20], columns=['Model Coefficient'])\nmodel_coef.sort_values(by='Model Coefficient', ascending=False, inplace=True)\nplt.bar(model_coef.index, model_coef['Model Coefficient'])\nplt.xticks(rotation=90)\nplt.grid()\nplt.show()","efd77a83":"model_xgb = XGBClassifier()\ntrain_X = X_train.values\nmodel_xgb.fit(train_X, y_train)\nscores = cross_val_score(model_xgb, train_X,y_train, cv=10) # model, train, target, cross validation\nprint('cross-val-score \\n{}'.format(scores))\nprint('cross-val-score.mean \\n{:.3f}'.format(scores.mean()))","b3c5cc3d":"test_X = X_test.values\npred = model_xgb.predict(test_X)\nprint(\"Test Accuracy: {}%\".format(round(model_xgb.score(test_X, y_test)*100, 2)))\n\nprint(classification_report(y_test, pred))","66edbaad":"fig = plt.figure(figsize=(10, 10))\n\nmodel_coef = pd.DataFrame(data=model_xgb.feature_importances_, index=x.columns, columns=['Model Coefficient'])\nmodel_coef.sort_values(by='Model Coefficient', ascending=False, inplace=True)\nplt.barh(model_coef.index[:30], model_coef['Model Coefficient'][:30])\nplt.xticks(rotation=90)\nplt.grid()\nplt.show()","d685f629":"dt = DecisionTreeClassifier()\ndt.fit(X_train, y_train)\nscores = cross_val_score(dt, X_train,y_train, cv=10) # model, train, target, cross validation\nprint('cross-val-score \\n{}'.format(scores))\nprint('cross-val-score.mean \\n{:.3f}'.format(scores.mean()))","c7ef8b93":"pred = dt.predict(X_test)\nprint(\"Test Accuracy: {}%\".format(round(dt.score(X_test, y_test)*100, 2)))\nprint(classification_report(y_test, pred))","6d08a4d6":"fig = plt.figure(figsize=(10, 10))\n\nmodel_coef = pd.DataFrame(data=dt.feature_importances_, index=x.columns, columns=['Model Coefficient'])\nmodel_coef.sort_values(by='Model Coefficient', ascending=False, inplace=True)\nplt.barh(model_coef.index[:30], model_coef['Model Coefficient'][:30])\nplt.xticks(rotation=90)\nplt.grid()\nplt.show()","0a114c91":"best_Kvalue = 0\nbest_score = 0\nfor i in range(2,15):\n    knn = KNeighborsClassifier(n_neighbors=i)\n    knn.fit(X_train, y_train)\n    pred = knn.predict(X_test)\n    score = round(knn.score(X_test, y_test)*100,2)\n#     print(f\"Test Accuracy: {score}%, knn number {i}\")\n    if score > best_score:\n        \n        best_score = round(score)\n        best_Kvalue = i\n        \nprint(f\"Best KNN Value: {best_Kvalue}\")\nprint(f\"Test Accuracy: {best_score}%\")","30a74b07":"knn = KNeighborsClassifier(n_neighbors=best_Kvalue)\nknn.fit(X_train, y_train)\npred = knn.predict(X_test)\nprint(\"KNN Classifier report: \\n\\n\", classification_report(y_test, pred))","78d52f36":"svm = SVC(random_state=42, gamma=\"auto\")\nsvm.fit(X_train, y_train)\nscores = cross_val_score(svm, X_train,y_train, cv=10) \nprint('cross-val-score \\n{}'.format(scores))\nprint('cross-val-score.mean \\n{:.3f}'.format(scores.mean()))\n","e78a4247":"pred = svm.predict(X_test)\nprint(\"Test Accuracy: {}%\".format(round(svm.score(X_test, y_test)*100, 2)))\nprint(\"SVM Classifier report: \\n\\n\", classification_report(y_test, pred))","d78a6c88":"rf = RandomForestClassifier(n_estimators=100, random_state=42)\nrf.fit(X_train, y_train)\nscores = cross_val_score(rf, X_train,y_train, cv=10) \nprint('cross-val-score \\n{}'.format(scores))\nprint('cross-val-score.mean \\n{:.3f}'.format(scores.mean()))\n","0f25da8d":"ypred = rf.predict(X_test)\nprint(\"Test Accuracy: {}%\".format(round(rf.score(X_test, y_test)*100, 2)))\nprint(\"Random Forest Classifier report: \\n\\n\", classification_report(y_test, ypred))","f6dc9b15":"fig = plt.figure(figsize=(10, 10))\n\nmodel_coef = pd.DataFrame(data=rf.feature_importances_, index=x.columns, columns=['Model Coefficient'])\nmodel_coef.sort_values(by='Model Coefficient', ascending=False, inplace=True)\nplt.barh(model_coef.index[:30], model_coef['Model Coefficient'][:30])\nplt.xticks(rotation=90)\nplt.grid()\nplt.show()","dab9471d":"ada=AdaBoostClassifier()\nada.fit(X_train, y_train)\nscores = cross_val_score(ada, X_train,y_train, cv=10) \nprint('cross-val-score \\n{}'.format(scores))\nprint('cross-val-score.mean \\n{:.3f}'.format(scores.mean()))","32693d53":"ypred = ada.predict(X_test)\nprint(\"Test Accuracy: {}%\".format(round(ada.score(X_test, y_test)*100, 2)))\nprint(\"Random Forest Classifier report: \\n\\n\", classification_report(y_test, ypred))","5bc7dbd4":"fig = plt.figure(figsize=(10, 10))\n\nmodel_coef = pd.DataFrame(data=ada.feature_importances_, index=x.columns, columns=['Model Coefficient'])\nmodel_coef.sort_values(by='Model Coefficient', ascending=False, inplace=True)\nplt.barh(model_coef.index[:30], model_coef['Model Coefficient'][:30])\nplt.xticks(rotation=90)\nplt.grid()\nplt.show()","e0e70a17":"bag=BaggingClassifier()\nbag.fit(X_train, y_train)\nscores = cross_val_score(bag, X_train,y_train, cv=10) \nprint('cross-val-score \\n{}'.format(scores))\nprint('cross-val-score.mean \\n{:.3f}'.format(scores.mean()))\n","ac7e13a2":"ypred = bag.predict(X_test)\nprint(\"Test Accuracy: {}%\".format(round(bag.score(X_test, y_test)*100, 2)))\nprint(\"Random Forest Classifier report: \\n\\n\", classification_report(y_test, ypred))","44052399":"xtree=ExtraTreesClassifier()\nxtree.fit(X_train, y_train)\nscores = cross_val_score(xtree, X_train,y_train, cv=10) \nprint('cross-val-score \\n{}'.format(scores))\nprint('cross-val-score.mean \\n{:.3f}'.format(scores.mean()))\n","824277b8":"ypred = xtree.predict(X_test)\nprint(\"Test Accuracy: {}%\".format(round(xtree.score(X_test, y_test)*100, 2)))\nprint(\"Random Forest Classifier report: \\n\\n\", classification_report(y_test, ypred))","e364132a":"fig = plt.figure(figsize=(10, 10))\n\nmodel_coef = pd.DataFrame(data=xtree.feature_importances_, index=x.columns, columns=['Model Coefficient'])\nmodel_coef.sort_values(by='Model Coefficient', ascending=False, inplace=True)\nplt.barh(model_coef.index[:30], model_coef['Model Coefficient'][:30])\nplt.xticks(rotation=90)\nplt.grid()\nplt.show()","1699a63b":"test_02=test.copy()\ndel test_02['Cuisines']\ndel test_02['Location']\nscaler=MinMaxScaler()\nX_scaled_d = scaler.fit_transform(test_02)\nX_scaled = pd.DataFrame(X_scaled_d, index=test_02.index, columns=test_02.columns)\nX_scaled = X_scaled[['Restaurant']]\ntest_02 = pd.merge(X_scaled,test_location_df, left_index =True, right_index =True, how= 'left')\ntest_02 = pd.merge(test_02,test_cuisines_df, left_index =True, right_index =True, how= 'left')\n\ntest_02 = test_02.fillna(0)\n\nx=test_02\n","5272f50d":"test_predict = rf.predict(x)\ntest_pd =pd.DataFrame(rf.predict(x))\nprint(test_pd[0].value_counts())\nprint(accuracy_score(sample['Delivery_Time'],test_predict))\n","0ab26f25":"#xgb test\nx_values = x.values\ntest_predict = model_xgb.predict(x_values)\ntest_pd =pd.DataFrame(model_xgb.predict(x_values))\nprint(test_pd[0].value_counts())\nprint(accuracy_score(sample['Delivery_Time'],test_predict))","baf8ce46":"# KNN","eed298c0":"# TEST","8300e205":"# AdaBoostClassifier","1432050c":"#  LogisticRegression ","b3bfa341":"# RandomForestClassifier","fa165f36":"# BaggingClassifier","a707149a":"# XGBClassifier","0d10e205":"# DecisionTreeClassifier","9481bda2":"# SVM","dd849b3e":"# ExtraTreesClassifier"}}