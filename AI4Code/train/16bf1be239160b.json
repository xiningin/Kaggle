{"cell_type":{"2ad5bd59":"code","ce6ff12f":"code","64ac0cec":"code","04cd4c0c":"code","f6f56db8":"code","41987319":"code","c3280c02":"code","e931cd1a":"code","49c3c2e0":"code","b0b15ddf":"code","3baeabf2":"code","7c9dfc85":"code","ef1461f2":"code","8d27c79a":"code","ea66cb7f":"code","5f1ab6ed":"code","065411a0":"code","05865957":"code","760af933":"code","1be4dd09":"code","ca18dda8":"code","0d854858":"code","d2721ff3":"code","781ede09":"code","b6f14921":"code","bc352dc9":"code","30a1b11b":"code","27abc2e8":"code","4f709a4e":"markdown"},"source":{"2ad5bd59":"import os\nos.listdir('..\/input\/brain-tumor-classification-mri\/Training')","ce6ff12f":"loc0 = '..\/input\/brain-tumor-classification-mri\/Training\/no_tumor'\nloc1 = '..\/input\/brain-tumor-classification-mri\/Training\/pituitary_tumor'\nloc2 = '..\/input\/brain-tumor-classification-mri\/Training\/meningioma_tumor'\nloc3 = '..\/input\/brain-tumor-classification-mri\/Training\/glioma_tumor'","64ac0cec":"#Extract the features of Image data\n\nimport cv2\nfrom tqdm import tqdm\nfeatures = []\n\nfor img in tqdm(os.listdir(loc0)):\n    f = cv2.imread(os.path.join(loc0,img))\n    fr = cv2.resize(f,(70,70))\n    features.append(fr)\n    \nfor img in tqdm(os.listdir(loc1)):\n    f = cv2.imread(os.path.join(loc1,img))\n    fr = cv2.resize(f,(70,70))\n    features.append(fr)\n    \nfor img in tqdm(os.listdir(loc2)):\n    f = cv2.imread(os.path.join(loc2,img))\n    fr = cv2.resize(f,(70,70))\n    features.append(fr)\n    \nfor img in tqdm(os.listdir(loc3)):\n    f = cv2.imread(os.path.join(loc3,img))\n    fr = cv2.resize(f,(70,70))\n    features.append(fr)","04cd4c0c":"#Define Label Matrix\nlabels = []\nfor img in tqdm(os.listdir(loc0)):\n    labels.append(0)\n    \nfor img in tqdm(os.listdir(loc1)):\n    labels.append(1)\n    \nfor img in tqdm(os.listdir(loc2)):\n    labels.append(2)\n    \nfor img in tqdm(os.listdir(loc3)):\n    labels.append(3)","f6f56db8":"#Features and Labels Numpy array\nimport numpy as np\nX = np.array(features)\nY = np.array(labels)","41987319":"print(X.shape[1:])\nprint(Y.shape)","c3280c02":"#Import libraries needed for CNN architecture\n\nimport keras\nfrom keras.models import Sequential\nfrom keras.utils import np_utils\nfrom keras.layers import Dense,Dropout,Activation,Flatten,BatchNormalization\nfrom keras.layers import Conv2D,MaxPooling2D\nfrom keras import regularizers","e931cd1a":"#Define a CNN model to make predictions\nweight_decay = 1e-4\nmodel = Sequential()\n\n#1st Convolutional Layer\nmodel.add(Conv2D(32,(3,3),padding='same',kernel_regularizer=regularizers.l2(weight_decay) ,input_shape=X.shape[1:]))\nmodel.add(Activation('relu'))\nmodel.add(BatchNormalization())\nmodel.add(MaxPooling2D(pool_size=(2,2)))\nmodel.add(Dropout(0.4))\n\n#2nd Convolutional Layer\nmodel.add(Conv2D(64,(3,3), kernel_regularizer=regularizers.l2(weight_decay) , padding='same'))\nmodel.add(Activation('relu'))\nmodel.add(BatchNormalization())\nmodel.add(MaxPooling2D(pool_size=(2,2)))\nmodel.add(Dropout(0.3))\n\n#3rd Convolutional Layer\nmodel.add(Conv2D(128,(3,3), kernel_regularizer=regularizers.l2(weight_decay) , padding='same'))\nmodel.add(Activation('relu'))\nmodel.add(BatchNormalization())\nmodel.add(MaxPooling2D(pool_size=(2,2)))\nmodel.add(Dropout(0.4))\n\n#4th Convolutional Layer\nmodel.add(Conv2D(256,(3,3), kernel_regularizer=regularizers.l2(weight_decay) , padding='same'))\nmodel.add(Activation('relu'))\nmodel.add(BatchNormalization())\nmodel.add(MaxPooling2D(pool_size=(2,2)))\nmodel.add(Dropout(0.3))\n\n#5th Convolutional Layer\nmodel.add(Conv2D(512,(3,3), kernel_regularizer=regularizers.l2(weight_decay) , padding='same'))\nmodel.add(Activation('relu'))\nmodel.add(BatchNormalization())\nmodel.add(MaxPooling2D(pool_size=(2,2)))\nmodel.add(Dropout(0.4))\n\n#6th Convolutional Layer\nmodel.add(Conv2D(1024,(3,3), kernel_regularizer=regularizers.l2(weight_decay) , padding='same'))\nmodel.add(Activation('relu'))\nmodel.add(BatchNormalization())\nmodel.add(MaxPooling2D(pool_size=(2,2)))\nmodel.add(Dropout(0.3))\n\n#Fully connected layer\nmodel.add(Flatten())\nmodel.add(Dense(32,activation='relu'))\nmodel.add(Dropout(0.4))\nmodel.add(Dense(4,activation='softmax'))","49c3c2e0":"model.summary()","b0b15ddf":"#Compile your model\n\nfrom keras import optimizers\nfrom keras import metrics\n\nsgd = optimizers.SGD(0.1)\n\nmodel.compile(optimizer=sgd,\n             loss = 'binary_crossentropy',\n             metrics=['accuracy'])","3baeabf2":"#Divide the data into training and testing sets\n#normalise the input data value\n#One - hot encoding of labels\n#fit the features and labels into model to train","7c9dfc85":"#Train and test split of Data\n\nfrom sklearn.model_selection import train_test_split\nxtrain,xtest,ytrain,ytest = train_test_split(X,Y,train_size=0.8)","ef1461f2":"#Normalisation of Data\n\nxtrain_n = xtrain\/xtrain.max()\nxtest_n = xtest\/xtest.max()","8d27c79a":"#One hot encoding of output values\n\nytrain_h = np_utils.to_categorical(ytrain)\nytest_h = np_utils.to_categorical(ytest)","ea66cb7f":"model.fit(xtrain_n,ytrain_h,\n         epochs=100,\n         validation_data=(xtest_n,ytest_h))","5f1ab6ed":"model.evaluate(xtrain_n,ytrain_h)","065411a0":"model.evaluate(xtest_n,ytest_h)","05865957":"ytest_pred = []\npreds = model.predict(xtest_n)\nfor p in preds:\n    ytest_pred.append(np.argmax(p))","760af933":"from sklearn.metrics import confusion_matrix\nconfusion_matrix(ytest,ytest_pred)","1be4dd09":"xtrain_n.shape","ca18dda8":"xtest_n[90].shape","0d854858":"predictions = ['no_tumor', 'pituitary_tumor', 'meningioma_tumor', 'glioma_tumor']","d2721ff3":"print('Predictions',predictions[np.argmax(model.predict(xtest_n[91].reshape(1,70,70,3)))])\nprint('Actual',predictions[ytest[91]])\n\n\nimport matplotlib.pyplot as plt\nplt.imshow(xtest_n[90])\nplt.show()","781ede09":"model.save('brain.h5')","b6f14921":"!pip install tflearn","bc352dc9":"import tflearn\nfrom tflearn.layers.conv import conv_2d,max_pool_2d\nfrom tflearn.layers.core import input_data,dropout,fully_connected\nfrom tflearn.layers.estimator import regression","30a1b11b":"cnet = input_data(shape = [None,70,70,3],name='input')\n\ncnet = conv_2d(cnet,32,3,activation='relu')\ncnet = max_pool_2d(cnet,2)\n\ncnet = conv_2d(cnet,64,3,activation='relu')\ncnet = max_pool_2d(cnet,2)\n\ncnet = conv_2d(cnet,128,3,activation='relu')\ncnet = max_pool_2d(cnet,2)\n\ncnet = conv_2d(cnet,256,3,activation='relu')\ncnet = max_pool_2d(cnet,2)\n\ncnet = conv_2d(cnet,512,3,activation='relu')\ncnet = max_pool_2d(cnet,2)\n\ncnet = fully_connected(cnet,1024,activation='relu')\ncnet = dropout(cnet,0.6)\n\ncnet = fully_connected(cnet,4,activation='softmax')\ncnet = regression(cnet,optimizer='sgd',learning_rate=0.1,\n                  loss='binary_crossentropy',name='target')\n\nmodel = tflearn.DNN(cnet)","27abc2e8":"model.fit(xtrain_n,ytrain_h,\n         n_epoch=30,\n         validation_set=(xtest_n,ytest_h),\n         show_metric=True)","4f709a4e":"**TFLearn for Neural Network**"}}