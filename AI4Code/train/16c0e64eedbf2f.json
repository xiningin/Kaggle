{"cell_type":{"39f7bd3e":"code","cb1e1925":"code","4536d173":"code","30183057":"code","62bbc791":"code","06afef77":"code","f53cafbb":"code","504d2f1e":"code","692cc3f8":"code","babab11e":"code","15ef1770":"code","a65abe14":"code","3de4bd64":"code","5d3c67fe":"code","3a8c45bb":"code","8a4049f4":"code","5899712f":"code","ff7e9267":"markdown","9b5d6f0a":"markdown","d58997f8":"markdown","2ce3d6ff":"markdown","fbce2397":"markdown","f23d8833":"markdown","53fffbf0":"markdown","c4050888":"markdown","fe677438":"markdown","4a523aa0":"markdown","e9f9c312":"markdown","f4fe8f7c":"markdown","51ffc663":"markdown","910da632":"markdown"},"source":{"39f7bd3e":"import pandas as pd\nimport plotly.express as px\nimport numpy as np","cb1e1925":"players_file = '..\/input\/nfl-big-data-bowl-2022\/players.csv'\nplayers_df = pd.read_csv(players_file)\nplayers_df.fillna(0)","4536d173":"#convert birth date to age\nplayers_df['birthDate'] = pd.to_datetime(players_df['birthDate'], infer_datetime_format = True) \nplayers_df['birthDate'] = np.round((pd.Timestamp.now() - players_df['birthDate']).dt.days\/365)\nplayers_df = players_df.rename(columns={'birthDate': 'age'})\n\nposition= \"K\"\nplot_title_height = \"Height of \"+ position\nplot_title_weight = \"Weight of \"+ position\nplayer_by_position = players_df.loc[players_df['Position']== position]\n\n#convert height into cm\nplayers_heights = player_by_position[\"height\"]\nplayers_heights = players_heights.apply(lambda x: x.split(\"-\")) \nplayer_by_position[\"height\"] = players_heights.apply(lambda x: int(x[0]) * 12 + int(x[1]) if len(x) == 2 else int(x[0])) * 2.54\n\n#convert weight into kg\nplayer_by_position[\"weight\"] = round(players_df.weight * 0.453592, 2)\n\nfig = px.bar(player_by_position, x = player_by_position['displayName'], y = player_by_position['height'], title = plot_title_height)\nfig.show()\nfig = px.bar(player_by_position, x = player_by_position['displayName'], y = player_by_position['weight'], title = plot_title_weight)\nfig.show()","30183057":"plays_file ='..\/input\/nfl-big-data-bowl-2022\/plays.csv'\nplays_df = pd.read_csv(plays_file)\nplays_df.fillna(0)\nplays_df.head(5)","62bbc791":"play_type = 'Field Goal'\nkickAttempt = 'Kick Attempt Good'\nplays_df = plays_df.loc[plays_df['specialTeamsPlayType'] == play_type]\n\n#only take player who have at least 10 attempts at field goals\nplays_df = plays_df.groupby(\"kickerId\").filter(lambda x: len(x) > 10)\n\n#add a  new column play result and initialize it to 0\nplays_df['play_result'] = 0\n# if kick attempt = good, then it means he scored\nplays_df.loc[plays_df['specialTeamsResult'] == kickAttempt,'play_result' ] = 1\n\n#some features we will use to make predictions\nfiltered_plays = plays_df[['yardsToGo','yardlineNumber','absoluteYardlineNumber','kickerId','play_result','gameId','playId']]\nfiltered_plays[['weight', 'height', 'age']] = 0\nfiltered_plays\n#print(filtered_plays.shape)","06afef77":"player_id = player_by_position['nflId'].values.tolist()\nweight = np.array(player_by_position['weight'].values.tolist())\nheight = np.array(player_by_position['height'].values.tolist())\nage = np.array(player_by_position['age'].values.tolist())\nfor i in range(len(player_id)):\n    filtered_plays.loc[filtered_plays.kickerId == player_id[i], ['weight','height','age']] = weight[i], height[i], age[i]\nprint(filtered_plays.head(5))\n","f53cafbb":"track_2018_file = '..\/input\/nfl-big-data-bowl-2022\/tracking2018.csv'\ntrack_2018_df = pd.read_csv(track_2018_file)\n\ntemp = track_2018_df[['gameId','playId','nflId']]\ntrack_2018_df = track_2018_df[(temp.ne(temp.shift())).any(axis=1)]\ndel temp\n","504d2f1e":"track_2019_file = '..\/input\/nfl-big-data-bowl-2022\/tracking2019.csv'\ntrack_2019_df = pd.read_csv(track_2019_file)\ntemp = track_2019_df[['gameId','playId','nflId']]\ntrack_2019_df = track_2019_df[(temp.ne(temp.shift())).any(axis=1)]\ndel temp\ntracking = pd.concat([track_2018_df,track_2019_df],ignore_index = False)\ndel track_2018_df\ndel track_2019_df\ntracking\n","692cc3f8":"track_2020_file = '..\/input\/nfl-big-data-bowl-2022\/tracking2020.csv'\ntrack_2020_df = pd.read_csv(track_2020_file)\ntemp = track_2020_df[['gameId','playId','nflId']]\ntrack_2020_df = track_2020_df[(temp.ne(temp.shift())).any(axis=1)]\ndel temp\ntracking = pd.concat([tracking,track_2020_df],ignore_index = False)\ndel track_2020_df\ntracking\n\n\n","babab11e":"merged_df = pd.merge(filtered_plays, tracking, how='left', left_on=['gameId','playId','kickerId'],right_on=['gameId','playId','nflId'])\nmerged_df","15ef1770":"x = np.array(merged_df[['kickerId','yardsToGo','yardlineNumber','absoluteYardlineNumber','weight','height','age','x','y','s','a','dir','dis']].values.tolist())\nx = np.nan_to_num(x)\ny = np.array(merged_df['play_result'].values.tolist())\ny = np.nan_to_num(y)\n#print(x.shape)","a65abe14":"import xgboost as xgb\n","3de4bd64":"##One model per player\nid_list = merged_df['nflId'].unique().tolist()\nscore_list = []\nfor i in range(len(id_list)):\n    filter_merge_df = merged_df[merged_df['kickerId'] == id_list[i]]\n    x_by_player = np.array(filter_merge_df[['kickerId','yardsToGo','yardlineNumber','absoluteYardlineNumber','weight','height','age','x','y','s','a','dir','dis']].values.tolist())\n    y_by_player = np.array(filter_merge_df['play_result'].values.tolist())\n    model = xgb.XGBClassifier(max_depth=12,\n                        n_estimators=500,\n                        learning_rate = 0.001,\n                        eval_metric='rmse') \n    model.fit(x_by_player, y_by_player)\n    x[:,0] = id_list[i]\n    score_list.append(np.mean(model.predict(x)))\n\nout_df = pd.DataFrame(\n    {'nflId': id_list,\n     'probabilty': score_list\n    })\nsorted_output = out_df.sort_values(by = 'probabilty', ascending = False)\nsorted_output.head(10)\nmerge_output = pd.merge(sorted_output, player_by_position, how ='left', left_on='nflId', right_on='nflId')\nno_1_output = merge_output[merge_output['probabilty'] != 1]\nprint(no_1_output[['nflId','probabilty','displayName']].head(5))\n\ndel out_df\ndel sorted_output\ndel merge_output\n","5d3c67fe":"model = xgb.XGBClassifier(max_depth=12,\n                        n_estimators=500,\n                        learning_rate = 0.001,\n                        eval_metric='rmse')                       \nmodel.fit(x,y)","3a8c45bb":"##one model for all players\noutput = model.predict_proba(x)\n\nprob_list = output[:,1]\n\nplayer_id_list = merged_df['kickerId'].values.tolist()\n\nout_df = pd.DataFrame(\n    {'nflId': player_id_list,\n     'probabilty': prob_list\n    })\n    \nout = out_df.groupby(['nflId']).mean()\nout = out.reset_index()\nsorted_out = out.sort_values(by = 'probabilty', ascending = False)\nmerge_output = pd.merge(sorted_out, player_by_position, how ='left', left_on='nflId', right_on='nflId')\nprint(merge_output.head(5))\n","8a4049f4":"###Second approach, one model per all players\nfrom sklearn.linear_model import LogisticRegression\nmodel = LogisticRegression().fit(x,y)\noutput = model.predict_proba(x)\n\nprob_list = output[:,1]\n\nplayer_id_list = merged_df['kickerId'].values.tolist()\n\nout_df = pd.DataFrame(\n    {'nflId': player_id_list,\n     'probabilty': prob_list\n    })\n    \nout = out_df.groupby(['nflId']).mean()\nout = out.reset_index()\nsorted_out = out.sort_values(by = 'probabilty', ascending = False)\nmerge_output = pd.merge(sorted_out, player_by_position, how ='left', left_on='nflId', right_on='nflId')\nprint(sorted_out.head(5))\nprint(merge_output.head(5))\n","5899712f":"###First approach, one model per player\nid_list = merged_df['nflId'].unique().tolist()\nscore_list = []\nfor i in range(len(id_list)):\n    filter_merge_df = merged_df[merged_df['kickerId'] == id_list[i]]\n    x_by_player = np.array(filter_merge_df[['kickerId','yardsToGo','yardlineNumber','absoluteYardlineNumber','weight','height','age','x','y','s','a','dir','dis']].values.tolist())\n    y_by_player = np.array(filter_merge_df['play_result'].values.tolist())\n    model = LogisticRegression(max_iter=1000)\n    model.fit(x_by_player, y_by_player)\n    x[:,0] = id_list[i]\n    score_list.append(np.mean(model.predict(x)))\n\nout_df = pd.DataFrame(\n    {'nflId': id_list,\n     'probabilty': score_list\n    })\n\nsorted_output = out_df.sort_values(by = 'probabilty', ascending = False)\nsorted_output.head(10)\nmerge_output = pd.merge(sorted_output, player_by_position, how ='left', left_on='nflId', right_on='nflId')\nno_1_output = merge_output[merge_output['probabilty'] != 1]\nprint(no_1_output[['nflId','probabilty','displayName']].head(5))\n\ndel out_df\ndel sorted_output\ndel merge_output","ff7e9267":"# Image references\n<div id=\"nfl_logo\">1. NFL Logo, NFL: https:\/\/static.nfl.com\/static\/content\/public\/static\/wildcat\/assets\/img\/application-shell\/shield\/default.svg <\/div>\n<div id=\"tucker\"> 2. Justin tucker, japantimes: https:\/\/cdn-japantimes.com\/wp-content\/uploads\/2021\/09\/np_file_114442.jpeg<\/div>\n","9b5d6f0a":"We have previously initialized weight, height, age columns to 0. \n\nWe need to perform a \"join\" with the filtered players dataframe we obtained before (based on the player id) and insert the correct values of weight, height, age for each player.","d58997f8":"<p>We will use xgboost and logistic regression to predict the probability of a kicker to score a field goal later on. \n    \nIn order to do that we need to filter the dataframes by \"specialTeamsPlayType\" = \"Field Goal\", then add a new column to the dataframe called \"play_result\", with value = 1 if \"specialTeamsResult\" = \"Kick Attempt Good\", 0 if not. \n    \nWe are only gonna take into consideration data of players who have attempted at least 10 fiel goals (to avoid cases where a player only has one attempt in which he scored, because this might \"ruin\" our prediction).\n<\/p>","2ce3d6ff":"## A single model for all players\n<p>We considered a simpler approach: we train a single model with all the data related to a specific play performed by players in the same position (In our experiments, kickers), and then we perform the prediction with that single model.<\/p>\n<p>Because each player appears in multiple rows of our data set, we took the average success rate of the player.<\/p>","fbce2397":"# Data analysis and cleaning\nIn this notebook we have used the following files:\n    \n* players.csv\n* plays.csv\n* all three tracking files\n    \nFirstly, we need to do some cleaning of the raw data we have available before passing them to the machine learning models. Operation such as:\n    \n* replacing non valid values with 0s\n* convert height from feet into cm to have a usable numeric format\n* convert pounds into kg\n* calculate the age based on the birth date\n","f23d8833":"# Results interpretation\n<p>These results are encouraging, since the kickers listed are actually very famous ones and considered some of the best in the NFL.<\/p>\n<p>Justin Tucker for example, is one of the highest paid kicker of the whole league, with an accuracy of 90% throughout his career, and he can be found in both rankings.<\/p>\n\n![Justin_Tucker.jpeg](attachment:b04a0676-bd65-4984-a14d-93e49726896d.jpeg)\n\n","53fffbf0":"# Introduction\n<p>Founded in 1920 by the American Professional Football Association, the NFL is right now THE most popular sports league in the United States.<\/p>\n<center>\n<img src=\"https:\/\/static.nfl.com\/static\/content\/public\/static\/wildcat\/assets\/img\/application-shell\/shield\/default.svg\", width=\"300\">    \n<\/center>\n\n<p>Our aim is to help improving every aspect of the play, in particular we will concentrate on analysing special teams.<\/p>\nThe competition states 3 potential  topics:\n <ul>\n  <li>Create a new special teams metric<\/li>\n  <li>Compare different strategies and their respective results<\/li>\n  <li>Rank special team players based on a specific metric<\/li>\n<\/ul> \nWe chose to research the third option: rank special team players based on their probability of success when pulling off a <b>Field Goal<\/b>.\n    \n<p>The \u00ab Placekicker \u00bb or simply \u00ab Kicker \u00bb in American Football is the player who is responsible for the kicking of field goals and extra points, sometimes also kickoffs and punts.\n    \nA field goal is a mean of scoring in American football. To score a field goal, the team in possession of the ball must kick the ball in between the poles (or \"Uprights\") of the opposing team, awarding three points. American football requires that a field goal must only come during a play from scrimmage.\n<\/p>","c4050888":"<p>In order to be able to use the tracking data of the past three seasons we had to use all three tracking files.<\/p>\n    \n<p>Because the size of each file is around 1.7 GBs, we first need to reduce the number of samples and then merge them together to get a single frame with all the information we need.<\/p>\n\n<p>After we have a single dataframe \"tracking\" for all three past seasons, we can perform a merge with what we already have to finally get all the data we need in a single data structure.<\/p>\n\n<p>A look into the final dataframe:<\/p>\n","fe677438":"# Conclusion\n<p>For this competition, we worked on ranking special teams players from the NFL.<\/p>\nOne of the most challenging part of this project was to handle the data, we had a lot of files to use and had to go through a lot of data cleaning.\n<p>We focused on some of the most important positions in special teams and compared players by position.\\\\\nTo achieve this, we tried two different approaches to compare players: one comparing players' results with only one machine learning model and one comparing them with one model per player.<\/p>\n<p>For the models predicting outcomes of different plays, we especially used XGBoost and we gathered with it interesting results when comparing players' performances.<\/p>\n<p>Using our different approaches and with different features, we were able to rank \"Kickers\" from the NFL. Based on their past performances, we tested how each player would perform in some specific conditions in a sample of plays (the sample being the same for every player). In this way we were somewhat able to judge them fairly and not with the bias of the conditions of each player's plays.<\/p>\n<p>For example, a kicker with an 85% accuracy might be ranked lower than someone with an 80% accuracy because the average distance of the first kicker's shots was of 20 yards when it was of 50 yards for the second one. And what really matters is how well the players would perform compared to the others in the same exact context.<\/p>\n<p>Finally, for further improvement, we would continue working on other special teams positions, and especially the \"punter\" position for which we need deep learning models to do the predictions.<\/p>","4a523aa0":"<center>\n<h1>NFL Big data bowl 2022<\/h1>\n<\/center>\n<center>\nBy Massimo Hong and Lohan Meunier\n<\/center>","e9f9c312":"## Filter players based on playing position\n<p>This is  how we perform the filtering based on player position, the weight height conversion.\nFilter the dataframe by position, \"K\" for kicker in this case. If we want to consider other positions in the future, we just need to change a string.\nReplace birthDate with age.\n    \nConvert height and weight into cm and kg. \n    \nA quick graphic visualization to check the results of the filtering and conversion operations.<\/p>","f4fe8f7c":"# Approaches to rank players for each position\nWe have two approaches to rank players that we will describe in the following sections. In this example we will show the top 5 players ordered by probability of success.\n## One model for each player\nWe list all the players of a specific position and for each one of them, we extract only the plays he has performed and then:\n\n* We pick the relevant features in the data\n* We train one model for each player\u2019s plays\n* We test each model on the same sample of testing data\n* We compare scores and rank the players\n<p>This approach allows us to really focus on each player's performances to compare them. It takes players one by one, train a model on the player's plays and then test it on a sample of plays to see how well the player would perform in some specific conditions.<\/p>\n\n","51ffc663":"Finally, we will define an XGBoost model to perform prediction on the data we have.\n\nSome features we will use for predictions are:\n\nweight, height, age and data related to the position on the pitch (x, y, dir, speed etc..).","910da632":"\n# Abstract\n<center>\n<p>In this notebook we will explain the process we went through going into the Kaggle competition: NFL Big Data Bowl 2022. \n\nThe task we chose to focus on was the ranking of special teams players. \n\nWe are trying to incorporate Machine Learning into the project and our goal is to predict how well players would perform in certain plays and compare their results by position. We will go through the methods and models we used to achieve this goal, as well as the results we gathered.<\/p><\/center>\n"}}