{"cell_type":{"62153046":"code","baa1b2d2":"code","0396b827":"code","eee9c0b6":"code","09a28248":"code","e73b8bb1":"code","0cf25204":"code","85be5013":"code","a23723d6":"code","4ba9f840":"code","6ea25779":"code","9ce07407":"code","06e16416":"code","85eace0e":"code","1f596b3f":"code","0cd3015c":"code","943b6e71":"code","1e3faf30":"code","566c538b":"code","aef73059":"code","93e64790":"code","88e8395d":"code","7593339c":"code","1fd43f63":"code","fbee54cc":"code","0713fc4d":"code","7af9a95e":"code","de7c0b78":"code","d2a75d60":"code","3bc6f890":"markdown","b606742c":"markdown","e5662060":"markdown","78565bce":"markdown"},"source":{"62153046":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","baa1b2d2":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n%matplotlib inline","0396b827":"df=pd.read_csv('..\/input\/mobile-price-classification\/train.csv')\ndf.head()\n## reading the csv file\n","eee9c0b6":"sns.pairplot(df,hue='price_range')","09a28248":"#Battery power vs Price Range","e73b8bb1":"sns.boxplot(x=\"price_range\", y=\"battery_power\", data=df)","0cf25204":"# No of Phones vs Camera megapixels of front and primary camera\nplt.figure(figsize=(10,6))\ndf['fc'].hist(alpha=0.5,color='blue',label='Front camera')\ndf['pc'].hist(alpha=0.5,color='red',label='Primary camera')\nplt.legend();\nplt.xlabel('MegaPixels')","85be5013":"d1=df.copy()\n\nd1\n## copying data into another DataFrame ","a23723d6":"d1.corr()['price_range']\n\n## checking out correlation","4ba9f840":"corr_features =[]\n\nfor i , r in df.corr().iterrows():\n    k=0\n    for j in range(len(r)):\n        if i!= r.index[k]:\n            if r.values[k] >=0.5:\n                corr_features.append([i, r.index[k], r.values[k]])\n        k += 1\ncorr_features","6ea25779":"feat =[]\nfor i in corr_features:\n    if i[2] >= 0.8:\n        feat.append(i[0])\n        feat.append(i[1])\n        print(feat)\n        \n# since 'price_range' is our target variable so we will not drop this","9ce07407":"fig = plt.figure(figsize = (10,5))\n\nsns.heatmap(d1.corr(), annot = True, fmt = '0.2f',  cmap=\"rocket\")","06e16416":"for col in d1.columns: \n    sns.boxplot(x=d1[col])\n    print(col) \n    plt.show()  \n##  boxplot in order to detect outliers","85eace0e":"def boxoutlier(var):\n    for x in var.columns :\n        \n        Q1=var[x].quantile(0.25)\n        Q3=var[x].quantile(0.75)\n        IQR=Q3-Q1\n        Lower = Q1-(1.5*IQR)\n        Upper = Q3+(1.5*IQR)\n\n        var.loc[:,x]=np.where(var[x].values > Upper,Upper-1,var[x].values)\n        var.loc[:,x]=np.where(var[x].values < Lower,Lower+1,var[x].values)\n\nboxoutlier(d1)\n\n## treatment of outlier","1f596b3f":"for col in d1.columns: \n    sns.boxplot(x=d1[col])\n    print(col) \n    plt.show() \n## crosschecking for outliers","0cd3015c":"from sklearn.model_selection import train_test_split\n## import train_test_split() in order to do splitting data","943b6e71":"X=d1.iloc[:,:-1]\nX.tail()\n## set the features for the respective target","1e3faf30":"y=d1['price_range']\ny.tail()\n#tail() is used to fetch last 5 rows of the data\n# target ","566c538b":"X_train,X_test,y_train,y_test=train_test_split(X,y,test_size=0.25  ,random_state=4)\n# test_size parameter split the whole data into X train and X test\n# random_state is used to freeze this spliting, it can be any numerical value","aef73059":"display(X_train.head(),y_train.head(),'Testing',X_test.head(),y_test.head())\n# displaying heading rows of both data","93e64790":"from sklearn.neighbors import KNeighborsClassifier,KNeighborsRegressor\nclf=KNeighborsClassifier(n_neighbors=17,metric='manhattan')\n\n# initiating function with no of neighbors and metric used for distance calculations\n# commonl used values for metric {'manhattan','euclidean','hamming'}","88e8395d":"clf.fit(X_train,y_train)\n## Training the data","7593339c":"error_rate = []\nfor i in range(1,20):\n    knn1 = KNeighborsClassifier(n_neighbors=i)\n    knn1.fit(X_train,y_train)\n    pred_i = knn1.predict(X_test)\n    error_rate.append(np.mean(pred_i != y_test))\nplt.figure(figsize=(10,6))\nplt.plot(range(1,20),error_rate,color='blue', linestyle='dashed', marker='o',\n         markerfacecolor='red', markersize=5)   ## plot() used to plot the points on the canvas\nplt.title('Error Rate vs. K Value')\nplt.xlabel('K')  ## X axis ki labelling hogi\nplt.ylabel('Error Rate')  ## Y-axis ki labelling hogi\ny_pred = knn1.predict(X_test) ## predict() use\nprint(accuracy_score(y_test, y_pred)*100) ## checking accuracy score\ny_pred  \n\n# method to find value of k\n# k=17 returns least error rate","1fd43f63":"pred_test=clf.predict(X_test)\n## prediction data","fbee54cc":"from sklearn.metrics import accuracy_score\naccuracy_score(y_test,pred_test)\n# accuracy of testing model","0713fc4d":"pred_train=clf.predict(X_train)","7af9a95e":"from sklearn.metrics import accuracy_score\naccuracy_score(y_train,pred_train)","de7c0b78":"from sklearn.metrics import classification_report,confusion_matrix\nprint(classification_report(y_test,pred_test))","d2a75d60":"matrix=confusion_matrix(y_test,pred_test)\nprint(matrix)","3bc6f890":"****# hence training accuracy is 93 and testing data accuracy is 95 .\n**# model is neither overfit nor underfit**","b606742c":"Splitting of Data","e5662060":"# Evaluation Matrix","78565bce":"'''    \n**Model will predict a price range, indicating how high the price is, using K-Nearest Neighbors algorithm.**\n\n    \n**Column Description**\n\nbattery_power         Total energy a battery can store in one time measured  in mAh\nclock_speed           The speed at which microprocessor executes instructions\nfc                    Front Camera megapixels\nint_memory            Internal Memory in Gigabytes\nm_dep                 Mobile Depth in cm\nmobile_wt             Weight of the mobile phone\nn_cores               Number of cores of a processor\npc                    Primary Camera megapixels\npx_height             Pixel Resolution Height\npx_width              Pixel Resolution Width\nram                   Random Access Memory in MegaBytes\nsc_h                  Screen Height of mobile in cm\nsc_w                  Screen Width of mobile in cm\ntalk_time             The longest time that a single battery charge will last \nprice_range           This is the target variable with the value of \n                   \n                       0(lowcost), \n                       1(medium cost),\n                       2(high cost) and\n                       3(very high cost).\n                    \n'''"}}