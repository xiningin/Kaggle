{"cell_type":{"bfeaa254":"code","d6dc418a":"code","ddadc4c8":"markdown"},"source":{"bfeaa254":"from keras.datasets import mnist\nimport keras\n\ndef load_and_preprocess():\n    r, c = 28, 28\n    num_classes = 10\n    (x_train, y_train), (x_test, y_test) = mnist.load_data()\n\n    x_train = x_train.reshape(x_train.shape[0], r, c, 1)\n    x_test = x_test.reshape(x_test.shape[0], r, c, 1)\n\n    input_shape = (r, c, 1)\n    \n    x_train = x_train.astype('float32')\n    x_test = x_test.astype('float32')\n    \n    x_train \/= 255\n    x_test \/= 255\n    \n    y_train = keras.utils.to_categorical(y_train, num_classes)\n    y_test = keras.utils.to_categorical(y_test, num_classes)\n    \n    return (x_train,x_test,y_train,y_test,input_shape)","d6dc418a":"from keras.models import Sequential\nfrom keras.layers import Dense, Dropout, Flatten, Conv2D, MaxPooling2D\n\nx_train, x_test, y_train, y_test, input_shape = load_and_preprocess()\nnum_classes=10\n\nmodel = Sequential()\n\n#Now defining 2 convolution layers\nmodel.add(Conv2D(32, kernel_size=(3,3), activation='relu', input_shape=input_shape))\nmodel.add(Conv2D(64, (3, 3), activation='relu'))\nmodel.add(MaxPooling2D(pool_size=(2, 2)))\nmodel.add(Dropout(0.25))\nmodel.add(Flatten())\nmodel.add(Dense(128, activation='relu'))\nmodel.add(Dropout(0.5))\nmodel.add(Dense(num_classes, activation='softmax'))\n\n# Next, we minimize errors by using the AdaDelta algorithm:\nmodel.compile(loss=keras.losses.categorical_crossentropy, optimizer=keras.optimizers.Adadelta(), metrics=['accuracy'])\n\nmodel.fit(x_train, y_train, batch_size=10, epochs=10, validation_data=(x_test, y_test))\n\nscore = model.evaluate(x_test, y_test, verbose=0)\n\nprint('Test loss:', score[0])\nprint('Test accuracy:', score[1])","ddadc4c8":"Exercice from the book \"Practical Machine Learning and Image Processing\" (Himanshu Singh)"}}