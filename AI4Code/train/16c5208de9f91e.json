{"cell_type":{"73dc1358":"code","0e1c261c":"code","20a97d2e":"code","64a8aaf0":"code","e29c67e7":"code","5baa065c":"code","77f1d7b1":"code","eb27e71e":"code","a540c9da":"code","4f74a79f":"code","cfe7e445":"code","09632cc7":"code","b62e13e5":"code","6f6bc95f":"code","47865f36":"code","5c03807a":"code","69d4674e":"code","df292ea5":"code","880e984e":"code","6293bb9e":"code","4c83f71f":"code","051b4f31":"code","3db63167":"code","497029bb":"code","6d2c052f":"code","cd8849b1":"code","5b0a053d":"code","7e2f91e5":"code","03e3709d":"code","c7a3b2a2":"code","e8ab8aaa":"code","bdf4b6ea":"code","8620a107":"code","e2ec8125":"code","2aff08a2":"code","ac81a35a":"code","cdba578b":"code","10bb5ac2":"code","2a9c97b8":"code","28514f51":"code","99abe26a":"code","45e3f9ac":"code","c9db710b":"code","4a46df6f":"code","d81c23da":"code","142e9106":"code","d203dbc7":"code","6ed6e26c":"code","58cb9cee":"code","7d6b4852":"code","5d3ad0bd":"code","e620967f":"code","d1148c78":"code","e9339878":"code","07a8964a":"code","b77bb586":"code","7ad11bb1":"code","3514b4c5":"code","037e9b8d":"code","b399c8f2":"code","18a3353e":"code","d185e0da":"code","0278a337":"code","d4e89466":"code","0978ca29":"code","915f4f2d":"code","3b4383c9":"code","b3a18e70":"code","f029150e":"code","3076e175":"code","cfabb687":"code","3aafbeea":"code","3855244a":"code","b271b14e":"code","aa0f03cc":"code","39f02cb6":"code","14a2c22e":"code","c5808b4e":"markdown","05d8e958":"markdown","7d32c670":"markdown","723ae191":"markdown","ab4b9e48":"markdown","dce77d04":"markdown","f1d5f39f":"markdown","5eacac05":"markdown","8af88a8d":"markdown","b91b4b3b":"markdown","3a1e0068":"markdown","1d9a855d":"markdown","75fe82ae":"markdown","204fcfbd":"markdown","eb858af4":"markdown","7d74f801":"markdown"},"source":{"73dc1358":"import pandas as pd\nimport numpy as np\nimport datetime as dt\nfrom math import floor\n\nimport warnings\nwarnings.filterwarnings('ignore')\npd.set_option('display.max_columns', None)\n\nimport plotly.express as px\nimport matplotlib.pyplot as plt\nfrom plotly.subplots import make_subplots\nimport plotly.graph_objects as go\nimport seaborn as sns\n\nfrom sklearn.preprocessing import LabelEncoder\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.preprocessing import OneHotEncoder\n\nfrom yellowbrick.cluster import KElbowVisualizer\nfrom sklearn.cluster import KMeans\nfrom sklearn.metrics import silhouette_score\n","0e1c261c":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","20a97d2e":"df = pd.read_csv('\/kaggle\/input\/customer-personality-analysis\/marketing_campaign.csv', sep='\\t')\ndf_copy = df.copy()","64a8aaf0":"df.head()","e29c67e7":"for col in df.columns:\n    if df[col].isnull().sum() > 0:\n        print(f\"Column '{col}' has {df[col].isnull().sum()} missing values\")","5baa065c":"df['Income'] = df['Income'].fillna(df.groupby('Education')['Income'].transform('mean'))","77f1d7b1":"present = 0\nfor col in df.columns:\n    if df[col].isnull().sum() > 0:\n        print(f\"Column '{col}' has {df[col].isnull().sum()} missing values\")\n        present = 1\nif not present:\n        print(\"No missing values are present in the dataset\")","eb27e71e":"df = df.set_index('ID')","a540c9da":"df['Age'] = int(pd.datetime.now().year) - df['Year_Birth']\ndf_copy['Age'] = int(pd.datetime.now().year) - df_copy['Year_Birth']","4f74a79f":"print(\"Columns with string datatype are:\")\nfor col in df.columns:\n    if df[col].dtypes == object:\n        print(col)","cfe7e445":"df_Edu = pd.DataFrame(df['Education'].value_counts()).reset_index()\ndf_Edu.columns = ['Education', 'Count']","09632cc7":"df['Education'] = np.where(df['Education'] == '2n Cycle', 'Master', df['Education'])","b62e13e5":"df_Edu = pd.DataFrame(df['Education'].value_counts()).reset_index()\ndf_Edu.columns = ['Education', 'Count']\n\nfig = px.bar(df_Edu,\n            x='Education',\n            y='Count',\n            color='Education')\nfig.update_layout(width=800, height=400, title='Education ')\nfig.show()","6f6bc95f":"df_Mar = pd.DataFrame(df['Marital_Status'].value_counts()).reset_index()\ndf_Mar.columns = ['Marital_Status', 'Count']\ndf_Mar","47865f36":"mar_stat = ['Single', 'Widow', 'Alone', 'Absurd', 'YOLO']\ndf['Marital_Status'] = np.where(df['Marital_Status'].isin(mar_stat), 'Single', df['Marital_Status'])\ndf['Marital_Status'] = np.where(df['Marital_Status'].isin(['Married', 'Together']), 'Relationship', 'Single')\ndf_Mar = pd.DataFrame(df['Marital_Status'].value_counts()).reset_index()\ndf_Mar.columns = ['Marital_Status', 'Count']\ndf_Mar","5c03807a":"df_Edu = pd.DataFrame(df['Marital_Status'].value_counts()).reset_index()\ndf_Edu.columns = ['Marital_Status', 'Count']\n\nfig = px.bar(df_Edu,\n            x='Marital_Status',\n            y='Count',\n            color='Marital_Status')\nfig.update_layout(width=800, height=400, title='Education ')\nfig.show()","69d4674e":"# df['h# df['hasKid'] = np.where((df['Kidhome'] + df['Teenhome'] > 0), 1, 0)\ndf['Kids'] = df['Kidhome'] + df['Teenhome']","df292ea5":"df.head()","880e984e":"df['Dt_Customer'] = pd.to_datetime(df['Dt_Customer'], utc=False)","6293bb9e":"\nlast_enrollment = pd.to_datetime(df['Dt_Customer'].max(), utc=False)\ndf['Days_Enrolled'] = (last_enrollment-df['Dt_Customer']).dt.days","4c83f71f":"df.drop(columns = ['Year_Birth', 'Kidhome', 'Teenhome', 'Z_CostContact', 'Z_Revenue', 'Dt_Customer'], inplace=True)","051b4f31":"df.head()","3db63167":"fig, ax = plt.subplots(figsize=(20,20))  \nfig = sns.heatmap(df.corr(), cmap=\"YlGnBu\", annot=True)\nplt.show()","497029bb":"df.head()","6d2c052f":"df['Total_Spend'] = df['MntWines']+df['MntFruits']+df['MntMeatProducts']+df['MntFishProducts']+df['MntSweetProducts']+df['MntGoldProds']","cd8849b1":"df.drop(columns=['MntWines', 'MntFruits', 'MntMeatProducts', 'MntFishProducts', 'MntSweetProducts', 'MntGoldProds'], inplace=True)","5b0a053d":"print(f\"Customer with most recent non transaction streak is {df['Recency'].min()} days while customer with longest non transaction streak is {df['Recency'].max()} days\")","7e2f91e5":"df[df['Recency'] <= 7].shape","03e3709d":"df[(df['Recency']>7) & (df['Recency'] <= 14 )].shape","c7a3b2a2":"df[(df['Recency']>14) & (df['Recency'] <= 21 )].shape","e8ab8aaa":"df[(df['Recency']>21) & (df['Recency'] <= 28 )].shape","bdf4b6ea":"\ndf['Recency_'] = df['Recency']\/14\ndf['Recency_'] = df['Recency_'].apply(lambda x: floor(x))","8620a107":"df_Recency_ = pd.DataFrame(df['Recency_'].value_counts()).reset_index()\ndf_Recency_.columns = ['Recency', 'Count']\n\nfig = px.bar(df_Recency_,\n            x='Recency',\n            y='Count',\n            color='Recency')\nfig.update_layout(width=800, height=400, title='Recency (x14 days) ')\nfig.show()","e2ec8125":"df['Recency_'] = df['Recency_'].apply(lambda x : str(x))","2aff08a2":"df.drop(columns = ['Recency'], inplace=True)","ac81a35a":"df.head()","cdba578b":"df['CouponsAccepted'] = df['AcceptedCmp1']+df['AcceptedCmp2']+df['AcceptedCmp3']+df['AcceptedCmp4']+df['AcceptedCmp5']+df['Response']","10bb5ac2":"df.drop(columns=['AcceptedCmp1', 'AcceptedCmp2', 'AcceptedCmp3', 'AcceptedCmp4', 'AcceptedCmp5', 'Response', 'NumWebVisitsMonth'], inplace=True)","2a9c97b8":"df.rename(columns={'NumStorePurchases':'Store_Purchases'}, inplace=True)\ndf['Non_Store_Purchases'] = df['NumWebPurchases']+df['NumCatalogPurchases']","28514f51":"df['Total_Purchases'] = df['Store_Purchases']+df['Non_Store_Purchases']\ndf['Store_Purchases_Pct'] = df['Store_Purchases']\/df['Total_Purchases']\ndf['Non_Store_Purchases_Pct'] = 1-df['Store_Purchases_Pct']\ndf['Customer_Type'] = np.where(df['Store_Purchases_Pct'] >= 0.5, \"Offline\", \"Online\")","99abe26a":"df.head()","45e3f9ac":"df.drop(columns=['Store_Purchases_Pct', 'Non_Store_Purchases_Pct', 'Non_Store_Purchases', 'NumWebPurchases', 'NumWebPurchases', 'NumCatalogPurchases', 'Store_Purchases'], inplace=True)","c9db710b":"print(f\"The youngest customer is {df['Age'].min()} years old and oldest customer is {df['Age'].max()} years old\")","4a46df6f":"df.head()","d81c23da":"\n\ntrace0 = go.Box(\n    y=df['Income'],\n    name='Income'\n)\n\ntrace1 = go.Box(\n    y=df['Age'],\n    name='Age'\n)\n\ntrace2 = go.Box(\n    y=df['NumDealsPurchases'],\n    name='Deals Purchases'\n)\n\ntrace3 = go.Box(\n    y=df['Total_Spend'],\n    name='Total Spend'\n)\n\ntrace4 = go.Box(\n    y=df['CouponsAccepted'],\n    name='Coupons Accepted'\n)\n\ntrace5 = go.Box(\n    y=df['Total_Purchases'],\n    name='Total Purchases'\n)\n\n\n\nfig = make_subplots(rows=2, cols=3)\n\nfig.append_trace(trace0, row = 1, col = 1)\nfig.append_trace(trace1, row = 1, col = 2)\nfig.append_trace(trace2, row = 1, col = 3)\nfig.append_trace(trace3, row = 2, col = 1)\nfig.append_trace(trace4, row = 2, col = 2)\nfig.append_trace(trace5, row = 2, col = 3)\n\nfig.update_layout(width=800, height=400, title='Box Plot to check for outliers')\n\nfig.show()","142e9106":"rows_before = df.shape[0]\ndf = df[(df['Age'] < 80) & (df['Income'] < 160000)]\ndf_copy = df_copy[(df_copy['Age'] < 80) & (df_copy['Income'] < 160000)]\nrows_after = df.shape[0]\nprint(f\"The number of rows after removing the outliers reduced by {rows_before-rows_after}\")","d203dbc7":"# df['Age'] = np.where(df['Age'] <= 30, \"(0,30]\", np.where(df['Age'] <= 45, \"(30,45]\", np.where(df['Age'] <= 60, \"(45,60]\",\"[60, ]\")))\ndf['Age'] = np.where(df['Age'] <= 30, \"(0,30]\", np.where(df['Age'] <= 40, \"(30,40]\", np.where(df['Age'] <= 50, \"(40,50]\", np.where(df['Age'] <= 60, \"(50, 60]\", np.where(df['Age'] <=70, \"(60, 70]\", (70, ))))))","6ed6e26c":"df.head()","58cb9cee":"del df['Customer_Type']\ndel df['Complain']","7d6b4852":"df_ = df.copy()\ndf_.reset_index(inplace=True)","5d3ad0bd":"df_.head()","e620967f":"int_list = []\nfor col in df.columns:\n    if df[col].dtypes == int or df[col].dtypes == float:\n        int_list.append(col)\nprint(int_list)","d1148c78":"\n\nautoscaler = StandardScaler()\ndf[int_list] = autoscaler.fit_transform(df[int_list])","e9339878":"df.dtypes","07a8964a":"df.reset_index('ID', inplace=True)","b77bb586":"df.reset_index(inplace=True)","7ad11bb1":"df.head()","3514b4c5":"\n\nobj_col = []\nfor col in df.columns:\n    if df[col].dtypes == object:\n        obj_col.append(col)\nobj_col","037e9b8d":"onehotencoder = OneHotEncoder() \ndata = pd.DataFrame(onehotencoder.fit_transform(df[['Age', 'Recency_']]).toarray())\ndata = data.reset_index()\ndf = pd.merge(left = df, right = data, on = 'index')\ndf = df.drop(columns = ['Age'])","b399c8f2":"obj_col = []\nfor col in df.columns:\n    if df[col].dtypes == object:\n        obj_col.append(col)\nobj_col","18a3353e":"\n\nlabel_encoder = LabelEncoder()\nfor col in obj_col:\n    df[col] = label_encoder.fit_transform(df[col])","d185e0da":"df.head()","0278a337":"df.drop(columns=[df.columns[0]], inplace=True)\ndf.set_index('ID', inplace=True)","d4e89466":"model = KMeans(init = 'k-means++')\nvisualizer = KElbowVisualizer(model, k = 10, random_state = 42)\n\nvisualizer.fit(df)\nvisualizer.show()","0978ca29":"kmeans = KMeans(n_clusters = 4, random_state=42).fit(df)\npred = kmeans.predict(df)\ndf['Cluster'] = pred+1","915f4f2d":"df = df.reset_index('ID')","3b4383c9":"df_ = pd.merge(df_, df[['ID', 'Cluster']], how='left')\ndf_['Cluster'] = df_['Cluster'].astype('str')\ndf_['Cluster'] = np.where(df_['Cluster'] == '1', \"Cluster 1\", np.where(df_['Cluster'] == '2', \"Cluster 2\", np.where(df_['Cluster'] == '3', \"Cluster 3\", \"Cluster 4\")))","b3a18e70":"df_Edu = pd.DataFrame(df_['Cluster'].value_counts()).reset_index()\ndf_Edu.columns = ['Cluster', 'Count']\n\nfig = go.Figure(data=[go.Pie(labels=df_Edu['Cluster'], values=df_Edu['Count'], hole=.3)])\nfig.update_layout(width=800, height=400, title='Cluster')\nfig.show()","f029150e":"fig = px.scatter(df_, x=\"Income\", y=\"Total_Spend\",\n                 color=\"Cluster\",\n                 hover_data=['Total_Spend', 'Income', 'Cluster'])\n\nfig.update_layout(\n    title=\"Spend vs Income Plot\",\n    xaxis_title = \"Spend\",\n    yaxis_title = \"Income\",\n    width = 900, height=600\n)\n\nfig.show()","3076e175":"df_plot = df_[['Age', 'Cluster', 'ID']].groupby(['Age', 'Cluster']).count()\ndf_plot.reset_index(inplace=True)\ndf_plot.rename(columns={\"ID\":\"Number of Customers\"}, inplace=True)\n\n\nfig = px.bar(df_plot, x=\"Age\", y=\"Number of Customers\",\n             color='Cluster', barmode='group',\n             height=400)\nfig.show()","cfabb687":"df_plot = df_[['Marital_Status', 'Cluster', 'ID']].groupby(['Marital_Status', 'Cluster']).count()\ndf_plot.reset_index(inplace=True)\ndf_plot.rename(columns={\"ID\":\"Count of Customers\"}, inplace=True)\n\n\nfig = px.bar(df_plot, x=\"Marital_Status\", y=\"Count of Customers\",\n             color='Cluster', barmode='group',\n             height=400)\nfig.show()","3aafbeea":"df_plot = df_[['Cluster', 'Income']].groupby(['Cluster']).agg({'Income': 'mean'})\ndf_plot.reset_index(inplace=True)\ndf_plot.rename(columns={\"Income\":\"Mean Income\"}, inplace=True)\n\ndf_plot_ = df_[['Cluster', 'Total_Spend']].groupby(['Cluster']).agg({'Total_Spend': 'mean'})\ndf_plot_.reset_index(inplace=True)\ndf_plot_.rename(columns={\"Total_Spend\":\"Mean Spend\"}, inplace=True)\n\n\ntrace1 = go.Bar(\n    x=df_plot['Cluster'],\n    y=df_plot['Mean Income'],\n    name='Mean Income of Clusters'\n)\ntrace2 = go.Bar(\n    x=df_plot_['Cluster'],\n    y=df_plot_['Mean Spend'],\n    name='Mean Spend of Cluster'\n)\n\nfig = make_subplots(rows=1, cols=2, shared_xaxes=True)\n\nfig.append_trace(trace1, row = 1, col = 1)\nfig.append_trace(trace2, row = 1, col = 2)\n\nfig.update_layout(width=900, height=500, title='Mean Income & Spend')\n\nfig.show()","3855244a":"df_plot = df_[['Education', 'Cluster', 'ID']].groupby(['Education', 'Cluster']).count()\ndf_plot.reset_index(inplace=True)\ndf_plot.rename(columns={\"ID\":\"Count of Customers\"}, inplace=True)\n\n\nfig = px.bar(df_plot, x=\"Education\", y=\"Count of Customers\",\n             color='Cluster', barmode='group',\n             height=400)\nfig.update_layout(title=\"Education\")\nfig.show()","b271b14e":"df_plot = df_[['Total_Purchases', 'Cluster', 'ID']].groupby(['Cluster']).agg({\"ID\":\"count\", \"Total_Purchases\":\"sum\"})\ndf_plot.reset_index(inplace=True)\ndf_plot.rename(columns={\"Total_Purchases\":\"Number of Purchases\", \"ID\":\"Customers\"}, inplace=True)\ndf_plot['Purchase\/Customer'] = df_plot['Number of Purchases']\/df_plot['Customers']\n\nfig = px.bar(df_plot, x=\"Cluster\", y=\"Purchase\/Customer\",\n             color='Cluster',\n             height=400)\nfig.update_layout(title=\"Purchase\/Customer\")\nfig.show()","aa0f03cc":"df_plot = df_[['Total_Purchases', 'Cluster', 'Total_Spend']].groupby(['Cluster']).agg({\"Total_Spend\":\"sum\", \"Total_Purchases\":\"sum\"})\ndf_plot.reset_index(inplace=True)\ndf_plot.rename(columns={\"Total_Purchases\":\"Total Purchases\", \"Total_Spend\":\"Spend\"}, inplace=True)\n\ndf_plot['Spend\/Purchase'] = df_plot['Spend']\/df_plot['Total Purchases']\nfig = px.bar(df_plot, x=\"Cluster\", y=\"Spend\/Purchase\",\n             color='Cluster',\n             height=400)\nfig.update_layout(title=\"Spend\/Customer\")\nfig.show()","39f02cb6":"df_plot = df_[['NumDealsPurchases', 'Cluster', 'ID']].groupby(['Cluster']).agg({\"ID\":\"count\", \"NumDealsPurchases\":\"sum\"})\ndf_plot.reset_index(inplace=True)\ndf_plot.rename(columns={\"ID\":\"Total Customers\", \"NumDealsPurchases\":\"Deals\"}, inplace=True)\n\ndf_plot['Deals\/Customers'] = df_plot['Deals']\/df_plot['Total Customers']\nfig = px.bar(df_plot, x=\"Cluster\", y=\"Deals\/Customers\",\n             color='Cluster',\n             height=400)\nfig.update_layout(title=\"Deals\/Customers\")\nfig.show()","14a2c22e":"df_plot = df_[['Cluster', 'Days_Enrolled']].groupby(['Cluster']).agg({'Days_Enrolled': 'mean'})\ndf_plot.reset_index(inplace=True)\ndf_plot.rename(columns={\"Days_Enrolled\":\"Days since Enrollment\"}, inplace=True)\n\nfig = px.bar(df_plot, x=\"Cluster\", y=\"Days since Enrollment\",\n             color='Cluster',\n             height=400)\nfig.update_layout(title=\"Days since Enrollment\")\nfig.show()","c5808b4e":"### Imputing missing values","05d8e958":"<p>No customer in <b>Cluster 1 & 4<\/b> have just <b>Basic Eduction<\/b>. This makes sense since these are the customers with <b>considerably higher spend<\/b>.<\/p>","7d32c670":"<p><b>Cluster 2<\/b> and <b>Cluster 3<\/b> are high & income high spend segment whereas <b>Cluster 1<\/b> and <b>cluster 4<\/b> are low income and low spend segment.<\/p>","723ae191":"There are outliers in the income and age feature thaat we need to remove","ab4b9e48":"**Cluster 3** customers are the customers since longest and are also the **early adopters** of the company compared to other clusters. **Cluster 2** comes close second to **Cluster 3**.","dce77d04":"Customers belonging to **Cluster 2 & 3** have significantly higher income compared to those belonging to **Cluster 1 & 3.** The spend for **Cluster 3** is highest(higher than **Cluster 2**) while that of **Cluster 4** is lowest.","f1d5f39f":"<p>Customers that shop are mostly in relationhip. This is probably because most of its customers are above 30<\/p>","5eacac05":"# EDA","8af88a8d":"<p><b>Cluster 2 & 3<\/b> have relatively lower deals used per customer eventhough their <b>spend<\/b> is considerbly higher than those of customer belonging to <b>cluster 1 & 4.<\/b> This shows that <b>Cluster 2 & 3<\/b> customers doesn't care as much about deals as compared to <b>Cluster 1 and 4<\/b>.<\/p> ","b91b4b3b":"<p>Most of the customers are in the age group <b>41-50<\/b> and then between <b>51-60<\/b>. There are'nt many customers belonging to age less than 30 maybe because the company is focused more on middle\/old aged customers.<\/p>\n<p>Moreover, in all the age group, majority of the customers belong to <b>Cluster 4<\/b> and <b>Cluster 1<\/b> except for the customers above 60 years of age where <b>Cluster 3<\/b> forms the majority.<\/p>","3a1e0068":"### Scaling","1d9a855d":"### Missing Values","75fe82ae":"### Encoding","204fcfbd":"<p><h3>Clusters<\/h3>\n<ol>\n<li><b>High Income highest Spend(Cluster 3):<\/b> These are the customers that have high income and highest spend per customer. They are also the early adopters of the brand since they have been enrolled since the longest. Their deals per customer is also the lowest indicating that they aren't as concerned with deals compared to other clusters.<\/li>\n<li><b>HIgh Income high Spend(Cluster 2):<\/b> These are the customers that have high income and high spend per customer. They come close second to Cluster 3 in terms of early adoption of brand. Their deals per customer is low although not as low as that of Cluster 1.<\/li> \n<li><b>Low Income Low Spend(Cluster 1):<\/b> These are the customers that have low income and low spend per customer.<\/i>\n<li><b>Low Income Lowest Spend(Cluster 4):<\/b> These are the customers that have low income and lowest spend per customer.<p>","eb858af4":"### Feature Engineering","7d74f801":"### Clustering"}}