{"cell_type":{"1ed88356":"code","901c3403":"code","ff7e8429":"code","9e15f362":"code","8e5c2dbf":"code","72731eb6":"code","f0bc2b27":"code","0f67c6bf":"code","27647bf2":"code","ab56fe25":"code","1e2370cf":"code","7bf05db5":"code","04488b2b":"code","3135ee1b":"code","df5ba40a":"code","bd116b46":"code","e85f74e0":"code","6dfd9ef0":"code","2f4f76ea":"code","d1862b87":"code","693f10ed":"code","debeaef3":"code","f407fd49":"code","af07b4f4":"code","de38638c":"code","1ee6f7dc":"code","59ed01af":"code","7a87a0bb":"code","73f9eab3":"code","3c7a67a9":"code","a30fd12e":"code","d3aab33f":"code","c21e1da5":"code","3112215c":"code","e2eb32ad":"markdown","02623618":"markdown","aacab5b5":"markdown","e89e4193":"markdown","bb483ad5":"markdown","ac3a6dfe":"markdown","abef9fe6":"markdown","ff4fec08":"markdown","9c8d415b":"markdown","30b1b23b":"markdown","3d48021e":"markdown"},"source":{"1ed88356":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","901c3403":"np.random.seed(2020)","ff7e8429":"!mkdir train test\n!unzip -q \/kaggle\/input\/dogs-vs-cats-redux-kernels-edition\/train.zip -d train\n!unzip -q \/kaggle\/input\/dogs-vs-cats-redux-kernels-edition\/test.zip -d test","9e15f362":"import random\nimport json\nimport csv\n\nfrom matplotlib import pyplot as plt\n%matplotlib inline\n\nimport keras\nfrom keras.models import Sequential\nfrom keras.layers import Dense, Dropout, Flatten\nfrom keras.layers import Conv2D, MaxPooling2D, GlobalAveragePooling2D\nfrom keras.preprocessing import image\nfrom keras import optimizers","8e5c2dbf":"TRAIN_DIR = '.\/train\/train\/'\nTEST_DIR = '.\/test\/test'\n\nROWS = 150\nCOLS = 150\nCHANNELS = 3\n\nBATCH_SIZE=64\n\n# HyperParams\nEPOCHS=5\ntrain_steps = len(os.listdir(TRAIN_DIR))\/BATCH_SIZE\nvalidation_steps = len(os.listdir(TEST_DIR))\/BATCH_SIZE\nlr=1e-4","72731eb6":"original_train_images = [TRAIN_DIR+i for i in os.listdir(TRAIN_DIR)] # use this for full dataset\ntrain_dogs =   [TRAIN_DIR+i for i in os.listdir(TRAIN_DIR) if 'dog' in i]\ntrain_cats =   [TRAIN_DIR+i for i in os.listdir(TRAIN_DIR) if 'cat' in i]\n\ntest_images =  [TEST_DIR+i for i in os.listdir(TEST_DIR)]\n\n# slice datasets for memory efficiency on Kaggle Kernels, delete if using full dataset\noriginal_train_images = train_dogs[:12000] + train_cats[:12000]\n# test_images =  test_images[:100]\n\n# section = int(len(original_train_images) * 0.8)\ntrain_images = original_train_images[:18000]\nvalidation_images = original_train_images[18000:]","f0bc2b27":"len(train_images)","0f67c6bf":"def plot_arr(arr):\n    plt.figure()\n    plt.imshow(image.array_to_img(arr))\n    plt.show()\n\ndef plot(img):\n    plt.figure()\n    plt.imshow(img)\n    plt.show()\n    \ndef prep_data(images):\n    count = len(images)\n    X = np.ndarray((count, ROWS, COLS, CHANNELS), dtype=np.float32)\n    y = np.zeros((count,), dtype=np.float32)\n    \n    for i, image_file in enumerate(images):\n        img = image.load_img(image_file, target_size=(ROWS, COLS))\n        X[i] = image.img_to_array(img)\n        if 'dog' in image_file:\n            y[i] = 1.\n        if i%1000 == 0: print('Processed {} of {}'.format(i, count))\n    \n    return X, y","27647bf2":"X_train, y_train = prep_data(train_images)","ab56fe25":"X_validation, y_validation = prep_data(validation_images)","1e2370cf":"train_datagen = image.ImageDataGenerator(\n    rescale=1.\/255,\n    rotation_range=40,\n    width_shift_range=0.2,\n    shear_range=0.2,\n    zoom_range=0.2,\n    horizontal_flip=True)\n\nvalidation_datagen = image.ImageDataGenerator(rescale=1.\/255)","7bf05db5":"train_generator = train_datagen.flow(\n    X_train,\n    y_train,\n    batch_size=BATCH_SIZE)\n\nvalidation_generator = validation_datagen.flow(\n    X_validation,\n    y_validation,\n    batch_size=BATCH_SIZE)","04488b2b":"def create_custom_model():\n    model = Sequential()\n    model.add(Conv2D(32, (3, 3), activation='relu', input_shape=(ROWS, COLS, CHANNELS)))\n    model.add(Conv2D(32, (3, 3), activation='relu'))\n    model.add(MaxPooling2D(pool_size=(2, 2)))\n    model.add(Conv2D(64, (3, 3), activation='relu'))\n    model.add(MaxPooling2D(pool_size=(2,2)))\n    model.add(Conv2D(128, (3, 3), activation='relu'))\n    model.add(MaxPooling2D(pool_size=(2,2)))\n    model.add(Conv2D(128, (3, 3), activation='relu'))\n    model.add(MaxPooling2D(pool_size=(2,2)))\n\n    model.add(Flatten())\n    model.add(Dropout(0.5))\n    model.add(Dense(512, activation='relu'))\n    model.add(Dense(1, activation='sigmoid'))\n    \n    return model","3135ee1b":"model = create_custom_model()\nmodel.summary()","df5ba40a":"model.compile(loss='binary_crossentropy',\n             optimizer=optimizers.Adam(lr=lr),\n             metrics=['accuracy'])","bd116b46":"history = model.fit_generator(\n    train_generator,\n    steps_per_epoch=train_steps,\n    epochs=EPOCHS,\n    validation_data=validation_generator,\n    validation_steps=validation_steps,\n    verbose=1)","e85f74e0":"acc = history.history['accuracy']\nval_acc = history.history['val_accuracy']\nloss = history.history['loss']\nval_loss = history.history['val_loss']\nepochs = range(1, len(acc) + 1)\nplt.plot(epochs, acc, 'b', label='Training accuracy')\nplt.plot(epochs, val_acc, 'b', label='Validation accuracy', color='red')\nplt.title('Training and validation accuracy')\nplt.legend()\n\nplt.figure()\n\nplt.plot(epochs, loss, 'b', label='Training loss')\nplt.plot(epochs, val_loss, 'b', label='Validation loss', color='red')\nplt.title('Training and validation loss')\nplt.legend()\nplt.show()","6dfd9ef0":"model = keras.models.Sequential()\nmodel.add(keras.applications.VGG16(include_top=False, pooling='max', weights='imagenet'))\nmodel.add(Dense(1, activation='sigmoid'))\n# ResNet-50 model is already trained, should not be trained\nmodel.layers[0].trainable = True\n\nmodel.compile(loss='binary_crossentropy',\n             optimizer=optimizers.Adam(lr=lr),\n             metrics=['accuracy'])","2f4f76ea":"model.summary()","d1862b87":"history = model.fit_generator(\n    train_generator,\n    steps_per_epoch=train_steps,\n    epochs=EPOCHS,\n    validation_data=validation_generator,\n    validation_steps=validation_steps,\n    verbose=1)","693f10ed":"acc = history.history['accuracy']\nval_acc = history.history['val_accuracy']\nloss = history.history['loss']\nval_loss = history.history['val_accuracy']\nepochs = range(1, len(acc) + 1)\nplt.plot(epochs, acc, 'b', label='Training accuracy')\nplt.plot(epochs, val_acc, 'b', label='Validation acc', color='red')\nplt.title('Training and validation accuracy')\nplt.legend()\n\nplt.figure()\n\nplt.plot(epochs, loss, 'b', label='Training loss')\nplt.plot(epochs, val_loss, 'b', label='Validation loss', color='red')\nplt.title('Training and validation loss')\nplt.legend()\nplt.show()","debeaef3":"model = keras.models.Sequential()\nmodel.add(keras.applications.VGG19(include_top=False, pooling='max', weights='imagenet'))\nmodel.add(Dense(1, activation='sigmoid'))\n# ResNet-50 model is already trained, should not be trained\nmodel.layers[0].trainable = True\n\nmodel.compile(loss='binary_crossentropy',\n             optimizer=optimizers.Adam(lr=lr),\n             metrics=['accuracy'])","f407fd49":"model.summary()","af07b4f4":"history = model.fit_generator(\n    train_generator,\n    steps_per_epoch=train_steps,\n    epochs=EPOCHS,\n    validation_data=validation_generator,\n    validation_steps=validation_steps,\n    verbose=1)","de38638c":"acc = history.history['accuracy']\nval_acc = history.history['val_accuracy']\nloss = history.history['loss']\nval_loss = history.history['val_loss']\nepochs = range(1, len(acc) + 1)\nplt.plot(epochs, acc, 'b', label='Training accuracy')\nplt.plot(epochs, val_acc, 'b', label='Validation accuracy', color='red')\nplt.title('Training and validation accuracy')\nplt.legend()\n\nplt.figure()\n\nplt.plot(epochs, loss, 'b', label='Training loss')\nplt.plot(epochs, val_loss, 'b', label='Validation loss', color='red')\nplt.title('Training and validation loss')\nplt.legend()\nplt.show()","1ee6f7dc":"model = keras.models.Sequential()\nmodel.add(keras.applications.ResNet50(include_top=False, pooling='max', weights='imagenet'))\nmodel.add(Dense(1, activation='sigmoid'))\n# ResNet-50 model is already trained, should not be trained\nmodel.layers[0].trainable = True\n\nmodel.compile(loss='binary_crossentropy',\n             optimizer=optimizers.Adam(lr=lr),\n             metrics=['accuracy'])","59ed01af":"model.summary()","7a87a0bb":"history = model.fit_generator(\n    train_generator,\n    steps_per_epoch=train_steps,\n    epochs=EPOCHS,\n    validation_data=validation_generator,\n    validation_steps=validation_steps,\n    verbose=1)","73f9eab3":"acc = history.history['accuracy']\nval_acc = history.history['val_accuracy']\nloss = history.history['loss']\nval_loss = history.history['val_loss']\nepochs = range(1, len(acc) + 1)\nplt.plot(epochs, acc, 'b', label='Training acc')\nplt.plot(epochs, val_acc, 'b', label='Validation acc', color='red')\nplt.title('Training and validation accuracy')\nplt.legend()\n\nplt.figure()\n\nplt.plot(epochs, loss, 'b', label='Training loss')\nplt.plot(epochs, val_loss, 'b', label='Validation loss', color='red')\nplt.title('Training and validation loss')\nplt.legend()\nplt.show()","3c7a67a9":"model = keras.models.Sequential()\nmodel.add(keras.applications.ResNet101(include_top=False, pooling='max', weights='imagenet'))\nmodel.add(Dense(1, activation='sigmoid'))\n# ResNet-50 model is already trained, should not be trained\nmodel.layers[0].trainable = True\n\nmodel.compile(loss='binary_crossentropy',\n             optimizer=optimizers.Adam(lr=lr),\n             metrics=['accuracy'])","a30fd12e":"model.summary()","d3aab33f":"history = model.fit_generator(\n    train_generator,\n    steps_per_epoch=train_steps,\n    epochs=EPOCHS,\n    validation_data=validation_generator,\n    validation_steps=validation_steps,\n    verbose=1)","c21e1da5":"acc = history.history['accuracy']\nval_acc = history.history['val_accuracy']\nloss = history.history['loss']\nval_loss = history.history['val_loss']\nepochs = range(1, len(acc) + 1)\nplt.plot(epochs, acc, 'b', label='Training accuracy')\nplt.plot(epochs, val_acc, 'b', label='Validation accuracy', color='red')\nplt.title('Training and validation accuracy')\nplt.legend()\n\nplt.figure()\n\nplt.plot(epochs, loss, 'b', label='Training loss')\nplt.plot(epochs, val_loss, 'b', label='Validation loss', color='red')\nplt.title('Training and validation loss')\nplt.legend()\nplt.show()","3112215c":"!rm -rf train\n!rm -rf test","e2eb32ad":"## VGG-16","02623618":"# Comparing vision models\n\n![Banner](https:\/\/miro.medium.com\/max\/1920\/1*oB3S5yHHhvougJkPXuc8og.gif)\n\nIn this notebook, we are going to compare a few models on the dog vs cats classification. We will *not* be working for some state of the art results or implement some cutting edge technique, but are going to compare a few models. The models will be compared on a set of fixed hyper-parameters which could be tuned and tweak as per the requirement.\n\nWe are going to compare the following models:\n1. [Custom plain convolution model](#Custom-Model)\n2. [VGG-16](#VGG-16)\n3. [VGG-19](#VGG-19)\n3. [ResNet50](#ResNet50)\n4. [ResNet101](#ResNet101)","aacab5b5":"### Implementing ResNet in Keras","e89e4193":"## ResNet50","bb483ad5":"## Custom Model","ac3a6dfe":"VGG16 is a convolutional neural network model proposed by K. Simonyan and A. Zisserman from the University of Oxford in the paper \u201cVery Deep Convolutional Networks for Large-Scale Image Recognition\u201d. The model achieves 92.7% top-5 test accuracy in ImageNet, which is a dataset of over 14 million images belonging to 1000 classes. It was one of the famous model submitted to ILSVRC-2014. It makes the improvement over AlexNet by replacing large kernel-sized filters (11 and 5 in the first and second convolutional layer, respectively) with multiple 3\u00d73 kernel-sized filters one after another. \n\n![VGG-16](https:\/\/xgkfq28377.i.lithium.com\/t5\/image\/serverpage\/image-id\/8241i196E2A78143567C5\/image-size\/medium?v=1.0&px=400)\n\nThe input to cov1 layer is of fixed size 224 x 224 RGB image. The image is passed through a stack of convolutional (conv.) layers, where the filters were used with a very small receptive field: 3\u00d73 (which is the smallest size to capture the notion of left\/right, up\/down, center). In one of the configurations, it also utilizes 1\u00d71 convolution filters, which can be seen as a linear transformation of the input channels (followed by non-linearity). The convolution stride is fixed to 1 pixel; the spatial padding of conv. layer input is such that the spatial resolution is preserved after convolution, i.e. the padding is 1-pixel for 3\u00d73 conv. layers. Spatial pooling is carried out by five max-pooling layers, which follow some of the conv.  layers (not all the conv. layers are followed by max-pooling). Max-pooling is performed over a 2\u00d72 pixel window, with stride 2.\n\nThree Fully-Connected (FC) layers follow a stack of convolutional layers (which has a different depth in different architectures): the first two have 4096 channels each, the third performs 1000-way ILSVRC classification and thus contains 1000 channels (one for each class). The final layer is the soft-max layer. The configuration of the fully connected layers is the same in all networks.\n\nThe Network architecture is as follows:\n![architecture](https:\/\/neurohive.io\/wp-content\/uploads\/2018\/11\/Capture-564x570.jpg)\n\nHere is a link to the sample VGG network for Keras: \n[Keras code of VGG-16](https:\/\/gist.github.com\/baraldilorenzo\/07d7802847aaad0a35d3)","abef9fe6":"## Setting up the data\n\nFirst of all, we are going to setup the data paths and files into required variables.","ff4fec08":"> This was one of the bottlenecks of VGG. They couldn\u2019t go as deep as wanted, because they started to lose generalization capability.\n\nTo solve this problem, Resnets were introduced. \nOne of the problems ResNets solve is the famous known vanishing gradient. This is because when the network is too deep, the gradients from where the loss function is calculated easily shrink to zero after several applications of the chain rule. This result on the weights never updating its values and therefore, no learning is being performed.\n\nWith ResNets, **the gradients can flow directly through the skip connections backwards from later layers to initial filters.**\n\n![Resnet](https:\/\/miro.medium.com\/max\/1524\/1*6hF97Upuqg_LdsqWY6n_wg.png)\n\nSince ResNets can have variable sizes, depending on how big each of the layers of the model are, and how many layers it has, we will follow the described by the authors in the paper [1] \u2014 ResNet 34 \u2014 in order to explain the structure after these networks.\n\nIn here we can see that the ResNet (the one on the right) consists on one convolution and pooling step (on orange) followed by 4 layers of similar behavior.\n\nEach of the layers follow the same pattern. They perform 3x3 convolution with a fixed feature map dimension (F) [64, 128, 256, 512] respectively, bypassing the input every 2 convolutions. Furthermore, the width (W) and height (H) dimensions remain constant during the entire layer.\n\nThe dotted line is there, precisely because there has been a change in the dimension of the input volume (of course a reduction because of the convolution). Note that this reduction between layers is achieved by an increase on the stride, from 1 to 2, at the first convolution of each layer; instead of by a pooling operation, which we are used to see as down samplers.\nIn the table, there is a summary of the output size at every layer and the dimension of the convolutional kernels at every point in the structure.\n\n![Resnet Table](https:\/\/miro.medium.com\/max\/936\/1*I2557MCaFdNUm4q9TfvOpw.png)\n\nNow in order to calculate the shape of the upcoming block, here is what should be done:\n\n![block](https:\/\/miro.medium.com\/max\/680\/1*CJn_fMeW4m2OSt71jzO4WA.png)\n\n![block2](https:\/\/miro.medium.com\/max\/904\/1*_kbJ_fvRhVPQ1fRRssEwhA.png)\n\n\n\nTo understand the function of every single block in Residual Network, you should refer to an amazing blog : [Understanding and visualizing ResNets](https:\/\/towardsdatascience.com\/understanding-and-visualizing-resnets-442284831be8)","9c8d415b":"The differences between the \u201cVGG-16 Neural Network\u201d and the \u201cVGG-19 Neural Network\u201d are as follows respectively:\n\n1. The \u201cVGG-19 Neural Network\u201d consists of 19 layers of deep neural network whereas the \u201cVGG-16 Neural Network\u201d consists of 16 layers of deep neural network respectively.\n2. The smaller number in terms of deep neural network is used for \u201cImageNet\u201d and the other bigger number in terms of deep neural network is used for \u201cCIFAR-10\u201d respectively.\n3. The size of the \u201cVGG-16\u201d network in terms of fully connected nodes is 533 MB. and the size of the \u201cVGG-19\u201d network in terms of fully connected nodes is 574 MB. respectively.\n4. The smaller net neural network in terms of \u201cVGG-16\u201d are more desirable like \u201cSqueezenet\u201d, \u201cGoogLeNet\u201d etc. , whereas the more larger net in terms of neural network employs certain deep learning techniques as well as certain image classification problems as well respectively.\n\nSo, this was all about the most basic difference between the \u201cVGG-16\u201d and the \u201cVGG-19\u201d Neural Networks respectively, and what does they actually mean and also what does they stands for and what are their file size and also what does they actually deployed and implemented in terms of various \u201cNeural Networks\u201d respectively.There are many more differences between them, but these were some of the very most basic differences between these two types of the \u201cNeural Networks\u201d respectively.","30b1b23b":"# VGG-19","3d48021e":"## Unloading the datasets"}}