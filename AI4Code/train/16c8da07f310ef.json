{"cell_type":{"e4cd50a9":"code","ac16a1a0":"code","2c231351":"code","957bcc9b":"code","46317734":"code","7e6e362f":"code","fc9f8f1e":"code","4b76257d":"code","5dc544bb":"code","cef3b5cd":"code","616a46e6":"code","53511701":"code","78b865c3":"code","f29c468e":"code","7add608b":"code","e0a1d4fb":"code","af14a355":"code","7157dba3":"code","9662bbe9":"code","02d30057":"code","448ffe24":"code","3691c623":"code","48da38b3":"code","e86051e7":"code","8b994910":"code","de0e4784":"code","7f757d0b":"code","4db575c8":"code","26e2b471":"code","2ce92dd8":"code","bdb9a85c":"code","75d8506c":"code","4c2d6b37":"code","58fc3a28":"code","8e205011":"code","aec504b4":"code","b8de80fc":"code","ac4e6e20":"code","e6375676":"code","06004b47":"code","4182d883":"code","db555fe4":"code","4ad6d930":"code","5b0e4f8e":"code","6f642ec5":"code","9e7111d9":"code","876af642":"code","9999ec4a":"code","0364d67a":"code","d1d43d67":"code","520d730d":"code","1763be30":"code","07d1bae5":"code","ec517f33":"code","46ca2f97":"code","fab3d7c7":"code","695c6964":"code","4c367f53":"code","3e3aa5bd":"markdown","8c56487b":"markdown","31fb62e6":"markdown","4d80b57b":"markdown","76f0e60d":"markdown","b32be301":"markdown","c3800cb7":"markdown","8f96b8d4":"markdown","eafeed6e":"markdown","9f1d5e64":"markdown","0e11892e":"markdown","4fbfddaf":"markdown","c64d5011":"markdown","5e2a9b74":"markdown","47c31cf5":"markdown","c80834a8":"markdown","824a7742":"markdown","ceb2ee72":"markdown","55898bd9":"markdown","15fc315f":"markdown","d5267be6":"markdown","fe26cd7b":"markdown","b1b4f2af":"markdown","6b0e3cdc":"markdown","7e220b28":"markdown","bc7db784":"markdown","31305dcf":"markdown","16486276":"markdown","9a6b27c5":"markdown","cf677be3":"markdown","f2983096":"markdown","1231e9a0":"markdown"},"source":{"e4cd50a9":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n%matplotlib inline","ac16a1a0":"heros = pd.read_csv('..\/input\/heroes_information.csv')\npowers = pd.read_csv('..\/input\/super_hero_powers.csv')","2c231351":"heros.head()","957bcc9b":"powers.head()","46317734":"print(heros.shape)\nprint(powers.shape)","7e6e362f":"heros.loc[heros['name']== 'Superman']['Alignment']","fc9f8f1e":"heros.loc[heros['name'] == 'Thanos']['Alignment']","4b76257d":"heros['Alignment'].unique()","5dc544bb":"sum(heros['name'].isna())","cef3b5cd":"heros.drop(['Unnamed: 0'], axis = 1, inplace = True)","616a46e6":"heros.head()","53511701":"heros.info()","78b865c3":"powers.info()","f29c468e":"sum(heros['Publisher'].isna())","7add608b":"heros.replace('-','unknown',inplace=True)","e0a1d4fb":"heros.info()","af14a355":"heros['Weight'].value_counts()","7157dba3":"#relace the -99 to nan\nheros.replace(-99,np.nan,inplace=True)\n","9662bbe9":"heros['Weight'].value_counts()","02d30057":"heros['Weight'].isna().sum()","448ffe24":"ht_wt = heros[['Weight','Height']]","3691c623":"ht_wt.head(2)","48da38b3":"#applay the imputer\nfrom sklearn.impute import SimpleImputer\n\nimputer = SimpleImputer(strategy = 'median')\nX = imputer.fit_transform(ht_wt)\nhero_h_w = pd.DataFrame(X,columns = ht_wt.columns)","e86051e7":"hero_h_w.head()","8b994910":"hero_h_w.isna().sum()","de0e4784":"heros_wo_h_w = heros.drop(['Weight','Height'], axis = 1)","7f757d0b":"heros_wo_h_w.head()","4db575c8":"heros = pd.concat([heros_wo_h_w,hero_h_w],axis =1)","26e2b471":"heros.head(5)","2ce92dd8":"heros['Publisher'].value_counts()","bdb9a85c":"publisher_series = heros['Publisher'].value_counts()\npublishers = list(publisher_series.index)\npublications = list((publisher_series\/publisher_series.sum())*100)","75d8506c":"colors = sns.color_palette()","4c2d6b37":"plt.pie(publications,labels=publishers,colors=colors,autopct='%1.2f%%')\nfig = plt.gcf()\nfig.set_size_inches(10,8)\nplt.show()","58fc3a28":"import plotly as py\nimport plotly.graph_objs as go\nfrom plotly import tools\n#py.init_notebook_mode(connected =True)","8e205011":"draw = go.Pie(labels=publishers, values=publications)\n\nlayout = go.Layout(title ='%age publications by publishers',height = 600,width = 600)\ndata = [draw]\nfig = go.Figure(data = data,layout=layout)\npy.offline.iplot(fig,filename=\"publications-by-publishers\")","aec504b4":"heros.loc[heros['name']=='Deadpool']","b8de80fc":"heros['Alignment'].unique()","ac4e6e20":"df = pd.DataFrame(columns=['Publisher','total-heros','total-villans','total-nuetral','total-unknow'])\n\nfor publisher in publishers:\n    data =[]\n    data.append(publisher)\n    data.append(len(heros.loc[(heros['Alignment'] == 'good') & (heros['Publisher']==publisher),'name']))\n    data.append(len(heros.loc[(heros['Alignment'] == 'bad') & (heros['Publisher']==publisher),'name']))\n    data.append(len(heros.loc[(heros['Alignment'] == 'neutral') & (heros['Publisher']==publisher),'name']))\n    data.append(len(heros.loc[(heros['Alignment'] == 'unknown') & (heros['Publisher']==publisher),'name']))\n    \n    df.loc[len(df)] = data","e6375676":"df.head(5)","06004b47":"N = len(df)\nidx = np.arange(N)\ncolor_list = ['G','R','B','O']\ngap = 0.35\n\nplt.bar(idx,df['total-heros'], label = 'Heros', width = gap)\nplt.bar(idx,df['total-villans'], label = 'Villans', width = gap)\nplt.bar(idx,df['total-nuetral'], label = 'Nuetral', width = gap)\nplt.bar(idx,df['total-unknow'], label = 'Unknown', width = gap)\nplt.legend()\n\nplt.show()","4182d883":"#using plotly\nblock1 = go.Bar(x = list(df['Publisher']), y = list(df['total-heros']),name = 'total-heros')\nblock2 = go.Bar(x = list(df['Publisher']), y = list(df['total-villans']),name = 'total-villans')\nblock3 = go.Bar(x = list(df['Publisher']), y = list(df['total-nuetral']),name = 'total-nuetral')\nblock4 = go.Bar(x = list(df['Publisher']), y = list(df['total-unknow']),name = 'total-unknown')\n\ndata_obj = [block1,block2,block3,block4]\nlayout = go.Layout(title='count of character allignment',barmode='group')\nfig = go.Figure(data = data_obj, layout = layout)\npy.offline.iplot(fig,filename='bar')","db555fe4":"gender_series = heros['Gender'].value_counts()\ngenders = list(gender_series.index)\ndistribution = list((gender_series\/gender_series.sum())*100)\n\ndraw = go.Pie(labels = genders, values = distribution)\nlayout = go.Layout(title='gender wise distriburion of supper heros',height =600, width =600)\ndata_obj = [draw]\nfig = go.Figure(data = data_obj, layout=layout)\n\npy.offline.iplot(fig,filename='gender disrtibutiongender wise distriburion of supper heros')","4ad6d930":"heros_gender_series = heros['Gender'].loc[heros['Alignment'] =='good'].value_counts()\nheros_gender = list(heros_gender_series.index)\nheros_distribution = list((heros_gender_series\/heros_gender_series.sum())*100)\n\nvillans_gender_series = heros['Gender'].loc[heros['Alignment'] =='bad'].value_counts()\nvillans_gender = list(heros_gender_series.index)\nvillans_distribution = list((heros_gender_series\/heros_gender_series.sum())*100)\n\nneutrals_gender_series = heros['Gender'].loc[heros['Alignment'] =='neutrals'].value_counts()\nneutrals_gender = list(heros_gender_series.index)\nneutrals_distribution = list((heros_gender_series\/heros_gender_series.sum())*100)\n\nunknown_gender_series = heros['Gender'].loc[heros['Alignment'] =='unknown'].value_counts()\nunknown_gender = list(heros_gender_series.index)\nunknown_distribution = list((heros_gender_series\/heros_gender_series.sum())*100)\n","5b0e4f8e":"fig ={\n    'data':[\n        {\n                'labels':heros_gender,\n                'values':heros_distribution,\n                'type':'pie',\n                'hole':0.4\n               #\"name\":'heros',\n                #'domain':{'row'=0,'coloumn'=0}\n        },\n        {\n            'labels':villans_gender,\n            'values':villans_distribution,\n            'type':'pie',\n            'hole':0.4\n            #'name':'villans',\n            #'domain':{'row'=0,'coloumn'=1}\n        },\n         {\n            'labels':neutrals_gender,\n            'values':neutrals_distribution,\n            'type':'pie',\n            'hole':0.4\n           #'name':'nuetrals',\n            #'domain':{'row'=1,'coloumn'=0}\n        },\n        {\n            'labels':unknown_gender,\n            'values':unknown_distribution,\n            'type':'pie',\n            'hole':0.4\n            #'name':'nuetrals',\n           # 'domain':{'row'=1,'coloumn'=1}\n        }\n    ],\n    'layout':{\n        'title':'Gender distributions by alignment',\n        'grid' : {'rows':2, 'columns':2},\n        'height':650,\n        'width':650\n    }\n}\npy.offline.iplot(fig,filename='Gender distributions by alignment')","6f642ec5":"#Bar Graph\nmale_df = heros.loc[heros['Gender']=='Male']\nfemale_df = heros.loc[heros['Gender']=='Female']","9e7111d9":"trace_m = go.Bar(\n    x = male_df['Alignment'].value_counts().index,\n    y = male_df['Alignment'].value_counts().values,\n   name='Male'\n)\n\ntrace_f = go.Bar(\n    x = female_df['Alignment'].value_counts().index,\n    y = female_df['Alignment'].value_counts().values,\n    name= 'female'\n)\n\ndata_obj = [trace_m,trace_f]\nlayout = go.Layout(title='characters by their gender by alignment',barmode = 'group')\nfig = go.Figure(data = data_obj,layout=layout)\npy.offline.iplot(fig,filename='characters by their gender by alignment')","876af642":"heros['Race'].unique()","9999ec4a":"trace = go.Bar(\n    x = heros['Race'].value_counts().index,\n    y = heros['Race'].value_counts().values,\n    name=\"Races\"\n)\n\nlayout = go.Layout(\n    title=\"distribution across different races\"\n)\n\nfig = go.Figure(data=[trace], layout=layout)\npy.offline.iplot(fig, filename='distribution across different races')","0364d67a":"heros['Hair color'].unique()","d1d43d67":"# distribution of bald and chacarters with hair\n\nheros['bald_or_not'] = heros['Hair color'].where(heros['Hair color']=='No Hair', other='Hair')\n\nheros.head()","520d730d":"trace = go.Bar(\n    x = heros['bald_or_not'].value_counts().index,\n    y = heros['bald_or_not'].value_counts().values,\n    name='bald vs not bald',\n    text=['not bald', 'bald']\n)\n\nlayout = go.Layout(\n    title = 'bald vs not bald'\n)\n\nfig = go.Figure(data=[trace], layout=layout)\npy.offline.iplot(fig, filename='bald vs not bald')","1763be30":"powers.head()","07d1bae5":"powers = powers * 1\npowers.head(2)","ec517f33":"powers.loc[:,'total_powers'] = powers.iloc[:, 1:].sum(axis=1)\npowers.head()","46ca2f97":"# most powerfull superhero\n\npowers.sort_values(by='total_powers', ascending=False).head()","fab3d7c7":"# using seaborn\n\nplt.figure(figsize=(15,10))\nsns.barplot(powers['hero_names'], powers['total_powers'], alpha=1)\nplt.title(\"total powers by characters\", fontsize=20)\nplt.xticks(rotation=90)\nplt.ylabel(\"total powers\", fontsize=14)\nplt.xlabel(\"comic characters\", fontsize=14)\nplt.show()","695c6964":"# using plotly\n\ntrace = go.Bar(\n    x=powers['hero_names'],\n    y=powers['total_powers'],\n    text = ['names','total_powers']\n)\n\nlayout = go.Layout(\n    title = \"comic character by total powers they have\"\n)\n\nfig = go.Figure(data=[trace], layout=layout)\npy.offline.iplot(fig, filename=\"most powerful superhero\")","4c367f53":"top_30_powerful = powers.sort_values('total_powers', ascending=False).head(30)\n\ntrace = go.Bar(\n    x = top_30_powerful['hero_names'],\n    y = top_30_powerful['total_powers'],\n    text = ['names', 'total_powers']\n)\n\nlayout =go.Layout(\n    title=\"top 30 most powerful hero\"\n)\n\nfig = go.Figure(data=[trace], layout=layout)\npy.offline.iplot(fig, filename=\"top 30\")","3e3aa5bd":"drop the colomn Unnamed: 0 form the data frame permanetly","8c56487b":"Load the data","31fb62e6":"miising value counts","4d80b57b":"### most powerfull charatcter","76f0e60d":"pie chart of publishers","b32be301":"#  Analysis on Super Powers","c3800cb7":"Using the plotly for the above pie plot","8f96b8d4":"now see hero_h_w daa frame","eafeed6e":"GENDER DIST","9f1d5e64":"Bar graph for the df data frame","0e11892e":"there are more super heros than required ;)","4fbfddaf":"Now drop the height and weight from the original DF and concatinate the hero_h_w to the original one","c64d5011":"allignment fiels of superman and thanos","5e2a9b74":"import color pallet from seaborn","47c31cf5":"Concat the 2 DF","c80834a8":"less female comic chars","824a7742":"Distribution of publishers b % publications","ceb2ee72":"before applaying the imputer make a new data frame of only height and wieght","55898bd9":"GENDER DISTRIBUTION BY ALLIGNMNET","15fc315f":"**EDA ON SUERHEROS**","d5267be6":"distibution across the race","fe26cd7b":"shape of data sets","b1b4f2af":"to replace the nan value with the median value, we will use the imputer by sklean","6b0e3cdc":"to know the value counts of wieghts","7e220b28":"replace the -99 into NaN value","bc7db784":"Imports","31305dcf":"check for any na's","16486276":"## to find top 30 super","9a6b27c5":"to conver into true and false into 1's and 0's","cf677be3":"let me check the allignment of deadpool","f2983096":"**Some Insights**","1231e9a0":"prepare a DF based on allignment"}}