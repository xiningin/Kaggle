{"cell_type":{"f00964c1":"code","1d6ae90c":"code","2d9343e0":"code","7b816395":"code","b8041a78":"code","24e7f573":"code","5474a050":"code","d1d71ece":"code","2f17afbc":"code","568952df":"code","826ab6e0":"code","7215d194":"code","5ed71233":"code","9a84d14a":"code","a60ee027":"code","f97b4ebc":"code","04bffdb6":"code","558a2517":"code","440c8259":"code","9014aa82":"code","6f821b43":"code","1a2b4a71":"code","c58163cb":"code","5e9f5a5c":"code","a09ab1cf":"code","cf045a24":"code","89298024":"markdown","add5fdb3":"markdown","9b578b81":"markdown","75c20243":"markdown","1d1e1ccf":"markdown","ecefabc1":"markdown","92a132de":"markdown","9efe5801":"markdown","344cc938":"markdown","dcf052d6":"markdown","f2cd2418":"markdown","1088270a":"markdown","9cce25ff":"markdown","d5633146":"markdown","b8d12b10":"markdown","c37235da":"markdown","89faefb9":"markdown"},"source":{"f00964c1":"import numpy  as np\nimport pandas  as pd\nimport matplotlib.pyplot  as plt\nfrom sklearn.model_selection import train_test_split\nimport catboost\nfrom catboost import CatBoostClassifier, Pool, cv\nfrom sklearn.metrics import f1_score # f1_score(y_true, y_pred, average='macro')\nimport shap","1d6ae90c":"train = pd.read_csv('..\/input\/mf-accelerator\/contest_train.csv')\ntest = pd.read_csv('..\/input\/mf-accelerator\/contest_test.csv')","2d9343e0":"train['TARGET'].plot.hist()\nplt.xticks(train['TARGET'].unique());","7b816395":"train.info(verbose=True, null_counts=True)","b8041a78":"def empty_features(test=test, train=train, threshhold=0, verbose=False):\n    if verbose:\n        print(' column \\t test \\t\\t train\\n', '*'*40)\n    i=1\n    empty_list=[]\n    for col in test.columns:\n        percentage_train = (train[col].isnull().sum()\/len(train))*100\n        percentage_test = (test[col].isnull().sum()\/len(test))*100\n        if percentage_train and percentage_test:\n            if ((percentage_test>=threshhold)|(percentage_train>=threshhold)):\n                empty_list.append(col)\n                if verbose:\n                    print(i,'{}{} % \\t{} %'.format(col.ljust(15,' '), round(percentage_test, 3), round(percentage_train,3 )))\n                    i+=1\n    return empty_list","24e7f573":"extra_features=empty_features(verbose=True, threshhold=45) # features with more then 45% (threshold) empty values in both datasets\nextra_features.append('ID') # have no usefull info either\n\nextra_features","5474a050":"train1 = train.copy()\ntest1 = test.copy()\ntrain1.drop(extra_features, axis=1, inplace=True)\ntest1.drop(extra_features, axis=1, inplace=True)","d1d71ece":"only_1_value = [feature for feature in train1.nunique().index if train1.nunique()[feature]==1]\nonly_1_value","2f17afbc":"train1.drop(only_1_value, axis=1, inplace=True)\ntest1.drop(only_1_value, axis=1, inplace=True)","568952df":"len(train1)","826ab6e0":"searching_for_cat = train1.nunique().sort_values(ascending=True)\ncat_features = [feature for feature in searching_for_cat.index if ((searching_for_cat[feature]<=(len(train)\/1000))&(feature!='TARGET'))]\nsearching_for_cat = train1[cat_features].nunique().sort_values(ascending=True)\n\nlen(searching_for_cat)","7215d194":"fig,ax = plt.subplots(figsize=(20,3))\n\nax.bar(searching_for_cat[::-1].index, searching_for_cat[::-1].values);\nfor label in ax.get_xmajorticklabels():\n    label.set_rotation(45)\n    label.set_horizontalalignment(\"right\")","5ed71233":"def pipelining_preprocessor_for_catboost(df1, dropcolls = None, filler = 'pop', target = None): # return processed  dataFrame\n    df = df1.copy()\n    if target:\n        y = df[target]\n        df.drop(target, axis=1, inplace=True)\n    if dropcolls:\n        df.drop(dropcolls, axis=1, inplace=True)\n    def fill_empty_by_pop(df, filler=filler): # filler for empty values in cols by most popular values (order columns by original)\n        df_nums = df.select_dtypes(exclude='object')\n        if filler == 'pop':\n            digits = df_nums.median()\n        elif filler == 'zero':\n            digits = 0\n        elif filler == 'out_of_range':\n            digits = -9999\n        else:\n            raise ValueError('filler vallues is not allowed [\"zero\", \"pop\", \"out_of_range\"]')\n        return df_nums.fillna(digits)[df.columns]\n    output = fill_empty_by_pop(df, filler=filler)\n    if target:\n        return output,y\n    else:\n        return output","9a84d14a":"X,y = pipelining_preprocessor_for_catboost(train, filler='out_of_range', target='TARGET', dropcolls=extra_features+only_1_value)","a60ee027":"X[cat_features] = X[cat_features].astype(np.int)","f97b4ebc":"from sklearn.model_selection import train_test_split\nX_train, X_val, y_train, y_val = train_test_split(X, y, test_size=0.2, random_state=2, shuffle=True)\n\nX_test = pipelining_preprocessor_for_catboost(test, filler='out_of_range', dropcolls=extra_features+only_1_value)\nX_test[cat_features] = X_test[cat_features].astype(np.int)","04bffdb6":"len(X.columns), len(train.columns) # \u0432\u044b\u0431\u0440\u043e\u0441\u0438\u043b\u0438 \u043d\u0435\u043d\u0443\u0436\u043d\u044b\u0435 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0438","558a2517":"# \u0441\u043e\u0437\u0434\u0430\u0435\u043c \u043e\u0431\u0443\u0447\u0430\u044e\u0449\u0438\u0439 \u043f\u0443\u043b\ntrain_pool = catboost.Pool(X_train, y_train, cat_features=cat_features)\nval_pool = catboost.Pool(X_val, y_val, cat_features=cat_features)\ntest_pool = catboost.Pool(X_test, cat_features=cat_features)\nfull_pool = catboost.Pool(X, y, cat_features=cat_features)","440c8259":"model = CatBoostClassifier(\n    eval_metric='TotalF1:average=Macro', # \u043c\u0435\u0442\u0440\u0438\u043a\u0430, \u0437\u0430\u044f\u0432\u043b\u0435\u043d\u043d\u0430\u044f \u043e\u0440\u0433\u0430\u043d\u0438\u0437\u0430\u0442\u043e\u0440\u0430\u043c\u0438\n    loss_function='MultiClass',\n    iterations=600,\n    random_seed=2,\n    auto_class_weights='Balanced', \n    random_strength=1, \n    l2_leaf_reg=18, learning_rate=0.005, \n    max_ctr_complexity=1, \n    max_depth = 12, grow_policy='SymmetricTree',\n    task_type='GPU', # \u0434\u043b\u044f \u0443\u0441\u043a\u043e\u0440\u0435\u043d\u0438\u044f, \u043c\u043e\u0436\u043d\u043e \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c \u0432\u044b\u0447\u0438\u0441\u043b\u0435\u043d\u0438\u044f \u043d\u0430 \u0433\u0440\u0430\u0444. \u043f\u0440\u043e\u0446\u0435\u0441\u0441\u043e\u0440\u0435\n)","9014aa82":"'''\ncat_params = {\n    'learning_rate':[0.005, 0.001, 0.0001], # 0.005\n    'l2_leaf_reg' : [12, 18, 30], # 18\n}\n\ngrid_search_results = model.grid_search(cat_params, full_pool, plot=True,\n                                          cv = 5, stratified=True, shuffle=True,\n                                          search_by_train_test_split=False,\n                                          partition_random_seed=2)\ngrid_search_results['params']\n'''","6f821b43":"model.fit(train_pool, eval_set=val_pool, plot=False)\n# model.fit(full_pool, plot=False)","1a2b4a71":"shap_values = model.get_feature_importance(train_pool, type='ShapValues')\n\noriginal_shape = shap_values.shape\nshap_values_transposed = shap_values.transpose(1, 0, 2)\n\nshap.summary_plot(\n    list(shap_values_transposed[:,:,:-1]),\n    features=X_train,\n    class_names=y_train.unique(),\n    plot_type='bar',\n    max_display=15,\n)","c58163cb":"vals= np.abs(shap_values).mean(0)\n\nfeature_importance_shap = pd.DataFrame(list(zip(X_train.columns, sum(vals))), columns=['feature','feature_importance_shap'])\nfeature_importance_shap.sort_values(by=['feature_importance_shap'], ascending=False, inplace=True)\nfeature_importance_shap.reset_index(inplace=True, drop=True)\nfeature_importance_shap","5e9f5a5c":"n_features = 125\nnew_cat_features = [feature for feature in feature_importance_shap['feature'][0:n_features] if feature in cat_features]\n\nX_train, X_val, y_train, y_val = train_test_split(X[feature_importance_shap['feature'][0:n_features]], y, test_size=0.2, random_state=2, shuffle=True)\n\nX_test = (pipelining_preprocessor_for_catboost(test, filler='out_of_range', dropcolls=extra_features+only_1_value))[feature_importance_shap['feature'][0:n_features]]\nX_test[new_cat_features] = X_test[new_cat_features].astype(np.int)\n\n# \u0441\u043e\u0437\u0434\u0430\u0435\u043c \u043e\u0431\u0443\u0447\u0430\u044e\u0449\u0438\u0439 \u043f\u0443\u043b\ntrain_pool_2 = catboost.Pool(X_train, y_train, cat_features=new_cat_features)\nval_pool_2 = catboost.Pool(X_val, y_val, cat_features=new_cat_features)\ntest_pool_2 = catboost.Pool(X_test, cat_features=new_cat_features)\nfull_pool_2 = catboost.Pool(X[new_cat_features], y, cat_features=new_cat_features)","a09ab1cf":"model.fit(train_pool_2, eval_set=val_pool_2, plot=False)","cf045a24":"gb_pred = list(map(int, model.predict(test_pool)))\ngb_output = pd.DataFrame({'ID': test['ID'], 'Predicted': gb_pred})\ngb_output.to_csv('submission_catboost.csv', index=False)\ngb_output","89298024":"# \u041f\u0435\u0440\u0432\u0438\u0447\u043d\u044b\u0439 \u0430\u043d\u0430\u043b\u0438\u0437","add5fdb3":"## SHAP \u0434\u043b\u044f \u0430\u043d\u0430\u043b\u0438\u0437\u0430 \u0432\u043a\u043b\u0430\u0434\u0430 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u043e\u0432","9b578b81":"> \u042d\u0442\u0438 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0438 \u0431\u0435\u0441\u043f\u043e\u043b\u0435\u0437\u043d\u044b, \u0442\u0430\u043a \u043a\u0430\u043a \u0443 \u043d\u0438\u0445 \u0442\u043e\u043b\u044c\u043a\u043e 1 \u0443\u043d\u0438\u043a\u0430\u043b\u044c\u043d\u043e\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435 \u0432 \u0442\u0435\u0441\u0442\u0435 \u0438 \u0432 \u0442\u0440\u0435\u0439\u043d\u0435 \u0432\u044b\u043a\u0438\u043d\u0435\u043c \u0438\u0445 \u0442\u043e\u0436\u0435","75c20243":"> \u0424\u0443\u043d\u043a\u0446\u0438\u044f \u0432\u044b\u0448\u0435 \u043f\u043e\u0437\u0432\u043e\u043b\u044f\u0435\u0442 \u0437\u0430\u043f\u043e\u043b\u043d\u0438\u0442\u044c \u043f\u0440\u043e\u043f\u0443\u0441\u043a\u0438 \u0432 \u0434\u0430\u0442\u0430\u0441\u0435\u0442\u0435 3-\u043c\u044f \u0440\u0430\u0437\u043d\u044b\u043c\u0438 \u0441\u043f\u043e\u0441\u043e\u0431\u0430\u043c\u0438(\u044f \u0432\u044b\u0431\u0440\u0430\u043b \u0437\u0430\u043f\u043e\u043b\u043d\u0438\u0442\u044c \u043f\u0440\u043e\u043f\u0443\u0441\u043a\u0438 \u0431\u043e\u043b\u044c\u0448\u0438\u043c \u043e\u0442\u0440\u0438\u0446\u0430\u0442\u0435\u043b\u044c\u043d\u044b\u043c \u0447\u0438\u0441\u043b\u043e\u043c), \u043e\u0442\u0434\u0435\u043b\u0438\u0442\u044c \u0446\u0435\u043b\u0435\u0432\u043e\u0439 \u043f\u0440\u0438\u0437\u043d\u0430\u043a \u043e\u0442 \u043e\u0441\u0442\u0430\u043b\u044c\u043d\u044b\u0445 \u0438 \u0438\u0437\u0431\u0430\u0432\u0438\u0442\u044c\u0441\u044f \u043e\u0442 \u043d\u0435\u043d\u0443\u0436\u043d\u044b\u0445 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u043e\u0432","1d1e1ccf":"> \u0420\u0430\u0441\u043a\u043e\u043c\u043c\u0435\u043d\u0442\u0438\u0440\u0443\u0439\u0442\u0435 \u043a\u043e\u0434 \u0432\u044b\u0448\u0435 \u0434\u043b\u044f \u043e\u0442\u043e\u0431\u0440\u0430\u0436\u0435\u043d\u0438\u044f \u043f\u0440\u043e\u0446\u0435\u0441\u0441\u0430","ecefabc1":"\u0411\u0443\u0434\u0435\u043c \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c CatBoost \u0434\u043b\u044f \u0440\u0435\u0448\u0435\u043d\u0438\u044f \u0437\u0430\u0434\u0430\u0447\u0438","92a132de":"# \u041f\u043e\u0434\u0433\u043e\u0442\u043e\u0432\u043a\u0430 \u0434\u0430\u043d\u043d\u044b\u0445","9efe5801":"## \u0410\u043d\u0430\u043b\u0438\u0437 \u0446\u0435\u043b\u0435\u0432\u043e\u0439 \u0444\u0443\u043d\u043a\u0446\u0438\u0438","344cc938":"# \u041f\u043e\u0441\u043b\u0435\u0434\u043d\u0438\u0439 \u0448\u0430\u0433: \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u0435 csv-\u0444\u0430\u0439\u043b\u0430 \u0434\u043b\u044f \u043e\u0442\u043f\u0440\u0430\u0432\u043a\u0438","dcf052d6":"\u0423\u0434\u0430\u043b\u044f\u0435\u043c \u0441\u043b\u0438\u0448\u043a\u043e\u043c \u043f\u0443\u0441\u0442\u044b\u0435 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0438","f2cd2418":"# \u0421\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u043c\u043e\u0434\u0435\u043b\u0438","1088270a":"\u0412 \u0432\u044b\u0431\u043e\u0440\u043a\u0435 \u043f\u0440\u0438\u0441\u0443\u0442\u0441\u0442\u0432\u0443\u0435\u0442 \u0434\u0438\u0441\u0431\u0430\u043b\u0430\u043d\u0441 \u043a\u043b\u0430\u0441\u0441\u043e\u0432","9cce25ff":"## \u041d\u0430\u0441\u0442\u0440\u043e\u0439\u043a\u0430 \u0433\u0438\u043f\u0435\u0440\u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u043e\u0432","d5633146":"\u0411\u0443\u0434\u0435\u043c \u0441\u0447\u0438\u0442\u0430\u0442\u044c \u043a\u0430\u0442\u0435\u0433\u043e\u0440\u0438\u0430\u043b\u044c\u043d\u044b\u043c\u0438 \u0442\u0435 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0438, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u0438\u0437\u043c\u0435\u043d\u044f\u044e\u0442\u0441\u044f \u0445\u043e\u0442\u044f \u0431\u044b \u0432 \u0442\u044b\u0441\u044f\u0447\u0443 \u0440\u0430\u0437 \u0440\u0435\u0436\u0435, \u0447\u0435\u043c \u0434\u043b\u0438\u043d\u0430 \u0434\u0430\u0442\u0430\u0441\u0435\u0442\u0430","b8d12b10":"> \u0413\u0440\u0430\u0444\u0438\u043a 15 \u0441\u0430\u043c\u044b\u0445 \u0432\u043b\u0438\u044f\u0442\u0435\u043b\u044c\u043d\u044b\u0445 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u043e\u0432 \u043d\u0430 \u0446\u0435\u043b\u0435\u0432\u0443\u044e \u043f\u0440\u0435\u043c\u0435\u043d\u043d\u0443\u044e (\u043f\u043e \u0432\u0435\u0440\u0441\u0438\u0438 \u0441\u043e\u0441\u0442\u0430\u0432\u043b\u0435\u043d\u043d\u043e\u0439 \u043c\u043e\u0434\u0435\u043b\u0438 CatBoostClassifier)","c37235da":"## \u0410\u043d\u0430\u043b\u0438\u0437 \u043d\u0430 \u043f\u0440\u043e\u043f\u0443\u0441\u043a \u0434\u0430\u043d\u043d\u044b\u0445","89faefb9":"## \u041f\u043e\u0438\u0441\u043a \u043a\u0430\u0442\u0435\u0433\u043e\u0440\u0438\u0430\u043b\u044c\u043d\u044b\u0445 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u043e\u0432"}}