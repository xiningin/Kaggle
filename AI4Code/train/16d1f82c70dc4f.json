{"cell_type":{"27620b8f":"code","12af4bb5":"code","36678e61":"code","f903857a":"code","6c178a12":"code","27d7afb8":"code","e4ca9b39":"code","65540cb6":"code","04494c2a":"code","ad6a2527":"code","49373c83":"code","2688174b":"code","875b9ede":"code","c60e4c68":"code","0bbdb493":"code","911b6701":"code","d48a662e":"markdown","fdd64f2f":"markdown","98b4aae8":"markdown","80a2a7f2":"markdown","09af76dc":"markdown","e4a08aa8":"markdown","ff62fd19":"markdown","1ecf0ab0":"markdown","4d0cd36f":"markdown","4b6ed5d9":"markdown","832ea6e1":"markdown","d327221b":"markdown","1e1c2771":"markdown","ff8f3164":"markdown","7ca7a88c":"markdown"},"source":{"27620b8f":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport datatable as dt\nimport random\nfrom lightgbm import LGBMRegressor\nimport gresearch_crypto\nimport traceback\nfrom sklearn.metrics import mean_absolute_error, mean_squared_error\nimport warnings\nwarnings.filterwarnings(\"ignore\")","12af4bb5":"df = dt.fread('..\/input\/g-research-crypto-forecasting\/train.csv').to_pandas()\ndf['datetime'] = pd.to_datetime(df['timestamp'], unit='s')\ndf = df.set_index('datetime').drop('timestamp', axis=1)\n\ndf.head()","36678e61":"df_asset_details = pd.read_csv('..\/input\/g-research-crypto-forecasting\/asset_details.csv').sort_values(\"Asset_ID\")\ndf_asset_details","f903857a":"df_train = df[(df.index< '2021-06-13 00:00:00')]\ndf_val = df[(df.index > '2021-06-13 00:00:00')]\ndisplay(df_train.tail(1))\ndisplay(df_val.head(1))","6c178a12":"def get_features(df):\n\n    df['upper_shadow'] = df['High'] \/ df[['Close', 'Open']].max(axis=1)\n    df['lower_shadow'] = df[['Close', 'Open']].min(axis=1) \/ df['Low']\n    df['open2close'] = df['Close'] \/ df['Open']\n    df['high2low'] = df['High'] \/ df['Low']\n    mean_price = df[['Open', 'High', 'Low', 'Close']].mean(axis=1)\n    median_price = df[['Open', 'High', 'Low', 'Close']].median(axis=1)\n    df['high2mean'] = df['High'] \/ mean_price\n    df['low2mean'] = df['Low'] \/ mean_price\n    df['high2median'] = df['High'] \/ median_price\n    df['low2median'] = df['Low'] \/ median_price\n    df['volume2count'] = df['Volume'] \/ (df['Count'] + 1)\n    return df   ","27d7afb8":"def get_Xy_and_model_for_asset(df_train, asset_id):\n    df = df_train[df_train[\"Asset_ID\"] == asset_id]\n    \n    df_proc = get_features(df)\n    df_proc['y'] = df['Target']\n    df_proc = df_proc.replace([np.inf, -np.inf], np.nan).dropna(how=\"any\")\n    \n    X = df_proc.drop(['Open', 'High', 'Low', 'Close', 'Volume', 'VWAP',\"y\",'Target'], axis=1)\n    y = df_proc[\"y\"]\n\n    model = LGBMRegressor( \n                          n_estimators = 800, \n                          learning_rate = 0.01, \n                          max_bin = 15, \n                          num_leaves = 100\n                        \n                          )\n    model.fit(X, y)\n    return X, y, model","e4ca9b39":"Xs = {}\nys = {}\nmodels = {}\n\nfor asset_id, asset_name in zip(df_asset_details['Asset_ID'], df_asset_details['Asset_Name']):\n    print(f\"Training model for {asset_name:<16} (ID={asset_id:<2})\")\n    X, y, model = get_Xy_and_model_for_asset(df_train, asset_id)    \n    Xs[asset_id], ys[asset_id], models[asset_id] = X, y, model\nprint(\"Models training finished\")","65540cb6":"def Evaluate(ID):   \n    \n    crypto_model=models[ID]\n    df_all = get_features(df_val)\n    df_crypto=df_all[df_all['Asset_ID']==ID]\n    \n    df_crypto['y'] = df_crypto['Target']\n    df_crypto = df_crypto.replace([np.inf, -np.inf], np.nan).dropna(how=\"any\")\n    \n    X_crypto = df_crypto.drop(['y','Target','Open', 'High', 'Low', 'Close', 'Volume', 'VWAP'], axis=1)\n    y_crypto = df_crypto[\"y\"]\n\n    print(f'MAE Of model : {mean_absolute_error(y_crypto, crypto_model.predict(X_crypto)):.6f}')\n    print(f'MSE Of model : {mean_squared_error(y_crypto, crypto_model.predict(X_crypto)):.6f}')\nfor asset_id, asset_name in zip(df_asset_details['Asset_ID'], df_asset_details['Asset_Name']):\n    print(f\"The mean and abs squared errorfor {asset_name:<16} (ID={asset_id:<2})\")\n    Evaluate(asset_id)\n    print('-'*40)\nprint('*'*15,'The evaluation done','*'*15)    ","04494c2a":"df = df_train.copy()\n    \ndf_all = get_features(df)\ndf_all['y'] = df['Target']\ndf_all = df_all.replace([np.inf, -np.inf], np.nan).dropna(how=\"any\")\n    \nX = df_all.drop(['Open', 'High', 'Low', 'Close', 'Volume', 'VWAP',\"y\",'Target'], axis=1)\ny = df_all[\"y\"]","ad6a2527":"model = LGBMRegressor( \n                        n_estimators = 100, \n                          learning_rate = 0.01, \n                            max_bin = 15, \n                              num_leaves = 100\n                          )\nmodel.fit(X, y)","49373c83":"df_all = get_features(df_val)\n    \ndf_all['y'] = df_all['Target']\ndf_all = df_all.replace([np.inf, -np.inf], np.nan).dropna(how=\"any\")\n    \nX_crypto = df_all.drop(['y','Target','Open', 'High', 'Low', 'Close', 'Volume', 'VWAP'], axis=1)\ny_crypto = df_all[\"y\"]\n\nprint(f'MAE Of model : {mean_absolute_error(y_crypto, model.predict(X_crypto)):.6f}')\nprint(f'MSE Of model : {mean_squared_error(y_crypto, model.predict(X_crypto)):.6f}')\nprint('*'*15,'The evaluation done','*'*15) ","2688174b":"# feature importance\nfi_df = pd.DataFrame()\nfi_df['features'] = X_crypto.columns\nfi_df['importance'] = model.booster_.feature_importance(importance_type=\"gain\")","875b9ede":"# plot feature importance\nfig, ax = plt.subplots(1, 1, figsize=(7, 15))\nsns.barplot(\n    x='importance'\n    , y='features'\n    , data=fi_df.sort_values(by=['importance'], ascending=False)\n    , ax=ax\n)","c60e4c68":"# #**********For submit sepretly models for each asset*************\n# env = gresearch_crypto.make_env()\n# iter_test = env.iter_test()\n\n# for i, (df_test, df_pred) in enumerate(iter_test):\n#     for j , row in df_test.iterrows():\n        \n#         model = models[row['Asset_ID']]\n#         x_test = get_features(row)\n#         y_pred = model.predict([x_test])[0]\n        \n#         df_pred.loc[df_pred['row_id'] == row['row_id'], 'Target'] = y_pred\n        \n        \n#         # Print just one sample row to get a feeling of what it looks like\n#         if i == 0 and j == 0:\n#             display(x_test)\n\n#     # Display the first prediction dataframe\n#     if i == 0:\n#         display(df_pred)\n\n#     # Send submissions\n#     env.predict(df_pred)","0bbdb493":"features = ['Asset_ID', 'Count', 'upper_shadow', 'lower_shadow', 'open2close', 'high2low', 'high2mean', 'low2mean', 'high2median', 'low2median', 'volume2count']","911b6701":"import gresearch_crypto\nenv = gresearch_crypto.make_env()   # initialize the environment\niter_test = env.iter_test()    # an iterator which loops over the test set and sample submission\nfor (test_df, sample_prediction_df) in iter_test:\n    # feature engineering\n    test_df = get_features(test_df)\n    \n    # inference\n    sample_prediction_df['Target'] = model.predict(test_df[features])  # make your predictions here\n    \n    # register your predictions\n    env.predict(sample_prediction_df)  ","d48a662e":"There are two ways to try out:<br>\n- 1- modelling each asset separately\n- 2- the multiple asset LGBM model\n","fdd64f2f":"**Datatable** (heavily inspired by R's data.table) can read large datasets fairly quickly and is often faster than pandas. It is specifically meant for data processing of tabular datasets with emphasis on speed and support for large sized data. \ud83d\udc4c","98b4aae8":"### 2-Full Model","80a2a7f2":"## Split data\nTraning data before `13-06-2021` and validation data from `14-06-2021` to the end<br>\nKindly refer to the [topic](https:\/\/www.kaggle.com\/c\/g-research-crypto-forecasting\/discussion\/285505)","09af76dc":"## Evaluate:","e4a08aa8":"# preprocessing","ff62fd19":"# Evaluate all models on the validation set:","1ecf0ab0":"## The Previous Notebook : <br>\n### [Questions and answers\ud83d\udcddEDA to Forecasting](https:\/\/www.kaggle.com\/yassershrief\/questions-and-answers-eda-to-forecasting\/edit)<br>\n## The RNN-LSTM Model  : <br>\n### [Stock-LSTM-Deep Learning](https:\/\/www.kaggle.com\/yassershrief\/crypo-lstm-2022-actual-price-91-acc\/edit)","4d0cd36f":"**Submit the full model.**","4b6ed5d9":"# Models Traning","832ea6e1":"## 1- Loop over all assets","d327221b":"# Predict & submit","1e1c2771":"**LightGBM** is a gradient boosting framework that uses tree based learning algorithms. It is designed to be distributed and efficient with the following advantages:\n\n- Faster training speed and higher efficiency.\n\n- Lower memory usage.\n\n- Better accuracy.\n\n- Support of parallel, distributed, and GPU learning.\n\n- Capable of handling large-scale data.\n\nFor more details, please refer to [LightGBM\u2019s documentation!](https:\/\/lightgbm.readthedocs.io\/en\/latest\/)","ff8f3164":"### features Engineering","7ca7a88c":"![Screenshot-2020-10-21-at-18.12.57.png](attachment:6372a40f-c121-4aca-a795-1effdf50eeb2.png)"}}