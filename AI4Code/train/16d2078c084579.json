{"cell_type":{"1ea7cf92":"code","33c301e8":"code","e547f103":"code","54e6ced5":"code","37860932":"code","9d502754":"code","a9d11e5b":"code","4fa4e1e5":"code","813628f0":"markdown","bc956d32":"markdown","873a7d81":"markdown","698e693a":"markdown","703c8c41":"markdown","c54dbeac":"markdown","b0f33e06":"markdown","8ce9649c":"markdown","682fcc8a":"markdown","7b48a451":"markdown"},"source":{"1ea7cf92":"# Setup\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n        \n","33c301e8":"# Create a simple dataframe for the rolling window\ndf = pd.DataFrame({'ColumnValue': [3, 2, 2, 5, 4]})\ndf","e547f103":"# Rolling sum with a window length of 2, min_periods defaults to the window length.\nout = df.rolling(2).sum()\nout","54e6ced5":"# Create a simple dataframe for the rolling window\ndf = pd.DataFrame({'ColumnValue1': [3,2,2,5,4,1],'ColumnValue2': [3,5,1,3,7,2]})\ndf","37860932":"# Rolling sum with a window length of 2, min_periods defaults to the window length.\nout = df.rolling(3).mean()\nout","9d502754":"# Here, we create another rolling window, three rows long, and tell it to return a 0 rather than NaN.\nout = df.rolling(3).mean().fillna(0)\nout","a9d11e5b":"# Here's our initial dataframe the window will roll over\ndf","4fa4e1e5":"# create a rolling window 3 rows long, telling it to center itself on the rows when performing its operations.\nout = df.rolling(3, center=True).mean()\nout","813628f0":"In the example below, the number 2 is the window length parameter.  That means the rolling window is 2 observations (rows) long.  ","bc956d32":"Let's take a look at a slightly more complicated example using a dataframe with more than one column of data.","873a7d81":"## ----- Rolling Windows on Pandas DataFrames ----- ##\nPandas provides pandas.DataFrame.rolling to help with time series analysis.  Here's a very basic example of a rolling window on a sample dataframe.  Similar to the example found in the Docs, [here](https:\/\/pandas.pydata.org\/pandas-docs\/version\/0.23\/generated\/pandas.DataFrame.rolling.html).\n\nTo understand the rolling window from the dataframes below, imagine a 'window' that covers all but row 0 of the dataframe.  Remember, our rolling window is summing 2 rows of data as it moves over the dataframe.  But, when it begins, it only has one row available (one row showing through the window).  The NaN shows up in row 0 because there's no row before row 0 for the rolling window to sum.\n\nNext, the rolling window moves down a row, only rows 0 and 1 are showing.  The data in rows 0 and 1 (3 + 2) are summed, and the value 5.0 is placed in row 1 of the returned dataframe.\n\nThe rolling window moves another step down, covering only rows 1 and 2.  The data in those rows are summed (2 + 2) and the value 4.0 is placed in row 2 of the returned dataframe.\n\nThe rolling window moves another step down, covering only rows 2 and 3.  The data in those rows are summed (2 + 5) and the value 7.0 is placed in row 3 of the returned dataframe.\n\nAgain, the rolling window moves another step down, covering only rows 3 and 4.  The data in those rows are summed (5 + 4) and the value 9.0 is placed in row 4 of the returned dataframe.\n","698e693a":"Examine the output dataframe.  **By specifying center=True**, our window begins its roll by placing itself over the dataframe where row 0 is in the CENTER of the window.  NaN is only returned for the first row (0) this time, rather than rows 0 and 1 as in the previous example.  The 'center' parameter defaults to False.  center = False simply means the rolling window begins it's calculations where the first row of the dataframe is the only row the window is covering when it begins its roll.  With center=True, row 0 is centered in the window, resulting in rows 0 and 1 showing in this example since our window is 3 rows long.\n\nThe window rolls forward one row and returns means of 2.333333 and 3.00000 in row 1.  It continues rolling as in the previous example, but look at the NaN values returned on row 5.  That's because center=True is specified.  The window is positioned with row 5 at it's center, meaning it can't calculate the mean and return it row 5 because it doesn't know what row 6 might or might not be.\n\n**Very Important:  When using a rolling window for time series analysis, be certain you don't pass the center=True parameter to the window.  That would result in data leakage, as your window would be looking into the future - so to speak.**","703c8c41":"## ----- Rolling Window Parameters ----- ##\nAs mentioned earlier, many parameters can be set in .rolling().  We'll take a look at a few of them  First, we'll look at the 'center' parameter.\n\nThe **center parameter tells your rolling window how to line up over the dataframe** in order to perform its operations.  By default, the center parameter is set to False.  We'll look at the same dataframe and rolling window we used in the previous example to learn about 'center'.","c54dbeac":"Other References:\n\n[Rolling Window Regression: a Simple Approach for Time Series Next value Predictions](https:\/\/medium.com\/making-sense-of-data\/time-series-next-value-prediction-using-regression-over-a-rolling-window-228f0acae363)  \n[pandas.DataFrame.rolling](https:\/\/pandas.pydata.org\/docs\/reference\/api\/pandas.DataFrame.rolling.html)","b0f33e06":"Rolling windows are very powerful and we've only scratched the surface in this notebook.  You can set the parameter **win_type** to equal any of the statical models found [here](https:\/\/docs.scipy.org\/doc\/scipy\/reference\/signal.windows.html#module-scipy.signal.windows).  These are all well beyond the scope of this notebook.  But for now, remember the dafault setting for win_type is to weight each of the windwo rows equally. \n\nThe **min_periods parameter** can be set to inform the rolling window the number of values needed to be showing or it will return NaN.  You've basically told it you desire a minimum number of datapoints to perform the operation or you wish for it to return Nan.\n\nThe **on parameter** can be set to inform the rolling window to follow a datetime like column rather than the index column.  No calculations will be performed on the specified column.\n\nYou can also specify the axis you would like the window to roll over.  The **axis parameter** defaults to axis 0 as we've seen in the examples.  However, you can set axis=1 to have it roll over columns, rather than rows.\n\nYou can learn about expanding window transformations [here](https:\/\/pandas.pydata.org\/docs\/reference\/api\/pandas.DataFrame.expanding.html#pandas.DataFrame.expanding) and exponentially weighted windows [here](https:\/\/pandas.pydata.org\/docs\/user_guide\/window.html#window-exponentially-weighted).\n","8ce9649c":"It's important to keep the simplicity of this example in mind. There are many variations of rolling windows as many parameters can be used with these windows.  \n\nImagine the statistical functions you could apply to the rolling window in place of .sum().  **Your data analysis is only limited by your willingness to learn and imagination.**   We'll continue with some additional simple examples. ","682fcc8a":"Notice the two dataframes above and notice the parameter 3, which means our rolling window is 3 lines long.  **Think of it like a regular window**, capable of showing 3 rows at a time.  **The 3 rows the window shows are the rows where the window's calculations are applied.**  \n\nThe window begins with only row 0 showing.  That's why the calculations return NaN for the two values placed in row 0.  The second row, 1, receives NaN values as well.  That's because only rows 0 and 1 are showing and the window can't perform the operation on a row before row 0 that doesn't exist.  \n\nThe third roll of the window places it with rows 0 through 2 showing.  Now our window can perform the .mean() operation and it does, returning the values 2.33333 and 3.00000 for the mean of rows 0,1 and 2.  \n\nNext, the window rolls over rows 1 through 3 and returns means of 3.00000 and 3.00000 in row 3. \n\nNext, the window rolls over rows 2 through 4 and returns means of 3.666667 and 3.66667 in row 4.\n\nNext, the window rolls over rows 3 through 5 and returns means of 3.33333 and 4.00000 in row 5.\n\nThe other window rolls won't be recorded because the window is now looking at another row that doesn't exist, row 6.\n\nLastly, **suppose we don't want NaN values** returned by the rolling window into our new dataframe.  We simply add .fillna() to the end of the rolling window command.","7b48a451":"## ----- Rolling Windows over Pandas DataFrames ----- ##\nThis notebook is intended to offer a brief and basic overview of rolling windows used for time series analysis on Pandas dataframes.  You should have a solid grasp of Pandas before you learn about rolling windows.  I recommend this fantastic [Pandas tutorial](https:\/\/www.kaggle.com\/learn\/pandas) right here on Kaggle.  "}}