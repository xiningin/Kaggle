{"cell_type":{"7bc9eb3a":"code","f016396e":"code","6bba4970":"code","8447ca29":"code","08517fc7":"code","05b891ae":"code","8f7aca80":"code","8f4021c4":"code","643cfcf1":"code","817b13d8":"code","3627caaa":"markdown","bccf1ae4":"markdown","c7e22986":"markdown"},"source":{"7bc9eb3a":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","f016396e":"# read data\ndef read_data(inp1, inp2):\n    train = pd.read_csv(inp1 + 'train.csv', dtype={'time': np.float32, 'signal': np.float32, 'open_channels':np.int32})\n    test  = pd.read_csv(inp1 + 'test.csv', dtype={'time': np.float32, 'signal': np.float32})\n#     sub  = pd.read_csv('\/kaggle\/input\/liverpool-ion-switching\/sample_submission.csv', dtype={'time': np.float32})\n    \n    Y_train_proba = np.load(inp2 + \"Y_train_proba.npy\")\n    Y_test_proba = np.load(inp2 + \"Y_test_proba.npy\")\n    \n    for i in range(11):\n        train[f\"proba_{i}\"] = Y_train_proba[:, i]\n        test[f\"proba_{i}\"] = Y_test_proba[:, i]\n\n    return train, test\n","6bba4970":"from sklearn.metrics import f1_score\n","8447ca29":"proba_tr, proba_te  = read_data('\/kaggle\/input\/liverpool-ion-switching\/','\/kaggle\/input\/ion-shifted-rfc-proba\/')","08517fc7":"proba_tr.sort_values('time', ignore_index = True, inplace = True)\nproba_tr_value = proba_tr[['proba_0', 'proba_1', 'proba_2','proba_3', 'proba_4', 'proba_5', 'proba_6', 'proba_7', 'proba_8','proba_9', 'proba_10']].values\nproba_tr_pred = np.argmax(proba_tr_value, axis=-1)","05b891ae":"proba_tr['pred'] = proba_tr_pred","8f7aca80":"for i in [0,1],[2,6],[3,7],[5,8],[4,9]:\n    j1 = i[0] + 1\n    j2 = i[1] + 1\n    batch = j1; a = 500000*(batch-1); b = 500000*batch\n    batch = j2; c = 500000*(batch-1); d = 500000*batch\n    print(j1,j2)\n    pred_temp = np.concatenate([proba_tr.pred.values[a:b], proba_tr.pred.values[c:d]]).reshape((-1,1))\n    real_temp = np.concatenate([proba_tr.open_channels.values[a:b], proba_tr.open_channels.values[c:d]]).reshape((-1,1))\n    #     print(len(pred_temp),len(real_temp))\n    print(i);print('f1 score =',f1_score(pred_temp,real_temp,average='macro'))","8f4021c4":"f1_score(proba_tr.pred,proba_tr.open_channels,average='macro')","643cfcf1":"# submission \nproba_te.sort_values('time', ignore_index = True, inplace = True)\n\ntemp = proba_te[['proba_0','proba_1','proba_2','proba_3','proba_4','proba_5','proba_6','proba_7','proba_8','proba_9','proba_10']].values\n\ntemp_pred = pd.DataFrame(np.argmax(temp, axis=-1))\ntemp_pred.columns = ['open_channels']\nimport datetime\n\nx = datetime.datetime.now()\nx = x.strftime(\"%Y%m%d%H%M%S\")\ntest_ori = pd.read_csv('\/kaggle\/input\/liverpool-ion-switching\/' + 'test.csv')\npd.concat([test_ori[['time']],temp_pred], axis = 1).to_csv('sub'+x+'.csv.gz', compression='gzip', index = False, float_format='%.4f')\n","817b13d8":"pd.concat([test_ori[['time']],temp_pred], axis = 1).to_csv('sub'+x+'.csv', index = False, float_format='%.4f')","3627caaa":"if we calculate f1_score separately in groups:","bccf1ae4":"if we calculate f1_score as a whole:","c7e22986":"Some peculiar behaviour of proba dataset that I could not understand. High LB score; High F1 Score for (full dataset); but Low F1 Score for each groups of train data (grouping as per seen on https:\/\/www.kaggle.com\/cdeotte\/one-feature-model-0-930) \n\nAppreciate too point out if there's error in the code. Thanks =) Happy kaggling."}}