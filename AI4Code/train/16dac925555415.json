{"cell_type":{"890d6e42":"code","8d5ccca5":"code","82a36413":"code","34c5dc08":"code","b4df552b":"code","8f3d6686":"code","58b3d775":"code","530eeecd":"code","63482440":"code","0d6a3b69":"code","bc6aacdd":"code","6274478c":"code","1205770d":"code","44207061":"code","7ea5e2da":"code","0bd98dab":"code","7d09f3d6":"code","5ad5af6d":"code","0df114e6":"code","65372110":"code","75dbc587":"code","388c4f19":"code","2d4c24b0":"code","16872ba3":"code","5f2a230d":"code","93dbf3e7":"code","37f50553":"code","0022945d":"code","d8037dfe":"code","968fa277":"code","cd3796e7":"code","157fbed5":"code","68bc0160":"code","fd5a4e7e":"code","b5d78464":"code","aac83e08":"code","8d21185d":"code","2fe35ff2":"code","b91027fe":"code","b7caf7cd":"code","f4e567d3":"code","41783602":"code","c0548e2b":"code","d618c51f":"code","3d1d841e":"code","9e5f89f2":"code","1e4859de":"code","4cae3768":"code","1429d1d5":"code","b376358f":"code","8b1f82fc":"code","aa09598a":"code","c729a9ca":"code","928dc2ec":"code","881f13b4":"code","89aaf2f1":"code","6e76305d":"code","5fa4b69a":"code","7cee46a0":"code","a9b30a3f":"code","c21ae827":"code","c144a655":"code","355fee01":"code","53da2729":"code","355e617c":"code","d5ef7bfe":"code","7222b2e2":"code","b0fa512b":"code","146baccc":"code","362acaf6":"code","21b997da":"code","cc8abbdc":"code","6964d321":"code","a032c5cc":"code","75ea3b7f":"markdown","a950cb04":"markdown","e2e0df5a":"markdown","55f7f356":"markdown","6ac0e85b":"markdown","24eef551":"markdown","a546201b":"markdown","d0d38b75":"markdown","2303cda9":"markdown","dcbf08cd":"markdown","7cce0771":"markdown","46f51f4e":"markdown","d59fde0f":"markdown","fd4a6b77":"markdown","329a8031":"markdown"},"source":{"890d6e42":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.metrics import confusion_matrix,classification_report,roc_curve,accuracy_score,auc\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.svm import SVC\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.ensemble import RandomForestClassifier\nfrom keras.utils import np_utils\nfrom keras.models import Sequential, load_model\nfrom keras.layers import Dense, Dropout, Activation, Conv2D,MaxPooling2D, Flatten\ndf = pd.read_csv(\"..\/input\/pima-diabetes-dataset\/Diabetes.csv\")","8d5ccca5":"title_mapping = {'YES':1,'NO':0}\ndf[' Class variable']=df[' Class variable'].map(title_mapping)","82a36413":"z=(df == 0).sum(axis=0)\nz=pd.DataFrame(z)\nz.columns=['Zeros Count']\nz.drop(' Class variable',inplace=True)\nz.plot(kind='bar',stacked=True, figsize=(10,5),grid=True)","34c5dc08":"col=['n_pregnant','glucose_conc','bp','skin_len','insulin','bmi','pedigree_fun','age','Output']\ndf.columns=col\ndf.head()","b4df552b":"diabetes_true_count = len(df.loc[df['Output'] == True])\ndiabetes_false_count = len(df.loc[df['Output'] == False])\n(diabetes_true_count,diabetes_false_count)","8f3d6686":"col=['glucose_conc','bp','insulin','bmi','skin_len']\nfor i in col:\n    df[i].replace(0, np.nan, inplace= True)","58b3d775":"df.isnull().sum()","530eeecd":"def median_target(var):   \n    temp = df[df[var].notnull()]\n    temp = temp[[var, 'Output']].groupby(['Output'])[[var]].median().reset_index()\n    return temp","63482440":"median_target('insulin')","0d6a3b69":"median_target('glucose_conc')","bc6aacdd":"median_target('skin_len')","6274478c":"median_target('bp')","1205770d":"median_target('bmi')","44207061":"df.loc[(df['Output'] == 0 ) & (df['insulin'].isnull()), 'insulin'] = 102.5\ndf.loc[(df['Output'] == 1 ) & (df['insulin'].isnull()), 'insulin'] = 169.5\ndf.loc[(df['Output'] == 0 ) & (df['glucose_conc'].isnull()), 'glucose_conc'] = 107\ndf.loc[(df['Output'] == 1 ) & (df['glucose_conc'].isnull()), 'glucose_conc'] = 140\ndf.loc[(df['Output'] == 0 ) & (df['skin_len'].isnull()), 'skin_len'] = 27\ndf.loc[(df['Output'] == 1 ) & (df['skin_len'].isnull()), 'skin_len'] = 32\ndf.loc[(df['Output'] == 0 ) & (df['bp'].isnull()), 'bp'] = 70\ndf.loc[(df['Output'] == 1 ) & (df['bp'].isnull()), 'bp'] = 74.5\ndf.loc[(df['Output'] == 0 ) & (df['bmi'].isnull()), 'bmi'] = 30.1\ndf.loc[(df['Output'] == 1 ) & (df['bmi'].isnull()), 'bmi'] = 34.3","7ea5e2da":"df.isnull().sum()","0bd98dab":"plt.style.use('ggplot') # Using ggplot2 style visuals \n\nf, ax = plt.subplots(figsize=(11, 15))\n\nax.set_facecolor('#fafafa')\nax.set(xlim=(-.05, 200))\nplt.ylabel('Variables')\nplt.title(\"Overview Data Set\")\nax = sns.boxplot(data = df, \n  orient = 'h', \n  palette = 'Set2')","7d09f3d6":"sns.boxplot(df.n_pregnant)","5ad5af6d":"df['n_pregnant'].value_counts()","0df114e6":"median_target('n_pregnant')","65372110":"df.loc[(df['Output'] == 0 ) & (df['n_pregnant']>13), 'n_pregnant'] = 2\ndf.loc[(df['Output'] == 1 ) & (df['n_pregnant']>13), 'n_pregnant'] = 4","75dbc587":"df['n_pregnant'].value_counts()","388c4f19":"sns.boxplot(df.bp)","2d4c24b0":"median_target('bp')","16872ba3":"df.loc[(df['Output'] == 0 ) & (df['bp']<40), 'bp'] = 70\ndf.loc[(df['Output'] == 1 ) & (df['bp']<40), 'bp'] = 74.5","5f2a230d":"df.loc[(df['Output'] == 0 ) & (df['bp']>103), 'bp'] = 70\ndf.loc[(df['Output'] == 1 ) & (df['bp']>103), 'bp'] = 74.5","93dbf3e7":"sns.boxplot(df.bp)","37f50553":"sns.boxplot(df.skin_len)","0022945d":"median_target('skin_len')","d8037dfe":"df.loc[(df['Output'] == 0 ) & (df['skin_len']>38), 'skin_len'] = 27\ndf.loc[(df['Output'] == 1 ) & (df['skin_len']>38), 'skin_len'] = 32","968fa277":"df.loc[(df['Output'] == 0 ) & (df['skin_len']<20), 'skin_len'] = 27\ndf.loc[(df['Output'] == 1 ) & (df['skin_len']<20), 'skin_len'] = 32","cd3796e7":"sns.boxplot(df.bmi)","157fbed5":"median_target('bmi')","68bc0160":"df.loc[(df['Output'] == 0 ) & (df['bmi']>48), 'bmi'] = 30.1\ndf.loc[(df['Output'] == 1 ) & (df['bmi']>48), 'bmi'] = 34.3","fd5a4e7e":"sns.boxplot(df.pedigree_fun)","b5d78464":"median_target('pedigree_fun')","aac83e08":"df.loc[(df['Output'] == 0 ) & (df['pedigree_fun']>1), 'pedigree_fun'] = 0.336\ndf.loc[(df['Output'] == 1 ) & (df['pedigree_fun']>1), 'pedigree_fun'] = 0.449","8d21185d":"sns.boxplot(df.age)","2fe35ff2":"median_target('age')","b91027fe":"df.loc[(df['Output'] == 0 ) & (df['age']>61), 'age'] = 27\ndf.loc[(df['Output'] == 1 ) & (df['age']>61), 'age'] = 36","b7caf7cd":"X = df.drop(['Output'], 1)\ny = df['Output']","f4e567d3":"x_train,x_test,y_train,y_test=train_test_split(X,y,test_size=0.2,random_state=0)","41783602":"std = StandardScaler()\nx_train = std.fit_transform(x_train)\nx_test = std.transform(x_test)","c0548e2b":"model=SVC(kernel='rbf')\nmodel.fit(x_train,y_train)","d618c51f":"y_pred=model.predict(x_test)","3d1d841e":"accuracy_score(y_test,y_pred)","9e5f89f2":"confusion_matrix(y_test,y_pred)","1e4859de":"print(classification_report(y_test,y_pred))","4cae3768":"fpr,tpr,_=roc_curve(y_test,y_pred)\n#calculate AUC\nroc_auc=auc(fpr,tpr)\nprint('AUC: %0.2f' % roc_auc)\n#plot of ROC curve for a specified class\nplt.figure()\nplt.plot(fpr,tpr,label='ROC curve(area= %2.f)' %roc_auc)\nplt.plot([0,1],[0,1],'k--')\nplt.xlim([0.0,1.0])\nplt.ylim([0.0,1.05])\nplt.xlabel('False positive rate')\nplt.ylabel('True positive rate')\nplt.title('ROC curve')\nplt.legend(loc='lower right')\nplt.grid()\nplt.show()","1429d1d5":"model=SVC(kernel='linear')\nmodel.fit(x_train,y_train)","b376358f":"y_pred=model.predict(x_test)","8b1f82fc":"accuracy_score(y_test,y_pred)","aa09598a":"confusion_matrix(y_test,y_pred)","c729a9ca":"print(classification_report(y_test,y_pred))","928dc2ec":"fpr,tpr,_=roc_curve(y_test,y_pred)\n#calculate AUC\nroc_auc=auc(fpr,tpr)\nprint('ROC AUC: %0.2f' % roc_auc)\n#plot of ROC curve for a specified class\nplt.figure()\nplt.plot(fpr,tpr,label='ROC curve(area= %2.f)' %roc_auc)\nplt.plot([0,1],[0,1],'k--')\nplt.xlim([0.0,1.0])\nplt.ylim([0.0,1.05])\nplt.xlabel('False positive rate')\nplt.ylabel('True positive rate')\nplt.title('ROC curve')\nplt.legend(loc='lower right')\nplt.grid()\nplt.show()","881f13b4":"\nregressor=LogisticRegression()","89aaf2f1":"regressor.fit(x_train,y_train)","6e76305d":"y_pred=regressor.predict(x_test)","5fa4b69a":"accuracy_score(y_test,y_pred)","7cee46a0":"confusion_matrix(y_test,y_pred)","a9b30a3f":"print(classification_report(y_test,y_pred))","c21ae827":"fpr,tpr,_=roc_curve(y_test,y_pred)\n#calculate AUC\nroc_auc=auc(fpr,tpr)\nprint('ROC AUC: %0.2f' % roc_auc)\n#plot of ROC curve for a specified class\nplt.figure()\nplt.plot(fpr,tpr,label='ROC curve(area= %2.f)' %roc_auc)\nplt.plot([0,1],[0,1],'k--')\nplt.xlim([0.0,1.0])\nplt.ylim([0.0,1.05])\nplt.xlabel('False positive rate')\nplt.ylabel('True positive rate')\nplt.title('ROC curve')\nplt.legend(loc='lower right')\nplt.grid()\nplt.show()","c144a655":"clf = KNeighborsClassifier(n_neighbors=3) \nclf.fit(x_train,y_train)  \nprint(clf.score(x_test,y_test))","355fee01":"y_pred=clf.predict(x_test)","53da2729":"accuracy_score(y_test,y_pred)","355e617c":"confusion_matrix(y_test,y_pred)","d5ef7bfe":"print(classification_report(y_test,y_pred))","7222b2e2":"fpr,tpr,_=roc_curve(y_test,y_pred)\n#calculate AUC\nroc_auc=auc(fpr,tpr)\nprint('ROC AUC: %0.2f' % roc_auc)\n#plot of ROC curve for a specified class\nplt.figure()\nplt.plot(fpr,tpr,label='ROC curve(area= %2.f)' %roc_auc)\nplt.plot([0,1],[0,1],'k--')\nplt.xlim([0.0,1.0])\nplt.ylim([0.0,1.05])\nplt.xlabel('False positive rate')\nplt.ylabel('True positive rate')\nplt.title('ROC curve')\nplt.legend(loc='lower right')\nplt.grid()\nplt.show()","b0fa512b":"classifier=RandomForestClassifier()\nclassifier.fit(x_train,y_train)","146baccc":"Y_pred=classifier.predict(x_test)\nconfusion_matrix(y_test,Y_pred)","362acaf6":"accuracy_score(y_test,Y_pred)","21b997da":"print(classification_report(y_test,Y_pred))","cc8abbdc":"fpr,tpr,_=roc_curve(y_test,Y_pred)\n#calculate AUC\nroc_auc=auc(fpr,tpr)\nprint('ROC AUC: %0.2f' % roc_auc)\n#plot of ROC curve for a specified class\nplt.figure()\nplt.plot(fpr,tpr,label='ROC curve(area= %2.f)' %roc_auc)\nplt.plot([0,1],[0,1],'k--')\nplt.xlim([0.0,1.0])\nplt.ylim([0.0,1.05])\nplt.xlabel('False positive rate')\nplt.ylabel('True positive rate')\nplt.title('ROC curve')\nplt.legend(loc='lower right')\nplt.grid()\nplt.show()","6964d321":"model = Sequential()\nmodel.add(Dense(32,input_shape=(x_train.shape[1],)))\nmodel.add(Activation('relu'))\nmodel.add(Dense(64,input_shape=(x_train.shape[1],)))\nmodel.add(Activation('relu'))\nmodel.add(Dense(64,input_shape=(x_train.shape[1],)))\nmodel.add(Activation('relu'))\nmodel.add(Dense(128,input_shape=(x_train.shape[1],)))\nmodel.add(Activation('relu'))\nmodel.add(Dense(128,input_shape=(x_train.shape[1],)))\nmodel.add(Activation('relu'))\nmodel.add(Dense(256,input_shape=(x_train.shape[1],)))\nmodel.add(Activation('relu'))\nmodel.add(Dense(256,input_shape=(x_train.shape[1],)))\nmodel.add(Activation('relu'))\nmodel.add(Dense(2))\nmodel.add(Activation('softmax'))","a032c5cc":"print(model.summary())\nmodel.compile(loss='sparse_categorical_crossentropy',\n              optimizer=\"sgd\",metrics=['accuracy'])\nmodel.fit(x_train, y_train, batch_size=10, epochs=50, verbose=1, validation_data=(x_test, y_test))\nloss, accuracy = model.evaluate(x_test,y_test, verbose=0)\nprint(\"Loss : \"+str(loss))\nprint(\"Accuracy :\"+str(accuracy*100.0))","75ea3b7f":"## Replacing 0 with NaN to Handle Easily","a950cb04":"## SVM With Linear Kernel","e2e0df5a":"## KNN","55f7f356":"### Function to calculate Median according to the Output","6ac0e85b":"## Filling the NaN value with Median according to Output","24eef551":"## Box Plot to check for Outliers in the Data","a546201b":"## Splitting the Data","d0d38b75":"## Scaling the Data","2303cda9":"## Artificial Neural Networks","dcbf08cd":"## Logistic Regression","7cce0771":"## Importing Important Libraries","46f51f4e":"## SVM With RBF Kernel","d59fde0f":"# Outlier Correction with Median","fd4a6b77":"## Plotting Zeros Count in Data","329a8031":"## Random Forest"}}