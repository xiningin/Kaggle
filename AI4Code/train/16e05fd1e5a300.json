{"cell_type":{"f82cbc4f":"code","3004c598":"code","a0c8d93b":"code","f10d64fc":"code","9de0a2ab":"code","476a0f76":"code","6fb75525":"code","bb57df86":"code","b488d540":"code","b0a01cdd":"code","677b7eb4":"code","43f90f77":"code","cd5ac6d1":"code","a32d00a3":"code","3141c6f1":"code","cead9c2d":"code","32ac2d22":"code","52910018":"code","430d7094":"code","2de47371":"code","cbe28562":"code","8c89b9b9":"code","06f7b58b":"code","97d58c43":"code","07f273fb":"code","28e7343d":"code","c5b25429":"code","8bc51ba3":"code","9910c565":"code","bffb9b96":"code","a68dfe80":"code","97688300":"code","5ae09535":"code","6cad266a":"code","cbb32764":"code","1b207ff1":"code","42a88672":"code","c1ef77a4":"code","da92ede0":"markdown"},"source":{"f82cbc4f":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","3004c598":"import matplotlib.pyplot as plt\nimport seaborn as sns","a0c8d93b":"train=pd.read_csv(\"\/kaggle\/input\/titanic\/train.csv\")\ntest=pd.read_csv(\"\/kaggle\/input\/titanic\/test.csv\")\nsubmission = pd.read_csv(\"\/kaggle\/input\/titanic\/gender_submission.csv\")","f10d64fc":"train.isna().sum()","9de0a2ab":"test.isna().sum()","476a0f76":"trainnew=train.drop(['Name','Ticket','Cabin'], axis=1)","6fb75525":"testnew=test.drop(['Name','Ticket','Cabin'], axis=1)","bb57df86":"train.describe()","b488d540":"test.describe()","b0a01cdd":"trainnew['Embarked'].value_counts()","677b7eb4":"#Handling missing values in Training data\n\ntrainnew['Embarked'].fillna('S',inplace=True)\ntrainnew['Age'].fillna(29,inplace=True)","43f90f77":"#Handling Missing values in Test data\n\ntestnew['Age'].fillna(30,inplace=True)\ntestnew['Fare'].fillna(35,inplace=True)","cd5ac6d1":"train.SibSp.unique()","a32d00a3":"train.Parch.unique()","3141c6f1":"plt.figure(figsize=(10,10))\ncorr = trainnew.corr()\nax = sns.heatmap(\n    corr, \n    vmin=-1, vmax=1, center=0,\n    cmap=sns.diverging_palette(30, 320, n=200),\n    square=True, annot=True\n)\nax.set_xticklabels(\n    ax.get_xticklabels(),\n    rotation=45,\n    horizontalalignment='right'\n)\nax.set_yticklabels(\n    ax.get_yticklabels(),\n    rotation=45,\n\n);","cead9c2d":"sns.pairplot(trainnew)","32ac2d22":"plt.figure(figsize=(10,10))\nsns.boxplot(x=trainnew['Fare'])","52910018":"relplot = sns.catplot(x=\"Pclass\", hue=\"Sex\", col=\"Survived\",  \n      data=trainnew, kind=\"count\",  \n    height=4, aspect=.7);  \nrelplot","430d7094":"relplot = sns.catplot(x=\"Sex\", hue=\"Embarked\", col=\"Survived\",  \n      data=trainnew, kind=\"count\",  \n    height=4, aspect=.7);  \nrelplot","2de47371":"import plotly.express as px\nfig = px.box(trainnew,x='Survived',y='Age', color='Sex')\nfig.show()","cbe28562":"fig = px.box(trainnew,x='Survived',y='SibSp', color='Parch')\nfig.show()","8c89b9b9":"#Handling Outliers in Training data\n\ni=trainnew[trainnew.Fare == 512.329200].index\nj=trainnew[trainnew.Age == 80.000000 ].index\ntrain1=trainnew.drop(i)\ntrain1=train1.drop(j)\n","06f7b58b":"ax = sns.countplot(x = 'Survived',data = train1) \ntotal = float(len(train1))\nfor p in ax.patches:\n    height = p.get_height()\n    ax.text(p.get_x()+p.get_width()\/2.,\n            height + 3,\n            '{:1.2f}'.format(height\/total),\n            ha=\"center\") \nplt.show()","97d58c43":"#Encode categorical variables\n\nencoded_training = pd.get_dummies(train1)\nencoded_testing = pd.get_dummies(testnew)\n","07f273fb":"\n#Models\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn import linear_model\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.naive_bayes import GaussianNB","28e7343d":"X=encoded_training.drop(['Survived'],axis=1)\nY=encoded_training.Survived","c5b25429":"X_train,X_test,Y_train,y_test=train_test_split(X,Y,test_size=0.2,random_state=500)","8bc51ba3":"#Random Forest\n\nrandom_forest = RandomForestClassifier(n_estimators=100)\nrandom_forest.fit(X_train, Y_train)\n\nY_prediction = random_forest.predict(X_test)\n\nrandom_forest.score(X_train, Y_train)\nacc_random_forest = round(random_forest.score(X_train, Y_train) * 100, 2)","9910c565":"#KNN\n\nknn = KNeighborsClassifier(n_neighbors = 3)\nknn.fit(X_train, Y_train)\nY_pred = knn.predict(X_test) \nacc_knn = round(knn.score(X_train, Y_train) * 100, 2)","bffb9b96":"#Naive Bayes\n\ngaussian = GaussianNB()\ngaussian.fit(X_train, Y_train)\nY_pred = gaussian.predict(X_test) \nacc_gaussian = round(gaussian.score(X_train, Y_train) * 100, 2)","a68dfe80":"#Decision Tree\n\ndecision_tree = DecisionTreeClassifier() \ndecision_tree.fit(X_train, Y_train)  \nY_pred = decision_tree.predict(X_test) \nacc_decision_tree = round(decision_tree.score(X_train, Y_train) * 100, 2)","97688300":"#Best model\n\nresults = pd.DataFrame({\n    'Model': [ 'KNN', 'Random Forest', 'Naive Bayes',  \n               'Decision Tree'],\n    'Score': [ acc_knn, acc_random_forest, acc_gaussian,  \n              acc_decision_tree]})\nresult_df = results.sort_values(by='Score', ascending=False)\nresult_df = result_df.set_index('Score')\nresult_df.head()","5ae09535":"#Prediction using Random Forest\nsubmission = pd.DataFrame({\n    \"PassengerId\": testnew[\"PassengerId\"],\n    \"Survived\": random_forest.predict(encoded_testing)\n})","6cad266a":"submission['Survived'].value_counts()","cbb32764":"submission.to_csv(\"submission.csv\",index=False)","1b207ff1":"#Prediction using Decision Tree\nsubmission1 = pd.DataFrame({\n    \"PassengerId\": testnew[\"PassengerId\"],\n    \"Survived\": decision_tree.predict(encoded_testing)\n})","42a88672":"submission1['Survived'].value_counts()","c1ef77a4":"submission.to_csv(\"submission1.csv\",index=False)","da92ede0":"**For detailed understanding of EDA steps and exhaustive visualizations on the Titanic dataset refer** [Exploratory Data Analysis and Visualization](https:\/\/www.kaggle.com\/krrai77\/exploratory-data-analysis-and-visualization)"}}