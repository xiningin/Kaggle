{"cell_type":{"8768ea46":"code","17725c7a":"code","c19f7917":"code","b97108fb":"code","e15cfe23":"code","ef6a534d":"code","124b095e":"code","b3d84425":"code","2ecfd6ec":"code","8aeeba7d":"code","1cd77899":"code","067a0600":"code","8d156474":"code","c1ee6e29":"code","474ba789":"code","f1db9a7d":"code","0eb8f31c":"code","0611b3a8":"code","9a699b56":"code","dee3f9a5":"code","ee3e4c59":"code","e4b83a18":"markdown","455feafc":"markdown","665665b3":"markdown","78719fc9":"markdown","fa81d2f8":"markdown","f1f9a6da":"markdown","49c397e7":"markdown","9050acd5":"markdown","93e88c21":"markdown","8f3d60b1":"markdown","e77989ee":"markdown","89817c21":"markdown","1ddd27f2":"markdown"},"source":{"8768ea46":"import pandas as pd\nimport numpy as np\nimport seaborn as sns\nimport matplotlib.pyplot as plt","17725c7a":"from sklearn.preprocessing import StandardScaler\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.svm import SVC\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.model_selection import cross_val_score","c19f7917":"from imblearn.over_sampling import SMOTE\nfrom imblearn.under_sampling import RandomUnderSampler\nfrom imblearn.pipeline import Pipeline","b97108fb":"from sklearn.metrics import confusion_matrix\nfrom sklearn.metrics import accuracy_score\nfrom sklearn.metrics import f1_score","e15cfe23":"data = pd.read_csv('..\/input\/creditcardfraud\/creditcard.csv')\ndata.drop(\"Time\", axis = 1, inplace = True)\nprint(data.head())","ef6a534d":"nonfraud_cases = data[data.Class == 0]\nfraud_cases = data[data.Class == 1]\ntotal_cases = len(data)\nno_of_nonfraud = len(nonfraud_cases)\nno_of_fraud = len(fraud_cases)\nfraud_percentage = no_of_fraud\/no_of_nonfraud*100","124b095e":"print('CASE COUNT')\nprint('Total number of cases are {}'.format(total_cases))\nprint('Number of Non-fraud cases are {}'.format(no_of_nonfraud))\nprint('Number of Non-fraud cases are {}'.format(no_of_fraud))\nprint('Percentage of fraud cases is {}'.format(fraud_percentage))","b3d84425":"print('CASE AMOUNT STATISTICS')\nprint('NON-FRAUD CASE AMOUNT STATS')\nprint(nonfraud_cases.Amount.describe())\nprint('FRAUD CASE AMOUNT STATS')\nprint(fraud_cases.Amount.describe())","2ecfd6ec":"sc = StandardScaler()\namount = data['Amount'].values\ndata['Amount'] = sc.fit_transform(amount.reshape(-1, 1))","8aeeba7d":"X = data.drop('Class', axis = 1).values\nY = data['Class'].values","1cd77899":"from imblearn.under_sampling import NearMiss\nnm = NearMiss()\n#over = SMOTE(sampling_strategy = 0.2)\n#under = RandomUnderSampler(sampling_strategy = 0.5)\n#steps = [('o', over), ('u', under)]\n#pipeline = Pipeline(steps = steps)\n#xData, yData = pipeline.fit_resample(xData, yData)\nX, Y = nm.fit_resample(X, Y)\nprint(X.shape)\nprint(Y.shape)","067a0600":"X_train, X_test, Y_train, Y_test = train_test_split(X, Y, test_size = 0.2, random_state = 0)","8d156474":"tree = DecisionTreeClassifier(max_depth = 4, criterion = 'entropy')\ntree.fit(X_train, Y_train)\ntree_model = tree.predict(X_test)\nprint(cross_val_score(tree, X_train, Y_train, scoring=\"f1\", cv = 10))\nmean = cross_val_score(tree, X_train, Y_train, scoring=\"f1\", cv = 10).mean()\nprint(mean)","c1ee6e29":"n = 5\n\nknn = KNeighborsClassifier(n_neighbors = n)\nknn.fit(X_train, Y_train)\nknn_model = knn.predict(X_test)\nprint(cross_val_score(knn, X_train, Y_train, scoring=\"f1\", cv = 10))\nmean = cross_val_score(knn, X_train, Y_train, scoring=\"f1\", cv = 10).mean()\nprint(mean)","474ba789":"svm = SVC()\nsvm.fit(X_train, Y_train)\nsvm_model = svm.predict(X_test)\nprint(cross_val_score(svm, X_train, Y_train, scoring=\"f1\", cv = 10))\nmean = cross_val_score(svm, X_train, Y_train, scoring=\"f1\", cv = 10).mean()\nprint(mean)","f1db9a7d":"forest = RandomForestClassifier(max_depth = 4)\nforest.fit(X_train, Y_train)\nforest_model = forest.predict(X_test)\nprint(cross_val_score(forest, X_train, Y_train, scoring=\"f1\", cv = 10))\nmean = cross_val_score(forest, X_train, Y_train, scoring=\"f1\", cv = 10).mean()\nprint(mean)","0eb8f31c":"print('F1 score of the Decision Tree model is {}'.format(f1_score(Y_test, tree_model)))\nprint('F1 score of the KNN model is {}'.format(f1_score(Y_test, knn_model)))\nprint('F1 score of the SVM model is {}'.format(f1_score(Y_test, svm_model)))\nprint('F1 score of the Random Forest Tree model is {}'.format(f1_score(Y_test, forest_model)))\n","0611b3a8":"LABELS = ['Normal', 'Fraud']\nconf_matrix = confusion_matrix(Y_test, tree_model)\nplt.figure(figsize =(12, 12))\nsns.heatmap(conf_matrix, xticklabels = LABELS, yticklabels = LABELS, annot = True, fmt = 'd', cmap =\"Blues\");\nplt.title(\"Decision Tree\")\nplt.ylabel('True class')\nplt.xlabel('Predicted class')\nplt.show()","9a699b56":"LABELS = ['Normal', 'Fraud']\nconf_matrix = confusion_matrix(Y_test, knn_model)\nplt.figure(figsize =(12, 12))\nsns.heatmap(conf_matrix, xticklabels = LABELS, yticklabels = LABELS, annot = True, fmt = 'd', cmap =\"Blues\");\nplt.title(\"KNN\")\nplt.ylabel('True class')\nplt.xlabel('Predicted class')\nplt.show()","dee3f9a5":"LABELS = ['Normal', 'Fraud']\nconf_matrix = confusion_matrix(Y_test, svm_model)\nplt.figure(figsize =(12, 12))\nsns.heatmap(conf_matrix, xticklabels = LABELS, yticklabels = LABELS, annot = True, fmt = 'd', cmap =\"Blues\");\nplt.title(\"SVM\")\nplt.ylabel('True class')\nplt.xlabel('Predicted class')\nplt.show()\n","ee3e4c59":"LABELS = ['Normal', 'Fraud']\nconf_matrix = confusion_matrix(Y_test, forest_model)\nplt.figure(figsize =(12, 12))\nsns.heatmap(conf_matrix, xticklabels = LABELS, yticklabels = LABELS, annot = True, fmt = 'd', cmap =\"Blues\");\nplt.title(\"Random Forest\")\nplt.ylabel('True class')\nplt.xlabel('Predicted class')\nplt.show()\n","e4b83a18":"**COUNT AND PERCENTAGE**","455feafc":"**MODELLING**","665665b3":"**CONFUSION MATRIX**","78719fc9":"DECISION TREE","fa81d2f8":"K-Nearest Neighbors","f1f9a6da":"**F1 SCORE**","49c397e7":"**CLASS IMBALANCE**","9050acd5":"**DATA SPLIT**","93e88c21":"SUPPORT VECTOR REGRESSION","8f3d60b1":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","e77989ee":"RANDOM FOREST TREE","89817c21":"**IMPORTING DATA**","1ddd27f2":"**DESCRIPTION**"}}