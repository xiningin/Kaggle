{"cell_type":{"d1911566":"code","4d781668":"code","f5a14eb5":"code","7bce63b7":"code","4fef18a9":"code","ddc5f1e5":"code","3b60921d":"code","46b094e0":"code","ee6dbd83":"code","7dcc3a6b":"code","f9a3e3d2":"code","21044a39":"code","fcbb6f9d":"code","304cb65b":"code","bb9a063f":"code","5392c152":"code","7165c08f":"code","9389d487":"code","f73ca36a":"code","3d7f6a81":"code","a96913d0":"code","9b97e292":"code","ebe16909":"code","2200891b":"code","47de53f5":"code","573d7555":"code","3ee77811":"markdown","18d7235c":"markdown","3c1de148":"markdown","3b085bf1":"markdown","1c6a4a9c":"markdown","5aa3047b":"markdown","d76e3615":"markdown","1e829736":"markdown","30bd7ade":"markdown","ca67b24d":"markdown","930162d9":"markdown","eebddb3e":"markdown","5a1f872c":"markdown","89ca3587":"markdown","52ba0a44":"markdown"},"source":{"d1911566":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","4d781668":"import numpy as np\nimport pandas as pd\nimport seaborn as sns\nfrom matplotlib import pyplot as plt\n# !pip install missingno\nimport missingno as msno\nfrom datetime import date\nfrom sklearn.metrics import accuracy_score\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.neighbors import LocalOutlierFactor\nfrom sklearn.preprocessing import MinMaxScaler, LabelEncoder, StandardScaler, RobustScaler","f5a14eb5":"# some adjustments \npd.set_option('display.max_columns', None)\npd.set_option('display.max_rows', None)\npd.set_option('display.float_format', lambda x: '%.3f' % x)\npd.set_option('display.width', 500)","7bce63b7":"df_ = pd.read_csv('..\/input\/pima-indians-diabetes-database\/diabetes.csv')\ndf = df_.copy()","4fef18a9":"# auxiliary functions\ndef check_df(dataframe):\n    print(\"##################### Shape #####################\")\n    print(dataframe.shape)\n    print(\"##################### Types #####################\")\n    print(dataframe.dtypes)\n    print(\"##################### Head #####################\")\n    print(dataframe.head(3))\n    print(\"##################### Tail #####################\")\n    print(dataframe.tail(3))\n    print(\"##################### NA #####################\")\n    print(dataframe.isnull().sum())\n    print(\"##################### Quantiles #####################\")\n    print(dataframe.quantile([0, 0.05, 0.50, 0.95, 0.99, 1]).T)\n\n\ndef grab_col_names(dataframe, cat_th=10, car_th=20):\n    \"\"\"\n\n    Veri setindeki kategorik, numerik ve kategorik fakat kardinal de\u011fi\u015fkenlerin isimlerini verir.\n    Not: Kategorik de\u011fi\u015fkenlerin i\u00e7erisine numerik g\u00f6r\u00fcn\u00fcml\u00fc kategorik de\u011fi\u015fkenler de dahildir.\n\n    Parameters\n    ------\n        dataframe: dataframe\n                De\u011fi\u015fken isimleri al\u0131nmak istenilen dataframe\n        cat_th: int, optional\n                numerik fakat kategorik olan de\u011fi\u015fkenler i\u00e7in s\u0131n\u0131f e\u015fik de\u011feri\n        car_th: int, optinal\n                kategorik fakat kardinal de\u011fi\u015fkenler i\u00e7in s\u0131n\u0131f e\u015fik de\u011feri\n\n    Returns\n    ------\n        cat_cols: list\n                Kategorik de\u011fi\u015fken listesi\n        num_cols: list\n                Numerik de\u011fi\u015fken listesi\n        cat_but_car: list\n                Kategorik g\u00f6r\u00fcn\u00fcml\u00fc kardinal de\u011fi\u015fken listesi\n\n    Examples\n    ------\n        import seaborn as sns\n        df = sns.load_dataset(\"iris\")\n        print(grab_col_names(df))\n\n\n    Notes\n    ------\n        cat_cols + num_cols + cat_but_car = toplam de\u011fi\u015fken say\u0131s\u0131\n        num_but_cat cat_cols'un i\u00e7erisinde.\n        Return olan 3 liste toplam\u0131 toplam de\u011fi\u015fken say\u0131s\u0131na e\u015fittir: cat_cols + num_cols + cat_but_car = de\u011fi\u015fken say\u0131s\u0131\n\n    \"\"\"\n\n    # cat_cols, cat_but_car\n    cat_cols = [col for col in dataframe.columns if dataframe[col].dtypes == \"O\"]\n    num_but_cat = [col for col in dataframe.columns if dataframe[col].nunique() < cat_th and\n                   dataframe[col].dtypes != \"O\"]\n    cat_but_car = [col for col in dataframe.columns if dataframe[col].nunique() > car_th and\n                   dataframe[col].dtypes == \"O\"]\n    cat_cols = cat_cols + num_but_cat\n    cat_cols = [col for col in cat_cols if col not in cat_but_car]\n\n    # num_cols\n    num_cols = [col for col in dataframe.columns if dataframe[col].dtypes != \"O\"]\n    num_cols = [col for col in num_cols if col not in num_but_cat]\n\n    print(f\"Observations: {dataframe.shape[0]}\")\n    print(f\"Variables: {dataframe.shape[1]}\")\n    print(f'cat_cols: {len(cat_cols)}')\n    print(f'num_cols: {len(num_cols)}')\n    print(f'cat_but_car: {len(cat_but_car)}')\n    print(f'num_but_cat: {len(num_but_cat)}')\n    return cat_cols, num_cols, cat_but_car\n\ndef cat_summary(dataframe, col_name, plot=False):\n    print(pd.DataFrame({col_name: dataframe[col_name].value_counts(),\n                        \"Ratio\": 100 * dataframe[col_name].value_counts() \/ len(dataframe)}))\n    print(\"##########################################\")\n    if plot:\n        sns.countplot(x=dataframe[col_name], data=dataframe)\n        plt.show()\n\ndef num_summary(dataframe, numerical_col, plot= False):\n    quantiles = [0.05, 0.10, 0.20, 0.30, 0.40, 0.50, 0.60, 0.70, 0.80, 0.90, 0.95, 0.99]\n    print(dataframe[numerical_col].describe(quantiles).T)\n\n    if plot:\n        dataframe[numerical_col].hist(bins=20)\n        plt.xlabel(numerical_col)\n        plt.title(numerical_col)\n        plt.show()\n\ndef target_summary_with_num(dataframe, target, numerical_col):\n    print(dataframe.groupby(target).agg({numerical_col: \"mean\"}), end=\"\\n\\n\\n\")\n\n\ndef outlier_thresholds(dataframe, col_name, q1=0.05, q3=0.95):\n    quartile1 = dataframe[col_name].quantile(q1)\n    quartile3 = dataframe[col_name].quantile(q3)\n    interquantile_range = quartile3 - quartile1\n    up_limit = quartile3 + 1.5 * interquantile_range\n    low_limit = quartile1 - 1.5 * interquantile_range\n    return low_limit, up_limit\n\ndef check_outlier(dataframe, col_name):\n    low_limit, up_limit = outlier_thresholds(dataframe, col_name)\n    if dataframe[(dataframe[col_name] > up_limit) | (dataframe[col_name] < low_limit)].any(axis=None):\n        return True\n    else:\n        return False\n\ndef missing_values_table(dataframe, na_name=False):\n    na_columns = [col for col in dataframe.columns if dataframe[col].isnull().sum() > 0]\n    n_miss = dataframe[na_columns].isnull().sum().sort_values(ascending=False)\n    ratio = (dataframe[na_columns].isnull().sum() \/ dataframe.shape[0] * 100).sort_values(ascending=False)\n    missing_df = pd.concat([n_miss, np.round(ratio, 2)], axis=1, keys=['n_miss', 'ratio'])\n    print(missing_df, end=\"\\n\")\n    if na_name:\n        return na_columns\n\ndef missing_vs_target(dataframe, target, na_columns):\n    temp_df = dataframe.copy()\n\n    for col in na_columns:\n        temp_df[col + '_NA_FLAG'] = np.where(temp_df[col].isnull(), 1, 0)\n\n    na_flags = temp_df.loc[:, temp_df.columns.str.contains(\"_NA_\")].columns\n\n    for col in na_flags:\n        print(pd.DataFrame({\"TARGET_MEAN\": temp_df.groupby(col)[target].mean(),\n                            \"Count\": temp_df.groupby(col)[target].count()}), end=\"\\n\\n\\n\")\n\ndf.columns = [col.upper() for col in df.columns]","ddc5f1e5":"check_df(df)","3b60921d":"cat_cols, num_cols, cat_but_car = grab_col_names(df)","46b094e0":"cat_summary(df, \"OUTCOME\",plot=True)","ee6dbd83":"for col in num_cols:\n    num_summary(df, col,plot=True)","7dcc3a6b":"target_summary_with_num(df,\"OUTCOME\",col)","f9a3e3d2":"f, ax = plt.subplots(figsize=[7, 5])\nsns.heatmap(df.corr(), annot=True, fmt=\".2f\", ax=ax, cmap=\"YlGnBu\")\nax.set_title(\"Correlation Matrix\", fontsize=20)\nplt.show()","21044a39":"df.isnull().sum()","fcbb6f9d":"df[[\"GLUCOSE\",\"BLOODPRESSURE\",\"SKINTHICKNESS\",\"INSULIN\",\"BMI\"]]= df[[\"GLUCOSE\",\"BLOODPRESSURE\",\"SKINTHICKNESS\",\"INSULIN\",\"BMI\"]].replace(0,np.NaN)","304cb65b":"na_cols = missing_values_table(df, True)","bb9a063f":"import missingno as msno\nmsno.bar(df);","5392c152":"missing_vs_target(df, \"OUTCOME\", na_cols)","7165c08f":"def median_target(variable):\n    temp = df[df[variable].notnull()]\n    temp = temp[[variable, 'OUTCOME']].groupby(['OUTCOME'])[[variable]].median().reset_index()\n    return temp","9389d487":"columns = df.columns\ncolumns = columns.drop(\"OUTCOME\")\n\nfor col in columns:\n    df.loc[(df['OUTCOME'] == 0) & (df[col].isnull()), col] = median_target(col)[col][0]\n    df.loc[(df['OUTCOME'] == 1) & (df[col].isnull()), col] = median_target(col)[col][1]","f73ca36a":"for col in num_cols:\n    print(col, check_outlier(df, col))","3d7f6a81":"clf = LocalOutlierFactor(n_neighbors = 20, contamination = 0.1)\nclf.fit_predict(df)    # local outl\u0131er factor skorlar\u0131 gel\u0131r\ndf_scores = clf.negative_outlier_factor_\ndf_scores[0:5]\n\nscores = pd.DataFrame(np.sort(df_scores))\nscores.plot(stacked=True, xlim=[0, 20], style='.-')\nplt.show()\n\nth = np.sort(df_scores)[5]\ndf[df_scores < th]\ndf[df_scores < th].shape # (5, 9)\ndf.describe([0.01, 0.05, 0.75, 0.90, 0.99]).T    # sebeplere bakal\u0131m\n\ndf[df_scores < th ].index\ndf.drop(axis=0, labels=df[df_scores < th ].index)\ndf = df.drop(axis=0, labels=df[df_scores < th].index)\ndf.head()\ndf.shape","a96913d0":"df[\"NEW_BMI\"] = pd.cut(x=df[\"BMI\"], bins = [0,18.5,24.9,29.9,100], \n                       labels = [ \"Underweight\",\"Healthy\",\"Overweight\",\"Obese\"])\n\n\n# GLUCOSE As 2 plasma samples in oral glucose tolerance test\ndf[\"NEW_GLUCOSE\"] = pd.cut(x=df[\"GLUCOSE\"], bins=[0, 140, 200, 300], \n                           labels=[\"Normal\", \"Prediabetes\", \"Diabetes\"])\n\n\n# Age  : Ya\u015f (y\u0131l)\ndf[\"AGE\"].min()  # 21\ndf[\"AGE\"].max()  # 55\ndf.loc[(df['AGE'] <= 30), \"NEW_AGE\"] = \"young\"\ndf.loc[(df['AGE'] > 30) & (df[\"AGE\"] <= 50), \"NEW_AGE\"] = \"middle_age\"\ndf.loc[(df['AGE'] > 50), \"NEW_AGE\"] = \"old\"\ndf.head()\n\ndf[\"NEW_AGE\"].value_counts()\n\n# BloodPressure  : Kan Bas\u0131nc\u0131\ndf.loc[(df['BLOODPRESSURE'] < 70), 'NEW_BLOOD_CAT'] = \"hipotansiyon\"\ndf.loc[(df['BLOODPRESSURE'] >= 70) & (df['BLOODPRESSURE'] < 90), 'NEW_BLOOD_CAT'] = \"normal\"\ndf.loc[(df['BLOODPRESSURE'] >= 90), 'NEW_BLOOD_CAT'] = \"hipertansiyon\"\n\n#Insulin        : 2 saatlik serum ins\u00fclini (mu U\/ml)\ndf[\"NEW_INSULIN\"] = pd.cut(x=df[\"INSULIN\"],\n                           bins=[0, 140, 200, df[\"INSULIN\"].max()],\n                           labels=[\"Normal\", \"Hidden_diabetes\", \"Diabetes\"])\n","9b97e292":"cat_cols, num_cols, cat_but_car = grab_col_names(df)","ebe16909":"df = pd.get_dummies(df[cat_cols + num_cols], drop_first=True)","2200891b":"# Standardization for numerical cols\nrs = RobustScaler()\ndf[num_cols] = rs.fit_transform(df[num_cols])\ndf.head()\n","47de53f5":"y = df[\"OUTCOME\"]\nX = df.drop([\"OUTCOME\"], axis=1)\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.30, random_state=17)\nfrom sklearn.ensemble import RandomForestClassifier\nrf_model = RandomForestClassifier(random_state=46).fit(X_train, y_train)\ny_pred = rf_model.predict(X_test)\naccuracy_score(y_pred, y_test)","573d7555":"def plot_importance(model, features, num=len(X), save=False):\n    feature_imp = pd.DataFrame({'Value': model.feature_importances_, 'Feature': features.columns})\n    plt.figure(figsize=(10, 10))\n    sns.set(font_scale=1)\n    sns.barplot(x=\"Value\", y=\"Feature\", data=feature_imp.sort_values(by=\"Value\",\n                                                                      ascending=False)[0:num])\n    plt.title('Features')\n    plt.tight_layout()\n    plt.show()\n    if save:\n        plt.savefig('importances.png')\n        \nplot_importance(rf_model, X_train)","3ee77811":"* Diabetes dataset was used in this study. The purpose of the analysis is to predict whether a person has diabetes. Random forest classification model was used. The score is 0.8995.","18d7235c":"### \ud83d\udd0e 2. EDA ","3c1de148":"### \ud83d\udea9 9. Conclusion :","3b085bf1":"### \ud83d\udd0e 8. Model","1c6a4a9c":"### \ud83d\udd0e 5. Feature Engineering","5aa3047b":"### \ud83d\udd0e 3. Missing Value Analysis","d76e3615":"![471525656type1-diabates.jpg](attachment:b5bdcd93-c2f0-4afc-b870-0c3af3cb2abb.jpg)","1e829736":"### \ud83d\udd0e 7. Feature Standarzation ","30bd7ade":"### \ud83d\udd0e 6. One- Hot Encoding","ca67b24d":"-----","930162d9":"### \ud83d\udd0e 4. Outliers Analysis ","eebddb3e":"### \u23ec 1. Import Libraries","5a1f872c":"I\u2764\ufe0fVBO","89ca3587":"### \ud83d\udccc**Business Problem :**\n\n* It is desired to develop a machine learning model that can predict whether people have diabetes when their characteristics are specified. You are expected to perform the necessary data analysis and feature engineering steps before developing the model.\n\n### \ud83d\udccc**Dataset Story :**\n\n*  The dataset is part of the large dataset held at the National Institutes of Diabetes-Digestive-Kidney Diseases in the USA. are data. The target variable is specified as \"Outcome\"; 1 indicates positive diabetes test result, 0 indicates negative.\n\n### \ud83d\udccc**Variables :**\n* Pregnancies    : Number of pregnancies\n* Glucose        : 2-hour plasma glucose concentration in the oral glucose tolerance test\n* Blood Pressure : Blood Pressure (Smallness) (mm Hg)\n* SkinThickness  : Skin Thickness\n* Insulin        : 2-hour serum insulin (mu U\/ml)\n* Diabetes Pedigree Function : Function (2 hour plasma glucose concentration in oral glucose tolerance test)\n* BMI            : Body mass index\n* Age            : Age (years)\n* Outcome        : Have the disease(1) or not (0)","52ba0a44":"### \ud83d\udd0e Reading the Dataset"}}