{"cell_type":{"03cab66c":"code","b4ed6990":"code","2b212fed":"code","e1c51a8c":"code","f5ded51f":"code","986b9d47":"code","6da423ef":"code","0074baee":"code","18871a8a":"code","6eeff95b":"code","2140e2d9":"code","a4400043":"code","eb0422d9":"markdown","5c27d557":"markdown","e14f9cd2":"markdown","4f849b99":"markdown","ca553b89":"markdown","f2c1b561":"markdown","135b1597":"markdown"},"source":{"03cab66c":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\nimport tensorflow as tf\nfrom tqdm import tqdm\nimport cv2\nimport os\nfrom random import choice, shuffle\nfrom tensorflow.keras.preprocessing.image import ImageDataGenerator\nfrom zipfile import ZipFile\n\n\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n        \ngpus = tf.config.experimental.list_physical_devices('GPU')\nif gpus:\n    try:\n        for gpu in gpus:\n            tf.config.experimental.set_memory_growth(gpu, True)\n    except RuntimeError as e:\n        print(e)\nprint(tf.__version__)","b4ed6990":"#[TODO] Extrair o dataset\ntrain_data = ZipFile('\/kaggle\/input\/dogs-vs-cats-redux-kernels-edition\/train.zip')\ntest_data = ZipFile('\/kaggle\/input\/dogs-vs-cats-redux-kernels-edition\/test.zip')\n\ntrain_data.extractall()\ntest_data.extractall()\nTRAIN_DIR = os.path.abspath('.\/train')\nTEST_DIR = os.path.abspath('.\/test')\nIMG_SIZE = 128","2b212fed":"#0 DOG\/ 1 CAT\ndef label_image(img):\n    word_label = img.split('.')[-3]\n    if word_label == 'dog': return 1\n    elif word_label == 'cat': return 0\n\ndef create_train_data():\n    train_data = []\n    for img in tqdm(os.listdir(TRAIN_DIR)):\n        label = label_image(img)\n        path = os.path.join(TRAIN_DIR,img)\n        \n        #ABRE A IMAGEM EM ESCALA DE CINZA -> cv2.imread(path,cv2.IMREAD_GRAYSACLE)\n        #REDIMENSIONA A IMAGEM PARA (50 50) -> cv.resive(img,(x,y))\n        img = cv2.resize(cv2.imread(path,cv2.IMREAD_COLOR),(IMG_SIZE,IMG_SIZE))\n        train_data.append([np.array(img),np.array(label)])\n        \n    shuffle(train_data)\n    return train_data\n  \n\ndef process_test_data():\n    test_data = []\n    for img in tqdm(os.listdir(TEST_DIR)):\n        path = os.path.join(TEST_DIR,img)\n        img_num = img.split('.')[0]\n        img = cv2.resize(cv2.imread(path,cv2.IMREAD_COLOR),(IMG_SIZE,IMG_SIZE))\n        test_data.append([np.array(img).astype(np.float32),img_num])\n    return test_data\n","e1c51a8c":"data_train = create_train_data()\ndata_test = process_test_data() ","f5ded51f":"TRAIN = data_train[250:]\nVALID = data_train[:250]\n\nx_predict = np.array([img[0] for img in data_test])\nnumber_image = np.array([img[1] for img in data_test])\n\nx_train = np.array([i[0] for i in TRAIN])\ny_train = np.array([i[1] for i in TRAIN])\n\nx_test = np.array([i[0] for i in VALID])\ny_test = np.array([i[1] for i in VALID])","986b9d47":"base_model = tf.keras.applications.MobileNetV2(input_shape=(IMG_SIZE,IMG_SIZE,3),weights='imagenet', include_top=False)\nbase_model.trainable = True\nbase_model.summary()","6da423ef":"global_average_layer = tf.keras.layers.GlobalAveragePooling2D()(base_model.output)\noutput_layer = tf.keras.layers.Dense(units=1,activation='sigmoid')(global_average_layer)","0074baee":"model = tf.keras.models.Model(inputs=base_model.input, outputs=output_layer)\nmodel.compile(optimizer=tf.keras.optimizers.RMSprop(learning_rate=0.000001),loss='binary_crossentropy',metrics=['accuracy'])\nmodel.summary()","18871a8a":"model.fit(x_train,y_train,epochs=10,batch_size=64)","6eeff95b":"model.evaluate(x_test,y_test)","2140e2d9":"predictions = model.predict(x_predict)","a4400043":"predict = pd.Series(predictions.squeeze())\npredict = pd.Series(np.where(predict>0.5,1,0).squeeze())\nresult = {'id':number_image,'label':predict}\nresult = pd.DataFrame(data=result)\nresult.to_csv('result.csv',index=False)\nresult","eb0422d9":"# Nice results for only 10 epochs training and without tuning hyperparameters","5c27d557":"# Simple training only 10 epochs just test it","e14f9cd2":"# Load and resize dataset with binary label","4f849b99":"# Making the top (classifier) of neural network ","ca553b89":"# \"Build\" a model from MobileNetV2 with weights from imagenet","f2c1b561":"# Compiling and show overview final architeture","135b1597":"# Split in training dataset and development dataset"}}