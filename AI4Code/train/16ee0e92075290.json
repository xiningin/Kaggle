{"cell_type":{"8c22954f":"code","dc03dfd8":"code","46917796":"code","f726774c":"code","35c8765e":"code","4f9151ed":"code","e4480cae":"code","3d3d149f":"code","1f6e5f7a":"code","cb8bbd67":"code","d0a1b82f":"code","5716b6c8":"code","354363a0":"code","2569b079":"code","a30b39e6":"code","dfc466b7":"markdown","2aeab48a":"markdown","7f187438":"markdown","cb6cfda0":"markdown","c77baebc":"markdown","28423b73":"markdown","d521ba63":"markdown"},"source":{"8c22954f":"import numpy as np\nimport pandas as pd\npd.set_option('max_columns', None)\n\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nsns.set_style('darkgrid')\n\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.preprocessing import StandardScaler\n\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.svm import LinearSVC, SVC\nfrom sklearn.neural_network import MLPClassifier\nfrom sklearn.ensemble import RandomForestClassifier, GradientBoostingClassifier\nfrom xgboost import XGBClassifier\nfrom lightgbm import LGBMClassifier\nfrom catboost import CatBoostClassifier\n\nimport warnings\nwarnings.filterwarnings(action='ignore')","dc03dfd8":"data = pd.read_csv('..\/input\/fetal-health-classification\/fetal_health.csv')","46917796":"data","f726774c":"data.info()","35c8765e":"eda_df = data.copy()","4f9151ed":"plt.figure(figsize=(25, 15))\n\nfor i, column in enumerate(eda_df.columns):\n    plt.subplot(4, 6, i + 1)\n    sns.histplot(data=eda_df[column])\n    plt.title(column)\n\nplt.tight_layout()\nplt.show()","e4480cae":"plt.figure(figsize=(25, 15))\n\nfor i, column in enumerate(eda_df.columns):\n    plt.subplot(4, 6, i + 1)\n    sns.boxplot(data=eda_df[column])\n    plt.title(column)\n\nplt.tight_layout()\nplt.show()","3d3d149f":"corr = eda_df.corr()\n\nplt.figure(figsize=(24, 20))\nsns.heatmap(corr, annot=True, vmin=-1.0, cmap='mako')\nplt.title(\"Correlation Matrix\")\nplt.show()","1f6e5f7a":"plt.figure(figsize=(10, 10))\n\nplt.pie(\n    eda_df['fetal_health'].value_counts(),\n    autopct='%.2f%%',\n    labels=[\"NORMAL\", \"SUSPECT\", \"PATHOLOGICAL\"],\n    colors=sns.color_palette('Greys')\n)\n\nplt.title(\"Class Distribution\")\nplt.show()","cb8bbd67":"def preprocess_inputs(df):\n    df = df.copy()\n    \n    # Rename target values\n    df['fetal_health'] = df['fetal_health'].replace({\n        1.0: \"NORMAL\",\n        2.0: \"SUSPECT\",\n        3.0: \"PATHOLOGICAL\"\n    })\n    \n    # Split df into X and y\n    y = df['fetal_health']\n    X = df.drop('fetal_health', axis=1)\n    \n    # Train-test split\n    X_train, X_test, y_train, y_test = train_test_split(X, y, train_size=0.7, shuffle=True, random_state=1)\n    \n    # Scale X\n    scaler = StandardScaler()\n    scaler.fit(X_train)\n    X_train = pd.DataFrame(scaler.transform(X_train), index=X_train.index, columns=X_train.columns)\n    X_test = pd.DataFrame(scaler.transform(X_test), index=X_test.index, columns=X_test.columns)\n    \n    return X_train, X_test, y_train, y_test","d0a1b82f":"X_train, X_test, y_train, y_test = preprocess_inputs(data)","5716b6c8":"X_train","354363a0":"y_train","2569b079":"models = {\n    \"                   Logistic Regression\": LogisticRegression(),\n    \"                   K-Nearest Neighbors\": KNeighborsClassifier(),\n    \"                         Decision Tree\": DecisionTreeClassifier(),\n    \"Support Vector Machine (Linear Kernel)\": LinearSVC(),\n    \"   Support Vector Machine (RBF Kernel)\": SVC(),\n    \"                        Neural Network\": MLPClassifier(),\n    \"                         Random Forest\": RandomForestClassifier(),\n    \"                     Gradient Boosting\": GradientBoostingClassifier(),\n    \"                               XGBoost\": XGBClassifier(eval_metric='mlogloss'),\n    \"                              LightGBM\": LGBMClassifier(),\n    \"                              CatBoost\": CatBoostClassifier(verbose=0)\n}\n\nfor name, model in models.items():\n    model.fit(X_train, y_train)\n    print(name + \" trained.\")","a30b39e6":"for name, model in models.items():\n    print(name + \": {:.2f}%\".format(model.score(X_test, y_test) * 100))","dfc466b7":"# Getting Started","2aeab48a":"# Task for Today  \n\n***\n\n## Fetal Health Prediction  \n\nGiven *data about fetuses*, let's try to predict the **health** of a given fetus.\n\nWe will use a variety of classification models to make our predictions.","7f187438":"# Exploratory Data Analysis","cb6cfda0":"# Data Every Day  \n\nThis notebook is featured on Data Every Day, a YouTube series where I train models on a new dataset each day.  \n\n***\n\nCheck it out!  \nhttps:\/\/youtu.be\/_7z2REeVxeU","c77baebc":"# Training","28423b73":"# Results","d521ba63":"# Preprocessing"}}