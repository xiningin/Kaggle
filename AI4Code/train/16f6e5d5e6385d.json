{"cell_type":{"3bafaea1":"code","619269c8":"code","e9922c4f":"code","a608edec":"code","0e789147":"code","fd49c2a2":"code","154ccf1c":"code","0baefbf3":"code","f8dc68c5":"code","3e983245":"code","63e027a5":"code","a56704e7":"code","86b9ace9":"code","e33c48f5":"code","33cc6dca":"code","a1348491":"code","9463ebf8":"markdown","15d18a3e":"markdown","bb347103":"markdown","68cc68b6":"markdown","408c3d4c":"markdown","f85986b0":"markdown","635fa11c":"markdown","dcb9a0ad":"markdown","15488b78":"markdown","69d2827e":"markdown","bbe53593":"markdown","b8ce6108":"markdown","6982b753":"markdown","6ac4e92e":"markdown","347849f3":"markdown","7bd1a10b":"markdown","df8392aa":"markdown","97a352d9":"markdown","962edb15":"markdown","838859e2":"markdown","dc427d1b":"markdown","ba2cca9c":"markdown"},"source":{"3bafaea1":"f = open('..\/input\/ceg1713-data-files\/stats.csv')\n\ncols = f.readline()\nprint (cols)","619269c8":"print(f.readline())\nprint(f.readline())\nprint(f.readline())\nprint(f.readline())","e9922c4f":"f = open('..\/input\/ceg1713-data-files\/stats.csv')\n\ncols = f.readline()\nprint (cols)\n\nfor line in f:\n    res = line.split(',')\n    print (res)\n\n","a608edec":"f = open('..\/input\/ceg1713-data-files\/stats.csv')\nmydata=[]\ncols = f.readline()\nprint (cols)\n\n\nfor line in f:\n    res = line.split(',')\n    res = list(map(float, res))\n    mydata.append(res)\n\nprint(mydata)","0e789147":"f = open('..\/input\/ceg1713-data-files\/stats.csv')\nmydata=[]\ncols = f.readline()\nprint (cols)\n\nfor line in f:\n    res = line.split(',')\n    print(\"TEXT:----------------\")\n    print (res)\n    res = [float(x) for x in res] #list comprehension - for all values in \"res\" apply float(x)\n    print(\"NUMBERS:----------------\")\n    print(res)\n    mydata.append(res)\n","fd49c2a2":"mydata","154ccf1c":"\n#zip create tuples\ngeoeast, geonorth, imd, pop, job = zip(*mydata)\n\nprint(geoeast)\nprint(imd)","0baefbf3":"f = open('..\/input\/ceg1713-data-files\/stats.csv')\n\ncols = f.readline()\nprint (cols)\n\neastings = []\nnorthings = []\n\nfor line in f:\n    res = line.split(',')\n    eastings.append(float(res[0]))\n    northings.append(float(res[1]))\n\nfor i in range(len(eastings)):\n    print(eastings[i], northings[i])\n","f8dc68c5":"import numpy as np\nimport matplotlib.pyplot as plt\n\nprint(np.mean(pop), np.median(pop), np.std(pop,ddof=1))","3e983245":"print(np.corrcoef(imd, job))","63e027a5":"plt.scatter(imd, job) \nplt.plot(np.unique(imd), np.poly1d(np.polyfit(imd, job, 1))(np.unique(imd)), color='red')\nplt.show()","a56704e7":"w = open('.\/myoutoutfile.txt', 'w')\n\nw.write('My data file \\n')\nw.write(str(np.mean(pop)))\nw.write(str(np.median(pop)))\nw.write(str(np.std(pop,ddof=1)))\nw.close()","86b9ace9":"import fiona\nimport shapely.geometry as shg\nimport fiona                             #a library that reads spatial formats\nfrom shapely.geometry import shape\n\nshapefile_polygons = []                  #a list to store the polygons we load\n\n\nc = fiona.open('..\/input\/ceg1713-data-files\/polygons.shp') #Open the shapefile\n\nfor each_poly in c:\n    geom = shape(each_poly['geometry'])\n    poly_data = each_poly[\"geometry\"][\"coordinates\"][0]  #EXTERIOR RING ONLY\n    poly = shg.Polygon(poly_data)\n    #Converts into the same format as the other data\n    shapefile_polygons.append(list(poly.exterior.coords))\n\ndisplay(shapefile_polygons)\n","e33c48f5":"for poly in shapefile_polygons:\n    xy = list(zip(*poly))\n    plt.fill(xy[0], xy[1], alpha=0.5)","33cc6dca":"shapefile_polygons = []                  #a list to store the polygons we load\n\n\nc = fiona.open('..\/input\/ceg1713-data-files\/buildings.shp') #Open the shapefile\n\nfor each_poly in c:\n    geom = shape(each_poly['geometry'])\n    poly_data = each_poly[\"geometry\"][\"coordinates\"][0]  #EXTERIOR RING ONLY\n    poly = shg.Polygon(poly_data)\n    #Converts into the same format as the other data\n    shapefile_polygons.append(list(poly.exterior.coords))\n\nfor poly in shapefile_polygons:\n    xy = list(zip(*poly))\n    plt.fill(xy[0], xy[1], alpha=0.5)\n","a1348491":"import folium\nimport geopandas as gpd\n\n#read the files using geopandas\npolys=gpd.read_file('..\/input\/ceg1713-data-files\/buildings.shp')\n\n#Find the centroid to position the map\ncentroidp = polys.geometry.centroid \n#Convert from CRS British national grid to WGS84 for plotting in the map\nwgspolys = polys.to_crs(\"EPSG:4326\").to_json()\nwgscentre = centroidp.to_crs(\"EPSG:4326\")\n\nlong = wgscentre.x\nlat = wgscentre.y\n\n#Find spatial mean\nlong = long.mean()\nlat = lat.mean()\n\n#Plot it\nmymap = folium.Map(location=[lat, long], tiles='openstreetmap', zoom_start=13)\nplotpoly =folium.features.GeoJson(wgspolys)\nmymap.add_child(plotpoly)\n","9463ebf8":"# Many ways to get the data we need\n* here use list comprehension to convert all values to floats (as they are all numbers)","15d18a3e":" # Writing data files\n ## Uses the \"write\" command after opening a file\n ## note we open the file but apply the \"w\" to signigy that we are writing the file\n ## You should \"close\" the file so that it can be accessed elsewhere","bb347103":"# Using file readers\n## Fiona is a library for spatial data handling\n## Like many python libs it has readers for different data formats\n## In this case we will read shapefiles\n# We end up with a LIST of shapefiles converted into Shapely compatible polygons","68cc68b6":"# NB: See PANDAS Next week for better way of handling data","408c3d4c":"## Then we need to get lists of individual columns\n## magic zip command to the rescue...","f85986b0":"# Plotting using maps - Folium","635fa11c":"# Usually handled in a loop","dcb9a0ad":"# Plotting the polygons using Matplotlib\n* iterate over the list and plot them in turn","15488b78":"## Practical complete","69d2827e":"# FIRST CHECK YOUR DATA!!","bbe53593":"# Now we have numbers we can do something\n* using numpy to calculate some statistics","b8ce6108":"# The top line contains column headings so skip over\n* Text files are accessed sequentially - ie you can only read forward","6982b753":"# Reading a file line by line","6ac4e92e":"## Click on input on the data section in the right panel\n## Click on the stats.csv file to see the contents of the file","347849f3":"# Plotting correlations\n* does one data set change with respect to another\n* -1 = negative correlation\n* +1 = poitive correlation\n* using matplotlib to create scatter graph and regression lines\n* this is called \"exploratory data science\"","7bd1a10b":"# data stored in TEXT files like this is TEXT so if we want numbers we have to convert\n## We can do this in many ways\n## map() applies a function to lots of data at the same time","df8392aa":"# Loading real data!\n* Ordnance Survey Mastermap Buildings","97a352d9":"# This practical introduces you to opening files in Python\n## Files are sequential - we start at the beginning and read to the end\n## They are opened with the \"OPEN\" command\n## And then we read from them\n\n## Later in this practical we will use \"data readers\" from other libraries to read data in different formats\n## In this example we will read data stored in SHAPEFILES","962edb15":"## Another way of doing this is to use a list comprehension - which is a special type of iteration","838859e2":"# The \"split()\" function creates lists from rows of data - using a character to \"split\" up the row of data\n# For CSV files this character is a comma (\",\")","dc427d1b":"# Read a simple CSV file - check contents first\n* use the open command to open the file\n* iterate over the file line by line\n* usually need to process the data (eg. using split)\n* data in TEXT files is stored as STRING data so must convert to NUMBERS using eg. float()","ba2cca9c":"# Or just extracting the data we need\n* eg. just the coordinate data in col[0] and col[1]\n* make empty lists]\n* append the data to lists converting types if need be"}}