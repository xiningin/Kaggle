{"cell_type":{"f16cd3fd":"code","cc42a330":"code","1cabb7f9":"code","e58cc808":"code","71cfaef7":"code","f61aeb58":"code","3e4a3055":"code","44df617c":"code","a7efc8d5":"code","c5a5a9cc":"code","54797bf2":"code","da6b8410":"code","fbee047d":"code","82be2c0c":"code","2c73472a":"code","a52bbca9":"code","2cb16bcd":"code","b3a2f2d5":"code","f3dde4ea":"code","e77de293":"code","829c545d":"code","a7e8b5b7":"code","f460d1ce":"code","12368acb":"code","456dd128":"markdown","4ce699fc":"markdown","b1b7933f":"markdown","89832190":"markdown","8610306b":"markdown","34752452":"markdown"},"source":{"f16cd3fd":"%%html\n<style> \n@import url('https:\/\/fonts.googleapis.com\/css?family=Akronim|Roboto&effect=fire-animation');\nspan {color:black; text-shadow:4px 4px 4px #aaa;}\ndiv.output_prompt {color:crimson;} \ndiv.input_prompt {color:firebrick;} \ndiv.output_area pre,div.output_subarea {font-size:15px; color:crimson}\ndiv.output_stderr pre {background-color:#f7e8e8;}\n<\/style>","cc42a330":"import warnings; warnings.filterwarnings('ignore')\nimport h5py,os,pandas as pd,numpy as np,pylab as pl\nimport seaborn as sn,keras as ks,tensorflow as tf\nfrom skimage.transform import resize\nimport scipy; from scipy import misc\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.preprocessing import OneHotEncoder\nnp.set_printoptions(precision=6)\npl.style.use('seaborn-whitegrid')\nfw='weights.style.hdf5'\nfrom keras.callbacks import ModelCheckpoint,EarlyStopping\nfrom keras.callbacks import ReduceLROnPlateau\nfrom keras.models import Sequential,load_model,Model\nfrom keras.layers import Input,Activation,Dense,LSTM\nfrom keras.layers import Flatten,Dropout,BatchNormalization\nfrom keras.layers import Conv2D,MaxPooling2D\nfrom keras.layers import GlobalAveragePooling2D,GlobalMaxPooling2D\nfrom keras.layers.advanced_activations import PReLU,LeakyReLU\nfrom keras.applications.resnet50 import ResNet50\nfrom keras.applications.resnet50 import preprocess_input as resnet50pi\nfrom keras.applications.inception_v3 import InceptionV3\nfrom keras.applications.inception_v3 import preprocess_input as inceptionv3pi\nfrom keras.applications.xception import Xception\nfrom keras.applications.xception import preprocess_input as xceptionpi\nfrom keras.applications.inception_resnet_v2 import InceptionResNetV2\nfrom keras.applications.inception_resnet_v2 import preprocess_input as inceptionresnetv2pi\nfrom keras import __version__\nprint('keras version:', __version__)\nprint('tensorflow version:',tf.__version__)\nprint(os.listdir(\"..\/input\"))","1cabb7f9":"def ohe(x): \n    return OneHotEncoder(n_values='auto')\\\n           .fit(x.reshape(-1,1)).transform(x.reshape(-1,1))\\\n           .toarray().astype('int64')\ndef tts(X,y): \n    x_train,x_test,y_train,y_test=\\\n    train_test_split(X,y,test_size=.2,random_state=1)\n    n=int(len(x_test)\/2)\n    x_valid,y_valid=x_test[:n],y_test[:n]\n    x_test,y_test=x_test[n:],y_test[n:]\n    return x_train,x_valid,x_test,y_train,y_valid,y_test\ndef history_plot(fit_history):\n    pl.figure(figsize=(12,10)); pl.subplot(211)\n    keys=list(fit_history.history.keys())[0:4]\n    pl.plot(fit_history.history[keys[0]],\n            color='crimson',label='train')\n    pl.plot(fit_history.history[keys[2]],\n            color='firebrick',label='valid')\n    pl.xlabel(\"Epochs\"); pl.ylabel(\"Loss\")\n    pl.legend(); pl.grid()\n    pl.title('Loss Function')     \n    pl.subplot(212)\n    pl.plot(fit_history.history[keys[1]],\n            color='crimson',label='train')\n    pl.plot(fit_history.history[keys[3]],\n            color='firebrick',label='valid')\n    pl.xlabel(\"Epochs\"); pl.ylabel(\"Accuracy\")    \n    pl.legend(); pl.grid()\n    pl.title('Accuracy'); pl.show()","e58cc808":"data=pd.read_csv(\"..\/input\/style-color-images\/style\/style.csv\")\ndata.tail()","71cfaef7":"f=h5py.File('..\/input\/style-color-images\/StyleColorImages.h5','r')\nkeys=list(f.keys())\nbrands=np.array(f[keys[0]])\nimages=np.array(f[keys[1]])\nproducts=np.array(f[keys[2]])\n[keys,[brands.shape,images.shape,products.shape]]","f61aeb58":"# normalization of image arrays\nimages=images.astype('float32')\/255\nprint('Product: ',data['product_name'][100])\nprint('Brand: ',data['brand_name'][100])\npl.figure(figsize=(3,3)); pl.imshow(images[100])\npl.show()","3e4a3055":"# one-hot encoding\ncbrands,cproducts=ohe(brands),ohe(products)\nctargets=np.concatenate((cbrands,cproducts),axis=1)\npd.DataFrame([images.shape,cbrands.shape,\n              cproducts.shape,ctargets.shape])","44df617c":"# splitting the data\n# Color Images \/ Brands \nx_train1,x_valid1,x_test1,\\\ny_train1,y_valid1,y_test1=tts(images,cbrands)\n# Color Images \/ Products \nx_train3,x_valid3,x_test3,\\\ny_train3,y_valid3,y_test3=tts(images,cproducts)","a7efc8d5":"# creating bottleneck features\nresize_x_train=np.array([scipy.misc.imresize(x_train1[i],(197,197,3)) \n                           for i in range(0,len(x_train1))]).astype('float32')\nresize_x_valid=np.array([scipy.misc.imresize(x_valid1[i],(197,197,3)) \n                           for i in range(0,len(x_valid1))]).astype('float32')\nresize_x_test=np.array([scipy.misc.imresize(x_test1[i],(197,197,3)) \n                         for i in range(0,len(x_test1))]).astype('float32')\nx_train_bn=resnet50pi(resize_x_train)\nx_valid_bn =resnet50pi(resize_x_valid)\nx_test_bn=resnet50pi(resize_x_test)\nfn='..\/input\/resnet50\/resnet50_weights_tf_dim_ordering_tf_kernels_notop.h5'\nresnet50_base_model=ResNet50(weights=fn,include_top=False)\nx_train_bn=resnet50_base_model.predict(x_train_bn)\nx_valid_bn=resnet50_base_model.predict(x_valid_bn)\nx_test_bn=resnet50_base_model.predict(x_test_bn)","c5a5a9cc":"sh=x_train_bn.shape[1:]\ndef resnet50_model():\n    model=Sequential()   \n    model.add(GlobalAveragePooling2D(input_shape=sh))    \n    model.add(Dense(2048))\n    model.add(LeakyReLU(alpha=.02))\n    model.add(Dropout(.5))        \n    model.add(Dense(512))\n    model.add(LeakyReLU(alpha=.02))\n    model.add(Dropout(.5))\n    model.add(Dense(7,activation='softmax'))    \n    model.compile(loss='categorical_crossentropy',\n                  optimizer='adam',metrics=['accuracy'])\n    return model\nresnet50_model=resnet50_model()","54797bf2":"checkpointer=ModelCheckpoint(filepath=fw,verbose=2,save_best_only=True)\nlr_reduction=ReduceLROnPlateau(monitor='val_loss',patience=10,\n                               verbose=2,factor=.5)\nestopping=EarlyStopping(monitor='val_loss',patience=25,verbose=2)\nhistory=\\\nresnet50_model.fit(x_train_bn,y_train1,\n                   validation_data=(x_valid_bn,y_valid1),\n                   epochs=100,batch_size=128,verbose=2,\n                   callbacks=[checkpointer,lr_reduction,estopping]);","da6b8410":"history_plot(history)\nresnet50_model.load_weights(fw)\nresnet50_scores=resnet50_model.evaluate(x_test_bn,y_test1)\nprint(\"Accuracy: %.2f%%\"%(resnet50_scores[1]*100))\nresnet50_scores","fbee047d":"resize_x_train=np.array([scipy.misc.imresize(x_train3[i],(139,139,3)) \n                         for i in range(0,len(x_train3))]).astype('float32')\nresize_x_valid=np.array([scipy.misc.imresize(x_valid3[i],(139,139,3)) \n                         for i in range(0,len(x_valid3))]).astype('float32')\nresize_x_test=np.array([scipy.misc.imresize(x_test3[i],(139,139,3)) \n                        for i in range(0,len(x_test3))]).astype('float32')\nx_train_bn=inceptionv3pi(resize_x_train)\nx_valid_bn=inceptionv3pi(resize_x_valid)\nx_test_bn=inceptionv3pi(resize_x_test)\nfn='..\/input\/inceptionv3\/inception_v3_weights_tf_dim_ordering_tf_kernels_notop.h5'\ninception_v3_base_model=InceptionV3(weights=fn,include_top=False)\nx_train_bn=inception_v3_base_model.predict(x_train_bn)\nx_valid_bn=inception_v3_base_model.predict(x_valid_bn)\nx_test_bn=inception_v3_base_model.predict(x_test_bn)","82be2c0c":"sh=x_train_bn.shape[1:]\ndef inception_v3_model():\n    model=Sequential()  \n    model.add(GlobalAveragePooling2D(input_shape=sh))    \n    model.add(Dense(2048))\n    model.add(LeakyReLU(alpha=.02))\n    model.add(Dropout(.5))       \n    model.add(Dense(512))\n    model.add(LeakyReLU(alpha=.02))\n    model.add(Dropout(.5))\n    model.add(Dense(10,activation='softmax'))     \n    model.compile(loss='categorical_crossentropy',\n                  optimizer='nadam',metrics=['accuracy'])\n    return model\ninception_v3_model=inception_v3_model()","2c73472a":"checkpointer=ModelCheckpoint(filepath=fw,verbose=2,save_best_only=True)\nlr_reduction=ReduceLROnPlateau(monitor='val_loss',patience=10,\n                               verbose=2,factor=.5)\nestopping=EarlyStopping(monitor='val_loss',patience=25,verbose=2)\nhistory=\\\ninception_v3_model.fit(x_train_bn,y_train3,\n                       validation_data=(x_valid_bn,y_valid3),\n                       epochs=100,batch_size=128,verbose=2,\n                       callbacks=[checkpointer,lr_reduction,estopping]);","a52bbca9":"history_plot(history)\ninception_v3_model.load_weights(fw)\ninception_v3_scores=inception_v3_model.evaluate(x_test_bn,y_test3)\nprint(\"Accuracy: %.2f%%\"%(inception_v3_scores[1]*100))\ninception_v3_scores","2cb16bcd":"resize_x_train=np.array([scipy.misc.imresize(x_train1[i],(71,71,3)) \n                         for i in range(0,len(x_train1))]).astype('float32')\nresize_x_valid=np.array([scipy.misc.imresize(x_valid1[i],(71,71,3)) \n                         for i in range(0,len(x_valid1))]).astype('float32')\nresize_x_test=np.array([scipy.misc.imresize(x_test1[i],(71,71,3)) \n                        for i in range(0,len(x_test1))]).astype('float32')\nx_train_bn=xceptionpi(resize_x_train)\nx_valid_bn=xceptionpi(resize_x_valid)\nx_test_bn=xceptionpi(resize_x_test)\nfn='..\/input\/xception\/xception_weights_tf_dim_ordering_tf_kernels_notop.h5'\nxception_base_model=Xception(weights=fn,include_top=False)\nx_train_bn=xception_base_model.predict(x_train_bn)\nx_valid_bn=xception_base_model.predict(x_valid_bn)\nx_test_bn=xception_base_model.predict(x_test_bn)","b3a2f2d5":"sh=x_train_bn.shape[1:]\ndef xception_model():\n    model=Sequential()   \n    model.add(GlobalAveragePooling2D(input_shape=sh))    \n    model.add(Dense(2048))\n    model.add(LeakyReLU(alpha=.02))\n    model.add(Dropout(.5))        \n    model.add(Dense(256))\n    model.add(LeakyReLU(alpha=.02))\n    model.add(Dropout(.5))\n    model.add(Dense(7,activation='softmax'))   \n    model.compile(loss='categorical_crossentropy',\n                  optimizer='adam',metrics=['accuracy'])\n    return model\nxception_model=xception_model()","f3dde4ea":"checkpointer=ModelCheckpoint(filepath=fw,verbose=2,save_best_only=True)\nlr_reduction=ReduceLROnPlateau(monitor='val_loss',patience=10,\n                               verbose=2,factor=.5)\nestopping=EarlyStopping(monitor='val_loss',patience=25,verbose=2)\nhistory=\\\nxception_model.fit(x_train_bn,y_train1,\n                   validation_data=(x_valid_bn,y_valid1),\n                   epochs=100,batch_size=128,verbose=2,\n                   callbacks=[checkpointer,lr_reduction,estopping]);","e77de293":"history_plot(history)\nxception_model.load_weights(fw)\nxception_scores=xception_model.evaluate(x_test_bn,y_test1)\nprint(\"Accuracy: %.2f%%\"%(xception_scores[1]*100))\nxception_scores","829c545d":"resize_x_train=np.array([scipy.misc.imresize(x_train3[i],(139,139,3)) \n                         for i in range(0,len(x_train3))]).astype('float32')\nresize_x_valid=np.array([scipy.misc.imresize(x_valid3[i],(139,139,3)) \n                         for i in range(0,len(x_valid3))]).astype('float32')\nresize_x_test=np.array([scipy.misc.imresize(x_test3[i],(139,139,3)) \n                        for i in range(0,len(x_test3))]).astype('float32')\nx_train_bn=inceptionresnetv2pi(resize_x_train)\nx_valid_bn=inceptionresnetv2pi(resize_x_valid)\nx_test_bn=inceptionresnetv2pi(resize_x_test)\nfn='..\/input\/inceptionresnetv2\/inception_resnet_v2_weights_tf_dim_ordering_tf_kernels_notop.h5'\ninceptionresnetv2_base_model=InceptionResNetV2(weights=fn,include_top=False)\nx_train_bn=inceptionresnetv2_base_model.predict(x_train_bn)\nx_valid_bn=inceptionresnetv2_base_model.predict(x_valid_bn)\nx_test_bn=inceptionresnetv2_base_model.predict(x_test_bn)","a7e8b5b7":"sh=x_train_bn.shape[1:]\ndef inceptionresnetv2_model():\n    model=Sequential()   \n    model.add(GlobalAveragePooling2D(input_shape=sh))    \n    model.add(Dense(2048))\n    model.add(LeakyReLU(alpha=.02))\n    model.add(Dropout(.5))\n    model.add(Dense(256))\n    model.add(LeakyReLU(alpha=.02))\n    model.add(Dropout(.5))\n    model.add(Dense(10,activation='softmax'))    \n    model.compile(loss='categorical_crossentropy',\n                  optimizer='nadam',metrics=['accuracy'])\n    return model\ninceptionresnetv2_model=inceptionresnetv2_model()","f460d1ce":"checkpointer=ModelCheckpoint(filepath=fw,verbose=2,save_best_only=True)\nlr_reduction=ReduceLROnPlateau(monitor='val_loss',patience=10,\n                               verbose=2,factor=.5)\nestopping=EarlyStopping(monitor='val_loss',patience=25,verbose=2)\nhistory=\\\ninceptionresnetv2_model.fit(x_train_bn,y_train3,\n                            validation_data=(x_valid_bn,y_valid3),\n                            epochs=100,batch_size=128,verbose=2,\n                            callbacks=[checkpointer,lr_reduction,estopping]);","12368acb":"history_plot(history)\ninceptionresnetv2_model.load_weights(fw)\ninceptionresnetv2_scores=inceptionresnetv2_model.evaluate(x_test_bn,y_test3)\nprint(\"Accuracy: %.2f%%\"%(inceptionresnetv2_scores[1]*100))\ninceptionresnetv2_scores","456dd128":"## Xception","4ce699fc":"<h1 class=\"font-effect-fire-animation\" style=\"color:crimson; font-family:Akronim;\">Data Preprocessing<\/h1>","b1b7933f":"## Inception V3","89832190":"<h1 class=\"font-effect-fire-animation\" style=\"color:crimson; font-family:Akronim;\">Code Modules, Styling, Helpful Functions and Links<\/h1>\n#### [Github Version](https:\/\/github.com\/OlgaBelitskaya\/deep_learning_projects\/blob\/master\/DL_PP4) & [Colaboratory Version](https:\/\/colab.research.google.com\/drive\/1r5yRD-3tQwN6lSql_VRoVuwQ8DaY5zUt)","8610306b":"<h1 class=\"font-effect-fire-animation\" style=\"color:crimson; font-family:Akronim;\">Classification Models<\/h1>\n## ResNet50","34752452":"## InceptionResNetV2"}}