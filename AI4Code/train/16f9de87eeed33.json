{"cell_type":{"8f35fdff":"code","d825f154":"code","5215b5c3":"code","67db5402":"code","c55deb42":"code","d432ac1f":"code","f2cd5788":"code","45fdbe03":"code","eeec9ea7":"code","d88d3551":"code","ad98ee29":"code","cf05a211":"code","e485c41e":"code","c51f2adb":"code","df730599":"code","039fc682":"code","d295e87f":"code","e134f1bf":"code","1af87ad0":"code","8086cfdf":"code","97a51eb4":"code","33283074":"markdown"},"source":{"8f35fdff":"# Necessary Dependencies\nimport os\nimport numpy as np \nimport pandas as pd \n!pip install utils\nfrom utils import *\nfrom glob import glob\nimport matplotlib.pyplot as plt\nfrom itertools import chain\nfrom datetime import datetime\nimport statistics\nfrom tqdm import tqdm\nimport tensorflow as tf\n# Model Dependencies\nfrom tensorflow.keras.preprocessing.image import ImageDataGenerator\nfrom tensorflow.keras.activations import sigmoid\nfrom tensorflow.keras.layers import Dense,Conv2D, Flatten, Dropout, MaxPooling2D, GlobalAveragePooling2D\nfrom tensorflow.keras.models import Model, Sequential\nfrom tensorflow.keras.metrics import Accuracy, Precision, Recall, AUC, BinaryAccuracy, FalsePositives, FalseNegatives, TruePositives, TrueNegatives\nfrom tensorflow.keras.callbacks import CSVLogger, ModelCheckpoint\nfrom tensorflow.keras.losses import BinaryCrossentropy\nfrom tensorflow.keras.optimizers import SGD, Adam, RMSprop\nfrom tensorflow.keras.applications import DenseNet121, DenseNet169, DenseNet201, VGG16, ResNet50\nfrom keras import backend as K\nimport keras \nimport tensorflow as tf\nfrom tensorflow import keras\nfrom tensorflow.keras import layers\nimport matplotlib\nfrom sklearn.metrics import roc_curve, auc, roc_auc_score\nfrom tensorflow.keras.callbacks import ModelCheckpoint, ReduceLROnPlateau, LearningRateScheduler\nfrom sklearn.metrics import roc_curve, auc\nprint('Started')","d825f154":"path, dirs, files = next(os.walk(\"..\/input\/brain-mri-data\/Brain_Data_Organised\/Train\/Stroke\"))\nfile_count = len(files)\nprint('Stroke:',file_count)\npath, dirs, files = next(os.walk(\"..\/input\/brain-mri-data\/Brain_Data_Organised\/Train\/Normal\"))\nfile_count = len(files)\nprint('Non-Stroke:',file_count)","5215b5c3":"image_size = (224, 224)\nbatch_size = 16\n\ntrain_df = tf.keras.preprocessing.image_dataset_from_directory(\n    \"..\/input\/brain-mri-data\/Brain_Data_Organised\/Train\",\n    validation_split=0.20,\n    subset=\"training\",\n    seed=1337,\n    image_size=image_size,\n    batch_size=batch_size,\n)\nval_df = tf.keras.preprocessing.image_dataset_from_directory(\n    \"..\/input\/brain-mri-data\/Brain_Data_Organised\/Train\",\n    validation_split=0.2,\n    subset=\"validation\",\n    seed=333,\n    image_size=image_size,\n    batch_size=batch_size,\n)\ntest_df = tf.keras.preprocessing.image_dataset_from_directory(\n    \"..\/input\/brain-mri-data\/Brain_Data_Organised\/Test\",\n    image_size=image_size,\n    batch_size=batch_size,\n)","67db5402":"data_augmentation = keras.Sequential(\n    [\n        layers.experimental.preprocessing.RandomFlip(\"horizontal\"),\n        layers.experimental.preprocessing.RandomRotation(0.1),\n        layers.experimental.preprocessing.RandomZoom(height_factor=(0.2, 0.3), width_factor=None, fill_mode='reflect',\n        interpolation='bilinear', seed=None, fill_value=0.0),\n                layers.experimental.preprocessing.RandomCrop(height= 224, width = 224, seed=None),\n    ]\n)","c55deb42":"plt.figure(figsize=(10, 10))\nfor images, _ in train_df.take(1):\n    for i in range(9):\n        augmented_images = data_augmentation(images)\n        ax = plt.subplot(3, 3, i + 1)\n        plt.imshow(augmented_images[0].numpy().astype(\"uint8\"))\n        plt.axis(\"off\")","d432ac1f":"train_df = train_df.prefetch(buffer_size=32)\nval_df = val_df.prefetch(buffer_size=32)","f2cd5788":"# Hyperparameters\nIMG_IND=224\nIMG_SHAPE = (IMG_IND,IMG_IND,3)\nLOSS = BinaryCrossentropy()\n#OPTIMIZER =Adam(learning_rate=0.001, beta_1=0.9, beta_2=0.999)\nOPTIMIZER =RMSprop(learning_rate=0.001)\nMETRICS = [\n      keras.metrics.TruePositives(name='tp'),\n      keras.metrics.FalsePositives(name='fp'),\n      keras.metrics.TrueNegatives(name='tn'),\n      keras.metrics.FalseNegatives(name='fn'), \n      keras.metrics.BinaryAccuracy(name='BinaryAccuracy'),\n      keras.metrics.Precision(name='precision'),\n      keras.metrics.Recall(name='recall'),\n      keras.metrics.AUC(name='auc'),\n]\n\nIMG_SIZE = (224, 224)\nSEED = 2\nBATCH_SIZE = 16","45fdbe03":"def get_callbacks(model_name):\n    callbacks =[]\n    tensor_board = tf.keras.callbacks.TensorBoard(log_dir='.\/logs', histogram_freq=0)\n    callbacks.append(tensor_board)\n    checkpoint = tf.keras.callbacks.ModelCheckpoint(filepath=f'model.{model_name}.h5', verbose=1, monitor='val_loss',mode='min',save_best_only=True)\n    callbacks.append(checkpoint)\n    anne = ReduceLROnPlateau(monitor='val_loss', factor=0.5, patience=2, verbose=2, min_lr=0.0000000000000000001,min_delta=0.00001,mode='auto') \n    callbacks.append(anne)\n    return callbacks","eeec9ea7":"base_model = tf.keras.applications.DenseNet121(input_shape=IMG_SHAPE,include_top=False,weights='imagenet')\nbase_model.trainable = True\nx = base_model.output\nx = GlobalAveragePooling2D()(x)\npredictions = Dense(1, activation='sigmoid',name='Final')(x)\nmodel = Model(inputs=base_model.input, outputs=predictions)\nmodel.compile(loss ='binary_crossentropy',optimizer=OPTIMIZER,metrics=METRICS)","d88d3551":"callbacks = get_callbacks('dense121')\nhistory = model.fit( train_df,epochs=100,\n                    validation_data= val_df,\n                    callbacks=[callbacks])","ad98ee29":"results = model.evaluate_generator(test_df, steps=len(test_df), verbose=1)","cf05a211":"print('DesnseNet121- RMSprop:')\nprint('---------------')\nprint(\"Binary Accuracy: \",(results[5]))\nprint(\"Precision: \",(results[6]))\nprint(\"Recall: \",(results[7]))\nprint(\"AUC: \",(results[8]))\nprint(\"F1 Score: \",(2*((results[6]*results[7])\/((results[6]+results[7])))))\n","e485c41e":"base_model = tf.keras.applications.ResNet50(input_shape=IMG_SHAPE,include_top=False,weights='imagenet')\nbase_model.trainable = True\nx = base_model.output\nx = GlobalAveragePooling2D()(x)\npredictions = Dense(1, activation='sigmoid',name='Final')(x)\nmodel = Model(inputs=base_model.input, outputs=predictions)\nmodel.compile(loss ='binary_crossentropy',optimizer=OPTIMIZER,metrics=METRICS)","c51f2adb":"callbacks = get_callbacks('resnet50')\nhistory = model.fit( train_df,epochs=100,\n                    validation_data= val_df,\n                    callbacks=[callbacks])","df730599":"results = model.evaluate_generator(test_df, steps=len(test_df), verbose=1)","039fc682":"print('Resnet50-RMSprop:')\nprint('---------------')\nprint(\"Binary Accuracy: \",(results[5]))\nprint(\"Precision: \",(results[6]))\nprint(\"Recall: \",(results[7]))\nprint(\"AUC: \",(results[8]))\nprint(\"F1 Score: \",(2*((results[6]*results[7])\/((results[6]+results[7])))))\n","d295e87f":"base_model = tf.keras.applications.VGG16(input_shape=IMG_SHAPE,include_top=False,weights='imagenet')\nbase_model.trainable = True\nx = base_model.output\nx = GlobalAveragePooling2D()(x)\npredictions = Dense(1, activation='sigmoid',name='Final')(x)\nmodel = Model(inputs=base_model.input, outputs=predictions)\nmodel.compile(loss ='binary_crossentropy',optimizer=OPTIMIZER,metrics=METRICS)","e134f1bf":"callbacks = get_callbacks('vgg16')\nhistory = model.fit( train_df,epochs=100,\n                    validation_data= val_df,\n                    callbacks=[callbacks])","1af87ad0":"results = model.evaluate_generator(test_df, steps=len(test_df), verbose=1)","8086cfdf":"print('VGG16-RMSProp: ')\nprint('---------------')\nprint(\"Binary Accuracy: \",(results[5]))\nprint(\"Precision: \",(results[6]))\nprint(\"Recall: \",(results[7]))\nprint(\"AUC: \",(results[8]))\nprint(\"F1 Score: \",(2*((results[6]*results[7])\/((results[6]+results[7])))))\n","97a51eb4":"# confusion matrix for each architecture\n# auc curve for each architecture\n# loss graph for each of the architecture","33283074":"import matplotlib.pyplot as plt\n\nplt.figure(figsize=(10, 10))\nfor images, labels in train_ds.take(1):\n    for i in range(9):\n        ax = plt.subplot(3, 3, i + 1)\n        plt.imshow(images[i].numpy().astype(\"uint8\"))\n        plt.title(int(labels[i]))\n        plt.axis(\"off\")\n"}}