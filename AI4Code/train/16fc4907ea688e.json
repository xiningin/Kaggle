{"cell_type":{"04839aba":"code","93e43974":"code","1d311c5d":"code","8170c1ed":"code","6bf2a26c":"code","e9d6e8b0":"code","7f74a0a1":"markdown"},"source":{"04839aba":"# Install\n\n!mkdir \"..\/working\/firefox\"\n!cp -a \"..\/input\/firefox-63.0.3.tar.bz2\/firefox\/.\" \"..\/working\/firefox\"\n!chmod -R 777 \"..\/working\/firefox\"\n!pip install webdriverdownloader\nfrom webdriverdownloader import GeckoDriverDownloader\ngdd = GeckoDriverDownloader()\ngdd.download_and_install(\"v0.23.0\")\n!pip install selenium\n!apt-get install -y libgtk-3-0 libdbus-glib-1-2 xvfb\n!export DISPLAY=:99","93e43974":"# Setup for browser\nfrom selenium import webdriver as selenium_webdriver\nfrom selenium.webdriver.firefox.options import Options as selenium_options\nfrom selenium.webdriver.common.desired_capabilities import DesiredCapabilities as selenium_DesiredCapabilities\nbrowser_options = selenium_options()\nbrowser_options.add_argument(\"--headless\")\nbrowser_options.add_argument(\"--window-size=3840,2160\")\n# browser_options.add_argument(\"user-agent=whatever you want\")\ncapabilities_argument = selenium_DesiredCapabilities().FIREFOX\ncapabilities_argument[\"marionette\"] = True","1d311c5d":"class element_has_css_class(object):\n  \"\"\"An expectation for checking that an element has a particular css class.\n\n  locator - used to find the element\n  returns the WebElement once it has the particular css class\n  \"\"\"\n  def __init__(self, locator, css_class):\n    self.locator = locator\n    self.css_class = css_class\n\n  def __call__(self, driver):\n    element = driver.find_element(*self.locator)   # Finding the referenced element\n    if self.css_class in element.get_attribute(\"class\"):\n        return element\n    else:\n        return False","8170c1ed":"!mkdir '\/kaggle\/working\/frames\/'\n#         browser.set_window_size(1024,1024)\n!rm -fr .\/frames\/*\n\nfrom selenium.webdriver.common.by import By\nfrom selenium.webdriver.support.ui import WebDriverWait\nfrom selenium.webdriver.support import expected_conditions as EC\n\nimport time\nfrom datetime import date, timedelta\n\nsdate = date(2020, 1, 1)   # start date\nedate = date(2020, 5, 13)   # end date\ndelta = edate - sdate       # as timedelta\ncounter = 0\n\n\nfor i in range(0,delta.days + 1,1):\n    day = sdate + timedelta(days=i)\n    for h in range(0,24,3):\n        print(day,h,counter)\n        browser = selenium_webdriver.Firefox(\n            options=browser_options,\n            firefox_binary=\"..\/working\/firefox\/firefox\",\n            capabilities=capabilities_argument\n        )\n\n#         url = 'https:\/\/earth.nullschool.net\/#'+str(day.year)+'\/'+str(day.month)+'\/'+str(day.day)+'\/'+str(0)+'00Z\/wind\/surface\/level\/anim=off\/overlay=temp\/orthographic=-89.00,31.64,319'\n#         url = 'https:\/\/earth.nullschool.net\/#'+str(day.year)+'\/'+str(day.month)+'\/'+str(day.day)+'\/'+str(h)+'00Z\/chem\/surface\/level\/anim=off\/overlay=cosc\/orthographic=116.76,39.69,449'\n#         url = 'https:\/\/earth.nullschool.net\/#'+str(day.year)+'\/'+str(day.month)+'\/'+str(day.day)+'\/'+str(h)+'00Z\/particulates\/surface\/level\/anim=off\/overlay=pm10\/orthographic=116.76,39.69,' + str(450+i)\n        url = 'https:\/\/earth.nullschool.net\/#'+str(day.year)+'\/'+str(day.month)+'\/'+str(day.day)+'\/'+str(h)+'00Z\/wind\/surface\/level\/anim=off\/overlay=misery_index\/equirectangular=11.33,0.00,233\/loc=148.023,-90.395'\n        browser.get(url)\n        js_string = \"var element = document.getElementById(\\\"toggle-hd\\\");element.click();\"\n        browser.execute_script(js_string)\n        wait = WebDriverWait(browser, 10)\n        element = wait.until(element_has_css_class((By.ID, 'progress'), \"hidden\"))\n        js_string = \"var element = document.getElementById(\\\"sponsor\\\");element.remove();\"\n        browser.execute_script(js_string)       \n        js_string = \"var element = document.getElementById(\\\"details\\\");element.remove();\"\n        browser.execute_script(js_string)     \n        browser.save_screenshot('\/kaggle\/working\/frames\/' + str(counter).zfill(4) + \".png\")\n        browser.close()\n        counter = counter + 1\n","6bf2a26c":"# frames=[]\n# !pip install aggdraw\n# import aggdraw\n\n# from PIL import Image,ImageDraw,ImageFont\n# for i in range(0,delta.days+1,1):\n#     for h in range(0,24,3):\n#         day = sdate + timedelta(days=i)\n#         print(i,h)\n#         # Load the other images we will overlay\n#         final = Image.open('\/kaggle\/working\/frames\/' + str(i) + \".\" + str(h) + \".png\")\n        \n# #         draw = aggdraw.Draw(final)\n# #         # note that the color is specified in the font constructor in aggdraw\n# #         font = aggdraw.Font((255,255,255), \"\/kaggle\/input\/m2pfont\/mplus-2p-light.ttf\", size=30, opacity=255)\n# #         draw.text((760,30),str(day.year) + \".\" + str(day.month).zfill(2) + \".\" + str(day.day).zfill(2) + ':H' + str(h).zfill(2), font) # no color here\n# # #         draw.text((30,30),\" Beijing \", font)\n# #         draw.text((30,860),\" Sulpher Dioxide\", font)\n\n# #         draw.flush() # don't forget this to update the underlying PIL image!\n        \n        \n#         final = final.resize((int(final.size[0]),int(final.size[1])), resample=Image.ANTIALIAS)\n#         frames.append(final)\n        \n# frames = frames + frames[::-1]\n# frames[0].save('tmp.gif', format='GIF', append_images=frames[1::], save_all=True, fps=30 , loop=0)\n\n\n","e9d6e8b0":"!apt-get update\n!apt install -y ffmpeg\n!rm output.mp4\n!ffmpeg  -i .\/frames\/%04d.png -c:v libx264 -c:a aac -ar 44100 -filter \"minterpolate='fps=30'\" -pix_fmt yuv420p output.mp4\n# -vb 20M -r 30","7f74a0a1":"Boilerplate firefox install and instancing"}}