{"cell_type":{"4f86465a":"code","ee18fe50":"code","4195c91b":"code","7a8ea1a5":"code","9bc0388c":"code","3121774d":"code","73b7c377":"code","eacb21d7":"code","d7c70b42":"code","a40b7097":"code","8a4a6db6":"code","8e10f3e9":"code","223d66b6":"code","9fc05923":"code","7de6beca":"code","c2257d59":"code","4ada1c75":"code","fbef7d7c":"code","5aa6db92":"code","e043baaa":"code","4fcb06f9":"code","33e37bb3":"code","11998e43":"code","8362da17":"code","ba7709de":"code","d5fa9c88":"code","dc33ea8d":"code","79bdd4c6":"code","811777ee":"code","1db1e617":"code","47f22e10":"code","756d42e5":"code","cce8c5ea":"markdown","523fb9ec":"markdown","7efc3921":"markdown"},"source":{"4f86465a":"import re\nimport gc\nimport os\nimport cv2\nimport glob\nimport keras\nimport shutil\nimport pathlib\nimport PIL\nimport numpy as np\nimport pandas as pd\nimport seaborn as sb\nimport pydicom as dcm\nimport networkx as nx\nimport tensorflow as tf\nimport matplotlib.pyplot as plt\nfrom shutil import copyfile\nfrom datetime import datetime\nfrom packaging import version\nfrom tensorflow import keras as ks\nfrom tensorflow.keras import datasets, layers, models\nfrom kaggle_datasets import KaggleDatasets\nfrom mpl_toolkits.mplot3d import Axes3D\nfrom tqdm import tqdm","ee18fe50":"for dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))","4195c91b":"# Show current versions\nprint('TensorFlow Version: {}'.format(tf.__version__))\nprint('Eager execution: {}'.format(tf.executing_eagerly()))\nprint('OpenCV Version:{}'.format(cv2.__version__))\nprint('Keras Version:{}'.format(ks.__version__))\nprint('Numpy Version:{}'.format(np.__version__))\nprint('Pandas Version:{}'.format(pd.__version__))","7a8ea1a5":"# Check the number of GPU's that are ready\nprint(\"Num GPUs Available: \", len(tf.config.list_physical_devices('GPU')))","9bc0388c":"# Check the number of TPU's that are ready\nprint(\"Num TPUs Available: \", len(tf.config.list_physical_devices('TPU')))","3121774d":"# Read in CSV\ntrain=pd.read_csv(\"..\/input\/rsna-str-pulmonary-embolism-detection\/train.csv\")\nprint(train)","73b7c377":"train.head()","eacb21d7":"train.shape","d7c70b42":"train.describe()","a40b7097":"train.columns","8a4a6db6":"# Classification labels\ncolumn_names=['StudyInstanceUID', 'SeriesInstanceUID', 'SOPInstanceUID',\n       'pe_present_on_image', 'negative_exam_for_pe', 'qa_motion',\n       'qa_contrast', 'flow_artifact', 'rv_lv_ratio_gte_1', 'rv_lv_ratio_lt_1',\n       'leftsided_pe', 'chronic_pe', 'true_filling_defect_not_pe',\n       'rightsided_pe', 'acute_and_chronic_pe', 'central_pe', 'indeterminate']","8e10f3e9":"print(column_names[3:17])","223d66b6":"# Lets have a look at the first 3 patients\nfor index, row in train.head(n=20).iterrows():\n    print(index,row)","9fc05923":"# Assign each image a condition\npe_present_on_image=(1,0,0,0,0,0,0,0,0,0,0,0,0,0)\nnegative_exam_for_pe=(0,1,0,0,0,0,0,0,0,0,0,0,0,0)\nleftsided_pe=(1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0)\nchronic_pe=(1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0)\nrightsided_pe=(1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0)\nacute_and_chronic_pe=(1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0)\ncentral_pe=(1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0)\nindeterminate=(1,0,0,0,0,0,0,0,0,0,0,0,0,0,0)\n\n# Count the amount of conditions\npe_present_on_image_count=0\nnegative_exam_for_pe_count=0\nleftsided_pe_count=0\nrightsided_pe_count=0\nacute_and_chronic_pe_count=0\ncentral_pe=0\nindeterminate=0\n\n# Display the condition of each image to console\nfor index, row in train.iterrows():\n    condition=index, row['pe_present_on_image'],row['negative_exam_for_pe'],row['leftsided_pe'],row['rightsided_pe'],row['acute_and_chronic_pe']\n    if condition[3:17]==pe_present_on_image:\n        pe_present_on_image_count+=1\n        print(condition[0]+\"- PE found in images:\",pe_present_on_image)\n    if condition[3:17]==negative_exam_for_pe:\n        negative_exam_for_pe_count+=1\n        print(\"- Negative results:\",negative_exam_for_pe)\n    if condition[3:17]==leftsided_pe:\n        leftsided_pe_count+=1\n        print(\"- Left sided PE:\",leftsided_pe)       \n    if condition[3:17]==rightsided_pe:\n        rightsided_pe_count+=1\n        print(\"- Right sided PE:\",rightsided_pe)","7de6beca":"# Display the amount of conditions for each category\nprint(\"The amount of suspectible PE found in images:\",pe_present_on_image_count)\nprint(\"The amount of negative results for PE:\",negative_exam_for_pe_count)\nprint(\"The amount of left sided PE:\",leftsided_pe_count)\nprint(\"The amount of right sided PE:\",rightsided_pe_count)","c2257d59":"# Read in CSV\ntest=pd.read_csv(\"..\/input\/rsna-str-pulmonary-embolism-detection\/test.csv\")\nprint(test)","4ada1c75":"test.head()","fbef7d7c":"# Show the amount of rows & columns\ntest.shape","5aa6db92":"test.describe()","e043baaa":"# Read in CSV\nsample_submission=\"..\/input\/rsna-str-pulmonary-embolism-detection\/sample_submission.csv\"\nsubmission=pd.read_csv(sample_submission)","4fcb06f9":"dcm.dcmread(\"..\/input\/rsna-str-pulmonary-embolism-detection\/train\/000f7f114264\/9f7378c3b2ab\/060f829ca995.dcm\")","33e37bb3":"# Show the first 25 images in the train folder\nfig, axes = plt.subplots(nrows=5, ncols=5, figsize=(20,20))\nimages = glob.glob(\"..\/input\/rsna-str-pulmonary-embolism-detection\/train\/000f7f114264\/9f7378c3b2ab\/*.dcm\")\nfor i, image in enumerate(images):\n    if (i == 25) : break\n    row = i \/\/ 5\n    col = i % 5\n    axes[row, col].imshow(dcm.dcmread(image).pixel_array)","11998e43":"# convert the color to grayscale \ngray = dcm.dcmread(image).pixel_array\n\n# resize the image(optional)\ngray = cv2.resize(gray, (200, 200))\n\n# apply smoothing operation\ngray = cv2.blur(gray,(3,3))\n\n# create grid to plot using numpy\nxx, yy = np.mgrid[0:gray.shape[0], 0:gray.shape[1]]\n\n# create the figure\nfig = plt.figure(figsize=(150,150))\nax = fig.gca(projection='3d')\nax.plot_wireframe(xx, yy, gray,rstride=1, cstride=1, cmap=plt.cm.gray,\n linewidth=1)\n\n# rotate 3d plot\nfor angle in range(180, 360):\n    ax.view_init(45, angle)","8362da17":"\"\"\"\nPractical Computer Vision: Extract Insightful Information from Images Using TensorFlow, Keras, and OpenCV\nBook by Abhinav Dadhich\n\"\"\"\n# convert the color to grayscale \ngray = dcm.dcmread(image).pixel_array\n\n# resize the image(optional)\ngray = cv2.resize(gray, (800, 800))\n\n# apply smoothing operation\ngray = cv2.blur(gray,(3,3))\n\n# create grid to plot using numpy\nxx, yy = np.mgrid[0:gray.shape[0], 0:gray.shape[1]]\n\n# create the figure\nfig = plt.figure(figsize=(50,50))\nax = fig.gca(projection='3d')\nax.contour(xx, yy, gray)\n\n# rotate 3d plot\nfor angle in range(70, 210):\n    ax.view_init(45, angle)","ba7709de":"dcm.dcmread(\"..\/input\/rsna-str-pulmonary-embolism-detection\/train\/000f7f114264\/9f7378c3b2ab\/060f829ca995.dcm\").pixel_array","d5fa9c88":"images = glob.glob(\"..\/input\/rsna-str-pulmonary-embolism-detection\/train\/00db04fdae51\/bc1f7e2c4087\/*.dcm\")\nfor i, image in tqdm(enumerate(images)):\n    #if (i == 3) : break\n    # convert the color to grayscale \n    scan = dcm.dcmread(image).pixel_array\n\n    # resize the image(optional)\n    scan = cv2.resize(scan, (800, 800))\n\n    # apply smoothing operation\n    scan = cv2.blur(scan,(3,3))\n\n    # create grid to plot using numpy\n    x, y = np.mgrid[0:scan.shape[0], 0:scan.shape[1]]\n    \n    # create the figure & 3D Axes\n    fig = plt.figure(figsize=(20,20))\n    ax = fig.gca(projection='3d')\n    # apply contouring\n    ax.contourf(x, y, scan)\n\n    # rotate 3D plot\n    for angle in range(70, 210):\n        ax.view_init(45, angle)\n\n    # turn off axis\n    plt.savefig('.\/'+str(i)+'animation.png')\n    # Clear the current figure.\n    plt.clf() \n    # Closes all the figure windows.\n    plt.close('all')","dc33ea8d":"from mpl_toolkits.mplot3d.art3d import Poly3DCollection\nimport numpy as np\nfrom skimage import measure\n\ndef plot_3d(image, threshold=700, color=\"navy\"):\n    \n    # Position the scan upright, \n    # so the head of the patient would be at the top facing the camera\n    p = image.transpose(2,1,0)\n    \n    verts, faces,_,_ = measure.marching_cubes_lewiner(p, threshold)\n\n    fig = plt.figure(figsize=(10, 10))\n    ax = fig.add_subplot(111, projection='3d')\n\n    # Fancy indexing: `verts[faces]` to generate a collection of triangles\n    mesh = Poly3DCollection(verts[faces], alpha=0.2)\n    mesh.set_facecolor(color)\n    ax.add_collection3d(mesh)\n\n    ax.set_xlim(0, p.shape[0])\n    ax.set_ylim(0, p.shape[1])\n    ax.set_zlim(0, p.shape[2])\n\n    plt.show()","79bdd4c6":"plot_3d(image)","811777ee":"import glob\nfrom PIL import Image\n\n# filepaths\nfp_in = \".\/*.png\"\nfp_out = \".\/pe.gif\"\n\n# https:\/\/pillow.readthedocs.io\/en\/stable\/handbook\/image-file-formats.html#gif\nimg, *imgs = [Image.open(f) for f in sorted(glob.glob(fp_in))]\nimg.save(fp=fp_out, format='GIF', append_images=imgs,\n         save_all=True, duration=200, loop=0)","1db1e617":"\"\"\"\nPractical Computer Vision: Extract Insightful Information from Images Using TensorFlow, Keras, and OpenCV\nBook by Abhinav Dadhich\n\"\"\"\n\n# convert the color to grayscale \ngray = dcm.dcmread(image).pixel_array\n\n# resize the image(optional)\ngray = cv2.resize(gray, (800, 800))\n\n# apply smoothing operation\ngray = cv2.blur(gray,(3,3))\n\n# create grid to plot using numpy\nxx, yy = np.mgrid[0:gray.shape[0], 0:gray.shape[1]]\n\n# create the figure\nfig = plt.figure(figsize=(150,150))\nax = fig.gca(projection='3d')\nax.contour(xx, yy, gray, stride=1)\n\n# rotate 3d plot\nfor angle in range(180, 360):\n    ax.view_init(45, angle)","47f22e10":"\"\"\"\nPractical Computer Vision: Extract Insightful Information from Images Using TensorFlow, Keras, and OpenCV\nBook by Abhinav Dadhich\n\"\"\"\n\n# convert the color to grayscale \ngray = dcm.dcmread(image).pixel_array\n\n# resize the image(optional)\ngray = cv2.resize(gray, (100, 100))\n\n# apply smoothing operation\ngray = cv2.blur(gray,(3,3))\n\n# create grid to plot using numpy\nxx, yy = np.mgrid[0:gray.shape[0], 0:gray.shape[1]]\n\n# create the figure\nfig = plt.figure(figsize=(150,150))\nax = fig.gca(projection='3d')\nax.plot_surface(xx, yy, gray,cmap='viridis')\n\n# rotate 3d plot\nfor angle in range(70, 210):\n    ax.view_init(45, angle)","756d42e5":"\"\"\"\nPractical Computer Vision: Extract Insightful Information from Images Using TensorFlow, Keras, and OpenCV\nBook by Abhinav Dadhich\n\"\"\"\n\n# convert the color to grayscale \ngray = dcm.dcmread(image).pixel_array\n\n# resize the image(optional)\ngray = cv2.resize(gray, (200, 200))\n\n# apply smoothing operation\ngray = cv2.blur(gray,(3,3))\n\n# create grid to plot using numpy\nxx, yy = np.mgrid[0:gray.shape[0], 0:gray.shape[1]]\n\n# create the figure\nfig = plt.figure(figsize=(150,150))\nax = fig.gca(projection='3d')\nax.scatter(xx, yy, gray)\n\n# rotate 3d plot\nfor angle in range(180, 360):\n    ax.view_init(90, angle)","cce8c5ea":"<img src=\".\/pe.gif\"  style=\"width:900px;\" \/>","523fb9ec":"# \ud83d\udc68\u200d\u2695\ufe0f\u200b\ud83e\ude7a\u200b Pulmonary Embolism EDA\n\n***Problem Statement:*** If every breath is strained and painful, it could be a serious and potentially life-threatening condition. A pulmonary embolism (PE) is caused by an artery blockage in the lung. It is time consuming to confirm a PE and prone to overdiagnosis. Machine learning could help to more accurately identify PE cases, which would make management and treatment more effective for patients.\n\nCurrently, CT pulmonary angiography (CTPA), is the most common type of medical imaging to evaluate patients with suspected PE. These CT scans consist of hundreds of images that require detailed review to identify clots within the pulmonary arteries. As the use of imaging continues to grow, constraints of radiologists\u2019 time may contribute to delayed diagnosis.\n\nThe Radiological Society of North America (RSNA\u00ae) has teamed up with the Society of Thoracic Radiology (STR) to help improve the use of machine learning in the diagnosis of PE.\n\nIn this competition, you\u2019ll detect and classify PE cases. In particular, you'll use chest CTPA images (grouped together as studies) and your data science skills to enable more accurate identification of PE. If successful, you'll help reduce human delays and errors in detection and treatment.\n\nWith 60,000-100,000 PE deaths annually in the United States, it is among the most fatal cardiovascular diseases. Timely and accurate diagnosis will help these patients receive better care and may also improve outcomes.\n\n[A full set of acknowledgments can be found on this page.](https:\/\/www.kaggle.com\/c\/rsna-str-pulmonary-embolism-detection\/overview\/acknowledgments)\n\nPlease upvote and share if you found this useful or have a love one affected by PE \u2764\ufe0f","7efc3921":"## Table of contents\n\n1. [Example](#example)\n    * [Papers](#papers)\n2. [Prepare to start](#prepare)\n3. [Working with dicom files](#dicom)\n    * [Loading CT-scans per patient](#ct_scans)\n4. [Generating a dataset for preprocessed files](#datagenerator)"}}