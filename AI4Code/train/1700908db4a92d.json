{"cell_type":{"248e85c7":"code","3aa569f0":"code","0d724b4d":"code","62e0bac3":"code","f372ec98":"code","812d73e8":"code","3d091e0d":"code","df6947dd":"code","bcd0e96e":"code","81504b67":"code","b6ef3877":"code","7a5d1da2":"code","63a9af09":"code","1ccec817":"markdown","ac924049":"markdown","e9866ddc":"markdown","d42561f5":"markdown","8f86131f":"markdown"},"source":{"248e85c7":"import numpy as np\nimport pandas as pd\n\nimport os\nimport json\nfrom pathlib import Path\n\nimport matplotlib.pyplot as plt\nfrom matplotlib import colors\nimport numpy as np\n\n%matplotlib inline\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    print(dirname)\n    \nfrom pathlib import Path\n\nimport copy\n\ndata_path = Path('\/kaggle\/input\/abstraction-and-reasoning-challenge\/')\ntraining_path = data_path \/ 'training'\nevaluation_path = data_path \/ 'evaluation'\ntest_path = data_path \/ 'test'\n\nskill_df = pd.read_csv('\/kaggle\/input\/task-tagging\/training_tasks_tagged.csv')\nskill_df.drop(['Unnamed: 0'], axis=1, inplace=True)\nskill_df['task_name'] = skill_df['task_name'].apply(lambda x: x.strip('.json'))\ndisplay(skill_df.head())\n\n# Credit to @boliu0 for these\n# https:\/\/www.kaggle.com\/boliu0\/visualizing-all-task-pairs-with-gridlines\ndef plot_one(task, ax, i,train_or_test,input_or_output):\n    cmap = colors.ListedColormap(\n        ['#000000', '#0074D9','#FF4136','#2ECC40','#FFDC00',\n         '#AAAAAA', '#F012BE', '#FF851B', '#7FDBFF', '#870C25'])\n    norm = colors.Normalize(vmin=0, vmax=9)\n    \n    input_matrix = task[train_or_test][i][input_or_output]\n    ax.imshow(input_matrix, cmap=cmap, norm=norm)\n    ax.grid(True,which='both',color='lightgrey', linewidth=0.5)    \n    ax.set_yticks([x-0.5 for x in range(1+len(input_matrix))])\n    ax.set_xticks([x-0.5 for x in range(1+len(input_matrix[0]))])     \n    ax.set_xticklabels([])\n    ax.set_yticklabels([])\n    ax.set_title(train_or_test + ' '+input_or_output)\n    \n\ndef plot_task(task):\n    \"\"\"\n    Plots the first train and test pairs of a specified task,\n    using same color scheme as the ARC app\n    \"\"\"    \n    num_train = len(task['train'])\n    fig, axs = plt.subplots(2, num_train, figsize=(3*num_train,3*2))\n    for i in range(num_train):     \n        plot_one(task, axs[0,i],i,'train','input')\n        plot_one(task, axs[1,i],i,'train','output')        \n    plt.tight_layout()\n    plt.show()        \n        \n    num_test = len(task['test'])\n    fig, axs = plt.subplots(2, num_test, figsize=(3*num_test,3*2))\n    if num_test==1: \n        plot_one(task, axs[0],0,'test','input')\n        plot_one(task, axs[1],0,'test','output')     \n    else:\n        for i in range(num_test):      \n            plot_one(task, axs[0,i],i,'test','input')\n            plot_one(task, axs[1,i],i,'test','output')  \n    plt.tight_layout()\n    plt.show() ","3aa569f0":"example_str = skill_df.iloc[82]['task']\nexec(\"example = \" + example_str)\nplot_task(example)","0d724b4d":"def upside_down(task):\n    new_task = copy.deepcopy(task)\n    for i in range(len(task['train'])):\n        pair = task['train'][i]\n        new_pair = pair.copy()\n        new_pair['input'] = pair['input'][::-1]\n        new_pair['output'] = pair['output'][::-1]\n        new_task['train'][i] = new_pair\n    for i in range(len(task['test'])):\n        pair = task['test'][i]\n        new_pair = pair.copy()\n        new_pair['input'] = pair['input'][::-1]\n        new_pair['output'] = pair['output'][::-1]\n        new_task['test'][i] = new_pair\n    \n    return new_task\n    \nplot_task(upside_down(example))","62e0bac3":"def horizontal_reflection(task):\n    new_task = copy.deepcopy(task)\n    for i in range(len(task['train'])):\n        pair = task['train'][i]\n        new_pair = pair.copy()\n        new_pair['input'] = [x[::-1] for x in pair['input']]\n        new_pair['output'] = [x[::-1] for x in pair['output']]\n        new_task['train'][i] = new_pair\n    for i in range(len(task['test'])):\n        pair = task['test'][i]\n        new_pair = pair.copy()\n        new_pair['input'] = [x[::-1] for x in pair['input']]\n        new_pair['output'] = [x[::-1] for x in pair['output']]\n        new_task['test'][i] = new_pair\n    \n    return new_task\n    \nplot_task(horizontal_reflection(example))","f372ec98":"def rotate_180(task):\n    new_task = copy.deepcopy(task)\n    new_task = upside_down(horizontal_reflection(task))\n    return new_task\n\nplot_task(rotate_180(example))","812d73e8":"def diagonal_reflection(task):\n    new_task = copy.deepcopy(task)\n    for i in range(len(task['train'])):\n        pair = task['train'][i]\n        new_pair = pair.copy()\n        new_pair['input'] = [list(x) for x in list(np.transpose(pair['input']))]\n        new_pair['output'] = [list(x) for x in list(np.transpose(pair['output']))]\n        new_task['train'][i] = new_pair\n    for i in range(len(task['test'])):\n        pair = task['test'][i]\n        new_pair = pair.copy()\n        new_pair['input'] = [list(x) for x in list(np.transpose(pair['input']))]\n        new_pair['output'] = [list(x) for x in list(np.transpose(pair['output']))]\n        new_task['test'][i] = new_pair\n    \n    return new_task\n    \nplot_task(diagonal_reflection(example))","3d091e0d":"def other_diagonal_reflection(task):\n    new_task = copy.deepcopy(task)\n    new_task = rotate_180(diagonal_reflection(task))\n    \n    return new_task\n\nplot_task(other_diagonal_reflection(example))","df6947dd":"def rotate_90(task):\n    new_task = copy.deepcopy(task)\n    new_task = upside_down(diagonal_reflection(task))\n    \n    return new_task\n\nplot_task(rotate_90(example))","bcd0e96e":"def rotate_270(task):\n    new_task = copy.deepcopy(task)\n    new_task = horizontal_reflection(diagonal_reflection(task))\n    \n    return new_task\n\nplot_task(rotate_270(example))","81504b67":"def color_permutation(task, sigma):\n    \"\"\"\n    Permute colors according to the rule\n    x |-> sigma[x]\n    \"\"\"\n    new_task = copy.deepcopy(task)\n    for i in range(len(task['train'])):\n        pair = task['train'][i]\n        new_pair = pair.copy()\n        new_pair['input'] = [[sigma[x] for x in row] for row in pair['input']]\n        new_pair['output'] = [[sigma[x] for x in row] for row in pair['output']]\n        new_task['train'][i] = new_pair\n    for i in range(len(task['test'])):\n        pair = task['test'][i]\n        new_pair = pair.copy()\n        new_pair['input'] = [[sigma[x] for x in row] for row in pair['input']]\n        new_pair['output'] = [[sigma[x] for x in row] for row in pair['output']]\n        new_task['test'][i] = new_pair\n    \n    return new_task\n\nplot_task(color_permutation(example, [0,9,8,5,6,7,4,3,2,1]))\nplot_task(color_permutation(example, [0,4,7,6,5,9,3,2,1,8]))\nplot_task(color_permutation(example, [0,5,3,4,2,6,1,8,9,7]))","b6ef3877":"task_names_list = sorted(os.listdir(training_path))\ntask_list = []\nfor task_name in task_names_list: \n    task_file = str(training_path \/ task_name)\n    with open(task_file, 'r') as f:\n        task = json.load(f)\n        task_list.append(task)\n\ntasks_rotated_90 = [rotate_90(task) for task in task_list]\ntasks_rotated_180 = [rotate_180(task) for task in task_list]\ntasks_rotated_270 = [rotate_270(task) for task in task_list]\n\ntasks_upside_down = [upside_down(task) for task in task_list]\ntasks_reflected_hor = [horizontal_reflection(task) for task in task_list]\ntasks_reflected_diag_1 = [diagonal_reflection(task) for task in task_list]\ntasks_reflected_diag_2 = [other_diagonal_reflection(task) for task in task_list]\n\ntasks_color_perm_1 = [color_permutation(task, [0,9,8,5,6,7,4,3,2,1]) for task in task_list]\ntasks_color_perm_2 = [color_permutation(task, [0,4,7,6,5,9,3,2,1,8]) for task in task_list]\ntasks_color_perm_3 = [color_permutation(task, [0,5,3,4,2,6,1,8,9,7]) for task in task_list]","7a5d1da2":"list_of_lists = [\n    (tasks_rotated_90, '_rotated_90'),\n    (tasks_rotated_180, '_rotated_180'),\n    (tasks_rotated_270, '_rotated_270'),\n    (tasks_upside_down, '_upside_down'),\n    (tasks_reflected_hor, '_reflected_hor'),\n    (tasks_reflected_diag_1, '_reflected_diag_1'),\n    (tasks_reflected_diag_2, '_reflected_diag_2'),\n    (tasks_color_perm_1, '_color_perm_1'),\n    (tasks_color_perm_2, '_color_perm_2'),\n    (tasks_color_perm_3, '_color_perm_3')\n]\n\nnew_tasks_df = pd.DataFrame()\nfor pair in list_of_lists:\n    L = pair[0]\n    name = pair[1]\n    df = skill_df.copy()\n    df['task'] = L\n    df['task_name'] = df['task_name'].apply(lambda x: x + name)\n    new_tasks_df = pd.concat([new_tasks_df, df], ignore_index=True)\n\nnew_tasks_df.to_csv('new_tasks_with_tags.csv')    \n    \nnew_tasks_df","63a9af09":"for pair in list_of_lists:\n    L = pair[0]\n    plot_task(np.random.choice(L))","1ccec817":"## Sample of modified tasks","ac924049":"Let us define helper functions that modify single tasks. As an exaple, let's see the effect of these functions on Task 82:","e9866ddc":"## Output as lists","d42561f5":"## Output as dataframe (with tags)","8f86131f":"Ways to create new tasks from a given one:\n* rotate all images of a same angle (90\/180\/270 degrees);\n* reflect all images along a same axis (horizontal\/vertical\/diagonal);\n* permute colors (there are thousands of valid permutations, but only few are chosen to avoid duplicates).\n\nFor each of these transformations, 400 new tasks are created from the original training set. Here I show ten transformations, for a total of 4000 new tasks.\n\nI import the dataframe of tags [from my previous notebook](https:\/\/www.kaggle.com\/davidbnn92\/task-tagging) because most tags are preserved under these transformations. The dataframe containing the new tasks and the relative tags can be imported from the outputs of this kernel."}}