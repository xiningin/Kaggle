{"cell_type":{"bd668707":"code","21c911f1":"code","f4c4ba03":"code","afa170ff":"code","faac782f":"code","ab626435":"code","cea4cca0":"code","a088040b":"code","a27c3e3f":"code","3aa326b1":"code","0e0a7bb9":"code","d72458e2":"code","61737aea":"code","e1538b9f":"code","b3ecef67":"code","98725512":"code","001a9959":"code","1c3b7946":"code","f185a079":"code","fed120df":"code","6573cb2b":"code","733256e7":"code","f297ca35":"code","9a8fc202":"code","e5645acb":"code","0cb51360":"code","26b5c084":"code","2d67c257":"code","d14defb3":"code","68d1d51b":"code","f44eb566":"code","1807c9cb":"code","7a3ba245":"code","e8b2ca21":"code","c3cfb20b":"code","bbfff976":"markdown","89fdb9ca":"markdown","07c20edd":"markdown","38ab6465":"markdown","225b770a":"markdown","ceab14ed":"markdown","613e05aa":"markdown","a507628e":"markdown","8a0e7960":"markdown","3c9423a9":"markdown","4cf570d3":"markdown","5389ae33":"markdown","e87e25bc":"markdown","bd42fe91":"markdown","1b7be78b":"markdown","874cb826":"markdown","30871629":"markdown","5304ae7b":"markdown","6ac997a0":"markdown","aeb91eba":"markdown","c230313c":"markdown","512122a4":"markdown","bd0330ee":"markdown","10a9cb91":"markdown","b0ad7984":"markdown","be748d22":"markdown","5b2367d4":"markdown","adc94674":"markdown","3a6a3d1b":"markdown"},"source":{"bd668707":"import pandas as pd\nimport numpy as np\nimport scipy.stats\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom pandasql import sqldf\nquery = lambda q: sqldf(q,globals()) #this is a function that runs a SQL query in SQLite","21c911f1":"#data source is singapore govtech website\ndf1 = pd.read_csv('..\/input\/singaporeresaleflatprices\/resale-flat-prices-1990-1999.csv')\ndf2 = pd.read_csv('..\/input\/singaporeresaleflatprices\/resale-flat-prices-2000-2012.csv')\ndf3 = pd.read_csv('..\/input\/singaporeresaleflatprices\/resale-flat-prices-2012-2014.csv')\ndf4 = pd.read_csv('..\/input\/singaporeresaleflatprices\/resale-flat-prices-2015-2016.csv')\ndf5 = pd.read_csv('..\/input\/singaporeresaleflatprices\/resale-flat-prices-2017-2022.csv')\n\n#initial check\nfor i in [df1, df2, df3, df4, df5]:\n    display(i.iloc[[0,1,-2,-1]])","f4c4ba03":"#insert new column remaining_lease in df1\n#remove columns that don't affect price\n#change resale_price to float\n\ndf = query('''\nWITH df1a AS\n(SELECT month, town, flat_type, storey_range, floor_area_sqm, flat_model, (99 - SUBSTR(month,1,4) + lease_commence_date) AS remaining_lease, 1.0*resale_price AS resale_price\nFROM df1),\n\ndf2a AS\n(SELECT month, town, flat_type, storey_range, floor_area_sqm, UPPER(flat_model) AS flat_model, (99 - SUBSTR(month,1,4) + lease_commence_date) AS remaining_lease, resale_price\nFROM df2),\n\ndf3a AS\n(SELECT month, town, flat_type, storey_range, floor_area_sqm, UPPER(flat_model) AS flat_model, (99 - SUBSTR(month,1,4) + lease_commence_date) AS remaining_lease, resale_price\nFROM df3),\n\ndf4a AS\n(SELECT month, town, flat_type, storey_range, floor_area_sqm, UPPER(flat_model) AS flat_model, (99 - SUBSTR(month,1,4) + lease_commence_date) AS remaining_lease, resale_price\nFROM df4),\n\ndf5a AS\n(SELECT month, town, flat_type, storey_range, floor_area_sqm, UPPER(flat_model) AS flat_model, (99 - SUBSTR(month,1,4) + lease_commence_date) AS remaining_lease, resale_price\nFROM df5)\n\nSELECT *\nFROM \n(SELECT * FROM df1a\nUNION\nSELECT * FROM df2a\nUNION\nSELECT * FROM df3a\nUNION\nSELECT * FROM df4a\nUNION\nSELECT * FROM df5a) AS df\n''')","afa170ff":"df","faac782f":"query('''\nSELECT DISTINCT flat_type\nFROM df\n''')","ab626435":"query('''\nSELECT DISTINCT storey_range\nFROM df\n''')","cea4cca0":"query('''\nSELECT DISTINCT flat_model\nFROM df\n''')","a088040b":"#change remaining lease to int\ndf_01 = query('''\nSELECT \nmonth,\n(CASE WHEN flat_type = 'MULTI-GENERATION' THEN 'MULTI GENERATION'\nELSE flat_type END) AS flat_type,\n(SUBSTR(storey_range,1,2) + SUBSTR(storey_range,7,2))\/2 AS avg_storey,\nflat_model,\ntown,\nfloor_area_sqm,\n1*remaining_lease AS remaining_lease,\nresale_price\nFROM df\n''')\ndf_01","a27c3e3f":"query('''\nSELECT flat_type, AVG(resale_price) AS avg_price, COUNT(*)\nFROM df_01\nGROUP BY flat_type\n''')","3aa326b1":"df_storey = query('''\nSELECT avg_storey, ROUND(AVG(resale_price)\/1000)*1000 AS avg_price\nFROM df_01\nGROUP BY avg_storey\n''')\nplt.figure(figsize=(15,8))\nsns.scatterplot(x='avg_storey',y='avg_price',data = df_storey)\nplt.title('Average resale flat price against average storey')\nplt.show()","0e0a7bb9":"df_storey_flat_type = query('''\nSELECT flat_type, avg_storey, ROUND(AVG(resale_price)\/1000)*1000 AS avg_price\nFROM df_01\nGROUP BY flat_type, avg_storey\n''')\nplt.figure(figsize=(15,8))\nsns.lineplot(x='avg_storey', y='avg_price', hue = 'flat_type', data = df_storey_flat_type.query(\"flat_type in ['3 ROOM', '4 ROOM', '5 ROOM']\"))\nplt.xticks([x for x in range(1,52,3)])\nplt.legend(loc=(1.05,0.5))\nplt.title('Average resale flat price against average storey, pivoted by popular number of rooms')\nplt.show()","d72458e2":"plt.figure(figsize=(15,8))\nsns.lineplot(x='avg_storey', y='avg_price', hue = 'flat_type', data = df_storey_flat_type.query(\"flat_type not in ['3 ROOM', '4 ROOM', '5 ROOM']\"))\nplt.xticks([x for x in range(1,52,3)])\nplt.legend(loc=(1.05,0.5))\nplt.title('Average resale flat price against average storey, pivoted by less popular number of rooms')\nplt.show()","61737aea":"df_month = query('''\nSELECT SUBSTR(month,1,4) AS year, AVG(resale_price) AS avg_price\nFROM df_01\nGROUP BY year\n''')\nplt.figure(figsize=(18,8))\nsns.lineplot(x=\"year\", y=\"avg_price\",data=df_month)\nplt.xticks(rotation=45)\nplt.title('Average resale flat price over time')\nplt.show()\ndf_month","e1538b9f":"#track price per square metre\ndf_psm = query('''\nSELECT *, resale_price\/floor_area_sqm AS psm\nFROM df_01\n''')\nplt.figure(figsize=(15,8))\nsns.lineplot(x='month',y='psm',data = df_psm)\nplt.xticks([],[])\nplt.title('Price per sqm over time')\nplt.show()","b3ecef67":"#trying to use a numerical measure to replace the town, such as euclidean distance from Raffles Place MRT\ntown_dist = pd.read_csv('..\/input\/singaporeresaleflatprices\/town distance.csv')\ndf_01 = query('''\nSELECT month, flat_type, avg_storey, flat_model, df_01.town, floor_area_sqm, remaining_lease, \n1.0*SUBSTR(dist_raffles_mrt, 1, INSTR(dist_raffles_mrt,' ') -1) AS raffles_dist_km,\nresale_price\nFROM df_01\nLEFT JOIN town_dist\nON town_dist.town = df_01.town\n''')\ndf_01","98725512":"df_town_rank = query('''\nSELECT town, AVG(resale_price) AS avg_price, RANK() OVER (ORDER BY AVG(resale_price)) AS town_rank, raffles_dist_km\nFROM df_01\nGROUP BY town\nORDER BY raffles_dist_km\n''')\ndisplay(df_town_rank)\nplt.figure(figsize=(15,8))\nsns.regplot(x='raffles_dist_km',y='town_rank',data = df_town_rank, scatter = True)\nm, b = np.polyfit(df_town_rank.raffles_dist_km,df_town_rank.town_rank,1)\nr,p = scipy.stats.pearsonr(df_town_rank.raffles_dist_km,df_town_rank.town_rank)\nprint('y = {}x + {}'.format(m,b))\nprint('r = {}\\np = {}'.format(r,p))\nplt.title('Town rank (increasing value means increasing price) against distance from Raffles Place MRT in km')\nplt.show()","001a9959":"plt.figure(figsize=(15,8))\nsns.regplot(x='raffles_dist_km',y='avg_price',data = df_town_rank, scatter = True, color = 'g')\nm, b = np.polyfit(df_town_rank.raffles_dist_km,df_town_rank.avg_price,1)\nr,p = scipy.stats.pearsonr(df_town_rank.raffles_dist_km,df_town_rank.avg_price)\nprint('y = {}x + {}'.format(m,b))\nprint('r = {}\\np = {}'.format(r,p))\nplt.title('Average resale flat price in a town against town distance from Raffles Place MRT in km')\nplt.show()","1c3b7946":"#prices from 2012, recent decade\ndf_sqm = query('''\nSELECT floor_area_sqm,\nRound(AVG(resale_price)\/1000)*1000 AS avg_price,\n1*SUBSTR(month,1,4) AS year\nFROM df_01\nWHERE year >= 2012 \nGROUP BY floor_area_sqm\nORDER BY avg_price\n''')\nplt.figure(figsize=(10,8))\nsns.scatterplot(x=\"floor_area_sqm\", y = \"avg_price\", data = df_sqm)\nplt.title('Average resale flat price against floor area in sqm')\nplt.show()\ndf_sqm","f185a079":"df_town_lease = query('''\nSELECT town, AVG(remaining_lease) AS avg_remaining_lease, AVG(resale_price) AS avg_price\nFROM df_01\nGROUP BY town\nORDER BY avg_price\n''')\nplt.figure(figsize=(10,8))\nsns.scatterplot(x=\"avg_remaining_lease\", y=\"avg_price\", hue = \"town\", data = df_town_lease)\nplt.legend(loc=(1.05,0.05))\nplt.title('Average resale flat price against average remaining lease, pivoted by town')\nplt.show()\ndf_town_lease\nr,p = scipy.stats.pearsonr(df_town_lease.avg_remaining_lease,df_town_lease.avg_price)\nprint('r = {}\\np = {}'.format(r,p))","fed120df":"query('''\nSELECT flat_model, ROUND(AVG(resale_price)\/1000)*1000 AS avg_price\nFROM df_01\nGROUP BY flat_model\nORDER BY avg_price\n''')","6573cb2b":"df_01","733256e7":"df_02 = query('''\nSELECT \n    1*SUBSTR(df_01.month,1,4) AS year,\n    1*SUBSTR(df_01.month,6,2) AS mth,\n    (CASE WHEN df_01.flat_type = \"1 ROOM\" THEN 1\n    WHEN df_01.flat_type = \"2 ROOM\" THEN 2\n    WHEN df_01.flat_type = \"3 ROOM\" THEN 3\n    WHEN df_01.flat_type = \"4 ROOM\" THEN 4\n    WHEN df_01.flat_type = \"5 ROOM\" THEN 5\n    ELSE 6 END) AS rooms,\n    df_01.raffles_dist_km,\n    df_01.avg_storey,\n    df_01.floor_area_sqm,\n    df_01.remaining_lease,\n    df_01.resale_price\nFROM df_01\nWHERE df_01.flat_type <> \"MULTI GENERATION\"\n''')\ndf_02","f297ca35":"#explore monthly seasonality\ndf_monthly = query('''\nSELECT year, mth, AVG(resale_price) AS avg_price\nFROM df_02\nGROUP BY year, mth\n''')\nplt.figure(figsize=(10,15))\nsns.lineplot(x='mth', y='avg_price', hue = 'year', data = df_monthly)\nplt.legend([x for x in range(1990, 2023)],loc=(1.05,0.05))\nplt.xticks([x for x in range(1,13)])\nplt.title('Average resale flat price in each month, pivoted by year')\nplt.show()","9a8fc202":"#explore monthly seasonality\ndf_monthly_only = query('''\nSELECT mth, AVG(resale_price) AS avg_price\nFROM df_02\nGROUP BY mth\n''')\nplt.figure(figsize=(15,8))\nsns.lineplot(x='mth', y='avg_price', data = df_monthly_only)\nplt.xticks([x for x in range(1,13)])\nplt.title('Average resale flat price in each month, averaged over all the years from 1990 to 2022')\nplt.show()","e5645acb":"#explore monthly seasonality\ndf_monthly_recent = query('''\nSELECT mth, AVG(resale_price) AS avg_price\nFROM df_02\nWHERE year >= 2012\nGROUP BY mth\n''')\nplt.figure(figsize=(15,8))\nsns.lineplot(x='mth', y='avg_price', data = df_monthly_recent)\nplt.xticks([x for x in range(1,13)])\nplt.title('Average resale flat price in each month, averaged over all the years from 2012 to 2022')\nplt.show()","0cb51360":"#find the rate of inflation YoY\ndf_inflation = query('''\nSELECT year, ROUND(100*AVG(resale_price) \/ LAG(AVG(resale_price),1) OVER (ORDER BY year) - 100,2) AS YoY_perc_change\nFROM df_02\nGROUP BY year\n''')\nplt.figure(figsize=(15,8))\nsns.lineplot(x='year',y='YoY_perc_change', data = df_inflation)\nplt.xlim(1991,2022)\nplt.xticks([x for x in range(1991, 2023)], rotation = 45)\nplt.plot([x for x in range(1991, 2023)],[1 for x in range(1991, 2023)], linestyle = '-')\nplt.title('YoY % change in resale flat price over time')\nplt.show()","26b5c084":"df_lease_ascending = query('''\nSELECT *\nFROM df_02\n''')\nplt.figure(figsize=(15,8))\nsns.scatterplot(x='remaining_lease',y='resale_price',data = df_lease_ascending, hue = 'year')\nplt.xticks(rotation = 90)\nplt.legend(loc=(1.05,0.05))\nplt.title('Resale flat price against remaining lease, pivoted by year')\nplt.show()","2d67c257":"#rescale all prices to current year's price distribution\n#first check current year's price distribution\n#check past 12 months and past 10 years\ndf_normal = pd.DataFrame()\ndf_normal['year'] = [y for y in range(1990,2023)]\ndf_normal['mean'] = [df_02[df_02.year == y]['resale_price'].mean() for y in range(1990,2023)]\ndf_normal['std'] = [df_02[df_02.year == y]['resale_price'].std() for y in range(1990,2023)]\ndisplay(df_normal)","d14defb3":"df_units_sold = query('''\nSELECT year, COUNT(*) AS units_sold\nFROM df_02\nGROUP BY year\n''')\nplt.figure(figsize=(15,10))\nsns.lineplot(x='year',y='units_sold', data = df_units_sold)\nplt.title('Number of resale flats sold over time')\nplt.show()\ndisplay(df_units_sold)","68d1d51b":"#check price distribution\nfor y in range(1990,2023):\n    plt.figure(figsize=(8,6))\n    sns.histplot(data = df_02[df_02.year == y], x = 'resale_price', bins = 10)\n    plt.show()","f44eb566":"#remove 2022 data\ndf_02 = df_02[df_02.year != 2022]\ndf_02","1807c9cb":"#removing time as a variable by converting prices for each year to their percentiles within that year (from 0 to 1)\ndf_percentile = pd.DataFrame()\ndf_percentile['year'] = [y for y in range(1990,2022)]\ndf_percentile['min'] = [df_02[df_02.year == y]['resale_price'].min() for y in range(1990,2022)]\ndf_percentile['max'] = [df_02[df_02.year == y]['resale_price'].max() for y in range(1990,2022)]\ndisplay(df_percentile)\n\ndf_03 = query('''\nSELECT df_02.year, rooms, raffles_dist_km, avg_storey, floor_area_sqm, remaining_lease, resale_price, min, max\nFROM df_02\nLEFT JOIN df_percentile\nON df_02.year = df_percentile.year\n''')\ndf_03","7a3ba245":"#seems useful to visualise min and max prices\ndfm = df_percentile.melt('year', var_name='cols', value_name='vals')\n#display(dfm)\nsns.catplot(x='year',y='vals',hue = 'cols',data = dfm, height = 8, aspect = 1)\nplt.xticks(rotation = 90)\nplt.title('Minimum and maximum resale flat prices in each year')\nplt.show()","e8b2ca21":"#convert all prices to percentiles.\ndf_04 = df_03.copy()\ndf_04['resale_price'] = (df_03['resale_price'].copy()-df_03['resale_price'].min())\/(df_03['resale_price'].max()-df_03['resale_price'].min())\ndf_04\n","c3cfb20b":"#preparing final ML df\ndf_05 = df_04[['rooms','raffles_dist_km','avg_storey','floor_area_sqm','remaining_lease','resale_price']]\ndf_05","bbfff976":"As seen from time series previously, prices were very low in earlier decades, hence only prices from the most recent decade are considered so that we don't get skewed results i.e. very low prices making our chart noisy.","89fdb9ca":"In the past decade, there seems to be a drop in prices in Feb and June. In other months, the price tends to be increasing.","07c20edd":"Changelog:\n1. All tables now renamed with suffix 'a'.\n2. Resale prices are all float type.\n3. I kept 6 factors affecting price i.e. town, flat_type, storey_range, floor_area_sqm, flat_model, remaining_lease. \n4. Combined all 5 tables into 1 table called df.","38ab6465":"We don't have enough data for 2022, so it might be more appropriate to scale all prices to 2021 prices. ","225b770a":"Changelog:\n1. Classify executive as 6 rooms, remove multi generation \n2. Rank town by average resale price (increasing rank represents increasing price)\n3. Drop flat model as it is likely to be correlated to other features \n\nNext:\n1. To find rate of inflation and apply it on all historical prices so that all prices are expressed in 2022 real prices.\n2. To explore any monthly seasonality otherwise to remove month as a feature.","ceab14ed":"---\ntitle: Singapore Resale Flat Price Part 1 - SQL\nauthor: Chloe Lian\ndescription: Using SQL to clean and prepare data for KNN ML model for resale flat price prediction\n---","613e05aa":"Stay tuned for Part 2.","a507628e":"Not much correlation between price and distance from city centre\/CBD. However, I will still keep this column and further investigate in ML model later.","8a0e7960":"I notice that \n1. The last two tables have an extra column remaining_lease, which is calculated by taking ('lease_commence_date' - year from column 'month' - 1).\n\n2. The remaining_lease column in last table contains year and month, so I need to remove months, and probably keep only first 2 digits.\n\n3. The resale_price column in the first table may not be float type.\n\n4. The flat_model in the first table is in caps, but there is no easy way to change to camel case so i will change the other 4 tables to uppercase.","3c9423a9":"Prices rose for 7 years from 1990 to the peak of 1997. After that, prices stayed stagnant for 8 years.\n\nPrices bottomed in 2005 then rose for 7 years from 2006 to 2013. After that, prices stayed stagnant for 6 years. \n\nThe next bottom was in 2015 then prices rose from 2019 to present. Prices are expected to rise until 2026, in keeping with previous 7-year trends.","4cf570d3":"## Objective\nTo demonstrate following SQL skills:\n1. Join multiple datasets\n2. Date\/string manipulation\n3. Window functions\n4. Analyze growth\n\nTo clean and prepare data for KNN ML model.\n\nBe mentally prepared for 35 code blocks of cleaning and analysis =)","5389ae33":"## Removing time as a variable","e87e25bc":"1 room and multi generation has small sample size and graph does not show reliable\/strong relationship with price, thus will probably drop these two categories from analysis later on.","bd42fe91":"## Initial Exploration of Data","1b7be78b":"I observe that floors are counted in multiples of 3 or 5, until floor 51 or 40. I will need a good way to categorize them for ordinal sorting.","874cb826":"## Data Cleaning","30871629":"I will need to remove hyphen in MULTI-GENERATION.","5304ae7b":"## Deeper Exploration of Data for KNN Feature Selection","6ac997a0":"Note there are 20 types, but flat_model may not be a significant price factor.","aeb91eba":"Changelog:\n1. Fixed spelling for MULTI-GENERATION to MULTI GENERATION under flat_type\n2. Used average storey to represent storey_range for easier comparison","c230313c":"Price per sqm pattern over time looks the same as price trends over time.","512122a4":"Correlation is not great, but p value is small enough for this relationship to be looked into more deeply later on in ML stage.","bd0330ee":"Possible next steps:\n1. Use 2022 prices as baseline and express all historical prices as ratio or index with 2022 price as baseline to find inflation rate.\n2. Check that historical prices are normally distributed. Find mean and variance for each year, scale prices of every year linearly so that all historical prices are distributed like prices in 2022. This removes time as a variable.","10a9cb91":"This dataframe now has 5 features and is ready for machine learning. ","b0ad7984":"There seems to be a rise in price between Feb and Oct every year, then price drops during winter months, despite there being no winter in Singapore.","be748d22":"Even though we dont have the full year's data for 2022, both the mean and standard deviation look close to values in 2021. So the values seem reasonable.","5b2367d4":"Price distribution has right skew, doesn't seem appropriate to assume normality. I will use a percentile method, labeling each price with their corresponding percentile (between 0 and 1). I will keep a table of values that contain 2021 prices and their corresponding percentile values between 0 and 1, so that the output of the ML model can be converted back into 2021 prices. ","adc94674":"Multi-generation has the lowest frequency so can be neglected later on, possible 1 Room as well. Note that 3, 4 and 5 room flats are the most popular.","3a6a3d1b":"Note that the minimum price in 2021 is 146 667 and the maximum price in 2021 is 1360 000. We will need these values to convert ML output values back to 2021 prices later."}}