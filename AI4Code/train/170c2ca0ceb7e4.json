{"cell_type":{"cdcc67e1":"code","113272f7":"code","ec607052":"code","e27d5db3":"code","29fe602d":"code","90d6ac73":"code","0da5d786":"code","d3ef27b3":"code","d96241b4":"code","81b0ca2a":"code","989c1e6b":"code","6e121636":"code","c4d8dcce":"code","7598e529":"code","7949ef1e":"code","4d7cb8f6":"code","e9121cdc":"code","53ac072b":"code","5d99faf1":"code","51f3c045":"code","112a7e59":"code","25e512e3":"code","8487af28":"code","8534979d":"code","056d51e5":"code","673264c0":"code","fad44c26":"code","d36424fa":"code","775a0240":"code","0a7645d6":"code","03e078bc":"code","61fc0a90":"code","058f7e00":"code","03f3b686":"markdown","955c4f45":"markdown","ea240329":"markdown","ce3a4c37":"markdown","9b036629":"markdown","41fb5b50":"markdown","7601df8b":"markdown","6cb59704":"markdown","b748b94e":"markdown","1b7abc2e":"markdown","bafd5d76":"markdown","c292a191":"markdown","5598b01f":"markdown","72904538":"markdown","01d4dc61":"markdown","81da408d":"markdown","3ee01da4":"markdown","4a995466":"markdown","3735f87a":"markdown","89b7dca9":"markdown","c76eef97":"markdown","a8107240":"markdown","7036bd47":"markdown","8318b172":"markdown","34432100":"markdown"},"source":{"cdcc67e1":"# TabNet\n!pip install --no-index --find-links \/kaggle\/input\/pytorchtabnet\/pytorch_tabnet-2.0.0-py3-none-any.whl pytorch-tabnet\n# Iterative Stratification\n!pip install \/kaggle\/input\/iterative-stratification\/iterative-stratification-master\/","113272f7":"### General ###\nimport os\nimport sys\nimport copy\nimport tqdm\nimport pickle\nimport random\nimport warnings\nwarnings.filterwarnings(\"ignore\")\nsys.path.append(\"..\/input\/rank-gauss\")\nos.environ[\"CUDA_LAUNCH_BLOCKING\"] = '1'\n\n### Data Wrangling ###\nimport numpy as np\nimport pandas as pd\nfrom scipy import stats\nfrom gauss_rank_scaler import GaussRankScaler\n\n### Data Visualization ###\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nplt.style.use(\"ggplot\")\n\n### Machine Learning ###\nfrom sklearn.decomposition import PCA\nfrom sklearn.preprocessing import LabelEncoder\nfrom sklearn.metrics import roc_auc_score, log_loss\nfrom sklearn.preprocessing import QuantileTransformer\nfrom sklearn.feature_selection import VarianceThreshold\nfrom iterstrat.ml_stratifiers import MultilabelStratifiedKFold\n\n### Deep Learning ###\nimport torch\nfrom torch import nn\nimport torch.optim as optim\nfrom torch.nn import functional as F\nfrom torch.nn.modules.loss import _WeightedLoss\nfrom torch.utils.data import DataLoader, Dataset\nfrom torch.optim.lr_scheduler import ReduceLROnPlateau\n# Tabnet \nfrom pytorch_tabnet.metrics import Metric\nfrom pytorch_tabnet.tab_model import TabNetRegressor\n\n### Make prettier the prints ###\nfrom colorama import Fore\nc_ = Fore.CYAN\nm_ = Fore.MAGENTA\nr_ = Fore.RED\nb_ = Fore.BLUE\ny_ = Fore.YELLOW\ng_ = Fore.GREEN","ec607052":"seed = 42\n\ndef set_seed(seed):\n    random.seed(seed)\n    np.random.seed(seed)\n    torch.manual_seed(seed)\n    os.environ[\"PYTHONHASHSEED\"] = str(seed)\n    \n    if torch.cuda.is_available():\n        torch.cuda.manual_seed(seed)\n        torch.cuda.manual_seed_all(seed)\n        torch.backends.cudnn.deterministic = True\n        torch.backends.cudnn.benchmark = False\nset_seed(seed)","e27d5db3":"data_path = \"..\/input\/lish-moa\/\"\n# Preprocessing and feature engineering\nno_ctl = True\nscale = \"rankgauss\"\nvariance_threshould = 0.7\ndecompo = \"PCA\"\nncompo_genes = 80\nncompo_cells = 10\nencoding = \"dummy\"\n# Training\nMAX_EPOCH = 200","29fe602d":"train = pd.read_csv(data_path + \"train_features.csv\")\n#train.drop(columns = [\"sig_id\"], inplace = True)\n\ntargets = pd.read_csv(data_path + \"train_targets_scored.csv\")\n#train_targets_scored.drop(columns = [\"sig_id\"], inplace = True)\n\n#train_targets_nonscored = pd.read_csv(data_path + \"train_targets_nonscored.csv\")\n\ntest = pd.read_csv(data_path + \"test_features.csv\")\n#test.drop(columns = [\"sig_id\"], inplace = True)\n\nsubmission = pd.read_csv(data_path + \"sample_submission.csv\")","90d6ac73":"if no_ctl:\n    # cp_type == ctl_vehicle\n    print(b_, \"not_ctl\")\n    train = train[train[\"cp_type\"] != \"ctl_vehicle\"]\n    test = test[test[\"cp_type\"] != \"ctl_vehicle\"]\n    targets = targets.iloc[train.index]\n    train.reset_index(drop = True, inplace = True)\n    test.reset_index(drop = True, inplace = True)\n    targets.reset_index(drop = True, inplace = True)","0da5d786":"def distributions(num, graphs, items, features, gorc):\n    \"\"\"\n    Plot the distributions of gene expression or cell viability data\n    \"\"\"\n    for i in range(0, num - 1, 7):\n        if i >= 3:\n            break\n        idxs = list(np.array([0, 1, 2, 3, 4, 5, 6]) + i)\n    \n        fig, axs = plt.subplots(1, 7, sharey = True)\n        for k, item in enumerate(idxs):\n            if item >= items:\n                break\n            graph = sns.distplot(train[features].values[:, item], ax = axs[k])\n            graph.set_title(f\"{gorc}-{item}\")\n            graphs.append(graph)","d3ef27b3":"GENES = [col for col in train.columns if col.startswith(\"g-\")]\nCELLS = [col for col in train.columns if col.startswith(\"c-\")]","d96241b4":"gnum = train[GENES].shape[1]\ngraphs = []\n\ndistributions(gnum, graphs, 771, GENES, \"g\")","81b0ca2a":"cnum = train[CELLS].shape[1]\ngraphs = []\n\ndistributions(cnum, graphs, 100, CELLS, \"c\")","989c1e6b":"gnum = test[GENES].shape[1]\ngraphs = []\n\ndistributions(gnum, graphs, 771, GENES, \"g\")","6e121636":"cnum = test[CELLS].shape[1]\ngraphs = []\n\ndistributions(cnum, graphs, 100, CELLS, \"c\")","c4d8dcce":"data_all = pd.concat([train, test], ignore_index = True)\ncols_numeric = [feat for feat in list(data_all.columns) if feat not in [\"sig_id\", \"cp_type\", \"cp_time\", \"cp_dose\"]]\nmask = (data_all[cols_numeric].var() >= variance_threshould).values\ntmp = data_all[cols_numeric].loc[:, mask]\ndata_all = pd.concat([data_all[[\"sig_id\", \"cp_type\", \"cp_time\", \"cp_dose\"]], tmp], axis = 1)\ncols_numeric = [feat for feat in list(data_all.columns) if feat not in [\"sig_id\", \"cp_type\", \"cp_time\", \"cp_dose\"]]","7598e529":"def scale_minmax(col):\n    return (col - col.min()) \/ (col.max() - col.min())\n\ndef scale_norm(col):\n    return (col - col.mean()) \/ col.std()\n\nif scale == \"boxcox\":\n    print(b_, \"boxcox\")\n    data_all[cols_numeric] = data_all[cols_numeric].apply(scale_minmax, axis = 0)\n    trans = []\n    for feat in cols_numeric:\n        trans_var, lambda_var = stats.boxcox(data_all[feat].dropna() + 1)\n        trans.append(scale_minmax(trans_var))\n    data_all[cols_numeric] = np.asarray(trans).T\n    \nelif scale == \"norm\":\n    print(b_, \"norm\")\n    data_all[cols_numeric] = data_all[cols_numeric].apply(scale_norm, axis = 0)\n    \nelif scale == \"minmax\":\n    print(b_, \"minmax\")\n    data_all[cols_numeric] = data_all[cols_numeric].apply(scale_minmax, axis = 0)\n    \nelif scale == \"rankgauss\":\n    ### Rank Gauss ###\n    print(b_, \"Rank Gauss\")\n    scaler = GaussRankScaler()\n    data_all[cols_numeric] = scaler.fit_transform(data_all[cols_numeric])\n    \nelse:\n    pass","7949ef1e":"# PCA\nif decompo == \"PCA\":\n    print(b_, \"PCA\")\n    GENES = [col for col in data_all.columns if col.startswith(\"g-\")]\n    CELLS = [col for col in data_all.columns if col.startswith(\"c-\")]\n    \n    pca_genes = PCA(n_components = ncompo_genes,\n                    random_state = seed).fit_transform(data_all[GENES])\n    pca_cells = PCA(n_components = ncompo_cells,\n                    random_state = seed).fit_transform(data_all[CELLS])\n    \n    pca_genes = pd.DataFrame(pca_genes, columns = [f\"pca_g-{i}\" for i in range(ncompo_genes)])\n    pca_cells = pd.DataFrame(pca_cells, columns = [f\"pca_c-{i}\" for i in range(ncompo_cells)])\n    data_all = pd.concat([data_all, pca_genes, pca_cells], axis = 1)\nelse:\n    pass","4d7cb8f6":"# Encoding\nif encoding == \"lb\":\n    print(b_, \"Label Encoding\")\n    for feat in [\"cp_time\", \"cp_dose\"]:\n        data_all[feat] = LabelEncoder().fit_transform(data_all[feat])\nelif encoding == \"dummy\":\n    print(b_, \"One-Hot\")\n    data_all = pd.get_dummies(data_all, columns = [\"cp_time\", \"cp_dose\"])","e9121cdc":"GENES = [col for col in data_all.columns if col.startswith(\"g-\")]\nCELLS = [col for col in data_all.columns if col.startswith(\"c-\")]\n\nfor stats in tqdm.tqdm([\"sum\", \"mean\", \"std\", \"kurt\", \"skew\"]):\n    data_all[\"g_\" + stats] = getattr(data_all[GENES], stats)(axis = 1)\n    data_all[\"c_\" + stats] = getattr(data_all[CELLS], stats)(axis = 1)    \n    data_all[\"gc_\" + stats] = getattr(data_all[GENES + CELLS], stats)(axis = 1)","53ac072b":"print(f\"{b_}GENES' Lenght: {r_}{len(GENES)}\")\nprint(f\"{b_}CELLS' Lenght: {r_}{len(CELLS)}\")","5d99faf1":"def distributions(num, graphs, items, features, gorc):\n    \"\"\"\n    Plot the distributions of gene expression or cell viability data\n    \"\"\"\n    for i in range(0, num - 1, 7):\n        if i >= 3:\n            break\n        idxs = list(np.array([0, 1, 2, 3, 4, 5, 6]) + i)\n    \n        fig, axs = plt.subplots(1, 7, sharey = True)\n        for k, item in enumerate(idxs):\n            if item >= items:\n                break\n            graph = sns.distplot(data_all[features].values[:, item], ax = axs[k])\n            graph.set_title(f\"{gorc}-{item}\")\n            graphs.append(graph)","51f3c045":"gnum = data_all[GENES].shape[1]\ngraphs = []\n\ndistributions(gnum, graphs, 737, GENES, \"g\")","112a7e59":"cnum = data_all[CELLS].shape[1]\ngraphs = []\n\ndistributions(cnum, graphs, 100, CELLS, \"c\")","25e512e3":"with open(\"data_all.pickle\", \"wb\") as f:\n    pickle.dump(data_all, f)","8487af28":"with open(\"data_all.pickle\", \"rb\") as f:\n    data_all = pickle.load(f)","8534979d":"# train_df and test_df\nfeatures_to_drop = [\"sig_id\", \"cp_type\"]\ndata_all.drop(features_to_drop, axis = 1, inplace = True)\ntry:\n    targets.drop(\"sig_id\", axis = 1, inplace = True)\nexcept:\n    pass\ntrain_df = data_all[: train.shape[0]]\ntrain_df.reset_index(drop = True, inplace = True)\n# The following line it's a bad practice in my opinion, targets on train set\n#train_df = pd.concat([train_df, targets], axis = 1)\ntest_df = data_all[train_df.shape[0]: ]\ntest_df.reset_index(drop = True, inplace = True)","056d51e5":"print(f\"{b_}train_df.shape: {r_}{train_df.shape}\")\nprint(f\"{b_}test_df.shape: {r_}{test_df.shape}\")","673264c0":"X_test = test_df.values\nprint(f\"{b_}X_test.shape: {r_}{X_test.shape}\")","fad44c26":"class LogitsLogLoss(Metric):\n    \"\"\"\n    LogLoss with sigmoid applied\n    \"\"\"\n\n    def __init__(self):\n        self._name = \"logits_ll\"\n        self._maximize = False\n\n    def __call__(self, y_true, y_pred):\n        \"\"\"\n        Compute LogLoss of predictions.\n\n        Parameters\n        ----------\n        y_true: np.ndarray\n            Target matrix or vector\n        y_score: np.ndarray\n            Score matrix or vector\n\n        Returns\n        -------\n            float\n            LogLoss of predictions vs targets.\n        \"\"\"\n        logits = 1 \/ (1 + np.exp(-y_pred))\n        aux = (1 - y_true) * np.log(1 - logits + 1e-15) + y_true * np.log(logits + 1e-15)\n        return np.mean(-aux)","d36424fa":"scores_auc_all = []\ntest_cv_preds = []\n\nNB_SPLITS = 10 # 7\nmskf = MultilabelStratifiedKFold(n_splits = NB_SPLITS, random_state = 0, shuffle = True)\n\noof_preds = []\noof_targets = []\nscores = []\nscores_auc = []","775a0240":"for fold_nb, (train_idx, val_idx) in enumerate(mskf.split(train_df, targets)):\n    print(b_,\"FOLDS: \", r_, fold_nb + 1)\n    print(g_, '*' * 60, c_)\n    \n    X_train, y_train = train_df.values[train_idx, :], targets.values[train_idx, :]\n    X_val, y_val = train_df.values[val_idx, :], targets.values[val_idx, :]\n    \n    ### Model Parameters ###\n    # n_d and n_a are different from the original work, 32 instead of 24\n    # This is the first change in the code from the original\n    tabnet_params = dict(\n        n_d = 32,\n        n_a = 32,\n        n_steps = 1,\n        gamma = 1.3,\n        lambda_sparse = 0,\n        optimizer_fn = optim.Adam,\n        optimizer_params = dict(lr = 2e-2, weight_decay = 1e-5),\n        mask_type = \"entmax\",\n        scheduler_params = dict(\n            mode = \"min\", patience = 5, min_lr = 1e-5, factor = 0.9),\n        scheduler_fn = ReduceLROnPlateau,\n        seed = seed,\n        verbose = 10\n    )\n    \n    ### Model ###\n    model = TabNetRegressor(**tabnet_params)\n        \n    ### Fit ###\n    # Another change to the original code\n    # virtual_batch_size of 32 instead of 128\n    # I added the metric for Label Smoothing \n    model.fit(\n        X_train = X_train,\n        y_train = y_train,\n        eval_set = [(X_val, y_val)],\n        eval_name = [\"val\"],\n        eval_metric = [\"logits_ll\"],\n        max_epochs = MAX_EPOCH,\n        patience = 20,\n        batch_size = 1024, \n        virtual_batch_size = 32,\n        num_workers = 1,\n        drop_last = False,\n        # To use binary cross entropy because this is not a regression problem\n        loss_fn = F.binary_cross_entropy_with_logits\n    )\n    print(y_, '-' * 60)\n    \n    ### Predict on validation ###\n    preds_val = model.predict(X_val)\n    # Apply sigmoid to the predictions\n    preds = 1 \/ (1 + np.exp(-preds_val))\n    score = np.min(model.history[\"val_logits_ll\"])\n    \n    ### Save OOF for CV ###\n    oof_preds.append(preds_val)\n    oof_targets.append(y_val)\n    scores.append(score)\n    \n    ### Predict on test ###\n    preds_test = model.predict(X_test)\n    test_cv_preds.append(1 \/ (1 + np.exp(-preds_test)))\n\noof_preds_all = np.concatenate(oof_preds)\noof_targets_all = np.concatenate(oof_targets)\ntest_preds_all = np.stack(test_cv_preds)","0a7645d6":"aucs = []\nfor task_id in range(oof_preds_all.shape[1]):\n    aucs.append(roc_auc_score(y_true = oof_targets_all[:, task_id],\n                              y_score = oof_preds_all[:, task_id]\n                             ))\nprint(f\"{b_}Overall AUC: {r_}{np.mean(aucs)}\")\nprint(f\"{b_}Average CV: {r_}{np.mean(scores)}\")","03e078bc":"all_feat = [col for col in submission.columns if col not in [\"sig_id\"]]\n# To obtain the same lenght of test_preds_all and submission\ntest = pd.read_csv(data_path + \"test_features.csv\")\nsig_id = test[test[\"cp_type\"] != \"ctl_vehicle\"].sig_id.reset_index(drop = True)\ntmp = pd.DataFrame(test_preds_all.mean(axis = 0), columns = all_feat)\ntmp[\"sig_id\"] = sig_id\n\nsubmission = pd.merge(test[[\"sig_id\"]], tmp, on = \"sig_id\", how = \"left\")\nsubmission.fillna(0.001, inplace = True)","61fc0a90":"#submission[all_feat] = tmp.mean(axis = 0)\n\n# Set control to 0\n#submission.loc[test[\"cp_type\"] == 0, submission.columns[1:]] = 0\nsubmission.to_csv(\"submission.csv\", index = None)\nprint(f\"{b_}submission.shape: {r_}{submission.shape}\")","058f7e00":"submission.head()","03f3b686":"# <font color = \"seagreen\">Preambule<\/font>\n\nI made this notebook to share some experiments (see the sections \"Experiments\") which could help to someone who don't want to waste their daily \"submissions\", but more importantly, to get feedback about what i could change to achive a better CV. Moreover, the easiness of TabNet to overfit the data it's disturbing, however i think that that model has potential. In the section \"Conclusion\" i share my opinion about the fine-tuning process of TabNet.","955c4f45":"### <font color = \"green\">Distributions of \"data_all\"<\/font>","ea240329":"# <font color = \"seagreen\">Conclusion<\/font> \nThe number 32 is key for two paramaters, `n_a` and `n_d`, also for the hyperparameter `virtual_batch_size`, numbers higher or lower than that number gives worst results. As you can see, a huge improvement on **LB** (compared to Version 6) was possible using **PCA** and **Rank Gauss** but the **CV** it's a way worst than the previos. This just reafirms the idea that it's too easy to overfit the data with **TabNet**. ","ce3a4c37":"### <font color = \"green\">Distributions of the Train Set<\/font>","9b036629":"# <font color = \"seagreen\">Experiments<\/font>\n\nI just want to point that the [original work](https:\/\/www.kaggle.com\/optimo\/tabnetregressor-2-0-train-infer) achive a CV of 0.015532370835690834 and a LB score of 0.01864. Some of the experiments that i made with their changes:\n\n\n- CV: 0.01543560538566987, LB: 0.01858, best LB that i could achive, changes\n    - `n_a` = 32 instead of 24\n    - `n_d` = 32 instead of 24\n- CV: 0.015282077428722094, LB: 0.01862, best CV that i could achive, changes (Version 5):\n    - `n_a` = 32 instead of 24\n    - `n_d` = 32 instead of 24\n    - `virtual_batch_size` = 32, instead of 128\n    - `seed` = 42 instead of 0\n- CV: 0.015330138325308062, LB: 01864, the same LB that the original but better CV, changes:\n    - `n_a` = 32 instead of 24\n    - `n_d` = 32 instead of 24\n    - `virtual_batch_size` = 64, instead of 128\n    - `batch_size` = 512, instead of 1024\n- CV: 0.015361751699863063, LB: 0.01863, better LB and CV than the original, changes:\n    - `n_a` = 32 instead of 24\n    - `n_d` = 32 instead of 24\n    - `virtual_batch_size` = 64, instead of 128\n- CV: 0.015529925324634975, LB: 0.01865, changes:\n    - `n_a` = 48 instead of 24\n    - `n_d` = 48 instead of 24\n- CV: 0.015528553520924939, LB: 0.01868, changes:\n    - `n_a` = 12 instead of 24\n    - `n_d` = 12 instead of 24\n- CV: 0.015870202970324317, LB: 0.01876, worst CV and LB score, changes:\n    - `n_a` = 12 instead of 24\n    - `n_d` = 12 instead of 24\n    - `batch_size` = 2048, instead of 1024\n    \n    \nAs you can see if `batch_size` < 1024 and > 1024 give worst results. Something similar happens with `n_a` and `n_d`, if their values are lower or higher than 32 the results are worst.\n\n\n## <font color = \"green\">Versions<\/font>\n\n- **Version 5**: I added the `seed` parameter to the TabNet model.\n- **Version 6**: I changed the `virtual_batch_size` to 24\n    - CV: 0.01532900616425282, LB: 0.01862, changes:\n        - `n_a` = 32 instead of 24\n        - `n_d` = 32 instead of 24\n        - `virtual_batch_size` = 24, instead of 128\n        - `seed` = 42 instead of 0\n- **Version 7**: PCA, Rank Gauss, `virtual_batch_size` = 32, instead of 24\n    - CV: 0.016500671429559147, LB: 0.01848\n- **Version 8**: `sparsemax` instead of `entmax`\n    - CV: 0.016642308446397754, LB: 0.01854\n- **Version 9**: `entmax` instead of `sparsemax`, Reorganization of the code, submission.fillna(0.001, ...) instead of 0","41fb5b50":"## <font color = \"green\">Loading the Data<\/font>","7601df8b":"## <font color = \"green\">Reproducibility<\/font>","6cb59704":"## <font color = \"green\">Submission<\/font>","b748b94e":"## <font color = \"green\">Training Loop<\/font>","1b7abc2e":"### <font color = \"green\">Distributions of the Test Set<\/font>","bafd5d76":"<div class = \"alert alert-block alert-info\">\n    <h1><font color = \"red\">DISCLAIMER<\/font><\/h1>\n    <p>The following notebook it's highly based on the works <a href = \"https:\/\/www.kaggle.com\/optimo\/tabnetregressor-2-0-train-infer\">TabNetRegressor 2.0 [TRAIN + INFER]<\/a>, <a href = \"https:\/\/www.kaggle.com\/liuhdme\/moa-competition\/data\">MOA competition<\/a> and <a href = \"https:\/\/www.kaggle.com\/kushal1506\/moa-pytorch-0-01859-rankgauss-pca-nn\/data?select=train_targets_scored.csv\">\nMoA | Pytorch | 0.01859 | RankGauss | PCA | NN<\/a>, please check it out.<\/p>\n<\/div>","c292a191":"## <font color = \"green\">Installing Libraries<\/font>","5598b01f":"## <font color = \"green\">Loading Libraries<\/font>","72904538":"# <font color = \"seagreen\">Training<\/font>\n\nFollowing the recomendation of [Optimo](https:\/\/www.kaggle.com\/optimo) i've put the TabNet parameters inside the training loop.","01d4dc61":"## <font color = \"green\">One Hot<\/font>","81da408d":"## <font color = \"green\">Rank Gauss Process<\/font>","3ee01da4":"# <font color = \"seagreen\">Results<\/font>\n","4a995466":"## <font color = \"green\">Configuration<\/font>","3735f87a":"# <font color = \"seagreen\">Preprocessing and Feature Engineering<\/font>","89b7dca9":"## <font color = \"green\">Custom Metric<\/font>","c76eef97":"<div class = \"alert alert-block alert-info\">\n    <h3><font color = \"red\">NOTE: <\/font><\/h3>\n    <p>If you want to comment please tag me with '@' to answer more quickly.<\/p>\n<\/div>","a8107240":"## <font color = \"green\">Distributions After Rank Gauss and PCA<\/font>","7036bd47":"## <font color = \"green\">Principal Component Analysis<\/font>","8318b172":"## <font color = \"green\">Post-processing<\/font>","34432100":"## <font color = \"green\">Distributions Before Rank Gauss and PCA<\/font>"}}