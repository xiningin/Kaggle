{"cell_type":{"ded5ec33":"code","96535d66":"code","597a4f37":"code","7199426b":"code","8fd276f4":"code","cd7b3280":"code","e043c9e6":"code","856fa728":"code","3f0bfa34":"code","aa90c9e7":"code","a9d997ce":"code","8609351e":"code","9fc1d56f":"code","b0578259":"code","026c3099":"code","2d6d22c5":"code","55d64df2":"code","4676099b":"code","08061cf9":"code","eb1bb01d":"code","8626796a":"code","35d389fc":"code","7738beb2":"code","2188f3d4":"code","7219865e":"code","1274455d":"code","4ef9842a":"code","b2bf75d5":"code","04586d2c":"code","b8fdb50d":"code","cc2d6e50":"code","2349bdf2":"code","916c2418":"markdown","e9ffb203":"markdown","4add99a4":"markdown","1ab658bc":"markdown","77df3fe0":"markdown","753445d6":"markdown","e6e2e98c":"markdown","e134c125":"markdown","b7df6bd1":"markdown","6d32a660":"markdown","917b0a34":"markdown"},"source":{"ded5ec33":"import gc\nimport os\nfrom pathlib import Path\nimport random\nimport sys\n\nfrom tqdm.notebook import tqdm\nimport numpy as np\nimport pandas as pd\nimport scipy as sp\n\n\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\nfrom IPython.core.display import display, HTML\n\n# --- plotly ---\nfrom plotly import tools, subplots\nimport plotly.offline as py\npy.init_notebook_mode(connected=True)\nimport plotly.graph_objs as go\nimport plotly.express as px\nimport plotly.figure_factory as ff\nimport plotly.io as pio\npio.templates.default = \"plotly_dark\"\n\n# --- models ---\nfrom sklearn import preprocessing\nfrom sklearn.model_selection import KFold\nimport lightgbm as lgb\nimport xgboost as xgb\nimport catboost as cb\n\n# --- setup ---\npd.set_option('max_columns', 50)\nimport os\n\nfrom subprocess import check_output\nprint(check_output([\"ls\", \"..\/input\/covid19-global-forecasting-week-5\"]).decode(\"utf8\"))","96535d66":"df = pd.read_csv('..\/input\/covid19-global-forecasting-week-5\/train.csv') # training\ntest = pd.read_csv('..\/input\/covid19-global-forecasting-week-5\/test.csv') # testing\nsub = pd.read_csv('..\/input\/covid19-global-forecasting-week-5\/submission.csv') #submission","597a4f37":"# %%time\n# import requests\n\n# for filename in ['time_series_covid19_confirmed_global.csv',\n#                  'time_series_covid19_deaths_global.csv',\n#                  'time_series_covid19_recovered_global.csv',\n#                  'time_series_covid19_confirmed_US.csv',\n#                  'time_series_covid19_deaths_US.csv']:\n#     print(f'Downloading {filename}')\n#     url = f'https:\/\/raw.githubusercontent.com\/CSSEGISandData\/COVID-19\/master\/csse_covid_19_data\/csse_covid_19_time_series\/{filename}'\n#     myfile = requests.get(url)\n#     open(filename, 'wb').write(myfile.content)","7199426b":"df.info()\ndf","8fd276f4":"test.info()\ntest","cd7b3280":"print(\"Train columns with null values:\\n\", df.isnull().sum())\nprint(\"-\"*10)\nprint(\"Test columns with null values:\\n\", test.isnull().sum())","e043c9e6":"missing = df.isnull().sum()\nmissing_pourcent = df.isnull().sum()\/df.shape[0]*100\n\ndic = {\n    'mising':missing,\n    'missing_pourcent %':missing_pourcent\n}\nframe=pd.DataFrame(dic)\nframe","856fa728":"missing = test.isnull().sum()\nmissing_pourcent = test.isnull().sum()\/df.shape[0]*100\n\ndic = {\n    'mising':missing,\n    'missing_pourcent %':missing_pourcent\n}\nframe=pd.DataFrame(dic)\nframe","3f0bfa34":"d_cleaner = [df, test]\n\nfor dataset in d_cleaner:\n    dataset.fillna(dataset.dtypes.replace({'O': 'Null'}), inplace = True)\n    \nprint(df.isnull().sum())\nprint('-'*10)\nprint(test.isnull().sum())\n\ndf[:10]","aa90c9e7":"df_conf = df.loc[df['Target'] == 'ConfirmedCases']\ndf_fatal = df.loc[df['Target'] == 'Fatalities']\ntest_conf = test.loc[test['Target'] == 'ConfirmedCases']\ntest_fatal = test.loc[test['Target'] == 'Fatalities']","a9d997ce":"df_conf.head()","8609351e":"df_fatal.head()","9fc1d56f":"## \u4eba\u53e3\u5206\u5e03\u533a\u95f4\u9891\u7387\nplt.hist(df['Population'].unique())","b0578259":"## \u786e\u8bca\u6570\u5206\u5e03\u533a\u95f4\u9891\u7387\nplt.hist(df_conf['TargetValue'], range=(-1000, 2000))","026c3099":"CNconfirmed = df_conf.loc[(df_conf['Country_Region'] == 'China')]\nCNconfirmed['TargetValue'].hist((CNconfirmed['Date'] > '2020-01-23') & (CNconfirmed['Date'] < '2020-02-24'), range=(0, 5000))","2d6d22c5":"# use 'df_conf\u2018 as the training dataset of confirmed cases\nfig = px.treemap(df_conf, path=['Country_Region'], values='TargetValue',width=900, height=600)\nfig.update_traces(textposition='middle center', textfont_size=15)\nfig.update_layout(\n    title={\n        'text': 'Total Share of Worldwide COVID19 Confirmed Cases',\n        'y':0.92,\n        'x':0.5,\n        'xanchor': 'center',\n        'yanchor': 'top'})\nfig.show()","55d64df2":"fig = px.pie(df, values='TargetValue', names='Country_Region')\nfig.update_traces(textposition='inside')\nfig.update_layout(uniformtext_minsize=12, uniformtext_mode='hide')\nfig.show()","4676099b":"ww_conf = df_conf.groupby('Date')[['TargetValue']].sum().reset_index()\nww_conf.rename(columns={'TargetValue': 'Confirmed'}, inplace=True)\nww_fatal = df_fatal.groupby('Date')[['TargetValue']].sum().reset_index()\nww_fatal.rename(columns={'TargetValue': 'Fatalities'}, inplace=True)\nww_df = pd.merge(ww_conf, ww_fatal, on='Date', how='outer')\nww_df","08061cf9":"ww_melt_df = pd.melt(ww_df, id_vars=['Date'], value_vars=['Confirmed', 'Fatalities'])\nww_melt_df","eb1bb01d":"fig = px.line(ww_melt_df, x=\"Date\", y=\"value\", color='variable', \n              title=\"Worldwide Confirmed\/Death Cases Over Time\")\nfig.show()","8626796a":"ww_df.sort_values(\"Date\",inplace=True)\nww_df['Confirmed_cumsum'] = ww_df['Confirmed'].cumsum()\nww_df['Fatalities_cumsum'] = ww_df['Fatalities'].cumsum()\nww_df['New cases'] = ww_df['Confirmed']\nww_cumsum_melt_df = pd.melt(ww_df, id_vars=['Date'], value_vars=['Confirmed_cumsum', 'Fatalities_cumsum', 'New cases'])\n\nfig = px.line(ww_cumsum_melt_df, x=\"Date\", y=\"value\", color='variable', \n              title=\"Worldwide cumsum Confirmed\/Death Cases Over Time\")\nfig.show()","35d389fc":"fig = px.line(ww_cumsum_melt_df, x=\"Date\", y=\"value\", color='variable',\n              title=\"Worldwide cumsum Confirmed\/Death Cases Over Time (Log scale)\",\n             log_y=True)\nfig.show()","7738beb2":"country_conf = df_conf.groupby(['Date', 'Country_Region'])[['TargetValue']].sum().reset_index()\ncountry_conf.rename(columns={'TargetValue': 'Confirmed'}, inplace=True)\ncountry_fatal = df_fatal.groupby(['Date', 'Country_Region'])[['TargetValue']].sum().reset_index()\ncountry_fatal.rename(columns={'TargetValue': 'Fatalities'}, inplace=True)\ncountry_df = pd.merge(country_conf, country_fatal, on=['Date', 'Country_Region'], how='outer')\ncountry_df","2188f3d4":"country_df.sort_values(\"Date\",inplace=True)\ncountry_df_2 = country_df.groupby(['Country_Region'])\ncountry_df['Confirmed_cumsum'] = country_df_2['Confirmed'].cumsum()\ncountry_df['Fatalities_cumsum'] = country_df_2['Fatalities'].cumsum()\ncountry_df['New cases'] = country_df['Confirmed']\ncountry_df","7219865e":"target_date = country_df['Date'].max()\n\ntop_country_df = country_df.query('(Date == @target_date) & (Confirmed_cumsum > 10000)').sort_values('Confirmed_cumsum', ascending=False)\ntop_country_melt_df = pd.melt(top_country_df, id_vars='Country_Region', value_vars=['Confirmed_cumsum', 'Fatalities_cumsum'])","1274455d":"fig = px.bar(top_country_melt_df.iloc[::-1],\n             x='value', y='Country_Region', color='variable', barmode='group',\n             title=f'Confirmed Cases\/Deaths on {target_date}', text='value', height=1500, orientation='h')\nfig.show()","4ef9842a":"top30_countries = top_country_df.sort_values('Confirmed_cumsum', ascending=False).iloc[:10]['Country_Region'].unique()\ntop30_countries_df = country_df[country_df['Country_Region'].isin(top30_countries)]\nfig = px.line(top30_countries_df,\n              x='Date', y='Confirmed_cumsum', color='Country_Region',\n              title=f'Confirmed Cases for top 10 country as of {target_date}')\nfig.show()","b2bf75d5":"top30_countries = top_country_df.sort_values('Fatalities_cumsum', ascending=False).iloc[:10]['Country_Region'].unique()\ntop30_countries_df = country_df[country_df['Country_Region'].isin(top30_countries)]\nfig = px.line(top30_countries_df,\n              x='Date', y='Fatalities_cumsum', color='Country_Region',\n              title=f'Fatalities for top 10 country as of {target_date}')\nfig.show()","04586d2c":"all_country_df = country_df.query('Date == @target_date')\nall_country_df['confirmed_log1p'] = np.log10(all_country_df['Confirmed_cumsum'] + 1)\nall_country_df['fatalities_log1p'] = np.log10(all_country_df['Fatalities_cumsum'] + 1)\nall_country_df['mortality_rate'] = all_country_df['Fatalities_cumsum'] \/ all_country_df['Confirmed_cumsum']","b8fdb50d":"fig = px.choropleth(all_country_df, locations=\"Country_Region\", \n                    locationmode='country names', color=\"confirmed_log1p\", \n                    hover_name=\"Country_Region\", hover_data=[\"Confirmed_cumsum\", 'Fatalities_cumsum', 'mortality_rate'],\n                    range_color=[all_country_df['confirmed_log1p'].min(), all_country_df['confirmed_log1p'].max()], \n                    color_continuous_scale=\"peach\", \n                    title='Countries with Confirmed Cases')\n\n# I'd like to update colorbar to show raw values, but this does not work somehow...\n# Please let me know if you know how to do this!!\ntrace1 = list(fig.select_traces())[0]\ntrace1.colorbar = go.choropleth.ColorBar(\n    tickvals=[0, 1, 2, 3, 4, 5, 6, 7, 8],\n    ticktext=['1', '10', '100', '1000','10000', '100000', '1000000', '10000000', '100000000'])\nfig.show()","cc2d6e50":"fig = px.choropleth(all_country_df, locations=\"Country_Region\", \n                    locationmode='country names', color=\"fatalities_log1p\", \n                    hover_name=\"Country_Region\", \n                    range_color=[all_country_df['fatalities_log1p'].min(), all_country_df['fatalities_log1p'].max()],\n                    hover_data=[\"Confirmed_cumsum\", 'Fatalities_cumsum', 'mortality_rate'],\n                    color_continuous_scale=\"peach\", \n                    title='Countries with fatalities')\nfig.show()","2349bdf2":"fig = px.choropleth(all_country_df, locations=\"Country_Region\", \n                    locationmode='country names', color=\"mortality_rate\", \n                    hover_name=\"Country_Region\", hover_data=[\"Confirmed_cumsum\", 'Fatalities_cumsum', 'mortality_rate'],\n                    #range_color=[all_country_df['mortality_rate'].min(), all_country_df['mortality_rate'].max()], \n                    range_color=[0,0.1],\n                    color_continuous_scale=\"peach\", \n                    title='Countries with mortality rate')\nfig.show()","916c2418":"# Import Libraries","e9ffb203":"## Country-wise growth","4add99a4":"## Worldwide trend","1ab658bc":"# Clean Data","77df3fe0":"Fill missing values for columns 'County' and 'Province_State' as 'Null'.","753445d6":"## A.train data","e6e2e98c":"# Import Data","e134c125":"# Statistical Exploration and Visualization","b7df6bd1":"## A.test data","6d32a660":"To better manipulate data, for each dataframe we divide it up into two groups on 'Target'. One suggests confirmed cases, and the other for fatalities.","917b0a34":"# Finding missing values"}}