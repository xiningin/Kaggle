{"cell_type":{"50538699":"code","5190f33c":"code","0e92f723":"code","b8c75c59":"code","93bfa76b":"code","a539fc95":"code","19719bdb":"code","dc636200":"code","2e1508c4":"code","2e8bf851":"code","d3654ac9":"code","aba3be7b":"code","91dbb3b8":"code","ac70dabd":"code","9d4db947":"code","58d7e4be":"code","ad6bb3a7":"code","63bab210":"code","4196e5e5":"code","deebb1e3":"code","48436a10":"code","18d2b916":"code","467dd0ee":"code","0debb9f0":"code","86a45696":"code","da1abe14":"code","3c02315d":"code","bf974713":"code","a98438d1":"code","b688908b":"code","807402a0":"code","fd36c5da":"code","c6fb947f":"code","0041c54c":"code","3d54708e":"code","438f7114":"code","40447ce4":"code","f4db9a25":"code","210b0109":"markdown","e5c587a7":"markdown","55d6b055":"markdown","da255e58":"markdown","12f36c39":"markdown","c6e1f8d2":"markdown","4ed424cc":"markdown","b453c161":"markdown","e028577f":"markdown","b823eb9a":"markdown","f54f627f":"markdown","ee6beac4":"markdown","26daddb6":"markdown","a18df2cb":"markdown"},"source":{"50538699":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport matplotlib.gridspec as gridspec\nimport seaborn as sns\nimport tensorflow as tf\nimport tensorflow.keras as ks\nfrom sklearn.model_selection import train_test_split\nfrom tensorflow.keras.layers import Dense, LSTM, Conv1D, Bidirectional, Lambda, Input\nfrom tensorflow.keras.models import Model\nplt.style.use('default')\nplt.style.use('ggplot')","5190f33c":"df = pd.read_csv('..\/input\/tesla-stock-data-from-2010-to-2020\/TSLA.csv')\nprint(df.shape)\ndf.head()","0e92f723":"df['Date'] = pd.to_datetime(df['Date'], format='%Y-%m-%d')","b8c75c59":"plt.figure(figsize=(10, 8), constrained_layout=True)\nc = ['cyan', 'blue', 'green', 'red']\ny = ['Close', 'Open', 'High', 'Low']\nl = 2.0\nfor j, c in zip(y, c):\n  plt.plot(df['Date'], df[j], color=c, linewidth=l, label=f'{j} stock')\n  plt.title('Tesla Stock')\n  plt.xlabel('Date')\n  plt.ylabel('stock_value')\n  plt.legend()\n  l -=0.5\n\nplt.show()","93bfa76b":"df2 = df[['High', 'Low', 'Open', 'Close']]\ndf2.head()","a539fc95":"def load_data(seq_len, series):\n  x_data = []\n  y_data = []\n\n  for i in range(seq_len, len(series)):\n    x = []\n    y = []\n    x.append([series['High'].iloc[i-seq_len: i].values])\n    y.append(series['High'].iloc[i])\n    x.append([series['Low'].iloc[i-seq_len: i].values])\n    y.append(series['Low'].iloc[i])\n    x.append([series['Open'].iloc[i-seq_len: i].values])\n    y.append(series['Open'].iloc[i])\n    x.append([series['Close'].iloc[i-seq_len: i].values])\n    y.append(series['Close'].iloc[i])\n    x_data.append(x)\n    y_data.append(y)\n  \n  x_data_train = x_data[:int(0.9*(len(series)))]\n  x_data_val = x_data[int(0.9*(len(series))):]\n  \n  \n  y_data_train = y_data[:int(0.9*(len(series)))]\n  y_data_val = y_data[int(0.9*(len(series))):]\n\n  x_train = np.array(x_data_train)\n  x_val = np.array(x_data_val)\n  \n  y_train = np.array(y_data_train)\n  y_val = np.array(y_data_val)\n  \n  x_train = np.reshape(x_train, (x_train.shape[0], 4, seq_len))\n  x_val = np.reshape(x_val, (x_val.shape[0], 4, seq_len))\n\n  y_train = np.reshape(y_train, (y_train.shape[0], 1, 4))\n  y_val = np.reshape(y_val, (y_val.shape[0], 1, 4))\n  \n  x_full = np.array(x_data)\n  x_full = np.reshape(x_full, (x_full.shape[0], 4, seq_len))\n\n  y_full = np.array(y_data)\n  y_full = np.reshape(y_full, (y_full.shape[0], 1, 4))\n  \n  return (x_train, x_val, y_train, y_val, x_full, y_full)\n  \n","19719bdb":"(x_train, x_val, y_train, y_val, x_full, y_full) = load_data(64, df2)","dc636200":"print(f'the shape of all x_train is {x_train.shape}\\n\\\nthe shape of all y_train is {y_train.shape}\\n\\\nthe shape of all x_val is {x_val.shape}\\n\\\nthe shape of all y_val is {y_val.shape}')","2e1508c4":"print(f'the shape of full x is {x_full.shape}\\n\\\nthe shape of full y is {y_full.shape}')","2e8bf851":"def make_dataset(x, y, buffer_size=1000, batch_size=150):\n    data = tf.data.Dataset.from_tensor_slices((x, y))\n    data = data.cache().shuffle(buffer_size).batch(batch_size)\n    return data","d3654ac9":"train_dataset = make_dataset(x_train, y_train)\nval_dataset = make_dataset(x_val, y_val)","aba3be7b":"def base_model(inputs):\n  x = Conv1D(filters=128,kernel_size=4, activation='relu', name='conv_1D')(inputs)\n  x = Bidirectional(LSTM(units=64, return_sequences=True, name='b_lstm_1'))(x)\n  x = ks.layers.Dropout(0.2)(x)\n  x = Bidirectional(LSTM(units=64, return_sequences=True, name='b_lstm_2'))(x)\n  x = ks.layers.Dropout(0.2)(x)\n  x = LSTM(units=32, return_sequences=True, name='lstm_3')(x)\n  return x\n\ndef final_model(inputs):\n  x = base_model(inputs)\n  x = Dense(units=128, activation='relu', name='dense_1')(inputs)\n  x = Dense(units=64, name='dense_2')(x)\n  x = Lambda(lambda x:x*16, name='lambda_1')(x)\n  high_stock = Dense(1, name='high_stock')(x)\n  low_stock = Dense(1, name='low_stock')(x)\n  open_stock = Dense(1, name='open_stock')(x)\n  close_stock = Dense(1, name='close_stock')(x)\n  \n  model = Model(inputs=inputs, outputs=[high_stock, low_stock, open_stock, close_stock])\n  return model","91dbb3b8":"inputs =Input(shape=(4, 64, ))\nmodel = final_model(inputs)\nmodel.summary()","ac70dabd":"ks.utils.plot_model(model)","9d4db947":"lr_schedule = tf.keras.callbacks.LearningRateScheduler(\n    lambda epoch: 1e-8 * 10**(epoch \/22))\noptimizer = tf.keras.optimizers.SGD(learning_rate=1e-8, momentum=0.9)\nmodel.compile(loss={\n    'high_stock': ks.losses.Huber(), \n    'low_stock': ks.losses.Huber(),\n    'open_stock': ks.losses.Huber(), \n    'close_stock': ks.losses.Huber() \n    },\n     optimizer=optimizer,\n     metrics={\n         'high_stock': ['mae'], \n        'low_stock': ['mae'], \n        'open_stock': ['mae'],\n        'close_stock': ['mae']\n        })\nhistory = model.fit(x=x_train, y=y_train, epochs=100, callbacks=[lr_schedule], verbose=0)\n","58d7e4be":"plt.semilogx(history.history[\"lr\"], history.history[\"loss\"])\nplt.axis([1e-8, 1e-4, 0, 1000])\nplt.title('Loss w.r.t learning rate')\nplt.xlabel('learning rate')\nplt.ylabel('loss')\nplt.show()","ad6bb3a7":"model = final_model(inputs)\nmodel.compile(loss={\n    'high_stock': ks.losses.Huber(), \n    'low_stock': ks.losses.Huber(),\n    'open_stock': ks.losses.Huber(), \n    'close_stock': ks.losses.Huber() \n    },\n     optimizer=ks.optimizers.SGD(learning_rate=1e-6, momentum=0.9),\n     metrics={\n         'high_stock': ['mae'], \n        'low_stock': ['mae'], \n        'open_stock': ['mae'],\n        'close_stock': ['mae']\n        })\nhistory = model.fit(x_train, y_train, epochs=1300, verbose=0)","63bab210":"loss = history.history['loss']\nepochs = range(len(loss))\nplt.style.use('default')\nplt.style.use('ggplot')\nplt.figure(figsize=(9, 5))\n#plt.plot(epochs[400:], mae, color='blue', label='trainig_mae')\nplt.plot(epochs, loss, color='red', label='training_loss', linewidth=0.8)\nplt.title('Training Loss')\nplt.xlabel('epochs')\nplt.xlim(0, 1000)\nplt.ylim(0, 200)\nplt.legend()\nplt.show()","4196e5e5":"high_stock_mae = history.history['high_stock_mae']\nlow_stock_mae = history.history['low_stock_mae']\nopen_stock_mae = history.history['open_stock_mae']\nclose_stock_mae = history.history['close_stock_mae']\nepochs = range(len(high_stock_mae))\nresult = []\nfig = plt.figure(figsize=(12, 8), constrained_layout=True)\nspec = gridspec.GridSpec(2, 2, figure=fig)\nax1 = fig.add_subplot(spec[0, 0])\nax2 = fig.add_subplot(spec[0, 1])\nax3 = fig.add_subplot(spec[1, 0])\nax4 = fig.add_subplot(spec[1, 1])\nax = [ax1, ax2, ax3, ax4]\nstock = [high_stock_mae, low_stock_mae, open_stock_mae, close_stock_mae]\ntitle_stock = ['mae for high_stock', 'mae for low_stock', 'mae for open_stock', 'mae for close_stock']\ncolor = ['red', 'blue', 'green', 'cyan']\nfor i in range(4):\n  ax[i].plot(epochs, stock[i], color=color[i], alpha=0.8, linewidth=0.8)\n  ax[i].set_ylim(0, 50)\n  ax[i].set_title(title_stock[i])\n  ax[i].set_xlabel('number of epochs')\n  ax[i].set_ylabel('MAE')\n  \nplt.show()","deebb1e3":"forecast = model.predict(x_val)\nforecast = np.array(forecast)\nforecast.shape","48436a10":"def sep_target(data):\n  high_hat = []\n  low_hat = []\n  open_hat = []\n  close_hat = []\n  for zeroth in data[0, :, :]:\n    high_hat.append(zeroth[0][0])\n    low_hat.append(zeroth[1][0])\n    open_hat.append(zeroth[2][0])\n    close_hat.append(zeroth[3][0])\n  high_hat = np.array(high_hat)\n  low_hat = np.array(low_hat)\n  open_hat = np.array(open_hat)\n  close_hat = np.array(close_hat)\n  return (high_hat, low_hat, open_hat, close_hat)","18d2b916":"high_preds, low_preds, open_preds, close_preds = sep_target(forecast)","467dd0ee":"def sep_ans(data):\n  high_hat = []\n  low_hat = []\n  open_hat = []\n  close_hat = []\n  for zeroth in data[:, 0]:\n    high_hat.append(zeroth[0])\n    low_hat.append(zeroth[1])\n    open_hat.append(zeroth[2])\n    close_hat.append(zeroth[3])\n  high_hat = np.array(high_hat)\n  low_hat = np.array(low_hat)\n  open_hat = np.array(open_hat)\n  close_hat = np.array(close_hat)\n  return (high_hat, low_hat, open_hat, close_hat)","0debb9f0":"high_real, low_real, open_real, close_real = sep_ans(y_val)","86a45696":"def plt_forecast(x, y, title):\n  plt.style.use('fivethirtyeight')\n  plt.figure(figsize=(30, 10))\n  plt.plot(x, color='red', linewidth=1.2, label='predicted value')\n  plt.plot(y, color='blue', linewidth=0.9, label='true value')\n  plt.title(title, fontsize=40)\n  plt.legend(fontsize=30)\n  \n  plt.show()","da1abe14":"plt_forecast(high_preds, high_real, 'High stock forecast')","3c02315d":"plt_forecast(low_preds, low_real, 'Low stock forecast')","bf974713":"plt_forecast(open_preds, open_real, 'opening stock forecast')","a98438d1":"plt_forecast(close_preds, close_real, 'Closing stock forecast')","b688908b":"forecast_val = pd.DataFrame({\n    'open': open_preds, 'close': close_preds, 'high': high_preds, 'low': low_preds\n})","807402a0":"forecast_val.head(10)","fd36c5da":"full_forecast = model.predict(x_full)\nfull_forecast = np.array(full_forecast)\nfull_forecast.shape","c6fb947f":"high_preds, low_preds, open_preds, close_preds = sep_target(full_forecast)","0041c54c":"high_real, low_real, open_real, close_real = sep_ans(y_full)","3d54708e":"plt_forecast(high_preds, high_real, 'Full Forecast for High Stock Value')","438f7114":"plt_forecast(low_preds, low_real, 'Full Forecast for Low Stock Value')","40447ce4":"plt_forecast(open_preds, open_real, 'Full Forecast for opening Stock Value')","f4db9a25":"plt_forecast(close_preds, close_real, 'Full Forecast for closing Stock Value')","210b0109":"***Lets visualize the entire stock prices of tesla over the past 10 year span***","e5c587a7":"***the forecasted values are clustered in a nested list. the below function makes the task to seperate the stock values inorder to visualize***","55d6b055":"# ***Tesla Stock Forecast ----> Using Tensorflow***","da255e58":"# ![image.png](attachment:aeac0193-e09b-439d-853f-4f0020f7595c.png)","12f36c39":"***Now lets choose a best learning rate by visualizing the above plot and train our model again from scratch***","c6e1f8d2":"***from the above few visuals it's proven that the model is performing good .So its time for the model to face and forecast some new data which it has'nt seen before***","4ed424cc":"***Importing the Libraries***","b453c161":"***Preprocessing the data and spliting for model training and validation for stock price forecasting***","e028577f":"***Loading the stock data***","b823eb9a":"***the target real values are alos clustered in a nested list. the below function makes the task to seperate the stock values inorder to visualize***","f54f627f":"***Lets use a learning rate scheduler to pick up the best learning rate for the optimizer. we use Stochastic gradient descent as our optimizer and Huber loss function , set the metric as mean squared error***","ee6beac4":"### ***Tesla is an American electric vehicle company whose aim is to accelerate the world\u2019s transition towards sustainable energy. earlier this year the rise in the stock prices of Tesla made Elon Musk the richest person in the world. Predicting Stock prices is a great use case of machine learning both for financial and time series analysis. Tesla has been in the eyes of the world for a long time now as governments of so many countries all over the world are supporting the vision of Tesla***","26daddb6":"***Creating a custom model which produce multiple outputs for high, low , open and for closing stock Prices***","a18df2cb":"***from the above plots the forecast was close to the real price. Thus the model evaluated and the models forecast is great.***"}}