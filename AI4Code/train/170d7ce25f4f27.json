{"cell_type":{"e920a941":"code","f1b92f6d":"code","1c7c3569":"code","f393bd89":"code","316ab795":"code","50a7c2d3":"code","811d9fc0":"code","9511c606":"code","3a7fa30d":"code","3150d210":"code","28e09b6e":"code","051cbc90":"code","b8e37cdc":"code","a4a1a94e":"code","cba5e08d":"code","035c663d":"code","7231648b":"code","54b968d3":"code","d9612fd3":"code","78f2f104":"code","17974792":"code","eb703439":"code","089865f3":"code","198a1e22":"code","880dd195":"code","d9a125d1":"code","80ca1d74":"code","80cffe39":"code","8720436d":"code","2f3f7ef2":"code","bcfe0287":"code","11ca3dd2":"code","2d1479a6":"code","ece628a2":"code","6450b2fd":"code","9e068344":"code","d94a1e2f":"code","1508a948":"code","10d0f60d":"code","1aa143a9":"code","4110da00":"code","7abab088":"code","de60cff7":"code","181f990b":"code","8fd9ddb7":"code","2cb5433e":"code","c56d429e":"code","07a8bd75":"code","9ce010aa":"code","dd4e6647":"code","a822d667":"code","246040e4":"code","68e5f7da":"code","758af8c9":"code","d17fcfcb":"code","f8834ed3":"code","b838cc6e":"code","95f0bca7":"code","3ac5b2ba":"code","de854cb0":"code","832fe816":"code","9669285b":"code","74c5b4e1":"code","f318eb61":"code","f6c39164":"code","7184525b":"code","c5ea5e91":"code","77092c7b":"code","0d363bab":"code","48945081":"code","3f63a5e4":"code","6657549d":"code","f5d50ae8":"code","d769fac1":"code","7837c3f7":"code","f83842d2":"code","c8d17648":"code","f593ce9c":"code","500b8abc":"code","f771a21c":"code","90167478":"code","eec74a3b":"code","557b5def":"code","726aaf65":"code","b0126b0b":"code","2fd50de7":"code","9e4f8a4d":"code","a99c7a80":"code","4162aad1":"code","7c147007":"code","c0edca2c":"code","862e3f30":"code","c0a2f7fe":"code","2bd6488a":"code","9800c627":"code","930d1bb3":"code","d0f06b37":"code","0bd1bb8f":"code","e123714a":"code","0d8c3869":"code","c232f1f3":"code","fb0272ac":"code","1ea5cccb":"code","d3fb9420":"code","c967bd0d":"code","7ea6fc05":"code","1d5a33d1":"code","4b7cf745":"code","b0966f6d":"code","85795eff":"code","f35e52bb":"code","79e673e0":"code","d72e6e21":"code","0d9a21a5":"code","433778fa":"code","a5d39c96":"code","98f1878b":"code","e023ee6e":"code","cc720ed7":"code","4fa25268":"code","aa421845":"code","e29dccd0":"code","ea5304d9":"code","367a893c":"code","cb2ba2f4":"code","6b272b47":"code","c9dc1bf1":"code","b1e4ddf0":"code","269252de":"code","f16b37cd":"code","473b5f17":"code","d32e2d19":"code","7fd14d44":"code","7f3bf9d3":"code","cf07d851":"code","9f56bd02":"code","d7c6e093":"code","ea997bda":"code","90df67e9":"code","1dd4b0de":"markdown","7175589f":"markdown","d64f183f":"markdown","564af46a":"markdown","3430674e":"markdown","b45a2601":"markdown","97d3ed67":"markdown","56b4d23e":"markdown","0c42277c":"markdown","00688714":"markdown","843839f7":"markdown","49dc3eac":"markdown","df9373dd":"markdown","346d6fed":"markdown","d28089db":"markdown","2789bde2":"markdown","75bee948":"markdown","dda3f59a":"markdown","a405e172":"markdown","76ff6d5d":"markdown","0ff9af8f":"markdown","f764cc76":"markdown","9ec989cf":"markdown","b162ba05":"markdown","047f0450":"markdown","21274815":"markdown","71551922":"markdown","54979345":"markdown","92ab8ef9":"markdown","eaaa588e":"markdown","e14bc550":"markdown","36ae1e76":"markdown","9015e29f":"markdown","e2f1ebbd":"markdown","e8fa0ea6":"markdown","d4ab2eae":"markdown","d11539e6":"markdown","f6797c28":"markdown","5ccf1d3d":"markdown","d83949c7":"markdown","010bd544":"markdown","a7dfaa8f":"markdown","34cdfeed":"markdown","98d7e67a":"markdown","860e78f2":"markdown","e59cd1a7":"markdown","c301ce09":"markdown","7dc0703e":"markdown","b03d33f1":"markdown","424562a6":"markdown","357c6580":"markdown","f73d8aa4":"markdown","5b5796c8":"markdown","fba5895c":"markdown","cf895f2c":"markdown","9d64ec75":"markdown","1903f145":"markdown","2be9dfad":"markdown","bfa087ed":"markdown","3fb43b52":"markdown","72dd6e02":"markdown","21620745":"markdown","41438527":"markdown","3557af28":"markdown","b5479621":"markdown","5cedc0ad":"markdown","8d2296a0":"markdown","2649c8b3":"markdown","e8ef28ed":"markdown","a974f858":"markdown","beec28c7":"markdown","9dc5a98f":"markdown","b54d83b0":"markdown","b2a55f52":"markdown","5fc63e35":"markdown","f696470e":"markdown","cab28ab9":"markdown","33af1163":"markdown","4c72c404":"markdown","e52383fb":"markdown","bd914e98":"markdown","03b29d72":"markdown","c526bed8":"markdown","9c662d32":"markdown","0fc74e32":"markdown","3911382b":"markdown","0271c0d2":"markdown","86d9157c":"markdown","14fb7817":"markdown","d7feb384":"markdown","62f07b31":"markdown","89d73b96":"markdown","277c9b3f":"markdown","a2ae8faf":"markdown","cfe3187b":"markdown","476d8fa3":"markdown","f69f6b76":"markdown","f741cbae":"markdown","b4a3d549":"markdown","c979fcad":"markdown","17e32956":"markdown","6af66c9c":"markdown","4ff29aa1":"markdown","80b98d80":"markdown","c033aa5a":"markdown","85f8aa14":"markdown","a4da480c":"markdown","3d402959":"markdown","4a40156e":"markdown","9e037f41":"markdown"},"source":{"e920a941":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","f1b92f6d":"import warnings \nwarnings.filterwarnings('ignore')","1c7c3569":"train = pd.read_csv(\"\/kaggle\/input\/titanic\/train.csv\")\ntest = pd.read_csv(\"\/kaggle\/input\/titanic\/test.csv\")","f393bd89":"data = train.copy()\ndata_test = test.copy()","316ab795":"feature_info = {'Survival_0':'\u00d6ld\u00fc',\n               'Survival_1':'Kurtuldu',\n               'Fare':'Yolcu \u00dccreti',\n               'Embarked':'Bindirme Limanlar\u0131',\n               'Parch':'Cocuklar\u0131n Say\u0131s\u0131',\n               'sibsp':'Karde\u015flerin Say\u0131s\u0131',\n                'Pclass':'Bilet S\u0131n\u0131f\u0131'\n               }\n\nkeys = list(feature_info.keys())\nvalues = list(feature_info.values())\n\nfor i,j in zip(keys,values):\n    print(i, \":\", j)","50a7c2d3":"types = ['object','float','integer','bool']\n\nfor i in types:\n    print(i + \" De\u011fi\u015fkenler:\",\"\\n\", \"De\u011fi\u015fken Say\u0131s\u0131:\",\n         len(data.select_dtypes(i).columns), \"\\n\", \n          data.select_dtypes(i).columns.tolist(), \"\\n\")","811d9fc0":"data.head()","9511c606":"print(f\"Train Shape:{data.shape}\\nTest Shape:{data_test.shape}\")","3a7fa30d":"data.Survived.value_counts() \/ data.shape[0]","3150d210":"data.info()","28e09b6e":"#1. Yol\n\nlist(data.dtypes[data.dtypes == 'object'].index)\n\n#Veya a\u015fa\u011f\u0131daki gibi de yazabiliriz \n\n#data.dtypes[data.dtypes == 'object'].index.tolist()","051cbc90":"# 2. Yol\n\nobject_cols = (data.dtypes == 'object')\n\nobject_cols = list(object_cols[object_cols].index)\n\nobject_cols","b8e37cdc":"# 3. Yol : List Comprehension\n\n[cols for cols in data.columns if data[cols].dtypes == 'object']","a4a1a94e":"# 1- unique() kullanarak:\n\n[cols for cols in data.columns if len(data[cols].unique()) < 10]","cba5e08d":"# 2- nunique() kullanarak:\n\ncat_cols = [cols for cols in data.columns if data[cols].nunique() < 10]\n\ncat_cols","035c663d":"import seaborn as sns\nimport matplotlib.pyplot as plt\n\n\ndef cate_features(df,number,plot = False):\n    \n    cat_cols = [cols for cols in df.columns if df[cols].nunique() < int(number)]\n    \n    for cols in cat_cols:\n        \n        data_new = pd.DataFrame({cols : df[cols].value_counts(),\n                            'Oran':np.divide(df[cols].value_counts() ,len(df))})\n    \n        print(data_new, end = \"\\n\\n\\n\\n\")\n        \n        if plot: #True ise g\u00f6rselle\u015ftir.\n            \n            sns.countplot(x=cols, data=df)\n            \n            plt.show()\n    \n      \ncate_features(df = data, number = 10, plot=True)","7231648b":"def categories_summary(df, number_features):\n    \n    cat_cols = [cols for cols in df.columns if df[cols].nunique() < int(number_features)]\n    \n    variable_count = 0 # Kategorik De\u011fi\u015fkenleri sayar\n    more_class = []    # Belirledi\u011fimiz rakamdan fazla benzersiz verileri olan de\u011fi\u015fkenleri tutaca\u011f\u0131z.\n   \n    for col in df:\n        \n        if col in cat_cols:\n            \n            print(f\"##########################################\")\n            print(pd.DataFrame({col:df[col].value_counts(),\n                                    'Oran':df[col].value_counts() \/ len(df)}),\n                 end = \"\\n\\n\\n\")\n            variable_count +=1     \n        else:\n            \n            more_class.append(df[col].name) #De\u011fi\u015fken ismini al\u0131r(Columm Name)\n    \n    print(f\"Belirlenen Kategorik De\u011fi\u015fken Say\u0131s\u0131 = {variable_count}\")\n    print(f\"Belirledi\u011fimiz Say\u0131dan Y\u00fcksek Benzersiz Veriye Sahip De\u011fi\u015fkenler = {more_class}\")\n        \n    \ncategories_summary(data,number_features = 10)","54b968d3":"data.describe().T","d9612fd3":"data.describe([0.01, 0.10, 0.80, 0.90, 0.95, 0.99]).T","78f2f104":"numeric_cols = [cols for cols in data.columns if data[cols].dtypes != 'object' ]\n\nnumeric_cols","17974792":"numeric_cols = [cols for cols in data.columns if data[cols].dtypes != 'object'\n               and cols not in 'Survived'\n               and cols not in 'PassengerId']\n\nnumeric_cols","eb703439":"def NumHist(df,plot = False):\n    \n    num_cols = [cols for cols in data.columns if df[cols].dtypes != 'object'\n               and cols not in 'Survived'\n               and cols not in 'PassengerId'] #Numeric de\u011fi\u015fkenleri ald\u0131k.\n    \n    for cols in num_cols: \n        \n        if plot: \n            \n            print(f\"################## {cols} ############################\")\n        \n            df[cols].hist()\n            plt.show() #Bu komut sayesinde t\u00fcm bir \u00f6nceki histogram komutunu ekrana basar.\n        \nNumHist(data, plot = True)","089865f3":"data.groupby('Sex')['Survived'].mean()","198a1e22":"data.groupby('Sex')['Survived'].value_counts()","880dd195":"def Cate_Target(df,number,hedef = 'Survived'):\n    \n    cat_cols = [cols for cols in data.columns if df[cols].nunique() < int(number)\n               and cols not in hedef]\n    \n    for cat in cat_cols:\n        \n        dataNew = pd.DataFrame({'Hedef Oran':df.groupby(cat)[hedef].mean()})\n        \n        print(dataNew, end = \"\\n\\n\")\n        print(\"#################################\")\n\nCate_Target(data,number=10)","d9a125d1":"cat_cols = [cols for cols in data.columns if data[cols].nunique() < 10 \n           and cols not in 'Survived']\n\nfor cols in cat_cols:\n    \n    data_new = pd.DataFrame({'Counts':data.groupby(cols)['Survived'].value_counts()})\n    \n    print(\"######################################\")\n    print(data_new)\n    \n","80ca1d74":"numeric_cols = [cols for cols in data.columns if data[cols].dtypes != 'object'\n               and cols not in 'Survived']\n\nnumeric_cols","80cffe39":"data.groupby(\"Survived\").agg({\"Fare\": \"mean\" , \"Age\":\"min\", \"SibSp\":\"max\"})","8720436d":"data.corr()","2f3f7ef2":"sns.heatmap(data.corr(),annot= True );","bcfe0287":"data.isnull().values.any()","11ca3dd2":"data.isnull().any()","2d1479a6":"data.isnull().sum()","ece628a2":"data.columns[data.isnull().any()]","6450b2fd":"data.isnull().sum().sum()","9e068344":"#1. Yol : Normal For d\u00f6ng\u00fcs\u00fc ile alma.\n\nmiss = []\n\nfor cols in data.columns:\n    \n    if data[cols].isnull().any(): #True d\u00f6nece\u011finden a\u015fa\u011f\u0131a inip oradaki kodu \u00e7al\u0131\u015ft\u0131r\u0131r.\n        \n        miss.append(cols)\n        \nmiss","d94a1e2f":"#2. Yol : List Comprehension kullanarak alma.\n\nmissing_cols = [cols for cols in data.columns if data[cols].isnull().any()]\n\nmissing_cols","1508a948":"# 3. Yol : \n\ndata.columns[data.isnull().any()].tolist()","10d0f60d":"import seaborn as sns\n\ndef miss_value(df, plot = False ): \n    \n    miss = pd.DataFrame({'Num_missing':df.isnull().sum(),\n                       'Missing Ratio': np.divide(df.isnull().sum(), df.shape[0])}).sort_values(\"Num_missing\", ascending = False )\n                        \n    miss['Datatypes'] = df[miss.index].dtypes.values\n    \n    miss = miss[miss['Num_missing'] >  0 ].reset_index().rename({'index':'Feature'}, axis = 1)\n    \n    print(f\"Number of Missing Features : {len(miss['Feature'])}\")\n    \n    if plot: #Bu \u015fekilde True anlam\u0131na geliyor.\n        \n        sns.barplot(x = miss['Feature'], y = miss['Missing Ratio'])\n        \n    return miss\n                \n\nmiss_value(data,plot = True)","1aa143a9":"data[data.isnull().any(axis=1)]","4110da00":"data.notnull().all()","7abab088":"data[data.notnull().all(axis=1)]","de60cff7":"class AgeCount():\n    \n    def __init__(self,value,df):\n        \n        self.value = value \n        self.df = df\n        \n    def AgeBack(self):\n        \n        back_count = int(self.df['Age'].describe()[0]) - self.df['Age'].gt(self.value).sum()\n        \n        back_cache = {'Person Number':back_count}\n        \n        return back_cache\n    \n    def AgeForward(self):\n        \n        for_count = self.df['Age'].gt(self.value).sum()\n        \n        for_cache = {'Person Number':for_count}\n        \n        return for_cache","181f990b":"ky_age = AgeCount(30,data)\n\nky_age.AgeForward()","8fd9ddb7":"ky_age.AgeBack()","2cb5433e":"data['New_Name'] = data['Name'].str.extract('([A-Za-z]+)\\.', expand = False)\n\ndata.head(n=8)","c56d429e":"#New_Name de\u011fi\u015fkeninde ki de\u011ferlerin Age ortalamalar\u0131\n\ndata.groupby('New_Name')['Age'].mean()","07a8bd75":"data.groupby('New_Name')['Age'].transform('mean')","9ce010aa":"data['Age'] = data['Age'].fillna(data.groupby('New_Name')['Age'].transform('mean'))","dd4e6647":"data['Age'].isnull().any()","a822d667":"#1. Yol Mode alarakta yapabiliriz\n\ndata['Embarked'].mode()[0]","246040e4":"from sklearn.impute import SimpleImputer\n\ndef category_counts(cols):\n    \n    imputer = SimpleImputer(missing_values = np.nan, strategy = 'most_frequent')\n    \n    data[cols] = imputer.fit_transform(data[[cols]])\n    \n    return data[cols].describe()[0]\n\ncategory_counts('Embarked')","68e5f7da":"data['Embarked'].isnull().any()","758af8c9":"data['Age'][data['New_Name'] == 'Dr']","d17fcfcb":"data['Age'][data['New_Name'] == 'Dr'].mean()","f8834ed3":"data['Survived'][data['New_Name'] == 'Dr'].value_counts()","b838cc6e":"data.loc[(data['Age'] < 18), 'New_Age_Count'] = \"Young\" #New_Age_Count de\u011fi\u015fkeni i\u00e7in , Age de\u011feri 18 den k\u00fc\u00e7\u00fck de\u011ferler i\u00e7in \"YOUNG\" de\u011feri elde ettik\n\ndata.loc[(data['Age'] >= 18) & (data['Age'] < 55 ), 'New_Age_Count'] = \"Mature\" #New_Age_Count de\u011fi\u015fkeni i\u00e7in , Age de\u011feri 18den b\u00fcy\u00fck 55 den k\u00fc\u00e7\u00fck de\u011ferler i\u00e7in \"MATURE\" de\u011feri elde ettik\n\ndata.loc[(data['Age'] >= 55 ), 'New_Age_Count'] = 'Old' #New_Age_Count de\u011fi\u015fkeni i\u00e7in , Age de\u011feri 55 den b\u00fcy\u00fck de\u011ferler i\u00e7in \"OLD\" de\u011feri elde ettik\n\ndata.head(n=8)","95f0bca7":"data['Age'][data['New_Age_Count'] == 'Young'].value_counts()","3ac5b2ba":"data['Survived'][data['New_Age_Count'] == 'Young'].value_counts()","de854cb0":"data.loc[((data['SibSp'] + data['Parch']) > 0  ), 'Alone'] = 0 \ndata.loc[((data['SibSp'] + data['Parch']) == 0 ), 'Alone'] = 1\n\ndata.head(n=8)","832fe816":"data['Fare_0'] = np.where(data['Fare'] < 1, 1, 0)\n\ndata.head(n=8)","9669285b":"print(data['Fare'][data['Fare_0'] == 1], end = \"\\n\\n\")\nprint(f\"Fare de\u011fi\u015fkenin de 0 olan g\u00f6zlemlerin say\u0131s\u0131 : {len(data['Fare'][data['Fare_0'] == 1])}\")","74c5b4e1":"import seaborn as sns\nimport matplotlib.pyplot as plt","f318eb61":"sns.distplot(data.Fare,bins=20);","f6c39164":"sns.catplot(x='Pclass',y='Fare',data=data);\nsns.catplot(x='Survived',y='Fare',data=data);","7184525b":"sns.catplot(x='Pclass',y='Fare',hue='Survived',data=data);","c5ea5e91":"sns.countplot(data['Pclass']);\nprint(f\"Most Used Value: {data.Pclass.mode()[0]}\")","77092c7b":"sns.countplot(data['Survived']);\nprint(f\"Most Used Value: {data.Survived.mode()[0]}\")","0d363bab":"fig, ax = plt.subplots(1,2,figsize=(12,8))\n\nax[0].set_title('of siblings-spouses aboard')\nsns.countplot(data['SibSp'],ax=ax[0]);\nax[1].set_title('Children Number')\nsns.countplot(data['Parch'],ax=ax[1]);","48945081":"sns.catplot(x='Parch',y='Fare',hue='Pclass',data=data);","3f63a5e4":"sns.countplot(data['Embarked']);","6657549d":"def Percentage(top,ort):\n    \n    result = 0\n    y = 0\n    y = np.divide(100,top)\n    result = np.multiply(y,ort)\n    \n    return f\"Percentage : {int(result)}\"","f5d50ae8":"def Percentage_2(x,y):\n    \n    toplam = 0\n    z = 0\n    result = 0\n    \n    toplam = np.add(x,y)\n    \n    z = np.divide(100,toplam)\n    \n    result = np.multiply(z,y)\n    \n    return f\"Percentage : {int(result)}\"\n     ","d769fac1":"embark_fare = data.groupby('Embarked')['Fare'].mean()\nprint(f\"Passenger Price Mean:{data.Fare.mean()}\\n{embark_fare}\")","7837c3f7":"#limanlara g\u00f6re \u00f6l\u00fcm oran\u0131 \n\nprint(f\"C : {Percentage(168,75)}\\nQ : {Percentage(77,47)}\\nS : {Percentage(646,427)}\")","f83842d2":"#Bilet s\u0131n\u0131f\u0131na g\u00f6re \u00f6l\u00fcm oranlar\u0131 \n\nprint(f\"Class 1 : {Percentage_2(136,80)}\\nClass 2 : {Percentage_2(87,97)}\\nClass 3 : {Percentage_2(119,372)}\")","c8d17648":"sns.catplot(x='Embarked',y='Fare',hue='Survived',data=data);","f593ce9c":"Pclass_Fare = data.groupby('Pclass')['Fare'].mean()\n\nPclass_Fare","500b8abc":"Pclass_sur = data.groupby('Pclass')['Survived'].value_counts()\n\npd.DataFrame(Pclass_sur)","f771a21c":"sns.countplot(data['Sex']);","90167478":"male  = data['Sex'].value_counts()[0]\nfemale = data['Sex'].value_counts()[1]\n\nprint(f\"Male:{male}\\nFemale:{female}\")","eec74a3b":"data['Sex'].value_counts().count()","557b5def":"[cols for cols in data.columns if data[cols].dtypes == 'object'\n               and len(data[cols].value_counts()) == 2]","726aaf65":"from sklearn.preprocessing import LabelEncoder\n\nlab_enc = LabelEncoder()\n\ndef Label(df):\n    \n    cat_cols = [cols for cols in data.columns if df[cols].dtypes == 'object'\n               and len(df[cols].value_counts()) == 2]\n    \n    for cols in cat_cols:\n        \n        df[cols] = lab_enc.fit_transform(df[cols])\n    \n    return df.head(n=8) \n\nLabel(data)   ","b0126b0b":"from sklearn.preprocessing import LabelEncoder\n\nlab_enc = LabelEncoder()\n\ndata['Cabin'] = lab_enc.fit_transform(data['Cabin'])\n\ndata.head()","2fd50de7":"pd.get_dummies(data, columns = [\"Embarked\"]).head()","9e4f8a4d":"pd.get_dummies(data, columns = ['Embarked'], prefix = \"E\" , drop_first= True).head()","a99c7a80":"data.head(n=8)","4162aad1":"pd.get_dummies(data,columns=[\"Embarked\"],drop_first = True,dummy_na = False).head(n=8)","7c147007":"[cols for cols in data.columns if data[cols].dtypes == 'object'\n               and len(data[cols].value_counts()) < 10]","c0edca2c":"[cols for cols in data.columns if data[cols].dtype != 'object']","862e3f30":"[cols for cols in data.columns if data[cols].dtypes != 'object'\nand data[cols].value_counts().count() < 10]","c0a2f7fe":"def OneHot(df, number, drop_first = False):\n    \n    cat_cols = [cols for cols in data.columns if data[cols].dtypes == 'object'\n               and len(data[cols].value_counts()) < int(number)] # data[cols].value_counts().count() < 10 da yazabilirdik.\n    \n    df = pd.get_dummies(df, columns = cat_cols, drop_first = drop_first)\n    \n    return df\n\nOneHot(data, number=10, drop_first = True) #datam\u0131za e\u015fitlemezsek i\u015flemler datam\u0131z \u00fczerinde kay\u0131tl\u0131 olmuyor.   ","2bd6488a":"data = OneHot(data,number=10, drop_first=True)","9800c627":"data.head(n=8)","930d1bb3":"cols = ['Pclass','New_Name']\n\ndata = pd.get_dummies(data, columns = cols , drop_first = True)\n\ndata.head()","d0f06b37":"num_cols = [cols for cols in data.columns if data[cols].dtypes != 'object'\n           and cols not in 'Survived']\n\nnum_cols","0bd1bb8f":"import seaborn as sns\nimport matplotlib.pyplot as plt \n\nsns.boxplot(data['PassengerId']);","e123714a":"def box_num(df, plot=False):\n    \n    num_cols = [cols for cols in data.columns if data[cols].dtype != 'object'\n               and cols not in 'Survived'\n               and cols not in 'PassengerId']\n    \n    for cols in num_cols:\n        \n        if plot:\n            sns.boxplot(df[cols]);\n            plt.show()\n                \n\nbox_num(data, plot = True)","0d8c3869":"def Outliers_Thres(df,cols):\n    \n    Q1 = df[cols].quantile(0.25)\n    Q3 = df[cols].quantile(0.75)\n    \n    IQR = np.multiply(1.5, np.subtract(Q3, Q1))\n    \n    alt_s\u0131n\u0131r = Q1 - IQR\n    \u00fcst_s\u0131n\u0131r = Q3 + IQR\n    \n    #cache = {'alt_s\u0131n\u0131r':alt_s\u0131n\u0131r,'\u00fcst_s\u0131n\u0131r':\u00fcst_s\u0131n\u0131r}\n    \n    return alt_s\u0131n\u0131r, \u00fcst_s\u0131n\u0131r #fonksiyonumuz alt_s\u0131n\u0131r ve \u00fcst_s\u0131n\u0131r return ediyor\n  \nOutliers_Thres(data, cols = 'Age')    ","c232f1f3":"alt, \u00fcst = Outliers_Thres(data, cols = 'Age') \n\nprint(f\"Alt E\u015fik De\u011feri = {alt}\\n\u00dcst E\u015fik De\u011feri = {\u00fcst}\")","fb0272ac":"def Outliers_Feature(df, cols):\n    \n    value = []\n       \n    alt_e\u015fik, \u00fcst_e\u015fik = Outliers_Thres(df, cols)\n    \n    if df[(df[cols] < alt_e\u015fik) | (df[cols] > \u00fcst_e\u015fik)].any(axis=None):\n        \n        value.append(\"Yes\")\n    else:\n        value.append(\"No\")\n  \n    return value\n\nOutliers_Feature(data, 'Age') ","1ea5cccb":"num_cols = [cols for cols in data.columns if data[cols].dtype != 'object'\nand cols not in 'Survived'\nand cols not in 'PassengerId']\n\nnum_cols","d3fb9420":"def Auto_Outliers(df, columns):\n    \n    True_feature = [] #Ayk\u0131r\u0131 G\u00f6zlemi olan De\u011fi\u015fkenleri tutacak\n    \n    False_feature = [] #Ayk\u0131r\u0131 G\u00f6zlem olmayan De\u011fi\u015fkenleri tutacak\n    \n    for cols in columns:\n        \n        value = Outliers_Feature(df,cols) #Bir \u00f6nceki fonskiyonumuzu kullan\u0131yoruz\n        \n        for i in value:\n            \n            if i.startswith(\"Y\"):\n                \n                True_feature.append(cols)\n            else:\n                False_feature.append(cols)\n                  \n    print(f\"Ayk\u0131r\u0131 G\u00f6zlem olan De\u011fi\u015fkenler = {True_feature}\\nToplam Ayk\u0131r\u0131 G\u00f6zlem De\u011fi\u015fken Say\u0131s\u0131 = {len(True_feature)}\", end = \"\\n\")\n    print(f\"Ayk\u0131r\u0131 G\u00f6zlem olmayan De\u011fi\u015fkenler = {False_feature}\\nToplam Ayk\u0131r\u0131 G\u00f6zlem Olmayan De\u011fi\u015fken Say\u0131s\u0131 = {len(False_feature)}\", end = \"\\n\") \n             \nAuto_Outliers(data, num_cols)    ","c967bd0d":"Outliers_Thres(data, 'Age')","7ea6fc05":"data[(data['Age'] < alt) | (data['Age'] > \u00fcst)]","1d5a33d1":"data[~((data['Age'] < alt) | (data['Age'] > \u00fcst))]","4b7cf745":"data['Age'][(data['Age'] < alt) | (data['Age'] > \u00fcst)]","b0966f6d":"data['Age'][~((data['Age'] < alt) | (data['Age'] > \u00fcst))]","85795eff":"def Auto_Outliers(df, columns):\n    \n    True_feature = [] #Ayk\u0131r\u0131 G\u00f6zlemi olan De\u011fi\u015fkenleri tutacak\n    \n    False_feature = [] #Ayk\u0131r\u0131 G\u00f6zlem olmayan De\u011fi\u015fkenleri tutacak\n    \n    number_cols = [] #De\u011fi\u015fkenlerin Toplam Ayk\u0131r\u0131 G\u00f6zlem Say\u0131lar\u0131n\u0131 tutacak\n       \n    for cols in columns:\n        \n        alt ,\u00fcst = Outliers_Thres(df, cols) #alt_e\u015fik ve \u00fcst_e\u015fik de\u011ferlerini veren fonskiyon\n        \n        value = Outliers_Feature(df,cols) #Ayk\u0131r\u0131 G\u00f6zlem kontrol\u00fc yapan fonskiyon\n        \n        for i in value:\n            \n            if i.startswith(\"Y\"):\n                \n                True_feature.append(cols)\n                \n                number = df[cols][(df[cols] < alt) | (df[cols] > \u00fcst)].value_counts().count()\n                \n                number_cols.append((cols,number)) #List i\u00e7erisine tupple \u015feklinde 2 de\u011fer ekleyebiliyoruz.\n                \n            else:\n                False_feature.append(cols)  \n                  \n    print(f\"Ayk\u0131r\u0131 G\u00f6zlem olan De\u011fi\u015fkenler = {True_feature}\\nToplam Ayk\u0131r\u0131 G\u00f6zlem De\u011fi\u015fken Say\u0131s\u0131 = {len(True_feature)}\", end = \"\\n\")\n    print(f\"Ayk\u0131r\u0131 G\u00f6zlem olmayan De\u011fi\u015fkenler = {False_feature}\\nToplam Ayk\u0131r\u0131 G\u00f6zlem Olmayan De\u011fi\u015fken Say\u0131s\u0131 = {len(False_feature)}\", end = \"\\n\") \n    \n    for i,j in number_cols: #number_cols listemizde tupple olarak 2 de\u011ferler oldu\u011fu i\u00e7in i,j ile o 2 de\u011ferleri al\u0131yoruz.\n        \n        print(\"###################################\",end = \"\\n\")\n        print(f\"\\nDe\u011fi\u015fken : {i}\\nToplam Ayk\u0131r\u0131 De\u011fer Say\u0131s\u0131 : {j}\",end = \"\\n\\n\")\n        \n        \n    \nAuto_Outliers(data, num_cols)","f35e52bb":"sns.boxplot(data=data['SibSp']);","79e673e0":"data['SibSp'].value_counts()","d72e6e21":"out_feature = ['Age','Fare']\n\nfor feature in out_feature:\n    \n    print(f\"{feature} : {Outliers_Thres(data, cols = feature)}\")  #Outliers_Thres fonskiyonumuz ile alt ve \u00fcst e\u015fik de\u011ferleri elde ediyoruz.","0d9a21a5":"alt, \u00fcst = Outliers_Thres(data,'Age') \nprint(alt,\u00fcst)","433778fa":"data['Age'][data['Age'] < alt]","a5d39c96":"\u00fcst_de\u011fer = data['Age'][data['Age'] > \u00fcst]\n\n\u00fcst_de\u011fer","98f1878b":"def low_up_outliers(df,feature, plot = False):\n    \n    for cols in feature:\n        \n        alt_e\u015fik , \u00fcst_e\u015fik = Outliers_Thres(df, cols=cols) #alt ve \u00fcst e\u015fik de\u011feri belirleyen fonskiyon\n        \n        alt = df[cols][df[cols] < alt_e\u015fik]\n        \n        \u00fcst = df[cols][df[cols] > \u00fcst_e\u015fik]\n        \n        if plot:\n            \n            print(f\"################### {cols} #################\")\n            sns.boxplot(df[cols])\n            plt.show()\n        \n        print(pd.DataFrame({'De\u011fi\u015fken':cols,\n                           'Toplam Alt Ayk\u0131r\u0131 De\u011fer':alt.shape,\n                           'Toplam \u00dcst Ayk\u0131r\u0131 De\u011fer':\u00fcst.shape\n                           }), end = \"\\n\\n\")\n\n        \nfeature = ['Age','Fare']\nlow_up_outliers(data, feature, plot = True)","e023ee6e":"def press_outliers(df, features,plot = False):\n    \n    for cols in features:\n        \n        alt_e\u015fik,\u00fcst_e\u015fik = Outliers_Thres(df, cols=cols) #alt ve \u00fcst e\u015fik de\u011ferleri belirledi\u011fimiz fonskiyon\n        \n        df[cols][df[cols] > \u00fcst_e\u015fik] = \u00fcst_e\u015fik\n        \n        if cols.startswith('A'): #Age de\u011fi\u015fkenini alt ayk\u0131r\u0131 de\u011ferine bask\u0131lad\u0131k.Fare De\u011fi\u015fkenini bask\u0131lamad\u0131k !!!\n            \n            df[cols][df[cols] < alt_e\u015fik] = alt_e\u015fik\n        \n        if plot:\n            \n            print(f\"################# {cols} ###################\")\n            sns.boxplot(df[cols])\n            plt.show()\n        \n        print(pd.DataFrame({'De\u011fi\u015fken' : cols,\n                           'Toplam Alt': df[cols][df[cols] < alt_e\u015fik].shape,\n                           'Toplam \u00dcst': df[cols][df[cols] > \u00fcst_e\u015fik].shape\n                           }), end=\" \\n\\n\")\n        \n        \nfeatures = ['Age','Fare']   \n\npress_outliers(data,features, plot = True)                ","cc720ed7":"data.head()","4fa25268":"drop_features = ['PassengerId','Name','Ticket']\n\ndata = data.drop(drop_features, axis=1)\n\ndata.head()","aa421845":"survived = data['Survived']\n\nsurvived","e29dccd0":"data = data.drop('Survived', axis=1)\n\ndata.head()","ea5304d9":"test.head()","367a893c":"test['New_Name'] = test['Name'].str.extract('([A-Zaz]+)\\.', expand = False)\n\ntest.head()","cb2ba2f4":"from sklearn.model_selection import train_test_split\n\ndef Train_Test(data_x, data_y, size ):\n    \n    x_train,x_test,y_train,y_test = train_test_split(data_x, data_y, test_size = size, random_state = 18)\n    \n    print(f\"X_train:{x_train.shape}\\nX_Test:{x_test.shape}\\nY_train:{y_train.shape}\\nY_test:{y_test.shape}\")\n    \n    cache = {'x_train':x_train,\n             'x_test':x_test,\n             'y_train':y_train,\n             'y_test':y_test}\n    \n    return cache\n\ncache = Train_Test(data,survived,size=0.33)","6b272b47":"x_train,x_test,y_train,y_test = cache['x_train'],cache['x_test'],cache['y_train'],cache['y_test']","c9dc1bf1":"x_train","b1e4ddf0":"y_train","269252de":"from sklearn.preprocessing import MinMaxScaler\n\ndef MinMax(x_train, x_test,feature):\n    \n    scaler = MinMaxScaler()\n    \n    for cols in feature:\n        \n        x_train[cols] = scaler.fit_transform(x_train[[cols]])\n        x_test[cols] = scaler.fit_transform(x_test[[cols]])\n        \n    cache_scaler = {'x_train':x_train,\n                    'x_test':x_test\n                   }\n\n    return cache_scaler\n    \nfeatures = ['Age','Fare']\n\ncache_scaler = MinMax(x_train,x_test,features)","f16b37cd":"x_train, x_test = cache_scaler['x_train'],cache_scaler['x_test']","473b5f17":"x_train","d32e2d19":"x_test","7fd14d44":"from sklearn.linear_model import LogisticRegression\nfrom sklearn.svm import SVC\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.ensemble import GradientBoostingClassifier\nfrom xgboost import XGBClassifier\nfrom sklearn.model_selection import cross_val_score","7f3bf9d3":"models = [('LR',LogisticRegression()),\n         ('SVC',SVC()),\n         ('DTC',DecisionTreeClassifier()),\n         ('KNN',KNeighborsClassifier()),\n         ('RF',RandomForestClassifier()),\n         ('GB',GradientBoostingClassifier()),\n         ('XGB',XGBClassifier())]\n\ndef Model(data_x, data_y, cv):\n    \n    scores = []\n    \n    names = []\n    \n    for name,model in models:\n        \n        cross = cross_val_score(model, data_x, data_y, cv=cv, scoring = 'accuracy')\n        \n        scores.append((name,cross.mean()))\n        \n    return scores\n    \n    \nModel(x_train,y_train,cv=10) ","cf07d851":"gbc_model = GradientBoostingClassifier()\n\ngbc_model.fit(x_train,y_train)","9f56bd02":"from sklearn.model_selection import GridSearchCV\n\ndef GridSearch(data_x, data_y, model, params, cv):\n    \n    grid_search = GridSearchCV(estimator = model, param_grid = params, cv=cv) #GridSearchCV modelimizi olu\u015fturuyoruz.\n    \n    grid_search.fit(data_x,data_y) #GridSearchCV modelimizi fit ediyoruz\n    \n    best_params = grid_search.best_params_ #Modelimiz i\u00e7in en iyi parametreleri alaca\u011f\u0131z\n    \n    return best_params\n\ngbc_params = {'learning_rate':[0.001,0.01,0.1,0.5], #Modelimiz i\u00e7in en iyi parametreleri bulmas\u0131n\u0131 istedi\u011fimiz parametre de\u011ferleri\n              'max_depth':[2,6,8,10],\n              'min_samples_split':[2,6,8,10]}\n\nGridSearch(x_train, y_train, model = gbc_model, params = gbc_params, cv=10)","d7c6e093":"def Model_Tuned(data_x, data_y, data_test, l_rate, m_depth, ms_split):\n    \n    gbc_tuned = GradientBoostingClassifier(learning_rate=l_rate, max_depth= m_depth, min_samples_split = ms_split)\n    \n    gbc_tuned.fit(data_x, data_y)\n    \n    y_pred = gbc_tuned.predict(data_test)\n    \n    cache_tuned = {'y_pred':y_pred}\n    \n    return cache_tuned\n\ncache_tuned = Model_Tuned(x_train, y_train, x_test, l_rate=0.1, m_depth =2, ms_split= 10)","ea997bda":"y_pred = cache_tuned['y_pred']\ny_pred","90df67e9":"from sklearn.metrics import classification_report \n\nprint(classification_report(y_pred, y_test))","1dd4b0de":"- **GradientBoostingClassifier** modelimiz i\u00e7in en iyi parametrelerini bularak o parametreler ile yeni bir **GradientBoostingClassifier** modeli olu\u015fturaca\u011f\u0131z\n\n- Modelimiz i\u00e7in en iyi parametreleri denemesini istedi\u011fimiz parametre de\u011ferlerini modele verece\u011fiz o da modelimiz i\u00e7in en iyi de\u011ferleri bize verecek.\n\n- Bu de\u011ferler ile yeni bir **GradientBoostingClassifier** modeli elde edece\u011fiz","7175589f":"- **Fare** ve **Age** de\u011fi\u015fkenlerimizin **Ayk\u0131r\u0131 De\u011ferlerinin** fazla oldu\u011funu g\u00f6r\u00fcyoruz.\n\n- Ayk\u0131r\u0131 de\u011ferler i\u00e7in e\u015fik de\u011ferleri belirleyen fonskiyon yazal\u0131m.","d64f183f":"- Sosya-Ekonomik durumu iyi olan insanlardan sadece biri 4 \u00e7ocuk sahibi.O da 250 civar\u0131 \u00fccret \u00f6demi\u015f bu de\u011fer de \u00d6denen en y\u00fcksek bilet fiyat\u0131n\u0131n yar\u0131s\u0131","564af46a":"- Survived de\u011fi\u015fkenimizi datam\u0131zdan c\u0131kar\u0131yoruz.B\u00f6ylelikle **Ba\u011f\u0131ms\u0131z De\u011fi\u015fkenimizi** de elde etmi\u015f oluyoruz.","3430674e":"- **Say\u0131sal De\u011fi\u015fkenimizin**, **Boxplot**'unu \u00e7izdiren fonksiyon yazal\u0131m.","b45a2601":"- Datam\u0131zda ki **New_Name** de\u011fi\u015fkeninde ki **Dr** de\u011ferlerinin ya\u015f de\u011ferlerini ald\u0131k","97d3ed67":"- **Ayk\u0131r\u0131 De\u011ferlerimiz** i\u00e7in ;\n\n  - **Alt Ayk\u0131r\u0131 De\u011ferler** i\u00e7in alt ayk\u0131r\u0131 de\u011fere bask\u0131layaca\u011f\u0131z.\n  - **\u00dcst Ayk\u0131r\u0131 De\u011ferler** i\u00e7in \u00fcst ayk\u0131r\u0131 de\u011fere bask\u0131layaca\u011f\u0131z.\n  \n- De\u011fi\u015fkenlerimiz i\u00e7in Ayk\u0131r\u0131 De\u011fer Hesaplayan,\n- Ayk\u0131r\u0131 de\u011ferleri alt ve \u00fcst de\u011ferlere g\u00f6re bask\u0131layan bir fonksiyon yazaca\u011f\u0131z.\n- **Fare** de\u011fi\u015fkenimizin **alt e\u015fik de\u011feri alt\u0131nda kalan ayk\u0131r\u0131 de\u011feri olmad\u0131\u011f\u0131** i\u00e7in **Fare de\u011fi\u015fkenimizi alt ayk\u0131r\u0131 de\u011ferine bask\u0131lamayaca\u011f\u0131z**.\n- O y\u00fczden fonskiyonumuzda bir **if ko\u015fulu** koyduk.\n- Fonskiyonmuz en son bize de\u011fi\u015fkenlerdeki **toplam ayk\u0131r\u0131 de\u011ferleri** verecek.\n- Ve En sonunda **Ayk\u0131r\u0131 De\u011fi\u015fkenlere** sahip de\u011fi\u015fkenlerimizin alt ve \u00fcst e\u015fik de\u011ferlerine bask\u0131lad\u0131ktan sonra ki boxplotunu \u00e7izdirecek.","56b4d23e":"- **Alt E\u015fik** ve **\u00dcst E\u015fik** de\u011ferlerini elde etti\u011fimiz fonksiyonumuz ile **Age** de\u011fi\u015fkenin alt ve \u00fcst e\u015fik de\u011ferlerini buluyoruz.","0c42277c":"- **Age** de\u011fi\u015fkenimizde ki de\u011ferlere g\u00f6re **Young, Mature ve Old** de\u011ferleri olu\u015fturduk.\n- Bu de\u011ferlerle **New_Age_Count** adl\u0131 yeni de\u011fi\u015fken olu\u015fturduk.","00688714":"- S\u0131n\u0131fland\u0131rma Algoritmalar\u0131m\u0131z kullanarak modelimiz i\u00e7in en iyi algoritmay\u0131 bulaca\u011f\u0131z.\n- T\u00fcm Algortimalar\u0131 fit eden ve score elde eden ve bu scorelar\u0131 bize vereb fonksiyon yazal\u0131m\n","843839f7":"- **Fare** de\u011fi\u015fkenindeki de\u011fere g\u00f6re **Fare_0** de\u011fi\u015fkeni elde ediyoruz.\n- **Fare** de\u011fi\u015fkenindeki de\u011fer 1'den k\u00fc\u00e7\u00fck ise **Fare_0** de\u011fi\u015fkenin de 1 olsun dedik, de\u011fil ise 0 olsun dedik.\n- Yani b\u00f6ylelikle \u00fccret \u00f6deyen ve \u00f6demeyen olarak s\u0131n\u0131fland\u0131rm\u0131\u015f olduk.","49dc3eac":"- Olusturdu\u011fumuz train ve test datalar\u0131m\u0131z\u0131 alal\u0131m","df9373dd":"- 0  ve 1 i\u00e7in \u00f6l\u00fcm oran\u0131 hesaplamak i\u00e7in ortalama alan fonskiyon yazal\u0131m","346d6fed":"- **GradientBoostingClassifier** modelimiz i\u00e7in en iyi parametrelerini bularak o parametreler ile yeni bir **GradientBoostingClassifier** modeli olu\u015fturaca\u011f\u0131z","d28089db":"# Data Preprocessing ","2789bde2":"- **Dr** \u00fcnvan\u0131na sahp ki\u015filerin **Survived** say\u0131lar\u0131na bakal\u0131m.","75bee948":"- Bu numeric de\u011fi\u015fkenlerimizin **Histogram Grafi\u011fini** \u00e7izdirelim","dda3f59a":"- In general,have high social-economics values people is survived\n- People is survived that pay high passengers price","a405e172":"- **Say\u0131sal De\u011fi\u015fkenlerimizin**, birbiri aras\u0131nda ki **Korelasyon**'ununa bakal\u0131m","76ff6d5d":"- \u0130stersek **Dr** de\u011ferlerinin **Age** ortalamalar\u0131n\u0131 da alal\u0131m","0ff9af8f":"- Kategorik De\u011fi\u015fkenlerimizden max **2 tane veri** olan **Kategorik De\u011fi\u015fkenlerimize** Label Encoding uygulad\u0131\u011f\u0131m\u0131z fonksiyon yazal\u0131m. ","f764cc76":"- De\u011fi\u015fkenlerimizdeki **Benzersiz Verileri** alaca\u011f\u0131z.A\u015fa\u011f\u0131da ki \u00f6rnekte; \n  - De\u011fi\u015fkenimizde ki **Benzersiz Veri** say\u0131m\u0131z 10'ten k\u00fc\u00e7\u00fck ise onu alaca\u011f\u0131z","9ec989cf":"- T\u00fcm **Kategorik D\u011fei\u015fkenler** ile **Hedef De\u011fi\u015fkenimiz** olan **Survived** ile ili\u015fkilerini bize veren fonksiyon yazal\u0131m","b162ba05":"- Sadece **object** data tipine sahip olan de\u011fi\u015fkenler , **Kategorik De\u011fi\u015fken** olacak diye bir kural yok.\n- **Object** data tipine sahip olmayan de\u011fi\u015fkenlerde **Kategorik De\u011fi\u015fken** olabilir.\n- Bu t\u00fcr de\u011fi\u015fkenlere ula\u015fmak a\u015fa\u011f\u0131da ki metodlar\u0131 kullanabiliriz.","047f0450":"- 18 ya\u015f\u0131ndan k\u00fc\u00e7\u00fcklerin **Survived** de\u011f\u015fkeninde ki say\u0131lar\u0131na bakt\u0131k.","21274815":"- **Sex** de\u011fi\u015fkenimizde ki bulunan **Benzersiz Verilerimizin** ka\u00e7 adet oldu\u011funa bakal\u0131m","71551922":"# Say\u0131sal De\u011fer ","54979345":"- **Benzersiz Veri**' leri almak i\u00e7in 2 metodumuz vard\u0131r.\n  - **unique( )**\n  - **nunique( )**","92ab8ef9":"- **Ba\u011f\u0131ml\u0131 ve Ba\u011f\u0131ms\u0131z De\u011fi\u015fkenlerimizi** kullanarak **train ve test** verilerimizi elde edece\u011fiz.","eaaa588e":"- **Age** de\u011fi\u015fkenimizin **\u00dcst E\u015fik De\u011feri** \u00fcst\u00fcnde kalan ayk\u0131r\u0131 de\u011ferlere ula\u015fal\u0131m","e14bc550":"- **Age** de\u011fi\u015fkenimizin alt e\u015fik de\u011feri alt\u0131nda kalan ayk\u0131r\u0131 de\u011fere ula\u015fal\u0131m","36ae1e76":"- \u0130lk olarak **Say\u0131sal De\u011fi\u015fken**'lerimizi alal\u0131m","9015e29f":"- Name de\u011fi\u015fkeninden **Mr**, **Mrs** vb. alarak yeni bir **de\u011fi\u015fken** elde ediyoruz.\n- **'([A-Za-z]+)\\.'** bunun sayesinde isimlerin \u00f6n\u00fcndeki s\u0131fatlar\u0131 al\u0131yoruz.","e2f1ebbd":"- En \u00e7ok **Ayk\u0131r\u0131 De\u011fere** sahip olan De\u011fi\u015fkenlerimiz; \n\n  - **Fare** , **Age** \n - Bu de\u011fi\u015fkenlerimizin **Ayk\u0131r\u0131 De\u011ferlerini** alt ve \u00fcst e\u015fik de\u011ferlerine bask\u0131layaca\u011f\u0131z\n - Bu y\u00fczden bu de\u011fi\u015fkenlerimizin alt ve \u00fcst e\u015fik de\u011ferlerini hesaplayaca\u011f\u0131z.\n - Bunun i\u00e7in alt ve \u00fcst e\u015fik belirleyen fonskiyonumuz **Outliers_Thres**'i kullanaca\u011f\u0131z.\n - **Parch** ve **SibSp** de\u011fi\u015fkenlerimiz kategorik de\u011fi\u015fken olarak alg\u0131lad\u0131\u011f\u0131m\u0131z i\u00e7in onlar\u0131n Ayk\u0131r\u0131 De\u011ferleri yoktur.","e8fa0ea6":"- Survival = 0: \u00d6ld\u00fc 1: Kurtuldu\n- Fare = Yolcu \u00dccreti\n- Embarked = Bindirme Limanlar\u0131\n- Parch = Ebeveyn - Cocuklar\u0131n say\u0131s\u0131\n- sibsp = E\u015f-Karde\u015flerin say\u0131s\u0131 ","d4ab2eae":"- Datam\u0131zda ki **Eksik De\u011ferler**'in toplam say\u0131s\u0131","d11539e6":"- **Object** tipine sahip de\u011fi\u015fkenlerimizi datam\u0131zdan al\u0131yoruz\n\n- Bunu 3 \u015fekilde yapabiliriz.","f6797c28":"- Eksik de\u011fer olmayan de\u011fi\u015fkenler **True**, Eksik De\u011fere Sahip olan de\u011fi\u015fkenler ise **False** de\u011ferlerini al\u0131r.","5ccf1d3d":"- Age de\u011fi\u015fkeninde ki **eksik de\u011ferleri(missing_values)**, New_Name de\u011fi\u015fkeninde ki Age ortalamalar\u0131na g\u00f6re doldurduk.","d83949c7":"- 2. Yol ise Sklearn i\u00e7ersinden **SimpleImputer** kullanarak yapabiliriz.\n- **strategy**  = **most_frequently** diyerek s\u0131k kullan\u0131lan de\u011fer ile doldur diyoruz.\n- Asl\u0131nda mode alm\u0131\u015f oluyoruz\n- Eksik de\u011fere sahip olan de\u011fi\u015fkenlerimizin eksik de\u011ferlerini, **En S\u0131k olan veri** ile dolduran fonskiyon yazal\u0131m","010bd544":"- 30 ya\u015f alt\u0131ndaki insanlar\u0131n say\u0131s\u0131","a7dfaa8f":"- Datam\u0131z\u0131n tiplerini ve o tipin ka\u00e7 tane de\u011fi\u015fkeni oldu\u011funu bulduk","34cdfeed":"# Model Tuning ","98d7e67a":"- \u015eimdi ise **male** ve **female** verilerinin **Survived** de\u011ferlerine bakal\u0131m","860e78f2":"- Ayk\u0131r\u0131 De\u011ferlerini alt ve \u00fcst e\u015fik de\u011ferlerine bask\u0131layaca\u011f\u0131m\u0131z De\u011fi\u015fkenlerimiz i\u00e7in **Alt E\u015fik ve \u00dcst E\u015fik de\u011ferleri** buluyoruz.","e59cd1a7":"# Feature Engineering","c301ce09":"- Tam olan **G\u00f6zlem Birimleri**","7dc0703e":"- Sadece **Age** de\u011fi\u015fkenin de **Ayk\u0131r\u0131 De\u011ferler D\u0131\u015f\u0131nda ki** di\u011fer verileri alal\u0131m","b03d33f1":"# Say\u0131sal De\u011fi\u015fken ","424562a6":"- Bir kategorik de\u011fi\u015fken i\u00e7in hedef de\u011fi\u015fken analizine bakaca\u011f\u0131z.\n- ilk olarak **ortalama**s\u0131na bakal\u0131m","357c6580":"- **Cabin** de\u011fi\u015fkenimize de LabelEncoder i\u015flemi uygulayaca\u011f\u0131z.\n- **Cabin** de\u011fi\u015fkenimizde 2'den farkl\u0131 Benzersiz veri var.Ama yine de LabelEncoder uygulayaca\u011f\u0131z.\n- **Cabin** de\u011fi\u015fkenini silebilirdik.Fakat **Cabin** de\u011fi\u015fkeni bizim **Hedef De\u011fi\u015fkenimiz** \u00fczerinde etksi vard\u0131r.\n- O y\u00fczden **unknown** de\u011ferleri tek de\u011fer di\u011fer kabin de\u011ferlerini ise s\u0131rayla bir say\u0131ya atam\u0131\u015f olaca\u011f\u0131z","f73d8aa4":"# Label Encodig ","5b5796c8":"- **Kategorik De\u011fi\u015fkenlerimizin**, **Hedef De\u011fi\u015fkenimiz** de ki de\u011ferlerin say\u0131s\u0131na bakal\u0131m.","fba5895c":"- **Age** de\u011fi\u015fkenimizde ki **Ayk\u0131r\u0131 De\u011ferlerimiz** 'in oldu\u011fu g\u00f6zlemleri **T\u00fcm Datam\u0131z** \u00fczerinden bak\u0131yoruz.","cf895f2c":"- **Ba\u011f\u0131ml\u0131 De\u011fi\u015fkenimiz** olan **Survived** de\u011fi\u015fkenimizi datam\u0131zdan al\u0131yoruz.","9d64ec75":"- \u00d6rne\u011fin ; **SibSp** de\u011fi\u015fkenimizin boxplotunu \u00e7izdirdi\u011fimizde sol taraftai de\u011ferler asl\u0131nda de\u011fi\u015fkenin benzersiz de\u011ferleridir.\n- De\u011fi\u015fkenin ortalamas\u0131 0'a \u00e7ekti\u011fi i\u00e7in De\u011fi\u015fkenin 8,6,5 deki verileri ayk\u0131r\u0131 olarak g\u00f6r\u00fcyor\n\n- Ayn\u0131 durum **Parch** De\u011fi\u015fkenimiz i\u00e7in de s\u00f6z konusudur.","1903f145":"- **Heatmap** ile g\u00f6rselle\u015ftirelim ","2be9dfad":"- **Young** verisine sahip olan de\u011ferlerin hangi ya\u015ftan ka\u00e7 ki\u015fi var ona bakt\u0131k","bfa087ed":"# Model\n","3fb43b52":"- **Auto_Outliers** fonksiyonumuza , **Ayk\u0131r\u0131 De\u011fere Sahip** olan De\u011fi\u015fkenlerin **Toplam Ayk\u0131r\u0131 De\u011fer** say\u0131s\u0131n\u0131 da yazd\u0131rma \u00f6zelli\u011fi ekleyelim.","72dd6e02":"- PCLASS\n- Bilet S\u0131n\u0131f\u0131 k\u00f6t\u00fc olan yolcular\u0131n \u00f6l\u00fcm oranlar\u0131 daha fazla ","21620745":"- **Age ve Fare** de\u011fi\u015fkenlerimiz i\u00e7in **toplam alt ve \u00fcst ayk\u0131r\u0131 de\u011ferleri** bulan fonskyon yazal\u0131m","41438527":"# Hedef De\u011fi\u015fken Analizi ","3557af28":"# Outliers ","b5479621":"- En az yolcu \u00fccreti alan liman **Q** , en fazla \u00f6l\u00fcm oran\u0131na sahip liman ise **S**","5cedc0ad":"# Data Visualization","8d2296a0":"- Sadece **Age** de\u011fi\u015fkenimizdeki **Ayk\u0131r\u0131 G\u00f6zlemlere** bak\u0131yoruz.","2649c8b3":"- Belli ya\u015f \u00fczerindeki insanlar\u0131n say\u0131s\u0131 ve  belli ya\u015f alt\u0131nda ki insanlar\u0131n say\u0131s\u0131n\u0131 hesaplad\u0131\u011f\u0131m\u0131z bir **AgeCount** s\u0131n\u0131f\u0131 olu\u015fturduk.","e8ef28ed":"- **Ayk\u0131r\u0131 De\u011ferler** i\u00e7in **Numeric Feature(Say\u0131sal De\u011fi\u015fkenlerimiz)**'lar\u0131m\u0131za bakaca\u011f\u0131z.","a974f858":"- The number of people getting on from city Q is fewer than other stops. Those who get from city Q are people who pay less.\n- And the wages he pays are lower than the average wages.\n- Those who pay the high passenger fares are from city C.","beec28c7":"- De\u011fi\u015fkenlerimiz i\u00e7in **Ayk\u0131r\u0131 G\u00f6zlem olup olmad\u0131\u011f\u0131n\u0131n** analizini yapan fonksiyon yazal\u0131m","9dc5a98f":"- Buldu\u011fumuz **En iyi Parametreler** yeni bir **GradientBoostingClassifier** modeli olu\u015fturaca\u011f\u0131z.","b54d83b0":"- Benzersiz veriler ile belli de\u011ferden k\u00fc\u00e7\u00fck ise kategorik veri kabul edece\u011fimiz de\u011fi\u015fkenleri alan ve g\u00f6rselle\u015ftiren bir fonskiyon elde edece\u011fiz.\n","b2a55f52":"- Yukar\u0131daki G\u00f6zlem birimleri d\u0131\u015f\u0131ndaki t\u00fcm g\u00f6zlem birimlerini a\u015fa\u011f\u0131da ki gibi g\u00f6rebiliriz.\n- Yani **Ayk\u0131r\u0131 G\u00f6zlem** olmayan **T\u00fcm G\u00f6zlemler**","5fc63e35":"- **Survived** ve **PassengerId** de\u011fi\u015fken d\u0131\u015f\u0131nda ki t\u00fcm **Say\u0131sal De\u011fi\u015fkenleri** al\u0131yoruz.","f696470e":"- **x_train ve x_test** datalar\u0131m\u0131zda **Age ve Fare** de\u011fi\u015fkenlerimize **MinMaxScaler** i\u015flemi uygulayan fonskiyon yazal\u0131m.","cab28ab9":"- Bizim Hedef de\u011fi\u015fkenimiz **Survived** dei\u015fkenimizdir.\n- \u015eimdi ise datam\u0131zdaki di\u011fer de\u011fi\u015fkenlerimiz ile hedef de\u011fi\u015fkenimiz olan **Survived** ile olan ili\u015fkilerine bakaca\u011f\u0131z.","33af1163":"- Datam\u0131zda ki **eksik de\u011fer** kontrol\u00fcn\u00fc yapt\u0131k.\n- Datam\u0131z da 1 tane bile eksik de\u011fer oldu\u011fu zaman **True** c\u0131kt\u0131s\u0131n\u0131 alaca\u011f\u0131z","4c72c404":"- **alt ve \u00fcst e\u015fik de\u011ferlerini** kullanmak istiyorsak fonskiyonumuzu a\u015fa\u011f\u0131daki gibi \u00e7a\u011f\u0131rabiliriz.\n- Fonksiyonumuz **2 adet de\u011fer return etti\u011fi** i\u00e7in onlar\u0131 da **alt,\u00fcst** \u015feklinde fonskiyondan alm\u0131\u015f olduk.","e52383fb":"# One Hot Encoder","bd914e98":"- **Survived** , **Pclass** vb de\u011fi\u015fkenlerimiz bizim **object** data tipine sahip de\u011fi\u015fkenlerimiz olmamas\u0131na ra\u011fmen asl\u0131nda **Kategorik De\u011fi\u015fkenlerdir**.","03b29d72":"- EMBARKED","c526bed8":"- **describe()** metodu default olarak datam\u0131z\u0131n 25. ,50. ,75. y\u00fczdeliklerini verir.\n- Fakat biz hangi y\u00fczdelik dilimlerini almak istiyorsak **list i\u00e7erisinde** bildirebiliriz.","9c662d32":"- **SibSp** ve **Parch** de\u011fi\u015fkenlerini kullanarak **Alone** de\u011fi\u015fkeni elde edece\u011fiz.\n- **SibSp(Karde\u015flerin say\u0131s\u0131)** ile **Parch(\u00c7ocuklar\u0131n say\u0131s\u0131)** **0**'dan b\u00fcy\u00fck ise **Alone** de\u011fi\u015fkeninde **0** olsun dedik.\n- **SibSp(Karde\u015flerin say\u0131s\u0131)** ile **Parch(\u00c7ocuklar\u0131n say\u0131s\u0131)** **0**'a e\u015fit ise **Alone** de\u011fi\u015fkeninde **1** olsun dedik.","0fc74e32":"- **Embarked** s\u00fctununda ki eksik de\u011ferleri **en s\u0131k** olan  **S** de\u011feri ile doldurduk.\n- **Mode** alarakta en s\u0131k olan de\u011feri doldurabilirz","3911382b":"- **Outliers_Feature** fonskiyonu kullanarak datam\u0131zda ki t\u00fcm **Say\u0131sal De\u011fi\u015fkenler**' e eksik de\u011fer kontrol\u00fcn\u00fc kendisi bakan fonksiyon yazal\u0131m.","0271c0d2":"- Bir de\u011fi\u015fkende ki verilerin **benzersiz verileri** , **10'dan** k\u00fc\u00e7\u00fck ise bunlar\u0131 kategorik veri olarak al\u0131yoruz.","86d9157c":"# Missing Values","14fb7817":"- Ka\u00e7 adet **Numeric** data tipine sahip de\u011fi\u015fkenlerimiz var onlara bakal\u0131m","d7feb384":"- 2'den fazla e\u015fsiz veriye sahip olan **Kategorik De\u011fi\u015fkenlrimize** i\u00e7in **One Hot Encoding** uygulayan fonksiyon uygulayal\u0131m ","62f07b31":"- One Hot Encoding i\u015flemini yaparken **pd.get_dummies()** y\u00f6ntemini kullanaca\u011f\u0131z.","89d73b96":"- Cinsiyete g\u00f6re \u00d6l\u00fcm Oranlar\u0131 ","277c9b3f":"- A\u015fa\u011f\u0131da g\u00f6rd\u00fc\u011f\u00fcm\u00fcz gibi **Age** de\u011fi\u015fkeninde ki NaN de\u011ferler yok.","a2ae8faf":"- **Survived** bizim hedef de\u011fi\u015fkenimiz oldu\u011fu i\u00e7in **numeric_cols** de\u011fi\u015fkenlerimiz aras\u0131nda **olmamal\u0131**.\n- Ayn\u0131 zamanda **PassengerId** de **numeric_cols** de\u011ferleri aras\u0131nda olmamal\u0131.. ","cfe3187b":"- **Eksik De\u011fer** olan De\u011fi\u015fkenleri bize verir.","476d8fa3":"- Datam\u0131zda ki eksik de\u011fere sahip olan **Column**lar\u0131 al\u0131yoruz.","f69f6b76":"- **\" Age \"** de\u011fi\u015fkeninde ki **eksik de\u011ferleri** , **\" New_Name \"** de\u011fi\u015fkeninde ki de\u011ferlerin **Age Ortalamas\u0131na** g\u00f6re doldurduk","f741cbae":"- \u015eimdi ise ka\u00e7 belli de\u011fer alt\u0131nda kalan **Benzersiz Verileri** alarak ka\u00e7 **Kateorik De\u011fi\u015fken** oldu\u011funu tutan bir fonksiyon yazaca\u011f\u0131z.","b4a3d549":"- En az bir tane **Eksik De\u011fere** sahip olan **G\u00f6zlem Birimleri**","c979fcad":"- **PassengerId, Name, Ticket** de\u011fi\u015fkenlerini Datam\u0131zdan \u00e7\u0131kar\u0131yoruz","17e32956":"- **Eksik de\u011fere** sahip s\u00fctunlar\u0131m\u0131z\u0131n ; \n - Ka\u00e7 tane eksik de\u011feri oldu\u011funu\n - Eksik de\u011fere sahip s\u00fctunlar\u0131n tiplerini hepsinden olu\u015fan bir **DataFrame** elde ettik.\n \n \n- Num_missing de\u011feri 0'dan b\u00fcy\u00fck olan de\u011ferleri ald\u0131k.\n- Yani sadece eksik de\u011fere sahip olan de\u011fi\u015fkeni ald\u0131k.\n- index ismini de Feature ile de\u011fi\u015ftirdik. \n\n\n- Seaborn ile featurelar\u0131m\u0131z\u0131n eksik de\u011fer oran\u0131n\u0131 grafikle\u015ftirdik.\n- **plot = False** default olarak grafi\u011fi \u00e7izmeyecek.Fonksiyon da **True** dedi\u011fimiz zaman  grafi\u011fimizi \u00e7izecek\n ","6af66c9c":"- En \u0130yi modelimizin **GradientBoostingClassifier** oldu\u011funu g\u00f6rd\u00fck.","4ff29aa1":"- Elde etti\u011fimiz **New_Name** de\u011fi\u015fkenindeki de\u011ferlerin **Age** ortalamas\u0131na g\u00f6re de\u011fi\u015ftirdik.\n- Example:\n  - Mr --> Age.mean == 32 ise **New_Name** de\u011fi\u015fkenin de **Mr** olan de\u011fer yerine 32 ile de\u011fi\u015ftirmi\u015f oluyoruz.\n  - **transform()** (d\u00f6n\u00fc\u015f\u00fcm)","80b98d80":"- 30 ya\u015f \u00fczerindeki insanlar\u0131n say\u0131s\u0131","c033aa5a":"# Kategorik De\u011fi\u015fken","85f8aa14":"- **Survived** de\u011fi\u015fkendeki veri say\u0131lar\u0131n\u0131n,veri seti say\u0131s\u0131na b\u00f6lerek oran\u0131n\u0131 buluyoruz","a4da480c":"- **Fare** de\u011fi\u015fkenindeki 1 'den k\u00fc\u00e7\u00fck de\u011ferlere yani **\u00dccret \u00f6demeyen** indexlerine ve say\u0131s\u0131na bakal\u0131m","3d402959":"- De\u011fi\u015fkenlerdemizde ki toplam **eksik de\u011fer** say\u0131lar\u0131","4a40156e":"- Bir **Say\u0131sal De\u011fi\u015fken**'e g\u00f6re **Hedef De\u011fi\u015fken** analizini yaparken **agg()** fonksiyonunu kullan\u0131r\u0131z.\n\n- **Survived** de\u011fi\u015fkenimizde ;\n\n   - **Fare** de\u011fi\u015fkenimizin **Ortalama** de\u011ferlerini.\n   - **Age** de\u011fi\u015fkenimizin **Minimum** de\u011ferlerini.\n   - **SibSp** de\u011fi\u015fkenimizin **Maximum** de\u011ferlerini ald\u0131k **agg()** fonskiyonu ile.","9e037f41":"- Eksik De\u011fere Sahip s\u00fctunlar **True** di\u011ferleri **False** olur."}}