{"cell_type":{"cbb28433":"code","f35affee":"code","61436a39":"code","f22abed9":"code","acd0c363":"code","6aac9582":"code","d3f38e0a":"code","5aa193da":"code","e911d945":"code","307f4685":"code","7a2d107e":"code","4edb70ca":"code","b0bd7d15":"code","50d42e5b":"code","25d982f6":"code","63dd83f1":"code","198f4d57":"code","001a2e75":"code","a7c9c04e":"code","176feeb5":"code","c0d50ca1":"code","fc935760":"code","e455c5e0":"code","c581b35a":"code","26fb48fc":"code","00fda112":"code","7f3d7d93":"code","62e7e87f":"code","603c89a0":"code","91bd303d":"code","78c5aea3":"code","dec21536":"code","f897661a":"code","33ef12ac":"code","4c673cfe":"code","7488e6cf":"code","6ea1f805":"code","cfed9450":"code","35e20dac":"code","3bd3da7d":"code","74f61861":"code","028d84c6":"code","a744694d":"code","35b612cf":"code","e060468d":"code","a64c025e":"code","68e42d6e":"code","ec462b6a":"code","fe8fbd3d":"code","d379269f":"code","d7129679":"code","62e9b139":"code","dde642b9":"code","653a5053":"code","ed0179a9":"code","bf04f62f":"code","31a29eef":"code","25674505":"code","64daa69b":"code","e953844e":"code","8955f952":"code","2eba0301":"code","d92f7598":"code","c0dde3bc":"code","d79b8533":"code","735d9419":"code","385cdfa0":"code","332bd00c":"code","6e052a87":"markdown","c351ed54":"markdown","7eec519a":"markdown","1d921c70":"markdown","2d5a7776":"markdown","f7a569c6":"markdown","9656424d":"markdown","89e4a926":"markdown","224b7ecc":"markdown","693a2bda":"markdown"},"source":{"cbb28433":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","f35affee":"import matplotlib.pyplot as plt\nimport seaborn  as sns\n%matplotlib inline\nimport lightgbm as lgb\nimport xgboost as xgb\nfrom sklearn.model_selection import RandomizedSearchCV","61436a39":"train_df = pd.read_csv(\"\/kaggle\/input\/house-prices-advanced-regression-techniques\/train.csv\")\ntest_df = pd.read_csv(\"\/kaggle\/input\/house-prices-advanced-regression-techniques\/test.csv\")","f22abed9":"train_df.head()","acd0c363":"train_df.describe()","6aac9582":"train_df.shape","d3f38e0a":"train_df.info()","5aa193da":"train_df.isna().sum()","e911d945":"sns.heatmap(train_df.isnull(),cbar=False)","307f4685":"train_df['LotFrontage'] = train_df['LotFrontage'].fillna(train_df['LotFrontage'].mean())","7a2d107e":"train_df = train_df.drop(['Alley'],axis = 1)","4edb70ca":"train_df['MasVnrType'].value_counts()","b0bd7d15":"train_df['MasVnrType'] = train_df['MasVnrType'].fillna(train_df['MasVnrType'].mode()[0])\ntrain_df['MasVnrArea'] = train_df['MasVnrArea'].fillna(train_df['MasVnrArea'].mean())","50d42e5b":"train_df['BsmtQual'] = train_df['BsmtQual'].fillna(train_df['BsmtQual'].mode()[0])\ntrain_df['BsmtCond'] = train_df['BsmtCond'].fillna(train_df['BsmtCond'].mode()[0])","25d982f6":"train_df['BsmtExposure'] = train_df['BsmtExposure'].fillna(train_df['BsmtExposure'].mode()[0])\ntrain_df['BsmtFinType1'] = train_df['BsmtFinType1'].fillna(train_df['BsmtFinType1'].mode()[0])\ntrain_df['BsmtFinType2'] = train_df['BsmtFinType2'].fillna(train_df['BsmtFinType2'].mode()[0])","63dd83f1":"train_df['Electrical'] = train_df['Electrical'].fillna(train_df['Electrical'].mode()[0])","198f4d57":"train_df['FireplaceQu'] = train_df['FireplaceQu'].fillna(train_df['FireplaceQu'].mode()[0])\ntrain_df['GarageType'] = train_df['GarageType'].fillna(train_df['GarageType'].mode()[0])\ntrain_df['GarageYrBlt'] = train_df['GarageYrBlt'].fillna(train_df['GarageYrBlt'].mean())\ntrain_df['GarageFinish'] = train_df['GarageFinish'].fillna(train_df['GarageFinish'].mode()[0])","001a2e75":"train_df = train_df.drop(['PoolQC','Fence','MiscFeature','GarageYrBlt'],axis = 1)","a7c9c04e":"train_df.drop(['Id'],axis = 1,inplace=True)","176feeb5":"train_df['GarageQual'] = train_df['GarageQual'].fillna(train_df['GarageQual'].mode()[0])\ntrain_df['GarageCond'] = train_df['GarageCond'].fillna(train_df['GarageCond'].mode()[0])","c0d50ca1":"train_df.shape","fc935760":"sns.heatmap(train_df.isnull(),cbar=False)","e455c5e0":"#categorical columns\ncolumns = ['MSZoning','Street','LotShape','LandContour','Utilities','LotConfig','LandSlope','Neighborhood',\n         'Condition2','BldgType','Condition1','HouseStyle','SaleType',\n        'SaleCondition','ExterCond',\n         'ExterQual','Foundation','BsmtQual','BsmtCond','BsmtExposure','BsmtFinType1','BsmtFinType2',\n        'RoofStyle','RoofMatl','Exterior1st','Exterior2nd','MasVnrType','Heating','HeatingQC',\n         'CentralAir',\n         'Electrical','KitchenQual','Functional',\n         'FireplaceQu','GarageType','GarageFinish','GarageQual','GarageCond','PavedDrive']\nprint(len(columns))","c581b35a":"test_df.head()","26fb48fc":"test_df.shape","00fda112":"test_df.isna().sum()","7f3d7d93":"test_df.info()","62e7e87f":"sns.heatmap(test_df.isnull(),cbar=False)","603c89a0":"#filling the missing values in the test dataset\ntest_df['LotFrontage']=test_df['LotFrontage'].fillna(test_df['LotFrontage'].mean())\ntest_df['MSZoning']=test_df['MSZoning'].fillna(test_df['MSZoning'].mode()[0])\n","91bd303d":"test_df.shape","78c5aea3":"test_df['BsmtCond']=test_df['BsmtCond'].fillna(test_df['BsmtCond'].mode()[0])\ntest_df['BsmtQual']=test_df['BsmtQual'].fillna(test_df['BsmtQual'].mode()[0])\n","dec21536":"test_df['FireplaceQu']=test_df['FireplaceQu'].fillna(test_df['FireplaceQu'].mode()[0])\ntest_df['GarageType']=test_df['GarageType'].fillna(test_df['GarageType'].mode()[0])\n","f897661a":"test_df['GarageFinish']=test_df['GarageFinish'].fillna(test_df['GarageFinish'].mode()[0])\ntest_df['GarageQual']=test_df['GarageQual'].fillna(test_df['GarageQual'].mode()[0])\n","33ef12ac":"test_df = test_df.drop(['Alley','PoolQC'],axis=1)","4c673cfe":"test_df.shape","7488e6cf":"test_df['GarageCond']=test_df['GarageCond'].fillna(test_df['GarageCond'].mode()[0])\ntest_df['GarageYrBlt'] = test_df['GarageYrBlt'].fillna(test_df['GarageYrBlt'].mean())\n\n","6ea1f805":"test_df = test_df.drop(['Fence','MiscFeature','Id','GarageYrBlt'],axis =1)\ntest_df.shape","cfed9450":"sns.heatmap(test_df.isnull(),cmap='viridis')","35e20dac":"test_df['BsmtExposure']=test_df['BsmtExposure'].fillna(test_df['BsmtExposure'].mode()[0])\ntest_df['BsmtFinType2']=test_df['BsmtFinType2'].fillna(test_df['BsmtFinType2'].mode()[0])","3bd3da7d":"test_df.loc[:,test_df.isnull().any()].head()","74f61861":"test_df['Utilities']=test_df['Utilities'].fillna(test_df['Utilities'].mode()[0])\ntest_df['Exterior1st']=test_df['Exterior1st'].fillna(test_df['Exterior1st'].mode()[0])\ntest_df['Exterior2nd']=test_df['Exterior2nd'].fillna(test_df['Exterior2nd'].mode()[0])\ntest_df['BsmtFinType1']=test_df['BsmtFinType1'].fillna(test_df['BsmtFinType1'].mode()[0])\ntest_df['BsmtFinSF1']=test_df['BsmtFinSF1'].fillna(test_df['BsmtFinSF1'].mean())\ntest_df['BsmtFinSF2']=test_df['BsmtFinSF2'].fillna(test_df['BsmtFinSF2'].mean())\ntest_df['BsmtUnfSF']=test_df['BsmtUnfSF'].fillna(test_df['BsmtUnfSF'].mean())\ntest_df['TotalBsmtSF']=test_df['TotalBsmtSF'].fillna(test_df['TotalBsmtSF'].mean())\ntest_df['BsmtFullBath']=test_df['BsmtFullBath'].fillna(test_df['BsmtFullBath'].mode()[0])\ntest_df['BsmtHalfBath']=test_df['BsmtHalfBath'].fillna(test_df['BsmtHalfBath'].mode()[0])\ntest_df['KitchenQual']=test_df['KitchenQual'].fillna(test_df['KitchenQual'].mode()[0])\ntest_df['Functional']=test_df['Functional'].fillna(test_df['Functional'].mode()[0])\ntest_df['GarageCars']=test_df['GarageCars'].fillna(test_df['GarageCars'].mean())\ntest_df['GarageArea']=test_df['GarageArea'].fillna(test_df['GarageArea'].mean())\ntest_df['SaleType']=test_df['SaleType'].fillna(test_df['SaleType'].mode()[0])","028d84c6":"test_df.shape","a744694d":"test_df.head()","35b612cf":"final_df = pd.concat([train_df,test_df],axis = 0)","e060468d":"final_df.shape","a64c025e":"def one_hot_multicolumn(multi_col):\n    df_final = final_df\n    i =0\n    for col in multi_col:\n        print(col)\n        df = pd.get_dummies(final_df[col],drop_first=True)\n        final_df.drop([col],axis = 1,inplace=True)\n        if i == 0:\n            df_final= df.copy()\n        else:\n            df_final = pd.concat([df_final,df],axis = 1)\n        i = i + 1\n    df_final = pd.concat([final_df,df_final],axis = 1)\n    return df_final\n    ","68e42d6e":"#taking a copy of training data\ntrain_copy_df = train_df.copy()","ec462b6a":"final_df = one_hot_multicolumn(columns)","fe8fbd3d":"final_df.shape","d379269f":"#removing the duplicates\nfinal_df = final_df.loc[:,~final_df.columns.duplicated()]","d7129679":"final_df.shape","62e9b139":"final_df","dde642b9":"df_training = final_df.iloc[:1460,:]\ndf_testing = final_df.iloc[1460:,:]","653a5053":"df_training.head()","ed0179a9":"df_testing.head()","bf04f62f":"df_testing.drop(['SalePrice'],axis = 1,inplace=True)\n","31a29eef":"x_train = df_training.drop(['SalePrice'],axis = 1)\ny_train = df_training['SalePrice']","25674505":"regressor = xgb.XGBRegressor()","64daa69b":"booster = ['gbtree','gblinear']\nbase_score = [0.20,0.25,0.50,0.75,1]\nn_estimators = [100,150,200,500,700,900]\nmax_depth = [2,5,7,10,15]\nlearning_rate = [0.005,0.01,0.15,0.20]\nhyperparameter_grid = {\n    'n_estimators':n_estimators,\n    'max_depth':max_depth,\n    'learning_rate':learning_rate,\n    'booster':booster,\n    'base_score':base_score\n}","e953844e":"random_cv = RandomizedSearchCV(estimator=regressor,\n                              param_distributions=hyperparameter_grid,\n                              cv = 5,\n                              n_iter = 50,\n                              random_state=42,\n                              return_train_score=True,n_jobs = -1,\n                               scoring='neg_mean_absolute_error'\n                              )","8955f952":"random_cv.fit(x_train,y_train)","2eba0301":"random_cv.best_estimator_","d92f7598":"regressor = xgb.XGBRegressor(base_score=0.2, booster='gbtree', colsample_bylevel=1,\n             colsample_bynode=1, colsample_bytree=1, gamma=0, gpu_id=-1,\n             importance_type='gain', interaction_constraints='',\n             learning_rate=0.15, max_delta_step=0, max_depth=5,\n             min_child_weight=1, missing=None, monotone_constraints='()',\n             n_estimators=700, n_jobs=0, num_parallel_tree=1, random_state=0,\n             reg_alpha=0, reg_lambda=1, scale_pos_weight=1, subsample=1,\n             tree_method='exact', validate_parameters=1, verbosity=None)","c0dde3bc":"regressor.fit(x_train,y_train)","d79b8533":"import pickle\nfilename = 'best_xgbmodel.pkl'\npickle.dump(regressor,open(filename,'wb'))","735d9419":"y_pred = regressor.predict(df_testing)","385cdfa0":"y_pred","332bd00c":"#sample submission file \npred = pd.DataFrame(y_pred)\nsub_df = pd.read_csv(\"..\/input\/house-prices-advanced-regression-techniques\/sample_submission.csv\")\ndataset = pd.concat([sub_df['Id'],pred],axis = 1)\ndataset.columns=['Id','SalePrice']\ndataset.to_csv(\"sample_submission.csv\",index=False)","6e052a87":"No missing or Null values","c351ed54":"**XGBOOST**","7eec519a":"Import Libraries","1d921c70":"HYPERPARAMETER OPTIMIZATION","2d5a7776":"Filling the columns with missing values","f7a569c6":"Selection of Algorithm","9656424d":"New Columns in test dataset","89e4a926":"**Train Dataset**","224b7ecc":"**Test Dataset**","693a2bda":"Combining the Train and test dataset"}}