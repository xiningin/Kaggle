{"cell_type":{"769515a5":"code","0c5fd59a":"code","7388bb21":"code","937573bb":"code","3ba687fe":"code","dce291dd":"code","49a7bff0":"code","a03c93e0":"code","c107ba7b":"code","4e671eda":"code","4d8e73c9":"code","4f292200":"code","37445e8e":"code","661987ad":"code","501a3e9e":"code","40f7c290":"code","360f8736":"code","6d36bf99":"code","c0e35d52":"code","17411d01":"markdown","e77f61c8":"markdown","515ed7f8":"markdown","09a1c6b8":"markdown","47407c6b":"markdown","91d987b2":"markdown","baff6514":"markdown","24d2fba5":"markdown","d7fd9fbe":"markdown","6eabd8f2":"markdown","4e49a0bf":"markdown"},"source":{"769515a5":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","0c5fd59a":"import pandas as pd\nfrom sklearn.model_selection import train_test_split\n\n# Read the data\nX_full = pd.read_csv('..\/input\/home-data-for-ml-course\/train.csv', index_col='Id')\nX_test_full = pd.read_csv('..\/input\/home-data-for-ml-course\/test.csv', index_col='Id')\n\n# Remove rows with missing target, separate target from predictors\nX_full.dropna(axis=0, subset=['SalePrice'], inplace=True)\ny = X_full.SalePrice\nX_full.drop(['SalePrice'], axis=1, inplace=True)\n\n# To keep things simple, we'll use only numerical predictors\nX = X_full.select_dtypes(exclude=['object'])\nX_test = X_test_full.select_dtypes(exclude=['object'])\n\n# Break off validation set from training data\nX_train, X_valid, y_train, y_valid = train_test_split(X, y, train_size=0.8, test_size=0.2,\n                                                      random_state=0)","7388bb21":"from sklearn.impute import SimpleImputer\nimputer = SimpleImputer()\nX_imputed = pd.DataFrame(imputer.fit_transform(X))\nX_imputed.columns = X.columns \nX_imputed","937573bb":"parameters = [{\n    'n_estimators': list(range(100, 1001, 100)), \n    'max_leaf_nodes': list(range(2, 10, 1)), \n    'max_depth': list(range(6, 30, 1))\n}]\nprint(parameters)","3ba687fe":"from sklearn.model_selection import GridSearchCV\nfrom sklearn.ensemble import RandomForestRegressor\ngsearch = GridSearchCV(estimator=RandomForestRegressor(),\n                       param_grid = parameters, \n                       scoring='neg_mean_absolute_error',\n                       n_jobs=4,cv=5, verbose=7)","dce291dd":"gsearch.fit(X_imputed, y)","49a7bff0":"gsearch.best_score_","a03c93e0":"gsearch.cv_results_","c107ba7b":"gsearch.cv_results_.get('mean_test_score')","4e671eda":"gsearch.cv_results_.get('mean_test_score')","4d8e73c9":"gsearch.cv_results_.get('std_test_score')","4f292200":"best_max_depth = gsearch.best_params_.get('max_depth')\nbest_max_depth","37445e8e":"best_max_leaf_nodes = gsearch.best_params_.get('max_leaf_nodes')\nbest_max_leaf_nodes","661987ad":"best_n_estimators = gsearch.best_params_.get('n_estimators')\nbest_n_estimators","501a3e9e":"final_model = RandomForestRegressor(n_estimators=best_n_estimators, \n                          max_depth=best_max_depth, \n                          max_leaf_nodes=best_max_depth)","40f7c290":"final_model.fit(X_imputed, y)","360f8736":"X_test_imputed = pd.DataFrame(imputer.transform(X_test))\nX_test_imputed.columns = X_test.columns \nX_test_imputed","6d36bf99":"preds_test = final_model.predict(X_test_imputed)","c0e35d52":"# Save test predictions to file\noutput = pd.DataFrame({'Id': X_test.index,\n                       'SalePrice': preds_test})\noutput.to_csv('submission.csv', index=False)","17411d01":"# Results","e77f61c8":"# Get the best parameters ","515ed7f8":"# Fit the model","09a1c6b8":"# Write predictions to submit ","47407c6b":"# Handle Missing Data ","91d987b2":"# Handle Missing values on test data ","baff6514":"# Build the final model with the best parameters ","24d2fba5":"# Define GridSearchCV for hyper-parameter tuning ","d7fd9fbe":"# Predict test data ","6eabd8f2":"# Setup hyper-parameters ","4e49a0bf":"# Load data "}}