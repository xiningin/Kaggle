{"cell_type":{"7f431b01":"code","348b9753":"code","1e55b0a6":"code","26ffb5d0":"code","cbbd5143":"code","0252380f":"code","e46b6c16":"code","746711a0":"code","2886901e":"code","a0921607":"code","e5b9e2f9":"code","57a156bb":"code","f4b4a2dd":"code","e5263de9":"code","4f9ae692":"code","2adc5b8e":"code","acd4e42c":"code","a87d6f31":"code","989138d7":"code","aa22854b":"code","b20acdab":"code","319ad586":"code","743496f6":"code","d2f1d4a8":"code","a36434a4":"code","9d359913":"code","4176c5a7":"code","2cca97ca":"code","155f0f3e":"code","cf8a0d53":"code","91125b9b":"code","8d6d4fdb":"code","8df8656f":"code","ef05da5e":"code","f33cdc62":"code","2f507c6a":"markdown","17bcec52":"markdown","6013e35c":"markdown","b0af0488":"markdown","f05663c3":"markdown","7b5590d3":"markdown","46388cd9":"markdown","cdf669a0":"markdown","8b9d9903":"markdown","0a61c5d9":"markdown","c9408e92":"markdown","72c2c77a":"markdown","a81a4568":"markdown","f712f389":"markdown","ac3a1227":"markdown"},"source":{"7f431b01":"import numpy as np \nimport pandas as pd\nimport matplotlib\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n%matplotlib inline \nfrom wordcloud import WordCloud, STOPWORDS\nimport warnings\nwarnings.simplefilter(\"ignore\")","348b9753":"tweets_df = pd.read_csv(\"..\/input\/kenyan-political-tweets\/kenya_political_tweets.csv\")","1e55b0a6":"print(f\"data shape: {tweets_df.shape}\")","26ffb5d0":"tweets_df.info()","cbbd5143":"tweets_df.describe()","0252380f":"tweets_df.head()","e46b6c16":"def missing_data(data):\n    total = data.isnull().sum()\n    percent = (data.isnull().sum()\/data.isnull().count()*100)\n    tt = pd.concat([total, percent], axis=1, keys=['Total', 'Percent'])\n    types = []\n    for col in data.columns:\n        dtype = str(data[col].dtype)\n        types.append(dtype)\n    tt['Types'] = types\n    return(np.transpose(tt))","746711a0":"missing_data(tweets_df)","2886901e":"def unique_values(data):\n    total = data.count()\n    tt = pd.DataFrame(total)\n    tt.columns = ['Total']\n    uniques = []\n    for col in data.columns:\n        unique = data[col].nunique()\n        uniques.append(unique)\n    tt['Uniques'] = uniques\n    return(np.transpose(tt))","a0921607":"unique_values(tweets_df)","e5b9e2f9":"def most_frequent_values(data):\n    total = data.count()\n    tt = pd.DataFrame(total)\n    tt.columns = ['Total']\n    items = []\n    vals = []\n    for col in data.columns:\n        itm = data[col].value_counts().index[0]\n        val = data[col].value_counts().values[0]\n        items.append(itm)\n        vals.append(val)\n    tt['Most frequent item'] = items\n    tt['Frequence'] = vals\n    tt['Percent from total'] = np.round(vals \/ total * 100, 3)\n    return(np.transpose(tt))","57a156bb":"most_frequent_values(tweets_df)","f4b4a2dd":"def plot_count(feature, title, df, size=1, ordered=True):\n    f, ax = plt.subplots(1,1, figsize=(4*size,4))\n    total = float(len(df))\n    if ordered:\n        g = sns.countplot(df[feature], order = df[feature].value_counts().index[:20], palette='Set3')\n    else:\n        g = sns.countplot(df[feature], palette='Set3')\n    g.set_title(\"Number and percentage of {}\".format(title))\n    if(size > 2):\n        plt.xticks(rotation=90, size=8)\n    for p in ax.patches:\n        height = p.get_height()\n        ax.text(p.get_x()+p.get_width()\/2.,\n                height,\n                '{:1.2f}%'.format(100*height\/total),\n                ha=\"center\") \n    plt.show()    ","e5263de9":"plot_count(\"user_name\", \"User name (first 20)\", tweets_df,4)","4f9ae692":"plot_count(\"user_location\", \"User location (first 20)\", tweets_df,4)","2adc5b8e":"plot_count(\"source\", \"Source (first 20)\", tweets_df,4)","acd4e42c":"stopwords = set(STOPWORDS)\n\ndef show_wordcloud(data, title = None):\n    wordcloud = WordCloud(\n        background_color='white',\n        stopwords=stopwords,\n        max_words=50,\n        max_font_size=40, \n        scale=5,\n        random_state=1\n    ).generate(str(data))\n\n    fig = plt.figure(1, figsize=(10,10))\n    plt.axis('off')\n    if title: \n        fig.suptitle(title, fontsize=20)\n        fig.subplots_adjust(top=2.3)\n\n    plt.imshow(wordcloud)\n    plt.show()","a87d6f31":"show_wordcloud(tweets_df['text'], title = 'Prevalent words in tweets')","989138d7":"nairobi_df = tweets_df.loc[tweets_df.user_location==\"Nairobi, Kenya\"]\nshow_wordcloud(nairobi_df['text'], title = 'Prevalent words in tweets from Nairobi')","aa22854b":"mombasa_df = tweets_df.loc[tweets_df.user_location==\"Mombasa\"]\nshow_wordcloud(mombasa_df['text'], title = 'Prevalent words in tweets from Mombasa')","b20acdab":"nakuru_df = tweets_df.loc[tweets_df.user_location==\"Nakuru\"]\nshow_wordcloud(nakuru_df['text'], title = 'Prevalent words in tweets from Nakuru')","319ad586":"def plot_features_distribution(features, title, df, isLog=False):\n    plt.figure(figsize=(12,6))\n    plt.title(title)\n    for feature in features:\n        if(isLog):\n            sns.distplot(np.log1p(df[feature]),kde=True,hist=False, bins=120, label=feature)\n        else:\n            sns.distplot(df[feature],kde=True,hist=False, bins=120, label=feature)\n    plt.xlabel('')\n    plt.legend()\n    plt.show()\n","743496f6":"tweets_df['hashtags'] = tweets_df['hashtags'].replace(np.nan, \"['None']\", regex=True)\ntweets_df['hashtags'] = tweets_df['hashtags'].apply(lambda x: x.replace('\\\\N',''))\ntweets_df['hashtags_count'] = tweets_df['hashtags'].apply(lambda x: len(x.split(',')))\nplot_features_distribution(['hashtags_count'], 'Hashtags per tweet (all data)', tweets_df)","d2f1d4a8":"tweets_df['hashtags_individual'] = tweets_df['hashtags'].apply(lambda x: x.split(','))\nfrom itertools import chain\nall_hashtags = set(chain.from_iterable(list(tweets_df['hashtags_individual'])))\nprint(f\"There are totally: {len(all_hashtags)}\")","a36434a4":"show_wordcloud(all_hashtags, title = 'Prevalent words in hashtags')","9d359913":"tweets_df['datedt'] = pd.to_datetime(tweets_df['date'])","4176c5a7":"tweets_df['year'] = tweets_df['datedt'].dt.year\ntweets_df['month'] = tweets_df['datedt'].dt.month\ntweets_df['day'] = tweets_df['datedt'].dt.day\ntweets_df['dayofweek'] = tweets_df['datedt'].dt.dayofweek\ntweets_df['hour'] = tweets_df['datedt'].dt.hour\ntweets_df['minute'] = tweets_df['datedt'].dt.minute\ntweets_df['dayofyear'] = tweets_df['datedt'].dt.dayofyear\ntweets_df['date_only'] = tweets_df['datedt'].dt.date","2cca97ca":"tweets_agg_df = tweets_df.groupby([\"date_only\"])[\"text\"].count().reset_index()\ntweets_agg_df.columns = [\"date_only\", \"count\"]","155f0f3e":"def plot_time_variation(df, x='date_only', y='count', hue=None, size=1, title=\"\", is_log=False):\n    f, ax = plt.subplots(1,1, figsize=(4*size,3*size))\n    g = sns.lineplot(x=x, y=y, hue=hue, data=df)\n    plt.xticks(rotation=90)\n    if hue:\n        plt.title(f'{y} grouped by {hue} | {title}')\n    else:\n        plt.title(f'{y} | {title}')\n    if(is_log):\n        ax.set(yscale=\"log\")\n    ax.grid(color='black', linestyle='dotted', linewidth=0.75)\n    plt.show() ","cf8a0d53":"plot_time_variation(tweets_agg_df, title=\"Number of tweets \/ day of year\",size=3)","91125b9b":"plot_count(\"dayofweek\", \"tweets \/ day of week\", tweets_df, size=3, ordered=False)","8d6d4fdb":"plot_count(\"dayofyear\", \"tweets \/ day of year\", tweets_df, size=3, ordered=False)","8df8656f":"plot_count(\"date_only\", \"tweets \/ date\", tweets_df,size=4, ordered=False)","ef05da5e":"plot_count(\"hour\", \"tweets \/ hour\", tweets_df,size=4, ordered=False)","f33cdc62":"plot_count(\"minute\", \"tweets \/ minute\", tweets_df,size=5, ordered=False)","2f507c6a":"### Hashtags analysis","17bcec52":"### Unique values","6013e35c":"# Data exploration\n\n\n## Glimpse the data","b0af0488":"## Load data","f05663c3":"## Visualize the data distribution","7b5590d3":"### Tweet source","46388cd9":"### Extract date and time features","cdf669a0":"### Most frequent values","8b9d9903":"### Time variation","0a61c5d9":"# Data preparation\n\n## Load packages","c9408e92":"### Text wordcloauds","72c2c77a":"### Missing data","a81a4568":"### User name","f712f389":"<h1>Kenya Political Tweets<\/h1>\n\n\n<img src=\"https:\/\/upload.wikimedia.org\/wikipedia\/commons\/f\/f6\/Coat_of_arms_of_Kenya_%28Official%29.svg\" height=\"200\"><\/img>\n\n\n# Introduction\n\n\nThe Dataset we are using here is collected using Twitter API, **tweepy** and Python package.\n","ac3a1227":"### User location"}}