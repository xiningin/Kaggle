{"cell_type":{"20c7ac52":"code","ebd95716":"code","e7861ea5":"code","234a350f":"code","21a3d0f0":"code","0e366651":"code","78826aff":"code","8f03bfbf":"code","07b22ea3":"code","82c1dff4":"code","6d86fb2a":"code","17877946":"code","c8e97879":"code","130e3b8b":"code","fc14f43f":"code","679f143c":"code","b06e37f7":"code","391b9625":"code","a91eadd2":"code","73998ca7":"code","193a4923":"code","8ba4b0c7":"code","a145b570":"code","eb6cdc87":"code","dbbbe342":"code","0dee8e4d":"markdown","51544666":"markdown","ba304228":"markdown","5a33c894":"markdown","6d3e06e6":"markdown","d284eee3":"markdown","68390b69":"markdown","2836b9a7":"markdown","56deeee7":"markdown","4779a9ff":"markdown","16c1a0bb":"markdown"},"source":{"20c7ac52":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","ebd95716":"import tensorflow as tf\nimport matplotlib.pyplot as plt\nfrom sklearn.model_selection import train_test_split\nfrom tensorflow.keras.utils import to_categorical\nfrom tensorflow.keras import models, datasets\nfrom tensorflow.keras.layers import Conv2D,MaxPooling2D,Flatten,Dense,Activation,Dropout\nfrom tensorflow.keras.optimizers import Adam\nfrom tensorflow.keras.callbacks import History\n","e7861ea5":"train=pd.read_csv(\"\/kaggle\/input\/digit-recognizer\/train.csv\")\ntest=pd.read_csv(\"\/kaggle\/input\/digit-recognizer\/test.csv\")","234a350f":"train.head()\n","21a3d0f0":"train.shape","0e366651":"test.head()","78826aff":"train_data=train.drop('label',axis=1)\ntrain_label=train['label']\n","8f03bfbf":"X_train,X_test,Y_train,Y_test=train_test_split(train_data,train_label,test_size=0.2,random_state=1)","07b22ea3":"X_train = np.reshape(np.array(X_train), (X_train.shape[0],28,28,1))\nX_test = np.reshape(np.array(X_test), (X_test.shape[0],28,28,1))\ntest_data=np.reshape(np.array(test), (test.shape[0],28,28,1))","82c1dff4":"X_train.shape","6d86fb2a":"train_label=Y_train.values\ntest_label=Y_test.values\n","17877946":"train_label","c8e97879":"Y_train=to_categorical(train_label)\nY_test=to_categorical(test_label)","130e3b8b":"plt.imshow(X_train[33])","fc14f43f":"model=models.Sequential()\nmodel.add(Conv2D(16,(5,5),strides=(1,1),padding='valid',input_shape=(28,28,1)))\nmodel.add(Activation(\"relu\"))\nmodel.add(MaxPooling2D(pool_size=(2,2)))\nmodel.add(Conv2D(16,(5,5),strides=(1,1),padding='valid'))\nmodel.add(Activation('relu'))\nmodel.add(MaxPooling2D(pool_size=(2,2)))\nmodel.add(Flatten())\nmodel.add(Dense(512,activation='relu'))\nmodel.add(Dropout(0.2))\nmodel.add(Dense(10,activation='softmax'))\n","679f143c":"model.compile(optimizer='adam',loss='categorical_crossentropy',metrics=['accuracy'])","b06e37f7":"history=model.fit(X_train,Y_train,batch_size=10,epochs=10,validation_data=(X_test,Y_test))","391b9625":"ev=model.evaluate(X_test,Y_test)\nprint(\"val_loss {} , val_acc {}\".format(ev[0],ev[1]))","a91eadd2":"df_loss_acc = pd.DataFrame(history.history)\ndf_loss=df_loss_acc[['loss','val_loss']]\ndf_acc=df_loss_acc[['accuracy','val_accuracy']]","73998ca7":"df_loss.plot()","193a4923":"df_acc.plot()","8ba4b0c7":"plt.imshow(test_data[50])\n","a145b570":"y_pred=model.predict_classes(test_data)\nprint(\"predicted value of the image\",(y_pred[50]))","eb6cdc87":"y_pred.shape","dbbbe342":"submissions=pd.DataFrame({\"ImageId\": list(range(1,len(y_pred)+1)),\n                         \"Label\": y_pred})\nsubmissions.to_csv(\"Submission.csv\", index=False, header=True)","0dee8e4d":"One hot encoding on the labels","51544666":"Build a CNN model","ba304228":"seperate the features and labels","5a33c894":"reshape the datasets","6d3e06e6":"Splitting the datasets into training and test","d284eee3":"Import necessary libraries","68390b69":"Visualising the loss and accuracy","2836b9a7":"Predict the values using one random index number\n","56deeee7":"Import the datasets","4779a9ff":"Plotting an image","16c1a0bb":"Train the model"}}